
// ++ Тищенко В.В. 

#Область ОписаниеПеременных

&НаКлиенте
Перем ОбработчикПослеФормированияНаКлиенте Экспорт;
&НаКлиенте
Перем ПараметрыОбработчика;
&НаКлиенте
Перем ИнтервалОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОтчета = "Карточка расчетов с клиентом";
	
	Если Параметры.Свойство("ОтборРасшифровка") Тогда
		Для Каждого ЭлементОтбор Из Параметры.ОтборРасшифровка Цикл
			Попытка
				Отчет[ЭлементОтбор.Ключ] = ЭлементОтбор.Значение;
			Исключение 
			КонецПопытки;
			
		КонецЦикла;
		
		Отчет.НеВыводитьДолгНаКонецПериода = Истина;
		
	КонецЕсли;
	
	Элементы.ГруппаОтборы.Видимость = Не Параметры.Свойство("СкрытьОтборы");
	
	СформироватьПриОткрытииФормы = Параметры.СформироватьПриОткрытииФормы;
	
	Если СформироватьПриОткрытииФормы Тогда
		Отчет.КонтрагентГруппаДляХолдинга 	= Параметры.Клиент;
		Отчет.ПериодОтчета.ДатаНачала		= НачалоДня(ТекущаяДата());
		Отчет.ПериодОтчета.ДатаОкончания	= КонецДня(ТекущаяДата());
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Контрагент","Видимость",Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"КонтрагентГруппаДляХолдинга","Доступность",Ложь);
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ОбособленноеПодраз	= Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(ТекущийПользователь.Подразделение);
	Если ОбособленноеПодраз.Организация.ИНН<>"5012089274" тогда
		Отчет.Организация 	= ОбособленноеПодраз.Организация;
	КонецЕсли;
	Если НЕ Пользователи.ЭтоПолноправныйПользователь(ТекущийПользователь) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Организация","Доступность",Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СформироватьПриОткрытииФормы Тогда
		ПодключитьОбработчикОжидания("СформироватьОтчетПриОткрытии",0.8,Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ТребуетсяОбработчик = ФоновоеЗаданиеЗапустить();
	Если ТребуетсяОбработчик Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
	Иначе
		ПослеФормированияНаКлиенте();
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ФоновоеЗаданиеЗапустить()

	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;

	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПериодОтчета",Отчет.ПериодОтчета);
	ПараметрыОтчета.Вставить("ДатаРасчетаПоказателей",Отчет.ДатаРасчетаПоказателей);
	ПараметрыОтчета.Вставить("ВывестиОборотыЗаВесьПериод",Отчет.ВывестиОборотыЗаВесьПериод);
	ПараметрыОтчета.Вставить("Организация",Отчет.Организация);
	ПараметрыОтчета.Вставить("КонтрагентГруппаДляХолдинга",Отчет.КонтрагентГруппаДляХолдинга);
	ПараметрыОтчета.Вставить("Контрагент",Отчет.Контрагент);
	
	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("ПараметрыОтчета"	, ПараметрыОтчета);
	ПараметрыФормированияОтчета.Вставить("ДокументРезультат", Результат);
	ПараметрыФормированияОтчета.Вставить("ДанныеРасшифровки", ДанныеРасшифровки);
	
	ПараметрыЗапуска 								= ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполнение отчета: %1'"),ИмяОтчета);
	ПараметрыЗапуска.ОжидатьЗавершение 				= Ложь;
	ПараметрыЗапуска.ЗапуститьНеВФоне				= Ложь;

	РезультатФоновогоЗадания 	= ДлительныеОперации.ВыполнитьВФоне("Отчеты.вогКарточкаРасчетовСКлиентом.СформироватьОтчетWebService",
								ПараметрыФормированияОтчета,ПараметрыЗапуска);
								
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		ПоказатьОшибкиФормирования(РезультатФоновогоЗадания.КраткоеПредставлениеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресРезультата;
	
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		ФоновоеЗаданиеЗагрузитьРезультат();
		ЗаданиеЗапущено = Ложь;
	Иначе
		ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		//+++ Терпогосян Д.Б. [01.10.2021 9:35:27] № CRM-1169
		//ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.вогCat;
		ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперацияБТС;
		//--- Терпогосян Д.Б. [01.10.2021 9:35:33] № CRM-1169		
		ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		
		ЗаданиеЗапущено = Истина;
	КонецЕсли;
	
	Возврат ЗаданиеЗапущено;
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Задание = ФоновоеЗаданиеПроверитьНаСервере();
	Если Задание.Выполняется Тогда
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	Иначе
		Если ОтчетСформирован Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет сформирован'"), , Заголовок);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет не сформирован'"), , Заголовок);
		КонецЕсли;
		ПослеФормированияНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеФормированияНаКлиенте()
	
	ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
	ОбновитьОтображениеДанных(); 
	Обработчик = ОбработчикПослеФормированияНаКлиенте;
	Если ТипЗнч(Обработчик) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(Обработчик, ОтчетСформирован);
		ОбработчикПослеФормированияНаКлиенте = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеПроверитьНаСервере()
	Задание = НайтиЗаданиеСлужебный(ФоновоеЗаданиеИдентификатор);
	Если Не Задание.Выполняется Тогда
		Если Задание.Успех Тогда
			ФоновоеЗаданиеЗагрузитьРезультат();
		Иначе
			ПоказатьОшибкиФормирования(Задание.Ошибка);
		КонецЕсли;
	КонецЕсли;
	Задание.Удалить("Ошибка");
	Возврат Задание;
КонецФункции

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при формировании:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ОписаниеОшибки;
	
	Если Не ПустаяСтрока(ПодробноеПредставлениеОшибки) Тогда
		ВариантыОтчетов.ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ПодробноеПредставлениеОшибки, Метаданные.Отчеты.вогКарточкаРасчетовСКлиентом);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат()
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
	Успех = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатФормирования, "Успех");
	Если Успех <> Истина Тогда
		ПоказатьОшибкиФормирования(РезультатФормирования.ТекстОшибки);
		Возврат;
	КонецЕсли;
		
	ОтображениеСостояния 								= Элементы.Результат.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";

	ОтчетСформирован = Истина;
	
	Результат.Очистить();
	Результат 			= РезультатФормирования.ТабличныйДокумент;
	ДанныеРасшифровки 	= РезультатФормирования.Расшифровка;
	
КонецПроцедуры

&НаСервере
Функция НайтиЗаданиеСлужебный(Знач Идентификатор)
	// Считывает состояние фонового задания по переданному идентификатору.
	//
	// Параметры:
	//   Идентификатор - УникальныйИдентификатор - Идентификатор фонового задания.
	//
	// Возвращаемое значение:
	//   Неопределено - Задание не найдено.
	//   Структура - Сведения о задании.
	//       * Выполняется - Булево - Истина когда фоновое задание еще выполняется.
	//       * Успешно     - Булево - Истина когда сеанс фонового задания завершился без ошибок.
	//       * Ошибка      - Строка, ИнформацияОбОшибке, Неопределено - Описание ошибки.
	//
	РезультатОтчета = Новый Структура("Выполняется, Успех, Ошибка", Ложь, Ложь, Неопределено);
	Если Идентификатор = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если Задание = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		РезультатОтчета.Выполняется = Истина;
	Иначе
		РезультатОтчета.Выполняется = Ложь;
		Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			РезультатОтчета.Успех = Истина;
		Иначе
			РезультатОтчета.Успех = Ложь;
			РезультатОтчета.Ошибка = Задание.ИнформацияОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОтчета;
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетПриОткрытии()
	СформироватьОтчет(Неопределено);
КонецПроцедуры 
 
#КонецОбласти

// -- Тищенко В.В.

// { VOG RMV 2019-03-15
#Область Методы_CRM_ФормаОтчета
// Весь нижеследующий код нагло спизжен из общей формы CRM_ФормаОтчета и немного адаптирован под работу в текущей форме, чтобы работали соответствующие кнопочки
&НаКлиенте
Процедура ВычислитьСумму(Команда)
	СтандартныеПодсистемыКлиент.ПоказатьРасчетЯчеек(ЭтотОбъект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочте(Команда)
	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		//ТекстВопроса = НСтр("ru = 'Отчет не сформирован. Сформировать?'");
		//Обработчик = Новый ОписаниеОповещения("СформироватьПередОтправкойПоПочте", ЭтотОбъект);
		//ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		ПоказатьПредупреждение(, НСтр("ru = 'Отчет не сформирован. Дождитесь завершения формирования отчета.'"), 15, "Отчет не сформирован");
	Иначе
		ПоказатьДиалогОтправкиПоПочте();
	КонецЕсли;
КонецПроцедуры

//&НаКлиенте
//Процедура СформироватьПередОтправкойПоПочте(Ответ, ДополнительныеПараметры) Экспорт
//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		Обработчик = Новый ОписаниеОповещения("ОтправитьПоПочтеПослеФормирования", ЭтотОбъект);
//		ОтчетыКлиент.СформироватьОтчет(ЭтотОбъект, Обработчик);
//	КонецЕсли;
//КонецПроцедуры

//&НаКлиенте
//Процедура ОтправитьПоПочтеПослеФормирования(ТабличныйДокументСформирован, ДополнительныеПараметры) Экспорт
//	Если ТабличныйДокументСформирован Тогда
//		ПоказатьДиалогОтправкиПоПочте();
//	КонецЕсли;
//КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоПочте()
	
	ОтчетНаименованиеТекущегоВарианта = "Структура задолженности клиента";
	
	Вложение = Новый Структура;
	Вложение.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор));
	Вложение.Вставить("Представление", ОтчетНаименованиеТекущегоВарианта);
	
	СписокВложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вложение);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		ПараметрыОтправки = МодульРаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
		ПараметрыОтправки.Тема = ОтчетНаименованиеТекущегоВарианта;
		ПараметрыОтправки.Вложения = СписокВложений;
		МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
// } VOG RMV 2019-03-15