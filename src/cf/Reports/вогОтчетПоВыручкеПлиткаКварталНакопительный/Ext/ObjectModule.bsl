#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Задать настройки формы отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - 
//   КлючВарианта - Строка, Неопределено - 
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриОпределенииПараметровВыбора = Истина;
	
КонецПроцедуры

// Вызывается в форме отчета перед выводом настройки.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - форма отчета.
//   СвойстваНастройки - Структура - описание настройки отчета, которая будет выведена в форме отчета.
//       * ОписаниеТипов - ОписаниеТипов - тип настройки.
//       * ЗначенияДляВыбора - СписокЗначений - объекты, которые будут предложены пользователю в списке
//           выбора. Дополняет список объектов, уже выбранных пользователем ранее.
//       * ЗапросЗначенийВыбора - Запрос - возвращает объекты, которыми необходимо дополнить ЗначенияДляВыбора.
//           Первой колонкой (с 0м индексом) должен выбираться объект,
//           который следует добавить в ЗначенияДляВыбора.Значение.
//           Для отключения автозаполнения
//           в свойство ЗапросЗначенийВыбора.Текст следует записать пустую строку.
//       * ОграничиватьВыборУказаннымиЗначениями - Булево - когда Истина, то выбор пользователя будет
//           ограничен значениями, указанными в ЗначенияДляВыбора (его конечным состоянием).
//
// См. также:
//   ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора().
//
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	
	Если ТипЗнч(СвойстваНастройки.ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
		Если СвойстваНастройки.ЭлементКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Компания") Тогда
			
			//СвойстваНастройки.ЗапросЗначенийВыбора.Текст = 
			//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			//|	Организации.НазваниеДляОтчетаГенеральномуДиректору КАК Компания
			//|ИЗ
			//|	Справочник.Организации КАК Организации
			//|ГДЕ
			//|	НЕ Организации.НазваниеДляОтчетаГенеральномуДиректору = """"
			//|	И НЕ Организации.НазваниеДляОтчетаГенеральномуДиректору = ""ТК ВОГ""";
			//
			//СвойстваНастройки.ЗначенияДляВыбора.Очистить();
			//СвойстваНастройки.ЭлементКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		
		ИначеЕсли СвойстваНастройки.ЭлементКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодразделениеОтбор") Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СтруктураПредприятия.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.ОбособленноеПодразделение = ИСТИНА
			|	И СтруктураПредприятия.ПометкаУдаления = ЛОЖЬ
			|	И НЕ СтруктураПредприятия.Ссылка = &Основное
			|	И НЕ СтруктураПредприятия.Код = ""000000006""";
			
			СвойстваНастройки.ЗапросЗначенийВыбора.Текст = ТекстЗапроса;
			СвойстваНастройки.ЗапросЗначенийВыбора.Параметры.Вставить("Основное", Справочники.СтруктураПредприятия.ОсновноеПодразделение);
			
		ИначеЕсли СвойстваНастройки.ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов")) Тогда
			
			ИмяЗначенияКлассификатора 	= "";
			ИмяСтрокой 					= Строка(СвойстваНастройки.ЭлементКД.ЛевоеЗначение);
			
			Если СтрНайти(ИмяСтрокой, "[") > 0 Тогда
				
				ЗаменяемаяЧасть = Лев(ИмяСтрокой, СтрНайти(ИмяСтрокой, "["));
				ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяСтрокой, ЗаменяемаяЧасть, "");
				ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяЗначенияКлассификатора, "]", "");
				
			ИначеЕсли СтрНайти(ИмяСтрокой, "(") > 0 Тогда
				
				ЗаменяемаяЧасть = Лев(ИмяСтрокой, СтрНайти(ИмяСтрокой, "("));
				ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяСтрокой, ЗаменяемаяЧасть, "");
				ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяЗначенияКлассификатора, ")", "");
				
			Иначе
				
				ИмяЗначенияКлассификатора = ИмяСтрокой;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(ИмяЗначенияКлассификатора) Тогда
				
				СвойстваНастройки.ЗапросЗначенийВыбора.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	CRM_ЗначенияКлассификаторов.Ссылка КАК Объект
				|ИЗ
				|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
				|			CRM_Классификаторы.Ссылка КАК Ссылка
				|		ИЗ
				|			ПланВидовХарактеристик.CRM_Классификаторы КАК CRM_Классификаторы
				|		ГДЕ
				|			CRM_Классификаторы.Наименование = &Наименование) КАК ВложенныйЗапрос
				|		ПО (CRM_ЗначенияКлассификаторов.Владелец = ВложенныйЗапрос.Ссылка)
				|ГДЕ
				|	CRM_ЗначенияКлассификаторов.ПометкаУдаления = ЛОЖЬ";
				
				СвойстваНастройки.ЗапросЗначенийВыбора.Параметры.Вставить("Наименование", ИмяЗначенияКлассификатора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеПараметраДатаОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДатаОтчетаПользователь").Значение;
	Если ТипЗнч(ЗначениеПараметраДатаОтчета) = Тип("Дата") Тогда
		ДатаОтчета 				= КонецДня(ЗначениеПараметраДатаОтчета);
	Иначе
		ДатаОтчета 				= КонецДня(ЗначениеПараметраДатаОтчета.Дата);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОтчета) Тогда
		ДатаОтчета 				= КонецДня(ТекущаяДата());
	КонецЕсли;
	
	ТекущийКвартал 				= Цел((Месяц(ДатаОтчета) - 1) / 3) + 1;
	УстановитьЗаголовкиПолей(ДатаОтчета, ТекущийКвартал);
	
	Cersanit 					= Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("6902b059-66b2-11e3-b895-005056ac8899"));
	Cersanit2017 				= Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("cadd7265-3943-11e7-9071-005056acd97c"));
	DIYПолка 					= Справочники.КомплектыПанелейДляПланирования.ПолучитьСсылку(Новый УникальныйИдентификатор("a2c32dab-07a5-11eb-8f2a-005056bcd3e3"));
	// ++ VOG Солодов В.В. 17.09.2021 CRM-1217
	КомплектСтойкаМалая1560 	= Справочники.КомплектыПанелейДляПланирования.ПолучитьСсылку(Новый УникальныйИдентификатор("d406e343-c792-11eb-bad0-005056bcd3e3"));
	// -- VOG Солодов В.В. 17.09.2021 CRM-1217
	ОборудованиеКлиента 		= Справочники.КомплектыПанелейДляПланирования.ПолучитьСсылку(Новый УникальныйИдентификатор("a2c32dac-07a5-11eb-8f2a-005056bcd3e3"));
	СтатусТТ 					= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8"));
	СтатусЗакрыт 				= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8"));
	
	ВидыТорговыхТочек 			= Новый Массив;
	ВидыТорговыхТочек.Добавить(Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
	ВидыТорговыхТочек.Добавить(Справочники.вогВидыТорговыхТочек.ТРТД);
	ВидыТорговыхТочек.Добавить(Справочники.вогВидыТорговыхТочек.Дистрибьютор);
	
	ТекущийПользователь 		= Пользователи.ТекущийПользователь();
	ПодразделениеПользователя 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение", Истина);
	ОбособленноеПодразделение 	= Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(ПодразделениеПользователя);
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(ТекущийПользователь);
	ДоступККлиентскойБазе 		= Пользователи.РолиДоступны("вогПолныйДоступККлиентскойБазеЧтение", ТекущийПользователь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель
	|	И ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
	Запрос.УстановитьПараметр("Исполнитель", ТекущийПользователь);
	Запрос.УстановитьПараметр("РольИсполнителя", Справочники.РолиИсполнителей.НайтиПоКоду("000000003"));
	
	РезультатЗапроса 			= Запрос.Выполнить();
	ЭтоДТН 						= Не РезультатЗапроса.Пустой();
	
	// +++ VOG Кулаков П.Л. 21.04.2021 DEV-438
	//ПараметрСегментНГ = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "СегментНГ");
	//ПараметрСегментНГЭконом = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "СегментНГЭконом");
	//Если Не ЗначениеЗаполнено(ПараметрСегментНГ.Значение) Тогда
	//	СегментНГ = Справочники.вогСегментыНоменклатурныхГрупп.ПолучитьСсылку(Новый УникальныйИдентификатор("b3086143-ede1-11eb-b39e-005056bc3fe8"));
	//КонецЕсли;
	//Если НЕ ПараметрСегментНГ.Использование Тогда
	//	ПараметрСегментНГ.Использование = Истина;
	//КонецЕсли;
	//Если Не ЗначениеЗаполнено(ПараметрСегментНГЭконом.Значение) Тогда
	//	СегментНГЭконом = Справочники.вогСегментыНоменклатурныхГрупп.ПолучитьСсылку(Новый УникальныйИдентификатор("22b4bfad-ede2-11eb-b39e-005056bc3fe8"));
	//КонецЕсли;
	
	//+++ Терпогосян Д.Б. [04.08.2021 15:49:39] № 
	//СегментНГ = Справочники.вогСегментыНоменклатурныхГрупп.ПолучитьСсылку(Новый УникальныйИдентификатор("b3086143-ede1-11eb-b39e-005056bc3fe8"));
	СегментНГ = Справочники.вогСегментыНоменклатурныхГрупп.НайтиПоРеквизиту("Идентификатор", "b3086143-ede1-11eb-b39e-005056bc3fe8");
	//СегментНГЭконом = Справочники.вогСегментыНоменклатурныхГрупп.ПолучитьСсылку(Новый УникальныйИдентификатор("22b4bfad-ede2-11eb-b39e-005056bc3fe8"));
	СегментНГЭконом = Справочники.вогСегментыНоменклатурныхГрупп.НайтиПоРеквизиту("Идентификатор", "22b4bfad-ede2-11eb-b39e-005056bc3fe8");
	//--- Терпогосян Д.Б. [04.08.2021 15:50:08] №  

	СписокНГ = РегистрыСведений.НоменклатурныеГруппыСегмента.ПолучитьМассивНоменклатурныхГруппСегмента(СегментНГ);
	СписокНГПлюсЭконом = РегистрыСведений.НоменклатурныеГруппыСегмента.ПолучитьМассивНоменклатурныхГруппСегмента(СегментНГЭконом);
	//СписокНГ = ПолучитьСписокНоменклатурныхПозицийПланирования();
	//СписокНГ.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("cadd7265-3943-11e7-9071-005056acd97c")));
	//СписокНГПлюсЭконом = ПолучитьСписокНоменклатурныхПозиций();
	//СписокНГПлюсЭконом.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("dea158ad-2341-11e6-b8cf-005056acd97c")));
	
	ПолеКомпоновкиНГ = Новый ПолеКомпоновкиДанных("НоменклатурнаяГруппа");
	
	ОтборЭконом = Ложь;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиНГ Тогда
			Если ЭлементОтбора.Представление = "НГ" Тогда
				ЭлементОтбора.ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы");
				ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(СписокНГ);
			КонецЕсли;
			Если ЭлементОтбора.Представление = "НГ + эконом" Тогда
				ИдНастройкиНГЭконом = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
				ЭлементОтбора.ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы");
				ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(СписокНГПлюсЭконом);
				Для Каждого ЭлементНастройки Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
					Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ИдНастройкиНГЭконом И ЭлементНастройки.Использование Тогда
				    	ОтборЭконом = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// --- VOG Кулаков П.Л.
	
	//СписокНоменклатурныхГрупп = Новый Массив;
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("3d9d7ea6-9214-11e3-ba76-005056ac259f"))); 	// Cersanit эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("0724a7b8-9214-11e3-ba76-005056ac259f"))); 	// Cersanit грес
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("fe9b747f-66b5-11e3-b895-005056ac8899"))); 	// Керамин Грес
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("890358c7-9215-11e3-ba76-005056ac259f"))); 	// Керамин эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("6305ae54-66b2-11e3-b895-005056ac8899"))); 	// Лассельсбергер Грес
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("beb8fcb7-9215-11e3-ba76-005056ac259f"))); 	// Лассельсбергер эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("4fb1c538-8af2-11e6-bdbb-005056acd97c"))); 	// Cersanit эксклюзив эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("ac73bba4-d609-11e8-90d6-005056acd97c"))); 	// Евро-Керамика эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("718e0936-4466-11e8-8a33-005056acd97c"))); 	// Глобал Тайл Керосса
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("93d2e7ca-9214-11e3-ba76-005056ac259f"))); 	// Глобал Тайл Брест
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("ce968682-8b47-11e9-b50e-005056acd97c"))); 	// Глобал Тайл Волгоград
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("d9c62157-8b47-11e9-b50e-005056acd97c"))); 	// Глобал Тайл Волгоград эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("bbf9cf19-9214-11e3-ba76-005056ac259f"))); 	// Глобал Тайл Контакт
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("dbded927-9214-11e3-ba76-005056ac259f"))); 	// Глобал Тайл Контакт эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("bcd952fb-943b-11ea-9d8b-005056acd97c"))); 	// Глобал Тайл Мозаика
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("9b07ca14-66bc-11e3-b895-005056ac8899"))); 	// Meissen грес
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("d1baae94-1cdc-11eb-b333-005056bcd3e3"))); 	// Concept GT эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("5016c309-9428-11ea-9d8b-005056acd97c"))); 	// Интеркерама мозаика
	
	НачалоКварталаПланирования 	= КонецКвартала(ДатаОтчета) + 1;
	КонецКварталаПланирования 	= КонецКвартала(НачалоКварталаПланирования);
	НачалоТекущегоМесяца 		= НачалоМесяца(ДатаОтчета);
	// +++ VOG Кулаков П.Л. 29.06.2021 DEV-699
	//КонецПрошлогоМесяца 		= НачалоМесяца(ДатаОтчета) - 1;
	КонецПрошлогоМесяца 		= ДатаОтчета;
	// --- VOG Кулаков П.Л.
	
	НачалоТекущегоГода 			= НачалоГода(ДатаОтчета);
	НачалоПродажПрошлыйГод 		= ДобавитьМесяц(НачалоТекущегоГода, -12);
	КонецПродажПрошлыйГод 		= ДобавитьМесяц(КонецКварталаПланирования, -12);
	
	СценарийПланНаКвартал 			= Справочники.вогСценарииПланирования.ПланНаКвартал;
	СценарийПланНаГодПоМесяцам 		= Справочники.вогСценарииПланирования.ПланНаГод;
	СценарийПланНаМесяцПоКлиентам 	= Справочники.вогСценарииПланирования.ПланНаМесяцПоКлиентам;
	// +++ VOG Кулаков П.Л. 23.04.2021 DEV-438
	СценарийПланПоБрендамКвартал 	= Справочники.вогСценарииПланирования.ПланНаКварталПоБрендам;
	// --- VOG Кулаков П.Л.
	ВерсияСценарияПланНаКвартал 	= Справочники.вогВерсииСценариевПланирования.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогВерсииСценариевПланирования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогВерсииСценариевПланирования КАК вогВерсииСценариевПланирования
		|ГДЕ
		|	вогВерсииСценариевПланирования.ПометкаУдаления = ЛОЖЬ
		|	И вогВерсииСценариевПланирования.Владелец = &СценарийПланирования";
	
	Запрос.УстановитьПараметр("СценарийПланирования", СценарийПланНаКвартал);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВерсияСценарияПланНаКвартал = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	// Установка параметров
	УстанавливаемыеПараметры = Новый Соответствие;
	// +++ VOG Кулаков П.Л. 21.04.2021 DEV-438
	УстанавливаемыеПараметры.Вставить("ОтборЭконом", 					ОтборЭконом);
	УстанавливаемыеПараметры.Вставить("СценарийПланПоБрендамКвартал", 	СценарийПланПоБрендамКвартал);
	// --- VOG Кулаков П.Л.
	УстанавливаемыеПараметры.Вставить("Направление", 					Справочники.НаправленияДеятельности.Плитка);
	УстанавливаемыеПараметры.Вставить("DIYПолка", 						DIYПолка);
	УстанавливаемыеПараметры.Вставить("ОборудованиеКлиента", 			ОборудованиеКлиента);
	УстанавливаемыеПараметры.Вставить("СтатусТТ", 						СтатусТТ);
	УстанавливаемыеПараметры.Вставить("ПодразделениеПользователя", 		ОбособленноеПодразделение);
	УстанавливаемыеПараметры.Вставить("Cersanit", 						Cersanit);
	УстанавливаемыеПараметры.Вставить("Cersanit2017", 					Cersanit2017);
	УстанавливаемыеПараметры.Вставить("ПолныйДоступКПодразделениям", 	ЭтоДТН Или ЭтоПолноправныйПользователь Или ДоступККлиентскойБазе);
	//УстанавливаемыеПараметры.Вставить("СписокНоменклатурныхГрупп", 		СписокНоменклатурныхГрупп);
	//УстанавливаемыеПараметры.Вставить("ВидыТорговыхТочек", 				ВидыТорговыхТочек);
	УстанавливаемыеПараметры.Вставить("СтатусЗакрыт", 					СтатусЗакрыт);
	УстанавливаемыеПараметры.Вставить("РольМенеджер", 					Справочники.РолиКонтактныхЛицПартнеров.Менеджер);
	УстанавливаемыеПараметры.Вставить("РольКоординатор", 				Справочники.РолиКонтактныхЛицПартнеров.Координатор);
	
	УстанавливаемыеПараметры.Вставить("ДатаОтчета", 					ДатаОтчета);
	УстанавливаемыеПараметры.Вставить("КонецКварталаПланирования", 		КонецКварталаПланирования);
	УстанавливаемыеПараметры.Вставить("НачалоКварталаПланирования", 	НачалоКварталаПланирования);
	УстанавливаемыеПараметры.Вставить("НачалоТекущегоМесяца", 			НачалоТекущегоМесяца);
	УстанавливаемыеПараметры.Вставить("КонецПрошлогоМесяца", 			КонецПрошлогоМесяца);
	УстанавливаемыеПараметры.Вставить("НачалоТекущегоГода", 			НачалоТекущегоГода);
	УстанавливаемыеПараметры.Вставить("КонецПродажПрошлыйГод", 			КонецПродажПрошлыйГод);
	УстанавливаемыеПараметры.Вставить("НачалоПродажПрошлыйГод", 		НачалоПродажПрошлыйГод);
	
	УстанавливаемыеПараметры.Вставить("СценарийПланНаКвартал", 			СценарийПланНаКвартал);
	УстанавливаемыеПараметры.Вставить("СценарийПланНаГодПоМесяцам", 	СценарийПланНаГодПоМесяцам);
	УстанавливаемыеПараметры.Вставить("СценарийПланНаМесяцПоКлиентам", 	СценарийПланНаМесяцПоКлиентам);
	УстанавливаемыеПараметры.Вставить("ВерсияСценарияПланНаКвартал", 	ВерсияСценарияПланНаКвартал);
	
	УстанавливаемыеПараметры.Вставить("СегментНГ", 						СегментНГ);
	УстанавливаемыеПараметры.Вставить("СегментНГЭконом", 				СегментНГЭконом);
	
	// ++ VOG Солодов В.В. 17.09.2021 CRM-1217
	УстанавливаемыеПараметры.Вставить("КомплектСтойкаМалая1560", 		КомплектСтойкаМалая1560);
	// -- VOG Солодов В.В. 17.09.2021 CRM-1217
	
	КомпоновкаДанныхКлиентСервер.УстановитьКоллекциюПараметров(КомпоновщикНастроек, УстанавливаемыеПараметры);
	
	
	//СписокНГ = ПолучитьСписокНоменклатурныхПозицийПланирования();
	//СписокНГ.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("cadd7265-3943-11e7-9071-005056acd97c")));
	//СписокНГПлюсЭконом = ПолучитьСписокНоменклатурныхПозиций();
	//
	//ПолеКомпоновкиНГ = Новый ПолеКомпоновкиДанных("НоменклатурнаяГруппа");
	//
	//Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
	//	Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиНГ Тогда
	//		Если ЭлементОтбора.Представление = "НГ" Тогда
	//			ЭлементОтбора.ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы");
	//			ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(СписокНГ);
	//			ЭлементОтбора.Использование = Ложь;
	//		КонецЕсли;
	//		Если ЭлементОтбора.Представление = "НГ + эконом" Тогда
	//			ЭлементОтбора.ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы");
	//			ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(СписокНГПлюсЭконом);
	//			ЭлементОтбора.Использование = Ложь;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки 			= Новый ДанныеРасшифровкиКомпоновкиДанных;
	Настройки 					= КомпоновщикНастроек.ПолучитьНастройки();
	
	МакетКомпоновкиДанных 		= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,, ДанныеРасшифровки, Истина, Истина);
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ВключитьВозможностьСверткиГруппыКолонок(ДокументРезультат, "Количество");
	ВключитьВозможностьСверткиГруппыКолонок(ДокументРезультат, "Выручка");
	ВключитьВозможностьСверткиГруппыКолонок(ДокументРезультат, "Цена (без НДС)");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗаголовкиПолей(ДатаДокумента, ТекущийКвартал)
	
	Для Каждого Поле Из СхемаКомпоновкиДанных.НаборыДанных.Данные.Поля Цикл
		
		Если СтрНайти(Поле.Заголовок, "%КолвоМес%") > 0 Тогда
			
			КолвоМесяцев = (ТекущийКвартал + 1) * 3;
			
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%КолвоМес%", СтрШаблон("%1 мес.", КолвоМесяцев));
			
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Текущий год%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Текущий год%", Формат(ДатаДокумента, "ДФ=yyyy"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Прошлый год%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Прошлый год%", Формат(НачалоГода(ДатаДокумента) - 1, "ДФ=yyyy"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Следующий квартал%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Следующий квартал%", СтрШаблон("%1 кв", ТекущийКвартал + 1));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьВозможностьСверткиГруппыКолонок(ДокументРезультат, НазваниеГруппыКолонок, НомерКолонкиВГруппировке = 1)
	
	// Первая таблица
	// найдем первую ячейку группы
	ПерваяЯчейкаГруппы = ДокументРезультат.НайтиТекст(НазваниеГруппыКолонок,,,, Истина);
	Если ПерваяЯчейкаГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// определим количество колонок группы (используется особенность объединенных ячеек - одинаковый текст в них)
	КоличествоКолонокГруппы = 1;
	Пока ПерваяЯчейкаГруппы.Текст = ДокументРезультат.Область(ПерваяЯчейкаГруппы.Верх, ПерваяЯчейкаГруппы.Лево + КоличествоКолонокГруппы).Текст Цикл
		КоличествоКолонокГруппы = КоличествоКолонокГруппы + 1;
	КонецЦикла;
	
	КолонкаНачалаСвертки 	= ПерваяЯчейкаГруппы.Лево + НомерКолонкиВГруппировке;
	КолонкаКонцаСвертки 	= ПерваяЯчейкаГруппы.Лево + КоличествоКолонокГруппы - 1;
	
	// сгруппируем колонки группы
	ДокументРезультат.Область(, КолонкаНачалаСвертки, ПерваяЯчейкаГруппы.Верх, КолонкаКонцаСвертки).Сгруппировать();
	
КонецПроцедуры

Функция ПолучитьСписокНоменклатурныхПозицийПланирования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогРаспределениеDIYПоНоменклатурнымГруппамСрезПоследних.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ вт_НоменклатурныеГруппыРаспределение
		|ИЗ
		|	РегистрСведений.вогРаспределениеDIYПоНоменклатурнымГруппам.СрезПоследних(, ) КАК вогРаспределениеDIYПоНоменклатурнымГруппамСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	вогРаспределениеDIYПоНоменклатурнымГруппамСрезПоследних.НоменклатурнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ вт_НоменклатурныеГруппы
		|ИЗ
		|	РегистрСведений.вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой КАК вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой
		|
		|СГРУППИРОВАТЬ ПО
		|	вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой.НоменклатурнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вт_НоменклатурныеГруппыРаспределение.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ вт_ИтоговыеДанные
		|ИЗ
		|	вт_НоменклатурныеГруппыРаспределение КАК вт_НоменклатурныеГруппыРаспределение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт_НоменклатурныеГруппы.НоменклатурнаяГруппа
		|ИЗ
		|	вт_НоменклатурныеГруппы КАК вт_НоменклатурныеГруппы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вт_ИтоговыеДанные.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ИЗ
		|	вт_ИтоговыеДанные КАК вт_ИтоговыеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ИтоговыеДанные.НоменклатурнаяГруппа";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("НоменклатурнаяГруппа");
	
КонецФункции

Функция ПолучитьСписокНоменклатурныхПозиций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогРаспределениеDIYПоНоменклатурнымГруппамСрезПоследних.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ вт_НоменклатурныеГруппыРаспределение
		|ИЗ
		|	РегистрСведений.вогРаспределениеDIYПоНоменклатурнымГруппам.СрезПоследних(, ) КАК вогРаспределениеDIYПоНоменклатурнымГруппамСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	вогРаспределениеDIYПоНоменклатурнымГруппамСрезПоследних.НоменклатурнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ вт_НоменклатурныеГруппы
		|ИЗ
		|	РегистрСведений.вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой КАК вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой
		|
		|СГРУППИРОВАТЬ ПО
		|	вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой.НоменклатурнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вт_НоменклатурныеГруппыРаспределение.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ вт_ИтоговыеДанные
		|ИЗ
		|	вт_НоменклатурныеГруппыРаспределение КАК вт_НоменклатурныеГруппыРаспределение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт_НоменклатурныеГруппы.НоменклатурнаяГруппа
		|ИЗ
		|	вт_НоменклатурныеГруппы КАК вт_НоменклатурныеГруппы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вт_ИтоговыеДанные.НоменклатурнаяГруппа.Родитель КАК ГруппаНГ
		|ИЗ
		|	вт_ИтоговыеДанные КАК вт_ИтоговыеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ИтоговыеДанные.НоменклатурнаяГруппа.Родитель";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("ГруппаНГ");
	
КонецФункции

#КонецОбласти

#КонецЕсли