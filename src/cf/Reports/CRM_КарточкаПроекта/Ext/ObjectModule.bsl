#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


Перем Макет;
Перем ТекДата;
Перем Проект;
Перем ТаблицаОтчета;
Перем СтруктураДанные;

Процедура СформироватьОтчетПоПроекту(ТекПроект)
	Если Не ЗначениеЗаполнено(ТекПроект) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	Проект = ТекПроект;
	
	ВывестиОбластьБезПараметров("ПустаяСтрокаРазделитель");
	
	ВывестиДанныеПоПроекту();
	ВывестиДанныеПоИсполнителю();
	ВывестиДанныеПоЗаказчику();
	Если ЭтотОбъект.Этапы Тогда
		ВывестиДанныеПоЭтапам();
	КонецЕсли;
	Если ЭтотОбъект.КонтрольныеТочки Тогда
		ВывестиДанныеПоКонтрольнымТочкам();
	КонецЕсли;
	Если ЭтотОбъект.ТекущиеЗадачи Тогда
		ВывестиДанныеПоЗадачам();
	КонецЕсли;
КонецПроцедуры

// Процедура формирует отчет
//
Процедура СформироватьОтчет(ТабличныйДокументРезультат, МассивПроектов)  Экспорт
	Макет = ПолучитьМакет("КарточкаПроекта");
	ТекДата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	ТаблицаОтчета = ТабличныйДокументРезультат;
	
	Для Каждого Проект Из МассивПроектов Цикл
		СформироватьОтчетПоПроекту(Проект);
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьДанныеПоПроекту()
	Запрос = Новый Запрос;
	Запрос.Текст ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Проекты.Ссылка						КАК Проект,
	|	Проекты.Наименование				КАК Наименование,
	|	Проекты.Ответственный				КАК Ответственный,
	|	Проекты.CRM_ЭтоПроект				КАК ЭтоПроект,
	|	Проекты.Завершен					КАК Завершен,
	|	Проекты.CRM_Партнер					КАК Партнер,
	|	Проекты.CRM_КонтактноеЛицоПартнера	КАК КонтактноеЛицо,
	|	Проекты.ПлановаяДатаНачала			КАК ПлановаяДатаНачала,
	|	Проекты.ПлановаяДатаОкончания		КАК ПлановаяДатаОкончания,
	|	Проекты.CRM_Подразделение			КАК Подразделение,
	|	Проекты.CRM_ТекущийЭтап				КАК ТекущийЭтап,
	|	Проекты.CRM_Планируемый				КАК Планируемый
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Ссылка = &Проект
	|	"+?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(),"И НЕ Проекты.ЭтоГруппа","")+"
	|;
	|//////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство	КАК Свойство,
	|	ДополнительныеРеквизиты.Значение	КАК Значение
	|ИЗ
	|	Справочник.Проекты.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка = &Проект
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Проект
	|	
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|	
	|	
	|";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[0].Пустой() Тогда
		СтруктураДанные.Вставить("ДанныеПоПроекту", МассивРезультатов[0]);
	КонецЕсли;
	Если Не МассивРезультатов[1].Пустой() Тогда
		СтруктураДанные.Вставить("ДополнительныеРеквизитыПроекта", МассивРезультатов[1]);
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьДанныеПоИсполнителю()
	Если Не СтруктураДанные.Свойство("ДанныеПоПроекту") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоПроекту = СтруктураДанные.ДанныеПоПроекту.Выбрать();
	Если Не ДанныеПоПроекту.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеПоПроекту.Ответственный) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Пользователи.Ссылка					КАК Ответственный,
	|	Пользователи.Наименование			КАК Наименование,
	|	Пользователи.Подразделение	КАК Подразделение
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|
	|ГДЕ
	|	Пользователи.Ссылка = &Ответственный
	|;
	|//////////////////////////////////////////////////////////////////////////////////////////////	
	|	
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Тип			КАК Тип,
	|	КонтактнаяИнформация.Вид			КАК Вид,
	|	КонтактнаяИнформация.Представление	КАК Представление
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Ответственный
	|	
	|");
	
	Запрос.УстановитьПараметр("Ответственный", ДанныеПоПроекту.Ответственный);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[0].Пустой() Тогда
		СтруктураДанные.Вставить("ДанныеПоИсполнителю", МассивРезультатов[0]);
	КонецЕсли;
	Если Не МассивРезультатов[1].Пустой() Тогда
		СтруктураДанные.Вставить("КИИсполнителя", МассивРезультатов[1]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеПоЗаказчику()
	Если Не СтруктураДанные.Свойство("ДанныеПоПроекту") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоПроекту = СтруктураДанные.ДанныеПоПроекту.Выбрать();
	Если Не ДанныеПоПроекту.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеПоПроекту.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Партнеры.Ссылка			КАК Партнер,
	|	Партнеры.Наименование	КАК Наименование
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|;
	|///////////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Тип			КАК Тип,
	|	КонтактнаяИнформация.Вид			КАК Вид,
	|	КонтактнаяИнформация.Представление	КАК Представление
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Партнер
	|;
	|///////////////////////////////////////////////////////////////////////////////////////
	|");
	Запрос.УстановитьПараметр("Партнер", ДанныеПоПроекту.Партнер);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Если Не МассивРезультатов[0].Пустой() Тогда
		СтруктураДанные.Вставить("ДанныеПоЗаказчику", МассивРезультатов[0]);
	КонецЕсли;
	Если Не МассивРезультатов[1].Пустой() Тогда
		СтруктураДанные.Вставить("КИЗаказчика", МассивРезультатов[1]);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеПоПроекту.КонтактноеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КонтактныеЛицаПартнеров.Ссылка			КАК КонтактноеЛицо,
	|	КонтактныеЛицаПартнеров.Наименование	КАК Наименование,
	|	КонтактныеЛицаПартнеров.CRM_Должность	КАК Должность
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Ссылка = &КонтактноеЛицо
	|	
	|;
	|///////////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Тип			КАК Тип,
	|	КонтактнаяИнформация.Вид			КАК Вид,
	|	КонтактнаяИнформация.Представление	КАК Представление
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &КонтактноеЛицо
	|;
	|///////////////////////////////////////////////////////////////////////////////////////
	|	
	|");
	Запрос.УстановитьПараметр("КонтактноеЛицо", ДанныеПоПроекту.КонтактноеЛицо);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Если Не МассивРезультатов[0].Пустой() Тогда
		СтруктураДанные.Вставить("ДанныеПоКонтактномуЛицуЗаказчика", МассивРезультатов[0]);
	КонецЕсли;
	Если Не МассивРезультатов[1].Пустой() Тогда
		СтруктураДанные.Вставить("КИКонтактногоЛицаЗаказчика", МассивРезультатов[1]);
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьДанныеПоЭтапам()
	Если Не СтруктураДанные.Свойство("ДанныеПоПроекту") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоПроекту = СтруктураДанные.ДанныеПоПроекту.Выбрать();
	Если Не ДанныеПоПроекту.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеПоПроекту.ЭтоПроект Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЭтапыПроектов.Ссылка					КАК Этап,
	|	//ЭтапыПроектов.ЭтоГруппа					КАК ЭтоГруппа,
	|	ЭтапыПроектов.Ответственный				КАК Ответственный,
	|	СУММА(ЕСТЬNULL(ЗатратыЭтапов.Сумма, 0))	КАК Сумма
	|ИЗ
	|	Справочник.CRM_ЭтапыПроектов КАК ЭтапыПроектов
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.CRM_ЭтапыПроектов.Затраты КАК ЗатратыЭтапов
	|	
	|ПО
	|	ЭтапыПроектов.Ссылка = ЗатратыЭтапов.Ссылка
	|	
	|ГДЕ
	|	ЭтапыПроектов.Владелец = &Проект
	|	И НЕ ЭтапыПроектов.ПометкаУдаления
	|	
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПроектов.Ссылка
	|	
	|УПОРЯДОЧИТЬ ПО
	|	//ЕСТЬNULL(ЭтапыПроектов.ЭтоГруппа, ЛОЖЬ) УБЫВ,
	|	ЭтапыПроектов.РеквизитДопУпорядочивания
	|	
	|ИТОГИ
	|	СУММА(Сумма) 
	|ПО
	|	Этап ИЕРАРХИЯ
	|	
	|");
	Запрос.УстановитьПараметр("Проект", Проект);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ДанныеПоЭтапам", РезультатЗапроса);
	
КонецПроцедуры

Процедура ПолучитьДанныеПоКонтрольнымТочкам()
	Если Не СтруктураДанные.Свойство("ДанныеПоПроекту") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КонтрольныеТочки.Ссылка			КАК КонтрольнаяТочка,
	|	КонтрольныеТочки.НаВесьДень		КАК НаВесьДень,
	|	КонтрольныеТочки.Тема			КАК Тема,
	|	КонтрольныеТочки.Дата			КАК Дата,
	|	КонтрольныеТочки.ДатаЗакрытия	КАК ДатаЗакрытия,
	|	КонтрольныеТочки.Этап			КАК Этап
	|	
	|ИЗ
	|	Документ.CRM_КонтрольнаяТочкаПроекта КАК КонтрольныеТочки
	|	
	|ГДЕ
	|	КонтрольныеТочки.Проект = &Проект
	|	И НЕ КонтрольныеТочки.ПометкаУдаления
	|	И КонтрольныеТочки.Статус = ЗНАЧЕНИЕ(Перечисление.CRM_СтатусыКонтрольныхТочек.Запланирована)
	|	
	|");
	Запрос.УстановитьПараметр("Проект", Проект);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ДанныеПоКонтрольнымТочкам", РезультатЗапроса);
	
КонецПроцедуры

Процедура ПолучитьДанныеПоЗадачам()
	Если Не СтруктураДанные.Свойство("ДанныеПоПроекту") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка						КАК Задача,
	|	ЗадачаИсполнителя.Наименование					КАК Наименование,
	|	ЗадачаИсполнителя.Исполнитель					КАК Исполнитель,
	|	ЗадачаИсполнителя.РольИсполнителя				КАК РольИсполнителя,
	|	ЗадачаИсполнителя.БизнесПроцесс					КАК БизнесПроцесс,
	|	ЗадачаИсполнителя.БизнесПроцесс.Наименование	КАК БизнесПроцессНаименование,
	|	ЗадачаИсполнителя.ДатаНачала					КАК ДатаНачала,
	|	ЗадачаИсполнителя.СрокИсполнения				КАК СрокИсполнения
	|	
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|	
	|ГДЕ
	|	ВЫРАЗИТЬ(ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс.CRM_БизнесПроцесс).Проект = &Проект
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачаИсполнителя.ДатаНачала
	|");
	
	Запрос.УстановитьПараметр("Проект", Проект);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ДанныеПоЗадачам", РезультатЗапроса);
КонецПроцедуры

Процедура ВывестиДанныеПоПроекту()
	ПолучитьДанныеПоПроекту();
	ТабДок = Новый ТабличныйДокумент;
	Если Не СтруктураДанные.Свойство("ДанныеПоПроекту") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоПроекту = СтруктураДанные.ДанныеПоПроекту.Выбрать();
	Если Не ДанныеПоПроекту.Следующий() Тогда
		Возврат;
	КонецЕсли;
	// Заголовок отчета
	Область = Макет.ПолучитьОбласть("Заголовок");
	ЗаполнитьЗначенияСвойств(Область.Параметры, ДанныеПоПроекту);
	Область.Параметры.ПроектПроцесс = ?(ДанныеПоПроекту.ЭтоПроект, НСтр("ru = 'проекта'"), НСтр("ru = 'процесса'"));
	Область.Параметры.Наименование = ДанныеПоПроекту.Наименование;
	Область.Параметры.Дата = Формат(ТекДата, "ДФ=dd.MM.yyyy");
	Если ДанныеПоПроекту.Завершен Тогда
		Область.Параметры.СтрокаЗавершен = "(" + НСтр("ru = 'завершен'") + ")";
	КонецЕсли;
	Область.Параметры.ЗначениеРасшифровки = Проект;
	ТаблицаОтчета.Вывести(Область);
	
	ВывестиОбластьБезПараметров("ПустаяСтрокаРазделитель");
	// Заголовок Данные проекта
	Область = Макет.ПолучитьОбласть("ЗаголовокПодраздела");
	Область.Параметры.Заголовок = НСтр("ru = 'Данные проекта'");
	
	ТабДок.Вывести(Область);
	
	ТабДок.НачатьГруппуСтрок();
	
	Область = Макет.ПолучитьОбласть("ДанныеПроекта");
	ЗаполнитьЗначенияСвойств(Область.Параметры, ДанныеПоПроекту);
	
	Если ЗначениеЗаполнено(ДанныеПоПроекту.ПлановаяДатаНачала) И ЗначениеЗаполнено(ДанныеПоПроекту.ПлановаяДатаОкончания) Тогда
		Область.Параметры.ЗаголовокПлановаяДатаНачалаОкончания = НСтр("ru = 'Плановая дата начала/окончания'");
		
		Область.Параметры.СтрокаПлановаяДатаНачалаОкончания = Формат(ДанныеПоПроекту.ПлановаяДатаНачала, "ДФ=dd.MM.yyyy")
			+ " / " + Формат(ДанныеПоПроекту.ПлановаяДатаОкончания, "ДФ=dd.MM.yyyy");
		//
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеПоПроекту.ПлановаяДатаНачала) И Не ЗначениеЗаполнено(ДанныеПоПроекту.ПлановаяДатаОкончания) Тогда
		Область.Параметры.ЗаголовокПлановаяДатаНачалаОкончания = НСтр("ru = 'Плановая дата начала'");
		
		Область.Параметры.СтрокаПлановаяДатаНачалаОкончания = Формат(ДанныеПоПроекту.ПлановаяДатаНачала, "ДФ=dd.MM.yyyy")
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеПоПроекту.ПлановаяДатаНачала) И ЗначениеЗаполнено(ДанныеПоПроекту.ПлановаяДатаОкончания) Тогда
		Область.Параметры.ЗаголовокПлановаяДатаНачалаОкончания = НСтр("ru = 'Плановая дата окончания'");
		
		Область.Параметры.СтрокаПлановаяДатаНачалаОкончания = Формат(ДанныеПоПроекту.ПлановаяДатаОкончания, "ДФ=dd.MM.yyyy")
		
	Иначе
		Область.Параметры.ЗаголовокПлановаяДатаНачалаОкончания = НСтр("ru = 'Плановая дата начала/окончания'");
		
		Область.Параметры.СтрокаПлановаяДатаНачалаОкончания = НСтр("ru = 'Даты не указаны'");
		
	КонецЕсли;
	
	Область.Параметры.Планируемый = ?(ДанныеПоПроекту.Планируемый, НСтр("ru = 'Да'"), НСтр("ru = 'Нет'"));
	
	Если ЗначениеЗаполнено(ДанныеПоПроекту.ТекущийЭтап) Тогда
		Область.Параметры.ТекущийЭтап = Строка(ДанныеПоПроекту.ТекущийЭтап);
		Область.Параметры.ЗначениеРасшифровкиЭтап = ДанныеПоПроекту.ТекущийЭтап;
	Иначе
		Область.Параметры.ТекущийЭтап = "";
		Область.Параметры.ЗначениеРасшифровкиЭтап = Неопределено;
	КонецЕсли;
	
	ТабДок.Вывести(Область);
	
	Если СтруктураДанные.Свойство("ДополнительныеРеквизитыПроекта") Тогда
		ДополнительныеРеквизитыПроекта = СтруктураДанные.ДополнительныеРеквизитыПроекта.Выбрать();
		
		Область = Макет.ПолучитьОбласть("ДанныеДополнительныеРеквизиты");
		
		Пока ДополнительныеРеквизитыПроекта.Следующий() Цикл
			Если	ЗначениеЗаполнено(ДополнительныеРеквизитыПроекта.Свойство)
				И	ЗначениеЗаполнено(ДополнительныеРеквизитыПроекта.Значение) Тогда
				Область.Параметры.Свойство = ДополнительныеРеквизитыПроекта.Свойство;
				Область.Параметры.Значение = ДополнительныеРеквизитыПроекта.Значение;
				ТабДок.Вывести(Область);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ОбвестиТабДок(ТабДок);
	ТабДок.ЗакончитьГруппуСтрок();
	ТаблицаОтчета.Вывести(ТабДок);
	ВывестиОбластьБезПараметров("ПустаяСтрокаРазделитель");
КонецПроцедуры

Процедура ВывестиДанныеПоИсполнителю()
	ПолучитьДанныеПоИсполнителю();
	ТабДокДИ = Новый ТабличныйДОкумент;
	Если Не СтруктураДанные.Свойство("ДанныеПоИсполнителю") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоИсполнителю = СтруктураДанные.ДанныеПоИсполнителю.Выбрать();
	Если Не ДанныеПоИсполнителю.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ЗаголовокПодраздела");
	Область.Параметры.Заголовок = НСтр("ru = 'Исполнитель'");
	ТабДокДИ.Вывести(Область);
	
	ТабДокДИ.НачатьГруппуСтрок();
	
	Область = Макет.ПолучитьОбласть("ДанныеИсполнителя");
	Если ЗначениеЗаполнено(ДанныеПоИсполнителю.Ответственный) Тогда
		Область.Параметры.Ответственный = ДанныеПоИсполнителю.Наименование;
		Область.Параметры.ЗначениеРасшифровкиОтветственный = ДанныеПоИсполнителю.Ответственный;
	Иначе
		Область.Параметры.Ответственный = "";
		Область.Параметры.ЗначениеРасшифровкиОтветственный = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеПоИсполнителю.Подразделение) Тогда
		Область.Параметры.Подразделение = Строка(ДанныеПоИсполнителю.Подразделение);
		Область.Параметры.ЗначениеРасшифровкиПодразделение = ДанныеПоИсполнителю.Подразделение;
	Иначе
		Область.Параметры.Подразделение = "";
		Область.Параметры.ЗначениеРасшифровкиПодразделение = Неопределено;
	КонецЕсли;
	
	ТабДокДИ.Вывести(Область);
	
	Если СтруктураДанные.Свойство("КИИсполнителя") Тогда
		Выборка = СтруктураДанные.КИИсполнителя.Выбрать();
		
		ТабДокументКИ = Новый ТабличныйДокумент();
		
		Область = Макет.ПолучитьОбласть("КонтактнаяИнформация");
		Пока Выборка.Следующий() Цикл
			Если	ЗначениеЗаполнено(Выборка.Вид)
				И	ЗначениеЗаполнено(Выборка.Представление) Тогда
				//
				Область.Параметры.ВидКонтактнойИнформации = Строка(Выборка.Вид);
				Область.Параметры.Представление = Выборка.Представление;
				ТабДокументКИ.Вывести(Область);
			КонецЕсли;
		КонецЦикла;
		
		Если ТабДокументКИ.ВысотаТаблицы > 0 Тогда
			Область = Макет.ПолучитьОбласть("ЗаголовокКИ");
			Область.Параметры.Заголовок = НСтр("ru = 'Контактная информация исполнителя'");
			ТабДокДИ.Вывести(Область);
			
			ТабДокДИ.НачатьГруппуСтрок();
			ТабДокДИ.Вывести(ТабДокументКИ);
			ТабДокДИ.ЗакончитьГруппуСтрок();
		КонецЕсли;
		
	КонецЕсли;
	
	ТабДокДИ.ЗакончитьГруппуСтрок();
	ОбвестиТабДок(ТабДокДИ);
	ТаблицаОтчета.Вывести(ТабДокДИ);
	ВывестиОбластьБезПараметров("ПустаяСтрокаРазделитель");
	
КонецПроцедуры

Процедура ВывестиДанныеПоЗаказчику()
	ПолучитьДанныеПоЗаказчику();
	
	Если Не СтруктураДанные.Свойство("ДанныеПоЗаказчику") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоЗаказчику = СтруктураДанные.ДанныеПоЗаказчику.Выбрать();
	Если Не ДанныеПоЗаказчику.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ЗаголовокПодраздела");
	Область.Параметры.Заголовок = НСтр("ru = 'Заказчик'");
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	Область = Макет.ПолучитьОбласть("ДанныеСтрока");
	Область.Параметры.Заголовок = НСтр("ru = 'Клиент'");
	Область.Параметры.Значение = Строка(ДанныеПоЗаказчику.Партнер);
	Область.Параметры.ЗначениеРасшифровки = ДанныеПоЗаказчику.Партнер;
	ТаблицаОтчета.Вывести(Область);
	
	Если СтруктураДанные.Свойство("КИЗаказчика") Тогда
		Выборка = СтруктураДанные.КИЗаказчика.Выбрать();
		
		ТабДокументКИ = Новый ТабличныйДокумент();
		
		Область = Макет.ПолучитьОбласть("КонтактнаяИнформация");
		Пока Выборка.Следующий() Цикл
			Если	ЗначениеЗаполнено(Выборка.Вид)
				И	ЗначениеЗаполнено(Выборка.Представление) Тогда
				//
				Область.Параметры.ВидКонтактнойИнформации = Строка(Выборка.Вид);
				Область.Параметры.Представление = Выборка.Представление;
				ТабДокументКИ.Вывести(Область);
			КонецЕсли;
		КонецЦикла;
		
		Если ТабДокументКИ.ВысотаТаблицы > 0 Тогда
			Область = Макет.ПолучитьОбласть("ЗаголовокПодраздела");
			Область.Параметры.Заголовок = НСтр("ru = 'Контактная информация заказчика'");
			ТаблицаОтчета.Вывести(Область);
			
			ТаблицаОтчета.НачатьГруппуСтрок();
			ТаблицаОтчета.Вывести(ТабДокументКИ);
			ТаблицаОтчета.ЗакончитьГруппуСтрок();
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ДанныеПоКонтактномуЛицуЗаказчика") Тогда
		ДанныеПоКонтактномуЛицуЗаказчика = СтруктураДанные.ДанныеПоКонтактномуЛицуЗаказчика.Выбрать();
		Если ДанныеПоКонтактномуЛицуЗаказчика.Следующий() Тогда
			ПредставлениеКонтактногоЛица = Строка(ДанныеПоКонтактномуЛицуЗаказчика.КонтактноеЛицо)
				+ ?(ЗначениеЗаполнено(ДанныеПоКонтактномуЛицуЗаказчика.Должность), " (" + ДанныеПоКонтактномуЛицуЗаказчика.Должность + ")", "");
			//
		
			ТабДокументКИ = Новый ТабличныйДокумент();
			
			Если СтруктураДанные.Свойство("КИКонтактногоЛицаЗаказчика") Тогда
				Выборка = СтруктураДанные.КИКонтактногоЛицаЗаказчика.Выбрать();
				
				Область = Макет.ПолучитьОбласть("КонтактнаяИнформация");
				Пока Выборка.Следующий() Цикл
					Если	ЗначениеЗаполнено(Выборка.Вид)
						И	ЗначениеЗаполнено(Выборка.Представление) Тогда
						//
						Область.Параметры.ВидКонтактнойИнформации = Строка(Выборка.Вид);
						Область.Параметры.Представление = Выборка.Представление;
						ТабДокументКИ.Вывести(Область);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если ТабДокументКИ.ВысотаТаблицы > 0 Тогда
				Область = Макет.ПолучитьОбласть("ЗаголовокПодраздела");
				Область.Параметры.Заголовок = НСтр("ru = 'Контактное лицо заказчика'") + ": " + ПредставлениеКонтактногоЛица;
				Область.Параметры.ЗначениеРасшифровки = ДанныеПоКонтактномуЛицуЗаказчика.КонтактноеЛицо;
				ТаблицаОтчета.Вывести(Область);
				
				ТаблицаОтчета.НачатьГруппуСтрок();
				ТаблицаОтчета.Вывести(ТабДокументКИ);
				ТаблицаОтчета.ЗакончитьГруппуСтрок();
			Иначе
				Область = Макет.ПолучитьОбласть("ДанныеСтрока");
				Область.Параметры.Заголовок = НСтр("ru = 'Контактное лицо'");
				Область.Параметры.Значение = ПредставлениеКонтактногоЛица;
				Область.Параметры.ЗначениеРасшифровки = ДанныеПоКонтактномуЛицуЗаказчика.КонтактноеЛицо;
				ТаблицаОтчета.Вывести(Область);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	ВывестиОбластьБезПараметров("ПустаяСтрокаРазделитель");
КонецПроцедуры

Процедура ВывестиДанныеПоЭтапам(ТабДокументТаблицаЭтапов = Неопределено, ДеревоЭтапы = Неопределено, Знач УровеньВложенности = -1,
	МассивВыведенныеЭтапы = Неопределено, Валюта = Неопределено, ОбластьСтрока = Неопределено)
	//
	Если ДеревоЭтапы = Неопределено Тогда
		ПолучитьДанныеПоЭтапам();
		
		Если Не СтруктураДанные.Свойство("ДанныеПоЭтапам") Тогда
			Возврат;
		КонецЕсли;
		
		Валюта = Константы.ВалютаУправленческогоУчета.Получить();
		Если ЗначениеЗаполнено(Валюта) Тогда
			Валюта = Строка(Валюта);
			Если Прав(Валюта, 1) <> "." Тогда
				Валюта = Валюта + ".";
			КонецЕсли;
		Иначе
			Валюта = НСтр("ru = 'руб.'");
		КонецЕсли;
		
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаЭтапы");
		
		ДеревоЭтапы = СтруктураДанные.ДанныеПоЭтапам.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		ОбщаяСуммаПлановыхЗатрат = ДеревоЭтапы.Строки.Итог("Сумма");
		
		ТабДокументТаблицаЭтапов = Новый ТабличныйДокумент();
		ТабДокументТаблицаЭтапов.НачатьАвтогруппировкуСтрок();
		ВывестиДанныеПоЭтапам(ТабДокументТаблицаЭтапов, ДеревоЭтапы, -1, Новый Массив(), Валюта, ОбластьСтрока);
		ТабДокументТаблицаЭтапов.ЗакончитьАвтогруппировкуСтрок();
		
		Если ТабДокументТаблицаЭтапов.ВысотаТаблицы = 0 Тогда
			Возврат
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("ЗаголовокТЧ");
		Область.Параметры.Заголовок = НСтр("ru = 'Этапы проекта'");
		ТаблицаОтчета.Вывести(Область);
		
		ТаблицаОтчета.НачатьГруппуСтрок();
		
		Область = Макет.ПолучитьОбласть("ДанныеСтрокаШирокая");
		Область.Параметры.Заголовок = НСтр("ru = 'Плановые затраты по этапам'");
		Если ЗначениеЗаполнено(ОбщаяСуммаПлановыхЗатрат) Тогда
			Область.Параметры.Значение = Формат(ОбщаяСуммаПлановыхЗатрат, "ЧДЦ=2") + " " + Валюта;
			Область.Параметры.ЗначениеРасшифровки = "ПлановыеЗатратыПоПроекту";
		Иначе
			Область.Параметры.Значение = НСтр("ru = 'Отсутствуют'");
			Область.Параметры.ЗначениеРасшифровки = Неопределено;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ЗаголовокЭтапы");
		ТаблицаОтчета.Вывести(Область);
		
		ТаблицаОтчета.Вывести(ТабДокументТаблицаЭтапов);
		
		ТаблицаОтчета.ЗакончитьГруппуСтрок();
		
		ВывестиОбластьБезПараметров("ПустаяСтрокаРазделитель");
		
	Иначе
		УровеньВложенности = УровеньВложенности + 1;
		
		Для Каждого СтрокаДерева Из ДеревоЭтапы.Строки Цикл
			Если МассивВыведенныеЭтапы.Найти(СтрокаДерева.Этап) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивВыведенныеЭтапы.Добавить(СтрокаДерева.Этап);
			
			ОбластьДляВывода = ОбластьСтрока;
			
			ОбластьДляВывода.Параметры.Наименование = Строка(СтрокаДерева.Этап);
			ОбластьДляВывода.Параметры.ЗначениеРасшифровки = СтрокаДерева.Этап;
			ОбластьДляВывода.Область(1, 2).Отступ = УровеньВложенности;
			Если ЗначениеЗаполнено(СтрокаДерева.Ответственный) Тогда
				ОбластьДляВывода.Параметры.Ответственный = Строка(СтрокаДерева.Ответственный);
			Иначе
				ОбластьДляВывода.Параметры.Ответственный = "";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаДерева.Сумма) Тогда
				ОбластьДляВывода.Параметры.Сумма = Формат(СтрокаДерева.Сумма, "ЧДЦ=2");
				ОбластьДляВывода.Параметры.Валюта = Валюта;
			Иначе
				ОбластьДляВывода.Параметры.Сумма = "";
				ОбластьДляВывода.Параметры.Валюта = "";
			КонецЕсли;
			
			ТабДокументТаблицаЭтапов.Вывести(ОбластьДляВывода, УровеньВложенности);
			
			ВывестиДанныеПоЭтапам(ТабДокументТаблицаЭтапов, СтрокаДерева, УровеньВложенности, МассивВыведенныеЭтапы, Валюта, ОбластьСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиДанныеПоКонтрольнымТочкам()
	ПолучитьДанныеПоКонтрольнымТочкам();
	
	Если Не СтруктураДанные.Свойство("ДанныеПоКонтрольнымТочкам") Тогда
		Возврат;
	КонецЕсли;
	
	ТабДокументКонтрольныеТочки = Новый ТабличныйДокумент();
	
	Область = Макет.ПолучитьОбласть("СтрокаКонтрольныеТочки");
	ДанныеПоКонтрольнымТочкам = СтруктураДанные.ДанныеПоКонтрольнымТочкам.Выбрать();
	Пока ДанныеПоКонтрольнымТочкам.Следующий() Цикл
		Область.Параметры.Тема = ДанныеПоКонтрольнымТочкам.Тема;
		Область.Параметры.ЗначениеРасшифровкиКонтрольнаяТочка = ДанныеПоКонтрольнымТочкам.КонтрольнаяТочка;
		
		Если ЗначениеЗаполнено(ДанныеПоКонтрольнымТочкам.Этап) Тогда
			Область.Параметры.Этап = Строка(ДанныеПоКонтрольнымТочкам.Этап);
			Область.Параметры.ЗначениеРасшифровкиЭтап = ДанныеПоКонтрольнымТочкам.Этап;
		Иначе
			Область.Параметры.Этап = "";
			Область.Параметры.ЗначениеРасшифровкиЭтап = Неопределено;
		КонецЕсли;
		
		ФорматДат = ?(ДанныеПоКонтрольнымТочкам.НаВесьДень, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'");
		Если ЗначениеЗаполнено(ДанныеПоКонтрольнымТочкам.Дата) Тогда
			Область.Параметры.ДатаНачала = Формат(ДанныеПоКонтрольнымТочкам.Дата, ФорматДат);
		Иначе
			Область.Параметры.ДатаНачала = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПоКонтрольнымТочкам.ДатаЗакрытия) Тогда
			Область.Параметры.ДатаОкончания = Формат(ДанныеПоКонтрольнымТочкам.ДатаЗакрытия, ФорматДат);
		Иначе
			Область.Параметры.ДатаОкончания = "";
		КонецЕсли;
		
		ТабДокументКонтрольныеТочки.Вывести(Область);
	КонецЦикла;
	
	Если ТабДокументКонтрольныеТочки.ВысотаТаблицы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ЗаголовокТЧ");
	Область.Параметры.Заголовок = НСтр("ru = 'Контрольные точки'");
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	Область = Макет.ПолучитьОбласть("ЗаголовокКонтрольныеТочки");
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.Вывести(ТабДокументКонтрольныеТочки);
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	ВывестиОбластьБезПараметров("ПустаяСтрокаРазделитель");
	
КонецПроцедуры

Процедура ВывестиДанныеПоЗадачам()
	ПолучитьДанныеПоЗадачам();
	
	Если Не СтруктураДанные.Свойство("ДанныеПоЗадачам") Тогда
		Возврат;
	КонецЕсли;
	
	ТабДокументЗадачи = Новый ТабличныйДокумент();
	
	ДанныеПоЗадачам = СтруктураДанные.ДанныеПоЗадачам.Выбрать();
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаЗадачи");
	Пока ДанныеПоЗадачам.Следующий() Цикл
		Если ЗначениеЗаполнено(ДанныеПоЗадачам.Наименование) Тогда
			ОбластьСтрока.Параметры.Задача = ДанныеПоЗадачам.Наименование;
		Иначе
			ОбластьСтрока.Параметры.Задача = Строка(ДанныеПоЗадачам.Задача);
		КонецЕсли;
		ОбластьСтрока.Параметры.ЗначениеРасшифровкиЗадача = ДанныеПоЗадачам.Задача;
		
		Если ЗначениеЗаполнено(ДанныеПоЗадачам.Исполнитель) Тогда
			ОбластьСтрока.Параметры.Исполнитель = Строка(ДанныеПоЗадачам.Исполнитель);
			ОбластьСтрока.Параметры.ЗначениеРасшифровкиИсполнитель = ДанныеПоЗадачам.Исполнитель;
		Иначе
			ОбластьСтрока.Параметры.Исполнитель = "";
			ОбластьСтрока.Параметры.ЗначениеРасшифровкиИсполнитель = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПоЗадачам.БизнесПроцесс) Тогда
			Если ЗначениеЗаполнено(ДанныеПоЗадачам.БизнесПроцессНаименование) Тогда
				ОбластьСтрока.Параметры.БизнесПроцесс = Строка(ДанныеПоЗадачам.БизнесПроцессНаименование);
			Иначе
				ОбластьСтрока.Параметры.БизнесПроцесс = Строка(ДанныеПоЗадачам.БизнесПроцесс);
			КонецЕсли;
			ОбластьСтрока.Параметры.ЗначениеРасшифровкиБизнесПроцесс = ДанныеПоЗадачам.БизнесПроцесс;
		Иначе
			ОбластьСтрока.Параметры.БизнесПроцесс = "";
			ОбластьСтрока.Параметры.ЗначениеРасшифровкиБизнесПроцесс = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПоЗадачам.ДатаНачала) Тогда
			ОбластьСтрока.Параметры.ДатаНачала = Формат(ДанныеПоЗадачам.ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:ММ'");
		Иначе
			ОбластьСтрока.Параметры.ДатаНачала = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПоЗадачам.СрокИсполнения) Тогда
			ОбластьСтрока.Параметры.СрокИсполнения = Формат(ДанныеПоЗадачам.СрокИсполнения, "ДФ='dd.MM.yyyy ЧЧ:ММ'");
		Иначе
			ОбластьСтрока.Параметры.СрокИсполнения = "";
		КонецЕсли;
		
		ТабДокументЗадачи.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	Если ТабДокументЗадачи.ВысотаТаблицы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ЗаголовокТЧ");
	Область.Параметры.Заголовок = НСтр("ru = 'Текущие задачи'");
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.НачатьГруппуСтрок();
	
	Область = Макет.ПолучитьОбласть("ЗаголовокЗадачи");
	ТаблицаОтчета.Вывести(Область);
	
	ТаблицаОтчета.Вывести(ТабДокументЗадачи);
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
	ВывестиОбластьБезПараметров("ПустаяСтрокаРазделитель");
КонецПроцедуры

Процедура ВывестиОбластьБезПараметров(ИмяОбласти)
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ТаблицаОтчета.Вывести(Область);
КонецПроцедуры

Функция ОбвестиТабДок(ТабДок)
	ОбластьЯчеек = ТабДок.Область(1,2,ТабДок.ВысотаТаблицы,ТабДок.ШиринаТаблицы);
	СплошнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	Цвет = Новый Цвет(221, 220, 151);
	ОбластьЯчеек.ЦветРамки = Цвет;
	ОбластьЯчеек.Обвести(СплошнаяЛиния,СплошнаяЛиния,СплошнаяЛиния,СплошнаяЛиния);
	Возврат ТабДок;
КонецФункции

#КонецЕсли