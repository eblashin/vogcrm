#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТЧЕТА

//Функция приводит дату к нормальному виду для передачи на сервер CoMagic
//
// Параметры
//  ИскомаяДата - Дата - Обрабатываемая дата
//
// Возвращаемое значение:
//  Дата - Дата в нужном формате
Функция ПеревестиДату(ИскомаяДата) 
	Возврат Формат(ИскомаяДата, "ДФ=гггг-ММ-дд");
КонецФункции

Функция ЗапросИзОтчетаАнализИсточниковПервичногоИнтереса()
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ИсточникиПервичногоИнтереса.Период КАК ДатаМК,
	|	ЕСТЬNULL(ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаАктуальностиМК,
	|	ИсточникиПервичногоИнтереса.Партнер КАК ПривлеченныйПартнер,
	|	ИсточникиПервичногоИнтереса.Сделка КАК РегистраторИИ
	|ПОМЕСТИТЬ ИсточникиИнформации
	|ИЗ
	|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
	|ГДЕ
	|	ИсточникиПервичногоИнтереса.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|			ИЛИ ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_Продажи.Период КАК ДатаПродажи,
	|	CRM_Продажи.ДокументПродажи,
	|	CRM_Продажи.Партнер,
	|	CRM_Продажи.Номенклатура,
	|	CRM_Продажи.ХарактеристикаНоменклатуры,
	|	CRM_Продажи.Количество,
	|	CRM_Продажи.Стоимость
	|ПОМЕСТИТЬ Продажи
	|ИЗ
	|	РегистрНакопления.CRM_Продажи КАК CRM_Продажи
	|ГДЕ
	|	CRM_Продажи.Период МЕЖДУ &НачалоПериода И &КонецПериода 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ИсточникиИнформации.ДатаМК) КАК ДатаМК,
	|	ИсточникиИнформации.ПривлеченныйПартнер КАК партнер,
	|	Продажи.Партнер КАК КупившийПартнер,
	|	Продажи.Стоимость
	|ПОМЕСТИТЬ ДатаМКПродажи
	|ИЗ
	|	ИсточникиИнформации КАК ИсточникиИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Продажи КАК Продажи
	|		ПО ИсточникиИнформации.ПривлеченныйПартнер = Продажи.Партнер
	|			И (Продажи.ДатаПродажи >= ИсточникиИнформации.ДатаМК)
	|			И (Продажи.ДатаПродажи <= ИсточникиИнформации.ДатаАктуальностиМК
	|				ИЛИ ИсточникиИнформации.ДатаАктуальностиМК = ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникиИнформации.ПривлеченныйПартнер,
	|	Продажи.Партнер,
	|	Продажи.Количество,
	|	Продажи.Стоимость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса КАК РекламнаяКампания,
	|	&ВалютаУУ КАК Валюта,
	|	СУММА(ДатаМКПродажи.Стоимость) КАК СуммаПродажи,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДатаМКПродажи.КупившийПартнер) КАК КоличествоКлиентовСовершившихПокупку
	|ИЗ
	|	ДатаМКПродажи КАК ДатаМКПродажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК КурсыВалютСрезПоследних2
	|			ПО ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса.CRM_Валюта = КурсыВалютСрезПоследних2.Валюта
	|		ПО ДатаМКПродажи.ДатаМК = ИсточникиПервичногоИнтереса.Период
	|			И ДатаМКПродажи.партнер = ИсточникиПервичногоИнтереса.Партнер,
	|	(ВЫБРАТЬ
	|		КурсыВалютСрезПоследних1.Курс КАК КурсВлютыУУ,
	|		КурсыВалютСрезПоследних1.Кратность КАК КратностьВалютыУУ
	|	ИЗ
	|		РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаУУ) КАК КурсыВалютСрезПоследних1) КАК КурсКратностьВалютыУУ
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса) = ТИП(Справочник.МаркетинговыеМероприятия)
	|	И ДатаМКПродажи.Стоимость > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса";
	
	Запрос.УстановитьПараметр("ВалютаУУ", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПериодОтчета.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПериодОтчета.ДатаОкончания));
	
	ТаблицаРезультатов  = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультатов;
	
КонецФункции	

//Процедура получает данные от сервера CoMagic и приводит выводит их в форме отчёта
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	ДатаНачала    = ПеревестиДату(ПериодОтчета.ДатаНачала);
	ДатаОкончания = ПеревестиДату(ПериодОтчета.ДатаОкончания);
	КлючСессии	= сфпСофтФонПроСервер.сфпПолучитьКлючСессииCoMagic();
	Если НЕ ЗначениеЗаполнено(КлючСессии) Тогда Возврат; КонецЕсли;
	Соединение 			= Новый HTTPСоединение("api.comagic.ru", , , , , ,
		Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено));
	Запрос 				= Новый HTTPЗапрос;
	Запрос.АдресРесурса = "/api/v1/advertising_sales/?session_key=" + СокрЛП(КлючСессии) 
	+ "&date_from=" + ДатаНачала + "&date_till=" + ДатаОкончания + "&site_id=" + Формат(Число(АнализируемыйСайт),"ЧГ=0") + "&only_first=false&only_quality=false";
	ФайлРезультата		= ПолучитьИмяВременногоФайла("txt");
	Попытка
		Ответ = Соединение.Получить(Запрос, ФайлРезультата);
		Если Ответ.КодСостояния = 200 Тогда
			ТекстовыйФайл = Новый ТекстовыйДокумент;
			ТекстовыйФайл.Прочитать(ФайлРезультата,"UTF-8");
			РезультатСоответствие = CRM_GoogleИнтеграция.UnJSON(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстовыйФайл.ПолучитьТекст()));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не удалось получить ответ от сервера CoMagic!'"));
			Возврат;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не удалось соединиться с сервером CoMagic'"));		
		Возврат;
	КонецПопытки;
	Если НЕ РезультатСоответствие.Получить("success") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Отсутствуют данные для отчета'"));
		Возврат;
	КонецЕсли;
	Если РезультатСоответствие.Получить("data").Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Отсутствуют данные для отчета'"));
		Возврат;
	КонецЕсли;
	
	ТаблицаЕжемесячныйОтчет = Новый ТаблицаЗначений;	
	ТаблицаЕжемесячныйОтчет.Колонки.Добавить("РекламнаяКампания",				Новый ОписаниеТипов("СправочникСсылка.МаркетинговыеМероприятия"));	
	ТаблицаЕжемесячныйОтчет.Колонки.Добавить("РасходыНаРекламу",				Новый ОписаниеТипов("Число", 	Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЕжемесячныйОтчет.Колонки.Добавить("Посещения",						Новый ОписаниеТипов("Число", 	Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЕжемесячныйОтчет.Колонки.Добавить("Обращения",						Новый ОписаниеТипов("Число", 	Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЕжемесячныйОтчет.Колонки.Добавить("СтоимостьОбращения",				Новый ОписаниеТипов("Число", 	Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЕжемесячныйОтчет.Колонки.Добавить("Продажи",							Новый ОписаниеТипов("Число", 	Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЕжемесячныйОтчет.Колонки.Добавить("Конверсия",						Новый ОписаниеТипов("Число", 	Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЕжемесячныйОтчет.Колонки.Добавить("ROI",								Новый ОписаниеТипов("Число", 	Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Любой)));
	ТаблицаЕжемесячныйОтчет.Колонки.Добавить("СуммаПродаж",						Новый ОписаниеТипов("Число", 	Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаАнализаИсточниковПервичногоИнтереса = ЗапросИзОтчетаАнализИсточниковПервичногоИнтереса();
	
	Для Каждого ЭлементМассива Из РезультатСоответствие.Получить("data") Цикл
		
		НоваяСтрока = ТаблицаЕжемесячныйОтчет.Добавить();
		
		РекламнаяКампания				= сфпСофтФонПроСервер.сфпНайтиМаркетинговоеМероприятие(ЭлементМассива.Получить("name"));
		НоваяСтрока.РекламнаяКампания	= РекламнаяКампания;
		
		//
		Отбор = Новый Структура();
		Отбор.Вставить("РекламнаяКампания", РекламнаяКампания);
		Строки = ТаблицаАнализаИсточниковПервичногоИнтереса.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			ИскомаяСтрока		= Строки[0];
			Продажи				= ИскомаяСтрока.КоличествоКлиентовСовершившихПокупку;
			СуммаПродаж			= ИскомаяСтрока.СуммаПродажи;
		Иначе
			Продажи				= 0;
			СуммаПродаж			= 0;
		КонецЕсли;
		НоваяСтрока.Продажи		= Продажи;
		НоваяСтрока.СуммаПродаж	= СуммаПродаж;
		//
		
		Выручка							= ЭлементМассива.Получить("revenue");
		РасходыНаРекламу                = ЭлементМассива.Получить("ac_cost");
		Если РасходыНаРекламу = 0 Тогда
			Если ЗначениеЗаполнено(РекламнаяКампания) Тогда
				РасходыНаРекламу = РекламнаяКампания.CRM_ФактическаяСуммаЗатрат;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.РасходыНаРекламу	= РасходыНаРекламу;
		НоваяСтрока.Посещения			= ЭлементМассива.Получить("sessions_count");	
		НоваяСтрока.Обращения			= ЭлементМассива.Получить("communications_count");
		//НоваяСтрока.Продажи				= ЭлементМассива.Получить("sales_count");
		
		Если (НоваяСтрока.Обращения > 0) И (НоваяСтрока.РасходыНаРекламу > 0 ) Тогда
			НоваяСтрока.СтоимостьОбращения = НоваяСтрока.РасходыНаРекламу / НоваяСтрока.Обращения;
		Иначе
			НоваяСтрока.СтоимостьОбращения = 0;
		КонецЕсли;
		
		Если (НоваяСтрока.Посещения > 0) И (НоваяСтрока.Продажи > 0 ) Тогда
			НоваяСтрока.Конверсия = НоваяСтрока.Продажи / НоваяСтрока.Посещения * 100;
		Иначе
			НоваяСтрока.Конверсия = 0;
		КонецЕсли;	
		
		Если НоваяСтрока.РасходыНаРекламу > 0 Тогда
			Если НоваяСтрока.СуммаПродаж = 0 Тогда 
				НоваяСтрока.ROI = -100; 
			Иначе
				НоваяСтрока.ROI = (НоваяСтрока.СуммаПродаж - НоваяСтрока.РасходыНаРекламу) / НоваяСтрока.РасходыНаРекламу * 100;
			КонецЕсли;				
		Иначе
			НоваяСтрока.ROI = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаЕжемесячныйОтчет.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Отсутствуют данные для отчета'"));
		Возврат;
	КонецЕсли;
	
	ТаблицаЕжемесячныйОтчет.Сортировать("РекламнаяКампания");
		
	ВнешниеНаборыДанных	= Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаЕжемесячныйОтчет",			ТаблицаЕжемесячныйОтчет);
	СхемаКомпоновкиДанных = ЭтотОбъект.СхемаКомпоновкиДанных;
	ВариантНастроек = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ЭтотОбъект.ВариантОтчета);
	Если ВариантНастроек = Неопределено Тогда
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Иначе
		Настройки = ВариантНастроек.Настройки;
	КонецЕсли;
	Поле = СхемаКомпоновкиДанных.НаборыДанных.НаборЕжемесячныйОтчет.Поля.Найти("СуммаПродаж");
    Поле.Заголовок = "Сумма продаж, " + Константы.ВалютаУправленческогоУчета.Получить();	
	КомпоновщикМакета			= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки				= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	ПроцессорВывода				= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецЕсли
