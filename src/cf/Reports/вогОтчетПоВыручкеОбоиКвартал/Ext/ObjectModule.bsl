#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Задать настройки формы отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - 
//   КлючВарианта - Строка, Неопределено - 
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриОпределенииПараметровВыбора = Истина;
	
КонецПроцедуры

// Вызывается в форме отчета перед выводом настройки.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - форма отчета.
//   СвойстваНастройки - Структура - описание настройки отчета, которая будет выведена в форме отчета.
//       * ОписаниеТипов - ОписаниеТипов - тип настройки.
//       * ЗначенияДляВыбора - СписокЗначений - объекты, которые будут предложены пользователю в списке
//           выбора. Дополняет список объектов, уже выбранных пользователем ранее.
//       * ЗапросЗначенийВыбора - Запрос - возвращает объекты, которыми необходимо дополнить ЗначенияДляВыбора.
//           Первой колонкой (с 0м индексом) должен выбираться объект,
//           который следует добавить в ЗначенияДляВыбора.Значение.
//           Для отключения автозаполнения
//           в свойство ЗапросЗначенийВыбора.Текст следует записать пустую строку.
//       * ОграничиватьВыборУказаннымиЗначениями - Булево - когда Истина, то выбор пользователя будет
//           ограничен значениями, указанными в ЗначенияДляВыбора (его конечным состоянием).
//
// См. также:
//   ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора().
//
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	
	Если ТипЗнч(СвойстваНастройки.ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
		Если СвойстваНастройки.ЭлементКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Компания") Тогда
			
			//ТекстЗапроса = 
			//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			//|	Организации.НазваниеДляОтчетаГенеральномуДиректору КАК Компания
			//|ИЗ
			//|	Справочник.Организации КАК Организации
			//|ГДЕ
			//|	НЕ Организации.НазваниеДляОтчетаГенеральномуДиректору = """"
			//|	%Условие%";
			//
			//Если СвойстваНастройки.ЗначенияДляВыбора.Количество() > 0 Тогда
			//	
			//	ТекстУсловия = "И НЕ Организации.НазваниеДляОтчетаГенеральномуДиректору В(&КомпанииИсключения)";
			//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", ТекстУсловия);
			//	
			//	СвойстваНастройки.ЗапросЗначенийВыбора.Параметры.Вставить(
			//		"КомпанииИсключения", СвойстваНастройки.ЗначенияДляВыбора.ВыгрузитьЗначения());
			//	
			//Иначе
			//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", "");
			//КонецЕсли;
			//
			//СвойстваНастройки.ЗапросЗначенийВыбора.Текст = ТекстЗапроса;
			//СвойстваНастройки.ЗначенияДляВыбора.Очистить();
			
		ИначеЕсли СвойстваНастройки.ЭлементКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодразделениеОтбор") Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СтруктураПредприятия.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.ОбособленноеПодразделение = ИСТИНА
			|	И СтруктураПредприятия.ПометкаУдаления = ЛОЖЬ
			|	И НЕ СтруктураПредприятия.Ссылка = &Основное
			|	И НЕ СтруктураПредприятия.Код = ""000000001""";
			
			СвойстваНастройки.ЗапросЗначенийВыбора.Текст = ТекстЗапроса;
			СвойстваНастройки.ЗапросЗначенийВыбора.Параметры.Вставить("Основное", Справочники.СтруктураПредприятия.ОсновноеПодразделение);
			
		ИначеЕсли СвойстваНастройки.ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов")) Тогда
			
			ИмяЗначенияКлассификатора 	= "";
			ИмяСтрокой 					= Строка(СвойстваНастройки.ЭлементКД.ЛевоеЗначение);
			
			Если СтрНайти(ИмяСтрокой, "[") > 0 Тогда
				
				ЗаменяемаяЧасть = Лев(ИмяСтрокой, СтрНайти(ИмяСтрокой, "["));
				ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяСтрокой, ЗаменяемаяЧасть, "");
				ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяЗначенияКлассификатора, "]", "");
				
			ИначеЕсли СтрНайти(ИмяСтрокой, "(") > 0 Тогда
				
				ЗаменяемаяЧасть = Лев(ИмяСтрокой, СтрНайти(ИмяСтрокой, "("));
				ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяСтрокой, ЗаменяемаяЧасть, "");
				ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяЗначенияКлассификатора, ")", "");
				
			Иначе
				
				ИмяЗначенияКлассификатора = ИмяСтрокой;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(ИмяЗначенияКлассификатора) Тогда
				
				СвойстваНастройки.ЗапросЗначенийВыбора.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	CRM_ЗначенияКлассификаторов.Ссылка КАК Объект
				|ИЗ
				|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
				|			CRM_Классификаторы.Ссылка КАК Ссылка
				|		ИЗ
				|			ПланВидовХарактеристик.CRM_Классификаторы КАК CRM_Классификаторы
				|		ГДЕ
				|			CRM_Классификаторы.Наименование = &Наименование) КАК ВложенныйЗапрос
				|		ПО (CRM_ЗначенияКлассификаторов.Владелец = ВложенныйЗапрос.Ссылка)
				|ГДЕ
				|	CRM_ЗначенияКлассификаторов.ПометкаУдаления = ЛОЖЬ";
				
				СвойстваНастройки.ЗапросЗначенийВыбора.Параметры.Вставить("Наименование", ИмяЗначенияКлассификатора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Накопление = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.КлючВарианта = "Основной1";
	
	ЗначениеПараметраДатаОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДатаОтчетаПользователь").Значение;
	Если ТипЗнч(ЗначениеПараметраДатаОтчета) = Тип("Дата") Тогда
		ДатаОтчета 				= КонецДня(ЗначениеПараметраДатаОтчета);
	Иначе
		ДатаОтчета 				= КонецДня(ЗначениеПараметраДатаОтчета.Дата);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОтчета) Тогда
		ДатаОтчета 				= КонецДня(ТекущаяДата());
	КонецЕсли;
	
	ТекущийКвартал 				= Цел((Месяц(ДатаОтчета) - 1) / 3) + 1;
	УстановитьЗаголовкиПолей(ДатаОтчета, ТекущийКвартал, Накопление);
	
	СтатусТТ 					= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8"));
	СтатусЗакрыт 				= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8"));
	
	ВидыТорговыхТочек 			= Новый Массив;
	ВидыТорговыхТочек.Добавить(Справочники.вогВидыТорговыхТочек.ТРТД);
	ВидыТорговыхТочек.Добавить(Справочники.вогВидыТорговыхТочек.РазовыйПокупатель);
	
	ТекущийПользователь 		= Пользователи.ТекущийПользователь();
	ПодразделениеПользователя 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение", Истина);
	ОбособленноеПодразделение 	= Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(ПодразделениеПользователя);
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(ТекущийПользователь);
	ДоступККлиентскойБазе 		= Пользователи.РолиДоступны("вогПолныйДоступККлиентскойБазеЧтение", ТекущийПользователь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель
	|	И ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
	Запрос.УстановитьПараметр("Исполнитель", 		ТекущийПользователь);
	Запрос.УстановитьПараметр("РольИсполнителя", 	Справочники.РолиИсполнителей.НайтиПоКоду("000000003"));
	
	РезультатЗапроса 			= Запрос.Выполнить();
	ЭтоДТН 						= Не РезультатЗапроса.Пустой();
	
	ДатаСледующийКвартал 			= КонецКвартала(ДатаОтчета) + 1;
	КонецПланаПродаж 				= КонецКвартала(ДатаСледующийКвартал);
	НачалоПланаПродажТекущийМесяц 	= НачалоМесяца(ДатаОтчета);
	КонецПланаПродажТекущийМесяц 	= КонецМесяца(ДатаОтчета);
	НачалоГода 						= НачалоГода(ДатаОтчета);
	// +++ VOG Кулаков П.Л. 29.06.2021 DEV-699
	КонецПрошлогоМесяца 			= ДатаОтчета;
	// --- VOG Кулаков П.Л.
	
	Если Накопление Тогда
		
		НачалоПланаПродаж 			= НачалоГода;
		
		НачалоПродажПрошлыйГод 		= НачалоГода(ДобавитьМесяц(ДатаСледующийКвартал, -12));
		КонецПродажПрошлыйГод 		= КонецКвартала(ДобавитьМесяц(КонецПланаПродаж, -12));
		
	Иначе
		
		НачалоПланаПродаж 			= ДатаСледующийКвартал;
		
		НачалоПродажПрошлыйГод 		= ДобавитьМесяц(ДатаСледующийКвартал, -12);
		КонецПродажПрошлыйГод 		= КонецКвартала(НачалоПродажПрошлыйГод);
		
	КонецЕсли;
	
	СценарийПланНаКвартал 			= Справочники.вогСценарииПланирования.ПланНаКвартал;
	ВерсияСценария 					= Справочники.вогВерсииСценариевПланирования.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогВерсииСценариевПланирования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогВерсииСценариевПланирования КАК вогВерсииСценариевПланирования
		|ГДЕ
		|	вогВерсииСценариевПланирования.ПометкаУдаления = ЛОЖЬ
		|	И вогВерсииСценариевПланирования.Владелец = &СценарийПланирования";
	
	Запрос.УстановитьПараметр("СценарийПланирования", СценарийПланНаКвартал);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВерсияСценария = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	// Установка параметров
	УстанавливаемыеПараметры = Новый Соответствие;
	УстанавливаемыеПараметры.Вставить("ВидыТорговыхТочек", 				ВидыТорговыхТочек);
	УстанавливаемыеПараметры.Вставить("ДатаОтчета", 					ДатаОтчета);
	УстанавливаемыеПараметры.Вставить("ДатаСледующийКвартал", 			ДатаСледующийКвартал);
	УстанавливаемыеПараметры.Вставить("Направление", 					Справочники.НаправленияДеятельности.Обои);
	УстанавливаемыеПараметры.Вставить("ПодразделениеПользователя", 		ОбособленноеПодразделение);
	УстанавливаемыеПараметры.Вставить("ПолныйДоступКПодразделениям", 	ЭтоДТН Или ЭтоПолноправныйПользователь Или ДоступККлиентскойБазе);
	УстанавливаемыеПараметры.Вставить("РольМенеджер", 					Справочники.РолиКонтактныхЛицПартнеров.Менеджер);
	УстанавливаемыеПараметры.Вставить("РольКоординатор", 				Справочники.РолиКонтактныхЛицПартнеров.Координатор);
	УстанавливаемыеПараметры.Вставить("СтатусЗакрыт", 					СтатусЗакрыт);
	УстанавливаемыеПараметры.Вставить("СтатусТТ", 						СтатусТТ);
	УстанавливаемыеПараметры.Вставить("СценарийПланНаКвартал", 			СценарийПланНаКвартал);
	
	// +++ VOG Кулаков П.Л. 26.07.2021 DEV-783
	УстанавливаемыеПараметры.Вставить("ВерсияСценария", 				ВерсияСценария);
	// --- VOG Кулаков П.Л.
	УстанавливаемыеПараметры.Вставить("КонецПланаПродаж", 				КонецПланаПродаж);
	УстанавливаемыеПараметры.Вставить("НачалоПланаПродаж", 				НачалоПланаПродаж);
	УстанавливаемыеПараметры.Вставить("СценарийПланНаГодПоМесяцам", 	Справочники.вогСценарииПланирования.ПланНаГод);
	УстанавливаемыеПараметры.Вставить("СценарийПланНаМесяцПоКлиентам", 	Справочники.вогСценарииПланирования.ПланНаМесяцПоКлиентам);
	УстанавливаемыеПараметры.Вставить("КонецПродажПрошлыйГод", 			КонецПродажПрошлыйГод);
	УстанавливаемыеПараметры.Вставить("НачалоПродажПрошлыйГод", 		НачалоПродажПрошлыйГод);
	УстанавливаемыеПараметры.Вставить("НачалоПланаПродажТекущийМесяц", 	НачалоПланаПродажТекущийМесяц);
	УстанавливаемыеПараметры.Вставить("КонецПланаПродажТекущийМесяц", 	КонецПланаПродажТекущийМесяц);
	УстанавливаемыеПараметры.Вставить("НачалоГода", 					НачалоГода);
	УстанавливаемыеПараметры.Вставить("КонецПрошлогоМесяца", 			КонецПрошлогоМесяца);
	
	УстанавливаемыеПараметры.Вставить("Накопление", 					Накопление);
	
	КомпоновкаДанныхКлиентСервер.УстановитьКоллекциюПараметров(КомпоновщикНастроек, УстанавливаемыеПараметры);
	
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки 			= Новый ДанныеРасшифровкиКомпоновкиДанных;
	Настройки 					= КомпоновщикНастроек.ПолучитьНастройки();
	
	МакетКомпоновкиДанных 		= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,, ДанныеРасшифровки, Истина, Истина);
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ВключитьВозможностьСверткиГруппыКолонок(ДокументРезультат, "Количество");
	ВключитьВозможностьСверткиГруппыКолонок(ДокументРезультат, "Выручка");
	ВключитьВозможностьСверткиГруппыКолонок(ДокументРезультат, "Цена (без НДС)");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗаголовкиПолей(ДатаДокумента, ТекущийКвартал, Накопление)
	
	Для Каждого Поле Из СхемаКомпоновкиДанных.НаборыДанных.Данные.Поля Цикл
		
		Если СтрНайти(Поле.Заголовок, "%КолвоМес%") > 0 Тогда
			
			КолвоМесяцев = (ТекущийКвартал + 1) * 3;
			
			Если Накопление Тогда
				Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%КолвоМес%%Следующий квартал%", СтрШаблон("%1 мес.", КолвоМесяцев));
			Иначе
				Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%КолвоМес%", "");
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%ФактПлан%") > 0 Тогда
			
			НомерСимвола = СтрНайти(Поле.Заголовок, "%ФактПлан%");
			
			Если Накопление Тогда
				Если НомерСимвола = 1 Тогда
					Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%ФактПлан%", "Факт + план");
				Иначе
					Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%ФактПлан%", "факт + план");
				КонецЕсли;
			Иначе
				Если НомерСимвола = 1 Тогда
					Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%ФактПлан%", "План");
				Иначе
					Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%ФактПлан%", "план");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Текущий год%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Текущий год%", Формат(ДатаДокумента, "ДФ=yyyy"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Прошлый год%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Прошлый год%", Формат(НачалоГода(ДатаДокумента) - 1, "ДФ=yyyy"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Следующий квартал%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Следующий квартал%", СтрШаблон("%1 кв", ТекущийКвартал + 1));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьВозможностьСверткиГруппыКолонок(ДокументРезультат, НазваниеГруппыКолонок, НомерКолонкиВГруппировке = 1)
	
	// Первая таблица
	// найдем первую ячейку группы
	ПерваяЯчейкаГруппы = ДокументРезультат.НайтиТекст(НазваниеГруппыКолонок,,,, Истина);
	Если ПерваяЯчейкаГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// определим количество колонок группы (используется особенность объединенных ячеек - одинаковый текст в них)
	КоличествоКолонокГруппы = 1;
	Пока ПерваяЯчейкаГруппы.Текст = ДокументРезультат.Область(ПерваяЯчейкаГруппы.Верх, ПерваяЯчейкаГруппы.Лево + КоличествоКолонокГруппы).Текст Цикл
		КоличествоКолонокГруппы = КоличествоКолонокГруппы + 1;
	КонецЦикла;
	
	КолонкаНачалаСвертки 	= ПерваяЯчейкаГруппы.Лево + НомерКолонкиВГруппировке;
	КолонкаКонцаСвертки 	= ПерваяЯчейкаГруппы.Лево + КоличествоКолонокГруппы - 1;
	
	// сгруппируем колонки группы
	ДокументРезультат.Область(, КолонкаНачалаСвертки, ПерваяЯчейкаГруппы.Верх, КолонкаКонцаСвертки).Сгруппировать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли