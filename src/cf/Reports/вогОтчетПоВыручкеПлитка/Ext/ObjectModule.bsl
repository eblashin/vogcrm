#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Задать настройки формы отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - 
//   КлючВарианта - Строка, Неопределено - 
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПередЗаполнениемПанелиБыстрыхНастроек 	= Истина;
	Настройки.События.ПриОпределенииПараметровВыбора 			= Истина;
	Настройки.События.ПослеЗаполненияПанелиБыстрыхНастроек 		= Истина;
	
КонецПроцедуры

// Вызывается в форме отчета перед выводом настройки.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - форма отчета.
//   СвойстваНастройки - Структура - описание настройки отчета, которая будет выведена в форме отчета.
//       * ОписаниеТипов - ОписаниеТипов - тип настройки.
//       * ЗначенияДляВыбора - СписокЗначений - объекты, которые будут предложены пользователю в списке
//           выбора. Дополняет список объектов, уже выбранных пользователем ранее.
//       * ЗапросЗначенийВыбора - Запрос - возвращает объекты, которыми необходимо дополнить ЗначенияДляВыбора.
//           Первой колонкой (с 0м индексом) должен выбираться объект,
//           который следует добавить в ЗначенияДляВыбора.Значение.
//           Для отключения автозаполнения
//           в свойство ЗапросЗначенийВыбора.Текст следует записать пустую строку.
//       * ОграничиватьВыборУказаннымиЗначениями - Булево - когда Истина, то выбор пользователя будет
//           ограничен значениями, указанными в ЗначенияДляВыбора (его конечным состоянием).
//
// См. также:
//   ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора().
//
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	
	Если ТипЗнч(СвойстваНастройки.ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
		Если СвойстваНастройки.ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов")) Тогда
			
			Если СвойстваНастройки.ЭлементКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусТТОтбор") Тогда
				
				СтатусыТТ = Новый Массив;
				СтатусыТТ.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("f84779ae-9a73-11e8-89fa-005056bc3fe8")));
				СтатусыТТ.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af2-9a74-11e8-89fa-005056bc3fe8")));
				СтатусыТТ.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("047f780f-8b44-11e9-9b11-005056bcd3e3")));
				
				СвойстваНастройки.ЗначенияДляВыбора.ЗагрузитьЗначения(СтатусыТТ);
				
			Иначе
				
				ИмяЗначенияКлассификатора 	= "";
				ИмяСтрокой 					= Строка(СвойстваНастройки.ЭлементКД.ЛевоеЗначение);
				
				Если СтрНайти(ИмяСтрокой, "[") > 0 Тогда
					
					ЗаменяемаяЧасть = Лев(ИмяСтрокой, СтрНайти(ИмяСтрокой, "["));
					ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяСтрокой, ЗаменяемаяЧасть, "");
					ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяЗначенияКлассификатора, "]", "");
					
				ИначеЕсли СтрНайти(ИмяСтрокой, "(") > 0 Тогда
					
					ЗаменяемаяЧасть = Лев(ИмяСтрокой, СтрНайти(ИмяСтрокой, "("));
					ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяСтрокой, ЗаменяемаяЧасть, "");
					ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяЗначенияКлассификатора, ")", "");
					
				Иначе
					
					ИмяЗначенияКлассификатора = ИмяСтрокой;
					
				КонецЕсли;
				
				Если Не ПустаяСтрока(ИмяЗначенияКлассификатора) Тогда
					
					СвойстваНастройки.ЗапросЗначенийВыбора.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	CRM_ЗначенияКлассификаторов.Ссылка КАК Объект
					|ИЗ
					|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
					|			CRM_Классификаторы.Ссылка КАК Ссылка
					|		ИЗ
					|			ПланВидовХарактеристик.CRM_Классификаторы КАК CRM_Классификаторы
					|		ГДЕ
					|			CRM_Классификаторы.Наименование = &Наименование) КАК ВложенныйЗапрос
					|		ПО (CRM_ЗначенияКлассификаторов.Владелец = ВложенныйЗапрос.Ссылка)
					|ГДЕ
					|	CRM_ЗначенияКлассификаторов.ПометкаУдаления = ЛОЖЬ";
					
					СвойстваНастройки.ЗапросЗначенийВыбора.Параметры.Вставить("Наименование", ИмяЗначенияКлассификатора);
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СвойстваНастройки.ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СтруктураПредприятия.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.ОбособленноеПодразделение = ИСТИНА
			|	И СтруктураПредприятия.ПометкаУдаления = ЛОЖЬ
			|	И НЕ СтруктураПредприятия.Ссылка = &Основное
			|	И НЕ СтруктураПредприятия.Код = ""000000006""";
			
			СвойстваНастройки.ЗапросЗначенийВыбора.Текст = ТекстЗапроса;
			СвойстваНастройки.ЗапросЗначенийВыбора.Параметры.Вставить("Основное", Справочники.СтруктураПредприятия.ОсновноеПодразделение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в форме отчета перед выводом настройки.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - форма отчета.
//   ПараметрыЗаполнения - Структура - описание настройки отчета, которая будет выведена в форме отчета.
//       * ОписаниеТипов - ОписаниеТипов - тип настройки.
//       * ЗначенияДляВыбора - СписокЗначений - объекты, которые будут предложены пользователю в списке
//           выбора. Дополняет список объектов, уже выбранных пользователем ранее.
//       * ЗапросЗначенийВыбора - Запрос - возвращает объекты, которыми необходимо дополнить ЗначенияДляВыбора.
//           Первой колонкой (с 0м индексом) должен выбираться объект,
//           который следует добавить в ЗначенияДляВыбора.Значение.
//           Для отключения автозаполнения
//           в свойство ЗапросЗначенийВыбора.Текст следует записать пустую строку.
//       * ОграничиватьВыборУказаннымиЗначениями - Булево - когда Истина, то выбор пользователя будет
//           ограничен значениями, указанными в ЗначенияДляВыбора (его конечным состоянием).
//
// См. также:
//   ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора().
//
Процедура ПередЗаполнениемПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
	
	ПараметрГодПланирования = Новый ПараметрКомпоновкиДанных("ГодПланирования");
	
	ЗначениеПараметра = Форма.Отчет.КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГодПланирования);
	
	Если ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
		
		Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("СтандартнаяДатаНачала") Тогда
			ГодПланирования = НачалоГода(ЗначениеПараметра.Значение.Дата);
		Иначе
			ГодПланирования = НачалоГода(ЗначениеПараметра.Значение);
		КонецЕсли;
		
	Иначе
		ГодПланирования = КонецГода(ТекущаяДатаСеанса()) + 1;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Форма.НастройкиОтчета.АдресСхемы) Тогда
		
		УстановитьЗаголовкиПолей(ГодПланирования, Форма.НастройкиОтчета.АдресСхемы);
	КонецЕсли;
	//
	
	СтатусТТКлассификатор = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Форма.Отчет.КомпоновщикНастроек, "СтатусТТ", СтатусТТКлассификатор);
	
	СтатусТТЗакрыт = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Форма.Отчет.КомпоновщикНастроек, "СтатусЗакрыт", СтатусТТЗакрыт);
	
	DIYПолка = Справочники.КомплектыПанелейДляПланирования.ПолучитьСсылку(Новый УникальныйИдентификатор("a2c32dab-07a5-11eb-8f2a-005056bcd3e3"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Форма.Отчет.КомпоновщикНастроек, "DIYПолка", DIYПолка);
	
	ОборудованиеКлиента = Справочники.КомплектыПанелейДляПланирования.ПолучитьСсылку(Новый УникальныйИдентификатор("a2c32dac-07a5-11eb-8f2a-005056bcd3e3"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Форма.Отчет.КомпоновщикНастроек, "ОборудованиеКлиента", ОборудованиеКлиента);
	
	Cersanit = Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("6902b059-66b2-11e3-b895-005056ac8899"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Форма.Отчет.КомпоновщикНастроек, "Cersanit", Cersanit);
	
	Cersanit2017 = Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("cadd7265-3943-11e7-9071-005056acd97c"));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Форма.Отчет.КомпоновщикНастроек, "Cersanit2017", Cersanit2017);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ПодразделениеПользователя = ТекущийПользователь.Подразделение;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Форма.Отчет.КомпоновщикНастроек, "ПодразделениеПользователя", Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(ПодразделениеПользователя));
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(ТекущийПользователь);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Форма.Отчет.КомпоновщикНастроек, "ЭтоПолноправныйПользователь", ЭтоПолноправныйПользователь);
	ДТН = Справочники.РолиИсполнителей.НайтиПоКоду("000000003");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Разрешенные
			| ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
			|ИЗ
			| РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
			|ГДЕ
			| ИсполнителиЗадач.Исполнитель = &Исполнитель";
	Запрос.УстановитьПараметр("Исполнитель",Пользователи.ТекущийПользователь());
	Роли = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РольИсполнителя");
	ЭтоДТН = ?(Роли.Найти(ДТН) = Неопределено, Ложь, Истина);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Форма.Отчет.КомпоновщикНастроек, "ЭтоДТН", ЭтоДТН);
	
	ДоступККлиентскойБазе = Пользователи.РолиДоступны("вогПолныйДоступККлиентскойБазеЧтение", ТекущийПользователь);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Форма.Отчет.КомпоновщикНастроек, "ДоступККлиентскойБазе", ДоступККлиентскойБазе);
	
	ПользовательскиеНастройкиКомпоновки = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	СписокНГ = ПолучитьСписокНоменклатурныхПозицийПланирования();
	СписокНГ.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("cadd7265-3943-11e7-9071-005056acd97c")));
	СписокНГПлюсЭконом = ПолучитьСписокНоменклатурныхПозиций();
	
	ПолеКомпоновкиНГ = Новый ПолеКомпоновкиДанных("НоменклатурнаяГруппа");
	
	Для Каждого ЭлементОтбора Из Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиНГ Тогда
			Если ЭлементОтбора.Представление = "НГ" Тогда
				ЭлементОтбора.ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы");
				ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(СписокНГ);
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
			Если ЭлементОтбора.Представление = "НГ + эконом" Тогда
				ЭлементОтбора.ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы");
				ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(СписокНГПлюсЭконом);
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается после перезаполнения панели настроек формы отчета.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   ПараметрыЗаполнения - Структура - Параметры, которые будут загружены в отчет.
//
Процедура ПослеЗаполненияПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
	
	ИзменитьПараметр = (ПараметрыЗаполнения.ИмяСобытия = ""
		И ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы = Истина
		Или ПараметрыЗаполнения.ИмяСобытия = "НастройкиПоУмолчанию");
		
	ПараметрГодПланирования = Новый ПараметрКомпоновкиДанных("ГодПланирования");
	
	ЗначениеПараметра = Форма.Отчет.КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГодПланирования);
	
	ИдентификаторПользовательскойНастройки = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(ЗначениеПараметра);
	ОбъектПользовательскойНастройки = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторПользовательскойНастройки);
	
	Если Не ЗначениеЗаполнено(ОбъектПользовательскойНастройки.Значение)
		И (ИзменитьПараметр Или ПараметрыЗаполнения.ИмяСобытия = "ПриОбновленииСоставаПользовательскихНастроекНаСервере") Тогда
		
		ОбъектПользовательскойНастройки.Значение = КонецГода(ТекущаяДатаСеанса()) + 1;
		
	КонецЕсли;
	
	ИндексНастройки = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Индекс(ОбъектПользовательскойНастройки);
	
	Если ИндексНастройки >= 0 Тогда
		
		ПутьКДанным = СтрШаблон("Отчет.КомпоновщикНастроек.ПользовательскиеНастройки[%1].Значение", ИндексНастройки);
		
		Для Каждого Элемент Из Форма.Элементы Цикл
			
			Если СтрНачинаетсяС(Элемент.Имя, "КомпоновщикНастроекПользовательскиеНастройкиЭлемент")
				И ТипЗнч(Элемент) = Тип("ПолеФормы")
				И Элемент.ПутьКДанным = ПутьКДанным Тогда
				
				Элемент.КнопкаВыпадающегоСписка = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрГодПланирования 	= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ГодПланирования");
	
	Если ТипЗнч(ПараметрГодПланирования.Значение) = Тип("СтандартнаяДатаНачала") Тогда
		ДатаПланирования = НачалоГода(ПараметрГодПланирования.Значение.Дата);
	Иначе
		ДатаПланирования = НачалоГода(ПараметрГодПланирования.Значение);
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	РазностьДат = Год(ДатаПланирования) - Год(ТекущаяДата);
	
	Если РазностьДат = 0 Тогда
		ДатаОтчета 			= ДатаПланирования - 1;
		КонецПрошлогоМесяца = ДатаОтчета;
	ИначеЕсли РазностьДат = 1 Тогда
		ДатаОтчета 			= ТекущаяДата;
		КонецПрошлогоМесяца = НачалоМесяца(ДатаОтчета) - 1;
	ИначеЕсли РазностьДат < 0 Тогда
		ДатаОтчета 			= КонецГода(ДатаПланирования);
		КонецПрошлогоМесяца = ДатаОтчета;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверный период'");
	КонецЕсли;
	
	УстанавливаемыеПараметры = Новый Соответствие;
	УстанавливаемыеПараметры.Вставить("ДатаОтчета", 			ДатаОтчета);
	УстанавливаемыеПараметры.Вставить("ДатаСледующийГод", 		ДатаПланирования);
	УстанавливаемыеПараметры.Вставить("КонецГода", 				КонецГода(ДатаОтчета));
	УстанавливаемыеПараметры.Вставить("КонецПрошлогоГода", 		КонецГода(НачалоГода(ДатаОтчета) - 1));
	УстанавливаемыеПараметры.Вставить("КонецПрошлогоМесяца", 	КонецПрошлогоМесяца);
	УстанавливаемыеПараметры.Вставить("НачалоМесяца", 			НачалоМесяца(ДатаОтчета));
	УстанавливаемыеПараметры.Вставить("НачалоПрошлогоГода", 	НачалоГода(НачалоГода(ДатаОтчета) - 1));
	УстанавливаемыеПараметры.Вставить("НачалоТекущегоГода", 	НачалоГода(ДатаОтчета));
	
	КомпоновкаДанныхКлиентСервер.УстановитьКоллекциюПараметров(КомпоновщикНастроек, УстанавливаемыеПараметры);
	
	УстановитьЗаголовкиПолей(ДатаПланирования);
	
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки 			= Новый ДанныеРасшифровкиКомпоновкиДанных;
	Настройки 					= КомпоновщикНастроек.ПолучитьНастройки();
	
	МакетКомпоновкиДанных 		= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,, ДанныеРасшифровки, Истина, Истина);
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗаголовкиПолей(ДатаПланирования, АдресСхемы = Неопределено)
	
	ЭтоПоляотбора = Ложь;
	
	Если АдресСхемы = Неопределено Тогда
		Схема = СхемаКомпоновкиДанных;
	Иначе
		Схема = ПолучитьИзВременногоХранилища(АдресСхемы);
		ЭтоПоляотбора = Истина;
	КонецЕсли;
	
	ГодПланирования = НачалоГода(ДатаПланирования);
	ТекущийГод 		= НачалоГода(ГодПланирования - 1);
	ПрошлыйГод 		= НачалоГода(ТекущийГод - 1);
	
	ТекущийГодСтрокой 	= Формат(ТекущийГод, "ДФ=yyyy");
	ПрошлыйГодСтрокой 	= Формат(ПрошлыйГод, "ДФ=yyyy");
	СледующийГодСтрокой = Формат(ГодПланирования, "ДФ=yyyy");
	
	Для Каждого Поле Из Схема.НаборыДанных.НаборДанных1.Поля Цикл
		
		Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%ТекущийГод%", ТекущийГодСтрокой);
		Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%ПрошлыйГод%", ПрошлыйГодСтрокой);
		Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%СледующийГод%", СледующийГодСтрокой);
		
	КонецЦикла;
	
	Для Каждого Поле Из Схема.ВычисляемыеПоля Цикл
		
		Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%ТекущийГод%", ТекущийГодСтрокой);
		Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%ПрошлыйГод%", ПрошлыйГодСтрокой);
		Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%СледующийГод%", СледующийГодСтрокой);
		
		Если ЭтоПоляотбора Тогда
			
			Если СтрЗаканчиваетсяНа(Поле.ПутьКДанным, "_Кол") И Не СтрЗаканчиваетсяНа(Поле.Заголовок, "(количество)") Тогда
				Поле.Заголовок = СтрШаблон("%1 (количество)", Поле.Заголовок);
			КонецЕсли;
			
			Если СтрЗаканчиваетсяНа(Поле.ПутьКДанным, "_Выручка") И Не СтрЗаканчиваетсяНа(Поле.Заголовок, "(выручка)") Тогда
				Поле.Заголовок = СтрШаблон("%1 (выручка)", Поле.Заголовок);
			КонецЕсли;
			
			Если СтрЗаканчиваетсяНа(Поле.ПутьКДанным, "_Цена") И Не СтрЗаканчиваетсяНа(Поле.Заголовок, "(цена)") Тогда
				Поле.Заголовок = СтрШаблон("%1 (цена)", Поле.Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокНоменклатурныхПозицийПланирования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогРаспределениеDIYПоНоменклатурнымГруппамСрезПоследних.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ вт_НоменклатурныеГруппыРаспределение
		|ИЗ
		|	РегистрСведений.вогРаспределениеDIYПоНоменклатурнымГруппам.СрезПоследних(, ) КАК вогРаспределениеDIYПоНоменклатурнымГруппамСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	вогРаспределениеDIYПоНоменклатурнымГруппамСрезПоследних.НоменклатурнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ вт_НоменклатурныеГруппы
		|ИЗ
		|	РегистрСведений.вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой КАК вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой
		|
		|СГРУППИРОВАТЬ ПО
		|	вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой.НоменклатурнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вт_НоменклатурныеГруппыРаспределение.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ вт_ИтоговыеДанные
		|ИЗ
		|	вт_НоменклатурныеГруппыРаспределение КАК вт_НоменклатурныеГруппыРаспределение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт_НоменклатурныеГруппы.НоменклатурнаяГруппа
		|ИЗ
		|	вт_НоменклатурныеГруппы КАК вт_НоменклатурныеГруппы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вт_ИтоговыеДанные.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ИЗ
		|	вт_ИтоговыеДанные КАК вт_ИтоговыеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ИтоговыеДанные.НоменклатурнаяГруппа";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("НоменклатурнаяГруппа");
	
КонецФункции

Функция ПолучитьСписокНоменклатурныхПозиций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогРаспределениеDIYПоНоменклатурнымГруппамСрезПоследних.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ вт_НоменклатурныеГруппыРаспределение
		|ИЗ
		|	РегистрСведений.вогРаспределениеDIYПоНоменклатурнымГруппам.СрезПоследних(, ) КАК вогРаспределениеDIYПоНоменклатурнымГруппамСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	вогРаспределениеDIYПоНоменклатурнымГруппамСрезПоследних.НоменклатурнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ вт_НоменклатурныеГруппы
		|ИЗ
		|	РегистрСведений.вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой КАК вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой
		|
		|СГРУППИРОВАТЬ ПО
		|	вогСопоставлениеКомплектаПанелейСНоменклатурнойГруппой.НоменклатурнаяГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вт_НоменклатурныеГруппыРаспределение.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ вт_ИтоговыеДанные
		|ИЗ
		|	вт_НоменклатурныеГруппыРаспределение КАК вт_НоменклатурныеГруппыРаспределение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вт_НоменклатурныеГруппы.НоменклатурнаяГруппа
		|ИЗ
		|	вт_НоменклатурныеГруппы КАК вт_НоменклатурныеГруппы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вт_ИтоговыеДанные.НоменклатурнаяГруппа.Родитель КАК ГруппаНГ
		|ИЗ
		|	вт_ИтоговыеДанные КАК вт_ИтоговыеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	вт_ИтоговыеДанные.НоменклатурнаяГруппа.Родитель";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("ГруппаНГ");
	
КонецФункции

#КонецОбласти

#КонецЕсли