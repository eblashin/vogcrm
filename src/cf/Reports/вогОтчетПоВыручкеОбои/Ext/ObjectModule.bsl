#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Задать настройки формы отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - 
//   КлючВарианта - Строка, Неопределено - 
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриОпределенииПараметровВыбора 			= Истина;
	Настройки.События.ПослеЗаполненияПанелиБыстрыхНастроек 		= Истина;
	
КонецПроцедуры

// Вызывается в форме отчета перед выводом настройки.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - форма отчета.
//   СвойстваНастройки - Структура - описание настройки отчета, которая будет выведена в форме отчета.
//       * ОписаниеТипов - ОписаниеТипов - тип настройки.
//       * ЗначенияДляВыбора - СписокЗначений - объекты, которые будут предложены пользователю в списке
//           выбора. Дополняет список объектов, уже выбранных пользователем ранее.
//       * ЗапросЗначенийВыбора - Запрос - возвращает объекты, которыми необходимо дополнить ЗначенияДляВыбора.
//           Первой колонкой (с 0м индексом) должен выбираться объект,
//           который следует добавить в ЗначенияДляВыбора.Значение.
//           Для отключения автозаполнения
//           в свойство ЗапросЗначенийВыбора.Текст следует записать пустую строку.
//       * ОграничиватьВыборУказаннымиЗначениями - Булево - когда Истина, то выбор пользователя будет
//           ограничен значениями, указанными в ЗначенияДляВыбора (его конечным состоянием).
//
// См. также:
//   ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора().
//
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	
	Если ТипЗнч(СвойстваНастройки.ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
		Если СвойстваНастройки.ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов")) Тогда
			
			Если СвойстваНастройки.ЭлементКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусТТОтбор") Тогда
				
				СтатусыТТ = Новый Массив;
				СтатусыТТ.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("f84779ae-9a73-11e8-89fa-005056bc3fe8")));
				СтатусыТТ.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af2-9a74-11e8-89fa-005056bc3fe8")));
				СтатусыТТ.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("047f780f-8b44-11e9-9b11-005056bcd3e3")));
				
				СвойстваНастройки.ЗначенияДляВыбора.ЗагрузитьЗначения(СтатусыТТ);
				
			Иначе
				
				ИмяЗначенияКлассификатора 	= "";
				ИмяСтрокой 					= Строка(СвойстваНастройки.ЭлементКД.ЛевоеЗначение);
				
				Если СтрНайти(ИмяСтрокой, "[") > 0 Тогда
					
					ЗаменяемаяЧасть = Лев(ИмяСтрокой, СтрНайти(ИмяСтрокой, "["));
					ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяСтрокой, ЗаменяемаяЧасть, "");
					ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяЗначенияКлассификатора, "]", "");
					
				ИначеЕсли СтрНайти(ИмяСтрокой, "(") > 0 Тогда
					
					ЗаменяемаяЧасть = Лев(ИмяСтрокой, СтрНайти(ИмяСтрокой, "("));
					ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяСтрокой, ЗаменяемаяЧасть, "");
					ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяЗначенияКлассификатора, ")", "");
					
				Иначе
					
					ИмяЗначенияКлассификатора = ИмяСтрокой;
					
				КонецЕсли;
				
				Если Не ПустаяСтрока(ИмяЗначенияКлассификатора) Тогда
					
					СвойстваНастройки.ЗапросЗначенийВыбора.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	CRM_ЗначенияКлассификаторов.Ссылка КАК Объект
					|ИЗ
					|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
					|			CRM_Классификаторы.Ссылка КАК Ссылка
					|		ИЗ
					|			ПланВидовХарактеристик.CRM_Классификаторы КАК CRM_Классификаторы
					|		ГДЕ
					|			CRM_Классификаторы.Наименование = &Наименование) КАК ВложенныйЗапрос
					|		ПО (CRM_ЗначенияКлассификаторов.Владелец = ВложенныйЗапрос.Ссылка)
					|ГДЕ
					|	CRM_ЗначенияКлассификаторов.ПометкаУдаления = ЛОЖЬ";
					
					СвойстваНастройки.ЗапросЗначенийВыбора.Параметры.Вставить("Наименование", ИмяЗначенияКлассификатора);
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СвойстваНастройки.ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СтруктураПредприятия.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.ОбособленноеПодразделение = ИСТИНА
			|	И СтруктураПредприятия.ПометкаУдаления = ЛОЖЬ
			|	И НЕ СтруктураПредприятия.Ссылка = &Основное
			|	И НЕ СтруктураПредприятия.Код = ""000000001""";
			
			СвойстваНастройки.ЗапросЗначенийВыбора.Текст = ТекстЗапроса;
			СвойстваНастройки.ЗапросЗначенийВыбора.Параметры.Вставить("Основное", Справочники.СтруктураПредприятия.ОсновноеПодразделение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после перезаполнения панели настроек формы отчета.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   ПараметрыЗаполнения - Структура - Параметры, которые будут загружены в отчет.
//
Процедура ПослеЗаполненияПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
	
	ИзменитьПараметр = (ПараметрыЗаполнения.ИмяСобытия = ""
		И ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы = Истина
		Или ПараметрыЗаполнения.ИмяСобытия = "НастройкиПоУмолчанию");
		
	ПараметрГодПланирования = Новый ПараметрКомпоновкиДанных("ПериодПланированияСледующийГод");
	
	ЗначениеПараметра = Форма.Отчет.КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГодПланирования);
	
	ИдентификаторПользовательскойНастройки = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(ЗначениеПараметра);
	ОбъектПользовательскойНастройки = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторПользовательскойНастройки);
	
	Если Не ЗначениеЗаполнено(ОбъектПользовательскойНастройки.Значение)
		И (ИзменитьПараметр Или ПараметрыЗаполнения.ИмяСобытия = "ПриОбновленииСоставаПользовательскихНастроекНаСервере") Тогда
		
		ОбъектПользовательскойНастройки.Значение = КонецГода(ТекущаяДатаСеанса()) + 1;
		
	КонецЕсли;
	
	ИндексНастройки = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Индекс(ОбъектПользовательскойНастройки);
	
	Если ИндексНастройки >= 0 Тогда
		
		ПутьКДанным = СтрШаблон("Отчет.КомпоновщикНастроек.ПользовательскиеНастройки[%1].Значение", ИндексНастройки);
		
		Для Каждого Элемент Из Форма.Элементы Цикл
			
			Если СтрНачинаетсяС(Элемент.Имя, "КомпоновщикНастроекПользовательскиеНастройкиЭлемент")
				И ТипЗнч(Элемент) = Тип("ПолеФормы")
				И Элемент.ПутьКДанным = ПутьКДанным Тогда
				
				Элемент.КнопкаВыпадающегоСписка = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОграничитьДоступКПотенциальнымТТ 	= Истина;
	ОбособленноеПодразделение 			= Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	Если РольДоступна("ПолныеПрава") Тогда
		ОграничитьДоступКПотенциальнымТТ = Ложь;
	Иначе
		
		ТекущийПользователь 		= Пользователи.ТекущийПользователь();
		ПодразделениеПользователя 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение", Истина);
		ОбособленноеПодразделение 	= Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(ПодразделениеПользователя);
		
		РольДТН_УИД = Новый УникальныйИдентификатор("a75b59f5-1ba2-11e8-92c3-005056bcf152");
		РольДТН 	= Справочники.РолиИсполнителей.ПолучитьСсылку(РольДТН_УИД);
		
		ГруппаДоступа_УИД 	= Новый УникальныйИдентификатор("9c95796b-df89-11e9-8661-005056bcd3e3");
		ГруппаДоступа 		= Справочники.ГруппыДоступа.ПолучитьСсылку(ГруппаДоступа_УИД);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнителиЗадач.Исполнитель КАК Пользователь
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.Исполнитель = &Пользователь
		|	И ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыДоступаПользователи.Пользователь
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Ссылка = &ГруппаДоступа
		|	И ГруппыДоступаПользователи.Пользователь = &Пользователь";
		
		Запрос.УстановитьПараметр("Пользователь", 		ТекущийПользователь);
		Запрос.УстановитьПараметр("РольИсполнителя", 	РольДТН);
		Запрос.УстановитьПараметр("ГруппаДоступа", 		ГруппаДоступа);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ОграничитьДоступКПотенциальнымТТ = РезультатЗапроса.Пустой();
		
	КонецЕсли;
	
	УстанавливаемыеПараметры = Новый Соответствие;
	
	// ++ VOG Солодов В.В. 22.10.2021 CRM-1263
	ПараметрГодПланирования 	= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодПланированияСледующийГод");
	
	Если ТипЗнч(ПараметрГодПланирования.Значение) = Тип("СтандартнаяДатаНачала") Тогда
		ДатаПланирования = НачалоГода(ПараметрГодПланирования.Значение.Дата);
	Иначе
		ДатаПланирования = НачалоГода(ПараметрГодПланирования.Значение);
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	РазностьДат = Год(ДатаПланирования) - Год(ТекущаяДата);
	
	Если РазностьДат = 0 Тогда
		ДатаОтчета 			= ДатаПланирования - 1;
	ИначеЕсли РазностьДат = 1 Тогда
		ДатаОтчета 			= ТекущаяДата;
	ИначеЕсли РазностьДат < 0 Тогда
		ДатаОтчета 			= КонецГода(ДатаПланирования);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверный период'");
	КонецЕсли;
	
	УстанавливаемыеПараметры.Вставить("ДатаОтчета", 						ДатаОтчета);
	// До изменения
	//ПараметрДатаОтчета 			= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДатаОтчета");
	//ПараметрПериодПланирования 	= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодПланированияСледующийГод");
	//
	//// +++ VOG Кулаков П.Л. 12.01.2021 DEV-
	//ДатаОтчета = ПараметрДатаОтчета.Значение.Дата;
	//// --- VOG Кулаков П.Л.
	//
	//Если ПараметрДатаОтчета = Неопределено
	//	Или ПараметрДатаОтчета.Использование = Ложь
	//	Или ПараметрДатаОтчета.Значение = Дата(1,1,1) Тогда
	//	
	//	УстанавливаемыеПараметры.Вставить("ДатаОтчета", НачалоДня(ТекущаяДата()));
	//	// +++ VOG Кулаков П.Л. 12.01.2021 DEV-
	//	ДатаОтчета = НачалоДня(ТекущаяДата());
	//	// --- VOG Кулаков П.Л.
	//	
	//КонецЕсли;
	//
	//Если ПараметрПериодПланирования = Неопределено
	//	Или ПараметрПериодПланирования.Использование = Ложь
	//	Или ПараметрПериодПланирования.Значение = Дата(1,1,1) Тогда
	//	
	//	УстанавливаемыеПараметры.Вставить("ПериодПланированияСледующийГод", КонецГода(ДатаОтчета) + 1);
	//	
	//КонецЕсли;
	// -- VOG Солодов В.В. 22.10.2021 CRM-1263
	
	// +++ VOG Кулаков П.Л. 12.01.2021 DEV-
	//УстанавливаемыеПараметры.Вставить("ДатаНачалаПродажиПрошлыйГод", 		НачалоГода(НачалоГода(ТекущаяДата()) - 1));
	//УстанавливаемыеПараметры.Вставить("ДатаОкончанияПродажиПрошлыйГод", 	КонецГода(НачалоГода(ТекущаяДата()) - 1));
	//УстанавливаемыеПараметры.Вставить("ДатаНачалаПродажиТекущийГод", 		НачалоГода(ТекущаяДата()));
	//УстанавливаемыеПараметры.Вставить("ДатаОкончанияПродажиТекущийГод", 	НачалоМесяца(ТекущаяДата()) - 1);
	//УстанавливаемыеПараметры.Вставить("ДатаНачалаПланыПродаж", 			НачалоМесяца(ТекущаяДата()));
	//УстанавливаемыеПараметры.Вставить("ДатаОкончанияПланыПродаж", 		КонецГода(ТекущаяДата()));
	УстанавливаемыеПараметры.Вставить("ДатаНачалаПродажиПрошлыйГод", 		НачалоГода(НачалоГода(ДатаОтчета) - 1));
	УстанавливаемыеПараметры.Вставить("ДатаОкончанияПродажиПрошлыйГод", 	КонецГода(НачалоГода(ДатаОтчета) - 1));
	УстанавливаемыеПараметры.Вставить("ДатаНачалаПродажиТекущийГод", 		НачалоГода(ДатаОтчета));
	УстанавливаемыеПараметры.Вставить("ДатаОкончанияПродажиТекущийГод", 	НачалоМесяца(ДатаОтчета) - 1);
	УстанавливаемыеПараметры.Вставить("ДатаНачалаПланыПродаж", 				НачалоМесяца(ДатаОтчета));
	УстанавливаемыеПараметры.Вставить("ДатаОкончанияПланыПродаж", 			КонецГода(ДатаОтчета));
	// --- VOG Кулаков П.Л.
	УстанавливаемыеПараметры.Вставить("РольМенеджер", 						Справочники.РолиКонтактныхЛицПартнеров.Менеджер);
	УстанавливаемыеПараметры.Вставить("РольКоординатор", 					Справочники.РолиКонтактныхЛицПартнеров.Координатор);
	УстанавливаемыеПараметры.Вставить("ОбособленноеПодразделение", 			ОбособленноеПодразделение);
	УстанавливаемыеПараметры.Вставить("ОграничитьДоступКПотенциальнымТТ", 	ОграничитьДоступКПотенциальнымТТ);
	УстанавливаемыеПараметры.Вставить("НаправлениеДеятельности", 			Справочники.НаправленияДеятельности.Обои);
	
	// ++ VOG Солодов В.В. 09.12.2020 CRM-1122
	УстанавливаемыеПараметры.Вставить("ДатаНачалаПродажиФиксПериод", 		НачалоГода(Дата(2020,01,01)));
	УстанавливаемыеПараметры.Вставить("ДатаОкончанияПродажиФиксПериод", 	КонецМесяца(Дата(2020,11,30)));
	// -- VOG Солодов В.В. 09.12.2020 CRM-1122
	
	КлассификаторСтатусКлиента_УИД = Новый УникальныйИдентификатор("a526ff61-910e-11e9-9b11-005056bcd3e3");
	КлассификаторСтатусКлиента = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(КлассификаторСтатусКлиента_УИД);
	
	УстанавливаемыеПараметры.Вставить("Классификатор", 						КлассификаторСтатусКлиента);
	
	ЗначениеКлассификатораЗакрыта_УИД = Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8");
	ЗначениеКлассификатораЗакрыта = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(ЗначениеКлассификатораЗакрыта_УИД);
	
	УстанавливаемыеПараметры.Вставить("СтатусТТЗакрыта", 					ЗначениеКлассификатораЗакрыта);
	// ++ VOG Солодов В.В. 15.12.2020 CRM-1135
	УстанавливаемыеПараметры.Вставить("вогПодчиненныеСотрудники", 			вогОбщегоНазначенияПовтИсп.ПолучитьПодчиненныхСотрудников());
	// -- VOG Солодов В.В. 15.12.2020 CRM-1135
	
	КомпоновкаДанныхКлиентСервер.УстановитьКоллекциюПараметров(КомпоновщикНастроек, УстанавливаемыеПараметры);
	
	// +++ VOG Кулаков П.Л. 12.01.2021 DEV-
	УстановитьЗаголовкиПолей(ДатаОтчета);
	// --- VOG Кулаков П.Л.
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	// Формирование отчета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
	ДокументРезультат.ФиксацияСлева = 1;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// +++ VOG Кулаков П.Л. 12.01.2021 DEV-
Процедура УстановитьЗаголовкиПолей(ДатаОтчета) 
	
	МассивОсновныхГруппировок = Новый Массив;
	МассивОсновныхГруппировок.Добавить("Количество");
	МассивОсновныхГруппировок.Добавить("Выручка");
	МассивОсновныхГруппировок.Добавить("Цена");
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("%1БюджетСледующийГод",
		СтрШаблон(НСтр("ru = 'Бюджет %1'"), Формат(КонецГода(ДатаОтчета) + 1, "ДФ=гггг")));
	СоответствиеПолей.Вставить("%1ФактТекущийГод",
		СтрШаблон(НСтр("ru = 'Факт %1'"), Формат(ДатаОтчета, "ДФ=гггг")));
	СоответствиеПолей.Вставить("%1ФактПрошлыйГод",
		СтрШаблон(НСтр("ru = 'Факт %1'"), Формат(НачалоГода(ДатаОтчета) - 1, "ДФ=гггг")));
	СоответствиеПолей.Вставить("%1ПроцентРостаСледующийТекущий",
		СтрШаблон(
			НСтр("ru = '%1 роста, %2/%3'"),
			"%",
			Формат(КонецГода(ДатаОтчета) + 1, "ДФ=гггг"),
			Формат(ДатаОтчета, "ДФ=гггг")));
	СоответствиеПолей.Вставить("%1ОтклонениеСледующийТекущий",
		СтрШаблон(
			НСтр("ru = 'Отклонение, %1/%2'"),
			Формат(КонецГода(ДатаОтчета) + 1, "ДФ=гггг"),
			Формат(ДатаОтчета, "ДФ=гггг")));
	СоответствиеПолей.Вставить("%1ПроцентРостаСледующийПрошлый",
		СтрШаблон(
			НСтр("ru = '%1 роста, %2/%3'"),
			"%",
			Формат(КонецГода(ДатаОтчета) + 1, "ДФ=гггг"),
			Формат(НачалоГода(ДатаОтчета) - 1, "ДФ=гггг")));
	СоответствиеПолей.Вставить("%1ОтклонениеСледующийПрошлый",
		СтрШаблон(
			НСтр("ru = 'Отклонение, %1/%2'"),
			Формат(КонецГода(ДатаОтчета) + 1, "ДФ=гггг"),
			Формат(НачалоГода(ДатаОтчета) - 1, "ДФ=гггг")));
	
	Для Каждого ИмяГруппировки Из МассивОсновныхГруппировок Цикл
		Для Каждого КлючИЗначение Из СоответствиеПолей Цикл
			
			ИмяПоля = СтрШаблон(КлючИЗначение.Ключ, ИмяГруппировки);
			// ++ VOG Солодов В.В. 24.12.2020 
			Поле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Поле = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Поля.Найти(ИмяПоля);
			КонецЕсли;
			// До изменения
			//Поле = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Поля.Найти(ИмяПоля);
			// -- VOG Солодов В.В. 24.12.2020
			Если Не Поле = Неопределено Тогда
				// ++ VOG Солодов В.В. 09.12.2020 CRM-1122
				Если ИмяПоля = "ЦенаФактТекущийГод" Тогда
					Поле.Заголовок = СтрШаблон(НСтр("ru = 'Факт %1'"), Формат(Дата(2020,01,01), "ДФ=гггг"));
				ИначеЕсли ИмяПоля = "ЦенаПроцентРостаСледующийТекущий" Тогда
					Поле.Заголовок = СтрШаблон(
						НСтр("ru = '%1 роста, %2/%3'"),
						"%",
						Формат(КонецГода(ДатаОтчета) + 1, "ДФ=гггг"),
						Формат(Дата(2020,01,01), "ДФ=гггг"));
				Иначе
					Поле.Заголовок = КлючИЗначение.Значение;
				КонецЕсли;
				// До изменения
				//Поле.Заголовок = КлючИЗначение.Значение;
				// -- VOG Солодов В.В. 09.12.2020 CRM-1122
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

#КонецОбласти

#КонецЕсли