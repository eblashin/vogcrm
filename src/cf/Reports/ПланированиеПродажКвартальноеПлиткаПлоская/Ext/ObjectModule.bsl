
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Задать настройки формы отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - 
//   КлючВарианта - Строка, Неопределено - 
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриОпределенииПараметровВыбора = Истина;
	// ++ VOG Солодов В.В. 24.08.2021 DEV-881
	Настройки.События.ПослеЗаполненияПанелиБыстрыхНастроек 		= Истина;
	Настройки.ЗагрузитьНастройкиПриИзмененииПараметров.Добавить(Новый ПараметрКомпоновкиДанных("КварталПланирования"));
	// -- VOG Солодов В.В. 24.08.2021 DEV-881
	
КонецПроцедуры

// Вызывается в форме отчета перед выводом настройки.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - форма отчета.
//   СвойстваНастройки - Структура - описание настройки отчета, которая будет выведена в форме отчета.
//       * ОписаниеТипов - ОписаниеТипов - тип настройки.
//       * ЗначенияДляВыбора - СписокЗначений - объекты, которые будут предложены пользователю в списке
//           выбора. Дополняет список объектов, уже выбранных пользователем ранее.
//       * ЗапросЗначенийВыбора - Запрос - возвращает объекты, которыми необходимо дополнить ЗначенияДляВыбора.
//           Первой колонкой (с 0м индексом) должен выбираться объект,
//           который следует добавить в ЗначенияДляВыбора.Значение.
//           Для отключения автозаполнения
//           в свойство ЗапросЗначенийВыбора.Текст следует записать пустую строку.
//       * ОграничиватьВыборУказаннымиЗначениями - Булево - когда Истина, то выбор пользователя будет
//           ограничен значениями, указанными в ЗначенияДляВыбора (его конечным состоянием).
//
// См. также:
//   ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора().
//
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	
	// ++ VOG Солодов В.В. 24.08.2021 DEV-881
	Если ТипЗнч(СвойстваНастройки.ЭлементКД) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
		Если СвойстваНастройки.ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов")) Тогда
			
			Если СвойстваНастройки.ЭлементКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусТТ") Тогда
				
				СтатусыТТ = Новый Массив;
				СтатусыТТ.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("f84779ae-9a73-11e8-89fa-005056bc3fe8")));
				СтатусыТТ.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af2-9a74-11e8-89fa-005056bc3fe8")));
				СтатусыТТ.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("047f780f-8b44-11e9-9b11-005056bcd3e3")));
				
				СвойстваНастройки.ЗначенияДляВыбора.ЗагрузитьЗначения(СтатусыТТ);
				
			Иначе
				
				ИмяЗначенияКлассификатора 	= "";
				ИмяСтрокой 					= Строка(СвойстваНастройки.ЭлементКД.ЛевоеЗначение);
				
				Если СтрНайти(ИмяСтрокой, "[") > 0 Тогда
					
					ЗаменяемаяЧасть = Лев(ИмяСтрокой, СтрНайти(ИмяСтрокой, "["));
					ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяСтрокой, ЗаменяемаяЧасть, "");
					ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяЗначенияКлассификатора, "]", "");
					
				ИначеЕсли СтрНайти(ИмяСтрокой, "(") > 0 Тогда
					
					ЗаменяемаяЧасть = Лев(ИмяСтрокой, СтрНайти(ИмяСтрокой, "("));
					ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяСтрокой, ЗаменяемаяЧасть, "");
					ИмяЗначенияКлассификатора 	= СтрЗаменить(ИмяЗначенияКлассификатора, ")", "");
					
				Иначе
					
					ИмяЗначенияКлассификатора = ИмяСтрокой;
					
				КонецЕсли;
				
				Если Не ПустаяСтрока(ИмяЗначенияКлассификатора) Тогда
					
					СвойстваНастройки.ЗапросЗначенийВыбора.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	CRM_ЗначенияКлассификаторов.Ссылка КАК Объект
					|ИЗ
					|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
					|			CRM_Классификаторы.Ссылка КАК Ссылка
					|		ИЗ
					|			ПланВидовХарактеристик.CRM_Классификаторы КАК CRM_Классификаторы
					|		ГДЕ
					|			CRM_Классификаторы.Наименование = &Наименование) КАК ВложенныйЗапрос
					|		ПО (CRM_ЗначенияКлассификаторов.Владелец = ВложенныйЗапрос.Ссылка)
					|ГДЕ
					|	CRM_ЗначенияКлассификаторов.ПометкаУдаления = ЛОЖЬ";
					
					СвойстваНастройки.ЗапросЗначенийВыбора.Параметры.Вставить("Наименование", ИмяЗначенияКлассификатора);
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СвойстваНастройки.ЭлементКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодразделениеОтбор") Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СтруктураПредприятия.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.ОбособленноеПодразделение = ИСТИНА
			|	И СтруктураПредприятия.ПометкаУдаления = ЛОЖЬ
			|	И НЕ СтруктураПредприятия.Ссылка = &Основное
			|	И НЕ СтруктураПредприятия.Код = ""000000006""";
			
			СвойстваНастройки.ЗапросЗначенийВыбора.Текст = ТекстЗапроса;
			СвойстваНастройки.ЗапросЗначенийВыбора.Параметры.Вставить("Основное", Справочники.СтруктураПредприятия.ОсновноеПодразделение);
			
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 24.08.2021 DEV-881
	
КонецПроцедуры

// ++ VOG Солодов В.В. 24.08.2021 DEV-881

// Вызывается после перезаполнения панели настроек формы отчета.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   ПараметрыЗаполнения - Структура - Параметры, которые будут загружены в отчет.
//
Процедура ПослеЗаполненияПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
	
	ИзменитьПараметр = (ПараметрыЗаполнения.ИмяСобытия = ""
		И ПараметрыЗаполнения.ПользовательскиеНастройкиМодифицированы = Истина
		Или ПараметрыЗаполнения.ИмяСобытия = "НастройкиПоУмолчанию");
	
	ПараметрКварталПланирования = Новый ПараметрКомпоновкиДанных("КварталПланирования");
	ПараметрКонецПродаж 		= Новый ПараметрКомпоновкиДанных("КонецПродажПользователь");
	ПараметрДатаКомплектов 		= Новый ПараметрКомпоновкиДанных("ДатаКомплектовПользователь");
	
	ИндексНастройки 			= Неопределено;
	КварталПланирования 		= Неопределено;
	
	УстановленныеПараметры 		= 0;
	Для Каждого ПользовательскаяНастройка Из Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если УстановленныеПараметры = 3 Тогда
			Прервать;
		КонецЕсли;
		
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			
			Если ПользовательскаяНастройка.Параметр = ПараметрКварталПланирования Тогда
				
				Если Не ЗначениеЗаполнено(ПользовательскаяНастройка.Значение)
					И (ИзменитьПараметр Или ПараметрыЗаполнения.ИмяСобытия = "ПриОбновленииСоставаПользовательскихНастроекНаСервере") Тогда
					
					ПользовательскаяНастройка.Значение = КонецКвартала(ТекущаяДатаСеанса()) + 1;
					
					Если ПараметрыЗаполнения.ИмяСобытия = "ПриОбновленииСоставаПользовательскихНастроекНаСервере" Тогда
						ИзменитьПараметр = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				КварталПланирования = ПользовательскаяНастройка.Значение;
				
				ИндексНастройки = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Индекс(ПользовательскаяНастройка);
				УстановленныеПараметры = УстановленныеПараметры + 1;
				
			ИначеЕсли ПользовательскаяНастройка.Параметр = ПараметрКонецПродаж Тогда
				
				Если ИзменитьПараметр Тогда
					ПользовательскаяНастройка.Значение = НачалоКвартала(КварталПланирования) - 1;
					ПользовательскаяНастройка.Использование = Ложь;
				КонецЕсли;
				
				УстановленныеПараметры = УстановленныеПараметры + 1;
				
			ИначеЕсли ПользовательскаяНастройка.Параметр = ПараметрДатаКомплектов
				И Не ЗначениеЗаполнено(ПользовательскаяНастройка.Значение) Тогда
				
				Если ИзменитьПараметр Тогда
					ПользовательскаяНастройка.Значение = ТекущаяДатаСеанса();
				КонецЕсли;
				
				УстановленныеПараметры = УстановленныеПараметры + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ИндексНастройки = Неопределено Тогда
		
		ПутьКДанным = СтрШаблон("Отчет.КомпоновщикНастроек.ПользовательскиеНастройки[%1].Значение", ИндексНастройки);
		
		Для Каждого Элемент Из Форма.Элементы Цикл 
			
			Если СтрНачинаетсяС(Элемент.Имя, "КомпоновщикНастроекПользовательскиеНастройкиЭлемент")
				И ТипЗнч(Элемент) = Тип("ПолеФормы")
				И Элемент.ПутьКДанным = ПутьКДанным Тогда
				
				Элемент.КнопкаВыпадающегоСписка = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// -- VOG Солодов В.В. 24.08.2021 DEV-881

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Ссылки элементов
	ТекущийПользователь 			= Пользователи.ТекущийПользователь();
	ПодразделениеПользователя 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение", Истина);
	ОбособленноеПодразделение 		= Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(ПодразделениеПользователя);
	
	КлассификаторКлассификацияТТ 	= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("b3d84c6b-7581-11ea-87ff-005056bc3fe8"));
	КлассификаторПлощадьОтдела 		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("aa8de7b3-1aec-11e8-92c3-005056bcf152"));
	КлассификаторСтатусТТ 			= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8"));
	КлассификаторФорматТРТ 			= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("47b0ee76-ada2-11e7-80ce-08606e7382bc"));
	КлассификаторКатегорияКлиента 	= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("165f1d7d-b614-11ea-8f2a-005056bcd3e3"));
	
	СтатусТТЗакрыта 				= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8"));
	
	СписокDIY = Новый СписокЗначений;
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("4fc40649-ada2-11e7-80ce-08606e7382bc")));
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("64a60c68-06d3-11eb-8f2a-005056bcd3e3")));
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("6cac4f07-06d3-11eb-8f2a-005056bcd3e3")));
	
	// +++ VOG Кулаков П.Л. 15.06.2021 DEV-
	СписокНоменклатурныхГрупп = Новый Массив;
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("3d9d7ea6-9214-11e3-ba76-005056ac259f"))); 	// Cersanit эконом
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("0724a7b8-9214-11e3-ba76-005056ac259f"))); 	// Cersanit грес
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("1124e951-8af2-11e6-bdbb-005056acd97c"))); 	// Cersanit эксклюзив
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("4fb1c538-8af2-11e6-bdbb-005056acd97c"))); 	// Cersanit эксклюзив эконом
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("fe9b747f-66b5-11e3-b895-005056ac8899"))); 	// Керамин Грес
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("890358c7-9215-11e3-ba76-005056ac259f"))); 	// Керамин эконом
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("6305ae54-66b2-11e3-b895-005056ac8899"))); 	// Лассельсбергер Грес
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("beb8fcb7-9215-11e3-ba76-005056ac259f"))); 	// Лассельсбергер эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("ac73bba4-d609-11e8-90d6-005056acd97c"))); 	// Евро-Керамика эконом
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("718e0936-4466-11e8-8a33-005056acd97c"))); 	// Глобал Тайл Керосса
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("2c413b40-6868-11e7-9071-005056acd97c"))); 	// Глобал Тайл Береза эконом
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("93d2e7ca-9214-11e3-ba76-005056ac259f"))); 	// Глобал Тайл Брест
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("ce968682-8b47-11e9-b50e-005056acd97c"))); 	// Глобал Тайл Волгоград
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("d9c62157-8b47-11e9-b50e-005056acd97c"))); 	// Глобал Тайл Волгоград эконом
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("bbf9cf19-9214-11e3-ba76-005056ac259f"))); 	// Глобал Тайл Контакт
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("dbded927-9214-11e3-ba76-005056ac259f"))); 	// Глобал Тайл Контакт эконом
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("bcd952fb-943b-11ea-9d8b-005056acd97c"))); 	// Глобал Тайл Мозаика
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("7d97e0a1-ec17-11e5-b10e-005056acd97c"))); 	// Глобал Тайл Печоры эконом
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("4f495708-9215-11e3-ba76-005056ac259f"))); 	// Глобал Тайл УФА эконом
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("12f8f600-6868-11e7-9071-005056acd97c"))); 	// Глобал Тайл Шахты эконом
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("9b07ca14-66bc-11e3-b895-005056ac8899"))); 	// Meissen грес
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("d1baae94-1cdc-11eb-b333-005056bcd3e3"))); 	// Concept GT эконом
	СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("5016c309-9428-11ea-9d8b-005056acd97c"))); 	// Интеркерама мозаика
	// --- VOG Кулаков П.Л.
	
	УстановитьПривилегированныйРежим(Истина);
	ПодчиненныеСотрудники = Новый Массив(ПараметрыСеанса.вогПодчиненныеСотрудники);
	УстановитьПривилегированныйРежим(Ложь);
	
	СтатусыКомандировок = Новый Массив;
	СтатусыКомандировок.Добавить(Перечисления.вогСтатусыКомандировок.Утверждено);
	СтатусыКомандировок.Добавить(Перечисления.вогСтатусыКомандировок.ГотовоКПроверке);
	СтатусыКомандировок.Добавить(Перечисления.вогСтатусыКомандировок.Проверено);
	
	ВидыТорговыхТочек = Новый Массив;
	ВидыТорговыхТочек.Добавить(Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
	ВидыТорговыхТочек.Добавить(Справочники.вогВидыТорговыхТочек.ТРТД);
	ВидыТорговыхТочек.Добавить(Справочники.вогВидыТорговыхТочек.Дистрибьютор);
	
	//
	МакетОформления = Неопределено;
	
	// ++ VOG Солодов В.В. 24.08.2021 DEV-881
	ПараметрКварталПланирования 	= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "КварталПланирования");
	КварталПланирования 			= НачалоКвартала(ПараметрКварталПланирования.Значение);
	
	ТекущийКвартал 					= Цел((Месяц(КварталПланирования) - 1) / 3);
	Если ТекущийКвартал = 0 Тогда
		ТекущийКвартал 				= 4;
	КонецЕсли;
	ТекущийГод 						= Год(ТекущаяДата());
	ТекущаяДата 					= КонецМесяца(Дата(ТекущийГод, ТекущийКвартал * 3, 1));
	ПериодПланирования 				= КонецДня(ТекущаяДата + 1);
	
	ПараметрДатаКомплектов 			= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДатаКомплектовПользователь");
	
	Если ПараметрДатаКомплектов.Использование И ЗначениеЗаполнено(ПараметрДатаКомплектов.Значение) Тогда
		ДатаКомплектов 				= ПараметрДатаКомплектов.Значение;
	Иначе
		ДатаКомплектов 				= ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПараметрКонецПродажПользователь = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "КонецПродажПользователь");
	
	Если ПараметрКонецПродажПользователь.Использование
		И ЗначениеЗаполнено(ПараметрКонецПродажПользователь.Значение) Тогда
		КонецПродажТекущаяДата 		= ПараметрКонецПродажПользователь.Значение;
	Иначе
		КонецПродажТекущаяДата 		= ТекущаяДата;
	КонецЕсли;
	// До изменения
	//ЗначениеПараметраДатаОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДатаОтчета").Значение;
	//Если ТипЗнч(ЗначениеПараметраДатаОтчета) = Тип("Дата") Тогда
	//	ТекущаяДата 					= КонецДня(ЗначениеПараметраДатаОтчета);
	//Иначе
	//	ТекущаяДата 					= КонецДня(ЗначениеПараметраДатаОтчета.Дата);
	//КонецЕсли;
	//ТекущийКвартал 						= Цел((Месяц(ТекущаяДата) - 1) / 3) + 1;
	// -- VOG Солодов В.В. 24.08.2021 DEV-881
	
	УстановитьЗаголовкиПолей(ТекущаяДата, ТекущийКвартал);
	
	// Продажи текущий квартал текущего года
	НачалоПродаж 						= НачалоГода(ТекущаяДата);
	КонецПродаж 						= НачалоМесяца(ТекущаяДата) - 1;
	
	// Продажи весь прошлый год
	НачалоПродажПрошлыйГод 				= НачалоГода(НачалоПродаж - 1);
	КонецПродажПрошлыйГод 				= КонецГода(НачалоПродажПрошлыйГод);
	
	// Продажи следующий квартал прошлого года
	// +++ VOG Кулаков П.Л. 15.06.2021 DEV-648
	//КонецПродажПрошлыйГодСледКвартал 	= КонецКвартала(ДобавитьМесяц(КонецПродаж, - (12 - 3 * ТекущийКвартал)));
	//НачалоПродажПрошлыйГодСледКвартал 	= НачалоКвартала(КонецПродажПрошлыйГодСледКвартал);
	// ++ VOG Солодов В.В. 24.08.2021 DEV-881
	// До изменения
	//ЗначениеПараметраПериодПланирования = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодПланирования").Значение;
	//Если ТипЗнч(ЗначениеПараметраПериодПланирования) = Тип("Дата") Тогда
	//	ПериодПланирования 					= КонецДня(ЗначениеПараметраПериодПланирования);
	//Иначе
	//	ПериодПланирования 					= КонецДня(ЗначениеПараметраПериодПланирования.Дата);
	//КонецЕсли;
	// -- VOG Солодов В.В. 24.08.2021 DEV-881
	
	КонецПродажПрошлыйГодСледКвартал 	= КонецКвартала(ДобавитьМесяц(ПериодПланирования, - 12));
	НачалоПродажПрошлыйГодСледКвартал 	= НачалоКвартала(КонецПродажПрошлыйГодСледКвартал);
	// --- VOG Кулаков П.Л.
	
	// План текущий квартал
	ДатаНачалаРасчетаПрошлыйКвартал 	= НачалоКвартала(ТекущаяДата);
	
	// План следующий квартал
	ДатаНачалаРасчетаСледующийКвартал 	= ДобавитьМесяц(ДатаНачалаРасчетаПрошлыйКвартал, 3);
	
	// Продажи следующий квартал прошлого года
	КонецПродажL2L 						= КонецКвартала(ДобавитьМесяц(ДатаНачалаРасчетаСледующийКвартал, -12));
	
	// врем
	ДатаНачалаРасчетаСледующийКвартал 	= ДобавитьМесяц(ДатаНачалаРасчетаСледующийКвартал, 3);
	ДатаНачалаРасчетаПрошлыйКвартал 	= ДобавитьМесяц(ДатаНачалаРасчетаПрошлыйКвартал, 3);
	
	СценарийПланирования 				= Справочники.вогСценарииПланирования.ПланНаКвартал;
	ВерсияСценария 						= Справочники.вогВерсииСценариевПланирования.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогВерсииСценариевПланирования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогВерсииСценариевПланирования КАК вогВерсииСценариевПланирования
		|ГДЕ
		|	вогВерсииСценариевПланирования.ПометкаУдаления = ЛОЖЬ
		|	И вогВерсииСценариевПланирования.Владелец = &СценарийПланирования";
	
	Запрос.УстановитьПараметр("СценарийПланирования", СценарийПланирования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВерсияСценария = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	// Установка параметров
	УстанавливаемыеПараметры = Новый Соответствие;
	УстанавливаемыеПараметры.Вставить("Ссылка", 							Документы.ПланированиеПродажПлитка.ПустаяСсылка());
	УстанавливаемыеПараметры.Вставить("ДатаДокумента", 						ТекущаяДата);
	УстанавливаемыеПараметры.Вставить("Направление", 						Справочники.НаправленияДеятельности.Плитка);
	УстанавливаемыеПараметры.Вставить("Подразделение", 						ОбособленноеПодразделение);
	УстанавливаемыеПараметры.Вставить("Подчиненные", 						ПодчиненныеСотрудники);
	УстанавливаемыеПараметры.Вставить("ПринадлежностьБренда", 				Перечисления.вогПринадлежностьБренда.ТоварныйПортфельВОГ);
	УстанавливаемыеПараметры.Вставить("РольДоступнаПолныеПрава", 			РольДоступна("ПолныеПрава"));
	УстанавливаемыеПараметры.Вставить("КлассификаторКлассификацияТТ", 		КлассификаторКлассификацияТТ);
	УстанавливаемыеПараметры.Вставить("КлассификаторПлощадьОтдела", 		КлассификаторПлощадьОтдела);
	УстанавливаемыеПараметры.Вставить("КлассификаторСтатусТТ", 				КлассификаторСтатусТТ);
	УстанавливаемыеПараметры.Вставить("КлассификаторФорматТРТ", 			КлассификаторФорматТРТ);
	УстанавливаемыеПараметры.Вставить("ФорматDIY", 							СписокDIY);
	УстанавливаемыеПараметры.Вставить("НачалоПродаж", 						НачалоПродаж);
	УстанавливаемыеПараметры.Вставить("КонецПродаж", 						КонецПродаж);
	// ++ VOG Солодов В.В. 24.08.2021 DEV-881
	УстанавливаемыеПараметры.Вставить("КонецПродажТекущаяДата", 			КонецПродажТекущаяДата);
	// До изменения
	//// +++ VOG Кулаков П.Л. 23.06.2021 DEV-678
	//УстанавливаемыеПараметры.Вставить("КонецПродажТекущаяДата", 			ТекущаяДата);
	//// --- VOG Кулаков П.Л.
	// -- VOG Солодов В.В. 24.08.2021 DEV-881
	УстанавливаемыеПараметры.Вставить("НачалоПродажПрошлыйГод", 			НачалоПродажПрошлыйГод);
	УстанавливаемыеПараметры.Вставить("КонецПродажПрошлыйГод", 				КонецПродажПрошлыйГод);
	УстанавливаемыеПараметры.Вставить("КлассификаторКатегорияКлиента", 		КлассификаторКатегорияКлиента);
	УстанавливаемыеПараметры.Вставить("НачалоПродажПрошлыйГодСледКвартал", 	НачалоПродажПрошлыйГодСледКвартал);
	УстанавливаемыеПараметры.Вставить("КонецПродажПрошлыйГодСледКвартал", 	КонецПродажПрошлыйГодСледКвартал);
	УстанавливаемыеПараметры.Вставить("ДатаНачалаРасчетаПрошлыйКвартал", 	ДатаНачалаРасчетаПрошлыйКвартал);
	УстанавливаемыеПараметры.Вставить("ДатаНачалаРасчетаСледующийКвартал", 	ДатаНачалаРасчетаСледующийКвартал);
	УстанавливаемыеПараметры.Вставить("КонецПродажL2L", 					КонецПродажL2L);
	УстанавливаемыеПараметры.Вставить("СтатусТТЗакрыта", 					СтатусТТЗакрыта);
	УстанавливаемыеПараметры.Вставить("СтатусыКомандировок", 				СтатусыКомандировок);
	УстанавливаемыеПараметры.Вставить("ВидыТорговыхТочек", 					ВидыТорговыхТочек);
	УстанавливаемыеПараметры.Вставить("ПериодПланаНаМесяц", 				НачалоМесяца(ТекущаяДата)); // ИЗМЕНИТЬ!!!!!!!!!!
	УстанавливаемыеПараметры.Вставить("Сценарий", 							Справочники.вогСценарииПланирования.ПланНаМесяцПоКлиентам);
	УстанавливаемыеПараметры.Вставить("СписокНоменклатурныхГрупп", 			СписокНоменклатурныхГрупп);
	УстанавливаемыеПараметры.Вставить("СценарийПланирования", 				СценарийПланирования);
	УстанавливаемыеПараметры.Вставить("Версия", 							ВерсияСценария);
	УстанавливаемыеПараметры.Вставить("РольМенеджер", 						Справочники.РолиКонтактныхЛицПартнеров.Менеджер);
	// ++ VOG Солодов В.В. 24.08.2021 DEV-881
	УстанавливаемыеПараметры.Вставить("ДатаКомплектов", 					ДатаКомплектов);
	УстанавливаемыеПараметры.Вставить("ПериодПланирования", 				НачалоДня(ПериодПланирования));
	// -- VOG Солодов В.В. 24.08.2021 DEV-881
	
	КомпоновкаДанныхКлиентСервер.УстановитьКоллекциюПараметров(КомпоновщикНастроек, УстанавливаемыеПараметры);
	
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки 			= Новый ДанныеРасшифровкиКомпоновкиДанных;
	Настройки 					= КомпоновщикНастроек.ПолучитьНастройки();
	
	МакетКомпоновкиДанных 		= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,, ДанныеРасшифровки, Истина, Истина);
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ВключитьВозможностьСверткиГруппыКолонок(ДокументРезультат, "Выставочное оборудование");
	ВключитьВозможностьСверткиГруппыКолонок(ДокументРезультат, "Выставление");
	ВключитьВозможностьСверткиГруппыКолонок(ДокументРезультат, "Продажи");
	ВключитьВозможностьСверткиГруппыКолонок(ДокументРезультат, "Маркетинг");
	
	ДокументРезультат.ПоказатьУровеньГруппировокКолонок(0);
	
	ДокументРезультат.ФиксацияСверху 	= 3;
	
	ДокументРезультат.ФиксацияСлева 	= 2;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗаголовкиПолей(ДатаДокумента, ТекущийКвартал)
	
	СледующийКвартал = ТекущийКвартал + 1;
	
	Если СледующийКвартал > 4 Тогда
		СледующийКвартал = 1;
	КонецЕсли;
	
	Для Каждого Поле Из СхемаКомпоновкиДанных.НаборыДанных.Данные.Поля Цикл
		
		Если СтрНайти(Поле.Заголовок, "%Текущий год%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Текущий год%", Формат(ДатаДокумента, "ДФ=yyyy"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Прошлый год%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Прошлый год%", Формат(НачалоГода(ДатаДокумента) - 1, "ДФ=yyyy"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Следующий квартал%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Следующий квартал%", СтрШаблон("%1 кв", СледующийКвартал));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Прошлый квартал%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Прошлый квартал%", СтрШаблон("%1 кв", ТекущийКвартал));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%1 месяц%") > 0 Тогда
			ДатаМесяца = ДобавитьМесяц(НачалоГода(ДатаДокумента), ТекущийКвартал * 3);
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%1 месяц%", Формат(ДатаМесяца, "ДФ=MMMM"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%2 месяц%") > 0 Тогда
			ДатаМесяца = ДобавитьМесяц(НачалоГода(ДатаДокумента), ТекущийКвартал * 3 + 1);
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%2 месяц%", Формат(ДатаМесяца, "ДФ=MMMM"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%3 месяц%") > 0 Тогда
			ДатаМесяца = ДобавитьМесяц(НачалоГода(ДатаДокумента), ТекущийКвартал * 3 + 2);
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%3 месяц%", Формат(ДатаМесяца, "ДФ=MMMM"));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьВозможностьСверткиГруппыКолонок(ДокументРезультат, НазваниеГруппыКолонок)
	
	// Первая таблица
	// найдем первую ячейку группы
	ПерваяЯчейкаГруппы = ДокументРезультат.НайтиТекст(НазваниеГруппыКолонок,,,, Истина);
	Если ПерваяЯчейкаГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// определим количество колонок группы (используется особенность объединенных ячеек - одинаковый текст в них)
	КоличествоКолонокГруппы = 1;
	Пока ПерваяЯчейкаГруппы.Текст = ДокументРезультат.Область(ПерваяЯчейкаГруппы.Верх, ПерваяЯчейкаГруппы.Лево + КоличествоКолонокГруппы).Текст Цикл
		КоличествоКолонокГруппы = КоличествоКолонокГруппы + 1;
	КонецЦикла;
	
	Если НазваниеГруппыКолонок = "Маркетинг" Тогда
		КолонкаНачалаСвертки 	= ПерваяЯчейкаГруппы.Лево + 1;
	Иначе
		КолонкаНачалаСвертки 	= ПерваяЯчейкаГруппы.Лево + 2;
	КонецЕсли;
	КолонкаКонцаСвертки 	= ПерваяЯчейкаГруппы.Лево + КоличествоКолонокГруппы - 1;
	
	// сгруппируем колонки группы
	ДокументРезультат.Область(, КолонкаНачалаСвертки, ПерваяЯчейкаГруппы.Верх, КолонкаКонцаСвертки).Сгруппировать();
	
	// Вторая таблица
	// найдем первую ячейку группы
	ПерваяЯчейкаГруппы = ДокументРезультат.НайтиТекст(НазваниеГруппыКолонок, ПерваяЯчейкаГруппы,,, Истина);
	Если ПерваяЯчейкаГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// определим количество колонок группы (используется особенность объединенных ячеек - одинаковый текст в них)
	КоличествоКолонокГруппы = 1;
	Пока ПерваяЯчейкаГруппы.Текст = ДокументРезультат.Область(ПерваяЯчейкаГруппы.Верх, ПерваяЯчейкаГруппы.Лево + КоличествоКолонокГруппы).Текст Цикл
		КоличествоКолонокГруппы = КоличествоКолонокГруппы + 1;
	КонецЦикла;
	
	Если НазваниеГруппыКолонок = "Маркетинг" Тогда
		КолонкаНачалаСвертки 	= ПерваяЯчейкаГруппы.Лево + 1;
	Иначе
		КолонкаНачалаСвертки 	= ПерваяЯчейкаГруппы.Лево + 2;
	КонецЕсли;
	КолонкаКонцаСвертки 	= ПерваяЯчейкаГруппы.Лево + КоличествоКолонокГруппы - 1;
	
	// сгруппируем колонки группы
	ДокументРезультат.Область(, КолонкаНачалаСвертки, ПерваяЯчейкаГруппы.Верх, КолонкаКонцаСвертки).Сгруппировать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
