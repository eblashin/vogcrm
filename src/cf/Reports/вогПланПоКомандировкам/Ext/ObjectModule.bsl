
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КартаМаршрутаПлановая 		= Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("b39e7c2c-d255-11ea-8f2a-005056bcd3e3")); // УИД рабочей базы
	КартаМаршрутаИзменение 		= Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("e8525a6f-ede9-11ea-8f2a-005056bcd3e3")); // УИД рабочей базы
	КартаМаршрутаСогласование 	= Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("a274dd17-5f9c-11ea-b3c7-005056bcd3e3")); // УИД рабочей базы
	КартаМаршрута = Новый Массив;
	КартаМаршрута.Добавить(КартаМаршрутаПлановая);
	КартаМаршрута.Добавить(КартаМаршрутаИзменение);
	КартаМаршрута.Добавить(КартаМаршрутаСогласование);
	//КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("fc8e3c72-cb32-11ea-b7d5-005056bc3fe8"));
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновки, "ОтборНаправление", Ложь);
	
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	
	ПолеКомпоновки = Новый ПараметрКомпоновкиДанных("НаправлениеДеятельности");
	
	ПолеКомпоновкиПериод = Новый ПараметрКомпоновкиДанных("Период");
	
	Для Каждого Настройка Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(Настройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если Настройка.Параметр = ПолеКомпоновки И Настройка.Использование Тогда
				МассивНаправлений = Новый Массив;
				МассивНаправлений.Добавить(Справочники.НаправленияДеятельности.ПустаяСсылка());
				МассивНаправлений.Добавить(Настройка.Значение);
				
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновки, "СписокНаправлений", МассивНаправлений);
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновки, "ОтборНаправление", Истина);
			ИначеЕсли Настройка.Параметр = ПолеКомпоновкиПериод И Настройка.Использование Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновки, "Период", Настройка.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпоновки,ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ВыполненныеЗадачи = ПолучитьТаблицуВыполенныхЗадач(КартаМаршрута);
	ТекущиеЗадачи = ПолучитьТаблицуТекущихЗадач(КартаМаршрута);
	ТаблицаПредставительскихРасходов = ПолучитьТаблицуПредставительскихРасходов();
	ВнешнийНаборДанных = Новый Структура("вт_ВыполненныеЗадачи,вт_ТекущиеЗадачи,вт_ПредставительскиеРасходы", ВыполненныеЗадачи,ТекущиеЗадачи,ТаблицаПредставительскихРасходов);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//фиксировать шапку можно только для ОДНОЙ таблицы или группировки
	
	КоличествоТаблиц = 0;
	ВысотаШапки = 0;
	ВерхОбластиДанных = 1;
	
	Для Каждого ЭлементТела из МакетКомпоновки.Тело Цикл
		
		ТипЭлементаТела = ТипЗнч(ЭлементТела);
		
		Если ТипЭлементаТела = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			ВысотаШапки = МакетКомпоновки.Макеты[ЭлементТела.МакетШапки].Макет.Количество();
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(ВерхОбластиДанных,,ВысотаШапки,);
	
КонецПроцедуры

Функция ПолучитьТаблицуТекущихЗадач(КартаМаршрута)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.БизнесПроцесс.Предмет КАК КомандировкаТекущие,
		|	ЗадачаИсполнителя.Исполнитель КАК ИсполнительЗадачи,
		|	ПРЕДСТАВЛЕНИЕ(ЗадачаИсполнителя.Ссылка) КАК ЗадачаТекущая,
		|	ЗадачаИсполнителя.CRM_ТочкаМаршрута.Наименование КАК Этап
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута В(&КартаМаршрута)
		|	И НЕ ЗадачаИсполнителя.Выполнена";
	
	Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);                                  
	//ТочкаМаршрутаПлановая 				= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("b39e7c32-d255-11ea-8f2a-005056bcd3e3")); // УИД рабочей базы
	//ТочкаМаршрутаИзменение 				= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("e8525a76-ede9-11ea-8f2a-005056bcd3e3")); // УИД рабочей базы
	//ТочкаМаршрутаСогласование 			= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("ab3998c5-5f9c-11ea-b3c7-005056bcd3e3")); // УИД рабочей базы
	//ТочкаМаршрутаСогласованиеУчастие 	= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("ab3998d6-5f9c-11ea-b3c7-005056bcd3e3")); // УИД рабочей базы
	//
	////ТочкаМаршрута = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("48142f3d-cb39-11ea-b7d5-005056bc3fe8"));
	//
	//
	//ТочкаМаршрута = Новый Массив;
	//ТочкаМаршрута.Добавить(ТочкаМаршрутаПлановая);
	//ТочкаМаршрута.Добавить(ТочкаМаршрутаИзменение);
	//ТочкаМаршрута.Добавить(ТочкаМаршрутаСогласование);
	//ТочкаМаршрута.Добавить(ТочкаМаршрутаСогласованиеУчастие);
	
	//Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	КвалификаторыСтроки = Новый КвалификаторыСтроки(150);
	ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("КомандировкаТекущие",Новый ОписаниеТипов("ДокументСсылка.вогКомандировка"));
	ТаблицаРезультат.Колонки.Добавить("ЗадачаТекущая",ОписаниеСтроки);
	ТаблицаРезультат.Колонки.Добавить("ИсполнительЗадачи",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаРезультат.Колонки.Добавить("Этап",ОписаниеСтроки);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из РезультатЗапроса Цикл
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПолучитьТаблицуПредставительскихРасходов()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(вогКомандировкаЗадачи.Задача.ПредставительскиеРасходы, 0)) КАК ПредставительскиеРасходы,
		|	вогКомандировкаЗадачи.Ссылка КАК КомандировкаПредставительские
		|ИЗ
		|	Документ.вогКомандировка.Задачи КАК вогКомандировкаЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогЭтапыСогласованияКомандировок КАК вогЭтапыСогласованияКомандировок
		|		ПО вогКомандировкаЗадачи.Ссылка = вогЭтапыСогласованияКомандировок.Командировка
		|			И вогКомандировкаЗадачи.Сотрудник = вогЭтапыСогласованияКомандировок.Сотрудник
		|ГДЕ
		|	НЕ вогКомандировкаЗадачи.Ссылка.ПометкаУдаления
		|	И ЕСТЬNULL(вогЭтапыСогласованияКомандировок.Этап, ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.НеСогласовано)
		|	И ЕСТЬNULL(вогЭтапыСогласованияКомандировок.Этап, ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.УчастиеОтклонено)
		|	И ЕСТЬNULL(вогКомандировкаЗадачи.Ссылка.Статус, ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.НеСогласовано)
		|
		|СГРУППИРОВАТЬ ПО
		|	вогКомандировкаЗадачи.Ссылка";
	
	КвалификаторыЧисла = Новый КвалификаторыЧисла(10,2);
	ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("КомандировкаПредставительские",Новый ОписаниеТипов("ДокументСсылка.вогКомандировка"));
	ТаблицаРезультат.Колонки.Добавить("ПредставительскиеРасходы",ОписаниеЧисла);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из РезультатЗапроса Цикл
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПолучитьТаблицуВыполенныхЗадач(КартаМаршрута) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТочкаМаршрутаРТНПлановое 	 = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("b39e7c2f-d255-11ea-8f2a-005056bcd3e3"));
	ТочкаМаршрутаРТНИзменение 	 = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("e8525a72-ede9-11ea-8f2a-005056bcd3e3"));
	ТочкаМаршрутаРТНСогласование = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("ab3998de-5f9c-11ea-b3c7-005056bcd3e3"));
	
	ТочкаМаршрутаРТН = Новый Массив;
	ТочкаМаршрутаРТН.Добавить(ТочкаМаршрутаРТНПлановое);
	ТочкаМаршрутаРТН.Добавить(ТочкаМаршрутаРТНИзменение);
	ТочкаМаршрутаРТН.Добавить(ТочкаМаршрутаРТНСогласование);
	
	ТочкаМаршрутаГДПлановое 	= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("b39e7c31-d255-11ea-8f2a-005056bcd3e3"));
	ТочкаМаршрутаГДСогласование = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("ab3998c8-5f9c-11ea-b3c7-005056bcd3e3"));
	
	ТочкаМаршрутаГД = Новый Массив;
	ТочкаМаршрутаГД.Добавить(ТочкаМаршрутаГДПлановое);
	ТочкаМаршрутаГД.Добавить(ТочкаМаршрутаГДСогласование);
	
	ТочкаМаршрутаФКПлановое 	= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("b39e7c34-d255-11ea-8f2a-005056bcd3e3"));
	ТочкаМаршрутаФОПлановое 	= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("b39e7c39-d255-11ea-8f2a-005056bcd3e3"));
	ТочкаМаршрутаФКСогласование = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("ab3998c6-5f9c-11ea-b3c7-005056bcd3e3"));
	ТочкаМаршрутаФК = Новый Массив;
	ТочкаМаршрутаФК.Добавить(ТочкаМаршрутаФКПлановое);
	ТочкаМаршрутаФК.Добавить(ТочкаМаршрутаФОПлановое);
	ТочкаМаршрутаФК.Добавить(ТочкаМаршрутаФКСогласование);
	
	ТочкаМаршрутаДТНПлановое 		= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("b39e7c36-d255-11ea-8f2a-005056bcd3e3"));
	ТочкаМаршрутаДТНПСогласование   = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("ab3998cc-5f9c-11ea-b3c7-005056bcd3e3"));
	
	ТочкаМаршрутаДТН = Новый Массив;
	ТочкаМаршрутаДТН.Добавить(ТочкаМаршрутаДТНПлановое);
	ТочкаМаршрутаДТН.Добавить(ТочкаМаршрутаДТНПСогласование);
	
	ТочкаМаршрутаПлановое 		= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("b39e7c32-d255-11ea-8f2a-005056bcd3e3"));
	ТочкаМаршрутаИзменение 		= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("e8525a76-ede9-11ea-8f2a-005056bcd3e3"));
	ТочкаМаршрутаСогласование 	= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("ab3998c5-5f9c-11ea-b3c7-005056bcd3e3"));
	
	ТочкаМаршрутаГДУКСогласование = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("ab3998d0-5f9c-11ea-b3c7-005056bcd3e3"));
	
	ТочкаМаршрутаГДУК = Новый Массив;
	ТочкаМаршрутаГДУК.Добавить(ТочкаМаршрутаГДУКСогласование);
	
	ТочкаМаршрута = Новый Массив;
	ТочкаМаршрута.Добавить(ТочкаМаршрутаПлановое);
	ТочкаМаршрута.Добавить(ТочкаМаршрутаИзменение);
	ТочкаМаршрута.Добавить(ТочкаМаршрутаСогласование);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаВыполненныхЗадач.Командировка КАК Командировка,
		|	ТаблицаВыполненныхЗадач.Ссылка КАК Ссылка,
		|	ТаблицаВыполненныхЗадач.ВидЗадачи КАК ВидЗадачи,
		|	ТаблицаВыполненныхЗадач.ДатаИсполнения КАК ДатаИсполнения,
		|	ТаблицаВыполненныхЗадач.Исполнитель КАК Исполнитель
		|ПОМЕСТИТЬ вт_Задачи
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗадачаИсполнителя.БизнесПроцесс.Предмет КАК Командировка,
		|		ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		|		МАКСИМУМ(ЗадачаИсполнителя.ДатаИсполнения) КАК ДатаИсполнения,
		|		ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|		ВЫБОР
		|			КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаРТН)
		|				ТОГДА ""РТН""
		|			КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаГД)
		|				ТОГДА ""Ген. дир.""
		|			КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаФК)
		|				ТОГДА ""Фин. конт.""
		|			КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаДТН)
		|				ТОГДА ""ДТН""
		|			КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаГДУК)
		|				ТОГДА ""ГД УК""
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК ВидЗадачи
		|	ИЗ
		|		Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|	ГДЕ
		|		ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута В(&КартаМаршрута)
		|		И ЗадачаИсполнителя.Выполнена
		|		И НЕ ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрута)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗадачаИсполнителя.БизнесПроцесс.Предмет,
		|		ЗадачаИсполнителя.Исполнитель,
		|		ЗадачаИсполнителя.Ссылка,
		|		ВЫБОР
		|			КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаРТН)
		|				ТОГДА ""РТН""
		|			КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаГД)
		|				ТОГДА ""Ген. дир.""
		|			КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаФК)
		|				ТОГДА ""Фин. конт.""
		|			КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаДТН)
		|				ТОГДА ""ДТН""
		|			КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаГДУК)
		|				ТОГДА ""ГД УК""
		|			ИНАЧЕ """"
		|		КОНЕЦ) КАК ТаблицаВыполненныхЗадач
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаВыполненныхЗадач.Командировка,
		|	ТаблицаВыполненныхЗадач.ДатаИсполнения,
		|	ТаблицаВыполненныхЗадач.Ссылка,
		|	ТаблицаВыполненныхЗадач.ВидЗадачи,
		|	ТаблицаВыполненныхЗадач.Исполнитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(вт_Задачи.Командировка, ТекущиеЗадачи.КомандировкаТекущие) КАК Командировка,
		|	ЕСТЬNULL(вт_Задачи.Ссылка, ТекущиеЗадачи.Ссылка) КАК Ссылка,
		|	ЕСТЬNULL(вт_Задачи.ВидЗадачи, ТекущиеЗадачи.ВидЗадачи) КАК ВидЗадачи,
		|	вт_Задачи.ДатаИсполнения КАК ДатаИсполнения,
		|	вт_Задачи.Исполнитель КАК Исполнитель,
		|	ТекущиеЗадачи.ИсполнительЗадачи КАК ИсполнительЗадачи
		|ПОМЕСТИТЬ вт_ВсеЗадачи
		|ИЗ
		|	вт_Задачи КАК вт_Задачи
		|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗадачаИсполнителя.БизнесПроцесс.Предмет КАК КомандировкаТекущие,
		|			ЗадачаИсполнителя.Исполнитель КАК ИсполнительЗадачи,
		|			ВЫБОР
		|				КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаРТН)
		|					ТОГДА ""РТН""
		|				КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаГД)
		|					ТОГДА ""Ген. дир.""
		|				КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаФК)
		|					ТОГДА ""Фин. конт.""
		|				КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаДТН)
		|					ТОГДА ""ДТН""
		|				КОГДА ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрутаГДУК)
		|					ТОГДА ""ГД УК""
		|				ИНАЧЕ """"
		|			КОНЕЦ КАК ВидЗадачи,
		|			ЗадачаИсполнителя.Ссылка КАК Ссылка
		|		ИЗ
		|			Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ГДЕ
		|			ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута В(&КартаМаршрута)
		|			И НЕ ЗадачаИсполнителя.Выполнена
		|			И НЕ ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&ТочкаМаршрута)) КАК ТекущиеЗадачи
		|		ПО вт_Задачи.Командировка = ТекущиеЗадачи.КомандировкаТекущие
		|			И вт_Задачи.ВидЗадачи = ТекущиеЗадачи.ВидЗадачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вогКомандировка.Ссылка КАК КомандировкаДок,
		|	ВидыЗадач.ВидЗадачи КАК ВидЗадачи,
		|	ВидыЗадач.ПорядокЗадач КАК ПорядокЗадач
		|ПОМЕСТИТЬ вт_Командировки
		|ИЗ
		|	Документ.вогКомандировка КАК вогКомандировка
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			""РТН"" КАК ВидЗадачи,
		|			1 КАК ПорядокЗадач
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			""Ген. дир."",
		|			2
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			""Фин. конт."",
		|			3
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			""ДТН"",
		|			4
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			""ГД УК"",
		|			5) КАК ВидыЗадач
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ вогКомандировка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	вогКомандировка.Ссылка,
		|	ВидыЗадач.ВидЗадачи,
		|	ВидыЗадач.ПорядокЗадач
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(вт_ВсеЗадачи.Ссылка) КАК Задача,
		|	вт_ВсеЗадачи.Исполнитель КАК Исполнитель,
		|	вт_ВсеЗадачи.ИсполнительЗадачи КАК ИсполнительТекущейЗадачи,
		|	вт_Командировки.ВидЗадачи КАК ВидЗадачи,
		|	вт_Командировки.ПорядокЗадач КАК ПорядокЗадач,
		|	вт_Командировки.КомандировкаДок КАК КомандировкаДок
		|ИЗ
		|	вт_Командировки КАК вт_Командировки
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ВсеЗадачи КАК вт_ВсеЗадачи
		|		ПО (вт_ВсеЗадачи.Командировка = вт_Командировки.КомандировкаДок)
		|			И вт_Командировки.ВидЗадачи = вт_ВсеЗадачи.ВидЗадачи";
	
	Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
	Запрос.УстановитьПараметр("ТочкаМаршрутаГД", ТочкаМаршрутаГД);
	Запрос.УстановитьПараметр("ТочкаМаршрутаРТН", ТочкаМаршрутаРТН);
	Запрос.УстановитьПараметр("ТочкаМаршрутаФК", ТочкаМаршрутаФК);
	Запрос.УстановитьПараметр("ТочкаМаршрутаДТН", ТочкаМаршрутаДТН);
	Запрос.УстановитьПараметр("ТочкаМаршрутаГДУК", ТочкаМаршрутаГДУК);
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
    КвалификаторыЧисла = Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Любой);
    ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
 
    КвалификаторыСтроки = Новый КвалификаторыСтроки(100);
    ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("КомандировкаДок",Новый ОписаниеТипов("ДокументСсылка.вогКомандировка"));
	ТаблицаРезультат.Колонки.Добавить("ВидЗадачи",ОписаниеСтроки);
	ТаблицаРезультат.Колонки.Добавить("Задача",ОписаниеСтроки);
	ТаблицаРезультат.Колонки.Добавить("ПорядокЗадач",ОписаниеЧисла);
	ТаблицаРезультат.Колонки.Добавить("Исполнитель",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаРезультат.Колонки.Добавить("ИсполнительТекущейЗадачи",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из РезультатЗапроса Цикл
		Если Строка.Исполнитель = Строка.ИсполнительТекущейЗадачи Тогда
			Строка.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	Возврат ТаблицаРезультат;
	
КонецФункции