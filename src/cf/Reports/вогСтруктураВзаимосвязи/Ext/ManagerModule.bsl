
// ++ Тищенко В.В.

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции
	
#Область ФормированиеИВыполнениеЗапросов

Функция ВыполнитьПакетЗапросовПоОбъекту(Объект,СоответствиеЗапросыДанные,ПараметрыФормирования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	НомерПоследнегоПакета = 0;
	ТекущаяДата = КонецДня(ТекущаяДатаСеанса()) + 1;
		
	Если ПараметрыФормирования.ДанныеКлиента Тогда
		Запрос.Текст = Запрос.Текст + ТекстЗапросаКлиент(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
		Запрос.УстановитьПараметр("КлассификаторСегментКлиента",ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("67fd301d-3819-11e8-8ad0-005056bcf152")));	
		Запрос.УстановитьПараметр("КлассификаторСтатусКлиента",ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("a526ff61-910e-11e9-9b11-005056bcd3e3")));	
	КонецЕсли;
	
	Если ПараметрыФормирования.КонтактнаяИнформация Тогда
		Запрос.Текст = Запрос.Текст + ТекстЗапросаКонтактнаяИнформация(СоответствиеЗапросыДанные
										,НомерПоследнегоПакета,ОбщегоНазначения.ИмяТаблицыПоСсылке(?(ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры"),Объект,Объект.Партнер)));
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
	КонецЕсли;
	
	Если ПараметрыФормирования.КонтактныеЛица Тогда
		Запрос.Текст = Запрос.Текст + ТекстЗапросаКонтактныеЛица(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
	КонецЕсли;
	
	Если ПараметрыФормирования.ЮридическиеЛица Тогда
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			Запрос.Текст = Запрос.Текст + ТекстЗапросаЮридическиеЛицаПартнер(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.вогЮридическиеЛица") И ЗначениеЗаполнено(Объект.Партнер) Тогда
			Запрос.Текст = Запрос.Текст + ТекстЗапросаЮридическиеЛицаПоКлиенту(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
			//	Запрос.УстановитьПараметр("ОбъектЮрЛицо",Объект);	
			Запрос.УстановитьПараметр("Партнер",Объект.Партнер);	
		Иначе
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				Запрос.Текст = Запрос.Текст + ТекстЗапросаЮридическиеЛица(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
				Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
				Запрос.УстановитьПараметр("ОбъектЮрЛицо",Объект);
				Запрос.УстановитьПараметр("Партнер",Объект.Партнер);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыФормирования.ТорговыеТочки Тогда
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.вогЮридическиеЛица") И ЗначениеЗаполнено(Объект.Партнер) Тогда
			Запрос.Текст = Запрос.Текст + ТекстЗапросаТорговыеТочкиПоЮрЛицу(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
			Запрос.УстановитьПараметр("ЮрЛицо",Объект);
		//	Запрос.УстановитьПараметр("ВидТорговойТочки",Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
		Иначе	
			Если ТипЗнч(Объект) <> Тип("СправочникСсылка.Партнеры") И НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
				Запрос.Текст = Запрос.Текст + ТекстЗапросаТорговыеТочкиБезКлиента(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
				Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
				Запрос.УстановитьПараметр("Ссылка",Объект);
			Иначе
				Запрос.Текст = Запрос.Текст + ТекстЗапросаТорговыеТочки(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
				Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
			//	Запрос.УстановитьПараметр("ВидТорговойТочки",Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыФормирования.РаспределительныйЦентр Тогда
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			Запрос.Текст = Запрос.Текст + ТекстЗапросаРаспределительныеЦентрыПартнер(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
		Иначе	
			Запрос.Текст = Запрос.Текст + ТекстЗапросаРаспределительныеЦентры(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
			Запрос.УстановитьПараметр("ОбъектСвязи",Объект);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.УстановитьПараметр("Объект",Объект);
	
	Если ТипЗнч(Объект) <> Тип("СправочникСсылка.Партнеры") Тогда
		Запрос.УстановитьПараметр("Клиент",Объект.Партнер);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
		 Запрос.УстановитьПараметр("Клиент",Объект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Возврат Запрос.ВыполнитьПакет();
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ВыполнитьПакетЗапросовПоОбъектуСОтбором(Объект,СоответствиеЗапросыДанные,ПараметрыФормирования,ЭтоЮрЛицо,ЭтоРЦ,Отбор)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	НомерПоследнегоПакета = 0;
	ТекущаяДата = КонецДня(ТекущаяДатаСеанса()) + 1;
		
	Если ПараметрыФормирования.ДанныеКлиента Тогда
		Запрос.Текст = Запрос.Текст + ТекстЗапросаКлиент(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
		Запрос.УстановитьПараметр("КлассификаторСегментКлиента",ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("67fd301d-3819-11e8-8ad0-005056bcf152")));	
		Запрос.УстановитьПараметр("КлассификаторСтатусКлиента",ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("a526ff61-910e-11e9-9b11-005056bcd3e3")));	
	КонецЕсли;
	
	Если ПараметрыФормирования.КонтактнаяИнформация Тогда
		Запрос.Текст = Запрос.Текст + ТекстЗапросаКонтактнаяИнформация(СоответствиеЗапросыДанные
										,НомерПоследнегоПакета,ОбщегоНазначения.ИмяТаблицыПоСсылке(?(ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры"),Объект,Объект.Партнер)));
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
	КонецЕсли;
	
	Если ПараметрыФормирования.КонтактныеЛица Тогда
		Запрос.Текст = Запрос.Текст + ТекстЗапросаКонтактныеЛица(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
	КонецЕсли;
	
	Если ПараметрыФормирования.ЮридическиеЛица Тогда
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			Запрос.Текст = Запрос.Текст + ТекстЗапросаЮридическиеЛицаПартнер(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
			Запрос.Текст = Запрос.Текст + ТекстЗапросаЮридическиеЛицаОбъект(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
			Запрос.УстановитьПараметр("ОбъектЮрЛицо",Объект);
		Иначе
			Запрос.Текст = Запрос.Текст + ТекстЗапросаЮридическиеЛица(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
			Запрос.УстановитьПараметр("ОбъектЮрЛицо",Объект);
			Запрос.УстановитьПараметр("Партнер",Объект.Партнер);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		Если ПараметрыФормирования.ТорговыеТочки Тогда
			Запрос.Текст = Запрос.Текст + ТекстЗапросаТорговыеТочкиПоЮрЛицуСОтбором(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
			Запрос.УстановитьПараметр("ЮрЛицо",Отбор);
		//	Запрос.УстановитьПараметр("ВидТорговойТочки",Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
		КонецЕсли;
	ИначеЕсли ЭтоРЦ Тогда
		Если ПараметрыФормирования.ТорговыеТочки Тогда
			Запрос.Текст = Запрос.Текст + ТекстЗапросаТорговыеТочкиПоРЦ(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
			Запрос.УстановитьПараметр("РЦ",Отбор);
		//	Запрос.УстановитьПараметр("ВидТорговойТочки",Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыФормирования.РаспределительныйЦентр Тогда
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			Запрос.Текст = Запрос.Текст + ТекстЗапросаРаспределительныеЦентрыПартнер(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
		//	Запрос.УстановитьПараметр("ВидТорговойТочки",Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
		Иначе	
			Запрос.Текст = Запрос.Текст + ТекстЗапросаРаспределительныеЦентры(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
			Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
			Запрос.УстановитьПараметр("ОбъектСвязи",Объект);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.УстановитьПараметр("Объект",Объект);
	
	Если ТипЗнч(Объект) <> Тип("СправочникСсылка.Партнеры") Тогда
		Запрос.УстановитьПараметр("Клиент",Объект.Партнер);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
		Запрос.УстановитьПараметр("Клиент",Объект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Возврат Запрос.ВыполнитьПакет();
	Иначе
		Возврат Неопределено
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция ТекстЗапросаКлиент(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	СоответствиеЗапросыДанные.Вставить("Клиент",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ
	        |	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
	        |	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора,
	        |	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита КАК ЗначениеРеквизита,
	        |	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
	        |	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец КАК Владелец
	        |ПОМЕСТИТЬ вт_Классификаторы
	        |ИЗ
	        |	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	        |ГДЕ
	        |	CRM_ОбъектыЗначенийКлассификаторов.Объект = &Клиент
	        |	И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец = &КлассификаторСегментКлиента
	        |			ИЛИ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец = &КлассификаторСтатусКлиента)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	        |	Партнеры.Ссылка КАК Клиент,
	        |	Партнеры.CRM_ДатаРегистрацииКомпании КАК ДатаРегистрации,
	        |	Партнеры.CRM_ТипОтношенийПредставление КАК ТипОтношений,
	        |	Партнеры.CRM_Важность КАК Важность,
	        |	Партнеры.БизнесРегион КАК БизнесРегион,
	        |	ЕСТЬNULL(вт_Классификаторы.ЗначениеКлассификатора, """") КАК СегментКлиента,
	        |	ЕСТЬNULL(вт_Классификаторы2.ЗначениеКлассификатора,"""") КАК СтатусРаботы
	        |ИЗ
	        |	Справочник.Партнеры КАК Партнеры
	        |		ЛЕВОЕ СОЕДИНЕНИЕ вт_Классификаторы КАК вт_Классификаторы
	        |		ПО Партнеры.Ссылка = вт_Классификаторы.Объект
	        |			И (&КлассификаторСегментКлиента = вт_Классификаторы.Владелец)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ вт_Классификаторы КАК вт_Классификаторы2
	        |		ПО Партнеры.Ссылка = вт_Классификаторы2.Объект
	        |			И (&КлассификаторСтатусКлиента = вт_Классификаторы2.Владелец)
	        |ГДЕ
	        |	Партнеры.Ссылка = &Клиент
	        |	И НЕ Партнеры.ПометкаУдаления";

	
КонецФункции

Функция ТекстЗапросаКонтактнаяИнформация(СоответствиеЗапросыДанные,НомерПоследнегоПакета,Таблица)
	
	СоответствиеЗапросыДанные.Вставить("КонтактнаяИнформация",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Представление КАК Представление,
	|	Таблица.Вид КАК ВидКонтактнойИнформации
	|ИЗ
	|	"+(Таблица)+".КонтактнаяИнформация КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Клиент
	|	И Таблица.Представление <> """"
	|";

КонецФункции

Функция ТекстЗапросаКонтактныеЛица(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	СоответствиеЗапросыДанные.Вставить("КонтактныеЛица",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогСвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо КАК ФИО,
	|	вогСвязиКонтактныхЛицСрезПоследних.CRM_Должность КАК Должность,
	|	вогСвязиКонтактныхЛицСрезПоследних.CRM_РольКонтактногоЛица КАК Роль
	|ИЗ
	|	РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК вогСвязиКонтактныхЛицСрезПоследних
	|ГДЕ
	|	вогСвязиКонтактныхЛицСрезПоследних.ОбъектСвязи = &Объект И НЕ вогСвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо.ПометкаУдаления";

	
КонецФункции

Функция ТекстЗапросаЮридическиеЛица(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	СоответствиеЗапросыДанные.Вставить("ЮридическиеЛица",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	//Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо КАК ЮридическоеЛицо,
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо КАК НаименованиеПолное,
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.ОрганизационноПравоваяФорма КАК ПравоваяФорма,
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_ИНН + ""/"" + вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_КПП КАК ИНН_КПП
	//|ИЗ
	//|	РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
	//|ГДЕ
	//|	вогСвязиЮридическихЛиц.ОбъектСвязи = &ОбъектЮрЛицо
	//|	И вогСвязиЮридическихЛиц.ЮридическоеЛицо.Партнер = &Партнер
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо,
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.ОрганизационноПравоваяФорма,
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_ИНН + ""/"" + вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_КПП,
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо";

	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогЮридическиеЛица.Ссылка КАК ЮридическоеЛицо,
	|	вогЮридическиеЛица.Ссылка КАК НаименованиеПолное,
	|	вогЮридическиеЛица.CRM_ИНН + ""/"" + вогЮридическиеЛица.CRM_КПП КАК ИНН_КПП,
	|	вогЮридическиеЛица.ОрганизационноПравоваяФорма КАК ПравоваяФорма
	|ИЗ
	|	Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|ГДЕ
	|	вогЮридическиеЛица.Партнер = &Партнер и НЕ вогЮридическиеЛица.ПометкаУдаления "
	
КонецФункции

Функция ТекстЗапросаЮридическиеЛицаПартнер(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	СоответствиеЗапросыДанные.Вставить("ЮридическиеЛица",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогЮридическиеЛица.Ссылка КАК ЮридическоеЛицо,
	|	вогЮридическиеЛица.Ссылка КАК НаименованиеПолное,
	|	вогЮридическиеЛица.ОрганизационноПравоваяФорма КАК ПравоваяФорма,
	|	вогЮридическиеЛица.CRM_ИНН + ""/"" + вогЮридическиеЛица.CRM_КПП КАК ИНН_КПП
	|ИЗ
	|	Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|ГДЕ
	|	вогЮридическиеЛица.Партнер = &Объект И НЕ вогЮридическиеЛица.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	вогЮридическиеЛица.Ссылка,
	|	вогЮридическиеЛица.ОрганизационноПравоваяФорма,
	|	вогЮридическиеЛица.CRM_ИНН + ""/"" + вогЮридическиеЛица.CRM_КПП,
	|	вогЮридическиеЛица.Ссылка";

КонецФункции

Функция ТекстЗапросаЮридическиеЛицаОбъект(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	СоответствиеЗапросыДанные.Вставить("ЮридическиеЛица",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо КАК НаименованиеПолное,
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.ОрганизационноПравоваяФорма КАК ПравоваяФорма,
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_ИНН + ""/"" + вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_КПП КАК ИНН_КПП
	|ИЗ
	|	РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
	|ГДЕ
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо = &ОбъектЮрЛицо И НЕ вогСвязиЮридическихЛиц.ЮридическоеЛицо.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо,
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.ОрганизационноПравоваяФорма,
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_ИНН + ""/"" + вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_КПП,
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо";
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо КАК НаименованиеПолное,
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.ОрганизационноПравоваяФорма КАК ПравоваяФорма,
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_ИНН + ""/"" + вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_КПП КАК ИНН_КПП
	|ИЗ
	|	РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
	|ГДЕ
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.Партнер = &Партнер  И НЕ вогСвязиЮридическихЛиц.ЮридическоеЛицо.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо,
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.ОрганизационноПравоваяФорма,
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_ИНН + ""/"" + вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_КПП,
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо";

	

КонецФункции

Функция ТекстЗапросаЮридическиеЛицаПоКлиенту(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	СоответствиеЗапросыДанные.Вставить("ЮридическиеЛица",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	//Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо КАК ЮридическоеЛицо,
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо КАК НаименованиеПолное,
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.ОрганизационноПравоваяФорма КАК ПравоваяФорма,
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_ИНН + ""/"" + вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_КПП КАК ИНН_КПП
	//|ИЗ
	//|	РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
	//|ГДЕ
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.Партнер = &Партнер
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо,
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.ОрганизационноПравоваяФорма,
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_ИНН + ""/"" + вогСвязиЮридическихЛиц.ЮридическоеЛицо.CRM_КПП,
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо";
		
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогЮридическиеЛица.Ссылка КАК ЮридическоеЛицо,
	|	вогЮридическиеЛица.Ссылка КАК НаименованиеПолное,
	|	вогЮридическиеЛица.ОрганизационноПравоваяФорма КАК ПравоваяФорма,
	|	вогЮридическиеЛица.CRM_ИНН + ""/"" + вогЮридическиеЛица.CRM_КПП КАК ИНН_КПП
	|ИЗ
	|	Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|ГДЕ
	|	вогЮридическиеЛица.Партнер = &Партнер и НЕ вогЮридическиеЛица.ПометкаУдаления 
	|
	|СГРУППИРОВАТЬ ПО
	|	вогЮридическиеЛица.Ссылка,
	|	вогЮридическиеЛица.ОрганизационноПравоваяФорма,
	|	вогЮридическиеЛица.CRM_ИНН + ""/"" + вогЮридическиеЛица.CRM_КПП,
	|	вогЮридическиеЛица.Ссылка";
	
КонецФункции

Функция ТекстЗапросаТорговыеТочки(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	СоответствиеЗапросыДанные.Вставить("ТорговыеТочки",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогТорговыеТочки.Ссылка КАК Наименование,
	|	вогТорговыеТочки.Вывеска КАК Вывеска,
	|	вогТорговыеТочки.Вид КАК Вид
	|ИЗ
	|	Справочник.вогТорговыеТочки КАК вогТорговыеТочки
	|ГДЕ
	|	вогТорговыеТочки.Партнер = &Клиент И НЕ вогТорговыеТочки.ПометкаУдаления";
//	|	И вогТорговыеТочки.Вид = &ВидТорговойТочки";

КонецФункции

Функция ТекстЗапросаТорговыеТочкиБезКлиента(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	СоответствиеЗапросыДанные.Вставить("ТорговыеТочки",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогТорговыеТочки.Ссылка КАК Наименование,
	|	вогТорговыеТочки.Вывеска КАК Вывеска,
	|	вогТорговыеТочки.Вид КАК Вид
	|ИЗ
	|	Справочник.вогТорговыеТочки КАК вогТорговыеТочки
	|ГДЕ
	|	вогТорговыеТочки.Ссылка = &Ссылка И НЕ вогТорговыеТочки.ПометкаУдаления";

КонецФункции

Функция ТекстЗапросаТорговыеТочкиПоЮрЛицу(СоответствиеЗапросыДанные,НомерПоследнегоПакета)

	СоответствиеЗапросыДанные.Вставить("ТорговыеТочки",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	//Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	вогСвязиЮридическихЛиц.ОбъектСвязи КАК Наименование,
	//|	вогСвязиЮридическихЛиц.ОбъектСвязи.Вывеска КАК Вывеска,
	//|	вогСвязиЮридическихЛиц.ОбъектСвязи.Вид КАК Вид
	//|ИЗ
	//|	РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
	//|ГДЕ
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо = &ЮрЛицо
	//|	И вогСвязиЮридическихЛиц.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
	//|	И вогСвязиЮридическихЛиц.ОбъектСвязи.Партнер = &Клиент
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	вогСвязиЮридическихЛиц.ОбъектСвязи,
	//|	вогСвязиЮридическихЛиц.ОбъектСвязи.Вывеска";
	
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогСвязиЮридическихЛиц.ОбъектСвязи КАК Наименование,
	|	вогСвязиЮридическихЛиц.ОбъектСвязи.Вывеска КАК Вывеска,
	|	вогСвязиЮридическихЛиц.ОбъектСвязи.Вид КАК Вид
	|ИЗ
	|	РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
	|ГДЕ
	|	 вогСвязиЮридическихЛиц.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
	|	И вогСвязиЮридическихЛиц.ОбъектСвязи.Партнер = &Клиент и НЕ вогСвязиЮридическихЛиц.ОбъектСвязи.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	вогСвязиЮридическихЛиц.ОбъектСвязи,
	|	вогСвязиЮридическихЛиц.ОбъектСвязи.Вывеска";

	
КонецФункции

Функция ТекстЗапросаТорговыеТочкиПоЮрЛицуСОтбором(СоответствиеЗапросыДанные,НомерПоследнегоПакета)

	СоответствиеЗапросыДанные.Вставить("ТорговыеТочки",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогСвязиЮридическихЛиц.ОбъектСвязи КАК Наименование,
	|	вогСвязиЮридическихЛиц.ОбъектСвязи.Вывеска КАК Вывеска,
	|	вогСвязиЮридическихЛиц.ОбъектСвязи.Вид КАК Вид
	|ИЗ
	|	РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
	|ГДЕ
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо = &ЮрЛицо
	|	И вогСвязиЮридическихЛиц.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
	|	И вогСвязиЮридическихЛиц.ОбъектСвязи.Партнер = &Клиент  И  НЕ вогСвязиЮридическихЛиц.ОбъектСвязи.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	вогСвязиЮридическихЛиц.ОбъектСвязи,
	|	вогСвязиЮридическихЛиц.ОбъектСвязи.Вывеска";
	
КонецФункции

Функция ТекстЗапросаТорговыеТочкиТТ(СоответствиеЗапросыДанные,НомерПоследнегоПакета)

	//СоответствиеЗапросыДанные.Вставить("ТорговыеТочки",НомерПоследнегоПакета + 1);
	//НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	//
	//Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	вогСвязиЮридическихЛиц.ОбъектСвязи КАК Наименование,
	//|	вогСвязиЮридическихЛиц.ОбъектСвязи.Вывеска КАК ОбъектСвязиВывеска
	//|ИЗ
	//|	РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
	//|ГДЕ
	//|	вогСвязиЮридическихЛиц.ОбъектСвязи = &Объект
	//|	И вогСвязиЮридическихЛиц.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
	//|	И вогСвязиЮридическихЛиц.ОбъектСвязи.Вид = &ВидТорговойТочки
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	вогСвязиЮридическихЛиц.ОбъектСвязи,
	//|	вогСвязиЮридическихЛиц.ОбъектСвязи.Вывеска";
	
КонецФункции

Функция ТекстЗапросаТорговыеТочкиПоРЦ(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	СоответствиеЗапросыДанные.Вставить("ТорговыеТочки",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогСвязиРаспределительныхЦентров.ОбъектСвязи КАК Наименование,
	|	вогСвязиРаспределительныхЦентров.ОбъектСвязи.Вывеска КАК ОбъектСвязиВывеска,
	|	вогСвязиРаспределительныхЦентров.ОбъектСвязи.Вид КАК Вид
	|ИЗ
	|	РегистрСведений.вогСвязиРаспределительныхЦентров КАК вогСвязиРаспределительныхЦентров
	|ГДЕ
	|	вогСвязиРаспределительныхЦентров.РаспределительныйЦентр = &РЦ
	|	И вогСвязиРаспределительныхЦентров.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки И НЕ вогСвязиРаспределительныхЦентров.ОбъектСвязи.ПометкаУдаления 
	|
	|СГРУППИРОВАТЬ ПО
	|	вогСвязиРаспределительныхЦентров.ОбъектСвязи,
	|	вогСвязиРаспределительныхЦентров.ОбъектСвязи.Вывеска";
	
КонецФункции

Функция ТекстЗапросаРаспределительныеЦентры(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	СоответствиеЗапросыДанные.Вставить("РаспределительныеЦентры",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	вогСвязиРаспределительныхЦентров.РаспределительныйЦентр КАК Наименование
	        |ИЗ
	        |	РегистрСведений.вогСвязиРаспределительныхЦентров КАК вогСвязиРаспределительныхЦентров
	        |ГДЕ
	        |	вогСвязиРаспределительныхЦентров.ОбъектСвязи = &ОбъектСвязи  И  НЕ вогСвязиРаспределительныхЦентров.РаспределительныйЦентр.ПометкаУдаления
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	вогСвязиРаспределительныхЦентров.РаспределительныйЦентр";

КонецФункции

Функция ТекстЗапросаРаспределительныеЦентрыПартнер(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	СоответствиеЗапросыДанные.Вставить("РаспределительныеЦентры",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	//Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	вогСвязиРаспределительныхЦентров.РаспределительныйЦентр КАК Наименование
	//|ИЗ
	//|	Справочник.вогТорговыеТочки КАК вогТорговыеТочки
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиРаспределительныхЦентров КАК вогСвязиРаспределительныхЦентров
	//|		ПО (вогТорговыеТочки.Партнер = &Объект)
	//|			И (вогТорговыеТочки.Вид = &ВидТорговойТочки)
	//|			И вогТорговыеТочки.Ссылка = вогСвязиРаспределительныхЦентров.ОбъектСвязи
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	вогСвязиРаспределительныхЦентров.РаспределительныйЦентр";

	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогСвязиРаспределительныхЦентров.РаспределительныйЦентр КАК Наименование
	|ИЗ
	|	Справочник.вогТорговыеТочки КАК вогТорговыеТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиРаспределительныхЦентров КАК вогСвязиРаспределительныхЦентров
	|		ПО (вогТорговыеТочки.Партнер = &Объект) И НЕ вогСвязиРаспределительныхЦентров.РаспределительныйЦентр.ПометкаУдаления
	|			И вогТорговыеТочки.Ссылка = вогСвязиРаспределительныхЦентров.ОбъектСвязи
	|
	|СГРУППИРОВАТЬ ПО
	|	вогСвязиРаспределительныхЦентров.РаспределительныйЦентр";
	
КонецФункции

#КонецОбласти

#Область ВыводДанных

Процедура ВывестиДанныеОПартнере(РезультатЗапросаПоПартнеру,ТаблицаОтчета,Макет,СверунтьГруппу = Истина)

	Если РезультатЗапросаПоПартнеру.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ВыборкаПартнер = РезультатЗапросаПоПартнеру.Выбрать();
	ВыборкаПартнер.Следующий();
	
	ВывестиОбластьБезПараметров("ШапкаДанныеКлиента",Макет,ТаблицаОтчета);
	
	ОбластиПартнера = Новый Массив;
	ОбластиПартнера.Добавить(Макет.ПолучитьОбласть("Клиент"));
	ОбластиПартнера.Добавить(Макет.ПолучитьОбласть("СтатусРаботы"));
	//ОбластиПартнера.Добавить(Макет.ПолучитьОбласть("ДатаРегистрации"));
	ОбластиПартнера.Добавить(Макет.ПолучитьОбласть("ТипОтношений"));
	//ОбластиПартнера.Добавить(Макет.ПолучитьОбласть("Важность"));
	ОбластиПартнера.Добавить(Макет.ПолучитьОбласть("СегментКлиента"));
	
	ТаблицаОтчета.НачатьГруппуСтрок("Клиент",СверунтьГруппу);
	
	Для каждого ТекОбласть Из ОбластиПартнера Цикл
		ЗаполнитьЗначенияСвойств(ТекОбласть.Параметры,ВыборкаПартнер);
		ТаблицаОтчета.Вывести(ТекОбласть);
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеКонтактнаяИнформация(РезультатЗапросаПоКонтактнаяИнформация,ТаблицаОтчета,Макет,СверунтьГруппу = Истина)

	Если РезультатЗапросаПоКонтактнаяИнформация.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьСтрокаКонтактнаяИнформация 	= Макет.ПолучитьОбласть("ПараметрыКонтактнаяИнформация");
	
	ТЧКонтакты = РезультатЗапросаПоКонтактнаяИнформация.Выгрузить();
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контактная информация - %1'"),ТЧКонтакты.Количество()));
	
	ТаблицаОтчета.НачатьГруппуСтрок("КонтактнаяИнформация",СверунтьГруппу);
	
	//ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТЧ Из ТЧКонтакты Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаКонтактнаяИнформация.Параметры,СтрокаТЧ);
		
		//Если ЧетнаяСтрока Тогда
		//	ОбластьСтрокаКонтактнаяИнформация.Области.КонтактнаяИнформацияСтрока.ЦветФона = ЦветаСтиля.ЦветФонаКорректногоКонтрагентаВДокументе;
		//Иначе
		//	ОбластьСтрокаКонтактнаяИнформация.Области.КонтактнаяИнформацияСтрока.ЦветФона = Новый Цвет(255,255,255);
	//	КонецЕсли;

		ТаблицаОтчета.Вывести(ОбластьСтрокаКонтактнаяИнформация);
		//ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();

КонецПроцедуры

Процедура ВывестиДанныеОКонтактныхЛицах(РезультатЗапросаПоКонтактныеЛица,ТаблицаОтчета,Макет,СверунтьГруппу = Истина)

	Если РезультатЗапросаПоКонтактныеЛица.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	ТЧКонтактыЛица = РезультатЗапросаПоКонтактныеЛица.Выгрузить();
	
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контактные лица - %1'"),ТЧКонтактыЛица.Количество()));
	ОбластьСтрокаКонтактыеЛица = Макет.ПолучитьОбласть("СтрокаТабличнойЧастиКонтактныеЛица");
	
	ТаблицаОтчета.НачатьГруппуСтрок("КонтактныеЛица",СверунтьГруппу);
	ВывестиОбластьБезПараметров("ТаблицаКонтактныеЛица",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТЧ Из ТЧКонтактыЛица Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаКонтактыеЛица.Параметры,СтрокаТЧ);
		ОбластьСтрокаКонтактыеЛица.Параметры.Представление = МногострочноеПредставлениеКонтактнойИнформации(СтрокаТЧ.ФИО.КонтактнаяИнформация);
		Если ЧетнаяСтрока Тогда
			ОбластьСтрокаКонтактыеЛица.Области.СтрокаКонтакты.ЦветФона = ЦветаСтиля.ЦветФонаКорректногоКонтрагентаВДокументе;
		Иначе
			ОбластьСтрокаКонтактыеЛица.Области.СтрокаКонтакты.ЦветФона = Новый Цвет(255,255,255);
		КонецЕсли;
		ТаблицаОтчета.Вывести(ОбластьСтрокаКонтактыеЛица);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();

КонецПроцедуры

Процедура ВывестиДанныеЮридическиеЛица(РезультатЗапросаЮридическиеЛица,ТаблицаОтчета,Макет,СверунтьГруппу = Истина)

	Если РезультатЗапросаЮридическиеЛица.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПоляКонтактнойИнформации = Новый СписокЗначений;
	ПоляКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонЮридическогоЛица);
	ПоляКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресЮридическогоЛица);
	ПоляКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.АдресЮридическогоЛица);
	
	ТЧЮридическиеЛица 	= РезультатЗапросаЮридическиеЛица.Выгрузить();
	
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Юридические лица - %1'"),ТЧЮридическиеЛица.Количество()));
	ОбластьСтрокаЮрЛица = Макет.ПолучитьОбласть("СтрокаТаблицыЮрЛица");
	ОбластьСтрокаТТ		= Макет.ПолучитьОбласть("СтрокаТаблицыЮрЛица");
	
	ТаблицаОтчета.НачатьГруппуСтрок("ЮридическиеЛица",СверунтьГруппу);
	ВывестиОбластьБезПараметров("ТаблицаЮридическиеЛица",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	
	//>>Бей(06.06.2019 11:31:11):#401		
	ТЧЮридическиеЛица.Сортировать("НаименованиеПолное");	
	//<<Бей(06.06.2019 11:33:45):#401
	
	Для каждого СтрокаТЧ Из ТЧЮридическиеЛица Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаЮрЛица.Параметры,СтрокаТЧ);
		ОбластьСтрокаЮрЛица.Параметры.Представление = МногострочноеПредставлениеКонтактнойИнформации(СтрокаТЧ.ЮридическоеЛицо.КонтактнаяИнформация,ПоляКонтактнойИнформации);
		Если ЧетнаяСтрока Тогда
			ОбластьСтрокаЮрЛица.Области.СтрокаЮрЛицы.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ОбластьСтрокаЮрЛица.Области.СтрокаЮрЛицы.ЦветФона = Новый Цвет(255,255,255);
		КонецЕсли;
		ОбластьСтрокаЮрЛица.Параметры.КоличествоТТ = ПолучитьКоличествоТорговыхТочек(СтрокаТЧ.ЮридическоеЛицо);
		ОбластьСтрокаЮрЛица.Параметры.СтруктураКоличествоТТ = Новый Структура("ИмяТаблицы,Значение","ЮридическоеЛицо",СтрокаТЧ.ЮридическоеЛицо);
		
		ТаблицаОтчета.Вывести(ОбластьСтрокаЮрЛица);
		//ВывестиСвязьТорговаяТочкаИРЦ(СтрокаТЧ.ЮридическоеЛицо.Партнер,Макет,ТаблицаОтчета);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();

КонецПроцедуры

Процедура ВывестиДанныеТорговыеТочки(РезультатЗапросаТорговыеТочки,ТаблицаОтчета,Макет,СверунтьГруппу = Ложь)

	Если РезультатЗапросаТорговыеТочки.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПоляКонтактнойИнформации = Новый СписокЗначений;
	ПоляКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонТорговойТочки);
	ПоляКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.Месторасположение);
	
	ТЧТорговыеТочки 	= РезультатЗапросаТорговыеТочки.Выгрузить();
	ТЧТорговыеТочки.Колонки.Добавить("СтатусРаботы"	,Новый ОписаниеТипов("СправочникСсылка.CRM_ЗначенияКлассификаторов"));
	ТЧТорговыеТочки.Колонки.Добавить("ФорматТТ"		,Новый ОписаниеТипов("СправочникСсылка.CRM_ЗначенияКлассификаторов"));
	
	// Начало Классификаторы
	
	Для каждого СтрокаТЧ Из ТЧТорговыеТочки Цикл	
		// Получить значение классификатора Статус работы
		СвойствоСтатусРаботы 	= ПланыВидовХарактеристик.CRM_Классификаторы.НайтиПоНаименованию("Статус ТТ");
		СтрокаТЧ.СтатусРаботы 	= ПолучитьЗначениеКлассификатора(СтрокаТЧ.Наименование,СвойствоСтатусРаботы);;
		// Получить значение классификатора Формат ТТ
		СвойствоФорматТТ 		= ПланыВидовХарактеристик.CRM_Классификаторы.НайтиПоНаименованию("Формат ТРТ");
		СтрокаТЧ.ФорматТТ 		= ПолучитьЗначениеКлассификатора(СтрокаТЧ.Наименование,СвойствоФорматТТ);
	КонецЦикла;
	
	//>>Бей(06.06.2019 11:31:11):#401	
	//ТЧТорговыеТочки.Сортировать("СтатусРаботы Desc");	
	ТЧТорговыеТочки.Сортировать("Наименование");	
	//<<Бей(06.06.2019 11:33:45):#401
	
	// Конец Классификаторы

	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Торговые точки - %1'"),ТЧТорговыеТочки.Количество()));

	ОбластьСтрокаТТ	= Макет.ПолучитьОбласть("СтрокаТаблицыТорговаяТочка");
	
	ТаблицаОтчета.НачатьГруппуСтрок("ТорговыеТочки",СверунтьГруппу);
	ВывестиОбластьБезПараметров("ТаблицаТорговыеТочки",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТЧ Из ТЧТорговыеТочки Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаТТ.Параметры,СтрокаТЧ);
		// Заполнить направление деятельности
		ОбластьСтрокаТТ.Параметры.НаправлениеДеятельности 	= МногострочноеПредставлениеНаправлениеДеятельности(СтрокаТЧ.Наименование);
		// Контактная информация
		ОбластьСтрокаТТ.Параметры.Представление 			= МногострочноеПредставлениеКонтактнойИнформации(СтрокаТЧ.Наименование.КонтактнаяИнформация,ПоляКонтактнойИнформации);
		Если ЧетнаяСтрока Тогда
			ОбластьСтрокаТТ.Области.СтрокаТТ.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ОбластьСтрокаТТ.Области.СтрокаТТ.ЦветФона = Новый Цвет(255,255,255); 
		КонецЕсли;
		ТаблицаОтчета.Вывести(ОбластьСтрокаТТ);
		// Вывод РЦ
		//ВывестиРЦИзТорговойТочки(СтрокаТЧ.Наименование,Макет,ТаблицаОтчета);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();

КонецПроцедуры

Процедура ВывестиДанныеТорговыеТочкиСОтбором(РезультатЗапросаТорговыеТочки,ТаблицаОтчета,Макет,СверунтьГруппу = Ложь,Отбор)

	Если РезультатЗапросаТорговыеТочки.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПоляКонтактнойИнформации = Новый СписокЗначений;
	ПоляКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонТорговойТочки);
	ПоляКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.Месторасположение);
	
	ТЧТорговыеТочки 	= РезультатЗапросаТорговыеТочки.Выгрузить();
	ТЧТорговыеТочки.Колонки.Добавить("СтатусРаботы",Новый ОписаниеТипов("СправочникСсылка.CRM_ЗначенияКлассификаторов"));
	ТЧТорговыеТочки.Колонки.Добавить("ФорматТТ",Новый ОписаниеТипов("СправочникСсылка.CRM_ЗначенияКлассификаторов"));
	
	// Начало Классификаторы
	
	Для каждого СтрокаТЧ Из ТЧТорговыеТочки Цикл
		// Получить значение классификатора Статус работы
		СвойствоСтатусРаботы 	= ПланыВидовХарактеристик.CRM_Классификаторы.НайтиПоНаименованию("Статус работы");
		СтрокаТЧ.СтатусРаботы 	= ПолучитьЗначениеКлассификатора(СтрокаТЧ.Наименование,СвойствоСтатусРаботы);;
		// Получить значение классификатора Формат ТТ
		СвойствоФорматТТ 		= ПланыВидовХарактеристик.CRM_Классификаторы.НайтиПоНаименованию("Формат ТРТ");
		СтрокаТЧ.ФорматТТ 		= ПолучитьЗначениеКлассификатора(СтрокаТЧ.Наименование,СвойствоФорматТТ);
	КонецЦикла;
	
	//>>Бей(06.06.2019 11:31:11):#401	
	//ТЧТорговыеТочки.Сортировать("СтатусРаботы Desc");	
	ТЧТорговыеТочки.Сортировать("Наименование");	
	//<<Бей(06.06.2019 11:33:45):#401

	
	// Конец Классификаторы

	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Торговые точки - %1'"),ТЧТорговыеТочки.Количество()));

	ОбластьСтрокаТТ	= Макет.ПолучитьОбласть("СтрокаТаблицыТорговаяТочка");
	
	ТаблицаОтчета.НачатьГруппуСтрок("ТорговыеТочки",СверунтьГруппу);
	ВывестиОбластьБезПараметров("ТаблицаТорговыеТочки",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТЧ Из ТЧТорговыеТочки Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаТТ.Параметры,СтрокаТЧ);
		// Заполнить направление деятельности
		ОбластьСтрокаТТ.Параметры.НаправлениеДеятельности 	= МногострочноеПредставлениеНаправлениеДеятельности(СтрокаТЧ.Наименование);
		// Контактная информация
		ОбластьСтрокаТТ.Параметры.Представление 			= МногострочноеПредставлениеКонтактнойИнформации(СтрокаТЧ.Наименование.КонтактнаяИнформация,ПоляКонтактнойИнформации);
		Если СтрокаТЧ.Наименование = Отбор Тогда
			ОбластьСтрокаТТ.Области.СтрокаТТ.ЦветФона = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
		Иначе
			Если ЧетнаяСтрока Тогда
				ОбластьСтрокаТТ.Области.СтрокаТТ.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
			Иначе
				ОбластьСтрокаТТ.Области.СтрокаТТ.ЦветФона = Новый Цвет(255,255,255);
			КонецЕсли;
			ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		КонецЕсли;
		
		ТаблицаОтчета.Вывести(ОбластьСтрокаТТ);
		// Вывод РЦ
	//	ВывестиРЦИзТорговойТочки(СтрокаТЧ.Наименование,Макет,ТаблицаОтчета);
		//ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();

КонецПроцедуры

Процедура ВывестиДанныеРаспределительныеЦентры(РезультатЗапросаРаспределительныеЦентры,ТаблицаОтчета,Макет,СверунтьГруппу = Ложь)

	Если РезультатЗапросаРаспределительныеЦентры.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	ТЧРаспределительныеЦентры 	= РезультатЗапросаРаспределительныеЦентры.Выгрузить();
	
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Распределительные центры - %1'"),ТЧРаспределительныеЦентры.Количество()));

	ОбластьСтрокаРЦ	= Макет.ПолучитьОбласть("СтрокаТаблицыРаспределительныйЦентр");
	
	ТаблицаОтчета.НачатьГруппуСтрок("РаспределительныеЦентры",СверунтьГруппу);
	ВывестиОбластьБезПараметров("ТаблицаРаспределительныйЦентр",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	
	Для каждого СтрокаТЧ Из ТЧРаспределительныеЦентры Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаРЦ.Параметры,СтрокаТЧ);
		ОбластьСтрокаРЦ.Параметры.Представление = МногострочноеПредставлениеКонтактнойИнформации(СтрокаТЧ.Наименование.КонтактнаяИнформация);
		Если ЧетнаяСтрока Тогда
			ОбластьСтрокаРЦ.Области.СтрокаРЦ.ЦветФона	= ЦветаСтиля.АльтернативныйЦветФонаПоля;
		Иначе
			ОбластьСтрокаРЦ.Области.СтрокаРЦ.ЦветФона	= Новый Цвет(255,255,255);
		КонецЕсли;
		ОбластьСтрокаРЦ.Параметры.КоличествоТТ			= ПолучитьКоличествоТорговыхТочекПоРЦ(СтрокаТЧ.Наименование);
		ОбластьСтрокаРЦ.Параметры.СтруктураКоличествоТТ = Новый Структура("ИмяТаблицы,Значение","РЦ",СтрокаТЧ.Наименование);

		ТаблицаОтчета.Вывести(ОбластьСтрокаРЦ);
		// Вывод Торговые точки по РЦ
		//ВывестиТорговойТочкиИзРЦ(СтрокаТЧ.Наименование,Макет,ТаблицаОтчета);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();

КонецПроцедуры

Процедура ВывестиОбластьБезПараметров(ИмяОбласти,Макет,ТаблицаОтчета)

	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ТаблицаОтчета.Вывести(Область);

КонецПроцедуры

Процедура ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка,ЦветТекста = Неопределено)

	Область = Макет.ПолучитьОбласть("ЗаголовокПодраздела");
	Область.Параметры.Заголовок = ТекстЗаголовка;
	Если ЦветТекста <> Неопределено Тогда
		Область.Области.ЗаголовокПодраздела.ЦветТекста = ЦветТекста;
	КонецЕсли;
	ТаблицаОтчета.Вывести(Область);

КонецПроцедуры

Процедура ВывестиСвязьТорговаяТочкаИРЦ(Знач Объект,Макет,ТаблицаОтчета)
	
	ОбластьСтрокаТТ		= Макет.ПолучитьОбласть("СтрокаТаблицыЮрЛица");
	ОбластьСтрокаРЦ		= Макет.ПолучитьОбласть("СтрокаТаблицыЮрЛица");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	вогТорговыеТочки.Ссылка КАК Ссылка,
	|	вогТорговыеТочки.НаименованиеПолное КАК НаименованиеПолное
	|ПОМЕСТИТЬ ВТ_ТорговыеТочки
	|ИЗ
	|	Справочник.вогТорговыеТочки КАК вогТорговыеТочки
	|ГДЕ
	|	вогТорговыеТочки.Партнер = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТорговыеТочки.Ссылка КАК ТТ,
	|	ISNULL(вогСвязиРаспределительныхЦентров.РаспределительныйЦентр,"""") КАК РЦ
	|ИЗ
	|	ВТ_ТорговыеТочки КАК ВТ_ТорговыеТочки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиРаспределительныхЦентров КАК вогСвязиРаспределительныхЦентров
	|		ПО ВТ_ТорговыеТочки.Ссылка = вогСвязиРаспределительныхЦентров.ОбъектСвязи
	|ИТОГИ ПО
	|	ТТ");
	Запрос.УстановитьПараметр("Партнер",Объект);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаГруппа = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ТТ");
		ТаблицаОтчета.НачатьГруппуСтрок("ТорговыеТочкиЮрЛица");
		Пока ВыборкаГруппа.Следующий() Цикл
			// Список торговых точек по юр.лицу
			ОбластьСтрокаТТ.Параметры.НаименованиеПолное	= ВыборкаГруппа.ТТ;
			ОбластьСтрокаТТ.Параметры.Представление 		= МногострочноеПредставлениеКонтактнойИнформации(ВыборкаГруппа.ТТ.КонтактнаяИнформация);
			ТаблицаОтчета.Вывести(ОбластьСтрокаТТ);
			ВыборкаДетальныеЗаписи = ВыборкаГруппа.Выбрать(ОбходРезультатаЗапроса.Прямой);
			ТаблицаОтчета.НачатьГруппуСтрок("РаспределительныеЦентры");
			// Список РЦ
			Пока ВыборкаДетальныеЗаписи.Следующий() И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РЦ) Цикл
				ОбластьСтрокаРЦ.Параметры.НаименованиеПолное 	= ВыборкаДетальныеЗаписи.РЦ;
				ОбластьСтрокаРЦ.Параметры.Представление 		= МногострочноеПредставлениеКонтактнойИнформации(ВыборкаДетальныеЗаписи.РЦ.КонтактнаяИнформация);
				ТаблицаОтчета.Вывести(ОбластьСтрокаРЦ);
			КонецЦикла;
			ТаблицаОтчета.ЗакончитьГруппуСтрок();
		КонецЦикла;
		ТаблицаОтчета.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРЦИзТорговойТочки(Знач Объект,Макет,ТаблицаОтчета)

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	вогСвязиРаспределительныхЦентров.РаспределительныйЦентр КАК РЦ
	|ИЗ
	|	РегистрСведений.вогСвязиРаспределительныхЦентров КАК вогСвязиРаспределительныхЦентров
	|ГДЕ
	|	вогСвязиРаспределительныхЦентров.ОбъектСвязи = &ОбъектСвязи");
	Запрос.УстановитьПараметр("ОбъектСвязи",Объект);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОбластьСтрокаРЦ		= Макет.ПолучитьОбласть("СтрокаТаблицыТорговаяТочка");
		Выборка 			= РезультатЗапроса.Выбрать();
		ТаблицаОтчета.НачатьГруппуСтрок("ТорговыеТочкиРЦ");
		Пока Выборка.Следующий() Цикл
			ОбластьСтрокаРЦ.Параметры.Наименование 	= Выборка.РЦ;
			ОбластьСтрокаРЦ.Параметры.Представление = МногострочноеПредставлениеКонтактнойИнформации(Выборка.РЦ.КонтактнаяИнформация);
			ТаблицаОтчета.Вывести(ОбластьСтрокаРЦ);
		КонецЦикла;
		ТаблицаОтчета.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиТорговойТочкиИзРЦ(Знач Объект,Макет,ТаблицаОтчета)

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	вогСвязиЮридическихЛиц.ЮридическоеЛицо КАК ЮридическоеЛицо
	|ИЗ
	|	РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
	|ГДЕ
	|	вогСвязиЮридическихЛиц.ОбъектСвязи = &ОбъектСвязи");
	Запрос.УстановитьПараметр("ОбъектСвязи",Объект);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОбластьСтрокаТТ		= Макет.ПолучитьОбласть("СтрокаТаблицыРаспределительныйЦентр");
		Выборка 			= РезультатЗапроса.Выбрать();
		ТаблицаОтчета.НачатьГруппуСтрок("ЮридическиеЛицаРЦ");
		Пока Выборка.Следующий() Цикл
			ОбластьСтрокаТТ.Параметры.Наименование 	= Выборка.ЮридическоеЛицо;
			ОбластьСтрокаТТ.Параметры.Представление = МногострочноеПредставлениеКонтактнойИнформации(Выборка.ЮридическоеЛицо.КонтактнаяИнформация);
			ТаблицаОтчета.Вывести(ОбластьСтрокаТТ);
		КонецЦикла;
		ТаблицаОтчета.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Формирует отчет
//
// Параметры
//  ТаблицаОтчета 			- ТабличныйДокумент - табличный документ, в который выводится отчет
//  Объект       			- СправочникСсылка.вогТорговыеТочки - Торговая точка, для которого формируется отчет
//  ПараметрыФормирования 	- Структура - Параметры вывода
//
Процедура СформироватьОтчет(ТаблицаОтчета, Объект,ПараметрыФормирования)  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаОтчета.Очистить();
	Макет = ПолучитьМакет("Макет");
	
	СоответствиеЗапросыДанные = Новый Соответствие;
	МассивРезультатовЗапросовСтруктураВзаимосвязи = ВыполнитьПакетЗапросовПоОбъекту(Объект,СоответствиеЗапросыДанные,ПараметрыФормирования);

	Если СоответствиеЗапросыДанные["Клиент"] <> Неопределено Тогда
		ВывестиДанныеОПартнере(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["Клиент"]],ТаблицаОтчета,Макет);
	КонецЕсли;
	
	Если СоответствиеЗапросыДанные["КонтактнаяИнформация"] <> Неопределено Тогда
		ВывестиДанныеКонтактнаяИнформация(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["КонтактнаяИнформация"]],ТаблицаОтчета,Макет);
	КонецЕсли;
	
	Если СоответствиеЗапросыДанные["КонтактныеЛица"] <> Неопределено Тогда
		ВывестиДанныеОКонтактныхЛицах(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["КонтактныеЛица"]],ТаблицаОтчета,Макет);
	КонецЕсли;
	
	Если СоответствиеЗапросыДанные["ЮридическиеЛица"] <> Неопределено Тогда
		ВывестиДанныеЮридическиеЛица(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["ЮридическиеЛица"]],ТаблицаОтчета,Макет);
	КонецЕсли;
	
	Если СоответствиеЗапросыДанные["ТорговыеТочки"] <> Неопределено Тогда
		ВывестиДанныеТорговыеТочки(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["ТорговыеТочки"]],ТаблицаОтчета,Макет);
	КонецЕсли;
	
	Если СоответствиеЗапросыДанные["РаспределительныеЦентры"] <> Неопределено Тогда
		ВывестиДанныеРаспределительныеЦентры(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["РаспределительныеЦентры"]],ТаблицаОтчета,Макет);
	КонецЕсли;
	
	ТаблицаОтчета.ВывестиГоризонтальныйРазделительСтраниц();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Формирует отчет
//
// Параметры
//  ТаблицаОтчета 			- ТабличныйДокумент - табличный документ, в который выводится отчет
//  Объект       			- СправочникСсылка.вогТорговыеТочки - Торговая точка, для которого формируется отчет
//  ПараметрыФормирования 	- Структура - Параметры вывода
//  Отбор                   - Отбор по ТТ
//  НоваяОбласть            - Новая область табличного документа
//
Процедура СформироватьОтчетСОтбором(ТаблицаОтчета, Объект,ПараметрыФормирования,Отбор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаОтчета.Очистить();
	Макет = ПолучитьМакет("Макет");
		
	Если ТипЗнч(Отбор) <> Тип("Структура") Тогда
		
		СоответствиеЗапросыДанные = Новый Соответствие;
		МассивРезультатовЗапросовСтруктураВзаимосвязи = ВыполнитьПакетЗапросовПоОбъекту(Объект,СоответствиеЗапросыДанные,ПараметрыФормирования);
		
		Если СоответствиеЗапросыДанные["Клиент"] <> Неопределено Тогда
			ВывестиДанныеОПартнере(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["Клиент"]],ТаблицаОтчета,Макет,Ложь);
		КонецЕсли;
		
		Если СоответствиеЗапросыДанные["КонтактнаяИнформация"] <> Неопределено Тогда
			ВывестиДанныеКонтактнаяИнформация(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["КонтактнаяИнформация"]],ТаблицаОтчета,Макет,Ложь);
		КонецЕсли;
		
		Если СоответствиеЗапросыДанные["КонтактныеЛица"] <> Неопределено Тогда
			ВывестиДанныеОКонтактныхЛицах(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["КонтактныеЛица"]],ТаблицаОтчета,Макет,Ложь);
		КонецЕсли;
		
		Если СоответствиеЗапросыДанные["ЮридическиеЛица"] <> Неопределено Тогда
			ВывестиДанныеЮридическиеЛица(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["ЮридическиеЛица"]],ТаблицаОтчета,Макет,Ложь);
		КонецЕсли;
		
		Если СоответствиеЗапросыДанные["ТорговыеТочки"] <> Неопределено Тогда
			ВывестиДанныеТорговыеТочкиСОтбором(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["ТорговыеТочки"]],ТаблицаОтчета,Макет,Истина,Отбор);
		КонецЕсли;
		
		Если СоответствиеЗапросыДанные["РаспределительныеЦентры"] <> Неопределено Тогда
			ВывестиДанныеРаспределительныеЦентры(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["РаспределительныеЦентры"]],ТаблицаОтчета,Макет,Ложь);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Отбор) = Тип("Структура") И Отбор.Свойство("ИмяТаблицы") Тогда
		
		Если Отбор.ИмяТаблицы = "ЮридическоеЛицо" Тогда
			ЭтоЮрЛицо = Истина; ЭтоРЦ = Ложь;
		Иначе
			ЭтоЮрЛицо = Ложь; ЭтоРЦ = Истина;
		КонецЕсли;
		
		СоответствиеЗапросыДанные = Новый Соответствие;
		МассивРезультатовЗапросовСтруктураВзаимосвязи = ВыполнитьПакетЗапросовПоОбъектуСОтбором(Объект,СоответствиеЗапросыДанные,ПараметрыФормирования,ЭтоЮрЛицо,ЭтоРЦ,Отбор.Значение);
		
		Если СоответствиеЗапросыДанные["Клиент"] <> Неопределено Тогда
			ВывестиДанныеОПартнере(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["Клиент"]],ТаблицаОтчета,Макет,Ложь);
		КонецЕсли;
		
		Если СоответствиеЗапросыДанные["КонтактнаяИнформация"] <> Неопределено Тогда
			ВывестиДанныеКонтактнаяИнформация(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["КонтактнаяИнформация"]],ТаблицаОтчета,Макет,Ложь);
		КонецЕсли;
		
		Если СоответствиеЗапросыДанные["КонтактныеЛица"] <> Неопределено Тогда
			ВывестиДанныеОКонтактныхЛицах(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["КонтактныеЛица"]],ТаблицаОтчета,Макет,Ложь);
		КонецЕсли;
		
		Если СоответствиеЗапросыДанные["ЮридическиеЛица"] <> Неопределено Тогда
			ВывестиДанныеЮридическиеЛица(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["ЮридическиеЛица"]],ТаблицаОтчета,Макет,Ложь);
		КонецЕсли;
		
		Если СоответствиеЗапросыДанные["ТорговыеТочки"] <> Неопределено Тогда
			ВывестиДанныеТорговыеТочкиСОтбором(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["ТорговыеТочки"]],ТаблицаОтчета,Макет,Истина,Отбор);
		КонецЕсли;
		
		Если СоответствиеЗапросыДанные["РаспределительныеЦентры"] <> Неопределено Тогда
			ВывестиДанныеРаспределительныеЦентры(МассивРезультатовЗапросовСтруктураВзаимосвязи[СоответствиеЗапросыДанные["РаспределительныеЦентры"]],ТаблицаОтчета,Макет,Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаОтчета.ВывестиГоризонтальныйРазделительСтраниц();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция МногострочноеПредставлениеКонтактнойИнформации(КонтактнаяИнформация,ПоляВывода = Неопределено)

	ПредставлениеКИ = "";
	
	Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		Если ПоляВывода <> Неопределено Тогда
			Если ПоляВывода.НайтиПоЗначению(СтрокаКонтактнойИнформации.Вид) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ПредставлениеКИ = ПредставлениеКИ + "
		|" + СтрокаКонтактнойИнформации.Вид + ": " + СтрокаКонтактнойИнформации.Представление;
	
	КонецЦикла;
	
	Возврат Прав(ПредставлениеКИ,СтрДлина(ПредставлениеКИ)-1);

КонецФункции

Функция МногострочноеПредставлениеНаправлениеДеятельности(ТекущийОбъект)
	
	ПредставлениеНаправления = "";
	
	Для каждого СтрокаНаправления Из ТекущийОбъект.Направления Цикл
		ПредставлениеНаправления = ПредставлениеНаправления + ", "  + СтрокаНаправления.Направление;
	КонецЦикла;
	
	Возврат Прав(ПредставлениеНаправления,СтрДлина(ПредставлениеНаправления)-1);
	
КонецФункции

Функция ПолучитьЗначениеКлассификатора(Ссылка,Классификатор)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = "";
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_ЗначенияКлассификаторов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Классификаторы
	|ИЗ
	|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
	|ГДЕ
	|	CRM_ЗначенияКлассификаторов.Владелец = &ЗначениеКлассификатора
	|	И НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Классификаторы.Ссылка КАК Классификатор,
	|	ВЫБОР
	|		КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
	|			ТОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
	|		ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец
	|	КОНЕЦ КАК ИмяКлассификатора,
	|	ВЫБОР
	|		КОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит)
	|			ТОГДА CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
	|		ИНАЧЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
	|	КОНЕЦ КАК Результат
	|ИЗ
	|	Классификаторы КАК Классификаторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|		ПО Классификаторы.Ссылка = CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
	|ГДЕ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект");
	Запрос.УстановитьПараметр("ЗначениеКлассификатора",Классификатор);
	Запрос.УстановитьПараметр("Объект",Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Результат;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ПолучитьКоличествоТорговыхТочек(Знач ЮрЛицо = Неопределено)

	КоличествоТТ = 0;
	
	Если ЮрЛицо <> Неопределено Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вогСвязиЮридическихЛиц.ОбъектСвязи) КАК КоличествоТТ
		|ИЗ
		|	РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
		|ГДЕ
		|	вогСвязиЮридическихЛиц.ЮридическоеЛицо = &ЮрЛицо
		|	И вогСвязиЮридическихЛиц.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
	//	|	И вогСвязиЮридическихЛиц.ОбъектСвязи.Вид = &ВидТорговойТочки
		|	И вогСвязиЮридическихЛиц.ОбъектСвязи.Партнер = вогСвязиЮридическихЛиц.ЮридическоеЛицо.Партнер");
		Запрос.УстановитьПараметр("ЮрЛицо",ЮрЛицо);
		//Запрос.УстановитьПараметр("ВидТорговойТочки",Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
			Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
				КоличествоТТ = ВыборкаИзРезультатаЗапроса.КоличествоТТ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КоличествоТТ;
	
КонецФункции

Функция ПолучитьКоличествоТорговыхТочекПоРЦ(РЦ = Неопределено)

	КоличествоТТ = 0;
	
	Если РЦ <> Неопределено Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вогСвязиРаспределительныхЦентров.ОбъектСвязи) КАК КоличествоТТ
		|ИЗ
		|	РегистрСведений.вогСвязиРаспределительныхЦентров КАК вогСвязиРаспределительныхЦентров
		|ГДЕ
		|	вогСвязиРаспределительныхЦентров.РаспределительныйЦентр = &РЦ
		//|	И вогСвязиРаспределительныхЦентров.ОбъектСвязи.Вид = &ВидТорговойТочки
		|	И вогСвязиРаспределительныхЦентров.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки");
		Запрос.УстановитьПараметр("РЦ",РЦ);
		//Запрос.УстановитьПараметр("ВидТорговойТочки",Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Запрос.УстановитьПараметр("РЦ",РЦ);
		РезульЗапроса = Запрос.Выполнить();
		Если НЕ РезульЗапроса.Пустой() Тогда
			ВыборкаИзРезультатаЗапроса = РезульЗапроса.Выбрать();
			Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
				КоличествоТТ = ВыборкаИзРезультатаЗапроса.КоличествоТТ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КоличествоТТ;
	
КонецФункции

Функция ПолучитьТорговыеТочкиПоЮрЛицу(ЮрЛицо) Экспорт

	СписокТорговыхТочек = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ЮрЛицо) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	вогСвязиЮридическихЛиц.ОбъектСвязи КАК ОбъектСвязи
		|ИЗ
		|	РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
		|ГДЕ
		|	вогСвязиЮридическихЛиц.ЮридическоеЛицо = &ЮрЛицо
		|	И вогСвязиЮридическихЛиц.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
	//	|	И вогСвязиЮридическихЛиц.ОбъектСвязи.Вид = &ВидТорговойТочки
		|	И вогСвязиЮридическихЛиц.ОбъектСвязи.Партнер = вогСвязиЮридическихЛиц.ЮридическоеЛицо.Партнер
		|
		|СГРУППИРОВАТЬ ПО
		|	вогСвязиЮридическихЛиц.ОбъектСвязи");
		Запрос.УстановитьПараметр("ЮрЛицо",ЮрЛицо);
		//Запрос.УстановитьПараметр("ВидТорговойТочки",Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаИзРезультатЗапроса = РезультатЗапроса.Выбрать();
			Пока ВыборкаИзРезультатЗапроса.Следующий() Цикл
				СписокТорговыхТочек.Добавить(ВыборкаИзРезультатЗапроса.ОбъектСвязи, , ,БиблиотекаКартинок.Справочник);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокТорговыхТочек;
	
КонецФункции

Функция ПолучитьТорговыеТочкиПоРЦ(РЦ) Экспорт

	СписокТорговыхТочек = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(РЦ) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	вогСвязиРаспределительныхЦентров.ОбъектСвязи КАК ОбъектСвязи
		|ИЗ
		|	РегистрСведений.вогСвязиРаспределительныхЦентров КАК вогСвязиРаспределительныхЦентров
		|ГДЕ
		|	вогСвязиРаспределительныхЦентров.РаспределительныйЦентр = &РЦ
		|	И вогСвязиРаспределительныхЦентров.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки
	//	|	И вогСвязиРаспределительныхЦентров.ОбъектСвязи.Вид = &ВидТорговойТочки
		|
		|СГРУППИРОВАТЬ ПО
		|	вогСвязиРаспределительныхЦентров.ОбъектСвязи");
		Запрос.УстановитьПараметр("РЦ",РЦ);
	//	Запрос.УстановитьПараметр("ВидТорговойТочки",Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВыборкаИзРезультатЗапроса = РезультатЗапроса.Выбрать();
			Пока ВыборкаИзРезультатЗапроса.Следующий() Цикл
				СписокТорговыхТочек.Добавить(ВыборкаИзРезультатЗапроса.ОбъектСвязи, , ,БиблиотекаКартинок.Справочник);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокТорговыхТочек;
	
КонецФункции

#КонецОбласти

#КонецОбласти
	
#КонецЕсли

// -- Тищенко В.В.