#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// Длительные операции

//Процедура подготавливает данные для заполнения монитора целевых показателей
// Параметры:
//	ПараметрыСоставаМонитора - структура параметров для подготовки данных
//  АдресХранилища - адрес временного хранилища с подготовленными данными
//
//Процедура подготавливает данные для заполнения монитора целевых показателей
// Параметры:
//	ПараметрыСоставаМонитора - структура параметров для подготовки данных
//  АдресХранилища - адрес временного хранилища с подготовленными данными
//
&НаСервере
Процедура ПодготовитьДанныеДляЗаполнения(ПараметрыСоставаМонитора, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура;
	
	Если ПараметрыСоставаМонитора.Свойство("ТабличныйДокумент") Тогда
		ДанныеДляЗаполнения.Вставить("Таб", ПодготовитьТабличныйДокумент(ПараметрыСоставаМонитора));
	ИначеЕсли ПараметрыСоставаМонитора.Свойство("РежимАнализаВзаимосвязанных") И ПараметрыСоставаМонитора.РежимАнализаВзаимосвязанных Тогда
		ДанныеДляЗаполнения.Вставить("Монитор", ПолучитьСоставМонитораВзаимосвязанных(ПараметрыСоставаМонитора));
	Иначе
		ДанныеДляЗаполнения.Вставить("Монитор", ПолучитьСоставМонитора(ПараметрыСоставаМонитора));
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

//Функция возвращает подготовленный состав монитора целевых показактелей
// Параметры:
//	ПараметрыСоставаМонитора - структура параметров для подготовки данных
//
&НаСервере
Функция ПолучитьСоставМонитора(ПараметрыСоставаМонитора)
	
	ОтборВариантовАнализа			= ПараметрыСоставаМонитора.ОтборВариантовАнализа;
	ПринудительноОбновитьДанные		= ПараметрыСоставаМонитора.ПринудительноОбновитьДанные;
	СтруктураНастроек				= ПараметрыСоставаМонитора.СтруктураНастроек;
	ОтборСтатус						= ПараметрыСоставаМонитора.ОтборСтатус;
	ОтборСотрудник				    = ПараметрыСоставаМонитора.ОтборСотрудник;
	УчитыватьВариантыОтображения	= ПараметрыСоставаМонитора.УчитыватьВариантыОтображения;
	ОтборНачалоПериода				= ПараметрыСоставаМонитора.ОтборНачалоПериода;
	ОтборКонецПериода			    = ПараметрыСоставаМонитора.ОтборКонецПериода;
	ОтборПоТекущемуПериоду          = ПараметрыСоставаМонитора.ОтборПоТекущемуПериоду;
	ВыбранныеШаблоныПоказателей     = ПараметрыСоставаМонитора.ВыбранныеШаблоныПоказателей;

	Попытка
	    ОтборСтатусПоказателя = ПараметрыСоставаМонитора.СтатусПоказателя;
	Исключение
		ОтборСтатусПоказателя = Неопределено;
	КонецПопытки;	
	
	ПолученныйСоставМонитора			= Новый Структура("НаборИсточниковДанных, СтатистикаПоСтрокам, Пустой",,, Истина);
	НаборИсточниковДанных				= Новый ТаблицаЗначений;
	ТекущийПользователь					= Пользователи.ТекущийПользователь();
	ВариантыОтображенияВариантовАнализа	= Перечисления.CRM_ВариантыОтображенияАнализаПоказателей;
	ЗоныВнимания						= Перечисления.CRM_ЗоныВниманияАнализаПоказателей;
	
	ЗапросСостава = Новый Запрос;
	ЗапросСостава.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	ЗапросСостава.УстановитьПараметр("ПериодНачало", ПараметрыСоставаМонитора.ОтборНачалоПериода);
	ЗапросСостава.УстановитьПараметр("ПериодКонец", ПараметрыСоставаМонитора.ОтборКонецПериода);

	ЗапросСостава.Текст = "ВЫБРАТЬ
	|	CRM_ИспользуемыеКлючевыеПоказатели.Показатель,
	|	CRM_ИспользуемыеКлючевыеПоказатели.Менеджер КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.CRM_ВариантыОтображенияАнализаПоказателей.Диаграмма) КАК ВариантОтображения,
	|	CRM_ИспользуемыеКлючевыеПоказатели.Показатель.Родитель КАК Группа
	|ИЗ
	|	РегистрСведений.CRM_ИспользуемыеКлючевыеПоказатели КАК CRM_ИспользуемыеКлючевыеПоказатели
	|ГДЕ
	|	CRM_ИспользуемыеКлючевыеПоказатели.Согласовано
	|	И CRM_ИспользуемыеКлючевыеПоказатели.Менеджер = &Сотрудник
	|	И CRM_ИспользуемыеКлючевыеПоказатели.Период МЕЖДУ &ПериодНачало И &ПериодКонец
	|	И ВЫБОР
	|			КОГДА &НеИспользоватьВыбранныеШаблоны
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ CRM_ИспользуемыеКлючевыеПоказатели.Показатель В (&ВыбранныеШаблоныПоказателей)
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_ИспользуемыеКлючевыеПоказатели.Показатель,
	|	CRM_ИспользуемыеКлючевыеПоказатели.Менеджер,
	|	CRM_ИспользуемыеКлючевыеПоказатели.Показатель.Родитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	
	Если ЗначениеЗаполнено(ОтборСотрудник) Тогда
		ЗапросСостава.УстановитьПараметр("Сотрудник", ОтборСотрудник);
	Иначе
		ЗапросСостава.Текст = СтрЗаменить(ЗапросСостава.Текст, " = &Сотрудник", " В (&Сотрудник)"); 
		ЗапросСостава.УстановитьПараметр("Сотрудник", CRM_УправлениеДоступомКПользователям.ПолучитьСписокДоступныхПользователей());
	КонецЕсли;
	Если ВыбранныеШаблоныПоказателей.Количество()>0 Тогда
		ЗапросСостава.УстановитьПараметр("НеИспользоватьВыбранныеШаблоны", Истина);	
	Иначе
		ЗапросСостава.УстановитьПараметр("НеИспользоватьВыбранныеШаблоны", Ложь);	
	КонецЕсли;
	ЗапросСостава.УстановитьПараметр("ВыбранныеШаблоныПоказателей", ВыбранныеШаблоныПоказателей);
	РезультатЗапросаСостава = ЗапросСостава.Выполнить();
	
	Если НЕ РезультатЗапросаСостава.Пустой() Тогда
		
		НаборИсточниковДанных = РезультатЗапросаСостава.Выгрузить();
		
		// Дополним таблицу источниками данных, состоянием и трендом
		НаборИсточниковДанных.Колонки.Добавить("ТаблицаДанных");
		НаборИсточниковДанных.Колонки.Добавить("ЗонаВнимания");
		НаборИсточниковДанных.Колонки.Добавить("Пустой");
		НаборИсточниковДанных.Колонки.Добавить("РасчетыНеактуальны");
		НаборИсточниковДанных.Колонки.Добавить("ОшибкаРасчета");
		НаборИсточниковДанных.Колонки.Добавить("ПорядокЗоныВнимания");
		НаборИсточниковДанных.Колонки.Добавить("ПроцентВыполнения");
		НаборИсточниковДанных.Колонки.Добавить("Позиция");
		НаборИсточниковДанных.Колонки.Добавить("СтатусПоказателя");   
		НаборИсточниковДанных.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));   
		НаборИсточниковДанных.Колонки.Добавить("КонецПериода" , Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));    
		
		Позиция = 1;
		Для Каждого ЭлементНабора Из НаборИсточниковДанных Цикл
			Показатель = ЭлементНабора.Показатель;
			
			// Получим данные варианта анализа
			
			МассивМенеджеров = Новый Массив;
			МассивМенеджеров.Добавить(ЭлементНабора.Сотрудник);
			Попытка
				ТаблицаДанных = CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьТаблицуПоказателя(Показатель, ?(ОтборКонецПериода<CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(), ОтборКонецПериода, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()), МассивМенеджеров);
				ЭлементНабора.ТаблицаДанных = Новый ХранилищеЗначения(ТаблицаДанных);
				ЭлементНабора.Пустой = ТипЗнч(ТаблицаДанных) = Тип("ТаблицаЗначений") И ТаблицаДанных.Количество() = 0;
				ЭлементНабора.ОшибкаРасчета = Ложь;
			Исключение
				ЭлементНабора.ОшибкаРасчета = Истина;
			КонецПопытки;
			
			ЭлементНабора.ЗонаВнимания = ЗонаАнализаЗначения(Показатель, ТаблицаДанных);
			ЭлементНабора.ПроцентВыполнения = ПроцентВыполнения(Показатель, ТаблицаДанных);
			ЭлементНабора.ПорядокЗоныВнимания = ПорядокЗоныВнимания(ЭлементНабора.ЗонаВнимания);
			ЭлементНабора.Позиция   = Позиция;
			//ЭлементНабора.НачалоПериода = ЭлементНабора.ВариантАнализа.ПериодАнализаНачало;
			//ЭлементНабора.КонецПериода  = ЭлементНабора.ВариантАнализа.ПериодАнализаКонец;
			
			Позиция = Позиция + 1;
			
		КонецЦикла;
		Если СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоКатегориямЦелей" Тогда
			НаборИсточниковДанных.Сортировать("ПорядокЗоныВнимания");
		КонецЕсли;
		// Установим отбор
		Если ОтборСтатус = 1 Тогда
			
			ОтборКритических = Новый Структура("ЗонаВнимания", ЗоныВнимания.КритическоеСостояние);
			НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборКритических);
			
		ИначеЕсли ОтборСтатус = 2 Тогда
			
			ОтборВажных = Новый Структура("ЗонаВнимания", ЗоныВнимания.Важно);
			НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборВажных);
			
		ИначеЕсли ОтборСтатус = 3 Тогда
			
			ОтборКСведению = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
			ЭлементыМонитораКУдалению = НаборИсточниковДанных.НайтиСтроки(ОтборКСведению);
			
			Для Каждого ЭлементМонитораКУдалению Из ЭлементыМонитораКУдалению Цикл 
				
				НаборИсточниковДанных.Удалить(ЭлементМонитораКУдалению);
				
			КонецЦикла;
			
			ОтборПоРассчитаннымСОшибками = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
			ЭлементыМонитораКУдалению = НаборИсточниковДанных.НайтиСтроки(ОтборПоРассчитаннымСОшибками);
			
			Для Каждого ЭлементМонитораКУдалению Из ЭлементыМонитораКУдалению Цикл 
				
				НаборИсточниковДанных.Удалить(ЭлементМонитораКУдалению);
				
			КонецЦикла;
			
		ИначеЕсли ОтборСтатус = 4 Тогда
			
			ОтборКСведению = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
			НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборКСведению);
			
		ИначеЕсли ОтборСтатус = 5 Тогда
			
			ОтборПоРассчитаннымСОшибкой = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
			НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборПоРассчитаннымСОшибкой);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборСотрудник) Тогда
			ОтборПоСотруднику = Новый Структура("Сотрудник", ОтборСотрудник);
			НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборПоСотруднику);
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборСтатусПоказателя) Тогда
			ОтборПоСтатусуПоказателя = Новый Структура("СтатусПоказателя", ОтборСтатусПоказателя);
			НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборПоСтатусуПоказателя);
		
		КонецЕсли;
		
		Если ОтборПоТекущемуПериоду Тогда
			ОтобратьПоПериоду(НаборИсточниковДанных);
			
		Иначе	
			//Если ЗначениеЗаполнено(ОтборНачалоПериода) Тогда
			//	ОтборПоНачалоПериода = Новый Структура("НачалоПериода", ОтборНачалоПериода);
			//	НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборПоНачалоПериода);
			//
			//КонецЕсли;
			//		
			//Если ЗначениеЗаполнено(ОтборКонецПериода) Тогда
			//	ОтборПоКонецПериода = Новый Структура("КонецПериода", ОтборКонецПериода);
			//	НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборПоКонецПериода);
			//
			//КонецЕсли;
			
		КонецЕсли;
			
		ПолученныйСоставМонитора.Пустой = (НаборИсточниковДанных.Количество() = 0);
		
		ПолученныйСоставМонитора.Вставить("НаборИсточниковДанных", НаборИсточниковДанных);
		
		ПолученныйСоставМонитора.Вставить("СтатистикаПоСтрокам",
											Отчеты.CRM_МониторЦелевыхПоказателей.СтатистикаИсточниковДанныхПоЗонамВнимания(
																			НаборИсточниковДанных, УчитыватьВариантыОтображения));
		
	КонецЕсли;
	
	Возврат ПолученныйСоставМонитора;
	
КонецФункции

//Функция возвращает подготовленный состав взаимосвязанных показателей монитора
// Параметры:
//	ПараметрыСоставаМонитора - структура параметров для подготовки данных
//
&НаСервере
Функция ПолучитьСоставМонитораВзаимосвязанных(ПараметрыСоставаМонитора)
	//ВидПоиска						= Перечисления.ркВидыПоискаСвязанныхПоказателей[ПараметрыСоставаМонитора.ВидПоиска];
	//СвойстваВариантаАнализа			= ркУправлениеПоказателямиВызовСервера.ПолучитьСвойстваВариантаАнализаПоИдентификатору(
	//																		ПараметрыСоставаМонитора.СвойстваВариантаАнализа);
	//АдресаДинамическихПараметров	= ПараметрыСоставаМонитора.АдресаДинамическихПараметров.Получить();
	//ОтборСтатус						= ПараметрыСоставаМонитора.ОтборСтатус;
	//
	//ПолученныйСоставМонитора = ркУправлениеПоказателями.ПолучитьВзаимосвязанныеВариантыАнализа(ВидПоиска, СвойстваВариантаАнализа.Ссылка,
	//																								ОтборСтатус, АдресаДинамическихПараметров);
	//
	//Возврат ПолученныйСоставМонитора;
	
КонецФункции

//Функция возвращает подготовленный табличный документ для печати показателей монитора
// Параметры:
//	ПараметрыСоставаМонитора - структура параметров для печати
//
&НаСервере
Функция ПодготовитьТабличныйДокумент(ПараметрыСоставаМонитора)
	
	//табВариантыАнализаОтчета = ПараметрыСоставаМонитора.ВариантыАнализаОтчета.Получить();
	//
	//Возврат ркУправлениеПоказателями.ЗаполнитьСводныйОтчетДаннымиПоказателя(ПараметрыСоставаМонитора.ТабличныйДокумент,
	//																			табВариантыАнализаОтчета,,
	//																			ПараметрыСоставаМонитора.ПринудительноОбновитьДанные);
	//
КонецФункции

&НаСервере
Процедура ОтобратьПоПериоду(НаборИсточниковДанных)

	ПериодАнализа = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	
	мНаборИсточниковДанных = НаборИсточниковДанных.Скопировать();
	НаборИсточниковДанных.Очистить();	
	Для каждого СтрокаТаблицы Из мНаборИсточниковДанных Цикл
		Если СтрокаТаблицы.НачалоПериода <= ПериодАнализа И СтрокаТаблицы.КонецПериода >= ПериодАнализа Тогда
			ЗаполнитьЗначенияСвойств(НаборИсточниковДанных.Добавить(), СтрокаТаблицы);
		КонецЕсли;
	   	
	КонецЦикла; 
	
КонецПроцедуры // ОтобратьПоПериоду()

// Возвращает пользовательские настройки монитора целевых показателей
//
// Возвращаемое значение:
//	Структура - содержит пользовательские настройки
//	ВариантГруппировкиПоказателей - Строка - принимает значения "ПоКатегориямЦелей" и "ПоВажности"
//	ВариантОтображенияДеталей - Строка - принимает значения "ПоказыватьТолькоТекущееЗначение" и "ПоказыватьТекущееЗначениеИДетали"
//	КоличествоКолонокМонитораПоказателей - Число
//	РазмерДиаграмм - Число - принимает значения 1(малый) и 2(Крупный)
//	ПериодАвтообновления - Число - период в минутах
//
&НаСервере
Функция ПолучитьНастройкиМонитораЦелевыхПоказателей() Экспорт
	
	НастройкиПоУмолчанию = ПолучитьПерсональныеНастройкиМонитораЦелевыхПоказателейПоУмолчанию();
	
	НастройкиМонитораЦелевыхПоказателей = Новый Структура;
	
	// порядок вывода показателей
	ВариантГруппировкиПоказателейВрем = 
	ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "ВариантГруппировкиПоказателей");
	Если ВариантГруппировкиПоказателейВрем = Неопределено Тогда
		ВариантГруппировкиПоказателей = НастройкиПоУмолчанию.ВариантГруппировкиПоказателей;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиМонитораЦелевыхПоказателей", "ВариантГруппировкиПоказателей", ВариантГруппировкиПоказателей);
	Иначе 
		ВариантГруппировкиПоказателей = ВариантГруппировкиПоказателейВрем;
	КонецЕсли;
	
	КоличествоКолонокМонитораПоказателейВрем = 
	ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "КоличествоКолонокМонитораПоказателей");
	Если КоличествоКолонокМонитораПоказателейВрем = Неопределено Тогда
		КоличествоКолонокМонитораПоказателей = НастройкиПоУмолчанию.КоличествоКолонокМонитораПоказателей;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиМонитораЦелевыхПоказателей", "КоличествоКолонокМонитораПоказателей", КоличествоКолонокМонитораПоказателей);
	Иначе 
		КоличествоКолонокМонитораПоказателей = КоличествоКолонокМонитораПоказателейВрем;
	КонецЕсли;
	
	НастройкиМонитораЦелевыхПоказателей.Вставить("ВариантГруппировкиПоказателей", ВариантГруппировкиПоказателей);
	НастройкиМонитораЦелевыхПоказателей.Вставить("КоличествоКолонокМонитораПоказателей", КоличествоКолонокМонитораПоказателей);
	
	// Внешний вид показателей
	РазмерДиаграммВрем = 
	ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "РазмерДиаграмм");
	Если РазмерДиаграммВрем = Неопределено Тогда
		РазмерДиаграмм = НастройкиПоУмолчанию.РазмерДиаграмм;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиМонитораЦелевыхПоказателей", "РазмерДиаграмм", РазмерДиаграмм);
	Иначе 
		РазмерДиаграмм = РазмерДиаграммВрем;
	КонецЕсли;
	
	ВариантОтображенияДеталейВрем = 
	ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "ВариантОтображенияДеталей");
	Если ВариантОтображенияДеталейВрем = Неопределено Тогда
		ВариантОтображенияДеталей = НастройкиПоУмолчанию.ВариантОтображенияДеталей;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиМонитораЦелевыхПоказателей", "ВариантОтображенияДеталей", ВариантОтображенияДеталей);
	Иначе 
		ВариантОтображенияДеталей = ВариантОтображенияДеталейВрем;
	КонецЕсли;
	
	НастройкиМонитораЦелевыхПоказателей.Вставить("РазмерДиаграмм", РазмерДиаграмм);
	НастройкиМонитораЦелевыхПоказателей.Вставить("ВариантОтображенияДеталей", ВариантОтображенияДеталей);
	
	// Обновление данных
	ПериодАвтообновленияВрем = 
	ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "ПериодАвтообновления");
	Если ПериодАвтообновленияВрем = Неопределено Тогда
		ПериодАвтообновления = НастройкиПоУмолчанию.ПериодАвтообновления;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиМонитораЦелевыхПоказателей", "ПериодАвтообновления", ПериодАвтообновления);
	Иначе 
		ПериодАвтообновления = ПериодАвтообновленияВрем;
	КонецЕсли;
	
	НастройкиМонитораЦелевыхПоказателей.Вставить("ПериодАвтообновления", ПериодАвтообновления);
	
	// Выбранные шаблоны
	ВыбранныеШаблоныПоказателейВрем = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "ВыбранныеШаблоныПоказателей");
	Если ВыбранныеШаблоныПоказателейВрем = Неопределено Тогда
		ВыбранныеШаблоныПоказателей = НастройкиПоУмолчанию.ВыбранныеШаблоныПоказателей;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиМонитораЦелевыхПоказателей", "ВыбранныеШаблоныПоказателей", ВыбранныеШаблоныПоказателей);
	Иначе 
		ВыбранныеШаблоныПоказателей = ВыбранныеШаблоныПоказателейВрем;
	КонецЕсли;
	
	НастройкиМонитораЦелевыхПоказателей.Вставить("ВыбранныеШаблоныПоказателей", ВыбранныеШаблоныПоказателей);
	
	Возврат НастройкиМонитораЦелевыхПоказателей;
	
КонецФункции

&НаСервере
Функция ПолучитьПерсональныеНастройкиМонитораЦелевыхПоказателейПоУмолчанию() Экспорт
	
	НастройкиПоУмолчанию = Новый Структура;
	
	// порядок вывода показателей
	НастройкиПоУмолчанию.Вставить("ВариантГруппировкиПоказателей", "ПоВажности");
	НастройкиПоУмолчанию.Вставить("КоличествоКолонокМонитораПоказателей", 3);
	
	// Внешний вид показателей
	НастройкиПоУмолчанию.Вставить("РазмерДиаграмм", 1);
	НастройкиПоУмолчанию.Вставить("ВариантОтображенияДеталей", "ПоказыватьТолькоТекущееЗначение");
	
	// Обновление данных
	НастройкиПоУмолчанию.Вставить("ПериодАвтообновления", 15);
	
	// Обновление данных
	НастройкиПоУмолчанию.Вставить("ВыбранныеШаблоныПоказателей", Новый СписокЗначений);
	
	Возврат НастройкиПоУмолчанию;
	
КонецФункции

// Возвращает заполненную и настроенную диаграмму для монитора показателей
//
// Параметры:
//	Диаграмма			 - исходный объект Диаграмма
//	ВариантАнализа			 - Ссылка на вариант анализа
//	ИсточникСПараметрами - Структура - полное описание источника данных
//
// Возвращаемое значение:
//	Диаграмма - заполненная данными и настроенная диаграмма
//
Функция ЗаполнитьДиаграммуДляМонитора(Знач Диаграмма, ИсточникСПараметрами) Экспорт
	
		Показатель = ИсточникСПараметрами.ИсточникДанных.Показатель;
		ТаблицаДанных = ИсточникСПараметрами.ИсточникДанных.ТаблицаДанных.Получить();
		
		Диаграмма.Очистить();
		Диаграмма.ОтображатьЗаголовок = Ложь;
		Диаграмма.ОтображатьЛегенду = Ложь;
		Диаграмма.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы=ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.ВнутриШкалы;
		Диаграмма.АвтоУстановкаИменСерий = Ложь;
		Диаграмма.АвтоУстановкаИменТочек = Ложь;
		Диаграмма.ТипДиаграммы = ТипДиаграммы.Измерительная; 
		Диаграмма.АвтоМаксимальноеЗначение = Ложь; 
		Диаграмма.АвтоМинимальноеЗначение = Ложь; 
		Диаграмма.МинимальноеЗначение = 0; 
		
		КонтролируемыйПоказатель = Показатель.КонтролируемыйПоказатель;
		
		Если Показатель.КратностьЗначений = "НеИзменять" Тогда
			КратностьЗначений = 1;
		ИначеЕсли Показатель.КратностьЗначений = "Тысячи" Тогда	
			КратностьЗначений = 1000; 
		ИначеЕсли Показатель.КратностьЗначений = "Миллионы" Тогда	
			КратностьЗначений = 1000000;	
		КонецЕсли;
		
		Если Показатель.ДробнаяЧасть = "Целое" Тогда
			ДробнаяЧасть = 0;
		ИначеЕсли Показатель.ДробнаяЧасть = "Десятые" Тогда	
			ДробнаяЧасть = 1; 
		ИначеЕсли Показатель.ДробнаяЧасть = "Сотые" Тогда	
			ДробнаяЧасть = 2;	
		ИначеЕсли Показатель.ДробнаяЧасть = "Тысячные" Тогда	
			ДробнаяЧасть = 3;	
		КонецЕсли;
		
		Если  Показатель.ЦелевойТренд = "Максимум" Тогда
			
			ПлановоеЗначение = Окр(ТаблицаДанных.Итог("ЗначениеПоказателя")/КратностьЗначений, ДробнаяЧасть, 1);
			ТекущееЗначение = Окр(ТаблицаДанных.Итог(КонтролируемыйПоказатель)/КратностьЗначений, ДробнаяЧасть, 1);
			
			ПерваяОтсечка = Окр(ПлановоеЗначение*0.5, ДробнаяЧасть, 1);
			
			
			Диаграмма.МаксимальноеЗначение = Макс(ПлановоеЗначение, ТекущееЗначение); 
			
			// Создать три полосы. 
			Полосы = Диаграмма.ПолосыИзмерительнойДиаграммы; 
			НоваяПолоса = Полосы.Добавить(); 
			НоваяПолоса.Начало = 0; 
			НоваяПолоса.Конец = ПерваяОтсечка; 
			НоваяПолоса.ЦветФона = WebЦвета.Красный; 
			
			НоваяПолоса = Полосы.Добавить(); 
			НоваяПолоса.Начало = ПерваяОтсечка; 
			НоваяПолоса.Конец = Окр(ПлановоеЗначение*0.8, ДробнаяЧасть, 1);
			НоваяПолоса.ЦветФона = WebЦвета.Желтый; 
			
			НоваяПолоса = Полосы.Добавить(); 
			НоваяПолоса.Начало = Окр(ПлановоеЗначение*0.8, ДробнаяЧасть, 1); 
			НоваяПолоса.Конец = Макс(ПлановоеЗначение, ТекущееЗначение); 
			НоваяПолоса.ЦветФона = WebЦвета.Зеленый;
		ИначеЕсли  Показатель.ЦелевойТренд = "Минимум" Тогда
			
			ПлановоеЗначение = Окр(ТаблицаДанных.Итог("ЗначениеПоказателя")/КратностьЗначений, ДробнаяЧасть, 1);
			ТекущееЗначение = Окр(ТаблицаДанных.Итог(КонтролируемыйПоказатель)/КратностьЗначений, ДробнаяЧасть, 1);
			
			ПерваяОтсечка = Окр(ПлановоеЗначение*1.2, ДробнаяЧасть, 1);
			
			Если ПлановоеЗначение = 0 Тогда
				Диаграмма.МаксимальноеЗначение = Макс(5, ТекущееЗначение); 
				Полосы = Диаграмма.ПолосыИзмерительнойДиаграммы; 
				НоваяПолоса = Полосы.Добавить(); 
				НоваяПолоса.Начало = 0; 
				НоваяПолоса.Конец = Окр(1, ДробнаяЧасть, 1); 
				НоваяПолоса.ЦветФона = WebЦвета.Зеленый; 
				
				НоваяПолоса = Полосы.Добавить(); 
				НоваяПолоса.Начало = Окр(1, ДробнаяЧасть, 1); 
				НоваяПолоса.Конец = Окр(3, ДробнаяЧасть, 1); 
				НоваяПолоса.ЦветФона = WebЦвета.Желтый; 
				
				НоваяПолоса = Полосы.Добавить(); 
				НоваяПолоса.Начало = Окр(3, ДробнаяЧасть, 1); 
				НоваяПолоса.Конец = Макс(Окр(5, ДробнаяЧасть, 1), ТекущееЗначение); 
				НоваяПолоса.ЦветФона = WebЦвета.Красный;
			Иначе	
				Диаграмма.МаксимальноеЗначение = Макс(Окр(ПлановоеЗначение*2, ДробнаяЧасть, 1), ТекущееЗначение); 
				Полосы = Диаграмма.ПолосыИзмерительнойДиаграммы; 
				НоваяПолоса = Полосы.Добавить(); 
				НоваяПолоса.Начало = 0; 
				НоваяПолоса.Конец = Окр(ПлановоеЗначение*1.2, ДробнаяЧасть, 1); 
				НоваяПолоса.ЦветФона = WebЦвета.Зеленый; 
				
				НоваяПолоса = Полосы.Добавить(); 
				НоваяПолоса.Начало = Окр(ПлановоеЗначение*1.2, ДробнаяЧасть, 1); 
				НоваяПолоса.Конец = Окр(ПлановоеЗначение*1.5, ДробнаяЧасть, 1); 
				НоваяПолоса.ЦветФона = WebЦвета.Желтый; 
				
				НоваяПолоса = Полосы.Добавить(); 
				НоваяПолоса.Начало = Окр(ПлановоеЗначение*1.5, ДробнаяЧасть, 1); 
				НоваяПолоса.Конец = Макс(Окр(ПлановоеЗначение*2, ДробнаяЧасть, 1), ТекущееЗначение); 
				НоваяПолоса.ЦветФона = WebЦвета.Красный;
			КонецЕсли;	
			// Создать три полосы. 
			
		Иначе
			
			ПлановоеЗначениеМин = Окр(ТаблицаДанных.Итог("ЗначениеПоказателя")/КратностьЗначений, ДробнаяЧасть, 1);
			ПлановоеЗначениеМакс = Окр(ТаблицаДанных.Итог("ЗначениеПоказателяМаксимум")/КратностьЗначений, ДробнаяЧасть, 1);
			ТекущееЗначение = Окр(ТаблицаДанных.Итог(КонтролируемыйПоказатель)/КратностьЗначений, ДробнаяЧасть, 1);
			
			
			
			Диаграмма.МаксимальноеЗначение = Макс(ПлановоеЗначениеМакс*2, ТекущееЗначение); 
			
			
			
			
			// Создать три полосы. 
			Полосы = Диаграмма.ПолосыИзмерительнойДиаграммы; 
			НоваяПолоса = Полосы.Добавить(); 
			НоваяПолоса.Начало = 0; 
			НоваяПолоса.Конец = Окр(ПлановоеЗначениеМин*0.5, ДробнаяЧасть, 1); 
			НоваяПолоса.ЦветФона = WebЦвета.Красный; 
			
			НоваяПолоса = Полосы.Добавить(); 
			НоваяПолоса.Начало = Окр(ПлановоеЗначениеМин*0.5, ДробнаяЧасть, 1); 
			НоваяПолоса.Конец =  Окр(ПлановоеЗначениеМин*0.8, ДробнаяЧасть, 1); 
			НоваяПолоса.ЦветФона = WebЦвета.Желтый;
			
			НоваяПолоса = Полосы.Добавить(); 
			НоваяПолоса.Начало = Окр(ПлановоеЗначениеМин*0.8, ДробнаяЧасть, 1); 
			НоваяПолоса.Конец = Окр(ПлановоеЗначениеМакс*1.2, ДробнаяЧасть, 1); 
			НоваяПолоса.ЦветФона = WebЦвета.Зеленый; 
			
			НоваяПолоса = Полосы.Добавить(); 
			НоваяПолоса.Начало = Окр(ПлановоеЗначениеМакс*1.2, ДробнаяЧасть, 1); 
			НоваяПолоса.Конец =  Окр(ПлановоеЗначениеМакс*1.5, ДробнаяЧасть, 1); 
			НоваяПолоса.ЦветФона = WebЦвета.Желтый;
			
			НоваяПолоса = Полосы.Добавить(); 
			НоваяПолоса.Начало = Окр(ПлановоеЗначениеМакс*1.5, ДробнаяЧасть, 1); 
			НоваяПолоса.Конец = Макс(ПлановоеЗначениеМакс*2, ТекущееЗначение); 
			НоваяПолоса.ЦветФона = WebЦвета.Красный;	
		КонецЕсли;
		Серия = Диаграмма.УстановитьСерию("Факт");
		Точка = Диаграмма.УстановитьТочку("Факт");
		Диаграмма.УстановитьЗначение(Точка, Серия, ТекущееЗначение, Показатель,"Текущее значение - "+ТекущееЗначение);
		Диаграмма.Обновление = Истина;
	
	Возврат Диаграмма;
	
КонецФункции

// Заполняет таблицу значений для монитора показателей
//
// Параметры:
//	ТаблицаЗначенийМонитора	 - исходный объект ТаблицаЗначений
//	ИдентификаторЭлементаФормы - строковый идентификатор элемента формы, определяющий уникальность
//	ВариантАнализа				 - Ссылка на вариант анализа
//	ИсточникСПараметрами	 - Структура - полное описание источника данных
//
Процедура ЗаполнитьТаблицуДляМонитора(ТаблицаЗначенийМонитора, ИдентификаторЭлементаФормы, ИсточникСПараметрами) Экспорт
	
	ПодготовитьИсточник(ИсточникСПараметрами);
	
	ДанныеИсточникаДанных = ИсточникСПараметрами.Данные;
	ДинамическиеСвойстваВариантаАнализа = ИсточникСПараметрами.ДинамическиеСвойстваВариантаАнализа;
	ТочностьРасчетаДробнойЧасти = 2;
	
	КолонкиИсточника = ДанныеИсточникаДанных.Колонки;
	Для Каждого КолонкаИсточника Из КолонкиИсточника Цикл
		Если КолонкаИсточника.Имя = ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа Тогда
			КолонкаИсточника.Имя = НСтр("ru='КолонкаОбъектАнализа'") + "__" + ИдентификаторЭлементаФормы;
		ИначеЕсли КолонкаИсточника.Имя = ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа Тогда
			КолонкаИсточника.Имя = НСтр("ru='КолонкаЗначениеАнализа'") + "__" + ИдентификаторЭлементаФормы;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗначенийМонитора.Загрузить(ДанныеИсточникаДанных);
	
	// Форматируем значение в соотвествии с данными показателя
	Для Каждого СтрокаТаблицыЗначенийМонитора Из ТаблицаЗначенийМонитора Цикл 
		ИмяКолонкиЗначение = "КолонкаЗначениеАнализа" + "__" + ИдентификаторЭлементаФормы;
		УстанавливаемоеЗначение = Окр(СтрокаТаблицыЗначенийМонитора[ИмяКолонкиЗначение], ТочностьРасчетаДробнойЧасти);
		
		//СтрокаТаблицыЗначенийМонитора[ИмяКолонкиЗначение] = ПолучитьСокращенноеПредставлениеЧисла(УстанавливаемоеЗначение, ТочностьРасчетаДробнойЧасти, КратностьЗначений) + " " + ДинамическиеСвойстваВариантаАнализа.Размерность;
		СтрокаТаблицыЗначенийМонитора[ИмяКолонкиЗначение] = УстанавливаемоеЗначение;
		
	КонецЦикла;
	
КонецПроцедуры

// Изменяет состав колонок источника данных в зависимости от назначения показателя
//
// Параметры
//		ИсточникДанных - ТаблицаЗначений - содержит данные расчета показателя
//		ВариантАнализа - Ссылка на вариант анализа
//
Процедура ПодготовитьИсточник(ИсточникДанных)
	
	//ВидыЦелевыхЗначенийВариантовАнализа	= Перечисления.ркВидыЦелевыхЗначенийВариантовАнализа;	
	//КолонкиИсточникаДанных				= ИсточникДанных.Данные.Колонки;
	//ДанныеИсточника						= ИсточникДанных.Данные;
	//ДатаПоследнегоЗначения				= ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения;
	//ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	//
	//ТипыАнализа	= Перечисления.ркТипыАнализаПоказателей;
	//ТипАнализа	= ВариантАнализа.ТипАнализа;
	//
	//Если ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение ИЛИ ИсточникДанных.ДляТаблицы Тогда
	//	
	//	// Удалим колонки, которые не нужны при покомпонентном сравнении
	//	КолонкиКУдалению = Новый Массив;
	//	КоличествоКолонок = КолонкиИсточникаДанных.Количество();
	//	Для Каждого КолонкаИсточникаДанных Из КолонкиИсточникаДанных Цикл 
	//		ИмяКолонки = КолонкаИсточникаДанных.Имя;
	//		Если НЕ ИмяКолонки = ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа И НЕ ИмяКолонки = ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа Тогда
	//			КолонкиКУдалению.Добавить(ИмяКолонки);
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	Для Каждого КолонкаКУдалению Из КолонкиКУдалению Цикл 
	//		КолонкиИсточникаДанных.Удалить(КолонкаКУдалению);
	//	КонецЦикла;
	//	
	//ИначеЕсли ТипАнализа = ТипыАнализа.ДинамикаИзменения Тогда
	//	
	//	ВидЦелевогоЗначения = ПолучитьВидЦелевогоЗначения(ДатаПоследнегоЗначения, ВариантАнализа);
	//	
	//	Если ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Значение Тогда
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМаксимум");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМинимум");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//	ИначеЕсли ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Диапазон Тогда
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//	ИначеЕсли ВидЦелевогоЗначения = Неопределено Тогда 
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМаксимум");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМинимум");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеНегативноеОтклонение");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеПозитивноеОтклонение");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ГраничноеНегативноеОтклонение");
	//	Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//		КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//		
	//	КонецЕсли;
	//	
	//	УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ГраничноеПозитивноеОтклонение");
	//	Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//		КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//		
	//	КонецЕсли;
	//	
	//	Если ВариантАнализа.ТипДиаграммы <> Перечисления.ркТипыДиаграммПоказателей.Гистограмма
	//		И ВариантАнализа.ТипДиаграммы <> Перечисления.ркТипыДиаграммПоказателей.ГистограммаОбъемная Тогда 
	//		// Добавим серию "Маркер последнего значения"
	//		КолонкиИсточникаДанных.Добавить("МаркерПоследнегоЗначения",,"Последнее значение");
	//		ДанныеИсточника.ЗаполнитьЗначения(ПолучитьБазовоеЗначениеДляДиаграмм(), "МаркерПоследнегоЗначения");
	//		
	//		СтрокаСПоследнимЗначением = ДанныеИсточника.Найти(ДатаПоследнегоЗначения, "Период");
	//		СтрокаСПоследнимЗначением.МаркерПоследнегоЗначения = СтрокаСПоследнимЗначением[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа];
	//		
	//	КонецЕсли;
	//	
	//ИначеЕсли ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
	//	ВидЦелевогоЗначения = ПолучитьВидЦелевогоЗначения(ДатаПоследнегоЗначения, ВариантАнализа);
	//	
	//	Если ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Значение Тогда
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМаксимум");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМинимум");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//	ИначеЕсли ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Диапазон Тогда
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//	Иначе
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМаксимум");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМинимум");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ГраничноеПозитивноеОтклонение");
	//	Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//		КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//		
	//	КонецЕсли;
	//	
	//	УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ГраничноеНегативноеОтклонение");
	//	Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//		КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//		
	//	КонецЕсли;
	//	
	//	// Для измерительной диаграммы оставим только последнее фактическое значение
	//	ОтборПоДате = Новый Структура(НСтр("ru='Период'"), НачалоДня(ДатаПоследнегоЗначения));
	//	МассивСтрок = ДанныеИсточника.НайтиСтроки(ОтборПоДате);
	//	ИсточникДанных.Данные = ДанныеИсточника.Скопировать(МассивСтрок);
	//	
	//	// Перенесем отдельные значения в структуру источника
	//	КолонкиИсточникаДанных = ИсточникДанных.Данные.Колонки;
	//	
	//	УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеНегативноеОтклонение");
	//	Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//		КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//		
	//	КонецЕсли;
	//	
	//	УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеПозитивноеОтклонение");
	//	Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//		КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//		
	//	КонецЕсли;
	//	
	//	Если ВариантАнализа.РассчитыватьПрогноз Тогда
	//		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("Прогноз");
	//		Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
	//	Если НЕ УдаляемаяКолонка = Неопределено Тогда
	//		КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
	//		
	//	КонецЕсли;
	//	
	//Иначе 
	//	
	//	// Для сравнения с прошлыми периодами перезаполним данные
	//	// на основании текущих и предыдущих значений
	//	ДанныеДляСравненияПериодов = Новый ТаблицаЗначений;
	//	КолонкиДанных = ДанныеДляСравненияПериодов.Колонки;
	//	
	//	КолонкиДанных.Добавить(НСтр("ru='ПериодСравнения'"),, НСтр("ru='Период сравнения'"));
	//	КолонкиДанных.Добавить(ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа, ркОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3), ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаПредставление);
	//	КолонкиДанных.Добавить("ЦелевоеЗначение", ркОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3), НСтр("ru='Целевое значение'"));
	//	//КолонкиДанных.Добавить("ПриведенноеГраничноеПозитивноеОтклонение", ркОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3), НСтр("ru='Приведенное граничное позитивное отклонение'"));
	//	//КолонкиДанных.Добавить("ПриведенноеГраничноеНегативноеОтклонение", ркОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,3), НСтр("ru='Приведенное граничное негативное отклонение'"));
	//	КолонкиДанных.Добавить("ПриведенноеГраничноеПозитивноеОтклонение");
	//	КолонкиДанных.Добавить("ПриведенноеГраничноеНегативноеОтклонение");
	//	
	//	//СтрокаПрошлогоПериода = ДанныеДляСравненияПериодов.Добавить();
	//	//ПредставлениеПрошлогоПериода = ПредставлениеСтандартногоПериода(ИсточникДанных.ВариантАнализа.ПериодСравнения.Получить(), Ложь);
	//	//СтрокаПрошлогоПериода.ПериодСравнения = НСтр("ru='Прошлый'") + " " + ПредставлениеПрошлогоПериода; 
	//	//СтрокаПрошлогоПериода[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа] = ИсточникДанных.СвойстваДанныхПоПериодамСравнения.ОбщийИтог;
	//	//СтрокаПрошлогоПериода.ЦелевоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодамСравнения.ЦелевоеЗначение; 
	//	//СтрокаПрошлогоПериода.ПриведенноеГраничноеПозитивноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодамСравнения.ПриведенноеГраничноеПозитивноеОтклонение; 
	//	//СтрокаПрошлогоПериода.ПриведенноеГраничноеНегативноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодамСравнения.ПриведенноеГраничноеНегативноеОтклонение; 
	//	
	//	//СтрокаТекущегоПериода = ДанныеДляСравненияПериодов.Добавить();
	//	//ПредставлениеТекущегоПериода = ПредставлениеСтандартногоПериода(ИсточникДанных.ВариантАнализа.ПериодАнализа.Получить(), Ложь);
	//	//СтрокаТекущегоПериода.ПериодСравнения = НСтр("ru='Текущий'") + " " + ПредставлениеТекущегоПериода; 
	//	//СтрокаТекущегоПериода[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа] = ИсточникДанных.СвойстваДанныхПоПериодам.ОбщийИтог;
	//	//СтрокаТекущегоПериода.ЦелевоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение; 
	//	//СтрокаТекущегоПериода.ПриведенноеГраничноеПозитивноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение; 
	//	//СтрокаТекущегоПериода.ПриведенноеГраничноеНегативноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение; 
	//	
	//	Если ВариантАнализа.РассчитыватьПрогноз И НЕ ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Пустой Тогда 
	//		//ДатаПрогноза = НачалоДня(ДатаСоСмещением(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа.ПериодичностьКонтроля, 1));
	//		//
	//		//СтрокаПрогнозногоПериода = ДанныеДляСравненияПериодов.Добавить();
	//		//СтрокаПрогнозногоПериода.ПериодСравнения = НСтр("ru='Прогноз'") + " " + НСтр("ru='на '") + Формат(ДатаПрогноза, "Л=ru; ДФ=dd.MM.yy"); 
	//		//СтрокаПрогнозногоПериода[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа] = ИсточникДанных.Данные.Найти(ДатаПрогноза, "Период").Прогноз; 
	//		//СтрокаПрогнозногоПериода.ЦелевоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение; 
	//		//СтрокаПрогнозногоПериода.ПриведенноеГраничноеПозитивноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение; 
	//		//СтрокаПрогнозногоПериода.ПриведенноеГраничноеНегативноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение; 
	//		
	//	КонецЕсли;
	//	
	//	ИсточникДанных.Данные = ДанныеДляСравненияПериодов;
		
	//КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Модуль содержит методы формирования управленческой отчетности
///////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Персональные настройки монитора целевых показателей.

////////////////////////////////////////////////////////////////////////////////
// Регламентированный расчет источников данных целевых показателей.

// Выполняет расчет источников данных, доступных хотя бы одному пользователю.
// Вызывается из регламентного задания "РасчетИсточниковДанныхВариантовАнализа".
//
Процедура РасчетИсточниковДанныхВариантовАнализа() Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	                  
	// Получим все настроенные варианты анализа с учетом пользовательских настроек
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Пользователи.Ссылка,
	//               |	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	//               |ИЗ
	//               |	Справочник.Пользователи КАК Пользователи";
	//ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
	//
	//ТаблицаПользовательскихВариантовАнализа = Новый ТаблицаЗначений;
	//
	//МассивТипов = Новый Массив;
	//МассивТипов.Добавить(Тип("СправочникСсылка.ркВариантыАнализаЦелевыхПоказателей"));
	//ОписаниеТипаВариантаАнализа = Новый ОписаниеТипов(МассивТипов);
	//
	//МассивТипов.Очистить();
	//МассивТипов.Добавить(Тип("ПеречислениеСсылка.ркВариантыОтображенияВариантовАнализа"));
	//ОписаниеТипаВариантаОтображения = Новый ОписаниеТипов(МассивТипов);
	//
	//ТаблицаПользовательскихВариантовАнализа.Колонки.Добавить("ВариантАнализа", ОписаниеТипаВариантаАнализа);
	//ТаблицаПользовательскихВариантовАнализа.Колонки.Добавить("ВариантОтображения", ОписаниеТипаВариантаОтображения);
	//
	//Для Каждого Пользователь Из ТаблицаПользователей Цикл 
	//	
	//	ПользовательИнформационнойБазы = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
	//	Если Не ПользовательИнформационнойБазы = Неопределено Тогда
	//		ИмяПользователяТаблицы = ПользовательИнформационнойБазы.Имя;
	//		
	//		ХранилищеВариантовАнализаПользователя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "ВариантыАнализаПользовательскиеНастройки",, ИмяПользователяТаблицы);
	//		Если НЕ ХранилищеВариантовАнализаПользователя = Неопределено Тогда
	//			
	//			ВариантыАнализаПользователя = ХранилищеВариантовАнализаПользователя.Получить();
	//			Для Каждого ВариантАнализаПользователя Из ВариантыАнализаПользователя Цикл 
	//				НовыйВариантВТаблице = ТаблицаПользовательскихВариантовАнализа.Добавить();
	//				НовыйВариантВТаблице.ВариантАнализа = ВариантАнализаПользователя.ВариантАнализа;
	//				НовыйВариантВТаблице.ВариантОтображения = ВариантАнализаПользователя.ВариантОтображения;
	//				
	//			КонецЦикла;
	//			
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//ТаблицаПользовательскихВариантовАнализа.Свернуть("ВариантАнализа, ВариантОтображения");
	//
	//Запрос.УстановитьПараметр("ВариантыАнализа", ТаблицаПользовательскихВариантовАнализа);
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ПользовательскиеНастройкиВариантовАнализа.ВариантАнализа,
	//               |	ПользовательскиеНастройкиВариантовАнализа.ВариантОтображения
	//               |ПОМЕСТИТЬ ПользовательскиеНастройкиВариантовАнализа
	//               |ИЗ
	//               |	&ВариантыАнализа КАК ПользовательскиеНастройкиВариантовАнализа
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ВариантыАнализа.ВариантАнализа,
	//               |	ВариантыАнализа.ВариантОтображения
	//               |ИЗ
	//               |	(ВЫБРАТЬ
	//               |		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа,
	//               |		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.ВариантОтображения КАК ВариантОтображения
	//               |	ИЗ
	//               |		Справочник.ркВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
	//               |	ГДЕ
	//               |		(НЕ ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.ПометкаУдаления)
	//	           |		И (НЕ ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.Виджет)
	//               |	
	//               |	ОБЪЕДИНИТЬ ВСЕ
	//               |	
	//               |	ВЫБРАТЬ
	//               |		ПользовательскиеНастройкиВариантовАнализа.ВариантАнализа,
	//               |		ПользовательскиеНастройкиВариантовАнализа.ВариантОтображения
	//               |	ИЗ
	//               |		ПользовательскиеНастройкиВариантовАнализа КАК ПользовательскиеНастройкиВариантовАнализа) КАК ВариантыАнализа
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ВариантыАнализа.ВариантАнализа,
	//               |	ВариантыАнализа.ВариантОтображения";
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВариантыАнализа.ВариантАнализа,
	               |	ВариантыАнализа.ВариантОтображения
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВариантыАнализаЦелевыхПоказателей.Ссылка КАК ВариантАнализа,
	               |		ЗНАЧЕНИЕ(Перечисление.ркВариантыОтображенияВариантовАнализа.Диаграмма) КАК ВариантОтображения
	               |	ИЗ
	               |		Справочник.ркВариантыАнализаЦелевыхПоказателей КАК ВариантыАнализаЦелевыхПоказателей
	               |	ГДЕ
	               |		НЕ ВариантыАнализаЦелевыхПоказателей.Ссылка.ПометкаУдаления
	               |		И НЕ ВариантыАнализаЦелевыхПоказателей.Ссылка.Владелец.Виджет) КАК ВариантыАнализа
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВариантыАнализа.ВариантАнализа,
	               |	ВариантыАнализа.ВариантОтображения";	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаВариантовАнализа = РезультатЗапроса.Выгрузить();
	Для Каждого ТекущийВариантАнализа Из ТаблицаВариантовАнализа Цикл 
		
		Если Не ЗначениеЗаполнено(ТекущийВариантАнализа.ВариантАнализа.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучитьИсточникДанныхВариантаАнализа(ТекущийВариантАнализа.ВариантАнализа, ТекущийВариантАнализа.ВариантОтображения, Истина);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Выполняет расчет виджетов источников данных, доступных хотя бы одному пользователю.
// Вызывается из регламентного задания "РасчетИсточниковДанныхВариантовАнализа".
//
Процедура РасчетВиджетовИсточниковДанныхВариантовАнализа() Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	// Получим все настроенные варианты анализа с учетом пользовательских настроек
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВариантыАнализа.Пользователь,
	               |	ВариантыАнализа.ВариантАнализа
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Пользователь КАК Пользователь,
	               |		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа
	               |	ИЗ
	               |		Справочник.ркВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
	               |	ГДЕ
	               |		НЕ ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.ПометкаУдаления
	               |		И ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец.Виджет) КАК ВариантыАнализа
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВариантыАнализа.ВариантАнализа,
	               |	ВариантыАнализа.Пользователь";
						  
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаВариантовАнализа = РезультатЗапроса.Выгрузить();
	Для Каждого ТекущийВариантАнализа Из ТаблицаВариантовАнализа Цикл 
		
		ПолучитьИсточникДанныхВариантаАнализаВиджета(ТекущийВариантАнализа.ВариантАнализа, ТекущийВариантАнализа.Пользователь, Истина);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Первоначальное заполнение объектов подсистемы мониторинга.

// Процедура заполняет справочники "Категории целей", "Структура целей" и "Варианты анализа целевых показаталей"
// по заданным шаблонам при условии, что справочники еще не заполнялись.
// Процедура используется только при обновлении информационной базы и первом запуске.
//
Процедура ЗаполнитьСтруктуруЦелейИВариантыАнализа() Экспорт
	//
	//Если СправочникиУправленияПоЦелямЗаполнялись() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//НачатьТранзакцию();
	//
	//// Загрузим категории целей по шаблону
	//КатегорииЦелейXML = Справочники.КатегорииЦелей.ПолучитьМакет("БазовыеКатегорииЦелей").ПолучитьТекст();
	//
	//КатегорииЦелейТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КатегорииЦелейXML).Данные;
	//
	//КэшКатегорий = Новый Соответствие;
	//
	//Для Каждого ЗаписьКЦ Из КатегорииЦелейТаблица Цикл
	//	НоваяКатегория = Справочники.КатегорииЦелей.СоздатьЭлемент();
	//	НоваяКатегория.Наименование					= ЗаписьКЦ.Наименование;
	//	НоваяКатегория.РеквизитДопУпорядочивания	= ЗаписьКЦ.РеквизитДопУпорядочивания;
	//	
	//	НоваяКатегория.Записать();
	//	
	//	КэшКатегорий.Вставить(ЗаписьКЦ.ID, НоваяКатегория.Ссылка);
	//	
	//КонецЦикла;
	//
	//// Заполним структуру целей по шаблону
	//СтруктураЦелейXML = Справочники.ркСтруктураЦелей.ПолучитьМакет("БазоваяСтруктураЦелей").ПолучитьТекст();
	//
	//СтруктураЦелейТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(СтруктураЦелейXML).Данные;
	//
	//КэшЦелей = Новый Соответствие;
	//
	//Для Каждого ЗаписьСЦ Из СтруктураЦелейТаблица Цикл
	//	НоваяЦель = Справочники.ркСтруктураЦелей.СоздатьЭлемент();
	//	
	//	ЗаполнитьЗначенияСвойств(НоваяЦель, ЗаписьСЦ, , "ЦельИзмеримая, ЦелевойТренд");
	//	
	//	Если НЕ ПустаяСтрока(ЗаписьСЦ.ParentID) Тогда
	//		НоваяЦель.Родитель = КэшЦелей[ЗаписьСЦ.ParentID];
	//	КонецЕсли;
	//	Если НЕ ПустаяСтрока(ЗаписьСЦ.CategoryID) Тогда
	//		НоваяЦель.КатегорияЦели = КэшКатегорий[ЗаписьСЦ.CategoryID];
	//	КонецЕсли;
	//	Если НЕ ПустаяСтрока(ЗаписьСЦ.ЦельИзмеримая) Тогда
	//		НоваяЦель.ЦельИзмеримая = Булево(ЗаписьСЦ.ЦельИзмеримая);
	//	КонецЕсли;
	//	Если НЕ ПустаяСтрока(ЗаписьСЦ.ЦелевойТренд) Тогда
	//		НоваяЦель.ЦелевойТренд = Перечисления.ркВидыЦелевыхТрендовПоказателей[ЗаписьСЦ.ЦелевойТренд];
	//	КонецЕсли;
	//	
	//	НоваяЦель.Записать();
	//	
	//	// Формирование настроек шаблона расчета
	//	Если ЗначениеЗаполнено(НоваяЦель.СхемаКомпоновкиДанных) Тогда
	//		ОписаниеИСхемаКомпоновкиДанных = Справочники.ркСтруктураЦелей.ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(НоваяЦель.Ссылка, НоваяЦель.СхемаКомпоновкиДанных);
	//		СхемаКомпоновкиДанных = ОписаниеИСхемаКомпоновкиДанных.СхемаКомпоновкиДанных;
	//		
	//		Если ОписаниеИСхемаКомпоновкиДанных.НастройкиКомпоновкиДанных = Неопределено Тогда
	//			НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	//		Иначе
	//			НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиКомпоновкиДанных;
	//		КонецЕсли;
	//		
	//		ИскомыйПараметр = ркКомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиКомпоновкиДанных, "ВалютаРасчета");
	//		
	//		Если НЕ ИскомыйПараметр = Неопределено Тогда
	//			ВалютаПоУмолчанию = ПолучитьВалютуПоУмолчанию();
	//			ркКомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКомпоновкиДанных, ИскомыйПараметр.Параметр, ВалютаПоУмолчанию);
	//			
	//			НоваяЦель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
	//			
	//			НоваяЦель.Записать();
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	КэшЦелей.Вставить(ЗаписьСЦ.ID, НоваяЦель.Ссылка);
	//	
	//КонецЦикла;
	//
	//// Создадим базовые варианты анализа
	//БазовыеСвойстваXML = Справочники.ркВариантыАнализаЦелевыхПоказателей.ПолучитьМакет("БазовыеСвойстваВариантовАнализа").ПолучитьТекст();
	//БазовыеСвойстваТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(БазовыеСвойстваXML).Данные;
	//
	//ВариантыОтчетовXML = Справочники.ркВариантыАнализаЦелевыхПоказателей.ПолучитьМакет("ОтчетыДляРасшифровкиВариантовАнализа").ПолучитьТекст();
	//ВариантыОтчетовТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ВариантыОтчетовXML).Данные;
	//
	//// Получим общие свойства вариантов анализа
	//СвойстваВАЦП = Новый Структура("ПериодАнализа, 
	//								|ПериодСравнения, 
	//								|ПериодичностьКонтроля, 
	//								|МетодРасчетаЗначений, 
	//								|ТочностьРасчетаДробнойЧасти,
	//								|ГлубинаАнализаПрогноза,
	//								|ГоризонтПрогноза");
	//								
	//СвойстваВАЦП.ГлубинаАнализаПрогноза = 30;
	//СвойстваВАЦП.ГоризонтПрогноза = 1;
	//
	//НастройкиОформления = Справочники.ркВариантыАнализаЦелевыхПоказателей.НастройкиОформленияПоУмолчанию();
	//НастройкиОформленияПокомпонентногоСравнения = Справочники.ркВариантыАнализаЦелевыхПоказателей.НастройкиОформленияПоУмолчанию(Истина);

	//СоответствиеТиповСравненияИТиповДиаграмм = ПолучитьТаблицуСоответствиТиповАнализаИТиповДиаграмм();
	//
	//Для Каждого ЦельИзКэшаЦелей Из КэшЦелей Цикл 
	//	
	//	Если НЕ ЦельИзКэшаЦелей.Значение.ЦельИзмеримая Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ПользовательскиеНастройкиПоУмолчанию = Справочники.ркСтруктураЦелей.ПользовательскиеНастройкиПоУмолчанию(ЦельИзКэшаЦелей.Значение);
	//
	//	ОтборСвойств = Новый Структура("OwnerID", ЦельИзКэшаЦелей.Ключ);
	//	ИскомыеБазовыеСвойства = БазовыеСвойстваТаблица.НайтиСтроки(ОтборСвойств);
	//	
	//	Если ИскомыеБазовыеСвойства.Количество() > 0 Тогда
	//		НовыйПериодАнализа = Новый СтандартныйПериод;
	//		НовыйПериодАнализа.Вариант = ВариантСтандартногоПериода[ИскомыеБазовыеСвойства[0].ПериодАнализа];
	//		СвойстваВАЦП.Вставить("ПериодАнализа", Новый ХранилищеЗначения(НовыйПериодАнализа));
	//		
	//		НовыйПериодСравнения = Новый СтандартныйПериод;
	//		НовыйПериодСравнения.Вариант = ВариантСтандартногоПериода[ИскомыеБазовыеСвойства[0].ПериодСравнения];
	//		СвойстваВАЦП.Вставить("ПериодСравнения", Новый ХранилищеЗначения(НовыйПериодСравнения));
	//		
	//		СвойстваВАЦП.Вставить("ПериодичностьКонтроля", Перечисления.ркПериодичность[ИскомыеБазовыеСвойства[0].ПериодичностьКонтроля]);
	//		СвойстваВАЦП.Вставить("МетодРасчетаЗначений", Перечисления.ркМетодыРасчетаВариантовАнализаЦелевыхПоказателей[ИскомыеБазовыеСвойства[0].МетодРасчетаЗначений]);
	//		СвойстваВАЦП.Вставить("ТочностьРасчетаДробнойЧасти", Число(ИскомыеБазовыеСвойства[0].ТочностьРасчетаДробнойЧасти));
	//		
	//	КонецЕсли;
	//	
	//	ДоступныеЗначенияАнализа = Справочники.ркСтруктураЦелей.ДоступныеЗначенияАнализа(ЦельИзКэшаЦелей.Значение);
	//	
	//	Если ДоступныеЗначенияАнализа.Количество() = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	// Вариант анализа динамики
	//	НовыйВариантАнализа = Справочники.ркВариантыАнализаЦелевыхПоказателей.СоздатьЭлемент();
	//	НовыйВариантАнализа.Владелец = ЦельИзКэшаЦелей.Значение;
	//	
	//	НовыйВариантАнализа.ТипАнализа = Перечисления.ркТипыАнализаПоказателей.ДинамикаИзменения;
	//	НовыйВариантАнализа.ТипДиаграммы = Перечисления.ркТипыДиаграммПоказателей.График;
	//	
	//	НовыйВариантАнализа.ЗначениеАнализа = Новый ХранилищеЗначения(ДоступныеЗначенияАнализа[0].Значение);
	//	НовыйВариантАнализа.КратностьЗначений = Перечисления.ркВидыПредставленияЧисел.БезИзменений;
	//	
	//	НовыйВариантАнализа.ПериодАктуальностиРасчета = 1;
	//	НовыйВариантАнализа.ВидПериодаАктуальностиРасчета = Перечисления.ркВидыПериодовАктуальностиРасчета.Час;
	//	
	//	ЗаполнитьЗначенияСвойств(НовыйВариантАнализа, СвойстваВАЦП);
	//	ЗаполнитьЗначенияСвойств(НовыйВариантАнализа, НастройкиОформления);
	//	
	//	// Заполним наименование по шаблону
	//	ОтборПоТипуСравнения = Новый Структура("ТипАнализа", НовыйВариантАнализа.ТипАнализа);
	//	НайденныеПараметры = СоответствиеТиповСравненияИТиповДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
	//	ОбъектАнализаДоступен = НайденныеПараметры[0].ОбъектАнализаДоступен;

	//	НовыйВариантАнализа.Наименование = Строка(ДоступныеЗначенияАнализа[0].Представление)
	//							  			+ ", " + Строка(НовыйВариантАнализа.МетодРасчетаЗначений);
	//							  
	//	НовыйВариантАнализа.ХранилищеПользовательскихНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПользовательскиеНастройкиПоУмолчанию);
	//	
	//	// Заполним отчеты для расшифровки
	//	ОтборОтчетов = Новый Структура("OwnerID", ЦельИзКэшаЦелей.Ключ);
	//	ДобавляемыеВариантыОтчетов = ВариантыОтчетовТаблица.НайтиСтроки(ОтборОтчетов);
	//	
	//	Если ДобавляемыеВариантыОтчетов.Количество() > 0 Тогда
	//		Для Каждого ДобавляемыйВариантОтчета Из ДобавляемыеВариантыОтчетов Цикл
	//			
	//			ВариантОтчета = ПолучитьВариантОтчетаПоКлючам(ДобавляемыйВариантОтчета.КлючОбъекта, ДобавляемыйВариантОтчета.КлючВарианта);
	//			
	//			Если НЕ ВариантОтчета = Неопределено Тогда
	//				НовыйОтчет = НовыйВариантАнализа.ОтчетыДляРасшифровки.Добавить();
	//				НовыйОтчет.ВариантОтчета = ВариантОтчета;
	//				
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//	
	//	НовыйВариантАнализа.Записать();
	//	
	//	// Вариант сравнения с прошлым периодом
	//	НовыйВариантАнализа = Справочники.ркВариантыАнализаЦелевыхПоказателей.СоздатьЭлемент();
	//	НовыйВариантАнализа.Владелец = ЦельИзКэшаЦелей.Значение;
	//	
	//	НовыйВариантАнализа.ТипАнализа = Перечисления.ркТипыАнализаПоказателей.СравнениеСПрошлымПериодом;
	//	НовыйВариантАнализа.ТипДиаграммы = Перечисления.ркТипыДиаграммПоказателей.Гистограмма;
	//	
	//	НовыйВариантАнализа.ЗначениеАнализа = Новый ХранилищеЗначения(ДоступныеЗначенияАнализа[0].Значение);
	//	НовыйВариантАнализа.КратностьЗначений = Перечисления.ркВидыПредставленияЧисел.БезИзменений;
	//	
	//	НовыйВариантАнализа.ПериодАктуальностиРасчета = 1;
	//	НовыйВариантАнализа.ВидПериодаАктуальностиРасчета = Перечисления.ркВидыПериодовАктуальностиРасчета.Час;
	//	
	//	ЗаполнитьЗначенияСвойств(НовыйВариантАнализа, СвойстваВАЦП);
	//	ЗаполнитьЗначенияСвойств(НовыйВариантАнализа, НастройкиОформления);
	//	
	//	// Заполним наименование по шаблону
	//	ОтборПоТипуСравнения = Новый Структура("ТипАнализа", НовыйВариантАнализа.ТипАнализа);
	//	НайденныеПараметры = СоответствиеТиповСравненияИТиповДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
	//	ОбъектАнализаДоступен = НайденныеПараметры[0].ОбъектАнализаДоступен;

	//	НовыйВариантАнализа.Наименование = Строка(ДоступныеЗначенияАнализа[0].Представление)
	//							  			+ ", " + Строка(НовыйВариантАнализа.МетодРасчетаЗначений);
	//							  
	//	НовыйВариантАнализа.ХранилищеПользовательскихНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПользовательскиеНастройкиПоУмолчанию);
	//	
	//	// Заполним отчеты для расшифровки
	//	ОтборОтчетов = Новый Структура("OwnerID", ЦельИзКэшаЦелей.Ключ);
	//	ДобавляемыеВариантыОтчетов = ВариантыОтчетовТаблица.НайтиСтроки(ОтборОтчетов);
	//	
	//	Если ДобавляемыеВариантыОтчетов.Количество() > 0 Тогда
	//		Для Каждого ДобавляемыйВариантОтчета Из ДобавляемыеВариантыОтчетов Цикл
	//			
	//			ВариантОтчета = ПолучитьВариантОтчетаПоКлючам(ДобавляемыйВариантОтчета.КлючОбъекта, ДобавляемыйВариантОтчета.КлючВарианта);
	//			
	//			Если НЕ ВариантОтчета = Неопределено Тогда
	//				НовыйОтчет = НовыйВариантАнализа.ОтчетыДляРасшифровки.Добавить();
	//				НовыйОтчет.ВариантОтчета = ВариантОтчета;
	//				
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//	
	//	НовыйВариантАнализа.Записать();
	//	
	//	// Варианты покомпонентного сравнения по доступным вариантам анализа
	//	ДоступныеОбъектыАнализа = Справочники.ркСтруктураЦелей.ДоступныеОбъектыАнализа(ЦельИзКэшаЦелей.Значение);
	//	
	//	Если ДоступныеОбъектыАнализа.Количество() = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Для Каждого ДоступныйОбъектАнализа Из ДоступныеОбъектыАнализа Цикл 
	//		НовыйВариантАнализа = Справочники.ркВариантыАнализаЦелевыхПоказателей.СоздатьЭлемент();
	//		НовыйВариантАнализа.Владелец = ЦельИзКэшаЦелей.Значение;
	//		
	//		НовыйВариантАнализа.ТипАнализа = Перечисления.ркТипыАнализаПоказателей.ПокомпонентноеСравнение;
	//		НовыйВариантАнализа.ТипДиаграммы = Перечисления.ркТипыДиаграммПоказателей.Гистограмма;
	//		
	//		НовыйВариантАнализа.ОбъектАнализа = Новый ХранилищеЗначения(ДоступныйОбъектАнализа.Значение);
	//		НовыйВариантАнализа.ЗначениеАнализа = Новый ХранилищеЗначения(ДоступныеЗначенияАнализа[0].Значение);
	//		НовыйВариантАнализа.КратностьЗначений = Перечисления.ркВидыПредставленияЧисел.БезИзменений;
	//		
	//		НовыйВариантАнализа.ПериодАктуальностиРасчета = 1;
	//		НовыйВариантАнализа.ВидПериодаАктуальностиРасчета = Перечисления.ркВидыПериодовАктуальностиРасчета.Час;
	//		
	//		ЗаполнитьЗначенияСвойств(НовыйВариантАнализа, СвойстваВАЦП);
	//		ЗаполнитьЗначенияСвойств(НовыйВариантАнализа, НастройкиОформленияПокомпонентногоСравнения);
	//		
	//		// Заполним наименование по шаблону
	//		ОтборПоТипуСравнения = Новый Структура("ТипАнализа", НовыйВариантАнализа.ТипАнализа);
	//		НайденныеПараметры = СоответствиеТиповСравненияИТиповДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
	//		ОбъектАнализаДоступен = НайденныеПараметры[0].ОбъектАнализаДоступен;

	//		НовыйВариантАнализа.Наименование =  Строка(ДоступныеЗначенияАнализа[0].Представление)
	//								  			+ ?(ОбъектАнализаДоступен, " " + НСтр("ru='по'")+ " " + Строка(ДоступныйОбъектАнализа.Представление), "")
	//								  			+ ", " + Строка(НовыйВариантАнализа.МетодРасчетаЗначений);
	//								  
	//		НовыйВариантАнализа.ХранилищеПользовательскихНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПользовательскиеНастройкиПоУмолчанию);
	//		
	//		// Заполним отчеты для расшифровки
	//		ОтборОтчетов = Новый Структура("OwnerID", ЦельИзКэшаЦелей.Ключ);
	//		ДобавляемыеВариантыОтчетов = ВариантыОтчетовТаблица.НайтиСтроки(ОтборОтчетов);
	//		
	//		Если ДобавляемыеВариантыОтчетов.Количество() > 0 Тогда
	//			Для Каждого ДобавляемыйВариантОтчета Из ДобавляемыеВариантыОтчетов Цикл
	//				
	//				ВариантОтчета = ПолучитьВариантОтчетаПоКлючам(ДобавляемыйВариантОтчета.КлючОбъекта, ДобавляемыйВариантОтчета.КлючВарианта);
	//				
	//				Если НЕ ВариантОтчета = Неопределено Тогда
	//					НовыйОтчет = НовыйВариантАнализа.ОтчетыДляРасшифровки.Добавить();
	//					НовыйОтчет.ВариантОтчета = ВариантОтчета;
	//					
	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЕсли;
	//		
	//		НовыйВариантАнализа.Записать();
	//		
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	//ЗафиксироватьТранзакцию();
	//
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Анализ взаимосвязанных целевых показателей.

// Возвращает набор источников данных взаимосвязанных вариантов анализа
//
// Параметры:
//	ВидПоиска - ПеречислениеСсылка.ВидыПоискаСвязанныхПоказателей - способ поиска связей
//	ВариантАнализа - СправочникСсылка.ркВариантыАнализаЦелевыхПоказателей - вариант анализа, для которого ищуться взаимосвязанные
//	ОтборСтатус - Число - характеризует статус или набор статусов
//	АдресаДинамическихПараметров - ТаблицаЗначений - содержит варианты анализа и адреса их дин. параметров
//
// Возвращаемое значение:
//	Структура - содержит набор источников данных и обобщенную информацию об источниках взаимосвязанных показателей
//
Функция ПолучитьВзаимосвязанныеВариантыАнализа(ВидПоиска, ВариантАнализа, ОтборСтатус, АдресаДинамическихПараметров) Экспорт
	
	//ПолученныйСоставМонитора			= Новый Структура("НаборИсточниковДанных, СтатистикаПоСтрокам, Пустой", , , Истина);
	//НаборИсточниковДанных				= Новый ТаблицаЗначений;
	//
	//ВидыПоиска = Перечисления.ВидыПоискаСвязанныхПоказателей;
	//ВариантыОтображенияВариантовАнализа	= Перечисления.ркВариантыОтображенияВариантовАнализа;
	//ЗоныВнимания						= Перечисления.ркЗоныВниманияВариантовАнализа;
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	//Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	//Запрос.Текст = ТекстЗапросаПоСтруктуреДоступныхВариантовАнализа();
	//
	//РезультатПакетаЗапросов = Запрос.ВыполнитьПакет();
	//
	//Если ВидПоиска = ВидыПоиска.ВзаимосвязанныеПоказатели
	//	И (НЕ РезультатПакетаЗапросов[1].Пустой() ИЛИ НЕ РезультатПакетаЗапросов[2].Пустой()) Тогда
	//	
	//	Если НЕ РезультатПакетаЗапросов[1].Пустой() Тогда
	//		НаборИсточниковДанных = РезультатПакетаЗапросов[1].Выгрузить();
	//		
	//	КонецЕсли;
	//	
	//	Если НЕ РезультатПакетаЗапросов[2].Пустой() Тогда
	//		Если НаборИсточниковДанных.Количество() = 0 Тогда
	//			НаборИсточниковДанных = РезультатПакетаЗапросов[2].Выгрузить();
	//			
	//		Иначе
	//			ВыборкаВариантов = РезультатПакетаЗапросов[2].Выбрать();
	//			
	//			Пока ВыборкаВариантов.Следующий() Цикл 
	//				НоваяСтрока = НаборИсточниковДанных.Добавить();
	//				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаВариантов);
	//				
	//			КонецЦикла;
	//			
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//ИначеЕсли ВидПоиска = ВидыПоиска.ЗависимыеПоказатели И НЕ РезультатПакетаЗапросов[1].Пустой() Тогда
	//	Если НЕ РезультатПакетаЗапросов[1].Пустой() Тогда
	//		НаборИсточниковДанных = РезультатПакетаЗапросов[1].Выгрузить();
	//		
	//	КонецЕсли;
	//	
	//ИначеЕсли ВидПоиска = ВидыПоиска.ВлияющиеПоказатели И НЕ РезультатПакетаЗапросов[2].Пустой() Тогда
	//	Если НЕ РезультатПакетаЗапросов[2].Пустой() Тогда
	//		НаборИсточниковДанных = РезультатПакетаЗапросов[2].Выгрузить();
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//Если НЕ РезультатПакетаЗапросов[3].Пустой() Тогда
	//	ВыборкаВариантов = РезультатПакетаЗапросов[3].Выбрать();
	//	
	//	Пока ВыборкаВариантов.Следующий() Цикл 
	//		НоваяСтрока = НаборИсточниковДанных.Добавить();
	//		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаВариантов);
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//
	//// Дополним таблицу служебными колонками
	//НаборИсточниковДанных.Колонки.Добавить("ИсточникДанных");
	//НаборИсточниковДанных.Колонки.Добавить("ЗонаВнимания");
	//НаборИсточниковДанных.Колонки.Добавить("Пустой");
	//НаборИсточниковДанных.Колонки.Добавить("РасчетыНеактуальны");
	//НаборИсточниковДанных.Колонки.Добавить("ОшибкаРасчета");
	//НаборИсточниковДанных.Колонки.Добавить("ПорядокЗоныВнимания");
	//
	//Для Каждого ЭлементНабора Из НаборИсточниковДанных Цикл 
	//	ВариантАнализа = ЭлементНабора.ВариантАнализа;
	//	
	//	// Получим адрес динамических параметров
	//	ОтборПоВариантуАнализа = Новый Структура("ВариантАнализа", ВариантАнализа);
	//	НайденныеСоставМонитора = АдресаДинамическихПараметров.НайтиСтроки(ОтборПоВариантуАнализа);
	//	Если НайденныеСоставМонитора.Количество() > 0 Тогда
	//		АдресДинамическихПараметров = НайденныеСоставМонитора[0].АдресДинамическихПараметров;
	//		
	//		Если НЕ ПустаяСтрока(АдресДинамическихПараметров) Тогда
	//			ДинамическиеПараметры = ПолучитьИзВременногоХранилища(АдресДинамическихПараметров);
	//			
	//			ИсточникДанныхВариантаАнализа = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, ЭлементНабора.ВариантОтображения, , ДинамическиеПараметры);
	//		Иначе
	//			ИсточникДанныхВариантаАнализа = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, ЭлементНабора.ВариантОтображения);
	//			
	//		КонецЕсли;
	//	Иначе
	//	
	//		ИсточникДанныхВариантаАнализа = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, ЭлементНабора.ВариантОтображения);
	//		
	//	КонецЕсли;
	//	
	//	// Получим данные варианта анализа
	//	ЭлементНабора.ИсточникДанных = Новый ХранилищеЗначения(ИсточникДанныхВариантаАнализа);
	//	
	//	ЭлементНабора.Пустой = ИсточникДанныхВариантаАнализа.Пустой;
	//	ЭлементНабора.ОшибкаРасчета = ИсточникДанныхВариантаАнализа.ОшибкаРасчета;
	//	// Получим зону внимания
	//	ЭлементНабора.ЗонаВнимания = ИсточникДанныхВариантаАнализа.СвойстваЗоныАнализаИТренда.ЗонаВнимания;
	//	ЭлементНабора.ПорядокЗоныВнимания = ИсточникДанныхВариантаАнализа.СвойстваЗоныАнализаИТренда.ПорядокЗоныВнимания;
	//	
	//КонецЦикла;
	//
	//// Установим отбор
	//Если ОтборСтатус = 1 Тогда
	//	
	//	ОтборКритических = Новый Структура("ЗонаВнимания", ЗоныВнимания.КритическоеСостояние);
	//	НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборКритических);
	//	
	//ИначеЕсли ОтборСтатус = 2 Тогда
	//	
	//	ОтборВажных = Новый Структура("ЗонаВнимания", ЗоныВнимания.Важно);
	//	НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборВажных);
	//	
	//ИначеЕсли ОтборСтатус = 3 Тогда
	//	
	//	ОтборКСведению = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
	//	ЭлементыМонитораКУдалению = НаборИсточниковДанных.НайтиСтроки(ОтборКСведению);
	//	
	//	Для Каждого ЭлементМонитораКУдалению Из ЭлементыМонитораКУдалению Цикл 
	//		
	//		НаборИсточниковДанных.Удалить(ЭлементМонитораКУдалению);
	//		
	//	КонецЦикла;
	//	
	//	ОтборПоРассчитаннымСОшибками = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
	//	ЭлементыМонитораКУдалению = НаборИсточниковДанных.НайтиСтроки(ОтборПоРассчитаннымСОшибками);
	//	
	//	Для Каждого ЭлементМонитораКУдалению Из ЭлементыМонитораКУдалению Цикл 
	//		
	//		НаборИсточниковДанных.Удалить(ЭлементМонитораКУдалению);
	//		
	//	КонецЦикла;
	//	
	//ИначеЕсли ОтборСтатус = 4 Тогда
	//	
	//	ОтборКСведению = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
	//	НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборКСведению);
	//	
	//ИначеЕсли ОтборСтатус = 5 Тогда
	//	
	//	ОтборПоРассчитаннымСОшибками = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
	//	НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборПоРассчитаннымСОшибками);
	//	
	//КонецЕсли;
	//
	//Если НЕ НаборИсточниковДанных.Количество() = 0 Тогда
	//	ПолученныйСоставМонитора.Пустой = Ложь;
	//	
	//КонецЕсли;
	//
	//ПолученныйСоставМонитора.Вставить("НаборИсточниковДанных", НаборИсточниковДанных);
	//
	//ПолученныйСоставМонитора.Вставить("СтатистикаПоСтрокам", СтатистикаИсточниковДанныхПоЗонамВнимания(НаборИсточниковДанных, Истина));
	//
	//Возврат ПолученныйСоставМонитора;
	
КонецФункции

// Возвращает доступность зависимых/влияющих вариантов анализа для текущего пользователя
// и переданного варианта анализа
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ркВариантыАнализаЦелевыхПоказателей - вариант анализа, для которого ищуться взаимосвязанные
//
// Возвращаемое значение:
//	Структура - содержит признаки доступности
//			ЕстьДоступныеВлияющие - Булево
//			ЕстьДоступныеЗависимые - Булево
//
Функция ПолучитьПараметрыДоступностиАнализаВзаимосвязанных(ВариантАнализа) Экспорт
	
	СтруктураДоступныхВзаимосвязей = Новый Структура("ЕстьДоступныеВлияющие, ЕстьДоступныеЗависимые", Ложь, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	Запрос.Текст = ТекстЗапросаПоСтруктуреДоступныхВариантовАнализа();
	
	РезультатПакетаЗапросов = Запрос.ВыполнитьПакет();
	
	// Есть доступные зависимые измеримые цели и варианты анализа
	СтруктураДоступныхВзаимосвязей.ЕстьДоступныеЗависимые = (НЕ РезультатПакетаЗапросов[1].Пустой());
	
	// Есть доступные влияющие измеримые цели и варианты анализа
	СтруктураДоступныхВзаимосвязей.ЕстьДоступныеВлияющие = (НЕ РезультатПакетаЗапросов[2].Пустой());
	
	Возврат СтруктураДоступныхВзаимосвязей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование печатной формы варианта анализа и сводного отчета.

// Заполняет сводный отчет - титул, содержание, страницы показателей, обозначения 
//
// Параметры
//	ТабличныйДокумент  - ТабличныйДокумент для заполнения
//	ТаблицаВариантовАнализа - таблица ссылок на показатели, которые должны попасть в отчет
//
Функция ЗаполнитьСводныйОтчетДаннымиПоказателя(Знач СводныйОтчет, Знач ВариантыАнализаОтчета, ВариантГруппировки = "ПоГруппам", ПринудительноОбновитьДанные = Ложь) Экспорт
	
	//ПустаяКартинка = Новый Картинка;
	//
	//Если ТипЗнч(ВариантыАнализаОтчета) = Тип("ДанныеФормыКоллекция") Тогда
	//	ВариантыАнализаОтчета = ВариантыАнализаОтчета.Выгрузить(,"ВариантАнализа, АдресДинамическихПараметров");
	//	ВариантыАнализаОтчета.Колонки.ВариантАнализа.Имя = "Значение";
	//КонецЕсли;
	//
	//СводныйОтчет.Очистить();
	//
	//МакетЭлектроннойФормы = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьМакет("МакетЭлектроннойФормыПоказателя");
	//
	//// Показатели
	//Для Каждого ВариантАнализа Из ВариантыАнализаОтчета Цикл 
	//	
	//	Если ТипЗнч(ВариантыАнализаОтчета) = Тип("ТаблицаЗначений") Тогда
	//		Если НЕ ПустаяСтрока(ВариантАнализа.АдресДинамическихПараметров) Тогда
	//			ДинамическиеПараметры = ПолучитьИзВременногоХранилища(ВариантАнализа.АдресДинамическихПараметров);
	//			ИсточникСПараметрами = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа.Значение, Перечисления.ркВариантыОтображенияВариантовАнализа.Диаграмма, ПринудительноОбновитьДанные, ДинамическиеПараметры);
	//			
	//		Иначе
	//			ИсточникСПараметрами = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа.Значение, Перечисления.ркВариантыОтображенияВариантовАнализа.Диаграмма, ПринудительноОбновитьДанные);
	//			
	//		КонецЕсли;
	//	Иначе	
	//		ИсточникСПараметрами = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа.Значение, Перечисления.ркВариантыОтображенияВариантовАнализа.Диаграмма, ПринудительноОбновитьДанные);
	//		
	//	КонецЕсли;
	//	
	//	Если НЕ ИсточникСПараметрами.ОшибкаРасчета И НЕ ИсточникСПараметрами.Пустой И ИсточникСПараметрами.РасчетыАктуальны Тогда
	//		ПодготовитьИсточник(ИсточникСПараметрами);
	//	КонецЕсли;
	//	
	//	СводныйОтчет.НачатьАвтогруппировкуСтрок();
	//	
	//	ЗаполнитьСправочныеДанныеПоказателя(СводныйОтчет, ВариантАнализа.Значение, ИсточникСПараметрами);
	//	ЗаполнитьДанныеДиаграммы(СводныйОтчет, ВариантАнализа.Значение, ИсточникСПараметрами);
	//	
	//	СводныйОтчет.ЗакончитьАвтогруппировкуСтрок();
	//	
	//	СводныйОтчет.ВывестиГоризонтальныйРазделительСтраниц();	
	//	
	//КонецЦикла;
	//
	//// Обозначения
	//Если ВариантыАнализаОтчета.Количество() > 1 Тогда
	//	МакетОбозначений = Отчеты.ркМониторЦелевыхПоказателей.ПолучитьМакет("МакетОбозначенийЭлектроннойФормыПоказателя");
	//	ОбластьОбозначений = МакетОбозначений.ПолучитьОбласть("Обозначения");
	//	СводныйОтчет.Вывести(ОбластьОбозначений);
	//	
	//КонецЕсли;
	//
	//// Параметры вывода
	//СводныйОтчет.Защита = Истина;
	//СводныйОтчет.ОтображатьЗаголовки = Ложь;
	//СводныйОтчет.ОтображатьСетку = Ложь;
	//СводныйОтчет.КлючПараметровПечати = "ПечатнаяФормаВариантаАнализа";
	//СводныйОтчет.АвтоМасштаб = Истина;

	//Возврат СводныйОтчет;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Агрегатные функции системы компоновки данных.

// Возвращает последнее значение из переданного из СКД массива итогов
//
// Параметры:
//	Данные - Массив - массив итогов
//
// Возвращаемое значение:
//	Произвольное - последнее значение в массиве
//
Функция ПолучитьПоследнееЗначениеМассива(Данные) Экспорт
	
	КоличествоЭлементов = Данные.Количество();
	
	Если КоличествоЭлементов > 0 Тогда
		Возврат Данные[КоличествоЭлементов - 1];
	Иначе
		Возврат Null;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расчет источников данных и значений вариантов анализа.

// Возвращает структуру с параметрами "Значение", "ЦелевоеЗначение", "Изменение"
// Используется в списке показателей для вывода последних вычисленных значений
//
// Параметры:
//  ВариантАнализа - СправочникСсылка.ркВариантыАнализаЦелевыхПоказателей
//
// Возвращаемое значение:
//  Структура - содержащая заполненные свойства "Значение", "ЦелевоеЗначение", "Изменение"
//
Функция ПолучитьЗначенияПоказателя(ВариантАнализа) Экспорт
	Перем СтруктураЗначенийПоказателя;
	
	//СтруктураЗначенийПоказателя = Новый Структура("Значение, ЦелевоеЗначение, Изменение", 0, 0, 0);
	//// Получим данные
	//ИсточникДанных = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, Перечисления.ркВариантыОтображенияВариантовАнализа.Диаграмма);
	//
	//// Заполним структуру
	//СтрокаСПослФактЗначением = ИсточникДанных.Данные.Найти(НачалоДня(ИсточникДанных.ДатаПоследнегоФактическогоЗначения),"Период");
	//СтрокаСПредпослФактЗначением = ИсточникДанных.Данные.Найти(ДатаСоСмещением(НачалоДня(ИсточникДанных.ДатаПоследнегоФактическогоЗначения), Перечисления.ркПериодичность.День, -1),"Период");
	//
	//СтруктураЗначенийПоказателя.Значение = ИсточникДанных.ПоследнееФактическоеЗначение;
	//СтруктураЗначенийПоказателя.ЦелевоеЗначение = СтрокаСПослФактЗначением.ЦелевоеЗначение;
	//СтруктураЗначенийПоказателя.Изменение = СтрокаСПослФактЗначением.Значение - СтрокаСПредпослФактЗначением.Значение;
	
	Возврат СтруктураЗначенийПоказателя;
	
КонецФункции

// Возвращает источник данных варианта анализа
// Если источник данных в кэше устарел, то производится перерасчет и обновление кэша
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ркВариантыАнализаЦелевыхПоказателей
//	ВариантОтображения - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа - кратко, диаграмма, таблица
//	ПринудительноОбновитьДанные - Булево - указывает, что проверять актуальность данных не нужно.
//	ДинамическиеПараметры - Структура - содержит примененные дин. параметры варианта анализа
//			ПериодичностьКонтроля - ПеречислениеСсылка.Периодичность
//			ОбъектАнализа - Строка - имя поля-измерения, которое будет в роли объекта анализа
//
// Возвращаемое значение:
//	Структура - источник данных варианта анализа
//
Функция ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, ВариантОтображения, ПринудительноОбновитьДанные = Ложь, ДинамическиеПараметры = Неопределено) Экспорт
	
	//ИсточникДанных = ПолучитьИсточникДанныхВариантаАнализаИзИнформационнойБазы(Показатель, ВариантОтображения, ДинамическиеПараметры);
	//Возврат ИсточникДанных;
	
КонецФункции

// Возвращает источник данных варианта анализа
// Если источник данных в кэше устарел, то производится перерасчет и обновление кэша
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ркВариантыАнализаЦелевыхПоказателей
//	ВариантОтображения - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа - кратко, диаграмма, таблица
//	ПринудительноОбновитьДанные - Булево - указывает, что проверять актуальность данных не нужно.
//	ДинамическиеПараметры - Структура - содержит примененные дин. параметры варианта анализа
//			ПериодичностьКонтроля - ПеречислениеСсылка.Периодичность
//			ОбъектАнализа - Строка - имя поля-измерения, которое будет в роли объекта анализа
//
// Возвращаемое значение:
//	Структура - источник данных варианта анализа
//
Функция ПолучитьИсточникДанныхВариантаАнализаВиджета(ВариантАнализа, Сотрудник, ПринудительноОбновитьДанные = Ложь, ДинамическиеПараметры = Неопределено) Экспорт
	
	//// Инициализация переменных
	//ИсточникДанных = Новый Структура;
	//ПолучатьДанныеИзИБ = Истина;
	//ПомеченНаУдаление = ВариантАнализа.ПометкаУдаления;
	//
	//// Проверим устарели ли данные показателя
	//// Если ПериодАктуальностиРасчета = 0, то данные всегда беруться из ИБ
	//Если НЕ ВариантАнализа.ПериодАктуальностиРасчета = 0 И НЕ ПринудительноОбновитьДанные И НЕ ПомеченНаУдаление Тогда
	//	// Проверим есть ли данные в кэше и их актуальность
	//	Если СвойстваДанныхВариантаАнализаВиджетаВКэше(ВариантАнализа, Сотрудник).ДанныеАктуальны Тогда
	//		ПолучатьДанныеИзИБ = Ложь;
	//		
	//		// Получим данные из кэша
	//		ИсточникДанных = ПолучитьИсточникДанныхВариантаАнализаВиджетаИзКэша(ВариантАнализа, Сотрудник);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//// Получим данные из ИБ	
	//Если ПолучатьДанныеИзИБ Тогда
	//	ИсточникДанных = ПолучитьИсточникДанныхВариантаАнализаВиджетаИзИнформационнойБазы(ВариантАнализа, Сотрудник, ДинамическиеПараметры);
	//	
	//	Если НЕ ПомеченНаУдаление И ДинамическиеПараметры = Неопределено Тогда
	//		ЗаписатьДанныеВариантаАнализаВиджетаВКэш(ИсточникДанных, Сотрудник);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//Возврат ИсточникДанных;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Прочее.

// Возвращает валюту по умолчанию для заполнения настроек структуры целей и вариантов анализа.
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты - валюта по умолчанию для настроек.
//
Функция ПолучитьВалютуПоУмолчанию() Экспорт
	
	ВалютаПоУмолчанию = Справочники.Валюты.ПустаяСсылка();
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	Если НЕ ВалютаУправленческогоУчета.Пустая() Тогда
		ВалютаПоУмолчанию = ВалютаУправленческогоУчета;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Код", "643");
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Валюты.Ссылка КАК Валюта
		               |ИЗ
		               |	Справочник.Валюты КАК Валюты
		               |ГДЕ
		               |	Валюты.Код = &Код";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ВалютаПоУмолчанию = Выборка.Валюта;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВалютаПоУмолчанию;
	
КонецФункции

// Возвращает имя значения объекта метаданных перечисление по ссылке
//
// Параметры
//  ПеречислениеСсылка
//
// Возвращаемое значение:
//  ИмяЗначенияПеречисления - Строка. Если не найдено, то пустая строка
//
Функция ПолучитьИмяЗначенияПеречисления(ПеречислениеСсылка) Экспорт
	
	ИмяЗначения = "";
	
	МетаданныеПеречисления = ПеречислениеСсылка.Метаданные();
	
	ИмяПеречисления = МетаданныеПеречисления.Имя;
	ИндексЗначения = Перечисления[ИмяПеречисления].Индекс(ПеречислениеСсылка);
	
	ИмяЗначения = МетаданныеПеречисления.ЗначенияПеречисления[ИндексЗначения].Имя;
	
	Возврат ИмяЗначения;
	
КонецФункции

// Возвращает индекс картинки, характеризующей состояние(статус) показателя для списка
//
// Параметры
//	ВариантАнализа - ссылка на вариант анализа
//
// Возвращаемое значение:
//	Индекс - Число - индекс картинки в коллекции
//
Функция ПолучитьИндексКартинкиСостоянияДляПоказателя(ВариантАнализа, ИсточникДанных) Экспорт
	
	Перем ИндексКартинкиСтатусаПоказателя;
	
	//ИндексКартинкиСтатусаПоказателя = Неопределено;
	//
	//ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ВариантАнализа.Владелец.ЦелевойТренд, ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа), ВариантАнализа.ТочностьРасчетаДробнойЧасти);
	//
	//ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_" + ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ВариантАнализа.Владелец.ЦелевойТренд);
	//
	//МатрицаСостояний = ПолучитьМатрицуСостояний();
	//СекцияИмяКартинкиСостояния = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ИмяКартинкиСтатуса");
	//ТекстСекции = СекцияИмяКартинкиСостояния.ТекущаяОбласть.Текст;
	//
	//Если ТекстСекции = "ПиктограммаПоказателяЦельДостигнута" Тогда
	//	ИндексКартинкиСтатусаПоказателя = 3;
	//	
	//ИначеЕсли ТекстСекции = "ПиктограммаПоказателяПриемлемоеЗначение" Тогда
	//	ИндексКартинкиСтатусаПоказателя = 2;
	//	
	//ИначеЕсли ТекстСекции = "ПиктограммаПоказателяСтатусНеопределен" Тогда
	//	ИндексКартинкиСтатусаПоказателя = 1;
	//	
	//ИначеЕсли ТекстСекции = "ПиктограммаПоказателяНеприемлемоеЗначение" Тогда
	//	ИндексКартинкиСтатусаПоказателя = 0;
	//	
	//КонецЕсли;
	
	Возврат ИндексКартинкиСтатусаПоказателя;
	
КонецФункции

// Возвращает индекс картинки, характеризующей тренд(характер изменений) показателя для списка
//
// Параметры
//	ВариантАнализа - Ссылка на вариант анализа
//
// Возвращаемое значение:
//	Индекс - Число - индекс картинка в коллекции
//
Функция ПолучитьИндексКартинкиТрендаДляПоказателя(ВариантАнализа, ИсточникДанных) Экспорт
	
	Перем ИндексКартинкиТрендаПоказателя;
	
	//ИндексКартинкиТрендаПоказателя = Неопределено;
	//
	//ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ВариантАнализа.Владелец.ЦелевойТренд, ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа), ВариантАнализа.ТочностьРасчетаДробнойЧасти);
	//
	//ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_" + ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ВариантАнализа.Владелец.ЦелевойТренд);
	//
	//МатрицаСостояний = ПолучитьМатрицуСостояний();
	//СекцияИмяКартинкиТренда = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ИмяКартинкиТренда");
	//ТекстСекции = СекцияИмяКартинкиТренда.ТекущаяОбласть.Текст;
	//
	//Если ТекстСекции = "ПиктограммаТрендаБезИзменений" Тогда
	//	ИндексКартинкиТрендаПоказателя = 6;
	//	
	//ИначеЕсли ТекстСекции = "ПиктограммаТрендаПадениеВДиапазоне" Тогда
	//	ИндексКартинкиТрендаПоказателя = 5;
	//	
	//ИначеЕсли ТекстСекции = "ПиктограммаТрендаПадениеУхудшается" Тогда
	//	ИндексКартинкиТрендаПоказателя = 4;
	//	
	//ИначеЕсли ТекстСекции = "ПиктограммаТрендаПадениеУлучшается" Тогда
	//	ИндексКартинкиТрендаПоказателя = 3;
	//	
	//ИначеЕсли ТекстСекции = "ПиктограммаТрендаРостВДиапазоне" Тогда
	//	ИндексКартинкиТрендаПоказателя = 2;
	//	
	//ИначеЕсли ТекстСекции = "ПиктограммаТрендаРостУхудшается" Тогда
	//	ИндексКартинкиТрендаПоказателя = 1;
	//	
	//ИначеЕсли ТекстСекции = "ПиктограммаТрендаРостУлучшается" Тогда
	//	ИндексКартинкиТрендаПоказателя = 0;
	//	
	//ИначеЕсли ТекстСекции = "ПиктограммаТрендаНеопределен" Тогда
	//	ИндексКартинкиТрендаПоказателя = 7;
	//	
	//КонецЕсли;
	
	Возврат ИндексКартинкиТрендаПоказателя;
	
КонецФункции

// Возвращает картинку, характеризующую состояние(статус) показателя
//
// Параметры
//	ВариантАнализа		- Ссылка на вариант анализа
//	ИсточникДанных 	- ТаблицаЗначений с данными для диаграммы
//
// Возвращаемое значение:
//	Картинка		- картинка из библиотеки картинок
//
Функция ПолучитьКартинкуСостоянияДляПоказателя(ИсточникДанных) Экспорт
	
	Перем КартинкаСтатусаПоказателя;
	//
	//КартинкаСтатусаПоказателя = Новый Картинка;
	//
	//ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа), ВариантАнализа.ТочностьРасчетаДробнойЧасти);
	//
	//ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_" + ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ВариантАнализа.Владелец.ЦелевойТренд);
	//
	//МатрицаСостояний = ПолучитьМатрицуСостояний();
	//СекцияИмяКартинкиСостояния = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ИмяКартинкиСтатуса");
	//ИмяКартинкиСостояния = "CRM_" + СекцияИмяКартинкиСостояния.ТекущаяОбласть.Текст;
	//
	//КартинкаСтатусаПоказателя = БиблиотекаКартинок[ИмяКартинкиСостояния];
	
	Возврат КартинкаСтатусаПоказателя;
	
КонецФункции

// Возвращает картинку, характеризующую тренд(характер изменений) показателя
//
// Параметры
//	ВариантАнализа - Ссылка на вариант анализа
//
// Возвращаемое значение:
//	Индекс - Число - картинка из библиотеки
//
Функция ПолучитьКартинкуТрендаДляПоказателя(ИсточникДанных) Экспорт
	
	Перем КартинкаТрендаПоказателя;
	
	//КартинкаТрендаПоказателя = Новый Картинка;
	//
	//ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ИсточникДанных.Владелец.ЦелевойТренд, ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ИсточникДанных), ИсточникДанных.ТочностьРасчетаДробнойЧасти);
	//
	//ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_" + ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ИсточникДанных.Владелец.ЦелевойТренд);
	//
	//МатрицаСостояний = ПолучитьМатрицуСостояний();
	//СекцияИмяКартинкиТренда = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ИмяКартинкиТренда");
	//ИмяКартинкиТренда = "CRM_" + СекцияИмяКартинкиТренда.ТекущаяОбласть.Текст;
	//
	//КартинкаТрендаПоказателя = БиблиотекаКартинок[ИмяКартинкиТренда];
	
	Возврат КартинкаТрендаПоказателя;
	
КонецФункции

// Служебная функция, предназначенная для получения описания типов строки
// 
// Параметры:
//  ДлинаСтроки 			- число, количество символов в строке.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт
	Массив = Новый Массив; 
	Массив.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);
	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);
КонецФункции

// Служебная функция, предназначенная для получения описания типов булево.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" булева типа.
//
Функция ПолучитьОписаниеТиповБулево() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Булево"));
	Возврат Новый ОписаниеТипов(Массив);
	
КонецФункции // ПолучитьОписаниеТиповБулево() 

// Возвращает структуру, содержащую все свойства варианта анализа
//
// Параметры
//  ВариантАнализа - ссылка на вариант анализа
//
// Возвращаемое значение:
//  Структура - структура рекивзитов и сопутствующих данных варианта анализа
//
Функция ПолучитьСвойстваВариантаАнализа(ВариантАнализа, ИсточникДанных) Экспорт
	
	//ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	//
	//// Инициализируем переменные
	//СвойстваВариантаАнализа = Новый Структура("Цель,
	//|КатегорияЦели,
	//|ЦелевойПоказатель,
	//|КраткоеНаименованиеЦелевогоПоказателя,
	//|Описание,
	//|ФормулаРасчета,
	//|Размерность,
	//|ВариантАнализа,
	//|Ответственный,
	//|ЦелевойТренд,
	//|ЦелевыеЗначения,
	//|ФактическийТренд,
	//|ФактическоеЗначение,
	//|ФактическоеСостояние,
	//|ПериодАнализа,
	//|ПериодСравнения,
	//|ТипАнализа,
	//|ПериодичностьКонтроля,
	//|ОбъектАнализа,
	//|ЗначениеАнализа,
	//|КратностьЗначений,
	//|ТочностьРасчетаДробнойЧасти,
	//|МетодРасчетаЗначений,
	//|ПользовательскиеОтборы,
	//|ДатаВремяФормирования,
	//|Пользователь,
	//|СпособРасчета,
	//|Адекватность");
	//
	//ВидыОтклоненийОтЦелевыхЗначенийПоказателей = Перечисления.ркВидыОтклоненийОтЦелевыхЗначенийПоказателей;
	//ВидыЦелевыхЗначенийВариантовАнализа = Перечисления.ркВидыЦелевыхЗначенийВариантовАнализа;
	//
	//// Получим свойства варианта анализа и цели
	//ЗапросСвойствВариантаАнализа = Новый Запрос;
	//ЗапросСвойствВариантаАнализа.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	//ЗапросСвойствВариантаАнализа.Текст = 
	//"ВЫБРАТЬ
	//|	ркВариантыАнализаЦелевыхПоказателей.Владелец.Ссылка КАК Цель,
	//|	ркВариантыАнализаЦелевыхПоказателей.Владелец.КатегорияЦели КАК КатегорияЦели,
	//|	ркВариантыАнализаЦелевыхПоказателей.Владелец.ЦелевойПоказатель КАК ЦелевойПоказатель,
	//|	ркВариантыАнализаЦелевыхПоказателей.Владелец.КраткоеНаименованиеЦелевогоПоказателя КАК КраткоеНаименованиеЦелевогоПоказателя,
	//|	ркВариантыАнализаЦелевыхПоказателей.Владелец.Описание КАК Описание,
	//|	ркВариантыАнализаЦелевыхПоказателей.Владелец.ФормулаРасчета КАК ФормулаРасчета,
	//|	ркВариантыАнализаЦелевыхПоказателей.Владелец.ЦелевойТренд КАК ЦелевойТренд,
	//|	ркВариантыАнализаЦелевыхПоказателей.ПериодАнализа,
	//|	ркВариантыАнализаЦелевыхПоказателей.ПериодСравнения,
	//|	ркВариантыАнализаЦелевыхПоказателей.ТипАнализа,
	//|	ркВариантыАнализаЦелевыхПоказателей.ПериодичностьКонтроля,
	//|	ркВариантыАнализаЦелевыхПоказателей.ОбъектАнализа,
	//|	ркВариантыАнализаЦелевыхПоказателей.ЗначениеАнализа,
	//|	ркВариантыАнализаЦелевыхПоказателей.МетодРасчетаЗначений,
	//|	ркВариантыАнализаЦелевыхПоказателей.ХранилищеПользовательскихНастроекКомпоновкиДанных,
	//|	ркВариантыАнализаЦелевыхПоказателей.Ответственный,
	//|	ркВариантыАнализаЦелевыхПоказателей.ТочностьРасчетаДробнойЧасти,
	//|	ркВариантыАнализаЦелевыхПоказателей.КратностьЗначений,
	//|	ркВариантыАнализаЦелевыхПоказателей.Ссылка КАК ВариантАнализа
	//|ИЗ
	//|	Справочник.ркВариантыАнализаЦелевыхПоказателей КАК ркВариантыАнализаЦелевыхПоказателей
	//|ГДЕ
	//|	ркВариантыАнализаЦелевыхПоказателей.Ссылка = &ВариантАнализа";
	//
	//РезультатЗапросаСвойствВариантаАнализа = ЗапросСвойствВариантаАнализа.Выполнить();
	//
	//Если НЕ РезультатЗапросаСвойствВариантаАнализа.Пустой() Тогда
	//	
	//	ВыборкаСвойствВариантаАнализа = РезультатЗапросаСвойствВариантаАнализа.Выбрать();
	//	ВыборкаСвойствВариантаАнализа.Следующий();
	//	
	//	ЗаполнитьЗначенияСвойств(СвойстваВариантаАнализа, ВыборкаСвойствВариантаАнализа);
	//	
	//	Если СвойстваВариантаАнализа.Ответственный.Пустая() Тогда
	//		СвойстваВариантаАнализа.Ответственный = "Ответственный не определен";
	//		
	//	КонецЕсли;
	//	
	//	СвойстваВариантаАнализа.ПериодАнализа = ПредставлениеСтандартногоПериода(ВыборкаСвойствВариантаАнализа.ПериодАнализа.Получить());
	//	
	//	ПериодСравнения = ВыборкаСвойствВариантаАнализа.ПериодСравнения.Получить();
	//	Если НЕ ПериодСравнения = Неопределено И СвойстваВариантаАнализа.ТипАнализа = Перечисления.ркТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
	//		СвойстваВариантаАнализа.ПериодСравнения = ПредставлениеСтандартногоПериода(ВыборкаСвойствВариантаАнализа.ПериодСравнения.Получить());
	//		
	//	Иначе
	//		СвойстваВариантаАнализа.ПериодСравнения = Неопределено;
	//		
	//	КонецЕсли;
	//	
	//	// Заполним информацию по пользовательским настройкам
	//	ПользовательскиеНастройки = ВыборкаСвойствВариантаАнализа.ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить();
	//	Если НЕ ПользовательскиеНастройки = Неопределено Тогда
	//		
	//		ПользовательскиеНастройкиЭлементы = ПользовательскиеНастройки.Элементы;
	//		
	//		ПользовательскиеОтборы = "";
	//		Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиЭлементы Цикл
	//			Если ПользовательскаяНастройка.Использование Тогда
	//				ПользовательскиеОтборы = "Установлены пользовательские отборы";
	//				
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//		Если НЕ ПустаяСтрока(ПользовательскиеОтборы) Тогда
	//			СвойстваВариантаАнализа.ПользовательскиеОтборы = ПользовательскиеОтборы;
	//			
	//		Иначе
	//			СвойстваВариантаАнализа.ПользовательскиеОтборы = Неопределено;
	//			
	//		КонецЕсли;
	//		
	//	Иначе
	//		СвойстваВариантаАнализа.ПользовательскиеОтборы = Неопределено;
	//		
	//	КонецЕсли;
	//	
	//	СвойстваВариантаАнализа.Размерность = Символы.НПП + Строка(ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.Размерность);
	//	СвойстваВариантаАнализа.ПериодичностьКонтроля = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ПериодичностьКонтроля;
	//	СвойстваВариантаАнализа.ОбъектАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ОбъектАнализаПредставление;
	//	СвойстваВариантаАнализа.ЗначениеАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаПредставление;
	//	
	//КонецЕсли;
	//
	//// Заполним информацию о фактическом состоянии
	//СвойстваВариантаАнализа.ФактическийТренд = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКТренду;
	//СвойстваВариантаАнализа.ФактическоеСостояние = ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус;
	//СвойстваВариантаАнализа.ФактическоеЗначение = ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений);
	//
	//// Заполним информацию по целям
	//ПредставлениеРазмерности = "";
	//Если НЕ ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность) И НЕ ДинамическиеСвойстваВариантаАнализа.Размерность = Неопределено Тогда
	//	ПредставлениеРазмерности = Символы.НПП + ДинамическиеСвойстваВариантаАнализа.Размерность;
	//КонецЕсли;
	//
	//Если НЕ ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = Неопределено И НЕ ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения.Пустая() Тогда
	//	Если ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Абсолютное Тогда
	//		РазмерностьОтклонения = Символы.НПП + ДинамическиеСвойстваВариантаАнализа.Размерность;
	//		
	//	ИначеЕсли ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Относительное Тогда
	//		РазмерностьОтклонения = "%";
	//		
	//	КонецЕсли;
	//	ЦелиУстановлены = Истина;
	//	
	//	
	//	Если ИсточникДанных.СвойстваДанныхПоПериодам.ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Значение Тогда
	//		Если ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Абсолютное Тогда
	//			СвойстваВариантаАнализа.ЦелевыеЗначения = ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений) 
	//			+ ПредставлениеРазмерности + Символы.ПС
	//			+ НСтр("ru='с позитивным отклонением'") + " " 
	//			+ ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений)
	//			+ РазмерностьОтклонения + " "
	//			+ НСтр("ru='и негативным отклонением'") + " " 
	//			+ ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений)
	//			+ РазмерностьОтклонения;
	//			
	//		ИначеЕсли ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Относительное Тогда
	//			СвойстваВариантаАнализа.ЦелевыеЗначения = ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений) 
	//			+ ПредставлениеРазмерности + Символы.ПС
	//			+ НСтр("ru='с позитивным отклонением'") + " " + ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение
	//			+ РазмерностьОтклонения + " "
	//			+ НСтр("ru='и негативным отклонением'") + " " + ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение
	//			+ РазмерностьОтклонения;
	//			
	//		КонецЕсли;
	//	Иначе 
	//		Если ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Абсолютное Тогда
	//			СвойстваВариантаАнализа.ЦелевыеЗначения = ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМинимум, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений) 
	//			+ " - " + ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМаксимум, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений)
	//			+ ПредставлениеРазмерности + Символы.ПС
	//			+ НСтр("ru='с позитивным отклонением'") + " " 
	//			+ ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений)
	//			+ РазмерностьОтклонения + " "
	//			+ НСтр("ru='и негативным отклонением'") + " " 
	//			+ ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений)
	//			+ РазмерностьОтклонения;
	//			
	//		ИначеЕсли ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Относительное Тогда
	//			СвойстваВариантаАнализа.ЦелевыеЗначения = ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМинимум, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений) 
	//			+ " - " + ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМаксимум, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений)
	//			+ ПредставлениеРазмерности + Символы.ПС
	//			+ НСтр("ru='с позитивным отклонением'") + " " + ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение
	//			+ РазмерностьОтклонения + " "
	//			+ НСтр("ru='и негативным отклонением'") + " " + ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение
	//			+ РазмерностьОтклонения;
	//			
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//Иначе
	//	РазмерностьОтклонения = "";
	//	ЦелиУстановлены = Ложь;
	//	СвойстваВариантаАнализа.ЦелевыеЗначения = НСтр("ru='Цели не установлены'");
	//КонецЕсли;
	//
	//// Заполним информацию о прогнозе
	//Если ВариантАнализа.РассчитыватьПрогноз 
	//	И НЕ ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда = Неопределено
	//	И НЕ ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Пустой Тогда
	//	СвойстваВариантаАнализа.СпособРасчета	= ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.СпособРасчета;
	//	СвойстваВариантаАнализа.Адекватность	= Строка(Окр(100 * ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Адекватность, 2)) + " " + "%";
	//	
	//КонецЕсли;

	//// Заполним информацию о сфромировавшем и дате актуальности информации.
	//СвойстваВариантаАнализа.ДатаВремяФормирования = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	//СвойстваВариантаАнализа.Пользователь = Пользователи.ТекущийПользователь();
	//
	//Возврат СвойстваВариантаАнализа;
	
КонецФункции

// Возвращает представление числа в виде тыс., млн
// 
// Параметры:
//	ИсходноеЧисло		  - Число - форматируемое число
//	Разрядность			  - Число - количество знаков после запятой
//	ВидПредставленияЧисла - Перечисление - вид представления возвращаемой строки
//
// Возвращаемое значение:
//	Строка
//
Функция ПолучитьСокращенноеПредставлениеЧисла(ИсходноеЧисло, Разрядность, ВидПредставленияЧисла) Экспорт 
	
	СокращенноеПредставлениеЧисла = "";
	//СокращенноеПредставлениеПорядкаЧисел = "";
	//
	//ВидыПредставленияЧисел = Перечисления.ркВидыПредставленияЧисел;
	//
	//Если ВидПредставленияЧисла = ВидыПредставленияЧисел.ВТысячах Тогда
	//	СокращенноеПредставлениеПорядкаЧисел = НСтр("ru='тыс.'");
	//	
	//ИначеЕсли ВидПредставленияЧисла = ВидыПредставленияЧисел.ВМиллионах Тогда
	//	СокращенноеПредставлениеПорядкаЧисел = НСтр("ru='млн'");
	//	
	//КонецЕсли;
	//
	//СокращенноеПредставлениеЧисла = СтрЗаменить(Формат(ИсходноеЧисло, "ЧДЦ=" + Разрядность + ";ЧН="), " ", Символы.НПП) + ?(НЕ ПустаяСтрока(СокращенноеПредставлениеПорядкаЧисел), Символы.НПП + СокращенноеПредставлениеПорядкаЧисел, "");
	
	Возврат СокращенноеПредставлениеЧисла;              
	
КонецФункции

// Возвращает строку для видов тыс., млн
// 
// Параметры:
//	ВариантАнализа	- Ссылка на вариант анализа
//
// Возвращаемое значение:
//	Строка
//
Функция ПолучитьСтрокуПредставленияЧисел(ВидПредставленияЧисла) Экспорт
	
	СокращенноеПредставлениеПорядкаЧисел = "";
	
	Если ВидПредставленияЧисла = "Тысячи" Тогда
		СокращенноеПредставлениеПорядкаЧисел = НСтр("ru='тыс.'");
		
	ИначеЕсли ВидПредставленияЧисла = "Миллионы" Тогда
		СокращенноеПредставлениеПорядкаЧисел = НСтр("ru='млн.'");
		
	КонецЕсли;
	
	Возврат СокращенноеПредставлениеПорядкаЧисел;
	
КонецФункции

// Возвращает количества источников данных с разбивкой по зонам внимания и вариантам отображения 
//
// Параметры:
//	НаборИсточниковДанных - ТаблицаЗначений - анализируемый набор
//	УчитыватьВариантыОтображения - Булево
//
// Возвращаемое значение:
//	Структура - содержит количества источников данных
//
Функция СтатистикаИсточниковДанныхПоЗонамВнимания(НаборИсточниковДанных, УчитыватьВариантыОтображения = Ложь) Экспорт
	
	ВариантыОтображенияВариантовАнализа = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей;
	ЗоныВнимания = Перечисления.CRM_ЗоныВниманияАнализаПоказателей;
	
	Если УчитыватьВариантыОтображения Тогда
		СтатистикаПоСтрокам = Новый Структура("КритическоеСостояниеКратко, 
		|КритическоеСостояниеПодробно, 
		|ВажноКратко, 
		|ВажноПодробно, 
		|КСведениюКратко,
		|КСведениюПодробно,
		|РассчитанныеСОшибкамиКратко,
		|РассчитанныеСОшибкамиПодробно");
		
		// Отберем критическое состояние
		Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.КритическоеСостояние, ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.КритическоеСостояниеКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		ОтборВсехКратких = Новый Структура("ВариантОтображения", ВариантыОтображенияВариантовАнализа.Кратко);
		НаборИсточниковДанныхБезКратких = ПрименитьКТаблицеУсловиеНЕ(НаборИсточниковДанных, ОтборВсехКратких);
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.КритическоеСостояние);
		СтатистикаПоСтрокам.КритическоеСостояниеПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
		// Отберем важные
		Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.Важно, ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.ВажноКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.Важно);
		СтатистикаПоСтрокам.ВажноПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
		// Отберем показатели к сведению
		Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.КСведению, ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.КСведениюКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
		СтатистикаПоСтрокам.КСведениюПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
		// Отберем показатели, рассчитанные с ошибками
		Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.РассчитанныеСОшибками, ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.РассчитанныеСОшибкамиКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
		СтатистикаПоСтрокам.РассчитанныеСОшибкамиПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
	Иначе
		СтатистикаПоСтрокам = Новый Структура("
		|КритическоеСостояние, 
		|Важно, 
		|КСведению,
		|РассчитанныеСОшибками");
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.КритическоеСостояние);
		СтатистикаПоСтрокам.КритическоеСостояние = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.Важно);
		СтатистикаПоСтрокам.Важно = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
		СтатистикаПоСтрокам.КСведению = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
		СтатистикаПоСтрокам.РассчитанныеСОшибками = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
	КонецЕсли;
	
	Возврат СтатистикаПоСтрокам;
	
КонецФункции

// Возвращает свойства типов анализа - доступные типы диаграмм, 
// доступность объекта анализа, требуется ли оформление типа анализа
//
Функция ПолучитьТаблицуСоответствиТиповАнализаИТиповДиаграмм() Экспорт
	
	//ТаблицаСоответствий = Новый ТаблицаЗначений;
	//ТаблицаСоответствий.Колонки.Добавить("ТипАнализа");
	//ТаблицаСоответствий.Колонки.Добавить("ТипДиаграммы");
	//ТаблицаСоответствий.Колонки.Добавить("ОформлениеПокомпонентногоСравненияДоступно");
	//ТаблицаСоответствий.Колонки.Добавить("ОбъектАнализаДоступен");
	//ТаблицаСоответствий.Колонки.Добавить("ПериодСравненияДоступен");
	//ТаблицаСоответствий.Колонки.Добавить("ПрогнозированиеДоступно");
	//
	//ТипыСравнений = Перечисления.ркТипыАнализаПоказателей;
	//ТипыДиаграмм = Перечисления.ркТипыДиаграммПоказателей;
	//
	// Покомпонентное сравнение
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	//НовоеСравнение.ОбъектАнализаДоступен = Истина;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	//НовоеСравнение.ОбъектАнализаДоступен = Истина;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированная;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	//НовоеСравнение.ОбъектАнализаДоступен = Истина;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяОбъемная;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	//НовоеСравнение.ОбъектАнализаДоступен = Истина;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Ложь;

	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплением;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	//НовоеСравнение.ОбъектАнализаДоступен = Истина;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемОбъемная;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	//НовоеСравнение.ОбъектАнализаДоступен = Истина;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаГоризонтальная;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	//НовоеСравнение.ОбъектАнализаДоступен = Истина;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаГоризонтальнаяОбъемная;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	//НовоеСравнение.ОбъектАнализаДоступен = Истина;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяГоризонтальная;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	//НовоеСравнение.ОбъектАнализаДоступен = Истина;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяГоризонтальнаяОбъемная;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	//НовоеСравнение.ОбъектАнализаДоступен = Истина;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемГоризонтальная;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	//НовоеСравнение.ОбъектАнализаДоступен = Истина;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемГоризонтальнаяОбъемная;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	//НовоеСравнение.ОбъектАнализаДоступен = Истина;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Круговая;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	//НовоеСравнение.ОбъектАнализаДоступен = Истина;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	//
	//// Динамика изменений
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	//НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Истина;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	//НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Истина;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.График;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	//НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Истина;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикПоШагам;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	//НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Истина;
	
	// Текущее состояние
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.ИзмерениеТекущегоСостояния;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Измерительная;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	//НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	//НовоеСравнение.ПериодСравненияДоступен = Ложь;
	//НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	//
	//// Сравнение с прошлым периодом
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.СравнениеСПрошлымПериодом;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	//НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	//НовоеСравнение.ПериодСравненияДоступен = Истина;
	//НовоеСравнение.ПрогнозированиеДоступно = Истина;
	//
	//НовоеСравнение = ТаблицаСоответствий.Добавить();
	//НовоеСравнение.ТипАнализа = ТипыСравнений.СравнениеСПрошлымПериодом;
	//НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	//НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	//НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	//НовоеСравнение.ПериодСравненияДоступен = Истина;
	//НовоеСравнение.ПрогнозированиеДоступно = Истина;
	//
	//Возврат ТаблицаСоответствий;
	
КонецФункции

// Возвращает цвет, характеризующую состояние(статус) показателя
//
// Параметры
//	ВариантАнализа		- Ссылка на вариант анализа
//	ИсточникДанных 	- ТаблицаЗначений с данными для диаграммы
//
// Возвращаемое значение:
//	Картинка		- картинка из библиотеки картинок
//
Функция ПолучитьЦветСостоянияДляПоказателя(ИсточникДанных) Экспорт
	
	Перем ЦветСтатусаПоказателя;
	
	//ЦелевойТренд = ИсточникДанных.Владелец.ЦелевойТренд;
	//
	//ЦветСтатусаПоказателя = Новый Цвет;
	//
	//ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ЦелевойТренд, ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ИсточникДанных), ИсточникДанных.ТочностьРасчетаДробнойЧасти);
	//
	//ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_" + ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ЦелевойТренд);
	//
	//МатрицаСостояний = ПолучитьМатрицуСостояний();
	//СекцияЗначениеЦветаСтатуса = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ЗначениеЦветаСтатуса");
	//
	//ЦветСтатусаПоказателя = ПолучитьЦветИндикатора(Число(СекцияЗначениеЦветаСтатуса.ТекущаяОбласть.Текст), 0);
	
	Возврат ЦветСтатусаПоказателя;
	
КонецФункции

// Возвращает таблицу значений с примененным к ней отбором
//
// Параметры:
//	ТаблицаЗначений - ТаблицаЗначений - обрабатываемая таблица
//	СтруктураОтборов - Структура - применяемые отборы
//
// Возвращаемое значение:
//	ТаблицаЗначений - обработанная таблица
//
Функция ПрименитьКТаблицеУсловие(ТаблицаЗначений, СтруктураОтборов) Экспорт
	
	ТаблицаЗначенийКОбработке = ТаблицаЗначений.Скопировать();
	
	СтрокиКУдалению = НайтиСтрокиТаблицыПоУсловиюНЕ(ТаблицаЗначенийКОбработке, СтруктураОтборов);
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл 
		ТаблицаЗначенийКОбработке.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначенийКОбработке;
	
КонецФункции

// Возвращает таблицу значений с примененным к ней отбором по условию НЕ
//
// Параметры:
//	ТаблицаЗначений - ТаблицаЗначений - обрабатываемая таблица
//	СтруктураОтборов - Структура - применяемые отборы
//
// Возвращаемое значение:
//	ТаблицаЗначений - обработанная таблица
//
Функция ПрименитьКТаблицеУсловиеНЕ(ТаблицаЗначений, СтруктураОтборов) Экспорт
	
	ТаблицаЗначенийКОбработке = ТаблицаЗначений.Скопировать();
	
	СтрокиКУдалению = ТаблицаЗначенийКОбработке.НайтиСтроки(СтруктураОтборов);
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл 
		ТаблицаЗначенийКОбработке.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначенийКОбработке;
	
КонецФункции

// Возвращает результат проверки шаблона расчета целевого показателя
//
// Параметры:
//	МакетСКДПоказателя - СхемаКомпоновкиДанных - проверяемый шаблон расчета
//
// Возвращаемое значение:
//	Структура - содержит признак корректности шаблона и описание ошибки
//			МакетКорректный - Булево
//			ОписаниеОшибок - Массив - обнаруженные ошибки
//
Функция ПроверитьСхемуКомпоновкиДанных(МакетСКДПоказателя) Экспорт
	
	//РезультатПроверки = Новый Структура("МакетКорректный, ОписаниеОшибок", Истина, Неопределено);
	//
	//МассивОшибок = Новый Массив;
	//
	//// Проверим доступность обязательных наборов данных
	//
	//Если МакетСКДПоказателя.НаборыДанных.Найти("ТаблицаПериодов") = Неопределено Тогда
	//	МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя не содержит обязательного набора данных ""ТаблицаПериодов"". 
	//									|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
	//	РезультатПроверки.МакетКорректный = Ложь;
	//	
	//КонецЕсли;
	//								
	//Если МакетСКДПоказателя.НаборыДанных.Найти("ЦелевыеЗначения") = Неопределено Тогда
	//	МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя не содержит обязательного набора данных ""ЦелевыеЗначения"". 
	//									|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
	//	РезультатПроверки.МакетКорректный = Ложь;
	//	
	//КонецЕсли;
	//								
	//Если МакетСКДПоказателя.НаборыДанных.Найти("ДанныеДляАнализа") = Неопределено Тогда
	//	МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя не содержит обязательного набора данных ""ДанныеДляАнализа"". 
	//									|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
	//	РезультатПроверки.МакетКорректный = Ложь;
	//	
	//КонецЕсли;
	//
	//// Проверим корректность связей наборов данных
	//
	//ТаблицаПериодовЕсть = Ложь;
	//ЦелевыеЗначенияЕсть = Ложь;
	//ДанныеДляАнализаЕсть = Ложь;
	//Если МакетСКДПоказателя.СвязиНаборовДанных.Количество() = 2 Тогда
	//	Для Каждого СвязьНаборовДанных Из МакетСКДПоказателя.СвязиНаборовДанных Цикл 
	//		Если Найти(СвязьНаборовДанных.ВыражениеИсточник, "ТаблицаПериодов")
	//			И Найти(СвязьНаборовДанных.ВыражениеПриемник, "ЦелевыеЗначения") Тогда
	//				ТаблицаПериодовЕсть = Истина;
	//				ЦелевыеЗначенияЕсть = Истина;
	//			
	//		ИначеЕсли Найти(СвязьНаборовДанных.ВыражениеИсточник, "ТаблицаПериодов")
	//			И Найти(СвязьНаборовДанных.ВыражениеПриемник, "ЦелевыеЗначения") Тогда
	//				ТаблицаПериодовЕсть = Истина;
	//				ДанныеДляАнализаЕсть = Истина;
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//
	//Если ТаблицаПериодовЕсть И НЕ ЦелевыеЗначенияЕсть ИЛИ МакетСКДПоказателя.СвязиНаборовДанных.Количество() < 2 Тогда
	//	МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя не содержит связи между таблицей периодов и целевых значений. 
	//									|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
	//	РезультатПроверки.МакетКорректный = Ложь;
	//	
	//КонецЕсли;
	//
	//Если ТаблицаПериодовЕсть И НЕ ДанныеДляАнализаЕсть ИЛИ МакетСКДПоказателя.СвязиНаборовДанных.Количество() < 2 Тогда
	//	МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя не содержит связи между таблицей периодов и данными для анализа. 
	//									|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
	//	РезультатПроверки.МакетКорректный = Ложь;
	//	
	//КонецЕсли;
	//	
	//// Проверим, что вариант настроек один
	//Если МакетСКДПоказателя.ВариантыНастроек.Количество() <> 1 Тогда
	//	МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя должен содержать один вариант настроек. 
	//									|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
	//	РезультатПроверки.МакетКорректный = Ложь;
	//	
	//КонецЕсли;
	//
	//URLСхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(МакетСКДПоказателя, Новый УникальныйИдентификатор());
	//НовыйИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемаКомпоновкиДанных);
	//
	//КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	//КомпоновщикНастроек.Инициализировать(НовыйИсточникДоступныхНастроек);
	//	
	//// Проверим, что служебные поля доступны
	//СлужебныеРесурсы = Справочники.ркСтруктураЦелей.СлужебныеПоляЗначенияАнализа();
	//СлужебныеИзмерения = Справочники.ркСтруктураЦелей.СлужебныеПоляОбъектаАнализа();
	//
	//Для Каждого СлужебныйРесурс Из СлужебныеРесурсы Цикл 
	//	ИскомоеСлужебноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(СлужебныйРесурс));
	//	Если ИскомоеСлужебноеПоле = Неопределено Тогда
	//		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя должен содержать служебное поле """ + СлужебныйРесурс + """. 
	//										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
	//		РезультатПроверки.МакетКорректный = Ложь;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//ИскомоеСлужебноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Период"));
	//Если ИскомоеСлужебноеПоле = Неопределено Тогда
	//	МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя должен содержать служебное поле ""Период"". 
	//									|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
	//	РезультатПроверки.МакетКорректный = Ложь;
	//	
	//КонецЕсли;
	//	
	//// Проверим, что доступны измерения кроме служебных
	//КоличествоНеслужебныхИзмерений = 0;
	//Для Каждого ДоступноеПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл 
	//	Если НЕ ДоступноеПолеВыбора.Ресурс 
	//		И НЕ ДоступноеПолеВыбора.Папка 
	//		И НЕ ДоступноеПолеВыбора.Таблица 
	//		И СлужебныеИзмерения.Найти(Строка(ДоступноеПолеВыбора.Поле)) = Неопределено Тогда
	//		КоличествоНеслужебныхИзмерений = КоличествоНеслужебныхИзмерений + 1;
	//		
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если КоличествоНеслужебныхИзмерений < 1 Тогда
	//	МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя должен содержать неслужебные измерения. 
	//									|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
	//	РезультатПроверки.МакетКорректный = Ложь;
	//	
	//КонецЕсли;
	//	
	//КоличествоНеслужебныхРесурсов = 0;
	//Для Каждого ДоступноеПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл 
	//	Если ДоступноеПолеВыбора.Ресурс 
	//		И НЕ ДоступноеПолеВыбора.Папка 
	//		И НЕ ДоступноеПолеВыбора.Таблица 
	//		И СлужебныеРесурсы.Найти(Строка(ДоступноеПолеВыбора.Поле)) = Неопределено Тогда
	//		КоличествоНеслужебныхРесурсов = КоличествоНеслужебныхРесурсов + 1;
	//		
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если КоличествоНеслужебныхРесурсов < 1 Тогда
	//	МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя должен содержать неслужебные ресурсы. 
	//									|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
	//	РезультатПроверки.МакетКорректный = Ложь;
	//	
	//КонецЕсли;
	//	
	//// Запишем ошибки в результат
	//
	//РезультатПроверки.ОписаниеОшибок = МассивОшибок;
	//
	//Возврат РезультатПроверки;
	//
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с периодами и датами.

// Возвращает дату, смещенную на указанное количество периодов
//
// Параметры:
//	Дата - Дата - исходная дата
//	Периодичность - ПеречислениеСсылка.Периодичность - шаг периода
//	ЧислоПериодов - Число - число периодов, на которые нужно сдвинуть исходную дату
//  НеделяДекадаСПервогоДня - Булево - указывает, будет ли для периодичности "Неделя" и "Декада"
// 		расчетная дата смещаться на начало недели или декады
//
// Возвращаемое значение:
//	Дата - дата, смещенная на указанное количество периодов
//
Функция ДатаСоСмещением(Дата, Периодичность, ЧислоПериодов, НеделяДекадаСПервогоДня = Истина) Экспорт
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда		
		Возврат ДобавитьМесяц(Дата, 12 * ЧислоПериодов);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда		
		Возврат ДобавитьМесяц(Дата, 6 * ЧислоПериодов);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда		
		Возврат ДобавитьМесяц(Дата, 3 * ЧислоПериодов);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда		
		Возврат ДобавитьМесяц(Дата, ЧислоПериодов);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда		
		Если НеделяДекадаСПервогоДня Тогда
			Возврат ДатаСоСмещениемДляДекады(Дата, ЧислоПериодов);
		Иначе
			Возврат Дата + 3600 * 24 * 10 * ЧислоПериодов;
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда		
		Если НеделяДекадаСПервогоДня Тогда
 			Возврат НачалоНедели(Дата + 3600 * 24 * 7 * ЧислоПериодов);
		Иначе
			Возврат Дата + 3600 * 24 * 7 * ЧислоПериодов;
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда		
		Возврат Дата  + 3600 * 24 * ЧислоПериодов;
		
	Иначе 
		Возврат Дата;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Преобразование цветов rgb <-> hsv.

// Возвращает компоненты цвета по модели HSV, по переданным компонентам RGB
//
// Параметры:
//	Красный - Число - от 0 до 255
//	Зеленый - Число - от 0 до 255
//	Синий - Число - от 0 до 255
//	Тон - Число - возвращается значение от 0 до 360 (градусов)
//	Насыщенность - Число - возвращается значение от 0 до 100 (%)
//	Светлота - Число - возвращается значение от 0 до 100 (%)
//
Процедура ПолучитьHSVпоRGB(Красный, Зеленый, Синий, Тон, Насыщенность, Светлота) Экспорт
	
	ПриведенныйКрасный = Красный/255;
	ПриведенныйЗеленый = Зеленый/255;
	ПриведенныйСиний = Синий/255;
	
	// Определим светлоту
	МаксЦветов = Макс(ПриведенныйКрасный, ПриведенныйЗеленый, ПриведенныйСиний);	
	МинЦветов = Мин(ПриведенныйКрасный, ПриведенныйЗеленый, ПриведенныйСиний);
	
	Светлота = Окр(100 * МаксЦветов);
	
	// Определим насыщенность
	Если МаксЦветов = 0 Тогда 
		Насыщенность = 0;
		
	Иначе 
		Насыщенность = Окр(100 * (1 - МинЦветов/МаксЦветов));
		
	КонецЕсли;
	
	// Определим цветовой тон
	Если МаксЦветов = МинЦветов Тогда
		Тон = 0;
		
	ИначеЕсли МаксЦветов = ПриведенныйКрасный И ПриведенныйЗеленый >= ПриведенныйСиний Тогда
		Тон = 60*(ПриведенныйЗеленый - ПриведенныйСиний)/(МаксЦветов - МинЦветов);
		
	ИначеЕсли МаксЦветов = ПриведенныйКрасный И ПриведенныйЗеленый < ПриведенныйСиний Тогда
		Тон = 60*(ПриведенныйЗеленый - ПриведенныйСиний)/(МаксЦветов - МинЦветов) + 360;
		
	ИначеЕсли МаксЦветов = ПриведенныйЗеленый Тогда
		Тон = 60*(ПриведенныйСиний - ПриведенныйКрасный)/(МаксЦветов - МинЦветов) + 120;
		
	ИначеЕсли МаксЦветов = ПриведенныйСиний Тогда
		Тон = 60*(ПриведенныйКрасный - ПриведенныйЗеленый)/(МаксЦветов - МинЦветов) + 240;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает компоненты цвета по модели RGB, по переданным Web-цвету
//
// Параметры:
//	Цвет - WebЦвет - системное перечисление
//	Красный - Число - возвращается значение от 0 до 255
//	Зеленый - Число - возвращается значение от 0 до 255
//	Синий - Число - возвращается значение от 0 до 255
//
Процедура ПолучитьRGBWebЦвета(Цвет, Красный, Зеленый, Синий) Экспорт
	
	ВебЦветаВRGB = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьМакет("ВебЦветаВRGB");
	ОбластьСоответствиеWebЦветов = ВебЦветаВRGB.Области.СоответствиеWebЦветов;
	
	ИмяЦвета = ПолучитьСоответствияЦветов().Получить(Цвет);
	
	НомерИскомойСтроки = ВебЦветаВRGB.НайтиТекст(ИмяЦвета,,ОбластьСоответствиеWebЦветов,, Истина).Низ;
	Если НЕ НомерИскомойСтроки = Неопределено Тогда
		Красный = Число(ВебЦветаВRGB.Область("R"+НомерИскомойСтроки+"C3:R"+НомерИскомойСтроки+"C3").Текст);
		Зеленый = Число(ВебЦветаВRGB.Область("R"+НомерИскомойСтроки+"C4:R"+НомерИскомойСтроки+"C4").Текст);
		Синий = Число(ВебЦветаВRGB.Область("R"+НомерИскомойСтроки+"C5:R"+НомерИскомойСтроки+"C5").Текст);
		
	Иначе 
		Красный = 0;
		Зеленый = 0;
		Синий = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает компоненты цвета по модели RGB, по переданным компонентам HSV
//
// Параметры:
//	Тон - Число - от 0 до 360 (градусов)
//	Насыщенность - Число - от 0 до 100 (%)
//	Светлота - Число - от 0 до 100 (%)
//	Красный - Число - возвращается значение от 0 до 255
//	Зеленый - Число - возвращается значение от 0 до 255
//	Синий - Число - возвращается значение от 0 до 255
//
Процедура ПолучитьRGBпоHSV(Тон, Насыщенность, Светлота, Красный, Зеленый, Синий) Экспорт
	
	ПриведеннаяНасыщенность = Насыщенность/100;
	ПриведеннаяСветлота = Светлота/100;
	
	Целые60 = Цел(Тон/60);
	Остаток60 = Тон/60 - Целые60;
	
	p = ПриведеннаяСветлота * (1 - ПриведеннаяНасыщенность);
	q = ПриведеннаяСветлота * (1 - Остаток60 * ПриведеннаяНасыщенность);
	t = ПриведеннаяСветлота * (1 - (1 - Остаток60) * ПриведеннаяНасыщенность);
	
	Если Целые60 = 0 Тогда
		ПриведенныйКрасный = ПриведеннаяСветлота;
		ПриведенныйЗеленый = t;
		ПриведенныйСиний= p;
		
	ИначеЕсли Целые60 = 1 Тогда
		ПриведенныйКрасный = q;
		ПриведенныйЗеленый = ПриведеннаяСветлота;
		ПриведенныйСиний= p;
		
	ИначеЕсли Целые60 = 2 Тогда
		ПриведенныйКрасный = p;
		ПриведенныйЗеленый = ПриведеннаяСветлота;
		ПриведенныйСиний= t;
		
	ИначеЕсли Целые60 = 3 Тогда
		ПриведенныйКрасный = p;
		ПриведенныйЗеленый = q;
		ПриведенныйСиний= ПриведеннаяСветлота;
		
	ИначеЕсли Целые60 = 4 Тогда
		ПриведенныйКрасный = t;
		ПриведенныйЗеленый =p ;
		ПриведенныйСиний= ПриведеннаяСветлота;
		
	ИначеЕсли Целые60 = 5 Тогда
		ПриведенныйКрасный = ПриведеннаяСветлота;
		ПриведенныйЗеленый = p;
		ПриведенныйСиний= q;
		
	КонецЕсли;
	
	Красный = 255 * ПриведенныйКрасный;
	Зеленый = 255 * ПриведенныйЗеленый;
	Синий = 255 * ПриведенныйСиний;
	
КонецПроцедуры

// Возвращает компоненты дополнительного цвета по модели HSV, по переданным компонентам HSV
//
// Параметры:
//	Тон - Число - от 0 до 360 (градусов)
//	Насыщенность - Число - от 0 до 100 (%)
//	Светлота - Число - от 0 до 100 (%)
//	НовыйТон - Число - возвращается значение от 0 до 360 (градусов)
//	НоваяНасыщенность - Число - возвращается значение от 0 до 100 (%)
//	НоваяСветлота - Число - возвращается значение от 0 до 100 (%)
//
Процедура ПолучитьДополнительныйЦветПоHSV(Тон, Насыщенность, Светлота, НовыйТон, НоваяНасыщенность, НоваяСветлота) Экспорт
	
	ПриведеннаяНасыщенность = Насыщенность/100;
	ПриведеннаяСветлота = Светлота/100;
	
	Если Тон >= 180 Тогда
		НовыйТон = Тон - 180;
		
	Иначе
		НовыйТон = Тон + 180;
		
	КонецЕсли;
	
	НоваяНасыщенность = 100 * (Светлота * Насыщенность) / (Светлота * (Насыщенность - 1) + 1);
	
	НоваяСветлота = 100 * (Светлота * (Насыщенность - 1) + 1);
	
КонецПроцедуры

// Возвращает компоненты дополнительного цвета по модели HSV, по переданным компонентам RGB
//
// Параметры:
//	Красный - Число - от 0 до 255
//	Зеленый - Число - от 0 до 255
//	Синий - Число - от 0 до 255
//	НовыйКрасный - Число - возвращается значение от 0 до 255
//	НовыйЗеленый - Число - возвращается значение от 0 до 255
//	НовыйСиний - Число - возвращается значение от 0 до 255
//
Процедура ПолучитьДополнительныйЦветПоRGB(Красный, Зеленый, Синий, НовыйКрасный, НовыйЗеленый, НовыйСиний) Экспорт
	
	Тон = 0;
	Насыщенность = 0;
	Светлота = 0;
	
	ПолучитьHSVпоRGB(Красный, Зеленый, Синий, Тон, Насыщенность, Светлота);
	ПолучитьДополнительныйЦветПоHSV(Тон, Насыщенность, Светлота, Тон, Насыщенность, Светлота);
	ПолучитьRGBпоHSV(Тон, Насыщенность, Светлота, НовыйКрасный, НовыйЗеленый, НовыйСиний);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Длительные операции


//Процедура вызывается из фонового задания для подготовки данных для заполнения 
//монитора целевых показателей
// Параметры:
//	ПараметрыСоставаМонитора - структура параметров для подготовки данных
//  АдресХранилища - адрес временного хранилища с подготовленными данными
//
//Процедура ПодготовитьДанныеДляЗаполненияВиджетов(ПараметрыСоставаВиджетов, АдресХранилища) Экспорт
//	
//	Обработки.ркРабочийСтолСтраницаПоказатели.ПодготовитьДанныеДляЗаполненияВиджетов(ПараметрыСоставаВиджетов, АдресХранилища);
//	
//КонецПроцедуры

//Процедура вызывается из фонового задания для подготовки данных для заполнения 
//монитора целевых показателей
// Параметры:
//	ПараметрыСоставаМонитора - структура параметров для подготовки данных
//  АдресХранилища - адрес временного хранилища с подготовленными данными
//
Процедура ПодготовитьДанныеДляЗаполненияОбщие(ПараметрыСостава, АдресХранилища_1, АдресХранилища_2) Экспорт
	
	Отчеты.CRM_МониторЦелевыхПоказателей.ПодготовитьДанныеДляЗаполнения(ПараметрыСостава.ПараметрыСоставаМонитора, АдресХранилища_1);
	//Обработки.ркРабочийСтолСтраницаПоказатели.ПодготовитьДанныеДляЗаполненияВиджетов(ПараметрыСостава.ПараметрыСоставаВиджетов, АдресХранилища_2);
	
КонецПроцедуры

//Процедура вызывается из фонового задания для подготовки данных для заполнения 
//монитора целевых показателей
// Параметры:
//	ПараметрыСоставаМонитора - структура параметров для подготовки данных
//  АдресХранилища - адрес временного хранилища с подготовленными данными
//
Процедура ПодготовитьДанныеДляЗаполненияДиаграммы(ПараметрыСоставаВиджетов, АдресХранилища) Экспорт
	
	//Обработки.ркРабочийСтолСтраницаВзаимодействия.ПодготовитьДанныеДляЗаполненияДиаграммы(ПараметрыСоставаВиджетов, АдресХранилища);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прогнозирование.

// Функция рассчитывает прогноз на основании переданной таблицы значений и дополняет ее при необходимости
//
// Параметры:
//   КолонкаХ       - строка, наименование колонки для данных по оси Х.
//   КолонкаУ       - строка, наименование колонки для данных по оси У.
//   Базис          - Структура:
//                    ДатаНачала, дата - базовая дата отчета.
//					  Период    , ТипЕдиницыИнтервалаВремениАнализаДанных - Используемый период для расчета.
//                    КоличествоПериодов, Число - количество периодов между соседними значениями дат по оси Х.
//   ГлубинаАнализа - смещение по оси Х, в пределах которого рассчитывается тренд.
//   Смещение       - смещение по оси Х, в пределах которого рассчитываются экстраполируемые значения.
//   ДополнятьТаблицу - булево, Истина - в таблицу значений добавляются экстраполированные значения.
// Возвращаемое значение:
//
//   Структура     - Значение      - Число,  экстраполированное значение для смещения по оси Х, или неопределено, при ошибке в расчете.
//                   Адекватность  - Число,  значение коэффициента отклонения.
//                   СпособРасчета - Строка, содержит наименование метода расчета.
//
Функция СформироватьПрогнозныеЗначенияИсточникаДанных(ИсточникДанных, КолонкаХ, КолонкаУ, КолонкаПризнак = Неопределено, Базис, ГлубинаАнализа, Смещение, ДополнятьТаблицу = Ложь, Прогноз = Ложь)
	
	СтруктураНеобходимостиРасчетов = Новый Структура("Линейная, Логарифмическая, Квадратичная, Экспоненциальная"
	, Истина
	, Истина
	, Истина
	, Истина);
	ПозицияБазиса = 0;
	
	СумФакт=0;
	СумЛогФакт=0;
	СумФактАргумент=0;
	СумФактЛогАргумент=0;
	СумЛогФактАргумент=0;
	СумФактАргумент2=0;
	СумАргумент=0;
	СумЛогАргумент=0;
	СумАргумент2=0;
	СумЛогАргумент2=0;
	СумАргумент3=0;
	СумАргумент4=0;
	ЗнакОткл=1;
	
	ТаблицаЗначений = ИсточникДанных.Данные;
	ДатаПослФактЗначения = ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения;
	
	Если ТаблицаЗначений.Найти(Базис.ДатаНачала, КолонкаХ) = Неопределено Тогда
		Возврат Новый Структура("Значение, Адекватность, СпособРасчета, Пустой", 0, 0, Неопределено, Истина);
	КонецЕсли;
	
	// Всегда подается с непрерывным интервалом
	РабочаяТаблица = ТаблицаСНепрерывнымИнтервалом(ТаблицаЗначений, Базис, ГлубинаАнализа, КолонкаХ, КолонкаУ, ПозицияБазиса); 
	
	Если РабочаяТаблица = Неопределено Тогда
		Возврат Новый Структура("Значение, Адекватность, СпособРасчета, Пустой", 0, 0, Неопределено, Истина);
	КонецЕсли;
	
	РабочаяТаблица.Сортировать("ПорядковыйНомер");
	
	Для Каждого Строка Из РабочаяТаблица Цикл
		
		НомерСтроки = Строка.ПорядковыйНомер;
		
		НомерПериода=0;
		
		Факт=Строка.Значение;
		
		
		СумФакт=СумФакт+Факт;
		СумЛогФакт=СумЛогФакт+?(Факт>0,Log(Факт),0);
		СумФактАргумент=СумФактАргумент+Факт*НомерСтроки;
		СумФактЛогАргумент=СумФактЛогАргумент+Факт*Log(НомерСтроки);
		СумЛогФактАргумент=СумЛогФактАргумент+?(Факт>0,Log(Факт),0)*НомерСтроки;
		СумФактАргумент2=СумФактАргумент2+Факт*Pow(НомерСтроки,2);
		СумАргумент=СумАргумент+НомерСтроки;
		СумЛогАргумент=СумЛогАргумент+Log(НомерСтроки);
		СумАргумент2=СумАргумент2+Pow(НомерСтроки,2);
		СумЛогАргумент2=СумЛогАргумент2+Pow(Log(НомерСтроки),2);
		СумАргумент3=СумАргумент3+Pow(НомерСтроки,3);
		СумАргумент4=СумАргумент4+Pow(НомерСтроки,4);
		
	КонецЦикла; 
	КолФакт  = РабочаяТаблица.Количество();
	СредФакт = ?(КолФакт>0,СумФакт/КолФакт,0);
	
	// Формулы Крамера для линейной аппроксимации
	Если СтруктураНеобходимостиРасчетов.Линейная Тогда
		ОпределительЛинПолный = КолФакт*СумАргумент2-Pow(СумАргумент,2);
		ОпределительЛин1      = СумФакт*СумАргумент2-СумАргумент*СумФактАргумент;
		ОпределительЛин2      = КолФакт*СумФактАргумент-СумФакт*СумАргумент;
		
		Если ОпределительЛинПолный=0 тогда
			СтруктураНеобходимостиРасчетов.Линейная = Ложь;
		Иначе
			КоэффициентЛинейной1=ОпределительЛин1/ОпределительЛинПолный;
			КоэффициентЛинейной2=ОпределительЛин2/ОпределительЛинПолный;
		КонецЕсли; 
	КонецЕсли;
	// Формулы Крамера для экспоненциальной аппроксимации
	Если СтруктураНеобходимостиРасчетов.Экспоненциальная Тогда
		ОпределительЭкспПолный = КолФакт*СумАргумент2-Pow(СумАргумент,2);
		ОпределительЭксп1      = СумЛогФакт*СумАргумент2-СумАргумент*СумЛогФактАргумент;
		ОпределительЭксп2      = КолФакт*СумЛогФактАргумент-СумЛогФакт*СумАргумент;
		
		Если ОпределительЭкспПолный=0 тогда
			СтруктураНеобходимостиРасчетов.Экспоненциальная = Ложь;
		Иначе
			КоэффициентЭкспоненциальной1=Exp(ОпределительЭксп1/ОпределительЭкспПолный);
			КоэффициентЭкспоненциальной2=ОпределительЭксп2/ОпределительЭкспПолный;
		КонецЕсли;
	КонецЕсли;
	// Формулы Крамера для логарифмической аппроксимации
	Если СтруктураНеобходимостиРасчетов.Логарифмическая Тогда
		ОпределительЛогПолный = КолФакт*СумЛогАргумент2-Pow(СумЛогАргумент,2);
		ОпределительЛог1      = СумФакт*СумЛогАргумент2-СумЛогАргумент*СумФактЛогАргумент;
		ОпределительЛог2      = КолФакт*СумФактЛогАргумент-СумФакт*СумЛогАргумент;
		
		Если ОпределительЛогПолный=0 тогда
			СтруктураНеобходимостиРасчетов.Логарифмическая = Ложь;
		Иначе
			КоэффициентЛогарифмической1=ОпределительЛог1/ОпределительЛогПолный;
			КоэффициентЛогарифмической2=ОпределительЛог2/ОпределительЛогПолный;
		КонецЕсли;
		
	КонецЕсли;
	// Формулы Крамера для квадратичной аппроксимации
	Если СтруктураНеобходимостиРасчетов.Квадратичная Тогда
		ОпределительКвПолный =КолФакт*СумАргумент2*СумАргумент4+2*СумАргумент*СумАргумент2*СумАргумент3-
		Pow(СумАргумент2,3)-КолФакт*Pow(СумАргумент3,2)-Pow(СумАргумент,2)*СумАргумент4;
		ОпределительКв1      =СумФакт*СумАргумент2*СумАргумент4+СумАргумент*СумАргумент3*СумФактАргумент2+СумФактАргумент*СумАргумент2*СумАргумент3-
		Pow(СумАргумент2,2)*СумФактАргумент2-СумФактАргумент*СумАргумент*СумАргумент4-Pow(СумАргумент3,2)*СумФакт;
		ОпределительКв2      =КолФакт*СумФактАргумент*СумАргумент4+СумФакт*СумАргумент3*СумАргумент2+СумАргумент*СумФактАргумент2*СумАргумент2-
		Pow(СумАргумент2,2)*СумФактАргумент-СумФакт*СумАргумент*СумАргумент4-КолФакт*СумФактАргумент2*СумАргумент3;
		ОпределительКв3      =КолФакт*СумАргумент2*СумФактАргумент2+СумАргумент*СумФактАргумент*СумАргумент2+СумАргумент*СумАргумент3*СумФакт-
		Pow(СумАргумент2,2)*СумФакт-Pow(СумАргумент,2)*СумФактАргумент2-КолФакт*СумАргумент3*СумФактАргумент;
		
		Если ОпределительКвПолный=0 тогда
			СтруктураНеобходимостиРасчетов.Квадратичная = Ложь;
		Иначе
			КоэффициентКвадратичной1=ОпределительКв1/ОпределительКвПолный;
			КоэффициентКвадратичной2=ОпределительКв2/ОпределительКвПолный;
			КоэффициентКвадратичной3=ОпределительКв3/ОпределительКвПолный;
		КонецЕсли;
		
	КонецЕсли;
	
	СумОстЛинейной=0;
	СумОстКвадратичной=0;
	СумОстЭкспоненциальной=0;
	СумОстЛогарифмической=0;
	СумПолн=0;
	
	Для Каждого Строка Из РабочаяТаблица Цикл
		
		Факт 		= Строка.Значение;
		НомерСтроки = Строка.ПорядковыйНомер;
		
		Если СтруктураНеобходимостиРасчетов.Линейная Тогда
			РасчетПоЛинейной=КоэффициентЛинейной1+КоэффициентЛинейной2*НомерСтроки;
			СумОстЛинейной=СумОстЛинейной+Pow((Факт-РасчетПоЛинейной),2);
		КонецЕсли;
		
		Если СтруктураНеобходимостиРасчетов.Квадратичная Тогда
			РасчетПоКвадратичной=КоэффициентКвадратичной1+КоэффициентКвадратичной2*НомерСтроки+КоэффициентКвадратичной3*Pow(НомерСтроки,2);
			СумОстКвадратичной=СумОстКвадратичной+Pow((Факт-РасчетПоКвадратичной),2);
		КонецЕсли;
		
		Если СтруктураНеобходимостиРасчетов.Экспоненциальная Тогда
			РасчетПоЭкспоненциальной=КоэффициентЭкспоненциальной1*Exp(КоэффициентЭкспоненциальной2*НомерСтроки);
			СумОстЭкспоненциальной=СумОстЭкспоненциальной+Pow((Факт-РасчетПоЭкспоненциальной),2);
		КонецЕсли;
		
		Если СтруктураНеобходимостиРасчетов.Логарифмическая Тогда
			РасчетПоЛогарифмической=КоэффициентЛогарифмической1+КоэффициентЛогарифмической2*Log(НомерСтроки);
			СумОстЛогарифмической=СумОстЛогарифмической+Pow((Факт-РасчетПоЛогарифмической),2);
		КонецЕсли;
		
		СумПолн=СумПолн+Pow((СредФакт-Факт),2);
		
	КонецЦикла;
	
	МаксКоэффициент   = Неопределено;
	ВыбранноеЗначение = Неопределено;
	
	Если СтруктураНеобходимостиРасчетов.Линейная Тогда
		КоэффДетЛинейной=?(СумПолн<>0,1-СумОстЛинейной/СумПолн,1);
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Линейная";
			МаксКоэффициент   = КоэффДетЛинейной;
		ИначеЕсли МаксКоэффициент < КоэффДетЛинейной Тогда
			ВыбранноеЗначение = "Линейная";
			МаксКоэффициент   = КоэффДетЛинейной;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНеобходимостиРасчетов.Квадратичная Тогда
		
		КоэффДетКвадратичной=?(СумПолн<>0,1-СумОстКвадратичной/СумПолн,0);
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Квадратичная";
			МаксКоэффициент   = КоэффДетКвадратичной;
		ИначеЕсли МаксКоэффициент < КоэффДетКвадратичной Тогда
			ВыбранноеЗначение = "Квадратичная";
			МаксКоэффициент   = КоэффДетКвадратичной;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНеобходимостиРасчетов.Логарифмическая Тогда
		
		КоэффДетЛогарифмической=?(СумПолн<>0,1-СумОстЛогарифмической/СумПолн,0);
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Логарифмическая";
			МаксКоэффициент   = КоэффДетЛогарифмической;
		ИначеЕсли МаксКоэффициент < КоэффДетЛогарифмической Тогда
			ВыбранноеЗначение = "Логарифмическая";
			МаксКоэффициент   = КоэффДетЛогарифмической;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНеобходимостиРасчетов.Экспоненциальная Тогда
		
		КоэффДетЭкспоненциальной=?(СумПолн<>0,1-СумОстЭкспоненциальной/СумПолн,0);
		
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Экспоненциальная";
			МаксКоэффициент   = КоэффДетЭкспоненциальной;
		ИначеЕсли МаксКоэффициент < КоэффДетЭкспоненциальной Тогда
			ВыбранноеЗначение = "Экспоненциальная";
			МаксКоэффициент   = КоэффДетЭкспоненциальной;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат Новый Структура("Значение, Адекватность, СпособРасчета, Пустой", 0, 0, Неопределено, Истина);
	КонецЕсли;
	
	Если ДополнятьТаблицу Тогда
		Если Прогноз Тогда
			КолонкаПрогноза = ТаблицаЗначений.Колонки.Добавить("Прогноз");//, ркОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3), "Прогноз");
		Иначе
			КолонкаТренда = ТаблицаЗначений.Колонки.Добавить("Тренд");//, ркОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3), "Тренд");
		КонецЕсли;
		КолонкаПризнака = ТаблицаЗначений.Колонки.Добавить(КолонкаПризнак, ПолучитьОписаниеТиповБулево(), КолонкаПризнак);
	КонецЕсли;
	
	БазовоеЗначение = ПолучитьБазовоеЗначениеДляДиаграмм();
	
	Для Инд = ?(ДополнятьТаблицу, 0, Смещение) По Смещение Цикл
		
		Аргумент = ПозицияБазиса + Инд;
		
		Если Не Инд = 0 И ВыбранноеЗначение = "Линейная" тогда
			
			// Линейная аппроксимация
			
			СуммаРасч    = КоэффициентЛинейной1+КоэффициентЛинейной2*Аргумент;
			Адекватность = КоэффДетЛинейной;
		ИначеЕсли Не Инд = 0 И ВыбранноеЗначение = "Квадратичная" тогда
			
			// Квадратичная аппроксимация
			
			СуммаРасч=КоэффициентКвадратичной1+КоэффициентКвадратичной2*Аргумент+КоэффициентКвадратичной3*Pow(Аргумент,2); 
			Адекватность = КоэффДетКвадратичной;
			
		ИначеЕсли Не Инд = 0 И ВыбранноеЗначение = "Экспоненциальная" тогда
			
			// Экспоненциальная аппроксимация
			
			СуммаРасч=КоэффициентЭкспоненциальной1*Exp(КоэффициентЭкспоненциальной2*Аргумент); 
			Адекватность = КоэффДетЭкспоненциальной;
			
		ИначеЕсли Не Инд = 0 И ВыбранноеЗначение = "Логарифмическая" тогда
			
			// Логарифмическая аппроксимация
			
			СуммаРасч=КоэффициентЛогарифмической1+КоэффициентЛогарифмической2*Log(Аргумент);
			Адекватность = КоэффДетЛогарифмической;
			
		КонецЕсли;
		
		Если ДополнятьТаблицу Тогда
			ТекДата = ДатаСоСмещением(Базис.ДатаНачала, Базис.Период, Инд * Базис.КоличествоПериодов);
			
			СтрокаССуществующимПериодом = ТаблицаЗначений.Найти(ТекДата, КолонкаХ);
			
			Если СтрокаССуществующимПериодом = Неопределено Тогда
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока[КолонкаХ] = ТекДата;
				НоваяСтрока[КолонкаУ] = БазовоеЗначение;
				
			Иначе 
				НоваяСтрока = СтрокаССуществующимПериодом;
				Если ТекДата > ДатаПослФактЗначения Тогда
					НоваяСтрока[КолонкаУ] = БазовоеЗначение;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Прогноз Тогда
				Если ТекДата = ДатаПослФактЗначения Тогда
					НоваяСтрока[КолонкаПрогноза.Имя] = НоваяСтрока[КолонкаУ];
					
				Иначе
					НоваяСтрока[КолонкаПрогноза.Имя] = СуммаРасч;
					
				КонецЕсли;
				
			Иначе 
				НоваяСтрока[КолонкаТренда.Имя] = СуммаРасч;
				
			КонецЕсли;
			
			Если КолонкаПризнак <> Неопределено Тогда
				НоваяСтрока[КолонкаПризнак] = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДополнятьТаблицу Тогда 
		
		// Заполним базовым значением "пустых" точек трендов и прогнозов
		ОтборНеПризнак = Новый Структура("Признак", Ложь);
		СтрокиНеПризнак = ТаблицаЗначений.НайтиСтроки(ОтборНеПризнак);
		Для Каждого СтрокаНеПризнак Из СтрокиНеПризнак Цикл 
			
			СтрокаНеПризнак[?(Прогноз, КолонкаПрогноза.Имя, КолонкаТренда.Имя)] = БазовоеЗначение;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый Структура("Значение, Адекватность, СпособРасчета, Пустой", СуммаРасч, Адекватность, ВыбранноеЗначение, Ложь);
	
КонецФункции

// Формирует таблицу, в которой строки идут с заданным шагом по датам
//
// Параметры:
//	ТаблицаЗначений  - исходные данные
//	КолонкаХ		 - строка, наименование колонки для данных по оси Х.
//	КолонкаУ		 - строка, наименование колонки для данных по оси У.
//	Базис			 - Структура:
//						ДатаНачала - Дата - базовая дата отчета.
//						Период, ТипЕдиницыИнтервалаВремениАнализаДанных - используемый период для расчета.
//						КоличествоПериодов - Число - количество периодов между соседними значениями дат по оси Х.
//	ГлубинаАнализа	 - Число - смещение по оси Х, в пределах которого рассчитывается тренд.
//	Смещение		 - Число - смещение по оси Х, в пределах которого рассчитываются экстраполируемые значения.
//	ДополнятьТаблицу - Булево - Истина - в таблицу значений добавляются экстраполированные значения.
//
// Возвращаемое значение:
//	ТаблицаЗначений - если удалось обработать
//	Неопределено - если данных недостаточно для экстраполяции
//
Функция ТаблицаСНепрерывнымИнтервалом(Знач ТаблицаЗначений, Базис, ГлубинаАнализа, КолонкаХ, КолонкаУ, ПозицияБазиса)
	
	РабочаяТаблица = Новый ТаблицаЗначений;
	
	РабочаяТаблица.Колонки.Добавить("ПорядковыйНомер");
	РабочаяТаблица.Колонки.Добавить("Дата");
	РабочаяТаблица.Колонки.Добавить("Значение");
	
	ПоследнееЗаполненное		= Неопределено;
	КоличествоЗаполненныхДанных = 0;
	ПорядковыйНомер				= 1;
	
	Для Инд = 1 По ГлубинаАнализа Цикл
		ТекДата		= ДатаСоСмещением(Базис.ДатаНачала, Базис.Период, (Инд - ГлубинаАнализа) * Базис.КоличествоПериодов);
		ФактСтрока	= ТаблицаЗначений.Найти(ТекДата, КолонкаХ);
		
		Если ФактСтрока = Неопределено Тогда
			
			Если ПоследнееЗаполненное <> Неопределено Тогда
				НоваяСтрока = РабочаяТаблица.Добавить();       	
				НоваяСтрока.ПорядковыйНомер = ПорядковыйНомер;
				НоваяСтрока.Дата            = ТекДата;
				НоваяСтрока.Значение        = 0;
				ПорядковыйНомер             = ПорядковыйНомер + 1;
			КонецЕсли;
			
		Иначе
			НоваяСтрока = РабочаяТаблица.Добавить();
			НоваяСтрока.ПорядковыйНомер = ПорядковыйНомер;
			НоваяСтрока.Дата			= ТекДата;
			НоваяСтрока.Значение		= ФактСтрока[КолонкаУ];
			КоличествоЗаполненныхДанных = КоличествоЗаполненныхДанных + 1;
			Если ПоследнееЗаполненное <> Неопределено И ПоследнееЗаполненное < ПорядковыйНомер - 1 Тогда
				НачЗначение = РабочаяТаблица.Найти(ПоследнееЗаполненное, "ПорядковыйНомер").Значение;
				КонЗначение = НоваяСтрока.Значение;
				Коэффициент = (КонЗначение - НачЗначение) / (ПорядковыйНомер - ПоследнееЗаполненное + 1);
				
				Для Инд2 = ПоследнееЗаполненное + 1 По ПорядковыйНомер - 1 Цикл
					ПустойПериод		  = РабочаяТаблица.Найти(Инд2, "ПорядковыйНомер");
					ПустойПериод.Значение = НачЗначение + Коэффициент * Инд2;
				КонецЦикла;
				
			КонецЕсли;
			
			ПоследнееЗаполненное = ПорядковыйНомер;
			ПорядковыйНомер = ПорядковыйНомер + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоЗаполненныхДанных < 2 Тогда 
		#Если Клиент Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Недостаточно данных для экстраполяции");
		#КонецЕсли
		Возврат Неопределено;
		
	Иначе
		ПозицияБазиса = ПорядковыйНомер - 1;
		Возврат РабочаяТаблица;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Зоны анализа значений целевых показателей.

// Возвращает зону анализа источника данных
//
// Параметры:
//	ИсточникДанных - Структура - специально подготовленная структура с расчетными данными, характеристиками и прогнозом
//	ВидЦелевогоЗначения - Перечисление - диапазон или значение
//	ТочностьРасчетаДробнойЧасти - Число - целое число, устанавливающее степень округления при расчетах
//
// Возвращаемое значение:
//	ЗонаАнализа - Структура - содержит указание на зону анализа и характер изменений
//					Факт - Число - зона, в которой находится последнее фактическое значение 
//									(матрица в макете справочника "Показатели" - "МатрицаСостоянийПоказателей")
//					ФактическийТренд - Строка - характер изменений показателя "Рост", "Падение", "БезИзменений"
//
Функция ЗонаАнализаЗначения(Показатель, ТаблицаДанных)
	
		КонтролируемыйПоказатель = Показатель.КонтролируемыйПоказатель;
		Если Показатель.КратностьЗначений = "НеИзменять" Тогда
			КратностьЗначений = 1;
		ИначеЕсли Показатель.КратностьЗначений = "Тысячи" Тогда	
			КратностьЗначений = 1000; 
		ИначеЕсли Показатель.КратностьЗначений = "Миллионы" Тогда	
			КратностьЗначений = 1000000;	
		КонецЕсли;
		
		Если Показатель.ДробнаяЧасть = "Целое" Тогда
			ДробнаяЧасть = 0;
		ИначеЕсли Показатель.ДробнаяЧасть = "Десятые" Тогда	
			ДробнаяЧасть = 1; 
		ИначеЕсли Показатель.ДробнаяЧасть = "Сотые" Тогда	
			ДробнаяЧасть = 2;	
		ИначеЕсли Показатель.ДробнаяЧасть = "Тысячные" Тогда	
			ДробнаяЧасть = 3;	
		КонецЕсли;
		
		Если  Показатель.ЦелевойТренд = "Максимум" Тогда
			
			ПлановоеЗначение = Окр(ТаблицаДанных.Итог("ЗначениеПоказателя")/КратностьЗначений, ДробнаяЧасть, 1);
			ТекущееЗначение = Окр(ТаблицаДанных.Итог(КонтролируемыйПоказатель)/КратностьЗначений, ДробнаяЧасть, 1);
			
			ПерваяОтсечка = Окр(ПлановоеЗначение*0.5, ДробнаяЧасть, 1);
			
			Если ТекущееЗначение<ПерваяОтсечка Тогда
				Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.КритическоеСостояние;
			ИначеЕсли ТекущееЗначение>= ПерваяОтсечка И ТекущееЗначение<Окр(ПлановоеЗначение*0.8, ДробнаяЧасть, 1) Тогда
				Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.Важно;
			ИначеЕсли ТекущееЗначение>= Окр(ПлановоеЗначение*0.8, ДробнаяЧасть, 1) Тогда
				Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.КСведению;
			Иначе
				Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.РассчитанныеСОшибками;
			КонецЕсли;
			
		ИначеЕсли  Показатель.ЦелевойТренд = "Минимум" Тогда
			
			ПлановоеЗначение = Окр(ТаблицаДанных.Итог("ЗначениеПоказателя")/КратностьЗначений, ДробнаяЧасть, 1);
			ТекущееЗначение = Окр(ТаблицаДанных.Итог(КонтролируемыйПоказатель)/КратностьЗначений, ДробнаяЧасть, 1);
			
			ПерваяОтсечка = Окр(ПлановоеЗначение*1.2, ДробнаяЧасть, 1);
			
			Если ПлановоеЗначение = 0 Тогда
				Если ТекущееЗначение<1 Тогда
					Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.КСведению;
				ИначеЕсли ТекущееЗначение>= 1 И ТекущееЗначение<3 Тогда
					Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.Важно;
				ИначеЕсли ТекущееЗначение>= 3 Тогда
					Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.КритическоеСостояние;
				Иначе
					Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.РассчитанныеСОшибками;
				КонецЕсли;
			Иначе	
				Если ТекущееЗначение<Окр(ПлановоеЗначение*1.2, ДробнаяЧасть, 1) Тогда
					Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.КСведению;
				ИначеЕсли ТекущееЗначение>= Окр(ПлановоеЗначение*1.2, ДробнаяЧасть, 1) И ТекущееЗначение<Окр(ПлановоеЗначение*1.5, ДробнаяЧасть, 1) Тогда
					Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.Важно;
				ИначеЕсли ТекущееЗначение>= Окр(ПлановоеЗначение*1.5, ДробнаяЧасть, 1) Тогда
					Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.КритическоеСостояние;
				Иначе
					Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.РассчитанныеСОшибками;
				КонецЕсли;
			КонецЕсли;	
		Иначе
			
			ПлановоеЗначениеМин = Окр(ТаблицаДанных.Итог("ЗначениеПоказателя")/КратностьЗначений, ДробнаяЧасть, 1);
			ПлановоеЗначениеМакс = Окр(ТаблицаДанных.Итог("ЗначениеПоказателяМаксимум")/КратностьЗначений, ДробнаяЧасть, 1);
			ТекущееЗначение = Окр(ТаблицаДанных.Итог(КонтролируемыйПоказатель)/КратностьЗначений, ДробнаяЧасть, 1);
			
			Если ТекущееЗначение >= Окр(ПлановоеЗначениеМин*0.8, ДробнаяЧасть, 1) И  ТекущееЗначение < Окр(ПлановоеЗначениеМин*1.2, ДробнаяЧасть, 1) Тогда
				Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.КСведению;
			ИначеЕсли ТекущееЗначение>= Окр(ПлановоеЗначениеМин*0.5, ДробнаяЧасть, 1) И ТекущееЗначение<Окр(ПлановоеЗначениеМин*0.8, ДробнаяЧасть, 1) Тогда
				Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.Важно;
			ИначеЕсли ТекущееЗначение<Окр(ПлановоеЗначениеМин*0.5, ДробнаяЧасть, 1) Тогда
				Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.КритическоеСостояние;
			Иначе
				Возврат Перечисления.CRM_ЗоныВниманияАнализаПоказателей.РассчитанныеСОшибками;
			КонецЕсли;
			
		КонецЕсли;
	
КонецФункции

Функция ПроцентВыполнения(Показатель, ТаблицаДанных)
	
	КонтролируемыйПоказатель = Показатель.КонтролируемыйПоказатель;
	Если  Показатель.ЦелевойТренд = "Максимум" Тогда
		Если ТаблицаДанных.Итог("ЗначениеПоказателя") <> 0 Тогда
			ПроцентВыполнения = ТаблицаДанных.Итог(КонтролируемыйПоказатель)/ТаблицаДанных.Итог("ЗначениеПоказателя")*100;
		Иначе
			ПроцентВыполнения = 0;
		КонецЕсли;
	ИначеЕсли  Показатель.ЦелевойТренд = "Минимум" Тогда
		Если ТаблицаДанных.Итог("ЗначениеПоказателя") <> 0 Тогда
			ПроцентВыполнения = (1-ТаблицаДанных.Итог(КонтролируемыйПоказатель)/ТаблицаДанных.Итог("ЗначениеПоказателя"))*100;
		Иначе
			ПроцентВыполнения = 100;
		КонецЕсли;
	Иначе
		ПлановоеЗначениеМин = ТаблицаДанных.Итог("ЗначениеПоказателя");
		ПлановоеЗначениеМакс = ТаблицаДанных.Итог("ЗначениеПоказателяМаксимум");
		ТекущееЗначение = ТаблицаДанных.Итог(КонтролируемыйПоказатель);
		ПроцентВыполнения = ТекущееЗначение/((ПлановоеЗначениеМакс+ПлановоеЗначениеМин)/2)*100;
	КонецЕсли;
	
	Возврат Строка(Цел(ПроцентВыполнения))+"%";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с периодами и датами.

Функция ДатаСоСмещениемДляДекады(Знач РасчетнаяДата, Знач Смещение)
	
	// анализируем
	ГодДатыНачала						= Год(РасчетнаяДата);
	МесяцДатыНачала						= Месяц(РасчетнаяДата);
	ДеньДатыНачала						= День(РасчетнаяДата);
	ДекадаДатыНачала					= Цел((ДеньДатыНачала - 1) / 10) + 1;
	ДекадаДатыНачала					= ?(ДекадаДатыНачала = 4, 3, ДекадаДатыНачала);
	НомерДекадыНЭ						= ГодДатыНачала * 36 + (МесяцДатыНачала - 1) * 3 + (ДекадаДатыНачала - 1);
	
	// изменяем
	НомерДекадыНЭ						= НомерДекадыНЭ + Смещение;
	
	// синтезируем
	ГодДатыНачалаОтнПериода				= Цел((НомерДекадыНЭ)/ 36);
	ДекадаВГоду							= НомерДекадыНЭ % 36;
	МесяцВГодуДатыНачалаОтнПериода		= Цел(ДекадаВГоду / 3) + 1;
	ДекадаВМесяце						= ДекадаВГоду % 3;
	ДеньВМесяцеДатыНачалаОтнПериода		= ДекадаВМесяце * 10 + 1;
	
	Возврат Дата(ГодДатыНачалаОтнПериода, МесяцВГодуДатыНачалаОтнПериода, ДеньВМесяцеДатыНачалаОтнПериода);
	
КонецФункции

// Возвращает таблицу значений, дополненную невошедшими датами 
// для последующего использования в качестве объекта СКД
//
// Параметры
//  НачалоПериода 	- Дата - начало периода
//  КонецПериода	- Дата - окончание периода
//  Периодичность	- Строка - принимает значения "ДЕНЬ,НЕДЕЛЯ,ДЕКАДА,МЕСЯЦ,КВАРТАЛ,ПОЛУГОДИЕ,ГОД"
//
// Возвращаемое значение:
//   ТаблицаЗначений	 - таблица значений, содержащая колонку "Период" и значения периодов
//
Функция ДополнитьТаблицуПериодов(Знач ТаблицаПериодов, НачалоПериода, КонецПериода, Периодичность) 
	
	Периодичности = Перечисления.Периодичность;
	
	РазностьДат = РазностьДат(НачалоПериода, КонецПериода, Периодичность);
	
	Счетчик = 0;
	Пока Счетчик <= РазностьДат Цикл 
		ДобавляемыйПериод = ДатаСоСмещением(НачалоПериода, Периодичность, Счетчик);
		
		ИскомаяСтрока = ТаблицаПериодов.Найти(ДобавляемыйПериод, "Период");
		Если ИскомаяСтрока = Неопределено Тогда
			НовыйПериод = ТаблицаПериодов.Добавить();
			НовыйПериод.Период = ДобавляемыйПериод;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	ТаблицаПериодов.Сортировать("Период");
	
	Возврат ТаблицаПериодов;
	
КонецФункции

Процедура ЗаменитьИмяПериодичности(Выражение, НовоеИмяПериодичности)
	
	Выражение = СтрЗаменить(Выражение, НСтр("ru='""ДЕНЬ""'"), """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, НСтр("ru='""НЕДЕЛЯ""'"), """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, НСтр("ru='""ДЕКАДА""'"), """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, НСтр("ru='""МЕСЯЦ""'"), """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, НСтр("ru='""КВАРТАЛ""'"), """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, НСтр("ru='""ПОЛУГОДИЕ""'"), """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, НСтр("ru='""ГОД""'"), """" + НовоеИмяПериодичности + """");
	
КонецПроцедуры

Функция ПериодАктуальностиРасчетаВМинутах(КоличествоПериодов, ВидПериодаАктуальностиРасчета)
	
	ПериодВМинутах = 0;
	
	//ВидыПериодовАктуальностиРасчета = Перечисления.ркВидыПериодовАктуальностиРасчета;
	//
	//Если ВидПериодаАктуальностиРасчета = ВидыПериодовАктуальностиРасчета.День Тогда
	//	ПериодВМинутах = КоличествоПериодов * 1440;
	//ИначеЕсли ВидПериодаАктуальностиРасчета = ВидыПериодовАктуальностиРасчета.Час Тогда
	//	ПериодВМинутах = КоличествоПериодов * 60;
	//ИначеЕсли ВидПериодаАктуальностиРасчета = ВидыПериодовАктуальностиРасчета.Минута Тогда
	//	ПериодВМинутах = КоличествоПериодов;
	//КонецЕсли;
	
	Возврат ПериодВМинутах;
	
КонецФункции

Функция ПолучитьНачалоПериода(Дата, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат НачалоГода(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Возврат ДатаСоСмещением(НачалоГода(Дата), Периодичность, ?(Месяц(Дата)>6, 1, 0));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат НачалоКвартала(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоМесяца(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Возврат ДатаСоСмещением(НачалоГода(Дата), Периодичность, РазностьДат(НачалоГода(Дата), Дата, Периодичность));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоНедели(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		Возврат НачалоДня(Дата);
		
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу значений для последующего использования в качестве внешнего источника 
//
// Параметры
//  НачалоПериода 	- Дата - начало периода
//  КонецПериода	- Дата - окончание периода
//  Периодичность	- Строка - принимает значения "ДЕНЬ,НЕДЕЛЯ,ДЕКАДА,МЕСЯЦ,КВАРТАЛ,ПОЛУГОДИЕ,ГОД"
//
// Возвращаемое значение:
//   ТаблицаЗначений	 - таблица значений, содержащая колонку "Период" и значения периодов
//
Функция ПолучитьТаблицуПериодов(НачалоПериода, КонецПериода, Периодичность) Экспорт
	
	Перем ТаблицаПериодов;
	
	Периодичности = Перечисления.Периодичность;
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("Период");
	
	НовыйПериод = ТаблицаПериодов.Добавить();
	НовыйПериод.Период = НачалоПериода;
	
	РазностьДат = РазностьДат(НачалоПериода, КонецПериода, Периодичность);
	
	Счетчик = 1;
	Пока Счетчик <= РазностьДат Цикл 
		
		НовыйПериод = ТаблицаПериодов.Добавить();
		НовыйПериод.Период = ДатаСоСмещением(НачалоПериода, Периодичность, Счетчик);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

// Возвращает таблицу значений для последующего использования в качестве внешнего источника 
//
// Параметры
//  НачалоПериода 	- Дата - начало периода
//  КонецПериода	- Дата - окончание периода
//  Периодичность	- Перечисление.ркПериодичность - принимает значения "ДЕНЬ,НЕДЕЛЯ,ДЕКАДА,МЕСЯЦ,КВАРТАЛ,ПОЛУГОДИЕ,ГОД"
//
// Возвращаемое значение:
//   ТаблицаЗначений	 - таблица значений, содержащая колонку "ДатаРасчета" и значения периодов
//
Функция ПолучитьТаблицуПериодов_ДатыНаКонецПериода(НачалоПериода, КонецПериода, Периодичность) Экспорт
	
	Перем ТаблицаПериодов;
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ДатаРасчета");
	
	НовыйПериод = ТаблицаПериодов.Добавить();
	НовыйПериод.ДатаРасчета = КонецПериода(НачалоПериода, Периодичность);
	
	РазностьДат = РазностьДат(НачалоПериода, КонецПериода, Периодичность);
	
	Счетчик = 1;
	Пока Счетчик <= РазностьДат Цикл
		НовыйПериод = ТаблицаПериодов.Добавить();
		НовыйПериод.ДатаРасчета = КонецПериода(ДатаСоСмещением(НачалоПериода, Периодичность, Счетчик, Ложь), Периодичность);
		
		Счетчик = Счетчик + 1;		
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

// Возвращает таблицу значений для последующего использования в качестве внешнего источника
//
// Параметры
//	НачалоПериода - Дата - начало периода
//	КонецПериода- Дата - окончание периода
//	ШагПериодовСравнения- Перечисление.ркПериодичность - период, в котором будет выделен отрезок от начала и до окончания периода.
//	КоличествоПериодов- Число - количество сравниваемых периодов заданной периодичности
//	
//Пример: НачалоПериода = начало года, КонецПериода = текущая дата, ШагПериодовСравнения = год, КоличествоПериодов = 2
//	Будет получен набор периодов с начала года до тукущей даты за текущий и прошлый год
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица значений, содержащая колонки "ДатаНачалаРасчета", "ДатаОкончанияРасчета" и значения дат
//
Функция ПолучитьТаблицуПериодов_СравнениеСАналогичнымиПериодамиПрошлого(НачалоПериода, КонецПериода, ШагПериодовСравнения, КоличествоПериодов) Экспорт
	
	Перем ТаблицаПериодов;
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ДатаНачалаРасчета");
	ТаблицаПериодов.Колонки.Добавить("ДатаОкончанияРасчета");
	Для Счетчик = 0 По КоличествоПериодов - 1 Цикл
		НовыйПериод = ТаблицаПериодов.Добавить();
		НовыйПериод.ДатаНачалаРасчета = ДатаСоСмещением(НачалоПериода, ШагПериодовСравнения, -Счетчик, Ложь);
		НовыйПериод.ДатаОкончанияРасчета = ДатаСоСмещением(КонецПериода, ШагПериодовСравнения, -Счетчик, Ложь);
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

Функция КонецПериода(Дата, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		
		Возврат КонецГода(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		
		Возврат КонецМесяца(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		
		Возврат КонецКвартала(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		
		Возврат КонецМесяца(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		
		Возврат КонецДня(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		
		Возврат КонецНедели(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		
		Возврат КонецДня(Дата);
		
	Иначе 
		Возврат Дата;
	КонецЕсли;	
	
КонецФункции

Функция ПредставлениеСтандартногоПериода(ЗначениеСтандартногоПериода, ВыводитьВариант = Истина)
	
	ПредставлениеДатыНачала = Формат(ЗначениеСтандартногоПериода.ДатаНачала, "ДЛФ=D");
	ПредставлениеДатыОкончания = Формат(ЗначениеСтандартногоПериода.ДатаОкончания, "ДЛФ=D");
	
	ПредставлениеСтандартногоПериода = ?(ВыводитьВариант, Строка(ЗначениеСтандартногоПериода.Вариант) + " " + "(", "") + ПредставлениеДатыНачала + " - " + ПредставлениеДатыОкончания + ?(ВыводитьВариант, ")", "");
	
	Возврат ПредставлениеСтандартногоПериода;
	
КонецФункции

Функция ПрименитьФорматДаты(Дата, Периодичность)
	
	ФорматированнаяДата = "01.01.01";
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		ФорматированнаяДата = Формат(Дата(Дата), "ДФ='дд.ММ.гг ""г.""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ФорматированнаяДата = Формат(Дата(Дата), "ДФ='дд.ММ.гг ""г.""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		ФорматированнаяДата = Формат(Дата(Дата), "ДФ='дд.ММ.гг ""г.""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ФорматированнаяДата = Формат(Дата(Дата), "ДФ='МММ гггг ""г.""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ФорматированнаяДата = Формат(Дата(Дата), "ДФ='к ""кв.""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ФорматированнаяДата = Формат(Дата(Дата), "ДФ='к ""кв.""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ФорматированнаяДата = Формат(Дата(Дата), "ДФ='гггг ""г.""'");
	КонецЕсли;

	Возврат ФорматированнаяДата;
	
КонецФункции

Процедура УстановитьПериодВыраженийПолейИтогов(СхемаКомпоновки, Периодичность)
	
	ПоляИтогов = СхемаКомпоновки.ПоляИтога;
	ИмяПериодичности = ПолучитьИмяЗначенияПеречисления(Периодичность);
	
	ЗнаменательТребуется = Ложь;
	
	Для Каждого ПолеИтога Из ПоляИтогов Цикл 
		ЗаменитьИмяПериодичности(ПолеИтога.Выражение, ИмяПериодичности);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Преобразование цветов rgb <-> hsv.

Функция ПолучитьСоответствияЦветов()
	
	СоответствиеWebЦвета = Новый Соответствие;
	
	СоответствиеWebЦвета.Вставить(WebЦвета.АкварельноСиний, "АкварельноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.АнтикБелый, "АнтикБелый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦианАкварельный, "ЦианАкварельный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Аквамарин, "Аквамарин");
	СоответствиеWebЦвета.Вставить(WebЦвета.Лазурный, "Лазурный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Бежевый, "Бежевый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоКоричневый, "СветлоКоричневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Черный, "Черный");
	СоответствиеWebЦвета.Вставить(WebЦвета.БледноМиндальный, "БледноМиндальный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Синий, "Синий");
	СоответствиеWebЦвета.Вставить(WebЦвета.СинеФиолетовый, "СинеФиолетовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Коричневый, "Коричневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Древесный, "Древесный");
	СоответствиеWebЦвета.Вставить(WebЦвета.СероСиний, "СероСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЗеленоватоЖелтый, "ЗеленоватоЖелтый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Шоколадный, "Шоколадный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Коралловый, "Коралловый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Васильковый, "Васильковый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ШелковыйОттенок, "ШелковыйОттенок");
	СоответствиеWebЦвета.Вставить(WebЦвета.Кремовый, "Кремовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Малиновый, "Малиновый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Циан, "Циан");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноСиний, "ТемноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦианТемный, "ЦианТемный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноЗолотистый, "ТемноЗолотистый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноСерый, "ТемноСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноЗеленый, "ТемноЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ХакиТемный, "ХакиТемный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ФуксинТемный, "ФуксинТемный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноОливковоЗеленый, "ТемноОливковоЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноОранжевый, "ТемноОранжевый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ОрхидеяТемный, "ОрхидеяТемный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноКрасный, "ТемноКрасный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЛососьТемный, "ЛососьТемный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦветМорскойВолныТемный, "ЦветМорскойВолныТемный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноГрифельноСиний, "ТемноГрифельноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноГрифельноСерый, "ТемноГрифельноСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноБирюзовый, "ТемноБирюзовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноФиолетовый, "ТемноФиолетовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НасыщенноРозовый, "НасыщенноРозовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НасыщенноНебесноГолубой, "НасыщенноНебесноГолубой");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТусклоСерый, "ТусклоСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СинеСерый, "СинеСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Кирпичный, "Кирпичный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦветокБелый, "ЦветокБелый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЗеленыйЛес, "ЗеленыйЛес");
	СоответствиеWebЦвета.Вставить(WebЦвета.Фуксия, "Фуксия");
	СоответствиеWebЦвета.Вставить(WebЦвета.СеребристоСерый, "СеребристоСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ПризрачноБелый, "ПризрачноБелый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Золотой, "Золотой");
	СоответствиеWebЦвета.Вставить(WebЦвета.Золотистый, "Золотистый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Серый, "Серый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Зеленый, "Зеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЗеленоЖелтый, "ЗеленоЖелтый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Роса, "Роса");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТеплоРозовый, "ТеплоРозовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Киноварь, "Киноварь");
	СоответствиеWebЦвета.Вставить(WebЦвета.Индиго, "Индиго");
	СоответствиеWebЦвета.Вставить(WebЦвета.СлоноваяКость, "СлоноваяКость");
	СоответствиеWebЦвета.Вставить(WebЦвета.Хаки, "Хаки");
	СоответствиеWebЦвета.Вставить(WebЦвета.БледноЛиловый, "БледноЛиловый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ГолубойСКраснымОттенком, "ГолубойСКраснымОттенком");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЗеленаяЛужайка, "ЗеленаяЛужайка");
	СоответствиеWebЦвета.Вставить(WebЦвета.Лимонный, "Лимонный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Голубой, "Голубой");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоКоралловый, "СветлоКоралловый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦианСветлый, "ЦианСветлый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоЗолотистый, "СветлоЗолотистый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоЖелтыйЗолотистый, "СветлоЖелтыйЗолотистый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоСерый, "СветлоСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоЗеленый, "СветлоЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоРозовый, "СветлоРозовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЛососьСветлый, "ЛососьСветлый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦветМорскойВолныСветлый, "ЦветМорскойВолныСветлый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоНебесноГолубой, "СветлоНебесноГолубой");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоГрифельноСиний, "СветлоГрифельноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоГрифельноСерый, "СветлоГрифельноСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ГолубойСоСтальнымОттенком, "ГолубойСоСтальнымОттенком");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоЖелтый, "СветлоЖелтый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЗеленоватоЛимонный, "ЗеленоватоЛимонный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЛимонноЗеленый, "ЛимонноЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Льняной, "Льняной");
	СоответствиеWebЦвета.Вставить(WebЦвета.Фуксин, "Фуксин");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноБордовый, "ТемноБордовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноАквамариновый, "НейтральноАквамариновый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноСиний, "НейтральноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноСерый, "НейтральноСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноЗеленый, "НейтральноЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ОрхидеяНейтральный, "ОрхидеяНейтральный");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноПурпурный, "НейтральноПурпурный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦветМорскойВолныНейтральный, "ЦветМорскойВолныНейтральный");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноГрифельноСиний, "НейтральноГрифельноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноВесеннеЗеленый, "НейтральноВесеннеЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноБирюзовый, "НейтральноБирюзовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноФиолетовоКрасный, "НейтральноФиолетовоКрасный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ПолночноСиний, "ПолночноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.МятныйКрем, "МятныйКрем");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТусклоРозовый, "ТусклоРозовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЗамшаСветлый, "ЗамшаСветлый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НавахоБелый, "НавахоБелый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Ультрамарин, "Ультрамарин");
	СоответствиеWebЦвета.Вставить(WebЦвета.СтароеКружево, "СтароеКружево");
	СоответствиеWebЦвета.Вставить(WebЦвета.Оливковый, "Оливковый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТусклоОливковый, "ТусклоОливковый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Оранжевый, "Оранжевый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ОранжевоКрасный, "ОранжевоКрасный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Орхидея, "Орхидея");
	СоответствиеWebЦвета.Вставить(WebЦвета.БледноЗолотистый, "БледноЗолотистый");
	СоответствиеWebЦвета.Вставить(WebЦвета.БледноЗеленый, "БледноЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.БледноБирюзовый, "БледноБирюзовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.БледноКрасноФиолетовый, "БледноКрасноФиолетовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТопленоеМолоко, "ТопленоеМолоко");
	СоответствиеWebЦвета.Вставить(WebЦвета.Персиковый, "Персиковый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноКоричневый, "НейтральноКоричневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Розовый, "Розовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Сливовый, "Сливовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СинийСПороховымОттенком, "СинийСПороховымОттенком");
	СоответствиеWebЦвета.Вставить(WebЦвета.Пурпурный, "Пурпурный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Красный, "Красный");
	СоответствиеWebЦвета.Вставить(WebЦвета.РозовоКоричневый, "РозовоКоричневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.КоролевскиГолубой, "КоролевскиГолубой");
	СоответствиеWebЦвета.Вставить(WebЦвета.КожаноКоричневый, "КожаноКоричневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Лосось, "Лосось");
	СоответствиеWebЦвета.Вставить(WebЦвета.ПесочноКоричневый, "ПесочноКоричневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦветМорскойВолны, "ЦветМорскойВолны");
	СоответствиеWebЦвета.Вставить(WebЦвета.Перламутровый, "Перламутровый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Охра, "Охра");
	СоответствиеWebЦвета.Вставить(WebЦвета.Серебряный, "Серебряный");
	СоответствиеWebЦвета.Вставить(WebЦвета.НебесноГолубой, "НебесноГолубой");
	СоответствиеWebЦвета.Вставить(WebЦвета.ГрифельноСиний, "ГрифельноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.ГрифельноСерый, "ГрифельноСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Белоснежный, "Белоснежный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ВесеннеЗеленый, "ВесеннеЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СинийСоСтальнымОттенком, "СинийСоСтальнымОттенком");
	СоответствиеWebЦвета.Вставить(WebЦвета.РыжеватоКоричневый, "РыжеватоКоричневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦианНейтральный, "ЦианНейтральный");
	СоответствиеWebЦвета.Вставить(WebЦвета.БледноСиреневый, "БледноСиреневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Томатный, "Томатный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Бирюзовый, "Бирюзовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Фиолетовый, "Фиолетовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.КрасноФиолетовый, "КрасноФиолетовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Пшеничный, "Пшеничный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Белый, "Белый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ДымчатоБелый, "ДымчатоБелый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Желтый, "Желтый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЖелтоЗеленый, "ЖелтоЗеленый");
	
	Возврат СоответствиеWebЦвета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Первоначальное заполнение объектов подсистемы мониторинга.

Функция ПолучитьВариантОтчетаПоКлючам(КлючОтчета, КлючВарианта)
	
	ВариантОтчета = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлючОтчета", КлючОтчета);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Идентификаторы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы
	|ГДЕ
	|	Идентификаторы.ПолноеИмя = ""Отчет."" + &КлючОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка КАК ВариантОтчета
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Идентификаторы КАК Идентификаторы
	|		ПО ВариантыОтчетов.Отчет = Идентификаторы.Ссылка
	|ГДЕ
	|	ВариантыОтчетов.КлючВарианта = &КлючВарианта
	|	И НЕ ВариантыОтчетов.Пользовательский
	|	И НЕ ВариантыОтчетов.ТолькоДляАвтора";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ВариантОтчета = Выборка.ВариантОтчета;
		
	КонецЕсли;
	
	Возврат ВариантОтчета;
	
КонецФункции

Функция СправочникиУправленияПоЦелямЗаполнялись()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КатегорииЦелей.Ссылка
	               |ИЗ
	               |	Справочник.КатегорииЦелей КАК КатегорииЦелей
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СтруктураЦелей.Ссылка
	               |ИЗ
	               |	Справочник.ркСтруктураЦелей КАК СтруктураЦелей
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ркВариантыАнализаЦелевыхПоказателей.Ссылка
	               |ИЗ
	               |	Справочник.ркВариантыАнализаЦелевыхПоказателей КАК ркВариантыАнализаЦелевыхПоказателей";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Анализ взаимосвязанных целевых показателей.

Функция ТекстЗапросаПоСтруктуреДоступныхВариантовАнализа()
	
	Текст = "ВЫБРАТЬ
	|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа,
	|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец КАК Цель,
	|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.ВариантОтображения
	|ПОМЕСТИТЬ ДоступныеВариантыАнализа
	|ИЗ
	|	Справочник.ркВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
	|ГДЕ
	|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеВариантыАнализа.ВариантАнализа КАК ВариантАнализа,
	|	ДоступныеВариантыАнализа.Цель,
	|	ДоступныеВариантыАнализа.Цель.ЦелевойПоказатель,
	|	ВЫБОР
	|		КОГДА ДоступныеВариантыАнализа.ВариантАнализа.МетодРасчетаЗначений = ЗНАЧЕНИЕ(Перечисление.ркМетодыРасчетаВариантовАнализаЦелевыхПоказателей.СуммаНарастающимИтогом)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СостояниеПоНарастающемуИтогу,
	|	ДоступныеВариантыАнализа.ВариантОтображения,
	|	ЛОЖЬ КАК ВыводитьПодробности,
	|	ЛОЖЬ КАК ВыводитьИтогТаблицы,
	|	ДоступныеВариантыАнализа.ВариантАнализа.РеквизитДопУпорядочивания КАК Позиция,
	|	ДоступныеВариантыАнализа.Цель.КраткоеНаименованиеЦелевогоПоказателя КАК НаименованиеЦелевогоПоказателя,
	|	ЗНАЧЕНИЕ(Перечисление.ркВидыПоискаСвязанныхПоказателей.ЗависимыеПоказатели) КАК Группа
	|ИЗ
	|	Справочник.ркВариантыАнализаЦелевыхПоказателей КАК ркВариантыАнализаЦелевыхПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ркСтруктураЦелей КАК СтруктураЦелей
	|			ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеВариантыАнализа КАК ДоступныеВариантыАнализа
	|			ПО СтруктураЦелей.Ссылка = ДоступныеВариантыАнализа.Цель
	|		ПО ркВариантыАнализаЦелевыхПоказателей.Владелец.Родитель = СтруктураЦелей.Ссылка
	|ГДЕ
	|	ркВариантыАнализаЦелевыхПоказателей.Ссылка = &ВариантАнализа
	|	И СтруктураЦелей.ЦельИзмеримая
	|	И (НЕ ДоступныеВариантыАнализа.ВариантАнализа ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеВариантыАнализа.ВариантАнализа КАК ВариантАнализа,
	|	ДоступныеВариантыАнализа.Цель,
	|	ДоступныеВариантыАнализа.Цель.ЦелевойПоказатель,
	|	ВЫБОР
	|		КОГДА ДоступныеВариантыАнализа.ВариантАнализа.МетодРасчетаЗначений = ЗНАЧЕНИЕ(Перечисление.ркМетодыРасчетаВариантовАнализаЦелевыхПоказателей.СуммаНарастающимИтогом)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СостояниеПоНарастающемуИтогу,
	|	ДоступныеВариантыАнализа.ВариантОтображения,
	|	ЛОЖЬ КАК ВыводитьПодробности,
	|	ЛОЖЬ КАК ВыводитьИтогТаблицы,
	|	ДоступныеВариантыАнализа.ВариантАнализа.РеквизитДопУпорядочивания КАК Позиция,
	|	ДоступныеВариантыАнализа.Цель.КраткоеНаименованиеЦелевогоПоказателя КАК НаименованиеЦелевогоПоказателя,
	|	ЗНАЧЕНИЕ(Перечисление.ркВидыПоискаСвязанныхПоказателей.ВлияющиеПоказатели) КАК Группа
	|ИЗ
	|	Справочник.ркВариантыАнализаЦелевыхПоказателей КАК ркВариантыАнализаЦелевыхПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ркСтруктураЦелей КАК СтруктураЦелей
	|			ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеВариантыАнализа КАК ДоступныеВариантыАнализа
	|			ПО СтруктураЦелей.Ссылка = ДоступныеВариантыАнализа.Цель
	|		ПО ркВариантыАнализаЦелевыхПоказателей.Владелец = СтруктураЦелей.Родитель
	|ГДЕ
	|	ркВариантыАнализаЦелевыхПоказателей.Ссылка = &ВариантАнализа
	|	И СтруктураЦелей.ЦельИзмеримая
	|	И (НЕ ДоступныеВариантыАнализа.ВариантАнализа ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеВариантыАнализа.ВариантАнализа КАК ВариантАнализа,
	|	ДоступныеВариантыАнализа.Цель,
	|	ДоступныеВариантыАнализа.Цель.ЦелевойПоказатель,
	|	ВЫБОР
	|		КОГДА ДоступныеВариантыАнализа.ВариантАнализа.МетодРасчетаЗначений = ЗНАЧЕНИЕ(Перечисление.ркМетодыРасчетаВариантовАнализаЦелевыхПоказателей.СуммаНарастающимИтогом)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СостояниеПоНарастающемуИтогу,
	|	ДоступныеВариантыАнализа.ВариантОтображения,
	|	ЛОЖЬ КАК ВыводитьПодробности,
	|	ЛОЖЬ КАК ВыводитьИтогТаблицы,
	|	ДоступныеВариантыАнализа.ВариантАнализа.РеквизитДопУпорядочивания КАК Позиция,
	|	ДоступныеВариантыАнализа.Цель.КраткоеНаименованиеЦелевогоПоказателя КАК НаименованиеЦелевогоПоказателя,
	|	ЗНАЧЕНИЕ(Перечисление.ркВидыПоискаСвязанныхПоказателей.ПустаяСсылка) КАК Группа
	|ИЗ
	|	Справочник.ркВариантыАнализаЦелевыхПоказателей КАК ркВариантыАнализаЦелевыхПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеВариантыАнализа КАК ДоступныеВариантыАнализа
	|		ПО ркВариантыАнализаЦелевыхПоказателей.Ссылка = ДоступныеВариантыАнализа.ВариантАнализа
	|ГДЕ
	|	ркВариантыАнализаЦелевыхПоказателей.Ссылка = &ВариантАнализа
	|	И (НЕ ДоступныеВариантыАнализа.ВариантАнализа ЕСТЬ NULL )";
	
	Возврат Текст;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование диаграмм.

// Заполняет секцию "Диаграмма" переданного табличного документа 
//
// Параметры:
//	ТабличныйДокумент	- ТабличныйДокумент для заполнения
//	ВариантАнализа		- Ссылка на вариант анализа
//	ИсточникДанных		- Структура, хранящая данные, необходимые для анализа показателя
//
//Процедура ЗаполнитьДанныеДиаграммы(ТабличныйДокумент, ВариантАнализа, ИсточникДанных)
//	
//	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
//	МакетПечатнойФормыВариантаАнализа = ПолучитьМакетПечатнойФормыВариантаАнализа();
//	
//	Если НЕ ИсточникДанных.РасчетыАктуальны ИЛИ ИсточникДанных.ОшибкаРасчета ИЛИ ИсточникДанных.Пустой Тогда
//		ОбластьМакета = МакетПечатнойФормыВариантаАнализа.ПолучитьОбласть("РезультатЗаголовокОшибкаРасчета");
//		
//		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
//			ОбластьМакета.Параметры.ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
//			
//		КонецЕсли;
//		
//	Иначе
//		ОбластьМакета = МакетПечатнойФормыВариантаАнализа.ПолучитьОбласть("РезультатЗаголовок");
//	КонецЕсли;
//	
//	ТабличныйДокумент.Вывести(ОбластьМакета, 2, "Результат");
//	
//	Если НЕ ИсточникДанных.ОшибкаРасчета И НЕ ИсточникДанных.Пустой И ИсточникДанных.РасчетыАктуальны Тогда
//		ОбластьМакета = МакетПечатнойФормыВариантаАнализа.ПолучитьОбласть("РезультатДиаграмма");
//		
//		ВыведеннаяОбласть = ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Результат");
//		
//		ОбластьМакетаСДиаграммой = ОбластьМакета.Области.РасположениеДиаграммы;
//		
//		РисунокДиаграмма = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Диаграмма);
//		РисунокДиаграмма.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
//		РисунокДиаграмма.ЦветЛинии = WebЦвета.СеребристоСерый;
//		
//		Индекс = ТабличныйДокумент.Рисунки.Индекс(РисунокДиаграмма);
//		РисунокДиаграмма.Имя = "Диаграмма";
//		Диаграмма = РисунокДиаграмма.Объект;
//		
//		УстановитьИсточникДанныхДиаграммы(Диаграмма, ИсточникДанных, ВариантАнализа);
//		
//		УстановитьНастройкиПоУмолчаниюДиаграммы(Диаграмма, ВариантАнализа);
//		
//		Если ВариантАнализа.ТипАнализа = Перечисления.ркТипыАнализаПоказателей.ДинамикаИзменения Тогда
//			УстановитьИменаТочекДиаграммы(Диаграмма.Точки, ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа, ДинамическиеСвойстваВариантаАнализа.ПериодичностьКонтроля);
//		КонецЕсли;
//		
//		Если НЕ ИсточникДанных.Данные.Колонки.Найти("Признак") = Неопределено 
//			И ВариантАнализа.РассчитыватьПрогноз 
//			И ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Пустой Тогда
//			// Выделим все периоды прогноза
//			ОтборПоПризнаку = Новый Структура("Признак", Истина);
//			НайденныеСтрокиСПериодами = ИсточникДанных.Данные.НайтиСтроки(ОтборПоПризнаку);
//			ПериодыСПризнаком = ИсточникДанных.Данные.Скопировать(НайденныеСтрокиСПериодами, "Период");
//			УстановитьПользовательскиеНастройкиТочекДиаграммы(Диаграмма.Точки, ВариантАнализа, ПериодыСПризнаком);
//			
//			// Удалить серию "Признак"
//			КолонкиИсточника = ИсточникДанных.Данные.Колонки;
//			КолонкиИсточника.Удалить(КолонкиИсточника.Индекс(КолонкиИсточника.Найти("Признак")));
//			
//		КонецЕсли;
//		
//		УстановитьНастройкиПоУмолчаниюСерийДиаграммы(Диаграмма.Серии);
//		
//		Если ВариантАнализа.ТипАнализа = Перечисления.ркТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда
//			УстановитьНастройкиИзмерительнойДиаграммы(Диаграмма, ВариантАнализа, ИсточникДанных);
//			
//		Иначе
//			УстановитьПользовательскиеНастройкиСерийДиаграммы(Диаграмма.Серии, ВариантАнализа);
//			
//		КонецЕсли;
//		
//		Диаграмма.ОтображатьЛегенду = ВариантАнализа.ОтображатьЛегенду;
//		РисунокДиаграмма.Защита = Ложь;
//		
//		Диаграмма.ПрозрачныйФон = Истина;
//		
//		ВерхДиаграммы = ВыведеннаяОбласть.Верх;
//		ЛевоДиаграммы = ВыведеннаяОбласть.Лево + ОбластьМакетаСДиаграммой.Лево;
//		НизДиаграммы = ВерхДиаграммы + ОбластьМакетаСДиаграммой.Низ - ОбластьМакетаСДиаграммой.Верх + 10;
//		ПравоДиаграммы = ЛевоДиаграммы + ОбластьМакетаСДиаграммой.Право - ОбластьМакетаСДиаграммой.Лево;
//		
//		ОбластьМакетаСДиаграммой = ТабличныйДокумент.Область(ВерхДиаграммы, ЛевоДиаграммы, НизДиаграммы, ПравоДиаграммы);
//		ТабличныйДокумент.Рисунки[Индекс].Расположить(ОбластьМакетаСДиаграммой);
//		
//		ТабличныйДокумент.Вывести(ПолучитьРазделительПечатнойФормыВариантаАнализа(), 3, "Результат");
//		
//	КонецЕсли;
//	
//КонецПроцедуры

// Устанавливает имена точек диаграммы соответсвии с данными диаграммы из внешнего источника
//
// Параметры
//	ТочкиДиаграммы - содержит точки объекта Диаграмма
//
Процедура УстановитьИменаТочекДиаграммы(ТочкиДиаграммы, ЗначениеАнализаИмяПоля, Периодичность)
	
	Для каждого ТочкаДиаграммы Из ТочкиДиаграммы Цикл
		Если ТочкаДиаграммы.Значение = ЗначениеАнализаИмяПоля Тогда
			Прервать;
		КонецЕсли;
		
		ТочкаДиаграммы.Текст = ПрименитьФорматДаты(ТочкаДиаграммы.Текст, Периодичность);
		
	КонецЦикла; 
	
КонецПроцедуры

// Устанавливает источник данных для диаграммы
//
// Параметры
//	Диаграмма	   - содержит заполняемый объект Диаграмма
//	ИсточникДанных - ТаблицаЗначений с данными для диаграммы
//
Процедура УстановитьИсточникДанныхДиаграммы(Диаграмма, ИсточникДанных, ВариантАнализа, Минидиаграмма = Ложь)
	
	//СерииДиаграммы = Диаграмма.Серии;
	//ТочкиДиаграммы = Диаграмма.Точки;
	//
	//ДанныеИсточникаДанных = ИсточникДанных.Данные;
	//КолонкиИсточникаДанных = ДанныеИсточникаДанных.Колонки;
	//
	//ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	//
	//СвойстваОбщейСтатистики = ИсточникДанных.СвойстваОбщейСтатистики;
	//
	//ТипыАнализа = Перечисления.ркТипыАнализаПоказателей;
	//ТипАнализа = ВариантАнализа.ТипАнализа;
	//СерииВКолонках = НЕ (ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния)
	//И НЕ (ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение);
	//
	//Точность = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	//Сдвиг = ПолучитьСдвигПоВидуПредставленияЧисел(ВариантАнализа);
	//
	//ЕстьГрадиент = ((ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение) 
	//И ВариантАнализа.ТолькоЦветОсновнойСерии 
	//И ВариантАнализа.ГрадиентДляПокомпонетногоСравнения);
	//
	//Если ЕстьГрадиент Тогда
	//	МаксимумИсточникаДанных = СвойстваОбщейСтатистики.ПоОбъектамАнализа.Максимум;
	//КонецЕсли;
	//
	//Для Каждого СтрокаИсточникаДанных Из ДанныеИсточникаДанных Цикл
	//	
	//	ЗначениеСтроки = СтрокаИсточникаДанных[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа];
	//	
	//	Если ЕстьГрадиент Тогда
	//		Если НЕ МаксимумИсточникаДанных = 0 Тогда
	//			ВесСерии = Окр(100 * ЗначениеСтроки / МаксимумИсточникаДанных);
	//			
	//		Иначе
	//			ВесСерии = 0;
	//			
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если СерииВКолонках Тогда
	//		ТекущаяТочкаДиаграммы = Диаграмма.УстановитьТочку(СтрокаИсточникаДанных[0]);
	//		ТекущаяТочкаДиаграммы.Текст = СтрокаИсточникаДанных[0];
	//	Иначе
	//		ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию(СтрокаИсточникаДанных[0]);
	//		
	//		Если ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение Тогда
	//			УстанавливаемоеПредставлениеЗначения = ПолучитьСокращенноеПредставлениеЧисла(ЗначениеСтроки, ВариантАнализа.ТочностьРасчетаДробнойЧасти, ВариантАнализа.КратностьЗначений) + " " + ДинамическиеСвойстваВариантаАнализа.Размерность;
	//			ТекстСерии = Строка(СтрокаИсточникаДанных[0]) + " = " + УстанавливаемоеПредставлениеЗначения + ?(ЕстьГрадиент,"#" + ВесСерии + "#","");
	//			
	//		ИначеЕсли ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
	//			УстанавливаемоеПредставлениеЗначения = ПолучитьСокращенноеПредставлениеЧисла(ЗначениеСтроки, ВариантАнализа.ТочностьРасчетаДробнойЧасти, ВариантАнализа.КратностьЗначений) + " " + ДинамическиеСвойстваВариантаАнализа.Размерность;
	//			ТекстСерии = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу + " " + НСтр("ru='на'") + " " + Формат(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, "ДФ=dd.MM.yy; ДЛФ=D") + " " + "=" + " " + УстанавливаемоеПредставлениеЗначения;
	//			
	//		Иначе
	//			ТекстСерии = СтрокаИсточникаДанных[0];
	//			
	//		КонецЕсли;
	//		
	//		ТекущаяСерияДиаграммы.Текст = ТекстСерии;
	//		
	//	КонецЕсли;
	//	
	//	Для каждого КолонкаИсточникаДанных Из КолонкиИсточникаДанных Цикл
	//		
	//		ИмяКолонкиИсточникаДанных = КолонкаИсточникаДанных.Имя;
	//		ЗаголовокКолонкиИстоникаДанных = КолонкаИсточникаДанных.Заголовок;
	//		
	//		Если Найти(ИмяКолонкиИсточникаДанных, НСтр("ru='Период'")) 
	//			ИЛИ ?(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа = Неопределено, Ложь, Найти(ИмяКолонкиИсточникаДанных, ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа))
	//			ИЛИ Найти(ИмяКолонкиИсточникаДанных, НСтр("ru='ПериодСравнения'"))
	//			ИЛИ Найти(ИмяКолонкиИсточникаДанных, НСтр("ru='Признак'")) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если СерииВКолонках Тогда
	//			ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию(ИмяКолонкиИсточникаДанных);
	//			ТекущаяСерияДиаграммы.Значение = ИмяКолонкиИсточникаДанных;
	//			ТекущаяСерияДиаграммы.Текст = ЗаголовокКолонкиИстоникаДанных;
	//			
	//		Иначе
	//			ТекущаяТочкаДиаграммы = Диаграмма.УстановитьТочку(ИмяКолонкиИсточникаДанных);
	//			ТекущаяТочкаДиаграммы.Значение = ИмяКолонкиИсточникаДанных;
	//			ТекущаяТочкаДиаграммы.Текст = ЗаголовокКолонкиИстоникаДанных;
	//			
	//		КонецЕсли;
	//		
	//		ТекущееЗначение = СтрокаИсточникаДанных[ИмяКолонкиИсточникаДанных];
	//		
	//		УстанавливаемоеПредставлениеЗначения = ПолучитьСокращенноеПредставлениеЧисла(ТекущееЗначение, ВариантАнализа.ТочностьРасчетаДробнойЧасти, ВариантАнализа.КратностьЗначений) + " " + ДинамическиеСвойстваВариантаАнализа.Размерность;
	//		
	//		Если СерииВКолонках Тогда
	//			Если НЕ КолонкиИсточникаДанных.Найти(НСтр("ru='Период'")) = Неопределено Тогда
	//				ФорматированнаяПодписьТочкиСерии = ПрименитьФорматДаты(ТекущаяТочкаДиаграммы.Текст, ДинамическиеСвойстваВариантаАнализа.ПериодичностьКонтроля);
	//			Иначе 
	//				ФорматированнаяПодписьТочкиСерии = ТекущаяТочкаДиаграммы.Текст;
	//			КонецЕсли;
	//			
	//		Иначе
	//			Если НЕ КолонкиИсточникаДанных.Найти(НСтр("ru='Период'")) = Неопределено И НЕ ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
	//				ФорматированнаяПодписьТочкиСерии = ПрименитьФорматДаты(ТекущаяСерияДиаграммы.Текст, ДинамическиеСвойстваВариантаАнализа.ПериодичностьКонтроля);
	//			Иначе 
	//				ФорматированнаяПодписьТочкиСерии = ТекущаяСерияДиаграммы.Текст;
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//		Если ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение Тогда
	//			Если ЕстьГрадиент Тогда
	//				ТекстСерии = ТекущаяСерияДиаграммы.Текст;
	//				
	//				НачалоМаркераВесаСерии = Найти(ТекстСерии, "#");
	//				ДлинаЗначенияСерии = СтрДлина(ТекстСерии);
	//				МаркерВесаСерии = Прав(ТекстСерии, ДлинаЗначенияСерии - НачалоМаркераВесаСерии + 1);
	//				
	//				ТекстПодсказки = СтрЗаменить(ТекстСерии, МаркерВесаСерии, "");
	//			Иначе 
	//				ТекстПодсказки = ТекущаяСерияДиаграммы.Текст;
	//			КонецЕсли;
	//			
	//			Диаграмма.УстановитьЗначение(ТекущаяТочкаДиаграммы, 
	//			ТекущаяСерияДиаграммы, 
	//			ТекущееЗначение, ,
	//			ТекстПодсказки);
	//			
	//		ИначеЕсли ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
	//			Диаграмма.УстановитьЗначение(ТекущаяТочкаДиаграммы, 
	//			ТекущаяСерияДиаграммы, 
	//			ТекущееЗначение, ,
	//			ТекущаяСерияДиаграммы.Текст); 
	//			
	//		Иначе
	//			Диаграмма.УстановитьЗначение(ТекущаяТочкаДиаграммы, 
	//			ТекущаяСерияДиаграммы, 
	//			ТекущееЗначение, ,
	//			ТекущаяСерияДиаграммы.Текст + " = " + УстанавливаемоеПредставлениеЗначения + ", " + ФорматированнаяПодписьТочкиСерии); 
	//			
	//		КонецЕсли;
	//	КонецЦикла; 
	//	
	//КонецЦикла; 
	
КонецПроцедуры

// Устанавливает настройки по умолчанию для измерительной диаграммы
// Такие параметры, как, полосы, размеры и т.д.
//
// Параметры
//	Диаграмма		- содержит заполняемый объект Диаграмма
//	ВариантАнализа		- Ссылка на вариант анализа
//	ИсточникДанных	- ТаблицаЗначений с данными для диаграммы
//
Процедура УстановитьНастройкиИзмерительнойДиаграммы(Диаграмма, ВариантАнализа, ИсточникДанных)
	
	// Инициализируем переменные
	//ВидыОтсечек 	= Перечисления.ркВидыОтсечек;
	//ЕстьОтсечки     = ВариантАнализа.ВидОтсечек <> ВидыОтсечек.Нет;
	//ПолосыДиаграммы = Диаграмма.ПолосыИзмерительнойДиаграммы;
	//ЦветаПоказателя = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета;
	//
	//ТочностьРасчетаДробнойЧасти = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	//КратностьЗначений = ВариантАнализа.КратностьЗначений;
	//
	//ЦелевойТренд = ИсточникДанных.Цель.ЦелевойТренд;
	//
	//ЦелевоеЗначение = ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение, ТочностьРасчетаДробнойЧасти, КратностьЗначений);
	//		
	//Если ЦелевойТренд = Перечисления.ркВидыЦелевыхТрендовПоказателей.Максимизация Тогда
	//	МинимальноеЗначениеЦели = ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение, ТочностьРасчетаДробнойЧасти, КратностьЗначений);
	//	МаксимальноеЗначениеЦели = ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение, ТочностьРасчетаДробнойЧасти, КратностьЗначений);
	//	
	//ИначеЕсли ЦелевойТренд = Перечисления.ркВидыЦелевыхТрендовПоказателей.Минимизация Тогда
	//	МинимальноеЗначениеЦели = ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение, ТочностьРасчетаДробнойЧасти, КратностьЗначений);
	//	МаксимальноеЗначениеЦели = ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение, ТочностьРасчетаДробнойЧасти, КратностьЗначений);
	//	
	//ИначеЕсли ЦелевойТренд = Перечисления.ркВидыЦелевыхТрендовПоказателей.Диапазон Тогда
	//	
	//КонецЕсли;
	//
	//ТекущееЗначение = ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение, ТочностьРасчетаДробнойЧасти, КратностьЗначений);
	//
	////МинимальноеЗначение = Мин(ТекущееЗначение, МинимальноеЗначениеЦели);
	//МинимальноеЗначение  = МинимальноеЗначениеЦели;
	//МаксимальноеЗначение = Макс(ТекущееЗначение, МаксимальноеЗначениеЦели);
	//
	//// Настройки диаграммы
	//Диаграмма.НачальныйУголИзмерительнойДиаграммы	= 0;
	//Диаграмма.КонечныйУголИзмерительнойДиаграммы	= 180;
	//Диаграмма.ТолщинаШкалыИзмерительнойДиаграммы	= 6;
	//Диаграмма.ТолщинаВтулкиИзмерительнойДиаграммы	= 6;
	//
	//ДельтаМинимум	= Мин(МинимальноеЗначение, ТекущееЗначение) * 0.1;
	//ДельтаМаксимум	= Мин(МаксимальноеЗначение, ТекущееЗначение) * 0.1;
	//
	////Диаграмма.БазовоеЗначение			= Окр(Мин(МинимальноеЗначение, ТекущееЗначение) - ДельтаМинимум, 0);
	//Диаграмма.БазовоеЗначение			= 0;
	//Диаграмма.АвтоМинимальноеЗначение	= Ложь;
	//Диаграмма.МинимальноеЗначение		= Окр(Мин(МинимальноеЗначение, ТекущееЗначение), 0);
	//Диаграмма.АвтоМаксимальноеЗначение	= Ложь;
	//Диаграмма.МаксимальноеЗначение		= Окр(Макс(МаксимальноеЗначение, ТекущееЗначение) + ДельтаМаксимум, 0);
	//
	//// Добавим полосы диаграммы
	//Если ЦелевойТренд = Перечисления.ркВидыЦелевыхТрендовПоказателей.Максимизация Тогда
	//	Если ИсточникДанных.СвойстваЗоныАнализаИТренда.НомерЗоныАнализа > 0 Тогда			
	//							
	//		ПолосаМеньшеМинимума = ПолосыДиаграммы.Добавить();
	//		ПолосаМеньшеМинимума.Начало = Диаграмма.БазовоеЗначение;
	//		ПолосаМеньшеМинимума.Конец = МинимальноеЗначение;
	//		ПолосаМеньшеМинимума.Подсказка = "Диапазон недопустимых значений: Показатель < Мин. = " + МинимальноеЗначение;
	//		ПолосаМеньшеМинимума.ЦветФона = ЦветаПоказателя["НегативноеОтклонение"];
	//		
	//		ПолосаБольшеМинимумаМеньшеЦели = ПолосыДиаграммы.Добавить();
	//		ПолосаБольшеМинимумаМеньшеЦели.Начало = МинимальноеЗначение;
	//		ПолосаБольшеМинимумаМеньшеЦели.Конец = ЦелевоеЗначение * (1 - 0.01);
	//		ПолосаБольшеМинимумаМеньшеЦели.Подсказка = "Диапазон допустимых значений: Мин. = " + МинимальноеЗначение + " < Показатель < Цель = " + ЦелевоеЗначение;
	//		ПолосаБольшеМинимумаМеньшеЦели.ЦветФона = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
	//		
	//		ПолосаЦелевогоЗначения = ПолосыДиаграммы.Добавить();
	//		ПолосаЦелевогоЗначения.Начало = ЦелевоеЗначение * (1 - 0.01);
	//		ПолосаЦелевогоЗначения.Конец = ЦелевоеЗначение * (1 + 0.01);
	//		ПолосаЦелевогоЗначения.Подсказка = "Целевое значение: Цель = " + ЦелевоеЗначение;
	//		ПолосаЦелевогоЗначения.ЦветФона = ЦветаПоказателя["ЦелевоеЗначение"];
	//		
	//		ПолосаБольшеЦелиМеньшеМаксимума = ПолосыДиаграммы.Добавить();
	//		ПолосаБольшеЦелиМеньшеМаксимума.Начало = ЦелевоеЗначение * (1 + 0.01);
	//		ПолосаБольшеЦелиМеньшеМаксимума.Конец = МаксимальноеЗначение;
	//		ПолосаБольшеЦелиМеньшеМаксимума.Подсказка = "Диапазон допустимых значений: Цель = " + ЦелевоеЗначение + " < Показатель < Макс. = " + МаксимальноеЗначение;
	//		ПолосаБольшеЦелиМеньшеМаксимума.ЦветФона = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
	//		
	//		ПолосаБольшеМаксимума = ПолосыДиаграммы.Добавить();
	//		//ПолосаБольшеМаксимума.Начало = МаксимальноеЗначение;
	//		//ПолосаБольшеМаксимума.Конец = Диаграмма.МаксимальноеЗначение-1;
	//		ПолосаБольшеМаксимума.Начало = ЦелевоеЗначение * (1 + 0.01);
	//		ПолосаБольшеМаксимума.Конец = МаксимальноеЗначениеЦели;
	//		ПолосаБольшеМаксимума.Подсказка = "Диапазон значений: Показатель > Макс. = " + МаксимальноеЗначениеЦели;
	//		ПолосаБольшеМаксимума.ЦветФона = ЦветаПоказателя["ПозитивноеОтклонение"];
	//		
	//		Если ЕстьОтсечки Тогда
	//			Если ВариантАнализа.ВидОтсечек = ВидыОтсечек.Процент Тогда
	//				Множитель  =  (ЦелевоеЗначение * 0.01);
	//			ИначеЕсли ВариантАнализа.ВидОтсечек = ВидыОтсечек.Сумма Тогда	
	//				Множитель  =  1;
	//			КонецЕсли;
	//		
	//			ВидыПредставленияЧисел = Перечисления.ркВидыПредставленияЧисел;
	//			Если КратностьЗначений = ВидыПредставленияЧисел.ВТысячах Тогда
	//				МножительЗначения = 1000;
	//				
	//			ИначеЕсли КратностьЗначений = ВидыПредставленияЧисел.ВМиллионах Тогда
	//				МножительЗначения = 1000000;
	//				
	//			Иначе
	//				МножительЗначения = 1;
	//				
	//			КонецЕсли;
	//			
	//			Для каждого Отсечка Из ВариантАнализа.Отсечки Цикл					
	//				ПолосаОтсечки = ПолосыДиаграммы.Добавить();						
	//					
	//				ПолосаОтсечки.Начало = ПолучитьЗначениеСокращенногоПредставленияЧисла((Отсечка.ВерхняяГраница * Множитель) / МножительЗначения, 
	//					ТочностьРасчетаДробнойЧасти, КратностьЗначений) - (ЦелевоеЗначение * 0.005);
	//					
	//				ПолосаОтсечки.Конец = ПолучитьЗначениеСокращенногоПредставленияЧисла((Отсечка.ВерхняяГраница * Множитель) / МножительЗначения, 
	//					ТочностьРасчетаДробнойЧасти, КратностьЗначений) + (ЦелевоеЗначение * 0.005);
	//					
	//				ПолосаОтсечки.Подсказка = "Отсечка от " + 
	//				
	//					ПолучитьЗначениеСокращенногоПредставленияЧисла((Отсечка.НижняяГраница * Множитель) / МножительЗначения, 
	//						ТочностьРасчетаДробнойЧасти, КратностьЗначений)
	//						
	//					+ " до " + 
	//					
	//					ПолучитьЗначениеСокращенногоПредставленияЧисла((Отсечка.ВерхняяГраница * Множитель) / МножительЗначения, 
	//						ТочностьРасчетаДробнойЧасти, КратностьЗначений);
	//						
	//				ПолосаОтсечки.ЦветФона  = ЦветаПоказателя["Отсечки"];
	//				
	//			КонецЦикла;				
	//		
	//		КонецЕсли;
	//		
	//		Если ТекущееЗначение < МинимальноеЗначение Тогда
	//			Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["НегативноеОтклонение"];
	//			Диаграмма.Серии[0].Цвет = ЦветаПоказателя["НегативноеОтклонение"];
	//			
	//		ИначеЕсли (ТекущееЗначение > МинимальноеЗначение И ТекущееЗначение < ЦелевоеЗначение * (1 - 0.01))
	//			ИЛИ (ТекущееЗначение > ЦелевоеЗначение * (1 + 0.01) И ТекущееЗначение < МаксимальноеЗначение) Тогда
	//			Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
	//			Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
	//			
	//		ИначеЕсли (ТекущееЗначение > ЦелевоеЗначение * (1 - 0.01) И ТекущееЗначение < ЦелевоеЗначение * (1 + 0.01)) Тогда
	//			Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ЦелевоеЗначение"];
	//			Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ЦелевоеЗначение"];
	//			
	//		ИначеЕсли ТекущееЗначение > МаксимальноеЗначение Тогда
	//			Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ПозитивноеОтклонение"];
	//			Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ПозитивноеОтклонение"];
	//			
	//		КонецЕсли;
	//						
	//	Иначе
	//		// Одна полоса фактических значений
	//		ПолосаБольшеЦелиМеньшеМаксимума = ПолосыДиаграммы.Добавить();
	//		ПолосаБольшеЦелиМеньшеМаксимума.Начало = МинимальноеЗначение;
	//		ПолосаБольшеЦелиМеньшеМаксимума.Конец = МаксимальноеЗначение;
	//		ПолосаБольшеЦелиМеньшеМаксимума.Подсказка = "Цели не установлены. Диапазон без учета целевых значений.";
	//		ПолосаБольшеЦелиМеньшеМаксимума.ЦветФона = ЦветаПоказателя["Значение"];
	//		Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["Значение"];
	//		Диаграмма.Серии[0].Цвет = ЦветаПоказателя["Значение"];
	//		
	//	КонецЕсли;
	//ИначеЕсли ЦелевойТренд = Перечисления.ркВидыЦелевыхТрендовПоказателей.Минимизация Тогда
	//	Если ИсточникДанных.СвойстваЗоныАнализаИТренда.НомерЗоныАнализа > 0 Тогда
	//		ПолосаМеньшеМинимума = ПолосыДиаграммы.Добавить();
	//		ПолосаМеньшеМинимума.Начало = Диаграмма.БазовоеЗначение;
	//		ПолосаМеньшеМинимума.Конец = МинимальноеЗначение;
	//		ПолосаМеньшеМинимума.Подсказка = "Диапазон значений: Показатель < Мин. = " + МинимальноеЗначение;
	//		ПолосаМеньшеМинимума.ЦветФона = ЦветаПоказателя["ПозитивноеОтклонение"];
	//		
	//		ПолосаБольшеМинимумаМеньшеЦели = ПолосыДиаграммы.Добавить();
	//		ПолосаБольшеМинимумаМеньшеЦели.Начало = МинимальноеЗначение;
	//		ПолосаБольшеМинимумаМеньшеЦели.Конец = ЦелевоеЗначение * (1 - 0.01);
	//		ПолосаБольшеМинимумаМеньшеЦели.Подсказка = "Диапазон допустимых значений: Мин. = " + МинимальноеЗначение + " < Показатель < Цель = " + ЦелевоеЗначение;
	//		ПолосаБольшеМинимумаМеньшеЦели.ЦветФона = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
	//		
	//		ПолосаЦелевогоЗначения = ПолосыДиаграммы.Добавить();
	//		ПолосаЦелевогоЗначения.Начало = ЦелевоеЗначение * (1 - 0.01);
	//		ПолосаЦелевогоЗначения.Конец = ЦелевоеЗначение * (1 + 0.01);
	//		ПолосаЦелевогоЗначения.Подсказка = "Целевое значение: Цель = " + ЦелевоеЗначение;
	//		ПолосаЦелевогоЗначения.ЦветФона = ЦветаПоказателя["ЦелевоеЗначение"];
	//		
	//		ПолосаБольшеЦелиМеньшеМаксимума = ПолосыДиаграммы.Добавить();
	//		ПолосаБольшеЦелиМеньшеМаксимума.Начало = ЦелевоеЗначение * (1 + 0.01);
	//		ПолосаБольшеЦелиМеньшеМаксимума.Конец = МаксимальноеЗначение;
	//		ПолосаБольшеЦелиМеньшеМаксимума.Подсказка = "Диапазон допустимых значений: Цель = " + ЦелевоеЗначение + " < Показатель < Макс. = " + МаксимальноеЗначение;
	//		ПолосаБольшеЦелиМеньшеМаксимума.ЦветФона = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
	//		
	//		ПолосаБольшеМаксимума = ПолосыДиаграммы.Добавить();
	//		ПолосаБольшеМаксимума.Начало = МаксимальноеЗначение;
	//		ПолосаБольшеМаксимума.Конец = Диаграмма.МаксимальноеЗначение;
	//		ПолосаБольшеМаксимума.Подсказка = "Диапазон недопустимых значений: Показатель > Макс. = " + МаксимальноеЗначение;
	//		ПолосаБольшеМаксимума.ЦветФона = ЦветаПоказателя["НегативноеОтклонение"];
	//		
	//		Если ТекущееЗначение < МинимальноеЗначение Тогда
	//			Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["НегативноеОтклонение"];
	//			Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ПозитивноеОтклонение"];
	//			
	//		ИначеЕсли (ТекущееЗначение > МинимальноеЗначение И ТекущееЗначение < ЦелевоеЗначение * (1 - 0.01))
	//			ИЛИ (ТекущееЗначение > ЦелевоеЗначение * (1 + 0.01) И ТекущееЗначение < МаксимальноеЗначение) Тогда
	//			Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
	//			Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
	//			
	//		ИначеЕсли (ТекущееЗначение > ЦелевоеЗначение * (1 - 0.01) И ТекущееЗначение < ЦелевоеЗначение * (1 + 0.01)) Тогда
	//			Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ЦелевоеЗначение"];
	//			Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ЦелевоеЗначение"];
	//			
	//		ИначеЕсли ТекущееЗначение > МаксимальноеЗначение Тогда
	//			Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ПозитивноеОтклонение"];
	//			Диаграмма.Серии[0].Цвет = ЦветаПоказателя["НегативноеОтклонение"];
	//			
	//		КонецЕсли;
	//		
	//	Иначе
	//		// Одна полоса фактических значений
	//		ПолосаБольшеЦелиМеньшеМаксимума = ПолосыДиаграммы.Добавить();
	//		ПолосаБольшеЦелиМеньшеМаксимума.Начало = МинимальноеЗначение;
	//		ПолосаБольшеЦелиМеньшеМаксимума.Конец = МаксимальноеЗначение;
	//		ПолосаБольшеЦелиМеньшеМаксимума.Подсказка = "Цели не установлены. Диапазон без учета целевых значений.";
	//		ПолосаБольшеЦелиМеньшеМаксимума.ЦветФона = ЦветаПоказателя["Значение"];
	//		Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["Значение"];
	//		Диаграмма.Серии[0].Цвет = ЦветаПоказателя["Значение"];
	//		
	//	КонецЕсли;
	//ИначеЕсли ЦелевойТренд = Перечисления.ркВидыЦелевыхТрендовПоказателей.Диапазон Тогда
	//КонецЕсли;
	
КонецПроцедуры

// Устанавливает настройки по умолчанию оформления объекта диаграммы
//
// Параметры
//	Диаграмма  - содержит заполняемый объект Диаграмма
//	ВариантАнализа - Ссылка на вариант анализа
//
Процедура УстановитьНастройкиПоУмолчаниюОбъектаДиаграммы(Диаграмма, ВариантАнализа)
	
	//Диаграмма.ОтображатьЛегенду = ВариантАнализа.ОтображатьЛегенду;
	//
	//ИмяТипаДиаграммы = ПолучитьИмяЗначенияПеречисления(ВариантАнализа.ТипДиаграммы);
	//Диаграмма.ТипДиаграммы = ТипДиаграммы[ИмяТипаДиаграммы];
	//
	//Диаграмма.Окантовка = Ложь;
	//
	//Если Диаграмма.ТипДиаграммы = ТипДиаграммы.Гистограмма Тогда
	//	Диаграмма.РежимПробелов = РежимПробеловДиаграммы.ПоловинаШирины;		
	//	
	//ИначеЕсли Диаграмма.ТипДиаграммы = ТипДиаграммы.Круговая Тогда
	//	Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.ЗначениеПроцент;
	//	
	//КонецЕсли;
	//
	//// Базовое значение для "пустых" точек трендов и прогнозов
	//Диаграмма.БазовоеЗначение = ПолучитьБазовоеЗначениеДляДиаграмм();
	//Диаграмма.ПропускатьБазовоеЗначение = Истина;
	//Диаграмма.ФорматЗначенийВПодписях = "ЧДЦ=" + ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	//Диаграмма.РазделительПодписей = " ; ";
	
КонецПроцедуры

// Устанавливает настройки по умолчанию области заголовка диаграммы
//
// Параметры
//	Диаграмма  - содержит заполняемый объект Диаграмма
//	ВариантАнализа - Ссылка на вариант анализа
//
Процедура УстановитьНастройкиПоУмолчаниюОбластиЗаголовкаДиаграммы(Диаграмма, ВариантАнализа)
	
	ОбластьЗаголовка = Диаграмма.ОбластьЗаголовка;
	
	ОбластьЗаголовка.Верх = 0;
	ОбластьЗаголовка.Низ = 0;
	ОбластьЗаголовка.Лево = 0;
	ОбластьЗаголовка.Право = 0;
	
КонецПроцедуры

// Устанавливает настройки по умолчанию области построения диаграммы
//
// Параметры
//	Диаграмма  - содержит заполняемый объект Диаграмма
//	ВариантАнализа - Ссылка на вариант анализа
//
Процедура УстановитьНастройкиПоУмолчаниюОбластиПостроенияДиаграммы(Диаграмма, ВариантАнализа)
	//
	//ОбластьПостроения = Диаграмма.ОбластьПостроения;
	//
	//Если ВариантАнализа.ТипАнализа = Перечисления.ркТипыАнализаПоказателей.ДинамикаИзменения
	//	ИЛИ ВариантАнализа.ТипАнализа = Перечисления.ркТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
	//	
	//	ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Горизонтально;
	//	
	//ИначеЕсли ВариантАнализа.ТипАнализа = Перечисления.ркТипыАнализаПоказателей.ПокомпонентноеСравнение
	//	ИЛИ ВариантАнализа.ТипАнализа = Перечисления.ркТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда
	//	
	//	ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Авто;
	//	
	//КонецЕсли;
	//
	//ОбластьПостроения.ОтображатьПодписиШкалыТочек = Истина;
	//ОбластьПостроения.ОтображатьЛинииЗначенийШкалы = Ложь;
	//ОбластьПостроения.ФорматШкалыЗначений = "ЧДЦ=" + ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	//
	//Если ВариантАнализа.ОтображатьЛегенду Тогда
	//	ОбластьПостроения.Верх = 0;
	//	ОбластьПостроения.Низ = 0.75;
	//КонецЕсли;
	
КонецПроцедуры

// Устанавливает настройки по умолчанию области легенды диаграммы
//
// Параметры
//	Диаграмма  - содержит заполняемый объект диаграмма
//	ВариантАнализа - Ссылка на вариант анализа
//
Процедура УстановитьНастройкиПоУмолчаниюОбластиЛегендыДиаграммы(Диаграмма, ВариантАнализа)
	
	//Диаграмма.ОтображатьЛегенду = ВариантАнализа.ОтображатьЛегенду;
	//
	//ОбластьЛегенды = Диаграмма.ОбластьЛегенды;
	//ОбластьЛегенды.Прокрутка = Истина;
	//
	//ОбластьЛегенды.Верх = 0.82;
	//ОбластьЛегенды.Низ = 1;
	//ОбластьЛегенды.Лево = 0;
	//ОбластьЛегенды.Право = 1;
	
КонецПроцедуры

// Устанавливает настройки по умолчанию для всех областей диаграммы
// Осуществляет вызов соответствующих процедур
//
// Параметры
//	Диаграмма  - содержит заполняемый объект Диаграмма
//	ВариантАнализа - Ссылка на вариант анализа
//
Процедура УстановитьНастройкиПоУмолчаниюДиаграммы(Диаграмма, ВариантАнализа)
	
	//УстановитьНастройкиПоУмолчаниюОбъектаДиаграммы(Диаграмма, ВариантАнализа);
	//
	//УстановитьНастройкиПоУмолчаниюОбластиЗаголовкаДиаграммы(Диаграмма, ВариантАнализа);
	//УстановитьНастройкиПоУмолчаниюОбластиПостроенияДиаграммы(Диаграмма, ВариантАнализа);
	//УстановитьНастройкиПоУмолчаниюОбластиЛегендыДиаграммы(Диаграмма, ВариантАнализа);
	//УстановитьНастройкиПоУмолчаниюТочекДиаграммы(Диаграмма, ВариантАнализа);
	
КонецПроцедуры

// Устанавливает настройки умолчания оформления серий диаграммы
//
// Параметры
//	СерииДиаграммы - содержит серии объекта Диаграмма
//
Процедура УстановитьНастройкиПоУмолчаниюСерийДиаграммы(СерииДиаграммы)
	
	//Для каждого СерияДиаграммы Из СерииДиаграммы Цикл
	//	
	//	ИдентификаторСерии = СерияДиаграммы.Значение;
	//	
	//	Если Найти(ИдентификаторСерии, "ЦелевоеЗначение") Тогда
	//		СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
	//		СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
	//		СерияДиаграммы.Индикатор = Истина;
	//		
	//	ИначеЕсли Найти(ИдентификаторСерии, "Приведенное") Тогда
	//		СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
	//		СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир, 1);
	//		СерияДиаграммы.Индикатор = Истина;
	//		
	//	ИначеЕсли Найти(ИдентификаторСерии, "Тренд")
	//		ИЛИ Найти(ИдентификаторСерии, "Прогноз") Тогда
	//		СерияДиаграммы.Индикатор = Истина;
	//		
	//	ИначеЕсли Найти(ИдентификаторСерии, "МаркерПоследнегоЗначения") Тогда
	//		СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Круг;
	//		СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
	//		
	//	Иначе
	//		СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
	//		СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла; 
	
КонецПроцедуры

// Устанавливает настройки по умолчанию точек диаграммы
//
// Параметры
//	Диаграмма  - содержит заполняемый объект Диаграмма
//	ВариантАнализа - Ссылка на вариант анализа
//
Процедура УстановитьНастройкиПоУмолчаниюТочекДиаграммы(Диаграмма, ВариантАнализа)
	
	//ТочкиДиаграммы = Диаграмма.Точки;
	//
	//Если ВариантАнализа.ТипАнализа = Перечисления.ркТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
	//	Для Каждого ТочкаДиаграммы Из ТочкиДиаграммы Цикл 
	//		Если Найти(ТочкаДиаграммы.Значение, "Прогноз") Тогда
	//			ТочкаДиаграммы.Цвет = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета["Прогноз"];
	//			ТочкаДиаграммы.ПриоритетЦвета = Истина;
	//		ИначеЕсли Найти(ТочкаДиаграммы.Значение, "Прошлый") Тогда
	//			ТочкаДиаграммы.Цвет = WebЦвета.ТемноСерый;
	//			ТочкаДиаграммы.ПриоритетЦвета = Истина;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры оформления серий диаграммы в соответсвии с настройками показателя 
//
// Параметры
//	СерииДиаграммы - содержит серии объекта Диаграмма
//	ВариантАнализа	   - Ссылка на вариант анализа
//
//Процедура УстановитьПользовательскиеНастройкиСерийДиаграммы(СерииДиаграммы, ВариантАнализа)
//	
//	ЗначениеАнализаПоле = ВариантАнализа.ЗначениеАнализа.Получить();
//	Если НЕ ЗначениеАнализаПоле = Неопределено Тогда
//		ЗначениеАнализаИмяПоля = Строка(ЗначениеАнализаПоле);
//	Иначе
//		ЗначениеАнализаИмяПоля = "";
//	КонецЕсли;	
//	
//	Если НЕ ВариантАнализа.ТипАнализа = Перечисления.ркТипыАнализаПоказателей.ПокомпонентноеСравнение Тогда
//		ЦветаСерийПоказателя = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета;
//		
//		Для каждого СерияДиаграммы Из СерииДиаграммы Цикл
//			
//			ИдентификаторСерии = СерияДиаграммы.Значение;
//			
//			Если Найти(ИдентификаторСерии, НСтр("ru='Признак'")) Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			// Цвета и маркеры серий
//			Если Найти(ИдентификаторСерии, НСтр("ru='ПриведенноеГраничноеПозитивноеОтклонение'"))
//				ИЛИ Найти(ИдентификаторСерии, НСтр("ru='ПриведенноеГраничноеНегативноеОтклонение'")) Тогда
//				СерияДиаграммы.Цвет = ЦветаСерийПоказателя[СтрЗаменить(ИдентификаторСерии, НСтр("ru='ПриведенноеГраничное'"), "")];
//				
//			ИначеЕсли Найти(ИдентификаторСерии, НСтр("ru='Прогноз'"))
//				ИЛИ Найти(ИдентификаторСерии, НСтр("ru='Тренд'")) Тогда
//				
//				Если ВариантАнализа.ВыводитьМаркерТочекПрогноза Тогда
//					СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Ромб;
//					СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
//				Иначе
//					СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
//					СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир, 2);
//				КонецЕсли;
//				СерияДиаграммы.Цвет = ЦветаСерийПоказателя[ИдентификаторСерии];
//				
//			ИначеЕсли Найти(ИдентификаторСерии, НСтр("ru='МаркерПоследнегоЗначения'")) Тогда
//				СерияДиаграммы.Цвет = ЦветаСерийПоказателя[НСтр("ru='Значение'")];
//				
//			ИначеЕсли Найти(ИдентификаторСерии, НСтр("ru='ЦелевойДиапазон'"))
//				ИЛИ Найти(ИдентификаторСерии, НСтр("ru='ЦелевоеЗначение'")) Тогда
//				СерияДиаграммы.Цвет = ЦветаСерийПоказателя[НСтр("ru='ЦелевоеЗначение'")];
//				
//			ИначеЕсли Найти(ИдентификаторСерии, ЗначениеАнализаИмяПоля) Тогда 
//				СерияДиаграммы.Цвет = ЦветаСерийПоказателя[НСтр("ru='Значение'")];
//				
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//	ИначеЕсли ВариантАнализа.ТипАнализа = Перечисления.ркТипыАнализаПоказателей.ПокомпонентноеСравнение Тогда
//		
//		Если ВариантАнализа.ТолькоЦветОсновнойСерии Тогда
//			ЦветОсновнойСерии = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета[НСтр("ru='Значение'")];
//			ЦветНегативногоЗначения = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета[НСтр("ru='НегативноеОтклонение'")];
//			КоличествоСерийДиаграммы = СерииДиаграммы.Количество();
//			
//			ЕстьГрадиент = ВариантАнализа.ГрадиентДляПокомпонетногоСравнения;
//			ВыделятьМаксимальноеЗначение = ВариантАнализа.ВыделятьМаксимальноеЗначениеДляПокомпонетногоСравнения;
//			
//			ИсходныйКрасный = 0;
//			ИсходныйЗеленый = 0;
//			ИсходныйСиний = 0;
//			ИсходныйТон = 0;
//			ИсходнаяНасыщенность = 0;
//			ИсходнаяСветлота = 0;
//			
//			ПолучитьRGBWebЦвета(ЦветОсновнойСерии, ИсходныйКрасный, ИсходныйЗеленый, ИсходныйСиний);
//			ПолучитьHSVпоRGB(ИсходныйКрасный, ИсходныйЗеленый, ИсходныйСиний, ИсходныйТон, ИсходнаяНасыщенность, ИсходнаяСветлота);
//			
//			Если ЕстьГрадиент Тогда
//				ВесМаксимальнойСерии = 0;
//				Для Каждого СерияДиаграммы Из СерииДиаграммы Цикл
//					// По весу серии
//					ТекстСерии = СерияДиаграммы.Текст;
//					НачалоМаркераВесаСерии = Найти(ТекстСерии, "#");
//					ДлинаЗначенияСерии = СтрДлина(ТекстСерии);
//					МаркерВесаСерии = Прав(ТекстСерии, ДлинаЗначенияСерии - НачалоМаркераВесаСерии + 1);
//					
//					ВесМаксимальнойСерии = Макс(ВесМаксимальнойСерии, Число(СтрЗаменить(МаркерВесаСерии, "#","")));
//					
//				КонецЦикла;
//				
//			КонецЕсли;
//			
//			Для Каждого СерияДиаграммы Из СерииДиаграммы Цикл
//				
//				Если ЕстьГрадиент Тогда
//					// По весу серии
//					ТекстСерии = СерияДиаграммы.Текст;
//					НачалоМаркераВесаСерии = Найти(ТекстСерии, "#");
//					ДлинаЗначенияСерии = СтрДлина(ТекстСерии);
//					МаркерВесаСерии = Прав(ТекстСерии, ДлинаЗначенияСерии - НачалоМаркераВесаСерии + 1);
//					
//					СерияДиаграммы.Текст = СтрЗаменить(ТекстСерии, МаркерВесаСерии, "");
//					
//					ВесСерии = Число(СтрЗаменить(МаркерВесаСерии, "#",""));
//					
//					Если ВесМаксимальнойСерии = 0 Тогда
//						Продолжить;
//						
//					КонецЕсли;
//					
//					КоэффициентВесаСерии = ВесСерии/ВесМаксимальнойСерии;
//					
//					СерияКрасный = 0;
//					СерияЗеленый = 0;
//					СерияСиний = 0;
//					
//					// По весу серии
//					Если ВыделятьМаксимальноеЗначение И ВесСерии = ВесМаксимальнойСерии Тогда
//						
//						// Если выделять первое значение ИсходнаяНасыщенность * КоэффициентВесаСерии
//						ПолучитьRGBпоHSV(ИсходныйТон, 100, ИсходнаяСветлота + (100 - ИсходнаяСветлота) * (1 - КоэффициентВесаСерии), СерияКрасный, СерияЗеленый, СерияСиний);
//						ПолучитьДополнительныйЦветПоRGB(СерияКрасный, СерияЗеленый, СерияСиний, СерияКрасный, СерияЗеленый, СерияСиний);
//						
//					Иначе
//						ПолучитьRGBпоHSV(ИсходныйТон, ИсходнаяНасыщенность * КоэффициентВесаСерии, ИсходнаяСветлота + (100 - ИсходнаяСветлота) * (1 - КоэффициентВесаСерии), СерияКрасный, СерияЗеленый, СерияСиний);
//						
//					КонецЕсли;
//					
//					Если ВесСерии < 0 Тогда
//						СерияДиаграммы.Цвет = ЦветНегативногоЗначения;
//					Иначе
//						СерияДиаграммы.Цвет = Новый Цвет(СерияКрасный, СерияЗеленый, СерияСиний);
//					КонецЕсли;
//				Иначе
//					СерияДиаграммы.Цвет = ЦветОсновнойСерии;
//					
//				КонецЕсли;
//				
//				Если ЕстьГрадиент И ВыделятьМаксимальноеЗначение И ВесСерии = ВесМаксимальнойСерии Тогда
//					
//					// Если выделять первое значение ИсходнаяНасыщенность * КоэффициентВесаСерии
//					ПолучитьRGBпоHSV(ИсходныйТон, 100, ИсходнаяСветлота + (100 - ИсходнаяСветлота) * (1 - КоэффициентВесаСерии), СерияКрасный, СерияЗеленый, СерияСиний);
//					ПолучитьДополнительныйЦветПоRGB(СерияКрасный, СерияЗеленый, СерияСиний, СерияКрасный, СерияЗеленый, СерияСиний);
//				КонецЕсли;
//				
//			КонецЦикла;
//			
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

//// Устанавливает параметры оформления точек диаграммы в соответсвии с настройками показателя 
////
//// Параметры
////	ТочкиДиаграммы - содержит точки объекта Диаграмма
////	ВариантАнализа	   - Ссылка на вариант анализа
////
//Процедура УстановитьПользовательскиеНастройкиТочекДиаграммы(ТочкиДиаграммы, ВариантАнализа, ПериодыСПризнаком)
//	
//	ЦветаПоказателя = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета;
//	
//	Для каждого ТочкаДиаграммы Из ТочкиДиаграммы Цикл
//		
//		ИдентификаторТочки = ТочкаДиаграммы.Значение;
//		
//		// Найдем точки с "Признак" = Истина в источнике данных
//		Если НЕ ПериодыСПризнаком.Найти(Дата(ИдентификаторТочки)) = Неопределено Тогда
//			
//			ТочкаДиаграммы.ПриоритетЦвета = Истина;
//			ТочкаДиаграммы.Цвет = ЦветаПоказателя["Прогноз"];
//			
//		КонецЕсли;
//		
//	КонецЦикла; 
//	
//КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование печатной формы варианта анализа и сводного отчета.

// Заполняет шапку табличного документа (Имя показателя, статус, параметры)
//
// Параметры
//	ТабличныйДокументАнализаПоказателя 	- ТабличныйДокумент для заполнения
//	ВариантАнализа						- Ссылка на вариант анализа
//	ИсточникДанных						- ТаблицаЗначений с данными для диаграммы
//
Процедура ЗаполнитьСправочныеДанныеПоказателя(ТабличныйДокумент, ВариантАнализа, ИсточникДанных)
	
	//ТипыАнализа = Перечисления.ркТипыАнализаПоказателей;
	//ТипАнализа = ВариантАнализа.ТипАнализа;
	//
	//СвойстваВариантаАнализа = ПолучитьСвойстваВариантаАнализа(ВариантАнализа, ИсточникДанных);
	//МакетПечатнойФормы = ПолучитьМакетПечатнойФормыВариантаАнализа();
	//Разделитель = ПолучитьРазделительПечатнойФормыВариантаАнализа();
	//
	//ЕстьСравнение = (ТипАнализа = ТипыАнализа.СравнениеСПрошлымПериодом);
	//
	//ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаНаименование");
	//ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа); 
	//
	//Если ЕстьСравнение Тогда
	//	ОтображаемоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ОбщийИтог;
	//Иначе 
	//	ОтображаемоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение;
	//КонецЕсли;
	//
	//// Начало рк
	////ОбластьМакета.Рисунки.КартинкаСостоянияПоказателя.Картинка = ПолучитьКартинкуСостоянияДляПоказателя(ВариантАнализа, ИсточникДанных);
	////ОбластьМакета.Рисунки.КартинкаТрендаПоказателя.Картинка = ПолучитьКартинкуТрендаДляПоказателя(ВариантАнализа, ИсточникДанных);
	//// Окончание рк
	//
	//ТабличныйДокумент.Вывести(ОбластьМакета, 1, "Шапка");
	//ТабличныйДокумент.Вывести(Разделитель, 2, "Шапка");
	//
	//// Выведем информацию о цели
	//ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОЦели");
	//ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа);
	//ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Шапка");
	//
	//// Выведем информацию о целевом показателе
	//ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОЦелевомПоказателе");
	//ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа);
	//ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Шапка");
	//
	//// Начало рк
	////ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОЦелевомСостоянии");
	////ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа);
	////ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Шапка");
	//
	//// Выведем информацию о фактическом состоянии
	////ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОФактическомСостоянии");
	////ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа);
	////ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Шапка");
	//// Окончание рк
	//
	//// Выведем информацию о параметрах анализа
	//ОбластьМакетаПараметров = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОПараметрахАнализа");
	//ЗаполнитьЗначенияСвойств(ОбластьМакетаПараметров.Параметры, СвойстваВариантаАнализа);
	//
	//Если НЕ ЕстьСравнение Тогда
	//	ОбластьМакетаПараметров.УдалитьОбласть(ОбластьМакетаПараметров.Области.ШапкаПериодСравнения, ТипСмещенияТабличногоДокумента.ПоВертикали);
	//	
	//КонецЕсли;
	//
	//Если НЕ ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение Тогда
	//	ОбластьМакета = ОбластьМакетаПараметров.ПолучитьОбласть("ШапкаОбъектАнализа");
	//	ОбластьМакетаПараметров.УдалитьОбласть(ОбластьМакетаПараметров.Области.ШапкаОбъектАнализа, ТипСмещенияТабличногоДокумента.ПоВертикали);
	//	
	//КонецЕсли;
	//
	//Если СвойстваВариантаАнализа.ПользовательскиеОтборы = Неопределено Тогда
	//	ОбластьМакета = ОбластьМакетаПараметров.ПолучитьОбласть("ШапкаПользовательскиеОтборы");
	//	ОбластьМакетаПараметров.УдалитьОбласть(ОбластьМакетаПараметров.Области.ШапкаПользовательскиеОтборы, ТипСмещенияТабличногоДокумента.ПоВертикали);
	//	
	//КонецЕсли;
	//
	//ТабличныйДокумент.Вывести(ОбластьМакетаПараметров, 3, "Шапка");
	//
	//// Выведем информацию о параметрах анализа
	//Если ВариантАнализа.РассчитыватьПрогноз 
	//	И НЕ ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда = Неопределено
	//	И НЕ ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Пустой Тогда
	//	ОбластьМакетаПараметровПрогноза = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОПараметрахПрогноза");
	//	ЗаполнитьЗначенияСвойств(ОбластьМакетаПараметровПрогноза.Параметры, СвойстваВариантаАнализа);
	//	
	//	ТабличныйДокумент.Вывести(ОбластьМакетаПараметровПрогноза, 3, "Шапка");
	//	
	//КонецЕсли;

	//ТабличныйДокумент.Вывести(Разделитель, 3, "Шапка");
	//
	//ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаСформирован");
	//ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа);
	//ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Шапка");
	//
	//ТабличныйДокумент.Вывести(Разделитель, 3, "Шапка");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Расчет источников данных и значений вариантов анализа.

Функция ВидОтклоненияОтЦелевогоЗначения(ВариантАнализа, ДатаЦелевогоЗначения)
	
	//ВидОтклоненияОтЦелевогоЗначения = Перечисления.ркВидыОтклоненийОтЦелевыхЗначенийПоказателей.ПустаяСсылка();
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	//Запрос.УстановитьПараметр("ДатаЦелевогоЗначения", ДатаЦелевогоЗначения);
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ВидОтклоненияОтЦелевогоЗначения
	//               |ИЗ
	//               |	РегистрСведений.ркЦелевыеЗначенияВариантовАнализа.СрезПоследних(%ПараметрПериода%, ВариантАнализа = &ВариантАнализа) КАК ЦелевыеЗначенияВариантовАнализаСрезПоследних";
	//			   
	//Запрос.Текст = СтрЗаменить(Запрос.Текст,
	//							"%ПараметрПериода%",
	//							"КОНЕЦПЕРИОДА(&ДатаЦелевогоЗначения, " + ВРег(ПолучитьИмяЗначенияПеречисления(ВариантАнализа.ПериодичностьКонтроля)) + ")");

	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если НЕ РезультатЗапроса.Пустой() Тогда 
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Выборка.Следующий();
	//	
	//	ВидОтклоненияОтЦелевогоЗначения = Выборка.ВидОтклоненияОтЦелевогоЗначения;
	//	
	//КонецЕсли;
	//
	//Возврат ВидОтклоненияОтЦелевогоЗначения;
	
КонецФункции

Процедура ЗаполнитьИнформациюОбУстановленныхЦелях(СвойстваДанныхПоПериодам, СтрокаСПоследнимиЗначениями, ВариантАнализа)
	
	ВидЦелевогоЗначения = ПолучитьВидЦелевогоЗначения(СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа);
	
	СвойстваДанныхПоПериодам.ВидЦелевогоЗначения = ВидЦелевогоЗначения;
	СвойстваДанныхПоПериодам.ЦелевоеЗначение = СтрокаСПоследнимиЗначениями.ЦелевоеЗначение;
	СвойстваДанныхПоПериодам.ЦелевойДиапазонМаксимум = СтрокаСПоследнимиЗначениями.ЦелевойДиапазонМаксимум;
	СвойстваДанныхПоПериодам.ЦелевойДиапазонМинимум = СтрокаСПоследнимиЗначениями.ЦелевойДиапазонМинимум;
	СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидОтклоненияОтЦелевогоЗначения(ВариантАнализа, СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения);
	СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение = СтрокаСПоследнимиЗначениями.ГраничноеПозитивноеОтклонение;
	СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение = СтрокаСПоследнимиЗначениями.ГраничноеНегативноеОтклонение;
	СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение = СтрокаСПоследнимиЗначениями.ПриведенноеГраничноеПозитивноеОтклонение;
	СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение = СтрокаСПоследнимиЗначениями.ПриведенноеГраничноеНегативноеОтклонение;
	
КонецПроцедуры

Функция ИнициализироватьИсточникДанных()
	
	//ИсточникДанных = Новый Структура("Цель,
	//|ВариантАнализа,
	//|ДинамическиеСвойстваВариантаАнализа,
	//|Данные,
	//|ДатаРасчета, 
	//|ДанныеАктуальны,
	//|РасчетыАктуальны,
	//|ДляТаблицы,
	//|Пустой,
	//|ОшибкаРасчета,
	//|ОписаниеОшибки,
	//|СвойстваДанныхПоПериодам,
	//|СвойстваДанныхПоПериодамСравнения,
	//|СвойстваДанныхПоОбъектамАнализа,
	//|СвойстваПрогнозаДанныхПоПериодам,
	//|СвойстваЗоныАнализаИТренда,
	//|СвойстваОбщейСтатистики", 
	//Справочники.ркСтруктураЦелей.ПустаяСсылка(), 
	//Справочники.ркВариантыАнализаЦелевыхПоказателей.ПустаяСсылка(),,
	//Новый ТаблицаЗначений,
	//Дата(1,1,1), 
	//Ложь,
	//Истина,
	//Ложь,
	//Ложь,
	//Ложь,
	//""); 
	//
	//ДинамическиеСвойстваВариантаАнализа = Новый Структура("Размерность,
	//|ОбъектАнализа,
	//|ОбъектАнализаПредставление,
	//|ЗначениеАнализа,
	//|ЗначениеАнализаПредставление,
	//|ПериодичностьКонтроля,
	//|Отборы");
	//ИсточникДанных.Вставить("ДинамическиеСвойстваВариантаАнализа", ДинамическиеСвойстваВариантаАнализа);
	//
	//СвойстваДанныхПоПериодам = Новый Структура("ДатаПервогоЗначения, 
	//|ДатаПредпоследнегоЗначения, 
	//|ДатаПоследнегоЗначения, 
	//|ПервоеЗначение, 
	//|ПредпоследнееЗначение, 
	//|ПоследнееЗначение,
	//|ОбщийИтог,
	//|ВидЦелевогоЗначения,
	//|ЦелевоеЗначение, 
	//|ЦелевойДиапазонМинимум, 
	//|ЦелевойДиапазонМаксимум,
	//|ВидОтклоненияОтЦелевогоЗначения,
	//|ГраничноеПозитивноеОтклонение, 
	//|ГраничноеНегативноеОтклонение,
	//|ПриведенноеГраничноеПозитивноеОтклонение, 
	//|ПриведенноеГраничноеНегативноеОтклонение");
	//ИсточникДанных.Вставить("СвойстваДанныхПоПериодам", СвойстваДанныхПоПериодам);
	//
	//СвойстваДанныхПоПериодамСравнения = Новый Структура("ДатаПервогоЗначения, 
	//|ДатаПредпоследнегоЗначения, 
	//|ДатаПоследнегоЗначения, 
	//|ПервоеЗначение, 
	//|ПредпоследнееЗначение, 
	//|ПоследнееЗначение,
	//|ОбщийИтог,
	//|ВидЦелевогоЗначения,
	//|ЦелевоеЗначение, 
	//|ЦелевойДиапазонМинимум, 
	//|ЦелевойДиапазонМаксимум, 
	//|ВидОтклоненияОтЦелевогоЗначения,
	//|ГраничноеПозитивноеОтклонение, 
	//|ГраничноеНегативноеОтклонение,
	//|ПриведенноеГраничноеПозитивноеОтклонение, 
	//|ПриведенноеГраничноеНегативноеОтклонение");
	//ИсточникДанных.Вставить("СвойстваДанныхПоПериодамСравнения", СвойстваДанныхПоПериодамСравнения);
	//
	//СвойстваДанныхПоОбъектамАнализа = Новый Структура("ОбъектАнализаМаксимум, 
	//|ОбъектАнализаМинимум, 
	//|МаксимальноеЗначение, 
	//|МинимальноеЗначение");
	//ИсточникДанных.Вставить("СвойстваДанныхПоОбъектамАнализа", СвойстваДанныхПоОбъектамАнализа);
	//
	//СвойстваПрогнозаДанныхПоПериодам = Новый Структура("Периодичность, 
	//|Смещение, 
	//|ДатаНачала, 
	//|КоличествоПериодов, 
	//|Базис, 
	//|ГлубинаАнализа, 
	//|ДополнятьТаблицу, 
	//|СтатистическиеПараметрыТренда");
	//ИсточникДанных.Вставить("СвойстваПрогнозаДанныхПоПериодам", СвойстваПрогнозаДанныхПоПериодам);
	//
	//СвойстваЗоныАнализаИТренда = Новый Структура("ИзмененияСтабильны, 
	//|ЦелевойТренд, 
	//|НомерЗоныАнализа, 
	//|ФактическийТренд,
	//|ПояснениеКТренду,
	//|ТочекВРеальномТренде, 
	//|Статус, 
	//|ПояснениеКСтатусу,
	//|ХарактерИзменений, 
	//|ЗонаВнимания,
	//|ПорядокЗоныВнимания,
	//|ЦелевыеЗначенияПредставление");
	//ИсточникДанных.Вставить("СвойстваЗоныАнализаИТренда", СвойстваЗоныАнализаИТренда);
	//
	//СтруктураСтатистики = Новый Структура("Количество, 
	//|Минимум, 
	//|Максимум, 
	//|Среднее, 
	//|Размах, 
	//|СтандартноеОтклонение, 
	//|Медиана");
	//
	//СвойстваОбщейСтатистики = Новый Структура("ПоПериодам, ПоОбъектамАнализа", СтруктураСтатистики, СтруктураСтатистики) ;
	//
	//ИсточникДанных.Вставить("СвойстваОбщейСтатистики", СвойстваОбщейСтатистики);
	//
	//Возврат ИсточникДанных;
	
КонецФункции

Функция ИсточникДанныхПустойПоИтогам(ДанныеИсточникаДанных)
	
	РезультатПроверки = Истина;
	
	КолонкиИсточникаДанных = ДанныеИсточникаДанных.Колонки;
	
	Для каждого КолонкаИсточникаДанных Из КолонкиИсточникаДанных Цикл
		ИтогПоКолонке = ДанныеИсточникаДанных.Итог(КолонкаИсточникаДанных.Имя);
		
		Если НЕ ИтогПоКолонке = Неопределено И НЕ ИтогПоКолонке = 0 Тогда
			РезультатПроверки = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ОбщаяСтатистикаИсточникаДанных(ИсточникДанных)
	
	АнализИсточникаДанных = Новый АнализДанных;
	АнализИсточникаДанных.ТипАнализа = Тип("АнализДанныхОбщаяСтатистика");
	АнализИсточникаДанных.ИсточникДанных = ИсточникДанных;
	РезультатАнализИсточникаДанных = АнализИсточникаДанных.Выполнить();
	
	Возврат РезультатАнализИсточникаДанных;
	
КонецФункции

Функция ПорядокЗоныВнимания(ЗонаВнимания)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗонаВнимания);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗоныВниманияВариантовАнализа.Порядок КАК Порядок
	               |ИЗ
	               |	Перечисление.CRM_ЗоныВниманияАнализаПоказателей КАК ЗоныВниманияВариантовАнализа
	               |ГДЕ
	               |	ЗоныВниманияВариантовАнализа.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Порядок;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ПривестиВыраженияПолейИтоговКУказаннойТочности(СхемаКомпоновки, ВидПредставленияЧисла, Разрядность)
	
	//ПоляИтогов = СхемаКомпоновки.ПоляИтога;
	//ВидыПредставленияЧисел = Перечисления.ркВидыПредставленияЧисел;
	//
	//ЗнаменательТребуется = Ложь;
	//
	//Если ВидПредставленияЧисла = ВидыПредставленияЧисел.ВТысячах Тогда
	//	Знаменатель = СтрЗаменить(Строка(Pow(10, 3)), Символы.НПП, "");
	//	ЗнаменательТребуется = Истина;
	//ИначеЕсли ВидПредставленияЧисла = ВидыПредставленияЧисел.ВМиллионах Тогда
	//	Знаменатель = СтрЗаменить(Строка(Pow(10, 6)), Символы.НПП, "");
	//	ЗнаменательТребуется = Истина;
	//КонецЕсли;
	//
	//Для Каждого ПолеИтога Из ПоляИтогов Цикл 
	//	Если ПолеИтога.ПутьКДанным = "ГраничноеПозитивноеОтклонение"
	//		ИЛИ ПолеИтога.ПутьКДанным = "ГраничноеНегативноеОтклонение" Тогда
	//		ПолеИтога.Выражение = "ВЫБОР КОГДА ВидОтклоненияОтЦелевогоЗначения = ЗНАЧЕНИЕ(Перечисление.ркВидыОтклоненийОтЦелевыхЗначенийПоказателей.Абсолютное)
	//		|ТОГДА ВЫРАЗИТЬ(" + ПолеИтога.Выражение + ?(ЗнаменательТребуется,"/" + Знаменатель,"") + ",""Число(15," + Разрядность + ")"")
	//		|ИНАЧЕ " + ПолеИтога.Выражение 
	//		+ " КОНЕЦ";
	//		
	//	Иначе
	//		ПолеИтога.Выражение = "ВЫРАЗИТЬ(" + ПолеИтога.Выражение 
	//		+ ?(ЗнаменательТребуется,"/" + Знаменатель,"") 
	//		+ ",""Число(15," + Разрядность + ")"")";
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьНастройкиВариантаОтображения(КомпоновщикНастроек, ВариантАнализа, ВариантОтображения, ДинамическиеПараметры = Неопределено)
	
	//ВариантыОтображенияВариантовАнализа = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей;
	//ТипыАнализаПоказателей = Перечисления.ркТипыАнализаПоказателей;
	//
	//ТипАнализа = ВариантАнализа.ТипАнализа;
	//
	//// Получим настройки периодичности контроля
	//Если НЕ ДинамическиеПараметры = Неопределено И ДинамическиеПараметры.Свойство("ПериодичностьКонтроля") Тогда
	//	ТипДополнения = ПолучитьИмяЗначенияПеречисления(ДинамическиеПараметры.ПериодичностьКонтроля);
	//	
	//Иначе
	//	ТипДополнения = ПолучитьИмяЗначенияПеречисления(ВариантАнализа.ПериодичностьКонтроля);
	//	
	//КонецЕсли;
	//
	//// Получим настройки полей варианта анализа
	//Если НЕ ДинамическиеПараметры = Неопределено И ДинамическиеПараметры.Свойство("ОбъектАнализа") Тогда
	//	ОбъектАнализаПоле = Новый ПолеКомпоновкиДанных(ДинамическиеПараметры.ОбъектАнализа);
	//	ОбъектАнализаИмяПоля = ДинамическиеПараметры.ОбъектАнализа;
	//	
	//Иначе
	//	ОбъектАнализаПоле = ВариантАнализа.ОбъектАнализа.Получить();
	//	Если НЕ ОбъектАнализаПоле = Неопределено Тогда
	//		ОбъектАнализаИмяПоля = Строка(ОбъектАнализаПоле);
	//	Иначе
	//		ОбъектАнализаИмяПоля = Неопределено;
	//	КонецЕсли;	
	//	
	//КонецЕсли;
	//
	//ЗначениеАнализаПоле = ВариантАнализа.ЗначениеАнализа.Получить();
	//Если НЕ ЗначениеАнализаПоле = Неопределено Тогда
	//	ЗначениеАнализаИмяПоля = Строка(ЗначениеАнализаПоле);
	//Иначе
	//	ЗначениеАнализаИмяПоля = Неопределено;
	//КонецЕсли;	
	//	
	//КомпоновщикНастроек.Настройки.Структура.Очистить();
	//
	//Если ВариантОтображения = ВариантыОтображенияВариантовАнализа.Кратко Тогда 
	//	ГруппировкаПериода = ркКомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, "Период");
	//	
	//ИначеЕсли ВариантОтображения = ВариантыОтображенияВариантовАнализа.Диаграмма Тогда 
	//	Если ТипАнализа = ТипыАнализаПоказателей.ДинамикаИзменения Тогда
	//		ГруппировкаПериода = ркКомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, "Период");
	//		
	//	ИначеЕсли ТипАнализа = ТипыАнализаПоказателей.ПокомпонентноеСравнение Тогда
	//		ГруппировкаОбъектаАнализа = ркКомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, ОбъектАнализаИмяПоля);
	//		
	//		ГруппировкаПериода = ркКомпоновкаДанныхКлиентСервер.ДобавитьГруппировкуВКореньСтруктуры(КомпоновщикНастроек, "Период");
	//		
	//		// Установим упорядочивание
	//		УстановитьУпорядочиваниеГруппировки(ГруппировкаОбъектаАнализа, ВариантАнализа.ЗначениеАнализа.Получить(), НаправлениеСортировкиКомпоновкиДанных.Убыв);
	//		
	//	ИначеЕсли ТипАнализа = ТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда
	//		ГруппировкаПериода = ркКомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, "Период");
	//		
	//	ИначеЕсли ТипАнализа = ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
	//		ГруппировкаПериода = ркКомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, "Период");
	//		
	//	КонецЕсли;
	//	
	//ИначеЕсли ВариантОтображения = ВариантыОтображенияВариантовАнализа.Таблица Тогда 
	//	ГруппировкаОбъектаАнализа = ркКомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, ОбъектАнализаИмяПоля);
	//		
	//	ГруппировкаПериода = ркКомпоновкаДанныхКлиентСервер.ДобавитьГруппировкуВКореньСтруктуры(КомпоновщикНастроек, "Период");
	//	
	//	// Установим упорядочивание
	//	УстановитьУпорядочиваниеГруппировки(ГруппировкаОбъектаАнализа, ВариантАнализа.ЗначениеАнализа.Получить(), НаправлениеСортировкиКомпоновкиДанных.Убыв);
	//	
	//КонецЕсли;
	//
	//Если НЕ КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы.Найти("РасчетыАктуальны") = Неопределено Тогда
	//	ГруппировкаАктуальности = ркКомпоновкаДанныхКлиентСервер.ДобавитьГруппировкуВКореньСтруктуры(КомпоновщикНастроек, "РасчетыАктуальны");
	//КонецЕсли;
	//
	//// Добавим выбранное значение анализа и удалим добавленные ранее
	//СлужебныеПоля = Справочники.ркСтруктураЦелей.СлужебныеПоляЗначенияАнализа();
	//ПоляКУдалению = Новый Массив;
	//ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор.Элементы;
	//Для Каждого ВыбранноеПоле Из ВыбранныеПоля Цикл 
	//	Если СлужебныеПоля.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
	//		ПоляКУдалению.Добавить(ВыбранноеПоле);
	//	КонецЕсли;
	//КонецЦикла;
	//Для Каждого ПолеКУдалению Из ПоляКУдалению Цикл 
	//	ВыбранныеПоля.Удалить(ПолеКУдалению);
	//КонецЦикла;
	//ркКомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ЗначениеАнализаПоле);
	//
	//// Установим тип дополнения
	//ПолеНачалоПериода = Новый ПолеКомпоновкиДанных("ПараметрыДанных.НачалоПериода");
	//ПолеКонецПериода = Новый ПолеКомпоновкиДанных("ПараметрыДанных.КонецПериода");
	
КонецПроцедуры

Функция РассчитатьНарастающийИтогСравнения(ТаблицаПоПериодам, КолонкаОбъектаАнализа, КолонкаРасчета, ПериодАнализа, ПериодСравнения = Неопределено)
	
	НарастающиеИтоги = Новый Структура("ОбщийИтог, ОбщийИтогСравнения", 0, 0);
	
	ПериодСравненияУказан = (НЕ ПериодСравнения = Неопределено);
	
	Если ПериодСравненияУказан Тогда
		КонецПериодаСравнения = ПериодСравнения.ДатаОкончания;
		
	КонецЕсли;
	
	ПериодыСовпадают = (ПериодАнализа = ПериодСравнения);
	
	ЕстьКолонкаОбъектАнализа = (НЕ ТаблицаПоПериодам.Колонки.Найти(КолонкаОбъектаАнализа) = Неопределено);
	
	БазовыйИндекс = 0;
	БазовыйИндексОбъектаАнализа = 0;
	ЕстьОбъектыАнализа = Ложь;
	ОбщийИтог = 0;
	ОбщийИтогОбъектаАнализа = 0;
	ОбщийИтогСравнения = 0;
	СчитатьОбщийИтог = Ложь;
	СчитатьОбщийИтогСравнения = Ложь;
	КоличествоСтрокТаблицы = ТаблицаПоПериодам.Количество();
	Для Каждого СтрокаТаблицы Из ТаблицаПоПериодам Цикл 
		
		Если ЕстьКолонкаОбъектАнализа И НЕ СтрокаТаблицы[КолонкаОбъектаАнализа] = Неопределено Тогда
			Продолжить;
			
		КонецЕсли;
		
		ИндексСтрокиТаблицы = ТаблицаПоПериодам.Индекс(СтрокаТаблицы);
		
		Если ПериодСравненияУказан И СтрокаТаблицы.Период < КонецПериодаСравнения Тогда
			Если НЕ СчитатьОбщийИтогСравнения Тогда
				БазовыйИндекс = ИндексСтрокиТаблицы;
				СчитатьОбщийИтогСравнения = Истина;
				СчитатьОбщийИтог = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ СчитатьОбщийИтог Тогда
				БазовыйИндекс = ИндексСтрокиТаблицы;
				СчитатьОбщийИтогСравнения = Ложь;
				СчитатьОбщийИтог = Истина;
			КонецЕсли;
		КонецЕсли;
			
		Если СчитатьОбщийИтог Тогда
			ОбщийИтог = ОбщийИтог + СтрокаТаблицы[КолонкаРасчета];
			ОбщийИтогОбъектаАнализа = ОбщийИтогОбъектаАнализа + СтрокаТаблицы[КолонкаРасчета];
			
		КонецЕсли;
		
		Если СчитатьОбщийИтогСравнения Тогда
			ОбщийИтогСравнения = ОбщийИтогСравнения + СтрокаТаблицы[КолонкаРасчета];
			
		КонецЕсли;
		
		Если ИндексСтрокиТаблицы > БазовыйИндекс Тогда
			СтрокаТаблицы[КолонкаРасчета] = СтрокаТаблицы[КолонкаРасчета] + ТаблицаПоПериодам[ИндексСтрокиТаблицы-1][КолонкаРасчета];
			
		КонецЕсли;
		
		Если ЕстьОбъектыАнализа И ИндексСтрокиТаблицы = (КоличествоСтрокТаблицы - 1) Тогда
			ТаблицаПоПериодам[БазовыйИндексОбъектаАнализа][КолонкаРасчета] = ОбщийИтогОбъектаАнализа;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПериодыСовпадают Тогда
		НарастающиеИтоги.ОбщийИтог = ОбщийИтогСравнения;
	Иначе 
		НарастающиеИтоги.ОбщийИтог = ОбщийИтог;
	КонецЕсли;
	НарастающиеИтоги.ОбщийИтогСравнения = ОбщийИтогСравнения;
	
	Возврат НарастающиеИтоги;
	
КонецФункции

Функция СвойстваДанныхВариантаАнализаВКэше(ВариантАнализа, ВариантОтображения)
	
	СвойстваДанныхВариантаАнализаВКэше = Новый Структура("ДатаРасчета, ДанныеАктуальны", Дата(1,1,1), Ложь); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	Запрос.УстановитьПараметр("ВариантОтображения", ВариантОтображения);
	Запрос.УстановитьПараметр("ТекущаяДата", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	Запрос.УстановитьПараметр("ПериодАктуальностиРасчета", ПериодАктуальностиРасчетаВМинутах(ВариантАнализа.ПериодАктуальностиРасчета, ВариантАнализа.ВидПериодаАктуальностиРасчета));
	Запрос.Текст = ТекстЗапросаДанныхВариантаАнализаВКэше(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		СвойстваДанныхВариантаАнализаВКэше.ДатаРасчета = Выборка.ДатаРасчета;
		СвойстваДанныхВариантаАнализаВКэше.ДанныеАктуальны = Выборка.ДанныеАктуальны;
		
	КонецЕсли;
	
	Возврат СвойстваДанныхВариантаАнализаВКэше;
	
КонецФункции

Функция СвойстваДанныхВариантаАнализаВиджетаВКэше(ВариантАнализа, Сотрудник)
	
	СвойстваДанныхВариантаАнализаВКэше = Новый Структура("ДатаРасчета, ДанныеАктуальны", Дата(1,1,1), Ложь); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ТекущаяДата", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	Запрос.УстановитьПараметр("ПериодАктуальностиРасчета", ПериодАктуальностиРасчетаВМинутах(ВариантАнализа.ПериодАктуальностиРасчета, ВариантАнализа.ВидПериодаАктуальностиРасчета));
	Запрос.Текст = ТекстЗапросаДанныхВариантаАнализаВиджетаВКэше(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		СвойстваДанныхВариантаАнализаВКэше.ДатаРасчета = Выборка.ДатаРасчета;
		СвойстваДанныхВариантаАнализаВКэше.ДанныеАктуальны = Выборка.ДанныеАктуальны;
		
	КонецЕсли;
	
	Возврат СвойстваДанныхВариантаАнализаВКэше;
	
КонецФункции

// Возвращает зону внимания, характеризующую состояние(статус) показателя
//
// Параметры
//	ВариантАнализа		- Ссылка на вариант анализа
//	ИсточникДанных 	- ТаблицаЗначений с данными для диаграммы
//
// Возвращаемое значение:
//	Структура		- свойства зоны анализа
//
Функция СвойстваЗоныАнализа(Показатель, ТаблицаДанных)
	
	//////ЦелевойПоказатель = ВариантАнализа.Владелец;
	
	СвойстваЗоныАнализаИТренда = Новый Структура("ИзмененияСтабильны, 
	|ЦелевойТренд, 
	|НомерЗоныАнализа, 
	|ФактическийТренд,
	|ПояснениеКТренду,
	|ТочекВРеальномТренде, 
	|Статус, 
	|ПояснениеКСтатусу,
	|ХарактерИзменений, 
	|ЗонаВнимания,
	|ПорядокЗоныВнимания");
	
	//МатрицаСостояний = ПолучитьМатрицуСостояний();
	//ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ЦелевойПоказатель.ЦелевойТренд, ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа), ВариантАнализа.ТочностьРасчетаДробнойЧасти);
	//ИмяОбластиМатрицыСостояний = "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_" + ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ЦелевойПоказатель.ЦелевойТренд);
	//
	//СвойстваЗоныАнализаИТренда.ИзмененияСтабильны = Ложь;
	//СвойстваЗоныАнализаИТренда.ЦелевойТренд = ЦелевойПоказатель.ЦелевойТренд;
	//СвойстваЗоныАнализаИТренда.НомерЗоныАнализа = ЗонаАнализа.НомерЗоны;
	//СвойстваЗоныАнализаИТренда.ФактическийТренд = ЗонаАнализа.ФактическийТренд;
	//СвойстваЗоныАнализаИТренда.ПояснениеКТренду = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ПояснениеКТренду").ТекущаяОбласть.Текст;
	//СвойстваЗоныАнализаИТренда.ТочекВРеальномТренде = Неопределено;
	//СвойстваЗоныАнализаИТренда.Статус = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "Статус").ТекущаяОбласть.Текст;
	//СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ПояснениеКСтатусу").ТекущаяОбласть.Текст;
	//СвойстваЗоныАнализаИТренда.ХарактерИзменений = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ХарактерИзменений").ТекущаяОбласть.Текст;
	//СвойстваЗоныАнализаИТренда.ЗонаВнимания = Перечисления.CRM_ЗоныВниманияАнализаПоказателей[МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ЗонаВнимания").ТекущаяОбласть.Текст];
	//СвойстваЗоныАнализаИТренда.ПорядокЗоныВнимания = ПорядокЗоныВнимания(СвойстваЗоныАнализаИТренда.ЗонаВнимания);
	
	Возврат СвойстваЗоныАнализаИТренда;
	
КонецФункции

Функция ТекстЗапросаДанныхВариантаАнализаВКэше(ТолькоСвойства = Ложь)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	МАКСИМУМ(ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета) КАК ДатаРасчета,
	|	ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа КАК ВариантАнализа
	|ПОМЕСТИТЬ МаксимумДатыРасчета
	|ИЗ
	|	РегистрСведений.ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей КАК ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей
	|ГДЕ
	|	ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа = &ВариантАнализа
	|
	|СГРУППИРОВАТЬ ПО
	|	ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета КАК ДатаРасчета,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета, &ТекущаяДата, МИНУТА) <= &ПериодАктуальностиРасчета
	|				И ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета >= МаксимумДатыРасчета.ДатаРасчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДанныеАктуальны";
	
	Если НЕ ТолькоСвойства Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ИсточникДанных";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	РегистрСведений.ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей КАК ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимумДатыРасчета КАК МаксимумДатыРасчета
	|		ПО ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа = МаксимумДатыРасчета.ВариантАнализа
	|ГДЕ
	|	ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа = &ВариантАнализа
	|	И ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантОтображения = &ВариантОтображения";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныхВариантаАнализаВиджетаВКэше(ТолькоСвойства = Ложь)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	МАКСИМУМ(ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета) КАК ДатаРасчета,
	|	ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа КАК ВариантАнализа
	|ПОМЕСТИТЬ МаксимумДатыРасчета
	|ИЗ
	|	РегистрСведений.ркВиджетыИсточникиДанныхВариантовАнализаЦелевыхПоказателей КАК ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей
	|ГДЕ
	|	ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа = &ВариантАнализа
	|
	|СГРУППИРОВАТЬ ПО
	|	ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета КАК ДатаРасчета,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета, &ТекущаяДата, МИНУТА) <= &ПериодАктуальностиРасчета
	|				И ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета >= МаксимумДатыРасчета.ДатаРасчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДанныеАктуальны";
	
	Если НЕ ТолькоСвойства Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ИсточникДанных";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	РегистрСведений.ркВиджетыИсточникиДанныхВариантовАнализаЦелевыхПоказателей КАК ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимумДатыРасчета КАК МаксимумДатыРасчета
	|		ПО ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа = МаксимумДатыРасчета.ВариантАнализа
	|ГДЕ
	|	ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа = &ВариантАнализа
	|	И ркИсточникиДанныхВариантовАнализаЦелевыхПоказателей.Сотрудник = &Сотрудник";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьУпорядочиваниеГруппировки(ПолеГруппировки, ПолеУпорядочивания, ТипУпорядочивания)
	
	ЭлементыПорядка = ПолеГруппировки.Порядок.Элементы;
	ЭлементыПорядка.Очистить();
	
	НовыйЭлементПорядка = ЭлементыПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование = Истина;
	НовыйЭлементПорядка.Поле = ПолеУпорядочивания;
	НовыйЭлементПорядка.ТипУпорядочивания = ТипУпорядочивания;
	
КонецПроцедуры

Функция ЦелевыеЗначенияВариантаАнализа(ВариантАнализа, Дата)
	
	СтруктураЦелей = Новый Структура("ЦелевоеЗначение, 
	|ЦелевойДиапазонМинимум, 
	|ЦелевойДиапазонМаксимум,
	|ГраничноеПозитивноеОтклонение, 
	|ГраничноеНегативноеОтклонение,
	|ПриведенноеГраничноеПозитивноеОтклонение, 
	|ПриведенноеГраничноеНегативноеОтклонение");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ЦелевоеЗначение,
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ЦелевойДиапазонМинимум,
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ЦелевойДиапазонМаксимум,
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ГраничноеНегативноеОтклонение,
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ГраничноеПозитивноеОтклонение,
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ПриведенноеГраничноеНегативноеОтклонение,
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ПриведенноеГраничноеПозитивноеОтклонение
	|ИЗ
	|	РегистрСведений.ркЦелевыеЗначенияВариантовАнализа.СрезПоследних(&Дата, ВариантАнализа = &ВариантАнализа) КАК ЦелевыеЗначенияВариантовАнализаСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СтруктураЦелей, Выборка);
		
	КонецЕсли;
	
	Возврат СтруктураЦелей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее.

Функция НайтиСтрокиТаблицыПоУсловиюНЕ(ТаблицаЗначений, СтруктураОтборов)
	
	НайденныеСтроки = Новый Массив;
	
	ИсключаемыеСтроки = ТаблицаЗначений.НайтиСтроки(СтруктураОтборов);
	
	Для каждого СтрокаТаблицыЗначенийКОбработке Из ТаблицаЗначений Цикл
		Если ИсключаемыеСтроки.Найти(СтрокаТаблицыЗначенийКОбработке) = Неопределено Тогда
			НайденныеСтроки.Добавить(СтрокаТаблицыЗначенийКОбработке);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат НайденныеСтроки;
	
КонецФункции

// Возвращает базовое значение, для построения диаграмм с прогнозами
Функция ПолучитьБазовоеЗначениеДляДиаграмм()
	
	Возврат 0.01;
	
КонецФункции

// Возвращает значение числа в виде тыс., млн
// 
// Параметры:
//	ИсходноеЧисло		  - Число - форматируемое число
//	Разрядность			  - Число - количество знаков после запятой
//	ВидПредставленияЧисла - Перечисление - вид представления возвращаемой строки
//
// Возвращаемое значение:
//	Строка
//
Функция ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсходноеЧисло, Разрядность, ВидПредставленияЧисла)
	
	ЗначениеСокращенногоПредставленияЧисла = "";
	
	ЗначениеСокращенногоПредставленияЧисла = СтрЗаменить(Формат(ИсходноеЧисло, "ЧДЦ=" + Разрядность + ";ЧН="), " ", Символы.НПП);
	
	Возврат Число(ЗначениеСокращенногоПредставленияЧисла);
	
КонецФункции

// Возвращает вид целевого значения показателя на указанную дату
//
// Параметры
//		ДатаАктуальности - дата на которую хотим получить вид действующего целевого значения
//		ВариантАнализа - Ссылка на вариант анализа
//
// Возвращаемое значение:
//		ВидЦелевогоЗначения - Перечисление
//
Функция ПолучитьВидЦелевогоЗначения(ДатаАктуальности, ВариантАнализа)
	
	Перем ВидЦелевогоЗначения;
	
	ВидЦелевогоЗначения = Неопределено;
	
	ЗапросЦелевогоЗначения = Новый Запрос;
	ЗапросЦелевогоЗначения.УстановитьПараметр("ДатаАктуальности", ?(ДатаАктуальности = Неопределено, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(), ДатаАктуальности));
	ЗапросЦелевогоЗначения.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	ЗапросЦелевогоЗначения.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ВидЦелевогоЗначения
	|ИЗ
	|	РегистрСведений.ркЦелевыеЗначенияВариантовАнализа.СрезПоследних(%ПараметрПериода%, ВариантАнализа = &ВариантАнализа) КАК ЦелевыеЗначенияВариантовАнализаСрезПоследних";
	
	ЗапросЦелевогоЗначения.Текст = СтрЗаменить(ЗапросЦелевогоЗначения.Текст,
											   "%ПараметрПериода%",
												"КОНЕЦПЕРИОДА(&ДатаАктуальности, " + ВРег(ПолучитьИмяЗначенияПеречисления(ВариантАнализа.ПериодичностьКонтроля)) + ")");

	РезультатЗапроса = ЗапросЦелевогоЗначения.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ВидЦелевогоЗначения = Выборка.ВидЦелевогоЗначения;
		
	КонецЕсли;	
	
	Возврат ВидЦелевогоЗначения;
	
КонецФункции

// Возвращает сдвиг числа для видов тыс., млн
// 
// Параметры:
//	ВариантАнализа	- Ссылка на вариант анализа
//
// Возвращаемое значение:
//	Число
//
Функция ПолучитьСдвигПоВидуПредставленияЧисел(ВариантАнализа)
	
	//Сдвиг = 0;
	//КратностьЧисла = ВариантАнализа.КратностьЗначений;
	//ВидыПредставленияЧисел = Перечисления.ркВидыПредставленияЧисел;
	//
	//Если КратностьЧисла = ВидыПредставленияЧисел.БезИзменений Тогда
		Сдвиг = 0;
		
	//ИначеЕсли КратностьЧисла = ВидыПредставленияЧисел.ВТысячах Тогда
	//	Сдвиг = 3;
	//	
	//ИначеЕсли КратностьЧисла = ВидыПредставленияЧисел.ВМиллионах Тогда
	//	Сдвиг = 6;
	//	
	//КонецЕсли;
	
	Возврат Сдвиг;
	
КонецФункции

// Возвращает цвет в зависимости от числового значения в диапазона от 0 до 100%
// При этом: 
//	0 соответствует красному цвету, 
//	50 - оранжевому,
//	100 - зеленому.
//
// Параметры:
//  ЗначениеИндикатораВПроцентах - Число - значение в диапазоне от 0 до 100
//  Оттенок	- Число - значение в диапазоне от 0 до 255 (0 - самый насыщенный)
//
// Возвращаемое значение:
//  Цвет
//
Функция ПолучитьЦветИндикатора(ЗначениеИндикатораВПроцентах, Оттенок)
	
	Перем КрасныйЗначение, ЗеленыйЗначение, СинийЗначение, ЦветИндикатора;
	
	КрасныйЗначение = 255;
	ЗеленыйЗначение = Оттенок;
	СинийЗначение = Оттенок;
	
	Если ЗначениеИндикатораВПроцентах < 50 Тогда	
		
		КрасныйЗначение = 255;
		ЗеленыйЗначение = Оттенок + (255 - Оттенок)*(2 * ЗначениеИндикатораВПроцентах / 100);
		
		ЦветИндикатора = Новый Цвет(КрасныйЗначение, ЗеленыйЗначение, СинийЗначение);	
		
	ИначеЕсли ЗначениеИндикатораВПроцентах < 100 Тогда 
		
		КрасныйЗначение = 255 - (255 - Оттенок)*(2 * ЗначениеИндикатораВПроцентах / 100 - 1);
		ЗеленыйЗначение = 255;
		
		ЦветИндикатора = Новый Цвет(КрасныйЗначение, ЗеленыйЗначение, СинийЗначение);	
		
	Иначе 
		
		ЦветИндикатора = ЦветаСтиля.ЦветТекстаФормы;	
		
	КонецЕсли;
	
	Возврат ЦветИндикатора;
	
КонецФункции

// Возвращает макет электронной формы анализа показателя
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет табличного документа
//
Функция ПолучитьМатрицуСостояний()
	
	Перем МакетМатрицаСостоянийПоказателей;
	
	МакетМатрицаСостоянийПоказателей = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьМакет("МатрицаСостоянийПоказателей");
	
	Возврат МакетМатрицаСостоянийПоказателей;
	
КонецФункции

// Возвращает макет электронной формы анализа показателя
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет табличного документа
//
Функция ПолучитьМакетПечатнойФормыВариантаАнализа() Экспорт
	
	Перем МакетЭлектроннойФормыПоказателя;
	
	МакетЭлектроннойФормыПоказателя = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьМакет("МакетЭлектроннойФормыПоказателя");
	
	Возврат МакетЭлектроннойФормыПоказателя;
	
КонецФункции


// Возвращает преднастроенный для монитора объект "Диаграмма"
//
// Возвращаемое значение:
//  Диаграмма 
//
Функция ПолучитьПреднастроеннуюДиаграммуМонитора() Экспорт
	
	Перем ПреднастроеннаяДиаграмма;
	
	МакетСДиаграммой = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьМакет("МакетДиаграммыДляМонитора");
	ПреднастроеннаяДиаграмма = МакетСДиаграммой.Области.Диаграмма.Объект;
	
	Возврат ПреднастроеннаяДиаграмма;
	
КонецФункции

// Возвращает область "РазделительБлоков" макета электронной формы анализа показателя
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет области табличного документа документа, для разделения блоков информации
//
Функция ПолучитьРазделительПечатнойФормыВариантаАнализа() Экспорт
	
	Перем РазделительБлоков;
	
	МакетПечатнойФормыВариантаАнализа = ПолучитьМакетПечатнойФормыВариантаАнализа();
	РазделительБлоков = МакетПечатнойФормыВариантаАнализа.ПолучитьОбласть("РазделительБлоков");
	
	Возврат РазделительБлоков;
	
КонецФункции

// Функция возвращает список значений, содержащий имена и представления вариантов стандартного периода
//
// Параметры:
//	Нет.
// 
// Возвращаемое значение:
//	СписокЗначений	- Список, который содержит имена и представления вариантов стандартного периода
// 
Функция ПериодПолучитьСписокВыбораПоказателей() Экспорт
	
	ТипыПериодов = Новый СписокЗначений;
	ТипыПериодов.Добавить("НеВыбран", НСтр("ru = 'Без ограничения'"));
	ТипыПериодов.Добавить("ПроизвольныйПериод", НСтр("ru = 'Произвольный период'"));
	ТипыПериодов.Добавить("ПрошлыйМесяц", НСтр("ru = 'Прошлый месяц'"));
	ТипыПериодов.Добавить("ЭтотМесяц", 	НСтр("ru = 'Этот месяц'"));
	ТипыПериодов.Добавить("ПрошлыйКвартал", НСтр("ru = 'Прошлый квартал'"));
	ТипыПериодов.Добавить("ЭтотКвартал", НСтр("ru = 'Этот квартал'"));
	
	Возврат ТипыПериодов;
	
КонецФункции // ПериодПолучитьСписокВыбора()

// Возвращает разницу между двумя датами (в днях)
//
// Параметры
//  ДатаНачала 		- Дата - начальная дата периода
//  ДатаОкончания	- Дата - конечная дата периода
//
// Возвращаемое значение:
//   Число	 - количество дней между двумя датами
//
Функция РазностьДат(ДатаНачала, ДатаОкончания, Периодичность) Экспорт
	
	СекундВМинуте = 60;
	МинутВЧасе = 60;
	ЧасовВДне = 24;
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат Год(ДатаОкончания) - Год(ДатаНачала);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Возврат ?(Месяц(ДатаОкончания)>6, 2, 1) - ?(Месяц(ДатаНачала)>6, 2, 1) + 2*(Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат Цел(Месяц(НачалоКвартала(ДатаОкончания))/3) - Цел(Месяц(НачалоКвартала(ДатаНачала))/3) + 4*(Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат Месяц(ДатаОкончания) - Месяц(ДатаНачала) + 12*(Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Возврат Цел((ДатаОкончания - ДатаНачала)/(10 * СекундВМинуте*МинутВЧасе*ЧасовВДне));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат Цел((НачалоНедели(ДатаОкончания) - НачалоНедели(ДатаНачала))/(7 * СекундВМинуте*МинутВЧасе*ЧасовВДне));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		Возврат (ДатаОкончания - ДатаНачала)/(СекундВМинуте*МинутВЧасе*ЧасовВДне);
		
	КонецЕсли;
	
КонецФункции

#КонецЕсли