
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ПередЗакрытием_Продолжение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием_Продолжение()
	Оповещение = Новый ОписаниеОповещения("ПередЗакрытием_Завершение", ЭтаФорма);
	ПоказатьВопрос(Оповещение, НСтр("ru='Настройки были изменены. Записать изменения настроек?'"), РежимДиалогаВопрос.ДаНетОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием_Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		ЗаписатьНастройки();
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтруктураНастроек = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьНастройкиМонитораЦелевыхПоказателей();
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
	
	ВыбранныеШаблоныПоказателей = СтруктураНастроек.ВыбранныеШаблоныПоказателей.Скопировать();
	
	СформироватьДеревоШаблонов();
	
	УстановитьНадписьКоличествоКолонокМонитораПоказателей(КоличествоКолонокМонитораПоказателей, Элементы);
	
	// Кэшируем варианты отображения и тип анализа, так как потребуется сравнение с ними на клиенте
	//ВариантОтображенияКратко = Перечисления.ркВариантыОтображенияВариантовАнализа.Кратко;
	//ВариантОтображенияДиаграмма = Перечисления.ркВариантыОтображенияВариантовАнализа.Диаграмма;
	//ВариантОтображенияТаблица = Перечисления.ркВариантыОтображенияВариантовАнализа.Таблица;
	//ТипАнализаПокомпонентноеСравнение = Перечисления.ркТипыАнализаПоказателей.ПокомпонентноеСравнение;
	
	// Если нет права, то настройки по умолчанию покажем, но изменить или записать их будет нельзя
	ТолькоПросмотр = НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВариантГруппировкиПоказателейПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияДеталейПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоКолонокМонитораПоказателейПриИзменении(Элемент)
	
	УстановитьНадписьКоличествоКолонокМонитораПоказателей(КоличествоКолонокМонитораПоказателей, Элементы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтообновленияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерДиаграммПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаписатьНастройкиИЗакрыть(Команда)
	
	ЗаписатьНастройки();
	
	Модифицированность = Ложь;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	
	НастройкиПоУмолчанию = ПолучитьСтандартныеНастройки();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиПоУмолчанию);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтандартныеНастройки()
	
	Возврат Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьПерсональныеНастройкиМонитораЦелевыхПоказателейПоУмолчанию();
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте 
Процедура ЗаписатьНастройки()
	
	Если ЗаписатьНастройкиСервер() Тогда 
		Оповестить("ИзменениеНастроекМонитораПоказателей", , ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Функция ЗаписатьНастройкиСервер()
	МассивСтруктур = Новый Массив;
	
	ОповещатьОИзмененииНастроек = Ложь;
	
	// порядок вывода показателей
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиМонитораЦелевыхПоказателей");
	Элемент.Вставить("Настройка", "ВариантГруппировкиПоказателей");
	Элемент.Вставить("Значение", ВариантГруппировкиПоказателей);
	МассивСтруктур.Добавить(Элемент);
	
	Если ВариантГруппировкиПоказателей <> СтруктураНастроек.ВариантГруппировкиПоказателей Тогда
		ОповещатьОИзмененииНастроек = Истина;
		
	КонецЕсли;
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиМонитораЦелевыхПоказателей");
	Элемент.Вставить("Настройка", "КоличествоКолонокМонитораПоказателей");
	Элемент.Вставить("Значение", КоличествоКолонокМонитораПоказателей);
	МассивСтруктур.Добавить(Элемент);
	
	Если КоличествоКолонокМонитораПоказателей <> СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда
		ОповещатьОИзмененииНастроек = Истина;
		
	КонецЕсли;
	
	// Внешний вид показателей
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиМонитораЦелевыхПоказателей");
	Элемент.Вставить("Настройка", "РазмерДиаграмм");
	Элемент.Вставить("Значение", РазмерДиаграмм);
	МассивСтруктур.Добавить(Элемент);
	
	Если РазмерДиаграмм <> СтруктураНастроек.РазмерДиаграмм Тогда
		ОповещатьОИзмененииНастроек = Истина;
		
	КонецЕсли;
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиМонитораЦелевыхПоказателей");
	Элемент.Вставить("Настройка", "ВариантОтображенияДеталей");
	Элемент.Вставить("Значение", ВариантОтображенияДеталей);
	МассивСтруктур.Добавить(Элемент);
	
	Если ВариантОтображенияДеталей <> СтруктураНастроек.ВариантОтображенияДеталей Тогда
		ОповещатьОИзмененииНастроек = Истина;
		
	КонецЕсли;
	
	// Обновление данных
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиМонитораЦелевыхПоказателей");
	Элемент.Вставить("Настройка", "ПериодАвтообновления");
	Элемент.Вставить("Значение", ПериодАвтообновления);
	МассивСтруктур.Добавить(Элемент);
	
	Если ПериодАвтообновления <> СтруктураНастроек.ПериодАвтообновления Тогда
		ОповещатьОИзмененииНастроек = Истина;
		
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ДеревоШаблоновПоказателей", Тип("ДеревоЗначений"));
	Отбор = Новый Структура("Выбран", 1);
	Строки = Дерево.Строки.НайтиСтроки(Отбор, Истина);
	ВыбранныеШаблоныПоказателей.Очистить();
	Для Каждого Строка из Строки Цикл
		Если НЕ Строка.Шаблон.ЭтоГруппа Тогда
			ВыбранныеШаблоныПоказателей.Добавить(Строка.Шаблон);
		КонецЕсли;
	КонецЦикла;
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиМонитораЦелевыхПоказателей");
	Элемент.Вставить("Настройка", "ВыбранныеШаблоныПоказателей");
	Элемент.Вставить("Значение", ВыбранныеШаблоныПоказателей);
	МассивСтруктур.Добавить(Элемент);
	Если ВыбранныеШаблоныПоказателей <> СтруктураНастроек.ВыбранныеШаблоныПоказателей Тогда
		ОповещатьОИзмененииНастроек = Истина;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	
	Возврат ОповещатьОИзмененииНастроек;
	
КонецФункции

&НаСервере
Функция ПолучитьXML(Значение)
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьНадписьКоличествоКолонокМонитораПоказателей(КоличествоКолонокМонитораПоказателей, Элементы)
	
	Если КоличествоКолонокМонитораПоказателей = 1 Тогда
		Элементы.НадписьКоличествоКолонокМонитораПоказателей.Заголовок = "колонку";
		
	Иначе
		
		ФорматнаяСтрока = "L = ru_RU";
		ПараметрыПредметаИсчиления = "колонка, колонки, колонок, ж";
		СловоПрописью = ЧислоПрописью(КоличествоКолонокМонитораПоказателей, ФорматнаяСтрока, ПараметрыПредметаИсчиления);
		Если Найти(СловоПрописью, "колонки") Тогда
			СловоПрописью = "колонки";
		ИначеЕсли Найти(СловоПрописью, "колонок") Тогда
			СловоПрописью = "колонок";
		КонецЕсли;
		
		Элементы.НадписьКоличествоКолонокМонитораПоказателей.Заголовок =  СловоПрописью;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаблоновПоказателейВыбратьВсе(Команда)
	ДеревоШаблоновПоказателейВыбратьВсеНаСервере();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ДеревоШаблоновПоказателейВыбратьВсеНаСервере()
	Дерево = РеквизитФормыВЗначение("ДеревоШаблоновПоказателей", Тип("ДеревоЗначений"));
	Для каждого СтрокаДерева из Дерево.Строки Цикл
		СтрокаДерева.Выбран = 1;
		Для каждого Строка из СтрокаДерева.Строки Цикл
			Строка.Выбран = 1;
		КонецЦикла;
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево, "ДеревоШаблоновПоказателей");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаблоновПоказателейОтменитьВсе(Команда)
	ВыбранныеШаблоныПоказателей.Очистить();
	СформироватьДеревоШаблонов();
	Модифицированность = Истина;
КонецПроцедуры

Процедура СформироватьДеревоШаблонов()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_ШаблоныКлючевыхПоказателей.Ссылка КАК Шаблон,
	                      |	ВЫБОР
	                      |		КОГДА CRM_ШаблоныКлючевыхПоказателей.Ссылка В (&СписокШаблонов)
	                      |			ТОГДА 1
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК Выбран
	                      |ИЗ
	                      |	Справочник.CRM_ШаблоныКлючевыхПоказателей КАК CRM_ШаблоныКлючевыхПоказателей
	                      |ГДЕ
	                      |	НЕ CRM_ШаблоныКлючевыхПоказателей.ЭтоГруппа
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_ШаблоныКлючевыхПоказателей.ЭтоГруппа УБЫВ,
	                      |	CRM_ШаблоныКлючевыхПоказателей.Ссылка
	                      |ИТОГИ ПО
	                      |	Шаблон ТОЛЬКО ИЕРАРХИЯ
	                      |АВТОУПОРЯДОЧИВАНИЕ");
						  
	Запрос.УстановитьПараметр("СписокШаблонов", ВыбранныеШаблоныПоказателей);  
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Дерево = РеквизитФормыВЗначение("ДеревоШаблоновПоказателей", Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Шаблон) Тогда
			СтрокаГруппы = Дерево.Строки.Добавить();
			СтрокаГруппы.Шаблон = Выборка.Шаблон;
			СтрокиГруппы = СтрокаГруппы.Строки;
		Иначе
			СтрокиГруппы = Дерево.Строки;
		КонецЕсли;
		ВыборкаЭлемент = Выборка.Выбрать();
		Пока ВыборкаЭлемент.Следующий() Цикл
			СтрокаЭлемента = СтрокиГруппы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЭлемента, ВыборкаЭлемент);
		КонецЦикла;
		ПараметрыОтбора = Новый Структура("Выбран", 1);
		КоличествоВыбраных = СтрокиГруппы.НайтиСтроки(ПараметрыОтбора).Количество();
		Если ЗначениеЗаполнено(Выборка.Шаблон) Тогда
			Если КоличествоВыбраных = СтрокиГруппы.Количество() Тогда
				СтрокаГруппы.Выбран = 1;
			ИначеЕсли КоличествоВыбраных > 0 Тогда
				СтрокаГруппы.Выбран = 2;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево, "ДеревоШаблоновПоказателей");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоШаблоновПоказателейВыбранПриИзменении(Элемент)
	ТекДанные = Элементы.ДеревоШаблоновПоказателей.ТекущиеДанные;
	Если ТекДанные.Выбран = 2 Тогда
		Текданные.Выбран = 0;
	КонецЕсли;
	Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекДанные.Шаблон, "ЭтоГруппа") Тогда
		ЭлементыРодителя = ТекДанные.ПолучитьЭлементы();
		Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
			ЭлементРодителя.Выбран = Текданные.Выбран;
		КонецЦикла;
	Иначе
		Родитель = Текданные.ПолучитьРодителя();
		Если Родитель<> Неопределено Тогда
			ЭлементыРодителя = Родитель.ПолучитьЭлементы();
			Выбраны = 0;
			Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
				Если ЭлементРодителя.Выбран = 1 Тогда
					Выбраны = Выбраны + 1;
				КонецЕсли;
			КонецЦикла;
			Если Выбраны = ЭлементыРодителя.Количество() Тогда
				Родитель.Выбран = 1;
			ИначеЕсли Выбраны > 0 Тогда
				Родитель.Выбран = 2;
			Иначе
				Родитель.Выбран = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

