&НаКлиенте
Перем ПараметрыОбработчикаОжидания;// Параметры обработчика ожидания

&НаКлиенте
Перем ФормаДлительнойОперации;//Форма длительной операции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеНастроекМонитораПоказателей" Тогда
		
		ОбновлениеСтруктурыНастроекСервер();
		
		ИнициализироватьОбработчикАвтообновления(СтруктураНастроек.ПериодАвтообновления * 60);
		
		ОбновитьСоставМонитораКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Если НЕ ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
	//	ИнициализироватьОбработчикАвтообновления();				
	//	ИнициализироватьОбработчикПервогоЗапуска();				
	//КонецЕсли;
	Обновить(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеСервер.ВариантПоставкиКОРП() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Монитор показателей доступен только для ""КОРП"" поставки конфигурации!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьНастройкиМонитораЦелевыхПоказателей();
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ЗаполнитьСписокВыбораОтбораПоСтатусу();
	
	Если Параметры.Свойство("ОтборНачалоПериода") Тогда
		ОтборНачалоПериода 	  = Параметры.ОтборНачалоПериода;
	Иначе	
		ОтборНачалоПериода 	  = НачалоМесяца(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборКонецПериода") Тогда
		ОтборКонецПериода 	  = Параметры.ОтборКонецПериода;
	Иначе	
		ОтборКонецПериода 	  = КонецМесяца(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборСотрудник") Тогда
		ОтборСотрудник 	  = Параметры.ОтборСотрудник;
	КонецЕсли;
	
	Если Параметры.Свойство("СкрытьБыстрыеОтборы") Тогда
		Элементы.ГруппаБыстрыеОтборы.Видимость 	  = Не Параметры.СкрытьБыстрыеОтборы;
	КонецЕсли;	
	
	ПериодичностьКонтроля = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
	
	ПредставлениеПериода  = ПредставлениеПериода(ОтборНачалоПериода, ОтборКонецПериода, "L = ru_RU");
	
	Если НЕ ПустаяСтрока(Параметры.ИдентификаторВариантаАнализа) Тогда
		РежимАнализаВзаимосвязанных = Истина;
		Элементы.ФормаНастроить.Видимость = НЕ РежимАнализаВзаимосвязанных;
		
		Заголовок = "Анализ взаимосвязанных целевых показателей";
		АвтоЗаголовок = НЕ РежимАнализаВзаимосвязанных;
		
		АдресаДинамическихПараметров =  Новый ХранилищеЗначения(ДанныеФормыВЗначение(Параметры.СоставМонитора, Тип("ТаблицаЗначений")));
		
	КонецЕсли;
	
	ПолучитьНастройкиПоказателей();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	
	ОбновитьСоставМонитораКлиент();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Настроить(Команда)
	
	ПараметрыФормы = Новый Структура("ТекущийПользователь", ТекущийПользователь);
	ОткрытьФорму("Отчет.CRM_МониторЦелевыхПоказателей.Форма.ПерсональныеНастройки", 
	ПараметрыФормы, ЭтотОбъект, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ИнициализироватьОбработчикАвтообновления();
	
	ОбновитьСоставМонитораКлиент(Истина);
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры


&НаСервере 
Функция ТекстЗапросаВариантовОтчетов()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИдентификаторыМетаданных.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИдентификаторыМетаданных
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыМетаданных
	|ГДЕ
	|	ИдентификаторыМетаданных.Ссылка В(&ДоступныеВариантыОтчетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетыВариантовАнализа.ВариантОтчета КАК Ссылка,
	|	ВариантыОтчетов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ркВариантыАнализаЦелевыхПоказателей.ОтчетыДляРасшифровки КАК ОтчетыВариантовАнализа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ПО ОтчетыВариантовАнализа.ВариантОтчета = ВариантыОтчетов.Ссылка
	|		//ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыМетаданных КАК ИдентификаторыМетаданных
	|		//ПО (ВариантыОтчетов.Ссылка = ИдентификаторыМетаданных.Ссылка)
	|ГДЕ
	|	ОтчетыВариантовАнализа.Ссылка = &ВариантАнализа
	|	И НЕ ВариантыОтчетов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВариантыОтчетов.Наименование";
	
	Возврат ТекстЗапроса;
КонецФункции

&НаКлиенте
Процедура СводныйОтчет(Команда)
	
	//Если СоставМонитораНеопределен Тогда
	//	Предупреждение(НСтр("ru='Сформировать сводный отчет невозможно, т.к. монитор показателей не настроен.'"),, НСтр("ru='Ошибка формирования сводного отчета'"));
	//	
	//ИначеЕсли СоставМонитораПустойПоОтбору Тогда
	//	Предупреждение(НСтр("ru='Сформировать сводный отчет невозможно, т.к. в текущий отбор не входит ни один показатель.'"),, НСтр("ru='Ошибка формирования сводного отчета'"));
	//	
	//Иначе 
	//	
	//	ВариантыАнализаДляПечати.Очистить();
	//	
	//	Для Каждого ЭлементМонитора Из СоставМонитора Цикл 
	//		НовыйВариант = ВариантыАнализаДляПечати.Добавить();
	//		ЗаполнитьЗначенияСвойств(НовыйВариант, ЭлементМонитора);
	//		
	//	КонецЦикла;
	//	
	//	ПараметрыФормы = Новый Структура("ВариантыАнализа", ВариантыАнализаДляПечати);
	//	
	//	ОткрытьФорму("Отчет.CRM_МониторЦелевыхПоказателей.Форма.ПечатнаяФормаВариантаАнализа", 
	//	ПараметрыФормы, 
	//	ЭтаФорма, 
	//	Новый УникальныйИдентификатор());
	//	
	//КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Создание элементов формы

&НаСервере
Функция ВертикальнаяГруппа(Имя, Заголовок, РодительскаяГруппа = Неопределено)
	
	ГруппаСтрокаЭлементов = Элементы.Добавить(Имя, Тип("ГруппаФормы"), РодительскаяГруппа);
	ГруппаСтрокаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСтрокаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСтрокаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСтрокаЭлементов.Заголовок = Заголовок;
	ГруппаСтрокаЭлементов.СквозноеВыравнивание = СквозноеВыравнивание.НеИспользовать;
	ГруппаСтрокаЭлементов.РазрешитьИзменениеСостава = Ложь;
	ГруппаСтрокаЭлементов.ОтображатьЗаголовок = Ложь;
	
	Возврат ГруппаСтрокаЭлементов;
	
КонецФункции

&НаСервере
Функция ВертикальнаяГруппаСотрудника(Имя, Заголовок, РодительскаяГруппа = Неопределено, Выделение=Неопределено)
	
	ГруппаСтрокаЭлементов = Элементы.Добавить(Имя, Тип("ГруппаФормы"), РодительскаяГруппа);
	ГруппаСтрокаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСтрокаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСтрокаЭлементов.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	ГруппаСтрокаЭлементов.Заголовок = Заголовок;
	ГруппаСтрокаЭлементов.РазрешитьИзменениеСостава = Ложь;
	ГруппаСтрокаЭлементов.ОтображатьЗаголовок = Истина;
	Если Выделение<>Неопределено Тогда
		ГруппаСтрокаЭлементов.Отображение = Выделение;
	КонецЕсли;
	
	Возврат ГруппаСтрокаЭлементов;
	
КонецФункции

&НаСервере
Функция ГоризонтальнаяГруппа(Имя, Заголовок, РодительскаяГруппа = Неопределено, ОдинаковыеПоШирине = Ложь)
	
	ГруппаСтрокаЭлементов = Элементы.Добавить(Имя, Тип("ГруппаФормы"), РодительскаяГруппа);
	ГруппаСтрокаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСтрокаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСтрокаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаСтрокаЭлементов.Заголовок = Заголовок;
	Если ОдинаковыеПоШирине Тогда
		ГруппаСтрокаЭлементов.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
	КонецЕсли;
	ГруппаСтрокаЭлементов.ОтображатьЗаголовок = Ложь;
	
	Возврат ГруппаСтрокаЭлементов;
	
КонецФункции

&НаСервере
Функция ГоризонтальнаяГруппаСотрудника(Имя, Заголовок, РодительскаяГруппа = Неопределено)
	
	ГруппаСтрокаЭлементов = Элементы.Добавить(Имя, Тип("ГруппаФормы"), РодительскаяГруппа);
	ГруппаСтрокаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСтрокаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	//ГруппаСтрокаЭлементов.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
	ГруппаСтрокаЭлементов.Заголовок = Заголовок;
	ГруппаСтрокаЭлементов.РазрешитьИзменениеСостава = Ложь;
	ГруппаСтрокаЭлементов.ОтображатьЗаголовок = Истина;
	
	Возврат ГруппаСтрокаЭлементов;
	
КонецФункции

// Добавляет вертикальные группы элементов формы, в которых 
// затем будут будут размещены элементы формы показателей
// 
// Параметры:
//	РодительскаяГруппа - ГруппаФормы
//	ВариантОтображенияПоказателейСтроки - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа, Неопределено - указывает на краткое отображение или в виде диаграммы/таблицы
//	КлючУникальностиГруппы - Строка - уникальный идентификатор группы, основанный на имени зоны внимания
//
&НаСервере 
Процедура ДобавитьГруппыКолонкиЭлементов(РодительскаяГруппа, ВариантОтображенияПоказателейСтроки = Неопределено, КлючУникальностиГруппы)
	
	ВариантыОтображенияВариантовАнализа = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей;
	
	Если ВариантОтображенияПоказателейСтроки = ВариантыОтображенияВариантовАнализа.Кратко Тогда
		Для Сч = 1 По СтруктураНастроек.КоличествоКолонокМонитораПоказателей Цикл 
			ГруппаКолонкаЭлементов = ВертикальнаяГруппа("ГруппаКолонкаЭлементовКратко" + КлючУникальностиГруппы + "__" + Сч, НСтр("ru='Колонка №'") + Сч, РодительскаяГруппа);//ГруппаВариантаОтображения); 
			
		КонецЦикла;
		
	Иначе
		Если Элементы.Найти("ГруппаЭлементовПодробно" + КлючУникальностиГруппы) = Неопределено Тогда
			Для Сч = 1 По СтруктураНастроек.КоличествоКолонокМонитораПоказателей Цикл 
				
				ГруппаКолонкаЭлементов = ВертикальнаяГруппа("ГруппаКолонкаПодробныхЭлементов" + КлючУникальностиГруппы + "__" + Сч, НСтр("ru='Колонка №'") + Сч, РодительскаяГруппа);//ГруппаВариантаОтображения); 
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет команды, доступные для указанного варианта анализа.
// Возможные команды: "Влияющие показатели", "Зависимые показатели", "Периодичность", "Объект анализа", "Отчеты", "Анализ показателя"
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ркВариантыАнализаЦелевыхПоказателей - вариант, для которого добавляются команды
//	ГруппаЭлементов - ГруппаФормы - командная панель, в которую нужно добавить кнопки
//	ИдентификаторЭлементаФормы - Строка, содержащая уникальный идентификатор элемента формы
//	ВариантОтображения - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа - указывает на краткое отображение или в виде диаграммы/таблицы
//
&НаСервере
Процедура ДобавитьКомандыВариантовАнализа(Показатель, Пользователь, ГруппаЭлементов, ИдентификаторЭлементаФормы, ВариантОтображения)
	
	ВариантыОтображения = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей;
	
	Если ВариантОтображения = ВариантыОтображения.Диаграмма 
		ИЛИ ВариантОтображения = ВариантыОтображения.Таблица Тогда
		
		КоманднаяПанельКомандПоказателя = Элементы.Добавить("КоманднаяПанельКомандПоказателя__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), Элементы["Статусы__" + ИдентификаторЭлементаФормы]);
		КоманднаяПанельКомандПоказателя.Вид = ВидГруппыФормы.КоманднаяПанель;
		КоманднаяПанельКомандПоказателя.Заголовок = НСтр("ru='Команды показателя'");
		КоманднаяПанельКомандПоказателя.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		КоманднаяПанельКомандПоказателя.Ширина = 4;
		КоманднаяПанельКомандПоказателя.РастягиватьПоГоризонтали = Ложь;
		
		// Добавим подменю "Все действия"
		//ПодменюВсеДействия = Элементы.Добавить("ВсеДействия__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), КоманднаяПанельКомандПоказателя);
		//ПодменюВсеДействия.Вид = ВидГруппыФормы.Подменю;
		//ПодменюВсеДействия.Картинка = БиблиотекаКартинок.CRM_ВыбратьИзСписка;
		//ПодменюВсеДействия.Ширина = 1;
		//ПодменюВсеДействия.Отображение = ОтображениеКнопки.Картинка;
		//ПодменюВсеДействия.Заголовок = НСтр("ru='Действия'");
		//ПодменюВсеДействия.Заголовок = "";
		
		// Добавим реквизиты формы
		
		// Получим количество варианты отчетов для показателя
		ВариантыОтчетовПоказателя = ПолучитьВариантыОтчетовПоказателя(Показатель);
		КоличествоВариантовОтчетов = ВариантыОтчетовПоказателя.Количество();
		
		Если КоличествоВариантовОтчетов Тогда
			Для Каждого ВариантОтчетаПоказателя Из ВариантыОтчетовПоказателя Цикл 
				ИдентификаторВарианта = ВариантОтчетаПоказателя.Значение;
				НаименованиеВарианта = ВариантОтчетаПоказателя.Представление;
				
				КомандаОткрытьОтчет = Команды.Добавить("ОткрытьОтчет__" + СтрЗаменить(Строка(Пользователь.УникальныйИдентификатор()),"-","_") + "__" + ИдентификаторЭлементаФормы + "__" + ИдентификаторВарианта);
				КомандаОткрытьОтчет.Заголовок = НаименованиеВарианта;
				КомандаОткрытьОтчет.Действие = "Подключаемый_ОткрытьОтчет";
				КомандаОткрытьОтчет.Картинка = БиблиотекаКартинок.Отчет;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если КоличествоВариантовОтчетов Тогда
			//ПодменюОтчеты = Элементы.Добавить("Отчеты__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), КоманднаяПанельКомандПоказателя);
			//ПодменюОтчеты.Вид = ВидГруппыФормы.Подменю;
			//ПодменюОтчеты.Заголовок = НСтр("ru='Отчеты'");
			//ПодменюОтчеты.Картинка = БиблиотекаКартинок.Отчет;
			
			Для Каждого ВариантОтчетаПоказателя Из ВариантыОтчетовПоказателя Цикл 
				ИдентификаторВарианта = ВариантОтчетаПоказателя.Значение;
				
				КнопкаОтчета = Элементы.Добавить("ФормаОткрытьОтчет__" + ИдентификаторЭлементаФормы + "__" + ИдентификаторВарианта, Тип("КнопкаФормы"), КоманднаяПанельКомандПоказателя);
				КнопкаОтчета.ИмяКоманды = "ОткрытьОтчет__" + СтрЗаменить(Строка(Пользователь.УникальныйИдентификатор()),"-","_") + "__" + ИдентификаторЭлементаФормы + "__" + ИдентификаторВарианта;
				КнопкаОтчета.ТолькоВоВсехДействиях = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Добавим команды анализа, расшифровки и настройки
		//КнопкаАнализПоказателя = Элементы.Добавить("ФормаОткрытьАнализПоказателя__" + ИдентификаторЭлементаФормы, Тип("КнопкаФормы"), ПодменюВсеДействия);
		//КнопкаАнализПоказателя.ИмяКоманды = "ОткрытьАнализПоказателя__" + ИдентификаторЭлементаФормы;
		
	ИначеЕсли ВариантОтображения = ВариантыОтображения.Кратко Тогда
		КонтекстноеМенюТекстовогоПоказателя = Элементы["Значение__"+ ИдентификаторЭлементаФормы + "КонтекстноеМеню"];
		
		// Добавим реквизиты формы
		
		// Получим количество варианты отчетов для показателя
		ВариантыОтчетовПоказателя = ПолучитьВариантыОтчетовПоказателя(Показатель);
		КоличествоВариантовОтчетов = ВариантыОтчетовПоказателя.Количество();
		
		Если КоличествоВариантовОтчетов Тогда
			Для Каждого ВариантОтчетаПоказателя Из ВариантыОтчетовПоказателя Цикл 
				ИдентификаторВарианта = ВариантОтчетаПоказателя.Значение;
				НаименованиеВарианта = ВариантОтчетаПоказателя.Представление;
				
				КомандаОткрытьОтчет = Команды.Добавить("ОткрытьОтчет__" + ИдентификаторЭлементаФормы + "__" + ИдентификаторВарианта);
				КомандаОткрытьОтчет.Заголовок = НаименованиеВарианта;
				КомандаОткрытьОтчет.Действие = "Подключаемый_ОткрытьОтчет";
				КомандаОткрытьОтчет.Картинка = БиблиотекаКартинок.Отчет;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если КоличествоВариантовОтчетов Тогда
			ПодменюОтчеты = Элементы.Добавить("Отчеты__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), КонтекстноеМенюТекстовогоПоказателя);
			ПодменюОтчеты.Вид = ВидГруппыФормы.Подменю;
			ПодменюОтчеты.Заголовок = НСтр("ru='Отчеты'");
			ПодменюОтчеты.Картинка = БиблиотекаКартинок.Отчет;
			
			Для Каждого ВариантОтчетаПоказателя Из ВариантыОтчетовПоказателя Цикл 
				ИдентификаторВарианта = ВариантОтчетаПоказателя.Значение;
				
				КнопкаОтчета =Элементы.Добавить("ФормаОткрытьОтчет__" + ИдентификаторЭлементаФормы + "__" + ИдентификаторВарианта, Тип("КнопкаФормы"), ПодменюОтчеты);
				КнопкаОтчета.ИмяКоманды = "ОткрытьОтчет__" + ИдентификаторЭлементаФормы + "__" + ИдентификаторВарианта;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Добавим команды анализа, расшифровки и настройки
		//КнопкаАнализПоказателя =Элементы.Добавить("ФормаОткрытьАнализПоказателя__" + ИдентификаторЭлементаФормы, Тип("КнопкаФормы"), КонтекстноеМенюТекстовогоПоказателя);
		//КнопкаАнализПоказателя.ИмяКоманды = "ОткрытьАнализПоказателя__" + ИдентификаторЭлементаФормы;
		
	КонецЕсли;
	
КонецПроцедуры

// Кэширует свойства анализируемого состава монитора
// Анализируется количество источников данных: 
//	- по которым требуется вывод подробной информации
//	- по которым требуется вывод итога таблицы
//	- по которым требуется анализ состояния по нарастающему итогу
// 
// Параметры:
//	АнализируемыйСоставМонитора - Структура - содержит набор источников данных и обобщенную информацию об источниках
//	АдресаДинамическихПараметров - ТаблицаЗначений, Неопределено - содержит вариант анализа и адрес дин. настроек во временном хранилище
//
&НаСервере 
Процедура ЗаполнитьСводнуюИнформациюПоИсточникамДанных(АнализируемыйСоставМонитора, АдресаДинамическихПараметров = Неопределено)
	
	НаборИсточниковДанных = АнализируемыйСоставМонитора.НаборИсточниковДанных;
	
	Если НЕ АнализируемыйСоставМонитора.Пустой Тогда 
		ВариантыАнализаСПодробностями.Очистить();
		ОтборПоПодробным = Новый Структура("ВыводитьПодробности", Истина);
		НайденныеВариантыАнализа = НаборИсточниковДанных.НайтиСтроки(ОтборПоПодробным);
		Для Каждого НайденныйВариантАнализа Из НайденныеВариантыАнализа Цикл 
			ВариантыАнализаСПодробностями.Добавить(НайденныйВариантАнализа.ВариантАнализа);
			
		КонецЦикла;
		
		ТабличныеВариантыАнализаСИтогами.Очистить();
		ОтборПоТабличнымСИтогами = Новый Структура("ВыводитьИтогТаблицы", Истина);
		НайденныеВариантыАнализа = НаборИсточниковДанных.НайтиСтроки(ОтборПоТабличнымСИтогами);
		Для Каждого НайденныйВариантАнализа Из НайденныеВариантыАнализа Цикл 
			ТабличныеВариантыАнализаСИтогами.Добавить(НайденныйВариантАнализа.ВариантАнализа);
			
		КонецЦикла;
		
		ВариантыАнализаСНарастающимИтогом.Очистить();
		ОтборПоНарастающемуИтогу = Новый Структура("СостояниеПоНарастающемуИтогу", Истина);
		НайденныеВариантыАнализа = НаборИсточниковДанных.НайтиСтроки(ОтборПоНарастающемуИтогу);
		Для Каждого НайденныйВариантАнализа Из НайденныеВариантыАнализа Цикл 
			ВариантыАнализаСНарастающимИтогом.Добавить(НайденныйВариантАнализа.ВариантАнализа);
			
		КонецЦикла;
		
		СоставМонитораОбъект = НаборИсточниковДанных.Скопировать(,"Показатель, 
																  |ОшибкаРасчета,
																  |РасчетыНеактуальны,
																  |Пустой, 
																  |СостояниеПоНарастающемуИтогу, 
																  |ВыводитьИтогТаблицы, 
																  |ВыводитьПодробности, 
																  |Группа, 
																  |ЗонаВнимания, 
																  |ПорядокЗоныВнимания");
		СоставМонитораОбъект.Колонки.Добавить("АдресДинамическихПараметров");
		
		// Заполним переданные адреса динамических параметров
		Если НЕ АдресаДинамическихПараметров = Неопределено Тогда
			Для Каждого ЭлементСоставаМонитора Из СоставМонитораОбъект Цикл 
				ОтборПоВариантуАнализа = Новый Структура("ВариантАнализа", ЭлементСоставаМонитора.ВариантАнализа);
				НайденныеСоставМонитора = АдресаДинамическихПараметров.НайтиСтроки(ОтборПоВариантуАнализа);
				Если НайденныеСоставМонитора.Количество() > 0 Тогда
					ЭлементСоставаМонитора.АдресДинамическихПараметров = НайденныеСоставМонитора[0].АдресДинамическихПараметров;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗначениеВДанныеФормы(СоставМонитораОбъект, СоставМонитора);
	Иначе
		ВариантыАнализаСПодробностями.Очистить();
		ТабличныеВариантыАнализаСИтогами.Очистить();
		ВариантыАнализаСНарастающимИтогом.Очистить();
		СоставМонитора.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает источник данных для переданного варианта анализа при изменении объекта анализа или периодичности.
// Обновляет диаграмму варианта анализа
// 
// Параметры:
//	ВариантАнализа - СправочникСсылка.ркВариантыАнализаЦелевыхПоказателей - вариант, для которого изменили дин. параметр
//	ПараметрыИсточникаДанных - Структура, содержащая состояние динамических параметров варианта анализа
//	ИдентификаторЭлементаФормы - Строка - уникальный идентификатор(имя) обновляемой диаграммы
//
&НаСервере 
Процедура ИзменитьДинамическийПараметрДляДиаграммы(ПараметрыИсточникаДанных, ИдентификаторЭлементаФормы)
	
	Если ПараметрыИсточникаДанных.Свойство("ПериодичностьКонтроля") Тогда	
		//Если ВариантАнализа.ПериодичностьКонтроля = ПараметрыИсточникаДанных.ПериодичностьКонтроля Тогда
		//	ПринудительноеОбновление = Ложь;
		//Иначе
			ПринудительноеОбновление = Истина;
		//КонецЕсли;
	КонецЕсли;
	
	ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы].ИсточникДанных = Новый ТаблицаЗначений;
	ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы].ИсточникДанных = Неопределено;
	ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы] = Отчеты.CRM_МониторЦелевыхПоказателей.ЗаполнитьДиаграммуДляМонитора(ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы], ПараметрыИсточникаДанных);
		
	Если ПараметрыИсточникаДанных.Свойство("ОбъектАнализа") Тогда
		// Установим новое наименование диаграммы
		ДинамическиеСвойстваВариантаАнализа = ПараметрыИсточникаДанных.ДинамическиеСвойстваВариантаАнализа;
		НачалоПериода = Формат(ПараметрыИсточникаДанных.СвойстваДанныхПоПериодам.ДатаПервогоЗначения, "ДФ=dd.MM.yy");
		КонецПериода= Формат(ПараметрыИсточникаДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, "ДФ=dd.MM.yy");
		ТекстовоеПредставлениеПериода = НачалоПериода + " - " + КонецПериода;
		//Если ВариантАнализа.КратностьЗначений = Перечисления.ркВидыПредставленияЧисел.БезИзменений Тогда
			ЭтотОбъект["НаименованиеПоказателя__" + ИдентификаторЭлементаФормы] = ПараметрыИсточникаДанных.Владелец.КраткоеНаименованиеЦелевогоПоказателя + ": " + ПараметрыИсточникаДанных.Наименование + ?(НЕ ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность)," (" + ДинамическиеСвойстваВариантаАнализа.Размерность + ")", "") + " " + ТекстовоеПредставлениеПериода;
		//Иначе
		//	ЭтаФорма["НаименованиеПоказателя__" + ИдентификаторЭлементаФормы] = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя + ": " + ВариантАнализа.Наименование + " (" + Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа) + ?(НЕ ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность), " " + ДинамическиеСвойстваВариантаАнализа.Размерность, "") + ")" + " " + ТекстовоеПредставлениеПериода;
		//КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает источник данных для переданного варианта анализа при изменении объекта анализа или периодичности.
// Обновляет таблицу варианта анализа
// 
// Параметры:
//	ВариантАнализа - СправочникСсылка.ркВариантыАнализаЦелевыхПоказателей - вариант, для которого изменили дин. параметр
//	ПараметрыИсточникаДанных - Структура, содержащая состояние динамических параметров варианта анализа
//	ИдентификаторЭлементаФормы - Строка - уникальный идентификатор(имя) обновляемой таблицы
//
&НаСервере 
Процедура ИзменитьДинамическийПараметрДляТаблицы(ВариантАнализа, ПараметрыИсточникаДанных, ИдентификаторЭлементаФормы)
	
	Если ПараметрыИсточникаДанных.Свойство("ОбъектАнализа") Тогда
		Если Строка(ВариантАнализа.ОбъектАнализа.Получить()) = ПараметрыИсточникаДанных.ОбъектАнализа Тогда
			ПринудительноеОбновление = Ложь;
		Иначе
			ПринудительноеОбновление = Истина;
		КонецЕсли;
	ИначеЕсли ПараметрыИсточникаДанных.Свойство("ПериодичностьКонтроля") Тогда	
		Если ВариантАнализа.ПериодичностьКонтроля = ПараметрыИсточникаДанных.ПериодичностьКонтроля Тогда
			ПринудительноеОбновление = Ложь;
		Иначе
			ПринудительноеОбновление = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ИсточникДанныхВариантаАнализа = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, Перечисления.CRM_ВариантыОтображенияАнализаПоказателей.Диаграмма, ПринудительноеОбновление,ПараметрыИсточникаДанных);
	
	Если НЕ ИсточникДанныхВариантаАнализа.Пустой Тогда
		ДинамическиеСвойстваВариантаАнализа = ИсточникДанныхВариантаАнализа.ДинамическиеСвойстваВариантаАнализа;
		ВыводитьИтогВТаблице = (НЕ ТабличныеВариантыАнализаСИтогами.НайтиПоЗначению(ВариантАнализа) = Неопределено);
		
		Если ВыводитьИтогВТаблице Тогда 
			КратностьЗначений			= ВариантАнализа.КратностьЗначений;
			ТочностьРасчетаДробнойЧасти = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
			Размерность					= СокрЛП(Строка(ДинамическиеСвойстваВариантаАнализа.Размерность));
			
			ЭтотОбъект["ИтогТаблицаЗначений__" + ИдентификаторЭлементаФормы] = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанныхВариантаАнализа.Данные.Итог(ИсточникДанныхВариантаАнализа.ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа), ТочностьРасчетаДробнойЧасти, КратностьЗначений) + " " + Размерность;
			
		КонецЕсли;
		
		Отчеты.CRM_МониторЦелевыхПоказателей.ЗаполнитьТаблицуДляМонитора(ЭтотОбъект["ТаблицаЗначений__" + ИдентификаторЭлементаФормы], ИдентификаторЭлементаФормы, ВариантАнализа, ИсточникДанныхВариантаАнализа);
	Иначе
		Если НЕ ИсточникДанныхВариантаАнализа.РасчетыАктуальны Тогда
			ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы] = ПолучитьДиаграммуПриОшибкахРасчета(ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы], "Данные неактуальны.", ЦветаСтиля.ПоясняющийОшибкуТекст);
			
		ИначеЕсли ИсточникДанныхВариантаАнализа.ОшибкаРасчета Тогда
			ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы] = ПолучитьДиаграммуПриОшибкахРасчета(ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы], "Ошибка при расчете значений показателя.", ЦветаСтиля.ПоясняющийОшибкуТекст);
			
		Иначе
			ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы] = ПолучитьДиаграммуПриОшибкахРасчета(ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы], "Недостаточно данных для расчета показателя.", ЦветаСтиля.ПоясняющийТекст);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет элементы формы для вида отображения "Диаграмма"
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ркВариантыАнализаЦелевыхПоказателей
//	ИсточникДанных - Структура, содержащая результаты расчета для варианта анализа
//	ГруппаЭлементов - ГруппаФормы, в которую нужно добавить элементы формы
//	ИдентификаторЭлементаФормы - Строка, содержащая уникальный идентификатор элемента формы
//
&НаСервере
Процедура НарисоватьДиаграмму(ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	
	//СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
	//СвойстваДанныхПоПериодамСравнения = ИсточникДанных.СвойстваДанныхПоПериодамСравнения;
	//
	//ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	//РасчетыНеактуальны = НЕ ИсточникДанных.РасчетыАктуальны;
	
	//ВидыПредставленияЧисел = Перечисления.ркВидыПредставленияЧисел;
	ПустаяКартинка = Новый Картинка;
	МассивРеквизитов = Новый Массив;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Диаграмма"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Диаграмма__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", "Диаграмма для '" + ИсточникДанных + "'"));
	
	// Добавим картинки
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Картинка"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КартинкаСостояния__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", НСтр("ru='Картинка состояния'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КартинкаТренда__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", НСтр("ru='Картинка тренда'")));
	
	// Добавим строковый реквизит
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", "Наименование показателя"));
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	// Добавим поля формы
	ГруппаСтатусов = ГоризонтальнаяГруппа("Статусы__" + ИдентификаторЭлементаФормы, "Статусы", ГруппаЭлементов);
	
	//ПолеЗначенияИндикатора = Элементы.Вставить("КартинкаСостояния__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаСтатусов);
	//ПолеЗначенияИндикатора.Вид = ВидПоляФормы.ПолеКартинки;
	//ПолеЗначенияИндикатора.ПутьКДанным = "КартинкаСостояния__" + ИдентификаторЭлементаФормы;
	//ПолеЗначенияИндикатора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	//ПолеЗначенияИндикатора.Ширина = 2;
	//ПолеЗначенияИндикатора.Высота = 1;
	//ПолеЗначенияИндикатора.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	//ПолеЗначенияИндикатора.РастягиватьПоГоризонтали = Ложь;
	//ПолеЗначенияИндикатора.РастягиватьПоВертикали = Ложь;
	//ПолеЗначенияИндикатора.Подсказка = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу;
	
	Динамика = ПолучитьДинамикуПоказателя(ИсточникДанных.Показатель, ?(ОтборКонецПериода<CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(), ОтборКонецПериода, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()), ИсточникДанных.Сотрудник);
	Если НЕ ЗначениеЗаполнено(Динамика.Тренд) Тогда
		Тренд = НСтр("ru = 'Без изменений'");
	ИначеЕсли Динамика.Тренд > 0 Тогда
		Тренд = НСтр("ru = 'Рост'");
	Иначе
		Тренд = НСтр("ru = 'Падение'");
	КонецЕсли;
	
	ПолеЗначенияИндикатора = Элементы.Вставить("КартинкаТренда__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаСтатусов);
	ПолеЗначенияИндикатора.Вид = ВидПоляФормы.ПолеКартинки;
	ПолеЗначенияИндикатора.ПутьКДанным = "КартинкаТренда__" + ИдентификаторЭлементаФормы;
	ПолеЗначенияИндикатора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначенияИндикатора.Ширина = 2;
	ПолеЗначенияИндикатора.Высота = 1;
	ПолеЗначенияИндикатора.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ПолеЗначенияИндикатора.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначенияИндикатора.РастягиватьПоВертикали = Ложь;
	ПолеЗначенияИндикатора.Подсказка = Тренд;
	
	ПолеНаименования = Элементы.Вставить("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаСтатусов);
	ПолеНаименования.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеНаименования.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеНаименования.ПутьКДанным = "НаименованиеПоказателя__" + ИдентификаторЭлементаФормы;
	ПолеНаименования.РастягиватьПоГоризонтали = Истина;
	//ПолеНаименования.Ширина = 36;
	
	ПолеДиаграммы = Элементы.Вставить("Диаграмма__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов);
	ПолеДиаграммы.Вид = ВидПоляФормы.ПолеДиаграммы;
	ПолеДиаграммы.ПутьКДанным = "Диаграмма__" + ИдентификаторЭлементаФормы;
	ПолеДиаграммы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеДиаграммы.Ширина = 1;
	ПолеДиаграммы.Высота = 8 * СтруктураНастроек.РазмерДиаграмм;
	
	//ЭтаФорма["КартинкаСостояния__" + ИдентификаторЭлементаФормы] = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьКартинкуСостоянияДляПоказателя(ИсточникДанных);
	ЭтотОбъект["КартинкаТренда__" + ИдентификаторЭлементаФормы] = Динамика.КартинкаТренда;
	
	//НачалоПериода = Формат(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПервогоЗначения, "ДФ=dd.MM.yy");
	//КонецПериода= Формат(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, "ДФ=dd.MM.yy");
	//ТекстовоеПредставлениеПериода = НачалоПериода + " - " + КонецПериода;
	Если СтруктураНастроек.ВариантОтображенияДеталей = "ПоказыватьТекущееЗначениеИДетали" Тогда
		ЭтотОбъект["НаименованиеПоказателя__" + ИдентификаторЭлементаФормы] = ИсточникДанных.Показатель.КраткоеНаименование + ДобавитьЗнач(Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ИсточникДанных.Показатель.КратностьЗначений)) + ДобавитьЗнач(ИсточникДанных.Показатель.ЕдиницаИзмерения)+ ДобавитьЗнач(ИсточникДанных.ПроцентВыполнения);
	Иначе
		ЭтотОбъект["НаименованиеПоказателя__" + ИдентификаторЭлементаФормы] = ИсточникДанных.Показатель.КраткоеНаименование;// + ", " + ТекстовоеПредставлениеПериода;
	КонецЕсли;
	
	Если НЕ ПустойИсточникДанных И НЕ ОшибкаРасчета Тогда
		
		Диаграмма = ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы];
		ИсточникСПараметрами = Новый Структура("ИсточникДанных, Параметры", ИсточникДанных, Новый Структура);
		ТаблицаДанных = ИсточникДанных.ТаблицаДанных.Получить();
		CRM_УправлениеЦелевымиПоказателямиСервер.ПостроитьДиаграммуПоказателя(ИсточникДанных.Показатель, Диаграмма,,,, ТаблицаДанных);
		Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.ЗначениеПроцент;
		Диаграмма.ОбластьЛегенды.Лево = 1;
		Диаграмма.ОбластьПостроения.Право = 1;
	Иначе
		
		Диаграмма = ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы];
		
		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
			ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
			
		Иначе
			ОписаниеОшибки = НСтр("ru='Ошибка расчета показателя'");
			
		КонецЕсли;

		Диаграмма = ПолучитьДиаграммуПриОшибкахРасчета(Диаграмма, ОписаниеОшибки, ЦветаСтиля.ПоясняющийОшибкуТекст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НарисоватьПустуюДиаграмму(ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	
	
	ПустойИсточникДанных = Истина;
	ПустаяКартинка = Новый Картинка;
	МассивРеквизитов = Новый Массив;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Диаграмма"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Диаграмма__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", "Диаграмма для '" + ИсточникДанных + "'"));
	
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	// Добавим поля формы
	ГруппаСтатусов = ГоризонтальнаяГруппа("Статусы__" + ИдентификаторЭлементаФормы, "Статусы", ГруппаЭлементов);
	
	ПолеДиаграммы = Элементы.Вставить("Диаграмма__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов);
	ПолеДиаграммы.Вид = ВидПоляФормы.ПолеДиаграммы;
	ПолеДиаграммы.ПутьКДанным = "Диаграмма__" + ИдентификаторЭлементаФормы;
	ПолеДиаграммы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеДиаграммы.Ширина = 1;
	ПолеДиаграммы.Высота = 8 * СтруктураНастроек.РазмерДиаграмм;
	
	Диаграмма = ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы];
	Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.ЗначениеПроцент;
	Диаграмма.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	Диаграмма.ОбластьЛегенды.Лево = 1;
	Диаграмма.ОбластьПостроения.Право = 1;
			
КонецПроцедуры

&НаСервере
Функция ДобавитьЗнач(Значение)
	Возврат ?(ЗначениеЗаполнено(Значение), ", "+Значение, "");
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДинамикуПоказателя(Показатель, ДатаРасчета, Менеджер)
	Возврат CRM_УправлениеЦелевымиПоказателямиСервер.ПолучитьДинамикуПоказателя(Показатель, ДатаРасчета, Менеджер);
КонецФункции

// Добавляет элементы формы для вида отображения "Кратко"
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ркВариантыАнализаЦелевыхПоказателей
//	ИсточникДанных - Структура, содержащая результаты расчета для варианта анализа
//	ГруппаЭлементов - ГруппаФормы, в которую нужно добавить элементы формы
//	ИдентификаторЭлементаФормы - Строка, содержащая уникальный идентификатор элемента формы
//
&НаСервере
Процедура НарисоватьКратко(ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	
	МассивРеквизитов = Новый Массив;
	
	ПоказыватьТекущееЗначениеИДеталиПоказателя = Ложь;//(НЕ ВариантыАнализаСПодробностями.НайтиПоЗначению(ВариантАнализа) = Неопределено);
	ИспользоватьНарастающийИтог = Ложь;
	
	СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
	СвойстваДанныхПоПериодамСравнения = ИсточникДанных.СвойстваДанныхПоПериодамСравнения;
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	//ВидыПредставленияЧисел = Перечисления.ркВидыПредставленияЧисел;
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	РасчетыНеактуальны = НЕ ИсточникДанных.РасчетыАктуальны;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	
	// Добавим строковые реквизиты формы
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрок = Новый ОписаниеТипов(МассивТипов);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КраткоеНаименование__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Краткое наименование'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Значение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение'")));
	
	Если ПоказыватьТекущееЗначениеИДеталиПоказателя И СтруктураНастроек.ВариантОтображенияДеталей = "ПоказыватьТекущееЗначениеИДетали" Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ОтнИзменение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Отн. изменение'")));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("АбсИзменение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Абс. изменение'")));
	КонецЕсли;
	
	// Добавим картинки-реквизиты
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Картинка"));
	ОписаниеТиповКартинок = Новый ОписаниеТипов(МассивТипов);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КартинкаСостояния__" + ИдентификаторЭлементаФормы, ОписаниеТиповКартинок, "", НСтр("ru='Картинка состояния'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КартинкаТренда__" + ИдентификаторЭлементаФормы, ОписаниеТиповКартинок, "", НСтр("ru='Картинка тренда'")));
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	// Добавим элементы формы
	ГруппаСтатусов = ГоризонтальнаяГруппа("Статусы__" + ИдентификаторЭлементаФормы, НСтр("ru='Статусы'"), ГруппаЭлементов);
	
	ПолеЗначенияИндикатора = Элементы.Вставить("КартинкаСостояния__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаСтатусов);
	ПолеЗначенияИндикатора.Вид = ВидПоляФормы.ПолеКартинки;
	ПолеЗначенияИндикатора.ПутьКДанным = "КартинкаСостояния__" + ИдентификаторЭлементаФормы;
	ПолеЗначенияИндикатора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначенияИндикатора.Ширина = 2;
	ПолеЗначенияИндикатора.Высота = 1;
	ПолеЗначенияИндикатора.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ПолеЗначенияИндикатора.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначенияИндикатора.РастягиватьПоВертикали = Ложь;
	ПолеЗначенияИндикатора.Подсказка = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу;
	
	ПолеИндикатора = Элементы.Вставить("КартинкаТренда__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов);//ГруппаСтатусов);
	ПолеИндикатора.Вид = ВидПоляФормы.ПолеКартинки;
	ПолеИндикатора.ПутьКДанным = "КартинкаТренда__" + ИдентификаторЭлементаФормы;
	ПолеИндикатора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеИндикатора.Ширина = 2;
	ПолеИндикатора.Высота = 1;
	ПолеИндикатора.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ПолеИндикатора.РастягиватьПоГоризонтали = Ложь;
	ПолеИндикатора.РастягиватьПоВертикали = Ложь;
	ПолеИндикатора.Подсказка = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу + Символы.ПС + Символы.ПС + ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКТренду;
	
	ПолеКрНаименования = Элементы.Вставить("КраткоеНаименование__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов);
	ПолеКрНаименования.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеКрНаименования.ПутьКДанным = "КраткоеНаименование__" + ИдентификаторЭлементаФормы;
	ПолеКрНаименования.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеКрНаименования.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	ПолеКрНаименования.Ширина = 24;
	ПолеКрНаименования.Высота = 1;
	ПолеКрНаименования.РастягиватьПоВертикали = Ложь;
	
	ЦветСостоянияПоказателя = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьЦветСостоянияДляПоказателя(ИсточникДанных);
	
	Если ПоказыватьТекущееЗначениеИДеталиПоказателя И СтруктураНастроек.ВариантОтображенияДеталей = "ПоказыватьТекущееЗначениеИДетали" Тогда
		ПолеИндикатора = Элементы.Вставить("АбсИзменение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов);
		ПолеИндикатора.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеИндикатора.ПутьКДанным = "АбсИзменение__" + ИдентификаторЭлементаФормы;
		ПолеИндикатора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеИндикатора.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		ПолеИндикатора.Ширина = 12;
		ПолеИндикатора.Высота = 1;
		ПолеИндикатора.РастягиватьПоВертикали = Ложь;
		ПолеИндикатора.ЦветТекста = ЦветСостоянияПоказателя;
		
		ПолеИндикатора = Элементы.Вставить("ОтнИзменение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов);
		ПолеИндикатора.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеИндикатора.ПутьКДанным = "ОтнИзменение__" + ИдентификаторЭлементаФормы;
		ПолеИндикатора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеИндикатора.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		ПолеИндикатора.Ширина = 7;
		ПолеИндикатора.Высота = 1;
		ПолеИндикатора.РастягиватьПоВертикали = Ложь;
		ПолеИндикатора.ЦветТекста = ЦветСостоянияПоказателя;
		
	КонецЕсли;
	
	ПолеЗначения = Элементы.Вставить("Значение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.Гиперссылка = Истина;
	ПолеЗначения.ПутьКДанным = "Значение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	ПолеЗначения.Ширина = 12;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	ПолеЗначения.ЦветТекста = ЦветСостоянияПоказателя;
	
	ПолеЗначения.УстановитьДействие("Нажатие", "Подключаемый_ОткрытьАнализПоказателяНажатие");
	
	КратностьЗначений = 0;
	ТочностьРасчетаДробнойЧасти = 2;
	
	// Заполним значения созданных полей
	ЭтотОбъект["КартинкаСостояния__" + ИдентификаторЭлементаФормы] = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьКартинкуСостоянияДляПоказателя(ИсточникДанных);
	ЭтотОбъект["КартинкаТренда__" + ИдентификаторЭлементаФормы] = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьКартинкуТрендаДляПоказателя(ИсточникДанных);
	
	НачалоПериода = Формат(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПервогоЗначения, "ДФ=dd.MM.yy");
	КонецПериода= Формат(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, "ДФ=dd.MM.yy");
	ТекстовоеПредставлениеПериода = НачалоПериода + " - " + КонецПериода;
	//Если ВариантАнализа.КратностьЗначений = ВидыПредставленияЧисел.БезИзменений Тогда
		ЭтотОбъект["КраткоеНаименование__" + ИдентификаторЭлементаФормы] = ИсточникДанных.Владелец.КраткоеНаименованиеЦелевогоПоказателя + ": " + ИсточникДанных.Наименование + ?(НЕ ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность),", " + ДинамическиеСвойстваВариантаАнализа.Размерность, "") + ", " + ТекстовоеПредставлениеПериода;
	//Иначе
	//	ЭтаФорма["КраткоеНаименование__" + ИдентификаторЭлементаФормы] = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя + ": " + ВариантАнализа.Наименование + ", " + Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа) + ?(НЕ ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность), " " + ДинамическиеСвойстваВариантаАнализа.Размерность, "") + ", " + ТекстовоеПредставлениеПериода;
	//КонецЕсли;
	
	Если НЕ ПустойИсточникДанных И НЕ РасчетыНеактуальны И НЕ ОшибкаРасчета Тогда
		ПоследнееЗначение = Окр(ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение, ТочностьРасчетаДробнойЧасти);
		ОтображаемоеЗначение = ПоследнееЗначение;
		
		РазмерностьПоказателя = СокрЛП(Строка(ДинамическиеСвойстваВариантаАнализа.Размерность));
		
		Если ЗначениеЗаполнено(РазмерностьПоказателя) Тогда
			СтрокаРазмерности = " " + РазмерностьПоказателя;
		Иначе
			СтрокаРазмерности = "";
		КонецЕсли;
		
		ЭтотОбъект["Значение__" + ИдентификаторЭлементаФормы] = СокрЛП(Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(ОтображаемоеЗначение, ТочностьРасчетаДробнойЧасти, КратностьЗначений) + СтрокаРазмерности);
		
		Если ПоказыватьТекущееЗначениеИДеталиПоказателя И СтруктураНастроек.ВариантОтображенияДеталей = "ПоказыватьТекущееЗначениеИДетали" Тогда
			Если НЕ ПустойИсточникДанных И НЕ РасчетыНеактуальны Тогда
				ПоследнееЦелевоеЗначение = Окр(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение, ТочностьРасчетаДробнойЧасти);
				ПредпоследнееЗначение = Окр(ИсточникДанных.СвойстваДанныхПоПериодам.ПредпоследнееЗначение, ТочностьРасчетаДробнойЧасти);
				
			Иначе
				ПоследнееЦелевоеЗначение = 0;
				ПредпоследнееЗначение = 0;
				
			КонецЕсли;
			
			Если НЕ ПредпоследнееЗначение = 0 Тогда
				
				ОтносительноеИзменение = Окр(100 * (ПоследнееЗначение - ПредпоследнееЗначение)/ПредпоследнееЗначение, ТочностьРасчетаДробнойЧасти);
				
				Если ОтносительноеИзменение > 0 Тогда
					ЗнакИзменения = "+";
				ИначеЕсли ОтносительноеИзменение = 0 Тогда
					ЗнакИзменения = "";
				ИначеЕсли ОтносительноеИзменение < 0 Тогда
					ЗнакИзменения = "-";
				КонецЕсли;
				
				ЭтотОбъект["ОтнИзменение__" + ИдентификаторЭлементаФормы] = ЗнакИзменения + ОтносительноеИзменение + " %";
			Иначе
				ЭтотОбъект["ОтнИзменение__" + ИдентификаторЭлементаФормы] = "---";
			КонецЕсли; 
			
			АбсолютноеИзменение = ПоследнееЗначение - ПредпоследнееЗначение;
			
			Если АбсолютноеИзменение > 0 Тогда
				ЗнакИзменения = "+";
			ИначеЕсли АбсолютноеИзменение = 0 Тогда
				ЗнакИзменения = "";
			ИначеЕсли АбсолютноеИзменение < 0 Тогда
				ЗнакИзменения = "-";
			КонецЕсли;
			
			ЭтотОбъект["АбсИзменение__" + ИдентификаторЭлементаФормы] = ЗнакИзменения + Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(АбсолютноеИзменение, ТочностьРасчетаДробнойЧасти, КратностьЗначений) + СтрокаРазмерности;
			
		КонецЕсли;
		
	Иначе 
		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
			ЭтотОбъект["Значение__" + ИдентификаторЭлементаФормы] = ИсточникДанных.ОписаниеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет элементы формы справочной информации о показателе для анализа взаимосвязанных
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ркВариантыАнализаЦелевыхПоказателей
//	ИсточникДанных - Структура, содержащая результаты расчета для варианта анализа
//	ГруппаЭлементов - ГруппаФормы, в которую нужно добавить элементы формы
//	ИдентификаторЭлементаФормы - Строка, содержащая уникальный идентификатор элемента формы
//
&НаСервере
Процедура НарисоватьПоляСправкиОПоказателе(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	
	МассивРеквизитов = Новый Массив;
	
	СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
	СвойстваДанныхПоПериодамСравнения = ИсточникДанных.СвойстваДанныхПоПериодамСравнения;
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	РасчетыНеактуальны = НЕ ИсточникДанных.РасчетыАктуальны;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	
	ЦветСостоянияПоказателя = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьЦветСостоянияДляПоказателя(ВариантАнализа, ИсточникДанных);
	
	// Добавим строковые реквизиты формы
	ОписаниеТиповСтрок = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьОписаниеТиповСтроки(0);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦельЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Цель'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦелевойТрендЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Целевой тренд'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦелевыеЗначенияЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Целевые значения'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФактическоеСостояниеЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Состояние'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФактическийТрендЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Тренд'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФактическоеЗначениеЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Заголовок значения'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ОтветственныйЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Ответственный'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФормулаЗаголовок__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Формула'")));
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦельЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение цели'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦелевойТрендЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение целевого тренда'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЦелевыеЗначенияЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значения целевых значений'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФактическоеСостояниеЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение состояния'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФактическийТрендЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение тренда'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФактическоеЗначениеЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ОтветственныйЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение ответственного'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ФормулаЗначение__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Значение формулы'")));
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементЦель__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	// Добавим элементы формы
	ПолеЗначения = Элементы.Вставить("ЦельЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ЦельЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	
	ПолеЗначения = Элементы.Вставить("ЦельЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ЦельЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементЦелевойТренд__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	ПолеЗначения = Элементы.Вставить("ЦелевойТрендЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ЦелевойТрендЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	
	ПолеЗначения = Элементы.Вставить("ЦелевойТрендЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ЦелевойТрендЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементЦелевыеЗначения__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	ПолеЗначения = Элементы.Вставить("ЦелевыеЗначенияЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ЦелевыеЗначенияЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	
	ПолеЗначения = Элементы.Вставить("ЦелевыеЗначенияЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ЦелевыеЗначенияЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементСостояние__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	// Добавим элементы формы
	ПолеЗначения = Элементы.Вставить("ФактическоеСостояниеЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФактическоеСостояниеЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	
	ПолеЗначения = Элементы.Вставить("ФактическоеСостояниеЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФактическоеСостояниеЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементФактическийТренд__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	ПолеЗначения = Элементы.Вставить("ФактическийТрендЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФактическийТрендЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	
	ПолеЗначения = Элементы.Вставить("ФактическийТрендЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФактическийТрендЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементФактическоеЗначение__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	ПолеЗначения = Элементы.Вставить("ФактическоеЗначениеЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФактическоеЗначениеЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	
	ПолеЗначения = Элементы.Вставить("ФактическоеЗначениеЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФактическоеЗначениеЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	Если НЕ ПустойИсточникДанных И НЕ РасчетыНеактуальны И НЕ ОшибкаРасчета Тогда
		ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	Иначе
		ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	КонецЕсли;
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементОтвественный__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	ПолеЗначения = Элементы.Вставить("ОтветственныйЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ОтветственныйЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	
	ПолеЗначения = Элементы.Вставить("ОтветственныйЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ОтветственныйЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоВертикали = Ложь;
	ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	ГруппаИнформационныхЭлементов = ГоризонтальнаяГруппа("ЭлементФормула__" + ИдентификаторЭлементаФормы, "", ГруппаЭлементов);
	
	ПолеЗначения = Элементы.Вставить("ФормулаЗаголовок__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФормулаЗаголовок__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.Ширина = 16;
	ПолеЗначения.Высота = 1;
	ПолеЗначения.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначения.РастягиватьПоВертикали = Истина;
	ПолеЗначения.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	
	ПолеЗначения = Элементы.Вставить("ФормулаЗначение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаИнформационныхЭлементов);
	ПолеЗначения.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеЗначения.ПутьКДанным = "ФормулаЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначения.РастягиватьПоВертикали = Истина;
	ПолеЗначения.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	
	// Заполним значения созданных полей
	ЭтотОбъект["ЦельЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Цель:'");
	ЭтотОбъект["ЦелевойТрендЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Целевой тренд:'");
	ЭтотОбъект["ЦелевыеЗначенияЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Целевые значения:'");
	
	ЭтотОбъект["ЦельЗначение__" + ИдентификаторЭлементаФормы]	= ВариантАнализа.Владелец;
	ЭтотОбъект["ЦелевойТрендЗначение__" + ИдентификаторЭлементаФормы]	= ВариантАнализа.Владелец.ЦелевойТренд;
	ЭтотОбъект["ЦелевыеЗначенияЗначение__" + ИдентификаторЭлементаФормы]	= Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСвойстваВариантаАнализа(ВариантАнализа, ИсточникДанных).ЦелевыеЗначения;
	
	КратностьЗначений = ВариантАнализа.КратностьЗначений;
	ТочностьРасчетаДробнойЧасти = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	
	Если НЕ ПустойИсточникДанных И НЕ РасчетыНеактуальны И НЕ ОшибкаРасчета Тогда
		ПоследнееЗначение = Окр(ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение, ТочностьРасчетаДробнойЧасти);
		ОтображаемоеЗначение = ПоследнееЗначение;
		
	Иначе 
		ПоследнееЗначение = 0;
		ОтображаемоеЗначение = 0;
		
	КонецЕсли;
	
	РазмерностьПоказателя = СокрЛП(Строка(ДинамическиеСвойстваВариантаАнализа.Размерность));
	
	Если ЗначениеЗаполнено(РазмерностьПоказателя) Тогда
		СтрокаРазмерности = " " + РазмерностьПоказателя;
	Иначе
		СтрокаРазмерности = "";
	КонецЕсли;
	
	ЭтотОбъект["ФактическоеСостояниеЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Состояние:'");
	ЭтотОбъект["ФактическийТрендЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Тренд:'");
	ЭтотОбъект["ФактическоеЗначениеЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Значение:'");
	ЭтотОбъект["ФормулаЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Формула:'");
	ЭтотОбъект["ОтветственныйЗаголовок__" + ИдентификаторЭлементаФормы]	= НСтр("ru='Ответственный:'");
	
	ЭтотОбъект["ФактическоеСостояниеЗначение__" + ИдентификаторЭлементаФормы]	= ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус;
	ЭтотОбъект["ФактическийТрендЗначение__" + ИдентификаторЭлементаФормы]	= ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКТренду;
	
	Если НЕ ПустойИсточникДанных И НЕ РасчетыНеактуальны И НЕ ОшибкаРасчета Тогда
		ЭтотОбъект["ФактическоеЗначениеЗначение__" + ИдентификаторЭлементаФормы]	= ОтображаемоеЗначение;//СокрЛП(Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(ОтображаемоеЗначение, ТочностьРасчетаДробнойЧасти, КратностьЗначений) + СтрокаРазмерности);
	Иначе
		ЭтотОбъект["ФактическоеЗначениеЗначение__" + ИдентификаторЭлементаФормы]	= ИсточникДанных.ОписаниеОшибки;
	КонецЕсли;
	
	ЭтотОбъект["ФормулаЗначение__" + ИдентификаторЭлементаФормы]	= ВариантАнализа.Владелец.ФормулаРасчета;
	ЭтотОбъект["ОтветственныйЗначение__" + ИдентификаторЭлементаФормы]	= ВариантАнализа.Ответственный;
	
КонецПроцедуры

// Добавляет группу элементов формы заданной ширины и высоты, содержащую пустую картинку.
// Используется для выравнивания элементов монитора.
// 
// Параметры:
//	ГруппаЭлементов - ГруппаФормы - группа, в кот. добавляется элемент
//	ИдентификаторЭлементаФормы - Строка - уникальный идентиф. добавляемого элмента
//	Высота - Число
//	Ширина - Число
//	РастягиватьПоГоризонтали - Булево - признак растягивания элемента по горизонтали
//
&НаСервере 
Процедура НарисоватьПустойЭлемент(ГруппаЭлементов, ИдентификаторЭлементаФормы, Высота, Ширина, РастягиватьПоГоризонтали = Ложь)
	// Добавим декорацию формы
	ПолеДекорации = Элементы.Вставить("ВыравнивающийЭлемент__" + ИдентификаторЭлементаФормы, Тип("ДекорацияФормы"), ГруппаЭлементов);
	ПолеДекорации.Вид = ВидДекорацииФормы.Картинка;
	ПолеДекорации.Картинка = Новый Картинка;
	ПолеДекорации.АвтоМаксимальнаяШирина = Ложь;
	ПолеДекорации.Ширина = Ширина;
	ПолеДекорации.Высота = Высота;
	ПолеДекорации.Заголовок = "Выравнивающий элемент";
	ПолеДекорации.РастягиватьПоГоризонтали = РастягиватьПоГоризонтали;
	
КонецПроцедуры

// Добавляет элементы формы для вида отображения "Таблица"
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ркВариантыАнализаЦелевыхПоказателей
//	ИсточникДанных - Структура, содержащая результаты расчета для варианта анализа
//	ГруппаЭлементов - ГруппаФормы, в которую нужно добавить элементы формы
//	ИдентификаторЭлементаФормы - Строка, содержащая уникальный идентификатор элемента формы
//
&НаСервере
Процедура НарисоватьТаблицу(ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	
	ВыводитьИтогВТаблице = Ложь;//(НЕ ТабличныеВариантыАнализаСИтогами.НайтиПоЗначению(ВариантАнализа) = Неопределено);
	
	СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
	СвойстваДанныхПоПериодамСравнения = ИсточникДанных.СвойстваДанныхПоПериодамСравнения;
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	РасчетыНеактуальны = НЕ ИсточникДанных.РасчетыАктуальны;
	
	//ВидыПредставленияЧисел = Перечисления.ркВидыПредставленияЧисел;
	ПустаяКартинка = Новый Картинка;
	МассивРеквизитов = Новый Массив;
	
	Если НЕ ПустойИсточникДанных И НЕ РасчетыНеактуальны Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ТаблицаЗначений"));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ТаблицаЗначений__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", НСтр("ru='Таблица для '" + ИсточникДанных + "'")));
		
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Диаграмма"));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Диаграмма__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", "Диаграмма для '" + ИсточникДанных + "'"));
		
	КонецЕсли;
	
	// Добавим картинки
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Картинка"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КартинкаСостояния__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", НСтр("ru='Картинка состояния'")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КартинкаТренда__" + ИдентификаторЭлементаФормы, ОписаниеТипов, "", НСтр("ru='Картинка тренда'")));
	
	// Добавим строковый реквизит
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрок = Новый ОписаниеТипов(МассивТипов);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "", НСтр("ru='Наименование показателя'")));
	
	Если НЕ ПустойИсточникДанных И НЕ РасчетыНеактуальны Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КолонкаОбъектАнализа" + "__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "ТаблицаЗначений__" + ИдентификаторЭлементаФормы, ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ОбъектАнализаПредставление));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("КолонкаЗначениеАнализа" + "__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок, "ТаблицаЗначений__" + ИдентификаторЭлементаФормы, ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаПредставление));
		
		Если ВыводитьИтогВТаблице Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ИтогТаблицаЗначений__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	// Заполним данные реквизитов формы
	//ЭтаФорма["КартинкаСостояния__" + ИдентификаторЭлементаФормы] = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьКартинкуСостоянияДляПоказателя(ВариантАнализа, ИсточникДанных);
	//ЭтаФорма["КартинкаТренда__" + ИдентификаторЭлементаФормы] = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьКартинкуТрендаДляПоказателя(ВариантАнализа, ИсточникДанных);
	
	НачалоПериода = Формат(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПервогоЗначения, "ДФ=dd.MM.yy");
	КонецПериода= Формат(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, "ДФ=dd.MM.yy");
	ТекстовоеПредставлениеПериода = НачалоПериода + " - " + КонецПериода;
	//Если ВариантАнализа.КратностьЗначений = ВидыПредставленияЧисел.БезИзменений Тогда
		//ЭтаФорма["НаименованиеПоказателя__" + ИдентификаторЭлементаФормы] = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя + ": " + ВариантАнализа.Наименование + ?(НЕ ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность),", " + ДинамическиеСвойстваВариантаАнализа.Размерность, "") + ", " + ТекстовоеПредставлениеПериода;
	//Иначе
	//	ЭтаФорма["НаименованиеПоказателя__" + ИдентификаторЭлементаФормы] = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя + ": " + ВариантАнализа.Наименование + ", " + Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа) + ?(НЕ ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность), " " + ДинамическиеСвойстваВариантаАнализа.Размерность, "") + ", " + ТекстовоеПредставлениеПериода;
	//КонецЕсли;
	
	// Добавим поля формы
	ГруппаСтатусов = ГоризонтальнаяГруппа("Статусы__" + ИдентификаторЭлементаФормы, "Статусы", ГруппаЭлементов);
	
	ПолеЗначенияИндикатора = Элементы.Вставить("КартинкаСостояния__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаСтатусов);
	ПолеЗначенияИндикатора.Вид = ВидПоляФормы.ПолеКартинки;
	ПолеЗначенияИндикатора.ПутьКДанным = "КартинкаСостояния__" + ИдентификаторЭлементаФормы;
	ПолеЗначенияИндикатора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначенияИндикатора.Ширина = 2;
	ПолеЗначенияИндикатора.Высота = 1;
	ПолеЗначенияИндикатора.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ПолеЗначенияИндикатора.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначенияИндикатора.РастягиватьПоВертикали = Ложь;
	ПолеЗначенияИндикатора.Подсказка = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу;
	
	ПолеЗначенияИндикатора = Элементы.Вставить("КартинкаТренда__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаСтатусов);
	ПолеЗначенияИндикатора.Вид = ВидПоляФормы.ПолеКартинки;
	ПолеЗначенияИндикатора.ПутьКДанным = "КартинкаТренда__" + ИдентификаторЭлементаФормы;
	ПолеЗначенияИндикатора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеЗначенияИндикатора.Ширина = 2;
	ПолеЗначенияИндикатора.Высота = 1;
	ПолеЗначенияИндикатора.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ПолеЗначенияИндикатора.РастягиватьПоГоризонтали = Ложь;
	ПолеЗначенияИндикатора.РастягиватьПоВертикали = Ложь;
	ПолеЗначенияИндикатора.Подсказка = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКТренду;
	
	ПолеНаименования = Элементы.Вставить("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаСтатусов);
	ПолеНаименования.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеНаименования.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеНаименования.ПутьКДанным = "НаименованиеПоказателя__" + ИдентификаторЭлементаФормы;
	ПолеНаименования.Ширина = 36;
	
	Если НЕ ПустойИсточникДанных И НЕ РасчетыНеактуальны И НЕ ОшибкаРасчета Тогда
		ПолеТаблицы = Элементы.Вставить("ТаблицаЗначений__" + ИдентификаторЭлементаФормы, Тип("ТаблицаФормы"), ГруппаЭлементов);
		ПолеТаблицы.ПутьКДанным = "ТаблицаЗначений__" + ИдентификаторЭлементаФормы;
		ПолеТаблицы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеТаблицы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ПолеТаблицы.ТолькоПросмотр = Истина;
		ПолеТаблицы.Ширина = 56;
		
		Если СтруктураНастроек.РазмерДиаграмм = 1 Тогда
			ПолеТаблицы.Высота = 8;
			
		Иначе
			ПолеТаблицы.Высота = 19;
			
		КонецЕсли;
		
		ПолеТаблицы.Шапка = Ложь;
		ПолеТаблицы.Подвал = ВыводитьИтогВТаблице;
		ПолеТаблицы.ГоризонтальныеЛинии = Ложь;
		ПолеТаблицы.ВертикальныеЛинии = Ложь;
		ПолеТаблицы.МножественныйВыбор = Ложь;
		ПолеТаблицы.КонтекстноеМеню.Доступность = Ложь;
		ПолеТаблицы.ЧередованиеЦветовСтрок = Истина;
		
		ПолеПоляТаблицы = Элементы.Вставить("КолонкаОбъектАнализа" + "__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ПолеТаблицы);
		ПолеПоляТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		ПолеПоляТаблицы.АвтоВысотаЯчейки = Истина;
		ПолеПоляТаблицы.ПутьКДанным = "ТаблицаЗначений__" + ИдентификаторЭлементаФормы + "." + "КолонкаОбъектАнализа" + "__" + ИдентификаторЭлементаФормы;
		ПолеПоляТаблицы.ОтображатьВПодвале = Ложь;
		
		ПолеПоляТаблицы = Элементы.Вставить("КолонкаЗначениеАнализа" + "__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ПолеТаблицы);
		ПолеПоляТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		ПолеПоляТаблицы.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		ПолеПоляТаблицы.ПутьКДанным = "ТаблицаЗначений__" + ИдентификаторЭлементаФормы + "." + "КолонкаЗначениеАнализа" + "__" + ИдентификаторЭлементаФормы;
		
		Если ВыводитьИтогВТаблице Тогда 
			ПолеПоляТаблицы.ПутьКДаннымПодвала = "ИтогТаблицаЗначений__" + ИдентификаторЭлементаФормы;
			ПолеПоляТаблицы.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
			ПолеПоляТаблицы.ШрифтПодвала = Новый Шрифт(ПолеПоляТаблицы.ШрифтПодвала,,, Истина);
			
			КратностьЗначений			= 2;//ВариантАнализа.КратностьЗначений;
			ТочностьРасчетаДробнойЧасти = 2;//ВариантАнализа.ТочностьРасчетаДробнойЧасти;
			Размерность					= СокрЛП(Строка(ДинамическиеСвойстваВариантаАнализа.Размерность));
			
			ЭтотОбъект["ИтогТаблицаЗначений__" + ИдентификаторЭлементаФормы] = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.Данные.Итог(ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа), ТочностьРасчетаДробнойЧасти, КратностьЗначений) + " " + Размерность;
			
		КонецЕсли;
		
		//Отчеты.CRM_МониторЦелевыхПоказателей.ЗаполнитьТаблицуДляМонитора(ЭтаФорма["ТаблицаЗначений__" + ИдентификаторЭлементаФормы], ИдентификаторЭлементаФормы, ВариантАнализа, ИсточникДанных);
		
	Иначе
		ПолеДиаграммы = Элементы.Вставить("Диаграмма__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов);
		ПолеДиаграммы.Вид = ВидПоляФормы.ПолеДиаграммы;
		ПолеДиаграммы.ПутьКДанным = "Диаграмма__" + ИдентификаторЭлементаФормы;
		ПолеДиаграммы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеДиаграммы.Ширина = 56;
		ПолеДиаграммы.Высота = 8 * СтруктураНастроек.РазмерДиаграмм;
		
		Диаграмма = ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы];
		
		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
			ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
			
		Иначе
			ОписаниеОшибки = НСтр("ru='Ошибка расчета показателя'");
			
		КонецЕсли;
		
		Диаграмма = ПолучитьДиаграммуПриОшибкахРасчета(Диаграмма, ОписаниеОшибки, ЦветаСтиля.ПоясняющийОшибкуТекст);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуры добавления элементов формы монитора - краткое представление, диаграммы и таблицы
// 
// Параметры:
//	СоставМонитора - Структура - содержит набор источников данных и обобщенную информацию об источниках
//
&НаСервере
Процедура НарисоватьЭлементыМонитора(СоставМонитора)
	
	СоздатьБазовуюСтруктуруЭлементовФормы(СоставМонитора);
	
	НаборИсточниковДанных = СоставМонитора.НаборИсточниковДанных;
	
	ВариантыОтображенияВариантовАнализа = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей;
	ЗоныВнимания = Перечисления.CRM_ЗоныВниманияАнализаПоказателей;
	
	Если РежимАнализаВзаимосвязанных Тогда
		// Создадим элементы формы для анализируемого показателя
		//ОтборАнализируемых = Новый Структура("Группа", Перечисления.ВидыПоискаСвязанныхПоказателей.ПустаяСсылка());
		//ОтборАнализируемых = Неопределено;
		//Анализируемые = НаборИсточниковДанных.НайтиСтроки(ОтборАнализируемых);
		//НарисоватьЭлементыМонитораСУчетомВидаАнркЗоныВниманияВариантовАнализаализаВзаимосвязаных(Анализируемые, Перечисления.ВидыПоискаСвязанныхПоказателей.ПустаяСсылка());
		//
		//// Создадим элементы формы для взаимосвязанных показателей
		//ОтборЗависимых = Новый Структура("Группа", Перечисления.ВидыПоискаСвязанныхПоказателей.ЗависимыеПоказатели);
		//Зависимые = НаборИсточниковДанных.НайтиСтроки(ОтборЗависимых);
		//
		//Если Зависимые.Количество() > 0 Тогда
		//	 НарисоватьЭлементыМонитораСУчетомВидаАнализаВзаимосвязаных(Зависимые, Перечисления.ВидыПоискаСвязанныхПоказателей.ЗависимыеПоказатели);
		//	 
		//КонецЕсли;
		//
		//ОтборВлияющих = Новый Структура("Группа", Перечисления.ВидыПоискаСвязанныхПоказателей.ВлияющиеПоказатели);
		//Влияющие  = НаборИсточниковДанных.НайтиСтроки(ОтборВлияющих);
		//
		//Если Влияющие.Количество() > 0 Тогда
		//	 НарисоватьЭлементыМонитораСУчетомВидаАнализаВзаимосвязаных(Влияющие, Перечисления.ВидыПоискаСвязанныхПоказателей.ВлияющиеПоказатели);
		//	 
		//КонецЕсли;
		//
	Иначе 
		Если СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоВажности" Тогда
			Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.КритическоеСостояние, ВариантыОтображенияВариантовАнализа.Кратко);
			ПоказателиКритическоеСостояниеКратко = НаборИсточниковДанных.НайтиСтроки(Отбор);
			
			Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.Важно, ВариантыОтображенияВариантовАнализа.Кратко);
			ПоказателиВажноКратко = НаборИсточниковДанных.НайтиСтроки(Отбор);
			
			Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.КСведению, ВариантыОтображенияВариантовАнализа.Кратко);
			ПоказателиКСведениюКратко = НаборИсточниковДанных.НайтиСтроки(Отбор);
			
			Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.РассчитанныеСОшибками, ВариантыОтображенияВариантовАнализа.Кратко);
			ПоказателиРассчитанныеСОшибкамиКратко = НаборИсточниковДанных.НайтиСтроки(Отбор);
			
			Отбор = Новый Структура("ВариантОтображения", ВариантыОтображенияВариантовАнализа.Кратко);
			НаборИсточниковДанныхНеКраткие = Отчеты.CRM_МониторЦелевыхПоказателей.ПрименитьКТаблицеУсловиеНЕ(НаборИсточниковДанных.Скопировать(), Отбор);
			НаборИсточниковДанныхНеКраткие.Сортировать("Позиция");
			
			Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.КритическоеСостояние);
			ПоказателиКритическоеСостояниеПодробно = НаборИсточниковДанныхНеКраткие.НайтиСтроки(Отбор);
			
			Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.Важно);
			ПоказателиВажноПодробно = НаборИсточниковДанныхНеКраткие.НайтиСтроки(Отбор);
			
			Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
			ПоказателиКСведениюПодробно = НаборИсточниковДанныхНеКраткие.НайтиСтроки(Отбор);
			
			Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
			ПоказателиРассчитанныеСОшибкамиПодробно = НаборИсточниковДанныхНеКраткие.НайтиСтроки(Отбор);
			
			Если ПоказателиКритическоеСостояниеКратко.Количество() > 0 Тогда
				НарисоватьЭлементыМонитораСУчетомЗоныВнимания(ПоказателиКритическоеСостояниеКратко, ЗоныВнимания.КритическоеСостояние);
				
			КонецЕсли;
			Если ПоказателиКритическоеСостояниеПодробно.Количество() > 0 Тогда
				НарисоватьЭлементыМонитораСУчетомЗоныВнимания(ПоказателиКритическоеСостояниеПодробно, ЗоныВнимания.КритическоеСостояние);
				
			КонецЕсли;
			
			Если ПоказателиВажноКратко.Количество() > 0 Тогда
				НарисоватьЭлементыМонитораСУчетомЗоныВнимания(ПоказателиВажноКратко, ЗоныВнимания.Важно);
				
			КонецЕсли;
			Если ПоказателиВажноПодробно.Количество() > 0 Тогда
				НарисоватьЭлементыМонитораСУчетомЗоныВнимания(ПоказателиВажноПодробно, ЗоныВнимания.Важно);
				
			КонецЕсли;
			
			Если ПоказателиКСведениюКратко.Количество() > 0 Тогда
				НарисоватьЭлементыМонитораСУчетомЗоныВнимания(ПоказателиКСведениюКратко, ЗоныВнимания.КСведению);
				
			КонецЕсли;
			Если ПоказателиКСведениюПодробно.Количество() > 0 Тогда
				НарисоватьЭлементыМонитораСУчетомЗоныВнимания(ПоказателиКСведениюПодробно, ЗоныВнимания.КСведению);
				
			КонецЕсли;
			
			Если ПоказателиРассчитанныеСОшибкамиКратко.Количество() > 0 Тогда
				НарисоватьЭлементыМонитораСУчетомЗоныВнимания(ПоказателиРассчитанныеСОшибкамиКратко, ЗоныВнимания.РассчитанныеСОшибками);
				
			КонецЕсли;
			Если ПоказателиРассчитанныеСОшибкамиПодробно.Количество() > 0 Тогда
				НарисоватьЭлементыМонитораСУчетомЗоныВнимания(ПоказателиРассчитанныеСОшибкамиПодробно, ЗоныВнимания.РассчитанныеСОшибками);
				
			КонецЕсли;
			
		ИначеЕсли СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоКатегориямЦелей" Тогда
			
			
			НаборГруппИсточниковДанныхТекстовые = НаборИсточниковДанных.Скопировать();
			НаборГруппИсточниковДанныхТекстовые.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
			НаборГруппИсточниковДанныхТекстовые.Колонки.Добавить("КоличествоГруппСтрок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
			НаборГруппИсточниковДанныхТекстовые.ЗаполнитьЗначения(1, "Количество");
			НаборГруппИсточниковДанныхТекстовые.Свернуть("ВариантОтображения, Группа","Количество, КоличествоГруппСтрок");
			
			ОтборТекстовых = Новый Структура("ВариантОтображения", Перечисления.CRM_ВариантыОтображенияАнализаПоказателей.Кратко);
			НаборГруппИсточниковДанныхТекстовые = Отчеты.CRM_МониторЦелевыхПоказателей.ПрименитьКТаблицеУсловие(НаборГруппИсточниковДанныхТекстовые, ОтборТекстовых);
			
			Для Каждого ГруппаИсточникаДанных Из НаборГруппИсточниковДанныхТекстовые Цикл
				ГруппаИсточникаДанных.КоличествоГруппСтрок = ПолучитьКоличествоГруппСтрок(ГруппаИсточникаДанных.Количество);
				
			КонецЦикла;
			
			НаборГруппИсточниковДанныхПодробные = НаборИсточниковДанных.Скопировать();
			НаборГруппИсточниковДанныхПодробные.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
			НаборГруппИсточниковДанныхПодробные.Колонки.Добавить("КоличествоГруппСтрок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
			НаборГруппИсточниковДанныхПодробные.ЗаполнитьЗначения(1, "Количество");
			НаборГруппИсточниковДанныхПодробные.Свернуть("ВариантОтображения, Группа","Количество, КоличествоГруппСтрок");
			
			НаборГруппИсточниковДанныхПодробные = Отчеты.CRM_МониторЦелевыхПоказателей.ПрименитьКТаблицеУсловиеНЕ(НаборГруппИсточниковДанныхПодробные, ОтборТекстовых);
			НаборГруппИсточниковДанныхПодробные.Свернуть("Группа","Количество, КоличествоГруппСтрок");
			
			Для Каждого ГруппаИсточникаДанных Из НаборГруппИсточниковДанныхПодробные Цикл
				ГруппаИсточникаДанных.КоличествоГруппСтрок = ПолучитьКоличествоГруппСтрок(ГруппаИсточникаДанных.Количество);
				
			КонецЦикла;
			
			// Заполним текстовые показатели
			Для Каждого ГруппаТекстовогоПоказателя Из НаборГруппИсточниковДанныхТекстовые Цикл
				
				ГруппаПоказателя = ГруппаТекстовогоПоказателя.Группа;
				ИмяГруппы = ГруппаПоказателя.Наименование;
				ИдентификаторГруппы = СтрЗаменить(Строка(ГруппаПоказателя.УникальныйИдентификатор()),"-","_");
				
				ОтборПоГруппеТекстовые = Новый Структура("Группа, ВариантОтображения", ГруппаПоказателя, ВариантыОтображенияВариантовАнализа.Кратко);
				ТекстовыеПоказателиГруппы = НаборИсточниковДанных.НайтиСтроки(ОтборПоГруппеТекстовые);
				
				НарисоватьЭлементыМонитораСУчетомГрупп(ТекстовыеПоказателиГруппы, ИдентификаторГруппы);
				
			КонецЦикла;
			
			// Заполним диаграммы и таблицы
			Для Каждого ГруппаПодробногоПоказателя Из НаборГруппИсточниковДанныхПодробные Цикл
				
				ГруппаПоказателя = ГруппаПодробногоПоказателя.Группа;
				ИмяГруппы = ГруппаПоказателя.Наименование;
				ИдентификаторГруппы = СтрЗаменить(Строка(ГруппаПоказателя.УникальныйИдентификатор()),"-","_");
				
				НаборИсточниковДанныхНеТекстовые = Отчеты.CRM_МониторЦелевыхПоказателей.ПрименитьКТаблицеУсловиеНЕ(НаборИсточниковДанных.Скопировать(), ОтборТекстовых);
				НаборИсточниковДанныхНеТекстовые.Сортировать("ПорядокЗоныВнимания");
				
				ОтборПоГруппе = Новый Структура("Группа", ГруппаПоказателя);
				ПоказателиГруппы = НаборИсточниковДанныхНеТекстовые.НайтиСтроки(ОтборПоГруппе);
				
				НарисоватьЭлементыМонитораСУчетомГрупп(ПоказателиГруппы, ИдентификаторГруппы);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуры добавления элементов формы монитора в режиме анализа взаимосвязанных
// 
// Параметры:
//	КоллекцияВариантовАнализа - ТаблицаЗначений - содержит источники данных и их свойства
//	ВидПоискаВзаимосвязанных - ПеречислениеСсылка.ВидыПоискаСвязанныхПоказателей - значения зависимые, влияющие, взаимосвязанные, все
//
&НаСервере 
Процедура НарисоватьЭлементыМонитораСУчетомВидаАнализаВзаимосвязаных(КоллекцияВариантовАнализа, ВидПоискаВзаимосвязанных)
	
	////ВидыПредставленияЧисел = Перечисления.ркВидыПредставленияЧисел;
	//ВариантыОтображения = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей;
	//
	//Если НЕ ВидПоискаВзаимосвязанных = Перечисления.ВидыПоискаСвязанныхПоказателей.ПустаяСсылка() Тогда
	//	ИмяВидаПоиска = Строка(ВидПоискаВзаимосвязанных);
	//	
	//Иначе
	//	ИмяВидаПоиска = НСтр("ru='АнализируемыйПоказатель'");
	//	
	//КонецЕсли;
	//
	//Для Каждого ЭлементМонитора Из КоллекцияВариантовАнализа Цикл 
	//	
	//	ВариантАнализа = ЭлементМонитора.ВариантАнализа; 
	//	ИсточникДанных = ЭлементМонитора.ИсточникДанных.Получить();
	//	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	//	ВариантОтображения = ВариантыОтображения.Диаграмма;
	//	ВидПредставленияЧисел = ВариантАнализа.КратностьЗначений;
	//	ИдентификаторЭлементаФормы = СтрЗаменить(Строка(ВариантАнализа.УникальныйИдентификатор()),"-","_");
	//	
	//	МножительРазмера = СтруктураНастроек.РазмерДиаграмм;
	//	
	//	ГруппаСтрокаЭлементов = Элементы["ГруппаКолонкаЭлементов" + ИмяВидаПоиска + "__" + "1"];
	//	ВысотаЭлемента = 10;
	//	
	//	ГруппаЭлемент = Элементы.Добавить("ЭлементДиаграмма__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), ГруппаСтрокаЭлементов);
	//	ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	//	ГруппаЭлемент.Отображение = ОтображениеОбычнойГруппы.Отступ;
	//	ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
	//	
	//	//Если ВидПредставленияЧисел = ВидыПредставленияЧисел.БезИзменений Тогда
	//		ГруппаЭлемент.Заголовок = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя + ?(НЕ ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность)," (" + ДинамическиеСвойстваВариантаАнализа.Размерность + ")", "");
	//	//Иначе
	//	//	ГруппаЭлемент.Заголовок = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя + " (" + Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа) + ?(НЕ ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность), " " + ДинамическиеСвойстваВариантаАнализа.Размерность, "") + ")";
	//	//КонецЕсли;
	//	
	//	ШиринаЭлемента = 29;
	//	
	//	// Размеры
	//	ГруппаЭлемент.Ширина = ШиринаЭлемента;
	//	ГруппаЭлемент.Высота = ВысотаЭлемента * МножительРазмера;
	//	ГруппаЭлемент.РастягиватьПоВертикали = Ложь;
	//	
	//	// Наполним элемент контентом по шаблонам вариантов
	//	НарисоватьЭлементыПоказателя(ИсточникДанных, ВариантОтображения, ГруппаЭлемент, ИдентификаторЭлементаФормы);
	//	
	//	// Заполним справочную информацию о показателе
	//	ГруппаСтрокаЭлементов = Элементы["ГруппаКолонкаЭлементов" + ИмяВидаПоиска + "__" + "2"];
	//	ВысотаЭлемента = 10;
	//	
	//	ГруппаЭлемент = Элементы.Добавить("ЭлементСправкаОПоказателе__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), ГруппаСтрокаЭлементов);
	//	ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	//	ГруппаЭлемент.Отображение = ОтображениеОбычнойГруппы.Отступ;
	//	ГруппаЭлемент.Заголовок = "Справка о показателе";
	//	
	//	ШиринаЭлемента = 29;
	//	
	//	// Размеры
	//	ГруппаЭлемент.Ширина = ШиринаЭлемента;
	//	ГруппаЭлемент.Высота = ВысотаЭлемента * МножительРазмера;
	//	ГруппаЭлемент.РастягиватьПоВертикали = Ложь;
	//	ГруппаЭлемент.ШрифтЗаголовка = Новый Шрифт(,, Истина);
	//	
	//	// Наполним элемент контентом по шаблонам вариантов
	//	НарисоватьПоляСправкиОПоказателе(ВариантАнализа, ИсточникДанных, ГруппаЭлемент, ИдентификаторЭлементаФормы);
	//	
	//КонецЦикла;
	
КонецПроцедуры

// Вызывает процедуры добавления элементов формы монитора в группу в режиме вывода по категориям целей
// 
// Параметры:
//	КоллекцияВариантовАнализа - ТаблицаЗначений - содержит источники данных и их свойства
//	ИдентификаторГруппы - Строка - идентификатор группы, в которую будут добавлены элементы формы
//
&НаСервере 
Процедура НарисоватьЭлементыМонитораСУчетомГрупп(КоллекцияВариантовАнализа, ИдентификаторГруппы)
	
	//ВидыПредставленияЧисел = Перечисления.ркВидыПредставленияЧисел;
	ВариантыОтображения = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей;
	
	СчетчикСтрок = 1;
	СчетчикЭлементовСтроки = 1;
	КоличествоПоказателейВКоллекции = КоллекцияВариантовАнализа.Количество();
	КоличествоПоказателейВПоследнейСтроке = КоличествоПоказателейВКоллекции % СтруктураНастроек.КоличествоКолонокМонитораПоказателей;
	КоличествоНенарисованныхПоказателей = КоличествоПоказателейВКоллекции;
	
	Для Каждого ЭлементМонитора Из КоллекцияВариантовАнализа Цикл 
		
		Показатель = ЭлементМонитора.Показатель; 
		ВариантОтображения = ЭлементМонитора.ВариантОтображения;
		ВидПредставленияЧисел = Показатель.КратностьЗначений;
		ИдентификаторЭлементаФормы = СтрЗаменить(Строка(Показатель.УникальныйИдентификатор()),"-","_") + "__" + ЭлементМонитора.Позиция;
		
		Если ВариантОтображения = ВариантыОтображения.Кратко Тогда
			МножительРазмера = 1;
		Иначе
			МножительРазмера = СтруктураНастроек.РазмерДиаграмм;
		КонецЕсли;
		
		Если ВариантОтображения = ВариантыОтображения.Кратко Тогда
			ГруппаСтолбецЭлементов = Элементы["ГруппаКолонкаЭлементовКратко" + ИдентификаторГруппы + "__" + СчетчикЭлементовСтроки];
			ВысотаЭлемента = 1;
			
			//Если ВидПредставленияЧисел = ВидыПредставленияЧисел.БезИзменений Тогда
				ЗаголовокЭлемента = ЭлементМонитора.Показатель.Наименование;
			//Иначе
			//	ЗаголовокЭлемента = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя + " (" + Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа) + ?(НЕ ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность), " " + ДинамическиеСвойстваВариантаАнализа.Размерность, "") + ")";
			//КонецЕсли;
			
			ГруппаЭлемент   = ГоризонтальнаяГруппа("Элемент__" + ИдентификаторЭлементаФормы, ЗаголовокЭлемента, ГруппаСтолбецЭлементов);
			ГруппаСотрудник = ГоризонтальнаяГруппаСотрудника("Элемент__Сотрудник__" + ИдентификаторЭлементаФормы, Строка(ЭлементМонитора.Сотрудник), ГруппаЭлемент);
			
			НарисоватьЭлементыПоказателя(ЭлементМонитора, ВариантОтображения, ГруппаСотрудник, ИдентификаторЭлементаФормы);
			
			КоличествоНенарисованныхПоказателей = КоличествоНенарисованныхПоказателей - 1;
			
			Если КоличествоНенарисованныхПоказателей = 0 И СчетчикЭлементовСтроки < СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда
				Для СчВыравнивающихЭлементов = 1 По (СтруктураНастроек.КоличествоКолонокМонитораПоказателей - СчетчикЭлементовСтроки) Цикл 
					ГруппаСтрокаЭлементов = Элементы["ГруппаКолонкаЭлементовКратко" + ИдентификаторГруппы + "__" + (СчетчикЭлементовСтроки + СчВыравнивающихЭлементов)];
					
					ГруппаЭлемент = Элементы.Добавить("КонтейнерВыравнивающегоЭлемента__" + ИдентификаторЭлементаФормы + "__" + СчВыравнивающихЭлементов, Тип("ГруппаФормы"), ГруппаСтрокаЭлементов);
					ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаЭлемент.Отображение = ОтображениеОбычнойГруппы.Нет;
					ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
					ГруппаЭлемент.Заголовок = "Контейнер выравнивающего элемента";
					
					НарисоватьПустойЭлемент(ГруппаЭлемент, ИдентификаторЭлементаФормы + "__" + СчВыравнивающихЭлементов, ВысотаЭлемента, 0, Истина);
					
				КонецЦикла;
				
			КонецЕсли;
			
			СчетчикЭлементовСтроки = СчетчикЭлементовСтроки + 1;
			
			Если СчетчикЭлементовСтроки > СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда 
				СчетчикЭлементовСтроки = 1;
				
			КонецЕсли;
			
		Иначе
			ГруппаСтрокаЭлементов = Элементы["ГруппаКолонкаПодробныхЭлементов" + ИдентификаторГруппы + "__" + СчетчикЭлементовСтроки];
			ВысотаЭлемента = 10;
		
			ГруппаЭлемент = Элементы.Добавить("Элемент__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), ГруппаСтрокаЭлементов);
			ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			//ГруппаЭлемент.Отображение = ОтображениеОбычнойГруппы.Отступ;
			ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
						
			//Если ВидПредставленияЧисел = ВидыПредставленияЧисел.БезИзменений Тогда
				ГруппаЭлемент.Заголовок = ЭлементМонитора.Показатель.Наименование;
			//Иначе
			//	ГруппаЭлемент.Заголовок = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя + " (" + Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа) + ?(НЕ ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность), " " + ДинамическиеСвойстваВариантаАнализа.Размерность, "") + ")";
			//КонецЕсли;
			
			Если СтруктураНастроек.КоличествоКолонокМонитораПоказателей < 2
				ИЛИ СтруктураНастроек.КоличествоКолонокМонитораПоказателей > 4 Тогда
				ШиринаЭлемента = 30;
			ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 2 тогда
				ШиринаЭлемента = 29;
			ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 3 тогда
				ШиринаЭлемента = 29;
			ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 4 тогда
				ШиринаЭлемента = 28;
			КонецЕсли;
			
			// Размеры
			ГруппаЭлемент.Ширина = ШиринаЭлемента;
			ГруппаЭлемент.Высота = ВысотаЭлемента * МножительРазмера;
			ГруппаЭлемент.РастягиватьПоВертикали = Ложь;
			
			ГруппаСотрудник = ВертикальнаяГруппаСотрудника("Элемент__Сотрудник__" + ИдентификаторЭлементаФормы, Строка(ЭлементМонитора.Сотрудник), ГруппаЭлемент);
			
			Если ЭлементМонитора.ЗонаВнимания = Перечисления.CRM_ЗоныВниманияАнализаПоказателей.КритическоеСостояние Тогда
				ГруппаСотрудник.ЦветТекстаЗаголовка = WebЦвета.Кирпичный;
			ИначеЕсли ЭлементМонитора.ЗонаВнимания = Перечисления.CRM_ЗоныВниманияАнализаПоказателей.Важно Тогда
				ГруппаСотрудник.ЦветТекстаЗаголовка = WebЦвета.ТемноОранжевый;
			ИначеЕсли ЭлементМонитора.ЗонаВнимания = Перечисления.CRM_ЗоныВниманияАнализаПоказателей.КСведению Тогда
				ГруппаСотрудник.ЦветТекстаЗаголовка = WebЦвета.ЦветМорскойВолны;
			КонецЕсли;
			          			
			// Наполним элемент контентом по шаблонам вариантов
			НарисоватьЭлементыПоказателя(ЭлементМонитора, ВариантОтображения, ГруппаСотрудник, ИдентификаторЭлементаФормы);
			
			КоличествоНенарисованныхПоказателей = КоличествоНенарисованныхПоказателей - 1;
			
			Если КоличествоНенарисованныхПоказателей = 0 И СчетчикЭлементовСтроки < СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда
				Для СчВыравнивающихЭлементов = 1 По (СтруктураНастроек.КоличествоКолонокМонитораПоказателей - СчетчикЭлементовСтроки) Цикл 
					ГруппаСтрокаЭлементов = Элементы["ГруппаКолонкаПодробныхЭлементов" + ИдентификаторГруппы + "__" + (СчетчикЭлементовСтроки + СчВыравнивающихЭлементов)];
					ГруппаЭлемент = Элементы.Добавить("Элемент__" + ИдентификаторЭлементаФормы + "__" + (СчетчикЭлементовСтроки + СчВыравнивающихЭлементов), Тип("ГруппаФормы"), ГруппаСтрокаЭлементов);
					ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаЭлемент.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
					ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
								
					ГруппаЭлемент.Заголовок = ЭлементМонитора.Показатель.Наименование;
					
					Если СтруктураНастроек.КоличествоКолонокМонитораПоказателей < 2
						ИЛИ СтруктураНастроек.КоличествоКолонокМонитораПоказателей > 4 Тогда
						ШиринаЭлемента = 30;
					ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 2 тогда
						ШиринаЭлемента = 29;
					ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 3 тогда
						ШиринаЭлемента = 29;
					ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 4 тогда
						ШиринаЭлемента = 28;
					КонецЕсли;
					
					// Размеры
					ГруппаЭлемент.Ширина = ШиринаЭлемента;
					ГруппаЭлемент.Высота = ВысотаЭлемента * МножительРазмера;
					ГруппаЭлемент.РастягиватьПоВертикали = Ложь;
					
					ГруппаСотрудник = ВертикальнаяГруппаСотрудника("Элемент__Сотрудник__" + ИдентификаторЭлементаФормы + "__" + (СчетчикЭлементовСтроки + СчВыравнивающихЭлементов), "", ГруппаЭлемент, ОтображениеОбычнойГруппы.СлабоеВыделение);
					
					// Наполним элемент контентом по шаблонам вариантов
					НарисоватьПустыеЭлементыПоказателя(ЭлементМонитора, ВариантОтображения, ГруппаСотрудник, ИдентификаторЭлементаФормы + "__" + (СчетчикЭлементовСтроки + СчВыравнивающихЭлементов));
					
				КонецЦикла;
				
			КонецЕсли;
			
			СчетчикЭлементовСтроки = СчетчикЭлементовСтроки + 1;
			
			Если СчетчикЭлементовСтроки > СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда 
				СчетчикЭлементовСтроки = 1;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вызывает процедуры добавления элементов формы монитора в группу в режиме вывода по важности
// 
// Параметры:
//	КоллекцияВариантовАнализа - ТаблицаЗначений - содержит источники данных и их свойства
//	ЗонаВнимания - ПеречислениеСсылка.ЗоныВниманияВариантовАнализа - зона внимания/важности, в которую будут добавлены элменты формы
//
&НаСервере 
Процедура НарисоватьЭлементыМонитораСУчетомЗоныВнимания(КоллекцияВариантовАнализа, ЗонаВнимания)
	
	//ВидыПредставленияЧисел = Перечисления.ркВидыПредставленияЧисел;
	ВариантыОтображения = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей;
	ИмяЗоныВнимания = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ЗонаВнимания);
	
	СчетчикСтрок = 1;
	СчетчикЭлементовСтроки = 1;
	КоличествоПоказателейВКоллекции = КоллекцияВариантовАнализа.Количество();
	КоличествоНенарисованныхПоказателей = КоличествоПоказателейВКоллекции;
	
	Для Каждого ЭлементМонитора Из КоллекцияВариантовАнализа Цикл 
		
		//ВариантАнализа = ЭлементМонитора.ВариантАнализа; 
		ИсточникДанных = ЭлементМонитора.Показатель;
		//ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
		ВариантОтображения = ЭлементМонитора.ВариантОтображения;
		//ВидПредставленияЧисел = ВариантАнализа.КратностьЗначений;
		ИдентификаторЭлементаФормы = СтрЗаменить(Строка(ИсточникДанных.УникальныйИдентификатор()),"-","_")+ "__" + ЭлементМонитора.Позиция;
		
		Если ВариантОтображения = ВариантыОтображения.Кратко Тогда
			МножительРазмера = 1;
		Иначе
			МножительРазмера = СтруктураНастроек.РазмерДиаграмм;
		КонецЕсли;
		
		Если ВариантОтображения = ВариантыОтображения.Кратко Тогда
			
			ГруппаСтолбецЭлементов = Элементы["ГруппаКолонкаЭлементовКратко" + ИмяЗоныВнимания + "__" + СчетчикЭлементовСтроки];
			ВысотаЭлемента = 1;
			
			//Если ВидПредставленияЧисел = ВидыПредставленияЧисел.БезИзменений Тогда
				ЗаголовокЭлемента = ЭлементМонитора.Показатель.Наименование;
			//Иначе
			//	ЗаголовокЭлемента = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя + " (" + Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа) + ?(НЕ ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность), " " + ДинамическиеСвойстваВариантаАнализа.Размерность, "") + ")";
			//КонецЕсли;
			
			
			ГруппаЭлемент   = ГоризонтальнаяГруппа("Элемент__" + ИдентификаторЭлементаФормы, ЗаголовокЭлемента, ГруппаСтолбецЭлементов);
			ГруппаСотрудник = ГоризонтальнаяГруппаСотрудника("Элемент__Сотрудник__" + ИдентификаторЭлементаФормы, Строка(ЭлементМонитора.Сотрудник), ГруппаЭлемент);
			
			НарисоватьЭлементыПоказателя(ЭлементМонитора, ВариантОтображения, ГруппаСотрудник, ИдентификаторЭлементаФормы);
			
			Если СтруктураНастроек.КоличествоКолонокМонитораПоказателей < 2
				ИЛИ СтруктураНастроек.КоличествоКолонокМонитораПоказателей > 4 Тогда
				ШиринаЭлемента = 30;
			ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 2 тогда
				ШиринаЭлемента = 29;
			ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 3 тогда
				ШиринаЭлемента = 29;
			ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 4 тогда
				ШиринаЭлемента = 28;
			КонецЕсли;
			
			КоличествоНенарисованныхПоказателей = КоличествоНенарисованныхПоказателей - 1;
			
			Если КоличествоНенарисованныхПоказателей = 0 И СчетчикЭлементовСтроки < СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда
				Для СчВыравнивающихЭлементов = 1 По (СтруктураНастроек.КоличествоКолонокМонитораПоказателей - СчетчикЭлементовСтроки) Цикл 
					ГруппаСтрокаЭлементов = Элементы["ГруппаКолонкаЭлементовКратко" + ИмяЗоныВнимания + "__" + (СчетчикЭлементовСтроки + СчВыравнивающихЭлементов)];
					
					ГруппаЭлемент = Элементы.Добавить("КонтейнерВыравнивающегоЭлемента__" + ИдентификаторЭлементаФормы + "__" + СчВыравнивающихЭлементов, Тип("ГруппаФормы"), ГруппаСтрокаЭлементов);
					ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаЭлемент.Отображение = ОтображениеОбычнойГруппы.Нет;
					ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
					ГруппаЭлемент.Заголовок = "Контейнер выравнивающего элемента";
					
					НарисоватьПустойЭлемент(ГруппаЭлемент, ИдентификаторЭлементаФормы + "__" + СчВыравнивающихЭлементов, ВысотаЭлемента, 0, Истина);
					
				КонецЦикла;
				
			КонецЕсли;
			
			СчетчикЭлементовСтроки = СчетчикЭлементовСтроки + 1;
			
			Если СчетчикЭлементовСтроки > СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда 
				СчетчикЭлементовСтроки = 1;
				
			КонецЕсли;
			
		Иначе
			
			ГруппаСтрокаЭлементов = Элементы["ГруппаКолонкаПодробныхЭлементов" + ИмяЗоныВнимания + "__" + СчетчикЭлементовСтроки];
			ВысотаЭлемента = 10;
			
			ГруппаЭлемент = Элементы.Добавить("Элемент__" + ИдентификаторЭлементаФормы, Тип("ГруппаФормы"), ГруппаСтрокаЭлементов);
			ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЭлемент.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
			ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
						
			//Если ВидПредставленияЧисел = ВидыПредставленияЧисел.БезИзменений Тогда
				ГруппаЭлемент.Заголовок = ЭлементМонитора.Показатель.Наименование;
			//Иначе
			//	ГруппаЭлемент.Заголовок = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя + " (" + Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа) + ?(НЕ ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность), " " + ДинамическиеСвойстваВариантаАнализа.Размерность, "") + ")";
			//КонецЕсли;
			
			Если СтруктураНастроек.КоличествоКолонокМонитораПоказателей < 2
				ИЛИ СтруктураНастроек.КоличествоКолонокМонитораПоказателей > 4 Тогда
				ШиринаЭлемента = 30;
			ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 2 тогда
				ШиринаЭлемента = 29;
			ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 3 тогда
				ШиринаЭлемента = 29;
			ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 4 тогда
				ШиринаЭлемента = 28;
			КонецЕсли;
			
			// Размеры
			ГруппаЭлемент.Ширина = ШиринаЭлемента;
			ГруппаЭлемент.Высота = ВысотаЭлемента * МножительРазмера;
			ГруппаЭлемент.РастягиватьПоВертикали = Ложь;
			
			ГруппаСотрудник = ВертикальнаяГруппаСотрудника("Элемент__Сотрудник__" + ИдентификаторЭлементаФормы, Строка(ЭлементМонитора.Сотрудник), ГруппаЭлемент);
			
			// Наполним элемент контентом по шаблонам вариантов
			НарисоватьЭлементыПоказателя(ЭлементМонитора, ВариантОтображения, ГруппаСотрудник, ИдентификаторЭлементаФормы);
			
			КоличествоНенарисованныхПоказателей = КоличествоНенарисованныхПоказателей - 1;
			
			Если КоличествоНенарисованныхПоказателей = 0 И СчетчикЭлементовСтроки < СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда
				Для СчВыравнивающихЭлементов = 1 По (СтруктураНастроек.КоличествоКолонокМонитораПоказателей - СчетчикЭлементовСтроки) Цикл 
					ГруппаСтрокаЭлементов = Элементы["ГруппаКолонкаПодробныхЭлементов" + ИмяЗоныВнимания + "__" + (СчетчикЭлементовСтроки + СчВыравнивающихЭлементов)];
					ГруппаЭлемент = Элементы.Добавить("Элемент__" + ИдентификаторЭлементаФормы + "__" + (СчетчикЭлементовСтроки + СчВыравнивающихЭлементов), Тип("ГруппаФормы"), ГруппаСтрокаЭлементов);
					ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаЭлемент.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
					ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
								
					ГруппаЭлемент.Заголовок = ЭлементМонитора.Показатель.Наименование;
					
					Если СтруктураНастроек.КоличествоКолонокМонитораПоказателей < 2
						ИЛИ СтруктураНастроек.КоличествоКолонокМонитораПоказателей > 4 Тогда
						ШиринаЭлемента = 30;
					ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 2 тогда
						ШиринаЭлемента = 29;
					ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 3 тогда
						ШиринаЭлемента = 29;
					ИначеЕсли СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 4 тогда
						ШиринаЭлемента = 28;
					КонецЕсли;
					
					// Размеры
					ГруппаЭлемент.Ширина = ШиринаЭлемента;
					ГруппаЭлемент.Высота = ВысотаЭлемента * МножительРазмера;
					ГруппаЭлемент.РастягиватьПоВертикали = Ложь;
					
					ГруппаСотрудник = ВертикальнаяГруппаСотрудника("Элемент__Сотрудник__" + ИдентификаторЭлементаФормы + "__" + (СчетчикЭлементовСтроки + СчВыравнивающихЭлементов), "", ГруппаЭлемент, ОтображениеОбычнойГруппы.СлабоеВыделение);
					
					// Наполним элемент контентом по шаблонам вариантов
					НарисоватьПустыеЭлементыПоказателя(ЭлементМонитора, ВариантОтображения, ГруппаСотрудник, ИдентификаторЭлементаФормы + "__" + (СчетчикЭлементовСтроки + СчВыравнивающихЭлементов));
					
				КонецЦикла;
				
			КонецЕсли;
			
			СчетчикЭлементовСтроки = СчетчикЭлементовСтроки + 1;
			
			Если СчетчикЭлементовСтроки > СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда 
				СчетчикЭлементовСтроки = 1;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вызывает процедуры добавления элементов формы для переданного варианта анализа
// 
// Параметры:
//	ВариантАнализа - СправочникСсылка.ркВариантыАнализаЦелевыхПоказателей - вариант, для которого будут созданы элементы формы
//	ИсточникДанных - Структура, содержащая результаты расчета для варианта анализа
//	ВариантОтображения - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа - кратко, диаграмма, таблица
//	ГруппаЭлементов - ГруппаФормы - группа, в которую будут добавлены элементы
//	ИдентификаторЭлементаФормы - Строка - строквый GUID варианта анализа("-" заменены на "_")
//
&НаСервере
Процедура НарисоватьЭлементыПоказателя(ИсточникДанных, ВариантОтображения, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	
	Если ВариантОтображения = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей.Диаграмма Тогда
		
		НарисоватьДиаграмму(ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы);
		
	ИначеЕсли ВариантОтображения = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей.Кратко Тогда
		
		НарисоватьКратко(ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы);
		
	ИначеЕсли ВариантОтображения = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей.Таблица Тогда
		
		НарисоватьТаблицу(ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы);
		
	КонецЕсли;
	
	ДобавитьКомандыВариантовАнализа(ИсточникДанных.Показатель, ИсточникДанных.Сотрудник, ГруппаЭлементов, ИдентификаторЭлементаФормы, ВариантОтображения);
	
КонецПроцедуры

&НаСервере
Процедура НарисоватьПустыеЭлементыПоказателя(ИсточникДанных, ВариантОтображения, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	
	Если ВариантОтображения = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей.Диаграмма Тогда
		
		НарисоватьПустуюДиаграмму(ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы);
		
	ИначеЕсли ВариантОтображения = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей.Кратко Тогда
		
		НарисоватьКратко(ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы);
		
	ИначеЕсли ВариантОтображения = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей.Таблица Тогда
		
		НарисоватьТаблицу(ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает группы формы для последующего добавления в них элементов формы вариантов анализа
// 
// Параметры:
//	СоставМонитора - Структура - содержит набор источников данных и обобщенную информацию об источниках
//
&НаСервере
Процедура СоздатьБазовуюСтруктуруЭлементовФормы(СоставМонитора)
	
	СтатистикаПоСтрокам = СоставМонитора.СтатистикаПоСтрокам;
	НаборИсточниковДанных = СоставМонитора.НаборИсточниковДанных;
	
	ВариантыОтображенияВариантовАнализа = Перечисления.CRM_ВариантыОтображенияАнализаПоказателей;
	ЗоныВнимания = Перечисления.CRM_ЗоныВниманияАнализаПоказателей;
	
	ГруппаПоказатели = ВертикальнаяГруппа("ГруппаПоказатели", НСтр("ru='Показатели'"), Элементы.ОсновнаяСтраницаМонитора);
	
	Если РежимАнализаВзаимосвязанных Тогда
	Иначе
		ГруппаПоказателиКратко = ВертикальнаяГруппа("ГруппаПоказателиКратко", НСтр("ru='Показатели (кратко)'"), ГруппаПоказатели);
		ГруппаПоказателиПодробно = ВертикальнаяГруппа("ГруппаПоказателиПодробно", НСтр("ru='Показатели (подробно)'"), ГруппаПоказатели);
		
		Если СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоВажности" Тогда
			
			// Заполним краткие показатели
			Если СтатистикаПоСтрокам.КритическоеСостояниеКратко > 0 Тогда
				
				ГруппаКритическоеСостояниеКратко = ГоризонтальнаяГруппа("ГруппаКритическоеСостояниеКратко", ЗоныВнимания.КритическоеСостояние, ГруппаПоказателиКратко, ИСТИНА); 
				ГруппаКритическоеСостояниеКратко.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
				ГруппаКритическоеСостояниеКратко.ОтображатьЗаголовок = Истина;
				ГруппаКритическоеСостояниеКратко.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
				
				ГруппаКритическоеСостояниеКратко.ШрифтЗаголовка = Новый Шрифт(,, Истина);
				ГруппаКритическоеСостояниеКратко.ЦветТекстаЗаголовка = WebЦвета.Кирпичный;
				
				ДобавитьГруппыКолонкиЭлементов(ГруппаКритическоеСостояниеКратко, ВариантыОтображенияВариантовАнализа.Кратко, 
				Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ЗоныВнимания.КритическоеСостояние));
				
			КонецЕсли;
			
			Если СтатистикаПоСтрокам.ВажноКратко > 0 Тогда
				
				ГруппаВажноКратко = ГоризонтальнаяГруппа("ГруппаВажноКратко", ЗоныВнимания.Важно, ГруппаПоказателиКратко, ИСТИНА); 
				ГруппаВажноКратко.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
				ГруппаВажноКратко.ОтображатьЗаголовок = Истина;
				ГруппаВажноКратко.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
				
				ГруппаВажноКратко.ШрифтЗаголовка = Новый Шрифт(,, Истина);
				ГруппаВажноКратко.ЦветТекстаЗаголовка = WebЦвета.ТемноОранжевый;
				
				ДобавитьГруппыКолонкиЭлементов(ГруппаВажноКратко, ВариантыОтображенияВариантовАнализа.Кратко, 
				Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ЗоныВнимания.Важно));
				
			КонецЕсли;
			
			Если СтатистикаПоСтрокам.КСведениюКратко > 0 Тогда
				
				ГруппаКСведениюКратко = ГоризонтальнаяГруппа("ГруппаКСведениюКратко", ЗоныВнимания.КСведению, ГруппаПоказателиКратко, ИСТИНА); 
				ГруппаКСведениюКратко.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
				ГруппаКСведениюКратко.ОтображатьЗаголовок = Истина;
				ГруппаКСведениюКратко.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
				
				ГруппаКСведениюКратко.ЦветТекстаЗаголовка = WebЦвета.ЦветМорскойВолны;
				
				ДобавитьГруппыКолонкиЭлементов(ГруппаКСведениюКратко, ВариантыОтображенияВариантовАнализа.Кратко, 
				Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ЗоныВнимания.КСведению));
				
			КонецЕсли;
			
			Если СтатистикаПоСтрокам.РассчитанныеСОшибкамиКратко > 0 Тогда
				
				ГруппаРассчитанныеСОшибкамиКратко = ГоризонтальнаяГруппа("ГруппаРассчитанныеСОшибкамиКратко", ЗоныВнимания.РассчитанныеСОшибками, ГруппаПоказателиКратко, ИСТИНА); 
				ГруппаРассчитанныеСОшибкамиКратко.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
				ГруппаРассчитанныеСОшибкамиКратко.ОтображатьЗаголовок = Истина;
				ГруппаРассчитанныеСОшибкамиКратко.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
				
				ГруппаРассчитанныеСОшибкамиКратко.ШрифтЗаголовка = Новый Шрифт(,, Истина);
				ГруппаРассчитанныеСОшибкамиКратко.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветОсобогоТекста;
				
				ДобавитьГруппыКолонкиЭлементов(ГруппаРассчитанныеСОшибкамиКратко, ВариантыОтображенияВариантовАнализа.Кратко, 
				Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ЗоныВнимания.РассчитанныеСОшибками));
				
			КонецЕсли;
			
			// Заполним диаграммы и таблицы
			Если СтатистикаПоСтрокам.КритическоеСостояниеПодробно > 0 Тогда
				
				ГруппаКритическоеСостояниеПодробно = ГоризонтальнаяГруппа("ГруппаКритическоеСостояниеПодробно", ЗоныВнимания.КритическоеСостояние, ГруппаПоказателиПодробно, ИСТИНА); 
				ГруппаКритическоеСостояниеПодробно.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
				ГруппаКритическоеСостояниеПодробно.ОтображатьЗаголовок = Истина;
				ГруппаКритическоеСостояниеПодробно.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
				ГруппаКритическоеСостояниеПодробно.РастягиватьПоГоризонтали = Истина;
				
				ГруппаКритическоеСостояниеПодробно.ШрифтЗаголовка = Новый Шрифт(,, Истина);
				ГруппаКритическоеСостояниеПодробно.ЦветТекстаЗаголовка = WebЦвета.Кирпичный;
				
				ДобавитьГруппыКолонкиЭлементов(ГруппаКритическоеСостояниеПодробно,, 
				Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ЗоныВнимания.КритическоеСостояние));
				
			КонецЕсли;
			
			Если СтатистикаПоСтрокам.ВажноПодробно > 0 Тогда
				
				ГруппаВажноПодробно = ГоризонтальнаяГруппа("ГруппаВажноПодробно", ЗоныВнимания.Важно, ГруппаПоказателиПодробно, ИСТИНА); 
				ГруппаВажноПодробно.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
				ГруппаВажноПодробно.ОтображатьЗаголовок = Истина;
				ГруппаВажноПодробно.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
				ГруппаВажноПодробно.РастягиватьПоГоризонтали = Истина;
				
				ГруппаВажноПодробно.ШрифтЗаголовка = Новый Шрифт(,, Истина);
				ГруппаВажноПодробно.ЦветТекстаЗаголовка = WebЦвета.ТемноОранжевый;
				
				ДобавитьГруппыКолонкиЭлементов(ГруппаВажноПодробно,, 
				Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ЗоныВнимания.Важно));
				
			КонецЕсли;
			
			Если СтатистикаПоСтрокам.КСведениюПодробно > 0 Тогда
				
				ГруппаКСведениюПодробно = ГоризонтальнаяГруппа("ГруппаКСведениюПодробно", ЗоныВнимания.КСведению, ГруппаПоказателиПодробно, ИСТИНА); 
				ГруппаКСведениюПодробно.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
				ГруппаКСведениюПодробно.ОтображатьЗаголовок = Истина;
				ГруппаКСведениюПодробно.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
				ГруппаКСведениюПодробно.РастягиватьПоГоризонтали = Истина;
				
				ГруппаКСведениюПодробно.ЦветТекстаЗаголовка = WebЦвета.ЦветМорскойВолны;
				
				ДобавитьГруппыКолонкиЭлементов(ГруппаКСведениюПодробно,, 
				Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ЗоныВнимания.КСведению));
				
			КонецЕсли;
			
			Если СтатистикаПоСтрокам.РассчитанныеСОшибкамиПодробно > 0 Тогда
				
				ГруппаРассчитанныеСОшибкамиПодробно = ГоризонтальнаяГруппа("ГруппаРассчитанныеСОшибкамиПодробно", ЗоныВнимания.РассчитанныеСОшибками, ГруппаПоказателиПодробно, ИСТИНА); 
				ГруппаРассчитанныеСОшибкамиПодробно.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
				ГруппаРассчитанныеСОшибкамиПодробно.ОтображатьЗаголовок = Истина;
				ГруппаРассчитанныеСОшибкамиПодробно.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
				ГруппаРассчитанныеСОшибкамиПодробно.РастягиватьПоГоризонтали = Истина;
				
				ГруппаРассчитанныеСОшибкамиПодробно.ШрифтЗаголовка = Новый Шрифт(,, Истина);
				ГруппаРассчитанныеСОшибкамиПодробно.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветОсобогоТекста;
				
				ДобавитьГруппыКолонкиЭлементов(ГруппаРассчитанныеСОшибкамиПодробно,, 
				Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ЗоныВнимания.РассчитанныеСОшибками));
				
			КонецЕсли;
			
		ИначеЕсли СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоКатегориямЦелей" Тогда
			
			НаборГруппИсточниковДанныхТекстовые = НаборИсточниковДанных.Скопировать();
			НаборГруппИсточниковДанныхТекстовые.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
			НаборГруппИсточниковДанныхТекстовые.Колонки.Добавить("КоличествоГруппСтрок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
			НаборГруппИсточниковДанныхТекстовые.ЗаполнитьЗначения(1, "Количество");
			НаборГруппИсточниковДанныхТекстовые.Свернуть("ВариантОтображения, Группа","Количество, КоличествоГруппСтрок");
			
			ОтборТекстовых = Новый Структура("ВариантОтображения", Перечисления.CRM_ВариантыОтображенияАнализаПоказателей.Кратко);
			НаборГруппИсточниковДанныхТекстовые = Отчеты.CRM_МониторЦелевыхПоказателей.ПрименитьКТаблицеУсловие(НаборГруппИсточниковДанныхТекстовые, ОтборТекстовых);
			
			Для Каждого ГруппаИсточникаДанных Из НаборГруппИсточниковДанныхТекстовые Цикл
				ГруппаИсточникаДанных.КоличествоГруппСтрок = ПолучитьКоличествоГруппСтрок(ГруппаИсточникаДанных.Количество);
				
			КонецЦикла;
			
			НаборГруппИсточниковДанныхПодробные = НаборИсточниковДанных.Скопировать();
			НаборГруппИсточниковДанныхПодробные.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
			НаборГруппИсточниковДанныхПодробные.Колонки.Добавить("КоличествоГруппСтрок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
			НаборГруппИсточниковДанныхПодробные.ЗаполнитьЗначения(1, "Количество");
			НаборГруппИсточниковДанныхПодробные.Свернуть("ВариантОтображения, Группа","Количество, КоличествоГруппСтрок");
			
			НаборГруппИсточниковДанныхПодробные = Отчеты.CRM_МониторЦелевыхПоказателей.ПрименитьКТаблицеУсловиеНЕ(НаборГруппИсточниковДанныхПодробные, ОтборТекстовых);
			НаборГруппИсточниковДанныхПодробные.Свернуть("Группа","Количество, КоличествоГруппСтрок");
			
			Для Каждого ГруппаИсточникаДанных Из НаборГруппИсточниковДанныхПодробные Цикл
				ГруппаИсточникаДанных.КоличествоГруппСтрок = ПолучитьКоличествоГруппСтрок(ГруппаИсточникаДанных.Количество);
				
			КонецЦикла;
			
			// Заполним текстовые показатели
			Для Каждого ГруппаТекстовогоПоказателя Из НаборГруппИсточниковДанныхТекстовые Цикл 
				ИмяГруппы = ГруппаТекстовогоПоказателя.Группа.Наименование;
				ИдентификаторГруппы = СтрЗаменить(Строка(ГруппаТекстовогоПоказателя.Группа.УникальныйИдентификатор()),"-","_");
				КоличествоГруппТекстовых = ГруппаИсточникаДанных.КоличествоГруппСтрок;
				
				ГруппаТекстовыеЗаголовок = ГоризонтальнаяГруппа("ГруппаТекстовыеЗаголовок__" + ИдентификаторГруппы, ИмяГруппы, ГруппаПоказателиКратко); 
				ГруппаТекстовыеЗаголовок.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
				ГруппаТекстовыеЗаголовок.ОтображатьЗаголовок = Истина;
				ГруппаТекстовыеЗаголовок.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
				
				ГруппаТекстовыеЗаголовок.ШрифтЗаголовка = Новый Шрифт(ГруппаТекстовыеЗаголовок.ШрифтЗаголовка,,,Истина);
				
				ДобавитьГруппыКолонкиЭлементов(ГруппаТекстовыеЗаголовок, ВариантыОтображенияВариантовАнализа.Кратко, 
				ИдентификаторГруппы);
				
			КонецЦикла;
			
			// Заполним таблицы и диаграммы
			Для Каждого ГруппаТабличногоИлиДиаграммногоПоказателя Из НаборГруппИсточниковДанныхПодробные Цикл 
				ИмяГруппы = ГруппаТабличногоИлиДиаграммногоПоказателя.Группа.Наименование;
				ИдентификаторГруппы = СтрЗаменить(Строка(ГруппаТабличногоИлиДиаграммногоПоказателя.Группа.УникальныйИдентификатор()),"-","_");
				КоличествоГруппТаблицИДиаграмм = ГруппаТабличногоИлиДиаграммногоПоказателя.КоличествоГруппСтрок;
				
				ГруппаТабличныеИДиаграммные = ГоризонтальнаяГруппа("ГруппаТабличныеИДиаграммные__" + ИдентификаторГруппы, ИмяГруппы, ГруппаПоказателиПодробно); 
				ГруппаТабличныеИДиаграммные.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
				ГруппаТабличныеИДиаграммные.ОтображатьЗаголовок = Истина;
				ГруппаТабличныеИДиаграммные.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение;
				ГруппаТабличныеИДиаграммные.РастягиватьПоГоризонтали = Истина;
				
				ГруппаТабличныеИДиаграммные.ШрифтЗаголовка = Новый Шрифт(,, Истина);
				
				ДобавитьГруппыКолонкиЭлементов(ГруппаТабличныеИДиаграммные,, 
				ИдентификаторГруппы);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ЗаполнитьСписокВыбораОтбораПоСтатусу()
	
	СписокВыбора = Элементы.ОтборСтатус.СписокВыбора;
	
	СписокВыбора.Добавить(0, "Все");
	СписокВыбора.Добавить(1, "Критические");
	СписокВыбора.Добавить(2, "Важные");
	СписокВыбора.Добавить(3, "Критические и важные");
	СписокВыбора.Добавить(4, "К сведению");
	СписокВыбора.Добавить(5, "Рассчитанные с ошибкой");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьОбработчикАвтообновления(ПериодАвтообновления = Неопределено)
	
	Если ПериодАвтообновления = Неопределено Тогда
		ПериодАвтообновления = СтруктураНастроек.ПериодАвтообновления * 60;
	КонецЕсли;
	
	Если ПериодАвтообновления > 0 Тогда
		ОтключитьОбработчикОжидания("ОбработчикОжидания_ОбновитьСоставМонитораКлиент");
		ПодключитьОбработчикОжидания("ОбработчикОжидания_ОбновитьСоставМонитораКлиент", ПериодАвтообновления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьОбработчикПервогоЗапуска()
	
	ПериодПервогоЗапуска = 0.1;
	
	ПодключитьОбработчикОжидания("ОбработчикОжидания_ОбновитьСоставМонитораКлиент", ПериодПервогоЗапуска, Истина);
	
КонецПроцедуры

&НаСервере 
Процедура ОбновлениеСтруктурыНастроекСервер()
	
	СтруктураНастроек = Отчеты.CRM_МониторЦелевыхПоказателей.ПолучитьНастройкиМонитораЦелевыхПоказателей();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСУчетомНеобходимостиУдаления(МассивСуществующихРеквизитов)
	
	НеудаляемыеРеквизиты = Новый СписокЗначений;
	НеудаляемыеРеквизиты.Добавить("ВариантыАнализаДляПечати");
	НеудаляемыеРеквизиты.Добавить("ВариантыАнализаСНарастающимИтогом");
	НеудаляемыеРеквизиты.Добавить("ВариантыАнализаСПодробностями");
	НеудаляемыеРеквизиты.Добавить("ДоступныеОтчеты");
	НеудаляемыеРеквизиты.Добавить("ОтборСтатус");
	НеудаляемыеРеквизиты.Добавить("ОтборСотрудник");	
	НеудаляемыеРеквизиты.Добавить("ОтборНачалоПериода");	
	НеудаляемыеРеквизиты.Добавить("ОтборКонецПериода");	
	НеудаляемыеРеквизиты.Добавить("ПредставлениеПериода");	
	НеудаляемыеРеквизиты.Добавить("ПериодичностьКонтроля");	
	НеудаляемыеРеквизиты.Добавить("ТекущийПользователь");
	НеудаляемыеРеквизиты.Добавить("РежимАнализаВзаимосвязанных");
	НеудаляемыеРеквизиты.Добавить("СоставМонитора");
	НеудаляемыеРеквизиты.Добавить("СоставМонитораНеопределен");
	НеудаляемыеРеквизиты.Добавить("СоставМонитораПустойПоОтбору");
	НеудаляемыеРеквизиты.Добавить("СтруктураНастроек");
	НеудаляемыеРеквизиты.Добавить("ТабличныеВариантыАнализаСИтогами");	
	НеудаляемыеРеквизиты.Добавить("ОтображаемыеПоказатели");	
	//длительные операции
	НеудаляемыеРеквизиты.Добавить("АдресХранилища");
	НеудаляемыеРеквизиты.Добавить("ИдентификаторЗадания");
	НеудаляемыеРеквизиты.Добавить("АдресаДинамическихПараметров");
	
	КоличествоНеУдаляемыхРеквизитов = НеудаляемыеРеквизиты.Количество();
	
	Для Счетчик = 1 По КоличествоНеУдаляемыхРеквизитов Цикл 
		МассивСуществующихРеквизитов.Удалить(0);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработчикОжидания_ОбновитьСоставМонитораКлиент()
	
	ОбновитьСоставМонитораКлиент();
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьСоставМонитора(ПолученныйСоставМонитора)
	
	Элементы.ПояснениеПриЗапуске.Видимость = Ложь;
	
	// Удалим ранее созданные программно элементы формы
	ГруппаПоказатели = Элементы.Найти("ГруппаПоказатели");
	Если НЕ ГруппаПоказатели = Неопределено Тогда
		Элементы.Удалить(ГруппаПоказатели);
	КонецЕсли;
	
	// Удалим ранее созданные программно реквизиты
	МассивСуществующихРеквизитов = ПолучитьРеквизиты();
	
	ОбработатьСУчетомНеобходимостиУдаления(МассивСуществующихРеквизитов);
	
	Если МассивСуществующихРеквизитов.Количество() > 0 Тогда
		МассивПутейУдаляемыхРеквизитов = Новый Массив;
		Для Каждого СуществующийРеквизит Из МассивСуществующихРеквизитов Цикл 
			МассивПутейУдаляемыхРеквизитов.Добавить(СуществующийРеквизит.Имя);
		КонецЦикла;
		ИзменитьРеквизиты(, МассивПутейУдаляемыхРеквизитов);
		
	КонецЕсли;
	
	// Удалим ранее созданные программно команды
	МассивУдаляемыхКоманд = Новый Массив;
	Для Каждого Команда Из Команды Цикл 
		ИмяКоманды = Команда.Имя;
		
		Если Найти(ИмяКоманды, "Обновить") 
			ИЛИ Найти(ИмяКоманды, "СводныйОтчет")
			ИЛИ Найти(ИмяКоманды, "Настроить") 
			ИЛИ Найти(ИмяКоманды, "ВыбратьПериод")   
			ИЛИ Найти(ИмяКоманды, "ПерейтиВперед")   
			ИЛИ Найти(ИмяКоманды, "ПерейтиНазад") Тогда
			Продолжить;     
			
		КонецЕсли;
		
		МассивУдаляемыхКоманд.Добавить(ИмяКоманды);
		
	КонецЦикла;
	
	Для Каждого УдаляемаяКоманда Из МассивУдаляемыхКоманд Цикл
		Команды.Удалить(Команды.Найти(УдаляемаяКоманда));
	КонецЦикла;
	
	// Получить список состава монитора (показатель, тип, позиция)
	Если РежимАнализаВзаимосвязанных Тогда 
		АдресДинамическихПараметров = АдресаДинамическихПараметров.Получить();
	КонецЕсли;
	
	//ЗаполнитьСводнуюИнформациюПоИсточникамДанных(ПолученныйСоставМонитора, АдресДинамическихПараметров);
		
	СоставМонитораНеопределен = (ПолученныйСоставМонитора.НаборИсточниковДанных = Неопределено);
	СоставМонитораПустойПоОтбору = (ПолученныйСоставМонитора.Пустой И Не СоставМонитораНеопределен);
	
	УстановитьВидимостьПредложенияДобавитьПоказателиВСоставМонитора(СоставМонитораНеопределен);
	УстановитьВидимостьСообщенияПустойРезультатОтбора(СоставМонитораПустойПоОтбору);
	
	Если НЕ СоставМонитораНеопределен И НЕ СоставМонитораПустойПоОтбору Тогда
		// Создать реквизиты формы по составу монитора
		// К имени элементов добавляется строка "__"+ID_Элемента, где
		// ID_Элемента = Показатель.УникальныйИдентификатор()
		НарисоватьЭлементыМонитора(ПолученныйСоставМонитора);
		
	КонецЕсли;
	
	ДоступныеОтчеты.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВариантОтчетаПоИдентификатору(Идентификатор)
	
	Перем ВариантОтчета;
	
	//ВариантОтчета = Отчеты.CRM_МониторЦелевыхПоказателейВызовСервера.ПолучитьСсылкуСправочникаПоИдентификатору("ВариантыОтчетов", Идентификатор);
	
	Возврат ВариантОтчета;
	
КонецФункции

&НаСервере
Функция ПолучитьВариантыОтчетовПоказателя(ВариантАнализа)
	Перем ВариантыОтчетовПоказателя;
	
	ВариантыОтчетовПоказателя = Новый СписокЗначений;
	
	ВариантыОтчетовПоказателя.Добавить("ОтчетРасшифровкаПоказателя", "Расшифровка показателя");	
	
	Возврат ВариантыОтчетовПоказателя;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьОтчет(Команда)
	
	Идентификатор = Сред(Команда.Имя, 15, 36);
	УникальныйИдентификаторПользователя = Новый УникальныйИдентификатор(СтрЗаменить(Сред(Команда.Имя, 15, 36), "_", "-"));
	Пользователь = ЭлементСправочникаПоGUID("Пользователи", УникальныйИдентификаторПользователя);
	УникальныйИдентификаторПоказателя = Новый УникальныйИдентификатор(СтрЗаменить(Сред(Команда.Имя, 53, 36), "_", "-"));
	Показатель = ЭлементСправочникаПоGUID("CRM_ШаблоныКлючевыхПоказателей", УникальныйИдентификаторПоказателя);
	Если СтрНайти(Команда.Имя, "ОтчетРасшифровкаПоказателя") > 0 Тогда
		МассивПользователи = Новый Массив();
		МассивПользователи.Добавить(Пользователь);
		
		НачалоКонецПериода = Новый Структура("НачалоПериода, КонецПериода",ОтборНачалоПериода,ОтборКонецПериода);
		CRM_УправлениеЦелевымиПоказателямиКлиент.ОткрытьРасшифровкуПоказателя(Показатель, МассивПользователи, НачалоКонецПериода);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Функция ЭлементСправочникаПоGUID(ИмяСправочника, GUID)
	
	Возврат Справочники[ИмяСправочника].ПолучитьСсылку(GUID)
	
КонецФункции

&НаСервере 
Функция ПолучитьДиаграммуПриОшибкахРасчета(ДиаграммаПриОшибках, ТекстОшибки, ЦветТекста)
	
	// Установим заголовок с ошибкой
	ДиаграммаПриОшибках.ОбластьЗаголовка.Верх = 0;
	ДиаграммаПриОшибках.ОбластьЗаголовка.Лево = 0;
	ДиаграммаПриОшибках.ОбластьЗаголовка.Низ = 1;
	ДиаграммаПриОшибках.ОбластьЗаголовка.Право = 1;
	ДиаграммаПриОшибках.ОбластьЗаголовка.Текст = ТекстОшибки;
	ДиаграммаПриОшибках.ОбластьЗаголовка.ЦветТекста = ЦветТекста;
	
	Возврат ДиаграммаПриОшибках;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторВариантаОтчета(ИмяЭлемента)
	
	Перем Идентификатор;
	
	Идентификатор = "";
	
	ДваИдентификатора = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - Найти(ИмяЭлемента, "__") - 1);
	Идентификатор = Прав(ДваИдентификатора, Найти(ДваИдентификатора, "__") - 1); 
	
	Возврат Идентификатор;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторДинамическогоПараметра(ИмяЭлемента)
	
	Перем Идентификатор;
	
	Идентификатор = "";
	
	ДваИдентификатора = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - Найти(ИмяЭлемента, "__") - 1);
	Идентификатор = Прав(ДваИдентификатора, СтрДлина(ДваИдентификатора) - Найти(ДваИдентификатора, "__") - 1); 
	
	Возврат Идентификатор;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторЭлементаПоИмениБезПозиции(ИмяЭлемента)
	
	Перем Идентификатор;
	
	Идентификатор = "";
	
	ИдентификаторСПозицией = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - Найти(ИмяЭлемента, "__") - 1);
	Если Найти(ИдентификаторСПозицией, "__") > 0 Тогда
		Идентификатор = Лев(ИдентификаторСПозицией, Найти(ИдентификаторСПозицией, "__") - 1); 
	Иначе
		Идентификатор = ИдентификаторСПозицией
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторЭлементаПоИмениСПозицией(ИмяЭлемента)
	
	Перем Идентификатор;
	
	Идентификатор = "";
	
	Идентификатор = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - Найти(ИмяЭлемента, "__") - 1);
	
	Возврат Идентификатор;
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоГруппСтрок(КоличествоВыводимыхЭлементов, МножительРазмера = 1)
	
	Перем КоличествоГруппСтрок;
	
	КоличествоГруппСтрок = 0;
	
	КоличествоНеделимыхЭлементовВСтроке = СтруктураНастроек.КоличествоКолонокМонитораПоказателей/МножительРазмера;
	
	ПредварительноеКоличествоСтрок = КоличествоВыводимыхЭлементов/?(КоличествоНеделимыхЭлементовВСтроке < 1, 1, Окр(КоличествоНеделимыхЭлементовВСтроке, 0, РежимОкругления.Окр15как10));
	ПредварительноеЦелоеКоличествоСтрок = Цел(ПредварительноеКоличествоСтрок);
	ПредварительноеДробноеКоличествоСтрок = ПредварительноеКоличествоСтрок - ПредварительноеЦелоеКоличествоСтрок;
	
	Если ПредварительноеДробноеКоличествоСтрок > 0 Тогда
		КоличествоГруппСтрок = ПредварительноеЦелоеКоличествоСтрок + 1;
		
	Иначе
		КоличествоГруппСтрок = ПредварительноеЦелоеКоличествоСтрок;
		
	КонецЕсли;
	
	Если КоличествоГруппСтрок = 0 И НЕ КоличествоВыводимыхЭлементов = 0 Тогда
		КоличествоГруппСтрок = 1;
	КонецЕсли;
	
	Возврат КоличествоГруппСтрок;
	
КонецФункции

&НаСервере
Функция ПолучитьСвойстваВариантаОтчета(ВариантОтчета)
	
	СвойстваВариантаОтчета = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваВариантаОтчета = Новый Структура("КлючВарианта, КлючОбъекта", ВариантОтчета.КлючВарианта, ВариантОтчета.КлючОбъекта);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СвойстваВариантаОтчета;
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуПеречисленияПоИдентификатору(ИмяОбъекта, Идентификатор)
	
	Перем ИскомаяСсылка;
	
	ИскомаяСсылка = Перечисления[ИмяОбъекта][Идентификатор];
	
	Возврат ИскомаяСсылка;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЧистоеИмяКоманды(ИмяКоманды)
	
	Перем ЧистоеИмяКоманды;
	
	ЧистоеИмяКоманды = Лев(ИмяКоманды, Найти(ИмяКоманды, "__") - 1);
	
	Возврат ЧистоеИмяКоманды;
	
КонецФункции

&НаСервере 
Процедура УстановитьВидимостьПредложенияДобавитьПоказателиВСоставМонитора(Видимость)
	
	Элементы.ГруппаПриПустомСоставеМонитора.Видимость = Видимость;
	Элементы.ФормаСводныйОтчет.Доступность = НЕ Видимость;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьВидимостьСообщенияПустойРезультатОтбора(Видимость)
	
	Элементы.ГруппаПриПустомРезультатеОтбора.Видимость = Видимость;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Длительные операции

&НаСервере
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) 
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСоставМонитораКлиент(ПринудительноОбновитьДанные = Ложь)
	                                                                                                    
	Если РежимАнализаВзаимосвязанных Тогда                                                                 
		ПараметрыСоставаМонитора = Новый Структура("РежимАнализаВзаимосвязанных, ВидПоиска, СвойстваВариантаАнализа,
													|АдресаДинамическихПараметров, ОтборСтатус, ОтборСотрудник, ВыбранныеШаблоныПоказателей,
													|ОтборНачалоПериода, ОтборКонецПериода, УчитыватьВариантыОтображения, ОтборПоТекущемуПериоду");
		ПараметрыСоставаМонитора.РежимАнализаВзаимосвязанных  = РежимАнализаВзаимосвязанных;
		ПараметрыСоставаМонитора.ВидПоиска 					  = Параметры.ВидПоиска;
		ПараметрыСоставаМонитора.СвойстваВариантаАнализа 	  = Параметры.ИдентификаторВариантаАнализа;
		ПараметрыСоставаМонитора.АдресаДинамическихПараметров = АдресаДинамическихПараметров;	
		ПараметрыСоставаМонитора.ОтборСтатус 				  = ОтборСтатус;
		ПараметрыСоставаМонитора.ОтборСотрудник				  = ОтборСотрудник;
		ПараметрыСоставаМонитора.ОтборНачалоПериода			  = ОтборНачалоПериода;
		ПараметрыСоставаМонитора.ОтборКонецПериода			  = ОтборКонецПериода;
		ПараметрыСоставаМонитора.УчитыватьВариантыОтображения = Истина;
		ПараметрыСоставаМонитора.ВыбранныеШаблоныПоказателей = СтруктураНастроек.ВыбранныеШаблоныПоказателей;
	Иначе
		ПараметрыСоставаМонитора = Новый Структура("РежимАнализаВзаимосвязанных, ОтборВариантовАнализа, ПринудительноОбновитьДанные,
													|СтруктураНастроек, ОтборСтатус, ОтборСотрудник, ВыбранныеШаблоныПоказателей, 
													|ОтборНачалоПериода, ОтборКонецПериода, УчитыватьВариантыОтображения, ОтборПоТекущемуПериоду");
		ПараметрыСоставаМонитора.РежимАнализаВзаимосвязанных  = РежимАнализаВзаимосвязанных;
		ПараметрыСоставаМонитора.ОтборВариантовАнализа 		  = Неопределено;
		ПараметрыСоставаМонитора.ПринудительноОбновитьДанные  = ПринудительноОбновитьДанные;
		ПараметрыСоставаМонитора.СтруктураНастроек 			  = СтруктураНастроек;
		ПараметрыСоставаМонитора.ОтборСтатус 				  = ОтборСтатус;
		ПараметрыСоставаМонитора.ОтборСотрудник				  = ОтборСотрудник;
		ПараметрыСоставаМонитора.ОтборНачалоПериода			  = ОтборНачалоПериода;
		ПараметрыСоставаМонитора.ОтборКонецПериода			  = ОтборКонецПериода;
		ПараметрыСоставаМонитора.УчитыватьВариантыОтображения = Истина;
		ПараметрыСоставаМонитора.ВыбранныеШаблоныПоказателей = СтруктураНастроек.ВыбранныеШаблоныПоказателей;
	КонецЕсли;
	
	ПараметрыСоставаМонитора.ОтборПоТекущемуПериоду = Ложь;
	
	ЗаданиеВыполнено = ЗаполнитьОтчетНаСервере(ПараметрыСоставаМонитора);
	Если ЗаданиеВыполнено Тогда
		Возврат;
	КонецЕсли;
		
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
			
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОтчетНаСервере(ПараметрыСоставаМонитора)
			
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ЗаданиеВыполнено = Ложь; 
	
	// В файловом режиме работы выполняем операцию непосредственно (синхронно).
		
	Отчеты.CRM_МониторЦелевыхПоказателей.ПодготовитьДанныеДляЗаполнения(ПараметрыСоставаМонитора, АдресХранилища);
		
	ЗагрузитьПодготовленныеДанные();
	
	Возврат Истина;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Возврат;
		КонецЕсли;
		
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 
									ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
									Истина);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Монитор") Тогда
		СформированныйСостав = Результат.Монитор;
		ОбновитьСоставМонитора(СформированныйСостав);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСотрудникПриИзменении(Элемент)
	ОбновитьСоставМонитораКлиент();	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", ОтборНачалоПериода, ОтборКонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.CRM_ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатВыбора, "ПредставлениеПериода,ПериодичностьКонтроля");
	
	ОтборНачалоПериода = РезультатВыбора.НачалоПериода;
	ОтборКонецПериода  = РезультатВыбора.КонецПериода;
	
	ОбновитьСоставМонитораКлиент();	
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьПериод(Множетель)

	Если ПериодичностьКонтроля = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		ОтборНачалоПериода = ДобавитьМесяц(ОтборНачалоПериода, Множетель);	
		ОтборКонецПериода  = КонецМесяца(ДобавитьМесяц(КонецМесяца(ОтборКонецПериода) , Множетель));	
		
	ИначеЕсли ПериодичностьКонтроля = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
		ОтборНачалоПериода = ДобавитьМесяц(ОтборНачалоПериода, Множетель * 3);	
		ОтборКонецПериода  = КонецМесяца(ДобавитьМесяц(ОтборКонецПериода , Множетель * 3));	
		
	КонецЕсли;	
	
	ПредставлениеПериода = ПредставлениеПериода(ОтборНачалоПериода, ОтборКонецПериода, "L = ru_RU");

	ОбновитьСоставМонитораКлиент();	
	
КонецПроцедуры // СдвинутьПериод()

&НаКлиенте
Процедура ПерейтиНазад(Команда)
	
	СдвинутьПериод(-1);
		
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВперед(Команда)
	
	СдвинутьПериод(1);
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиПоказателей()
	ОтображаемыеПоказатели.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ИспользуемыеКлючевыеПоказатели.Показатель
	|ИЗ
	|	РегистрСведений.CRM_ИспользуемыеКлючевыеПоказатели КАК CRM_ИспользуемыеКлючевыеПоказатели
	|ГДЕ
	|	CRM_ИспользуемыеКлючевыеПоказатели.Согласовано
	|	И CRM_ИспользуемыеКлючевыеПоказатели.Менеджер = &Менеджер
	|	И CRM_ИспользуемыеКлючевыеПоказатели.Период = &Период";
	Запрос.УстановитьПараметр("Менеджер", ТекущийПользователь);
	Запрос.УстановитьПараметр("Период", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтображаемыеПоказатели.Добавить(Выборка.Показатель);
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура КнопкаШаблоныПоказателейНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_ШаблоныКлючевыхПоказателей.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура КнопкаУстановкаПоказателейНажатие(Элемент)
	ОткрытьФорму("Обработка.CRM_АРМ_УправлениеПоказателями.Форма.ФормаИспользуемыеПоказатели");
КонецПроцедуры

