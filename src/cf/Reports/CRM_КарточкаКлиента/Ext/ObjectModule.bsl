#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

&НаСервере
Процедура СформироватьОтчет(ТаблицаОтчета, Партнер)  Экспорт
	
	Макет = ПолучитьМакет("КарточкаКлиента");
	
	СоответствиеЗапросыДанные = Новый Соответствие;
	МассивРезультатовЗапросовПоПартнеру = ВыполнитьПакетЗапросовПоПартнеру(Партнер,СоответствиеЗапросыДанные);
	
	Если СоответствиеЗапросыДанные["ДанныеПартнера"] <> Неопределено Тогда
		ВывестиДанныеПартнера(МассивРезультатовЗапросовПоПартнеру[0],?(СоответствиеЗапросыДанные["ПервичныйИнтерес"]=Неопределено,Неопределено,МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ПервичныйИнтерес"]]),ТаблицаОтчета,Макет);
	КонецЕсли;
	
	Если СоответствиеЗапросыДанные["ДанныеДляБухгалтерии"] <> Неопределено Тогда
		ВывестиДанныеДляБухгалтерии(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ДанныеДляБухгалтерии"]],ТаблицаОтчета,Макет);
	КонецЕсли;
	
	Если СоответствиеЗапросыДанные["ДанныеПартнера"] <> Неопределено Тогда
		ВывестиДополнительныеДанные(?(СоответствиеЗапросыДанные["ПервичныйИнтерес"]=Неопределено,Неопределено,МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ПервичныйИнтерес"]]), МассивРезультатовЗапросовПоПартнеру[1], ТаблицаОтчета,Макет);
	КонецЕсли;
	
	Если ЭтотОбъект.Контакты Тогда
		Если СоответствиеЗапросыДанные["КонтактнаяИнформацияПартнера"] <> Неопределено Тогда
			ВывестиДанныеОКонтактнойИнформацииПартнера(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["КонтактнаяИнформацияПартнера"]],ТаблицаОтчета,Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["КонтактныеЛица"] <> Неопределено Тогда
			ВывестиДанныеОКонтактныхЛицах(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["КонтактныеЛица"]],ТаблицаОтчета,Макет);
		КонецЕсли;
	КонецЕсли;
	
	Если СоответствиеЗапросыДанные["ДоступныеДоговора"] <> Неопределено Тогда
		ВывестиДанныеОДоступныхДоговорах(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ДоступныеДоговора"]],ТаблицаОтчета, Макет);
	КонецЕсли;
	Если ЭтотОбъект.Аналитика Тогда
		Если СоответствиеЗапросыДанные["СегментыПартнера"] <> Неопределено Тогда
			ВывестиДанныеОСегментахПартнера(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["СегментыПартнера"]],ТаблицаОтчета, Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["Обороты"] <> Неопределено Тогда
			ВывестиДанныеОбороты(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["Обороты"]],ТаблицаОтчета, Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["КоммерческиеПредложения"] <> Неопределено Тогда
			ВывестиДанныеОДействующихКоммерческихПредложениях(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["КоммерческиеПредложения"]],ТаблицаОтчета, Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["ТекущиеСделки"] <> Неопределено Тогда
			ВывестиДанныеОТекущихСделкахСКлиентом(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ТекущиеСделки"]],ТаблицаОтчета,Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["ТекущиеБизнесПроцессы"] <> Неопределено Тогда
			ВывестиДанныеОТекущихБизнесПроцессах(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ТекущиеБизнесПроцессы"]],ТаблицаОтчета,Макет);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтотОбъект.Взаимосвязи Тогда
		Если СоответствиеЗапросыДанные["ТекущиеСвязи"] <> Неопределено Тогда
			ВывестиДанныеОСвязях(CRM_МетодыМодулейМенеджеровРегистров.ПолучитьТаблицуСвязейПартнера(Партнер),ТаблицаОтчета,Макет,Партнер);
		КонецЕсли;
	КонецЕсли;
	
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ТаблицаОтчета.ВывестиГоризонтальныйРазделительСтраниц();
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаПоПартнеру(СоответствиеЗапросыДанные)
	
	СоответствиеЗапросыДанные.Вставить("ДанныеПартнера",0);
	
	Возврат "ВЫБРАТЬ
	|	Партнеры.Наименование,
	|	ВЫБОР
	|		КОГДА Партнеры.БизнесРегион = ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка)
	|			ТОГДА &НеУказан
	|		ИНАЧЕ Партнеры.БизнесРегион
	|	КОНЕЦ КАК БизнесРегион,
	|	ВЫБОР
	|		КОГДА Партнеры.ОсновнойМенеджер = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА &НеУказан
	|		ИНАЧЕ Партнеры.ОсновнойМенеджер
	|	КОНЕЦ КАК ОсновнойМенеджер,
	|	Партнеры.ДатаРегистрации КАК ДатаРегистрации,
	|	Партнеры.Комментарий,
	|	Партнеры.CRM_ОсновнаяОтрасль,
	|	Партнеры.CRM_ТипОтношенийПредставление
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыДополнительныеРеквизиты.Свойство,
	|	ПартнерыДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
	|ГДЕ
	|	ПартнерыДополнительныеРеквизиты.Ссылка = &Партнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ПолучитьТекстЗапросаПоПервичномуИнтересу(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.РегистрыСведений.ИсточникиПервичногоИнтереса) ИЛИ
		(НЕ ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес"))Тогда
		Возврат "";
	КонецЕсли; 
	
	СоответствиеЗапросыДанные.Вставить("ПервичныйИнтерес",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ
	        |	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса,
	        |	ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса
	        |ИЗ
	        |	РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних(, Партнер = &Партнер) КАК ИсточникиПервичногоИнтересаСрезПоследних
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|";
	
КонецФункции

Функция ПолучитьТекстЗапросаОКонтактнойИнформацииПартнера(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	СоответствиеЗапросыДанные.Вставить("КонтактнаяИнформацияПартнера",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Представление КАК Представление,
	|	ПартнерыКонтактнаяИнформация.Вид КАК ВидКонтактнойИнформации
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции 

Функция ПолучитьТекстЗапросаОКонтактныхЛицах(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.КонтактныеЛицаПартнеров) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("КонтактныеЛица",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛицаПартнеров.Наименование,
	|	КонтактныеЛицаПартнеров.ДатаРегистрацииСвязи,
	|	КонтактныеЛицаПартнеров.CRM_РольКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.CRM_Должность,			
	|	КонтактныеЛицаПартнеров.КонтактнаяИнформация.(
	|		Вид,
	|		Представление
	|	),
	|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец = &Партнер
	|	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ПолучитьТекстЗапросаДляБухгалтерии(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.Партнеры) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("ДанныеДляБухгалтерии",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	Партнеры.НаименованиеПолное,
	        |	Партнеры.ЮрФизЛицо КАК ВидПартнера,
	        |	Партнеры.CRM_ИНН,
	        |	Партнеры.CRM_КПП,
	        |	Партнеры.ДоговорПоУмолчанию
	        |ИЗ
	        |	Справочник.Партнеры КАК Партнеры
	        |ГДЕ
	        |	Партнеры.Ссылка = &Партнер
	        |	И (НЕ Партнеры.ПометкаУдаления)
	        |ИТОГИ ПО
	        |	ОБЩИЕ
			|;
			|/////////////////////////////////////////////
			|";
	
КонецФункции

Функция ПолучитьТекстЗапросаОТекущихСделкахСКлиентом(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПокупателями)Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("ТекущиеСделки",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	РасчетыСПокупателямиОстаткиИОбороты.Заказ КАК Сделка,
	        |	РасчетыСПокупателямиОстаткиИОбороты.Заказ.СуммаДокумента КАК СуммаДокумента,
	        |	РасчетыСПокупателямиОстаткиИОбороты.Заказ.СуммаОстатокОплата КАК СуммаОстатокОплата,
	        |	РасчетыСПокупателямиОстаткиИОбороты.Заказ.СуммаОстатокОтгрузка КАК СуммаОстатокОтгрузка,
	        |	РасчетыСПокупателямиОстаткиИОбороты.Заказ.Валюта КАК ВалютаДокумента,
	        |	РасчетыСПокупателямиОстаткиИОбороты.Заказ.Ответственный КАК Ответственный,
	        |	РасчетыСПокупателямиОстаткиИОбороты.Заказ.Номер КАК Номер,
	        |	РасчетыСПокупателямиОстаткиИОбороты.Заказ.Дата КАК Дата,
	        |	РасчетыСПокупателямиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаОстаток,
	        |	РасчетыСПокупателямиОстаткиИОбороты.СуммаРасход КАК СуммаРасход,
	        |	РасчетыСПокупателямиОстаткиИОбороты.СуммаПриход КАК СуммаПриход,
	        |	Константы.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
	        |ИЗ
	        |	РегистрНакопления.РасчетыСПокупателями.ОстаткиИОбороты(, , , , Контрагент = &Партнер) КАК РасчетыСПокупателямиОстаткиИОбороты,
	        |	Константы КАК Константы
	        |ГДЕ
	        |	РасчетыСПокупателямиОстаткиИОбороты.СуммаКонечныйОстаток <> 0
	        |ИТОГИ
	        |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Сделка),
	        |	СУММА(СуммаОстаток),
	        |	СУММА(СуммаРасход),
	        |	СУММА(СуммаПриход)
	        |ПО
	        |	ВалютаУправленческогоУчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
			
	// йцу ="
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	СделкиСКлиентами.Наименование КАК Наименование,
	//|	СделкиСКлиентами.Ответственный КАК Менеджер,
	//|	СделкиСКлиентами.ПотенциальнаяСуммаПродажи КАК ПотенциальнаяСуммаПродажи,
	//|	СтатистикаСделокСКлиентами.ЭтапПроцесса КАК ТекущийЭтап,
	//|	СделкиСКлиентами.Ссылка КАК Ссылка,
	//|	Константы.ВалютаУправленческогоУчета КАК Валюта
	//|ИЗ
	//|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаСделокСКлиентами КАК СтатистикаСделокСКлиентами
	//|		ПО (СтатистикаСделокСКлиентами.Сделка = СделкиСКлиентами.Ссылка),
	//|	Константы КАК Константы
	//|ГДЕ
	//|	СделкиСКлиентами.Партнер = &Партнер
	//|	И (НЕ СделкиСКлиентами.ПометкаУдаления)
	//|	И СделкиСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделок.ВРаботе)
	//|	И ЕСТЬNULL(СтатистикаСделокСКлиентами.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	//|ИТОГИ
	//|	СУММА(ПотенциальнаяСуммаПродажи),
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка),
	//|	МАКСИМУМ(ВалютаУправленческогоУчета)
	//|ПО
	//|	СделкиСКлиентами.Партнер
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|";
	//
КонецФункции 

Функция ПолучитьТекстЗапросаОДействующихКоммерческихПредложениях(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Документы.КоммерческоеПредложениеКлиенту)  Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("КоммерческиеПредложения",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;

	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.СуммаДокумента КАК СуммаДокумента,
	|	Документ.Валюта КАК Валюта,
	|	Документ.Менеджер КАК Ответственный
	|
	|
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК Документ
	|ГДЕ
//	|	Документ.Проведен
	|	Документ.Партнер = &Партнер
	|	И Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Отменено)
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка),
	|	СУММА(СуммаДокумента)
	|ПО
	|	ОБЩИЕ,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ПолучитьТекстЗапросаОСегментахПартнера(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.РегистрыСведений.ПартнерыСегмента) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("СегментыПартнера",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	 Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	СегментыПартнеров.Наименование,
	 |	СегментыПартнеров.Ответственный,
	 |	СегментыПартнеров.Ссылка КАК Ссылка,
	 |	СегментыПартнеров.Описание
	 |ИЗ
	 |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СегментыПартнеров КАК СегментыПартнеров
	 |		ПО ПартнерыСегмента.Сегмент = СегментыПартнеров.Ссылка
	 |ГДЕ
	 |	ПартнерыСегмента.Партнер = &Партнер
	 |	И (НЕ СегментыПартнеров.ПометкаУдаления)
	 |ИТОГИ
	 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	 |ПО
	 |	ОБЩИЕ
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |";

КонецФункции 

Функция ПолучитьТекстЗапросаОбороты(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если (НЕ ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.CRM_Продажи)) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("Обороты",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	CRM_ПродажиОбороты.СтоимостьОборот КАК СуммаВыручкиОборот,
	        |	ГОД(CRM_ПродажиОбороты.Период) КАК Период,
	        |	Константы.ВалютаУправленческогоУчета КАК Валюта
	        |ИЗ
	        |	РегистрНакопления.CRM_Продажи.Обороты(, , Год, Партнер = &Партнер) КАК CRM_ПродажиОбороты,
	        |	Константы КАК Константы
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Период
	        |ИТОГИ
	        |	СУММА(СуммаВыручкиОборот)
	        |ПО
	        |	Валюта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
	
	
КонецФункции

Функция ПолучитьТекстЗапросаОДоступныхДоговорах(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("ДоступныеДоговора",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ
	        |	Договоры.Ссылка КАК Ссылка,
	        |	Договоры.Наименование,
	        |	Договоры.НомерДоговора,
	        |	Договоры.ДатаДоговора,
	        |	Договоры.Организация,
	        |	Договоры.ВалютаРасчетов
	        |ИЗ
	        |	Справочник.ДоговорыКонтрагентов КАК Договоры
	        |ГДЕ
	        |	Договоры.Владелец = &Партнер
	        |	И (НЕ Договоры.ПометкаУдаления)
	        |ИТОГИ
	        |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	        |ПО
	        |	ОБЩИЕ
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|";
	
КонецФункции 

Функция ПолучитьТекстЗапросаОТекущихБизнесПроцессах(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Задачи.ЗадачаИсполнителя)Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("ТекущиеБизнесПроцессы",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	|	ЗадачаИсполнителя.CRM_ТочкаМаршрута КАК ТочкаМаршрута,
	|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцессКоличество,
	|	ЗадачаИсполнителя.БизнесПроцесс.Партнер КАК Партнер,
	|	ЗадачаИсполнителя.БизнесПроцесс.Дата КАК Дата
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.БизнесПроцесс.Партнер = &Партнер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ БизнесПроцессКоличество)
	|ПО
	|	Партнер,
	|	БизнесПроцесс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ПолучитьТекстЗапросаОСвязях(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.РегистрыСведений.СвязиМеждуПартнерами)Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("ТекущиеСвязи",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "";
	//Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ПервыйПартнер	КАК ПервыйПартнер,
	//|	ВторойПартнер	КАК ВторойПартнер,
	//|	ВидСвязи	КАК ВидСвязи,
	//|	ВЫРАЗИТЬ(Комментарий КАК СТРОКА(200)) КАК Комментарий
	//|ИЗ
	//|	РегистрСведений.СвязиМеждуПартнерами
	//|ГДЕ
	//|	ПервыйПартнер = &Партнер ИЛИ ВторойПартнер = &Партнер
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|";
	
КонецФункции

Функция ВыполнитьПакетЗапросовПоПартнеру(Партнер,СоответствиеЗапросыДанные)
	
	Запрос = Новый Запрос;
	НомерПоследнегоПакета = 1;
	
	Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаПоПартнеру(СоответствиеЗапросыДанные);
	Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаПоПервичномуИнтересу(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
	
	Если Контакты Тогда
	//	
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаОКонтактнойИнформацииПартнера(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаОКонтактныхЛицах(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
	//	
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаДляБухгалтерии(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
	//
	//	
	Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаОДоступныхДоговорах(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
	Если Аналитика Тогда
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаОСегментахПартнера(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаОДействующихКоммерческихПредложениях(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаОбороты(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаОТекущихСделкахСКлиентом(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаОТекущихБизнесПроцессах(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
	КонецЕсли;
	
	Если Взаимосвязи Тогда
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаОСвязях(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Партнер",Партнер);
	Запрос.УстановитьПараметр("НеУказан",НСтр("ru='не указан'"));
	Запрос.УстановитьПараметр("ТекущаяДата",CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	Запрос.УстановитьПараметр("СтрокаМаркетинговоеМероприятие",НСтр("ru='Маркетинговые мероприятия'"));
	Запрос.УстановитьПараметр("СтрокаПроект",НСтр("ru='Проекты'"));
	Запрос.УстановитьПараметр("СтрокаБезОграничения",НСтр("ru='без ограничения'"));
	Запрос.УстановитьПараметр("СтрокаТиповое",НСтр("ru='Типовое'"));
	Запрос.УстановитьПараметр("СтрокаИндивидуальное",НСтр("ru='Индивидуальное'"));
	Запрос.УстановитьПараметр("СтрокаПисьмоИсходящее",НСтр("ru='Исходящее письмо'"));
	Запрос.УстановитьПараметр("СтрокаБезОграничения",НСтр("ru='без ограничений'"));
	Запрос.УстановитьПараметр("СтрокаПисьмоВходящее",НСтр("ru='Входящее письмо'"));
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Процедура ВывестиДанныеПартнера(РезультатЗапросаПоРеквизитамПартнера,РезультатЗапросаПервичныйИнтерес,ТаблицаОтчета,Макет)
	
	ПустаяСтрокаДок = Макет.ПолучитьОбласть("ПустаяСтрока|ШиринаДокумента");
	ПустаяСтрокаКол = Макет.ПолучитьОбласть("ПустаяСтрока|КолонкаДокумента");
	ТабДок = Новый ТабличныйДокумент;
	ВыборкаРеквизитыПартнера = РезультатЗапросаПоРеквизитамПартнера.Выбрать();
	ВыборкаРеквизитыПартнера.Следующий();
	ТабДок.Вывести(ПустаяСтрокаДок);
	Область = Макет.ПолучитьОбласть("ЗаголовокОтчета|ШиринаДокумента");
	Область.Параметры.НаименованиеПартнера = ВыборкаРеквизитыПартнера.Наименование;
	Область.Параметры.Дата = Формат(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),"ДФ=dd.MM.yy");
	ТабДок.Вывести(Область);
	ТабДок.Вывести(ПустаяСтрокаДок);
	
	Область = Макет.ПолучитьОбласть("ДанныеПартнера|ШиринаДокумента");
	ТабДок.НачатьГруппуСтрок("ДанныеПартнера");
	ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаРеквизитыПартнера);
	Область.Параметры.ДатаРегистрации = Формат(ВыборкаРеквизитыПартнера.ДатаРегистрации,"ДФ=dd.MM.yy");
	Область.Параметры.ТипОтношений = ВыборкаРеквизитыПартнера.CRM_ТипОтношенийПредставление;
	Область.Параметры.БизнесРегион = ВыборкаРеквизитыПартнера.БизнесРегион;
	Область.Параметры.Отрасль = ВыборкаРеквизитыПартнера.CRM_ОсновнаяОтрасль;
	ТабДок.ЗакончитьГруппуСтрок();
	ТабДок.Вывести(Область);
	
	ВыборкаПервичныйИнтерес = Неопределено;
	Если РезультатЗапросаПервичныйИнтерес <> Неопределено И НЕ РезультатЗапросаПервичныйИнтерес.Пустой() Тогда
		ВыборкаПервичныйИнтерес = РезультатЗапросаПервичныйИнтерес.Выбрать();
		ВыборкаПервичныйИнтерес.Следующий();
		Область = Макет.ПолучитьОбласть("КаналПервичногоИнтереса|ШиринаДокумента");
		ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаПервичныйИнтерес);
		ТабДок.Вывести(Область);
	КонецЕсли;
	ТабДок.Вывести(ПустаяСтрокаКол);
	ТаблицаОтчета.Вывести(ТабДок);
	
	//// Вывод дополнительной информации о партнере
	//ТабДок = Новый ТабличныйДокумент;
	//Область = Макет.ПолучитьОбласть("ЗаголовокБлока|КолонкаДокумента");
	//Область.Параметры.Заголовок = НСтр("ru='Дополнительно'");
	//ТабДок.Вывести(Область);
	//
	//ВыборкаДопРеквизиты = РезультатЗапросаПоДополнительнымРеквзитам.Выбрать();
	//Пока ВыборкаДопРеквизиты.Следующий() Цикл
	//	Область = Макет.ПолучитьОбласть("ДанныеПартнераДополнительныйРеквизит|КолонкаДокумента");
	//	ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДопРеквизиты);
	//	ТабДок.Вывести(Область);
	//КонецЦикла;
	//
	//// Выводим Источник первичного интереса в Таблицу с доп. инф.
	//Если ВыборкаПервичныйИнтерес <> Неопределено Тогда
	//	ОбластьСтрока = Макет.ПолучитьОбласть("ИсточникПервичногоИнтереса|КолонкаДокумента");
	//	ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,ВыборкаПервичныйИнтерес);
	//	ТабДок.Вывести(ОбластьСтрока);
	//КонецЕсли;
	//// Обведем
	//ТабДок = ОбвестиТабДок(ТабДок);
	////ТабДок.Вывести(ПустаяСтрокаДок);
	////ВывестиОбластьТекст(Макет,ТаблицаОтчета,НСтр("ru='Комментарий:'"),ВыборкаРеквизитыПартнера.Комментарий);
	//ТаблицаОтчета.Присоединить(ТабДок);
КонецПроцедуры

Процедура ВывестиДополнительныеДанные(РезультатЗапросаПервичныйИнтерес, РезультатЗапросаПоДополнительнымРеквзитам, ТаблицаОтчета, Макет)
	// Вывод дополнительной информации о партнере.
	ТабДок = Новый ТабличныйДокумент;
	Область = Макет.ПолучитьОбласть("ЗаголовокБлока|КолонкаДокумента");
	Область.Параметры.Заголовок = НСтр("ru='Дополнительно'");
	ТабДок.Вывести(Область);
	
	Если РезультатЗапросаПоДополнительнымРеквзитам <> Неопределено Тогда
		ВыборкаДопРеквизиты = РезультатЗапросаПоДополнительнымРеквзитам.Выбрать();
		Пока ВыборкаДопРеквизиты.Следующий() Цикл
			Область = Макет.ПолучитьОбласть("ДанныеПартнераДополнительныйРеквизит|КолонкаДокумента");
			ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДопРеквизиты);
			ТабДок.Вывести(Область);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатЗапросаПервичныйИнтерес <> Неопределено И НЕ РезультатЗапросаПервичныйИнтерес.Пустой() Тогда
		ВыборкаПервичныйИнтерес = РезультатЗапросаПервичныйИнтерес.Выбрать();
		ВыборкаПервичныйИнтерес.Следующий();
		
		ОбластьСтрока = Макет.ПолучитьОбласть("ИсточникПервичногоИнтереса|КолонкаДокумента");
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,ВыборкаПервичныйИнтерес);
		ТабДок.Вывести(ОбластьСтрока);
	КонецЕсли;
	
	ТабДок = ОбвестиТабДок(ТабДок);
	
	ТаблицаОтчета.Присоединить(ТабДок);
КонецПроцедуры

Процедура ВывестиДанныеДляБухгалтерии(РезультатЗапросаПоКонтрагентам,ТаблицаОтчета,Макет)
	
	Если РезультатЗапросаПоКонтрагентам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ПустаяСтрокаКол = Макет.ПолучитьОбласть("ПустаяСтрока|КолонкаДокумента");
	// Заголовок
	ТабДок = Новый ТабличныйДокумент;
	Область = Макет.ПолучитьОбласть("ЗаголовокБлока|КолонкаДокумента");
	Область.Параметры.Заголовок = НСтр("ru='Для бухгалтерии'");
	ТабДок.Вывести(Область);
	ВыборкаИтоги = РезультатЗапросаПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	//ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	//ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,НСтр("ru = 'Данные для бухгалтерии'"));
	//ТабДок.НачатьГруппуСтрок("ДанныеДляБухгалтерии");
	
	ЧетнаяСтрока = Ложь;
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
		Область = Макет.ПолучитьОбласть("ДанныеДляБухгалтерии|КолонкаДокумента");
		ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаДетали);
		Область.Параметры.ИНН_КПП = ВыборкаДетали.CRM_ИНН + ?(ПустаяСтрока(ВыборкаДетали.CRM_КПП),"","/" + ВыборкаДетали.CRM_КПП);
		ТабДок.Вывести(Область);
	КонецЦикла;
	//ТабДок.ЗакончитьГруппуСтрок();
	ТаблицаОтчета.Присоединить(ТабДок,2);

КонецПроцедуры

Процедура ВывестиДанныеОКонтактнойИнформацииПартнера(РезультатЗапросаПоКонтактнойИнформацииПартнера,ТаблицаОтчета,Макет)

	Если РезультатЗапросаПоКонтактнойИнформацииПартнера.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ПустаяСтрокаДок = Макет.ПолучитьОбласть("ПустаяСтрока|ШиринаДокумента");
	ПустаяСтрокаКол = Макет.ПолучитьОбласть("ПустаяСтрока|КолонкаДокумента");
	ТабДок = Новый ТабличныйДокумент;
	Выборка_КИ_Партнера =  РезультатЗапросаПоКонтактнойИнформацииПартнера.Выбрать();
	
	// Выведем заголовок
	ТаблицаОтчета.Вывести(ПустаяСтрокаКол);
	Область = Макет.ПолучитьОбласть("ЗаголовокБлока|КолонкаДокумента");
	Область.Параметры.Заголовок = НСтр("ru='Контактная информация'");
	ТабДок.Вывести(Область,2);
	//ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,"Контактная информация");
	ТабДок.НачатьГруппуСтрок("КонтактнаяИнформация");
	Пока Выборка_КИ_Партнера.Следующий() Цикл
		Область = Макет.ПолучитьОбласть("СтрокаКонтактнойИнформации|КолонкаДокумента");
		ЗаполнитьЗначенияСвойств(Область.Параметры,Выборка_КИ_Партнера);
		ТабДок.Вывести(Область,2);
	КонецЦикла;
	ТабДок.ЗакончитьГруппуСтрок();
	ТабДок = ОбвестиТабДок(ТабДок);
	ТаблицаОтчета.Вывести(ТабДок,2);
	
КонецПроцедуры

Процедура ВывестиДанныеОКонтактныхЛицах(РезультатЗапросаПоКонтактнымЛицам,ТаблицаОтчета,Макет)

	Если РезультатЗапросаПоКонтактнымЛицам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПустаяСтрокаДок = Макет.ПолучитьОбласть("ПустаяСтрока|ШиринаДокумента");
	ПустаяСтрокаКол = Макет.ПолучитьОбласть("ПустаяСтрока|КолонкаДокумента");
	
	ТабДок = Новый ТабличныйДокумент;
	ВыборкаИтоги = РезультатЗапросаПоКонтактнымЛицам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	//ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контактные лица - %1'"),ВыборкаИтоги.Ссылка));
	// Вывод заголовка подраздела
	Область = Макет.ПолучитьОбласть("ЗаголовокБлокаКИ|КолонкаДокумента");
	Область.Параметры.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контактные лица - %1'"),ВыборкаИтоги.Ссылка);
	ТабДок.Вывести(Область,2);
	ТабДок.Вывести(ПустаяСтрокаКол);
	
	ТабДок.НачатьГруппуСтрок("КонтактныеЛица");
	
	//ВывестиОбластьБезПараметров("КонтактноеЛицоШапка",Макет,ТаблицаОтчета);
	ЧетнаяСтрока = Ложь;
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
		//ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДетали);
		// ФИО
		Область = Макет.ПолучитьОбласть("ПодзаголовокИмя|КолонкаДокумента");
		Область.Параметры.Заголовок = ВыборкаДетали.Наименование;
		ТабДок.Вывести(Область,2);
		// Должность КИ
		ОбластьКИ = Макет.ПолучитьОбласть("СтрокаКонтактнойИнформации|КолонкаДокумента");
		Если ЗначениеЗаполнено(ВыборкаДетали) И ЗначениеЗаполнено(ВыборкаДетали.CRM_Должность) Тогда
			ОбластьКИ.Параметры.ВидКонтактнойИнформации =НСтр("ru='Должность:'");
			ОбластьКИ.Параметры.Представление = ВыборкаДетали.CRM_Должность;	
			ТабДок.Вывести(ОбластьКИ);
		КонецЕсли;		
		// Роль КИ
		ОбластьКИ = Макет.ПолучитьОбласть("СтрокаКонтактнойИнформации|КолонкаДокумента");
		Если ЗначениеЗаполнено(ВыборкаДетали) И ЗначениеЗаполнено(ВыборкаДетали.CRM_РольКонтактногоЛица) Тогда
			ОбластьКИ.Параметры.ВидКонтактнойИнформации =НСтр("ru='Роли:'");
			ОбластьКИ.Параметры.Представление = ВыборкаДетали.CRM_РольКонтактногоЛица;
			
			ТабДок.Вывести(ОбластьКИ);
		КонецЕсли;
		
		КонтактнаяИнформация = ВыборкаДетали.КонтактнаяИнформация.Выгрузить();
		Для каждого элКИ Из КонтактнаяИнформация Цикл
			ОбластьКИ.Параметры.ВидКонтактнойИнформации = ЭлКИ.Вид;
			ОбластьКИ.Параметры.Представление = ЭлКИ.Представление;
			ТабДок.Вывести(ОбластьКИ);
		КонецЦикла;
		//ОбластьКИ.Параметры.КИ = ПолучитьМногострочноеПредставлениеКонтактнойИнформации(ВыборкаДетали.КонтактнаяИнформация);
		
		//ТабДок.Вывести(Область);
		//Область.Параметры.ПредставлениеКонтактнойИнформации = ПолучитьМногострочноеПредставлениеКонтактнойИнформации(ВыборкаДетали.КонтактнаяИнформация);
		
		Если ЧетнаяСтрока Тогда
		//	Область.Области.СтрокаТаблицыКонтактныеЛица.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	
	КонецЦикла;
	ТабДок.ЗакончитьГруппуСтрок();
	ОбвестиТабДок(ТабДок);
	ТаблицаОтчета.Вывести(ТабДок,2);

КонецПроцедуры

Функция ПолучитьПредставлениеВидаСвязи(ВидСвязи, Прямое)
	Если Прямое Тогда
		Если ЗначениеЗаполнено(ВидСвязи.Наименование) Тогда
			Возврат ВидСвязи.Наименование;
		Иначе
			Возврат ВидСвязи.РольПартнера1;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ВидСвязи.ОбратноеНаименование) Тогда
			Возврат ВидСвязи.ОбратноеНаименование;
		ИначеЕсли ЗначениеЗаполнено(ВидСвязи.Наименование) Тогда
			Возврат ВидСвязи.Наименование;
		Иначе
			Возврат ВидСвязи.РольПартнера2;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ВернутьПроектыПоКлиенту(Клиент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",Клиент);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_БизнесПроцесс.Проект
	|ПОМЕСТИТЬ ВсеПроекты
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|ГДЕ
	|	CRM_БизнесПроцесс.Партнер = &Партнер
	|	И НЕ CRM_БизнесПроцесс.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|	И CRM_БизнесПроцесс.Стартован
	|	И НЕ CRM_БизнесПроцесс.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проекты.Ссылка
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.ПометкаУдаления
	|	И Проекты.CRM_Партнер = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеПроекты.Проект КАК Проект
	|ИЗ
	|	ВсеПроекты КАК ВсеПроекты";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Проект");
	
КонецФункции

Процедура СформироватьРекурсивно(ПартнерСсылка, ТаблицаСвязейПартнеров, СтрокиДерева, ТаблицаВыведенныхСвязей,Партнер,Дерево)
	НайденныеСтроки1 = ТаблицаСвязейПартнеров.НайтиСтроки(Новый Структура("ПервыйПартнер", ПартнерСсылка));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки1 Цикл
		Партнер1 = НайденнаяСтрока.ПервыйПартнер;
		Партнер2 = НайденнаяСтрока.ВторойПартнер;
		НайденныеСтрокиВыведенные = ТаблицаВыведенныхСвязей.НайтиСтроки(Новый Структура("ПервыйПартнер,ВторойПартнер,ВидСвязи", Партнер1, Партнер2, НайденнаяСтрока.ВидСвязи));
		Если НайденныеСтрокиВыведенные.Количество() > 0 Тогда Продолжить; КонецЕсли;
		НайденныеСтрокиВыведенные = ТаблицаВыведенныхСвязей.НайтиСтроки(Новый Структура("ПервыйПартнер,ВторойПартнер,ВидСвязи", Партнер2, Партнер1, НайденнаяСтрока.ВидСвязи));
		Если НайденныеСтрокиВыведенные.Количество() > 0 Тогда Продолжить; КонецЕсли;
		
		ВывестиПроекты = (Дерево.Строки.Найти(Партнер1,"Партнер1",Истина)=Неопределено);
		
		НоваяСтрока = СтрокиДерева.Добавить();
		НоваяСтрока.Партнер1 = Партнер1;
		НоваяСтрока.Партнер2 = Партнер2;
		НоваяСтрока.ВидСвязиСсылка = НайденнаяСтрока.ВидСвязи;
		ПредставлениеВидСвязи = ПолучитьПредставлениеВидаСвязи(НайденнаяСтрока.ВидСвязи, Истина);
		НоваяСтрока.ВидСвязиПредставление = ПредставлениеВидСвязи;
		Если НоваяСтрока.Партнер1 = Партнер Тогда
			НоваяСтрока.Оформление = 7;
		ИначеЕсли НоваяСтрока.Партнер2 = Партнер Тогда
			НоваяСтрока.Оформление = 6;
		КонецЕсли;
		
		НоваяСтрокаВыведенные = ТаблицаВыведенныхСвязей.Добавить();
		НоваяСтрокаВыведенные.ПервыйПартнер = Партнер1;
		НоваяСтрокаВыведенные.ВторойПартнер = Партнер2;
		НоваяСтрокаВыведенные.ВидСвязи = НайденнаяСтрока.ВидСвязи;
		
		СформироватьРекурсивно(НоваяСтрока.Партнер2, ТаблицаСвязейПартнеров, НоваяСтрока.Строки, ТаблицаВыведенныхСвязей,Партнер,Дерево);
		
		Если ВывестиПроекты Тогда
			МассивПроектов = ВернутьПроектыПоКлиенту(Партнер1);
			Для Каждого ПроектКлиента Из МассивПроектов Цикл
				НоваяСтрока = СтрокиДерева.Добавить();
				НоваяСтрока.Партнер1 = "-";
				НоваяСтрока.Партнер2 = ПроектКлиента;
				НоваяСтрока.ВидСвязиПредставление = "Проект";
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныеСтроки2 = ТаблицаСвязейПартнеров.НайтиСтроки(Новый Структура("ВторойПартнер", ПартнерСсылка));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки2 Цикл
		Партнер1 = НайденнаяСтрока.ВторойПартнер;
		Партнер2 = НайденнаяСтрока.ПервыйПартнер;
		НайденныеСтрокиВыведенные = ТаблицаВыведенныхСвязей.НайтиСтроки(Новый Структура("ПервыйПартнер,ВторойПартнер,ВидСвязи", Партнер1, Партнер2, НайденнаяСтрока.ВидСвязи));
		Если НайденныеСтрокиВыведенные.Количество() > 0 Тогда Продолжить; КонецЕсли;
		НайденныеСтрокиВыведенные = ТаблицаВыведенныхСвязей.НайтиСтроки(Новый Структура("ПервыйПартнер,ВторойПартнер,ВидСвязи", Партнер2, Партнер1, НайденнаяСтрока.ВидСвязи));
		Если НайденныеСтрокиВыведенные.Количество() > 0 Тогда Продолжить; КонецЕсли;
		
		ВывестиПроекты = (Дерево.Строки.Найти(Партнер1,"Партнер1",Истина)=Неопределено);
		
		НоваяСтрока = СтрокиДерева.Добавить();
		НоваяСтрока.Партнер1 = Партнер1;
		НоваяСтрока.Партнер2 = Партнер2;
		НоваяСтрока.ВидСвязиСсылка = НайденнаяСтрока.ВидСвязи;
		ПредставлениеВидСвязи = ПолучитьПредставлениеВидаСвязи(НайденнаяСтрока.ВидСвязи, Ложь);
		НоваяСтрока.ВидСвязиПредставление = ПредставлениеВидСвязи;
		Если НоваяСтрока.Партнер1 = Партнер Тогда
			НоваяСтрока.Оформление = 7;
		ИначеЕсли НоваяСтрока.Партнер2 = Партнер Тогда
			НоваяСтрока.Оформление = 6;
		КонецЕсли;
		
		НоваяСтрокаВыведенные = ТаблицаВыведенныхСвязей.Добавить();
		НоваяСтрокаВыведенные.ПервыйПартнер = Партнер1;
		НоваяСтрокаВыведенные.ВторойПартнер = Партнер2;
		НоваяСтрокаВыведенные.ВидСвязи = НайденнаяСтрока.ВидСвязи;
		
		СформироватьРекурсивно(НоваяСтрока.Партнер2, ТаблицаСвязейПартнеров, НоваяСтрока.Строки, ТаблицаВыведенныхСвязей,Партнер,Дерево);
		
		Если ВывестиПроекты Тогда
			МассивПроектов = ВернутьПроектыПоКлиенту(Партнер1);
			Для Каждого ПроектКлиента Из МассивПроектов Цикл
				НоваяСтрока = СтрокиДерева.Добавить();
				НоваяСтрока.Партнер1 = "-";
				НоваяСтрока.Партнер2 = ПроектКлиента;
				НоваяСтрока.ВидСвязиПредставление = "Проект";
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьОбластьВывестиСвязи(СтрокаДерева,Макет,ТаблицаОтчета, Уровень = 0, Отступ = 1)
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("СвязиСтрока");
	ОбластьМакета.Область().Отступ = Отступ;
	
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры,СтрокаДерева);
	Если НЕ ТипЗнч(СтрокаДерева.Партнер2) = Тип("СправочникСсылка.Проекты") Тогда
		ОбластьМакета.Параметры.РасшифровкаПартнер1 = СтрокаДерева.Партнер1;
		ОбластьМакета.Параметры.РасшифровкаПартнер2 = СтрокаДерева.Партнер2;
	Иначе
		ОбластьМакета.Параметры.РасшифровкаПартнер2 = СтрокаДерева.Партнер2;
	КонецЕсли;
	ТаблицаОтчета.Вывести(ОбластьМакета,2);
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		
		Отступ = Отступ + 2;
		
		ТаблицаОтчета.НачатьГруппуСтрок("ТекущиеСвязи_"+Строка(Уровень));
		
		Для Каждого СтрокаСтроки Из СтрокаДерева.Строки Цикл
			
			ПолучитьОбластьВывестиСвязи(СтрокаСтроки,Макет,ТаблицаОтчета,СтрокаСтроки.Уровень(),Отступ)
			
		КонецЦикла;
		
		ТаблицаОтчета.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
	
КонецФункции

Процедура ВывестиДанныеОСвязях(ТаблицаСвязейПартнеров,ТаблицаОтчета,Макет,Партнер)
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Партнер1");
	Дерево.Колонки.Добавить("ВидСвязиПредставление");
	Дерево.Колонки.Добавить("Партнер2");
	Дерево.Колонки.Добавить("Оформление");
	Дерево.Колонки.Добавить("ВидСвязиСсылка");
	
	ТаблицаСвязейПартнеров = CRM_МетодыМодулейМенеджеровРегистров.ПолучитьТаблицуСвязейПартнера(Партнер);
	НайденныеСтроки = ТаблицаСвязейПартнеров.НайтиСтроки(Новый Структура("ВидСвязи", Справочники.ВидыСвязейМеждуПартнерами.CRM_Холдинг));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Холдинг = Неопределено;
	Иначе
		Холдинг = НайденныеСтроки[0].ПервыйПартнер;
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТаблицаСвязейПартнеров.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
	КонецЕсли;
	ТаблицаСвязейПартнеров.Сортировать("ВидСвязи ВОЗР");
	
	ВывестиПроекты = Ложь;
	
	Если Холдинг <> Неопределено Тогда
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Партнер1 = Холдинг;
		Если НоваяСтрока.Партнер1 = Партнер Тогда
			НоваяСтрока.Оформление = 8;
		Иначе
			НоваяСтрока.Оформление = 9;
		КонецЕсли;
		ВывестиПроекты = Истина;
		СтрокиДерева = НоваяСтрока.Строки;
	Иначе
		СтрокиДерева = Дерево.Строки;
	КонецЕсли;
	
	ТаблицаСвязейПартнеров.Колонки.Добавить("СортировкаПоВидуСвязи");
	
	ТаблицаПартнеры = Новый ТаблицаЗначений();
	ТаблицаПартнеры.Колонки.Добавить("Партнер");
	Для Каждого СтрокаТаблицы Из ТаблицаСвязейПартнеров Цикл
		НоваяСтрока = ТаблицаПартнеры.Добавить();
		НоваяСтрока.Партнер = СтрокаТаблицы.ПервыйПартнер;
		НоваяСтрока = ТаблицаПартнеры.Добавить();
		НоваяСтрока.Партнер = СтрокаТаблицы.ВторойПартнер;
		
		Если СтрокаТаблицы.ВидСвязи = Справочники.ВидыСвязейМеждуПартнерами.CRM_Холдинг Тогда
			СтрокаТаблицы.СортировкаПоВидуСвязи = 0;
		ИначеЕсли СтрокаТаблицы.ВидСвязи = Справочники.ВидыСвязейМеждуПартнерами.CRM_СвязанноеЮрЛицо Тогда
			СтрокаТаблицы.СортировкаПоВидуСвязи = 1;
		Иначе
			СтрокаТаблицы.СортировкаПоВидуСвязи = 2;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСвязейПартнеров.Сортировать("СортировкаПоВидуСвязи,ВидСвязи,ВторойПартнер");
	
	ТаблицаПартнеры.Свернуть("Партнер");
	ТаблицаПартнеры.Сортировать("Партнер ВОЗР");
	НоваяСтрока = ТаблицаПартнеры.Вставить(0);
	НоваяСтрока.Партнер = Партнер;
	Если ЗначениеЗаполнено(Холдинг) Тогда
		НоваяСтрока = ТаблицаПартнеры.Вставить(0);
		НоваяСтрока.Партнер = Холдинг;
	КонецЕсли;
	ТаблицаПартнеры.Свернуть("Партнер");
	
	ТаблицаВыведенныхСвязей = ТаблицаСвязейПартнеров.Скопировать(Новый Массив());
	
	Для Каждого СтрокаТаблицы Из ТаблицаПартнеры Цикл
		СформироватьРекурсивно(СтрокаТаблицы.Партнер, ТаблицаСвязейПартнеров, СтрокиДерева, ТаблицаВыведенныхСвязей,Партнер,Дерево);
	КонецЦикла;
	
	Если ВывестиПроекты Тогда
		МассивПроектов = ВернутьПроектыПоКлиенту(Холдинг);
		Для Каждого ПроектКлиента Из МассивПроектов Цикл
			НоваяСтрока = Дерево.Строки.Добавить();
			НоваяСтрока.Партнер1 = "-";
			НоваяСтрока.Партнер2 = ПроектКлиента;
			НоваяСтрока.ВидСвязиПредставление = "Проект";
		КонецЦикла;
	КонецЕсли;
	
	Если Дерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	
	ТекстЗаголовка = НСтр("ru='Структура взаимосвязей'");
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	
	ТаблицаОтчета.НачатьГруппуСтрок("ТекущиеСвязи");
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		ПолучитьОбластьВывестиСвязи(СтрокаДерева,Макет,ТаблицаОтчета,СтрокаДерева.Уровень());
		
	КонецЦикла;
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеОТекущихБизнесПроцессах(РезультатЗапросаПоТекущимБизнесПроцессам,ТаблицаОтчета,Макет)
	
	Если РезультатЗапросаПоТекущимБизнесПроцессам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	
	ВыборкаИтоги = РезультатЗапросаПоТекущимБизнесПроцессам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Текущих бизнес-процессов  - %1'"),
																			 ВыборкаИтоги.БизнесПроцессКоличество);
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	ТаблицаОтчета.НачатьГруппуСтрок("ТекущиеБизнесПроцессы");
	ВывестиОбластьБезПараметров("БизнесПроцессыШапка",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	ВыборкаБизнесПроцессы = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаБизнесПроцессы.Следующий() Цикл
		
		Область = Макет.ПолучитьОбласть("БизнесПроцессыСтрока");
		Область.Параметры.БизнесПроцессЗадача = СтруктураПодчиненностиПереопределяемый.ПредставлениеОбъектаДляВыводаВОтчет(Новый Структура("Ссылка,Представление",ВыборкаБизнесПроцессы.БизнесПроцесс,Строка(ВыборкаБизнесПроцессы.БизнесПроцесс)));
		Область.Параметры.БизнесПроцессЗадачаРасшифровка = ВыборкаБизнесПроцессы.БизнесПроцесс;
		
		Если ЧетнаяСтрока Тогда
			Область.Области.БизнесПроцессыСтрока.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
		ВыборкаЗадачи = ВыборкаБизнесПроцессы.Выбрать();
		ТаблицаОтчета.НачатьГруппуСтрок("ТекущиеЗадачи");
		Пока ВыборкаЗадачи.Следующий() Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("БизнесПроцессыСтрока");
			ОбластьМакета.Область().Отступ = 3;
			ОбластьМакета.Параметры.БизнесПроцессЗадача = СтруктураПодчиненностиПереопределяемый.ПредставлениеОбъектаДляВыводаВОтчет(Новый Структура("Ссылка,Представление",ВыборкаЗадачи.Задача,Строка(ВыборкаЗадачи.Задача)));
			ОбластьМакета.Параметры.БизнесПроцессЗадачаРасшифровка = ВыборкаЗадачи.Задача;
			Если ЧетнаяСтрока Тогда
				ОбластьМакета.Области.БизнесПроцессыСтрока.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
			КонецЕсли;
			ТаблицаОтчета.Вывести(ОбластьМакета,2);
			
			ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		КонецЦикла;
		ТаблицаОтчета.ЗакончитьГруппуСтрок();
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеОТекущихСделкахСКлиентом(РезультатЗапросаПоТекущимСделкамСПартнером,ТаблицаОтчета,Макет)
	
	Если РезультатЗапросаПоТекущимСделкамСПартнером.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	
	ВыборкаИтоги = РезультатЗапросаПоТекущимСделкамСПартнером.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Текущих сделок  - %1, на сумму %2 %4, Задолженность по оплате %3 %4'"),
																			 ВыборкаИтоги.Сделка,
																			 ВыборкаИтоги.СуммаПриход,
																			 ВыборкаИтоги.СуммаОстаток,
																			 ВыборкаИтоги.ВалютаУправленческогоУчета);
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	ТаблицаОтчета.НачатьГруппуСтрок("ТекущиеСделки");
	ВывестиОбластьБезПараметров("ТекущиеСделкиШапка",Макет,ТаблицаОтчета);
	ЧетнаяСтрока = Ложь;
	ВыборкаСделки = ВыборкаИтоги.Выбрать();
	Пока ВыборкаСделки.Следующий() Цикл
		
		Область = Макет.ПолучитьОбласть("ТекущиеСделкиСтрока");
		ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаСделки);
		Область.Параметры.НомерДата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='№ %1 от %2'"),ВыборкаСделки.Номер, ВыборкаСделки.Дата);
		Если ЧетнаяСтрока Тогда
			Область.Области.СтрокаТаблицыТекущиеСделки1.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеОбороты(РезультатЗапросаОбороты, ТаблицаОтчета, Макет);

	Если РезультатЗапросаОбороты.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ПустаяСтрокаДок = Макет.ПолучитьОбласть("ПустаяСтрока");
	ТаблицаОтчета.Вывести(ПустаяСтрокаДок);
	ТабДок = Новый ТабличныйДокумент;
	ВыборкаИтоги =  РезультатЗапросаОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Общий объем выручки от продаж клиенту : %1 %2.'"), ВыборкаИтоги.СуммаВыручкиОборот,ВыборкаИтоги.Валюта);
	Заголовок = Макет.ПолучитьОбласть("ЗаголовокТЧ|ШиринаДокумента");
	Заголовок.Параметры.Заголовок = ТекстЗаголовка;
	ТаблицаОтчета.Вывести(Заголовок);
	ТабДок.НачатьГруппуСтрок("Обороты");
	Шапка = Макет.ПолучитьОбласть("ШапкаОбороты");
	ТабДок.Вывести(Шапка);
	ЧетнаяСтрока = Ложь;
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
		Область = Макет.ПолучитьОбласть("СтрокаОбороты");
		ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДетали);
		Если ЧетнаяСтрока Тогда
			Область.Области.СтрокаОбороты.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТабДок.Вывести(Область,2);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	КонецЦикла;
	ТабДок.ЗакончитьГруппуСтрок();
	ОбвестиТабДок(ТабДок);
	ТаблицаОтчета.Вывести(ТабДок);
КонецПроцедуры 

Процедура ВывестиДанныеОДоступныхДоговорах(РезультатЗапросаПоСоглашениям,ТаблицаОтчета, Макет)
	
	Если РезультатЗапросаПоСоглашениям.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ТабДок = Новый ТабличныйДОкумент;
	// Вывод шапки
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	
	ВыборкаИтоги = РезультатЗапросаПоСоглашениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Доступно договоров с клиентом - %1.'"),ВыборкаИтоги.Ссылка);
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	
	// Вывод таблицы
	ТаблицаОтчета.НачатьГруппуСтрок("ДоговораСКлиентом");
	ВывестиОбластьБезПараметров("ДоговораСКлиентомШапка",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
	
		Область = Макет.ПолучитьОбласть("ДоговораСКлиентомСтрока");
		ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаДетали);
		Если ЧетнаяСтрока Тогда
			Область.Области.СтрокаТаблицыСоглашенияСКлиентом.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеОДействующихКоммерческихПредложениях(РезультатЗапросаПоКоммерческимПредложениям,ТаблицаОтчета,Макет)

	Если РезультатЗапросаПоКоммерческимПредложениям.Пустой() Тогда
		Возврат;
	КонецЕсли;

	// Вывод шапки
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	
	ВыборкаИтоги = РезультатЗапросаПоКоммерческимПредложениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	ВсегоЗаказов = ВыборкаИтоги.Ссылка;
	ТекстЗаголовка = НСтр("ru='Действующих коммерческих предложений - '") + ВсегоЗаказов;

	ПерваяВалюта = Истина;
	ВыборкаВалюты = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВалюты.Следующий() Цикл
		
		Если ВыборкаВалюты.Ссылка = ВсегоЗаказов Тогда
			ТекстЗаголовка =  ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' на сумму %1 %2, '"),ВыборкаВалюты.СуммаДокумента,ВыборкаВалюты.Валюта);
		Иначе
			ТекстЗаголовка =  ТекстЗаголовка + ?(ПерваяВалюта,НСтр("ru=', в том числе '"),"") + 
			                                     СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' %1 КП на сумму %2 %3, '"),ВыборкаВалюты.Ссылка,ВыборкаВалюты.СуммаДокумента,ВыборкаВалюты.Валюта);
			ПерваяВалюта =  Ложь;
		КонецЕсли;
	
	КонецЦикла;
	
	ТекстЗаголовка = Лев(ТекстЗаголовка,СтрДлина(ТекстЗаголовка)-2) + ".";
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	
	// Вывод таблицы
	ТаблицаОтчета.НачатьГруппуСтрок("КоммерческиеПредложения");
	ВывестиОбластьБезПараметров("КоммерческиеПредложенияШапка",Макет,ТаблицаОтчета);
	
	
	ЧетнаяСтрока = Ложь;
	ВыборкаВалюты.Сбросить();
	Пока ВыборкаВалюты.Следующий() Цикл
		ВыборкаДетали = ВыборкаВалюты.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			
			Область = Макет.ПолучитьОбласть("КоммерческиеПредложенияСтрока");
			ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДетали);
			Область.Параметры.НомерДата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='№ %1 от %2'"),ВыборкаДетали.Номер, ВыборкаДетали.Дата);
			Если ЧетнаяСтрока Тогда
				Область.Области.СтрокаТаблицыКП.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
			КонецЕсли;
			ТаблицаОтчета.Вывести(Область,2);
			
			ЧетнаяСтрока = НЕ ЧетнаяСтрока;
			
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеОСегментахПартнера(РезультатЗапросаПоСегментам,ТаблицаОтчета, Макет);
	
	Если РезультатЗапросаПоСегментам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоги = РезультатЗапросаПоСегментам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	// Вывод шапки
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Входит в сегменты - %1.'"),ВыборкаИтоги.Ссылка));
	
	ТаблицаОтчета.НачатьГруппуСтрок("Сегменты");
	ВывестиОбластьБезПараметров("СегментыШапка",Макет,ТаблицаОтчета);
	ЧетнаяСтрока = Ложь;
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
	
		Область = Макет.ПолучитьОбласть("СегментыСтрока");
		ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДетали);
		Если ЧетнаяСтрока Тогда
				Область.Области.СтрокаТаблицыСегментыПартнера.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиОбластьБезПараметров(ИмяОбласти,Макет,ТаблицаОтчета)

	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ТаблицаОтчета.Вывести(Область);

КонецПроцедуры

Процедура ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка,ЦветТекста = Неопределено)

	Область = Макет.ПолучитьОбласть("ЗаголовокБлокаКИ");
	Область.Параметры.Заголовок = ТекстЗаголовка;
	Если ЦветТекста <> Неопределено Тогда
		Область.Области.ЗаголовокПодраздела.ЦветТекста = ЦветТекста;
	КонецЕсли;
	ТаблицаОтчета.Вывести(Область);

КонецПроцедуры

//Функция ПолучитьМногострочноеПредставлениеКонтактнойИнформации(КонтактнаяИнформация)

//	ПредставлениеКИ = "";
//	
//	Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация.Выгрузить() Цикл
//	
//		ПредставлениеКИ = ПредставлениеКИ + "
//		|" + СтрокаКонтактнойИнформации.Вид + ": " + СтрокаКонтактнойИнформации.Представление;
//	
//	КонецЦикла;
//	
//	Возврат Прав(ПредставлениеКИ,СтрДлина(ПредставлениеКИ)-1);

//КонецФункции

Функция ОбвестиТабДок(ТабДок)
	ОбластьЯчеек = ТабДок.Область(1,2,ТабДок.ВысотаТаблицы,ТабДок.ШиринаТаблицы);
	СплошнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	Цвет = Новый Цвет(221, 220, 151);
	ОбластьЯчеек.ЦветРамки = Цвет;
	ОбластьЯчеек.Обвести(СплошнаяЛиния,СплошнаяЛиния,СплошнаяЛиния,СплошнаяЛиния);
	Возврат ТабДок;
КонецФункции

#КонецЕсли