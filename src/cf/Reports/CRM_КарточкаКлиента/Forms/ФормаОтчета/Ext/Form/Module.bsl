
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ  

&НаСервере
Процедура СформироватьОтчет()
	
	ТаблицаОтчета.Очистить();
	ОбъектОтчет =  РеквизитФормыВЗначение("Отчет");
	
	Для каждого Партнер Из Партнеры Цикл
	
		ОбъектОтчет.СформироватьОтчет(ТаблицаОтчета,Партнер.Значение)
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()

	Перем Настройки;
	
	Настройки = Новый Структура;
	Настройки.Вставить("Контакты",Отчет.Контакты);
	Настройки.Вставить("Аналитика",Отчет.Аналитика);
	Настройки.Вставить("Взаимосвязи",Отчет.Взаимосвязи);
	
	CRM_ХранилищеНастроек.Сохранить("Отчет.CRM_КарточкаКлиента", "CRM_ФормаОтчета", Настройки);
 
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()

	Перем ЗначениеНастроек;
	
	ЗначениеНастроек = CRM_ХранилищеНастроек.Загрузить("Отчет.CRM_КарточкаКлиента", "CRM_ФормаОтчета");
	Если ЗначениеНастроек = Неопределено Тогда
		
		Отчет.Контакты		= Истина;
		Отчет.Аналитика		= Истина;
		Отчет.Взаимосвязи	= Истина;
		
	ИначеЕсли ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		ЗначениеНастроек.Свойство("Контакты",Отчет.Контакты);
		ЗначениеНастроек.Свойство("Аналитика",Отчет.Аналитика);
		ЗначениеНастроек.Свойство("Взаимосвязи",Отчет.Взаимосвязи);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостью()

	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.КонтактныеЛицаПартнеров) И
	     НЕ ПравоДоступа("Чтение",Метаданные.Справочники.Партнеры) Тогда
		
		Отчет.Контакты = Ложь;
		Элементы.Контакты.Видимость = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучателейБольшеОдного(Получатель)
	Если ТипЗнч(Получатель) = Тип("Массив") Или ТипЗнч(Получатель) = Тип("СписокЗначений") Тогда
		Возврат Получатель.Количество() > 1;
	Иначе
		Возврат ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(Получатель).Количество() > 1;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПоместитьТабличныеДокументыВоВременноеХранилище(НастройкиСохранения)
	Перем ЗаписьZipФайла, ИмяАрхива;
	
	Результат = Новый СписокЗначений;
	
	// подготовка архива
	Если НастройкиСохранения.УпаковатьВАрхив Тогда
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	КонецЕсли;
	
	// подготовка временной папки
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ИспользованныеИменаФайлов = Новый Соответствие;
	
	ВыбранныеФорматыСохранения = НастройкиСохранения.ФорматыСохранения;
	ТаблицаФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	
	// сохранение печатных форм
	ОбработанныеПечатныеФормы = Новый Массив;
	
	ПечатнаяФорма = ТаблицаОтчета;
	
	Для Каждого ТипФайла Из ВыбранныеФорматыСохранения Цикл
		НастройкиФормата = ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
		
		ИмяФайлаБезРасширения = "КарточкаКлиента";
		Если ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT Тогда
			ИмяФайлаБезРасширения = ИмяФайлаБезРасширения + "_ansi";
		ИначеЕсли ТипФайла = ТипФайлаТабличногоДокумента.TXT Тогда
			ИмяФайлаБезРасширения = ИмяФайлаБезРасширения + "_utf8";
		КонецЕсли;
		
		ИмяФайла = ПолучитьИмяВременногоФайлаДляПечатнойФормы(ИмяФайлаБезРасширения,НастройкиФормата.Расширение,ИспользованныеИменаФайлов);
		ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла;
		
		ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
		
		Если ТипФайла = ТипФайлаТабличногоДокумента.HTML Тогда
			ВставитьКартинкиВHTML(ПолноеИмяФайла);
		КонецЕсли;
		
		Если ЗаписьZipФайла <> Неопределено Тогда 
			ЗаписьZipФайла.Добавить(ПолноеИмяФайла);
		Иначе
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			Результат.Добавить(ПутьВоВременномХранилище, ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	// Если архив подготовлен, записываем и помещаем его во временное хранилище.
	Если ЗаписьZipФайла <> Неопределено Тогда 
		ЗаписьZipФайла.Записать();
		ФайлАрхива = Новый Файл(ИмяАрхива);
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		Результат.Добавить(ПутьВоВременномХранилище, "КарточкаКлиента.zip");
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьИмяВременногоФайлаДляПечатнойФормы(ИмяМакета, Расширение, ИспользованныеИменаФайлов)
	
	ШаблонИмениФайла = "%1%2.%3";
	
	ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениФайла, ИмяМакета, "", Расширение));
		
	НомерИспользования = ?(ИспользованныеИменаФайлов[ИмяВременногоФайла] <> Неопределено,
							ИспользованныеИменаФайлов[ИмяВременногоФайла] + 1,
							1);
	
	ИспользованныеИменаФайлов.Вставить(ИмяВременногоФайла, НомерИспользования);
	
	// Если имя уже было ранее использовано, прибавляем счетчик в конце имени.
	Если НомерИспользования > 1 Тогда
		ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонИмениФайла,
				ИмяМакета,
				" (" + НомерИспользования + ")",
				Расширение));
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

&НаСервере
Процедура ВставитьКартинкиВHTML(ИмяФайлаHTML)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	ФайлHTML = Новый Файл(ИмяФайлаHTML);
	
	ИмяПапкиКартинок = ФайлHTML.ИмяБезРасширения + "_files";
	ПутьКПапкеКартинок = СтрЗаменить(ФайлHTML.ПолноеИмя, ФайлHTML.Имя, ИмяПапкиКартинок);
	
	// Ожидается, что в папке будут только картинки.
	ФайлыКартинок = НайтиФайлы(ПутьКПапкеКартинок, "*");
	
	Для Каждого ФайлКартинки Из ФайлыКартинок Цикл
		КартинкаТекстом = Base64Строка(Новый ДвоичныеДанные(ФайлКартинки.ПолноеИмя));
		КартинкаТекстом = "data:image/" + Сред(ФайлКартинки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		
		ТекстHTML = СтрЗаменить(ТекстHTML, ИмяПапкиКартинок + "\" + ФайлКартинки.Имя, КартинкаТекстом);
	КонецЦикла;
		
	ТекстовыйДокумент.УстановитьТекст(ТекстHTML);
	ТекстовыйДокумент.Записать(ИмяФайлаHTML, КодировкаТекста.UTF8);
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("Партнер") Тогда
		ВызватьИсключение НСтр("ru = 'Отчет не предназначен для непосредственного использования.'");
	КонецЕсли;
	
	Если Параметры.Свойство("Партнер") Тогда
		Если ТипЗнч(Параметры.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
			Партнеры.Добавить(Параметры.Партнер);
		ИначеЕсли ТипЗнч(Параметры.Партнер) = Тип("Массив") Тогда
			Партнеры.ЗагрузитьЗначения(Параметры.Партнер);
		КонецЕсли;

	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ЗагрузитьНастройки();
		УправлениеВидимостью();
		СформироватьОтчет();
	КонецЕсли;
	
	Для каждого Получатель Из Партнеры Цикл
		КонтактыТЧ = Получатель.Значение.КонтактнаяИнформация;
		ПочтаСтрокаТЧ = КонтактыТЧ.Найти(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,"Тип");
		Получатели.Добавить(Получатель.Значение, ?(ПочтаСтрокаТЧ <> Неопределено, ПочтаСтрокаТЧ.АдресЭП, ""));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	
	ТаблицаОтчета.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТаблицаОтчета.АвтоМасштаб = Истина;                           	
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры // ПриЗакрытии()

#Область КомандыФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	ОчиститьСообщения();
	СформироватьОтчет();
	ТаблицаОтчета.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТаблицаОтчета.АвтоМасштаб = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура КонтактыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	СформироватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	СформироватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимосвязиПриИзменении(Элемент)
	
	ОчиститьСообщения();
	СформироватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
		
	ПараметрыФормы = Новый Структура;
	ИмяОткрываемойФормы = "ОбщаяФорма.ВыборФорматаВложений";
	Если ПолучателейБольшеОдного(Партнеры) Тогда
		ПараметрыФормы.Вставить("Получатели", Получатели);
		ИмяОткрываемойФормы = "ОбщаяФорма.ПодготовкаНовогоПисьма";
	КонецЕсли;
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ВыборФорматаВложений") Тогда
		
		Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение <> КодВозвратаДиалога.Отмена Тогда
			СписокВложений = ПоместитьТабличныеДокументыВоВременноеХранилище(ВыбранноеЗначение);
			CRM_ВзаимодействияКлиент.CRM_ОткрытьФормуОтправкиПочтовогоСообщения( , Получатели, "Карточка клиента", , СписокВложений);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
