
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// ++ VOG Солодов В.В. 05.03.2020 CRM-376

// Задать настройки формы отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - 
//   КлючВарианта - Строка, Неопределено - 
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере 	= Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере 					= Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
// См. "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, РасширениеУправляемойФормыДляОтчета - Форма отчета, где:
//     * Отчет - ДанныеФормыСтруктура, ОтчетОбъект - 
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	УстановитьСтандартныеПараметрыОтчета(НовыеНастройкиКД);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройкиКД);
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, РасширениеУправляемойФормыДляОтчета - где:
//    * Отчет - ДанныеФормыСтруктура, ОтчетОбъект - 
//  НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	//Сброс пользовательских настроек
	Компоновщик	= Новый КомпоновщикНастроекКомпоновкиДанных();
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(КомпоновщикНастроек.Настройки);
	
	КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Компоновщик.ПользовательскиеНастройки);
	
КонецПроцедуры

// -- VOG Солодов В.В. 05.03.2020

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	// ++ VOG Солодов В.В. 20.01.2020 CRM-122
	СтандартнаяОбработка = Ложь;
	// -- VOG Солодов В.В. 20.01.2020
	
	ДатаОтчета 							= Дата(1,1,1);
	ВариантОпроса 						= ПланыВидовХарактеристик.вогВариантыОпросов.ПустаяСсылка();
	ВариантОпросаМесяц 					= ПланыВидовХарактеристик.вогВариантыОпросов.ПустаяСсылка();
	ИспользоватьПроизвольнуюДатуОтчета 	= Ложь;
	ВыводитьПустойПлан 					= Ложь;
	
	ШаблонСхемы 						= Справочники.вогШаблоныСхемКомпановкиДанных.ОрганизацииНоменклатурныеГруппы;
	СхемаУсловий 						= ШаблонСхемы.ХранилищеСхемыКомпоновкиДанных.Получить();
	
	Если ТипЗнч(СхемаУсловий) = Тип("СхемаКомпоновкиДанных") Тогда
		
		ПараметрВариантОпроса = СхемаУсловий.Параметры.Найти("ВариантОпроса");
		
		Если Не ПараметрВариантОпроса = Неопределено Тогда
			ВариантОпроса = ПараметрВариантОпроса.Значение;
		КонецЕсли;
		
		ПараметрВариантОпросаМесяц = СхемаУсловий.Параметры.Найти("ВариантОпросаМесяц");
		
		Если Не ПараметрВариантОпросаМесяц = Неопределено Тогда
			ВариантОпросаМесяц = ПараметрВариантОпросаМесяц.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВариантОпроса) Тогда
		ТекстСообщения = НСтр("ru = 'Не найден вариант опроса Еженедельное планирование.
		|Не найдены данные для планирования.'");
		// ++ VOG Солодов В.В. 05.03.2020 CRM-376
		ВызватьИсключение ТекстСообщения;
		// До изменения
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		// -- VOG Солодов В.В. 05.03.2020
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВариантОпросаМесяц) Тогда
		ТекстСообщения = НСтр("ru = 'Не найден вариант опроса Ежемесячное планирование.
		|Не найдены данные для планирования.'");
		// ++ VOG Солодов В.В. 05.03.2020 CRM-376
		ВызватьИсключение ТекстСообщения;
		// До изменения
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		// -- VOG Солодов В.В. 05.03.2020
	КонецЕсли;
	
	ПараметрДатаОтчета = ОтчетыПереопределяемый.ПолучитьПараметр(КомпоновщикНастроек, "ДатаФормированияОтчета");
	
	Если Не ПараметрДатаОтчета = Неопределено
		И ЗначениеЗаполнено(ПараметрДатаОтчета.Значение)
		И ПараметрДатаОтчета.Использование = Истина Тогда
	
		ДатаОтчета 							= ПараметрДатаОтчета.Значение;
		ИспользоватьПроизвольнуюДатуОтчета 	= Истина;
		
	КонецЕсли;
	
	ПараметрПериодПродаж = ОтчетыПереопределяемый.ПолучитьПараметр(КомпоновщикНастроек, "ПериодОтчета");
	
	Если ПараметрПериодПродаж = Неопределено
		Или Не ЗначениеЗаполнено(ПараметрПериодПродаж.Значение)
		Или ПараметрПериодПродаж.Использование = Ложь Тогда
		
		ПараметрПериодПродаж = ОтчетыПереопределяемый.ПолучитьПараметр(КомпоновщикНастроек, "ПериодПродаж");
		
		ПериодПродаж = Отчеты.вогЕженедельныйОтчетПланПродаж.ПолучитьПериодПродаж(ДатаОтчета);
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"ПериодПродаж", ПериодПродаж);
		
	// ++ VOG Солодов В.В. 30.04.2020 CRM-617
	Иначе
		
		Если Не ИспользоватьПроизвольнуюДатуОтчета Тогда
			ВыводитьПустойПлан 	= Истина;
		КонецЕсли;
		
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"ПериодПродаж", Новый СтандартныйПериод);
	// До изменения
	//ИначеЕсли Не ИспользоватьПроизвольнуюДатуОтчета Тогда
	//	ВыводитьПустойПлан 	= Истина;
	// -- VOG Солодов В.В. 30.04.2020 CRM-617
	КонецЕсли;
	
	Если Не ВыводитьПустойПлан Тогда
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"ПериодАнкет", ПолучитьПериодАнкет(ДатаОтчета));
	КонецЕсли;
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
		"ВариантОпроса", ВариантОпроса);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
		"ВариантОпросаМесяц", ВариантОпросаМесяц);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
		"ДатаОтчета", ?(ЗначениеЗаполнено(ДатаОтчета), ДатаОтчета, ТекущаяДата()));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
		"КоличествоНедель", ПолучитьКоличествоНедель(ДатаОтчета, ПараметрПериодПродаж));
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
		"НомерНедели", ПолучитьНомерНедели(ДатаОтчета));
	
	// ++ VOG Солодов В.В. 14.01.2020 CRM-105
	МассивПодразделений = ПолучитьДоступныеПодразделенияПользователя();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		"Подразделение",
		МассивПодразделений,
		ВидСравненияКомпоновкиДанных.ВИерархии,
		"По доступным организациям",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный,
		Новый УникальныйИдентификатор());
	// -- VOG Солодов В.В. 14.01.2020
	
	// ++ VOG Солодов В.В. 20.01.2020 CRM_122
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ФиксированнаяСтрока = ДокументРезультат.ФиксацияСверху;
	
	Если ФиксированнаяСтрока Тогда
		ОбластьПовторения = ДокументРезультат.Область(ФиксированнаяСтрока - 4,, ФиксированнаяСтрока);
		ДокументРезультат.ПовторятьПриПечатиСтроки = ОбластьПовторения;
	КонецЕсли;
	// -- VOG Солодов В.В. 20.01.2020
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКоличествоНедель(Знач ДатаОтчета, Знач ПараметрПериодПродаж)
	
	Если ПараметрПериодПродаж = Неопределено
		Или Не ЗначениеЗаполнено(ПараметрПериодПродаж.Значение)
		Или ПараметрПериодПродаж.Использование = Ложь Тогда
		
		КоличествоНедель = 0;
		
	Иначе
		
		КоличествоНедель = Цел((КонецДня(ПараметрПериодПродаж.Значение.ДатаОкончания)
			- НачалоДня(ПараметрПериодПродаж.Значение.ДатаНачала)) / 604800 + 1);
		СкорректироватьПоПервойПоследнейНеделе(КоличествоНедель, ПараметрПериодПродаж.Значение);
		
	КонецЕсли;
	
	Возврат КоличествоНедель;
	
КонецФункции

Функция ПолучитьНомерНедели(Знач ДатаОтчета)
	
	Если Не ЗначениеЗаполнено(ДатаОтчета) Тогда
		ДатаОтчета = ТекущаяДата();
	КонецЕсли;
	
	НомерНедели = НеделяГода(ДатаОтчета) - НеделяГода(НачалоМесяца(ДатаОтчета)) + 1;
	СкорректироватьПоПервойПоследнейНеделе(НомерНедели, ДатаОтчета);
	
	Возврат НомерНедели;
	
КонецФункции

Функция ПолучитьПериодАнкет(Знач ДатаОтчета)
	
	Если Не ЗначениеЗаполнено(ДатаОтчета) Тогда
		ДатаОтчета = ТекущаяДата();
	КонецЕсли;
	
	ПериодАнкет = Новый СтандартныйПериод;
	
	Если НачалоНедели(ДатаОтчета) > НачалоМесяца(ДатаОтчета) Тогда
		
		Если (НачалоНедели(ДатаОтчета) - НачалоМесяца(ДатаОтчета)) / 86400 > 3 Тогда
			ПериодАнкет.ДатаНачала = НачалоНедели(ДатаОтчета);
		Иначе
			ПериодАнкет.ДатаНачала = НачалоМесяца(ДатаОтчета);
		КонецЕсли;
		
	Иначе
		ПериодАнкет.ДатаНачала = НачалоМесяца(ДатаОтчета);
	КонецЕсли;
	
	Если КонецНедели(ДатаОтчета) > КонецМесяца(ДатаОтчета) Тогда
		ПериодАнкет.ДатаОкончания = КонецМесяца(ДатаОтчета);
	Иначе
		
		Если (КонецМесяца(ДатаОтчета) - КонецНедели(ДатаОтчета)) / 86400 = 1 Тогда
			ПериодАнкет.ДатаОкончания = КонецМесяца(ДатаОтчета);
		Иначе
			ПериодАнкет.ДатаОкончания = КонецНедели(ДатаОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПериодАнкет;
	
КонецФункции

Процедура СкорректироватьПоПервойПоследнейНеделе(КорректируемоеЗначение, Знач Период)
	
	ПоПериоду = (ТипЗнч(Период) = Тип("СтандартныйПериод"));
	
	Если ПоПериоду Тогда
		ДатаНачала 		= Период.ДатаНачала;
		ДатаОкончания 	= Период.ДатаОкончания;
	Иначе
		ДатаНачала 		= Период;
		ДатаОкончания 	= Период;
	КонецЕсли;
	
	ЭтоКонецМесяца = (КонецДня(ДатаОкончания) = КонецМесяца(ДатаОкончания));
	
	ДлинаПервойНедели 		= (КонецНедели(НачалоМесяца(ДатаНачала)) - НачалоМесяца(ДатаНачала)) / 86400;
	ДлинаПоследнейНедели 	= (КонецМесяца(ДатаОкончания) - НачалоНедели(КонецМесяца(ДатаОкончания))) / 86400;
	
	Если ДлинаПервойНедели <= 3
		И (ПоПериоду 
			Или (Не ПоПериоду И Не КонецДня(ДатаНачала) <= КонецНедели(НачалоМесяца(ДатаНачала)))
			) Тогда
			
		КорректируемоеЗначение = КорректируемоеЗначение - 1;
		
	КонецЕсли;
	
	Если (ПоПериоду И КонецДня(ДатаОкончания) < КонецНедели(ДатаОкончания) И Не ЭтоКонецМесяца)
		Или (ЭтоКонецМесяца И ДлинаПоследнейНедели <= 1)
		Или (ПоПериоду И ДлинаПоследнейНедели <= 1 И КонецДня(КонецДня(ДатаОкончания) + 1) = КонецМесяца(ДатаОкончания)) Тогда
		
		КорректируемоеЗначение = КорректируемоеЗначение - 1;
		
	КонецЕсли;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 14.01.2020 CRM-105
Функция ПолучитьДоступныеПодразделенияПользователя()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СпрСтруктураПредприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи.вогОрганизации КАК ДоступныеОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СпрСтруктураПредприятия
		|		ПО ДоступныеОрганизации.Организация = СпрСтруктураПредприятия.Организация
		|			И (ДоступныеОрганизации.Ссылка = &ТекущийПользователь)
		|			И (СпрСтруктураПредприятия.ОбособленноеПодразделение = ИСТИНА)
		|			И (СпрСтруктураПредприятия.ПометкаУдаления = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // -- VOG Солодов В.В. 14.01.2020

// ++ VOG Солодов В.В. 05.03.2020 CRM-376
Процедура УстановитьСтандартныеПараметрыОтчета(Настройки)
	
	ПараметрДатаОтчета = ОтчетыПереопределяемый.ПолучитьПараметр(КомпоновщикНастроек, "ДатаФормированияОтчета");
	
	Если Не ПараметрДатаОтчета = Неопределено Тогда
		
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"ДатаФормированияОтчета", ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	ПериодПродаж 			= Отчеты.вогЕженедельныйОтчетПланПродаж.ПолучитьПериодПродаж(ТекущаяДатаСеанса());
	ПараметрПериодПродаж 	= ОтчетыПереопределяемый.ПолучитьПараметр(КомпоновщикНастроек, "ПериодПродаж");
	
	Если Не ПараметрПериодПродаж = Неопределено Тогда
		
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
			"ПериодПродаж", ПериодПродаж);
		
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 30.04.2020 CRM-617
	ПараметрПериодОтчета 	= ОтчетыПереопределяемый.ПолучитьПараметр(Настройки, "ПериодОтчета");
	
	Если Не ПараметрПериодОтчета = Неопределено Тогда
		
		ПараметрПериодОтчета.Значение 		= Новый СтандартныйПериод;
		ПараметрПериодОтчета.Использование 	= Ложь;
		
	КонецЕсли;
	// До изменения
	//ПараметрПериодОтчета 	= ОтчетыПереопределяемый.ПолучитьПараметр(КомпоновщикНастроек, "ПериодОтчета");
	//
	//Если Не ПараметрПериодОтчета = Неопределено Тогда
	//	
	//	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
	//		"ПериодОтчета", ПериодПродаж);
	//	
	//КонецЕсли;
	// -- VOG Солодов В.В. 30.04.2020
	
КонецПроцедуры // -- VOG Солодов В.В. 05.03.2020

#КонецОбласти

#КонецЕсли