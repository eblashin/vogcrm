
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИсходнаяСхемаXML = ТекущийОбъект.ТекущаяСхема;

	НовыйСериализаторXDTO	= Новый СериализаторXDTO(ФабрикаXDTO);
	ЧтениеXML				= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ИсходнаяСхемаXML);
	ГрафическаяСхема		= НовыйСериализаторXDTO.ПрочитатьXML(ЧтениеXML);

	// Заполненение стека статусов
	Для каждого Стр Из ТекущийОбъект.Статусы Цикл
		СтрокаДобавления 				= СтекДействийСтатусы.Добавить();
		СтрокаДобавления.ИД 			= Стр.ИД;
		СтрокаДобавления.НомерПоПорядку = Стр.НомерПоПорядку;
	КонецЦикла;
	
	ТекущийОбъект.Статусы.Сортировать("НомерПоПорядку");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если Не ВебКлиент Тогда
		Если Параметры.Ключ.Пустая() Тогда
			НовыйГрафическийЭлемент = ДобавитьЭлементНаСхему("Старт", ГрафическаяСхема);
			ДобавитьЭлементГрафическойСхемыВТЧ(НовыйГрафическийЭлемент);
		КонецЕсли;
	#КонецЕсли
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.РежимРедактирования = 0;
	КонецЕсли;
	
	РежимРедактированияГрафическаяСхема();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПостроитьПорядокСтатусов("Старт1");
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверитьСхемуСервер(Отказ);
	
	Если ОбнаруженаОшибка Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ТекущаяСхема = ПолучитьXMLТекущейСхемы(ГрафическаяСхема);
	
	// Порядок статусов
	Для каждого Стр Из СтекДействийСтатусы Цикл
		НайденныеСтрокиСтатуса = ТекущийОбъект.Статусы.НайтиСтроки(Новый Структура("ИД",Стр.ИД));
		Если НайденныеСтрокиСтатуса.Количество() <> 0 Тогда
			НайденнаяСтрока 				= НайденныеСтрокиСтатуса[0];
			НайденнаяСтрока.НомерПоПорядку 	= Стр.НомерПоПорядку;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.Статусы.Сортировать("НомерПоПорядку");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимРедактированияПриИзменении(Элемент)
	РежимРедактированияГрафическаяСхема();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовГрафическаяСхема

&НаКлиенте
Процедура ГрафическаяСхемаВыбор(Элемент)
	
	Если Объект.РежимРедактирования = 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		АдресТекущейСтроки = "";
		
		Если ТипЗнч(Элемент.ТекущийЭлемент) 	 = Тип("ЭлементГрафическойСхемыДействие") Тогда
			УпаковатьДанныеЭлементГрафическойСхемы(АдресТекущейСтроки,Элемент.ТекущийЭлемент.Имя,"Статусы");
			ПараметрыФормы.Вставить("АдресТекущейСтроки",АдресТекущейСтроки);
			ОП = Новый ОписаниеОповещения("ОбработатьРезультатЗакрытияСтатусы",ЭтаФорма,Неопределено);
			ОткрытьФорму("Справочник.вогСостояниеПроцессов.Форма.РедактированиеСтатуса",ПараметрыФормы,ЭтаФорма,,,,ОП,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		ИначеЕсли ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыОбработка") Тогда
			ОП = Новый ОписаниеОповещения("ОбработатьРезультатЗакрытияОбработка",ЭтаФорма,Неопределено);
			УпаковатьДанныеЭлементГрафическойСхемы(АдресТекущейСтроки,Элемент.ТекущийЭлемент.Имя,"Обработчики");
			ПараметрыФормы.Вставить("АдресТекущейСтроки",АдресТекущейСтроки);
			ОткрытьФорму("Справочник.вогСостояниеПроцессов.Форма.РедактированиеОбработки",ПараметрыФормы,ЭтаФорма,,,,ОП,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		ИначеЕсли ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыУсловие") Тогда
			ОткрытьФорму("Справочник.вогСостояниеПроцессов.Форма.РедактированиеУсловия",ПараметрыФормы,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафическаяСхемаПриИзменении(Элемент)
	
	Если Объект.РежимРедактирования = 0 Тогда
		УдалениеЭлементаГрафичесокйСхемы();
		ИзменитьКоординатыЭлементГрафичесойСхемы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Статус(Команда)
	
	#Если Не ВебКлиент Тогда
		НовыйГрафическийЭлемент = ДобавитьЭлементНаСхему("Статус",ГрафическаяСхема);
		НовыйГрафическийЭлемент.Пояснение = "Видимость не установлена";
		ДобавитьЭлементГрафическойСхемыВТЧ(НовыйГрафическийЭлемент);
	#Иначе
		Сообщить(НСтр("ru = 'В режиме вэб клиента нельзя изменять графическую схему!!!'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Условие(Команда)
	
	#Если Не ВебКлиент Тогда
		НовыйГрафическийЭлемент = ДобавитьЭлементНаСхему("Условие",ГрафическаяСхема);
		ДобавитьЭлементГрафическойСхемыВТЧ(НовыйГрафическийЭлемент);
	#Иначе
		Сообщить(НСтр("ru = 'В режиме вэб клиента нельзя изменять графическую схему!!!'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Обработка(Команда)
	
	#Если Не ВебКлиент Тогда
		НовыйГрафическийЭлемент = ДобавитьЭлементНаСхему("Обработка",ГрафическаяСхема);
		ДобавитьЭлементГрафическойСхемыВТЧ(НовыйГрафическийЭлемент);
	#Иначе
		Сообщить(НСтр("ru = 'В режиме вэб клиента нельзя изменять графическую схему!!!'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСхему(Команда)
	ОчиститьСхемуНаСервере();
	НовыйГрафическийЭлемент = ДобавитьЭлементНаСхему("Старт", ГрафическаяСхема);
	ДобавитьЭлементГрафическойСхемыВТЧ(НовыйГрафическийЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура Завершение(Команда)
	НовыйГрафическийЭлемент = ДобавитьЭлементНаСхему("Завершение", ГрафическаяСхема);
	ДобавитьЭлементГрафическойСхемыВТЧ(НовыйГрафическийЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСхему(Команда)
	ПроверитьСхемуСервер();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСГрафическойСхемой

&НаСервере
Функция ПолучитьXMLТекущейСхемы(Схема)
	
	#Если Не ВебКлиент  Тогда
		// Получаем XML исходной схемы
		ИсходнаяСхемаСериализаторXDTO	= Новый СериализаторXDTO(ФабрикаXDTO);
		ИсходнаяСхемаЗаписьXML			= Новый ЗаписьXML;
		ИсходнаяСхемаЧтениеXML			= Новый ЧтениеXML;
		ИсходнаяСхемаЗаписьDOM			= Новый ЗаписьDOM;
		ИсходнаяСхемаЗаписьXML.УстановитьСтроку();
		ИсходнаяСхемаСериализаторXDTO.ЗаписатьXML(ИсходнаяСхемаЗаписьXML, Схема, НазначениеТипаXML.Явное);
		ИсходнаяСхемаXML				= ИсходнаяСхемаЗаписьXML.Закрыть();
		
		Возврат ИсходнаяСхемаXML;
	#Иначе
		Возврат Неопределено;
	#КонецЕсли
	
КонецФункции

&НаСервере
Функция	ПолучитьМакетНаСервере(ИмяМакета)
	ЭтаОбработка=РеквизитФормыВЗначение("Объект");
	Возврат ЭтаОбработка.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаСервере
Функция СортироватьМассивИдентификаторов(Знач Массив)
	
	Для i = 0 По Массив.ВГраница() Цикл
		Для j = i + 1 ПО Массив.ВГраница() Цикл
			Если Массив[i].СтарыйИД < Массив[j].СтарыйИД Тогда
				Замена = Массив[j];
				Массив[j] = Массив[i];
				Массив[i] = Замена;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Функция ДобавитьЭлементНаСхему(ИмяЭлемента, Схема)
	
	#Если Не ВебКлиент Тогда
		
		// Получаем XML исходной схемы
		ИсходнаяСхемаXML = ПолучитьXMLТекущейСхемы(Схема);
		
		// Получаем максимальный Id исходной схемы	
		ПостроительDOM					= Новый ПостроительDOM;
		ЧтениеXML						= Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ИсходнаяСхемаXML);
		ДокументDOM						= ПостроительDOM.Прочитать(ЧтениеXML);
		СписокЭлементовDOM				= ДокументDOM.ПолучитьЭлементыПоИмени("itemId");
		МаксимальныйИД					= 0;
		Для Каждого Элемент Из СписокЭлементовDOM Цикл
			
			Попытка
				ИД = Число(Элемент.ТекстовоеСодержимое);
				Если ИД > МаксимальныйИД Тогда
					МаксимальныйИД = ИД;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЦикла;	
		МаксимальныйИД					= МаксимальныйИД + 1;
		
		// Получаем XML эталонной схемы
		СхемаЭталон						= ПолучитьМакетНаСервере(ИмяЭлемента);
		ЭталонСхемаСериализаторXDTO		= Новый СериализаторXDTO(ФабрикаXDTO);
		ЭталонСхемаЗаписьXML			= Новый ЗаписьXML;
		ЭталонСхемаЧтениеXML			= Новый ЧтениеXML;
		ЭталонСхемаЗаписьDOM			= Новый ЗаписьDOM;
		ЭталонСхемаЗаписьXML.УстановитьСтроку();
		ЭталонСхемаСериализаторXDTO.ЗаписатьXML(ЭталонСхемаЗаписьXML, СхемаЭталон, НазначениеТипаXML.Явное);
		ЭталонСхемаXML					= ЭталонСхемаЗаписьXML.Закрыть();
		
		//Считать строку XML в DOM
		ПостроительDOM					= Новый ПостроительDOM;
		ЧтениеXML						= Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ЭталонСхемаXML);
		ДокументDOM						= ПостроительDOM.Прочитать(ЧтениеXML);
		СписокЭлементовDOM				= ДокументDOM.ПолучитьЭлементыПоИмени("item");
		
		РезультатПостроительDOM 		= Новый ПостроительDOM;
		ЧтениеXML						= Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ИсходнаяСхемаXML);
		РезультатДокументDOM			= РезультатПостроительDOM.Прочитать(ЧтениеXML);
		
		ИтоговыйXML						= "";
		МассивИД						= Новый Массив;
		МассивДобавленныхИД				= Новый Массив;
		ИмяДобавленногоКорневогоЭлемента= "";
		КорневойЭлементВыбран			= Ложь;
		
		Для Каждого Элемент Из СписокЭлементовDOM Цикл
			
			// Получаем текст с записью
			ЗаписьХМЛ = Новый ЗаписьXML;
			ЗаписьХМЛ.УстановитьСтроку();
			ЗаписьDOM = Новый ЗаписьDOM();
			ЗаписьDOM.Записать(Элемент, ЗаписьХМЛ);
			ВремТекст = ЗаписьХМЛ.Закрыть();
			
			Если Найти(ВремТекст, "<itemId>") = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Меняем ID и ID ссылки
			Текст = "";		
			Пока Найти(ВремТекст, "<itemId>") > 0 Цикл
				Позиция		= Найти(ВремТекст, "<itemId>") + СтрДлина("<itemId>");
				Символов	= Число(Найти(ВремТекст, "</itemId>") - Позиция);
				
				СтарыйИД	= Сред(ВремТекст, Позиция, Символов);
				НовыйИД		= Формат(МаксимальныйИД, "ЧРД=; ЧРГ=; ЧН=0; ЧГ=");
				Если СтарыйИД <> НовыйИД Тогда
					МассивИД.Добавить(Новый Структура("СтарыйИД, НовыйИД", СтарыйИД, НовыйИД));
				КонецЕсли;
				МассивДобавленныхИД.Добавить(Новый Структура("СтарыйИД, НовыйИД", СтарыйИД, НовыйИД));
				
				Текст		= Лев(ВремТекст, Позиция - 1) + НовыйИД + "</itemId>";
				ВремТекст	= Сред(ВремТекст, Найти(ВремТекст, "</itemId>") + СтрДлина("</itemId>"));
				МаксимальныйИД	= МаксимальныйИД + 1;
			КонецЦикла;		
			Если Не ПустаяСтрока(ВремТекст) Тогда
				Текст		= Текст + ВремТекст;
			КонецЕсли;
			
			// ItemCode
			Если НЕ КорневойЭлементВыбран И Найти(Текст, "<itemCode>") > 0 Тогда
				ВремТекст	= Текст;
				Позиция		= Найти(ВремТекст, "<itemCode>") + СтрДлина("<itemCode>");
				Символов	= Число(Найти(ВремТекст, "</itemCode>") - Позиция);
				
				СтарыйИД	= Сред(ВремТекст, Позиция, Символов);
				НовыйИД		= ИмяЭлемента + МассивДобавленныхИД[0].НовыйИД;
				
				ИмяДобавленногоКорневогоЭлемента	= НовыйИД;
				КорневойЭлементВыбран				= Истина;
				
				Текст		= Лев(ВремТекст, Позиция - 1) + НовыйИД + "</itemCode>" + Сред(ВремТекст, Найти(ВремТекст, "</itemCode>") + СтрДлина("</itemCode>"));
			КонецЕсли;
			
			ВремТекст = Текст;
			Текст = "";
			Пока Найти(ВремТекст, "<pointUUID>") > 0 Цикл
				Позиция		= Найти(ВремТекст, "<pointUUID>") + СтрДлина("<pointUUID>");
				Символов	= Число(Найти(ВремТекст, "</pointUUID>") - Позиция);
				
				СтарыйИД	= Сред(ВремТекст, Позиция, Символов);
				НовыйИД		= Новый УникальныйИдентификатор;			
				
				Текст		= Лев(ВремТекст, Позиция - 1) + НовыйИД + "</pointUUID>";
				ВремТекст	= Сред(ВремТекст, Найти(ВремТекст, "</pointUUID>") + СтрДлина("</pointUUID>"));
			КонецЦикла;		
			Если Не ПустаяСтрока(ВремТекст) Тогда
				Текст		= Текст + ВремТекст;
			КонецЕсли;
			
			ИтоговыйXML = ИтоговыйXML + Символы.ПС + Текст;
			
		КонецЦикла;
		
		МассивИД = СортироватьМассивИдентификаторов(МассивИД);
		Для Каждого Структура Из МассивИД Цикл
			Стр = "<connectFromItemId>" + Структура.СтарыйИД + "</connectFromItemId>";
			Пока Найти(ИтоговыйXML, Стр) > 0 Цикл
				ИтоговыйXML = СтрЗаменить(ИтоговыйXML, Стр, "<connectFromItemId>" + Структура.НовыйИД + "</connectFromItemId>");
			КонецЦикла;
			Стр = "<connectToItemId>" + Структура.СтарыйИД + "</connectToItemId>";
			Пока Найти(ИтоговыйXML, Стр) > 0 Цикл
				ИтоговыйXML = СтрЗаменить(ИтоговыйXML, Стр, "<connectToItemId>" + Структура.НовыйИД + "</connectToItemId>");
			КонецЦикла;
		КонецЦикла;
		
		
		ИсходнаяСхемаXML = Лев(ИсходнаяСхемаXML, СтрДлина(ИсходнаяСхемаXML) - СтрДлина("</FlowchartContextType>")) + ИтоговыйXML + "</FlowchartContextType>";
		НовыйСериализаторXDTO	= Новый СериализаторXDTO(ФабрикаXDTO);
		ЧтениеXML				= Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ИсходнаяСхемаXML);
		Схема					= НовыйСериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		
		// Перебираем схему и возвращаем добавленный элемент
		Для Каждого Элемент Из Схема.ЭлементыГрафическойСхемы Цикл
			Если Элемент.Имя = ИмяДобавленногоКорневогоЭлемента Тогда
				Возврат Элемент;
			КонецЕсли;
		КонецЦикла;
		
		// Не найден добавленный элемент
		Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлементГрафическойСхемыВТЧ(ГрафическийЭлемент)

	НоваяСтрокаТЧ = Объект.ЭлементыСхемы.Добавить();
	
	Если  ТипЗнч(ГрафическийЭлемент) 	 	 = Тип("ЭлементГрафическойСхемыСтарт") Тогда
		ЭлементСхемы = ПредопределенноеЗначение("Перечисление.вогТипыГрафическойСхемы.Старт");
	ИначеЕсли ТипЗнч(ГрафическийЭлемент) 	 = Тип("ЭлементГрафическойСхемыДействие") Тогда
		ЭлементСхемы = ПредопределенноеЗначение("Перечисление.вогТипыГрафическойСхемы.Статус");
	ИначеЕсли ТипЗнч(ГрафическийЭлемент) 	 = Тип("ЭлементГрафическойСхемыОбработка") Тогда
		ЭлементСхемы = ПредопределенноеЗначение("Перечисление.вогТипыГрафическойСхемы.Обработка");
	ИначеЕсли ТипЗнч(ГрафическийЭлемент) 	 = Тип("ЭлементГрафическойСхемыУсловие") Тогда
		ЭлементСхемы = ПредопределенноеЗначение("Перечисление.вогТипыГрафическойСхемы.Условие");
	Иначе
		ЭлементСхемы = ПредопределенноеЗначение("Перечисление.вогТипыГрафическойСхемы.Завершение");
	КонецЕсли;
	
	НоваяСтрокаТЧ.ИД 					= ГрафическийЭлемент.Имя;
	НоваяСтрокаТЧ.ИмяЭлемента 			= ГрафическийЭлемент.Наименование;
	НоваяСтрокаТЧ.ТипГрафическойСхемы 	= ЭлементСхемы;

	Если ЭлементСхемы = ПредопределенноеЗначение("Перечисление.вогТипыГрафическойСхемы.Статус") Тогда
		НайденныеСтрокиСтатусы = Объект.Статусы.НайтиСтроки(Новый Структура("ИД",ГрафическийЭлемент.Имя));
		Если НайденныеСтрокиСтатусы.Количество() = 0 Тогда
			НоваяСтрокаТЧ 		= Объект.Статусы.Добавить();
			НоваяСтрокаТЧ.ИД 	= ГрафическийЭлемент.Имя;
			НоваяСтрокаТЧ.Имя 	= ГрафическийЭлемент.Имя;
			// Стек статусов
			КоличествоЭлементовВСтеке = СтекДействийСтатусы.Количество();
			КоличествоЭлементовВСтеке = КоличествоЭлементовВСтеке + 1;
			СтрокаДобавления = СтекДействийСтатусы.Добавить();
			СтрокаДобавления.ИД = ГрафическийЭлемент.Имя;
			СтрокаДобавления.НомерПоПорядку = КоличествоЭлементовВСтеке;
		КонецЕсли;
	ИначеЕсли ЭлементСхемы 	= ПредопределенноеЗначение("Перечисление.вогТипыГрафическойСхемы.Обработка") тогда
		НайденныеСтрокиОбработки = Объект.Обработчики.НайтиСтроки(Новый Структура("ИД",ГрафическийЭлемент.Имя));
		Если НайденныеСтрокиОбработки.Количество() = 0 Тогда
			НоваяСтрокаТЧ 		= Объект.Обработчики.Добавить();
			НоваяСтрокаТЧ.ИД 	= ГрафическийЭлемент.Имя;
			НоваяСтрокаТЧ.Имя 	= ГрафическийЭлемент.Имя;
		КонецЕсли;
	ИначеЕсли ЭлементСхемы 	= ПредопределенноеЗначение("Перечисление.вогТипыГрафическойСхемы.Условие") Тогда
		НайденныеСтрокиУсловия = Объект.Условия.НайтиСтроки(Новый Структура("ИД",ГрафическийЭлемент.Имя));
		Если НайденныеСтрокиУсловия.Количество() = 0 Тогда
			НоваяСтрокаТЧ 		= Объект.Условия.Добавить();
			НоваяСтрокаТЧ.ИД 	= ГрафическийЭлемент.Имя;
			НоваяСтрокаТЧ.Имя 	= ГрафическийЭлемент.Имя;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеЭлементаГрафичесокйСхемы()
	
	Если Объект.ЭлементыСхемы.Количество() <> ГрафическаяСхема.ЭлементыГрафическойСхемы.Количество() Тогда
		Объект.ЭлементыСхемы.Очистить();
		Для каждого ТекущийЭлементГрафичесокйСхемы Из ГрафическаяСхема.ЭлементыГрафическойСхемы Цикл
			ДобавитьЭлементГрафическойСхемыВТЧ(ТекущийЭлементГрафичесокйСхемы);
		КонецЦикла;
		ОчитскаСвязныхТабличныхЧастей();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоординатыЭлементГрафичесойСхемы()

	ТочкиСоединенения = Новый Структура("НачалоЭлемента,КонецЭлемента");
	
	Для каждого СтрЭлемент Из ГрафическаяСхема.ЭлементыГрафическойСхемы Цикл
		Если ТипЗнч(СтрЭлемент) <> Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			Продолжить;
		КонецЕсли;
		ТочкиСоединенения.НачалоЭлемента 	= СтрЭлемент.НачалоЭлемент.Имя;
		ТочкиСоединенения.КонецЭлемента 	= ?(СтрЭлемент.КонецЭлемент <> Неопределено,СтрЭлемент.КонецЭлемент.Имя,"");
		ИзменитьКоординатыЭлементГрафичесойСхемыСервер(СтрЭлемент.НачалоЭлемент.Имя,ТочкиСоединенения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКоординатыЭлементГрафичесойСхемыСервер(ИмяЭлемента,ТочкиСоединенения)

	Для каждого СтрТЧ Из Объект.ЭлементыСхемы Цикл
		Если СтрТЧ.ИД 				= ИмяЭлемента Тогда
			СтрТЧ.НачалоЭлемента 	= ТочкиСоединенения.НачалоЭлемента;
			СтрТЧ.КонецЭлемента 	= ТочкиСоединенения.КонецЭлемента;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти

#Область ПрочиеФункцииИПроцедуры

&НаКлиенте
Процедура ДоступностьГрафическаяСхема()
	
//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГрафическаяСхема","Доступность",ЗначениеЗаполнено(Объект.Документ));
	
	Для каждого КомандыГрафическойСхемы Из Элементы.ГруппаКомандыСхемы.ПодчиненныеЭлементы Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,КомандыГрафическойСхемы.Имя,"Доступность",ЗначениеЗаполнено(Объект.Документ));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСхемуНаСервере()
	
	// Загрузка схемы
	СхемаЭталон				= ПолучитьМакетНаСервере("ПустаяСхема");
	НовыйСериализаторXDTO	= Новый СериализаторXDTO(ФабрикаXDTO);
	НоваяЗаписьXML			= Новый ЗаписьXML;
	ЧтениеXML				= Новый ЧтениеXML;
	НоваяЗаписьXML.УстановитьСтроку();
	НовыйСериализаторXDTO.ЗаписатьXML(НоваяЗаписьXML, СхемаЭталон, НазначениеТипаXML.Явное);
	СтрокаXML				= НоваяЗаписьXML.Закрыть();
	
	// Установка новой схемы вместо старой
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ГрафическаяСхема		= НовыйСериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	
	Объект.ЭлементыСхемы.Очистить();
	Объект.Статусы.Очистить();
	Объект.Обработчики.Очистить();
	Объект.Условия.Очистить();
	СтекДействийСтатусы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияГрафическаяСхема()
	
	Если Объект.РежимРедактирования = 1 Тогда
		Элементы.ГрафическаяСхема.Редактирование 	= Ложь;
		Элементы.ГрафическаяСхема.ТолькоПросмотр 	= Истина;
	Иначе
		Элементы.ГрафическаяСхема.Редактирование 	= Истина;
		Элементы.ГрафическаяСхема.ТолькоПросмотр 	= Ложь;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПроверитьСхемуСервер(Отказ = Ложь)

	ОбнаруженаОшибка = Ложь;
	
	Если Объект.ЭлементыСхемы.Количество() <> 0 Тогда
		
		// Проверка точки Завершить
		ТочкаЗавершить = Ложь;
		Для каждого ГрафическийЭлемент Из Объект.ЭлементыСхемы Цикл
			Если ГрафическийЭлемент.ТипГрафическойСхемы = ПредопределенноеЗначение("Перечисление.вогТипыГрафическойСхемы.Завершение") Тогда
				ТочкаЗавершить = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Проверка связи между объектами
		СвязиМеждуОбъектами = Истина;
		Для каждого ЭлементСвязи Из Объект.ЭлементыСхемы Цикл
			Если ЭлементСвязи.ТипГрафическойСхемы <> Перечисления.вогТипыГрафическойСхемы.Завершение Тогда
				Если ЭлементСвязи.НачалоЭлемента = "" ИЛИ ЭлементСвязи.КонецЭлемента = "" Тогда
					СвязиМеждуОбъектами = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ТочкаЗавершить Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Отсутвует точка завершения'"));
			ОбнаруженаОшибка = Истина;
		КонецЕсли;
		
		Если Не СвязиМеждуОбъектами Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не настроена связь между точками'"));
			ОбнаруженаОшибка = Истина;
		КонецЕсли;
		
		// Проверка первой точки графической схемы.
		НайденныеСтрокиЭлементыСхемы = Объект.ЭлементыСхемы.НайтиСтроки(Новый Структура("ИД","Старт1"));
		Если НайденныеСтрокиЭлементыСхемы.Количество() <> 0 Тогда
			НайденнаяСтрока =  НайденныеСтрокиЭлементыСхемы[0];
			НайденныеПервыеЭлементы = Объект.ЭлементыСхемы.НайтиСтроки(Новый Структура("ИД",НайденнаяСтрока.КонецЭлемента));
			Если НайденныеПервыеЭлементы.Количество() <> 0 Тогда
				ПервыйЭлемент = НайденныеПервыеЭлементы[0];
				Если ПервыйЭлемент.ТипГрафическойСхемы <> Перечисления.вогТипыГрафическойСхемы.Статус Тогда
					ОбнаруженаОшибка = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Первая точка должна быть статус!!!'"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка на точки завершение
		НайденныеСтрокиЗаврешение = Объект.ЭлементыСхемы.НайтиСтроки(Новый Структура("ТипГрафическойСхемы,ИмяЭлемента",Перечисления.вогТипыГрафическойСхемы.Завершение,"Завершение"));
		
		Если НайденныеСтрокиЗаврешение.Количество() > 1 Тогда
			ОбнаруженаОшибка = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Точка завершения должна быть одна!!!'"));
		КонецЕсли;
		
		Если Не ОбнаруженаОшибка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибок не обнаружено'"));
		КонецЕсли;
		
		Отказ = ОбнаруженаОшибка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УпаковатьДанныеЭлементГрафическойСхемы(АдресСтроки = "",ИмяЭлемента,Таблица)

	ТекущийОбъект 		= РеквизитФормыВЗначение("Объект");
	НайденныеСтроки 	= ТекущийОбъект[Таблица].НайтиСтроки(Новый Структура("ИД",ИмяЭлемента));
	ИсходящаяСтруктура 	= Новый Структура;
	ИсходящаяСтруктура.Вставить("ИД");
	ИсходящаяСтруктура.Вставить("Имя");
	ИсходящаяСтруктура.Вставить("Настройки");
	
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ТекущаяСтрокаДанных 			= НайденныеСтроки[0];
		ИсходящаяСтруктура.ИД 			= ТекущаяСтрокаДанных.ИД;
		ИсходящаяСтруктура.Имя 			= ТекущаяСтрокаДанных.Имя;
		ИсходящаяСтруктура.Настройки 	= ТекущаяСтрокаДанных.Настройки;
		Если Таблица = "Статусы" Тогда
			ИсходящаяСтруктура.Вставить("Отбор",ТекущаяСтрокаДанных.Отбор);
			ИсходящаяСтруктура.Вставить("ДоступностьПоСтатусу",ТекущаяСтрокаДанных.ДоступностьПоСтатусу);
			ИсходящаяСтруктура.Вставить("ОбработчикСобытия",ТекущаяСтрокаДанных.ОбработчикСобытия);
			ИсходящаяСтруктура.Вставить("Отбор",ТекущаяСтрокаДанных.Отбор);
		КонецЕсли;
		АдресСтроки = ПоместитьВоВременноеХранилище(ИсходящаяСтруктура);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчитскаСвязныхТабличныхЧастей()

	Текобъект = РеквизитФормыВЗначение("Объект");
	СписокЭлементыСхемы = Новый СписокЗначений;
	
	Для каждого СтрЭлемент Из Объект.ЭлементыСхемы Цикл
		СписокЭлементыСхемы.Добавить(СтрЭлемент.ИД);
	КонецЦикла;
	
	// Статусы		
	ТЗСтатусы 							= ТекОбъект.Статусы.Выгрузить();
	ПостроительЗапроса 					= Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных 	= Новый ОписаниеИсточникаДанных(ТЗСтатусы);
	Отбор 								= ПостроительЗапроса.Отбор.Добавить("ИД");
	Отбор.ВидСравнения 					= ВидСравнения.НеВСписке;
	Отбор.Использование 				= Истина;
	Отбор.Значение 						= СписокЭлементыСхемы;
	ПостроительЗапроса.Выполнить();
	ТаблицаДанныхСотбором 				= ПостроительЗапроса.Результат.Выгрузить();
	
	Для каждого Стр Из ТаблицаДанныхСотбором Цикл
		НайденаяСтрока = Текобъект.Статусы.Найти(Стр.ИД,"ИД");
		Если НайденаяСтрока <> Неопределено Тогда
			Текобъект.Статусы.Удалить(НайденаяСтрока);
		КонецЕсли;
	КонецЦикла; 
	
	// Условия
	ТЗУсловия 							= ТекОбъект.Условия.Выгрузить();
	ПостроительЗапроса 					= Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных 	= Новый ОписаниеИсточникаДанных(ТЗУсловия);
	Отбор 								= ПостроительЗапроса.Отбор.Добавить("ИД");
	Отбор.ВидСравнения 					= ВидСравнения.НеВСписке;
	Отбор.Использование 				= Истина;
	Отбор.Значение 						= СписокЭлементыСхемы;
	ПостроительЗапроса.Выполнить();
	ТаблицаДанныхСотбором 				= ПостроительЗапроса.Результат.Выгрузить();
	
	Для каждого Стр Из ТаблицаДанныхСотбором Цикл
		НайденаяСтрока = Текобъект.Условия.Найти(Стр.ИД,"ИД");
		Если НайденаяСтрока <> Неопределено Тогда
			Текобъект.Условия.Удалить(НайденаяСтрока);
		КонецЕсли;
	КонецЦикла; 

	// Точки обработки
	ТЗТочкиАлгоритма 					= ТекОбъект.ТочкиАлгоритма.Выгрузить();
	ПостроительЗапроса 					= Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных 	= Новый ОписаниеИсточникаДанных(ТЗТочкиАлгоритма);
	Отбор 								= ПостроительЗапроса.Отбор.Добавить("ИД");
	Отбор.ВидСравнения 					= ВидСравнения.НеВСписке;
	Отбор.Использование 				= Истина;
	Отбор.Значение 						= СписокЭлементыСхемы;
	ПостроительЗапроса.Выполнить();
	ТаблицаДанныхСотбором 				= ПостроительЗапроса.Результат.Выгрузить();
	
	Для каждого Стр Из ТаблицаДанныхСотбором Цикл
		НайденаяСтрока = Текобъект.ТочкиАлгоритма.Найти(Стр.ИД,"ИД");
		Если НайденаяСтрока <> Неопределено Тогда
			Текобъект.ТочкиАлгоритма.Удалить(НайденаяСтрока);
		КонецЕсли;
	КонецЦикла; 
	
	// Стек статусов
	ТЗСтекСтатусы 						= ДанныеФормыВЗначение(СтекДействийСтатусы,Тип("ТаблицаЗначений"));
	ПостроительЗапроса 					= Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных 	= Новый ОписаниеИсточникаДанных(ТЗСтекСтатусы);
	Отбор 								= ПостроительЗапроса.Отбор.Добавить("ИД");
	Отбор.ВидСравнения 					= ВидСравнения.НеВСписке;
	Отбор.Использование 				= Истина;
	Отбор.Значение 						= СписокЭлементыСхемы;
	ПостроительЗапроса.Выполнить();
	ТаблицаДанныхСотбором 				= ПостроительЗапроса.Результат.Выгрузить();
	
	Для каждого Стр Из ТаблицаДанныхСотбором Цикл
		НайденаяСтрока = ТЗСтекСтатусы.Найти(Стр.ИД,"ИД");
		Если НайденаяСтрока <> Неопределено Тогда
			ТЗСтекСтатусы.Удалить(НайденаяСтрока);
		КонецЕсли;
	КонецЦикла; 
	
	НомерПоПорядку = 1;
	Для каждого Стр Из ТЗСтекСтатусы Цикл
		Стр.НомерПоПорядку = НомерПоПорядку;
		НомерПоПорядку = НомерПоПорядку + 1;
	КонецЦикла;
	
	ТЗСтекСтатусы.Сортировать("НомерПоПорядку");
	
	СтекДействийСтатусы.Очистить();
	СтекДействийСтатусы.Загрузить(ТЗСтекСтатусы);
	
	ЗначениеВРеквизитФормы(ТекОбъект,"Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗакрытияСтатусы(РезультатЗакрытия,ДпополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ОбработатьРезультатСтатусСевер(РезультатЗакрытия);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатСтатусСевер(ВходящиеДанные)
	
	Если ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		
		ТекущийОбъект 	= РеквизитФормыВЗначение("Объект");
		ТаблицаСтатусы 	= ТекущийОбъект.Статусы;
		ТаблицаЭлементы = ТекущийОбъект.ЭлементыСхемы;
		
		НастройкиСтатуса 		= ПолучитьИзВременногоХранилища(ВходящиеДанные);
		ИДСтатуса 				= НастройкиСтатуса.ИД;
		ИмяСтатуса 				= НастройкиСтатуса.Имя;
		ТекущиеНастройкиСтатуса = НастройкиСтатуса.Настройки;
		
		НайденныеСтрокиСтатусы 	= ТаблицаСтатусы.НайтиСтроки(Новый Структура("ИД",ИДСтатуса));
		Если НайденныеСтрокиСтатусы.Количество() <> 0 Тогда
			СтрокаСтатусы 						= НайденныеСтрокиСтатусы[0];
			СтрокаСтатусы.Имя 					= ИмяСтатуса;
			СтрокаСтатусы.Настройки 			= ЗначениеВСтрокуВнутр(ТекущиеНастройкиСтатуса);
			СтрокаСтатусы.ДоступностьПоСтатусу 	= НастройкиСтатуса.Доступность;
			СтрокаСтатусы.ОбработчикСобытия		= НастройкиСтатуса.ОбработчикСобытия;
			СтрокаСтатусы.Отбор					= НастройкиСтатуса.Отбор;
		КонецЕсли;
		
		НайденныеСтрокиЭлементыСхемы = ТаблицаЭлементы.НайтиСтроки(Новый Структура("ИД",ИДСтатуса));
		Если НайденныеСтрокиЭлементыСхемы.Количество() <> 0 Тогда
			СтрокаЭлементыСхемы 			= НайденныеСтрокиЭлементыСхемы[0];
			СтрокаЭлементыСхемы.ИмяЭлемента = ИмяСтатуса;
		КонецЕсли;
		
		ПараметрыВидимости = "";
		Если НастройкиСтатуса.Доступность <> ""  И НастройкиСтатуса.Доступность <> Неопределено Тогда
			ТекущиеНастройкиВидимости 	= ЗначениеИзСтрокиВнутр(НастройкиСтатуса.Доступность);
			Если ТекущиеНастройкиВидимости.ПереключательПользовательРоли <> 3 Тогда
				ПараметрыВидимости 			= ?(ТекущиеНастройкиВидимости.ПереключательПользовательРоли = 0,"Видимость Роли","Видимость Пользователи");
			Иначе
				ПараметрыВидимости = "Доступно всем";
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
		ТекущийЭлементГрафическойСхемы = ГрафическаяСхема.ЭлементыГрафическойСхемы[ИДСтатуса];
		ТекущийЭлементГрафическойСхемы.Наименование = ИмяСтатуса;
		ТекущийЭлементГрафическойСхемы.Пояснение = ?(ПараметрыВидимости = "","Видимость не установлена", ПараметрыВидимости);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗакрытияОбработка(РезультатЗакрытия,ДпополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ОбработатьРезультатЗакрытияОбработкаСервер(РезультатЗакрытия);
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЗакрытияОбработкаСервер(ВходящиеДанные)

	Если ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда

		ТекущийОбъект 		= РеквизитФормыВЗначение("Объект");
		ТаблицаОбработки 	= ТекущийОбъект.Обработчики;
		ТаблицаЭлементы 	= ТекущийОбъект.ЭлементыСхемы;
		
		НастройкиОбработки 			= ПолучитьИзВременногоХранилища(ВходящиеДанные);
		ИДОбработки 				= НастройкиОбработки.ИД;
		ИмяОбработки 				= НастройкиОбработки.Имя;
		ТекущиеНастройкиОбработки 	= НастройкиОбработки.Настройки;
		
		НайденныеСтрокиОбработки 	= ТаблицаОбработки.НайтиСтроки(Новый Структура("ИД",ИДОбработки));
		Если НайденныеСтрокиОбработки.Количество() <> 0 Тогда
			СтрокаОбработка 			= НайденныеСтрокиОбработки[0];
			СтрокаОбработка.Имя 		= ИмяОбработки;
			СтрокаОбработка.Настройки 	= НастройкиОбработки.Настройки;
		КонецЕсли;
		
		НайденныеСтрокиЭлементыСхемы = ТаблицаЭлементы.НайтиСтроки(Новый Структура("ИД",ИДОбработки));
		Если НайденныеСтрокиЭлементыСхемы.Количество() <> 0 Тогда
			СтрокаЭлементыСхемы 			= НайденныеСтрокиЭлементыСхемы[0];
			СтрокаЭлементыСхемы.ИмяЭлемента = ИмяОбработки;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ТекущийОбъект,"Объект");
		ТекущийЭлементГрафическойСхемы = ГрафическаяСхема.ЭлементыГрафическойСхемы[ИДОбработки];
		ТекущийЭлементГрафическойСхемы.Наименование = ИмяОбработки;
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПостроитьПорядокСтатусов(ИДЭлемента = "",НомерПоПорядку = 1)

	НайденныеСтроки = Объект.ЭлементыСхемы.НайтиСтроки(Новый Структура("ИД",ИДЭлемента));
	
	Если НайденныеСтроки.Количество() <> 0  Тогда
		НайденыйЭлемент = НайденныеСтроки[0];
		ИДЭлемента 		= НайденыйЭлемент.КонецЭлемента;
		ТипЭлемента 	= НайденыйЭлемент.ТипГрафическойСхемы;
		Если ТипЭлемента = Перечисления.вогТипыГрафическойСхемы.Статус Тогда
			НайденныеСтрокиСтек = СтекДействийСтатусы.НайтиСтроки(Новый Структура("ИД",НайденыйЭлемент.ИД));
			Если НайденныеСтрокиСтек.Количество() <> 0 Тогда
				НайденнаяСтрокаСтек 				= НайденныеСтрокиСтек[0];
				НайденнаяСтрокаСтек.НомерПоПорядку 	= НомерПоПорядку;
			КонецЕсли;
			НомерПоПорядку = НомерПоПорядку + 1;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЭлемента = Перечисления.вогТипыГрафическойСхемы.Завершение Тогда
		Возврат;
	Иначе
		ПостроитьПорядокСтатусов(ИДЭлемента,НомерПоПорядку);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти