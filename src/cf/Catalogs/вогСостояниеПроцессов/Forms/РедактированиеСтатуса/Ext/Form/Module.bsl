
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЭтоАдресВременногоХранилища(Параметры.АдресТекущейСтроки) Тогда
	Отказ = Истина;
	КонецЕсли;
		
		Для каждого СтрКартинка Из Метаданные.ОбщиеКартинки Цикл
			Элементы.Картинка.СписокВыбора.Добавить(СтрКартинка.Имя,СтрКартинка.Синоним, ,БиблиотекаКартинок[СтрКартинка.Имя]);
		КонецЦикла;
		
	ТекущиеДанныеЭлемента = ПолучитьИзВременногоХранилища(Параметры.АдресТекущейСтроки);
	
	Имя = ТекущиеДанныеЭлемента.Имя;
	ИД	= ТекущиеДанныеЭлемента.ИД;
	
	НастройкиЭлемента = ТекущиеДанныеЭлемента.Настройки;
	
	Если НастройкиЭлемента = "" Тогда
		ЦветФона 			= Новый Цвет(255,255,255);
		ЦветТекста 			= Новый Цвет(51,51,51);
		Шрифт 				= ШрифтыСтиля.ОбычныйШрифтТекста;
		ОтображениеСтатуса 	= Перечисления.вогОтображениеКнопки.КартинкаИТекст;
		Картинка 			= Элементы.Картинка.СписокВыбора.НайтиПоЗначению("Информация").Значение;
		ПоложениеКартинки 	= Перечисления.вогПоложениеКартинки.Лево;
		ФигураОтображения	= Перечисления.вогФигураКнопки.Овальная;
	Иначе
		ПолученныеНастройки = ЗначениеИзСтрокиВнутр(НастройкиЭлемента);
		ЦветФона 			= ПолученныеНастройки.ЦветФона;
		ЦветТекста 			= ПолученныеНастройки.ЦветТекста;
		Шрифт 				= ПолученныеНастройки.Шрифт;
		ОтображениеСтатуса 	= ПолученныеНастройки.ОтображениеСтатуса;
		Картинка 			= Элементы.Картинка.СписокВыбора.НайтиПоЗначению(ПолученныеНастройки.Картинка).Значение;
		ПоложениеКартинки 	= ПолученныеНастройки.ПоложениеКартинки;
		Если ПолученныеНастройки.Свойство("ФигураОтображения") Тогда
			ФигураОтображения	= ПолученныеНастройки.ФигураОтображения;
		КонецЕсли;
		// { VOG RMV 2019-02-01
		//Если ПолученныеНастройки.Свойство("РолиИсполнителей") И ТипЗнч(ПолученныеНастройки.РолиИсполнителей) = Тип("Массив") Тогда
		//	Для каждого РольИсполнителей Из ПолученныеНастройки.РолиИсполнителей Цикл
		//		РолиИсполнителей.Добавить().Роль = РольИсполнителей;		
		//	КонецЦикла;	
		//КонецЕсли;
		// } VOG RMV 2019-02-01
	КонецЕсли;
	
	НастройкиДоступности 	= "";
	
	Если ТекущиеДанныеЭлемента.Свойство("ДоступностьПоСтатусу") И ТекущиеДанныеЭлемента.ДоступностьПоСтатусу <> "" Тогда
		НастройкиДоступности = ЗначениеИзСтрокиВнутр(ТекущиеДанныеЭлемента.ДоступностьПоСтатусу);
		ПереключательПользовательРоли = НастройкиДоступности.ПереключательПользовательРоли;
	Иначе
		ПереключательПользовательРоли = 0;
	КонецЕсли;
	
	Если ТекущиеДанныеЭлемента.Свойство("ДоступностьПоСтатусу") И ПереключательПользовательРоли = 0 И ТекущиеДанныеЭлемента.ДоступностьПоСтатусу <> "" Тогда
		ТЗРоли = НастройкиДоступности.ДоступностьТаблица;
		ТаблицаРолей.Загрузить(ТЗРоли);
	КонецЕсли;
	
	Если ТекущиеДанныеЭлемента.Свойство("ДоступностьПоСтатусу") И ПереключательПользовательРоли = 1 И ТекущиеДанныеЭлемента.ДоступностьПоСтатусу <> "" Тогда
		НастройкиДоступности = ЗначениеИзСтрокиВнутр(ТекущиеДанныеЭлемента.ДоступностьПоСтатусу);
		ЗначениеВДанныеФормы(НастройкиДоступности.ДоступностьТаблица,ПользователиГруппы);
	КонецЕсли;

	Если ТекущиеДанныеЭлемента.ОбработчикСобытия <> "" Тогда
		НастройкиОбработчиковСобытия 	= ЗначениеИзСтрокиВнутр(ТекущиеДанныеЭлемента.ОбработчикСобытия);
		ШаблонКода						= НастройкиОбработчиковСобытия.ШаблонКода;
		ТекстДействия 					= НастройкиОбработчиковСобытия.ТекстДействия;
	КонецЕсли;
	
	// Условия отбора
	Если ТекущиеДанныеЭлемента.Отбор <> "" Тогда
		НастройкиОтбора 			= ЗначениеИзСтрокиВнутр(ТекущиеДанныеЭлемента.Отбор);
		СхемаКомпановкиДанных 		= НастройкиОтбора.СхемаКомпановкиДанных;
		Статус 						= НастройкиОтбора.Статус;
		РежимВыполненеияУсловия 	= НастройкиОтбора.РежимВыполненеияУсловия;
		ВидимостьКнопки 			= НастройкиОтбора.ВидимостьКнопки;
		ШаблонСообщения				= НастройкиОтбора.ШаблонСообщения;
		РезультатУсловия			= НастройкиОтбора.РезультатУсловия;
		Если НастройкиОтбора.Свойство("НовыйОбъект") Тогда
			НовыйОбъект				= НастройкиОтбора.НовыйОбъект;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьИнтерфейсРолей("ЗаполнитьРоли", ТаблицаРолей);
	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриСозданииФормы", ТаблицаРолей.Количество()<> 0);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПереключательПользовательРолиПриИзменении(Неопределено);
	ВидимостьВыполененияУсловия();
	Заголовок = "Редактирование статуса: " + Имя;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПереключательПользовательРолиПриИзменении(Элемент)
	
	Если ПереключательПользовательРоли = 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Пользователи","Видимость",Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Роли","Видимость",Истина);
		ПользователиГруппы.ПолучитьЭлементы().Очистить();
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ДоступОткрыт","Видимость",Ложь);
		// { VOG RMV 2019-02-08
		//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"РолиИсполнителей","Видимость",Ложь);
		// } VOG RMV 2019-02-08
	ИначеЕсли ПереключательПользовательРоли = 1 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Пользователи","Видимость",Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Роли","Видимость",Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ДоступОткрыт","Видимость",Ложь);
		ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ИсключитьВсе");
	// { VOG RMV 2019-02-08
	//// Роли исполнителей
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"РолиИсполнителей","Видимость",Ложь);
	//ИначеЕсли ПереключательПользовательРоли = 2 Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Пользователи","Видимость",Ложь);
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Роли","Видимость",Ложь);
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ДоступОткрыт","Видимость",Ложь);
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"РолиИсполнителей","Видимость",Истина);
	// } VOG RMV 2019-02-08
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Пользователи","Видимость",Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Роли","Видимость",Ложь);
		ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ИсключитьВсе");
		ПользователиГруппы.ПолучитьЭлементы().Очистить();
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ДоступОткрыт","Видимость",Истина);
		// { VOG RMV 2019-02-08
		//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"РолиИсполнителей","Видимость",Ложь);
		// } VOG RMV 2019-02-08
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РежимВыполненеияУсловияПриИзменении(Элемент)
	ВидимостьВыполененияУсловия();
КонецПроцедуры

&НаКлиенте
Процедура СхемаКомпановкиДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//ЗаголовокФормыНастройкиСКД = НСтр("ru = 'Настройки схемы статуса" "'");
	//ОткрытьФормуРедактированияНастройкиСКДУсловия(ЗаголовокФормыНастройкиСКД);

КонецПроцедуры

&НаКлиенте
Процедура ШаблонКодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекстДействия = ПолучитьЗначениеРеквизита(ВыбранноеЗначение,"ПроизволныйКод");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРоли

&НаКлиенте
Процедура РолиПометкаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Роли.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользователиИГруппы

&НаКлиенте
Процедура ПользователиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			Отказ = Истина;
			
			Элементы.Пользователи.ТекущаяСтрока =
				Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
			
			Элементы.Пользователи.СкопироватьСтроку();
		КонецЕсли;
		
	ИначеЕсли Элементы.Пользователи.ТекущаяСтрока <> Неопределено Тогда
		Отказ = Истина;
		Элементы.Пользователи.СкопироватьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Отказ = Истина;
		
		Элементы.Пользователи.ТекущаяСтрока =
			Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
		
		Элементы.Пользователи.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередУдалением(Элемент, Отказ)
	
	СтрокаРодителя = Элемент.ТекущиеДанные.ПолучитьРодителя();
	
	Если СтрокаРодителя <> Неопределено Тогда
		Отказ = Истина;
		
		Если ТипЗнч(СтрокаРодителя.Пользователь) =
		        Тип("СправочникСсылка.ГруппыПользователей") Тогда
			
			ПоказатьПредупреждение(,
				НСтр("ru = 'Пользователи групп отображаются для сведения,
				           |что они получают доступ групп пользователей.
				           |Их нельзя удалить в этом списке.'"));
		Иначе
			ПоказатьПредупреждение(,
				НСтр("ru = 'Внешние пользователи групп отображаются для сведения,
				           |что они получают доступ групп внешних пользователей.
				           |Их нельзя удалить в этом списке.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.Пользователь = Неопределено;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Пользователь = Неопределено Тогда
		Элемент.ТекущиеДанные.НомерКартинки = -1;
		Элемент.ТекущиеДанные.Пользователь = ПредопределенноеЗначение(
			"Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока
	   И Элемент.ТекущиеДанные <> Неопределено
	   И Элемент.ТекущиеДанные.Пользователь = ПредопределенноеЗначение(
	     	"Справочник.Пользователи.ПустаяСсылка") Тогда
		
		Элемент.ТекущиеДанные.Пользователь = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЕстьИзменения = Ложь;
	Если РежимПодбора Тогда
		ПользователиГруппы.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	ИзмененныеСтроки = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого Значение Из ВыбранноеЗначение Цикл
			ЗначениеНеНайдено = Истина;
			Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
				Если Элемент.Пользователь = Значение Тогда
					ЗначениеНеНайдено = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеНеНайдено Тогда
				НовыйЭлемент = ПользователиГруппы.ПолучитьЭлементы().Добавить();
				НовыйЭлемент.Пользователь = Значение;
				ИзмененныеСтроки.Добавить(НовыйЭлемент.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Элемент.ТекущиеДанные.Пользователь <> ВыбранноеЗначение Тогда
		Элемент.ТекущиеДанные.Пользователь = ВыбранноеЗначение;
		ИзмененныеСтроки.Добавить(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
	Если ИзмененныеСтроки.Количество() > 0 Тогда
		ОбновленныеСтроки = Неопределено;
		ОбновитьПользователейГрупп(ИзмененныеСтроки, ОбновленныеСтроки);
		Для каждого ИдентификаторСтроки Из ОбновленныеСтроки Цикл
			Элементы.Пользователи.Развернуть(ИдентификаторСтроки);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПослеУдаления(Элемент)
	
	// Установка отображения дерева.
	ЕстьВложенные = Ложь;
	Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
		Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда
			ЕстьВложенные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Пользователи.Отображение =
		?(ЕстьВложенные, ОтображениеТаблицы.Дерево, ОтображениеТаблицы.Список);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	АдресСтрокиХранилища = ПодготовитьДанныеНастройкиСтатуса();
	Закрыть(АдресСтрокиХранилища);
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРоли(Команда)
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ВключитьВсе");
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьРоли(Команда)
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ИсключитьВсе");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	ОбработатьИнтерфейсРолей("ТолькоВыбранныеРоли");
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаРолейПоПодсистемам(Команда)
	ОбработатьИнтерфейсРолей("ГруппировкаПоПодсистемам");
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	ВыбратьПодобратьПользователей(Истина);
	РежимПодбора = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКод(Команда)
	
	СтруктураПолей = вогОбщегоНазначенияВызовСервера.ПолучитьСтруктуруПолейДляВыполненияПроизвольногоКода();
	СтруктураПолей.Код						= ТекстДействия;
	СтруктураПолей.ЗаголовокСобытия			= "Интерактивные действия";
	СтруктураПолей.Отказ					= Ложь;
	СтруктураПолей.ТолькоПроверка			= Истина;
	СтруктураПолей.ВыводитьСообщения		= Истина;
	СтруктураПолей.ВыполнятьПроизвольныйКод	= Истина;
	
	вогОбщегоНазначенияВызовСервера.ВыполнитьПроизвольныйКод(СтруктураПолей);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПодготовитьДанныеНастройкиСтатуса()

	ИсходящаяСтруктура = Новый Структура; 
	ИсходящаяСтруктура.Вставить("ИД",ИД);
	ИсходящаяСтруктура.Вставить("Имя",Имя);
	ИсходящаяСтруктура.Вставить("Настройки");
	ИсходящаяСтруктура.Вставить("Доступность",Неопределено);
	
	НастройкиСтатуса = Новый Структура;
	НастройкиСтатуса.Вставить("ЦветФона",ЦветФона);
	НастройкиСтатуса.Вставить("ЦветТекста",ЦветТекста);
	НастройкиСтатуса.Вставить("Шрифт",Шрифт);
	НастройкиСтатуса.Вставить("ОтображениеСтатуса",ОтображениеСтатуса);
	НастройкиСтатуса.Вставить("Картинка",Картинка);
	НастройкиСтатуса.Вставить("ПоложениеКартинки",ПоложениеКартинки);
	НастройкиСтатуса.Вставить("Фигураотображения",ФигураОтображения);
	//НастройкиСтатуса.Вставить("Фигураотображения",ФигураОтображения);
	
	// { VOG RMV 2019-02-01
	//табРолиИсполнителей = РолиИсполнителей.Выгрузить();
	//табРолиИсполнителей.Свернуть("Роль");
	//НастройкиСтатуса.Вставить("РолиИсполнителей", табРолиИсполнителей.ВыгрузитьКолонку("Роль"));
	// } VOG RMV 2019-02-01	
	
	ИсходящаяСтруктура.Настройки = НастройкиСтатуса;
	
	// Доступность
	Если ПереключательПользовательРоли = 0 И КоллекцияРолей.Количество() <> 0 Тогда
		
		ТаблицаРолей.Очистить();
		Для каждого Строка Из КоллекцияРолей Цикл
			ТаблицаРолей.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			"Роль." + Строка.Роль);
		КонецЦикла;
		
		ДоступностьСтатусов = Новый Структура("ПереключательПользовательРоли,ДоступностьТаблица");
		ТЗРоли 				= ДанныеФормыВЗначение(ТаблицаРолей,Тип("ТаблицаЗначений"));
		
		ДоступностьСтатусов.ПереключательПользовательРоли 	= ПереключательПользовательРоли;
		ДоступностьСтатусов.ДоступностьТаблица 				= ТЗРоли;
		ИсходящаяСтруктура.Доступность 						= ЗначениеВСтрокуВнутр(ДоступностьСтатусов);
		
	ИначеЕсли ПереключательПользовательРоли = 1 И ПользователиГруппы.ПолучитьЭлементы().Количество() <> 0 Тогда
		
		ДоступностьСтатусов 								= Новый Структура("ПереключательПользовательРоли,ДоступностьТаблица");
		ДоступностьСтатусов.ПереключательПользовательРоли 	= ПереключательПользовательРоли;
		ДоступностьСтатусов.ДоступностьТаблица 				= ДанныеФормыВЗначение(ПользователиГруппы,Тип("ДеревоЗначений"));
		ИсходящаяСтруктура.Доступность 						= ЗначениеВСтрокуВнутр(ДоступностьСтатусов);
		
	// { VOG RMV 2019-02-08
	//// Роли исполнителей
	//ИначеЕсли ПереключательПользовательРоли = 2 И РолиИсполнителей.Количество() Тогда
	//	ДоступностьСтатусов 								= Новый Структура("ПереключательПользовательРоли,ДоступностьТаблица");
	//	ДоступностьСтатусов.ПереключательПользовательРоли 	= ПереключательПользовательРоли;
	//	ДоступностьСтатусов.ДоступностьТаблица 				= ДанныеФормыВЗначение(РолиИсполнителей,Тип("ТаблицаЗначений"));
	//	ИсходящаяСтруктура.Доступность 						= ЗначениеВСтрокуВнутр(ДоступностьСтатусов);
	// } VOG RMV 2019-02-08
		
	Иначе
		
		ДоступностьСтатусов 								= Новый Структура("ПереключательПользовательРоли");
		ДоступностьСтатусов.ПереключательПользовательРоли 	= 3;
		ИсходящаяСтруктура.Доступность 						= ЗначениеВСтрокуВнутр(ДоступностьСтатусов);
		
	КонецЕсли;
	
	ИсходящаяСтруктура.Вставить("ОбработчикСобытия",ЗначениеВСтрокуВнутр(Новый Структура("ШаблонКода,ТекстДействия",ШаблонКода,ТекстДействия)));
	
	// Условия отбора
	УсловияОтбора 							= Новый Структура("СхемаКомпановкиДанных,Статус,РежимВыполненеияУсловия,ШаблонСообщения,ВидимостьКнопки,РезультатУсловия,НовыйОбъект");
	УсловияОтбора.СхемаКомпановкиДанных 	= СхемаКомпановкиДанных;
	УсловияОтбора.Статус 					= Статус;
	УсловияОтбора.РежимВыполненеияУсловия	= РежимВыполненеияУсловия;
	УсловияОтбора.ШаблонСообщения 			= ШаблонСообщения;
	УсловияОтбора.ВидимостьКнопки 			= ВидимостьКнопки;
	УсловияОтбора.РезультатУсловия			= РезультатУсловия;
	УсловияОтбора.НовыйОбъект				= НовыйОбъект;
	
	ИсходящаяСтруктура.Вставить("Отбор",ЗначениеВСтрокуВнутр(УсловияОтбора));
	
	АдресСтроки = ПоместитьВоВременноеХранилище(ИсходящаяСтруктура);
	
	Возврат АдресСтроки;
		
КонецФункции

&НаСервере
Процедура ОбработатьИнтерфейсРолей(Действие, ОсновнойПараметр = Неопределено)
		
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ОсновнойПараметр", ОсновнойПараметр);
	ПараметрыДействия.Вставить("Форма",            ЭтотОбъект);
	ПараметрыДействия.Вставить("КоллекцияРолей",   КоллекцияРолей);
	
	ПараметрыДействия.Вставить("СкрытьРольПолныеПрава",Ложь);
	ПараметрыДействия.Вставить("НазначениеРолей","ДляАдминистраторов");
	
	ПользователиСлужебный.ОбработатьИнтерфейсРолей(Действие, ПараметрыДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьПользователей(Подобрать)
	
	
	//Если НЕ Подобрать
	////   И ЗначениеЗаполнено(ТекущийПользователь)
	////   И (    ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.Пользователи")
	////      ИЛИ ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ГруппыПользователей") ) Тогда
	////
	////	ВыборИПодборВнешнихПользователей = Ложь;
	////
	////ИначеЕсли НЕ Подобрать
	////        И ИспользоватьВнешнихПользователей
	////        И ЗначениеЗаполнено(ТекущийПользователь)
	////        И (    ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ВнешниеПользователи")
	////           ИЛИ ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") ) Тогда
	////
	////	ВыборИПодборВнешнихПользователей = Истина;
	////Иначе
	////	ПоказатьВыборТипаПользователиИлиВнешниеПользователи(
	////		Новый ОписаниеОповещения("ВыбратьПодобратьПользователейЗавершение", ЭтотОбъект, Подобрать));
	////	Возврат;
	//КонецЕсли;
	
	ВыбратьПодобратьПользователейЗавершение(Подобрать);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьПользователейЗавершение(Подобрать)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(
		Элементы.Пользователи.ТекущиеДанные = Неопределено,
		Неопределено,
		Элементы.Пользователи.ТекущиеДанные.Пользователь));
	
	Если Подобрать Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
		ПараметрыФормы.Вставить("РасширенныйПодбор", Истина);
		ПараметрыФормы.Вставить("ПараметрыРасширеннойФормыПодбора", ПараметрыРасширеннойФормыПодбора());
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРасширеннойФормыПодбора()
	
	ЭлементыКоллекции = ПользователиГруппы.ПолучитьЭлементы();
	
	ВыбранныеПользователи = Новый ТаблицаЗначений;
	ВыбранныеПользователи.Колонки.Добавить("Пользователь");
	ВыбранныеПользователи.Колонки.Добавить("НомерКартинки");
	
	Для каждого Элемент Из ЭлементыКоллекции Цикл
		
		СтрокаВыбранныеПользователи = ВыбранныеПользователи.Добавить();
		СтрокаВыбранныеПользователи.Пользователь = Элемент.Пользователь;
		СтрокаВыбранныеПользователи.НомерКартинки = Элемент.НомерКартинки;
		
	КонецЦикла;
	
	ЗаголовокФормыПодбора = НСтр("ru = 'Подбор участников группы доступа'");
	ПараметрыРасширеннойФормыПодбора = Новый Структура;
	ПараметрыРасширеннойФормыПодбора.Вставить("ЗаголовокФормыПодбора", ЗаголовокФормыПодбора);
	ПараметрыРасширеннойФормыПодбора.Вставить("ВыбранныеПользователи", ВыбранныеПользователи);

	АдресХранилища = ПоместитьВоВременноеХранилище(ПараметрыРасширеннойФормыПодбора);
	Возврат АдресХранилища;
	
КонецФункции

&НаСервере
Процедура ОбновитьПользователейГрупп(ИдентификаторСтроки = Неопределено,
									ИзмененныеСтроки = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	ИзмененныеСтроки = Новый Массив;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		ЭлементыКоллекции = ПользователиГруппы.ПолучитьЭлементы();
		
	ИначеЕсли ТипЗнч(ИдентификаторСтроки) = Тип("Массив") Тогда
		ЭлементыКоллекции = Новый Массив;
		Для каждого Идентификатор Из ИдентификаторСтроки Цикл
			ЭлементыКоллекции.Добавить(ПользователиГруппы.НайтиПоИдентификатору(Идентификатор));
		КонецЦикла;
	Иначе
		ЭлементыКоллекции = Новый Массив;
		ЭлементыКоллекции.Добавить(ПользователиГруппы.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЕсли;
	
	УчастникиГруппыПользователей = Новый Массив;
	Для каждого Элемент Из ЭлементыКоллекции Цикл
		
		Если ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей")
		 ИЛИ ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
			УчастникиГруппыПользователей.Добавить(Элемент.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчастникиГруппыПользователей", УчастникиГруппыПользователей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.ГруппаПользователей В(&УчастникиГруппыПользователей)
	|	И СоставыГруппПользователей.Пользователь.Недействителен <> ИСТИНА";
	
	ПользователиГрупп = Запрос.Выполнить().Выгрузить();
	ПользователиГрупп.Индексы.Добавить("ГруппаПользователей");
	
	Для каждого Элемент Из ЭлементыКоллекции Цикл
		Элемент.Ссылка = Элемент.Пользователь;
		
		Если ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей")
		 ИЛИ ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
			// Заполнение пользователей группы.
			СтарыеПользователи = Элемент.ПолучитьЭлементы();
			Отбор = Новый Структура("ГруппаПользователей", Элемент.Пользователь);
			НовыеПользователи = ПользователиГрупп.НайтиСтроки(Отбор);
			
			ЕстьИзменения = Ложь;
			
			Если СтарыеПользователи.Количество() <> НовыеПользователи.Количество() Тогда
				СтарыеПользователи.Очистить();
				Для каждого Строка Из НовыеПользователи Цикл
					НовыйЭлемент = СтарыеПользователи.Добавить();
					НовыйЭлемент.Ссылка       = Строка.Пользователь;
					НовыйЭлемент.Пользователь = Строка.Пользователь;
				КонецЦикла;
				ЕстьИзменения = Истина;
			Иначе
				Индекс = 0;
				Для каждого Строка Из СтарыеПользователи Цикл
					
					Если Строка.Ссылка       <> НовыеПользователи[Индекс].Пользователь
					 ИЛИ Строка.Пользователь <> НовыеПользователи[Индекс].Пользователь Тогда
						
						Строка.Ссылка       = НовыеПользователи[Индекс].Пользователь;
						Строка.Пользователь = НовыеПользователи[Индекс].Пользователь;
						ЕстьИзменения = Истина;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
			
			Если ЕстьИзменения Тогда
				ИзмененныеСтроки.Добавить(Элемент.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Пользователи.ЗаполнитьНомераКартинокПользователей(
		ПользователиГруппы, "Ссылка", "НомерКартинки", ИдентификаторСтроки, Истина);
	
	// Установка отображения дерева.
	ЕстьДерево = Ложь;
	Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
		Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда
			ЕстьДерево = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.Пользователи.Отображение = ?(ЕстьДерево, ОтображениеТаблицы.Дерево, ОтображениеТаблицы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьВыполененияУсловия()

	Если РежимВыполненеияУсловия = 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ШаблонСообщения","Видимость",Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ВидимостьКнопки","Видимость",Истина);
		ШаблонСообщения = ПредопределенноеЗначение("Справочник.вогШаблоныСообщенийСтатусыДокументов.ПустаяСсылка");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ШаблонСообщения","Видимость",Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ВидимостьКнопки","Видимость",Ложь);
		ВидимостьКнопки = Ложь;
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуРедактированияНастройкиСКДУсловия(ЗаголовокФормыНастройкиСКД)
	
	//ТекущиеДанные = ПолучитьРеквизитыСКД();
	//ОткрытьФормуРедактированияНастройкиСКД(ТекущиеДанные.Ссылка, ЗаголовокФормыНастройкиСКД, ТекущиеДанные.АдресХранилищеСхемыКомпоновкиДанных, ТекущиеДанные.АдресХранилищеНастроекКомпоновкиДанных,);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыСКД()

	//ДанныеСКД = Новый Структура("Ссылка,АдресХранилищеСхемыКомпоновкиДанных,АдресХранилищеНастроекКомпоновкиДанных");
	//ДанныеСКД.Ссылка = СхемаКомпановкиДанных.Ссылка;
	//ДанныеСКД.АдресХранилищеСхемыКомпоновкиДанных = СхемаКомпановкиДанных.АдресХранилищеСхемыКомпоновкиДанных;
	////ДанныеСКД.АдресХранилищеНастроекКомпоновкиДанных = СхемаКомпановкиДанных.АдресХранилищеНастроекКомпоновкиДанных);

	//Возврат ДанныеСКД;

КонецФункции
 
&НаКлиенте
Процедура ОткрытьФормуРедактированияНастройкиСКД(ТекущиеДанные, Заголовок, АдресСхемы, АдресКомпоновки, ИмяТабличнойЧасти) 
	
	//АдресСхемыКомпоновкиДанных = АдресСхемы;
	//
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных",            	АдресСхемыКомпоновкиДанных);
	//ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных",         	АдресКомпоновки);
	//ПараметрыФормы.Вставить("Заголовок",                             	Заголовок);
	//ПараметрыФормы.Вставить("УникальныйИдентификатор",               	УникальныйИдентификатор);
	//ПараметрыФормы.Вставить("НеНастраиватьУсловноеОформление",       	Истина);
	//ПараметрыФормы.Вставить("НеНастраиватьПорядок",                  	Истина);
	//ПараметрыФормы.Вставить("НеНастраиватьОтбор",                    	Ложь);
	//ПараметрыФормы.Вставить("НеНастраиватьВыбор",                    	Ложь);
	//ПараметрыФормы.Вставить("НеПомещатьНастройкиВСхемуКомпоновкиДанных",Истина);
	//
	//ПараметрОповещения = Новый Структура("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	//ОписаниеОповещения = Новый ОписаниеОповещения("ИзмененитьСхемуКомпоновкиДанных", ЭтотОбъект, ПараметрОповещения);
	//
	//ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных", 
	//ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ИзмененитьСхемуКомпоновкиДанных(Результат, Параметры) Экспорт
	
	//Если Параметры <> Неопределено И Параметры.Свойство("ИмяТабличнойЧасти") Тогда
	//	
	//	ТекущиеДанные = Элементы[Параметры.ИмяТабличнойЧасти].ТекущиеДанные;
	//	
	//	Если ТекущиеДанные <> Неопределено И Не ПустаяСтрока(Результат) Тогда
	//		
	//		ТекущиеДанные.АдресХранилищеСхемыКомпоновкиДанных 		= АдресСхемыКомпоновкиДанных; // Адрес схемы остаётся тот же, что был передан в форму редактирования 
	//		ТекущиеДанные.АдресХранилищеНастроекКомпоновкиДанных 	= Результат;
	//		Модифицированность = Истина;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПустуюСхемуКомпоновкиДанных() 
	//Возврат ПоместитьВоВременноеХранилище(Новый СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПустуюНастройкуСхемыКомпоновкиДанных() 
//	Возврат ПоместитьВоВременноеХранилище(Новый НастройкиКомпоновкиДанных, Новый УникальныйИдентификатор);
 КонецФункции

 &НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка,ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка,ИмяРеквизита,Истина);
КонецФункции

#КонецОбласти
