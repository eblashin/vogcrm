#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьСписокКомандПоСсылке(СсылкаНаОбъект) Экспорт 
	
	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить("УникальныйИдентификатор");
	ТаблицаКоманд.Колонки.Добавить("ИмяКоманды");
	ТаблицаКоманд.Колонки.Добавить("ИмяКартинки");
	ТаблицаКоманд.Колонки.Добавить("Заголовок");
	ТаблицаКоманд.Колонки.Добавить("Обработчик");
	ТаблицаКоманд.Колонки.Добавить("Параметр1");
	ТаблицаКоманд.Колонки.Добавить("Параметр2");
	ТаблицаКоманд.Колонки.Добавить("Параметр3");
	ТаблицаКоманд.Колонки.Добавить("Параметр4");
	ТаблицаКоманд.Колонки.Добавить("Параметр5");
	// ++ VOG Солодов В.В. 02.07.2019 task 428
	ОписаниеТипаРодитель = Новый ОписаниеТипов("СправочникСсылка.вогДополнительныеКоманды");
	ТаблицаКоманд.Колонки.Добавить("Родитель", ОписаниеТипаРодитель);
	// -- VOG Солодов В.В. 02.07.2019
	
	// ++ VOG Солодов В.В. 07.04.2020 CRM-548
	ТипОбъекта = ТипЗнч(СсылкаНаОбъект);
	
	Если ТипОбъекта = Тип("СправочникСсылка.вогТорговыеТочки")
		Или ТипОбъекта = Тип("СправочникСсылка.вогЮридическиеЛица")
		Или ТипОбъекта = Тип("СправочникСсылка.Партнеры") Тогда
		
		Если ТипОбъекта = Тип("СправочникСсылка.Партнеры") Тогда
			ИмяРеквизита = "вогРозничный";
		Иначе
			ИмяРеквизита = "Розничный";
		КонецЕсли;
		
		Розничный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита, Истина);
		
		Если Розничный = Истина Тогда
			Возврат ТаблицаКоманд;
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 07.04.2020
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	вогДополнительныеКоманды.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	вогДополнительныеКоманды.Порядок КАК Порядок,
		|	вогДополнительныеКоманды.Параметр1 КАК Параметр1,
		|	вогДополнительныеКоманды.Параметр2 КАК Параметр2,
		|	вогДополнительныеКоманды.Параметр3 КАК Параметр3,
		|	вогДополнительныеКоманды.Параметр4 КАК Параметр4,
		|	вогДополнительныеКоманды.Параметр5 КАК Параметр5,
		|	вогДополнительныеКоманды.Обработчик КАК Обработчик,
		|	вогДополнительныеКоманды.ИмяКартинки КАК ИмяКартинки,
		|	вогДополнительныеКоманды.Наименование КАК ИмяКоманды,
		|	вогДополнительныеКоманды.Источник КАК Источник,
		|	вогДополнительныеКоманды.Ссылка КАК Ссылка,
		|	вогДополнительныеКоманды.Родитель КАК Родитель,
		// ++ VOG Солодов В.В. 15.08.2019 task 553
		|	вогДополнительныеКоманды.ТекстЗапроса КАК ТекстЗапроса,
		|	вогДополнительныеКоманды.ХранилищеПараметровЗапроса КАК ХранилищеПараметровЗапроса
		// -- VOG Солодов В.В. 15.08.2019
		|ИЗ
		|	Справочник.вогДополнительныеКоманды КАК вогДополнительныеКоманды
		|ГДЕ
		|	%1
		|	И вогДополнительныеКоманды.ПометкаУдаления = ЛОЖЬ
		// ++ VOG Солодов В.В. 02.07.2019 task 428
		|	И вогДополнительныеКоманды.ЭтоГруппа = ЛОЖЬ
		// -- VOG Солодов В.В. 02.07.2019
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	ИмяКоманды";
	
	Если СсылкаНаОбъект = Неопределено Тогда
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, "вогДополнительныеКоманды.Источник = НЕОПРЕДЕЛЕНО");
	Иначе
		ТекстЗапроса = СтрШаблон(ТекстЗапроса, "ТИПЗНАЧЕНИЯ(вогДополнительныеКоманды.Источник) = &Тип");
		Запрос.УстановитьПараметр("Тип", ТипЗнч(СсылкаНаОбъект));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// ++ VOG Ульянов И.В. 03.12.2019 task 963
	УстановитьПривилегированныйРежим(Истина);
	// -- VOG Ульянов И.В. 03.12.2019 task 963
	
	Пока Выборка.Следующий() Цикл
		
		Если ПроверитьУсловияКоманды(Выборка.Ссылка,
			СсылкаНаОбъект,
			// ++ VOG Солодов В.В. 15.08.2019 task 553
			Выборка.ТекстЗапроса,
			Выборка.ХранилищеПараметровЗапроса) Тогда
			// -- VOG Солодов В.В. 15.08.2019
			
			НоваяКоманда = ТаблицаКоманд.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКоманда, Выборка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// ++ VOG Ульянов И.В. 03.12.2019 task 963
	УстановитьПривилегированныйРежим(Ложь);
	// -- VOG Ульянов И.В. 03.12.2019 task 963
	
	Возврат ТаблицаКоманд;
	
КонецФункции

// VOG Солодов В.В. 15.08.2019 task 553 // Добавлены параметры ТекстЗапроса и ХранилищеПараметровЗапроса
Функция ПроверитьУсловияКоманды(Команда, ОбъектПроверки, ТекстЗапроса, ХранилищеПараметровЗапроса) Экспорт
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 15.08.2019 task 553
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат ПроверитьУсловияКомандыПоЗапросу(Команда, ОбъектПроверки, ТекстЗапроса, ХранилищеПараметровЗапроса);
	Иначе
		Возврат ПроверитьУсловияКомандыПоСхемеКомпоновки(Команда, ОбъектПроверки)
	КонецЕсли;
	// До Изменения
	// Предыдущий код вынесен в отдельную процедуру "ПроверитьУсловияКомандыПоСхемеКомпоновки"
	// -- VOG Солодов В.В. 15.08.2019
	
КонецФункции

// Помещает во временное хранилище схему компоновки данных,
// настройки компоновки данных и возвращает их адреса
//
// Параметры:
//	ЭлементНастройки - Объект, ДанныеФормыСтруктура - команда, для которой требуется получить адреса
//
// Возвращаемое значение:
//	Структура - структура, содержащая адреса
//				СхемаКомпоновкиДанных - Строка - адрес схемы компоновки данных
//				НастройкиКомпоновкиДанных - Строка - адрес настроек компоновки данных
//
Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(ЭлементНастройки) Экспорт
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	Если ТипЗнч(ЭлементНастройки) = Тип("ДанныеФормыСтруктура") Тогда
		ЭлементНастройкиСсылка = ЭлементНастройки.Ссылка;
	Иначе
		ЭлементНастройкиСсылка = ЭлементНастройки;
	КонецЕсли;
	
	// Получим схему компоновки данных
	Если ЗначениеЗаполнено(ЭлементНастройки.СхемаКомпоновкиДанных) 
		Или ЭлементНастройкиСсылка.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(ЭлементНастройкиСсылка, 
			ЭлементНастройки.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		
	Иначе
		СхемаКомпоновкиДанных = ЭлементНастройкиСсылка.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено И ПустаяСтрока(ЭлементНастройки.СхемаКомпоновкиДанных) Тогда
		
		СхемаКомпоновкиДанных = 
			Справочники.вогДополнительныеКоманды.ПолучитьМакет("ШаблоннаяСхемаКомпоновкиДанных");
			
	ИначеЕсли СхемаКомпоновкиДанных = Неопределено 
		И Не ПустаяСтрока(ЭлементНастройки.СхемаКомпоновкиДанных) Тогда
			
		СхемаКомпоновкиДанных = 
			Справочники.вогДополнительныеКоманды.ПолучитьМакет(ЭлементНастройки.СхемаКомпоновкиДанных);
		
	КонецЕсли;
	
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	Настройки = ЭлементНастройкиСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

// Функция возвращает структуру с синонимом и схемой компоновки данных по имени макета
//
// Параметры:
//	КомандаСсылка - Ссылка, СправочникСсылка.вогДополнительныеКоманды - команда, для которой требуется получить схему
//	ИмяМакета - Строка, Неопределено - имя получаемого макета схемы компоновки данных
//
// Возвращаемое значение:
//	Структура - Описание - Строка - синоним получаемого макета
//				СхемаКомпоновкиДанных - СхемаКомпоновкиДанных, Неопределено - найденная схема компоновки данных
//				НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных, Неопределено - найденные настройки компоновки данных
//
Функция ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(КомандаСсылка, ИмяМакета = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание",                  "");
	ВозвращаемоеЗначение.Вставить("СхемаКомпоновкиДанных",     Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкиКомпоновкиДанных", Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	вогДополнительныеКоманды.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	вогДополнительныеКоманды.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных 
	|ИЗ
	|	Справочник.вогДополнительныеКоманды КАК вогДополнительныеКоманды
	|ГДЕ
	|	вогДополнительныеКоманды.Ссылка = &КомандаСсылка");
	
	Запрос.УстановитьПараметр("КомандаСсылка", КомандаСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		
		Если Выборка.Следующий() Тогда
			ВозвращаемоеЗначение.Описание 					= "Произвольная";
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных 		= Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
			ВозвращаемоеЗначение.НастройкиКомпоновкиДанных 	= Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
		КонецЕсли;
		
	Иначе
		
		Макет = Метаданные.НайтиПоТипу(ТипЗнч(КомандаСсылка)).Макеты.Найти(ИмяМакета);
		
		Если Не Макет = Неопределено Тогда
			
			ВозвращаемоеЗначение.Описание 				= Макет.Синоним;
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных 	= 
				Справочники.вогДополнительныеКоманды.ПолучитьМакет(ИмяМакета);
				
			Если Выборка.Следующий() Тогда
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ШаблоныСхемыКомпоновкиДанных() Экспорт
	
	Шаблоны = Новый Массив;
	
	Для Каждого Макет Из Метаданные.Справочники.вогДополнительныеКоманды.Макеты Цикл
		
		Если Макет.ТипМакета <> Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			Продолжить;
		КонецЕсли;
				
		Шаблоны.Добавить(Новый Структура("Имя, Синоним", Макет.Имя, Макет.Синоним));
		
	КонецЦикла;
	
	Возврат Шаблоны;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ++ VOG Солодов В.В. 15.08.2019 task 553
Функция ПроверитьУсловияКомандыПоСхемеКомпоновки(Команда, ОбъектПроверки)
	
	Результат = Ложь;
	СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(Команда.Ссылка, Команда.СхемаКомпоновкиДанных);
	
	Если Не ПустаяСтрока(СхемаИНастройки.Описание)
		И СхемаИНастройки.СхемаКомпоновкиДанных <> Неопределено 
		И СхемаИНастройки.НастройкиКомпоновкиДанных <> Неопределено Тогда
		
		СКД 			= СхемаИНастройки.СхемаКомпоновкиДанных;
		НастройкиСКД 	= СхемаИНастройки.НастройкиКомпоновкиДанных;
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
		НастройкиСКД = КомпоновщикНастроек.Настройки;
		
		ДетальнаяГруппировка = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ДетальнаяГруппировка.Использование = Истина;
		
		ВыбранноеАвтоПоле = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеАвтоПоле.Использование = Истина;
		
		Для Каждого ПолеВыбора Из НастройкиСКД.ДоступныеПоляВыбора.Элементы Цикл
			
			// Пропускаем системные поля
			Если Лев(Строка(ПолеВыбора.Поле), 13) = "СистемныеПоля" 
				Или Лев(Строка(ПолеВыбора.Поле), 12) = "SystemFields" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			// Пропускаем параметры
			Если Лев(Строка(ПолеВыбора.Поле), 15) = "ПараметрыДанных" 
				Или Лев(Строка(ПолеВыбора.Поле), 14) = "DataParameters" Тогда 
				
				Продолжить; 
				
			КонецЕсли;
			
			ВыбранныеПоляДетальнаяГруппировка = НастройкиСКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных(ПолеВыбора.Поле);
			
		КонецЦикла;
		
		ПараметрыНастройки = НастройкиСКД.ПараметрыДанных;
		
		//проверка на конкретный элемент
		ЗначениеПараметра = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Ссылка"));
		
		Если ЗначениеПараметра <> Неопределено
			И ОбъектПроверки = Неопределено Тогда

			Возврат Ложь;
			
		ИначеЕсли ЗначениеПараметра <> Неопределено Тогда
			
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение 		= ОбъектПроверки.Ссылка;
			
		КонецЕсли;
		
		//Если в скд и команде одинаковое название параметров

		Для ИтераторПараметров = 1 По 5 Цикл
			ПараметрКоманды = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Параметр" + ИтераторПараметров));
			
			Если ПараметрКоманды <> Неопределено Тогда
				ПараметрКоманды.Использование = Истина;
				ПараметрКоманды.Значение 		= Команда["Параметр" + ИтераторПараметров];
			КонецЕсли;
		
		КонецЦикла; 
		
		//Запилим возможность определять кнопки по пользователям через скд
		ПараметрТекущийПользователь = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТекущийПользователь"));
		
		Если ПараметрТекущийПользователь <> Неопределено Тогда
			
			ПараметрТекущийПользователь.Использование = Истина;
			ПараметрТекущийПользователь.Значение 		= Пользователи.ТекущийПользователь();
			
		КонецЕсли;
		
		//Запилим возможность определять кнопки по подчинности пользователя через скд
		ПараметрПодчиненныеСотрудники = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("вогПодчиненныеСотрудники"));
		
		Если ПараметрПодчиненныеСотрудники <> Неопределено Тогда
			
			ПараметрПодчиненныеСотрудники.Использование = Истина;
			
			//Спи = Новый СписокЗначений;
			//Спи.ЗагрузитьЗначения(ПараметрыСеанса.вогПодчиненныеСотрудники);
			
			Для каждого Сотрудника Из ПараметрыСеанса.вогПодчиненныеСотрудники Цикл
				ПараметрПодчиненныеСотрудники.Значение.Добавить(Сотрудника);
			КонецЦикла;
			
		КонецЕсли;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, 
			НастройкиСКД,
			,
			,
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		Результат = ТаблицаРезультат.Количество() > 0;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ПроверитьУсловияКомандыПоЗапросу(Команда, ОбъектПроверки, ТекстЗапроса, ХранилищеПараметровЗапроса)
	
	Результат = Ложь;
	
	Запрос 							= Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц 	= Новый МенеджерВременныхТаблиц();
	
	ПараметрыЗапроса = ХранилищеПараметровЗапроса.Получить();
	
	Если Не ТипЗнч(ПараметрыЗапроса) = Тип("ТаблицаЗначений") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ОписаниеПараметра Из ПараметрыЗапроса Цикл
		
		// ++ VOG Солодов В.В. 30.12.2019 
		Если НРег(ОписаниеПараметра.ИмяПараметра) = НРег("Ссылка")
		// До изменения
		//Если ОписаниеПараметра.ИмяПараметра = "Ссылка"
		// -- VOG Солодов В.В. 30.12.2019
			И Не ОбъектПроверки = Неопределено Тогда
			
			Запрос.УстановитьПараметр(ОписаниеПараметра.ИмяПараметра, ОбъектПроверки.Ссылка);
			
		ИначеЕсли ОписаниеПараметра.ИмяПараметра = "ТекущийПользователь" Тогда
			
			Запрос.УстановитьПараметр(ОписаниеПараметра.ИмяПараметра, Пользователи.ТекущийПользователь());
			
		ИначеЕсли ОписаниеПараметра.ИмяПараметра = "вогПодчиненныеСотрудники" Тогда
			
			СписокЗначенийПараметра = Новый СписокЗначений;
			
			Для Каждого Сотрудник Из ПараметрыСеанса.вогПодчиненныеСотрудники Цикл
				СписокЗначенийПараметра.Добавить(Сотрудник);
			КонецЦикла;
			
			Запрос.УстановитьПараметр(ОписаниеПараметра.ИмяПараметра, СписокЗначенийПараметра);
			
		Иначе
			
			Значение = ОписаниеПараметра.ЗначениеПараметра;
			
			Если ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
				
				ЗаданныеТипы = Значение.Типы();
				
				Если ЗаданныеТипы.Количество() > 0 Тогда
					
					Запрос.УстановитьПараметр(ОписаниеПараметра.ИмяПараметра, ЗаданныеТипы[0]);
					
				Иначе
					ИмяПараметраТип = ОписаниеПараметра.ИмяПараметра;
					Прервать;
				КонецЕсли;
				
			Иначе
				
				Запрос.УстановитьПараметр(ОписаниеПараметра.ИмяПараметра, Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		
		РезультатВыполнения = Запрос.Выполнить();
		Результат = Не РезультатВыполнения.Пустой();
		
	Исключение
		
		ТекстСообщения = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Результат;
		
	КонецПопытки;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Возврат Результат;
	
КонецФункции
// -- VOG Солодов В.В. 15.08.2019

#КонецОбласти

#КонецЕсли