#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Установка значения реквизита АдресКартинки.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ Объект.CRM_Фотография.Пустая() Тогда
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
			// +CRM
			Если ПустаяСтрока(АдресКартинки) Тогда
				ВывестиНедоступностьКартинки();
			КонецЕсли;	
			// -CRM
		Иначе
			АдресКартинки = "";
		КонецЕсли;
		CRM_УправлениеВидимостьюРамкиКартинки();
	КонецЕсли;
	
	СкрытьРаскрытьВсеГруппы(Истина);
	
	 //++ Подключаемые дополнительные команды
	 вогУправлениеИнтерфейсомСервер.ПодключитьДополнительныеКоманды(ЭтаФорма, Элементы.ФормаГруппаДействия);
	 //-- Подключаемые дополнительные команды
	
КонецПроцедуры
 
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//Статус согласования
	ОбновитьДанныеСтатусаСогласования();
	
	Если НЕ ТекущийОбъект.CRM_Фотография.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(ТекущийОбъект.CRM_Фотография, УникальныйИдентификатор);
		// +CRM
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
		// -CRM
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюРамкиКартинки();		
	
//	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков, ЭтотОбъект);
	
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакет(Объект.Ссылка,ИнформацияОбъект,Метаданные.Справочники.вогТорговоеОборудование,ЭтаФорма,"КарточкаОбъекта");
		
КонецПроцедуры
 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Выделить команду навигации при открытии формы объекта
	ВыделитьКомандуНавигацииПриОткрытииФормы();
	
	ЭтаФорма.Элементы.Недостатки.Видимость = НЕ Объект.ДоступностьКЗаказуПриТиповомПроекте;
	
КонецПроцедуры

#КонецОбласти

#Область ИнформацияОбъект

&НаКлиенте
Процедура ИнформацияОбъектОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка 				= Ложь;
	ТекстОбработчика 					= "";
	ТаблицаОбработчики 					= ЭтаФорма["КарточкаОбъекта_Обработчики"];
	ТаблицаРасшифровка					= ЭтаФорма["КарточкаОбъекта_Расшифровка"];
	ТаблицаРасшифровкиКлассификатора 	= ЭтаФорма["КарточкаОбъекта_РасшифровкаКлассификатора"];
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Гиперссылка_") <> 0 Тогда
		ИмяГиперссылки 		= СтрЗаменить(Расшифровка,"Гиперссылка_","");
		Для каждого ТекущийОбработчик Из ТаблицаОбработчики Цикл
			Если ТекущийОбработчик.Имя = ИмяГиперссылки Тогда
				ТекстОбработчика = ТекущийОбработчик.ПроизвольныйКод;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение	
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Пользователи") Тогда
		// Сверунть группу Контакты
		СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
		ВыполнитьПереходСтраницы("СтраницаМенеджеры");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		// Сверунть группу Контакты
		СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
		ВыполнитьПереходСтраницы("СтраницаКонтакты");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		ПоказатьЗначение(Неопределено,Расшифровка);
	ИначеЕсли вогОбщегоНазначенияВызовСервера.ПроверитьЭтоСсылка(ТипЗнч(Расшифровка)) Тогда
		
		Если ТипЗнч(Расшифровка) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы")
			Или (ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов") 
			И ТаблицаРасшифровкиКлассификатора.НайтиСтроки(Новый Структура("Имя", Расшифровка)).Количество() <> 0) Тогда
			
			вогУправлениеИнтерфейсомКлиент.ОбработатьРасшифровкуИнформации(ЭтотОбъект, Расшифровка);
			
		Иначе
			
			ПоказатьЗначение(Неопределено, Расшифровка);	
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Расшифровка_") <> 0 Тогда
		ИмяРасшифровки 	= СтрЗаменить(Расшифровка,"Расшифровка_","");
		ИмяПараметра 	= "Объект." + ИмяРасшифровки;
		Для каждого ТекущийОбработчик Из ТаблицаРасшифровка Цикл
			Если ТекущийОбработчик.Имя = ИмяПараметра Тогда
				ТекстОбработчика = ТекущийОбработчик.ТекстОбработчика;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"КИ_") <> 0 Тогда
		Расшифровка = СокрЛП(СтрЗаменить(Расшифровка,"КИ_",""));
		Результат = ОпределитьТипКонтактнойИнформации(Объект.Ссылка,Расшифровка);
		Если Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(Результат.Представление, Объект.Ссылка);
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
			//УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(Результат.Представление, "Яндекс.Карты");
			СтруктураАдреса 	= Новый Структура; 
			СтруктураАдреса.Вставить("Представление", Результат.Представление);
			СписокКарт 			= Новый СписокЗначений;
			СписокКарт.Добавить("вогГеокодирование","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
			ОписаниеОповещения 	= Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокКарт.Получить(0)); 
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо("", Результат.Представление, Результат.Тип);
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
			УправлениеКонтактнойИнформациейКлиент.ПерейтиПоВебСсылке("", Результат.Представление, Результат.Тип);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов") Тогда
		НайденныеСтроки = ТаблицаРасшифровкиКлассификатора.НайтиСтроки(Новый Структура("Имя",Расшифровка));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			WebService 	= НайденныеСтроки[0].Расшифровка;
			Результат 	= вогИнтеграцияСУчетнойСистемой.СформироватьОтчетЧерезWebService(Объект.Ссылка,WebService);
			Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
				Результат.ОтображатьСетку = Ложь;
				Результат.ОтображатьЗаголовки = Ложь;
				ЗаголовокОтчета = Строка(Расшифровка) +" "+Объект.Ссылка;
				Результат.Показать(НСтр("ru = '"+ЗаголовокОтчета+"'"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		вогОбщегоНазначенияКлиент.РасшифрокаВнешниеДанныеМакет(Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьТипКонтактнойИнформации(Ссылка,Представление)

	ИсходящаяСтруктура 	= Новый Структура("Тип, Вид, Широта, Долгота, Представление");
	ТекущаяТаблица 		= ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	" + (ТекущаяТаблица) + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактнаяИнформация.НомерСтроки = &Представление";
	
	Запрос.УстановитьПараметр("Ссылка", 		Ссылка);
	Запрос.УстановитьПараметр("Представление", 	Число(Представление));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ИсходящаяСтруктура, ВыборкаИзРезультатаЗапроса);
	КонецЕсли;
	
	Возврат ИсходящаяСтруктура;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФорма

&НаКлиенте
Процедура ДоступностьКЗаказуПриТиповомПроектеПриИзменении(Элемент)
		ЭтаФорма.Элементы.Недостатки.Видимость = НЕ Объект.ДоступностьКЗаказуПриТиповомПроекте;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Перем ИдентификаторФайла;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр =  НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		                            + "|Все файлы(*.*)|*.*"
		                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат icon(*.ico)|*.ico"
		                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаДиалогЗавершение",
		ЭтотОбъект,
		Новый Структура("ИмяРеквизита", "ДанныеФайлаКартинки"));
		
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
		
	Иначе
		Фильтр =  НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		                            + "|Все файлы(*.*)|*.*"
		                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат icon(*.ico)|*.ico"
		                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
		
		ВыборИзображения   = Истина;
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);
		ВыборИзображения   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] =
		Новый Структура("ИмяБезРасширения, Расширение, ВремяИзменения, УниверсальноеВремяИзменения");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаИнициализацияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	Файл = Новый Файл;
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаИнициализацияФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаСуществованияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ДополнительныеПараметры.Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Файл не найден'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита], ДополнительныеПараметры.Файл);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение =
		СтрЗаменить(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение, ".", "");
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].ВремяИзменения = ВремяИзменения;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеУниверсальногоВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].УниверсальноеВремяИзменения = ВремяИзменения;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ДополнительныеПараметры.ИмяФайла);
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	Если ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаКартинки" Тогда
		АдресКартинки      = АдресФайлаВХранилище;
	ИначеЕсли ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаHTML" Тогда
		АдресОписанияHTML  = АдресФайлаВХранилище;
		ПутьКФайлуОписанию = ДополнительныеПараметры.ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.CRM_Фотография);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.CRM_Фотография = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
	ДанныеФайлаКартинки = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("CRM_Фотография", "АдресКартинки",
		НСтр("ru='Отсутствует изображение для просмотра'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				Объект[ИмяРеквизитаОбъекта],
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	СтруктураПараметрыВыбора =
		Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);

	ОткрытьФорму(
		"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		СтруктураПараметрыВыбора,,,,,
		Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда
        Объект.CRM_Фотография = Результат;
        АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор)
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

#КонецОбласти

#Область ИзображениеПортрет

&НаКлиенте
Процедура ГиперссылкаПерейтиКоманда(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Если НЕ ( ИмяКоманды = "ГиперссылкаПерейтиФайлы"
		ИЛИ ИмяКоманды = "ГиперссылкаПерейтиИзображения") Тогда		
		
		Для каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
			Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
				ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
				ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
			Иначе
				ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
				ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Команда.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента)
	
	Если ИмяЭлемента = "ГиперссылкаПерейтиФайлы"
	  ИЛИ ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
		Если вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка) Тогда
			ФормаИмя = "ОбщаяФорма.вогФормаУправленияПрисоединеннымиФайлами";
			ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Присоединенные файлы'"))
		Иначе	
			ФормаИмя = "ОбщаяФорма.ПрисоединенныеФайлы";
		КонецЕсли;
		
		ТипыФайлов = Новый Массив;
		Если ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда
			ТипыФайлов.Добавить(ПредопределенноеЗначение("Перечисление.вогТипыПрисоединенныхФайлов.Изображение"));
			ПараметрыФормы.Вставить("ТипыФайлов", ТипыФайлов);
			
		КонецЕсли;
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", ФормаИмя);
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		ПараметрыПереходаПоГиперссылке.Вставить("Уникальность", ИмяЭлемента);
		
		Если ИмяЭлемента = "ГиперссылкаПерейтиФайлы" Тогда
			ИмяЗаголовка = "Файлы";
		Иначе 
			ИмяЗаголовка = "Изображения";
		КонецЕсли;
	  
		ПараметрыПереходаПоГиперссылке.Вставить("Заголовок", СтрШаблон("%1 (%2)", ИмяЗаголовка, Объект.Ссылка));

	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиАнкеты" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Респондент", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Документ.вогАнкета.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиУсловияДоставки" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ТорговаяТочка", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.вогУсловияДоставки.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиМероприятия" Тогда
		ПараметрыФормы = Новый Структура("ТорговаяТочка", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Документ.CRM_Мероприятие.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиПроцессы" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("вогТорговаяТочка", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "БизнесПроцесс.CRM_БизнесПроцесс.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЭкспозиции" Тогда
		ПараметрыФормы = Новый Структура("ВладелецЭкспозиции", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.вогЭкспозицииКлиентов.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиКонтакты" Тогда
		ПараметрыФормы = Новый Структура("ОбъектСвязи", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.КонтактныеЛицаПартнеров.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЮрЛица" Тогда
		ПараметрыФормы = Новый Структура("ТорговаяТочкаСвязи", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.вогЮридическиеЛица.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЗначенияКлассификаторов" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиВременныйДоступ" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ТорговаяТочка", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.вогВременныйДоступКТорговымТочкам.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	КонецЕсли;
	
	Если Не ПараметрыПереходаПоГиперссылке.Свойство("РежимОткрытияОкнаФормы") Тогда
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	Возврат ПараметрыПереходаПоГиперссылке
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информции возможен только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	Уникальность = ЭтаФорма.УникальныйИдентификатор;
	
	Если ПараметрыПереходаПоГиперссылке.Свойство("Уникальность") Тогда
		
		Уникальность = СокрЛП(Уникальность) + СокрЛП(ПараметрыПереходаПоГиперссылке.Уникальность); 
		
	КонецЕсли;
	
	
	ОткрытаяФорма = ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
	ПараметрыПереходаПоГиперссылке.ПараметрыФормы, ЭтаФорма, Уникальность, , , ,
	ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	
	Если ПараметрыПереходаПоГиперссылке.Свойство("Заголовок") Тогда
		ОткрытаяФорма.Заголовок = ПараметрыПереходаПоГиперссылке.Заголовок;
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ОбъектИмеетФайлы(Знач ВладелецФайлов, Знач ФайлИсключение = Неопределено, Фильтр)    //4
	Возврат CRM_ПрисоединенныеФайлы.ОбъектИмеетФайлы(ВладелецФайлов, ФайлИсключение);
КонецФункции // ОбъектИмеетФайлы()

&НаСервере
Процедура CRM_УправлениеВидимостьюРамкиКартинки()
	Если ЗначениеЗаполнено(АдресКартинки) Тогда
		Элементы.ФайлКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);		
	Иначе
		Элементы.ФайлКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);		
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ВывестиНедоступностьКартинки()
	АдресКартинки = "";
	Элементы.ФайлКартинки.ТекстНевыбраннойКартинки
		= НСтр("ru = 'Картинка не доступна (не доступен том) обратитесь к администратору.'");
	Объект.CRM_Фотография = Справочники.КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПустаяСсылка();
	CRM_УправлениеВидимостьюРамкиКартинки();	
КонецПроцедуры // ВывестиНедоступностьКартинки()

#КонецОбласти

#Область СтатусыСогласования

&НаСервере
Процедура ОбновитьДанныеСтатусаСогласования()

	ОписаниеСтатуса = вогОбщегоНазначения.ПолучитьОписаниеСтатусаСогласованияОбъекта(Объект.Ссылка);
	СтатусСогласования = ОписаниеСтатуса.Статус;
	РегистраторСтатуса = ОписаниеСтатуса.РегистраторСтатуса;

КонецПроцедуры

#КонецОбласти

#Область НастройкаСтраницФормы

&НаСервере
Процедура СкрытьРаскрытьВсеГруппы(Свернуть = Неопределено)
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	
	Для Каждого ИмяГруппы из ИменаСворачиваемыхГрупп Цикл
		
		ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходСтраницы(Команда)
	// Сверунть группу Контакты
	СкрытьРаскрытьВсеГруппы(Истина);
	// Переход страницы
	ВыполнитьПереходСтраницы(Команда.Имя);
КонецПроцедуры

#КонецОбласти

#Область НавигацияФормы

&НаКлиенте
Процедура ВыполнитьПереходСтраницы(ИмяКоманды)
	
	Попытка
		// Выделить кнопку перехода
		Для каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
			Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
				ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
				ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
			Иначе
				ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
				ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
			КонецЕсли;
		КонецЦикла;
		// Переход страницы
		Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы[ИмяКоманды];
	Исключение
		Сообщить(ОписаниеОшибки());
		ТекстСообщения 	= НСтр("ru = 'Не удалось перейти на страницу %1'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ИмяКоманды));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьКомандуНавигацииПриОткрытииФормы()

	Для каждого ЭлементКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
		Если ЭлементКоманды.ИмяКоманды 	= Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя Тогда
			ЭлементКоманды.ЦветТекста 	= Новый Цвет(128,0,128);
			ЭлементКоманды.Шрифт 		= Новый Шрифт(,10,Ложь,,Истина);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементов

&НаСервере
Процедура НастроитьФорму(НастройкиВидимостиИЗаголовков = Неопределено)
	
	Элементы.СтраницаКарточкаОбъекта.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
	// Настройка видимости и заголовков
	Если Не ЗначениеЗаполнено(НастройкиВидимостиИЗаголовков) Тогда
		НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	КонецЕсли;
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
		
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) <> Неопределено Тогда
			Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		КонецЕсли;
		
		// Формирование видимости элементов подменю "Перейти"
		ИмяКоманды = ЭлементВидимость.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				Элементы[ИмяКоманды].Видимость = ЭлементВидимость.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		Если Элементы.Найти(ЭлементЗаголовок.Ключ) <> Неопределено Тогда
			Элементы[ЭлементЗаголовок.Ключ].Заголовок = ЭлементЗаголовок.Значение;
		КонецЕсли;
		
		// Формирование заголовков элементов подменю "Перейти"
		ИмяКоманды = ЭлементЗаголовок.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				
				СтрокаИсключение = НСтр("ru = 'Список'");
				НачалоСтроки     = СтрНайти(ЭлементЗаголовок.Значение, "(") - 1;
				
				Если СтрНайти(ЭлементЗаголовок.Значение, СтрокаИсключение) = 0
					И НачалоСтроки > 0 Тогда
					
					Элементы[ИмяКоманды].Заголовок = СокрЛП(Лев(ЭлементЗаголовок.Значение, НачалоСтроки));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
			
	НастроитьВидимостьСворачиваемыхГрупп();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемыхГрупп()
	
	НастроитьВидимостьСворачиваемойГруппы("Портрет");
	НастроитьВидимостьСворачиваемойГруппы("Детали");
	//НастроитьВидимостьСворачиваемойГруппы("Контакты");
	НастроитьВидимостьСворачиваемойГруппы("КонтактнаяИнформация");
	//НастроитьВидимостьСворачиваемойГруппы("Менеджеры");
	НастроитьВидимостьСворачиваемойГруппы("ДополнительныеРеквизиты");
		
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемойГруппы(ИмяГруппы)
	
	ЭлементСворачиваяГруппа = Элементы["СворачиваемаяГруппа" + ИмяГруппы];
	Элементы["ГруппаЗаголовок" + ИмяГруппы].Видимость = ЕстьВидимыеЭлементыВГруппе(ЭлементСворачиваяГруппа);
	
КонецПроцедуры

&НаСервере
Функция ЕстьВидимыеЭлементыВГруппе(Элемент)
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Если ПодчиненныйЭлемент.Видимость 
				И ЕстьВидимыеЭлементыВГруппе(ПодчиненныйЭлемент) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПодчиненныйЭлемент.Видимость Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	ИмяГруппыСвернутьРазвернуть = Элемент.Имя;
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияОткрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияЗакрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ЗаголовокГруппы", "");
	ИзменитьСвернутостьГруппы(ИмяГруппыСвернутьРазвернуть);
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы",0.0001,Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть = Неопределено)
	Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость, Не Свернуть);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Свернуть);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Не Свернуть);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	Если Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяГруппыСвернутьРазвернуть];
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазвернутьСворачиваемуюГруппу(ИмяГруппы)
	ГруппаРодитель  = Элементы[ИмяГруппы].Родитель;
	Если ГруппаРодитель = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	ИмяГруппыРодителя =ГруппаРодитель.Имя;
	
	Если СтрНайти(ИмяГруппыРодителя, "СворачиваемаяГруппа") = 0 Тогда
		РазвернутьСворачиваемуюГруппу(ИмяГруппыРодителя);
	Иначе
		ИмяГруппыРодителя = СтрЗаменить(ИмяГруппыРодителя, "СворачиваемаяГруппа", "");
		ИзменитьСвернутостьГруппы(ИмяГруппыРодителя, Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ИменаСворачиваемыхГрупп()

	ИменаСворачиваемыхГрупп = Новый Массив;
	
	//ИменаСворачиваемыхГрупп.Добавить("Подразделения");
	//ИменаСворачиваемыхГрупп.Добавить("КонтактнаяИнформация");
	//ИменаСворачиваемыхГрупп.Добавить("НаправленияДеятельности");

	//ИменаСворачиваемыхГрупп.Добавить("Классификаторы");
	//ИменаСворачиваемыхГрупп.Добавить("Грузополучатели");
	
	//ИменаСворачиваемыхГрупп.Добавить("ВнешниеКоды");
	//ИменаСворачиваемыхГрупп.Добавить("НаправленияДеятельности");
	//ИменаСворачиваемыхГрупп.Добавить("ДополнительныеРеквизиты");

	Возврат ИменаСворачиваемыхГрупп;
	
КонецФункции

#КонецОбласти

#Область ПодключемыеДополнительныеКоманды

//++ Подключаемые дополнительные команды
&НаКлиенте
Процедура Подключаемый_ОбработчикДополнительнойКоманды(Команда) Экспорт 
	
	// ++ Тищенко В.В. 04.04.2019
	 вогОбщегоНазначенияВызовСервера.РазблокироватьОбъектИзФормы(Объект.Ссылка,УникальныйИдентификатор);
	// -- Тищенко В.В. 
	
	// ++ VOG Солодов В.В. 29.03.2019
	//вогУправлениеИнтерфейсомКлиент.ОбработчикКомандыФормы(Команда, ЭтаФорма);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "скДанныеЗапуска")
		И ЭтаФорма.скДанныеЗапуска.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя)).Количество() > 0 Тогда
	
		скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);	
	Иначе
		вогУправлениеИнтерфейсомКлиент.ОбработчикКомандыФормы(Команда, ЭтаФорма);
	КонецЕсли;
	// -- VOG Солодов В.В. 29.03.2019
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКоманды(Значение, ДополнительноеЗначение) Экспорт 
	
	вогУправлениеИнтерфейсомКлиент.ВыполнитьКодКомандыНаКлиенте(Значение, ДополнительноеЗначение, ЭтаФорма, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКомандыСервер(Значение, ДополнительноеЗначение) Экспорт 
	
	вогУправлениеИнтерфейсомСервер.ВыполнитьКодКомандыНаСервере(Значение, ДополнительноеЗначение, ЭтотОбъект, ЭтаФорма, Объект);
	
КонецПроцедуры

//-- Подключаемые дополнительные команды

#КонецОбласти
