&НаКлиенте
Перем ОтветПередЗакрытием;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура выводит карту маршрута (при открытие и при отмене редактирования).
//
Процедура УстановитьТекущуюКартуМаршрута(НачатьРедатирование = Ложь)
	Если Объект.Ссылка.Пустая() Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ОбъектКопирования = Параметры.ЗначениеКопирования.ПолучитьОбъект();
			Если ОбъектКопирования.Редактируется Тогда
				ПустаяСхема = ОбъектКопирования.ГрафическаяСхема.Получить();
			Иначе
				СтрокаТекущейВерсии = ОбъектКопирования.ВерсииКартыМаршрута.Найти(ОбъектКопирования.НомерВерсии,"НомерВерсии");
				ПустаяСхема = СтрокаТекущейВерсии.КартаМаршрута.Получить();
			КонецЕсли;
		Иначе
			ПустаяСхема = Справочники.CRM_КартыМаршрутов.ПолучитьМакет("КартаМаршрутаПоУмолчанию");
		КонецЕсли;
		АдресСхемы = ПоместитьВоВременноеХранилище(ПустаяСхема, УникальныйИдентификатор);
		СхемаМаршрута = ПустаяСхема;
		Объект.Редактируется = НачатьРедатирование;
	Иначе
		ОбъектЗначение = РеквизитФормыВЗначение("Объект");
		Если Объект.Редактируется Тогда
			СхемаМаршрута = ОбъектЗначение.ГрафическаяСхема.Получить();
		Иначе
			СтрокаТекущейВерсии = ОбъектЗначение.ВерсииКартыМаршрута.Найти(ОбъектЗначение.НомерВерсии,"НомерВерсии");
			Если НЕ СтрокаТекущейВерсии = Неопределено Тогда
				СхемаМаршрута = СтрокаТекущейВерсии.КартаМаршрута.Получить();
			Иначе
				СхемаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьМакет("КартаМаршрутаПоУмолчанию");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Функция возвращает данные версии из ТЧ по переданному номеру версии.
//
Функция ПолучитьДанныеВерсииПоНомеру(НомерВерсииСтр)
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	СтрокаВерсии = ОбъектЗначение.ВерсииКартыМаршрута.Найти(НомерВерсииСтр, "НомерВерсии");
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СхемаМаршрута"	,СтрокаВерсии.КартаМаршрута.Получить());
	СтруктураВозврата.Вставить("НомерВерсии"	,СтрокаВерсии.НомерВерсии);
	СтруктураВозврата.Вставить("Комментарий"	,СтрокаВерсии.Комментарий);
	СтруктураВозврата.Вставить("ДатаСоздания"	,СтрокаВерсии.ДатаСоздания);
	СтруктураВозврата.Вставить("Наименование"	,Объект.Наименование);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возращает ссылку на точку маршрута.
Функция ПолучитьссылкуНаТочкуМаршрута(ТочкаИмя,КартаМаршрута)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ТочкиМаршрутов.Ссылка
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов КАК CRM_ТочкиМаршрутов
	|ГДЕ
	|	CRM_ТочкиМаршрутов.Имя = &Имя
	|	И CRM_ТочкиМаршрутов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", КартаМаршрута);
	Запрос.УстановитьПараметр("Имя", ТочкаИмя);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Чтение графической схемы из файла на сервере.
Процедура ПрочитатьСхему(Адрес)
	ДанныеСхемы = ПолучитьИзВременногоХранилища(Адрес);
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла();
	ДанныеСхемы.Записать(ВременноеИмяФайла);
	СхемаМаршрута.Прочитать(ВременноеИмяФайла);
	Прочитать();
	УдалитьФайлы(ВременноеИмяФайла);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКартуИзФайлаНастроек(Адрес)
	
	ДанныеСхемы = ПолучитьИзВременногоХранилища(Адрес);
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла();
	ДанныеСхемы.Записать(ВременноеИмяФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ВременноеИмяФайла);
	
	Если Не ЧтениеXML.Прочитать() Тогда
		Возврат;
	ИначеЕсли НЕ ЧтениеXML.Имя = "НастройкиКартыМаршрута" Тогда
		Возврат;
	КонецЕсли;
	
	//СхемаМаршрута = Неопределено;
	НастройкиЭтапов = Неопределено;
	ИсполнителиЭтапов = Неопределено;
	ОбъектыЭтапов	= Неопределено;
	ЛокальноеИмя = "";
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если СериализаторXDTO.ВозможностьЧтенияXML(ЧтениеXML) Тогда 
			Хранилище = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
			
			Если ЛокальноеИмя = "КартаМаршрута" Тогда
				СхемаМаршрута = Хранилище.Получить();
			ИначеЕсли ЛокальноеИмя = "НастройкиЭтапов" Тогда
				НастройкиЭтапов = Хранилище.Получить();
			ИначеЕсли ЛокальноеИмя = "ИсполнителиЭтапов" Тогда
				ИсполнителиЭтапов = Хранилище.Получить();
			ИначеЕсли ЛокальноеИмя = "ОбъектыЭтапов" Тогда
				ОбъектыЭтапов = Хранилище.Получить();
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ЛокальноеИмя = ЧтениеXML.ЛокальноеИмя;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если ЛокальноеИмя = "Комментарий" Тогда
				Объект.Комментарий = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Если НЕ НастройкиЭтапов = Неопределено Тогда
		НастройкиМаршрута.Очистить();
		Для Каждого СтрокаТаб Из НастройкиЭтапов Цикл
			НоваяСтрока = НастройкиМаршрута.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаб);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ИсполнителиЭтапов = Неопределено Тогда
		Исполнители.Очистить();
		Для Каждого СтрокаТаб Из ИсполнителиЭтапов Цикл
			НоваяСтрока = Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаб);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ОбъектыЭтапов = Неопределено Тогда
		Объекты.Очистить();
		Для Каждого СтрокаТаб Из ОбъектыЭтапов Цикл
			НоваяСтрока = Объекты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаб);
		КонецЦикла;
	КонецЕсли;
	УдалитьФайлы(ВременноеИмяФайла);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьМаршрутИИсполнителей()
	
	Если НастройкиМаршрута.Количество() > 0 Тогда
		НастройкиМаршрута_Значение = РеквизитФормыВЗначение("НастройкиМаршрута");
		Исполнители_Значение = РеквизитФормыВЗначение("Исполнители");
		Объекты_Значение = РеквизитФормыВЗначение("Объекты");
		СтруктураНастроек = Новый Структура("НастройкиМаршрута, Исполнители, Объекты",НастройкиМаршрута_Значение, Исполнители_Значение, Объекты_Значение);
		
		CRM_БизнесПроцессыСервер.СформироватьМаршрутИИсполнителейКартыМаршрута(Объект.Ссылка, СтруктураНастроек);
	Иначе
		CRM_БизнесПроцессыСервер.СформироватьМаршрутИИсполнителейКартыМаршрута(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаНаличиеИзменений()
	ЕстьИзменения = Ложь;
	РеквизитыОбъекта = Метаданные.Справочники.CRM_КартыМаршрутов.Реквизиты;
	Для Каждого Реквизит Из РеквизитыОбъекта Цикл
		ИмяРеквизита = Реквизит.Имя;
		Если ИмяРеквизита = Нстр("ru = 'ГрафическаяСхема'")
			ИЛИ ИмяРеквизита = Нстр("ru = 'Редактируется'")  Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяРеквизита = "ХранилищеСхемыКомпоновкиДанных" ИЛИ ИмяРеквизита = "ХранилищеНастроекКомпоновкиДанных" Тогда Продолжить; КонецЕсли;
		
		Если Объект[ИмяРеквизита] <> Объект.Ссылка[ИмяРеквизита] Тогда
			ЕстьИзменения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЕстьИзменения Тогда
		Если Объект.Наименование <> Объект.Ссылка.Наименование Тогда
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;	
	Возврат ЕстьИзменения;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПИСИ ТОЧЕК МАРШРУТА

&НаСервере
Процедура СформироватьТочкиМаршрута()
	
	ТабТочекМаршрута = РеквизитФормыВЗначение("ТаблицаТочек");
	CRM_БизнесПроцессыЭкспортныеМетоды.СформироватьТочкиМаршрута(ТабТочекМаршрута, Объект.Ссылка, НомерНовойВерсии);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьВходящиеИсходящиеточки(Ссылка,НомерВерсии)
	
	CRM_БизнесПроцессыЭкспортныеМетоды.ОчиститьВходящиеИсходящиеточки(Ссылка,НомерВерсии);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПометкуУдаленияНеАктуальныхТочек(Ссылка)
	
	CRM_БизнесПроцессыЭкспортныеМетоды.УстановитьПометкуУдаленияНеАктуальныхТочек(Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьАктуальностьТочекОтносительноПоследнейВерсии(Ссылка,НомерВерсии)
	
	CRM_БизнесПроцессыЭкспортныеМетоды.УстановитьАктуальностьТочекОтносительноПоследнейВерсии(Ссылка,НомерВерсии);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСвязьТочекРазделенияСоСлияниями(Ссылка,НомерВерсии)
	
	CRM_БизнесПроцессыЭкспортныеМетоды.УстановитьСвязьТочекРазделенияСоСлияниями(Ссылка,НомерВерсии);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПринадлежностьТочекВеткамРазделения(Ссылка,НомерВерсии)
	
	CRM_БизнесПроцессыЭкспортныеМетоды.УстановитьПринадлежностьТочекВеткамРазделения(Ссылка,НомерВерсии);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкорректироватьМаршрутыПроцессов(Ссылка)
	
	CRM_БизнесПроцессыЭкспортныеМетоды.СкорректироватьМаршрутыПроцессов(Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ И ПРОВЕРКИ ТАБЛИЦЫ ТОЧЕК МАРШРУТА

&НаСервереБезКонтекста
Функция ЗаполнитьДеревоТочекПоВариантуСтарта(СтруктураПараметров)
	
	Перем Конец, ТабТочек, ВариантВыполнения, НаличиеТочки, НоваяСтрокаДерева;
	Перем ТекущаяТочка, ИсходящаяТочка,ДеревоМаршрута, ПройденныеТочки;
	
	ИсходящаяТочка		= СтруктураПараметров.ИсходящаяТочка;
	ТекущаяТочка		= СтруктураПараметров.ТекущаяТочка;
	ПройденныеТочки		= СтруктураПараметров.ПройденныеТочки;
	ДлительностьТочек	= СтруктураПараметров.ДеревоМаршрута;
	ЭтоВложенный		= СтруктураПараметров.ЭтоВложенный;
	ТабТочек			= СтруктураПараметров.ТабТочек;
	Конец = Ложь;
	
	ТекущаяСтрокаДереваТочек = ДлительностьТочек;
	
	Пока НЕ Конец Цикл
		
		Если ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Действие
			ИЛИ ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс
			ИЛИ ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта
			ИЛИ ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Условие
			ИЛИ ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Разделение
			ИЛИ ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Обработка Тогда
			
			НаличиеТочки = ПройденныеТочки.Найти(ИсходящаяТочка.ИмяЭлемента, "ТочкаМаршрута");
			
			МассивСтрок = ПройденныеТочки.НайтиСтроки(Новый Структура("ВходящаяТочка, ТочкаМаршрута", ТекущаяТочка.ИмяЭлемента, ИсходящаяТочка.ИмяЭлемента));
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока = ПройденныеТочки.Добавить();
				НоваяСтрока.ВходящаяТочка = ТекущаяТочка.ИмяЭлемента;
				НоваяСтрока.ТочкаМаршрута = ИсходящаяТочка.ИмяЭлемента;
			Иначе
				Конец = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Старт Тогда
			
			НоваяСтрокаДерева = ТекущаяСтрокаДереваТочек.Строки.Добавить();
			НоваяСтрокаДерева.Элемент				= ИсходящаяТочка.Элемент;
			НоваяСтрокаДерева.ВидЭлемента			= ИсходящаяТочка.ВидЭлемента;
			НоваяСтрокаДерева.ИмяЭлемента			= ИсходящаяТочка.ИмяЭлемента;
			НоваяСтрокаДерева.НаименованиеЭлемента	= ИсходящаяТочка.НаименованиеЭлемента;
			НоваяСтрокаДерева.Групповая				= ИсходящаяТочка.Групповая;
			НоваяСтрокаДерева.Итерация = ?(НаличиеТочки = Неопределено, Ложь, Истина);
			
			ТекущаяТочка = ИсходящаяТочка;
			ИсходящаяТочка = ТабТочек.Найти(ИсходящаяТочка.ИсходящиеТочки[0].ИмяЭлемента, "ИмяЭлемента");
			
		ИначеЕсли ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
			
			НоваяСтрокаДерева = ТекущаяСтрокаДереваТочек.Строки.Добавить();
			НоваяСтрокаДерева.Элемент				= ИсходящаяТочка.Элемент;
			НоваяСтрокаДерева.ИмяЭлемента			= ИсходящаяТочка.ИмяЭлемента;
			НоваяСтрокаДерева.НаименованиеЭлемента	= ИсходящаяТочка.НаименованиеЭлемента;
			НоваяСтрокаДерева.ВидЭлемента			= ИсходящаяТочка.ВидЭлемента;
			НоваяСтрокаДерева.Групповая				= ИсходящаяТочка.Групповая;
			НоваяСтрокаДерева.Пояснение				= ИсходящаяТочка.Пояснение;
			НоваяСтрокаДерева.Итерация = ?(НаличиеТочки = Неопределено, Ложь, Истина);
			
			ТекущаяТочка = ИсходящаяТочка;
			ИсходящаяТочка = ТабТочек.Найти(ИсходящаяТочка.ИсходящиеТочки[0].ИмяЭлемента, "ИмяЭлемента");
			
		ИначеЕсли ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Обработка Тогда
			НоваяСтрокаДерева = ТекущаяСтрокаДереваТочек.Строки.Добавить();
			НоваяСтрокаДерева.Элемент				= ИсходящаяТочка.Элемент;
			НоваяСтрокаДерева.ИмяЭлемента			= ИсходящаяТочка.ИмяЭлемента;
			НоваяСтрокаДерева.НаименованиеЭлемента	= ИсходящаяТочка.НаименованиеЭлемента;
			НоваяСтрокаДерева.ВидЭлемента			= ИсходящаяТочка.ВидЭлемента;
			НоваяСтрокаДерева.Групповая				= ИсходящаяТочка.Групповая;
			НоваяСтрокаДерева.Итерация = ?(НаличиеТочки = Неопределено, Ложь, Истина);
			
			ТекущаяТочка = ИсходящаяТочка;
			ИсходящаяТочка = ТабТочек.Найти(ИсходящаяТочка.ИсходящиеТочки[0].ИмяЭлемента, "ИмяЭлемента");
			
		ИначеЕсли ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			НоваяСтрокаДерева = ТекущаяСтрокаДереваТочек.Строки.Добавить();
			НоваяСтрокаДерева.Элемент				= ИсходящаяТочка.Элемент;
			НоваяСтрокаДерева.ИмяЭлемента			= ИсходящаяТочка.ИмяЭлемента;
			НоваяСтрокаДерева.НаименованиеЭлемента	= ИсходящаяТочка.НаименованиеЭлемента;
			НоваяСтрокаДерева.ВидЭлемента			= ИсходящаяТочка.ВидЭлемента;
			НоваяСтрокаДерева.Групповая				= ИсходящаяТочка.Групповая;
			НоваяСтрокаДерева.Итерация = ?(НаличиеТочки = Неопределено, Ложь, Истина);
			
			ТекущаяТочка = ИсходящаяТочка;
			ИсходящаяТочка = ТабТочек.Найти(ИсходящаяТочка.ИсходящиеТочки[0].ИмяЭлемента, "ИмяЭлемента");
			
		ИначеЕсли ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта Тогда
			НоваяСтрокаДерева = ТекущаяСтрокаДереваТочек.Строки.Добавить();
			НоваяСтрокаДерева.Элемент				= ИсходящаяТочка.Элемент;
			НоваяСтрокаДерева.ИмяЭлемента			= ИсходящаяТочка.ИмяЭлемента;
			НоваяСтрокаДерева.НаименованиеЭлемента	= ИсходящаяТочка.НаименованиеЭлемента;
			НоваяСтрокаДерева.ВидЭлемента			= ИсходящаяТочка.ВидЭлемента;
			НоваяСтрокаДерева.Групповая				= ИсходящаяТочка.Групповая;
			НоваяСтрокаДерева.Итерация = ?(НаличиеТочки = Неопределено, Ложь, Истина);
			
			ПровТочкаСлияния = Неопределено;
			Для Каждого Вариант Из ИсходящаяТочка.ИсходящиеТочки Цикл
				СтрокаВарианта					= НоваяСтрокаДерева.Строки.Добавить();
				СтрокаВарианта.Индекс			= Вариант.Индекс;
				СтрокаВарианта.ВариантИмя		= Вариант.ВариантИмя;
				СтрокаВарианта.ВариантСиноним	= Вариант.ВариантСиноним;
				СтрокаВарианта.ВидЭлемента		= Перечисления.CRM_ВидыТочекМаршрута.ПустаяСсылка();
				
				ИсходящаяТочкаВарианта = ТабТочек.Найти(Вариант.ИмяЭлемента, "ИмяЭлемента");
				
				ПараметрыВарианта = Новый Структура;
				ПараметрыВарианта.Вставить("ИсходящаяТочка",	ИсходящаяТочкаВарианта);
				ПараметрыВарианта.Вставить("ТекущаяТочка",		ИсходящаяТочка);
				ПараметрыВарианта.Вставить("ПройденныеТочки",	ПройденныеТочки);
				ПараметрыВарианта.Вставить("ДеревоМаршрута",	СтрокаВарианта);
				ПараметрыВарианта.Вставить("ЭтоВложенный",		Ложь);
				ПараметрыВарианта.Вставить("ТабТочек",			ТабТочек);
				
				Результат = ЗаполнитьДеревоТочекПоВариантуСтарта(ПараметрыВарианта);
				
				Попытка
					Если Результат.ТекТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
						ПровТочкаСлияния = Результат.ТекТочка;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
			
			Если НЕ ПровТочкаСлияния = Неопределено Тогда
				Если Результат.Свойство("ТекТочка") Тогда
					Возврат Результат;
				Иначе
					Результат.Вставить("ТекТочка", ПровТочкаСлияния);
					Возврат Результат;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Условие Тогда
			НоваяСтрокаДерева = ТекущаяСтрокаДереваТочек.Строки.Добавить();
			НоваяСтрокаДерева.Элемент				= ИсходящаяТочка.Элемент;
			НоваяСтрокаДерева.ИмяЭлемента			= ИсходящаяТочка.ИмяЭлемента;
			НоваяСтрокаДерева.НаименованиеЭлемента	= ИсходящаяТочка.НаименованиеЭлемента;
			НоваяСтрокаДерева.ВидЭлемента			= ИсходящаяТочка.ВидЭлемента;
			НоваяСтрокаДерева.Групповая				= ИсходящаяТочка.Групповая;
			НоваяСтрокаДерева.Итерация = ?(НаличиеТочки = Неопределено, Ложь, Истина);
			
			ПровТочкаСлияния = Неопределено;
			Для Каждого Вариант Из ИсходящаяТочка.ИсходящиеТочки Цикл
				СтрокаВарианта					= НоваяСтрокаДерева.Строки.Добавить();
				СтрокаВарианта.Индекс			= Вариант.Индекс;
				СтрокаВарианта.ВариантИмя		= Вариант.ВариантИмя;
				СтрокаВарианта.ВариантСиноним	= Вариант.ВариантСиноним;
				СтрокаВарианта.ВидЭлемента		= Перечисления.CRM_ВидыТочекМаршрута.ПустаяСсылка();
				
				ИсходящаяТочкаВарианта = ТабТочек.Найти(Вариант.ИмяЭлемента, "ИмяЭлемента");
				
				ПараметрыВарианта = Новый Структура;
				ПараметрыВарианта.Вставить("ИсходящаяТочка",	ИсходящаяТочкаВарианта);
				ПараметрыВарианта.Вставить("ТекущаяТочка",		ИсходящаяТочка);
				ПараметрыВарианта.Вставить("ПройденныеТочки",	ПройденныеТочки);
				ПараметрыВарианта.Вставить("ДеревоМаршрута",	СтрокаВарианта);
				ПараметрыВарианта.Вставить("ЭтоВложенный",		Ложь);
				ПараметрыВарианта.Вставить("ТабТочек",			ТабТочек);
				
				Результат = ЗаполнитьДеревоТочекПоВариантуСтарта(ПараметрыВарианта);
				
				Попытка
					Если Результат.ТекТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
						ПровТочкаСлияния = Результат.ТекТочка;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
			
			Если НЕ ПровТочкаСлияния = Неопределено Тогда
				Если Результат.Свойство("ТекТочка") Тогда
					Возврат Результат;
				Иначе
					Результат.Вставить("ТекТочка", ПровТочкаСлияния);
					Возврат Результат;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
			НоваяСтрокаДерева = ТекущаяСтрокаДереваТочек.Строки.Добавить();
			НоваяСтрокаДерева.Элемент				= ИсходящаяТочка.Элемент;
			НоваяСтрокаДерева.ИмяЭлемента			= ИсходящаяТочка.ИмяЭлемента;
			НоваяСтрокаДерева.НаименованиеЭлемента	= ИсходящаяТочка.НаименованиеЭлемента;
			НоваяСтрокаДерева.ВидЭлемента			= ИсходящаяТочка.ВидЭлемента;
			НоваяСтрокаДерева.Групповая				= ИсходящаяТочка.Групповая;
			НоваяСтрокаДерева.Итерация = ?(НаличиеТочки = Неопределено, Ложь, Истина);
			
			Ном = 1;
			Для Каждого Ветка Из ИсходящаяТочка.ИсходящиеТочки Цикл
				СтрокаВарианта					= НоваяСтрокаДерева.Строки.Добавить();
				СтрокаВарианта.Индекс			= Ном;
				СтрокаВарианта.ВариантИмя		= "";
				СтрокаВарианта.ВариантСиноним	= "Ветка " + Строка(Ном);
				СтрокаВарианта.ВидЭлемента		= Перечисления.CRM_ВидыТочекМаршрута.ПустаяСсылка();
				
				ИсходящаяТочкаВетки = ТабТочек.Найти(Ветка.ИмяЭлемента, "ИмяЭлемента");
				
				ПараметрыВетки = Новый Структура;
				ПараметрыВетки.Вставить("ИсходящаяТочка",	ИсходящаяТочкаВетки);
				ПараметрыВетки.Вставить("ТекущаяТочка",		ИсходящаяТочка);
				ПараметрыВетки.Вставить("ПройденныеТочки",	ПройденныеТочки);
				ПараметрыВетки.Вставить("ДеревоМаршрута",	СтрокаВарианта);
				ПараметрыВетки.Вставить("ЭтоВложенный",		Ложь);
				ПараметрыВетки.Вставить("ТабТочек",			ТабТочек);
				
				Результат = ЗаполнитьДеревоТочекПоВариантуСтарта(ПараметрыВетки);
				
				ТекТочка = Результат.ТекТочка;
				
				Ном = Ном + 1;
			КонецЦикла;
			
			ТекущаяТочка = ТекТочка;
			ИсходящаяТочка = ТабТочек.Найти(ТекущаяТочка.ИсходящиеТочки[0].ИмяЭлемента, "ИмяЭлемента");
			
			НоваяСтрокаДерева = ТекущаяСтрокаДереваТочек.Строки.Добавить();
			НоваяСтрокаДерева.Элемент				= ИсходящаяТочка.Элемент;
			НоваяСтрокаДерева.ИмяЭлемента			= ТекущаяТочка.ИмяЭлемента;
			НоваяСтрокаДерева.НаименованиеЭлемента	= ТекущаяТочка.НаименованиеЭлемента;
			НоваяСтрокаДерева.ВидЭлемента			= ТекущаяТочка.ВидЭлемента;
			НоваяСтрокаДерева.Групповая				= ТекущаяТочка.Групповая;
			НоваяСтрокаДерева.Итерация = ?(НаличиеТочки = Неопределено, Ложь, Истина);
			
		ИначеЕсли ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
			
			СтруктураВозврата = Новый Структура("ТекТочка, ПройденныеТочки", ИсходящаяТочка, ПройденныеТочки);
			Возврат СтруктураВозврата;
			
		ИначеЕсли ИсходящаяТочка.ВидЭлемента = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
			
			НоваяСтрокаДерева = ТекущаяСтрокаДереваТочек.Строки.Добавить();
			НоваяСтрокаДерева.Элемент				= ИсходящаяТочка.Элемент;
			НоваяСтрокаДерева.ИмяЭлемента			= ИсходящаяТочка.ИмяЭлемента;
			НоваяСтрокаДерева.НаименованиеЭлемента	= ИсходящаяТочка.НаименованиеЭлемента;
			НоваяСтрокаДерева.ВидЭлемента			= ИсходящаяТочка.ВидЭлемента;
			НоваяСтрокаДерева.Групповая				= ИсходящаяТочка.Групповая;
			НоваяСтрокаДерева.Итерация = ?(НаличиеТочки = Неопределено, Ложь, Истина);
			Конец = Истина;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура("ПройденныеТочки", ПройденныеТочки);
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
// Функция формирует таблицу точек маршрута ТаблицаТочек, и возвращает результат проверки карты маршрута.
//
Функция ПрочитатьГрафическуюСхемуСформироватьДеревоТочек()
	
	ИмяТемпФайла = ПолучитьИмяВременногоФайла(".grs");
	СхемаМаршрута.Записать(ИмяТемпФайла);
	ПутьКВременномуФайлу = ИмяТемпФайла;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКВременномуФайлу, КодировкаТекста.UTF8);
	
	СтруктураДанных = CRM_БизнесПроцессыЭкспортныеМетоды.ПрочитатьГрафическуюСхемуСформироватьДеревоТочек(СхемаМаршрута, ТекстовыйДокумент);
	
	ЗначениеТаблицаТочек = РеквизитФормыВЗначение("ТаблицаТочек");
	ЗначениеТаблицаТочек.Очистить();
	Для Каждого СтрокаТаб Из СтруктураДанных.ТабТочекМаршрута Цикл
		НоваяСтрока = ЗначениеТаблицаТочек.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаб);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ЗначениеТаблицаТочек, "ТаблицаТочек");
	
	СтруктураВозврата = Новый Структура("КритичныеОшибки, НеКритичныеОшибки",СтруктураДанных.КритичныеОшибки,СтруктураДанных.НеКритичныеОшибки);
	Возврат СтруктураВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Процедура УстановитьСвойстваЭлементовФормы()
	
	//Элементы.ФормаЗагрузитьИзФайлаНаДиске.Доступность	= объект.Редактируется;
	Элементы.ФормаРедактировать.Пометка					= объект.Редактируется;
	Элементы.ФормаЗакончитьРедактирование.Доступность	= объект.Редактируется И (НЕ ДоступностьЭлементов);
	Элементы.ФормаПроверитьСхему.Доступность			= (НЕ ДоступностьЭлементов);
	Элементы.ФормаОтменитьРедактирование.Доступность	= (НЕ Объект.НомерВерсии = 0) И Объект.Редактируется;
	Элементы.СхемаМаршрута.ТолькоПросмотр				= НЕ объект.Редактируется;
	
	Элементы.ДинамическиРасчитыватьСрокиВыполненияЭтапов.Доступность = Объект.УказыватьСрокВыполненияЭтапов;
	
	Элементы.ФормаРедактировать.Доступность				= (НЕ (Объект.Ссылка = ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"))
	И НЕ (Объект.Ссылка = ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков")));
	
	Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков") Тогда
		Элементы.ГруппаПараметрыБизнесПроцесса.Видимость = Ложь;
		Элементы.СтраницаВерсии.Видимость = Ложь;
		Элементы.ГруппаДополнительно.Видимость = Ложь;
		Элементы.СтартоватьБизнесПроцесс.Видимость = Ложь;
		Элементы.ФормаЗагрузитьИзФайлаНаДиске.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть карту маршрута. Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтотОбъект, ДоступностьЭлементов, СтандартнаяОбработка);
	
	УстановитьТекущуюКартуМаршрута(Истина);
	Если Параметры.ОткрытьДляРедактирования Тогда
		АдресСхемы = ПоместитьВоВременноеХранилище(СхемаМаршрута, УникальныйИдентификатор);
		Объект.Редактируется = Истина;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.УказыватьПричинуНеудачногоЗавершения = Истина;
		Объект.ВерсииКартыМаршрута.Очистить();
		Объект.НомерВерсии = 0;
		Элементы.СтартоватьБизнесПроцесс.Доступность = Ложь;
		
		Объект.ТипПроцесса				= Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
		//Объект.ВидОбъекта				= Перечисления.bpmВидыОбъектовПроцесса.Интерес;
		Объект.ВидОбъектаСтрокой		= "CRM_Интерес";
		Объект.РеквизитОбъектаСтрокой	= "СостояниеИнтереса";
		Объект.СостояниеПроцесса		= Перечисления.bpmСостояниеПроцесса.Запланирован;
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	Если НЕ Объект.Ссылка.Пустая() И Объект.НомерВерсии > 0 Тогда
		ОбновитьСписокСвойствТекущегоНабора();
		ПолучитьНастройкиСвойств();
	КонецЕсли;
	
	Если Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПустаяСсылка() Тогда
		Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс;
	КонецЕсли;
	
	ПредыдущийТипПроцесса			= Объект.ТипПроцесса;
	ПредыдущийВидОбъектаСтрокой		= Объект.ВидОбъектаСтрокой;
	ПредыущийРеквизитОбъектаСтрокой	= Объект.РеквизитОбъектаСтрокой;
	
	УстановитьСвойстваЭлементовПоТипу(Истина);
	
	ПолучитьСписокДоступныхОбъектов();
	
	Если Объект.Ссылка = Справочники.CRM_КартыМаршрутов.Поручение Тогда
		Элементы.РедактироватьИсполнителейЭтапов.Видимость = Ложь;
		Элементы.УказыватьСрокВыполненияЭтапов.Видимость = Ложь;
		Элементы.ГруппаДинамическийРасчет.Видимость = Ложь;
	КонецЕсли;
	//вог+++
	Если Объект.Редактируется Тогда
		Элементы.ГруппаКнопкиСхемыМаршрута.Видимость = Истина;
	КонецЕсли;
	//вог--
КонецПроцедуры

&НаСервере
Функция ПройденаПроверкаНастроекЭтапов()
	
	Если НЕ (Объект.ВидОбъектаСтрокой = ПредыдущийВидОбъектаСтрокой)
	ИЛИ НЕ (Объект.РеквизитОбъектаСтрокой = ПредыущийРеквизитОбъектаСтрокой) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НаборРегистра = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Объект.Установить(Объект.Ссылка);
	НаборРегистра.Прочитать();
	
	Для Каждого СтрокаНабора ИЗ НаборРегистра Цикл
		Если ЗначениеЗаполнено(СтрокаНабора.Состояние) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПроверитьНастройкиУстановитьСвойстваЭлементов()
	
	Если Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
		Если Не ПройденаПроверкаНастроекЭтапов() Тогда
			Если НЕ Объект.СостояниеПроцесса = Перечисления.bpmСостояниеПроцесса.Отменен Тогда
				Объект.СостояниеПроцесса = Перечисления.bpmСостояниеПроцесса.Запланирован;
			КонецЕсли;
			Элементы.СостояниеПроцесса.ТолькоПросмотр = Истина;
			Элементы.ДекорацияПредупреждение.Видимость = Истина;
		Иначе
			Элементы.СостояниеПроцесса.ТолькоПросмотр = Ложь;
			Элементы.ДекорацияПредупреждение.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.СостояниеПроцесса.ТолькоПросмотр = Ложь;
		Элементы.ДекорацияПредупреждение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоТипу(ПриСоздании = Ложь)
	
	//Элементы.ВидОбъекта.АвтоОтметкаНезаполненного				= (Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
	Элементы.ВидОбъектаСтрокой.АвтоОтметкаНезаполненного		= (Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
	Элементы.РеквизитОбъектаСтрокой.АвтоОтметкаНезаполненного	= (Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
	//Элементы.Событие.АвтоОтметкаНезаполненного					= (Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
	
	Элементы.ИспользоватьПриПринятииОбращения.Видимость			= (Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс);
	Элементы.ПоляОтборов.Видимость	= (Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс) И Объект.ИспользоватьПриПринятииОбращения;
	
	Если Объект.РазрешеноДосрочноеЗавершение И Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
		Объект.РазрешеноДосрочноеЗавершение = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
	Элементы.РазрешеноДосрочноеЗавершение.Доступность = (Объект.ТипПроцесса <> Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
	
	Если Объект.ОписаниеБизнесПроцессаВСодержаниеЗадачи И Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
		Объект.ОписаниеБизнесПроцессаВСодержаниеЗадачи = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
	Элементы.ОписаниеБизнесПроцессаВСодержаниеЗадачи.Доступность = (Объект.ТипПроцесса <> Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
	
	Если Объект.РедактироватьСрокВыполненияЗадач И Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
		Объект.РедактироватьСрокВыполненияЗадач = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
	Элементы.РедактироватьСрокВыполненияЗадач.Доступность = (Объект.ТипПроцесса <> Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
	
	Если Объект.УказыватьСрокВыполненияЭтапов И Объект.ТипПроцесса <> Перечисления.bpmТипыПроцессов.ПоУмолчанию Тогда
		Объект.УказыватьСрокВыполненияЭтапов = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
	Элементы.УказыватьСрокВыполненияЭтапов.Доступность = (Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПоУмолчанию ИЛИ Объект.РедактироватьИсполнителейЭтапов);
	
	Если Объект.ДинамическиРассчитыватьСрокиВыполненияЭтапов И Объект.ТипПроцесса <> Перечисления.bpmТипыПроцессов.ПоУмолчанию Тогда
		Объект.ДинамическиРассчитыватьСрокиВыполненияЭтапов = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
	Элементы.ДинамическиРасчитыватьСрокиВыполненияЭтапов.Доступность = (Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПоУмолчанию ИЛИ Объект.РедактироватьИсполнителейЭтапов);
	
	ПроверитьНастройкиУстановитьСвойстваЭлементов();
	
	Если Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
		
		Если ЗначениеЗаполнено(Объект.удалитьВидОбъекта) И НЕ ЗначениеЗаполнено(Объект.ВидОбъектаСтрокой) Тогда
			Объект.ВидОбъектаСтрокой		= "CRM_Интерес";
			Объект.РеквизитОбъектаСтрокой	= "СостояниеИнтереса"
		КонецЕсли;
		
		Объект.ИспользоватьПриПринятииОбращения = Ложь;
		//Элементы.ВидОбъекта.Видимость = Истина;
		Элементы.ВидОбъектаСтрокой.Видимость = Истина;
		Элементы.РеквизитОбъектаСтрокой.Видимость = Истина;
		//Элементы.Событие.Видимость = Истина;
		Элементы.НастроитьОтборы.Видимость = Истина;
		
		//Элементы.ГруппаОтборы.Видимость = (НЕ Объект.ВидОбъекта = ПредопределенноеЗначение("Перечисление.bpmВидыОбъектовПроцесса.ПустаяСсылка"));
		Элементы.ГруппаОтборы.Видимость = ЗначениеЗаполнено(Объект.ВидОбъектаСтрокой);
		
		//Если Объект.ВидОбъекта = ПредопределенноеЗначение("Перечисление.bpmВидыОбъектовПроцесса.Интерес") Тогда
		Если ЗначениеЗаполнено(Объект.ВидОбъектаСтрокой) Тогда
			ПолучитьСхемуИНастройкиКомпоновкиДанных(ПриСоздании);
			ОбновитьЭлементыОтбора();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ВидОбъектаСтрокой) Тогда
			ПолучитьСписокДоступныхРеквизитов();
		КонецЕсли;
		
	ИначеЕсли Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
		//Элементы.ВидОбъекта.Видимость = Ложь;
		Элементы.ВидОбъектаСтрокой.Видимость = Ложь;
		Элементы.РеквизитОбъектаСтрокой.Видимость = Ложь;
		//Элементы.Событие.Видимость = Ложь;
		Элементы.ГруппаОтборы.Видимость = Истина;
		Элементы.НастроитьОтборы.Видимость = Ложь;
		
		ПолучитьСхемуИНастройкиКомпоновкиДанных(ПриСоздании);
		ОбновитьЭлементыОтбора();
	Иначе
		Объект.ИспользоватьПриПринятииОбращения = Ложь;
		//Элементы.ВидОбъекта.Видимость = Ложь;
		Элементы.ВидОбъектаСтрокой.Видимость = Ложь;
		Элементы.РеквизитОбъектаСтрокой.Видимость = Ложь;
		//Элементы.Событие.Видимость = Ложь;
		Элементы.ГруппаОтборы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПроцессаПриИзменении(Элемент)
	
	ЭтотОбъект.Модифицированность = Истина;
	УстановитьСвойстваЭлементовПоТипу();
	ПредыдущийТипПроцесса = Объект.ТипПроцесса;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСхемуИНастройкиКомпоновкиДанных(ПриСоздании = Ложь)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если АдресСхемыКомпоновкиДанных = "" Тогда
			Если Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта(Объект.ВидОбъектаСтрокой);
			ИначеЕсли Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта("Пользователи");
			КонецЕсли;
		Иначе
			СхемаКомпоновкиДанных	= ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
		КонецЕсли;
	Иначе
		Если ПриСоздании Тогда
			СхемаКомпоновкиДанных = Объект.Ссылка.ХранилищеСхемыКомпоновкиДанных.Получить();
		Иначе
			СхемаКомпоновкиДанных = Неопределено;
		КонецЕсли;
		
		Если СхемаКомпоновкиДанных = Неопределено Тогда
			Если Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта(Объект.ВидОбъектаСтрокой);
			ИначеЕсли Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта("Пользователи");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ОшибкаПриЗагрузкеНастроек = Ложь;
	Попытка
		НастройкиКомпоновки	= CRM_БизнесПроцессыПереопределяемый.СкомпоноватьНастройки(КомпоновщикНастроек, АдресСхемыКомпоновкиДанных);
	Исключение
		ОшибкаПриЗагрузкеНастроек = Истина;
		Если Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
			СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта(Объект.ВидОбъектаСтрокой);
		ИначеЕсли Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
			СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта("Пользователи");
		КонецЕсли;
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
		НастройкиКомпоновки	= CRM_БизнесПроцессыПереопределяемый.СкомпоноватьНастройки(КомпоновщикНастроек, АдресСхемыКомпоновкиДанных);
	КонецПопытки;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если АдресХранилищаНастройкиКомпоновщика = "" Тогда
			Если Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				CRM_БизнесПроцессыПереопределяемый.ДобавитьЭлементыОтборовВНастройкиСхемы(НастройкиКомпоновки,Объект.ВидОбъектаСтрокой);
			ИначеЕсли Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				CRM_БизнесПроцессыПереопределяемый.ДобавитьЭлементыОтборовВНастройкиСхемы(НастройкиКомпоновки,"Пользователи");
			КонецЕсли;
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновщика));
		КонецЕсли;
	Иначе
		Если ПриСоздании Тогда
			СохраненныеНастройкиКомпоновки = Объект.Ссылка.ХранилищеНастроекКомпоновкиДанных.Получить();
		Иначе
			СохраненныеНастройкиКомпоновки = Неопределено;
		КонецЕсли;
		
		Если ОшибкаПриЗагрузкеНастроек ИЛИ СохраненныеНастройкиКомпоновки = Неопределено Тогда
			Если Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				CRM_БизнесПроцессыПереопределяемый.ДобавитьЭлементыОтборовВНастройкиСхемы(НастройкиКомпоновки,Объект.ВидОбъектаСтрокой);
			ИначеЕсли Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				CRM_БизнесПроцессыПереопределяемый.ДобавитьЭлементыОтборовВНастройкиСхемы(НастройкиКомпоновки,"Пользователи");
			КонецЕсли;
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(СохраненныеНастройкиКомпоновки);
		КонецЕсли;
	КонецЕсли;
	АдресХранилищаНастройкиКомпоновщика = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииПоляОтбора(Элемент)
	
	ОбновитьАдресХранилищаНастройкиКомпоновщика();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресХранилищаНастройкиКомпоновщика()
	
	АдресХранилищаНастройкиКомпоновщика = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище()
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	Адреса.СхемаКомпоновкиДанных = АдресСхемыКомпоновкиДанных;
	Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), Новый УникальныйИдентификатор());
	
	Возврат Адреса;
	
КонецФункции 

&НаСервере
Процедура ОбновитьЭлементыОтбора()
	
	Для Ном = 1 По 3 Цикл
		Если Элементы.Найти("Использование"+Строка(Ном)) = Неопределено Тогда Продолжить; КонецЕсли;
		
		ЭлементОтбора = Элементы.Найти("Использование"+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
		
		ЭлементОтбора = Элементы.Найти("ЛевоеЗначение"+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
		
		ЭлементОтбора = Элементы.Найти("ВидСравнения"+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
		
		ЭлементОтбора = Элементы.Найти("ПравоеЗначение"+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
		
		ЭлементОтбора = Элементы.Найти("ФлагЛевоеЗначение"+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
	КонецЦикла;
	
	Обработано = 0;
	Для Каждого ЭлементОтбора ИЗ КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обработано = 3 Тогда Прервать; КонецЕсли;
		
		Обработано = Обработано + 1;
		Индекс = КомпоновщикНастроек.Настройки.Отбор.Элементы.Индекс(ЭлементОтбора);
			
		ДобавитьОтборНаФОрму(Обработано, Индекс);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройки отборов'");
	
	Адреса = ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект, Адреса);
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		Новый Структура(
			"АдресСхемыКомпоновкиДанных,
			|АдресНастроекКомпоновкиДанных,
			|ИсточникШаблонов,
			|Заголовок,
			|НеПомещатьНастройкиВСхемуКомпоновкиДанных,
			|НеНастраиватьУсловноеОформление,
			|НеНастраиватьПорядок,
			|НеНастраиватьВыбор,
			|УникальныйИдентификатор,
			|ИмяШаблонаСКД,
			|ВозвращатьИмяТекущегоШаблонаСКД,
			|НеРедактироватьСхемуКомпоновкиДанных,
			|НеНастраиватьПараметры",
			Адреса.СхемаКомпоновкиДанных,
			Адреса.НастройкиКомпоновкиДанных,
			Неопределено,
			//Объект.Ссылка,
			ЗаголовокФормыНастройкиСхемыКомпоновкиДанных,
			Истина,
			Истина,
			Истина,
			Истина,
			УникальныйИдентификатор,
			"",
			Истина,
			Истина,
			Истина),
			,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	
КонецПроцедуры
		
&НаКлиенте
Процедура НастройкиЗавершение(Результат, Адреса) Экспорт

	Если Результат <> Неопределено Тогда
		
		АдресХранилищаНастройкиКомпоновщика = Результат.АдресХранилищаНастройкиКомпоновщика;
		КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновщика));
		
		ОбновитьЭлементыОтбора();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборНаФОрму(ИндексЭлемента, ИндексОтбора)
	
	НоваяГруппа = Элементы.Добавить("ФлагЛевоеЗначение"+Строка(ИндексЭлемента), Тип("ГруппаФормы"), Элементы.ЛевоеЗнчение);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	НовыйЭлемент = Элементы.Добавить("Использование"+Строка(ИндексЭлемента), Тип("ПолеФормы"), НоваяГруппа);
	НовыйЭлемент.ПутьКДанным = "КомпоновщикНастроек.Настройки.Отбор["+Строка(ИндексОтбора)+"].Использование";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.УстановитьДействие("ПриИзменении",	"Подключаемый_ПриИзмененииПоляОтбора");
	
	НовыйЭлемент = Элементы.Добавить("ЛевоеЗначение"+Строка(ИндексЭлемента), Тип("ПолеФормы"), НоваяГруппа);
	НовыйЭлемент.ПутьКДанным = "КомпоновщикНастроек.Настройки.Отбор["+Строка(ИндексОтбора)+"].ЛевоеЗначение";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	НовыйЭлемент = Элементы.Добавить("ВидСравнения"+Строка(ИндексЭлемента), Тип("ПолеФормы"), Элементы.ВидСравнения);
	НовыйЭлемент.ПутьКДанным = "КомпоновщикНастроек.Настройки.Отбор["+Строка(ИндексОтбора)+"].ВидСравнения";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.УстановитьДействие("ПриИзменении",	"Подключаемый_ПриИзмененииПоляОтбора");
	
	НовыйЭлемент = Элементы.Добавить("ПравоеЗначение"+Строка(ИндексЭлемента), Тип("ПолеФормы"), Элементы.ПравоеЗначение);
	НовыйЭлемент.ПутьКДанным = "КомпоновщикНастроек.Настройки.Отбор["+Строка(ИндексОтбора)+"].ПравоеЗначение";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.КнопкаОчистки = Истина;
	НовыйЭлемент.УстановитьДействие("ПриИзменении",	"Подключаемый_ПриИзмененииПоляОтбора");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСвойствТекущегоНабора()
	
	НаборыСвойствОбъекта	= УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Объект.Ссылка);
	ТекущийНабор			= НаборыСвойствОбъекта.ВыгрузитьКолонку("Набор");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Набор", ТекущийНабор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвойстваНаборов.НомерСтроки,
	|	СвойстваНаборов.Свойство,
	|	СвойстваНаборов.ПометкаУдаления,
	|	ЕСТЬNULL(Свойства.Заголовок, ПРЕДСТАВЛЕНИЕ(СвойстваНаборов.Свойство)) КАК Заголовок,
	|	Свойства.ВладелецДополнительныхЗначений,
	|	Свойства.ЗаполнятьОбязательно,
	|	Свойства.ТипЗначения КАК ТипЗначения,
	|	ВЫБОР
	|		КОГДА Свойства.Ссылка ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		КОГДА Свойства.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Общее,
	|	ВЫБОР
	|		КОГДА СвойстваНаборов.ПометкаУдаления = ИСТИНА
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК СвойстваНаборов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|		ПО СвойстваНаборов.Свойство = Свойства.Ссылка
	|ГДЕ
	|	СвойстваНаборов.Ссылка В(&Набор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваНаборов.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Наборы.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК Наборы
	|ГДЕ
	|	Наборы.Ссылка В(&Набор)";
	
	НачатьТранзакцию();
	Попытка
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Элементы.Свойства.ТекущаяСтрока = Неопределено Тогда
		Строка = Неопределено;
	Иначе
		Строка = Свойства.НайтиПоИдентификатору(Элементы.Свойства.ТекущаяСтрока);
	КонецЕсли;
	ТекущееСвойство = ?(Строка = Неопределено, Неопределено, Строка.Свойство);
	
	Свойства.Очистить();
	
	Если РезультатыЗапроса[1].Пустой() Тогда
		ТекущаяДоступность = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущийНаборВерсияДанных = РезультатыЗапроса[1].Выгрузить()[0].ВерсияДанных;
	
	Выборка = РезультатыЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Свойства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.ОбщиеЗначения = ЗначениеЗаполнено(Выборка.ВладелецДополнительныхЗначений);
		
		Если Выборка.ТипЗначения <> NULL
		   И УправлениеСвойствамиСлужебный.ТипЗначенияСодержитЗначенияСвойств(Выборка.ТипЗначения) Тогда
			
			НоваяСтрока.ТипЗначения = Строка(Новый ОписаниеТипов(
				Выборка.ТипЗначения,
				,
				"СправочникСсылка.ЗначенияСвойствОбъектовИерархия,
				|СправочникСсылка.ЗначенияСвойствОбъектов"));
			
			Запрос = Новый Запрос;
			Если ЗначениеЗаполнено(Выборка.ВладелецДополнительныхЗначений) Тогда
				Запрос.УстановитьПараметр("Владелец", Выборка.ВладелецДополнительныхЗначений);
			Иначе
				Запрос.УстановитьПараметр("Владелец", Выборка.Свойство);
			КонецЕсли;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 4
			|	ЗначенияСвойствОбъектов.Наименование КАК Наименование
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Владелец = &Владелец
			|	И НЕ ЗначенияСвойствОбъектов.ЭтоГруппа
			|	И НЕ ЗначенияСвойствОбъектов.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 4
			|	ЗначенияСвойствОбъектовИерархия.Наименование
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектовИерархия
			|ГДЕ
			|	ЗначенияСвойствОбъектовИерархия.Владелец = &Владелец
			|	И НЕ ЗначенияСвойствОбъектовИерархия.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЗначениеИстина
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Владелец = &Владелец
			|	И НЕ ЗначенияСвойствОбъектов.ЭтоГруппа
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектовИерархия
			|ГДЕ
			|	ЗначенияСвойствОбъектовИерархия.Владелец = &Владелец";
			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			
			ПервыеЗначения = РезультатыЗапроса[0].Выгрузить().ВыгрузитьКолонку("Наименование");
			
			Если ПервыеЗначения.Количество() = 0 Тогда
				Если РезультатыЗапроса[1].Пустой() Тогда
					ПредставлениеЗначений = НСтр("ru = 'Значения еще не введены'");
				Иначе
					ПредставлениеЗначений = НСтр("ru = 'Значения помечены на удаление'");
				КонецЕсли;
			Иначе
				ПредставлениеЗначений = "";
				Номер = 0;
				Для каждого Значение Из ПервыеЗначения Цикл
					Номер = Номер + 1;
					Если Номер = 4 Тогда
						ПредставлениеЗначений = ПредставлениеЗначений + ",...";
						Прервать;
					КонецЕсли;
					ПредставлениеЗначений = ПредставлениеЗначений + ?(Номер > 1, ", ", "") + Значение;
				КонецЦикла;
			КонецЕсли;
			ПредставлениеЗначений = "<" + ПредставлениеЗначений + ">";
			Если ЗначениеЗаполнено(НоваяСтрока.ТипЗначения) Тогда
				ПредставлениеЗначений = ПредставлениеЗначений + ", ";
			КонецЕсли;
			НоваяСтрока.ТипЗначения = ПредставлениеЗначений + НоваяСтрока.ТипЗначения;
		КонецЕсли;
		
		Если Выборка.Свойство = ТекущееСвойство Тогда
			Элементы.Свойства.ТекущаяСтрока =
				Свойства[Свойства.Количество()-1].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиСвойств()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Карта",Объект.Ссылка);
	Запрос.УстановитьПараметр("НомерВерсии",Объект.НомерВерсии);
	Запрос.Текст = "ВЫБРАТЬ
	|	bpmДополнительныеРеквизитыНастройки.Свойство,
	|	bpmДополнительныеРеквизитыНастройки.Настройки
	|ИЗ
	|	РегистрСведений.bpmДополнительныеРеквизитыНастройки КАК bpmДополнительныеРеквизитыНастройки
	|ГДЕ
	|	bpmДополнительныеРеквизитыНастройки.Карта = &Карта
	|	И bpmДополнительныеРеквизитыНастройки.НомерВерсии = &НомерВерсии";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		ЗаполнитьНастройкиСвойств(Выборка);
	Иначе
		ЗаполнитьНастройкиСвойствПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭтапыКарты()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",Объект.Ссылка);
	Запрос.УстановитьПараметр("НомерВерсии",Объект.НомерВерсии);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТочкиМаршрутовВходящиеТочки.ТочкаМаршрута
	|ПОМЕСТИТЬ Этапы
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов.ВходящиеТочки КАК CRM_ТочкиМаршрутовВходящиеТочки
	|ГДЕ
	|	CRM_ТочкиМаршрутовВходящиеТочки.Ссылка.Владелец = &Владелец
	|	И CRM_ТочкиМаршрутовВходящиеТочки.НомерВерсии = &НомерВерсии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
	|ГДЕ
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец
	|	И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Этапы.ТочкаМаршрута КАК Этап
	|ИЗ
	|	Этапы КАК Этапы
	|ГДЕ
	|	Этапы.ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Действие)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Этапы.ТочкаМаршрута.РеквизитДопУпорядочивания";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Этап");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНастройкиСвойств(Выборка);
	
	Пока Выборка.Следующий() Цикл
		СтрокаНастройкиШапка			= НастройкиСвойств.Добавить();
		СтрокаНастройкиШапка.Свойство	= Выборка.Свойство;
		СтрокаНастройкиШапка.ЭтоШапка	= Истина;
			
		ЕстьВидимость		= Ложь;
		ЕстьДоступность		= Ложь;
		ЕстьОбязательный	= Ложь;
		
		МассивНастроек = Выборка.Настройки.Получить();
		Для Каждого Настройка ИЗ МассивНастроек Цикл
			СтрокаНастройки = НастройкиСвойств.Добавить();
			СтрокаНастройки.Свойство		= Выборка.Свойство;
			СтрокаНастройки.Этап			= Настройка.Этап;
			СтрокаНастройки.Видимость		= Настройка.Видимость;
			СтрокаНастройки.Доступность		= Настройка.Доступность;
			СтрокаНастройки.Обязательный	= Настройка.Обязательный;
			
			Если СтрокаНастройки.Видимость Тогда
				ЕстьВидимость		= Истина;
			КонецЕсли;
			Если СтрокаНастройки.Доступность Тогда
				ЕстьДоступность		= Истина;
			КонецЕсли;
			Если СтрокаНастройки.Обязательный Тогда
				ЕстьОбязательный	= Истина;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаНастройкиШапка.Видимость		= ЕстьВидимость;
		СтрокаНастройкиШапка.Доступность	= ЕстьДоступность;
		СтрокаНастройкиШапка.Обязательный	= ЕстьОбязательный;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиСвойствПоУмолчанию()
	
	МассивЭтапов = ПолучитьЭтапыКарты();
	Для Каждого СтрокаСвойства ИЗ Свойства Цикл
		СтрокаНастройкиШапка			= НастройкиСвойств.Добавить();
		СтрокаНастройкиШапка.Свойство	= СтрокаСвойства.Свойство;
		СтрокаНастройкиШапка.ЭтоШапка	= Истина;
		СтрокаНастройкиШапка.Видимость	= Истина;
		СтрокаНастройкиШапка.Доступность= Истина;
			
		ЕстьОтмеченные = Ложь;
		
		СтрокаНастройки = НастройкиСвойств.Добавить();
		СтрокаНастройки.Свойство		= СтрокаСвойства.Свойство;
		СтрокаНастройки.Видимость		= Истина;
		СтрокаНастройки.Доступность		= Истина;
		СтрокаНастройки.Обязательный	= СтрокаСвойства.ЗаполнятьОбязательно;
		
		Если СтрокаСвойства.ЗаполнятьОбязательно Тогда
			ЕстьОтмеченные = Истина;
		КонецЕсли;
		
		Для Каждого Этап ИЗ МассивЭтапов Цикл
			СтрокаНастройки = НастройкиСвойств.Добавить();
			СтрокаНастройки.Свойство		= СтрокаСвойства.Свойство;
			СтрокаНастройки.Этап			= Этап;
			СтрокаНастройки.Видимость		= Истина;
			СтрокаНастройки.Доступность		= Истина;
			СтрокаНастройки.Обязательный	= СтрокаСвойства.ЗаполнятьОбязательно;
			
			Если СтрокаСвойства.ЗаполнятьОбязательно Тогда
				ЕстьОтмеченные = Истина;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаНастройкиШапка.Обязательный = ЕстьОтмеченные;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияСвойстваПриАктивизацииСтроки()
	
	ТекДанные = Элементы.Свойства.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ЗаполнятьОбязательно = ТекДанные.ЗаполнятьОбязательно;
	
	//отбор объектов по точке маршрута. 
	Элементы.НастройкиСвойств.ОтборСтрок = Новый ФиксированнаяСтруктура("Свойство", ТекДанные.Свойство);
	Элементы.НастройкиСвойств.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияСвойстваПриАктивизацииСтроки",0.1 ,Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФлага(Колонка,Свойство,Значение,ЭтоШапка)
	
	Если ЭтоШапка Тогда
		Для Каждого СтрокаНастройки ИЗ НастройкиСвойств Цикл
			Если СтрокаНастройки.Свойство = Свойство И ЭтоШапка И (НЕ СтрокаНастройки[Колонка] = Значение) Тогда
				СтрокаНастройки[Колонка] = Значение;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЕстьОтмеченные = Ложь;
		Для Каждого СтрокаНастройки ИЗ НастройкиСвойств Цикл
			Если НЕ СтрокаНастройки.ЭтоШапка И (СтрокаНастройки.Свойство = Свойство) И СтрокаНастройки[Колонка] Тогда
				ЕстьОтмеченные = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Строки = НастройкиСвойств.НайтиСтроки(Новый Структура("Свойство,ЭтоШапка",Свойство,Истина));
		Строки[0][Колонка] = ЕстьОтмеченные;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСвойствВидимостьПриИзменении(Элемент)
	
	ТекДанные = Элементы.НастройкиСвойств.ТекущиеДанные;
	ПриИзмененииФлага("Видимость",ТекДанные.Свойство,ТекДанные.Видимость,ТекДанные.ЭтоШапка);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСвойствДоступностьПриИзменении(Элемент)
	
	ТекДанные = Элементы.НастройкиСвойств.ТекущиеДанные;
	ПриИзмененииФлага("Доступность",ТекДанные.Свойство,ТекДанные.Доступность,ТекДанные.ЭтоШапка);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСвойствОбязательныйПриИзменении(Элемент)
	
	ТекДанные = Элементы.НастройкиСвойств.ТекущиеДанные;
	ПриИзмененииФлага("Обязательный",ТекДанные.Свойство,ТекДанные.Обязательный,ТекДанные.ЭтоШапка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаМаршрута, УникальныйИдентификатор);
	Если ТекущийОбъект.Редактируется Тогда
		ТекущийОбъект.ГрафическаяСхема = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемы));
	Иначе
		Если НЕ НомерНовойВерсии = 0 Тогда
			СтрокаКарты = ТекущийОбъект.ВерсииКартыМаршрута.Найти(НомерНовойВерсии, "НомерВерсии");
			Если СтрокаКарты = Неопределено Тогда
				СтрокаКарты = ТекущийОбъект.ВерсииКартыМаршрута.Добавить();
				СтрокаКарты.КартаМаршрута = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемы));
			Иначе	
				СтрокаКарты.КартаМаршрута = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемы));
			КонецЕсли;
			СтрокаКарты.НомерВерсии		= НомерНовойВерсии;
			СтрокаКарты.ДатаСоздания	= ДатаНовойВерсии;
			НомерНовойВерсии = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ ТекущийОбъект.Редактируется = Объект.Ссылка.Редактируется) И Объект.Ссылка.Редактируется Тогда
		
		СозданаНоваяВерсия = Истина;
		
	КонецЕсли;
	
	Если ТекущийОбъект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта ИЛИ
	ТекущийОбъект.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
		ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных));
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновщика));
	Иначе
		ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных = Неопределено;
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		ТекстПредупреждения = "";
		Если Объект.Редактируется Тогда
	        ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Карта маршрута находится в режиме редактирования. '");
		КонецЕсли;
		//Если ПроверитьНаНаличиеИзменений() Тогда 
		//    ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'Форма была изменена. '");
		//КонецЕсли;
		Если НЕ ПустаяСтрока(ТекстПредупреждения) Тогда
	        Отказ = Истина;
			ТекстПредупреждения = ТекстПредупреждения + НСтр("ru = 'При закрытии формы все данные будут утеряны. Вы хотите'");
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	Если НЕ (ОтветПередЗакрытием = Ложь) Тогда
		Отказ = Истина;
		Если Объект.Редактируется Тогда
			ОбратныйВызов = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОбратныйВызов, НСтр("ru = 'Внимание! Карта маршрута находится в режиме редактирования. Продолжить c закрытием формы?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ПередЗакрытиемЗавершение(КодВозвратаДиалога.Да, ЭтотОбъект);	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
// Процедура - обработчик ответа на вопрос перед закрытием формы.
//
// Параметры:
//	Результат				- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Попытка
			Объект.Редактируется = Ложь;	
		Исключение
			// нет прав на изменение справочника
		КонецПопытки;
	
	Иначе
		Возврат;
	КонецЕсли;
	Если ПроверитьНаНаличиеИзменений() Тогда 
		ОбратныйВызов = Новый ОписаниеОповещения("СохранениеИзмененийПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОбратныйВызов, Нстр("ru = 'Форма была изменена. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		СохранениеИзмененийПослеВопроса(КодВозвратаДиалога.Нет, ЭтотОбъект);	
	КонецЕсли;	
КонецПроцедуры // ПередЗакрытиемЗавершение()

&НаКлиенте
// Процедура - обработчик ответа на вопрос сохранения данных формы.
//
// Параметры:
//	Результат				- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура СохранениеИзмененийПослеВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;
	ОтветПередЗакрытием	= Ложь;
	Закрыть();
КонецПроцедуры	// СохранениеИзмененийПослеВопроса()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьСвойстваЭлементовФормы();
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	РасширениеПодключено = Подключено;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если НЕ Элементы.СтартоватьБизнесПроцесс.Доступность Тогда
		Элементы.СтартоватьБизнесПроцесс.Доступность = Истина;
	КонецЕсли;		
КонецПроцедуры

#Область ПроцедурыОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СхемаМаршрутаВыбор(Элемент)
	
	Если Не Объект.Редактируется И не Элемент.ТекущийЭлемент = Неопределено Тогда
		
		ТочкаМаршрутаСсылка = ПолучитьссылкуНаТочкуМаршрута(Элемент.ТекущийЭлемент.Имя,Объект.Ссылка);
		Если НЕ ТочкаМаршрутаСсылка = Неопределено Тогда
			ПараметрыФормы = Новый Структура("Ключ",ТочкаМаршрутаСсылка);
			ОткрытьФорму("Справочник.CRM_ТочкиМаршрутов.ФормаОбъекта",ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартыМаршрутаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураПараметров = ПолучитьДанныеВерсииПоНомеру(Элемент.ТекущиеДанные.НомерВерсии);
	ОписаниеОповещения = Новый ОписаниеОповещения("КартыМаршрутаЗавершениеВыбора", ЭтотОбъект, Элемент);
	ОткрытьФорму("Справочник.CRM_КартыМаршрутов.Форма.ФормаВерсии", СтруктураПараметров, Элемент,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КартыМаршрутаЗавершениеВыбора(Результат, Элемент) Экспорт
	
	Если ТипЗнч(Результат) = тип("Строка") И Элемент.ТекущиеДанные.Комментарий <> Результат Тогда
		Элемент.ТекущиеДанные.Комментарий =  Результат;
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийКоманд

&НаКлиенте
Процедура ЗагрузитьИзФайлаНаДиске(Команда)
	
	// Создание из файла
	ИмяФайла = "";
	Если Объект.Редактируется Тогда
		Расширение = "grs";
	Иначе
		Расширение = "xml";
	КонецЕсли;
	
	Если РасширениеПодключено Тогда
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		
		Если Объект.Редактируется Тогда
			ВыборФайла.Фильтр = НСтр("ru = 'Графическая схема (.grs) (*.grs)|*.grs'");
		Иначе
			ВыборФайла.Фильтр = НСтр("ru = 'Схема с настройками (.xml) (*.xml)|*.xml'");
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаНаДискеЗавершение", ЭтотОбъект);
		НачатьПомещениеФайлов(ОписаниеОповещения, , ВыборФайла, Истина, УникальныйИдентификатор);
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
	КонецЕсли;
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаМаршрута, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаНаДискеЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	Если ПомещенныеФайлы <> Неопределено Тогда
		Если Объект.Редактируется Тогда
			ПрочитатьСхему(ПомещенныеФайлы[0].Хранение);
		Иначе
			
			Объект.Редактируется = Истина;
			ЗагрузитьКартуИзФайлаНастроек(ПомещенныеФайлы[0].Хранение);
			УстановитьСвойстваЭлементовФормы();
			
		КонецЕсли;
		АдресСхемы = ПоместитьВоВременноеХранилище(СхемаМаршрута, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаСервере
// ++ VOG Солодов В.В. 25.08.2019 
Функция СохранитьСхемуИНастройки(Расширение)
	
	ПолноеИмяФайла = КаталогВременныхФайлов() + "Схема." + Расширение;
// До изменения
//Процедура СохранитьСхемуИНастройки(ПолноеИмяФайла)
// -- VOG Солодов В.В. 25.08.2019
	
	мЗаписьXML = Новый ЗаписьXML;
	мЗаписьXML.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
	мЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// 1
	мЗаписьXML.ЗаписатьНачалоЭлемента("НастройкиКартыМаршрута");
	
	// 2
	мЗаписьXML.ЗаписатьНачалоЭлемента("КартаМаршрута");
	
	// Объект в сериализованном виде.
	СериализаторXDTO.ЗаписатьXML(мЗаписьXML, Новый ХранилищеЗначения(СхемаМаршрута));
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Комментарий
	мЗаписьXML.ЗаписатьНачалоЭлемента("Комментарий");
	
	мЗаписьXML.ЗаписатьТекст(Объект.Комментарий);
	
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
	// 3
	мЗаписьXML.ЗаписатьНачалоЭлемента("НастройкиЭтапов");
	
	Набор = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Объект.Ссылка);
	Набор.Прочитать();
	
	Таблица = Набор.Выгрузить();
	Таблица.Колонки.Добавить("Имя");
	Таблица.Колонки.Добавить("Вид");
	Для Каждого СтрокаТаб Из Таблица Цикл
		СтрокаТаб.Имя = СтрокаТаб.ТочкаМаршрута.Имя;
		СтрокаТаб.Вид = СтрокаТаб.ТочкаМаршрута.Вид;
	КонецЦикла;
	
	// Объект в сериализованном виде.
	СериализаторXDTO.ЗаписатьXML(мЗаписьXML,Новый ХранилищеЗначения(Таблица));
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
	// 4
	мЗаписьXML.ЗаписатьНачалоЭлемента("ИсполнителиЭтапов");
	
	Набор = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Объект.Ссылка);
	Набор.Прочитать();
	
	Таблица = Набор.Выгрузить();
	Таблица.Колонки.Добавить("Имя");
	Таблица.Колонки.Добавить("Вид");
	Таблица.Колонки.Добавить("ТочкаИмя");
	Таблица.Колонки.Добавить("ТочкаВид");
	Для Каждого СтрокаТаб Из Таблица Цикл
		СтрокаТаб.Имя = СтрокаТаб.ТочкаМаршрута.Имя;
		СтрокаТаб.Вид = СтрокаТаб.ТочкаМаршрута.Вид;
		Если ТипЗнч(СтрокаТаб.Исполнитель) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов") Тогда
			СтрокаТаб.ТочкаИмя = СтрокаТаб.Исполнитель.Имя;
			СтрокаТаб.ТочкаВид = СтрокаТаб.Исполнитель.Вид;
		КонецЕсли;
	КонецЦикла;
	
	// Объект в сериализованном виде.
	СериализаторXDTO.ЗаписатьXML(мЗаписьXML,Новый ХранилищеЗначения(Таблица));
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
	// 5
	мЗаписьXML.ЗаписатьНачалоЭлемента("ОбъектыЭтапов");
	
	Набор = РегистрыСведений.CRM_ОбъектыЭтапов.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(Объект.Ссылка);
	Набор.Прочитать();
	
	Таблица = Набор.Выгрузить();
	Таблица.Колонки.Добавить("Имя");
	Таблица.Колонки.Добавить("Вид");
	Таблица.Колонки.Добавить("ЭтапОснованияИмя");
	Таблица.Колонки.Добавить("ЭтапОснованияВид");
	Для Каждого СтрокаТаб Из Таблица Цикл
		
		СтрокаТаб.Имя = СтрокаТаб.ТочкаМаршрута.Имя;
		СтрокаТаб.Вид = СтрокаТаб.ТочкаМаршрута.Вид;
		
		Если ЗначениеЗаполнено(СтрокаТаб.ЭтапОснования) Тогда
			
			СтрокаТаб.ЭтапОснованияИмя = СтрокаТаб.ЭтапОснования.Имя;
			СтрокаТаб.ЭтапОснованияВид = СтрокаТаб.ЭтапОснования.Вид;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Объект в сериализованном виде.
	СериализаторXDTO.ЗаписатьXML(мЗаписьXML,Новый ХранилищеЗначения(Таблица));
	мЗаписьXML.ЗаписатьКонецЭлемента();
	
	мЗаписьXML.ЗаписатьКонецЭлемента();
	мЗаписьXML.Закрыть();
	
	// ++ VOG Солодов В.В. 25.08.2019 
	ДвоичныеДанные 		= Новый ДвоичныеДанные(ПолноеИмяФайла);
	АдресВрХранилищца 	= ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	УдалитьФайлы(ПолноеИмяФайла);
	
	Возврат АдресВрХранилищца;
	// -- VOG Солодов В.В. 25.08.2019
	
//КонецПроцедуры
КонецФункции

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	
	Если РасширениеПодключено Тогда
		
		Если Объект.Редактируется И НЕ Объект.Ссылка.Пустая() Тогда
			Расширение = "grs";
		Иначе
			Расширение = "xml";
		КонецЕсли;
		// Выбираем путь к файлу на диске.
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		Если Объект.Редактируется Тогда
			ВыборФайла.ПолноеИмяФайла = "Схема.grs";
		Иначе
			ВыборФайла.ПолноеИмяФайла = "Схема.xml";
		КонецЕсли;
		Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Расширение, Расширение);
		ВыборФайла.Фильтр = Фильтр;
		
		// ++ VOG Солодов В.В. 25.08.2019 
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьВФайлЗавершение", ЭтотОбъект, Расширение);
		// До изменения
		//ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьВФайлЗавершение", ЭтотОбъект);
		// -- VOG Солодов В.В. 25.08.2019
		ВыборФайла.Показать(ОписаниеОповещения);
		
	Иначе  // веб клиент
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами данная функция не поддерживается.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		Если Объект.Редактируется И НЕ Объект.Ссылка.Пустая() Тогда
			СхемаМаршрута.НачатьЗапись(, ВыбранныеФайлы[0]);
		Иначе
			// ++ VOG Солодов В.В. 25.08.2019 
			АдресФайлаНаСервере = СохранитьСхемуИНастройки(ДополнительныеПараметры);
			ПолучитьФайл(АдресФайлаНаСервере, ВыбранныеФайлы[0], Ложь);
			// До изменения
			//СохранитьСхемуИНастройки(ВыбранныеФайлы[0]);
			// -- VOG Солодов В.В. 25.08.2019
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	// запишем форму
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанных = ПрочитатьГрафическуюСхемуСформироватьДеревоТочек();
	ОчиститьСообщения();
	
	Отказ = Ложь;
	Если СтруктураДанных.КритичныеОшибки.Количество() > 0 Тогда
		Отказ = Истина;
		Для Каждого ЗначениеРезультата Из СтруктураДанных.КритичныеОшибки Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗначениеРезультата);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДанных.НеКритичныеОшибки.Количество() > 0 Тогда
		Для Каждого ЗначениеРезультата Из СтруктураДанных.НеКритичныеОшибки Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗначениеРезультата);
		КонецЦикла;
	КонецЕсли;
	
	Если  Отказ Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'При проверке карты маршрута обнаружены ошибки.
		|Завершить редактирование невозможно!'"));
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.НеКритичныеОшибки.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьРедактированиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'При проверке карты маршрута обнаружено'")+" "+Строка(СтруктураДанных.НеКритичныеОшибки.Количество()) + НСтр("ru = ' предупреждений. |Выполнить обновление точек маршрута?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗакончитьРедактированиеЗавершение(Неопределено, Неопределено);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаМаршрута, УникальныйИдентификатор);
	Если Объект.НомерВерсии = 0 Тогда
		ОчиститьВходящиеИсходящиеточки(Объект.Ссылка,НомерНовойВерсии);
	КонецЕсли;
	
	НомерНовойВерсии = Объект.НомерВерсии+1;
	ДатаНовойВерсии = ТекущаяДата();
	Объект.НомерВерсии = НомерНовойВерсии;
	
	// Запишем или обновим точки маршрута.
	СформироватьТочкиМаршрута();
	
	УстановитьПометкуУдаленияНеАктуальныхТочек(Объект.Ссылка);
	УстановитьАктуальностьТочекОтносительноПоследнейВерсии(Объект.Ссылка,Объект.НомерВерсии);
	
	Объект.Редактируется	= Ложь;
	УстановитьСвойстваЭлементовФормы();
	
	Записать();
	
	УстановитьСвязьТочекРазделенияСоСлияниями(Объект.Ссылка,Объект.НомерВерсии);
	
	УстановитьПринадлежностьТочекВеткамРазделения(Объект.Ссылка,Объект.НомерВерсии);
	
	СформироватьМаршрутИИсполнителей();
	
	// У процессов с это картой маршрута надо скорректировать маршрут и исполнителей.
	СкорректироватьМаршрутыПроцессов(Объект.Ссылка);
	
	Оповестить("СкорректированаКартаМаршрута", Объект.Ссылка, ЭтотОбъект);
	
	//ТекстВопроса = НСтр("ru = 'Завершено редактирование карты маршрута.
	//|Открыть форму настроки этапов бизнес-процесса?'");
	//Результат = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	//Если Результат = КодВозвратаДиалога.Да Тогда
	//	ПараметрыФормы = Новый Структура("Процесс", Объект.Ссылка);
	//	ОткрытьФорму("ОбщаяФорма.CRM_НастройкаЭтаповБизнесПроцессов", ПараметрыФормы);
	//КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаМаршрута, УникальныйИдентификатор);
	Объект.Редактируется = Истина;
	УстановитьСвойстваЭлементовФормы();
	
	// вог++
	СкрытьЛишнее = Не Объект.Редактируется;
	Элементы.ГруппаНаименованиеНомерВерсии.Видимость = СкрытьЛишнее;
	Элементы.Панель.ОтображениеСтраниц = ?(СкрытьЛишнее, ОтображениеСтраницФормы.ЗакладкиСверху,ОтображениеСтраницФормы.Нет);
	Элементы.ГруппаКнопкиСхемыМаршрута.Видимость = НЕ СкрытьЛишнее;
	
	//вог--
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРедактирование(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьРедактированиеЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Будут отменены все изменения, сделанные в карте маршрута. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	// вог++
	СкрытьЛишнее = Не Объект.Редактируется;
	Элементы.ГруппаНаименованиеНомерВерсии.Видимость = СкрытьЛишнее;
	Элементы.Панель.ОтображениеСтраниц = ?(СкрытьЛишнее, ОтображениеСтраницФормы.ЗакладкиСверху,ОтображениеСтраницФормы.Нет);
	Элементы.ГруппаКнопкиСхемыМаршрута.Видимость = Не СкрытьЛишнее;
	
	//вог--

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРедактированиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Редактируется = Ложь;
		УстановитьТекущуюКартуМаршрута();
		УстановитьСвойстваЭлементовФормы();
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСхему(Команда)
	
	ПараметрыФормы = Новый Структура("СхемаМаршрута",СхемаМаршрута);
	ОткрытьФорму("Обработка.CRM_ПроверкаКарты.Форма.УправляемаяФорма",ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьСрокВыполненияЭтаповПриИзменении(Элемент)
	
	Если НЕ Объект.УказыватьСрокВыполненияЭтапов Тогда
		Объект.ДинамическиРассчитыватьСрокиВыполненияЭтапов = Ложь;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	CRM_УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиЭтапов()
	
	НаборРегистра = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Объект.Установить(Объект.Ссылка);
	НаборРегистра.Прочитать();
	
	Если НаборРегистра.Количество() > 0 Тогда
		
		ТабЗнач = НаборРегистра.Выгрузить();
		ТабЗнач.ЗаполнитьЗначения(Неопределено, "Состояние");
		
		НаборРегистра.Загрузить(ТабЗнач);
		НаборРегистра.записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если СозданаНоваяВерсия Тогда
	//Если была создана новая версия карты, то следует создать новые записи настроек
	//в регистре сведений относительно это версии
		
		Если ТекущийОбъект.НомерВерсии = 1 Тогда
			ОбновитьСписокСвойствТекущегоНабора()
		КонецЕсли;
		
		МассивЭтапов			= ПолучитьЭтапыКарты();
		НастройкиСвойствЗнач	= РеквизитФормыВЗначение("НастройкиСвойств");
		НастройкиСвойств.Очистить();
		
		Для Каждого СтрокаСвойства ИЗ Свойства Цикл
			
			МассивСтрок				= НастройкиСвойствЗнач.НайтиСтроки(Новый Структура("Свойство,ЭтоШапка",СтрокаСвойства.Свойство,Истина));
			СтрокаНастройкиШапка	= НастройкиСвойств.Добавить();
			Если МассивСтрок.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаНастройкиШапка,МассивСтрок[0]);
			Иначе
				СтрокаНастройкиШапка.Свойство	= СтрокаСвойства.Свойство;
				СтрокаНастройкиШапка.ЭтоШапка	= Истина;
				СтрокаНастройкиШапка.Видимость	= Истина;
				СтрокаНастройкиШапка.Доступность= Истина;
			КонецЕсли;
				
			ЕстьОтмеченные = Ложь;
			
			МассивСтрок		= НастройкиСвойствЗнач.НайтиСтроки(Новый Структура("Свойство,Этап",СтрокаСвойства.Свойство,Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка()));
			СтрокаНастройки	= НастройкиСвойств.Добавить();
			Если МассивСтрок.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаНастройкиШапка,МассивСтрок[0]);
			Иначе
				СтрокаНастройки.Свойство		= СтрокаСвойства.Свойство;
				СтрокаНастройки.Видимость		= Истина;
				СтрокаНастройки.Доступность		= Истина;
				СтрокаНастройки.Обязательный	= СтрокаСвойства.ЗаполнятьОбязательно;
			КонецЕсли;
			
			Если СтрокаСвойства.ЗаполнятьОбязательно Тогда
				ЕстьОтмеченные = Истина;
			КонецЕсли;
			
			Для Каждого Этап ИЗ МассивЭтапов Цикл
				МассивСтрок		= НастройкиСвойствЗнач.НайтиСтроки(Новый Структура("Свойство,Этап",СтрокаСвойства.Свойство,Этап));
				СтрокаНастройки	= НастройкиСвойств.Добавить();
				Если МассивСтрок.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(СтрокаНастройкиШапка,МассивСтрок[0]);
				Иначе
					СтрокаНастройки.Свойство		= СтрокаСвойства.Свойство;
					СтрокаНастройки.Этап			= Этап;
					СтрокаНастройки.Видимость		= Истина;
					СтрокаНастройки.Доступность		= Истина;
					СтрокаНастройки.Обязательный	= СтрокаСвойства.ЗаполнятьОбязательно;
				КонецЕсли;
				
				Если СтрокаСвойства.ЗаполнятьОбязательно Тогда
					ЕстьОтмеченные = Истина;
				КонецЕсли;
			КонецЦикла;
			
			СтрокаНастройкиШапка.Обязательный = ЕстьОтмеченные;
		КонецЦикла;
		СозданаНоваяВерсия = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаСвойств ИЗ Свойства Цикл
		
		ЗаписьРегистра				= РегистрыСведений.bpmДополнительныеРеквизитыНастройки.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Карта		= ТекущийОбъект.Ссылка;
		ЗаписьРегистра.НомерВерсии	= ТекущийОбъект.НомерВерсии;
		ЗаписьРегистра.Свойство		= СтрокаСвойств.Свойство;
		
		МассивНастроек = Новый Массив;
		
		СтрокиНастроек = НастройкиСвойств.НайтиСтроки(Новый Структура("Свойство,ЭтоШапка",СтрокаСвойств.Свойство,Ложь));
		
		Для Каждого СтрокаСвойства ИЗ СтрокиНастроек Цикл
			СтруктураНастройки = Новый Структура("Этап,Видимость,Доступность,Обязательный");
			СтруктураНастройки.Этап			= СтрокаСвойства.Этап;
			СтруктураНастройки.Видимость	= СтрокаСвойства.Видимость;
			СтруктураНастройки.Доступность	= СтрокаСвойства.Доступность;
			СтруктураНастройки.Обязательный	= СтрокаСвойства.Обязательный;
			
			МассивНастроек.Добавить(СтруктураНастройки);
		КонецЦикла;
		
		ЗаписьРегистра.Настройки = Новый ХранилищеЗначения(МассивНастроек);
		ЗаписьРегистра.Записать();
	КонецЦикла;
	
	Если НЕ (Объект.ВидОбъектаСтрокой = ПредыдущийВидОбъектаСтрокой)
	ИЛИ НЕ (Объект.РеквизитОбъектаСтрокой = ПредыущийРеквизитОбъектаСтрокой) Тогда
		
		ОбновитьНастройкиЭтапов();
		
		ПредыдущийВидОбъектаСтрокой = Объект.ВидОбъектаСтрокой;
		ПредыущийРеквизитОбъектаСтрокой = Объект.РеквизитОбъектаСтрокой;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


&НаСервере
Процедура ОбработатьОповещение(Параметр)
	
	Если Параметр.Ссылка.НаборСвойств = Объект.НаборСвойств ИЛИ Параметр.Ссылка.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_CRM_КартыМаршрутов_Общие Тогда
		Если Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый Тогда
		//Если был записан новый реквизит, то добавим его в таблицу Свойства
		//и добавим записи в таблицу НастройкиСвойств
		
			СтрокаСвойстваВНаборе = Параметр.Ссылка.НаборСвойств.ДополнительныеРеквизиты.Найти(Параметр.Ссылка,"Свойство");
		
			НоваяСтрокаСвойства									= Свойства.Добавить();
			НоваяСтрокаСвойства.Заголовок						= Параметр.Ссылка.Заголовок;
			НоваяСтрокаСвойства.Общее							= Ложь;
			НоваяСтрокаСвойства.ПометкаУдаления					= Параметр.Ссылка.ПометкаУдаления;
			НоваяСтрокаСвойства.Свойство						= Параметр.Ссылка;
			НоваяСтрокаСвойства.НомерСтроки						= СтрокаСвойстваВНаборе.НомерСтроки;
			НоваяСтрокаСвойства.ВладелецДополнительныхЗначений	= Параметр.Ссылка.ВладелецДополнительныхЗначений;
			НоваяСтрокаСвойства.НомерКартинки					= ?(СтрокаСвойстваВНаборе.ПометкаУдаления,4,3);
			НоваяСтрокаСвойства.ТипЗначения						= Параметр.Ссылка.ТипЗначения;
			НоваяСтрокаСвойства.ЗаполнятьОбязательно			= Параметр.Ссылка.ЗаполнятьОбязательно;
			НоваяСтрокаСвойства.ОбщиеЗначения					= ЗначениеЗаполнено(НоваяСтрокаСвойства.ВладелецДополнительныхЗначений);
			
			ЗаписьРегистра = РегистрыСведений.bpmДополнительныеРеквизитыНастройки.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Карта		= Объект.Ссылка;
			ЗаписьРегистра.НомерВерсии	= Объект.НомерВерсии;
			ЗаписьРегистра.Свойство		= Параметр.Ссылка;
			ЗаписьРегистра.Прочитать();
			
			Если ЗаписьРегистра.Выбран() Тогда
				МассивНастроек = ЗаписьРегистра.Настройки.Получить();
				
				СтрокаНастройкиШапка			= НастройкиСвойств.Добавить();
				СтрокаНастройкиШапка.Свойство	= Параметр.Ссылка;
				СтрокаНастройкиШапка.ЭтоШапка	= Истина;
					
				ЕстьВидимость		= Ложь;
				ЕстьДоступность		= Ложь;
				ЕстьОбязательный	= Ложь;
				
				Для Каждого Настройка ИЗ МассивНастроек Цикл
					СтрокаНастройки = НастройкиСвойств.Добавить();
					СтрокаНастройки.Свойство		= Параметр.Ссылка;
					СтрокаНастройки.Этап			= Настройка.Этап;
					СтрокаНастройки.Видимость		= Настройка.Видимость;
					СтрокаНастройки.Доступность		= Настройка.Доступность;
					СтрокаНастройки.Обязательный	= Настройка.Обязательный;
					
					Если СтрокаНастройки.Видимость Тогда
						ЕстьВидимость		= Истина;
					КонецЕсли;
					Если СтрокаНастройки.Доступность Тогда
						ЕстьДоступность		= Истина;
					КонецЕсли;
					Если СтрокаНастройки.Обязательный Тогда
						ЕстьОбязательный	= Истина;
					КонецЕсли;
				КонецЦикла;
				
				СтрокаНастройкиШапка.Видимость		= ЕстьВидимость;
				СтрокаНастройкиШапка.Доступность	= ЕстьДоступность;
				СтрокаНастройкиШапка.Обязательный	= ЕстьОбязательный;
			КонецЕсли;
			
		ИначеЕсли Параметр.Свойство("ЗаполнятьОбязательно") И Параметр.ЗаполнятьОбязательно Тогда
		//Если был записан реквизит и у него поменялось свойство "ЗаполнятьОбязательно"
		//то в таблице НастройкиСвойств утановим/снимем флажки "Обязательный" для свойства
			
			МассивСтрок = Свойства.НайтиСтроки(Новый Структура("Свойство",Параметр.Ссылка));
			МассивСтрок[0].ЗаполнятьОбязательно = Параметр.Ссылка.ЗаполнятьОбязательно;
			
			Для Каждого СтрокаНастройки ИЗ НастройкиСвойств Цикл
				Если СтрокаНастройки.Свойство = Параметр.Ссылка Тогда
					СтрокаНастройки.Обязательный	= Параметр.Ссылка.ЗаполнятьОбязательно;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "Запись_ДополнительныеРеквизитыИСведения") И (Объект.НомерВерсии > 0) Тогда
		
		ОбработатьОповещение(Параметр);
		Элементы.НастройкиСвойств.Обновить();
		ОбработчикОжиданияСвойстваПриАктивизацииСтроки();
		
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗавершенаНастройкаМаршрута") И (Параметр = Объект.Ссылка) Тогда
		ПроверитьНастройкиУстановитьСвойстваЭлементов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСвойствПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСвойствПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
		//Если Не ЗначениеЗаполнено(Объект.ВидОбъекта) Тогда
		//	Сообщение = Новый СообщениеПользователю();
		//	Сообщение.Текст = "Не указан Вид объекта!";
		//	Сообщение.Поле = "Объект.ВидОбъекта";
		//	Сообщение.Сообщить();
		//	
		//	Отказ = Истина;
		//КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ВидОбъектаСтрокой) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не указан Вид объекта!";
			Сообщение.Поле = "Объект.ВидОбъектаСтрокой";
			Сообщение.Сообщить();
			
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.РеквизитОбъектаСтрокой) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не указан Реквизит объекта!";
			Сообщение.Поле = "Объект.РеквизитОбъектаСтрокой";
			Сообщение.Сообщить();
			
			Отказ = Истина;
		КонецЕсли;
		
		//Если Не ЗначениеЗаполнено(Объект.Событие) Тогда
		//	Сообщение = Новый СообщениеПользователю();
		//	Сообщение.Текст = "Не указано Событие!";
		//	Сообщение.Поле = "Объект.Событие";
		//	Сообщение.Сообщить();
		//	
		//	Отказ = Истина;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокДоступныхОбъектов()
	
	Для Каждого ТипОбъекта ИЗ Метаданные.ОпределяемыеТипы.CRM_ПроцессныеОбъекты.Тип.Типы() Цикл
		
		МетаДокумент = Метаданные.НайтиПоТипу(ТипОбъекта);
			
		Если НРег(Лев(МетаДокумент.Имя,7)) = "удалить" Тогда Продолжить; КонецЕсли;
		
		Элементы.ВидОбъектаСтрокой.СписокВыбора.Добавить(МетаДокумент.Имя,МетаДокумент.Представление());
		Элементы.ВидОбъектаСтрокой.СписокВыбора.СортироватьПоЗначению();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияСвойств(ДополнительныеСвойстваОбъекта, Наборы, ЭтоДополнительноеСведение)
	
	Свойства = ДополнительныеСвойстваОбъекта.ВыгрузитьКолонку("Свойство");
	
	НаборыСвойств = Новый ТаблицаЗначений;
	
	НаборыСвойств.Колонки.Добавить(
		"Набор", Новый ОписаниеТипов("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений"));
	
	НаборыСвойств.Колонки.Добавить(
		"ПорядокНабора", Новый ОписаниеТипов("Число"));
	
	Для каждого ЭлементСписка Из Наборы Цикл
		НоваяСтрока = НаборыСвойств.Добавить();
		НоваяСтрока.Набор         = ЭлементСписка.Набор;
		НоваяСтрока.ПорядокНабора = Наборы.Индекс(ЭлементСписка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Свойства",      Свойства);
	Запрос.УстановитьПараметр("НаборыСвойств", НаборыСвойств);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыСвойств.Набор,
	|	НаборыСвойств.ПорядокНабора
	|ПОМЕСТИТЬ НаборыСвойств
	|ИЗ
	|	&НаборыСвойств КАК НаборыСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборыСвойств.Набор,
	|	НаборыСвойств.ПорядокНабора,
	|	СвойстваНаборов.Свойство,
	|	СвойстваНаборов.ПометкаУдаления,
	|	СвойстваНаборов.НомерСтроки КАК ПорядокСвойства
	|ПОМЕСТИТЬ СвойстваНаборов
	|ИЗ
	|	НаборыСвойств КАК НаборыСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК СвойстваНаборов
	|		ПО (СвойстваНаборов.Ссылка = НаборыСвойств.Набор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|		ПО (СвойстваНаборов.Свойство = Свойства.Ссылка)
	|ГДЕ
	|	НЕ СвойстваНаборов.ПометкаУдаления
	|	И НЕ Свойства.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Свойства.Ссылка КАК Свойство
	|ПОМЕСТИТЬ ЗаполненныеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|ГДЕ
	|	Свойства.Ссылка В(&Свойства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвойстваНаборов.Набор,
	|	СвойстваНаборов.ПорядокНабора,
	|	СвойстваНаборов.Свойство,
	|	СвойстваНаборов.ПорядокСвойства,
	|	СвойстваНаборов.ПометкаУдаления КАК Удалено
	|ПОМЕСТИТЬ ВсеСвойства
	|ИЗ
	|	СвойстваНаборов КАК СвойстваНаборов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка),
	|	0,
	|	ЗаполненныеСвойства.Свойство,
	|	0,
	|	ИСТИНА
	|ИЗ
	|	ЗаполненныеСвойства КАК ЗаполненныеСвойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваНаборов КАК СвойстваНаборов
	|		ПО ЗаполненныеСвойства.Свойство = СвойстваНаборов.Свойство
	|ГДЕ
	|	СвойстваНаборов.Свойство ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеСвойства.Набор,
	|	ВсеСвойства.Свойство,
	|	ДополнительныеРеквизитыИСведения.ВладелецДополнительныхЗначений,
	|	ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно,
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК Наименование,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.ФорматСвойства,
	|	ДополнительныеРеквизитыИСведения.МногострочноеПолеВвода,
	|	ВсеСвойства.Удалено КАК Удалено,
	|	ДополнительныеРеквизитыИСведения.Доступен,
	|	ДополнительныеРеквизитыИСведения.Виден,
	|	ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов.(
	|		ЗависимоеСвойство,
	|		Реквизит,
	|		Условие,
	|		Значение
	|	)
	|ИЗ
	|	ВсеСвойства КАК ВсеСвойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО ВсеСвойства.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Удалено,
	|	ВсеСвойства.ПорядокНабора,
	|	ВсеСвойства.ПорядокСвойства";
	
	Если ЭтоДополнительноеСведение Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты",
			"Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
	КонецЕсли;
	
	ОписаниеСвойств = Запрос.Выполнить().Выгрузить();
	ОписаниеСвойств.Индексы.Добавить("Свойство");
	ОписаниеСвойств.Колонки.Добавить("Значение");
	
	// Удаление дублей свойств в нижестоящих наборах свойств.
	Индекс = ОписаниеСвойств.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = ОписаниеСвойств[Индекс];
		НайденнаяСтрока = ОписаниеСвойств.Найти(Строка.Свойство);
		
		Если НайденнаяСтрока <> Неопределено
		   И НайденнаяСтрока <> Строка Тогда
			
			ОписаниеСвойств.Удалить(Индекс);
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
	// Заполнение значений свойств.
	Для Каждого Строка Из ДополнительныеСвойстваОбъекта Цикл
		ОписаниеСвойства = ОписаниеСвойств.Найти(Строка.Свойство, "Свойство");
		Если ОписаниеСвойства <> Неопределено Тогда
			// Поддержка строк неограниченной длины.
			Если НЕ ЭтоДополнительноеСведение
			   И УправлениеСвойствамиСлужебный.ИспользоватьНеограниченнуюСтроку(
			         ОписаниеСвойства.ТипЗначения, ОписаниеСвойства.МногострочноеПолеВвода)
			   И НЕ ПустаяСтрока(Строка.ТекстоваяСтрока) Тогда 
				
				ОписаниеСвойства.Значение = Строка.ТекстоваяСтрока;
			Иначе
				ОписаниеСвойства.Значение = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеСвойств;
	
КонецФункции

&НаСервере
Процедура ПолучитьСписокДоступныхРеквизитов()
	
	Элементы.РеквизитОбъектаСтрокой.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ВидОбъектаСтрокой) Тогда
		Если НЕ Объект.ВидОбъектаСтрокой = "CRM_Интерес" Тогда
			
			ОбъектМетаданных = Метаданные.Документы.Найти(Объект.ВидОбъектаСтрокой);
			Если ОбъектМетаданных = Неопределено Тогда
				ОбъектМетаданных = Метаданные.Справочники.Найти(Объект.ВидОбъектаСтрокой);
			КонецЕсли;
			
			Для Каждого МетаРекизит ИЗ ОбъектМетаданных.Реквизиты Цикл
				
				Если МетаРекизит.Тип.Типы().Количество() > 1 Тогда Продолжить; КонецЕсли;
				
				МетаОбъект = Метаданные.НайтиПоТипу(МетаРекизит.Тип.Типы()[0]);
				
				Если МетаОбъект = Неопределено тогда Продолжить; КонецЕсли;
				
				Если ОбщегоНазначения.ЭтоСправочник(МетаОбъект)
					ИЛИ ОбщегоНазначения.ЭтоПеречисление(МетаОбъект) Тогда
					
					Элементы.РеквизитОбъектаСтрокой.СписокВыбора.Добавить(МетаРекизит.Имя,МетаРекизит.Представление());
					
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ОбъектМетаданных.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено Тогда
				
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
				
				КлючНазначения = Неопределено;
				НаборыСвойствОбъекта = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(МенеджерОбъекта.ПустаяСсылка(), КлючНазначения);
				
				Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
					НовыйОбъект = МенеджерОбъекта.СоздатьЭлемент();
				Иначе
					НовыйОбъект = МенеджерОбъекта.СоздатьДокумент();
				КонецЕслИ;
				
				ОписаниеСвойств = ЗначенияСвойств(
				НовыйОбъект.ДополнительныеРеквизиты.Выгрузить(),
				НаборыСвойствОбъекта,
				Ложь);
				Для Каждого СтрокаТаблицы ИЗ ОписаниеСвойств Цикл
					Если СтрокаТаблицы.Свойство.ЭтоДополнительноеСведение ИЛИ СтрокаТаблицы.Удалено ИЛИ НЕ СтрокаТаблицы.Виден Тогда Продолжить; КонецЕсли;
					
					Если СтрокаТаблицы.ТипЗначения.Типы().Количество() > 1 Тогда Продолжить; КонецЕсли;
					
					МетаОбъект = Метаданные.НайтиПоТипу(СтрокаТаблицы.ТипЗначения.Типы()[0]);
					
					Если МетаОбъект = Неопределено тогда Продолжить; КонецЕсли;
					
					Если ОбщегоНазначения.ЭтоСправочник(МетаОбъект)
						ИЛИ ОбщегоНазначения.ЭтоПеречисление(МетаОбъект) Тогда
						Элементы.РеквизитОбъектаСтрокой.СписокВыбора.Добавить("%Свойство%"+Строка(СтрокаТаблицы.Свойство.УникальныйИдентификатор()),"Дополнительный реквизит: "+ СтрокаТаблицы.Наименование);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Элементы.РеквизитОбъектаСтрокой.СписокВыбора.Добавить("СостояниеИнтереса","Состояние интереса");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбъектаСтрокойПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ПолучитьСписокДоступныхРеквизитов();
	
	Если Элементы.РеквизитОбъектаСтрокой.СписокВыбора.НайтиПоЗначению(Объект.РеквизитОбъектаСтрокой) = Неопределено Тогда
		Объект.РеквизитОбъектаСтрокой = "";
	КонецЕсли;
	
	Элементы.ГруппаОтборы.Видимость = ЗначениеЗаполнено(Объект.ВидОбъектаСтрокой);
	
	АдресСхемыКомпоновкиДанных = "";
	АдресХранилищаНастройкиКомпоновщика = "";
	Если ЗначениеЗаполнено(Объект.ВидОбъектаСтрокой) Тогда
		ПолучитьСхемуИНастройкиКомпоновкиДанных();
		ОбновитьЭлементыОтбора();
	КонецЕсли;
	
	УстановитьСвойстваЭлементовПоТипу();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитОбъектаСтрокойПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьСвойстваЭлементовПоТипу();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПриПринятииОбращенияПриИзменении(Элемент)
	Элементы.ПоляОтборов.Видимость	= (Объект.ТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.НезависимыйПроцесс")) И Объект.ИспользоватьПриПринятииОбращения;
КонецПроцедуры


ПроверятьПередЗакрытием = Истина;