
#Область НастройкаСКД 
// весь код этой области полностью стырен из УРа
&НаКлиенте
Процедура ОткрытьФормуРедактированияНастройкиСКДПоТабличнойЧасти(ИмяТЧ, ЗаголовокФормыНастройкиСКД)
	
	Если Не ЗначениеЗаполнено(ИмяТЧ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	ОткрытьФормуРедактированияНастройкиСКД(ТекущиеДанные, ЗаголовокФормыНастройкиСКД, ТекущиеДанные.АдресХранилищеСхемыКомпоновкиДанных, ТекущиеДанные.АдресХранилищеНастроекКомпоновкиДанных, ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияНастройкиСКД(ТекущиеДанные, Заголовок, АдресСхемы, АдресКомпоновки, ИмяТабличнойЧасти)
	
	// Сохраним адрес схемы, т.к. форма настройки схемы возвращает адрес хранения настроек в качестве результата, а адрес схемы помещает в тот же реквизит, из которого его получила. Поэтому мы этот адрес сохраним
	АдресСхемыКомпоновкиДанных = АдресСхемы;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных",            	АдресСхемыКомпоновкиДанных);
	ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных",         	АдресКомпоновки);
	ПараметрыФормы.Вставить("Заголовок",                             	Заголовок);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",               	УникальныйИдентификатор);
	ПараметрыФормы.Вставить("НеНастраиватьУсловноеОформление",       	Истина);
	ПараметрыФормы.Вставить("НеНастраиватьПорядок",                  	Истина);
	ПараметрыФормы.Вставить("НеНастраиватьОтбор",                    	Ложь);
	ПараметрыФормы.Вставить("НеНастраиватьВыбор",                    	Ложь);
	ПараметрыФормы.Вставить("НеПомещатьНастройкиВСхемуКомпоновкиДанных", Истина);
	
	ПараметрОповещения = Новый Структура("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзмененитьСхемуКомпоновкиДанных", ЭтаФорма, ПараметрОповещения);
	
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных", 
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ИзмененитьСхемуКомпоновкиДанных(Результат, Параметры) Экспорт
	
	Если Параметры <> Неопределено И Параметры.Свойство("ИмяТабличнойЧасти") Тогда
		
		ТекущиеДанные = Элементы[Параметры.ИмяТабличнойЧасти].ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено И Не ПустаяСтрока(Результат) Тогда
			
			ТекущиеДанные.АдресХранилищеСхемыКомпоновкиДанных		= АдресСхемыКомпоновкиДанных; // Адрес схемы остаётся тот же, что был передан в форму редактирования 
			ТекущиеДанные.АдресХранилищеНастроекКомпоновкиДанных	= Результат;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСхемуИНастройкиТЧ(ТекущийОбъект, ИмяТЧ)
	
	Для Каждого СтрокаДанных Из Объект[ИмяТЧ] Цикл
		
		СтрокаТЧ = ТекущийОбъект[ИмяТЧ].Получить(СтрокаДанных.НомерСтроки - 1);

		СтрокаДанных.АдресХранилищеСхемыКомпоновкиДанных 		= ПоместитьВоВременноеХранилище(СтрокаТЧ.ХранилищеСхемаИсточникаДанных.Получить(), 	УникальныйИдентификатор);
		СтрокаДанных.АдресХранилищеНастроекКомпоновкиДанных 	= ПоместитьВоВременноеХранилище(СтрокаТЧ.ХранилищеКомпоновщикНастроек.Получить(), 	УникальныйИдентификатор);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЧтениеСхемКомпоновкиИзОбъектаНаФорму(ТекущийОбъект, ИмяТЧ)
	
	ПрочитатьСхемуИНастройкиТЧ(ТекущийОбъект, ИмяТЧ);
		 
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(Новый СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСхемуКомпоновки(ТекущийОбъект, ИмяТЧ)
	
	Для Каждого СтрокаДанных Из Объект[ИмяТЧ] Цикл
		
		//--> VOG Бей Вадим  17.12.2018 10:47:00 ID заявки:000002263
		//ИсходныйНомерСтроки = СтрокаДанных.ИсходныйНомерСтроки;
		//
		//СтрокаТЧ = ТекущийОбъект[ИмяТЧ].Получить(ИсходныйНомерСтроки - 1);
		//
		СтрокаТЧ = ТекущийОбъект[ИмяТЧ].Получить(СтрокаДанных.НомерСтроки - 1);
		//<-- VOG Бей Вадим  17.12.2018 10:47:01 ID заявки:000002263
		СтрокаТЧ.ХранилищеСхемаИсточникаДанных	= Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаДанных.АдресХранилищеСхемыКомпоновкиДанных));
		СтрокаТЧ.ХранилищеКомпоновщикНастроек	= Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаДанных.АдресХранилищеНастроекКомпоновкиДанных));
		
	КонецЦикла;	
	
	ПрочитатьСхемуИНастройкиТЧ(ТекущийОбъект, ИмяТЧ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПустуюСхемуКомпоновкиДанных()
	
	Возврат ПоместитьВоВременноеХранилище(Новый СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
 		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПустуюНастройкуСхемыКомпоновкиДанных()
	
	Возврат ПоместитьВоВременноеХранилище(Новый НастройкиКомпоновкиДанных, Новый УникальныйИдентификатор);
 		
КонецФункции

#КонецОбласти

#Область ПроцедурыРаботыСВнешнейОбработкой
&НаКлиенте
Процедура ЗагрузитьОбработку(Команда)
	
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;
	КонецЕсли;
	
	ОткрытьДиалогЗагрузкиОбработки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбработку(Команда)
	
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Индекс, РегистрацияОбработки, ДвоичныеДанныеОбработки", Объект.Действия.Индекс(ТекущиеДанные));
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные); 
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.Фильтр = "Внешние обработки|*.epf";
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");
		
		Если ДиалогСохраненияФайла.Выбрать() Тогда
			
			Адрес = ПоместитьФайлОбработкиВоВременноеХранилище(СтруктураПараметров);
			
			Если Адрес = Неопределено Тогда
				Предупреждение(НСтр("ru = 'Нет данных для обработки.'"));
				Возврат;
			КонецЕсли;
			
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(, Адрес));
			
			ПолученныеФайлы = Новый Массив;
			
			ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, ДиалогСохраненияФайла.ПолноеИмяФайла, Ложь);
		КонецЕсли;
		
	Иначе
		
		Адрес = ПоместитьФайлОбработкиВоВременноеХранилище(СтруктураПараметров);
		
		Если Адрес = Неопределено Тогда
			Предупреждение(НСтр("ru = 'Нет данных для обработки.'"));
			Возврат;
		КонецЕсли;
		
		ПолучитьФайл(Адрес, Объект.ИмяФайла, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОбработку(Команда)
	
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.РегистрацияОбработки    = Истина;
	ТекущиеДанные.ДвоичныеДанныеОбработки = Неопределено;
	//{[+](фрагмент добавлен), Виноградов Дмитрий 20.02.2018 11:29:51 ID
	ТекущиеДанные.ОтпечатокОбработки = "";
	//}Виноградов Дмитрий 20.02.2018 11:29:51
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьДиалогЗагрузкиОбработки(ТекущиеДанные)
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Фильтр = "Внешние обработки|*.epf";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
		
		ПомещаемыеФайлы = Новый Массив;
		ПомещенныеФайлы = Новый Массив;
		
		Если ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, ДиалогОткрытияФайла, Истина) Тогда
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПомещенныеФайлы[0].Имя, "\");
			ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
			РасширениеФайла = Прав(ИмяФайла, 3);
			
			Если Не ЗарегистрироватьОбработку(ПомещенныеФайлы[0].Хранение, ИмяФайла, РасширениеФайла, ТекущиеДанные.ПолучитьИдентификатор()) Тогда //ТекущиеДанные.ДвоичныеДанныеОбработки) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		
		АдресВоВременномХранилище = "";
		ВыбранноеИмяФайла = "";
		
		Если ПоместитьФайл(АдресВоВременномХранилище, , ВыбранноеИмяФайла, Истина) Тогда
			
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыбранноеИмяФайла, "\");
			ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
			РасширениеФайла = Прав(ИмяФайла, 3);
			
			Если ВРег(РасширениеФайла) = "EPF" Тогда
			Иначе
				Предупреждение(НСтр("ru = 'Невозможно определить тип файла по расширению'"));
				Возврат Ложь;
			КонецЕсли;
			
			Если НЕ ЗарегистрироватьОбработку(АдресВоВременномХранилище, ИмяФайла, РасширениеФайла, ТекущиеДанные.ПолучитьИдентификатор()) Тогда //ТекущиеДанные.ДвоичныеДанныеОбработки) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Модифицированность = Истина;
	ТекущиеДанные.РегистрацияОбработки = Истина;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПоместитьФайлОбработкиВоВременноеХранилище(СтруктураПараметров)
	
	Если СтруктураПараметров.РегистрацияОбработки Тогда
		Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров.ДвоичныеДанныеОбработки, УникальныйИдентификатор);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = РеквизитФормыВЗначение("Объект").Действия[СтруктураПараметров.Индекс].ХранилищеОбработка.Получить();
			
	Если ТипЗнч(Значение) <> Тип("ДвоичныеДанные") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Значение, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ЗарегистрироватьОбработку(АдресВоВременномХранилище, ИмяФайла, РасширениеФайла, Идентификатор)//ДвоичныеДанныеОбработки)
	
	ТекущиеДанные = Объект.Действия.НайтиПоИдентификатору(Идентификатор);
	
	ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ДвоичныеДанныеОбработки.Записать(ИмяВременногоФайла);	
	
	Результат = Ложь;
	
	Попытка
		ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла, Истина);
		Результат = Истина;
	Исключение
		//--> VOG Бей Вадим  25.10.2018 10:55:02 ID заявки:000002375
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		//<-- VOG Бей Вадим  25.10.2018 10:55:35 ID заявки:000002375                                          		
	КонецПопытки;
	
	Если Результат = Истина Тогда
		ТекущиеДанные.ДвоичныеДанныеОбработки = ДвоичныеДанныеОбработки;
		
		СтруктураПараметров = Неопределено;
		Попытка
			СтруктураПараметров = ВнешняяОбработка.ПолучитьСоставПараметров();
		Исключение
			Возврат Результат;
		КонецПопытки;
		
		СтруктураАдресовПараметров = Новый Структура;
		СтруктураАдресовПараметров.Вставить("ОбщиеПараметры", АдресХранилищеОбщихПараметров);
		СтруктураАдресовПараметров.Вставить("ПараметрыОбработки", ТекущиеДанные.АдресХранилищеПараметры);
		СтруктураАдресовПараметров.Вставить("ЗначенияПоУмолчанию", ТекущиеДанные.АдресХранилищеЗначенияПоУмолчанию);
		
		Для каждого АдресПараметра Из СтруктураАдресовПараметров Цикл		
			ИмяТекПараметра = АдресПараметра.Ключ;
			
			ТекПараметр = Неопределено;
			Если ЗначениеЗаполнено(ИмяТекПараметра) Тогда
				ТекПараметр = ПолучитьИзВременногоХранилища(АдресПараметра.Значение);		
			КонецЕсли;		
			
			Если НЕ ТипЗнч(ТекПараметр) = Тип("Структура") Тогда
				ТекПараметр = Новый Структура;
			КонецЕсли;
			
			Если СтруктураПараметров.Свойство(ИмяТекПараметра) Тогда			
				Для каждого ОписаниеПараметра Из СтруктураПараметров[ИмяТекПараметра] Цикл
					Если НЕ ТекПараметр.Свойство(ОписаниеПараметра.Ключ) Тогда
						ТекПараметр.Вставить(ОписаниеПараметра.Ключ, ОписаниеПараметра.Значение);				
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			
			Если ИмяТекПараметра = "ОбщиеПараметры" Тогда
				АдресХранилищеОбщихПараметров = ПоместитьВоВременноеХранилище(ТекПараметр, УникальныйИдентификатор);
			ИначеЕсли ИмяТекПараметра = "ПараметрыОбработки" Тогда
				ТекущиеДанные.АдресХранилищеПараметры = ПоместитьВоВременноеХранилище(ТекПараметр, УникальныйИдентификатор);
			ИначеЕсли ИмяТекПараметра = "ЗначенияПоУмолчанию" Тогда
				ТекущиеДанные.АдресХранилищеЗначенияПоУмолчанию = ПоместитьВоВременноеХранилище(ТекПараметр, УникальныйИдентификатор);	
			КонецЕсли;
		КонецЦикла;
		// } VOG RMV 2018-03-01		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
#КонецОбласти

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	Попытка
		
		//{[-](фрагмент удален)Виноградов Дмитрий 20.02.2018 11:27:07 ID
		//Соединение = Новый FTPСоединение(Объект.FTPСоединениеСервер, Объект.FTPСоединениеПорт, Объект.FTPСоединениеИмяПользователя, Объект.FTPСоединениеПарольПользователя, , , 15);
		//
		//Если ТипЗнч(Соединение) = ТИП("FTPСоединение") Тогда
		//	Предупреждение("Соединение установленно!!!",60,"Проверка связи");
		//КонецЕсли;	
		//}Виноградов Дмитрий 20.02.2018 11:27:07
		//{[+](фрагмент добавлен), Виноградов Дмитрий 20.02.2018 11:27:57 ID
		//TODO: Добавить вызов функции из обработки для проверки соединения
		//}Виноградов Дмитрий 20.02.2018 11:27:57
			
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияДействиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ЗаголовокФормыНастройкиСКД = НСтр("ru = 'Настройки схемы смены источника данных " + Строка(Объект)+"'");
	ОткрытьФормуРедактированияНастройкиСКДПоТабличнойЧасти(Элемент.Родитель.Имя, ЗаголовокФормыНастройкиСКД);	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	ЗаполнитьСлужебныеРеквизиты();
	
	УправлениеВидимостью();
	
	ИдентификаторНастройки = Строка(Объект.ИдентификаторНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()

	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ЧтениеСхемКомпоновкиИзОбъектаНаФорму(ТекущийОбъект, "Действия");
	
	АдресХранилищеОбщихПараметров = ПоместитьВоВременноеХранилище(ТекущийОбъект.ХранилищеОбщихПараметров.Получить(), УникальныйИдентификатор);
	
	Для каждого СтрДействие Из Объект.Действия Цикл
		
		РегламентноеЗадание = ?(ПустаяСтрока(СтрДействие.РегламентноеЗадание), Неопределено, desОбменДаннымиВызовСервера.Задание(СтрДействие.РегламентноеЗадание));
		
		Если РегламентноеЗадание <> Неопределено Тогда
			Расписание = РегламентноеЗадание.Расписание;
			СтрДействие.Расписание				= Расписание;
			СтрДействие.Использование			= РегламентноеЗадание.Использование;
		КонецЕсли;			
		
		СтрДействие.ПредставлениеРасписания	= СформироватьПредставлениеРасписания(СтрДействие.Расписание);
		
		СтрокаТЧ = ТекущийОбъект.Действия[Объект.Действия.Индекс(СтрДействие)];
		СтрДействие.ДвоичныеДанныеОбработки = СтрокаТЧ.ХранилищеОбработка.Получить();
		
		СтрДействие.АдресХранилищеПараметры = ПоместитьВоВременноеХранилище(СтрокаТЧ.ХранилищеПараметры.Получить(), УникальныйИдентификатор);
		
		СтрДействие.АдресХранилищеЗначенияПоУмолчанию = ПоместитьВоВременноеХранилище(СтрокаТЧ.ХранилищеЗначенияПоУмолчанию.Получить(), УникальныйИдентификатор);
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ПроверитьУникальностьДействий(Отказ)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаДействия.Действие КАК Действие,
	|	ТаблицаДействия.НомерСтроки
	|ПОМЕСТИТЬ втТаблицаДействия
	|ИЗ
	|	&ТаблицаДействия КАК ТаблицаДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДействия.Действие КАК Действие
	|ИЗ
	|	втТаблицаДействия КАК ТаблицаДействия
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДействия.Действие
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ТаблицаДействия.НомерСтроки) > 1";
	
	Запрос.УстановитьПараметр("ТаблицаДействия", Объект.Действия.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Отказ = НЕ Результат.Пустой();
	Если Отказ Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Сообщить("Действие " + Выборка.Действие + " присутствует в нескольких строках. Запись невозможна.");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьРегламентныеЗадания()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаДействия.РегламентноеЗадание КАК РегламентноеЗадание
	|ПОМЕСТИТЬ втТаблицаДействия
	|ИЗ
	|	&ТаблицаДействия КАК ТаблицаДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	desНастройкиДействийПриОбменеДействия.РегламентноеЗадание
	|ИЗ
	|	Справочник.desНастройкиДействийПриОбмене.Действия КАК desНастройкиДействийПриОбменеДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаДействия КАК ТаблицаДействия
	|		ПО desНастройкиДействийПриОбменеДействия.РегламентноеЗадание = ТаблицаДействия.РегламентноеЗадание
	|ГДЕ
	|	desНастройкиДействийПриОбменеДействия.Ссылка = &Ссылка
	|	И ТаблицаДействия.РегламентноеЗадание ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаДействия", Объект.Действия.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		desОбменДаннымиВызовСервера.УдалитьЗадание(Выборка.РегламентноеЗадание);	
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	ПроверитьУникальностьДействий(Отказ);
	
	Если Отказ = Истина Тогда
		Возврат
	КонецЕсли;
	
	ЗаписатьСхемуКомпоновки(ТекущийОбъект, "Действия");
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		// Очистка регламентных заданий по действиям, которые были удалены из таблицы.
		//УдалитьРегламентныеЗадания();
	КонецЕсли;
	
	ЗаданияДляОбновления = Новый Соответствие;
	
	// Хранилище общих параметров
	Если НЕ ПустаяСтрока(АдресХранилищеОбщихПараметров) Тогда
		ТекущийОбъект.ХранилищеОбщихПараметров = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресХранилищеОбщихПараметров), Новый СжатиеДанных(9));
	КонецЕсли;
	
	Для каждого СтрДействие Из Объект.Действия Цикл
		СтрокаТЧ = ТекущийОбъект.Действия[Объект.Действия.Индекс(СтрДействие)];
		
		// параметры
		Если НЕ ПустаяСтрока(СтрДействие.АдресХранилищеПараметры) Тогда
			//{[-](фрагмент удален)Виноградов Дмитрий 19.02.2018 12:06:09 ID
			//СтрокаТЧ.ХранилищеПараметры = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрДействие.АдресХранилищеПараметры), Новый СжатиеДанных(9));
			//}Виноградов Дмитрий 19.02.2018 12:06:09			
			//{[+](фрагмент добавлен), Виноградов Дмитрий Александрович 19.02.2018 11:17:41 ID
			локСтруктура = ПолучитьИзВременногоХранилища(СтрДействие.АдресХранилищеПараметры);
			СтрокаТЧ.ХранилищеПараметры = Новый ХранилищеЗначения(локСтруктура, Новый СжатиеДанных(9));
			// Сериализуем параметры
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, локСтруктура, НазначениеТипаXML.Явное);
			СериализованныеПараметры = ЗаписьJSON.Закрыть();
			// Расчитаем и сохраним оттиск параметров
			Хеш = Новый ХешированиеДанных(ХешФункция.SHA256);
			Хеш.Добавить(СериализованныеПараметры);
			СтрокаТЧ.ОтпечатокПараметров = Base64Строка(Хеш.ХешСумма);
			//}Виноградов Дмитрий 19.02.2018 11:17:41
		КонецЕсли;
		
		// значения по умолчанию
		Если НЕ ПустаяСтрока(СтрДействие.АдресХранилищеЗначенияПоУмолчанию) Тогда
			СтрокаТЧ.ХранилищеЗначенияПоУмолчанию = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрДействие.АдресХранилищеЗначенияПоУмолчанию), Новый СжатиеДанных(9));
		КонецЕсли;
		
		Если СтрДействие.РегистрацияОбработки Тогда			
			СтрокаТЧ.ХранилищеОбработка	= Новый ХранилищеЗначения(СтрДействие.ДвоичныеДанныеОбработки, Новый СжатиеДанных(9));
			//{[+](фрагмент добавлен), Виноградов Дмитрий Александрович 19.02.2018 11:17:41 ID
			Хеш = Новый ХешированиеДанных(ХешФункция.SHA256);
			Хеш.Добавить(СтрДействие.ДвоичныеДанныеОбработки);
			СтрокаТЧ.ОтпечатокОбработки = Base64Строка(Хеш.ХешСумма);
			//}Виноградов Дмитрий 19.02.2018 11:17:41
			СтрДействие.РегистрацияОбработки = Ложь;
		КонецЕсли;
		
		// адаптированный код из ERP
		Использование = СтрДействие.Использование;
		
		ПустойИД = "00000000-0000-0000-0000-000000000000";
		СтрДействие.РегламентноеЗадание	= ?(ЗначениеЗаполнено(СтрДействие.РегламентноеЗадание), СтрДействие.РегламентноеЗадание, ПустойИД);
	
		ПараметрыЗаданияДляОбновления = Новый Структура("Действие, РегламентноеЗадание, Использование, Расписание");
		ЗаполнитьЗначенияСвойств(ПараметрыЗаданияДляОбновления, СтрДействие);
		
		Задание = desОбменДаннымиВызовСервера.Задание(СтрДействие.РегламентноеЗадание);
		Если Задание = Неопределено Тогда // Не найдено
			Если Использование Тогда
				// Создать и зарегистрировать.
				ПараметрыЗадания = Новый Структура;
				ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.desВыполнениеОбмена);
				ПараметрыЗадания.Вставить("Использование", Использование);
				Задание = desОбменДаннымиВызовСервера.ДобавитьЗадание(ПараметрыЗадания);
								
				СтрокаТЧ.РегламентноеЗадание = desОбменДаннымиВызовСервера.УникальныйИдентификатор(Задание);
				ПараметрыЗаданияДляОбновления.РегламентноеЗадание = СтрокаТЧ.РегламентноеЗадание;
				
				ЗаданияДляОбновления.Вставить(ПараметрыЗаданияДляОбновления, Задание);
				//{[+](фрагмент добавлен), Виноградов Дмитрий Александрович 19.02.2018 13:39:24 ID
				//ОбновитьРегламентноеЗаданиеДействия(СтрокаТЧ.Действие, СтрокаТЧ.РегламентноеЗадание);
				//}Виноградов Дмитрий 19.02.2018 13:39:24
			Иначе
				// Действие не требуется
			КонецЕсли;
		Иначе // Найдено
			ЗаданияДляОбновления.Вставить(ПараметрыЗаданияДляОбновления, Задание);
		КонецЕсли;

	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаданияДляОбновления", ЗаданияДляОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если НоваяСтрока Тогда
			
			ТекущиеДанные.АдресХранилищеСхемыКомпоновкиДанных 		= ПолучитьПустуюСхемуКомпоновкиДанных();
			ТекущиеДанные.АдресХранилищеНастроекКомпоновкиДанных 	= ПолучитьПустуюНастройкуСхемыКомпоновкиДанных();
			
			ТекущиеДанные.РегламентноеЗадание						= "00000000-0000-0000-0000-000000000000";
			ТекущиеДанные.ПредставлениеРасписания					= СформироватьПредставлениеРасписания(Неопределено);
			
			ТекущиеДанные.АдресХранилищеПараметры					= ПоместитьВоВременноеХранилище(Новый Структура, УникальныйИдентификатор);
			
			ТекущиеДанные.АдресХранилищеЗначенияПоУмолчанию			= ПоместитьВоВременноеХранилище(Новый Структура, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание()
	
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;
	КонецЕсли;
	
	Расписание = ТекущиеДанные.Расписание;
	
	Если Расписание = Неопределено Тогда
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		
	КонецЕсли;

	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ДиалогРасписания.Показать(Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтаФорма, Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор())));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено И ДополнительныеПараметры.Свойство("ИдентификаторСтроки") Тогда
		
		РедактируемаяСтрока = Объект.Действия.НайтиПоИдентификатору(ДополнительныеПараметры["ИдентификаторСтроки"]);
		
		РедактируемаяСтрока.Расписание	= Расписание;
		РедактируемаяСтрока.ПредставлениеРасписания = СформироватьПредставлениеРасписания(Расписание);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПредставлениеРасписанияОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НастроитьРасписание();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПредставлениеРасписания(Расписание)

	Возврат ?(Расписание = Неопределено, "<Ввести расписание>", "Выполнять: " + Строка(Расписание));

КонецФункции

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьСлужебныеРеквизиты();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметры(Команда)
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;
	КонецЕсли;
	
	ОбработкаНастройкаПараметров = Новый ОписаниеОповещения("ОбновитьПараметры", ЭтаФорма, Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор()));
	
	//ОткрытьФорму("Справочник.desНастройкиДействийПриОбмене.Форма.ФормаНастройкаПараметров", Новый Структура("АдресХранилищеПараметры", ТекущиеДанные.АдресХранилищеПараметры), ЭтаФорма, ТекущиеДанные.АдресХранилищеПараметры,,,ОбработкаНастройкаПараметров); 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресХранилищеОбщихПараметров", АдресХранилищеОбщихПараметров);
	ПараметрыФормы.Вставить("АдресХранилищеПараметры", ТекущиеДанные.АдресХранилищеПараметры);
	ПараметрыФормы.Вставить("АдресХранилищеЗначенияПоУмолчанию", ТекущиеДанные.АдресХранилищеЗначенияПоУмолчанию);	
	ПараметрыФормы.Вставить("ОтанавливатьОбмен", Объект.ОстанавливатьОбмен);	
	ПараметрыФормы.Вставить("ПовторнаяОтправка", Объект.ПовторнаяОтправка);	
	ПараметрыФормы.Вставить("УведомлятьПоЭлектроннойПочте", ТекущиеДанные.УведомлятьПоЭлектроннойПочте);	
	ПараметрыФормы.Вставить("АдресПолучателяУведомления", ТекущиеДанные.АдресПолучателяУведомления);	
	
	ОткрытьФорму("Справочник.desНастройкиДействийПриОбмене.Форма.ФормаНастройкаПараметров", ПараметрыФормы, ЭтаФорма, ТекущиеДанные.АдресХранилищеПараметры,,,ОбработкаНастройкаПараметров); 
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметры(Результат, Параметры) Экспорт
	
	//ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	ТекущиеДанные = Объект.Действия.НайтиПоИдентификатору(Параметры.ИдентификаторСтроки);
	Если НЕ ТекущиеДанные = Неопределено И ЗначениеЗаполнено(Результат) Тогда
		//ТекущиеДанные.АдресХранилищеПараметры = Результат;
		СтруктураРезультат = ПолучитьИзВременногоХранилища(Результат);
		
		Если СтруктураРезультат.Свойство("АдресХранилищеОбщихПараметров") Тогда
			АдресХранилищеОбщихПараметров = СтруктураРезультат.АдресХранилищеОбщихПараметров;	
		КонецЕсли;
		Если СтруктураРезультат.Свойство("АдресХранилищеПараметры") Тогда
			ТекущиеДанные.АдресХранилищеПараметры = СтруктураРезультат.АдресХранилищеПараметры;	
		КонецЕсли;
		Если СтруктураРезультат.Свойство("АдресХранилищеЗначенияПоУмолчанию") Тогда
			ТекущиеДанные.АдресХранилищеЗначенияПоУмолчанию = СтруктураРезультат.АдресХранилищеЗначенияПоУмолчанию;	
		КонецЕсли;
		Если СтруктураРезультат.Свойство("ОстанавливатьОбмен") Тогда
			Объект.ОстанавливатьОбмен = СтруктураРезультат.ОстанавливатьОбмен;	
		КонецЕсли;
		Если СтруктураРезультат.Свойство("ПовторнаяОтправка") Тогда
			Объект.ПовторнаяОтправка = СтруктураРезультат.ПовторнаяОтправка;	
		КонецЕсли;
		Если СтруктураРезультат.Свойство("УведомлятьПоЭлектроннойПочте") Тогда
			ТекущиеДанные.УведомлятьПоЭлектроннойПочте = СтруктураРезультат.УведомлятьПоЭлектроннойПочте;	
		КонецЕсли;
		Если СтруктураРезультат.Свойство("АдресПолучателяУведомления") Тогда
			ТекущиеДанные.АдресПолучателяУведомления = СтруктураРезультат.АдресПолучателяУведомления;	
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
		
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;
	КонецЕсли;
	
	ПараметрыОбмена = Новый Структура("Организация, Контрагент, ОтпечатокОбработки, ОтанавливатьОбмен, ОтпечатокПараметров, УведомлятьПоЭлектроннойПочте, АдресПолучателяУведомления, АдресХранилищеОбщихПараметров, АдресХранилищеСхемыКомпоновкиДанных, АдресХранилищеНастроекКомпоновкиДанных, ДвоичныеДанныеОбработки, АдресХранилищеПараметры, АдресХранилищеЗначенияПоУмолчанию");
	ЗаполнитьЗначенияСвойств(ПараметрыОбмена, ЭтаФорма);
	ЗаполнитьЗначенияСвойств(ПараметрыОбмена, Объект);
	ЗаполнитьЗначенияСвойств(ПараметрыОбмена, ТекущиеДанные);
	
	ВыполнитьОбработкуНаСервере(ПараметрыОбмена);
		
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуНаСервере(ПараметрыОбработки)
	
	ДанныеОбработки = ПараметрыОбработки.ДвоичныеДанныеОбработки;
	
	Если ДанныеОбработки = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".epf");
	ДанныеОбработки.Записать(ИмяВременногоФайла);
	Попытка
		ОбработкаОбменаДанными = ВнешниеОбработки.Создать(ИмяВременногоФайла, Ложь);
	Исключение
		ОбработкаОбменаДанными = Неопределено;
		Сообщить("Ошибка при создании обработки. " + ОписаниеОшибки());
	КонецПопытки;
	
	ПараметрыОбмена = ПараметрыОбработки;
	ПараметрыОбмена.Вставить("ХранилищеОбщихПараметров", Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ПараметрыОбработки.АдресХранилищеОбщихПараметров)));
	ПараметрыОбмена.Вставить("ХранилищеСхемаИсточникаДанных", Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ПараметрыОбработки.АдресХранилищеСхемыКомпоновкиДанных)));
	ПараметрыОбмена.Вставить("ХранилищеКомпоновщикНастроек", Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ПараметрыОбработки.АдресХранилищеНастроекКомпоновкиДанных)));
	ПараметрыОбмена.Вставить("ХранилищеПараметры", Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ПараметрыОбработки.АдресХранилищеПараметры)));
	ПараметрыОбмена.Вставить("ХранилищеЗначенияПоУмолчанию", Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ПараметрыОбработки.АдресХранилищеЗначенияПоУмолчанию)));
	ПараметрыОбмена.Вставить("Настройка", Объект.Ссылка);
	Если ОбработкаОбменаДанными = Неопределено Тогда
		
	Иначе 
		Попытка
			ОбработкаОбменаДанными.ВыполнитьОбмен(ПараметрыОбмена);
		Исключение
			Сообщить("Ошибка при выполнении обработки. " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ВернутьХранилищеЗначения()


&НаСервереБезКонтекста
Функция ПолучитьРегламентноеЗаданиеДействия(Действие)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Действие", Действие);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	desДействияПриОбмене.РегламентноеЗадание КАК РегламентноеЗадание
	|ИЗ
	|	Справочник.desДействияПриОбмене КАК desДействияПриОбмене
	|ГДЕ
	|	desДействияПриОбмене.Ссылка = &Действие";
	
	Результат = "00000000-0000-0000-0000-000000000000";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.РегламентноеЗадание;	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ДействияДействиеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.РегламентноеЗадание = ПолучитьРегламентноеЗаданиеДействия(ТекущиеДанные.Действие);	
		ОбновитьПараметрыРегламентногоЗадания(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыРегламентногоЗадания(ИдентификаторЭлементаКоллекции)
	СтрДействия = Объект.Действия.НайтиПоИдентификатору(ИдентификаторЭлементаКоллекции);
	РегламентноеЗадание = ?(ПустаяСтрока(СтрДействия.РегламентноеЗадание), Неопределено, desОбменДаннымиВызовСервера.Задание(СтрДействия.РегламентноеЗадание));
	
	Если РегламентноеЗадание <> Неопределено Тогда
		Расписание = РегламентноеЗадание.Расписание;
		СтрДействия.Расписание			= Расписание;
		СтрДействия.Использование		= РегламентноеЗадание.Использование;
		СтрДействия.ПредставлениеРасписания		= СформироватьПредставлениеРасписания(Расписание);
	КонецЕсли;			
КонецПроцедуры
 


&НаСервере
Процедура УправлениеВидимостью()
	
	Если Объект.ВариантОбмена = Перечисления.desВариантыНастроекОбмена.ОбменEDI Тогда
		
		Элементы.ПрофильОбмена.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Организация.Видимость = Истина;
		Элементы.ИдентификатрЭДО.Видимость = Истина;
		
	ИначеЕсли Объект.ВариантОбмена = Перечисления.desВариантыНастроекОбмена.ОбменСКлиентом Тогда
		
		Элементы.ПрофильОбмена.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Организация.Видимость = Истина;
		Элементы.ИдентификатрЭДО.Видимость = Ложь;
				
	Иначе
		
		Элементы.ПрофильОбмена.Видимость = Ложь;
		Элементы.Контрагент.Видимость = Ложь;
		Элементы.Организация.Видимость = Ложь; 
		Элементы.ИдентификатрЭДО.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбменаПриИзменении(Элемент)
	УправлениеВидимостью();
КонецПроцедуры


&НаКлиенте
Процедура ИдентификатрЭДООткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
КонецПроцедуры
