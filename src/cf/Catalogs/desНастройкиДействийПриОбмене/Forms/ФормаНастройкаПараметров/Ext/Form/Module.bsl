
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Общие параметры и параметры обработки
	СтруктураАдресовПараметров = ПолучитьСтруктуруАдресовПараметров();
	Для каждого АдресПараметра Из СтруктураАдресовПараметров Цикл
		Адрес = АдресПараметра.Ключ;
		Если Параметры.Свойство(Адрес) И ЗначениеЗаполнено(Параметры[Адрес]) Тогда
			СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры[Адрес]);
			Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
				Для каждого ОписаниеПараметра Из СтруктураПараметров Цикл
					СтрПараметр = ЭтаФорма[АдресПараметра.Значение].Добавить();
					СтрПараметр.ИмяПараметра = ОписаниеПараметра.Ключ;
					СтрПараметр.Значение = ОписаниеПараметра.Значение;
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// Значения по умолчанию
	ЗначенияПоУмолчаниюИзПараметровВРеквизитФормы();
	// Реквизиты объекта
	Параметры.Свойство("ОтанавливатьОбмен", ОстанавливатьОбмен);
	Параметры.Свойство("ПовторнаяОтправка", ПовторнаяОтправка);
	Параметры.Свойство("УведомлятьПоЭлектроннойПочте", УведомлятьПоЭлектроннойПочте);
	Параметры.Свойство("АдресПолучателяУведомления", АдресПолучателяУведомления);
КонецПроцедуры

&НаСервере
Процедура ЗначенияПоУмолчаниюИзПараметровВРеквизитФормы()
	
	АдресКлюч = "АдресХранилищеЗначенияПоУмолчанию";
	
	// Проверим, что параметр заполнен
	Если Параметры.Свойство(АдресКлюч) И ЗначениеЗаполнено(Параметры[АдресКлюч]) Тогда
		
		ЗначенияПоУмолчанию = ПолучитьИзВременногоХранилища(Параметры[АдресКлюч]);
		// Проверим, что параметр содержит ожидаем тип значения и заполнен
		Если ТипЗнч(ЗначенияПоУмолчанию) = Тип("Структура") 
					И ЗначенияПоУмолчанию.Свойство("МассивЗначений") 
					И ЗначенияПоУмолчанию.МассивЗначений.Количество() > 0 Тогда
			
			Для каждого Строка Из ЗначенияПоУмолчанию.МассивЗначений Цикл
				
				Идентификатор = Строка.Идентификатор;
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Идентификатор);
				Если ОбъектМетаданных <> Неопределено Тогда
					СтрокаНаФорме = ЭтаФорма.ОбъектыМетаданныхЗначенияПоУмолчанию.Добавить();
					
					СтрокаНаФорме.Использовать  = Строка.Использовать;
					СтрокаНаФорме.Идентификатор = Строка.Идентификатор;
					СтрокаНаФорме.ЗначениеПоУмолчанию = Строка.ЗначениеПоУмолчанию;
					СтрокаНаФорме.Представление = ОбъектМетаданных.Представление();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначенияПоУмолчаниюИзРеквизитаФормыВПараметры()
	
	МассивЗначенийПоУмолчанию = Новый Массив;
	Для каждого Строка Из ОбъектыМетаданныхЗначенияПоУмолчанию Цикл
		СтруктураСтроки = Новый Структура("Использовать,Идентификатор,ЗначениеПоУмолчанию");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		МассивЗначенийПоУмолчанию.Добавить(СтруктураСтроки);		
	КонецЦикла;
	Возврат ПоместитьВоВременноеХранилище(Новый Структура("МассивЗначений", МассивЗначенийПоУмолчанию), ЭтаФорма.ВладелецФормы.УникальныйИдентификатор)
	
КонецФункции
 
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	СтруктураВозврата = Новый Структура;
	СтруктураАдресовПараметров = ПолучитьСтруктуруАдресовПараметров();
	Для каждого АдресПараметра Из СтруктураАдресовПараметров Цикл		
		СтруктураПараметров = Новый Структура();
		Для каждого СтрПараметр Из ЭтаФорма[АдресПараметра.Значение] Цикл
			СтруктураПараметров.Вставить(СтрПараметр.ИмяПараметра, СтрПараметр.Значение);
		КонецЦикла;
		
		СтруктураВозврата.Вставить(АдресПараметра.Ключ, ПоместитьВоВременноеХранилище(СтруктураПараметров, ВладелецФормы.УникальныйИдентификатор));
	КонецЦикла;
	
	СтруктураВозврата.Вставить("АдресХранилищеЗначенияПоУмолчанию", ЗначенияПоУмолчаниюИзРеквизитаФормыВПараметры());
	СтруктураВозврата.Вставить("ОстанавливатьОбмен", ОстанавливатьОбмен);
	СтруктураВозврата.Вставить("ПовторнаяОтправка", ПовторнаяОтправка);
	СтруктураВозврата.Вставить("УведомлятьПоЭлектроннойПочте", УведомлятьПоЭлектроннойПочте);
	СтруктураВозврата.Вставить("АдресПолучателяУведомления", АдресПолучателяУведомления);
	
	Модифицированность = Ложь;
	Закрыть(ПоместитьВоВременноеХранилище(СтруктураВозврата, ВладелецФормы.УникальныйИдентификатор));

КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруАдресовПараметров()
	Возврат Новый Структура("АдресХранилищеОбщихПараметров, АдресХранилищеПараметры", "ОбщиеПараметры", "ПараметрыДействия");
КонецФункции // ()

&НаКлиенте
Процедура ОбъектыМетаданныхЗначениеПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ОбъектыМетаданных.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;
	КонецЕсли;
	
	ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	ОбъектJSON = ОбеспечитьЗначениеПоУмолчаниюОбъект(ИдентификаторТекущейСтроки);
	
	Если ПустаяСтрока(ОбъектJSON) Тогда
		Возврат;	
	КонецЕсли; 
	
	ОбработкаНастройкаПараметров = Новый ОписаниеОповещения("ОбновитьЗначенияПоУмолчанию"
		,ЭтаФорма
		,Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор()));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбъектJSON", ОбъектJSON);
	ДополнительныеПараметры.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
	
	ОткрытьФорму("Справочник.desНастройкиДействийПриОбмене.Форма.ФормаРедактированияЭталонногоОбъекта"
		,ДополнительныеПараметры
		,Элемент
		,ЭтаФорма.УникальныйИдентификатор,,
		,ОбработкаНастройкаПараметров); 

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияПоУмолчанию(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	ТекущиеДанные = ЭтаФорма.ОбъектыМетаданныхЗначенияПоУмолчанию.НайтиПоИдентификатору(Параметры.ИдентификаторСтроки);
	Если НЕ ТекущиеДанные = Неопределено И ЗначениеЗаполнено(Результат) Тогда
		ТекущиеДанные.ЗначениеПоУмолчанию = Результат;
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ОбеспечитьЗначениеПоУмолчаниюОбъект(ИдентификаторТекущейСтроки)
	
	Результат = "";
	
	ТекущиеДанные = ОбъектыМетаданныхЗначенияПоУмолчанию.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ТекущиеДанные.Идентификатор);
	
	Если Не ПустаяСтрока(ТекущиеДанные.Идентификатор) И ОбъектМетаданных <> Неопределено Тогда
		
		// Прочитаем эталонный объект
		Если Не ПустаяСтрока(ТекущиеДанные.ЗначениеПоУмолчанию) Тогда
			Попытка
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ТекущиеДанные.ЗначениеПоУмолчанию);
				// Проверим объект
				ОбъектДанные = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
				Результат = ТекущиеДанные.ЗначениеПоУмолчанию;
			Исключение
				Сообщить("" + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		// Создадим эталонный объект
		Если ПустаяСтрока(Результат) Тогда
			Если СтрНайти(ОбъектМетаданных.ПолноеИмя(), "Документ") Тогда
				ОбъектДанных = Документы[ОбъектМетаданных.Имя].СоздатьДокумент();
			ИначеЕсли СтрНайти(ОбъектМетаданных.ПолноеИмя(), "Справочник") Тогда
				ОбъектДанных = Справочники[ОбъектМетаданных.Имя].СоздатьЭлемент();
			Иначе
				ВызватьИсключение "Ошибка разбора метаданных объекта.";
			КонецЕсли;
			
			Для каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
				ОбъектДанных[ТабличнаяЧасть.Имя].Добавить();	
			КонецЦикла; 
			
			// Сериализуем эталонный объект
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектДанных, НазначениеТипаXML.Явное);
			Результат = ЗаписьJSON.Закрыть();
			
		КонецЕсли; 	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
 
&НаКлиенте
Процедура ОбъектыМетаданныхЗначениеПоУмолчаниюОткрытие(Элемент, СтандартнаяОбработка)
	// Откроем эталонный объект для редактирования
	
КонецПроцедуры