
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.ВладелецШаблона 	= ПараметрыСеанса.ТекущийПользователь;
		Объект.АвторПоручения	= "ОтСебя";
	КонецЕсли;	
	
	РуководительПользователя 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ТекущийПользователь, "вогРуководитель", Истина);
	ТекущийПользователь			= ПараметрыСеанса.ТекущийПользователь;
	
	ТолькоПросмотр = Не ТекущийПользователь = Объект.ВладелецШаблона;
	
	// ++ VOG Солодов В.В. 23.06.2020 CRM-724
	УстановитьНастройкиСобственника(ТекущийПользователь);
	// -- VOG Солодов В.В. 23.06.2020
	
	УстановитьДополнительныеСвойстваФормы(ТипЗнч(Объект.Кому) = Тип("СправочникСсылка.РолиИсполнителей"));
	
	Если ЗначениеЗаполнено(Объект.Кому) И ТипЗнч(Объект.Кому) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Ложь);
	КонецЕсли;
	
	Элементы.АвторПоручения.Видимость = ЗначениеЗаполнено(РуководительПользователя);
	
	ПолучитьПараметрыНастройкиБизнесПроцессов();
	
КонецПроцедуры

#КонецОбласти


#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ПериодическоеПриИзменении(Элемент)
	
	Если Объект.Периодическое Тогда
		Если НЕ ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			СоздатьНовыйЭлементРядСобытий();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомуПриИзменении(Элемент)
	
	ОпределитьТипАдресации();
	
	Объект.Групповая = Ложь;
	Если ЗначениеЗаполнено(Объект.Кому) И ТипЗнч(Объект.Кому) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Кому) тогда 
		Если Не ПроверитьДоступностьВыдачиПорученияНаИсполнителяНаСервере(Объект.Кому) тогда
			Сообщить("У вас нет прав на выдачу поручений для " + Объект.Кому);
			Объект.Кому = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.Кому.ВыбиратьТип = Ложь Тогда
		
		парам1 = Новый ПараметрВыбора("ТолькоДоступные", 	Истина);
		парам2 = Новый ПараметрВыбора("ВсеПользователи", 	Истина);
		парам3 = Новый ПараметрВыбора("СДополнительными", 	Истина);
		М = Новый Массив;
		М.Добавить(Парам1);
		М.Добавить(Парам2);
		М.Добавить(Парам3);
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(М);
		
		Если ТипЗнч(Объект.Кому) = Тип("СправочникСсылка.Пользователи") тогда
			
			Если Объект.АвторПоручения = "ОтРуководителя" Или Собственник Тогда // ++ VOG Солодов В.В. 24.06.2020 CRM-724 / Добавлено условие Собственник
				
				СтандартнаяОбработка = Ложь;
				
				ПараметрыОткрытия = Новый Структура;
				ПараметрыОткрытия.Вставить("РежимВыбора", 				Истина);
				// ++ VOG Солодов В.В. 24.06.2020 CRM-724
				Если Собственник Тогда
					ПараметрыОткрытия.Вставить("ВсеПользователи", Истина)
				Иначе
				// -- VOG Солодов В.В. 24.06.2020 CRM-724
					ПараметрыОткрытия.Вставить("РуководительПользователя", 	РуководительПользователя);
				КонецЕсли;
				
				ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработкаОповещенияОВыбореИсполнителя", ЭтотОбъект);
				
				ОткрытьФорму("Справочник.Пользователи.Форма.CRM_ФормаСписка",
				ПараметрыОткрытия,
				ЭтотОбъект,
				ЭтотОбъект,
				,
				,
				ОповещениеОВыборе,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СписокТиповИсполнителей = ПолучитьСписокТиповИсполнителей();
	
	ОписаниеОповещенияОВыбореТипаИсполнителя = НОвый ОписаниеОповещения("ОбработкаОповещенияОВыбореТипаИсполнителя",ЭтаФорма);
	
	СписокТиповИсполнителей.ПоказатьВыборЭлемента(ОписаниеОповещенияОВыбореТипаИсполнителя,"Выберите вариант определения исполнителя",Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомуОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Кому = Неопределено;
	Элементы.Кому.ВыбиратьТип = Истина;
	
	Объект.Групповая = Ложь;
	Если ЗначениеЗаполнено(Объект.Кому) И ТипЗнч(Объект.Кому) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Ложь);
	КонецЕсли;;
	
КонецПроцедуры

&НаКлиенте
Процедура РядСобытийПриИзменении(Элемент)
	
	ЗаполнитьДатыРасписанияПоРядуСобытий();
	
КонецПроцедуры

&НаКлиенте
Процедура АвторПорученияПриИзменении(Элемент)
			
	Объект.Кому = Неопределено;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Кому", "ВыбиратьТип", Истина);
	
	ОпределитьТипАдресации();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПриИзменении(Элемент)
	
	ПараметрыНастройкиБизнесПроцессов = ПолучитьПараметрыНастройкиБизнесПроцессов();
	
	// ++ VOG Солодов В.В. 24.06.2020 CRM-724
	Если Собственник Тогда
		Объект.Кому = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	// -- VOG Солодов В.В. 24.06.2020 CRM-724
	Иначе
		Объект.Кому = Неопределено;
		Элементы.Кому.ВыбиратьТип = Истина;
	КонецЕсли;
	
	Объект.Групповая = Ложь;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Тема) тогда
		Ограничитель 	= СтрНайти(Объект.Описание, Символы.ПС);
		Объект.Тема 	= ?(Ограничитель = 0, Объект.Описание, Лев(Объект.Описание, Ограничитель - 1));		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		
		Объект.Исполнители.Добавить().Исполнитель = ВыбранноеЗначение;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДопПараметры = Новый Структура("ИмяТч", "Клиенты");
	
	ОписаниеОповещенияОкончаниеПодбораПредметов = Новый ОписаниеОповещения("ОбработкаОповещенияОПодбореПредметов",ЭтаФорма, ДопПараметры);
	
	ФПараметры = Новый Структура("МножественныйВыбор",Истина);
	
	ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ФПараметры, Элемент,,,,ОписаниеОповещенияОкончаниеПодбораПредметов);
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДопПараметры = Новый Структура("ИмяТч", "ТорговыеТочки");
	
	ОписаниеОповещенияОкончаниеПодбораПредметов = Новый ОписаниеОповещения("ОбработкаОповещенияОПодбореПредметов",ЭтаФорма, ДопПараметры);
	
	ФПараметры = Новый Структура("МножественныйВыбор",Истина);
	
	ОткрытьФорму("Справочник.вогТорговыеТочки.ФормаВыбора", ФПараметры, Элемент,,,,ОписаниеОповещенияОкончаниеПодбораПредметов);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДопПараметры = Новый Структура("ИмяТч", "Товары");
	
	ОписаниеОповещенияОкончаниеПодбораПредметов = Новый ОписаниеОповещения("ОбработкаОповещенияОПодбореПредметов",ЭтаФорма, ДопПараметры);
	
	ФПараметры = Новый Структура("МножественныйВыбор",Истина);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ФПараметры, Элемент,,,,ОписаниеОповещенияОкончаниеПодбораПредметов);
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДопПараметры = Новый Структура("ИмяТч", "Коллекции");
	
	ФПараметры = Новый Структура("МножественныйВыбор",Истина);
	
	ОписаниеОповещенияОкончаниеПодбораПредметов = Новый ОписаниеОповещения("ОбработкаОповещенияОПодбореПредметов",ЭтаФорма, ДопПараметры);
	
	ОткрытьФорму("Справочник.вогКоллекцииНоменклатуры.ФормаВыбора", ФПараметры, Элемент,,,,ОписаниеОповещенияОкончаниеПодбораПредметов);
	
КонецПроцедуры

#КонецОбласти


#Область Команды

&НаКлиенте
Процедура вогПерейтиВКалендарь(Команда)
	
	Если ТипЗнч(Объект.Кому) = Тип("СправочникСсылка.Пользователи") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Пользователь", Объект.Кому);
		
		ОткрытьФорму("Обработка.CRM_КалендарьМенеджера.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор);
		
	Иначе	
		ПоказатьПредупреждение(, НСтр("ru = 'Команда доступна только для конкретного исполнителя. '"));	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура вогСписокИсполнителей(Команда)
	
	Элементы.вогСписокИсполнителей.Пометка = НЕ Элементы.вогСписокИсполнителей.Пометка;
	Элементы.ГруппаИсполнители.Видимость =  Элементы.вогСписокИсполнителей.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборИсполнителей(Команда)
	
	ПараметрыФормы = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе, МножественныйВыбор", Истина, Ложь, Ложь);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКлассификацииТаблицаКлиентов(Команда)
	
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("ФормаПартнеров", НСтр("ru = 'Классификация клиентов'"));		
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияОЗаполненииПоКлассификации", ЭтотОбъект, Объект.Клиенты);
	Если СписокВариантов.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(Оповещение, СписокВариантов[0]); 
	Иначе	
		ПоказатьВыборИзМеню(Оповещение, СписокВариантов, Элементы.КлиентыЗаполнитьПоКлассификацииТаблицаКлиентов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКлассификацииТаблицаНоменклатураКоллекции(Команда)
	
	СписокВариантов = Новый СписокЗначений;
	
	НоменклатураВидимость = ПараметрыНастройкиБизнесПроцессов.Номенклатура 
		И ПараметрыНастройкиБизнесПроцессов.ВариантЗаполненияДанныхНоменклатураКоллекции = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач");	
	Если НоменклатураВидимость Тогда
		СписокВариантов.Добавить("ФормаНоменклатура", НСтр("ru = 'Классификация номенклатуры'"))	
	КонецЕсли;	
	
	КоллекцииВидимость = ПараметрыНастройкиБизнесПроцессов.Коллекции 
		И ПараметрыНастройкиБизнесПроцессов.ВариантЗаполненияДанныхНоменклатураКоллекции = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач");	
	Если КоллекцииВидимость Тогда
		СписокВариантов.Добавить("ФормаКоллекцииНоменклатуры", НСтр("ru = 'Классификация коллекций'"))	
	КонецЕсли;	
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияОЗаполненииПоКлассификации", ЭтотОбъект, Объект.Товары);
	Если СписокВариантов.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(Оповещение, СписокВариантов[0]); 
	Иначе	
		ПоказатьВыборИзМеню(Оповещение, СписокВариантов, Элементы.ТаблицаНоменклатураКоллекцииЗаполнитьПоКлассификации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработкиОповещения

&НаКлиенте
Процедура ОбработкаОповещенияВопросОЗаписиШаблона(Параметры, Дополнительно) Экспорт
	
	Если Параметры = КодВозвратаДиалога.Да Тогда
		Записать();
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Объект.Периодическое = Ложь;
		Возврат;
	КонецЕсли;
	
	СозданиеЭлементаРядаСобытий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОСозданииРядаСобытий(Параметры, ДополнительныеПараметры) Экспорт
	
	Если Не Параметры = Неопределено И Не Параметры.ПризнакЗакрытия = Неопределено Тогда
		Если Параметры.ПризнакЗакрытия = Истина Или Параметры.ДанныеБылиИзменены = Истина Тогда
			Если ДополнительныеПараметры.НовыйРяд Тогда
				Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
					Объект.РядСобытий	= Параметры.Ссылка;
					ЗаполнитьДатыРасписанияПоРядуСобытий();
				Иначе
					Объект.Периодическое = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОбИзмененииРядаСобытий(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	МассивДат = ПолучитьМассивДатПоРядуСобытий(Объект.РядСобытий);
	
	Если Результат = "ДобавитьКСуществующим" Тогда
		
		Для Каждого ДатаСобытия Из МассивДат Цикл
			
			Если Объект.ДатыРасписания.НайтиСтроки(Новый Структура("День", ДатаСобытия)).Количество() = 0 Тогда
				Объект.ДатыРасписания.Добавить().День = ДатаСобытия;
			КонецЕсли;	
			
		КонецЦикла;	
		
	ИначеЕсли Результат = "ЗаменитьСуществующие" Тогда
		
		Объект.ДатыРасписания.Очистить();
		
		Для Каждого ДатаСобытия Из МассивДат Цикл
			Объект.ДатыРасписания.Добавить().День = ДатаСобытия;	
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОповещенияОВыбореТипаИсполнителя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	Элементы.Кому.ОграничениеТипа = Новый ОписаниеТипов(Результат.Значение);
	Элементы.Кому.СписокВыбора.Очистить();
	
	ОткрыватьФорму 		= Ложь;
	ПараметрыОткрытия 	= Новый Структура;
	ОповещениеОВыборе 	= Новый ОписаниеОповещения("ОбработкаОповещенияОВыбореИсполнителя", ЭтотОбъект);
	
	Если Результат.Значение= "ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач" Тогда
		
		СписокВидовИсполнителейЗадач = Элементы.Кому.СписокВыбора;
		СписокВидовИсполнителейЗадач.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.ОсновнойМенеджер"));
		СписокВидовИсполнителейЗадач.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.ОсновнойКоординатор"));
		Элементы.Кому.РежимВыбораИзСписка = Истина;
		
	ИначеЕсли Результат.Значение= "СправочникСсылка.СтруктураПредприятия" Тогда
		
		ОткрыватьФорму 		= Истина;

		ПараметрыОткрытия.Вставить("ТолькоДоступные", 	Истина);
		ПараметрыОткрытия.Вставить("СДополнительными", 	Истина);
	
		ИмяОткрываемойФормы = "Справочник.СтруктураПредприятия.Форма.CRM_ФормаВыбора";
				
	ИначеЕсли Результат.Значение= "СправочникСсылка.Пользователи" Тогда
				
		Если ЗначениеЗаполнено(РуководительПользователя) Тогда
			ПараметрыОткрытия.Вставить("РуководительПользователя", 	РуководительПользователя);
		КонецЕсли;

		ПараметрыОткрытия.Вставить("ТолькоДоступные", 	Истина);
		ПараметрыОткрытия.Вставить("ВсеПользователи", 	Истина);
		ПараметрыОткрытия.Вставить("СДополнительными", 	Истина);
	
		ОткрыватьФорму 		= Истина;
		ИмяОткрываемойФормы = "Справочник.Пользователи.Форма.CRM_ФормаСписка";
		
		
	ИначеЕсли Результат.Значение= "СправочникСсылка.РолиИсполнителей" Тогда
		
		ОткрыватьФорму 		= Истина;
		ИмяОткрываемойФормы = "Справочник.РолиИсполнителей.Форма.ФормаВыбора";

	Иначе
		Элементы.Кому.РежимВыбораИзСписка = Ложь;
	КонецЕсли;
	
	Если ОткрыватьФорму И ЗначениеЗаполнено(ИмяОткрываемойФормы) Тогда
		
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		ОткрытьФорму(ИмяОткрываемойФормы,
			ПараметрыОткрытия,
			ЭтотОбъект,
			ЭтотОбъект,
			,
			,
			ОповещениеОВыборе,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	Элементы.Кому.ВыбиратьТип = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОВыбореИсполнителя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.Кому = Результат;
	КонецЕсли;
	
	Объект.Групповая = Ложь;
	Если ЗначениеЗаполнено(Объект.Кому) И ТипЗнч(Объект.Кому) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Ложь);
	КонецЕсли;;
	
	ОпределитьТипАдресации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОПодбореПредметов(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Для Каждого ВыбранноеЗначение Из Результат Цикл
			
			СтрокаТч = Объект[ДополнительныеПараметры.ИмяТч].Добавить();
			СтрокаТч.Объект = ВыбранноеЗначение;
			
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОЗаполненииПоКлассификации(ЭлементСписка, Элемент) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиент.ОткрытьПодборПоКлассификации(ЭлементСписка.Значение, Элемент);	
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура СоздатьНовыйЭлементРядСобытий()
	
	Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = (НСтр(	"ru = 'Данные еще не записаны.
								|Установка признака периодичности возможна только после записи данных.
								|Данные будут записаны.'"));
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияВопросОЗаписиШаблона", ЭтотОбъект);
		ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		СозданиеЭлементаРядаСобытий();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СозданиеЭлементаРядаСобытий()
	
	ДатаНачала = ТекущаяДата();
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("ДатаНачала", НачалоДня(ДатаНачала)));
	ПараметрыФормы.Вставить("ВремяНачала",CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ДатаНачала).Время);
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("НовыйРяд", Истина);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОСозданииРядаСобытий", ЭтотОбъект, Дополнительно);
		
	ОткрытьФорму("Справочник.CRM_РядыСобытий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ,,, ОП);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатыРасписанияПоРядуСобытий()
	
	Если Объект.РядСобытий.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДатыРасписания.Количество() = 0 Тогда
		
		ОбработкаОповещенияОбИзмененииРядаСобытий("ЗаменитьСуществующие", Неопределено);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияОбИзмененииРядаСобытий", ЭтаФорма);
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ДобавитьКСуществующим", "Добавить к существующим");
		СписокКнопок.Добавить("ЗаменитьСуществующие", "Заменить существующие");
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(Оповещение, "В табличной части уже есть записи. Выберите действие:", СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция  ПолучитьСписокТиповИсполнителей()
		
	СписокТиповИсполнителей = Новый СписокЗначений;
	 ТипПоручения = Объект.Тип;
	 Если ТипПоручения.ЗадачаНаКаждыйПредмет 
		 и (ТипПоручения.Клиенты или ТипПоручения.ТорговыеТочки) Тогда
		 СписокТиповИсполнителей.Добавить("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач","По ответственному за объект");
	 Иначе
		 СписокТиповИсполнителей.Добавить("СправочникСсылка.СтруктураПредприятия","По подразделению");
		 СписокТиповИсполнителей.Добавить("СправочникСсылка.Пользователи","По пользователю");
		 СписокТиповИсполнителей.Добавить("СправочникСсылка.РолиИсполнителей","По роли исполнителя");
		 
	 КонецЕсли;
	 
	Возврат СписокТиповИсполнителей;
	
КонецФункции

&НаСервере
Процедура ОпределитьТипАдресации()

	Объект.Исполнители.Очистить();
	
	Если ТипЗнч(Объект.Кому) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		
		УстановитьДополнительныеСвойстваФормы(Истина);
		
		Если Объект.АвторПоручения 	= "ОтРуководителя" Тогда
			ТекущиеПодразделение 	= РуководительПользователя.Подразделение;
			ПодчиненныеСотрудники 	= РегистрыСведений.вогИсполнителиРолейИДелегаты.ПолучитьПодчиненныхПользователей(РуководительПользователя);
		Иначе
			ТекущиеПодразделение 	= Пользователи.ТекущийПользователь().Подразделение;
			ПодчиненныеСотрудники 	= ПараметрыСеанса.вогПодчиненныеСотрудники;
		КонецЕсли;

		ДополнительныеПараметрыАдресации = Новый Структура("Подразделение",ТекущиеПодразделение);
		ДополнительныеПараметрыАдресации.Вставить("ПодчиненныеСотрудники",ПодчиненныеСотрудники);
		
		ТаблицаИсполнителей = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРолиДляПоручения(Объект.Кому,ДополнительныеПараметрыАдресации);
		
	ИначеЕсли ТипЗнч(Объект.Кому) = Тип("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач") Тогда
		
		Если Объект.АвторПоручения = "ОтРуководителя" Тогда
			
			ПодчиненныеСотрудники = РегистрыСведений.вогИсполнителиРолейИДелегаты.ПолучитьПодчиненныхПользователей(РуководительПользователя);
				
			ТаблицаИсполнителей = Новый СписокЗначений;
			ТаблицаИсполнителей.ЗагрузитьЗначения(ПодчиненныеСотрудники);
			
		Иначе
			ТаблицаИсполнителей = CRM_БизнесПроцессыСервер.ПолучитьПодчиненныхИсполнителей();
		КонецЕсли;
		
	Иначе
		
		УстановитьДополнительныеСвойстваФормы(Ложь);
		Возврат;
		
	КонецЕсли;
	
	Для каждого Стр Из ТаблицаИсполнителей Цикл
		Если Стр.Значение <> Объект.ВладелецШаблона Тогда
			Объект.Исполнители.Добавить().Исполнитель = Стр.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьДополнительныеСвойстваФормы(Значение = Ложь)
	
	Элементы.вогСписокИсполнителей.Пометка = Ложь;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"вогСписокИсполнителей"	,"Видимость",Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаИсполнители"		,"Видимость",Ложь);
	
	// ++ VOG Солодов В.В. 24.06.2020 CRM-724
	Если Собственник Тогда
		ЗначениеСвойства = Ложь;
	Иначе
		ЗначениеСвойства = Не Значение;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"вогПерейтиВКалендарь",
		"Видимость",
		ЗначениеСвойства);
	// До изменения
	//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"вогПерейтиВКалендарь"	,"Видимость",не Значение);
	// -- VOG Солодов В.В. 24.06.2020 CRM-724
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьДоступностьВыдачиПорученияНаИсполнителяНаСервере(ИсполнительПоручения)	
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	СписокДоступныхПользователей = CRM_УправлениеДоступомКПользователям.ПолучитьСписокДоступныхПользователей();
	Для каждого Стр из ТекущийПользователь.вогПользователиДляПорученияДоп цикл	
		СписокДоступныхПользователей.Добавить(Стр.Пользователь);	
	КонецЦикла;
	СписокДоступныхПодразделений = CRM_УправлениеДоступомКПользователям.ПолучитьСписокДоступныхПодразделений();
	Для каждого Стр из ТекущийПользователь.вогПодразделенияДляПорученийДоп цикл	
		СписокДоступныхПодразделений.Добавить(Стр.Подразделение);	
	КонецЦикла;
	
	Если ТипЗнч(ИсполнительПоручения) = Тип("СправочникСсылка.Пользователи") тогда
		Если СписокДоступныхПользователей.НайтиПоЗначению(ИсполнительПоручения)<>Неопределено тогда
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ИсполнительПоручения) = Тип("СправочникСсылка.СтруктураПредприятия") тогда
		Если СписокДоступныхПодразделений.НайтиПоЗначению(ИсполнительПоручения)<>Неопределено тогда
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивДатПоРядуСобытий(РядСобытий)
	
	ДанныеРядаСобытий = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РядСобытий, "ДатаНачала, ДатаОкончания");
	
	Возврат Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ДанныеРядаСобытий.ДатаНачала, ДанныеРядаСобытий.ДатаОкончания, РядСобытий);
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыНастройкиБизнесПроцессов()
	
	ПараметрыНастройкиБизнесПроцессов = Справочники.вогНастройкиБизнесПроцессов.ПараметрыНастройки(Объект.Тип);
	
	ВариантЗаполненияДанных = Перечисления.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач;
	
	вогОбъектыДляПроцессаСервер.НастроитьЭлементыФормы(ЭтотОбъект);
	
	Возврат ПараметрыНастройкиБизнесПроцессов;
	
КонецФункции	

#Область СлужебныеПроцедурыИФункции

// ++ VOG Солодов В.В. 24.06.2020 CRM-724
&НаСервере
Процедура УстановитьНастройкиСобственника(Пользователь)
	
	Собственник = вогОбщегоНазначенияКлиентСерверПовтИсп.ПользовательЯвляетсяСобственником(Пользователь);
	
	Если Собственник Тогда
		
		Элементы.Кому.ВыбиратьТип = Ложь;
		Элементы.Кому.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		Элементы.Кому.СписокВыбора.Очистить();
		Элементы.Кому.КнопкаОчистки = Ложь;
		
		Если Не ЗначениеЗаполнено(Объект.Кому) Тогда
			Объект.Кому = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Сложность",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Важность",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"вогПерейтиВКалендарь",
			"Видимость",
			Ложь);
		
		// Параметры выбора типа поручения
		НовыйПараметрВыбора = Новый ПараметрВыбора("Отбор.ДоступнаДляСобственника", Истина);
		
		МассивПараметровВыбора = Новый Массив();
		МассивПараметровВыбора.Добавить(НовыйПараметрВыбора);
		
		Элементы.Тип.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 24.06.2020 CRM-724

#КонецОбласти