#Если Сервер Тогда
 
Функция ПроверкаУсловияСтатуса(ТекущийДокумент, Условие, ВыводитьСообщение = Ложь) Экспорт
	
		Результат = Неопределено;
	
		СхемаКомпоновкиДанных = 	Условие.ХранилищеСхемыКомпоновкиДанных.Получить();
		НастройкаКомпоновкиДанных = Условие.ХранилищеНастроекКомпоновкиДанных.Получить();
		
		Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") И ТипЗнч(НастройкаКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
			
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаКомпоновкиДанных);
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
						
			КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных();
			НастройкаКомпоновкиДанных 	= КомпоновщикНастроек.ПолучитьНастройки();
			
			ОтчетыПереопределяемый.УстановитьПараметр(НастройкаКомпоновкиДанных, "Ссылка", ТекущийДокумент);
			// { VOG RMV 2019-02-22
			ОтчетыПереопределяемый.УстановитьПараметр(НастройкаКомпоновкиДанных, "вогПодчиненныеСотрудники", ПараметрыСеанса.вогПодчиненныеСотрудники);		
			// } VOG RMV 2019-02-22	
			// ++ VOG Солодов В.В. 14.06.2019 task 351
			ОтчетыПереопределяемый.УстановитьПараметр(НастройкаКомпоновкиДанных, "ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
			// -- VOG Солодов В.В. 14.06.2019
			ПроверитьКорректностьЗаполненияНастроекКомпоновкиДанныхСтатус(НастройкаКомпоновкиДанных);
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкаКомпоновкиДанных,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			
			Попытка 
				РезультатаСКД = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Произошла ошибка выполнения запроса Обратитесь к администратору! (Неверный запрос проверки условия статуса.)"+Символы.ПС+ОписаниеОшибки());
			КонецПопытки;
			
			Результат = ?(РезультатаСКД.Количество() <> 0, Ложь,Истина);
			
		КонецЕсли;

		Возврат Результат;
		
КонецФункции

Процедура ПроверитьКорректностьЗаполненияНастроекКомпоновкиДанныхСтатус(НастройкаКомпоновкиДанных, Отказ = Ложь)
	
	// Проверяет заполненность настроек компоновки данных
	//ЕстьТекущийОбъект = Ложь; 
	//Для каждого ПараметрДанныхЭлементы из НастройкаКомпоновкиДанных.ПараметрыДанных.Элементы Цикл
	//	Если ПараметрДанныхЭлементы.Параметр = Новый ПараметрКомпоновкиДанных("Ссылка") 
	//		И ПараметрДанныхЭлементы.Использование
	//		И ЗначениеЗаполнено(ПараметрДанныхЭлементы.Значение) Тогда
	//		ЕстьТекущийОбъект = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	//Если Не ЕстьТекущийОбъект Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В ПараметрыДанных настройки компоновки данных не заполнен Ссылка! Обратитесь к администратору!", , , , Отказ);
	//КонецЕсли;

	ЕстьВыбранныеПоля = Ложь; 
	Для каждого ВыборЭлементы из НастройкаКомпоновкиДанных.Выбор.Элементы Цикл
		Если ВыборЭлементы.Использование Тогда
			ЕстьВыбранныеПоля = Истина;
		КонецЕсли;
	КонецЦикла;
	Если Не ЕстьВыбранныеПоля Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В ВыбранныеПоля настройки компоновки данных не выбрано ни одно поле! Обратитесь к администратору!", , , , Отказ);
	КонецЕсли;
	
	//ЕстьСтруктура = Ложь; 
	//Для каждого СтруктураЭлементы из НастройкаКомпоновкиДанных.Структура Цикл
	//	Если СтруктураЭлементы.Использование Тогда
	//		ЕстьСтруктура = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	//Если Не ЕстьСтруктура Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В Структуре настройки компоновки данных не выбран ни один элемент структуры! Обратитесь к администратору!", , , , Отказ);
	//КонецЕсли;
	
КонецПроцедуры

#КонецЕсли