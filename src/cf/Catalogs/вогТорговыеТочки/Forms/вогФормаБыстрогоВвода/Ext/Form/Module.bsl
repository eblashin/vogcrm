
#Область ОписаниеПеременных

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ОтключитьЗаполнениеПоИНН;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь 				= Пользователи.ТекущийПользователь();
	ТекущиеПодразделенияПользователя	= Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(ТекущийПользователь.Подразделение);
	
	// { VOG RMV 2019-02-14
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодЗапрос.ИмяРеквизита КАК ИмяРеквизита
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА Пользователи.CRM_ДолжностнаяПозиция.Роль = ЗНАЧЕНИЕ(Справочник.РолиКонтактныхЛицПартнеров.Менеджер)
	|				ТОГДА ""ОтветственныйМенеджер""
	|			КОГДА Пользователи.CRM_ДолжностнаяПозиция.Роль = ЗНАЧЕНИЕ(Справочник.РолиКонтактныхЛицПартнеров.Координатор)
	|				ТОГДА ""ОтветственныйКоординатор""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК ИмяРеквизита
	|	ИЗ
	|		Справочник.Пользователи КАК Пользователи
	|	ГДЕ
	|		Пользователи.Ссылка = &ТекущийПользователь) КАК ПодЗапрос
	|ГДЕ
	|	НЕ ПодЗапрос.ИмяРеквизита = """"";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЭтаФорма[Выборка.ИмяРеквизита] = ТекущийПользователь;
	КонецЕсли;
	// } VOG RMV 2019-02-14
	
	РежимОтображенияФормы.Добавить("ТорговаяТочка");
	РежимОтображенияФормы.Добавить("ТорговаяТочкаКлиент");
	РежимОтображенияФормы.Добавить("ТорговаяТочкаКлиентЮрЛицо");
		
	//Если Параметры.РежимОтображенияФормы.Количество() <> 0 Тогда
	//	РежимОтображенияФормы = Параметры.РежимОтображенияФормы;
	//КонецЕсли;
	
	Если Параметры.Свойство("ТорговаяТочкаВид") Тогда
		ТорговаяТочкаВид = Параметры.ТорговаяТочкаВид;
		// ++ VOG Солодов В.В. 26.12.2019 CRM-77
		РежимВыбораКонтактныхЛиц = ТорговаяТочкаВид.РежимВыбораКонтактныхЛиц;
		
		Если РежимВыбораКонтактныхЛиц = Истина Тогда
			ВыборСозданиеКЛ = "Выбрать";
		Иначе
			ВыборСозданиеКЛ = "Создать";
		КонецЕсли;
		// -- VOG Солодов В.В. 26.12.2019
	КонецЕсли;	
	
	ОпеределитьРежимРедактирования(Отказ);
	
	Если Параметры.Свойство("Месторасположение") Тогда
		
		РанокПоКоорданатам = ПолучитьРынокПоКоординатам(Параметры.Месторасположение, Параметры.Широта, Параметры.Долгота);
		
		Если РанокПоКоорданатам = Неопределено Тогда
			
			ТорговаяТочкаВариантАдреса 	= "Адрес";
			УстановитьВариантАдресаТорговойТочки(ЭтаФорма);
			ТорговаяТочка_Адрес = Параметры.Месторасположение;
			//*** Описание
			//*** 16 апреля 2019 г.
			//*** Блашин Евгений Игоревич VOG Начало
			НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Вид",Справочники.ВидыКонтактнойИнформации.Месторасположение));
			
			Если НайденныеСтроки.Количество() Тогда
				ЗаполнитьЗначенияСвойств(НайденныеСтроки[0],Параметры,"Широта,Долгота");
			КонецЕсли; 
			//*** Блашин Евгений Игоревич VOG Окончание 
			
			//ЗаполнитьКИ_Описание(ЭтотОбъект, Элементы.ТорговаяТочка_ВидАдреса.Имя);
		Иначе 
			Параметры.Рынок 					= РанокПоКоорданатам;
			Параметры.МесторасположениеРынка 	= "";
			// { VOG RMV 2019-02-12 task 127
			ТорговаяТочка_Адрес		= Параметры.Месторасположение;
			ТорговаяТочка_ВидАдреса	= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.Месторасположение");
			ЗаполнитьКИ_Описание(ЭтотОбъект, Элементы.ТорговаяТочка_ВидАдреса.Имя);
			// } VOG RMV 2019-02-12 task 127
		КонецЕсли;
		
	КонецЕсли;
	
	// { VOG RMV 2019-03-26 task 158
	//Если Параметры.Свойство("Широта") И Параметры.Свойство("Долгота") Тогда
	//	//ТорговаяТочка_КоординатыGPSТорговойТочки = Формат(Параметры.Широта, "ЧРД=.") + ", " + Формат(Параметры.Долгота, "ЧРД=.");
	//	ТорговаяТочка_Широта	= Параметры.Широта;
	//	ТорговаяТочка_Долгота	= Параметры.Долгота;
	//	НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Вид",Параметры.Месторасположение));
	//КонецЕсли;
	// } VOG RMV 2019-03-26 task 158
	
	Если Параметры.Свойство("Рынок") и ЗначениеЗаполнено(Параметры.Рынок) Тогда
		ТорговаяТочкаВариантАдреса 	= "АдресРынка";
		УстановитьВариантАдресаТорговойТочки(ЭтаФорма);
		ТорговаяТочкаРынок 					= Параметры.Рынок;
		ТорговаяТочкаМестоположениеНаРынке 	= Параметры.МесторасположениеРынка;
	КонецЕсли;

	
	//Начало СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ИнициализироватьРеквизитыФормыКонтрагент(ЭтотОбъект);
	РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется = Истина;
	//Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	вогЗаполнитьВсеТипыОтношенийСервер();
	
	ПолучитьПараметрыБизнесРегиона();
	
	Элементы.КомандаПлитка.Пометка 	= Ложь;
	Элементы.КомандаОбои.Пометка 	= Ложь;
	
	// ++ Тищенко В.В. 27.12.2018
	// Установка по умолчанию направление деятельности
	// из карточки пользователя
	
	НаправлениеДеятельностиПользователя = Пользователи.ТекущийПользователь().CRM_НаправлениеДеятельности;
	
	Если ЗначениеЗаполнено(НаправлениеДеятельностиПользователя) Тогда
		Если НаправлениеДеятельностиПользователя = Справочники.НаправленияДеятельности.Обои Тогда
			Элементы.КомандаОбои.Пометка = Истина;
		Иначе
			Элементы.КомандаПлитка.Пометка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// -- Тищенко В.В. 
	
	НастройкиВидимостиЭлементов();
	ОбновитьПараметрыРынкаТорговаяТочка();
	УстановитьРежимОтображенияФормы(ЭтаФорма);
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
	// Начало Значения по умолчанию
	ДополнительныеПараметрыФормы();
	// Конец Значения по умолчанию
	
	вогЗаполнитьТипыОтношений(ЭтаФорма);
	
	// ++ Тищенко В.В. 29.01.2019
	// Описание адрес для первичной корреспонденции
	
	ВидКИ 				= Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки;
	СтруктураРеквизитов = Новый Структура;
	//СтруктураРеквизитов.Вставить("РедактированиеТолькоВДиалоге"); // VOG Солодов В.В. 02.03.2020 CRM-196 // Закомментировал
	СтруктураРеквизитов.Вставить("ТолькоНациональныйАдрес");
	СтруктураРеквизитов.Вставить("Тип");
	СтруктураРеквизитов.Вставить("Родитель");
	СтруктураРеквизитов.Вставить("ВидРедактирования"); // VOG Солодов В.В. 02.03.2020 CRM-196
	
	РеквизитыВидаКИ 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидКИ, СтруктураРеквизитов);
	
	// ++ VOG Солодов В.В. 02.03.2020 CRM-196
	Элементы.ТорговаяТочка_АдресПервичнойДокументации.РедактированиеТекста = (НЕ РеквизитыВидаКИ.ВидРедактирования = "Диалог");
	// До изменения
	//Элементы.ТорговаяТочка_АдресПервичнойДокументации.РедактированиеТекста = НЕ РеквизитыВидаКИ.РедактированиеТолькоВДиалоге;
	// -- VOG Солодов В.В. 02.03.2020
	
	Строки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита","ТорговаяТочка_АдресПервичнойДокументации"));
	
	Если Строки.Количество() = 0 Тогда
		НовСтр = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		НовСтр.ИмяРеквизита = "ТорговаяТочка_АдресПервичнойДокументации";
	Иначе
		НовСтр = Строки[0];
	КонецЕсли;
	
	НовСтр.ТолькоРоссийский = РеквизитыВидаКИ.ТолькоНациональныйАдрес;
	НовСтр.Вид              = ВидКИ;
	НовСтр.Тип              = РеквизитыВидаКИ.Тип;
	НовСтр.Родитель         = РеквизитыВидаКИ.Родитель;
	НовСтр.ТипНомер         = 1;
	НовСтр.Выводить         = Истина;

	// -- Тищенко В.В. 
	
	// ++ Тищенко В.В. 04.02.2019
	// Вид телефона ТРТ
	ТорговаяТочкаВидТелефона = Справочники.ВидыКонтактнойИнформации.ТелефонТорговойТочки;		
	// -- Тищенко В.В.
	
	// ++ VOG Солодов В.В. 23.08.2019 task 577
	ЗаполнитьПараметрыВыбора();
	// -- VOG Солодов В.В. 23.08.2019
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ТорговаяТочка_ВидАдреса) Тогда
		ТорговаяТочка_ВидАдреса = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.Месторасположение");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТорговаяТочка_Адрес) Тогда
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтаФорма, Элементы.ТорговаяТочка_Адрес);
	КонецЕсли;
	
	ЗаполнитьКИ_Описание(ЭтотОбъект, Элементы.Партнер_ВидАдреса.Имя);
	ЗаполнитьКИ_Описание(ЭтотОбъект, Элементы.ЮрЛицо_ВидАдреса.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Изменение КПП" Тогда
		Если ЭтотОбъект.УникальныйИдентификатор = Источник Тогда 
			КПП = Параметр;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидКИПриИзменении(Элемент)
	
	Если СтрНайти(Элемент.Имя, "Адрес") > 0 Тогда
		ЗаполнитьКИ_Описание(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);	
	
КонецПроцедуры

#Область ЛеваяКолонкаШапки

&НаКлиенте
Процедура ТорговаяТочкаРынокПриИзменении(Элемент)
	ОбновитьПараметрыРынкаТорговаяТочка();	
КонецПроцедуры

// { VOG RMV 2019-02-12 task 127
&НаКлиенте
Процедура ТорговаяТочкаРынокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ?(ЗначениеЗаполнено(ТорговаяТочкаРынок)
						, "Система подобрала Рынок (ТЦ) по указанному вами адресу. Выбирать Рынок (ТЦ) вручную запрещено."
						, "По указанному адресу нет зарегистрированного Рынка (ТЦ). Для регистрации Рынка (ТЦ) обратитесь в тех.поддержку. Выбирать Рынок (ТЦ) вручную запрещено.");
	Сообщение.Поле = "ТорговаяТочкаРынок";
	Сообщение.УстановитьДанные("ТорговаяТочкаРынок");
	Сообщение.Сообщить();
	
КонецПроцедуры
// } VOG RMV 2019-02-12 task 127

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	CRM_УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АдресПриИзменении(Элемент)
	CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

// ++ VOG Солодов В.В. 22.05.2020 CRM-653
&НаКлиенте
Процедура ТорговаяТочкаМестоположениеНаРынкеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТорговаяТочкаМестоположениеНаРынке",
		"ОтметкаНезаполненного",
		(ЗначениеЗаполнено(ТорговаяТочкаРынок) И Не ЗначениеЗаполнено(ТорговаяТочкаМестоположениеНаРынке)));
	
КонецПроцедуры // -- VOG Солодов В.В. 22.05.2020

&НаКлиенте
Процедура КонтактноеЛицоИмяПриИзменении(Элемент)
	КонтактноеЛицоПол = CRM_КлиентыКлиент.ОпределитьПол(КонтактноеЛицоИмя);
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочкаВариантАдресаПриИзменении(Элемент)
	//ТорговаяТочкаРынок 					= ПредопределенноеЗначение("Справочник.вогРынки.ПустаяСсылка");
	//ТорговаяТочкаМестоположениеНаРынке 	= "";
	//ТорговаяТочка_Адрес					= "";
	УстановитьВариантАдресаТорговойТочки(ЭтотОбъект);
	ЗаполнитьКИ_Описание(ЭтотОбъект, Элементы.ТорговаяТочка_ВидАдреса.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочкаКлиентПриИзменении(Элемент)
	ДоступностьРазделКлиенты();
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочкаКлиентОчистка(Элемент, СтандартнаяОбработка)
	ДоступностьРазделКлиенты();
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочка_АдресИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Если ТорговаяТочка_ВидАдреса = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.Месторасположение") Тогда
		СтандартнаяОбработка = Ложь;
		Текст = ""; ТорговаяТочка_Адрес = "";
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Заперещено редактирование в поле формы'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочка_АдресПервичнойДокументацииПриИзменении(Элемент)
		
	// ++ Тищенко В.В. 29.01.2019
	CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	// -- Тищенко В.В. 
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочка_АдресПервичнойДокументацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// ++ Тищенко В.В. 29.01.2019
	CRM_УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	// -- Тищенко В.В. 
	
КонецПроцедуры

// ++ VOG Солодов В.В. 25.12.2019 CRM-77
&НаКлиенте
Процедура ВыборСозданиеКЛПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КонтактноеЛицо",
		"Видимость",
		Не ВыборСозданиеКЛ = "Создать");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаКонтактноеЛицоФИО",
		"Видимость",
		ВыборСозданиеКЛ = "Создать");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаКонтактноеЛицоКонтактнаяИнформация",
		"Видимость",
		ВыборСозданиеКЛ = "Создать");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВыборСозданиеКЛ",
		"Видимость",
		РежимВыбораКонтактныхЛиц = Истина);
		
	// +++ Кулаков П.Л. 25.02.2020
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КонтактноеЛицо",
		"КнопкаСоздания",
		ВыборСозданиеКЛ = "Создать");
	// --- Кулаков П.Л.	
	
	ОчиститьЗначенияРеквизитовКонтактногоЛица();
	
КонецПроцедуры // -- VOG Солодов В.В. 25.12.2019

&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("КонтактноеЛицоНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Справочник.КонтактныеЛицаПартнеров.ФормаВыбора",
		ПараметрыФормыВыбора,
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		ОповещениеОЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтактноеЛицоСсылка = ВыбранноеЗначение;
	ЗаполнитьПоляКЛ();
	
КонецПроцедуры

#КонецОбласти

// ++ VOG Солодов В.В. 25.12.2019 CRM-77
&НаКлиенте
Процедура ОчиститьЗначенияРеквизитовКонтактногоЛица()
	
	Если ВыборСозданиеКЛ = "Выбрать" Тогда
		
		КонтактноеЛицоФамилия 		= "";
		КонтактноеЛицоИмя 			= "";
		КонтактноеЛицоОтчество 		= "";
		КонтактноеЛицоВидТелефона 	= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПустаяСсылка");
		КонтактноеЛицоКодСтраны 	= "";
		КонтактноеЛицоКодГорода 	= "";
		КонтактноеЛицоТелефон 		= "";
		КонтактноеЛицоДобНомер 		= "";
		КонтактноеЛицоВидEmail 		= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПустаяСсылка");
		КонтактноеЛицоEmail 		= "";
		
	Иначе
		
		КонтактноеЛицоСсылка 		= ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
		
	КонецЕсли;
	
	КонтактноеЛицоДолжность 	= ПредопределенноеЗначение("Справочник.CRM_Должности.ПустаяСсылка");
	КонтактноеЛицоРоль 			= ПредопределенноеЗначение("Справочник.РолиКонтактныхЛицПартнеров.ПустаяСсылка");
	КонтактноеЛицоСобственник 	= Ложь;
	
КонецПроцедуры // -- VOG Солодов В.В. 25.12.2019

#Область ПраваяКолонкаШапки

&НаКлиенте
Процедура ПартнерНаименованиеПриИзменении(Элемент)
	СформироватьНаименования();
	ДоступностьРазделЮрЛица();
КонецПроцедуры

&НаКлиенте
Процедура CRM_ТипыОтношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеВыбора		= Новый ОписаниеОповещения("CRM_ОбработкаВыбораТиповОтношений", ЭтотОбъект, ДополнительныеПараметры);
	CRM_ВсеТипыОтношений.ПоказатьОтметкуЭлементов(ОповещениеВыбора, НСтр("ru='Отметьте типы отношений с клиентом'"));
КонецПроцедуры 

&НаКлиенте
Процедура ПартнерБизнесРегионПриИзменении(Элемент)
	ЗаполнитьКодыБизнесРегиона();
КонецПроцедуры

&НаКлиенте
Процедура ЮрЛицоОрганизационноПравоваяФормаПриИзменении(Элемент)

	СформироватьНаименования();
	ЗаполнитьДанныеПравовойФормы();
	УстановитьВидимостьДоступность(ЭтотОбъект);
	УстановитьВидимостьДополнительнаяИнформацияЮриЛица();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(CRM_ИНН) Тогда
		// Если КПП формируется стандартным образом по ИНН, то для КПП берутся 
		// первые 4 цифры ИНН + 01001, например:
		// ИНН 7712563009
		// КПП 771201001
		ЭтоЮрЛицо = РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо;
		Если РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(CRM_ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
			CRM_КПП = ?(ЭтоЮрЛицо,Лев(CRM_ИНН, 4) + "01001","");
		Иначе	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "CRM_ИНН");
			CRM_КПП = "";
		КонецЕсли;
	Иначе
		CRM_КПП = "";
	КонецЕсли;
	
	// Начало СтандартныеПодсистемы.РаботаСКонтрагентами
	ОтключитьЗаполнениеПоИНН = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьЗаполнениеПоИНН", 0.1, Истина);
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьНаДубли(Команда)
	
	// ++ Харченко Д.И. №  - 10.09.2018 / Добавил проверку заполнения формы перед поиском дублей
	// незачем проверять на дубли частично заполненную форму, если при создании будет проверка полная проверка
	Если ПроверитьЗаполненнияПолей() Тогда
		
		ПроверкаПередзаписью = Ложь;
		
		НайтиДубли(ПроверкаПередзаписью,Истина);
		
	КонецЕсли;
	// -- Харченко Д.И. №  - 10.09.2018
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(CRM_ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.CRM_ИНН;
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПартнерНаименование) 
	  ИЛИ ЗначениеЗаполнено(ЮрЛицоНаименованиеПолное) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Перезаполнить текущие реквизиты?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимВвода(Команда)
	
	Оповещение 		= Новый ОписаниеОповещения("ВыборРежимаОтображенияЗавершение",ЭтотОбъект,Неопределено);
	ПараметрыФормы 	= Новый Структура("Форма3В1",Истина); 
	ОткрытьФорму("Справочник.вогТорговыеТочки.Форма.вогРежимВвода",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлементы(Команда)
	
	Если ПроверитьЗаполненнияПолей() Тогда
		ПроверкаПередЗаписью = Ложь;
		
		НайтиДубли(ПроверкаПередЗаписью);
		
		// { VOG RMV 2019-02-15
		// Немного костыльная проверка контактного лица
		// Суть: если контактное лицо начали заполнять, то обязательно должны быть заполнены ФИО, Должность и Роль
		// И это всё независимо от настроек по Видам ТТ
		//ОбязательныеРеквизиты = Новый Структура("КонтактноеЛицоФамилия, КонтактноеЛицоИмя, КонтактноеЛицоДолжность , КонтактноеЛицоТелефон");
		// ++ VOG Солодов В.В. 13.01.2020 CRM-77
		ОбязательныеРеквизиты = Новый Структура("КонтактноеЛицоФамилия, КонтактноеЛицоИмя");
		
		Если ВыборСозданиеКЛ = "Создать" Тогда
			ОбязательныеРеквизиты.Вставить("КонтактноеЛицоДолжность");
		КонецЕсли;
		// До изменения
		//ОбязательныеРеквизиты = Новый Структура("КонтактноеЛицоФамилия, КонтактноеЛицоИмя, КонтактноеЛицоДолжность");
		// -- VOG Солодов В.В. 13.01.2020
		
		ЗаполнитьЗначенияСвойств(ОбязательныеРеквизиты, ЭтаФорма);
		ЗаполненоЛюбоеПоле = Ложь;
		Для каждого ПараметрыРеквизита Из ОбязательныеРеквизиты Цикл
			ЗаполненоЛюбоеПоле = ЗаполненоЛюбоеПоле ИЛИ ЗначениеЗаполнено(ЭтаФорма[ПараметрыРеквизита.Ключ]);
			Если ЗаполненоЛюбоеПоле Тогда
				Прервать;		
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполненоЛюбоеПоле Тогда
			// значит должны быть заполнены все
			ВсёХорошо = Истина;
			Для каждого ПараметрыРеквизита Из ОбязательныеРеквизиты Цикл
				Если НЕ ЗначениеЗаполнено(ЭтаФорма[ПараметрыРеквизита.Ключ]) Тогда					
					ВсёХорошо = Ложь;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Не заполнен реквизит " + СтрЗаменить(ПараметрыРеквизита.Ключ, "КонтактноеЛицо", "");
					Сообщение.Поле = ПараметрыРеквизита.Ключ;
					Сообщение.УстановитьДанные(ПараметрыРеквизита.Ключ);
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЦикла;
			Если ВсёХорошо = Ложь Тогда
				Возврат			
			КонецЕсли;
		КонецЕсли;
		// } VOG RMV 2019-02-15		
		
		Если ПроверкаПередЗаписью Тогда
			
			Закрывать = Ложь;
			
			// Создание анкеты вместо объектов
			
			Если вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТорговаяТочкаВид,"СоздаватьАнкетуВместоОбъектов",Истина) Тогда
				Закрывать = Истина;
				СоздатьАнкетуКлиент(вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТорговаяТочкаВид,"ВариантОпроса",Истина));
			Иначе	
				СоздатьЭлементыСервер(Закрывать);
			КонецЕсли;
						
			Если СозданныеОбъекты.Количество() > 0 Тогда
				
				Оповещение = Новый ОписаниеОповещения("ПоказатьВопросОбъектыЗавершение",ЭтотОбъект,Неопределено);
				ПоказатьВопрос(Оповещение,НСтр("ru = 'Открыть карточку объекта'"),РежимДиалогаВопрос.ДаНет,,,НСтр("ru = 'Открыть карточку'"));
				
			Иначе 
				
				Если Закрывать Тогда
					Закрыть();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЭлементы(Команда)
	
	Если СозданныеОбъекты.Количество() <> 0 Тогда
		Оповещение		 = Новый ОписаниеОповещения("ПоказатьВыборЭлементовЗавершение",ЭтотОбъект,Неопределено);
		СозданныеОбъекты.ПоказатьВыборЭлемента(Оповещение,Нстр("ru = 'Выберите элемент'"));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет созданных объектов'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПлитка(Команда)
	Элементы.КомандаПлитка.Пометка = НЕ Элементы.КомандаПлитка.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбои(Команда)
	Элементы.КомандаОбои.Пометка = НЕ Элементы.КомандаОбои.Пометка;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СворачиваемыГруппы

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	ИмяГруппыСвернутьРазвернуть = Элемент.Имя;
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияОткрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияЗакрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ЗаголовокГруппы", "");
	ИзменитьСвернутостьГруппы(ИмяГруппыСвернутьРазвернуть);
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы",0.0001,Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть = Неопределено)
	Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость, Не Свернуть);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Свернуть);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Не Свернуть);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	Если Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяГруппыСвернутьРазвернуть];
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область НастройкаФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимОтображенияФормы(Форма)

	Элементы 		= Форма.Элементы;
	ВыбраныйРежим 	= "";
	
	// Режим отображения формы
	Для каждого Стр Из Форма.РежимОтображенияФормы Цикл
		Если Стр.Пометка ТОгда
			ВыбраныйРежим = Стр.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбраныйРежим = "ТорговаяТочка" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаКолонкаПраво"			,"Видимость"	,Ложь);
	ИначеЕсли ВыбраныйРежим = "ТорговаяТочкаКлиент" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаКолонкаПраво"			,"Видимость"	,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаЗаголовокЮрЛицо"		,"Видимость"	,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СворачиваемаяГруппаЮрЛицо"	,"Видимость"	,Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаКолонкаПраво"			,"Видимость"	,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаЗаголовокЮрЛицо"		,"Видимость"	,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СворачиваемаяГруппаЮрЛицо"	,"Видимость"	,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СворачиваемаяГруппаЮрЛицо"	,"Доступность"	,Ложь);
	КонецЕсли;

	Форма.ТекущийРежимОтображения = ВыбраныйРежим;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма) 
	
	Элементы 		= Форма.Элементы;
	
	//Партнер
	//Элементы.ПартнерТелефонПоляВвода.Доступность = ЗначениеЗаполнено(Форма.ПартнерВидТелефона);
	//Элементы.ПартнерEmail.Доступность 			 = ЗначениеЗаполнено(Форма.ПартнерВидEmail);
	//Элементы.Партнер_Адрес.Доступность			 = ЗначениеЗаполнено(Форма.Партнер_ВидАдреса);
		
	Элементы.ПартнерТелефонПоляВвода.Доступность = Истина;
	Элементы.ПартнерEmail.Доступность 			 = Истина;
	Элементы.Партнер_Адрес.Доступность			 = Истина;
	
	//КонтактноеЛицо
	//Элементы.КонтактноеЛицоТелефонПоляВвода.Доступность = ЗначениеЗаполнено(Форма.КонтактноеЛицоВидТелефона);
	//Элементы.КонтактноеЛицоEmail.Доступность 			= ЗначениеЗаполнено(Форма.КонтактноеЛицоВидEmail);
	
	Элементы.КонтактноеЛицоТелефонПоляВвода.Доступность = Истина;
	Элементы.КонтактноеЛицоEmail.Доступность 			= Истина;
	
	//ЮрЛицо
	//Элементы.ГруппаИНН.Доступность    = ЗначениеЗаполнено(Форма.ЮрФизЛицо);
	//Элементы.ЮрЛицо_Адрес.Доступность = ЗначениеЗаполнено(Форма.ЮрЛицо_ВидАдреса);
	
	Элементы.ГруппаИНН.Доступность    = Истина;
	Элементы.ЮрЛицо_Адрес.Доступность = Истина;
	
	//ТорговаяТочка
	//ЭлементТипОтношений = Форма.CRM_ВсеТипыОтношений.НайтиПоЗначению(ПредопределенноеЗначение("Справочник.CRM_ТипыОтношений.Клиент"));
	//Форма.Элементы.СворачиваемаяГруппаТорговаяТочка.Доступность = ЭлементТипОтношений.Пометка;
	
	//Элементы.ТорговаяТочкаТелефонПоляВвода.Доступность = ЗначениеЗаполнено(Форма.ТорговаяТочкаВидТелефона);
	//Элементы.ТорговаяТочка_Адрес.Доступность 		   = ЗначениеЗаполнено(Форма.ТорговаяТочка_ВидАдреса);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДополнительнаяИнформацияЮриЛица()

	Если ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаИП","Видимость",Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаИП","Видимость",Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВариантАдресаТорговойТочки(Форма)
	
	Форма.Элементы.СтраницыТорговаяТочкаАдрес.ТекущаяСтраница = Форма.Элементы["СтраницаТорговаяТочка" + Форма.ТорговаяТочкаВариантАдреса];
	Форма.Элементы.ТорговаяТочкаАдресРынка.Видимость 	      = Форма.ТорговаяТочкаВариантАдреса = "АдресРынка";
	
	Если Форма.ТорговаяТочкаВариантАдреса = "Адрес" Тогда
		Если НЕ ЗначениеЗаполнено(Форма.ТорговаяТочка_ВидАдреса) Тогда
			Форма.ТорговаяТочка_ВидАдреса = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.Месторасположение");
		КонецЕсли;
		ЗаполнитьКИ_Описание(Форма, "ТорговаяТочка_ВидАдреса");
		УстановитьВидимостьДоступность(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьРазделКлиенты()

	Если ТекущийРежимОтображения <> "ТорговаяТочка" И ЗначениеЗаполнено(ТорговаяТочкаКлиент) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СворачиваемаяГруппаПортретКлиента","Доступность",Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СворачиваемаяГруппаЮрЛицо","Доступность",Ложь);
	ИначеЕсли ТекущийРежимОтображения <> "ТорговаяТочка" И НЕ ЗначениеЗаполнено(ТорговаяТочкаКлиент) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СворачиваемаяГруппаПортретКлиента","Доступность",Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьРазделЮрЛица()

	Если ТекущийРежимОтображения = "ТорговаяТочкаКлиентЮрЛицо" И ЗначениеЗаполнено(ПартнерНаименование) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СворачиваемаяГруппаЮрЛицо","Доступность",Истина);
	ИначеЕсли ТекущийРежимОтображения = "ТорговаяТочкаКлиентЮрЛицо" И НЕ ЗначениеЗаполнено(ПартнерНаименование) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СворачиваемаяГруппаЮрЛицо","Доступность",Ложь);
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииОбщие

&НаСервере
Процедура ОбновитьПараметрыРынкаТорговаяТочка()
	
	Если ЗначениеЗаполнено(ТорговаяТочкаРынок) Тогда
		ТорговаяТочкаАдресРынка = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТорговаяТочкаРынок, Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	Иначе
		ТорговаяТочкаАдресРынка = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьКИ_Описание(Форма, ИмяЭлемента)
	
	Элементы = Форма.Элементы;
	
	МассивИмени = СтрРазделить(ИмяЭлемента, "_");
	Префикс = МассивИмени[0];
	
	ВидАдреса = Форма[Префикс + "_ВидАдреса"];
	Адрес     = Форма[Префикс + "_Адрес"];
	
	Если ЗначениеЗаполнено(ВидАдреса) Тогда
		СтруктураРеквизитов = Новый Структура;
		//СтруктураРеквизитов.Вставить("РедактированиеТолькоВДиалоге"); // VOG Солодов В.В. 02.03.2020 CRM-196 // Закомментировал
		СтруктураРеквизитов.Вставить("ТолькоНациональныйАдрес");
		СтруктураРеквизитов.Вставить("Тип");
		СтруктураРеквизитов.Вставить("Родитель");
		СтруктураРеквизитов.Вставить("ВидРедактирования"); // VOG Солодов В.В. 02.03.2020 CRM-196
		
		#Если Сервер Тогда
			РеквизитыВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидАдреса, СтруктураРеквизитов);
		#Иначе
			РеквизитыВидаКИ = вогОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(ВидАдреса, СтруктураРеквизитов);
		#КонецЕсли
		
		// ++ VOG Солодов В.В. 02.03.2020 CRM-196
		Элементы[Префикс + "_Адрес"].РедактированиеТекста = (НЕ РеквизитыВидаКИ.ВидРедактирования = "Диалог");
		// До изменения
		//Элементы[Префикс + "_Адрес"].РедактированиеТекста = НЕ РеквизитыВидаКИ.РедактированиеТолькоВДиалоге;
		// -- VOG Солодов В.В. 02.03.2020
		
		Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", Префикс + "_Адрес"));
		
		Если Строки.Количество() = 0 Тогда
			НовСтр = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
			НовСтр.ИмяРеквизита = Префикс + "_Адрес";
		Иначе
			НовСтр = Строки[0];
		КонецЕсли;
		
		НовСтр.ТолькоРоссийский = РеквизитыВидаКИ.ТолькоНациональныйАдрес;
		НовСтр.Вид              = ВидАдреса;
		НовСтр.Тип              = РеквизитыВидаКИ.Тип;
		НовСтр.Родитель         = РеквизитыВидаКИ.Родитель;
		НовСтр.ТипНомер         = 1;
		НовСтр.Выводить         = Истина;

	
	Иначе
		// Не совсем понял зачем очищать все, если ранее было заполнено то пропадает
		// видимо существовало когда всего один вид КИ был на форме
		//Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименования()

	Если ЗначениеЗаполнено(ЮрЛицоОрганизационноПравоваяФорма)
		И Не ЗначениеЗаполнено(ЮрЛицоНаименованиеПолное)
		И ЗначениеЗаполнено(ПартнерНаименование) Тогда
		ЮрЛицоНаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 ""%2""'"), 
		СокрЛП(ЮрЛицоОрганизационноПравоваяФорма), СокрЛП(ПартнерНаименование));
		ЮрЛицоНаименование = ЮрЛицоНаименованиеПолное;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПартнерНаименование)
		И Не ЗначениеЗаполнено(ТорговаяТочкаНаименованиеПолное) Тогда
		ТорговаяТочкаНаименованиеПолное = ПартнерНаименование;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКодыБизнесРегиона()
	
	Если ЗначениеЗаполнено(ПартнерБизнесРегион) Тогда
		ПолучитьПараметрыБизнесРегиона();
		
		МассивВладельцев = Новый Массив;
		МассивВладельцев.Добавить("Партнер");
		МассивВладельцев.Добавить("КонтактноеЛицо");
		МассивВладельцев.Добавить("ТорговаяТочка");
		
		Для каждого ИмяВладелец Из МассивВладельцев Цикл
			Если ЗначениеЗаполнено(ЭтотОбъект[ИмяВладелец + "ВидТелефона"]) 
			  И ПустаяСтрока(ЭтотОбъект[ИмяВладелец + "Телефон"]) Тогда
				ЭтотОбъект[ИмяВладелец + "КодСтраны"] = ПараметрыБизнесРегиона.CRM_КодСтраны;
				ЭтотОбъект[ИмяВладелец + "КодГорода"] = ПараметрыБизнесРегиона.CRM_КодГорода;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДанныеПравовойФормы()

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЮрФизЛицо");
	
	РеквизитыОрганизационноПравоваяФорма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЮрЛицоОрганизационноПравоваяФорма, СтруктураРеквизитов);
	Если РеквизитыОрганизационноПравоваяФорма.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
		ИЛИ РеквизитыОрганизационноПравоваяФорма.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо = Ложь;
	Иначе	
		ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьПараметрыБизнесРегиона()
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("CRM_КодСтраны");
	СтруктураРеквизитов.Вставить("CRM_КодГорода");
	
	ПараметрыБизнесРегиона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПартнерБизнесРегион, СтруктураРеквизитов);
	
КонецПроцедуры 

&НаСервере
Процедура СообщитьПользователюОбОшибке(НеЗаполненныеРеквизиты,Раздел)
	
	Для каждого Реквизит Из НеЗаполненныеРеквизиты Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен реквизит " + Реквизит +".";
		Сообщение.Поле 	= Раздел + Реквизит;
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьДанныеДляЗаполненияАнкеты(Сериализация = Ложь)
	
	СтруктураДанных = ПолучитьПоляЗаписи();
	НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Вид",Справочники.ВидыКонтактнойИнформации.Месторасположение));
	СтруктураДанных.Вставить("Широта");
	СтруктураДанных.Вставить("Долгота");
	// +++ VOG Кулаков П.Л. 09.12.2020 CRM-1009
	СтруктураДанных.Вставить("Месторасположение");
	// --- VOG Кулаков П.Л.

	Если НайденныеСтроки.Количество() <> 0 Тогда
		Месторасположение 		= НайденныеСтроки[0];
		СтруктураДанных.Широта 	= Месторасположение.Широта;
		СтруктураДанных.Долгота = Месторасположение.Долгота;
		// +++ VOG Кулаков П.Л. 09.12.2020 CRM-1009
		СтруктураДанных.Месторасположение = Месторасположение.Представление;
		// --- VOG Кулаков П.Л.
	КонецЕсли;
	
	СтруктураДанных.Вставить("ОтветственныйМенеджер"	,ОтветственныйМенеджер);
	СтруктураДанных.Вставить("ОтветственныйКоординатор"	,ОтветственныйКоординатор);
	Если НЕ Сериализация Тогда
		Возврат ПоместитьВоВременноеХранилище(СтруктураДанных,УникальныйИдентификатор);
	Иначе
		Возврат ЗначениеВСтрокуВнутр(СтруктураДанных);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Оповещения

&НаКлиенте
Процедура CRM_ОбработкаВыбораТиповОтношений(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	вогЗаполнитьТипыОтношений(ЭтаФорма);
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРежимаОтображенияЗавершение(РезультатВыбора,ДополнительныеПараметры) Экспорт

	Если РезультатВыбора <> Неопределено Тогда
		
		ТорговаяТочкаВид 		= РезультатВыбора.ПараметрыФормыВвода3в1.ТорговаяТочкаВид;
		// ++ VOG Солодов В.В. 26.12.2019 CRM-77
		РежимВыбораКонтактныхЛиц = ТорговаяТочкаВид.РежимВыбораКонтактныхЛиц;
		
		Если РежимВыбораКонтактныхЛиц = Истина Тогда
			ВыборСозданиеКЛ = "Выбрать";
		Иначе
			ВыборСозданиеКЛ = "Создать";
		КонецЕсли;
		
		ОчиститьЗначенияРеквизитовКонтактногоЛица();
		// -- VOG Солодов В.В. 26.12.2019
		РежимОтображенияФормы 	= РезультатВыбора.ПараметрыФормыВвода3в1.РежимОтображенияФормы;
		Если НЕ вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТорговаяТочкаВид,"ИспользоватьНастройкиДляФормы3в1",Истина) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ТорговаяТочкаВывеска","Видимость",ТорговаяТочкаВид = ПредопределенноеЗначение("Справочник.вогВидыТорговыхТочек.ТорговаяТочка"));
		КонецЕсли;
		
		ОпеределитьРежимРедактирования(Ложь);
		НастройкиВидимостиЭлементов();
		УстановитьРежимОтображенияФормы(ЭтаФорма);
		ДополнительныеПараметрыФормы();
		// ++ VOG Солодов В.В. 26.08.2019 task 577
		ЗаполнитьПараметрыВыбора();
		// -- VOG Солодов В.В. 26.08.2019
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОбъектыЗавершение(РезультатОтвета,ДполнительныеПараметры) Экспорт

	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		
		Оповещение		 = Новый ОписаниеОповещения("ПоказатьВыборЭлементовЗавершение",ЭтотОбъект,Неопределено);
		
		Если СозданныеОбъекты.Количество() > 1 Тогда
			СозданныеОбъекты.ПоказатьВыборЭлемента(Оповещение,Нстр("ru = 'Выберите элемент'"));
		ИначеЕсли СозданныеОбъекты.Количество() = 1 Тогда 
			ВыполнитьОбработкуОповещения(Оповещение, СозданныеОбъекты.Получить(0));
		КонецЕсли;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборЭлементовЗавершение(РезультатВыбора,ДополнительныеПарамтеры) Экспорт

	Если РезультатВыбора <> Неопределено Тогда
		ПоказатьЗначение(Неопределено,РезультатВыбора.Значение);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаНаДубли

&НаКлиенте
Процедура СоздатьАнкетуДубля()
	// ++ Харченко Д.И. №  - 10.09.2018 / 
	АдресДанныхДляЗаполнения 	= ПодготовитьДанныеДляЗаполненияАнкеты(Истина);
	
	ПараметрыОткрытияАнкеты 	= Новый Структура;
	
	ДанныеЗаполненияАнкеты 		= Новый Структура;
	ДанныеЗаполненияАнкеты.Вставить("ВариантОпроса", ПредопределенноеЗначение("ПланВидовХарактеристик.вогВариантыОпросов.АнкетированиеДубля"));
	
	ПараметрыОткрытияАнкеты.Вставить("ЗначенияЗаполнения"		, ДанныеЗаполненияАнкеты);
	ПараметрыОткрытияАнкеты.Вставить("АдресДанныхДляЗаполнения"	, АдресДанныхДляЗаполнения);
	
	ОткрытьФорму("Документ.вогАнкета.Форма.ФормаДокумента", ПараметрыОткрытияАнкеты, ЭтаФорма);

КонецПроцедуры
// -- Харченко Д.И. №  - 10.09.2018

&НаКлиенте
Процедура НайтиДубли(ПроверкаПередзаписью = Ложь,ИнформацияДляПользователя = Ложь)
	
	МассивОписанийОбъектов = Новый Массив;
	
	НайденныеДубли.Очистить();
	
#Область ТорговыеТочки

    // Новый Алгоритм

	ОбъектПоиска 	= Новый Структура;
	ОбъектПоиска.Вставить("Ссылка" , ПредопределенноеЗначение("Справочник.вогТорговыеТочки.ПустаяСсылка"));
	ДополнительныеПараметры = Новый Структура; 
	ДополнительныеПараметры.Вставить("Адрес",вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТорговаяТочкаВид,"ВидАдресаТорговойТочки",Истина));
	СписокКонтактов = Новый Структура; 
	//СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
	СтруктураПоиска = Новый Структура;
	
	ФормированиеПолейПоискаТорговаяТочка(ОбъектПоиска,СписокКонтактов,СтруктураПоиска);
	
		// ++ Харченко Д.И. №  - 13.09.2018 / 
		
	МассивНайденныхДублейТТ = Новый Массив;
	
	Если ОбъектПоиска.Количество() <> 0 Тогда
		Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов,, МассивНайденныхДублейТТ,ДополнительныеПараметры) Тогда 
			МассивОписанийОбъектов.Добавить(Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта",
			ОбъектПоиска, "Справочник.вогТорговыеТочки", СтруктураПоиска, СписокКонтактов));
			Для Каждого стр из МассивНайденныхДублейТТ Цикл 
				НоваяСтрока 		= НайденныеДубли.Добавить();
				НоваяСтрока.Ссылка 	= Стр.Ссылка;
				НоваяСтрока.Тип 	= "ТорговаяТочка";
			КонецЦикла;
			// -- Харченко Д.И. №  - 13.09.2018
		КонецЕсли;
	КонецЕсли;

	
	//Торговые точки Старый алгоритм
	//ОбъектПоиска = Новый Структура;
	//ОбъектПоиска.Вставить("Ссылка"				 , ПредопределенноеЗначение("Справочник.вогТорговыеТочки.ПустаяСсылка"));
	//ОбъектПоиска.Вставить("Рынок"				 , ТорговаяТочкаРынок);
	//ОбъектПоиска.Вставить("МестоположениеНаРынке", ТорговаяТочкаМестоположениеНаРынке);
	//СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
	//СписокКонтактов = Новый Структура("Адрес", ТорговаяТочка_Адрес);
	//
	//// ++ Харченко Д.И. №  - 13.09.2018 / 
	//	
	//МассивНайденныхДублейТТ = Новый Массив;
	//
	//Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов,, МассивНайденныхДублейТТ) Тогда 
	//	МассивОписанийОбъектов.Добавить(Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта",
	//													ОбъектПоиска, "Справочник.вогТорговыеТочки", СтруктураПоиска, СписокКонтактов));
	//	Для Каждого стр из МассивНайденныхДублейТТ Цикл 
	//		НоваяСтрока 		= НайденныеДубли.Добавить();
	//		НоваяСтрока.Ссылка 	= Стр.Ссылка;
	//		НоваяСтрока.Тип 	= "ТорговаяТочка";
	//	КонецЦикла;
	//// -- Харченко Д.И. №  - 13.09.2018
	//КонецЕсли;
	//
	////Рынки ТЦ
	//Если ТорговаяТочкаВариантАдреса = "Адрес" Тогда
	//	ОбъектПоиска = Новый Структура;
	//	ОбъектПоиска.Вставить("Ссылка"	, ПредопределенноеЗначение("Справочник.вогРынки.ПустаяСсылка"));
	//	ОбъектПоиска.Вставить("Адрес"	, ТорговаяТочка_Адрес);
	//	
	//	СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
	//	СписокКонтактов = Новый Структура("Адрес", ТорговаяТочка_Адрес);
	//	
	//	Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов) Тогда 
	//		МассивОписанийОбъектов.Добавить(Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта"
	//		, ОбъектПоиска, "Справочник.вогРынки", СтруктураПоиска, СписокКонтактов));
	//		
	//	КонецЕсли;
	//КонецЕсли;
	
#КонецОбласти

#Область КонтактныеЛица

	// Новый алгоритм
	ОбъектПоиска 			= Новый Структура;
	ОбъектПоиска.Вставить("Ссылка" , ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка"));
	СтруктураПоиска 		= вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
	СписокКонтактов 		= Новый Структура;
	ПредставлениеТелефонКЛ 	= "";
	
	ФормированиеПолейПоискаКонтактныеЛица(ОбъектПоиска,СписокКонтактов,СтруктураПоиска,ПредставлениеТелефонКЛ);
	
	МассивКонтактныеЛица = Новый Массив;
	Если ОбъектПоиска.Количество() <> 0 Тогда 
		Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов, ,МассивКонтактныеЛица) Тогда
			
			Если ЗначениеЗаполнено(ПредставлениеТелефонКЛ) И МассивКонтактныеЛица.Количество() > 1 Тогда
				МассивОписанийОбъектов.Добавить(
				Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта",
				ОбъектПоиска, "Справочник.КонтактныеЛицаПартнеров", СтруктураПоиска, СписокКонтактов));
			ИначеЕсли НЕ ЗначениеЗаполнено(ПредставлениеТелефонКЛ) Тогда
				МассивОписанийОбъектов.Добавить(
				Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта",
				ОбъектПоиска, "Справочник.КонтактныеЛицаПартнеров", СтруктураПоиска, СписокКонтактов));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Начало Контактные лица Старый алгоритм 
		
	//КодСтраныСтрока = "";
	//Если НЕ ПустаяСтрока(КонтактноеЛицоКодСтраны) И (Найти(КонтактноеЛицоКодСтраны, "+") = 0) Тогда
	//	КодСтраныСтрока = "+" + КонтактноеЛицоКодСтраны;
	//Иначе
	//	КодСтраныСтрока = КонтактноеЛицоКодСтраны;
	//КонецЕсли;	
	//
	//Представление = СокрЛП(КодСтраныСтрока);
	//Если Не ПустаяСтрока(КонтактноеЛицоКодГорода) Тогда
	//	Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КонтактноеЛицоКодГорода) + ")";
	//КонецЕсли;
	//
	//Если Не ПустаяСтрока(КонтактноеЛицоТелефон) Тогда
	//	Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(КонтактноеЛицоТелефон);
	//КонецЕсли;
	//
	//Если Не ПустаяСтрока(КонтактноеЛицоДобНомер) Тогда
	//	Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(КонтактноеЛицоДобНомер);
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(КонтактноеЛицоФамилия) ИЛИ ЗначениеЗаполнено(КонтактноеЛицоИмя) ИЛИ ЗначениеЗаполнено(КонтактноеЛицоОтчество) Тогда
	//	
	//	ОбъектПоиска = Новый Структура;
	//	ОбъектПоиска.Вставить("Ссылка" , ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка"));
	//	ОбъектПоиска.Вставить("CRM_Фамилия", КонтактноеЛицоФамилия);
	//	ОбъектПоиска.Вставить("CRM_Имя", КонтактноеЛицоИмя);
	//	ОбъектПоиска.Вставить("CRM_Отчество", КонтактноеЛицоОтчество);
	//	
	//	СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
	//	
	//	Если ЗначениеЗаполнено(Представление) Тогда
	//		ОбъектПоиска.Вставить("Телефон",Представление);
	//		СтруктураПоиска.Вставить("Контакт_Телефон", "ПОДОБНО");
	//		//СтруктураПоиска.СоставноеУсловие.Добавить(Новый Структура("Контакт_Телефон", "ПОДОБНО"));
	//	КонецЕсли;
	//	
	//	СписокКонтактов = Новый Структура("Телефон", Представление);
	//	
	//	МассивКонтактныеЛица = Новый Массив;
	//	
	//	Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов, ,МассивКонтактныеЛица) Тогда
	//		
	//		Если ЗначениеЗаполнено(Представление) И МассивКонтактныеЛица.Количество() > 1 Тогда
	//			МассивОписанийОбъектов.Добавить(
	//			Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта",
	//			ОбъектПоиска, "Справочник.КонтактныеЛицаПартнеров", СтруктураПоиска, СписокКонтактов));
	//		ИначеЕсли НЕ ЗначениеЗаполнено(Представление) Тогда
	//			МассивОписанийОбъектов.Добавить(
	//			Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта",
	//			ОбъектПоиска, "Справочник.КонтактныеЛицаПартнеров", СтруктураПоиска, СписокКонтактов));
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//ИначеЕсли ЗначениеЗаполнено(Представление) Тогда
	//	
	//	ОбъектПоиска 	= Новый Структура;
	//	СтруктураПоиска = Новый Структура;
	//	
	//	ОбъектПоиска.Вставить("Ссылка" , ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка"));
	//	ОбъектПоиска.Вставить("Телефон",Представление);
	//	СтруктураПоиска.Вставить("Контакт_Телефон", "ПОДОБНО");
	//	
	//	СписокКонтактов = Новый Структура("Телефон", Представление);
	//	
	//	Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов) Тогда 
	//		МассивОписанийОбъектов.Добавить(
	//		Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта",
	//		ОбъектПоиска, "Справочник.КонтактныеЛицаПартнеров", СтруктураПоиска, СписокКонтактов));
	//	КонецЕсли;
	//КонецЕсли;
		
	//Конец Контактные лица 
	
#КонецОбласти	

#Область Партнеры

	ОбъектПоиска 	= Новый Структура;
	ОбъектПоиска.Вставить("Ссылка" , ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
	СписокКонтактов = Новый Структура;
	
	ФормированиеПолейПоискаПартнеры(ОбъектПоиска,СписокКонтактов,СтруктураПоиска);
	
	Если ОбъектПоиска.Количество() > 1 Тогда
		Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов) Тогда 
			МассивОписанийОбъектов.Добавить(
			Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта",
			ОбъектПоиска, "Справочник.Партнеры", СтруктураПоиска, СписокКонтактов));
		КонецЕсли;
	КонецЕсли;
		
	// Партнеры Старый алгоритм
	//Если ТекущийРежимОтображения <> "ТорговаяТочка" Тогда
	//	ОбъектПоиска = Новый Структура;
	//	ОбъектПоиска.Вставить("Ссылка"				 , ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	//	ОбъектПоиска.Вставить("Наименование"		 , ПартнерНаименование);
	//	СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
	//	СписокКонтактов = Новый Структура("Адрес", Партнер_Адрес);
	//	Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов) Тогда 
	//		МассивОписанийОбъектов.Добавить(
	//		Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта", 
	//		ОбъектПоиска, "Справочник.вогТорговыеТочки", СтруктураПоиска, СписокКонтактов));
	//	КонецЕсли;
	//КонецЕсли;
	
#КонецОбласти	

#Область ЮридическиеЛица

	ОбъектПоиска 			= Новый Структура;
	ОбъектПоиска.Вставить("Ссылка" , ПредопределенноеЗначение("Справочник.вогЮридическиеЛица.ПустаяСсылка"));
	СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
	СписокКонтактов = Новый Структура;
	
	ФормированиеПолейПоискаЮридическиеЛица(ОбъектПоиска,СписокКонтактов,СтруктураПоиска);
	
	Если ОбъектПоиска.Количество() <> 0 Тогда
		Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов) Тогда 
			МассивОписанийОбъектов.Добавить(
			Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта", 
			ОбъектПоиска, "Справочник.вогЮридическиеЛица", СтруктураПоиска, СписокКонтактов));
		КонецЕсли;
	КонецЕсли;
	
	// Юридическое лицо Старый алгоритм
	//Если ТекущийРежимОтображения = "ТорговаяТочкаКлиентЮрЛицо" Тогда
	//	ОбъектПоиска = Новый Структура;
	//	ОбъектПоиска.Вставить("Ссылка" , ПредопределенноеЗначение("Справочник.вогЮридическиеЛица.ПустаяСсылка"));
	//	ОбъектПоиска.Вставить("CRM_ИНН", CRM_ИНН);
	//	СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
	//	СписокКонтактов = Новый Структура;
	//	Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов) Тогда 
	//		МассивОписанийОбъектов.Добавить(
	//		Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта", 
	//		ОбъектПоиска, "Справочник.вогЮридическиеЛица", СтруктураПоиска, СписокКонтактов));
	//	КонецЕсли;
	//КонецЕсли;
	
#КонецОбласти

	Если МассивОписанийОбъектов.Количество() <> 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивОписанийОбъектов", МассивОписанийОбъектов);
		ПараметрыФормы.Вставить("ИзменитьАдрес"			, вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТорговаяТочкаВид,"ИспользоватьГеокодирование",Истина));
		ПараметрыФормы.Вставить("ВидТорговойТочки"		, ТорговаяТочкаВид);
		ПараметрыФормы.Вставить("ДоступКТТ"				, Истина);
		ОповещенияОЗакрытии = Новый ОписаниеОповещения("НайтиДублиЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.вогФормаНайденныхДублей", ПараметрыФормы,ЭтаФорма,,,, ОповещенияОЗакрытии);
	Иначе
		ПроверкаПередзаписью = Истина;
		Если ИнформацияДляПользователя Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Дубль не найден'"),,"Информация");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДубли(Знач Объект, Знач СтруктураПоиска, Знач СписокКонтактов, Знач ТочноеСоответствие = Ложь, МассивДублей=Неопределено,ДополниетльныеПараметры = Неопределено)
	
	МассивДублей = вогОбщегоНазначения.НайтиДубли(Объект, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие,ДополниетльныеПараметры);
	Возврат МассивДублей.Количество() > 0;
	
КонецФункции 

&НаКлиенте
Процедура НайтиДублиЗавершение(РезультатЗакрытия, ОписаниеОповещения) Экспорт

	Если Не ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если РезультатЗакрытия.Результат = "Продолжить" Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		
	ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
		
		Если ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ФормаСписка = ПолучитьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаСписка");
		ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			ФормаСписка = ПолучитьФорму("Справочник.Партнеры.Форма.CRM_ФормаСписка");
		ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
			ФормаСписка = ПолучитьФорму("Справочник.вогТорговыеТочки.ФормаСписка");
		ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
			ФормаСписка = ПолучитьФорму("Справочник.вогЮридическиеЛица.ФормаСписка");
		КонецЕсли;
		
		ФормаСписка.Открыть();
		ФормаСписка.Элементы.Список.ТекущаяСтрока = РезультатЗакрытия.Объект;
		
		Модифицированность = Ложь;
		
	ИначеЕсли РезультатЗакрытия.Результат = "ОтнестиКРынку" Тогда
		
		Если ЗначениеЗаполнено(РезультатЗакрытия.Объект) Тогда
			ТорговаяТочка_ВидАдреса 	= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПустаяСсылка");
			ТорговаяТочкаВариантАдреса 	= "АдресРынка";
			ТорговаяТочка_Адрес			= "";
			ТорговаяТочкаРынок 			= РезультатЗакрытия.Объект;
			УстановитьВариантАдресаТорговойТочки(ЭтаФорма);
		КонецЕсли;
		
		// ++ Харченко Д.И. №  - 10.09.2018 / 
		
	ИначеЕсли  РезультатЗакрытия.Результат = "СогласоватьДубль" Тогда
		
		СоздатьАнкетуДубля();
		// ++ Тищенко В.В. 18.01.2019
		// Закрыть форму 3 в 1
		Закрыть();
		// -- Тищенко В.В. 
		
		// -- Харченко Д.И. №  - 10.09.2018
		
		// + Тищенко В.В.
	ИначеЕсли 	РезультатЗакрытия.Результат = "ОткрытьКарту" Тогда
		ОповещениеВыборАдресаЗавершение = Новый ОписаниеОповещения("ВыборАдресаЗавершение",ЭтаФорма);
		ПараметрыФормы = Новый Структура("ФормаБыстрогоВвода,СкрытьПанельАдресов",Истина,Ложь);
		ОткрытьФорму("Обработка.вогГеокодирование.Форма.Форма",ПараметрыФормы, ,,,,ОповещениеВыборАдресаЗавершение);
		// - Тищенко В.В.
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьПредставлениеТелефона(КодСтарны,КодГорода,Телефон,ДобНомер)

	Представление 	= "";
	КодСтраныСтрока = "";
	Если НЕ ПустаяСтрока(КодСтарны) И (Найти(КодСтарны, "+") = 0) Тогда
		КодСтраныСтрока = "+" + КодСтарны;
	Иначе
		КодСтраныСтрока = КодСтарны;
	КонецЕсли;	
	
	Представление = СокрЛП(КодСтраныСтрока);
	Если Не ПустаяСтрока(КодГорода) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КодГорода) + ")";
	КонецЕсли;
	
	Если Не ПустаяСтрока(Телефон) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(Телефон);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДобНомер) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(ДобНомер);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции 

&НаСервере
Процедура ФормированиеПолейПоискаТорговаяТочка(ОбъектПоиска,СписокКонтактов,СтруктураПоиска)
	
	ПоляПоискаТТ = ПолучитьПоляОбъекта("РеквизитыДляКонтроляЗаполнененияТорговаяТочка",Новый Структура("Использование,ПолеПоиска",Истина,Истина));
	
	Для каждого Стр Из ПоляПоискаТТ Цикл
		
		Если Стр.ИмяРеквизита = "ТорговаяТочкаНаименование" Тогда
			ОбъектПоиска.Вставить("Наименование",ТорговаяТочкаНаименование);
			СтруктураПоиска.Вставить("Наименование", "ПОДОБНО");
		ИначеЕсли Стр.ИмяРеквизита = "ТорговаяТочкаНаименованиеПолное"Тогда
			ОбъектПоиска.Вставить("НаименованиеПолное",ТорговаяТочкаНаименованиеПолное);
			СтруктураПоиска.Вставить("НаименованиеПолное", "ПОДОБНО");
		ИначеЕсли Стр.ИмяРеквизита = "ТорговаяТочкаКлиент" Тогда
			СтруктураПоиска.Вставить("Партнер", "=");
			ОбъектПоиска.Вставить("Партнер",ТорговаяТочкаКлиент);
		ИначеЕсли Стр.ИмяРеквизита = "ТорговаяТочкаВывеска" Тогда
			ОбъектПоиска.Вставить("Вывеска",ТорговаяТочкаВывеска);
			СтруктураПоиска.Вставить("Вывеска", "ПОДОБНО");
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаТорговаяТочкаКонтактнаяИнформация" Тогда
			// { VOG RMV 2019-03-05 task 180
			//Если ТорговаяТочкаВариантАдреса = "Адрес" Тогда 
			Если НЕ ЗначениеЗаполнено(ТорговаяТочкаРынок) Тогда
			// } VOG RMV 2019-03-05 task 180
				СтруктураПоиска.Вставить("Контакт_Адрес", "ПОДОБНО");
				// ++ VOG Солодов В.В. 25.09.2020 CRM-924
				КИ_JSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
					ТорговаяТочка_Адрес,
					ТорговаяТочка_ВидАдреса,
					Ложь);
				ПредставлениеКИ = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(КИ_JSON);
				КонтактнаяИнформацияПоПолям = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(КИ_JSON,,, Ложь);
				
				МассивКИ = СтрРазделить(ПредставлениеКИ, ",", Ложь);
				
				ИсключаемыеПоля = Новый Массив;
				ИсключаемыеПоля.Добавить(КонтактнаяИнформацияПоПолям.ZIPcode);
				ИсключаемыеПоля.Добавить(КонтактнаяИнформацияПоПолям.country);
				
				Для Каждого ИсключаемоеПоле Из ИсключаемыеПоля Цикл
					
					ИндексПоля = МассивКИ.Найти(ИсключаемоеПоле);
					
					Если Не ИндексПоля = Неопределено Тогда
						МассивКИ.Удалить(ИндексПоля);
					КонецЕсли;
					
				КонецЦикла;
				
				ПредставлениеКИ = "%" + СокрЛ(СтрСоединить(МассивКИ, ","));
				
				Если ПустаяСтрока(ПредставлениеКИ) Тогда
					ПредставлениеКИ = ТорговаяТочка_Адрес;
				КонецЕсли;
				
				ОбъектПоиска.Вставить("Адрес"	, ПредставлениеКИ);
				СписокКонтактов.Вставить("Адрес", ПредставлениеКИ);
				
				// ++ VOG Солодов В.В. 05.02.2021 DEV-125
				Если ТорговаяТочка_ВидАдреса = Справочники.ВидыКонтактнойИнформации.Месторасположение Тогда
					
					ПараметрыОтбора = Новый Структура("Вид", ТорговаяТочка_ВидАдреса);
					СтрокиКИ = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(ПараметрыОтбора);
					
					Если СтрокиКИ.Количество() > 0
						И ЗначениеЗаполнено(СтрокиКИ[0].Широта)
						И ЗначениеЗаполнено(СтрокиКИ[0].Долгота) Тогда
						
						СтруктураКоординаты = Новый Структура;
						СтруктураКоординаты.Вставить("Широта", СтрокиКИ[0].Широта);
						СтруктураКоординаты.Вставить("Долгота", СтрокиКИ[0].Долгота);
						
						СтруктураПоиска.Вставить("Контакт_Координаты", "=");
						СписокКонтактов.Вставить("Координаты", СтруктураКоординаты);
						
					КонецЕсли;
					
				КонецЕсли;
				// -- VOG Солодов В.В. 05.02.2021 DEV-125
				
				// До изменения
				//ОбъектПоиска.Вставить("Адрес"	, ТорговаяТочка_Адрес);
				//СписокКонтактов.Вставить("Адрес", ТорговаяТочка_Адрес);
				// -- VOG Солодов В.В. 25.09.2020 CRM-924
			Иначе
				МассивПолей = Новый Массив;
				МассивПолей.Добавить(Новый Структура("Рынок", "="));
				МассивПолей.Добавить(Новый Структура("МестоположениеНаРынке", "ПОДОБНО"));
				СтруктураПоиска.Вставить("СоставноеУсловие"		, МассивПолей);
				ОбъектПоиска.Вставить("Рынок"					, ТорговаяТочкаРынок);
				ОбъектПоиска.Вставить("МестоположениеНаРынке"	, ТорговаяТочкаМестоположениеНаРынке);
			КонецЕсли;
		ИначеЕсли Стр.ИмяРеквизита = "ТорговаяТочка_АдресПервичнойДокументации" Тогда
			СтруктураПоиска.Вставить("Контакт_Адрес", "ПОДОБНО");
			ОбъектПоиска.Вставить("Адрес"	, ТорговаяТочка_АдресПервичнойДокументации);
			СписокКонтактов.Вставить("Адрес", ТорговаяТочка_АдресПервичнойДокументации);
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаТорговаяТочкаТелефон" Тогда
			ПредставлениеТелефонТТ = СформироватьПредставлениеТелефона(ТорговаяТочкаКодСтраны,ТорговаяТочкаКодГорода,ТорговаяТочкаТелефон,ТорговаяТочкаДобНомер);
			ОбъектПоиска.Вставить("Телефон" ,ПредставлениеТелефонТТ);
			СтруктураПоиска.Вставить("Контакт_Телефон", "ПОДОБНО");
			СписокКонтактов.Вставить("Телефон", ПредставлениеТелефонТТ);
		ИначеЕсли Стр.ИмяРеквизита = "ТорговаяТочкаГрузополучатель" Тогда
			СтруктураПоиска.Вставить("ТорговаяТочкаГрузополучатель", "=");
			ОбъектПоиска.Вставить("Грузополучатель",ТорговаяТочкаГрузополучатель);
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаТорговаяТочкаСайт" Тогда
			СтруктураПоиска.Вставить("Контакт_ВебСтраница","ПОДОБНО");
			ОбъектПоиска.Вставить("ВебСтраница",ТорговаяТочкаВебСайт);
			СписокКонтактов.Вставить("ВебСтраница", ТорговаяТочкаВебСайт);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормированиеПолейПоискаКонтактныеЛица(ОбъектПоиска,СписокКонтактов,СтруктураПоиска,ПредставлениеТелефонКЛ)

	ПоляПоискаКЛ 			= ПолучитьПоляОбъекта("РеквизитыДляКонтроляЗаполнененияКонтактноеЛицо",Новый Структура("Использование,ПолеПоиска",Истина,Истина));

	Для каждого Стр Из ПоляПоискаКЛ Цикл
		Если Стр.ИмяРеквизита = "ГруппаКонтактноеЛицоФИО" Тогда
			ОбъектПоиска.Вставить("CRM_Фамилия", КонтактноеЛицоФамилия);
			ОбъектПоиска.Вставить("CRM_Имя", КонтактноеЛицоИмя);
			ОбъектПоиска.Вставить("CRM_Отчество", КонтактноеЛицоОтчество);
		ИначеЕсли Стр.ИмяРеквизита = "КонтактноеЛицоДолжность" Тогда
			СтруктураПоиска.Вставить("CRM_Должность", "=");
			ОбъектПоиска.Вставить("CRM_Должность",КонтактноеЛицоДолжность);
		// { VOG RMV 2019-02-15
		ИначеЕсли Стр.ИмяРеквизита = "КонтактноеЛицоРоль" Тогда
			СтруктураПоиска.Вставить("CRM_РольКонтактногоЛица", "=");
			ОбъектПоиска.Вставить("CRM_РольКонтактногоЛица",КонтактноеЛицоРоль);
		// } VOG RMV 2019-02-15
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаКонтактноеЛицоТелефон" Тогда
			ПредставлениеТелефонКЛ = СформироватьПредставлениеТелефона(КонтактноеЛицоКодСтраны,КонтактноеЛицоКодГорода,КонтактноеЛицоТелефон,КонтактноеЛицоДобНомер);
			ОбъектПоиска.Вставить("Телефон",ПредставлениеТелефонКЛ);
			СтруктураПоиска.Вставить("Контакт_Телефон", "ПОДОБНО");
			СписокКонтактов.Вставить("Телефон", ПредставлениеТелефонКЛ);
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаКонтактноеЛицоEmail" Тогда
			СтруктураПоиска.Вставить("Контакт_АдресЭлектроннойПочты","ПОДОБНО");
			ОбъектПоиска.Вставить("АдресЭлектроннойПочты",КонтактноеЛицоEmail);
			СписокКонтактов.Вставить("АдресЭлектроннойПочты", КонтактноеЛицоEmail);
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры 

&НаСервере
Процедура ФормированиеПолейПоискаПартнеры(ОбъектПоиска,СписокКонтактов,СтруктураПоиска)
	
	ПредставлениеТелефонПартнер = "";
	ПоляПоискаПартнеры 			= ПолучитьПоляОбъекта("РеквизитыДляКонтроляЗаполнененияКлиенты",Новый Структура("Использование,ПолеПоиска",Истина,Истина));
	
	Для каждого Стр Из ПоляПоискаПартнеры Цикл
		
		Если Стр.ИмяРеквизита = "ПартнерНаименование" Тогда
			СтруктураПоиска.Вставить("Наименование", "ПОДОБНО");
			ОбъектПоиска.Вставить("Наименование", ПартнерНаименование);
		ИначеЕсли Стр.ИмяРеквизита = "ПартнерВажность" Тогда
			СтруктураПоиска.Вставить("CRM_Важность", "=");
			ОбъектПоиска.Вставить("CRM_Важность", ПартнерВажность);
		ИначеЕсли Стр.ИмяРеквизита = "CRM_ТипыОтношений" Тогда
			// ОбъектПоиска.Вставить("ПартнерНаименование", CRM_ТипыОтношений);
		ИначеЕсли Стр.ИмяРеквизита = "ПартнерБизнесРегион" Тогда
			СтруктураПоиска.Вставить("БизнесРегион", "=");
			ОбъектПоиска.Вставить("БизнесРегион", ПартнерБизнесРегион);
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаПартнерТелефон" Тогда
			ПредставлениеТелефонПартнер = СформироватьПредставлениеТелефона(ПартнерКодСтраны,ПартнерКодГорода,ПартнерТелефон,ПартнерДобНомер);
			ОбъектПоиска.Вставить("Телефон",ПредставлениеТелефонПартнер);
			СтруктураПоиска.Вставить("Контакт_Телефон", "ПОДОБНО");
			СписокКонтактов.Вставить("Телефон", ПредставлениеТелефонПартнер);
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаПартнерEmail" Тогда
			СтруктураПоиска.Вставить("Контакт_АдресЭлектроннойПочты","ПОДОБНО");
			ОбъектПоиска.Вставить("АдресЭлектроннойПочты"	,ПартнерEmail);
			СписокКонтактов.Вставить("АдресЭлектроннойПочты", ПартнерEmail);
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаПартнерАдрес" Тогда
			СтруктураПоиска.Вставить("Контакт_Адрес", "ПОДОБНО");
			ОбъектПоиска.Вставить("Адрес"	, Партнер_Адрес);
			СписокКонтактов.Вставить("Адрес", Партнер_Адрес);
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаПартнерВебСайт" Тогда
			СтруктураПоиска.Вставить("Контакт_ВебСтраница","ПОДОБНО");
			ОбъектПоиска.Вставить("ВебСтраница",ПартнерВебСайт);
			СписокКонтактов.Вставить("ВебСтраница", ПартнерВебСайт);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ФормированиеПолейПоискаЮридическиеЛица(ОбъектПоиска,СписокКонтактов,СтруктураПоиска)

	ПоляПоискаЮрЛица = ПолучитьПоляОбъекта("РеквизитыДляКонтроляЗаполнененияЮрЛица",Новый Структура("Использование,ПолеПоиска",Истина,Истина));
	
	Для каждого Стр Из ПоляПоискаЮрЛица Цикл
		
		Если Стр.ИмяРеквизита = "ЮрЛицоОрганизационноПравоваяФорма" Тогда
			СтруктураПоиска.Вставить("ОрганизационноПравоваяФорма", "=");
			ОбъектПоиска.Вставить("ОрганизационноПравоваяФорма", ЮрЛицоОрганизационноПравоваяФорма);
		ИначеЕсли Стр.ИмяРеквизита = "ЮрЛицоНаименование" Тогда
			СтруктураПоиска.Вставить("Наименование", "ПОДОБНО");
			ОбъектПоиска.Вставить("Наименование", ЮрЛицоНаименование);
		ИначеЕсли Стр.ИмяРеквизита = "ЮрЛицоНаименованиеПолное" Тогда
			СтруктураПоиска.Вставить("Наименование", "ПОДОБНО");
			ОбъектПоиска.Вставить("НаименованиеПолное", ЮрЛицоНаименованиеПолное);
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаЮрЛицоАдрес" Тогда
			СтруктураПоиска.Вставить("Контакт_Адрес", "ПОДОБНО");
			ОбъектПоиска.Вставить("Адрес"	, ЮрЛицо_Адрес);
			СписокКонтактов.Вставить("Адрес", ЮрЛицо_Адрес);
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаИНН" Тогда
			Если НЕ Элементы.ГруппаИП.Видимость Тогда
				ОбъектПоиска.Вставить("CRM_ИНН", CRM_ИНН);
			Иначе
				ОбъектПоиска.Вставить("ПредставлениеСерияНомер", ЮрЛицоСерия + Символы.Таб + ЮрЛицоНомер);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ТипыОтношений

&НаСервере
Процедура вогЗаполнитьВсеТипыОтношенийСервер()
	
	ТипыОтношений = Новый ТаблицаЗначений;
	ТипыОтношений.Колонки.Добавить("ТипОтношений", Новый ОписаниеТипов("СправочникСсылка.CRM_ТипыОтношений"));
	Если ЗначениеЗаполнено(ТипОтношений) Тогда
		ТипыОтношений.Добавить().ТипОтношений = ТипОтношений;	
	КонецЕсли;
	
	CRM_ВсеТипыОтношений.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыОтношений", ТипыОтношений);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТипыОтношенийПартнера.ТипОтношений КАК ТипОтношений
		|ПОМЕСТИТЬ втПартнерТипыОтношений
		|ИЗ
		|	&ТипыОтношений КАК ТипыОтношенийПартнера
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипОтношений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА втПартнерТипыОтношений.ТипОтношений ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Пометка,
		|	CRM_ТипыОтношений.Ссылка КАК Ссылка,
		|	CRM_ТипыОтношений.Представление КАК Представление
		|ИЗ
		|	Справочник.CRM_ТипыОтношений КАК CRM_ТипыОтношений
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПартнерТипыОтношений КАК втПартнерТипыОтношений
		|		ПО CRM_ТипыОтношений.Ссылка = втПартнерТипыОтношений.ТипОтношений
		|
		|УПОРЯДОЧИТЬ ПО
		|	втПартнерТипыОтношений.ТипОтношений
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		CRM_ВсеТипыОтношений.Добавить(Выборка.Ссылка, Выборка.Представление, Выборка.Пометка);
		
	КонецЦикла;
	
КонецПроцедуры // вогЗаполнитьВсеТипыОтношений()

&НаСервере
Процедура вогЗаписатьВсеТипыОтношений(ТекущийОбъект)
	
	ТекущийОбъект.вогТипыОтношений.Очистить();
	Для Каждого ЭлементТипОтношений Из CRM_ВсеТипыОтношений Цикл
		ТипОтношенийСсылка = ЭлементТипОтношений.Значение;
		Если ЭлементТипОтношений.Пометка Тогда
			ТекущийОбъект.вогТипыОтношений.Добавить().ТипОтношений = ТипОтношенийСсылка;
		КонецЕсли;
		
		ИмяПредопределенныхДанных = ТипОтношенийСсылка.ИмяПредопределенныхДанных;
		Если ЗначениеЗаполнено(ИмяПредопределенныхДанных) Тогда
			Попытка
				ТекущийОбъект[ИмяПредопределенныхДанных] = ЭлементТипОтношений.Пометка;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // вогЗаписатьВсеТипыОтношений()

&НаКлиентеНаСервереБезКонтекста
Процедура вогЗаполнитьТипыОтношений(Форма)
	Форма.ПартнерCRM_ТипыОтношений = "";
	Для Каждого ТипОтношений Из Форма.CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			Форма.ПартнерCRM_ТипыОтношений = Форма.ПартнерCRM_ТипыОтношений  + "; " + ТипОтношений.Представление;
		КонецЕсли;				
	КонецЦикла;	
	Если СтрДлина(Форма.ПартнерCRM_ТипыОтношений) > 0 Тогда
		Форма.ПартнерCRM_ТипыОтношений = Сред(Форма.ПартнерCRM_ТипыОтношений, 3);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		// Обработка ошибок
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
				|необходимо подключиться к Интернет-поддержке пользователей.
				|Подключиться сейчас?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "")
	
	ЭтоЮридическоеЛицо = (ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(CRM_ИНН);
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(CRM_ИНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыКонтрагента);
	
	Если ЭтоЮридическоеЛицо Тогда
		Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И ЗначениеЗаполнено(РеквизитыКонтрагента.ЮридическийАдрес) Тогда
			ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес, 
				РеквизитыКонтрагента.ЮридическийАдрес);
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") И ЗначениеЗаполнено(РеквизитыКонтрагента.Телефон) Тогда
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера, 
			РеквизитыКонтрагента.Телефон);
	КонецЕсли;
		
	Если РеквизитыКонтрагента.Свойство("Руководитель") И ЗначениеЗаполнено(РеквизитыКонтрагента.Руководитель) Тогда
		ЗаполнитьРуководителя(РеквизитыКонтрагента.Руководитель);
		
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРуководителя(СтруктураДанных)
	
	КонтактноеЛицоФамилия  = СтруктураДанных.Фамилия;
	КонтактноеЛицоИмя	   = СтруктураДанных.Имя;
	КонтактноеЛицоОтчество = СтруктураДанных.Отчество;
	
	Должность			   = Справочники.CRM_Должности.НайтиПоНаименованию(СтруктураДанных.Должность);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ВидАдреса = ВидКонтактнойИнформации;
		Адрес = СтруктураДанных.Представление;
	ИначеЕсли ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ВидEmailКлиента = ВидКонтактнойИнформации;
		Email = СтруктураДанных.Представление;
	ИначеЕсли ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ВидТелефонаКлиента		= ВидКонтактнойИнформации;
		ЗначенияПолейТелефона	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтруктураДанных.Представление);
		КодСтраны				= ЗначенияПолейТелефона.КодСтраны;
		КодГорода				= ЗначенияПолейТелефона.КодГорода;
		Телефон					= ЗначенияПолейТелефона.НомерТелефона;
		ДобНомер				= ЗначенияПолейТелефона.Добавочный;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено 
		И Результат <> КодВозвратаДиалога.Отмена Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СозданиеЭлементов

// + Тищенко В.В.

// Не используется данный функционал
&НаСервере
Процедура СоздатьАнкету(ВариантОпроса, ПоляОбъекта, Закрывать)
	
	//ДокументОбъект 			= Документы.вогАнкета.СоздатьДокумент();
	//
	//ДокументОбъект.Дата 	= ТекущаяДата();
	//ДокументОбъект.Автор	= ПараметрыСеанса.ТекущийПользователь;
	//
	//ДокументОбъект.ВариантОпроса = ВариантОпроса;
	//
	//РеквизитыВариантаОпроса = вогУправлениеОпросамиСервер.ПолучитьРеквизитыВариантаОпроса(ВариантОпроса);
	//
	//Если РеквизитыВариантаОпроса.УказатьНаправлениеДеятельности = Истина Тогда
	//	ДокументОбъект.НаправлениеДеятельности = РеквизитыВариантаОпроса.НаправлениеДеятельности;
	//КонецЕсли;

	//ПараметрыВыполнения = вогУправлениеОпросамиСервер.ПолучитьПараметрыВыполненияИнициализацииАнкеты(ДокументОбъект, РеквизитыВариантаОпроса);
	//
	//АдресВХранилище = "";
	//
	//вогУправлениеОпросамиСервер.СформироватьДанныеОпроса(ПараметрыВыполнения, АдресВХранилище, Новый УникальныйИдентификатор);
	//
	//Результат = ПолучитьИзВременногоХранилища(АдресВХранилище);
	//Если Результат = Неопределено Тогда
	//	Сообщить("Ошибка получения данных анкеты");
	//	Возврат;
	//КонецЕсли;
	//
	//УдалитьИзВременногоХранилища(АдресВХранилище);
	//
	//Документы.вогАнкета.ВыполнитьЗаполнениеТаблицОтветов(ДокументОбъект, ПоляОбъекта, Результат.ТаблицаЭлементарныхВопросов);
	//
	//Попытка
	//	
	//	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//	
	//Исключение
	//	
	//	ТекстОшибки = ОписаниеОшибки();
	//	ЗаписьЖурналаРегистрации("Создание анкеты из формы 3в1", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	//	Сообщить(ТекстОшибки);
	//	Возврат;
	//КонецПопытки;
	//
	//Закрывать = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАнкетуКлиент(ВариантОпроса)
	
	АдресДанныхДляЗаполнения 	= ПодготовитьДанныеДляЗаполненияАнкеты(Истина);
	
	ПараметрыОткрытияАнкеты 	= Новый Структура;
	
	ДанныеЗаполненияАнкеты 		= Новый Структура;
	ДанныеЗаполненияАнкеты.Вставить("ВариантОпроса", ВариантОпроса);
	
	ПараметрыОткрытияАнкеты.Вставить("ЗначенияЗаполнения"		, ДанныеЗаполненияАнкеты);
	ПараметрыОткрытияАнкеты.Вставить("АдресДанныхДляЗаполнения"	, АдресДанныхДляЗаполнения);
	
	ОткрытьФорму("Документ.вогАнкета.Форма.ФормаДокумента"		, ПараметрыОткрытияАнкеты, ЭтаФорма);

	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоляЗаписи()

	ПоляОбъекта 				= Новый Структура;
	
#Область ТорговаяТочка
			
// Торговая точка
СтруктураПолейТорговаяТочка = Новый Структура;
ОсновныеПоляТорговыеТочки	= Новый Структура;
ПоляТорговойТочки			= Новый Структура;
ДополнительныеПоляПроверки	= Новый Структура; 
// ++ Харченко Д.И. №  - 11.09.2018 / 
ТабличныеЧастиТорговойТочки	= Новый Структура;
ДанныеКонтактнойИнформации	= Новый Соответствие;

Если ТорговаяТочкаВид.ИспользоватьНастройкиДляФормы3в1 И ТорговаяТочкаВид.НастройкиТорговаяТочка Тогда
	
	// Обязательные поля заполненения	
	СтрокиОбязательногоЗаполнения = ПолучитьПоляОбъекта("РеквизитыДляКонтроляЗаполнененияТорговаяТочка",Новый Структура("ОбязателенДляЗаполнения",Истина));
	
	Для каждого Стр Из СтрокиОбязательногоЗаполнения Цикл
		Если НЕ Стр.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Стр.ИмяРеквизита,"Группа") = 0 И СтрНайти(Стр.ИмяРеквизита,"КоманднаяПанельНаправленияДеятельности") = 0 Тогда
			Если Стр.ИмяРеквизита = "ТорговаяТочкаНаименованиеПолное" Тогда
				ОсновныеПоляТорговыеТочки.Вставить("НаименованиеПолное"	,ТорговаяТочкаНаименованиеПолное);
			ИначеЕсли  Стр.ИмяРеквизита = "ТорговаяТочкаНаименование"  Тогда
				ОсновныеПоляТорговыеТочки.Вставить("Наименование"			,ТорговаяТочкаНаименование);
			ИначеЕсли Стр.ИмяРеквизита = "ТорговаяТочкаКлиент" Тогда
				ОсновныеПоляТорговыеТочки.Вставить("Партнер"				,ТорговаяТочкаКлиент);
			ИначеЕсли Стр.ИмяРеквизита = "ТорговаяТочкаВывеска" Тогда
				ОсновныеПоляТорговыеТочки.Вставить("Вывеска"				,ТорговаяТочкаВывеска);
			ИначеЕсли Стр.ИмяРеквизита = "ТорговаяТочкаВид" Тогда
				ОсновныеПоляТорговыеТочки.Вставить("Вид"					,ТорговаяТочкаВид);
			ИначеЕсли Стр.ИмяРеквизита = "ТорговаяТочка_АдресПервичнойДокументации" Тогда
				ДополнительныеПоляПроверки.Вставить("ТорговаяТочка_АдресПервичнойДокументации",ТорговаяТочка_АдресПервичнойДокументации);
			ИначеЕсли	ЗначениеЗаполнено(Элементы[Стр.ИмяРеквизита].Заголовок) Тогда 
				ОсновныеПоляТорговыеТочки.Вставить(Элементы[Стр.ИмяРеквизита].Заголовок,ЭтаФорма[Стр.ИмяРеквизита]);
			КонецЕсли;
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаТорговаяТочкаКонтактнаяИнформация" Тогда
			
			// ++ VOG Солодов В.В. 21.05.2020 CRM-653
			Если ТорговаяТочкаВид.РежимВыбораАдресаТорговойТочки <> 0
				И ЗначениеЗаполнено(ТорговаяТочкаРынок) Тогда
				ОсновныеПоляТорговыеТочки.Вставить("Рынок", 				ТорговаяТочкаРынок);
				ОсновныеПоляТорговыеТочки.Вставить("МестоположениеНаРынке", ТорговаяТочкаМестоположениеНаРынке);
			КонецЕсли;
			
			Если ТорговаяТочкаВид.РежимВыбораАдресаТорговойТочки = 2
				И ТорговаяТочкаВид.ВидАдресаТорговойТочки = Справочники.ВидыКонтактнойИнформации.Месторасположение Тогда
				ДополнительныеПоляПроверки.Вставить("ТорговаяТочка_Адрес", 	ТорговаяТочка_Адрес);
			КонецЕсли;
			// До изменения
			//Если ТорговаяТочкаВариантАдреса = "АдресРынка" Тогда
			//	ОсновныеПоляТорговыеТочки.Вставить("Рынок",ТорговаяТочкаРынок);
			//	ОсновныеПоляТорговыеТочки.Вставить("МестоположениеНаРынке",ТорговаяТочкаМестоположениеНаРынке);
			//Иначе
			//	ДополнительныеПоляПроверки.Вставить("ТорговаяТочка_Адрес",ТорговаяТочка_Адрес);
			//КонецЕсли;
			// -- VOG Солодов В.В. 21.05.2020
			
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаТорговаяТочкаТелефон" Тогда
			ДополнительныеПоляПроверки.Вставить("ТорговаяТочкаТелефон",ТорговаяТочкаТелефон);
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаТорговаяТочкаСайт" Тогда
			ДополнительныеПоляПроверки.Вставить("ТорговаяТочкаВебСайт",ТорговаяТочкаВебСайт);
		КонецЕсли;
	КонецЦикла;
	
	// Поля заполненения
	СтрокиПоляЗаполнения =  ПолучитьПоляОбъекта("РеквизитыДляКонтроляЗаполнененияТорговаяТочка",Новый Структура("ОбязателенДляЗаполнения",Ложь));

	Для каждого Стр Из СтрокиПоляЗаполнения Цикл
		Если НЕ Стр.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Стр.ИмяРеквизита,"Группа") = 0 И СтрНайти(Стр.ИмяРеквизита,"КоманднаяПанельНаправленияДеятельности") = 0 Тогда
			Если Стр.ИмяРеквизита = "ТорговаяТочкаНаименованиеПолное" Тогда
				ПоляТорговойТочки.Вставить("Наименование"	,ТорговаяТочкаНаименованиеПолное);
			ИначеЕсли  Стр.ИмяРеквизита = "ТорговаяТочкаНаименование"  Тогда
				ПоляТорговойТочки.Вставить("Наименование"	,ТорговаяТочкаНаименование);
			ИначеЕсли Стр.ИмяРеквизита = "ТорговаяТочкаКлиент" Тогда
				ПоляТорговойТочки.Вставить("Партнер"		,ТорговаяТочкаКлиент);
			ИначеЕсли Стр.ИмяРеквизита = "ТорговаяТочкаВывеска" Тогда
				ПоляТорговойТочки.Вставить("Вывеска"		,ТорговаяТочкаВывеска);
			ИначеЕсли Стр.ИмяРеквизита = "ТорговаяТочкаВид" Тогда
				ПоляТорговойТочки.Вставить("Вид"			,ТорговаяТочкаВид);
			//ИначеЕсли Стр.ИмяРеквизита = "ТорговаяТочка_АдресПервичнойДокументации" Тогда
				//ПоляТорговойТочки.Вставить("ТорговаяТочка_АдресПервичнойДокументации",ТорговаяТочка_АдресПервичнойДокументации);
			ИначеЕсли ЗначениеЗаполнено(Элементы[Стр.ИмяРеквизита].Заголовок) Тогда
				ПоляТорговойТочки.Вставить(Элементы[Стр.ИмяРеквизита].Заголовок,ЭтаФорма[Стр.ИмяРеквизита]);
			КонецЕсли;				
		ИначеЕсли Стр.ИмяРеквизита = "ГруппаТорговаяТочкаКонтактнаяИнформация" Тогда
			
			// ++ VOG Солодов В.В. 21.05.2020 CRM-653
			ПоляТорговойТочки.Вставить("Рынок"					,ТорговаяТочкаРынок);
			ПоляТорговойТочки.Вставить("МестоположениеНаРынке"	,ТорговаяТочкаМестоположениеНаРынке);
			// До изменения
			//Если ТорговаяТочкаВариантАдреса = "АдресРынка" Тогда
			//	ПоляТорговойТочки.Вставить("Рынок"					,ТорговаяТочкаРынок);
			//	ПоляТорговойТочки.Вставить("МестоположениеНаРынке"	,ТорговаяТочкаМестоположениеНаРынке);
			//КонецЕсли;
			// -- VOG Солодов В.В. 21.05.2020
			
		КонецЕсли;
	КонецЦикла;

	СтруктураПолейТорговаяТочка.Вставить("КлючевыеПоля"	,ОсновныеПоляТорговыеТочки);
	СтруктураПолейТорговаяТочка.Вставить("Поля"			,ПоляТорговойТочки);
	
	Иначе
		
	ОсновныеПоляТорговыеТочки.Вставить("Наименование"	,ТорговаяТочкаНаименование);
	ОсновныеПоляТорговыеТочки.Вставить("Вид"			,ТорговаяТочкаВид);
	
	//Если ТорговаяТочкаВариантАдреса = "АдресРынка" Тогда
		ОсновныеПоляТорговыеТочки.Вставить("Рынок"					,ТорговаяТочкаРынок);
		ОсновныеПоляТорговыеТочки.Вставить("МестоположениеНаРынке"	,ТорговаяТочкаМестоположениеНаРынке);
	//КонецЕсли;
		
	ПоляТорговойТочки.Вставить("НаименованиеПолное"		,ТорговаяТочкаНаименованиеПолное);
	ПоляТорговойТочки.Вставить("Партнер"				,ТорговаяТочкаКлиент);
	ПоляТорговойТочки.Вставить("Рынок"					,ТорговаяТочкаРынок);
	ПоляТорговойТочки.Вставить("МестоположениеНаРынке"	,ТорговаяТочкаМестоположениеНаРынке);
	ПоляТорговойТочки.Вставить("Вывеска"				,ТорговаяТочкаВывеска);
		
	СтруктураПолейТорговаяТочка.Вставить("КлючевыеПоля"	,ОсновныеПоляТорговыеТочки);
	СтруктураПолейТорговаяТочка.Вставить("Поля"			,ПоляТорговойТочки);
	
	КонецЕсли;
	
	// Табличные части
	// ++ Харченко Д.И. №  - 11.09.2018 / 
	ТабличныеЧастиТорговойТочки.Вставить("Направления", Новый Массив);
	
	// Для унификации формируется структуру из имен табилчны частей и реквизитов
	Если Элементы.КомандаОбои.Пометка Тогда
		//ТабличныеЧастиТорговойТочки.Направления.Добавить(Справочники.НаправленияДеятельности.Обои);
		ТабличныеЧастиТорговойТочки.Направления.Добавить(Новый Структура("Направление", Справочники.НаправленияДеятельности.Обои));
	КонецЕсли;
	
	Если Элементы.КомандаПлитка.Пометка Тогда
		//ТабличныеЧастиТорговойТочки.Направления.Добавить(Справочники.НаправленияДеятельности.Плитка);
		ТабличныеЧастиТорговойТочки.Направления.Добавить(Новый Структура("Направление", Справочники.НаправленияДеятельности.Плитка));
	КонецЕсли;
	
	СтруктураПолейТорговаяТочка.Вставить("ТабличныеЧасти", ТабличныеЧастиТорговойТочки);
	
	// -- Харченко Д.И. №  - 11.09.2018

	// Контактная информация
	// ++ Харченко Д.И. №  - 11.09.2018 / 	
	Если ЗначениеЗаполнено(ТорговаяТочка_ВидАдреса) 
		И ЗначениеЗаполнено(ТорговаяТочка_Адрес) Тогда
		ДанныеКонтактнойИнформации.Вставить(ТорговаяТочка_ВидАдреса, ТорговаяТочка_Адрес);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТорговаяТочкаТелефон) Тогда
		ДанныеКонтактнойИнформации.Вставить(ТорговаяТочкаВидТелефона, ПолучитьДанныеПоШаблонуТелефон(ТорговаяТочкаКодСтраны, ТорговаяТочкаКодГорода, ТорговаяТочкаТелефон, ТорговаяТочкаДобНомер));
	КонецЕсли;
	
	// ++ Тищенко В.В. 04.02.2019
	Если ЗначениеЗаполнено(ТорговаяТочка_АдресПервичнойДокументации) Тогда
		 ДанныеКонтактнойИнформации.Вставить(Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки, ТорговаяТочка_АдресПервичнойДокументации);
	КонецЕсли;
	// -- Тищенко В.В. 
	
	СтруктураПолейТорговаяТочка.Вставить("КонтактнаяИнформация", ДанныеКонтактнойИнформации);
	
	// Найденные дубли
	МассивНайденныеДубли = Новый Массив;	
	Для Каждого стр из НайденныеДубли Цикл        
		Если стр.тип = "ТорговаяТочка" Тогда
			Тип = "Торговая точка";
		Иначе
			Тип = "Рынок";
		КонецЕсли;	
		МассивНайденныеДубли.Добавить(Новый Структура("ОбъектПоиска, Тип", стр.Ссылка, Тип));
	КонецЦикла;
	
	СтруктураПолейТорговаяТочка.Вставить("НайденныеДубли"				, МассивНайденныеДубли);
	// -- Харченко Д.И. №  - 11.09.2018

	СтруктураПолейТорговаяТочка.Вставить("ДополнительныеПоляПроверки"	,ДополнительныеПоляПроверки);
	ПоляОбъекта.Вставить("ТорговаяТочка"								,СтруктураПолейТорговаяТочка);
	
#КонецОбласти
	
#Область КонтактноеЛицо
	
 	// Контактное лицо
	СтруктураПолейКонтактныеЛица 	= Новый Структура;
	ОсновныеПоляКонтактныеЛица		= Новый Структура;
	ПоляКонтактныеЛица				= Новый Структура;
	ДополнительныеПоляПроверки		= Новый Структура; 
	
	// ++ Харченко Д.И. №  - 11.09.2018 / 
	ДанныеКонтактнойИнформации	= Новый Соответствие;
	// -- Харченко Д.И. №  - 11.09.2018
	
	//	ОсновныеПоляКонтактныеЛица.Вставить("CRM_Фамилия",КонтактноеЛицоФамилия);
	//	ОсновныеПоляКонтактныеЛица.Вставить("CRM_Имя",КонтактноеЛицоИмя);
	//	ОсновныеПоляКонтактныеЛица.Вставить("CRM_Отчество",КонтактноеЛицоОтчество);
	
	Если ТорговаяТочкаВид.ИспользоватьНастройкиДляФормы3в1 И ТорговаяТочкаВид.НастройкиКонтактноеЛицо Тогда
		
		// Обязательные поля заполненения	
		СтрокиОбязательногоЗаполнения = ПолучитьПоляОбъекта("РеквизитыДляКонтроляЗаполнененияКонтактноеЛицо",Новый Структура("ОбязателенДляЗаполнения",Истина));
		
		Для каждого Стр Из СтрокиОбязательногоЗаполнения Цикл
			Если НЕ Стр.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если СтрНайти(Стр.ИмяРеквизита,"Группа") = 0 Тогда
				Если Стр.ИмяРеквизита = "КонтактноеЛицоДолжность" Тогда
					ОсновныеПоляКонтактныеЛица.Вставить("CRM_Должность"	,КонтактноеЛицоДолжность);
				// { VOG RMV 2019-02-15
				ИначеЕсли Стр.ИмяРеквизита = "КонтактноеЛицоРоль" Тогда
					ОсновныеПоляКонтактныеЛица.Вставить("CRM_РольКонтактногоЛица", КонтактноеЛицоРоль);
				// } VOG RMV 2019-02-15
				ИначеЕсли  Стр.ИмяРеквизита = "КонтактноеЛицоПол" Тогда
					ОсновныеПоляКонтактныеЛица.Вставить("Пол"			,КонтактноеЛицоПол);
				Иначе
					ОсновныеПоляКонтактныеЛица.Вставить(Элементы[Стр.ИмяРеквизита].Заголовок,ЭтаФорма[Стр.ИмяРеквизита]);
				КонецЕсли;
			ИначеЕсли Стр.ИмяРеквизита = "ГруппаКонтактноеЛицоФИО" Тогда
				ОсновныеПоляКонтактныеЛица.Вставить("CRM_Фамилия"			,КонтактноеЛицоФамилия);
				ОсновныеПоляКонтактныеЛица.Вставить("CRM_Имя"				,КонтактноеЛицоИмя);
				ОсновныеПоляКонтактныеЛица.Вставить("CRM_Отчество"			,КонтактноеЛицоОтчество);
			ИначеЕсли Стр.ИмяРеквизита = "ГруппаКонтактноеЛицоТелефон" Тогда
				ДополнительныеПоляПроверки.Вставить("КонтактноеЛицоТелефон"	,КонтактноеЛицоТелефон);
			ИначеЕсли Стр.ИмяРеквизита = "ГруппаКонтактноеЛицоEmail" Тогда
				ДополнительныеПоляПроверки.Вставить("КонтактноеЛицоEmail"	,КонтактноеЛицоEmail);
			КонецЕсли;
		КонецЦикла;
		
		// Поля заполненения
		СтрокиПоляЗаполнения =  ПолучитьПоляОбъекта("РеквизитыДляКонтроляЗаполнененияКонтактноеЛицо",Новый Структура("ОбязателенДляЗаполнения",Ложь));
		
		Для каждого Стр Из СтрокиПоляЗаполнения Цикл
			Если НЕ Стр.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если СтрНайти(Стр.ИмяРеквизита,"Группа") = 0 Тогда
				Если Стр.ИмяРеквизита = "КонтактноеЛицоДолжность" Тогда
					ПоляКонтактныеЛица.Вставить("CRM_Должность",КонтактноеЛицоДолжность);
				// { VOG RMV 2019-02-15
				ИначеЕсли Стр.ИмяРеквизита = "КонтактноеЛицоРоль" Тогда
					ПоляКонтактныеЛица.Вставить("CRM_РольКонтактногоЛица", 	КонтактноеЛицоРоль);
					// ++ VOG Солодов В.В. 26.07.2019 task 479
					ПоляКонтактныеЛица.Вставить("вогСобственник", 			КонтактноеЛицоСобственник);
					// -- VOG Солодов В.В. 26.07.2019
				// } VOG RMV 2019-02-15	
				ИначеЕсли  Стр.ИмяРеквизита = "КонтактноеЛицоПол" Тогда
					ПоляКонтактныеЛица.Вставить("Пол",КонтактноеЛицоПол);
				Иначе
					ПоляКонтактныеЛица.Вставить(Элементы[Стр.ИмяРеквизита].Заголовок,ЭтаФорма[Стр.ИмяРеквизита]);
				КонецЕсли;	
			ИначеЕсли Стр.ИмяРеквизита = "ГруппаКонтактноеЛицоФИО" Тогда
				ПоляКонтактныеЛица.Вставить("CRM_Фамилия"	,КонтактноеЛицоФамилия);
				ПоляКонтактныеЛица.Вставить("CRM_Имя"		,КонтактноеЛицоИмя);
				ПоляКонтактныеЛица.Вставить("CRM_Отчество"	,КонтактноеЛицоОтчество);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПолейКонтактныеЛица.Вставить("КлючевыеПоля",ОсновныеПоляКонтактныеЛица);
		СтруктураПолейКонтактныеЛица.Вставить("Поля"		,ПоляКонтактныеЛица);
		
	Иначе
		
	ПоляКонтактныеЛица.Вставить("CRM_Фамилия"	,КонтактноеЛицоФамилия);
	ПоляКонтактныеЛица.Вставить("CRM_Имя"		,КонтактноеЛицоИмя);
	ПоляКонтактныеЛица.Вставить("CRM_Отчество"	,КонтактноеЛицоОтчество);
	
	ПоляКонтактныеЛица.Вставить("CRM_Должность"	,КонтактноеЛицоДолжность);
	// { VOG RMV 2019-02-15
	ПоляКонтактныеЛица.Вставить("CRM_РольКонтактногоЛица"	,КонтактноеЛицоРоль);
	// } VOG RMV 2019-02-15	
	ПоляКонтактныеЛица.Вставить("Пол"			,КонтактноеЛицоПол);
	
	СтруктураПолейКонтактныеЛица.Вставить("КлючевыеПоля",ОсновныеПоляКонтактныеЛица);
	СтруктураПолейКонтактныеЛица.Вставить("Поля"		,ПоляКонтактныеЛица);
	
	КонецЕсли;
	
	// ++ Харченко Д.И. №  - 11.09.2018 / 	
	Если ЗначениеЗаполнено(КонтактноеЛицоТелефон) Тогда
		ДанныеКонтактнойИнформации.Вставить(КонтактноеЛицоВидТелефона, ПолучитьДанныеПоШаблонуТелефон(КонтактноеЛицоКодСтраны, КонтактноеЛицоКодГорода, КонтактноеЛицоТелефон, КонтактноеЛицоДобНомер));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтактноеЛицоВидEmail) 
		И ЗначениеЗаполнено(КонтактноеЛицоEmail) Тогда
		ДанныеКонтактнойИнформации.Вставить(КонтактноеЛицоВидEmail, КонтактноеЛицоEmail);
	КонецЕсли;
	
	СтруктураПолейКонтактныеЛица.Вставить("КонтактнаяИнформация", ДанныеКонтактнойИнформации);
	// -- Харченко Д.И. №  - 11.09.2018
	
	СтруктураПолейКонтактныеЛица.Вставить("ДополнительныеПоляПроверки",ДополнительныеПоляПроверки);
	ПоляОбъекта.Вставить("КонтактноеЛицо",СтруктураПолейКонтактныеЛица);
	
	#КонецОбласти
	
#Область Клиент

	// Клиент
	СтруктураПолейКлиента 		= Новый Структура;
	ОсновныеПоляКлиент			= Новый Структура;
	ПоляКлиент					= Новый Структура;
	ДополнительныеПоляПроверки	= Новый Структура; 
	// ++ Харченко Д.И. №  - 11.09.2018 / 
	ДанныеКонтактнойИнформации	= Новый Соответствие;
	// -- Харченко Д.И. №  - 11.09.2018

	Если ТорговаяТочкаВид.ИспользоватьНастройкиДляФормы3в1 И ТорговаяТочкаВид.НастройкиКлиент Тогда
		
		// Обязательные поля заполненения	
		СтрокиОбязательногоЗаполнения = ПолучитьПоляОбъекта("РеквизитыДляКонтроляЗаполнененияКлиенты",Новый Структура("ОбязателенДляЗаполнения",Истина));
		
		Для каждого Стр Из СтрокиОбязательногоЗаполнения Цикл
			Если НЕ Стр.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если СтрНайти(Стр.ИмяРеквизита,"Группа") = 0 Тогда
				Если Стр.ИмяРеквизита = "CRM_ТипыОтношений" Тогда
					ОсновныеПоляКлиент.Вставить("CRM_ТипыОтношений"		,ПартнерCRM_ТипыОтношений);
				ИначеЕсли Стр.ИмяРеквизита = "ПартнерБизнесРегион" Тогда
					ОсновныеПоляКлиент.Вставить("БизнесРегион"			,ПартнерБизнесРегион);
				ИначеЕсли Стр.ИмяРеквизита = "ПартнерНаименование" Тогда
					ОсновныеПоляКлиент.Вставить("НаименованиеПолное"	,ПартнерНаименование);
					ОсновныеПоляКлиент.Вставить("Наименование"			,ПартнерНаименование);
				ИначеЕсли Стр.ИмяРеквизита = "ПартнерВажность" Тогда
					ОсновныеПоляКлиент.Вставить("CRM_Важность"			,ПартнерВажность);
				Иначе	
					ОсновныеПоляКлиент.Вставить(Элементы[Стр.ИмяРеквизита].Заголовок,ЭтаФорма[Стр.ИмяРеквизита]);
				КонецЕсли;
			ИначеЕсли Стр.ИмяРеквизита = "ГруппаПартнерТелефон" Тогда
				ДополнительныеПоляПроверки.Вставить("ПартнерТелефон",ПартнерТелефон)
			ИначеЕсли Стр.ИмяРеквизита = "ГруппаПартнерEmail" Тогда
				ДополнительныеПоляПроверки.Вставить("ПартнерEmail",ПартнерEmail);
			ИначеЕсли Стр.ИмяРеквизита = "ГруппаПартнерАдрес" Тогда
				ДополнительныеПоляПроверки.Вставить("Партнер_Адрес",Партнер_Адрес);
			ИначеЕсли Стр.ИмяРеквизита = "ГруппаПартнерВебСайт" Тогда
				ДополнительныеПоляПроверки.Вставить("ПартнерВебСайт",ПартнерВебСайт);
			КонецЕсли;
		КонецЦикла;
		
		// Поля заполненения
		СтрокиПоляЗаполнения =  ПолучитьПоляОбъекта("РеквизитыДляКонтроляЗаполнененияКлиенты",Новый Структура("ОбязателенДляЗаполнения",Ложь));
		
		Для каждого Стр Из СтрокиПоляЗаполнения Цикл
			Если НЕ Стр.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если СтрНайти(Стр.ИмяРеквизита,"Группа") = 0 Тогда
				Если Стр.ИмяРеквизита = "CRM_ТипыОтношений" Тогда
				// 	Пропускаем реквизит CRM_ТипыОтношений так как используется табличаня часть в объекте 
				//	ПоляКлиент.Вставить("CRM_ТипыОтношений"		,ПартнерCRM_ТипыОтношений);
				ИначеЕсли Стр.ИмяРеквизита = "ПартнерБизнесРегион" Тогда
					ПоляКлиент.Вставить("БизнесРегион"			,ПартнерБизнесРегион);
				ИначеЕсли Стр.ИмяРеквизита = "ПартнерНаименование" Тогда
					ПоляКлиент.Вставить("НаименованиеПолное"	,ПартнерНаименование);
					ПоляКлиент.Вставить("Наименование"			,ПартнерНаименование);
				ИначеЕсли Стр.ИмяРеквизита = "ПартнерВажность" Тогда
					ПоляКлиент.Вставить("CRM_Важность"			,ПартнерВажность);
				Иначе	
					ПоляКлиент.Вставить(Элементы[Стр.ИмяРеквизита].Заголовок,ЭтаФорма[Стр.ИмяРеквизита]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПолейКлиента.Вставить("КлючевыеПоля"	,ОсновныеПоляКлиент);
		СтруктураПолейКлиента.Вставить("Поля"			,ПоляКлиент);
		
	Иначе
		
		ОсновныеПоляКлиент.Вставить("Наименование"		,ПартнерНаименование);
		ОсновныеПоляКлиент.Вставить("БизнесРегион"		,ПартнерБизнесРегион);
		ОсновныеПоляКлиент.Вставить("CRM_ТипыОтношений"	,ПартнерCRM_ТипыОтношений);
		
		ПоляКлиент.Вставить("CRM_Важность"				,ПартнерВажность);
		ПоляКлиент.Вставить("НаименованиеПолное"		,ПартнерНаименование);
		
		СтруктураПолейКлиента.Вставить("КлючевыеПоля"	,ОсновныеПоляКлиент);
		СтруктураПолейКлиента.Вставить("Поля"			,ПоляКлиент);
		
	КонецЕсли;

	// ++ Харченко Д.И. №  - 11.09.2018 / 	

	Если ЗначениеЗаполнено(ПартнерТелефон) Тогда
		ДанныеКонтактнойИнформации.Вставить(ПартнерВидТелефона, ПолучитьДанныеПоШаблонуТелефон(ПартнерКодСтраны, ПартнерКодГорода, ПартнерТелефон, ПартнерДобНомер));
	КонецЕсли;

	Если ЗначениеЗаполнено(ПартнерВидEmail) И ЗначениеЗаполнено(ПартнерEmail) Тогда
		ДанныеКонтактнойИнформации.Вставить(ПартнерВидEmail, ПартнерEmail);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Партнер_ВидАдреса) И ЗначениеЗаполнено(Партнер_Адрес) Тогда
		ДанныеКонтактнойИнформации.Вставить(Партнер_ВидАдреса, Партнер_Адрес);
	КонецЕсли;

	СтруктураПолейКлиента.Вставить("КонтактнаяИнформация", ДанныеКонтактнойИнформации);
	// -- Харченко Д.И. №  - 11.09.2018

	СтруктураПолейКлиента.Вставить("ДополнительныеПоляПроверки",ДополнительныеПоляПроверки);
	ПоляОбъекта.Вставить("Клиент",СтруктураПолейКлиента);

#КонецОбласти

#Область ЮрЛицо
	
	// ЮрЛицо
	СтруктураПолейЮрЛицо 		= Новый Структура;
	ОсновныеПоляЮрЛицо			= Новый Структура;
	ПоляЮрЛицо					= Новый Структура;
	ДополнительныеПоляПроверки	= Новый Структура; 
	ДанныеКонтактнойИнформации	= Новый Соответствие;

	Если ТорговаяТочкаВид.ИспользоватьНастройкиДляФормы3в1 И ТорговаяТочкаВид.НастройкиЮрЛица Тогда
		
			// Обязательные поля заполненения	
		СтрокиОбязательногоЗаполнения = ПолучитьПоляОбъекта("РеквизитыДляКонтроляЗаполнененияЮрЛица",Новый Структура("ОбязателенДляЗаполнения",Истина));
		
		Для каждого Стр Из СтрокиОбязательногоЗаполнения Цикл
			Если НЕ Стр.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если СтрНайти(Стр.ИмяРеквизита,"Группа") = 0 Тогда
				Если Стр.ИмяРеквизита = "ЮрЛицоОрганизационноПравоваяФорма" Тогда
					ОсновныеПоляЮрЛицо.Вставить("ОрганизационноПравоваяФорма"	,ЮрЛицоОрганизационноПравоваяФорма);
				ИначеЕсли Стр.ИмяРеквизита = "ЮрЛицоНаименованиеПолное"  Тогда
					ОсновныеПоляЮрЛицо.Вставить("НаименованиеПолное"			,ЮрЛицоНаименованиеПолное);
					ОсновныеПоляЮрЛицо.Вставить("Наименование"					,ЮрЛицоНаименованиеПолное);
				Иначе	
					ОсновныеПоляЮрЛицо.Вставить(Элементы[Стр.ИмяРеквизита].Заголовок,ЭтаФорма[Стр.ИмяРеквизита]);
				КонецЕсли;
			ИначеЕсли Стр.ИмяРеквизита = "ГруппаИНН" Тогда
				ОсновныеПоляЮрЛицо.Вставить("CRM_ИНН"				,CRM_ИНН);
				ОсновныеПоляЮрЛицо.Вставить("CRM_КПП"				,CRM_КПП);
				ОсновныеПоляЮрЛицо.Вставить("КодПоОКПО"				,КодПоОКПО);
				Если Элементы.ГруппаИП.Видимость Тогда
					ОсновныеПоляЮрЛицо.Вставить("СвидетельствоСерия",ЮрЛицоСерия);
					ОсновныеПоляЮрЛицо.Вставить("СвидетельствоНомер",ЮрЛицоНомер);
					ОсновныеПоляЮрЛицо.Вставить("CRM_ОГРН"			,CRM_ОГРН);
				КонецЕсли;
			ИначеЕсли Стр.ИмяРеквизита = "ГруппаЮрЛицоАдрес" Тогда
				ДополнительныеПоляПроверки.Вставить("ЮрЛицо_Адрес",ЮрЛицо_Адрес);
			КонецЕсли;
		КонецЦикла;
		
		// Поля заполненения
		СтрокиПоляЗаполнения =  ПолучитьПоляОбъекта("РеквизитыДляКонтроляЗаполнененияЮрЛица",Новый Структура("ОбязателенДляЗаполнения",Ложь));
		
		Для каждого Стр Из СтрокиПоляЗаполнения Цикл
			Если НЕ Стр.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если СтрНайти(Стр.ИмяРеквизита,"Группа") = 0 Тогда
				Если Стр.ИмяРеквизита = "ЮрЛицоОрганизационноПравоваяФорма" Тогда
					ПоляЮрЛицо.Вставить("ОрганизационноПравоваяФорма"	,ЮрЛицоОрганизационноПравоваяФорма);
				ИначеЕсли Стр.ИмяРеквизита = "ЮрЛицоНаименованиеПолное"  Тогда
					ПоляЮрЛицо.Вставить("НаименованиеПолное"			,ЮрЛицоНаименованиеПолное);
					ПоляЮрЛицо.Вставить("Наименование"					,ЮрЛицоНаименованиеПолное);
				Иначе	
					ПоляЮрЛицо.Вставить(Элементы[Стр.ИмяРеквизита].Заголовок,ЭтаФорма[Стр.ИмяРеквизита]);
				КонецЕсли;
			ИначеЕсли Стр.ИмяРеквизита = "ГруппаИНН" Тогда
				ПоляЮрЛицо.Вставить("CRM_ИНН"	,CRM_ИНН);
				ПоляЮрЛицо.Вставить("CRM_КПП"	,CRM_КПП);
				ПоляЮрЛицо.Вставить("КодПоОКПО"	,КодПоОКПО);
				Если Элементы.ГруппаИП.Видимость Тогда
					ПоляЮрЛицо.Вставить("СвидетельствоСерия",ЮрЛицоСерия);
					ПоляЮрЛицо.Вставить("СвидетельствоНомер",ЮрЛицоНомер);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПолейЮрЛицо.Вставить("КлючевыеПоля",ОсновныеПоляЮрЛицо);
		СтруктураПолейЮрЛицо.Вставить("Поля"		,ПоляЮрЛицо);
		
	Иначе
		
		ОсновныеПоляЮрЛицо.Вставить("ОрганизационноПравоваяФорма",ЮрЛицоОрганизационноПравоваяФорма);
		ОсновныеПоляЮрЛицо.Вставить("НаименованиеПолное",ЮрЛицоНаименованиеПолное);
		
		ПоляЮрЛицо.Вставить("CRM_ИНН"			,CRM_ИНН);
		ПоляЮрЛицо.Вставить("CRM_КПП"			,CRM_КПП);
		ПоляЮрЛицо.Вставить("КодПоОКПО"			,КодПоОКПО);
		ПоляЮрЛицо.Вставить("СвидетельствоСерия",ЮрЛицоСерия);
		ПоляЮрЛицо.Вставить("СвидетельствоНомер",ЮрЛицоНомер);
		ПоляЮрЛицо.Вставить("Наименование"		,ЮрЛицоНаименованиеПолное);
		
		СтруктураПолейЮрЛицо.Вставить("КлючевыеПоля",ОсновныеПоляЮрЛицо);
		СтруктураПолейЮрЛицо.Вставить("Поля"		,ПоляЮрЛицо);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ЮрЛицо_ВидАдреса) И ЗначениеЗаполнено(ЮрЛицо_Адрес) Тогда
		ДанныеКонтактнойИнформации.Вставить(ЮрЛицо_ВидАдреса, ЮрЛицо_Адрес);
	КонецЕсли;
	
	СтруктураПолейЮрЛицо.Вставить("КонтактнаяИнформация", ДанныеКонтактнойИнформации);
	СтруктураПолейЮрЛицо.Вставить("ДополнительныеПоляПроверки",ДополнительныеПоляПроверки);
	ПоляОбъекта.Вставить("ЮрЛицо",СтруктураПолейЮрЛицо);
	
#КонецОбласти
	
	ИмяОписания = "CRM_ТаблицаКлассификаторов";
	Если CRM_КлассификаторыВызовСервера.РеквизитФормыСуществует(ЭтаФорма, ИмяОписания) Тогда
		ВыбранныеКлассификаторы = Новый Массив;
		Для Каждого Стр Из ЭтаФорма[ИмяОписания] Цикл
			Если Стр.Включен Тогда
				ВыбранныеКлассификаторы.Добавить(Стр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПоляОбъекта.Вставить("ВыбранныеКлассификаторы", ВыбранныеКлассификаторы);
	
	Возврат ПоляОбъекта;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполненнияПолей()

	ПоляОбъекта 			= ПолучитьПоляЗаписи();
	ПроверкаЗаполненения 	= Истина;
	
	// Проверка торговой точки
	МассивНеЗаполненыхРеквизитовТорговаяТочка 	= Новый Массив;
	КлючевыеПоляТорговаяТочка 					= ПоляОбъекта.ТорговаяТочка.КлючевыеПоля;
	ДополнительныеПоляПроверкиТорговаяТочка		= ПоляОбъекта.ТорговаяТочка.ДополнительныеПоляПроверки;
	
	Для каждого ПроверяемыйРеквизит Из КлючевыеПоляТорговаяТочка Цикл
		Если НЕ ЗначениеЗаполнено(ПроверяемыйРеквизит.Значение) Тогда
			МассивНеЗаполненыхРеквизитовТорговаяТочка.Добавить(ПроверяемыйРеквизит.Ключ);
			ПроверкаЗаполненения = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ПроверяемыйРеквизит Из ДополнительныеПоляПроверкиТорговаяТочка Цикл
		Если НЕ ЗначениеЗаполнено(ПроверяемыйРеквизит.Значение) Тогда
			МассивНеЗаполненыхРеквизитовТорговаяТочка.Добавить(ПроверяемыйРеквизит.Ключ);
			ПроверкаЗаполненения = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// ++ Харченко Д.И. №  - 10.09.2018 / 
//	Если Не ЗначениеЗаполнено(ТорговаяТочкаНаправлениеДеятельности) Тогда
	//	МассивНеЗаполненыхРеквизитовТорговаяТочка.Добавить("НаправлениеДеятельности");
	//	ПроверкаЗаполненения = Ложь;
	//КонецЕсли;
	// -- Харченко Д.И. №  - 10.09.2018
	
	СообщитьПользователюОбОшибке(МассивНеЗаполненыхРеквизитовТорговаяТочка,"ТорговаяТочка");
	
	// Проверка Контактное лицо 
	// ++ VOG Солодов В.В. 26.12.2019 CRM-77
	Если ВыборСозданиеКЛ = "Создать" Тогда
		// -- VOG Солодов В.В. 26.12.2019
		МассивНеЗаполненыхРеквизитовКонтатноеЛицо 	= Новый Массив;
		КлючевыеПоляКонтактноеЛицо 					= ПоляОбъекта.КонтактноеЛицо.КлючевыеПоля;
		ДополнительныеПоляПроверкиКонтактноеЛицо	= ПоляОбъекта.КонтактноеЛицо.ДополнительныеПоляПроверки;
		
		Для каждого ПроверяемыйРеквизит Из КлючевыеПоляКонтактноеЛицо Цикл
			Если НЕ ЗначениеЗаполнено(ПроверяемыйРеквизит.Значение) Тогда
				МассивНеЗаполненыхРеквизитовКонтатноеЛицо.Добавить(СтрЗаменить(ПроверяемыйРеквизит.Ключ,"CRM_",""));
				ПроверкаЗаполненения = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ПроверяемыйРеквизит Из ДополнительныеПоляПроверкиКонтактноеЛицо Цикл
			Если НЕ ЗначениеЗаполнено(ПроверяемыйРеквизит.Значение) Тогда
				МассивНеЗаполненыхРеквизитовКонтатноеЛицо.Добавить(СтрЗаменить(ПроверяемыйРеквизит.Ключ,"CRM_",""));
				ПроверкаЗаполненения = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		СообщитьПользователюОбОшибке(МассивНеЗаполненыхРеквизитовКонтатноеЛицо,"КонтактноеЛицо");
		// ++ VOG Солодов В.В. 26.12.2019 CRM-77
	КонецЕсли;
	// -- VOG Солодов В.В. 26.12.2019
	
	// Проверка клиент
	Если ТекущийРежимОтображения = "ТорговаяТочкаКлиент" ИЛИ ТекущийРежимОтображения = "ТорговаяТочкаКлиентЮрЛицо" Тогда
		
		МассивНеЗаполненыхРеквизитовКлиент 	= Новый Массив;
		КлючевыеПоляКлиент 					= ПоляОбъекта.Клиент.КлючевыеПоля;
		ДополнительныеПоляПроверкиПартнер	= ПоляОбъекта.Клиент.ДополнительныеПоляПроверки;
		
		Для каждого ПроверяемыйРеквизит Из КлючевыеПоляКлиент Цикл
			Если НЕ ЗначениеЗаполнено(ПроверяемыйРеквизит.Значение) Тогда
				МассивНеЗаполненыхРеквизитовКлиент.Добавить(ПроверяемыйРеквизит.Ключ);
				ПроверкаЗаполненения = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ПроверяемыйРеквизит Из ДополнительныеПоляПроверкиПартнер Цикл
			Если НЕ ЗначениеЗаполнено(ПроверяемыйРеквизит.Значение) Тогда
				МассивНеЗаполненыхРеквизитовКлиент.Добавить(ПроверяемыйРеквизит.Ключ);
				ПроверкаЗаполненения = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		СообщитьПользователюОбОшибке(МассивНеЗаполненыхРеквизитовКлиент,"Партнер");
		
	КонецЕсли;
	
	// Проверка юридическое лицо
	Если ТекущийРежимОтображения = "ТорговаяТочкаКлиентЮрЛицо" Тогда
		
		МассивНеЗаполненыхРеквизитовЮрЛицо 	= Новый Массив;
		КлючевыеПоляЮрЛицо 					= ПоляОбъекта.ЮрЛицо.КлючевыеПоля;
		ДополнительныеПоляПроверкиЮрЛицо	= ПоляОбъекта.ЮрЛицо.ДополнительныеПоляПроверки;
		
		// ++ Тищенко В.В. 24.01.2019
		// Если это ИП исключить из проверки ИНН и КПП
		Если ЭтаФорма.ЮрЛицоОрганизационноПравоваяФорма.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			КлючевыеПоляЮрЛицо.Удалить("CRM_ИНН");
			КлючевыеПоляЮрЛицо.Удалить("CRM_КПП");
			КлючевыеПоляЮрЛицо.Удалить("КодПоОКПО");
		КонецЕсли;
		
		// -- Тищенко В.В. 
		
		Для каждого ПроверяемыйРеквизит Из КлючевыеПоляЮрЛицо Цикл
			Если НЕ ЗначениеЗаполнено(ПроверяемыйРеквизит.Значение) Тогда
				МассивНеЗаполненыхРеквизитовЮрЛицо.Добавить(ПроверяемыйРеквизит.Ключ);
				ПроверкаЗаполненения = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ПроверяемыйРеквизит Из ДополнительныеПоляПроверкиЮрЛицо Цикл
			Если НЕ ЗначениеЗаполнено(ПроверяемыйРеквизит.Значение) Тогда
				МассивНеЗаполненыхРеквизитовЮрЛицо.Добавить(ПроверяемыйРеквизит.Ключ);
				ПроверкаЗаполненения = Ложь;
			КонецЕсли;
		КонецЦикла;

		СообщитьПользователюОбОшибке(МассивНеЗаполненыхРеквизитовЮрЛицо,"ЮрЛицо");
		
	КонецЕсли;
	
 Возврат ПроверкаЗаполненения;
	
КонецФункции

&НаСервере
Процедура СоздатьЭлементыСервер(Закрывать = Ложь)

	// Проверка точки
	Если ЗначениеЗаполнено(ТорговаяТочкаКлиент) Тогда	
		Если ТорговаяТочкаВид.ПроверитьТочкуУКлиента Тогда
			
			// ++ VOG Ульянов И.В. 09.01.2019 CRM-97
			УстановитьПривилегированныйРежим(Истина);
			// -- VOG Ульянов И.В. 09.01.2019 CRM-97
			
			Запрос = Новый Запрос("Выбрать Ссылка Из Справочник.вогТорговыеТочки КАК Спр Где Партнер = &Партнер И Вид = &Вид");
			Запрос.УстановитьПараметр("Партнер",ТорговаяТочкаКлиент);
			Запрос.УстановитьПараметр("Вид",ТорговаяТочкаВид);
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				ТекстСообщения = НСтр("ru = 'Невозможно создать торговую точку. Торговая точка уже существует с таким видом %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ТорговаяТочкаВид);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;	
			
			// ++ VOG Ульянов И.В. 09.01.2019 CRM-97
			УстановитьПривилегированныйРежим(Ложь);
			// -- VOG Ульянов И.В. 09.01.2019 CRM-97
			
		КонецЕсли;
	КонецЕсли;
	
	СозданныеОбъекты.Очистить();
	ПоляОбъекта 	= ПолучитьПоляЗаписи();
	Клиент			= Неопределено;
	
	// + Тищенко В.В.
	// Данный функционал перенесен на сторону клиента
	// СоздатьАнкетуКлиент
	
	//Если ТорговаяТочкаВид.СоздаватьАнкетуВместоОбъектов Тогда
	//	
	//	СоздатьАнкету(ТорговаяТочкаВид.ВариантОпроса, ПоляОбъекта, Закрывать);
	//	
	//	Возврат;
	//КонецЕсли;
	
	// - Тищенко В.В.
	
	// { VOG RMV 2019-02-14
	РеквизитыДопПользователи = Новый Структура("ОтветственныйМенеджер, ОтветственныйКоординатор");
	ДопПользователи = Новый Массив;
	Для каждого ОписаниеРеквизита Из РеквизитыДопПользователи Цикл	
		ЗначениеДопРеквизита = ЭтаФорма[ОписаниеРеквизита.Ключ];
		Если ЗначениеЗаполнено(ЗначениеДопРеквизита) И ЗначениеДопРеквизита <> ТекущийПользователь Тогда
			ДопПользователи.Добавить(ЗначениеДопРеквизита);
		КонецЕсли;
	КонецЦикла;
	// } VOG RMV 2019-02-14	
	
	Попытка
		
		НачатьТранзакцию();
		
		// Начало Клиент и Юр лицо
		
		Если ТекущийРежимОтображения = "ТорговаяТочкаКлиент" Тогда
			
			ОсновныеПоляКлиент	= ПоляОбъекта.Клиент.КлючевыеПоля;
			ПоляКлиент			= ПоляОбъекта.Клиент.Поля;
			
			ОбъектКлиент 		= Справочники.Партнеры.СоздатьЭлемент();
			
			ОсновныеПоляКлиент.Удалить("CRM_ТипыОтношений");
			
			Для каждого ОснРеквизит Из ОсновныеПоляКлиент Цикл
				ОбъектКлиент[ОснРеквизит.Ключ] = ОснРеквизит.Значение;
			КонецЦикла;
			
			Для каждого ПолеКлиент Из ПоляКлиент Цикл
				ОбъектКлиент[ПолеКлиент.Ключ] = ПолеКлиент.Значение;
			КонецЦикла;
			
			ЗаполнитьТелефонОбъекта("Партнер"	, ОбъектКлиент.КонтактнаяИнформация);
			ЗаполнитьEmailОбъекта("Партнер"		, ОбъектКлиент.КонтактнаяИнформация);
			ЗаполнитьАдресОбъекта("Партнер"		, ОбъектКлиент);
			ЗаполнитьВебСайтОбъекта("Партнер"	, ОбъектКлиент.КонтактнаяИнформация);
			ОбъектКлиент.ЮрФизЛицо	= Перечисления.КомпанияЧастноеЛицо.Компания;
			вогЗаписатьВсеТипыОтношений(ОбъектКлиент);

			ОбъектКлиент.Записать();
			Клиент = ОбъектКлиент.Ссылка;
			СозданныеОбъекты.Добавить(Клиент,Строка(Клиент) +" "+ "(Партнер)" , ,БиблиотекаКартинок.Справочник);			
			
		ИначеЕсли ТекущийРежимОтображения = "ТорговаяТочкаКлиентЮрЛицо" Тогда
			
			// Клиент
			ОсновныеПоляКлиент	= ПоляОбъекта.Клиент.КлючевыеПоля;
			ПоляКлиент			= ПоляОбъекта.Клиент.Поля;
			
			ОбъектКлиент 		= Справочники.Партнеры.СоздатьЭлемент();
			
			ОсновныеПоляКлиент.Удалить("CRM_ТипыОтношений");
			
			Для каждого ОснРеквизит Из ОсновныеПоляКлиент Цикл
				ОбъектКлиент[ОснРеквизит.Ключ] = ОснРеквизит.Значение;
			КонецЦикла;
			
			Для каждого ПолеКлиент Из ПоляКлиент Цикл
				ОбъектКлиент[ПолеКлиент.Ключ] = ПолеКлиент.Значение;
			КонецЦикла;
			
			ЗаполнитьТелефонОбъекта("Партнер"	, ОбъектКлиент.КонтактнаяИнформация);
			ЗаполнитьEmailОбъекта("Партнер"		, ОбъектКлиент.КонтактнаяИнформация);
			ЗаполнитьАдресОбъекта("Партнер"		, ОбъектКлиент);
			ЗаполнитьВебСайтОбъекта("Партнер"	, ОбъектКлиент.КонтактнаяИнформация);
			ОбъектКлиент.ЮрФизЛицо	= Перечисления.КомпанияЧастноеЛицо.Компания;
			вогЗаписатьВсеТипыОтношений(ОбъектКлиент);
			
			// Подразделение
			Если ЗначениеЗаполнено(ТекущиеПодразделенияПользователя) Тогда
				ОбъектКлиент.вогПодразделения.Добавить().Подразделение = ТекущиеПодразделенияПользователя;
			КонецЕсли;
			
			ОбъектКлиент.Записать();
			Клиент = ОбъектКлиент.Ссылка;
			СозданныеОбъекты.Добавить(Клиент,Строка(Клиент) +" "+ "(Партнер)" , ,БиблиотекаКартинок.Справочник);
			
			// Юр лицо
			ОсновныеПоляЮрлицо	= ПоляОбъекта.ЮрЛицо.КлючевыеПоля;
			ПоляЮрЛицо			= ПоляОбъекта.ЮрЛицо.Поля;
			
			ОбъектЮрЛицо 		= Справочники.вогЮридическиеЛица.СоздатьЭлемент();
			
			Для каждого ОснРеквизит Из ОсновныеПоляЮрлицо Цикл
				ОбъектЮрЛицо[ОснРеквизит.Ключ] = ОснРеквизит.Значение;
			КонецЦикла;
			
			Для каждого ПолеЮрЛица Из ПоляЮрЛицо Цикл
				ОбъектЮрЛицо[ПолеЮрЛица.Ключ] = ПолеЮрЛица.Значение;
			КонецЦикла;
			
			ОбъектЮрЛицо.Партнер= Клиент;
			ЗаполнитьАдресОбъекта("ЮрЛицо", ОбъектЮрЛицо);
			ОбъектЮрЛицо.ДополнительныеСвойства.Вставить("ПартнерСвязи", Клиент);
			
			// Подразделение
			Если ЗначениеЗаполнено(ТекущиеПодразделенияПользователя) Тогда
				ОбъектЮрЛицо.Подразделения.Добавить().Подразделение = ТекущиеПодразделенияПользователя;
			КонецЕсли;

			ОбъектЮрЛицо.Записать();
			ЮриЛицо = ОбъектЮрЛицо.Ссылка;
			СозданныеОбъекты.Добавить(ЮриЛицо,Строка(ЮриЛицо) +" "+"(ЮрЛицо)", ,БиблиотекаКартинок.Справочник);
			
		КонецЕсли;
		
		// Конец Клиент и Юр лицо
		
		// Начало Торговая точка
		
		ОсновныеПоляТорговыеТочки	= ПоляОбъекта.ТорговаяТочка.КлючевыеПоля;
		ПоляТорговойТочки			= ПоляОбъекта.ТорговаяТочка.Поля;
		
		ОбъектТорговаяТочка 		= Справочники.вогТорговыеТочки.СоздатьЭлемент();
		
		Для каждого ОснРеквизит Из ОсновныеПоляТорговыеТочки Цикл
			ОбъектТорговаяТочка[ОснРеквизит.Ключ] = ОснРеквизит.Значение;
		КонецЦикла;
		
		Для каждого ПолеТорговойТочки Из ПоляТорговойТочки Цикл
			ОбъектТорговаяТочка[ПолеТорговойТочки.Ключ] = ПолеТорговойТочки.Значение;
		КонецЦикла;
		
		Если ПоляОбъекта.ТорговаяТочка.ТабличныеЧасти.Направления.Количество() <> 0 Тогда
			Для каждого Стр Из ПоляОбъекта.ТорговаяТочка.ТабличныеЧасти.Направления Цикл
				СтрокаДобавленияНаправления 			= ОбъектТорговаяТочка.Направления.Добавить();
				СтрокаДобавленияНаправления.Направление = Стр.Направление;
			КонецЦикла;
		КонецЕсли;
		
		ЗаполнитьТелефонОбъекта("ТорговаяТочка"				,ОбъектТорговаяТочка.КонтактнаяИнформация);
		ЗаполнитьАдресОбъекта("ТорговаяТочка"				,ОбъектТорговаяТочка);
		ЗаполнитьВебСайтОбъекта("ТорговаяТочка"				,ОбъектТорговаяТочка.КонтактнаяИнформация);
		ЗаполнитьАдресПервичнаяДокументация(ОбъектТорговаяТочка);

		//*** Описание
		//*** 16 апреля 2019 г.
		//*** Блашин Евгений Игоревич VOG Начало
		АдресСтрокаКИ = ОбъектТорговаяТочка.КонтактнаяИнформация.Найти(ЭтотОбъект["ТорговаяТочка_ВидАдреса"]);
		Если НЕ АдресСтрокаКИ = Неопределено Тогда
			Если АдресСтрокаКИ.Вид.вогВводитьАдресЯндексом Тогда
				НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Вид",АдресСтрокаКИ.Вид));
				
				Если НайденныеСтроки.Количество() Тогда
					ЗаполнитьЗначенияСвойств(АдресСтрокаКИ,НайденныеСтроки[0],"Широта,Долгота");
				КонецЕсли; 
				
			КонецЕсли; 	
		КонецЕсли;
		//*** Блашин Евгений Игоревич VOG Окончание 
				
		Если Клиент <> Неопределено Тогда
			ОбъектТорговаяТочка.БизнесРегион 	= Клиент.БизнесРегион;
			ОбъектТорговаяТочка.Партнер 		= Клиент;
		КонецЕсли;
		
		// Подразделение
		Если ЗначениеЗаполнено(ТекущиеПодразделенияПользователя) Тогда
			ОбъектТорговаяТочка.Подразделения.Добавить().Подразделение = ТекущиеПодразделенияПользователя;
		КонецЕсли;
		
		// ++ VOG Солодов В.В. 24.06.2019 task 418
		ОбъектТорговаяТочка.ДополнительныеСвойства.Вставить("Форма3В1", Истина);
		
		Если ЗначениеЗаполнено(ОтветственныйМенеджер) 
			И ОтветственныйМенеджер <> ТекущийПользователь
			И ЗначениеЗаполнено(ОтветственныйКоординатор)
			И ОтветственныйКоординатор <> ТекущийПользователь Тогда
			
			СтруктураОтветственных = Новый Структура;
			СтруктураОтветственных.Вставить("ОтветственныйМенеджер", ОтветственныйМенеджер);
			
			ОбъектТорговаяТочка.ДополнительныеСвойства.Вставить("СтруктураОтветственных", СтруктураОтветственных);
			
		КонецЕсли;
		// -- VOG Солодов В.В. 24.06.2019
		
		// ++ VOG Солодов В.В. 14.01.2020 CRM-50
		Попытка
			Справочники.вогНаселенныеПункты.ЗаполнитьНаселенныйПунктВОбъектеПоВидуКонтактнойИнформации(
				ОбъектТорговаяТочка,
				Справочники.ВидыКонтактнойИнформации.Месторасположение);
		Исключение
			
		КонецПопытки;
		// -- VOG Солодов В.В. 14.01.2020
		
		Попытка		
			ОбъектТорговаяТочка.ФорматТРТ = ЭтаФорма.CRM_Классификатор47b0ee76_ada2_11e7_80ce_08606e7382bc; //VOG Ульянов И.В. CRM-873
		Исключение
		КонецПопытки;	
		
		ОбъектТорговаяТочка.Записать();
		
		// Дополнительная проверка
		Если ОбъектТорговаяТочка.ДополнительныеСвойства.Свойство("ЭтоНовый") тогда
			ОбъектТорговаяТочка.ДополнительныеСвойства.ЭтоНовый = Ложь;
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
		
		// + Классификаторы на форме запись
		CRM_КлассификаторыВызовСервера.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, ОбъектТорговаяТочка);
		// - Классификаторы на форме запись
		
		Если ОбъектТорговаяТочка.ДополнительныеСвойства.Свойство("ЭтоНовый") тогда
			ОбъектТорговаяТочка.ДополнительныеСвойства.ЭтоНовый = Истина;
			ЭтаФорма.Модифицированность = Ложь;
		КонецЕсли;
		
		ТорговаяТочка = ОбъектТорговаяТочка.Ссылка;
		СозданныеОбъекты.Добавить(ТорговаяТочка,Строка(ТорговаяТочка) +" "+"(Торговая точка)" , ,БиблиотекаКартинок.Справочник);
		
		// Конец Торговая точка
		
		// Начало Контактные лица
		
		ОсновныеПоляКонтактноеЛицо	= ПоляОбъекта.КонтактноеЛицо.КлючевыеПоля;
		ПоляКонтактноеЛицо			= ПоляОбъекта.КонтактноеЛицо.Поля;
		ЗаполненостьКонтактноеЛицо	= Ложь;

		Для каждого ТекРеквизитКонтактноеЛицо Из ПоляОбъекта.КонтактноеЛицо.Поля Цикл
//START Кайдашов 15/08/19 bugs 573			
			Если ЗначениеЗаполнено(ТекРеквизитКонтактноеЛицо.Значение) и ТипЗнч(ТекРеквизитКонтактноеЛицо.Значение)<>Тип("Булево") Тогда
//END Кайдашов
				ЗаполненостьКонтактноеЛицо = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполненостьКонтактноеЛицо 
			И ВыборСозданиеКЛ = "Создать" Тогда // ++ VOG Солодов В.В. 13.01.2020 CRM-77
			
			ОбъектКонтактноеЛицо 		= Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
			
			Для каждого ОснРеквизит Из ОсновныеПоляКонтактноеЛицо Цикл
				ОбъектКонтактноеЛицо[ОснРеквизит.Ключ] = ОснРеквизит.Значение;
			КонецЦикла;
			
			Для каждого ПолеКонтактноеЛицо Из ПоляКонтактноеЛицо Цикл
				ОбъектКонтактноеЛицо[ПолеКонтактноеЛицо.Ключ] = ПолеКонтактноеЛицо.Значение;
			КонецЦикла;
			
			ОбъектКонтактноеЛицо.CRM_НапоминатьОДнеРождения		= Истина;
			ОбъектКонтактноеЛицо.ДатаРегистрацииСвязи			= ТекущаяДата();
			//ОбъектКонтактноеЛицо.Владелец						= ТорговаяТочка;
			// ++ VOG Солодов В.В. 26.07.2019 task 479
			ОбъектКонтактноеЛицо.вогСобственник 				= КонтактноеЛицоСобственник;
			// -- VOG Солодов В.В. 26.07.2019
			
			ОбъектКонтактноеЛицо.Наименование = СокрЛП(?(ЗначениеЗаполнено(ОбъектКонтактноеЛицо.CRM_Фамилия),   СокрЛП(ОбъектКонтактноеЛицо.CRM_Фамилия) + " ", "")
			+ ?(ЗначениеЗаполнено(ОбъектКонтактноеЛицо.CRM_Имя), СокрЛП(ОбъектКонтактноеЛицо.CRM_Имя) + " ", "")
			+ ?(ЗначениеЗаполнено(ОбъектКонтактноеЛицо.CRM_Отчество), СокрЛП(ОбъектКонтактноеЛицо.CRM_Отчество), ""));
			
			ЗаполнитьТелефонОбъекта("КонтактноеЛицо", ОбъектКонтактноеЛицо.КонтактнаяИнформация);
			ЗаполнитьEmailОбъекта("КонтактноеЛицо"	, ОбъектКонтактноеЛицо.КонтактнаяИнформация);
			
			Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
				ДанныеСвязи = Новый Структура;
				ДанныеСвязи.Вставить("CRM_Состояние"			, Перечисления.CRM_Состояние.Работает);
				ДанныеСвязи.Вставить("CRM_Должность"			, ОбъектКонтактноеЛицо.CRM_Должность);				
				// { VOG RMV 2019-02-15
				//ДанныеСвязи.Вставить("CRM_РольКонтактногоЛица"	, Неопределено);
				ДанныеСвязи.Вставить("CRM_РольКонтактногоЛица"	, ОбъектКонтактноеЛицо.CRM_РольКонтактногоЛица);
				// } VOG RMV 2019-02-15
				// ++ VOG Солодов В.В. 26.07.2019 task 479
				ДанныеСвязи.Вставить("Собственник"	, ОбъектКонтактноеЛицо.вогСобственник);
				// -- VOG Солодов В.В. 26.07.2019
				ОбъектКонтактноеЛицо.ДополнительныеСвойства.Вставить("ДанныеСвязи", ДанныеСвязи);
				ОбъектКонтактноеЛицо.ДополнительныеСвойства.Вставить("ОбъектСвязи", ТорговаяТочка);
			КонецЕсли;
			
			// Определить пол Контактного лица
			ОбъектКонтактноеЛицо.Пол = вогОбщегоНазначенияКлиентСервер.ОпределитьПол(ОбъектКонтактноеЛицо.CRM_Имя);
			ОбъектКонтактноеЛицо.ДополнительныеСвойства.Вставить("НеПроверятьДополнительныеПоля",Истина);
			
			// Проверка заполнения контактного лица
			Если НЕ ОбъектКонтактноеЛицо.ПроверитьЗаполнение() Тогда
				ОтменитьТранзакцию();
				СозданныеОбъекты.Очистить();
				Возврат;
			КонецЕсли;
			
			ОбъектКонтактноеЛицо.Записать();
			КонтактноеЛицо = ОбъектКонтактноеЛицо.Ссылка;
			СозданныеОбъекты.Добавить(КонтактноеЛицо,Строка(КонтактноеЛицо) +" "+"(Контактное лицо)" , ,БиблиотекаКартинок.Справочник);
			
		// ++ VOG Солодов В.В. 26.12.2019 CRM-77
		ИначеЕсли ВыборСозданиеКЛ = "Выбрать"
			И ЗначениеЗаполнено(КонтактноеЛицоСсылка)
			И ЗначениеЗаполнено(ТорговаяТочка) Тогда
			
			ДанныеСвязи = Новый Структура;
			ДанныеСвязи.Вставить("CRM_Состояние", 				Перечисления.CRM_Состояние.Работает);
			ДанныеСвязи.Вставить("CRM_Должность", 				КонтактноеЛицоДолжность);
			ДанныеСвязи.Вставить("CRM_РольКонтактногоЛица", 	КонтактноеЛицоРоль);
			ДанныеСвязи.Вставить("Собственник", 				КонтактноеЛицоСобственник);
			
			вогУправлениеСвязями.УстановитьСвязьОбъекта(КонтактноеЛицоСсылка, ТорговаяТочка, ДанныеСвязи);
			
		// -- VOG Солодов В.В. 26.12.2019
		КонецЕсли;
		
		// Конец Контактные лица
		
		//+Классификаторы
		Если СозданныеОбъекты.Количество() <> 0 И ТорговаяТочкаВид.ИспользоватьКлассификаторы Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	вогВидыТорговыхТочекКлассификаторы.Классификатор КАК Классификатор,
			|	вогВидыТорговыхТочекКлассификаторы.Принадлежность КАК Принадлежность,
			|	вогВидыТорговыхТочекКлассификаторы.ЗначениеКлассификатора КАК ЗначениеКлассификатора,
			|	вогВидыТорговыхТочекКлассификаторы.ЗначениеРеквизита КАК ЗначениеРеквизита
			|ИЗ
			|	РегистрСведений.вогВидыТорговыхТочекКлассификаторы КАК вогВидыТорговыхТочекКлассификаторы
			|ГДЕ
			|	вогВидыТорговыхТочекКлассификаторы.ВидТорговойТочки = &ВидТорговойТочки
			|	И НЕ вогВидыТорговыхТочекКлассификаторы.РучноеЗаполнение");
			Запрос.УстановитьПараметр("ВидТорговойТочки",ТорговаяТочкаВид);
			ТаблицаПриЗаписиКлассификаторы 	= Запрос.Выполнить().Выгрузить();
			Для каждого Стр Из ТаблицаПриЗаписиКлассификаторы Цикл
				
				СсылкаНаОбъект = Неопределено;
				Для каждого ЭлементСписка Из СозданныеОбъекты Цикл
					ТекущиеИмяТаблицы 		= ОбщегоНазначения.ИмяТаблицыПоСсылке(ЭлементСписка.Значение);
					Если Стр.Принадлежность = ТекущиеИмяТаблицы Тогда
						СсылкаНаОбъект 		= ЭлементСписка.Значение;
					КонецЕсли;
				КонецЦикла;
				
				Если СсылкаНаОбъект <> Неопределено Тогда
					МенеджерЗаписи 							= РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Объект 					= СсылкаНаОбъект;
					МенеджерЗаписи.Аналитика 				= Стр.Классификатор.ИспользуемаяАналитика;
					МенеджерЗаписи.ЗначениеКлассификатора 	= Стр.ЗначениеКлассификатора;
					Если ЗначениеЗаполнено(Стр.ЗначениеРеквизита) Тогда
						МенеджерЗаписи.ЗначениеРеквизита	= Стр.ЗначениеРеквизита;
					КонецЕсли;
					МенеджерЗаписи.ДатаВключения			= ТекущаяДата();
					МенеджерЗаписи.Записать();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		//-Классификаторы
		
		ЗафиксироватьТранзакцию();
		
		// { VOG RMV 2019-02-14
		Для каждого ЭлементСписка Из СозданныеОбъекты Цикл
			Для каждого ДопПользователь Из ДопПользователи Цикл
				ДобавитьЗаписьРСМенеджерыОбъектов(ЭлементСписка.Значение, ДопПользователь);
			КонецЦикла;		
		КонецЦикла;		
		// } VOG RMV 2019-02-14
				
	Исключение
		
		ТекстОписаниеОшибки = "" + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Быстрая форма ввода Торговая точка'"), УровеньЖурналаРегистрации.Ошибка,,,ТекстОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОписаниеОшибки);
		ОтменитьТранзакцию();
		
	КонецПопытки;	

КонецПроцедуры

#Область ЗаполнениеКонтактнаяИнформация

&НаСервере
Процедура ЗаполнитьТелефонОбъекта(ИмяОбъекта, КонтактнаяИнформация)

	ВидТелефона = ЭтотОбъект[ИмяОбъекта + "ВидТелефона"];	
	КодСтраны   = ЭтотОбъект[ИмяОбъекта + "КодСтраны"];	
	КодГорода   = ЭтотОбъект[ИмяОбъекта + "КодГорода"];	
	ДобНомер    = ЭтотОбъект[ИмяОбъекта + "ДобНомер"];
	Телефон     = ЭтотОбъект[ИмяОбъекта + "Телефон"];
	
	Если ЗначениеЗаполнено(ВидТелефона) 
	  И ЗначениеЗаполнено(Телефон) Тогда
		Если НЕ ПустаяСтрока(КодСтраны) И (Найти(КодСтраны, "+") = 0) Тогда
			КодСтраныСтрока = "+" + КодСтраны;
		Иначе
			КодСтраныСтрока = КодСтраны;
		КонецЕсли;	
		
		СписокПолей = Новый СписокЗначений;
		СписокПолей.Добавить(КодСтраныСтрока,   "КодСтраны");
		СписокПолей.Добавить(КодГорода,     	"КодГорода");
		СписокПолей.Добавить(Телефон, 			"НомерТелефона");
		СписокПолей.Добавить(ДобНомер,    		"Добавочный");
		СписокПолей.Добавить("",   				"Комментарий");
		
		НовыйКонтакт			   = КонтактнаяИнформация.Добавить();
		НовыйКонтакт.ЗначенияПолей = ПреобразоватьСписокПолейВСтроку(СписокПолей);
		НовыйКонтакт.Вид		   = ВидТелефона;
		НовыйКонтакт.Тип		   = Перечисления.ТипыКонтактнойИнформации.Телефон;
		
		Представление = СокрЛП(КодСтраныСтрока);
		Если Не ПустаяСтрока(КодГорода) Тогда
			Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КодГорода) + ")";
		КонецЕсли;
		
		Если Не ПустаяСтрока(Телефон) Тогда
			Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(Телефон);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ДобНомер) Тогда
			Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(ДобНомер);
		КонецЕсли;
		
		НовыйКонтакт.Представление 			= Представление;
		НовыйКонтакт.НомерТелефона 			= Представление;
		НовыйКонтакт.НомерТелефонаБезКодов 	= СокрЛП(Телефон);
		НовыйКонтакт.CRM_ОсновнойДляСвязи	= Истина;		
		
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьАдресОбъекта(ИмяОбъекта, НовыйОбъект)

	// { VOG RMV 2019-03-05 task 183
	//Если ИмяОбъекта = "ТорговаяТочка" Тогда
	//	

	//	Если ТорговаяТочкаВариантАдреса = "Адрес" Тогда
	//		ВидАдреса = ЭтотОбъект["ТорговаяТочка_ВидАдреса"];	
	//		Адрес     = ЭтотОбъект["ТорговаяТочка_Адрес"];		
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//Иначе	
	//	ВидАдреса = ЭтотОбъект[ИмяОбъекта + "_ВидАдреса"];	
	//	Адрес     = ЭтотОбъект[ИмяОбъекта + "_Адрес"];	
	//	
	//КонецЕсли;
	ВидАдреса = ЭтотОбъект[ИмяОбъекта + "_ВидАдреса"];	
	Адрес     = ЭтотОбъект[ИмяОбъекта + "_Адрес"];	
	// } VOG RMV 2019-03-05 task 183
	         
	Если ЗначениеЗаполнено(ВидАдреса) 
	  И ЗначениеЗаполнено(Адрес) Тогда 
	  	СтрокиКИ = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяОбъекта + "_Адрес"));
		Для Каждого СтрокаКИ Из СтрокиКИ Цикл
			// ++ VOG Солодов В.В. 21.05.2020 CRM-626
			ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			// До изменения
			//ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.ЗначенияПолей);
			// -- VOG Солодов В.В. 21.05.2020
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовыйОбъект, ДанныеКИ, ВидАдреса, Перечисления.ТипыКонтактнойИнформации.Адрес);	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

// ++ Тищенко В.В.
&НаСервере
Процедура ЗаполнитьАдресПервичнаяДокументация(НовыйОбъект)
	
	ВидАдреса 	= Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки;	
	Адрес		= ТорговаяТочка_АдресПервичнойДокументации;	
	
	Если ЗначениеЗаполнено(ВидАдреса) 
		И ЗначениеЗаполнено(Адрес) Тогда 
		СтрокиКИ = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита","ТорговаяТочка_АдресПервичнойДокументации"));
		Для Каждого СтрокаКИ Из СтрокиКИ Цикл
			// ++ VOG Солодов В.В. 21.05.2020 CRM-626
			ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.Значение);
			// До изменения
			//ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.ЗначенияПолей);
			// -- VOG Солодов В.В. 21.05.2020
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовыйОбъект, ДанныеКИ, ВидАдреса, Перечисления.ТипыКонтактнойИнформации.Адрес);
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры // -- Тищенко В.В.

&НаСервереБезКонтекста
Функция ПреобразоватьСписокПолейВСтроку(СоответствиеПолей)
	
	Результат = "";
	Для Каждого Элемент Из СоответствиеПолей Цикл
		
		Значение = Элемент.Значение;
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + ?(Результат = "", "", Символы.ПС) + 
			Элемент.Представление + "=" + СтрЗаменить(Значение, Символы.ПС, Символы.ПС + Символы.Таб);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьEmailОбъекта(ИмяОбъекта, КонтактнаяИнформация)

	ВидEmail = ЭтотОбъект[ИмяОбъекта + "ВидEmail"];	
	Email    = ЭтотОбъект[ИмяОбъекта + "Email"];	
	
	Если ЗначениеЗаполнено(ВидEmail) 
	  И ЗначениеЗаполнено(Email) Тогда
		Попытка
			Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Email);
		Исключение
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			Возврат;
			
		КонецПопытки;
		
		Если Результат.Количество() > 0 Тогда
			НовыйКонтакт 						= КонтактнаяИнформация.Добавить();
			НовыйКонтакт.Вид					= ВидEmail;
			НовыйКонтакт.Тип					= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НовыйКонтакт.Представление 			= СокрЛП(Email);
			НовыйКонтакт.CRM_ОсновнойДляСвязи	= Истина;
			НовыйКонтакт.АдресЭП 				= Результат[0].Адрес;
			
			Поз = Найти(НовыйКонтакт.АдресЭП, "@");
			Если Поз <> 0 Тогда
				НовыйКонтакт.ДоменноеИмяСервера = Сред(НовыйКонтакт.АдресЭП, Поз+1);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВебСайтОбъекта(ИмяОбъекта, КонтактнаяИнформация)

	ВидСайта 	= ЭтотОбъект[ИмяОбъекта + 	"ВидСайта"];
	Сайт		= ЭтотОбъект[ИмяОбъекта + 	"ВебСайт"];
	
	Если ЗначениеЗаполнено(ВидСайта) И ЗначениеЗаполнено(Сайт) Тогда
		НовыйКонтакт 						= КонтактнаяИнформация.Добавить();
		НовыйКонтакт.Вид					= ВидСайта;
		НовыйКонтакт.Тип					= Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
		КонтактнаяИнформацияXDTO 			= УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Сайт, ВидСайта);
		ЗначенияПолей 						= УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(КонтактнаяИнформацияXDTO);
		Представление 						= СокрЛП(Сайт);
		НовыйКонтакт.ЗначенияПолей			= ЗначенияПолей;
		НовыйКонтакт.Представление 			= Представление;
		НовыйКонтакт.CRM_ОсновнойДляСвязи	= Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеПоШаблонуТелефон(КодСтраны, КодГорода, Телефон, ДобНомер)
	
	ДобавочныйТекст = ?(ЗначениеЗаполнено(СокрЛП(ДобНомер)), ", доб. " + СокрЛП(ДобНомер), "");
	
	 Возврат СтрШаблон("+%1 (%2) %3%4", СокрЛП(КодСтраны), СокрЛП(КодГорода), СокрЛП(Телефон), ДобавочныйТекст);
	 
КонецФункции

#КонецОбласти

&НаСервере
Функция ПолучитьПоляОбъекта(Таблица,ОтборСтрок)
	Возврат ТорговаяТочкаВид[Таблица].НайтиСтроки(ОтборСтрок);
КонецФункции

// - Тищенко В.В.

#КонецОбласти

#Область Геокодирование

Функция ПолучитьРынокПоКоординатам(Местоположени, Широта, Долгота)
	
	// ++ VOG Солодов В.В. 21.05.2020 CRM-653
	РынокПоКоординатам = Неопределено;
	
	ПоискПоАдресу = ПолучитьРынкиПоАдресу(Местоположени);
	
	Если ЗначениеЗаполнено(ПоискПоАдресу) Тогда
		РынокПоКоординатам = ПоискПоАдресу;
	Иначе
		
		ТаблицаТочек = вогГеокодированиеСервер.ПолучитьТаблицуАдресовДляПроверкиПересечений();
		
		Если ЗначениеЗаполнено(Широта) И ЗначениеЗаполнено(Долгота) Тогда
			
			НоваяСтрока 		= ТаблицаТочек.Добавить();
			НоваяСтрока.Точка 	= Местоположени; 
			НоваяСтрока.У 		= Долгота;
			НоваяСтрока.Х 		= Широта; 
			
		КонецЕсли;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.вогРынки"));
		
		ТаблицаПересечений = вогГеокодированиеСервер.ПолучитьВхожденияВПолигоны(ТаблицаТочек, МассивТипов);
		
		Если ТаблицаПересечений.Количество() Тогда
			
			СтрокаПересечения = ТаблицаПересечений.Получить(0);
			РынокПоКоординатам = СтрокаПересечения.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТорговаяТочкаМестоположениеНаРынке",
		"ОтметкаНезаполненного",
		(ЗначениеЗаполнено(РынокПоКоординатам) И Не ЗначениеЗаполнено(ТорговаяТочкаМестоположениеНаРынке)));
	
	Возврат РынокПоКоординатам;
	// До изменения
	//ПоискПоАдресу = ПолучитьРынкиПоАдресу(Местоположени);
	//
	//Если ЗначениеЗаполнено(ПоискПоАдресу) Тогда
	//	Возврат ПоискПоАдресу;
	//КонецЕсли;
	//
	//ТаблицаТочек = вогГеокодированиеСервер.ПолучитьТаблицуАдресовДляПроверкиПересечений();
	//
	//Если ЗначениеЗаполнено(Широта) И ЗначениеЗаполнено(Долгота) Тогда
	//	
	//	НоваяСтрока 		= ТаблицаТочек.Добавить();
	//	НоваяСтрока.Точка 	= Местоположени; 
	//	НоваяСтрока.У 		= Долгота;
	//	НоваяСтрока.Х 		= Широта; 
	//	
	//КонецЕсли;
	//
	//МассивТипов = Новый Массив;
	//МассивТипов.Добавить(Тип("СправочникСсылка.вогРынки"));
	//
	//ТаблицаПересечений = вогГеокодированиеСервер.ПолучитьВхожденияВПолигоны(ТаблицаТочек, МассивТипов);
	//
	//Если ТаблицаПересечений.Количество() Тогда
	//	
	//	СтрокаПересечения = ТаблицаПересечений.Получить(0);
	//	Возврат СтрокаПересечения.Ссылка;
	//	
	//КонецЕсли;
	//
	//Возврат Неопределено;
	// -- VOG Солодов В.В. 21.05.2020
	
КонецФункции

Функция ПолучитьРынкиПоАдресу(Адрес) 
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогРынкиКонтактнаяИнформация.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогРынки.КонтактнаяИнформация КАК вогРынкиКонтактнаяИнформация
		|ГДЕ
		|	вогРынкиКонтактнаяИнформация.Представление = &Представление
		|	И НЕ вогРынкиКонтактнаяИнформация.Ссылка.ПометкаУдаления
		|	И вогРынкиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.типыконтактнойИнформации.Адрес)
		// ++ VOG Солодов В.В. 21.05.2020 CRM-619
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вогРынкиКонтактнаяИнформация.Ссылка
		|ИЗ
		|	Справочник.вогРынки.КонтактнаяИнформация КАК вогРынкиКонтактнаяИнформация
		|ГДЕ
		|	вогРынкиКонтактнаяИнформация.Представление ПОДОБНО &НовоеПредставление
		|	И НЕ вогРынкиКонтактнаяИнформация.Ссылка.ПометкаУдаления
		|	И вогРынкиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вогРынкиКонтактнаяИнформация.Ссылка
		|ИЗ
		|	Справочник.вогРынки.КонтактнаяИнформация КАК вогРынкиКонтактнаяИнформация
		|ГДЕ
		|	вогРынкиКонтактнаяИнформация.Представление = &ПредставлениеБезИндекса
		|	И НЕ вогРынкиКонтактнаяИнформация.Ссылка.ПометкаУдаления
		|	И вогРынкиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
		// -- VOG Солодов В.В. 21.05.2020
		
	// ++ VOG Солодов В.В. 21.05.2020 CRM-619
	СтруктураАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(
		Адрес, Справочники.ВидыКонтактнойИнформации.Месторасположение);
	Запрос.УстановитьПараметр("НовоеПредставление", "%" + СокрЛП(СтруктураАдреса.value));
	
	ПредставлениеБезИндекса = "";
	
	Если ЗначениеЗаполнено(СтруктураАдреса.ZipCode) Тогда
		
		МассивСтрок = СтрРазделить(СокрЛП(СтруктураАдреса.value), ",", Ложь);
		МассивДобавления 	= Новый Массив;
		
		Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
			
			Если МассивСтрок[Индекс] = СтруктураАдреса.ZipCode Тогда
				Продолжить;
			КонецЕсли;
			
			МассивДобавления.Добавить(СокрЛП(МассивСтрок[Индекс]));
			
		КонецЦикла;
		
		ПредставлениеБезИндекса = СтрСоединить(МассивДобавления, ", ");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПредставлениеБезИндекса", ПредставлениеБезИндекса);
	// -- VOG Солодов В.В. 21.05.2020
	Запрос.УстановитьПараметр("Представление", СокрЛП(Адрес));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ВыборАдресаЗавершение(РезультатЗакрытия,ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		РезультатЗакрытия.Свойство("ПредставлениеАдреса",ТорговаяТочка_Адрес);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВидимостьРеквизитовФормы

&НаСервере
Процедура ОпеределитьРежимРедактирования(Отказ = Ложь)
	
	Если ЗначениеЗаполнено(ТорговаяТочкаВид) Тогда
		Если ТорговаяТочкаВид.НастройкиТорговаяТочка И НЕ ТорговаяТочкаВид.НастройкиКлиент И НЕ ТорговаяТочкаВид.НастройкиЮрЛица Тогда
			РежимОтображенияФормы.НайтиПоЗначению("ТорговаяТочка").Пометка = Истина;
		ИначеЕсли ТорговаяТочкаВид.НастройкиКлиент И ТорговаяТочкаВид.НастройкиТорговаяТочка И НЕ ТорговаяТочкаВид.НастройкиЮрЛица Тогда
			РежимОтображенияФормы.НайтиПоЗначению("ТорговаяТочкаКлиент").Пометка = Истина;
		Иначе
			РежимОтображенияФормы.НайтиПоЗначению("ТорговаяТочкаКлиентЮрЛицо").Пометка = Истина;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры
 
&НаСервере
Процедура НастройкиВидимостиЭлементов()
		
	// Начало Видимость из вида торговых точек
	
	Если ЗначениеЗаполнено(ТорговаяТочкаВид) И ТорговаяТочкаВид.ИспользоватьНастройкиДляФормы3в1 Тогда
		
		// Видимость разделов
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаЗаголовокТорговаяТочка"		,"Видимость",ТорговаяТочкаВид.НастройкиТорговаяТочка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СворачиваемаяГруппаТорговаяТочка"	,"Видимость",ТорговаяТочкаВид.НастройкиТорговаяТочка);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаЗаголовокКонтактноеЛицо"		,"Видимость",ТорговаяТочкаВид.НастройкиКонтактноеЛицо);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СворачиваемаяГруппаКонтактноеЛицо"	,"Видимость",ТорговаяТочкаВид.НастройкиКонтактноеЛицо);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаЗаголовокПортретКлиента"		,"Видимость",ТорговаяТочкаВид.НастройкиКлиент);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СворачиваемаяГруппаПортретКлиента"	,"Видимость",ТорговаяТочкаВид.НастройкиКлиент);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаЗаголовокЮрЛицо"				,"Видимость",ТорговаяТочкаВид.НастройкиЮрЛица);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СворачиваемаяГруппаЮрЛицо"			,"Видимость",ТорговаяТочкаВид.НастройкиЮрЛица);
		
		// Видимость реквизитов
		Если ТорговаяТочкаВид.НастройкиТорговаяТочка Тогда
			УстановитьВидимостьЭлементовФормы(ТорговаяТочкаВид.РеквизитыДляКонтроляЗаполнененияТорговаяТочка);
		КонецЕсли;
		
		Если ТорговаяТочкаВид.НастройкиКонтактноеЛицо Тогда
			УстановитьВидимостьЭлементовФормы(ТорговаяТочкаВид.РеквизитыДляКонтроляЗаполнененияКонтактноеЛицо);
		КонецЕсли;
		
		Если ТорговаяТочкаВид.НастройкиКлиент Тогда
			УстановитьВидимостьЭлементовФормы(ТорговаяТочкаВид.РеквизитыДляКонтроляЗаполнененияКлиенты);
		КонецЕсли;
		
		Если ТорговаяТочкаВид.НастройкиЮрЛица Тогда
			УстановитьВидимостьЭлементовФормы(ТорговаяТочкаВид.РеквизитыДляКонтроляЗаполнененияЮрЛица);
		КонецЕсли;
		
	Иначе
		
		Для каждого ТекЭлемент Из СписокИзмененныхЭлементов Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,ТекЭлемент.Значение,"Видимость",Истина);
		КонецЦикла;
		СписокИзмененныхЭлементов.Очистить();
		
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 26.12.2019 CRM-77
	УстановитьВидимостьЭлементовВыбораСозданияКонтактногоЛица();
	// -- VOG Солодов В.В. 26.12.2019
	
	// Конец Видимость из вида торговых точек
	
КонецПроцедуры 

// ++ VOG Солодов В.В. 26.12.2019 CRM-77
&НаСервере
Процедура УстановитьВидимостьЭлементовВыбораСозданияКонтактногоЛица()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КонтактноеЛицо",
		"Видимость",
		ВыборСозданиеКЛ = "Выбрать");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаКонтактноеЛицоФИО",
		"Видимость",
		ВыборСозданиеКЛ = "Создать");
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаКонтактноеЛицоКонтактнаяИнформация",
		"Видимость",
		ВыборСозданиеКЛ = "Создать");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВыборСозданиеКЛ",
		"Видимость",
		РежимВыбораКонтактныхЛиц = Истина);
		
	// +++ Кулаков П.Л. 25.02.2020
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КонтактноеЛицо",
		"КнопкаСоздания",
		ВыборСозданиеКЛ = "Создать");
	// --- Кулаков П.Л.	
	
КонецПроцедуры // -- VOG Солодов В.В. 26.12.2019

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы(Таблица)
	
	Для каждого ТекЭлемент Из Таблица Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,ТекЭлемент.ИмяРеквизита,"Видимость",ТекЭлемент.ДоступностьРеквизита);
		Если СписокИзмененныхЭлементов.НайтиПоЗначению(ТекЭлемент.ИмяРеквизита) = Неопределено Тогда
			СписокИзмененныхЭлементов.Добавить(ТекЭлемент.ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ДополнительныеПараметрыФормы()

	// Начало Значения по умолчанию
	Если ТорговаяТочкаВид.НастройкиКлиент И ЗначениеЗаполнено(ТорговаяТочкаВид.ТипОтношений) Тогда
		CRM_ВсеТипыОтношений.НайтиПоЗначению(ТорговаяТочкаВид.ТипОтношений).Пометка = Истина;
	КонецЕсли;
	
	Если ТорговаяТочкаВид.НастройкиТорговаяТочка И ТорговаяТочкаВид.РежимВыбораАдресаТорговойТочки <> 2 Тогда
		
		Если ТорговаяТочкаВид.РежимВыбораАдресаТорговойТочки = 0 Тогда
			ТорговаяТочкаВариантАдреса = "Адрес";
			//ИначеЕсли ТорговаяТочкаВид.РежимВыбораАдресаТорговойТочки = 1 Тогда
			//	ТорговаяТочкаВариантАдреса = "АдресРынка";
		Иначе
			ТорговаяТочкаВариантАдреса = "АдресРынка";
		КонецЕсли;
		
		УстановитьВариантАдресаТорговойТочки(ЭтаФорма);
		ЗаполнитьКИ_Описание(ЭтотОбъект, Элементы.ТорговаяТочка_ВидАдреса.Имя);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ТорговаяТочкаВариантАдреса","Видимость",Ложь);
		
	Иначе	
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ТорговаяТочкаВариантАдреса","Видимость",Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТорговаяТочкаВид.ВидАдресаТорговойТочки) Тогда
		ТорговаяТочка_ВидАдреса = ТорговаяТочкаВид.ВидАдресаТорговойТочки; 
		// Блокировка измененения типа адреса
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ТорговаяТочка_ВидАдреса","Доступность",Ложь);
	КонецЕсли;
	
	// Конец Значения по умолчанию
	
	// Начало Видимость классификаторов
	Если ТорговаяТочкаВид.ИспользоватьКлассификаторы Тогда
		Запрос = Новый Запрос("Выбрать Классификатор ИЗ РегистрСведений.вогВидыТорговыхТочекКлассификаторы КАК РС 
		|Где ВидТорговойТочки = &ВидТорговойТОчки И РучноеЗаполнение");
		Запрос.УстановитьПараметр("ВидТорговойТочки",ТорговаяТочкаВид);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"CRM_Классификаторы","Видимость",Истина);
			МассивКлассификаторов 	= РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Классификатор");
			//+Классификаторы
			CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, Справочники.вогТорговыеТочки.ПустаяСсылка(),,МассивКлассификаторов);
			//-Классификаторы
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"CRM_Классификаторы","Видимость",Ложь);
	КонецЕсли;
	// Конец Видимость классификаторов
	
КонецПроцедуры 

// { VOG RMV 2019-02-14
&НаСервереБезКонтекста
Процедура ДобавитьЗаписьРСМенеджерыОбъектов(ВладелецСсылка, Менеджер)
	
	УстановитьПривилегированныйРежим(Истина);
	Если Метаданные.ОпределяемыеТипы.вогВладелецМенеджеров.Тип.СодержитТип(ТипЗнч(ВладелецСсылка)) Тогда
		Запись 							= РегистрыСведений.вогМенеджерыОбъектов.СоздатьМенеджерЗаписи();
		//Запись.Период	 				= ТекущаяДата();
		Запись.ДатаНачала				= ТекущаяДата();
		Запись.Владелец	  				= ВладелецСсылка;
		Запись.Менеджер					= Менеджер;
		Запись.Подразделение			= Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(Менеджер.Подразделение);
		Запись.Роль						= Менеджер.CRM_ДолжностнаяПозиция.Роль;
		Запись.НаправлениеДеятельности 	= Менеджер.CRM_НаправлениеДеятельности;
		Запись.Записать();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
// } VOG RMV 2019-02-14

// ++ VOG Солодов В.В. 23.08.2019 task 577
&НаСервере
Процедура ЗаполнитьПараметрыВыбора()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеквизитыЗаполнения.ИмяРеквизита КАК ИмяРеквизита,
		|	РеквизитыЗаполнения.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
		|	РеквизитыЗаполнения.ПараметрыВыбора КАК ПараметрыВыбора
		|ИЗ
		|	Справочник.вогВидыТорговыхТочек.РеквизитыДляКонтроляЗаполнененияТорговаяТочка КАК РеквизитыЗаполнения
		|ГДЕ
		|	РеквизитыЗаполнения.Использование = ИСТИНА
		|	И РеквизитыЗаполнения.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТорговаяТочкаВид);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ИмяЭлемента = "ТорговаяТочка" + ВыборкаДетальныеЗаписи.ПредставлениеРеквизита;
		Элемент 	= Элементы.Найти(ИмяЭлемента);
		
		Если Не Элемент = Неопределено Тогда
			
			СоответсвтиеПараметровВыбора = ВыборкаДетальныеЗаписи.ПараметрыВыбора.Получить();
			
			Если ТипЗнч(СоответсвтиеПараметровВыбора) <> Тип("Соответствие")
				Или СоответсвтиеПараметровВыбора.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ЭлементСоответствия Из СоответсвтиеПараметровВыбора Цикл
				
				Если Не ЗначениеЗаполнено(ЭлементСоответствия.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Элементы[ИмяЭлемента].ПараметрыВыбора = Новый ФиксированныйМассив(Новый массив);
				
				НоваяСвязь = Новый ПараметрВыбора("Отбор." + ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
				
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НоваяСвязь);
				
				Элементы[ИмяЭлемента].ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
// -- VOG Солодов В.В. 23.08.2019

// ++ VOG Солодов В.В. 14.01.2020 CRM-77
&НаСервере
Процедура ЗаполнитьПоляКЛ()
	
	КонтактноеЛицоДолжность 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицоСсылка, "CRM_Должность", Истина);
	КонтактноеЛицоРоль 			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		КонтактноеЛицоСсылка,
		"CRM_РольКонтактногоЛица",
		Истина);
	КонтактноеЛицоСобственник 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		КонтактноеЛицоСсылка,
		"вогСобственник",
		Истина);
	
КонецПроцедуры
// -- VOG Солодов В.В. 14.01.2020

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	ЗаполнитьКИ_Описание(ЭтотОбъект, Результат.ИмяРеквизита);
	
	// ++ VOG Солодов В.В. 21.05.2020 CRM-619
	// Если изменили местоположение, то меняем рынок
	Если Результат.ИмяРеквизита = "ТорговаяТочка_Адрес" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.Месторасположение);
		
		НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			РынокПоКоординатам = ПолучитьРынокПоКоординатам(
				НайденныеСтроки[0].Представление,
				НайденныеСтроки[0].Широта,
				НайденныеСтроки[0].Долгота);
			
			Если РынокПоКоординатам = Неопределено Тогда
				
				ТорговаяТочкаРынок 					= Справочники.вогРынки.ПустаяСсылка();
				ТорговаяТочкаМестоположениеНаРынке 	= "";
				
			Иначе
				
				ТорговаяТочкаВариантАдреса 	= "АдресРынка";
				УстановитьВариантАдресаТорговойТочки(ЭтотОбъект);
				ТорговаяТочкаРынок 					= РынокПоКоординатам;
				ТорговаяТочкаМестоположениеНаРынке 	= "";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 21.05.2020
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключитьЗаполнениеПоИНН()
	ОтключитьЗаполнениеПоИНН = Неопределено;
КонецПроцедуры 

#КонецОбласти

#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	//CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
//	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
		
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	//CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)

	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры 

#КонецОбласти
