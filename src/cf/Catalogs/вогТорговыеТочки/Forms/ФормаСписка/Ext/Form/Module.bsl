
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Партнер") Тогда
		ПартнерСвязи = Параметры.Отбор.Партнер;	
	КонецЕсли;
	
	Если Параметры.Свойство("ЮрЛицоСвязи") Тогда
		ЮрЛицоСвязи = Параметры.ЮрЛицоСвязи;
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Вид") Тогда
		Вид = Параметры.Отбор.Вид;
	КонецЕсли;
	
	//+Рабочий стол
	скРабочийСтолСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ);
	//-Рабочий стол
	
	ОбработатьПараметрыОткрытияФормы();
	
	// ++ VOG Солодов В.В. 13.02.2020 CRM-348
	Поля = Новый Массив;
	Поля.Добавить("НаправлениеДеятельности");
	
	Список.УстановитьОграниченияИспользованияВГруппировке(Поля);
	Список.УстановитьОграниченияИспользованияВОтборе(Поля);
	Список.УстановитьОграниченияИспользованияВПорядке(Поля);
	// -- VOG Солодов В.В. 13.02.2020
	
	// ++ VOG Солодов В.В. 14.02.2020 CRM-356
	СтатусТТ_УИД 			= Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8");
	КлассификаторСтатусТТ 	= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(СтатусТТ_УИД);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список,
		"КлассификаторСтатусТТ",
		КлассификаторСтатусТТ);
	// -- VOG Солодов В.В. 14.02.2020
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПоручение(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны торговые точки. '"), 15);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТаблицы"    , "Справочник.вогТорговыеТочки");
	ПараметрыФормы.Вставить("МассивОбъектов", ВыделенныеСтроки);
	
	ОткрытьФорму("Обработка.вогМастерФормированияПоручений.Форма", 
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Копирование Тогда
		Отказ = Истина;
		
		СписокВариантов = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ПартнерСвязи)
		  ИЛИ ЗначениеЗаполнено(ЮрЛицоСвязи) Тогда
			СписокВариантов.Добавить("Выбрать", НСтр("ru = 'Выбрать'"));
		КонецЕсли;
		
		СписокВариантов.Добавить("Создать", НСтр("ru = 'Создать'"));
		СписокВариантов.Добавить("Отмена" , НСтр("ru = 'Отмена'"));
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СписокПередНачаломДобавленияЗавершение", ЭтотОбъект, ПараметрыОповещения);	
		Если СписокВариантов.Количество() = 2 Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокВариантов[0].Значение);
		Иначе	
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Выберите действие...'"), СписокВариантов);	
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавленияЗавершение(Вариант, Контекст) Экспорт
	
	Если Вариант = Неопределено
	  ИЛИ Вариант = "Отмена" Тогда 
		Возврат;
	КонецЕсли;	
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЮрЛицоСвязи", ЮрЛицоСвязи);	
	
	Если Вариант = "Создать" Тогда
		СуффиксИмяФормы     = "ФормаОбъекта";
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Партнер", ПартнерСвязи);
		ЗначенияЗаполнения.Вставить("Вид"    , Вид);
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);	
		
	Иначе			
		СуффиксИмяФормы = "ФормаВыбора";
		Если ЗначениеЗаполнено(ПартнерСвязи) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
			
			ПараметрыФормы.Вставить("Отбор", Отбор);	
			
		КонецЕсли;
		
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.вогТорговыеТочки." + СуффиксИмяФормы,
		ПараметрыФормы, Контекст.Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	//Связи
	Если ЗначениеЗаполнено(ЮрЛицоСвязи) Тогда
		вогУправлениеСвязями.УстановитьСвязиОбъекта(ВыбранноеЗначение, ЮрЛицоСвязи);	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПартнерСвязи) Тогда
		СписокОбработкаВыбораСервер(ВыбранноеЗначение, ПартнерСвязи);
		
	КонецЕсли;
	
	Элемент.Обновить();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокОбработкаВыбораСервер(МассивВыбранных, ПартнерСвязи)
	
	НачатьТранзакцию();
	
	Для каждого Элемент Из МассивВыбранных Цикл
		Объект = Элемент.ПолучитьОбъект();
		Объект.Заблокировать();
		
		Объект.Партнер = ПартнерСвязи; 
		Объект.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // СписокОбработкаВыбораСервер()

#КонецОбласти

#Область ОбработкаПараметровЗапуска

&НаСервере
Процедура ОбработатьПараметрыОткрытияФормы()

	Отбор = Параметры.Отбор;
	
	Если Отбор.Свойство("Вид") Тогда
		АвтоЗаголовок = Ложь;
		Заголовок 	  = Строка(Отбор.Вид);
		
	КонецЕсли;

КонецПроцедуры // ОбработатьПараметрыОткрытияФормы()
	
#КонецОбласти

//+Рабочий стол
#Область Подключаемый_РабочийСтол
	
&НаКлиенте
Процедура Подключаемый_скТумблерРабочегоСтолаПриИзменении(Элемент)
	скРабочийСтолКлиент.ТумблерРабочегоСтолаПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры // Подключаемый_скТумблерРабочегоСтолаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОбработкаГипперссылкиДействийНажатие(Элемент)
	скРабочийСтолКлиент.ОбработкаГипперссылкиДействийНажатие(ЭтаФорма, Элемент);	
КонецПроцедуры // Подключаемый_ИндикаторНапоминанийНажатие()

&НаКлиенте
Процедура Подключаемый_ОбновитьТаблицуНапоминаний(МассивНапоминаний = Неопределено) Экспорт
	скРабочийСтолКлиент.ОбновитьТаблицуНапоминаний(ЭтаФорма, МассивНапоминаний);
КонецПроцедуры // Подключаемый_ОбновитьТаблицуНапоминаний()

&НаКлиенте
Процедура Подключаемый_НапоминанияСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьНапоминания(ЭтаФорма);	
КонецПроцедуры // Подключаемый_НапоминанияСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПрекратитьВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПрекратитьВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПеренестиВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПеренестиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_ЗаметкиСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьЗаметки(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ЗаметкиСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиВсе(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиВсе()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиДобавить(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиДобавить(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиДобавить()

&НаКлиенте
Процедура Подключаемый_ИсторияРаботыСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьИсториюРаботы(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ИсторияРаботыСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLИсторииРаботыПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLИсторииРаботыПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLИсторииРаботыПриНажатии()

#КонецОбласти
//-Рабочий стол

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

// ++ VOG Солодов В.В. 13.02.2020 CRM-348
&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	вогТорговыеТочкиНаправления.Ссылка КАК Ссылка,
		|	вогТорговыеТочкиНаправления.Направление КАК Направление
		|ИЗ
		|	Справочник.вогТорговыеТочки.Направления КАК вогТорговыеТочкиНаправления
		|ГДЕ
		|	вогТорговыеТочкиНаправления.Ссылка В(&ТорговыеТочки)
		|ИТОГИ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("ТорговыеТочки", Строки.ПолучитьКлючи());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		
		СтрокаСписка = Строки[ВыборкаСсылка.Ссылка];
		
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
		
		Направления = Новый Массив;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Направления.Добавить(ВыборкаДетальныеЗаписи.Направление);
		КонецЦикла;
		
		СтрокаНаправление = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Направления, "; ");
		
		СтрокаСписка.Данные["НаправлениеДеятельности"] = СтрокаНаправление;
		
	КонецЦикла;
	
КонецПроцедуры
// -- VOG Солодов В.В. 13.02.2020

#КонецОбласти

