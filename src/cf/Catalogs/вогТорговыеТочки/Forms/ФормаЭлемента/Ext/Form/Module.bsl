
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Установка значения реквизита АдресКартинки.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ Объект.CRM_Фотография.Пустая() Тогда
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
			// +CRM
			Если ПустаяСтрока(АдресКартинки) Тогда
				ВывестиНедоступностьКартинки();
			КонецЕсли;	
			// -CRM
		Иначе
			АдресКартинки = "";
		КонецЕсли;
		CRM_УправлениеВидимостьюРамкиКартинки();
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация");	
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	//Связи
	Если Параметры.Свойство("ЮрЛицоСвязи") Тогда
		ЮрЛицоСвязи = Параметры.ЮрЛицоСвязи;		
	КонецЕсли;
	
	//ТегиНаправлений
	Если Объект.Ссылка.Пустая() Тогда 
		ОбновитьОблакоНаправлений();
	КонецЕсли;
	
	//+вог	
	ВариантАдреса = ?(ЗначениеЗаполнено(Объект.Рынок), "АдресРынка", "Адрес");
	УстановитьВариантАдреса(ЭтотОбъект);
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьОписаниеАдреса();
		
		//Менеджеры
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Менеджеры, "Владелец", Неопределено);
		
		//{[+](фрагмент добавлен), Виноградов Дмитрий 24.07.2018 9:24:06 ID
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Подразделения");
		ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
		вогУправлениеДоступом.ПрочитатьДоступныеПодразделенияОбъекта(ЭтотОбъект, Объект, ПараметрыОбъекта);
		//}Администратор 24.07.2018 9:24:06
		
		// Состояние пометок кнопок Направления. Если новый объект пометка ложь
		Элементы.КомандаПлитка.Пометка 	= Ложь;
		Элементы.КомандаОбои.Пометка 	= Ложь;
		
	КонецЕсли;
	
	СкрытьРаскрытьВсеГруппы(Истина);
	
	РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
	УстановитьВидимостьРеквизитовКИ();
	
	//+ Подсистема Свойства объекта
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	НастроитьВидимостьСворачиваемойГруппы("ДополнительныеРеквизиты");
	//Иначе
	//	НастройкаВидимостиКарточкиОбъекта       = "ПоказатьЗаполненные";
	//	РежимВидимостиПоказатьТолькоЗаполненные = Истина;
	//	НастроитьФорму();
	//	
	//	ОбновитьПараметрыРынкаОбязательныеПоля();
	//	
	//КонецЕсли;
	//-вог
	// - Подсистема Свойства объекта
	
	//+Текущая страница
	//КлючОбъекта = СтрЗаменить(ЭтаФорма.ИмяФормы,".","_");
	//ИмяТекущейСтраница = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	//	КлючОбъекта,
	//	"ИмяТекущейСтраницы");
	//
	//Если ИмяТекущейСтраница <> Неопределено Тогда
	//	Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы[ИмяТекущейСтраница];
	//	Элементы.ГруппаГруппировкаЛевоПраво.Видимость = ИмяТекущейСтраница = Элементы.СтраницаРеквизитыОбъекта.Имя;
	//КонецЕсли;
	//-Текущая страница
	
	// +Контактные лица (Динамический список)
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КонтактныеЛица, 
		"ВидСвязи", Справочники.вогВидыСвязейКонтактныхЛиц.Сотрудник, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(КонтактныеЛица, "ОбъектСвязи", Объект.Ссылка);
	КонтактныеЛица.Параметры.УстановитьЗначениеПараметра("ТекДата", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	
	// -Контактные лица (Динамический список)
	
	// СтандартныеПодсистемы.Свойства 
	// Скрытие кнопки. При видимости кнопки появляется меню Еще.
	ПоискЭлемента = Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Найти("РедактироватьСоставДополнительныхРеквизитов"); 
	Если НЕ ПоискЭлемента = Неопределено Тогда
		ПоискЭлемента.Видимость = Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда
		// Процент заполнености карточки объекта
		ЗаполненностьОбъекта 							= вогКонтрольЗаполненностиРеквизитовОбъектов.СтруктураЗаполненостиОбъекта(Объект.Ссылка);
		Элементы.КартинкаПроцентЗаполнености.Картинка 	= ЗаполненностьОбъекта.Картинка;
		ПроцентЗаполнености 							= Строка(ЗаполненностьОбъекта.ПроцентЗаполненностиОбщий)+"%";
	КонецЕсли;
	
	//++ Подключаемые дополнительные команды
	вогУправлениеИнтерфейсомСервер.ПодключитьДополнительныеКоманды(ЭтаФорма, Элементы.ФормаГруппаДействия);
	//-- Подключаемые дополнительные команды
	
	// Доступность поле грузополучатель
	// Если Вид торговой точки Интернет магазин и не полные права доступность ложь
	Если Объект.Вид = Справочники.вогВидыТорговыхТочек.ИнтернетМагазин И НЕ РольДоступна("ПолныеПрава") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Грузополучатель","Доступность",Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Комментарий","Видимость",Ложь);
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма, Элементы.КоманднаяПанельФормы);
	
	// + Взаимодействие (Динамический список)
	// ++ VOG Ульянов И.В. 28.11.2019 task 941
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВзаимодействие, "ОбъектСвязи", Объект.Ссылка);
	// -- VOG Ульянов И.В. 28.11.2019 task 941
	// - Взаимодействие (Динамический список)
	
	// ++ VOG Солодов В.В. 30.08.2019 bugs 620
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРаспределительныеЦентры, "ОбъектСвязи", Объект.Ссылка);
	// -- VOG Солодов В.В. 30.08.2019
	
	// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
	вогОбщегоНазначенияКлиентСервер.УстановитьПодсказкуКнопкиОткрытьЗадачу(ЭтаФорма);
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//Статус согласования
	ОбновитьДанныеСтатусаСогласования();
	
	Если НЕ ТекущийОбъект.CRM_Фотография.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(ТекущийОбъект.CRM_Фотография, УникальныйИдентификатор);
		// +CRM
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
		// -CRM
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюРамкиКартинки();		
	
	//+Классификаторы
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	//скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	ОбновитьОблакоНаправлений();
	
	//+вог
	Если Не ЗначениеЗаполнено(НастройкаВидимостиКарточкиОбъекта) Тогда
		НастройкаВидимостиКарточкиОбъекта       = "ПоказатьЗаполненные";
		РежимВидимостиПоказатьТолькоЗаполненные = Истина;
		
	КонецЕсли;
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	НастроитьФорму(НастройкиВидимостиИЗаголовков);
	
	//КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков, ЭтотОбъект);
	//-вог
	
	//{[+](фрагмент добавлен), Виноградов Дмитрий 24.07.2018 9:24:06 ID
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Подразделения");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
	вогУправлениеДоступом.ПрочитатьДоступныеПодразделенияОбъекта(ЭтотОбъект, Объект, ПараметрыОбъекта);
	//}Администратор 24.07.2018 9:24:06
	
	// Процент заполнености карточки объекта
	ЗаполненностьОбъекта 							= вогКонтрольЗаполненностиРеквизитовОбъектов.СтруктураЗаполненостиОбъекта(ТекущийОбъект.Ссылка);
	Элементы.КартинкаПроцентЗаполнености.Картинка 	= ЗаполненностьОбъекта.Картинка;
	ПроцентЗаполнености 							= Строка(ЗаполненностьОбъекта.ПроцентЗаполненностиОбщий)+"%";
	
	// Вывод информации Общая
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакет(Объект.Ссылка,ИнформацияОбъект,Метаданные.Справочники.вогТорговыеТочки,ЭтаФорма,"КарточкаОбъекта");
	
	// Вывод информации Обои
	//РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияОбои
	//														,Метаданные.Справочники.вогТорговыеТочки,ЭтаФорма,"Обои",Справочники.НаправленияДеятельности.Обои);
	
	// Вывод информации Плитка
	//РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияПлитка
	//														,Метаданные.Справочники.вогТорговыеТочки,ЭтаФорма,"Плитка",Справочники.НаправленияДеятельности.Плитка);
	
	// Команды направления Плитка и Обои
	Элементы.КомандаПлитка.Пометка 	= ТекущийОбъект.Направления.НайтиСтроки(Новый Структура("Направление",Справочники.НаправленияДеятельности.Плитка)).Количество() <> 0;
	Элементы.КомандаОбои.Пометка 	= ТекущийОбъект.Направления.НайтиСтроки(Новый Структура("Направление",Справочники.НаправленияДеятельности.Обои)).Количество() <> 0;
	
	// Доступность редактирования направления
	Элементы.ГруппаНаправления.Доступность = Пользователи.ЭтоПолноправныйПользователь(Пользователи.ТекущийПользователь());
	
	// Заполнение таблицы Распределительные центры
	// ++ VOG Солодов В.В. 30.08.2019 bugs 620
	// До изменения
	//ЗаполнитьРаспределительныеЦентры();
	// -- VOG Солодов В.В. 30.08.2019
	
	// Обновить отображения команд направления
	ОбновитьОтображениеКомандНаправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//Показатели
	Если ЭтоАдресВременногоХранилища(АдресХранилищаПоказателей) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеПоказателей", 1);
	КонецЕсли;
	
	// Обновить отображение группу команд направления
	ОбновитьОтображениеДанных(Элементы.ГруппаКоманднаяПанельНаправления);
	
	//Менеджеры
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Менеджеры, "Владелец", Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Менеджеры, "ТекущаяДата",CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	
	//ID cards
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ListIDCards, "ОбъектСвязи", Объект.Ссылка);
	
	// Выделить команду навигации при открытии формы объекта
	ВыделитьКомандуНавигацииПриОткрытииФормы();
	
	// ++ Тищенко В.В. 22.01.2019
	// При открытии установить страницу Основное
	ВыполнитьПереходСтраницы("СтраницаКарточкаОбъекта");	
	// -- Тищенко В.В.
	
	// +++ VOG Кулаков П.Л. 26.10.2020 CRM-999
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласования(ЭтаФорма);
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) 
		И РежимВидимостиПоказатьТолькоВажные Тогда
		
		Шаблон = НСтр("ru = 'Поле ""%1"" не заполнено'");
		Если ВариантАдреса = "АдресРынка" Тогда
			Если Не ЗначениеЗаполнено(Объект.Рынок) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, "Рынок"),, "Объект.Рынок",, Отказ);	
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.МестоположениеНаРынке) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, "Местоположение "),, "Объект.МестоположениеНаРынке",, Отказ);	
				
			КонецЕсли;
			
		ИначеЕсли ВариантАдреса = "Адрес" Тогда
			Если Не ЗначениеЗаполнено(АдресОбязательныеПоля) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, "Адрес"),, "АдресОбязательныеПоля",, Отказ);		
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЗаписыватьБезПроверки") Тогда
		Возврат;
	КонецЕсли;
	
	//Поиск дублей
	Если Не ЗначениеЗаполнено(Объект.Ссылка) 
		И вогОбщегоНазначенияКлиентСерверПовтИсп.ВыполнятьПоискДублейОбъекта(Объект.Ссылка) Тогда 
		СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(Объект);
		СписокКонтактов = вогОбщегоНазначенияКлиентСервер.ЗаполнитьСтруктуруКонтактовОбъекта(ЭтотОбъект);
		
		Если ЕстьДубли(Объект, СтруктураПоиска, СписокКонтактов) Тогда 
			МассивОписанийОбъектов = Новый Массив;
			МассивОписанийОбъектов.Добавить(
			Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта", 
			Объект, "Справочник.вогТорговыеТочки", СтруктураПоиска, СписокКонтактов)
			);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("МассивОписанийОбъектов", МассивОписанийОбъектов);
			
			//Определим список действий
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("Продолжить", 
			Новый Структура("КартаМаршрута", ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.вогСогласованиеДубляТорговойТочки"))
			);
			
			Если СтруктураПоиска.Свойство("Контакт_Адрес") Тогда
				СписокТиповОтношений = Новый СписокЗначений;
				
				ЗначенияЗаполнения = Новый Структура;
				ЗначенияЗаполнения.Вставить("Наименование", Объект.Наименование);
				ЗначенияЗаполнения.Вставить("Адрес"		  , СписокКонтактов.Адрес);
				
				СтруктураДействий.Вставить("СоздатьПартнера", 
				Новый Структура("Заголовок, ТипыОтношений, ЗначенияЗаполнения", 
				НСтр("ru = 'Создать Рынок/ТЦ'"), СписокТиповОтношений, ЗначенияЗаполнения)	
				);
				
			КонецЕсли;
			
			ПараметрыФормы.Вставить("СтруктураДействий", СтруктураДействий);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.вогФормаНайденныхДублей", ПараметрыФормы,,,,, ОписаниеОповещения);
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//+вог
	Если Отказ Тогда
		Если НастройкаВидимостиФормы = "СвернутьВсеГруппы" Тогда
			НастройкаВидимостиФормы = "ПоказатьВсе";
		КонецЕсли;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
	КонецЕсли;
	//-вог
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.Результат = "Продолжить" Тогда
		ПараметрыЗаписи = Новый Структура("ЗаписыватьБезПроверки", Истина);
		
		ПараметрыДействия = РезультатЗакрытия.ПараметрыДействия;
		Если ПараметрыДействия.Свойство("КартаМаршрута") Тогда
			ПараметрыЗаписи.Вставить("КартаМаршрута", ПараметрыДействия.КартаМаршрута);
			
		ИначеЕсли ПараметрыДействия.Свойство("Партнер") Тогда
			Объект.Рынок 				 = ПараметрыДействия.Партнер;
			Объект.МестоположениеНаРынке = ПараметрыДействия.ПараметрыСозданияПартнера.ЗначенияЗаполнения.Местоположение;
			
			ПараметрыЗаписи.Вставить("ПараметрыОбработкиТорговыхТочек", ПараметрыДействия);
			
		КонецЕсли;
		
		Записать(ПараметрыЗаписи);
		
	ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
		Попытка 
			ВладелецФормы.ТекущаяСтрока = РезультатЗакрытия.Объект; 
		Исключение
			ФормаСписка = ПолучитьФорму("Справочник.вогТорговыеТочки.ФормаСписка");
			ФормаСписка.Открыть();
			
			ФормаСписка.Элементы.Список.ТекущаяСтрока = РезультатЗакрытия.Объект;
			
		КонецПопытки;
		
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// +++ VOG Кулаков П.Л. 09.04.2021 DEV-372
	// заполнить долготу и широту
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.Месторасположение);
	НайденныеСтрокиКИНаФорме = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(ПараметрыОтбора);
	НайденныеСтрокиКИОбъекта = ТекущийОбъект.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтрокиКИНаФорме.Количество() > 0 И НайденныеСтрокиКИОбъекта.Количество() > 0 Тогда
		НайденныеСтрокиКИОбъекта[0].Долгота = НайденныеСтрокиКИНаФорме[0].Долгота;
		НайденныеСтрокиКИОбъекта[0].Широта = НайденныеСтрокиКИНаФорме[0].Широта;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//Направления
	ПеренестиДанныеВТаблицыОбъекта(ТекущийОбъект);
	
	//Связи	
	Если ЗначениеЗаполнено(ЮрЛицоСвязи) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЮрЛицоСвязи", ЮрЛицоСвязи);
		
	КонецЕсли;
	
	//{[+](фрагмент добавлен), Виноградов Дмитрий 24.07.2018 9:25:14 ID
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Подразделения");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
	вогУправлениеДоступом.ЗаписатьДоступныеПодразделенияОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыОбъекта);
	//}Администратор 24.07.2018 9:25:14
	
	// ++ VOG Солодов В.В. 14.01.2020 CRM-50
	Если Не Отказ И Не ЗначениеЗаполнено(Объект.НаселенныйПункт) Тогда
		
		Попытка
			Справочники.вогНаселенныеПункты.ЗаполнитьНаселенныйПунктВОбъектеПоВидуКонтактнойИнформации(
				ТекущийОбъект,
				Справочники.ВидыКонтактнойИнформации.Месторасположение);
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 14.01.2020
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//+Классификаторы
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	// ++ VOG Солодов В.В. 29.03.2019
	//скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	вогУправлениеИнтерфейсомСервер.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, Элементы.ФормаГруппаДействия);
	// -- VOG Солодов В.В. 29.03.2019
	
	//+вог
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	Если Не Элементы.СтраницаКарточкаОбъекта.Доступность Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастройкаВидимостиФормы = "ПоказатьВсе";
		НастроитьФорму(НастройкиВидимостиИЗаголовков);
		СкрытьРаскрытьВсеГруппы(Ложь);
		
		Если Элементы.НастройкаВидимостиФормы.СписокВыбора.Количество() = 3 Тогда
			Элементы.НастройкаВидимостиФормы.СписокВыбора.Удалить(0);
		КонецЕсли;
		
	Иначе
		НастроитьФорму(НастройкиВидимостиИЗаголовков);
	КонецЕсли;
	
	//КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(ТекущийОбъект, НастройкиВидимостиИЗаголовков, ЭтотОбъект);
	
	//Менеджеры
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Менеджеры, "Владелец", ТекущийОбъект.Ссылка);
	
	//Запуск согласования
	Если ПараметрыЗаписи.Свойство("КартаМаршрута") Тогда
		ЗначенияЗаполнения = Новый Структура("Основание, КартаМаршрута", Объект.Ссылка, ПараметрыЗаписи.КартаМаршрута);
		БизнесПроцессСсылка = вогОбщегоНазначения.СформироватьЗапуститьБизнесПроцесс(ЗначенияЗаполнения);
		Если ЗначениеЗаполнено(БизнесПроцессСсылка) Тогда
			ПараметрыЗаписи.Вставить("ПараметрыОповещения", 
			Новый Структура("Заголовок, Текст", НСтр("ru = 'Запуск бизнес-процесса...'"), 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполнен запуск ""%1""'"), БизнесПроцессСсылка))
			);	
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Обработка массива торговых точек
	Если ПараметрыЗаписи.Свойство("ПараметрыОбработкиТорговыхТочек") Тогда
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(ПараметрыЗаписи.ПараметрыОбработкиТорговыхТочек);
		ПараметрыВыполнения.Добавить(ТекущийОбъект.Ссылка);
		
		НаименованиеЗадания = НСтр("ru = 'Обработка массива торговых точек'");
		ФоновыеЗадания.Выполнить("вогОбщегоНазначения.ВыполнитьОбработкуТорговыхТочек", 
		ПараметрыВыполнения,, НаименованиеЗадания);
		
	КонецЕсли;
	//-вог
	
	// Начало Добавление записей в регистр сведений вогСвязиРаспределительныхЦентров из тч распределительные центры
	Для каждого СтрокаТЧ Из РаспределительныеЦентры Цикл
		МенеджерЗаписиРС 						= РегистрыСведений.вогСвязиРаспределительныхЦентров.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРС.ОбъектСвязи 			= Объект.Ссылка;
		МенеджерЗаписиРС.РаспределительныйЦентр = СтрокаТЧ.РаспределительныйЦентр;
		МенеджерЗаписиРС.Записать();
	КонецЦикла;
	// Конец Добавление записей в регистр сведений вогСвязиРаспределительныхЦентров из тч распределительные центры
	
	// Вывод информации Общая
	//	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакет(Объект.Ссылка,ИнформацияОбъект,Метаданные.Справочники.вогТорговыеТочки,ЭтаФорма,"КарточкаОбъекта");
	
	// Вывод информации Обои
	//РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияОбои
	//,Метаданные.Справочники.вогТорговыеТочки,ЭтаФорма,"Обои",Справочники.НаправленияДеятельности.Обои);
	//
	//// Вывод информации Плитка
	//РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияПлитка
	//,Метаданные.Справочники.вогТорговыеТочки,ЭтаФорма,"Плитка",Справочники.НаправленияДеятельности.Плитка);
	
	// Вывод информации Общая
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакет(Объект.Ссылка,ИнформацияОбъект,Метаданные.Справочники.вогТорговыеТочки,ЭтаФорма,"КарточкаОбъекта",Истина);
	
	// Вывод информации Обои
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияОбои
	,Метаданные.Справочники.вогТорговыеТочки,ЭтаФорма,"Обои",Справочники.НаправленияДеятельности.Обои,Истина);
	
	// Вывод информации Плитка
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияПлитка
	,Метаданные.Справочники.вогТорговыеТочки,ЭтаФорма,"Плитка",Справочники.НаправленияДеятельности.Плитка,Истина);
	
	ЗапретРедактированияРеквизитовОбъектовСлужебный.ЗаписатьИзмененияБлокированныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписьТорговойТочки", Объект.Ссылка, Объект.Партнер);
	Если ПараметрыЗаписи.Свойство("ПараметрыОповещения") Тогда
		ПоказатьОповещениеПользователя(ПараметрыЗаписи.ПараметрыОповещения.Заголовок,, 
		ПараметрыЗаписи.ПараметрыОповещения.Текст, БиблиотекаКартинок.Информация2_32); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЗаписьФайл" 
		И Параметр.Свойство("ВладелецФайла") Тогда
		
		Если Параметр.ВладелецФайла = Объект.Ссылка Тогда
			Модифицированность = Истина;
			
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			Если ВыборИзображения Тогда
				
				Объект.CRM_Фотография = СсылкаНаФайл;
				АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
				
			КонецЕсли;
			
			ФайлКартинкиПриИзменении(Элементы.ФайлКартинки);
			//+вог
			ОбновитьГиперссылкиИКарточку();
			//-вог
			
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_БизнесПрцесса" Тогда
		ОбновитьГиперссылкиИКарточку();
		
	КонецЕсли;
	
	//+вог
	Если ИмяСобытия = "Запись_БизнесПрцесса" 
		И Параметр.Предмет = Объект.Ссылка Тогда
		ОбновитьДанныеСтатусаСогласования();
		
	КонецЕсли;
	//-вог
	
	// ++ VOG Ульянов И.В. 28.11.2019 task 941
	Если ИмяСобытия = "ОбновитьВиджет" Тогда
			ТекущиеДелаДокументооборотКлиент.ОбработкаОповещенияФормыТекущиеДела(
		ЭтаФорма, ИмяСобытия, Параметр, Источник);
	КонецЕсли;	
	// -- VOG Ульянов И.В. 28.11.2019 task 941	
	
КонецПроцедуры

//{[+](фрагмент добавлен), Виноградов Дмитрий 19.07.2018 10:24:50 ID

&НаСервере
Процедура ПриЗакрытииНаСервере()
	КлючОбъекта = СтрЗаменить(ЭтаФорма.ИмяФормы,".","_");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, "ИмяТекущейСтраницы", Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если Не ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
КонецПроцедуры

//}Администратор 19.07.2018 10:24:50
#КонецОбласти

#Область ОбработчикиКомандФормы


#Область ПодключемыеДополнительныеКоманды
//++ Подключаемые дополнительные команды
&НаКлиенте
Процедура Подключаемый_ОбработчикДополнительнойКоманды(Команда) Экспорт 
	
	// ++ VOG Солодов В.В. 29.03.2019
	//вогУправлениеИнтерфейсомКлиент.ОбработчикКомандыФормы(Команда, ЭтаФорма);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "скДанныеЗапуска")
		И ЭтаФорма.скДанныеЗапуска.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя)).Количество() > 0 Тогда
	
		скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);	
	Иначе
		вогУправлениеИнтерфейсомКлиент.ОбработчикКомандыФормы(Команда, ЭтаФорма);
	КонецЕсли;
	// -- VOG Солодов В.В. 29.03.2019
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКоманды(Значение, ДополнительноеЗначение) Экспорт 
	
	вогУправлениеИнтерфейсомКлиент.ВыполнитьКодКомандыНаКлиенте(Значение, ДополнительноеЗначение, ЭтаФорма, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКомандыСервер(Значение, ДополнительноеЗначение) Экспорт 
	
	вогУправлениеИнтерфейсомСервер.ВыполнитьКодКомандыНаСервере(Значение, ДополнительноеЗначение, ЭтотОбъект, ЭтаФорма, Объект);
	
КонецПроцедуры
//-- Подключаемые дополнительные команды
#КонецОбласти

//{[+](фрагмент добавлен), Виноградов Дмитрий 15.06.2018 13:43:42 ID

&НаКлиенте
Процедура ДобавитьПолеКонтактнойИнформации(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюВидВыбран", ЭтотОбъект, ДополнительныеПараметры);
	
	СписокДоступныхВидов = СписокВидовДляДобавленияКонтактнойИнформации();
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДоступныхВидов, Элементы[Команда.Имя]);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоляКонтактногоЛица(Команда)
	
	//ДанныеКЛ = ДанныеКонтактныхЛиц.Добавить();
	//
	//ЗаполнитьВсегдаВыводимыеВидыКИ(
	//	ДанныеКЛ.КонтактнаяИнформация,
	//	СвойстваВидовКонтактнойИнформацииКонтактныхЛиц);
	//
	//ОбновитьЭлементыКонтактныхЛиц();
	//ТекущийЭлемент = Элементы["НаименованиеКонтакт_" + ДанныеКонтактныхЛиц.Индекс(ДанныеКЛ)];
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюВидВыбран(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Отбор = Новый Структура("Вид", ВыбранныйЭлемент.Значение);
	
	НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформации.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СвойстваВида = НайденныеСтроки[0];
	
	Если СвойстваВида.ВыводитьВФормеВсегда = Ложь Тогда
		
		ДополнительныеПараметры.Вставить("ДобавляемыйВид", ВыбранныйЭлемент.Значение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюВопросЗадан", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = СтрШаблон(НСтр("ru='Добавить возможность ввода вида контактной информации ""%1""?'"), ВыбранныйЭлемент.Значение);
		ЗаголовокВопроса = НСтр("ru='Подтверждение добавления'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ЗаголовокВопроса);
		
	Иначе
		
		Форма.ДобавитьКонтактнуюИнформациюСервер(ВыбранныйЭлемент.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюВопросЗадан(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКонтактнуюИнформациюСервер(ДополнительныеПараметры.ДобавляемыйВид, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь)
	
	КоличествоЭлементовКоллекции = Объект.КонтактнаяИнформация.Количество();
	ИндексВставки = КоличествоЭлементовКоллекции;
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если Объект.КонтактнаяИнформация[ТекущийИндекс].Вид = ДобавляемыйВид Тогда
			ИндексВставки = ТекущийИндекс+1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКИ = Объект.КонтактнаяИнформация.Вставить(ИндексВставки);
	ДанныеКИ.Вид = ДобавляемыйВид;
	ДанныеКИ.Тип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемыйВид, "Тип");
	
	Результат = Новый Структура("ДобавляемыйВид", ДобавляемыйВид);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецПроцедуры

&НаСервере
Функция СписокВидовДляДобавленияКонтактнойИнформации()
	
	Если СвойстваВидовКонтактнойИнформацииИнициализирован <> Истина Тогда
		ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц();		
	КонецЕсли; 
	
	СписокДоступныхВидов = Новый СписокЗначений;
	Отбор = Новый Структура("Вид");
	Для Каждого СтрокаТаблицы Из ЭтаФорма.СвойстваВидовКонтактнойИнформации Цикл
		Отбор.Вид = СтрокаТаблицы.Вид;
		Если СтрокаТаблицы.РазрешитьВводНесколькихЗначений Или Объект.КонтактнаяИнформация.НайтиСтроки(Отбор).Количество() = 0 И СтрокаТаблицы.Вид.CRM_Основной Тогда
			СписокДоступныхВидов.Добавить(СтрокаТаблицы.Вид, СтрокаТаблицы.ПредставлениеВида);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДоступныхВидов;
	
КонецФункции

&НаСервере
Процедура ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПорядокТиповКИ.Тип,
	|	ПорядокТиповКИ.Порядок
	|ПОМЕСТИТЬ втПорядокТипов
	|ИЗ
	|	&ПорядокТиповКИ КАК ПорядокТиповКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ПРЕДСТАВЛЕНИЕ(ВидыКонтактнойИнформации.Ссылка) КАК ПредставлениеВида,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ЕСТЬNULL(НастройкиВидовКонтактнойИнформации.ВыводитьВФормеВсегда, ЛОЖЬ) КАК ВыводитьВФормеВсегда,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений КАК РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ПроверятьКорректность,
	// ++ VOG Солодов В.В. 02.03.2020 CRM-196
	|	ВидыКонтактнойИнформации.ВидРедактирования
	// До изменения
	//|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге
	// -- VOG Солодов В.В. 02.03.2020
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|		ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВидовКонтактнойИнформации КАК НастройкиВидовКонтактнойИнформации
	|		ПО ВидыКонтактнойИнформации.Ссылка = НастройкиВидовКонтактнойИнформации.Вид
	|ГДЕ
	|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|
	|УПОРЯДОЧИТЬ ПО
	|	втПорядокТипов.Порядок,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания");
	
	Запрос.УстановитьПараметр("ПорядокТиповКИ", УправлениеКонтактнойИнформацией.ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ГруппаВидовКИ", Справочники.ВидыКонтактнойИнформации.СправочниквогТорговыеТочки);
	
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
	СвойстваВидовКонтактнойИнформации.Загрузить(ТаблицаСвойств);
	
КонецПроцедуры

//}Администратор 15.06.2018 13:43:42

// Механизм картинок
&НаКлиенте
Процедура ФайлКартинкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
		// +CRM
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
		// -CRM
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюРамкиКартинки();			
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] =
	Новый Структура("ИмяБезРасширения, Расширение, ВремяИзменения, УниверсальноеВремяИзменения");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ДобавлениеФайлаИнициализацияФайла",
	ЭтотОбъект,
	ДополнительныеПараметры);
	
	Файл = Новый Файл;
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаИнициализацияФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ДобавлениеФайлаСуществованияФайла",
	ЭтотОбъект,
	ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Файл не найден'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита], ДополнительныеПараметры.Файл);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение =
	СтрЗаменить(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение, ".", "");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ДобавлениеФайлаПолучениеВремениИзменения",
	ЭтотОбъект,
	ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].ВремяИзменения = ВремяИзменения;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения",
	ЭтотОбъект,
	ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеУниверсальногоВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].УниверсальноеВремяИзменения = ВремяИзменения;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ДополнительныеПараметры.ИмяФайла);
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	Если ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаКартинки" Тогда
		АдресКартинки      = АдресФайлаВХранилище;
	ИначеЕсли ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаHTML" Тогда
		АдресОписанияHTML  = АдресФайлаВХранилище;
		ПутьКФайлуОписанию = ДополнительныеПараметры.ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Перем ИдентификаторФайла;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр =  НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		+ "|Все файлы(*.*)|*.*"
		+ "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		+ "|Формат GIF(*.gif*)|*.gif"
		+ "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		+ "|Формат PNG(*.png*)|*.png"
		+ "|Формат TIFF(*.tif)|*.tif"
		+ "|Формат icon(*.ico)|*.ico"
		+ "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаДиалогЗавершение",
		ЭтотОбъект,
		Новый Структура("ИмяРеквизита", "ДанныеФайлаКартинки"));
		
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
		
	Иначе
		Фильтр =  НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		+ "|Все файлы(*.*)|*.*"
		+ "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		+ "|Формат GIF(*.gif*)|*.gif"
		+ "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		+ "|Формат PNG(*.png*)|*.png"
		+ "|Формат TIFF(*.tif)|*.tif"
		+ "|Формат icon(*.ico)|*.ico"
		+ "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
		
		ВыборИзображения   = Истина;
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);
		ВыборИзображения   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
		РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
		Объект[ИмяРеквизитаОбъекта],
		УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.CRM_Фотография = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
	ДанныеФайлаКартинки = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("CRM_Фотография", "АдресКартинки",
	НСтр("ru='Отсутствует изображение для просмотра'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.CRM_Фотография);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	СтруктураПараметрыВыбора =
	Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);
	
	ОткрытьФорму(
	"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
	СтруктураПараметрыВыбора,,,,,
	Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
	РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.CRM_Фотография = Результат;
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор)
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

#Область КарточкаОбъекта

&НаКлиенте
Процедура ГиперссылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента)
	
	Если ИмяЭлемента = "ГиперссылкаПерейтиФайлы"
		ИЛИ ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
		Если вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка) Тогда
			ФормаИмя = "ОбщаяФорма.вогФормаУправленияПрисоединеннымиФайлами";
			ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Присоединенные файлы'"))
		Иначе	
			ФормаИмя = "ОбщаяФорма.ПрисоединенныеФайлы";
		КонецЕсли;
		
		ТипыФайлов = Новый Массив;
		Если ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда
			ТипыФайлов.Добавить(ПредопределенноеЗначение("Перечисление.вогТипыПрисоединенныхФайлов.Изображение"));
			ПараметрыФормы.Вставить("ТипыФайлов", ТипыФайлов);
			
		КонецЕсли;
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", ФормаИмя);
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиАнкеты" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Респондент", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Документ.вогАнкета.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиУсловияДоставки" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ТорговаяТочка", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.вогУсловияДоставки.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиМероприятия" Тогда
		ПараметрыФормы = Новый Структура("ТорговаяТочка", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Документ.CRM_Мероприятие.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиПроцессы" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("вогТорговаяТочка", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "БизнесПроцесс.CRM_БизнесПроцесс.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЭкспозиции" Тогда
		ПараметрыФормы = Новый Структура("ВладелецЭкспозиции", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.вогЭкспозицииКлиентов.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиКонтакты" Тогда
		ПараметрыФормы = Новый Структура("ОбъектСвязи", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.КонтактныеЛицаПартнеров.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЮрЛица" Тогда
		ПараметрыФормы = Новый Структура("ТорговаяТочкаСвязи", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.вогЮридическиеЛица.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЗначенияКлассификаторов" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиВременныйДоступ" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ТорговаяТочка", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.вогВременныйДоступКТорговымТочкам.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	КонецЕсли;
	
	Если Не ПараметрыПереходаПоГиперссылке.Свойство("РежимОткрытияОкнаФормы") Тогда
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	Возврат ПараметрыПереходаПоГиперссылке
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информции возможен только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
	ПараметрыПереходаПоГиперссылке.ПараметрыФормы, , ЭтаФорма.УникальныйИдентификатор, , , ,
	ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПереходСтраницы(Команда)
	// Сверунть группу Контакты
	СкрытьРаскрытьВсеГруппы(Истина);
	// Переход страницы
	ВыполнитьПереходСтраницы(Команда.Имя);
КонецПроцедуры

#Область КомандыНаправлениеДеятельности

&НаКлиенте
Процедура КомандаПлитка(Команда)
	Элементы.КомандаПлитка.Пометка = НЕ Элементы.КомандаПлитка.Пометка;
	ОбновитьОтображениеКомандНаправления();
	ДобавитьНаправление(ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка"),Элементы.КомандаПлитка.Пометка);
	ОбновитьОтображениеДанных(Элементы.ГруппаКоманднаяПанельНаправления);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбои(Команда)
	Элементы.КомандаОбои.Пометка = НЕ Элементы.КомандаОбои.Пометка;
	ОбновитьОтображениеКомандНаправления();
	ДобавитьНаправление(ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои"),Элементы.КомандаОбои.Пометка);
	ОбновитьОтображениеДанных(Элементы.ГруппаКоманднаяПанельНаправления);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ГиперссылкаПерейтиКоманда(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Для каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
		Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
			ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
			ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
		Иначе
			ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
			ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Команда.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетСтурктураВзаимосвязи(Команда)
	СформироватьОтчетСтурктураВзаимосвязиСервер();
КонецПроцедуры

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ссылка", Объект.Ссылка);
		
		СоответствиеРеквизитовКИ = Новый Соответствие;
		
		Для Каждого СтрокаДопРеквизита Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			
			Если СтрокаДопРеквизита.Выводить Тогда
				СоответствиеРеквизитовКИ.Вставить(СтрокаДопРеквизита.Вид, СтрокаДопРеквизита.ИмяРеквизита);
			КонецЕсли;
			
		КонецЦикла;	
		
		СтруктураПараметров.Вставить("СоответствиеРеквизитовКИ", СоответствиеРеквизитовКИ);
		
		ОповещениеПоЗавершению = Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтаФорма);
		
		ОткрытьФорму("ОбщаяФорма.вогФормаРазблокированиеРеквизитов",
		СтруктураПараметров,
		,
		,
		,
		, 
		ОповещениеПоЗавершению, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ДатаРедактирования")
		И Результат.Свойство("МассивРеквизитов")
		И ТипЗнч(Результат.МассивРеквизитов) = Тип("Массив") 
		И Результат.МассивРеквизитов.Количество() > 0 Тогда
		
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(
		ЭтаФорма, 
		Результат.МассивРеквизитов);
		
		ЗапретРедактированияРеквизитовОбъектовКлиент.ЗаполнитьСписокРазрешенныхКРедактированию(
		ЭтаФорма,
		Результат.МассивРеквизитов);
		
		ДатаРедактированияРеквизитов = Результат.ДатаРедактирования;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерыВидВсе(Команда)
	
	СписокМенеджерыИзменитьНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерыВидДействующие(Команда)
	
	СписокМенеджерыИзменитьНаСервере(Команда.Имя);
	
КонецПроцедуры

// ++ VOG Солодов В.В. 02.09.2019 bugs 620
&НаКлиенте
Процедура ОткрытьВыборРЦ(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОткрытьВыборРЦЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Справочник.вогРаспределительныеЦентры.Форма.ФормаВыбора",
		ПараметрыФормыВыбора, 
		ЭтотОбъект, 
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		ОписаниеОповещенияОЗакрытии, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьВыборРЦЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Результат);
		
		УстановитьСвязиОбъекта(МассивОбъектов, Объект.Ссылка);
		
		Элементы.СписокРаспределительныеЦентры.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязьСРЦ(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокРаспределительныеЦентры.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		УдалитьСвязьСРЦНаСервере(ТекущиеДанные.РаспределительныйЦентр, Объект.Ссылка);
		Элементы.СписокРаспределительныеЦентры.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 02.09.2019

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидПриИзменении(Элемент)
	ОбновитьГиперссылкиИКарточку();
КонецПроцедуры

&НаКлиенте
Процедура РынокПриИзменении(Элемент)
	УстановитьВидимостьРеквизитовКИ();	
КонецПроцедуры

&НаКлиенте
Процедура ВариантАдресаПриИзменении(Элемент)
	УстановитьВариантАдреса(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	CRM_УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РынокОбязательныеПоляПриИзменении(Элемент)
	
	ОбновитьПараметрыРынкаОбязательныеПоля();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыРынкаОбязательныеПоля()	
	
	Если ЗначениеЗаполнено(Объект.Рынок) Тогда
		//{[-](фрагмент удален)Администратор 28.06.2018 16:53:23 ID
		//АдресРынкаОбязательныеПоля = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Рынок, Справочники.ВидыКонтактнойИнформации.АдресПартнера);		
		//}Администратор 28.06.2018 16:53:23
		//{[+](фрагмент добавлен), Виноградов Дмитрий 28.06.2018 16:53:31 ID
		АдресРынкаОбязательныеПоля = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Рынок, Справочники.ВидыКонтактнойИнформации.АдресРынка);		
		//}Администратор 28.06.2018 16:53:31
	Иначе
		АдресРынкаОбязательныеПоля = "";		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПараметрыРынкаОбязательныеПоля()

#Область ТегиНаправлений

&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	ПоместитьНаправлениеВТабличнуюЧасть(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СтатусСогласования

&НаКлиенте
Процедура СтатусСогласованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;			
	вогОбщегоНазначенияКлиент.ОбработкаНажатияСтатусаСогласования(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,
	ЭтотОбъект,"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОКТМОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПослеВводаСтроки",ЭтотОбъект,"ОКТМО");
	ПоказатьВводСтроки(Оповещение,Объект.ОКТМО,"ОКТМО",11,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КППНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ПослеВводаСтроки",ЭтотОбъект,"КПП");
	ПоказатьВводСтроки(Оповещение,Объект.КПП,"КПП",9,Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

#Область ТегиНаправлений

&НаКлиенте
Процедура Подключаемый_НаправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если Лев(НавигационнаяСсылка, 14) <> "НаправлениеИД_" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	ТегИД = Сред(НавигационнаяСсылка, 15);
	ЭлементСписка = Объект.Направления.Получить(Число(ТегИД)-1);
	
	Объект.Направления.Удалить(ЭлементСписка);
	
	ОбновитьОблакоНаправлений();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГиперссылкаСтраницыДанныхНаправленийНажатие(Элемент)
	
	ИмяСтраницы = СтрЗаменить(Элемент.Имя, "Гиперссылка_", "");
	ЭлементСтраница = Элементы[ИмяСтраницы];	
	
	Для каждого ЭлементГипперссылка Из Элемент.Родитель.ПодчиненныеЭлементы Цикл
		Если ЭлементГипперссылка = Элемент Тогда
			ЭлементГипперссылка.Шрифт = Новый Шрифт(10,, Истина);
		Иначе	
			ЭлементГипперссылка.Шрифт = Новый Шрифт();
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементСтраница.Родитель.ТекущаяСтраница = ЭлементСтраница;
	
КонецПроцедуры // Подключаемый_ГиперссылкаСтраницыДанныхНаправленийНажатие()

#КонецОбласти

#Область ПроцедурыПодсистемыСвойств

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	// СтандартныеПодсистемы.Свойства
	//УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);	
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,, Ложь);
	НастроитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаСервере
Процедура НастроитьЭлементыДополнительныхРеквизитов()
	
	Для Каждого Элемент Из Элементы.ГруппаДополнительныеРеквизиты_1.ПодчиненныеЭлементы Цикл
		
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			
			Если Элемент.МногострочныйРежим <> Истина Тогда
				
				Элемент.РастягиватьПоГоризонтали = Ложь;
				
			Иначе
				
				Элемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Лево;
				Элемент.РастягиватьПоВертикали   = Ложь;
				Элемент.РастягиватьПоГоризонтали = Истина;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодразделения

&НаКлиенте
Процедура ДоступныеОрганизацииЗапретМодификацииСостава(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеЛица

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломИзменения(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОбъектСвязи", Объект.Ссылка);	
		ПараметрыФормы.Вставить("Ключ"		 , Элемент.ТекущаяСтрока);	
		
		ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", 
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)	
	
	Если Не Копирование Тогда
		Отказ = Истина;
		
		СписокВариантов = Новый СписокЗначений;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			СписокВариантов.Добавить("Выбрать", НСтр("ru = 'Выбрать'"));
		КонецЕсли;
		
		СписокВариантов.Добавить("Создать", НСтр("ru = 'Создать'"));
		СписокВариантов.Добавить("Отмена" , НСтр("ru = 'Отмена'"));
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КонтактныеЛицаПередНачаломДобавленияЗавершение", ЭтотОбъект, ПараметрыОповещения);	
		Если СписокВариантов.Количество() = 2 Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокВариантов[0].Значение);
		Иначе	
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Выберите действие...'"), СписокВариантов);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломДобавленияЗавершение(Вариант, Контекст) Экспорт
	
	Если Вариант = Неопределено
		ИЛИ Вариант = "Отмена" Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектСвязи", 		Объект.Ссылка);
	// ++ VOG Солодов В.В. 27.05.2019 task 325
	ПараметрыФормы.Вставить("ОграничитьВыбор", 	Истина);
	// -- VOG Солодов В.В. 27.05.2019
	
	Если Вариант = "Создать" Тогда
		СуффиксИмяФормы = "ФормаОбъекта";		
	Иначе			
		СуффиксИмяФормы = "ФормаВыбора";		
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров." + СуффиксИмяФормы,
	ПараметрыФормы, Контекст.Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	//Связи
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьСвязиОбъекта(ВыбранноеЗначение, Объект.Ссылка);
	КонецЕсли;
	
	Элемент.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМенеджеры

&НаКлиенте
Процедура МенеджерыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ 			= Истина;
	ПараметрыФормы 	= Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец",Объект.Ссылка));
	ОткрытьФорму("РегистрСведений.вогМенеджерыОбъектов.Форма.ФормаЗаписи",ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыIDCards

&НаКлиенте
Процедура ListIDCardsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ 					= Истина;
	ПараметрыЗаполненения 	= Новый Структура("ОбъектСвязи,Партнер",Объект.Ссылка,Объект.Партнер);
	ПараметрыФормы 			= Новый Структура("ЗначенияЗаполнения",ПараметрыЗаполненения);
	ОткрытьФорму("РегистрСведений.вогIDCards.ФормаЗаписи",ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыРаспределительныеЦентры

&НаКлиенте
Процедура РаспределительныеЦентрыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанныеРЦ = Элементы.РаспределительныеЦентры.ТекущиеДанные;
	Если ТекущиеДанныеРЦ <> Неопределено Тогда
		КлючЗаписиРаспеределительныйЦентр = Новый Структура("РаспределительныйЦентр,ОбъектСвязи"
		,ТекущиеДанныеРЦ.РаспределительныйЦентр,Объект.Ссылка);
		УдалитьРаспределительныйЦентр(КлючЗаписиРаспеределительныйЦентр);
	КонецЕсли;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 30.08.2019 bugs 620
&НаКлиенте
Процедура СписокРаспределительныеЦентрыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	ТекущиеДанные 			= Элементы.СписокРаспределительныеЦентры.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		// ++ VOG Солодов В.В. 02.09.2021 DEV-416
		ПоказатьЗначение(Неопределено, ТекущиеДанные.РаспределительныйЦентр);
		// До изменения
		//ОткрытьЗначение(ТекущиеДанные.РаспределительныйЦентр);
		// -- VOG Солодов В.В. 02.09.2021 DEV-416
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 30.08.2019

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыВзаимодействие

&НаКлиенте
Процедура СписокВзаимодействиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
// ++ VOG Ульянов И.В. 28.11.2019 task 941	
	//ТекущиеДанные = Элементы.СписокВзаимодействие.ТекущиеДанные;
	//
	//Если ТекущиеДанные <> Неопределено Тогда
	//	ОткрытьЗначение(ТекущиеДанные.Ссылка);
	//КонецЕсли;
// ++ VOG Ульянов И.В. 28.11.2019 task 941	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаВиджета

// ++ VOG Солодов В.В. 02.09.2021 DEV-416
&НаКлиенте
Процедура ТаблицаВиджетаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	СтандартнаяОбработка = Ложь;
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ОписаниеОповещения 			= Новый ОписаниеОповещения("ОткрытьЗначениеРасшифровки", ЭтотОбъект);
	ИсточникДоступныхНастроек 	= Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыВиджеты);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
		АдресДанныхРасшифровкиВиджеты, ИсточникДоступныхНастроек);
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия);
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьЗначениеРасшифровки(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрВыполненногоДействия)
		И Не ТипЗнч(ПараметрВыполненногоДействия) = Тип("СправочникСсылка.Пользователи") Тогда
		ПоказатьЗначение(Неопределено, ПараметрВыполненногоДействия);
	КонецЕсли;
	
КонецФункции // -- VOG Солодов В.В. 02.09.2021 DEV-416

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТегиНаправлений

&НаКлиентеНаСервереБезКонтекста
Процедура ПоместитьНаправлениеВТабличнуюЧасть(Форма)
	
	Если НЕ ЗначениеЗаполнено(Форма.Направление) Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Объект.Направления.НайтиСтроки(Новый Структура("Направление", Форма.Направление)).Количество() = 0 Тогда
		
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
		Форма.Модифицированность = Истина;
		
		НоваяСтрока = Форма.Объект.Направления.Добавить();
		НоваяСтрока.Направление = Форма.Направление;
		
		Форма.ОбновитьОблакоНаправлений();
		
	КонецЕсли;
	
	Форма.Направление = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОблакоНаправлений()
	
	ПрефиксЭлемента = "Направление_";
	ПрефиксСтроки   = "СтрокаНаправлений_";
	
	МассивУдаляемых = Новый Массив;
	Для Каждого ЭлементНаправление Из Элементы.СтрокаНаправлений_.ПодчиненныеЭлементы Цикл
		Если Лев(ЭлементНаправление.Имя, СтрДлина(ПрефиксЭлемента)) = ПрефиксЭлемента Тогда
			МассивУдаляемых.Добавить(ЭлементНаправление);
			
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементНаправление Из МассивУдаляемых Цикл
		Элементы.Удалить(ЭлементНаправление);
	КонецЦикла;
	
	МаксДлинаПервойСтроки = 61;
	МаксДлинаСтроки       = МаксДлинаПервойСтроки + 24;
	НомерЭлемента 		  = 0;
	НомерСтрокиЭлементов  = 1;
	ТекущаяДлинаСтроки    = 0;
	ГруппаЭлементов		  = Элементы.СтрокаНаправлений_;
	
	Для Каждого СтрокаНаправление Из Объект.Направления Цикл
		НомерЭлемента = НомерЭлемента + 1;
		ПредставлениеНаправления = Строка(СтрокаНаправление.Направление);
		Если СтрДлина(ПредставлениеНаправления) > 15 Тогда
			ПредставлениеНаправления = Лев(ПредставлениеНаправления, 15) + "...";
			ДлинаНаправления = 15-1;
		Иначе
			ДлинаНаправления = СтрДлина(ПредставлениеНаправления)+1;
		КонецЕсли;
		
		КомпонентыНаправления = Новый Массив;
		КомпонентыНаправления.Добавить(Новый ФорматированнаяСтрока(ПредставлениеНаправления + " "));
		КомпонентыНаправления.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , "НаправлениеИД_" + СтрокаНаправление.НомерСтроки));
		
		ЭлементНаправление = Элементы.Добавить(ПрефиксЭлемента + НомерЭлемента, Тип("ДекорацияФормы"), ГруппаЭлементов);
		
		ЭлементНаправление.Вид					   = ВидДекорацииФормы.Надпись;
		ЭлементНаправление.Заголовок			   = Новый ФорматированнаяСтрока(КомпонентыНаправления);
		ЭлементНаправление.Подсказка			   = Строка(СтрокаНаправление.Направление);
		ЭлементНаправление.ЦветФона				   = ЦветаСтиля.ЦветФонаФормы;
		ЭлементНаправление.Рамка 				   = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		ЭлементНаправление.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементНаправление.Ширина 				   = ДлинаНаправления;
		
		ЭлементНаправление.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_НаправлениеОбработкаНавигационнойСсылки");
		
	КонецЦикла;
	
	СоздатьСтраницыНаправлений();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСтраницыНаправлений()
	
	Если _ИнформацияОЗакладках <> Неопределено Тогда 
		ПеренестиДанныеВТаблицыОбъекта(Объект);
		Для Каждого КиЗ Из _ИнформацияОЗакладках.Элементы Цикл 
			// в этом соответствии все элементы в том числе и подчиненные, поэтому в попытке
			Попытка
				Элементы.Удалить(Элементы[КиЗ.Ключ]);
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		МассивРеквизитов = Новый Массив;
		// ++ Харченко Д.И. № 000002202 - 05.09.2018 / Удаление ТЧ Конкуренты. Удалил конкурентов
		МассивЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"CRM_ДополнительнаяИнформация,Поставщики,Персонал");
		// --
		Для Каждого ЭлементМассива Из МассивЭлементов Цикл
			Для Каждого КлючЗначение Из _ИнформацияОЗакладках[ЭлементМассива] Цикл 
				Если ТипЗнч(КлючЗначение) = Тип("КлючИЗначение") Тогда 
					МассивРеквизитов.Добавить(КлючЗначение.Значение);
				Иначе	
					МассивРеквизитов.Добавить(КлючЗначение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ИзменитьРеквизиты(, МассивРеквизитов);
		
	КонецЕсли;
	
	ИнформацияОЗакладках = Новый Структура();
	//ИнформацияОЗакладках.Вставить("Конкуренты"                  , Новый Соответствие); // ++ Харченко Д.И. № 000002202 - 05.09.2018 / Удаление ТЧ Конкуренты. //TODO: Удалить после проверки
	ИнформацияОЗакладках.Вставить("CRM_ДополнительнаяИнформация", Новый Соответствие);
	ИнформацияОЗакладках.Вставить("Поставщики"				    , Новый Соответствие);
	ИнформацияОЗакладках.Вставить("Персонал"				    , Новый Соответствие);
	
	ИнформацияОЗакладках.Вставить("Элементы"					, Новый Соответствие);
	ИнформацияОЗакладках.Вставить("КлючиСтраниц"				, Новый Соответствие);
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Каждого СтрокаНД Из Объект.Направления Цикл 
		ДобавляемыеРеквизиты.Очистить();
		
		КлючСтраницы = ИдентификаторЭлемента(СтрокаНД.Направление);
		Если ЗначениеЗаполнено(ИнформацияОЗакладках.КлючиСтраниц.Получить(СтрокаНД.Направление)) Тогда 
			//страница уже существует (в т.ч. строка введена несколько раз)
			Продолжить;
			
		КонецЕсли;
		
		ИнформацияОЗакладках.КлючиСтраниц.Вставить(СтрокаНД.Направление, КлючСтраницы);
		
		//НаправлениеДеятельности
		эСтраницаНД = Элементы.Вставить("СтраницаНД" + КлючСтраницы, Тип("ГруппаФормы"), Элементы.СтраницыНаправлений);
		эСтраницаНД.Заголовок = СтрокаНД.Направление;
		
		эСтраницыНД = Элементы.Добавить("СтраницыНД" + КлючСтраницы, Тип("ГруппаФормы"), эСтраницаНД);
		эСтраницыНД.Вид = ВидГруппыФормы.Страницы;
		эСтраницыНД.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		ИнформацияОЗакладках.Элементы.Вставить(эСтраницаНД.Имя, СтрокаНД.Направление);
		
		ГруппаГиперссылок    				  = Элементы.Вставить("ГруппаГиперссылок" + КлючСтраницы, Тип("ГруппаФормы"), эСтраницаНД, эСтраницыНД);
		ГруппаГиперссылок.Вид 				  = ВидГруппыФормы.ОбычнаяГруппа;  
		ГруппаГиперссылок.Отображение 		  = ОтображениеОбычнойГруппы.Нет;
		ГруппаГиперссылок.ОтображатьЗаголовок = Ложь;
		ГруппаГиперссылок.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		// ++ Харченко Д.И. № 000002202 - 05.09.2018 / Удаление ТЧ Конкуренты. //TODO: Удалить после проверки
		//Конкуренты
		//ГиперссылкаСтранциы = ДобавитьГиперссылкуСтраницы(
		//	"Гиперссылка_СтраницаНД_Конкуренты" + КлючСтраницы, 
		//	ГруппаГиперссылок,
		//	НСтр("ru = 'Конкуренты'"),
		//	Новый Шрифт(10,, Истина)
		//);
		//ИнформацияОЗакладках.Элементы.Вставить(ГиперссылкаСтранциы.Имя, СтрокаНД.Направление);
		
		//эСтраницаНДТаб = Элементы.Добавить("СтраницаНД_Конкуренты" + КлючСтраницы, Тип("ГруппаФормы"), эСтраницыНД);
		//СоздатьТаблицуКонкуренты(КлючСтраницы, эСтраницаНДТаб, ИнформацияОЗакладках, СтрокаНД.Направление);
		
		//ИнформацияОЗакладках.Элементы.Вставить(эСтраницаНДТаб.Имя, СтрокаНД.Направление);
		//--
		
		//Поставщики
		ГиперссылкаСтранциы = ДобавитьГиперссылкуСтраницы(
		"Гиперссылка_СтраницаНД_Поставщики" + КлючСтраницы, 
		ГруппаГиперссылок,
		НСтр("ru = 'Поставщики'")
		);
		ИнформацияОЗакладках.Элементы.Вставить(ГиперссылкаСтранциы.Имя, СтрокаНД.Направление);
		
		эСтраницаНДТаб = Элементы.Вставить("СтраницаНД_Поставщики" + КлючСтраницы, Тип("ГруппаФормы"), эСтраницыНД);
		СоздатьТаблицуПоставщики(КлючСтраницы, эСтраницаНДТаб, ИнформацияОЗакладках, СтрокаНД.Направление);
		
		ИнформацияОЗакладках.Элементы.Вставить(эСтраницаНДТаб.Имя, СтрокаНД.Направление);
		
		//Персонал
		ГиперссылкаСтранциы = ДобавитьГиперссылкуСтраницы(
		"Гиперссылка_СтраницаНД_Персонал" + КлючСтраницы, 
		ГруппаГиперссылок,
		НСтр("ru = 'Персонал'")
		);
		ИнформацияОЗакладках.Элементы.Вставить(ГиперссылкаСтранциы.Имя, СтрокаНД.Направление);
		
		эСтраницаНДТаб = Элементы.Вставить("СтраницаНД_Персонал" + КлючСтраницы, Тип("ГруппаФормы"), эСтраницыНД);
		СоздатьТаблицуПерсонал(КлючСтраницы, эСтраницаНДТаб, ИнформацияОЗакладках, СтрокаНД.Направление);
		
		ИнформацияОЗакладках.Элементы.Вставить(эСтраницаНДТаб.Имя, СтрокаНД.Направление);
		
		//ДополнительнаяИнформация
		ГиперссылкаСтранциы = ДобавитьГиперссылкуСтраницы(
		"Гиперссылка_СтраницаНД_ДополнительнаяИнформация" + КлючСтраницы, 
		ГруппаГиперссылок,
		НСтр("ru = 'Доп. информация'")
		);
		ИнформацияОЗакладках.Элементы.Вставить(ГиперссылкаСтранциы.Имя, СтрокаНД.Направление);
		
		эСтраницаНДТаб = Элементы.Вставить("СтраницаНД_ДополнительнаяИнформация" + КлючСтраницы, Тип("ГруппаФормы"), эСтраницыНД);
		СоздатьТаблицуДополнительнаяИнформация(КлючСтраницы, эСтраницаНДТаб, ИнформацияОЗакладках, СтрокаНД.Направление);
		
		ИнформацияОЗакладках.Элементы.Вставить(эСтраницаНДТаб.Имя, СтрокаНД.Направление);
		
	КонецЦикла;
	
	_ИнформацияОЗакладках = Новый ФиксированнаяСтруктура(ИнформацияОЗакладках);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуКонкуренты(КлючСтраницы, ГруппаСтраница, ИнформацияОЗакладках, Направление)
	
	// ++ Харченко Д.И. № 000002202 - 05.09.2018 / Удаление ТЧ Конкуренты. //TODO: Удалить после проверки
	
	//#Область ДобавляемыеРеквизиты
	
	//ИмяОсновнойТаблицы = "Конкуренты";
	
	//мтдТорговыеТочки = Метаданные.Справочники.вогТорговыеТочки;
	//мтдРеквизиты = мтдТорговыеТочки.Реквизиты;
	//
	//ДобавляемыеРеквизиты = Новый Массив;
	//
	//р_тз_Конкуренты = Новый РеквизитФормы("Конкуренты" + КлючСтраницы, Новый ОписаниеТипов("ТаблицаЗначений"),,,Истина);
	//
	//рКонкурент    = Новый РеквизитФормы("Конкурент",               Новый ОписаниеТипов("СправочникСсылка.Партнеры"),	   р_тз_Конкуренты.Имя,мтдТорговыеТочки.ТабличныеЧасти.Конкуренты.Реквизиты.Конкурент.Синоним,      Истина);
	//рТТКонкурента = Новый РеквизитФормы("ТорговаяТочкаКонкурента", Новый ОписаниеТипов("СправочникСсылка.вогТорговыеТочки"),р_тз_Конкуренты.Имя,мтдТорговыеТочки.ТабличныеЧасти.Конкуренты.Реквизиты.ТорговаяТочкаКонкурента,Истина);
	//
	//ДобавляемыеРеквизиты.Добавить(р_тз_Конкуренты);
	//ДобавляемыеРеквизиты.Добавить(рКонкурент);
	//ДобавляемыеРеквизиты.Добавить(рТТКонкурента);
	//
	//ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	//
	//ИнформацияОЗакладках.Конкуренты.Вставить(Направление,р_тз_Конкуренты.Имя);
	//
	//#КонецОбласти
	
	//э_тзКонкуренты = Элементы.Добавить("Конкуренты" + КлючСтраницы,Тип("ТаблицаФормы"), ГруппаСтраница);
	//э_тзКонкуренты.ПутьКДанным = "Конкуренты" + КлючСтраницы;
	//э_тзКонкуренты.ВысотаВСтрокахТаблицы = 3;
	
	//эКонкурент = Элементы.Добавить("Контрагент" + КлючСтраницы,Тип("ПолеФормы"),э_тзКонкуренты);
	//эКонкурент.Вид = ВидПоляФормы.ПолеВвода;
	//эКонкурент.ПутьКДанным = "Конкуренты" + КлючСтраницы+"." + "Конкурент" ;
	
	//ЭТТ = Элементы.Добавить("ТТ" + КлючСтраницы,Тип("ПолеФормы"),э_тзКонкуренты);
	//ЭТТ.Вид = ВидПоляФормы.ПолеВвода;
	//ЭТТ.ПутьКДанным = "Конкуренты" + КлючСтраницы+"." + "ТорговаяТочкаКонкурента" ;
	
	//Заполнение
	//СтрокиНаправления = Объект.Конкуренты.НайтиСтроки(Новый Структура("Направление", Направление));
	//Для Каждого СтрокаНаправления Из СтрокиНаправления Цикл 
	//	СтрокаТаблицы = ЭтотОбъект[р_тз_Конкуренты.Имя].Добавить();
	//	ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрокаНаправления);
	//	
	//КонецЦикла;
	
	//--
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуПерсонал(КлючСтраницы, ГруппаСтраница, ИнформацияОЗакладках, Направление);
	
	#Область ДобавляемыеРеквизиты
	
	ИмяОсновнойТаблицы = "Персонал";
	
	мтдТорговыеТочки = Метаданные.Справочники.вогТорговыеТочки;
	мтдРеквизиты = мтдТорговыеТочки.Реквизиты;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	р_тз_Персонал = Новый РеквизитФормы("Персонал" + КлючСтраницы, Новый ОписаниеТипов("ТаблицаЗначений"),,,Истина);
	
	рПерсонал  = Новый РеквизитФормы("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров"), р_тз_Персонал.Имя, мтдТорговыеТочки.ТабличныеЧасти.Персонал.Реквизиты.Сотрудник.Синоним, Истина);
	рКПерсонал = Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"),р_тз_Персонал.Имя, мтдТорговыеТочки.ТабличныеЧасти.Персонал.Реквизиты.Комментарий, Истина);
	
	ДобавляемыеРеквизиты.Добавить(р_тз_Персонал);
	ДобавляемыеРеквизиты.Добавить(рПерсонал);
	ДобавляемыеРеквизиты.Добавить(рКПерсонал);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ИнформацияОЗакладках.Персонал.Вставить(Направление, р_тз_Персонал.Имя);
	
	#КонецОбласти
	
	э_тзПерсонал = Элементы.Добавить("Персонал" + КлючСтраницы,Тип("ТаблицаФормы"), ГруппаСтраница);
	э_тзПерсонал.ПутьКДанным = "Персонал" + КлючСтраницы;
	э_тзПерсонал.ВысотаВСтрокахТаблицы = 3;
	
	эСотрудник = Элементы.Добавить("Сотрудник" + КлючСтраницы,Тип("ПолеФормы"),э_тзПерсонал);
	эСотрудник.Вид = ВидПоляФормы.ПолеВвода;
	эСотрудник.ПутьКДанным = "Персонал" + КлючСтраницы+"." + "Сотрудник" ;
	
	ЭК = Элементы.Добавить("Комментарий" + КлючСтраницы,Тип("ПолеФормы"),э_тзПерсонал);
	ЭК.Вид = ВидПоляФормы.ПолеВвода;
	ЭК.ПутьКДанным = "Персонал" + КлючСтраницы+"." + "Комментарий" ;
	
	//Заполнение
	СтрокиНаправления = Объект.Персонал.НайтиСтроки(Новый Структура("Направление", Направление));
	Для Каждого СтрокаНаправления Из СтрокиНаправления Цикл 
		СтрокаТаблицы = ЭтотОбъект[р_тз_Персонал.Имя].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрокаНаправления);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуДополнительнаяИнформация(КлючСтраницы, ГруппаСтраница, ИнформацияОЗакладках, Направление);
	
	#Область ДобавляемыеРеквизиты
	
	ИмяОсновнойТаблицы = "CRM_ДополнительнаяИнформация";
	
	мтдТорговыеТочки = Метаданные.Справочники.вогТорговыеТочки;
	мтдРеквизиты = мтдТорговыеТочки.Реквизиты;
	мтдТаблицы   = мтдТорговыеТочки.ТабличныеЧасти.CRM_ДополнительнаяИнформация;
	ДобавляемыеРеквизиты = Новый Массив;
	
	рТаблица = Новый РеквизитФормы("CRM_ДополнительнаяИнформация" + КлючСтраницы, Новый ОписаниеТипов("ТаблицаЗначений"),,,Истина);
	
	рСвойство    	 = Новый РеквизитФормы("Свойство", мтдТаблицы.Реквизиты["Свойство"].Тип, рТаблица.Имя, мтдТаблицы.Реквизиты["Свойство"].Синоним,  Истина);
	рЗначение      	 = Новый РеквизитФормы("Значение", мтдТаблицы.Реквизиты["Значение"].Тип, рТаблица.Имя, мтдТаблицы.Реквизиты["Значение"].Синоним,  Истина);
	рДатаРегистрации = Новый РеквизитФормы("ДатаРегистрации", мтдТаблицы.Реквизиты["ДатаРегистрации"].Тип, рТаблица.Имя, мтдТаблицы.Реквизиты["ДатаРегистрации"].Синоним,  Истина);
	рДатаОкончания   = Новый РеквизитФормы("ДатаОкончания", мтдТаблицы.Реквизиты["ДатаОкончания"].Тип, рТаблица.Имя, мтдТаблицы.Реквизиты["ДатаОкончания"].Синоним,  Истина);
	
	ДобавляемыеРеквизиты.Добавить(рТаблица);
	ДобавляемыеРеквизиты.Добавить(рСвойство);
	ДобавляемыеРеквизиты.Добавить(рЗначение);
	ДобавляемыеРеквизиты.Добавить(рДатаРегистрации);
	ДобавляемыеРеквизиты.Добавить(рДатаОкончания);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ИнформацияОЗакладках.CRM_ДополнительнаяИнформация.Вставить(Направление,рТаблица.Имя);
	
	#КонецОбласти
	
	эТаблица = Элементы.Добавить(рТаблица.Имя,Тип("ТаблицаФормы"), ГруппаСтраница);
	эТаблица.ПутьКДанным ="CRM_ДополнительнаяИнформация" + КлючСтраницы;
	эТаблица.ВысотаВСтрокахТаблицы = 3;
	
	эСвойство = Элементы.Добавить("Свойство" + КлючСтраницы,Тип("ПолеФормы"), эТаблица);
	эСвойство.Вид = ВидПоляФормы.ПолеВвода;
	эСвойство.ПутьКДанным = эТаблица.Имя+"." + "Свойство" ;
	
	НоваяСвязь = Новый СвязьПоТипу(
	"Элементы."+эТаблица.Имя+".ТекущиеДанные.Свойство");
	
	эЗначение = Элементы.Добавить("Значение" + КлючСтраницы,Тип("ПолеФормы"), эТаблица);
	эЗначение.Вид = ВидПоляФормы.ПолеВвода;
	эЗначение.ПутьКДанным = эТаблица.Имя+"." + "Значение" ;
	эЗначение.СвязьПоТипу = НоваяСвязь;
	
	МассивСвязиПараметровВыбора = Новый Массив();
	МассивСвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы."+эТаблица.Имя+".ТекущиеДанные.Свойство"));
	ФиксированныйМассивСвязи = Новый ФиксированныйМассив(МассивСвязиПараметровВыбора);
	
	эЗначение.СвязиПараметровВыбора = ФиксированныйМассивСвязи;
	
	//эДатаРегистрации = Элементы.Добавить("ДатаРегистрации" + КлючСтраницы,Тип("ПолеФормы"),эТаблица);
	//эДатаРегистрации.Вид = ВидПоляФормы.ПолеВвода;
	//эДатаРегистрации.ПутьКДанным = эТаблица.Имя+"." + "ДатаРегистрации" ;
	//
	//эДатаОкончания = Элементы.Добавить("ДатаОкончания" + КлючСтраницы,Тип("ПолеФормы"),эТаблица);
	//эДатаОкончания.Вид = ВидПоляФормы.ПолеВвода;
	//эДатаОкончания.ПутьКДанным = эТаблица.Имя+"." + "ДатаОкончания" ;
	
	//Заполнение
	СтрокиНаправления = Объект[ИмяОсновнойТаблицы].НайтиСтроки(Новый Структура("Направление", Направление));
	Для Каждого СтрокаНаправления Из СтрокиНаправления Цикл 
		СтрокаТаблицы = ЭтотОбъект[рТаблица.Имя].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрокаНаправления);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуПоставщики(КлючСтраницы, ГруппаСтраница, ИнформацияОЗакладках, Направление);
	
	#Область ДобавляемыеРеквизиты
	
	ИмяОсновнойТаблицы = "Поставщики";
	мтдТорговыеТочки = Метаданные.Справочники.вогТорговыеТочки;
	мтдРеквизиты = мтдТорговыеТочки.Реквизиты;
	мтдТаблицы   = мтдТорговыеТочки.ТабличныеЧасти[ИмяОсновнойТаблицы];
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	рТаблица = Новый РеквизитФормы(ИмяОсновнойТаблицы + КлючСтраницы,Новый ОписаниеТипов("ТаблицаЗначений"),,,Истина);
	
	рПоставщик = Новый РеквизитФормы("Поставщик", мтдТаблицы.Реквизиты["Поставщик"].Тип, рТаблица.Имя, мтдТаблицы.Реквизиты["Поставщик"].Синоним,  Истина);
	
	ДобавляемыеРеквизиты.Добавить(рТаблица);
	ДобавляемыеРеквизиты.Добавить(рПоставщик);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ИнформацияОЗакладках[ИмяОсновнойТаблицы].Вставить(Направление, рТаблица.Имя);
	
	#КонецОбласти
	
	эТаблица = Элементы.Добавить(рТаблица.Имя,Тип("ТаблицаФормы"), ГруппаСтраница);
	эТаблица.ПутьКДанным = рТаблица.Имя;
	эТаблица.ВысотаВСтрокахТаблицы = 3;
	
	эПоставщик = Элементы.Добавить("Поставщик" + КлючСтраницы,Тип("ПолеФормы"), эТаблица);
	эПоставщик.Вид = ВидПоляФормы.ПолеВвода;
	эПоставщик.ПутьКДанным = рТаблица.Имя+"." + "Поставщик" ;
	
	//Заполнение
	СтрокиНаправления = Объект[ИмяОсновнойТаблицы].НайтиСтроки(Новый Структура("Направление", Направление));
	Для Каждого СтрокаНаправления Из СтрокиНаправления Цикл 
		СтрокаТаблицы = ЭтотОбъект[рТаблица.Имя].Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрокаНаправления);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиДанныеВТаблицыОбъекта(ОбъектВладелецТаблицы)
	// ++ Харченко Д.И. № 000002202 - 05.09.2018 / Удаление ТЧ Конкуренты. //TODO: Удалить после проверки
	//ПеренестиДанныеВТаблицуОбъекта("Конкуренты"					 , ОбъектВладелецТаблицы);
	ПеренестиДанныеВТаблицуОбъекта("Поставщики"					 , ОбъектВладелецТаблицы);
	ПеренестиДанныеВТаблицуОбъекта("Персонал"					 , ОбъектВладелецТаблицы);
	ПеренестиДанныеВТаблицуОбъекта("CRM_ДополнительнаяИнформация", ОбъектВладелецТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиДанныеВТаблицуОбъекта(ИмяТаблицы, ОбъектВладелецТаблицы)
	
	ТаблицаОбъекта = ОбъектВладелецТаблицы[ИмяТаблицы];
	ТаблицаОбъекта.Очистить();
	Для Каждого КлючЗначение Из _ИнформацияОЗакладках[ИмяТаблицы] Цикл 
		ТаблицаФормы = ЭтотОбъект[КлючЗначение.Значение];
		Для каждого СтрокаТаблицы Из ТаблицаФормы Цикл
			НоваяСтрока = ТаблицаОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
			НоваяСтрока.Направление = КлючЗначение.Ключ;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторЭлемента(Элемент)
	Возврат  СтрЗаменить(Строка(Элемент.УникальныйИдентификатор()),"-","_");
КонецФункции

&НаСервере
Функция ДобавитьГиперссылкуСтраницы(Имя, ОбластьДобавления, ЗаголовокГипперссылки, Шрифт = Неопределено)
	
	ГиперссылкаСтранциы             = Элементы.Добавить(Имя, Тип("ДекорацияФормы"), ОбластьДобавления);
	ГиперссылкаСтранциы.Вид         = ВидДекорацииФормы.Надпись;
	ГиперссылкаСтранциы.Заголовок   = ЗаголовокГипперссылки;
	ГиперссылкаСтранциы.Гиперссылка = Истина;
	
	Если Шрифт <> Неопределено Тогда
		ГиперссылкаСтранциы.Шрифт = Шрифт;
		
	КонецЕсли;
	
	ГиперссылкаСтранциы.УстановитьДействие("Нажатие", "Подключаемый_ГиперссылкаСтраницыДанныхНаправленийНажатие");
	
	Возврат ГиперссылкаСтранциы;
	
КонецФункции // ДобавитьГиперссылкуСтранциы()

#КонецОбласти

&НаСервереБезКонтекста
Функция ОбъектИмеетФайлы(Знач ВладелецФайлов, Знач ФайлИсключение = Неопределено, Фильтр)
	Возврат CRM_ПрисоединенныеФайлы.ОбъектИмеетФайлы(ВладелецФайлов, ФайлИсключение);
КонецФункции // ОбъектИмеетФайлы()

&НаСервере
Процедура CRM_УправлениеВидимостьюРамкиКартинки()
	Если ЗначениеЗаполнено(АдресКартинки) Тогда
		Элементы.ФайлКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);		
	Иначе
		Элементы.ФайлКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);		
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ВывестиНедоступностьКартинки()
	АдресКартинки = "";
	Элементы.ФайлКартинки.ТекстНевыбраннойКартинки
	= НСтр("ru = 'Картинка не доступна (не доступен том) обратитесь к администратору.'");
	Объект.CRM_Фотография = Справочники.КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПустаяСсылка();
	CRM_УправлениеВидимостьюРамкиКартинки();	
КонецПроцедуры // ВывестиНедоступностьКартинки()

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаСервере
Процедура УстановитьВидимостьРеквизитовКИ()
	
	СтруктураОтбора			= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.СправочниквогТорговыеТочки, Ложь);
	флагВыводаГиперСсылки	= (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	
	Для Каждого СтрокаДопРеквизита Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если НЕ СтрокаДопРеквизита.Выводить Тогда Продолжить; КонецЕсли;
		
		Выводить = Истина;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			флаг_1 = НЕ (ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита] = "<адрес сайта не указан>") И НЕ РежимВидимостиПоказатьТолькоВажные;
		Иначе	
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]);
		КонецЕсли;	
		
		// ++ Тищенко В.В. 05.02.2019
		//Закоментировано условие рынок
		
		//+вог
		//Если СтрокаДопРеквизита.Вид = Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки
		//  И ЗначениеЗаполнено(Объект.Рынок) Тогда
		//{[-](фрагмент удален)Администратор 28.06.2018 16:55:44 ID
		//Представление = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Рынок, Справочники.ВидыКонтактнойИнформации.АдресПартнера);
		//}Администратор 28.06.2018 16:55:44
		//{[+](фрагмент добавлен), Виноградов Дмитрий 28.06.2018 16:55:59 ID
		//	Представление = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Рынок, Справочники.ВидыКонтактнойИнформации.АдресРынка);
		//}Администратор 28.06.2018 16:55:59
		
		//Иначе	
		Представление = СтрокаДопРеквизита.Представление;
		//КонецЕсли;
		//-вог
		
		// -- Тищенко В.В.
		
		// +CRM
		Для Каждого СтрокаДобавленногоРеквизита ИЗ ЭтотОбъект.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы Цикл
			Если СтрокаДобавленногоРеквизита.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(СтрокаДобавленногоРеквизита.Значение, СтрокаДопРеквизита.ИмяРеквизита) Тогда
				//+вог
				Если СтрокаДобавленногоРеквизита.Значение = СтрокаДопРеквизита.ИмяРеквизита
					И СтрокаДопРеквизита.Вид = Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки Тогда
					ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита] = Представление;
					Элементы[СтрокаДобавленногоРеквизита.Значение].ТолькоПросмотр = ЗначениеЗаполнено(Объект.Рынок);	
					
				КонецЕсли;
				
				//СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить");
				СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить") ИЛИ (Не ЗначениеЗаполнено(Представление) И Не РедактироватьДР);
				//-вог
				
				Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = (Выводить И ((СтрокаДопРеквизита.Выводить И НЕ СкрыватьПолеКИ) ИЛИ ((РедактироватьДР И НЕ СкрыватьПолеКИ) ИЛИ флаг_1)));
				
			КонецЕсли;
		КонецЦИкла;
		// -CRM
		
		Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт Тогда
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= Новый Цвет();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= Новый Шрифт();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Истина;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "";
			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].Высота = 5;
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].МногострочныйРежим = Истина;
				КонецЕсли;
				Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
					ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
					ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора				= истина;
					// ++ VOG Солодов В.В. 02.03.2020 CRM-196
					Если СтрокаДопРеквизита.Вид.ВидРедактирования = "Диалог" Тогда
					// До изменения
					//Если СтрокаДопРеквизита.Вид.РедактированиеТолькоВДиалоге Тогда
					// -- VOG Солодов В.В. 02.03.2020
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветФона				= WebЦвета.Кремовый;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ИмяРеквизита = Элементы[СтрокаДопРеквизита.ИмяРеквизита].Имя;
			АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
			Если ПустаяСтрока(АдресСайтаКомпании) Тогда
				ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.РедактироватьКонтактныеДанные_1.Видимость = флагВыводаГиперСсылки И НЕ РежимВидимостиПоказатьТолькоВажные;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи(Элемент)
	CRM_УправлениеКонтактнойИнформациейКлиент.ОсновнойДляСвязиНажатие(ЭтотОбъект, Элемент);
КонецПроцедуры // Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи()

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
		// Если это адрес электронной почты, то надо проверить на коррректность заполнения.
		РезультатПроверки = CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПолучитьТипПроверитьЗаполнение(ЭтотОбъект, Элемент);
		Если НЕ РезультатПроверки = Неопределено И РезультатПроверки.КодОшибки<>0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	CRM_УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКонтактныеДанныеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РедактироватьДР Тогда
		РедактироватьКонтактныеДанные = НСтр("ru = 'Скрыть дополнительные контактные данные'");
		РедактироватьДР = Истина;
	Иначе
		РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
		РедактироватьДР = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзмененииАдресаЭлектроннойПочты(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомер(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьСМСНаНомер","");
		Телефон = ЭтотОбъект[ИмяРеквизита];
		Если ПустаяСтрока(Телефон) Тогда Возврат; КонецЕсли;
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Объект.Ссылка);
		Структура.Вставить("Телефон", ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Телефон));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьEmail(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьEmail","");
	
	АдресЭлектроннойПочты = ЭтотОбъект[ИмяРеквизита];
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(АдресЭлектроннойПочты)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрРезультат = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(АдресЭлектроннойПочты);
	Если СтрРезультат.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрРезультат.Сообщение,,ИмяРеквизита);
		Возврат;
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.Добавить(Объект.Ссылка, СтрРезультат.АдресЭП);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
	
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПозвонитьНаНомер(Элемент)
	
	// +СофтФон
	сфпСофтФонПроКлиентПереопределяемый.сфпПодключаемый_ПозвонитьНаНомер(ЭтотОбъект, Объект);	
	// -СофтФон
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		Подключаемый_РедактироватьАдресСайтаКомпании(Элемент);
	Иначе
		Если Найти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", ЭтотОбъект), АдресСайтаКомпании);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияБезДействия(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		АдресСайтаКомпании = "";
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводАдресаСайтаКомпанииЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, АдресСайтаКомпании, "Введите адрес сайта");
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура ВводАдресаСайтаКомпанииЗавершение(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
	Если АдресСайтаКомпании <> Неопределено Тогда
		Если ПустаяСтрока(АдресСайтаКомпании) Тогда
			ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
		Иначе	
			ЭтотОбъект[ИмяРеквизита] = АдресСайтаКомпании;
		КонецЕсли;	
		
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = АдресСайтаКомпании;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM
		
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресКомпании","");
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элементы[ИмяРеквизита], Неопределено, Ложь);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКарте(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОткрытьАдресНаИнтернетКарте","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(НайденныеСтроки[0].ЗначенияПолей);
	
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	СтруктураАдреса.Вставить("Представление", ЭтотОбъект[ИмяРеквизита]);
	
	// { VOG RMV 2019-03-27 task 158
	Широта	= НайденныеСтроки[0].Широта;
	Долгота	= НайденныеСтроки[0].Долгота;
	Если ЗначениеЗаполнено(Широта) И ЗначениеЗаполнено(Долгота) Тогда
		СтруктураАдреса.Вставить("Представление", Формат(Широта, "ЧРД=.") + ", " + Формат(Долгота, "ЧРД=."));
	КонецЕсли;
	// } VOG RMV 2019-03-27 task 158
	
	СписокКарт = Новый СписокЗначений;
	// ++ Харченко Д.И. №  - 26.09.2018 / 
	//СписокКарт.Добавить("GIS","Карта GIS",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	//СписокКарт.Добавить("Google","Карта Google",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	//СписокКарт.Добавить("Yandex","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	СписокКарт.Добавить("вогГеокодирование","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
	//ПоказатьВыборИзСписка(ОписаниеОповещения, СписокКарт, ТекущийЭлемент,);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокКарт.Получить(0)); 
	// -- Харченко Д.И. №  - 26.09.2018
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение(Результат, СтруктураАдреса) Экспорт
	
	СтруктураАдреса.Вставить("КоличествоОтветов",1);
	
	Если НЕ Результат = Неопределено Тогда
		СайтИнтернетКарты = Результат.Значение;
		CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочее(Элемент)
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьПрочее","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СтрокаПрочее = ЭтотОбъект[ИмяРеквизита];
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьПрочееЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, СтрокаПрочее, Строка(НайденныеСтроки[0].Вид),, Истина);
КонецПроцедуры // Подключаемый_РедактироватьПрочее

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочееЗавершение(СтрокаПрочее, ИмяРеквизита) Экспорт
	Если СтрокаПрочее <> Неопределено Тогда
		ЭтотОбъект[ИмяРеквизита] = СтрокаПрочее;
		
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = СтрокаПрочее;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM	
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьПрочее
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

&НаСервере
Процедура ЗаполнитьОписаниеАдреса()
	
	ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки;
	
	СтруктураРеквизитов = Новый Структура;
	//СтруктураРеквизитов.Вставить("РедактированиеТолькоВДиалоге"); // VOG Солодов В.В. 02.03.2020 CRM-196 // Закомментировал
	СтруктураРеквизитов.Вставить("ТолькоНациональныйАдрес");
	СтруктураРеквизитов.Вставить("Тип");
	СтруктураРеквизитов.Вставить("Родитель");
	СтруктураРеквизитов.Вставить("ВидРедактирования"); // VOG Солодов В.В. 02.03.2020 CRM-196
	
	РеквизитыВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидАдреса, СтруктураРеквизитов);
	
	// ++ VOG Солодов В.В. 02.03.2020 CRM-196
	Элементы.АдресОбязательныеПоля.РедактированиеТекста = (НЕ РеквизитыВидаКИ.ВидРедактирования = "Диалог");
	// До изменения
	//Элементы.АдресОбязательныеПоля.РедактированиеТекста = НЕ РеквизитыВидаКИ.РедактированиеТолькоВДиалоге;
	// -- VOG Солодов В.В. 02.03.2020
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", "АдресОбязательныеПоля"));
	Если Строки.Количество() = 0 Тогда
		НовСтр = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		НовСтр.ИмяРеквизита = "АдресОбязательныеПоля";
	Иначе
		НовСтр = Строки[0];
	КонецЕсли;
	
	НовСтр.Вид              = ВидАдреса;
	НовСтр.Тип              = РеквизитыВидаКИ.Тип;
	НовСтр.Родитель         = РеквизитыВидаКИ.Родитель;
	НовСтр.Выводить         = Истина;
	
КонецПроцедуры

#Область НавигацияФормы

&НаКлиенте
Процедура ВыполнитьПереходСтраницы(ИмяКоманды)
	
	Попытка
		// Выделить кнопку перехода
		Для каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
			Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
				ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
				ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
			Иначе
				ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
				ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
			КонецЕсли;
		КонецЦикла;
		// Переход страницы
		Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы[ИмяКоманды];
		
		// ++ VOG Ульянов И.В. 28.11.2019 task 941
		Если ИмяКоманды = "СтраницаВзаимодействие" Тогда						
			ЗаполнитьВиджетыНаВкладке();			
		КонецЕсли;	
		// -- VOG Ульянов И.В. 28.11.2019 task 941		
		
		Если Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя = "СтраницаСтруктураВзаимосвязи" Тогда
			ДанныеКлиента 		= Истина; КонтактнаяИнформация 	= Истина; КонтактныеЛицаОтч 		= Истина;
			ЮридическиеЛица 	= Истина; ТорговыеТочки 		= Истина; РаспределительныйЦентр 	= Истина;
			СформироватьОтчетСтурктураВзаимосвязиСервер();
		ИначеЕсли Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя = "СтраницаОбои" И Не СформированМакетОбои Тогда
			СформироватьМакетОбои();
		ИначеЕсли Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя = "СтраницаПлитка" И НЕ СформированМакетПлитка Тогда
			СформироватьМакетПлитка();
		КонецЕсли;
		
		
		//Кайдашов 14/06/19 #411
		Если Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя = "СтраницаОбои" тогда
			ЗаполненностьОбъекта = РассчитатьПроцентЗаполнености(Объект.Ссылка,ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои"));
			Элементы.КартинкаПроцентЗаполненостиОбои.Картинка 	= ЗаполненностьОбъекта.Картинка;
			ПроцентЗаполнености 							= Строка(ЗаполненностьОбъекта.ПроцентЗаполненностиОбщий)+"%";
		ИначеЕсли	Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя = "СтраницаПлитка" Тогда
			ЗаполненностьОбъекта = РассчитатьПроцентЗаполнености(Объект.Ссылка,ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка"));
			Элементы.КартинкаПроцентЗаполненостиПлитка.Картинка 	= ЗаполненностьОбъекта.Картинка;
			ПроцентЗаполнености 							= Строка(ЗаполненностьОбъекта.ПроцентЗаполненностиОбщий)+"%";
		ИначеЕсли 	Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя = "СтраницаКарточкаОбъекта" 	Тогда
			ЗаполненностьОбъекта = РассчитатьПроцентЗаполнености(Объект.Ссылка);
			Элементы.КартинкаПроцентЗаполнености.Картинка 	= ЗаполненностьОбъекта.Картинка;
			ПроцентЗаполнености 							= Строка(ЗаполненностьОбъекта.ПроцентЗаполненностиОбщий)+"%";
		КонецЕсли;
		
		
	Исключение
		ТекстСообщения 	= НСтр("ru = 'Не удалось перейти на страницу %1'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ИмяКоманды));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьКомандуНавигацииПриОткрытииФормы()
	
	Для каждого ЭлементКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
		Если ЭлементКоманды.ИмяКоманды 	= Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя Тогда
			ЭлементКоманды.ЦветТекста 	= Новый Цвет(128,0,128);
			ЭлементКоманды.Шрифт 		= Новый Шрифт(,10,Ложь,,Истина);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Процедура УстановитьСвязиОбъекта(МассивОбъектов, ОбъектСвязи)
	
	// ++ VOG Солодов В.В. 27.05.2019 task 325
	// ++ VOG Солодов В.В. 02.09.2019 bugs 620
	Для Каждого ЭлементМассива Из МассивОбъектов Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") 
			И ЭлементМассива.Свойство("КонтактноеЛицо") Тогда
			
			вогУправлениеСвязями.УстановитьСвязьОбъекта(ЭлементМассива.КонтактноеЛицо, ОбъектСвязи, ЭлементМассива);
		Иначе
			вогУправлениеСвязями.УстановитьСвязьОбъекта(ЭлементМассива, ОбъектСвязи);
		КонецЕсли;
	КонецЦикла;
	// До изменения
	//Для Каждого СтруктураСвязи Из МассивОбъектов Цикл
	//	вогУправлениеСвязями.УстановитьСвязьОбъекта(СтруктураСвязи.КонтактноеЛицо, ОбъектСвязи, СтруктураСвязи);
	//КонецЦикла;
	// -- VOG Солодов В.В. 02.09.2019
	// До изменения
	//Для каждого КонтактноеЛицо Из МассивОбъектов Цикл
	//	вогУправлениеСвязями.УстановитьСвязьОбъекта(КонтактноеЛицо, ОбъектСвязи);
	//КонецЦикла;
	// -- VOG Солодов В.В. 27.05.2019
	
КонецПроцедуры

// ++ VOG Солодов В.В. 02.09.2019 bugs 620
&НаСервереБезКонтекста
Процедура УдалитьСвязьСРЦНаСервере(РЦ, ОбъектСвязи)
	
	НаборЗаписей = РегистрыСведений.вогСвязиРаспределительныхЦентров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РаспределительныйЦентр.Установить(РЦ);
	НаборЗаписей.Отбор.ОбъектСвязи.Установить(ОбъектСвязи);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры
// -- VOG Солодов В.В. 02.09.2019

&НаСервере
Процедура ЗаполнитьРаспределительныеЦентры()
	
	
	Запрос = Новый Запрос("Выбрать РАЗРЕШЕННЫЕ РС.РаспределительныйЦентр ИЗ регистрСведений.вогСвязиРаспределительныхЦентров КАК РС
	| ГДЕ РС.ОбъектСвязи = &ОбъектСвязи");
	Запрос.УстановитьПараметр("ОбъектСвязи",Объект.Ссылка);
	РезульттатЗапроса = Запрос.Выполнить();
	
	Если Не РезульттатЗапроса.Пустой() Тогда
		РаспределительныеЦентры.Загрузить(РезульттатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
	
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_ТегиКлассификатора_Обновить()

#КонецОбласти

#Область УправлениеДоступом


#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементовПереключательРежима

&НаКлиенте
Процедура УстановитьАктивностьТекущийЭлемент()
	ЭтаФорма.ТекущийЭлемент = Элементы[ТекущийЭлементВыбор];
КонецПроцедуры

&НаКлиенте
Процедура СтраницыКарточкаОбъектаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаРеквизитыОбъекта Тогда
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Истина;
	Иначе
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГруппыРекурсивно(Элемент, Видимость)
	Если Видимость = Истина И 
		(СтрНайти(Элемент.Имя, "ДекорацияОткрыть") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаОбъемКолонки") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаДлинаКолонки") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаПлощадьКолонки") <> 0) Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Видимость = Видимость;
	Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьВидимостьГруппыРекурсивно(ПодчиненныйЭлемент,Видимость);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиФормыПриИзменении(Элемент)
	
	Если НастройкаВидимостиФормы = "ПоказатьВсе" Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Ложь);
	ИначеЕсли НастройкаВидимостиФормы = "ПоказатьОсновные" Тогда
		РежимВидимостиПоказатьТолькоВажные = Истина;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Ложь);
	Иначе
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиКарточкиОбъектаПриИзменении(Элемент)
	
	Если НастройкаВидимостиКарточкиОбъекта = "ПоказатьЗаполненные" Тогда
		РежимВидимостиПоказатьТолькоЗаполненные = Истина;
	Иначе
		РежимВидимостиПоказатьТолькоЗаполненные = Ложь;
	КонецЕсли;   
	
	ОбновитьКарточку();
	
КонецПроцедуры

&НаСервере
Процедура СкрытьРаскрытьВсеГруппы(Свернуть = Неопределено)
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	
	Для Каждого ИмяГруппы из ИменаСворачиваемыхГрупп Цикл
		
		ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементов

&НаСервере
Процедура НастроитьФорму(НастройкиВидимостиИЗаголовков = Неопределено)
	
	Элементы.СтраницаКарточкаОбъекта.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
	// Настройка видимости и заголовков
	Если Не ЗначениеЗаполнено(НастройкиВидимостиИЗаголовков) Тогда
		НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	КонецЕсли;
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) <> Неопределено Тогда
			Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		КонецЕсли;
		
		// Формирование видимости элементов подменю "Перейти"
		ИмяКоманды = ЭлементВидимость.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				Элементы[ИмяКоманды].Видимость = ЭлементВидимость.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		Если Элементы.Найти(ЭлементЗаголовок.Ключ) <> Неопределено Тогда
			Элементы[ЭлементЗаголовок.Ключ].Заголовок = ЭлементЗаголовок.Значение;
		КонецЕсли;
		
		// Формирование заголовков элементов подменю "Перейти"
		ИмяКоманды = ЭлементЗаголовок.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				
				СтрокаИсключение = НСтр("ru = 'Список'");
				НачалоСтроки     = СтрНайти(ЭлементЗаголовок.Значение, "(") - 1;
				
				Если СтрНайти(ЭлементЗаголовок.Значение, СтрокаИсключение) = 0
					И НачалоСтроки > 0 Тогда
					
					Элементы[ИмяКоманды].Заголовок = СокрЛП(Лев(ЭлементЗаголовок.Значение, НачалоСтроки));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастроитьВидимостьСворачиваемыхГрупп();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемыхГрупп()
	
	НастроитьВидимостьСворачиваемойГруппы("Портрет");
	НастроитьВидимостьСворачиваемойГруппы("КонтактнаяИнформация");
	//НастроитьВидимостьСворачиваемойГруппы("Классификаторы");
	НастроитьВидимостьСворачиваемойГруппы("Грузополучатели");
	
	НастроитьВидимостьСворачиваемойГруппы("Менеджеры");
	НастроитьВидимостьСворачиваемойГруппы("ВнешниеКоды");
	НастроитьВидимостьСворачиваемойГруппы("НаправленияДеятельности");
	//НастроитьВидимостьСворачиваемойГруппы("ДополнительныеРеквизиты");
	//{[+](фрагмент добавлен), Виноградов Дмитрий 11.07.2018 10:26:42 ID
	НастроитьВидимостьСворачиваемойГруппы("Детали");
	НастроитьВидимостьСворачиваемойГруппы("ЮридическаяИнформация");
	//}Администратор 11.07.2018 10:26:42
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемойГруппы(ИмяГруппы)
	
	ЭлементСворачиваяГруппа = Элементы["СворачиваемаяГруппа" + ИмяГруппы];
	Элементы["ГруппаЗаголовок" + ИмяГруппы].Видимость = ЕстьВидимыеЭлементыВГруппе(ЭлементСворачиваяГруппа);
	
КонецПроцедуры

&НаСервере
Функция ЕстьВидимыеЭлементыВГруппе(Элемент)
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Если ПодчиненныйЭлемент.Видимость 
				И ЕстьВидимыеЭлементыВГруппе(ПодчиненныйЭлемент) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПодчиненныйЭлемент.Видимость Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	ИмяГруппыСвернутьРазвернуть = Элемент.Имя;
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияОткрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияЗакрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ЗаголовокГруппы", "");
	ИзменитьСвернутостьГруппы(ИмяГруппыСвернутьРазвернуть);
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы",0.0001,Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть = Неопределено)
	Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость, Не Свернуть);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Свернуть);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Не Свернуть);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	Если Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяГруппыСвернутьРазвернуть];
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазвернутьСворачиваемуюГруппу(ИмяГруппы)
	ГруппаРодитель  = Элементы[ИмяГруппы].Родитель;
	Если ГруппаРодитель = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	ИмяГруппыРодителя =ГруппаРодитель.Имя;
	
	Если СтрНайти(ИмяГруппыРодителя, "СворачиваемаяГруппа") = 0 Тогда
		РазвернутьСворачиваемуюГруппу(ИмяГруппыРодителя);
	Иначе
		ИмяГруппыРодителя = СтрЗаменить(ИмяГруппыРодителя, "СворачиваемаяГруппа", "");
		ИзменитьСвернутостьГруппы(ИмяГруппыРодителя, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВариантАдреса(Форма)
	
	Форма.Элементы.ВариантыАдреса.ТекущаяСтраница 		= Форма.Элементы[Форма.ВариантАдреса];	
	Форма.Элементы.АдресРынкаОбязательныеПоля.Видимость = Форма.ВариантАдреса = "АдресРынка";
	
КонецПроцедуры // УстановитьВариантАдреса()

#КонецОбласти

#Область ПоискДублей

&НаСервереБезКонтекста
Функция ЕстьДубли(Знач Объект, Знач СтруктураПоиска, Знач СписокКонтактов, Знач ТочноеСоответствие = Ложь)
	
	МассивДублей = вогОбщегоНазначения.НайтиДубли(Объект, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие);
	Возврат МассивДублей.Количество() > 0;
	
КонецФункции // ЕстьДубли()

#КонецОбласти

#Область СтатусыСогласования

&НаСервере
Процедура ОбновитьДанныеСтатусаСогласования()
	
	ОписаниеСтатуса = вогОбщегоНазначения.ПолучитьОписаниеСтатусаСогласованияОбъекта(Объект.Ссылка);
	СтатусСогласования = ОписаниеСтатуса.Статус;
	РегистраторСтатуса = ОписаниеСтатуса.РегистраторСтатуса;
	
КонецПроцедуры

#КонецОбласти

#Область Показатели

&НаКлиенте
Процедура Подключаемый_ОтобразитьДанныеПоказателей()
	
	МассивДанных = ПолучитьИзВременногоХранилища(АдресХранилищаПоказателей); 
	Если ТипЗнч(МассивДанных) = Тип("Массив") Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеПоказателей");	
		Для каждого ОписаниеПоказателя Из МассивДанных Цикл
			ОбластьПоказателя = КарточкаОбъекта.Области["ОбластьПоказателя_" + ОписаниеПоказателя.Имя];
			
			ОбластьПоказателя.Текст    = ОписаниеПоказателя.Значение;
			ОбластьПоказателя.Картинка = Неопределено;
			
		КонецЦикла;
		
		ПоказателиПолучены = Истина;
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область МакетыИнформации

#Область ИнформацияОбъект

&НаКлиенте
Процедура ИнформацияОбъектОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка 				= Ложь;
	ТекстОбработчика 					= "";
	ТаблицаОбработчики 					= ЭтаФорма["КарточкаОбъекта_Обработчики"];
	ТаблицаРасшифровка					= ЭтаФорма["КарточкаОбъекта_Расшифровка"];
	ТаблицаРасшифровкиКлассификатора 	= ЭтаФорма["КарточкаОбъекта_РасшифровкаКлассификатора"];
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Гиперссылка_") <> 0 Тогда
		ИмяГиперссылки 		= СтрЗаменить(Расшифровка,"Гиперссылка_","");
		Для каждого ТекущийОбработчик Из ТаблицаОбработчики Цикл
			Если ТекущийОбработчик.Имя = ИмяГиперссылки Тогда
				ТекстОбработчика = ТекущийОбработчик.ПроизвольныйКод;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение	
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Пользователи") Тогда
		// Сверунть группу Контакты
		СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
		ВыполнитьПереходСтраницы("СтраницаМенеджеры");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		// Сверунть группу Контакты
		СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
		ВыполнитьПереходСтраницы("СтраницаКонтакты");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		ПоказатьЗначение(Неопределено,Расшифровка);
	ИначеЕсли вогОбщегоНазначенияВызовСервера.ПроверитьЭтоСсылка(ТипЗнч(Расшифровка)) Тогда
		
		Если ТипЗнч(Расшифровка) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы")
			Или (ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов")
			И ТаблицаРасшифровкиКлассификатора.НайтиСтроки(Новый Структура("Имя", Расшифровка)).Количество() <> 0) Тогда
			
			вогУправлениеИнтерфейсомКлиент.ОбработатьРасшифровкуИнформации(ЭтотОбъект, Расшифровка);
			
		Иначе
			
			ПоказатьЗначение(Неопределено, Расшифровка);	
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Расшифровка_") <> 0 Тогда
		ИмяРасшифровки 	= СтрЗаменить(Расшифровка,"Расшифровка_","");
		ИмяПараметра 	= "Объект." + ИмяРасшифровки;
		Для каждого ТекущийОбработчик Из ТаблицаРасшифровка Цикл
			Если ТекущийОбработчик.Имя = ИмяПараметра Тогда
				ТекстОбработчика = ТекущийОбработчик.ТекстОбработчика;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"КИ_") <> 0 Тогда
		Расшифровка = СокрЛП(СтрЗаменить(Расшифровка,"КИ_",""));
		Результат = ОпределитьТипКонтактнойИнформации(Объект.Ссылка,Расшифровка);
		Если Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(Результат.Представление, Объект.Ссылка);
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
			//УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(Результат.Представление, "Яндекс.Карты");
			СтруктураАдреса 	= Новый Структура; 
			СтруктураАдреса.Вставить("Представление", Результат.Представление);
			СтруктураАдреса.Вставить("Широта",Результат.Широта);
			СтруктураАдреса.Вставить("Долгота",Результат.Долгота);
			
			СписокКарт 			= Новый СписокЗначений;
			СписокКарт.Добавить("вогГеокодирование","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
			ОписаниеОповещения 	= Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокКарт.Получить(0)); 
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо("", Результат.Представление, Результат.Тип);
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
			УправлениеКонтактнойИнформациейКлиент.ПерейтиПоВебСсылке("", Результат.Представление, Результат.Тип);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов") Тогда
		НайденныеСтроки = ТаблицаРасшифровкиКлассификатора.НайтиСтроки(Новый Структура("Имя",Расшифровка));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			WebService 	= НайденныеСтроки[0].Расшифровка;
			Результат 	= вогИнтеграцияСУчетнойСистемой.СформироватьОтчетЧерезWebService(Объект.Ссылка,WebService);
			Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
				Результат.ОтображатьСетку = Ложь;
				Результат.ОтображатьЗаголовки = Ложь;
				ЗаголовокОтчета = Строка(Расшифровка) +" "+Объект.Ссылка;
				Результат.Показать(НСтр("ru = '"+ЗаголовокОтчета+"'"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		вогОбщегоНазначенияКлиент.РасшифрокаВнешниеДанныеМакет(Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьТипКонтактнойИнформации(Ссылка,Представление)
	
	РезультатЗапроса 	= Неопределено;
	ТекущаяТаблица 		= ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Широта КАК Широта,
	|	КонтактнаяИнформация.Долгота КАК Долгота,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	"+(ТекущаяТаблица)+".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактнаяИнформация.НомерСтроки = &НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("НомерСтроки",Число(Представление));

	
	//Запрос.УстановитьПараметр("Представление",Представление);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ИсходящаяСтруктура 				= Новый Структура("Тип,Вид,Широта,Долгота,Представление");
		ВыборкаИзРезультатаЗапроса 		= РезультатЗапроса.Выбрать();
		Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ИсходящаяСтруктура,ВыборкаИзРезультатаЗапроса);
			РезультатЗапроса = ИсходящаяСтруктура;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВидОтображенияДополнительныйРеквизит(ЗначениеКлассификатораСсылка)
	
	ВладелецЗначения = ЗначениеКлассификатораСсылка.Владелец;
	
	Возврат ВладелецЗначения.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит;
	
КонецФункции

#КонецОбласти

#Область Обои

&НаКлиенте
Процедура КарточкаОбъектаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Элементы.ГруппаГруппировкаЛевоПраво.Видимость Тогда
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Истина;
	КонецЕсли;
	
	Если СтрНайти(Расшифровка, "ГиперссылкаПерейти") <> 0 Тогда
		ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Расшифровка);
		ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	ИначеЕсли Элементы.Найти(Расшифровка) <> Неопределено Тогда
		Если Истина Тогда
			Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаРеквизитыОбъекта;
			
			РазвернутьСворачиваемуюГруппу(Расшифровка);
			ТекущийЭлементВыбор = Расшифровка;
			ПодключитьОбработчикОжидания("УстановитьАктивностьТекущийЭлемент",0.0001,Истина);
		Иначе
			Если Объект.Свойство(Расшифровка) Тогда
				Если ТипЗнч(Объект[Расшифровка]) <> Тип("Строка")
					И ТипЗнч(Объект[Расшифровка]) <> Тип("Булево")
					И ЗначениеЗаполнено(Объект[Расшифровка]) Тогда
					ПоказатьЗначение(,Объект[Расшифровка]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОбоиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка 				= Ложь;
	ТекстОбработчика 					= "";
	ТаблицаОбработчики 					= ЭтаФорма["Обои_Обработчики"];
	ТаблицаРасшифровка					= ЭтаФорма["Обои_Расшифровка"];
	ТаблицаРасшифровкиКлассификатора 	= ЭтаФорма["КарточкаОбъекта_РасшифровкаКлассификатора"];
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Гиперссылка_") <> 0 Тогда
		ИмяГиперссылки 		= СтрЗаменить(Расшифровка,"Гиперссылка_","");
		Для каждого ТекущийОбработчик Из ТаблицаОбработчики Цикл
			Если ТекущийОбработчик.Имя = ИмяГиперссылки Тогда
				ТекстОбработчика = ТекущийОбработчик.ПроизвольныйКод;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение	
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Пользователи") Тогда
		// Сверунть группу Контакты
		СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
		ВыполнитьПереходСтраницы("СтраницаМенеджеры");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		// Сверунть группу Контакты
		СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
		ВыполнитьПереходСтраницы("СтраницаКонтакты");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		ПоказатьЗначение(Неопределено,Расшифровка);
	ИначеЕсли вогОбщегоНазначенияВызовСервера.ПроверитьЭтоСсылка(ТипЗнч(Расшифровка)) Тогда
		
		ТаблицаРасшифровкаОбои = ЭтаФорма["Обои_РасшифровкаКлассификатора"];
		
		Если ТипЗнч(Расшифровка) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы")
			Или (ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов")
			И ТаблицаРасшифровкаОбои.НайтиСтроки(Новый Структура("Имя", Расшифровка)).Количество() <> 0) Тогда
			
			Если (ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов")) Тогда
				КлассификаторСсылка = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Расшифровка, "Владелец", Истина);
			Иначе
				КлассификаторСсылка = Расшифровка;
			КонецЕсли;
			
			вогУправлениеИнтерфейсомКлиент.ОбработатьРасшифровкуИнформации(
			ЭтотОбъект, 
			КлассификаторСсылка, 
			ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои"));
			
		Иначе
			
			ПоказатьЗначение(Неопределено, Расшифровка);	
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Расшифровка_") <> 0 Тогда
		ИмяРасшифровки 	= СтрЗаменить(Расшифровка,"Расшифровка_","");
		ИмяПараметра 	= "Объект." + ИмяРасшифровки;
		Для каждого ТекущийОбработчик Из ТаблицаРасшифровка Цикл
			Если ТекущийОбработчик.Имя = ИмяПараметра Тогда
				ТекстОбработчика = ТекущийОбработчик.ТекстОбработчика;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение	
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов") Тогда
		НайденныеСтроки = ТаблицаРасшифровкиКлассификатора.НайтиСтроки(Новый Структура("Имя",Расшифровка));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			WebService 	= НайденныеСтроки[0].Расшифровка;
			Результат 	= вогИнтеграцияСУчетнойСистемой.СформироватьОтчетЧерезWebService(Объект.Ссылка,WebService);
			Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
				Результат.ОтображатьСетку = Ложь;
				Результат.ОтображатьЗаголовки = Ложь;
				ЗаголовокОтчета = Строка(Расшифровка) +" "+Объект.Ссылка;
				Результат.Показать(НСтр("ru = '"+ЗаголовокОтчета+"'"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		вогОбщегоНазначенияКлиент.РасшифрокаВнешниеДанныеМакет(Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьМакетОбои()
	
	// Вывод информации Обои
	СформированМакетОбои = Истина;
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияОбои
					,Метаданные.Справочники.вогТорговыеТочки,ЭтаФорма,"Обои",Справочники.НаправленияДеятельности.Обои);
					
КонецПроцедуры 


#КонецОбласти

#Область Плитка

&НаКлиенте
Процедура ИнформацияПлиткаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка 	= Ложь;
	ТекстОбработчика 		= "";
	ТаблицаОбработчики 		= ЭтаФорма["Плитка_Обработчики"];
	ТаблицаРасшифровка		= ЭтаФорма["Плитка_Расшифровка"];
	ТаблицаРасшифровкиКлассификатора 	= ЭтаФорма["КарточкаОбъекта_РасшифровкаКлассификатора"];
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Гиперссылка_") <> 0 Тогда
		ИмяГиперссылки 		= СтрЗаменить(Расшифровка,"Гиперссылка_","");
		Для каждого ТекущийОбработчик Из ТаблицаОбработчики Цикл
			Если ТекущийОбработчик.Имя = ИмяГиперссылки Тогда
				ТекстОбработчика = ТекущийОбработчик.ПроизвольныйКод;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение	
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Пользователи") Тогда
		// Сверунть группу Контакты
		СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
		ВыполнитьПереходСтраницы("СтраницаМенеджеры");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		// Сверунть группу Контакты
		СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
		ВыполнитьПереходСтраницы("СтраницаКонтакты");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		ПоказатьЗначение(Неопределено,Расшифровка);
	ИначеЕсли вогОбщегоНазначенияВызовСервера.ПроверитьЭтоСсылка(ТипЗнч(Расшифровка)) Тогда
		
		ТаблицаРасшифровкаПлитка = ЭтаФорма["Плитка_РасшифровкаКлассификатора"];
		
		Если ТипЗнч(Расшифровка) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы")
			Или (ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов")
			И ТаблицаРасшифровкаПлитка.НайтиСтроки(Новый Структура("Имя", Расшифровка)).Количество() <> 0) Тогда
			
			Если (ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов")) Тогда
				КлассификаторСсылка = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Расшифровка, "Владелец", Истина);
			Иначе
				КлассификаторСсылка = Расшифровка;
			КонецЕсли;
			
			вогУправлениеИнтерфейсомКлиент.ОбработатьРасшифровкуИнформации(
			ЭтотОбъект, 
			КлассификаторСсылка, 
			ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка"));
			
		Иначе
			
			ПоказатьЗначение(Неопределено, Расшифровка);	
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Расшифровка_") <> 0 Тогда
		ИмяРасшифровки 	= СтрЗаменить(Расшифровка,"Расшифровка_","");
		ИмяПараметра 	= "Объект." + ИмяРасшифровки;
		Для каждого ТекущийОбработчик Из ТаблицаРасшифровка Цикл
			Если ТекущийОбработчик.Имя = ИмяПараметра Тогда
				ТекстОбработчика = ТекущийОбработчик.ТекстОбработчика;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение	
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов") Тогда
		НайденныеСтроки = ТаблицаРасшифровкиКлассификатора.НайтиСтроки(Новый Структура("Имя",Расшифровка));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			WebService 	= НайденныеСтроки[0].Расшифровка;
			Результат 	= вогИнтеграцияСУчетнойСистемой.СформироватьОтчетЧерезWebService(Объект.Ссылка,WebService);
			Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
				Результат.ОтображатьСетку = Ложь;
				Результат.ОтображатьЗаголовки = Ложь;
				ЗаголовокОтчета = Строка(Расшифровка) +" "+Объект.Ссылка;
				Результат.Показать(НСтр("ru = '"+ЗаголовокОтчета+"'"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		вогОбщегоНазначенияКлиент.РасшифрокаВнешниеДанныеМакет(Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьМакетПлитка()
	
	// Вывод информации Плитка
	СформированМакетПлитка = Истина;
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияПлитка
					,Метаданные.Справочники.вогТорговыеТочки,ЭтаФорма,"Плитка",Справочники.НаправленияДеятельности.Плитка);
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ОтчетСтруктураВзаимосвязи

&НаСервере
Процедура СформироватьОтчетСтурктураВзаимосвязиСервер()
	
	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("ДанныеКлиента"			,ДанныеКлиента);
	ПараметрыФормированияОтчета.Вставить("КонтактнаяИнформация"		,КонтактнаяИнформация);
	ПараметрыФормированияОтчета.Вставить("КонтактныеЛица"			,КонтактныеЛицаОтч);
	ПараметрыФормированияОтчета.Вставить("ЮридическиеЛица"			,ЮридическиеЛица);
	ПараметрыФормированияОтчета.Вставить("ТорговыеТочки"			,ТорговыеТочки);
	ПараметрыФормированияОтчета.Вставить("РаспределительныйЦентр"	,РаспределительныйЦентр);
	Отчеты.вогСтруктураВзаимосвязи.СформироватьОтчет(СтруктураВзаимосвязиОтчет,Объект.Ссылка,ПараметрыФормированияОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВзаимосвязиОтчетОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка 	= Ложь;
		
		ДанныеРасшифровки		= ИнициализироватьРасшифровку(Расшифровка);
		ИсточникНастроек		= Новый ИсточникДоступныхНастроекКомпоновкиДанных(СформироватьПодменюРасшифровки());
		
		ОбработкаРасшифровки 	= Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки,ИсточникНастроек);
		ДоступныеДействия 		= Новый СписокЗначений;
		ИмяТаблицы 				= ?(Расшифровка.ИмяТаблицы = "ЮридическоеЛицо", "данного юр-лица","РЦ");
		ДоступныеДействия.Добавить("ОткрытьСписокТТ",НСтр("ru = 'Показать ТТ "+ИмяТаблицы+"'"),,БиблиотекаКартинок.CRM_Задача);
		ДоступныеДействия.Добавить("ВыборТТ",НСтр("ru = 'Выбор ТТ из списка'"),,БиблиотекаКартинок.Подменю);
		
		ОсновныеДействия 		= Новый Массив;
		ОсновныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет);
		
		ОписаниеОповещения 		= Новый ОписаниеОповещения("РасшифровкаОтчетаМеню",ЭтотОбъект,Расшифровка);
		ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения,Новый ИдентификаторРасшифровкиКомпоновкиДанных(0),ОсновныеДействия,ДоступныеДействия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьРасшифровку(Расшифровка)
	
	СписокПолейРасшифровки = Новый ЗначенияПолейРасшифровкиКомпоновкиДанных;
	СтрокаРасшифровки			= СписокПолейРасшифровки.Добавить();
	СтрокаРасшифровки.Значение 	= Расшифровка;
	СтрокаРасшифровки.Поле 		= "";
	
	ТекущаяРасшифровка = Новый ДанныеРасшифровкиКомпоновкиДанных;
	ТекущаяРасшифровка.Элементы.Добавить(Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля"), ,СписокПолейРасшифровки);
	
	Возврат	 ПоместитьВоВременноеХранилище(ТекущаяРасшифровка,УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СформироватьПодменюРасшифровки()
	Возврат ПоместитьВоВременноеХранилище(Новый СхемаКомпоновкиДанных);
КонецФункции

&НаКлиенте
Процедура РасшифровкаОтчетаМеню(ВыбранноеДействие,ВыбранноеЗначение,ДополнительныйПараметры) Экспорт
	
	Если ВыбранноеДействие = "ВыборТТ" Тогда
		СписокТТ = РасшифровкаСервер(ДополнительныйПараметры.ИмяТаблицы,ДополнительныйПараметры.Значение);
		Если СписокТТ.Количество() <> 0 Тогда
			ОП = Новый ОписаниеОповещения("ЗавершениеОбработкаВыбораОтчет",ЭтотОбъект);
			СписокТТ.ПоказатьВыборЭлемента(ОП,"Выберите ТТ");
		КонецЕсли;
	ИначеЕсли ВыбранноеДействие = "ОткрытьСписокТТ" Тогда
		ЗавершениеОтборПоСписку(ДополнительныйПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РасшифровкаСервер(ИмяТаблицы, ЗначениеРасшифровки)
	
	Если ИмяТаблицы = "ЮридическоеЛицо" Тогда
		Возврат Отчеты.вогСтруктураВзаимосвязи.ПолучитьТорговыеТочкиПоЮрЛицу(ЗначениеРасшифровки);
	ИначеЕсли ИмяТаблицы = "РЦ" Тогда
		Возврат Отчеты.вогСтруктураВзаимосвязи.ПолучитьТорговыеТочкиПоРЦ(ЗначениеРасшифровки);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеОтборПоСписку(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		ПараметрыФормированияОтчета = Новый Структура;
		ПараметрыФормированияОтчета = Новый Структура;
		ПараметрыФормированияОтчета.Вставить("ДанныеКлиента"			,ДанныеКлиента);
		ПараметрыФормированияОтчета.Вставить("КонтактнаяИнформация"		,КонтактнаяИнформация);
		ПараметрыФормированияОтчета.Вставить("КонтактныеЛица"			,КонтактныеЛицаОтч);
		ПараметрыФормированияОтчета.Вставить("ЮридическиеЛица"			,ЮридическиеЛица);
		ПараметрыФормированияОтчета.Вставить("ТорговыеТочки"			,ТорговыеТочки);
		ПараметрыФормированияОтчета.Вставить("РаспределительныйЦентр"	,РаспределительныйЦентр);
		
		ЗавершениеОбработкаВыбораОтчетСервер(ПараметрыФормированияОтчета,ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбработкаВыбораОтчет(ВыбранноеЗначение,ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ПараметрыФормированияОтчета = Новый Структура;
		ПараметрыФормированияОтчета.Вставить("ДанныеКлиента"			,ДанныеКлиента);
		ПараметрыФормированияОтчета.Вставить("КонтактнаяИнформация"		,КонтактнаяИнформация);
		ПараметрыФормированияОтчета.Вставить("КонтактныеЛица"			,КонтактныеЛицаОтч);
		ПараметрыФормированияОтчета.Вставить("ЮридическиеЛица"			,ЮридическиеЛица);
		ПараметрыФормированияОтчета.Вставить("ТорговыеТочки"			,ТорговыеТочки);
		ПараметрыФормированияОтчета.Вставить("РаспределительныйЦентр"	,РаспределительныйЦентр);
		
		НоваяОбласть = Неопределено;
		ЗавершениеОбработкаВыбораОтчетСервер(ПараметрыФормированияОтчета,ВыбранноеЗначение.Значение);
		
		НоваяОбласть = СтруктураВзаимосвязиОтчет.НайтиЗначение(ВыбранноеЗначение.Значение);
		
		Если НоваяОбласть <> Неопределено Тогда
			Элементы.СтруктураВзаимосвязиОтчет.ТекущаяОбласть = НоваяОбласть;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеОбработкаВыбораОтчетСервер(ПараметрыФормированияОтчета,ВыбранноеЗначение)	
	Отчеты.вогСтруктураВзаимосвязи.СформироватьОтчетСОтбором(СтруктураВзаимосвязиОтчет,Объект.Ссылка,ПараметрыФормированияОтчета,ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти

#Область Прочее

// +++ VOG Кулаков П.Л. 26.10.2020 CRM-999
&НаКлиенте
Процедура СогласоватьЗадачу(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		УспешнаяЗапись = Записать();
		Если Не УспешнаяЗапись Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВидСогласования = Элементы[Команда.Имя].Заголовок;
	ПараметрыФормы = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("СогласоватьЗадачуЗавершение", ЭтотОбъект,Новый Структура("ВидСогласования",ВидСогласования));
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиРезультатВыполнения", 
			ПараметрыФормы, 
			ЭтотОбъект,
			,
			,
			, 
			ОписаниеОповещения,  
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 10.11.2020 CRM-999
&НаКлиенте
Процедура СогласоватьЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("Отказ") И Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	вогОбщегоНазначенияВызовСервера.СогласоватьЗадачи(ДополнительныеПараметры.ВидСогласования,Объект.Ссылка,Результат.РезультатВыполнения);
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласования(ЭтаФорма);

КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
&НаКлиенте
Процедура ОткрытьТекущуюЗадачу(Команда)
	
	ВыбраннаяЗадача = Неопределено;
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		ВыбраннаяЗадача = ТекущаяЗадача;
	Иначе 
		МассивЗадач = вогОбщегоНазначенияВызовСервера.ПолучитьМассивЗадач(Объект.Ссылка);
		Если МассивЗадач.Количество() > 0 Тогда
			// +++ VOG Кулаков П.Л. 21.12.2020 CRM-1102
			ПараметрыФормы = Новый Структура("Предмет",Объект.Ссылка);
			ОткрытьФорму("ОбщаяФорма.вогФормаСпискаЗадачПредмета",
					ПараметрыФормы,
					ЭтаФорма,
					,
					,
					,
					Новый ОписаниеОповещения("ОткрытьТекущуюЗадачуЗавершение", ЭтотОбъект),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			//СписокЗадач = Новый СписокЗначений;
			//СписокЗадач.ЗагрузитьЗначения(МассивЗадач);
			//ПараметрыФормы = Новый Структура("ЗначениеОтбора",Объект.Ссылка);
			//ВыбраннаяЗадача = СписокЗадач.ВыбратьЭлемент("Выберите задачу");
			// --- VOG Кулаков П.Л.
		КонецЕсли;
	КонецЕсли;
	
	Если ВыбраннаяЗадача = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",ВыбраннаяЗадача);
	ПараметрыФормы.Вставить("НеОткрыватьПредмет",Истина);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиНезависимыйПроцесс",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				, Новый ОписаниеОповещения("ОткрытьТекущуюЗадачуЗавершение", ЭтотОбъект), 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
&НаКлиенте
Процедура ОткрытьТекущуюЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласования(ЭтаФорма);	
	
КонецПроцедуры // --- VOG Кулаков П.Л.

&НаСервере
Функция ИменаСворачиваемыхГрупп()
	
	ИменаСворачиваемыхГрупп = Новый Массив;
	
	//ИменаСворачиваемыхГрупп.Добавить("Портрет");
	ИменаСворачиваемыхГрупп.Добавить("КонтактнаяИнформация");
	//ИменаСворачиваемыхГрупп.Добавить("НаправленияДеятельности");
	
	//ИменаСворачиваемыхГрупп.Добавить("Классификаторы");
	//ИменаСворачиваемыхГрупп.Добавить("Грузополучатели");
	
	//ИменаСворачиваемыхГрупп.Добавить("Менеджеры");
	//ИменаСворачиваемыхГрупп.Добавить("ВнешниеКоды");
	//ИменаСворачиваемыхГрупп.Добавить("НаправленияДеятельности");
	//ИменаСворачиваемыхГрупп.Добавить("ДополнительныеРеквизиты");
	
	Возврат ИменаСворачиваемыхГрупп;
	
КонецФункции

&НаСервере
Процедура ОбновитьГиперссылкиИКарточку()
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) = Неопределено
			Или СтрНайти(ЭлементВидимость.Ключ,"Гиперссылка") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		Если Элементы.Найти(ЭлементЗаголовок.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[ЭлементЗаголовок.Ключ].Заголовок = ЭлементЗаголовок.Значение;
	КонецЦикла;
	
	//КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКарточку()
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтроки(Текст, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Объект[ДополнительныеПараметры] = Текст;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеКомандНаправления()
	
	Для каждого ТекущийЭлемент Из Элементы.ГруппаКоманднаяПанельНаправления.ПодчиненныеЭлементы Цикл
		Если ТекущийЭлемент.Пометка Тогда
			ТекущийЭлемент.ЦветФона = Новый Цвет(160,160,160);
		Иначе	
			ТекущийЭлемент.ЦветФона = Новый Цвет(255,255,255);
		КонецЕсли;
	КонецЦикла;
	
	// Видимость страниц информации
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СтраницаОбои","Видимость",Элементы.КомандаОбои.Пометка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Обои","Видимость",Элементы.КомандаОбои.Пометка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СтраницаПлитка","Видимость",Элементы.КомандаПлитка.Пометка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Плитка","Видимость",Элементы.КомандаПлитка.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНаправление(Значение,Добавление)
	
	НайденныеСтроки = Объект.Направления.НайтиСтроки(Новый Структура("Направление",Значение));
	
	Если Добавление И НайденныеСтроки.Количество() = 0 Тогда
		СтрокаДобавления 				= Объект.Направления.Добавить();
		СтрокаДобавления.Направление 	= Значение;
		Модифицированность = Истина;
	ИначеЕсли НайденныеСтроки.Количество() <> 0 Тогда
		СтрокаНаправления 	= НайденныеСтроки[0];
		Объект.Направления.Удалить(СтрокаНаправления);
		Модифицированность 	= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРаспределительныйЦентр(ВходящаяСтруктура)
	
	Попытка
		МенеджерЗаписи = РегистрыСведений.вогСвязиРаспределительныхЦентров.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,ВходящаяСтруктура);
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ЗаписьЖурналаРегистрации("Удаление РЦ из торговой точки",УровеньЖурналаРегистрации.Ошибка
		,Метаданные.Справочники.вогТорговыеТочки,Объект.Ссылка,ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры 

#КонецОбласти

#Область Подключаемый_МеханизмЗапускаБизнесПроцессов

&НаКлиенте
Процедура Подключаемый_ЗапускБизнесПроцесса(Команда)
	скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);
КонецПроцедуры 

&НаСервере
Процедура СписокМенеджерыИзменитьНаСервере(Вид)
	
	СтруктураСвойств = РегистрыСведений.вогИсторияМенеджеровОбъектов.ПолучитьПараметрыСпискаМенеджерыОбъектов(Вид);
	
	ЭтотОбъект.Менеджеры.ТекстЗапроса 		= СтруктураСвойств.ТекстЗапроса;
	ЭтотОбъект.Менеджеры.ОсновнаяТаблица 	= СтруктураСвойств.ОсновнаяТаблица;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"МенеджерыВидВсе", 
		"Пометка", 
		Вид = "МенеджерыВидВсе");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"МенеджерыВидДействующие", 
		"Пометка", 
		Вид <> "МенеджерыВидВсе");
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Менеджеры, 
		"ТекущаяДата", 
		CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());	
		
	Элементы.Менеджеры.Обновить();
	
КонецПроцедуры

#КонецОбласти


&НаСервереБезКонтекста
Функция РассчитатьПроцентЗаполнености(Ссылка,Аналитика=Неопределено)
	
	ЗаполненностьОбъекта = вогКонтрольЗаполненностиРеквизитовОбъектов.СтруктураЗаполненостиОбъекта(Ссылка,Аналитика);
	Возврат ЗаполненностьОбъекта;
	
КонецФункции

//Кайдашов #411
&НаКлиенте
Процедура ПроцентЗаполненостиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛожЬ;
	Если Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя = "СтраницаОбои" тогда
		Аналитика = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои");
	ИначеЕсли	Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя = "СтраницаПлитка" Тогда
		Аналитика = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка");
	ИначеЕсли 	Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя = "СтраницаКарточкаОбъекта" 	Тогда
		Аналитика = Неопределено;	
	КонецЕсли;
	СтруктураОтбора = Новый Структура("Объект",Объект.Ссылка);
	Если ЗначениеЗаполнено(Аналитика) тогда
		СтруктураОтбора.Вставить("Аналитика",Аналитика);
	КонецЕсли;
	ПарамФормы = Новый Структура("Отбор,СформироватьПриОткрытии",СтруктураОтбора,Истина);
	ПарамФормы.Вставить("КлючВарианта","РасшифровкаПоказателей");
	ОткрытьФорму("Отчет.вогПоказателиЗаполненностиДанных.ФормаОбъекта",ПарамФормы);
	
КонецПроцедуры

// ++ VOG Ульянов И.В. 28.11.2019 task 941
#Область Виджеты

&НаКлиенте
Процедура HTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОтобразитьИконкуНастройкиHTML();
	СкрытьИконкуНастройкиHTML();

	АдресХранилищаТаблицаПросмотра = Неопределено;
	
	ТекущиеДелаДокументооборотКлиент.HTMLПриНажатии(
		Этаформа, Элемент, ДанныеСобытия, СтандартнаяОбработка, АдресХранилищаТаблицаПросмотра);
		
	// доработано VOG Ульянов И.В. 12.02.2020 CRM-311
	Если АдресХранилищаТаблицаПросмотра <> Неопределено тогда		
		Если АдресХранилищаТаблицаПросмотра.ТипРезультата = "ТаблицаЗначений" тогда
			ЭтаФорма.Элементы.ГруппаТаблицаЗначений.Видимость = Истина;
			ЭтаФорма.Элементы.ГруппаТабличныйДокумент.Видимость = Ложь;
			ЗагрузитьТаблицуПросмотра(АдресХранилищаТаблицаПросмотра);
		ИначеЕсли АдресХранилищаТаблицаПросмотра.ТипРезультата = "Макет" тогда
			ЭтаФорма.Элементы.ГруппаТаблицаЗначений.Видимость = Ложь;
			ЭтаФорма.Элементы.ГруппаТабличныйДокумент.Видимость = Истина;
			ВывестиДанныеВТаблицу(АдресХранилищаТаблицаПросмотра);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Отображать иконку настройки в полях html виджетов.
//
&НаКлиенте
Процедура ОтобразитьИконкуНастройкиHTML()
	
	НовыйТекущийВиджет = ИндексТекущегоВиджета();
	
	Если ЗначениеЗаполнено(НовыйТекущийВиджет) Тогда
		ИмяРеквизитаHTML = "HTML" + НовыйТекущийВиджет;
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаHTML])
			И СтрНайти(ЭтаФорма[ИмяРеквизитаHTML], ".visibility_img{visibility:hidden;}") Тогда
			
			ЭтаФорма[ИмяРеквизитаHTML] = СтрЗаменить(ЭтаФорма[ИмяРеквизитаHTML],
				".visibility_img{visibility:hidden;}",
				".visibility_img{visibility:visible;}");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Скрывает иконку настройки в полях html виджетов.
//
&НаКлиенте
Процедура СкрытьИконкуНастройкиHTML()
	
	ПодключитьОбработчикОжидания("СкрытьИконкуНастройкиHTML", 0.1, Истина);
	
	НовыйТекущийВиджет = ИндексТекущегоВиджета();
	
	Если ТекущийВиджетHTML = НовыйТекущийВиджет Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийВиджетHTML) Тогда
		ИмяРеквизитаHTML = "HTML" + ТекущийВиджетHTML;
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаHTML])
			И СтрНайти(ЭтаФорма[ИмяРеквизитаHTML], ".visibility_img{visibility:visible;}") Тогда
			
			ЭтаФорма[ИмяРеквизитаHTML] = СтрЗаменить(ЭтаФорма[ИмяРеквизитаHTML],
				".visibility_img{visibility:visible;}",
				".visibility_img{visibility:hidden;}");
		КонецЕсли;
	КонецЕсли;
	
	ТекущийВиджетHTML = НовыйТекущийВиджет;
	
КонецПроцедуры

// Возвращает индекс текущего виджета по выделенному элементу форму.
// Если по выделенному элементу невозможно определить индекс виджета, то
// возвращается пустая строка.
//
&НаКлиенте
Функция ИндексТекущегоВиджета() Экспорт
	
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ПолеФормы")
		И ТипЗнч(ТекущийЭлемент) <> Тип("ДекорацияФормы") Тогда
		
		Возврат "";
	КонецЕсли;
	
	ИндексТекущегоВиджета = Прав(ТекущийЭлемент.Имя,3);
	
	Если Сред(ИндексТекущегоВиджета, 2, 1) <> "_" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ИндексТекущегоВиджета;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВиджетыНаВкладке()
	
	ЗаполнитьВиджетыНаВкладкеНаСервере();
	
КонецПроцедуры	
	
&НаСервере
Процедура ЗаполнитьВиджетыНаВкладкеНаСервере()
	
	ОбъектСвязи = Объект.Ссылка;
	
	ПрочитатьНастройкиВиджетов = Истина;
	ЗаполнитьВиджеты(ПрочитатьНастройкиВиджетов);
			
	ЦветНепринятаяВерсия = ЦветаСтиля.НепринятаяВерсия;
			
	ТекущиеДелаДокументооборотСервер.ЗаполнитьКэшКартинокФормыТекущиеДела(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВиджеты(ПрочитатьНастройкиВиджетов = Ложь, Виджеты = Неопределено) Экспорт
	
	Если ПрочитатьНастройкиВиджетов = Истина Тогда
		// Загрузка настроек формы Текущие дела.
		Настройки = РегистрыСведений.НастройкиТекущихДел.ПолучитьНастройки();
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Настройки);
	КонецЕсли;
	
	// ++ VOG Ульянов И.В. 06.02.2020 CRM-239
	//ТекущиеДелаДокументооборотСервер.ЗаполнитьВиджетыТекущихДел(ЭтаФорма, Виджеты,1,4);
	//ТекущиеДелаДокументооборотСервер.ЗаполнитьВиджетыТекущихДел(ЭтаФорма, Виджеты,1,6); 
	ТекущиеДелаДокументооборотСервер.ЗаполнитьВиджетыТекущихДел(ЭтаФорма, Виджеты,1,5); // VOG Ульянов И.В. 12.02.2020 CRM-491
	// -- VOG Ульянов И.В. 06.02.2020 CRM-239
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаНажатие(Элемент)
	
	ИндексТекущегоВиджета = ИндексТекущегоВиджета();
	
	Если Не ЗначениеЗаполнено(ИндексТекущегоВиджета) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВиджет = ЭтаФорма["Виджет" + ИндексТекущегоВиджета];
	
	ТекущиеДелаДокументооборотКлиент.ОбработатьНажатиеНаОбластьМеню(
		ТекущийВиджет, ЭтаФорма, Элемент, ИндексТекущегоВиджета);
	
КонецПроцедуры
	
&НаСервере
Процедура ЗагрузитьТаблицуПросмотра(АдресВХранилище)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПросмотра = ПолучитьИзВременногоХранилища(АдресВХранилище.СтрокаРезультата);		
	
	МассивТекущихКолонок = ЭтаФорма.ПолучитьРеквизиты("ВзаимодействиеРасшифровка");
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	УдаляемыеЭлементыФормы = Новый Массив;
	
	Для каждого ЭлементМассива Из МассивТекущихКолонок Цикл
		МассивУдаляемыхРеквизитов.Добавить(ЭлементМассива.Путь + "." + ЭлементМассива.Имя);
		УдаляемыеЭлементыФормы.Добавить(ЭлементМассива.Имя);
	КонецЦикла;
	
	Для каждого ЭлементМассива Из УдаляемыеЭлементыФормы Цикл
		НайденныйЭлементФормы = Элементы.Найти(ЭлементМассива);
		Если НайденныйЭлементФормы <> Неопределено  Тогда
			Элементы.Удалить(НайденныйЭлементФормы);
		КонецЕсли;
	КонецЦикла;	
	
		МассивРеквизитов = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаПросмотра.Колонки Цикл
			
   		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,"ВзаимодействиеРасшифровка"));
    
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов, МассивУдаляемыхРеквизитов);
	
	Для Каждого Колонка Из ТаблицаПросмотра.Колонки Цикл
		НовыйЭлемент = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Элементы.ВзаимодействиеРасшифровка);       
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ВзаимодействиеРасшифровка." + Колонка.Имя;		
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
	КонецЦикла;	
	
	Элементы.ВзаимодействиеРасшифровка.ПодчиненныеЭлементы.Документ.Видимость = Ложь;
	
	Элементы.ВзаимодействиеРасшифровка.Доступность = Истина;
	Элементы.ВзаимодействиеРасшифровка.ТолькоПросмотр = Ложь;	
	
	ЗначениеВРеквизитФормы(ТаблицаПросмотра,"ВзаимодействиеРасшифровка");
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеРасшифровкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВиджеты(Команда)
	ЗаполнитьВиджетыНаВкладке();
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеРасшифровкаСортировать(Команда)
	
	Если ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя <> "" тогда
		ВзаимодействиеРасшифровка.Сортировать(ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеРасшифровкаСортироватьПоУбыванию(Команда)
	
	Если ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя <> "" тогда
		ВзаимодействиеРасшифровка.Сортировать(ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя+" Убыв");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТаблицу(СтруктураМакета)
	
	
	ВиджетМакетПросмотра = СтруктураМакета.СтрокаРезультата;
	
	ТаблицаВиджета.Очистить();
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;	
	
	СхемаКомпоновкиДанных = Справочники.Виджеты.ПолучитьМакет(СтруктураМакета.СтрокаРезультата); // изменено VOG Ульянов И.В. 12.02.2020 CRM-311
	
	АдресСхемыВиджеты = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ЭтаФорма.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыВиджеты));
    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	СохраненныеНастройкиХранилище = ПолучитьНастройкиИзХранилища(Пользователи.ТекущийПользователь(),Строка(ТипЗнч(Объект.Ссылка)),СтруктураМакета.СтрокаРезультата);
	Если СохраненныеНастройкиХранилище <> Неопределено тогда
		СохраненныеНастройки = СохраненныеНастройкиХранилище.Получить();
		КомпоновщикНастроек.ЗагрузитьНастройки(СохраненныеНастройки);
	КонецЕсли;	
	
	//Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОбъектСвязи", Объект.Ссылка);
	Если СтруктураМакета.ПараметрыОтбора <> Неопределено тогда
		Для каждого ЭлементСтруктуры из СтруктураМакета.ПараметрыОтбора цикл			
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;	
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	АдресДанныхРасшифровкиВиджеты = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ТаблицаВиджета);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
    
КонецПроцедуры	

&НаСервере
Функция ПолучитьНастройкиИзХранилища(Пользователь, ТипОбъекта, НазваниеМакета) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогНастройкиПросмотраВиджетов.Настройка КАК Настройка
		|ИЗ
		|	РегистрСведений.вогНастройкиПросмотраВиджетов КАК вогНастройкиПросмотраВиджетов
		|ГДЕ
		|	вогНастройкиПросмотраВиджетов.ТипОбъекта = &ТипОбъекта
		|	И вогНастройкиПросмотраВиджетов.НазваниеМакета = &НазваниеМакета
		|	И вогНастройкиПросмотраВиджетов.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("НазваниеМакета", НазваниеМакета);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.Настройка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаписатьНастройкиВХранилище() // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	НаборЗаписей = РегистрыСведений.вогНастройкиПросмотраВиджетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	НаборЗаписей.Отбор.ТипОбъекта.Установить(Строка(ТипЗнч(Объект.Ссылка)));
	НаборЗаписей.Отбор.НазваниеМакета.Установить(ВиджетМакетПросмотра);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();
	НоваяЗапись.ТипОбъекта = Строка(ТипЗнч(Объект.Ссылка));
	НоваяЗапись.НазваниеМакета = ВиджетМакетПросмотра;
	НоваяЗапись.Настройка = Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки);
	
	НаборЗаписей.Записать();	
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьОтборыТабличногоДокумента(Команда) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	Если ЭтаФорма.Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Ложь тогда
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Истина;
		//ЭтаФорма.Элементы.ОтобразитьОтборыТабличногоДокумента.Заголовок = "Скрыть отбор";
	Иначе	
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Ложь;
		//ЭтаФорма.Элементы.ОтобразитьОтборыТабличногоДокумента.Заголовок = "Отбор...";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьНастройкиТабличногоДокумента(Команда) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	Если ЭтаФорма.Элементы.КомпоновщикНастроекНастройки.Видимость = Ложь тогда
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройки.Видимость = Истина;
		//ЭтаФорма.Элементы.ОтобразитьНастройкиТабличногоДокумента.Заголовок = "Скрыть настройки";
	Иначе	
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройки.Видимость = Ложь;
		//ЭтаФорма.Элементы.ОтобразитьНастройкиТабличногоДокумента.Заголовок = "Настройки...";
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТабличныйДокумент(Команда) // VOG Ульянов И.В. 12.02.2020 CRM-311
	ОбновитьТабличныйДокументНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьТабличныйДокументНаСервере() // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	//ЗаписатьНастройкиВХранилище(Пользователи.ТекущийПользователь(),Строка(ТипЗнч(Объект.Ссылка)),ВиджетМакетПросмотра,КомпоновщикНастроек.Настройки);	
	
	ТаблицаВиджета.Очистить();
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;	
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыВиджеты);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	АдресДанныхРасшифровкиВиджеты = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ТаблицаВиджета);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
    
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиТабличногоДокумента(Команда)
	
	ЗаписатьНастройкиВХранилище();
	
КонецПроцедуры

#КонецОбласти

// -- VOG Ульянов И.В. 28.11.2019 task 941