#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограмныйИнтерфейс

// Возвращает настройки видимости и заголовков элементов формы. Используется для построения формы и табличного
// документа карточки номенклатуры.
// Параметры:
//  Объект - СправочникОбъект.вогТорговыеТочки, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитов
//	РежимВидимостиПоказатьТолькоВажные 	- Булево - признак отображения основных реквизитов
//
// Возвращаемое значение:
//  Структура - структура с ключами:
//		* ВидимостьЭлементов - структура видимости элементов
//		* ЗаголовкиЭлементов - структура заголовков элементов
//
Функция НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные = Ложь) Экспорт
	
	НастройкиВидимостиИЗаголовков = Новый Структура;
	
	ВидимостьЭлементов = СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные);
	УстановитьПривилегированныйРежим(Истина);
	ЗаголовкиЭлементов = СтруктураЗаголовковЭлементовФормы(Объект, ВидимостьЭлементов);
	УстановитьПривилегированныйРежим(Ложь);
		
	НастройкиВидимостиИЗаголовков.Вставить("ВидимостьЭлементов", ВидимостьЭлементов);
	НастройкиВидимостиИЗаголовков.Вставить("ЗаголовкиЭлементов", ЗаголовкиЭлементов);
		
	Возврат НастройкиВидимостиИЗаголовков;
	
КонецФункции

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//	Возвращаемое значание:
//		Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	ИмяОбъекта = Метаданные.Справочники.вогТорговыеТочки.Имя;
	
	Результат = РегистрыСведений.вогЗапретРедактированияРеквизитов.ПолучитьБлокируемыеРеквизитыОбъекта(ИмяОбъекта);	
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область КарточкаОбъекта

// Возвращает табличный документ партнера.
// Параметры:
//  Партнер - СправочникОбъект.вогТорговыеТочки, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитов 
//  НастройкиВидимостиИЗаголовков - Структура - см. функцию Справочники.вогТорговыеТочки.НастройкиВидимостиИЗаголовков
//
// Возвращаемое значение:
//	ТабличныйДокумент - табличный документ с реквизитами
//
Функция ТабличныйДокументКарточкиОбъекта(ТорговаяТочка, НастройкиВидимостиИЗаголовков) Экспорт
	
	Перем Заголовок;
	
	ТолькоЗаполненные = (НастройкиВидимостиИЗаголовков.Свойство("ТолькоЗаполненные") И НастройкиВидимостиИЗаголовков.ТолькоЗаполненные);
	
	Объект = Неопределено;
	Если ТипЗнч(ТорговаяТочка) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
		Объект = ТорговаяТочка.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(ТорговаяТочка) = Тип("СправочникОбъект.вогТорговыеТочки")
		Или ТипЗнч(ТорговаяТочка) = Тип("ДанныеФормыСтруктура") Тогда
		Объект = ТорговаяТочка;
	Иначе
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	ТабличныйДокументКарточка = Новый ТабличныйДокумент;
	
	СтруктураВидимости = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	СтруктураЗаголовков = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Макет = ПолучитьМакет("ПФ_MXL_КарточкаТорговойТочки");
	
	#Область Шапка
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Объект);
		
	Если Не ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		ОбластьШапка.Параметры.НаименованиеПолное = ТекстЗначенияНеЗаполнен("НаименованиеПолное");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаНаименованиеПолное = "НаименованиеПолное";
	
	Если Не ЗначениеЗаполнено(Объект.Вывеска) Тогда
		ОбластьШапка.Параметры.Вывеска = ТекстЗначенияНеЗаполнен("Вывеска");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаНаименованиеПолное = "Вывеска";
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		ОбластьШапка.Параметры.Партнер = ТекстЗначенияНеЗаполнен("Партнер");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаПартнер = "Партнер";
	
	СтруктураЗаполненостиОбъекта = вогКонтрольЗаполненностиРеквизитовОбъектов.СтруктураЗаполненостиОбъекта(Объект.Ссылка); 
	
	ОбластьШапка.Параметры.ПроцентЗаполненностиОбщий = СтруктураЗаполненостиОбъекта.ПроцентЗаполненностиОбщий;
	ОбластьШапка.Область("ПроцентЗаполненностиИндикатор").Картинка = СтруктураЗаполненостиОбъекта.Картинка;
		
	ТабличныйДокументКарточка.Присоединить(ОбластьШапка);
	
	#КонецОбласти
	
	ТабличныйДокументКолонки = Новый ТабличныйДокумент;
	
	#Область ОбщиеДанные
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	//Классификаторы
	Классификаторы = CRM_КлассификаторыВызовСервера.ТаблицаСоставаКлассификаторовОбъекта(Объект.Ссылка);
	Если ГлаваВидна("Классификаторы", СтруктураВидимости,, Классификаторы.Количество()) Тогда 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаКлассификаторов", Классификаторы);
		Запрос.УстановитьПараметр("ОбъектСсылка", Объект.Ссылка);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаКлассификаторов.Классификатор КАК Классификатор,
			|	ТаблицаКлассификаторов.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
			|	ТаблицаКлассификаторов.Аналитика КАК Аналитика
			|ПОМЕСТИТЬ втТаблицаКлассификаторов
			|ИЗ
			|	&ТаблицаКлассификаторов КАК ТаблицаКлассификаторов
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Классификатор,
			|	Аналитика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора,
			|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
			|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
			|ПОМЕСТИТЬ втТекущиеЗначенияКлассификаторов
			|ИЗ
			|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
			|ГДЕ
			|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &ОбъектСсылка
			|	И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец, CRM_ОбъектыЗначенийКлассификаторов.Аналитика) В
			|			(ВЫБРАТЬ
			|				втТаблицаКлассификаторов.Классификатор,
			|				втТаблицаКлассификаторов.Аналитика
			|			ИЗ
			|				втТаблицаКлассификаторов КАК втТаблицаКлассификаторов)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЗначениеКлассификатора,
			|	Аналитика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_ЗначенияКлассификаторов.Владелец КАК Классификатор,
			|	CRM_ЗначенияКлассификаторов.Ссылка КАК Значение,
			|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит
			|ПОМЕСТИТЬ втВсеЗначенияКлассификаторов
			|ИЗ
			|	втТаблицаКлассификаторов КАК втТаблицаКлассификаторов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
			|		ПО втТаблицаКлассификаторов.Классификатор = CRM_ЗначенияКлассификаторов.Владелец
			|ГДЕ
			|	НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Классификатор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втВсеЗначенияКлассификаторов.Классификатор КАК Классификатор,
			|	втВсеЗначенияКлассификаторов.Классификатор.ВидОтображения КАК ВидОтображения,
			|	втВсеЗначенияКлассификаторов.Классификатор.Представление,
			|	втВсеЗначенияКлассификаторов.Значение,
			|	втВсеЗначенияКлассификаторов.Значение.Представление,
			|	втВсеЗначенияКлассификаторов.ДополнительныйРеквизит,
			|	ЕСТЬNULL(втТекущиеЗначенияКлассификаторов.ЗначениеРеквизита, НЕОПРЕДЕЛЕНО) КАК ЗначениеРеквизита,
			|	ВЫБОР
			|		КОГДА втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Включен
			|ИЗ
			|	втВсеЗначенияКлассификаторов КАК втВсеЗначенияКлассификаторов
			|		ЛЕВОЕ СОЕДИНЕНИЕ втТекущиеЗначенияКлассификаторов КАК втТекущиеЗначенияКлассификаторов
			|		ПО втВсеЗначенияКлассификаторов.Значение = втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора
			|
			|УПОРЯДОЧИТЬ ПО
			|	втВсеЗначенияКлассификаторов.Классификатор.РеквизитДопУпорядочивания,
			|	втВсеЗначенияКлассификаторов.Значение.РеквизитДопУпорядочивания
			|ИТОГИ ПО
			|	Классификатор";
				
		ВыборкаКлассификатор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	КонецЕсли;	
	
	//Доп. реквизиты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитов.Свойство КАК Свойство,
	|	НаборыДополнительныхРеквизитов.Ссылка КАК НаборСвойств,
	|	НаборыДополнительныхРеквизитов.Свойство.Заголовок КАК ПредставлениеРеквизита,
	|	ТорговыеТочкиДополнительныеРеквизиты.Значение КАК Значение,
	|	ИСТИНА КАК ОбщееСвойство,
	|	НаборыДополнительныхРеквизитов.НомерСтроки КАК НомерСтрокиДляСортировки
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки.ДополнительныеРеквизиты КАК ТорговыеТочкиДополнительныеРеквизиты
	|		ПО (ТорговыеТочкиДополнительныеРеквизиты.Ссылка = &ТорговаяТочка)
	|			И НаборыДополнительныхРеквизитов.Свойство = ТорговыеТочкиДополнительныеРеквизиты.Свойство
	|ГДЕ
	|	НЕ НаборыДополнительныхРеквизитов.Свойство.ЭтоДополнительноеСведение
	|	И НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_вогТорговыеТочки)";
	
	Если ТолькоЗаполненные Тогда
		Запрос.Текст = Запрос.Текст  + " И НЕ ТорговыеТочкиДополнительныеРеквизиты.Значение ЕСТЬ NULL"
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ТорговаяТочка", Объект.Ссылка);
	ДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	ДополнительныеРеквизиты.Сортировать("ОбщееСвойство Убыв, НомерСтрокиДляСортировки Возр");
		
	#КонецОбласти
	
	#Область ТабличныйДокументЛево
	
	ТабличныйДокументЛево = Новый ТабличныйДокумент;
		
	#Область Портрет
	
	Если ГлаваВидна("Портрет", СтруктураВидимости) Тогда 
		
		ОбластьПортретКлиентаЗаголовок = Макет.ПолучитьОбласть("ПортретЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьПортретКлиентаЗаголовок);
		
		// Вывод картинки
		Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
			
			ОбластьПортретКартинка = Макет.ПолучитьОбласть("ПортретКартинка");
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				КартинкаКонтаткта = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Объект.CRM_Фотография);
				УстановитьПривилегированныйРежим(Ложь);
			Исключение
				КартинкаКонтаткта = Неопределено; 
			КонецПопытки;
			
			Если ЗначениеЗаполнено(КартинкаКонтаткта) Тогда
				ОбластьКартинка = ОбластьПортретКартинка.Области.АдресКартинки; 
				
				Если ТипЗнч(КартинкаКонтаткта) = Тип("Картинка") Тогда
					ОбластьКартинка.Картинка = КартинкаКонтаткта;
				ИначеЕсли ТипЗнч(КартинкаКонтаткта) = Тип("ДвоичныеДанные") Тогда
					ОбластьКартинка.Картинка = Новый Картинка(КартинкаКонтаткта);
				КонецЕсли;
				
				ОбластьПортретКартинка.Параметры.Расшифровка = "ФайлКартинки";
				
				ТабличныйДокументЛево.Вывести(ОбластьПортретКартинка);
			КонецЕсли;
			
		Иначе
			
			ОписаниеКартинкиНет = Макет.ПолучитьОбласть("ФайлКартинкиСтрока");
			ОписаниеКартинкиНет.Параметры.Расшифровка = "ФайлКартинки";
			ТабличныйДокументЛево.Вывести(ОписаниеКартинкиНет);
			
		КонецЕсли;	
				
		Если РазделВиден("Вид", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Вид", Объект.Вид,,,, ТолькоЗаполненные);
		КонецЕсли;
		//{[+](фрагмент добавлен), Виноградов Дмитрий 07.06.2018 9:55:37 ID 000001937
		Если РазделВиден("КПП", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "КПП", Объект.КПП,,,, ТолькоЗаполненные);
		КонецЕсли;
		//}Администратор 07.06.2018 9:55:37
		
		Если РазделВиден("БизнесРегион", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "БизнесРегион", Объект.БизнесРегион,,,, ТолькоЗаполненные);
		КонецЕсли;
		
		Если РазделВиден("РегионДляЛогистики", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "РегионДляЛогистики", Объект.РегионДляЛогистики,,,, ТолькоЗаполненные);
		КонецЕсли;
		
		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Комментарий", Объект.Комментарий,,,, ТолькоЗаполненные);
		
		Если РазделВиден("ГиперссылкаПерейтиИзображения", СтруктураВидимости) Тогда
			ОбластьОписаниеИзображенияСтрока = Макет.ПолучитьОбласть("ИзображенияСтрока");
			
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиИзображения", Заголовок) Тогда
				ОбластьОписаниеИзображенияСтрока.Параметры.Изображения = Заголовок;
				ОбластьОписаниеИзображенияСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиИзображения";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьОписаниеИзображенияСтрока);
		КонецЕсли;
				
		Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимости) Тогда
			ОбластьОписаниеФайлыСтрока = Макет.ПолучитьОбласть("ФайлыСтрока");
			
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиФайлы", Заголовок) Тогда
				ОбластьОписаниеФайлыСтрока.Параметры.Файлы = Заголовок;
				ОбластьОписаниеФайлыСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиФайлы";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьОписаниеФайлыСтрока);
		КонецЕсли;
								
		Если РазделВиден("ГиперссылкаПерейтиАнкеты", СтруктураВидимости) Тогда
			ОбластьГиперссылкаПерейтиАнкеты = Макет.ПолучитьОбласть("ГиперссылкаПерейтиАнкетыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиАнкеты", Заголовок) Тогда  
				ОбластьГиперссылкаПерейтиАнкеты.Параметры.ГиперссылкаПерейтиАнкеты = Заголовок;
			КонецЕсли;
			ОбластьГиперссылкаПерейтиАнкеты.Параметры.Расшифровка = "ГиперссылкаПерейтиАнкеты";
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиАнкеты);
		КонецЕсли;
				
		Если РазделВиден("ГиперссылкаПерейтиУсловияДоставки", СтруктураВидимости) Тогда
			ОбластьГиперссылкаПерейтиУсловияДоставки = Макет.ПолучитьОбласть("ГиперссылкаПерейтиУсловияДоставкиСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиУсловияДоставки", Заголовок) Тогда  
				ОбластьГиперссылкаПерейтиУсловияДоставки.Параметры.ГиперссылкаПерейтиУсловияДоставки = Заголовок;
			КонецЕсли;
			ОбластьГиперссылкаПерейтиУсловияДоставки.Параметры.Расшифровка = "ГиперссылкаПерейтиУсловияДоставки";
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиУсловияДоставки);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиМероприятия", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиМероприятияСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиМероприятия";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиПроцессы", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиПроцессыСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиПроцессы";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
				
		Если РазделВиден("ГиперссылкаПерейтиЭкспозиции", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиЭкспозицииСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиЭкспозиции";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если ГлаваВидна("Классификаторы", СтруктураВидимости,, Классификаторы.Количество())
		  И РазделВиден("ГиперссылкаПерейтиЗначенияКлассификаторов", СтруктураВидимости) Тогда
			ОбластьГиперссылкаПерейтиЗначенияКлассификаторов = Макет.ПолучитьОбласть("ГиперссылкаПерейтиЗначенияКлассификаторовСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиЗначенияКлассификаторов", Заголовок) Тогда  
				ОбластьГиперссылкаПерейтиЗначенияКлассификаторов.Параметры.ГиперссылкаПерейтиЗначенияКлассификаторов = Заголовок;
			КонецЕсли;
			ОбластьГиперссылкаПерейтиЗначенияКлассификаторов.Параметры.Расшифровка = "ГиперссылкаПерейтиЗначенияКлассификаторов";
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиЗначенияКлассификаторов);
		КонецЕсли;
		
	КонецЕсли;
		
	#КонецОбласти
	
	#Область КонтактнаяИнформация
	
	Если ГлаваВидна("КонтактнаяИнформация", СтруктураВидимости) Тогда 
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("КонтактнаяИнформацияЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Если РазделВиден("Рынок", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Рынок", Объект.Рынок,,,, ТолькоЗаполненные);
		КонецЕсли;
		
		Если РазделВиден("МестоположениеНаРынке", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "МестоположениеНаРынке", Объект.МестоположениеНаРынке,,,, ТолькоЗаполненные);
		КонецЕсли;
		
		ГруппаВидовКИ = вогОбщегоНазначения.ГруппаВидовКИОбъекта(МетаданныеОбъекта);
		Если ГруппаВидовКИ <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
			Запрос.УстановитьПараметр("КонтактнаяИнформация", Объект.КонтактнаяИнформация.Выгрузить());
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
				|	КонтактнаяИнформация.Вид КАК Вид,
				|	КонтактнаяИнформация.Представление
				|ПОМЕСТИТЬ КонтактнаяИнформация
				|ИЗ
				|	&КонтактнаяИнформация КАК КонтактнаяИнформация
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Вид
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СправочникВидыКонтактнойИнформации.Ссылка КАК ВидКИ,
				|	СправочникВидыКонтактнойИнформации.Представление КАК ВидКИПредставление,
				|	ВЫБОР
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое) ТОГДА 4
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА 3
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА 2
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс) ТОГДА 1
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ДопПолеСортировки,
				|	ВЫБОР
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое) ТОГДА 2
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА 2
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА 1
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс) ТОГДА 1
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА 1
				|		ИНАЧЕ 2
				|	КОНЕЦ КАК Колонка,
				|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0) КАК НомерСтроки,
				|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК Представление
				|ИЗ
				|	Справочник.ВидыКонтактнойИнформации КАК СправочникВидыКонтактнойИнформации
				|		ЛЕВОЕ СОЕДИНЕНИЕ КонтактнаяИнформация КАК КонтактнаяИнформация
				|		ПО СправочникВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
				|ГДЕ
				|	НЕ СправочникВидыКонтактнойИнформации.ПометкаУдаления
				|	И СправочникВидыКонтактнойИнформации.Используется
				|	И ЕСТЬNULL(СправочникВидыКонтактнойИнформации.Родитель.Используется, ИСТИНА)
				|	И СправочникВидыКонтактнойИнформации.Родитель В(&ГруппаВидовКИ)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ВидКИ ИЕРАРХИЯ";
			
			ПорядковыйНомер = 1;
			
			КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
			КонтактнаяИнформация.Сортировать("Колонка, ДопПолеСортировки, НомерСтроки");
			
			Для каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
				Если ОбъектКонтактнойИнформации.ВидКИ = Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки
				  И ЗначениеЗаполнено(Объект.Рынок) Тогда
				  	ЗначениеПредставление = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Рынок, Справочники.ВидыКонтактнойИнформации.АдресПартнера);
					
				Иначе	
					ЗначениеПредставление = ОбъектКонтактнойИнформации.Представление;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ЗначениеПредставление) Тогда
					ПорядковыйНомер = ПорядковыйНомер + 1;	
					Продолжить;
				
				КонецЕсли;
				
				ИмяЭлементаКИ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
					"КонтактнаяИнформацияПоле",
					СтрЗаменить(ОбъектКонтактнойИнформации.ВидКИ.УникальныйИдентификатор(), "-", "x"),
					ПорядковыйНомер);
											
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "КонтактнаяИнформация", ЗначениеПредставление, ОбъектКонтактнойИнформации.ВидКИПредставление, ИмяЭлементаКИ,, ТолькоЗаполненные);		
				
				ПорядковыйНомер = ПорядковыйНомер + 1;	
				
			КонецЦикла;
							
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиКонтакты", СтруктураВидимости) Тогда
			ОбластьГиперссылкаПерейтиКонтакты = Макет.ПолучитьОбласть("ГиперссылкаПерейтиКонтактыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиКонтакты", Заголовок) Тогда  
				ОбластьГиперссылкаПерейтиКонтакты.Параметры.ГиперссылкаПерейтиКонтакты = Заголовок;
			КонецЕсли;
			ОбластьГиперссылкаПерейтиКонтакты.Параметры.Расшифровка = "ГиперссылкаПерейтиКонтакты";
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиКонтакты);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиЮрЛица", СтруктураВидимости) Тогда
			ОбластьГиперссылкаПерейтиЮрЛица = Макет.ПолучитьОбласть("ГиперссылкаПерейтиЮрЛицаСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиЮрЛица", Заголовок) Тогда  
				ОбластьГиперссылкаПерейтиЮрЛица.Параметры.ГиперссылкаПерейтиЮрЛица = Заголовок;
			КонецЕсли;
			ОбластьГиперссылкаПерейтиЮрЛица.Параметры.Расшифровка = "ГиперссылкаПерейтиЮрЛица";
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиЮрЛица);
		КонецЕсли;  
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Грузополучатели
	
	Если Не (Объект.Грузополучатели.Количество() = 0 И ТолькоЗаполненные) Тогда
		Если ГлаваВидна("Грузополучатели", СтруктураВидимости) Тогда 
			ОбластьЗаголовок = Макет.ПолучитьОбласть("ГрузополучателиЗаголовок");
			ТабличныйДокументЛево.Вывести(ОбластьЗаголовок);
			
			Если Объект.Грузополучатели.Количество() > 0 Тогда
				Для каждого СтрокаТЧ Из Объект.Грузополучатели Цикл
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Грузополучатели", СтрокаТЧ.Грузополучатель);
				КонецЦикла;
				
			Иначе	
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Грузополучатели", ТекстЗначенияНеЗаполнен("Грузополучатели"));
			КонецЕсли;
							
		КонецЕсли;	
		
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область РазделыЛево
	
	ОписаниеРазделов = вогОбщегоНазначения.ПолучитьДанныеРазделаКарточки(МетаданныеОбъекта.ПолноеИмя(), 
		"Лево", ВыборкаКлассификатор, ДополнительныеРеквизиты);
	Для каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
		Если ОписаниеРаздела.ДанныеРаздела.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЦветФона = ОписаниеРаздела.ЦветФона;
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("РазделЗаголовокЛево");
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОписаниеРаздела.РазделПредставление;
		ТабличныйДокументЛево.Вывести(ОбластьЗаголовок);		   
		
		Для каждого ЭлементРаздела Из ОписаниеРаздела.ДанныеРаздела Цикл
			ОписаниеДанных = Неопределено;
			Если Не ЭлементРаздела.СоставРаздела.Свойство("ОписаниеДанных", ОписаниеДанных) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементРаздела.ТипРаздела = "ДополнительныеРеквизиты" Тогда				
				ИмяЭлементаДопРеквизита = "ДополнительныйРеквизитЗначение_" 
					+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.НаборСвойств.УникальныйИдентификатор())), "-", "x")
					+ "_"
					+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.Свойство.УникальныйИдентификатор())), "-", "x");
				
				Если РазделВиден(ИмяЭлементаДопРеквизита, СтруктураВидимости) Тогда 
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ДополнительныеРеквизитыЛево", ОписаниеДанных.Значение, ОписаниеДанных.ПредставлениеРеквизита, ИмяЭлементаДопРеквизита, 0,, ЦветФона);		
				КонецЕсли;	
				
			ИначеЕсли ЭлементРаздела.ТипРаздела = "Классификаторы" Тогда
				ИмяЭлементаКлассфикатора =  CRM_КлассификаторыВызовСервера.ИмяОсновногоЭлементаКлассификатора(ОписаниеДанных.Классификатор, ОписаниеДанных.ВидОтображения); 
				Если ТипЗнч(ОписаниеДанных.Значения) = Тип("Строка") Тогда
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "КлассификаторыЛево", ОписаниеДанных.Значения, ОписаниеДанных.КлассификаторПредставление, ИмяЭлементаКлассфикатора, 0, ТолькоЗаполненные, ЦветФона);
				Иначе	
					Если ОписаниеДанных.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
						Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
							ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ДополнительныеРеквизитыЛево", СтруктураЗначения.ЗначениеРеквизита, СтруктураЗначения.ЗначениеПредставление, ИмяЭлементаКлассфикатора, 0, ТолькоЗаполненные, ЦветФона);
						КонецЦикла
						
					Иначе	
					
						ОбластьТаблицейЗаголовок = Макет.ПолучитьОбласть("КлассификаторыТаблицейЗаголовокЛевоСтрока");
						ОбластьТаблицейЗаголовок.Параметры.КлассификаторыЗаголовок = ОписаниеДанных.КлассификаторПредставление;
						ОбластьТаблицейЗаголовок.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
						
						УстановитьЦветФонаОбласти(ОбластьТаблицейЗаголовок, ЦветФона);	
						ТабличныйДокументЛево.Вывести(ОбластьТаблицейЗаголовок);		   
						
						Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
							ОбластьКлассификаторыТаблицейСтрока = Макет.ПолучитьОбласть("КлассификаторыТаблицейЛевоСтрока");
							ОбластьКлассификаторыТаблицейСтрока.Параметры.КлассификаторыЛевоРеквизит = СтруктураЗначения.ЗначениеПредставление;
							
							Если СтруктураЗначения.Включен Тогда
								Картинка = БиблиотекаКартинок.CRM_УстановитьФлажки;	
							Иначе
								Картинка = БиблиотекаКартинок.CRM_СнятьФлажки;	
							КонецЕсли;
							
							ОбластьКлассификаторыТаблицейСтрока.Область("КлассификаторыТаблицейЛевоКартинка").Картинка = Картинка;
							ОбластьКлассификаторыТаблицейСтрока.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
							
							УстановитьЦветФонаОбласти(ОбластьКлассификаторыТаблицейСтрока, ЦветФона);	
							ТабличныйДокументЛево.Вывести(ОбластьКлассификаторыТаблицейСтрока);		   
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	ТабличныйДокументКолонки.Присоединить(ТабличныйДокументЛево);
	
	#КонецОбласти
		
	#Область ТабличныйДокументПраво
	
	ТабличныйДокументПраво = Новый ТабличныйДокумент;
	
	#Область Менеджеры
	
	Если ГлаваВидна("Менеджеры", СтруктураВидимости) Тогда
		МенеджерыОбъекта = вогУправлениеДоступом.МенеджерыВладельца(Объект.Ссылка);
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("МенеджерыЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если Не (МенеджерыОбъекта.Количество() = 0 И ТолькоЗаполненные) Тогда			
			Для Каждого СтрокаМенеджера Из МенеджерыОбъекта Цикл
				ОбластьМенеджерыСтрока = Макет.ПолучитьОбласть("МенеджерыСтрока");
				ОбластьМенеджерыСтрока.Параметры.МенеджерСтрока 		  	   = СтрокаМенеджера.Менеджер;
				ОбластьМенеджерыСтрока.Параметры.Расшифровка  			  	   = "Менеджеры";
				
				ОбластьМенеджерыСтрока.Параметры.ОрганизацияСтрока 		 	   = СтрокаМенеджера.Организация;
				ОбластьМенеджерыСтрока.Параметры.Расшифровка                   = "Менеджеры";
				
				ОбластьМенеджерыСтрока.Параметры.РольСтрока 		 	   	   = СтрокаМенеджера.Роль;
				ОбластьМенеджерыСтрока.Параметры.Расшифровка                   = "Менеджеры";
				
				ОбластьМенеджерыСтрока.Параметры.НаправлениеДеятельностиСтрока = СтрокаМенеджера.НаправлениеДеятельности;
				ОбластьМенеджерыСтрока.Параметры.Расшифровка                   = "Менеджеры";
				
				ТабличныйДокументПраво.Вывести(ОбластьМенеджерыСтрока);		   
				
			КонецЦикла;
			
		КонецЕсли;		
		
		Если РазделВиден("ГиперссылкаПерейтиВременныйДоступ", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ВременныйДоступСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиВременныйДоступ";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		ОбластьДопСтрока = Макет.ПолучитьОбласть("ДопСтрокаПраво");
		ТабличныйДокументПраво.Вывести(ОбластьДопСтрока);		
		
	КонецЕсли;	
		
	#КонецОбласти
				
	#Область НаправленияДеятельности
	
	Если Не (Объект.Направления.Количество() = 0 И ТолькоЗаполненные) Тогда
		Если ГлаваВидна("НаправленияДеятельности", СтруктураВидимости) Тогда 
			ОбластьЗаголовок = Макет.ПолучитьОбласть("НаправленияДеятельностиЗаголовок");
			ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
			
			Если Объект.Направления.Количество() > 0 Тогда
				Для каждого СтрокаНаправления Из Объект.Направления Цикл
					//Направление
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НаправленияДеятельности", СтрокаНаправления.Направление,, "Направление");
					СтруктураПоиска = Новый Структура("Направление", СтрокаНаправления.Направление); 
					
					ЦветФона = Справочники.вогГруппыЦвета.ПолучитьЗначениеЦвета(СтрокаНаправления.Направление, "вогЦвет.Цвет");
					
					// ++ Харченко Д.И. № 000002202 - 05.09.2018 / Удаление ТЧ Конкуренты. //TODO: Удалить после проверки

					//Конкуренты
					//Строки = Объект.Конкуренты.НайтиСтроки(СтруктураПоиска);
					//Если Не (Строки.Количество() = 0 И ТолькоЗаполненные) Тогда
					//	ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НаправленияДеятельностиРаздел", НСтр("ru = 'Конкуренты'"),, "Направление",,, ЦветФона);
					//	Если Строки.Количество() > 0 Тогда
					//		Для каждого Строка Из Строки Цикл
					//			ТекстЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2 (%3)",
					//				Отступ(4), Строка.Конкурент, Строка.ТорговаяТочкаКонкурента);	
					//			
					//			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НаправленияДеятельностиРеквизит", ТекстЗначения,, "Направление", 0, ТолькоЗаполненные, ЦветФона);
					//			
					//		КонецЦикла;
					//	Иначе
					//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НаправленияДеятельностиРеквизит", Отступ(4) + ТекстЗначенияНеЗаполнен("НаправленияДеятельности"),, "Направление",,, ЦветФона);
					//		
					//	КонецЕсли;
					//	
					//КонецЕсли;
					
					// --
					
					//Поставщики
					Строки = Объект.Поставщики.НайтиСтроки(СтруктураПоиска);
					Если Не (Строки.Количество() = 0 И ТолькоЗаполненные) Тогда
						ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НаправленияДеятельностиРаздел", НСтр("ru = 'Поставщики'"),, "Направление",,, ЦветФона);
						Если Строки.Количество() > 0 Тогда
							Для каждого Строка Из Строки Цикл
								ТекстЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2",
									Отступ(4), Строка.Поставщик);	
								
								ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НаправленияДеятельностиРеквизит", ТекстЗначения,, "Направление", 0, ТолькоЗаполненные, ЦветФона);
								
							КонецЦикла;
						Иначе
							ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НаправленияДеятельностиРеквизит", Отступ(4) + ТекстЗначенияНеЗаполнен("НаправленияДеятельности"),, "Направление",,, ЦветФона);
							
						КонецЕсли;
						
					КонецЕсли;
					
					//Персонал
					Строки = Объект.Персонал.НайтиСтроки(СтруктураПоиска);
					Если Не (Строки.Количество() = 0 И ТолькоЗаполненные) Тогда
						ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НаправленияДеятельностиРаздел", НСтр("ru = 'Персонал'"),, "Направление",,, ЦветФона);
						Если Строки.Количество() > 0 Тогда
							Для каждого Строка Из Строки Цикл
								ТекстЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2 %3",
									Отступ(4), Строка.Сотрудник, ?(ЗначениеЗаполнено(Строка.Комментарий), " (" + Строка.Комментарий + ")", ""));	
								
								ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НаправленияДеятельностиРеквизит", ТекстЗначения,, "Направление", 0, ТолькоЗаполненные, ЦветФона);
								
							КонецЦикла;
						Иначе
							ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НаправленияДеятельностиРеквизит", Отступ(4) + ТекстЗначенияНеЗаполнен("НаправленияДеятельности"),, "Направление",,, ЦветФона);
							
						КонецЕсли;
						
					КонецЕсли;
					
					//ДополнительнаяИнформация
					Строки = Объект.CRM_ДополнительнаяИнформация.НайтиСтроки(СтруктураПоиска);
					Если Не (Строки.Количество() = 0 И ТолькоЗаполненные) Тогда
						ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НаправленияДеятельностиРаздел", НСтр("ru = 'Доп. информация'"),, "Направление",,, ЦветФона);
						Если Строки.Количество() > 0 Тогда
							Для каждого Строка Из Строки Цикл
								ТекстЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2 (%3)",
									Отступ(4), Строка.Свойство, Строка.Значение);	
								
								ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НаправленияДеятельностиРеквизит", ТекстЗначения,, "Направление", 0, ТолькоЗаполненные, ЦветФона);
								
							КонецЦикла;
						Иначе
							ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НаправленияДеятельностиРеквизит", Отступ(4) + ТекстЗначенияНеЗаполнен("НаправленияДеятельности"),, "Направление",,, ЦветФона);
							
						КонецЕсли;	
						
					КонецЕсли;	
					
				КонецЦикла;
			Иначе
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НаправленияДеятельностиРеквизит", ТекстЗначенияНеЗаполнен("НаправленияДеятельности"),, "Направление",,, ЦветФона);
				
			КонецЕсли;  
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РазделыПраво
	
	ОписаниеРазделов = вогОбщегоНазначения.ПолучитьДанныеРазделаКарточки(МетаданныеОбъекта.ПолноеИмя(), 
		"Право", ВыборкаКлассификатор, ДополнительныеРеквизиты);
	Для каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
		Если ОписаниеРаздела.ДанныеРаздела.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЦветФона = ОписаниеРаздела.ЦветФона;
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("РазделЗаголовокПраво");
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОписаниеРаздела.РазделПредставление;
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);		   
		
		Для каждого ЭлементРаздела Из ОписаниеРаздела.ДанныеРаздела Цикл
			ОписаниеДанных = Неопределено;
			Если Не ЭлементРаздела.СоставРаздела.Свойство("ОписаниеДанных", ОписаниеДанных) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементРаздела.ТипРаздела = "ДополнительныеРеквизиты" Тогда				
				ИмяЭлементаДопРеквизита = "ДополнительныйРеквизитЗначение_" 
					+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.НаборСвойств.УникальныйИдентификатор())), "-", "x")
					+ "_"
					+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.Свойство.УникальныйИдентификатор())), "-", "x");
				
				Если РазделВиден(ИмяЭлементаДопРеквизита, СтруктураВидимости) Тогда 
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ДополнительныеРеквизитыПраво", ОписаниеДанных.Значение, ОписаниеДанных.ПредставлениеРеквизита, ИмяЭлементаДопРеквизита, 0,, ЦветФона);		
				КонецЕсли;	
				
			ИначеЕсли ЭлементРаздела.ТипРаздела = "Классификаторы" Тогда
				ИмяЭлементаКлассфикатора =  CRM_КлассификаторыВызовСервера.ИмяОсновногоЭлементаКлассификатора(ОписаниеДанных.Классификатор, ОписаниеДанных.ВидОтображения); 
				Если ТипЗнч(ОписаниеДанных.Значения) = Тип("Строка") Тогда
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КлассификаторыПраво", ОписаниеДанных.Значения, ОписаниеДанных.КлассификаторПредставление, ИмяЭлементаКлассфикатора, 0, ТолькоЗаполненные, ЦветФона);
				Иначе	
					Если ОписаниеДанных.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
						Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
							ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ДополнительныеРеквизитыПраво", СтруктураЗначения.ЗначениеРеквизита, СтруктураЗначения.ЗначениеПредставление, ИмяЭлементаКлассфикатора, 0, ТолькоЗаполненные, ЦветФона);
						КонецЦикла
						
					Иначе	
					
						ОбластьТаблицейЗаголовок = Макет.ПолучитьОбласть("КлассификаторыТаблицейЗаголовокПравоСтрока");
						ОбластьТаблицейЗаголовок.Параметры.КлассификаторыЗаголовок = ОписаниеДанных.КлассификаторПредставление;
						ОбластьТаблицейЗаголовок.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
						
						УстановитьЦветФонаОбласти(ОбластьТаблицейЗаголовок, ЦветФона);	
						ТабличныйДокументПраво.Вывести(ОбластьТаблицейЗаголовок);		   
						
						Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
							ОбластьКлассификаторыТаблицейСтрока = Макет.ПолучитьОбласть("КлассификаторыТаблицейПравоСтрока");
							ОбластьКлассификаторыТаблицейСтрока.Параметры.КлассификаторыПравоРеквизит = СтруктураЗначения.ЗначениеПредставление;
							
							Если СтруктураЗначения.Включен Тогда
								Картинка = БиблиотекаКартинок.CRM_УстановитьФлажки;	
							Иначе
								Картинка = БиблиотекаКартинок.CRM_СнятьФлажки;	
							КонецЕсли;
							
							ОбластьКлассификаторыТаблицейСтрока.Область("КлассификаторыТаблицейПравоКартинка").Картинка = Картинка;
							ОбластьКлассификаторыТаблицейСтрока.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
							
							УстановитьЦветФонаОбласти(ОбластьКлассификаторыТаблицейСтрока, ЦветФона);	
							ТабличныйДокументПраво.Вывести(ОбластьКлассификаторыТаблицейСтрока);		   
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
		
	ТабличныйДокументКолонки.Присоединить(ТабличныйДокументПраво);
	
	#КонецОбласти
	
	ТабличныйДокументКарточка.Вывести(ТабличныйДокументКолонки);
		
	Возврат ТабличныйДокументКарточка;
	
КонецФункции

Функция ТекстЗначенияНеЗаполнен(ИмяРаздела)

	Если ИмяРаздела = "Наименование" Тогда
		Возврат НСтр("ru = '<не указано>'");
	ИначеЕсли ИмяРаздела = "НаименованиеПолное" Тогда
		Возврат НСтр("ru = '<не указано>'");
	ИначеЕсли ИмяРаздела = "Вывеска" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "Партнер" Тогда
		Возврат НСтр("ru = '<клиент не указан>'");
	ИначеЕсли ИмяРаздела = "Грузополучатели" Тогда
		Возврат НСтр("ru = '<не указаны>'");
	ИначеЕсли ИмяРаздела = "БизнесРегион" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "РегионДляЛогистики" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "Рынок" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "МестоположениеНаРынке" Тогда
		Возврат НСтр("ru = '<не указано>'");
	ИначеЕсли ИмяРаздела = "Комментарий" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "КонтактнаяИнформация" Тогда
		Возврат НСтр("ru = '<значение не задано>'");
	ИначеЕсли ИмяРаздела = "НаправленияДеятельности" Тогда
		Возврат НСтр("ru = '<не указаны>'");
	ИначеЕсли ИмяРаздела = "КлассификаторыЛево" Тогда
		Возврат НСтр("ru = '<значения не заданы>'");	
	ИначеЕсли ИмяРаздела = "КлассификаторыПраво" Тогда
		Возврат НСтр("ru = '<значения не заданы>'");	
	ИначеЕсли ИмяРаздела = "ДополнительныеРеквизитыЛево" Тогда
		Возврат НСтр("ru = '<значение не задано>'");		
	ИначеЕсли ИмяРаздела = "ДополнительныеРеквизитыПраво" Тогда
		Возврат НСтр("ru = '<значение не задано>'");		
		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЦветФонаОбласти(ИсходнаяОбласть, ЦветФона)

	Если ЦветФона <> Неопределено Тогда
		ВсяОбласть	     = ИсходнаяОбласть.Область();
		Область   	     = ИсходнаяОбласть.Область(1, 2, 1, ВсяОбласть.Право - 1);
		Область.ЦветФона = ЦветФона;
		
	КонецЕсли;

КонецПроцедуры

Функция Отступ(Количество)

	Результат = "";
	Для Сч = 1 По Количество Цикл
		Результат = Результат + " ";
	КонецЦикла;	

	Возврат Результат;
	
КонецФункции // Отступ()

Процедура ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокумент, Макет, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита = Неопределено, НовоеИмяРаздела = Неопределено, КоличествоДополнительныхСтрок = Неопределено, ТолькоЗаполненные = Ложь, ЦветФона  = Неопределено)
	
	ОбластьСтрока = Макет.ПолучитьОбласть(ИмяРаздела + "Строка");
		
	Если ТекстЗаголовкаРеквизита <> Неопределено Тогда 
		ОбластьСтрока.Параметры[ИмяРаздела + "Реквизит"] = Строка(ТекстЗаголовкаРеквизита) + ":";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗначенияРеквизита) Тогда 
		ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияРеквизита;
	Иначе
		Если Не ТолькоЗаполненные Тогда
			ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияНеЗаполнен(ИмяРаздела);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НовоеИмяРаздела = Неопределено Тогда 
		ОбластьСтрока.Параметры.Расшифровка = ИмяРаздела;
	Иначе
		ОбластьСтрока.Параметры.Расшифровка = НовоеИмяРаздела;
	КонецЕсли;
	
	УстановитьЦветФонаОбласти(ОбластьСтрока, ЦветФона);	
	ТабличныйДокумент.Вывести(ОбластьСтрока);
	
	Если КоличествоДополнительныхСтрок = Неопределено Тогда
		КоличествоДополнительныхСтрок = 0;
		КоличествоДополнительныхСтрок = КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита);
		
	КонецЕсли;
	
	Счетчик = КоличествоДополнительныхСтрок;
	ОбластьДопСтрока = Макет.ПолучитьОбласть(ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела));
	УстановитьЦветФонаОбласти(ОбластьДопСтрока, ЦветФона);	
	
	Пока Счетчик > 0 Цикл
		Счетчик = Счетчик - 1;
		ТабличныйДокумент.Вывести(ОбластьДопСтрока);
	КонецЦикла;
	
	ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяРаздела + "Строка", КоличествоДополнительныхСтрок);
	                                                                                                           		
КонецПроцедуры

Процедура ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяОбласти, КоличествоДопСтрок)
	
	Если КоличествоДопСтрок = 0 Тогда 
		Возврат;
	КонецЕсли;

	Область = ТабличныйДокумент.Область(ИмяОбласти);	
	Область.Разъединить();
	Область.Имя = Неопределено;
	АдресОбласти = Область.Имя;
	СтруктураАдреса = СтруктураАдреса(АдресОбласти);
	
	АдресКолонкиЗаголовкаНачало = СтруктураАдреса.АдресКолонкиНачало + 1; // + 1, т.к. слева колонка-отступ
	АдресКолонкиЗаголовкаКонец = АдресКолонкиЗаголовкаНачало + 7; // +7, т.к. заголовок занимает 8 колонок
	АдресКолонкиЗначенияНачало = АдресКолонкиЗаголовкаКонец + 1;
	
	// В левой колонке карточки разность должна быть равна 20, в правой - 21
	Если СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 20 Тогда
		АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец;
	ИначеЕсли СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 21 Тогда
		АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец - 1;
	КонецЕсли;
	
	АдресСтрокиНачало = СтруктураАдреса.АдресСтрокиНачало; 
	АдресСтрокиКонец = СтруктураАдреса.АдресСтрокиКонец;
	
	//Для заголовка
	НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗаголовкаНачало + ":" 
				+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗаголовкаКонец;
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	Область.Объединить();
	
	//Для значения
	НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗначенияНачало + ":" 
				+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗначенияКонец;
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	Область.Объединить();
		
КонецПроцедуры

Функция СтруктураАдреса(Адрес)
	
	МассивАдресОбласти = СтрРазделить(Адрес, ":");
	Если МассивАдресОбласти.Количество() <> 2 Тогда
		// Это значит, что строка состоит из одной колонки, процедура объединения с такими не работает
		Возврат Неопределено;
	КонецЕсли;
	
	АдресНачало = МассивАдресОбласти[0];
	МассивАдресНачало = СтрРазделить(АдресНачало, "C");
	АдресСтрокиНачало = СтрЗаменить(МассивАдресНачало[0], "R", "");
	АдресКолонкиНачало = МассивАдресНачало[1];
	
	АдресКонец = МассивАдресОбласти[1];
	МассивАдресКонец = СтрРазделить(АдресКонец, "C");
	АдресСтрокиКонец = СтрЗаменить(МассивАдресКонец[0], "R", "");
	АдресКолонкиКонец = МассивАдресКонец[1];

	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("АдресСтрокиНачало", 	Число(АдресСтрокиНачало));
	СтруктураАдреса.Вставить("АдресКолонкиНачало", 	Число(АдресКолонкиНачало));
	СтруктураАдреса.Вставить("АдресСтрокиКонец", 	Число(АдресСтрокиКонец));
	СтруктураАдреса.Вставить("АдресКолонкиКонец", 	Число(АдресКолонкиКонец));
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела)
		
	Если ИмяРаздела = "КлассификаторыЛево"   
		Или ИмяРаздела = "ДополнительныеРеквизитыЛево"
		Или ИмяРаздела = "Вид"
		Или ИмяРаздела = "Пол"
		Или ИмяРаздела = "БизнесРегион"
		Или ИмяРаздела = "РегионДляЛогистики"
		Или ИмяРаздела = "Комментарий"
		Или ИмяРаздела = "Рынок"
		Или ИмяРаздела = "МестоположениеНаРынке"
		Или ИмяРаздела = "Грузополучатели"
		Или ИмяРаздела = "КонтактнаяИнформация" Тогда
		Возврат "ДопСтрокаЛево";
	Иначе
		Возврат "ДопСтрокаПраво";
	КонецЕсли;
	
КонецФункции

Функция КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗаполненияЗначения, ТекстЗаполненияРеквизита)
	
	ШиринаКолонки = 2.38;
	КоличествоКолонокВЗначенииРеквизита = 12;
	ШиринаЗначенияРеквизита = КоличествоКолонокВЗначенииРеквизита * ШиринаКолонки;
	ЧислоСтрокЗначения = КоличествоСтрок(ШиринаЗначенияРеквизита, ТекстЗаполненияЗначения);
		
	ЧислоСтрокСвойства = 0;
	Если ЗначениеЗаполнено(ТекстЗаполненияРеквизита) Тогда
		КоличествоКолонокВЗаголовкеРеквизита = 8;
		ШиринаЗаголовкаРеквизита = ШиринаКолонки * КоличествоКолонокВЗаголовкеРеквизита;
		ЧислоСтрокСвойства = КоличествоСтрок(ШиринаЗаголовкаРеквизита, ТекстЗаполненияРеквизита);
	КонецЕсли;
	
	ЧислоСтрок = Макс(ЧислоСтрокЗначения, ЧислоСтрокСвойства);
	
	Если ЧислоСтрок = 0 Тогда 
		Возврат 0;
	КонецЕсли;
	
	Возврат ЧислоСтрок - 1;	
	
КонецФункции

Функция КоличествоСтрок(ШиринаОбласти, Строка)
	
	 Если Не ЗначениеЗаполнено(Строка) Тогда 
		Возврат 0;
	КонецЕсли;
	
	СредняяШиринаСимвола = 0.75;
	
	МассивСлов = СтрРазделить(Строка, " ");
		
	КоличествоСтрок = 1; // = 1, т.к. проверку на заполненность мы сделали выше, а значит одна строка нужна точно
	ТекущаяСтрока = "";
	
	Для Каждого Слово Из МассивСлов Цикл
		
		ТекущаяСтрока = ТекущаяСтрока + Слово + " ";
		Если СтрДлина(ТекущаяСтрока) * СредняяШиринаСимвола > ШиринаОбласти Тогда
			КоличествоСтрок = КоличествоСтрок + 1;
			ТекущаяСтрока = Слово + " ";
		КонецЕсли;
		
	КонецЦикла;	 
	 	 
	Возврат КоличествоСтрок;
	
КонецФункции

Функция РазделВиден(ИмяРаздела, СтруктураВидимости)
	
	Видимость = Истина;
	Если СтруктураВидимости.Свойство(ИмяРаздела) Тогда 
		Видимость = СтруктураВидимости[ИмяРаздела];	
	КонецЕсли;
	
	Возврат Видимость;
	
КонецФункции

Функция ГлаваВидна(ИмяГлавы, СтруктураВидимости, КоличествоДопРеквизитов = 0, КоличествоЗначенийКлассификаторов = 0)
	
	Если ИмяГлавы = "Портрет" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "КонтактнаяИнформация" Тогда
		Возврат РазделВиден(ИмяГлавы, СтруктураВидимости);
	КонецЕсли;
		
	Если ИмяГлавы = "Классификаторы" Тогда
		Возврат КоличествоЗначенийКлассификаторов > 0 И ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");		
	КонецЕсли;
	
	Если ИмяГлавы = "Грузополучатели" Тогда
		Возврат РазделВиден("Грузополучатели", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "Менеджеры" Тогда
		Возврат СтруктураВидимости[ИмяГлавы];
	КонецЕсли;	
		
	Если ИмяГлавы = "НаправленияДеятельности" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "ДополнительныеРеквизиты" Тогда
		Возврат КоличествоДопРеквизитов > 0 И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");		
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

#КонецОбласти	
	
#Область МеханизмыНастройкиРаботыСРеквизитами

Функция РеквизитыОтключенныеПоФО() Экспорт
	
	Результат = Новый Массив;
		
	Возврат Результат;
	
КонецФункции

Функция ЗависимостьРеквизитов() Экспорт
												
	// Сформировать таблицу реквизитов для заполнения.
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("ДействиеСРеквизитом");
	
	Реквизиты = Метаданные.Справочники.вогТорговыеТочки.Реквизиты;	
	Для Каждого Реквизит из Реквизиты Цикл
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит            = Реквизит;
		НоваяСтрока.ДействиеСРеквизитом = "Добавить";

	КонецЦикла;
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу обязательных реквизитов.
// Параметры:
//	ВидНоменклатуры - СправочникОбъект.ВидыНоменклатуры - элемент справочника виды номенклатуры
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с обязательными для заполнения и выводимыми при создании реквизитами
//
Функция ТаблицаНастроекРеквизитов()

	ТаблицаНастроекРеквизитов = Новый ТаблицаЗначений;
	ТаблицаНастроекРеквизитов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));	
		
	Возврат ТаблицаНастроекРеквизитов;
	
КонецФункции

// Возвращает таблицу дополнительные реквизиты номенклатуры
//
// Параметры:
//  ВидНоменклатуры	 - СправочникСсылка.ВидыНоменклатуры 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//		* ИмяРеквизита - Строка - наименование свойства
//		* ПредставлениеРеквизита - Строка - заголовок свойства
//		* ЭтоДопРеквизит - Булево - всегда ИСТИНА
//		* ЭтоОбщийРеквизит - Булево - признак, что доп. реквизит входит в набор Справочник_Номенклатура_Общие
//		* ЗаполнятьОбязательно - Булево
//		* НаборСвойств - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - набор свойств, для которого был создан доп. реквизит
//		* Тип - ОписаниеТипов
//
Функция ВсеДополнительныеРеквизиты() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Свойство");
		Таблица.Колонки.Добавить("ЭтоДопРеквизит");
		Возврат Таблица;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка КАК Набор,
	|	ДополнительныеРеквизиты.Свойство.Наименование КАК ИмяРеквизита,
	|	ДополнительныеРеквизиты.Свойство.Заголовок КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ВЫБОР
	|		КОГДА ДополнительныеРеквизиты.Ссылка = &ОбщийНабор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОбщийРеквизит,
	|	ДополнительныеРеквизиты.Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
	|	ДополнительныеРеквизиты.Свойство.НаборСвойств КАК НаборСвойств,
	|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК Тип
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка = &ОбщийНабор";
		
	ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_вогТорговыеТочки)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбщийНабор", ОбщийНабор);  	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	 
КонецФункции

Функция ПравоДоступаНаОбъектМетаданныхПоРеквизиту(Право, РеквизитОбъектМетаданных)

	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивтиповДляПроверки = РеквизитОбъектМетаданных.Тип.Типы();
	Для Каждого Тип Из МассивтиповДляПроверки Цикл
		
		Если вогОбщегоНазначения.ЭтоПримитивныйТип(Тип) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных <> Неопределено
			И Не ПравоДоступа(Право, ОбъектМетаданных) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ВидимостьРеквизита(Реквизит, ИмяРеквизита, РеквизитыОтключенныеПоФО, РежимВидимостиПоказатьТолькоВажные,
	ТаблицаОбязательныхРеквизитов)
	
	//{[+](фрагмент добавлен), Виноградов Дмитрий 29.06.2018 12:50:00 ID
	// Уберем видимость реквизитов, которые отмечены к удалению из конфигурации
	Если СтрНачинаетсяС(ВРег(ИмяРеквизита), "УДАЛИТЬ_") Тогда
		Возврат Ложь;	
	КонецЕсли;
	//}Администратор 29.06.2018 12:50:00
	
	Если Не ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Возврат ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Реквизит)
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или ТаблицаОбязательныхРеквизитов.Найти(ИмяРеквизита, "Наименование") <> Неопределено)
	Иначе
		Возврат ПравоДоступа("Просмотр", Метаданные.Справочники.вогТорговыеТочки.Реквизиты[ИмяРеквизита])
				И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Метаданные.Справочники.вогТорговыеТочки.Реквизиты[ИмяРеквизита])
				И РеквизитыОтключенныеПоФО.Найти(ИмяРеквизита) = Неопределено
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или ТаблицаОбязательныхРеквизитов.Найти(ИмяРеквизита, "Наименование") <> Неопределено)
	КонецЕсли;
	
КонецФункции

// Возвращает структуру с видимостью элементов.
// Параметры:
//	Объект - СправочникОбъект.вогТорговыеТочки - элемент справочника номенклатуры
//	РежимВидимостиПоказатьТолькоВажные - Булево - признак отображения основных реквизитов
//
// Возвращаемое значение:
//	Структура - струтура видимости элементов. Ключ - имя элемента, значения - видимость
//
Функция СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные)
	
	СтруктураВидимости = Новый Структура;
	
	#Область ФункциональныеОпции
	
	ИспользоватьКлассификаторы = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");
	
	#КонецОбласти
		
	РеквизитыОтключенныеПоФО  = РеквизитыОтключенныеПоФО();
	ТаблицаОбязательныхРеквизитов = ТаблицаНастроекРеквизитов();
	
	НастройкиРеквизитов = ЗависимостьРеквизитов();
																
	Для Каждого СтрТабл из НастройкиРеквизитов Цикл
		ИмяРеквизита = СтрТабл.Реквизит.Имя;
		Если ИмяРеквизита = "CRM_Фотография" Тогда
			ИмяРеквизита = "ФайлКартинки";
		КонецЕсли;
		
		СтруктураВидимости.Вставить(ИмяРеквизита, СтрТабл.ДействиеСРеквизитом = "Добавить"
			И ВидимостьРеквизита(ИмяРеквизита,
							СтрТабл.Реквизит.Имя,
							РеквизитыОтключенныеПоФО,
							РежимВидимостиПоказатьТолькоВажные,
							ТаблицаОбязательныхРеквизитов));
	КонецЦикла;
	
	СтруктураВидимости.Вставить("ГруппаОбязательныеПоля", РежимВидимостиПоказатьТолькоВажные);
	
	СтруктураВидимости.Вставить("Партнер"			, Истина);
	СтруктураВидимости.Вставить("Вывеска"			, Истина);
	СтруктураВидимости.Вставить("НаименованиеПолное", Истина);
	
	// ++ Тищенко В.В. 10.01.2019
	// Убрать видиомсть Бизнес- регион
	СтруктураВидимости.БизнесРегион 		= Ложь;
	СтруктураВидимости.РегионДляЛогистики 	= Ложь;
	// -- Тищенко В.В. 
	
	#Область Портрет
	
	ГиперссылкаПерейтиФайлыВидимость = ПравоДоступа("Просмотр", Метаданные.Справочники.вогТорговыеТочкиПрисоединенныеФайлы)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	ВидимостьКомандФайлаКартинки = ВидимостьРеквизита("ФайлКартинки",
									"CRM_Фотография",
									РеквизитыОтключенныеПоФО,
									РежимВидимостиПоказатьТолькоВажные,
									ТаблицаОбязательныхРеквизитов);
									
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиИзображения", ГиперссылкаПерейтиФайлыВидимость 
		И вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка));
											
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиФайлы", ГиперссылкаПерейтиФайлыВидимость);
	
	СтруктураВидимости.Вставить("ДобавитьИзображение", ВидимостьКомандФайлаКартинки);
	СтруктураВидимости.Вставить("ОчиститьИзображение", ВидимостьКомандФайлаКартинки);
	СтруктураВидимости.Вставить("ИзменитьИзображение", ЗначениеЗаполнено(Объект.Ссылка));
	СтруктураВидимости.Вставить("ПросмотретьИзображение", ЗначениеЗаполнено(Объект.Ссылка));
	СтруктураВидимости.Вставить("ВыбратьКартинкуИзПрисоединенныхФайлов", ЗначениеЗаполнено(Объект.Ссылка));
		
	ГиперссылкаПерейтиАнкетыВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.Документы.вогАнкета);
		
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиАнкеты", 
		ГиперссылкаПерейтиАнкетыВидимость);
		
	ГиперссылкаПерейтиУсловияДоставкиВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.вогУсловияДоставки);
		
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиУсловияДоставки", 
		ГиперссылкаПерейтиУсловияДоставкиВидимость);
		
	ГиперссылкаПерейтиМероприятияВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.Документы.CRM_Мероприятие);
		
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиМероприятия", 
		ГиперссылкаПерейтиМероприятияВидимость);
		
	ГиперссылкаПерейтиПроцессыВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.БизнесПроцессы.CRM_БизнесПроцесс);
		
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиПроцессы", 
		ГиперссылкаПерейтиПроцессыВидимость);
		
	МенеджерыВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.вогМенеджерыОбъектов);
		
	СтруктураВидимости.Вставить("Менеджеры", МенеджерыВидимость);
		
	ГиперссылкаПерейтиВременныйДоступВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.вогВременныйДоступКТорговымТочкам);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиВременныйДоступ", 
		ГиперссылкаПерейтиВременныйДоступВидимость);
	
	ГиперссылкаПерейтиЭкспозицииВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.вогЭкспозицииКлиентов);
		
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиЭкспозиции", 
		ГиперссылкаПерейтиЭкспозицииВидимость);
		
	#КонецОбласти

	#Область КонтактнаяИнформация
	
	СтруктураВидимости.Вставить("РедактироватьКонтактныеДанные", Не РежимВидимостиПоказатьТолькоВажные);
	
	ГиперссылкаПерейтиКонтактыВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.Справочники.КонтактныеЛицаПартнеров);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиКонтакты",
		ГиперссылкаПерейтиКонтактыВидимость);
		
	ГиперссылкаПерейтиЮрЛицаВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.Справочники.вогЮридическиеЛица)
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.вогСвязиЮридическихЛиц);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиЮрЛица",
		ГиперссылкаПерейтиЮрЛицаВидимость);
		
	#КонецОбласти
	
	#Область Классификаторы
	
	ГиперссылкаПерейтиЗначенияКлассификаторовВидимость = ИспользоватьКлассификаторы
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов)
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиЗначенияКлассификаторов", 
		ГиперссылкаПерейтиЗначенияКлассификаторовВидимость);
	
	#КонецОбласти
	
	#Область Грузополучатели
	
	ГрузополучателиВидимость = Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("Грузополучатели", ГрузополучателиВидимость);
		
	#КонецОбласти
	
	#Область ВнешниеКоды
		
	СтруктураВидимости.Вставить("ВнешниеКоды", Не РежимВидимостиПоказатьТолькоВажные);
		
	#КонецОбласти
	
	#Область НаправленияДеятельности
		
	СтруктураВидимости.Вставить("ГруппаОблакоНаправленийДеятельности", Не РежимВидимостиПоказатьТолькоВажные);
	СтруктураВидимости.Вставить("СтраницыНаправлений", Не РежимВидимостиПоказатьТолькоВажные);
		
	#КонецОбласти
		
	#Область ДополнительныеРеквизиты

	// Установка видимости для дополнительных реквизитов.
	ВсеДополнительныеРеквизитыПартнера = ВсеДополнительныеРеквизиты();
	Для Каждого СтрокаТаблицыДопРеквизитов Из ВсеДополнительныеРеквизитыПартнера Цикл
		ИмяРеквизита     = СтрокаТаблицыДопРеквизитов.ИмяРеквизита;
		ИмяЭлементаФормы = "ДополнительныйРеквизитЗначение_"
			+ СтрЗаменить(?(СтрокаТаблицыДопРеквизитов.ЭтоОбщийРеквизит,
					ВРег(Строка(СтрокаТаблицыДопРеквизитов.Набор.УникальныйИдентификатор())),
					ВРег(Строка(СтрокаТаблицыДопРеквизитов.НаборСвойств.УникальныйИдентификатор()))),
				"-",
				"x")
			+ "_"
			+ СтрЗаменить(ВРег(Строка(СтрокаТаблицыДопРеквизитов.Свойство.УникальныйИдентификатор())), "-", "x");
		
		СтруктураВидимости.Вставить(ИмяЭлементаФормы, ВидимостьРеквизита(СтрокаТаблицыДопРеквизитов,
																			ИмяРеквизита,
																			РеквизитыОтключенныеПоФО,
																			РежимВидимостиПоказатьТолькоВажные,
																			ТаблицаОбязательныхРеквизитов));
		
	КонецЦикла;

	#КонецОбласти
			
	Возврат СтруктураВидимости;
	
КонецФункции

// Возвращает структуру с заголовками элементов.
// Параметры:
//	Объект - СправочникОбъект.вогТорговыеТочки - элемент справочника номенклатуры
//	СтруктураВидимостиЭлементов - Структура - струтура видимости элементов
//
// Возвращаемое значение:
//	Структура - струтура заголовков элементов. Ключ - имя элемента, значения - заголовок
//
Функция СтруктураЗаголовковЭлементовФормы(Объект, СтруктураВидимостиЭлементов)
	
	ИмяСправочникаХранилищаФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(Объект.Ссылка);
	ПолноеИмяСправочника = "Справочник." + ИмяСправочникаХранилищаФайлов;
		
	СтруктураЗаголовков = Новый Структура;
			
	#Область ЗаголовокиГиперссылок
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо КАК КонтактноеЛицо
	|			ИЗ
	|				РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних(, ОбъектСвязи = &ТорговаяТочка) КАК СвязиКонтактныхЛицСрезПоследних
	|			ГДЕ
	|				СвязиКонтактныхЛицСрезПоследних.ВидСвязи <> ЗНАЧЕНИЕ(Справочник.вогВидыСвязейКонтактныхЛиц.НеСвязан))
	|	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Анкета.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.вогАнкета КАК Анкета
	|ГДЕ
	|	Анкета.Респондент = &ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК ОбъектыЗначенийКлассификаторов
	|ГДЕ
	|	ОбъектыЗначенийКлассификаторов.Объект = &ТорговаяТочка
	|	И ОбъектыЗначенийКлассификаторов.Аналитика В(&ЗначенияИспользуемыхАналитик)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЮридическиеЛица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.вогЮридическиеЛица КАК ЮридическиеЛица
	|ГДЕ
	|	ЮридическиеЛица.Ссылка В
	|			(ВЫБРАТЬ
	|				СвязиЮридическихЛиц.ЮридическоеЛицо
	|			ИЗ
	|				РегистрСведений.вогСвязиЮридическихЛиц КАК СвязиЮридическихЛиц
	|			ГДЕ
	|				(ВЫРАЗИТЬ(СвязиЮридическихЛиц.ОбъектСвязи КАК Справочник.вогТорговыеТочки)) = &ТорговаяТочка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТорговыеТочкиПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.вогТорговыеТочкиПрисоединенныеФайлы КАК ТорговыеТочкиПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК ПрисоедниненныеФайлыОбъектовПоВидам
	|		ПО ТорговыеТочкиПрисоединенныеФайлы.Ссылка = ПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл
	|ГДЕ
	|	ТорговыеТочкиПрисоединенныеФайлы.ВладелецФайла = &ТорговаяТочка
	|	И НЕ ТорговыеТочкиПрисоединенныеФайлы.ПометкаУдаления
	|	И ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла.ТипФайла = ЗНАЧЕНИЕ(Перечисление.вогТипыПрисоединенныхФайлов.Изображение)
	|	И ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла.Принадлежность = &Принадлежность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТорговыеТочкиПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.вогТорговыеТочкиПрисоединенныеФайлы КАК ТорговыеТочкиПрисоединенныеФайлы
	|ГДЕ
	|	ТорговыеТочкиПрисоединенныеФайлы.ВладелецФайла = &ТорговаяТочка
	|	И НЕ ТорговыеТочкиПрисоединенныеФайлы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрУсловияДоставки.ТорговаяТочка КАК ТорговаяТочка
	|ИЗ
	|	РегистрСведений.вогУсловияДоставки КАК РегистрУсловияДоставки
	|ГДЕ
	|	РегистрУсловияДоставки.ТорговаяТочка = &ТорговаяТочка";
	
	Запрос.УстановитьПараметр("ТорговаяТочка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Принадлежность", ПолноеИмяСправочника);
	Запрос.УстановитьПараметр("ЗначенияИспользуемыхАналитик", CRM_КлассификаторыВызовСервера.ЗначенияИспользуемыхАналитикКлассификаторов().МассивЗначений);
		
	УстановитьПривилегированныйРежим(Истина);
	
	Выборки = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	ВидимостьЭлемента = Ложь;
	
	Если РазделВиден("ГиперссылкаПерейтиКонтакты", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[0].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Контакты'") + " (" + Количество + ")",,,,"Контакты");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиКонтакты", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиАнкеты", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[1].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Анкеты'") + " (" + Количество + ")",,,,"Анкеты");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиАнкеты", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиЗначенияКлассификаторов", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[2].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Значения классификаторов'") + " (" + Количество + ")",,,,"ЗначенияКлассификаторов");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиЗначенияКлассификаторов", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиЮрЛица", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[3].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Юр. лица'") + " (" + Количество + ")",,,,"ЮрЛица");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиЮрЛица", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиИзображения", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[4].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Изображения'") + " (" + Количество + ")",,,,"Файлы");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиИзображения", ЗаголовокГиперссылки);		
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[5].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Файлы'") + " (" + Количество + ")",,,,"Файлы");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиФайлы", ЗаголовокГиперссылки);		
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиУсловияДоставки", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[6].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Условия доставки'") + " (" + Количество + ")",,,,"УсловияДоставки");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиУсловияДоставки", ЗаголовокГиперссылки);		
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат СтруктураЗаголовков;

КонецФункции

#КонецОбласти

#КонецЕсли
