
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	ТекущийПользователь  = Пользователи.ТекущийПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
		
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.ВладелецШаблона = ПараметрыСеанса.ТекущийПользователь;
		
		Если НЕ ЗначениеЗаполнено(Объект.Состояние) Тогда
			Объект.Состояние = Справочники.CRM_СостоянияСобытий.ВСтадииПодготовки;
		КонецЕсли;
		
		ПолучитьПараметрыВидаВзаимодействия();
		
	КонецЕсли;
	
	Если Не ТекущийПользователь = Объект.ВладелецШаблона Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Объект.СторонниеЛица.Количество() = 0 Тогда
		Объект.СторонниеЛица.Добавить();
	КонецЕсли;	
	
	ОтрисоватьКатегорииНаФорме();
	
	ПериодическоеСтароеЗначение = Объект.Периодическое;
					
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", ТекущийПользователь.Подразделение);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.Тег.ПараметрыВыбора = НовыеПараметры;
		
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	ИспользоватьОповещенияСМС				= Константы.CRM_ИспользоватьОповещенияСМС.Получить();
	ИспользоватьОповещенияЭлектроннаяПочта	= Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить();
	
	ЗаполнитьРеквизитыФормыСтороннихЛиц(ЭтотОбъект);

	НастроитьЭлементыФормы(ЭтотОбъект);
	
	ВывестиДлительностьВПрограмме();
	
	ДатаОтсчетаДляРасчетаСроков = ТекущаяДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы(ЭтотОбъект);
	
	УправлениеВидимостьюПоПрограмме();
	Если Объект.СторонниеЛица.Количество()>1 тогда
		Элементы.ГруппаСторонниеЛица.Видимость = Истина;
		Элементы.НадписьНесколькоКонтактныхЛиц.Видимость = Ложь;
		Элементы.ГруппаСторонниеЛицаКонтактноеЛицо.Видимость = Ложь;
	КонецЕсли;
	
	Для каждого Строка из Объект.СторонниеЛица цикл
		Если ЗначениеЗаполнено(Строка.КонтактноеЛицо) тогда
			ЗаполнитьОписаниеДолжности(Строка);	
		КонецЕсли;
	КонецЦикла;
	
	ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	МассивСтрок = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ТекПользователь));
	Если МассивСтрок.Количество() > 0 Тогда
		Элементы.СвоиЛица.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	НастроитьВидимостьИДоступностьФормы();
	
	Если ОтложеннаяИнициализация Тогда
		ЗаполнитьРеквизитыФормыСтороннихЛиц(ЭтотОбъект);
	КонецЕсли;
	
	НастроитьПроверкуЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСрока" и Параметр.Форма = ЭтаФорма Тогда
		Если Параметр.Реквизит = "ДатаВремяНачало"	тогда
			ДатаВремяНачалоПриИзменении();	
		КонецЕсли;
		Если Параметр.реквизит = "ДатаВремяОкончание"	тогда
			ДатаВремяОкончаниеПриИзменении();	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
			
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги") Тогда
		Подключаемый_ОбновитьОблакоТегов();
	Иначе
		Элементы.ОблакоТегов.Видимость = Ложь;
	КонецЕсли;
	
	ПолучитьПараметрыВидаВзаимодействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ДатаНовая = ДатаВремяНачало;
	ОкончаниеСобытияНовое = ДатаВремяОкончание;
	Объект.Дата					= ДатаНовая;
	Объект.ОкончаниеМероприятия	= ОкончаниеСобытияНовое;
	
	Если Не ВопросИзмененияЗадавался Тогда
		ПериодическоеСобытиеСпособИзмененияРяда = "";
		
		Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			бПризнакИзмененоВРяде = Неопределено;
			Если Объект.Периодическое И НЕ Объект.ИзмененоВРяде И НЕ ПризнакПериодическоеСобытиеИнициализация Тогда
				// Проверка на то, что даты были изменены больше чем на день - для периодического события это означает установку
				// флага ИзмененоВРяде.
				ДатаСтарая				= Объект.Дата;
				ОкончаниеСобытияСтарое	= Объект.ОкончаниеМероприятия;
				бИзмененаДатаНачала		= НЕ (НачалоДня(ДатаСтарая) = НачалоДня(ДатаНовая));
				бИзмененаДатаОкончания	= НЕ (НачалоДня(ОкончаниеСобытияСтарое) = НачалоДня(ОкончаниеСобытияНовое));
				Если бИзмененаДатаНачала ИЛИ бИзмененаДатаОкончания Тогда
					бПризнакИзмененоВРяде = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			Если Не ПризнакПериодическоеСобытиеИнициализация Тогда
				Если Объект.Периодическое Тогда
					Если НЕ Объект.ИзмененоВРяде И (бПризнакИзмененоВРяде = Истина) Тогда
						Объект.ИзмененоВРяде = Истина;
					КонецЕсли;
				ИначеЕсли ПериодическоеСтароеЗначение И НЕ Объект.ИзмененоВРяде Тогда
					// Снята пометка "Периодическое".
					ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда";
				КонецЕсли;
				Если Объект.Периодическое И НЕ Объект.ИзмененоВРяде Тогда
					Если ПризнакПериодическоеСобытиеИнициализация Тогда
						ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд";
					Иначе
						Если НЕ Модифицированность И НЕ ПризнакИзмененоРасписание Тогда
							ПериодическоеСобытиеСпособИзмененияРяда = "";
						Иначе
							ПараметрыФормы = Новый Структура("ДоступныеДействия", Новый Массив());
							Если НЕ ПризнакИзмененоРасписание Тогда
								ПараметрыФормы.ДоступныеДействия.Добавить("ТолькоТекущее");
							КонецЕсли;
							ПараметрыФормы.ДоступныеДействия.Добавить("ДоКонцаРяда");
							ПараметрыФормы.ДоступныеДействия.Добавить("ВесьРяд");
							
							Отказ = Истина;
							ОП = Новый ОписаниеОповещения("ОбработчикОповещенияСпособаИзмененияРяда", ЭтотОбъект);
							ОткрытьФорму("Документ.CRM_Мероприятие.Форма.ФормаИзменениеПериодическогоСобытия", ПараметрыФормы, ЭтотОбъект,,,,ОП, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
							Возврат;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДатаВремяНачало) и ЗначениеЗаполнено(ДатаВремяОкончание) тогда
		Если ДатаВремяОкончание<=ДатаВремяНачало тогда
			предупр = Новый СообщениеПользователю;
			предупр.УстановитьДанные(ДатаВремяОкончание);
			предупр.Текст = "Дата и время окончания раньше чем дата начала мероприятия";
			предупр.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтотОбъект.Модифицированность И ВопросИзмененияЗадавался Тогда
		ВопросИзмененияЗадавался = Ложь;
		ЭтотОбъект.Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СторонниеЛица.Свернуть("Партнер,вогТорговаяТочка,КонтактноеЛицо,Адрес,ПредставлениеАдреса,Принадлежность,Телефон","ОтправлятьСМС,ОтправлятьПоПочте");

	Если ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) Тогда
		Если (ПризнакПериодическоеСобытиеИнициализация Или ПризнакИзмененоРасписание) И ТекущийОбъект.Периодическое Тогда
			Если ПризнакПериодическоеСобытиеИнициализация Тогда
				ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд";
			КонецЕсли;
			
			Если ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд" Тогда
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.РядСобытий.ДатаНачала, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			ИначеЕсли ПериодическоеСобытиеСпособИзмененияРяда = "ДоКонцаРяда" Тогда
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.Дата, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			Иначе
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.РядСобытий.ДатаНачала, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			КонецЕсли;
			
			Если МассивДатРасписания.Количество() = 0 Тогда
				Если ПризнакПериодическоеСобытиеИнициализация Или ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд" Тогда
					Отказ = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Расписание периодического события настроенно некорректно - в указанный период не попадает ни одного события!'"), СтатусСообщения.Важное);
					Элементы.РядСобытийНаименование.Доступность = (Объект.Периодическое И ЗначениеЗаполнено(Объект.РядСобытий) И Не Объект.ИзмененоВРяде);
					Элементы.РядСобытийНаименование.Видимость = Объект.Периодическое;
					Возврат;
				КонецЕсли;
			Иначе
				ДатаВремяПервоеСобытие = МассивДатРасписания[0];
				ТекущийОбъект.Дата = НачалоДня(ДатаВремяПервоеСобытие) + (ТекущийОбъект.Дата - НачалоДня(ТекущийОбъект.Дата)) ;
				ТекущийОбъект.ОкончаниеМероприятия = НачалоДня(ДатаВремяПервоеСобытие) + (ТекущийОбъект.ОкончаниеМероприятия - НачалоДня(ТекущийОбъект.ОкончаниеМероприятия));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СобытияЭлементовФормы

&НаКлиенте
Процедура вогВидВзаимодействияПриИзменении(Элемент)
	
	вогВидВзаимодействияПриИзмененииНаСервере();
	ОтрисоватьКатегорииНаФорме();
	ПолучитьПараметрыВидаВзаимодействия();
	НастроитьЭлементыФормы(ЭтотОбъект);
	НастроитьПроверкуЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПриИзменении(Элемент)
	
	НастроитьПроверкуЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура();
	ОповещениеВыбораМеста	= Новый ОписаниеОповещения("ОбработкаВыбораМеста", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы			= Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ОткрытьФорму("Справочник.CRM_Помещения.ФормаВыбора", ПараметрыФормы, Элемент, , , , ОповещениеВыбораМеста);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Помещение = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
	Элементы.Место.РедактированиеТекста = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.Место = "";
	
КонецПроцедуры

&НаКлиенте
Процедура МестоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Массив = ВернутьПомещенияПоТексту(Текст);
	СписокПодбора = Новый СписокЗначений;
	Для Каждого Стр Из Массив Цикл
		СписокПодбора.Добавить(Стр);		
	КонецЦикла;
	ДанныеВыбора = СписокПодбора;
	
КонецПроцедуры

&НаКлиенте
Процедура РядСобытийНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.РядСобытий) Тогда
		СоздатьНовыйЭлементРядСобытий();
	Иначе
		ОткрытьФормуРасписания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектноеМероприятиеПриИзменении(Элемент)
	НастроитьВидимостьИДоступностьФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалоПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСрока = вогУправлениеИнтерфейсомКлиент.ПараметрыВыбораСрока();
	ПараметрыВыбораСрока.Форма = ЭтаФорма; 
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "ДатаВремяНачало";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "ДатаВремяНачалоПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "ЭтотОбъект";
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "ДатаВремяНачало";
	
	вогСрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалоПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ДатаВремяНачало = ДатаВремяНачало + 600*Направление;
	ДатаВремяНачалоПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалоПредставлениеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	Текст="";
	Если ЗначениеЗаполнено(ДатаВремяНачало) тогда
		ДатаВремяНачалоПредставление = Формат(ДатаВремяНачало,"ДФ='dd.MM.yy HH:mm'");
	Иначе
		ДатаВремяНачалоПредставление = "";
	КонецЕсли;
	ПараметрыВыбораСрока = вогУправлениеИнтерфейсомКлиент.ПараметрыВыбораСрока();
	ПараметрыВыбораСрока.Форма = ЭтаФорма; 
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "ДатаВремяНачало";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "ДатаВремяНачалоПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "ЭтотОбъект";
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "ДатаВремяНачало";
	вогСрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);

	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончаниеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСрока = вогУправлениеИнтерфейсомКлиент.ПараметрыВыбораСрока();
	ПараметрыВыбораСрока.Форма = ЭтаФорма; 
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "ДатаВремяОкончание";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "ДатаВремяОкончаниеПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "ЭтотОбъект";
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "ДатаВремяОкончание";
	
	вогСрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончаниеПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ДатаВремяОкончание = ДатаВремяОкончание + 600*Направление;
	ДатаВремяОкончаниеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончаниеПредставлениеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Текст="";
	Если ЗначениеЗаполнено(ДатаВремяОкончание) тогда
		ДатаВремяОкончаниеПредставление = Формат(ДатаВремяОкончание,"ДФ='dd.MM.yy HH:mm'");
	Иначе
		ДатаВремяОкончаниеПредставление = "";
	КонецЕсли;
	ПараметрыВыбораСрока = вогУправлениеИнтерфейсомКлиент.ПараметрыВыбораСрока();
	ПараметрыВыбораСрока.Форма = ЭтаФорма; 
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "ДатаВремяОкончание";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "ДатаВремяОкончаниеПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "ЭтотОбъект";
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "ДатаВремяОкончание";
	
	вогСрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	ДатаВремяОкончаниеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура НаВесьДеньПриИзменении(Элемент)
	
	НастроитьВидимостьИДоступностьФормы();
	Если Объект.НаВесьДень Тогда
		УстановитьВремяНачалоВремяОкончание();
		СкорректироватьДатуВремя(Ложь);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодическоеПриИзменении(Элемент)
	
	Если Объект.Периодическое Тогда
		Если НЕ ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			СоздатьНовыйЭлементРядСобытий();
		ИначеЕсли НЕ Объект.Ссылка.Пустая() Тогда
			Если Объект.ИзмененоВРяде Тогда
				РядСобытийСтарый = Объект.РядСобытий;
				Объект.РядСобытий = ПредопределенноеЗначение("Справочник.CRM_РядыСобытий.ПустаяСсылка");
				СоздатьНовыйЭлементРядСобытий();
			Иначе
				НастроитьВидимостьИДоступностьФормы();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ Объект.Ссылка.Пустая() И Объект.ИзмененоВРяде И ЗначениеЗаполнено(РядСобытийСтарый) Тогда
			Объект.РядСобытий = РядСобытийСтарый;
		КонецЕсли;
		НастроитьВидимостьИДоступностьФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерЭлементПриИзменении(Элемент)
	
	Объект.СторонниеЛица[0].вогТорговаяТочка = ПредопределенноеЗначение("Справочник.вогТорговыеТочки.ПустаяСсылка");
	ПриИзмененииПартнераКонтакногоЛица(Объект.СторонниеЛица[0],Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочкаЭлементПриИзменении(Элемент)
	
	Объект.СторонниеЛица[0].Партнер = ПолучитьКлиентаТорговойТочки(Объект.СторонниеЛица[0].вогТорговаяТочка);
	ПриИзмененииПартнераКонтакногоЛица(Объект.СторонниеЛица[0],Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоЭлементПриИзменении(Элемент)
	
	ПриИзмененииПартнераКонтакногоЛица(Объект.СторонниеЛица[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивПараметров = Новый Массив;
	Списоквыбора = Новый массив;
	Если НЕ Объект.СторонниеЛица[0].Партнер.Пустая() тогда
		Списоквыбора.Добавить(Объект.СторонниеЛица[0].партнер);
	КонецЕсли;
	Если не Объект.СторонниеЛица[0].вогТорговаяТочка.Пустая() тогда
		Списоквыбора.Добавить(Объект.СторонниеЛица[0].вогТорговаяТочка);
	КонецЕслИ;	
	МассивПараметров.Добавить(Новый ПараметрВыбора("ОбъектСвязи",Списоквыбора));
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонСтороннегоЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	Объект.СторонниеЛица[0]);
	ОписаниеВыбораТелефона	= Новый ОписаниеОповещения("ОбработкаВыбораТелефона", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура;
	СтруктураПоиска.Вставить("Партнер",			Объект.СторонниеЛица[0].Партнер); 
	СтруктураПоиска.Вставить("ТорговаяТочка",	Объект.СторонниеЛица[0].вогТорговаяТочка); 
	СтруктураПоиска.Вставить("КонтактноеЛицо",	Объект.СторонниеЛица[0].КонтактноеЛицо); 
	СписокТелефонов			= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	ПоказатьВыборИзСписка(ОписаниеВыбораТелефона, СписокТелефонов, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура EMAILСтороннегоЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	Объект.СторонниеЛица[0]);
	ДополнительныеПараметры.Вставить("СвоеЛицо",		Ложь);
	ОписаниеВыбораАдреса	= Новый ОписаниеОповещения("ОбработкаВыбораАдреса", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура;
	СтруктураПоиска.Вставить("Партнер",			Объект.СторонниеЛица[0].Партнер); 
	СтруктураПоиска.Вставить("ТорговаяТочка",	Объект.СторонниеЛица[0].вогТорговаяТочка); 
	СтруктураПоиска.Вставить("КонтактноеЛицо",	Объект.СторонниеЛица[0].КонтактноеЛицо); 
	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	ПоказатьВыборИзСписка(ОписаниеВыбораАдреса, СписокАдресов, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура EMAILСтороннегоЛицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(ВыбранноеЗначение));
	Если НЕ (РезультатПроверки.КодОшибки = 0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура EMAILСтороннегоЛицаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Объект.СторонниеЛица[0].ПредставлениеАдреса	= Строка(Партнер) + " <" + Текст + ">";
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНесколькоКонтактныхЛицНажатие(Элемент)
	
	Элементы.НадписьНесколькоКонтактныхЛиц.Видимость = Ложь;
	Элементы.ГруппаСторонниеЛица.Видимость = Истина;
	Элементы.ГруппаСторонниеЛицаКонтактноеЛицо.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатие(Элемент)
	
	МассивКатегорий = Новый Массив();
	Для Каждого КатегорияСтрока Из Объект.Категории Цикл
		МассивКатегорий.Добавить(КатегорияСтрока.Категория);
	КонецЦикла;
	
	СтруктураОписаниеКатегорий = Новый Структура("МассивКатегорий,ОсновнаяКатегория", МассивКатегорий, Объект.ОсновнаяКатегория);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияВыбратьГруппуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_Мероприятие.Форма.ФормаВыборКатегорий", Новый Структура("ОписаниеКатегорий", СтруктураОписаниеКатегорий), ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не Копирование и НоваяСтрока тогда
		Элементы.СторонниеЛица.ТекущиеДанные.Партнер = Объект.СторонниеЛица[0].Партнер;
		Элементы.СторонниеЛица.ТекущиеДанные.вогТорговаяТочка = Объект.СторонниеЛица[0].вогТорговаяТочка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаКонтактноеЛицоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СторонниеЛица.ТекущиеДанные;
	ПриИзмененииПартнераКонтакногоЛица(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивПараметров = Новый Массив;
	Списоквыбора = Новый массив;
	Если НЕ Элементы.СторонниеЛица.ТекущиеДанные.Партнер.пустая() тогда
		Списоквыбора.Добавить(Элементы.СторонниеЛица.ТекущиеДанные.Партнер);
	КонецЕсли;
	Если  НЕ Элементы.СторонниеЛица.ТекущиеДанные.вогТорговаяТочка.Пустая() тогда
		Списоквыбора.Добавить(Элементы.СторонниеЛица.ТекущиеДанные.вогТорговаяТочка);
	КонецЕсли;
	МассивПараметров.Добавить(Новый ПараметрВыбора("ОбъектСвязи",Списоквыбора));
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СторонниеЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	ТД);
	ДополнительныеПараметры.Вставить("СвоеЛицо",		Ложь);
	ОписаниеВыбораАдреса	= Новый ОписаниеОповещения("ОбработкаВыбораАдреса", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура;
	СтруктураПоиска.Вставить("Партнер",			ТД.Партнер); 
	СтруктураПоиска.Вставить("ТорговаяТочка",	ТД.вогТорговаяТочка); 
	СтруктураПоиска.Вставить("КонтактноеЛицо",	ТД.КонтактноеЛицо); 
	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	ПоказатьВыборИзСписка(ОписаниеВыбораАдреса, СписокАдресов, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СторонниеЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	ТД);
	ОписаниеВыбораТелефона	= Новый ОписаниеОповещения("ОбработкаВыбораТелефона", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура;
	СтруктураПоиска.Вставить("Партнер",			ТД.Партнер); 
	СтруктураПоиска.Вставить("ТорговаяТочка",	ТД.вогТорговаяТочка); 
	СтруктураПоиска.Вставить("КонтактноеЛицо",	ТД.КонтактноеЛицо); 
	СписокТелефонов			= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	ПоказатьВыборИзСписка(ОписаниеВыбораТелефона, СписокТелефонов, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаПриИзменении(Элемент)
	ИзмененСоставУчастников = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не ЗначениеЗаполнено(Элементы.СвоиЛица.ТекущиеДанные.Лицо) тогда
		Элементы.СвоиЛица.ТекущиеДанные.Лицо = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		Элементы.СвоиЛица.ТекущиеДанные.ОтправлятьНапоминания = Истина;
		Элементы.СвоиЛица.ТекущиеДанные.Роль = вогОбщегоНазначенияКлиентСервер.ПолучитьРольУчастникМероприятия();
		Элементы.СвоиЛица.ТекущиеДанные.ОтправлятьПоПочте = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаЛицоПриИзменении(Элемент)
	
	ТД = Элементы.СвоиЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ПриИзмененииЛица(ТД);
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаОбязательноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СвоиЛица.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Лицо) и ТекущиеДанные.Обязательно тогда
		
		Если НЕ ПроверитьПодчинениеСотрудника(ТекущиеДанные.Лицо,Объект.ВладелецШаблона) тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Строка(ТекущиеДанные.Лицо) + " не подчиняется "+ Объект.ВладелецШаблона + ", вы не можете поставить флаг 'Обязательно'";
			Сообщение.Поле = "Лицо";
			Сообщение.УстановитьДанные(Элементы.СвоиЛица.ТекущиеДанные);
			Сообщение.Сообщить();
			ТекущиеДанные.Обязательно = Ложь;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СвоиЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	ТД);
	ОписаниеВыбораТелефона	= Новый ОписаниеОповещения("ОбработкаВыбораТелефона", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура("ОбъектКонтактнойИнформации", ТД.Лицо); 
	СписокТелефонов			= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	ПоказатьВыборИзСписка(ОписаниеВыбораТелефона, СписокТелефонов, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура вогПрограммаПриИзменении(Элемент)
	УправлениеВидимостьюПоПрограмме();
КонецПроцедуры

&НаКлиенте
Процедура вогПрограммаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура(
		"НомерПункта, 
		|Исполнитель, 
		|Содержание,
		|ВремяПлан,
		|ВремяФакт,
		|отКлиента,
		|отКлиентаВидимость,
		|Начало,
		|Окончание,
		|ТребуетПринятияРешения,
		|Комментарий");
	
	Если Копирование Тогда 
		ТекущиеДанные = Элементы.вогПрограмма.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	КонецЕсли;	
	
	// последний пункт программы
	Если Объект.вогПрограмма.Количество() = 0 Тогда 
		НомерПункта = 1;
		Начало = Объект.Дата;
	Иначе	
		ПоследнийПункт = Объект.вогПрограмма[Объект.вогПрограмма.Количество()-1];
		НомерПункта = ПоследнийПункт.НомерПункта + 1;
		Начало = ПоследнийПункт.Окончание;
	КонецЕсли;
	
	ПараметрыФормы.НомерПункта = НомерПункта;
	ПараметрыФормы.Начало = Начало;
	ПараметрыФормы.отКлиентаВидимость = Элементы.вогПрограммаОтКлиента.Видимость;
	ПараметрыФормы.ТребуетПринятияРешения = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрограммаПередНачаломДобавленияЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Документ.CRM_Мероприятие.Форма.ВводПунктаПрограммы", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура вогПрограммаПередНачаломИзменения(Элемент, Отказ)
		
	Отказ = Истина;
	ТекущиеДанные = Элементы.вогПрограмма.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура(
		"НомерПункта, 
		|Исполнитель, 
		|Содержание,
		|ВремяПлан,
		|ВремяФакт,
		|Начало,
		|отКлиента,
		|отКлиентаВидимость,
		|Окончание,
		|ТребуетПринятияРешения,
		|Комментарий");
		
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	ПараметрыФормы.ОтКлиентаВидимость = Элементы.вогПрограммаОтКлиента.Видимость;
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрограммаПередНачаломИзмененияЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Документ.CRM_Мероприятие.Форма.ВводПунктаПрограммы", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура вогПрограммаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.вогПрограмма.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ТекущаяСтрока = Элементы.вогПрограмма.ТекущаяСтрока;
	ЭлементКоллекции = Объект.вогПрограмма.НайтиПоИдентификатору(ТекущаяСтрока);
	ИндексЭлемента = Объект.вогПрограмма.Индекс(ЭлементКоллекции);
	
	// Изменение номеров пунктов программы
	Для Инд = ИндексЭлемента + 1 По Объект.вогПрограмма.Количество()-1 Цикл
		
		СтарыйНомер = Объект.вогПрограмма[Инд].НомерПункта;
		НовыйНомер = СтарыйНомер - 1;
		
		ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
		
	КонецЦикла;
	
	Объект.вогПрограмма.Удалить(ИндексЭлемента);
	
	// Пересчет программы
	вогУправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
		
	Модифицированность = Истина;
	УправлениеВидимостьюПоПрограмме();
	
КонецПроцедуры

&НаКлиенте
Процедура ТегПриИзменении(Элемент)
	
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

#КонецОбласти


#Область Команды

&НаКлиенте
Процедура ДобавитьПользователя(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыборГруппПользователей", Ложь);
	ОписаниеВыбораФизЛица	= Новый ОписаниеОповещения("ОбработкаВыбораСвоиЛица", ЭтотОбъект);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,,ОписаниеВыбораФизЛица,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФизЛицо(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);	
	ОписаниеВыбораФизЛица	= Новый ОписаниеОповещения("ОбработкаВыбораСвоиЛица", ЭтотОбъект);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,,ОписаниеВыбораФизЛица,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьМесто(Команда)
	
	ДополнительныеПараметры		= Новый Структура;
	ОписаниеПодбораМеста		= Новый ОписаниеОповещения("ОбработкаПодбораМеста", ЭтотОбъект, ДополнительныеПараметры); 
	ПараметрыСтруктура			= Новый Структура();
	ПараметрыСтруктура.Вставить("Место",							Объект.Помещение);
	ПараметрыСтруктура.Вставить("ПериодНачало",						ДатаВремяНачало);
	ПараметрыСтруктура.Вставить("ПериодОкончание",					ДатаВремяОкончание);
	ПараметрыСтруктура.Вставить("ВыбиратьПериоды");
	ПараметрыСтруктура.Вставить("ЗакрыватьФормуПослеВыбораПериодов");
	ПараметрыСтруктура.Вставить("ПоказыватьПериодДокумента");
	ПараметрыСтруктура.Вставить("ИнтервалШкалыВремени",				30);
	ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоКалендарю",	ПараметрыСтруктура, ЭтотОбъект, , , , ОписаниеПодбораМеста);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастников(Команда)
	
	МассивУчастников			= ПолучитьМассивУчастников();
	ДополнительныеПараметры		= Новый Структура("МассивУчастников", МассивУчастников);
	ОписаниеПодбораУчастников	= Новый ОписаниеОповещения("ОбработкаПодбораУчастников", ЭтотОбъект, ДополнительныеПараметры); 
	ПараметрыСтруктура			= Новый Структура();
	ПараметрыСтруктура.Вставить("Пользователи",						МассивУчастников);
	ПараметрыСтруктура.Вставить("ПериодНачало",						ДатаВремяНачало );
	ПараметрыСтруктура.Вставить("ПериодОкончание",					ДатаВремяОкончание );
	ПараметрыСтруктура.Вставить("ВыбиратьПериоды");
	ПараметрыСтруктура.Вставить("ЗакрыватьФормуПослеВыбораПериодов");
	ПараметрыСтруктура.Вставить("ПоказыватьПериодДокумента");
	ПараметрыСтруктура.Вставить("ИнтервалШкалыВремени",				30);
	ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоКалендарю",	ПараметрыСтруктура, ЭтотОбъект, , , , ОписаниеПодбораУчастников);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.вогПрограмма.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда 
		Возврат;
	КонецЕсли;	
	СтарыйНомер = ТекущиеДанные.НомерПункта;
	НовыйНомер = СтарыйНомер-1;
	
	Объект.вогПрограмма.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, -1); 
	ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
	
	вогУправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.вогПрограмма.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = Объект.вогПрограмма.Количество() Тогда 
		Возврат;
	КонецЕсли;
	СтарыйНомер = ТекущиеДанные.НомерПункта;
	НовыйНомер = СтарыйНомер+1;
	
	Объект.вогПрограмма.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, 1); 
	ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
	
	вогУправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Если Команда.Имя = "СторонниеЛицаСнятьВсеФлажки" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", , Ложь);
	ИначеЕсли Команда.Имя = "СторонниеЛицаСнятьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица","ОтправлятьСМС",Ложь);
	ИначеЕсли Команда.Имя = "СторонниеЛицаСнятьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", "ОтправлятьПоПочте", Ложь);
	ИначеЕсли Команда.Имя = "СвоиЛицаСнятьВсеФлажки" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", , Ложь);
	ИначеЕсли Команда.Имя = "СвоиЛицаСнятьФлажкиНапоминания" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьНапоминания", Ложь);
	ИначеЕсли Команда.Имя = "СвоиЛицаСнятьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьСМС", Ложь);
	ИначеЕсли Команда.Имя = "СвоиЛицаСнятьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьПоПочте", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Если Команда.Имя = "СторонниеЛицаУстановитьВсеФлажки" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", , Истина);
	ИначеЕсли Команда.Имя = "СторонниеЛицаУстановитьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", "ОтправлятьСМС", Истина);
	ИначеЕсли Команда.Имя = "СторонниеЛицаУстановитьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", "ОтправлятьПоПочте", Истина);
	ИначеЕсли Команда.Имя = "СвоиЛицаУстановитьВсеФлажки" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", , Истина);
	ИначеЕсли Команда.Имя = "СвоиЛицаУстановитьФлажкиНапоминания" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьНапоминания", Истина);
	ИначеЕсли Команда.Имя = "СвоиЛицаУстановитьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьСМС", Истина);
	ИначеЕсли Команда.Имя = "СвоиЛицаУстановитьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьПоПочте", Истина);
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти


#Область ОбработкиОповещения

&НаКлиенте
// Процедура - обработчик подбора участников.
//
// Параметры:
//	РезультатВыбора			- Массив		- Массив помещений.
//	ДополнительныеПараметры	- Структура		- Структура дополнительных параметров.
//
Процедура ОбработкаПодбораУчастников(РезультатОткрытия, ДополнительныеПараметры) Экспорт
	Если РезультатОткрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		МинимальнаяВыбраннаяДата	= Неопределено;
		МаксимальнаяВыбраннаяДата	= Неопределено;
		МассивВыбранныеПользователи	= Новый Массив();
		Для Каждого ДобавляемыйПользователь Из РезультатОткрытия Цикл
			МассивВыбранныеПользователи.Добавить(ДобавляемыйПользователь.Пользователь);
			Если Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ДобавляемыйПользователь.Пользователь)).Количество() = 0 Тогда
				НоваяСтрока = Объект.СвоиЛица.Добавить();
				НоваяСтрока.Лицо	= ДобавляемыйПользователь.Пользователь;
				НоваяСтрока.ОтправлятьПоПочте = Истина;
				НоваяСтрока.ОтправлятьНапоминания = Истина;
				НоваяСтрока.Роль = вогОбщегоНазначенияКлиентСервер.ПолучитьРольУчастникМероприятия();
				ПриИзмененииЛица(НоваяСтрока);
			КонецЕсли;
			Если МинимальнаяВыбраннаяДата = Неопределено Или МинимальнаяВыбраннаяДата > ДобавляемыйПользователь.НачалоПериода Тогда
				МинимальнаяВыбраннаяДата = ДобавляемыйПользователь.НачалоПериода;
			КонецЕсли;
			Если МаксимальнаяВыбраннаяДата = Неопределено Или МаксимальнаяВыбраннаяДата < ДобавляемыйПользователь.ОкончаниеПериода Тогда
				МаксимальнаяВыбраннаяДата = ДобавляемыйПользователь.ОкончаниеПериода;
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемыйПользователь Из ДополнительныеПараметры.МассивУчастников Цикл
			Если МассивВыбранныеПользователи.Найти(УдаляемыйПользователь) = Неопределено Тогда
				НайденныеСтроки = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", УдаляемыйПользователь));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Объект.СвоиЛица.Удалить(НайденнаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
			ДатаВремяНачало		= МинимальнаяВыбраннаяДата;
			ДатаВремяОкончание		= МаксимальнаяВыбраннаяДата;
			ДатаВремяНачалоПриИзменении();
			ДатаВремяОкончаниеПриИзменении();
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // ОбработкаПодбораУчастников()

&НаКлиенте
// Процедура - обработчик подбора помещения по календарю.
//
// Параметры:
//	РезультатВыбора			- Массив		- Массив помещений.
//	ДополнительныеПараметры	- Структура		- Структура дополнительных параметров.
//
Процедура ОбработкаПодбораМеста(РезультатОткрытия, ДополнительныеПараметры) Экспорт
	Если РезультатОткрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		МинимальнаяВыбраннаяДата = Неопределено;
		МаксимальнаяВыбраннаяДата = Неопределено;
		Для Каждого ДобавляемоеПомещение Из РезультатОткрытия Цикл
			Если НЕ ЗначениеЗаполнено(ДобавляемоеПомещение.Помещение) Тогда
				Продолжить;
			КонецЕсли;
			Если (МинимальнаяВыбраннаяДата = Неопределено) ИЛИ (МинимальнаяВыбраннаяДата > ДобавляемоеПомещение.НачалоПериода) Тогда
				МинимальнаяВыбраннаяДата = ДобавляемоеПомещение.НачалоПериода;
			КонецЕсли;
			Если (МаксимальнаяВыбраннаяДата = Неопределено) ИЛИ (МаксимальнаяВыбраннаяДата < ДобавляемоеПомещение.ОкончаниеПериода) Тогда
				МаксимальнаяВыбраннаяДата = ДобавляемоеПомещение.ОкончаниеПериода;
			КонецЕсли;
			Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
				Объект.Место		= СокрЛП(ДобавляемоеПомещение.Помещение);
				Объект.Помещение	= ДобавляемоеПомещение.Помещение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
			ДатаВремяНачало		= МинимальнаяВыбраннаяДата;
			ДатаВремяОкончание		= МаксимальнаяВыбраннаяДата;
			ДатаВремяНачалоПриИзменении();
			ДатаВремяОкончаниеПриИзменении();
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // ОбработкаПодбораМеста()

&НаКлиенте
// Процедура - обработчик выбора телефона.
//
// Параметры:
//	РезультатВыбора			- СправочникСсылка	- Выбранное физическое лицо.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораСвоиЛица(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> Неопределено Тогда
		НоваяСтрока = Объект.СвоиЛица.Добавить();
		НоваяСтрока.Лицо = РезультатВыбора;
		ПриИзмененииЛица(НоваяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломИзмененияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	
	ТекущиеДанные.ВремяПланСтр = вогУчетВремениКлиентСервер.ЧислоВСтроку(ТекущиеДанные.ВремяПлан);
	ТекущиеДанные.ВремяФактСтр = вогУчетВремениКлиентСервер.ЧислоВСтроку(ТекущиеДанные.ВремяФакт);
	
	Модифицированность = Истина;
	
	вогУправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	
	УправлениеВидимостьюПоПрограмме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.вогПрограмма.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
	
	НоваяСтрока.ВремяПланСтр = вогУчетВремениКлиентСервер.ЧислоВСтроку(НоваяСтрока.ВремяПлан);
	НоваяСтрока.ВремяФактСтр = вогУчетВремениКлиентСервер.ЧислоВСтроку(НоваяСтрока.ВремяФакт);
	
	Элементы.вогПрограмма.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Модифицированность = Истина;
	
	вогУправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	УправлениеВидимостьюПоПрограмме();
	Элементы.вогПрограмма.Обновить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияСпособаИзмененияРяда(Параметры, Дополнительно) Экспорт
	Если Параметры <> Неопределено Тогда
		Если Параметры.ПринятьИзменения = Истина Тогда 
			ПериодическоеСобытиеСпособИзмененияРяда = Параметры.СпособИзмененияРяда;
			ВопросИзмененияЗадавался = Истина;
			Записать();
		Иначе
			ВопросИзмененияЗадавался = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура обработки ответа на вопрос о записи документа.
//
Процедура ОбработкаОповещенияВопросОЗаписи(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		Записать();
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Объект.Периодическое = Ложь;
		НастроитьВидимостьИДоступностьФормы();
		Возврат;
	КонецЕсли;
	СозданиеЭлементаРядаСобытий();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораМеста(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	Объект.Место = СокрЛП(РезультатВыбора);
	Если ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.CRM_Помещения") Тогда
		Объект.Помещение					= РезультатВыбора;
		Элементы.Место.РедактированиеТекста	= Ложь;
	Иначе
		Объект.Помещение					= ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
		Элементы.Место.РедактированиеТекста	= Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОСозданииРядаСобытий(Параметры, Дополнительно) Экспорт
	
	Если Параметры <> Неопределено Тогда  
		Если Параметры.ПризнакЗакрытия = Истина Тогда
			Если Дополнительно.НовыйРяд Тогда
				Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
					Объект.РядСобытий	= Параметры.Ссылка;
					ВремяНачало			= Параметры.ВремяНачала;
					ВремяОкончание		= Параметры.ВремяКонца;
					ПризнакПериодическоеСобытиеИнициализация	= Истина;
					ПризнакИзмененоРасписание					= Истина;
					Объект.ИзмененоВРяде						= Ложь;
					Записать();
				Иначе
					Объект.Периодическое = Ложь;
				КонецЕсли;
			Иначе
				Если Параметры.ДанныеБылиИзменены Тогда
					ВремяНачало		 = Параметры.ВремяНачала;
					ВремяОкончание	 = Параметры.ВремяКонца;
					ПризнакИзмененоРасписание = Истина;
					Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НастроитьВидимостьИДоступностьФормы();
	Иначе
		Если Дополнительно.НовыйРяд Тогда
			Объект.Периодическое = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик выбора телефона.
//
// Параметры:
//	РезультатВыбора			- ЭлементСпискаЗначений	- Выбранный номер телефона.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораТелефона(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	ТелефонныйНомер = РезультатВыбора.Значение;
	ДополнительныеПараметры.ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление;
	//Если НЕ СторонниеЛицаСписком тогда
	//	ЗаполнитьРеквизитыОбъектаСтороннихЛиц(ЭтотОбъект);	
	//КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораТелефона()	

&НаКлиенте
// Процедура - обработчик выбора e-mail.
//
// Параметры:
//	РезультатВыбора			- ЭлементСпискаЗначений	- Выбранный e-mail.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораАдреса(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	мАдрес 										= РезультатВыбора.Значение;
	ДополнительныеПараметры.ТекущаяСтрока.Адрес	= мАдрес.Представление;
	Если ДополнительныеПараметры.СвоеЛицо Тогда
		ДополнительныеПараметры.ТекущаяСтрока.ПредставлениеАдреса	= Строка(ДополнительныеПараметры.ТекущаяСтрока.Лицо) + " <" + мАдрес.Представление + ">";
	Иначе	
		ДополнительныеПараметры.ТекущаяСтрока.ПредставлениеАдреса	= ?(мАдрес.Объект = ДополнительныеПараметры.ТекущаяСтрока.Партнер, Строка(ДополнительныеПараметры.ТекущаяСтрока.Партнер), Строка(ДополнительныеПараметры.ТекущаяСтрока.КонтактноеЛицо)) + " <" + мАдрес.Представление + ">";
		ДополнительныеПараметры.ТекущаяСтрока.Принадлежность		= (мАдрес.Объект = ДополнительныеПараметры.ТекущаяСтрока.КонтактноеЛицо);
	КонецЕсли;
	//Если НЕ СторонниеЛицаСписком тогда
	//	ЗаполнитьРеквизитыОбъектаСтороннихЛиц(ЭтотОбъект);	
	//КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораАдреса()	

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Модифицированность = Истина;
		
		Объект.Категории.Очистить();
		Для Каждого СтрокаКатегория Из Результат.СписокВыбранныеКатегории Цикл
			НоваяСтрока = Объект.Категории.Добавить();
			НоваяСтрока.Категория = СтрокаКатегория.Значение;
		КонецЦикла;
		Объект.ОсновнаяКатегория = Результат.ОсновнаяКатегория;
		
		ОтрисоватьКатегорииНаФорме();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПолучитьПараметрыВидаВзаимодействия()
	ПараметрыВидаВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПараметрыВидаВзаимодействий(Объект.вогВидВзаимодействия);
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьКатегорииНаФорме()
	
	ПрефиксРеквизита = "ПолеВводаКатегория";
	МассивУдаляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	
	Пока Истина Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		Попытка
			ТестовыйРеквизит = ЭтотОбъект[ИмяРеквизита];
			МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизита);
			нИндекс = нИндекс + 1;
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	МассивКатегорий = Новый Массив();
	
	Если ЗначениеЗаполнено(Объект.ОсновнаяКатегория) Тогда
		МассивКатегорий.Добавить(Объект.ОсновнаяКатегория);
	КонецЕсли;
	
	Для Каждого СтрокаКатегория Из Объект.Категории Цикл
		Если ЗначениеЗаполнено(СтрокаКатегория.Категория) И МассивКатегорий.Найти(СтрокаКатегория.Категория) = Неопределено Тогда
			МассивКатегорий.Добавить(СтрокаКатегория.Категория);
		КонецЕсли;
	КонецЦикла;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.CRM_Категории");
	
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		РеквизитКатегория = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТиповКатегория);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитКатегория);
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхРеквизитов Цикл
		Попытка Элементы.Удалить(Элементы[УдаляемыйЭлемент]);
		Исключение КонецПопытки;
	КонецЦикла;
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	нИндекс = 1;
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		ЭтотОбъект[ИмяРеквизита] = ДобавляемаяКатегория;
		
		ЭлементКатегория = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаКатегории);
		ЭлементКатегория.Вид					= ВидПоляФормы.ПолеВвода;
		ЭлементКатегория.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементКатегория.ПутьКДанным			= ИмяРеквизита;
		ЭлементКатегория.РедактированиеТекста	= Ложь;
		ЭлементКатегория.КнопкаСпискаВыбора		= Ложь;
		ЭлементКатегория.КнопкаВыбора			= Ложь;
		ЭлементКатегория.КнопкаОчистки			= Ложь;
		ЭлементКатегория.КнопкаРегулирования	= Ложь;
		ЭлементКатегория.КнопкаОткрытия			= Ложь;
		ЭлементКатегория.КнопкаВыпадающегоСписка= Ложь;
		ЭлементКатегория.КнопкаСоздания 		= Ложь;
		ЦветКатегории = Новый Цвет(ДобавляемаяКатегория.ЦветКрасный, ДобавляемаяКатегория.ЦветЗеленый, ДобавляемаяКатегория.ЦветСиний);
		ЭлементКатегория.ЦветФона = ЦветКатегории;
		ЭлементКатегория.ЦветТекста = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветКатегории);
		
		Если нИндекс = 1 Тогда
			ЭлементКатегория.Шрифт = Новый Шрифт(ЭлементКатегория.Шрифт,,, Истина);
		КонецЕсли;
		
		ЭлементКатегория.УстановитьДействие("Очистка", "Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка");
		
		нИндекс = нИндекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСвойствСтороннихЛиц()
	Возврат "Партнер, вогТорговаяТочка, КонтактноеЛицо, Адрес, ПредставлениеАдреса, ОтправлятьПоПочте, Телефон, ОтправлятьСМС, Принадлежность";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыФормыСтороннихЛиц(Форма) Экспорт
	
	Если Форма.Объект.СторонниеЛица.Количество() > 0 Тогда				
		ЗаполнитьЗначенияСвойств(Форма, Форма.Объект.СторонниеЛица[0], СтрокаСвойствСтороннихЛиц());
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	ПараметрыВидаВзаимодействия = Форма.ПараметрыВидаВзаимодействия;
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ГруппаСторонниеЛицаКолонки"		 , 
		(ПараметрыВидаВзаимодействия.ИспользоватьКлиенты И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхКлиенты = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач")) или 
		 (ПараметрыВидаВзаимодействия.ИспользоватьТорговыеТочки И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхТорговыеТочки = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач"))));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ТорговаяТочкаЭлемент"		 , 
		(ПараметрыВидаВзаимодействия.ИспользоватьКлиенты И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхКлиенты = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач")) или 
		 (ПараметрыВидаВзаимодействия.ИспользоватьТорговыеТочки И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхТорговыеТочки = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач"))));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "вогПрограммаОтКлиента"		 , 
		(ПараметрыВидаВзаимодействия.ИспользоватьКлиенты И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхКлиенты = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач")) или 
		 (ПараметрыВидаВзаимодействия.ИспользоватьТорговыеТочки И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхТорговыеТочки = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач"))));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ПартнерЭлемент" , 
	  (ПараметрыВидаВзаимодействия.ИспользоватьКлиенты И  ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхКлиенты = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач"))));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ТорговаяТочкаЭлемент"		 ,
		 (ПараметрыВидаВзаимодействия.ИспользоватьТорговыеТочки И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхТорговыеТочки = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач"))));
	
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ГруппаСвоиЛица"		 , ПараметрыВидаВзаимодействия.ИспользоватьСвоиУчастники));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "вогРезультат"         , ПараметрыВидаВзаимодействия.ИспользоватьРезультат));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ГруппаПовестка"		 , ПараметрыВидаВзаимодействия.ИспользоватьПовестка));
	
	Для каждого ОписаниеЭлемента Из МассивЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
			ОписаниеЭлемента.ИмяЭлемента, "Видимость", ОписаниеЭлемента.Значение); 
			
		Если ЗначениеЗаполнено(ОписаниеЭлемента.Обработчик)
		  И ОписаниеЭлемента.Значение Тогда
			Попытка
			    Выполнить(ОписаниеЭлемента.Обработчик);
			Исключение
			КонецПопытки;
		
		КонецЕсли;	
			
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ВывестиДлительностьВПрограмме()
	
	Для Каждого Строка Из Объект.вогПрограмма Цикл
		Строка.ВремяПланСтр = вогУчетВремениКлиентСервер.ЧислоВСтроку(Строка.ВремяПлан);
		Строка.ВремяФактСтр = вогУчетВремениКлиентСервер.ЧислоВСтроку(Строка.ВремяФакт);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура заполняет даты и времена начала и окончания мероприятия.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДанныеФормы()
	
	ДатаВремяНачало = Объект.дата;
	ДатаВремяОкончание = Объект.ОкончаниеМероприятия;
	ДатаВремяНачалоПриИзменении();
	ДатаВремяОкончаниеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалоПриИзменении()
	
	Если ДатаВремяОкончание<ДатаВремяНачало тогда
		ДатаВремяОкончание = ДатаВремяНачало + 3600;
		ДатаВремяОкончаниеПриИзменении();	
	КонецЕсли;
	ДатаВремяНачалоПредставление = Формат(ДатаВремяНачало,"ДФ='dd.MM.yy HH:mm'");
	Объект.Дата = ДатаВремяНачало;
	вогУправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	УправлениеВидимостьюПоПрограмме();
	Элементы.вогПрограмма.Обновить();	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончаниеПриИзменении()
	
	Если ДатаВремяОкончание<ДатаВремяНачало тогда
		ДатаВремяНачало = ДатаВремяОкончание - 3600;
	КонецЕсли;
	
	ДатаВремяОкончаниеПредставление = Формат(ДатаВремяОкончание,"ДФ='dd.MM.yy HH:mm'");
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюПоПрограмме()
	
	ПоказатьВремя = Ложь;
	Для каждого Строка из Объект.вогПрограмма цикл
		Если ЗначениеЗаполнено(Строка.ВремяПлан) тогда
			ПоказатьВремя = истина;
		КонецЕсли;
	КонецЦикла;
		
	Если ПоказатьВремя и НЕ Элементы.вогПрограммаГруппаВремя.Видимость тогда
		Элементы.вогПрограммаГруппаВремя.Видимость = Истина;
	КонецЕсли;
	
	Если НЕ ПоказатьВремя и Элементы.вогПрограммаГруппаВремя.Видимость тогда
		Элементы.вогПрограммаГруппаВремя.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьОписаниеДолжности(Строка)
	
	МассивОбъектовСвязи = Новый Массив;
	Если ЗначениеЗаполнено(Строка.вогТорговаяТочка) тогда
		МассивОбъектовСвязи.Добавить(Строка.вогТорговаяТочка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Строка.Партнер) тогда
		МассивОбъектовСвязи.Добавить(Строка.Партнер);
	КонецЕсли;
	РолиДолжности = вогУправлениеСвязями.РолиДолжностиКонтактногоЛица(Строка.КонтактноеЛицо,МассивОбъектовСвязи, Объект.Дата);
	Если РолиДолжности.Количество()>0 тогда
		Строка.РольИДолжность = ""+РолиДолжности[0].Должность + ?(НЕ РолиДолжности[0].Действует," <НЕ РАБОТАЕТ> ","");	
	Иначе	
		Строка.РольИДолжность = "<<>>";
	КонецЕсли;
	
КонецФункции

&НаКлиенте 
// Процедура настраивает видимость и доступность элементов формы.
//
// Параметры:
//	Нет.
//
Процедура НастроитьВидимостьИДоступностьФормы()
	
	Элементы.СвоиЛицаТелефонФлаг.Видимость		= ИспользоватьОповещенияСМС;
	Элементы.СвоиЛицаАдресФлаг.Видимость		= ИспользоватьОповещенияЭлектроннаяПочта;
		
	// видимость расписания
	Элементы.РядСобытийНаименование.Видимость = Не Объект.ИзмененоВРяде;
	Если Элементы.РядСобытийНаименование.Видимость Тогда
		Элементы.Периодическое.Доступность = (Не Объект.ИзмененоВРяде);
		Элементы.РядСобытийНаименование.Доступность = (Объект.Периодическое И ЗначениеЗаполнено(Объект.РядСобытий) И Не Объект.ИзмененоВРяде);
	КонецЕсли;
	
	Элементы.РядСобытийНаименование.Видимость = Объект.Периодическое;

	СторонниеЛицаСписком = Объект.СторонниеЛица.Количество() > 1;
		
	Элементы.Проект.Видимость = Объект.ОперационноеПроектное = 1;
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПроверкуЗаполнения()
	
	Элементы.ПартнерЭлемент.АвтоОтметкаНезаполненного        = ?(Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом"),Истина, Ложь);
	Элементы.КонтактноеЛицоЭлемент.АвтоОтметкаНезаполненного = ?(Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом")
																	ИЛИ Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСТТ"),Истина, Ложь);
	
	Элементы.Место.ОтметкаНезаполненного                     = ?((Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом")
																	ИЛИ Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСТТ")
																	ИЛИ Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ЦРУ")
																	ИЛИ Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ПИР")
																	ИЛИ Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВИД")) И НЕ ЗначениеЗаполнено(Объект.Место),Истина, Ложь);													
																	
																	
	Элементы.ТорговаяТочкаЭлемент.АвтоОтметкаНезаполненного  = ?(Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСТТ"),Истина, Ложь);													
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидВзаимодействияПоНаименованию(НаименованиеВзаимодействия)
	ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПустаяСсылка();
	Если НаименованиеВзаимодействия = "ВстречаСКлиентом" Тогда
		ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПолучитьСсылку(Новый УникальныйИдентификатор("b23f6567-97ed-11e9-9b11-005056bcd3e3"));
	ИначеЕсли НаименованиеВзаимодействия = "ВстречаСТТ" Тогда	
		ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПолучитьСсылку(Новый УникальныйИдентификатор("3ad7458f-97ee-11e9-9b11-005056bcd3e3"));
	ИначеЕсли НаименованиеВзаимодействия = "ЦРУ" Тогда	
		ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПолучитьСсылку(Новый УникальныйИдентификатор("9c657cf9-97ed-11e9-9b11-005056bcd3e3"));
	ИначеЕсли НаименованиеВзаимодействия = "ПИР" Тогда	
		ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПолучитьСсылку(Новый УникальныйИдентификатор("32679a50-aa37-11e9-9b11-005056bcd3e3"));
	ИначеЕсли НаименованиеВзаимодействия = "ВИД" Тогда	
		ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПолучитьСсылку(Новый УникальныйИдентификатор("32679a51-aa37-11e9-9b11-005056bcd3e3"));
	КонецЕсли;	
	Возврат ВидВзаимодействия;
КонецФункции

&НаСервере
Процедура Подключаемый_ОбновитьОблакоТегов()
	
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура вогВидВзаимодействияПриИзмененииНаСервере()
	
	Объект.Категории.Очистить();
	Стр = Объект.Категории.Добавить();
	Стр.Категория = Объект.вогВидВзаимодействия.Категория;
	Объект.ОсновнаяКатегория = Объект.вогВидВзаимодействия.Категория;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает массив помещений с наименованием, похожим на переданный текст.
//
// Параметры:
//	Текст	- Строка	- Наименование помещения.
//
// Возвращаемое значение:
//	Массив	- Vассив помещений с наименованием, похожим на переданный текст.
//
Функция ВернутьПомещенияПоТексту(Текст)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", СокрЛП(Текст) + "%");
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Помещения.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.CRM_Помещения КАК CRM_Помещения
	               |ГДЕ
	               |	CRM_Помещения.Наименование ПОДОБНО &Текст
	               |	И НЕ CRM_Помещения.ПометкаУдаления
	               |	И CRM_Помещения.Родитель <> ЗНАЧЕНИЕ(Справочник.CRM_Помещения.ПустаяСсылка)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"); 
	
КонецФункции

&НаКлиенте
// Процедура создает новый элемент ряда событий.
//
// Параметры:
//	Нет.
//
Процедура СоздатьНовыйЭлементРядСобытий()
	Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = (НСтр(	"ru = 'Данные еще не записаны.
								|Установка признака периодичности возможна только после записи данных.
								|Данные будут записаны.'"));
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияВопросОЗаписи", ЭтотОбъект);
		ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		СозданиеЭлементаРядаСобытий();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура открывает форму расписания.
//
// Параметры:
//	Нет.
//
Процедура ОткрытьФормуРасписания()
	
	ДатаВремяНачала		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.Дата);
	ДатаВремяОкончания	= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ОкончаниеМероприятия);
	ПараметрыФормы = Новый Структура("Ключ", Объект.РядСобытий);
	
	ПараметрыФормы.Вставить("ВремяНачала", ДатаВремяНачала.Время);
	ПараметрыФормы.Вставить("ВремяКонца", ДатаВремяОкончания.Время);
	ПараметрыФормы.Вставить("ДатаНачала", НачалоДня(Объект.Дата));
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("НовыйРяд", Ложь);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОСозданииРядаСобытий", ЭтотОбъект, Дополнительно);
		
	ОткрытьФорму("Справочник.CRM_РядыСобытий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ,,, ОП);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеЭлементаРядаСобытий()
	
	Объект.Дата					= ДатаВремяНачало;
	Объект.ОкончаниеМероприятия	= ДатаВремяОкончание;
	
	ПараметрыФормы				= Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("ДатаНачала", НачалоДня(ДатаВремяНачало)));
	ПараметрыФормы.Вставить("ВремяНачала",CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ДатаВремяНачало).Время);
	ПараметрыФормы.Вставить("ВремяКонца", CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ДатаВремяОкончание).Время);
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("НовыйРяд", Истина);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОСозданииРядаСобытий", ЭтотОбъект, Дополнительно);
		
	ОткрытьФорму("Справочник.CRM_РядыСобытий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ,,, ОП);
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает время начало и окончания по рабочему дню.
//
// Параметры:
//	Нет.
//
Процедура УстановитьВремяНачалоВремяОкончание()
	
	ВремяНачалаРабочегоДня		= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.ВладелецШаблона, "ВремяНачалаРабочегоДня");
	ВремяОкончанияРабочегоДня	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.ВладелецШаблона, "ВремяОкончанияРабочегоДня");
	Если НЕ ЗначениеЗаполнено(ВремяНачалаРабочегоДня) Тогда
		ВремяНачалаРабочегоДня = Константы.CRM_НачалоРабочегоДня.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВремяОкончанияРабочегоДня) Тогда
		ВремяОкончанияРабочегоДня = Константы.CRM_КонецРабочегоДня.Получить();
	КонецЕсли;
	
	ДатаВремяНачало	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(НачалоДня(ДатаВремяНачало), ВремяНачалаРабочегоДня);
	ДатаВремяОкончание	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(НачалоДня(ДатаВремяОкончание),ВремяОкончанияРабочегоДня);
	ДатаВремяНачалоПредставление = Формат(ДатаВремяНачало,"ДФ='dd.MM.yy HH:mm'");
	ДатаВремяОкончаниеПредставление = Формат(ДатаВремяОкончание,"ДФ='dd.MM.yy HH:mm'");
	
КонецПроцедуры // УстановитьВремяНачалоВремяОкончание()

&НаКлиенте
// Процедура выполняет корректировку значений полей даты и времени.
//
// Параметры:
//	ПриоритетДатыНачала	- Булево	- Приоритет даты начала.
//
Процедура СкорректироватьДатуВремя(ПриоритетДатыНачала)
		
	Если ДатаВремяНачало>ДатаВремяОкончание тогда
		Если ПриоритетДатыНачала тогда
			ДатаВремяОкончание = ДатаВремяНачало;
			ДатаВремяОкончаниеПриИзменении();	
		Иначе	
			ДатаВремяНачало = ДатаВремяОкончание;
			ДатаВремяНачалоПриИзменении();	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик изменения контакта и контактной информации при изменении клиента.
//
// Параметры:
//	ТекущаяСтрока				- СтрокаТЧ	- Строка ТЧ
//	ПодставлятьКонтактноеЛицо	- Булево	- Признак изменения контакта.
//
Процедура ПриИзмененииПартнераКонтакногоЛица(ТекущаяСтрока, ПодставлятьКонтактноеЛицо = Ложь)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Партнер) Тогда
		Если ПодставлятьКонтактноеЛицо Тогда
			ТекущаяСтрока.КонтактноеЛицо = КонтактноеЛицоКлиента(ТекущаяСтрока.Партнер,ТекущаяСтрока.вогТорговаяТочка,Объект.Дата);
		КонецЕсли;
		ЗаполнитьОписаниеДолжности(ТекущаяСтрока);	
		СтруктураПоиска	= Новый Структура;
		СтруктураПоиска.Вставить("Партнер",			ТекущаяСтрока.Партнер); 
		СтруктураПоиска.Вставить("ТорговаяТочка",	ТекущаяСтрока.вогТорговаяТочка); 
		СтруктураПоиска.Вставить("КонтактноеЛицо",	ТекущаяСтрока.КонтактноеЛицо); 
		// Телефон
		Если ИспользоватьОповещенияСМС Тогда
			СписокТелефонов	= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
			Если СписокТелефонов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокТелефонов Цикл
					Если ЭлементСписка.Пометка Тогда
						ТелефонныйНомер = ЭлементСписка.Значение;
						Если ТелефонныйНомер.Количество() = 0 Тогда
							ТекущаяСтрока.Телефон = "";
						Иначе	
							ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
						КонецЕсли;
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьДляОповещений Тогда
					ТелефонныйНомер = СписокТелефонов[0].Значение;
					Если ТелефонныйНомер.Количество() = 0 Тогда
						ТекущаяСтрока.Телефон = "";
					Иначе	
						ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Телефон = "";
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Телефон = "";
		КонецЕсли;
		// E-майл
		Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
			СписокАдресов	= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
			Если СписокАдресов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокАдресов Цикл
					Если ЭлементСписка.Пометка Тогда
						мАдрес = ЭлементСписка.Значение;
						Если мАдрес.Количество() = 0 Тогда
							ТекущаяСтрока.Адрес					= "";
							ТекущаяСтрока.ПредставлениеАдреса	= "";
							ТекущаяСтрока.Принадлежность		= Ложь;
						Иначе	
							ТекущаяСтрока.Адрес					= мАдрес.Представление;
							ТекущаяСтрока.ПредставлениеАдреса	= ?(мАдрес.Объект = ТекущаяСтрока.Партнер,Строка(ТекущаяСтрока.Партнер), Строка(ТекущаяСтрока.КонтактноеЛицо)) + " <" + мАдрес.Представление + ">";
							ТекущаяСтрока.Принадлежность		= (мАдрес.Объект = ТекущаяСтрока.КонтактноеЛицо);
						КонецЕсли;
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьДляОповещений Тогда
					мАдрес = СписокАдресов[0].Значение;
					Если мАдрес.Количество() = 0 Тогда
						ТекущаяСтрока.Адрес					= "";
						ТекущаяСтрока.ПредставлениеАдреса	= "";
						ТекущаяСтрока.Принадлежность		= Ложь;
					Иначе	
						ТекущаяСтрока.Адрес					= мАдрес.Представление;
						ТекущаяСтрока.ПредставлениеАдреса	= ?(мАдрес.Объект = ТекущаяСтрока.Партнер,Строка(ТекущаяСтрока.Партнер),Строка(ТекущаяСтрока.КонтактноеЛицо)) + " <" + мАдрес.Представление + ">";
						ТекущаяСтрока.Принадлежность		= (мАдрес.Объект = ТекущаяСтрока.КонтактноеЛицо);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Адрес					= "";
				ТекущаяСтрока.ПредставлениеАдреса	= "";
				ТекущаяСтрока.Принадлежность		= Ложь;
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Адрес					= "";
			ТекущаяСтрока.ПредставлениеАдреса	= "";
			ТекущаяСтрока.Принадлежность		= Ложь;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Телефон = "";
		ТекущаяСтрока.Адрес					= "";
		ТекущаяСтрока.ПредставлениеАдреса	= "";
		ТекущаяСтрока.Принадлежность		= Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция  КонтактноеЛицоКлиента(Партнер,ТорговаяТочка=Неопределено,ДатаДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	вогСвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо КАК КонтактноеЛицо
	               |ИЗ
	               |	РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних(&ДатаСреза, ОбъектСвязи = &Объект) КАК вогСвязиКонтактныхЛицСрезПоследних
	               |ГДЕ
	               |	вогСвязиКонтактныхЛицСрезПоследних.CRM_Состояние <> ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)";
	Запрос.УстановитьПараметр("ДатаСреза",ДатаДокумента);
	Запрос.УстановитьПараметр("Объект",ТорговаяТочка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Запрос.УстановитьПараметр("Объект",Партнер);
		Результат = Запрос.Выполнить();
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.КонтактноеЛицо;	
	КонецЕсли;
	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлиентаТорговойТочки(ТорговаяТочка)
	Если ЗначениеЗаполнено(ТорговаяТочка) тогда
		Возврат ТорговаяТочка.Партнер;
	Иначе
		Возврат Справочники.Партнеры.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаКлиенте
// Процедура - обработчик изменения контактной информации при изменении лица.
//
// Параметры:
//	ТекущаяСтрока				- СтрокаТЧ	- Строка ТЧ
//
Процедура ПриИзмененииЛица(ТекущаяСтрока)
	Если ЗначениеЗаполнено(ТекущаяСтрока.Лицо) Тогда
		ТекущаяСтрока.ПосетитМероприятие = 2;
		СтруктураПоиска	= Новый Структура("ОбъектКонтактнойИнформации", ТекущаяСтрока.Лицо); 
		// Телефон
		Если ИспользоватьОповещенияСМС Тогда
			СписокТелефонов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска,
				ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
			Если СписокТелефонов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокТелефонов Цикл
					Если ЭлементСписка.Пометка Тогда
						ТелефонныйНомер = ЭлементСписка.Значение;
						Если ТелефонныйНомер.Количество() = 0 Тогда
							ТекущаяСтрока.Телефон = "";
						Иначе
							ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
						КонецЕсли;
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьДляОповещений Тогда
					ТелефонныйНомер = СписокТелефонов[0].Значение;
					Если ТелефонныйНомер.Количество() = 0 Тогда
						ТекущаяСтрока.Телефон = "";
					Иначе	
						ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Телефон = "";
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Телефон = "";
		КонецЕсли;
		// E-майл
		Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
			СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска,
				ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
			Если СписокАдресов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокАдресов Цикл
					Если ЭлементСписка.Пометка Тогда
						мАдрес = ЭлементСписка.Значение;
						Если мАдрес.Количество() = 0 Тогда
							ТекущаяСтрока.Адрес					= "";
							ТекущаяСтрока.ПредставлениеАдреса	= "";
						Иначе	
							ТекущаяСтрока.Адрес					= мАдрес.Представление;
							ТекущаяСтрока.ПредставлениеАдреса	= Строка(ТекущаяСтрока.Лицо) + " <" + мАдрес.Представление + ">";
						КонецЕсли;
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьДляОповещений Тогда
					мАдрес = СписокАдресов[0].Значение;
					Если мАдрес.Количество() = 0 Тогда
						ТекущаяСтрока.Адрес					= "";
						ТекущаяСтрока.ПредставлениеАдреса	= "";
					Иначе	
						ТекущаяСтрока.Адрес					= мАдрес.Представление;
						ТекущаяСтрока.ПредставлениеАдреса	= Строка(ТекущаяСтрока.Лицо) + " <" + мАдрес.Представление + ">";
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Адрес					= "";
				ТекущаяСтрока.ПредставлениеАдреса	= "";
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Адрес					= "";
			ТекущаяСтрока.ПредставлениеАдреса	= "";
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Телефон = "";
		ТекущаяСтрока.Адрес					= "";
		ТекущаяСтрока.ПредставлениеАдреса	= "";
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПодчинениеСотрудника(Сотрудник,Начальник = Неопределено)
	
	Если Начальник = Неопределено тогда
		Начальник = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
		ТекущийПользователь  = Начальник;
		ТекущаяДолжностнаяПозиция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Начальник,"CRM_ДолжностнаяПозиция");
	
		ДолжностныеПозиции = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
		|ПОМЕСТИТЬ Подичененные
		|ИЗ
		|	Справочник.CRM_ДолжностныеПозиции.ПодчиненныеДолжностныеПозиции КАК CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции
		|ГДЕ
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка В ИЕРАРХИИ(&ТекущаяДолжностнаяПозиция)
		|	И НЕ CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка.ПометкаУдаления
		|	И НЕ &ТекущаяДолжностнаяПозиция = ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CRM_ДолжностныеПозиции.Ссылка КАК Позиция
		|ИЗ
		|	Справочник.CRM_ДолжностныеПозиции КАК CRM_ДолжностныеПозиции
		|ГДЕ
		|	CRM_ДолжностныеПозиции.Ссылка В ИЕРАРХИИ(&ТекущаяДолжностнаяПозиция)
		|	И НЕ &ТекущаяДолжностнаяПозиция = ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
		|	И НЕ CRM_ДолжностныеПозиции.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Подичененные.CRM_ДолжностнаяПозиция
		|ИЗ
		|	Подичененные КАК Подичененные";
		
		Запрос.УстановитьПараметр("ТекущийПользователь"			, ТекущийПользователь);
		Запрос.УстановитьПараметр("ТекущаяДолжностнаяПозиция"	, ТекущаяДолжностнаяПозиция);
		
		ДолжностныеПозиции = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Позиция");
		
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
		|ПОМЕСТИТЬ ВТ_ДолжностныеПозиции
		|ИЗ
		|	Справочник.CRM_ДолжностныеПозиции.ПодчиненныеДолжностныеПозиции КАК CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции
		|ГДЕ
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка В(&СписокДолжностныхПозиций)
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_ДолжностныеПозиции.Ссылка
		|ИЗ
		|	Справочник.CRM_ДолжностныеПозиции КАК CRM_ДолжностныеПозиции
		|ГДЕ
		|	CRM_ДолжностныеПозиции.Ссылка В(&СписокДолжностныхПозиций)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.CRM_ДолжностнаяПозиция В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ВТ_ДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
		|			ИЗ
		|				ВТ_ДолжностныеПозиции КАК ВТ_ДолжностныеПозиции)
		|	И (НЕ Пользователи.CRM_ДолжностнаяПозиция = &ТекущаяДолжностнаяПозиция
		|			ИЛИ Пользователи.Ссылка = &ТекущийПользователь)
		|
		|СГРУППИРОВАТЬ ПО
		|	Пользователи.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Наименование");
		
		
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		Запрос.УстановитьПараметр("СписокДолжностныхПозиций", ДолжностныеПозиции);
		Запрос.УстановитьПараметр("ТекущаяДолжностнаяПозиция", ТекущаяДолжностнаяПозиция);
		
		ПодчиненныеСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Возврат ПодчиненныеСотрудники.Найти(Сотрудник)<>Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер)
	
	СтруктураПоиска = Новый Структура("НомерПункта", СтарыйНомер);
	НайденныеСтрокиСтарыйНомер = Объект.вогПрограмма.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("НомерПункта", НовыйНомер);
	НайденныеСтрокиНовыйНомер = Объект.вогПрограмма.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтрокиСтарыйНомер.Количество() > 0 Тогда 
		НайденныеСтрокиСтарыйНомер[0].НомерПункта = НовыйНомер;
	КонецЕсли;
	
	Если НайденныеСтрокиНовыйНомер.Количество() > 0 Тогда 
		НайденныеСтрокиНовыйНомер[0].НомерПункта = СтарыйНомер;
	КонецЕсли;
	
	Если НовыйНомер > СтарыйНомер Тогда 
		
		НайденныеСтрокиНовыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Начало;
		НайденныеСтрокиНовыйНомер[0].Окончание = НайденныеСтрокиНовыйНомер[0].Начало + НайденныеСтрокиНовыйНомер[0].ВремяПлан;
		
		НайденныеСтрокиСтарыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Окончание;
		НайденныеСтрокиСтарыйНомер[0].Окончание = НайденныеСтрокиСтарыйНомер[0].Начало + НайденныеСтрокиСтарыйНомер[0].ВремяПлан;
		
	ИначеЕсли НовыйНомер < СтарыйНомер Тогда 
		
		НайденныеСтрокиСтарыйНомер[0].Начало = НайденныеСтрокиНовыйНомер[0].Начало;
		НайденныеСтрокиСтарыйНомер[0].Окончание = НайденныеСтрокиСтарыйНомер[0].Начало + НайденныеСтрокиСтарыйНомер[0].ВремяПлан;
		
		НайденныеСтрокиНовыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Окончание;
		НайденныеСтрокиНовыйНомер[0].Окончание = НайденныеСтрокиНовыйНомер[0].Начало + НайденныеСтрокиНовыйНомер[0].ВремяПлан;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает значения флажков в полях ТЧ.
//
// Параметры:
//	ИмяТЧ			- Строка	- Имя табличной части.
//	ИмяПоля			- Строка	- Имя колонки табличной части.
//	ЗначениеФлажка	- Булево	- Устанавливаемое значение.
//
Процедура УстановитьЗначениеФлажка(ИмяТЧ, ИмяПоля = Неопределено, ЗначениеФлажка)
	Для Каждого ЭлементКоллекции Из Объект[ИмяТЧ] Цикл
		Если ИмяПоля = Неопределено Тогда
			Если ИспользоватьНапоминания И (ИмяТЧ = "СвоиЛица") Тогда
				ЭлементКоллекции.ОтправлятьНапоминания = ЗначениеФлажка;
			КонецЕсли;
			Если ИспользоватьОповещенияСМС Тогда
				ЭлементКоллекции.ОтправлятьСМС = ЗначениеФлажка;
			КонецЕсли;
			Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
				ЭлементКоллекции.ОтправлятьПоПочте = ЗначениеФлажка;
			КонецЕсли;
		Иначе
			ЭлементКоллекции[ИмяПоля] = ЗначениеФлажка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // УстановитьЗначениеФлажка()

&НаКлиенте
// Функция возвращает массив участников.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив участников
//
Функция ПолучитьМассивУчастников()
	МассивУчастников = Новый Массив();
	Для Каждого СтрокаТаблицы Из Объект.СвоиЛица Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Лицо) И ТипЗнч(СтрокаТаблицы.Лицо) = Тип("СправочникСсылка.Пользователи") Тогда
			Если МассивУчастников.Найти(СтрокаТаблицы.Лицо) = Неопределено Тогда
				МассивУчастников.Добавить(СтрокаТаблицы.Лицо);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	Возврат МассивУчастников;
КонецФункции // ПолучитьМассивУчастников()	

