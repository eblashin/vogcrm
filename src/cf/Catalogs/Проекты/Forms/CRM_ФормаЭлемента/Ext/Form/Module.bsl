
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьВидимостьРазделов()
	
	Если ПереключательВидаПроцессПроект = 1 Тогда // Проект
		Элементы.ГруппаЭтапыПроекта.Видимость = ИспользоватьПодсистемуУправленияПроектами;
		Элементы.ГруппаДатыДеятельность.Видимость = ИспользоватьПодсистемуУправленияПроектами;
		
		Элементы.ГруппаЭтапыПроекта1.Видимость = ИспользоватьПодсистемуУправленияПроектами;
	Иначе // Процесс
		Элементы.ГруппаЭтапыПроекта.Видимость = Ложь;
		Элементы.ГруппаДатыДеятельность.Видимость = Ложь;
		
		Элементы.ГруппаЭтапыПроекта1.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьИзмененияКартыМаршрута()
	
	Запрос =Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	CRM_БизнесПроцесс.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	               |ГДЕ
	               |	CRM_БизнесПроцесс.Проект = &Проект
	               |	И CRM_БизнесПроцесс.КартаМаршрута = &КартаМаршрута";
	Запрос.УстановитьПараметр("Проект"			,Объект.Ссылка);
	Запрос.УстановитьПараметр("КартаМаршрута"	,Объект.CRM_КартаМаршрута);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Элементы.КартаМаршрута.ТолькоПросмотр = Выборка.Следующий();
	Элементы.КартаМаршрута1.ТолькоПросмотр = Выборка.Следующий();
	Элементы.КартаМаршрута2.ТолькоПросмотр = Выборка.Следующий();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьМаршрутИсполнителейПроцесса()
	
	НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
	НаборИсполнителей.Отбор.Объект.Установить(Объект.Ссылка);
	НаборИсполнителей.Прочитать();
	НаборИсполнителей.Очистить();
	НаборИсполнителей.Записать();
		
КонецПроцедуры

&НаСервере
Функция МаршрутЗаполнен()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ИсполнителиЭтапов.Объект
		|ИЗ
		|	РегистрСведений.CRM_ИсполнителиЭтапов КАК CRM_ИсполнителиЭтапов
		|ГДЕ
		|	CRM_ИсполнителиЭтапов.Объект = &Объект";

	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);

	Результат = Запрос.Выполнить();

    Возврат (Результат.Выбрать().Количество()<>0) 
	
КонецФункции	

&НаСервере
Процедура УдалитьПредыдущиеВложенияФорматированногоДокумента(ИменаФайлов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Файлы.Ссылка
	               |ИЗ
	               |	Справочник.ПроектыПрисоединенныеФайлы КАК Файлы
	               |ГДЕ
	               |	Файлы.ВладелецФайла = &Ссылка
	               |	И Файлы.Наименование В (&ИменаФайлов)";
	
	Запрос.УстановитьПараметр("Ссылка" , 		Объект.Ссылка);
	Запрос.УстановитьПараметр("ИменаФайлов", 	ИменаФайлов);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектВложение = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВложения()
	
	Для Каждого КлючИЗначение Из СтруктураВложений Цикл
		
		РасширениеБезТочки = КлючИЗначение.Значение.Формат();
		
		ИмяФайла							= КлючИЗначение.Ключ + "." + РасширениеБезТочки;
		ИмяФайлаНаКомпьютере				= ПоместитьВоВременноеХранилище(КлючИЗначение.Значение.ПолучитьДвоичныеДанные(), УникальныйИдентификатор);
		
		ВремяИзменения = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
		
		ПрисоединенныеФайлы.ДобавитьФайл(Объект.Ссылка, КлючИЗначение.Ключ, РасширениеБезТочки, ВремяИзменения, ВремяИзменения, 
										 ИмяФайлаНаКомпьютере, "");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПрикрепленныеФайлы() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроектыПрисоединенныеФайлы.Ссылка,
	               |	ПроектыПрисоединенныеФайлы.Наименование
	               |ИЗ
	               |	Справочник.ПроектыПрисоединенныеФайлы КАК ПроектыПрисоединенныеФайлы
	               |ГДЕ
	               |	ПроектыПрисоединенныеФайлы.ВладелецФайла = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", 	Объект.Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура УстановитьСвойстваЭлементовНастройкиПериодичности()
	
	Элементы.CRM_Периодический.Видимость		= ЗначениеЗаполнено(Объект.CRM_КартаМаршрута);
	Элементы.CRM_Периодический.Доступность		= ВозможенФоновыйСтартБизнесПроцесса;
	Элементы.СтраницыРасписания.Видимость		= (ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) И (НЕ ВозможенФоновыйСтартБизнесПроцесса ИЛИ Объект.CRM_Периодический));
	Элементы.СтраницыРасписания.ТекущаяСтраница	= ?(ВозможенФоновыйСтартБизнесПроцесса,Элементы.СтраницаРасписания,Элементы.СтраницаПредупреждения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура CRM_ТекущийЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Данные еще не записаны.
					   |Выбор текущего этапа возможен только после записи данных
					   |Данные будут записаны.");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереключательВидаПроцессПроектПриИзменении(Элемент)
	
	Объект.CRM_ЭтоПроект = Булево(ПереключательВидаПроцессПроект);
	ОбновитьВидимостьРазделов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогПоПлановымЗатратамНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Данные еще не записаны.
					   |Формирование отчета возможно только после записи данных.'"));
		//
		Возврат;
	КонецЕсли;
	
	Если ИтогПоПлановымЗатратам = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нет данных для формирования отчета!'"));
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура("Отбор,СформироватьПриОткрытии", Новый Структура("Проект", Объект.Ссылка), Истина);
	Форма = ПолучитьФорму("Отчет.CRM_ПлановыеЗатратыПроектов.ФормаОбъекта", СтруктураПараметры, ЭтотОбъект);
	Если Форма <> Неопределено Тогда
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

// +CRM

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаКлиенте
Процедура CRM_ПартнерПриИзменении(Элемент)
	Объект.CRM_КонтактноеЛицоПартнера = ПолучитьЗначениеРеквизита(Объект.CRM_Партнер, "CRM_ОсновноеКонтактноеЛицо");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастройкаРеквизитовСобытияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры

// -CRM

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// +CRM
	// скроем раздел текущего этапа, если отключена ФО управления проектами.
	ИспользоватьПодсистемуУправленияПроектами = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьПодсистемуУправленияПроектами");
	Элементы.ГруппаЭтапыПроекта.Видимость = ИспользоватьПодсистемуУправленияПроектами;
	// Если отключены бизнес-процессы, то скроем раздел ГруппаМаршрутПроцесса.
	Элементы.ГруппаМаршрутПроцесса.Видимость = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьБизнесПроцессы");
	// -CRM
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		табВложения = ПолучитьПрикрепленныеФайлы();
		
		СтруктураФайлов = Новый Структура;
		
		Если табВложения.Количество() > 0 Тогда
			
			Для Каждого Стр Из табВложения Цикл
				
				Попытка
					// +CRM
					ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Стр.Ссылка);
					Если ДвоичныеДанные = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					// -CRM
					СтруктураФайлов.Вставить(Стр.Наименование, Новый Картинка(ДвоичныеДанные));;
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Объект.CRM_КомментарийHTML) Тогда
			ФорматированныйДокументТекст.УстановитьHTML(Объект.CRM_КомментарийHTML, СтруктураФайлов);
		ИначеЕсли НЕ ПустаяСтрока(Объект.Комментарий) Тогда
			// Если был заполнен ранее в типовом решении.
			HTMLТекст = CRM_ОбщегоНазначенияКлиентСервер.ПреобразоватьТекстВHTML(Объект.Комментарий);
			ФорматированныйДокументТекст.УстановитьHTML(HTMLТекст, СтруктураФайлов);
		КонецЕсли;
		ПереключательВидаПроцессПроект = Число(Объект.CRM_ЭтоПроект);
		Если ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) Тогда
			ПроверитьВозможностьИзмененияКартыМаршрута();
		КонецЕсли;
	Иначе
		Если Параметры.Свойство("CRM_ЭтоПроект") Тогда
			Объект.CRM_ЭтоПроект			= Параметры.CRM_ЭтоПроект;
			ПереключательВидаПроцессПроект	= Число(Параметры.CRM_ЭтоПроект);
			Объект.bpmТипПроцесса			= Перечисления.bpmТипыПроцессов.ПоУмолчанию;
		ИначеЕсли НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПереключательВидаПроцессПроект	= 1;
			Объект.CRM_ЭтоПроект			= Истина;
			Объект.bpmТипПроцесса			= Перечисления.bpmТипыПроцессов.ПоУмолчанию;
		КонецЕсли;
		
		Если НЕ Объект.CRM_ЭтоПроект Тогда
			Объект.bpmСостояниеПроцесса = Перечисления.bpmСостояниеПроцесса.Запланирован;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаПанельПроцессПроект.ТекущаяСтраница = ?(Объект.CRM_ЭтоПроект,Элементы.СтраницаПроекта,Элементы.СтраницаПроцесса);
	
	Элементы.КартаМаршрута.АвтоОтметкаНезаполненного = НЕ Объект.CRM_ЭтоПроект;
	Элементы.КартаМаршрута1.АвтоОтметкаНезаполненного = НЕ Объект.CRM_ЭтоПроект;
	Элементы.КартаМаршрута2.АвтоОтметкаНезаполненного = НЕ Объект.CRM_ЭтоПроект;
	
	Элементы.ПодменюОтчеты.Видимость = Объект.CRM_ЭтоПроект;
	Элементы.ФормаСоздатьНаОсновании.Видимость = Объект.CRM_ЭтоПроект;
	Элементы.ФормаСправочникПроектыCRM_СтартоватьБизнесПроцесс.Видимость = НЕ Объект.CRM_ЭтоПроект;
	
	Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессОбъекта;
	ИначеЕсли Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессНезависимый;
	ИначеЕсли Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПоУмолчанию Тогда
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессПоУмолчанию;
	Иначе
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессПоУмолчанию;
	КонецЕсли;
	
	
	Если ИспользоватьПодсистемуУправленияПроектами Тогда
		СтруктураПараметров = Новый Структура("CRM_Проект", Объект.Ссылка);
	Иначе
		СтруктураПараметров = Новый Структура("CRM_Проект", Справочники.Проекты.ПустаяСсылка());
	КонецЕсли;
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметров);
	
// +CRM
	//СтрокаПредупреждения = НСтр("ru = 'В настройках этапов маршрута не указан исполнитель первого этапа. Периодическое создание бизнес-процесса будет невозможно.'");
	Если ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) Тогда
		ВозможенФоновыйСтартБизнесПроцесса = ПроверитьНаВозможностьФоновогоСтарта();
	КонецЕсли;
	
	Элементы.CRM_Периодический.Видимость		= ЗначениеЗаполнено(Объект.CRM_КартаМаршрута);
	Элементы.CRM_Периодический.Доступность		= ВозможенФоновыйСтартБизнесПроцесса;
	Элементы.СтраницыРасписания.Видимость		= (ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) И (НЕ ВозможенФоновыйСтартБизнесПроцесса ИЛИ Объект.CRM_Периодический));
	Элементы.СтраницыРасписания.ТекущаяСтраница	= ?(ВозможенФоновыйСтартБизнесПроцесса,Элементы.СтраницаРасписания,Элементы.СтраницаПредупреждения);
	
	Если Объект.CRM_Периодический Тогда
		ПолучитьРасписание();
		Элементы.ПредставлениеРасписания.Заголовок = ПолучитьПредставлениеРасписанияСервер();
	КонецЕсли;
	
	// Вычисляем, нужно ли показывать подсказку на вкладке "Дополнительные реквизиты".
	ПоказатьПодсказку = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ПоказыватьПодсказкуДопРеквизитыПроектов");
	Элементы.ДекорацияДополнительныхРеквизитов.Видимость = ?(ПоказатьПодсказку = Неопределено, Истина, ПоказатьПодсказку);
	
	bpmПредыдущийВидОбъектаСтрокой		= Объект.bpmВидОбъектаСтрокой;
	bpmПредыущийРеквизитОбъектаСтрокой	= Объект.bpmРеквизитОбъектаСтрокой;
	
	УстановитьСвойстваЭлементовПоТипу(Истина);
	
	ПолучитьСписокДоступныхОбъектов();
// -CRM
	
КонецПроцедуры 

&НаСервере
Процедура ПолучитьСхемуИНастройкиКомпоновкиДанных(ПриСоздании = Ложь)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если АдресСхемыКомпоновкиДанных = "" Тогда
			Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				Если НЕ ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда Возврат; КонецЕсли;
				СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта(Объект.bpmВидОбъектаСтрокой);
			ИначеЕсли Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта("Пользователи");
			КонецЕсли;
		Иначе
			СхемаКомпоновкиДанных	= ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
		КонецЕсли;
	Иначе
		Если ПриСоздании Тогда
			СхемаКомпоновкиДанных = Объект.Ссылка.bpmХранилищеСхемыКомпоновкиДанных.Получить();
		Иначе
			СхемаКомпоновкиДанных = Неопределено;
		КонецЕсли;
		
		Если СхемаКомпоновкиДанных = Неопределено Тогда
			Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				Если НЕ ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда Возврат; КонецЕсли;
				СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта(Объект.bpmВидОбъектаСтрокой);
			ИначеЕсли Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта("Пользователи");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	ОшибкаПриЗагрузкеНастроек = Ложь;
	Попытка
		НастройкиКомпоновки	= CRM_БизнесПроцессыПереопределяемый.СкомпоноватьНастройки(КомпоновщикНастроек, АдресСхемыКомпоновкиДанных);
	Исключение
		ОшибкаПриЗагрузкеНастроек = Истина;
		Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
			Если НЕ ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда Возврат; КонецЕсли;
			СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта(Объект.bpmВидОбъектаСтрокой);
		ИначеЕсли Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
			СхемаКомпоновкиДанных		= CRM_БизнесПроцессыПереопределяемый.ПолучитьСхемуКомпоновкиПоИмениОбъекта("Пользователи");
		КонецЕсли;
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
		НастройкиКомпоновки	= CRM_БизнесПроцессыПереопределяемый.СкомпоноватьНастройки(КомпоновщикНастроек, АдресСхемыКомпоновкиДанных);
	КонецПопытки;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если АдресХранилищаНастройкиКомпоновщика = "" Тогда
			Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				CRM_БизнесПроцессыПереопределяемый.ДобавитьЭлементыОтборовВНастройкиСхемы(НастройкиКомпоновки,Объект.bpmВидОбъектаСтрокой);
			ИначеЕсли Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				CRM_БизнесПроцессыПереопределяемый.ДобавитьЭлементыОтборовВНастройкиСхемы(НастройкиКомпоновки,"Пользователи");
			КонецЕсли;
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных).НастройкиПоУмолчанию);
		КонецЕсли;
	Иначе
		Если ПриСоздании Тогда
			СохраненныеНастройкиКомпоновки = Объект.Ссылка.bpmХранилищеНастроекКомпоновкиДанных.Получить();
		Иначе
			СохраненныеНастройкиКомпоновки = Неопределено;
		КонецЕсли;
		
		Если ОшибкаПриЗагрузкеНастроек ИЛИ СохраненныеНастройкиКомпоновки = Неопределено Тогда
			Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				CRM_БизнесПроцессыПереопределяемый.ДобавитьЭлементыОтборовВНастройкиСхемы(НастройкиКомпоновки,Объект.bpmВидОбъектаСтрокой);
			ИначеЕсли Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				CRM_БизнесПроцессыПереопределяемый.ДобавитьЭлементыОтборовВНастройкиСхемы(НастройкиКомпоновки,"Пользователи");
			КонецЕсли;
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(СохраненныеНастройкиКомпоновки);
		КонецЕсли;
	КонецЕсли;
	АдресХранилищаНастройкиКомпоновщика = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаСервере
Функция ПройденаПроверкаНастроекЭтапов()
	
	Если НЕ (Объект.bpmВидОбъектаСтрокой = bpmПредыдущийВидОбъектаСтрокой)
	ИЛИ НЕ (Объект.bpmРеквизитОбъектаСтрокой = bpmПредыущийРеквизитОбъектаСтрокой) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НаборРегистра = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Объект.Установить(Объект.Ссылка);
	НаборРегистра.Прочитать();
	
	Если НаборРегистра.Количество() = 0 Тогда
		НаборРегистра.Отбор.Сбросить();
		НаборРегистра.Отбор.Объект.Установить(Объект.CRM_КартаМаршрута);
		НаборРегистра.Прочитать();
	КонецЕсли;
	
	Для Каждого СтрокаНабора ИЗ НаборРегистра Цикл
		Если ЗначениеЗаполнено(СтрокаНабора.Состояние) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПроверитьНастройкиУстановитьСвойстваЭлементов()
	
	Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
		Если Не ПройденаПроверкаНастроекЭтапов() Тогда
			Если НЕ Объект.bpmСостояниеПроцесса = Перечисления.bpmСостояниеПроцесса.Отменен Тогда
				Объект.bpmСостояниеПроцесса = Перечисления.bpmСостояниеПроцесса.Запланирован;
			КонецЕсли;
			Элементы.bpmСостояниеПроцесса.ТолькоПросмотр = Истина;
			Элементы.ДекорацияПредупреждение.Видимость = Истина;
		Иначе
			Элементы.bpmСостояниеПроцесса.ТолькоПросмотр = Ложь;
			Элементы.ДекорацияПредупреждение.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.bpmСостояниеПроцесса.ТолькоПросмотр = Ложь;
		Элементы.ДекорацияПредупреждение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоТипу(ПриСоздании = Ложь)
	
	ПроверитьНастройкиУстановитьСвойстваЭлементов();
	
	Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта
	ИЛИ Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
		
		Если ЗначениеЗаполнено(Объект.удалитьbpmВидОбъекта) И НЕ ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда
			Объект.bpmВидОбъектаСтрокой		= "CRM_Интерес";
			Объект.bpmРеквизитОбъектаСтрокой= "СостояниеИнтереса"
		КонецЕсли;
		
		Элементы.bpmВидОбъектаСтрокой.ТолькоПросмотр					= (Объект.CRM_КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
		Элементы.bpmРеквизитОбъектаСтрокой.ТолькоПросмотр				= (Объект.CRM_КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
		Элементы.bpmВидОбъектаСтрокой.АвтоОтметкаНезаполненного			= (Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
		Элементы.bpmРеквизитОбъектаСтрокой.АвтоОтметкаНезаполненного	= (Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта);
		Элементы.bpmИспользоватьПриПринятииОбращения.ТолькоПросмотр		= (Объект.CRM_КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс);
		
		Если ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда
			ПолучитьСписокДоступныхРеквизитов();
		КонецЕсли;
		
		Элементы.ВидСобытиеОтборы.Видимость = Истина;
		Элементы.ГруппаОтборы.Видимость = ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой);
		
		ПолучитьСхемуИНастройкиКомпоновкиДанных(ПриСоздании);
		ОбновитьЭлементыОтбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьВидимостьРазделов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Не ТекущийОбъект.ЭтоНовый() Тогда
		// Получим общую сумму запланированных затратам проекта.
		ИтогПоПлановымЗатратам = CRM_УправлениеПроектамиСервер.ПолучитьПлановыеЗатратыПоПроекту(ТекущийОбъект.Ссылка);
		Если ИтогПоПлановымЗатратам = 0 Тогда
			ИтогПоПлановымЗатратамПредставление = НСтр("ru = 'Отсутствуют'");
		Иначе
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
			Если ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
				ВалютаУправленческогоУчета = Строка(ВалютаУправленческогоУчета);
			Иначе
				ВалютаУправленческогоУчета = НСтр("ru = 'руб'");
			КонецЕсли;
			ИтогПоПлановымЗатратамПредставление = Формат(ИтогПоПлановымЗатратам, "ЧДЦ=2") + " " + ВалютаУправленческогоУчета;
			Если Прав(ИтогПоПлановымЗатратамПредставление, 1) <> "." Тогда
				ИтогПоПлановымЗатратамПредставление = ИтогПоПлановымЗатратамПредставление + ".";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//+Классификаторы
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли; 
	// Конец СтандартныеПодсистемы.Свойства
	Если ИмяСобытия = "ЗавершенаНастройкаМаршрута" И Параметр = Объект.Ссылка Тогда
		
		ПроверитьНастройкиУстановитьСвойстваЭлементов();
		ВозможенФоновыйСтартБизнесПроцесса = ПроверитьНаВозможностьФоновогоСтарта();
		Если НЕ ВозможенФоновыйСтартБизнесПроцесса Тогда
			Объект.CRM_Периодический = Ложь;
		КонецЕсли;
		УстановитьСвойстваЭлементовНастройкиПериодичности();
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) И (Объект.ПлановаяДатаОкончания < Объект.ПлановаяДатаНачала) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Плановая дата окончания не может быть меньше чем Плановая дата начала.'");
		Сообщение.Сообщить(); 
		Отказ = Истина;
	
	КонецЕсли;
	
	// Описание
	ФорматированныйДокументТекст.ПолучитьHTML(Объект.CRM_КомментарийHTML, СтруктураВложений);
	Объект.Комментарий = ФорматированныйДокументТекст.ПолучитьТекст();
	// В зависимости от типа очистим некоторые реквизиты.
	Если Не Объект.CRM_ЭтоПроект Тогда
		Объект.CRM_ТекущийЭтап = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	// +CRM
	Если Объект.CRM_Периодический Тогда
		ТекущийОбъект.CRM_Расписание = Новый ХранилищеЗначения(ТекущееРасписание, Новый СжатиеДанных(9));
	КонецЕсли;
	
	CRM_МетодыМодулейМенеджеровСправочников.УстановитьПараметрыАвтостарта(ТекущийОбъект);
	
	Если ТекущийОбъект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта 
	ИЛИ ТекущийОбъект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
		ТекущийОбъект.bpmХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных));
		ТекущийОбъект.bpmХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновщика));
	КонецЕсли;
	
	// -CRM
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ИспользоватьПодсистемуУправленияПроектами Тогда
		СтруктураПараметров = Новый Структура("CRM_Проект", Объект.Ссылка);
	Иначе
		СтруктураПараметров = Новый Структура("CRM_Проект", ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"));
	КонецЕсли;
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметров);
	
	Если СтруктураВложений.Количество() <>  0 Тогда // Значит что-то меняли
		ИменаФайлов = Новый СписокЗначений;
		Для Каждого КлючИЗначение Из СтруктураВложений Цикл
			ИменаФайлов.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		УдалитьПредыдущиеВложенияФорматированногоДокумента(ИменаФайлов);
		ЗаписатьВложения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ Объект.CRM_ЭтоПроект Тогда
		
		Если Не ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не выбрана карта маршрута!";
			Сообщение.Поле = "Объект.CRM_КартаМаршрута";
			Сообщение.Сообщить();
			
			Отказ = Истина;
		КонецЕсли;
		
		Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
			Если Не ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не указан Вид объекта!";
				Сообщение.Поле = "Объект.bpmВидОбъектаСтрокой";
				Сообщение.Сообщить();
				
				Отказ = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.bpmРеквизитОбъектаСтрокой) Тогда
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не указан Реквизит объекта!";
				Сообщение.Поле = "Объект.bpmРеквизитОбъектаСтрокой";
				Сообщение.Сообщить();
				
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрутаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если МаршрутЗаполнен() Тогда
		ТекстВопроса = НСтр("ru = 'При изменении карты маршрута, настройки этапов будут удалены. 
								  |Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("КартаМаршрутаНачалоВыбораЗавершение", ЭтотОбъект, Элемент);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	КартаМаршрутаНачалоВыбораЗавершение(Неопределено, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрутаНачалоВыбораЗавершение(Ответ, Элемент) Экспорт
	
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьМаршрутИсполнителейПроцесса();
	КонецЕсли;
	
	Отбор = Новый Структура("Редактируется", Ложь);
	//Если Объект.bpmТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПроцессОбъекта") Тогда
	//	Отбор.Вставить("ТипПроцесса", Объект.bpmТипПроцесса);
	//КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Справочник.CRM_КартыМаршрутов.ФормаВыбора",ПараметрыФормы, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаВозможностьФоновогоСтарта(ВыбраннаяКартаМаршрута = Неопределено)
	
	Если НЕ ВыбраннаяКартаМаршрута = Неопределено Тогда
		СписокТочекСтарта = CRM_БизнесПроцессыСервер.ПолучитьВозможныеТочкуАвтоСтартаБизнесПроцесса(ВыбраннаяКартаМаршрута);
	Иначе
		СписокТочекСтарта = CRM_БизнесПроцессыСервер.ПолучитьВозможныеТочкуАвтоСтартаБизнесПроцесса(?(Объект.Ссылка.Пустая(),Объект.CRM_КартаМаршрута,Объект.Ссылка));
	КонецЕсли;
	
	ВозможенСтарт	= Ложь;
	Для Каждого ЭлементСписка Из СписокТочекСтарта Цикл
		ВозможенСтарт	= ЭлементСписка.Пометка;
		Если ЭлементСписка.Пометка Тогда Прервать; КонецЕсли;
	КонецЦикла;
	
	Возврат ВозможенСтарт;
	
КонецФункции


&НаСервере
Процедура ОбновитьАдресХранилищаНастройкиКомпоновщика()
	
	АдресХранилищаНастройкиКомпоновщика = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииПоляОтбора(Элемент)
	
	ОбновитьАдресХранилищаНастройкиКомпоновщика();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище()
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	Адреса.СхемаКомпоновкиДанных = АдресСхемыКомпоновкиДанных;
	Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), Новый УникальныйИдентификатор());
	
	Возврат Адреса;
	
КонецФункции 

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройки отборов'");
	
	Адреса = ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект, Адреса);
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		Новый Структура(
			"АдресСхемыКомпоновкиДанных,
			|АдресНастроекКомпоновкиДанных,
			|ИсточникШаблонов,
			|Заголовок,
			|НеПомещатьНастройкиВСхемуКомпоновкиДанных,
			|НеНастраиватьУсловноеОформление,
			|НеНастраиватьПорядок,
			|НеНастраиватьВыбор,
			|УникальныйИдентификатор,
			|ИмяШаблонаСКД,
			|ВозвращатьИмяТекущегоШаблонаСКД,
			|НеРедактироватьСхемуКомпоновкиДанных,
			|НеНастраиватьПараметры",
			Адреса.СхемаКомпоновкиДанных,
			Адреса.НастройкиКомпоновкиДанных,
			Неопределено,
			//Объект.Ссылка,
			ЗаголовокФормыНастройкиСхемыКомпоновкиДанных,
			Истина,
			Истина,
			Истина,
			Истина,
			УникальныйИдентификатор,
			"",
			Истина,
			Истина,
			Истина),
			,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	
КонецПроцедуры
		
&НаКлиенте
Процедура НастройкиЗавершение(Результат, Адреса) Экспорт

	Если Результат <> Неопределено Тогда
		
		АдресХранилищаНастройкиКомпоновщика = Результат.АдресХранилищаНастройкиКомпоновщика;
		КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновщика));
		
		ОбновитьЭлементыОтбора();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборНаФОрму(ИндексЭлемента, ИндексОтбора)
	
	Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
		Постфикс = "Независимый"
	Иначе
		Постфикс = "";
	КонецЕсли;
	
	НоваяГруппа = Элементы.Добавить("ФлагЛевоеЗначение"+Постфикс+Строка(ИндексЭлемента), Тип("ГруппаФормы"), ?(Постфикс = "",Элементы.ЛевоеЗнчение,Элементы.ЛевоеЗнчениеНезависимый));
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	НовыйЭлемент = Элементы.Добавить("Использование"+Постфикс+Строка(ИндексЭлемента), Тип("ПолеФормы"), НоваяГруппа);
	НовыйЭлемент.ПутьКДанным = "КомпоновщикНастроек.Настройки.Отбор["+Строка(ИндексОтбора)+"].Использование";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.УстановитьДействие("ПриИзменении",	"Подключаемый_ПриИзмененииПоляОтбора");
	
	НовыйЭлемент = Элементы.Добавить("ЛевоеЗначение"+Постфикс+Строка(ИндексЭлемента), Тип("ПолеФормы"), НоваяГруппа);
	НовыйЭлемент.ПутьКДанным = "КомпоновщикНастроек.Настройки.Отбор["+Строка(ИндексОтбора)+"].ЛевоеЗначение";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	НовыйЭлемент = Элементы.Добавить("ВидСравнения"+Постфикс+Строка(ИндексЭлемента), Тип("ПолеФормы"), ?(Постфикс = "",Элементы.ВидСравнения,Элементы.ВидСравненияНезависимый));
	НовыйЭлемент.ПутьКДанным = "КомпоновщикНастроек.Настройки.Отбор["+Строка(ИндексОтбора)+"].ВидСравнения";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.УстановитьДействие("ПриИзменении",	"Подключаемый_ПриИзмененииПоляОтбора");
	
	НовыйЭлемент = Элементы.Добавить("ПравоеЗначение"+Постфикс+Строка(ИндексЭлемента), Тип("ПолеФормы"), ?(Постфикс = "",Элементы.ПравоеЗначение,Элементы.ПравоеЗначениеНезависимый));
	НовыйЭлемент.ПутьКДанным = "КомпоновщикНастроек.Настройки.Отбор["+Строка(ИндексОтбора)+"].ПравоеЗначение";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.КнопкаОчистки = Истина;
	НовыйЭлемент.УстановитьДействие("ПриИзменении",	"Подключаемый_ПриИзмененииПоляОтбора");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыОтбора()
	
	Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
		Постфикс = "Независимый"
	Иначе
		Постфикс = "";
	КонецЕсли;
	
	Для Ном = 1 По 3 Цикл
		Если Элементы.Найти("Использование"+Постфикс+Строка(Ном)) = Неопределено Тогда Продолжить; КонецЕсли;
		
		ЭлементОтбора = Элементы.Найти("Использование"+Постфикс+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
		
		ЭлементОтбора = Элементы.Найти("ЛевоеЗначение"+Постфикс+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
		
		ЭлементОтбора = Элементы.Найти("ВидСравнения"+Постфикс+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
		
		ЭлементОтбора = Элементы.Найти("ПравоеЗначение"+Постфикс+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
		
		ЭлементОтбора = Элементы.Найти("ФлагЛевоеЗначение"+Постфикс+Строка(Ном));
		Элементы.Удалить(ЭлементОтбора);
	КонецЦикла;
	
	Обработано = 0;
	Для Каждого ЭлементОтбора ИЗ КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обработано = 3 Тогда Прервать; КонецЕсли;
		
		Обработано = Обработано + 1;
		Индекс = КомпоновщикНастроек.Настройки.Отбор.Элементы.Индекс(ЭлементОтбора);
			
		ДобавитьОтборНаФОрму(Обработано, Индекс);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКартыМаршрута()
	
	Если ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) Тогда
		Если Объект.CRM_КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
			
			АдресСхемыКомпоновкиДанных = "";
			АдресХранилищаНастройкиКомпоновщика = "";
			
			Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				Объект.bpmВидОбъектаСтрокой			= Объект.CRM_КартаМаршрута.ВидОбъектаСтрокой;
				Объект.bpmРеквизитОбъектаСтрокой	= Объект.CRM_КартаМаршрута.РеквизитОбъектаСтрокой;
			Иначе
				Объект.bpmВидОбъектаСтрокой					= "";
				Объект.bpmРеквизитОбъектаСтрокой			= "";
			КонецЕсли;
			
			Объект.bpmИспользоватьПриПринятииОбращения	= Объект.CRM_КартаМаршрута.ИспользоватьПриПринятииОбращения;
			
			УстановитьСвойстваЭлементовПоТипу();
		ИначеЕсли Объект.CRM_КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
			
			АдресСхемыКомпоновкиДанных = "";
			АдресХранилищаНастройкиКомпоновщика = "";
			
			Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта И НЕ ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда
				Объект.bpmВидОбъектаСтрокой					= "CRM_Интерес";
				Объект.bpmРеквизитОбъектаСтрокой			= "СостояниеИнтереса"
			Иначе
				Объект.bpmВидОбъектаСтрокой					= "";
				Объект.bpmРеквизитОбъектаСтрокой			= "";
			КонецЕсли;
			
			Объект.bpmИспользоватьПриПринятииОбращения	= Объект.CRM_КартаМаршрута.ИспользоватьПриПринятииОбращения;
			
			УстановитьСвойстваЭлементовПоТипу();
		ИначеЕсли Объект.CRM_КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.ПоУмолчанию Тогда
			АдресСхемыКомпоновкиДанных = "";
			АдресХранилищаНастройкиКомпоновщика = "";
			
			Если Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.ПроцессОбъекта Тогда
				Объект.bpmВидОбъектаСтрокой					= "CRM_Интерес";
				Объект.bpmРеквизитОбъектаСтрокой			= "СостояниеИнтереса"
			ИначеЕсли  Объект.bpmТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс Тогда
				Объект.bpmИспользоватьПриПринятииОбращения	= Ложь;
				Объект.bpmВидОбъектаСтрокой					= "";
				Объект.bpmРеквизитОбъектаСтрокой			= "";
			КонецЕсли;
			
			УстановитьСвойстваЭлементовПоТипу();
		Иначе
			АдресСхемыКомпоновкиДанных					= "";
			АдресХранилищаНастройкиКомпоновщика			= "";
			Элементы.ГруппаОтборы.Видимость				= Ложь;
			Объект.bpmВидОбъектаСтрокой					= "";
			Объект.bpmРеквизитОбъектаСтрокой			= "";
		КонецЕсли;
	Иначе
		АдресСхемыКомпоновкиДанных					= "";
		АдресХранилищаНастройкиКомпоновщика			= "";
		Элементы.ГруппаОтборы.Видимость				= Ложь;
		Объект.bpmВидОбъектаСтрокой					= "";
		Объект.bpmРеквизитОбъектаСтрокой			= "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрутаПриИзменении(Элемент)
	
	Объект.CRM_Периодический = Ложь;
	
	Элементы.CRM_Периодический.Видимость = ЗначениеЗаполнено(Объект.CRM_КартаМаршрута);
	
	Если ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) Тогда
		
		ВозможенФоновыйСтартБизнесПроцесса = ПроверитьНаВозможностьФоновогоСтарта(Объект.CRM_КартаМаршрута);
		
		УстановитьСвойстваЭлементовНастройкиПериодичности();
	КонецЕсли;
	
	ПриИзмененииКартыМаршрута();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасписание()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущееРасписание = ТекущийОбъект.CRM_Расписание.Получить();
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеРасписанияСервер()
	
	Возврат CRM_МетодыМодулейМенеджеровСправочников.ПолучитьПредставлениеРасписания(ТекущееРасписание);
	
КонецФункции

&НаКлиенте
Процедура CRM_ПериодическийПриИзменении(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Добавить вложение возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ПериодическийПриИзмененииПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе	
		CRM_ПериодическийПриИзмененииПродолжение(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПериодическийПриИзмененииПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Если Объект.CRM_Периодический И ТекущееРасписание = Неопределено Тогда
		ПараметрыФормы = Новый Структура("ДатаНачала,ДатаКонца,ТекущееРасписание",НачалоДня(Объект.ПлановаяДатаНачала), НачалоДня(Объект.ПлановаяДатаОкончания), ТекущееРасписание);
		ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ПериодическийПриИзмененииЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.Проекты.Форма.CRM_ФормаНастройкиРасписания", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		УстановитьСвойстваЭлементовНастройкиПериодичности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПериодическийПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		ТекущееРасписание = Результат;
		Элементы.ПредставлениеРасписания.Заголовок = ПолучитьПредставлениеРасписанияСервер();
	Иначе
		Объект.CRM_Периодический = Ложь;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовНастройкиПериодичности();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРасписанияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ДатаНачала,ДатаКонца,ТекущееРасписание",НачалоДня(Объект.ПлановаяДатаНачала), НачалоДня(Объект.ПлановаяДатаОкончания), ТекущееРасписание);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредставлениеРасписанияНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Проекты.Форма.CRM_ФормаНастройкиРасписания", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРасписанияНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		ТекущееРасписание = Результат;
		Элементы.ПредставлениеРасписания.Заголовок = ПолучитьПредставлениеРасписанияСервер();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЭтаповМаршрута(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Добавить вложение возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаЭтаповМаршрутаЗавершение", ЭтотОбъект);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	НастройкаЭтаповМаршрутаЗавершение(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЭтаповМаршрутаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
		
	Если НЕ ЗначениеЗаполнено(Объект.CRM_КартаМаршрута) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Процесс", Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.CRM_НастройкаЭтаповБизнесПроцессов", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
	ВозможенФоновыйСтартБизнесПроцесса = ПроверитьНаВозможностьФоновогоСтарта();
	
	Если НЕ ВозможенФоновыйСтартБизнесПроцесса Тогда
		Объект.CRM_Периодический = Ложь;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовНастройкиПериодичности();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДекорацияДополнительныхРеквизитовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ПоказыватьПодсказкуДопРеквизитыПроектов", Ложь);
	Элементы.ДекорацияДополнительныхРеквизитов.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура bpmТипПроцессаПриИзменении(Элемент)
	
	ЭтотОбъект.Модифицированность = Истина;
	Если Объект.bpmТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПроцессОбъекта") Тогда
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессОбъекта;
		//ПриИзмененииВидаОбъекта();
	ИначеЕсли Объект.bpmТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.НезависимыйПроцесс") Тогда
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессНезависимый;
	ИначеЕсли Объект.bpmТипПроцесса = ПредопределенноеЗначение("Перечисление.bpmТипыПроцессов.ПоУмолчанию") Тогда
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессПоУмолчанию;
	Иначе
		Элементы.ПанельСтраницПоТипамПроцесса.ТекущаяСтраница = Элементы.СтраницаПроцессПоУмолчанию;
	КонецЕсли;
	
	ПриИзмененииКартыМаршрута();
	
КонецПроцедуры


&НаСервере
Процедура ПолучитьСписокДоступныхОбъектов()
	
	Для Каждого ТипОбъекта ИЗ Метаданные.ОпределяемыеТипы.CRM_ПроцессныеОбъекты.Тип.Типы() Цикл
		
		МетаДокумент = Метаданные.НайтиПоТипу(ТипОбъекта);
			
		Если НРег(Лев(МетаДокумент.Имя,7)) = "удалить" Тогда Продолжить; КонецЕсли;
		
		Элементы.bpmВидОбъектаСтрокой.СписокВыбора.Добавить(МетаДокумент.Имя,МетаДокумент.Представление());
		Элементы.bpmВидОбъектаСтрокой.СписокВыбора.СортироватьПоЗначению();
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияСвойств(ДополнительныеСвойстваОбъекта, Наборы, ЭтоДополнительноеСведение)
	
	Свойства = ДополнительныеСвойстваОбъекта.ВыгрузитьКолонку("Свойство");
	
	НаборыСвойств = Новый ТаблицаЗначений;
	
	НаборыСвойств.Колонки.Добавить(
		"Набор", Новый ОписаниеТипов("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений"));
	
	НаборыСвойств.Колонки.Добавить(
		"ПорядокНабора", Новый ОписаниеТипов("Число"));
	
	Для каждого ЭлементСписка Из Наборы Цикл
		НоваяСтрока = НаборыСвойств.Добавить();
		НоваяСтрока.Набор         = ЭлементСписка.Набор;
		НоваяСтрока.ПорядокНабора = Наборы.Индекс(ЭлементСписка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Свойства",      Свойства);
	Запрос.УстановитьПараметр("НаборыСвойств", НаборыСвойств);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыСвойств.Набор,
	|	НаборыСвойств.ПорядокНабора
	|ПОМЕСТИТЬ НаборыСвойств
	|ИЗ
	|	&НаборыСвойств КАК НаборыСвойств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборыСвойств.Набор,
	|	НаборыСвойств.ПорядокНабора,
	|	СвойстваНаборов.Свойство,
	|	СвойстваНаборов.ПометкаУдаления,
	|	СвойстваНаборов.НомерСтроки КАК ПорядокСвойства
	|ПОМЕСТИТЬ СвойстваНаборов
	|ИЗ
	|	НаборыСвойств КАК НаборыСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК СвойстваНаборов
	|		ПО (СвойстваНаборов.Ссылка = НаборыСвойств.Набор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|		ПО (СвойстваНаборов.Свойство = Свойства.Ссылка)
	|ГДЕ
	|	НЕ СвойстваНаборов.ПометкаУдаления
	|	И НЕ Свойства.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Свойства.Ссылка КАК Свойство
	|ПОМЕСТИТЬ ЗаполненныеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|ГДЕ
	|	Свойства.Ссылка В(&Свойства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвойстваНаборов.Набор,
	|	СвойстваНаборов.ПорядокНабора,
	|	СвойстваНаборов.Свойство,
	|	СвойстваНаборов.ПорядокСвойства,
	|	СвойстваНаборов.ПометкаУдаления КАК Удалено
	|ПОМЕСТИТЬ ВсеСвойства
	|ИЗ
	|	СвойстваНаборов КАК СвойстваНаборов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка),
	|	0,
	|	ЗаполненныеСвойства.Свойство,
	|	0,
	|	ИСТИНА
	|ИЗ
	|	ЗаполненныеСвойства КАК ЗаполненныеСвойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваНаборов КАК СвойстваНаборов
	|		ПО ЗаполненныеСвойства.Свойство = СвойстваНаборов.Свойство
	|ГДЕ
	|	СвойстваНаборов.Свойство ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеСвойства.Набор,
	|	ВсеСвойства.Свойство,
	|	ДополнительныеРеквизитыИСведения.ВладелецДополнительныхЗначений,
	|	ДополнительныеРеквизитыИСведения.ЗаполнятьОбязательно,
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК Наименование,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.ФорматСвойства,
	|	ДополнительныеРеквизитыИСведения.МногострочноеПолеВвода,
	|	ВсеСвойства.Удалено КАК Удалено,
	|	ДополнительныеРеквизитыИСведения.Доступен,
	|	ДополнительныеРеквизитыИСведения.Виден,
	|	ДополнительныеРеквизитыИСведения.ЗависимостиДополнительныхРеквизитов.(
	|		ЗависимоеСвойство,
	|		Реквизит,
	|		Условие,
	|		Значение
	|	)
	|ИЗ
	|	ВсеСвойства КАК ВсеСвойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО ВсеСвойства.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Удалено,
	|	ВсеСвойства.ПорядокНабора,
	|	ВсеСвойства.ПорядокСвойства";
	
	Если ЭтоДополнительноеСведение Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты",
			"Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
	КонецЕсли;
	
	ОписаниеСвойств = Запрос.Выполнить().Выгрузить();
	ОписаниеСвойств.Индексы.Добавить("Свойство");
	ОписаниеСвойств.Колонки.Добавить("Значение");
	
	// Удаление дублей свойств в нижестоящих наборах свойств.
	Индекс = ОписаниеСвойств.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = ОписаниеСвойств[Индекс];
		НайденнаяСтрока = ОписаниеСвойств.Найти(Строка.Свойство);
		
		Если НайденнаяСтрока <> Неопределено
		   И НайденнаяСтрока <> Строка Тогда
			
			ОписаниеСвойств.Удалить(Индекс);
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
	// Заполнение значений свойств.
	Для Каждого Строка Из ДополнительныеСвойстваОбъекта Цикл
		ОписаниеСвойства = ОписаниеСвойств.Найти(Строка.Свойство, "Свойство");
		Если ОписаниеСвойства <> Неопределено Тогда
			// Поддержка строк неограниченной длины.
			Если НЕ ЭтоДополнительноеСведение
			   И УправлениеСвойствамиСлужебный.ИспользоватьНеограниченнуюСтроку(
			         ОписаниеСвойства.ТипЗначения, ОписаниеСвойства.МногострочноеПолеВвода)
			   И НЕ ПустаяСтрока(Строка.ТекстоваяСтрока) Тогда 
				
				ОписаниеСвойства.Значение = Строка.ТекстоваяСтрока;
			Иначе
				ОписаниеСвойства.Значение = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеСвойств;
	
КонецФункции

&НаСервере
Процедура ПолучитьСписокДоступныхРеквизитов()
	
	Элементы.bpmРеквизитОбъектаСтрокой.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда
		Если НЕ Объект.bpmВидОбъектаСтрокой = "CRM_Интерес" Тогда
			
			ОбъектМетаданных = Метаданные.Документы.Найти(Объект.bpmВидОбъектаСтрокой);
			Если ОбъектМетаданных = Неопределено Тогда
				ОбъектМетаданных = Метаданные.Справочники.Найти(Объект.bpmВидОбъектаСтрокой);
			КонецЕсли;
			
			Для Каждого МетаРекизит ИЗ ОбъектМетаданных.Реквизиты Цикл
				
				Если МетаРекизит.Тип.Типы().Количество() > 1 Тогда Продолжить; КонецЕсли;
				
				МетаОбъект = Метаданные.НайтиПоТипу(МетаРекизит.Тип.Типы()[0]);
				
				Если МетаОбъект = Неопределено тогда Продолжить; КонецЕсли;
				
				Если ОбщегоНазначения.ЭтоСправочник(МетаОбъект)
					ИЛИ ОбщегоНазначения.ЭтоПеречисление(МетаОбъект) Тогда
					
					Элементы.bpmРеквизитОбъектаСтрокой.СписокВыбора.Добавить(МетаРекизит.Имя,МетаРекизит.Представление());
					
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ОбъектМетаданных.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено Тогда
				
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
				
				КлючНазначения = Неопределено;
				НаборыСвойствОбъекта = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(МенеджерОбъекта.ПустаяСсылка(), КлючНазначения);
				
				Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
					НовыйОбъект = МенеджерОбъекта.СоздатьЭлемент();
				Иначе
					НовыйОбъект = МенеджерОбъекта.СоздатьДокумент();
				КонецЕслИ;
				
				ОписаниеСвойств = ЗначенияСвойств(
				НовыйОбъект.ДополнительныеРеквизиты.Выгрузить(),
				НаборыСвойствОбъекта,
				Ложь);
				Для Каждого СтрокаТаблицы ИЗ ОписаниеСвойств Цикл
					Если СтрокаТаблицы.Свойство.ЭтоДополнительноеСведение ИЛИ СтрокаТаблицы.Удалено ИЛИ НЕ СтрокаТаблицы.Виден Тогда Продолжить; КонецЕсли;
					
					Если СтрокаТаблицы.ТипЗначения.Типы().Количество() > 1 Тогда Продолжить; КонецЕсли;
					
					МетаОбъект = Метаданные.НайтиПоТипу(СтрокаТаблицы.ТипЗначения.Типы()[0]);
					
					Если МетаОбъект = Неопределено тогда Продолжить; КонецЕсли;
					
					Если ОбщегоНазначения.ЭтоСправочник(МетаОбъект)
						ИЛИ ОбщегоНазначения.ЭтоПеречисление(МетаОбъект) Тогда
						Элементы.bpmРеквизитОбъектаСтрокой.СписокВыбора.Добавить("%Свойство%"+Строка(СтрокаТаблицы.Свойство.УникальныйИдентификатор()),"Дополнительный реквизит: "+ СтрокаТаблицы.Наименование);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Элементы.bpmРеквизитОбъектаСтрокой.СписокВыбора.Добавить("СостояниеИнтереса","Состояние интереса");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаОбъекта()
	
	
	Модифицированность = Истина;
	
	ПолучитьСписокДоступныхРеквизитов();
	
	Если Элементы.bpmРеквизитОбъектаСтрокой.СписокВыбора.НайтиПоЗначению(Объект.bpmРеквизитОбъектаСтрокой) = Неопределено Тогда
		Объект.bpmРеквизитОбъектаСтрокой = "";
	КонецЕсли;
	
	Элементы.ГруппаОтборы.Видимость = ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой);
	
	АдресСхемыКомпоновкиДанных = "";
	АдресХранилищаНастройкиКомпоновщика = "";
	Если ЗначениеЗаполнено(Объект.bpmВидОбъектаСтрокой) Тогда
		ПолучитьСхемуИНастройкиКомпоновкиДанных();
		ОбновитьЭлементыОтбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура bpmВидОбъектаСтрокойПриИзменении(Элемент)
	
	ПриИзмененииВидаОбъекта();
	УстановитьСвойстваЭлементовПоТипу();
	
КонецПроцедуры

&НаКлиенте
Процедура bpmРеквизитОбъектаСтрокойПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УстановитьСвойстваЭлементовПоТипу();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиЭтапов()
	
	НаборРегистра = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Объект.Установить(Объект.Ссылка);
	НаборРегистра.Прочитать();
	
	Если НаборРегистра.Количество() > 0 Тогда
		
		ТабЗнач = НаборРегистра.Выгрузить();
		ТабЗнач.ЗаполнитьЗначения(Неопределено, "Состояние");
		
		НаборРегистра.Загрузить(ТабЗнач);
		НаборРегистра.записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ (Объект.bpmВидОбъектаСтрокой = bpmПредыдущийВидОбъектаСтрокой)
	ИЛИ НЕ (Объект.bpmРеквизитОбъектаСтрокой = bpmПредыущийРеквизитОбъектаСтрокой) Тогда
		
		ОбновитьНастройкиЭтапов();
		
		bpmПредыдущийВидОбъектаСтрокой = Объект.bpmВидОбъектаСтрокой;
		bpmПредыущийРеквизитОбъектаСтрокой = Объект.bpmРеквизитОбъектаСтрокой;
		
	КонецЕсли;
	
	//+Классификаторы
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
КонецПроцедуры

//+Классификаторы
#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
		
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)

	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_ТегиКлассификатора_Обновить()

#КонецОбласти
//-Классификаторы
