
&НаКлиенте
Перем СтрокаДереваМоделиВедущая;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//Модель кейса
		СтруктураМоделиКейса = CRM_УправлениеПроектамиСервер.СтруктураМоделиКейса(Объект.CRM_МодельКейса);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	Если СтруктураМоделиКейса.ИспользоватьКонтактнаяИнформация Тогда
		// СтандартныеПодсистемы.КонтактнаяИнформация
		CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация");
		// Конец СтандартныеПодсистемы.КонтактнаяИнформация
		
		РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
		УстановитьВидимостьРеквизитовКИ();
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	// Вычисляем, нужно ли показывать подсказку на вкладке "Дополнительные реквизиты".
	ПоказатьПодсказку = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ПоказыватьПодсказкуДопРеквизитыПроектов");
	Элементы.ДекорацияДополнительныхРеквизитов.Видимость = ?(ПоказатьПодсказку = Неопределено, Истина, ПоказатьПодсказку);
	
	//Данные регистров
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ПрочитатьТаблицыДанных(Параметры.ЗначениеКопирования);	
	КонецЕсли;
	
	Если СтруктураМоделиКейса.ИспользоватьКалендарныеГрафики Тогда
		Элементы.СтраницыОтображения.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			КалендарныеГрафикиПриЧтенииСозданииНаСервере(); 	
			
		КонецЕсли;
		
	КонецЕсли;	
	
	//Инициализация
	ИнициализироватьФормуПоМоделиКейса();
	
	Если СтруктураМоделиКейса.ИспользоватьСвязанныхПартнеров 
	  ИЛИ СтруктураМоделиКейса.ИспользоватьСвязанныеТорговыеТочки Тогда
	  
		Если Параметры.Свойство("МассивКлиентов") Тогда
			Для каждого Клиент Из Параметры.МассивКлиентов Цикл
				СтрокаТЧ = ТаблицаКлиентов.Добавить();
				Если ТипЗнч(Клиент) = Тип("СправочникСсылка.Партнеры") Тогда
					СтрокаТЧ.Партнер = Клиент;
				ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
					СтрокаТЧ.ТорговаяТочка = Клиент;
					СтрокаТЧ.Партнер 	   = Клиент.Партнер;
					
				КонецЕсли;
				
			КонецЦикла;	
		
		КонецЕсли;
		
	КонецЕсли;
	
	//Анкетирование
	Если СтруктураМоделиКейса.ИспользоватьСвязанныхПартнеров Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокАнкет,
			"Проект",
		   	?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокАнкет,
			"ВариантОпроса",
		   	Неопределено);
			
	КонецЕсли;
		
	УстановитьЗаголовок(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//Модель кейса
	СтруктураМоделиКейса = CRM_УправлениеПроектамиСервер.СтруктураМоделиКейса(Объект.CRM_МодельКейса);
		
	Если СтруктураМоделиКейса.ИспользоватьКонтактнаяИнформация Тогда
		// СтандартныеПодсистемы.КонтактнаяИнформация
		CRM_УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		// Конец СтандартныеПодсистемы.КонтактнаяИнформация
		
	КонецЕсли;
	
	//Данные регистров
	ПрочитатьТаблицыДанных(ТекущийОбъект);
	
	Если СтруктураМоделиКейса.ИспользоватьКалендарныеГрафики Тогда
		КалендарныеГрафикиПриЧтенииСозданииНаСервере(); 	
		
	КонецЕсли;	
	
	Если СтруктураМоделиКейса.ИспользоватьМеханизмКлассификаторов Тогда
		//+Классификаторы
		CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
		//-Классификаторы
		
	КонецЕсли;
	
	//Статус согласования
	Если СтруктураМоделиКейса.ИспользоватьСтатусыСогласования Тогда
		ОписаниеСтатуса = вогОбщегоНазначения.ПолучитьОписаниеСтатусаСогласованияОбъекта(ТекущийОбъект.Ссылка);
		СтатусСогласования = ОписаниеСтатуса.Статус;
		РегистраторСтатуса = ОписаниеСтатуса.РегистраторСтатуса;
	КонецЕсли;
	
	//+ск
	скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	//-ск
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	Если СтруктураМоделиКейса.ИспользоватьКонтактнаяИнформация Тогда
		// СтандартныеПодсистемы.КонтактнаяИнформация
		CRM_УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
		// Конец СтандартныеПодсистемы.КонтактнаяИнформация
		
	Иначе
		ТекущийОбъект.КонтактнаяИнформация.Очистить();		
		
	КонецЕсли;
	
	//Календарные графики
	ТекущийОбъект.ЭтапыРабот.Очистить();
	ТекущийОбъект.СвязиЭтапов.Очистить();
	ТекущийОбъект.ЗависимостиЭтапов.Очистить();
	
	Если СтруктураМоделиКейса.ИспользоватьКалендарныеГрафики Тогда
		ЗаписатьДанныеМоделиПроцессов(ТекущийОбъект);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьЗаголовок(ЭтотОбъект);
	
	Если СтруктураМоделиКейса.ИспользоватьМеханизмКлассификаторов Тогда
		//+Классификаторы
		CRM_КлассификаторыВызовСервера.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
		CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
		//-Классификаторы
		
	КонецЕсли;
	
	//Данные регистров
	ЗаписатьТаблицыДанных(ТекущийОбъект);
	
	//Анкетирование
	Если СтруктураМоделиКейса.ИспользоватьСвязанныхПартнеров Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокАнкет,
			"Проект",
		   	ТекущийОбъект.Ссылка);
			
	КонецЕсли;
	
	//+ск
	скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	//-ск
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если СтруктураМоделиКейса.ИспользоватьСтатусыСогласования Тогда	
		Если ИмяСобытия = "Запись_БизнесПрцесса" 
		  И Параметр.Предмет = Объект.Ссылка Тогда
			ОбновитьДанныеСтатусаСогласования();
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.CRM_ЭтапКалендарногоПлана") Тогда
		ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Контекст = Новый Структура;		
		Контекст.Вставить("ЭлементыДерева", ТекущиеДанные.ПолучитьЭлементы());
		
		ДобавитьЭтапКонтрольнуюТочкуЗавершение(НовыйОбъект, Контекст);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ПостановкаЗадач

&НаКлиенте
Процедура СоздатьПоручениеКлиенты(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаКлиентов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран клиент. '"));
		Возврат;
	
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Партнер"      , ТекущиеДанные.Партнер);
	ЗначенияЗаполнения.Вставить("ТорговаяТочка", ТекущиеДанные.ТорговаяТочка);
	
	СтруктураОснования = Новый Структура("Основание, КартаМаршрута", ЗначенияЗаполнения, ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
	ПараметрыФормы = Новый Структура("Основание", СтруктураОснования);
	
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения",
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМероприятиеКлиенты(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаКлиентов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран клиент. '"));
		Возврат;
	
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Партнер"      , ТекущиеДанные.Партнер);
	ЗначенияЗаполнения.Вставить("ТорговаяТочка", ТекущиеДанные.ТорговаяТочка);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.CRM_Мероприятие.ФормаОбъекта",
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры
	
#КонецОбласти

#Область КалендарныеГрафики

&НаКлиенте
Процедура ДобавитьЭтап(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", 
		ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры // ДобавитьЭтап()

&НаКлиенте
Процедура ДобавитьКонтрольнуюТочку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", 
		ЭтотОбъект, Новый Структура("ИмяКоманды", Команда.Имя));
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭтапКонтрольнуюТочку(Команда)
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
		Возврат;	
	
	КонецЕсли;
	
	МассивИдентификаторовУдаляемыхСтрок = Новый Массив;
	МассивИдентификаторовУдаляемыхСтрок.Добавить(ТекущиеДанные.ИдентификаторСтроки);
	
	ЗаполнитьМассивИдентификаторовУдаляемыхСтрокРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), МассивИдентификаторовУдаляемыхСтрок);
			
	Для каждого ИдентификаторСтроки Из МассивИдентификаторовУдаляемыхСтрок Цикл
		ОчиститьЗависимостиСвязиЭтапаРекурсивно(ДеревоМодели.ПолучитьЭлементы(), ИдентификаторСтроки);
		
	КонецЦикла;
	
	ОбластьУдаления = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, ДеревоМодели.ПолучитьЭлементы(), ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы());
	ОбластьУдаления.Удалить(ТекущиеДанные);
		
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		
		ИницализироватьТабличныйДокументМодели();
		Для каждого СтрокаДерева Из ЭлементыДерева Цикл
			ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтаФорма, СтрокаДерева.ПолучитьЭлементы());
			
			ОбновитьДиаграмму(ЭтаФорма);
			
		КонецЦикла;
		
		ТекущаяОбласть = Элементы.ТабличныйДокументМодели.ТекущаяОбласть;
		Если ТекущаяОбласть.Низ > 2 Тогда
			СтрокаОбласти = "R" + Формат(ТекущаяОбласть.Низ, "ЧН=0; ЧГ=");
			ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C7");		
			
			Элементы.ДеревоМодели.ТекущаяСтрока = ОбластьИдентификатора.Расшифровка;
			ПодключитьОбработчикОжидания("Подключаемый_ДеревоМоделиПриАктивизацииСтроки", 0.1, Истина);
			
		КонецЕсли;
		
		УстановитьВидимостьКолонок(ЭтаФорма);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено
		  И ЗначениеЗаполнено(ТекущиеДанные.Этап) Тогда
		  Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
			  Попытка
			  	РисунокСвернутьРазвернуть = ТабличныйДокументМодели.Рисунки[ТекущиеДанные.АдресСтрокиОбласти + "_Развернуть"];
				РисунокСвернутьРазвернуть.Картинка = БиблиотекаКартинок.CRM_Свернтуь;
			    РисунокСвернутьРазвернуть.Имя      = ТекущиеДанные.АдресСтрокиОбласти + "_Свернуть";
				
			  Исключение
			  КонецПопытки;
				
			КонецЕсли;
		  
			СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), Истина);	
		   	СвернутьРазвернутьТочкуДиаграммы(ЭтаФорма, ТекущиеДанные.ИдентификаторСтроки, Истина);
			
		КонецЕсли;
	Иначе
		РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено
		  И ЗначениеЗаполнено(ТекущиеДанные.Этап) Тогда
		  	Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
	        	Попытка
				  	РисунокСвернутьРазвернуть = ТабличныйДокументМодели.Рисунки[ТекущиеДанные.АдресСтрокиОбласти + "_Свернуть"];
					РисунокСвернутьРазвернуть.Картинка = БиблиотекаКартинок.CRM_Развернуть;
				    РисунокСвернутьРазвернуть.Имя      = ТекущиеДанные.АдресСтрокиОбласти + "_Развернуть";
					
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), Ложь);	
		   	СвернутьРазвернутьТочкуДиаграммы(ЭтаФорма, ТекущиеДанные.ИдентификаторСтроки, Ложь);
			
		КонецЕсли;
	Иначе
		РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели", Ложь);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьЭтап(Команда)
	СвязатьЭтапДерева();
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязьЭтапа(Команда)
	РазорватьСвязьЭтапаДерева();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСвязиЭтапа(Команда)
	ПерейтиКРежимуРедактированияСвязей();
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОбИсполнителях(Команда)
		
	Элементы.ИнформацияОбИсполнителях.Пометка = Не Элементы.ИнформацияОбИсполнителях.Пометка;
	ЗначениеВидимости = Элементы.ИнформацияОбИсполнителях.Пометка;	
	
	Элементы.ГруппаИсполнителиЭтапов.Видимость = ЗначениеВидимости;

КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОСвязяхЗависимостях(Команда)
	
	Элементы.ИнформацияОСвязяхЗависимостях.Пометка = Не Элементы.ИнформацияОСвязяхЗависимостях.Пометка;
	ЗначениеВидимости = Элементы.ИнформацияОСвязяхЗависимостях.Пометка;	
	
	Элементы.ГруппаСвязиЗависимости.Видимость = ЗначениеВидимости;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДиаграммуГанта(Команда)
		
	Элементы.ОтображатьДиаграммуГанта.Пометка 				   = Не Элементы.ОтображатьДиаграммуГанта.Пометка;
	Элементы.ПолосаРегулированияШириныДиаграммыГанта.Видимость = Элементы.ОтображатьДиаграммуГанта.Пометка;
	
	ОбновитьДиаграмму(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПоМоделиПроцесса(Команда)
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеКлассификаторы

&НаКлиенте
Процедура ЗаполнитьПоКлассификацииТаблицаКлиентов(Команда)

	СписокВариантов = Новый СписокЗначений;
	Если СтруктураМоделиКейса.ИспользоватьСвязанныхПартнеров Тогда
		СписокВариантов.Добавить("ФормаПартнеров"    , НСтр("ru = 'Классификация клиентов'"));	
	КонецЕсли;
	
	Если СтруктураМоделиКейса.ИспользоватьСвязанныеТорговыеТочки Тогда
		СписокВариантов.Добавить("ФормаТорговыхТочек", НСтр("ru = 'Классификация торговых точек'"));	
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоКлассификацииЗавершение", ЭтотОбъект, Элементы.ТаблицаКлиентов);
	Если СписокВариантов.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(Оповещение, СписокВариантов[0]); 
	Иначе	
		СписокВариантов.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выберите вариант заполнения'"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКлассификацииТаблицаНоменклатура(Команда)
	
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("ФормаНоменклатура", НСтр("ru = 'Классификация номенклатуры'"));	
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоКлассификацииЗавершение", ЭтотОбъект, Элементы.ТаблицаНоменклатура);
	ВыполнитьОбработкуОповещения(Оповещение, СписокВариантов[0]); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКлассификацииТаблицаКоллекции(Команда)
	
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("ФормаКоллекцииНоменклатуры", НСтр("ru = 'Классификация коллекций'"));	
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоКлассификацииЗавершение", ЭтотОбъект, Элементы.ТаблицаКоллекции);
	ВыполнитьОбработкуОповещения(Оповещение, СписокВариантов[0]); 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияДополнительныхРеквизитовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ПоказыватьПодсказкуДопРеквизитыПроектов", Ложь);
	Элементы.ДекорацияДополнительныхРеквизитов.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	ОтветственныйПриИзмененииСервер();	
КонецПроцедуры

#Область ЗаполнениеКлассификаторы

&НаКлиенте
Процедура ТаблицаКлиентыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораТаблицы(Элемент.Имя, ВыбранноеЗначение, СтандартнаяОбработка);		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораТаблицы(Элемент.Имя, ВыбранноеЗначение, СтандартнаяОбработка);		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКоллекцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораТаблицы(Элемент.Имя, ВыбранноеЗначение, СтандартнаяОбработка);		
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

&НаКлиенте
Процедура РедактироватьКонтактныеДанныеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РедактироватьДР Тогда
		РедактироватьКонтактныеДанные = НСтр("ru = 'Скрыть дополнительные контактные данные'");
		РедактироватьДР = Истина;
	Иначе
		РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
		РедактироватьДР = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовКИ();
	
КонецПроцедуры

#КонецОбласти

#Область КалендарныеГрафики

&НаКлиенте
Процедура РежимОтображенияПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключамеый_РежимОтображенияПриИзменении", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаНачалаПриИзменении(Элемент)

	Если РежимРедактированияМодели = "Графически" Тогда
		ОбновитьДиаграмму(ЭтаФорма);
		
	КонецЕсли;	
	
КонецПроцедуры

#Область РаботаСДеревомМодели

&НаКлиенте
Процедура ДеревоМоделиПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ДеревоМоделиПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	Отказ = Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки);
	Если Не Отказ 
	  И РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
	  
		ИницализироватьТабличныйДокументМодели();
		Для каждого СтрокаДерева Из ЭлементыДерева Цикл
			ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтаФорма, СтрокаДерева.ПолучитьЭлементы());
			
			ОбновитьДиаграмму(ЭтаФорма);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	ДанныеСтрокиПриемник = Элемент.ДанныеСтроки(Строка);
	Если ДанныеСтрокиПриемник = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;
	
	Если ДанныеСтрокиПриемник.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиТипСвязиПриИзменении(Элемент)
	СвязатьЭтапДерева();	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиОтсрочкаДнейПриИзменении(Элемент)
	СвязатьЭтапДерева();	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиИсполнителиПриИзменении(Элемент)
	ПеренестиИзмененныеДанныеЭтапа();	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	Отказ = Не ЗначениеЗаполнено(ТекущиеДанные.Этап);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПодразделениеПриИзменении(Элемент)
	ПеренестиИзмененныеДанныеЭтапа();	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПродолжительностьДнейПриИзменении(Элемент)
	ПеренестиИзмененныеДанныеЭтапа();	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТабличнымДокументомМодели

&НаКлиенте
Процедура ТабличныйДокументМоделиПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	Если ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		Если ТекущаяОбласть.Имя = "ДиаграммаГанта" Тогда
			Элемент.Редактирование  = Ложь;
			Возврат;
					
		Иначе
			Если Не Элемент.Редактирование Тогда
				Элемент.Редактирование  = Истина;
			КонецЕсли;
			
			МассивИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяОбласть.Имя, "_");
			СтрокаОбласти = МассивИмени[0];
			ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C7");	
			
			Элементы.ДеревоМодели.ТекущаяСтрока = ОбластьИдентификатора.Расшифровка;
			
			Если СтрНайти(ТекущаяОбласть.Имя, "ТипЭтапа") > 0 Тогда
				Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ТабличныйДокументМодели.Область(СтрокаОбласти + "C1");
				
				Возврат;
			КонецЕсли;
			
			ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				Если СтрНайти(ТекущаяОбласть.Имя, "Свернуть") > 0 Тогда
					Картинка = БиблиотекаКартинок.CRM_Развернуть;
					СуффиксИмени = "Развернуть";
				Иначе	
					Картинка = БиблиотекаКартинок.CRM_Свернтуь;
					СуффиксИмени = "Свернуть";
				КонецЕсли;
			
				ТекущаяОбласть.Имя = СтрокаОбласти + "_" + СуффиксИмени;
				ТекущаяОбласть.Картинка = Картинка;	
				
				СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), СуффиксИмени = "Свернуть");
				СвернутьРазвернутьТочкуДиаграммы(ЭтаФорма, ТекущиеДанные.ИдентификаторСтроки, СуффиксИмени = "Свернуть");
				
				Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ТабличныйДокументМодели.Область(СтрокаОбласти + "C1");
				
			КонецЕсли;
			
		КонецЕсли;		
		
	Иначе	
		Если Не Элемент.Редактирование Тогда
			Элемент.Редактирование = Истина;

		КонецЕсли;
		
		Если ТекущаяОбласть.Низ < 3 Тогда
			Элементы.ДеревоМодели.ТекущаяСтрока = ДеревоМодели.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			
		Иначе	
			СтрокаОбласти = "R" + Формат(ТекущаяОбласть.Низ, "ЧН=0; ЧГ=");
			ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C7");		
			
			Элементы.ДеревоМодели.ТекущаяСтрока = ОбластьИдентификатора.Расшифровка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ДеревоМоделиПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиПриИзменении(Элемент)
	ПеренестиДанныеТабличногоДокументаМодели(Элемент.ТекущаяОбласть);
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиВыбор(Элемент, Область, СтандартнаяОбработка)

	Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") Тогда
		СтандартнаяОбработка = Ложь;	
		Возврат;
		
	КонецЕсли;
	
	Если Область.Низ <= 2 Тогда
		СтандартнаяОбработка = Ложь;	
		
	КонецЕсли;	
		
	Если Область.Лево >= 1 Тогда
		СтрокаОбласти = "R" + Формат(Область.Низ, "ЧН=0; ЧГ=");
		ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C7");
		Если ОбластьИдентификатора.Расшифровка = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		
		КонецЕсли;
		
		ДанныеСтрокиДерева = ДеревоМодели.НайтиПоИдентификатору(ОбластьИдентификатора.Расшифровка);
		Если ДанныеСтрокиДерева = Неопределено Тогда
			Возврат;
			
		КонецЕсли;
		
		Если ДанныеСтрокиДерева.Этап = ЭтапВедущий Тогда
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если Область.Лево = 1 Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.ФормаОбъекта", 
				Новый Структура("Ключ", ДанныеСтрокиДерева.Этап), ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли Область.Лево = 4
		  И ДанныеСтрокиДерева.Зависимости.Количество() > 0 Тогда
			СтандартнаяОбработка = Ложь;
		
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	СтандартнаяОбработка = ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПолосаРегулированияШириныДиаграммыГантаПриИзменении(Элемент)
	
	ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];	
	ДиаграммаОбъект = ДиаграммаРисунок.Объект;
	
	ДиаграммаОбъект.Обновление = Ложь;
	ТабличныйДокументМодели.Область(, 9, ,9).ШиринаКолонки = ПолосаРегулированияШириныДиаграммыГанта;
	
	ДиаграммаОбъект.Обновление = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Анкетирование

&НаКлиенте
Процедура ТаблицаШаблоныАнкетПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ШаблоныАнкетПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокАнкетПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Элемент", Элемент);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СвязанныеОбъектыПередНачаломДобавленияЗавершение", ЭтотОбъект, ПараметрыОповещения);	
	СвязанныеОбъектыПередНачаломДобавления(ОписаниеОповещения, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеОбъектыПередНачаломДобавления(ВыполняемоеОповещение, Отказ)
	
	Если Объект.Ссылка.Пустая() Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
                             |Добавление связанных объектов возможно только после записи данных.
                             |Данные будут записаны.'");
		
		ПоказатьВопрос(ВыполняемоеОповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
		
КонецПроцедуры // СвязанныеОбъектыПередНачаломДобавленияФрагмент()

&НаКлиенте
Процедура СвязанныеОбъектыПередНачаломДобавленияЗавершение(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
	
	//Контекст.Элемент.ДобавитьСтроку();
	//Контекст.Элемент.ИзменитьСтроку();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СтатусСогласования

&НаКлиенте
Процедура СтатусСогласованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;			
	вогОбщегоНазначенияКлиент.ОбработкаНажатияСтатусаСогласования(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр(	"ru = 'Данные еще не записаны.
								|Редактирование возможно только после записи данных.
								|Данные будут записаны.'"), РежимДиалогаВопрос.ОКОтмена);

	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
			
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
			
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#Область КалендарныеГрафики

&НаКлиенте
Процедура Подключаемый_ДеревоМоделиПриАктивизацииСтроки()
	УстановитьДоступностьКоманд();
КонецПроцедуры // Подключаемый_ДеревоМоделиПриАктивизацииСтроки()

&НаКлиенте
Процедура Подключамеый_РежимОтображенияПриИзменении()
	
	УстановитьРежимРедактирования(ЭтаФорма);
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");	
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		
		ИницализироватьТабличныйДокументМодели();
		Для каждого СтрокаДерева Из ЭлементыДерева Цикл
			ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтаФорма, СтрокаДерева.ПолучитьЭлементы());
			
			ОбновитьДиаграмму(ЭтаФорма);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимостьКолонок(ЭтаФорма);
	
КонецПроцедуры // Подключамеый_РежимОтображенияПриИзменении()

&НаКлиенте
Процедура ДобавитьЭтапЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ДобавитьЭтапКонтрольнуюТочку(ПараметрыВыполнения.ИмяКоманды);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЭтапЗавершение()

&НаКлиенте
Процедура ДобавитьЭтапКонтрольнуюТочкуЗавершение(ЗначениеВыбора, Контекст) Экспорт
	
	НоваяСтрока	= Контекст.ЭлементыДерева.Добавить();	
	НоваяСтрока.Этап = ЗначениеВыбора;	
	
	ДанныеЭтапа = ПолучитьСтруктуруДанныхЭтапа(ЗначениеВыбора);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЭтапа);
	
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	
	ЗаполнитьИндексКартинки(НоваяСтрока);
			
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");	
	Элементы.ДеревоМодели.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		
		ИницализироватьТабличныйДокументМодели();
		Для каждого СтрокаДерева Из ЭлементыДерева Цикл
			ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтаФорма, СтрокаДерева.ПолучитьЭлементы(), Элементы.ДеревоМодели.ТекущаяСтрока);
			
			ОбновитьДиаграмму(ЭтаФорма);
			
		КонецЦикла;
				
		УстановитьВидимостьКолонок(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЭтапКонтрольнуюТочкуЗавершение()

#КонецОбласти

#Область Анкетирование

&НаКлиенте
Процедура Подключаемый_ШаблоныАнкетПриАктивизацииСтроки()

	ТекущиеДанные = Элементы.ТаблицаШаблоныАнкет.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокАнкет,
		"ВариантОпроса",
	   	ТекущиеДанные.ВариантОпроса);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОтветственныйПриИзмененииСервер()

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Подразделение");
	СтруктураРеквизитов.Вставить("CRM_НаправлениеДеятельности");
	
	РеквизитыОтветственный = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ответственный, СтруктураРеквизитов);
	
	Объект.CRM_Подразделение = РеквизитыОтветственный.Подразделение;
	Объект.CRM_Направление   = РеквизитыОтветственный.CRM_НаправлениеДеятельности;

КонецПроцедуры // ОтветственныйПриИзмененииСервер()

&НаСервере
Процедура УстановитьВидимостьРеквизитовКИ()
	
	флагВыводаГиперСсылки = Ложь;
	СтруктураОтбора		= Неопределено;
	СтруктураОтбора		= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.CRM_СправочникПроектыКейс, Ложь);
	
	МассивСтрок = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора);
	
	флагВыводаГиперСсылки = НЕ (МассивСтрок.Количество() = 0);
	
	Для Каждого СтрокаДопРеквизита Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			флаг_1 = НЕ (ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита] = "<адрес сайта не указан>");
		Иначе	
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]);
		КонецЕсли;
		
		Для Каждого СтрокаДобавленногоРеквизита ИЗ ЭтотОбъект.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы Цикл
			Если СтрокаДобавленногоРеквизита.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(СтрокаДобавленногоРеквизита.Значение, СтрокаДопРеквизита.ИмяРеквизита) Тогда
				СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить");
				Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = ((СтрокаДопРеквизита.Выводить И НЕ СкрыватьПолеКИ) ИЛИ (РедактироватьДР ИЛИ флаг_1));
			КонецЕсли;
		КонецЦИкла;
		
		Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт Тогда
		
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= Новый Цвет();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= Новый Шрифт();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Истина;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "";
			
			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
				
				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].Высота = 5;
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].МногострочныйРежим = Истина;
				КонецЕсли;
				
				Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
					
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора				= истина;
					// ++ VOG Солодов В.В. 02.03.2020 CRM-196
					Если СтрокаДопРеквизита.Вид.ВидРедактирования = "Диалог" Тогда
					// До изменения
					//Если СтрокаДопРеквизита.Вид.РедактированиеТолькоВДиалоге Тогда
					// -- VOG Солодов В.В. 02.03.2020
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].WebЦвета				= WebЦвета.Кремовый;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ИмяРеквизита = Элементы[СтрокаДопРеквизита.ИмяРеквизита].Имя;
			АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
			Если ПустаяСтрока(АдресСайтаКомпании) Тогда
				ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.РедактироватьКонтактныеДанные.Видимость = флагВыводаГиперСсылки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовок(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Кейс: %1 (создание)'"),
			Объект.CRM_МодельКейса);
			
	Иначе
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Кейс: %2)'"),
			Объект.Наименование, Объект.CRM_МодельКейса);
			
	КонецЕсли;

	Форма.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФормуПоМоделиКейса()

	Элементы.CRM_БизнесРегион.Видимость	   			   = СтруктураМоделиКейса.ИспользоватьБизнесРегион;
	Элементы.ГруппаОтветственные.Видимость			   = СтруктураМоделиКейса.ИспользоватьОтветственныеМенеджеры;
	Элементы.ГруппаКонтактнаяИнформацияОбщая.Видимость = СтруктураМоделиКейса.ИспользоватьКонтактнаяИнформация;
	
	Элементы.CRM_Партнер.Видимость 		   			   = СтруктураМоделиКейса.ИспользоватьКонтактныеЛица;
	Элементы.CRM_КонтактноеЛицоПартнера.Видимость 	   = СтруктураМоделиКейса.ИспользоватьКонтактныеЛица;
	Элементы.ГруппаКонтактныеЛица.Видимость 	       = СтруктураМоделиКейса.ИспользоватьКонтактныеЛица;
	
	Элементы.СформироватьПоМоделиПроцесса.Видимость    = СтруктураМоделиКейса.ИспользоватьМоделиПроцессов;
	
	Элементы.ГруппаКалендарныеГрафики.Видимость    	   = СтруктураМоделиКейса.ИспользоватьКалендарныеГрафики;
	Элементы.ГруппаДатыДеятельность.Видимость    	   = СтруктураМоделиКейса.ИспользоватьКалендарныеГрафики или СтруктураМоделиКейса.ИспользоватьПериодПроекта;
	Элементы.ГруппаОписание.Видимость                  = СтруктураМоделиКейса.ИспользоватьОписание;
	Элементы.CRM_Классификаторы.Видимость    	   	   = СтруктураМоделиКейса.ИспользоватьМеханизмКлассификаторов;
	
	Элементы.ГруппаКлиенты.Видимость                   = СтруктураМоделиКейса.ИспользоватьСвязанныхПартнеров ИЛИ СтруктураМоделиКейса.ИспользоватьСвязанныеТорговыеТочки;
	Элементы.ТаблицаКлиентыПартнер.Видимость           = СтруктураМоделиКейса.ИспользоватьСвязанныхПартнеров;
	Элементы.ТаблицаКлиентыТорговаяТочка.Видимость     = СтруктураМоделиКейса.ИспользоватьСвязанныеТорговыеТочки;
	Элементы.ГруппаПланДоходов.Видимость               = СтруктураМоделиКейса.ИспользоватьПланПродаж;
	Элементы.ГруппаПланРасходов.Видимость              = СтруктураМоделиКейса.ИспользоватьПланРасходовПоПроекту;
	
	//+вог
	Элементы.ГруппаНоменклатура.Видимость    	   	   = СтруктураМоделиКейса.ИспользоватьСвязаннуюНоменклатуру;
	Элементы.ГруппаКоллекции.Видимость    	           = СтруктураМоделиКейса.ИспользоватьСвязаннуюНоменклатуру;
	Элементы.ТаблицаКлиентовГруппаСоздать.Видимость    = СтруктураМоделиКейса.ИспользоватьПостановкуЗадачНаСписокКлиентов;
	Элементы.СтатусСогласования.Видимость    	       = СтруктураМоделиКейса.ИспользоватьСтатусыСогласования;
	Элементы.ГруппаАнкетирование.Видимость    	   	   = СтруктураМоделиКейса.ИспользоватьАнкетирование;
	//-вог
	
КонецПроцедуры // ИнициализироватьФормуПоМоделиКейса()

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	Если СтруктураМоделиКейса.ИспользоватьКалендарныеГрафики Тогда
		CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "РежимРедактированияМодели", РежимРедактированияМодели);	
		
	КонецЕсли;
	
КонецПроцедуры

#Область КалендарныеГрафики

&НаСервере
Процедура КалендарныеГрафикиПриЧтенииСозданииНаСервере()

	СоответствиеКоллекцииКартинок = Новый Соответствие;
	СоответствиеКоллекцииКартинок.Вставить(1, БиблиотекаКартинок.CRM_ЭтапПроцесса);
	СоответствиеКоллекцииКартинок.Вставить(0, БиблиотекаКартинок.CRM_ЭтапПроцессаСвязи);
	СоответствиеКоллекцииКартинок.Вставить(3, БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроцесса);
	СоответствиеКоллекцииКартинок.Вставить(2, БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроцессаСвязи);
	
	СоответствиеКоллекцииКартинокТипаЭтапа = Новый ФиксированноеСоответствие(СоответствиеКоллекцииКартинок);
	
	ЦветИнтервалаКонтрольнойТочки = ЦветаСтиля.CRM_ЦветИнтервалаКонтрольнойТочки;
	ЦветИнтервалаЭтапа		      = ЦветаСтиля.CRM_ЦветИнтервалаЭтапа;
	
	времРежимРедактированияМодели = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "РежимРедактированияМодели");
	РежимРедактированияМодели = ?(времРежимРедактированияМодели = Неопределено, "Дерево", времРежимРедактированияМодели);
	
	ПрочитатьДанныеМоделиПроцесса();
	УстановитьРежимРедактирования(ЭтаФорма);		
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();

		ИницализироватьТабличныйДокументМодели();
		Для каждого СтрокаДерева Из ЭлементыДерева Цикл
			ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтаФорма, СтрокаДерева.ПолучитьЭлементы());
			
			ОбновитьДиаграмму(ЭтаФорма);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимостьКолонок(ЭтаФорма);
	
КонецПроцедуры // КалендарныеГрафикиПриЧтенииСозданииНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимРедактирования(Форма)
	
	Форма.Элементы.СтраницыОтображения.ТекущаяСтраница = Форма.Элементы[Форма.РежимРедактированияМодели];
	
	Форма.Элементы.ОтображатьДиаграммуГанта.Видимость 				 = Форма.РежимРедактированияМодели = "Графически";
	Форма.Элементы.ПолосаРегулированияШириныДиаграммыГанта.Видимость = Форма.РежимРедактированияМодели = "Графически";
	
КонецПроцедуры // УстановитьРежимРедактирования()

&НаСервере
Процедура ПрочитатьДанныеМоделиПроцесса()
			
	ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	СтрокаДерева = ЭлементыДерева.Добавить();
	СтрокаДерева.ИндексКартинки = -1;
	
	ПрочитатьСтрокиЭтаповРекурсивно(СтрокаДерева.ПолучитьЭлементы());
	
КонецПроцедуры // ПрочитатьДанныеМоделиПроцесса()

&НаСервере
Процедура ЗаписатьДанныеМоделиПроцессов(ТекущийОбъект)
		
	Для каждого СтрокаДерева Из ДеревоМодели.ПолучитьЭлементы() Цикл
		ЗаписатьСтрокиЭтаповРекурсивно(ТекущийОбъект, СтрокаДерева.ПолучитьЭлементы());
			
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьДанныеМоделиПроцессов()

&НаКлиенте
Процедура ПерейтиКРежимуРедактированияСвязей()

	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Этап) Тогда
		Возврат;
	
	КонецЕсли;
	
	Элементы.РедактироватьСвязьЭтапов.Пометка = Не Элементы.РедактироватьСвязьЭтапов.Пометка;
	 
	РежимРедактированияСвязей	= Элементы.РедактироватьСвязьЭтапов.Пометка; 
	Элементы.ГруппаСвязи.Доступность = РежимРедактированияСвязей;
		
	Если РежимРедактированияСвязей Тогда
		СтрокаДереваМоделиВедущая  = ТекущиеДанные;
		ИдентификаторСтрокиВедущий = ТекущиеДанные.ИдентификаторСтроки;
		ЭтапВедущий				   = ТекущиеДанные.Этап;

	Иначе	
		СтрокаДереваМоделиВедущая  = Неопределено;
		ИдентификаторСтрокиВедущий = Неопределено;
		ЭтапВедущий				   = Неопределено;
		
	КонецЕсли;
	
	Для каждого СтрокаДерева Из ДеревоМодели.ПолучитьЭлементы() Цикл
		ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
		
		ЗаполнитьДанныеСвязейДереваРекурсивно(ЭлементыДерева);
		Если РежимРедактированияМодели = "Графически" Тогда
			ИницализироватьТабличныйДокументМодели();
			ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтаФорма, ЭлементыДерева);
			
			ОбновитьДиаграмму(ЭтаФорма);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьВидимостьКолонок(ЭтаФорма);
		
КонецПроцедуры // ПерейтиКРежимуРедактированияСвязей()

&НаКлиенте
Процедура ДобавитьЭтапКонтрольнуюТочку(ИмяКоманды)
		
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;	
	Если ИмяКоманды = "ДобавитьЭтап" Тогда
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап");	
		
	ИначеЕсли ИмяКоманды = "ДобавитьКонтрольнуюТочку" Тогда	
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка");	
		
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Проект"  , Объект.Ссылка);	
	ЗначенияЗаполнения.Вставить("ТипЭтапа", ТипЭтапа);	
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.ФормаОбъекта",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	); 
	
КонецПроцедуры // ДобавитьЭтапКонтрольнуюТочку()

&НаСервере
Процедура ПрочитатьСтрокиЭтаповРекурсивно(ЭлементыДерева, ИдентификаторСтроки = "")
	
	СтрокиЭтапа = Объект.ЭтапыРабот.НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодителя", ИдентификаторСтроки));
	Для каждого СтрокаЭтапа Из СтрокиЭтапа Цикл
		НоваяСтрока = ЭлементыДерева.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭтапа);
		
		ДанныеЭтапа = ПолучитьСтруктуруДанныхЭтапа(СтрокаЭтапа.Этап);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЭтапа);
		
		ПрочитатьДанныеЗависимостейСвязейЭтапов(НоваяСтрока);
		ЗаполнитьИндексКартинки(НоваяСтрока);
		
		ПрочитатьИсполнителейЭтапов(НоваяСтрока, ДанныеЭтапа.ПользователиЭтапа);
	
		ПрочитатьСтрокиЭтаповРекурсивно(НоваяСтрока.ПолучитьЭлементы(), СтрокаЭтапа.ИдентификаторСтроки);
		
	КонецЦикла;
	
КонецПроцедуры // ПрочитатьСтрокиЭтаповРекурсивно()

&НаСервере
Процедура ПрочитатьДанныеЗависимостейСвязейЭтапов(СтрокаЭтапа)

	СтрокиСвязей = Объект.СвязиЭтапов.НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодителя", СтрокаЭтапа.ИдентификаторСтроки));
	Для каждого СтрокаСвязи Из СтрокиСвязей Цикл
		НоваяСвязь = СтрокаЭтапа.Связи.Добавить();	
		НоваяСвязь.Этап		  		   = СтрокаСвязи.Этап; 
		НоваяСвязь.ТипСвязи	  		   = СтрокаСвязи.ТипСвязи; 
		НоваяСвязь.ОтсрочкаДней	 	   = СтрокаСвязи.ОтсрочкаДней; 
		НоваяСвязь.ИдентификаторСтроки = СтрокаСвязи.ИдентификаторСтроки; 
		
		НоваяСвязь.ИдентификаторСтрокиРодителя = СтрокаЭтапа.ИдентификаторСтроки;
		
	КонецЦикла;	
	
	СтрокиЗависимости = Объект.ЗависимостиЭтапов.НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодителя", СтрокаЭтапа.ИдентификаторСтроки));
	Для каждого СтрокаЗависимости Из СтрокиЗависимости Цикл
		НоваяЗависимость = СтрокаЭтапа.Зависимости.Добавить();	
		НоваяЗависимость.Этап		  		 = СтрокаЗависимости.ЭтапВедущий; 
		НоваяЗависимость.ТипСвязи	  		 = СтрокаЗависимости.ТипСвязи; 
		НоваяЗависимость.ОтсрочкаДней	 	 = СтрокаЗависимости.ОтсрочкаДней; 
		НоваяЗависимость.ИдентификаторСтроки = СтрокаЗависимости.ИдентификаторСтроки; 
		
		НоваяЗависимость.ИдентификаторСтрокиРодителя = СтрокаЭтапа.ИдентификаторСтроки;
		
		ЗаполнитьИдентификаторыСтрокВедущиеСтрокой(СтрокаЭтапа);
		
	КонецЦикла;	
	
	
КонецПроцедуры // ПрочитатьДанныеЗависимостейСвязейЭтапов()

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьИсполнителейЭтапов(СтрокаЭтапа, ПользователиЭтапа)

	СтрокаЭтапа.Исполнители.Очистить();
	Для каждого ПользовательЭтапа Из ПользователиЭтапа Цикл
		НовыйИсполнитель = СтрокаЭтапа.Исполнители.Добавить();	
		НовыйИсполнитель.Исполнитель = ПользовательЭтапа; 
				
	КонецЦикла;	

КонецПроцедуры // ПрочитатьИсполнителейЭтапов()

&НаСервере
Процедура ЗаписатьСтрокиЭтаповРекурсивно(ТекущийОбъект, ЭлементыДерева)

	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		СтрокаЭтапа = ТекущийОбъект.ЭтапыРабот.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЭтапа, СтрокаДерева);
		
		СтрокаРодителя = СтрокаДерева.ПолучитьРодителя();
		СтрокаЭтапа.ЭтапПредок 					= ?(СтрокаРодителя = Неопределено, Неопределено, СтрокаРодителя.Этап);
		СтрокаЭтапа.ИдентификаторСтрокиРодителя = ?(СтрокаРодителя = Неопределено, Неопределено, СтрокаРодителя.ИдентификаторСтроки);
		
		ЗаписатьДанныеЗависимостейСвязейЭтапов(ТекущийОбъект, СтрокаДерева);
		
		ЗаписатьСтрокиЭтаповРекурсивно(ТекущийОбъект, СтрокаДерева.ПолучитьЭлементы());
				
	КонецЦикла;	
	
КонецПроцедуры // ЗаписатьСтрокиЭтаповРекурсивно()

&НаСервере
Процедура ЗаписатьДанныеЗависимостейСвязейЭтапов(ТекущийОбъект, СтрокаЭтапа)
	
	Для каждого СтрокаСвязи Из СтрокаЭтапа.Связи Цикл
		НоваяСвязь			 			= ТекущийОбъект.СвязиЭтапов.Добавить();
		НоваяСвязь.Этап		  		    = СтрокаСвязи.Этап; 
		НоваяСвязь.ЭтапВедущий		  	= СтрокаЭтапа.Этап; 
		НоваяСвязь.ТипСвязи	  			= СтрокаСвязи.ТипСвязи; 
		НоваяСвязь.ОтсрочкаДней	 		= СтрокаСвязи.ОтсрочкаДней; 
		НоваяСвязь.ИдентификаторСтроки	= СтрокаСвязи.ИдентификаторСтроки; 
		
		НоваяСвязь.ИдентификаторСтрокиРодителя = СтрокаЭтапа.ИдентификаторСтроки; 
		
	КонецЦикла;
	
	Для каждого СтрокаЗависимости Из СтрокаЭтапа.Зависимости Цикл
		НоваяЗависимость			 		 = ТекущийОбъект.ЗависимостиЭтапов.Добавить();
		НоваяЗависимость.Этап		 		 = СтрокаЭтапа.Этап; 
		НоваяЗависимость.ЭтапВедущий		 = СтрокаЗависимости.Этап; 
		НоваяЗависимость.ТипСвязи	  		 = СтрокаЗависимости.ТипСвязи; 
		НоваяЗависимость.ОтсрочкаДней	 	 = СтрокаЗависимости.ОтсрочкаДней; 
		НоваяЗависимость.ИдентификаторСтроки = СтрокаЗависимости.ИдентификаторСтроки; 
		
		НоваяЗависимость.ИдентификаторСтрокиРодителя = СтрокаЭтапа.ИдентификаторСтроки; 
		
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьДанныеЗависимостейСвязейЭтапов()

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ЭлементДерево, ИмяРеквизитаФормы, Развернуть = Истина)
	СтрокиДерева = ЭтотОбъект[ИмяРеквизитаФормы].ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Для Каждого Строка Из СтрокаДерева.ПолучитьЭлементы() Цикл
			Если Развернуть Тогда
				ЭлементДерево.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
			Иначе
				ЭлементДерево.Свернуть(Строка.ПолучитьИдентификатор());
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхЭтапа(ЭтапСсылка)

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ТипЭтапа");
	СтруктураРеквизитов.Вставить("Подразделение");
	СтруктураРеквизитов.Вставить("ПродолжительностьДней");
	СтруктураРеквизитов.Вставить("ПользователиЭтапа");	
	
	РеквизитыЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтапСсылка, СтруктураРеквизитов);
	
	//Исполнители
	РеквизитыЭтапа.ПользователиЭтапа = РеквизитыЭтапа.ПользователиЭтапа.Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	Возврат РеквизитыЭтапа;

КонецФункции // ПолучитьСтруктуруДанныхЭтапа()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИндексКартинки(ДанныеЭтапа)
	
	Если ДанныеЭтапа = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ДанныеЭтапа.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
		ДанныеЭтапа.ИндексКартинки = 3;	
	Иначе	
		ДанныеЭтапа.ИндексКартинки = 1;	
	КонецЕсли;
	
	Если ДанныеЭтапа.Связи.Количество() > 0 Тогда
		ДанныеЭтапа.ИндексКартинки = ДанныеЭтапа.ИндексКартинки - 1;	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьИндексКартинки()

&НаКлиенте
Процедура УстановитьДоступностьКоманд()

	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	Элементы.ГруппаДобавить.Доступность = 
		(ТекущиеДанные.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.ТипЭтапа));
		
	Элементы.РедактироватьСвязьЭтапов.Доступность = 
		ЗначениеЗаполнено(ТекущиеДанные.Этап);
	
	Элементы.ДеревоМоделиСвязатьЭтапы.Доступность = 
		(РежимРедактированияСвязей И ЗначениеЗаполнено(ТекущиеДанные.Этап) И ИдентификаторСтрокиВедущий <> ТекущиеДанные.ИдентификаторСтроки И НайтиЗависимостьСЭтапом(ТекущиеДанные) = Неопределено);
		
	Элементы.ДеревоМоделиРазорватьСвязьЭтапа.Доступность = 
		(РежимРедактированияСвязей И ИдентификаторСтрокиВедущий <> ТекущиеДанные.ИдентификаторСтроки И НайтиЗависимостьСЭтапом(ТекущиеДанные) <> Неопределено);
		
КонецПроцедуры // УстановитьДоступностьКоманд()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКолонок(Форма)

	Форма.Элементы.ДеревоМоделиГруппаДанныеЭтапа.Видимость  = Не Форма.РежимРедактированияСвязей;
	Форма.Элементы.ДеревоМоделиГруппаДанныеСвязей.Видимость = Форма.РежимРедактированияСвязей;

	Форма.ТабличныйДокументМодели.Область(,3, ,3).Видимость = Не Форма.РежимРедактированияСвязей;;
	Форма.ТабличныйДокументМодели.Область(,4, ,4).Видимость = Не Форма.РежимРедактированияСвязей;;
	Форма.ТабличныйДокументМодели.Область(,5, ,5).Видимость = Форма.РежимРедактированияСвязей;;
	Форма.ТабличныйДокументМодели.Область(,6, ,6).Видимость = Форма.РежимРедактированияСвязей;;
	
КонецПроцедуры // УстановитьВидимостьКолонок()

&НаКлиенте
Процедура СвязатьЭтапДерева()

	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ТипСвязи) Тогда
		ТекущиеДанные.ТипСвязи 			 = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.ОкончаниеНачало");		
		ТекущиеДанные.ОтсрочкаДней       = ТекущиеДанные.ОтсрочкаСтартаДней;
		ТекущиеДанные.ОтсрочкаСтартаДней = Неопределено;
	
	КонецЕсли;
	
	ДобавитьЗависимостьЭтапаДерева(ТекущиеДанные);
	ДобавитьСвязиЭтапаДерева(ТекущиеДанные);
	
	ЗаполнитьИндексКартинки(СтрокаДереваМоделиВедущая);
	Если РежимРедактированияМодели = "Графически" Тогда
		ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(ЭтаФорма, ТекущиеДанные);		
		
		ОбновитьДиаграмму(ЭтаФорма);
	
	КонецЕсли;
	
	УстановитьДоступностьКоманд();
	
КонецПроцедуры // СвязатьЭтапДерева()

&НаКлиенте
Процедура РазорватьСвязьЭтапаДерева()

	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ТекущиеДанные.ТипСвязи) Тогда
		ТекущиеДанные.ТипСвязи  		 = Неопределено;
		ТекущиеДанные.ОтсрочкаСтартаДней = ТекущиеДанные.ОтсрочкаДней;
		ТекущиеДанные.ОтсрочкаДней 	     = Неопределено;
		
	КонецЕсли;
	
	УдалитьЗависимостьЭтапаДерева(ТекущиеДанные);
	УдалитьСвязьЭтапаДерева(ТекущиеДанные);
	
	ЗаполнитьИндексКартинки(СтрокаДереваМоделиВедущая);
	Если РежимРедактированияМодели = "Графически" Тогда
		ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(ЭтаФорма, ТекущиеДанные);		
		
		ОбновитьДиаграмму(ЭтаФорма);
		
	КонецЕсли;
	
	УстановитьДоступностьКоманд();
	
КонецПроцедуры // РазорватьСвязьЭтапаДерева()

&НаКлиенте
Функция НайтиЗависимостьСЭтапом(ДанныеСтроки)

	Перем Строка;
	
	Строки = ДанныеСтроки.Зависимости.НайтиСтроки(
		Новый Структура("ИдентификаторСтроки", ИдентификаторСтрокиВедущий));
		
	Если Строки.Количество() > 0 Тогда
		Строка = Строки[0];
		
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции // НайтиЗависимостьСЭтапом()

&НаКлиенте
Функция НайтиСвязьСЭтапом(ДанныеСтроки)

	Перем Строка;
	
	Строки = СтрокаДереваМоделиВедущая.Связи.НайтиСтроки(
		Новый Структура("ИдентификаторСтроки", ДанныеСтроки.ИдентификаторСтроки));
		
	Если Строки.Количество() > 0 Тогда
		Строка = Строки[0];
		
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции // НайтиСвязьСЭтапом()

&НаКлиенте
Процедура ДобавитьЗависимостьЭтапаДерева(ДанныеСтроки)
		
	СтрокаИдентификатора = НайтиЗависимостьСЭтапом(ДанныеСтроки);
	Если СтрокаИдентификатора = Неопределено Тогда
		СтрокаИдентификатора = ДанныеСтроки.Зависимости.Добавить();			
	КонецЕсли;
	
	СтрокаИдентификатора.ИдентификаторСтрокиРодителя = ДанныеСтроки.ИдентификаторСтроки;
	
	СтрокаИдентификатора.ИдентификаторСтроки = ИдентификаторСтрокиВедущий;		
	СтрокаИдентификатора.Этап 		 		 = ЭтапВедущий;			
	СтрокаИдентификатора.ОтсрочкаДней 		 = ДанныеСтроки.ОтсрочкаДней;		
	СтрокаИдентификатора.ТипСвязи	 		 = ДанныеСтроки.ТипСвязи;		
	
	ЗаполнитьИдентификаторыСтрокВедущиеСтрокой(ДанныеСтроки);

КонецПроцедуры // ДобавитьЗависимостьЭтапаДерева()

&НаКлиенте
Процедура ДобавитьСвязиЭтапаДерева(ДанныеСтроки)

	Если СтрокаДереваМоделиВедущая = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
		
	СтрокаИдентификатора = НайтиСвязьСЭтапом(ДанныеСтроки);
	Если СтрокаИдентификатора = Неопределено Тогда
		СтрокаИдентификатора = СтрокаДереваМоделиВедущая.Связи.Добавить();			
	КонецЕсли;

	СтрокаИдентификатора.ИдентификаторСтрокиРодителя = ДанныеСтроки.ИдентификаторСтроки;
	
	СтрокаИдентификатора.ИдентификаторСтроки = ДанныеСтроки.ИдентификаторСтроки;			
	СтрокаИдентификатора.Этап 		 		 = ДанныеСтроки.Этап;			
	СтрокаИдентификатора.ОтсрочкаДней 		 = ДанныеСтроки.ОтсрочкаДней;		
	СтрокаИдентификатора.ТипСвязи	 		 = ДанныеСтроки.ТипСвязи;		
	
КонецПроцедуры // ДобавитьСвязиЭтапаДерева()

&НаКлиенте
Процедура УдалитьЗависимостьЭтапаДерева(ДанныеСтроки)

	СтрокаИдентификатора = НайтиЗависимостьСЭтапом(ДанныеСтроки);
	Если СтрокаИдентификатора <> Неопределено Тогда
		ДанныеСтроки.Зависимости.Удалить(СтрокаИдентификатора);
	
	КонецЕсли;

	ЗаполнитьИдентификаторыСтрокВедущиеСтрокой(ДанныеСтроки);
	
КонецПроцедуры // УдалитьЗависимостьЭтапаДерева()

&НаКлиенте
Процедура УдалитьСвязьЭтапаДерева(ДанныеСтроки)

	Если СтрокаДереваМоделиВедущая = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
		
	СтрокаИдентификатора = НайтиСвязьСЭтапом(ДанныеСтроки);
	Если СтрокаИдентификатора <> Неопределено Тогда
		СтрокаДереваМоделиВедущая.Связи.Удалить(СтрокаИдентификатора);	
		
	КонецЕсли;
	
КонецПроцедуры // УдалитьЗависимостьЭтапаЭтапаДерева()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИдентификаторыСтрокВедущиеСтрокой(ДанныеСтроки)

	ДанныеСтроки.ИдентификаторыСтрокВедущиеСтрокой = "";
	Для каждого СтрокаИдентификатора Из ДанныеСтроки.Зависимости Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторыСтрокВедущиеСтрокой) Тогда
			ДанныеСтроки.ИдентификаторыСтрокВедущиеСтрокой = ДанныеСтроки.ИдентификаторыСтрокВедущиеСтрокой + ";";
			
		КонецЕсли;	
		
		ДанныеСтроки.ИдентификаторыСтрокВедущиеСтрокой = ДанныеСтроки.ИдентификаторыСтрокВедущиеСтрокой + СтрокаИдентификатора.ИдентификаторСтроки;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьИдентификаторыСтрокВедущиеСтрокой()

&НаКлиенте
Процедура ЗаполнитьДанныеСвязейДереваРекурсивно(ЭлементыДерева)
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		СтрокаИдентификатора = НайтиЗависимостьСЭтапом(СтрокаДерева);
		Если СтрокаИдентификатора <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаИдентификатора, "ТипСвязи, ОтсрочкаДней");	
			
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Новый Структура("ТипСвязи, ОтсрочкаДней"));	
			
		КонецЕсли;
		
	   	ЗаполнитьДанныеСвязейДереваРекурсивно(СтрокаДерева.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДанныеСвязейДереваРекурсивно()

&НаСервере
Процедура ИницализироватьТабличныйДокументМодели()
	
	Макет = Справочники.CRM_МоделиПроцессов.ПолучитьМакет("МакетМоделиЭтапов");
	
	ТабличныйДокументМодели.Очистить();
	ТабличныйДокументМодели.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	ТабличныйДокументМодели.ФиксацияСверху 			= 2;
	ТабличныйДокументМодели.ФиксацияСлева  			= 1;
	ТабличныйДокументМодели.Защита 		   			= Ложь;
	ТабличныйДокументМодели.ТолькоПросмотр 			= Ложь;
	Элементы.ТабличныйДокументМодели.Редактирование = Истина;
	
	//Службные поля
	ТабличныйДокументМодели.Область(,7, ,7).Видимость = Ложь;
	ТабличныйДокументМодели.Область(,8, ,8).Видимость = Ложь;
	
	//Диаграмма ганта
	ТабличныйДокументМодели.Область(,9, ,9).Видимость = Элементы.ОтображатьДиаграммуГанта.Пометка;
		
КонецПроцедуры // ИницализироватьТабличныйДокументМодели()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеТабличногоДокументаРекурсивно(Форма, ЭлементыДерева, ТекущийИдентификатор = Неопределено)

	ОбластьЭталон = Форма.ТабличныйДокументМодели.Область(1,1,1,1);
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		СтрокаДерева.АдресСтрокиОбласти = "";
		ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(Форма, СтрокаДерева, ОбластьЭталон, ТекущийИдентификатор);
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(Форма, СтрокаДерева.ПолучитьЭлементы(), ТекущийИдентификатор);
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьДанныеТабличногоДокументаРекурсивно()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(Форма, СтрокаДерева, ОбластьЭталон = Неопределено, ТекущийИдентификатор = Неопределено)

	ТабличныйДокументМодели = Форма.ТабличныйДокументМодели;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.АдресСтрокиОбласти) Тогда
		СтрокаОбласти = "R" + Формат(ТабличныйДокументМодели.ВысотаТаблицы + 1, "ЧН=0; ЧГ=");
		СтрокаДерева.АдресСтрокиОбласти = СтрокаОбласти;
		
	Иначе
		СтрокаОбласти = СтрокаДерева.АдресСтрокиОбласти;
		
	КонецЕсли;
	
	//Оформление
	ОбластьСтроки = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти);	
	Если Форма.РежимРедактированияСвязей
	  И ЗначениеЗаполнено(Форма.ИдентификаторСтрокиВедущий) 	
	  И СтрНайти(СтрокаДерева.ИдентификаторыСтрокВедущиеСтрокой, Форма.ИдентификаторСтрокиВедущий) > 0 Тогда
	
	    ЦветФона = WebЦвета.СинийСПороховымОттенком;
		
	Иначе 
	    ЦветФона = Новый Цвет;
		
	КонецЕсли;
	
	Для Сч = 1 По 8 Цикл
		ОбластьРедактирования = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + Формат(Сч, "ЧН=0; ЧГ="));		
		ОбластьРедактирования.ЦветФона = ЦветФона;
	
	КонецЦикла;
		
	ОбластьРедактирования = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти + "C1"); 
	ОбластьРедактирования.Отступ = 2;	
		
	Родитель = СтрокаДерева.ПолучитьРодителя();
	Если Родитель <> Неопределено 
	  И ЗначениеЗаполнено(Родитель.ИдентификаторСтроки) Тогда
		ОбластьДобавленияРодитель = ТабличныйДокументМодели.Область(Родитель.АдресСтрокиОбласти + "C1");
		
		//Этап
		ОбластьРедактирования.Отступ = ОбластьДобавленияРодитель.Отступ + 2;	
		
		//Свернуть/Развернуть
		ОбластьКартинка = ТабличныйДокументМодели.Область(Родитель.АдресСтрокиОбласти + "C8");
		Если Не ЗначениеЗаполнено(ОбластьКартинка.Текст) Тогда
			РисунокСвернутьРазвернуть = ТабличныйДокументМодели.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			РисунокСвернутьРазвернуть.Имя = "R" + Формат(ОбластьДобавленияРодитель.Низ, "ЧН=0; ЧГ=") + "_Свернуть";
			
		Иначе
			РисунокСвернутьРазвернуть = ТабличныйДокументМодели.Рисунки["R" + Формат(ОбластьДобавленияРодитель.Низ, "ЧН=0; ЧГ=") + "_Свернуть"];
			
		КонецЕсли;
		
		РисунокСвернутьРазвернуть.Картинка = БиблиотекаКартинок.CRM_Свернтуь;
		
		РисунокСвернутьРазвернуть.Расположить(ОбластьДобавленияРодитель);
		РисунокСвернутьРазвернуть.РазмерКартинки = РазмерКартинки.Пропорционально;
		РисунокСвернутьРазвернуть.Линия 		 = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		РисунокСвернутьРазвернуть.Лево  		 = РисунокСвернутьРазвернуть.Лево + 0.5 + (ОбластьДобавленияРодитель.Отступ - 2) * 1.5;
		РисунокСвернутьРазвернуть.Верх  		 = РисунокСвернутьРазвернуть.Верх + 0.5;
		РисунокСвернутьРазвернуть.Ширина 		 = 3;
		РисунокСвернутьРазвернуть.Высота 		 = 3;	
		РисунокСвернутьРазвернуть.ЦветФона		 = ЦветФона;
		
		//Служебное поле
		ОбластьКартинка.Текст = "*";
		
	КонецЕсли;
	
	Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
	
	//Этап
	ОбластьРедактирования.Текст 	  = СтрокаДерева.Этап;
	ОбластьРедактирования.Расшифровка = СтрокаДерева.Этап;
	
	ЗаполнитьКартинкуДанныхСтрокиТабличногоДокументаМодели(Форма, ОбластьРедактирования, СтрокаДерева);
	
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	//Оформление
	Если ЗначениеЗаполнено(СтрокаДерева.Этап)
	  И СтрокаДерева.ИдентификаторСтроки = Форма.ИдентификаторСтрокиВедущий Тогда
		ОбластьРедактирования.Шрифт = Новый Шрифт(,, Истина);
		
	Иначе	
		ОбластьРедактирования.Шрифт = Новый Шрифт();	
		
	КонецЕсли;
	
	Если Идентификатор = ТекущийИдентификатор Тогда
		Форма.Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ОбластьРедактирования;
	
	КонецЕсли;
		
	//Продолжительность
	ОбластьРедактирования = ТабличныйДокументМодели.Область(СтрокаОбласти + "C2");	
	ОбластьРедактирования.Расшифровка = "ПродолжительностьДней";
	
	ОбластьРедактирования.СодержитЗначение = Истина;
	ОбластьРедактирования.ТипЗначения      = Новый ОписаниеТипов("Число");
	ОбластьРедактирования.Значение    	   = СтрокаДерева.ПродолжительностьДней;
	
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	//Подразделение
	ОбластьРедактирования = ТабличныйДокументМодели.Область(СтрокаОбласти + "C3");	
	ОбластьРедактирования.Расшифровка = "Подразделение";
	
	ОбластьРедактирования.СодержитЗначение = Истина;
	ОбластьРедактирования.ТипЗначения      = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ОбластьРедактирования.Значение    	   = СтрокаДерева.Подразделение;
		
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	//Отсрочка старта
	ОбластьРедактирования = ТабличныйДокументМодели.Область(СтрокаОбласти + "C4");	
	ОбластьРедактирования.Расшифровка = "ОтсрочкаСтартаДней";
	
	ОбластьРедактирования.СодержитЗначение = Истина;
	ОбластьРедактирования.ТипЗначения      = Новый ОписаниеТипов("Число");
	ОбластьРедактирования.Значение    	   = СтрокаДерева.ОтсрочкаСтартаДней;
	
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	//Тип связи
	ОбластьРедактирования = ТабличныйДокументМодели.Область(СтрокаОбласти + "C5");	
	ОбластьРедактирования.Расшифровка = "ТипСвязи";
	
	ОбластьРедактирования.СодержитЗначение = Истина;
	ОбластьРедактирования.ТипЗначения      = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_ТипыСвязейЭтапов");
	ОбластьРедактирования.Значение    	   = СтрокаДерева.ТипСвязи;
	
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	//Отсрочка
	ОбластьРедактирования = ТабличныйДокументМодели.Область(СтрокаОбласти + "C6");	
	ОбластьРедактирования.Расшифровка = "ОтсрочкаДней";
	
	ОбластьРедактирования.СодержитЗначение = Истина;
	ОбластьРедактирования.ТипЗначения      = Новый ОписаниеТипов("Число");
	ОбластьРедактирования.Значение    	   = СтрокаДерева.ОтсрочкаДней;
	
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	//Служебные поля
	ОбластьРедактирования	    	  = ТабличныйДокументМодели.Область(СтрокаОбласти + "C7");	
	ОбластьРедактирования.Текст 	  = Идентификатор;
	ОбластьРедактирования.Расшифровка = Идентификатор;
		
КонецПроцедуры // ЗаполнитьДанныеСтрокиТабличногоДокумента()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьКартинкуДанныхСтрокиТабличногоДокументаМодели(Форма, ОбластьРедактирования, СтрокаДерева)
		
	Картинка = Форма.СоответствиеКоллекцииКартинокТипаЭтапа.Получить(СтрокаДерева.ИндексКартинки);
	Если Картинка <> Неопределено Тогда
		ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
					
		Рисунок = Форма.ТабличныйДокументМодели.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Рисунок.Картинка = Картинка;
		
		Рисунок.Имя = "R" + Формат(ОбластьРедактирования.Низ, "ЧН=0; ЧГ=") + "_ТипЭтапа";
		
		Рисунок.Расположить(ОбластьРедактирования);
		Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
		Рисунок.Линия 		   = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		Рисунок.Лево  		   = Рисунок.Лево + (ОбластьРедактирования.Отступ - 4) * 1.5;
		Рисунок.Ширина 		   = 3;
		Рисунок.ЦветФона	   = ОбластьРедактирования.ЦветФона;
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКартинкуДанныхСтрокиТабличногоДокументаМодели()

&НаКлиенте
Процедура ПеренестиДанныеТабличногоДокументаМодели(ОбластьРедактирования)
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
		
	СтрокаОбласти = "R" + Формат(ОбластьРедактирования.Низ, "ЧН=0; ЧГ=");
	ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C7");
	Если ОбластьИдентификатора.Расшифровка = Неопределено Тогда
		Возврат;
	
	КонецЕсли;
	
	Для Сч = 2 По 6 Цикл
		ОбластьЗначения = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + Формат(Сч, "ЧН=0; ЧГ="));	
		ТекущиеДанные[ОбластьЗначения.Расшифровка] = ОбластьЗначения.Значение;
		
	КонецЦикла;
	
	ПеренестиИзмененныеДанныеЭтапа(ТекущиеДанные);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТипСвязи)
	  ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ОтсрочкаДней)Тогда
		СвязатьЭтапДерева();	
		
	Иначе
		ОбновитьДиаграмму(ЭтаФорма);
	
	КонецЕсли;
	
КонецПроцедуры // ПеренестиДанныеТабличногоДокументаМодели()

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, Знач ОбластьЭталон = Неопределено)

	Если ОбластьЭталон = Неопределено Тогда
		ОбластьЭталон = Форма.ТабличныйДокументМодели.Область(1,1,1,1);
	КонецЕсли;
	
	ОбластьРедактирования.ГраницаСверху = ОбластьЭталон.ГраницаСверху;
	ОбластьРедактирования.ГраницаСлева  = ОбластьЭталон.ГраницаСлева;
	ОбластьРедактирования.ГраницаСправа = ОбластьЭталон.ГраницаСправа;
	ОбластьРедактирования.ГраницаСнизу  = ОбластьЭталон.ГраницаСнизу;
	
	ОбластьРедактирования.ЦветРамки  	= ОбластьЭталон.ЦветРамки;
	ОбластьРедактирования.ВысотаСтроки  = 11;
	
	ОбластьРедактирования.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		
КонецПроцедуры // ОформитьОбластьРедактирования()

&НаКлиенте
Процедура СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ЭлементыДерева, Видимость)
		
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл		
		ТабличныйДокументМодели.Область(СтрокаДерева.АдресСтрокиОбласти).Видимость = Видимость;				
		СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Видимость);
	
	КонецЦикла;
	
КонецПроцедуры // СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДиаграмму(Форма)

	МаксимальнаяДата = NULL;
	МинимальнаяДата  = NULL;
	
	ТабличныйДокументМодели = Форма.ТабличныйДокументМодели;
	
	ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
	ДиаграммаРисунок.Расположить(ТабличныйДокументМодели.Область(1, 9, ТабличныйДокументМодели.ВысотаТаблицы, 9));
	
	ДиаграммаОбъект = ДиаграммаРисунок.Объект;
	
	ДиаграммаОбъект.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.Право;
	ДиаграммаОбъект.Обновление = Ложь;
		
	ОтображатьДиаграммуГанта = Форма.Элементы.ОтображатьДиаграммуГанта.Пометка;
	ТабличныйДокументМодели.Область(,9, ,9).Видимость = ОтображатьДиаграммуГанта;
	
	ДиаграммаОбъект.Очистить();
	Если Не ОтображатьДиаграммуГанта Тогда
		Возврат;
		
	КонецЕсли;

	ДатаНачала = НачалоДня(Форма.Объект.ПлановаяДатаНачала);
	
	Серия = ДиаграммаОбъект.Серии.Добавить();
	
	Серия.ШтриховкаМеждуИнтервалами = Истина;
	Для Сч = 3 По ТабличныйДокументМодели.ВысотаТаблицы Цикл
		СтрокаОбласти = "R" + Формат(Сч, "ЧН=0; ЧГ=");
		ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C7");		
		
		ДанныеСтрокиДерева = Форма.ДеревоМодели.НайтиПоИдентификатору(ОбластьИдентификатора.Расшифровка);
		Если ДанныеСтрокиДерева = Неопределено Тогда
			Продолжить;
			
		КонецЕсли;
		
		Наименование = ТабличныйДокументМодели.Область(СтрокаОбласти + "C1").Текст;	
		
		Форма.БуферРасчетаИнтервала.Очистить();
		СтруктураИнтервала = CRM_УправлениеПроектамиКлиентСервер.ПолучитьСтруктуруДанныхИнервала(Форма, ДанныеСтрокиДерева, ДатаНачала);
		
		Начало 		 = СтруктураИнтервала.Начало;
		Окончание 	 = СтруктураИнтервала.Окончание;
				
		ИдентифкаторТочки = ДанныеСтрокиДерева.ИдентификаторСтроки;
		
		Родитель = ДанныеСтрокиДерева.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда 
			ИдентифкаторТочкиРодителя = Родитель.ИдентификаторСтроки;			
		КонецЕсли;	
		
		Точка = ДиаграммаОбъект.УстановитьТочку(ИдентифкаторТочки, ИдентифкаторТочкиРодителя);
		Точка.Текст = " ";
		
		Значение = ДиаграммаОбъект.ПолучитьЗначение(Точка, Серия);
		Значение.Очистить();
		
		// Если надо, корректируем максимальную и минимальную даты.
		Если МаксимальнаяДата = NULL 
		  ИЛИ МаксимальнаяДата < Начало + (Окончание - Начало) Тогда
			МаксимальнаяДата = Начало + (Окончание - Начало);
		КонецЕсли;
		
		Если МинимальнаяДата = NULL Или МинимальнаяДата > Начало Тогда
			МинимальнаяДата = Начало;
		КонецЕсли;	
		
		Значение.Редактирование = ДанныеСтрокиДерева.Зависимости.Количество() = 0;
		
		Интервал = Значение.Добавить();
		Интервал.Начало = Начало;
		Интервал.Конец  = Окончание;
		
		Если ДанныеСтрокиДерева.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
			Интервал.Цвет = Форма.ЦветИнтервалаКонтрольнойТочки;
		Иначе	
			Интервал.Цвет = Форма.ЦветИнтервалаЭтапа;
		КонецЕсли;
		
	КонецЦикла;	
	
	Пока Истина Цикл
		Попытка
			ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Получить(0).Видимость = Ложь;
			ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Удалить(ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Получить(1));
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	ШиринаКолонки = ДиаграммаРисунок.Ширина;
	Попытка
		Дни    = (МаксимальнаяДата - МинимальнаяДата) / 86400;
	Исключение
		Дни = 7;
	КонецПопытки;
	Если Не ((ШиринаКолонки >= 283 и Дни <=78)  или 
		 (ШиринаКолонки >= 181 и Дни <=58)  или 
		 (ШиринаКолонки >= 140 и Дни <=48)  или 
		 (ШиринаКолонки >= 74 и Дни <=38)  или 
		 (ШиринаКолонки >= 85 и Дни <=33)  или 
		 (ШиринаКолонки >= 38 и Дни <=29)  или 
		 (ШиринаКолонки >= 48 и Дни <=31)  или 
		 (ШиринаКолонки >= 85 и Дни <=33)  или 
		  (ШиринаКолонки >= 555 и Дни <=133))
		Тогда
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Месяц;
		ЭлементШкалы.ЛинииДелений = Новый Линия( ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Неделя;
		ЭлементШкалы.Формат	= "ДФ='ddd d'";
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
	Иначе
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Неделя;
		ЭлементШкалы.ЛинииДелений = Новый Линия( ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.День;
		ЭлементШкалы.ФорматДня = ФорматДняШкалыВремени.ДеньНедели;
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
	КонецЕсли;
	
	//Связи
	Для каждого СтрокаДерева Из Форма.ДеревоМодели.ПолучитьЭлементы() Цикл
		СформироватьСвязиДиаграммыРекурсивно(Форма, СтрокаДерева.ПолучитьЭлементы(), ДиаграммаОбъект, Серия);
	КонецЦикла;
	
	ДиаграммаОбъект.ПоказатьУровеньТочек(0); 
	Форма.ПолосаРегулированияШириныДиаграммыГанта = ТабличныйДокументМодели.Область(, 9, ,9).ШиринаКолонки;
	
	ДиаграммаОбъект.Обновление = Истина;
	
КонецПроцедуры // ОбновитьДиаграмму()

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьСвязиДиаграммыРекурсивно(Форма, ЭлементыДерева, ДиаграммаОбъект, Серия)

	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		ТекущаяТочка = ДиаграммаОбъект.УстановитьТочку(СтрокаДерева.ИдентификаторСтроки);
		Для каждого СтрокаСвязи Из СтрокаДерева.Связи Цикл
			ТочкаНачала = ДиаграммаОбъект.УстановитьТочку(СтрокаСвязи.ИдентификаторСтроки);
			Значение = ДиаграммаОбъект.ПолучитьЗначение(ТочкаНачала, Серия);
			Для Каждого Интервал Из Значение Цикл
				ИнтервалНачала = Интервал;
				Прервать;
				
			КонецЦикла;				
			
			Значение = ДиаграммаОбъект.ПолучитьЗначение(ТекущаяТочка, Серия);
			Для Каждого Интервал Из Значение Цикл
				ИнтервалКонца = Интервал;
				Прервать;
				
			КонецЦикла;
			
			Попытка
				СвязьДиаграммы = ИнтервалКонца.Добавить(ИнтервалНачала);
				
				СвязьДиаграммы.ТипСвязи = ПолучитьТипСвязиДиаграммыГанта(СтрокаСвязи.ТипСвязи);
				СвязьДиаграммы.Цвет     = ?(СтрокаДерева.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка"),
					Форма.ЦветИнтервалаКонтрольнойТочки, Форма.ЦветИнтервалаЭтапа);
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		СформироватьСвязиДиаграммыРекурсивно(Форма, СтрокаДерева.ПолучитьЭлементы(), ДиаграммаОбъект, Серия);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьСвязиВДиаграмме()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТипСвязиДиаграммыГанта(ТипСвязи)
	
	Если ТипСвязи = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.НачалоНачало") Тогда
		Возврат ТипСвязиДиаграммыГанта.НачалоНачало;
		
	ИначеЕсли ТипСвязи = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.ОкончаниеНачало") Тогда
		Возврат ТипСвязиДиаграммыГанта.КонецНачало;
		
	ИначеЕсли ТипСвязи = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.ОкончаниеОкончание") Тогда
		Возврат ТипСвязиДиаграммыГанта.КонецКонец;
		
	ИначеЕсли ТипСвязи = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.НачалоОкончание") Тогда
		Возврат ТипСвязиДиаграммыГанта.НачалоКонец;
		
	Иначе
		Возврат ТипСвязиДиаграммыГанта.КонецНачало;	
		
	КонецЕсли;

КонецФункции // ПолучитьТипСвязиДиаграммыГанта()

&НаКлиентеНаСервереБезКонтекста
Процедура СвернутьРазвернутьТочкуДиаграммы(Форма, ИдентифкаторТочки, Развернуть, Знач ДиаграммаОбъект = Неопределено)

	Если ДиаграммаОбъект = Неопределено Тогда
		ДиаграммаРисунок = Форма.ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];	
		ДиаграммаОбъект = ДиаграммаРисунок.Объект;
		
	КонецЕсли;

	Точка = ДиаграммаОбъект.УстановитьТочку(ИдентифкаторТочки);
	Если Развернуть Тогда
		ДиаграммаОбъект.РазвернутьТочку(Точка, Истина);
	Иначе	
		ДиаграммаОбъект.СвернутьТочку(Точка, Истина);
	КонецЕсли;
	
КонецПроцедуры // СвернутьТочкуДиаграммы()

&НаКлиенте
Процедура ЗаполнитьМассивИдентификаторовУдаляемыхСтрокРекурсивно(ЭлементыДерева, МассивИдентификаторовУдаляемыхСтрок)
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		МассивИдентификаторовУдаляемыхСтрок.Добавить(СтрокаДерева.ИдентификаторСтроки);		
		ЗаполнитьМассивИдентификаторовУдаляемыхСтрокРекурсивно(СтрокаДерева.ПолучитьЭлементы(), МассивИдентификаторовУдаляемыхСтрок);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьМассивИдентификаторовУдаляемыхСтрокРекурсивно()

&НаКлиенте
Процедура ОчиститьЗависимостиСвязиЭтапаРекурсивно(ЭлементыДерева, ИдентификаторСтроки)
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		СтрокиУдаления = СтрокаДерева.Связи.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
		Для каждого СтрокаУдаления Из СтрокиУдаления Цикл
			СтрокаДерева.Связи.Удалить(СтрокаУдаления);
		
		КонецЦикла;
		
		СтрокиУдаления = СтрокаДерева.Зависимости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
		Для каждого СтрокаУдаления Из СтрокиУдаления Цикл
			СтрокаДерева.Зависимости.Удалить(СтрокаУдаления);
		
		КонецЦикла;
		
		ОчиститьЗависимостиСвязиЭтапаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), ИдентификаторСтроки);
		
	КонецЦикла;

КонецПроцедуры // ОчиститьЗависимостиСвязиЭтапаРекурсивно()

&НаКлиенте
Процедура ПеренестиИзмененныеДанныеЭтапа(Знач ТекущиеДанные = Неопределено)

	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	КонецЕсли;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Подразделение"		, ТекущиеДанные.Подразделение);
	СтруктураДанных.Вставить("ПродолжительностьДней", ТекущиеДанные.ПродолжительностьДней);
	СтруктураДанных.Вставить("Исполнители"			, ТекущиеДанные.Исполнители);
	
	Результат = ВыполнитьИзменениеДанныеЭтапаСервер(ТекущиеДанные.Этап, СтруктураДанных);
	Если Не Результат Тогда
		ДанныеЭтапа = ПолучитьСтруктуруДанныхЭтапа(ТекущиеДанные.Этап);		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеЭтапа);
		
		ПрочитатьИсполнителейЭтапов(ТекущиеДанные, ДанныеЭтапа.ПользователиЭтапа);
		
	КонецЕсли;
	
КонецПроцедуры // ПеренестиИзмененныеДанныеЭтапа()

&НаСервереБезКонтекста
Функция ВыполнитьИзменениеДанныеЭтапаСервер(ЭтапСсылка, Данные)

	ЭтапОбъект = ЭтапСсылка.ПолучитьОбъект();
	Попытка
		ЭтапОбъект.Заблокировать();
	Исключение
		// Объект в настоящий момент редактируется.
		Возврат Ложь;
	КонецПопытки;

	ЗаполнитьЗначенияСвойств(ЭтапОбъект, Данные);
	
	ЭтапОбъект.ПользователиЭтапа.Очистить();
	Для каждого СтрокаИсполнителя Из Данные.Исполнители Цикл
		НоваяСтрока = ЭтапОбъект.ПользователиЭтапа.Добавить();
		НоваяСтрока.Пользователь = СтрокаИсполнителя.Исполнитель;
	
	КонецЦикла;
	
	Попытка
		ЭтапОбъект.ДополнительныеСвойства.Вставить("ФормаРедактирования");
		ЭтапОбъект.Записать();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ВыполнитьИзменениеДанныеЭтапаСервер()

#КонецОбласти

#КонецОбласти

#Область Подключаемый_КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи(Элемент)
	CRM_УправлениеКонтактнойИнформациейКлиент.ОсновнойДляСвязиНажатие(ЭтотОбъект, Элемент);
КонецПроцедуры // Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи()

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
		// Если это адрес электронной почты, то надо проверить на коррректность заполнения.
		РезультатПроверки = CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПолучитьТипПроверитьЗаполнение(ЭтотОбъект, Элемент);
		Если НЕ РезультатПроверки = Неопределено И РезультатПроверки.КодОшибки<>0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	CRM_УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзмененииАдресаЭлектроннойПочты(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки <> 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКарте(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОткрытьАдресНаИнтернетКарте","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(НайденныеСтроки[0].ЗначенияПолей);
	
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	СтруктураАдреса.Вставить("Представление", ЭтотОбъект[ИмяРеквизита]);
	
	СписокКарт = Новый СписокЗначений;
	// ++ Харченко Д.И. №  - 26.09.2018 / 
	//СписокКарт.Добавить("GIS","Карта GIS",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	//СписокКарт.Добавить("Google","Карта Google",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	//СписокКарт.Добавить("Yandex","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	СписокКарт.Добавить("вогГеокодирование","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
	//ПоказатьВыборИзСписка(ОписаниеОповещения, СписокКарт, ТекущийЭлемент,);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокКарт.Получить(0)); 
	// -- Харченко Д.И. №  - 26.09.2018
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение(Результат, СтруктураАдреса) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		СайтИнтернетКарты = Результат.Значение;
		CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомер(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьСМСНаНомер","");
		Телефон = ЭтотОбъект[ИмяРеквизита];
		Если ПустаяСтрока(Телефон) Тогда Возврат; КонецЕсли;
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Объект.Ссылка);
		Структура.Вставить("Телефон", ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Телефон));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьEmail(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьEmail","");
	
	АдресЭлектроннойПочты = ЭтотОбъект[ИмяРеквизита];

	Если НЕ ЗначениеЗаполнено(СокрЛП(АдресЭлектроннойПочты)) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	СтрРезультат = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(АдресЭлектроннойПочты);
	Если СтрРезультат.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрРезультат.Сообщение,,ИмяРеквизита);
		Возврат;
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.Добавить(Объект.Ссылка, СтрРезультат.АдресЭП);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
			
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПозвонитьНаНомер(Элемент)
	
	// +СофтФон
	сфпСофтФонПроКлиентПереопределяемый.сфпПодключаемый_ПозвонитьНаНомер(ЭтотОбъект, Объект);	
	// -СофтФон
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		АдресСайтаКомпании = "";
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводАдресаСайтаКомпанииЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, АдресСайтаКомпании, "Введите адрес сайта");
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура ВводАдресаСайтаКомпанииЗавершение(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
	Если АдресСайтаКомпании <> Неопределено Тогда
		Если ПустаяСтрока(АдресСайтаКомпании) Тогда
			ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
		Иначе	
			ЭтотОбъект[ИмяРеквизита] = АдресСайтаКомпании;
		КонецЕсли;	
			
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = АдресСайтаКомпании;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM
		
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочее(Элемент)
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьПрочее","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СтрокаПрочее = ЭтотОбъект[ИмяРеквизита];
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьПрочееЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, СтрокаПрочее, Строка(НайденныеСтроки[0].Вид),, Истина);
КонецПроцедуры // Подключаемый_РедактироватьПрочее

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочееЗавершение(СтрокаПрочее, ИмяРеквизита) Экспорт
	Если СтрокаПрочее <> Неопределено Тогда
		ЭтотОбъект[ИмяРеквизита] = СтрокаПрочее;
		
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = СтрокаПрочее;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM	
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьПрочее

#КонецОбласти 

#Область ТаблицыДанных

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДанных()

	ОписанияТаблиц = Новый Массив;
	
	ОписанияТаблиц.Добавить(Новый Структура("ИмяТаблицы, ИмяРегистра", "ТаблицаКлиентов"    , "вогПартнерыПроектов"));
	ОписанияТаблиц.Добавить(Новый Структура("ИмяТаблицы, ИмяРегистра", "ТаблицаНоменклатура", "вогНоменклатураПроектов"));
	ОписанияТаблиц.Добавить(Новый Структура("ИмяТаблицы, ИмяРегистра", "ТаблицаКоллекции"   , "вогКоллекцииНоменклатурыПроектов"));
	ОписанияТаблиц.Добавить(Новый Структура("ИмяТаблицы, ИмяРегистра", "ТаблицаПланДоходов" , "вогПланДоходовПоПроектам"));
	ОписанияТаблиц.Добавить(Новый Структура("ИмяТаблицы, ИмяРегистра", "ТаблицаПланРасходов", "вогПланРасходовПоПроектам"));
	ОписанияТаблиц.Добавить(Новый Структура("ИмяТаблицы, ИмяРегистра", "ТаблицаШаблоныАнкет", "вогШаблоныАнкетПроектов"));
	
	Возврат ОписанияТаблиц;

КонецФункции // ОписанияТаблицДанных()

&НаСервере
Процедура ПрочитатьТаблицыДанных(ТекущийОбъект, ОписанияТаблиц = Неопределено)

	Если ОписанияТаблиц = Неопределено Тогда
		ОписанияТаблиц = ОписанияТаблицДанных();
		
	КонецЕсли;
	
	Для каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл
		ТаблицаДанных = РеквизитФормыВЗначение(ОписаниеТаблицы.ИмяТаблицы);
		вогОбщегоНазначения.ПрочитатьТаблицуДанных(ТекущийОбъект.Ссылка,, ТаблицаДанных, ОписаниеТаблицы);	
		ЗначениеВРеквизитФормы(ТаблицаДанных, ОписаниеТаблицы.ИмяТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры // ПрочитатьТаблицыДанных()

&НаСервере
Процедура ЗаписатьТаблицыДанных(ТекущийОбъект, ОписанияТаблиц = Неопределено)

	Если Не Модифицированность Тогда
		Возврат;	
	КонецЕсли;
	
	Если ОписанияТаблиц = Неопределено Тогда
		ОписанияТаблиц = ОписанияТаблицДанных();
		
	КонецЕсли;
	
	Для каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл
		ТаблицаДанных = РеквизитФормыВЗначение(ОписаниеТаблицы.ИмяТаблицы);
		вогОбщегоНазначения.ЗаписатьТаблицуДанных(ТекущийОбъект.Ссылка,, ТаблицаДанных, ОписаниеТаблицы);	
		
	КонецЦикла;

КонецПроцедуры // ЗаписатьТаблицыДанных()

#КонецОбласти

#Область СтатусыСогласования

&НаСервере
Процедура ОбновитьДанныеСтатусаСогласования()

	ОписаниеСтатуса = вогОбщегоНазначения.ПолучитьОписаниеСтатусаСогласованияОбъекта(Объект.Ссылка);
	СтатусСогласования = ОписаниеСтатуса.Статус;
	РегистраторСтатуса = ОписаниеСтатуса.РегистраторСтатуса;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеКлассификаторы

&НаКлиенте
Процедура ЗаполнитьПоКлассификацииЗавершение(ЭлементСписка, Элемент) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиент.ОткрытьПодборПоКлассификации(ЭлементСписка.Значение, Элемент);	
	
КонецПроцедуры // ЗаполнитьПоКлассификацииЗавершение()

&НаСервере
Процедура ОбработкаВыбораТаблицы(ИмяТаблицы, ВыбранноеЗначение, СтандартнаяОбработка)
	CRM_КлассификаторыВызовСервера.ОбработкаВыбораТаблицы(ЭтотОбъект, ИмяТаблицы, ВыбранноеЗначение, СтандартнаяОбработка);	
КонецПроцедуры // ОбработкаВыбора()

#КонецОбласти

//+Классификаторы
#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
		
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)

	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_ТегиКлассификатора_Обновить()

#КонецОбласти
//-Классификаторы

#Область Подключаемый_МеханизмЗапускаБизнесПроцессов

&НаКлиенте
Процедура Подключаемый_ЗапускБизнесПроцесса(Команда)
	скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);
КонецПроцедуры // Подключаемый_ЗапускБизнесПроцесса()

&НаКлиенте
Процедура ОткрытьФормуСпискаКоллекций(Команда)
	// Вставить содержимое обработчика.       
	ОткрытьФорму("РегистрСведений.вогКоллекцииДляДемонстрации.ФормаСписка");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСпискаПанелей(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФорму("РегистрСведений.вогПанелиДляДемонстрации.ФормаСписка");
КонецПроцедуры

#КонецОбласти

