
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПередЗаписьюНастройки(Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗаписиНастройки(Отказ);
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	// Удаление задания.
	Если ЗначениеЗаполнено(РегламентноеЗаданиеGUID) Тогда
		РегламентныеЗаданияСервер.УдалитьЗадание(РегламентноеЗаданиеGUID);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПередЗаписьюНастройки(Отказ)
	
	Если Отказ Или Не ДополнительныеСвойства.Свойство("Расписание") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРасписания = ДополнительныеСвойства.Расписание;
	РегламентноеЗаданиеПредопределенное = СтруктураРасписания.РегламентноеЗаданиеПредопределенное;
	
	ЗаданияДляОбновления = Новый Соответствие;
	
	// Регламентные задания необходимо изменять в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	// Очистка заданий по командам, которые были удалены из таблицы.
	Если Не ЭтоНовый() Тогда
		
		Если ЗначениеЗаполнено(Ссылка.РегламентноеЗаданиеGUID) И Не РегламентноеЗаданиеПредопределенное Тогда
			РегламентныеЗаданияСервер.УдалитьЗадание(Ссылка.РегламентноеЗаданиеGUID);
		КонецЕсли;
		
	КонецЕсли;
	
	// Актуализация набора регламентных заданий для записи их идентификаторов в табличную часть.
	Если СтруктураРасписания.РегламентноеЗаданиеРасписание.Количество() > 0 Тогда
		Расписание 		= СтруктураРасписания.РегламентноеЗаданиеРасписание[0].Значение;
		Использование 	= СтруктураРасписания.РегламентноеЗаданиеИспользование
			И ДополнительныеОтчетыИОбработкиКлиентСервер.РасписаниеЗадано(Расписание);
	Иначе
		Расписание 		= Неопределено;
		Использование 	= Ложь;
	КонецЕсли;
	
	Задание = РегламентныеЗаданияСервер.Задание(СтруктураРасписания.РегламентноеЗаданиеGUID);
	Если Задание = Неопределено И Не РегламентноеЗаданиеПредопределенное Тогда // Не найдено
		Если Использование Тогда
			// Создать и зарегистрировать.
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Метаданные", 	Метаданные.РегламентныеЗадания.ЗапускЗаданияОбменаПоНастройке);
			ПараметрыЗадания.Вставить("Использование", 	Ложь);
			Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
			ЗаданияДляОбновления.Вставить(СтруктураРасписания, Задание);
			РегламентноеЗаданиеGUID = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
		Иначе
			// Действие не требуется
		КонецЕсли;
	Иначе // Найдено
		Если Использование Тогда
			// Зарегистрировать.
			ЗаданияДляОбновления.Вставить(СтруктураРасписания, Задание);
		Иначе
			
			Если РегламентноеЗаданиеПредопределенное Тогда
				ЗаданияДляОбновления.Вставить(СтруктураРасписания, Задание);
			Иначе // Удалить.
				РегламентныеЗаданияСервер.УдалитьЗадание(РегламентноеЗаданиеGUID);
				РегламентноеЗаданиеGUID = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЗаданияДляОбновления", ЗаданияДляОбновления);
	
КонецПроцедуры

Процедура ПриЗаписиНастройки(Отказ)
	
	Если Отказ Или Не ДополнительныеСвойства.Свойство("ЗаданияДляОбновления") Тогда
		Возврат;
	КонецЕсли;
	
	// Регламентные задания необходимо изменять в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого КлючИЗначение Из ДополнительныеСвойства.ЗаданияДляОбновления Цикл
		
		Команда = КлючИЗначение.Ключ;
		Задание = КлючИЗначение.Значение;
		
		Изменения = Новый Структура;
		Изменения.Вставить("Использование", Ложь);
		Изменения.Вставить("Расписание", 	Неопределено);
		Если Не Команда.РегламентноеЗаданиеПредопределенное Тогда
			Изменения.Вставить("Наименование", 	Лев(ПредставлениеЗадания(), 120));
		КонецЕсли;
		
		Если Команда.РегламентноеЗаданиеРасписание.Количество() > 0 Тогда
			Изменения.Расписание 	= Команда.РегламентноеЗаданиеРасписание[0].Значение;
			Изменения.Использование = Команда.РегламентноеЗаданиеИспользование
				И ДополнительныеОтчетыИОбработкиКлиентСервер.РасписаниеЗадано(Изменения.Расписание);
		КонецЕсли;
		
		ПараметрыПроцедуры = Новый Массив;
		// ++ VOG Солодов В.В. 06.08.2021
		Если Не Команда.РегламентноеЗаданиеПредопределенное Тогда
			ПараметрыПроцедуры.Добавить(Ссылка);
		КонецЕсли;
		// До изменения
		//ПараметрыПроцедуры.Добавить(Ссылка);
		// -- VOG Солодов В.В. 06.08.2021
		
		Изменения.Вставить("Параметры", ПараметрыПроцедуры);
		
		Если Изменения <> Неопределено Тогда
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Изменения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеЗадания()
	
	Возврат СтрШаблон(НСтр("ru = 'Периодическое выполнение обмена по настройке: %1'"), СокрЛП(Наименование));
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли