
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСКД();
	
	Если Не ЗначениеЗаполнено(Объект.УникальныйИдентификатор) 
		Или ЗначениеЗаполнено(ЭтаФорма.Параметры.ЗначениеКопирования.УникальныйИдентификатор) Тогда
		
		Объект.УникальныйИдентификатор = Новый УникальныйИдентификатор;
		
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 09.06.2021 DEV-621
	ЗаполнитьРасписание();
	
	ВариантИспользованияПравил = 1;
	
	Если ЭтоАдресВременногоХранилища(АдресСхемыКомпоновкиДанных) Тогда
		
		МакетПравил = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
		
		Если ТипЗнч(МакетПравил) = Тип("ТекстовыйДокумент")
			Или ТипЗнч(МакетПравил) = Тип("СхемаКомпоновкиДанных") Тогда
			ВариантИспользованияПравил = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	// -- VOG Солодов В.В. 09.06.2021 DEV-621
	
КонецПроцедуры

// ++ VOG Солодов В.В. 09.06.2021 DEV-621
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ВариантИспользованияПравил = 1
		И ЗначениеЗаполнено(Объект.ПравилаОбмена) Тогда
		АдресСхемыКомпоновкиДанных 		= "";
		АдресНастроекКомпоновкиДанных 	= "";
		Объект.СхемаКомпоновкиДанных 	= "";
	КонецЕсли;
	
КонецПроцедуры // -- VOG Солодов В.В. 09.06.2021 DEV-621

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(Объект.СхемаКомпоновкиДанных) Тогда
		
		Если Не ПустаяСтрока(АдресСхемыКомпоновкиДанных) Тогда
			
			ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных = 
				Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных));
			
		ИначеЕсли ВариантИспользованияПравил = 0 // VOG Солодов В.В. 09.06.2021 DEV-621 // Добавлены условия
			Или Не ЗначениеЗаполнено(Объект.ПравилаОбмена) Тогда
			
			ТекстСообщения = НСтр("ru = 'Необходимо настроить схему компоновки данных.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, 
				Объект.Ссылка,
				"Объект.СхемаКомпоновкиДанных",
				,
				Отказ);
				
		КонецЕсли;
		
		// ++ VOG Солодов В.В. 09.06.2021 DEV-621
		Если ВариантИспользованияПравил = 1
			И ЗначениеЗаполнено(Объект.ПравилаОбмена) Тогда
			
			ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных 	= Новый ХранилищеЗначения(Неопределено);
			ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
			
		КонецЕсли;
		// -- VOG Солодов В.В. 09.06.2021 DEV-621
		
	Иначе
		ТекущийОбъект.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	Если Не ПустаяСтрока(АдресНастроекКомпоновкиДанных) Тогда
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = 
			Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
	Иначе
		ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Неопределено);
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 09.06.2021 DEV-621
	СтруктураРасписания = Новый Структура;
	СтруктураРасписания.Вставить("РегламентноеЗаданиеРасписание", 		РегламентноеЗаданиеРасписание);
	СтруктураРасписания.Вставить("РегламентноеЗаданиеИспользование", 	РегламентноеЗаданиеИспользование);
	СтруктураРасписания.Вставить("РегламентноеЗаданиеGUID", 			Объект.РегламентноеЗаданиеGUID);
	СтруктураРасписания.Вставить("РегламентноеЗаданиеПредопределенное", РегламентноеЗаданиеПредопределенное);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Расписание", СтруктураРасписания);
	// -- VOG Солодов В.В. 09.06.2021 DEV-621
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СхемаКомпоновкиДанныхПриИзменении(Элемент)
	
	СхемаКомпоновкиДанныхПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыОткрытия = Новый Структура();
	ПараметрыФормыОткрытия.Вставить("ТекстОбработки", 	Объект[Элемент.Имя]);
	ПараметрыФормыОткрытия.Вставить("Заголовок", 		Элемент.Заголовок);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикВыборЗавершение", ЭтотОбъект, Элемент);
	
	ОткрытьФорму(
		"Справочник.CRM_ТочкиМаршрутов.Форма.ФормаРедактированияТекста",
		ПараметрыФормыОткрытия,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыборЗавершение(Результат, Элемент) экспорт
	
	Если Не Результат = Неопределено Тогда
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Свойство("Обработчик", Объект[Элемент.Имя]);
		Иначе 
			Объект[Элемент.Имя] = Результат;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 08.07.2020 CRM-764
&НаКлиенте
Процедура СхемаКомпоновкиДанныхОчистка(Элемент, СтандартнаяОбработка)
	
	СоздатьНовыйМакет = Истина;
	
КонецПроцедуры
// -- VOG Солодов В.В. 08.07.2020 CRM-764

// ++ VOG Солодов В.В. 09.06.2021 DEV-621
&НаКлиенте
Процедура РегламентноеЗаданиеИспользованиеПриИзменении(Элемент)
	ИзменитьРегламентноеЗадание(Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВариантИспользованияПравилПриИзменении(Элемент)
	УстановитьВидимостьДоступность(ЭтотОбъект);
КонецПроцедуры
// -- VOG Солодов В.В. 09.06.2021 DEV-621

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанных(Команда)
	
	// ++ VOG Солодов В.В. 08.07.2020 CRM-764
	Если СоздатьНовыйМакет Тогда
		
		ОписаниеОповещенияЗавершения 	= Новый ОписаниеОповещения("РедактироватьСхемуКомпоновкиДанныхФрагмент", ЭтотОбъект);
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("ТекстовыйДокумент", 		"Текстовый документ");
		СписокВыбора.Добавить("СхемаКомпоновкиДанных", 	"Схема компоновки данных");
		
		ПоказатьВыборИзМеню(ОписаниеОповещенияЗавершения, СписокВыбора);
		
		Возврат;
		
	КонецЕсли;
	
	РедактироватьСхемуКомпоновкиДанныхФрагмент("", Неопределено);
	// До изменения
	// Соодержание процедуры РедактироватьСхемуКомпоновкиДанныхФрагмент
	// -- VOG Солодов В.В. 08.07.2020 CRM-764
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанныхФрагмент(Результат, ДополнительныеПараметры) Экспорт // VOG Солодов В.В. 08.07.2020 CRM-764
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы 					= Новый Структура;
	ОписаниеОповещенияЗавершения 	= Новый ОписаниеОповещения("РедактироватьСхемуКомпоновкиДанныхЗавершение", ЭтотОбъект);
	РежимОткрытия 					= РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Если (СоздатьНовыйМакет И Результат.Значение = "ТекстовыйДокумент")
		Или (Не СоздатьНовыйМакет И ЭтоТипМакета("ТекстовыйДокумент")) Тогда
		
		ИмяФормыРедактирования 				= "Справочник.вогНастройкиОбменаУС.Форма.ФормаРедактированияТекста";
		ШаблонЗаголовка 					= НСтр("ru = 'Редактирование макета ""%1""'");
		ЗаголовокФормыРедактированияМакета 	= СтрЗаменить(ШаблонЗаголовка, "%1", Объект.Наименование);
		
		// ++ VOG Солодов В.В. 08.07.2020 CRM-764
		Если СоздатьНовыйМакет Тогда
			АдресСхемыКомпоновкиДанных 		= ПоместитьТекстовыйДокументВоВременноеХранилище();
		КонецЕсли;
		// -- VOG Солодов В.В. 08.07.2020 CRM-764
		
		ПараметрыФормы.Вставить("Заголовок", 									ЗаголовокФормыРедактированияМакета);
		ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", 					АдресСхемыКомпоновкиДанных);
		
	Иначе
		
		ИмяФормыРедактирования 				= "ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных";
		ШаблонЗаголовка 					= НСтр("ru = 'Настройка схемы компоновки данных ""%1""'");
		ЗаголовокФормыРедактированияМакета 	= СтрЗаменить(ШаблонЗаголовка, "%1", Объект.Наименование);
		
		// ++ VOG Солодов В.В. 08.07.2020 CRM-764
		Если СоздатьНовыйМакет Тогда
			АдресСхемыКомпоновкиДанных 		= ПоместитьШаблоннуюСхемуКомпоновкиВоВременноеХранилище();
		КонецЕсли;
		// -- VOG Солодов В.В. 08.07.2020 CRM-764
		
		ПараметрыФормы.Вставить("НеПомещатьНастройкиВСхемуКомпоновкиДанных", 	Истина);
		ПараметрыФормы.Вставить("НеРедактироватьСхемуКомпоновкиДанных", 		Ложь);
		ПараметрыФормы.Вставить("НеНастраиватьУсловноеОформление", 				Истина);
		ПараметрыФормы.Вставить("НеНастраиватьВыбор", 							Истина);
		ПараметрыФормы.Вставить("НеНастраиватьПорядок", 						Ложь);
		ПараметрыФормы.Вставить("УникальныйИдентификатор", 						УникальныйИдентификатор);
		ПараметрыФормы.Вставить("АдресСхемыКомпоновкиДанных", 					АдресСхемыКомпоновкиДанных);
		ПараметрыФормы.Вставить("АдресНастроекКомпоновкиДанных", 				АдресНастроекКомпоновкиДанных);
		ПараметрыФормы.Вставить("Заголовок", 									ЗаголовокФормыРедактированияМакета);
		ПараметрыФормы.Вставить("ИсточникШаблонов", 							Объект.Ссылка);
		ПараметрыФормы.Вставить("ИмяШаблонаСКД", 								Объект.СхемаКомпоновкиДанных);
		ПараметрыФормы.Вставить("ВозвращатьИмяТекущегоШаблонаСКД", 				Истина);
		
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыРедактирования, ПараметрыФормы,,,,, ОписаниеОповещенияЗавершения, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхемуКомпоновкиДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Если Результат.Свойство("АдресМакета") Тогда
			
			АдресСхемыКомпоновкиДанных 		= Результат.АдресМакета;
			Объект.СхемаКомпоновкиДанных 	= "";
			
		Иначе
			
			Если ПустаяСтрока(Результат.ИмяТекущегоШаблонаСКД) 
				И Элементы.СхемаКомпоновкиДанных.СписокВыбора.НайтиПоЗначению("") = Неопределено Тогда
				
				Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить("", НСтр("ru = 'Произвольный'"));
				
			КонецЕсли;
			
			Объект.СхемаКомпоновкиДанных = Результат.ИмяТекущегоШаблонаСКД;
			
			Если Результат.Свойство("АдресХранилищаНастройкиКомпоновщика") Тогда
				АдресНастроекКомпоновкиДанных = Результат.АдресХранилищаНастройкиКомпоновщика;
			КонецЕсли;
		
		КонецЕсли;
		
		// ++ VOG Солодов В.В. 08.07.2020 CRM-764
		СоздатьНовыйМакет 	= Ложь;
		// -- VOG Солодов В.В. 08.07.2020 CRM-764
		Модифицированность 	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СхемаКомпоновкиДанныхПриИзмененииСервер()
	
	Адреса = Справочники.вогНастройкиОбменаУС.АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(Объект);
	
	АдресСхемыКомпоновкиДанных 		= Адреса.СхемаКомпоновкиДанных;
	АдресНастроекКомпоновкиДанных 	= Адреса.НастройкиКомпоновкиДанных;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСКД()
	
	ПризнакПредопределенногоМакета 			= Врег("Предопределенный");
	ДлинаПризнакаПредопределенногоМакета 	= СтрДлина(ПризнакПредопределенногоМакета);
	
	Для Каждого Макет Из Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).Макеты Цикл
		
		Если Макет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных
			Или Макет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ТекстовыйДокумент Тогда
			
			Если ВРег(Прав(Макет.Имя, ДлинаПризнакаПредопределенногоМакета)) = ПризнакПредопределенногоМакета Тогда
				Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить(Макет.Имя, Макет.Синоним);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.СхемаКомпоновкиДанных.СписокВыбора.Добавить("", НСтр("ru = 'Произвольная'"));
	
	// ++ VOG Солодов В.В. 09.06.2021 DEV-621
	Если ЗначениеЗаполнено(Объект.ПравилаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ЗначениеКопирования.Пустая() Тогда
		
		СхемаИНастройки = Справочники.вогНастройкиОбменаУС.ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(
		Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
		
		// ++ VOG Солодов В.В. 08.07.2020 CRM-764
		Если СхемаИНастройки.СхемаКомпоновкиДанных = Неопределено Тогда
			СоздатьНовыйМакет = Истина;
		КонецЕсли;
		// -- VOG Солодов В.В. 08.07.2020 CRM-764
		
	Иначе
		СхемаИНастройки = Справочники.вогНастройкиОбменаУС.ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(
			Параметры.ЗначениеКопирования, Параметры.ЗначениеКопирования.СхемаКомпоновкиДанных);
	КонецЕсли;
	
	Если ПустаяСтрока(СхемаИНастройки.Описание) Тогда
		Объект.СхемаКомпоновкиДанных = "";
	КонецЕсли;
	
	СхемаКомпоновкиДанныхПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСКДСервер()
	
	Адреса = Справочники.вогНастройкиОбменаУС.АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(
		Справочники.вогНастройкиОбменаУС.ПустаяСсылка());
	
	АдресСхемыКомпоновкиДанных 		= Адреса.СхемаКомпоновкиДанных;
	АдресНастроекКомпоновкиДанных 	= Адреса.НастройкиКомпоновкиДанных;
	Объект.СхемаКомпоновкиДанных 	= "";
	Элементы.СхемаКомпоновкиДанных.СписокВыбора.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ЭтоТипМакета(ИскомыйТип)
	
	// ++ VOG Солодов В.В. 08.07.2020 CRM-764
	Если ЭтоАдресВременногоХранилища(АдресСхемыКомпоновкиДанных) Тогда
		
		Макет = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
		Возврат ТипЗнч(Макет) = Тип(ИскомыйТип);
		
	КонецЕсли;
	
	СхемаИНастройки = Справочники.вогНастройкиОбменаУС.ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(
		Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
	
	Возврат ТипЗнч(СхемаИНастройки.СхемаКомпоновкиДанных) = Тип(ИскомыйТип);
	// До изменения
	//Если ЭтоАдресВременногоХранилища(АдресСхемыКомпоновкиДанных) Тогда
	//	
	//	СхемаИНастройки = Справочники.вогНастройкиОбменаУС.ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(
	//		Объект.Ссылка, Объект.СхемаКомпоновкиДанных);
	//	Возврат ТипЗнч(СхемаИНастройки.СхемаКомпоновкиДанных) = Тип(ИскомыйТип);
	//КонецЕсли;
	//
	//Возврат Ложь;
	// -- VOG Солодов В.В. 08.07.2020 CRM-764
	
КонецФункции

// ++ VOG Солодов В.В. 08.07.2020 CRM-764
&НаСервереБезКонтекста
Функция ПоместитьТекстовыйДокументВоВременноеХранилище()
	
	Макет = Новый ТекстовыйДокумент;
	
	Возврат ПоместитьВоВременноеХранилище(Макет, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоместитьШаблоннуюСхемуКомпоновкиВоВременноеХранилище()
	
	Макет = Справочники.вогНастройкиОбменаУС.ПолучитьМакет("ШаблоннаяСхемаКомпоновкиДанных");
	
	Возврат ПоместитьВоВременноеХранилище(Макет, Новый УникальныйИдентификатор);
	
КонецФункции
// -- VOG Солодов В.В. 08.07.2020 CRM-764

// ++ VOG Солодов В.В. 09.06.2021 DEV-621
#Область РегламентноеЗадание

&НаСервере
Процедура ЗаполнитьРасписание()
	
	РегламентноеЗаданиеИспользование 	= Ложь;
	РегламентноеЗаданиеПредопределенное = Ложь;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "");
	
	Если Объект.Ссылка = Справочники.вогНастройкиОбменаУС.ДебиторскаяЗадолженность Тогда
		//РегламентноеЗаданиеПредопределенное = Истина;
	ИначеЕсли Объект.Ссылка = Справочники.вогНастройкиОбменаУС.КредитныеУсловия Тогда
		РегламентноеЗаданиеПредопределенное = Истина;
		ПараметрыОтбора.Метаданные = "вогПолучениеКредитныхУсловийИзУС";
	ИначеЕсли Объект.Ссылка = Справочники.вогНастройкиОбменаУС.Номенклатура Тогда
		РегламентноеЗаданиеПредопределенное = Истина;
		ПараметрыОтбора.Метаданные = "вогЗагрузкаНоменклатурыИзУчетнойСистемы";
	ИначеЕсли Объект.Ссылка = Справочники.вогНастройкиОбменаУС.КоллекцииДляСайта Тогда
		РегламентноеЗаданиеПредопределенное = Истина;
		ПараметрыОтбора.Метаданные = "вогЗагрузкаКоллекцийДляСайтаИзУчетнойСистемы";
	ИначеЕсли Объект.Ссылка = Справочники.вогНастройкиОбменаУС.ОбменДанными Тогда
		РегламентноеЗаданиеПредопределенное = Истина;
		ПараметрыОтбора.Метаданные = "вогОтправкаОбъектовВУчетнуюСистему";
	ИначеЕсли Объект.Ссылка = Справочники.вогНастройкиОбменаУС.Продажи Тогда
		РегламентноеЗаданиеПредопределенное = Истина;
		ПараметрыОтбора.Метаданные = "вогЗагрузкаПродажиУПП";
	КонецЕсли;
	
	Если РегламентноеЗаданиеПредопределенное Или ЗначениеЗаполнено(Объект.РегламентноеЗаданиеGUID) Тогда
		
		РегламентноеЗадание = Неопределено;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если РегламентноеЗаданиеПредопределенное Тогда
			
			СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора);
			
			Если СписокЗаданий.Количество() > 0 Тогда
				РегламентноеЗадание = СписокЗаданий.Получить(0);
				Объект.РегламентноеЗаданиеGUID = РегламентноеЗадание.УникальныйИдентификатор;
			КонецЕсли;
			
		Иначе
			РегламентноеЗадание = РегламентныеЗаданияСервер.Задание(Объект.РегламентноеЗаданиеGUID);
		КонецЕсли;
		
		Если Не РегламентноеЗадание = Неопределено Тогда
			РегламентноеЗаданиеИспользование = РегламентноеЗадание.Использование;
			РегламентноеЗаданиеРасписание.Вставить(0, РегламентноеЗадание.Расписание);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРегламентноеЗадание(РежимВыбора = Ложь, ИзмененФлажок = Ложь)
	
	Если ИзмененФлажок И Не РегламентноеЗаданиеИспользование Тогда
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если РегламентноеЗаданиеРасписание.Количество() > 0 Тогда
		РасписаниеКоманды = РегламентноеЗаданиеРасписание.Получить(0).Значение;
	Иначе
		РасписаниеКоманды = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(РасписаниеКоманды) <> Тип("РасписаниеРегламентногоЗадания") Тогда
		РасписаниеКоманды = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОтключитьФлажокПриОтменеРедактирования", ИзмененФлажок);
	Обработчик = Новый ОписаниеОповещения("ПослеОкончанияРедактированияРасписания", ЭтотОбъект, Контекст);
	
	РедактированиеРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеКоманды);
	РедактированиеРасписания.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОкончанияРедактированияРасписания(Расписание, Контекст) Экспорт
	
	Если Расписание = Неопределено Тогда
		Если Контекст.ОтключитьФлажокПриОтменеРедактирования Тогда
			РегламентноеЗаданиеИспользование = Ложь;
		КонецЕсли;
	Иначе
		РегламентноеЗаданиеРасписание.Очистить();
		РегламентноеЗаданиеРасписание.Добавить(Расписание);
		Если ДополнительныеОтчетыИОбработкиКлиентСервер.РасписаниеЗадано(Расписание) Тогда
			
			Модифицированность = Истина;
			РегламентноеЗаданиеИспользование = Истина;
			
		Иначе
			
			Если РегламентноеЗаданиеИспользование Тогда
				
				РегламентноеЗаданиеИспользование = Ложь;
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Запуск по расписанию отключен'"),
					,
					НСтр("ru = 'Расписание не заполнено'"));
				КонецЕсли;
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)
	
	СоответствиеВариантовЭлементам = Новый Соответствие;
	СоответствиеВариантовЭлементам.Вставить(0, "ГруппаСхемаКомпоновкиДанных");
	СоответствиеВариантовЭлементам.Вставить(1, "ПравилаОбмена");
	
	Для Каждого КлючИЗначение Из СоответствиеВариантовЭлементам Цикл
		
		ЗначениеЭлемента = (КлючИЗначение.Ключ = Форма.ВариантИспользованияПравил);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			КлючИЗначение.Значение,
			"Видимость",
			ЗначениеЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
// -- VOG Солодов В.В. 09.06.2021 DEV-621

#КонецОбласти
