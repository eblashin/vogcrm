
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораСервисов();
	ИнициализироватьСхемуКомпоновки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СервисПриИзменении(Элемент)
	
	Для Каждого ЭлементСписка Из Элементы.Сервис.СписокВыбора Цикл
		ЭлементСписка.Пометка 	= Ложь;
	КонецЦикла;
	
	ЭлементНастройка 			= Элементы.Сервис.СписокВыбора.НайтиПоЗначению(НастройкаОбмена);
	ЭлементНастройка.Пометка 	= Истина;
	
	ИнициализироватьСхемуКомпоновки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	Если ТребуетсяПериод И Не ЗначениеЗаполнено(Период) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран период. Продолжение невозможно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Период");
		
		Возврат;
		
	КонецЕсли;
	
	Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() = 0 Тогда
		
		ОписаниеОповещенияОЗавершении 	= Новый ОписаниеОповещения("ВыполнитьОбменЗавершение", ЭтотОбъект);
		ТекстВопроса 					= НСтр("ru = 'Будет выполнен обмен данными по всем объектам клиентской базы. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ВыполнитьОбменКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбменКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		// ++ VOG Солодов В.В. 25.12.2019 
		Если ЗаданиеВыполнено() Тогда
		// До изменения
		//Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		// -- VOG Солодов В.В. 25.12.2019
			ОбработкаРезультатаЗагрузкиКлиент();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Возврат;
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал 
		= ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗадания",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаКлиенте
Процедура ВыполнитьОбменКлиент()
	
	Отказ 				= Ложь;
	ЗаданиеВыполнено 	= ВыполнитьОбменНаСервере(Отказ);
	
	Если ЗаданиеВыполнено Тогда
		ОбработкаРезультатаЗагрузкиКлиент();
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка формирования исходящих данных.'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьОбменНаСервере(Отказ)
	
	АдресХранилища 			= ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ЗаданиеВыполнено 		= Ложь;
	// ++ VOG Солодов В.В. 09.01.2020 
	РазделениеПоПериодам 	= Ложь;
	// -- VOG Солодов В.В. 09.01.2020
	
	ПараметрыЗагрузки = СформироватьПараметрыЗагрузки(Отказ);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 25.12.2019 
	КоличествоПотоков 	= 8;
	//МассивЗаданий 		= Новый Массив;
	
	// ++ VOG Солодов В.В. 09.01.2020 
	Если ПараметрыЗагрузки.Свойство("Период")
		И ЗначениеЗаполнено(ПараметрыЗагрузки.Период) Тогда
		
		РазделениеПоПериодам = Истина;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 09.01.2020
	
	Если РазделениеПоПериодам Тогда
		
		КоличествоДнейВПериоде 
			= Цел((ПараметрыЗагрузки.Период.ДатаОкончания - ПараметрыЗагрузки.Период.ДатаНачала) / 86400) + 1;
		КоличествоДнейНаПоток 	= Цел(КоличествоДнейВПериоде / КоличествоПотоков) + 1;
		
		ОбрабатываемаяДата 		= ПараметрыЗагрузки.Период.ДатаНачала;
		ДатаНачалаПериода		= ПараметрыЗагрузки.Период.ДатаНачала;
		ГраницаПериода 			= ПараметрыЗагрузки.Период.ДатаОкончания;
		
		Для Сч = 1 По КоличествоПотоков Цикл
			
			ПараметрыЗагрузки.Период.ДатаНачала 	= ОбрабатываемаяДата;
			
			Если ГраницаПериода < КонецДня(ОбрабатываемаяДата + КоличествоДнейНаПоток * 86400) Тогда
				ПараметрыЗагрузки.Период.ДатаОкончания = ГраницаПериода;
			Иначе
				ПараметрыЗагрузки.Период.ДатаОкончания = КонецДня(ОбрабатываемаяДата + КоличествоДнейНаПоток * 86400);
			КонецЕсли;
			
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(НастройкаОбмена);
			ПараметрыВыполнения.Добавить(ПараметрыЗагрузки);
			ПараметрыВыполнения.Добавить(АдресХранилища);
			
			НаименованиеЗадания = НСтр("ru = 'Обмен данными с учетной системой.'");
			
			Задание = ФоновыеЗадания.Выполнить(
				"вогИнтеграцияСУчетнойСистемой.УниверсальныйОбменДаннымиСУчетнойСистемой",
				ПараметрыВыполнения,
				,
				НаименованиеЗадания);
			
			//МассивЗаданий.Добавить(Задание);
			
			ПредставлениеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Период %1 - %2'"),
				ПараметрыЗагрузки.Период.ДатаНачала,
				ПараметрыЗагрузки.Период.ДатаОкончания);
			
			СписокИдентификаторовФоновыхЗаданий.Добавить(Задание.УникальныйИдентификатор, ПредставлениеЗадания);
			
			Если ПараметрыЗагрузки.Период.ДатаОкончания = ГраницаПериода Тогда
				Прервать;
			КонецЕсли;
			
			ОбрабатываемаяДата = НачалоДня(ПараметрыЗагрузки.Период.ДатаОкончания + 86400);
			
		КонецЦикла;
		
		ПараметрыЗагрузки.Период.ДатаНачала = ДатаНачалаПериода;
		
	Иначе
		
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(НастройкаОбмена);
		ПараметрыВыполнения.Добавить(ПараметрыЗагрузки);
		ПараметрыВыполнения.Добавить(АдресХранилища);
		
		НаименованиеЗадания = НСтр("ru = 'Обмен данными с учетной системой.'");
		
		Задание = ФоновыеЗадания.Выполнить(
			"вогИнтеграцияСУчетнойСистемой.УниверсальныйОбменДаннымиСУчетнойСистемой",
			ПараметрыВыполнения,
			,
			НаименованиеЗадания);
		
		СписокИдентификаторовФоновыхЗаданий.Добавить(Задание.УникальныйИдентификатор, "");
		
	КонецЕсли;
	
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	ЗаданиеВыполнено = (СписокИдентификаторовФоновыхЗаданий.Количество() = 0);
	// До изменения
	//ПараметрыВыполнения = Новый Массив;
	//ПараметрыВыполнения.Добавить(НастройкаОбмена);
	//ПараметрыВыполнения.Добавить(ПараметрыЗагрузки);
	//ПараметрыВыполнения.Добавить(АдресХранилища);
	//
	//НаименованиеЗадания = НСтр("ru = 'Обмен данными с учетной системой.'");
	//
	//Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
	//	ВремяОжидания = 4000;
	//Иначе
	//	ВремяОжидания = 2000;
	//КонецЕсли;
	//
	//Задание = ФоновыеЗадания.Выполнить("вогИнтеграцияСУчетнойСистемой.УниверсальныйОбменДаннымиСУчетнойСистемой", 
	//	ПараметрыВыполнения,, НаименованиеЗадания);
	//	
	//ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	//
	//// Если операция уже завершилась, то сразу обрабатываем результат.
	//Если ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
	//	ЗаданиеВыполнено = Истина;
	//КонецЕсли;
	// -- VOG Солодов В.В. 25.12.2019
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Функция СформироватьПараметрыЗагрузки(Отказ)
	
	СтруктураДанных = Новый Структура;
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Период", 					Период);
	ПараметрыФормирования.Вставить("СхемаКомпоновкиДанных", 	ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных));
	ПараметрыФормирования.Вставить("НастройкиКомпоновкиДанных", КомпоновщикНастроек.ПолучитьНастройки());
	
	Справочники.вогНастройкиОбменаУС.СформироватьИсходящиеДанные(
		НастройкаОбмена,
		СтруктураДанных,
		ПараметрыФормирования,
		Отказ);
	
	Возврат СтруктураДанных;

КонецФункции

&НаСервере
Функция ЗаданиеВыполнено()
	
	// ++ VOG Солодов В.В. 25.12.2019 
	Для Каждого Идентификатор Из СписокИдентификаторовФоновыхЗаданий Цикл
		
		Если Идентификатор.Пометка = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаданиеЗавершено = ДлительныеОперации.ЗаданиеВыполнено(Идентификатор.Значение);
		
		Если Не ЗаданиеЗавершено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Окончание загрузки %1.'"),
			Идентификатор.Представление);
			
		НаименованиеОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "Наименование");
		
		ЗаписьЖурналаРегистрации(
			НаименованиеОбмена,
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			Комментарий);
		
		Идентификатор.Пометка = Истина;
		
	КонецЦикла;
	
	Возврат Истина;
	// До изменения
	//Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	// -- VOG Солодов В.В. 25.12.2019
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаЗагрузкиКлиент()

	РезультатСинхронизации = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(РезультатСинхронизации) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатСинхронизации.ТекстПояснения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатСинхронизации.ТекстПояснения);
	КонецЕсли;
	
	Если Не РезультатСинхронизации.Успешно Тогда
		Картинка 		= БиблиотекаКартинок.Ошибка32;
		ТекстПояснения 	= НСтр("ru = 'Не удалось выполнить обмен данными.'");
	Иначе	
		Картинка 		= БиблиотекаКартинок.Информация32;
		ТекстПояснения 	= НСтр("ru = 'Обмен данными выполнен успешно.'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обмен данными с учетной системой'"),, ТекстПояснения, Картинка);
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСервисов()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИспользуетсяВФормеОбмена", Истина);
	
	ВыборкаСервисов = Справочники.вогНастройкиОбменаУС.Выбрать(,, СтруктураОтбора);
	
	Пока ВыборкаСервисов.Следующий() Цикл
		Элементы.Сервис.СписокВыбора.Добавить(ВыборкаСервисов.Ссылка, ВыборкаСервисов.Наименование);
	КонецЦикла;
	
	Если Элементы.Сервис.СписокВыбора.Количество() > 0 Тогда
		
		Элементы.Сервис.СписокВыбора[0].Пометка = Истина;
		НастройкаОбмена = Элементы.Сервис.СписокВыбора[0].Значение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСхемуКомпоновки()
	
	СхемаИНастройки 				= Справочники.вогНастройкиОбменаУС.ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(
		НастройкаОбмена, НастройкаОбмена.СхемаКомпоновкиДанных);
	СхемаКомпоновкиДанных 			= СхемаИНастройки.СхемаКомпоновкиДанных;
	
	Если СхемаКомпоновкиДанных = Неопределено
		Или Не ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		СхемаКомпоновкиДанных 		= Новый СхемаКомпоновкиДанных;
	КонецЕсли;
	
	АдресСхемыКомпоновкиДанных 		= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	АдресНастроекКомпоновкиДанных 	= ПоместитьВоВременноеХранилище(
		СхемаКомпоновкиДанных.НастройкиПоУмолчанию, Новый УникальныйИдентификатор());
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	Настройки = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных);
	
	Если Настройки <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КонецЕсли;
	
	ТребуетсяУказаниеПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ТребуетсяПериод");
	ТребуетсяПериод = (ТребуетсяУказаниеПериода Или СхемаКомпоновкиДанных.Параметры.Найти("Период") <> Неопределено);
	
	НастроитьКнопкиФормы();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкиФормы()
	
	Если Не ЗначениеЗаполнено(НастройкаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Период.Видимость 			= ТребуетсяПериод;
	Элементы.ВыполнитьОбмен.Видимость 	= Истина;
	
КонецПроцедуры

#КонецОбласти
