
&НаКлиенте
Перем СтрокаДереваМоделиВедущая;

#Область ОбработчикиСобытийФормы
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыОтображения.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере(); 	
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПриЧтенииСозданииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьДанныеМоделиПроцессов(ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьЭтап(Команда)
	ДобавитьЭтапКонтрольнуюТочку(Команда.Имя);
КонецПроцедуры // ДобавитьЭтап()

&НаКлиенте
Процедура ДобавитьКонтрольнуюТочку(Команда)
	ДобавитьЭтапКонтрольнуюТочку(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭтапКонтрольнуюТочку(Команда)
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
		Возврат;	
	
	КонецЕсли;
	
	МассивИдентификаторовУдаляемыхСтрок = Новый Массив;
	МассивИдентификаторовУдаляемыхСтрок.Добавить(ТекущиеДанные.ИдентификаторСтроки);
	
	ЗаполнитьМассивИдентификаторовУдаляемыхСтрокРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), МассивИдентификаторовУдаляемыхСтрок);
			
	Для каждого ИдентификаторСтроки Из МассивИдентификаторовУдаляемыхСтрок Цикл
		ОчиститьЗависимостиСвязиЭтапаРекурсивно(ДеревоМодели.ПолучитьЭлементы(), ИдентификаторСтроки);
		
	КонецЦикла;
	
	ОбластьУдаления = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, ДеревоМодели.ПолучитьЭлементы(), ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы());
	ОбластьУдаления.Удалить(ТекущиеДанные);
		
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		
		ИницализироватьТабличныйДокументМодели();
		Для каждого СтрокаДерева Из ЭлементыДерева Цикл
			ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтаФорма, СтрокаДерева.ПолучитьЭлементы());
			
			ОбновитьДиаграмму(ЭтаФорма);
			
		КонецЦикла;
		
		ТекущаяОбласть = Элементы.ТабличныйДокументМодели.ТекущаяОбласть;
		Если ТекущаяОбласть.Низ > 2 Тогда
			СтрокаОбласти = "R" + Формат(ТекущаяОбласть.Низ, "ЧН=0; ЧГ=");
			ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C7");		
			
			Элементы.ДеревоМодели.ТекущаяСтрока = ОбластьИдентификатора.Расшифровка;
			ПодключитьОбработчикОжидания("Подключаемый_ДеревоМоделиПриАктивизацииСтроки", 0.1, Истина);
			
		КонецЕсли;
		
		УстановитьВидимостьКолонок(ЭтаФорма);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено
		  И ЗначениеЗаполнено(ТекущиеДанные.Этап) Тогда
		  Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
			  Попытка
			  	РисунокСвернутьРазвернуть = ТабличныйДокументМодели.Рисунки[ТекущиеДанные.АдресСтрокиОбласти + "_Развернуть"];
				РисунокСвернутьРазвернуть.Картинка = БиблиотекаКартинок.CRM_Свернтуь;
			    РисунокСвернутьРазвернуть.Имя      = ТекущиеДанные.АдресСтрокиОбласти + "_Свернуть";
				
			  Исключение
			  КонецПопытки;
				
			КонецЕсли;
		  
			СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), Истина);	
		   	СвернутьРазвернутьТочкуДиаграммы(ЭтаФорма, ТекущиеДанные.ИдентификаторСтроки, Истина);
			
		КонецЕсли;
	Иначе
		РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено
		  И ЗначениеЗаполнено(ТекущиеДанные.Этап) Тогда
		  	Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
	        	Попытка
				  	РисунокСвернутьРазвернуть = ТабличныйДокументМодели.Рисунки[ТекущиеДанные.АдресСтрокиОбласти + "_Свернуть"];
					РисунокСвернутьРазвернуть.Картинка = БиблиотекаКартинок.CRM_Развернуть;
				    РисунокСвернутьРазвернуть.Имя      = ТекущиеДанные.АдресСтрокиОбласти + "_Развернуть";
					
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
			СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), Ложь);	
		   	СвернутьРазвернутьТочкуДиаграммы(ЭтаФорма, ТекущиеДанные.ИдентификаторСтроки, Ложь);
			
		КонецЕсли;
	Иначе
		РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели", Ложь);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьЭтап(Команда)
	СвязатьЭтапДерева();
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязьЭтапа(Команда)
	РазорватьСвязьЭтапаДерева();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСвязиЭтапа(Команда)
	ПерейтиКРежимуРедактированияСвязей();
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОбИсполнителях(Команда)
		
	Элементы.ИнформацияОбИсполнителях.Пометка = Не Элементы.ИнформацияОбИсполнителях.Пометка;
	ЗначениеВидимости = Элементы.ИнформацияОбИсполнителях.Пометка;	
	
	Элементы.ГруппаИсполнителиЭтапов.Видимость = ЗначениеВидимости;

КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОСвязяхЗависимостях(Команда)
	
	Элементы.ИнформацияОСвязяхЗависимостях.Пометка = Не Элементы.ИнформацияОСвязяхЗависимостях.Пометка;
	ЗначениеВидимости = Элементы.ИнформацияОСвязяхЗависимостях.Пометка;	
	
	Элементы.ГруппаСвязиЗависимости.Видимость = ЗначениеВидимости;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДиаграммуГанта(Команда)
		
	Элементы.ОтображатьДиаграммуГанта.Пометка 				   = Не Элементы.ОтображатьДиаграммуГанта.Пометка;
	Элементы.ПолосаРегулированияШириныДиаграммыГанта.Видимость = Элементы.ОтображатьДиаграммуГанта.Пометка;
	
	ОбновитьДиаграмму(ЭтаФорма);	
	
КонецПроцедуры

#КонецОбласти               

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РежимОтображенияПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключамеый_РежимОтображенияПриИзменении", 0.1, Истина);
КонецПроцедуры

#Область РаботаСДеревомМодели

&НаКлиенте
Процедура ДеревоМоделиПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ДеревоМоделиПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	Отказ = Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки);
	Если Не Отказ 
	  И РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
	  
		ИницализироватьТабличныйДокументМодели();
		Для каждого СтрокаДерева Из ЭлементыДерева Цикл
			ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтаФорма, СтрокаДерева.ПолучитьЭлементы());
			
			ОбновитьДиаграмму(ЭтаФорма);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	ДанныеСтрокиПриемник = Элемент.ДанныеСтроки(Строка);
	Если ДанныеСтрокиПриемник = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;
	
	Если ДанныеСтрокиПриемник.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиТипСвязиПриИзменении(Элемент)
	СвязатьЭтапДерева();	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиОтсрочкаДнейПриИзменении(Элемент)
	СвязатьЭтапДерева();	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМоделиИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	Отказ = Не ЗначениеЗаполнено(ТекущиеДанные.Этап);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТабличнымДокументомМодели

&НаКлиенте
Процедура ТабличныйДокументМоделиПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	Если ТипЗнч(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		Если ТекущаяОбласть.Имя = "ДиаграммаГанта" Тогда
			Элемент.Редактирование  = Ложь;
			Возврат;
					
		Иначе
			Если Не Элемент.Редактирование Тогда
				Элемент.Редактирование  = Истина;
			КонецЕсли;
			
			МассивИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяОбласть.Имя, "_");
			СтрокаОбласти = МассивИмени[0];
			ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C7");	
			
			Элементы.ДеревоМодели.ТекущаяСтрока = ОбластьИдентификатора.Расшифровка;
			
			Если СтрНайти(ТекущаяОбласть.Имя, "ТипЭтапа") > 0 Тогда
				Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ТабличныйДокументМодели.Область(СтрокаОбласти + "C1");
				
				Возврат;
			КонецЕсли;
			
			ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				Если СтрНайти(ТекущаяОбласть.Имя, "Свернуть") > 0 Тогда
					Картинка = БиблиотекаКартинок.CRM_Развернуть;
					СуффиксИмени = "Развернуть";
				Иначе	
					Картинка = БиблиотекаКартинок.CRM_Свернтуь;
					СуффиксИмени = "Свернуть";
				КонецЕсли;
			
				ТекущаяОбласть.Имя = СтрокаОбласти + "_" + СуффиксИмени;
				ТекущаяОбласть.Картинка = Картинка;	
				
				СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), СуффиксИмени = "Свернуть");
				СвернутьРазвернутьТочкуДиаграммы(ЭтаФорма, ТекущиеДанные.ИдентификаторСтроки, СуффиксИмени = "Свернуть");
				
				Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ТабличныйДокументМодели.Область(СтрокаОбласти + "C1");
				
			КонецЕсли;
			
		КонецЕсли;		
		
	Иначе	
		Если Не Элемент.Редактирование Тогда
			Элемент.Редактирование = Истина;
			ОбновитьДанныеПоДиаграмме();
			
		КонецЕсли;
		
		Если ТекущаяОбласть.Низ < 3 Тогда
			Элементы.ДеревоМодели.ТекущаяСтрока = ДеревоМодели.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			
		Иначе	
			СтрокаОбласти = "R" + Формат(ТекущаяОбласть.Низ, "ЧН=0; ЧГ=");
			ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C7");		
			
			Элементы.ДеревоМодели.ТекущаяСтрока = ОбластьИдентификатора.Расшифровка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ДеревоМоделиПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиПриИзменении(Элемент)
	ПеренестиДанныеТабличногоДокументаМодели(Элемент.ТекущаяОбласть);
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиВыбор(Элемент, Область, СтандартнаяОбработка)

	Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") Тогда
		СтандартнаяОбработка = Ложь;	
		Возврат;
		
	КонецЕсли;
	
	Если Область.Низ <= 2 
	  ИЛИ Область.Лево <= 1 Тогда
		СтандартнаяОбработка = Ложь;	
		
	КонецЕсли;	
	
	Если Область.Лево > 1 Тогда
		СтрокаОбласти = "R" + Формат(Область.Низ, "ЧН=0; ЧГ=");
		ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C7");
		Если ОбластьИдентификатора.Расшифровка = Неопределено Тогда
			Возврат;
		
		КонецЕсли;
		
		ДанныеСтрокиДерева = ДеревоМодели.НайтиПоИдентификатору(ОбластьИдентификатора.Расшифровка);
		Если ДанныеСтрокиДерева = Неопределено Тогда
			Возврат;
			
		КонецЕсли;
		
		Если ДанныеСтрокиДерева.Этап = ЭтапВедущий Тогда
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если Область.Лево = 4
		  И ДанныеСтрокиДерева.Зависимости.Количество() > 0 Тогда
			СтандартнаяОбработка = Ложь;
		
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументМоделиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	СтандартнаяОбработка = ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПолосаРегулированияШириныДиаграммыГантаПриИзменении(Элемент)
	
	ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];	
	ДиаграммаОбъект = ДиаграммаРисунок.Объект;
	
	ДиаграммаОбъект.Обновление = Ложь;
	ТабличныйДокументМодели.Область(, 9, ,9).ШиринаКолонки = ПолосаРегулированияШириныДиаграммыГанта;
	
	ДиаграммаОбъект.Обновление = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

&НаКлиенте
Процедура Подключаемый_ДеревоМоделиПриАктивизацииСтроки()
	УстановитьДоступностьКоманд();
КонецПроцедуры // Подключаемый_ДеревоМоделиПриАктивизацииСтроки()

&НаКлиенте
Процедура Подключамеый_РежимОтображенияПриИзменении()
	
	УстановитьРежимРедактирования(ЭтаФорма);
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");	
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		
		ИницализироватьТабличныйДокументМодели();
		Для каждого СтрокаДерева Из ЭлементыДерева Цикл
			ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтаФорма, СтрокаДерева.ПолучитьЭлементы());
			
			ОбновитьДиаграмму(ЭтаФорма);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимостьКолонок(ЭтаФорма);
	
КонецПроцедуры // Подключамеый_РежимОтображенияПриИзменении()

&НаКлиенте
Процедура ДобавитьЭтапКонтрольнуюТочкуЗавершение(ВыбранноеЗначение, Контекст) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Для каждого ЗначениеВыбора Из ВыбранноеЗначение Цикл
		НоваяСтрока	= Контекст.ЭлементыДерева.Добавить();	
		НоваяСтрока.Этап				= ЗначениеВыбора;	
		НоваяСтрока.ТипЭтапа 			= Контекст.ТипЭтапа;	
		НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		
		ЗаполнитьИндексКартинки(НоваяСтрока);
		
	КонецЦикла;
	
	РазвернутьСтрокиДерева(Элементы.ДеревоМодели, "ДеревоМодели");	
	Элементы.ДеревоМодели.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
		
		ИницализироватьТабличныйДокументМодели();
		Для каждого СтрокаДерева Из ЭлементыДерева Цикл
			ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтаФорма, СтрокаДерева.ПолучитьЭлементы(), Элементы.ДеревоМодели.ТекущаяСтрока);
			
			ОбновитьДиаграмму(ЭтаФорма);
			
		КонецЦикла;
				
		УстановитьВидимостьКолонок(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЭтапКонтрольнуюТочкуЗавершение()
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	СоответствиеКоллекцииКартинок = Новый Соответствие;
	СоответствиеКоллекцииКартинок.Вставить(1, БиблиотекаКартинок.CRM_ЭтапПроцесса);
	СоответствиеКоллекцииКартинок.Вставить(0, БиблиотекаКартинок.CRM_ЭтапПроцессаСвязи);
	СоответствиеКоллекцииКартинок.Вставить(3, БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроцесса);
	СоответствиеКоллекцииКартинок.Вставить(2, БиблиотекаКартинок.CRM_КонтрольнаяТочкаПроцессаСвязи);
	
	СоответствиеКоллекцииКартинокТипаЭтапа = Новый ФиксированноеСоответствие(СоответствиеКоллекцииКартинок);
	
	ЦветИнтервалаКонтрольнойТочки = ЦветаСтиля.CRM_ЦветИнтервалаКонтрольнойТочки;
	ЦветИнтервалаЭтапа		      = ЦветаСтиля.CRM_ЦветИнтервалаЭтапа;
	
	времРежимРедактированияМодели = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "РежимРедактированияМодели");
	РежимРедактированияМодели = ?(времРежимРедактированияМодели = Неопределено, "Дерево", времРежимРедактированияМодели);
	
	ПрочитатьДанныеМоделиПроцесса();
	УстановитьРежимРедактирования(ЭтаФорма);		
	
	Если РежимРедактированияМодели = "Графически" Тогда
		ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();

		ИницализироватьТабличныйДокументМодели();
		Для каждого СтрокаДерева Из ЭлементыДерева Цикл
			ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтаФорма, СтрокаДерева.ПолучитьЭлементы());
			
			ОбновитьДиаграмму(ЭтаФорма);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимостьКолонок(ЭтаФорма);
	
КонецПроцедуры // ПриЧтенииСозданииНаСервере()

// Процедура - обработчик записи формы на сервере.
//
// Параметры:
//	Нет.
//
Процедура ПриЗакрытииНаСервере()
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "РежимРедактированияМодели", РежимРедактированияМодели);	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимРедактирования(Форма)
	
	Форма.Элементы.СтраницыОтображения.ТекущаяСтраница = Форма.Элементы[Форма.РежимРедактированияМодели];
	
	Форма.Элементы.ОтображатьДиаграммуГанта.Видимость 				 = Форма.РежимРедактированияМодели = "Графически";
	Форма.Элементы.ПолосаРегулированияШириныДиаграммыГанта.Видимость = Форма.РежимРедактированияМодели = "Графически";
	
КонецПроцедуры // УстановитьРежимРедактирования()

&НаСервере
Процедура ПрочитатьДанныеМоделиПроцесса()
			
	ЭлементыДерева = ДеревоМодели.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	СтрокаДерева = ЭлементыДерева.Добавить();
	СтрокаДерева.ИндексКартинки = -1;
	
	ПрочитатьСтрокиЭтаповРекурсивно(СтрокаДерева.ПолучитьЭлементы());
	
КонецПроцедуры // ПрочитатьДанныеМоделиПроцесса()

&НаСервере
Процедура ЗаписатьДанныеМоделиПроцессов(ТекущийОбъект)
	
	ТекущийОбъект.ЭтапыРабот.Очистить();
	ТекущийОбъект.СвязиЭтапов.Очистить();
	ТекущийОбъект.ЗависимостиЭтапов.Очистить();
	ТекущийОбъект.ИсполнителиЭтапов.Очистить();
	
	Для каждого СтрокаДерева Из ДеревоМодели.ПолучитьЭлементы() Цикл
		ЗаписатьСтрокиЭтаповРекурсивно(ТекущийОбъект, СтрокаДерева.ПолучитьЭлементы());
			
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьДанныеМоделиПроцессов()

&НаКлиенте
Процедура ПерейтиКРежимуРедактированияСвязей()

	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Этап) Тогда
		Возврат;
	
	КонецЕсли;
	
	Элементы.РедактироватьСвязьЭтапов.Пометка = Не Элементы.РедактироватьСвязьЭтапов.Пометка;
	 
	РежимРедактированияСвязей	= Элементы.РедактироватьСвязьЭтапов.Пометка; 
	Элементы.ГруппаСвязи.Доступность = РежимРедактированияСвязей;
		
	Если РежимРедактированияСвязей Тогда
		СтрокаДереваМоделиВедущая  = ТекущиеДанные;
		ИдентификаторСтрокиВедущий = ТекущиеДанные.ИдентификаторСтроки;
		ЭтапВедущий				   = ТекущиеДанные.Этап;

	Иначе	
		СтрокаДереваМоделиВедущая  = Неопределено;
		ИдентификаторСтрокиВедущий = Неопределено;
		ЭтапВедущий				   = Неопределено;
		
	КонецЕсли;
	
	Для каждого СтрокаДерева Из ДеревоМодели.ПолучитьЭлементы() Цикл
		ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
		
		ЗаполнитьДанныеСвязейДереваРекурсивно(ЭлементыДерева);
		Если РежимРедактированияМодели = "Графически" Тогда
			ИницализироватьТабличныйДокументМодели();
			ЗаполнитьДанныеТабличногоДокументаРекурсивно(ЭтаФорма, ЭлементыДерева);
			
			ОбновитьДиаграмму(ЭтаФорма);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьВидимостьКолонок(ЭтаФорма);
		
КонецПроцедуры // ПерейтиКРежимуРедактированияСвязей()

&НаКлиенте
Процедура ДобавитьЭтапКонтрольнуюТочку(ИмяКоманды)
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	
	
	Если ИмяКоманды = "ДобавитьЭтап" Тогда
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап");	
		
	ИначеЕсли ИмяКоманды = "ДобавитьКонтрольнуюТочку" Тогда	
		ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка");	
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипЭтапа", ТипЭтапа);	
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ТипЭтапа"	  , ТипЭтапа);
	Контекст.Вставить("ЭлементыДерева", ТекущиеДанные.ПолучитьЭлементы()); 	
		
	ОбработчикВыбора = Новый ОписаниеОповещения("ДобавитьЭтапКонтрольнуюТочкуЗавершение", ЭтотОбъект, Контекст);
	ОткрытьФорму("Справочник.CRM_МоделиЭтапов.ФормаВыбора",
		ПараметрыФормы,,
		УникальныйИдентификатор,,,
		ОбработчикВыбора, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	); 
	
КонецПроцедуры // ДобавитьЭтапКонтрольнуюТочку()

&НаСервере
Процедура ПрочитатьСтрокиЭтаповРекурсивно(ЭлементыДерева, ИдентификаторСтроки = "")
	
	СтрокиЭтапа = Объект.ЭтапыРабот.НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодителя", ИдентификаторСтроки));
	Для каждого СтрокаЭтапа Из СтрокиЭтапа Цикл
		НоваяСтрока = ЭлементыДерева.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭтапа);
		
		ДанныеЭтапа = ПолучитьСтруктуруДанныхЭтапа(СтрокаЭтапа.Этап);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЭтапа);
		
		ПрочитатьДанныеЗависимостейСвязейЭтапов(НоваяСтрока);
		ЗаполнитьИндексКартинки(НоваяСтрока);
		
		ПрочитатьИсполнителейЭтапов(НоваяСтрока);
	
		ПрочитатьСтрокиЭтаповРекурсивно(НоваяСтрока.ПолучитьЭлементы(), СтрокаЭтапа.ИдентификаторСтроки);
		
	КонецЦикла;
	
КонецПроцедуры // ПрочитатьСтрокиЭтаповРекурсивно()

&НаСервере
Процедура ПрочитатьДанныеЗависимостейСвязейЭтапов(СтрокаЭтапа)

	СтрокиСвязей = Объект.СвязиЭтапов.НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодителя", СтрокаЭтапа.ИдентификаторСтроки));
	Для каждого СтрокаСвязи Из СтрокиСвязей Цикл
		НоваяСвязь = СтрокаЭтапа.Связи.Добавить();	
		НоваяСвязь.Этап		  		   = СтрокаСвязи.Этап; 
		НоваяСвязь.ТипСвязи	  		   = СтрокаСвязи.ТипСвязи; 
		НоваяСвязь.ОтсрочкаДней	 	   = СтрокаСвязи.ОтсрочкаДней; 
		НоваяСвязь.ИдентификаторСтроки = СтрокаСвязи.ИдентификаторСтроки; 
		
		НоваяСвязь.ИдентификаторСтрокиРодителя = СтрокаЭтапа.ИдентификаторСтроки;
		
	КонецЦикла;	
	
	СтрокиЗависимости = Объект.ЗависимостиЭтапов.НайтиСтроки(Новый Структура("ИдентификаторСтрокиРодителя", СтрокаЭтапа.ИдентификаторСтроки));
	Для каждого СтрокаЗависимости Из СтрокиЗависимости Цикл
		НоваяЗависимость = СтрокаЭтапа.Зависимости.Добавить();	
		НоваяЗависимость.Этап		  		 = СтрокаЗависимости.ЭтапВедущий; 
		НоваяЗависимость.ТипСвязи	  		 = СтрокаЗависимости.ТипСвязи; 
		НоваяЗависимость.ОтсрочкаДней	 	 = СтрокаЗависимости.ОтсрочкаДней; 
		НоваяЗависимость.ИдентификаторСтроки = СтрокаЗависимости.ИдентификаторСтроки; 
		
		НоваяЗависимость.ИдентификаторСтрокиРодителя = СтрокаЭтапа.ИдентификаторСтроки;
		
		ЗаполнитьИдентификаторыСтрокВедущиеСтрокой(СтрокаЭтапа);
		
	КонецЦикла;	
	
	
КонецПроцедуры // ПрочитатьДанныеЗависимостейСвязейЭтапов()

&НаСервере
Процедура ПрочитатьИсполнителейЭтапов(СтрокаЭтапа)

	СтрокиИсполнителей = Объект.ИсполнителиЭтапов.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаЭтапа.ИдентификаторСтроки));
	Для каждого СтрокаИсполнителя Из СтрокиИсполнителей Цикл
		НовыйИсполнитель = СтрокаЭтапа.Исполнители.Добавить();	
		НовыйИсполнитель.Исполнитель = СтрокаИсполнителя.Исполнитель; 
				
	КонецЦикла;	

КонецПроцедуры // ПрочитатьИсполнителейЭтапов()

&НаСервере
Процедура ЗаписатьСтрокиЭтаповРекурсивно(ТекущийОбъект, ЭлементыДерева)

	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		СтрокаЭтапа = ТекущийОбъект.ЭтапыРабот.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЭтапа, СтрокаДерева);
		
		СтрокаРодителя = СтрокаДерева.ПолучитьРодителя();
		СтрокаЭтапа.ЭтапПредок 					= ?(СтрокаРодителя = Неопределено, Неопределено, СтрокаРодителя.Этап);
		СтрокаЭтапа.ИдентификаторСтрокиРодителя = ?(СтрокаРодителя = Неопределено, Неопределено, СтрокаРодителя.ИдентификаторСтроки);
		
		ЗаписатьДанныеЗависимостейСвязейЭтапов(ТекущийОбъект, СтрокаДерева);
		
		ЗаписатьДанныеИсполнителейЭтапов(ТекущийОбъект, СтрокаДерева);
		
		ЗаписатьСтрокиЭтаповРекурсивно(ТекущийОбъект, СтрокаДерева.ПолучитьЭлементы());
				
	КонецЦикла;	
	
КонецПроцедуры // ЗаписатьСтрокиЭтаповРекурсивно()

&НаСервере
Процедура ЗаписатьДанныеЗависимостейСвязейЭтапов(ТекущийОбъект, СтрокаЭтапа)
	
	Для каждого СтрокаСвязи Из СтрокаЭтапа.Связи Цикл
		НоваяСвязь			 			= ТекущийОбъект.СвязиЭтапов.Добавить();
		НоваяСвязь.Этап		  		    = СтрокаСвязи.Этап; 
		НоваяСвязь.ЭтапВедущий		  	= СтрокаЭтапа.Этап; 
		НоваяСвязь.ТипСвязи	  			= СтрокаСвязи.ТипСвязи; 
		НоваяСвязь.ОтсрочкаДней	 		= СтрокаСвязи.ОтсрочкаДней; 
		НоваяСвязь.ИдентификаторСтроки	= СтрокаСвязи.ИдентификаторСтроки; 
		
		НоваяСвязь.ИдентификаторСтрокиРодителя = СтрокаЭтапа.ИдентификаторСтроки; 
		
	КонецЦикла;
	
	Для каждого СтрокаЗависимости Из СтрокаЭтапа.Зависимости Цикл
		НоваяЗависимость			 		 = ТекущийОбъект.ЗависимостиЭтапов.Добавить();
		НоваяЗависимость.Этап		 		 = СтрокаЭтапа.Этап; 
		НоваяЗависимость.ЭтапВедущий		 = СтрокаЗависимости.Этап; 
		НоваяЗависимость.ТипСвязи	  		 = СтрокаЗависимости.ТипСвязи; 
		НоваяЗависимость.ОтсрочкаДней	 	 = СтрокаЗависимости.ОтсрочкаДней; 
		НоваяЗависимость.ИдентификаторСтроки = СтрокаЗависимости.ИдентификаторСтроки; 
		
		НоваяЗависимость.ИдентификаторСтрокиРодителя = СтрокаЭтапа.ИдентификаторСтроки; 
		
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьДанныеЗависимостейСвязейЭтапов()

&НаСервере
Процедура ЗаписатьДанныеИсполнителейЭтапов(ТекущийОбъект, СтрокаЭтапа)

	Для каждого СтрокаИсполнителя Из СтрокаЭтапа.Исполнители Цикл
		НовыйИсполнитель			 		 = ТекущийОбъект.ИсполнителиЭтапов.Добавить();
		НовыйИсполнитель.Исполнитель 		 = СтрокаИсполнителя.Исполнитель; 
		НовыйИсполнитель.ИдентификаторСтроки = СтрокаЭтапа.ИдентификаторСтроки; 
		
	КонецЦикла;

КонецПроцедуры // ЗаписатьДанныеИсполнителейЭтапов()

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ЭлементДерево, ИмяРеквизитаФормы, Развернуть = Истина)
	СтрокиДерева = ЭтотОбъект[ИмяРеквизитаФормы].ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Для Каждого Строка Из СтрокаДерева.ПолучитьЭлементы() Цикл
			Если Развернуть Тогда
				ЭлементДерево.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
			Иначе
				ЭлементДерево.Свернуть(Строка.ПолучитьИдентификатор());
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхЭтапа(ЭтапСсылка)

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ТипЭтапа");
	
	РеквизитыЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтапСсылка, СтруктураРеквизитов);
	
	Возврат РеквизитыЭтапа;

КонецФункции // ПолучитьСтруктуруДанныхЭтапа()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИндексКартинки(ДанныеЭтапа)
	
	Если ДанныеЭтапа = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ДанныеЭтапа.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
		ДанныеЭтапа.ИндексКартинки = 3;	
	Иначе	
		ДанныеЭтапа.ИндексКартинки = 1;	
	КонецЕсли;
	
	Если ДанныеЭтапа.Связи.Количество() > 0 Тогда
		ДанныеЭтапа.ИндексКартинки = ДанныеЭтапа.ИндексКартинки - 1;	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьИндексКартинки()

&НаКлиенте
Процедура УстановитьДоступностьКоманд()

	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	Элементы.ГруппаДобавить.Доступность = 
		(ТекущиеДанные.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.ТипЭтапа));
		
	Элементы.РедактироватьСвязьЭтапов.Доступность = 
		ЗначениеЗаполнено(ТекущиеДанные.Этап);
	
	Элементы.ДеревоМоделиСвязатьЭтапы.Доступность = 
		(РежимРедактированияСвязей И ЗначениеЗаполнено(ТекущиеДанные.Этап) И ИдентификаторСтрокиВедущий <> ТекущиеДанные.ИдентификаторСтроки И НайтиЗависимостьСЭтапом(ТекущиеДанные) = Неопределено);
		
	Элементы.ДеревоМоделиРазорватьСвязьЭтапа.Доступность = 
		(РежимРедактированияСвязей И ИдентификаторСтрокиВедущий <> ТекущиеДанные.ИдентификаторСтроки И НайтиЗависимостьСЭтапом(ТекущиеДанные) <> Неопределено);
		
КонецПроцедуры // УстановитьДоступностьКоманд()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКолонок(Форма)

	Форма.Элементы.ДеревоМоделиГруппаДанныеЭтапа.Видимость  = Не Форма.РежимРедактированияСвязей;
	Форма.Элементы.ДеревоМоделиГруппаДанныеСвязей.Видимость = Форма.РежимРедактированияСвязей;

	Форма.ТабличныйДокументМодели.Область(,3, ,3).Видимость = Не Форма.РежимРедактированияСвязей;;
	Форма.ТабличныйДокументМодели.Область(,4, ,4).Видимость = Не Форма.РежимРедактированияСвязей;;
	Форма.ТабличныйДокументМодели.Область(,5, ,5).Видимость = Форма.РежимРедактированияСвязей;;
	Форма.ТабличныйДокументМодели.Область(,6, ,6).Видимость = Форма.РежимРедактированияСвязей;;
	
КонецПроцедуры // УстановитьВидимостьКолонок()

&НаКлиенте
Процедура СвязатьЭтапДерева()

	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ТипСвязи) Тогда
		ТекущиеДанные.ТипСвязи 			 = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.ОкончаниеНачало");		
		ТекущиеДанные.ОтсрочкаДней       = ТекущиеДанные.ОтсрочкаСтартаДней;
		ТекущиеДанные.ОтсрочкаСтартаДней = Неопределено;
	
	КонецЕсли;
	
	ДобавитьЗависимостьЭтапаДерева(ТекущиеДанные);
	ДобавитьСвязиЭтапаДерева(ТекущиеДанные);
	
	ЗаполнитьИндексКартинки(СтрокаДереваМоделиВедущая);
	Если РежимРедактированияМодели = "Графически" Тогда
		ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(ЭтаФорма, ТекущиеДанные);		
		
		ОбновитьДиаграмму(ЭтаФорма);
	
	КонецЕсли;
	
	УстановитьДоступностьКоманд();
	
КонецПроцедуры // СвязатьЭтапДерева()

&НаКлиенте
Процедура РазорватьСвязьЭтапаДерева()

	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ТекущиеДанные.ТипСвязи) Тогда
		ТекущиеДанные.ТипСвязи  		 = Неопределено;
		ТекущиеДанные.ОтсрочкаСтартаДней = ТекущиеДанные.ОтсрочкаДней;
		ТекущиеДанные.ОтсрочкаДней 	     = Неопределено;
		
	КонецЕсли;
	
	УдалитьЗависимостьЭтапаДерева(ТекущиеДанные);
	УдалитьСвязьЭтапаДерева(ТекущиеДанные);
	
	ЗаполнитьИндексКартинки(СтрокаДереваМоделиВедущая);
	Если РежимРедактированияМодели = "Графически" Тогда
		ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(ЭтаФорма, ТекущиеДанные);		
		
		ОбновитьДиаграмму(ЭтаФорма);
		
	КонецЕсли;
	
	УстановитьДоступностьКоманд();
	
КонецПроцедуры // РазорватьСвязьЭтапаДерева()

&НаКлиенте
Функция НайтиЗависимостьСЭтапом(ДанныеСтроки)

	Перем Строка;
	
	Строки = ДанныеСтроки.Зависимости.НайтиСтроки(
		Новый Структура("ИдентификаторСтроки", ИдентификаторСтрокиВедущий));
		
	Если Строки.Количество() > 0 Тогда
		Строка = Строки[0];
		
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции // НайтиЗависимостьСЭтапом()

&НаКлиенте
Функция НайтиСвязьСЭтапом(ДанныеСтроки)

	Перем Строка;
	
	Строки = СтрокаДереваМоделиВедущая.Связи.НайтиСтроки(
		Новый Структура("ИдентификаторСтроки", ДанныеСтроки.ИдентификаторСтроки));
		
	Если Строки.Количество() > 0 Тогда
		Строка = Строки[0];
		
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции // НайтиСвязьСЭтапом()

&НаКлиенте
Процедура ДобавитьЗависимостьЭтапаДерева(ДанныеСтроки)
		
	СтрокаИдентификатора = НайтиЗависимостьСЭтапом(ДанныеСтроки);
	Если СтрокаИдентификатора = Неопределено Тогда
		СтрокаИдентификатора = ДанныеСтроки.Зависимости.Добавить();			
	КонецЕсли;
	
	СтрокаИдентификатора.ИдентификаторСтрокиРодителя = ДанныеСтроки.ИдентификаторСтроки;
	
	СтрокаИдентификатора.ИдентификаторСтроки = ИдентификаторСтрокиВедущий;		
	СтрокаИдентификатора.Этап 		 		 = ЭтапВедущий;			
	СтрокаИдентификатора.ОтсрочкаДней 		 = ДанныеСтроки.ОтсрочкаДней;		
	СтрокаИдентификатора.ТипСвязи	 		 = ДанныеСтроки.ТипСвязи;		
	
	ЗаполнитьИдентификаторыСтрокВедущиеСтрокой(ДанныеСтроки);

КонецПроцедуры // ДобавитьЗависимостьЭтапаДерева()

&НаКлиенте
Процедура ДобавитьСвязиЭтапаДерева(ДанныеСтроки)

	Если СтрокаДереваМоделиВедущая = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
		
	СтрокаИдентификатора = НайтиСвязьСЭтапом(ДанныеСтроки);
	Если СтрокаИдентификатора = Неопределено Тогда
		СтрокаИдентификатора = СтрокаДереваМоделиВедущая.Связи.Добавить();			
	КонецЕсли;

	СтрокаИдентификатора.ИдентификаторСтрокиРодителя = ДанныеСтроки.ИдентификаторСтроки;
	
	СтрокаИдентификатора.ИдентификаторСтроки = ДанныеСтроки.ИдентификаторСтроки;			
	СтрокаИдентификатора.Этап 		 		 = ДанныеСтроки.Этап;			
	СтрокаИдентификатора.ОтсрочкаДней 		 = ДанныеСтроки.ОтсрочкаДней;		
	СтрокаИдентификатора.ТипСвязи	 		 = ДанныеСтроки.ТипСвязи;		
	
КонецПроцедуры // ДобавитьСвязиЭтапаДерева()

&НаКлиенте
Процедура УдалитьЗависимостьЭтапаДерева(ДанныеСтроки)

	СтрокаИдентификатора = НайтиЗависимостьСЭтапом(ДанныеСтроки);
	Если СтрокаИдентификатора <> Неопределено Тогда
		ДанныеСтроки.Зависимости.Удалить(СтрокаИдентификатора);
	
	КонецЕсли;

	ЗаполнитьИдентификаторыСтрокВедущиеСтрокой(ДанныеСтроки);
	
КонецПроцедуры // УдалитьЗависимостьЭтапаДерева()

&НаКлиенте
Процедура УдалитьСвязьЭтапаДерева(ДанныеСтроки)

	Если СтрокаДереваМоделиВедущая = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
		
	СтрокаИдентификатора = НайтиСвязьСЭтапом(ДанныеСтроки);
	Если СтрокаИдентификатора <> Неопределено Тогда
		СтрокаДереваМоделиВедущая.Связи.Удалить(СтрокаИдентификатора);	
		
	КонецЕсли;
	
КонецПроцедуры // УдалитьЗависимостьЭтапаЭтапаДерева()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИдентификаторыСтрокВедущиеСтрокой(ДанныеСтроки)

	ДанныеСтроки.ИдентификаторыСтрокВедущиеСтрокой = "";
	Для каждого СтрокаИдентификатора Из ДанныеСтроки.Зависимости Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторыСтрокВедущиеСтрокой) Тогда
			ДанныеСтроки.ИдентификаторыСтрокВедущиеСтрокой = ДанныеСтроки.ИдентификаторыСтрокВедущиеСтрокой + ";";
			
		КонецЕсли;	
		
		ДанныеСтроки.ИдентификаторыСтрокВедущиеСтрокой = ДанныеСтроки.ИдентификаторыСтрокВедущиеСтрокой + СтрокаИдентификатора.ИдентификаторСтроки;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьИдентификаторыСтрокВедущиеСтрокой()

&НаКлиенте
Процедура ЗаполнитьДанныеСвязейДереваРекурсивно(ЭлементыДерева)
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		СтрокаИдентификатора = НайтиЗависимостьСЭтапом(СтрокаДерева);
		Если СтрокаИдентификатора <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаИдентификатора, "ТипСвязи, ОтсрочкаДней");	
			
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Новый Структура("ТипСвязи, ОтсрочкаДней"));	
			
		КонецЕсли;
		
	   	ЗаполнитьДанныеСвязейДереваРекурсивно(СтрокаДерева.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДанныеСвязейДереваРекурсивно()

&НаСервере
Процедура ИницализироватьТабличныйДокументМодели()
	
	Макет = Справочники.CRM_МоделиПроцессов.ПолучитьМакет("МакетМоделиЭтапов");
	
	ТабличныйДокументМодели.Очистить();
	ТабличныйДокументМодели.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	ТабличныйДокументМодели.ФиксацияСверху 			= 2;
	ТабличныйДокументМодели.ФиксацияСлева  			= 1;
	ТабличныйДокументМодели.Защита 		   			= Ложь;
	ТабличныйДокументМодели.ТолькоПросмотр 			= Ложь;
	Элементы.ТабличныйДокументМодели.Редактирование = Истина;
	
	//Службные поля
	ТабличныйДокументМодели.Область(,7, ,7).Видимость = Ложь;
	ТабличныйДокументМодели.Область(,8, ,8).Видимость = Ложь;
	
	//Диаграмма ганта
	ТабличныйДокументМодели.Область(,9, ,9).Видимость = Элементы.ОтображатьДиаграммуГанта.Пометка;
		
КонецПроцедуры // ИницализироватьТабличныйДокументМодели()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеТабличногоДокументаРекурсивно(Форма, ЭлементыДерева, ТекущийИдентификатор = Неопределено)

	ОбластьЭталон = Форма.ТабличныйДокументМодели.Область(1,1,1,1);
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		СтрокаДерева.АдресСтрокиОбласти = "";
		ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(Форма, СтрокаДерева, ОбластьЭталон, ТекущийИдентификатор);
		ЗаполнитьДанныеТабличногоДокументаРекурсивно(Форма, СтрокаДерева.ПолучитьЭлементы(), ТекущийИдентификатор);
		
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьДанныеТабличногоДокументаРекурсивно()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеСтрокиТабличногоДокументаМодели(Форма, СтрокаДерева, ОбластьЭталон = Неопределено, ТекущийИдентификатор = Неопределено)

	ТабличныйДокументМодели = Форма.ТабличныйДокументМодели;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.АдресСтрокиОбласти) Тогда
		СтрокаОбласти = "R" + Формат(ТабличныйДокументМодели.ВысотаТаблицы + 1, "ЧН=0; ЧГ=");
		СтрокаДерева.АдресСтрокиОбласти = СтрокаОбласти;
		
	Иначе
		СтрокаОбласти = СтрокаДерева.АдресСтрокиОбласти;
		
	КонецЕсли;
	
	//Оформление
	ОбластьСтроки = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти);	
	Если Форма.РежимРедактированияСвязей
	  И ЗначениеЗаполнено(Форма.ИдентификаторСтрокиВедущий) 	
	  И СтрНайти(СтрокаДерева.ИдентификаторыСтрокВедущиеСтрокой, Форма.ИдентификаторСтрокиВедущий) > 0 Тогда
	
	    ЦветФона = WebЦвета.СинийСПороховымОттенком;
		
	Иначе 
	    ЦветФона = Новый Цвет;
		
	КонецЕсли;
	
	Для Сч = 1 По 8 Цикл
		ОбластьРедактирования = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + Формат(Сч, "ЧН=0; ЧГ="));		
		ОбластьРедактирования.ЦветФона = ЦветФона;
	
	КонецЦикла;
		
	ОбластьРедактирования = Форма.ТабличныйДокументМодели.Область(СтрокаОбласти + "C1"); 
	ОбластьРедактирования.Отступ = 2;	
		
	Родитель = СтрокаДерева.ПолучитьРодителя();
	Если Родитель <> Неопределено 
	  И ЗначениеЗаполнено(Родитель.ИдентификаторСтроки) Тогда
		ОбластьДобавленияРодитель = ТабличныйДокументМодели.Область(Родитель.АдресСтрокиОбласти + "C1");
		
		//Этап
		ОбластьРедактирования.Отступ = ОбластьДобавленияРодитель.Отступ + 2;	
		
		//Свернуть/Развернуть
		ОбластьКартинка = ТабличныйДокументМодели.Область(Родитель.АдресСтрокиОбласти + "C8");
		Если Не ЗначениеЗаполнено(ОбластьКартинка.Текст) Тогда
			РисунокСвернутьРазвернуть = ТабличныйДокументМодели.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			РисунокСвернутьРазвернуть.Имя = "R" + Формат(ОбластьДобавленияРодитель.Низ, "ЧН=0; ЧГ=") + "_Свернуть";
			
		Иначе
			РисунокСвернутьРазвернуть = ТабличныйДокументМодели.Рисунки["R" + Формат(ОбластьДобавленияРодитель.Низ, "ЧН=0; ЧГ=") + "_Свернуть"];
			
		КонецЕсли;
		
		РисунокСвернутьРазвернуть.Картинка = БиблиотекаКартинок.CRM_Свернтуь;
		
		РисунокСвернутьРазвернуть.Расположить(ОбластьДобавленияРодитель);
		РисунокСвернутьРазвернуть.РазмерКартинки = РазмерКартинки.Пропорционально;
		РисунокСвернутьРазвернуть.Линия 		 = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		РисунокСвернутьРазвернуть.Лево  		 = РисунокСвернутьРазвернуть.Лево + 0.5 + (ОбластьДобавленияРодитель.Отступ - 2) * 1.5;
		РисунокСвернутьРазвернуть.Верх  		 = РисунокСвернутьРазвернуть.Верх + 0.5;
		РисунокСвернутьРазвернуть.Ширина 		 = 3;
		РисунокСвернутьРазвернуть.Высота 		 = 3;	
		РисунокСвернутьРазвернуть.ЦветФона		 = ЦветФона;
		
		//Служебное поле
		ОбластьКартинка.Текст = "*";
		
	КонецЕсли;
	
	Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
	
	//Этап
	ОбластьРедактирования.Текст 	  = СтрокаДерева.Этап;
	ОбластьРедактирования.Расшифровка = СтрокаДерева.Этап;
	
	ЗаполнитьКартинкуДанныхСтрокиТабличногоДокументаМодели(Форма, ОбластьРедактирования, СтрокаДерева);
	
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	//Оформление
	Если ЗначениеЗаполнено(СтрокаДерева.Этап)
	  И СтрокаДерева.ИдентификаторСтроки = Форма.ИдентификаторСтрокиВедущий Тогда
		ОбластьРедактирования.Шрифт = Новый Шрифт(,, Истина);
		
	Иначе	
		ОбластьРедактирования.Шрифт = Новый Шрифт();	
		
	КонецЕсли;
	
	Если Идентификатор = ТекущийИдентификатор Тогда
		Форма.Элементы.ТабличныйДокументМодели.ТекущаяОбласть = ОбластьРедактирования;
	
	КонецЕсли;
		
	//Продолжительность
	ОбластьРедактирования = ТабличныйДокументМодели.Область(СтрокаОбласти + "C2");	
	ОбластьРедактирования.Расшифровка = "ПродолжительностьДней";
	
	ОбластьРедактирования.СодержитЗначение = Истина;
	ОбластьРедактирования.ТипЗначения      = Новый ОписаниеТипов("Число");
	ОбластьРедактирования.Значение    	   = СтрокаДерева.ПродолжительностьДней;
	
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	//Подразделение
	ОбластьРедактирования = ТабличныйДокументМодели.Область(СтрокаОбласти + "C3");	
	ОбластьРедактирования.Расшифровка = "Подразделение";
	
	ОбластьРедактирования.СодержитЗначение = Истина;
	ОбластьРедактирования.ТипЗначения      = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ОбластьРедактирования.Значение    	   = СтрокаДерева.Подразделение;
		
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	//Отсрочка старта
	ОбластьРедактирования = ТабличныйДокументМодели.Область(СтрокаОбласти + "C4");	
	ОбластьРедактирования.Расшифровка = "ОтсрочкаСтартаДней";
	
	ОбластьРедактирования.СодержитЗначение = Истина;
	ОбластьРедактирования.ТипЗначения      = Новый ОписаниеТипов("Число");
	ОбластьРедактирования.Значение    	   = СтрокаДерева.ОтсрочкаСтартаДней;
	
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	//Тип связи
	ОбластьРедактирования = ТабличныйДокументМодели.Область(СтрокаОбласти + "C5");	
	ОбластьРедактирования.Расшифровка = "ТипСвязи";
	
	ОбластьРедактирования.СодержитЗначение = Истина;
	ОбластьРедактирования.ТипЗначения      = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_ТипыСвязейЭтапов");
	ОбластьРедактирования.Значение    	   = СтрокаДерева.ТипСвязи;
	
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	//Отсрочка
	ОбластьРедактирования = ТабличныйДокументМодели.Область(СтрокаОбласти + "C6");	
	ОбластьРедактирования.Расшифровка = "ОтсрочкаДней";
	
	ОбластьРедактирования.СодержитЗначение = Истина;
	ОбластьРедактирования.ТипЗначения      = Новый ОписаниеТипов("Число");
	ОбластьРедактирования.Значение    	   = СтрокаДерева.ОтсрочкаДней;
	
	ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, ОбластьЭталон);
	
	//Служебные поля
	ОбластьРедактирования	    	  = ТабличныйДокументМодели.Область(СтрокаОбласти + "C7");	
	ОбластьРедактирования.Текст 	  = Идентификатор;
	ОбластьРедактирования.Расшифровка = Идентификатор;
		
КонецПроцедуры // ЗаполнитьДанныеСтрокиТабличногоДокумента()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьКартинкуДанныхСтрокиТабличногоДокументаМодели(Форма, ОбластьРедактирования, СтрокаДерева)
		
	Картинка = Форма.СоответствиеКоллекцииКартинокТипаЭтапа.Получить(СтрокаДерева.ИндексКартинки);
	Если Картинка <> Неопределено Тогда
		ОбластьРедактирования.Отступ = ОбластьРедактирования.Отступ + 2;
					
		Рисунок = Форма.ТабличныйДокументМодели.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Рисунок.Картинка = Картинка;
		
		Рисунок.Имя = "R" + Формат(ОбластьРедактирования.Низ, "ЧН=0; ЧГ=") + "_ТипЭтапа";
		
		Рисунок.Расположить(ОбластьРедактирования);
		Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
		Рисунок.Линия 		   = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		Рисунок.Лево  		   = Рисунок.Лево + (ОбластьРедактирования.Отступ - 4) * 1.5;
		Рисунок.Ширина 		   = 3;
		Рисунок.ЦветФона	   = ОбластьРедактирования.ЦветФона;
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКартинкуДанныхСтрокиТабличногоДокументаМодели()

&НаКлиенте
Процедура ПеренестиДанныеТабличногоДокументаМодели(ОбластьРедактирования)
	
	ТекущиеДанные = Элементы.ДеревоМодели.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	СтрокаОбласти = "R" + Формат(ОбластьРедактирования.Низ, "ЧН=0; ЧГ=");
	ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C7");
	Если ОбластьИдентификатора.Расшифровка = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	
	КонецЕсли;
	
	Для Сч = 2 По 6 Цикл
		ОбластьЗначения = ТабличныйДокументМодели.Область(СтрокаОбласти + "C" + Формат(Сч, "ЧН=0; ЧГ="));	
		ТекущиеДанные[ОбластьЗначения.Расшифровка] = ОбластьЗначения.Значение;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТипСвязи)
	  ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ОтсрочкаДней)Тогда
		СвязатьЭтапДерева();	
		
	Иначе
		ОбновитьДиаграмму(ЭтаФорма);
	
	КонецЕсли;
	
КонецПроцедуры // ПеренестиДанныеТабличногоДокументаМодели()

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьОбластьРедактирования(Форма, ОбластьРедактирования, Знач ОбластьЭталон = Неопределено)

	Если ОбластьЭталон = Неопределено Тогда
		ОбластьЭталон = Форма.ТабличныйДокументМодели.Область(1,1,1,1);
	КонецЕсли;
	
	ОбластьРедактирования.ГраницаСверху = ОбластьЭталон.ГраницаСверху;
	ОбластьРедактирования.ГраницаСлева  = ОбластьЭталон.ГраницаСлева;
	ОбластьРедактирования.ГраницаСправа = ОбластьЭталон.ГраницаСправа;
	ОбластьРедактирования.ГраницаСнизу  = ОбластьЭталон.ГраницаСнизу;
	
	ОбластьРедактирования.ЦветРамки  	= ОбластьЭталон.ЦветРамки;
	ОбластьРедактирования.ВысотаСтроки  = 11;
	
	ОбластьРедактирования.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		
КонецПроцедуры // ОформитьОбластьРедактирования()

&НаКлиенте
Процедура СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(ЭлементыДерева, Видимость)
		
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл		
		ТабличныйДокументМодели.Область(СтрокаДерева.АдресСтрокиОбласти).Видимость = Видимость;				
		СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Видимость);
	
	КонецЦикла;
	
КонецПроцедуры // СвернутьРазвернутьСтрокиТабличногоДокументаРекурсивно()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДиаграмму(Форма)

	МаксимальнаяДата = NULL;
	МинимальнаяДата  = NULL;
	
	ТабличныйДокументМодели = Форма.ТабличныйДокументМодели;
	
	ДиаграммаРисунок = ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];
	ДиаграммаРисунок.Расположить(ТабличныйДокументМодели.Область(1, 9, ТабличныйДокументМодели.ВысотаТаблицы, 9));
	
	ДиаграммаОбъект = ДиаграммаРисунок.Объект;
	
	ДиаграммаОбъект.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.Право;
	ДиаграммаОбъект.Обновление = Ложь;
		
	ОтображатьДиаграммуГанта = Форма.Элементы.ОтображатьДиаграммуГанта.Пометка;
	ТабличныйДокументМодели.Область(,9, ,9).Видимость = ОтображатьДиаграммуГанта;
	
	ДиаграммаОбъект.Очистить();
	Если Не ОтображатьДиаграммуГанта Тогда
		Возврат;
		
	КонецЕсли;

	ДатаНачала = НачалоДня(ТекущаяДата());
	
	Серия = ДиаграммаОбъект.Серии.Добавить();
	
	Серия.ШтриховкаМеждуИнтервалами = Истина;
	Для Сч = 3 По ТабличныйДокументМодели.ВысотаТаблицы Цикл
		СтрокаОбласти = "R" + Формат(Сч, "ЧН=0; ЧГ=");
		ОбластьИдентификатора = ТабличныйДокументМодели.Область(СтрокаОбласти + "C7");		
		
		ДанныеСтрокиДерева = Форма.ДеревоМодели.НайтиПоИдентификатору(ОбластьИдентификатора.Расшифровка);
		Если ДанныеСтрокиДерева = Неопределено Тогда
			Продолжить;
			
		КонецЕсли;
		
		Наименование = ТабличныйДокументМодели.Область(СтрокаОбласти + "C1").Текст;	
		
		Форма.БуферРасчетаИнтервала.Очистить();
		СтруктураИнтервала = CRM_УправлениеПроектамиКлиентСервер.ПолучитьСтруктуруДанныхИнервала(Форма, ДанныеСтрокиДерева, ДатаНачала);
		
		Начало 		 = СтруктураИнтервала.Начало;
		Окончание 	 = СтруктураИнтервала.Окончание;
				
		ИдентифкаторТочки = ДанныеСтрокиДерева.ИдентификаторСтроки;
		
		Родитель = ДанныеСтрокиДерева.ПолучитьРодителя();
		Если Родитель <> Неопределено Тогда 
			ИдентифкаторТочкиРодителя = Родитель.ИдентификаторСтроки;			
		КонецЕсли;	
		
		Точка = ДиаграммаОбъект.УстановитьТочку(ИдентифкаторТочки, ИдентифкаторТочкиРодителя);
		Точка.Текст = " ";
		
		Значение = ДиаграммаОбъект.ПолучитьЗначение(Точка, Серия);
		Значение.Очистить();
		
		// Если надо, корректируем максимальную и минимальную даты.
		Если МаксимальнаяДата = NULL 
		  ИЛИ МаксимальнаяДата < Начало + (Окончание - Начало) Тогда
			МаксимальнаяДата = Начало + (Окончание - Начало);
		КонецЕсли;
		
		Если МинимальнаяДата = NULL Или МинимальнаяДата > Начало Тогда
			МинимальнаяДата = Начало;
		КонецЕсли;	
		
		Значение.Редактирование = ДанныеСтрокиДерева.Зависимости.Количество() = 0;
		
		Интервал = Значение.Добавить();
		Интервал.Начало = Начало;
		Интервал.Конец  = Окончание;
		
		Если ДанныеСтрокиДерева.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
			Интервал.Цвет = Форма.ЦветИнтервалаКонтрольнойТочки;
		Иначе	
			Интервал.Цвет = Форма.ЦветИнтервалаЭтапа;
		КонецЕсли;
		
	КонецЦикла;	
	
	Пока Истина Цикл
		Попытка
			ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Получить(0).Видимость = Ложь;
			ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Удалить(ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Получить(1));
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	ШиринаКолонки = ДиаграммаРисунок.Ширина;
	Попытка
		Дни    = (МаксимальнаяДата - МинимальнаяДата) / 86400;
	Исключение
		Дни = 7;
	КонецПопытки;
	Если Не ((ШиринаКолонки >= 283 и Дни <=78)  или 
		 (ШиринаКолонки >= 181 и Дни <=58)  или 
		 (ШиринаКолонки >= 140 и Дни <=48)  или 
		 (ШиринаКолонки >= 74 и Дни <=38)  или 
		 (ШиринаКолонки >= 85 и Дни <=33)  или 
		 (ШиринаКолонки >= 38 и Дни <=29)  или 
		 (ШиринаКолонки >= 48 и Дни <=31)  или 
		 (ШиринаКолонки >= 85 и Дни <=33)  или 
		  (ШиринаКолонки >= 555 и Дни <=133))
		Тогда
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Месяц;
		ЭлементШкалы.ЛинииДелений = Новый Линия( ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Неделя;
		ЭлементШкалы.Формат	= "ДФ='ddd d'";
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
	Иначе
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.Неделя;
		ЭлементШкалы.ЛинииДелений = Новый Линия( ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
		ЭлементШкалы = ДиаграммаОбъект.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		ЭлементШкалы.Видимость = Истина;
		ЭлементШкалы.Единица   = ТипЕдиницыШкалыВремени.День;
		ЭлементШкалы.ФорматДня = ФорматДняШкалыВремени.ДеньНедели;
		ЭлементШкалы.ОтображатьПериодическиеМетки = Истина;
		
	КонецЕсли;
	
	//Связи
	Для каждого СтрокаДерева Из Форма.ДеревоМодели.ПолучитьЭлементы() Цикл
		СформироватьСвязиДиаграммыРекурсивно(Форма, СтрокаДерева.ПолучитьЭлементы(), ДиаграммаОбъект, Серия);
	КонецЦикла;
	
	ДиаграммаОбъект.ПоказатьУровеньТочек(0); 
	Форма.ПолосаРегулированияШириныДиаграммыГанта = ТабличныйДокументМодели.Область(, 9, ,9).ШиринаКолонки;
	
	ДиаграммаОбъект.Обновление = Истина;
	
КонецПроцедуры // ОбновитьДиаграмму()

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьСвязиДиаграммыРекурсивно(Форма, ЭлементыДерева, ДиаграммаОбъект, Серия)

	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		ТекущаяТочка = ДиаграммаОбъект.УстановитьТочку(СтрокаДерева.ИдентификаторСтроки);
		Для каждого СтрокаСвязи Из СтрокаДерева.Связи Цикл
			ТочкаНачала = ДиаграммаОбъект.УстановитьТочку(СтрокаСвязи.ИдентификаторСтроки);
			Значение = ДиаграммаОбъект.ПолучитьЗначение(ТочкаНачала, Серия);
			Для Каждого Интервал Из Значение Цикл
				ИнтервалНачала = Интервал;
				Прервать;
				
			КонецЦикла;				
			
			Значение = ДиаграммаОбъект.ПолучитьЗначение(ТекущаяТочка, Серия);
			Для Каждого Интервал Из Значение Цикл
				ИнтервалКонца = Интервал;
				Прервать;
				
			КонецЦикла;
			
			Попытка
				СвязьДиаграммы = ИнтервалКонца.Добавить(ИнтервалНачала);
				
				СвязьДиаграммы.ТипСвязи = ПолучитьТипСвязиДиаграммыГанта(СтрокаСвязи.ТипСвязи);
				СвязьДиаграммы.Цвет     = ?(СтрокаДерева.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка"),
					Форма.ЦветИнтервалаКонтрольнойТочки, Форма.ЦветИнтервалаЭтапа);
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		СформироватьСвязиДиаграммыРекурсивно(Форма, СтрокаДерева.ПолучитьЭлементы(), ДиаграммаОбъект, Серия);
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьСвязиВДиаграмме()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТипСвязиДиаграммыГанта(ТипСвязи)
	
	Если ТипСвязи = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.НачалоНачало") Тогда
		Возврат ТипСвязиДиаграммыГанта.НачалоНачало;
		
	ИначеЕсли ТипСвязи = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.ОкончаниеНачало") Тогда
		Возврат ТипСвязиДиаграммыГанта.КонецНачало;
		
	ИначеЕсли ТипСвязи = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.ОкончаниеОкончание") Тогда
		Возврат ТипСвязиДиаграммыГанта.КонецКонец;
		
	ИначеЕсли ТипСвязи = ПредопределенноеЗначение("Перечисление.CRM_ТипыСвязейЭтапов.НачалоОкончание") Тогда
		Возврат ТипСвязиДиаграммыГанта.НачалоКонец;
		
	Иначе
		Возврат ТипСвязиДиаграммыГанта.КонецНачало;	
		
	КонецЕсли;

КонецФункции // ПолучитьТипСвязиДиаграммыГанта()

&НаКлиенте
Процедура ОбновитьДанныеПоДиаграмме()
	
КонецПроцедуры // ОбновитьДанныеПоДиаграмме()

&НаКлиентеНаСервереБезКонтекста
Процедура СвернутьРазвернутьТочкуДиаграммы(Форма, ИдентифкаторТочки, Развернуть, Знач ДиаграммаОбъект = Неопределено)

	Если ДиаграммаОбъект = Неопределено Тогда
		ДиаграммаРисунок = Форма.ТабличныйДокументМодели.Рисунки["ДиаграммаГанта"];	
		ДиаграммаОбъект = ДиаграммаРисунок.Объект;
		
	КонецЕсли;

	Точка = ДиаграммаОбъект.УстановитьТочку(ИдентифкаторТочки);
	Если Развернуть Тогда
		ДиаграммаОбъект.РазвернутьТочку(Точка, Истина);
	Иначе	
		ДиаграммаОбъект.СвернутьТочку(Точка, Истина);
	КонецЕсли;
	
КонецПроцедуры // СвернутьТочкуДиаграммы()

&НаКлиенте
Процедура ЗаполнитьМассивИдентификаторовУдаляемыхСтрокРекурсивно(ЭлементыДерева, МассивИдентификаторовУдаляемыхСтрок)
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		МассивИдентификаторовУдаляемыхСтрок.Добавить(СтрокаДерева.ИдентификаторСтроки);		
		ЗаполнитьМассивИдентификаторовУдаляемыхСтрокРекурсивно(СтрокаДерева.ПолучитьЭлементы(), МассивИдентификаторовУдаляемыхСтрок);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьМассивИдентификаторовУдаляемыхСтрокРекурсивно()

&НаКлиенте
Процедура ОчиститьЗависимостиСвязиЭтапаРекурсивно(ЭлементыДерева, ИдентификаторСтроки)
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		СтрокиУдаления = СтрокаДерева.Связи.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
		Для каждого СтрокаУдаления Из СтрокиУдаления Цикл
			СтрокаДерева.Связи.Удалить(СтрокаУдаления);
		
		КонецЦикла;
		
		СтрокиУдаления = СтрокаДерева.Зависимости.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
		Для каждого СтрокаУдаления Из СтрокиУдаления Цикл
			СтрокаДерева.Зависимости.Удалить(СтрокаУдаления);
		
		КонецЦикла;
		
		ОчиститьЗависимостиСвязиЭтапаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), ИдентификаторСтроки);
		
	КонецЦикла;

КонецПроцедуры // ОчиститьЗависимостиСвязиЭтапаРекурсивно()

#КонецОбласти               
