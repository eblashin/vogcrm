
///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаСервере
Функция СформироватьТекстЗапросаКонтакты()
	Если Не Объект.СинхронизироватьКлиенты И Не Объект.СинхронизироватьКонтактныеЛица Тогда
		Возврат "ВЫБРАТЬ NULL";
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	бДобавленоРазрешенные = Ложь;
	
	Если Объект.СинхронизироватьКлиенты Тогда
		ТекстЗапроса = ТекстЗапроса +
		"
		|ВЫБРАТЬ" + ?(Не бДобавленоРазрешенные, " РАЗРЕШЕННЫЕ", "") + "
		|	Партнеры.Ссылка КАК Клиент" + ?(Объект.СинхронизироватьКонтактныеЛица, ",", "") + "
		|" + ?(Объект.СинхронизироватьКонтактныеЛица, "NULL КАК КонтактноеЛицо", "") + "
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|";
		бДобавленоРазрешенные = Истина;
	КонецЕсли;
	
	Если Объект.СинхронизироватьКонтактныеЛица Тогда
		Если Объект.СинхронизироватьКлиенты Тогда
			ТекстЗапроса = ТекстЗапроса +
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
			
		ТекстЗапроса = ТекстЗапроса +
		"	
		|ВЫБРАТЬ" + ?(Не бДобавленоРазрешенные, " РАЗРЕШЕННЫЕ", "") + "
		|" + ?(Объект.СинхронизироватьКлиенты, "NULL КАК Клиент,", "") + "
		|	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|";
		
		бДобавленоРазрешенные = Истина;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция СформироватьТекстЗапросаСобытия()
	Если Не Объект.СинхронизироватьСобытия Тогда
		Возврат "ВЫБРАТЬ NULL";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Мероприятия.Ссылка КАК Мероприятие
	|ИЗ
	|	Документ.CRM_Мероприятие КАК Мероприятия
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция СформироватьТекстЗапросаПочтовыеСообщения()
	Если Не Объект.СинхронизироватьПочтовыеСообщенияВходящие И Не Объект.СинхронизироватьПочтовыеСообщенияОтправленные Тогда
		Возврат "ВЫБРАТЬ NULL";
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	бДобавленоРазрешенные = Ложь;
	
	Если Объект.СинхронизироватьПочтовыеСообщенияВходящие Тогда
		ТекстЗапроса = ТекстЗапроса +
		"
		|ВЫБРАТЬ" + ?(Не бДобавленоРазрешенные, " РАЗРЕШЕННЫЕ", "") + "
		|	ЭлектронноеПисьмоВходящее.Ссылка КАК ЭлектронноеПисьмоВходящее" + ?(Объект.СинхронизироватьПочтовыеСообщенияОтправленные, ",", "") + "
		|" + ?(Объект.СинхронизироватьПочтовыеСообщенияОтправленные, "NULL КАК ЭлектронноеПисьмоИсходящее", "") + "
		|ИЗ
		|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|";
		бДобавленоРазрешенные = Истина;
	КонецЕсли;
	
	Если Объект.СинхронизироватьПочтовыеСообщенияОтправленные Тогда
		Если Объект.СинхронизироватьПочтовыеСообщенияВходящие Тогда
			ТекстЗапроса = ТекстЗапроса +
			"
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
			
		ТекстЗапроса = ТекстЗапроса +
		"	
		|ВЫБРАТЬ" + ?(Не бДобавленоРазрешенные, " РАЗРЕШЕННЫЕ", "") + "
		|" + ?(Объект.СинхронизироватьПочтовыеСообщенияВходящие, "NULL КАК ЭлектронноеПисьмоВходящее,", "") + "
		|	ЭлектронноеПисьмоИсходящее.Ссылка КАК ЭлектронноеПисьмоИсходящее
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
		|";
		
		бДобавленоРазрешенные = Истина;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция СформироватьТекстЗапросаЗадачи()
	Если Не Объект.СинхронизироватьЗадачи Тогда
		Возврат "ВЫБРАТЬ NULL";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Задачи.Ссылка КАК Задача
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК Задачи
	|ГДЕ
	|	Задачи.CRM_Личная
	|	ИЛИ (
	|			Задачи.БизнесПроцесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|		И	Задачи.БизнесПроцесс <> ЗНАЧЕНИЕ(БизнесПроцесс.CRM_БизнесПроцесс.ПустаяСсылка)
	|		И	Задачи.БизнесПроцесс.КартаМаршрута = ЗНАЧЕНИЕ(Справочник.CRM_КартыМаршрутов.Поручение)
	|		)
	|";
	
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ПолучитьСКД(ТекстЗапроса)
	// Создание и настройка схемы компоновки данных.
	СКДДанные = Новый СхемаКомпоновкиДанных();
	
	ИсточникДанных = СКДДанные.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКДДанные.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = ТекстЗапроса;
	
	Настройки = СКДДанные.НастройкиПоУмолчанию;
	
	ДетальнаяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = Настройки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	Возврат  СКДДанные;

КонецФункции

Процедура СкопироватьОтборКомпоновкиДанных(ЭлементыПриемник, ЭлементыИсточник, ДоступныеПоляОтбора = Неопределено) Экспорт
	Для Каждого ЭлементОтбора Из ЭлементыИсточник Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НовыйЭлементОтбора = ЭлементыПриемник.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
			СкопироватьОтборКомпоновкиДанных(НовыйЭлементОтбора.Элементы, ЭлементОтбора.Элементы);
		Иначе
			Если ДоступныеПоляОтбора <> Неопределено Тогда
				Если ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Строка(ЭлементОтбора.ЛевоеЗначение))) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			НовыйЭлементОтбора = ЭлементыПриемник.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // СкопироватьОтборКомпоновкиДанных()

&НаСервере
Процедура ИнициализироватьСКДОтборовКонтактов()
	НастройкиКонтактов.Настройки.Отбор.Элементы.Очистить();
	
	ТекстЗапроса = СформироватьТекстЗапросаКонтакты();
	СКД = ПолучитьСКД(ТекстЗапроса);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	НастройкиКонтактов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСКДОтборовСобытий()
	НастройкиСобытий.Настройки.Отбор.Элементы.Очистить();
	
	ТекстЗапроса = СформироватьТекстЗапросаСобытия();
	СКД = ПолучитьСКД(ТекстЗапроса);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	НастройкиСобытий.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСКДОтборовПочтовыхСообщений()
	НастройкиПочтовыхСообщений.Настройки.Отбор.Элементы.Очистить();
	
	ТекстЗапроса = СформироватьТекстЗапросаПочтовыеСообщения();
	СКД = ПолучитьСКД(ТекстЗапроса);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	НастройкиПочтовыхСообщений.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСКДОтборовЗадач()
	НастройкиЗадач.Настройки.Отбор.Элементы.Очистить();
	
	ТекстЗапроса = СформироватьТекстЗапросаЗадачи();
	СКД = ПолучитьСКД(ТекстЗапроса);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	НастройкиЗадач.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиФормы(Форма)
	// Контакты
	Доступность = (Форма.Объект.СинхронизироватьКлиенты ИЛИ Форма.Объект.СинхронизироватьКонтактныеЛица);
	СписокЭлементов =
	"НастройкиКонтактовНастройкиОтбор
	|КонтактыМодифицированныеПосле
	|УдалятьПомеченныеНаУдаленияКонтакты
	|ДекорацияНастроитьСоответствияВидовКИ
	|ПапкаКонтактов
	|EMailAddessУчетнойЗаписиОбщихКонтактов
	|ДекорацияEMailAddessУчетнойЗаписиОбщихКонтактов
	|КонтактыОбмениватьсяТолькоНовымиОбъектами
	|
	|";
	Для НомерСтроки = 1 По СтрЧислоСтрок(СписокЭлементов) Цикл
		СтрЭлемент = СтрПолучитьСтроку(СписокЭлементов, НомерСтроки);
		Если ЗначениеЗаполнено(СтрЭлемент) Тогда
			Форма.Элементы[СтрЭлемент].Доступность = Доступность;
		КонецЕсли;
	КонецЦикла;
	// События
	Доступность = Форма.Объект.СинхронизироватьСобытия;
	СписокЭлементов =
	"СинхронизироватьКонтактыСобытий
	|ИскатьКонтактыПоАдресамEMail
	|НастройкиСобытийНастройкиОтбор
	|СобытияМодифицированныеПосле
	|УдалятьПомеченныеНаУдаленияСобытия
	|ПапкаКалендаря
	|EMailAddessУчетнойЗаписиОбщегоКалендаря
	|ДекорацияEMailAddessУчетнойЗаписиОбщегоКалендаря
	|СобытияОбмениватьсяТолькоНовымиОбъектами
	|
	|";
	Для НомерСтроки = 1 По СтрЧислоСтрок(СписокЭлементов) Цикл
		СтрЭлемент = СтрПолучитьСтроку(СписокЭлементов, НомерСтроки);
		Если ЗначениеЗаполнено(СтрЭлемент) Тогда
			Форма.Элементы[СтрЭлемент].Доступность = Доступность;
		КонецЕсли;
	КонецЦикла;
	Если Доступность Тогда
		Форма.Элементы.ИскатьКонтактыПоАдресамEMail.Доступность = Форма.Объект.СинхронизироватьКонтактыСобытий;
	КонецЕсли;
	Доступность = ((Форма.Объект.СинхронизироватьКлиенты ИЛИ Форма.Объект.СинхронизироватьКонтактныеЛица) ИЛИ (Форма.Объект.СинхронизироватьСобытия И Форма.Объект.СинхронизироватьКонтактыСобытий));
	Форма.Элементы.ГруппаДляКонтактов.Доступность = Доступность;
	Форма.Элементы.ДекорацияНастроитьСоответствияВидовКИ.Доступность = Доступность;
	Форма.Элементы.EMailAddessУчетнойЗаписиОбщихКонтактов.Доступность = Доступность;
	Форма.Элементы.ДекорацияEMailAddessУчетнойЗаписиОбщихКонтактов.Доступность = Доступность;
	// Почтовые сообщения
	Доступность = Форма.Объект.СинхронизироватьПочтовыеСообщенияВходящие ИЛИ Форма.Объект.СинхронизироватьПочтовыеСообщенияОтправленные;
	ДоступностьВходящие = Форма.Объект.СинхронизироватьПочтовыеСообщенияВходящие;
	ДоступностьОтправленные = Форма.Объект.СинхронизироватьПочтовыеСообщенияОтправленные;
	Форма.Элементы.СинхронизироватьКонтактыПочтовыхСообщенийВходящие.Доступность = ДоступностьВходящие;
	Форма.Элементы.СинхронизироватьКонтактыПочтовыхСообщенийОтправленные.Доступность = ДоступностьОтправленные;
	Форма.Элементы.ИскатьКонтактыПочтовыхСообщенийПоАдресамEMail.Доступность = Доступность
		И (Форма.Объект.СинхронизироватьКонтактыПочтовыхСообщенийВходящие Или Форма.Объект.СинхронизироватьКонтактыПочтовыхСообщенийОтправленные);
	Форма.Элементы.НастройкиПочтовыхСообщенийНастройкиОтбор.Доступность = Доступность;
	Форма.Элементы.УчетнаяЗаписьЭлектроннойПочты.Доступность = Доступность;
	Форма.Элементы.ГруппаПочтовыеСообщенияМодифицированныеПослеВходящие.Доступность = ДоступностьВходящие;
	Форма.Элементы.ГруппаПочтовыеСообщенияМодифицированныеПослеОтправленные.Доступность = ДоступностьОтправленные;
	
	Форма.Элементы.ПапкиВходящихПисем.Доступность = ДоступностьВходящие;
	Форма.Элементы.ПапкиОтправленныхПисем.Доступность = ДоступностьОтправленные;
	Форма.Элементы.ПапкиВходящихПисемПапка1С.Доступность = Форма.Элементы.ПапкиВходящихПисем.Доступность И ЗначениеЗаполнено(ЗначениеЗаполнено(Форма.Объект.УчетнаяЗаписьЭлектроннойПочты));
	Форма.Элементы.ПапкиОтправленныхПисемПапка1С.Доступность = Форма.Элементы.ПапкиОтправленныхПисем.Доступность И ЗначениеЗаполнено(ЗначениеЗаполнено(Форма.Объект.УчетнаяЗаписьЭлектроннойПочты));
	Форма.Элементы.СоздаватьСобытияПоПочтовымСообщениям.Доступность = Доступность И ЗначениеЗаполнено(Форма.Объект.УчетнаяЗаписьЭлектроннойПочты);
	Форма.Элементы.УдалятьПомеченныеНаУдаленияПочтовыеСообщения.Доступность = Доступность;
	// Задачи
	Доступность = Форма.Объект.СинхронизироватьЗадачи;
	СписокЭлементов =
	"НастройкиЗадачНастройкиОтбор
	|ГруппаЗадачиМодифицированныеПосле
	|УдалятьПомеченныеНаУдаленияЗадачи
	|ПапкаЗадач
	|
	|";
	Для НомерСтроки = 1 По СтрЧислоСтрок(СписокЭлементов) Цикл
		СтрЭлемент = СтрПолучитьСтроку(СписокЭлементов, НомерСтроки);
		Если ЗначениеЗаполнено(СтрЭлемент) Тогда
			Форма.Элементы[СтрЭлемент].Доступность = Доступность;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПроверитьПодключениеНаСервере()
	СтруктураПодключения = CRM_MSExchangeСерверЭкспортныеМетоды.СформироватьСтруктуруПодключения(Объект);
	Возврат CRM_MSExchangeСерверЭкспортныеМетоды.ПроверитьПодключение(СтруктураПодключения);
КонецФункции

&НаСервере
Функция СтруктураПапокЗаполненаДляУчетнойЗаписи()
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана учетная запись!'"),, "Объект.УчетнаяЗапись");
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	СтруктурыПапокMSExchange.Ссылка
	|ИЗ
	|	Справочник.CRM_СтруктурыПапокMSExchange КАК СтруктурыПапокMSExchange
	|ГДЕ
	|	СтруктурыПапокMSExchange.СерверMSExchange = &СерверMSExchange
	|	И СтруктурыПапокMSExchange.УчетнаяЗапись = &УчетнаяЗапись
	|");
	Запрос.УстановитьПараметр("СерверMSExchange", Объект.УчетнаяЗапись.СерверMSExchange);
	Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.УчетнаяЗапись);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

&НаСервере
Процедура ЗагрузитьСтруктуруПапокВ1С()
	СтрокаОшибки = "";
	СтруктураПодключения = CRM_MSExchangeСерверЭкспортныеМетоды.СформироватьСтруктуруПодключения(Объект);
	CRM_MSExchangeВызовСервера.ЗагрузитьОбновитьСтруктуруПапокВ1С(Объект, СтруктураПодключения, СтрокаОшибки, Истина);
	Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьОчиститьПапкиMSExchange()
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Если	Объект.ПапкаКонтактов.СерверMSExchange <> Объект.УчетнаяЗапись.СерверMSExchange
			Или	Объект.ПапкаКонтактов.УчетнаяЗапись <> Объект.УчетнаяЗапись Тогда
			//
			Объект.ПапкаКонтактов = Справочники.CRM_СтруктурыПапокMSExchange.ПустаяСсылка();
		КонецЕсли;
		Если	Объект.ПапкаКалендаря.СерверMSExchange <> Объект.УчетнаяЗапись.СерверMSExchange
			Или	Объект.ПапкаКалендаря.УчетнаяЗапись <> Объект.УчетнаяЗапись Тогда
			//
			Объект.ПапкаКалендаря = Справочники.CRM_СтруктурыПапокMSExchange.ПустаяСсылка();
		КонецЕсли;
		
		нИндекс = 0;
		Пока нИндекс < Объект.ПапкиВходящихПисем.Количество() Цикл
			Если	Объект.ПапкиВходящихПисем[нИндекс].ПапкаMSExchange.СерверMSExchange <> Объект.УчетнаяЗапись.СерверMSExchange
				Или	Объект.ПапкиВходящихПисем[нИндекс].ПапкаMSExchange.УчетнаяЗапись <> Объект.УчетнаяЗапись Тогда
				//
				Объект.ПапкиВходящихПисем.Удалить(нИндекс);
			Иначе
				нИндекс = нИндекс + 1;
			КонецЕсли;
		КонецЦикла;
		
		нИндекс = 0;
		Пока нИндекс < Объект.ПапкиОтправленныхПисем.Количество() Цикл
			Если	Объект.ПапкиОтправленныхПисем[нИндекс].ПапкаMSExchange.СерверMSExchange <> Объект.УчетнаяЗапись.СерверMSExchange
				Или	Объект.ПапкиОтправленныхПисем[нИндекс].ПапкаMSExchange.УчетнаяЗапись <> Объект.УчетнаяЗапись Тогда
				//
				Объект.ПапкиОтправленныхПисем.Удалить(нИндекс);
			Иначе
				нИндекс = нИндекс + 1;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Объект.ПапкаКонтактов = Справочники.CRM_СтруктурыПапокMSExchange.ПустаяСсылка();
		Объект.ПапкаКалендаря = Справочники.CRM_СтруктурыПапокMSExchange.ПустаяСсылка();
		
		Объект.ПапкиВходящихПисем.Очистить();
		Объект.ПапкиОтправленныхПисем.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторРегламентногоЗаданияCRM_ОбменДаннымиСMSExchange()
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.CRM_ОбменДаннымиСMSExchange);
	Возврат Задание.УникальныйИдентификатор;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	ПроверитьОчиститьПапкиMSExchange();
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьКлиентыПриИзменении(Элемент)
	ИнициализироватьСКДОтборовКонтактов();
	УправлениеЭлементамиФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьКонтактныеЛицаПриИзменении(Элемент)
	ИнициализироватьСКДОтборовКонтактов();
	УправлениеЭлементамиФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСобытияПриИзменении(Элемент)
	ИнициализироватьСКДОтборовСобытий();
	УправлениеЭлементамиФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьПочтовыеСообщенияВходящиеПриИзменении(Элемент)
	ИнициализироватьСКДОтборовПочтовыхСообщений();
	УправлениеЭлементамиФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьПочтовыеСообщенияОтправленныеПриИзменении(Элемент)
	ИнициализироватьСКДОтборовПочтовыхСообщений();
	УправлениеЭлементамиФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьЗадачиПриИзменении(Элемент)
	ИнициализироватьСКДОтборовЗадач();
	УправлениеЭлементамиФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьЭлектроннойПочтыПриИзменении(Элемент)
	Объект.СоздаватьСобытияПоПочтовымСообщениям = Не ЗначениеЗаполнено(Объект.УчетнаяЗаписьЭлектроннойПочты);
	УправлениеЭлементамиФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьКонтактыПочтовыхСообщенийВходящиеПриИзменении(Элемент)
	ИнициализироватьСКДОтборовПочтовыхСообщений();
	УправлениеЭлементамиФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьКонтактыСобытийПриИзменении(Элемент)
	УправлениеЭлементамиФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКонтактовНастройкиОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСобытийНастройкиОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастроитьСоответствияВидовКИНажатие(Элемент)
	ПараметрыФормы = Новый Структура("Таблицы,КИСинхронизироватьТелефоны,КИСинхронизироватьАдреса",
		Новый Структура(), Объект.КИСинхронизироватьТелефоны, Объект.КИСинхронизироватьАдреса);
	//
	
	МассивТаблиц = Новый Массив();
	МассивТаблиц.Добавить("СоответствиеВидовКИТелефоныПартнера");
	МассивТаблиц.Добавить("СоответствиеВидовКИТелефоныПартнераКомпания");
	МассивТаблиц.Добавить("СоответствиеВидовКИТелефоныКонтактногоЛица");
	МассивТаблиц.Добавить("СоответствиеВидовКИАдресаПартнера");
	МассивТаблиц.Добавить("СоответствиеВидовКИАдресаПартнераКомпания");
	МассивТаблиц.Добавить("СоответствиеВидовКИАдресаКонтактногоЛица");
	
	Для Каждого ТаблицаИмя Из МассивТаблиц Цикл
		МассивСтруктур = Новый Массив();
		Для Каждого СтрокаТаблицы Из Объект[ТаблицаИмя] Цикл
			МассивСтруктур.Добавить(Новый Структура("Имя,ВидКИ", СтрокаТаблицы.Имя, СтрокаТаблицы.ВидКИ));
		КонецЦикла;
		ПараметрыФормы.Таблицы.Вставить(ТаблицаИмя, МассивСтруктур);
	КонецЦикла;
	
	ОткрытьФорму("Справочник.CRM_НастройкиОбменаСMSExchange.Форма.НастройкаСоответствияКонтактнойИнформации", ПараметрыФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ДекорацияНастроитьСоответствияВидовКИЗавершение", ЭтотОбъект, МассивТаблиц));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастроитьСоответствияВидовКИЗавершение(Результат, МассивТаблиц) Экспорт
	Если Результат <> Неопределено И Результат.ДанныеБылиИзменены Тогда
		Для Каждого ТаблицаИмя Из МассивТаблиц Цикл
			Объект[ТаблицаИмя].Очистить();
			Для Каждого СтрокаТаблицы Из Результат[ТаблицаИмя] Цикл
				НоваяСтрока = Объект[ТаблицаИмя].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			КонецЦикла;
		КонецЦикла;
		
		Объект.КИСинхронизироватьТелефоны = Результат.КИСинхронизироватьТелефоны;
		Объект.КИСинхронизироватьАдреса = Результат.КИСинхронизироватьАдреса;
		
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПапкиMSExchange(Элемент)
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана учетная запись!'"));
		Возврат;
	КонецЕсли;
	
	Если Не СтруктураПапокЗаполненаДляУчетнойЗаписи() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗагрузитьСтруктураПапокЗавершение", ЭтотОбъект, Элемент);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Для учетной записи '") + """" + Строка(Объект.УчетнаяЗапись) + """ " + НСтр("ru = 'еще не была загружена структура папок.
			|Выполнить загрузку сейчас?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ВопросЗагрузитьСтруктураПапокЗавершение(Неопределено, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗагрузитьСтруктураПапокЗавершение(Ответ, Элемент) Экспорт
	//
	Если Ответ <> Неопределено Тогда
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОчиститьСообщения();
			
			СтруктураРезультат = ПроверитьПодключениеНаСервере();
			Если Не СтруктураРезультат.Успешно Тогда
				ПоказатьПредупреждение(, СтруктураРезультат.СообщениеОшибки);
				Возврат;
			КонецЕсли;
			
			Состояние(НСтр("ru = 'Выполняется загрузка структуры папок MS Exchange...'"));
			ЗагрузитьСтруктуруПапокВ1С();
			Состояние("");
			
			Если НЕ СтруктураПапокЗаполненаДляУчетнойЗаписи() Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Отбор",
		Новый Структура("СерверMSExchange,УчетнаяЗапись",
			ПолучитьЗначениеРеквизита(Объект.УчетнаяЗапись, "СерверMSExchange"), Объект.УчетнаяЗапись));
	//
	//ПараметрыФормы.Вставить("ТолькоПапкиОбъектов");
	ОткрытьФорму("Справочник.CRM_СтруктурыПапокMSExchange.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПапкаКалендаряНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборПапкиMSExchange(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПапкаКонтактовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборПапкиMSExchange(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПапкаЗадачНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборПапкиMSExchange(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПапкиВходящихПисемПапкаMSExchangeНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборПапкиMSExchange(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПапкиОтправленныхПисемПапкаMSExchangeНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыборПапкиMSExchange(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УчаствуетВРегламентномЗаданииПриИзменении(Элемент)
	Элементы.ДекорацияНастройкаРегламентногоЗаданияОбменаСMSExchange.Доступность = Объект.УчаствуетВРегламентномЗадании;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаРегламентногоЗаданияОбменаСMSExchangeНажатие(Элемент)
	ИдентификаторРегламентногоЗадания = ПолучитьИдентификаторРегламентногоЗаданияCRM_ОбменДаннымиСMSExchange();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор",	ИдентификаторРегламентногоЗадания);
	ПараметрыФормы.Вставить("Действие",			"Изменить");
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

&НаКлиенте
Функция ИндексСтраницы(Страница)
	Возврат Элементы.ПанельОсновная.ПодчиненныеЭлементы.Индекс(Страница);
КонецФункции

&НаКлиенте
Функция ИндексТекущейСтраницы()
	Возврат ИндексСтраницы(Элементы.ПанельОсновная.ТекущаяСтраница);
КонецФункции

&НаКлиенте
Функция ЭтоПоследняяСтраница(Страница = Неопределено)
	Если Страница = Неопределено Тогда
		ИндексСтраницы = ИндексТекущейСтраницы();
	Иначе
		ИндексСтраницы = ИндексСтраницы(Страница);
	КонецЕсли;
	
	Если ИндексСтраницы = Элементы.ПанельОсновная.ПодчиненныеЭлементы.Количество() - 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура Далее(Команда)
	Если ЭтоПоследняяСтраница() Тогда
		Если Записать() Тогда
			Закрыть();
		КонецЕсли;
	Иначе
		ИндексСтраницы = ИндексТекущейСтраницы();
		СледующаяСтраница = Элементы.ПанельОсновная.ПодчиненныеЭлементы[ИндексСтраницы + 1];
		Пока (Не СледующаяСтраница.Видимость Или Не СледующаяСтраница.Доступность) И Не ЭтоПоследняяСтраница(СледующаяСтраница) Цикл
			ИндексСтраницы = ИндексСтраницы + 1;
			СледующаяСтраница = Элементы.ПанельОсновная.ПодчиненныеЭлементы[ИндексСтраницы + 1];
		КонецЦикла;
		
		Элементы.ПанельОсновная.ТекущаяСтраница = СледующаяСтраница;
		
		Если ЭтоПоследняяСтраница() Тогда
			Элементы.Далее.Заголовок = НСтр("ru = 'Завершить'");
			Элементы.Далее.Картинка = БиблиотекаКартинок.ЗаписатьИЗакрыть;
		КонецЕсли;
		
		Если Не Элементы.Назад.Доступность Тогда
			Элементы.Назад.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ИндексСтраницы = ИндексТекущейСтраницы();
	Если ИндексСтраницы = 0 Тогда Возврат; КонецЕсли;
	
	ПредыдущаяСтраница = Элементы.ПанельОсновная.ПодчиненныеЭлементы[ИндексСтраницы - 1];
	Пока Не ПредыдущаяСтраница.Видимость Или Не ПредыдущаяСтраница.Доступность Цикл
		ИндексСтраницы = ИндексСтраницы - 1;
		Если ИндексСтраницы < 0 Тогда
			Прервать;
		КонецЕсли;
		ПредыдущаяСтраница = Элементы.ПанельОсновная.ПодчиненныеЭлементы[ИндексСтраницы - 1];
	КонецЦикла;
	Элементы.ПанельОсновная.ТекущаяСтраница = ПредыдущаяСтраница;
	
	Если Элементы.Далее.Заголовок <> НСтр("ru = 'Далее'") Тогда
		Элементы.Далее.Заголовок = НСтр("ru = 'Далее'");
		Элементы.Далее.Картинка = БиблиотекаКартинок.ПереместитьВправо;
	КонецЕсли;
	
	ИндексСтраницы = ИндексТекущейСтраницы();
	Если ИндексСтраницы = 0 Тогда
		Элементы.Назад.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	Если Не ЗначениеЗаполнено(Объект.Подключение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрано подключение!'"),, "Объект.Подключение");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана учетная запись!'"),, "Объект.УчетнаяЗапись");
		Возврат;
	КонецЕсли;
	
	СтруктураРезультат = ПроверитьПодключениеНаСервере();
	
	ПоказатьПредупреждение(, СтруктураРезультат.СообщениеОшибки);
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ЗаполнитьСписокЧасовыхПоясов()
	Элементы.СмещениеВремениВМинутах.СписокВыбора.Очистить();
	Минуты = -12 * 60;
	Пока Истина Цикл
		Если Минуты = 0 Тогда
			ПредставлениеСмещения = "(GMT 00:00)";
		Иначе
			ПредставлениеСмещения = "(GMT " + CRM_MSExchangeСерверЭкспортныеМетоды.ПолучитьСмещениеВремениСтрокойДляMSExchange(Минуты) + ")";
		КонецЕсли;
		Элементы.СмещениеВремениВМинутах.СписокВыбора.Добавить(Минуты, ПредставлениеСмещения);
		Минуты = Минуты + 30;
		Если Минуты > 12 * 60 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.ПанельОсновная.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	ЗаполнитьСписокЧасовыхПоясов();
	Если Объект.Ссылка.Пустая() Тогда
		ИнициализироватьСКДОтборовКонтактов();
		ИнициализироватьСКДОтборовСобытий();
		ИнициализироватьСКДОтборовПочтовыхСообщений();
		ИнициализироватьСКДОтборовЗадач();
		Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗаписьЭлектроннойПочты) Тогда
			Объект.СоздаватьСобытияПоПочтовымСообщениям = Истина;
		КонецЕсли;
		Объект.Пользователь = Пользователи.ТекущийПользователь();
		Объект.УчаствуетВРегламентномЗадании = Истина;	
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗаписьЭлектроннойПочты) И Не Объект.СоздаватьСобытияПоПочтовымСообщениям Тогда
			Объект.СоздаватьСобытияПоПочтовымСообщениям = Истина;
		КонецЕсли;
	КонецЕсли;
	УправлениеЭлементамиФормы(ЭтотОбъект);
	Элементы.ДекорацияНастройкаРегламентногоЗаданияОбменаСMSExchange.Доступность = Объект.УчаствуетВРегламентномЗадании;
	Если Не РольДоступна("полныеПрава") тогда
		Элементы.Пользователь.ТолькоПросмотр = Истина;	
		Элементы.УчаствуетВРегламентномЗадании.ТолькоПросмотр = Истина;
		Элементы.ДекорацияНастройкаРегламентногоЗаданияОбменаСMSExchange.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ИнициализироватьСКДОтборовКонтактов();
	ИнициализироватьСКДОтборовСобытий();
	ИнициализироватьСКДОтборовПочтовыхСообщений();
	ИнициализироватьСКДОтборовЗадач();
	
	// Восстановление отбора контактов.
	НастройкиКонтактов.Настройки.Отбор.Элементы.Очистить();
	СохраненныйОтбор = ТекущийОбъект.ХранилищеОтборКонтактов.Получить();
	Если ТипЗнч(СохраненныйОтбор) = Тип("ОтборКомпоновкиДанных") Тогда
		СкопироватьОтборКомпоновкиДанных(НастройкиКонтактов.Настройки.Отбор.Элементы, СохраненныйОтбор.Элементы, НастройкиКонтактов.Настройки.Отбор.ДоступныеПоляОтбора);
	КонецЕсли;
	
	// Восстановление отбора событий.
	НастройкиСобытий.Настройки.Отбор.Элементы.Очистить();;
	СохраненныйОтбор = ТекущийОбъект.ХранилищеОтборСобытий.Получить();
	Если ТипЗнч(СохраненныйОтбор) = Тип("ОтборКомпоновкиДанных") Тогда
		СкопироватьОтборКомпоновкиДанных(НастройкиСобытий.Настройки.Отбор.Элементы, СохраненныйОтбор.Элементы, НастройкиСобытий.Настройки.Отбор.ДоступныеПоляОтбора);
	КонецЕсли;
	
	// Восстановление отбора почтовых сообщений.
	НастройкиПочтовыхСообщений.Настройки.Отбор.Элементы.Очистить();;
	СохраненныйОтбор = ТекущийОбъект.ХранилищеОтборПочтовыхСообщений.Получить();
	Если ТипЗнч(СохраненныйОтбор) = Тип("ОтборКомпоновкиДанных") Тогда
		СкопироватьОтборКомпоновкиДанных(НастройкиПочтовыхСообщений.Настройки.Отбор.Элементы, СохраненныйОтбор.Элементы, НастройкиПочтовыхСообщений.Настройки.Отбор.ДоступныеПоляОтбора);
	КонецЕсли;
	
	// Восстановление отбора задач.
	НастройкиЗадач.Настройки.Отбор.Элементы.Очистить();
	СохраненныйОтбор = ТекущийОбъект.ХранилищеОтборЗадач.Получить();
	Если ТипЗнч(СохраненныйОтбор) = Тип("ОтборКомпоновкиДанных") Тогда
		СкопироватьОтборКомпоновкиДанных(НастройкиЗадач.Настройки.Отбор.Элементы, СохраненныйОтбор.Элементы, НастройкиЗадач.Настройки.Отбор.ДоступныеПоляОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Объект.Подключение.СерверMSExchange <> Объект.УчетнаяЗапись.СерверMSExchange Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Реквизит ""Сервер MS Exchange"" в подключении отличается от значения, указанного в учетной записи!'"),, "Объект.Подключение");
		Возврат;
	КонецЕсли;
	
	//Если Объект.СинхронизироватьПочтовыеСообщения
	
	Если Не Отказ Тогда
		// Сохранение отбора контактов.
		Если НастройкиКонтактов.Настройки.Отбор.Элементы.Количество() > 0 Тогда
			ТекущийОбъект.ХранилищеОтборКонтактов = Новый ХранилищеЗначения(НастройкиКонтактов.Настройки.Отбор, Новый СжатиеДанных(9));
		Иначе
			ТекущийОбъект.ХранилищеОтборКонтактов = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
		// Сохранение отбора событий
		Если НастройкиСобытий.Настройки.Отбор.Элементы.Количество() > 0 Тогда
			ТекущийОбъект.ХранилищеОтборСобытий = Новый ХранилищеЗначения(НастройкиСобытий.Настройки.Отбор, Новый СжатиеДанных(9));
		Иначе
			ТекущийОбъект.ХранилищеОтборСобытий = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
		// Сохранение отбора почтовых сообщений.
		Если НастройкиПочтовыхСообщений.Настройки.Отбор.Элементы.Количество() > 0 Тогда
			ТекущийОбъект.ХранилищеОтборПочтовыхСообщений = Новый ХранилищеЗначения(НастройкиПочтовыхСообщений.Настройки.Отбор, Новый СжатиеДанных(9));
		Иначе
			ТекущийОбъект.ХранилищеОтборПочтовыхСообщений = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
		// Сохранение отбора задач
		Если НастройкиЗадач.Настройки.Отбор.Элементы.Количество() > 0 Тогда
			ТекущийОбъект.ХранилищеОтборЗадач = Новый ХранилищеЗначения(НастройкиЗадач.Настройки.Отбор, Новый СжатиеДанных(9));
		Иначе
			ТекущийОбъект.ХранилищеОтборЗадач = Новый ХранилищеЗначения(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
