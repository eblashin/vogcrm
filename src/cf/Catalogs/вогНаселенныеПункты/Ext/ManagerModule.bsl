
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует иерархию справочника по переданному представлению контактной информации
// Параметры:
//	Представление 	- Строка - представление контактной информации (пустая, если передан параметр СтруктураАдреса)
//	СтруктураАдреса - Структура - структура адреса (см. функцию СформироватьСтруктуруАдресаПоПредставлению)
//
// Возвращаемое значение:
//	Родитель - СправочникСсылка.вогНаселенныеПункты - нижний уровень сформированной иерархии
//
Функция СформироватьИерархиюАдресаПоПредставлению(Представление, СтруктураАдреса = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СтруктураАдреса = Неопределено Тогда
		// ++ VOG Солодов В.В. 31.01.2020 
		Попытка
			СтруктураАдреса = СформироватьСтруктуруАдресаПоПредставлению(Представление);
			// ++ VOG Солодов В.В. 17.12.2020 CRM-1071
			Если СтруктураАдреса = Неопределено Тогда
				Возврат Справочники.вогНаселенныеПункты.ПустаяСсылка();
			КонецЕсли;
			// -- VOG Солодов В.В. 17.12.2020 CRM-1071
		Исключение
			Возврат Справочники.вогНаселенныеПункты.ПустаяСсылка();
		КонецПопытки;
		// До изменения
		//СтруктураАдреса = СформироватьСтруктуруАдресаПоПредставлению(Представление);
		// -- VOG Солодов В.В. 31.01.2020
	КонецЕсли;
	
	МассивАдреса = Новый Массив;
	МассивАдреса.Добавить(Новый Структура("Страна", 			СтруктураАдреса.Страна));
	Если СтруктураАдреса.Регион = "" Тогда
		МассивАдреса.Добавить(Новый Структура("Регион", 			СтруктураАдреса.ФедеральныйОкруг));
	Иначе
		МассивАдреса.Добавить(Новый Структура("ФедеральныйОкруг", 	СтруктураАдреса.ФедеральныйОкруг));
		МассивАдреса.Добавить(Новый Структура("Регион", 			СтруктураАдреса.Регион));
	КонецЕсли;
	МассивАдреса.Добавить(Новый Структура("ГородскойОкруг", 	СтруктураАдреса.ГородскойОкруг));
	МассивАдреса.Добавить(Новый Структура("НаселенныйПункт", 	СтруктураАдреса.НаселенныйПункт));
	
	Родитель = Неопределено;
	
	Для Индекс = 0 По МассивАдреса.Количество() - 1 Цикл
		
		ЭлементСсылка = СоздатьЭлементСправочника(МассивАдреса[Индекс], Родитель);
		
		Если Не ЭлементСсылка = Неопределено Тогда
			Родитель = ЭлементСсылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Родитель;
	
КонецФункции

// Формирует структуру адреса по переданному представлению контактной информации
// Параметры:
//	Представление 	- Строка - представление контактной информации
//
// Возвращаемое значение:
//	СтруктураАдреса - Структура - адрес, разложенный в структуру с помощью сервиса геокодирования Яндекс-карт
//
Функция СформироватьСтруктуруАдресаПоПредставлению(Представление) Экспорт
	
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Страна", 				"");
	СтруктураАдреса.Вставить("ФедеральныйОкруг", 	"");
	СтруктураАдреса.Вставить("Регион", 				"");
	СтруктураАдреса.Вставить("ГородскойОкруг", 		"");
	СтруктураАдреса.Вставить("НаселенныйПункт", 	"");
	
	// ++ VOG Солодов В.В. 17.12.2020 CRM-1071
	ТекстЗапроса = "/1.x/?format=json&apikey=%1&geocode=%2";
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, вогГеокодированиеСерверПовтИсп.ПолучитьКлючЯндекс(), Представление);
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
	// До изменения
	//АдресРесурса = "/1.x/?format=json&apikey=8922570a-c621-43b7-ac83-ee13f5357674&geocode=";
	//
	//Запрос = Новый HTTPЗапрос(АдресРесурса + Представление);
	// -- VOG Солодов В.В. 17.12.2020 CRM-1071
	
	ssl1 = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows());
		
	// ++ VOG Солодов В.В. 31.10.2019 
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	// До изменения
	//ВременныйФайл = КаталогВременныхФайлов() + "geores.xml";
	// -- VOG Солодов В.В. 31.10.2019
	
	Соед 	= Новый HTTPСоединение("geocode-maps.yandex.ru",,,,,, ssl1, Истина);
	Ответ 	= Соед.Получить(Запрос, ВременныйФайл);
	// ++ VOG Солодов В.В. 17.12.2020 CRM-1071
	Если Не Ответ.КодСостояния = 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	// -- VOG Солодов В.В. 17.12.2020 CRM-1071
	Чтение 	= Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	
	тДанные = ПрочитатьJSON(Чтение, Ложь);
	Данные 	= тДанные.response.GeoObjectCollection.featureMember;
	
	Если Данные.Количество() > 0 тогда
		
		КомпонентыАдреса = Данные[0].GeoObject.metaDataProperty.GeocoderMetaData.Address.Components;

		Для Каждого СоставляющаяАдреса Из КомпонентыАдреса Цикл
			
			Если СоставляющаяАдреса.kind = "province" Тогда
				
				Если СтруктураАдреса.ФедеральныйОкруг = "" Тогда
					СтруктураАдреса.ФедеральныйОкруг = СоставляющаяАдреса.name;
				Иначе
					СтруктураАдреса.Регион = СоставляющаяАдреса.name;
				КонецЕсли;
				
			ИначеЕсли СоставляющаяАдреса.kind = "country" Тогда
				СтруктураАдреса.Страна = СоставляющаяАдреса.name;
			ИначеЕсли СоставляющаяАдреса.kind = "area" Тогда
				СтруктураАдреса.ГородскойОкруг = СоставляющаяАдреса.name;
			ИначеЕсли СоставляющаяАдреса.kind = "locality" Тогда
				СтруктураАдреса.НаселенныйПункт = СоставляющаяАдреса.name;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Чтение.Закрыть();
	УдалитьФайлы(ВременныйФайл);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Заполняет в объекте реквизит в соответствии с контактной информацией данного объекта
//	с помощью сервиса геокодирования Яндекс-карт
// Параметры:
//	Объект 	- СправочникОбъект - Объект, в котором необходимо заполнить соотв. реквизит.
//		(Обязательно наличие табличной части "КонтактнаяИнформация")
//	ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации
//	ИмяРеквизита - Строка - имя реквизита в объекте, который необходимо заполнить, если 
//		требуется заполнить реквизит отличный от "НаселенныйПункт"
//
// Возвращаемое значение:
//	СтруктураАдреса - Структура - адрес, разложенный в структуру с помощью сервиса геокодирования Яндекс-карт
//
Процедура ЗаполнитьНаселенныйПунктВОбъектеПоВидуКонтактнойИнформации(
			Объект,
			ВидКонтактнойИнформации,
			ИмяРеквизита = "НаселенныйПункт") Экспорт
			
	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, Объект.Ссылка.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Вид", ВидКонтактнойИнформации);
	
	СтрокиКИ = Объект.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаТЧ Из СтрокиКИ Цикл
		СтруктураАдреса = СформироватьСтруктуруАдресаПоПредставлению(СтрокаТЧ.Представление);
		ЗначениеРеквизита = Справочники.вогНаселенныеПункты.СформироватьИерархиюАдресаПоПредставлению("", СтруктураАдреса);
		//Кайдашов  745 04/12/20 START
		Набор = РегистрыСведений.АвтозаменаНаселенныхПунктов.СоздатьНаборЗаписей();
		Набор.Отбор.ЧтоМеняем.Установить(ЗначениеРеквизита);
		Набор.Прочитать();
		Если Набор.Количество() > 0 тогда
			ЗначениеРеквизита = Набор[0].НаЧтоМеняем;
		КонецЕсли;
		//Кайдашов  745 04/12/20 END
		
		Если Не ЗначениеРеквизита = Объект[ИмяРеквизита] Тогда
			Объект[ИмяРеквизита] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в объекте реквизит в соответствии с контактной информацией данного объекта
//	с помощью сервиса геокодирования Яндекс-карт
// Параметры:
//	Объект 	- СправочникОбъект - Объект, в котором необходимо заполнить соотв. реквизит.
//		(Обязательно наличие табличной части "КонтактнаяИнформация")
//	ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации
//	ИмяРеквизита - Строка - имя реквизита в объекте, который необходимо заполнить, если 
//		требуется заполнить реквизит отличный от "НаселенныйПункт"
//
// Возвращаемое значение:
//	СтруктураАдреса - Структура - адрес, разложенный в структуру с помощью сервиса геокодирования Яндекс-карт
//
Процедура ЗаполнитьНаселенныйПунктПоВидуКонтактнойИнформацииВФоне(Параметры, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка 					= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Ссылка");
	ИмяРеквизита 			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ИмяРеквизита");
	ВидКонтактнойИнформации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВидКонтактнойИнформации");
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРеквизита) Тогда
		ИмяРеквизита 		= "НаселенныйПункт";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.Месторасположение;
	КонецЕсли;
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, Ссылка.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Вид", ВидКонтактнойИнформации);
	
	СтрокиКИ = Объект.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаТЧ Из СтрокиКИ Цикл
		СтруктураАдреса = СформироватьСтруктуруАдресаПоПредставлению(СтрокаТЧ.Представление);
		ЗначениеРеквизита = Справочники.вогНаселенныеПункты.СформироватьИерархиюАдресаПоПредставлению("", СтруктураАдреса);
		//Кайдашов  745 04/12/20 START
		Набор = РегистрыСведений.АвтозаменаНаселенныхПунктов.СоздатьНаборЗаписей();
		Набор.Отбор.ЧтоМеняем.Установить(ЗначениеРеквизита);
		Набор.Прочитать();
		Если Набор.Количество() > 0 тогда
			ЗначениеРеквизита = Набор[0].НаЧтоМеняем;
		КонецЕсли;
		//Кайдашов  745 04/12/20 END
		Если Не ЗначениеРеквизита = Объект[ИмяРеквизита] Тогда
			Объект[ИмяРеквизита] = ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	Объект.ОбменДанными.Загрузка = Истина;
	
	Попытка
		Объект.Записать();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Заполнение населенного пункта в элементе справочника Торговые точки.'"),
			УровеньЖурналаРегистрации.Ошибка,
			Ссылка.Метаданные(),
			Ссылка,
			ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьЭлементСправочника(СтруктураАдреса, Родитель)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если Родитель = Неопределено Тогда
		Родитель = Справочники.вогНаселенныеПункты.ПустаяСсылка();
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураАдреса Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйАдрес = Справочники.вогНаселенныеПункты.НайтиПоНаименованию(ЭлементСтруктуры.Значение, Истина, Родитель);
		
		Если НовыйАдрес = Справочники.вогНаселенныеПункты.ПустаяСсылка() Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			НовыйАдрес = Справочники.вогНаселенныеПункты.СоздатьЭлемент();
			НовыйАдрес.Наименование = ЭлементСтруктуры.Значение;
			НовыйАдрес.Родитель 	= Родитель;
			НовыйАдрес.ТипАдреса 	= ЭлементСтруктуры.Ключ;
			НовыйАдрес.Записать();
			
		КонецЕсли;
		
		ВозвращаемоеЗначение = НовыйАдрес.Ссылка;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецЕсли