
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// { VOG RMV 2019-01-30 инцидент №14917
	// создание копированием запрещено
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Сообщить("Копирование контактов запрещено!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// } VOG RMV 2019-01-30 инцидент №14917
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Установка значения реквизита АдресКартинки.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ Объект.CRM_Фотография.Пустая() Тогда
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
			// +CRM
			Если ПустаяСтрока(АдресКартинки) Тогда
				ВывестиНедоступностьКартинки();
			КонецЕсли;	
			// -CRM
		Иначе
			АдресКартинки = "";
		КонецЕсли;
		CRM_УправлениеВидимостьюРамкиКартинки();
		Элементы.CRM_СоздатьФизЛицо.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Автор) Тогда
		Объект.Автор = Пользователи.ТекущийПользователь();	
	КонецЕсли; 
	
	// Обработчик подсистемы "Контактная информация".
	CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация");
	
	// Обработчик механизма "Свойства".
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И Параметры.Свойство("ПараметрыНового") Тогда
		Объект.Наименование = Параметры.ПараметрыНового.Наименование;
		
		МассивДопРеквизитов = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Тип,Вид",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица));
		Если МассивДопРеквизитов.количество() > 0 Тогда
			ЭтотОбъект[МассивДопРеквизитов[0].ИмяРеквизита] = Параметры.ПараметрыНового.АдресПочты;
		КонецЕсли;
	КонецЕсли;
	
	//Связи
	Если Параметры.Свойство("ОбъектСвязи") Тогда
		ОбъектСвязи = Параметры.ОбъектСвязи;	
	КонецЕсли;
	
	//Элементы.ГруппаДанныеСвязи.Видимость = ЗначениеЗаполнено(ОбъектСвязи);
	
	РедактированиеПредставления = Ложь;
	РедактированиеФИО = Ложь;
	ПредставлениеВыбраноИзСписка = Ложь;
	
	// +СофтФон
	сфпСтарыйПользовательДляПереключения = Объект.сфпПользовательДляПереключенияЗвонков;
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() И сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда
		Элементы.сфпПользовательДляПереключенияЗвонков.Видимость = Истина;
		Если сфпСофтФонПроСервер.сфпРолиДоступны("сфпУправлениеМаршрутизацией, ПолныеПрава") Тогда
			Элементы.сфпПользовательДляПереключенияЗвонков.Доступность = Истина;
		Иначе
			Элементы.сфпПользовательДляПереключенияЗвонков.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.сфпПользовательДляПереключенияЗвонков.Видимость = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("Основание") и ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		сфпЗвонок =  Параметры.Основание;
	КонецЕсли;		
	Если Параметры.Свойство("Владелец") Тогда
		Объект.Владелец = Параметры.Владелец;
	КонецЕсли;			
	// -СофтФон
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Наименование.КнопкаВыбора = Истина;
		Элементы.Наименование.КнопкаОткрытия = Истина;
	Иначе
		CRM_ФизЛицо = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьФизЛицо(Объект.Ссылка);
		Элементы.ГруппаНаименованиеСоздатьФизЛицо.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры)
		И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.Партнеры) И Не ЗначениеЗаполнено(CRM_ФизЛицо);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(CRM_ФизЛицо) Тогда
		Элементы.Пол.ТолькоПросмотр					= Истина;
		Элементы.CRM_Фамилия.ТолькоПросмотр			= Истина;
		Элементы.CRM_Имя.ТолькоПросмотр				= Истина;
		Элементы.CRM_Отчество.ТолькоПросмотр		= Истина;
		Элементы.Наименование.ТолькоПросмотр		= Истина;
		
		МассивВидокКИ = Новый Массив();
		МассивВидокКИ.Добавить(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
		МассивВидокКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
		МассивВидокКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			Если МассивВидокКИ.Найти(СтрокаТаблицы.Вид) <> Неопределено Тогда
				Элементы[СтрокаТаблицы.ИмяРеквизита].ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.Наименование.КнопкаОткрытия = Истина;
	КонецЕсли;
	ЭтотОбъект.CRM_ПродолжитьВводНового = Ложь;
	
	Если Параметры.Свойство("СпозиционироватьсяНаРеквизите") И ЗначениеЗаполнено(Параметры.СпозиционироватьсяНаРеквизите) Тогда
		СпозиционироватьсяНаРеквизите = Параметры.СпозиционироватьсяНаРеквизите;
	КонецЕсли;
	
	Если Параметры.Свойство("БизнесРегион") Тогда
		БизнесРегион = Параметры.БизнесРегион;
	КонецЕсли;
	
	//+вог
	//Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
	//	//Режим копирования
	//	Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаПортрет;
	//НастройкаВидимостиФормы = "ПоказатьВсе";
	//	РежимВидимостиПоказатьТолькоВажные = Ложь;
	//	
	//	СкрытьРаскрытьВсеГруппы(Ложь);
	//ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	//Режим редактирования
	//	Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаКарточкаОбъекта;
	//	НастройкаВидимостиФормы = "СвернутьВсеГруппы";
	//	РежимВидимостиПоказатьТолькоВажные = Ложь;
	//	
	//	СкрытьРаскрытьВсеГруппы(Истина);
	//	//Элементы.ГруппаГруппировкаЛевоПраво.Видимость=Ложь;
	//	
	//	Элементы.НастройкаВидимостиФормы.СписокВыбора.Удалить(0);
	//Иначе	
	//	//Режим создания
	//	Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаПортрет;
	//	НастройкаВидимостиФормы = "ПоказатьОсновные";
	//	РежимВидимостиПоказатьТолькоВажные = Истина;
	//	
	//	СкрытьРаскрытьВсеГруппы(Ложь);
	//КонецЕсли;
	
	
	НастройкаВидимостиФормы 			= "ПоказатьВсе";
	//РежимВидимостиПоказатьТолькоВажные 	= Истина;
	НастроитьФорму();
	//СкрытьГруппыПоУмолчанию();
	
	РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
	УстановитьВидимостьРеквизитовКИ();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастроитьВидимостьСворачиваемойГруппы("ДополнительныеРеквизиты");
	Иначе
		НастройкаВидимостиКарточкиОбъекта       = "ПоказатьЗаполненные";
		РежимВидимостиПоказатьТолькоЗаполненные = Истина;
		НастроитьФорму();
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СвязиКонтатныхЛиц, "КонтактноеЛицо", Неопределено);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(КонтактныеЛицаПодписанты, "КонтактноеЛицо", Неопределено); //+ ВОГ Иванов С.А. 28.10.2019 ID заявки: 000000775
	КонецЕсли;
	
	//// Видимость табличной части "Дополнительная информация", (не вешаем на ФО, чтобы не было отличий от БСП)
	//Элементы.ГруппаДополнительнаяИнформация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	//-вог
	
	//++ Подключаемые дополнительные команды
	вогУправлениеИнтерфейсомСервер.ПодключитьДополнительныеКоманды(ЭтаФорма, Элементы.ФормаГруппаДействия);
	//-- Подключаемые дополнительные команды
	
	// ++ VOG Солодов В.В. 23.07.2019 task 457
	// + Взаимодействие (Динамический список)
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВзаимодействие, "ОбъектСвязи", Объект.Ссылка);
	// - Взаимодействие (Динамический список)
	// -- VOG Солодов В.В. 23.07.2019
	
	//+++ Терпогосян Д.Б. [05.08.2021 15:22:47] № DEV-813
	СклонениеПредставленийОбъектов.ПриСозданииНаСервере(ЭтотОбъект, Объект.Наименование);
	//--- Терпогосян Д.Б. [05.08.2021 15:22:47] № DEV-813 

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.CRM_УчаствуетВАнкетировании Тогда
		
		Попытка
			Элементы.СправочникВнешниеПользователиВнешнийДоступ.Картинка = БиблиотекаКартинок.Пользователь;
			Элементы.СправочникВнешниеПользователиВнешнийДоступ.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Исключение
		КонецПопытки;			
		
	КонецЕсли;
	
	Попытка
		Если ЗначениеЗаполнено(СпозиционироватьсяНаРеквизите) Тогда
			Если ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				Для Каждого СтрокаТаблицы Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
					Если СтрокаТаблицы.Вид = СпозиционироватьсяНаРеквизите Тогда
						ТекущийЭлемент = Элементы[СтрокаТаблицы.ИмяРеквизита];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
				Для Каждого СтрокаТаблицы Из ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов Цикл
					Если СтрокаТаблицы.Свойство = СпозиционироватьсяНаРеквизите Тогда
						ТекущийЭлемент = Элементы[СтрокаТаблицы.ИмяРеквизитаЗначение];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("Строка") Тогда
				ТекущийЭлемент = Элементы[СпозиционироватьсяНаРеквизите];
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	// +CRM
	CRM_ЗаполнитьВсеТипыОтношений();	
	CRM_ЗаполнитьТипыОтношений();
	CRM_ЗаполнитьКлючевыеСобытия();
	// -CRM
	
	// Выделить команду навигации при открытии формы объекта
	ВыделитьКомандуНавигацииПриОткрытииФормы();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Проверяем заполнен ли хотя бы один вид контактной информации.
	//+вог
	//КонтактнаяИнформацияЗаполнена = Ложь;
	//Для Каждого ЭлементКоллекции Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
	//	Если НЕ ПустаяСтрока(ЭлементКоллекции.Представление) Тогда
	//		КонтактнаяИнформацияЗаполнена = Истина;
	//		Прервать;
	//	КонецЕсли;	
	//КонецЦикла;	
	//// Обрабатываем отдельный случай, когда контакт заполнен по физ. лицу
	//Если НЕ КонтактнаяИнформацияЗаполнена И ЗначениеЗаполнено(CRM_ФизЛицо) Тогда 
	//	Если Объект.КонтактнаяИнформация.Количество() > 0 Тогда
	//		КонтактнаяИнформацияЗаполнена = Истина;
	//	КонецЕсли;
	//КонецЕсли;		
	//Если НЕ КонтактнаяИнформацияЗаполнена Тогда 
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен ни один вид контактной информации.'"));
	//	Отказ = Истина;
	//КонецЕсли;	
	//-вог
	// +CRM
	CRM_ЗаписатьВсеТипыОтношений();	
	// -CRM
	
	//+вог
	Если Отказ Тогда
		Если НастройкаВидимостиФормы = "СвернутьВсеГруппы" Тогда
			НастройкаВидимостиФормы = "ПоказатьВсе";
		КонецЕсли;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
	КонецЕсли;
	//-вог
	
КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	КорректироватьНапоминание = Ложь;
	Если ТекущийОбъект.Ссылка.CRM_КлючевыеСобытия.Количество() = ТекущийОбъект.CRM_КлючевыеСобытия.Количество() Тогда
		Для Каждого СтрокаТЧ Из ТекущийОбъект.Ссылка.CRM_КлючевыеСобытия Цикл
			НайденнаяСтрока = ТекущийОбъект.CRM_КлючевыеСобытия.Найти(СтрокаТЧ.ВидСобытия, "ВидСобытия");
			Если НЕ (НайденнаяСтрока = Неопределено) Тогда
				Если НЕ (НайденнаяСтрока.НапоминатьОСобытии = СтрокаТЧ.НапоминатьОСобытии) Тогда
					КорректироватьНапоминание = Истина;
					Прервать;
				ИначеЕсли НЕ (НайденнаяСтрока.ДатаСобытия = СтрокаТЧ.ДатаСобытия) Тогда
					КорректироватьНапоминание = Истина;
					Прервать;
				КонецЕсли;	
			Иначе	
				КорректироватьНапоминание = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		КорректироватьНапоминание = Истина;
		// -CRM		
	КонецЕсли;
	// +CRM
	Если НЕ (CRM_ТипыОтношений = ТекущийОбъект.CRM_ТипОтношенийПредставление) Тогда
		ТекущийОбъект.CRM_ТипОтношенийПредставление = CRM_ТипыОтношений;
	КонецЕсли;
	Если НЕ (Объект.Ссылка.CRM_ОтписалсяОтEmailРассылок = Объект.CRM_ОтписалсяОтEmailРассылок) Тогда
		СпособОтправкиРассылок = Константы.CRM_СпособОтправкиРассылок.Получить();
		Если СпособОтправкиРассылок = Перечисления.CRM_СпособыОтправкиРассылок.UniSender Тогда
			CRM_ИнтеграцияСUniSenderКлиентСервер.ПодписатьПолучателяНаРассылки(Объект, НЕ Объект.CRM_ОтписалсяОтEmailРассылок, Отказ);
		КонецЕсли;
	КонецЕсли;
	// +CRM
	
	//+вог
	//Связи	
	// ++ VOG Солодов В.В. 27.05.2019 task 325
	Если ЗначениеЗаполнено(CRM_Должность) Тогда
	// До изменения
	//Если ЗначениеЗаполнено(ОбъектСвязи) Тогда
	// -- VOG Солодов В.В. 27.05.2019
		ДанныеСвязи = Новый Структура;
		ДанныеСвязи.Вставить("CRM_Состояние"		  , CRM_Состояние);
		ДанныеСвязи.Вставить("CRM_Должность"		  , CRM_Должность);
		ДанныеСвязи.Вставить("CRM_РольКонтактногоЛица", CRM_РольКонтактногоЛица);
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеСвязи", ДанныеСвязи);
		Если ЗначениеЗаполнено(ОбъектСвязи) Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбъектСвязи", ОбъектСвязи);
		КонецЕсли;
		
	КонецЕсли;
	//-вог
	
	// ++ Тищенко В.В. 22.03.2019
	// Задача 000000258	
	// Запретить создавать объект если не указано хоть одна контактная информация (телефон, почта)	
	
	ЕстьЗаполненыйТелефон 		= Ложь;
	ЕстьЗаполненныйЭлекАдрес 	= Ложь;
	Телефоны 					= ТекущийОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон));
	АдресаЭлекПочты 			= ТекущийОбъект.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
	
	Для каждого Стр Из Телефоны Цикл
		Если ЗначениеЗаполнено(Стр.Представление) Тогда
			ЕстьЗаполненыйТелефон = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого Стр Из АдресаЭлекПочты Цикл
		Если ЗначениеЗаполнено(Стр.Представление) Тогда
			ЕстьЗаполненныйЭлекАдрес = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если НЕ ЕстьЗаполненыйТелефон И НЕ ЕстьЗаполненныйЭлекАдрес Тогда
		ТекстСообщения 	= НСтр("ru = 'Для содания контактного лица необходимо указать контактную информацию (Телефон или адрес элект.почты)'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ 			= Истина;
	КонецЕсли;
	
	// -- Тищенко В.В.
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если КорректироватьНапоминание Тогда
		// +CRM
		//CRM_ОповещенияСервер.СформироватьУдалитьНапоминанияОДняхРождения(ТекущийОбъект.Ссылка);
		CRM_ОповещенияСервер.CRM_СформироватьУдалитьНапоминанияОКлючевыхСобытиях(ТекущийОбъект.Ссылка);
		// -CRM
		КорректироватьНапоминание = Ложь;
	КонецЕсли;
	
	Элементы.Наименование.КнопкаВыбора = Ложь;
	
	// +CRM
	Если ЗначениеЗаполнено(CRM_ФизЛицо) Тогда
		РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ЗаписатьФизЛицо(Объект.Ссылка, CRM_ФизЛицо);
	ИначеЕсли Не Элементы.ГруппаНаименованиеСоздатьФизЛицо.Видимость Тогда
		Элементы.ГруппаНаименованиеСоздатьФизЛицо.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры)
		И ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.Партнеры);
		
	КонецЕсли;
	Элементы.CRM_СоздатьФизЛицо.Видимость = Истина;
	// -CRM
	
	//+Классификаторы
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	//+вог
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, Ложь);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	Если Не Элементы.СтраницаКарточкаОбъекта.Доступность Тогда
		//РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастройкаВидимостиФормы = "ПоказатьВсе";
		НастроитьФорму(НастройкиВидимостиИЗаголовков);
		СкрытьРаскрытьВсеГруппы(Ложь);
		
		//Если Элементы.НастройкаВидимостиФормы.СписокВыбора.Количество() = 2 Тогда
		//	Элементы.НастройкаВидимостиФормы.СписокВыбора.Удалить(0);
		//КонецЕсли;
		
	Иначе
		НастроитьФорму(НастройкиВидимостиИЗаголовков);
	КонецЕсли;
	
	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(ТекущийОбъект, НастройкиВидимостиИЗаголовков);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СвязиКонтатныхЛиц, "КонтактноеЛицо", ТекущийОбъект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(КонтактныеЛицаПодписанты, "КонтактноеЛицо", ТекущийОбъект.Ссылка); //+ ВОГ Иванов С.А. 28.10.2019 ID заявки: 000000775 
	//-вог
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если ИмяСобытия = "ИзмененУчаствуетВАнкетировании" Тогда
		Объект.CRM_УчаствуетВАнкетировании = Параметр;
		Модифицированность = Истина;
		// +CRM
	ИначеЕсли ИмяСобытия = "Создан новый партнер" И ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") И ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.ВладелецФормы = ЭтотОбъект Тогда
		СвязатьСНовымФизЛицом(Параметр);
		Записать();
		// -CRM
	ИначеЕсли ИмяСобытия = "Запись_Файл" 
		И Параметр.Свойство("ВладелецФайла") Тогда
		
		Если Параметр.ВладелецФайла = Объект.Ссылка Тогда
			Модифицированность = Истина;
			
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			Если ВыборИзображения Тогда
				
				Объект.CRM_Фотография = СсылкаНаФайл;
				АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
				
			КонецЕсли;
			
			ФайлКартинкиПриИзменении(Элементы.ФайлКартинки);
			//+вог
			ОбновитьГиперссылкиИКарточку();
			//-вог
			
		КонецЕсли;
	КонецЕсли;
	
	// ++ VOG Ульянов И.В. 28.11.2019 task 941
	Если ИмяСобытия = "ОбновитьВиджет" Тогда
			ТекущиеДелаДокументооборотКлиент.ОбработкаОповещенияФормыТекущиеДела(
		ЭтаФорма, ИмяСобытия, Параметр, Источник);
	КонецЕсли;	
	// -- VOG Ульянов И.В. 28.11.2019 task 941
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	//+вог
	Если Не ЗначениеЗаполнено(НастройкаВидимостиКарточкиОбъекта) Тогда
		НастройкаВидимостиКарточкиОбъекта       = "ПоказатьЗаполненные";
		РежимВидимостиПоказатьТолькоЗаполненные = Истина;
		
	КонецЕсли;
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, Ложь);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	НастроитьФорму(НастройкиВидимостиИЗаголовков);
	Элементы.Файлы.Заголовок = Элементы.ГиперссылкаПерейтиФайлы.Заголовок;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СвязиКонтатныхЛиц, "КонтактноеЛицо", ТекущийОбъект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(КонтактныеЛицаПодписанты, "КонтактноеЛицо", ТекущийОбъект.Ссылка); //+ ВОГ Иванов С.А. 28.10.2019 ID заявки: 000000775 

	//-вог
	
	Если НЕ ТекущийОбъект.CRM_Фотография.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(ТекущийОбъект.CRM_Фотография, УникальныйИдентификатор);
		// +CRM
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
		// -CRM
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюРамкиКартинки();		
	
	//+Классификаторы
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	//+вог
	//Карточка клиента
	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков);
	//-вог
	
	Запрос = Новый Запрос(	
	// ++ VOG Солодов В.В. 27.05.2019 task 325
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогСвязиКонтактныхЛицСрезПоследних.CRM_Состояние КАК CRM_Состояние,
	|	вогСвязиКонтактныхЛицСрезПоследних.CRM_Должность КАК CRM_Должность,
	|	вогСвязиКонтактныхЛицСрезПоследних.CRM_РольКонтактногоЛица КАК CRM_РольКонтактногоЛица,
	|	ВЫБОР
	|		КОГДА вогСвязиКонтактныхЛицСрезПоследних.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Работает)
	|			ТОГДА ВЫБОР
	|					КОГДА вогСвязиКонтактныхЛицСрезПоследних.CRM_Должность <> ЗНАЧЕНИЕ(Справочник.CRM_Должности.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА вогСвязиКонтактныхЛицСрезПоследних.CRM_РольКонтактногоЛица <> ЗНАЧЕНИЕ(Справочник.РолиКонтактныхЛицПартнеров.ПустаяСсылка)
	|									ТОГДА 3
	|								ИНАЧЕ 2
	|							КОНЕЦ
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних(, КонтактноеЛицо = &КонтактноеЛицо) КАК вогСвязиКонтактныхЛицСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет");
	// До изменения
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	РегистрСвязиКонтактныхЛицСрезПоследних.CRM_Состояние КАК CRM_Состояние,
	//|	РегистрСвязиКонтактныхЛицСрезПоследних.CRM_Должность КАК CRM_Должность,
	//|	РегистрСвязиКонтактныхЛицСрезПоследних.CRM_РольКонтактногоЛица КАК CRM_РольКонтактногоЛица,
	//|	РегистрСвязиКонтактныхЛицСрезПоследних.ОбъектСвязи
	//|ИЗ
	//|	РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК РегистрСвязиКонтактныхЛицСрезПоследних
	//|ГДЕ
	////		|	РегистрСвязиКонтактныхЛицСрезПоследних.ОбъектСвязи = &ОбъектСвязи
	//|	РегистрСвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо = &КонтактноеЛицо
	////		|	И РегистрСвязиКонтактныхЛицСрезПоследних.ВидСвязи <> ЗНАЧЕНИЕ(Справочник.вогВидыСвязейКонтактныхЛиц.НеСвязан)
	//|");
	// -- VOG Солодов В.В. 27.05.2019
	
	//Запрос.УстановитьПараметр("ОбъектСвязи"	  , ОбъектСвязи);
	Запрос.УстановитьПараметр("КонтактноеЛицо", ТекущийОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		//ОбъектСвязи = Выборка.ОбъектСвязи; // VOG Солодов В.В. 27.05.2019 // Закомментировал
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	// ++ VOG Солодов В.В. 03.04.2020 CRM-519
	Если Не ЗначениеЗаполнено(ЭтотОбъект.CRM_Состояние) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле Состояние'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "CRM_Состояние",, Отказ);
	КонецЕсли;
	// -- VOG Солодов В.В. 03.04.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("НовоеКонтактноеЛицоЗаписано",Объект.Ссылка);
	//+вог
	// Попробовать перезаписать владельца для обновления реквизитов заполненности по клиенту
	//ПараметрыФормы = Новый Структура("Ключ", Объект.Владелец);
	//
	//ИмяФормыПартнера = "Справочник.Партнеры.ФормаОбъекта";
	//
	//Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
	//
	//	ИмяФормыПартнера = "Справочник.Партнеры.Форма.CRM_Модуль_ФормаЭлементаРеквизитыКонтрагента";
	//
	//КонецЕсли; 
	//
	//ФормаВладельца = ПолучитьФорму(ИмяФормыПартнера, ПараметрыФормы);
	//Если ФормаВладельца.Открыта() Тогда
	//	Попытка
	//		ФормаВладельца.Записать();
	//	Исключение
	//	КонецПопытки;
	//Иначе
	//	ПерезаписатьВладельца(Объект.Владелец);
	//КонецЕсли;
	//-вог
	
	// +СофтФон
	Если ЗначениеЗаполнено(сфпЗвонок) Тогда
		Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, Объект.Ссылка));						
	КонецЕсли;					
	// Записываем маршрутизацию в АТС.	
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		Если НЕ ЗначениеЗаполнено(сфпСтарыйПользовательДляПереключения) И НЕ ЗначениеЗаполнено(Объект.сфпПользовательДляПереключенияЗвонков) Тогда	
			Возврат;
		КонецЕсли;	
		СтарыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(Объект.Ссылка, сфпСтарыйПользовательДляПереключения);
		ПользовательОбновлен	= сфпСофтФонПроСервер.сфпЗаписатьНовогоПользователя(Объект.Ссылка, Объект.сфпПользовательДляПереключенияЗвонков, Истина);
		Если ПользовательОбновлен Тогда
			НовыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(Объект.Ссылка, Объект.сфпПользовательДляПереключенияЗвонков);
			СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
			сфпСофтФонПроСервер.сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
		КонецЕсли;	
	КонецЕсли;
	// -СофтФон
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") И ИсточникВыбора.ВладелецФормы = ЭтотОбъект Тогда
		Если ИсточникВыбора.ИмяФормы = Нстр("ru = 'ОбщаяФорма.сфпПользователиДляПереключения'") И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
			Объект.сфпПользовательДляПереключенияЗвонков = ВыбранноеЗначение;
			Модифицированность = Истина;
		КонецЕсли;			
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Наименование".
//
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо")));
	ОписаниеОповещения = Новый ОписаниеОповещения("НаименованиеНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Наименование".
//
Процедура НаименованиеНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ЗаполнитьПоФизЛицу(ВыбранноеЗначение);
		Элементы.ГруппаНаименованиеСоздатьФизЛицо.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Если Не ПредставлениеВыбраноИзСписка Тогда
		
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);	
		Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Наименование".
//
Процедура НаименованиеПриИзменении(Элемент)
	РедактированиеПредставления = Истина;
	Если НЕ РедактированиеФИО И НЕ ПредставлениеВыбраноИзСписка Тогда
		ФИО = Объект.Наименование;
		Если ПустаяСтрока(Объект.CRM_Фамилия) ИЛИ Объект.Ссылка.Пустая() Тогда
			ПервоеСлово = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
			Объект.CRM_Фамилия = ПервоеСлово;			
			Объект.CRM_Имя = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
			Если НЕ ЗначениеЗаполнено(Объект.Пол) Тогда
				Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Объект.CRM_Имя);
			КонецЕсли;
			Объект.CRM_Отчество = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
		КонецЕсли;
	КонецЕсли;
	
	//+++ Терпогосян Д.Б. [05.08.2021 15:27:57] № DEV-813 
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставлениеПоВсемПадежам(ЭтотОбъект, Объект.Наименование, Истина, ?(Строка(Объект.Пол) = "Мужской", 1, 2) );
	//--- Терпогосян Д.Б. [05.08.2021 15:27:57] № DEV-813 
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Наименование".
//
Процедура НаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(CRM_ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("НаименованиеОткрытиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("Ключ", CRM_ФизЛицо), ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Наименование".
//
Процедура НаименованиеОткрытиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ЗаполнитьПоФизЛицу(CRM_ФизЛицо);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Наименование".
//
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПредставлениеВыбраноИзСписка = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" поля ввода "Наименование".
//
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	МассивПредставлений = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Если МассивПредставлений.Количество() > 0 Тогда
		Если ДанныеВыбора = Неопределено Тогда
			ДанныеВыбора = Новый СписокЗначений();
		КонецЕсли;
		Для Каждого тДанные Из МассивПредставлений Цикл
			ДанныеВыбора.Вставить(0, тДанные, тДанные);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ФамилияПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текФамилия) И текФамилия <> СокрЛП(Объект.CRM_Фамилия)) 
			Или (ПустаяСтрока(Объект.CRM_Фамилия) И Не ПустаяСтрока(текФамилия)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текФамилия, СокрЛП(Объект.CRM_Фамилия)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Фамилия);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Фамилия) И ПустаяСтрока(текФамилия) Тогда
			
			Объект.Наименование = СокрЛП(?(ЗначениеЗаполнено(Объект.CRM_Фамилия),   СокрЛП(Объект.CRM_Фамилия) + " ", "")
			+ ?(ЗначениеЗаполнено(Объект.CRM_Имя), 		 СокрЛП(Объект.CRM_Имя) + " ", "")
			+ ?(ЗначениеЗаполнено(Объект.CRM_Отчество),  СокрЛП(Объект.CRM_Отчество), ""));
			
		КонецЕсли;
		
	КонецЕсли;
	
	текФамилия = СокрЛП(Объект.CRM_Фамилия);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);	
	Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИмяПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текИмя) И текФамилия <> СокрЛП(Объект.CRM_Имя)) 
			Или (ПустаяСтрока(Объект.CRM_Имя) И Не ПустаяСтрока(текИмя)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текИмя, СокрЛП(Объект.CRM_Имя)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Имя);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Имя) И ПустаяСтрока(текИмя) Тогда
			
			Объект.Наименование = СокрЛП((?(ЗначениеЗаполнено(Объект.CRM_Фамилия), 	 СокрЛП(Объект.CRM_Фамилия) + " ", "")
			+ ?(ЗначениеЗаполнено(Объект.CRM_Имя), 		 СокрЛП(Объект.CRM_Имя) + " ", "")
			+ ?(ЗначениеЗаполнено(Объект.CRM_Отчество),  СокрЛП(Объект.CRM_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	текИмя = СокрЛП(Объект.CRM_Имя);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);	
	Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
	// Определим пол
	Если Не ЗначениеЗаполнено(Объект.Пол) Тогда
		
		Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Объект.CRM_Имя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтчествоПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текОтчество) И текОтчество <> СокрЛП(Объект.CRM_Отчество)) 
			Или (ПустаяСтрока(Объект.CRM_Отчество) И Не ПустаяСтрока(текОтчество)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текОтчество, СокрЛП(Объект.CRM_Отчество)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Отчество);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Отчество) И ПустаяСтрока(текОтчество) Тогда
			
			Объект.Наименование = Объект.Наименование + " " + СокрЛП(Объект.CRM_Отчество);
			
		КонецЕсли;
		
	КонецЕсли;
	
	текОтчество = СокрЛП(Объект.CRM_Отчество);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);	
	Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
КонецПроцедуры

// +CRM
&НаСервере
Процедура СвязатьСНовымФизЛицом(ФизЛицо)
	Если ЗначениеЗаполнено(Объект.Ссылка) И ТипЗнч(ФизЛицо) = Тип("СправочникСсылка.Партнеры") И ФизЛицо.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		ЗаполнитьПоФизЛицу(ФизЛицо);
		РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ЗаписатьФизЛицо(Объект.Ссылка, ФизЛицо);
		Элементы.ГруппаНаименованиеСоздатьФизЛицо.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры
// -CRM

&НаКлиенте
Процедура сфпПользовательДляПереключенияЗвонковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ВыбранноеЗначение, Истина)) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'У выбранного пользователя не заполнен текущий внутренний номер, маршрутизация невозможна.'"));
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "CRM_ТипыОтношений".
//
Процедура CRM_ТипыОтношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеВыбора		= Новый ОписаниеОповещения("CRM_ОбработкаВыбораТиповОтношений", ЭтотОбъект, ДополнительныеПараметры);
	CRM_ВсеТипыОтношений.ПоказатьОтметкуЭлементов(ОповещениеВыбора, НСтр("ru='Отметьте типы отношений с клиентом'"));
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыCRM_КлючевыеСобытия

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "CRM_КлючевыеСобытия".
//
Процедура CRM_КлючевыеСобытияПриАктивизацииСтроки(Элемент)
	ТД = Элементы.CRM_КлючевыеСобытия.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Элементы.CRM_КлючевыеСобытияНапоминатьОСобытии.ТолькоПросмотр = Истина;
	Иначе
		Элементы.CRM_КлючевыеСобытияНапоминатьОСобытии.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ТД.ДатаСобытия); 	
	КонецЕсли;
КонецПроцедуры // CRM_КлючевыеСобытияПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "CRM_КлючевыеСобытия".
//
Процедура CRM_КлючевыеСобытияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // CRM_КлючевыеСобытияПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы формы "CRM_КлючевыеСобытия".
//
Процедура CRM_КлючевыеСобытияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // CRM_КлючевыеСобытияПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" колонки "ДатаСобытия" таблицы формы "CRM_КлючевыеСобытия".
//
Процедура CRM_КлючевыеСобытияДатаСобытияПриИзменении(Элемент)
	ТД = Элементы.CRM_КлючевыеСобытия.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Элементы.CRM_КлючевыеСобытияНапоминатьОСобытии.ТолькоПросмотр = Истина;
	Иначе
		Элементы.CRM_КлючевыеСобытияНапоминатьОСобытии.ТолькоПросмотр = НЕ ЗначениеЗаполнено(ТД.ДатаСобытия); 	
	КонецЕсли;
КонецПроцедуры // CRM_КлючевыеСобытияДатаСобытияПриИзменении()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыВзаимодействие

&НаКлиенте
Процедура СписокВзаимодействиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокВзаимодействие.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ПодключемыеДополнительныеКоманды
//++ Подключаемые дополнительные команды
&НаКлиенте
Процедура Подключаемый_ОбработчикДополнительнойКоманды(Команда) Экспорт 
	
	вогУправлениеИнтерфейсомКлиент.ОбработчикКомандыФормы(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКоманды(Значение, ДополнительноеЗначение) Экспорт 
	
	вогУправлениеИнтерфейсомКлиент.ВыполнитьКодКомандыНаКлиенте(Значение, ДополнительноеЗначение, ЭтаФорма, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКомандыСервер(Значение, ДополнительноеЗначение) Экспорт 
	
	вогУправлениеИнтерфейсомСервер.ВыполнитьКодКомандыНаСервере(Значение, ДополнительноеЗначение, ЭтотОбъект, ЭтаФорма, Объект);
	
КонецПроцедуры
//-- Подключаемые дополнительные команды
#КонецОбласти

&НаКлиенте
Процедура ПереходСтраницы(Команда)
	ВыполнитьПереходСтраницы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиКоманда(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Для каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
		Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
			ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
			ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
		Иначе
			ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
			ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Команда.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СоздатьФизЛицо(Команда)
	ОткрытиеФормыСоздаваемогоПартнера();	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСделатьОсновнымКонтактнымЛицом(Команда) //++ Тищенко В.В.	
	СделатьОсновнымКонтактнымЛицомСервер();
КонецПроцедуры //-- Тищенко В.В.

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НавигацияФормы

&НаКлиенте
Процедура ВыполнитьПереходСтраницы(ИмяКоманды)
	
	Попытка
		// Выделить кнопку перехода
		Для каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
			Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
				ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
				ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
			Иначе
				ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
				ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
			КонецЕсли;
		КонецЦикла;
		// Переход страницы
		Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы[ИмяКоманды];
		
		// ++ VOG Ульянов И.В. 28.11.2019 task 941
		Если ИмяКоманды = "СтраницаВзаимодействие" Тогда						
			ЗаполнитьВиджетыНаВкладке();			
		КонецЕсли;	
		// -- VOG Ульянов И.В. 28.11.2019 task 941
		
	Исключение
		ТекстСообщения 	= НСтр("ru = 'Не удалось перейти на страницу %1'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ИмяКоманды));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьКомандуНавигацииПриОткрытииФормы()
	
	Для каждого ЭлементКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
		Если ЭлементКоманды.ИмяКоманды 	= Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя Тогда
			ЭлементКоманды.ЦветТекста 	= Новый Цвет(128,0,128);
			ЭлементКоманды.Шрифт 		= Новый Шрифт(,10,Ложь,,Истина);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

&НаСервере
Функция СписокВидовДляДобавленияКонтактнойИнформации()
	
	Если СвойстваВидовКонтактнойИнформацииИнициализирован <> Истина Тогда
		ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц();		
	КонецЕсли; 
	
	СписокДоступныхВидов = Новый СписокЗначений;
	Отбор = Новый Структура("Вид");
	Для Каждого СтрокаТаблицы Из ЭтаФорма.СвойстваВидовКонтактнойИнформации Цикл
		Отбор.Вид = СтрокаТаблицы.Вид;
		Если СтрокаТаблицы.РазрешитьВводНесколькихЗначений Или Объект.КонтактнаяИнформация.НайтиСтроки(Отбор).Количество() = 0 Тогда
			СписокДоступныхВидов.Добавить(СтрокаТаблицы.Вид, СтрокаТаблицы.ПредставлениеВида);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДоступныхВидов;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПолеКонтактнойИнформации(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюВидВыбран", ЭтотОбъект, ДополнительныеПараметры);
	
	СписокДоступныхВидов = СписокВидовДляДобавленияКонтактнойИнформации();
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДоступныхВидов, Элементы[Команда.Имя]);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПорядокТиповКИ.Тип,
	|	ПорядокТиповКИ.Порядок
	|ПОМЕСТИТЬ втПорядокТипов
	|ИЗ
	|	&ПорядокТиповКИ КАК ПорядокТиповКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ПРЕДСТАВЛЕНИЕ(ВидыКонтактнойИнформации.Ссылка) КАК ПредставлениеВида,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ЕСТЬNULL(НастройкиВидовКонтактнойИнформации.ВыводитьВФормеВсегда, ЛОЖЬ) КАК ВыводитьВФормеВсегда,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений КАК РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ПроверятьКорректность,
	// ++ VOG Солодов В.В. 02.03.2020 CRM-196
	|	ВидыКонтактнойИнформации.ВидРедактирования
	// До изменения
	//|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге
	// -- VOG Солодов В.В. 02.03.2020
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|		ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВидовКонтактнойИнформации КАК НастройкиВидовКонтактнойИнформации
	|		ПО ВидыКонтактнойИнформации.Ссылка = НастройкиВидовКонтактнойИнформации.Вид
	|ГДЕ
	|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|
	|УПОРЯДОЧИТЬ ПО
	|	втПорядокТипов.Порядок,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания");
	
	Запрос.УстановитьПараметр("ПорядокТиповКИ", УправлениеКонтактнойИнформацией.ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ГруппаВидовКИ", 	Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров);
	
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
	СвойстваВидовКонтактнойИнформации.Загрузить(ТаблицаСвойств);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюВидВыбран(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Отбор = Новый Структура("Вид", ВыбранныйЭлемент.Значение);
	
	НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформации.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СвойстваВида = НайденныеСтроки[0];
	
	Если СвойстваВида.ВыводитьВФормеВсегда = Ложь Тогда
		
		ДополнительныеПараметры.Вставить("ДобавляемыйВид", ВыбранныйЭлемент.Значение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюВопросЗадан", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = СтрШаблон(НСтр("ru='Добавить возможность ввода вида контактной информации ""%1""?'"), ВыбранныйЭлемент.Значение);
		ЗаголовокВопроса = НСтр("ru='Подтверждение добавления'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ЗаголовокВопроса);
		
	Иначе
		
		Форма.ДобавитьКонтактнуюИнформациюСервер(ВыбранныйЭлемент.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюВопросЗадан(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКонтактнуюИнформациюСервер(ДополнительныеПараметры.ДобавляемыйВид, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь)
	
	КоличествоЭлементовКоллекции = Объект.КонтактнаяИнформация.Количество();
	ИндексВставки = КоличествоЭлементовКоллекции;
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если Объект.КонтактнаяИнформация[ТекущийИндекс].Вид = ДобавляемыйВид Тогда
			ИндексВставки = ТекущийИндекс+1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКИ = Объект.КонтактнаяИнформация.Вставить(ИндексВставки);
	ДанныеКИ.Вид = ДобавляемыйВид;
	ДанныеКИ.Тип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемыйВид, "Тип");
	
	Результат = Новый Структура("ДобавляемыйВид", ДобавляемыйВид);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКартинкой

// Механизм картинок
&НаКлиенте
Процедура ФайлКартинкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
		// +CRM
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
		// -CRM
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюРамкиКартинки();			
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] =
	Новый Структура("ИмяБезРасширения, Расширение, ВремяИзменения, УниверсальноеВремяИзменения");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ДобавлениеФайлаИнициализацияФайла",
	ЭтотОбъект,
	ДополнительныеПараметры);
	
	Файл = Новый Файл;
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаИнициализацияФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ДобавлениеФайлаСуществованияФайла",
	ЭтотОбъект,
	ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Файл не найден'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита], ДополнительныеПараметры.Файл);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение =
	СтрЗаменить(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение, ".", "");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ДобавлениеФайлаПолучениеВремениИзменения",
	ЭтотОбъект,
	ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].ВремяИзменения = ВремяИзменения;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения",
	ЭтотОбъект,
	ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеУниверсальногоВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].УниверсальноеВремяИзменения = ВремяИзменения;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ДополнительныеПараметры.ИмяФайла);
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	Если ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаКартинки" Тогда
		АдресКартинки      = АдресФайлаВХранилище;
	ИначеЕсли ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаHTML" Тогда
		АдресОписанияHTML  = АдресФайлаВХранилище;
		ПутьКФайлуОписанию = ДополнительныеПараметры.ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
	
	Перем ИдентификаторФайла;
	
	ВыборИзображения   = Истина;
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	
	РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, CRM_ОбщегоНазначенияКлиент.ФильтрФайловИзображений());
	// +CRM_УТ
	#Если НЕ ВебКлиент Тогда
		// -CRM_УТ
		ВыборИзображения   = Ложь;
		// +CRM_УТ
	#КонецЕсли
	// -CRM_УТ
	
	CRM_УправлениеВидимостьюРамкиКартинки();
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
		РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
		ЭтаФорма.Объект[ИмяРеквизитаОбъекта],
		УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.CRM_Фотография = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
	ДанныеФайлаКартинки = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("CRM_Фотография", "АдресКартинки",
	НСтр("ru='Отсутствует изображение для просмотра'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.CRM_Фотография);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	СтруктураПараметрыВыбора =
	Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);
	
	ОткрытьФорму(
	"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
	СтруктураПараметрыВыбора,,,,,
	Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
	РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.CRM_Фотография = Результат;
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор)
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаСервере
Процедура ВывестиНедоступностьКартинки()
	АдресКартинки = "";
	Элементы.АдресКартинки.ТекстНевыбраннойКартинки
	= НСтр("ru = 'Картинка не доступна (не доступен том) обратитесь к администратору.'");
	Объект.CRM_Фотография = Справочники.КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПустаяСсылка();
	CRM_УправлениеВидимостьюРамкиКартинки();	
КонецПроцедуры // ВывестиНедоступностьКартинки()

&НаСервере
Процедура CRM_УправлениеВидимостьюРамкиКартинки()
	Если ЗначениеЗаполнено(АдресКартинки) Тогда
		Элементы.ФайлКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);		
	Иначе
		Элементы.ФайлКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);		
	КонецЕсли;		
КонецПроцедуры

#КонецОбласти

#Область ПоискДублей

&НаСервере
// Функция возвращает структуру поиска контактов.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура	- Структура поиска контактов.
//
Функция CRM_СоздатьСтруктуруПоискаКонтактов()
	CRM_РеквизитыПоискаДублейКонтактов = Новый СписокЗначений;
	CRM_РеквизитыПоискаДублейКонтактов.Добавить("Наименование;ПОДОБНО","Наименование");
	CRM_РеквизитыПоискаДублейКонтактов.Добавить("Контакт_Телефон;=","Телефон");
	CRM_РеквизитыПоискаДублейКонтактов.Добавить("Контакт_АдресЭлектроннойПочты;=","Email");
	СтруктураПоиска = Новый Структура;
	Для Каждого СтрокаСписка Из CRM_РеквизитыПоискаДублейКонтактов Цикл
		Значение = СтрокаСписка.Значение;
		ТочкаСЗапятой = Найти(Значение, ";");
		СтруктураПоиска.Вставить(Сред(Значение, 1, ТочкаСЗапятой - 1), Сред(Значение, ТочкаСЗапятой + 1));
	КонецЦикла;
	Возврат СтруктураПоиска;
КонецФункции // CRM_СоздатьСтруктуруПоискаКонтактов()

&НаКлиенте
// Процедура - обработчик результата поиска дублей.
//
// Параметры:
//	РезультатЗакрытия		- Структура	- Результат закрытия формы.
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров.
//
Процедура CRM_ОбработатьРезультатПоискаДублейКонтакта(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Если РезультатЗакрытия.Свойство("Результат") Тогда
			Если РезультатЗакрытия.Результат = "Продолжить" Тогда
				CRM_ПродолжитьВводНового = Истина;
			ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
				ДополнительныеПараметры = Новый Структура("Ключ", РезультатЗакрытия.Объект);
				//ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", ДополнительныеПараметры);
				ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОткрытьНайденныйКонтакт", CRM_ОбщегоНазначенияКлиент, ДополнительныеПараметры);
				Модифицированность	= Ложь;
				Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // CRM_ОбработатьРезультатПоискаДублейКонтакта() 	

&НаКлиенте
// Процедура находит дубли реквизитов контакта.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Наличие дублей
//
Процедура CRM_НайтиДублиКонтакта(Команда)
	СтруктураПоиска = CRM_СоздатьСтруктуруПоискаКонтактов();
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Наименование", Элементы.Наименование.ТекстРедактирования);
	СписокКонтактов = Новый СписокЗначений;
	Для Каждого СтрокаКИ Из ЭтотОбъект["КонтактнаяИнформацияОписаниеДополнительныхРеквизитов"] Цикл
		Если ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
			Если СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
				СписокКонтактов.Добавить("Телефон", СтрокаКИ.Представление);
			ИначеЕсли СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
				СписокКонтактов.Добавить("АдресЭлектроннойПочты", СтрокаКИ.Представление);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	ПараметрыФормы			= Новый Структура("СтруктураПоиска, СписокКонтактов, СтруктураОбъекта, Контакт, Клиент", СтруктураПоиска, СписокКонтактов, СтруктураОбъекта, Объект.Ссылка, Объект.Владелец);
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеПоиска		= Новый ОписаниеОповещения("CRM_ОбработатьРезультатПоискаДублейКонтакта", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.CRM_ФормаНайденныхДублейКонтакта", ПараметрыФормы, ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно, , ОповещениеПоиска);
КонецПроцедуры // CRM_НайтиДублиКонтакта()

#КонецОбласти

#Область РаботаСГиперссылкой

&НаКлиенте
Процедура ГиперссылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента)
	
	Если ИмяЭлемента = "ГиперссылкаПерейтиФайлы"
		ИЛИ ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
		Если вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка) Тогда
			ФормаИмя = "ОбщаяФорма.вогФормаУправленияПрисоединеннымиФайлами";
			ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Присоединенные файлы'"))
		Иначе	
			ФормаИмя = "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы";
		КонецЕсли;
		
		ТипыФайлов = Новый Массив;
		Если ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда
			ТипыФайлов.Добавить(ПредопределенноеЗначение("Перечисление.вогТипыПрисоединенныхФайлов.Изображение"));
			ПараметрыФормы.Вставить("ТипыФайлов", ТипыФайлов);
			
		КонецЕсли;
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", ФормаИмя);
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиДокументы" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Физлицо", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ДокументыФизическихЛиц.Форма.ДокументыФизическогоЛица");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЗначенияКлассификаторов" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиИсторияРеквизитов" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Партнер", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.CRM_ИсторияРеквизитовПартнеров.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	КонецЕсли;
	
	Если Не ПараметрыПереходаПоГиперссылке.Свойство("РежимОткрытияОкнаФормы") Тогда
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	Возврат ПараметрыПереходаПоГиперссылке
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информции возможен только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
	ПараметрыПереходаПоГиперссылке.ПараметрыФормы, , ЭтаФорма.УникальныйИдентификатор, , , ,
	ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ОткрытиеФормыСоздаваемогоПартнера()
	
	СтруктураПараметры = Новый Структура("Наименование,CRM_Фамилия,CRM_Имя,CRM_Отчество,Пол");
	ЗаполнитьЗначенияСвойств(СтруктураПараметры, Объект);
	СтруктураПараметры.Вставить("ЮрФизЛицо", ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо"));	
	
	СоответствиеВидКИ = Новый Соответствие();
	СоответствиеВидКИ.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица"), ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПартнера"));
	СоответствиеВидКИ.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица"), ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица"));
	СоответствиеВидКИ.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"), ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"));
	СоответствиеВидКИ.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_МестоРожденияКонтактногоЛица"), ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_МестоРожденияЧастногоЛица"));
	
	СоответствиеВидаИПредставления = Новый Соответствие();
	
	Для Каждого СтрокаКИ Из Объект.КонтактнаяИнформация Цикл
		ВидКИПартнера = СоответствиеВидКИ[СтрокаКИ.Вид];
		Если Не ЗначениеЗаполнено(ВидКИПартнера) Тогда
			Если СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
				ВидКИПартнера = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПартнера");
			ИначеЕсли СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
				ВидКИПартнера = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера");
			Иначе
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		Если СтрокаКИ.CRM_ОсновнойДляСвязи Тогда
			СоответствиеВидаИПредставления.Вставить(СтрокаКИ.Представление + " CRM_ОсновнойДляСвязи", ВидКИПартнера);
		Иначе
			СоответствиеВидаИПредставления.Вставить(СтрокаКИ.Представление, ВидКИПартнера);			
		КонецЕсли;			
	КонецЦикла;	
	
	СтруктураПараметры.Вставить("ПреобразованиеКЛ", СоответствиеВидаИПредставления);
	
	ФормаОбъекта = ПолучитьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураПараметры), ЭтотОбъект);
	
	Попытка ФормаОбъекта.Объект.Наименование = Объект.Наименование;
	Исключение КонецПопытки;
	
	Попытка ФормаОбъекта.Элементы.ВидПартнера.Видимость = Ложь;
	Исключение КонецПопытки;
	
	Попытка ФормаОбъекта.Объект.Пол = Объект.Пол;
	Исключение КонецПопытки;	
	
	Попытка ФормаОбъекта.Объект.ДатаРождения = Объект.ДатаРождения;
	Исключение КонецПопытки;	
	
	Попытка ФормаОбъекта.Объект.CRM_НапоминатьОДнеРождения = Объект.CRM_НапоминатьОДнеРождения;
	Исключение КонецПопытки;			
	
	ФормаОбъекта.Открыть();
	
КонецПроцедуры	

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,, Ложь);
	НастроитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

//+вог
&НаСервере
Процедура НастроитьЭлементыДополнительныхРеквизитов()
	
	Для Каждого Элемент Из Элементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы Цикл
		
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			
			Если Элемент.МногострочныйРежим <> Истина Тогда
				
				Элемент.РастягиватьПоГоризонтали = Ложь;
				
			Иначе
				
				Элемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Лево;
				Элемент.РастягиватьПоВертикали   = Ложь;
				Элемент.РастягиватьПоГоризонтали = Истина;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//-вог

&НаСервереБезКонтекста
Процедура ПерезаписатьВладельца(Клиент)
	КлиентОбъект = Клиент.ПолучитьОбъект();
	Попытка
		КлиентОбъект.Записать();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
// Функция определяет, что к объекту присоединен по крайней мере один файл.
//
// Параметры:
//	ВладелецФайлов	- СправочникСсылка	- Владелец файлов.
//	ФайлИсключение	- СправочникСсылка	- Файл-исключение
//
Функция ОбъектИмеетФайлы(Знач ВладелецФайлов, Знач ФайлИсключение = Неопределено, Фильтр)
	Возврат CRM_ПрисоединенныеФайлы.ОбъектИмеетФайлы(ВладелецФайлов, ФайлИсключение);
КонецФункции // ОбъектИмеетФайлы()

&НаСервере
Процедура УстановитьВидимостьРеквизитовКИ()
	
	флагВыводаГиперСсылки = Ложь;
	СтруктураОтбора		= Неопределено;
	СтруктураОтбора		= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров, Ложь);
	
	МассивСтрок = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора);
	
	флагВыводаГиперСсылки = НЕ (МассивСтрок.Количество() = 0);
	
	Для Каждого СтрокаДопРеквизита Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			флаг_1 = НЕ (ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита] = "<адрес сайта не указан>");
		Иначе	
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]);
		КонецЕсли;	
		
		Для Каждого СтрокаДобавленногоРеквизита ИЗ ЭтотОбъект.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы Цикл
			Если СтрокаДобавленногоРеквизита.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(СтрокаДобавленногоРеквизита.Значение, СтрокаДопРеквизита.ИмяРеквизита) Тогда
				//+вог
				//СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить");
				СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить") ИЛИ (Не ЗначениеЗаполнено(СтрокаДопРеквизита.Представление) И Не РедактироватьДР);
				//-вог
				Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = ((СтрокаДопРеквизита.Выводить И НЕ СкрыватьПолеКИ) ИЛИ (РедактироватьДР ИЛИ флаг_1));
			КонецЕсли;
		КонецЦИкла;
		
		Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт Тогда
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= Новый Цвет();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= Новый Шрифт();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Истина;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "";
			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].Высота = 5;
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].МногострочныйРежим = Истина;
				КонецЕсли;
				Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
					ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
					ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора				= истина;
					// ++ VOG Солодов В.В. 02.03.2020 CRM-196
					Если СтрокаДопРеквизита.Вид.ВидРедактирования = "Диалог" Тогда
					// До изменения
					//Если СтрокаДопРеквизита.Вид.РедактированиеТолькоВДиалоге Тогда
					// -- VOG Солодов В.В. 02.03.2020
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветФона				= WebЦвета.Кремовый;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ИмяРеквизита = Элементы[СтрокаДопРеквизита.ИмяРеквизита].Имя;
			АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
			Если ПустаяСтрока(АдресСайтаКомпании) Тогда
				ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.РедактироватьКонтактныеДанные.Видимость = флагВыводаГиперСсылки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоФизЛицу(ФизЛицо)
	Если ФизЛицо.ЭтоГруппа Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите элемент, а не группу!'"));
		Возврат;
	КонецЕсли;
	
	Если ФизЛицо.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вид клиента должен быть ""Физическое лицо""!'"));
		Возврат;
	КонецЕсли;
	
	CRM_ФизЛицо = ФизЛицо;
	
	Объект.Пол				= ФизЛицо.Пол;
	Объект.CRM_Фамилия		= ФизЛицо.CRM_Фамилия;
	Объект.CRM_Имя			= ФизЛицо.CRM_Имя;
	Объект.CRM_Отчество		= ФизЛицо.CRM_Отчество;
	Объект.Наименование		= ФизЛицо.Наименование;
	
	Элементы.Пол.ТолькоПросмотр				= Истина;
	Элементы.CRM_Фамилия.ТолькоПросмотр			= Истина;
	Элементы.CRM_Имя.ТолькоПросмотр				= Истина;
	Элементы.CRM_Отчество.ТолькоПросмотр		= Истина;
	Элементы.Наименование.ТолькоПросмотр		= Истина;
	
	Для Каждого СтрокаТаблицы Из ФизЛицо.КонтактнаяИнформация Цикл
		ТекТипКИ = Неопределено;
		ТекВидКИ = Неопределено;
		Если СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
		ИначеЕсли СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		ИначеЕсли СтрокаТаблицы.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
			ТекТипКИ = СтрокаТаблицы.Тип;
			ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекТипКИ) И ЗначениеЗаполнено(ТекВидКИ) Тогда
			НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Тип,Вид", ТекТипКИ, ТекВидКИ));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Попытка ЭтотОбъект[НайденныеСтроки[0].ИмяРеквизита] = СтрокаТаблицы.Представление;
				Исключение КонецПопытки;
				Попытка Элементы[НайденныеСтроки[0].ИмяРеквизита].ТолькоПросмотр = Истина;
				Исключение КонецПопытки;
				НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,, "Вид");
				НоваяСтрока.Вид = ТекВидКИ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимостьРеквизитовКИ();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура  заполняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьВсеТипыОтношений()
	CRM_ВсеТипыОтношений.Очистить();
	CRM_ВсеТипыОтношений.Добавить("CRM_Прочее",				"Прочее",			Объект.CRM_Прочее);
	CRM_ВсеТипыОтношений.Добавить("CRM_ВладелецБизнеса",	"Владелец бизнеса",	Объект.CRM_ВладелецБизнеса);
	CRM_ВсеТипыОтношений.Добавить("CRM_Спонсор",			"Спонсор",			Объект.CRM_Спонсор);
	CRM_ВсеТипыОтношений.Добавить("CRM_Заказчик",			"Заказчик",			Объект.CRM_Заказчик);
	CRM_ВсеТипыОтношений.Добавить("CRM_Сторонник",			"Сторонник",		Объект.CRM_Сторонник);
	CRM_ВсеТипыОтношений.Добавить("CRM_Взаимодействия",		"Взаимодействия",	Объект.CRM_Взаимодействия);
	CRM_ВсеТипыОтношений.Добавить("CRM_Противник",			"Противник",		Объект.CRM_Противник);
КонецПроцедуры // CRM_ЗаполнитьВсеТипыОтношений()

&НаКлиенте
// Процедура сохраняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаписатьВсеТипыОтношений()
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если НЕ (Объект[ТипОтношений.Значение] = ТипОтношений.Пометка) Тогда
			Объект[ТипОтношений.Значение] = ТипОтношений.Пометка;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ЗаписатьВсеТипыОтношений()

&НаКлиенте
// Процедура заполняет реквизит формы CRM_ТипыОтношений.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьТипыОтношений()
	CRM_ТипыОтношений = "";
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + ТипОтношений.Представление;
		КонецЕсли;	
	КонецЦикла;	
	Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
		CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
	КонецЕсли;	
КонецПроцедуры // CRM_ЗаполнитьТипыОтношений();

&НаКлиенте
// Процедура - обработчик выбора типов отношений.
//
// Параметры:
//	СписокТипов				- СписокЗначений	- Список типов отношений.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура CRM_ОбработкаВыбораТиповОтношений(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	CRM_ЗаполнитьТипыОтношений();
КонецПроцедуры // CRM_ОбработкаВыбораТиповОтношений()	

&НаСервере
// Функция возвращает массив видов ключевых событий.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
// Массив	- Массив видов ключевых событий.
//
Функция CRM_ПолучитьМассивВидовКлючевыхСобытий()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ВидыКлючевыхСобытий.Ссылка
	|ИЗ
	|	Справочник.CRM_ВидыКлючевыхСобытий КАК CRM_ВидыКлючевыхСобытий
	|ГДЕ
	|	НЕ CRM_ВидыКлючевыхСобытий.ПометкаУдаления";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // CRM_ПолучитьМассивВидовКлючевыхСобытий()

&НаКлиенте
// Процедура заполняет ТЧ "Ключевые события".
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьКлючевыеСобытия()
	МассивВидовКлючевыхСобытий = CRM_ПолучитьМассивВидовКлючевыхСобытий();
	Для Каждого ЭлементМассива Из МассивВидовКлючевыхСобытий Цикл
		СтруктураОтбора = Новый Структура("ВидСобытия", ЭлементМассива);
		НайденныеСтроки = Объект.CRM_КлючевыеСобытия.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.CRM_КлючевыеСобытия.Добавить();
			НоваяСтрока.ВидСобытия			= ЭлементМассива;
			НоваяСтрока.НапоминатьОСобытии	= Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // CRM_ЗаполнитьКлючевыеСобытия()	

&НаСервере
Процедура СделатьОсновнымКонтактнымЛицомСервер() // ++ Тищенко В.В.

	Если НЕ Параметры.Ключ.Пустая() Тогда
		НаборЗаписей = РегистрыСведений.вогСвязиКонтактныхЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КонтактноеЛицо.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() <> 0 Тогда
			Для каждого Стр Из НаборЗаписей Цикл
				Стр.ОсновноеКонтактноеЛицо = Истина;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //-- Тищенко В.В.

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомер(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьСМСНаНомер","");
		Телефон = ЭтотОбъект[ИмяРеквизита];
		Если ПустаяСтрока(Телефон) Тогда Возврат; КонецЕсли;
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Объект.Ссылка);
		Структура.Вставить("Телефон", ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Телефон));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьEmail(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьEmail","");
	АдресЭлектроннойПочты = ЭтотОбъект[ИмяРеквизита];
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(АдресЭлектроннойПочты)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.Добавить(Объект.Ссылка, АдресЭлектроннойПочты);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
	
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПозвонитьНаНомер(Элемент)
	
	// +СофтФон
	сфпСофтФонПроКлиентПереопределяемый.сфпПодключаемый_ПозвонитьНаНомер(ЭтотОбъект, Объект);	
	// -СофтФон
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресКомпании","");
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элементы[ИмяРеквизита], Неопределено, Ложь);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		Подключаемый_РедактироватьАдресСайтаКомпании(Элемент);
	Иначе
		Если Найти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер), АдресСайтаКомпании);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		АдресСайтаКомпании = "";
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьАдресСайтаКомпанииЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, АдресСайтаКомпании, "Введите адрес сайта"); 		
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпанииЗавершение(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
	Если АдресСайтаКомпании <> Неопределено Тогда 		
		Если ПустаяСтрока(АдресСайтаКомпании) Тогда
			ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
		Иначе	
			ЭтотОбъект[ИмяРеквизита] = АдресСайтаКомпании;
		КонецЕсли;
		
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = АдресСайтаКомпании;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM
		
	КонецЕсли;	
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКарте(Элемент)
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОткрытьАдресНаИнтернетКарте","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(НайденныеСтроки[0].ЗначенияПолей);
	
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	СтруктураАдреса.Вставить("Представление", ЭтотОбъект[ИмяРеквизита]);
	
	СписокКарт = Новый СписокЗначений;
	// ++ Харченко Д.И. №  - 26.09.2018 / 
	//СписокКарт.Добавить("GIS","Карта GIS",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	//СписокКарт.Добавить("Google","Карта Google",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	//СписокКарт.Добавить("Yandex","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	СписокКарт.Добавить("вогГеокодирование","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
	//ПоказатьВыборИзСписка(ОписаниеОповещения, СписокКарт, ТекущийЭлемент,);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокКарт.Получить(0)); 
	// -- Харченко Д.И. №  - 26.09.2018
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение(Результат, СтруктураАдреса) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		СайтИнтернетКарты = Результат.Значение;
		CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочее(Элемент)
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьПрочее","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СтрокаПрочее = ЭтотОбъект[ИмяРеквизита];
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьПрочееЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, СтрокаПрочее, Строка(НайденныеСтроки[0].Вид),, Истина);
КонецПроцедуры // Подключаемый_РедактироватьПрочее

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочееЗавершение(СтрокаПрочее, ИмяРеквизита) Экспорт
	Если СтрокаПрочее <> Неопределено Тогда
		ЭтотОбъект[ИмяРеквизита] = СтрокаПрочее;
		
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = СтрокаПрочее;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM	
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьПрочее

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи(Элемент)
	CRM_УправлениеКонтактнойИнформациейКлиент.ОсновнойДляСвязиНажатие(ЭтотОбъект, Элемент);
КонецПроцедуры // Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи()

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
		// Если это адрес электронной почты, то надо проверить на коррректность заполнения.
		РезультатПроверки = CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПолучитьТипПроверитьЗаполнение(ЭтотОбъект, Элемент);
		Если НЕ РезультатПроверки = Неопределено И РезультатПроверки.КодОшибки<>0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	CRM_УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКонтактныеДанныеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РедактироватьДР Тогда
		РедактироватьКонтактныеДанные = НСтр("ru = 'Скрыть дополнительные контактные данные'");
		РедактироватьДР = Истина;
	Иначе
		РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
		РедактироватьДР = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзмененииАдресаЭлектроннойПочты(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки <> 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//+Классификаторы
#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
	
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_ТегиКлассификатора_Обновить()

#КонецОбласти
//-Классификаторы

//+вог

#Область КарточкаОбъекта

#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементовПереключательРежима

&НаКлиенте
Процедура КарточкаОбъектаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Элементы.ГруппаГруппировкаЛевоПраво.Видимость Тогда
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Истина;
	КонецЕсли;
	
	Если СтрНайти(Расшифровка, "ГиперссылкаПерейти") <> 0 Тогда
		ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Расшифровка);
		ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	ИначеЕсли Элементы.Найти(Расшифровка) <> Неопределено Тогда
		Если Истина Тогда
			Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаПортрет;
			
			РазвернутьСворачиваемуюГруппу(Расшифровка);
			ТекущийЭлементВыбор = Расшифровка;
			ПодключитьОбработчикОжидания("УстановитьАктивностьТекущийЭлемент",0.0001,Истина);
		Иначе
			Если Объект.Свойство(Расшифровка) Тогда
				Если ТипЗнч(Объект[Расшифровка]) <> Тип("Строка")
					И ТипЗнч(Объект[Расшифровка]) <> Тип("Булево")
					И ЗначениеЗаполнено(Объект[Расшифровка]) Тогда
					ПоказатьЗначение(,Объект[Расшифровка]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьТекущийЭлемент()
	ЭтаФорма.ТекущийЭлемент = Элементы[ТекущийЭлементВыбор];
КонецПроцедуры

&НаКлиенте
Процедура СтраницыКарточкаОбъектаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаПортрет Тогда
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Истина;
	Иначе
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГруппыРекурсивно(Элемент, Видимость)
	Если Видимость = Истина И 
		(СтрНайти(Элемент.Имя, "ДекорацияОткрыть") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаОбъемКолонки") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаДлинаКолонки") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаПлощадьКолонки") <> 0) Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Видимость = Видимость;
	Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьВидимостьГруппыРекурсивно(ПодчиненныйЭлемент,Видимость);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиФормыПриИзменении(Элемент)
	
	Если НастройкаВидимостиФормы = "ПоказатьВсе" Тогда
		//РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Ложь);
		//ИначеЕсли НастройкаВидимостиФормы = "ПоказатьОсновные" Тогда
		//	//РежимВидимостиПоказатьТолькоВажные = Истина;
		//	НастроитьФорму();
		//	СкрытьРаскрытьВсеГруппы(Ложь);
	Иначе
		//		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиКарточкиОбъектаПриИзменении(Элемент)
	
	Если НастройкаВидимостиКарточкиОбъекта = "ПоказатьЗаполненные" Тогда
		РежимВидимостиПоказатьТолькоЗаполненные = Истина;
	Иначе
		РежимВидимостиПоказатьТолькоЗаполненные = Ложь;
	КонецЕсли;   
	
	ОбновитьКарточку();
	
КонецПроцедуры

&НаСервере
Процедура СкрытьРаскрытьВсеГруппы(Свернуть = Неопределено)
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	
	Для Каждого ИмяГруппы из ИменаСворачиваемыхГрупп Цикл
		
		ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементов

&НаСервере
Процедура НастроитьФорму(НастройкиВидимостиИЗаголовков = Неопределено)
	
	Элементы.СтраницаКарточкаОбъекта.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
	// Настройка видимости и заголовков
	Если Не ЗначениеЗаполнено(НастройкиВидимостиИЗаголовков) Тогда
		НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, Ложь);
	КонецЕсли;
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) <> Неопределено Тогда
			Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		КонецЕсли;
		
		// Формирование видимости элементов подменю "Перейти"
		ИмяКоманды = ЭлементВидимость.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				Элементы[ИмяКоманды].Видимость = ЭлементВидимость.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		Если Элементы.Найти(ЭлементЗаголовок.Ключ) <> Неопределено Тогда
			Элементы[ЭлементЗаголовок.Ключ].Заголовок = ЭлементЗаголовок.Значение;
		КонецЕсли;
		
		// Формирование заголовков элементов подменю "Перейти"
		ИмяКоманды = ЭлементЗаголовок.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				
				СтрокаИсключение = НСтр("ru = 'Список'");
				НачалоСтроки     = СтрНайти(ЭлементЗаголовок.Значение, "(") - 1;
				
				Если СтрНайти(ЭлементЗаголовок.Значение, СтрокаИсключение) = 0
					И НачалоСтроки > 0 Тогда
					
					Элементы[ИмяКоманды].Заголовок = СокрЛП(Лев(ЭлементЗаголовок.Значение, НачалоСтроки));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастроитьВидимостьСворачиваемыхГрупп();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемыхГрупп()
	
	НастроитьВидимостьСворачиваемойГруппы("Портрет");
	НастроитьВидимостьСворачиваемойГруппы("КонтактнаяИнформация");
	НастроитьВидимостьСворачиваемойГруппы("Классификаторы");       
	
	НастроитьВидимостьСворачиваемойГруппы("СвязиКонтатныхЛиц");
	НастроитьВидимостьСворачиваемойГруппы("КлючевыеСобытия");
	НастроитьВидимостьСворачиваемойГруппы("ДополнительнаяИнформация");
	НастроитьВидимостьСворачиваемойГруппы("ДополнительныеРеквизиты");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемойГруппы(ИмяГруппы)
	
	ЭлементСворачиваяГруппа = Элементы["СворачиваемаяГруппа" + ИмяГруппы];
	Элементы["ГруппаЗаголовок" + ИмяГруппы].Видимость = ЕстьВидимыеЭлементыВГруппе(ЭлементСворачиваяГруппа);
	
КонецПроцедуры

&НаСервере
Функция ЕстьВидимыеЭлементыВГруппе(Элемент)
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Если ПодчиненныйЭлемент.Видимость 
				И ЕстьВидимыеЭлементыВГруппе(ПодчиненныйЭлемент) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПодчиненныйЭлемент.Видимость Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	ИмяГруппыСвернутьРазвернуть = Элемент.Имя;
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияОткрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияЗакрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ЗаголовокГруппы", "");
	ИзменитьСвернутостьГруппы(ИмяГруппыСвернутьРазвернуть);
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы",0.0001,Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть = Неопределено)
	Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость, Не Свернуть);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Свернуть);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Не Свернуть);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	Если Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяГруппыСвернутьРазвернуть];
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазвернутьСворачиваемуюГруппу(ИмяГруппы)
	ГруппаРодитель  = Элементы[ИмяГруппы].Родитель;
	Если ГруппаРодитель = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	ИмяГруппыРодителя =ГруппаРодитель.Имя;
	
	Если СтрНайти(ИмяГруппыРодителя, "СворачиваемаяГруппа") = 0 Тогда
		РазвернутьСворачиваемуюГруппу(ИмяГруппыРодителя);
	Иначе
		ИмяГруппыРодителя = СтрЗаменить(ИмяГруппыРодителя, "СворачиваемаяГруппа", "");
		ИзменитьСвернутостьГруппы(ИмяГруппыРодителя, Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ИменаСворачиваемыхГрупп()
	
	ИменаСворачиваемыхГрупп = Новый Массив;
	
	ИменаСворачиваемыхГрупп.Добавить("Портрет");
	ИменаСворачиваемыхГрупп.Добавить("КонтактнаяИнформация");
	ИменаСворачиваемыхГрупп.Добавить("Классификаторы");
	ИменаСворачиваемыхГрупп.Добавить("СвязиКонтатныхЛиц");
	ИменаСворачиваемыхГрупп.Добавить("КлючевыеСобытия");
	ИменаСворачиваемыхГрупп.Добавить("ДополнительнаяИнформация");
	ИменаСворачиваемыхГрупп.Добавить("ДополнительныеРеквизиты");
	
	Возврат ИменаСворачиваемыхГрупп;
	
КонецФункции

&НаСервере
Процедура ОбновитьГиперссылкиИКарточку()
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, Ложь);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) = Неопределено
			Или СтрНайти(ЭлементВидимость.Ключ,"Гиперссылка") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		Если Элементы.Найти(ЭлементЗаголовок.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[ЭлементЗаголовок.Ключ].Заголовок = ЭлементЗаголовок.Значение;
	КонецЦикла;
	
	Элементы.Файлы.Заголовок = Элементы.ГиперссылкаПерейтиФайлы.Заголовок;	
	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКарточку()
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, Ложь);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьГруппыПоУмолчанию()
	
	ИменаСворачиваемыхГрупп = Новый Массив;
	ИменаСворачиваемыхГрупп.Добавить("ДополнительнаяИнформация");
	ИменаСворачиваемыхГрупп.Добавить("ДополнительныеРеквизиты");
	
	Для Каждого ИмяГруппы из ИменаСворачиваемыхГрупп Цикл
		ИзменитьСвернутостьГруппы(ИмяГруппы, Истина);
	КонецЦикла;
	
КонецПроцедуры

//++ VOG Иванов С.А. 29.10.2019 ID заявки: 000000775
&НаКлиенте
Процедура ДобавитьРольКонтактногоЛица(Команда)
	ТекДанные = Элементы.СвязиКонтатныхЛиц.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОкончаниеВыбораРоли = Новый ОписаниеОповещения("ОкончаниеВыбораРоли", ЭтаФорма, Новый Структура("ОбъектСвязи",ТекДанные.ОбъектСвязи));
	фиксНастройки = Новый НастройкиКомпоновкиДанных;
	
	эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	эОтбор.ПравоеЗначение = ПолучитьСписокДоступныхРолей(ТекДанные.ОбъектСвязи, Объект.Ссылка);
	эОтбор.Использование = Истина;
	ПараметрыОткрытия = Новый Структура;    
	ПараметрыОткрытия.Вставить("ФиксированныеНастройки", фиксНастройки);
	ОткрытьФорму("Справочник.РолиКонтактныхЛицПартнеров.ФормаВыбора", ПараметрыОткрытия,,,,,ОкончаниеВыбораРоли); 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРольКонтактногоЛица(Команда) //Павелко, CRM-110, 13.02.2020
	
	ТекДанные = Элементы.СвязиКонтатныхЛиц.ТекущиеДанные;
	
	Если Не Элементы.СвязиКонтатныхЛиц.ТекущиеДанные = Неопределено Тогда
		УдалитьРольКонтактногоЛицаНаСервере(Новый Структура("КонтактноеЛицо, ОбъектСвязи, CRM_РольКонтактногоЛица", ТекДанные.КонтактноеЛицо, ТекДанные.ОбъектСвязи, ТекДанные.CRM_РольКонтактногоЛица));		
		Элементы.СвязиКонтатныхЛиц.Обновить();
	КонецЕсли;	
				
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьРольКонтактногоЛицаНаСервере(Данные) //Павелко, CRM-110, 13.02.2020
	
	РегистрыСведений.вогРолиКонтактныхЛиц.СоздатьЗаписьРолиКонтактногоЛица(Данные, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОкончаниеВыбораРоли(Результат, Параметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("КонтактноеЛицо", Объект.Ссылка);
		СтруктураЗаписи.Вставить("ОбъектСвязи", Параметры.ОбъектСвязи);
		СтруктураЗаписи.Вставить("CRM_РольКонтактногоЛица", Результат);
		ДобавитьРольКонтактногоЛицаНаСервере(СтруктураЗаписи);	
		Элементы.СвязиКонтатныхЛиц.Обновить();
		Элементы.КонтактныеЛицаПодписанты.Обновить();
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьРольКонтактногоЛицаНаСервере(СтруктураЗаписи)
	РегистрыСведений.вогРолиКонтактныхЛиц.СоздатьЗаписьРолиКонтактногоЛица(СтруктураЗаписи);
	Если ТипЗнч(СтруктураЗаписи.ОбъектСвязи) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		РегистрыСведений.вогКонтактныеЛицаПодписанты.СоздатьЗаписьПодписантаКонтактногоЛица(СтруктураЗаписи);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокДоступныхРолей(ОбъектСвязи, КонтактноеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	РолиКонтактныхЛицПартнеров.Ссылка КАК Роль
		|ИЗ
		|	Справочник.РолиКонтактныхЛицПартнеров КАК РолиКонтактныхЛицПартнеров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогРолиКонтактныхЛиц КАК вогРолиКонтактныхЛиц
		|		ПО (РолиКонтактныхЛицПартнеров.Ссылка = вогРолиКонтактныхЛиц.CRM_РольКонтактногоЛица
		|				И вогРолиКонтактныхЛиц.КонтактноеЛицо = &КонтактноеЛицо
		|				И условиеОбъектаСвязи = &ОбъектСвязи)
		|ГДЕ
		|	вогРолиКонтактныхЛиц.CRM_РольКонтактногоЛица ЕСТЬ NULL
		|";
	Если ТипЗнч(ОбъектСвязи) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "условиеОбъектаСвязи", "ВЫРАЗИТЬ(вогРолиКонтактныхЛиц.ОбъектСвязи КАК Справочник.вогЮридическиеЛица)");
	ИначеЕсли ТипЗнч(ОбъектСвязи) = Тип("СправочникСсылка.Партнеры") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "условиеОбъектаСвязи", "ВЫРАЗИТЬ(вогРолиКонтактныхЛиц.ОбъектСвязи КАК Справочник.Партнеры)");
	ИначеЕсли ТипЗнч(ОбъектСвязи) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "условиеОбъектаСвязи", "ВЫРАЗИТЬ(вогРолиКонтактныхЛиц.ОбъектСвязи КАК Справочник.вогТорговыеТочки)");
	ИначеЕсли ТипЗнч(ОбъектСвязи) = Тип("СправочникСсылка.вогРаспределительныеЦентры") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "условиеОбъектаСвязи", "ВЫРАЗИТЬ(вогРолиКонтактныхЛиц.ОбъектСвязи КАК Справочник.вогРаспределительныеЦентры)");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	Запрос.УстановитьПараметр("ОбъектСвязи", ОбъектСвязи);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Роль");
	
КонецФункции
//-- VOG Иванов С.А. 29.10.2019 ID заявки: 000000775

#КонецОбласти

//-вог

// ++ VOG Ульянов И.В. 28.11.2019 task 941
#Область Виджеты

&НаКлиенте
Процедура HTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОтобразитьИконкуНастройкиHTML();
	СкрытьИконкуНастройкиHTML();

	АдресХранилищаТаблицаПросмотра = Неопределено;
	
	ТекущиеДелаДокументооборотКлиент.HTMLПриНажатии(
		Этаформа, Элемент, ДанныеСобытия, СтандартнаяОбработка, АдресХранилищаТаблицаПросмотра);
		
	// доработано VOG Ульянов И.В. 12.02.2020 CRM-311
	Если АдресХранилищаТаблицаПросмотра <> Неопределено тогда		
		Если АдресХранилищаТаблицаПросмотра.ТипРезультата = "ТаблицаЗначений" тогда
			ЭтаФорма.Элементы.ГруппаТаблицаЗначений.Видимость = Истина;
			ЭтаФорма.Элементы.ГруппаТабличныйДокумент.Видимость = Ложь;
			ЗагрузитьТаблицуПросмотра(АдресХранилищаТаблицаПросмотра);
		ИначеЕсли АдресХранилищаТаблицаПросмотра.ТипРезультата = "Макет" тогда
			ЭтаФорма.Элементы.ГруппаТаблицаЗначений.Видимость = Ложь;
			ЭтаФорма.Элементы.ГруппаТабличныйДокумент.Видимость = Истина;
			ВывестиДанныеВТаблицу(АдресХранилищаТаблицаПросмотра);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Отображать иконку настройки в полях html виджетов.
//
&НаКлиенте
Процедура ОтобразитьИконкуНастройкиHTML()
	
	НовыйТекущийВиджет = ИндексТекущегоВиджета();
	
	Если ЗначениеЗаполнено(НовыйТекущийВиджет) Тогда
		ИмяРеквизитаHTML = "HTML" + НовыйТекущийВиджет;
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаHTML])
			И СтрНайти(ЭтаФорма[ИмяРеквизитаHTML], ".visibility_img{visibility:hidden;}") Тогда
			
			ЭтаФорма[ИмяРеквизитаHTML] = СтрЗаменить(ЭтаФорма[ИмяРеквизитаHTML],
				".visibility_img{visibility:hidden;}",
				".visibility_img{visibility:visible;}");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Скрывает иконку настройки в полях html виджетов.
//
&НаКлиенте
Процедура СкрытьИконкуНастройкиHTML()
	
	ПодключитьОбработчикОжидания("СкрытьИконкуНастройкиHTML", 0.1, Истина);
	
	НовыйТекущийВиджет = ИндексТекущегоВиджета();
	
	Если ТекущийВиджетHTML = НовыйТекущийВиджет Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийВиджетHTML) Тогда
		ИмяРеквизитаHTML = "HTML" + ТекущийВиджетHTML;
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаHTML])
			И СтрНайти(ЭтаФорма[ИмяРеквизитаHTML], ".visibility_img{visibility:visible;}") Тогда
			
			ЭтаФорма[ИмяРеквизитаHTML] = СтрЗаменить(ЭтаФорма[ИмяРеквизитаHTML],
				".visibility_img{visibility:visible;}",
				".visibility_img{visibility:hidden;}");
		КонецЕсли;
	КонецЕсли;
	
	ТекущийВиджетHTML = НовыйТекущийВиджет;
	
КонецПроцедуры

// Возвращает индекс текущего виджета по выделенному элементу форму.
// Если по выделенному элементу невозможно определить индекс виджета, то
// возвращается пустая строка.
//
&НаКлиенте
Функция ИндексТекущегоВиджета() Экспорт
	
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ПолеФормы")
		И ТипЗнч(ТекущийЭлемент) <> Тип("ДекорацияФормы") Тогда
		
		Возврат "";
	КонецЕсли;
	
	ИндексТекущегоВиджета = Прав(ТекущийЭлемент.Имя,3);
	
	Если Сред(ИндексТекущегоВиджета, 2, 1) <> "_" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ИндексТекущегоВиджета;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВиджетыНаВкладке()
	
	ЗаполнитьВиджетыНаВкладкеНаСервере();
	
КонецПроцедуры	
	
&НаСервере
Процедура ЗаполнитьВиджетыНаВкладкеНаСервере()
	
	ОбъектСвязи = Объект.Ссылка;
	
	ПрочитатьНастройкиВиджетов = Истина;
	ЗаполнитьВиджеты(ПрочитатьНастройкиВиджетов);
			
	ЦветНепринятаяВерсия = ЦветаСтиля.НепринятаяВерсия;
			
	ТекущиеДелаДокументооборотСервер.ЗаполнитьКэшКартинокФормыТекущиеДела(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВиджеты(ПрочитатьНастройкиВиджетов = Ложь, Виджеты = Неопределено) Экспорт
	
	Если ПрочитатьНастройкиВиджетов = Истина Тогда
		// Загрузка настроек формы Текущие дела.
		Настройки = РегистрыСведений.НастройкиТекущихДел.ПолучитьНастройки();
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Настройки);
	КонецЕсли;
	
	// ++ VOG Ульянов И.В. 06.02.2020 CRM-239
	//ТекущиеДелаДокументооборотСервер.ЗаполнитьВиджетыТекущихДел(ЭтаФорма, Виджеты,1,4);
	//ТекущиеДелаДокументооборотСервер.ЗаполнитьВиджетыТекущихДел(ЭтаФорма, Виджеты,1,6); 
	ТекущиеДелаДокументооборотСервер.ЗаполнитьВиджетыТекущихДел(ЭтаФорма, Виджеты,1,5); // VOG Ульянов И.В. 12.02.2020 CRM-491
	// -- VOG Ульянов И.В. 06.02.2020 CRM-239
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаНажатие(Элемент)
	
	ИндексТекущегоВиджета = ИндексТекущегоВиджета();
	
	Если Не ЗначениеЗаполнено(ИндексТекущегоВиджета) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВиджет = ЭтаФорма["Виджет" + ИндексТекущегоВиджета];
	
	ТекущиеДелаДокументооборотКлиент.ОбработатьНажатиеНаОбластьМеню(
		ТекущийВиджет, ЭтаФорма, Элемент, ИндексТекущегоВиджета);
	
КонецПроцедуры
	
&НаСервере
Процедура ЗагрузитьТаблицуПросмотра(АдресВХранилище)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПросмотра = ПолучитьИзВременногоХранилища(АдресВХранилище.СтрокаРезультата);		
	
	МассивТекущихКолонок = ЭтаФорма.ПолучитьРеквизиты("ВзаимодействиеРасшифровка");
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	УдаляемыеЭлементыФормы = Новый Массив;
	
	Для каждого ЭлементМассива Из МассивТекущихКолонок Цикл
		МассивУдаляемыхРеквизитов.Добавить(ЭлементМассива.Путь + "." + ЭлементМассива.Имя);
		УдаляемыеЭлементыФормы.Добавить(ЭлементМассива.Имя);
	КонецЦикла;
	
	Для каждого ЭлементМассива Из УдаляемыеЭлементыФормы Цикл
		НайденныйЭлементФормы = Элементы.Найти(ЭлементМассива);
		Если НайденныйЭлементФормы <> Неопределено  Тогда
			Элементы.Удалить(НайденныйЭлементФормы);
		КонецЕсли;
	КонецЦикла;	
	
		МассивРеквизитов = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаПросмотра.Колонки Цикл
			
   		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,"ВзаимодействиеРасшифровка"));
    
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов, МассивУдаляемыхРеквизитов);
	
	Для Каждого Колонка Из ТаблицаПросмотра.Колонки Цикл
		НовыйЭлемент = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Элементы.ВзаимодействиеРасшифровка);       
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ВзаимодействиеРасшифровка." + Колонка.Имя;		
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
	КонецЦикла;	
	
	Элементы.ВзаимодействиеРасшифровка.ПодчиненныеЭлементы.Документ.Видимость = Ложь;
	
	Элементы.ВзаимодействиеРасшифровка.Доступность = Истина;
	Элементы.ВзаимодействиеРасшифровка.ТолькоПросмотр = Ложь;	
	
	ЗначениеВРеквизитФормы(ТаблицаПросмотра,"ВзаимодействиеРасшифровка");
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеРасшифровкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВиджеты(Команда)
	ЗаполнитьВиджетыНаВкладке();
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеРасшифровкаСортировать(Команда)
	
	Если ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя <> "" тогда
		ВзаимодействиеРасшифровка.Сортировать(ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеРасшифровкаСортироватьПоУбыванию(Команда)
	
	Если ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя <> "" тогда
		ВзаимодействиеРасшифровка.Сортировать(ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя+" Убыв");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТаблицу(СтруктураМакета)
	
	
	ВиджетМакетПросмотра = СтруктураМакета.СтрокаРезультата;
	
	ТаблицаВиджета.Очистить();
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;	
	
	СхемаКомпоновкиДанных = Справочники.Виджеты.ПолучитьМакет(СтруктураМакета.СтрокаРезультата); // изменено VOG Ульянов И.В. 12.02.2020 CRM-311
	
	АдресСхемыВиджеты = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ЭтаФорма.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыВиджеты));
    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	СохраненныеНастройкиХранилище = ПолучитьНастройкиИзХранилища(Пользователи.ТекущийПользователь(),Строка(ТипЗнч(Объект.Ссылка)),СтруктураМакета.СтрокаРезультата);
	Если СохраненныеНастройкиХранилище <> Неопределено тогда
		СохраненныеНастройки = СохраненныеНастройкиХранилище.Получить();
		КомпоновщикНастроек.ЗагрузитьНастройки(СохраненныеНастройки);
	КонецЕсли;	
	
	//Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОбъектСвязи", Объект.Ссылка);
	Если СтруктураМакета.ПараметрыОтбора <> Неопределено тогда
		Для каждого ЭлементСтруктуры из СтруктураМакета.ПараметрыОтбора цикл			
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;	
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	АдресДанныхРасшифровкиВиджеты = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ТаблицаВиджета);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
    
КонецПроцедуры	

&НаСервере
Функция ПолучитьНастройкиИзХранилища(Пользователь, ТипОбъекта, НазваниеМакета) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогНастройкиПросмотраВиджетов.Настройка КАК Настройка
		|ИЗ
		|	РегистрСведений.вогНастройкиПросмотраВиджетов КАК вогНастройкиПросмотраВиджетов
		|ГДЕ
		|	вогНастройкиПросмотраВиджетов.ТипОбъекта = &ТипОбъекта
		|	И вогНастройкиПросмотраВиджетов.НазваниеМакета = &НазваниеМакета
		|	И вогНастройкиПросмотраВиджетов.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("НазваниеМакета", НазваниеМакета);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.Настройка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаписатьНастройкиВХранилище() // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	НаборЗаписей = РегистрыСведений.вогНастройкиПросмотраВиджетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	НаборЗаписей.Отбор.ТипОбъекта.Установить(Строка(ТипЗнч(Объект.Ссылка)));
	НаборЗаписей.Отбор.НазваниеМакета.Установить(ВиджетМакетПросмотра);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();
	НоваяЗапись.ТипОбъекта = Строка(ТипЗнч(Объект.Ссылка));
	НоваяЗапись.НазваниеМакета = ВиджетМакетПросмотра;
	НоваяЗапись.Настройка = Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки);
	
	НаборЗаписей.Записать();	
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьОтборыТабличногоДокумента(Команда) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	Если ЭтаФорма.Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Ложь тогда
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Истина;
		//ЭтаФорма.Элементы.ОтобразитьОтборыТабличногоДокумента.Заголовок = "Скрыть отбор";
	Иначе	
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Ложь;
		//ЭтаФорма.Элементы.ОтобразитьОтборыТабличногоДокумента.Заголовок = "Отбор...";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьНастройкиТабличногоДокумента(Команда) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	Если ЭтаФорма.Элементы.КомпоновщикНастроекНастройки.Видимость = Ложь тогда
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройки.Видимость = Истина;
		//ЭтаФорма.Элементы.ОтобразитьНастройкиТабличногоДокумента.Заголовок = "Скрыть настройки";
	Иначе	
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройки.Видимость = Ложь;
		//ЭтаФорма.Элементы.ОтобразитьНастройкиТабличногоДокумента.Заголовок = "Настройки...";
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТабличныйДокумент(Команда) // VOG Ульянов И.В. 12.02.2020 CRM-311
	ОбновитьТабличныйДокументНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьТабличныйДокументНаСервере() // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	//ЗаписатьНастройкиВХранилище(Пользователи.ТекущийПользователь(),Строка(ТипЗнч(Объект.Ссылка)),ВиджетМакетПросмотра,КомпоновщикНастроек.Настройки);	
	
	ТаблицаВиджета.Очистить();
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;	
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыВиджеты);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	АдресДанныхРасшифровкиВиджеты = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ТаблицаВиджета);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
    
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВиджетаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	СтандартнаяОбработка = Ложь;
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьЗначениеРасшифровки", ЭтотОбъект);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровкиВиджеты, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыВиджеты));
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиТабличногоДокумента(Команда)
	
	ЗаписатьНастройкиВХранилище();
	
КонецПроцедуры

#КонецОбласти

// -- VOG Ульянов И.В. 28.11.2019 task 941

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//+++ Терпогосян Д.Б. [05.08.2021 15:27:57] № DEV-813 
	СклонениеПредставленийОбъектов.ПриЗаписиНаСервере(ЭтотОбъект, Объект.Наименование, ТекущийОбъект.Ссылка, Истина, ?(Объект.Пол = Перечисления.ПолФизическогоЛица.Мужской, 1, 2));
	//--- Терпогосян Д.Б. [05.08.2021 15:27:57] № DEV-813 
	
КонецПроцедуры

//+++ Терпогосян Д.Б. [05.08.2021 15:29:22] № DEV-813
// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
&НаКлиенте
Процедура Склонения(Команда)
    СклонениеПредставленийОбъектовКлиент.ОбработатьКомандуСклонения(ЭтотОбъект, Объект.Наименование, Истина, ?(Строка(Объект.Пол) = "Мужской", 1, 2));
КонецПроцедуры

//--- Терпогосян Д.Б. [05.08.2021 15:29:28] № DEV-813 
