
#Область ОбработчикиСобытий

// Обработчик события ОбработкаПолученияДанныхВыбора
//
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ДоговорКонтрагента")
		И Параметры.Свойство("ОбъектСвязи") Тогда
		
		СтандартнаяОбработка 	= Ложь;
		ДанныеВыбора 		 	= Новый СписокЗначений;
		
		СтрокаПоиска 			= "";
		Параметры.Свойство("СтрокаПоиска", СтрокаПоиска);
		
		РолиКонтактныхЛиц = Новый Массив;
		РолиКонтактныхЛиц.Добавить(Справочники.РолиКонтактныхЛицПартнеров.ГенеральныйДиректор);
		РолиКонтактныхЛиц.Добавить(Справочники.РолиКонтактныхЛицПартнеров.ПодписантДоговора);
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогСвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо КАК КонтактноеЛицо,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ ВТ_КонтактныеЛица
		|ИЗ
		|	РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК вогСвязиКонтактныхЛицСрезПоследних
		|ГДЕ
		|	вогСвязиКонтактныхЛицСрезПоследних.ОбъектСвязи В(&ЮридическоеЛицо)
		|	И вогСвязиКонтактныхЛицСрезПоследних.CRM_РольКонтактногоЛица В(&РолиКонтактныхЛиц)
		|	%Условие%
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вогСвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо,
		|	2
		|ИЗ
		|	РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК вогСвязиКонтактныхЛицСрезПоследних
		|ГДЕ
		|	вогСвязиКонтактныхЛицСрезПоследних.ОбъектСвязи В(&Партнер)
		|	И вогСвязиКонтактныхЛицСрезПоследних.CRM_РольКонтактногоЛица В(&РолиКонтактныхЛиц)
		|	%Условие%
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТ_КонтактныеЛица.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТ_МинПриоритет
		|ИЗ
		|	ВТ_КонтактныеЛица КАК ВТ_КонтактныеЛица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_КонтактныеЛица.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	ВТ_КонтактныеЛица КАК ВТ_КонтактныеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МинПриоритет КАК ВТ_МинПриоритет
		|		ПО ВТ_КонтактныеЛица.Приоритет = ВТ_МинПриоритет.Приоритет";
		
		Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"%Условие%",
				"И ВЫРАЗИТЬ(вогСвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо КАК Справочник.КонтактныеЛицаПартнеров).Наименование ПОДОБНО &СтрокаПоиска");
			Запрос.УстановитьПараметр("СтрокаПоиска", 		СтрокаПоиска + "%");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", "");
		КонецЕсли;
		
		Если Параметры.Свойство("Партнер") Тогда
			Запрос.УстановитьПараметр("Партнер", Параметры.Партнер);
		Иначе
			Запрос.УстановитьПараметр("Партнер", Справочники.Партнеры.ПустаяСсылка());
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ЮридическоеЛицо", 	Параметры.ОбъектСвязи);
		Запрос.УстановитьПараметр("РолиКонтактныхЛиц", 	РолиКонтактныхЛиц);
		
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
				ЭлементСписка = Новый Структура;
				ЭлементСписка.Вставить("Значение", Выборка.КонтактноеЛицо);
				ЭлементСписка.Вставить("Предупреждение");
			Иначе
				ЭлементСписка = Выборка.КонтактноеЛицо;
			КонецЕсли;
			
			ДанныеВыбора.Добавить(ЭлементСписка);
			
		КонецЦикла;
		
	// ++ VOG Солодов В.В. 10.02.2020 CRM-326
	ИначеЕсли Параметры.Свойство("Отбор")
		И Параметры.Отбор.Свойство("ОбъектСвязи") Тогда 
		
		СтандартнаяОбработка 	= Ложь;
		ДанныеВыбора 		 	= Новый СписокЗначений;
		
		СтрокаПоиска 			= "";
		Параметры.Свойство("СтрокаПоиска", СтрокаПоиска);
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	вогСвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК вогСвязиКонтактныхЛицСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ПО вогСвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо = КонтактныеЛицаПартнеров.Ссылка
		|			%Условие%
		|ГДЕ
		|	вогСвязиКонтактныхЛицСрезПоследних.ОбъектСвязи В(&ОбъектСвязи)";
		
		Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				"%Условие%",
				"И КонтактныеЛицаПартнеров.Наименование ПОДОБНО &СтрокаПоиска");
			Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОбъектСвязи", Параметры.Отбор.ОбъектСвязи);
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
				ЭлементСписка = Новый Структура;
				ЭлементСписка.Вставить("Значение", Выборка.КонтактноеЛицо);
				ЭлементСписка.Вставить("Предупреждение");
			Иначе
				ЭлементСписка = Выборка.КонтактноеЛицо;
			КонецЕсли;
			
			ДанныеВыбора.Добавить(ЭлементСписка);
			
		КонецЦикла;
		
		// -- VOG Солодов В.В. 10.02.2020
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограмныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

//+вог

// Возвращает настройки видимости и заголовков элементов формы. Используется для построения формы и табличного
// документа карточки номенклатуры.
// Параметры:
//  Объект - СправочникОбъект.Партнеры, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитов
//	РежимВидимостиПоказатьТолькоВажные 	- Булево - признак отображения основных реквизитов
//
// Возвращаемое значение:
//  Структура - структура с ключами:
//		* ВидимостьЭлементов - структура видимости элементов
//		* ЗаголовкиЭлементов - структура заголовков элементов
//
Функция НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные = Ложь) Экспорт
	
	НастройкиВидимостиИЗаголовков = Новый Структура;
	
	ВидимостьЭлементов = СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные);
	УстановитьПривилегированныйРежим(Истина);
	ЗаголовкиЭлементов = СтруктураЗаголовковЭлементовФормы(Объект, ВидимостьЭлементов);
	УстановитьПривилегированныйРежим(Ложь);
		
	НастройкиВидимостиИЗаголовков.Вставить("ВидимостьЭлементов", ВидимостьЭлементов);
	НастройкиВидимостиИЗаголовков.Вставить("ЗаголовкиЭлементов", ЗаголовкиЭлементов);
		
	Возврат НастройкиВидимостиИЗаголовков;
	
КонецФункции

//-вог

#КонецОбласти

#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область КарточкаОбъекта

// Возвращает табличный документ партнера.
// Параметры:
//  Партнер - СправочникОбъект.Партнеры, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитов 
//  НастройкиВидимостиИЗаголовков - Структура - см. функцию Справочники.КонтактныеЛицаПартнеров.НастройкиВидимостиИЗаголовков
//
// Возвращаемое значение:
//	ТабличныйДокумент - табличный документ с реквизитами
//
Функция ТабличныйДокументКарточкиОбъекта(Контакт, НастройкиВидимостиИЗаголовков) Экспорт
	
	Перем Заголовок;
	
	ТолькоЗаполненные = (НастройкиВидимостиИЗаголовков.Свойство("ТолькоЗаполненные") И НастройкиВидимостиИЗаголовков.ТолькоЗаполненные);
	
	Объект = Неопределено;
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Объект = Контакт.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров")
		Или ТипЗнч(Контакт) = Тип("ДанныеФормыСтруктура") Тогда
		Объект = Контакт;
	Иначе
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	ТабличныйДокументКарточка = Новый ТабличныйДокумент;
	
	СтруктураВидимости = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	СтруктураЗаголовков = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Макет = ПолучитьМакет("ПФ_MXL_КарточкаКонтактногоЛицаПартнера");
	
	#Область Шапка
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Объект);
		
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		ОбластьШапка.Параметры.Наименование = ТекстЗначенияНеЗаполнен("Наименование");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаНаименование = "Наименование";
		
	ТабличныйДокументКарточка.Присоединить(ОбластьШапка);
	
	#КонецОбласти
	
	ТабличныйДокументКолонки = Новый ТабличныйДокумент;
	
	#Область ОбщиеДанные
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	//Классификаторы
	Классификаторы = CRM_КлассификаторыВызовСервера.ТаблицаСоставаКлассификаторовОбъекта(Объект.Ссылка);
	Если ГлаваВидна("Классификаторы", СтруктураВидимости,, Классификаторы.Количество()) Тогда 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаКлассификаторов", Классификаторы);
		Запрос.УстановитьПараметр("ОбъектСсылка", Объект.Ссылка);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаКлассификаторов.Классификатор КАК Классификатор,
			|	ТаблицаКлассификаторов.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
			|	ТаблицаКлассификаторов.Аналитика КАК Аналитика
			|ПОМЕСТИТЬ втТаблицаКлассификаторов
			|ИЗ
			|	&ТаблицаКлассификаторов КАК ТаблицаКлассификаторов
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Классификатор,
			|	Аналитика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора,
			|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
			|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
			|ПОМЕСТИТЬ втТекущиеЗначенияКлассификаторов
			|ИЗ
			|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
			|ГДЕ
			|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &ОбъектСсылка
			|	И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец, CRM_ОбъектыЗначенийКлассификаторов.Аналитика) В
			|			(ВЫБРАТЬ
			|				втТаблицаКлассификаторов.Классификатор,
			|				втТаблицаКлассификаторов.Аналитика
			|			ИЗ
			|				втТаблицаКлассификаторов КАК втТаблицаКлассификаторов)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЗначениеКлассификатора,
			|	Аналитика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_ЗначенияКлассификаторов.Владелец КАК Классификатор,
			|	CRM_ЗначенияКлассификаторов.Ссылка КАК Значение,
			|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит
			|ПОМЕСТИТЬ втВсеЗначенияКлассификаторов
			|ИЗ
			|	втТаблицаКлассификаторов КАК втТаблицаКлассификаторов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
			|		ПО втТаблицаКлассификаторов.Классификатор = CRM_ЗначенияКлассификаторов.Владелец
			|ГДЕ
			|	НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Классификатор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втВсеЗначенияКлассификаторов.Классификатор КАК Классификатор,
			|	втВсеЗначенияКлассификаторов.Классификатор.ВидОтображения КАК ВидОтображения,
			|	втВсеЗначенияКлассификаторов.Классификатор.Представление,
			|	втВсеЗначенияКлассификаторов.Значение,
			|	втВсеЗначенияКлассификаторов.Значение.Представление,
			|	втВсеЗначенияКлассификаторов.ДополнительныйРеквизит,
			|	ЕСТЬNULL(втТекущиеЗначенияКлассификаторов.ЗначениеРеквизита, НЕОПРЕДЕЛЕНО) КАК ЗначениеРеквизита,
			|	ВЫБОР
			|		КОГДА втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Включен
			|ИЗ
			|	втВсеЗначенияКлассификаторов КАК втВсеЗначенияКлассификаторов
			|		ЛЕВОЕ СОЕДИНЕНИЕ втТекущиеЗначенияКлассификаторов КАК втТекущиеЗначенияКлассификаторов
			|		ПО втВсеЗначенияКлассификаторов.Значение = втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора
			|
			|УПОРЯДОЧИТЬ ПО
			|	втВсеЗначенияКлассификаторов.Классификатор.РеквизитДопУпорядочивания,
			|	втВсеЗначенияКлассификаторов.Значение.РеквизитДопУпорядочивания
			|ИТОГИ ПО
			|	Классификатор";
		
		ВыборкаКлассификатор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	КонецЕсли;	
	
	//Доп. реквизиты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитов.Свойство КАК Свойство,
	|	НаборыДополнительныхРеквизитов.Ссылка КАК НаборСвойств,
	|	НаборыДополнительныхРеквизитов.Свойство.Заголовок КАК ПредставлениеРеквизита,
	|	КонтактныеЛицаПартнеровДополнительныеРеквизиты.Значение КАК Значение,
	|	ИСТИНА КАК ОбщееСвойство,
	|	НаборыДополнительныхРеквизитов.НомерСтроки КАК НомерСтрокиДляСортировки
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.ДополнительныеРеквизиты КАК КонтактныеЛицаПартнеровДополнительныеРеквизиты
	|		ПО (КонтактныеЛицаПартнеровДополнительныеРеквизиты.Ссылка = &Контакт)
	|			И НаборыДополнительныхРеквизитов.Свойство = КонтактныеЛицаПартнеровДополнительныеРеквизиты.Свойство
	|ГДЕ
	|	НЕ НаборыДополнительныхРеквизитов.Свойство.ЭтоДополнительноеСведение
	|	И НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтактныеЛицаПартнеров)";
	
	Если ТолькоЗаполненные Тогда
		Запрос.Текст = Запрос.Текст  + " И НЕ КонтактныеЛицаПартнеровДополнительныеРеквизиты.Значение ЕСТЬ NULL"
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контакт", Объект.Ссылка);
	ДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	ДополнительныеРеквизиты.Сортировать("ОбщееСвойство Убыв, НомерСтрокиДляСортировки Возр");
		
	#КонецОбласти
	
	#Область ТабличныйДокументЛево
	
	ТабличныйДокументЛево = Новый ТабличныйДокумент;
		
	#Область Портрет
	
	Если ГлаваВидна("Портрет", СтруктураВидимости) Тогда 
		
		ОбластьПортретКлиентаЗаголовок = Макет.ПолучитьОбласть("ПортретЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьПортретКлиентаЗаголовок);
		
		// Вывод картинки
		Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
			
			ОбластьПортретКартинка = Макет.ПолучитьОбласть("ПортретКартинка");
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				КартинкаКонтаткта = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Объект.CRM_Фотография);
				УстановитьПривилегированныйРежим(Ложь);
			Исключение
				КартинкаКонтаткта = Неопределено; 
			КонецПопытки;
			
			Если ЗначениеЗаполнено(КартинкаКонтаткта) Тогда
				ОбластьКартинка = ОбластьПортретКартинка.Области.АдресКартинки; 
				
				Если ТипЗнч(КартинкаКонтаткта) = Тип("Картинка") Тогда
					ОбластьКартинка.Картинка = КартинкаКонтаткта;
				ИначеЕсли ТипЗнч(КартинкаКонтаткта) = Тип("ДвоичныеДанные") Тогда
					ОбластьКартинка.Картинка = Новый Картинка(КартинкаКонтаткта);
				КонецЕсли;
				
				ОбластьПортретКартинка.Параметры.Расшифровка = "ФайлКартинки";
				
				ТабличныйДокументЛево.Вывести(ОбластьПортретКартинка);
			КонецЕсли;
			
		Иначе
			
			ОписаниеКартинкиНет = Макет.ПолучитьОбласть("ФайлКартинкиСтрока");
			ОписаниеКартинкиНет.Параметры.Расшифровка = "ФайлКартинки";
			ТабличныйДокументЛево.Вывести(ОписаниеКартинкиНет);
			
		КонецЕсли;	
		
		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Комментарий", Объект.Комментарий,,, ТолькоЗаполненные);
		Если РазделВиден("CRM_ЛичныеИнтересы", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "CRM_ЛичныеИнтересы", Объект.CRM_ЛичныеИнтересы,,, ТолькоЗаполненные);
		КонецЕсли;
				
		Если РазделВиден("CRM_ТипыОтношений", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "CRM_ТипыОтношений", Объект.CRM_ТипОтношенийПредставление,,, ТолькоЗаполненные);
		КонецЕсли;
												
		Если РазделВиден("ГиперссылкаПерейтиДокументы", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиДокументыСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиДокументы";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиИзображения", СтруктураВидимости) Тогда
			ОбластьОписаниеИзображенияСтрока = Макет.ПолучитьОбласть("ИзображенияСтрока");
			
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиИзображения", Заголовок) Тогда
				ОбластьОписаниеИзображенияСтрока.Параметры.Изображения = Заголовок;
				ОбластьОписаниеИзображенияСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиИзображения";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьОписаниеИзображенияСтрока);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимости) Тогда
			ОбластьОписаниеФайлыСтрока = Макет.ПолучитьОбласть("ФайлыСтрока");
			
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиФайлы", Заголовок) Тогда
				ОбластьОписаниеФайлыСтрока.Параметры.Файлы = Заголовок;
				ОбластьОписаниеФайлыСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиФайлы";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьОписаниеФайлыСтрока);
		КонецЕсли;
		
		Если ГлаваВидна("Классификаторы", СтруктураВидимости,, Классификаторы.Количество())
		  И РазделВиден("ГиперссылкаПерейтиЗначенияКлассификаторов", СтруктураВидимости) Тогда
			ОбластьГиперссылкаПерейтиЗначенияКлассификаторов = Макет.ПолучитьОбласть("ГиперссылкаПерейтиЗначенияКлассификаторовСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиЗначенияКлассификаторов", Заголовок) Тогда  
				ОбластьГиперссылкаПерейтиЗначенияКлассификаторов.Параметры.ГиперссылкаПерейтиЗначенияКлассификаторов = Заголовок;
			КонецЕсли;
			ОбластьГиперссылкаПерейтиЗначенияКлассификаторов.Параметры.Расшифровка = "ГиперссылкаПерейтиЗначенияКлассификаторов";
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиЗначенияКлассификаторов);
		КонецЕсли;
				
	КонецЕсли;
		
	#КонецОбласти
	
	#Область КонтактнаяИнформация
	
	Если ГлаваВидна("КонтактнаяИнформация", СтруктураВидимости) Тогда 
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("КонтактнаяИнформацияЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		ГруппаВидовКИ = вогОбщегоНазначения.ГруппаВидовКИОбъекта(Объект.Ссылка.Метаданные());
		Если ГруппаВидовКИ <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
			Запрос.УстановитьПараметр("КонтактнаяИнформация", Объект.КонтактнаяИнформация.Выгрузить());
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
				|	КонтактнаяИнформация.Вид КАК Вид,
				|	КонтактнаяИнформация.Представление
				|ПОМЕСТИТЬ КонтактнаяИнформация
				|ИЗ
				|	&КонтактнаяИнформация КАК КонтактнаяИнформация
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Вид
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СправочникВидыКонтактнойИнформации.Ссылка КАК ВидКИ,
				|	СправочникВидыКонтактнойИнформации.Представление КАК ВидКИПредставление,
				|	ВЫБОР
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое) ТОГДА 4
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА 3
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА 2
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс) ТОГДА 1
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ДопПолеСортировки,
				|	ВЫБОР
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое) ТОГДА 2
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА 2
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА 1
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс) ТОГДА 1
				|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА 1
				|		ИНАЧЕ 2
				|	КОНЕЦ КАК Колонка,
				|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0) КАК НомерСтроки,
				|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК Представление
				|ИЗ
				|	Справочник.ВидыКонтактнойИнформации КАК СправочникВидыКонтактнойИнформации
				|		ЛЕВОЕ СОЕДИНЕНИЕ КонтактнаяИнформация КАК КонтактнаяИнформация
				|		ПО СправочникВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
				|ГДЕ
				|	НЕ СправочникВидыКонтактнойИнформации.ПометкаУдаления
				|	И СправочникВидыКонтактнойИнформации.Используется
				|	И ЕСТЬNULL(СправочникВидыКонтактнойИнформации.Родитель.Используется, ИСТИНА)
				|	И СправочникВидыКонтактнойИнформации.Родитель В(&ГруппаВидовКИ)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ВидКИ ИЕРАРХИЯ";
			
			ПорядковыйНомер = 1;
			
			КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
			КонтактнаяИнформация.Сортировать("Колонка, ДопПолеСортировки, НомерСтроки");
			
			Для каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
				Если Не ЗначениеЗаполнено(ОбъектКонтактнойИнформации.Представление) Тогда
					ПорядковыйНомер = ПорядковыйНомер + 1;	
					Продолжить;
				
				КонецЕсли;
				
				ИмяЭлементаКИ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
					"КонтактнаяИнформацияПоле",
					СтрЗаменить(ОбъектКонтактнойИнформации.ВидКИ.УникальныйИдентификатор(), "-", "x"),
					ПорядковыйНомер);
				
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "КонтактнаяИнформация", ОбъектКонтактнойИнформации.Представление, ОбъектКонтактнойИнформации.ВидКИПредставление, ИмяЭлементаКИ, ТолькоЗаполненные);		
				
				ПорядковыйНомер = ПорядковыйНомер + 1;	
				
			КонецЦикла;
							
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РазделыЛево
	
	ОписаниеРазделов = вогОбщегоНазначения.ПолучитьДанныеРазделаКарточки(МетаданныеОбъекта.ПолноеИмя(), 
		"Лево", ВыборкаКлассификатор, ДополнительныеРеквизиты);
	Для каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
		Если ОписаниеРаздела.ДанныеРаздела.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЦветФона = ОписаниеРаздела.ЦветФона;
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("РазделЗаголовокЛево");
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОписаниеРаздела.РазделПредставление;
		ТабличныйДокументЛево.Вывести(ОбластьЗаголовок);		   
		
		Для каждого ЭлементРаздела Из ОписаниеРаздела.ДанныеРаздела Цикл
			ОписаниеДанных = Неопределено;
			Если Не ЭлементРаздела.СоставРаздела.Свойство("ОписаниеДанных", ОписаниеДанных) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементРаздела.ТипРаздела = "ДополнительныеРеквизиты" Тогда				
				ИмяЭлементаДопРеквизита = "ДополнительныйРеквизитЗначение_" 
					+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.НаборСвойств.УникальныйИдентификатор())), "-", "x")
					+ "_"
					+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.Свойство.УникальныйИдентификатор())), "-", "x");
				
				Если РазделВиден(ИмяЭлементаДопРеквизита, СтруктураВидимости) Тогда 
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ДополнительныеРеквизитыЛево", ОписаниеДанных.Значение, ОписаниеДанных.ПредставлениеРеквизита, ИмяЭлементаДопРеквизита,, ЦветФона);		
				КонецЕсли;	
				
			ИначеЕсли ЭлементРаздела.ТипРаздела = "Классификаторы" Тогда
				ИмяЭлементаКлассфикатора =  CRM_КлассификаторыВызовСервера.ИмяОсновногоЭлементаКлассификатора(ОписаниеДанных.Классификатор, ОписаниеДанных.ВидОтображения); 
				Если ТипЗнч(ОписаниеДанных.Значения) = Тип("Строка") Тогда
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "КлассификаторыЛево", ОписаниеДанных.Значения, ОписаниеДанных.КлассификаторПредставление, ИмяЭлементаКлассфикатора, ТолькоЗаполненные, ЦветФона);
				Иначе	
					Если ОписаниеДанных.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
						Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
							ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ДополнительныеРеквизитыЛево", СтруктураЗначения.ЗначениеРеквизита, СтруктураЗначения.ЗначениеПредставление, ИмяЭлементаКлассфикатора, ТолькоЗаполненные, ЦветФона);
						КонецЦикла
						
					Иначе	
					
						ОбластьТаблицейЗаголовок = Макет.ПолучитьОбласть("КлассификаторыТаблицейЗаголовокЛевоСтрока");
						ОбластьТаблицейЗаголовок.Параметры.КлассификаторыЗаголовок = ОписаниеДанных.КлассификаторПредставление;
						ОбластьТаблицейЗаголовок.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
						
						УстановитьЦветФонаОбласти(ОбластьТаблицейЗаголовок, ЦветФона);	
						ТабличныйДокументЛево.Вывести(ОбластьТаблицейЗаголовок);		   
						
						Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
							ОбластьКлассификаторыТаблицейСтрока = Макет.ПолучитьОбласть("КлассификаторыТаблицейЛевоСтрока");
							ОбластьКлассификаторыТаблицейСтрока.Параметры.КлассификаторыЛевоРеквизит = СтруктураЗначения.ЗначениеПредставление;
							
							Если СтруктураЗначения.Включен Тогда
								Картинка = БиблиотекаКартинок.CRM_УстановитьФлажки;	
							Иначе
								Картинка = БиблиотекаКартинок.CRM_СнятьФлажки;	
							КонецЕсли;
							
							ОбластьКлассификаторыТаблицейСтрока.Область("КлассификаторыТаблицейЛевоКартинка").Картинка = Картинка;
							ОбластьКлассификаторыТаблицейСтрока.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
							
							УстановитьЦветФонаОбласти(ОбластьКлассификаторыТаблицейСтрока, ЦветФона);	
							ТабличныйДокументЛево.Вывести(ОбластьКлассификаторыТаблицейСтрока);		   
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	ТабличныйДокументКолонки.Присоединить(ТабличныйДокументЛево);
	
	#КонецОбласти
		
	#Область ТабличныйДокументПраво
	
	ТабличныйДокументПраво = Новый ТабличныйДокумент;
	
	#Область Связи
	
	#КонецОбласти
	
	#Область КлючевыеСобытия
	
	Если Не (Объект.CRM_КлючевыеСобытия.Количество() = 0 И ТолькоЗаполненные) Тогда
		Если ГлаваВидна("КлючевыеСобытия", СтруктураВидимости) Тогда 
			ОбластьЗаголовок = Макет.ПолучитьОбласть("КлючевыеСобытияЗаголовок");
			ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
			
			Если Объект.CRM_КлючевыеСобытия.Количество() > 0 Тогда
				Для каждого СтрокаТЧ Из Объект.CRM_КлючевыеСобытия Цикл
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КлючевыеСобытия", СтрокаТЧ.ДатаСобытия, СтрокаТЧ.ВидСобытия, "CRM_КлючевыеСобытия", ТолькоЗаполненные);		
				КонецЦикла;
				
			Иначе	
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КлючевыеСобытия", ТекстЗначенияНеЗаполнен("КлючевыеСобытия"),, "CRM_КлючевыеСобытия");
			КонецЕсли;
							
		КонецЕсли;
		
	КонецЕсли;	
	
	#КонецОбласти
			
	#Область ДополнительнаяИнформация
	
	Если Не (Объект.CRM_ДополнительнаяИнформация.Количество() = 0 И ТолькоЗаполненные) Тогда
		Если ГлаваВидна("ДополнительнаяИнформация", СтруктураВидимости) 
		  И Объект.CRM_ДополнительнаяИнформация.Количество() > 0 Тогда 
			ОбластьЗаголовок = Макет.ПолучитьОбласть("ДополнительнаяИнформацияЗаголовок");
			ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
			
			Для каждого СтрокаТЧ Из Объект.CRM_ДополнительнаяИнформация Цикл
				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ДополнительнаяИнформация", СтрокаТЧ.Значение, СтрокаТЧ.Свойство, "ДополнительнаяИнформация", ТолькоЗаполненные);		
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РазделыПраво
	
	ОписаниеРазделов = вогОбщегоНазначения.ПолучитьДанныеРазделаКарточки(МетаданныеОбъекта.ПолноеИмя(), 
		"Право", ВыборкаКлассификатор, ДополнительныеРеквизиты);
	Для каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
		Если ОписаниеРаздела.ДанныеРаздела.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЦветФона = ОписаниеРаздела.ЦветФона;
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("РазделЗаголовокПраво");
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОписаниеРаздела.РазделПредставление;
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);		   
		
		Для каждого ЭлементРаздела Из ОписаниеРаздела.ДанныеРаздела Цикл
			ОписаниеДанных = Неопределено;
			Если Не ЭлементРаздела.СоставРаздела.Свойство("ОписаниеДанных", ОписаниеДанных) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементРаздела.ТипРаздела = "ДополнительныеРеквизиты" Тогда				
				ИмяЭлементаДопРеквизита = "ДополнительныйРеквизитЗначение_" 
					+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.НаборСвойств.УникальныйИдентификатор())), "-", "x")
					+ "_"
					+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.Свойство.УникальныйИдентификатор())), "-", "x");
				
				Если РазделВиден(ИмяЭлементаДопРеквизита, СтруктураВидимости) Тогда 
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ДополнительныеРеквизитыПраво", ОписаниеДанных.Значение, ОписаниеДанных.ПредставлениеРеквизита, ИмяЭлементаДопРеквизита,, ЦветФона);		
				КонецЕсли;	
				
			ИначеЕсли ЭлементРаздела.ТипРаздела = "Классификаторы" Тогда
				ИмяЭлементаКлассфикатора =  CRM_КлассификаторыВызовСервера.ИмяОсновногоЭлементаКлассификатора(ОписаниеДанных.Классификатор, ОписаниеДанных.ВидОтображения); 
				Если ТипЗнч(ОписаниеДанных.Значения) = Тип("Строка") Тогда
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КлассификаторыПраво", ОписаниеДанных.Значения, ОписаниеДанных.КлассификаторПредставление, ИмяЭлементаКлассфикатора, ТолькоЗаполненные, ЦветФона);
				Иначе	
					Если ОписаниеДанных.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
						Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
							ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ДополнительныеРеквизитыПраво", СтруктураЗначения.ЗначениеРеквизита, СтруктураЗначения.ЗначениеПредставление, ИмяЭлементаКлассфикатора, ТолькоЗаполненные, ЦветФона);
						КонецЦикла
						
					Иначе	
					
						ОбластьТаблицейЗаголовок = Макет.ПолучитьОбласть("КлассификаторыТаблицейЗаголовокПравоСтрока");
						ОбластьТаблицейЗаголовок.Параметры.КлассификаторыЗаголовок = ОписаниеДанных.КлассификаторПредставление;
						ОбластьТаблицейЗаголовок.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
						
						УстановитьЦветФонаОбласти(ОбластьТаблицейЗаголовок, ЦветФона);	
						ТабличныйДокументПраво.Вывести(ОбластьТаблицейЗаголовок);		   
						
						Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
							ОбластьКлассификаторыТаблицейСтрока = Макет.ПолучитьОбласть("КлассификаторыТаблицейПравоСтрока");
							ОбластьКлассификаторыТаблицейСтрока.Параметры.КлассификаторыПравоРеквизит = СтруктураЗначения.ЗначениеПредставление;
							
							Если СтруктураЗначения.Включен Тогда
								Картинка = БиблиотекаКартинок.CRM_УстановитьФлажки;	
							Иначе
								Картинка = БиблиотекаКартинок.CRM_СнятьФлажки;	
							КонецЕсли;
							
							ОбластьКлассификаторыТаблицейСтрока.Область("КлассификаторыТаблицейПравоКартинка").Картинка = Картинка;
							ОбластьКлассификаторыТаблицейСтрока.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
							
							УстановитьЦветФонаОбласти(ОбластьКлассификаторыТаблицейСтрока, ЦветФона);	
							ТабличныйДокументПраво.Вывести(ОбластьКлассификаторыТаблицейСтрока);		   
							
						КонецЦикла;
					
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
			
	ТабличныйДокументКолонки.Присоединить(ТабличныйДокументПраво);
	
	#КонецОбласти
	
	ТабличныйДокументКарточка.Вывести(ТабличныйДокументКолонки);
		
	Возврат ТабличныйДокументКарточка;
	
КонецФункции

Функция ТекстЗначенияНеЗаполнен(ИмяРаздела)

	Если ИмяРаздела = "Наименование" Тогда
		Возврат НСтр("ru = '<не указано>'");
	ИначеЕсли ИмяРаздела = "КлючевыеСобытия" Тогда
		Возврат НСтр("ru = '<не указано>'");
	ИначеЕсли ИмяРаздела = "CRM_ТипыОтношений" Тогда
		Возврат НСтр("ru = '<не указаны>'");
	ИначеЕсли ИмяРаздела = "Комментарий" Тогда
		Возврат НСтр("ru = '<не указано>'");
	ИначеЕсли ИмяРаздела = "CRM_ЛичныеИнтересы" Тогда
		Возврат НСтр("ru = '<не указано>'");
	ИначеЕсли ИмяРаздела = "КонтактнаяИнформация" Тогда
		Возврат НСтр("ru = '<значение не задано>'");
	ИначеЕсли ИмяРаздела = "КлассификаторыЛево" Тогда
		Возврат НСтр("ru = '<значения не заданы>'");	
	ИначеЕсли ИмяРаздела = "КлассификаторыПраво" Тогда
		Возврат НСтр("ru = '<значения не заданы>'");	
	ИначеЕсли ИмяРаздела = "ДополнительныеРеквизитыЛево" Тогда
		Возврат НСтр("ru = '<значение не задано>'");		
	ИначеЕсли ИмяРаздела = "ДополнительныеРеквизитыПраво" Тогда
		Возврат НСтр("ru = '<значение не задано>'");	
		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЦветФонаОбласти(ИсходнаяОбласть, ЦветФона)

	Если ЦветФона <> Неопределено Тогда
		ВсяОбласть	     = ИсходнаяОбласть.Область();
		Область   	     = ИсходнаяОбласть.Область(1, 2, 1, ВсяОбласть.Право - 1);
		Область.ЦветФона = ЦветФона;
		
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокумент, Макет, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита = Неопределено, НовоеИмяРаздела = Неопределено, ТолькоЗаполненные = Ложь, ЦветФона  = Неопределено)
	
	ОбластьСтрока = Макет.ПолучитьОбласть(ИмяРаздела + "Строка");
		
	Если ТекстЗаголовкаРеквизита <> Неопределено Тогда 
		ОбластьСтрока.Параметры[ИмяРаздела + "Реквизит"] = Строка(ТекстЗаголовкаРеквизита) + ":";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗначенияРеквизита) Тогда 
		ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияРеквизита;
	Иначе
		Если Не ТолькоЗаполненные Тогда
			ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияНеЗаполнен(ИмяРаздела);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НовоеИмяРаздела = Неопределено Тогда 
		ОбластьСтрока.Параметры.Расшифровка = ИмяРаздела;
	Иначе
		ОбластьСтрока.Параметры.Расшифровка = НовоеИмяРаздела;
	КонецЕсли;
	
	УстановитьЦветФонаОбласти(ОбластьСтрока, ЦветФона);	
	ТабличныйДокумент.Вывести(ОбластьСтрока);
	
	КоличествоДополнительныхСтрок = 0;
	
	КоличествоДополнительныхСтрок = КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита);
	
	Счетчик = КоличествоДополнительныхСтрок;
	ОбластьДопСтрока = Макет.ПолучитьОбласть(ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела));
	УстановитьЦветФонаОбласти(ОбластьСтрока, ЦветФона);	
	
	Пока Счетчик > 0 Цикл
		Счетчик = Счетчик - 1;
		ТабличныйДокумент.Вывести(ОбластьДопСтрока);
	КонецЦикла;
	
	ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяРаздела + "Строка", КоличествоДополнительныхСтрок);
	                                                                                                           		
КонецПроцедуры

Процедура ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяОбласти, КоличествоДопСтрок)
	
	Если КоличествоДопСтрок = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Область = ТабличныйДокумент.Область(ИмяОбласти);
	Область.Разъединить();
	Область.Имя = Неопределено;
	АдресОбласти = Область.Имя;
	СтруктураАдреса = СтруктураАдреса(АдресОбласти);
	
	АдресКолонкиЗаголовкаНачало = СтруктураАдреса.АдресКолонкиНачало + 1; // + 1, т.к. слева колонка-отступ
	АдресКолонкиЗаголовкаКонец = АдресКолонкиЗаголовкаНачало + 7; // +7, т.к. заголовок занимает 8 колонок
	АдресКолонкиЗначенияНачало = АдресКолонкиЗаголовкаКонец + 1;
	
	// В левой колонке карточки разность должна быть равна 20, в правой - 21
	Если СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 20 Тогда
		АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец;
	ИначеЕсли СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 21 Тогда
		АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец - 1;
	КонецЕсли;
	
	АдресСтрокиНачало = СтруктураАдреса.АдресСтрокиНачало; 
	АдресСтрокиКонец = СтруктураАдреса.АдресСтрокиКонец;
	
	//Для заголовка
	НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗаголовкаНачало + ":" 
				+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗаголовкаКонец;
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	Область.Объединить();
	
	//Для значения
	НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗначенияНачало + ":" 
				+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗначенияКонец;
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	Область.Объединить();
	
КонецПроцедуры

Функция СтруктураАдреса(Адрес)
	
	МассивАдресОбласти = СтрРазделить(Адрес, ":");
	Если МассивАдресОбласти.Количество() <> 2 Тогда
		// Это значит, что строка состоит из одной колонки, процедура объединения с такими не работает
		Возврат Неопределено;
	КонецЕсли;
	
	АдресНачало = МассивАдресОбласти[0];
	МассивАдресНачало = СтрРазделить(АдресНачало, "C");
	АдресСтрокиНачало = СтрЗаменить(МассивАдресНачало[0], "R", "");
	АдресКолонкиНачало = МассивАдресНачало[1];
	
	АдресКонец = МассивАдресОбласти[1];
	МассивАдресКонец = СтрРазделить(АдресКонец, "C");
	АдресСтрокиКонец = СтрЗаменить(МассивАдресКонец[0], "R", "");
	АдресКолонкиКонец = МассивАдресКонец[1];

	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("АдресСтрокиНачало", 	Число(АдресСтрокиНачало));
	СтруктураАдреса.Вставить("АдресКолонкиНачало", 	Число(АдресКолонкиНачало));
	СтруктураАдреса.Вставить("АдресСтрокиКонец", 	Число(АдресСтрокиКонец));
	СтруктураАдреса.Вставить("АдресКолонкиКонец", 	Число(АдресКолонкиКонец));
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела)
		
	Если ИмяРаздела = "Классификаторы"
		Или ИмяРаздела = "Пол"
		Или ИмяРаздела = "CRM_ТипыОтношений"
		Или ИмяРаздела = "ФизЛицо"
		Или ИмяРаздела = "Комментарий"
		Или ИмяРаздела = "КонтактнаяИнформация" Тогда
		Возврат "ДопСтрокаЛево";
	Иначе
		Возврат "ДопСтрокаПраво";
	КонецЕсли;
	
КонецФункции

Функция КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗаполненияЗначения, ТекстЗаполненияРеквизита)
	
	ШиринаКолонки = 2.38;
	КоличествоКолонокВЗначенииРеквизита = 12;
	ШиринаЗначенияРеквизита = КоличествоКолонокВЗначенииРеквизита * ШиринаКолонки;
	ЧислоСтрокЗначения = КоличествоСтрок(ШиринаЗначенияРеквизита, ТекстЗаполненияЗначения);
		
	ЧислоСтрокСвойства = 0;
	Если ЗначениеЗаполнено(ТекстЗаполненияРеквизита) Тогда
		КоличествоКолонокВЗаголовкеРеквизита = 8;
		ШиринаЗаголовкаРеквизита = ШиринаКолонки * КоличествоКолонокВЗаголовкеРеквизита;
		ЧислоСтрокСвойства = КоличествоСтрок(ШиринаЗаголовкаРеквизита, ТекстЗаполненияРеквизита);
	КонецЕсли;
	
	ЧислоСтрок = Макс(ЧислоСтрокЗначения, ЧислоСтрокСвойства);
	
	Если ЧислоСтрок = 0 Тогда 
		Возврат 0;
	КонецЕсли;
	
	Возврат ЧислоСтрок - 1;	
	
КонецФункции

Функция КоличествоСтрок(ШиринаОбласти, Строка)
	
	 Если Не ЗначениеЗаполнено(Строка) Тогда 
		Возврат 0;
	КонецЕсли;
	
	СредняяШиринаСимвола = 0.75;
	
	МассивСлов = СтрРазделить(Строка, " ");
		
	КоличествоСтрок = 1; // = 1, т.к. проверку на заполненность мы сделали выше, а значит одна строка нужна точно
	ТекущаяСтрока = "";
	
	Для Каждого Слово Из МассивСлов Цикл
		
		ТекущаяСтрока = ТекущаяСтрока + Слово + " ";
		Если СтрДлина(ТекущаяСтрока) * СредняяШиринаСимвола > ШиринаОбласти Тогда
			КоличествоСтрок = КоличествоСтрок + 1;
			ТекущаяСтрока = Слово + " ";
		КонецЕсли;
		
	КонецЦикла;	 
	 	 
	Возврат КоличествоСтрок;
	
КонецФункции

Функция РазделВиден(ИмяРаздела, СтруктураВидимости)
	
	Видимость = Истина;
	Если СтруктураВидимости.Свойство(ИмяРаздела) Тогда 
		Видимость = СтруктураВидимости[ИмяРаздела];	
	КонецЕсли;
	
	Возврат Видимость;
	
КонецФункции

Функция ГлаваВидна(ИмяГлавы, СтруктураВидимости, КоличествоДопРеквизитов = 0, КоличествоЗначенийКлассификаторов = 0)
	
	Если ИмяГлавы = "Портрет" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "КонтактнаяИнформация" Тогда
		Возврат РазделВиден(ИмяГлавы, СтруктураВидимости);
	КонецЕсли;
		
	Если ИмяГлавы = "Классификаторы" Тогда
		Возврат КоличествоЗначенийКлассификаторов > 0 И ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");		
	КонецЕсли;
	
	Если ИмяГлавы = "КлючевыеСобытия" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "ДополнительнаяИнформация" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "ДополнительныеРеквизиты" Тогда
		Возврат КоличествоДопРеквизитов > 0 И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");		
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

#КонецОбласти	
	
#Область МеханизмыНастройкиРаботыСРеквизитами

Функция РеквизитыОтключенныеПоФО() Экспорт
	
	Результат = Новый Массив;
		
	Возврат Результат;
	
КонецФункции

Функция ЗависимостьРеквизитов() Экспорт
												
	// Сформировать таблицу реквизитов для заполнения.
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("ДействиеСРеквизитом");
	
	Реквизиты = Метаданные.Справочники.КонтактныеЛицаПартнеров.Реквизиты;	
	Для Каждого Реквизит из Реквизиты Цикл
		Если Реквизит.Имя = "ДатаРегистрацииСвязи"
		  ИЛИ Реквизит.Имя = "ДатаПрекращенияСвязи" 
		  ИЛИ Реквизит.Имя = "Автор" Тогда
			Продолжить;	
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит            = Реквизит;
		НоваяСтрока.ДействиеСРеквизитом = "Добавить";

	КонецЦикла;
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу обязательных реквизитов.
// Параметры:
//	ВидНоменклатуры - СправочникОбъект.ВидыНоменклатуры - элемент справочника виды номенклатуры
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с обязательными для заполнения и выводимыми при создании реквизитами
//
Функция ТаблицаНастроекРеквизитов()

	ТаблицаНастроекРеквизитов = Новый ТаблицаЗначений;
	ТаблицаНастроекРеквизитов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));	
		
	Возврат ТаблицаНастроекРеквизитов;
	
КонецФункции

// Возвращает таблицу дополнительные реквизиты номенклатуры
//
// Параметры:
//  ВидНоменклатуры	 - СправочникСсылка.ВидыНоменклатуры 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//		* ИмяРеквизита - Строка - наименование свойства
//		* ПредставлениеРеквизита - Строка - заголовок свойства
//		* ЭтоДопРеквизит - Булево - всегда ИСТИНА
//		* ЭтоОбщийРеквизит - Булево - признак, что доп. реквизит входит в набор Справочник_Номенклатура_Общие
//		* ЗаполнятьОбязательно - Булево
//		* НаборСвойств - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - набор свойств, для которого был создан доп. реквизит
//		* Тип - ОписаниеТипов
//
Функция ВсеДополнительныеРеквизиты() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Свойство");
		Таблица.Колонки.Добавить("ЭтоДопРеквизит");
		Возврат Таблица;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка КАК Набор,
	|	ДополнительныеРеквизиты.Свойство.Наименование КАК ИмяРеквизита,
	|	ДополнительныеРеквизиты.Свойство.Заголовок КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ВЫБОР
	|		КОГДА ДополнительныеРеквизиты.Ссылка = &ОбщийНабор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОбщийРеквизит,
	|	ДополнительныеРеквизиты.Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
	|	ДополнительныеРеквизиты.Свойство.НаборСвойств КАК НаборСвойств,
	|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК Тип
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка = &ОбщийНабор";
		
	ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_КонтактныеЛицаПартнеров)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбщийНабор", ОбщийНабор);  	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	 
КонецФункции

Функция ПравоДоступаНаОбъектМетаданныхПоРеквизиту(Право, РеквизитОбъектМетаданных)

	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивтиповДляПроверки = РеквизитОбъектМетаданных.Тип.Типы();
	Для Каждого Тип Из МассивтиповДляПроверки Цикл
		
		Если вогОбщегоНазначения.ЭтоПримитивныйТип(Тип) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных <> Неопределено
			И Не ПравоДоступа(Право, ОбъектМетаданных) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ВидимостьРеквизита(Реквизит, ИмяРеквизита, РеквизитыОтключенныеПоФО, РежимВидимостиПоказатьТолькоВажные,
	ТаблицаОбязательныхРеквизитов)
	
	Если Не ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Возврат ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Реквизит)
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или ТаблицаОбязательныхРеквизитов.Найти(ИмяРеквизита, "Наименование") <> Неопределено)
	Иначе
		Возврат ПравоДоступа("Просмотр", Метаданные.Справочники.КонтактныеЛицаПартнеров.Реквизиты[ИмяРеквизита])
				И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Метаданные.Справочники.КонтактныеЛицаПартнеров.Реквизиты[ИмяРеквизита])
				И РеквизитыОтключенныеПоФО.Найти(ИмяРеквизита) = Неопределено
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или ТаблицаОбязательныхРеквизитов.Найти(ИмяРеквизита, "Наименование") <> Неопределено)
	КонецЕсли;
	
КонецФункции

// Возвращает структуру с видимостью элементов.
// Параметры:
//	Объект - СправочникОбъект.Партнеры - элемент справочника номенклатуры
//	РежимВидимостиПоказатьТолькоВажные - Булево - признак отображения основных реквизитов
//
// Возвращаемое значение:
//	Структура - струтура видимости элементов. Ключ - имя элемента, значения - видимость
//
Функция СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные)
	
	СтруктураВидимости = Новый Структура;
	
	#Область ФункциональныеОпции
	
	ИспользоватьКлассификаторы = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");
	
	#КонецОбласти
		
	РеквизитыОтключенныеПоФО  = РеквизитыОтключенныеПоФО();
	ТаблицаОбязательныхРеквизитов = ТаблицаНастроекРеквизитов();
	
	НастройкиРеквизитов = ЗависимостьРеквизитов();
																
	Для Каждого СтрТабл из НастройкиРеквизитов Цикл
		ИмяРеквизита = СтрТабл.Реквизит.Имя;
		Если ИмяРеквизита = "CRM_Фотография" Тогда
			ИмяРеквизита = "ФайлКартинки";
		КонецЕсли;
		
		СтруктураВидимости.Вставить(ИмяРеквизита, СтрТабл.ДействиеСРеквизитом = "Добавить"
			И ВидимостьРеквизита(ИмяРеквизита,
							СтрТабл.Реквизит.Имя,
							РеквизитыОтключенныеПоФО,
							РежимВидимостиПоказатьТолькоВажные,
							ТаблицаОбязательныхРеквизитов));
	КонецЦикла;
	
	СтруктураВидимости.Вставить("ГруппаОбязательныеПоля", РежимВидимостиПоказатьТолькоВажные);
	
	СтруктураВидимости.Вставить("CRM_Фамилия" 				, Истина);
	СтруктураВидимости.Вставить("CRM_Имя"     				, Истина);
	СтруктураВидимости.Вставить("CRM_Отчество"				, Истина);
	
	СтруктураВидимости.Вставить("Пол" 						, Истина);
	СтруктураВидимости.Вставить("CRM_Состояние" 			, Истина);
	СтруктураВидимости.Вставить("CRM_Должность"				, Истина);
	СтруктураВидимости.Вставить("CRM_РольКонтактногоЛица"	, Истина);
	
	СтруктураВидимости.Вставить("ГруппаКоманднаяПанельИзображение",НЕ РежимВидимостиПоказатьТолькоВажные);

	
	#Область Портрет
	
	ГиперссылкаПерейтиФайлыВидимость = ПравоДоступа("Просмотр", Метаданные.Справочники.КонтактныеЛицаПартнеровПрисоединенныеФайлы)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	ВидимостьКомандФайлаКартинки = ВидимостьРеквизита("ФайлКартинки",
									"CRM_Фотография",
									РеквизитыОтключенныеПоФО,
									РежимВидимостиПоказатьТолькоВажные,
									ТаблицаОбязательныхРеквизитов);
									
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиИзображения", ГиперссылкаПерейтиФайлыВидимость 
		И вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка));
		
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиФайлы", ГиперссылкаПерейтиФайлыВидимость);
	
	СтруктураВидимости.Вставить("ДобавитьИзображение", ВидимостьКомандФайлаКартинки);
	СтруктураВидимости.Вставить("ОчиститьИзображение", ВидимостьКомандФайлаКартинки);
	СтруктураВидимости.Вставить("ИзменитьИзображение", ЗначениеЗаполнено(Объект.Ссылка));
	СтруктураВидимости.Вставить("ПросмотретьИзображение", ЗначениеЗаполнено(Объект.Ссылка));
	СтруктураВидимости.Вставить("ВыбратьКартинкуИзПрисоединенныхФайлов", ЗначениеЗаполнено(Объект.Ссылка));
	
	СтруктураВидимости.Вставить("CRM_ТипыОтношений", Не РежимВидимостиПоказатьТолькоВажные);
	
	ГиперссылкаПерейтиДокументыВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ДокументыФизическихЛиц);
		
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиДокументы", 
		ГиперссылкаПерейтиДокументыВидимость);
				
	#КонецОбласти

	#Область КонтактнаяИнформация
	
	СтруктураВидимости.Вставить("КонтактнаяИнформация", Объект.КонтактнаяИнформация.Количество() > 0);
	СтруктураВидимости.Вставить("РедактироватьКонтактныеДанные", Не РежимВидимостиПоказатьТолькоВажные);
					
	#КонецОбласти
	
	#Область Классификаторы
	
	ГиперссылкаПерейтиЗначенияКлассификаторовВидимость = ИспользоватьКлассификаторы
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов)
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиЗначенияКлассификаторов", 
		ГиперссылкаПерейтиЗначенияКлассификаторовВидимость);
	
	#КонецОбласти
	
	#Область Связи
		
	СтруктураВидимости.Вставить("СвязиКонтатныхЛиц", Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.вогСвязиКонтактныхЛиц));
		
	#КонецОбласти
	
	#Область КлючевыеСобытия
		
	СтруктураВидимости.Вставить("CRM_КлючевыеСобытия", Не РежимВидимостиПоказатьТолькоВажные);
		
	#КонецОбласти
	
	#Область ДополнительнаяИнформация
		
	СтруктураВидимости.Вставить("ДополнительнаяИнформация", Не РежимВидимостиПоказатьТолькоВажные);
	
	ГиперссылкаПерейтиИсторияРеквизитовВидимость = ПолучитьФункциональнуюОпцию("CRM_ВестиИсториюРеквизитовКлиентов")
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.CRM_ИсторияРеквизитовПартнеров)
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиИсторияРеквизитов", 
		ГиперссылкаПерейтиИсторияРеквизитовВидимость);
	
	#КонецОбласти
		
	#Область ДополнительныеРеквизиты

	// Установка видимости для дополнительных реквизитов.
	ВсеДополнительныеРеквизитыПартнера = ВсеДополнительныеРеквизиты();
	Для Каждого СтрокаТаблицыДопРеквизитов Из ВсеДополнительныеРеквизитыПартнера Цикл
		ИмяРеквизита     = СтрокаТаблицыДопРеквизитов.ИмяРеквизита;
		ИмяЭлементаФормы = "ДополнительныйРеквизитЗначение_"
			+ СтрЗаменить(?(СтрокаТаблицыДопРеквизитов.ЭтоОбщийРеквизит,
					ВРег(Строка(СтрокаТаблицыДопРеквизитов.Набор.УникальныйИдентификатор())),
					ВРег(Строка(СтрокаТаблицыДопРеквизитов.НаборСвойств.УникальныйИдентификатор()))),
				"-",
				"x")
			+ "_"
			+ СтрЗаменить(ВРег(Строка(СтрокаТаблицыДопРеквизитов.Свойство.УникальныйИдентификатор())), "-", "x");
		
		СтруктураВидимости.Вставить(ИмяЭлементаФормы, ВидимостьРеквизита(СтрокаТаблицыДопРеквизитов,
																			ИмяРеквизита,
																			РеквизитыОтключенныеПоФО,
																			РежимВидимостиПоказатьТолькоВажные,
																			ТаблицаОбязательныхРеквизитов));
		
	КонецЦикла;

	#КонецОбласти
			
	Возврат СтруктураВидимости;
	
КонецФункции

// Возвращает структуру с заголовками элементов.
// Параметры:
//	Объект - СправочникОбъект.Партнеры - элемент справочника номенклатуры
//	СтруктураВидимостиЭлементов - Структура - струтура видимости элементов
//
// Возвращаемое значение:
//	Структура - струтура заголовков элементов. Ключ - имя элемента, значения - заголовок
//
Функция СтруктураЗаголовковЭлементовФормы(Объект, СтруктураВидимостиЭлементов)
	
	ИмяСправочникаХранилищаФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(Объект.Ссылка);
	ПолноеИмяСправочника = "Справочник." + ИмяСправочникаХранилищаФайлов;
	
	СтруктураЗаголовков = Новый Структура;
			
	#Область ЗаголовокиГиперссылок
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактныеЛицаПартнеровПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеровПрисоединенныеФайлы КАК КонтактныеЛицаПартнеровПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК ПрисоедниненныеФайлыОбъектовПоВидам
	|		ПО КонтактныеЛицаПартнеровПрисоединенныеФайлы.Ссылка = ПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл
	|ГДЕ
	|	КонтактныеЛицаПартнеровПрисоединенныеФайлы.ВладелецФайла = &Контакт
	|	И НЕ КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПометкаУдаления
	|	И ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла.ТипФайла = ЗНАЧЕНИЕ(Перечисление.вогТипыПрисоединенныхФайлов.Изображение)
	|	И ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла.Принадлежность = &Принадлежность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактныеЛицаПартнеровПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеровПрисоединенныеФайлы КАК КонтактныеЛицаПартнеровПрисоединенныеФайлы
	|ГДЕ
	|	КонтактныеЛицаПартнеровПрисоединенныеФайлы.ВладелецФайла = &Контакт
	|	И НЕ КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК ОбъектыЗначенийКлассификаторов
	|ГДЕ
	|	ОбъектыЗначенийКлассификаторов.Объект = &Контакт
	|	И ОбъектыЗначенийКлассификаторов.Аналитика В(&ЗначенияИспользуемыхАналитик)";
	
	Запрос.УстановитьПараметр("Контакт", Объект.Ссылка);
	Запрос.УстановитьПараметр("Принадлежность", ПолноеИмяСправочника);
	Запрос.УстановитьПараметр("ЗначенияИспользуемыхАналитик", CRM_КлассификаторыВызовСервера.ЗначенияИспользуемыхАналитикКлассификаторов().МассивЗначений);
		
	УстановитьПривилегированныйРежим(Истина);
	
	Выборки = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	ВидимостьЭлемента = Ложь;
	
	Если РазделВиден("ГиперссылкаПерейтиИзображения", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[0].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Изображения'") + " (" + Количество + ")",,,,"Файлы");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиИзображения", ЗаголовокГиперссылки);		
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[1].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Файлы'") + " (" + Количество + ")",,,,"Файлы");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиФайлы", ЗаголовокГиперссылки);		
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиЗначенияКлассификаторов", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[2].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Значения классификаторов'") + " (" + Количество + ")",,,,"ЗначенияКлассификаторов");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиЗначенияКлассификаторов", ЗаголовокГиперссылки);
	КонецЕсли;

	#КонецОбласти
		
	Возврат СтруктураЗаголовков;

КонецФункции


#КонецОбласти

#КонецЕсли
