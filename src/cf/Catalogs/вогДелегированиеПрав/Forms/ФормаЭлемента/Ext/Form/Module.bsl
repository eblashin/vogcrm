
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВариантДелегированияПравВсеПрава 		= Перечисления.вогВариантыДелегированияПрав.ВсеПрава;
	ВариантДелегированияПравВсеПраваЗапись 	= Перечисления.вогВариантыДелегированияПрав.ВсеПраваЗапись;
	ВариантДелегированияПравВыборочно 		= Перечисления.вогВариантыДелегированияПрав.Выборочно;
	
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.ДатаНачалаДействия) Тогда
		Объект.ДатаНачалаДействия = НачалоМинуты(ТекущаяДата());
		Объект.ОтКого = ПараметрыСеанса.ТекущийПользователь; //Павелко, CRM-69, 18.12.2019
		Объект.ДатаОкончанияДействия = КонецДня(Объект.ДатаНачалаДействия); //Павелко, CRM-69, 18.12.2019
	КонецЕсли;
	
	ЗаполнитьОбластиДелегирования();
	РуководительПользователя = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(), "вогРуководитель", Истина); //+ VOG Иванов С.А. 20.11.2019 ID заявки: 000000827 
	
	ЕстьПолныеПрава = РольДоступнаПолныеПрава();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// +++ VOG Кулаков П.Л. 11.03.2020 CRM-434
	// Зачем-то при открытии ставились отметки использования
	//УстановитьПометки(Истина); //+ VOG Иванов С.А. 20.11.2019 ID заявки: 000000827
	// --- VOG Кулаков П.Л.
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Если ЗначениеЗаполнено(Объект.ДатаОкончанияДействия) И
		Объект.ДатаОкончанияДействия < Объект.ДатаНачалаДействия Тогда
		
		ТекстОшибки = НСтр("ru = 'Неверно задан период действия.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		
		Возврат;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияДействия)
		И НачалоМинуты(Объект.ДатаОкончанияДействия) - НачалоМинуты(Объект.ДатаНачалаДействия) < 15 * 60 Тогда
		
		ТекстОшибки = НСтр("ru = 'Минимальный срок действия должен быть равен 15 минут.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ОбластиДелегирования.Очистить();
	
	ТаблицаОбластей = РеквизитФормыВЗначение("ОбластиДелегирования");
	
	Для Каждого Строка Из ТаблицаОбластей Цикл
		Если Строка.Пометка Тогда 
			НоваяСтрока 						= ТекущийОбъект.ОбластиДелегирования.Добавить();
			НоваяСтрока.ОбластьДелегирования 	= Строка.ОбластьДелегирования;
			НоваяСтрока.Запись 					= Строка.Запись;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ВариантДелегирования = Перечисления.вогВариантыДелегированияПрав.Выборочно Тогда
		
		ЕстьПометка = Ложь;
		
		ТаблицаОбластей = РеквизитФормыВЗначение("ОбластиДелегирования");
		Для Каждого Строка Из ТаблицаОбластей Цикл
			Если Строка.Пометка Тогда 
				ЕстьПометка = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьПометка Тогда 
			Текст = НСтр("ru = 'Не отмечено ни одной области делегирования'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ОбластиДелегирования",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДобавленаОбластьДелегирования" Тогда
		НоваяСтрока = ОбластиДелегирования.Добавить();
		НоваяСтрока.ОбластьДелегирования = Параметр;
		ОбластиДелегирования.Сортировать("ОбластьДелегирования");
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененаОбластьДелегирования" Тогда
		НайденныеСтроки = ОбластиДелегирования.НайтиСтроки(Новый Структура("ОбластьДелегирования", Параметр));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			НайденнаяСтрока.ОбластьДелегирования = Параметр;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСрока" и Параметр.Форма = ЭтаФорма Тогда
		Если Параметр.Реквизит = "ДатаНачалаДляРасчетаСроков" Тогда
			Объект.ДатаНачалаДействия = ДатаНачалаДляРасчетаСроков;	
		КонецЕсли;
		Если Параметр.Реквизит = "ДатаОкончанияДляРасчетаСроков" Тогда
			Объект.ДатаОкончанияДействия = ДатаОкончанияДляРасчетаСроков;
			ДатаОкончанияДействияПриИзменении("");	
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ДелегированиеПрав", Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантДелегированияПриИзменении(Элемент)
	
	Если Объект.ВариантДелегирования = ВариантДелегированияПравВсеПрава Тогда
		 
		УстановитьПометки(Истина); //+ VOG Иванов С.А. 20.11.2019 ID заявки: 000000827
		УстановитьПометкиЗаписи(Ложь);
		
	ИначеЕсли Объект.ВариантДелегирования = ВариантДелегированияПравВсеПраваЗапись Тогда
		
		УстановитьПометки(Истина); //+ VOG Иванов С.А. 20.11.2019 ID заявки: 000000827
		УстановитьПометкиЗаписи(Истина);
	Иначе
		УстановитьПометки(Ложь); //+ VOG Иванов С.А. 20.11.2019 ID заявки: 000000827
		УстановитьПометкиЗаписи(Ложь);	
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

//++ VOG Иванов С.А. 20.11.2019 ID заявки: 000000827
&НаКлиенте
Процедура КтоЗаместительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если НЕ РольДоступнаПолныеПрава() Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", 				Истина);
		Если ЗначениеЗаполнено(РуководительПользователя) Тогда
			ПараметрыОткрытия.Вставить("РуководительПользователя", 	РуководительПользователя);
		КонецЕсли;
		ПараметрыОткрытия.Вставить("ТолькоДоступные", 	Истина);
		ПараметрыОткрытия.Вставить("ВсеПользователи", 	Истина);
		ПараметрыОткрытия.Вставить("СДополнительными", 	Истина);
		
		ОткрытьФорму("Справочник.Пользователи.Форма.CRM_ФормаСписка",
		ПараметрыОткрытия,
		Элемент,
		ЭтотОбъект,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры
//-- VOG Иванов С.А. 20.11.2019 ID заявки: 000000827 

&НаКлиенте
Процедура ОтКогоКомуАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ЕстьПолныеПрава И ЗначениеЗаполнено(Текст) Тогда //Павелко, Баг 000001014, 13.12.2019 - добавил проверку на полные права
		
		СтандартнаяОбработка = Ложь;

        ДанныеВыбора = ПолучитьДанныеВыбораКомуЗаместитель(Текст);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДействияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияДействия) И НачалоДня(Объект.ДатаОкончанияДействия) - НачалоДня(ТекущаяДата()) > 21*24*60*60 Тогда
		Объект.ДатаОкончанияДействия = НачалоДня(ТекущаяДата()) + 21*24*60*60;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Введенная дата первышает максимально допустимый срок делегирования. Дата окончания скорректирована";
		Сообщение.Поле = "Объект.ДатаОкончанияДействия";
		Сообщение.Сообщить();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) //Павелко, CRM-69, 18.12.2019
	
	СтандартнаяОбработка = Ложь;
	
	ДатаОкончанияДляРасчетаСроков = Объект.ДатаОкончанияДействия;
	ДатаОтсчетаДляРасчетаСроков = Объект.ДатаОкончанияДействия;
	
	ПараметрыВыбораСрока = вогУправлениеИнтерфейсомКлиент.ПараметрыВыбораСрока();
	ПараметрыВыбораСрока.Форма = ЭтаФорма; 
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "ДатаОкончанияДляРасчетаСроков";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "ДатаОкончанияДляРасчетаСроковПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "ЭтотОбъект";
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "ДатаОкончанияДляРасчетаСроков";
	
	вогСрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДействияРегулирование(Элемент, Направление, СтандартнаяОбработка) //Павелко, CRM-69, 18.12.2019
	
	СтандартнаяОбработка = Ложь;
	Объект.ДатаОкончанияДействия = Объект.ДатаОкончанияДействия + 600 * Направление;
	ДатаОкончанияДействияПриИзменении("");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДействияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка) //Павелко, CRM-69, 18.12.2019
	
	СтандартнаяОбработка = Ложь;
	ДатаОкончанияДействияНачалоВыбора(Неопределено, Неопределено, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДействияОчистка(Элемент, СтандартнаяОбработка) //Павелко, CRM-69, 18.12.2019
	
	СтандартнаяОбработка = Ложь;
	Объект.ДатаОкончанияДействия = КонецДня(Объект.ДатаНачалаДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) //Павелко, CRM-69, 18.12.2019
	
	СтандартнаяОбработка = Ложь;
	
	ДатаНачалаДляРасчетаСроков = Объект.ДатаНачалаДействия;
	ДатаОтсчетаДляРасчетаСроков = Объект.ДатаНачалаДействия;
	
	ПараметрыВыбораСрока = вогУправлениеИнтерфейсомКлиент.ПараметрыВыбораСрока();
	ПараметрыВыбораСрока.Форма = ЭтаФорма; 
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "ДатаНачалаДляРасчетаСроков";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "ДатаНачалаДляРасчетаСроковПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "ЭтотОбъект";
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "ДатаНачалаДляРасчетаСроков";
	
	вогСрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДействияРегулирование(Элемент, Направление, СтандартнаяОбработка) //Павелко, CRM-69, 18.12.2019
	
	СтандартнаяОбработка = Ложь;
	Объект.ДатаНачалаДействия = Объект.ДатаНачалаДействия + 600 * Направление;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДействияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка) //Павелко, CRM-69, 18.12.2019
	
	СтандартнаяОбработка = Ложь;
	ДатаНачалаДействияНачалоВыбора(Неопределено, Неопределено, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДействияОчистка(Элемент, СтандартнаяОбработка) //Павелко, CRM-69, 18.12.2019
	
	СтандартнаяОбработка = Ложь;
	Объект.ДатаНачалаДействия = ТекущаяДата();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбластиДелегирования

&НаКлиенте
Процедура ОбластиДелегированияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ОбластиДелегирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяКолонка = Элементы.ОбластиДелегирования.ТекущийЭлемент;
	
	Если ТекущаяКолонка = Элементы.ОбластиДелегированияПометка Тогда
		
		ТекущиеДанные.Пометка = Не ТекущиеДанные.Пометка;
		Если НЕ ТекущиеДанные.Пометка Тогда
			ТекущиеДанные.Запись = ЛОжь;	
		КонецЕсли;
		
	ИначеЕсли ТекущаяКолонка = Элементы.ОбластиДелегированияЗапись Тогда
		
		ТекущиеДанные.Запись = Не ТекущиеДанные.Запись;
		Если ТекущиеДанные.Запись Тогда
			ТекущиеДанные.Пометка = Истина;	
		КонецЕсли;
	ИначеЕсли ТекущаяКолонка = Элементы.ОбластиДелегированияНастройка Тогда
		
		Если ТекущиеДанные.ОбластьДелегирования = ПредопределенноеЗначение("Справочник.вогОбластиДелегированияПрав.ПроцессыИЗадачи") Тогда
			Возврат;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("КлючОтбора", 		ТекущиеДанные.ОбластьДелегирования);
			ПараметрыФормы.Вставить("ВыбранныеДанные", 	ПолучитьВыбранныеДанные(ТекущиеДанные.ОбластьДелегирования));
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбластиДелегированияИзменениеЗавершение", ЭтотОбъект, ПараметрыФормы);
			
			ОткрытьФорму(
				"Справочник.вогДелегированиеПрав.Форма.ФормаВыбораДополнительныхОбъектов", 
				ПараметрыФормы,
				ЭтотОбъект,
				ЭтотОбъект,
				,
				,
				ОповещениеОЗавершении,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластиДелегированияИзменениеЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОбласти = ПолучитьИмяОбластиДелегирования(ДополнительныеПараметры.КлючОтбора);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяОбласти", ИмяОбласти);
	
	СтрокиКУдалению = Объект.ДополнительныеОбъектыДоступа.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаУдаления Из СтрокиКУдалению Цикл
		Объект.ДополнительныеОбъектыДоступа.Удалить(Объект.ДополнительныеОбъектыДоступа.Индекс(СтрокаУдаления));
	КонецЦикла;
	
	Для Каждого ВыбранныйЭлемент Из ВыбранноеЗначение Цикл
		
		НоваяСтрока 				= Объект.ДополнительныеОбъектыДоступа.Добавить();
		НоваяСтрока.ОбъектДоступа 	= ВыбранныйЭлемент;
		НоваяСтрока.ИмяОбласти 		= ИмяОбласти;
		
	КонецЦикла;
	
	ТекущиеДанные = Элементы.ОбластиДелегирования.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущиеДанные.Пометка = ВыбранноеЗначение.Количество() > 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьПометки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьПометки(Ложь);
	//++ VOG Иванов С.А. 20.11.2019 ID заявки: 000000827
	Если Объект.ВариантДелегирования = ВариантДелегированияПравВыборочно Тогда
		УстановитьПометкиЗаписи(Ложь);		
	КонецЕсли;
	//-- VOG Иванов С.А. 20.11.2019 ID заявки: 000000827
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьОбластиДелегирования()
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОбластиДелегированияПрав.Ссылка КАК ОбластьДелегирования,
		|	ВЫБОР
		|		КОГДА ДелегированиеПравОбластиДелегирования.ОбластьДелегирования ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Пометка,
		|	ВЫБОР
		|		КОГДА ОбластиДелегированияПрав.Ссылка = ЗНАЧЕНИЕ(Справочник.вогОбластиДелегированияПрав.ПроцессыИЗадачи)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Настройка,
		|	ЕСТЬNULL(ДелегированиеПравОбластиДелегирования.Запись, ЕСТЬNULL(вогИсполнителиРолейИДелегаты.Запись, ЛОЖЬ)) КАК Запись
		|ИЗ
		|	Справочник.вогОбластиДелегированияПрав КАК ОбластиДелегированияПрав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогДелегированиеПрав.ОбластиДелегирования КАК ДелегированиеПравОбластиДелегирования
		|		ПО (ДелегированиеПравОбластиДелегирования.ОбластьДелегирования = ОбластиДелегированияПрав.Ссылка)
		|			И (ДелегированиеПравОбластиДелегирования.Ссылка = &Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
		|		ПО (вогИсполнителиРолейИДелегаты.НастройкаДелегирования = &Ссылка)
		|			И (вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования = """")
		|ГДЕ
		|	(НЕ ОбластиДелегированияПрав.ПометкаУдаления
		|			ИЛИ НЕ ДелегированиеПравОбластиДелегирования.ОбластьДелегирования ЕСТЬ NULL)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбластиДелегированияПрав.Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	ТаблицаОбластей = Запрос.Выполнить().Выгрузить();
	ЗначениеВРеквизитФормы(ТаблицаОбластей, "ОбластиДелегирования");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Если Объект.ВариантДелегирования = ВариантДелегированияПравВсеПрава
		Или Объект.ВариантДелегирования = ВариантДелегированияПравВсеПраваЗапись Тогда
		Элементы.УстановитьФлажки.Доступность = Ложь; //+ VOG Иванов С.А. 20.11.2019 ID заявки: 000000827
		Элементы.СнятьФлажки.Доступность = Ложь; //+ VOG Иванов С.А. 20.11.2019 ID заявки: 000000827
		Элементы.ОбластиДелегирования.ТолькоПросмотр 	= Истина;
		Элементы.ГруппаКоманднаяПанель.Доступность 		= Ложь;
	Иначе
		Элементы.ОбластиДелегирования.ТолькоПросмотр 	= Ложь;
		Элементы.ГруппаКоманднаяПанель.Доступность 		= Истина;
		Элементы.УстановитьФлажки.Доступность = Истина; //+ VOG Иванов С.А. 20.11.2019 ID заявки: 000000827
		Элементы.СнятьФлажки.Доступность = Истина; //+ VOG Иванов С.А. 20.11.2019 ID заявки: 000000827 
	КонецЕсли;
	Элементы.Ответственный.Доступность = ?(РольДоступнаПолныеПрава(), Истина, Ложь); //+ VOG Иванов С.А. 20.11.2019 ID заявки: 000000827
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Пометка)
	
	Для Каждого Строка Из ОбластиДелегирования Цикл
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиЗаписи(Пометка)
	
	Для Каждого Строка Из ОбластиДелегирования Цикл
		Строка.Запись = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыбранныеДанные(КлючОтбора)
	
	МассивВыбранных = Новый Массив;
	
	ИмяОбласти = ПолучитьИмяОбластиДелегирования(КлючОтбора);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяОбласти", ИмяОбласти);
	
	ВыбранныеСтроки = Объект.ДополнительныеОбъектыДоступа.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ВыбранныйЭлемент Из ВыбранныеСтроки Цикл
		МассивВыбранных.Добавить(ВыбранныйЭлемент.ОбъектДоступа);
	КонецЦикла;
	
	Возврат МассивВыбранных;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяОбластиДелегирования(СсылкаНаОбъект)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ИмяПредопределенныхДанных", Истина);
	
КонецФункции

//++ VOG Иванов С.А. 20.11.2019 ID заявки: 000000827
&НаСервере
Функция РольДоступнаПолныеПрава()
 Возврат РольДоступна("ПолныеПрава");	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораКомуЗаместитель(Текст)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокПодчиненныхПользователей", Новый Массив(ПараметрыСеанса.вогПодчиненныеСотрудники));
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	Пользователи.Ссылка В(&СписокПодчиненныхПользователей)
	               |	И Пользователи.Наименование ПОДОБНО &Наименование + ""%""";
	
	Запрос.УстановитьПараметр("Наименование", Текст);
	СписокПользователей = Новый СписокЗначений;
	СписокПользователей.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	возврат СписокПользователей;
КонецФункции
//-- VOG Иванов С.А. 20.11.2019 ID заявки: 000000827

#КонецОбласти
