
///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
// Функция возвращает представление точки маршрута.
//
// Параметры:
//	ТочкаМаршрута	- СправочникСсылка	- Точка марщрута.
//
// Возвращаемое значение:
//	Строка	- Представление точки маршрута. 
//
Функция ПолучитьПредставлениеТочкиМаршрута(ТочкаМаршрута)
	Если (ТипЗнч(ТочкаМаршрута) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов")) 
		И (ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Старт) Тогда
		Возврат НСтр("ru = 'Событие'");
	Иначе
		Возврат Строка(ТочкаМаршрута);
	КонецЕсли;
КонецФункции // ПолучитьПредставлениеТочкиМаршрута()

&НаСервере
// Функция возвращает актуальность точки маршрута.
//
// Параметры:
//	КартаМаршрута	- СправочникСсылка	- Карта маршрута.
//	ТочкаМаршрута	- СправочникСсылка	- Точка марщрута.
//
// Возвращаемое значение:
//	Строка	- Представление точки маршрута. 
//
Функция ПолучитьАктуальностьТочкиМаршрута(КартаМаршрута, ТочкаМаршрута)
	Если (ТипЗнч(ТочкаМаршрута) <> Тип("СправочникСсылка.CRM_ТочкиМаршрутов")) 
		ИЛИ (ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Старт) Тогда
		Возврат Истина;
	КонецЕсли;
	МенеджерЗаписи = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = КартаМаршрута;
	МенеджерЗаписи.ТочкаМаршрута = ТочкаМаршрута;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		Возврат МенеджерЗаписи.Используется;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ПолучитьАктуальностьТочкиМаршрута()

&НаСервере
// Процедура заполняет представление и актуальность точек маршрута.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПредставленияИАктуальностьТочекМаршрута()
	
	ОбъектБизнесПроцессаСчет = CRM_ОбщегоНазначенияПовтИсп.НайтиПредопределенныйЭлементПоИмени("ПланВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Счет");

	Для Каждого СтрокаСостава Из Объект.Состав Цикл
		СтрокаСостава.ПредставлениеТочкиМаршрута	= ПолучитьПредставлениеТочкиМаршрута(СтрокаСостава.ТочкаМаршрута);
		
		Если ОбъектБизнесПроцессаСчет <> Неопределено И СтрокаСостава.ТочкаМаршрута = ОбъектБизнесПроцессаСчет Тогда
			Если СтрокаСостава.ВариантСчетаНаОплату = 1 Тогда
				СтрокаСостава.ПредставлениеТочкиМаршрута = СтрокаСостава.ПредставлениеТочкиМаршрута + " (оплата)";
			ИначеЕсли СтрокаСостава.ВариантСчетаНаОплату = 2 Тогда
				СтрокаСостава.ПредставлениеТочкиМаршрута = СтрокаСостава.ПредставлениеТочкиМаршрута + " (отгрузка)";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаСостава.ТочкаМаршрутаНеАктуальна		= НЕ ПолучитьАктуальностьТочкиМаршрута(СтрокаСостава.КартаМаршрута, СтрокаСостава.ТочкаМаршрута);
	КонецЦикла;
КонецПроцедуры // ЗаполнитьПредставленияИАктуальностьТочекМаршрута()

&НаСервереБезКонтекста
// Функция возвращает вероятность сделки.
//
// Параметры:
//	Этап	- СправочникСсылка	- Этап.
//
// Возвращаемое значение:
//	Число	- Вероятность сделки.
//
Функция ПолучитьВероятностьСделки(Этап)
	Возврат Этап.ВероятностьСделки;
КонецФункции // ПолучитьВероятностьСделки()	
	
&НаКлиенте
// Процедура устанавливает доступность вида этапа.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьВидаЭтапа()
	Элементы.ВидВоронки.Доступность = (Объект.Состав.Количество() = 0);
КонецПроцедуры // УстановитьДоступностьВидаЭтапа()

&НаКлиенте
// Процедура - обработчик добавления этапа.
//
// Параметры:
//	Этап					- СправочникСсылка	- Этап.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ДобавитьЭтапЗавершение(Этап, ДополнительныеПараметры) Экспорт
	Если Этап = Неопределено Тогда Возврат; КонецЕсли;
		НоваяСтрока = Объект.Состав.Добавить();
		Если ДополнительныеПараметры = "СостояниеИнтереса" Тогда
			НоваяСтрока.КартаМаршрута = НСтр("ru = 'Состояние интереса'");
			НоваяСтрока.ТочкаМаршрута = Этап;
			НоваяСтрока.ПредставлениеТочкиМаршрута = ПолучитьПредставлениеТочкиМаршрута(Этап);
			// Заполняем оценку по умолчанию.
			Если Объект.Оценка = 0 Тогда
				Объект.Оценка	= ПолучитьВероятностьСделки(Этап);
			КонецЕсли;	
		ИначеЕсли ДополнительныеПараметры = "Документ" Тогда
			
			ОбъектБизнесПроцессаСчет = CRM_ОбщегоНазначенияПовтИсп.НайтиПредопределенныйЭлементПоИмени("ПланВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Счет");
			
			Если ОбъектБизнесПроцессаСчет <> Неопределено И Этап = ОбъектБизнесПроцессаСчет Тогда
				
				СтруктураПараметров = Новый Структура("Этап,ИДСтроки",Этап,НоваяСтрока.ПолучитьИдентификатор());
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВариантСчета", ЭтотОбъект, СтруктураПараметров);
				ОткрытьФорму("Справочник.CRM_ВоронкиПродаж.Форма.ФормаВыбораВариантаСчета", , ЭтотОбъект, , , ,
					ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				НоваяСтрока.КартаМаршрута = НСтр("ru = 'Документ'");
				НоваяСтрока.ТочкаМаршрута = Этап;
				НоваяСтрока.ПредставлениеТочкиМаршрута = ПолучитьПредставлениеТочкиМаршрута(Этап);
			КонецЕсли;
			
		ИначеЕсли ДополнительныеПараметры = "КартаМаршрута" Тогда
			НоваяСтрока.КартаМаршрута = Этап;
			СтруктураПараметров = Новый Структура("Отбор", Новый Структура("Владелец",Этап));
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьТочкуЗавершение", ЭтотОбъект, НоваяСтрока.ПолучитьИдентификатор());
			ОткрытьФорму("Справочник.CRM_ВоронкиПродаж.Форма.ФормаВыбораТочкиМаршрута", СтруктураПараметров, ЭтотОбъект, , , ,
				ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		Модифицированность = Истина;
		// Устанавливаем доступность поля Вид этапа.
		УстановитьДоступностьВидаЭтапа();	
КонецПроцедуры // ДобавитьЭтапЗавершение()

&НаКлиенте
// Процедура - обработчик добавления точки маршрута.
//
// Параметры:
//	Точка					- СправочникСсылка	- Точка маршрута.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ДобавитьВариантСчета(Вариант, ДополнительныеПараметры) Экспорт
	
	Если Вариант = КодВозвратаДиалога.Отмена Тогда Возврат; КонецЕсли;
	
	НоваяСтрока = Объект.Состав.НайтиПоИдентификатору(ДополнительныеПараметры.ИДСтроки);
	НоваяСтрока.КартаМаршрута				= НСтр("ru = 'Документ'");
	НоваяСтрока.ТочкаМаршрута				= ДополнительныеПараметры.Этап;
	НоваяСтрока.ВариантСчетаНаОплату		= Вариант;
	НоваяСтрока.ПредставлениеТочкиМаршрута	= ПолучитьПредставлениеТочкиМаршрута(ДополнительныеПараметры.Этап);
	
	Если Вариант = 0 Тогда
		НоваяСтрока.ПредставлениеТочкиМаршрута	= ПолучитьПредставлениеТочкиМаршрута(ДополнительныеПараметры.Этап);
	ИначеЕсли Вариант = 1 Тогда
		НоваяСтрока.ПредставлениеТочкиМаршрута = НоваяСтрока.ПредставлениеТочкиМаршрута + " (оплата)";
	ИначеЕсли Вариант = 2 Тогда
		НоваяСтрока.ПредставлениеТочкиМаршрута = НоваяСтрока.ПредставлениеТочкиМаршрута + " (отгрузка)";
	КонецЕсли;
	
КонецПроцедуры // ДобавитьТочкуЗавершение()

&НаКлиенте
// Процедура - обработчик добавления точки маршрута.
//
// Параметры:
//	Точка					- СправочникСсылка	- Точка маршрута.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ДобавитьТочкуЗавершение(Точка, ДополнительныеПараметры) Экспорт
	Если Точка = Неопределено Тогда Возврат; КонецЕсли;
	тСтрока = Объект.Состав.НайтиПоИдентификатору(ДополнительныеПараметры);
	тСтрока.ТочкаМаршрута = Точка;
	тСтрока.ПредставлениеТочкиМаршрута = ПолучитьПредставлениеТочкиМаршрута(Точка);
КонецПроцедуры // ДобавитьТочкуЗавершение()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "Очистка" элемента формы "ВидЭтапа".
//
Процедура ВидЭтапаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // ВидЭтапаОчистка()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы "Состав".
//
Процедура СоставПриАктивизацииСтроки(Элемент)
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Элементы.СоставПредставлениеТочкиМаршрута.КнопкаВыбора	= (ТипЗнч(ТД.КартаМаршрута) = Тип("СправочникСсылка.CRM_КартыМаршрутов"));
	Элементы.СоставКартаМаршрута.КнопкаОткрытия				= Элементы.СоставПредставлениеТочкиМаршрута.КнопкаВыбора;
КонецПроцедуры // СоставПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "КартаМаршрута" элемента формы "Состав".
//
Процедура СоставКартаМаршрутаПриИзменении(Элемент)
	Элементы.Состав.ТекущиеДанные.ПредставлениеТочкиМаршрута = Элементы.Состав.ТекущиеДанные.ТочкаМаршрута;
КонецПроцедуры // СоставКартаМаршрутаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "ПредставлениеТочкиМаршрута" элемента формы "Состав".
//
Процедура СоставПредставлениеТочкиМаршрутаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("Отбор,ТекущаяСтрока", Новый Структура("Владелец", Элементы.Состав.ТекущиеДанные.КартаМаршрута), Элементы.Состав.ТекущиеДанные.ТочкаМаршрута);
	ОписаниеОповещения = Новый ОписаниеОповещения("СоставПредставлениеТочкиМаршрутаНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.CRM_ВоронкиПродаж.Форма.ФормаВыбораТочкиМаршрута", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // СоставПредставлениеТочкиМаршрутаНачалоВыбора()

&НаКлиенте
Процедура СоставПредставлениеТочкиМаршрутаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Элементы.Состав.ТекущиеДанные.ТочкаМаршрута = ВыбранноеЗначение;
		Элементы.Состав.ТекущиеДанные.ПредставлениеТочкиМаршрута = ПолучитьПредставлениеТочкиМаршрута(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // СоставПредставлениеТочкиМаршрутаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Открытие" поля "ПредставлениеТочкиМаршрута" элемента формы "Состав".
//
Процедура СоставПредставлениеТочкиМаршрутаОткрытие(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Состав.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ТекущиеДанные.ТочкаМаршрута) И ТипЗнч(ТекущиеДанные.ТочкаМаршрута) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов") Тогда
		СтруктураПараметров = Новый Структура("Ключ", Элементы.Состав.ТекущиеДанные.ТочкаМаршрута);
		ОткрытьФорму("Справочник.CRM_ТочкиМаршрутов.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	Иначе
		ПоказатьЗначение(, ТекущиеДанные.ТочкаМаршрута);
	КонецЕсли;
КонецПроцедуры // СоставПредставлениеТочкиМаршрутаОткрытие()

&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Форма = ПолучитьФорму("Справочник.CRM_ВоронкиПродаж.ФормаВыбора",
		Новый Структура("Отбор", Новый Структура("Родитель", ПредопределенноеЗначение("Справочник.CRM_ВоронкиПродаж.ПустаяСсылка"))), Элемент);
	//
	Форма.Открыть();
КонецПроцедуры

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик команды формы "ДобавитьДокумент".
//
Процедура ДобавитьДокумент(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", ЭтотОбъект, "Документ");
	ОткрытьФорму("ПланВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.ФормаВыбора", , ЭтотОбъект, , , , 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ДобавитьДокумент()

&НаКлиенте
// Процедура - обработчик команды формы "ДобавитьКарту".
//
Процедура ДобавитьКарту(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", ЭтотОбъект, "КартаМаршрута");
	ОткрытьФорму("Справочник.CRM_КартыМаршрутов.ФормаВыбора", , ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ДобавитьКарту()

&НаКлиенте
// Процедура - обработчик команды формы "ДобавитьСостояниеИнтереса".
//
Процедура ДобавитьСостояниеИнтереса(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", ЭтотОбъект, "СостояниеИнтереса");
	ОткрытьФорму("Справочник.CRM_СостоянияИнтересов.ФормаВыбора", , ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ДобавитьСостояниеИнтереса()

&НаКлиенте
// Процедура - обработчик команды формы "Удалить".
//
Процедура Удалить(Команда)
	ТД = Элементы.Состав.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Объект.Состав.Удалить(Объект.Состав.НайтиПоИдентификатору(ТД.ПолучитьИдентификатор()));
	Модифицированность = Истина;
	// Устанавливаем доступность поля Вид этапа.
	УстановитьДоступностьВидаЭтапа();
	// Очищаем оценку
	Если Объект.Состав.Количество() = 0 Тогда
		Объект.Оценка	= 0;
	КонецЕсли;	
КонецПроцедуры // Удалить()

&НаСервере
Функция ПолучитьМассивДляОтбора()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ВоронкиПродажСостав.ТочкаМаршрута КАК ТочкаМаршрута
	|ИЗ
	|	Справочник.CRM_ВоронкиПродаж.Состав КАК CRM_ВоронкиПродажСостав
	|ГДЕ
	|	CRM_ВоронкиПродажСостав.Ссылка.Родитель = &Родитель
	|	И НЕ CRM_ВоронкиПродажСостав.Ссылка = &Ссылка
	|	И НЕ CRM_ВоронкиПродажСостав.Ссылка.ПометкаУдаления
	|	И CRM_ВоронкиПродажСостав.Ссылка.ВидЭтапа = &ВидЭтапа";
	
	Запрос.УстановитьПараметр("Родитель",Объект.Родитель);
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидЭтапа",Объект.ВидЭтапа);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Объект.ВидЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам") Тогда
		
		СписокИсключаемыхТипов = Новый СписокЗначений;
		
		СписокИсключаемыхТипов.Добавить(Новый ОписаниеТипов("СправочникСсылка.МаркетинговыеМероприятия"));
		СписокИсключаемыхТипов.Добавить(Новый ОписаниеТипов("ДокументСсылка.CRM_ОтчетОРаботе"));
		СписокИсключаемыхТипов.Добавить(Новый ОписаниеТипов("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
		СписокИсключаемыхТипов.Добавить(Новый ОписаниеТипов("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
		СписокИсключаемыхТипов.Добавить(Новый ОписаниеТипов("ДокументСсылка.Анкета"));
		СписокИсключаемыхТипов.Добавить(Новый ОписаниеТипов("ДокументСсылка.УдалитьCRM_Событие"));
		
		ЕстьДокументCRM_СчетНаОплатуПокупателю = CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы", "CRM_СчетНаОплатуПокупателю");
		ИмяДокументаCRM_СчетНаОплатуПокупателю = "ДокументСсылка.CRM_СчетНаОплатуПокупателю";	
		
		Пока Выборка.Следующий() Цикл
			Если ЕстьДокументCRM_СчетНаОплатуПокупателю И Выборка.ТочкаМаршрута.ТипЗначения = Новый ОписаниеТипов(ИмяДокументаCRM_СчетНаОплатуПокупателю) Тогда
				Продолжить;
			КонецЕсли;
			
			СписокИсключаемыхТипов.Добавить(Выборка.ТочкаМаршрута.ТипЗначения);
		КонецЦикла;
		
		Для Каждого СтрокаСостава ИЗ Объект.Состав Цикл
			Если ЕстьДокументCRM_СчетНаОплатуПокупателю И Выборка.ТочкаМаршрута.ТипЗначения = Новый ОписаниеТипов(ИмяДокументаCRM_СчетНаОплатуПокупателю) Тогда
				Продолжить;
			КонецЕсли;
			СписокИсключаемыхТипов.Добавить(СтрокаСостава.ТочкаМаршрута.ТипЗначения);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ВидыОбъектовБизнесПроцессов.Ссылка,
		|	CRM_ВидыОбъектовБизнесПроцессов.ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов КАК CRM_ВидыОбъектовБизнесПроцессов
		|ГДЕ
		|	НЕ CRM_ВидыОбъектовБизнесПроцессов.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		МассивСсылок = новый Массив;
		Пока Выборка.Следующий() Цикл
			
			Если СписокИсключаемыхТипов.НайтиПоЗначению(Выборка.ТипЗначения) = Неопределено Тогда
				МассивСсылок.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Возврат МассивСсылок;
		
	ИначеЕсли Объект.ВидЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов") Тогда
		
		СписокИсключаемыхТипов = Новый СписокЗначений;
		СписокИсключаемыхТипов.Добавить(Справочники.CRM_СостоянияИнтересов.ИнтересПотерян);
		
		Пока Выборка.Следующий() Цикл
			СписокИсключаемыхТипов.Добавить(Выборка.ТочкаМаршрута);
		КонецЦикла;
		
		Для Каждого СтрокаСостава ИЗ Объект.Состав Цикл
			СписокИсключаемыхТипов.Добавить(СтрокаСостава.ТочкаМаршрута);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_СостоянияИнтересов.Ссылка
		|ИЗ
		|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
		|ГДЕ
		|	НЕ CRM_СостоянияИнтересов.ПометкаУдаления
		|	И НЕ CRM_СостоянияИнтересов.Ссылка В (&СписокИсключаемыхТипов)";
		
		Запрос.УстановитьПараметр("СписокИсключаемыхТипов",СписокИсключаемыхТипов);
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Процедура - обработчик команды формы "ДобавитьВСостав".
//
Процедура ДобавитьВСостав(Команда)
	
	МассивДляОтбора = ПолучитьМассивДляОтбора();
	
	Если Объект.ВидЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор",Новый Структура("Ссылка", МассивДляОтбора));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", ЭтотОбъект, "Документ");
		ОткрытьФорму("ПланВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Объект.ВидЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор",Новый Структура("Ссылка", МассивДляОтбора));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", ЭтотОбъект, "СостояниеИнтереса");
		ОткрытьФорму("Справочник.CRM_СостоянияИнтересов.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , ,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Объект.ВидЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ВидыЭтаповВоронкиПродаж.ПоЭтапам") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", ЭтотОбъект, "КартаМаршрута");
		ОткрытьФорму("Справочник.CRM_КартыМаршрутов.ФормаВыбора", ,ЭтотОбъект, , , ,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭтапЗавершение", ЭтотОбъект, "КартаМаршрута");
		ОткрытьФорму("Справочник.CRM_КартыМаршрутов.ФормаВыбора", , ЭтотОбъект, , , ,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры // ДобавитьВСостав()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоЭтапам;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.Родитель) Тогда
		// Генерация нового реквизита РеквизитДопУпорядочивания.
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
		|ИЗ
		|	Справочник.CRM_ВоронкиПродаж
		|ГДЕ
		|	Родитель = &Родитель
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочивания УБЫВ, Ссылка УБЫВ
		|");
		Запрос.УстановитьПараметр("Родитель", Объект.Родитель);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.РеквизитДопУпорядочивания = Выборка.РеквизитДопУпорядочивания + 1;
		Иначе
			Объект.РеквизитДопУпорядочивания = 0;
		КонецЕсли;
	КонецЕсли;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ЗаполнитьПредставленияИАктуальностьТочекМаршрута();
	КонецЕсли;
	// Заполняем список выбора поля оценка.
	Элементы.Оценка.СписокВыбора.Добавить(5,"5%");
	Элементы.Оценка.СписокВыбора.Добавить(10,"10%");
	Элементы.Оценка.СписокВыбора.Добавить(15,"15%");
	Элементы.Оценка.СписокВыбора.Добавить(20,"20%");
	Элементы.Оценка.СписокВыбора.Добавить(25,"25%");
	Элементы.Оценка.СписокВыбора.Добавить(30,"30%");
	Элементы.Оценка.СписокВыбора.Добавить(35,"35%");
	Элементы.Оценка.СписокВыбора.Добавить(40,"40%");
	Элементы.Оценка.СписокВыбора.Добавить(45,"45%");
	Элементы.Оценка.СписокВыбора.Добавить(50,"50%");
	Элементы.Оценка.СписокВыбора.Добавить(55,"55%");
	Элементы.Оценка.СписокВыбора.Добавить(60,"60%");
	Элементы.Оценка.СписокВыбора.Добавить(65,"65%");
	Элементы.Оценка.СписокВыбора.Добавить(70,"70%");
	Элементы.Оценка.СписокВыбора.Добавить(75,"75%");
	Элементы.Оценка.СписокВыбора.Добавить(80,"80%");
	Элементы.Оценка.СписокВыбора.Добавить(85,"85%");
	Элементы.Оценка.СписокВыбора.Добавить(90,"90%");
	Элементы.Оценка.СписокВыбора.Добавить(95,"95%");
	Элементы.Оценка.СписокВыбора.Добавить(100,"100%");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	// Устанавливаем доступность поля Вид этапа.
	УстановитьДоступностьВидаЭтапа();
КонецПроцедуры // ПриОткрытии()

&НаСервере
// Процедура - обработчик события формы "ПослеЗаписиНаСервере".
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьПредставленияИАктуальностьТочекМаршрута();
КонецПроцедуры // ПослеЗаписиНаСервере()

#КонецОбласти
