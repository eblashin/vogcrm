// +CRM не переносить в объединенные решения  ВЕСЬ МОДУЛЬ

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	
// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// +CRM

// Заполняет регистр сведений "ABCXYZКлассификацияКлиентов" результатами ABC классификации партнеров.
//
Процедура ВыполнитьABCКлассификацию(ДатаКлассификации = Неопределено) Экспорт
	
	ИспользоватьКлассификациюПоВыручке = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке");
	ИспользоватьКлассификациюПоКоличеству = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж");

	Если НЕ ИспользоватьКлассификациюПоВыручке И НЕ ИспользоватьКлассификациюПоКоличеству Тогда

		Возврат;

	КонецЕсли;

	ПериодКлассификации = Константы.ПериодABCКлассификацииПартнеров.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовABCКлассификацииПартнеров.Получить();

	Если ПериодКлассификации.Пустая() ИЛИ КоличествоПериодовКлассификации = 0 Тогда

		Возврат;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	CRM_ПродажиОбороты.Партнер,
	|	СУММА(CRM_ПродажиОбороты.СтоимостьОборот) КАК Выручка,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	РегистрНакопления.CRM_Продажи.Обороты(&НачалоПериода, &ОкончаниеПериода, Регистратор, ) КАК CRM_ПродажиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_ПродажиОбороты.Партнер"
	);

	
	Период = CRM_ОбщегоНазначенияКлиентСервер.РасширенныйПериод(?(ДатаКлассификации = Неопределено, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(), ДатаКлассификации), ПериодКлассификации, -КоличествоПериодовКлассификации);
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);

	РезультатКлассификации = Запрос.Выполнить().Выгрузить();

	Если ИспользоватьКлассификациюПоВыручке Тогда

		CRM_Классификация.ВыполнитьABCКлассификацию(РезультатКлассификации, "Выручка");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации, Перечисления.ТипыКлассификации.ABC,
			Перечисления.ТипыПараметровКлассификации.Выручка,
			Период.ДатаОкончания, Перечисления.XYZКлассификация.НеКлассифицирован
		);

	КонецЕсли;

	Если ИспользоватьКлассификациюПоКоличеству Тогда

		CRM_Классификация.ВыполнитьABCКлассификацию(РезультатКлассификации, "Количество");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации, Перечисления.ТипыКлассификации.ABC,
			Перечисления.ТипыПараметровКлассификации.Количество,
			Период.ДатаОкончания, Перечисления.XYZКлассификация.НеКлассифицирован
		);

	КонецЕсли;

КонецПроцедуры

// Заполняет регистр сведений "ABCXYZКлассификацияКлиентов" результатами XYZ классификации партнеров.
//
Процедура ВыполнитьXYZКлассификацию(ДатаКлассификации = Неопределено) Экспорт

	ИспользоватьКлассификациюПоВыручке = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке");
	ИспользоватьКлассификациюПоКоличеству = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж");

	Если НЕ ИспользоватьКлассификациюПоВыручке И НЕ ИспользоватьКлассификациюПоКоличеству Тогда

		Возврат;

	КонецЕсли;

	ПериодКлассификации = Константы.ПериодXYZКлассификацииПартнеров.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовXYZКлассификацииПартнеров.Получить();
	ПодпериодКлассификации = Константы.ПодПериодXYZКлассификацииПартнеров.Получить();

	Если ПериодКлассификации.Пустая() ИЛИ КоличествоПериодовКлассификации = 0 ИЛИ ПодпериодКлассификации.Пустая() Тогда

		Возврат;

	КонецЕсли;

	Запрос = Новый Запрос(
	 "ВЫБРАТЬ
	 |	0 КАК РазделительКлассификации,
	 |	CRM_ПродажиОбороты.Партнер КАК Партнер,
	 |	КОНЕЦПЕРИОДА(CRM_ПродажиОбороты.Период, " + Строка(ПодпериодКлассификации) + ") КАК Период,
	 |	CRM_ПродажиОбороты.СтоимостьОборот КАК Выручка,
	 |	1 КАК Количество
	 |ИЗ
	 |	РегистрНакопления.CRM_Продажи.Обороты(&НачалоПериода, &ОкончаниеПериода, Регистратор, ) КАК CRM_ПродажиОбороты
	 |ИТОГИ
	 |	МАКСИМУМ(РазделительКлассификации),
	 |	СУММА(Выручка),
	 |	СУММА(Количество)
	 |ПО
	 |	Партнер,
	 |	Период ПЕРИОДАМИ(" + Строка(ПодпериодКлассификации) + ", &НачалоПериода, &ОкончаниеПериода)"
	);
	

	Период = CRM_ОбщегоНазначенияКлиентСервер.РасширенныйПериод(?(ДатаКлассификации = Неопределено, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(), ДатаКлассификации), ПериодКлассификации, - КоличествоПериодовКлассификации);
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);

	ИсточникДанных = Новый Структура("ИсточникДанных", Запрос.Выполнить());

	Если ИспользоватьКлассификациюПоВыручке Тогда

		РезультатКлассификации = CRM_Классификация.ВыполнитьXYZКлассификацию(ИсточникДанных, "Выручка", "Номенклатура");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации, Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.Выручка,
			Период.ДатаОкончания, Перечисления.XYZКлассификация.НеКлассифицирован
		);

	КонецЕсли;

	Если ИспользоватьКлассификациюПоКоличеству Тогда

		РезультатКлассификации = CRM_Классификация.ВыполнитьXYZКлассификацию(ИсточникДанных, "Количество", "Номенклатура");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации, Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.Количество,
			Период.ДатаОкончания, Перечисления.XYZКлассификация.НеКлассифицирован
		);

	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьДанныеКлассификации(РезультатКлассификации, ТипКлассификации, ТипПараметраКлассификации, ПериодКлассификации, НеКлассифицирован)

	Если РезультатКлассификации.Колонки.Найти("Период") = Неопределено Тогда

		РезультатКлассификации.Колонки.Добавить("Период");

	КонецЕсли;

	Если РезультатКлассификации.Колонки.Найти("ТипПараметраКлассификации") = Неопределено Тогда

		РезультатКлассификации.Колонки.Добавить("ТипПараметраКлассификации");

	КонецЕсли;

	Если РезультатКлассификации.Колонки.Найти("ТипКлассификации") = Неопределено Тогда

		РезультатКлассификации.Колонки.Добавить("ТипКлассификации");

	КонецЕсли;

	РезультатКлассификации.ЗаполнитьЗначения(ПериодКлассификации, "Период");
	РезультатКлассификации.ЗаполнитьЗначения(ТипПараметраКлассификации, "ТипПараметраКлассификации");
	РезультатКлассификации.ЗаполнитьЗначения(ТипКлассификации, "ТипКлассификации");

	НаборЗаписей = РегистрыСведений.ABCXYZКлассификацияКлиентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ПериодКлассификации);
	НаборЗаписей.Отбор.ТипКлассификации.Установить(ТипКлассификации);
	НаборЗаписей.Отбор.ТипПараметраКлассификации.Установить(ТипПараметраКлассификации);

	НаборЗаписей.Загрузить(РезультатКлассификации);
	НаборЗаписей.Записать(Истина);

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(&ПериодКлассификации, ДЕНЬ) КАК Период,
		|	ABCXYZКлассификацияКлиентовСрезПоследних.Партнер КАК Партнер,
		|	ABCXYZКлассификацияКлиентовСрезПоследних.ТипПараметраКлассификации КАК ТипПараметраКлассификации,
		|	ABCXYZКлассификацияКлиентовСрезПоследних.ТипКлассификации КАК ТипКлассификации,
		|	&НеКлассифицирован КАК Класс,
		|	0 КАК ЗначениеПараметраКлассификации
		|ИЗ
		|	РегистрСведений.ABCXYZКлассификацияКлиентов.СрезПоследних(
		|			ДОБАВИТЬКДАТЕ(&ПериодКлассификации, СЕКУНДА, -1),
		|			(НЕ Партнер В
		|						(ВЫБРАТЬ
		|							ABCXYZКлассификацияКлиентов.Партнер КАК Партнер
		|						ИЗ
		|							РегистрСведений.ABCXYZКлассификацияКлиентов КАК ABCXYZКлассификацияКлиентов
		|						ГДЕ
		|							ABCXYZКлассификацияКлиентов.Период = НАЧАЛОПЕРИОДА(&ПериодКлассификации, ДЕНЬ)
		|							И ABCXYZКлассификацияКлиентов.ТипПараметраКлассификации = &ТипПараметраКлассификации
		|							И ABCXYZКлассификацияКлиентов.ТипКлассификации = &ТипКлассификации))
		|				И ТипПараметраКлассификации = &ТипПараметраКлассификации
		|				И ТипКлассификации = &ТипКлассификации) КАК ABCXYZКлассификацияКлиентовСрезПоследних"
	);

	Запрос.УстановитьПараметр("ПериодКлассификации", ПериодКлассификации);
	Запрос.УстановитьПараметр("ТипКлассификации", ТипКлассификации);
	Запрос.УстановитьПараметр("ТипПараметраКлассификации", ТипПараметраКлассификации);
	Запрос.УстановитьПараметр("НеКлассифицирован", НеКлассифицирован);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать(Ложь);

	КонецЕсли;

КонецПроцедуры

// -CRM
//+вог

// Возвращает настройки видимости и заголовков элементов формы. Используется для построения формы и табличного
// документа карточки номенклатуры.
// Параметры:
//  Объект - СправочникОбъект.Партнеры, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитов
//	РежимВидимостиПоказатьТолькоВажные 	- Булево - признак отображения основных реквизитов
//
// Возвращаемое значение:
//  Структура - структура с ключами:
//		* ВидимостьЭлементов - структура видимости элементов
//		* ЗаголовкиЭлементов - структура заголовков элементов
//
Функция НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные = Ложь) Экспорт
	
	НастройкиВидимостиИЗаголовков = Новый Структура;
	
	ВидимостьЭлементов = СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные);
	УстановитьПривилегированныйРежим(Истина);
	ЗаголовкиЭлементов = СтруктураЗаголовковЭлементовФормы(Объект, ВидимостьЭлементов);
	УстановитьПривилегированныйРежим(Ложь);
		
	НастройкиВидимостиИЗаголовков.Вставить("ВидимостьЭлементов", ВидимостьЭлементов);
	НастройкиВидимостиИЗаголовков.Вставить("ЗаголовкиЭлементов", ЗаголовкиЭлементов);
		
	Возврат НастройкиВидимостиИЗаголовков;
	
КонецФункции

#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область КарточкаОбъекта

// Возвращает табличный документ партнера.
// Параметры:
//  Партнер - СправочникОбъект.Партнеры, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитов 
//  НастройкиВидимостиИЗаголовков - Структура - см. функцию Справочники.Партнеры.НастройкиВидимостиИЗаголовков
//
// Возвращаемое значение:
//	ТабличныйДокумент - табличный документ с реквизитами
//
Функция ТабличныйДокументКарточкиОбъекта(Партнер, НастройкиВидимостиИЗаголовков) Экспорт
	
	//Перем Заголовок;

	//ТолькоЗаполненные = (НастройкиВидимостиИЗаголовков.Свойство("ТолькоЗаполненные") И НастройкиВидимостиИЗаголовков.ТолькоЗаполненные);
	//
	//Объект = Неопределено;
	//Если ТипЗнч(Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
	//	Объект = Партнер.ПолучитьОбъект();
	//ИначеЕсли ТипЗнч(Партнер) = Тип("СправочникОбъект.Партнеры")
	//	Или ТипЗнч(Партнер) = Тип("ДанныеФормыСтруктура") Тогда
	//	Объект = Партнер;
	//Иначе
	//	Возврат Новый ТабличныйДокумент;
	//КонецЕсли;
	//
	//ТабличныйДокументКарточка = Новый ТабличныйДокумент;
	//
	//СтруктураВидимости = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	//СтруктураЗаголовков = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	//
	//Макет = ПолучитьМакет("ПФ_MXL_КарточкаПартнера");
	//
	//#Область Шапка
	//
	//ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	//ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Объект);
	//	
	//Если Не ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
	//	ОбластьШапка.Параметры.НаименованиеПолное = ТекстЗначенияНеЗаполнен("НаименованиеПолное");
	//КонецЕсли;
	//ОбластьШапка.Параметры.РасшифровкаНаименованиеПолное = "НаименованиеПолное";
	//
	//СтруктураЗаполненостиОбъекта = вогКонтрольЗаполненностиРеквизитовОбъектов.СтруктураЗаполненостиОбъекта(Объект.Ссылка); 
	//
	//ОбластьШапка.Параметры.ПроцентЗаполненностиОбщий = СтруктураЗаполненостиОбъекта.ПроцентЗаполненностиОбщий;
	//ОбластьШапка.Область("ПроцентЗаполненностиИндикатор").Картинка = СтруктураЗаполненостиОбъекта.Картинка;
	//
	//ТабличныйДокументКарточка.Присоединить(ОбластьШапка);
	//
	//#КонецОбласти
	//
	//ТабличныйДокументКолонки = Новый ТабличныйДокумент;
	//
	//#Область ОбщиеДанные
	//
	//МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	//
	////Классификаторы
	//Классификаторы = CRM_КлассификаторыВызовСервера.ТаблицаСоставаКлассификаторовОбъекта(Объект.Ссылка);
	//Если ГлаваВидна("Классификаторы", СтруктураВидимости,, Классификаторы.Количество()) Тогда 
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("ТаблицаКлассификаторов", Классификаторы);
	//	Запрос.УстановитьПараметр("ОбъектСсылка", Объект.Ссылка);
	//	
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	ТаблицаКлассификаторов.Классификатор КАК Классификатор,
	//		|	ТаблицаКлассификаторов.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
	//		|	ТаблицаКлассификаторов.Аналитика КАК Аналитика
	//		|ПОМЕСТИТЬ втТаблицаКлассификаторов
	//		|ИЗ
	//		|	&ТаблицаКлассификаторов КАК ТаблицаКлассификаторов
	//		|
	//		|ИНДЕКСИРОВАТЬ ПО
	//		|	Классификатор,
	//		|	Аналитика
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора,
	//		|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
	//		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
	//		|ПОМЕСТИТЬ втТекущиеЗначенияКлассификаторов
	//		|ИЗ
	//		|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	//		|ГДЕ
	//		|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &ОбъектСсылка
	//		|	И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец, CRM_ОбъектыЗначенийКлассификаторов.Аналитика) В
	//		|			(ВЫБРАТЬ
	//		|				втТаблицаКлассификаторов.Классификатор,
	//		|				втТаблицаКлассификаторов.Аналитика
	//		|			ИЗ
	//		|				втТаблицаКлассификаторов КАК втТаблицаКлассификаторов)
	//		|
	//		|ИНДЕКСИРОВАТЬ ПО
	//		|	ЗначениеКлассификатора,
	//		|	Аналитика
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	CRM_ЗначенияКлассификаторов.Владелец КАК Классификатор,
	//		|	CRM_ЗначенияКлассификаторов.Ссылка КАК Значение,
	//		|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит
	//		|ПОМЕСТИТЬ втВсеЗначенияКлассификаторов
	//		|ИЗ
	//		|	втТаблицаКлассификаторов КАК втТаблицаКлассификаторов
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
	//		|		ПО втТаблицаКлассификаторов.Классификатор = CRM_ЗначенияКлассификаторов.Владелец
	//		|ГДЕ
	//		|	НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
	//		|
	//		|ИНДЕКСИРОВАТЬ ПО
	//		|	Классификатор
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	втВсеЗначенияКлассификаторов.Классификатор КАК Классификатор,
	//		|	втВсеЗначенияКлассификаторов.Классификатор.ВидОтображения КАК ВидОтображения,
	//		|	втВсеЗначенияКлассификаторов.Классификатор.Представление,
	//		|	втВсеЗначенияКлассификаторов.Значение,
	//		|	втВсеЗначенияКлассификаторов.Значение.Представление,
	//		|	втВсеЗначенияКлассификаторов.ДополнительныйРеквизит,
	//		|	ЕСТЬNULL(втТекущиеЗначенияКлассификаторов.ЗначениеРеквизита, НЕОПРЕДЕЛЕНО) КАК ЗначениеРеквизита,
	//		|	ВЫБОР
	//		|		КОГДА втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора ЕСТЬ NULL
	//		|			ТОГДА ЛОЖЬ
	//		|		ИНАЧЕ ИСТИНА
	//		|	КОНЕЦ КАК Включен
	//		|ИЗ
	//		|	втВсеЗначенияКлассификаторов КАК втВсеЗначенияКлассификаторов
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ втТекущиеЗначенияКлассификаторов КАК втТекущиеЗначенияКлассификаторов
	//		|		ПО втВсеЗначенияКлассификаторов.Значение = втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора
	//		|
	//		|УПОРЯДОЧИТЬ ПО
	//		|	втВсеЗначенияКлассификаторов.Классификатор.РеквизитДопУпорядочивания,
	//		|	втВсеЗначенияКлассификаторов.Значение.РеквизитДопУпорядочивания
	//		|ИТОГИ ПО
	//		|	Классификатор";
	//	
	//	ВыборкаКлассификатор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	//КонецЕсли;	
	//
	////Доп. реквизиты
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	НаборыДополнительныхРеквизитов.Свойство КАК Свойство,
	//|	НаборыДополнительныхРеквизитов.Ссылка КАК НаборСвойств,
	//|	НаборыДополнительныхРеквизитов.Свойство.Заголовок КАК ПредставлениеРеквизита,
	//|	ПартнерыДополнительныеРеквизиты.Значение КАК Значение,
	//|	ИСТИНА КАК ОбщееСвойство,
	//|	НаборыДополнительныхРеквизитов.НомерСтроки КАК НомерСтрокиДляСортировки
	//|ИЗ
	//|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
	//|		ПО (ПартнерыДополнительныеРеквизиты.Ссылка = &Партнер)
	//|			И НаборыДополнительныхРеквизитов.Свойство = ПартнерыДополнительныеРеквизиты.Свойство
	//|ГДЕ
	//|	НЕ НаборыДополнительныхРеквизитов.Свойство.ЭтоДополнительноеСведение
	//|	И (НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие)
	//|			ИЛИ НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Компании_CRM))";
	//
	//Если ТолькоЗаполненные Тогда
	//	Запрос.Текст = Запрос.Текст  + " И НЕ ПартнерыДополнительныеРеквизиты.Значение ЕСТЬ NULL"
	//КонецЕсли;
	//	
	//Запрос.УстановитьПараметр("Партнер", Объект.Ссылка);
	//ДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	//ДополнительныеРеквизиты.Сортировать("ОбщееСвойство Убыв, НомерСтрокиДляСортировки Возр");
	//	
	//#КонецОбласти
	//
	//#Область ТабличныйДокументЛево
	//
	//ТабличныйДокументЛево = Новый ТабличныйДокумент;
	//	
	//#Область ПортретКлиента
	//
	//Если ГлаваВидна("ПортретКлиента", СтруктураВидимости) Тогда 
	//	
	//	ОбластьПортретКлиентаЗаголовок = Макет.ПолучитьОбласть("ПортретКлиентаЗаголовок");
	//	ТабличныйДокументЛево.Вывести(ОбластьПортретКлиентаЗаголовок);
	//	
	//	// Вывод картинки
	//	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
	//		
	//		ОбластьПортретКлиентаКартинка = Макет.ПолучитьОбласть("ПортретКлиентаКартинка");
	//		Попытка
	//			УстановитьПривилегированныйРежим(Истина);
	//			КартинкаПартнера = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Объект.CRM_Фотография);
	//			УстановитьПривилегированныйРежим(Ложь);
	//		Исключение
	//			КартинкаПартнера = Неопределено; 
	//		КонецПопытки;
	//		
	//		Если ЗначениеЗаполнено(КартинкаПартнера) Тогда
	//			ОбластьКартинка = ОбластьПортретКлиентаКартинка.Области.АдресКартинки; 
	//			
	//			Если ТипЗнч(КартинкаПартнера) = Тип("Картинка") Тогда
	//				ОбластьКартинка.Картинка = КартинкаПартнера;
	//			ИначеЕсли ТипЗнч(КартинкаПартнера) = Тип("ДвоичныеДанные") Тогда
	//				ОбластьКартинка.Картинка = Новый Картинка(КартинкаПартнера);
	//			КонецЕсли;
	//			
	//			ОбластьПортретКлиентаКартинка.Параметры.Расшифровка = "ФайлКартинки";
	//			
	//			ТабличныйДокументЛево.Вывести(ОбластьПортретКлиентаКартинка);
	//		КонецЕсли;
	//		
	//	Иначе
	//		
	//		ОписаниеКартинкиНет = Макет.ПолучитьОбласть("ФайлКартинкиСтрока");
	//		ОписаниеКартинкиНет.Параметры.Расшифровка = "ФайлКартинки";
	//		ТабличныйДокументЛево.Вывести(ОписаниеКартинкиНет);
	//		
	//	КонецЕсли;	
	//			
	//	Если РазделВиден("БизнесРегион", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "БизнесРегион", Объект.БизнесРегион,,, ТолькоЗаполненные);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("CRM_ТипыОтношений", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "CRM_ТипыОтношений", Объект.CRM_ТипОтношенийПредставление,,, ТолькоЗаполненные);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("CRM_Важность", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "CRM_Важность", Объект.CRM_Важность,,, ТолькоЗаполненные);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("CRM_СтатусРаботы", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "CRM_СтатусРаботы", Объект.CRM_СтатусРаботы,,, ТолькоЗаполненные);
	//	КонецЕсли;
	//	
	//	ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Комментарий", Объект.Комментарий,,, ТолькоЗаполненные);
	//	
	//	Если РазделВиден("ГиперссылкаПерейтиИзображения", СтруктураВидимости) Тогда
	//		ОбластьОписаниеИзображенияСтрока = Макет.ПолучитьОбласть("ИзображенияСтрока");
	//		
	//		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиИзображения", Заголовок) Тогда
	//			ОбластьОписаниеИзображенияСтрока.Параметры.Изображения = Заголовок;
	//			ОбластьОписаниеИзображенияСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиИзображения";
	//		КонецЕсли;
	//		ТабличныйДокументЛево.Вывести(ОбластьОписаниеИзображенияСтрока);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимости) Тогда
	//		ОбластьОписаниеФайлыСтрока = Макет.ПолучитьОбласть("ФайлыСтрока");
	//		
	//		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиФайлы", Заголовок) Тогда
	//			ОбластьОписаниеФайлыСтрока.Параметры.Файлы = Заголовок;
	//			ОбластьОписаниеФайлыСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиФайлы";
	//		КонецЕсли;
	//		ТабличныйДокументЛево.Вывести(ОбластьОписаниеФайлыСтрока);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("ГиперссылкаПерейтиСегменты", СтруктураВидимости) Тогда
	//		ОбластьГиперссылкаПерейтиСегменты = Макет.ПолучитьОбласть("ГиперссылкаПерейтиСегментыСтрока");
	//		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиСегменты", Заголовок) Тогда  
	//			ОбластьГиперссылкаПерейтиСегменты.Параметры.ГиперссылкаПерейтиСегменты = Заголовок;
	//		КонецЕсли;
	//		ОбластьГиперссылкаПерейтиСегменты.Параметры.Расшифровка = "ГиперссылкаПерейтиСегменты";
	//		ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиСегменты);
	//	КонецЕсли;
	//	
	//	Если ГлаваВидна("Классификаторы", СтруктураВидимости,, Классификаторы.Количество())
	//	  И РазделВиден("ГиперссылкаПерейтиЗначенияКлассификаторов", СтруктураВидимости) Тогда
	//		ОбластьГиперссылкаПерейтиЗначенияКлассификаторов = Макет.ПолучитьОбласть("ГиперссылкаПерейтиЗначенияКлассификаторовСтрока");
	//		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиЗначенияКлассификаторов", Заголовок) Тогда  
	//			ОбластьГиперссылкаПерейтиЗначенияКлассификаторов.Параметры.ГиперссылкаПерейтиЗначенияКлассификаторов = Заголовок;
	//		КонецЕсли;
	//		ОбластьГиперссылкаПерейтиЗначенияКлассификаторов.Параметры.Расшифровка = "ГиперссылкаПерейтиЗначенияКлассификаторов";
	//		ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиЗначенияКлассификаторов);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("ГиперссылкаПерейтиДоговорыКлиента", СтруктураВидимости) Тогда
	//		ОбластьГиперссылкаПерейтиДоговорыКлиента = Макет.ПолучитьОбласть("ГиперссылкаПерейтиДоговорыКлиентаСтрока");
	//		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиДоговорыКлиента", Заголовок) Тогда  
	//			ОбластьГиперссылкаПерейтиДоговорыКлиента.Параметры.ГиперссылкаПерейтиДоговорыКлиента = Заголовок;
	//		КонецЕсли;
	//		ОбластьГиперссылкаПерейтиДоговорыКлиента.Параметры.Расшифровка = "ГиперссылкаПерейтиДоговорыКлиента";
	//		ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиДоговорыКлиента);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("ГиперссылкаПерейтиБанковскиеСчета", СтруктураВидимости) Тогда
	//		ОбластьГиперссылкаПерейтиБанковскиеСчета = Макет.ПолучитьОбласть("ГиперссылкаПерейтиБанковскиеСчетаСтрока");
	//		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиБанковскиеСчета", Заголовок) Тогда  
	//			ОбластьГиперссылкаПерейтиБанковскиеСчета.Параметры.ГиперссылкаПерейтиБанковскиеСчета = Заголовок;
	//		КонецЕсли;
	//		ОбластьГиперссылкаПерейтиБанковскиеСчета.Параметры.Расшифровка = "ГиперссылкаПерейтиБанковскиеСчета";
	//		ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиБанковскиеСчета);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//	
	//#КонецОбласти
	//
	//#Область КонтактнаяИнформация
	//
	//Если ГлаваВидна("КонтактнаяИнформация", СтруктураВидимости) Тогда 
	//	ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("КонтактнаяИнформацияЗаголовок");
	//	ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
	//	
	//	ГруппаВидовКИ = вогОбщегоНазначения.ГруппаВидовКИОбъекта(МетаданныеОбъекта);
	//	Если ГруппаВидовКИ <> Неопределено Тогда
	//		Запрос = Новый Запрос;
	//		Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	//		Запрос.УстановитьПараметр("КонтактнаяИнформация", Объект.КонтактнаяИнформация.Выгрузить());
	//		
	//		Запрос.Текст = 
	//			"ВЫБРАТЬ
	//			|	КонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
	//			|	КонтактнаяИнформация.Вид КАК Вид,
	//			|	КонтактнаяИнформация.Представление
	//			|ПОМЕСТИТЬ КонтактнаяИнформация
	//			|ИЗ
	//			|	&КонтактнаяИнформация КАК КонтактнаяИнформация
	//			|
	//			|ИНДЕКСИРОВАТЬ ПО
	//			|	Вид
	//			|;
	//			|
	//			|////////////////////////////////////////////////////////////////////////////////
	//			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			|	СправочникВидыКонтактнойИнформации.Ссылка КАК ВидКИ,
	//			|	СправочникВидыКонтактнойИнформации.Представление КАК ВидКИПредставление,
	//			|	ВЫБОР
	//			|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое) ТОГДА 4
	//			|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА 3
	//			|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА 2
	//			|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс) ТОГДА 1
	//			|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА 1
	//			|		ИНАЧЕ 0
	//			|	КОНЕЦ КАК ДопПолеСортировки,
	//			|	ВЫБОР
	//			|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое) ТОГДА 2
	//			|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница) ТОГДА 2
	//			|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) ТОГДА 1
	//			|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс) ТОГДА 1
	//			|		КОГДА СправочникВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон) ТОГДА 1
	//			|		ИНАЧЕ 2
	//			|	КОНЕЦ КАК Колонка,
	//			|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0) КАК НомерСтроки,
	//			|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК Представление
	//			|ИЗ
	//			|	Справочник.ВидыКонтактнойИнформации КАК СправочникВидыКонтактнойИнформации
	//			|		ЛЕВОЕ СОЕДИНЕНИЕ КонтактнаяИнформация КАК КонтактнаяИнформация
	//			|		ПО СправочникВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
	//			|ГДЕ
	//			|	НЕ СправочникВидыКонтактнойИнформации.ПометкаУдаления
	//			|	И СправочникВидыКонтактнойИнформации.Используется
	//			|	И ЕСТЬNULL(СправочникВидыКонтактнойИнформации.Родитель.Используется, ИСТИНА)
	//			|	И СправочникВидыКонтактнойИнформации.Родитель В(&ГруппаВидовКИ)
	//			|
	//			|УПОРЯДОЧИТЬ ПО
	//			|	ВидКИ ИЕРАРХИЯ";
	//		
	//		ПорядковыйНомер = 1;
	//		
	//		КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
	//		КонтактнаяИнформация.Сортировать("Колонка, ДопПолеСортировки, НомерСтроки");
	//		
	//		Для каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
	//			Если Не ЗначениеЗаполнено(ОбъектКонтактнойИнформации.Представление) Тогда
	//				ПорядковыйНомер = ПорядковыйНомер + 1;	
	//				Продолжить;
	//			
	//			КонецЕсли;
	//			
	//			ИмяЭлементаКИ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2%3",
	//				"КонтактнаяИнформацияПоле",
	//				СтрЗаменить(ОбъектКонтактнойИнформации.ВидКИ.УникальныйИдентификатор(), "-", "x"),
	//				ПорядковыйНомер);
	//			
	//			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "КонтактнаяИнформация", ОбъектКонтактнойИнформации.Представление, ОбъектКонтактнойИнформации.ВидКИПредставление, ИмяЭлементаКИ, ТолькоЗаполненные);		
	//			
	//			ПорядковыйНомер = ПорядковыйНомер + 1;	
	//			
	//		КонецЦикла;
	//						
	//	КонецЕсли;
	//	
	//	Если РазделВиден("ГиперссылкаПерейтиКонтакты", СтруктураВидимости) Тогда
	//		ОбластьГиперссылкаПерейтиКонтакты = Макет.ПолучитьОбласть("ГиперссылкаПерейтиКонтактыСтрока");
	//		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиКонтакты", Заголовок) Тогда  
	//			ОбластьГиперссылкаПерейтиКонтакты.Параметры.ГиперссылкаПерейтиКонтакты = Заголовок;
	//		КонецЕсли;
	//		ОбластьГиперссылкаПерейтиКонтакты.Параметры.Расшифровка = "ГиперссылкаПерейтиКонтакты";
	//		ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиКонтакты);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("ГиперссылкаПерейтиЮрЛица", СтруктураВидимости) Тогда
	//		ОбластьГиперссылкаПерейтиЮрЛица = Макет.ПолучитьОбласть("ГиперссылкаПерейтиЮрЛицаСтрока");
	//		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиЮрЛица", Заголовок) Тогда  
	//			ОбластьГиперссылкаПерейтиЮрЛица.Параметры.ГиперссылкаПерейтиЮрЛица = Заголовок;
	//		КонецЕсли;
	//		ОбластьГиперссылкаПерейтиЮрЛица.Параметры.Расшифровка = "ГиперссылкаПерейтиЮрЛица";
	//		ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиЮрЛица);
	//	КонецЕсли;  
	//	
	//	Если РазделВиден("ГиперссылкаПерейтиТорговыеТочки", СтруктураВидимости) Тогда
	//		ОбластьГиперссылкаПерейтиТорговыеТочки = Макет.ПолучитьОбласть("ГиперссылкаПерейтиТорговыеТочкиСтрока");
	//		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиТорговыеТочки", Заголовок) Тогда  
	//			ОбластьГиперссылкаПерейтиТорговыеТочки.Параметры.ГиперссылкаПерейтиТорговыеТочки = Заголовок;
	//		КонецЕсли;
	//		ОбластьГиперссылкаПерейтиТорговыеТочки.Параметры.Расшифровка = "ГиперссылкаПерейтиТорговыеТочки";
	//		ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиТорговыеТочки);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//			
	//#КонецОбласти
	//
	//#Область РазделыЛево
	//
	//ОписаниеРазделов = вогОбщегоНазначения.ПолучитьДанныеРазделаКарточки(МетаданныеОбъекта.ПолноеИмя(), 
	//	"Лево", ВыборкаКлассификатор, ДополнительныеРеквизиты);
	//Для каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
	//	Если ОписаниеРаздела.ДанныеРаздела.Количество() = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ЦветФона = ОписаниеРаздела.ЦветФона;
	//	
	//	ОбластьЗаголовок = Макет.ПолучитьОбласть("РазделЗаголовокЛево");
	//	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОписаниеРаздела.РазделПредставление;
	//	ТабличныйДокументЛево.Вывести(ОбластьЗаголовок);		   
	//	
	//	Для каждого ЭлементРаздела Из ОписаниеРаздела.ДанныеРаздела Цикл
	//		ОписаниеДанных = Неопределено;
	//		Если Не ЭлементРаздела.СоставРаздела.Свойство("ОписаниеДанных", ОписаниеДанных) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если ЭлементРаздела.ТипРаздела = "ДополнительныеРеквизиты" Тогда				
	//			ИмяЭлементаДопРеквизита = "ДополнительныйРеквизитЗначение_" 
	//				+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.НаборСвойств.УникальныйИдентификатор())), "-", "x")
	//				+ "_"
	//				+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.Свойство.УникальныйИдентификатор())), "-", "x");
	//			
	//			Если РазделВиден(ИмяЭлементаДопРеквизита, СтруктураВидимости) Тогда 
	//				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ДополнительныеРеквизитыЛево", ОписаниеДанных.Значение, ОписаниеДанных.ПредставлениеРеквизита, ИмяЭлементаДопРеквизита,, ЦветФона);		
	//			КонецЕсли;	
	//			
	//		ИначеЕсли ЭлементРаздела.ТипРаздела = "Классификаторы" Тогда
	//			ИмяЭлементаКлассфикатора =  CRM_КлассификаторыВызовСервера.ИмяОсновногоЭлементаКлассификатора(ОписаниеДанных.Классификатор, ОписаниеДанных.ВидОтображения); 
	//			Если ТипЗнч(ОписаниеДанных.Значения) = Тип("Строка") Тогда
	//				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "КлассификаторыЛево", ОписаниеДанных.Значения, ОписаниеДанных.КлассификаторПредставление, ИмяЭлементаКлассфикатора, ТолькоЗаполненные, ЦветФона);
	//			Иначе	
	//				Если ОписаниеДанных.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
	//					Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
	//						ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ДополнительныеРеквизитыЛево", СтруктураЗначения.ЗначениеРеквизита, СтруктураЗначения.ЗначениеПредставление, ИмяЭлементаКлассфикатора, ТолькоЗаполненные, ЦветФона);
	//					КонецЦикла
	//					
	//				Иначе	

	//					ОбластьТаблицейЗаголовок = Макет.ПолучитьОбласть("КлассификаторыТаблицейЗаголовокЛевоСтрока");
	//					ОбластьТаблицейЗаголовок.Параметры.КлассификаторыЗаголовок = ОписаниеДанных.КлассификаторПредставление;
	//					ОбластьТаблицейЗаголовок.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
	//					
	//					УстановитьЦветФонаОбласти(ОбластьТаблицейЗаголовок, ЦветФона);	
	//					ТабличныйДокументЛево.Вывести(ОбластьТаблицейЗаголовок);		   
	//					
	//					Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
	//						ОбластьКлассификаторыТаблицейСтрока = Макет.ПолучитьОбласть("КлассификаторыТаблицейЛевоСтрока");
	//						ОбластьКлассификаторыТаблицейСтрока.Параметры.КлассификаторыЛевоРеквизит = СтруктураЗначения.ЗначениеПредставление;
	//						
	//						Если СтруктураЗначения.Включен Тогда
	//							Картинка = БиблиотекаКартинок.CRM_УстановитьФлажки;	
	//						Иначе
	//							Картинка = БиблиотекаКартинок.CRM_СнятьФлажки;	
	//						КонецЕсли;
	//						
	//						ОбластьКлассификаторыТаблицейСтрока.Область("КлассификаторыТаблицейЛевоКартинка").Картинка = Картинка;
	//						ОбластьКлассификаторыТаблицейСтрока.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
	//						
	//						УстановитьЦветФонаОбласти(ОбластьКлассификаторыТаблицейСтрока, ЦветФона);	
	//						ТабличныйДокументЛево.Вывести(ОбластьКлассификаторыТаблицейСтрока);		   
	//						
	//					КонецЦикла;
	//					
	//				КонецЕсли;
	//				
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//	
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	//#КонецОбласти
	//
	//ТабличныйДокументКолонки.Присоединить(ТабличныйДокументЛево);
	//
	//#КонецОбласти
	//	
	//#Область ТабличныйДокументПраво
	//
	//ТабличныйДокументПраво = Новый ТабличныйДокумент;
	//
	//#Область Менеджеры
	//
	//Если ГлаваВидна("Менеджеры", СтруктураВидимости) Тогда
	//	МенеджерыОбъекта = вогУправлениеДоступом.МенеджерыВладельца(Объект.Ссылка);
	//	
	//	ОбластьЗаголовок = Макет.ПолучитьОбласть("МенеджерыЗаголовок");
	//	ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
	//	
	//	Если Не (МенеджерыОбъекта.Количество() = 0 И ТолькоЗаполненные) Тогда			
	//		Для Каждого СтрокаМенеджера Из МенеджерыОбъекта Цикл
	//			ОбластьМенеджерыСтрока = Макет.ПолучитьОбласть("МенеджерыСтрока");
	//			ОбластьМенеджерыСтрока.Параметры.МенеджерСтрока 		  	   = СтрокаМенеджера.Менеджер;
	//			ОбластьМенеджерыСтрока.Параметры.Расшифровка  			  	   = "Менеджеры";
	//			
	//			ОбластьМенеджерыСтрока.Параметры.ОрганизацияСтрока 		 	   = СтрокаМенеджера.Организация;
	//			ОбластьМенеджерыСтрока.Параметры.Расшифровка                   = "Менеджеры";
	//			
	//			ОбластьМенеджерыСтрока.Параметры.РольСтрока 		 	   	   = СтрокаМенеджера.Роль;
	//			ОбластьМенеджерыСтрока.Параметры.Расшифровка                   = "Менеджеры";
	//			
	//			ОбластьМенеджерыСтрока.Параметры.НаправлениеДеятельностиСтрока = СтрокаМенеджера.НаправлениеДеятельности;
	//			ОбластьМенеджерыСтрока.Параметры.Расшифровка                   = "Менеджеры";
	//			
	//			ТабличныйДокументПраво.Вывести(ОбластьМенеджерыСтрока);		   
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;		
	//	
	//	ОбластьДопСтрока = Макет.ПолучитьОбласть("ДопСтрокаПраво");
	//	ТабличныйДокументПраво.Вывести(ОбластьДопСтрока);		
	//			
	//КонецЕсли;	
	//	
	//#КонецОбласти
	//
	//#Область ДоступныеОрганизации
	//
	//Если Не (Объект.вогОрганизации.Количество() = 0 И ТолькоЗаполненные) Тогда
	//	Если ГлаваВидна("ДоступныеОрганизации", СтруктураВидимости) Тогда 
	//		ОбластьЗаголовок = Макет.ПолучитьОбласть("ДоступныеОрганизацииЗаголовок");
	//		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
	//		
	//		Если Объект.вогОрганизации.Количество() > 0 Тогда
	//			Для каждого СтрокаТЧ Из Объект.вогОрганизации Цикл
	//				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ДоступныеОрганизации", СтрокаТЧ.Организация);
	//			КонецЦикла;
	//			
	//		Иначе	
	//			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ДоступныеОрганизации", ТекстЗначенияНеЗаполнен("ДоступныеОрганизации"));
	//		КонецЕсли;
	//						
	//	КонецЕсли;
	//	
	//КонецЕсли;	
	//#КонецОбласти
	//		
	//#Область ДополнительнаяИнформация
	//
	//Если Не (Объект.CRM_ДополнительнаяИнформация.Количество() = 0 И ТолькоЗаполненные) Тогда
	//	Если ГлаваВидна("ДополнительнаяИнформация", СтруктураВидимости) 
	//	  И Объект.CRM_ДополнительнаяИнформация.Количество() > 0 Тогда 
	//		ОбластьЗаголовок = Макет.ПолучитьОбласть("ДополнительнаяИнформацияЗаголовок");
	//		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
	//		
	//		Для каждого СтрокаТЧ Из Объект.CRM_ДополнительнаяИнформация Цикл
	//			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ДополнительнаяИнформация", СтрокаТЧ.Значение, СтрокаТЧ.Свойство, "ДополнительнаяИнформация", ТолькоЗаполненные);		
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//#КонецОбласти
	//
	//#Область РазделыПраво
	//
	//ОписаниеРазделов = вогОбщегоНазначения.ПолучитьДанныеРазделаКарточки(МетаданныеОбъекта.ПолноеИмя(), 
	//	"Право", ВыборкаКлассификатор, ДополнительныеРеквизиты);
	//Для каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
	//	Если ОписаниеРаздела.ДанныеРаздела.Количество() = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ЦветФона = ОписаниеРаздела.ЦветФона;
	//	
	//	ОбластьЗаголовок = Макет.ПолучитьОбласть("РазделЗаголовокПраво");
	//	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОписаниеРаздела.РазделПредставление;
	//	ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);		   
	//	
	//	Для каждого ЭлементРаздела Из ОписаниеРаздела.ДанныеРаздела Цикл
	//		ОписаниеДанных = Неопределено;
	//		Если Не ЭлементРаздела.СоставРаздела.Свойство("ОписаниеДанных", ОписаниеДанных) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если ЭлементРаздела.ТипРаздела = "ДополнительныеРеквизиты" Тогда				
	//			ИмяЭлементаДопРеквизита = "ДополнительныйРеквизитЗначение_" 
	//				+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.НаборСвойств.УникальныйИдентификатор())), "-", "x")
	//				+ "_"
	//				+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.Свойство.УникальныйИдентификатор())), "-", "x");
	//			
	//			Если РазделВиден(ИмяЭлементаДопРеквизита, СтруктураВидимости) Тогда 
	//				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ДополнительныеРеквизитыПраво", ОписаниеДанных.Значение, ОписаниеДанных.ПредставлениеРеквизита, ИмяЭлементаДопРеквизита,, ЦветФона);		
	//			КонецЕсли;	
	//			
	//		ИначеЕсли ЭлементРаздела.ТипРаздела = "Классификаторы" Тогда
	//			ИмяЭлементаКлассфикатора =  CRM_КлассификаторыВызовСервера.ИмяОсновногоЭлементаКлассификатора(ОписаниеДанных.Классификатор, ОписаниеДанных.ВидОтображения); 
	//			Если ТипЗнч(ОписаниеДанных.Значения) = Тип("Строка") Тогда
	//				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КлассификаторыПраво", ОписаниеДанных.Значения, ОписаниеДанных.КлассификаторПредставление, ИмяЭлементаКлассфикатора, ТолькоЗаполненные, ЦветФона);
	//			Иначе	
	//				Если ОписаниеДанных.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
	//					Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
	//						ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ДополнительныеРеквизитыПраво", СтруктураЗначения.ЗначениеРеквизита, СтруктураЗначения.ЗначениеПредставление, ИмяЭлементаКлассфикатора, ТолькоЗаполненные, ЦветФона);
	//					КонецЦикла
	//					
	//				Иначе	
	//				
	//					ОбластьТаблицейЗаголовок = Макет.ПолучитьОбласть("КлассификаторыТаблицейЗаголовокПравоСтрока");
	//					ОбластьТаблицейЗаголовок.Параметры.КлассификаторыЗаголовок = ОписаниеДанных.КлассификаторПредставление;
	//					ОбластьТаблицейЗаголовок.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
	//					
	//					УстановитьЦветФонаОбласти(ОбластьТаблицейЗаголовок, ЦветФона);	
	//					ТабличныйДокументПраво.Вывести(ОбластьТаблицейЗаголовок);		   
	//					
	//					Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
	//						ОбластьКлассификаторыТаблицейСтрока = Макет.ПолучитьОбласть("КлассификаторыТаблицейПравоСтрока");
	//						ОбластьКлассификаторыТаблицейСтрока.Параметры.КлассификаторыПравоРеквизит = СтруктураЗначения.ЗначениеПредставление;
	//						
	//						Если СтруктураЗначения.Включен Тогда
	//							Картинка = БиблиотекаКартинок.CRM_УстановитьФлажки;	
	//						Иначе
	//							Картинка = БиблиотекаКартинок.CRM_СнятьФлажки;	
	//						КонецЕсли;
	//						
	//						ОбластьКлассификаторыТаблицейСтрока.Область("КлассификаторыТаблицейПравоКартинка").Картинка = Картинка;
	//						ОбластьКлассификаторыТаблицейСтрока.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
	//						
	//						УстановитьЦветФонаОбласти(ОбластьКлассификаторыТаблицейСтрока, ЦветФона);	
	//						ТабличныйДокументПраво.Вывести(ОбластьКлассификаторыТаблицейСтрока);		   
	//						
	//					КонецЦикла;
	//					
	//				КонецЕсли;
	//				
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//	
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	//#КонецОбласти
	//		
	//ТабличныйДокументКолонки.Присоединить(ТабличныйДокументПраво);
	//
	//#КонецОбласти
	//	
	//ТабличныйДокументКарточка.Вывести(ТабличныйДокументКолонки);
	//
	//Возврат ТабличныйДокументКарточка;
	
КонецФункции

Функция ТекстЗначенияНеЗаполнен(ИмяРаздела)

	//Если ИмяРаздела = "Наименование" Тогда
	//	Возврат НСтр("ru = '<не указано>'");	
	//ИначеЕсли ИмяРаздела = "НаименованиеПолное" Тогда
	//	Возврат НСтр("ru = '<не указано>'");
	//ИначеЕсли ИмяРаздела = "БизнесРегион" Тогда
	//	Возврат НСтр("ru = '<не указан>'");
	//ИначеЕсли ИмяРаздела = "CRM_ТипыОтношений" Тогда
	//	Возврат НСтр("ru = '<не указаны>'");
	//ИначеЕсли ИмяРаздела = "CRM_Важность" Тогда
	//	Возврат НСтр("ru = '<не указан>'");
	//ИначеЕсли ИмяРаздела = "CRM_СтатусРаботы" Тогда
	//	Возврат НСтр("ru = '<не указан>'");
	//ИначеЕсли ИмяРаздела = "Комментарий" Тогда
	//	Возврат НСтр("ru = '<не указан>'");
	//ИначеЕсли ИмяРаздела = "КонтактнаяИнформация" Тогда
	//	Возврат НСтр("ru = '<значение не задано>'");
	//ИначеЕсли ИмяРаздела = "ДоступныеОрганизации" Тогда
	//	Возврат НСтр("ru = '<не указаны>'");
	//ИначеЕсли ИмяРаздела = "КлассификаторыЛево" Тогда
	//	Возврат НСтр("ru = '<значения не заданы>'");	
	//ИначеЕсли ИмяРаздела = "КлассификаторыПраво" Тогда
	//	Возврат НСтр("ru = '<значения не заданы>'");	
	//ИначеЕсли ИмяРаздела = "ДополнительныеРеквизитыЛево" Тогда
	//	Возврат НСтр("ru = '<значение не задано>'");		
	//ИначеЕсли ИмяРаздела = "ДополнительныеРеквизитыПраво" Тогда
	//	Возврат НСтр("ru = '<значение не задано>'");	
	//	
	//КонецЕсли;
	
КонецФункции

Процедура УстановитьЦветФонаОбласти(ИсходнаяОбласть, ЦветФона)

	//Если ЦветФона <> Неопределено Тогда
	//	ВсяОбласть	     = ИсходнаяОбласть.Область();
	//	Область   	     = ИсходнаяОбласть.Область(1, 2, 1, ВсяОбласть.Право - 1);
	//	Область.ЦветФона = ЦветФона;
	//	
	//КонецЕсли;

КонецПроцедуры

Процедура ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокумент, Макет, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита = Неопределено, НовоеИмяРаздела = Неопределено, ТолькоЗаполненные = Ложь, ЦветФона  = Неопределено)
	
	//ОбластьСтрока = Макет.ПолучитьОбласть(ИмяРаздела + "Строка");
	//	
	//Если ТекстЗаголовкаРеквизита <> Неопределено Тогда 
	//	ОбластьСтрока.Параметры[ИмяРаздела + "Реквизит"] = Строка(ТекстЗаголовкаРеквизита) + ":";
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(ТекстЗначенияРеквизита) Тогда 
	//	ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияРеквизита;
	//Иначе
	//	Если Не ТолькоЗаполненные Тогда
	//		ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияНеЗаполнен(ИмяРаздела);
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если НовоеИмяРаздела = Неопределено Тогда 
	//	ОбластьСтрока.Параметры.Расшифровка = ИмяРаздела;
	//Иначе
	//	ОбластьСтрока.Параметры.Расшифровка = НовоеИмяРаздела;
	//КонецЕсли;
	//
	//УстановитьЦветФонаОбласти(ОбластьСтрока, ЦветФона);	
	//ТабличныйДокумент.Вывести(ОбластьСтрока);
	//
	//КоличествоДополнительныхСтрок = 0;
	//
	//КоличествоДополнительныхСтрок = КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита);
	//
	//Счетчик = КоличествоДополнительныхСтрок;
	//ОбластьДопСтрока = Макет.ПолучитьОбласть(ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела));
	//УстановитьЦветФонаОбласти(ОбластьДопСтрока, ЦветФона);	
	//
	//Пока Счетчик > 0 Цикл
	//	Счетчик = Счетчик - 1;
	//	ТабличныйДокумент.Вывести(ОбластьДопСтрока);
	//КонецЦикла;
	//
	//ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяРаздела + "Строка", КоличествоДополнительныхСтрок);
	//                                                                                                           		
КонецПроцедуры

Процедура ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяОбласти, КоличествоДопСтрок)
	
	//Если КоличествоДопСтрок = 0 Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//Область = ТабличныйДокумент.Область(ИмяОбласти);
	//Область.Разъединить();
	//Область.Имя = Неопределено;
	//АдресОбласти = Область.Имя;
	//СтруктураАдреса = СтруктураАдреса(АдресОбласти);
	//
	//АдресКолонкиЗаголовкаНачало = СтруктураАдреса.АдресКолонкиНачало + 1; // + 1, т.к. слева колонка-отступ
	//АдресКолонкиЗаголовкаКонец = АдресКолонкиЗаголовкаНачало + 7; // +7, т.к. заголовок занимает 8 колонок
	//АдресКолонкиЗначенияНачало = АдресКолонкиЗаголовкаКонец + 1;
	//
	//// В левой колонке карточки разность должна быть равна 20, в правой - 21
	//Если СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 20 Тогда
	//	АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец;
	//ИначеЕсли СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 21 Тогда
	//	АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец - 1;
	//КонецЕсли;
	//
	//АдресСтрокиНачало = СтруктураАдреса.АдресСтрокиНачало; 
	//АдресСтрокиКонец = СтруктураАдреса.АдресСтрокиКонец;
	//
	////Для заголовка
	//НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗаголовкаНачало + ":" 
	//			+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗаголовкаКонец;
	//Область = ТабличныйДокумент.Область(НовыйАдрес);	
	//Область.Объединить();
	//
	////Для значения
	//НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗначенияНачало + ":" 
	//			+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗначенияКонец;
	//Область = ТабличныйДокумент.Область(НовыйАдрес);	
	//Область.Объединить();
	
КонецПроцедуры

Функция СтруктураАдреса(Адрес)
	
	//МассивАдресОбласти = СтрРазделить(Адрес, ":");
	//Если МассивАдресОбласти.Количество() <> 2 Тогда
	//	// Это значит, что строка состоит из одной колонки, процедура объединения с такими не работает
	//	Возврат Неопределено;
	//КонецЕсли;
	//
	//АдресНачало = МассивАдресОбласти[0];
	//МассивАдресНачало = СтрРазделить(АдресНачало, "C");
	//АдресСтрокиНачало = СтрЗаменить(МассивАдресНачало[0], "R", "");
	//АдресКолонкиНачало = МассивАдресНачало[1];
	//
	//АдресКонец = МассивАдресОбласти[1];
	//МассивАдресКонец = СтрРазделить(АдресКонец, "C");
	//АдресСтрокиКонец = СтрЗаменить(МассивАдресКонец[0], "R", "");
	//АдресКолонкиКонец = МассивАдресКонец[1];

	//СтруктураАдреса = Новый Структура;
	//СтруктураАдреса.Вставить("АдресСтрокиНачало", 	Число(АдресСтрокиНачало));
	//СтруктураАдреса.Вставить("АдресКолонкиНачало", 	Число(АдресКолонкиНачало));
	//СтруктураАдреса.Вставить("АдресСтрокиКонец", 	Число(АдресСтрокиКонец));
	//СтруктураАдреса.Вставить("АдресКолонкиКонец", 	Число(АдресКолонкиКонец));
	//
	//Возврат СтруктураАдреса;
	
КонецФункции

Функция ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела)
		
	//Если ИмяРаздела = "Классификаторы"
	//	Или ИмяРаздела = "БизнесРегион"
	//	Или ИмяРаздела = "CRM_ТипыОтношений"
	//	Или ИмяРаздела = "CRM_Важность"
	//	Или ИмяРаздела = "CRM_СтатусРаботы"
	//	Или ИмяРаздела = "Комментарий"
	//	Или ИмяРаздела = "КонтактнаяИнформация"
	//	Или ИмяРаздела = "Классификаторы" Тогда
	//	Возврат "ДопСтрокаЛево";
	//Иначе
	//	Возврат "ДопСтрокаПраво";
	//КонецЕсли;
	
КонецФункции

Функция КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗаполненияЗначения, ТекстЗаполненияРеквизита)
	
	//ШиринаКолонки = 2.38;
	//КоличествоКолонокВЗначенииРеквизита = 12;
	//ШиринаЗначенияРеквизита = КоличествоКолонокВЗначенииРеквизита * ШиринаКолонки;
	//ЧислоСтрокЗначения = КоличествоСтрок(ШиринаЗначенияРеквизита, ТекстЗаполненияЗначения);
	//	
	//ЧислоСтрокСвойства = 0;
	//Если ЗначениеЗаполнено(ТекстЗаполненияРеквизита) Тогда
	//	КоличествоКолонокВЗаголовкеРеквизита = 8;
	//	ШиринаЗаголовкаРеквизита = ШиринаКолонки * КоличествоКолонокВЗаголовкеРеквизита;
	//	ЧислоСтрокСвойства = КоличествоСтрок(ШиринаЗаголовкаРеквизита, ТекстЗаполненияРеквизита);
	//КонецЕсли;
	//
	//ЧислоСтрок = Макс(ЧислоСтрокЗначения, ЧислоСтрокСвойства);
	//
	//Если ЧислоСтрок = 0 Тогда 
	//	Возврат 0;
	//КонецЕсли;
	//
	//Возврат ЧислоСтрок - 1;	
	
КонецФункции

Функция КоличествоСтрок(ШиринаОбласти, Строка)
	
	// Если Не ЗначениеЗаполнено(Строка) Тогда 
	//	Возврат 0;
	//КонецЕсли;
	//
	//СредняяШиринаСимвола = 0.75;
	//
	//МассивСлов = СтрРазделить(Строка, " ");
	//	
	//КоличествоСтрок = 1; // = 1, т.к. проверку на заполненность мы сделали выше, а значит одна строка нужна точно
	//ТекущаяСтрока = "";
	//
	//Для Каждого Слово Из МассивСлов Цикл
	//	
	//	ТекущаяСтрока = ТекущаяСтрока + Слово + " ";
	//	Если СтрДлина(ТекущаяСтрока) * СредняяШиринаСимвола > ШиринаОбласти Тогда
	//		КоличествоСтрок = КоличествоСтрок + 1;
	//		ТекущаяСтрока = Слово + " ";
	//	КонецЕсли;
	//	
	//КонецЦикла;	 
	// 	 
	//Возврат КоличествоСтрок;
	
КонецФункции

Функция РазделВиден(ИмяРаздела, СтруктураВидимости)
	
	//Видимость = Истина;
	//Если СтруктураВидимости.Свойство(ИмяРаздела) Тогда 
	//	Видимость = СтруктураВидимости[ИмяРаздела];	
	//КонецЕсли;
	//
	//Возврат Видимость;
	
КонецФункции

Функция ГлаваВидна(ИмяГлавы, СтруктураВидимости, КоличествоДопРеквизитов = 0, КоличествоЗначенийКлассификаторов = 0)
	
	//Если ИмяГлавы = "ПортретКлиента" Тогда 
	//	Возврат Истина;
	//КонецЕсли;
	//
	//Если ИмяГлавы = "КонтактнаяИнформация" Тогда
	//	Возврат Истина;
	//КонецЕсли;
		
	//Если ИмяГлавы = "Классификаторы" Тогда
	//	Возврат КоличествоЗначенийКлассификаторов > 0 И ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");		
	//КонецЕсли;
	
	//Если ИмяГлавы = "Менеджеры" Тогда
	//	Возврат СтруктураВидимости[ИмяГлавы];
	//КонецЕсли;	
	
	//Если ИмяГлавы = "ДоступныеОрганизации" Тогда
	//	//{[-](фрагмент удален)Администратор 01.06.2018 11:31:52 ID 000001929
	//	//Возврат Истина;
	//	//}Администратор 01.06.2018 11:31:52
	//	//{[+](фрагмент добавлен), Виноградов Дмитрий 01.06.2018 11:32:23 ID 000001929
	//	Возврат СтруктураВидимости.Свойство(ИмяГлавы) И СтруктураВидимости[ИмяГлавы];
	//	//}Администратор 01.06.2018 11:32:23
	//КонецЕсли;
	
	//Если ИмяГлавы = "ДополнительнаяИнформация" Тогда
	//	Возврат Истина;
	//КонецЕсли;
	//
	//Если ИмяГлавы = "ДополнительныеРеквизиты" Тогда
	//	Возврат КоличествоДопРеквизитов > 0 И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");		
	//КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

#КонецОбласти	
	
#Область МеханизмыНастройкиРаботыСРеквизитами

Функция РеквизитыОтключенныеПоФО() Экспорт
	
	Результат = Новый Массив;
		
	Возврат Результат;
	
КонецФункции

Функция ЗависимостьРеквизитов() Экспорт
												
	// Сформировать таблицу реквизитов для заполнения.
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("ДействиеСРеквизитом");
	
	Реквизиты = Метаданные.Справочники.Партнеры.Реквизиты;	
	Для Каждого Реквизит из Реквизиты Цикл
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит            = Реквизит;
		НоваяСтрока.ДействиеСРеквизитом = "Добавить";

	КонецЦикла;
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу обязательных реквизитов.
// Параметры:
//	ВидНоменклатуры - СправочникОбъект.ВидыНоменклатуры - элемент справочника виды номенклатуры
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с обязательными для заполнения и выводимыми при создании реквизитами
//
Функция ТаблицаНастроекРеквизитов()

	ТаблицаНастроекРеквизитов = Новый ТаблицаЗначений;
	ТаблицаНастроекРеквизитов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));	
		
	Возврат ТаблицаНастроекРеквизитов;
	
КонецФункции

// Возвращает таблицу дополнительные реквизиты партнера
//
// Параметры:
//  ВидНоменклатуры	 - СправочникСсылка.ВидыНоменклатуры 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//		* ИмяРеквизита - Строка - наименование свойства
//		* ПредставлениеРеквизита - Строка - заголовок свойства
//		* ЭтоДопРеквизит - Булево - всегда ИСТИНА
//		* ЭтоОбщийРеквизит - Булево - признак, что доп. реквизит входит в набор Справочник_Номенклатура_Общие
//		* ЗаполнятьОбязательно - Булево
//		* НаборСвойств - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - набор свойств, для которого был создан доп. реквизит
//		* Тип - ОписаниеТипов
//
Функция ВсеДополнительныеРеквизиты() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Свойство");
		Таблица.Колонки.Добавить("ЭтоДопРеквизит");
		Возврат Таблица;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка КАК Набор,
	|	ДополнительныеРеквизиты.Свойство.Наименование КАК ИмяРеквизита,
	|	ДополнительныеРеквизиты.Свойство.Заголовок КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ВЫБОР
	|		КОГДА ДополнительныеРеквизиты.Ссылка = &ОбщийНабор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОбщийРеквизит,
	|	ДополнительныеРеквизиты.Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
	|	ДополнительныеРеквизиты.Свойство.НаборСвойств КАК НаборСвойств,
	|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК Тип
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	(ДополнительныеРеквизиты.Ссылка = &ОбщийНабор
	|	ИЛИ ДополнительныеРеквизиты.Ссылка = &НаборВида)";
		
	ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие)";
	НаборВида = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Компании_CRM)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбщийНабор", ОбщийНабор);  	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НаборВида", НаборВида);  	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	 
КонецФункции

Функция ПравоДоступаНаОбъектМетаданныхПоРеквизиту(Право, РеквизитОбъектМетаданных)

	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивтиповДляПроверки = РеквизитОбъектМетаданных.Тип.Типы();
	Для Каждого Тип Из МассивтиповДляПроверки Цикл
		
		Если вогОбщегоНазначения.ЭтоПримитивныйТип(Тип) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных <> Неопределено
			И Не ПравоДоступа(Право, ОбъектМетаданных) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ВидимостьРеквизита(Реквизит, ИмяРеквизита, РеквизитыОтключенныеПоФО, РежимВидимостиПоказатьТолькоВажные,
	ТаблицаОбязательныхРеквизитов)
	
	Если Не ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Возврат ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Реквизит)
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или ТаблицаОбязательныхРеквизитов.Найти(ИмяРеквизита, "Наименование") <> Неопределено)
	Иначе
		Возврат ПравоДоступа("Просмотр", Метаданные.Справочники.Партнеры.Реквизиты[ИмяРеквизита])
				И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Метаданные.Справочники.Партнеры.Реквизиты[ИмяРеквизита])
				И РеквизитыОтключенныеПоФО.Найти(ИмяРеквизита) = Неопределено
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или ТаблицаОбязательныхРеквизитов.Найти(ИмяРеквизита, "Наименование") <> Неопределено)
	КонецЕсли;
	
КонецФункции

// Возвращает структуру с видимостью элементов.
// Параметры:
//	Объект - СправочникОбъект.Партнеры - элемент справочника номенклатуры
//	РежимВидимостиПоказатьТолькоВажные - Булево - признак отображения основных реквизитов
//
// Возвращаемое значение:
//	Структура - струтура видимости элементов. Ключ - имя элемента, значения - видимость
//
Функция СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные)
	
	СтруктураВидимости = Новый Структура;
	
	#Область ФункциональныеОпции
	
	ИспользоватьСегментыПартнеров = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьСегментацию");
	ИспользоватьКлассификаторы	  = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");
	
	#КонецОбласти
	
	#Область ПризнакиТипаОтношений
	
	ЭтоКлиент = (Объект.вогТипыОтношений.НайтиСтроки(Новый Структура("ТипОтношений", Справочники.CRM_ТипыОтношений.Клиент)).Количество() > 0);	
	
	#КонецОбласти
	
	РеквизитыОтключенныеПоФО  = РеквизитыОтключенныеПоФО();
	ТаблицаОбязательныхРеквизитов = ТаблицаНастроекРеквизитов();
	
	НастройкиРеквизитов = ЗависимостьРеквизитов();
																
	Для Каждого СтрТабл из НастройкиРеквизитов Цикл
		ИмяРеквизита = СтрТабл.Реквизит.Имя;
		Если ИмяРеквизита = "CRM_Фотография" Тогда
			ИмяРеквизита = "ФайлКартинки";
		КонецЕсли;
		
		СтруктураВидимости.Вставить(ИмяРеквизита, СтрТабл.ДействиеСРеквизитом = "Добавить"
			И ВидимостьРеквизита(ИмяРеквизита,
							СтрТабл.Реквизит.Имя,
							РеквизитыОтключенныеПоФО,
							РежимВидимостиПоказатьТолькоВажные,
							ТаблицаОбязательныхРеквизитов));
	КонецЦикла;
	
	СтруктураВидимости.Вставить("ГруппаОбязательныеПоля", РежимВидимостиПоказатьТолькоВажные);
	
	#Область ПортретКлиента
	
	ГиперссылкаПерейтиФайлыВидимость = ПравоДоступа("Просмотр", Метаданные.Справочники.ПартнерыПрисоединенныеФайлы)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	ВидимостьКомандФайлаКартинки = ВидимостьРеквизита("ФайлКартинки",
									"CRM_Фотография",
									РеквизитыОтключенныеПоФО,
									РежимВидимостиПоказатьТолькоВажные,
									ТаблицаОбязательныхРеквизитов);
									
	//СтруктураВидимости.Вставить("ГиперссылкаПерейтиИзображения", ГиперссылкаПерейтиФайлыВидимость 
	//	И вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка));
	
	//СтруктураВидимости.Вставить("ГиперссылкаПерейтиФайлы", ГиперссылкаПерейтиФайлыВидимость);
	
	СтруктураВидимости.Вставить("ДобавитьИзображение", ВидимостьКомандФайлаКартинки);
	СтруктураВидимости.Вставить("ОчиститьИзображение", ВидимостьКомандФайлаКартинки);
	СтруктураВидимости.Вставить("ИзменитьИзображение", ЗначениеЗаполнено(Объект.Ссылка));
	СтруктураВидимости.Вставить("ПросмотретьИзображение", ЗначениеЗаполнено(Объект.Ссылка));
	СтруктураВидимости.Вставить("ВыбратьКартинкуИзПрисоединенныхФайлов", ЗначениеЗаполнено(Объект.Ссылка));
	
	// ++ Тищенко В.В. 10.01.2019
	// Настройка видимости реквизитов
	СтруктураВидимости.Вставить("CRM_ТипыОтношений", Истина);
	СтруктураВидимости.БизнесРегион = Ложь;
	// -- Тищенко В.В. 
	
	
	//ГиперссылкаПерейтиСегментыВидимость = ИспользоватьСегментыПартнеров
	//	И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПартнерыСегмента)
	//	И Не РежимВидимостиПоказатьТолькоВажные;
	
	//СтруктураВидимости.Вставить("ГиперссылкаПерейтиСегменты", 
	//	ГиперссылкаПерейтиСегментыВидимость);
		
	//ГиперссылкаПерейтиДоговорыКлиентаВидимость = Не РежимВидимостиПоказатьТолькоВажные
	//	И ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов);
		
	//СтруктураВидимости.Вставить("ГиперссылкаПерейтиДоговорыКлиента", 
	//	ГиперссылкаПерейтиДоговорыКлиентаВидимость);
		
	//{[-](фрагмент удален)Администратор 31.05.2018 12:14:41 ID 000001923
	//ГиперссылкаПерейтиБанковскиеСчетаВидимость = Не РежимВидимостиПоказатьТолькоВажные
	//	И ПравоДоступа("Просмотр", Метаданные.Справочники.БанковскиеСчета);
	//}Администратор 31.05.2018 12:14:41
	//{[+](фрагмент добавлен), Виноградов Дмитрий 31.05.2018 12:17:30 ID 000001923
	//ГиперссылкаПерейтиБанковскиеСчетаВидимость = Ложь;
	////}Администратор 31.05.2018 12:17:30
	//СтруктураВидимости.Вставить("ГиперссылкаПерейтиБанковскиеСчета", 
	//	ГиперссылкаПерейтиБанковскиеСчетаВидимость);
		
	#КонецОбласти

	#Область КонтактнаяИнформация
	
	СтруктураВидимости.Вставить("РедактироватьКонтактныеДанные",  Истина);
	
	//ГиперссылкаПерейтиКонтактыВидимость = Не РежимВидимостиПоказатьТолькоВажные
	//	И ПравоДоступа("Просмотр", Метаданные.Справочники.КонтактныеЛицаПартнеров);
	//
	//СтруктураВидимости.Вставить("ГиперссылкаПерейтиКонтакты",
	//	ГиперссылкаПерейтиКонтактыВидимость);
		
	//ГиперссылкаПерейтиЮрЛицаВидимость = Не РежимВидимостиПоказатьТолькоВажные
	//	И ПравоДоступа("Просмотр", Метаданные.Справочники.вогЮридическиеЛица)
	//	И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.вогСвязиПартнеров);
	
	//СтруктураВидимости.Вставить("ГиперссылкаПерейтиЮрЛица",
	//	ГиперссылкаПерейтиЮрЛицаВидимость);
		
	//ГиперссылкаПерейтиТорговыеТочкиВидимость = ЭтоКлиент
	//	И ПравоДоступа("Просмотр", Метаданные.Справочники.вогТорговыеТочки)
	//	И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.вогСвязиПартнеров)
	//	И Не РежимВидимостиПоказатьТолькоВажные;
				
	//СтруктураВидимости.Вставить("ГиперссылкаПерейтиТорговыеТочки",
	//	ГиперссылкаПерейтиТорговыеТочкиВидимость);
				
	#КонецОбласти
	
	#Область Классификаторы
	
	//ГиперссылкаПерейтиЗначенияКлассификаторовВидимость = ИспользоватьКлассификаторы
	//	И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов)
	//	И ЗначениеЗаполнено(Объект.Ссылка)
	//	И Не РежимВидимостиПоказатьТолькоВажные;
	//
	//СтруктураВидимости.Вставить("ГиперссылкаПерейтиЗначенияКлассификаторов", 
	//	ГиперссылкаПерейтиЗначенияКлассификаторовВидимость);
	
	#КонецОбласти
	
	#Область Менеджеры
	
	//МенеджерыВидимость = ЭтоКлиент
	//	И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.вогМенеджерыОбъектов)
	//	И Не РежимВидимостиПоказатьТолькоВажные;
	//	
	//СтруктураВидимости.Вставить("Менеджеры", Истина);
		
	#КонецОбласти
	
	#Область ДоступныеОрганизации
	//{[-](фрагмент удален)Администратор 01.06.2018 11:21:37 ID 000001929
	//СтруктураВидимости.Вставить("ДоступныеОрганизации", Не РежимВидимостиПоказатьТолькоВажные);
	//}Администратор 01.06.2018 11:21:37
	//{[+](фрагмент добавлен), Виноградов Дмитрий 01.06.2018 11:28:13 ID 000001929
	//СтруктураВидимости.Вставить("ДоступныеОрганизации", Ложь);
	//СтруктураВидимости.Вставить("ДоступныеПодразделения",  Истина);
	//}Администратор 01.06.2018 11:28:13
		
	#КонецОбласти
	
	#Область ДополнительнаяИнформация
		
	//СтруктураВидимости.Вставить("ДополнительнаяИнформация", Не РежимВидимостиПоказатьТолькоВажные);
	//
	//ГиперссылкаПерейтиИсторияРеквизитовВидимость = ПолучитьФункциональнуюОпцию("CRM_ВестиИсториюРеквизитовКлиентов")
	//	И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.CRM_ИсторияРеквизитовПартнеров)
	//	И ЗначениеЗаполнено(Объект.Ссылка)
	//	И Не РежимВидимостиПоказатьТолькоВажные;
	//
	//СтруктураВидимости.Вставить("ГиперссылкаПерейтиИсторияРеквизитов", 
	//	ГиперссылкаПерейтиИсторияРеквизитовВидимость);
	
	#КонецОбласти
		
	#Область ДополнительныеРеквизиты

	// Установка видимости для дополнительных реквизитов.
	//ВсеДополнительныеРеквизитыПартнера = ВсеДополнительныеРеквизиты();
	//Для Каждого СтрокаТаблицыДопРеквизитов Из ВсеДополнительныеРеквизитыПартнера Цикл
	//	ИмяРеквизита     = СтрокаТаблицыДопРеквизитов.ИмяРеквизита;
	//	ИмяЭлементаФормы = "ДополнительныйРеквизитЗначение_"
	//		+ СтрЗаменить(?(СтрокаТаблицыДопРеквизитов.ЭтоОбщийРеквизит,
	//				ВРег(Строка(СтрокаТаблицыДопРеквизитов.Набор.УникальныйИдентификатор())),
	//				ВРег(Строка(СтрокаТаблицыДопРеквизитов.НаборСвойств.УникальныйИдентификатор()))),
	//			"-",
	//			"x")
	//		+ "_"
	//		+ СтрЗаменить(ВРег(Строка(СтрокаТаблицыДопРеквизитов.Свойство.УникальныйИдентификатор())), "-", "x");
	//	
	//	СтруктураВидимости.Вставить(ИмяЭлементаФормы, ВидимостьРеквизита(СтрокаТаблицыДопРеквизитов,
	//																		ИмяРеквизита,
	//																		РеквизитыОтключенныеПоФО,
	//																		РежимВидимостиПоказатьТолькоВажные,
	//																		ТаблицаОбязательныхРеквизитов));
	//	
	//КонецЦикла;

	#КонецОбласти
			
	Возврат СтруктураВидимости;
	
КонецФункции

// Возвращает структуру с заголовками элементов.
// Параметры:
//	Объект - СправочникОбъект.Партнеры - элемент справочника номенклатуры
//	СтруктураВидимостиЭлементов - Структура - струтура видимости элементов
//
// Возвращаемое значение:
//	Структура - струтура заголовков элементов. Ключ - имя элемента, значения - заголовок
//
Функция СтруктураЗаголовковЭлементовФормы(Объект, СтруктураВидимостиЭлементов)
	
	ИмяСправочникаХранилищаФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(Объект.Ссылка);
	ПолноеИмяСправочника = "Справочник." + ИмяСправочникаХранилищаФайлов;
	
	СтруктураЗаголовков = Новый Структура;
			
	#Область ЗаголовокиГиперссылок
		
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//|ГДЕ
	//|	ДоговорыКонтрагентов.Владелец = &Партнер
	//|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	БанковскиеСчета.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	//|ГДЕ
	//|	БанковскиеСчета.Владелец = &Партнер
	//|	И НЕ БанковскиеСчета.ПометкаУдаления
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	//|ГДЕ
	//|	КонтактныеЛицаПартнеров.Ссылка В
	//|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|				СвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо КАК КонтактноеЛицо
	//|			ИЗ
	//|				РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних(, ОбъектСвязи = &Партнер) КАК СвязиКонтактныхЛицСрезПоследних
	//|			ГДЕ
	//|				СвязиКонтактныхЛицСрезПоследних.ВидСвязи <> ЗНАЧЕНИЕ(Справочник.вогВидыСвязейКонтактныхЛиц.НеСвязан))
	//|	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ПартнерыПрисоединенныеФайлы.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.ПартнерыПрисоединенныеФайлы КАК ПартнерыПрисоединенныеФайлы
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК ПрисоедниненныеФайлыОбъектовПоВидам
	//|		ПО ПартнерыПрисоединенныеФайлы.Ссылка = ПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл
	//|ГДЕ
	//|	ПартнерыПрисоединенныеФайлы.ВладелецФайла = &Партнер
	//|	И НЕ ПартнерыПрисоединенныеФайлы.ПометкаУдаления
	//|	И ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла.ТипФайла = ЗНАЧЕНИЕ(Перечисление.вогТипыПрисоединенныхФайлов.Изображение)
	//|	И ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла.Принадлежность = &Принадлежность
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ПартнерыПрисоединенныеФайлы.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.ПартнерыПрисоединенныеФайлы КАК ПартнерыПрисоединенныеФайлы
	//|ГДЕ
	//|	ПартнерыПрисоединенныеФайлы.ВладелецФайла = &Партнер
	//|	И НЕ ПартнерыПрисоединенныеФайлы.ПометкаУдаления
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ПартнерыСегмента.Сегмент КАК Сегмент
	//|ИЗ
	//|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	//|ГДЕ
	//|	ПартнерыСегмента.Партнер = &Партнер
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора
	//|ИЗ
	//|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК ОбъектыЗначенийКлассификаторов
	//|ГДЕ
	//|	ОбъектыЗначенийКлассификаторов.Объект = &Партнер
	//|	И ОбъектыЗначенийКлассификаторов.Аналитика В(&ЗначенияИспользуемыхАналитик)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ТорговыеТочки.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.вогТорговыеТочки КАК ТорговыеТочки
	//|ГДЕ
	//|	ТорговыеТочки.Партнер = &Партнер
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЮридическиеЛица.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.вогЮридическиеЛица КАК ЮридическиеЛица
	//|ГДЕ
	//|	ЮридическиеЛица.Партнер = &Партнер";
	//
	//Запрос.УстановитьПараметр("Партнер", Объект.Ссылка);
	//Запрос.УстановитьПараметр("Принадлежность", ПолноеИмяСправочника);
	//Запрос.УстановитьПараметр("ЗначенияИспользуемыхАналитик", CRM_КлассификаторыВызовСервера.ЗначенияИспользуемыхАналитикКлассификаторов().МассивЗначений);
	//	
	//УстановитьПривилегированныйРежим(Истина);
	//
	//Выборки = Запрос.ВыполнитьПакет();
	//
	//УстановитьПривилегированныйРежим(Ложь);
	//ВидимостьЭлемента = Ложь;
	//			
	//Если РазделВиден("ГиперссылкаПерейтиДоговорыКлиента", СтруктураВидимостиЭлементов) Тогда
	//	Количество = Выборки[0].Выбрать().Количество();
	//	ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Договоры'") + " (" + Количество + ")",,,,"ДоговорыКлиента");
	//	СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиДоговорыКлиента", ЗаголовокГиперссылки);
	//КонецЕсли;
	//
	//Если РазделВиден("ГиперссылкаПерейтиБанковскиеСчета", СтруктураВидимостиЭлементов) Тогда
	//	Количество = Выборки[1].Выбрать().Количество();
	//	ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Банковские счета'") + " (" + Количество + ")",,,,"БанковскиеСчета");
	//	СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиБанковскиеСчета", ЗаголовокГиперссылки);
	//КонецЕсли;
	//
	//Если РазделВиден("ГиперссылкаПерейтиКонтакты", СтруктураВидимостиЭлементов) Тогда
	//	Количество = Выборки[2].Выбрать().Количество();
	//	ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Контакты'") + " (" + Количество + ")",,,,"Контакты");
	//	СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиКонтакты", ЗаголовокГиперссылки);
	//КонецЕсли;
	//
	//Если РазделВиден("ГиперссылкаПерейтиИзображения", СтруктураВидимостиЭлементов) Тогда
	//	Количество = Выборки[3].Выбрать().Количество();
	//	ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Изображения'") + " (" + Количество + ")",,,,"Файлы");
	//	СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиИзображения", ЗаголовокГиперссылки);		
	//КонецЕсли;
	//
	//Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимостиЭлементов) Тогда
	//	Количество = Выборки[4].Выбрать().Количество();
	//	ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Все файлы'") + " (" + Количество + ")",,,,"Файлы");
	//	СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиФайлы", ЗаголовокГиперссылки);		
	//КонецЕсли;
	//
	//Если РазделВиден("ГиперссылкаПерейтиСегменты", СтруктураВидимостиЭлементов) Тогда
	//	Количество = Выборки[5].Выбрать().Количество();
	//	ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Сегменты'") + " (" + Количество + ")",,,,"Сегменты");
	//	СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиСегменты", ЗаголовокГиперссылки);
	//КонецЕсли;
	//
	//Если РазделВиден("ГиперссылкаПерейтиЗначенияКлассификаторов", СтруктураВидимостиЭлементов) Тогда
	//	Количество = Выборки[6].Выбрать().Количество();
	//	ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Значения классификаторов'") + " (" + Количество + ")",,,,"ЗначенияКлассификаторов");
	//	СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиЗначенияКлассификаторов", ЗаголовокГиперссылки);
	//КонецЕсли;
	//
	//Если РазделВиден("ГиперссылкаПерейтиТорговыеТочки", СтруктураВидимостиЭлементов) Тогда
	//	Количество = Выборки[7].Выбрать().Количество();
	//	ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Торговые точки'") + " (" + Количество + ")",,,,"ТорговыеТочки");
	//	СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиТорговыеТочки", ЗаголовокГиперссылки);
	//КонецЕсли;
	//
	//Если РазделВиден("ГиперссылкаПерейтиЮрЛица", СтруктураВидимостиЭлементов) Тогда
	//	Количество = Выборки[8].Выбрать().Количество();
	//	ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Юр. лица'") + " (" + Количество + ")",,,,"ЮрЛица");
	//	СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиЮрЛица", ЗаголовокГиперссылки);
	//КонецЕсли;
	
	#КонецОбласти
	
	Возврат СтруктураЗаголовков;

КонецФункции

#КонецОбласти

#КонецЕсли

//-вог

// -CRM не переносить в объединенные решения  ВЕСЬ МОДУЛЬ
