// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ОтключитьЗаполнениеПоИНН;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ТекущийПользователь = Пользователи.ТекущийПользователь();		
	
	ТорговаяТочкаВариантАдреса = "АдресПартнера";
	Элементы.СтраницыТорговаяТочкаАдрес.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	УстановитьВариантАдресаТорговойТочки(ЭтотОбъект);
	
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		ЗначенияЗаполнения = Параметры.ЗначенияЗаполнения;
		Если ЗначенияЗаполнения.Свойство("Родитель") Тогда
			ПартнерРодитель = ЗначенияЗаполнения.Родитель;
		КонецЕсли;
		
		Если ЗначенияЗаполнения.Свойство("ТипОтношений") Тогда
			ТипОтношений = ЗначенияЗаполнения.ТипОтношений;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Основание") Тогда
		
		Основание = Параметры.Основание;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ПартнерEmail 			= Основание.ОтправительАдрес;	
			КонтактноеЛицоВидEmail	= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
			КонтактноеЛицоEmail		= Основание.ОтправительАдрес;
			
			ОткрытьКарточкуКлиента = Ложь;
			ИсточникСоздания 	   = Основание;
		КонецЕсли;
		
	КонецЕсли;
		
	//Начало СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ИнициализироватьРеквизитыФормыКонтрагент(ЭтотОбъект);
	РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется = Ложь;
	//	ПроверкаКонтрагентовКлиентСервер.ПроверитьКонтрагентаИзКарточки(Форма, Истина);
	//	
	//Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	вогЗаполнитьВсеТипыОтношенийСервер();
	вогЗаполнитьТипыОтношений(ЭтаФорма);
	
	ПолучитьПараметрыБизнесРегиона();
	ОбновитьПараметрыРынкаТорговаяТочка();
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
	//{[+](фрагмент добавлен), Виноградов Дмитрий 03.07.2018 11:59:13 ID
	//+Рабочий стол
	скРабочийСтолСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ);
	//-Рабочий стол
	//}Администратор 03.07.2018 11:59:13
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		Для каждого КлючЗначение Из Настройки Цикл
			Если СтрНайти(КлючЗначение.Ключ, "Адрес") > 0 Тогда
				ЗаполнитьКИ_Описание(КлючЗначение.Ключ);	
				
			КонецЕсли;
		
		КонецЦикла;	
	
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	//Партнер
	Если ЗначениеЗаполнено(ПартнерВидТелефона) Тогда
		ПроверяемыеРеквизиты.Добавить("ПартнерТелефон");	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПартнерВидEmail) Тогда
		ПроверяемыеРеквизиты.Добавить("ПартнерEmail");	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Партнер_ВидАдреса) Тогда
		ПроверяемыеРеквизиты.Добавить("Партнер_Адрес");	
	КонецЕсли;
	
	//КонтактноеЛицо
	Если ИспользоватьКонтактноеЛицо Тогда
		ПроверяемыеРеквизиты.Добавить("КонтактноеЛицоФамилия");	
		ПроверяемыеРеквизиты.Добавить("КонтактноеЛицоИмя");	
		
		Если ЗначениеЗаполнено(КонтактноеЛицоВидТелефона) Тогда
			ПроверяемыеРеквизиты.Добавить("КонтактноеЛицоТелефон");	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КонтактноеЛицоВидEmail) Тогда
			ПроверяемыеРеквизиты.Добавить("КонтактноеЛицоEmail");	
		КонецЕсли;
		
	КонецЕсли;	
		
	//ТорговаяТочка
	Если ИспользоватьТорговуюТочку Тогда
		ПроверяемыеРеквизиты.Добавить("ТорговаяТочкаНаименованиеПолное");	
		ПроверяемыеРеквизиты.Добавить("ТорговаяТочкаВид");	
		
		Если ЗначениеЗаполнено(ТорговаяТочкаВидТелефона) Тогда
			ПроверяемыеРеквизиты.Добавить("ТорговаяТочкаТелефон");	
		КонецЕсли;
		
		Если ТорговаяТочкаВариантАдреса = "АдресРынка" Тогда
			ПроверяемыеРеквизиты.Добавить("ТорговаяТочкаРынок");	
			ПроверяемыеРеквизиты.Добавить("ТорговаяТочкаМестоположениеНаРынке");
			
		ИначеЕсли ТорговаяТочкаВариантАдреса = "Адрес" Тогда
			Если ЗначениеЗаполнено(ТорговаяТочка_ВидАдреса) Тогда
				ПроверяемыеРеквизиты.Добавить("ТорговаяТочка_Адрес");	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//ЮрЛицо
	Если ИспользоватьЮрЛицо Тогда
		ПроверяемыеРеквизиты.Добавить("ЮрЛицоОрганизационноПравоваяФорма");	
		ПроверяемыеРеквизиты.Добавить("ЮрЛицоНаименованиеПолное");	
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Изменение КПП" Тогда
		Если ЭтотОбъект.УникальныйИдентификатор = Источник Тогда 
			КПП = Параметр;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗарегистрироватьКлиента(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		СформироватьОбъектыКлиента();
		
	Иначе	
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьКлиентаЗавершение", ЭтотОбъект);
		НайтиДубли(ОписаниеОповещения);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьКлиентаЗавершение(НайденыДубли, ДополнительныеПараметры) Экспорт
	
	Если НайденыДубли Тогда 
		Возврат; 
	КонецЕсли;
	
	Партнер = СоздатьНовогоПартнера();
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		//ОтобразитьИзменениеДанных(Партнер, ВидИзмененияДанных.Добавление);
		СформироватьОбъектыКлиента();		
		
	КонецЕсли;
	//{[+](фрагмент добавлен), Виноградов Дмитрий 04.07.2018 14:08:08 ID
	Партнер = Неопределено;
	ОчиститьФорму(); 
	//}Администратор 04.07.2018 14:08:08
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьФорму()
	
	МассивПропускаемых = Новый Массив();
	МассивПропускаемых.Добавить("скНастройкиРабочегоСтола");
	МассивПропускаемых.Добавить("скНастройкиРабочегоСтолаТаблицаНапоминаний");
	МассивПропускаемых.Добавить("скТумблерРабочегоСтола");
	МассивПропускаемых.Добавить("скЛоготипРабочегоСтола");
	МассивПропускаемых.Добавить("скПолеHTMLНапоминаний");
	МассивПропускаемых.Добавить("скПолеHTMLЗаметок");
	МассивПропускаемых.Добавить("скПолеHTMLИсторииРаботы");
	
	МассивПропускаемых.Добавить("Объект");
	МассивПропускаемых.Добавить("ОткрытьКарточкуКлиента");
	МассивПропускаемых.Добавить("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов");
	МассивПропускаемых.Добавить("ИсточникСоздания");
	МассивПропускаемых.Добавить("РеквизитыПроверкиКонтрагентов");
	МассивПропускаемых.Добавить("ТекущийПользователь");
	МассивПропускаемых.Добавить("CRM_ВсеТипыОтношений");
	МассивПропускаемых.Добавить("ИмяГруппыСвернутьРазвернуть");
	
	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
		Если МассивПропускаемых.Найти(Реквизит.Имя) = Неопределено Тогда
			
			Если ТипЗнч(ЭтотОбъект[Реквизит.Имя]) <> Тип("ДанныеФормыКоллекция") Тогда
				ЭтаФорма[Реквизит.Имя] = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для каждого локТипОтношений Из CRM_ВсеТипыОтношений Цикл
		локТипОтношений.Пометка = Ложь;		
	КонецЦикла; 
	
КонецПроцедуры
 

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(CRM_ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.CRM_ИНН;
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПартнерНаименование) 
	  ИЛИ ЗначениеЗаполнено(ЮрЛицоНаименованиеПолное) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Перезаполнить текущие реквизиты?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы
&НаКлиенте
Процедура ПартнерНаименованиеПриИзменении(Элемент)
	СформироватьНаименования();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКонтактноеЛицоПриИзменении(Элемент)
	УстановитьВидимостьДоступность(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЮрЛицоПриИзменении(Элемент)
	УстановитьВидимостьДоступность(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьТорговуюТочкуПриИзменении(Элемент)
	
	СформироватьНаименования();
	УстановитьВидимостьДоступность(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочкаВариантАдресаПриИзменении(Элемент)
	УстановитьВариантАдресаТорговойТочки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВидКИПриИзменении(Элемент)
	
	Если СтрНайти(Элемент.Имя, "Адрес") > 0 Тогда
		ЗаполнитьКИ_Описание(Элемент.Имя);	
		
	ИначеЕсли СтрНайти(Элемент.Имя, "Телефон") > 0 Тогда
		ЗаполнитьКодыБизнесРегиона();
		
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	CRM_УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПриИзменении(Элемент)
	
	CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерБизнесРегионПриИзменении(Элемент)
	ЗаполнитьКодыБизнесРегиона();
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоИмяПриИзменении(Элемент)
	КонтактноеЛицоПол = CRM_КлиентыКлиент.ОпределитьПол(КонтактноеЛицоИмя);
КонецПроцедуры

&НаКлиенте
Процедура ЮрЛицоОрганизационноПравоваяФормаПриИзменении(Элемент)
	
	СформироватьНаименования();		
	ЗаполнитьДанныеПравовойФормы();
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(CRM_ИНН) Тогда
		// Если КПП формируется стандартным образом по ИНН, то для КПП берутся 
		// первые 4 цифры ИНН + 01001, например:
		// ИНН 7712563009
		// КПП 771201001
		ЭтоЮрЛицо = (ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания"));
		Если РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(CRM_ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
			CRM_КПП = Лев(CRM_ИНН, 4) + "01001";
		Иначе	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "CRM_ИНН");
			CRM_КПП = "";
		КонецЕсли;
	Иначе
		CRM_КПП = "";
	КонецЕсли;
	
	// Начало СтандартныеПодсистемы.РаботаСКонтрагентами
	ОтключитьЗаполнениеПоИНН = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьЗаполнениеПоИНН", 0.1, Истина);
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)

КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочкаРынокПриИзменении(Элемент)
	ОбновитьПараметрыРынкаТорговаяТочка();	
КонецПроцедуры

#Область ТипыОтношений

&НаКлиенте
Процедура CRM_ТипыОтношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеВыбора		= Новый ОписаниеОповещения("CRM_ОбработкаВыбораТиповОтношений", ЭтотОбъект, ДополнительныеПараметры);
	CRM_ВсеТипыОтношений.ПоказатьОтметкуЭлементов(ОповещениеВыбора, НСтр("ru='Отметьте типы отношений с клиентом'"));
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
Процедура CRM_ОбработкаВыбораТиповОтношений(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	вогЗаполнитьТипыОтношений(ЭтаФорма);
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры // CRM_ОбработкаВыбораТиповОтношений()	

#КонецОбласти

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	ЗаполнитьКИ_Описание(Результат.ИмяРеквизита);
КонецПроцедуры

#КонецОбласти

//{[+](фрагмент добавлен), Виноградов Дмитрий 03.07.2018 12:01:20 ID
//+Рабочий стол

#Область Подключаемый_РабочийСтол
	
&НаКлиенте
Процедура Подключаемый_скТумблерРабочегоСтолаПриИзменении(Элемент)
	скРабочийСтолКлиент.ТумблерРабочегоСтолаПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры // Подключаемый_скТумблерРабочегоСтолаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОбработкаГипперссылкиДействийНажатие(Элемент)
	скРабочийСтолКлиент.ОбработкаГипперссылкиДействийНажатие(ЭтаФорма, Элемент);	
КонецПроцедуры // Подключаемый_ИндикаторНапоминанийНажатие()

&НаКлиенте
Процедура Подключаемый_ОбновитьТаблицуНапоминаний(МассивНапоминаний = Неопределено) Экспорт
	скРабочийСтолКлиент.ОбновитьТаблицуНапоминаний(ЭтаФорма, МассивНапоминаний);
КонецПроцедуры // Подключаемый_ОбновитьТаблицуНапоминаний()

&НаКлиенте
Процедура Подключаемый_НапоминанияСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьНапоминания(ЭтаФорма);	
КонецПроцедуры // Подключаемый_НапоминанияСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПрекратитьВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПрекратитьВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПеренестиВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПеренестиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_ЗаметкиСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьЗаметки(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ЗаметкиСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиВсе(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиВсе()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиДобавить(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиДобавить(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиДобавить()

&НаКлиенте
Процедура Подключаемый_ИсторияРаботыСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьИсториюРаботы(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ИсторияРаботыСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLИсторииРаботыПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLИсторииРаботыПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLИсторииРаботыПриНажатии()

#КонецОбласти

//-Рабочий стол
//}Администратор 03.07.2018 12:01:20

#Область ВспомогательныеПроцедурыФункции

&НаСервере
Процедура ОбновитьПараметрыРынкаТорговаяТочка()	
	
	Если ЗначениеЗаполнено(ТорговаяТочкаРынок) Тогда
		ТорговаяТочкаАдресРынка = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТорговаяТочкаРынок, Справочники.ВидыКонтактнойИнформации.АдресПартнера);		
	Иначе
		ТорговаяТочкаАдресРынка = "";		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПараметрыРынкаОбязательныеПоля()

&НаСервере
Процедура ЗаполнитьКИ_Описание(ИмяЭлемента)
	
	МассивИмени = СтрРазделить(ИмяЭлемента, "_");
	Префикс = МассивИмени[0];
	
	ВидАдреса = ЭтотОбъект[Префикс + "_ВидАдреса"];
	Адрес     = ЭтотОбъект[Префикс + "_Адрес"];
	
	Если ЗначениеЗаполнено(ВидАдреса) Тогда
		СтруктураРеквизитов = Новый Структура;
		//СтруктураРеквизитов.Вставить("РедактированиеТолькоВДиалоге"); // VOG Солодов В.В. 02.03.2020 CRM-196 // Закомментировал
		СтруктураРеквизитов.Вставить("ТолькоНациональныйАдрес");
		СтруктураРеквизитов.Вставить("Тип");
		СтруктураРеквизитов.Вставить("Родитель");
		СтруктураРеквизитов.Вставить("ВидРедактирования"); // VOG Солодов В.В. 02.03.2020 CRM-196
		
		РеквизитыВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидАдреса, СтруктураРеквизитов);
		
		// ++ VOG Солодов В.В. 02.03.2020 CRM-196
		Элементы[Префикс + "_Адрес"].РедактированиеТекста = (НЕ РеквизитыВидаКИ.ВидРедактирования = "Диалог");
		// До изменения
		//Элементы[Префикс + "_Адрес"].РедактированиеТекста = НЕ РеквизитыВидаКИ.РедактированиеТолькоВДиалоге;
		// -- VOG Солодов В.В. 02.03.2020
		Строки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", Префикс + "_Адрес"));
		Если Строки.Количество() = 0 Тогда
			НовСтр = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
			НовСтр.ИмяРеквизита = Префикс + "_Адрес";
		Иначе
			НовСтр = Строки[0];
		КонецЕсли;
		
		НовСтр.ТолькоРоссийский = ВидАдреса.ТолькоНациональныйАдрес;
		НовСтр.Вид              = ВидАдреса;
		НовСтр.Тип              = РеквизитыВидаКИ.Тип;
		НовСтр.Родитель         = РеквизитыВидаКИ.Родитель;
		НовСтр.ТипНомер         = 1;
		НовСтр.Выводить         = Истина;
	
	Иначе
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВариантАдресаТорговойТочки(Форма)
	
	Форма.Элементы.СтраницыТорговаяТочкаАдрес.ТекущаяСтраница = Форма.Элементы["СтраницаТорговаяТочка" + Форма.ТорговаяТочкаВариантАдреса];	
	Форма.Элементы.ТорговаяТочкаАдресРынка.Видимость 	      = Форма.ТорговаяТочкаВариантАдреса = "АдресРынка";
	
КонецПроцедуры // УстановитьВариантАдресаТорговойТочки()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма) 
	
	Элементы = Форма.Элементы;
	
	//Партнер
	Элементы.ПартнерТелефонПоляВвода.Доступность = ЗначениеЗаполнено(Форма.ПартнерВидТелефона);
	Элементы.ПартнерEmail.Доступность 			 = ЗначениеЗаполнено(Форма.ПартнерВидEmail);
	Элементы.Партнер_Адрес.Доступность			 = ЗначениеЗаполнено(Форма.Партнер_ВидАдреса);
	
	//КонтактноеЛицо
	Элементы.ГруппаКонтактноеЛицо.Доступность 			= Форма.ИспользоватьКонтактноеЛицо;
	Элементы.КонтактноеЛицоТелефонПоляВвода.Доступность = ЗначениеЗаполнено(Форма.КонтактноеЛицоВидТелефона);
	Элементы.КонтактноеЛицоEmail.Доступность 			= ЗначениеЗаполнено(Форма.КонтактноеЛицоВидEmail);
	
	//ЮрЛицо
	Элементы.ГруппаЮрЛицо.Доступность = Форма.ИспользоватьЮрЛицо;
	Элементы.ГруппаИНН.Доступность    = ЗначениеЗаполнено(Форма.ЮрФизЛицо);
	Элементы.ЮрЛицо_Адрес.Доступность = ЗначениеЗаполнено(Форма.ЮрЛицо_ВидАдреса);
	
	//ТорговаяТочка
	ЭлементТипОтношений = Форма.CRM_ВсеТипыОтношений.НайтиПоЗначению(ПредопределенноеЗначение("Справочник.CRM_ТипыОтношений.Клиент"));
	Форма.Элементы.СворачиваемаяГруппаТорговаяТочка.Доступность = ЭлементТипОтношений.Пометка;
	Если Форма.ИспользоватьТорговуюТочку Тогда
		Форма.ИспользоватьТорговуюТочку = ЭлементТипОтношений.Пометка;
		
	КонецЕсли;
	
	Элементы.ГруппаТорговаяТочка.Доступность 		   = Форма.ИспользоватьТорговуюТочку;
	Элементы.ТорговаяТочкаТелефонПоляВвода.Доступность = ЗначениеЗаполнено(Форма.ТорговаяТочкаВидТелефона);
	Элементы.ТорговаяТочка_Адрес.Доступность 		   = ЗначениеЗаполнено(Форма.ТорговаяТочка_ВидАдреса);
		
	//Рынок
	Элементы.СворачиваемаяГруппаРынок.Доступность = Форма.ИспользоватьРынок;
	Элементы.РынокНаименование.Доступность = Форма.ИспользоватьРынок;
	
КонецПроцедуры // УстановитьВидимостьДоступность()

&НаСервере
Процедура ЗаполнитьДанныеПравовойФормы()

	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЮрФизЛицо");
	
	РеквизитыОрганизационноПравоваяФорма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЮрЛицоОрганизационноПравоваяФорма, СтруктураРеквизитов);
	Если РеквизитыОрганизационноПравоваяФорма.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	Иначе	
		ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДанныеПравовойФормы()

#Область ТипыОтношений

&НаСервере
Процедура вогЗаполнитьВсеТипыОтношенийСервер()
	
	ТипыОтношений = Новый ТаблицаЗначений;
	ТипыОтношений.Колонки.Добавить("ТипОтношений", Новый ОписаниеТипов("СправочникСсылка.CRM_ТипыОтношений"));
	Если ЗначениеЗаполнено(ТипОтношений) Тогда
		ТипыОтношений.Добавить().ТипОтношений = ТипОтношений;	
	КонецЕсли;
	
	CRM_ВсеТипыОтношений.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыОтношений", ТипыОтношений);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТипыОтношенийПартнера.ТипОтношений КАК ТипОтношений
		|ПОМЕСТИТЬ втПартнерТипыОтношений
		|ИЗ
		|	&ТипыОтношений КАК ТипыОтношенийПартнера
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипОтношений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА втПартнерТипыОтношений.ТипОтношений ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Пометка,
		|	CRM_ТипыОтношений.Ссылка КАК Ссылка,
		|	CRM_ТипыОтношений.Представление КАК Представление
		|ИЗ
		|	Справочник.CRM_ТипыОтношений КАК CRM_ТипыОтношений
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПартнерТипыОтношений КАК втПартнерТипыОтношений
		|		ПО CRM_ТипыОтношений.Ссылка = втПартнерТипыОтношений.ТипОтношений
		|
		|УПОРЯДОЧИТЬ ПО
		|	втПартнерТипыОтношений.ТипОтношений
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		CRM_ВсеТипыОтношений.Добавить(Выборка.Ссылка, Выборка.Представление, Выборка.Пометка);
		
	КонецЦикла;
	
КонецПроцедуры // вогЗаполнитьВсеТипыОтношений()

&НаКлиентеНаСервереБезКонтекста
Процедура вогЗаполнитьТипыОтношений(Форма)
	Форма.CRM_ТипыОтношений = "";
	Для Каждого ТипОтношений Из Форма.CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			Форма.CRM_ТипыОтношений = Форма.CRM_ТипыОтношений  + "; " + ТипОтношений.Представление;
		КонецЕсли;				
	КонецЦикла;	
	Если СтрДлина(Форма.CRM_ТипыОтношений) > 0 Тогда
		Форма.CRM_ТипыОтношений = Сред(Форма.CRM_ТипыОтношений, 3);
	КонецЕсли;	
КонецПроцедуры // вогЗаполнитьТипыОтношений();

&НаСервере
Процедура вогЗаписатьВсеТипыОтношений(ТекущийОбъект)
	
	ТекущийОбъект.вогТипыОтношений.Очистить();
	Для Каждого ЭлементТипОтношений Из CRM_ВсеТипыОтношений Цикл
		ТипОтношенийСсылка = ЭлементТипОтношений.Значение;
		Если ЭлементТипОтношений.Пометка Тогда
			ТекущийОбъект.вогТипыОтношений.Добавить().ТипОтношений = ТипОтношенийСсылка;	
			
		КонецЕсли;	
		
		ИмяПредопределенныхДанных = ТипОтношенийСсылка.ИмяПредопределенныхДанных;
		Если ЗначениеЗаполнено(ИмяПредопределенныхДанных) Тогда
			Попытка
				ТекущийОбъект[ИмяПредопределенныхДанных] = ЭлементТипОтношений.Пометка;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // вогЗаписатьВсеТипыОтношений()

#КонецОбласти

&НаКлиенте
Процедура СформироватьНаименования()

	Если ЗначениеЗаполнено(ЮрЛицоОрганизационноПравоваяФорма)
	  И Не ЗначениеЗаполнено(ЮрЛицоНаименованиеПолное)
	  И ЗначениеЗаполнено(ПартнерНаименование) Тогда
		ЮрЛицоНаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 ""%2""'"), 
			СокрЛП(ЮрЛицоОрганизационноПравоваяФорма), СокрЛП(ПартнерНаименование));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПартнерНаименование)
	  И Не ЗначениеЗаполнено(ТорговаяТочкаНаименованиеПолное) Тогда
		ТорговаяТочкаНаименованиеПолное = ПартнерНаименование; 	
  	КонецЕсли;
  	
КонецПроцедуры // СформироватьНаименования()

&НаСервере
Процедура ПолучитьПараметрыБизнесРегиона()
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("CRM_КодСтраны");
	СтруктураРеквизитов.Вставить("CRM_КодГорода");
	
	ПараметрыБизнесРегиона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПартнерБизнесРегион, СтруктураРеквизитов);
	
КонецПроцедуры // ПолучитьПараметрыБизнесРегиона()

&НаКлиенте
Процедура ЗаполнитьКодыБизнесРегиона()
	
	Если ЗначениеЗаполнено(ПартнерБизнесРегион) Тогда
		ПолучитьПараметрыБизнесРегиона();
		
		МассивВладельцев = Новый Массив;
		МассивВладельцев.Добавить("Партнер");
		МассивВладельцев.Добавить("КонтактноеЛицо");
		МассивВладельцев.Добавить("ТорговаяТочка");
		
		Для каждого ИмяВладелец Из МассивВладельцев Цикл
			Если ЗначениеЗаполнено(ЭтотОбъект[ИмяВладелец + "ВидТелефона"]) 
			  И ПустаяСтрока(ЭтотОбъект[ИмяВладелец + "Телефон"]) Тогда
				ЭтотОбъект[ИмяВладелец + "КодСтраны"] = ПараметрыБизнесРегиона.CRM_КодСтраны;
				ЭтотОбъект[ИмяВладелец + "КодГорода"] = ПараметрыБизнесРегиона.CRM_КодГорода;
				
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКодыБизнесРегиона()

&НаКлиенте
Процедура НайтиДубли(ОписаниеОповещения)
	
	МассивОписанийОбъектов = Новый Массив;
	
	//Партнер
	ОбъектПоиска = Новый Структура;
	ОбъектПоиска.Вставить("Ссылка"				 , ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	ОбъектПоиска.Вставить("Наименование"		 , ПартнерНаименование);
	
	Если вогОбщегоНазначенияКлиентСерверПовтИсп.ВыполнятьПоискДублейОбъекта(ОбъектПоиска.Ссылка) Тогда
		СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
		СписокКонтактов = Новый Структура("Адрес", Партнер_Адрес);
		
		Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов) Тогда 
			МассивОписанийОбъектов.Добавить(
				Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта", 
					ОбъектПоиска, "Справочник.вогТорговыеТочки", СтруктураПоиска, СписокКонтактов)
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Торговые точки
	ОбъектПоиска = Новый Структура;
	ОбъектПоиска.Вставить("Ссылка"				 , ПредопределенноеЗначение("Справочник.вогТорговыеТочки.ПустаяСсылка"));
	ОбъектПоиска.Вставить("Рынок"				 , ТорговаяТочкаРынок);
	ОбъектПоиска.Вставить("МестоположениеНаРынке", ТорговаяТочкаМестоположениеНаРынке);
	
	Если ИспользоватьТорговуюТочку 
	  И вогОбщегоНазначенияКлиентСерверПовтИсп.ВыполнятьПоискДублейОбъекта(ОбъектПоиска.Ссылка) Тогда
		СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
		СписокКонтактов = Новый Структура("Адрес", ТорговаяТочка_Адрес);
		
		Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов) Тогда 
			МассивОписанийОбъектов.Добавить(
				Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта", 
					ОбъектПоиска, "Справочник.вогТорговыеТочки", СтруктураПоиска, СписокКонтактов)
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Юр. лица
	ОбъектПоиска = Новый Структура;
	ОбъектПоиска.Вставить("Ссылка" , ПредопределенноеЗначение("Справочник.вогЮридическиеЛица.ПустаяСсылка"));
	ОбъектПоиска.Вставить("CRM_ИНН", CRM_ИНН);
	
	Если ИспользоватьЮрЛицо 
	  И вогОбщегоНазначенияКлиентСерверПовтИсп.ВыполнятьПоискДублейОбъекта(ОбъектПоиска.Ссылка) Тогда
		СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
		СписокКонтактов = Новый Структура;
		
		Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов) Тогда 
			МассивОписанийОбъектов.Добавить(
				Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта", 
					ОбъектПоиска, "Справочник.вогЮридическиеЛица", СтруктураПоиска, СписокКонтактов)
			);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	//Контактные лица
	ОбъектПоиска = Новый Структура;
	ОбъектПоиска.Вставить("Ссылка" , ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка"));
	ОбъектПоиска.Вставить("CRM_Фамилия", КонтактноеЛицоФамилия);
	ОбъектПоиска.Вставить("CRM_Имя", КонтактноеЛицоИмя);
	ОбъектПоиска.Вставить("CRM_Отчество", КонтактноеЛицоОтчество);
	
	Если ИспользоватьКонтактноеЛицо 
	  И вогОбщегоНазначенияКлиентСерверПовтИсп.ВыполнятьПоискДублейОбъекта(ОбъектПоиска.Ссылка) Тогда
		СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
		
		//Представление телефонного номера
		КодСтраныСтрока = "";
		Если НЕ ПустаяСтрока(КонтактноеЛицоКодСтраны) И (Найти(КонтактноеЛицоКодСтраны, "+") = 0) Тогда
			КодСтраныСтрока = "+" + КонтактноеЛицоКодСтраны;
		Иначе
			КодСтраныСтрока = КонтактноеЛицоКодСтраны;
		КонецЕсли;	

		Представление = СокрЛП(КодСтраныСтрока);
		Если Не ПустаяСтрока(КонтактноеЛицоКодГорода) Тогда
			Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КонтактноеЛицоКодГорода) + ")";
		КонецЕсли;
		
		Если Не ПустаяСтрока(КонтактноеЛицоТелефон) Тогда
			Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(КонтактноеЛицоТелефон);
		КонецЕсли;
		
		Если Не ПустаяСтрока(КонтактноеЛицоДобНомер) Тогда
			Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(КонтактноеЛицоДобНомер);
		КонецЕсли;
		
		СписокКонтактов = Новый Структура("Телефон", Представление);
		
		Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов) Тогда 
			МассивОписанийОбъектов.Добавить(
				Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта", 
					ОбъектПоиска, "Справочник.КонтактныеЛицаПартнеров", СтруктураПоиска, СписокКонтактов)
			);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если МассивОписанийОбъектов.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивОписанийОбъектов", МассивОписанийОбъектов);
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("НайтиДублиЗавершение", ЭтотОбъект, ОписаниеОповещения);
		ОткрытьФорму("ОбщаяФорма.вогФормаНайденныхДублей", ПараметрыФормы,,,,, ОписаниеОповещенияОЗакрытии);
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиДублиЗавершение(РезультатЗакрытия, ОписаниеОповещения) Экспорт

	Если Не ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если РезультатЗакрытия.Результат = "Продолжить" Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
		//{[+](фрагмент добавлен), Виноградов Дмитрий 19.07.2018 11:17:51 ID
		Если ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ФормаСписка = ПолучитьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаСписка");
			
		ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			ФормаСписка = ПолучитьФорму("Справочник.Партнеры.Форма.CRM_ФормаСписка");
			
		ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
			ФормаСписка = ПолучитьФорму("Справочник.вогТорговыеТочки.ФормаСписка");
				
		ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
			ФормаСписка = ПолучитьФорму("Справочник.вогЮридическиеЛица.ФормаСписка");
			
		КонецЕсли;
		
		ФормаСписка.Открыть();
		ФормаСписка.Элементы.Список.ТекущаяСтрока = РезультатЗакрытия.Объект;
		//}Администратор 19.07.2018 11:17:51	
		
		Модифицированность = Ложь;
		//Закрыть();
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // НайтиДублиЗавершение()

#Область ФормированиеОбъектовКлиента

&НаСервере
Функция СоздатьНовогоПартнера()

	НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
	НовыйПартнер.Заполнить(Неопределено);
	
	НовыйПартнер.ЮрФизЛицо		    = Перечисления.КомпанияЧастноеЛицо.Компания;
	НовыйПартнер.Наименование	    = ПартнерНаименование;
	НовыйПартнер.НаименованиеПолное	= ПартнерНаименование;
	
	НовыйПартнер.БизнесРегион		= ПартнерБизнесРегион;
	НовыйПартнер.CRM_Важность       = ПартнерВажность;
	НовыйПартнер.Родитель			= ПартнерРодитель;
		
	ЗаполнитьТелефонОбъекта("Партнер", НовыйПартнер.КонтактнаяИнформация);
	
	ЗаполнитьEmailОбъекта("Партнер", НовыйПартнер.КонтактнаяИнформация);
	ЗаполнитьАдресОбъекта("Партнер", НовыйПартнер);
	
	вогЗаписатьВсеТипыОтношений(НовыйПартнер);
	
	Попытка
		НовыйПартнер.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат НовыйПартнер.Ссылка;

КонецФункции // СоздатьНовогоПартнера()
 
&НаКлиенте
Процедура СформироватьОбъектыКлиента()

	ОбъектыКлиента = СформироватьОбъектыКлиентаСервер();
	Если ЗначениеЗаполнено(ОбъектыКлиента.ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбъектыКлиента.ТекстОшибки);	
		Возврат;
	
	КонецЕсли;
	//{[+](фрагмент добавлен), Виноградов Дмитрий 13.07.2018 15:22:28 ID
	//Для каждого локКлючиИЗначения Из ОбъектыКлиента Цикл
		//ОтобразитьИзменениеДанных(локКлючиИЗначения.Значение, ВидИзмененияДанных.Добавление);		
	//КонецЦикла; 
	//}Администратор 13.07.2018 15:22:28
	
	Если ЗначениеЗаполнено(ОбъектыКлиента.ПараметрОповещения) Тогда
		Если ТипЗнч(ИсточникСоздания) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			Оповестить("Создан новый партнер из письма", ОбъектыКлиента.ПараметрОповещения, ЭтотОбъект);
			
		Иначе
			Оповестить("Создан новый партнер", ОбъектыКлиента.ПараметрОповещения, ЭтотОбъект);
			
		КонецЕсли;
		
		//Закрыть();
		
	КонецЕсли;	
	
	Если ОткрытьКарточкуКлиента Тогда
		ПоказатьЗначение(, Партнер);
	КонецЕсли;

КонецПроцедуры // СформироватьОбъектыКлиента()

&НаСервере
Функция СформироватьОбъектыКлиентаСервер()

	ОбъектыКлиента = Новый Структура;
	
	ОбъектыКлиента.Вставить("ТекстОшибки", "");	
	ОбъектыКлиента.Вставить("КонтактноеЛицо");	
	ОбъектыКлиента.Вставить("ЮрЛицо");	
	ОбъектыКлиента.Вставить("ТорговаяТочка");	
	ОбъектыКлиента.Вставить("ПараметрОповещения");	
	
	НачатьТранзакцию();
	
	//КонтактноеЛицо
	ОбъектыКлиента.КонтактноеЛицо = СоздатьКонтактноеЛицо(ОбъектыКлиента.ТекстОшибки);
	Если Не ТранзакцияАктивна() Тогда
		Возврат ОбъектыКлиента;
	
	КонецЕсли;
	
	//ЮрЛицо
	ОбъектыКлиента.ЮрЛицо = СоздатьЮрЛицо(ОбъектыКлиента.ТекстОшибки);
	Если Не ТранзакцияАктивна() Тогда
		Возврат ОбъектыКлиента;
	
	КонецЕсли;
	
	//ТорговаяТочка
	ОбъектыКлиента.ТорговаяТочка = СоздатьТорговуюТочку(ОбъектыКлиента.ТекстОшибки, ОбъектыКлиента.ЮрЛицо);
	Если Не ТранзакцияАктивна() Тогда
		Возврат ОбъектыКлиента;
	
	КонецЕсли;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	//ПараметрОповещения
	Если ЗначениеЗаполнено(ОбъектыКлиента.КонтактноеЛицо) Тогда
		ОбъектыКлиента.ПараметрОповещения = ОбъектыКлиента.КонтактноеЛицо; 
	Иначе	                                  
		ОбъектыКлиента.ПараметрОповещения = Партнер; 
	КонецЕсли;
	
	Возврат ОбъектыКлиента;

КонецФункции // СформироватьОбъектыКлиентаСервер()

&НаСервере
Функция СоздатьКонтактноеЛицо(ТекстОшибки)
	
	Если Не ИспользоватьКонтактноеЛицо Тогда
		Возврат Неопределено;
	
	КонецЕсли;	

	КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
	КонтактноеЛицо.Наименование = СокрЛП((?(ЗначениеЗаполнено(КонтактноеЛицоФамилия),   СокрЛП(КонтактноеЛицоФамилия) + " ", "")
								+ ?(ЗначениеЗаполнено(КонтактноеЛицоИмя), 	 			СокрЛП(КонтактноеЛицоИмя) + " ", "")
								+ ?(ЗначениеЗаполнено(КонтактноеЛицоОтчество),  		СокрЛП(КонтактноеЛицоОтчество), ""))); 
								
	КонтактноеЛицо.CRM_Фамилия					= КонтактноеЛицоФамилия;
	КонтактноеЛицо.CRM_Имя						= КонтактноеЛицоИмя;
	КонтактноеЛицо.CRM_Отчество					= КонтактноеЛицоОтчество;
	
	КонтактноеЛицо.Пол							= КонтактноеЛицоПол;
	КонтактноеЛицо.CRM_Состояние				= Перечисления.CRM_Состояние.Работает;
	КонтактноеЛицо.CRM_Должность				= КонтактноеЛицоДолжность;
	КонтактноеЛицо.CRM_НапоминатьОДнеРождения	= Истина;
	КонтактноеЛицо.ДатаРегистрацииСвязи         = ТекущаяДата();
	//{[+](фрагмент добавлен), Виноградов Дмитрий 06.07.2018 17:15:40 ID
	КонтактноеЛицо.Владелец						= Партнер;
	//+вог
	//Связи	
	Если ЗначениеЗаполнено(Партнер) Тогда
		ДанныеСвязи = Новый Структура;
		ДанныеСвязи.Вставить("CRM_Состояние"		  , Перечисления.CRM_Состояние.Работает);
		ДанныеСвязи.Вставить("CRM_Должность"		  , КонтактноеЛицоДолжность);
		ДанныеСвязи.Вставить("CRM_РольКонтактногоЛица", Неопределено);
		
		КонтактноеЛицо.ДополнительныеСвойства.Вставить("ДанныеСвязи", ДанныеСвязи);
		КонтактноеЛицо.ДополнительныеСвойства.Вставить("ОбъектСвязи", Партнер);
		
	КонецЕсли;
	//-вог
	//}Администратор 06.07.2018 17:15:40
	
	ЗаполнитьТелефонОбъекта("КонтактноеЛицо", КонтактноеЛицо.КонтактнаяИнформация);
	ЗаполнитьEmailОбъекта("КонтактноеЛицо", КонтактноеЛицо.КонтактнаяИнформация);
	
	Попытка
		КонтактноеЛицо.Записать();
	Исключение
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки() + Символы.ПС;
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();	
			
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат КонтактноеЛицо.Ссылка;

КонецФункции // СоздатьКонтактноеЛицо()

&НаСервере
Функция СоздатьЮрЛицо(ТекстОшибки)

	Если Не ИспользоватьЮрЛицо Тогда
		Возврат Неопределено;
	
	КонецЕсли;	
	
	ЮрЛицо = Справочники.вогЮридическиеЛица.СоздатьЭлемент();
	
	ЮрЛицо.Наименование 			   = ЮрЛицоНаименованиеПолное;	
	ЮрЛицо.НаименованиеПолное 		   = ЮрЛицоНаименованиеПолное;	
	ЮрЛицо.ОрганизационноПравоваяФорма = ЮрЛицоОрганизационноПравоваяФорма;
	ЮрЛицо.CRM_ИНН 					   = CRM_ИНН;
	ЮрЛицо.CRM_КПП					   = CRM_КПП;
	ЮрЛицо.КодПоОКПО				   = CRM_КПП;
	//{[+](фрагмент добавлен), Виноградов Дмитрий 04.07.2018 10:00:57 ID
	ЮрЛицо.Партнер					   = Партнер;
	//}Администратор 04.07.2018 10:00:57
	
	ЗаполнитьАдресОбъекта("ЮрЛицо", ЮрЛицо);
	
	//Связи
	ЮрЛицо.ДополнительныеСвойства.Вставить("ПартнерСвязи", Партнер);	
	
	Попытка
		ЮрЛицо.Записать();
	Исключение
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки() + Символы.ПС;
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();	
			
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат ЮрЛицо.Ссылка;
	
КонецФункции // СоздатьЮрЛицо()

&НаСервере
Функция СоздатьТорговуюТочку(ТекстОшибки, ЮрЛицоСвязи)

	Если Не ИспользоватьТорговуюТочку Тогда
		Возврат Неопределено;
	
	КонецЕсли;	
	
	ТорговаяТочка = Справочники.вогТорговыеТочки.СоздатьЭлемент();
	
	ТорговаяТочка.Вид 		   = ТорговаяТочкаВид;	
	ТорговаяТочка.Наименование = ТорговаяТочкаНаименованиеПолное;
	ТорговаяТочка.БизнесРегион = ПартнерБизнесРегион;
	//{[+](фрагмент добавлен), Виноградов Дмитрий 04.07.2018 9:07:07 ID
	ТорговаяТочка.Вывеска      = ТорговаяТочкаНаименованиеПолное;
	//}Администратор 04.07.2018 9:07:07
	
	Если ТорговаяТочкаВариантАдреса = "АдресРынка" Тогда
		ТорговаяТочка.Рынок                 = ТорговаяТочкаРынок;	
		ТорговаяТочка.МестоположениеНаРынке = ТорговаяТочкаМестоположениеНаРынке;	
		
	КонецЕсли;
	
	ЗаполнитьТелефонОбъекта("ТорговаяТочка", ТорговаяТочка.КонтактнаяИнформация);
	ЗаполнитьАдресОбъекта("ТорговаяТочка", ТорговаяТочка);
	
	//Связи
	ТорговаяТочка.Партнер = Партнер;
	Если ЗначениеЗаполнено(ЮрЛицоСвязи) Тогда
		ТорговаяТочка.ДополнительныеСвойства.Вставить("ЮрЛицоСвязи", ЮрЛицоСвязи);
	КонецЕсли;
	
	Попытка
		ТорговаяТочка.Записать();
	Исключение
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки() + Символы.ПС;
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();	
			
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат ТорговаяТочка.Ссылка;
	
КонецФункции // СоздатьТорговуюТочку()

#КонецОбласти

#Область ФормированиеКИ

&НаСервере
Процедура ЗаполнитьТелефонОбъекта(ИмяОбъекта, КонтактнаяИнформация)

	ВидТелефона = ЭтотОбъект[ИмяОбъекта + "ВидТелефона"];	
	КодСтраны   = ЭтотОбъект[ИмяОбъекта + "КодСтраны"];	
	КодГорода   = ЭтотОбъект[ИмяОбъекта + "КодГорода"];	
	ДобНомер    = ЭтотОбъект[ИмяОбъекта + "ДобНомер"];
	Телефон     = ЭтотОбъект[ИмяОбъекта + "Телефон"];
	
	Если ЗначениеЗаполнено(ВидТелефона) 
	  И ЗначениеЗаполнено(Телефон) Тогда
		Если НЕ ПустаяСтрока(КодСтраны) И (Найти(КодСтраны, "+") = 0) Тогда
			КодСтраныСтрока = "+" + КодСтраны;
		Иначе
			КодСтраныСтрока = КодСтраны;
		КонецЕсли;	
		
		СписокПолей = Новый СписокЗначений;
		СписокПолей.Добавить(КодСтраныСтрока,   "КодСтраны");
		СписокПолей.Добавить(КодГорода,     	"КодГорода");
		СписокПолей.Добавить(Телефон, 			"НомерТелефона");
		СписокПолей.Добавить(ДобНомер,    		"Добавочный");
		СписокПолей.Добавить("",   				"Комментарий");
		
		НовыйКонтакт			   = КонтактнаяИнформация.Добавить();
		НовыйКонтакт.ЗначенияПолей = ПреобразоватьСписокПолейВСтроку(СписокПолей);
		НовыйКонтакт.Вид		   = ВидТелефона;
		НовыйКонтакт.Тип		   = Перечисления.ТипыКонтактнойИнформации.Телефон;
		
		Представление = СокрЛП(КодСтраныСтрока);
		Если Не ПустаяСтрока(КодГорода) Тогда
			Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КодГорода) + ")";
		КонецЕсли;
		
		Если Не ПустаяСтрока(Телефон) Тогда
			Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(Телефон);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ДобНомер) Тогда
			Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(ДобНомер);
		КонецЕсли;
		
		НовыйКонтакт.Представление 			= Представление;
		НовыйКонтакт.НомерТелефона 			= Представление;
		НовыйКонтакт.НомерТелефонаБезКодов 	= СокрЛП(Телефон);
		НовыйКонтакт.CRM_ОсновнойДляСвязи	= Истина;		
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТелефонОбъекта()

&НаСервере
Процедура ЗаполнитьEmailОбъекта(ИмяОбъекта, КонтактнаяИнформация)

	ВидEmail = ЭтотОбъект[ИмяОбъекта + "ВидEmail"];	
	Email    = ЭтотОбъект[ИмяОбъекта + "Email"];	
	
	Если ЗначениеЗаполнено(ВидEmail) 
	  И ЗначениеЗаполнено(Email) Тогда
		Попытка
			Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Email);
		Исключение
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			Возврат;
			
		КонецПопытки;
		
		Если Результат.Количество() > 0 Тогда
			НовыйКонтакт 						= КонтактнаяИнформация.Добавить();
			НовыйКонтакт.Вид					= ВидEmail;
			НовыйКонтакт.Тип					= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НовыйКонтакт.Представление 			= СокрЛП(Email);
			НовыйКонтакт.CRM_ОсновнойДляСвязи	= Истина;
			НовыйКонтакт.АдресЭП 				= Результат[0].Адрес;
			
			Поз = Найти(НовыйКонтакт.АдресЭП, "@");
			Если Поз <> 0 Тогда
				НовыйКонтакт.ДоменноеИмяСервера = Сред(НовыйКонтакт.АдресЭП, Поз+1);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьEmailОбъекта()

&НаСервере
Процедура ЗаполнитьАдресОбъекта(ИмяОбъекта, НовыйОбъект)

	Если ИмяОбъекта = "ТорговаяТочка" Тогда
		Если ТорговаяТочкаВариантАдреса = "АдресПартнера" Тогда
			ВидАдреса = ЭтотОбъект["Партнер_ВидАдреса"];	
			Адрес     = ЭтотОбъект["Партнер_Адрес"];	
			
		ИначеЕсли ТорговаяТочкаВариантАдреса = "Адрес" Тогда
			ВидАдреса = ЭтотОбъект["ТорговаяТочка_ВидАдреса"];	
			Адрес     = ЭтотОбъект["ТорговаяТочка_Адрес"];	
			
		Иначе
			Возврат;
			
		КонецЕсли;	
		
	Иначе	
		ВидАдреса = ЭтотОбъект[ИмяОбъекта + "_ВидАдреса"];	
		Адрес     = ЭтотОбъект[ИмяОбъекта + "_Адрес"];	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидАдреса) 
	  И ЗначениеЗаполнено(Адрес) Тогда 
	  	СтрокиКИ = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяОбъекта + "_Адрес"));
		Для Каждого СтрокаКИ Из СтрокиКИ Цикл
			ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтрокаКИ.ЗначенияПолей);
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовыйОбъект, ДанныеКИ, ВидАдреса, Перечисления.ТипыКонтактнойИнформации.Адрес);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАдресОбъекта()

&НаСервереБезКонтекста
Функция ПреобразоватьСписокПолейВСтроку(СоответствиеПолей)
	
	Результат = "";
	Для Каждого Элемент Из СоответствиеПолей Цикл
		
		Значение = Элемент.Значение;
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + ?(Результат = "", "", Символы.ПС) + 
			Элемент.Представление + "=" + СтрЗаменить(Значение, Символы.ПС, Символы.ПС + Символы.Таб);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		// Обработка ошибок
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
				|необходимо подключиться к Интернет-поддержке пользователей.
				|Подключиться сейчас?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "")
	
	ЭтоЮридическоеЛицо = (ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(CRM_ИНН);
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(CRM_ИНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыКонтрагента);
	
	Если ЭтоЮридическоеЛицо Тогда
		Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И ЗначениеЗаполнено(РеквизитыКонтрагента.ЮридическийАдрес) Тогда
			ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес, 
				РеквизитыКонтрагента.ЮридическийАдрес);
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") И ЗначениеЗаполнено(РеквизитыКонтрагента.Телефон) Тогда
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера, 
			РеквизитыКонтрагента.Телефон);
	КонецЕсли;
		
	Если РеквизитыКонтрагента.Свойство("Руководитель") И ЗначениеЗаполнено(РеквизитыКонтрагента.Руководитель) Тогда
		ЗаполнитьРуководителя(РеквизитыКонтрагента.Руководитель);
		
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРуководителя(СтруктураДанных)
	
	КонтактноеЛицоФамилия  = СтруктураДанных.Фамилия;
	КонтактноеЛицоИмя	   = СтруктураДанных.Имя;
	КонтактноеЛицоОтчество = СтруктураДанных.Отчество;
	
	Должность			   = Справочники.CRM_Должности.НайтиПоНаименованию(СтруктураДанных.Должность);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ВидАдреса = ВидКонтактнойИнформации;
		Адрес = СтруктураДанных.Представление;
	ИначеЕсли ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ВидEmailКлиента = ВидКонтактнойИнформации;
		Email = СтруктураДанных.Представление;
	ИначеЕсли ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ВидТелефонаКлиента		= ВидКонтактнойИнформации;
		ЗначенияПолейТелефона	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтруктураДанных.Представление);
		КодСтраны				= ЗначенияПолейТелефона.КодСтраны;
		КодГорода				= ЗначенияПолейТелефона.КодГорода;
		Телефон					= ЗначенияПолейТелефона.НомерТелефона;
		ДобНомер				= ЗначенияПолейТелефона.Добавочный;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено 
		И Результат <> КодВозвратаДиалога.Отмена Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключитьЗаполнениеПоИНН()

	ОтключитьЗаполнениеПоИНН = Неопределено;	

КонецПроцедуры 

#КонецОбласти

#Область ПоискДублей

&НаСервереБезКонтекста
Функция ЕстьДубли(Знач Объект, Знач СтруктураПоиска, Знач СписокКонтактов, Знач ТочноеСоответствие = Ложь)
	
	МассивДублей = вогОбщегоНазначения.НайтиДубли(Объект, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие);
	Возврат МассивДублей.Количество() > 0;
	
КонецФункции // ЕстьДубли()
#КонецОбласти

#КонецОбласти

#Область СворачиваемыГруппы

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	ИмяГруппыСвернутьРазвернуть = Элемент.Имя;
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияОткрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияЗакрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ЗаголовокГруппы", "");
	ИзменитьСвернутостьГруппы(ИмяГруппыСвернутьРазвернуть);
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы",0.0001,Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть = Неопределено)
	Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость, Не Свернуть);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Свернуть);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Не Свернуть);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	Если Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяГруппыСвернутьРазвернуть];
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 