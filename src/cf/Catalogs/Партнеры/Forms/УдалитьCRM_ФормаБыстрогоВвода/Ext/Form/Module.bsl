// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ОтключитьЗаполнениеПоИНН; // Отключение заполнения по ИНН.
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаСервере
// Заполняет список выбора для вида телефона.
//
Процедура ИзменитьПараметрыВыбораВидаТелефона()
	
	Если ВидПартнера = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
	
		Массив = Новый Массив;
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
		
		МассивФизЛицо = Новый ФиксированныйМассив(Массив);
		
		Массив = Новый Массив;
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",МассивФизЛицо);
		Массив.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Тип",Перечисления.ТипыКонтактнойИнформации.Телефон);
		Массив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(Массив);
		
		Элементы.ВидТелефонаКлиента.ПараметрыВыбора = НовыеПараметры;
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
		
		МассивКомпания = Новый ФиксированныйМассив(Массив);
		
		Массив = Новый Массив;
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",МассивКомпания);
		Массив.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Тип",Перечисления.ТипыКонтактнойИнформации.Телефон);
		Массив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(Массив);
		
		Элементы.ВидТелефонаКлиента.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Заполняет список выбора для вида адреса.
//
Процедура ИзменитьПараметрыВыбораВидаАдреса()
	
	Если ВидПартнера = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
	
		Массив = Новый Массив;
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
		
		МассивФизЛицо = Новый ФиксированныйМассив(Массив);
		
		Массив = Новый Массив;
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",МассивФизЛицо);
		Массив.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
		Массив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(Массив);
		
		Элементы.ВидАдреса.ПараметрыВыбора = НовыеПараметры;
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
		
		МассивКомпания = Новый ФиксированныйМассив(Массив);
		
		Массив = Новый Массив;
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",МассивКомпания);
		Массив.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Тип",Перечисления.ТипыКонтактнойИнформации.Адрес);
		Массив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(Массив);
		
		Элементы.ВидАдреса.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Заполняет список выбора для вида Email.
//
Процедура ИзменитьПараметрыВыбораВидаEmail()
	
	Если ВидПартнера = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
	
		Массив = Новый Массив;
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо);
		
		МассивФизЛицо = Новый ФиксированныйМассив(Массив);
		
		Массив = Новый Массив;
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",МассивФизЛицо);
		Массив.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Массив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(Массив);
		
		Элементы.ВидEmailКлиента.ПараметрыВыбора = НовыеПараметры;
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
		Массив.Добавить(Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания);
		
		МассивКомпания = Новый ФиксированныйМассив(Массив);
		
		Массив = Новый Массив;
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Родитель",МассивКомпания);
		Массив.Добавить(ПараметрВыбора);
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Массив.Добавить(ПараметрВыбора);
		НовыеПараметры = Новый ФиксированныйМассив(Массив);
		
		Элементы.ВидEmailКлиента.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаЗаполнения()
	
	ОшибокНет = Истина;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено наименование'"), , "Наименование");
		ОшибокНет = Ложь;
	КонецЕсли;
	
	Если НЕ ((ЗначениеЗаполнено(ВидТелефонаКлиента) И ЗначениеЗаполнено(Телефон))
		 ИЛИ (ЗначениеЗаполнено(ВидEmailКлиента) И ЗначениеЗаполнено(Email))
		 ИЛИ (ЗначениеЗаполнено(ВидАдреса) И ЗначениеЗаполнено(Адрес))
		 ИЛИ (ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица) И ЗначениеЗаполнено(ТелефонКонтактногоЛица))
		 ИЛИ (ЗначениеЗаполнено(ВидEmailКонтактногоЛица) И ЗначениеЗаполнено(EmailКонтактногоЛица))) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена контактная информация!'"),, "Телефон");
		
		ОшибокНет = Ложь;
		 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФамилияКонтактногоЛица)
		 И НЕ ЗначениеЗаполнено(ИмяКонтактногоЛица) 
		 И НЕ ЗначениеЗаполнено(ОтчествоКонтактногоЛица)
		 И (ЗначениеЗаполнено(ТелефонКонтактногоЛица) ИЛИ ЗначениеЗаполнено(EmailКонтактногоЛица)) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена ФИО контактного лица!'"),, "ФамилияКонтактногоЛица");
		
		ОшибокНет = Ложь;
		 
	КонецЕсли;
	
	Возврат ОшибокНет;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКИ_Описание(ВидАдреса)
	
	Если ЗначениеЗаполнено(ВидАдреса) Тогда
		
		Элементы.Адрес.РедактированиеТекста = НЕ ВидАдреса.РедактированиеТолькоВДиалоге;
		
		Строки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", "Адрес"));
		Если Строки.Количество() = 0 Тогда
			НовСтр = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
			НовСтр.ИмяРеквизита     = "Адрес";
		Иначе
			НовСтр = Строки[0];
		КонецЕсли;
		НовСтр.ТолькоРоссийский = ВидАдреса.АдресТолькоРоссийский;
		НовСтр.Вид              = ВидАдреса.Ссылка;
		НовСтр.Тип              = ВидАдреса.Тип;
		НовСтр.ТипНомер         = 1;
		НовСтр.Выводить         = Истина;
		НовСтр.Родитель         = ВидАдреса.Родитель;
	
	Иначе
		КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиДубли(ОписаниеОповещения)
	СтруктураПоиска = СоздатьСтруктуруПоиска();
	Если СтруктураПоиска.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не установлены реквизиты поиска в настройках сервисных функций!'"));
	КонецЕсли;
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("Наименование",		Наименование);
	СтруктураОбъекта.Вставить("НаименованиеПолное",	НаименованиеПолное) ;
	СтруктураОбъекта.Вставить("ИНН",				ИНН);
	Если ЗначениеЗаполнено(Адрес) Тогда
		СтруктураОбъекта.Вставить("Адрес", Адрес);
	КонецЕсли;
	ТелефонДляПоиска	= "";
	EmailДляПоиска		= "";
	Если ПустаяСтрока(ТелефонКонтактногоЛица) Тогда
		НомерТелефонаКонтактногоЛица = "";
	Иначе	
		НомерТелефонаКонтактногоЛица = ?(ПустаяСтрока(КодСтраныКонтактногоЛица), "", 
		?(Найти(КодСтраныКонтактногоЛица, "+") = 0, "+", "") + СокрЛП(КодСтраныКонтактногоЛица)) 
		+ ?(ПустаяСтрока(КодГородаКонтактногоЛица), "", " (" + СокрЛП(КодГородаКонтактногоЛица) + ") ") 
		+ ?(ПустаяСтрока(ТелефонКонтактногоЛица), "", СокрЛП(ТелефонКонтактногоЛица));
	КонецЕсли;	
	Если НЕ ПустаяСтрока(НомерТелефонаКонтактногоЛица) Тогда
		СтруктураОбъекта.Вставить("Контакт_Телефон", НомерТелефонаКонтактногоЛица);
		ТелефонДляПоиска	= НомерТелефонаКонтактногоЛица;
	КонецЕсли;
	Если ПустаяСтрока(Телефон) Тогда
		НомерТелефона = "";
	Иначе	
		НомерТелефона = ?(ПустаяСтрока(КодСтраны), "", ?(Найти(КодСтраны, "+") = 0, "+", "") + СокрЛП(КодСтраны)) 
		+ ?(ПустаяСтрока(КодГорода), "", " (" + СокрЛП(КодГорода)+ ") ") 
		+ ?(ПустаяСтрока(Телефон), "", СокрЛП(Телефон));
	КонецЕсли;	
	Если НЕ ПустаяСтрока(НомерТелефона) Тогда
		СтруктураОбъекта.Вставить("Телефон", НомерТелефона);
		Если НЕ СтруктураПоиска.Свойство("Телефон") Тогда
			СтруктураПоиска.Вставить("Телефон", "ПОДОБНО");
		КонецЕсли;	
		Если ПустаяСтрока(ТелефонДляПоиска) Тогда
			ТелефонДляПоиска	= НомерТелефона;
		КонецЕсли;	
	КонецЕсли;
	Если НЕ ПустаяСтрока(EmailКонтактногоЛица) Тогда
		СтруктураОбъекта.Вставить("Контакт_АдресЭлектроннойПочты", EmailКонтактногоЛица);
		EmailДляПоиска	= EmailКонтактногоЛица;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Email) Тогда
		СтруктураОбъекта.Вставить("АдресЭлектроннойПочты", Email);
		Если НЕ СтруктураПоиска.Свойство("АдресЭлектроннойПочты") Тогда
			СтруктураПоиска.Вставить("АдресЭлектроннойПочты", "ПОДОБНО");
		КонецЕсли;	
		Если ПустаяСтрока(EmailДляПоиска) Тогда
			EmailДляПоиска	= Email;
		КонецЕсли;
	КонецЕсли;
	ПоискПоТелефону	= НЕ ПустаяСтрока(ТелефонДляПоиска);
	ПоискПоEmail	= НЕ ПустаяСтрока(EmailДляПоиска);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураПоиска",		СтруктураПоиска);
	ПараметрыФормы.Вставить("СтруктураОбъекта",		СтруктураОбъекта);
	Если ЭтотОбъект.ВладелецФормы.ИмяФормы = "Документ.CRM_Интерес.Форма.ФормаДокумента" Тогда
		ПараметрыФормы.Вставить("ПотенциальныйКлиент",	Истина);
	ИначеЕсли ЭтотОбъект.ВладелецФормы.ИмяФормы = "Обработка.CRM_МастерРегистрацииОбращения.Форма.Форма" Тогда
		ПараметрыФормы.Вставить("ПотенциальныйКлиент",	Истина);
	КонецЕсли;
	Форма = ПолучитьФорму("ОбщаяФорма.CRM_ФормаНайденныхДублей", ПараметрыФормы);
	Если Форма = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	Иначе 
		Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ДублиНайденыЗавершение", ЭтотОбъект, ОписаниеОповещения);
		Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДублиНайденыЗавершение(РезультатЗакрытия, ОписаниеОповещения) Экспорт
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Если РезультатЗакрытия.Свойство("Результат") Тогда
			Если РезультатЗакрытия.Результат = "Продолжить" Тогда
				Если РезультатЗакрытия.Свойство("Объект") Тогда
					Если ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						НайденныйКлиент								= CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(РезультатЗакрытия.Объект, "Владелец");
						НайденныйКонтакт							= РезультатЗакрытия.Объект;
						Элементы.ГруппаВидКлиента.Видимость			= Ложь;
						Элементы.ГруппаРеквизитыКлиента.Видимость	= Ложь;
						Элементы.ГруппаКонтакты.Видимость			= Ложь;
						Элементы.ГруппаНайденныйКлиент.Видимость	= Истина;
						Элементы.ГруппаНайденноеКонтактноеЛицо.Видимость	= Истина;
						Элементы.КонтактноеЛицо.Видимость			= Ложь;
						Элементы.Дополнительно.Видимость			= Ложь;
						Элементы.ЗарегистрироватьКлиента.Заголовок	= НСтр("ru='Выбрать контакт'");
						Заголовок									= НСтр("ru='Выбор существующего контакта клиента'");
						Элементы.ОткрытьКарточкуКлиента.Видимость	= Ложь;
						Элементы.ЗарегистрироватьКлиентаИВвестиИнтерес.Видимость	= Ложь;						
						ОтобразитьКИКонтакта();			
					ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
						НайденныйКлиент								= РезультатЗакрытия.Объект;
						Элементы.ГруппаВидКлиента.Видимость			= Ложь;
						Элементы.ГруппаРеквизитыКлиента.Видимость	= Ложь;
						Элементы.ГруппаКонтакты.Видимость			= Ложь;
						Элементы.ГруппаНайденныйКлиент.Видимость	= Истина;
						Элементы.Дополнительно.Видимость			= Ложь;
						Элементы.ЗарегистрироватьКлиента.Заголовок	= НСтр("ru='Зарегистрировать контакт'");
						Заголовок									= НСтр("ru='Регистрация нового контакта клиента'");
						Элементы.ОткрытьКарточкуКлиента.Видимость	= Ложь;
						Элементы.ЗарегистрироватьКлиентаИВвестиИнтерес.Видимость	= Ложь;						
					ИначеЕсли РезультатЗакрытия.Объект = Неопределено Тогда
						ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
					КонецЕсли;
				КонецЕсли;	
			ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
				Если РезультатЗакрытия.Свойство("Объект") Тогда
					Если ЭтотОбъект.ВладелецФормы.ИмяФормы = "Документ.CRM_Интерес.Форма.ФормаДокумента" Тогда
						ЭтотОбъект.ВладелецФормы.Партнер = РезультатЗакрытия.Объект;
						Оповестить("Создан новый партнер", РезультатЗакрытия.Объект, ЭтотОбъект);
					ИначеЕсли ЭтотОбъект.ВладелецФормы.ИмяФормы = "Обработка.CRM_МастерРегистрацииОбращения.Форма.Форма" Тогда
						Оповестить("Создан новый партнер", РезультатЗакрытия.Объект, ЭтотОбъект);
					ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						ВладелецОбъекта	= CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(РезультатЗакрытия.Объект, "Владелец");
						Попытка 
							ВладелецФормы.Элементы.Список.ТекущаяСтрока = ВладелецОбъекта; 
						Исключение
							ФормаСписка = ПолучитьФорму("Справочник.Партнеры.ФормаСписка");
							ФормаСписка.Открыть();
							ФормаСписка.ТекущийЭлемент.ТекущаяСтрока = ВладелецОбъекта;
						КонецПопытки;
					ИначеЕсли ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
						Попытка 
							ВладелецФормы.Элементы.Список.ТекущаяСтрока = РезультатЗакрытия.Объект; 
						Исключение
							ФормаСписка = ПолучитьФорму("Справочник.Партнеры.ФормаСписка");
							ФормаСписка.Открыть();
							ФормаСписка.ТекущийЭлемент.ТекущаяСтрока = РезультатЗакрытия.Объект;
						КонецПопытки;
					КонецЕсли;
					Модифицированность = Ложь;
					Закрыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли РезультатЗакрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли (ТипЗнч(РезультатЗакрытия) = Тип("КодВозвратаДиалога")) 
		И (РезультатЗакрытия = КодВозвратаДиалога.Отмена) Тогда
		Возврат;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура заменяет или добавляет КИ найденому контакту.
//
// Параметры:
//	НомерСтрокиКИ	- Строка	- Номер строки КИ.
//	Заменить		- Булево	- Признак замены КИ.
//
Процедура ЗаменитьДобавитьКИ(НомерСтрокиКИ, Заменить)
	Если Найти(НомерСтрокиКИ, "_") = 1 Тогда
		НомерСтроки	= 0;
		Заменить	= Ложь;
	Иначе
		НомерСтроки	= Число(НомерСтрокиКИ);
	КонецЕсли;
	Если НомерСтроки = 0 Тогда
		ЗаголовокВидКИ	= Элементы["КИЗаголовок" + НомерСтрокиКИ].Заголовок;
		СтрокаВидКИ		= Лев(ЗаголовокВидКИ, СтрДлина(ЗаголовокВидКИ) - 1);
		Выборка			= Справочники.ВидыКонтактнойИнформации.Выбрать(Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров);
		ВидКИ			= Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Наименование = СтрокаВидКИ Тогда
				ВидКИ	= Выборка.Ссылка;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(ВидКИ) Тогда Возврат; КонецЕсли;
		СтрокаКИ		= Новый Структура;
		СтрокаКИ.Вставить("Вид", ВидКИ);
		СтрокаКИ.Вставить("Тип", ВидКИ.Тип);
	Иначе	
		СтрокаКИ	= НайденныйКонтакт.КонтактнаяИнформация[НомерСтроки - 1];
	КонецЕсли;	
	Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ЗначениеКИ	= ТелефонДляПоиска;
	Иначе	
		ЗначениеКИ	= EmailДляПоиска;
	КонецЕсли;	
	Если ПустаяСтрока(ЗначениеКИ) Тогда Возврат; КонецЕсли;
	ОбъектКИ	= НайденныйКонтакт.ПолучитьОбъект();
	Если Заменить Тогда
		НоваяКИ		= ОбъектКИ.КонтактнаяИнформация[НомерСтроки - 1];
	Иначе
		НоваяКИ		= ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип	= СтрокаКИ.Тип;
		НоваяКИ.Вид	= СтрокаКИ.Вид;
		НоваяКИ.CRM_ОсновнойДляСвязи	= Ложь;
	КонецЕсли;	
	Если НоваяКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		СтруктураПолей					= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ЗначениеКИ);
		НоваяКИ.Представление			= ЗначениеКИ;
		НоваяКИ.Страна					= СтруктураПолей.КодСтраны;
		НоваяКИ.Город					= СтруктураПолей.КодГорода;
		НоваяКИ.НомерТелефона			= СтруктураПолей.НомерТелефона;
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураПолей.НомерТелефона;
	Иначе
		НоваяКИ.АдресЭП					= ЗначениеКИ;
		НоваяКИ.Представление			= ЗначениеКИ;
		Поз = Найти(ЗначениеКИ, "@");
		Если Поз > 0 Тогда
			НоваяКИ.ДоменноеИмяСервера = Сред(ЗначениеКИ, Поз + 1);
		КонецЕсли;
	КонецЕсли;
	НоваяКИ.ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(НоваяКИ.Представление, НоваяКИ.Вид);
	Если НЕ Заменить Тогда
		// Сортируем контактную информацию по типу и виду.
		ОбъектКИ.КонтактнаяИнформация.Сортировать("Тип,Вид");
	КонецЕсли;
	Попытка
		ОбъектКИ.Записать();
	Исключение
	КонецПопытки;
	Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ТелефонДляПоиска	= "";
	Иначе	
		EmailДляПоиска		= "";
	КонецЕсли;	
	ОтобразитьКИКонтакта();
КонецПроцедуры // ЗаменитьДобавитьКИ()

&НаКлиенте
// Подключаемый обработчик команды "Заменить".
//
Процедура Подключаемый_КИЗаменить(Элемент)
	ЗаменитьДобавитьКИ(СтрЗаменить(Элемент.Имя, "КИЗаменить", ""), Истина);
КонецПроцедуры // Подключаемый_КИЗаменить()	

&НаКлиенте
// Подключаемый обработчик команды "Добавить".
//
Процедура Подключаемый_КИДобавить(Элемент)
	ЗаменитьДобавитьКИ(СтрЗаменить(Элемент.Имя, "КИДобавить", ""), Ложь);
КонецПроцедуры // Подключаемый_КИДобавить()

&НаСервере
// Функция возвращает контактной информации контакта.
//
// Параметры:
//	Тип		- ПеречислениеСсылка	- Тип контактной информации.
//
// Возвращаемое значение:
//	Массив	- Массив контактной информации контакта.
//
Функция ПолучитьКИКонтакта(Тип)
	МассивКИ	= Новый Массив;				   
	Запрос		= Новый Запрос;
	Запрос.УстановитьПараметр("Тип",	Тип);
	Запрос.УстановитьПараметр("Ссылка",	НайденныйКонтакт);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыКИ.Вид,
	               |	ЕСТЬNULL(КИ.НомерСтроки, 0) КАК НомерСтроки,
	               |	ЕСТЬNULL(КИ.Представление, """") КАК Представление
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВидыКонтактнойИнформации.Ссылка КАК Вид,
	               |		ВидыКонтактнойИнформации.CRM_Основной КАК CRM_Основной
	               |	ИЗ
	               |		Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |	ГДЕ
	               |		ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров)
	               |		И ВидыКонтактнойИнформации.Тип = &Тип) КАК ВидыКИ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
	               |			КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК Представление,
	               |			КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид КАК Вид
	               |		ИЗ
	               |			Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	               |		ГДЕ
	               |			КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &Тип
	               |			И КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка) КАК КИ
	               |		ПО ВидыКИ.Вид = КИ.Вид
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидыКИ.CRM_Основной УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураКИ = Новый Структура;
		СтруктураКИ.Вставить("Вид",				Выборка.Вид);
		СтруктураКИ.Вставить("НомерСтроки",		Выборка.НомерСтроки);
		СтруктураКИ.Вставить("Представление",	Выборка.Представление);
		МассивКИ.Добавить(СтруктураКИ);
	КонецЦикла;	
	Возврат МассивКИ;
КонецФункции // ПолучитьКИКонтакта()

&НаСервере
// Процедура выводит телефоны и email найденного контакта.
//
Процедура ОтобразитьКИКонтакта()
	// Удаляем ранее созданные элементы формы.
	КоличествоЭлементов	= Элементы.ГруппаНайденныйКонтактТелефоны.ПодчиненныеЭлементы.Количество();
	Для НомерЭлемента = 1 По КоличествоЭлементов Цикл
		ПодчиненныйЭлемент	= Элементы.ГруппаНайденныйКонтактТелефоны.ПодчиненныеЭлементы[КоличествоЭлементов - НомерЭлемента];
		Элементы.Удалить(ПодчиненныйЭлемент);
	КонецЦикла;	
	КоличествоЭлементов	= Элементы.ГруппаНайденныйКонтактАдреса.ПодчиненныеЭлементы.Количество();
	Для НомерЭлемента = 1 По КоличествоЭлементов Цикл
		ПодчиненныйЭлемент	= Элементы.ГруппаНайденныйКонтактАдреса.ПодчиненныеЭлементы[КоличествоЭлементов - НомерЭлемента];
		Элементы.Удалить(ПодчиненныйЭлемент);
	КонецЦикла;	
	ПустойНомер	= 0;
	Если ПоискПоТелефону Тогда
		Элементы.ГруппаНайденныйКонтактКИТелефоны.Видимость	= Истина;
		МассивТелефонов	= ПолучитьКИКонтакта(Перечисления.ТипыКонтактнойИнформации.Телефон);
		Для Каждого СтрокаКИ Из МассивТелефонов Цикл
			Если СтрокаКИ.НомерСтроки = 0 Тогда
				ПустойНомер		= ПустойНомер + 1;
				НомерСтрокиКИ	= "_" + Строка(ПустойНомер);
			Иначе
				НомерСтрокиКИ	= Строка(СтрокаКИ.НомерСтроки);
			КонецЕсли;	
			// Добавляем группу для элементов.
			Группа								= Элементы.Добавить("КИКонтактаГруппа" + НомерСтрокиКИ, Тип("ГруппаФормы"),  Элементы.ГруппаНайденныйКонтактТелефоны);
			Группа.Вид                 			= ВидГруппыФормы.ОбычнаяГруппа;
			Группа.ОтображатьЗаголовок 			= Ложь;
			Группа.Отображение         			= ОтображениеОбычнойГруппы.Нет;
			Группа.Группировка					= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			Группа.РастягиватьПоГоризонтали		= Ложь;	
			// Заголовок КИ
			Элемент 							= Элементы.Добавить("КИЗаголовок" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= Строка(СтрокаКИ.Вид) + ":";
			Элемент.Ширина						= 16;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			// Представление КИ
			Элемент 							= Элементы.Добавить("КИПредставление" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= СтрокаКИ.Представление;
			Элемент.Ширина						= 15;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			// Надпись "Заменить"
			Элемент 							= Элементы.Добавить("КИЗаменить" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= НСтр("ru='Заменить'");
			Элемент.Ширина						= 7;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			Элемент.Гиперссылка					= Истина;
			Элемент.УстановитьДействие("Нажатие", "Подключаемый_КИЗаменить"); 
			// Надпись "Добавить"
			Элемент 							= Элементы.Добавить("КИДобавить" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= НСтр("ru='Добавить'");
			Элемент.Ширина						= 7;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			Элемент.Гиперссылка					= Истина;
			Элемент.УстановитьДействие("Нажатие", "Подключаемый_КИДобавить"); 
		КонецЦикла;
	Иначе	
		Элементы.ГруппаНайденныйКонтактКИТелефоны.Видимость	= Ложь;
	КонецЕсли;	
	Если ПоискПоEmail Тогда
		Элементы.ГруппаНайденныйКонтактКИАдреса.Видимость	= Истина;
		МассивEmail	= ПолучитьКИКонтакта(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Для Каждого СтрокаКИ Из МассивEmail Цикл
			Если СтрокаКИ.НомерСтроки = 0 Тогда
				ПустойНомер		= ПустойНомер + 1;
				НомерСтрокиКИ	= "_" + Строка(ПустойНомер);
			Иначе
				НомерСтрокиКИ	= Строка(СтрокаКИ.НомерСтроки);
			КонецЕсли;	
			// Добавляем группу для элементов.
			Группа								= Элементы.Добавить("КИКонтактаГруппа" + НомерСтрокиКИ, Тип("ГруппаФормы"),  Элементы.ГруппаНайденныйКонтактАдреса);
			Группа.Вид                 			= ВидГруппыФормы.ОбычнаяГруппа;
			Группа.ОтображатьЗаголовок 			= Ложь;
			Группа.Отображение         			= ОтображениеОбычнойГруппы.Нет;
			Группа.Группировка					= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			Группа.РастягиватьПоГоризонтали		= Ложь;	
			// Заголовок КИ
			Элемент 							= Элементы.Добавить("КИЗаголовок" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= Строка(СтрокаКИ.Вид) + ":";
			Элемент.Ширина						= 16;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			// Представление КИ
			Элемент 							= Элементы.Добавить("КИПредставление" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= СтрокаКИ.Представление;
			Элемент.Ширина						= 15;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			// Надпись "Заменить"
			Элемент 							= Элементы.Добавить("КИЗаменить" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= НСтр("ru='Заменить'");
			Элемент.Ширина						= 7;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			Элемент.Гиперссылка					= Истина;
			Элемент.УстановитьДействие("Нажатие", "Подключаемый_КИЗаменить"); 
			// Надпись "Добавить"
			Элемент 							= Элементы.Добавить("КИДобавить" + НомерСтрокиКИ, Тип("ДекорацияФормы"), Группа);
			Элемент.Вид							= ВидДекорацииФормы.Надпись;
			Элемент.Заголовок					= НСтр("ru='Добавить'");
			Элемент.Ширина						= 7;
			Элемент.РастягиватьПоГоризонтали	= Ложь;	
			Элемент.Гиперссылка					= Истина;
			Элемент.УстановитьДействие("Нажатие", "Подключаемый_КИДобавить"); 
		КонецЦикла;
	Иначе	
		Элементы.ГруппаНайденныйКонтактКИАдреса.Видимость	= Ложь;
	КонецЕсли;	
КонецПроцедуры	

&НаСервереБезКонтекста
// Преобразовать список полей в строку.
//
Функция ПреобразоватьСписокПолейВСтроку(СоответствиеПолей)
	
	Результат = "";
	Для Каждого Элемент Из СоответствиеПолей Цикл
		
		Значение = Элемент.Значение;
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + ?(Результат = "", "", Символы.ПС) + 
			Элемент.Представление + "=" + СтрЗаменить(Значение, Символы.ПС, Символы.ПС + Символы.Таб);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
// Создает нового клиента по заполненым полям.
//
Функция СоздатьНовогоКлиента()
	
	ТекстСообщения = "";
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		Отказ = НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН,ВидПартнера = Перечисления.КомпанияЧастноеЛицо.Компания,ТекстСообщения);
		Если Отказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИНН");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
	НовыйПартнер.Заполнить(Неопределено);
	
	НовыйПартнер.ЮрФизЛицо			= ВидПартнера;
	НовыйПартнер.Наименование				= Наименование;
	НовыйПартнер.НаименованиеПолное			= ?(ЗначениеЗаполнено(НаименованиеПолное),НаименованиеПолное,Наименование);
	
	Если ВидПартнера = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		НовыйПартнер.CRM_Фамилия			= Фамилия;
		НовыйПартнер.CRM_Имя				= Имя;
		НовыйПартнер.CRM_Отчество			= Отчество;
		НовыйПартнер.Пол	 				= Пол;
	
	КонецЕсли;
	
	НовыйПартнер.БизнесРегион				= БизнесРегион;
	НовыйПартнер.Родитель					= ГоловноеПредприятие;
	НовыйПартнер.CRM_ИНН					= ИНН;
	НовыйПартнер.CRM_КПП					= КПП;
	НовыйПартнер.CRM_КодПоОКПО				= ОКПО;
	Если ЗначениеЗаполнено(ОГРН) И НЕ (ОГРН = "0") Тогда
		НовыйПартнер.CRM_ОГРН				= ОГРН;	
	КонецЕсли;		
	
	НовыйПартнер.CRM_ОсновнаяОтрасль		= ОсновнаяОтрасль;
	НовыйПартнер.ОсновнойМенеджер			= ОсновнойМенеджер;
	// НовыйПартнер.ГруппаДоступа				= ГруппаДоступа; // // только для спарки с УТ11.
	НовыйПартнер.Комментарий				= Комментарий;
	НовыйПартнер.CRM_НапоминатьОДнеРождения	= Истина;
	НовыйПартнер.ДатаРегистрации			= ТекущаяДата();
	CRM_ЗаписатьВсеТипыОтношений(НовыйПартнер);
	
	Если ЗначениеЗаполнено(ВидТелефонаКлиента) И ЗначениеЗаполнено(Телефон) Тогда
		Если НЕ ПустаяСтрока(КодСтраны) И (Найти(КодСтраны, "+") = 0) Тогда
			КодСтраныСтрока = "+" + КодСтраны;
		Иначе
			КодСтраныСтрока = КодСтраны;
		КонецЕсли;	
		СписокПолей 			= Новый СписокЗначений;
		СписокПолей.Добавить(КодСтраныСтрока,   "КодСтраны");
		СписокПолей.Добавить(КодГорода,     	"КодГорода");
		СписокПолей.Добавить(Телефон, 			"НомерТелефона");
		СписокПолей.Добавить(ДобНомер,    		"Добавочный");
		СписокПолей.Добавить("",   				"Комментарий");
		
		НовыйКонтакт				= НовыйПартнер.КонтактнаяИнформация.Добавить();
		НовыйКонтакт.ЗначенияПолей	= ПреобразоватьСписокПолейВСтроку(СписокПолей);
		НовыйКонтакт.Вид			= ВидТелефонаКлиента;
		НовыйКонтакт.Тип			= ВидТелефонаКлиента.Тип;
		
		Представление = СокрЛП(КодСтраныСтрока);
		Если Не ПустаяСтрока(КодГорода) Тогда
			Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КодГорода) + ")";
		КонецЕсли;
		Если Не ПустаяСтрока(Телефон) Тогда
			Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(Телефон);
		КонецЕсли;
		Если НЕ ПустаяСтрока(ДобНомер) Тогда
			Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(ДобНомер);
		КонецЕсли;
		
		НовыйКонтакт.Представление 			= Представление;
		НовыйКонтакт.НомерТелефона 			= Представление;
		НовыйКонтакт.НомерТелефонаБезКодов 	= СокрЛП(Телефон);
		НовыйКонтакт.CRM_ОсновнойДляСвязи	= Истина;		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидEmailКлиента) И ЗначениеЗаполнено(Email) Тогда
		НовыйКонтакт 						= НовыйПартнер.КонтактнаяИнформация.Добавить();
		НовыйКонтакт.Вид					= ВидEmailКлиента;
		НовыйКонтакт.Тип					= ВидEmailКлиента.Тип;
		НовыйКонтакт.Представление 			= СокрЛП(Email);
		НовыйКонтакт.CRM_ОсновнойДляСвязи	= Истина;
		
		Попытка
			Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Email);
		Исключение
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			Возврат Неопределено;
		КонецПопытки;
		
		Если Результат.Количество() > 0 Тогда
			НовыйКонтакт.АдресЭП = Результат[0].Адрес;
			
			Поз = Найти(НовыйКонтакт.АдресЭП, "@");
			Если Поз <> 0 Тогда
				НовыйКонтакт.ДоменноеИмяСервера = Сред(НовыйКонтакт.АдресЭП, Поз+1);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидАдреса) И ЗначениеЗаполнено(Адрес) Тогда 
		Для Каждого Стр Из КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			Если Стр.ИмяРеквизита = "Адрес" Тогда
				ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Стр.ЗначенияПолей);
				УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовыйПартнер, ДанныеКИ, ВидАдреса, ВидАдреса.Тип);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// заполнение КЛ
	Если ЗначениеЗаполнено(ФамилияКонтактногоЛица) ИЛИ ЗначениеЗаполнено(ИмяКонтактногоЛица) ИЛИ ЗначениеЗаполнено(ОтчествоКонтактногоЛица) Тогда
		КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
		
		КонтактноеЛицо.Наименование 	= СокрЛП((?(ЗначениеЗаполнено(ФамилияКонтактногоЛица),   			СокрЛП(ФамилияКонтактногоЛица) + " ", "")
									+ ?(ЗначениеЗаполнено(ИмяКонтактногоЛица), 	 				СокрЛП(ИмяКонтактногоЛица) + " ", "")
									+ ?(ЗначениеЗаполнено(ОтчествоКонтактногоЛица),  			СокрЛП(ОтчествоКонтактногоЛица), "")));   
		КонтактноеЛицо.CRM_Фамилия					= ФамилияКонтактногоЛица;
		КонтактноеЛицо.CRM_Имя						= ИмяКонтактногоЛица;
		КонтактноеЛицо.CRM_Отчество					= ОтчествоКонтактногоЛица;
		
		КонтактноеЛицо.Пол							= ПолКонтактноеЛицо;
		КонтактноеЛицо.CRM_Состояние				= Перечисления.CRM_Состояние.Работает;
		КонтактноеЛицо.CRM_Должность				= Должность;
		КонтактноеЛицо.CRM_НапоминатьОДнеРождения	= Истина;
		КонтактноеЛицо.ДатаРегистрацииСвязи = ТекущаяДата();

		Если ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица) И ЗначениеЗаполнено(ТелефонКонтактногоЛица) Тогда
			Если НЕ ПустаяСтрока(КодСтраныКонтактногоЛица) И (Найти(КодСтраныКонтактногоЛица, "+") = 0) Тогда
				КодСтраныСтрока = "+" + КодСтраныКонтактногоЛица;
			Иначе
				КодСтраныСтрока = КодСтраныКонтактногоЛица;
			КонецЕсли;				
			НовыйКонтакт 			= КонтактноеЛицо.КонтактнаяИнформация.Добавить();
			СписокПолей 			= Новый СписокЗначений;
			СписокПолей.Добавить(КодСтраныСтрока,     				"КодСтраны");
			СписокПолей.Добавить(КодГородаКонтактногоЛица,     		"КодГорода");
			СписокПолей.Добавить(ТелефонКонтактногоЛица, 			"НомерТелефона");
			СписокПолей.Добавить(ДобНомерКонтактногоЛица,    		"Добавочный");
			СписокПолей.Добавить("",   				"Комментарий");
			НовыйКонтакт.ЗначенияПолей = ПреобразоватьСписокПолейВСтроку(СписокПолей);
			
			НовыйКонтакт.Вид			= ВидТелефонаКонтактногоЛица;
			НовыйКонтакт.Тип			= ВидТелефонаКонтактногоЛица.Тип;
			
			Представление = СокрЛП(КодСтраныСтрока);
			Если Не ПустаяСтрока(КодГородаКонтактногоЛица) Тогда
				Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КодГородаКонтактногоЛица) + ")";
			КонецЕсли;
			Если Не ПустаяСтрока(ТелефонКонтактногоЛица) Тогда
				Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(ТелефонКонтактногоЛица);
			КонецЕсли;
			Если НЕ ПустаяСтрока(ДобНомерКонтактногоЛица) Тогда
				Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(ДобНомерКонтактногоЛица);
			КонецЕсли;
			
			НовыйКонтакт.Представление 			= Представление;
			НовыйКонтакт.НомерТелефона 			= Представление;
			НовыйКонтакт.НомерТелефонаБезКодов 	= СокрЛП(Телефон);
			НовыйКонтакт.CRM_ОсновнойДляСвязи	= Истина;					
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидEmailКонтактногоЛица) И ЗначениеЗаполнено(EmailКонтактногоЛица) Тогда
			НовыйКонтакт 						= КонтактноеЛицо.КонтактнаяИнформация.Добавить();
			НовыйКонтакт.Вид					= ВидEmailКонтактногоЛица;
			НовыйКонтакт.Тип					= ВидEmailКонтактногоЛица.Тип;
			НовыйКонтакт.Представление 			= СокрЛП(EmailКонтактногоЛица);
			НовыйКонтакт.CRM_ОсновнойДляСвязи	= Истина;
			
			Попытка
				Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(EmailКонтактногоЛица);
			Исключение
				СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Возврат Неопределено;
			КонецПопытки;
			
			Если Результат.Количество() > 0 Тогда
				НовыйКонтакт.АдресЭП = Результат[0].Адрес;
				
				Поз = Найти(НовыйКонтакт.АдресЭП, "@");
				Если Поз <> 0 Тогда
					НовыйКонтакт.ДоменноеИмяСервера = Сред(НовыйКонтакт.АдресЭП, Поз+1);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			
			НовыйПартнер.Записать();
			КонтактноеЛицо.Владелец = НовыйПартнер.Ссылка;
			КонтактноеЛицо.Записать();
			НовыйПартнер.CRM_ОсновноеКонтактноеЛицо = КонтактноеЛицо.Ссылка;
			НайденныйКонтакт	= КонтактноеЛицо.Ссылка;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	Попытка
		НовыйПартнер.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;		
	КонецПопытки;
	
	Попытка
		Если ПотенциальныйКлиент <> Справочники.CRM_ПотенциальныеКлиенты.ПустаяСсылка() Тогда
			ПотенциальныйКлиентОбъект = ПотенциальныйКлиент.ПолучитьОбъект();
			
			ПотенциальныйКлиентОбъект.Партнер = НовыйПартнер.Ссылка;
			
			ПотенциальныйКлиентОбъект.Записать();
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат НовыйПартнер.Ссылка;
	
КонецФункции

&НаСервере
// Создает новый контакт клиента по заполненым полям.
//
// Параметры:
//	Клиент	- СправочникСсылка	- Владелец контакта.
//
// Возвращаеоме значение:
//	СправочникСсылка	- Созданный контакт.
//
Функция СоздатьНовыйКонтакт(Клиент)
	
	ТекстСообщения = "";
	// Заполнение КЛ
	Если ЗначениеЗаполнено(ФамилияКонтактногоЛица) ИЛИ ЗначениеЗаполнено(ИмяКонтактногоЛица) ИЛИ ЗначениеЗаполнено(ОтчествоКонтактногоЛица) Тогда
		КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
		КонтактноеЛицо.Владелец			= Клиент;
		КонтактноеЛицо.Наименование 	= СокрЛП((?(ЗначениеЗаполнено(ФамилияКонтактногоЛица),   			СокрЛП(ФамилияКонтактногоЛица) + " ", "")
									+ ?(ЗначениеЗаполнено(ИмяКонтактногоЛица), 	 				СокрЛП(ИмяКонтактногоЛица) + " ", "")
									+ ?(ЗначениеЗаполнено(ОтчествоКонтактногоЛица),  			СокрЛП(ОтчествоКонтактногоЛица), "")));   
		КонтактноеЛицо.CRM_Фамилия					= ФамилияКонтактногоЛица;
		КонтактноеЛицо.CRM_Имя						= ИмяКонтактногоЛица;
		КонтактноеЛицо.CRM_Отчество					= ОтчествоКонтактногоЛица;
		
		КонтактноеЛицо.Пол							= ПолКонтактноеЛицо;
		КонтактноеЛицо.CRM_Состояние				= Перечисления.CRM_Состояние.Работает;
		КонтактноеЛицо.CRM_Должность				= Должность;
		КонтактноеЛицо.CRM_НапоминатьОДнеРождения	= Истина;
		КонтактноеЛицо.ДатаРегистрацииСвязи = ТекущаяДата();

		Если ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица) И ЗначениеЗаполнено(ТелефонКонтактногоЛица) Тогда
			Если НЕ ПустаяСтрока(КодСтраныКонтактногоЛица) И (Найти(КодСтраныКонтактногоЛица, "+") = 0) Тогда
				КодСтраныСтрока = "+" + КодСтраныКонтактногоЛица;
			Иначе
				КодСтраныСтрока = КодСтраныКонтактногоЛица;
			КонецЕсли;				
			НовыйКонтакт 			= КонтактноеЛицо.КонтактнаяИнформация.Добавить();
			СписокПолей 			= Новый СписокЗначений;
			СписокПолей.Добавить(КодСтраныСтрока,     				"КодСтраны");
			СписокПолей.Добавить(КодГородаКонтактногоЛица,     		"КодГорода");
			СписокПолей.Добавить(ТелефонКонтактногоЛица, 			"НомерТелефона");
			СписокПолей.Добавить(ДобНомерКонтактногоЛица,    		"Добавочный");
			СписокПолей.Добавить("",   				"Комментарий");
			НовыйКонтакт.ЗначенияПолей = ПреобразоватьСписокПолейВСтроку(СписокПолей);
			
			НовыйКонтакт.Вид			= ВидТелефонаКонтактногоЛица;
			НовыйКонтакт.Тип			= ВидТелефонаКонтактногоЛица.Тип;
			
			Представление = СокрЛП(КодСтраныСтрока);
			Если Не ПустаяСтрока(КодГородаКонтактногоЛица) Тогда
				Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КодГородаКонтактногоЛица) + ")";
			КонецЕсли;
			Если Не ПустаяСтрока(ТелефонКонтактногоЛица) Тогда
				Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(ТелефонКонтактногоЛица);
			КонецЕсли;
			Если НЕ ПустаяСтрока(ДобНомерКонтактногоЛица) Тогда
				Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(ДобНомерКонтактногоЛица);
			КонецЕсли;
			
			НовыйКонтакт.Представление 			= Представление;
			НовыйКонтакт.НомерТелефона 			= Представление;
			НовыйКонтакт.НомерТелефонаБезКодов 	= СокрЛП(Телефон);
			НовыйКонтакт.CRM_ОсновнойДляСвязи	= Истина;					
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидEmailКонтактногоЛица) И ЗначениеЗаполнено(EmailКонтактногоЛица) Тогда
			НовыйКонтакт 						= КонтактноеЛицо.КонтактнаяИнформация.Добавить();
			НовыйКонтакт.Вид					= ВидEmailКонтактногоЛица;
			НовыйКонтакт.Тип					= ВидEmailКонтактногоЛица.Тип;
			НовыйКонтакт.Представление 			= СокрЛП(EmailКонтактногоЛица);
			НовыйКонтакт.CRM_ОсновнойДляСвязи	= Истина;
			
			Попытка
				Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(EmailКонтактногоЛица);
			Исключение
				СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Возврат Неопределено;
			КонецПопытки;
			
			Если Результат.Количество() > 0 Тогда
				НовыйКонтакт.АдресЭП = Результат[0].Адрес;
				
				Поз = Найти(НовыйКонтакт.АдресЭП, "@");
				Если Поз <> 0 Тогда
					НовыйКонтакт.ДоменноеИмяСервера = Сред(НовыйКонтакт.АдресЭП, Поз+1);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			КонтактноеЛицо.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		НайденныйКонтакт = КонтактноеЛицо.Ссылка;
		Возврат КонтактноеЛицо.Ссылка;
	Иначе	
		Возврат Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецЕсли;
	
	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтактноеЛицо(ТекПартнер)
	
	Возврат ТекПартнер.CRM_ОсновноеКонтактноеЛицо;
	
КонецФункции

&НаКлиенте
Процедура НайтиПартнера(Команда)
	Если НЕ ПроверкаЗаполнения() Тогда Возврат; КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("НайтиПартнераЗавершение", ЭтотОбъект);
	НайтиДубли(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура НайтиПартнераЗавершение(НайденыДубли, ДополнительныеПараметры) Экспорт
	Если НайденыДубли Тогда Возврат КонецЕсли; 
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Совпадений не найдено'"));
КонецПроцедуры

&НаКлиенте
// Процедура создает нового клиента и создает документ Событие.
//
Процедура ЗарегистрироватьКлиентаИИнтерес(Команда)
	Если НЕ ПроверкаЗаполнения() Тогда Возврат; КонецЕсли;
	Если ЗначениеЗаполнено(НайденныйКлиент) Тогда
		Если НЕ ЗначениеЗаполнено(НайденныйКонтакт) Тогда
			НайденныйКонтакт	= СоздатьНовыйКонтакт(НайденныйКлиент);
		КонецЕсли;	
		Если ЗначениеЗаполнено(НайденныйКонтакт) Тогда
			Если ЗначениеЗаполнено(сфпЗвонок) Тогда
				Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, НайденныйКлиент));				
			КонецЕсли;				
			Если ЗначениеЗаполнено(сфпИнтерес) Тогда
				Оповестить("СозданКонтактДляИнтереса", Новый Структура("сфпИнтерес, Контакт", сфпИнтерес, НайденныйКлиент));
			КонецЕсли;							
			Структура = Новый Структура();
			Структура.Вставить("Партнер",			НайденныйКлиент);
			Структура.Вставить("КонтактноеЛицо",	НайденныйКонтакт);
			ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", Структура);
			Закрыть();
		КонецЕсли;
	Иначе	
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьКлиентаИИнтересЗавершение", ЭтотОбъект);
		НайтиДубли(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура создает нового клиента и создает документ Событие.
//
Процедура ЗарегистрироватьКлиентаИИнтересЗавершение(НайденыДубли, ДополнительныеПараметры) Экспорт
	Если НайденыДубли Тогда Возврат КонецЕсли; 
	НайденныйКлиент = СоздатьНовогоКлиента();
	Если ЗначениеЗаполнено(НайденныйКлиент) Тогда 
		Если НЕ ЗначениеЗаполнено(НайденныйКонтакт) Тогда
			НайденныйКонтакт	= СоздатьНовыйКонтакт(НайденныйКлиент);
		КонецЕсли;	
		Если ЗначениеЗаполнено(сфпЗвонок) Тогда
			Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, НайденныйКлиент));				
		КонецЕсли;				
		Если ЗначениеЗаполнено(сфпИнтерес) Тогда
			Оповестить("СозданКонтактДляИнтереса", Новый Структура("сфпИнтерес, Контакт", сфпИнтерес, НайденныйКлиент));
		КонецЕсли;							
		Структура = Новый Структура();
		Структура.Вставить("Партнер",			НайденныйКлиент);
		Структура.Вставить("КонтактноеЛицо",	НайденныйКонтакт);
		ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", Структура);
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура создает нового клиента.
//
Процедура ЗарегистрироватьКлиента(Команда)
	Если НЕ ПроверкаЗаполнения() Тогда Возврат; КонецЕсли;
	Если ЗначениеЗаполнено(НайденныйКлиент) Тогда
		Если НЕ ЗначениеЗаполнено(НайденныйКонтакт) Тогда
			НайденныйКонтакт	= СоздатьНовыйКонтакт(НайденныйКлиент);
		КонецЕсли;	
		Если ЗначениеЗаполнено(НайденныйКонтакт) Тогда
			Если ЗначениеЗаполнено(сфпЗвонок) Тогда
				Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, НайденныйКлиент));				
			КонецЕсли;				
			Если ЗначениеЗаполнено(сфпИнтерес) Тогда
				Оповестить("СозданКонтактДляИнтереса", Новый Структура("сфпИнтерес, Контакт", сфпИнтерес, НайденныйКлиент));
			КонецЕсли;							
			Если ОткрытьКарточкуКлиента Тогда
				ПоказатьЗначение(, НайденныйКлиент);
			КонецЕсли;
			Если СоздаемИзВходящегоПисьма Тогда
				Оповестить("Создан новый партнер из письма", НайденныйКонтакт);
			Иначе
				Оповестить("Создан новый партнер", НайденныйКонтакт, ЭтотОбъект);
			КонецЕсли;
			Закрыть();
		КонецЕсли;	
	Иначе	
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьКлиентаЗавершение", ЭтотОбъект);
		НайтиДубли(ОписаниеОповещения);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
// Процедура создает нового клиента.
//
Процедура ЗарегистрироватьКлиентаЗавершение(НайденыДубли, ДополнительныеПараметры) Экспорт
	
	Если НайденыДубли Тогда Возврат; КонецЕсли;
	НайденныйКлиент = СоздатьНовогоКлиента();
	Если ЗначениеЗаполнено(НайденныйКлиент) Тогда 
		Если НЕ ЗначениеЗаполнено(НайденныйКонтакт) Тогда
			НайденныйКонтакт	= СоздатьНовыйКонтакт(НайденныйКлиент);
		КонецЕсли;	
		Если ЗначениеЗаполнено(сфпЗвонок) Тогда
			Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, НайденныйКлиент));				
		КонецЕсли;				
		Если ЗначениеЗаполнено(сфпИнтерес) Тогда
			Оповестить("СозданКонтактДляИнтереса", Новый Структура("сфпИнтерес, Контакт", сфпИнтерес, НайденныйКлиент));
		КонецЕсли;							
		Если ОткрытьКарточкуКлиента Тогда
			ПоказатьЗначение(, НайденныйКлиент);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденныйКонтакт) Тогда
			Если СоздаемИзВходящегоПисьма  Тогда
				Оповестить("Создан новый партнер из письма", НайденныйКонтакт);
			Иначе
				Оповестить("Создан новый партнер", НайденныйКонтакт, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция создает Структуру реквизитов для поиска партнеров.
//
Функция СоздатьСтруктуруПоиска()
	СтруктураПоиска = Новый Структура;
	ЗначениеХранилища = Константы.CRM_РеквизитыПоискаДублейПартнеров.Получить();
	РеквизитыПоиска = ЗначениеХранилища.Получить();
	Если НЕ (РеквизитыПоиска = Неопределено) Тогда
		Если ТипЗнч(РеквизитыПоиска) = Тип("СписокЗначений") Тогда
			Для Каждого СтрокаСписка Из РеквизитыПоиска Цикл
				Если СтрокаСписка.Пометка Тогда	
					Значение = СтрокаСписка.Значение;
					ТочкаСЗапятой = Найти(Значение, ";");
					СтруктураПоиска.Вставить(Сред(Значение, 1, ТочкаСЗапятой - 1), Сред(Значение, ТочкаСЗапятой + 1));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураПоиска;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФИОИзНаименования(Знач СтрНаименование)
	Пока Найти(СтрНаименование, "  ") > 0 Цикл
		СтрНаименование = СтрЗаменить(СтрНаименование, "  ", " ");
	КонецЦикла;
	
	СтруктураРезультат = Новый Структура("Фамилия,Имя,Отчество", "", "", "");
	
	СтрНаименование = СтрЗаменить(СтрНаименование, " ", Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрНаименование) Цикл
		ТекСтр = СтрПолучитьСтроку(СтрНаименование, НомерСтроки);
		Если НомерСтроки = 1 Тогда
			СтруктураРезультат.Фамилия = ТекСтр;
		ИначеЕсли НомерСтроки = 2 Тогда
			СтруктураРезультат.Имя = ТекСтр;
		ИначеЕсли НомерСтроки = 3 Тогда
			СтруктураРезультат.Отчество = ТекСтр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаКлиенте
Процедура УстановитьВидимостьКПП()
	
	Если ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		Элементы.КПП.Видимость 		   			 = Ложь;
		Элементы.ОКПО.Видимость 	   			 = Ложь;
	Иначе
		Элементы.КПП.Видимость 	   	  			 = Истина;
		Элементы.ОКПО.Видимость 	   			 = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьФИОНаименование()
	
	Если ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		Элементы.ГруппаФИО.Видимость					= Истина;
		Элементы.ГруппаФИОЗаголовок.Видимость			= Истина;
		Элементы.ГруппаНаименование.Видимость			= Ложь;
		Элементы.ГруппаНаименованиеЗаголовок.Видимость	= Ложь;
	Иначе
		Элементы.ГруппаФИО.Видимость					= Ложь;
		Элементы.ГруппаФИОЗаголовок.Видимость			= Ложь;
		Элементы.ГруппаНаименование.Видимость			= Истина;
		Элементы.ГруппаНаименованиеЗаголовок.Видимость	= Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ВидПартнера 		= Перечисления.КомпанияЧастноеЛицо.Компания;
	ВидПартнера = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойВидКлиента");
	Если НЕ ЗначениеЗаполнено(ВидПартнера) Тогда
		ВидПартнера 		= Перечисления.КомпанияЧастноеЛицо.Компания;
	КонецЕсли;	
	ОсновнойМенеджер	= Пользователи.ТекущийПользователь();		
	ИзменитьПараметрыВыбораВидаТелефона();
	ИзменитьПараметрыВыбораВидаАдреса();
	ИзменитьПараметрыВыбораВидаEmail();
	
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		ЗначенияЗаполнения = Параметры.ЗначенияЗаполнения;
		Если ЗначенияЗаполнения.Свойство("Родитель") Тогда
			ГоловноеПредприятие = ЗначенияЗаполнения.Родитель;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Основание") Тогда
		
		Основание = Параметры.Основание;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			
			Email 						= Основание.ОтправительАдрес;	
			
			ВидEmailКонтактногоЛица		= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
			EmailКонтактногоЛица		= Основание.ОтправительАдрес;
			
			ОткрытьКарточкуКлиента		= Ложь;
			СоздаемИзВходящегоПисьма 	= Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// +СофтФон
	// Если передан телефон, то добавим его в контактную информацию.
	Если Параметры.Свойство("Телефон") Тогда
		СтруктураНомера = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Параметры.Телефон);
		Если Найти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			ВидТелефонаКлиента = Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица;
			ВидПартнера = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Иначе	
			ВидТелефонаКлиента = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			ВидПартнера = Перечисления.КомпанияЧастноеЛицо.Компания;
		КонецЕсли;	
		ИзменитьПараметрыВыбораВидаТелефона();
		КодСтраны 	= СтруктураНомера.КодСтраны;
		КодГорода 	= СтруктураНомера.КодГорода;
		Телефон		= СтруктураНомера.НомерТелефона;
		// Иначе, если подключен СофтФон, то берем коды из настроек Софтфона.
	ИначеЕсли сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		сфпПараметрыСервера	= сфпСофтФонПроСервер.сфпПараметрыСервера();
		КодСтраны 	= сфпПараметрыСервера.КодСтраны;
		КодГорода 	= сфпПараметрыСервера.КодГорода;
	КонецЕсли;
	Если Параметры.Свойство("Звонок") Тогда
		сфпЗвонок = Параметры.Звонок;
	КонецЕсли;			
	Если Параметры.Свойство("Интерес") Тогда
		сфпИнтерес = Параметры.Интерес;
	КонецЕсли;				
	// -СофтФон
	
	Если Параметры.Свойство("ПараметрыНового") Тогда
		Наименование		= Параметры.ПараметрыНового.Наименование;
		ВидEmailКлиента		= Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		Email				= Параметры.ПараметрыНового.АдресПочты;
	КонецЕсли;
	
	Если Параметры.Свойство("ПотенциальныйКлиент") И ЗначениеЗаполнено(Параметры.ПотенциальныйКлиент) Тогда
		
		ПотенциальныйКлиент	= Параметры.ПотенциальныйКлиент;
		Наименование		= ПотенциальныйКлиент.Наименование;
		НаименованиеПолное	= Наименование;

		ВидТелефонаКонтактногоЛица			= Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		СтрокаТелефонаПотенциальногоКлиента	= ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента, "Вид");
		
		Если НЕ (СтрокаТелефонаПотенциальногоКлиента = Неопределено) Тогда
			Если ЗначениеЗаполнено(СтрокаТелефонаПотенциальногоКлиента.Представление) Тогда
				СтруктураКИ = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтрокаТелефонаПотенциальногоКлиента.Представление);
			Иначе
				СтруктураКИ = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТелефонаПотенциальногоКлиента.ЗначенияПолей);
			КонецЕсли;
			КодСтраныКонтактногоЛица 	= СтруктураКИ.КодСтраны;
			КодГородаКонтактногоЛица	= СтруктураКИ.КодГорода;
			ТелефонКонтактногоЛица		= СтруктураКИ.НомерТелефона;
		КонецЕсли;
		
		ВидEmailКонтактногоЛица	= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		СтрокаЭлектронногоАдресаПотенциальногоКлиента = ПотенциальныйКлиент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента, "Вид");
		
		Если НЕ (СтрокаЭлектронногоАдресаПотенциальногоКлиента = Неопределено) Тогда
			EmailКонтактногоЛица = СтрокаЭлектронногоАдресаПотенциальногоКлиента.Представление;
		КонецЕсли;
		
		Элементы.ОткрытьКарточкуКлиента.Видимость					= Ложь;
		Элементы.ЗарегистрироватьКлиентаИВвестиИнтерес.Видимость	= Ложь;
		
		ОткрытьКарточкуКлиента = Ложь;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ПотенциальныйКлиентСтруктура") Тогда
		
		ПотенциальныйКлиентСтруктура = Параметры.ПотенциальныйКлиентСтруктура;
		
		Наименование = ПотенциальныйКлиентСтруктура.Наименование;
		НаименованиеПолное = Наименование;
		
		ФИОКЛ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Наименование, " ");
		
		Если ФИОКЛ.Количество() > 0 Тогда
			ФамилияКонтактногоЛица = ФИОКЛ[0];
		КонецЕсли;
		Если ФИОКЛ.Количество() > 1 Тогда
			ИмяКонтактногоЛица = ФИОКЛ[1];
		КонецЕсли;
		Если ФИОКЛ.Количество() > 2 Тогда
			ОтчествоКонтактногоЛица = ФИОКЛ[2];
		КонецЕсли;
		
		ВидТелефонаКонтактногоЛица = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		
		Если НЕ (ПотенциальныйКлиентСтруктура.Телефон = "") Тогда
			
			ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента;
			
			СтруктураКИ = сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(ПотенциальныйКлиентСтруктура.Телефон);
			
			КодСтраныКонтактногоЛица = СтруктураКИ.КодСтраны;
			КодГородаКонтактногоЛица = СтруктураКИ.КодГорода;
			ТелефонКонтактногоЛица	 = СтруктураКИ.НомерТелефона;
			
		КонецЕсли;
		
		ВидEmailКонтактногоЛица	= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		EmailКонтактногоЛица = ПотенциальныйКлиентСтруктура.АдресЭП;
		
		Элементы.ОткрытьКарточкуКлиента.Видимость					= Ложь;
		Элементы.ЗарегистрироватьКлиентаИВвестиИнтерес.Видимость	= Ложь;
		
		ОткрытьКарточкуКлиента = Ложь;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ИнициализироватьРеквизитыФормыКонтрагент(ЭтотОбъект);
	// +CRM
	РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется = Ложь;
	// -CRM
	
	//ПроверкаКонтрагентовИспользуется = ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно();
	                              
	//РеквизитыПроверкиКонтрагентов.ПроверкаИспользуется = Ложь;
	//РеквизитыПроверкиКонтрагентов.НужноПоказатьПредложениеВключитьПроверкуКонтрагентов =
	//	НужноПоказатьПредложениеВключитьПроверкуКонтрагентов();
	//
	//Если ПроверкаКонтрагентовИспользуется Тогда
	//	
	//	РеквизитыПроверкиКонтрагентов.СостояниеКонтрагента = "";
	//	
	//	ПроверкаКонтрагентовКлиентСервер.ПроверитьКонтрагентаИзКарточки(Форма, Истина);
	//	
	//КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") И НЕ (ВладелецФормы.Элементы.Найти("СтрокаПоиска") = Неопределено)
		И ЗначениеЗаполнено(ВладелецФормы.СтрокаПоиска) Тогда
		Если ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
			Наименование = ВладелецФормы.СтрокаПоиска;
			ПравоваяФорма = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ОсновнойМенеджер, "ПравоваяФормаКлиентаПоУмолчанию");
			НаименованиеПолное = ?(СокрЛП(ПравоваяФорма) = "" ,СокрЛП(Наименование),СокрЛП(ПравоваяФорма)+" """+СокрЛП(Наименование)+"""");
		Иначе
			Фамилия = ВладелецФормы.СтрокаПоиска;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) И Не ЗначениеЗаполнено(Фамилия) И Не ЗначениеЗаполнено(Имя) И Не ЗначениеЗаполнено(Отчество) Тогда
		СтруктураФИО = ФИОИзНаименования(Наименование);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураФИО);
	КонецЕсли;
	Если ЗначениеЗаполнено(Наименование) Тогда
		НаименованиеПриИзменении(Элементы.Наименование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПотенциальныйКлиент) Тогда
		Если ЗначениеЗаполнено(Наименование) 
		   И Не ЗначениеЗаполнено(ФамилияКонтактногоЛица) 
		   И Не ЗначениеЗаполнено(ИмяКонтактногоЛица) 
		   И Не ЗначениеЗаполнено(ОтчествоКонтактногоЛица) Тогда
		   
			СтруктураФИО = ФИОИзНаименования(Наименование);
			
		    ФамилияКонтактногоЛица  = СтруктураФИО.Фамилия;
			ИмяКонтактногоЛица 	    = СтруктураФИО.Имя;
			ОтчествоКонтактногоЛица = СтруктураФИО.Отчество;
			
		КонецЕсли;
		ВидEmailКонтактногоЛица = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица");
		ВидТелефонаКонтактногоЛица = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица");
		ВидТелефонаКонтактногоЛицаПриИзменении(Неопределено);
		ВидEmailКонтактногоЛицаПриИзменении(Неопределено);
		
		ОткрытьКарточкуКлиента = Ложь;
		
	КонецЕсли;
	
	CRM_ЗаполнитьВсеТипыОтношений();
	CRM_ЗаполнитьТипыОтношений();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.ГруппаТелефон.Доступность = ЗначениеЗаполнено(ВидТелефонаКлиента);
	Элементы.Email.Доступность = ЗначениеЗаполнено(ВидEmailКлиента);
	Элементы.Адрес.Доступность = ЗначениеЗаполнено(ВидАдреса);
	
	ЗаполнитьКИ_Описание(ВидАдреса);
	Если Параметры.Свойство("ПотенциальныйКлиентСтруктура") ИЛИ Параметры.Свойство("ПотенциальныйКлиент") Тогда
		ВидТелефонаКонтактногоЛица = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		ВидEmailКонтактногоЛица	= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		
		ОткрытьКарточкуКлиента = Ложь;
		
	КонецЕсли;
 	Элементы.ГруппаТелефонКонтактногоЛица.Доступность = ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица);
	Элементы.EmailКонтактногоЛица.Доступность = ЗначениеЗаполнено(ВидEmailКонтактногоЛица);
	
	Если ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		Элементы.КПП.Видимость							= Ложь;
		Элементы.ОКПО.Видимость							= Ложь;
		Элементы.ГруппаФИО.Видимость					= Истина;
		Элементы.ГруппаФИОЗаголовок.Видимость			= Истина;
		Элементы.ГруппаНаименование.Видимость			= Ложь;
		Элементы.ГруппаНаименованиеЗаголовок.Видимость	= Ложь;
	Иначе
		Элементы.КПП.Видимость							= Истина;
		Элементы.ОКПО.Видимость							= Истина;
		Элементы.ГруппаФИО.Видимость					= Ложь;
		Элементы.ГруппаФИОЗаголовок.Видимость			= Ложь;
		Элементы.ГруппаНаименование.Видимость			= Истина;
		Элементы.ГруппаНаименованиеЗаголовок.Видимость	= Истина;
		//Элементы.ГруппаКПП.Видимость 			= Истина;
		//Элементы.ГруппаФИО.Видимость			= Ложь;
		//Элементы.ГруппаНаименования.Видимость	= Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Изменение КПП" Тогда
		Если ЭтотОбъект.УникальныйИдентификатор = Источник Тогда 
			КПП = Параметр;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область ПроцедурыОбработчикиСобытийРеквизитов
&НаКлиенте
Процедура ВидПартнераПриИзменении(Элемент) Экспорт
	
	УстановитьВидимостьКПП();
	УстановитьВидимостьФИОНаименование();
	
	ИзменитьПараметрыВыбораВидаТелефона();
	ИзменитьПараметрыВыбораВидаАдреса();
	ИзменитьПараметрыВыбораВидаEmail();
	
	Если ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		Если ЗначениеЗаполнено(Наименование) Тогда
			СтруктураФИО = ФИОИзНаименования(Наименование);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураФИО);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Фамилия) Или ЗначениеЗаполнено(Имя) Или ЗначениеЗаполнено(Отчество) Тогда
			Наименование = СокрЛП(Фамилия);
			Наименование = Наименование + ?(ЗначениеЗаполнено(Наименование) И ЗначениеЗаполнено(СокрЛП(Имя)), " ", "") + СокрЛП(Имя);
			Наименование = Наименование + ?(ЗначениеЗаполнено(Наименование) И ЗначениеЗаполнено(СокрЛП(Отчество)), " ", "") + СокрЛП(Отчество);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидТелефонаКлиентаПриИзменении(Элемент)
	
	Элементы.ГруппаТелефон.Доступность = ЗначениеЗаполнено(ВидТелефонаКлиента);
	Если ЗначениеЗаполнено(ВидТелефонаКлиента) И ЗначениеЗаполнено(БизнесРегион) И ПустаяСтрока(Телефон) Тогда
		КодСтраны = ПолучитьЗначениеРеквизита(БизнесРегион, "CRM_КодСтраны");
		Элементы.КодСтраны.Заголовок = КодСтраны;
		КодГорода = ПолучитьЗначениеРеквизита(БизнесРегион, "CRM_КодГорода");
		Элементы.КодГорода.Заголовок = КодГорода;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидEmailКлиентаПриИзменении(Элемент)
	
	Элементы.Email.Доступность = ЗначениеЗаполнено(ВидEmailКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидТелефонаКонтактногоЛицаПриИзменении(Элемент)
	
	Элементы.ГруппаТелефонКонтактногоЛица.Доступность = ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица);
	Если ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица) И ЗначениеЗаполнено(БизнесРегион) И ПустаяСтрока(ТелефонКонтактногоЛица) Тогда
		КодСтраныКонтактногоЛица = ПолучитьЗначениеРеквизита(БизнесРегион, "CRM_КодСтраны");
		Элементы.КодСтраныКонтактногоЛица.Заголовок = КодСтраныКонтактногоЛица;
		КодГородаКонтактногоЛица = ПолучитьЗначениеРеквизита(БизнесРегион, "CRM_КодГорода");
		Элементы.КодГородаКонтактногоЛица.Заголовок = КодГородаКонтактногоЛица;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидEmailКонтактногоЛицаПриИзменении(Элемент)
	
	Элементы.EmailКонтактногоЛица.Доступность = ЗначениеЗаполнено(ВидEmailКонтактногоЛица);
	
КонецПроцедуры

&НаКлиенте
Процедура EmailПриИзменении(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура EmailКонтактногоЛицаПриИзменении(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидАдресаПриИзменении(Элемент)
	
	Элементы.Адрес.Доступность = ЗначениеЗаполнено(ВидАдреса);
	
	ЗаполнитьКИ_Описание(ВидАдреса);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	CRM_УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПриИзменении(Элемент)
	
	ЗаполнитьКИ_Описание(ВидАдреса)
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	
	Если (Не ПустаяСтрока(текФамилия) И текФамилия <> СокрЛП(Фамилия)) 
		 Или (ПустаяСтрока(Фамилия) И Не ПустаяСтрока(текФамилия)) Тогда
		
		Наименование = СокрЛП(СтрЗаменить(Наименование, текФамилия, СокрЛП(Фамилия)));
		
	ИначеЕсли ПустаяСтрока(Наименование) Тогда
		
		Наименование = СокрЛП(Фамилия);
		
	ИначеЕсли Не ПустаяСтрока(Фамилия) И ПустаяСтрока(текФамилия) Тогда
		
		Наименование = СокрЛП((?(ЗначениеЗаполнено(Фамилия),   	СокрЛП(Фамилия) + " ", "")
									+ ?(ЗначениеЗаполнено(Имя), 	 	СокрЛП(Имя) + " ", "")
									+ ?(ЗначениеЗаполнено(Отчество),  	СокрЛП(Отчество), "")));   
		
	КонецЕсли;
	
	текФамилия = СокрЛП(Фамилия);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	
	Если (Не ПустаяСтрока(текИмя) И текФамилия <> СокрЛП(Имя)) 
		 Или (ПустаяСтрока(Имя) И Не ПустаяСтрока(текИмя)) Тогда
		
		Наименование = СокрЛП(СтрЗаменить(Наименование, текИмя, СокрЛП(Имя)));
		
	ИначеЕсли ПустаяСтрока(Наименование) Тогда
		
		Наименование = СокрЛП(Имя);
		
	ИначеЕсли Не ПустаяСтрока(Имя) И ПустаяСтрока(текИмя) Тогда
		
		Наименование = СокрЛП((?(ЗначениеЗаполнено(Фамилия), 	 	СокрЛП(Фамилия) + " ", "")
									+ ?(ЗначениеЗаполнено(Имя), 		 	СокрЛП(Имя) + " ", "")
									+ ?(ЗначениеЗаполнено(Отчество),  		СокрЛП(Отчество), "")));   
		
	КонецЕсли;

	текИмя = СокрЛП(Имя);
	
	Пол = CRM_КлиентыКлиент.ОпределитьПол(Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
		
	Если (ПустаяСтрока(Отчество) И Не ПустаяСтрока(текОтчество)) Тогда
		
		Наименование = СокрЛП(СтрЗаменить(Наименование, текОтчество, СокрЛП(Отчество)));
		
	ИначеЕсли ПустаяСтрока(Наименование) Тогда
	
		Наименование = СокрЛП(Отчество);

	ИначеЕсли Не ПустаяСтрока(Отчество) И ПустаяСтрока(текОтчество) Тогда

		Наименование = Наименование + " " + СокрЛП(Отчество);
		
	КонецЕсли;
	
	текОтчество = СокрЛП(Отчество);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКонтактногоЛицаПриИзменении(Элемент)
	
	ПолКонтактноеЛицо = CRM_КлиентыКлиент.ОпределитьПол(ИмяКонтактногоЛица);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(НаименованиеПолное) И ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		ПравоваяФорма = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ОсновнойМенеджер, "ПравоваяФормаКлиентаПоУмолчанию");
		НаименованиеПолное = ?(СокрЛП(ПравоваяФорма) = "" ,СокрЛП(Наименование),СокрЛП(ПравоваяФорма)+" """+СокрЛП(Наименование)+"""");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесРегионПриИзменении(Элемент)
	Если ЗначениеЗаполнено(БизнесРегион) Тогда
		Если ЗначениеЗаполнено(ВидТелефонаКлиента) И ПустаяСтрока(Телефон) Тогда
			КодСтраны = ПолучитьЗначениеРеквизита(БизнесРегион, "CRM_КодСтраны");
			Элементы.КодСтраны.Заголовок = КодСтраны;
			КодГорода = ПолучитьЗначениеРеквизита(БизнесРегион, "CRM_КодГорода");
			Элементы.КодГорода.Заголовок = КодГорода;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидТелефонаКонтактногоЛица) И ПустаяСтрока(ТелефонКонтактногоЛица) Тогда
			КодСтраныКонтактногоЛица = ПолучитьЗначениеРеквизита(БизнесРегион, "CRM_КодСтраны");
			Элементы.КодСтраныКонтактногоЛица.Заголовок = КодСтраныКонтактногоЛица;
			КодГородаКонтактногоЛица = ПолучитьЗначениеРеквизита(БизнесРегион, "CRM_КодГорода");
			Элементы.КодГородаКонтактногоЛица.Заголовок = КодГородаКонтактногоЛица;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(ИНН) Тогда
		// Если КПП формируется стандартным образом по ИНН, то для КПП берутся 
		// первые 4 цифры ИНН + 01001, например:
		// ИНН 7712563009
		// КПП 771201001
		ЭтоЮрЛицо = (ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания"));
		Если РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
			КПП = Лев(ИНН, 4) + "01001";
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ИНН");
			КПП = "";
		КонецЕсли;
	Иначе
		КПП = "";
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если ЗначениеЗаполнено(ИНН)
		И НЕ (ЗначениеЗаполнено(Наименование) 
			ИЛИ ЗначениеЗаполнено(НаименованиеПолное)) Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	ОтключитьЗаполнениеПоИНН = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьЗаполнениеПоИНН", 0.1, Истина);
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "CRM_ТипыОтношений".
//
Процедура CRM_ТипыОтношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеВыбора		= Новый ОписаниеОповещения("CRM_ОбработкаВыбораТиповОтношений", ЭтотОбъект, ДополнительныеПараметры);
	CRM_ВсеТипыОтношений.ПоказатьОтметкуЭлементов(ОповещениеВыбора, НСтр("ru='Отметьте типы отношений с клиентом'"));
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
// Процедура - обработчик выбора типов отношений.
//
// Параметры:
//	СписокТипов				- СписокЗначений	- Список типов отношений.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура CRM_ОбработкаВыбораТиповОтношений(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	CRM_ЗаполнитьТипыОтношений();
КонецПроцедуры // CRM_ОбработкаВыбораТиповОтношений()	

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) 
		ИЛИ ЗначениеЗаполнено(НаименованиеПолное) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	
	//CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
		
	ЗаполнитьКИ_Описание(ВидАдреса);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		// Обработка ошибок
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
				|необходимо подключиться к Интернет-поддержке пользователей.
				|Подключиться сейчас?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли ВидПартнера = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "")
	
	ЭтоЮридическоеЛицо = (ВидПартнера = Перечисления.КомпанияЧастноеЛицо.Компания);
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(ИНН);
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИНН);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыКонтрагента);
	
	Если ЭтоЮридическоеЛицо Тогда
		Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И ЗначениеЗаполнено(РеквизитыКонтрагента.ЮридическийАдрес) Тогда
			ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес, 
				РеквизитыКонтрагента.ЮридическийАдрес);
		КонецЕсли;
	КонецЕсли;
	Если РеквизитыКонтрагента.Свойство("Телефон") И ЗначениеЗаполнено(РеквизитыКонтрагента.Телефон) Тогда
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера, 
			РеквизитыКонтрагента.Телефон);
	КонецЕсли;
	Если РеквизитыКонтрагента.Свойство("Руководитель") И ЗначениеЗаполнено(РеквизитыКонтрагента.Руководитель) Тогда
		ЗаполнитьРуководителя(РеквизитыКонтрагента.Руководитель);
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРуководителя(СтруктураДанных)
	ФамилияКонтактногоЛица	= СтруктураДанных.Фамилия;
	ИмяКонтактногоЛица		= СтруктураДанных.Имя;
	ОтчествоКонтактногоЛица	= СтруктураДанных.Отчество;
	Должность				= Справочники.CRM_Должности.НайтиПоНаименованию(СтруктураДанных.Должность);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ВидАдреса = ВидКонтактнойИнформации;
		Адрес = СтруктураДанных.Представление;
	ИначеЕсли ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ВидEmailКлиента = ВидКонтактнойИнформации;
		Email = СтруктураДанных.Представление;
	ИначеЕсли ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ВидТелефонаКлиента		= ВидКонтактнойИнформации;
		ЗначенияПолейТелефона	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(СтруктураДанных.Представление);
		КодСтраны				= ЗначенияПолейТелефона.КодСтраны;
		КодГорода				= ЗначенияПолейТелефона.КодГорода;
		Телефон					= ЗначенияПолейТелефона.НомерТелефона;
		ДобНомер				= ЗначенияПолейТелефона.Добавочный;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено 
		И Результат <> КодВозвратаДиалога.Отмена Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключитьЗаполнениеПоИНН()

	ОтключитьЗаполнениеПоИНН = Неопределено;	

КонецПроцедуры 
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти

&НаКлиенте
// Процедура  заполняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьВсеТипыОтношений()
	CRM_ВсеТипыОтношений.Очистить();
	CRM_ВсеТипыОтношений.Добавить("Поставщик",			"Поставщик",		Ложь);
	CRM_ВсеТипыОтношений.Добавить("Клиент",				"Покупатель",		Истина);
	CRM_ВсеТипыОтношений.Добавить("Конкурент",			"Конкурент",		Ложь);
	CRM_ВсеТипыОтношений.Добавить("ПрочиеОтношения",	"Прочие отношения",	Ложь);
	CRM_ВсеТипыОтношений.Добавить("CRM_Госорганы",		"Госорганы",		Ложь);
	CRM_ВсеТипыОтношений.Добавить("CRM_Учредитель",		"Учредитель",		Ложь);
КонецПроцедуры // CRM_ЗаполнитьВсеТипыОтношений()

&НаСервере
// Процедура сохраняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаписатьВсеТипыОтношений(Объект)
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если НЕ (Объект[ТипОтношений.Значение] = ТипОтношений.Пометка) Тогда
			Объект[ТипОтношений.Значение] = ТипОтношений.Пометка;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ЗаписатьВсеТипыОтношений()

&НаКлиенте
// Процедура заполняет реквизит формы CRM_ТипыОтношений.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьТипыОтношений()
	CRM_ТипыОтношений = "";
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + ТипОтношений.Представление;
		КонецЕсли;	
	КонецЦикла;	
	Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
		CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
	КонецЕсли;	
КонецПроцедуры // CRM_ЗаполнитьТипыОтношений();
