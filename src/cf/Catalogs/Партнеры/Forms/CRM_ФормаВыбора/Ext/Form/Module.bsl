////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
// Обновить индекс полнотекстового поиска.
//
Процедура ОбновитьИндексППД()

	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ПолнотекстовыйПоиск.ОбновитьИндекс();
	Исключение
	КонецПопытки;	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Выполняет полнотекстовый поиск.
&НаКлиенте
Процедура ВыполнитьПП()
	
	Элементы.ДекорацияИндексППНеактуален.Заголовок = "";
	
	Если СтрокаПоиска <> "" Тогда
		
		ПроверитьИндексППД();

	Иначе
		РасширенныйПоиск = Ложь;
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ссылка");
		ОснованиеВыбора = "";
		Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	КонецЕсли;
	
КонецПроцедуры // 

&НаКлиенте
// Проверяет актуальность индекса и, в случае необходимости, актуализирует его.
//
Процедура ПроверитьИндексППД()
	
	Если Не ИндексППДАктуален Тогда
		
		Элементы.ДекорацияИндексППНеактуален.Заголовок = НСтр("ru = 'Индекс полнотекстового поиска неактуален'");
		
	КонецЕсли;
	
	ВыполнитьПолнотекстовыйПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексППНеактуаленНажатие(Элемент)
	ПодключитьОбработчикОжидания("ОбновлениеИндексаПДД",0.2,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолнотекстовыйПоиск()
	
	НайтиПартнеровПолнотекстовыйПоискКлиент();
	
	//Попытка
	//
	//	  
	// 	ТекстОшибкиСообщения = НайтиПартнеровПолнотекстовыйПоискКлиент();
	//	Если ТекстОшибкиСообщения = Неопределено Тогда
	//		РасширенныйПоиск = Истина;
	//		ЗаполнитьСтрокуОснования();
	//	Иначе
	//		Если НЕ ТекстОшибкиСообщения = НСтр("ru = 'Ничего не найдено'") Тогда
	//			ПоказатьОповещениеПользователя(ТекстОшибкиСообщения);
	//		Иначе
	//			Если Не ЗначениеЗаполнено(Элементы.ДекорацияИндексППНеактуален.Заголовок) Тогда
	//				Элементы.ДекорацияИндексППНеактуален.Заголовок = ТекстОшибкиСообщения;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;

	//	
	//		Исключение
	//			
	//			ТекстИсключения = ОписаниеОшибки();
	//			
	//КонецПопытки; 

		
КонецПроцедуры // ()

&НаКлиенте
Процедура ОбновлениеИндексаПДД()
	
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска ...'"));
	ОбновитьИндексППД();
	
	ИндексППДАктуален = Истина;
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено...'")); 
	
	Элементы.ДекорацияИндексППНеактуален.Заголовок = "";
	
	Если СтрокаПоиска <> "" Тогда
		ВыполнитьПолнотекстовыйПоиск();
	КонецЕсли;
	
КонецПроцедуры // () 

&НаКлиенте
// Заполнить строку основания включения партнера в список.
Процедура ЗаполнитьСтрокуОснования()

	Основание = Основания.НайтиСтроки(Новый Структура("Партнер",Элементы.Список.ТекущаяСтрока));
	Если Основание.Количество() = 0 Тогда
		ОснованиеВыбора = "";
	Иначе
		ОснованиеВыбора = Основание[0].Основание;
	КонецЕсли;

	Элементы.ОснованиеВыбора.Видимость = ЗначениеЗаполнено(ОснованиеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияСписокПриАктивизацииСтроки()
	
	Если РасширенныйПоиск Тогда
		ЗаполнитьСтрокуОснования();
	Иначе
		ОснованиеВыбора = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьРезультатВыбора()
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки = Неопределено ИЛИ ВыделенныеСтроки.Количество() <= 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивВыбора = Новый массив;
	
	Для Каждого ЭлементМассива Из ВыделенныеСтроки Цикл
		Если ЭлементМассива.ЭтоГруппа Тогда
			// Если это выбранный элемент - Группа, то добавим в список выбора всех подчиннёных клиентов.
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Партнеры.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|ГДЕ
			|	Партнеры.Родитель В ИЕРАРХИИ(&ГруппаИерархии)
			|	И НЕ Партнеры.ЭтоГруппа";
			
			Запрос.УстановитьПараметр("ГруппаИерархии", ЭлементМассива.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() > 0 Тогда
				Пока Выборка.Следующий() Цикл
					МассивВыбора.Добавить(Выборка.Ссылка);
				КонецЦикла;					
			КонецЕсли;				
		Иначе
			МассивВыбора.Добавить(ЭлементМассива);
		КонецЕсли;			
	КонецЦикла;		
	
	Возврат МассивВыбора;
	
КонецФункции	

&НаСервере
Функция НайтиПартнеровПолнотекстовыйПоискКлиент()

	ИндексППДАктуален = ПолнотекстовыйПоиск.ИндексАктуален();
	Если Не ИндексППДАктуален Тогда
		Элементы.ДекорацияИндексППНеактуален.Заголовок = НСтр("ru = 'Индекс полнотекстового поиска неактуален'");
	КонецЕсли;
	
	Возврат CRM_КлиентыСервер.НайтиПартнеровПолнотекстовыйПоиск(ЭтаФорма)

КонецФункции // ()

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ++ VOG Солодов В.В. 30.08.2019 task 545
	// До изменения
	//ОтборОсновнойМенеджер = CRM_ХранилищеНастроек.Загрузить("Справочник.Партнеры","ОсновнойМенеджер",,);
	// -- VOG Солодов В.В. 30.08.2019
	
	CRM_КлиентыСервер.ДоступностьПолнотекстовыйПоискСписокПартнеры(ЭтотОбъект);
	
	Если Параметры.Свойство("ПрограммноеОткрытие") И Параметры.ПрограммноеОткрытие Тогда
		Элементы.ВыбратьПрограммно.Видимость	= Истина;		
	Иначе
		Элементы.ВыбратьПрограммно.Видимость	= Ложь;
		Элементы.ФормаВыбрать.Видимость			= Истина;
	КонецЕсли;		
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентов.ПриСозданииНаСервереСписокКонтрагентов(Список);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Клиент") И (Параметры.Отбор.Клиент = Истина) Тогда
		Элементы.ДекорацияОтборПоКлиенту.Видимость = Истина;
	КонецЕсли;	
	
	//+вог
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ТипОтношений") Тогда
		МассивТипОтношений = Параметры.Отбор.ТипОтношений;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
			"Ссылка.вогТипыОтношений.ТипОтношений",
			МассивТипОтношений,
			ВидСравненияКомпоновкиДанных.ВСписке);
			
		СтрокаТипОтношений = "";
		Для каждого ТипОтношений Из МассивТипОтношений Цикл
			Если ЗначениеЗаполнено(СтрокаТипОтношений) Тогда
				СтрокаТипОтношений = СтрокаТипОтношений + ", ";
			КонецЕсли;
			
			СтрокаТипОтношений = СтрокаТипОтношений + ТипОтношений;
			
		КонецЦикла;
		
		АвтоЗаголовок = Ложь;
		Заголовок = СтрокаТипОтношений;
			
	КонецЕсли;	
	//-вог
	
	// ++ VOG Солодов В.В. 07.04.2020 CRM-545
	Если Не Параметры.Свойство("Отбор")
		Или Не Параметры.Отбор.Свойство("Розничный") Тогда
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"вогРозничный",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
	КонецЕсли;
	// -- VOG Солодов В.В. 07.04.2020
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	
	// ++ VOG Солодов В.В. 30.08.2019 task 545
	// До изменения
	//Заполнено = ЗначениеЗаполнено(ОтборОсновнойМенеджер);
	//
	//Если Заполнено Тогда
	//	
	//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ОсновнойМенеджер", ОтборОсновнойМенеджер,,, Заполнено);
	//	
	//КонецЕсли;
	// -- VOG Солодов В.В. 30.08.2019
	
	Если ТипЗнч(ВладелецФормы) = Тип("ПолеФормы") И (ВладелецФормы.Имя = "ПолеБыстрогоОтбора_Партнер" ИЛИ ВладелецФормы.Имя = "Партнер") Тогда
		
		СтрокаПоиска = ВладелецФормы.ТекстРедактирования;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Создан новый партнер" Тогда
		
		Элементы.Список.ТекущаяСтрока = Параметр;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
// Серверный обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытииНаСервере()
	
	// ++ VOG Солодов В.В. 30.08.2019 task 545
	// До изменения
	//CRM_ХранилищеНастроек.Сохранить("Справочник.Партнеры","ОсновнойМенеджер",ОтборОсновнойМенеджер,,);
	// -- VOG Солодов В.В. 30.08.2019
	
	CRM_КлиентыСервер.ПолнотекстовыйПоискПриЗакрытииНаСервере(ЭтотОбъект, "ПартнерыФормаСпискаПоискПоПодстроке");
	
КонецПроцедуры

#Область ПроцедурыОбработчикиЭлементовСобытийФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
		СтрокаПоиска = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Элементы.ГруппаКнопок_Поиск_Полнотекстовый.Видимость = Истина;
		Элементы.ГруппаКнопок_Поиск_Стандартный.Видимость = Ложь;
	Иначе
		Элементы.ГруппаКнопок_Поиск_Стандартный.Видимость = Истина;
		Элементы.ГруппаКнопок_Поиск_Полнотекстовый.Видимость = Ложь;
	КонецЕсли;
	Элементы.КнопкаПоиск_ПолнотекстовыйОтмена.Доступность = ЗначениеЗаполнено(СтрокаПоиска);
	
	ВыполнитьПП();
	
	Элементы.ОснованиеВыбора.Видимость = ЗначениеЗаполнено(ОснованиеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокДляВыбора = Новый СписокЗначений();
	СписокДляВыбора.Добавить("[ПоискПоПолномуНазванию]", НСтр("ru = '[Поиск по полному названию]'"));
	СписокДляВыбора.Добавить("[ПоискПоПодстроке]", НСтр("ru = '[Поиск по подстроке]'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("СтрокаПоискаНачалоВыбораЗавершение", ЭтотОбъект, Элемент);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДляВыбора, Элемент, ?(ПоискПоПодстроке, СписокДляВыбора[1], СписокДляВыбора[0]));
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбораЗавершение(ВыбранноеЗначение, Элемент) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Элементы.СтрокаПоиска.ПодсказкаВвода = ВыбранноеЗначение.Представление;
		Элементы.СтрокаПоиска.Подсказка = ВыбранноеЗначение.Представление;
		Если ВыбранноеЗначение.Значение = "[ПоискПоПодстроке]" Тогда
			ПоискПоПодстроке = Истина;
		Иначе
			ПоискПоПодстроке = Ложь;
		КонецЕсли;
		СтрокаПоискаПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	КоличествоНайденных = 0;
	СписокДляВыбора = СтрокаПоискаСписокВыбора;
	Для каждого ЭлементСписка Из СписокДляВыбора Цикл
		Если ВРег(Лев(ЭлементСписка, 6)) = "[ПОИСК" Тогда
			Продолжить;
		КонецЕсли;
		Если ЛЕВ(ВРег(ЭлементСписка.Значение),СтрДлина(СокрЛП(Текст))) = ВРег(СокрЛП(Текст)) Тогда
			 ДанныеВыбора.Добавить(ЭлементСписка.Значение,, Истина);
			 КоличествоНайденных = КоличествоНайденных + 1;
			 Если КоличествоНайденных > 7 Тогда
				 Прервать;
			 КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() = 0 Тогда
		ДанныеВыбора = Неопределено;
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеВыбораНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Основание = Основания.НайтиСтроки(Новый Структура("Партнер",Элементы.Список.ТекущаяСтрока));
	Если Основание.Количество() > 0 Тогда
		ПоказатьЗначение(, Основание[0].Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияСписокПриАктивизацииСтроки", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОтборОсновнойМенеджерПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ОсновнойМенеджер", ОтборОсновнойМенеджер,,, ЗначениеЗаполнено(ОтборОсновнойМенеджер));
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	бИспользоватьПомощник = (CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьПомощникВводаНовогоКлиента") = Истина);
	
	ПараметрыФормы = Новый Структура();
	СтруктураЗначенияЗаполнения = Новый Структура;
	Если Элементы.Список.Отображение <> ОтображениеТаблицы.Список Тогда
		СтруктураЗначенияЗаполнения.Вставить("Родитель", Элементы.Список.ТекущийРодитель);
	КонецЕсли;
	
	Если бИспользоватьПомощник И Не Группа Тогда
		Отказ = Истина;
		
		Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЭлементОтбора.Использование Тогда
				СтруктураЗначенияЗаполнения.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение),ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;	
		КонецЦикла;
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения",СтруктураЗначенияЗаполнения);
		
		Если НЕ Параметры.ПараметрыНового = Неопределено Тогда
			ПараметрыФормы.Вставить("ПараметрыНового",Параметры.ПараметрыНового);
		КонецЕсли;
		CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, ПараметрыФормы);
		
	ИначеЕсли НЕ Копирование И НЕ Группа Тогда
		ПараметрыФормы.Вставить("ЗначенияЗаполнения",СтруктураЗначенияЗаполнения);
		Если НЕ Параметры.ПараметрыНового = Неопределено Тогда
			ПараметрыФормы.Вставить("ПараметрыНового",Параметры.ПараметрыНового);
			ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта",ПараметрыФормы,Элементы.Список);
		Иначе
			ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура Поиск_Найти(Команда)
	СтрокаПоискаПриИзменении(Элементы.СтрокаПоиска);
КонецПроцедуры

&НаКлиенте
Процедура Поиск_Отмена(Команда)
	СтрокаПоиска = "";
	СтрокаПоискаПриИзменении(Элементы.СтрокаПоиска);
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбрать(Команда)
	РезультатВыбора = ПодготовитьРезультатВыбора();
	ОповеститьОВыборе(РезультатВыбора);	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
