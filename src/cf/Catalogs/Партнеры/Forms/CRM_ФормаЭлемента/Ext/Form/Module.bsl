
#Область Переменные

&НаСервере
Перем СсылкаНаКЛ;

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ОтключитьЗаполнениеПоИНН;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация");	
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	// Обработчик механизма "Свойства".
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И Параметры.Свойство("ПараметрыНового") Тогда
		Объект.Наименование = Параметры.ПараметрыНового.Наименование;
		
		МассивДопРеквизитов = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Тип,Вид",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,Справочники.ВидыКонтактнойИнформации.EmailПартнера));
		Если МассивДопРеквизитов.количество() > 0 Тогда
			ЭтотОбъект[МассивДопРеквизитов[0].ИмяРеквизита] = Параметры.ПараметрыНового.АдресПочты;
		КонецЕсли;
	КонецЕсли;
		
	РедактированиеПредставления = Ложь;
	РедактированиеФИО = Ложь;
	ПредставлениеВыбраноИзСписка = Ложь;
	
	Если Элементы.тЗадолженность.Видимость Тогда
		Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПокупателями) Тогда
			Элементы.тЗадолженность.Видимость = Истина;
			СтруктураОтбора = Новый Структура("Контрагент", Объект.Ссылка);
			тзДолги = РегистрыНакопления.РасчетыСПокупателями.Остатки(,СтруктураОтбора,,"СуммаВал");
			Долг = тзДолги.Итог("СуммаВал");
			Если Долг = 0 Тогда
				Элементы.тЗадолженность.Заголовок = НСтр("ru = 'Задолженности нет'");
				Элементы.тЗадолженность.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
			ИначеЕсли Долг < 0 Тогда	
				Элементы.тЗадолженность.Заголовок = НСтр("ru = 'Долг клиенту составляет: '") + Формат(?(Долг < 0, -Долг, Долг), "ЧДЦ=2; ЧН=0,00") + " " + СокрЛП(Константы.ВалютаУправленческогоУчета.Получить().Наименование);
				Элементы.тЗадолженность.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
			Иначе
				Элементы.тЗадолженность.Заголовок = НСтр("ru = 'Долг клиента составляет: '") + Формат(?(Долг < 0, -Долг, Долг), "ЧДЦ=2; ЧН=0,00") + " " + СокрЛП(Константы.ВалютаУправленческогоУчета.Получить().Наименование);
				Элементы.тЗадолженность.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
			КонецЕсли;	
		Иначе	
			Элементы.тЗадолженность.Видимость = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 10.07.2019 task 444
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.Партнеры) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "CRM_ТипыОтношений", "ТолькоПросмотр", Истина);
	КонецЕсли;
	// -- VOG Солодов В.В. 10.07.2019
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ВариантПоставкиПользователяКОРП = CRM_ЛицензированиеСервер.ВариантПоставкиКОРП();
	//+вог
	//Элементы.CRM_ГруппаПотенциалы.Видимость	= ВариантПоставкиПользователяКОРП;
	//Элементы.тПотенциал.Видимость			= ВариантПоставкиПользователяКОРП;
	//-вог
	
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		//Элементы.Наименование.КнопкаВыбора = Истина;
		Элементы.Наименование.КнопкаВыпадающегоСписка = Истина;
	КонецЕсли;
		
	Если Параметры.Свойство("Основание") Тогда
		
		Основание = Параметры.Основание;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			СоздаемИзВходящегоПисьма 	= Истина;
			
			Попытка
				Для Каждого СтрокаТаблицы Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
					Если СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
						ЭтотОбъект[СтрокаТаблицы.ИмяРеквизита] = Основание.ОтправительАдрес;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.CRM_НапоминатьОДнеРождения.Доступность = ЗначениеЗаполнено(Объект.ДатаРождения);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтоНовыйПартнер = Истина;
		Объект.Клиент = Истина;
		
		//+вог
		//Менеджеры
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Менеджеры, "Владелец", 		Объект.Ссылка);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Менеджеры, "ТекущаяДата", 	CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
		
		//-вог
		
	КонецЕсли;
	
	Если Параметры.Свойство("СпозиционироватьсяНаРеквизите") И ЗначениеЗаполнено(Параметры.СпозиционироватьсяНаРеквизите) Тогда
		СпозиционироватьсяНаРеквизите = Параметры.СпозиционироватьсяНаРеквизите;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("CRM_ФизЛицо", Объект.Ссылка);
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметров);
	
	//Клиенты.Параметры.УстановитьЗначениеПараметра("ФизЛицо",Объект.Ссылка);
	
	// В зависимости от того юр. лицо или физ. лицо отображаем ГруппаКлиентов и перемещаем на другую закладку
	// ГруппаКонтактныеЛица.
	//+вог
	//НастроитьВидимостьПоложениеГрупп();
	//-вог
	
	// Настройка доступности основного менеджера.
	Элементы.ОсновнойМенеджер.ТолькоПросмотр = НЕ Пользователи.РолиДоступны("CRM_ПередачаДелОтветственному, ПолныеПрава");
	
	ВидимостьИДоступностьПоляПолныхЛет();
	
	// Вычисляем, нужно ли показывать подсказку на вкладке "Уровни доступа".
	ПоказатьПодсказку = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ПоказыватьПодсказкуУровниДоступа");
	Элементы.ДекорацияОписаниеУровнейДоступа.Видимость = ?(ПоказатьПодсказку = Неопределено, Истина, ПоказатьПодсказку);
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	CRM_Потенциал = CRM_ПолучитьПотенциал();
	
	CRM_Потенциалы.Отбор.Клиент.ВидСравнения  = ВидСравнения;
	CRM_Потенциалы.Отбор.Клиент.Использование = Истина;
	CRM_Потенциалы.Отбор.Клиент.Значение      = Объект.Ссылка;
	НаборПотенциалов = РегистрыСведений.CRM_Потенциалы.СоздатьНаборЗаписей();
	НаборПотенциалов.Отбор.Клиент.ВидСравнения  = ВидСравнения.Равно;
	НаборПотенциалов.Отбор.Клиент.Использование = Истина;
	НаборПотенциалов.Отбор.Клиент.Значение      = Объект.Ссылка;
	НаборПотенциалов.Прочитать();
	CRM_Потенциалы.Загрузить(НаборПотенциалов.Выгрузить());
	Для Каждого ТекЗапись Из CRM_Потенциалы Цикл 
		ТекЗапись.Валюта = ВалютаУпр;
		ТекЗапись.ПериодРасчета = Объект.ОсновнойМенеджер.Подразделение.CRM_ПериодРасчетаПотенциала;
	КонецЦикла;
	
	Если Элементы.тПотенциал.Видимость Тогда
		Период = Объект.ОсновнойМенеджер.Подразделение.CRM_ПериодРасчетаПотенциала; 
		Элементы.тПотенциал.Заголовок = "Потенциал: " + CRM_Потенциал + " " + ВалютаУпр + ?(ЗначениеЗаполнено(Период), " (" + Период + ")", "");
	КонецЕсли;
	
	// Устанавливаем отбор по подразделению для тегов
	// подразделение из текущего пользователя.
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", ТекущийПользователь.Подразделение);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.Тег.ПараметрыВыбора = НовыеПараметры;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//Если Параметры.Ключ.Пустая() Тогда
	//	ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
	//КонецЕсли;
	//ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
	//РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// +Софтфон
	Если НЕ(Параметры.ЗначенияЗаполнения = Неопределено) И Параметры.ЗначенияЗаполнения.Свойство("Звонок") Тогда
		сфпЗвонок =  Параметры.ЗначенияЗаполнения.Звонок;
	КонецЕсли;		
	Если ТипЗнч(Параметры.Основание) = Тип("Структура") И Параметры.Основание.Свойство("Интерес") Тогда
		сфпИнтерес = Параметры.Основание.Интерес;
	КонецЕсли;
	// -Софтфон
	
	// Видимость табличной части "Дополнительная информация", (не вешаем на ФО, чтобы не было отличий от БСП)
	Элементы.ГруппаДополнительнаяИнформация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Многострочный");
	
	//+вог
	
	//СПАРКРиски.ПриСозданииНаСервере(
	//	ЭтотОбъект,
	//	Объект,
	//	Объект.Ссылка,
	//	ПараметрыПроцедуры);
	//// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	//// Команды1СПАРКРиски
	//СПАРКРиски.ДобавитьПодключаемыеКомандыКонтрагента(ЭтотОбъект, Объект, Элементы.ПодменюСПАРК);
	// Конец Команды1СПАРКРиски
	
	вогЗаполнитьВсеТипыОтношенийСервер();
	вогЗаполнитьТипыОтношений(ЭтаФорма);

	//Доступные организации
	Если ЭтоНовыйПартнер Тогда
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "вогОрганизации");
		ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеОрганизации");
		вогУправлениеДоступом.ПрочитатьДоступныеОрганизацииОбъекта(ЭтотОбъект, Объект, ПараметрыОбъекта);
		
		//{[+](фрагмент добавлен), Виноградов Дмитрий 24.07.2018 9:24:06 ID
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "вогПодразделения");
		ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
		вогУправлениеДоступом.ПрочитатьДоступныеПодразделенияОбъекта(ЭтотОбъект, Объект, ПараметрыОбъекта);
		//}Администратор 24.07.2018 9:24:06
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Параметры.ЗначенияЗаполнения.Свойство("Адрес") Тогда
			АдресОбязательныеПоля = Параметры.ЗначенияЗаполнения.Адрес;
		КонецЕсли;
		
		ЗаполнитьОписаниеАдреса();
		
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		//Режим копирования
		//Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаРеквизитыОбъекта;
		//НастройкаВидимостиФормы = "ПоказатьВсе";
		//РежимВидимостиПоказатьТолькоВажные = Ложь;
		//
		//СкрытьРаскрытьВсеГруппы(Ложь);
	//ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//Режим редактирования
		//Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаКарточкаОбъекта;
		//НастройкаВидимостиФормы = "СвернутьВсеГруппы";
		//РежимВидимостиПоказатьТолькоВажные = Ложь;
		//
		//СкрытьРаскрытьВсеГруппы(Истина);
		//Элементы.ГруппаГруппировкаЛевоПраво.Видимость=Ложь;
		//
		//Элементы.НастройкаВидимостиФормы.СписокВыбора.Удалить(0);
		
		//НастройкаВидимостиФормы = "ПоказатьВсе";
		//РежимВидимостиПоказатьТолькоВажные = Ложь;
		//СкрытьРаскрытьВсеГруппы(Истина);
		
		
	//Иначе	
		//Режим создания
		//Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаРеквизитыОбъекта;
		//НастройкаВидимостиФормы = "ПоказатьОсновные";
		//РежимВидимостиПоказатьТолькоВажные = Истина;
		//
		//СкрытьРаскрытьВсеГруппы(Ложь);
	//КонецЕсли;
	
	НастройкаВидимостиФормы = "ПоказатьВсе";
	РежимВидимостиПоказатьТолькоВажные = Ложь;
	СкрытьРаскрытьВсеГруппы(Истина);

	
	Если Параметры.Ключ.Пустая() Тогда
		НастроитьФорму();
	КонецЕсли;
		
	РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
	
	УстановитьВидимостьРеквизитовКИ();
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(КонтактныеЛица, "ТекДата", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(КонтактныеЛица, "ОбъектСвязи", Объект.Ссылка);
	
	// +++ VOG Кулаков П.Л. 03.03.2020 CRM-412
	// Добавим партнера в дополнительные свойства динамического списка для дальнейшей обработки
	КонтактныеЛица.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОбъектСвязи",Объект.Ссылка);
	// --- VOG Кулаков П.Л.
	
	// СтандартныеПодсистемы.Свойства 
	// Скрытие кнопки. При видимости кнопки появляется меню Еще.
	ПоискКнопки = Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Найти("РедактироватьСоставДополнительныхРеквизитов");
	Если НЕ ПоискКнопки = Неопределено Тогда
		ПоискКнопки.Видимость = Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда
		// Процент заполнености карточки объекта
		ЗаполненностьОбъекта 							= вогКонтрольЗаполненностиРеквизитовОбъектов.СтруктураЗаполненостиОбъекта(Объект.Ссылка);
		Элементы.КартинкаПроцентЗаполнености.Картинка 	= ЗаполненностьОбъекта.Картинка;
		ПроцентЗаполнености 							= Строка(ЗаполненностьОбъекта.ПроцентЗаполненностиОбщий)+"%";
	КонецЕсли;
	
	
	// Начало подстановка в список торговые точки клиента из рабочего стола
	Если Параметры.Свойство("СписокТорговыеТочки") Тогда
		СписокТорговыеТочки.ЗагрузитьЗначения(Параметры.СписокТорговыеТочки);
	КонецЕсли;
	// Конец подстановка в список торговые точки клиента из рабочего стола
	
	// + Тищенко В.В.
	// Убрана видиомсть комментраия.
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Комментарий","Видимость",Ложь);	
	// - Тищенко В.В.
		
	// ++ Тищенко В.В. 10.01.2019
	// Подключаемые дополнительные команды
	вогУправлениеИнтерфейсомСервер.ПодключитьДополнительныеКоманды(ЭтаФорма,Элементы.ФормаГруппаДействия);
	//-- Подключаемые дополнительные команды
	// -- Тищенко В.В.
	
	// + Взаимодействие (Динамический список)
	// ++ VOG Ульянов И.В. 28.11.2019 task 941
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВзаимодействие, "ОбъектСвязи", Объект.Ссылка);
	// -- VOG Ульянов И.В. 28.11.2019 task 941
	// - Взаимодействие (Динамический список)
	
	// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
	вогОбщегоНазначенияКлиентСервер.УстановитьПодсказкуКнопкиОткрытьЗадачу(ЭтаФорма);
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//+вог
	// ++ Солодов В.В.
	// Обновление показателей
	//Попытка
	//	вогИнтеграцияСУчетнойСистемой.вогЗагрузкаКлассификаторовЧерезWebServices(Объект.Ссылка);
	//Исключение
	//
	//КонецПопытки;
	// -- Солодов В.В.
	
	Если Не ЗначениеЗаполнено(НастройкаВидимостиКарточкиОбъекта) Тогда
		НастройкаВидимостиКарточкиОбъекта       = "ПоказатьЗаполненные";
		РежимВидимостиПоказатьТолькоЗаполненные = Истина;
	
	КонецЕсли;
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	НастроитьФорму(НастройкиВидимостиИЗаголовков);
	//-вог
	
	НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
	
	Если Не Объект.CRM_Фотография.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюРамкиКартинки();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
		
	// теги
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги") Тогда
		Подключаемый_ОбновитьОблакоТегов();
	Иначе
		Элементы.ОблакоТегов.Видимость = Ложь;
	КонецЕсли;
	
	//+Классификаторы
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	//+вог
	//Статус согласования
	ОбновитьДанныеСтатусаСогласования();
	
	//Доступные организации
	//ПараметрыОбъекта = Новый Структура;
	//ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "вогОрганизации");
	//ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеОрганизации");
	//вогУправлениеДоступом.ПрочитатьДоступныеОрганизацииОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыОбъекта);

	//{[+](фрагмент добавлен), Виноградов Дмитрий 24.07.2018 9:24:06 ID
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "вогПодразделения");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
	вогУправлениеДоступом.ПрочитатьДоступныеПодразделенияОбъекта(ЭтотОбъект, Объект, ПараметрыОбъекта);
	//}Администратор 24.07.2018 9:24:06
	
	//Запуск БП
	//скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	
	//Менеджеры
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Менеджеры, "Владелец", 		Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Менеджеры, "ТекущаяДата", 	CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	
	// Вывод информации Общая
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакет(Объект.Ссылка,ИнформацияОбъект,Метаданные.Справочники.Партнеры,ЭтаФорма,"КарточкаОбъекта");

	// Процент заполнености карточки объекта
	ЗаполненностьОбъекта 							= вогКонтрольЗаполненностиРеквизитовОбъектов.СтруктураЗаполненостиОбъекта(ТекущийОбъект.Ссылка);
	Элементы.КартинкаПроцентЗаполнености.Картинка 	= ЗаполненностьОбъекта.Картинка;
	ПроцентЗаполнености 							= Строка(ЗаполненностьОбъекта.ПроцентЗаполненностиОбщий)+"%";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	// Конец СтандартныеПодсистемы.Свойства
	КонецЕсли;
	
	Если ИмяСобытия = "НовоеКонтактноеЛицоЗаписано" Тогда
		ОбновитьКонтактноеЛицо(Параметр);
		Если Элементы.ГруппаКлиентов.Видимость = Истина Тогда
			Элементы.Клиенты.Обновить();
			Подключаемый_КлиентыПриАктивизацииСтроки();
		КонецЕсли;
		
		Если Элементы.ГруппаКонтактныеЛица.Видимость = Истина Тогда
			Элементы.КонтактныеЛица.Обновить();
			Подключаемый_КонтактныеЛицаПриАктивизацииСтроки();
		КонецЕсли;
		
	//  Из списка договоров установили новый договор по умолчанию.
	ИначеЕсли  ИмяСобытия = "ИзмененБанковскийСчетПоУмолчанию" Тогда
		
		Прочитать();
		
	ИначеЕсли ИмяСобытия = "ИзмененУчаствуетВАнкетировании" Тогда
		Объект.CRM_УчаствуетВАнкетировании = Параметр;
		Модифицированность = Истина;
		
	ИначеЕсли ИмяСобытия = "Создан новый контактный клиент" Тогда
		Если Элементы.ГруппаКлиентов.Видимость = Истина Тогда
			Элементы.Клиенты.Обновить();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда
			
		Модифицированность = Истина;
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		
		Если ВыборИзображения Тогда
			
			Объект.CRM_Фотография = СсылкаНаФайл;
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
			
		КонецЕсли;
		
		//+вог
		ОбновитьГиперссылкиИКарточку();
		//-вог
		
	ИначеЕсли ИмяСобытия = "Изменение КПП" Тогда
		Если ЭтотОбъект.УникальныйИдентификатор = Источник Тогда 
			Объект.CRM_КПП = Параметр;
		КонецЕсли;
		
	//+вог
	ИначеЕсли ИмяСобытия = "ЗаписьТорговойТочки" 
	  И Источник = Объект.Ссылка Тогда
		ОбновитьГиперссылкиИКарточку();
		
	//-вог	
		
	КонецЕсли;
	
	//+вог
	Если ИмяСобытия = "Запись_БизнесПрцесса" 
	  И Параметр.Предмет = Объект.Ссылка Тогда
		ОбновитьДанныеСтатусаСогласования();
	
	КонецЕсли;
	//-вог
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Объект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// ++ VOG Ульянов И.В. 28.11.2019 task 941
	Если ИмяСобытия = "ОбновитьВиджет" Тогда
			ТекущиеДелаДокументооборотКлиент.ОбработкаОповещенияФормыТекущиеДела(
		ЭтаФорма, ИмяСобытия, Параметр, Источник);
	КонецЕсли;	
	// -- VOG Ульянов И.В. 28.11.2019 task 941
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// +CRM
	Если ПараметрыЗаписи.Свойство("ЗаписыватьБезПроверки") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ВыполнятьПоискДублейПриЗаписиПартнера() Тогда 
		СтруктураПоиска = СоздатьСтруктуруПоиска();
		СписокКонтактов = ЗаполнитьТаблицуКонтактов();
		
		Если ЕстьДублиПартнеров(Объект, СтруктураПоиска, СписокКонтактов, Истина) Тогда 
			СписокКонтактов.Вставить("Наименование",		Объект.Наименование);
			СписокКонтактов.Вставить("НаименованиеПолное",	Объект.НаименованиеПолное) ;
			СписокКонтактов.Вставить("ИНН",					Объект.CRM_ИНН);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СтруктураПоиска",		СтруктураПоиска);
			ПараметрыФормы.Вставить("СтруктураОбъекта",		СписокКонтактов);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.CRM_ФормаНайденныхДублей", ПараметрыФормы,,,,, ОписаниеОповещения);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда
		Объект.ДатаРегистрации = ТекущаяДата();
	КонецЕсли;
	
	//+вог
	
	//CRM_ЗаписатьВсеТипыОтношений();
	Если Отказ Тогда
		
		Если НастройкаВидимостиФормы = "СвернутьВсеГруппы" Тогда
			НастройкаВидимостиФормы = "ПоказатьВсе";
		КонецЕсли;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
	КонецЕсли;

	//-вог
	Если НЕ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		Объект.CRM_ВидыДеятельности.Очистить();
	КонецЕсли;	
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Если РезультатЗакрытия.Свойство("Результат") Тогда
			
			Если РезультатЗакрытия.Результат = "Продолжить" Тогда
				
			ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
				Попытка 
					ВладелецФормы.ТекущаяСтрока = РезультатЗакрытия.Объект; 
				Исключение
					ФормаСписка = ПолучитьФорму("Справочник.Партнеры.ФормаСписка");
					ФормаСписка.Открыть();
					ФормаСписка.ТекущийЭлемент.ТекущаяСтрока = РезультатЗакрытия.Объект;
				КонецПопытки;
				Модифицированность = Ложь;
				Закрыть();
				Возврат;
				
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	Записать(Новый Структура("ЗаписыватьБезПроверки", Истина));
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
		// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если ТекущийОбъект.Ссылка.Пустая() ИЛИ (НЕ ТекущийОбъект.Ссылка.ОсновнойМенеджер = ТекущийОбъект.ОсновнойМенеджер) Тогда
		КорректироватьНапоминание = Истина;
	КонецЕсли;
	Если НЕ (Объект.Ссылка.CRM_ОтписалсяОтEmailРассылок = Объект.CRM_ОтписалсяОтEmailРассылок) Тогда
		СпособОтправкиРассылок = Константы.CRM_СпособОтправкиРассылок.Получить();
		Если СпособОтправкиРассылок = Перечисления.CRM_СпособыОтправкиРассылок.UniSender Тогда
			CRM_ИнтеграцияСUniSenderКлиентСервер.ПодписатьПолучателяНаРассылки(Объект, НЕ Объект.CRM_ОтписалсяОтEmailРассылок, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	//+вог
	вогЗаписатьВсеТипыОтношений(ТекущийОбъект);
	
	//Доступные организации
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "вогОрганизации");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеОрганизации");
	вогУправлениеДоступом.ЗаписатьДоступныеОрганизацииОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыОбъекта);
	//-вог
	//{[+](фрагмент добавлен), Виноградов Дмитрий 24.07.2018 9:25:14 ID
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "вогПодразделения");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
	вогУправлениеДоступом.ЗаписатьДоступныеПодразделенияОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыОбъекта);
	//}Администратор 24.07.2018 9:25:14
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойМенеджер) И ЗначениеЗаполнено(ТекущийОбъект.ОсновнойМенеджер["CRM_УровеньДоступа"])
		И ТекущийОбъект["CRM_УровниДоступа"].Найти(ТекущийОбъект.ОсновнойМенеджер["CRM_УровеньДоступа"],"УровеньДоступа") = Неопределено И ТекущийОбъект["CRM_УровниДоступа"].Количество() > 0 Тогда
		
		НоваяСтрокаУровня = ТекущийОбъект["CRM_УровниДоступа"].Добавить();
		НоваяСтрокаУровня["УровеньДоступа"]= ТекущийОбъект.ОсновнойМенеджер["CRM_УровеньДоступа"];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// +CRM
	//Если КорректироватьНапоминание Тогда
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("Владелец", ТекущийОбъект.Ссылка);
	//	Запрос.Текст = "ВЫБРАТЬ
	//	               |	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
	//	               |ИЗ
	//	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	//	               |ГДЕ
	//	               |	КонтактныеЛицаПартнеров.Владелец = &Владелец";
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		CRM_ОповещенияСервер.CRM_СформироватьУдалитьНапоминанияОКлючевыхСобытиях(Выборка.Ссылка);
	//	КонецЦикла;
	//	КорректироватьНапоминание = Ложь;
	//КонецЕсли;
	
	//КонтактныеЛица.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Объект.Ссылка;
	// -CRM
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	//+Классификаторы
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	//+вог
	
	//Менеджеры
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Менеджеры, "Владелец", ТекущийОбъект.Ссылка);
	
	// ++ VOG Солодов В.В. 29.03.2019
	//скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	вогУправлениеИнтерфейсомСервер.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, Элементы.ФормаГруппаДействия);
	// -- VOG Солодов В.В. 29.03.2019
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	Если Не Элементы.СтраницаКарточкаОбъекта.Доступность Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастройкаВидимостиФормы = "ПоказатьВсе";
		НастроитьФорму(НастройкиВидимостиИЗаголовков);
		СкрытьРаскрытьВсеГруппы(Ложь);
		
		Если Элементы.НастройкаВидимостиФормы.СписокВыбора.Количество() = 3 Тогда
			Элементы.НастройкаВидимостиФормы.СписокВыбора.Удалить(0);
		КонецЕсли;
		
	Иначе
		НастроитьФорму(НастройкиВидимостиИЗаголовков);
	КонецЕсли;

	//КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(ТекущийОбъект, НастройкиВидимостиИЗаголовков, ЭтотОбъект);
	//-вог
		
	// Вывод информации Общая
	//РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакет(Объект.Ссылка,ИнформацияОбъект,Метаданные.Справочники.Партнеры,ЭтаФорма,"КарточкаОбъекта");
	
	// Начало подстановка в список торговые точки клиента из рабочего стола
	
	Попытка
		НачатьТранзакцию();
		Для каждого Стр Из СписокТорговыеТочки Цикл
			ТорговаяТочка 						= Стр.Значение.ПолучитьОбъект();
			ТорговаяТочка.Обменданными.Загрузка = Истина;
			ТорговаяТочка.Партнер 				= ТекущийОбъект.Ссылка;
			ТорговаяТочка.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка подстановки клиента в торговые точки'"),УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.Партнеры,Объект.Ссылка,ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	// Конец подстановка в список торговые точки клиента из рабочего стола
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписьПартнера", Объект.Ссылка, Неопределено);
	
	Если ЭтоНовыйПартнер Тогда
		Если СоздаемИзВходящегоПисьма Тогда
			Оповестить("Создан новый партнер из письма", Объект.Ссылка);
		Иначе
			Оповестить("Создан новый партнер", Объект.Ссылка, ЭтотОбъект);
		КонецЕсли;
		
		//Клиенты.Параметры.УстановитьЗначениеПараметра("ФизЛицо",Объект.Ссылка);
		Если ЗначениеЗаполнено(сфпЗвонок) Тогда		
			Оповестить("ЗаполнитьКонтактВТелефонномЗвонке", Новый Структура("Звонок, Контакт", сфпЗвонок, Объект.Ссылка));						
		КонецЕсли;			
		Если ЗначениеЗаполнено(сфпИнтерес) Тогда
			Оповестить("СозданКонтактДляИнтереса", Новый Структура("сфпИнтерес, Контакт", сфпИнтерес, Объект.Ссылка));
		КонецЕсли;			
	КонецЕсли;
	
	ЭтоНовыйПартнер = Ложь;
	
	// +CRM
	СтруктураПараметров = Новый Структура("CRM_ФизЛицо", Объект.Ссылка);
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметров);
	// +СофтФон
	// Записываем маршрутизацию в АТС.
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		Если НЕ ЗначениеЗаполнено(сфпСтарыйПользовательДляПереключения) И НЕ ЗначениеЗаполнено(Объект.сфпПользовательДляПереключенияЗвонков) Тогда	
			Возврат;
		КонецЕсли;	
		СтарыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(Объект.Ссылка, сфпСтарыйПользовательДляПереключения);
		ПользовательОбновлен	= сфпСофтФонПроСервер.сфпЗаписатьНовогоПользователя(Объект.Ссылка, Объект.сфпПользовательДляПереключенияЗвонков, Истина);
		Если ПользовательОбновлен Тогда
			НовыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(Объект.Ссылка, Объект.сфпПользовательДляПереключенияЗвонков);
			СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
			сфпСофтФонПроСервер.сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
		КонецЕсли;	
	КонецЕсли;
	// -СофтФон
	// -CRM
	
	// Начало подстановка в список торговые точки клиента из рабочего стола
	
	Если СписокТорговыеТочки.Количество() <> 0 Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка.вогТорговыеТочки"));
	КонецЕсли;
	
	// Конец подстановка в список торговые точки клиента из рабочего стола
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// +CRM
	Если Объект.CRM_УчаствуетВАнкетировании Тогда
		
		Попытка
	  		Элементы.СправочникВнешниеПользователиВнешнийДоступ.Картинка = БиблиотекаКартинок.Пользователь;
			Элементы.СправочникВнешниеПользователиВнешнийДоступ.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Исключение	
		КонецПопытки;	
		
	КонецЕсли;
		
	Попытка
		Если ЗначениеЗаполнено(СпозиционироватьсяНаРеквизите) Тогда
			Если ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				Для Каждого СтрокаТаблицы Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
					Если СтрокаТаблицы.Вид = СпозиционироватьсяНаРеквизите Тогда
						ТекущийЭлемент = Элементы[СтрокаТаблицы.ИмяРеквизита];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
				Для Каждого СтрокаТаблицы Из ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов Цикл
					Если СтрокаТаблицы.Свойство = СпозиционироватьсяНаРеквизите Тогда
						ТекущийЭлемент = Элементы[СтрокаТаблицы.ИмяРеквизитаЗначение];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("ПланВидовХарактеристикСсылка.CRM_ДополнительнаяИнформация") Тогда
				ТекущийЭлемент = Элементы.ДополнительнаяИнформация;
				НайденныеСтроки = Объект.CRM_ДополнительнаяИнформация.НайтиСтроки(Новый Структура("Свойство", СпозиционироватьсяНаРеквизите));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Элементы.ДополнительнаяИнформация.ТекущаяСтрока = Объект.CRM_ДополнительнаяИнформация.Индекс(НайденныеСтроки[0]);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СпозиционироватьсяНаРеквизите) = Тип("Строка") Тогда
				ТекущийЭлемент = Элементы[СпозиционироватьсяНаРеквизите];
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
		Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	КонецЕсли;
	
	//+вог
	//ВидПартнераПриИзменении(Неопределено);
	//-вог
	// Дублирование из ПриСозданиинаСервере(), т.к. заполнение происходит иногда после получения формы.
	Элементы.CRM_НапоминатьОДнеРождения.Доступность = ЗначениеЗаполнено(Объект.ДатаРождения);
	//+вог
	//CRM_ЗаполнитьВсеТипыОтношений();
	//CRM_ЗаполнитьТипыОтношений();
	//-вог
//ВидимостьИДоступностьПоляПолныхЛет();	
	// -CRM
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	//+вог
	//Показатели
	Если ЭтоАдресВременногоХранилища(АдресХранилищаПоказателей) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеПоказателей", 1);		
		
	КонецЕсли;	
	//-вог
	
	// Выделить команду навигации при открытии формы объекта
	ВыделитьКомандуНавигацииПриОткрытииФормы();
	
	// Отобразить контактную информацию
	
	РедактироватьДР = Ложь;
	
	// +++ VOG Кулаков П.Л. 26.10.2020 CRM-999
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласования(ЭтаФорма);
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") И ИсточникВыбора.ВладелецФормы = ЭтотОбъект Тогда
		Если ИсточникВыбора.ИмяФормы = Нстр("ru = 'ОбщаяФорма.сфпПользователиДляПереключения'") И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
			Объект.сфпПользовательДляПереключенияЗвонков = ВыбранноеЗначение;
			Модифицированность = Истина;
		КонецЕсли;			
	КонецЕсли;		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	CRM_УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКонтактныеДанныеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РедактироватьДР Тогда
		РедактироватьКонтактныеДанные = НСтр("ru = 'Скрыть дополнительные контактные данные'");
		РедактироватьДР = Истина;
	Иначе
		РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
		РедактироватьДР = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияКЛВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") 
		ИЛИ ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс") Тогда
		
		ПозвонитьКЛ(Неопределено);

	ИначеЕсли ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		
		ОтправитьEmailКЛ(Неопределено);
		
	ИначеЕсли ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
		
		АдресСайтаКомпании = ТекущиеДанные.Значение;
		Если Найти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер), АдресСайтаКомпании);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВидыДеятельностиПриАктивизацииСтроки()
	Если Элементы.ВидыДеятельности.ТекущаяСтрока = Неопределено Тогда
		КонтактнаяИнформацияВидДеятельности.Очистить();
		Возврат;
	КонецЕсли;
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		ПоказатьКонтактнуюИнформациюПоВидуДеятельности(Элементы.ВидыДеятельности.ТекущиеДанные.КонтактноеЛицо, Элементы.ВидыДеятельности.ТекущиеДанные.Ответственный);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДеятельностиПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ВидыДеятельностиПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВидыДеятельностиПриАктивизацииПоля(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ВидыДеятельностиПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВидыДеятельностиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПодключитьОбработчикОжидания("Подключаемый_ВидыДеятельностиПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВидПартнераПриИзменении(Элемент)
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	Если НЕ (Элемент = Неопределено) Тогда
		ИзменениеВидаКИТелефонаПриСменеВидаПартнера();
	КонецЕсли;		
	УстановитьВидимостьРеквизитовКИ();
	УстановитьВидимостьРеквизитов();
	НастроитьВидимостьПоложениеГрупп();
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		Элементы.Наименование.КнопкаВыпадающегоСписка = Истина;
		СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
		Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	Иначе	
		Элементы.Наименование.КнопкаВыпадающегоСписка = Ложь;
		Элементы.Наименование.СписокВыбора.Очистить();
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда // Отработал обработчик, а не програмный вызов.
			Объект.ДатаРождения					= Дата("00010101");
			Объект.CRM_НапоминатьОДнеРождения	= Ложь;
			Объект.Пол							= ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	Элементы.Декорация1СПАРКОтступСлева.Видимость = (Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания"))
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ФамилияПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текФамилия) И текФамилия <> СокрЛП(Объект.CRM_Фамилия)) 
			 Или (ПустаяСтрока(Объект.CRM_Фамилия) И Не ПустаяСтрока(текФамилия)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текФамилия, СокрЛП(Объект.CRM_Фамилия)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Фамилия);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Фамилия) И ПустаяСтрока(текФамилия) Тогда
			
			Объект.Наименование = СокрЛП((?(ЗначениеЗаполнено(Объект.CRM_Фамилия),   СокрЛП(Объект.CRM_Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Имя), 		 СокрЛП(Объект.CRM_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Отчество),  СокрЛП(Объект.CRM_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	текФамилия = СокрЛП(Объект.CRM_Фамилия);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИмяПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текИмя) И текФамилия <> СокрЛП(Объект.CRM_Имя)) 
			 Или (ПустаяСтрока(Объект.CRM_Имя) И Не ПустаяСтрока(текИмя)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текИмя, СокрЛП(Объект.CRM_Имя)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
			
			Объект.Наименование = СокрЛП(Объект.CRM_Имя);
			
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Имя) И ПустаяСтрока(текИмя) Тогда
			
			Объект.Наименование = СокрЛП((?(ЗначениеЗаполнено(Объект.CRM_Фамилия), 	 СокрЛП(Объект.CRM_Фамилия) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Имя), 		 СокрЛП(Объект.CRM_Имя) + " ", "")
										+ ?(ЗначениеЗаполнено(Объект.CRM_Отчество),  СокрЛП(Объект.CRM_Отчество), "")));   
			
		КонецЕсли;
		
	КонецЕсли;
	
	текИмя = СокрЛП(Объект.CRM_Имя);
	
	// Определим пол
	Если Не ЗначениеЗаполнено(Объект.Пол) Тогда
		
		Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Объект.CRM_Имя);
		
	КонецЕсли;
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ОтчествоПриИзменении(Элемент)
	
	РедактированиеФИО = Истина;
	
	Если Объект.Ссылка.Пустая() И Не РедактированиеПредставления Тогда
		
		Если (Не ПустаяСтрока(текОтчество)) 
			Или (ПустаяСтрока(Объект.CRM_Отчество) И Не ПустаяСтрока(текОтчество)) Тогда
			
			Объект.Наименование = СокрЛП(СтрЗаменить(Объект.Наименование, текОтчество, СокрЛП(Объект.CRM_Отчество)));
			
		ИначеЕсли ПустаяСтрока(Объект.Наименование) Тогда
		
			Объект.Наименование = СокрЛП(Объект.CRM_Отчество);
	
		ИначеЕсли Не ПустаяСтрока(Объект.CRM_Отчество) И ПустаяСтрока(текОтчество) Тогда

			Объект.Наименование = Объект.Наименование + " " + СокрЛП(Объект.CRM_Отчество);
			
		КонецЕсли;
						
	КонецЕсли;
	
	текОтчество = СокрЛП(Объект.CRM_Отчество);
	
	СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
	Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура тПотенциалНажатие(Элемент)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.CRM_ГруппаПотенциалы;
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойМенеджерПриИзменении(Элемент)
	//Если Не ЗначениеЗаполнено(Объект.сфпПользовательДляПереключенияЗвонков) Тогда
	//	Объект.сфпПользовательДляПереключенияЗвонков = Объект.ОсновнойМенеджер;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
			
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		
		МассивПредставлений = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);
		Если МассивПредставлений.Количество() > 0 Тогда
			Если ДанныеВыбора = Неопределено Тогда
				ДанныеВыбора = Новый СписокЗначений();
			КонецЕсли;
			Для Каждого тДанные Из МассивПредставлений Цикл
				ДанныеВыбора.Вставить(0, тДанные, тДанные);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	РедактированиеПредставления = Истина;
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		
		Если Не РедактированиеФИО И Не ПредставлениеВыбраноИзСписка Тогда
			
			ФИО = Объект.Наименование;
			ФИО = СтрЗаменить(ФИО,",","");
			ФИО = СтрЗаменить(ФИО,".","");		
			ФИО = СтрЗаменить(ФИО,";","");
			
			Если ПустаяСтрока(Объект.CRM_Фамилия) Или Объект.Ссылка.Пустая() Тогда
				
				ПервоеСлово = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
				
				Объект.CRM_Фамилия = ПервоеСлово;			
				
				Объект.CRM_Имя = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
				Если Не ЗначениеЗаполнено(Объект.Пол) Тогда
					Объект.Пол = CRM_КлиентыКлиент.ОпределитьПол(Объект.CRM_Имя);
				КонецЕсли;
				
				Объект.CRM_Отчество = CRM_КлиентыКлиент.ВыделитьЧастьНаименованияКонтактногоЛица(ФИО);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	ЗаполнитьПолноеНаименование();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события НачалоВыбора поля БанковскийСчетПоУмолчанию.
//
Процедура БанковскийСчетПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстСообщения = НСтр("ru = 'Элемент справочника еще не записан.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // БанковскийСчетПоУмолчаниюНачалоВыбора()

&НаКлиенте
Процедура ДоговорПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстСообщения = НСтр("ru = 'Элемент справочника еще не записан.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура тЗадолженностьНажатие(Элемент)
	ПараметрыФормы = Новый Структура("Отбор,КлючВарианта, СформироватьПриОткрытии",Новый Структура("Клиент", Объект.Ссылка),"Ведомость", Истина);
	ОткрытьФорму("Отчет.CRM_ВедомостьВзаиморасчетыСКлиентами.Форма", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(Объект.CRM_ИНН) Тогда
		// Если КПП формируется стандартным образом по ИНН, то для КПП берутся 
		// первые 4 цифры ИНН + 01001, например:
		// ИНН 7712563009
		// КПП 771201001
		ЭтоЮрЛицо = (Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания"));
		Если РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.CRM_ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
			Объект.CRM_КПП = Лев(Объект.CRM_ИНН, 4) + "01001";
		Иначе	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.CRM_ИНН");
			Объект.CRM_КПП = "";
		КонецЕсли;
	Иначе
		Объект.CRM_КПП = "";
	КонецЕсли;
	
		// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если ЗначениеЗаполнено(Объект.CRM_ИНН)
		И НЕ (ЗначениеЗаполнено(Объект.Наименование) 
			ИЛИ ЗначениеЗаполнено(Объект.НаименованиеПолное)) Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	ОтключитьЗаполнениеПоИНН = Истина;
	//ПодключитьОбработчикОжидания("Подключаемый_ВключитьЗаполнениеПоИНН", 0.1, Истина);
	//ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
		// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура БизнесРегионПриИзменении(Элемент)
	
	текБизнесРегион = Объект.БизнесРегион;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
		Если Не ПредставлениеВыбраноИзСписка Тогда
			
			СписокВыбора = CRM_КлиентыКлиент.ПолучитьСписокПредставленийФизЛица(Объект);	
			Элементы.Наименование.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПредставлениеВыбраноИзСписка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеУровнейДоступаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ПоказыватьПодсказкуУровниДоступа", Ложь);
	Элементы.ДекорацияОписаниеУровнейДоступа.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура сфпПользовательДляПереключенияЗвонковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ВыбранноеЗначение, Истина)) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'У выбранного пользователя не заполнен текущий внутренний номер, маршрутизация невозможна.'"));
	КонецЕсли;		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеЛица

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломИзменения(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОбъектСвязи", Объект.Ссылка);	
		ПараметрыФормы.Вставить("Ключ"		 , Элемент.ТекущаяСтрока);	
		
		ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", 
			ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)	
	
	Если Не Копирование Тогда
		Отказ = Истина;
		
		СписокВариантов = Новый СписокЗначений;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			СписокВариантов.Добавить("Выбрать", НСтр("ru = 'Выбрать'"));
		КонецЕсли;
		
		СписокВариантов.Добавить("Создать", НСтр("ru = 'Создать'"));
		СписокВариантов.Добавить("Отмена" , НСтр("ru = 'Отмена'"));
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КонтактныеЛицаПередНачаломДобавленияЗавершение", ЭтотОбъект, ПараметрыОповещения);
		Если СписокВариантов.Количество() = 2 Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокВариантов[0].Значение);
		Иначе	
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Выберите действие...'"), СписокВариантов);
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломДобавленияЗавершение(Вариант, Контекст) Экспорт
	
	Если Вариант = Неопределено
	  ИЛИ Вариант = "Отмена" Тогда 
		Возврат;
	КонецЕсли;	
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектСвязи", Объект.Ссылка);
	// ++ VOG Солодов В.В. 27.05.2019 task 325
	ПараметрыФормы.Вставить("ОграничитьВыбор", 	Истина);
	// -- VOG Солодов В.В. 27.05.2019
	
	Если Вариант = "Создать" Тогда
		СуффиксИмяФормы = "ФормаОбъекта";		
	Иначе			
		СуффиксИмяФормы = "ФормаВыбора";		
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров." + СуффиксИмяФормы,
		ПараметрыФормы, Контекст.Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	//Связи
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьСвязиОбъекта(ВыбранноеЗначение, Объект.Ссылка);
	КонецЕсли;
	
	Элемент.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВзаимодействие

&НаКлиенте
Процедура СписокВзаимодействиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
// ++ VOG Ульянов И.В. 28.11.2019 task 941	
//	ТекущиеДанные = Элементы.СписокВзаимодействие.ТекущиеДанные;
//	
//	Если ТекущиеДанные <> Неопределено Тогда
//		ОткрытьЗначение(ТекущиеДанные.Ссылка);
//	КонецЕсли;
// -- VOG Ульянов И.В. 28.11.2019 task 941
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// +++ VOG Кулаков П.Л. 26.10.2020 CRM-999
&НаКлиенте
Процедура СогласоватьЗадачу(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		УспешнаяЗапись = Записать();
		Если Не УспешнаяЗапись Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВидСогласования = Элементы[Команда.Имя].Заголовок;
	ПараметрыФормы = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("СогласоватьЗадачуЗавершение", ЭтотОбъект,Новый Структура("ВидСогласования",ВидСогласования));
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиРезультатВыполнения", 
			ПараметрыФормы, 
			ЭтотОбъект,
			,
			,
			, 
			ОписаниеОповещения,  
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 10.11.2020 CRM-999
&НаКлиенте
Процедура СогласоватьЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("Отказ") И Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	вогОбщегоНазначенияВызовСервера.СогласоватьЗадачи(ДополнительныеПараметры.ВидСогласования,Объект.Ссылка,Результат.РезультатВыполнения);
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласования(ЭтаФорма);

КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
&НаКлиенте
Процедура ОткрытьТекущуюЗадачу(Команда)
	
	ВыбраннаяЗадача = Неопределено;
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		ВыбраннаяЗадача = ТекущаяЗадача;
	Иначе 
		МассивЗадач = вогОбщегоНазначенияВызовСервера.ПолучитьМассивЗадач(Объект.Ссылка);
		Если МассивЗадач.Количество() > 0 Тогда
			// +++ VOG Кулаков П.Л. 21.12.2020 CRM-1102
			//СписокЗадач = Новый СписокЗначений;
			//СписокЗадач.ЗагрузитьЗначения(МассивЗадач);
			//ВыбраннаяЗадача = СписокЗадач.ВыбратьЭлемент("Выберите задачу");
			ПараметрыФормы = Новый Структура("Предмет",Объект.Ссылка);
			ОткрытьФорму("ОбщаяФорма.вогФормаСпискаЗадачПредмета",
					ПараметрыФормы,
					ЭтаФорма,
					,
					,
					,
					Новый ОписаниеОповещения("ОткрытьТекущуюЗадачуЗавершение", ЭтотОбъект),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			// --- VOG Кулаков П.Л.
		КонецЕсли;
	КонецЕсли;
	
	Если ВыбраннаяЗадача = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",ВыбраннаяЗадача);
	ПараметрыФормы.Вставить("НеОткрыватьПредмет",Истина);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиНезависимыйПроцесс",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				, Новый ОписаниеОповещения("ОткрытьТекущуюЗадачуЗавершение", ЭтотОбъект), 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
&НаКлиенте
Процедура ОткрытьТекущуюЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласования(ЭтаФорма);	
	
КонецПроцедуры // --- VOG Кулаков П.Л.

&НаКлиенте
Процедура ОтправитьСМСКЛ(Команда)
	Если Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ (Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) Тогда
		Возврат;
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Элементы.КонтактныеЛица.ТекущаяСтрока);
		Структура.Вставить("Телефон", ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Значение));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьEmailКЛ(Команда)
	
	ОтправитьEmailИзСписка(Элементы.КонтактныеЛица.ТекущаяСтрока, Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьКЛ(Команда)
	
	Если Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные = Неопределено Тогда
		Возврат;
	Иначе
		Тип = сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Вид,  "Тип");
		Если НЕ (Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// +СофтФон
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
	НомерТелефона = Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Значение;
	сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, Элементы.КонтактныеЛица.ТекущаяСтрока);
	// -СофтФон
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.CRM_ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Наименование) 
		ИЛИ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
// Процедура - обработчик команды формы "Yandex".
//
Процедура ОткрытьАдресКлиентYandex(Команда)
	
	СайтИнтернетКарты = "Yandex";
	ОткрытьАдресКлиент();
	
КонецПроцедуры // Yandex()

&НаКлиенте
// Процедура - обработчик команды формы "Google".
//
Процедура ОткрытьАдресКлиентGoogle(Команда)
	
	СайтИнтернетКарты = "Google";
	ОткрытьАдресКлиент();
	
КонецПроцедуры // Google()

&НаКлиенте
Процедура ОткрытьАдресКлиентGIS(Команда)
	
	СайтИнтернетКарты = "GIS";
	ОткрытьАдресКлиент();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "Yandex".
//
Процедура ОткрытьАдресКЛYandex(Команда)
	
	СайтИнтернетКарты = "Yandex";
	ОткрытьАдресКЛ();
	
КонецПроцедуры // Yandex()

&НаКлиенте
// Процедура - обработчик команды формы "Google".
//
Процедура ОткрытьАдресКЛGoogle(Команда)
	
	СайтИнтернетКарты = "Google";
	ОткрытьАдресКЛ();
	
КонецПроцедуры // Google()

&НаКлиенте
Процедура ОткрытьАдресКЛGIS(Команда)
	
	СайтИнтернетКарты = "GIS";
	ОткрытьАдресКЛ();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "Yandex".
//
Процедура ОткрытьАдресКИВидДеятельностиYandex(Команда)
	
	СайтИнтернетКарты = "Yandex";
	ОткрытьАдресКИВидДеятельности();
	
КонецПроцедуры // Yandex()

&НаКлиенте
// Процедура - обработчик команды формы "Google".
//
Процедура ОткрытьАдресКИВидДеятельностиGoogle(Команда)
	
	СайтИнтернетКарты = "Google";
	ОткрытьАдресКИВидДеятельности();
	
КонецПроцедуры // Google()

&НаКлиенте
Процедура ОткрытьАдресКИВидДеятельностиGIS(Команда)
	
	СайтИнтернетКарты = "GIS";
	ОткрытьАдресКИВидДеятельности();
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьВЮрЛицо(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Преобразовать в юр. лицо"" возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПреобразоватьВЮрЛицоПродолжение", ЭтотОбъект);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		
		Если Модифицированность Тогда
			Если Не Записать() Тогда 
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ПреобразоватьВЮрЛицоПродолжение(Неопределено, Неопределено);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьEmailКИВидДеятельности(Команда)
	
	Если Элементы.ВидыДеятельности.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	СтруктураОтправкиПисьма = ПолучитьСтруктуруОтправкиКИВидДеятельности(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	Если СтруктураОтправкиПисьма = Неопределено Тогда
		ОтправитьEmailИзСписка(Элементы.ВидыДеятельности.ТекущиеДанные.КонтактноеЛицо, Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные);
	Иначе
		ОтправитьEmailИзСписка(Элементы.ВидыДеятельности.ТекущиеДанные.КонтактноеЛицо, СтруктураОтправкиПисьма);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМСКИВидДеятельности(Команда)
	Если Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураОтправкиSMS = ПолучитьСтруктуруОтправкиКИВидДеятельности(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	Если НЕ (Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) И СтруктураОтправкиSMS = Неопределено Тогда
		Возврат;
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		Если СтруктураОтправкиSMS = Неопределено Тогда
			Структура = Новый Структура();
			Структура.Вставить("Ссылка", Элементы.ВидыДеятельности.ТекущиеДанные.КонтактноеЛицо);
			Структура.Вставить("Телефон", ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные.Значение));
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Основание", Структура);
			ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
		Иначе
			Структура = Новый Структура();
			Структура.Вставить("Ссылка", Элементы.ВидыДеятельности.ТекущиеДанные.КонтактноеЛицо);
			Структура.Вставить("Телефон", ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(СтруктураОтправкиSMS.Значение));
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Основание", Структура);
			ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьКЛКИВидДеятельности(Команда)
	
	СтруктураЗвонка = ПолучитьСтруктуруОтправкиКИВидДеятельности(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	Если СтруктураЗвонка = Неопределено Тогда
		Если Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные = Неопределено Тогда
			Возврат;
		Иначе
			Тип = Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные.Тип;
			Если НЕ (Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		// +СофтФон
		Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
		НомерТелефона = Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные.Значение;
		сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, Элементы.ВидыДеятельности.ТекущиеДанные.КонтактноеЛицо);
		// -СофтФон
	Иначе
		// +СофтФон
		Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
		НомерТелефона = СтруктураЗвонка.Значение;
		сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, Элементы.ВидыДеятельности.ТекущиеДанные.КонтактноеЛицо);
		// -СофтФон
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолеКонтактнойИнформации(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюВидВыбран", ЭтотОбъект, ДополнительныеПараметры);
	
	СписокДоступныхВидов = СписокВидовДляДобавленияКонтактнойИнформации();
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДоступныхВидов, Элементы[Команда.Имя]);
	
КонецПроцедуры

#Область НавигацияФормы

&НаКлиенте
Процедура ПереходСтраницы(Команда)
	// Сверунть группу Контакты
	СкрытьРаскрытьВсеГруппы(Истина);
	// Переход страницы
	ВыполнитьПереходСтраницы(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиКоманда(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	//Для каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
	//	Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
	//		ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
	//		ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
	//	Иначе
	//		ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
	//		ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
	//	КонецЕсли;
	//КонецЦикла;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Команда.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СформироватьОтчетСтурктураВзаимосвязи(Команда)
	СформироватьОтчетСтурктураВзаимосвязиСервер();
КонецПроцедуры

&НаКлиенте
Процедура МенеджерыВидВсе(Команда)
	
	СписокМенеджерыИзменитьНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерыВидДействующие(Команда)
	
	СписокМенеджерыИзменитьНаСервере(Команда.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОсновынеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьРезультатПереноса(Результат)
	
	Объект.ДатаРождения					= Дата("00010101");
	Объект.CRM_НапоминатьОДнеРождения	= Ложь;
	Объект.CRM_Имя						= "";
	Объект.CRM_Фамилия					= "";
	Объект.CRM_Отчество					= "";
	Объект.Пол							= ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.ПустаяСсылка");
	Объект.CRM_Фотография				= ПредопределенноеЗначение("Справочник.ПартнерыПрисоединенныеФайлы.ПустаяСсылка");
	
	ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить();
	Для Каждого СтрокаТаб Из Результат.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		НоваяСтрока = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаб);
		ЭтотОбъект[СтрокаТаб.ИмяРеквизита] = СтрокаТаб.Представление;
	КонецЦикла;
	
	// реквизиты и свойства
	Для Каждого Стр Из Результат.СвойстваОписаниеДополнительныхРеквизитов Цикл
		Значение = Стр.Значение;
		Если ЗначениеЗаполнено(Значение) Тогда
			Если НЕ ЗначениеЗаполнено(Стр.СвойствоПриемник) Тогда Продолжить; КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("Булево") И Значение = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСтрок = ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(новый Структура("Свойство", Стр.СвойствоПриемник));
			ЭтотОбъект[МассивСтрок[0].ИмяРеквизитаЗначение] = Значение;
			
			МассивСтрок = ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(новый Структура("Свойство", Стр.Свойство));
			ЭтотОбъект[МассивСтрок[0].ИмяРеквизитаЗначение] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСтруктуруЗначенийРеквизитов()
	
	СтруктураЗначений = Новый Структура;
	
	Для Каждого СтрокаРеквизита Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		СтруктураЗначений.Вставить(СтрокаРеквизита.ИмяРеквизита, ЭтотОбъект[СтрокаРеквизита.ИмяРеквизита]);
	КонецЦикла;
		
	Для Каждого СтрокаРеквизита Из ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов Цикл
		СтруктураЗначений.Вставить(СтрокаРеквизита.ИмяРеквизитаЗначение, ЭтотОбъект[СтрокаРеквизита.ИмяРеквизитаЗначение]);
	КонецЦикла;
	
	Возврат СтруктураЗначений;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеВидаКИТелефонаПриСменеВидаПартнера()
		
	// Задача при смене физ. лица на юр. лицо менять вид КИ "Мобильный телефон частного лица" на "Рабочий телефон".
	Если Объект.ЮрФизЛицо =  ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		СтруктураОтбора			=  Новый Структура("Вид, CRM_ОсновнойДляСвязи", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"), Истина);
		ОпределятьОсновнуюКИ	= (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() = 0);
		СтруктураОтбора			= Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица"));
		ОтборПоВидуКИ			= ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора);
		ЭтоОсновной 			= Ложь;
		Для Каждого СтрокаКИ Из ОтборПоВидуКИ Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
				Продолжить;
			КонецЕсли;				
			Если ОпределятьОсновнуюКИ Тогда
				ЭтоОсновной			 = Истина;
				ОпределятьОсновнуюКИ = Ложь;
			КонецЕсли;	
			СтруктураПоиска = Новый Структура("Вид, Представление", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"), СтрокаКИ.Представление);
			Если (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска).Количество() = 0) Тогда
				СтрокаКИ.Вид		= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера");
				СтрокаКИ.Родитель 	= ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.СправочникПартнеры");
				Если ЭтоОсновной Тогда
					СтрокаКИ.CRM_ОсновнойДляСвязи = Истина;
					CRM_УправлениеКонтактнойИнформациейКлиент.ОсновнойДляСвязиНажатие(ЭтотОбъект, Элементы["ОсновнойДляСвязи"+СтрокаКИ.ИмяРеквизита]);
					ЭтоОсновной = Ложь;
				Иначе
					СтрокаКИ.CRM_ОсновнойДляСвязи = ложь;
				КонецЕсли;	
			КонецЕсли;				
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьВидимостьРеквизитовКИ()
	
	СтруктураОтбора			= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.СправочникПартнеры, Ложь);
	флагВыводаГиперСсылки	= (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
		СтруктураОтбора 		= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания, Ложь);
		флагВыводаГиперСсылки	= флагВыводаГиперСсылки ИЛИ (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		СтруктураОтбора 		= Новый Структура("Родитель, Выводить",Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо, Ложь);
		флагВыводаГиперСсылки	= флагВыводаГиперСсылки ИЛИ (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	КонецЕсли;
	
	Для Каждого СтрокаДопРеквизита Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если НЕ СтрокаДопРеквизита.Выводить Тогда Продолжить; КонецЕсли;
		
		Выводить = Ложь;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			флаг_1 = НЕ (ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита] = "<адрес сайта не указан>") И НЕ РежимВидимостиПоказатьТолькоВажные;
		Иначе	
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]);
		КонецЕсли;	
		
		Если СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания Тогда
			Выводить = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
		ИначеЕсли СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо Тогда
			Выводить = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
		ИначеЕсли СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры Тогда
			Выводить = Истина;
		КонецЕсли;
		
		// +CRM
		Для Каждого СтрокаДобавленногоРеквизита ИЗ ЭтотОбъект.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы Цикл
			Если СтрокаДобавленногоРеквизита.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(СтрокаДобавленногоРеквизита.Значение, СтрокаДопРеквизита.ИмяРеквизита) Тогда
				//+вог
				//СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить");
				СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить") ИЛИ (Не ЗначениеЗаполнено(СтрокаДопРеквизита.Представление) И Не РедактироватьДР);
				//-вог
				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И Не РедактироватьДР Тогда
					Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = СтрокаДопРеквизита.Выводить;
				ИначеЕсли  СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница И Не РедактироватьДР Тогда
					Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = Ложь;
				ИначеЕсли СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты И Не РедактироватьДР Тогда
					Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = СтрокаДопРеквизита.Выводить;
				Иначе		
					Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = (Выводить И ((СтрокаДопРеквизита.Выводить И НЕ СкрыватьПолеКИ) ИЛИ ((РедактироватьДР И НЕ СкрыватьПолеКИ) ИЛИ флаг_1)));
				КонецЕсли;
			КонецЕсли;
		КонецЦИкла;
		// -CRM
		
		Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт Тогда
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= Новый Цвет();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= Новый Шрифт();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Истина;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "";
			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].Высота = 5;
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].МногострочныйРежим = Истина;
				КонецЕсли;
				Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
					ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
					ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора				= истина;
					Если СтрокаДопРеквизита.Вид.РедактированиеТолькоВДиалоге Тогда
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветФона				= WebЦвета.Кремовый;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ИмяРеквизита = Элементы[СтрокаДопРеквизита.ИмяРеквизита].Имя;
			АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
			Если ПустаяСтрока(АдресСайтаКомпании) Тогда
				ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//Элементы.РедактироватьКонтактныеДанные.Видимость = флагВыводаГиперСсылки И Не РежимВидимостиПоказатьТолькоВажные;
	
	//СтруктураОтбора			= Новый Структура("Родитель, Выводить",Справочники.ВидыКонтактнойИнформации.СправочникПартнеры, Ложь);
	// флагВыводаГиперСсылки	=
	// (ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	//Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
	//	СтруктураОтбора			= Новый Структура("Родитель,
	//	Выводить",Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания, Ложь); флагВыводаГиперСсылки =
	//	флагВыводаГиперСсылки ИЛИ
	//	(ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	//	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда СтруктураОтбора   = Новый
	//	Структура("Родитель, Выводить",Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо, Ложь);
	//	флагВыводаГиперСсылки = флагВыводаГиперСсылки ИЛИ
	//	(ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	//	КонецЕсли;
	//
	//Для Каждого СтрокаДопРеквизита ИЗ ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
	//	
	//	Выводить = Ложь;
	//	
	//	Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
	//		флаг_1 = НЕ (ЭтаФорма[СтрокаДопРеквизита.ИмяРеквизита] = "<адрес сайта не указан>");
	//	Иначе	
	//		флаг_1 = ЗначениеЗаполнено(ЭтаФорма[СтрокаДопРеквизита.ИмяРеквизита]);
	//	КонецЕсли;	
	//	Если СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания Тогда
	//		Выводить = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	//	ИначеЕсли СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо Тогда
	//		Выводить = (Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
	//	ИначеЕсли СтрокаДопРеквизита.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры Тогда
	//		Выводить = Истина;
	//	КонецЕсли;
	//	
	//	Если Выводить Тогда
	//		// Флаг_1 = ЗначениеЗаполнено(ЭтаФорма[СтрокаДопРеквизита.ИмяРеквизита]);
	//		Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон) 
	//			ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница) 
	//			ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес) 
	//			ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	//			ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое) Тогда
	//			Элементы["Группа" + СтрокаДопРеквизита.ИмяРеквизита].Видимость = (СтрокаДопРеквизита.Выводить ИЛИ
	//			(РедактироватьДР ИЛИ флаг_1));
	//		Иначе
	//			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Видимость = (СтрокаДопРеквизита.Выводить ИЛИ (РедактироватьДР ИЛИ
	//			флаг_1)); КонецЕсли;
	//		Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт
	//		Тогда
	//		
	//			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= Новый Цвет();
	//			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= Новый Шрифт();
	//			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Неопределено;
	//			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Неопределено;
	//			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Неопределено;
	//			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Неопределено;
	//			Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Истина;
	//			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "";
	//			
	//			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
	//				
	//				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
	//					Элементы[СтрокаДопРеквизита.ИмяРеквизита].Высота = 5;
	//					Элементы[СтрокаДопРеквизита.ИмяРеквизита].МногострочныйРежим = Истина;
	//				КонецЕсли;
	//				
	//				Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
	//				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
	//				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
	//					
	//					Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора				= истина;
	//					Если СтрокаДопРеквизита.Вид.РедактированиеТолькоВДиалоге Тогда
	//						Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
	//						Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветФона				= WebЦвета.Кремовый;
	//					КонецЕсли;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
	//			ИмяРеквизита = Элементы[СтрокаДопРеквизита.ИмяРеквизита].Имя;
	//			АдресСайтаКомпании = ЭтаФорма[ИмяРеквизита];
	//			Если ПустаяСтрока(АдресСайтаКомпании) Тогда
	//				ЭтаФорма[ИмяРеквизита] = "<адрес сайта не указан>";
	//			КонецЕсли;
	//		КонецЕсли;
	//	Иначе
	//		Если НЕ флаг_1 Тогда
	//			Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон) 
	//				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница)
	//				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
	//				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	//				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое) Тогда
	//				Элементы["Группа" + СтрокаДопРеквизита.ИмяРеквизита].Видимость = Выводить;
	//			Иначе
	//				Элементы[СтрокаДопРеквизита.ИмяРеквизита].Видимость = Выводить;
	//			КонецЕсли;
	//			
	//		Иначе
	//			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Видимость = флаг_1;
	//			
	//			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= ЦветаСтиля.CRM_НедоступныеДанныеЦвет;
	//			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт;
	//			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "Реквизит недоступен для текущего вида клиента";
	//			
	//			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
	//				
	//				Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Истина;
	//				Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Ложь;
	//				Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Ложь;
	//				Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Ложь;
	//				Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
	//				
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Элементы.РедактироватьКонтактныеДанные.Видимость = флагВыводаГиперСсылки;
	//
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитов()
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		//Элементы.CRM_ОсновнаяОтрасль.Видимость 		= Ложь;
		//Элементы.ГруппаРеквизитыЮрФизЛица.Заголовок = НСтр("ru = 'Реквизиты физического лица'");
		КоманднаяПанель.ПодчиненныеЭлементы.ПреобразоватьВФизЛицо.Видимость = Истина;
		//Элементы.НаименованиеПолное.Видимость 		= Ложь;
		Элементы.ГруппаФЛ.Видимость 				= Истина;
		Элементы.ГруппаФЛЗаголовки.Видимость 		= Истина;
		Элементы.CRM_Имя.Видимость 					= Истина;
		Элементы.CRM_Отчество.Видимость 			= Истина;
		Элементы.CRM_Фамилия.Видимость 				= Истина;
		Элементы.ГруппаКППОКПОЗаголовки.Видимость	= Ложь;
		Элементы.ГруппаКППОКПО.Видимость			= Ложь;
		Элементы.ДекорацияОГРН.Видимость			= Ложь;
		Элементы.ОГРН.Видимость						= Ложь;		
	Иначе
		//Элементы.CRM_ОсновнаяОтрасль.Видимость 		= Истина;
		//Элементы.ГруппаРеквизитыЮрФизЛица.Заголовок = НСтр("ru = 'Реквизиты юридического лица'");
		КоманднаяПанель.ПодчиненныеЭлементы.ПреобразоватьВФизЛицо.Видимость = Ложь;
		//+вог
		//Элементы.НаименованиеПолное.Видимость 		= Истина;
		//-вог
		Элементы.ГруппаФЛ.Видимость 				= Ложь;
		Элементы.ГруппаФЛЗаголовки.Видимость 		= Ложь;
		Элементы.CRM_Имя.Видимость 					= Ложь;
		Элементы.CRM_Отчество.Видимость 			= Ложь;
		Элементы.CRM_Фамилия.Видимость 				= Ложь;
		Элементы.ГруппаКППОКПОЗаголовки.Видимость	= Истина;
		Элементы.ГруппаКППОКПО.Видимость			= Истина;
		Элементы.ДекорацияОГРН.Видимость			= Истина;
		Элементы.ОГРН.Видимость						= Истина;
	КонецЕсли;
	// +СофтФон	
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() И сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда
		Элементы.сфпПользовательДляПереключенияЗвонков.Видимость = Истина;
		Если сфпСофтФонПроСервер.сфпРолиДоступны("сфпУправлениеМаршрутизацией, ПолныеПрава") Тогда
			Элементы.сфпПользовательДляПереключенияЗвонков.Доступность = Истина;
		Иначе
			Элементы.сфпПользовательДляПереключенияЗвонков.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.сфпПользовательДляПереключенияЗвонков.Видимость = Ложь;
	КонецЕсли;
	// -СофтФон
	// Доступность закладки "Уровни доступа".
	Если НЕ ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОграниченияДоступа") Тогда
		Элементы.ГруппаУровниДоступа.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПервичныйИнтерес(Партнер)
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ИсточникиПервичногоИнтересаСрезПоследних.КаналПервичногоИнтереса,
		|	ИсточникиПервичногоИнтересаСрезПоследних.ИсточникПервичногоИнтереса,
		|	ИсточникиПервичногоИнтересаСрезПоследних.Партнер
		|ИЗ
		|	РегистрСведений.ИсточникиПервичногоИнтереса.СрезПоследних(&Период, Партнер = &Партнер) КАК ИсточникиПервичногоИнтересаСрезПоследних
		|УПОРЯДОЧИТЬ ПО
		|	ИсточникиПервичногоИнтересаСрезПоследних.Период УБЫВ";
		
		Запрос.УстановитьПараметр("Партнер"	,Партнер);
		Запрос.УстановитьПараметр("Период"	,CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("КаналПервичногоИнтереса,ИсточникПервичногоИнтереса,Партнер",
	ПланыВидовХарактеристик.КаналыРекламныхВоздействий.ПустаяСсылка(),
	Неопределено,
	Справочники.Партнеры.ПустаяСсылка());
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнятьПоискДублейПриЗаписиПартнера()
	
	Возврат Константы.CRM_ВыполнятьПоискДублейПриЗаписиПартнера.Получить();
	
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуКонтактов()
	
	СтруктураКонтактов = Новый Структура;
	
	
	Для Каждого Стр Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		Представление = ЭтотОбъект[Стр.ИмяРеквизита];
		Если ПустаяСтрока(Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СтруктураКонтактов.Вставить("АдресЭлектроннойПочты",Представление);
		ИначеЕсли Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			СтруктураКонтактов.Вставить("Адрес",Представление);
		ИначеЕсли Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			СтруктураКонтактов.Вставить("Телефон",Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураКонтактов;
КонецФункции

&НаСервере
Процедура ОбновитьКонтактноеЛицо(Ссылка)
	
	Если Ссылка.Владелец = Объект.Ссылка Тогда
		Если НЕ ЗначениеЗаполнено(Объект.CRM_ОсновноеКонтактноеЛицо) Тогда
			
			Объект.CRM_ОсновноеКонтактноеЛицо = Ссылка;
			Если Не Записать() Тогда 
				Возврат;
			КонецЕсли;	
			Модифицированность = Ложь;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВычислитьКолвоПолныхЛет()	
	РазницаВГодах = Год(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса())-Год(Объект.ДатаРождения);
	Если Месяц(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) > Месяц(Объект.ДатаРождения) Тогда
		Возврат РазницаВГодах;	
	ИначеЕсли Месяц(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) = Месяц(Объект.ДатаРождения) И
		День(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) >= День(Объект.ДатаРождения) Тогда
		Возврат РазницаВГодах;
	Иначе 
		Возврат РазницаВГодах - 1;
	КонецЕсли;		
КонецФункции	

&НаСервере
Процедура ВидимостьИДоступностьПоляПолныхЛет()
	Если НЕ ЗначениеЗаполнено(Объект.ДатаРождения) Тогда
		Элементы.КолвоПолныхЛет.Видимость = Ложь;
	Иначе
		КолвоПолныхЛет = "Возраст: " + ВычислитьКолвоПолныхЛет();
		Элементы.КолвоПолныхЛет.Видимость = Истина;
	КонецЕсли;		 
КонецПроцедуры	

&НаСервере
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	
	// Определить канал и источник первичного интереса.
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			Интерес = ПолучитьПервичныйИнтерес(Объект.Ссылка);
			КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ВывестиРеквизитыПортрета()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_РасположениеРеквизитовКлиентов.ИмяРеквизита,
	|	CRM_РасположениеРеквизитовКлиентов.Колонка КАК Колонка,
	|	CRM_РасположениеРеквизитовКлиентов.ПорядокРасположения КАК ПорядокРасположения,
	|	CRM_РасположениеРеквизитовКлиентов.ПредставлениеРеквизита,
	|	CRM_РасположениеРеквизитовКлиентов.Видимость,
	|	CRM_РасположениеРеквизитовКлиентов.ДопРеквизит
	|ИЗ
	|	РегистрСведений.CRM_РасположениеРеквизитовКлиентов КАК CRM_РасположениеРеквизитовКлиентов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Колонка,
	|	ПорядокРасположения";
	
	ТаблицаРасположения = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТаблицаРасположения Цикл
		Если Не ЗначениеЗаполнено(Строка.ДопРеквизит) Тогда
			Элемент = Элементы.Найти(Строка.ИмяРеквизита);
			Если Элемент = Неопределено Тогда
				Элемент = Элементы.Добавить(Строка.ИмяРеквизита, Тип("ПолеФормы"), Элементы["CRM_Портрет"+Строка.Колонка+"Колонка"]);
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
				Элемент.ПутьКДанным = "Объект."+Строка.ИмяРеквизита;
				Элемент.РастягиватьПоГоризонтали = Истина;
				Элемент.АвтоМаксимальнаяШирина = Истина;
				//Элемент.Видимость = Строка.Видимость;
			Иначе
				Элементы.Переместить(Элемент, Элементы["CRM_Портрет"+Строка.Колонка+"Колонка"]);
			КонецЕсли;
		Иначе
			Элемент = Элементы.Найти(Строка.ИмяРеквизита);
			Если Элемент = Неопределено Тогда
				//Элемент = Элементы.Добавить(Строка.ИмяРеквизита, Тип("ПолеФормы"), Элементы["CRM_Портрет"+Строка.Колонка+"Колонка"]);
			Иначе	
				Элементы.Переместить(Элемент, Элементы["CRM_Портрет"+Строка.Колонка+"Колонка"]);
				//Элемент.Видимость = Строка.Видимость;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоложениеГрупп()
	
	Если Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
		
		Элементы.ГруппаКлиентов.Видимость			= Ложь;
		Элементы.СтраницаВидыДеятельности.Видимость	= Константы.CRM_ИспользоватьВидыДеятельностиУПартнеров.Получить();
		
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
		
		Элементы.ГруппаКлиентов.Видимость			= Истина;
		Элементы.СтраницаВидыДеятельности.Видимость	= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// Расположение реквизитов портрета.
	ВывестиРеквизитыПортрета();
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,, Ложь);
	НастроитьЭлементыДополнительныхРеквизитов();
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

//+вог
&НаСервере
Процедура НастроитьЭлементыДополнительныхРеквизитов()
	
	Для Каждого Элемент Из Элементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы Цикл
		
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			
			Если Элемент.МногострочныйРежим <> Истина Тогда
				
				Элемент.РастягиватьПоГоризонтали = Ложь;
				
			Иначе
				
				Элемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Лево;
				Элемент.РастягиватьПоВертикали   = Ложь;
				Элемент.РастягиватьПоГоризонтали = Истина;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//-вог

Функция ЕстьДублиПартнеров(Знач Партнер, Знач СтруктураПоиска, Знач СписокКонтактов, Знач ТочноеСоответствие)
	
	Выборка = CRM_КлиентыСервер.НайтиДубли(Партнер, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие);
	Если Выборка <> Неопределено И Выборка.Количество()>0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОписаниеАдреса()
	
	ВидАдреса = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("РедактированиеТолькоВДиалоге");
	СтруктураРеквизитов.Вставить("ТолькоНациональныйАдрес");
	СтруктураРеквизитов.Вставить("Тип");
	СтруктураРеквизитов.Вставить("Родитель");
	
	РеквизитыВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидАдреса, СтруктураРеквизитов);
	
	Элементы.АдресОбязательныеПоля.РедактированиеТекста = НЕ РеквизитыВидаКИ.РедактированиеТолькоВДиалоге;
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", "АдресОбязательныеПоля"));
	Если Строки.Количество() = 0 Тогда
		НовСтр = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		НовСтр.ИмяРеквизита = "АдресОбязательныеПоля";
	Иначе
		НовСтр = Строки[0];
	КонецЕсли;
	
	НовСтр.Вид              = ВидАдреса;
	НовСтр.Тип              = РеквизитыВидаКИ.Тип;
	НовСтр.Родитель         = РеквизитыВидаКИ.Родитель;
	НовСтр.Выводить         = Истина;
	НовСтр.Представление 	= АдресОбязательныеПоля;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияБезДействия(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
КонецПроцедуры 

&НаКлиенте
Процедура ВводАдресаСайтаКомпанииЗавершение(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
	Если АдресСайтаКомпании <> Неопределено Тогда
		Если ПустаяСтрока(АдресСайтаКомпании) Тогда
			ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
		Иначе	
			ЭтотОбъект[ИмяРеквизита] = АдресСайтаКомпании;
		КонецЕсли;	
			
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = АдресСайтаКомпании;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM
		
	КонецЕсли;	
КонецПроцедуры 

&НаСервере
Процедура ПоказатьКонтактнуюИнформациюКЛ(СтрокаСсылка)
	
	КонтактнаяИнформацияКЛ.Очистить();
	Если СтрокаСсылка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КИКонтактногоЛица = СтрокаСсылка.КонтактнаяИнформация;
	
	Для Каждого ОбъектКИ Из КИКонтактногоЛица Цикл
		
		НоваяКИ							= КонтактнаяИнформацияКЛ.Добавить();
		НоваяКИ.Вид						= ОбъектКИ.Вид;
		НоваяКИ.Значение				= ОбъектКИ.Представление;
		НоваяКИ.Тип						= ОбъектКИ.Тип;
		НоваяКИ.Порядок					= НоваяКИ.Вид.РеквизитДопУпорядочивания;
		НоваяКИ.CRM_ОсновнойДляСвязи	= ОбъектКИ.CRM_ОсновнойДляСвязи;
		
	КонецЦикла;	
	
	КонтактнаяИнформацияКЛ.Сортировать("Порядок");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКонтактнуюИнформациюПоВидуДеятельности(КЛСсылка, ОтветственныйСсылка);
	КонтактнаяИнформацияВидДеятельности.Очистить();
	
	бВыводитьКИПоОтветственному = Ложь;
	бВыводитьКИПоКЛ = Ложь;
	Попытка
		ТекКолонкаИмя = Элементы.ВидыДеятельности.ТекущийЭлемент.Имя;
		Если ТекКолонкаИмя = "ВидыДеятельностиОтветственный" Тогда
			бВыводитьКИПоОтветственному = Истина;
		ИначеЕсли ТекКолонкаИмя = "ВидыДеятельностиКонтактноеЛицо" Тогда
			бВыводитьКИПоКЛ = Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если бВыводитьКИПоКЛ Тогда
		Для Каждого ОбъектКИ Из КЛСсылка.КонтактнаяИнформация Цикл
			НоваяКИ							= КонтактнаяИнформацияВидДеятельности.Добавить();
			НоваяКИ.Вид						= ОбъектКИ.Вид;
			НоваяКИ.Значение				= ОбъектКИ.Представление;
			НоваяКИ.Тип						= ОбъектКИ.Тип;
			НоваяКИ.Порядок					= НоваяКИ.Вид.РеквизитДопУпорядочивания;
			НоваяКИ.CRM_ОсновнойДляСвязи	= ОбъектКИ.CRM_ОсновнойДляСвязи;
		КонецЦикла;
	КонецЕсли;
	
	Если бВыводитьКИПоОтветственному Тогда
		Для Каждого ОбъектКИ Из ОтветственныйСсылка.КонтактнаяИнформация Цикл
			НоваяКИ							= КонтактнаяИнформацияВидДеятельности.Добавить();
			НоваяКИ.Вид						= ОбъектКИ.Вид;
			НоваяКИ.Значение				= ОбъектКИ.Представление;
			НоваяКИ.Тип						= ОбъектКИ.Тип;
			НоваяКИ.Порядок					= НоваяКИ.Вид.РеквизитДопУпорядочивания;
		КонецЦикла;	
	КонецЕсли;
	
	КонтактнаяИнформацияВидДеятельности.Сортировать("Порядок");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьEmailИзСписка(ОбъектКонтактнойИнформации, КонтактнаяИнформация)
	
	Если ОбъектКонтактнойИнформации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтактнаяИнформация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтактнаяИнформация.Тип <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		Возврат;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СокрЛП(КонтактнаяИнформация.Значение)) Тогда
		Возврат;	
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.Добавить(ОбъектКонтактнойИнформации, КонтактнаяИнформация.Значение);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
			
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивАдресов(Партнер = Неопределено, КонтактноеЛицо  = Неопределено, Вид)
	
	ТаблицаАдресов = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Партнер, КонтактноеЛицо, Перечисления.ТипыКонтактнойИнформации.Адрес, Вид);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаАдресов);
	
КонецФункции	

&НаКлиенте
Процедура ОткрытьАдресКЛ()
	
	Если Элементы.КонтактныеЛица.ТекущаяСтрока = Неопределено Тогда Возврат; КонецЕсли;
	Если Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	Тип = Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Тип;
	Если НЕ (Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес")) Тогда Возврат; КонецЕсли;
	МассивАдресов = ПолучитьМассивАдресов(, Элементы.КонтактныеЛица.ТекущаяСтрока, Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Вид);
	Если МассивАдресов.Количество() = 0 Тогда Возврат; КонецЕсли;
	ВыбранныйАдрес		= МассивАдресов[0].ЗначенияПолей;
	ПредставлениеАдреса	= МассивАдресов[0].Представление;
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(ВыбранныйАдрес);
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;	
	СтруктураАдреса.Вставить("Представление", ПредставлениеАдреса);
	
	CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАдресКИВидДеятельности()
	
	Если Элементы.ВидыДеятельности.ТекущаяСтрока = Неопределено Тогда Возврат; КонецЕсли;
	Если Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	Тип = Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные.Тип;
	Если НЕ (Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес")) Тогда Возврат; КонецЕсли;
	МассивАдресов = ПолучитьМассивАдресов(, Элементы.КонтактныеЛица.ТекущаяСтрока, Элементы.КонтактнаяИнформацияВидДеятельности.ТекущиеДанные.Вид);
	Если МассивАдресов.Количество() = 0 Тогда Возврат; КонецЕсли;
	ВыбранныйАдрес		= МассивАдресов[0].ЗначенияПолей;
	ПредставлениеАдреса	= МассивАдресов[0].Представление;
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(ВыбранныйАдрес);
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;	
	СтруктураАдреса.Вставить("Представление", ПредставлениеАдреса);
	
	CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОтправкиКИВидДеятельности(ТипКИ)
	СтруктураОтбора = Новый Структура("Тип", ТипКИ);
	МассивСтрок = КонтактнаяИнформацияВидДеятельности.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 1 Тогда
		СтруктураОтправкиПисьма = Новый Структура;
		СтруктураОтправкиПисьма.Вставить("Тип", ТипКИ);
		СтруктураОтправкиПисьма.Вставить("Значение", МассивСтрок[0].Значение);
		Возврат  СтруктураОтправкиПисьма;
		
	Иначе
		Возврат Неопределено;	
	КонецЕсли;	
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьПолноеНаименование()
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		ПравоваяФорма = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ПравоваяФормаКлиентаПоУмолчанию");
		Объект.НаименованиеПолное = ?(СокрЛП(ПравоваяФорма) = "" ,СокрЛП(Объект.Наименование),СокрЛП(ПравоваяФорма)+" """+СокрЛП(Объект.Наименование)+"""");
	Иначе
		Объект.НаименованиеПолное = СокрЛП(Объект.Наименование);			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьВЮрЛицоПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда	
		Возврат;
	КонецЕсли;	
	
	СтруктураЗначенийРеквизитов = ПодготовитьСтруктуруЗначенийРеквизитов();
	СтруктураПараметров = Новый Структура("ПартнерСсылка, ВидПартнера, КонтактнаяИнформацияОписаниеДополнительныхРеквизитов,
		|Свойства_ОписаниеДополнительныхРеквизитов, ЗначенияДопРеквизитов",
		Объект.Ссылка, Объект.ЮрФизЛицо, ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов,
		ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов, СтруктураЗначенийРеквизитов);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПреобразоватьВЮрЛицоЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Партнеры.Форма.CRM_ФормаСозданияКонтактногоЛица", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьВЮрЛицоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания");
		ОбработатьРезультатПереноса(Результат);
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УстановитьВидимостьРеквизитовКИ();
		УстановитьВидимостьРеквизитов();
		НастроитьВидимостьПоложениеГрупп();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьСтруктуруПоиска()
	
	СтруктураПоиска = Новый Структура;
	
	ЗначениеХранилища = Константы.CRM_РеквизитыПоискаДублейПартнеров.Получить();
	РеквизитыПоиска = ЗначениеХранилища.Получить();
	Если РеквизитыПоиска <> Неопределено Тогда
		Если ТипЗнч(РеквизитыПоиска) = Тип("СписокЗначений") Тогда
			Для Каждого СтрокаСписка Из РеквизитыПоиска Цикл
				Если СтрокаСписка.Пометка Тогда	
					Значение = СтрокаСписка.Значение;
					ТочкаСЗапятой = Найти(Значение,";");
		
					СтруктураПоиска.Вставить(Сред(Значение,1,ТочкаСЗапятой-1),Сред(Значение,ТочкаСЗапятой+1));
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПоиска;
	
КонецФункции

#КонецОбласти

#Область МеханизмКартинок

&НаСервере
Процедура CRM_УправлениеВидимостьюРамкиКартинки()
	Если ЗначениеЗаполнено(АдресКартинки) Тогда
		Элементы.ФайлКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);		
	Иначе
		Элементы.ФайлКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);		
	КонецЕсли;		
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервере
Процедура ВывестиНедоступностьКартинки()
	АдресКартинки = "";
	Элементы.АдресКартинки.ТекстНевыбраннойКартинки
		= НСтр("ru = 'Картинка не доступна (не доступен том) обратитесь к администратору.'");
	Объект.CRM_Фотография = Справочники.ПартнерыПрисоединенныеФайлы.ПустаяСсылка();
	CRM_УправлениеВидимостьюРамкиКартинки();	
КонецПроцедуры // ВывестиНедоступностьКартинки()

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Если Не Записать() Тогда
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
    
    ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
    
    Перем ИдентификаторФайла;
    
    ВыборИзображения   = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, CRM_ОбщегоНазначенияКлиент.ФильтрФайловИзображений());
	// +CRM_УТ
	#Если НЕ ВебКлиент Тогда
	// -CRM_УТ
	ВыборИзображения   = Ложь;
	// +CRM_УТ
	#КонецЕсли
	// -CRM_УТ
	
	CRM_УправлениеВидимостьюРамкиКартинки();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	Если ПустаяСтрока(АдресКартинки) Тогда Возврат; КонецЕсли;
	АдресКартинки = "";
	Объект.CRM_Фотография = ПредопределенноеЗначение("Справочник.ПартнерыПрисоединенныеФайлы.ПустаяСсылка");
	Модифицированность = Истина;
	CRM_УправлениеВидимостьюРамкиКартинки();	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе 
        Возврат
    КонецЕсли;
    
    ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
    
    ВыборИзображения = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
    ВыборИзображения = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.CRM_Фотография);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("CRM_Фотография", "АдресКартинки",
		НСтр("ru='Отсутствует изображение для просмотра'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				Объект[ИмяРеквизитаОбъекта],
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	СтруктураПараметрыВыбора =
		Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);

	ОткрытьФорму(
		"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		СтруктураПараметрыВыбора,,,,,
		Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда
        Объект.CRM_Фотография = Результат;
        АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор)
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СПАРКРиски
&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	ОбновитьОтображениеИндексыСПАРК();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Многострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Объект,
		Объект.CRM_ИНН, // Искать по ИНН
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

// Команды1СПАРКРиски
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду1СПАРКРиски(Команда)
	СПАРКРискиКлиент.ВыполнитьПодключаемуюКоманду(Команда, ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ДосьеКлиента(Команда)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Контрагент", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ИНН", Объект.CRM_ИНН);
	ОткрытьФорму("Отчет.ДосьеКонтрагента.Форма.CRM_Форма",ПараметрыОткрытия); 
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастроитьпортретКлиента(Команда)
	ОткрытьФорму("РегистрСведений.CRM_РасположениеРеквизитовКлиентов.Форма.ФормаНастройки", Новый Структура(), ЭтотОбъект, УникальныйИдентификатор);
КонецПроцедуры


#КонецОбласти

#Область РаботаСКонтрагентом

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		// Обработка ошибок
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
				|необходимо подключиться к Интернет-поддержке пользователей.
				|Подключиться сейчас?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "")
	
	ЭтоЮридическоеЛицо = Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(Объект.CRM_ИНН);
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(Объект.CRM_ИНН);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента, , "ДатаРегистрации");	
	
	Если ЭтоЮридическоеЛицо Тогда
		Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И ЗначениеЗаполнено(РеквизитыКонтрагента.ЮридическийАдрес) Тогда
			ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.CRM_ЮрАдрес, 
				РеквизитыКонтрагента.ЮридическийАдрес);
			УстановитьВидимостьРеквизитовКИ();
		КонецЕсли;
	Иначе		
		Объект.CRM_Фамилия	= РеквизитыКонтрагента.Фамилия;
		Объект.CRM_Имя		= РеквизитыКонтрагента.Имя;
		Объект.CRM_Отчество	= РеквизитыКонтрагента.Отчество;
		Объект.Пол	= ?(РеквизитыКонтрагента.Пол = "1", Перечисления.ПолФизическогоЛица.Мужской, Перечисления.ПолФизическогоЛица.Женский);
	КонецЕсли;
	Если РеквизитыКонтрагента.Свойство("Телефон") И ЗначениеЗаполнено(РеквизитыКонтрагента.Телефон) Тогда
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера, 
			РеквизитыКонтрагента.Телефон);
	КонецЕсли;
		
	Если РеквизитыКонтрагента.Свойство("РегистрацияВНалоговомОргане") И РеквизитыКонтрагента.РегистрацияВНалоговомОргане.Свойство("ДатаРегистрации") Тогда	
		
		Объект.CRM_ДатаРегистрацииКомпании = РеквизитыКонтрагента.РегистрацияВНалоговомОргане.ДатаРегистрации;
		
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.ЗначенияПолей = СтруктураДанных.КонтактнаяИнформация;
	ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено 
		И Результат <> КодВозвратаДиалога.Отмена Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(ТекстЗаполнения)

	Если ЗначениеЗаполнено(ТекстЗаполнения)
		И (СтрДлина(ТекстЗаполнения) = 10 ИЛИ СтрДлина(ТекстЗаполнения) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстЗаполнения) Тогда // Текст заполнения содержит ИНН.
	
		Объект.Наименование = "";
		Объект.CRM_ИНН = ТекстЗаполнения;
		Объект.ЮрФизЛицо = ?(СтрДлина(ТекстЗаполнения) = 10,
			Перечисления.КомпанияЧастноеЛицо.Компания,
			Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
			
		ЗаполнитьРеквизитыПоИНННаСервере();
		
		ТекстЗаполнения = Неопределено;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область вогТипыОтношений

&НаСервере
Процедура вогЗаполнитьВсеТипыОтношенийСервер()
	
	CRM_ВсеТипыОтношений.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыОтношений", Объект.вогТипыОтношений.Выгрузить());
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТипыОтношенийПартнера.ТипОтношений КАК ТипОтношений
		|ПОМЕСТИТЬ втПартнерТипыОтношений
		|ИЗ
		|	&ТипыОтношений КАК ТипыОтношенийПартнера
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипОтношений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА втПартнерТипыОтношений.ТипОтношений ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Пометка,
		|	CRM_ТипыОтношений.Ссылка,
		|	CRM_ТипыОтношений.Представление
		|ИЗ
		|	Справочник.CRM_ТипыОтношений КАК CRM_ТипыОтношений
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПартнерТипыОтношений КАК втПартнерТипыОтношений
		|		ПО CRM_ТипыОтношений.Ссылка = втПартнерТипыОтношений.ТипОтношений
		|
		|УПОРЯДОЧИТЬ ПО
		|	втПартнерТипыОтношений.ТипОтношений
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		CRM_ВсеТипыОтношений.Добавить(Выборка.Ссылка, Выборка.Представление, Выборка.Пометка);
		
	КонецЦикла;
	
КонецПроцедуры // вогЗаполнитьВсеТипыОтношений()

&НаКлиентеНаСервереБезКонтекста
Процедура вогЗаполнитьТипыОтношений(Форма)
	Форма.CRM_ТипыОтношений = "";
	Для Каждого ТипОтношений Из Форма.CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			Форма.CRM_ТипыОтношений = Форма.CRM_ТипыОтношений  + "; " + ТипОтношений.Представление;
		КонецЕсли;	
	КонецЦикла;	
	Если СтрДлина(Форма.CRM_ТипыОтношений) > 0 Тогда
		Форма.CRM_ТипыОтношений = Сред(Форма.CRM_ТипыОтношений, 3);
	КонецЕсли;	
КонецПроцедуры // вогЗаполнитьТипыОтношений();

&НаКлиенте
Процедура вогЗаписатьВсеТипыОтношенийКлиент()
	
	Объект.вогТипыОтношений.Очистить();
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		ТипОтношенийСсылка = ТипОтношений.Значение;
		Если ТипОтношений.Пометка Тогда
			Объект.вогТипыОтношений.Добавить().ТипОтношений = ТипОтношенийСсылка;	
			
		КонецЕсли;	
			
	КонецЦикла;
	
КонецПроцедуры // вогЗаписатьВсеТипыОтношенийКлиент()

&НаСервере
Процедура вогЗаписатьВсеТипыОтношений(ТекущийОбъект)
	
	ТекущийОбъект.вогТипыОтношений.Очистить();
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		ТипОтношенийСсылка = ТипОтношений.Значение;
		Если ТипОтношений.Пометка Тогда
			ТекущийОбъект.вогТипыОтношений.Добавить().ТипОтношений = ТипОтношенийСсылка;	
			
		КонецЕсли;	
		
		ИмяПредопределенныхДанных = ТипОтношений.Значение.ИмяПредопределенныхДанных;
		Если ЗначениеЗаполнено(ИмяПредопределенныхДанных) Тогда
			Попытка
				ТекущийОбъект[ИмяПредопределенныхДанных] = ТипОтношений.Пометка;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры // вогЗаписатьВсеТипыОтношений()

#КонецОбласти

#Область УправлениеДоступом

#Область ДоступныеОрганизации

&НаКлиенте
Процедура ДоступныеОрганизацииЗапретМодификацииСостава(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СвязиОбъектов

&НаСервереБезКонтекста
Процедура УстановитьСвязиОбъекта(МассивОбъектов, ОбъектСвязи)

	// ++ VOG Солодов В.В. 27.05.2019 task 325
	Для Каждого СтруктураСвязи Из МассивОбъектов Цикл
		вогУправлениеСвязями.УстановитьСвязьОбъекта(СтруктураСвязи.КонтактноеЛицо, ОбъектСвязи, СтруктураСвязи);
	КонецЦикла;
	// До изменения
	//Для каждого КонтактноеЛицо Из МассивОбъектов Цикл
	//	вогУправлениеСвязями.УстановитьСвязьОбъекта(КонтактноеЛицо, ОбъектСвязи);
	//КонецЦикла;
	// -- VOG Солодов В.В. 27.05.2019

КонецПроцедуры

#КонецОбласти

#Область СтатусСогласования

&НаКлиенте
Процедура СтатусСогласованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;			
	вогОбщегоНазначенияКлиент.ОбработкаНажатияСтатусаСогласования(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементовПереключательРежима

&НаКлиенте
Процедура УстановитьАктивностьТекущийЭлемент()
	ЭтаФорма.ТекущийЭлемент = Элементы[ТекущийЭлементВыбор];
КонецПроцедуры

&НаКлиенте
Процедура СтраницыКарточкаОбъектаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаРеквизитыОбъекта Тогда
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Истина;
	Иначе
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГруппыРекурсивно(Элемент, Видимость)
	Если Видимость = Истина И 
		(СтрНайти(Элемент.Имя, "ДекорацияОткрыть") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаОбъемКолонки") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаДлинаКолонки") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаПлощадьКолонки") <> 0) Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Видимость = Видимость;
	Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьВидимостьГруппыРекурсивно(ПодчиненныйЭлемент,Видимость);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиФормыПриИзменении(Элемент)
	
	Если НастройкаВидимостиФормы = "ПоказатьВсе" Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Ложь);
	ИначеЕсли НастройкаВидимостиФормы = "ПоказатьОсновные" Тогда
		РежимВидимостиПоказатьТолькоВажные = Истина;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Ложь);
	Иначе
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиКарточкиОбъектаПриИзменении(Элемент)
	
	Если НастройкаВидимостиКарточкиОбъекта = "ПоказатьЗаполненные" Тогда
		РежимВидимостиПоказатьТолькоЗаполненные = Истина;
	Иначе
		РежимВидимостиПоказатьТолькоЗаполненные = Ложь;
	КонецЕсли;   
	
	ОбновитьКарточку();
	
КонецПроцедуры

&НаСервере
Процедура СкрытьРаскрытьВсеГруппы(Свернуть = Неопределено)
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	
	Для Каждого ИмяГруппы из ИменаСворачиваемыхГрупп Цикл
		
		ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИменаСворачиваемыхГрупп()
	
	ИменаСворачиваемыхГрупп = Новый Массив;
	
//	ИменаСворачиваемыхГрупп.Добавить("Портрет");
	//ИменаСворачиваемыхГрупп.Добавить("КонтактнаяИнформация");
	//ИменаСворачиваемыхГрупп.Добавить("Детали");
	
	Возврат ИменаСворачиваемыхГрупп;
	
КонецФункции


#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементов

&НаСервере
Процедура НастроитьФорму(НастройкиВидимостиИЗаголовков = Неопределено)
	
	Элементы.СтраницаКарточкаОбъекта.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
	// Настройка видимости и заголовков
	Если Не ЗначениеЗаполнено(НастройкиВидимостиИЗаголовков) Тогда
		НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	КонецЕсли;
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
		
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) <> Неопределено Тогда
			Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		КонецЕсли;
		
		// Формирование видимости элементов подменю "Перейти"
		ИмяКоманды = ЭлементВидимость.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				Элементы[ИмяКоманды].Видимость = ЭлементВидимость.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		Если Элементы.Найти(ЭлементЗаголовок.Ключ) <> Неопределено Тогда
			Элементы[ЭлементЗаголовок.Ключ].Заголовок = ЭлементЗаголовок.Значение;
		КонецЕсли;
		
		// Формирование заголовков элементов подменю "Перейти"
		ИмяКоманды = ЭлементЗаголовок.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				
				СтрокаИсключение = НСтр("ru = 'Список'");
				НачалоСтроки     = СтрНайти(ЭлементЗаголовок.Значение, "(") - 1;
				
				Если СтрНайти(ЭлементЗаголовок.Значение, СтрокаИсключение) = 0
					И НачалоСтроки > 0 Тогда
					
					Элементы[ИмяКоманды].Заголовок = СокрЛП(Лев(ЭлементЗаголовок.Значение, НачалоСтроки));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
			
	НастроитьВидимостьСворачиваемыхГрупп();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемыхГрупп()
	
	//НастроитьВидимостьСворачиваемойГруппы("Портрет");
	НастроитьВидимостьСворачиваемойГруппы("КонтактнаяИнформация");
	//НастроитьВидимостьСворачиваемойГруппы("Детали");
		
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемойГруппы(ИмяГруппы)
	
	ЭлементСворачиваяГруппа = Элементы["СворачиваемаяГруппа" + ИмяГруппы];
	Элементы["ГруппаЗаголовок" + ИмяГруппы].Видимость = ЕстьВидимыеЭлементыВГруппе(ЭлементСворачиваяГруппа);
	
КонецПроцедуры

&НаСервере
Функция ЕстьВидимыеЭлементыВГруппе(Элемент)
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Если ПодчиненныйЭлемент.Видимость 
				И ЕстьВидимыеЭлементыВГруппе(ПодчиненныйЭлемент) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПодчиненныйЭлемент.Видимость Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	ИмяГруппыСвернутьРазвернуть = Элемент.Имя;
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияОткрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияЗакрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ЗаголовокГруппы", "");
	ИзменитьСвернутостьГруппы(ИмяГруппыСвернутьРазвернуть);
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы",0.0001,Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть = Неопределено)
	Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость, Не Свернуть);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Свернуть);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Не Свернуть);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	Если Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяГруппыСвернутьРазвернуть];
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазвернутьСворачиваемуюГруппу(ИмяГруппы)
	ГруппаРодитель  = Элементы[ИмяГруппы].Родитель;
	Если ГруппаРодитель = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	ИмяГруппыРодителя =ГруппаРодитель.Имя;
	
	Если СтрНайти(ИмяГруппыРодителя, "СворачиваемаяГруппа") = 0 Тогда
		РазвернутьСворачиваемуюГруппу(ИмяГруппыРодителя);
	Иначе
		ИмяГруппыРодителя = СтрЗаменить(ИмяГруппыРодителя, "СворачиваемаяГруппа", "");
		ИзменитьСвернутостьГруппы(ИмяГруппыРодителя, Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СтатусыСогласования

&НаСервере
Процедура ОбновитьДанныеСтатусаСогласования()

	ОписаниеСтатуса = вогОбщегоНазначения.ПолучитьОписаниеСтатусаСогласованияОбъекта(Объект.Ссылка);
	СтатусСогласования = ОписаниеСтатуса.Статус;
	РегистраторСтатуса = ОписаниеСтатуса.РегистраторСтатуса;

КонецПроцедуры

#КонецОбласти

#Область Показатели

&НаКлиенте
Процедура Подключаемый_ОтобразитьДанныеПоказателей()

	МассивДанных = ПолучитьИзВременногоХранилища(АдресХранилищаПоказателей); 
	Если ТипЗнч(МассивДанных) = Тип("Массив") Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеПоказателей");	
		Для каждого ОписаниеПоказателя Из МассивДанных Цикл
			ОбластьПоказателя = КарточкаОбъекта.Области["ОбластьПоказателя_" + ОписаниеПоказателя.Имя];
			
			ОбластьПоказателя.Текст    = ОписаниеПоказателя.Значение;
			ОбластьПоказателя.Картинка = Неопределено;
			
		КонецЦикла;
		
		ПоказателиПолучены = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ОтобразитьДанныеПоказателей()
	
#КонецОбласти

#Область Подключаемый_МеханизмЗапускаБизнесПроцессов

&НаКлиенте
Процедура Подключаемый_ЗапускБизнесПроцесса(Команда)
	скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);
КонецПроцедуры // Подключаемый_ЗапускБизнесПроцесса()

#КонецОбласти

#Область МакетыИнформации

#Область ИнформацияОбъект

&НаКлиенте
Процедура ИнформацияОбъектОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры) // ++ Тищенко В.В.
	
	СтандартнаяОбработка 				= Ложь;
	ТекстОбработчика 					= "";
	ТаблицаОбработчики 					= ЭтаФорма["КарточкаОбъекта_Обработчики"];
	ТаблицаРасшифровка					= ЭтаФорма["КарточкаОбъекта_Расшифровка"];
	ТаблицаРасшифровкиКлассификатора 	= ЭтаФорма["КарточкаОбъекта_РасшифровкаКлассификатора"];
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Гиперссылка_") <> 0 Тогда
		ИмяГиперссылки 		= СтрЗаменить(Расшифровка,"Гиперссылка_","");
		Для каждого ТекущийОбработчик Из ТаблицаОбработчики Цикл
			Если ТекущийОбработчик.Имя = ИмяГиперссылки Тогда
				ТекстОбработчика = ТекущийОбработчик.ПроизвольныйКод;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение	
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Пользователи") Тогда
		// Сверунть группу Контакты
		СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
		ВыполнитьПереходСтраницы("СтраницаМенеджеры");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		// Сверунть группу Контакты
		СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
		ВыполнитьПереходСтраницы("СтраницаКонтактныеЛица");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		ПоказатьЗначение(Неопределено,Расшифровка);
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Расшифровка_") <> 0 Тогда
		ИмяРасшифровки 	= СтрЗаменить(Расшифровка,"Расшифровка_","");
		ИмяПараметра 	= "Объект." + ИмяРасшифровки;
		Для каждого ТекущийОбработчик Из ТаблицаРасшифровка Цикл
			Если ТекущийОбработчик.Имя = ИмяПараметра Тогда
				ТекстОбработчика = ТекущийОбработчик.ТекстОбработчика;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"КИ_") <> 0 Тогда
		Расшифровка = СокрЛП(СтрЗаменить(Расшифровка,"КИ_",""));
		Результат = ОпределитьТипКонтактнойИнформации(Объект.Ссылка,Расшифровка);
		Если Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(Результат.Представление, Объект.Ссылка);
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
			//УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(Результат.Представление, "Яндекс.Карты");
			СтруктураАдреса 	= Новый Структура; 
			СтруктураАдреса.Вставить("Представление", Результат.Представление);
			СписокКарт 			= Новый СписокЗначений;
			СписокКарт.Добавить("вогГеокодирование","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
			ОписаниеОповещения 	= Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокКарт.Получить(0)); 
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо("", Результат.Представление, Результат.Тип);
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
			УправлениеКонтактнойИнформациейКлиент.ПерейтиПоВебСсылке("", Результат.Представление, Результат.Тип);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов") Тогда
		НайденныеСтроки = ТаблицаРасшифровкиКлассификатора.НайтиСтроки(Новый Структура("Имя",Расшифровка));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			WebService 	= НайденныеСтроки[0].Расшифровка;
			Если ТипЗнч(WebService) = Тип("СправочникСсылка.вогWebServices") Тогда
				Результат 	= вогИнтеграцияСУчетнойСистемой.СформироватьОтчетЧерезWebService(Объект.Ссылка,WebService);
				Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
					Результат.ОтображатьСетку = Ложь;
					Результат.ОтображатьЗаголовки = Ложь;
					ЗаголовокОтчета = Строка(Расшифровка) +" "+Объект.Ссылка;
					Результат.Показать(НСтр("ru = '"+ЗаголовокОтчета+"'"));
				КонецЕсли;
			ИначеЕсли WebService <> Неопределено Тогда // Солодов // Добавил условие
				ТекстОбработчика = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(WebService,"ПроизвольныйКод",Истина);
				Выполнить(ТекстОбработчика);
			Иначе // VOG Солодов
				вогУправлениеИнтерфейсомКлиент.ОбработатьРасшифровкуИнформации(ЭтотОбъект, Расшифровка);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы") Тогда
		
		Если ТаблицаРасшифровкиКлассификатора.НайтиСтроки(Новый Структура("Имя", Расшифровка)).Количество() <> 0 Тогда
			вогУправлениеИнтерфейсомКлиент.ОбработатьРасшифровкуИнформации(ЭтотОбъект, Расшифровка);	
		Иначе
			МассивЗначенийКлассификатора = ПолучитьЗначенияКлассификатора(Расшифровка);
			Для Индекс = 0 По МассивЗначенийКлассификатора.Количество() - 1 Цикл
				СтруктураОтбора = Новый Структура("Имя", МассивЗначенийКлассификатора[Индекс]);
				Если ТаблицаРасшифровкиКлассификатора.НайтиСтроки(СтруктураОтбора).Количество() <> 0 Тогда
					вогУправлениеИнтерфейсомКлиент.ОбработатьРасшифровкуИнформации(ЭтотОбъект, Расшифровка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		вогОбщегоНазначенияКлиент.РасшифрокаВнешниеДанныеМакет(Расшифровка);	
	КонецЕсли;
	
КонецПроцедуры // -- Тищенко В.В.

&НаСервереБезКонтекста
Функция ОпределитьТипКонтактнойИнформации(Ссылка,Представление) // ++ Тищенко В.В.

	РезультатЗапроса 	= Неопределено;
	ТекущаяТаблица 		= ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	"+(ТекущаяТаблица)+".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактнаяИнформация.НомерСтроки = &НомерСтроки");
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("НомерСтроки",Число(Представление));

	
	//Запрос.УстановитьПараметр("Представление",Представление);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ИсходящаяСтруктура 				= Новый Структура("Тип,Вид,Представление");
		ВыборкаИзРезультатаЗапроса 		= РезультатЗапроса.Выбрать();
		Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ИсходящаяСтруктура,ВыборкаИзРезультатаЗапроса);
			РезультатЗапроса 			= ИсходящаяСтруктура;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатЗапроса;

	
КонецФункции // -- Тищенко В.В.

#КонецОбласти

#КонецОбласти

#Область Дополнительные_обработчики

&НаКлиенте
Процедура ДатаРожденияПриИзменении(Элемент)
	
	Объект.CRM_НапоминатьОДнеРождения = ЗначениеЗаполнено(Объект.ДатаРождения);
	Элементы.CRM_НапоминатьОДнеРождения.Доступность = ЗначениеЗаполнено(Объект.ДатаРождения);
	ВидимостьИДоступностьПоляПолныхЛет();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКонтактнуюИнформациюКлиенты(СтрокаСсылка)
	
	КонтактнаяИнформацияКлиенты.Очистить();
	Если СтрокаСсылка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КИКлиенты = СтрокаСсылка.КонтактнаяИнформация;
	
	Для Каждого ОбъектКИ Из КИКлиенты Цикл
		
		// Фильтр видов КИ заблокированных в карточках контактных лиц, свазанных с ключевым физ лицом.
		//Если ОбъектКИ.Вид = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица
		//ИЛИ ОбъектКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица
		//ИЛИ ОбъектКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица Тогда
		//	Продолжить;
		//КонецЕсли;
		
		НоваяКИ							= КонтактнаяИнформацияКлиенты.Добавить();
		НоваяКИ.Вид						= ОбъектКИ.Вид;
		НоваяКИ.Значение				= ОбъектКИ.Представление;
		НоваяКИ.Тип						= ОбъектКИ.Тип;
		НоваяКИ.Порядок					= НоваяКИ.Вид.РеквизитДопУпорядочивания;
		НоваяКИ.CRM_ОсновнойДляСвязи	= ОбъектКИ.CRM_ОсновнойДляСвязи;
		
	КонецЦикла;	
	
	КонтактнаяИнформацияКлиенты.Сортировать("Порядок");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КлиентыПриАктивизацииСтроки()
	Если Элементы.Клиенты.ТекущаяСтрока = Неопределено Тогда
		КонтактнаяИнформацияКлиенты.Очистить();
		Возврат;
	КонецЕсли;
	
	ПоказатьКонтактнуюИнформациюКлиенты(Элементы.Клиенты.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Клиенты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("Ключ", ТекДанные.Клиент), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_КлиентыПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАдресКлиент()
	
	Если Элементы.Клиенты.ТекущаяСтрока = Неопределено Тогда Возврат; КонецЕсли;
	Если Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	Тип = Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные.Тип;
	Если НЕ (Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес")) Тогда Возврат; КонецЕсли;
	МассивАдресов = ПолучитьМассивАдресов(, Элементы.Клиенты.ТекущаяСтрока, Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные.Вид);
	Если МассивАдресов.Количество() = 0 Тогда Возврат; КонецЕсли;
	ВыбранныйАдрес		= МассивАдресов[0].ЗначенияПолей;
	ПредставлениеАдреса	= МассивАдресов[0].Представление;
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(ВыбранныйАдрес);
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;	
	СтруктураАдреса.Вставить("Представление", ПредставлениеАдреса);
	
	CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьEmailКлиент(Команда)
	
	ОтправитьEmailИзСписка(Элементы.Клиенты.ТекущаяСтрока, Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМСКлиент(Команда)
	Если Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ (Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) Тогда
		Возврат;
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Элементы.Клиенты.ТекущаяСтрока);
		Структура.Вставить("Телефон", ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные.Значение));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьКлиент(Команда)
	
	Если Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные = Неопределено Тогда
		Возврат;
	Иначе
		Тип = Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные.Тип;
		Если НЕ (Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// +СофтФон
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
	НомерТелефона = Элементы.КонтактнаяИнформацияКлиента.ТекущиеДанные.Значение;
	сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, Элементы.Клиенты.ТекущаяСтрока);
	// -СофтФон
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КлиентыПередНачаломДобавленияЗавершение", ЭтотОбъект);
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Перед выполнением данного действия необходимо записать данные.
								   |Записать данные?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентыПередНачаломДобавленияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда	
		Возврат;
	КонецЕсли;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("ЭтоКонтактныйКлиент", Истина);
	ПараметрыНового.Вставить("КонтактныйКлиент", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового", ПараметрыНового);
	
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКПП(Команда)
	// +CRM
	//ПартнерыИКонтрагентыКлиент.ЗаполнитьКППпоИНН(ИНН, КПП, Ложь);
	CRM_КлиентыКлиент.ЗаполнитьКППпоИНН(Объект.CRM_ИНН, Объект.CRM_КПП, Ложь, ЭтотОбъект.УникальныйИдентификатор);
	// -CRM
КонецПроцедуры

&НаСервере
Функция CRM_ПолучитьПотенциал()
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ТекПодразделение = ТекПользователь.Подразделение;
	Если ЗначениеЗаполнено(ТекПодразделение) Тогда
		Возврат CRM_РасчетПотенциалаСервер.ПолучитьПотенциалКлиента(Объект.Ссылка, ТекПодразделение);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Процедура  заполняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьВсеТипыОтношений()
	CRM_ВсеТипыОтношений.Очистить();
	CRM_ВсеТипыОтношений.Добавить("Поставщик",			"Поставщик",		Объект.Поставщик);
	CRM_ВсеТипыОтношений.Добавить("Клиент",				"Покупатель",		Объект.Клиент);
	CRM_ВсеТипыОтношений.Добавить("Конкурент",			"Конкурент",		Объект.Конкурент);
	CRM_ВсеТипыОтношений.Добавить("ПрочиеОтношения",	"Прочие отношения",	Объект.ПрочиеОтношения);
	CRM_ВсеТипыОтношений.Добавить("CRM_Госорганы",		"Госорганы",		Объект.CRM_Госорганы);
	CRM_ВсеТипыОтношений.Добавить("CRM_Учредитель",		"Учредитель",		Объект.CRM_Учредитель);
КонецПроцедуры // CRM_ЗаполнитьВсеТипыОтношений()

&НаКлиенте
// Процедура сохраняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаписатьВсеТипыОтношений()
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если НЕ (Объект[ТипОтношений.Значение] = ТипОтношений.Пометка) Тогда
			Объект[ТипОтношений.Значение] = ТипОтношений.Пометка;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ЗаписатьВсеТипыОтношений()

&НаКлиенте
// Процедура заполняет реквизит формы CRM_ТипыОтношений.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьТипыОтношений()
	CRM_ТипыОтношений = "";
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + ТипОтношений.Представление;
		КонецЕсли;	
	КонецЦикла;	
	Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
		CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
	КонецЕсли;	
	
КонецПроцедуры // CRM_ЗаполнитьТипыОтношений();

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "CRM_ТипыОтношений".
//
Процедура CRM_ТипыОтношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеВыбора		= Новый ОписаниеОповещения("CRM_ОбработкаВыбораТиповОтношений", ЭтотОбъект, ДополнительныеПараметры);
	CRM_ВсеТипыОтношений.ПоказатьОтметкуЭлементов(ОповещениеВыбора, НСтр("ru='Отметьте типы отношений с клиентом'"));
	
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
// Процедура - обработчик выбора типов отношений.
//
// Параметры:
//	СписокТипов				- СписокЗначений	- Список типов отношений.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура CRM_ОбработкаВыбораТиповОтношений(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	//+вог
	//CRM_ЗаполнитьТипыОтношений();
	Модифицированность = Истина;
	вогЗаполнитьТипыОтношений(ЭтаФорма);
	вогЗаписатьВсеТипыОтношенийКлиент();
	ОбновитьГиперссылкиИКарточку();
	
	//-вог
КонецПроцедуры // CRM_ОбработкаВыбораТиповОтношений()	

&НаКлиенте
// Процедура - обработчик события "Очистка" элемента формы "ОсновнойМенеджер".
//
Процедура ОсновнойМенеджерОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Удаление основного менеджера запрещено.'"));
КонецПроцедуры // ОсновнойМенеджерОчистка()

// область работы с тегами 
&НаКлиенте
Процедура ТегПриИзменении(Элемент)
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура Подключаемый_ОбновитьОблакоТегов()
	
	//CRM_Теги.ОбновитьОблакоТегов(ЭтаФорма);
	// отбор по подразделению текущего пользователя, остальные теги прячем в "Еще".
	ТекущееПодразделение = Пользователи.АвторизованныйПользователь().Подразделение;
	
	МассивУдаляемых = Новый Массив;
	Для Каждого ЭлементТег Из Элементы.ОблакоТегов.ПодчиненныеЭлементы Цикл
		Если Лев(ЭлементТег.Имя, 12) = "СтрокаТегов_" И НЕ ЭлементТег.Имя = "СтрокаТегов_1" Тогда
			МассивУдаляемых.Добавить(ЭлементТег);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементТег Из Элементы.СтрокаТегов_1.ПодчиненныеЭлементы Цикл
		Если Лев(ЭлементТег.Имя, 4) = "Тег_" Тогда
			МассивУдаляемых.Добавить(ЭлементТег);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементТег Из МассивУдаляемых Цикл
		Элементы.Удалить(ЭлементТег);
	КонецЦикла;
	
	МаксДлинаПервойСтроки = 61;
	МаксДлинаСтроки = МаксДлинаПервойСтроки + 24;
	НомерЭлемента = 0;
	НомерСтрокиЭлементов = 1;
	ТекущаяДлинаСтроки = 0;
	ГруппаТегов = Элементы.СтрокаТегов_1;
	
	СчСлужебный = 0;
	
	Для Каждого СтрокаТегов Из Объект.CRM_Теги Цикл
		
		Если ТекущееПодразделение = СтрокаТегов.Тег.Владелец Тогда
			
			СчСлужебный = СчСлужебный + 1;
			
			НомерЭлемента = НомерЭлемента + 1;
			ПредставлениеТега = Строка(СтрокаТегов.Тег);
			Если СтрДлина(ПредставлениеТега) > 15 Тогда
				ПредставлениеТега = Лев(ПредставлениеТега, 15) + "...";
				ДлинаТега = 15-1;
			Иначе
				ДлинаТега = СтрДлина(ПредставлениеТега)+1;
			КонецЕсли;
			
			ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + ДлинаТега;
			
			Если (НомерСтрокиЭлементов = 1 И ТекущаяДлинаСтроки > МаксДлинаПервойСтроки) Или (НомерСтрокиЭлементов > 1 И ТекущаяДлинаСтроки > МаксДлинаСтроки) Тогда
				
				ТекущаяДлинаСтроки = ДлинаТега;
				НомерСтрокиЭлементов = НомерСтрокиЭлементов + 1;
				
				ГруппаТегов = Элементы.Добавить("СтрокаТегов_" + НомерСтрокиЭлементов, Тип("ГруппаФормы"), ?(НомерСтрокиЭлементов = 1, Элементы.ПерваяСтрока, Элементы.ОблакоТегов));
				ГруппаТегов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаТегов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				ГруппаТегов.ОтображатьЗаголовок = Ложь;
				ГруппаТегов.Отображение = ОтображениеОбычнойГруппы.Нет;
				ГруппаТегов.РастягиватьПоВертикали = Ложь;
				ГруппаТегов.Высота = 1;
				
			КонецЕсли;
			
			КомпонентыТега = Новый Массив;
			КомпонентыТега.Добавить(Новый ФорматированнаяСтрока(ПредставлениеТега + " "));
			КомпонентыТега.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , "ТегИД_" + СтрокаТегов.НомерСтроки));
			
			ЭлементТег = Элементы.Добавить("Тег_" + НомерЭлемента, Тип("ДекорацияФормы"), ГруппаТегов);
			ЭлементТег.Вид = ВидДекорацииФормы.Надпись;
			ЭлементТег.Заголовок = Новый ФорматированнаяСтрока(КомпонентыТега);
			ЭлементТег.Подсказка = Строка(СтрокаТегов.Тег);
			ЭлементТег.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			ЭлементТег.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
			ЭлементТег.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
			ЭлементТег.Ширина = ДлинаТега;
			ЭлементТег.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ТегОбработкаНавигационнойСсылки");
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если СчСлужебный <> Объект.CRM_Теги.Количество() Тогда
		Элементы.ДекорацияТегиДругихПодразделений.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТегиДругихПодразделенийНажатие(Элемент)
	
	ОП = Новый ОписаниеОповещения("ОповещениеСписокТегов", ЭтотОбъект);
	СписокТеговДругихПодразделений = ПолучитьСписокТеговДругихПодразделений();
	ПоказатьВыборИзМеню(ОП, СписокТеговДругихПодразделений, Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокТеговДругихПодразделений()
	
	ТекущееПодразделение = Пользователи.АвторизованныйПользователь().Подразделение;
	СписокТегов = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПартнерыТеги.Тег КАК Тег,
	               |	ПартнерыТеги.Тег.Владелец КАК Подразделение
	               |ИЗ
	               |	Справочник.Партнеры.CRM_Теги КАК ПартнерыТеги
	               |ГДЕ
	               |	ПартнерыТеги.Тег.Владелец <> &Владелец
	               |ИТОГИ ПО
	               |	Подразделение";
	Запрос.УстановитьПараметр("Владелец", ТекущееПодразделение);
	ВыборкаПодразделений = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделений.Следующий() Цикл
		СписокТегов.Добавить(ВыборкаПодразделений.Подразделение, Строка(ВыборкаПодразделений.Подразделение));
		
		ВыборкаТег = ВыборкаПодразделений.Выбрать();
		Пока ВыборкаТег.Следующий() Цикл
			СписокТегов.Добавить(ВыборкаТег.Тег, "  - " + Строка(ВыборкаТег.Тег));
		КонецЦикла;
		
	КонецЦикла;
	
	//Для Каждого ТекТег Из Объект.Теги Цикл
	//	Если ТекТег.Тег.Владелец <> ТекущееПодразделение Тогда
	//		СписокТегов.Добавить(ТекТег.Тег, Строка(ТекТег.Тег) +" (" + Строка(ТекТег.Тег.Владелец) + ")");
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат СписокТегов;
КонецФункции

&НаКлиенте
Процедура ОповещениеСписокТегов(Параметры, Дополнительно) Экспорт
	// Заглушка для отображения тегов других подразделений.
КонецПроцедуры

// область работы с тегами

#КонецОбласти

#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
		
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)

	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры 

#КонецОбласти

#Область НавигацияФормы

&НаКлиенте
Процедура ВыполнитьПереходСтраницы(ИмяКоманды,ВыполнитьПереход = Истина)
	
	Попытка
		// Выделить кнопку перехода
		Для каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
			Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
				ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
				ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
			Иначе
				ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
				ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
			КонецЕсли;
		КонецЦикла;
		// Переход страницы
		Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы[ИмяКоманды];
		
		// ++ VOG Ульянов И.В. 28.11.2019 task 941
		Если ИмяКоманды = "СтраницаВзаимодействие" Тогда						
			ЗаполнитьВиджетыНаВкладке();			
		КонецЕсли;	
		// -- VOG Ульянов И.В. 28.11.2019 task 941
		
		Если Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя = "СтраницаСтруктураВзаимосвязи" Тогда
			ДанныеКлиента 	= Истина; КонтактнаяИнформация 	= Истина; КонтактныеЛицаОтч 		= Истина;
			ЮридическиеЛица = Истина; ТорговыеТочки 		= Истина; РаспределительныйЦентр 	= Истина;
			СформироватьОтчетСтурктураВзаимосвязиСервер();
		ИначеЕсли Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя = "СтраницаМенеджеры" Тогда 
			СформироватьОтчетМенеджерыОбъектов();
		КонецЕсли;
		
	Исключение
		ТекстСообщения 	= НСтр("ru = 'Не удалось перейти на страницу %1'")+ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ИмяКоманды));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента)
	
	Если ИмяЭлемента = "ГиперссылкаПерейтиФайлы"
	  ИЛИ ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
		Если вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка) Тогда
			ФормаИмя = "ОбщаяФорма.вогФормаУправленияПрисоединеннымиФайлами";
			ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Присоединенные файлы'"))
		Иначе	
			ФормаИмя = "ОбщаяФорма.ПрисоединенныеФайлы";
		КонецЕсли;
		
		ТипыФайлов = Новый Массив;
		Если ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда
			ТипыФайлов.Добавить(ПредопределенноеЗначение("Перечисление.вогТипыПрисоединенныхФайлов.Изображение"));
			ПараметрыФормы.Вставить("ТипыФайлов", ТипыФайлов);
			
		КонецЕсли;
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", ФормаИмя);
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиСегменты" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Партнер", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ПартнерыСегмента.Форма.СегментыПартнераПараметрическая");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиДоговорыКлиента" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.ДоговорыКонтрагентов.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиБанковскиеСчета" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.БанковскиеСчета.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиКонтакты" Тогда
		ПараметрыФормы = Новый Структура("ОбъектСвязи", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.КонтактныеЛицаПартнеров.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЮрЛица" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Партнер", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.вогЮридическиеЛица.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиТорговыеТочки" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Партнер", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.вогТорговыеТочки.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЗначенияКлассификаторов" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиИсторияРеквизитов" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Партнер", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.CRM_ИсторияРеквизитовПартнеров.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	КонецЕсли;
	
	Если Не ПараметрыПереходаПоГиперссылке.Свойство("РежимОткрытияОкнаФормы") Тогда
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	Возврат ПараметрыПереходаПоГиперссылке
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информции возможен только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	//Оповещение = Новый ОписаниеОповещения("ГиперссылкаПереходЗавершение",ЭтаФорма,Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя);
	
	ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы, , ЭтаФорма.УникальныйИдентификатор, , , ,
		ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьКомандуНавигацииПриОткрытииФормы()

	Для каждого ЭлементКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
		Если ЭлементКоманды.ИмяКоманды 	= Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя Тогда
			ЭлементКоманды.ЦветТекста 	= Новый Цвет(128,0,128);
			ЭлементКоманды.Шрифт 		= Новый Шрифт(,10,Ложь,,Истина);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

&НаСервере
Функция СписокВидовДляДобавленияКонтактнойИнформации()
	
	Если СвойстваВидовКонтактнойИнформацииИнициализирован <> Истина Тогда
		ПрочитатьСвойстваВидовКонтактнойИнформацииКлиенты();
	КонецЕсли; 
	
	СписокДоступныхВидов = Новый СписокЗначений;
	Отбор = Новый Структура("Вид");
	Для Каждого СтрокаТаблицы Из ЭтаФорма.СвойстваВидовКонтактнойИнформации Цикл
		Отбор.Вид = СтрокаТаблицы.Вид;
		Если СтрокаТаблицы.РазрешитьВводНесколькихЗначений Или Объект.КонтактнаяИнформация.НайтиСтроки(Отбор).Количество() = 0 И СтрокаТаблицы.Вид.CRM_Основной Тогда
			СписокДоступныхВидов.Добавить(СтрокаТаблицы.Вид, СтрокаТаблицы.ПредставлениеВида);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДоступныхВидов;
	
КонецФункции

&НаСервере
Процедура ПрочитатьСвойстваВидовКонтактнойИнформацииКлиенты()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПорядокТиповКИ.Тип,
	|	ПорядокТиповКИ.Порядок
	|ПОМЕСТИТЬ втПорядокТипов
	|ИЗ
	|	&ПорядокТиповКИ КАК ПорядокТиповКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ПРЕДСТАВЛЕНИЕ(ВидыКонтактнойИнформации.Ссылка) КАК ПредставлениеВида,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ЕСТЬNULL(НастройкиВидовКонтактнойИнформации.ВыводитьВФормеВсегда, ЛОЖЬ) КАК ВыводитьВФормеВсегда,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений КАК РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ПроверятьКорректность,
	|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|		ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВидовКонтактнойИнформации КАК НастройкиВидовКонтактнойИнформации
	|		ПО ВидыКонтактнойИнформации.Ссылка = НастройкиВидовКонтактнойИнформации.Вид
	|ГДЕ
	|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|
	|УПОРЯДОЧИТЬ ПО
	|	втПорядокТипов.Порядок,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания");
	
	Запрос.УстановитьПараметр("ПорядокТиповКИ", УправлениеКонтактнойИнформацией.ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ГруппаВидовКИ", Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
	
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
	СвойстваВидовКонтактнойИнформации.Загрузить(ТаблицаСвойств);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюВидВыбран(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Отбор = Новый Структура("Вид", ВыбранныйЭлемент.Значение);
	
	НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформации.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СвойстваВида = НайденныеСтроки[0];
	
	Если СвойстваВида.ВыводитьВФормеВсегда = Ложь Тогда
		
		ДополнительныеПараметры.Вставить("ДобавляемыйВид", ВыбранныйЭлемент.Значение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюВопросЗадан", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = СтрШаблон(НСтр("ru='Добавить возможность ввода вида контактной информации ""%1""?'"), ВыбранныйЭлемент.Значение);
		ЗаголовокВопроса = НСтр("ru='Подтверждение добавления'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ЗаголовокВопроса);
		
	Иначе
		
		Форма.ДобавитьКонтактнуюИнформациюСервер(ВыбранныйЭлемент.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь)
	
	КоличествоЭлементовКоллекции = Объект.КонтактнаяИнформация.Количество();
	ИндексВставки = КоличествоЭлементовКоллекции;
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если Объект.КонтактнаяИнформация[ТекущийИндекс].Вид = ДобавляемыйВид Тогда
			ИндексВставки = ТекущийИндекс+1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКИ = Объект.КонтактнаяИнформация.Вставить(ИндексВставки);
	ДанныеКИ.Вид = ДобавляемыйВид;
	ДанныеКИ.Тип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемыйВид, "Тип");
	
	Результат = Новый Структура("ДобавляемыйВид", ДобавляемыйВид);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюВопросЗадан(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКонтактнуюИнформациюСервер(ДополнительныеПараметры.ДобавляемыйВид, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОбновитьГиперссылкиИКарточку()
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) = Неопределено
			Или СтрНайти(ЭлементВидимость.Ключ,"Гиперссылка") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		Если Элементы.Найти(ЭлементЗаголовок.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		Элементы[ЭлементЗаголовок.Ключ].Заголовок = ЭлементЗаголовок.Значение;
	КонецЦикла;
	
//	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКарточку()
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПереходЗавершение(РезультатЗакрытия,ДополнительныеПараметры) Экспорт

	//Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
	//	ВыполнитьПереходСтраницы(ДополнительныеПараметры,Ложь);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияКлассификатора(КлассификаторСсылка)
	
	МассивЗначений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ЗначенияКлассификаторов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|ГДЕ
		|	CRM_ЗначенияКлассификаторов.Владелец = &Владелец
		|	И CRM_ЗначенияКлассификаторов.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Владелец", КлассификаторСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДанных = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДанных.Следующий() Цикл
		МассивЗначений.Добавить(ВыборкаДанных.Ссылка);
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура СписокМенеджерыИзменитьНаСервере(Вид)
	
	СтруктураСвойств = РегистрыСведений.вогИсторияМенеджеровОбъектов.ПолучитьПараметрыСпискаМенеджерыОбъектов(Вид);
	
	ЭтотОбъект.Менеджеры.ТекстЗапроса 		= СтруктураСвойств.ТекстЗапроса;
	ЭтотОбъект.Менеджеры.ОсновнаяТаблица 	= СтруктураСвойств.ОсновнаяТаблица;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"МенеджерыВидВсе", 
		"Пометка", 
		Вид = "МенеджерыВидВсе");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"МенеджерыВидДействующие", 
		"Пометка", 
		Вид <> "МенеджерыВидВсе");
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Менеджеры, 
		"ТекущаяДата", 
		CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	
	Элементы.Менеджеры.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	//rarus Диденко
	//ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
	//rarus Диденко
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	//ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключитьЗаполнениеПоИНН()

	ОтключитьЗаполнениеПоИНН = Неопределено;	

КонецПроцедуры 

#Область КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи(Элемент)
	CRM_УправлениеКонтактнойИнформациейКлиент.ОсновнойДляСвязиНажатие(ЭтотОбъект, Элемент);
КонецПроцедуры // Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи()

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
		// Если это адрес электронной почты, то надо проверить на коррректность заполнения.
		РезультатПроверки = CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПолучитьТипПроверитьЗаполнение(ЭтотОбъект, Элемент);
		Если НЕ РезультатПроверки = Неопределено И РезультатПроверки.КодОшибки<>0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	CRM_УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзмененииАдресаЭлектроннойПочты(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомер(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьСМСНаНомер","");
		Телефон = ЭтотОбъект[ИмяРеквизита];
		Если ПустаяСтрока(Телефон) Тогда Возврат; КонецЕсли;
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Объект.Ссылка);
		Структура.Вставить("Телефон", ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Телефон));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьEmail(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьEmail","");
	
	АдресЭлектроннойПочты = ЭтотОбъект[ИмяРеквизита];

	Если НЕ ЗначениеЗаполнено(СокрЛП(АдресЭлектроннойПочты)) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	СтрРезультат = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(АдресЭлектроннойПочты);
	Если СтрРезультат.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрРезультат.Сообщение,,ИмяРеквизита);
		Возврат;
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.Добавить(Объект.Ссылка, СтрРезультат.АдресЭП);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
			
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПозвонитьНаНомер(Элемент)
	
	// +СофтФон
	сфпСофтФонПроКлиентПереопределяемый.сфпПодключаемый_ПозвонитьНаНомер(ЭтотОбъект, Объект);	
	// -СофтФон
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		Подключаемый_РедактироватьАдресСайтаКомпании(Элемент);
	Иначе
		Если Найти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", ЭтотОбъект), АдресСайтаКомпании);	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		АдресСайтаКомпании = "";
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводАдресаСайтаКомпанииЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, АдресСайтаКомпании, "Введите адрес сайта");
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресКомпании","");
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элементы[ИмяРеквизита], Неопределено, Ложь);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКарте(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОткрытьАдресНаИнтернетКарте","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(НайденныеСтроки[0].ЗначенияПолей);
	
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	СтруктураАдреса.Вставить("Представление", ЭтотОбъект[ИмяРеквизита]);
	
	СписокКарт = Новый СписокЗначений;
	// ++ Харченко Д.И. №  - 26.09.2018 / 
	//СписокКарт.Добавить("GIS","Карта GIS",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	//СписокКарт.Добавить("Google","Карта Google",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	//СписокКарт.Добавить("Yandex","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	СписокКарт.Добавить("вогГеокодирование","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
	//ПоказатьВыборИзСписка(ОписаниеОповещения, СписокКарт, ТекущийЭлемент,);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокКарт.Получить(0)); 
	// -- Харченко Д.И. №  - 26.09.2018
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение(Результат, СтруктураАдреса) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		СайтИнтернетКарты = Результат.Значение;
		CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочее(Элемент)
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьПрочее","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СтрокаПрочее = ЭтотОбъект[ИмяРеквизита];
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьПрочееЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, СтрокаПрочее, Строка(НайденныеСтроки[0].Вид),, Истина);
КонецПроцедуры // Подключаемый_РедактироватьПрочее

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочееЗавершение(СтрокаПрочее, ИмяРеквизита) Экспорт
	Если СтрокаПрочее <> Неопределено Тогда
		ЭтотОбъект[ИмяРеквизита] = СтрокаПрочее;
		
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = СтрокаПрочее;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM	
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьПрочее

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаПриАктивизацииСтроки()
	//Если Элементы.КонтактныеЛица.ТекущаяСтрока = Неопределено Тогда
	//	Элементы.КонтактныеЛицаОсновноеКЛ.Пометка = Ложь;
	//	КонтактнаяИнформацияКЛ.Очистить();
	//	Возврат;
	//КонецЕсли;
	//
	//// +CRM
	//Если Элементы.КонтактнаяИнформацияКЛ.Видимость Тогда
	//	ПоказатьКонтактнуюИнформациюКЛ(Элементы.КонтактныеЛица.ТекущаяСтрока);
	//Иначе
	//	КонтактнаяИнформацияКЛ.Очистить();
	//КонецЕсли;	
	//// -CRM
	//
	//КонтактныеЛицаОсновноеКЛПометка = (Элементы.КонтактныеЛица.ТекущаяСтрока = Объект.CRM_ОсновноеКонтактноеЛицо);
	//Если Элементы.КонтактныеЛицаОсновноеКЛ.Пометка <> КонтактныеЛицаОсновноеКЛПометка Тогда
	//	Элементы.КонтактныеЛицаОсновноеКЛ.Пометка = КонтактныеЛицаОсновноеКЛПометка;
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// ++ Тищенко В.В. 14.01.2019

#Область ПодключемыеДополнительныеКоманды

//++ Подключаемые дополнительные команды
&НаКлиенте
Процедура Подключаемый_ОбработчикДополнительнойКоманды(Команда) Экспорт 
	
	// ++ VOG Солодов В.В. 29.03.2019
	//вогУправлениеИнтерфейсомКлиент.ОбработчикКомандыФормы(Команда, ЭтаФорма);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "скДанныеЗапуска")
		И ЭтаФорма.скДанныеЗапуска.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя)).Количество() > 0 Тогда
	
		скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);	
	Иначе
		вогУправлениеИнтерфейсомКлиент.ОбработчикКомандыФормы(Команда, ЭтаФорма);
	КонецЕсли;
	// -- VOG Солодов В.В. 29.03.2019
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКоманды(Значение, ДополнительноеЗначение) Экспорт 
	
	вогУправлениеИнтерфейсомКлиент.ВыполнитьКодКомандыНаКлиенте(Значение, ДополнительноеЗначение, ЭтаФорма, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКомандыСервер(Значение, ДополнительноеЗначение) Экспорт 
	вогУправлениеИнтерфейсомСервер.ВыполнитьКодКомандыНаСервере(Значение, ДополнительноеЗначение, ЭтотОбъект, ЭтаФорма, Объект);
КонецПроцедуры
//-- Подключаемые дополнительные команды

#КонецОбласти

// -- Тищенко В.В. 

#КонецОбласти

#Область ОтчетСтруктураВзаимосвязи

&НаСервере
Процедура СформироватьОтчетСтурктураВзаимосвязиСервер()

	
	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("ДанныеКлиента"			,ДанныеКлиента);
	ПараметрыФормированияОтчета.Вставить("КонтактнаяИнформация"		,КонтактнаяИнформация);
	ПараметрыФормированияОтчета.Вставить("КонтактныеЛица"			,КонтактныеЛицаОтч);
	ПараметрыФормированияОтчета.Вставить("ЮридическиеЛица"			,ЮридическиеЛица);
	ПараметрыФормированияОтчета.Вставить("ТорговыеТочки"			,ТорговыеТочки);
	ПараметрыФормированияОтчета.Вставить("РаспределительныйЦентр"	,РаспределительныйЦентр);
	Отчеты.вогСтруктураВзаимосвязи.СформироватьОтчет(СтруктураВзаимосвязиОтчет,Объект.Ссылка,ПараметрыФормированияОтчета);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетМенеджерыОбъектов()
	
	//Перем ДанныеРасшифровки;
	
	Отбор = Новый Структура("Клиент",Объект.Ссылка);
	
	КомпоновкаДанныхСервер.СформироватьОтчетНаФорму(ЭтаФорма,"КлиентОтветственныеОтчет","вогМенеджерыОбъектов","КлиентОтветственные",Отбор);
	
	//ОтчетОбъект = ОтчетыСервер.ОтчетОбъект("Отчет.вогМенеджерыОбъектов");
	//Отбор = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор;
	//
	//ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	//ЭлементОтбора.Использование		= Истина;
	//ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Клиент");
	//ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.ПравоеЗначение	= Объект.Ссылка;
	//ОтчетОбъект.СкомпоноватьРезультат(КлиентОтветственныеОтчет,ДанныеРасшифровки);
	//
	//АдресДанныхРасшифровкиМенеджерыОбъектов	= ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
	
КонецПроцедуры


&НаКлиенте
Процедура СтруктураВзаимосвязиОтчетОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка 	= Ложь;
		
		ДанныеРасшифровки		= ИнициализироватьРасшифровку(Расшифровка);
		ИсточникНастроек		= Новый ИсточникДоступныхНастроекКомпоновкиДанных(СформироватьПодменюРасшифровки());
		
		ОбработкаРасшифровки 	= Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки,ИсточникНастроек);
		ДоступныеДействия 		= Новый СписокЗначений;
		ИмяТаблицы 				= ?(Расшифровка.ИмяТаблицы = "ЮридическоеЛицо", "данного юр-лица","РЦ");
		ДоступныеДействия.Добавить("ОткрытьСписокТТ",НСтр("ru = 'Показать ТТ "+ИмяТаблицы+"'"),,БиблиотекаКартинок.CRM_Задача);
		ДоступныеДействия.Добавить("ВыборТТ",НСтр("ru = 'Выбор ТТ из списка'"),,БиблиотекаКартинок.Подменю);
		
		ОсновныеДействия 		= Новый Массив;
		ОсновныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет);
		
		ОписаниеОповещения 		= Новый ОписаниеОповещения("РасшифровкаОтчетаМеню",ЭтотОбъект,Расшифровка);
		ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения,Новый ИдентификаторРасшифровкиКомпоновкиДанных(0),ОсновныеДействия,ДоступныеДействия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьРасшифровку(Расшифровка)
	
	СписокПолейРасшифровки = Новый ЗначенияПолейРасшифровкиКомпоновкиДанных;
	СтрокаРасшифровки			= СписокПолейРасшифровки.Добавить();
	СтрокаРасшифровки.Значение 	= Расшифровка;
	СтрокаРасшифровки.Поле 		= "";
	
	ТекущаяРасшифровка = Новый ДанныеРасшифровкиКомпоновкиДанных;
	ТекущаяРасшифровка.Элементы.Добавить(Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля"), ,СписокПолейРасшифровки);
	
	Возврат	 ПоместитьВоВременноеХранилище(ТекущаяРасшифровка,УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция СформироватьПодменюРасшифровки()
	Возврат ПоместитьВоВременноеХранилище(Новый СхемаКомпоновкиДанных);
КонецФункции

&НаКлиенте
Процедура РасшифровкаОтчетаМеню(ВыбранноеДействие,ВыбранноеЗначение,ДополнительныйПараметры) Экспорт
	
	Если ВыбранноеДействие = "ВыборТТ" Тогда
		СписокТТ = РасшифровкаСервер(ДополнительныйПараметры.ИмяТаблицы,ДополнительныйПараметры.Значение);
		Если СписокТТ.Количество() <> 0 Тогда
			ОП = Новый ОписаниеОповещения("ЗавершениеОбработкаВыбораОтчет",ЭтотОбъект);
			СписокТТ.ПоказатьВыборЭлемента(ОП,"Выберите ТТ");
		КонецЕсли;
	ИначеЕсли ВыбранноеДействие = "ОткрытьСписокТТ" Тогда
		ЗавершениеОтборПоСписку(ДополнительныйПараметры);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция РасшифровкаСервер(ИмяТаблицы, ЗначениеРасшифровки)
	
	Если ИмяТаблицы = "ЮридическоеЛицо" Тогда
		Возврат Отчеты.вогСтруктураВзаимосвязи.ПолучитьТорговыеТочкиПоЮрЛицу(ЗначениеРасшифровки);
	ИначеЕсли ИмяТаблицы = "РЦ" Тогда
		Возврат Отчеты.вогСтруктураВзаимосвязи.ПолучитьТорговыеТочкиПоРЦ(ЗначениеРасшифровки);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеОтборПоСписку(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		ПараметрыФормированияОтчета = Новый Структура;
		ПараметрыФормированияОтчета = Новый Структура;
		ПараметрыФормированияОтчета.Вставить("ДанныеКлиента"			,ДанныеКлиента);
		ПараметрыФормированияОтчета.Вставить("КонтактнаяИнформация"		,КонтактнаяИнформация);
		ПараметрыФормированияОтчета.Вставить("КонтактныеЛица"			,КонтактныеЛицаОтч);
		ПараметрыФормированияОтчета.Вставить("ЮридическиеЛица"			,ЮридическиеЛица);
		ПараметрыФормированияОтчета.Вставить("ТорговыеТочки"			,ТорговыеТочки);
		ПараметрыФормированияОтчета.Вставить("РаспределительныйЦентр"	,РаспределительныйЦентр);
		
		ЗавершениеОбработкаВыбораОтчетСервер(ПараметрыФормированияОтчета,ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбработкаВыбораОтчет(ВыбранноеЗначение,ДополнительныеПараметры) Экспорт

	Если ВыбранноеЗначение <> Неопределено Тогда
		ПараметрыФормированияОтчета = Новый Структура;
		ПараметрыФормированияОтчета.Вставить("ДанныеКлиента"			,ДанныеКлиента);
		ПараметрыФормированияОтчета.Вставить("КонтактнаяИнформация"		,КонтактнаяИнформация);
		ПараметрыФормированияОтчета.Вставить("КонтактныеЛица"			,КонтактныеЛицаОтч);
		ПараметрыФормированияОтчета.Вставить("ЮридическиеЛица"			,ЮридическиеЛица);
		ПараметрыФормированияОтчета.Вставить("ТорговыеТочки"			,ТорговыеТочки);
		ПараметрыФормированияОтчета.Вставить("РаспределительныйЦентр"	,РаспределительныйЦентр);
		
		НоваяОбласть = Неопределено;
		ЗавершениеОбработкаВыбораОтчетСервер(ПараметрыФормированияОтчета,ВыбранноеЗначение.Значение);
		
		НоваяОбласть = СтруктураВзаимосвязиОтчет.НайтиЗначение(ВыбранноеЗначение.Значение);
		
		Если НоваяОбласть <> Неопределено Тогда
			Элементы.СтруктураВзаимосвязиОтчет.ТекущаяОбласть = НоваяОбласть;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеОбработкаВыбораОтчетСервер(ПараметрыФормированияОтчета,ВыбранноеЗначение)	
	Отчеты.вогСтруктураВзаимосвязи.СформироватьОтчетСОтбором(СтруктураВзаимосвязиОтчет,Объект.Ссылка,ПараметрыФормированияОтчета,ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура КлиентОтветственныеОтчетОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	СтандартнаяОбработка = Ложь;
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьЗначениеРасшифровки", ЭтотОбъект);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровкиКлиентОтветственныеОтчет, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКлиентОтветственныеОтчет));
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗначениеРасшифровки(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	
	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		
		Если ЗначениеЗаполнено(ПараметрВыполненногоДействия) Тогда
			
			ПоказатьЗначение(, ПараметрВыполненногоДействия);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентЗаполненостиНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	структураОтбора = Новый Структура("Аналитика,Объект",Неопределено,Объект.Ссылка);
	ПарамФормы = Новый Структура("Отбор,СформироватьПриОткрытии",структураОтбора,Истина);
	ПарамФормы.Вставить("КлючВарианта","РасшифровкаПоказателей");
	ОткрытьФорму("Отчет.вогПоказателиЗаполненностиДанных.ФормаОбъекта",ПарамФормы);
	
КонецПроцедуры

#КонецОбласти

// ++ VOG Ульянов И.В. 28.11.2019 task 941
#Область Виджеты

&НаКлиенте
Процедура HTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОтобразитьИконкуНастройкиHTML();
	СкрытьИконкуНастройкиHTML();

	АдресХранилищаТаблицаПросмотра = Неопределено;
	
	ТекущиеДелаДокументооборотКлиент.HTMLПриНажатии(
		Этаформа, Элемент, ДанныеСобытия, СтандартнаяОбработка, АдресХранилищаТаблицаПросмотра);
		
	// доработано VOG Ульянов И.В. 12.02.2020 CRM-311
	Если АдресХранилищаТаблицаПросмотра <> Неопределено тогда		
		Если АдресХранилищаТаблицаПросмотра.ТипРезультата = "ТаблицаЗначений" тогда
			ЭтаФорма.Элементы.ГруппаТаблицаЗначений.Видимость = Истина;
			ЭтаФорма.Элементы.ГруппаТабличныйДокумент.Видимость = Ложь;
			ЗагрузитьТаблицуПросмотра(АдресХранилищаТаблицаПросмотра);
		ИначеЕсли АдресХранилищаТаблицаПросмотра.ТипРезультата = "Макет" тогда
			ЭтаФорма.Элементы.ГруппаТаблицаЗначений.Видимость = Ложь;
			ЭтаФорма.Элементы.ГруппаТабличныйДокумент.Видимость = Истина;
			ВывестиДанныеВТаблицу(АдресХранилищаТаблицаПросмотра);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Отображать иконку настройки в полях html виджетов.
//
&НаКлиенте
Процедура ОтобразитьИконкуНастройкиHTML()
	
	НовыйТекущийВиджет = ИндексТекущегоВиджета();
	
	Если ЗначениеЗаполнено(НовыйТекущийВиджет) Тогда
		ИмяРеквизитаHTML = "HTML" + НовыйТекущийВиджет;
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаHTML])
			И СтрНайти(ЭтаФорма[ИмяРеквизитаHTML], ".visibility_img{visibility:hidden;}") Тогда
			
			ЭтаФорма[ИмяРеквизитаHTML] = СтрЗаменить(ЭтаФорма[ИмяРеквизитаHTML],
				".visibility_img{visibility:hidden;}",
				".visibility_img{visibility:visible;}");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Скрывает иконку настройки в полях html виджетов.
//
&НаКлиенте
Процедура СкрытьИконкуНастройкиHTML()
	
	ПодключитьОбработчикОжидания("СкрытьИконкуНастройкиHTML", 0.1, Истина);
	
	НовыйТекущийВиджет = ИндексТекущегоВиджета();
	
	Если ТекущийВиджетHTML = НовыйТекущийВиджет Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийВиджетHTML) Тогда
		ИмяРеквизитаHTML = "HTML" + ТекущийВиджетHTML;
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаHTML])
			И СтрНайти(ЭтаФорма[ИмяРеквизитаHTML], ".visibility_img{visibility:visible;}") Тогда
			
			ЭтаФорма[ИмяРеквизитаHTML] = СтрЗаменить(ЭтаФорма[ИмяРеквизитаHTML],
				".visibility_img{visibility:visible;}",
				".visibility_img{visibility:hidden;}");
		КонецЕсли;
	КонецЕсли;
	
	ТекущийВиджетHTML = НовыйТекущийВиджет;
	
КонецПроцедуры

// Возвращает индекс текущего виджета по выделенному элементу форму.
// Если по выделенному элементу невозможно определить индекс виджета, то
// возвращается пустая строка.
//
&НаКлиенте
Функция ИндексТекущегоВиджета() Экспорт
	
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ПолеФормы")
		И ТипЗнч(ТекущийЭлемент) <> Тип("ДекорацияФормы") Тогда
		
		Возврат "";
	КонецЕсли;
	
	ИндексТекущегоВиджета = Прав(ТекущийЭлемент.Имя,3);
	
	Если Сред(ИндексТекущегоВиджета, 2, 1) <> "_" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ИндексТекущегоВиджета;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВиджетыНаВкладке()
	
	ЗаполнитьВиджетыНаВкладкеНаСервере();
	
КонецПроцедуры	
	
&НаСервере
Процедура ЗаполнитьВиджетыНаВкладкеНаСервере()
	
	ОбъектСвязи = Объект.Ссылка;
	
	ПрочитатьНастройкиВиджетов = Истина;
	ЗаполнитьВиджеты(ПрочитатьНастройкиВиджетов);
			
	ЦветНепринятаяВерсия = ЦветаСтиля.НепринятаяВерсия;
			
	ТекущиеДелаДокументооборотСервер.ЗаполнитьКэшКартинокФормыТекущиеДела(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВиджеты(ПрочитатьНастройкиВиджетов = Ложь, Виджеты = Неопределено) Экспорт
	
	Если ПрочитатьНастройкиВиджетов = Истина Тогда
		// Загрузка настроек формы Текущие дела.
		Настройки = РегистрыСведений.НастройкиТекущихДел.ПолучитьНастройки();
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Настройки);
	КонецЕсли;
	
	// ++ VOG Ульянов И.В. 06.02.2020 CRM-239
	//ТекущиеДелаДокументооборотСервер.ЗаполнитьВиджетыТекущихДел(ЭтаФорма, Виджеты,1,4);
	//ТекущиеДелаДокументооборотСервер.ЗаполнитьВиджетыТекущихДел(ЭтаФорма, Виджеты,1,6); 
	ТекущиеДелаДокументооборотСервер.ЗаполнитьВиджетыТекущихДел(ЭтаФорма, Виджеты,1,5); // VOG Ульянов И.В. 12.02.2020 CRM-491
	// -- VOG Ульянов И.В. 06.02.2020 CRM-239
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаНажатие(Элемент)
	
	ИндексТекущегоВиджета = ИндексТекущегоВиджета();
	
	Если Не ЗначениеЗаполнено(ИндексТекущегоВиджета) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВиджет = ЭтаФорма["Виджет" + ИндексТекущегоВиджета];
	
	ТекущиеДелаДокументооборотКлиент.ОбработатьНажатиеНаОбластьМеню(
		ТекущийВиджет, ЭтаФорма, Элемент, ИндексТекущегоВиджета);
	
КонецПроцедуры
	
&НаСервере
Процедура ЗагрузитьТаблицуПросмотра(АдресВХранилище)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПросмотра = ПолучитьИзВременногоХранилища(АдресВХранилище.СтрокаРезультата);		
	
	МассивТекущихКолонок = ЭтаФорма.ПолучитьРеквизиты("ВзаимодействиеРасшифровка");
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	УдаляемыеЭлементыФормы = Новый Массив;
	
	Для каждого ЭлементМассива Из МассивТекущихКолонок Цикл
		МассивУдаляемыхРеквизитов.Добавить(ЭлементМассива.Путь + "." + ЭлементМассива.Имя);
		УдаляемыеЭлементыФормы.Добавить(ЭлементМассива.Имя);
	КонецЦикла;
	
	Для каждого ЭлементМассива Из УдаляемыеЭлементыФормы Цикл
		НайденныйЭлементФормы = Элементы.Найти(ЭлементМассива);
		Если НайденныйЭлементФормы <> Неопределено  Тогда
			Элементы.Удалить(НайденныйЭлементФормы);
		КонецЕсли;
	КонецЦикла;	
	
		МассивРеквизитов = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаПросмотра.Колонки Цикл
			
   		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,"ВзаимодействиеРасшифровка"));
    
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов, МассивУдаляемыхРеквизитов);
	
	Для Каждого Колонка Из ТаблицаПросмотра.Колонки Цикл
		НовыйЭлемент = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Элементы.ВзаимодействиеРасшифровка);       
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ВзаимодействиеРасшифровка." + Колонка.Имя;		
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
	КонецЦикла;	
	
	Элементы.ВзаимодействиеРасшифровка.ПодчиненныеЭлементы.Документ.Видимость = Ложь;
	
	Элементы.ВзаимодействиеРасшифровка.Доступность = Истина;
	Элементы.ВзаимодействиеРасшифровка.ТолькоПросмотр = Ложь;	
	
	ЗначениеВРеквизитФормы(ТаблицаПросмотра,"ВзаимодействиеРасшифровка");
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеРасшифровкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВиджеты(Команда)
	ЗаполнитьВиджетыНаВкладке();
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеРасшифровкаСортировать(Команда)
	
	Если ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя <> "" тогда
		ВзаимодействиеРасшифровка.Сортировать(ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеРасшифровкаСортироватьПоУбыванию(Команда)
	
	Если ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя <> "" тогда
		ВзаимодействиеРасшифровка.Сортировать(ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя+" Убыв");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТаблицу(СтруктураМакета)
	
	
	ВиджетМакетПросмотра = СтруктураМакета.СтрокаРезультата;
	
	ТаблицаВиджета.Очистить();
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;	
	
	СхемаКомпоновкиДанных = Справочники.Виджеты.ПолучитьМакет(СтруктураМакета.СтрокаРезультата); // изменено VOG Ульянов И.В. 12.02.2020 CRM-311
	
	АдресСхемыВиджеты = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ЭтаФорма.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыВиджеты));
    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	СохраненныеНастройкиХранилище = ПолучитьНастройкиИзХранилища(Пользователи.ТекущийПользователь(),Строка(ТипЗнч(Объект.Ссылка)),СтруктураМакета.СтрокаРезультата);
	Если СохраненныеНастройкиХранилище <> Неопределено тогда
		СохраненныеНастройки = СохраненныеНастройкиХранилище.Получить();
		КомпоновщикНастроек.ЗагрузитьНастройки(СохраненныеНастройки);
	КонецЕсли;	
	
	//Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОбъектСвязи", Объект.Ссылка);
	Если СтруктураМакета.ПараметрыОтбора <> Неопределено тогда
		Для каждого ЭлементСтруктуры из СтруктураМакета.ПараметрыОтбора цикл			
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;	
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	АдресДанныхРасшифровкиВиджеты = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ТаблицаВиджета);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
    
КонецПроцедуры	

&НаСервере
Функция ПолучитьНастройкиИзХранилища(Пользователь, ТипОбъекта, НазваниеМакета) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогНастройкиПросмотраВиджетов.Настройка КАК Настройка
		|ИЗ
		|	РегистрСведений.вогНастройкиПросмотраВиджетов КАК вогНастройкиПросмотраВиджетов
		|ГДЕ
		|	вогНастройкиПросмотраВиджетов.ТипОбъекта = &ТипОбъекта
		|	И вогНастройкиПросмотраВиджетов.НазваниеМакета = &НазваниеМакета
		|	И вогНастройкиПросмотраВиджетов.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("НазваниеМакета", НазваниеМакета);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.Настройка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаписатьНастройкиВХранилище() // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	НаборЗаписей = РегистрыСведений.вогНастройкиПросмотраВиджетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	НаборЗаписей.Отбор.ТипОбъекта.Установить(Строка(ТипЗнч(Объект.Ссылка)));
	НаборЗаписей.Отбор.НазваниеМакета.Установить(ВиджетМакетПросмотра);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();
	НоваяЗапись.ТипОбъекта = Строка(ТипЗнч(Объект.Ссылка));
	НоваяЗапись.НазваниеМакета = ВиджетМакетПросмотра;
	НоваяЗапись.Настройка = Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки);
	
	НаборЗаписей.Записать();	
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьОтборыТабличногоДокумента(Команда) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	Если ЭтаФорма.Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Ложь тогда
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Истина;
		//ЭтаФорма.Элементы.ОтобразитьОтборыТабличногоДокумента.Заголовок = "Скрыть отбор";
	Иначе	
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Ложь;
		//ЭтаФорма.Элементы.ОтобразитьОтборыТабличногоДокумента.Заголовок = "Отбор...";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьНастройкиТабличногоДокумента(Команда) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	Если ЭтаФорма.Элементы.КомпоновщикНастроекНастройки.Видимость = Ложь тогда
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройки.Видимость = Истина;
		//ЭтаФорма.Элементы.ОтобразитьНастройкиТабличногоДокумента.Заголовок = "Скрыть настройки";
	Иначе	
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройки.Видимость = Ложь;
		//ЭтаФорма.Элементы.ОтобразитьНастройкиТабличногоДокумента.Заголовок = "Настройки...";
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТабличныйДокумент(Команда) // VOG Ульянов И.В. 12.02.2020 CRM-311
	ОбновитьТабличныйДокументНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьТабличныйДокументНаСервере() // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	//ЗаписатьНастройкиВХранилище(Пользователи.ТекущийПользователь(),Строка(ТипЗнч(Объект.Ссылка)),ВиджетМакетПросмотра,КомпоновщикНастроек.Настройки);	
	
	ТаблицаВиджета.Очистить();
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;	
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыВиджеты);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	АдресДанныхРасшифровкиВиджеты = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ТаблицаВиджета);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
    
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВиджетаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	СтандартнаяОбработка = Ложь;
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьЗначениеРасшифровки", ЭтотОбъект);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровкиВиджеты, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыВиджеты));
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиТабличногоДокумента(Команда)
	
	ЗаписатьНастройкиВХранилище();
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 03.03.2020 CRM-412
&НаСервереБезКонтекста
Процедура КонтактныеЛицаПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ОбъектСвязи = Неопределено;
	Настройки.ДополнительныеСвойства.Свойство("ОбъектСвязи",ОбъектСвязи);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогРолиКонтактныхЛиц.КонтактноеЛицо КАК КонтактноеЛицо,
		|	вогРолиКонтактныхЛиц.CRM_РольКонтактногоЛица КАК РольКонтактногоЛица
		|ИЗ
		|	РегистрСведений.вогРолиКонтактныхЛиц КАК вогРолиКонтактныхЛиц
		|ГДЕ
		|	вогРолиКонтактныхЛиц.КонтактноеЛицо В(&КонтактныеЛица)
		|	И вогРолиКонтактныхЛиц.ОбъектСвязи = &ОбъектСвязи
		|ИТОГИ ПО
		|	КонтактноеЛицо";
	
	Запрос.УстановитьПараметр("КонтактныеЛица", Строки.ПолучитьКлючи());
	Запрос.УстановитьПараметр("ОбъектСвязи", ОбъектСвязи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКонтактноеЛицо = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКонтактноеЛицо.Следующий() Цикл
		
		Роли = "";
		
		ВыборкаДетальныеЗаписи = ВыборкаКонтактноеЛицо.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Роли = Роли + ?(Роли = "","","; ") + ВыборкаДетальныеЗаписи.РольКонтактногоЛица;
		КонецЦикла;
		
		СтрокаСписка = Строки[ВыборкаКонтактноеЛицо.КонтактноеЛицо];
		СтрокаСписка.Данные.CRM_РольКонтактногоЛица = Роли;
		
	КонецЦикла;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не Отказ И Не ЗначениеЗаполнено(Объект.вогНаселенныйПункт) и Модифицированность Тогда
		Попытка
			Справочники.вогНаселенныеПункты.ЗаполнитьНаселенныйПунктВОбъектеПоВидуКонтактнойИнформации(ТекущийОбъект,
				Справочники.ВидыКонтактнойИнформации.МесторасположениеОфисаКлиента,"вогНаселенныйПункт");
		Исключение
			
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

// -- VOG Ульянов И.В. 28.11.2019 task 941
