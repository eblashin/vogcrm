
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// +Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	Если НЕ CRM_РежимФормЗакладкиСервер.ВосстановлениеФормыПриЗапускеСеанса(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// -Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	
	КонтактыОтборПоКлиенту					= Контакты.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонтактыОтборПоКлиенту.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Владелец");
	КонтактыОтборПоКлиенту.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	КонтактыОтборПоКлиенту.Использование	= Истина;
	КонтактыОтборПоКлиенту.ПравоеЗначение	= Справочники.Партнеры.ПустаяСсылка();
	
	ИнтересыОтборПоКлиенту					= Интересы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ИнтересыОтборПоКлиенту.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Партнер");
	ИнтересыОтборПоКлиенту.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ИнтересыОтборПоКлиенту.Использование	= Истина;
	ИнтересыОтборПоКлиенту.ПравоеЗначение	= Неопределено;
	
	ИнтересыОтборПоСостоянию				= Интересы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ИнтересыОтборПоСостоянию.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Завершен");
	ИнтересыОтборПоСостоянию.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
	ИнтересыОтборПоСостоянию.Использование	= Истина;
	ИнтересыОтборПоСостоянию.ПравоеЗначение	= Ложь;
	
	ИнтересыОтборПоПометке					= Интересы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ИнтересыОтборПоПометке.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ИнтересыОтборПоПометке.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ИнтересыОтборПоПометке.Использование	= Истина;
	ИнтересыОтборПоПометке.ПравоеЗначение	= Ложь;
	
	СуществующиеНастройки = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьНастройки();
	Если СуществующиеНастройки.Количество() = 0 Тогда
		CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияЗагрузитьИзМакета("CRM_НастройкиПолейОтображенияСодержания");
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокКонтрагентов(Список);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Элементы.ГруппаСтраницыРазделов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	СформироватьСписокРазделов();
	
	//+вог
	//+Рабочий стол
	скРабочийСтолСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ);
	//-Рабочий стол
	
	ОбработатьПараметрыОткрытияФормы();
	//-вог
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ВсеИнтересы.Пометка		= НЕ ТолькоАктивные;
	Элементы.ТолькоАктивные.Пометка		= ТолькоАктивные;
	Элементы.ВсеТолькоАктивные.Заголовок	= ?(ТолькоАктивные,"Только активные","Все");
	
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["ПометкаПоказатьСкрытьДопИнформацию"] = Неопределено Тогда
		ПометкаПоказатьСкрытьДопИнформацию	= Настройки["ПометкаПоказатьСкрытьДопИнформацию"];
	КонецЕсли;
	
	Элементы.СписокСкрытьПоказатьПоКлиентам.Пометка	= ПометкаПоказатьСкрытьДопИнформацию;
	Элементы.ГруппаПанельИнформации.Видимость		= ПометкаПоказатьСкрытьДопИнформацию;
	
	Если НЕ Настройки["ПометкаПоказатьСкрытьСодержание"]	= Неопределено Тогда
		ПометкаПоказатьСкрытьСодержание			= Настройки["ПометкаПоказатьСкрытьСодержание"];
	КонецЕсли;
	
	Элементы.СписокСкрытьПоказатьСодержание.Пометка					= ПометкаПоказатьСкрытьСодержание;
	Элементы.ГруппаПанельСтраницДополнительнойИнформации.Видимость	= ПометкаПоказатьСкрытьСодержание;
	
	Если НЕ Настройки["ТолькоАктивные"]	= Неопределено Тогда
		ТолькоАктивные			= Настройки["ТолькоАктивные"];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	CRM_РежимФормЗакладкиСервер.ПриЗакрытииНаСервере(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементоФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	бИспользоватьПомощник = НЕ Копирование И (CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьПомощникВводаНовогоКлиента") = Истина);
	Если бИспользоватьПомощник И НЕ Группа Тогда
		Отказ = Истина;
		СтруктураПараметры = Новый Структура;
		СтруктураЗначенияЗаполнения = Новый Структура;
		Для Каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЭлементОтбора.Использование Тогда
					//+вог
					Если СтрНайти(Строка(ЭлементОтбора.ЛевоеЗначение), ".") = 0 Тогда
						СтруктураЗначенияЗаполнения.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение),ЭлементОтбора.ПравоеЗначение);
					КонецЕсли;
					//-вог
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Элементы.Список.Отображение <> ОтображениеТаблицы.Список Тогда
			СтруктураЗначенияЗаполнения.Вставить("Родитель", Элементы.Список.ТекущийРодитель);
		КонецЕсли;
		СтруктураПараметры.Вставить("ЗначенияЗаполнения",СтруктураЗначенияЗаполнения);
		CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, СтруктураПараметры);
	//+вог
	Иначе
		Если ЗначениеЗаполнено(ТипОтношений) Тогда
			Отказ = Истина;
			СтруктураПараметры = Новый Структура;
			СтруктураЗначенияЗаполнения = Новый Структура;
			СтруктураЗначенияЗаполнения.Вставить("ТипОтношений", ТипОтношений);
			
			СтруктураПараметры.Вставить("ЗначенияЗаполнения", СтруктураЗначенияЗаполнения);
			ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", 
				СтруктураПараметры,
				ЭтаФорма,
				УникальныйИдентификатор);
				
		КонецЕсли;
		
	//-вог
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаКонтакты Тогда
		
		Если Элементы.Контакты.ТекущиеДанные = Неопределено Тогда 
			ЗаполнитьПанельИнформацииПоДаннымКонтакта(Неопределено);
		Иначе
			ЗаполнитьПанельИнформацииПоДаннымКонтакта(Элементы.Контакты.ТекущаяСтрока);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаИнтересы Тогда
		
		Если Элементы.Интересы.ТекущиеДанные = Неопределено Тогда 
			ЗаполнитьПанельИнформацииПоДаннымИнтереса(Неопределено);
		Иначе
			ЗаполнитьПанельИнформацииПоДаннымИнтереса(Элементы.Интересы.ТекущаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтересыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		
		ТекущийКлиент = Элементы.Список.ТекущаяСтрока;
		
		Если ТипЗнч(ТекущийКлиент) = Тип("СправочникСсылка.Партнеры") Тогда
			Если НЕ CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущийКлиент, "ЭтоГруппа") Тогда
				СтруктураЗаполнения = Новый Структура("Основание",ТекущийКлиент);
				ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаДокумента",СтруктураЗаполнения,Элемент,УникальныйИдентификатор);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для группы клиентов ввод Интереса не доступен!'"));
			КонецЕсли; 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		
		ТекущийКлиент = Элементы.Список.ТекущаяСтрока;
		
		Если ТипЗнч(ТекущийКлиент) = Тип("СправочникСсылка.Партнеры") Тогда
			
			Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущийКлиент, "ЭтоГруппа") Тогда
				Отказ = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для группы клиентов ввод контакта не доступен!'"));
			КонецЕсли; 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСодержаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	// Поле отображения содержания.
	Если Элемент.Имя = "ПолеОтображениеСодержания" Тогда
		
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
		
		
	ИначеЕсли Элемент.Имя = "ПолеОтображениеСодержания1" Тогда
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКонтакты Тогда
			
			CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка2());
			
		ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИнтересы Тогда
			
			CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка1());
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтересыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаИнтересы", 2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаКонтакты", 2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРазделовПриИзменении(Элемент)
	Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы[ПереключательРазделов];	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементоФормы

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка()
	Возврат Новый ОписаниеТипов("СправочникСсылка.Партнеры");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка1()
	Возврат Новый ОписаниеТипов("ДокументСсылка.CRM_Интерес");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка2()
	Возврат Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров");
КонецФункции

&НаСервереБезКонтекста
Функция РазрешеноГрупповоеИзменениеПартнеров()

  Возврат Пользователи.РолиДоступны("CRM_ПередачаДелОтветственному, ПолныеПрава");

КонецФункции // РазрешеноГрупповоеИзменениеПартнеров()

&НаСервере
Процедура ЗаполнитьПанельИнформацииПоДаннымПартнера(Партнер)
	
	// Поле отображения содержания.
	Если Элементы.ГруппаПанельИнформации.Видимость Тогда
		Если ТипЗнч(Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
			Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(Партнер, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
			Если Содержание <> ПолеОтображениеСодержания Тогда
				ПолеОтображениеСодержания = Содержание;
			КонецЕсли;
		Иначе
			Содержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
			Если Содержание <> ПолеОтображениеСодержания Тогда
				ПолеОтображениеСодержания = Содержание;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Партнер = Неопределено Тогда Возврат КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
	ЗаполнитьПанельИнформацииПоДаннымПартнера(Элементы.Список.ТекущаяСтрока);
	
	КонтактыОтборПоКлиенту					= Контакты.Отбор.Элементы[0];
	КонтактыОтборПоКлиенту.ПравоеЗначение	= Элементы.Список.ТекущаяСтрока;
	Элементы.Контакты.Обновить();
	
	Если Интересы.Отбор.Элементы.Количество() > 0 Тогда
		ИнтересыОтборПоКлиенту					= Интересы.Отбор.Элементы[0];
		ИнтересыОтборПоКлиенту.ПравоеЗначение	= Элементы.Список.ТекущаяСтрока;
	КонецЕсли;
	
	Элементы.Интересы.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельИнформацииПоДаннымИнтереса(ТекущийИнтерес)
	
	// Поле отображения содержания.
	Если Элементы.ГруппаПанельСтраницДополнительнойИнформации.Видимость Тогда
		Если ТипЗнч(ТекущийИнтерес) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(ТекущийИнтерес, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка1());
			Если Содержание <> ПолеОтображениеСодержания1 Тогда
				ПолеОтображениеСодержания1 = Содержание;
			КонецЕсли;
		Иначе
			Содержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
			Если Содержание <> ПолеОтображениеСодержания1 Тогда
				ПолеОтображениеСодержания1 = Содержание;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийИнтерес = Неопределено Тогда Возврат КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельИнформацииПоДаннымКонтакта(ТекущийКонтакта)
	
	// Поле отображения содержания.
	Если Элементы.ГруппаПанельСтраницДополнительнойИнформации.Видимость Тогда
		Если ТипЗнч(ТекущийКонтакта) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(ТекущийКонтакта, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка2());
			Если Содержание <> ПолеОтображениеСодержания1 Тогда
				ПолеОтображениеСодержания1 = Содержание;
			КонецЕсли;
		Иначе
			Содержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
			Если Содержание <> ПолеОтображениеСодержания1 Тогда
				ПолеОтображениеСодержания1 = Содержание;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийКонтакта = Неопределено Тогда Возврат КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСпискаИнтересы()
	
	Если Элементы.Интересы.ТекущиеДанные = Неопределено Тогда 
		ЗаполнитьПанельИнформацииПоДаннымИнтереса(Неопределено);
	Иначе
		ЗаполнитьПанельИнформацииПоДаннымИнтереса(Элементы.Интересы.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСпискаКонтакты()
	
	Если Элементы.Контакты.ТекущиеДанные = Неопределено Тогда 
		ЗаполнитьПанельИнформацииПоДаннымКонтакта(Неопределено);
	Иначе
		ЗаполнитьПанельИнформацииПоДаннымКонтакта(Элементы.Контакты.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСостоянию()
	
	Если Интересы.Отбор.Элементы.Количество() > 0 Тогда
		ИнтересыОтборПоСостоянию				= Интересы.Отбор.Элементы[1];
		ИнтересыОтборПоСостоянию.Использование	= ТолькоАктивные;
	КонецЕсли;
	Элементы.Интересы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьсяНаСтроке()
	Элементы.Список.ТекущаяСтрока = ПоискПоРеквизитам;	
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВсеИнтересы(Команда)
	
	ТолькоАктивные						= Ложь;
	Элементы.ВсеИнтересы.Пометка		= Истина;
	Элементы.ТолькоАктивные.Пометка		= Ложь;
	Элементы.ВсеТолькоАктивные.Заголовок	= "Все";
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоАктивные(Команда)
	
	ТолькоАктивные						= Истина;
	Элементы.ВсеИнтересы.Пометка		= Ложь;
	Элементы.ТолькоАктивные.Пометка		= Истина;
	Элементы.ВсеТолькоАктивные.Заголовок	= "Только активные";
	УстановитьОтборПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	РазрешеноИзменениеПартнеров = РазрешеноГрупповоеИзменениеПартнеров();
	
	Если РазрешеноИзменениеПартнеров Тогда
	
		ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);	
	
	Иначе
		
		ПоказатьПредупреждение(,НСтр("ru = 'Команда ""Изменить выделенное"" доступна только пользователям, у которых есть роль ""Полные права"" или ""Передача дел ответственному"".'"))
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПоКлиентам(Команда)
	
	Элементы.СписокСкрытьПоказатьПоКлиентам.Пометка = НЕ Элементы.СписокСкрытьПоказатьПоКлиентам.Пометка;
	ПометкаПоказатьСкрытьДопИнформацию				= Элементы.СписокСкрытьПоказатьПоКлиентам.Пометка;
	Элементы.ГруппаПанельИнформации.Видимость		= ПометкаПоказатьСкрытьДопИнформацию;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьСодержание(Команда)
	
	Элементы.СписокСкрытьПоказатьСодержание.Пометка 				= НЕ Элементы.СписокСкрытьПоказатьСодержание.Пометка;
	ПометкаПоказатьСкрытьСодержание									= Элементы.СписокСкрытьПоказатьСодержание.Пометка;
	Элементы.ГруппаПанельСтраницДополнительнойИнформации.Видимость	= ПометкаПоказатьСкрытьСодержание;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоРеквизитам(Команда)
	
	НовоеОповещение = Новый ОписаниеОповещения("ПоискПоРеквизитамЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаВыбораПоРеквизитам",,ЭтотОбъект,,,,НовоеОповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоРеквизитамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	Попытка 
		ПоискПоРеквизитам = Результат;
		ТекущийЭлемент = Элементы.Список;
		WshShell = Новый COMОбъект("Wscript.Shell"); 
		WshShell.SendKeys("^(Q)");		
		Для Каждого ЭлементНастройки ИЗ Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Для Каждого ЭлементНастройкиОтбор ИЗ ЭлементНастройки.Элементы Цикл
				ЭлементНастройкиОтбор.Использование = Ложь;		
			КонецЦикла;
		КонецЦикла;
		Элементы.Список.Обновить();				
	Исключение 
	КонецПопытки;
	ПодключитьОбработчикОжидания("СпозиционироватьсяНаСтроке", 0.5, Истина);		
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстанавливатьФормуПриОткрытии(Команда)
	Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка = НЕ Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ВосстанавливатьФормуПриОткрытии", Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка);
КонецПроцедуры

//+вог
&НаКлиенте
Процедура СоздатьПоручение(Команда)
	
	ВыделенныеСтроки = Элементы.СписокТорговыхТочек.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны торговые точки. '"), 15);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТаблицы"    , "Справочник.вогТорговыеТочки");
	ПараметрыФормы.Вставить("МассивОбъектов", ВыделенныеСтроки);
	
	ОткрытьФорму("Обработка.вогМастерФормированияПоручений.Форма", 
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
//-вог

#КонецОбласти // ОбработчикиКомандФормы

//+вог

#Область ОбработкаПараметровЗапуска

&НаСервере
Процедура ОбработатьПараметрыОткрытияФормы()

	Если Параметры.Свойство("ТипОтношений") Тогда
		ТипОтношений = Параметры.ТипОтношений;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
			"Ссылка.вогТипыОтношений.ТипОтношений", ТипОтношений); 
		
		АвтоЗаголовок = Ложь;
		Заголовок 	  = Строка(ТипОтношений);
		
	КонецЕсли;

КонецПроцедуры // ОбработатьПараметрыОткрытияФормы()
	
#КонецОбласти

#Область СтраницыРаздела

&НаСервере
Процедура СформироватьСписокРазделов()

	Для каждого Страница Из Элементы.ГруппаСтраницыРазделов.ПодчиненныеЭлементы Цикл
		Элементы.ПереключательРазделов.СписокВыбора.Добавить(Страница.Имя, Страница.Заголовок);	
	КонецЦикла;

	Если Элементы.ПереключательРазделов.СписокВыбора.Количество() > 0 Тогда
		ПереключательРазделов = Элементы.ПереключательРазделов.СписокВыбора[0].Значение;	
	КонецЕсли;
	
КонецПроцедуры // СформироватьСписокРазделов()
	
#КонецОбласти

//+Рабочий стол
#Область Подключаемый_РабочийСтол
	
&НаКлиенте
Процедура Подключаемый_скТумблерРабочегоСтолаПриИзменении(Элемент)
	скРабочийСтолКлиент.ТумблерРабочегоСтолаПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры // Подключаемый_скТумблерРабочегоСтолаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОбработкаГипперссылкиДействийНажатие(Элемент)
	скРабочийСтолКлиент.ОбработкаГипперссылкиДействийНажатие(ЭтаФорма, Элемент);	
КонецПроцедуры // Подключаемый_ИндикаторНапоминанийНажатие()

&НаКлиенте
Процедура Подключаемый_ОбновитьТаблицуНапоминаний(МассивНапоминаний = Неопределено) Экспорт
	скРабочийСтолКлиент.ОбновитьТаблицуНапоминаний(ЭтаФорма, МассивНапоминаний);
КонецПроцедуры // Подключаемый_ОбновитьТаблицуНапоминаний()

&НаКлиенте
Процедура Подключаемый_НапоминанияСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьНапоминания(ЭтаФорма);	
КонецПроцедуры // Подключаемый_НапоминанияСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПрекратитьВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПрекратитьВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПеренестиВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПеренестиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_ЗаметкиСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьЗаметки(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ЗаметкиСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиВсе(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиВсе()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиДобавить(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиДобавить(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиДобавить()

&НаКлиенте
Процедура Подключаемый_ИсторияРаботыСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьИсториюРаботы(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ИсторияРаботыСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLИсторииРаботыПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLИсторииРаботыПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLИсторииРаботыПриНажатии()

#КонецОбласти
//-Рабочий стол

//-вог
