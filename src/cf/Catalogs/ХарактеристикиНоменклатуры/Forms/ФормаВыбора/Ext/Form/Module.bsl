
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Устанавливает отбор для формы выбора характеристик номенклатуры.
//
Процедура УстановитьОтборПоВладельцуНаСервере()
	
	СписокОтбора = Новый СписокЗначений();
	СписокОтбора.Добавить(Номенклатура);
	СписокОтбора.Добавить(НоменклатурнаяГруппа);
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = СписокОтбора;
			
КонецПроцедуры // УстановитьОтборПоВладельцуНаСервере()	

&НаКлиенте
// Устанавливает отбор для формы выбора характеристик номенклатуры.
//
Процедура УстановитьОтборПоВладельцуНаКлиенте()
	
	СписокОтбора = Новый СписокЗначений();
	СписокОтбора.Добавить(Номенклатура);
	СписокОтбора.Добавить(НоменклатурнаяГруппа);
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = СписокОтбора;
			
КонецПроцедуры // УстановитьОтборПоВладельцуНаКлиенте()	

&НаСервере
// Заполнить значениями дерево свойств.
//
Процедура ЗаполнитьДеревоЗначенийСвойств(ПереноситьВведенныеЗначения, ДополнительныеРеквизиты)
	
	Если ПереноситьВведенныеЗначения Тогда
		CRM_УправлениеСвойствамиПереопределяемый.ПеренестиЗначенияСвойств(ДополнительныеРеквизиты, РеквизитФормыВЗначение("ДеревоЗначенийСвойств"));
	КонецЕсли;
	
	спсНаборов = Новый СписокЗначений;
	Набор = НоменклатурнаяГруппа.НаборСвойствХарактеристики;
	Если Набор <> Неопределено Тогда
		спсНаборов.Добавить(Набор);
	КонецЕсли;
	
	Дерево = CRM_УправлениеСвойствамиПереопределяемый.ЗаполнитьДеревоЗначенийСвойств(НоменклатурнаяГруппа, ДополнительныеРеквизиты, Истина, спсНаборов);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоЗначенийСвойств");
	
КонецПроцедуры // ЗаполнитьДеревоЗначенийСвойств()

&НаКлиенте
// Процедура рекурсивно обходит дерево значений.
//
Процедура УстановитьОтборПоСвойствамИЗначениям(ЭлементыДерева)
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		Если Не СтрокаДерева.ЭтоГруппа 
			И ЗначениеЗаполнено(СтрокаДерева.Значение) Тогда		
		
			ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка." + Строка(СтрокаДерева.Свойство));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ПравоеЗначение = СтрокаДерева.Значение;
		
		КонецЕсли;
				 
		СледЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
		УстановитьОтборПоСвойствамИЗначениям(СледЭлементыДерева);
		 
	КонецЦикла;	
		
КонецПроцедуры // РекурсивныйОбходДереваЗначений()	

&НаСервере
// Процедура рекурсивно обходит дерево значений.
//
Процедура РекурсивныйОбходДереваЗначений(ЭлементыДерева, Строка)
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.Значение) Тогда
			Строка = Строка + СтрокаДерева.Значение + ", ";
		КонецЕсли;	
		 
		СледЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
		РекурсивныйОбходДереваЗначений(СледЭлементыДерева, Строка);
		 
	КонецЦикла;	
		
КонецПроцедуры // РекурсивныйОбходДереваЗначений()	

&НаСервере
// Функция устанавливает новое наименование характеристики по значениям свойств.
//
// Параметры:
//  КоллекцияЗначенийСвойств - коллекция значений, имеющая свойство Значение.
//
// Возвращаемое значение:
//  Строка - сформированное наименование.
//
Функция СформироватьНаименование(КоллекцияЗначенийСвойств)

	ЭлементыДерева = КоллекцияЗначенийСвойств.ПолучитьЭлементы();
	
	Строка = "";
	РекурсивныйОбходДереваЗначений(ЭлементыДерева, Строка);
	
	Строка = Лев(Строка, СтрДлина(Строка) - 2);

	Если ПустаяСтрока(Строка) Тогда
		Строка = "<Свойства не назначены>";
	КонецЕсли;

	Возврат Строка;

КонецФункции // СформироватьНаименование()

&НаСервере
// Вводит новую характеристику в соответствии с установленными значениями свойств.
//
// Параметры:
//  Нет.
//
Процедура ВвестиНовуюХарактеристику()

	СправочникОбъектХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();

	СправочникОбъектХарактеристика.Владелец = НоменклатурнаяГруппа;
	СправочникОбъектХарактеристика.Наименование = СформироватьНаименование(ДеревоЗначенийСвойств);

	// Перенесем значения из дерева значений свойств в табличную часть объекта.
	CRM_УправлениеСвойствамиПереопределяемый.ПеренестиЗначенияСвойств(СправочникОбъектХарактеристика.ДополнительныеРеквизиты, РеквизитФормыВЗначение("ДеревоЗначенийСвойств"));
	
	НачатьТранзакцию();

	Попытка
		СправочникОбъектХарактеристика.Записать();
		
	Исключение
		CRM_ОбщегоНазначенияСервер.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
    
	ЗафиксироватьТранзакцию();
	
	// Обновиим данные динамического списка.
	Элементы.Список.ТекущаяСтрока = СправочникОбъектХарактеристика.Ссылка;
	Элементы.Список.Обновить();
	
КонецПроцедуры // ВвестиНовуюХарактеристику()

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
// В процедуре осуществляется
// - установка отбора для формы выбора.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Номенклатура") Тогда
		
		Если ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
			
			Если Не Параметры.Номенклатура.ИспользоватьХарактеристики Тогда
			
				Сообщение = Новый СообщениеПользователю();
	        	Сообщение.Текст = НСтр("ru = 'Для номенклатуры не ведется учет по характеристикам!'");
				Сообщение.Сообщить();
	        	Отказ = Истина;
			
			Иначе
			
				Номенклатура = Параметры.Номенклатура;
				НоменклатурнаяГруппа = Параметры.Номенклатура.НоменклатурнаяГруппа;
				
				УстановитьОтборПоВладельцуНаСервере();
				
				// Заполним дерево значений свойств.
				ЗаполнитьДеревоЗначенийСвойств(Ложь, Параметры.ТекущаяСтрока.ДополнительныеРеквизиты);
				
			КонецЕсли;
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;		
		
	Иначе
		
		Элементы.СписокСоздать.Доступность = Ложь;
		Элементы.СписокКонтекстноеМенюСоздать.Доступность = Ложь;
		
	КонецЕсли;	
	
	Если НЕ Константы.ИспользоватьДополнительныеРеквизитыИСведения.Получить() Тогда
		Элементы.Характеристики.Отображение = ОтображениеОбычнойГруппы.Нет;
		Элементы.Характеристики.ОтображатьЗаголовок = Ложь;
	КонецЕсли;	
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура обработчик события ПриОткрытии.
//
Процедура ПриОткрытии(Отказ)
	
	// Разверенем дерево значений свойств.
	CRM_ОбщегоНазначенияКлиент.РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоЗначенийСвойств, ДеревоЗначенийСвойств);
	
КонецПроцедуры // ПриОткрытии()

#Область ПроцедурыОбработчикиСобытийРеквизитовТабличнойЧастиСвойстваИЗначения

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Значение.
//
Процедура ЗначениеПриИзменении(Элемент)
	
	Список.Отбор.Элементы.Очистить();
	
	УстановитьОтборПоВладельцуНаКлиенте();
	
	ЭлементыДерева = ДеревоЗначенийСвойств.ПолучитьЭлементы();
	//УстановитьОтборПоСвойствамИЗначениям(ЭлементыДерева);
	
КонецПроцедуры // ЗначениеПриИзменении()

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовТабличнойЧастиХарактеристики

&НаКлиенте
// Процедура - обработчик события ПередНачаломДобавления поля ввода Список.
//
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;

	ВвестиНовуюХарактеристику();
		
КонецПроцедуры // СписокПередНачаломДобавления()

#КонецОбласти

#Область ПроцедурыМеханизмаСвойств

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ДеревоЗначенийСвойств.
//
Процедура ДеревоЗначенийСвойствПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры // ДеревоЗначенийСвойствПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПередНачаломДобавления поля ввода ДеревоЗначенийСвойств.
//
Процедура ДеревоЗначенийСвойствПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры // ДеревоЗначенийСвойствПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события ПередНачаломИзменения поля ввода ДеревоЗначенийСвойств.
//
Процедура ДеревоЗначенийСвойствПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Элемент.ТекущиеДанные.ЭтоГруппа;
	
КонецПроцедуры // ДеревоЗначенийСвойствПередНачаломИзменения()

&НаКлиенте
// Процедура - обработчик события ПередУдалением поля ввода ДеревоЗначенийСвойств.
//
Процедура ДеревоЗначенийСвойствПередУдалением(Элемент, Отказ)
	
	CRM_ОбщегоНазначенияКлиент.ДеревоЗначенийСвойствПередУдалением(Элемент, Отказ, Модифицированность);
	
КонецПроцедуры // ДеревоЗначенийСвойствПередУдалением()

&НаКлиенте
// Процедура - обработчик события ПриНачалеРедактирования поля ввода ДеревоЗначенийСвойств.
//
Процедура ДеревоЗначенийСвойствПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	CRM_ОбщегоНазначенияКлиент.ДеревоЗначенийСвойствПриНачалеРедактирования(Элемент);
	
КонецПроцедуры // ДеревоЗначенийСвойствПриНачалеРедактирования()

#КонецОбласти

#КонецОбласти
