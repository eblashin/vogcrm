
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Заполнить значениями дерево свойств.
//
Процедура ЗаполнитьДеревоЗначенийСвойств(ПереноситьВведенныеЗначения)
	
	Если ПереноситьВведенныеЗначения Тогда
		CRM_УправлениеСвойствамиПереопределяемый.ПеренестиЗначенияСвойств(Объект.ДополнительныеРеквизиты, РеквизитФормыВЗначение("ДеревоЗначенийСвойств"));
	КонецЕсли;
	
	спсНаборов = Новый СписокЗначений;
	Набор = НоменклатурнаяГруппа.НаборСвойствХарактеристики;
	Если Набор <> Неопределено Тогда
		спсНаборов.Добавить(Набор);
	КонецЕсли;
	
	Дерево = CRM_УправлениеСвойствамиПереопределяемый.ЗаполнитьДеревоЗначенийСвойств(Объект.Ссылка, Объект.ДополнительныеРеквизиты, Истина, спсНаборов);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоЗначенийСвойств");
	
КонецПроцедуры // ЗаполнитьДеревоЗначенийСвойств()

&НаСервереБезКонтекста
// Функция возвращает номенклатурную группу владельца.
//
Функция ПолучитьНоменклатурнуюГруппуВладельца(НоменклатураВладелец)
	
	Возврат НоменклатураВладелец.НоменклатурнаяГруппа;
	
КонецФункции // ПолучитьНоменклатурнуюГруппуВладельца()	

&НаКлиенте
// Процедура рекурсивно обходит дерево значений.
//
Процедура РекурсивныйОбходДереваЗначений(ЭлементыДерева, Строка)
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.Значение) Тогда
			Строка = Строка + СтрокаДерева.Значение + ", ";
		КонецЕсли;	
		 
		СледЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
		РекурсивныйОбходДереваЗначений(СледЭлементыДерева, Строка);
		 
	КонецЦикла;	
		
КонецПроцедуры // РекурсивныйОбходДереваЗначений()	

&НаКлиенте
// Функция устанавливает новое наименование характеристики по значениям свойств.
//
// Параметры:
//  КоллекцияЗначенийСвойств - коллекция значений, имеющая свойство Значение.
//
// Возвращаемое значение:
//  Строка - сформированное наименование.
//
Функция СформироватьНаименование(КоллекцияЗначенийСвойств)

	ЭлементыДерева = КоллекцияЗначенийСвойств.ПолучитьЭлементы();
	
	Строка = "";
	РекурсивныйОбходДереваЗначений(ЭлементыДерева, Строка);
	
	Строка = Лев(Строка, СтрДлина(Строка) - 2);

	Если ПустаяСтрока(Строка) Тогда
		Строка = "<Свойства не назначены>";
	КонецЕсли;

	Возврат Строка;

КонецФункции // СформироватьНаименование()

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура обработчик события ПриСозданииНаСервере.
// Осуществляет первоначальное заполнение реквизитов формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// 1. Проверка.
	Если ЗначениеЗаполнено(Объект.Владелец) 
		И ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") 
		И НЕ Объект.Владелец.ИспользоватьХарактеристики Тогда
				
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Для номенклатуры не ведется учет по характеристикам!'");
		Сообщение.Сообщить();
		Отказ = Истина;
		
	// 2. Заполнение.
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Владелец") Тогда
				
		Если ТипЗнч(Параметры.ЗначенияЗаполнения.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		
			НоменклатурнаяГруппа = Параметры.ЗначенияЗаполнения.Владелец.НоменклатурнаяГруппа;
			Номенклатура = Параметры.ЗначенияЗаполнения.Владелец;
			
		ИначеЕсли ТипЗнч(Параметры.ЗначенияЗаполнения.Владелец) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			
			НоменклатурнаяГруппа = Параметры.ЗначенияЗаполнения.Владелец;
			Номенклатура = Неопределено;
			
		ИначеЕсли ТипЗнч(Параметры.ЗначенияЗаполнения.Владелец) = Тип("СписокЗначений") Тогда
			
			Для каждого ЭлСписка Из Параметры.ЗначенияЗаполнения.Владелец Цикл
				
				Если ТипЗнч(ЭлСписка.Значение) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					
					Объект.Владелец = ЭлСписка.Значение;
					НоменклатурнаяГруппа = ЭлСписка.Значение;
					
				Иначе
					
					Номенклатура = ЭлСписка.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
	// 3 Открытие.	
	ИначеЕсли ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Если ТипЗнч(Параметры.Ключ.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		
			НоменклатурнаяГруппа = Параметры.Ключ.Владелец.НоменклатурнаяГруппа;
			Номенклатура = Параметры.Ключ.Владелец;
			
		ИначеЕсли ТипЗнч(Параметры.Ключ.Владелец) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			
			НоменклатурнаяГруппа = Параметры.Ключ.Владелец;
			Номенклатура = Неопределено;

		КонецЕсли;	
		
	Иначе
		
		НоменклатурнаяГруппа = Неопределено;
		Номенклатура = Неопределено;		
		
	КонецЕсли;	
			
	// Заполним дерево значений свойств.
	Если Не Отказ Тогда
		ЗаполнитьДеревоЗначенийСвойств(Ложь);
	КонецЕсли;
	
	Если НЕ Константы.ИспользоватьДополнительныеРеквизитыИСведения.Получить() Тогда
		Элементы.Наименование.КнопкаСпискаВыбора = Ложь;
	КонецЕсли;	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура обработчик события ПриОткрытии.
//
Процедура ПриОткрытии(Отказ)
	
	// Разверенем дерево значений свойств.
	CRM_ОбщегоНазначенияКлиент.РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоЗначенийСвойств, ДеревоЗначенийСвойств);
			
КонецПроцедуры // ПриОткрытии()

&НаСервере
// Процедура обработчик события ПередЗаписьюНаСервере.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Перенесем значения из дерева значений свойств в табличную часть объекта.
	CRM_УправлениеСвойствамиПереопределяемый.ПеренестиЗначенияСвойств(ТекущийОбъект.ДополнительныеРеквизиты, РеквизитФормыВЗначение("ДеревоЗначенийСвойств"));
	
КонецПроцедуры // ПередЗаписьюНаСервере()

#Область ПроцедурыОбработчикиСобытийРеквизитовФормы

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля Владелец.
//
Процедура ВладелецПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		НоменклатурнаяГруппа = ПолучитьНоменклатурнуюГруппуВладельца(Объект.Владелец);
		
	ИначеЕсли ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		
		НоменклатурнаяГруппа = Объект.Владелец;
				
	Иначе
		
		НоменклатурнаяГруппа = Неопределено;
		
	КонецЕсли;
	
	// Заполним дерево значений свойств.
	ЗаполнитьДеревоЗначенийСвойств(Истина);	
	
	CRM_ОбщегоНазначенияКлиент.РазвернутьДеревоЗначенийСвойств(Элементы.ДеревоЗначенийСвойств, ДеревоЗначенийСвойств);
	
КонецПроцедуры // ВладелецПриИзменении()

&НаКлиенте
// Процедура - обработчик события НачалоВыбораИзСписка поля Владелец.
//
Процедура ВладелецНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		Элемент.СписокВыбора.Добавить(НоменклатурнаяГруппа);	
	КонецЕсли;	
	Если ЗначениеЗаполнено(Номенклатура) Тогда	
		Элемент.СписокВыбора.Добавить(Номенклатура);	
	КонецЕсли;	
	
КонецПроцедуры // ВладелецНачалоВыбораИзСписка()

&НаКлиенте
// Процедура - обработчик события НачалоВыбораИзСписка поля Владелец.
//
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    
    Список = Новый СписокЗначений();

	Список.Добавить(СформироватьНаименование(ДеревоЗначенийСвойств));

	ОписаниеОповещения = Новый ОписаниеОповещения("НаименованиеНачалоВыбораИзСпискаЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элементы.Наименование);

КонецПроцедуры // НаименованиеНачалоВыбораИзСписка()

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСпискаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		Объект.Наименование = РезультатВыбора.Значение;
	КонецЕсли;
	
КонецПроцедуры // НаименованиеНачалоВыбораИзСписка()

#КонецОбласти

#Область ПроцедурыМеханизмаСвойств

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ДеревоЗначенийСвойств.
//
Процедура ДеревоЗначенийСвойствПриИзменении(Элемент)
	
	Объект.Наименование = СформироватьНаименование(ДеревоЗначенийСвойств);
	
	Модифицированность = Истина;
	
КонецПроцедуры // ДеревоЗначенийСвойствПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПередНачаломДобавления поля ввода ДеревоЗначенийСвойств.
//
Процедура ДеревоЗначенийСвойствПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры // ДеревоЗначенийСвойствПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события ПередНачаломИзменения поля ввода ДеревоЗначенийСвойств.
//
Процедура ДеревоЗначенийСвойствПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Элемент.ТекущиеДанные.ЭтоГруппа;
	
КонецПроцедуры // ДеревоЗначенийСвойствПередНачаломИзменения()

&НаКлиенте
// Процедура - обработчик события ПередУдалением поля ввода ДеревоЗначенийСвойств.
//
Процедура ДеревоЗначенийСвойствПередУдалением(Элемент, Отказ)
	
	CRM_ОбщегоНазначенияКлиент.ДеревоЗначенийСвойствПередУдалением(Элемент, Отказ, Модифицированность);
	
КонецПроцедуры // ДеревоЗначенийСвойствПередУдалением()

&НаКлиенте
// Процедура - обработчик события ПриНачалеРедактирования поля ввода ДеревоЗначенийСвойств.
//
Процедура ДеревоЗначенийСвойствПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	CRM_ОбщегоНазначенияКлиент.ДеревоЗначенийСвойствПриНачалеРедактирования(Элемент);
	
КонецПроцедуры // ДеревоЗначенийСвойствПриНачалеРедактирования()

#КонецОбласти

#КонецОбласти
