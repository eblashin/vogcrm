
&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ++ VOG Солодов В.В. 14.09.2020 CRM-912
	СписокСвязиНаборовТиповыхЗадач.Параметры.УстановитьЗначениеПараметра("ТиповаяЗадача", Объект.Ссылка);
	// -- VOG Солодов В.В. 14.09.2020 CRM-912
	ЗаполнитьСписокВыбораПринадлежности();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	КэшированныеЗначения.Вставить("ПринадлежностьОбъекту", Объект.ПринадлежностьОбъекту);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Не КэшированныеЗначения = Неопределено
		И ЗначениеЗаполнено(Объект.НаправлениеДеятельности)
		И Не Объект.НаправлениеДеятельности = КэшированныеЗначения.НаправлениеДеятельности
		И ПолучитьКоличествоСвязанныхНаборов(Объект.Ссылка) > 0 Тогда
	
		ОписаниеОповещенияОЗавершении =
			Новый ОписаниеОповещения("НаправлениеДеятельностиПриИзмененииЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Связанные наборы с отличающимися направлениями деятельности будут очищены. Продолжить?'");
	
		ПоказатьВопрос(
			ОписаниеОповещенияОЗавершении,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		КэшированныеЗначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Объект.НаправлениеДеятельности = КэшированныеЗначения.НаправлениеДеятельности;
		Возврат;
	КонецЕсли;
	
	КэшированныеЗначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	ПерезаписатьСвязиНабораПоНаправлениюДеятельности(Объект.Ссылка, Объект.НаправлениеДеятельности);
	
	Элементы.СвязиНаборовТиповыхЗадач.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринадлежностьОбъектуПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Не Объект.ПринадлежностьОбъекту = КэшированныеЗначения.ПринадлежностьОбъекту
		И ПолучитьКоличествоСвязанныхНаборов(Объект.Ссылка) > 0 Тогда
	
		ОписаниеОповещенияОЗавершении =
			Новый ОписаниеОповещения("ПринадлежностьОбъектуПриИзмененииЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Связанные наборы с отличающейся принадлежностью будут очищены. Продолжить?'");
	
		ПоказатьВопрос(
			ОписаниеОповещенияОЗавершении,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		КэшированныеЗначения.ПринадлежностьОбъекту = Объект.ПринадлежностьОбъекту;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринадлежностьОбъектуПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Объект.ПринадлежностьОбъекту = КэшированныеЗначения.ПринадлежностьОбъекту;
		Возврат;
	КонецЕсли;
	
	КэшированныеЗначения.ПринадлежностьОбъекту = Объект.ПринадлежностьОбъекту;
	ПерезаписатьСвязиНабораПоПринадлежности(Объект.Ссылка, Объект.ПринадлежностьОбъекту);
	
	Элементы.СвязиНаборовТиповыхЗадач.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПриложения

&НаКлиенте
Процедура ПриложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	СписокВыбора 			= вогБизнесПроцессыИЗадачиКлиент.СформироватьСписокВыбораТипаПриложения(Объект.ПринадлежностьОбъекту);
	ОповещениеОЗавершении 	= Новый ОписаниеОповещения("ПриложенияПередНачаломДобавленияФрагмент", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеОЗавершении, СписокВыбора, Элементы.Приложения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПередНачаломДобавленияФрагмент(ВыбранноеЗначение, ПараметрыОповещения) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", 					ЭтотОбъект);
	ДополнительныеПараметры.Вставить("Предмет", 				Объект.ПринадлежностьОбъекту);
	ДополнительныеПараметры.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	
	вогБизнесПроцессыИЗадачиКлиент.ПриложенияПередНачаломДобавленияФрагмент(
		ВыбранноеЗначение,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПередНачаломДобавленияЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.Приложения.Добавить();
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ЭлементСпискаЗначений") Тогда
		
		НоваяСтрока.Приложение 		= ВыбранноеЗначение.Значение;
		НоваяСтрока.ТипПриложения 	= ВыбранноеЗначение.Представление;
		
		Элементы.Приложения.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Приложения.ИзменитьСтроку();
		
	Иначе
		
		НоваяСтрока.Приложение 		= ВыбранноеЗначение;
		НоваяСтрока.ТипПриложения 	= ВыбранноеЗначение;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", 					ЭтотОбъект);
	ДополнительныеПараметры.Вставить("Предмет", 				Объект.ПринадлежностьОбъекту);
	ДополнительныеПараметры.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	
	вогБизнесПроцессыИЗадачиКлиент.ПриложенияВыбор(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияВыборЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Приложения.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
		
		ТекущиеДанные.Приложение 		= ВыбранноеЗначение;
		ТекущиеДанные.ТипПриложения 	= ВыбранноеЗначение;
		
	Иначе
		
		ТекущиеДанные.Приложение 		= ВыбранноеЗначение;
		ТекущиеДанные.ТипПриложения 	= ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", 					ЭтотОбъект);
	ДополнительныеПараметры.Вставить("Предмет", 				Объект.ПринадлежностьОбъекту);
	ДополнительныеПараметры.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	
	вогБизнесПроцессыИЗадачиКлиент.ПриложенияВыбор(ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСвязиНаборовТиповыхЗадач

&НаКлиенте
Процедура СвязиНаборовТиповыхЗадачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ 			= Истина;
	ПараметрыФормы 	= Новый Структура("ЗначенияЗаполнения", Новый Структура("ТиповаяЗадача", Объект.Ссылка));
	
	ОткрытьФорму("РегистрСведений.вогСвязиНаборовТиповыхЗадач.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьНаборЗадач(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстСообщения = НСтр("ru = 'Объект не записан. Сначала запишите объект.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы 	= Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	
	НаправленияДеятельности = Новый Массив;
	НаправленияДеятельности.Добавить(Объект.НаправлениеДеятельности);
	НаправленияДеятельности.Добавить(ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ПустаяСсылка"));
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("НаправлениеДеятельности", НаправленияДеятельности);
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ДобавитьНаборЗадачЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Справочник.вогНаборыТиповыхЗадач.ФормаВыбора",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещенияОЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНаборЗадачЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		МассивНаборов = Результат;
	Иначе
		МассивНаборов = Новый Массив;
		МассивНаборов.Добавить(Результат);
	КонецЕсли;
	
	УстановитьСвязиНаборовТиповыхЗадач(МассивНаборов, Объект.Ссылка);
	Элементы.СвязиНаборовТиповыхЗадач.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить("Командировка");
	МассивЗначений.Добавить("Мероприятие");
	МассивЗначений.Добавить("Задача");
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(МассивЗначений);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПриложенияТипПриложения.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Приложения.ТипПриложения");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение 	= СписокЗначений;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоСвязанныхНаборов(ТиповаяЗадача)
	
	НаборЗаписей = РегистрыСведений.вогСвязиНаборовТиповыхЗадач.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТиповаяЗадача.Установить(ТиповаяЗадача);
	НаборЗаписей.Прочитать();
	
	Возврат НаборЗаписей.Количество();
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСвязиНаборовТиповыхЗадач(МассивНаборов, ТиповаяЗадача)
	
	Для Каждого НаборЗадач Из МассивНаборов Цикл
	
		НаборЗаписей = РегистрыСведений.вогСвязиНаборовТиповыхЗадач.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НаборЗадач.Установить(НаборЗадач);
		НаборЗаписей.Отбор.ТиповаяЗадача.Установить(ТиповаяЗадача);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.НаборЗадач = НаборЗадач;
		НоваяЗапись.ТиповаяЗадача = ТиповаяЗадача;
		
		НаборЗаписей.Записать(Истина);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаписатьСвязиНабораПоНаправлениюДеятельности(ТиповаяЗадача, НаправлениеДеятельности)
	
	НаправленияДеятельности = Новый Массив;
	НаправленияДеятельности.Добавить(НаправлениеДеятельности);
	НаправленияДеятельности.Добавить(Справочники.НаправленияДеятельности.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогСвязиНаборовТиповыхЗадач.НаборЗадач КАК НаборЗадач
		|ИЗ
		|	РегистрСведений.вогСвязиНаборовТиповыхЗадач КАК вогСвязиНаборовТиповыхЗадач
		|ГДЕ
		|	вогСвязиНаборовТиповыхЗадач.ТиповаяЗадача = &ТиповаяЗадача
		|	И НЕ вогСвязиНаборовТиповыхЗадач.ТиповаяЗадача.НаправлениеДеятельности В(&НаправленияДеятельности)";
	
	Запрос.УстановитьПараметр("ТиповаяЗадача", 				ТиповаяЗадача);
	Запрос.УстановитьПараметр("НаправленияДеятельности", 	НаправленияДеятельности);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.вогСвязиНаборовТиповыхЗадач.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НаборЗадач.Установить(ВыборкаДетальныеЗаписи.НаборЗадач);
		НаборЗаписей.Отбор.ТиповаяЗадача.Установить(ТиповаяЗадача);
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаписатьСвязиНабораПоПринадлежности(ТиповаяЗадача, Принадлежность)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогСвязиНаборовТиповыхЗадач.НаборЗадач КАК НаборЗадач
		|ИЗ
		|	РегистрСведений.вогСвязиНаборовТиповыхЗадач КАК вогСвязиНаборовТиповыхЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			вогСвязиНаборовТиповыхЗадач.НаборЗадач КАК НаборЗадач
		|		ИЗ
		|			РегистрСведений.вогСвязиНаборовТиповыхЗадач КАК вогСвязиНаборовТиповыхЗадач
		|		ГДЕ
		|			НЕ вогСвязиНаборовТиповыхЗадач.ТиповаяЗадача = &ТиповаяЗадача
		|			И НЕ вогСвязиНаборовТиповыхЗадач.ТиповаяЗадача.ПринадлежностьОбъекту = &Принадлежность) КАК ВложенныйЗапрос
		|		ПО вогСвязиНаборовТиповыхЗадач.НаборЗадач = ВложенныйЗапрос.НаборЗадач
		|ГДЕ
		|	вогСвязиНаборовТиповыхЗадач.ТиповаяЗадача = &ТиповаяЗадача";
	
	Запрос.УстановитьПараметр("ТиповаяЗадача", 	ТиповаяЗадача);
	Запрос.УстановитьПараметр("Принадлежность", Принадлежность);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.вогСвязиНаборовТиповыхЗадач.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НаборЗадач.Установить(ВыборкаДетальныеЗаписи.НаборЗадач);
		НаборЗаписей.Отбор.ТиповаяЗадача.Установить(ТиповаяЗадача);
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПринадлежности() 
	
	Элементы.ПринадлежностьОбъекту.СписокВыбора.Добавить(Неопределено, "Не указано");
	
	Для Каждого ТипПредмета Из Метаданные.ОпределяемыеТипы.вогТипыПредметовПоручений.Тип.Типы() Цикл 
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипПредмета);
		
		Описание = Новый ОписаниеТипов(МассивТипов);
		ПустаяСсылка = Описание.ПривестиЗначение(Неопределено);
		
		Элементы.ПринадлежностьОбъекту.СписокВыбора.Добавить(ПустаяСсылка, СокрЛП(ТипПредмета));
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
