
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивНаправлений = Новый Массив;
	
	Если Параметры.Свойство("Отбор")
		И ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		
		Если Параметры.Отбор.Свойство("НаправлениеДеятельности") Тогда
			
			Если ТипЗнч(Параметры.Отбор.НаправлениеДеятельности) = Тип("Массив") Тогда
				МассивНаправлений = Параметры.Отбор.НаправлениеДеятельности;
			Иначе
				МассивНаправлений.Добавить(Параметры.Отбор.НаправлениеДеятельности);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("ПринадлежностьОбъекта") Тогда
			
			Если Метаданные.ОпределяемыеТипы.вогТипыПредметовПоручений.Тип.СодержитТип(
				Параметры.Отбор.ПринадлежностьОбъекта) Тогда
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Параметры.Отбор.ПринадлежностьОбъекта);
				
				Описание 				= Новый ОписаниеТипов(МассивТипов);
				ПринадлежностьОбъекта 	= Описание.ПривестиЗначение(Неопределено);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивНаправлений.Количество() = 0 Тогда
		МассивНаправлений.Добавить(Справочники.НаправленияДеятельности.Обои);
		МассивНаправлений.Добавить(Справочники.НаправленияДеятельности.Плитка);
		МассивНаправлений.Добавить(Справочники.НаправленияДеятельности.ПустаяСсылка());
	КонецЕсли;
	
	ОтборНаправлениеДеятельности.ЗагрузитьЗначения(МассивНаправлений);
	
	ЗаполнитьДеревоЗадач();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДеревоЗадач

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьВыборЗначений(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьВыделенныеСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьВыборЗначений(Значение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьВыборЗначений(Значение)
	
	МассивВыбранных 		= Новый Массив;
	ТипВыбранногоОбъекта 	= Неопределено;
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		
		Для Каждого ВыбранныйИдентификатор Из Значение Цикл
			
			СтрокаДерева = ДеревоЗадач.НайтиПоИдентификатору(ВыбранныйИдентификатор);
			
			Если Не СтрокаДерева = Неопределено Тогда
				
				Если ТипВыбранногоОбъекта = Неопределено Тогда
					ТипВыбранногоОбъекта = ТипЗнч(СтрокаДерева.ТиповойОбъект);
				КонецЕсли;
				
				МассивВыбранных.Добавить(СтрокаДерева.ТиповойОбъект);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СтрокаДерева = ДеревоЗадач.НайтиПоИдентификатору(Значение);
		
		Если Не СтрокаДерева = Неопределено Тогда
			
			ТипВыбранногоОбъекта = ТипЗнч(СтрокаДерева.ТиповойОбъект);
			МассивВыбранных.Добавить(СтрокаДерева.ТиповойОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипВыбранногоОбъекта = Тип("СправочникСсылка.вогНаборыТиповыхЗадач") Тогда
		
		СоответствиеТиповыхЗадачНаборам = ПолучитьСоответствиеТиповыхЗадачНаборам(МассивВыбранных);
		
		Если СоответствиеТиповыхЗадачНаборам.Количество() = 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'В выбранных наборах нет типовых задач.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			Возврат;
			
		КонецЕсли;
		
		Закрыть(СоответствиеТиповыхЗадачНаборам);
		
	Иначе
		Закрыть(МассивВыбранных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыделенныеСтроки()
	
	Если Элементы.ДеревоЗадач.ВыделенныеСтроки.Количество() > 1 Тогда
		
		ЕстьИзменения 		= Ложь;
		МассивВыделенных 	= Новый Массив;
		
		ПерваяСтрока = ДеревоЗадач.НайтиПоИдентификатору(Элементы.ДеревоЗадач.ВыделенныеСтроки[0]);
		
		Если ПерваяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИндексКартинкиПервойСтроки = ПерваяСтрока.ИндексКартинки;
		МассивВыделенных.Добавить(Элементы.ДеревоЗадач.ВыделенныеСтроки[0]);
		
		Для Индекс = 1 По Элементы.ДеревоЗадач.ВыделенныеСтроки.ВГраница() Цикл
			
			ИдентификаторВыделеннойСтроки = Элементы.ДеревоЗадач.ВыделенныеСтроки.Получить(Индекс);
			ВыделеннаяСтрока = ДеревоЗадач.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
			
			Если ВыделеннаяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыделеннаяСтрока.ИндексКартинки = ИндексКартинкиПервойСтроки Тогда
				МассивВыделенных.Добавить(ИдентификаторВыделеннойСтроки);
			Иначе
				ЕстьИзменения = Истина;
			КонецЕсли;
				
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			
			Элементы.ДеревоЗадач.ТекущаяСтрока = МассивВыделенных[МассивВыделенных.ВГраница()];
			Элементы.ДеревоЗадач.ВыделенныеСтроки.Очистить();
			
			Для Каждого ИдентификаторВыделеннойСтроки Из МассивВыделенных Цикл
				Элементы.ДеревоЗадач.ВыделенныеСтроки.Добавить(ИдентификаторВыделеннойСтроки);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗадач()
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(вогСвязиНаборовТиповыхЗадач.НаборЗадач, ЗНАЧЕНИЕ(Справочник.вогНаборыТиповыхЗадач.ПустаяСсылка)) КАК НаборЗадач,
	|	СправочникПунктыЧекЛистовЗадач.Ссылка КАК ТиповаяЗадача,
	|	СправочникПунктыЧекЛистовЗадач.ПлановоеВремя КАК ПлановоеВремя,
	|	ЕСТЬNULL(вогНаборыТиповыхЗадач.ПлановоеВремя, ДАТАВРЕМЯ(1, 1, 1)) КАК ПлановоеВремяНабора,
	|	СправочникПунктыЧекЛистовЗадач.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЕСТЬNULL(вогНаборыТиповыхЗадач.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельностиНабора,
	|	СправочникПунктыЧекЛистовЗадач.ОписаниеЗадачи КАК ОписаниеЗадачи,
	|	ЕСТЬNULL(вогНаборыТиповыхЗадач.Наименование, """") КАК ОписаниеНабора,
	|	ТИПЗНАЧЕНИЯ(СправочникПунктыЧекЛистовЗадач.ПринадлежностьОбъекту) КАК ПринадлежностьОбъекта
	|ПОМЕСТИТЬ ВТ_ЗадачиНаборов
	|ИЗ
	|	Справочник.ПунктыЧекЛистовЗадач КАК СправочникПунктыЧекЛистовЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиНаборовТиповыхЗадач КАК вогСвязиНаборовТиповыхЗадач
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогНаборыТиповыхЗадач КАК вогНаборыТиповыхЗадач
	|			ПО вогСвязиНаборовТиповыхЗадач.НаборЗадач = вогНаборыТиповыхЗадач.Ссылка
	|				И (вогНаборыТиповыхЗадач.НаправлениеДеятельности В (&СписокНаправлений))
	|		ПО СправочникПунктыЧекЛистовЗадач.Ссылка = вогСвязиНаборовТиповыхЗадач.ТиповаяЗадача
	|ГДЕ
	|	СправочникПунктыЧекЛистовЗадач.ПометкаУдаления = ЛОЖЬ
	|	И СправочникПунктыЧекЛистовЗадач.НаправлениеДеятельности В(&СписокНаправлений)
	|	%ТекстУсловия%
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Справочник.вогНаборыТиповыхЗадач.ПустаяСсылка) КАК НаборЗадач,
	|	СправочникПунктыЧекЛистовЗадач.Ссылка КАК ТиповаяЗадача,
	|	СправочникПунктыЧекЛистовЗадач.ПлановоеВремя КАК ПлановоеВремя,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПлановоеВремяНабора,
	|	СправочникПунктыЧекЛистовЗадач.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиНабора,
	|	2 КАК ИндексКартинки,
	|	ЛОЖЬ КАК ЭтоНабор,
	|	СправочникПунктыЧекЛистовЗадач.ОписаниеЗадачи КАК ОписаниеЗадачи,
	|	"""" КАК ОписаниеНабора,
	|	ТИПЗНАЧЕНИЯ(СправочникПунктыЧекЛистовЗадач.ПринадлежностьОбъекту) КАК ПринадлежностьОбъекта
	|ИЗ
	|	Справочник.ПунктыЧекЛистовЗадач КАК СправочникПунктыЧекЛистовЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиНаборовТиповыхЗадач КАК вогСвязиНаборовТиповыхЗадач
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогНаборыТиповыхЗадач КАК вогНаборыТиповыхЗадач
	|			ПО вогСвязиНаборовТиповыхЗадач.НаборЗадач = вогНаборыТиповыхЗадач.Ссылка
	|		ПО СправочникПунктыЧекЛистовЗадач.Ссылка = вогСвязиНаборовТиповыхЗадач.ТиповаяЗадача
	|ГДЕ
	|	СправочникПунктыЧекЛистовЗадач.ПометкаУдаления = ЛОЖЬ
	|	И НЕ вогСвязиНаборовТиповыхЗадач.ТиповаяЗадача ЕСТЬ NULL
	|	И НЕ СправочникПунктыЧекЛистовЗадач.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВТ_ЗадачиНаборов.ТиповаяЗадача
	|				ИЗ
	|					ВТ_ЗадачиНаборов)
	|	И ВЫБОР
	|			КОГДА НЕ вогСвязиНаборовТиповыхЗадач.НаборЗадач ЕСТЬ NULL
	|				ТОГДА вогНаборыТиповыхЗадач.НаправлениеДеятельности В (&СписокНаправлений)
	|			ИНАЧЕ СправочникПунктыЧекЛистовЗадач.НаправлениеДеятельности В (&СписокНаправлений)
	|		КОНЕЦ
	|	%ТекстУсловия%
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗадачиНаборов.НаборЗадач,
	|	ВТ_ЗадачиНаборов.ТиповаяЗадача,
	|	ВТ_ЗадачиНаборов.ПлановоеВремя,
	|	ВТ_ЗадачиНаборов.ПлановоеВремяНабора,
	|	ВТ_ЗадачиНаборов.НаправлениеДеятельности,
	|	ВТ_ЗадачиНаборов.НаправлениеДеятельностиНабора,
	|	2,
	|	ЛОЖЬ,
	|	ВТ_ЗадачиНаборов.ОписаниеЗадачи,
	|	ВТ_ЗадачиНаборов.ОписаниеНабора,
	|	ВТ_ЗадачиНаборов.ПринадлежностьОбъекта КАК ПринадлежностьОбъекта
	|ИЗ
	|	ВТ_ЗадачиНаборов КАК ВТ_ЗадачиНаборов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаборЗадач,
	|	ОписаниеЗадачи
	|ИТОГИ
	|	МАКСИМУМ(ПлановоеВремяНабора),
	|	МАКСИМУМ(НаправлениеДеятельностиНабора),
	|	МАКСИМУМ(ОписаниеНабора)
	|ПО
	|	НаборЗадач";
	
	Запрос.УстановитьПараметр("СписокНаправлений", ОтборНаправлениеДеятельности.ВыгрузитьЗначения());
	
	Если Не ПринадлежностьОбъекта = Неопределено Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Неопределено));
		МассивТипов.Добавить(ТипЗнч(ПринадлежностьОбъекта));
		
		Запрос.УстановитьПараметр("МассивТипов", МассивТипов);
		ТекстЗамены = "И ТИПЗНАЧЕНИЯ(СправочникПунктыЧекЛистовЗадач.ПринадлежностьОбъекту) В(&МассивТипов)";
		
	Иначе
		ТекстЗамены = "";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%ТекстУсловия%", ТекстЗамены);;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНаборыЗадач = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЭлементыКорня = ДеревоЗадач.ПолучитьЭлементы();
	
	Пока ВыборкаНаборыЗадач.Следующий() Цикл
		
		СтрокаНабор = ЭлементыКорня.Добавить();
		
		СтрокаНабор.ТиповойОбъект 			= ВыборкаНаборыЗадач.НаборЗадач;
		СтрокаНабор.ПлановоеВремя 			= ВыборкаНаборыЗадач.ПлановоеВремяНабора;
		СтрокаНабор.НаправлениеДеятельности = ВыборкаНаборыЗадач.НаправлениеДеятельностиНабора;
		СтрокаНабор.Описание 				= ВыборкаНаборыЗадач.ОписаниеНабора;
		СтрокаНабор.ИндексКартинки 			= 1;
		
		ПодчиненныеСтроки = СтрокаНабор.ПолучитьЭлементы();
		
		ВыборкаТиповыеЗадачи = ВыборкаНаборыЗадач.Выбрать();
		
		Пока ВыборкаТиповыеЗадачи.Следующий() Цикл
			
			СтрокаТиповаяЗадача = ПодчиненныеСтроки.Добавить();
			
			СтрокаТиповаяЗадача.ТиповойОбъект 			= ВыборкаТиповыеЗадачи.ТиповаяЗадача;
			СтрокаТиповаяЗадача.ПлановоеВремя 			= ВыборкаТиповыеЗадачи.ПлановоеВремя;
			СтрокаТиповаяЗадача.НаправлениеДеятельности = ВыборкаТиповыеЗадачи.НаправлениеДеятельности;
			СтрокаТиповаяЗадача.Описание 				= ВыборкаТиповыеЗадачи.ОписаниеЗадачи;
			СтрокаТиповаяЗадача.ИндексКартинки 			= 2;
			Если Не ВыборкаТиповыеЗадачи.ПринадлежностьОбъекта = Тип("Неопределено") Тогда
				СтрокаТиповаяЗадача.ПринадлежностьОбъекта 	= ВыборкаТиповыеЗадачи.ПринадлежностьОбъекта;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗадачОписание.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоЗадач.Описание");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<типовые задачи>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЗадачПринадлежностьОбъекта.Имя);
	
	ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭлементОформления.Отбор.Элементы,
		,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоЗадач.ИндексКартинки");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= 2;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоЗадач.ПринадлежностьОбъекта");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указана>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеТиповыхЗадачНаборам(НаборыЗадач)
	
	СоответствиеЗадачНаборам = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогСвязиНаборовТиповыхЗадач.ТиповаяЗадача КАК ТиповаяЗадача,
		|	вогСвязиНаборовТиповыхЗадач.НаборЗадач КАК НаборЗадач
		|ИЗ
		|	РегистрСведений.вогСвязиНаборовТиповыхЗадач КАК вогСвязиНаборовТиповыхЗадач
		|ГДЕ
		|	вогСвязиНаборовТиповыхЗадач.НаборЗадач В(&НаборыЗадач)
		|ИТОГИ ПО
		|	НаборЗадач";
	
	Запрос.УстановитьПараметр("НаборыЗадач", НаборыЗадач);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНаборЗадач = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаборЗадач.Следующий() Цикл
		
		МассивЗадач = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаНаборЗадач.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивЗадач.Добавить(ВыборкаДетальныеЗаписи.ТиповаяЗадача);
		КонецЦикла;
		
		СоответствиеЗадачНаборам.Вставить(ВыборкаНаборЗадач.НаборЗадач, МассивЗадач);
		
	КонецЦикла;
	
	Возврат СоответствиеЗадачНаборам;
	
КонецФункции

#КонецОбласти
