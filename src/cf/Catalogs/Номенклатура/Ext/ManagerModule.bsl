#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	
// Функция возвращает список имен «ключевых» реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ТипНоменклатуры");
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	
	РедактируемыеРеквизиты.Добавить("ТипНоменклатуры");
	РедактируемыеРеквизиты.Добавить("МетодОценки");
	РедактируемыеРеквизиты.Добавить("СтавкаНДС");
	РедактируемыеРеквизиты.Добавить("НаправлениеДеятельности");
	РедактируемыеРеквизиты.Добавить("Склад");
	РедактируемыеРеквизиты.Добавить("Ячейка");
	РедактируемыеРеквизиты.Добавить("СчетУчетаЗапасов");
	РедактируемыеРеквизиты.Добавить("СчетУчетаЗатрат");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

// +CRM

// Осуществляет расширенный поиск номенклатуры.
// Параметры:
//          СписокНоменклатуры - таблица значений, заполняемая результатами поиска,
// Возвращаемое значение:
//          Неопределено если поиск произведен успешно.
//          Текст сообщения пользователю, если поиск неудачен.
//
Функция НайтиНоменклатуру(СтрокаПоиска, СписокНоменклатуры) Экспорт

	// настроить параметры поиска
	мОбластьПоиска = Новый Массив;
	мОбластьПоиска.Добавить(Метаданные.Справочники.Номенклатура);
	мОбластьПоиска.Добавить(Метаданные.Справочники.ХарактеристикиНоменклатуры);
	РазмерПорции = 200;
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска, РазмерПорции);
	СписокПоиска.ОбластьПоиска = мОбластьПоиска;
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		ИО = ИнформацияОбОшибке();
		Если Прав(СтрокаПоиска, 1) = "*" Тогда
			СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("""" + Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1) + """", РазмерПорции);
			СписокПоиска.ОбластьПоиска = мОбластьПоиска;
			СписокПоиска.ПерваяЧасть();
		Иначе
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИО);
		КонецЕсли;
	КонецПопытки;
	
	// Возврат, если поиск не результативен.
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
	ИначеЕсли СписокПоиска.ПолноеКоличество() = 0 Тогда
		Возврат НСтр("ru = 'Ничего не найдено'");
	КонецЕсли;
	КоличествоЭлементов = СписокПоиска.ПолноеКоличество();
	
	// Сформировать список найденной номенклатуры.
	СписокНоменклатуры.Очистить();
	НачальнаяПозиция = 0;
	КонечнаяПозиция = ?(КоличествоЭлементов>РазмерПорции,РазмерПорции,КоличествоЭлементов)-1;
	ЕстьСледующаяПорция = Истина;
	
	СтрокаПоискаВРег			= ВРег(СтрокаПоиска);
	
	// Обработать по порциям результаты ППД.
	Пока ЕстьСледующаяПорция Цикл
		Для СчетчикЭлементов = 0 По КонечнаяПозиция Цикл
			// Сформировать элемент результата.
			Элемент = СписокПоиска.Получить(СчетчикЭлементов);
			ЭлементСсылка = Элемент.Значение.Ссылка;
			ЭлементОписание = Элемент.Описание;
			
			Попытка
				СтрПредставлениеОбъекта = Элемент.Метаданные.ПредставлениеОбъекта + " """;
				Основание = СтрПредставлениеОбъекта + Элемент.Представление + """ - " + ЭлементОписание;
			Исключение
				Если ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.Номенклатура") Тогда
					СтрПредставлениеОбъекта = НСтр("ru = 'Номенклатура'") + " """ + Строка(ЭлементСсылка) + """";
				ИначеЕсли ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
					СтрПредставлениеОбъекта = НСтр("ru = 'Характеристика номенклатуры'") + " """ + Строка(ЭлементСсылка) + """";
				Иначе
					СтрПредставлениеОбъекта = "";
				КонецЕсли;
				Основание = ?(Не ЗначениеЗаполнено(СтрПредставлениеОбъекта), """" + Элемент.Представление + """", СтрПредставлениеОбъекта)
					+ " - " + ЭлементОписание;
				//
			КонецПопытки;
			
			Если ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.Номенклатура") Тогда
				Номенклатура = ЭлементСсылка;
			ИначеЕсли ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
				Номенклатура = ЭлементСсылка.Владелец;
			Иначе
				Продолжить;
			КонецЕсли;
			Если НЕ ДобавитьНоменклатуруВСписокНайденныхПолнотекстовымПоиском(СписокНоменклатуры,Номенклатура,Основание,ЭлементСсылка) Тогда
				Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");					
			КонецЕсли;
		КонецЦикла;
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоЭлементов - 1);
		Если ЕстьСледующаяПорция Тогда
			КонечнаяПозиция = 
			?(КоличествоЭлементов > НачальнаяПозиция + РазмерПорции, РазмерПорции,
			КоличествоЭлементов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	Если СписокНоменклатуры.Количество() = 0 Тогда
	     Возврат НСтр("ru = 'Ничего не найдено.'");		
	КонецЕсли;
	Возврат Неопределено;

КонецФункции

Функция ДобавитьНоменклатуруВСписокНайденныхПолнотекстовымПоиском(СписокНоменклатуры,Номенклатура,Основание,ЭлементСсылка)
	
	// Добавить элемент, если партнера еще нет в списке найденных.
	Если СписокНоменклатуры.Найти(Номенклатура,"Номенклатура") = Неопределено Тогда
		// Ограничить количество возвращаемых партнеров.
		Если СписокНоменклатуры.Количество() > 100 Тогда
			Возврат Ложь; 
		Иначе 
			Запись = СписокНоменклатуры.Добавить();
			Запись.Номенклатура = Номенклатура;
			Запись.Основание = Основание;
			Запись.Ссылка = ЭлементСсылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ДобавитьПартнераВСписокНайденныхПолнотекстовымПоиском()

// -CRM

//+вог

// Возвращает настройки видимости и заголовков элементов формы. Используется для построения формы и табличного
// документа карточки номенклатуры.
// Параметры:
//  Объект - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитов
//	РежимВидимостиПоказатьТолькоВажные 	- Булево - признак отображения основных реквизитов
//
// Возвращаемое значение:
//  Структура - структура с ключами:
//		* ВидимостьЭлементов - структура видимости элементов
//		* ЗаголовкиЭлементов - структура заголовков элементов
//
Функция НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные = Ложь) Экспорт
	
	НастройкиВидимостиИЗаголовков = Новый Структура;
	
	ВидимостьЭлементов = СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные);
	УстановитьПривилегированныйРежим(Истина);
	ЗаголовкиЭлементов = СтруктураЗаголовковЭлементовФормы(Объект, ВидимостьЭлементов);
	УстановитьПривилегированныйРежим(Ложь);
		
	НастройкиВидимостиИЗаголовков.Вставить("ВидимостьЭлементов", ВидимостьЭлементов);
	НастройкиВидимостиИЗаголовков.Вставить("ЗаголовкиЭлементов", ЗаголовкиЭлементов);
		
	Возврат НастройкиВидимостиИЗаголовков;
	
КонецФункции

// ++ VOG Солодов В.В. 29.10.2019 task 758

// Формирует наименование номенклатуры по шаблону.
// Параметры:
// 	НоменклатураСсылка - СправочникСсылка.Номенклатура - элемент, для которого нужно сформировать наименование
//	ПолноеНаименование 	- Булево - признак формирования полного наименования
//	ДляBSU 	- Булево - признак формирования наименования для BSU
//
// Возвращаемое значение:
//  ШаблонНаименования - Сформированное наименование
//
Функция СформироватьНаименованиеНоменклатуры(НоменклатураСсылка, ПолноеНаименование = Ложь, ДляBSU = Ложь) Экспорт
	
	НаправлениеДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "НаправлениеДеятельности");
	
	Если Не ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
		Возврат "";
	КонецЕсли;
	
	ШаблонНаименования 	= "";
	СтруктураДанных 	= ПолучитьСтруктуруДанныхНаименования(НоменклатураСсылка, ДляBSU);
	
	Если НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
		
		ШаблонНаименования = "%Артикул% %ВидПлитки%%КолвоСостЭлементов% %Материал% %ТипСокр% %Коллекция%";
		
		Если Не ЗначениеЗаполнено(СтруктураДанных.КолвоСостЭлементов) Тогда
			ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "%КолвоСостЭлементов%", "");
		КонецЕсли;
		
		Если ПолноеНаименование Тогда
			ШаблонНаименования = ШаблонНаименования + " %Бренд%";
		КонецЕсли;
		
		ШаблонНаименования = ШаблонНаименования + " %Длина%*%Ширина% %Комментарий%_%Содержит%/%Сорт%";
		
	Иначе
		
		Если ПолноеНаименование Тогда
			
			ШаблонНаименования = "%Артикул% (%Содержит%) %НаправлениеДеятельности% %Тип% %НоменклатурнаяГруппа%";
			
			Если ЗначениеЗаполнено(СтруктураДанных.Комментарий) Тогда
				ШаблонНаименования = ШаблонНаименования + " / %Комментарий%";
			КонецЕсли;
			
		Иначе
			ШаблонНаименования = "%Артикул% (%Содержит%) %НоменклатурнаяГруппа%";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураДанных.Содержит) Тогда
			ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "(%Содержит%)", "");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанных.Комментарий = "_" Тогда
		ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "_", "");
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураДанных Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
			ШаблонНаименования = СтрЗаменить(ШаблонНаименования, " %" + ЭлементСтруктуры.Ключ + "%_", " ");
			ШаблонНаименования = СтрЗаменить(ШаблонНаименования, " %" + ЭлементСтруктуры.Ключ + "%", "");
		КонецЕсли;
			
		ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "%" + ЭлементСтруктуры.Ключ + "%", ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Возврат СокрЛП(ШаблонНаименования);
	
КонецФункции // -- VOG Солодов В.В. 29.10.2019

#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область КарточкаОбъекта

// Возвращает табличный документ номенклатуры.
// Параметры:
//  Номенклатура - СправочникОбъект.Номенклатура, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитов 
//  НастройкиВидимостиИЗаголовков - Структура - см. функцию Справочники.Номенклатура.НастройкиВидимостиИЗаголовков
//
// Возвращаемое значение:
//	ТабличныйДокумент - табличный документ с реквизитами
//
Функция ТабличныйДокументКарточкиОбъекта(Номенклатура, НастройкиВидимостиИЗаголовков) Экспорт
	
	Перем Заголовок;
	
	ТолькоЗаполненные = (НастройкиВидимостиИЗаголовков.Свойство("ТолькоЗаполненные") И НастройкиВидимостиИЗаголовков.ТолькоЗаполненные);
	
	Объект = Неопределено;
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Объект = Номенклатура.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникОбъект.Номенклатура")
		Или ТипЗнч(Номенклатура) = Тип("ДанныеФормыСтруктура") Тогда
		Объект = Номенклатура;
	Иначе
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	ТабличныйДокументКарточка = Новый ТабличныйДокумент;
	
	СтруктураВидимости = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	СтруктураЗаголовков = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Макет = ПолучитьМакет("ПФ_MXL_КарточкаНоменклатуры");
	
	#Область Шапка
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Объект);
		
	Если Не ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		ОбластьШапка.Параметры.НаименованиеПолное = ТекстЗначенияНеЗаполнен("НаименованиеПолное");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаНаименованиеПолное = "НаименованиеПолное";

	Если Не ЗначениеЗаполнено(Объект.Артикул) Тогда
		ОбластьШапка.Параметры.Артикул = ТекстЗначенияНеЗаполнен("Артикул");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаАртикул = "Артикул";

	
	Если Не ЗначениеЗаполнено(Объект.Код) Тогда
		ОбластьШапка.Параметры.Код = ТекстЗначенияНеЗаполнен("Код");
	КонецЕсли;
	ОбластьШапка.Параметры.РасшифровкаКод = "Код";

	ТабличныйДокументКарточка.Присоединить(ОбластьШапка);
	
	#КонецОбласти
	
	ТабличныйДокументКолонки = Новый ТабличныйДокумент;
	
	#Область ОбщиеДанные
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	//Классификаторы
	Классификаторы = CRM_КлассификаторыВызовСервера.ТаблицаСоставаКлассификаторовОбъекта(Объект.Ссылка);
	Если ГлаваВидна("Классификаторы", СтруктураВидимости,, Классификаторы.Количество()) Тогда 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаКлассификаторов", Классификаторы);
		Запрос.УстановитьПараметр("ОбъектСсылка", Объект.Ссылка);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаКлассификаторов.Классификатор КАК Классификатор,
			|	ТаблицаКлассификаторов.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
			|	ТаблицаКлассификаторов.Аналитика КАК Аналитика
			|ПОМЕСТИТЬ втТаблицаКлассификаторов
			|ИЗ
			|	&ТаблицаКлассификаторов КАК ТаблицаКлассификаторов
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Классификатор,
			|	Аналитика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора,
			|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
			|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
			|ПОМЕСТИТЬ втТекущиеЗначенияКлассификаторов
			|ИЗ
			|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
			|ГДЕ
			|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &ОбъектСсылка
			|	И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец, CRM_ОбъектыЗначенийКлассификаторов.Аналитика) В
			|			(ВЫБРАТЬ
			|				втТаблицаКлассификаторов.Классификатор,
			|				втТаблицаКлассификаторов.Аналитика
			|			ИЗ
			|				втТаблицаКлассификаторов КАК втТаблицаКлассификаторов)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЗначениеКлассификатора,
			|	Аналитика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_ЗначенияКлассификаторов.Владелец КАК Классификатор,
			|	CRM_ЗначенияКлассификаторов.Ссылка КАК Значение,
			|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит
			|ПОМЕСТИТЬ втВсеЗначенияКлассификаторов
			|ИЗ
			|	втТаблицаКлассификаторов КАК втТаблицаКлассификаторов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
			|		ПО втТаблицаКлассификаторов.Классификатор = CRM_ЗначенияКлассификаторов.Владелец
			|ГДЕ
			|	НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Классификатор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втВсеЗначенияКлассификаторов.Классификатор КАК Классификатор,
			|	втВсеЗначенияКлассификаторов.Классификатор.ВидОтображения КАК ВидОтображения,
			|	втВсеЗначенияКлассификаторов.Классификатор.Представление,
			|	втВсеЗначенияКлассификаторов.Значение,
			|	втВсеЗначенияКлассификаторов.Значение.Представление,
			|	втВсеЗначенияКлассификаторов.ДополнительныйРеквизит,
			|	ЕСТЬNULL(втТекущиеЗначенияКлассификаторов.ЗначениеРеквизита, НЕОПРЕДЕЛЕНО) КАК ЗначениеРеквизита,
			|	ВЫБОР
			|		КОГДА втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Включен
			|ИЗ
			|	втВсеЗначенияКлассификаторов КАК втВсеЗначенияКлассификаторов
			|		ЛЕВОЕ СОЕДИНЕНИЕ втТекущиеЗначенияКлассификаторов КАК втТекущиеЗначенияКлассификаторов
			|		ПО втВсеЗначенияКлассификаторов.Значение = втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора
			|
			|УПОРЯДОЧИТЬ ПО
			|	втВсеЗначенияКлассификаторов.Классификатор.РеквизитДопУпорядочивания,
			|	втВсеЗначенияКлассификаторов.Значение.РеквизитДопУпорядочивания
			|ИТОГИ ПО
			|	Классификатор";
		
		ВыборкаКлассификатор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	КонецЕсли;	
	
	//Доп. реквизиты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитов.Свойство КАК Свойство,
	|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура) КАК НаборСвойств,
	|	НаборыДополнительныхРеквизитов.Свойство.Заголовок КАК ПредставлениеРеквизита,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение,
	|	ИСТИНА КАК ОбщееСвойство,
	|	НаборыДополнительныхРеквизитов.НомерСтроки КАК НомерСтрокиДляСортировки
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ПО (НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура)
	|			И НаборыДополнительныхРеквизитов.Свойство = НоменклатураДополнительныеРеквизиты.Свойство
	|ГДЕ
	|	НЕ НаборыДополнительныхРеквизитов.Свойство.ЭтоДополнительноеСведение
	|	И НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура)";
	
	Если ТолькоЗаполненные Тогда
		Запрос.Текст = Запрос.Текст  + " И НЕ НоменклатураДополнительныеРеквизиты.Значение ЕСТЬ NULL"
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	ДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	ДополнительныеРеквизиты.Сортировать("ОбщееСвойство Убыв, НомерСтрокиДляСортировки Возр");
		
	#КонецОбласти
	
	#Область ТабличныйДокументЛево
	
	ТабличныйДокументЛево = Новый ТабличныйДокумент;
		
	#Область Описание
	
	Если ГлаваВидна("Описание", СтруктураВидимости) Тогда 
		
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ОписаниеЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		// Вывод картинки
		Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
			
			ОбластьОписаниеКартинка = Макет.ПолучитьОбласть("ОписаниеКартинка");
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				КартинкаНоменклатуры = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Объект.ФайлКартинки);
				УстановитьПривилегированныйРежим(Ложь);
			Исключение
				КартинкаНоменклатуры = Неопределено; 
			КонецПопытки;
			
			Если ЗначениеЗаполнено(КартинкаНоменклатуры) Тогда
				ОбластьКартинка = ОбластьОписаниеКартинка.Области.АдресКартинки; 
				
				Если ТипЗнч(КартинкаНоменклатуры) = Тип("Картинка") Тогда
					ОбластьКартинка.Картинка = КартинкаНоменклатуры;
				ИначеЕсли ТипЗнч(КартинкаНоменклатуры) = Тип("ДвоичныеДанные") Тогда
					ОбластьКартинка.Картинка = Новый Картинка(КартинкаНоменклатуры);
				КонецЕсли;
				
				ОбластьОписаниеКартинка.Параметры.Расшифровка = "ФайлКартинки";
				
				ТабличныйДокументЛево.Вывести(ОбластьОписаниеКартинка);
			КонецЕсли;
			
		Иначе
			
			ОписаниеКартинкиНет = Макет.ПолучитьОбласть("ФайлКартинкиСтрока");
			ОписаниеКартинкиНет.Параметры.Расшифровка = "ФайлКартинки";
			ТабличныйДокументЛево.Вывести(ОписаниеКартинкиНет);
			
		КонецЕсли;	
		
		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "Комментарий", Объект.Комментарий,,, ТолькоЗаполненные);
		
		Если РазделВиден("ГиперссылкаПерейтиИзображения", СтруктураВидимости) Тогда
			ОбластьОписаниеИзображенияСтрока = Макет.ПолучитьОбласть("ИзображенияСтрока");
			
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиИзображения", Заголовок) Тогда
				ОбластьОписаниеИзображенияСтрока.Параметры.Изображения = Заголовок;
				ОбластьОписаниеИзображенияСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиИзображения";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьОписаниеИзображенияСтрока);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимости) Тогда
			ОбластьОписаниеФайлыСтрока = Макет.ПолучитьОбласть("ФайлыСтрока");
			
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиФайлы", Заголовок) Тогда
				ОбластьОписаниеФайлыСтрока.Параметры.Файлы = Заголовок;
				ОбластьОписаниеФайлыСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиФайлы";
			КонецЕсли;
			ТабличныйДокументЛево.Вывести(ОбластьОписаниеФайлыСтрока);
		КонецЕсли;
		
		Если ГлаваВидна("Классификаторы", СтруктураВидимости,, Классификаторы.Количество())
		  И РазделВиден("ГиперссылкаПерейтиЗначенияКлассификаторов", СтруктураВидимости) Тогда
			ОбластьГиперссылкаПерейтиЗначенияКлассификаторов = Макет.ПолучитьОбласть("ГиперссылкаПерейтиЗначенияКлассификаторовСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиЗначенияКлассификаторов", Заголовок) Тогда  
				ОбластьГиперссылкаПерейтиЗначенияКлассификаторов.Параметры.ГиперссылкаПерейтиЗначенияКлассификаторов = Заголовок;
			КонецЕсли;
			ОбластьГиперссылкаПерейтиЗначенияКлассификаторов.Параметры.Расшифровка = "ГиперссылкаПерейтиЗначенияКлассификаторов";
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиЗначенияКлассификаторов);
		КонецЕсли;
		
	КонецЕсли;
		
	#КонецОбласти
	
	#Область Цены
	
	Если ГлаваВидна("Цены", СтруктураВидимости) Тогда 
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ЦеныЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Если РазделВиден("ЦеноваяГруппа", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ЦеноваяГруппа", Объект.ЦеноваяГруппа,,, ТолькоЗаполненные);
		КонецЕсли;
				
		Если РазделВиден("ГиперссылкаПерейтиИсторияИзмененияЦенКомпании", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ИсторияИзмененияЦенКомпанииСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиИсторияИзмененияЦенКомпании";
			ТабличныйДокументЛево.Вывести(Область);
		КонецЕсли;
		
	КонецЕсли;
				
	#КонецОбласти
	
	#Область ПланированиеИМаркетинг
	
	Если ГлаваВидна("ПланированиеИМаркетинг", СтруктураВидимости) Тогда 
		ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ПланированиеИМаркетингЗаголовок");
		ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
		
		Если РазделВиден("вогКоллекцияНоменклатуры", СтруктураВидимости) Тогда 
			Если ЗначениеЗаполнено(Объект.вогКоллекцияНоменклатуры) Тогда
				КоллекцияНоменклатурыПредставление = Объект.вогКоллекцияНоменклатуры.ПолноеНаименование();
			Иначе	
				КоллекцияНоменклатурыПредставление = "";
			КонецЕсли;
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "вогКоллекцияНоменклатуры", КоллекцияНоменклатурыПредставление,,, ТолькоЗаполненные);
			
		КонецЕсли;
				
		Если РазделВиден("НаправлениеДеятельности", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "НаправлениеДеятельности", Объект.НаправлениеДеятельности,,, ТолькоЗаполненные);
		КонецЕсли;
				
		Если РазделВиден("ГиперссылкаПерейтиСегменты", СтруктураВидимости) Тогда
			ОбластьГиперссылкаПерейтиСегменты = Макет.ПолучитьОбласть("ГиперссылкаПерейтиСегментыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиСегменты", Заголовок) Тогда  
				ОбластьГиперссылкаПерейтиСегменты.Параметры.ГиперссылкаПерейтиСегменты = Заголовок;
			КонецЕсли;
			ОбластьГиперссылкаПерейтиСегменты.Параметры.Расшифровка = "ГиперссылкаПерейтиСегменты";
			ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиСегменты);
		КонецЕсли;
				
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область РазделыЛево
	
	ОписаниеРазделов = вогОбщегоНазначения.ПолучитьДанныеРазделаКарточки(МетаданныеОбъекта.ПолноеИмя(), 
		"Лево", ВыборкаКлассификатор, ДополнительныеРеквизиты);
	Для каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
		Если ОписаниеРаздела.ДанныеРаздела.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЦветФона = ОписаниеРаздела.ЦветФона;
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("РазделЗаголовокЛево");
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОписаниеРаздела.РазделПредставление;
		ТабличныйДокументЛево.Вывести(ОбластьЗаголовок);		   
		
		Для каждого ЭлементРаздела Из ОписаниеРаздела.ДанныеРаздела Цикл
			ОписаниеДанных = Неопределено;
			Если Не ЭлементРаздела.СоставРаздела.Свойство("ОписаниеДанных", ОписаниеДанных) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементРаздела.ТипРаздела = "ДополнительныеРеквизиты" Тогда				
				ИмяЭлементаДопРеквизита = "ДополнительныйРеквизитЗначение_" 
					+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.НаборСвойств.УникальныйИдентификатор())), "-", "x")
					+ "_"
					+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.Свойство.УникальныйИдентификатор())), "-", "x");
				
				Если РазделВиден(ИмяЭлементаДопРеквизита, СтруктураВидимости) Тогда 
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ДополнительныеРеквизитыЛево", ОписаниеДанных.Значение, ОписаниеДанных.ПредставлениеРеквизита, ИмяЭлементаДопРеквизита,, ЦветФона);		
				КонецЕсли;	
				
			ИначеЕсли ЭлементРаздела.ТипРаздела = "Классификаторы" Тогда
				ИмяЭлементаКлассфикатора =  CRM_КлассификаторыВызовСервера.ИмяОсновногоЭлементаКлассификатора(ОписаниеДанных.Классификатор, ОписаниеДанных.ВидОтображения); 
				Если ТипЗнч(ОписаниеДанных.Значения) = Тип("Строка") Тогда
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "КлассификаторыЛево", ОписаниеДанных.Значения, ОписаниеДанных.КлассификаторПредставление, ИмяЭлементаКлассфикатора, ТолькоЗаполненные, ЦветФона);
				Иначе	
					Если ОписаниеДанных.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
						Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
							ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ДополнительныеРеквизитыЛево", СтруктураЗначения.ЗначениеРеквизита, СтруктураЗначения.ЗначениеПредставление, ИмяЭлементаКлассфикатора, ТолькоЗаполненные, ЦветФона);
						КонецЦикла
						
					Иначе	
					
						ОбластьТаблицейЗаголовок = Макет.ПолучитьОбласть("КлассификаторыТаблицейЗаголовокЛевоСтрока");
						ОбластьТаблицейЗаголовок.Параметры.КлассификаторыЗаголовок = ОписаниеДанных.КлассификаторПредставление;
						ОбластьТаблицейЗаголовок.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
						
						УстановитьЦветФонаОбласти(ОбластьТаблицейЗаголовок, ЦветФона);	
						ТабличныйДокументЛево.Вывести(ОбластьТаблицейЗаголовок);		   
						
						Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
							ОбластьКлассификаторыТаблицейСтрока = Макет.ПолучитьОбласть("КлассификаторыТаблицейЛевоСтрока");
							ОбластьКлассификаторыТаблицейСтрока.Параметры.КлассификаторыЛевоРеквизит = СтруктураЗначения.ЗначениеПредставление;
							
							Если СтруктураЗначения.Включен Тогда
								Картинка = БиблиотекаКартинок.CRM_УстановитьФлажки;	
							Иначе
								Картинка = БиблиотекаКартинок.CRM_СнятьФлажки;	
							КонецЕсли;
							
							ОбластьКлассификаторыТаблицейСтрока.Область("КлассификаторыТаблицейЛевоКартинка").Картинка = Картинка;
							ОбластьКлассификаторыТаблицейСтрока.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
							
							УстановитьЦветФонаОбласти(ОбластьКлассификаторыТаблицейСтрока, ЦветФона);	
							ТабличныйДокументЛево.Вывести(ОбластьКлассификаторыТаблицейСтрока);		   
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	ТабличныйДокументКолонки.Присоединить(ТабличныйДокументЛево);
	
	#КонецОбласти
		
	#Область ТабличныйДокументПраво
	
	ТабличныйДокументПраво = Новый ТабличныйДокумент;
	
	#Область ОсновныеПараметрыУчета
	
	Если ГлаваВидна("ОсновныеПараметрыУчета", СтруктураВидимости) Тогда 
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ОсновныеПараметрыУчетаЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если РазделВиден("ТипНоменклатуры", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ТипНоменклатуры", Объект.ТипНоменклатуры,,, ТолькоЗаполненные);
		КонецЕсли;
		
		Если РазделВиден("Родитель", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Родитель", Объект.Родитель,,, ТолькоЗаполненные);
		КонецЕсли;
		
		Если РазделВиден("ИспользоватьХарактеристики", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ИспользоватьХарактеристики", Объект.ИспользоватьХарактеристики);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиХарактеристикиНоменклатуры", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиХарактеристикиНоменклатурыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиХарактеристикиНоменклатуры", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиХарактеристикиНоменклатуры = Заголовок;
			КонецЕсли;
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиХарактеристикиНоменклатуры";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиАналоги", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("АналогиСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиАналоги";
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
				
	КонецЕсли;	
	
	#КонецОбласти
	
	#Область ЕдиницыИзмеренияИОбластьХранения
	
	Если ГлаваВидна("ЕдиницыИзмеренияИОбластьХранения", СтруктураВидимости) Тогда 
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ЕдиницыИзмеренияИОбластьХраненияЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если РазделВиден("ЕдиницаИзмерения", СтруктураВидимости) Тогда
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ЕдиницаИзмерения", Объект.ЕдиницаИзмерения,,, ТолькоЗаполненные);
		КонецЕсли;
		
		Если РазделВиден("ГиперссылкаПерейтиЕдиницыИзмерения", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиЕдиницыИзмеренияСтрока");
			Область.Параметры.Расшифровка = "ГиперссылкаПерейтиЕдиницыИзмерения";
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиЕдиницыИзмерения", Заголовок) Тогда  
				Область.Параметры.ГиперссылкаПерейтиЕдиницыИзмерения = Заголовок;
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
				
		Если РазделВиден("вогЕдиницаХраненияОстатков", СтруктураВидимости) Тогда
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "вогЕдиницаХраненияОстатков", Объект.вогЕдиницаХраненияОстатков,,, ТолькоЗаполненные);
		КонецЕсли;
		
		Если РазделВиден("вогЕдиницаДляОтчетов", СтруктураВидимости) Тогда
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "вогЕдиницаДляОтчетов", Объект.вогЕдиницаДляОтчетов,,, ТолькоЗаполненные);
		КонецЕсли;
		
		Если РазделВиден("вогУниверсальнаяЕдиница", СтруктураВидимости) Тогда
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "вогУниверсальнаяЕдиница", Объект.вогУниверсальнаяЕдиница,,, ТолькоЗаполненные);
		КонецЕсли;
		
		Если РазделВиден("вогЕдиницаИзмеренияМест", СтруктураВидимости) Тогда
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "вогЕдиницаИзмеренияМест", Объект.вогЕдиницаИзмеренияМест,,, ТолькоЗаполненные);
		КонецЕсли;
		
	КонецЕсли;	
	
	#КонецОбласти
		
	#Область РегламентированныйИФинансовыйУчет
	
	Если ГлаваВидна("РегламентированныйИФинансовыйУчет", СтруктураВидимости) Тогда 
		ОбластьЗаголовок = Макет.ПолучитьОбласть("РегламентированныйИФинансовыйУчетЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если РазделВиден("СтавкаНДС", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "СтавкаНДС", Объект.СтавкаНДС,,, ТолькоЗаполненные);
		КонецЕсли;
				
		Если РазделВиден("НоменклатурнаяГруппа", СтруктураВидимости) Тогда 
			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "НоменклатурнаяГруппа", Объект.НоменклатурнаяГруппа,,, ТолькоЗаполненные);	 
		КонецЕсли;
					
	КонецЕсли;
	
	#КонецОбласти
			
	#Область РазделыПраво
	
	ОписаниеРазделов = вогОбщегоНазначения.ПолучитьДанныеРазделаКарточки(МетаданныеОбъекта.ПолноеИмя(), 
		"Право", ВыборкаКлассификатор, ДополнительныеРеквизиты);
	Для каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
		Если ОписаниеРаздела.ДанныеРаздела.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЦветФона = ОписаниеРаздела.ЦветФона;
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("РазделЗаголовокПраво");
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОписаниеРаздела.РазделПредставление;
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);		   
		
		Для каждого ЭлементРаздела Из ОписаниеРаздела.ДанныеРаздела Цикл
			ОписаниеДанных = Неопределено;
			Если Не ЭлементРаздела.СоставРаздела.Свойство("ОписаниеДанных", ОписаниеДанных) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементРаздела.ТипРаздела = "ДополнительныеРеквизиты" Тогда				
				ИмяЭлементаДопРеквизита = "ДополнительныйРеквизитЗначение_" 
					+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.НаборСвойств.УникальныйИдентификатор())), "-", "x")
					+ "_"
					+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.Свойство.УникальныйИдентификатор())), "-", "x");
				
				Если РазделВиден(ИмяЭлементаДопРеквизита, СтруктураВидимости) Тогда 
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ДополнительныеРеквизитыПраво", ОписаниеДанных.Значение, ОписаниеДанных.ПредставлениеРеквизита, ИмяЭлементаДопРеквизита,, ЦветФона);		
				КонецЕсли;	
				
			ИначеЕсли ЭлементРаздела.ТипРаздела = "Классификаторы" Тогда
				ИмяЭлементаКлассфикатора =  CRM_КлассификаторыВызовСервера.ИмяОсновногоЭлементаКлассификатора(ОписаниеДанных.Классификатор, ОписаниеДанных.ВидОтображения); 
				Если ТипЗнч(ОписаниеДанных.Значения) = Тип("Строка") Тогда
					ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КлассификаторыПраво", ОписаниеДанных.Значения, ОписаниеДанных.КлассификаторПредставление, ИмяЭлементаКлассфикатора, ТолькоЗаполненные, ЦветФона);
				Иначе	    
					Если ОписаниеДанных.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
						Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
							ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ДополнительныеРеквизитыПраво", СтруктураЗначения.ЗначениеРеквизита, СтруктураЗначения.ЗначениеПредставление, ИмяЭлементаКлассфикатора, ТолькоЗаполненные, ЦветФона);
						КонецЦикла
						
					Иначе	
						
						ОбластьТаблицейЗаголовок = Макет.ПолучитьОбласть("КлассификаторыТаблицейЗаголовокПравоСтрока");
						ОбластьТаблицейЗаголовок.Параметры.КлассификаторыЗаголовок = ОписаниеДанных.КлассификаторПредставление;
						ОбластьТаблицейЗаголовок.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
						
						УстановитьЦветФонаОбласти(ОбластьТаблицейЗаголовок, ЦветФона);	
						ТабличныйДокументПраво.Вывести(ОбластьТаблицейЗаголовок);		   
						
						Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
							ОбластьКлассификаторыТаблицейСтрока = Макет.ПолучитьОбласть("КлассификаторыТаблицейПравоСтрока");
							ОбластьКлассификаторыТаблицейСтрока.Параметры.КлассификаторыПравоРеквизит = СтруктураЗначения.ЗначениеПредставление;
							
							Если СтруктураЗначения.Включен Тогда
								Картинка = БиблиотекаКартинок.CRM_УстановитьФлажки;	
							Иначе
								Картинка = БиблиотекаКартинок.CRM_СнятьФлажки;	
							КонецЕсли;
							
							ОбластьКлассификаторыТаблицейСтрока.Область("КлассификаторыТаблицейПравоКартинка").Картинка = Картинка;
							ОбластьКлассификаторыТаблицейСтрока.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
							
							УстановитьЦветФонаОбласти(ОбластьКлассификаторыТаблицейСтрока, ЦветФона);	
							ТабличныйДокументПраво.Вывести(ОбластьКлассификаторыТаблицейСтрока);		   
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
			
	ТабличныйДокументКолонки.Присоединить(ТабличныйДокументПраво);
	
	#КонецОбласти
	
	ТабличныйДокументКарточка.Вывести(ТабличныйДокументКолонки);
	
	Возврат ТабличныйДокументКарточка;
	
КонецФункции

Функция ТекстЗначенияНеЗаполнен(ИмяРаздела)

	Если ИмяРаздела = "Наименование" Тогда
		Возврат НСтр("ru = '<не указано>'");	
	ИначеЕсли ИмяРаздела = "НаименованиеПолное" Тогда
		Возврат НСтр("ru = '<не указано>'");
	ИначеЕсли ИмяРаздела = "Артикул" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "Код" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "Комментарий" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "ЦеноваяГруппа" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "вогКоллекцияНоменклатуры" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "НаправлениеДеятельности" Тогда
		Возврат НСтр("ru = '<не указано>'");
	ИначеЕсли ИмяРаздела = "ТипНоменклатуры" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "Родитель" Тогда
		Возврат НСтр("ru = '<не указана>'");		
	ИначеЕсли ИмяРаздела = "ЕдиницаИзмерения" Тогда
		Возврат НСтр("ru = '<не указана>'");		
	ИначеЕсли ИмяРаздела = "вогЕдиницаХраненияОстатков" Тогда
		Возврат НСтр("ru = '<не указана>'");		
	ИначеЕсли ИмяРаздела = "вогЕдиницаДляОтчетов" Тогда
		Возврат НСтр("ru = '<не указана>'");		
	ИначеЕсли ИмяРаздела = "вогЕдиницаИзмеренияМест" Тогда
		Возврат НСтр("ru = '<не указана>'");		
	ИначеЕсли ИмяРаздела = "вогУниверсальнаяЕдиница" Тогда
		Возврат НСтр("ru = '<не указана>'");		
	ИначеЕсли ИмяРаздела = "НоменклатурнаяГруппа" Тогда
		Возврат НСтр("ru = '<не указана>'");		
	ИначеЕсли ИмяРаздела = "КлассификаторыЛево" Тогда
		Возврат НСтр("ru = '<значения не заданы>'");	
	ИначеЕсли ИмяРаздела = "КлассификаторыПраво" Тогда
		Возврат НСтр("ru = '<значения не заданы>'");	
	ИначеЕсли ИмяРаздела = "ДополнительныеРеквизитыЛево" Тогда
		Возврат НСтр("ru = '<значение не задано>'");		
	ИначеЕсли ИмяРаздела = "ДополнительныеРеквизитыПраво" Тогда
		Возврат НСтр("ru = '<значение не задано>'");			
		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЦветФонаОбласти(ИсходнаяОбласть, ЦветФона)

	Если ЦветФона <> Неопределено Тогда
		ВсяОбласть	     = ИсходнаяОбласть.Область();
		Область   	     = ИсходнаяОбласть.Область(1, 2, 1, ВсяОбласть.Право - 1);
		Область.ЦветФона = ЦветФона;
		
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокумент, Макет, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита = Неопределено, НовоеИмяРаздела = Неопределено, ТолькоЗаполненные = Ложь, ЦветФона  = Неопределено)
	
	ОбластьСтрока = Макет.ПолучитьОбласть(ИмяРаздела + "Строка");
		
	Если ТекстЗаголовкаРеквизита <> Неопределено Тогда 
		ОбластьСтрока.Параметры[ИмяРаздела + "Реквизит"] = Строка(ТекстЗаголовкаРеквизита) + ":";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗначенияРеквизита) Тогда 
		ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияРеквизита;
	Иначе
		Если Не ТолькоЗаполненные Тогда
			ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияНеЗаполнен(ИмяРаздела);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НовоеИмяРаздела = Неопределено Тогда 
		ОбластьСтрока.Параметры.Расшифровка = ИмяРаздела;
	Иначе
		ОбластьСтрока.Параметры.Расшифровка = НовоеИмяРаздела;
	КонецЕсли;
	
	УстановитьЦветФонаОбласти(ОбластьСтрока, ЦветФона);	
	ТабличныйДокумент.Вывести(ОбластьСтрока);
	
	КоличествоДополнительныхСтрок = 0;
	
	КоличествоДополнительныхСтрок = КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита);
	
	Счетчик = КоличествоДополнительныхСтрок;
	ОбластьДопСтрока = Макет.ПолучитьОбласть(ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела));
	УстановитьЦветФонаОбласти(ОбластьСтрока, ЦветФона);	
	
	Пока Счетчик > 0 Цикл
		Счетчик = Счетчик - 1;
		ТабличныйДокумент.Вывести(ОбластьДопСтрока);
	КонецЦикла;
	
	ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяРаздела + "Строка", КоличествоДополнительныхСтрок);
	                                                                                                           		
КонецПроцедуры

Процедура ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяОбласти, КоличествоДопСтрок)
	
	Если КоличествоДопСтрок = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Область = ТабличныйДокумент.Область(ИмяОбласти);
	Область.Разъединить();
	Область.Имя = Неопределено;
	АдресОбласти = Область.Имя;
	СтруктураАдреса = СтруктураАдреса(АдресОбласти);
	
	АдресКолонкиЗаголовкаНачало = СтруктураАдреса.АдресКолонкиНачало + 1; // + 1, т.к. слева колонка-отступ
	АдресКолонкиЗаголовкаКонец = АдресКолонкиЗаголовкаНачало + 7; // +7, т.к. заголовок занимает 8 колонок
	АдресКолонкиЗначенияНачало = АдресКолонкиЗаголовкаКонец + 1;
	
	// В левой колонке карточки разность должна быть равна 20, в правой - 21
	Если СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 20 Тогда
		АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец;
	ИначеЕсли СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 21 Тогда
		АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец - 1;
	КонецЕсли;
	
	АдресСтрокиНачало = СтруктураАдреса.АдресСтрокиНачало; 
	АдресСтрокиКонец = СтруктураАдреса.АдресСтрокиКонец;
	
	//Для заголовка
	НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗаголовкаНачало + ":" 
				+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗаголовкаКонец;
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	Область.Объединить();
	
	//Для значения
	НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗначенияНачало + ":" 
				+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗначенияКонец;
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	Область.Объединить();
	
КонецПроцедуры

Функция СтруктураАдреса(Адрес)
	
	МассивАдресОбласти = СтрРазделить(Адрес, ":");
	Если МассивАдресОбласти.Количество() <> 2 Тогда
		// Это значит, что строка состоит из одной колонки, процедура объединения с такими не работает
		Возврат Неопределено;
	КонецЕсли;
	
	АдресНачало = МассивАдресОбласти[0];
	МассивАдресНачало = СтрРазделить(АдресНачало, "C");
	АдресСтрокиНачало = СтрЗаменить(МассивАдресНачало[0], "R", "");
	АдресКолонкиНачало = МассивАдресНачало[1];
	
	АдресКонец = МассивАдресОбласти[1];
	МассивАдресКонец = СтрРазделить(АдресКонец, "C");
	АдресСтрокиКонец = СтрЗаменить(МассивАдресКонец[0], "R", "");
	АдресКолонкиКонец = МассивАдресКонец[1];

	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("АдресСтрокиНачало", 	Число(АдресСтрокиНачало));
	СтруктураАдреса.Вставить("АдресКолонкиНачало", 	Число(АдресКолонкиНачало));
	СтруктураАдреса.Вставить("АдресСтрокиКонец", 	Число(АдресСтрокиКонец));
	СтруктураАдреса.Вставить("АдресКолонкиКонец", 	Число(АдресКолонкиКонец));
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела)
		
	Если ИмяРаздела = "Классификаторы"
		Или ИмяРаздела = "Комментарий"
		Или ИмяРаздела = "ЦеноваяГруппа"
		Или ИмяРаздела = "вогКоллекцияНоменклатуры"
		Или ИмяРаздела = "НаправлениеДеятельности" Тогда
		Возврат "ДопСтрокаЛево";
	Иначе
		Возврат "ДопСтрокаПраво";
	КонецЕсли;
	
КонецФункции

Функция КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗаполненияЗначения, ТекстЗаполненияРеквизита)
	
	ШиринаКолонки = 2.38;
	КоличествоКолонокВЗначенииРеквизита = 12;
	ШиринаЗначенияРеквизита = КоличествоКолонокВЗначенииРеквизита * ШиринаКолонки;
	ЧислоСтрокЗначения = КоличествоСтрок(ШиринаЗначенияРеквизита, ТекстЗаполненияЗначения);
		
	ЧислоСтрокСвойства = 0;
	Если ЗначениеЗаполнено(ТекстЗаполненияРеквизита) Тогда
		КоличествоКолонокВЗаголовкеРеквизита = 8;
		ШиринаЗаголовкаРеквизита = ШиринаКолонки * КоличествоКолонокВЗаголовкеРеквизита;
		ЧислоСтрокСвойства = КоличествоСтрок(ШиринаЗаголовкаРеквизита, ТекстЗаполненияРеквизита);
	КонецЕсли;
	
	ЧислоСтрок = Макс(ЧислоСтрокЗначения, ЧислоСтрокСвойства);
	
	Если ЧислоСтрок = 0 Тогда 
		Возврат 0;
	КонецЕсли;
	
	Возврат ЧислоСтрок - 1;	
	
КонецФункции

Функция КоличествоСтрок(ШиринаОбласти, Строка)
	
	 Если Не ЗначениеЗаполнено(Строка) Тогда 
		Возврат 0;
	КонецЕсли;
	
	СредняяШиринаСимвола = 0.75;
	
	МассивСлов = СтрРазделить(Строка, " ");
		
	КоличествоСтрок = 1; // = 1, т.к. проверку на заполненность мы сделали выше, а значит одна строка нужна точно
	ТекущаяСтрока = "";
	
	Для Каждого Слово Из МассивСлов Цикл
		
		ТекущаяСтрока = ТекущаяСтрока + Слово + " ";
		Если СтрДлина(ТекущаяСтрока) * СредняяШиринаСимвола > ШиринаОбласти Тогда
			КоличествоСтрок = КоличествоСтрок + 1;
			ТекущаяСтрока = Слово + " ";
		КонецЕсли;
		
	КонецЦикла;	 
	 	 
	Возврат КоличествоСтрок;
	
КонецФункции

Функция РазделВиден(ИмяРаздела, СтруктураВидимости)
	
	Видимость = Истина;
	Если СтруктураВидимости.Свойство(ИмяРаздела) Тогда 
		Видимость = СтруктураВидимости[ИмяРаздела];	
	КонецЕсли;
	
	Возврат Видимость;
	
КонецФункции

Функция ГлаваВидна(ИмяГлавы, СтруктураВидимости, КоличествоДопРеквизитов = 0, КоличествоЗначенийКлассификаторов = 0)
	
	Если ИмяГлавы = "Описание" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "Цены" Тогда
		Возврат РазделВиден("ЦеноваяГруппа", СтруктураВидимости)
					Или РазделВиден("ГиперссылкаПерейтиПрайсЛистКомпании", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "ПланированиеИМаркетинг" Тогда
		Возврат РазделВиден("вогКоллекцияНоменклатуры", СтруктураВидимости)
					Или РазделВиден("НаправлениеДеятельности", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "Классификаторы" Тогда
		Возврат КоличествоЗначенийКлассификаторов > 0 И ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");		
	КонецЕсли;
	
	Если ИмяГлавы = "ОсновныеПараметрыУчета" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "ЕдиницыИзмеренияИОбластьХранения" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "РегламентированныйИФинансовыйУчет" Тогда
		Возврат РазделВиден("СтавкаНДС", СтруктураВидимости)
					Или РазделВиден("НоменклатурнаяГруппа", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "ДополнительныеРеквизиты" Тогда
		Возврат КоличествоДопРеквизитов > 0 И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");		
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

#КонецОбласти	
	
#Область МеханизмыНастройкиРаботыСРеквизитами

// Возвращает имена реквизитов, которые в настоящий момент отключены функциональными опциями.
//
// Возвращаемое значение:
//	Массив, элементы - Строка - имена реквизитов
//
Функция РеквизитыОтключенныеПоФО() Экспорт
	
	Результат = Новый Массив;
	
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Если Не ИспользоватьХарактеристики Тогда
		Результат.Добавить("ИспользоватьХарактеристики");
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание действий с реквизитами номенклатуры в форме номенклатуры в зависимости от типа номенклатуры.
//
// Параметры:
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
//	ИспользоватьСрокГодностиСерии - Булево
//	ВариантОказанияУслуг - ПеречислениеСсылка.ВариантыОказанияУслуг
//
// Возвращаемое значение:
//	ТаблицаЗначений с колонками
//		Реквизит - ОбъектМетаданных:Реквизит - реквизит справочника Номенклатура
//		ДействиеСРеквизитом - Строка - действие
//
Функция ЗависимостьРеквизитовОтТипаНоменклатуры(ТипНоменклатуры,
												ИспользоватьХарактеристики) Экспорт
			
	ЭтоТовар 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоУслуга 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	
	// Сформировать таблицу реквизитов для заполнения.
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("ДействиеСРеквизитом");
	
	Реквизиты = Метаданные.Справочники.Номенклатура.Реквизиты;
	
	//НоваяСтрока = ТаблицаРеквизитов.Добавить();
	//НоваяСтрока.Реквизит            = Реквизиты.вогКоллекцияНоменклатуры;
	//НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар, "Добавить", "Удалить");
	
	//НоваяСтрока = ТаблицаРеквизитов.Добавить();
	//НоваяСтрока.Реквизит            = Реквизиты.вогКоллекцияНоменклатуры;
	//НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар, "Добавить", "Удалить");
	
	//НоваяСтрока = ТаблицаРеквизитов.Добавить();
	//НоваяСтрока.Реквизит            = Реквизиты.вогЕдиницаХраненияОстатков;
	//НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар, "Добавить", "Удалить");
	//
	//НоваяСтрока = ТаблицаРеквизитов.Добавить();
	//НоваяСтрока.Реквизит            = Реквизиты.вогЕдиницаДляОтчетов;
	//НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар, "Добавить", "Удалить");
	
	//НоваяСтрока = ТаблицаРеквизитов.Добавить();
	//НоваяСтрока.Реквизит            = Реквизиты.вогЕдиницаИзмеренияМест;
	//НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар, "Добавить", "Удалить");
	//
	//НоваяСтрока = ТаблицаРеквизитов.Добавить();
	//НоваяСтрока.Реквизит            = Реквизиты.вогУниверсальнаяЕдиница;
	//НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар, "Добавить", "Удалить");
	
	Для Каждого Реквизит из Реквизиты Цикл
		Если ТаблицаРеквизитов.Найти(Реквизит, "Реквизит") = Неопределено Тогда
			НоваяСтрока = ТаблицаРеквизитов.Добавить();
			НоваяСтрока.Реквизит            = Реквизит;
			НоваяСтрока.ДействиеСРеквизитом = "Добавить";
		КонецЕсли;
	КонецЦикла;
		
	Возврат ТаблицаРеквизитов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу обязательных реквизитов.
// Параметры:
//	ВидНоменклатуры - СправочникОбъект.ВидыНоменклатуры - элемент справочника виды номенклатуры
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с обязательными для заполнения и выводимыми при создании реквизитами
//
Функция ТаблицаНастроекРеквизитов()

	ТаблицаНастроекРеквизитов = Новый ТаблицаЗначений;
	ТаблицаНастроекРеквизитов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));	
		
	Возврат ТаблицаНастроекРеквизитов;
	
КонецФункции

// Возвращает таблицу дополнительные реквизиты номенклатуры
//
// Параметры:
//  ВидНоменклатуры	 - СправочникСсылка.ВидыНоменклатуры 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//		* ИмяРеквизита - Строка - наименование свойства
//		* ПредставлениеРеквизита - Строка - заголовок свойства
//		* ЭтоДопРеквизит - Булево - всегда ИСТИНА
//		* ЭтоОбщийРеквизит - Булево - признак, что доп. реквизит входит в набор Справочник_Номенклатура_Общие
//		* ЗаполнятьОбязательно - Булево
//		* НаборСвойств - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - набор свойств, для которого был создан доп. реквизит
//		* Тип - ОписаниеТипов
//
Функция ВсеДополнительныеРеквизиты() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Свойство");
		Таблица.Колонки.Добавить("ЭтоДопРеквизит");
		Возврат Таблица;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка КАК Набор,
	|	ДополнительныеРеквизиты.Свойство.Наименование КАК ИмяРеквизита,
	|	ДополнительныеРеквизиты.Свойство.Заголовок КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ВЫБОР
	|		КОГДА ДополнительныеРеквизиты.Ссылка = &ОбщийНабор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОбщийРеквизит,
	|	ДополнительныеРеквизиты.Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
	|	ДополнительныеРеквизиты.Свойство.НаборСвойств КАК НаборСвойств,
	|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК Тип
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка = &ОбщийНабор";
		
	ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбщийНабор", ОбщийНабор);  	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	 
КонецФункции

Функция ПравоДоступаНаОбъектМетаданныхПоРеквизиту(Право, РеквизитОбъектМетаданных)

	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивтиповДляПроверки = РеквизитОбъектМетаданных.Тип.Типы();
	Для Каждого Тип Из МассивтиповДляПроверки Цикл
		
		Если вогОбщегоНазначения.ЭтоПримитивныйТип(Тип) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных <> Неопределено
			И Не ПравоДоступа(Право, ОбъектМетаданных) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ВидимостьРеквизита(Реквизит, ИмяРеквизита, РеквизитыОтключенныеПоФО, РежимВидимостиПоказатьТолькоВажные,
	ТаблицаОбязательныхРеквизитов)
	
	Если Не ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Возврат ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Реквизит)
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или ТаблицаОбязательныхРеквизитов.Найти(ИмяРеквизита, "Наименование") <> Неопределено)
	Иначе
		Возврат ПравоДоступа("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты[ИмяРеквизита])
				И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Метаданные.Справочники.Номенклатура.Реквизиты[ИмяРеквизита])
				И РеквизитыОтключенныеПоФО.Найти(ИмяРеквизита) = Неопределено
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или ТаблицаОбязательныхРеквизитов.Найти(ИмяРеквизита, "Наименование") <> Неопределено)
	КонецЕсли;
	
КонецФункции

// Возвращает структуру с видимостью элементов.
// Параметры:
//	Объект - СправочникОбъект.Номенклатура - элемент справочника номенклатуры
//	РежимВидимостиПоказатьТолькоВажные - Булево - признак отображения основных реквизитов
//
// Возвращаемое значение:
//	Структура - струтура видимости элементов. Ключ - имя элемента, значения - видимость
//
Функция СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные)
	
	СтруктураВидимости = Новый Структура;
	
	#Область ФункциональныеОпции
	
	ИспользоватьСегментыНоменклатуры = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьСегментацию");
	ИспользоватьКлассификаторы		 = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");
	
	#КонецОбласти
	
	#Область ПризнакиТипаНоменклатуры
	
	ЭтоТовар  = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоУслуга = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	
	#КонецОбласти
	
	РеквизитыОтключенныеПоФО  = РеквизитыОтключенныеПоФО();
	ТаблицаОбязательныхРеквизитов = ТаблицаНастроекРеквизитов();
	
	НастройкиРеквизитов = ЗависимостьРеквизитовОтТипаНоменклатуры(Объект.ТипНоменклатуры,
																Объект.ИспользоватьХарактеристики);
																
	Для Каждого СтрТабл из НастройкиРеквизитов Цикл
		ИмяРеквизита = СтрТабл.Реквизит.Имя;
		СтруктураВидимости.Вставить(ИмяРеквизита, СтрТабл.ДействиеСРеквизитом = "Добавить"
			И ВидимостьРеквизита(ИмяРеквизита,
							ИмяРеквизита,
							РеквизитыОтключенныеПоФО,
							РежимВидимостиПоказатьТолькоВажные,
							ТаблицаОбязательныхРеквизитов));
	КонецЦикла;
		
	#Область Описание
	
	ГиперссылкаПерейтиФайлыВидимость = ПравоДоступа("Просмотр", Метаданные.Справочники.НоменклатураПрисоединенныеФайлы)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	ВидимостьКомандФайлаКартинки = ВидимостьРеквизита("ФайлКартинки",
									"ФайлКартинки",
									РеквизитыОтключенныеПоФО,
									РежимВидимостиПоказатьТолькоВажные,
									ТаблицаОбязательныхРеквизитов);
	
									
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиИзображения", ГиперссылкаПерейтиФайлыВидимость 
		И вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка));
		
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиФайлы"      , ГиперссылкаПерейтиФайлыВидимость);
	
	СтруктураВидимости.Вставить("ДобавитьИзображение", ВидимостьКомандФайлаКартинки);
	СтруктураВидимости.Вставить("ОчиститьИзображение", ВидимостьКомандФайлаКартинки);
	СтруктураВидимости.Вставить("ИзменитьИзображение", ЗначениеЗаполнено(Объект.Ссылка));
	СтруктураВидимости.Вставить("ПросмотретьИзображение", ЗначениеЗаполнено(Объект.Ссылка));
	СтруктураВидимости.Вставить("ВыбратьКартинкуИзПрисоединенныхФайлов", ЗначениеЗаполнено(Объект.Ссылка));
	
	#КонецОбласти

	#Область Цены
			
	ГиперссылкаПерейтиИсторияИзмененияЦенКомпанииВидимость = Не РежимВидимостиПоказатьТолькоВажные
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиИсторияИзмененияЦенКомпании",
		ГиперссылкаПерейтиИсторияИзмененияЦенКомпанииВидимость);
	
	#КонецОбласти

	#Область ПланированиеИМаркетинг
	
	ГиперссылкаПерейтиСегментыВидимость = ИспользоватьСегментыНоменклатуры
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НоменклатураСегмента)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиСегменты", 
		ГиперссылкаПерейтиСегментыВидимость);
	
	#КонецОбласти
	
	#Область Классификаторы
	
	ГиперссылкаПерейтиЗначенияКлассификаторовВидимость = ИспользоватьКлассификаторы
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов)
		И ЗначениеЗаполнено(Объект.Ссылка)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиЗначенияКлассификаторов", 
		ГиперссылкаПерейтиЗначенияКлассификаторовВидимость);
	
	#КонецОбласти
	
	#Область ОсновныеПараметрыУчета
	
	СтруктураВидимости.Вставить("ГруппаОбязательныеПоля", РежимВидимостиПоказатьТолькоВажные);
	
	ИспользоватьХарактеристикиВидимость  = РеквизитыОтключенныеПоФО.Найти("ИспользоватьХарактеристики") = Неопределено
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ИспользоватьХарактеристики", ИспользоватьХарактеристикиВидимость);
	
	ГиперссылкаПерейтиХарактеристикиНоменклатурыВидимость = ИспользоватьХарактеристикиВидимость
		И ПравоДоступа("Просмотр", Метаданные.Справочники.ХарактеристикиНоменклатуры)
		И Объект.ИспользоватьХарактеристики;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиХарактеристикиНоменклатуры", 
		ГиперссылкаПерейтиХарактеристикиНоменклатурыВидимость);
		
	ГиперссылкаПерейтиАналогиВидимость = ЭтоТовар
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.АналогиНоменклатуры)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиАналоги", 
		ГиперссылкаПерейтиАналогиВидимость);
		
	СтруктураВидимости.Вставить("Родитель", 
		Не РежимВидимостиПоказатьТолькоВажные);
		
	// ++ VOG Солодов В.В. 29.10.2019 
	ГиперссылкаПерейтиШтрихкодыНоменклатурыВидимость = ПравоДоступа("Просмотр",
		Метаданные.РегистрыСведений.вогШтрихкодыНоменклатуры)
		И Не РежимВидимостиПоказатьТолькоВажные
		И ЗначениеЗаполнено(Объект.Ссылка);
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиШтрихкодыНоменклатуры", 
		ГиперссылкаПерейтиШтрихкодыНоменклатурыВидимость);
	// -- VOG Солодов В.В. 29.10.2019
	
	#КонецОбласти
	
	#Область ЕдиницыИзмеренияИУсловияХранения
								
	ГиперссылкаПерейтиЕдиницыИзмеренияВидимость = ЭтоТовар
		И ПравоДоступа("Просмотр", Метаданные.Справочники.ЕдиницыИзмерения)
		И Не РежимВидимостиПоказатьТолькоВажные;
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиЕдиницыИзмерения",	
		ГиперссылкаПерейтиЕдиницыИзмеренияВидимость);
		
	#КонецОбласти
	
	#Область РегламентированныйИФинансовыйУчет
	
	СтруктураВидимости.Вставить("СтавкаНДС", Ложь);	
	
	#КонецОбласти
	
	#Область ДополнительныеРеквизиты

	// Установка видимости для дополнительных реквизитов.
	ВсеДополнительныеРеквизитыНоменклатуры = ВсеДополнительныеРеквизиты();
	Для Каждого СтрокаТаблицыДопРеквизитов Из ВсеДополнительныеРеквизитыНоменклатуры Цикл
		ИмяРеквизита     = СтрокаТаблицыДопРеквизитов.ИмяРеквизита;
		ИмяЭлементаФормы = "ДополнительныйРеквизитЗначение_"
			+ СтрЗаменить(?(СтрокаТаблицыДопРеквизитов.ЭтоОбщийРеквизит,
					ВРег(Строка(СтрокаТаблицыДопРеквизитов.Набор.УникальныйИдентификатор())),
					ВРег(Строка(СтрокаТаблицыДопРеквизитов.НаборСвойств.УникальныйИдентификатор()))),
				"-",
				"x")
			+ "_"
			+ СтрЗаменить(ВРег(Строка(СтрокаТаблицыДопРеквизитов.Свойство.УникальныйИдентификатор())), "-", "x");
		
		СтруктураВидимости.Вставить(ИмяЭлементаФормы, ВидимостьРеквизита(СтрокаТаблицыДопРеквизитов,
																			ИмяРеквизита,
																			РеквизитыОтключенныеПоФО,
																			РежимВидимостиПоказатьТолькоВажные,
																			ТаблицаОбязательныхРеквизитов));
		
	КонецЦикла;

	#КонецОбласти
			
	Возврат СтруктураВидимости;
	
КонецФункции

// Возвращает структуру с заголовками элементов.
// Параметры:
//	Объект - СправочникОбъект.Номенклатура - элемент справочника номенклатуры
//	СтруктураВидимостиЭлементов - Структура - струтура видимости элементов
//
// Возвращаемое значение:
//	Структура - струтура заголовков элементов. Ключ - имя элемента, значения - заголовок
//
Функция СтруктураЗаголовковЭлементовФормы(Объект, СтруктураВидимостиЭлементов)
	
	ИмяСправочникаХранилищаФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(Объект.Ссылка);
	ПолноеИмяСправочника = "Справочник." + ИмяСправочникаХранилищаФайлов;
	
	СтруктураЗаголовков = Новый Структура;
			
	#Область ЗаголовокиГиперссылок
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец В(&ВладелецХарактеристики)
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец В(&ВладелецЕдиницыИзмерения)
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК ПрисоедниненныеФайлыОбъектовПоВидам
	|		ПО НоменклатураПрисоединенныеФайлы.Ссылка = ПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл
	|ГДЕ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла = &Номенклатура
	|	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
	|	И ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла.ТипФайла = ЗНАЧЕНИЕ(Перечисление.вогТипыПрисоединенныхФайлов.Изображение)
	|	И ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла.Принадлежность = &Принадлежность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|ГДЕ
	|	НоменклатураПрисоединенныеФайлы.ВладелецФайла = &Номенклатура
	|	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураСегмента.Сегмент
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|	НоменклатураСегмента.Номенклатура = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК ОбъектыЗначенийКлассификаторов
	|ГДЕ
	|	ОбъектыЗначенийКлассификаторов.Объект = &Номенклатура
	|	И ОбъектыЗначенийКлассификаторов.Аналитика В(&ЗначенияИспользуемыхАналитик)
	// ++ VOG Солодов В.В. 29.10.2019 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.вогШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура";
	// -- VOG Солодов В.В. 30.10.2019
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Ссылка);
	Запрос.УстановитьПараметр("Принадлежность", ПолноеИмяСправочника);
	Запрос.УстановитьПараметр("ЗначенияИспользуемыхАналитик", CRM_КлассификаторыВызовСервера.ЗначенияИспользуемыхАналитикКлассификаторов().МассивЗначений);
	
	ВладелецХарактеристики = Новый Массив;
	ВладелецХарактеристики.Добавить(Объект.Ссылка);
	Если ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
		ВладелецХарактеристики.Добавить(Объект.НоменклатурнаяГруппа)
	КонецЕсли;
	Запрос.УстановитьПараметр("ВладелецХарактеристики", ВладелецХарактеристики);
	
	ВладелецЕдиницыИзмерения = Новый Массив;
	ВладелецЕдиницыИзмерения.Добавить(Объект.Ссылка);
	Если ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
		ВладелецЕдиницыИзмерения.Добавить(Объект.НоменклатурнаяГруппа)
	КонецЕсли;
	Запрос.УстановитьПараметр("ВладелецЕдиницыИзмерения", ВладелецЕдиницыИзмерения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборки = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	ВидимостьЭлемента = Ложь;
				
	Если РазделВиден("ГиперссылкаПерейтиХарактеристикиНоменклатуры", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[0].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Список'") + " (" + Количество + ")",,,,"ХарактеристикиНоменклатуры");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиХарактеристикиНоменклатуры", ЗаголовокГиперссылки);
	КонецЕсли;
		
	Если РазделВиден("ГиперссылкаПерейтиЕдиницыИзмерения", СтруктураВидимостиЭлементов) Тогда 
		Количество = Выборки[1].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Список'") + " (" + Количество + ")",,,,"ЕдиницыИзмерения");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиЕдиницыИзмерения", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиИзображения", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[2].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Изображения'") + " (" + Количество + ")",,,,"Файлы");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиИзображения", ЗаголовокГиперссылки);		
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[3].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Все файлы'") + " (" + Количество + ")",,,,"Файлы");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиФайлы", ЗаголовокГиперссылки);		
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиСегменты", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[4].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Сегменты'") + " (" + Количество + ")",,,,"Сегменты");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиСегменты", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиЗначенияКлассификаторов", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[5].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Значения классификаторов'") + " (" + Количество + ")",,,,"ЗначенияКлассификаторов");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиЗначенияКлассификаторов", ЗаголовокГиперссылки);
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 29.10.2019 
	Если РазделВиден("ГиперссылкаПерейтиШтрихкодыНоменклатуры", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[6].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Штрихкоды'") + " (" + Количество + ")",,,,"ШтрихкодыНоменклатурыКоличество");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиШтрихкодыНоменклатуры", ЗаголовокГиперссылки);
	КонецЕсли;
	// -- VOG Солодов В.В. 29.10.2019
	
	#КонецОбласти
	
	Возврат СтруктураЗаголовков;

КонецФункции

// ++ VOG Солодов В.В. 29.10.2019 task 758
Функция ПолучитьСтруктуруДанныхНаименования(НоменклатураСсылка, ПоBSU)
	
	СтруктураДанных = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторЕдиницИзмерения.Ссылка КАК Ссылка,
		|	КлассификаторЕдиницИзмерения.Код КАК Код
		|ПОМЕСТИТЬ ВТ_КлассификаторЕдиницИзмерения
		|ИЗ
		|	Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		|ГДЕ
		|	КлассификаторЕдиницИзмерения.Код В (""005"", ""875"", ""796"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕдиницыИзмерения.Владелец КАК НоменклатураСсылка,
		|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
		|	ЕдиницыИзмерения.ЕдиницаПоКлассификатору КАК ЕдиницаПоКлассификатору,
		|	ЕдиницыИзмерения.Содержит КАК Содержит,
		|	ЕдиницыИзмерения.Коэффициент КАК Коэффициент,
		|	ЕдиницыИзмерения.Длина КАК Длина,
		|	ЕдиницыИзмерения.Ширина КАК Ширина,
		|	ВТ_КлассификаторЕдиницИзмерения.Код КАК Код
		|ПОМЕСТИТЬ ВТ_ЕдиницыИзмерения
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлассификаторЕдиницИзмерения КАК ВТ_КлассификаторЕдиницИзмерения
		|		ПО ЕдиницыИзмерения.ЕдиницаПоКлассификатору = ВТ_КлассификаторЕдиницИзмерения.Ссылка
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА &ПоBSU
		|				И Номенклатура.НаправлениеДеятельности = &НаправлениеПлитка
		|			ТОГДА """"
		|		ИНАЧЕ Номенклатура.Артикул
		|	КОНЕЦ КАК Артикул,
		|	ВЫБОР
		|		КОГДА &ПоBSU
		|				И Номенклатура.НаправлениеДеятельности = &НаправлениеПлитка
		|			ТОГДА ВЫРАЗИТЬ(вогНоменклатурныеПозиции.Комментарий КАК СТРОКА(250))
		|		ИНАЧЕ ВЫРАЗИТЬ(Номенклатура.Комментарий КАК СТРОКА(250))
		|	КОНЕЦ КАК Комментарий,
		|	вогВидыМатериалов.НаименованиеСокращенное КАК Материал,
		|	вогТипыНоменклатуры.НаименованиеСокращенное КАК ТипНоменклатурыСокр,
		|	вогКоллекцииПлитки.Наименование КАК Коллекция,
		|	вогБренды.Наименование КАК Бренд,
		|	вогДизайныНоменклатуры.Сорт КАК Сорт,
		|	вогНоменклатурныеПозиции.ЕдиницаПродажиПлитка КАК ЕдиницаПродажиПлитка,
		|	Номенклатура.КоличествоСоставныхЭлементов КАК КоличествоСоставныхЭлементов,
		|	вогДизайныНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
		|	вогДизайныНоменклатуры.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ПОМЕСТИТЬ ВТ_Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНоменклатурныеПозиции КАК вогНоменклатурныеПозиции
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогДизайныНоменклатуры КАК вогДизайныНоменклатуры
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогТипыНоменклатуры КАК вогТипыНоменклатуры
		|				ПО вогДизайныНоменклатуры.ТипНоменклатуры = вогТипыНоменклатуры.Ссылка
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогБренды КАК вогБренды
		|				ПО вогДизайныНоменклатуры.Бренд = вогБренды.Ссылка
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогКоллекцииПлитки КАК вогКоллекцииПлитки
		|				ПО вогДизайныНоменклатуры.КоллекцияПлитки = вогКоллекцииПлитки.Ссылка
		|			ПО вогНоменклатурныеПозиции.Дизайн = вогДизайныНоменклатуры.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогВидыМатериалов КАК вогВидыМатериалов
		|			ПО вогНоменклатурныеПозиции.МатериалПлитка = вогВидыМатериалов.Ссылка
		|		ПО Номенклатура.НоменклатурнаяПозиция = вогНоменклатурныеПозиции.Ссылка
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Номенклатура.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ВТ_Номенклатура.ЕдиницаПродажиПлитка В (&ВидыПлитки)
		|			ТОГДА ВТ_ЕдиницыИзмерения.Коэффициент
		|		ИНАЧЕ ВТ_ЕдиницыИзмерения.Содержит
		|	КОНЕЦ КАК Содержит
		|ПОМЕСТИТЬ ВТ_НоменклатураПаллета
		|ИЗ
		|	ВТ_Номенклатура КАК ВТ_Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЕдиницыИзмерения КАК ВТ_ЕдиницыИзмерения
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Номенклатура.ЕдиницаПродажиПлитка В (&ВидыПлитки)
		|					ТОГДА ВТ_ЕдиницыИзмерения.Код = ""005""
		|				ИНАЧЕ ВТ_ЕдиницыИзмерения.Код = ""875""
		|			КОНЕЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Номенклатура.Ссылка КАК Ссылка,
		|	ВТ_ЕдиницыИзмерения.Длина КАК Длина,
		|	ВТ_ЕдиницыИзмерения.Ширина КАК Ширина
		|ПОМЕСТИТЬ ВТ_НоменклатураШТ
		|ИЗ
		|	ВТ_Номенклатура КАК ВТ_Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЕдиницыИзмерения КАК ВТ_ЕдиницыИзмерения
		|		ПО (ВТ_ЕдиницыИзмерения.Код = ""796"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Номенклатура.Ссылка КАК Ссылка,
		|	ВТ_Номенклатура.Артикул КАК Артикул,
		|	ВТ_Номенклатура.Материал КАК Материал,
		|	ВТ_Номенклатура.Коллекция КАК Коллекция,
		|	ВТ_Номенклатура.Бренд КАК Бренд,
		|	ВТ_Номенклатура.ТипНоменклатуры КАК Тип,
		|	ВТ_Номенклатура.ТипНоменклатурыСокр КАК ТипСокр,
		|	ВТ_Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ВТ_Номенклатура.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ВТ_Номенклатура.Комментарий КАК Комментарий,
		|	ВТ_Номенклатура.Сорт КАК Сорт,
		|	ВЫБОР
		|		КОГДА ВТ_Номенклатура.ЕдиницаПродажиПлитка В (ЗНАЧЕНИЕ(Справочник.вогВидыПлитки.Основная), ЗНАЧЕНИЕ(Справочник.вогВидыПлитки.Дополнительная), ЗНАЧЕНИЕ(Справочник.вогВидыПлитки.Декорированная))
		|			ТОГДА ""Плита""
		|		КОГДА ВТ_Номенклатура.ЕдиницаПродажиПлитка = ЗНАЧЕНИЕ(Справочник.вогВидыПлитки.Ступень)
		|			ТОГДА ""Ступень""
		|		КОГДА ВТ_Номенклатура.ЕдиницаПродажиПлитка = ЗНАЧЕНИЕ(Справочник.вогВидыПлитки.Штучный)
		|			ТОГДА ""Декор""
		|		КОГДА ВТ_Номенклатура.ЕдиницаПродажиПлитка = ЗНАЧЕНИЕ(Справочник.вогВидыПлитки.Панно)
		|			ТОГДА ""Панно.из.""
		|		КОГДА ВТ_Номенклатура.ЕдиницаПродажиПлитка = ЗНАЧЕНИЕ(Справочник.вогВидыПлитки.Рамка)
		|			ТОГДА ""Декор.рамка""
		|		КОГДА ВТ_Номенклатура.ЕдиницаПродажиПлитка = ЗНАЧЕНИЕ(Справочник.вогВидыПлитки.Вставка)
		|			ТОГДА ""Декор.вставка""
		|		КОГДА ВТ_Номенклатура.ЕдиницаПродажиПлитка = ЗНАЧЕНИЕ(Справочник.вогВидыПлитки.Бордюр)
		|			ТОГДА ""Бордюр""
		|		КОГДА ВТ_Номенклатура.ЕдиницаПродажиПлитка = ЗНАЧЕНИЕ(Справочник.вогВидыПлитки.Мозаика)
		|			ТОГДА ""Мозаика""
		|		КОГДА ВТ_Номенклатура.ЕдиницаПродажиПлитка = ЗНАЧЕНИЕ(Справочник.вогВидыПлитки.Плинтус)
		|			ТОГДА ""Плинтус""
		|		КОГДА ВТ_Номенклатура.ЕдиницаПродажиПлитка = ЗНАЧЕНИЕ(Справочник.вогВидыПлитки.СпецЭлемент)
		|			ТОГДА ""Спец.элемент""
		|		КОГДА ВТ_Номенклатура.ЕдиницаПродажиПлитка = ЗНАЧЕНИЕ(Справочник.вогВидыПлитки.СтупеньДек)
		|			ТОГДА ""Ступень.дек.""
		|	КОНЕЦ КАК ВидПлитки,
		|	ВЫБОР
		|		КОГДА ВТ_Номенклатура.ЕдиницаПродажиПлитка = ЗНАЧЕНИЕ(Справочник.вогВидыПлитки.Панно)
		|			ТОГДА ВТ_Номенклатура.КоличествоСоставныхЭлементов
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КолвоСостЭлементов,
		|	ЕСТЬNULL(ВТ_НоменклатураПаллета.Содержит, 0) КАК Содержит,
		|	ЕСТЬNULL(ВТ_НоменклатураШТ.Длина, 0) * 100 КАК Длина,
		|	ЕСТЬNULL(ВТ_НоменклатураШТ.Ширина, 0) * 100 КАК Ширина
		|ИЗ
		|	ВТ_Номенклатура КАК ВТ_Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураПаллета КАК ВТ_НоменклатураПаллета
		|		ПО ВТ_Номенклатура.Ссылка = ВТ_НоменклатураПаллета.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураШТ КАК ВТ_НоменклатураШТ
		|		ПО ВТ_Номенклатура.Ссылка = ВТ_НоменклатураШТ.Ссылка";
	
	МассивВидовПлитки = Новый Массив;
	МассивВидовПлитки.Добавить(Справочники.вогВидыПлитки.Основная);
	МассивВидовПлитки.Добавить(Справочники.вогВидыПлитки.Дополнительная);
	МассивВидовПлитки.Добавить(Справочники.вогВидыПлитки.Декорированная);
	МассивВидовПлитки.Добавить(Справочники.вогВидыПлитки.Ступень);
	
	Запрос.УстановитьПараметр("Ссылка", 			НоменклатураСсылка);
	Запрос.УстановитьПараметр("ВидыПлитки", 		МассивВидовПлитки);
	Запрос.УстановитьПараметр("НаправлениеПлитка", 	Справочники.НаправленияДеятельности.Плитка);
	Запрос.УстановитьПараметр("ПоBSU", 				ПоBSU);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Для Каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		СтруктураДанных.Вставить(КолонкаРезультата.Имя);
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ВыборкаДетальныеЗаписи);
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции // -- VOG Солодов В.В. 29.10.2019

#КонецОбласти

#КонецЕсли

//-вог
