
// +CRM
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Попытка
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаНайти.Видимость = Ложь;
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаОтменитьПоиск.Видимость = Ложь;
	Исключение
	КонецПопытки;
	
	// +++ VOG Кулаков П.Л. 18.09.2020 CRM-893
	Если Параметры.Свойство("Ротация") И Параметры.Ротация Тогда
		Элементы.Дизайн.Видимость = Истина;
		Элементы.Бренд.Видимость = Истина;
		Элементы.Производитель.Видимость = Истина;
		Элементы.ТипНоменклатурыОбои.Видимость = Истина;
		Элементы.ТипНоменклатуры.Видимость = Ложь;
		Элементы.ЕдиницаИзмерения.Видимость = Ложь;
		Элементы.СтильРисункаОбои.Видимость = Истина;
		Элементы.СтатусПродажПоХолдингу.Видимость = Истина;
		Элементы.СтатусПродажПоБренду.Видимость = Истина;
		//Элементы.СтатусНеликвида.Видимость = Истина;
		Элементы.СтадияЖизненногоЦикла.Видимость = Истина;
		
		//+++ VOG Ульянов И.В. CRM-931
		// ++ VOG Солодов В.В. 02.09.2021 DEV-906
		ТекущийАртикул 		= Неопределено;
		НесколькоАртикулов 	= Ложь;
		
		Если ТипЗнч(Параметры.ТекущийАртикул) = Тип("Массив")
			И Параметры.ТекущийАртикул.Количество() > 0 Тогда
			
			ТекущийАртикул 		= Параметры.ТекущийАртикул[0];
			НесколькоАртикулов 	= Истина;
			
		ИначеЕсли ЗначениеЗаполнено(Параметры.ТекущийАртикул) Тогда
			ТекущийАртикул 		= Параметры.ТекущийАртикул;
		КонецЕсли;
		
		Элементы.Список.ТекущаяСтрока = ТекущийАртикул;
		// До изменения
		//Элементы.Список.ТекущаяСтрока = Параметры.ТекущийАртикул;
		// -- VOG Солодов В.В. 02.09.2021 DEV-906
		
		ЭлементОформленияСписок = УсловноеОформление.Элементы.Добавить();		
		ЭлементОтбора = ЭлементОформленияСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Ссылка");
		// ++ VOG Солодов В.В. 02.09.2021 DEV-906
		Если НесколькоАртикулов Тогда
			
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			
			СписокАртикулов = Новый СписокЗначений;
			СписокАртикулов.ЗагрузитьЗначения(Параметры.ТекущийАртикул);
			
			ЭлементОтбора.ПравоеЗначение = СписокАртикулов;
			
		Иначе
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекущийАртикул;
		КонецЕсли;
		// До изменения
		//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		//ЭлементОтбора.ПравоеЗначение = Параметры.ТекущийАртикул;
		// -- VOG Солодов В.В. 02.09.2021 DEV-906
		ЭлементОтбора.Использование = Истина;				
		ЭлементОформленияСписок.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаКорректногоКонтрагентаВДокументе);
		
		ПолеОформления = ЭлементОформленияСписок.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Наименование");
		ПолеОформления.Использование = Истина;		
		
		ПолеОформления = ЭлементОформленияСписок.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Код");
		ПолеОформления.Использование = Истина;		
		
		ПолеОформления = ЭлементОформленияСписок.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Артикул");
		ПолеОформления.Использование = Истина;		
		
		ПолеОформления = ЭлементОформленияСписок.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Дизайн");
		ПолеОформления.Использование = Истина;		
		
		ПолеОформления = ЭлементОформленияСписок.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Бренд");
		ПолеОформления.Использование = Истина;		
		
		ПолеОформления = ЭлементОформленияСписок.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Коллекции");
		ПолеОформления.Использование = Истина;		
		
		ПолеОформления = ЭлементОформленияСписок.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Производитель");
		ПолеОформления.Использование = Истина;		
		
		ПолеОформления = ЭлементОформленияСписок.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТипНоменклатурыОбои");
		ПолеОформления.Использование = Истина;		
		
		ПолеОформления = ЭлементОформленияСписок.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СтильРисункаОбои");
		ПолеОформления.Использование = Истина;		
		
		ПолеОформления = ЭлементОформленияСписок.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СтатусПродажПоХолдингу");
		ПолеОформления.Использование = Истина;		
		
		ПолеОформления = ЭлементОформленияСписок.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СтатусПродажПоБренду");
		ПолеОформления.Использование = Истина;		
		
		ПолеОформления = ЭлементОформленияСписок.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СтадияЖизненногоЦикла");
		ПолеОформления.Использование = Истина;		
		
		ПолеОформления = ЭлементОформленияСписок.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НоменклатурнаяГруппа");
		ПолеОформления.Использование = Истина;
		//--- VOG Ульянов И.В. CRM-931
		
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	НовЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Бренд");
	НовЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокБрендов = Новый СписокЗначений;
	СписокБрендов.Добавить(Справочники.вогБренды.ПолучитьСсылку(Новый УникальныйИдентификатор("8ec9649f-68c5-11e3-b895-005056ac8899")));
	СписокБрендов.Добавить(Справочники.вогБренды.ПолучитьСсылку(Новый УникальныйИдентификатор("052a66d8-68e2-11e3-b895-005056ac8899")));
	НовЭлементОтбора.ПравоеЗначение = СписокБрендов;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	КоличествоНайденных = 0;
	СписокДляВыбора = CRM_СтрокаПоискаСписокВыбора;
	Для каждого ЭлементСписка Из СписокДляВыбора Цикл
		Если ВРег(Лев(ЭлементСписка, 6)) = "[ПОИСК" Тогда
			Продолжить;
		КонецЕсли;
		Если ЛЕВ(ВРег(ЭлементСписка.Значение),СтрДлина(СокрЛП(Текст))) = ВРег(СокрЛП(Текст)) Тогда
			 ДанныеВыбора.Добавить(ЭлементСписка.Значение,, Истина);
			 КоличествоНайденных = КоличествоНайденных + 1;
			 Если КоличествоНайденных > 7 Тогда
				 Прервать;
			 КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() = 0 Тогда
		ДанныеВыбора = Неопределено;
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(CRM_СтрокаПоиска) Тогда
		CRM_СтрокаПоиска = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(CRM_СтрокаПоиска) Тогда
		Элементы.ГруппаКнопок_Поиск_Полнотекстовый.Видимость = Истина;
		Элементы.ГруппаКнопок_Поиск_Стандартный.Видимость = Ложь;
	Иначе
		Элементы.ГруппаКнопок_Поиск_Стандартный.Видимость = Истина;
		Элементы.ГруппаКнопок_Поиск_Полнотекстовый.Видимость = Ложь;
	КонецЕсли;
	Элементы.КнопкаПоиск_ПолнотекстовыйОтмена.Доступность = ЗначениеЗаполнено(CRM_СтрокаПоиска);
	
	ВыполнитьПП();
	
	Элементы.CRM_ОснованиеВыбора.Видимость = ЗначениеЗаполнено(CRM_ОснованиеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокДляВыбора = Новый СписокЗначений();
	СписокДляВыбора.Добавить("[ПоискПоПолномуНазванию]", НСтр("ru = '[Поиск по полному названию]'"));
	СписокДляВыбора.Добавить("[ПоискПоПодстроке]", НСтр("ru = '[Поиск по подстроке]'"));
	ВыбранноеЗначение = Неопределено;
	ОписаниеОповещения = Новый ОписаниеОповещения("СтрокаПоискаНачалоВыбораЗавершение", ЭтотОбъект, Элемент);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДляВыбора, Элемент, ?(CRM_ПоискПоПодстроке, СписокДляВыбора[1], СписокДляВыбора[0]));
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНачалоВыбораЗавершение(ВыбранноеЗначение, Элемент) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Элементы.СтрокаПоиска.ПодсказкаВвода = ВыбранноеЗначение.Представление;
		Элементы.СтрокаПоиска.Подсказка = ВыбранноеЗначение.Представление;
		Если ВыбранноеЗначение.Значение = "[ПоискПоПодстроке]" Тогда
			CRM_ПоискПоПодстроке = Истина;
		Иначе
			CRM_ПоискПоПодстроке = Ложь;
		КонецЕсли;
		СтрокаПоискаПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Поиск_Найти(Команда)
	СтрокаПоискаПриИзменении(Элементы.СтрокаПоиска);
КонецПроцедуры

&НаКлиенте
Процедура Поиск_Отмена(Команда)
	CRM_СтрокаПоиска = "";
	СтрокаПоискаПриИзменении(Элементы.СтрокаПоиска);
КонецПроцедуры

&НаКлиенте
// Заполнить строку основания включения партнера в список.
Процедура ЗаполнитьСтрокуОснования()

	Основание = CRM_Основания.НайтиСтроки(Новый Структура("Номенклатура",Элементы.Список.ТекущаяСтрока));
	Если Основание.Количество() = 0 Тогда
		CRM_ОснованиеВыбора = "";
	Иначе
		CRM_ОснованиеВыбора = Основание[0].Основание;
	КонецЕсли;

	Элементы.CRM_ОснованиеВыбора.Видимость = ЗначениеЗаполнено(CRM_ОснованиеВыбора);
	
КонецПроцедуры

// Выполняет полнотекстовый поиск.
&НаКлиенте
Процедура ВыполнитьПП()
	
	Элементы.ДекорацияИндексППНеактуален.Заголовок = "";
	
	Если CRM_СтрокаПоиска <> "" Тогда
		
		ПроверитьИндексППД();

	Иначе
		CRM_РасширенныйПоиск = Ложь;
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ссылка");
		CRM_ОснованиеВыбора = "";
		Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	КонецЕсли; 	
	
КонецПроцедуры // 

&НаКлиенте
// Проверяет актуальность индекса и, в случае необходимости, актуализирует его.
//
Процедура ПроверитьИндексППД()
	
	Если Не CRM_ИндексППДАктуален Тогда
		
		Элементы.ДекорацияИндексППНеактуален.Заголовок = НСтр("ru = 'Индекс полнотекстового поиска неактуален'");
		
	КонецЕсли;
	
	ВыполнитьПолнотекстовыйПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолнотекстовыйПоиск()

	 	ТекстОшибки = НайтиНоменклатуруПолнотекстовыйПоиск();
		Если ТекстОшибки = Неопределено Тогда
			CRM_РасширенныйПоиск = Истина;
			ЗаполнитьСтрокуОснования();
		Иначе
			Если НЕ ТекстОшибки = НСтр("ru = 'Ничего не найдено'") Тогда
				ПоказатьОповещениеПользователя(ТекстОшибки);
			Иначе
				Если Не ЗначениеЗаполнено(Элементы.ДекорацияИндексППНеактуален.Заголовок) Тогда
					Элементы.ДекорацияИндексППНеактуален.Заголовок = ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

КонецПроцедуры // ()

&НаКлиенте
Процедура ДекорацияИндексППНеактуаленНажатие(Элемент)
	ПодключитьОбработчикОжидания("ОбновлениеИндексаПДД",0.2,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИндексаПДД()
	
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска ...'"));
	ОбновитьИндексППД();
	
	CRM_ИндексППДАктуален = Истина;
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено...'")); 
	
	Элементы.ДекорацияИндексППНеактуален.Заголовок = "";
	
	Если CRM_СтрокаПоиска <> "" Тогда
		ВыполнитьПолнотекстовыйПоиск();
	КонецЕсли;
	
КонецПроцедуры // () 

&НаСервереБезКонтекста
// Обновить индекс полнотекстового поиска.
//
Процедура ОбновитьИндексППД()
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ПолнотекстовыйПоиск.ОбновитьИндекс();
	Исключение
	КонецПопытки;	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция НайтиНоменклатуруПолнотекстовыйПоиск()
	
	CRM_ИндексППДАктуален = ПолнотекстовыйПоиск.ИндексАктуален();
	Если Не CRM_ИндексППДАктуален Тогда
		Элементы.ДекорацияИндексППНеактуален.Заголовок = НСтр("ru = 'Индекс полнотекстового поиска неактуален'");
	КонецЕсли;
	
	Возврат CRM_НоменклатураСервер.НайтиНоменклатуруПолнотекстовыйПоиск(ЭтотОбъект)
	
КонецФункции // ()

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если CRM_РасширенныйПоиск Тогда
		ЗаполнитьСтрокуОснования();
	Иначе
		ОснованиеВыбора = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ДействиеПриСозданииНовойНоменклатуры(НовыйОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПриСозданииНовойНоменклатуры(НоваяНоменклатура)
	
	Если CRM_РасширенныйПоиск Тогда
		CRM_РасширенныйПоиск = Ложь;
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ссылка");
		
		CRM_СтрокаПоиска = "";
		CRM_ОснованиеВыбора = "";
		Элементы.CRM_ОснованиеВыбора.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Список.ТекущаяСтрока = НоваяНоменклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеВыбораНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Основание = CRM_Основания.НайтиСтроки(Новый Структура("Номенклатура",Элементы.Список.ТекущаяСтрока));
	Если Основание.Количество() > 0 Тогда
		ПоказатьЗначение(, Основание[0].Ссылка);
	КонецЕсли;

КонецПроцедуры



&НаКлиенте 
Процедура УстановитьОтборСписка(ПолеОтбора,Значение)
	
	Поле = Новый ПолеКомпоновкиДанных(ПолеОтбора);
	ЭлементыДляУдаления = Новый Массив;
	Для каждого Элемент из Список.Отбор.Элементы цикл
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") и Элемент.ЛевоеЗначение = Поле тогда
			ЭлементыДляУдаления.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлДляУдаления из ЭлементыДляУдаления цикл
		Список.Отбор.Элементы.Удалить(ЭлДляУдаления);
	КонецЦикла;
	Если ЗначениеЗаполнено(Значение) тогда
		НовыйЭлемент = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.ЛевоеЗначение = Поле;
		НовыйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлемент.ПравоеЗначение = Значение;
		НовыйЭлемент.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборБрендПриИзменении(Элемент)
	УстановитьОтборСписка("Бренд",ОтборБренд);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПроизводительПриИзменении(Элемент)
	УстановитьОтборСписка("Производитель",ОтборПроизводитель);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтильПриИзменении(Элемент)
	
	УстановитьОтборСписка("СтильРисункаОбои",ОтборСтиль);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКоллекцияПриИзменении(Элемент)
	
	Значение = Строка(ОтборКоллекция);
	Поле = Новый ПолеКомпоновкиДанных("Коллекции");
	ЭлементыДляУдаления = Новый Массив;
	Для каждого Элемент из Список.Отбор.Элементы цикл
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") и Элемент.ЛевоеЗначение = Поле тогда
			ЭлементыДляУдаления.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлДляУдаления из ЭлементыДляУдаления цикл
		Список.Отбор.Элементы.Удалить(ЭлДляУдаления);
	КонецЦикла;
	Если ЗначениеЗаполнено(Значение) тогда
		НовыйЭлемент = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.ЛевоеЗначение = Поле;
		НовыйЭлемент.ВидСравнения=ВидСравненияКомпоновкиДанных.Содержит;
		НовыйЭлемент.ПравоеЗначение = Значение;
		НовыйЭлемент.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусБрендПриИзменении(Элемент)
	
	УстановитьОтборСписка("СтатусПродажПоБренду",ОтборСтатусБренд);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусХолдингПриИзменении(Элемент)
	
	УстановитьОтборСписка("СтатусПродажПоХолдингу",ОтборСтатусХолдинг);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЖЦПриИзменении(Элемент)
	
	УстановитьОтборСписка("СтадияЖизненногоЦикла",ОтборЖЦ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипПриИзменении(Элемент)
	
	Если ОтборТип>0 тогда
		УстановитьОтборСписка("ТипНоменклатурыОбои",ОтборТип);
	Иначе
		УстановитьОтборСписка("ТипНоменклатурыОбои",ОтборТип);
	КонецЕсли;
	
КонецПроцедуры

// -CRM