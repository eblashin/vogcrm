
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,, Ложь);
	НастроитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

//+вог

&НаСервере
Процедура НастроитьЭлементыДополнительныхРеквизитов()
	
	Для Каждого Элемент Из Элементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы Цикл
		
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			
			Если Элемент.МногострочныйРежим <> Истина Тогда
				
				Элемент.РастягиватьПоГоризонтали = Ложь;
				
			Иначе
				
				Элемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Лево;
				Элемент.РастягиватьПоВертикали   = Ложь;
				Элемент.РастягиватьПоГоризонтали = Истина;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
//-вог


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

&НаСервере
// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьИДоступность(ПриИзмененииТипаНоменклатуры = Ложь)
	
	Если ПриИзмененииТипаНоменклатуры Тогда
											
		Объект.ИспользоватьХарактеристики = Ложь;
		
		Если Элементы.НаправлениеДеятельности.Видимость Тогда
			Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои;
		КонецЕсли;
		
		Если Элементы.СтавкаНДС.Видимость Тогда
			Объект.СтавкаНДС = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию().СтавкаНДСПоУмолчанию;
		КонецЕсли;	
		
		НастроитьФорму();
		
	КонецЕсли;	
	
//START Кайдашов 10/09/19 640		
	Если Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои тогда
		Элементы.ГруппаЗаголовокДляОбоев.Видимость = Истина;
		Элементы.СворачиваемаяГруппаРеквизитыОбои.Видимость = Истина;
		Элементы.ТипНоменклатуры.Видимость = Ложь;
		//Элементы.ДатаСнятия.Видимость = ЛожЬ; // VOG Солодов В.В. 28.10.2019 task 791
		Элементы.ЦветПроизводителя.Видимость = Ложь;
		//Элементы.вогПроизводитель1.Видимость = Ложь; // VOG Солодов В.В. 20.11.2019 task 901
		Элементы.ЗаводскойАртикул.Видимость = Ложь; 
		// ++ VOG Солодов В.В. 16.10.2019 task 759
		Элементы.ГруппаЗаголовокДляПлитки.Видимость 			= Ложь;
		Элементы.СворачиваемаяГруппаРеквизитыПлитка.Видимость 	= Ложь;
		Элементы.ГруппаЦвета.Видимость 							= Истина;
		// До изменения
		//Элементы.Сорт.Видимость = Ложь;
		// ++ VOG Солодов В.В. 27.10.2020
		Элементы.ГруппаКоллекции.Видимость 						= Истина;
		// -- VOG Солодов В.В. 27.10.2020
	ИначеЕсли Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
		Элементы.ГруппаЗаголовокДляОбоев.Видимость 				= Ложь;
		Элементы.СворачиваемаяГруппаРеквизитыОбои.Видимость 	= Ложь;
		Элементы.ЦветПроизводителя.Видимость 					= Истина;
		//Элементы.вогПроизводитель1.Видимость 					= Истина; // VOG Солодов В.В. 20.11.2019 task 901
		Элементы.ЗаводскойАртикул.Видимость 					= Истина;
		Элементы.ГруппаЗаголовокДляПлитки.Видимость 			= Истина;
		Элементы.СворачиваемаяГруппаРеквизитыПлитка.Видимость 	= Истина;
		Элементы.ГруппаЦвета.Видимость 							= Ложь;
		// -- VOG Солодов В.В. 16.10.2019
		// ++ VOG Солодов В.В. 27.10.2020
		Элементы.ГруппаКоллекции.Видимость 						= Ложь;
		// -- VOG Солодов В.В. 27.10.2020
	Иначе
		Элементы.ГруппаЗаголовокДляОбоев.Видимость = Ложь;
		Элементы.СворачиваемаяГруппаРеквизитыОбои.Видимость = Ложь;
		Элементы.ЦветПроизводителя.Видимость = Истина;
		//Элементы.вогПроизводитель1.Видимость = Истина; // VOG Солодов В.В. 20.11.2019 task 901
		Элементы.ЗаводскойАртикул.Видимость = Истина;
		// ++ VOG Солодов В.В. 16.10.2019 task 759
		Элементы.ГруппаЗаголовокДляПлитки.Видимость 			= Ложь;
		Элементы.СворачиваемаяГруппаРеквизитыПлитка.Видимость 	= Ложь;
		Элементы.ГруппаЦвета.Видимость 							= Ложь;
		// До изменения
		//Элементы.Сорт.Видимость = Истина;
		// -- VOG Солодов В.В. 16.10.2019
		// ++ VOG Солодов В.В. 27.10.2020
		Элементы.ГруппаКоллекции.Видимость 						= Ложь;
		// -- VOG Солодов В.В. 27.10.2020
	КонецЕсли;
//END Кайдашов 640 		

    // +++ VOG Кулаков П.Л. 01.09.2020 CRM-883
	Если ЗначениеЗаполнено(Объект.НоменклатурнаяПозиция) 
			И Объект.НоменклатурнаяПозиция.ЕдиницаПродажиПлитка = Справочники.вогВидыПлитки.Мозаика Тогда
		Элементы.ГруппаСоставМозаики.Видимость = Истина;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	Элементы.КоличествоСоставныхЭлементов.Видимость 			= Объект.Панно;
	Элементы.ДлинаСоставногоЭлемента.Видимость 					= Объект.Панно;
	Элементы.ШиринаСоставногоЭлемента.Видимость 				= Объект.Панно;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

// +CRM

&НаСервере
Процедура CRM_УправлениеВидимостьюРамкиКартинки()
	Если ЗначениеЗаполнено(АдресКартинки) Тогда
		Элементы.ФайлКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);		
	Иначе
		Элементы.ФайлКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);		
	КонецЕсли;		
КонецПроцедуры

// -CRM

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	
	// +CRM
	CRM_ВесПозиции = РегистрыСведений.CRM_ВесаПозицийНоменклатуры.ПолучитьВесПозиции(Объект.Ссылка);
	// -CRM
	// Установка значения реквизита АдресКартинки.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не Объект.ФайлКартинки.Пустая() Тогда
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
			// +CRM
			Если ПустаяСтрока(АдресКартинки) Тогда
				ВывестиНедоступностьКартинки();
			КонецЕсли;	
			// -CRM
		Иначе
			АдресКартинки = "";
		КонецЕсли;
	// +CRM		
	CRM_УправлениеВидимостьюРамкиКартинки();	
	// -CRM	
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	//+вог
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		//Режим копирования
		Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаРеквизитыОбъекта;
		НастройкаВидимостиФормы = "ПоказатьВсе";
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//Режим редактирования
		Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаКарточкаОбъекта;
		НастройкаВидимостиФормы = "СвернутьВсеГруппы";
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		
		СкрытьРаскрытьВсеГруппы(Истина);
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость=Ложь;
		
		Элементы.НастройкаВидимостиФормы.СписокВыбора.Удалить(0);
	Иначе	
		//Режим создания
		Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаРеквизитыОбъекта;
		НастройкаВидимостиФормы = "ПоказатьОсновные";
		РежимВидимостиПоказатьТолькоВажные = Истина;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
	КонецЕсли;
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	// ++ VOG Солодов В.В. 11.06.2019 task 141
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект, Элементы.КоманднаяПанельФормы);
	// До изменения
	//ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект); 
	// -- VOG Солодов В.В. 11.06.2019
		
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	НастроитьВидимостьСворачиваемойГруппы("ДополнительныеРеквизиты");  		
	//Иначе
	//	НастройкаВидимостиКарточкиОбъекта       = "ПоказатьЗаполненные";
	//	РежимВидимостиПоказатьТолькоЗаполненные = Истина;
	//	НастроитьФорму();
	//КонецЕсли;
	//-вог
	
	УстановитьВидимостьИДоступность();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.СтавкаНДС = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию().СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	ОповеститьПодбор = Ложь;	
	ЭлементМодифицирован = Ложь;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ++ VOG Солодов В.В. 11.06.2019 task 141
	// СтандартныеПодсистемы.Свойства
	// Скрытие кнопки. При видимости кнопки появляется меню Еще.
	ПоискЭлемента = Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.Найти("РедактироватьСоставДополнительныхРеквизитов"); 
	Если НЕ ПоискЭлемента = Неопределено Тогда
		ПоискЭлемента.Видимость = Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	// -- VOG Солодов В.В. 11.06.2019
	
	// ++ VOG Солодов В.В. 20.11.2019
	МассивТиповОтношений = Новый Массив();
	МассивТиповОтношений.Добавить(Справочники.CRM_ТипыОтношений.Поставщик);
	НовыеЗначения 		= Новый ФиксированныйМассив(МассивТиповОтношений);
	НовыйПараметр 		= Новый ПараметрВыбора("Отбор.ТипОтношений", НовыеЗначения);
	МассивПараметров 	= Новый Массив();
	МассивПараметров.Добавить(НовыйПараметр);
	НовыеПараметры 		= Новый ФиксированныйМассив(МассивПараметров);

	Элементы.вогПроизводитель1.ПараметрыВыбора = НовыеПараметры;
	// -- VOG Солодов В.В. 20.11.2019
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	//+вог
	Если Не ЗначениеЗаполнено(НастройкаВидимостиКарточкиОбъекта) Тогда
		НастройкаВидимостиКарточкиОбъекта       = "ПоказатьЗаполненные";
		РежимВидимостиПоказатьТолькоЗаполненные = Истина;
	
	КонецЕсли;
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	НастроитьФорму(НастройкиВидимостиИЗаголовков);
	//-вог
	
	Если Не ТекущийОбъект.ФайлКартинки.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(ТекущийОбъект.ФайлКартинки, УникальныйИдентификатор);
		// +CRM
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
		// -CRM
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	// +CRM		
	CRM_УправлениеВидимостьюРамкиКартинки();	
	// -CRM		
	
	//+Классификаторы
	// ++ VOG Солодов В.В. 11.06.2019 task 141
	// До изменения
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка); 
	// -- VOG Солодов В.В. 11.06.2019
	//-Классификаторы
	
	//+вог	
//	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков);
	//-вог
	
	// Вывод информации Общая
	//РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакет(Объект.Ссылка,ИнформацияОбъект,Метаданные.Справочники.Номенклатура,ЭтаФорма,"КарточкаОбъекта");
	
	// ++ VOG Солодов В.В. 06.11.2019 
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(
		Объект.Ссылка,
		ИнформацияОбъект,
		Метаданные.Справочники.Номенклатура,
		ЭтотОбъект,
		"КарточкаОбъекта",
		Объект.НаправлениеДеятельности);
	// До изменения
	//Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") тогда
	//	// Вывод информации Обои
	//	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияОбъект
	//	,Метаданные.Справочники.Номенклатура,ЭтаФорма,"Обои",Справочники.НаправленияДеятельности.Обои,Истина);
	//ИначеЕсли Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка") тогда
	//	// Вывод информации Плитка
	//	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияОбъект
	//	,Метаданные.Справочники.Номенклатура,ЭтаФорма,"Плитка",Справочники.НаправленияДеятельности.Плитка,Истина);
	//КонецЕсли;
	// -- VOG Солодов В.В. 06.11.2019
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ++ VOG Солодов В.В. 10.06.2019 task 141
	// Выделить команду навигации при открытии формы объекта
	ВыделитьКомандуНавигацииПриОткрытииФормы();
	
	// При открытии установить страницу Основное
	ВыполнитьПереходСтраницы("СтраницаКарточкаОбъекта");	
	// -- VOG Солодов В.В. 10.06.2019	
	
	
	Если ЗначениеЗаполнено(Объект.Ссылка) тогда
		НовыйЭлОтбора = СписокЕИ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		НовыйЭлОтбора.ПравоеЗначение = Объект.Ссылка;
		НовыйЭлОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлОтбора.Использование = Истина;
	Иначе
		Элементы.СписокЕИ.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события ОбработкаОповещения.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	ИначеЕсли ИмяСобытия = "Запись_Файл" 
		И Параметр.Свойство("ВладелецФайла") Тогда
		
		Если Параметр.ВладелецФайла = Объект.Ссылка Тогда
			Модифицированность = Истина;
			
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			Если ВыборИзображения Тогда
				
				Объект.ФайлКартинки = СсылкаНаФайл;
				АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
				
			КонецЕсли;
			
			ФайлКартинкиПриИзменении(Элементы.ФайлКартинки);
			//+вог
			ОбновитьГиперссылкиИКарточку();
			//-вог
			
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
// Процедура обработчик события ПередЗаписьюНаСервере.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	Если Модифицированность Тогда
		ЭлементМодифицирован = Истина;	
	КонецЕсли;
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
// Процедура обработчик события ПослеЗаписиНаСервере.
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
	Если ЭлементМодифицирован Тогда
		ОповеститьПодбор = Истина;
		ЭлементМодифицирован = Ложь;
	КонецЕсли;
	
	//+Классификаторы
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	//+вог
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	Если Не Элементы.СтраницаКарточкаОбъекта.Доступность Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастройкаВидимостиФормы = "ПоказатьВсе";
		НастроитьФорму(НастройкиВидимостиИЗаголовков);
		СкрытьРаскрытьВсеГруппы(Ложь);
		
		Если Элементы.НастройкаВидимостиФормы.СписокВыбора.Количество() = 3 Тогда
			Элементы.НастройкаВидимостиФормы.СписокВыбора.Удалить(0);
		КонецЕсли;
		
	Иначе
		НастроитьФорму(НастройкиВидимостиИЗаголовков);
	КонецЕсли;

	//КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(ТекущийОбъект, НастройкиВидимостиИЗаголовков);
	//-вог
	
	// ++ VOG Солодов В.В. 06.11.2019 
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(
		Объект.Ссылка,
		ИнформацияОбъект,
		Метаданные.Справочники.Номенклатура,
		ЭтотОбъект,
		"КарточкаОбъекта",
		Объект.НаправлениеДеятельности,
		Истина);
	// До изменения
	//Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") тогда
	//	// Вывод информации Обои
	//	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияОбъект
	//	,Метаданные.Справочники.Номенклатура,ЭтаФорма,"Обои",Справочники.НаправленияДеятельности.Обои,Истина);
	//ИначеЕсли Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка") тогда
	//	// Вывод информации Плитка
	//	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияОбъект
	//	,Метаданные.Справочники.Номенклатура,ЭтаФорма,"Плитка",Справочники.НаправленияДеятельности.Плитка,Истина);
	//КонецЕсли;
	// -- VOG Солодов В.В. 06.11.2019
	
	Если СписокЕИ.Отбор.Элементы.Количество() = 0 тогда
		
		НовыйЭлОтбора = СписокЕИ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		НовыйЭлОтбора.ПравоеЗначение = Объект.Ссылка;
		НовыйЭлОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлОтбора.Использование = Истина;
		
		Элементы.СписокЕИ.Видимость = Истина;
		
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 23.10.2019 task 759
	УстановитьВидимостьИДоступность();
	// -- VOG Солодов В.В. 23.10.2019
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	
	Если ОповеститьПодбор 
		И ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма")
		И ВладелецФормы.ИмяФормы = "ОбщаяФорма.ФормаПодбора" Тогда
		Оповестить("ОбновитьПодбор", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	РегистрыСведений.CRM_ВесаПозицийНоменклатуры.УстановитьВесПозиции(Объект.Ссылка, CRM_ВесПозиции);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//+вог
	Если Отказ Тогда
		
		Если НастройкаВидимостиФормы = "СвернутьВсеГруппы" Тогда
			НастройкаВидимостиФормы = "ПоказатьВсе";
		КонецЕсли;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
	КонецЕсли;
	//-вог

КонецПроцедуры

#Область ПроцедурыОбработчикиСобытийРеквизитовФормы

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля Наименование.
//
Процедура НаименованиеПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры // НаименованиеПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ТипНоменклатуры.
//
Процедура ТипНоменклатурыПриИзменении(Элемент)
				
	УстановитьВидимостьИДоступность(Истина);
		
КонецПроцедуры // ТипНоменклатурыПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ФайлКартинки.
//
Процедура ФайлКартинкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
		// +CRM
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
		// -CRM
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	// +CRM		
	CRM_УправлениеВидимостьюРамкиКартинки();	
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();

КонецПроцедуры

//+вог
&НаКлиенте
Процедура НоменклатурнаяГруппаПриИзменении(Элемент)
	ОбновитьГиперссылкиИКарточку();
КонецПроцедуры
//-вог

// ++ VOG Солодов В.В. 16.10.2019 task 759
&НаКлиенте
Процедура ПанноПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры // -- VOG Солодов В.В. 16.10.2019

// +CRM

&НаСервере
Процедура ВывестиНедоступностьКартинки()
	АдресКартинки = "";
	Элементы.ФайлКартинки.ТекстНевыбраннойКартинки
		= НСтр("ru = 'Картинка не доступна (не доступен том) обратитесь к администратору.'");
	Объект.ФайлКартинки = Справочники.НоменклатураПрисоединенныеФайлы.ПустаяСсылка();
	CRM_УправлениеВидимостьюРамкиКартинки();	
КонецПроцедуры // ВывестиНедоступностьКартинки()

&НаСервереБезКонтекста
// Функция определяет, что к объекту присоединен по крайней мере один файл.
//
// Параметры:
//	ВладелецФайлов	- СправочникСсылка	- Владелец файлов.
//	ФайлИсключение	- СправочникСсылка	- Файл-исключение
//
Функция ОбъектИмеетФайлы(Знач ВладелецФайлов, Знач ФайлИсключение = Неопределено, Фильтр)
	Возврат CRM_ПрисоединенныеФайлы.ОбъектИмеетФайлы(ВладелецФайлов, ФайлИсключение);
КонецФункции // ОбъектИмеетФайлы()

// Механизм картинок

&НаКлиенте
Процедура ДобавлениеФайлаДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] =
		Новый Структура("ИмяБезРасширения, Расширение, ВремяИзменения, УниверсальноеВремяИзменения");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаИнициализацияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	Файл = Новый Файл;
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаИнициализацияФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаСуществованияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ДополнительныеПараметры.Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Файл не найден'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита], ДополнительныеПараметры.Файл);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение =
		СтрЗаменить(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение, ".", "");
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].ВремяИзменения = ВремяИзменения;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеУниверсальногоВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].УниверсальноеВремяИзменения = ВремяИзменения;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ДополнительныеПараметры.ИмяФайла);
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	Если ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаКартинки" Тогда
		АдресКартинки      = АдресФайлаВХранилище;
	ИначеЕсли ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаHTML" Тогда
		АдресОписанияHTML  = АдресФайлаВХранилище;
		ПутьКФайлуОписанию = ДополнительныеПараметры.ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	// +CRM не переносить в объединенные решения
	//Перем ИдентификаторФайла;
	//
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	
	//	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	//	ДиалогВыбораФайла.Фильтр =  НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
	//	                            + "|Все файлы(*.*)|*.*"
	//	                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
	//	                            + "|Формат GIF(*.gif*)|*.gif"
	//	                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
	//	                            + "|Формат PNG(*.png*)|*.png"
	//	                            + "|Формат TIFF(*.tif)|*.tif"
	//	                            + "|Формат icon(*.ico)|*.ico"
	//	                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
	//	
	//	ОписаниеОповещения = Новый ОписаниеОповещения(
	//	"ДобавлениеФайлаДиалогЗавершение",
	//	ЭтотОбъект,
	//	Новый Структура("ИмяРеквизита", "ДанныеФайлаКартинки"));
	//	
	//	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	//	
	//Иначе
	//	Фильтр =  НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
	//	                            + "|Все файлы(*.*)|*.*"
	//	                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
	//	                            + "|Формат GIF(*.gif*)|*.gif"
	//	                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
	//	                            + "|Формат PNG(*.png*)|*.png"
	//	                            + "|Формат TIFF(*.tif)|*.tif"
	//	                            + "|Формат icon(*.ico)|*.ico"
	//	                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
	//	
	//	ВыборИзображения   = Истина;
	//	ИдентификаторФайла = Новый УникальныйИдентификатор;
	//	
	//	ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);
	//	ВыборИзображения   = Ложь;
	//КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
	// -CRM не переносить в объединенные решения
	
КонецПроцедуры

// +CRM не переносить в объединенные решения
&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Если Не Записать() Тогда
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
    
    ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
    
    Перем ИдентификаторФайла;
    
    ВыборИзображения   = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, CRM_ОбщегоНазначенияКлиент.ФильтрФайловИзображений());
	// +CRM_УТ
	#Если НЕ ВебКлиент Тогда
	// -CRM_УТ
	ВыборИзображения   = Ложь;
	// +CRM_УТ
	#КонецЕсли
	// -CRM_УТ
	
	CRM_УправлениеВидимостьюРамкиКартинки();
КонецПроцедуры
// -CRM не переносить в объединенные решения

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				ЭтаФорма.Объект[ИмяРеквизитаОбъекта],
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
	ДанныеФайлаКартинки = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("ФайлКартинки", "АдресКартинки",
		НСтр("ru='Отсутствует изображение для просмотра'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Объект.ФайлКартинки);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	СтруктураПараметрыВыбора =
		Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);

	ОткрытьФорму(
		"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		СтруктураПараметрыВыбора,,,,,
		Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда
        Объект.ФайлКартинки = Результат;
        АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор)
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

//+вог
#Область КарточкаОбъекта
	
&НаКлиенте
Процедура ГиперссылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента)
	
	Если ИмяЭлемента = "ГиперссылкаПерейтиФайлы"
	  ИЛИ ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
		Если вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка) Тогда
			ФормаИмя = "ОбщаяФорма.вогФормаУправленияПрисоединеннымиФайлами";
			ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Присоединенные файлы'"))
		Иначе	
			ФормаИмя = "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы";
		КонецЕсли;
		
		ТипыФайлов = Новый Массив;
		Если ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда
			ТипыФайлов.Добавить(ПредопределенноеЗначение("Перечисление.вогТипыПрисоединенныхФайлов.Изображение"));
			ПараметрыФормы.Вставить("ТипыФайлов", ТипыФайлов);
			
		КонецЕсли;
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", ФормаИмя);
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиИсторияИзмененияЦенКомпании" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.ЦеныНоменклатуры.Форма.ФормаДляНоменклатуры");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиСегменты" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.НоменклатураСегмента.Форма.СегментыНоменклатурыПараметрическая");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЗначенияКлассификаторов" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиХарактеристикиНоменклатуры" Тогда
		ВладелецХарактеристик = Новый Массив;
		ВладелецХарактеристик.Добавить(Объект.Ссылка);
		Если ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
			ВладелецХарактеристик.Добавить(Объект.НоменклатурнаяГруппа)
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("ВладелецХарактеристик", ВладелецХарактеристик);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.ХарактеристикиНоменклатуры.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиАналоги" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.АналогиНоменклатуры.Форма.ФормаДляНоменклатуры");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЕдиницыИзмерения" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.ЕдиницыИзмерения.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
	
	// ++ VOG Солодов В.В. 29.10.2019 
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиШтрихкодыНоменклатуры" Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.вогШтрихкодыНоменклатуры.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
	// -- VOG Солодов В.В. 29.10.2019
	
	КонецЕсли;
	
	Если Не ПараметрыПереходаПоГиперссылке.Свойство("РежимОткрытияОкнаФормы") Тогда
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	Возврат ПараметрыПереходаПоГиперссылке
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информции возможен только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы, , ЭтаФорма.УникальныйИдентификатор, , , ,
		ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

#КонецОбласти

//-вог

#КонецОбласти

#Область ПроцедурыМеханизмаЗапретРедактированияРеквизитовОбъекта
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат Тогда
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтотОбъект);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
// Процедура разрешает редактирование реквизитов объекта.
//
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	ОбработкаОповещения = Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект);
	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
КонецПроцедуры // Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта()

#КонецОбласти

#КонецОбласти

//+Классификаторы
#Область Подключаемый_Классификаторы

//&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
//	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	//CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	//CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	//CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
		
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	//CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)

	//CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	//Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	//CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	//CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_ТегиКлассификатора_Обновить()

#КонецОбласти
//-Классификаторы

//+вог

#Область НастройкаВидимостиГруппИЭлементовПереключательРежима

&НаКлиенте
Процедура КарточкаОбъектаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Элементы.ГруппаГруппировкаЛевоПраво.Видимость Тогда
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Истина;
	КонецЕсли;
	
	Если СтрНайти(Расшифровка, "ГиперссылкаПерейти") <> 0 Тогда
		ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Расшифровка);
		ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	ИначеЕсли Элементы.Найти(Расшифровка) <> Неопределено Тогда
		Если Истина Тогда
			Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаРеквизитыОбъекта;
			
			РазвернутьСворачиваемуюГруппу(Расшифровка);
			ТекущийЭлементВыбор = Расшифровка;
			ПодключитьОбработчикОжидания("УстановитьАктивностьТекущийЭлемент",0.0001,Истина);
		Иначе
			Если Объект.Свойство(Расшифровка) Тогда
				Если ТипЗнч(Объект[Расшифровка]) <> Тип("Строка")
					И ТипЗнч(Объект[Расшифровка]) <> Тип("Булево")
					И ЗначениеЗаполнено(Объект[Расшифровка]) Тогда
					ПоказатьЗначение(,Объект[Расшифровка]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьТекущийЭлемент()
	ЭтаФорма.ТекущийЭлемент = Элементы[ТекущийЭлементВыбор];
КонецПроцедуры

&НаКлиенте
Процедура СтраницыКарточкаОбъектаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаРеквизитыОбъекта Тогда
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Истина;
	Иначе
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГруппыРекурсивно(Элемент, Видимость)
	Если Видимость = Истина И 
		(СтрНайти(Элемент.Имя, "ДекорацияОткрыть") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаОбъемКолонки") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаДлинаКолонки") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаПлощадьКолонки") <> 0) Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Видимость = Видимость;
	Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьВидимостьГруппыРекурсивно(ПодчиненныйЭлемент,Видимость);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиФормыПриИзменении(Элемент)
	
	Если НастройкаВидимостиФормы = "ПоказатьВсе" Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Ложь);
	ИначеЕсли НастройкаВидимостиФормы = "ПоказатьОсновные" Тогда
		РежимВидимостиПоказатьТолькоВажные = Истина;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Ложь);
	Иначе
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиКарточкиОбъектаПриИзменении(Элемент)
	
	Если НастройкаВидимостиКарточкиОбъекта = "ПоказатьЗаполненные" Тогда
		РежимВидимостиПоказатьТолькоЗаполненные = Истина;
	Иначе
		РежимВидимостиПоказатьТолькоЗаполненные = Ложь;
	КонецЕсли;   
	
	ОбновитьКарточку();
	
КонецПроцедуры

&НаСервере
Процедура СкрытьРаскрытьВсеГруппы(Свернуть = Неопределено)
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	
	Для Каждого ИмяГруппы из ИменаСворачиваемыхГрупп Цикл
		
		ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементов

&НаСервере
Процедура НастроитьФорму(НастройкиВидимостиИЗаголовков = Неопределено)
	
	Элементы.СтраницаКарточкаОбъекта.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
	// Настройка видимости и заголовков
	Если Не ЗначениеЗаполнено(НастройкиВидимостиИЗаголовков) Тогда
		НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	КонецЕсли;
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
		
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) <> Неопределено Тогда
			Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		КонецЕсли;
		
		// Формирование видимости элементов подменю "Перейти"
		ИмяКоманды = ЭлементВидимость.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				Элементы[ИмяКоманды].Видимость = ЭлементВидимость.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		Если Элементы.Найти(ЭлементЗаголовок.Ключ) <> Неопределено Тогда
			Элементы[ЭлементЗаголовок.Ключ].Заголовок = ЭлементЗаголовок.Значение;
		КонецЕсли;
		
		// Формирование заголовков элементов подменю "Перейти"
		ИмяКоманды = ЭлементЗаголовок.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				
				СтрокаИсключение = НСтр("ru = 'Список'");
				НачалоСтроки     = СтрНайти(ЭлементЗаголовок.Значение, "(") - 1;
				
				Если СтрНайти(ЭлементЗаголовок.Значение, СтрокаИсключение) = 0
					И НачалоСтроки > 0 Тогда
					
					Элементы[ИмяКоманды].Заголовок = СокрЛП(Лев(ЭлементЗаголовок.Значение, НачалоСтроки));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
			
	НастроитьВидимостьСворачиваемыхГрупп();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемыхГрупп()
	
	НастроитьВидимостьСворачиваемойГруппы("КартинкаОписание");
	НастроитьВидимостьСворачиваемойГруппы("Цены");
	НастроитьВидимостьСворачиваемойГруппы("ПланированиеИМаркетинг");
	НастроитьВидимостьСворачиваемойГруппы("Классификаторы");       
	
	НастроитьВидимостьСворачиваемойГруппы("ОсновныеПараметрыУчета");
	НастроитьВидимостьСворачиваемойГруппы("ЕдиницыИзмерения");
	НастроитьВидимостьСворачиваемойГруппы("РегламентированныйУчет");
	НастроитьВидимостьСворачиваемойГруппы("ДополнительныеРеквизиты");
		
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемойГруппы(ИмяГруппы)
	
	ЭлементСворачиваяГруппа = Элементы["СворачиваемаяГруппа" + ИмяГруппы];
	Элементы["ГруппаЗаголовок" + ИмяГруппы].Видимость = ЕстьВидимыеЭлементыВГруппе(ЭлементСворачиваяГруппа);
	
КонецПроцедуры

&НаСервере
Функция ЕстьВидимыеЭлементыВГруппе(Элемент)
	
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Если ПодчиненныйЭлемент.Видимость 
				И ЕстьВидимыеЭлементыВГруппе(ПодчиненныйЭлемент) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПодчиненныйЭлемент.Видимость Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	
	ИмяГруппыСвернутьРазвернуть = Элемент.Имя;
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияОткрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияЗакрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ЗаголовокГруппы", "");
	ИзменитьСвернутостьГруппы(ИмяГруппыСвернутьРазвернуть);
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы",0.0001,Истина);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть = Неопределено)
	
	Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость, Не Свернуть);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Свернуть);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Не Свернуть);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	
	Если Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяГруппыСвернутьРазвернуть];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьСворачиваемуюГруппу(ИмяГруппы)
	ГруппаРодитель  = Элементы[ИмяГруппы].Родитель;
	Если ГруппаРодитель = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	ИмяГруппыРодителя =ГруппаРодитель.Имя;
	
	Если СтрНайти(ИмяГруппыРодителя, "СворачиваемаяГруппа") = 0 Тогда
		РазвернутьСворачиваемуюГруппу(ИмяГруппыРодителя);
	Иначе
		ИмяГруппыРодителя = СтрЗаменить(ИмяГруппыРодителя, "СворачиваемаяГруппа", "");
		ИзменитьСвернутостьГруппы(ИмяГруппыРодителя, Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ИменаСворачиваемыхГрупп()
	
	ИменаСворачиваемыхГрупп = Новый Массив;
	
	// ++ VOG Солодов В.В. 11.06.2019 task 141
	// Начало комментирования
	//ИменаСворачиваемыхГрупп.Добавить("КартинкаОписание");
	//ИменаСворачиваемыхГрупп.Добавить("Цены");
	//ИменаСворачиваемыхГрупп.Добавить("ПланированиеИМаркетинг");
	//ИменаСворачиваемыхГрупп.Добавить("Классификаторы");
	//
	//ИменаСворачиваемыхГрупп.Добавить("ОсновныеПараметрыУчета");
	//ИменаСворачиваемыхГрупп.Добавить("ЕдиницыИзмерения");
	//ИменаСворачиваемыхГрупп.Добавить("РегламентированныйУчет");
	//ИменаСворачиваемыхГрупп.Добавить("ДополнительныеРеквизиты");
	// Окончание комментирования
	// -- VOG Солодов В.В. 11.06.2019

	Возврат ИменаСворачиваемыхГрупп;
	
КонецФункции

&НаСервере
Процедура ОбновитьГиперссылкиИКарточку()
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);   
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) = Неопределено
			Или СтрНайти(ЭлементВидимость.Ключ,"Гиперссылка") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		Если Элементы.Найти(ЭлементЗаголовок.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		Элементы[ЭлементЗаголовок.Ключ].Заголовок = ЭлементЗаголовок.Значение;
	КонецЦикла;
	
	//КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков);
	// ++ VOG Солодов В.В. 06.11.2019 
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(
		Объект.Ссылка,
		ИнформацияОбъект,
		Метаданные.Справочники.Номенклатура,
		ЭтотОбъект,
		"КарточкаОбъекта",
		Объект.НаправлениеДеятельности,
		Истина);
	// До изменения
	//Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") тогда
	//	// Вывод информации Обои
	//	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияОбъект
	//	,Метаданные.Справочники.Номенклатура,ЭтаФорма,"Обои",Справочники.НаправленияДеятельности.Обои,Истина);
	//ИначеЕсли Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка") тогда
	//	// Вывод информации Плитка
	//	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияОбъект
	//	,Метаданные.Справочники.Номенклатура,ЭтаФорма,"Плитка",Справочники.НаправленияДеятельности.Плитка,Истина);
	//КонецЕсли;
	// -- VOG Солодов В.В. 06.11.2019
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКарточку()
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	//КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков);
	// ++ VOG Солодов В.В. 06.11.2019 
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(
		Объект.Ссылка,
		ИнформацияОбъект,
		Метаданные.Справочники.Номенклатура,
		ЭтотОбъект,
		"КарточкаОбъекта",
		Объект.НаправлениеДеятельности,
		Истина);
	// До изменения
	//Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") тогда
	//	// Вывод информации Обои
	//	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияОбъект
	//	,Метаданные.Справочники.Номенклатура,ЭтаФорма,"Обои",Справочники.НаправленияДеятельности.Обои,Истина);
	//ИначеЕсли Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка") тогда
	//	// Вывод информации Плитка
	//	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакетСОтбором(Объект.Ссылка,ИнформацияОбъект
	//	,Метаданные.Справочники.Номенклатура,ЭтаФорма,"Плитка",Справочники.НаправленияДеятельности.Плитка,Истина);
	//КонецЕсли;
	// -- VOG Солодов В.В. 06.11.2019
	
КонецПроцедуры

#КонецОбласти

#Область МакетыИнформации

#Область ИнформацияОбъект

&НаКлиенте
Процедура ИнформацияОбъектОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка 			= Ложь;
	ТекстОбработчика 				= "";
	ТаблицаОбработчики 				= ЭтаФорма["КарточкаОбъекта_Обработчики"];
	ТаблицаРасшифровка				= ЭтаФорма["КарточкаОбъекта_Расшифровка"];
	// ++ VOG Солодов В.В. 06.11.2019 
	ТаблицаРасшифровкиКлассификатора = ЭтотОбъект["КарточкаОбъекта_РасшифровкаКлассификатора"];
	// -- VOG Солодов В.В. 06.11.2019
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Гиперссылка_") <> 0 Тогда
		ИмяГиперссылки 		= СтрЗаменить(Расшифровка,"Гиперссылка_","");
		Для каждого ТекущийОбработчик Из ТаблицаОбработчики Цикл
			Если ТекущийОбработчик.Имя = ИмяГиперссылки Тогда
				ТекстОбработчика = ТекущийОбработчик.ПроизвольныйКод;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение	
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Пользователи") Тогда
		// Сверунть группу Контакты
	//	СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
	//	ВыполнитьПереходСтраницы("СтраницаМенеджеры");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		// Сверунть группу Контакты
	//	СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
	//	ВыполнитьПереходСтраницы("СтраницаКонтакты");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		ПоказатьЗначение(Неопределено,Расшифровка);
	// ++ VOG Солодов В.В. 06.11.2019 
	ИначеЕсли вогОбщегоНазначенияВызовСервера.ПроверитьЭтоСсылка(ТипЗнч(Расшифровка)) Тогда
		
		Если ТипЗнч(Расшифровка) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы")
			Или (ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов")
			И ТаблицаРасшифровкиКлассификатора.НайтиСтроки(Новый Структура("Имя", Расшифровка)).Количество() <> 0) Тогда
			
			вогУправлениеИнтерфейсомКлиент.ОбработатьРасшифровкуИнформации(ЭтотОбъект, Расшифровка);
			
		Иначе
			
			ПоказатьЗначение(Неопределено, Расшифровка);
			
		КонецЕсли;
	// -- VOG Солодов В.В. 06.11.2019
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Расшифровка_") <> 0 Тогда
		ИмяРасшифровки 	= СтрЗаменить(Расшифровка,"Расшифровка_","");
		ИмяПараметра 	= "Объект." + ИмяРасшифровки;
		Для каждого ТекущийОбработчик Из ТаблицаРасшифровка Цикл
			Если ТекущийОбработчик.Имя = ИмяПараметра Тогда
				ТекстОбработчика = ТекущийОбработчик.ТекстОбработчика;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	// ++ VOG Солодов В.В. 06.11.2019 
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		вогОбщегоНазначенияКлиент.РасшифрокаВнешниеДанныеМакет(Расшифровка);
	// -- VOG Солодов В.В. 06.11.2019
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// ++ VOG Солодов В.В. 10.06.2019 task 141
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПереходСтраницы(Команда)
	
	СкрытьРаскрытьВсеГруппы(Истина);
	ВыполнитьПереходСтраницы(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиКоманда(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Для каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
		Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
			ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
			ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
		Иначе
			ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
			ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Команда.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

#КонецОбласти

#Область НавигацияФормы

&НаКлиенте
Процедура ВыполнитьПереходСтраницы(ИмяКоманды)
	
	Попытка
		// Выделить кнопку перехода
		Для Каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
			Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
				ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
				ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
			Иначе
				ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
				ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
			КонецЕсли;
		КонецЦикла;
		// Переход страницы
		Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы[ИмяКоманды];
		
	Исключение
		ТекстСообщения 	= НСтр("ru = 'Не удалось перейти на страницу %1'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ИмяКоманды));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьКомандуНавигацииПриОткрытииФормы()
	
	Для Каждого ЭлементКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
		Если ЭлементКоманды.ИмяКоманды 	= Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя Тогда
			ЭлементКоманды.ЦветТекста 	= Новый Цвет(128,0,128);
			ЭлементКоманды.Шрифт 		= Новый Шрифт(,10,Ложь,,Истина);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПортретПриИзменении(Элемент)

	 УстановитьВидимостьИДоступность();
	
	
КонецПроцедуры

#КонецОбласти
// -- VOG Солодов В.В. 10.06.2019

// ++ VOG Солодов В.В. 28.10.2019 task 791
#Область ОбработчикиСобытийЭлементовТаблицыФормывогЦвета

&НаКлиенте
Процедура вогЦветаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.вогЦвета.ТекущиеДанные;
	
	Если ТекущиеДанные.Цвет = ПредопределенноеЗначение("Справочник.Цвета.Мультиколор") Тогда
		
		ТекстВопроса = "Цвет Мультиколор запрещено использовать совместно с другими цветами. Прочие цвета будут очищены.
		|Продолжить?";
		ОповещениеОЗавершении = Новый ОписаниеОповещения("вогЦветаПриОкончанииРедактированияЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура вогЦветаПриОкончанииРедактированияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.вогЦвета.Очистить();
		
		НоваяСтрока = Объект.вогЦвета.Добавить();
		НоваяСтрока.Цвет = ПредопределенноеЗначение("Справочник.Цвета.Мультиколор");
		
	Иначе
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Цвет", ПредопределенноеЗначение("Справочник.Цвета.Мультиколор"));
		
		НайденныеСтроки = Объект.вогЦвета.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Объект.вогЦвета.Удалить(Объект.вогЦвета.Индекс(НайденнаяСтрока));
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура вогЦветаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Цвет", ПредопределенноеЗначение("Справочник.Цвета.Мультиколор"));
	
	Если Объект.вогЦвета.НайтиСтроки(СтруктураОтбора).Количество() > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Невозможно добавить дополнительный цвет при выбранном цвете Мультиколор.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
// -- VOG Солодов В.В. 28.10.2019

//-вог
