#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Возвращает настройки видимости и заголовков элементов формы. Используется для построения формы и табличного
// документа карточки номенклатуры.
// Параметры:
//  Объект - СправочникОбъект.Партнеры, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитов
//	РежимВидимостиПоказатьТолькоВажные 	- Булево - признак отображения основных реквизитов
//
// Возвращаемое значение:
//  Структура - структура с ключами:
//		* ВидимостьЭлементов - структура видимости элементов
//		* ЗаголовкиЭлементов - структура заголовков элементов
//
Функция НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные = Ложь) Экспорт
	
	НастройкиВидимостиИЗаголовков = Новый Структура;
		
	ВидимостьЭлементов = СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные);
	УстановитьПривилегированныйРежим(Истина);
	ЗаголовкиЭлементов = СтруктураЗаголовковЭлементовФормы(Объект, ВидимостьЭлементов);
	УстановитьПривилегированныйРежим(Ложь);
		
	НастройкиВидимостиИЗаголовков.Вставить("ВидимостьЭлементов", ВидимостьЭлементов);
	НастройкиВидимостиИЗаголовков.Вставить("ЗаголовкиЭлементов", ЗаголовкиЭлементов);
	
	Возврат НастройкиВидимостиИЗаголовков;
	
КонецФункции

#Область МеханизмыНастройкиРаботыСРеквизитами

// Функция - Реквизиты отключенные по ФО
// 
// Возвращаемое значение:
//   - 
//
Функция РеквизитыОтключенныеПоФО() Экспорт
	
	Результат = Новый Массив;
		
	Возврат Результат;
	
КонецФункции

// Функция - Зависимость реквизитов
// 
// Возвращаемое значение:
//   - 
//
Функция ЗависимостьРеквизитов() Экспорт
												
	// Сформировать таблицу реквизитов для заполнения.
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("ДействиеСРеквизитом");
	
	Реквизиты = Метаданные.Справочники.вогРынки.Реквизиты;	
	Для Каждого Реквизит из Реквизиты Цикл
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит            = Реквизит;
		НоваяСтрока.ДействиеСРеквизитом = "Добавить";

	КонецЦикла;
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - Раздел виден
//
// Параметры:
//  ИмяРаздела			 - 	 - 
//  СтруктураВидимости	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция РазделВиден(ИмяРаздела, СтруктураВидимости)
	
	Видимость = Истина;
	Если СтруктураВидимости.Свойство(ИмяРаздела) Тогда 
		Видимость = СтруктураВидимости[ИмяРаздела];	
	КонецЕсли;
	
	Возврат Видимость;
	
КонецФункции

// Функция - Право доступа на объект метаданных по реквизиту
//
// Параметры:
//  Право					 - 	 - 
//  РеквизитОбъектМетаданных - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПравоДоступаНаОбъектМетаданныхПоРеквизиту(Право, РеквизитОбъектМетаданных)

	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивтиповДляПроверки = РеквизитОбъектМетаданных.Тип.Типы();
	Для Каждого Тип Из МассивтиповДляПроверки Цикл
		
		Если вогОбщегоНазначения.ЭтоПримитивныйТип(Тип) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных <> Неопределено
			И Не ПравоДоступа(Право, ОбъектМетаданных) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Функция - Видимость реквизита
//
// Параметры:
//  Реквизит							 - 	 - 
//  ИмяРеквизита						 - 	 - 
//  РеквизитыОтключенныеПоФО			 - 	 - 
//  РежимВидимостиПоказатьТолькоВажные	 - 	 - 
//  ТаблицаОбязательныхРеквизитов		 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ВидимостьРеквизита(Реквизит, ИмяРеквизита, РеквизитыОтключенныеПоФО, РежимВидимостиПоказатьТолькоВажные,
	ТаблицаОбязательныхРеквизитов)
	
	Если Не ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Возврат ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Реквизит)
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или ТаблицаОбязательныхРеквизитов.Найти(ИмяРеквизита, "Наименование") <> Неопределено)
	Иначе
		Возврат ПравоДоступа("Просмотр", Метаданные.Справочники.вогРынки.Реквизиты[ИмяРеквизита])
				И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Метаданные.Справочники.вогРынки.Реквизиты[ИмяРеквизита])
				И РеквизитыОтключенныеПоФО.Найти(ИмяРеквизита) = Неопределено
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или ТаблицаОбязательныхРеквизитов.Найти(ИмяРеквизита, "Наименование") <> Неопределено)
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу обязательных реквизитов.
// Параметры:
//	ВидНоменклатуры - СправочникОбъект.ВидыНоменклатуры - элемент справочника виды номенклатуры
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с обязательными для заполнения и выводимыми при создании реквизитами
//
Функция ТаблицаНастроекРеквизитов()

	ТаблицаНастроекРеквизитов = Новый ТаблицаЗначений;
	ТаблицаНастроекРеквизитов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));	
		
	Возврат ТаблицаНастроекРеквизитов;
	
КонецФункции

// Возвращает таблицу дополнительные реквизиты номенклатуры
//
// Параметры:
//  ВидНоменклатуры	 - СправочникСсылка.ВидыНоменклатуры 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//		* ИмяРеквизита - Строка - наименование свойства
//		* ПредставлениеРеквизита - Строка - заголовок свойства
//		* ЭтоДопРеквизит - Булево - всегда ИСТИНА
//		* ЭтоОбщийРеквизит - Булево - признак, что доп. реквизит входит в набор Справочник_Номенклатура_Общие
//		* ЗаполнятьОбязательно - Булево
//		* НаборСвойств - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - набор свойств, для которого был создан доп. реквизит
//		* Тип - ОписаниеТипов
//
Функция ВсеДополнительныеРеквизиты() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Свойство");
		Таблица.Колонки.Добавить("ЭтоДопРеквизит");
		Возврат Таблица;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка КАК Набор,
	|	ДополнительныеРеквизиты.Свойство.Наименование КАК ИмяРеквизита,
	|	ДополнительныеРеквизиты.Свойство.Заголовок КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ВЫБОР
	|		КОГДА ДополнительныеРеквизиты.Ссылка = &ОбщийНабор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОбщийРеквизит,
	|	ДополнительныеРеквизиты.Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
	|	ДополнительныеРеквизиты.Свойство.НаборСвойств КАК НаборСвойств,
	|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК Тип
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка = &ОбщийНабор";
		
	ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_вогРынки)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбщийНабор", ОбщийНабор);  	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	 
КонецФункции

// Возвращает структуру с видимостью элементов.
// Параметры:
//	Объект - СправочникОбъект.Партнеры - элемент справочника номенклатуры
//	РежимВидимостиПоказатьТолькоВажные - Булево - признак отображения основных реквизитов
//
// Возвращаемое значение:
//	Структура - струтура видимости элементов. Ключ - имя элемента, значения - видимость
//
Функция СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные)
	
	СтруктураВидимости = Новый Структура;
	
	#Область ФункциональныеОпции
	
	ИспользоватьСегментыПартнеров = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьСегментацию");
	ИспользоватьКлассификаторы	  = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");
	
	#КонецОбласти
	
	РеквизитыОтключенныеПоФО  = РеквизитыОтключенныеПоФО();
	ТаблицаОбязательныхРеквизитов = ТаблицаНастроекРеквизитов();
	
	НастройкиРеквизитов = ЗависимостьРеквизитов();
																
	Для Каждого СтрТабл из НастройкиРеквизитов Цикл
		ИмяРеквизита = СтрТабл.Реквизит.Имя;
		
		СтруктураВидимости.Вставить(ИмяРеквизита, СтрТабл.ДействиеСРеквизитом = "Добавить"
			И ВидимостьРеквизита(ИмяРеквизита,
							СтрТабл.Реквизит.Имя,
							РеквизитыОтключенныеПоФО,
							РежимВидимостиПоказатьТолькоВажные,
							ТаблицаОбязательныхРеквизитов));
	КонецЦикла;
	
	СтруктураВидимости.Вставить("ГруппаОбязательныеПоля", РежимВидимостиПоказатьТолькоВажные);
	
	#Область ПортретКлиента
	
	СтруктураВидимости.Вставить("ГиперссылкаПерейтиТорговыеТочки", Истина);
	
	#КонецОбласти

	#Область КонтактнаяИнформация
	// Пока нет требований к видимости ЭУ контактной информацией
	#КонецОбласти
	
	#Область ДополнительныеРеквизиты

	// Установка видимости для дополнительных реквизитов.
	ВсеДополнительныеРеквизитыПартнера = ВсеДополнительныеРеквизиты();
	Для Каждого СтрокаТаблицыДопРеквизитов Из ВсеДополнительныеРеквизитыПартнера Цикл
		ИмяРеквизита     = СтрокаТаблицыДопРеквизитов.ИмяРеквизита;
		ИмяЭлементаФормы = "ДополнительныйРеквизитЗначение_"
			+ СтрЗаменить(?(СтрокаТаблицыДопРеквизитов.ЭтоОбщийРеквизит,
					ВРег(Строка(СтрокаТаблицыДопРеквизитов.Набор.УникальныйИдентификатор())),
					ВРег(Строка(СтрокаТаблицыДопРеквизитов.НаборСвойств.УникальныйИдентификатор()))),
				"-",
				"x")
			+ "_"
			+ СтрЗаменить(ВРег(Строка(СтрокаТаблицыДопРеквизитов.Свойство.УникальныйИдентификатор())), "-", "x");
		
		СтруктураВидимости.Вставить(ИмяЭлементаФормы, ВидимостьРеквизита(СтрокаТаблицыДопРеквизитов,
																			ИмяРеквизита,
																			РеквизитыОтключенныеПоФО,
																			РежимВидимостиПоказатьТолькоВажные,
																			ТаблицаОбязательныхРеквизитов));
		
	КонецЦикла;

	#КонецОбласти
			
	Возврат СтруктураВидимости;
	
КонецФункции

// Возвращает структуру с заголовками элементов.
// Параметры:
//	Объект - СправочникОбъект.Партнеры - элемент справочника номенклатуры
//	СтруктураВидимостиЭлементов - Структура - струтура видимости элементов
//
// Возвращаемое значение:
//	Структура - струтура заголовков элементов. Ключ - имя элемента, значения - заголовок
//
Функция СтруктураЗаголовковЭлементовФормы(Объект, СтруктураВидимостиЭлементов)
	
	ИмяСправочникаХранилищаФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(Объект.Ссылка);
	ПолноеИмяСправочника = "Справочник." + ИмяСправочникаХранилищаФайлов;
	
	СтруктураЗаголовков = Новый Структура;
			
	#Область ЗаголовокиГиперссылок
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТорговыеТочки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.вогТорговыеТочки КАК ТорговыеТочки
	|ГДЕ
	|	ТорговыеТочки.Рынок = &Рынок";
	
	Запрос.УстановитьПараметр("Рынок", Объект.Ссылка);
		
	УстановитьПривилегированныйРежим(Истина);
	
	Выборки = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	ВидимостьЭлемента = Ложь;
				
	Если РазделВиден("ГиперссылкаПерейтиТорговыеТочки", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[0].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Торговые точки'") + " (" + Количество + ")",,,,"ТорговыеТочки");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиТорговыеТочки", ЗаголовокГиперссылки);
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат СтруктураЗаголовков;

КонецФункции

#КонецОбласти

#КонецЕсли

