&НаКлиенте
Перем РазрешенияПолучены;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.БлокироватьВладельца Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ДоступноПолучениеПисем = РаботаСПочтовымиСообщениямиСлужебный.НастройкиПодсистемы().ДоступноПолучениеПисем;
	// +CRMЭлементы.ИспользоватьУчетнуюЗапись.ОтображатьЗаголовок = ДоступноПолучениеПисем;
	Элементы.ДляПолучения.Видимость = ДоступноПолучениеПисем;
	Элементы.ОставлятьПисьмаНаСервере.Видимость = ДоступноПолучениеПисем;
	Если Не ДоступноПолучениеПисем Тогда
		Элементы.ДляОтправки.Заголовок = НСтр("ru = 'Использовать для отправки писем'");
	КонецЕсли;
	Элементы.ПолучениеПисем.Доступность = ДоступноПолучениеПисем Или Объект.ТребуетсяВходНаСерверПередОтправкой;
	Элементы.Протокол.Доступность = ДоступноПолучениеПисем;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ИспользоватьДляОтправки = Истина;
		Объект.ИспользоватьДляПолучения = ДоступноПолучениеПисем;
	КонецЕсли;
	
	УдалятьПисьмаССервера = Объект.ПериодХраненияСообщенийНаСервере > 0;
	Если Не УдалятьПисьмаССервера Тогда
		Объект.ПериодХраненияСообщенийНаСервере = 10;
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		УстановитьПривилегированныйРежим(Истина);
		Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль, ПарольSMTP");
		УстановитьПривилегированныйРежим(Ложь);
		Пароль = ?(ЗначениеЗаполнено(Пароли.Пароль), ЭтотОбъект.УникальныйИдентификатор, "");
		ПарольSMTP = ?(ЗначениеЗаполнено(Пароли.ПарольSMTP), ЭтотОбъект.УникальныйИдентификатор, "");
	КонецЕсли;
	
	// +CRM
	CRM_ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ИнициализироватьДанные();
	
	ТекущийПользовательРазрешеноАдминистрирование = CRM_УправлениеЭлектроннойПочтой.ТекущийПользовательПолучитьПравоУчетнойЗаписи(Объект.Ссылка, "Администрирование");
	
	Если НЕ ТекущийПользовательРазрешеноАдминистрирование ИЛИ НЕ ПравоДоступа("Редактирование", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		
		ТолькоПросмотр = Истина;					
		
	КонецЕсли;
	
	// Заполнить подписи для учетной записи для текущего пользователя.
	Если НЕ Объект.Ссылка.Пустая() Тогда
		МенеджерНастроек = РегистрыСведений.НастройкиУчетныхЗаписейЭлектроннойПочты.СоздатьМенеджерЗаписи();
		МенеджерНастроек.УчетнаяЗаписьЭлектроннойПочты = Объект.Ссылка;
		МенеджерНастроек.Прочитать();
		ОтветственныйЗаОбработкуПисем = МенеджерНастроек.ОтветственныйЗаОбработкуПисем;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.CRM_НастройкаСинхронизацииСВнешнимПриложением) Тогда
		Элементы.ИмяОтправителяПисем.Видимость				= Ложь;
		Элементы.АдресЭлектроннойПочты.Видимость			= Ложь;
		Объект.ИспользоватьДляОтправки 						= Ложь;
		Объект.ИспользоватьДляПолучения 					= Ложь;
		Элементы.ИспользоватьУчетнуюЗапись.Видимость		= Ложь;
		Элементы.ОтправкаПисем.Видимость 					= Ложь;
		Элементы.ПолучениеПисем.Видимость 					= Ложь;
		Элементы.ПрочиеНастройки.Видимость 					= Ложь;
		Элементы.НастройкиСоединения.ОтображениеСтраниц 	= ОтображениеСтраницФормы.Нет;
		Элементы.ДекорацияСинхронизацияOutlook.Видимость	= Истина;
	КонецЕсли;

	Элементы.ФормаЗаписатьИЗакрыть.Доступность = НЕ ТолькоПросмотр;
	Элементы.CRM_Пользователи.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.ПрочиеНастройки.ТолькоПросмотр = ТолькоПросмотр;
	Элементы.СписокПользователейГруппаЗаполнить.Доступность = НЕ ТолькоПросмотр;
	Элементы.СписокПользователейПодбор.Доступность = НЕ ТолькоПросмотр;
	
	Элементы.CRM_УказыватьПричинуОтклонения.Видимость = Объект.CRM_ИсточникЛидов;
	//Элементы.CRM_ДатаНачальнойЗагрузки.Доступность = НЕ ПисьмаУчетнойЗаписиЗагружены();
	// -CRM
	
	ЭтоПерсональнаяУчетнаяЗапись = ЗначениеЗаполнено(Объект.ВладелецУчетнойЗаписи);
	Элементы.ПользовательУчетнойЗаписи.Доступность = ЭтоПерсональнаяУчетнаяЗапись;
	ВидУчетнойЗаписи = ?(ЭтоПерсональнаяУчетнаяЗапись, "Персональная", "Общая");
	Элементы.ГруппаДляКогоУчетнаяЗапись.Доступность = Пользователи.ЭтоПолноправныйПользователь();
	ВладелецУчетнойЗаписи = Объект.ВладелецУчетнойЗаписи;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ПарольИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ПарольSMTPИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, ПарольSMTP, "ПарольSMTP");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если ВидУчетнойЗаписи = "Персональная" И Не ЗначениеЗаполнено(Объект.ВладелецУчетнойЗаписи) Тогда 
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Не выбран владелец учетной записи.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВладелецУчетнойЗаписи");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Пароль", ПроверкаПароля);
	
	// +CRM
	// Добавляем Текущего пользователя в СписокПользователей, если это новый элемент.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		СтрокаПользователь = CRM_СписокПользователей.Добавить();
		СтрокаПользователь.Пользователь = ТекПользователь;
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемПодтверждениеПолучено", ЭтотОбъект);
// +CRM
	//ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(ОписаниеОповещения, Отказ);
	CRM_ОбщегоНазначенияКлиент.CRM_ПоказатьПодтверждениеЗакрытияФормы(ОписаниеОповещения, Отказ);
// -CRM

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не УдалятьПисьмаССервера Тогда
		Объект.ПериодХраненияСообщенийНаСервере = 0;
	КонецЕсли;
	
	Если Объект.ПротоколВходящейПочты = "IMAP" Тогда
		Объект.ОставлятьКопииСообщенийНаСервере = Истина;
		Объект.ПериодХраненияСообщенийНаСервере = 0;
	КонецЕсли;
	
	Если РазрешенияПолучены <> Истина Тогда
		Если Не ПроверитьЗаполнение() Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Запрос = СоздатьЗапросНаИспользованиеВнешнихРесурсов();
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПолучениеРазрешенийЗавершение", ЭтотОбъект, ПараметрыЗаписи);
		
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
			МодульРаботаВБезопасномРежимеКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаВБезопасномРежимеКлиент");
			МодульРаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Запрос), ЭтотОбъект, ОповещениеОЗакрытии);
		Иначе
			ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, КодВозвратаДиалога.ОК);
		КонецЕсли;
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ВидУчетнойЗаписи = "Общая" И ЗначениеЗаполнено(Объект.ВладелецУчетнойЗаписи) Тогда
		Объект.ВладелецУчетнойЗаписи = Неопределено;
	КонецЕсли;
	
	ТребуетсяПроверкаПароля = Объект.ВладелецУчетнойЗаписи <> ВладелецУчетнойЗаписи
		Или ЗначениеЗаполнено(Объект.ВладелецУчетнойЗаписи);
	Если Не ПараметрыЗаписи.Свойство("ПарольВведен") И ТребуетсяПроверкаПароля Тогда
		Отказ = Истина;
		ЗапроситьПароль(ПараметрыЗаписи);
		Возврат;
	КонецЕсли;
	
	РазрешенияПолучены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_УчетнаяЗаписьЭлектроннойПочты",,Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ЗаписатьИЗакрыть") Тогда
		Закрыть();
	КонецЕсли;
	
	ВладелецУчетнойЗаписи = Объект.ВладелецУчетнойЗаписи;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПротоколПриИзменении(Элемент)
	
	Если Объект.ПротоколВходящейПочты = "IMAP" Тогда
		Если СтрНачинаетсяС(Объект.СерверВходящейПочты, "pop.") Тогда
			Объект.СерверВходящейПочты = "imap." + Сред(Объект.СерверВходящейПочты, 5);
		КонецЕсли
	Иначе
		Если ПустаяСтрока(Объект.ПротоколВходящейПочты) Тогда
			Объект.ПротоколВходящейПочты = "POP";
		КонецЕсли;
		Если СтрНачинаетсяС(Объект.СерверВходящейПочты, "imap.") Тогда
			Объект.СерверВходящейПочты = "pop." + Сред(Объект.СерверВходящейПочты, 6);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПортВходящейПочты();
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СерверВходящейПочтыПриИзменении(Элемент)
	Объект.СерверВходящейПочты = СокрЛП(НРег(Объект.СерверВходящейПочты));
КонецПроцедуры

&НаКлиенте
Процедура СерверИсходящейПочтыПриИзменении(Элемент)
	Объект.СерверИсходящейПочты = СокрЛП(НРег(Объект.СерверИсходящейПочты));
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	Объект.АдресЭлектроннойПочты = СокрЛП(Объект.АдресЭлектроннойПочты);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗащищенноеСоединениеДляИсходящейПочтыПриИзменении(Элемент)
	УстановитьПортИсходящейПочты();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗащищенноеСоединениеДляВходящейПочтыПриИзменении(Элемент)
	УстановитьПортВходящейПочты();
КонецПроцедуры

&НаКлиенте
Процедура ОставлятьКопииПисемНаСервереПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УдалятьПисьмаССервераПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПарольДляПолученияПисемПриИзменении(Элемент)
	ПарольИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПарольДляОтправкиПисемПриИзменении(Элемент)
	ПарольSMTPИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяВходНаСерверПередОтправкойПриИзменении(Элемент)
	Элементы.ПолучениеПисем.Доступность = ДоступноПолучениеПисем Или Объект.ТребуетсяВходНаСерверПередОтправкой;
КонецПроцедуры

&НаКлиенте
Процедура ДляКогоУчетнаяЗаписьПриИзменении(Элемент)
	Элементы.ПользовательУчетнойЗаписи.Доступность = ВидУчетнойЗаписи = "Персональная";
	ОповеститьОбИзмененииВладельцаУчетнойЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательУчетнойЗаписиПриИзменении(Элемент)
	ОповеститьОбИзмененииВладельцаУчетнойЗаписи();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Записать(Новый Структура("ЗаписатьИЗакрыть"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьПортВходящейПочты()
	Если Объект.ПротоколВходящейПочты = "IMAP" Тогда
		Если Объект.ИспользоватьЗащищенноеСоединениеДляВходящейПочты Тогда
			Объект.ПортСервераВходящейПочты = 993;
		Иначе
			Объект.ПортСервераВходящейПочты = 143;
		КонецЕсли;
	Иначе
		Если Объект.ИспользоватьЗащищенноеСоединениеДляВходящейПочты Тогда
			Объект.ПортСервераВходящейПочты = 995;
		Иначе
			Объект.ПортСервераВходящейПочты = 110;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПортИсходящейПочты()
	Если Объект.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты Тогда
		Объект.ПортСервераИсходящейПочты = 465;
	Иначе
		Объект.ПортСервераИсходящейПочты = 25;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПодтверждениеПолучено(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Записать(Новый Структура("ЗаписатьИЗакрыть"));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	ИспользуетсяПротоколPOP = Объект.ПротоколВходящейПочты = "POP";
	Элементы.POPПередSMTP.Видимость = ИспользуетсяПротоколPOP;
	Элементы.ОставлятьПисьмаНаСервере.Видимость = ИспользуетсяПротоколPOP И ДоступноПолучениеПисем;
	Элементы.CRM_ДатаНачальнойЗагрузки.Видимость = Не ИспользуетсяПротоколPOP;
	
	Элементы.НастройкаПериодаХраненияПисем.Доступность = Объект.ОставлятьКопииСообщенийНаСервере;
	Элементы.ПериодХраненияСообщенийНаСервере.Доступность = УдалятьПисьмаССервера;
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеРазрешенийЗавершение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		РазрешенияПолучены = Истина;
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗапросНаИспользованиеВнешнихРесурсов()
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	Возврат МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(
		Разрешения(), Объект.Ссылка);
	
КонецФункции

&НаСервере
Функция Разрешения()
	
	Результат = Новый Массив;
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	
	Если Объект.ИспользоватьДляОтправки Тогда
		Результат.Добавить(
			МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
				"SMTP",
				Объект.СерверИсходящейПочты,
				Объект.ПортСервераИсходящейПочты,
				НСтр("ru = 'Электронная почта.'")));
	КонецЕсли;
	
	Если Объект.ИспользоватьДляПолучения Тогда
		Результат.Добавить(
			МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
				Объект.ПротоколВходящейПочты,
				Объект.СерверВходящейПочты,
				Объект.ПортСервераВходящейПочты,
				НСтр("ru = 'Электронная почта.'")));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗапроситьПароль(ПараметрыЗаписи)
	ПроверкаПароля = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаПароля", ЭтотОбъект, ПараметрыЗаписи);
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ПроверкаДоступаКУчетнойЗаписи", ,
		ЭтотОбъект, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПароля(Пароль, ПараметрыЗаписи) Экспорт
	Если ТипЗнч(Пароль) = Тип("Строка") Тогда
		ПараметрыЗаписи.Вставить("ПарольВведен");
		ПроверкаПароля = Пароль;
		Записать(ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииВладельцаУчетнойЗаписи()
	Оповестить("ПриИзмененииВидаУчетнойЗаписиЭлектроннойПочты", ВидУчетнойЗаписи = "Персональная", ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

// +CRM
#Область CRM

&НаСервере
// Функция получает список пользователей.
//
// Параметры:
//	ГруппаПользователей	- СправочникСсылка	- Группа, пользователей которой нужно получить.
//
// Возвращаемое значение:
//	СписокЗначений	- Список пользователей.
//
Функция ПолучитьСписокПользователей(ГруппаПользователей = Неопределено, ВключаяВложенные = Ложь)
	мСписокПользователей = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(ГруппаПользователей) И ГруппаПользователей <> Справочники.ГруппыПользователей.ВсеПользователи Тогда
		Запрос.УстановитьПараметр("Ссылка", ГруппаПользователей);
		Запрос.Текст = "ВЫБРАТЬ
           |	ГруппыПользователейСостав.Пользователь
           |ИЗ
           |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
           |ГДЕ";
		Если ВключаяВложенные Тогда
			Запрос.Текст = Запрос.Текст + "
           |	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ(&Ссылка)";
		Иначе	   
			Запрос.Текст = Запрос.Текст + "
           |	ГруппыПользователейСостав.Ссылка = &Ссылка";
		КонецЕсли;   
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
           |	Пользователи.Ссылка КАК Пользователь
           |ИЗ
           |	Справочник.Пользователи КАК Пользователи";
	КонецЕсли;				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаПользователя = мСписокПользователей.Добавить();
		СтрокаПользователя.Значение	= Выборка.Пользователь;
	КонецЦикла;
	Возврат мСписокПользователей;
КонецФункции // ПолучитьСписокПользователей() 	

&НаКлиенте
// Процедура выполняет заполнение списка пользователей на форме.
//
// Параметры:
//	мСписокПользователей	- СписокЗначений	- Список пользователей для заполнения на форме
//
Процедура ЗаполнитьСписокПользователей(мСписокПользователей)
	// Удаляем дубли из списка
	Для Каждого СтрокаСписка Из CRM_СписокПользователей Цикл
		ТекПользователь = мСписокПользователей.НайтиПоЗначению(СтрокаСписка.Пользователь);
		Если НЕ (ТекПользователь = Неопределено) Тогда 
			мСписокПользователей.Удалить(ТекПользователь);
		КонецЕсли;
	КонецЦикла;	
	// Добавляем новых пользователей в список.
	Для Каждого СтрокаСписка Из мСписокПользователей Цикл
		СтрокаПользователя = CRM_СписокПользователей.Добавить();
		СтрокаПользователя.Пользователь	= СтрокаСписка.Значение;
		СтрокаПользователя.Запись = Истина;
	КонецЦикла;	
	CRM_СписокПользователей.Сортировать("Пользователь Возр");
КонецПроцедуры // ЗаполнитьСписокПользователей()	

&НаСервере
// Функция проверяет наличие вложенных групп у группы.
//
// Параметры:
//	ГруппаПользователей	- СпрвочникСсылка	- Группа для проверки.
//
// Возвращаемое значение:
//	Булево	- Наличие вложенных групп.
//
Функция ЕстьВложенныеГруппы(ГруппаПользователей)
	Если НЕ ЗначениеЗаполнено(ГруппаПользователей) Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ГруппаПользователей);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователей.Ссылка
	               |ИЗ
	               |	Справочник.ГруппыПользователей КАК ГруппыПользователей
	               |ГДЕ
	               |	ГруппыПользователей.Родитель = &Родитель";
	Выборка = Запрос.Выполнить();
	Возврат НЕ Выборка.Пустой(); 
КонецФункции // ЕстьВложенныеГруппы()

&НаКлиенте
// Процедура заполнения всеми пользователями.
//
Процедура ЗаполнитьВсемиПользователями(Команда)
	мСписокПользователей = ПолучитьСписокПользователей();
	ЗаполнитьСписокПользователей(мСписокПользователей);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
// Функция проверяет использование функциональной опции "ИспользоватьГруппыПользователей".
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Использование опции.
//
Функция ПолучитьИспользованиеГрупп()
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
КонецФункции // ПолучитьИспользованиеГрупп()
	
&НаКлиенте
// Процедура заполнения по группе пользователей.
//
Процедура ЗаполнитьПоГруппеПользователей(Команда)
	ИспользоватьГруппы = ПолучитьИспользованиеГрупп();
	Если НЕ ИспользоватьГруппы Тогда
		ПоказатьПредупреждение(, "Отключена настройка ""Использовать группы пользователей""");
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоГруппеПользователейПродолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ГруппыПользователей.ФормаВыбораГруппы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппеПользователейПродолжение(ГруппаПользователей, ДополнительныеПараметры) Экспорт
	Если ГруппаПользователей <> Неопределено Тогда
		ВключаяВложенные = ЕстьВложенныеГруппы(ГруппаПользователей);
		Если ВключаяВложенные Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоГруппеПользователейЗавершение", ЭтотОбъект, ГруппаПользователей);
			ПоказатьВопрос(ОписаниеОповещения, "Загрузить также пользователей вложенных групп?", РежимДиалогаВопрос.ДаНет, 0);
		Иначе
			ЗаполнитьПоГруппеПользователейЗавершение(Неопределено, ГруппаПользователей)
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппеПользователейЗавершение(Ответ, ГруппаПользователей) Экспорт
	Если Ответ  = КодВозвратаДиалога.Да Тогда
		ВключаяВложенные = Истина;
	Иначе	
		ВключаяВложенные = Ложь;
	КонецЕсли;			
	мСписокПользователей = ПолучитьСписокПользователей(ГруппаПользователей, ВключаяВложенные);
	ЗаполнитьСписокПользователей(мСписокПользователей);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура очистки списка пользователей.
//
Процедура ОчиститьСписок(Команда)
	ТД = Элементы.CRM_СписокПользователей.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьСписокЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Все пользователи из списка будут удалены. Продолжить?", РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры // ОчиститьСписок()

&НаКлиенте
Процедура ОчиститьСписокЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		CRM_СписокПользователей.Очистить();
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры // ОчиститьСписок()

&НаКлиенте
// Процедура заполнения подбором.
//
Процедура Подбор(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",				Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",		Истина);
	ПараметрыФормы.Вставить("ВыборГруппПользователей",	Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",		Ложь);
	ФормаПодбора = ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НаборРегистра = РегистрыСведений.CRM_УчетныеЗаписиЭлектроннойПочты.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.УчетнаяЗапись.Установить(Объект.Ссылка);
	НаборРегистра.Прочитать();
	ТаблицаНабора = НаборРегистра.Выгрузить();
	НаборРегистра.Очистить();
	// Запишем данные о пользователях учетной записи в регистр.
	Для Каждого СтрокаПользователя Из CRM_СписокПользователей Цикл
		СтрокаНабора = НаборРегистра.Добавить();
		СтрокаНабора.УчетнаяЗапись	= Объект.Ссылка;
		СтрокаНабора.Пользователь	= СтрокаПользователя.Пользователь;
		СтрокаНабора.Запись			= СтрокаПользователя.Запись;
		СтрокаНабора.Администрирование	= СтрокаПользователя.Администрирование;
		СтрокаТаблицыНабора = ТаблицаНабора.Найти(Объект.Ссылка, "УчетнаяЗапись");
		СтрокаНабора.Основная = ?(СтрокаТаблицыНабора = Неопределено, Ложь, СтрокаТаблицыНабора.Основная);
	КонецЦикла;
	НаборРегистра.Записать();
	
	МенеджерНастроек = РегистрыСведений.НастройкиУчетныхЗаписейЭлектроннойПочты.СоздатьМенеджерЗаписи();
	МенеджерНастроек.УчетнаяЗаписьЭлектроннойПочты = Объект.Ссылка;
	МенеджерНастроек.Прочитать();
	Если МенеджерНастроек.ОтветственныйЗаОбработкуПисем <> ОтветственныйЗаОбработкуПисем Тогда
		МенеджерНастроек.УчетнаяЗаписьЭлектроннойПочты = Объект.Ссылка;
		МенеджерНастроек.ОтветственныйЗаОбработкуПисем = ОтветственныйЗаОбработкуПисем;
		МенеджерНастроек.Записать(Истина);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура CRM_СписокПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",				Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",		Ложь);
	ПараметрыФормы.Вставить("ВыборГруппПользователей",	Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",		Истина);
	ФормаПодбора = ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаСервере
// Процедура заполняет таблицу пользователей учетной записи.
//
Процедура ИнициализироватьДанные()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.Администрирование,
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.Запись
	               |ИЗ
	               |	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	               |ГДЕ
	               |	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = &УчетнаяЗапись";
	ВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатовЗапроса.Следующий() Цикл
		СтрокаПользователя = CRM_СписокПользователей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПользователя, ВыборкаРезультатовЗапроса);
	КонецЦикла;
	CRM_СписокПользователей.Сортировать("Пользователь Возр");
КонецПроцедуры//

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		мСписокПользователей = Новый СписокЗначений;
		мСписокПользователей.ЗагрузитьЗначения(ВыбранноеЗначение);
		ЗаполнитьСписокПользователей(мСписокПользователей);
		Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		мСписокПользователей = Новый СписокЗначений;
		мСписокПользователей.Добавить(ВыбранноеЗначение);
		ЗаполнитьСписокПользователей(мСписокПользователей);
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПисьмаУчетнойЗаписиЗагружены() 

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	
	Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	ДатыПоследнейЗагрузкиПочтовыхСообщений.УчетнаяЗапись,
	                |	ДатыПоследнейЗагрузкиПочтовыхСообщений.ДатаЗагрузкиПисем
	                |ИЗ
	                |	РегистрСведений.ДатыПоследнейЗагрузкиПочтовыхСообщений КАК ДатыПоследнейЗагрузкиПочтовыхСообщений
	                |ГДЕ
	                |	ДатыПоследнейЗагрузкиПочтовыхСообщений.УчетнаяЗапись = &УчетнаяЗапись";
					
	Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();	

КонецФункции // ПисьмаУчетнойЗаписиЗагружены()

&НаКлиенте
Процедура НастройкиРаботыСПочтой(Команда)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущаяСтраница", "ЭлектроннаяПочта");
	ОткрытьФорму("ОбщаяФорма.CRM_ПерсональныеНастройки", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,	ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИсточникЛидовПриИзменении(Элемент)
	Элементы.CRM_УказыватьПричинуОтклонения.Видимость = Объект.CRM_ИсточникЛидов;
	Если НЕ Объект.CRM_ИсточникЛидов Тогда
		Объект.CRM_УказыватьПричинуОтклонения = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
// -CRM