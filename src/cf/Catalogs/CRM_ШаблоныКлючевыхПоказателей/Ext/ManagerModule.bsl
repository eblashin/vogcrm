Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(ЭлементСтруктурыЦелей, ЭлементКопирования = Неопределено) Экспорт
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, СхемаКомпоновкиДанныхРасшифровки, НастройкиКомпоновкиДанныхРасшифровки, НаименованиеСхемы");
	
	Если НЕ (ЭлементКопирования = Неопределено) Тогда
		ЭлементСтруктурыЦелейСсылка = ЭлементКопирования;
	ИначеЕсли ТипЗнч(ЭлементСтруктурыЦелей) = Тип("ДанныеФормыСтруктура") Тогда
		ЭлементСтруктурыЦелейСсылка = ЭлементСтруктурыЦелей.Ссылка;
	Иначе
		ЭлементСтруктурыЦелейСсылка = ЭлементСтруктурыЦелей;
	КонецЕсли;

	СхемаКомпоновкиДанных = Неопределено;
	СхемаКомпоновкиДанныхРасшифровки = Неопределено;
	// Получим схему компоновки данных
	Если ЗначениеЗаполнено(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных) ИЛИ ЭлементСтруктурыЦелейСсылка.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено И НЕ ЭлементСтруктурыЦелейСсылка.Пустая() Тогда
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЭлементСтруктурыЦелейСсылка, ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.НастройкиКомпоновкиДанных);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ИначеЕсли НЕ ЭлементСтруктурыЦелейСсылка.Пустая() Тогда
		СхемаКомпоновкиДанных = ЭлементСтруктурыЦелейСсылка.ХранилищеСхемыКомпоновкиДанных.Получить();
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		НастройкиКомпоновкиДанных = ЭлементСтруктурыЦелейСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанныхРасшифровки) ИЛИ ЭлементСтруктурыЦелейСсылка.ХранилищеСхемыКомпоновкиДанныхРасшифровки.Получить() = Неопределено И НЕ ЭлементСтруктурыЦелейСсылка.Пустая() Тогда
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЭлементСтруктурыЦелейСсылка, ЭлементСтруктурыЦелей.СхемаКомпоновкиДанныхРасшифровки);
		СхемаКомпоновкиДанныхРасшифровки = СхемаИНастройки.СхемаКомпоновкиДанных;
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанныхРасшифровки));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.НастройкиКомпоновкиДанных);
		НастройкиРасшифровки = КомпоновщикНастроек.ПолучитьНастройки();
	ИначеЕсли НЕ ЭлементСтруктурыЦелейСсылка.Пустая() Тогда
		СхемаКомпоновкиДанныхРасшифровки = ЭлементСтруктурыЦелейСсылка.ХранилищеСхемыКомпоновкиДанныхРасшифровки.Получить();
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанныхРасшифровки));
		НастройкиКомпоновкиДанных = ЭлементСтруктурыЦелейСсылка.ХранилищеНастроекКомпоновкиДанныхРасшифровки.Получить();
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
		НастройкиРасшифровки = КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено И ПустаяСтрока(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных) Тогда
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ШаблоннаяСхемаКомпоновкиДанныхПредопределенный");
		Адреса.НаименованиеСхемы = "ШаблоннаяСхемаКомпоновкиДанныхПредопределенный";
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		
	ИначеЕсли СхемаКомпоновкиДанных = Неопределено И Не ПустаяСтрока(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных) Тогда
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных);
		Адреса.НаименованиеСхемы = ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных;
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанныхРасшифровки = Неопределено И ПустаяСтрока(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанныхРасшифровки) Тогда
		СхемаКомпоновкиДанныхРасшифровки = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ШаблоннаяСхемаКомпоновкиДанныхПредопределенный");
		Адреса.НаименованиеСхемы = "ШаблоннаяСхемаКомпоновкиДанныхПредопределенный";
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		НастройкиРасшифровки = КомпоновщикНастроек.ПолучитьНастройки();
	ИначеЕсли СхемаКомпоновкиДанныхРасшифровки = Неопределено И Не ПустаяСтрока(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанныхРасшифровки) Тогда
		СхемаКомпоновкиДанныхРасшифровки = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанныхРасшифровки);
		Адреса.НаименованиеСхемы = ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных;
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		НастройкиРасшифровки = КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
	
	ОтключитьОтборыПоФункциональнымОпциям(СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки);
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	Адреса.СхемаКомпоновкиДанныхРасшифровки = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанныхРасшифровки, Новый УникальныйИдентификатор());
	
	
	//Настройки = ЭлементСтруктурыЦелейСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	//НастройкиРасшифровки = ЭлементСтруктурыЦелейСсылка.ХранилищеНастроекКомпоновкиДанныхРасшифровки.Получить();
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		ОтключитьОтборыПоФункциональнымОпциям(Настройки);
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиРасшифровки) Тогда
		ОтключитьОтборыПоФункциональнымОпциям(НастройкиРасшифровки);
		Адреса.НастройкиКомпоновкиДанныхРасшифровки = ПоместитьВоВременноеХранилище(НастройкиРасшифровки, Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции


// Функция возвращает структуру с синонимом и схемой компоновки данных по имени макета
//
// Параметры:
//	ЦельСсылка - Ссылка, СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить схему
//	ИмяМакета - Строка, Неопределено - имя получаемого макета схемы компоновки данных
//
// Возвращаемое значение:
//	Структура - Описание - Строка - синоним получаемого макета
//				СхемаКомпоновкиДанных - СхемаКомпоновкиДанных, Неопределено - найденная схема компоновки данных
//				НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных, Неопределено - найденные настройки компоновки данных
//
Функция ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЦельСсылка, ИмяМакета = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание",                  "");
	ВозвращаемоеЗначение.Вставить("СхемаКомпоновкиДанных",     Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкиКомпоновкиДанных", Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктураЦелей.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	СтруктураЦелей.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных 
	|ИЗ
	|	Справочник.CRM_ШаблоныКлючевыхПоказателей КАК СтруктураЦелей
	|ГДЕ
	|	СтруктураЦелей.Ссылка = &ЦельСсылка");
	
	Запрос.УстановитьПараметр("ЦельСсылка", ЦельСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение.Описание = ИмяМакета;
		ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
		ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
		
	Иначе
		
		Макет = Метаданные.НайтиПоТипу(ТипЗнч(ЦельСсылка)).Макеты.Найти(ИмяМакета);
		Если НЕ Макет = Неопределено Тогда
			ВозвращаемоеЗначение.Описание = Макет.Синоним;
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет(ИмяМакета);
			Если Выборка.Следующий() Тогда
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ШаблоныСхемыКомпоновкиДанных() Экспорт
	
	Шаблоны = Новый Массив;
	
	Для каждого Макет из Метаданные.Справочники.CRM_ШаблоныКлючевыхПоказателей.Макеты Цикл
		
		Если Макет.ТипМакета <> Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Шаблоны.Добавить(Новый Структура("Имя, Синоним", Макет.Имя, Макет.Синоним));
		
	КонецЦикла;
	
	Возврат Шаблоны;
	
КонецФункции


Процедура ОтключитьОтборыПоФункциональнымОпциям(Настройки)
	ИспользоватьПартнеровКакКонтрагентов		= Истина;
	ИспользоватьНесколькоОрганизаций			= Истина;
	ИспользоватьНесколькоКасс					= Истина;
	ИспользоватьНесколькоРасчетныхСчетов		= Истина;
	ИспользоватьХарактеристикиНоменклатуры		= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	УчитыватьСебестоимостьТоваровПоВидамЗапасов	= Истина;
	ИспользоватьКлассификациюКлиентов			= ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке")
	ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж");
	
	Отборы = Настройки.Отбор.Элементы;
	ИзменяемыеОтборы = Новый Соответствие;
	Для Каждого Отбор Из Отборы Цикл
		Если ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ИзменяемыеОтборы.Вставить(Отбор.ЛевоеЗначение, Отбор);
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Контрагент");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоОрганизаций Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Организация");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоКасс Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Касса");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоРасчетныхСчетов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "БанковскийСчет");
	КонецЕсли;
	
	Если Не ИспользоватьХарактеристикиНоменклатуры Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Характеристика");
	КонецЕсли;
	
	Если Не УчитыватьСебестоимостьТоваровПоВидамЗапасов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "ВидЗапасов");
	КонецЕсли;
	
	Если Не ИспользоватьКлассификациюКлиентов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Класс");
	КонецЕсли;
КонецПроцедуры

Процедура ОтключитьОтбор(Настройки, ИзменяемыеОтборы, ИмяПоля)
	ПроверяемоеПоле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	УдаляемыйОтбор = ИзменяемыеОтборы.Получить(ПроверяемоеПоле);
	Если Не УдаляемыйОтбор = Неопределено Тогда
		Настройки.Отбор.Элементы.Удалить(УдаляемыйОтбор);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеПоказатели(ПереданныйПоказатель = Неопределено) Экспорт
	//ЗабытыеКлиенты
	Если ПереданныйПоказатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗабытыеКлиенты Или ПереданныйПоказатель = Неопределено Тогда
		Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗабытыеКлиенты.ПолучитьОбъект();
		Показатель.Наименование = "Забытые клиенты";
		Показатель.КраткоеНаименование = "Забытые клиенты";
		Показатель.ФормулаРасчета = "количество клиентов у которых нет активного документа Интерес";
		Показатель.Описание = "ДАННЫЕ НА ОСНОВЕ КОТОРЫХ РАССЧИТЫВАЕТСЯ ПОКАЗАТЕЛЬ
		|
		|Формируются данные по клиентам закрепленным за менеджером и имеющим статус отличный от ""не работаем"" и по которым нет ни одного активного (открытого) документа Интерес.
		|
		|РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ПОКАЗАТЕЛЯ
		|
		|Рекомендуемое целевое значение показателя:  0 клиентов ";
		Показатель.КонтролируемыйПоказатель = "Количество";
		Показатель.ЦелевойТренд = "Минимум";
		Показатель.КратностьЗначений = "НеИзменять";
		Показатель.ДробнаяЧасть = "Целое";
		Показатель.ПериодАнализа = "День";
		Показатель.ПериодАктуальности = "День";
		Показатель.Виджет = Справочники.CRM_Виджеты.ЗабытыеКлиенты;
		ОбъектВиджет = Показатель.Виджет.ПолучитьОбъект();
		ОбъектВиджет.Наименование = Показатель.КраткоеНаименование;
		ОбъектВиджет.ИсточникДанных = Показатель.Ссылка;
		ОбъектВиджет.Записать();
		Показатель.ПериодОбновления = 3600;
		Показатель.ЗначениеПериодаАктуальности = 1;
		Показатель.ЕдиницаИзмерения = Справочники.CRM_ЕдиницыИзмеренияПоказателей.шт;
		Показатель.СхемаКомпоновкиДанных = "ЗабытыеКлиенты";
		Показатель.СхемаКомпоновкиДанныхРасшифровки = "ЗабытыеКлиенты";
		Показатель.РасчитыватьРегламентнымЗаданием = Истина;
		Показатель.ТекстЗапросаРасчетаДинамикиПоказателя = "ВЫБРАТЬ
		|	CRM_Интерес.Партнер
		|ПОМЕСТИТЬ тмпАктивныеИнтересы
		|ИЗ
		|	Документ.CRM_Интерес КАК CRM_Интерес
		|ГДЕ
		|	НЕ CRM_Интерес.Завершен
		|	И CRM_Интерес.Ответственный = &Менеджер
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_Интерес.Партнер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Партнеры.Ссылка) КАК Значение,
		|	Партнеры.ОсновнойМенеджер КАК Менеджер
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.ОсновнойМенеджер = &Менеджер
		|	И НЕ Партнеры.Ссылка В
		|				(ВЫБРАТЬ
		|					тмпАктивныеИнтересы.Партнер
		|				ИЗ
		|					тмпАктивныеИнтересы КАК тмпАктивныеИнтересы)
		|	И Партнеры.Клиент
		|
		|СГРУППИРОВАТЬ ПО
		|	Партнеры.ОсновнойМенеджер";
		//СКД
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ЗабытыеКлиенты");
		Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
		//Расшифровка
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ЗабытыеКлиенты");
		Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(Настройки);
		Показатель.Записать();
	КонецЕсли;
	//ЗагрузкаКалендаря
	Если ПереданныйПоказатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗагрузкаКалендаря Или ПереданныйПоказатель = Неопределено Тогда
		Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ЗагрузкаКалендаря.ПолучитьОбъект();
		Показатель.Наименование = "Загрузка календаря";
		Показатель.КраткоеНаименование = "Загрузка календаря";
		Показатель.ФормулаРасчета = "сумма баллов по всем взаимодействиям в состоянии Завершено";
		Показатель.Описание = "ДАННЫЕ НА ОСНОВЕ КОТОРЫХ РАССЧИТЫВАЕТСЯ ПОКАЗАТЕЛЬ
		|
		|Факт формируется, как сумма баллов по всем Взаимодействиям, которые были введены в документе Интерес в состоянии отличном от ""Отменено"". При суммировании баллов по Взаимодействиям используются баллы, которые настроены в решении для каждого вида этих Взаимодействий.
		|	
		|РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ПОКАЗАТЕЛЯ
		|	
		|Показатель отслеживает загрузку менеджеров при работе с клиентами как по уже отработанным взаимодействиям, так и по запланированным - насколько равномерно менеджеры планируют свою работу, есть ли перегруз в работе или наоборот свободное время, ничем не занятое. ";
		Показатель.КонтролируемыйПоказатель = "Сумма";
		Показатель.ЦелевойТренд = "Максимум";
		Показатель.КратностьЗначений = "НеИзменять";
		Показатель.ДробнаяЧасть = "Целое";
		Показатель.ПериодАнализа = "День";
		Показатель.ПериодАктуальности = "Час";
		Показатель.Виджет = Справочники.CRM_Виджеты.ЗагрузкаКалендаря;
		ОбъектВиджет = Показатель.Виджет.ПолучитьОбъект();
		ОбъектВиджет.Наименование = Показатель.КраткоеНаименование;
		ОбъектВиджет.ИсточникДанных = Показатель.Ссылка;
		ОбъектВиджет.Записать();
		Показатель.ПериодОбновления = 3600;
		Показатель.ЗначениеПериодаАктуальности = 1;
		Показатель.СхемаКомпоновкиДанных = "ЗагрузкаКалендаря";
		Показатель.ЕдиницаИзмерения = Справочники.CRM_ЕдиницыИзмеренияПоказателей.Балл;
		Показатель.СхемаКомпоновкиДанныхРасшифровки = "ЗагрузкаКалендаря";
		//СКД
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ЗагрузкаКалендаря");
		Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
		//Расшифровка
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ЗагрузкаКалендаря");
		Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(Настройки);
		Показатель.Записать();
	КонецЕсли;
	//КасанияНаОдногоКлиента
	Если ПереданныйПоказатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.КасанияНаОдногоКлиента Или ПереданныйПоказатель = Неопределено Тогда
		Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.КасанияНаОдногоКлиента.ПолучитьОбъект();
		Показатель.Наименование = "Касания на одного клиента";
		Показатель.КраткоеНаименование = "Касания на одного клиента";
		Показатель.ФормулаРасчета = "Среднее количество коммуникаций с одним клиентом";
		Показатель.Описание = "ДАННЫЕ НА ОСНОВЕ КОТОРЫХ РАССЧИТЫВАЕТСЯ ПОКАЗАТЕЛЬ
		|
		|В показатель данные формируются по документам ""Телефонный звонок"", ""Электронное письмо входящее"", ""Электронное письмо исходящее"", ""Мероприятие"". Выбираются все факты взаимодействия с клиентами, подсчитывается количество всех клиентов при этом и общее количество документов делится на количество клиентов в них. 
		|
		|РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ПОКАЗАТЕЛЯ
		|
		|Данный показатель рекомендуется использовать для контроля качества взаимодействий с клиентами менеджеров. Целевое значение при этом рекомендуется поставить в значение 7 (семь), т.к. именно столько нужно менеджеру выполнить коммуникаций с клиентом для совершения успешной сделки (совершения продажи клиенту).
		|	
		|Рекомендуемое целевое значение показателя для менеджера:  7 касаний.";
		Показатель.КонтролируемыйПоказатель = "Количество";
		Показатель.ЦелевойТренд = "Максимум";
		Показатель.КратностьЗначений = "НеИзменять";
		Показатель.ДробнаяЧасть = "Целое";
		Показатель.ПериодАнализа = "Месяц";
		Показатель.ПериодАктуальности = "День";
		Показатель.Виджет = Справочники.CRM_Виджеты.КасанияНаОдногоКлиента;
		ОбъектВиджет = Показатель.Виджет.ПолучитьОбъект();
		ОбъектВиджет.Наименование = Показатель.КраткоеНаименование;
		ОбъектВиджет.ИсточникДанных = Показатель.Ссылка;
		ОбъектВиджет.Записать();
		Показатель.ПериодОбновления = 3600;
		Показатель.ЗначениеПериодаАктуальности = 1;
		Показатель.ЕдиницаИзмерения = Справочники.CRM_ЕдиницыИзмеренияПоказателей.шт;
		Показатель.СхемаКомпоновкиДанных = "КасанияНаОдногоКлиента";
		Показатель.СхемаКомпоновкиДанныхРасшифровки = "КасанияНаОдногоКлиента";
		//СКД
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("КасанияНаОдногоКлиента");
		Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
		//Расшифровка
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("КасанияНаОдногоКлиента");
		Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(Настройки);
		Показатель.Записать();
	КонецЕсли;
	//КачествоКлиентскойБазы
	Если ПереданныйПоказатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.КачествоКлиентскойБазы Или ПереданныйПоказатель = Неопределено Тогда
		Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.КачествоКлиентскойБазы.ПолучитьОбъект();
		Показатель.Наименование = "Качество клиентской базы";
		Показатель.КраткоеНаименование = "Качество клиентской базы";
		Показатель.ФормулаРасчета = "Среднее арифметическое значение по клиентам в разрезе аналитики";
		Показатель.Описание = "ДАННЫЕ НА ОСНОВЕ КОТОРЫХ РАССЧИТЫВАЕТСЯ ПОКАЗАТЕЛЬ
		|
		|В показатель данные формируются по факту заполнения контактной информации в карточке клиента у имеющихся контактов с учетом того, что должен быть указан минимум один телефон и один электронный адрес. Также анализируется заполнение маркетинговых данных по клиенту расположенных на закладке ""Портрет"" в карточке клиента. 
		|
		|РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ПОКАЗАТЕЛЯ
		|
		|Показатель рекомендуется использовать, как постоянный, т.к. он отражает полноту заполнения, а значит качество клиентской базы. Одним из важных моментов работы менеджеров является поддержание клиентской базы в актуальном состоянии. При создании клиентской базы с нуля рекомендуется понизить целевое значение показателя и со временем его поднимать до 90-95 %. 100 % показатель может быть только в случае, если новые клиенты в компанию почти не приходят.
		|	
		|Рекомендуемое целевое значение показателя:  50 % (при начале ведения клиентской базы) и далее до 95 %.";
		Показатель.КонтролируемыйПоказатель = "Количество";
		Показатель.ЦелевойТренд = "Максимум";
		Показатель.КратностьЗначений = "НеИзменять";
		Показатель.ДробнаяЧасть = "Целое";
		Показатель.ПериодАнализа = "Месяц";
		Показатель.ПериодАктуальности = "День";
		Показатель.Виджет = Справочники.CRM_Виджеты.КачествоКлиентскойБазы;
		ОбъектВиджет = Показатель.Виджет.ПолучитьОбъект();
		ОбъектВиджет.Наименование = Показатель.КраткоеНаименование;
		ОбъектВиджет.ИсточникДанных = Показатель.Ссылка;
		ОбъектВиджет.Записать();
		Показатель.ПериодОбновления = 3600;
		Показатель.ЗначениеПериодаАктуальности = 1;
		Показатель.ЕдиницаИзмерения = Справочники.CRM_ЕдиницыИзмеренияПоказателей.Процент;
		Показатель.СхемаКомпоновкиДанных = "КачествоКлиентскойБазы";
		Показатель.СхемаКомпоновкиДанныхРасшифровки = "КачествоКлиентскойБазы";
		Показатель.РасчитыватьРегламентнымЗаданием = Истина;
		Показатель.ТекстЗапросаРасчетаДинамикиПоказателя = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Партнеры.ОсновнойМенеджер КАК Менеджер,
			|	ВЫРАЗИТЬ(СРЕДНЕЕ((Партнеры.CRM_ПроцентЗаполненностиПортрет + Партнеры.CRM_ПроцентЗаполненностиКИ) / 2) КАК ЧИСЛО(15, 2)) КАК Значение
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|ГДЕ
			|	НЕ Партнеры.ПометкаУдаления
			|	И Партнеры.ОсновнойМенеджер = &Менеджер
			|
			|СГРУППИРОВАТЬ ПО
			|	Партнеры.ОсновнойМенеджер";
		//СКД
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("КачествоКлиентскойБазы");
		Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
		//Расшифровка
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("КачествоКлиентскойБазы");
		Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(Настройки);
		Показатель.Записать();
	КонецЕсли;
	//ОбращенияКлиентов
	Если ПереданныйПоказатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ОбращенияКлиентов Или ПереданныйПоказатель = Неопределено Тогда
		Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ОбращенияКлиентов.ПолучитьОбъект();
		Показатель.Наименование = "Просрочено взаимодействий";
		Показатель.КраткоеНаименование = "Просрочено взаимодействий";
		Показатель.ФормулаРасчета = "Просроченными считаются все Взаимодействия, с крайнего срока исполнения которых прошло количество часов указанное в целевом значение и большее. ";
		Показатель.Описание = "ДАННЫЕ НА ОСНОВЕ КОТОРЫХ РАССЧИТЫВАЕТСЯ ПОКАЗАТЕЛЬ
		|
		|В показатель данные формируются по документам Интерес у которых просрочено хотя бы одно ранее запланированное Взаимодействие (находятся на закладке ""Следующие действия""). 
		|
		|РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ПОКАЗАТЕЛЯ
		|
		|Данный показатель рекомендуется использовать для оценки массовых просроченных взаимодействий.
		|	
		|Рекомендуемое целевое значение показателя:  4 часа.";
		Показатель.КонтролируемыйПоказатель = "Сумма";
		Показатель.ЦелевойТренд = "Минимум";
		Показатель.КратностьЗначений = "НеИзменять";
		Показатель.ДробнаяЧасть = "Целое";
		Показатель.ПериодАнализа = "День";
		Показатель.ПериодАктуальности = "День";
		Показатель.Виджет = Справочники.CRM_Виджеты.ОбращенияКлиентов;
		ОбъектВиджет = Показатель.Виджет.ПолучитьОбъект();
		ОбъектВиджет.Наименование = Показатель.КраткоеНаименование;
		ОбъектВиджет.ИсточникДанных = Показатель.Ссылка;
		ОбъектВиджет.Записать();
		Показатель.ПериодОбновления = 3600;
		Показатель.ЗначениеПериодаАктуальности = 1;
		Показатель.ЕдиницаИзмерения = Справочники.CRM_ЕдиницыИзмеренияПоказателей.шт;
		Показатель.СхемаКомпоновкиДанных = "ОбращенияКлиентов";
		Показатель.СхемаКомпоновкиДанныхРасшифровки = "ОбращенияКлиентов";
		Показатель.РасчитыватьРегламентнымЗаданием = Истина;
		Показатель.ТекстЗапросаРасчетаДинамикиПоказателя = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ЗадачиПользователей.Пользователь КАК Менеджер,
		|	СУММА(1) КАК Значение
		|ИЗ
		|	РегистрСведений.CRM_ЗадачиПользователей КАК CRM_ЗадачиПользователей
		|ГДЕ
		|	CRM_ЗадачиПользователей.Объект ССЫЛКА Документ.CRM_Взаимодействие
		|	И CRM_ЗадачиПользователей.Объект.Первичное
		|	И CRM_ЗадачиПользователей.Статус <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Завершено)
		|	И CRM_ЗадачиПользователей.Статус <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Отменено)
		|	И ВЫБОР
		|			КОГДА РАЗНОСТЬДАТ(CRM_ЗадачиПользователей.КрайнийСрок, &ТекущаяДата, ДЕНЬ) <= 0
		|				ТОГДА РАЗНОСТЬДАТ(CRM_ЗадачиПользователей.КрайнийСрок, &ТекущаяДата, СЕКУНДА) >= 14400
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И CRM_ЗадачиПользователей.Клиент.Клиент
		|	И CRM_ЗадачиПользователей.Пользователь = &Менеджер
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ЗадачиПользователей.Пользователь";
		//СКД
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ОбращенияКлиентов");
		Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
		//Расшифровка
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ОбращенияКлиентов");
		Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(Настройки);
		Показатель.Записать();
	КонецЕсли;
	//Продажи
	Если ПереданныйПоказатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.Продажи Или ПереданныйПоказатель = Неопределено Тогда
		Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.Продажи.ПолучитьОбъект();
		Показатель.Наименование = "Продажи";
		Показатель.КраткоеНаименование = "Продажи";
		Показатель.ФормулаРасчета = "сумма взаиморасчетов деленная на рабочие дни с начала периода";
		Показатель.Описание = "ДАННЫЕ НА ОСНОВЕ КОТОРЫХ РАССЧИТЫВАЕТСЯ ПОКАЗАТЕЛЬ
		|
		|В показатель данные формируются  при указании суммы продаж за период планирования показателя. При сравнении с фактом по продажам, план распределяется на рабочие дни и отслеживается динамика выполнения показателя на дату анализа показателя. 
		|
		|РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ПОКАЗАТЕЛЯ
		|
		|Плановые значения по продажам распределяются по рабочим дням и показатель отслеживает, помимо достижения целевого значения по плану, также динамику выполнения плана относительно текущего дня. Это позволяет менеджеру сориентироваться и предпринять действия по улучшению показателя.";
		Показатель.КонтролируемыйПоказатель = "Сумма";
		Показатель.ЦелевойТренд = "Максимум";
		Показатель.КратностьЗначений = "Тысячи";
		Показатель.ДробнаяЧасть = "Целое";
		Показатель.ПериодАнализа = "Месяц";
		Показатель.ПериодАктуальности = "День";
		Показатель.Виджет = Справочники.CRM_Виджеты.Продажи;
		ОбъектВиджет = Показатель.Виджет.ПолучитьОбъект();
		ОбъектВиджет.Наименование = Показатель.КраткоеНаименование;
		ОбъектВиджет.ИсточникДанных = Показатель.Ссылка;
		ОбъектВиджет.Записать();
		Показатель.ПериодОбновления = 3600;
		Показатель.ЗначениеПериодаАктуальности = 1;
		Показатель.ЕдиницаИзмерения = Справочники.CRM_ЕдиницыИзмеренияПоказателей.руб;
		Показатель.СхемаКомпоновкиДанных = "Продажи";
		Показатель.СхемаКомпоновкиДанныхРасшифровки = "Продажи";
		//СКД
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("Продажи");
		Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
		//Расшифровка
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("Продажи");
		Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(Настройки);
		Показатель.Записать();
	КонецЕсли;
	//ПроведениеВстреч
	Если ПереданныйПоказатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПроведениеВстреч Или ПереданныйПоказатель = Неопределено Тогда
		Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПроведениеВстреч.ПолучитьОбъект();
		Показатель.Наименование = "Проведение встреч";
		Показатель.КраткоеНаименование = "Проведение встреч";
		Показатель.ФормулаРасчета = "количество документов мероприятие";
		Показатель.Описание = "ДАННЫЕ НА ОСНОВЕ КОТОРЫХ РАССЧИТЫВАЕТСЯ ПОКАЗАТЕЛЬ
		|
		|План по встречам распределяется на рабочие дни и отслеживается динамика выполнения показателя на текущую дату.
		|
		|В показатель с признаком ""Факт"" данные формируются по документам ""Мероприятие"".
		|
		|РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ПОКАЗАТЕЛЯ
		|
		|Плановые значения по встречам распределяются по рабочим дням и показатель отслеживает, помимо достижения целевого значения по плану, также динамику выполнения плана относительно текущего дня. Это позволяет менеджеру сориентироваться и предпринять действия по улучшению показателя.";
		Показатель.КонтролируемыйПоказатель = "Сумма";
		Показатель.ЦелевойТренд = "Максимум";
		Показатель.КратностьЗначений = "НеИзменять";
		Показатель.ДробнаяЧасть = "Целое";
		Показатель.ПериодАнализа = "Месяц";
		Показатель.ПериодАктуальности = "День";
		Показатель.Виджет = Справочники.CRM_Виджеты.ПроведениеВстреч;
		ОбъектВиджет = Показатель.Виджет.ПолучитьОбъект();
		ОбъектВиджет.Наименование = Показатель.КраткоеНаименование;
		ОбъектВиджет.ИсточникДанных = Показатель.Ссылка;
		ОбъектВиджет.Записать();
		Показатель.ПериодОбновления = 3600;
		Показатель.ЗначениеПериодаАктуальности = 1;
		Показатель.ЕдиницаИзмерения = Справочники.CRM_ЕдиницыИзмеренияПоказателей.шт;
		Показатель.СхемаКомпоновкиДанных = "ПроведениеВстреч";
		Показатель.СхемаКомпоновкиДанныхРасшифровки = "ПроведениеВстреч";
		//СКД
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ПроведениеВстреч");
		Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
		//Расшифровка
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ПроведениеВстреч");
		Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(Настройки);
		Показатель.Записать();
	КонецЕсли;
	//ТелефонныеЗвонки
	Если ПереданныйПоказатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ТелефонныеЗвонки Или ПереданныйПоказатель = Неопределено Тогда
		Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ТелефонныеЗвонки.ПолучитьОбъект();
		Показатель.Наименование = "Телефонные звонки за день";
		Показатель.КраткоеНаименование = "Телефонные звонки за день";
		Показатель.ФормулаРасчета = "количество телефонных звонков длительность свыше 20 секунд";
		Показатель.Описание = "ДАННЫЕ НА ОСНОВЕ КОТОРЫХ РАССЧИТЫВАЕТСЯ ПОКАЗАТЕЛЬ
		|
		|План распределяется на рабочие дни и отслеживается динамика выполнения показателя на текущую дату.
		|
		|Факт формируется по документам ""Телефонный звонок"" с длительностью звонка более 20 секунд. Т.е. учитываются только целевые телефонные звонки по которым реально было общение с клиентом.
		|
		|РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ПОКАЗАТЕЛЯ
		|
		|Плановые значения по звонкам распределяются по рабочим дням и показатель отслеживает, помимо достижения целевого значения по плану, также динамику выполнения плана относительно текущего дня. Это позволяет менеджеру сориентироваться и предпринять действия по улучшению показателя.";
		Показатель.КонтролируемыйПоказатель = "Сумма";
		Показатель.ЦелевойТренд = "Максимум";
		Показатель.КратностьЗначений = "НеИзменять";
		Показатель.ДробнаяЧасть = "Целое";
		Показатель.ПериодАнализа = "День";
		Показатель.ПериодАктуальности = "День";
		Показатель.Виджет = Справочники.CRM_Виджеты.ТелефонныеЗвонки;
		ОбъектВиджет = Показатель.Виджет.ПолучитьОбъект();
		ОбъектВиджет.Наименование = Показатель.КраткоеНаименование;
		ОбъектВиджет.ИсточникДанных = Показатель.Ссылка;
		ОбъектВиджет.Записать();
		Показатель.ПериодОбновления = 3600;
		Показатель.ЗначениеПериодаАктуальности = 1;
		Показатель.ЕдиницаИзмерения = Справочники.CRM_ЕдиницыИзмеренияПоказателей.шт;
		Показатель.СхемаКомпоновкиДанных = "ТелефонныеЗвонки";
		Показатель.СхемаКомпоновкиДанныхРасшифровки = "ТелефонныеЗвонки";
		//СКД
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ТелефонныеЗвонки");
		Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
		//Расшифровка
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ТелефонныеЗвонки");
		Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(Настройки);
		Показатель.Записать();
	КонецЕсли;
	//ВысланныеКП
	Если ПереданныйПоказатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ВысланныеКП Или ПереданныйПоказатель = Неопределено Тогда
		Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ВысланныеКП.ПолучитьОбъект();
		Показатель.Наименование = "Кол-во выставленных коммерческих предложений";
		Показатель.КраткоеНаименование = "Выставленные КП";
		Показатель.ФормулаРасчета = "количество документов Коммерческое предложение";
		Показатель.Описание = "ДАННЫЕ НА ОСНОВЕ КОТОРЫХ РАССЧИТЫВАЕТСЯ ПОКАЗАТЕЛЬ
		|
		|Данные формируются  по созданным документам Коммерческое предложение. При сравнении с фактом, план распределяется на рабочие дни и отслеживается динамика выполнения показателя на дату анализа показателя. 
		|
		|РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ПОКАЗАТЕЛЯ
		|
		|Плановые значения распределяются по рабочим дням и показатель отслеживает, помимо достижения целевого значения по плану, также динамику выполнения плана относительно текущего дня. Это позволяет менеджеру сориентироваться и предпринять действия по улучшению показателя.";
		Показатель.КонтролируемыйПоказатель = "Количество";
		Показатель.ЦелевойТренд = "Максимум";
		Показатель.КратностьЗначений = "НеИзменять";
		Показатель.ДробнаяЧасть = "Целое";
		Показатель.ПериодАнализа = "Месяц";
		Показатель.ПериодАктуальности = "День";
		Показатель.Виджет = Справочники.CRM_Виджеты.ВысланныеКП;
		ОбъектВиджет = Показатель.Виджет.ПолучитьОбъект();
		ОбъектВиджет.Наименование = Показатель.КраткоеНаименование;
		ОбъектВиджет.ИсточникДанных = Показатель.Ссылка;
		ОбъектВиджет.Записать();
		Показатель.ПериодОбновления = 3600;
		Показатель.ЗначениеПериодаАктуальности = 1;
		Показатель.ЕдиницаИзмерения = Справочники.CRM_ЕдиницыИзмеренияПоказателей.шт;
		Показатель.СхемаКомпоновкиДанных = "ВысланныеКП";
		Показатель.СхемаКомпоновкиДанныхРасшифровки = "ВысланныеКП";
		//СКД
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ВысланныеКП");
		Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
		//Расшифровка
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ВысланныеКП");
		Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(Настройки);
		Показатель.Записать();
	КонецЕсли;
	//ВыставленныеСчета
	Если ПереданныйПоказатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ВыставленныеСчета Или ПереданныйПоказатель = Неопределено Тогда
		Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ВыставленныеСчета.ПолучитьОбъект();
		Показатель.Наименование = "Кол-во выставленных счетов на оплату";
		Показатель.КраткоеНаименование = "Выставленные счета";
		Показатель.ФормулаРасчета = "Количество документов Счета на оплату";
		Показатель.Описание = "ДАННЫЕ НА ОСНОВЕ КОТОРЫХ РАССЧИТЫВАЕТСЯ ПОКАЗАТЕЛЬ
		|
		|Данные формируются  по созданным документам Счет на оплату. При сравнении с фактом, план распределяется на рабочие дни и отслеживается динамика выполнения показателя на дату анализа показателя. 
		|
		|РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ПОКАЗАТЕЛЯ
		|
		|Плановые значения распределяются по рабочим дням и показатель отслеживает, помимо достижения целевого значения по плану, также динамику выполнения плана относительно текущего дня. Это позволяет менеджеру сориентироваться и предпринять действия по улучшению показателя.";
		Показатель.КонтролируемыйПоказатель = "Количество";
		Показатель.ЦелевойТренд = "Максимум";
		Показатель.КратностьЗначений = "НеИзменять";
		Показатель.ДробнаяЧасть = "Целое";
		Показатель.ПериодАнализа = "Месяц";
		Показатель.ПериодАктуальности = "День";
		Показатель.Виджет = Справочники.CRM_Виджеты.ВыставленныеСчета;
		ОбъектВиджет = Показатель.Виджет.ПолучитьОбъект();
		ОбъектВиджет.Наименование = Показатель.КраткоеНаименование;
		ОбъектВиджет.ИсточникДанных = Показатель.Ссылка;
		ОбъектВиджет.Записать();
		Показатель.ПериодОбновления = 3600;
		Показатель.ЗначениеПериодаАктуальности = 1;
		Показатель.ЕдиницаИзмерения = Справочники.CRM_ЕдиницыИзмеренияПоказателей.шт;
		Показатель.СхемаКомпоновкиДанных = "ВыставленныеСчета";
		Показатель.СхемаКомпоновкиДанныхРасшифровки = "ВыставленныеСчета";
		//СКД
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ВыставленныеСчета");
		Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
		//Расшифровка
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ВыставленныеСчета");
		Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(Настройки);
		Показатель.Записать();
	КонецЕсли;
	//ТеплыеКлиенты
	Если ПереданныйПоказатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ТеплыеКлиенты Или ПереданныйПоказатель = Неопределено Тогда
		Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.ТеплыеКлиенты.ПолучитьОбъект();
		Показатель.Наименование = "Кол-во теплых клиентов";
		Показатель.КраткоеНаименование = "Теплые клиенты";
		Показатель.ФормулаРасчета = "количество интересов у которых вероятнсость больше или равно 60 %";
		Показатель.Описание = "ДАННЫЕ НА ОСНОВЕ КОТОРЫХ РАССЧИТЫВАЕТСЯ ПОКАЗАТЕЛЬ
		|
		|Данные формируются по наличию Интересов в работе у которых состояние вероятности больше или равно 60 %.";
		Показатель.КонтролируемыйПоказатель = "Количество";
		Показатель.ЦелевойТренд = "Максимум";
		Показатель.КратностьЗначений = "НеИзменять";
		Показатель.ДробнаяЧасть = "Целое";
		Показатель.ПериодАнализа = "День";
		Показатель.ПериодАктуальности = "День";
		Показатель.Виджет = Справочники.CRM_Виджеты.ТеплыеКлиенты;
		ОбъектВиджет = Показатель.Виджет.ПолучитьОбъект();
		ОбъектВиджет.Наименование = Показатель.КраткоеНаименование;
		ОбъектВиджет.ИсточникДанных = Показатель.Ссылка;
		ОбъектВиджет.Записать();
		Показатель.ПериодОбновления = 3600;
		Показатель.ЗначениеПериодаАктуальности = 1;
		Показатель.СхемаКомпоновкиДанных = "ТеплыеКлиенты";
		Показатель.ЕдиницаИзмерения = Справочники.CRM_ЕдиницыИзмеренияПоказателей.шт;
		Показатель.СхемаКомпоновкиДанныхРасшифровки = "ТеплыеКлиенты";
		Показатель.РасчитыватьРегламентнымЗаданием = Истина;
		Показатель.ТекстЗапросаРасчетаДинамикиПоказателя = "ВЫБРАТЬ
		|	CRM_Интерес.Ответственный КАК Менеджер,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_Интерес.Ссылка) КАК Значение
		|ИЗ
		|	Документ.CRM_Интерес КАК CRM_Интерес
		|ГДЕ
		|	CRM_Интерес.Ответственный = &Менеджер
		|	И НЕ CRM_Интерес.ПометкаУдаления
		|	И CRM_Интерес.СостояниеИнтереса.ВероятностьСделки >= 60
		|	И НЕ CRM_Интерес.Завершен
		|	И CRM_Интерес.Партнер.Клиент
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_Интерес.Ответственный";
		//СКД
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ТеплыеКлиенты");
		Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
		//Расшифровка
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("ТеплыеКлиенты");
		Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(Настройки);
		Показатель.Записать();
	КонецЕсли;
	//Взаимодействия
	Если ПереданныйПоказатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.Взаимодействия Или ПереданныйПоказатель = Неопределено Тогда
		Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.Взаимодействия.ПолучитьОбъект();
		Показатель.Наименование = "Количество взаимодействий за день";
		Показатель.КраткоеНаименование = "Взаимодействия";
		Показатель.ФормулаРасчета = "количество взаимодействий в состоянии Завершено";
		Показатель.Описание = "ДАННЫЕ НА ОСНОВЕ КОТОРЫХ РАССЧИТЫВАЕТСЯ ПОКАЗАТЕЛЬ
		|
		|Факт формируется, как количество всех Взаимодействий, которые были введены в документе Интерес и у которых заполнен ""Результат"" (отработаны успешно). 
		|
		|РЕКОМЕНДАЦИИ ПО ИСПОЛЬЗОВАНИЮ ПОКАЗАТЕЛЯ
		|
		|Показатель отслеживает результат работы менеджеров при работе с клиентами в разрезе Интересов. ";
		Показатель.КонтролируемыйПоказатель = "Сумма";
		Показатель.ЦелевойТренд = "Максимум";
		Показатель.КратностьЗначений = "НеИзменять";
		Показатель.ДробнаяЧасть = "Целое";
		Показатель.ПериодАнализа = "День";
		Показатель.ПериодАктуальности = "День";
		Показатель.Виджет = Справочники.CRM_Виджеты.Взаимодействия;
		ОбъектВиджет = Показатель.Виджет.ПолучитьОбъект();
		ОбъектВиджет.Наименование = Показатель.КраткоеНаименование;
		ОбъектВиджет.ИсточникДанных = Показатель.Ссылка;
		ОбъектВиджет.Записать();
		Показатель.ПериодОбновления = 3600;
		Показатель.ЗначениеПериодаАктуальности = 1;
		Показатель.СхемаКомпоновкиДанных = "Взаимодействия";
		Показатель.ЕдиницаИзмерения = Справочники.CRM_ЕдиницыИзмеренияПоказателей.шт;
		Показатель.СхемаКомпоновкиДанныхРасшифровки = "Взаимодействия";
		//СКД
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("Взаимодействия");
		Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
		//Расшифровка
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("Взаимодействия");
		Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(Настройки);
		Показатель.Записать();
	КонецЕсли;
	//СреднийЧек
	Если ПереданныйПоказатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.СреднийЧек Или ПереданныйПоказатель = Неопределено Тогда
		Показатель = Справочники.CRM_ШаблоныКлючевыхПоказателей.СреднийЧек.ПолучитьОбъект();
		Показатель.Наименование = "Средний чек";
		Показатель.КраткоеНаименование = "Средний чек";
		Показатель.ФормулаРасчета = "отношение суммы продаж за период  к количеству документов Счета на оплату";
		Показатель.Описание = "ДАННЫЕ НА ОСНОВЕ КОТОРЫХ РАССЧИТЫВАЕТСЯ ПОКАЗАТЕЛЬ
		|
		|Факт сравнивается за период контроля показателя и являест яотношениям всей суммы продаж за это период к количеству документов Счет на оплату по которым продажи были выполнены.";
		Показатель.КонтролируемыйПоказатель = "Сумма";
		Показатель.ЦелевойТренд = "Максимум";
		Показатель.КратностьЗначений = "НеИзменять";
		Показатель.ДробнаяЧасть = "Целое";
		Показатель.ПериодАнализа = "Месяц";
		Показатель.ПериодАктуальности = "День";
		Показатель.Виджет = Справочники.CRM_Виджеты.СреднийЧек;
		ОбъектВиджет = Показатель.Виджет.ПолучитьОбъект();
		ОбъектВиджет.Наименование = Показатель.КраткоеНаименование;
		ОбъектВиджет.ИсточникДанных = Показатель.Ссылка;
		ОбъектВиджет.Записать();
		Показатель.ПериодОбновления = 3600;
		Показатель.ЗначениеПериодаАктуальности = 1;
		Показатель.ЕдиницаИзмерения = Справочники.CRM_ЕдиницыИзмеренияПоказателей.руб;
		Показатель.СхемаКомпоновкиДанных = "СреднийЧек";
		Показатель.СхемаКомпоновкиДанныхРасшифровки = "СреднийЧек";
		//СКД
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("СреднийЧек");
		Показатель.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Настройки);
		//Расшифровка
		СхемаКомпоновкиДанных = Справочники.CRM_ШаблоныКлючевыхПоказателей.ПолучитьМакет("СреднийЧек");
		Показатель.ХранилищеСхемыКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		Показатель.ХранилищеНастроекКомпоновкиДанныхРасшифровки = Новый ХранилищеЗначения(Настройки);
		Показатель.Записать();
	КонецЕсли;
КонецПроцедуры	
