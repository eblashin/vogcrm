&НаКлиенте
Перем ИмяРедактируемогоРеквизита;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если (ИсточникВыбора.ИмяФормы = "Справочник.КлассификаторБанков.Форма.ФормаВыбора") Тогда	
		Если ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.КлассификаторБанков") Тогда
			Если ИмяРедактируемогоРеквизита = "БИКБанка" Тогда
				Объект.Банк				 = РезультатВыбора;

				ЗаполнитьРеквизитыБанкаПоБанку("Банк", РезультатВыбора, Ложь);
			ИначеЕсли ИмяРедактируемогоРеквизита = "БИКБанкаДляРасчетов" Тогда
				Объект.БанкРасчетов				= РезультатВыбора;

				ЗаполнитьРеквизитыБанкаПоБанку("БанкДляРасчетов", РезультатВыбора, Ложь);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
       
КонецПроцедуры 

// Процедура заполняет значения полей БИК и КоррСчет.
//
&НаСервереБезКонтекста
Процедура ЗаполнитьБИКиКоррСчет(Банк, Бик, КоррСчет)
	
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Бик = Банк.Код;
	КоррСчет = Банк.КоррСчет;
	
КонецПроцедуры // ЗаполнитьБИКиКоррСчет()

// Процедура заполняет значения поля ТекстКорреспондента.
//
&НаСервере
Процедура ЗаполнитьТекстКорреспондента()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Владелец);
		
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.НаименованиеПолное
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
		
	Иначе
		
		// ++ VOG Солодов В.В. 30.09.2019 bugs 684
		Запрос.Текст =
		"ВЫБРАТЬ
		|	вогЮридическиеЛица.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
		|ГДЕ
		|	вогЮридическиеЛица.Ссылка = &Ссылка";
		// До изменения
		//Запрос.Текст =
		//"ВЫБРАТЬ
		//|	Партнеры.НаименованиеПолное
		//|ИЗ
		//|	Справочник.Партнеры КАК Партнеры
		//|ГДЕ
		//|	Партнеры.Ссылка = &Ссылка";
		// -- VOG Солодов В.В. 30.09.2019
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстКорреспондента = СокрЛП(Выборка.НаименованиеПолное);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТекстКорреспондента()

// Процедура открывает форму списка банков для ручного выбора.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораБанка(ЭтоБанк, СписокНайденныхБанков = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(ЭтоБанк, Объект.Банк, Объект.БанкРасчетов));
	ПараметрыФормы.Вставить("ПараметрВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныхВыбор", Ложь);
	
	Если СписокНайденныхБанков <> Неопределено Тогда
		
		ПараметрыФормы.Вставить("СписокНайденныхБанков", СписокНайденныхБанков);
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КлассификаторБанков.ФормаВыбора", ПараметрыФормы, ?(ЭтоБанк, Элементы.БИКБанка, Элементы.БИКБанкаДляРасчетов));
	
КонецПроцедуры // ОткрытьФормуВыбораБанка()

&НаСервереБезКонтекста
Функция ДеятельностьБанкаПрекращена(БИК)
	
	Результат = Ложь;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КлассификаторБанков.ДеятельностьПрекращена
	|ИЗ
	|	Справочник.КлассификаторБанков КАК КлассификаторБанков
	|ГДЕ
	|	КлассификаторБанков.Код = &БИК";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("БИК", БИК);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ДеятельностьПрекращена;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокБанковПоРеквизитам(Знач Поле, Знач Значение) Экспорт

	СписокБанков = Новый СписокЗначений;
	
	Если ПустаяСтрока(Значение) Тогда
	
		Возврат СписокБанков;
		
	КонецЕсли;
	
	Возврат СписокБанков;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьКорректностьНомераСчета(Номер, ВалютныйСчет = Ложь, ТекстОшибки = "")

	Результат = Истина;
	
	Если ПустаяСтрока(Номер) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если НЕ ВалютныйСчет И СтрДлина(Номер) <> 20 Тогда
		
		ТекстОшибки = НСтр("ru = 'Возможно номер счета указан не полностью'");
		Результат = Ложь;
		
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер) Тогда
		
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("ru = 'В номере банковского счета присутствуют не только цифры.
				|Возможно, номер указан неверно'");
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьКорректностьБИК(БИК, ТекстОшибки = "")
	
	Если ПустаяСтрока(БИК) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ТекстОшибки = "";
	Если СтрДлина(БИК) <> 9 Тогда
		
		ТекстОшибки = НСтр("ru = 'По указанному БИК банк не найден. Возможно БИК указан не полностью.'");
		
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(БИК) Тогда
		
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("ru = 'В составе БИК банка должны быть только цифры'");
		
	ИначеЕсли НЕ Лев(БИК, 2) = "04" Тогда
		
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", " ") +
			НСтр("ru = 'Первые 2 цифры БИК банка должны быть ""04""'");
		
	КонецЕсли;
	
	Возврат ПустаяСтрока(ТекстОшибки);
	
КонецФункции

// Функция возвращает список значений с банком/банками подходящих условию поиска.
// 
// В случае неудачи возвращает Неопределено или пустой список значений.
//
&НаКлиенте
Функция НайтиБанки(ТекстДляПоиска, Поле, Валютный = Ложь)
	
	Перем ТекстОшибки;
	
	ЭтоБанк = (Поле = "БИКБанка") ИЛИ (Поле = "КоррСчетБанка");
	ОчититьЗначенияВСвязаныхПоляхФормы(ЭтоБанк);
	
	Если ПустаяСтрока(ТекстДляПоиска) Тогда
		
		ОчиститьСообщения();
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Поле ""%1"" заполнено не корректно.'"), 
			?(Найти(Поле, "БИК") > 0, "БИК", "Корр. счет")
			);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Найти(Поле, "БИК") = 1 Тогда
		
		ОбластьПоиска = "Код";
		
	ИначеЕсли Найти(Поле, "КоррСчет") = 1 Тогда
		
		ОбластьПоиска = "КоррСчет";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СписокНайденныхБанков = ПолучитьСписокБанковПоРеквизитам(ОбластьПоиска, ТекстДляПоиска);
	Если СписокНайденныхБанков.Количество() = 0 Тогда
		
		Если ОбластьПоиска = "Код" Тогда
			
			Если НЕ ПроверитьКорректностьБИК(ТекстДляПоиска, ТекстОшибки) Тогда
				
				ОчиститьСообщения();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, Поле);
				Возврат Неопределено;
				
			КонецЕсли;
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Банк с БИК ""%1"" не найден в справочнике банков'"), ТекстДляПоиска);
			
		ИначеЕсли ОбластьПоиска = "КоррСчет" Тогда
			
			Если НЕ ПроверитьКорректностьНомераСчета(ТекстДляПоиска, Валютный, ТекстОшибки) Тогда
				ОчиститьСообщения();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, Поле);
				Возврат Неопределено;
			КонецЕсли;
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Банк с корр. счетом ""%1"" не найден в справочнике банков'"), ТекстДляПоиска);
			
		КонецЕсли;
		
		// Сформируем варианты
		Кнопки	= Новый СписокЗначений;
		Кнопки.Добавить("ВЫБРАТЬ",     НСтр("ru = 'Выбрать из справочника'"));
		Кнопки.Добавить("Отменить",   НСтр("ru = 'Отменить ввод'"));
		
		// Обработка выбора
		ОписаниеОповещения = Новый ОписаниеОповещения("НайтиБанкиПослеВопроса", ЭтотОбъект, ЭтоБанк);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,  Кнопки,, "ВЫБРАТЬ", НСтр("ru = 'Банк не найден'"));
		Возврат Неопределено;
		
	ИначеЕсли ОбластьПоиска = "Код" И СписокНайденныхБанков.Количество() = 1 Тогда
		
		Если Поле = "БИКБанкаДляРасчетов" Тогда
			
			ДеятельностьБанкаНепрямыхРасчетовПрекращена = ДеятельностьБанкаПрекращена(ТекстДляПоиска);
			
		Иначе
			
			ДеятельностьБанкаПрекращена = ДеятельностьБанкаПрекращена(ТекстДляПоиска);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокНайденныхБанков;
	
КонецФункции // НайтиБанки()

&НаКлиенте
Функция НайтиБанкиПослеВопроса(Ответ, ЭтоБанк) Экспорт
	Если Ответ = "ВЫБРАТЬ" Тогда
		ОткрытьФормуВыбораБанка(ЭтоБанк);
	КонецЕсли;
КонецФункции

// Процедура управления элементами формы.
//
&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	// Установим использование банка для расчетов.
	ИспользуетсяБанкДляРасчетов = ЗначениеЗаполнено(Объект.БанкРасчетов);
	
	Если ИспользуетсяБанкДляРасчетов Тогда
		Элементы.ГруппаСтраницыНепрямыеРасчеты.ТекущаяСтраница = Элементы.ГруппаБанкРасчетов;
	Иначе
		Элементы.ГруппаСтраницыНепрямыеРасчеты.ТекущаяСтраница = Элементы.ГруппаНадписьНепрямыеРасчеты;
	КонецЕсли;
	
	// Установим редактирования текста наименования орагнизации.
	РедактироватьТекстКорреспондента = ЗначениеЗаполнено(Объект.ТекстКорреспондента);
	Элементы.ТекстПлательщика.Доступность = РедактироватьТекстКорреспондента;
	Элементы.ТекстПолучателя.Доступность = РедактироватьТекстКорреспондента;
	
	Если РедактироватьТекстКорреспондента Тогда
		ТекстКорреспондента = Объект.ТекстКорреспондента;
	Иначе
		ЗаполнитьТекстКорреспондента();
	КонецЕсли;
	
	// Установим текущую закладку.
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизитыСчетаОрганизации;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРеквизитыСчетаКонтрагента;
	КонецЕсли;
	
КонецПроцедуры // УправлениеЭлементамиФормы()

// Функция формирует наименование банковского счета.
//
&НаКлиенте
Процедура ЗаполнитьСписокВариантовПредставленийСчета()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = СокрЛп(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), "");
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	СтрокаНаименования = ?(ЗначениеЗаполнено(Объект.Банк), Строка(Объект.Банк), "") + " (" + Строка(Объект.ВалютаДенежныхСредств) + ")";
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
КонецПроцедуры // ЗаполнитьСписокВариантовПредставленийСчета()

// Функция формирует наименование банковского счета.
//
&НаСервере
Процедура ЗаполнитьСписокВариантовПредставленийСчетаСервер()
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = СокрЛп(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), "");
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	СтрокаНаименования = ?(ЗначениеЗаполнено(Объект.Банк), Строка(Объект.Банк), "") + " (" + Строка(Объект.ВалютаДенежныхСредств) + ")";
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
КонецПроцедуры // ЗаполнитьСписокВариантовПредставленийСчетаСервер()

// Процедура очищает значения полей в связанных полях формы.
//
// Актуальна для случая, когда пользователь откроет форму выбора и откажеться от выбора значения.
//
&НаКлиенте
Процедура ОчититьЗначенияВСвязаныхПоляхФормы(ЭтоБанк)
	
	Если ЭтоБанк Тогда
		
		Объект.Банк = Неопределено;
		БИКБанка = "";
		КоррСчетБанка = "";
		
	Иначе
		
		Объект.БанкРасчетов = Неопределено;
		БИКБанкаДляРасчетов = "";
		КоррСчетБанкаДляРасчетов = "";
		
	КонецЕсли;
	
КонецПроцедуры // ОчититьЗначенияВСвязаныхПоляхФормы()

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события формы ПриСозданииНаСервере.
// В процедуре осуществляется установка видимости и доступности элементов
// формы в зависимости от типа владельца.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		
		Объект.ВалютаДенежныхСредств = ВалютаРегламентированногоУчета;
		
	КонецЕсли;
	
	// Заполним БИК и кор.счет банка.
	ЗаполнитьБИКиКоррСчет(Объект.Банк, БИКБанка, КоррСчетБанка);
	
	// Заполним БИК и кор.счет банка для расчетов.
	ЗаполнитьБИКиКоррСчет(Объект.БанкРасчетов, БИКБанкаДляРасчетов, КоррСчетБанкаДляРасчетов);
	
	УправлениеЭлементамиФормы();
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидСчета) Тогда
		Объект.ВидСчета = "Расчетный";
	КонецЕсли;
	
	НепрямыеРасчетыНадпись = НСтр(
		"ru='Установите флажок ""Используется банк для расчетов"", если банк, в котором открыт счет, проводит 
		|расчеты через корреспондентский счет, открытый в другом банке (банке для расчетов).
		|В платежных поручениях ""Банк получателя"" будет указываться банк для расчетов,
		|а номер счета и наименование банка, в котором открыт счет, будут выводиться в поле ""Получатель"".'"
	);
	
	ЗаполнитьСписокВариантовПредставленийСчетаСервер();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	ВалютаРеглУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютныйСчет = (ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) И Объект.ВалютаДенежныхСредств <> ВалютаРеглУчета);
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПередЗаписью формы.
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Если выключено использование банка для расчетов, очистим значение банка.
	Если НЕ ИспользуетсяБанкДляРасчетов
		И ЗначениеЗаполнено(Объект.БанкРасчетов) Тогда
		
		Объект.БанкРасчетов = Неопределено;
		
	КонецЕсли; 
	
	// Заполним текст корреспондента.
	Если РедактироватьТекстКорреспондента Тогда
		
		Объект.ТекстКорреспондента = ТекстКорреспондента;
		
	Иначе
		
		Объект.ТекстКорреспондента = "";
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

&НаКлиенте
Процедура БИКБанкаПриИзменении(Элемент)
	
	ИмяРедактируемогоРеквизита = "БИКБанка";
	РеквизитБанкаПриИзменении(Новый ОписаниеОповещения("БИКБанкаПриИзмененииЗавершение", ЭтотОбъект), "БИКБанка");
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = СокрЛп(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), "");
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	СтрокаНаименования = ?(ЗначениеЗаполнено(Объект.Банк), Строка(Объект.Банк), "") + " (" + Строка(Объект.ВалютаДенежныхСредств) + ")";
	СтрокаНаименования = Лев(СтрокаНаименования, 100);
	
	Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРедактируемогоРеквизита = "БИКБанка";
	РеквизитБанкаПриВыборе("БИКБанка", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(БИКБанка) Тогда
		ИмяРедактируемогоРеквизита = "БИКБанка";
		РеквизитБанкаОткрытие("БИКБанка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовПриИзменении(Элемент)
	
	ИмяРедактируемогоРеквизита = "БИКБанкаДляРасчетов";
	РеквизитБанкаПриИзменении(Неопределено, "БИКБанкаДляРасчетов");
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРедактируемогоРеквизита = "БИКБанкаДляРасчетов";
	РеквизитБанкаПриВыборе("БИКБанкаДляРасчетов", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(БИКБанкаДляРасчетов) Тогда
		ИмяРедактируемогоРеквизита = "БИКБанкаДляРасчетов";
		РеквизитБанкаОткрытие("БИКБанкаДляРасчетов");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка ИспользуетсяБанкДляРасчетов.
//
&НаКлиенте
Процедура ИспользуетсяБанкДляРасчетовПриИзменении(Элемент)
	
	Если ИспользуетсяБанкДляРасчетов Тогда
		Элементы.ГруппаСтраницыНепрямыеРасчеты.ТекущаяСтраница = Элементы.ГруппаБанкРасчетов;
	Иначе
		Элементы.ГруппаСтраницыНепрямыеРасчеты.ТекущаяСтраница = Элементы.ГруппаНадписьНепрямыеРасчеты;
	КонецЕсли;
	
КонецПроцедуры // ИспользуетсяБанкДляРасчетовПриИзменении()

// Процедура - обработчик события ПриИзменении флажка РедактироватьТекстПлательщика.
//
&НаКлиенте
Процедура РедактироватьТекстПлательщикаПриИзменении(Элемент)
	
	Элементы.ТекстПлательщика.Доступность = РедактироватьТекстКорреспондента;
	
	Если НЕ РедактироватьТекстКорреспондента Тогда
		ЗаполнитьТекстКорреспондента();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка РедактироватьТекстПолучателя.
//
&НаКлиенте
Процедура РедактироватьТекстПолучателяПриИзменении(Элемент)
	
	Элементы.ТекстПолучателя.Доступность = РедактироватьТекстКорреспондента;
	
	Если НЕ РедактироватьТекстКорреспондента Тогда
		ЗаполнитьТекстКорреспондента();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля НомерСчета.
//
&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	Объект.Наименование = Лев(СокрЛп(Объект.НомерСчета) + ?(ЗначениеЗаполнено(Объект.Банк), ", в " + Строка(Объект.Банк), ""), 100);
	
	ЗаполнитьСписокВариантовПредставленийСчета();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ВалютаДенежныхСредств.
//
&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	ВалютныйСчет = (ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) И Объект.ВалютаДенежныхСредств <> ВалютаРеглУчета);
	ЗаполнитьСписокВариантовПредставленийСчета();
	
КонецПроцедуры

// Процедура - обработчик события ОкончаниеВводаТекста поля НомерСчета.
//
&НаКлиенте
Процедура НомерСчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
		
		Если СтрДлина(Текст) > 20 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Введенное значение превышает допустимую длину номера счета 20 символов!'");
			Сообщение.Сообщить();
			
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаПриВыборе(ИмяЭлемента, Форма)
	
	Если ИмяЭлемента = "БИКБанка" Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Реквизит", ИмяЭлемента);
		СтруктураПараметров.Вставить("ТекущаяСтрока", Объект.Банк);
		СтруктураПараметров.Вставить("ПараметрВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
		ОткрытьФорму("Справочник.КлассификаторБанков.Форма.ФормаВыбора", СтруктураПараметров, Форма);
	ИначеЕсли ИмяЭлемента = "БИКБанкаДляРасчетов" Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Реквизит", ИмяЭлемента);
		СтруктураПараметров.Вставить("ТекущаяСтрока", Объект.БанкРасчетов);
		СтруктураПараметров.Вставить("ПараметрВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
		ОткрытьФорму("Справочник.КлассификаторБанков.Форма.ФормаВыбора", СтруктураПараметров, Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаОткрытие(ИмяЭлемента)
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаПриИзменении(Знач Оповещение, ИмяЭлемента)
	
	Если (ИмяЭлемента = "БИКБанка") Тогда
			Если Не ЗаполнитьРеквизитыБанкаПоБИК("Банк", БИКБанка, Истина) Тогда
				СписокВариантовОтветовНаВопрос = Новый СписокЗначений;
				СписокВариантовОтветовНаВопрос.Добавить("ВыбратьИзСписка", НСтр("ru = 'Выбрать из списка'"));
				//СписокВариантовОтветовНаВопрос.Добавить("ПродолжитьВвод",  НСтр("ru = 'Продолжить ввод'"));
				СписокВариантовОтветовНаВопрос.Добавить("ОтменитьВвод",	   НСтр("ru = 'Отменить ввод'"));
				
				ТекстВопроса = НСтр("ru = 'Банк с БИК  %Значение% не найден в классификаторе банков.'");
				ТекстВопроса = СтрЗаменить(ТекстВопроса,"%Значение%",БИКБанка);
				
				Ответ = Неопределено;

				
				ПоказатьВопрос(Новый ОписаниеОповещения("РеквизитБанкаПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ИмяЭлемента, Оповещение, СписокВариантовОтветовНаВопрос, ТекстВопроса", ИмяЭлемента, Оповещение, СписокВариантовОтветовНаВопрос, ТекстВопроса)), ТекстВопроса, СписокВариантовОтветовНаВопрос, 0,,НСтр("ru = 'Выбор банка из классификатора'"));
				Возврат;
			КонецЕсли;
	ИначеЕсли (ИмяЭлемента = "БИКБанкаДляРасчетов") Тогда
			Если Не ЗаполнитьРеквизитыБанкаПоБИК("БанкДляРасчетов", БИКБанкаДляРасчетов, Истина) Тогда
				
				СписокВариантовОтветовНаВопрос = Новый СписокЗначений;
				СписокВариантовОтветовНаВопрос.Добавить("ВыбратьИзСписка", НСтр("ru = 'Выбрать из списка'"));
				//СписокВариантовОтветовНаВопрос.Добавить("ПродолжитьВвод",  НСтр("ru = 'Продолжить ввод'"));
				СписокВариантовОтветовНаВопрос.Добавить("ОтменитьВвод",	   НСтр("ru = 'Отменить ввод'"));
				
				ТекстВопроса = НСтр("ru = 'Банк с БИК  %Значение% не найден в классификаторе банков.'");
				ТекстВопроса = СтрЗаменить(ТекстВопроса,"%Значение%",БИКБанкаДляРасчетов);
				
				ПоказатьВопрос(Новый ОписаниеОповещения("РеквизитБанкаПриИзмененииПослеВопроса", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), ТекстВопроса, СписокВариантовОтветовНаВопрос, 0,,НСтр("ru = 'Выбор банка-корреспондента из классификатора'"));
				Возврат;
			КонецЕсли;
	КонецЕсли;
	
	РеквизитБанкаПриИзмененииФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаПриИзмененииПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Ответ = РезультатВопроса;
	
	Если Ответ = "ОтменитьВвод" Тогда
		БИКБанкаДляРасчетов = "";
	ИначеЕсли Ответ = "ВыбратьИзСписка" Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Реквизит", "БИКБанкаДляРасчетов");
		ОткрытьФорму("Справочник.КлассификаторБанков.Форма.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
	КонецЕсли;
	
	РеквизитБанкаПриИзмененииФрагмент(Оповещение);
	

КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ИмяЭлемента = ДополнительныеПараметры.ИмяЭлемента;
    Оповещение = ДополнительныеПараметры.Оповещение;
    СписокВариантовОтветовНаВопрос = ДополнительныеПараметры.СписокВариантовОтветовНаВопрос;
    ТекстВопроса = ДополнительныеПараметры.ТекстВопроса;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = "ОтменитьВвод" Тогда
        БИКБанка = "";
    ИначеЕсли Ответ = "ВыбратьИзСписка" Тогда
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Реквизит", "БИКБанка");
        ОткрытьФорму("Справочник.КлассификаторБанков.Форма.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
    КонецЕсли;
    
    РеквизитБанкаПриИзмененииФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаПриИзмененииФрагмент(Знач Оповещение)
	
	УправлениеЭлементамиФормы();
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьРеквизитыБанкаПоБИК(ТипБанка, БИК = "", ПеренестиЗначенияРеквизитов = Ложь)
	
	НашлиПоБИК   = Ложь;
	ЗаписьОБанке = "";
	
	Если ТипБанка = "Банк" Тогда
		БИКБанка		  = "";
		КоррСчетБанка	  = "";
		РаботаСБанками.ПолучитьДанныеКлассификатора(БИК,,ЗаписьОБанке);
		Если НЕ ПустаяСтрока(ЗаписьОБанке) Тогда
			БИКБанка		  = ЗаписьОБанке.Код;
			КоррСчетБанка	  = ЗаписьОБанке.КоррСчет;
			НашлиПоБИК		  = Истина;
			Если ПеренестиЗначенияРеквизитов Тогда
				Объект.Банк				 = ЗаписьОБанке;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипБанка = "БанкДляРасчетов" Тогда
		БИКБанкаДляРасчетов			 = "";
		КоррСчетБанкаДляРасчетов	 = "";
		РаботаСБанками.ПолучитьДанныеКлассификатора(БИК,,ЗаписьОБанке);
	 	Если НЕ ПустаяСтрока(ЗаписьОБанке) Тогда
			БИКБанкаДляРасчетов			 = ЗаписьОБанке.Код;
			КоррСчетБанкаДляРасчетов	 = ЗаписьОБанке.КоррСчет;
			НашлиПоБИК					 = Истина;
			Если ПеренестиЗначенияРеквизитов Тогда
				Объект.БанкРасчетов				= ЗаписьОБанке;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НашлиПоБИК;
	
КонецФункции

&НаСервере
Функция ЗаполнитьРеквизитыБанкаПоБанку(ТипБанка, Банк = "", ПеренестиЗначенияРеквизитов = Ложь)
	
	Если ТипЗнч(Банк) = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		Если ТипБанка = "Банк" Тогда
			БИКБанка		  = Банк.Код;
			КоррСчетБанка	  = Банк.КоррСчет;
		ИначеЕсли ТипБанка = "БанкДляРасчетов" Тогда
			БИКБанкаДляРасчетов			 = Банк.Код;
			КоррСчетБанкаДляРасчетов	 = Банк.КоррСчет;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
