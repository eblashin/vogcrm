
&НаСервереБезКонтекста
// Функция получает и возвращает выборку банк. счетов по умолчанию.
// 
// МассивКонтрагент - массив контрагентов для которых необходимо выбрать договоры по умолчанию.
//
Функция ПолучитьБанкСчетаПоУмолчанию(МассивВладельцев = Неопределено)
	
	Запрос			= Новый Запрос;
	Запрос.Текст	=
	// ++ VOG Солодов В.В. 13.09.2019 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогЮридическиеЛица.ОсновнойБанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|ГДЕ
	|	НЕ вогЮридическиеЛица.ОсновнойБанковскийСчет = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяССылка)
	|	И &УсловиеОтбораПоПартнерам
	// До изменения
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	Партнеры.БанковскийСчетПоУмолчанию КАК БанковскийСчет
	//|ИЗ
	//|	Справочник.Партнеры КАК Партнеры
	//|ГДЕ
	//|	НЕ Партнеры.ЭтоГруппа
	//|	И НЕ Партнеры.БанковскийСчетПоУмолчанию = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяССылка)
	//|	И &УсловиеОтбораПоПартнерам
	// -- VOG Солодов В.В. 13.09.2019
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.БанковскийСчетПоУмолчанию
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.БанковскийСчетПоУмолчанию = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяССылка)
	|	И &УсловиеОтбораПоОрганизациям";
	
	// ++ VOG Солодов В.В. 13.09.2019 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"&УсловиеОтбораПоПартнерам",
		?(ТипЗнч(МассивВладельцев) = Тип("Массив"), "вогЮридическиеЛица.Ссылка В (&МассивВладельцев)", "Истина"));
	// До изменения
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, 
	//	"&УсловиеОтбораПоПартнерам",
	//	?(ТипЗнч(МассивВладельцев) = Тип("Массив"), "Партнеры.Ссылка В (&МассивВладельцев)", "Истина"));
	// -- VOG Солодов В.В. 13.09.2019
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"&УсловиеОтбораПоОрганизациям",
		?(ТипЗнч(МассивВладельцев) = Тип("Массив"), "Организации.Ссылка В (&МассивВладельцев)", "Истина"));
		
	РезультатЗапроса			= Запрос.Выполнить().Выгрузить();
	
	СписокБанкСчетовПоУмолчанию	= Новый СписокЗначений;
	СписокБанкСчетовПоУмолчанию.ЗагрузитьЗначения(РезультатЗапроса.ВыгрузитьКолонку("БанковскийСчет"));
	
	Возврат СписокБанкСчетовПоУмолчанию;
	
КонецФункции // ПолучитьДоговорыПоУмолчанию()


&НаСервере
// Процедура выделяет в списке банк. счета по умолчанию.
//
Процедура УстановитьОформлениеБанкСчетовПоУмолчанию(СписокБанкСчетовПоУмолчанию)
	
	Для каждого ЭлементУсловногоОформления Из Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный" Тогда
			Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыУсловногоОформленияСписка	= Список.КомпоновщикНастроек.ФиксированныеНастройки.УсловноеОформление.Элементы;
	ЭлементУсловногоОформления			= ЭлементыУсловногоОформленияСписка.Добавить();
	
	ЭлементОтбора 						= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения 			= ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение 		= СписокБанкСчетовПоУмолчанию;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина,));
	
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
	ЭлементУсловногоОформления.Представление = "Договоры по умолчанию";  
	
КонецПроцедуры // УстановитьОформлениеДоговоровПоУмолчанию()

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СписокБанкСчетовПоУмолчанию = ПолучитьБанкСчетаПоУмолчанию();
	
	Если СписокБанкСчетовПоУмолчанию.Количество() > 0 Тогда
		
		УстановитьОформлениеБанкСчетовПоУмолчанию(СписокБанкСчетовПоУмолчанию);
		
	КонецЕсли;
	
	//+вог
	Если Параметры.Свойство("ОбъектСвязи") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОбъектСвязи", Параметры.ОбъектСвязи);
		
	КонецЕсли;
	//-вог
	
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Устанавливает текущий элемент банковским счетом по умолчанию для владельца.
//
Процедура УстановитьКакБанкСчетПоУмолчанию(Команда)
	
	СписокБанкСчетовПоУмолчанию = Новый СписокЗначений;
	
	ТекущаяСтрокаСписка = Элементы.Список.ТекущиеДанные;
	
	Если ТекущаяСтрокаСписка = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран банковский счет, который необходимо установить как банковский счет по умолчанию'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	НовыйБанкСчетПоУмолчанию	= ТекущаяСтрокаСписка.Ссылка;
	ВладелецСсылка				= ТекущаяСтрокаСписка.Владелец;
	
	Для каждого ЭлементУсловногоОформления Из Список.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный" И
			ЭлементУсловногоОформления.Представление = "Банковский счет по умолчанию" Тогда
			
			ЭлементОтбора				= ЭлементУсловногоОформления.Отбор.Элементы[0];
			СписокБанкСчетовПоУмолчанию	= ЭлементОтбора.ПравоеЗначение;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СписокБанкСчетовПоУмолчанию.НайтиПоЗначению(НовыйБанкСчетПоУмолчанию) = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИзменитьКарточкуОбъектаВладелецаИПоменятьОформлениеСписка(ВладелецСсылка, НовыйБанкСчетПоУмолчанию, СписокБанкСчетовПоУмолчанию);
	
	Оповестить("ИзмененБанковскийСчетПоУмолчанию");
	
КонецПроцедуры // УстановитьКакБанкСчетПоУмолчанию()

&НаСервере
// Процедура - записывает в карточку владельца новое значение
// и обновляет визуальное представление банк. счета по умолчанию в форме списке.
//
Процедура ИзменитьКарточкуОбъектаВладелецаИПоменятьОформлениеСписка(ВладелецСсылка, НовыйБанкСчетПоУмолчанию, СписокБанкСчетовПоУмолчанию)
	
	ОбъектВладелец 							= ВладелецСсылка.ПолучитьОбъект();
	//++ VOG Иванов С.А. 14.10.2019 bugs : 751  
	РеквОсновнойБанковскийСчет = ?(ТипЗнч(ВладелецСсылка) = Тип("СправочникСсылка.Организации"), ОбъектВладелец.БанковскийСчетПоУмолчанию, ОбъектВладелец.ОсновнойБанковскийСчет);
	// ++ VOG Солодов В.В. 13.09.2019 
	//СтарыйБанкСчетПоУмолчанию 				= ОбъектВладелец.ОсновнойБанковскийСчет;
	СтарыйБанкСчетПоУмолчанию = РеквОсновнойБанковскийСчет;
	РеквОсновнойБанковскийСчет = НовыйБанкСчетПоУмолчанию;
	//-- VOG Иванов С.А. 14.10.2019 bugs : 751
	//ОбъектВладелец.ОсновнойБанковскийСчет 	= НовыйБанкСчетПоУмолчанию;
	// До изменения
	//СтарыйБанкСчетПоУмолчанию				= ОбъектВладелец.БанковскийСчетПоУмолчанию;
	//ОбъектВладелец.БанковскийСчетПоУмолчанию= НовыйБанкСчетПоУмолчанию;
	// -- VOG Солодов В.В. 13.09.2019
	
	Попытка
		
		ОбъектВладелец.Записать();
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось поменять банковский счет по умолчанию в карточке владельца.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	ЭлементСпискаЗначений 					= СписокБанкСчетовПоУмолчанию.НайтиПоЗначению(СтарыйБанкСчетПоУмолчанию);
	
	Если НЕ ЭлементСпискаЗначений = Неопределено Тогда
		
		СписокБанкСчетовПоУмолчанию.Удалить(ЭлементСпискаЗначений);
		
	КонецЕсли;
	
	СписокБанкСчетовПоУмолчанию.Добавить(НовыйБанкСчетПоУмолчанию);
	
	УстановитьОформлениеБанкСчетовПоУмолчанию(СписокБанкСчетовПоУмолчанию);
	
КонецПроцедуры // ИзменитьКарточкуВладельцаИПоменятьОформлениеСписка()
