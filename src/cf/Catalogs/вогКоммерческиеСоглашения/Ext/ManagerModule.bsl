
// ++ VOG Солодов В.В. 02.09.2019 task 635

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// ++ VOG Солодов В.В. 14.10.2019 task 747
// Заполняет номер коммерческого соглашения.
// Параметры:
//	Объект - СправочникОбъект.вогКоммерческиеСоглашения, ДанныеФормыСтруктура - элемент,
//		для которого нужно сформировать номер
//
Процедура СформироватьНомерКоммерческогоСоглашения(Объект) Экспорт
	
	НомерКС = 1;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вогКоммерческиеСоглашения.Ссылка) КАК КоличествоКС
		|ИЗ
		|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
		|ГДЕ
		|	вогКоммерческиеСоглашения.Организация = &Организация
		|	И НЕ вогКоммерческиеСоглашения.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", 		Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомерКС = НомерКС + ВыборкаДетальныеЗаписи.КоличествоКС;
	КонецЦикла;
	
	Объект.Номер = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка(НомерКС), 5, "0", "Слева");
	
КонецПроцедуры
// -- VOG Солодов В.В. 14.10.2019

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// ++ VOG Солодов В.В. 25.06.2021 DEV-69
Функция ПолучитьДействующиеСоглашения(МассивОбъектов, НаправлениеДеятельности) Экспорт
	
	РезультатЗапроса 		= ПолучитьКоммерческиеСоглашения(МассивОбъектов, НаправлениеДеятельности, Ложь);
	ДействующиеСоглашения 	= РезультатЗапроса.Выгрузить();
	
	Возврат ДействующиеСоглашения;
	
КонецФункции
// -- VOG Солодов В.В. 25.06.2021 DEV-69

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
// 	КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КоммерческоеСоглашение";
	КомандаПечати.Представление = НСтр("ru = 'Коммерческое соглашение'");

КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
// 		ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
// 		МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
// 		ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
// 		КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
// 		ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммерческоеСоглашение") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КоммерческоеСоглашение",
			НСтр("ru='Коммерческое соглашение'"),
			СформироватьПечатнуюФормуКоммерческоеСоглашение(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 25.06.2021 DEV-69
Функция СформироватьПечатнуюФормуКоммерческоеСоглашение(МассивОбъектов, ОбъектыПечати, НомерПриложения = Неопределено, ПоказыватьПодписи = Ложь, ПараметрыПечати = Неопределено) Экспорт
	
	Перем НаправлениеДеятельности, ДанныеКоммерческогоСоглашения, КоммерческоеСоглашение, Версия;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		
		ПараметрыПечати.Свойство("НаправлениеДеятельности", 		НаправлениеДеятельности);
		ПараметрыПечати.Свойство("ДанныеКоммерческогоСоглашения", 	ДанныеКоммерческогоСоглашения);
		
	ИначеЕсли ТипЗнч(ПараметрыПечати) = Тип("СправочникСсылка.НаправленияДеятельности") Тогда
		// Обратная совместимость
		НаправлениеДеятельности = ПараметрыПечати;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеКоммерческогоСоглашения) = Тип("Структура") Тогда
		
		ДанныеКоммерческогоСоглашения.Свойство("Ссылка", 	КоммерческоеСоглашение);
		ДанныеКоммерческогоСоглашения.Свойство("Версия", 	Версия);
		
	КонецЕсли;
	
// До изменения
//Функция СформироватьПечатнуюФормуКоммерческоеСоглашение(МассивОбъектов, ОбъектыПечати, НомерПриложения = Неопределено, ПоказыватьПодписи = Ложь, НаправлениеДеятельности = Неопределено) Экспорт
// -- VOG Солодов В.В. 25.06.2021 DEV-69
	
	//Если НомерПриложения = 4 тогда
	//	
	//	ТабличныйДокумент = Новый ТабличныйДокумент;
	//	
	//	Результат = ПолучитьДанныеДляПечатнойФормыПриложение4(МассивОбъектов);
	//	
	//	ДанныеПечати = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//		
	//	ЗаполнитьПриложение4(ТабличныйДокумент,	Истина, "Приложение4", ДанныеПечати);
	//	
	//	ТабличныйДокумент.ТолькоПросмотр = Истина;
	//		
	//	Возврат ТабличныйДокумент;
	//	
	//КонецЕсли;	
	
	ТабличныйДокумент = Новый ТабличныйДокумент;	
	
	// ++ VOG Ульянов И.В. 18.12.2019 CRM-41
	МассивОбъектовВерсия1 = Новый Массив;
	МассивОбъектовВерсия2 = Новый Массив;
	// +++ VOG Кулаков П.Л. 18.03.2020 CRM-447
	МассивОбъектовВерсия3 = Новый Массив;
	// --- VOG Кулаков П.Л.
	
	// ++ VOG Солодов В.В. 25.06.2021 DEV-69
	Если ЗначениеЗаполнено(КоммерческоеСоглашение) Тогда
		
		Если Версия = 1 тогда
			МассивОбъектовВерсия1.Добавить(КоммерческоеСоглашение);
			МассивОбъектовВерсия1.Добавить(МассивОбъектов[0]); 		// ++ VOG Солодов В.В. 06.08.2021 DEV-784
		ИначеЕсли Версия = 2 Тогда
			МассивОбъектовВерсия2.Добавить(КоммерческоеСоглашение);
			МассивОбъектовВерсия2.Добавить(МассивОбъектов[0]); 		// ++ VOG Солодов В.В. 06.08.2021 DEV-784
		Иначе
			МассивОбъектовВерсия3.Добавить(КоммерческоеСоглашение);
			МассивОбъектовВерсия3.Добавить(МассивОбъектов[0]); 		// ++ VOG Солодов В.В. 06.08.2021 DEV-784
		КонецЕсли;
		
	Иначе
		// -- VOG Солодов В.В. 25.06.2021 DEV-69
		
		СписокСоглашений = ПолучитьКоммерческиеСоглашения(МассивОбъектов, НаправлениеДеятельности); // доработано VOG Ульянов И.В. 26.02.2020 CRM-387
		
		Выборка = СписокСоглашений.Выбрать();
		
		Пока Выборка.Следующий() цикл
			
			Если Выборка.Версия = 1 тогда
				МассивОбъектовВерсия1.Добавить(Выборка.Договор);
			ИначеЕсли Выборка.Версия = 2 Тогда
				МассивОбъектовВерсия2.Добавить(Выборка.Договор);
			Иначе
				МассивОбъектовВерсия3.Добавить(Выборка.Договор);
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Печать версии 1
	Если МассивОбъектовВерсия1.Количество() > 0 тогда
		СформироватьПечатнуюФормуКоммерческоеСоглашениеВерсия1(ТабличныйДокумент, МассивОбъектовВерсия1, ОбъектыПечати, НомерПриложения, ПоказыватьПодписи);
	КонецЕсли;	
	
	// -- VOG Ульянов И.В. 18.12.2019 CRM-41	 	
	Если МассивОбъектовВерсия2.Количество() > 0 тогда
		СформироватьПечатнуюФормуКоммерческоеСоглашениеВерсия2(ТабличныйДокумент, МассивОбъектовВерсия2, ОбъектыПечати, НомерПриложения, ПоказыватьПодписи,НаправлениеДеятельности);
	КонецЕсли;	
	
	// +++ VOG Кулаков П.Л. 18.03.2020 CRM-447
	Если МассивОбъектовВерсия3.Количество() > 0 тогда
		СформироватьПечатнуюФормуКоммерческоеСоглашениеВерсия3(ТабличныйДокумент, МассивОбъектовВерсия3, ОбъектыПечати, НомерПриложения, ПоказыватьПодписи,НаправлениеДеятельности);
	КонецЕсли;	
	// --- VOG Кулаков П.Л.
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
		
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьКоммерческиеСоглашения(МассивОбъектов, НаправлениеДеятельности = Неопределено, ТолькоПоследнюю = Истина) Экспорт// VOG Солодов В.В. 25.06.2021 DEV-69 // Добавлен параметр ТолькоПоследнюю
	
	Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ДоговорыКонтрагентов.Владелец КАК ЮридическоеЛицо,
	//|	ДоговорыКонтрагентов.Организация КАК Организация,
	//|	вогЮридическиеЛица.Партнер КАК Партнер,
	//|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаДоговора,
	//|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
	//|	ДоговорыКонтрагентов.Ссылка КАК Договор
	//|ПОМЕСТИТЬ ВТ_Договора
	//|ИЗ
	//|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	//|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
	//|ГДЕ
	//|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
	//|	1 КАК Приоритет,
	//|	ВТ_Договора.ДатаДоговора КАК ДатаДоговора,
	//|	ВТ_Договора.НомерДоговора КАК НомерДоговора,
	//|	ВТ_Договора.ЮридическоеЛицо КАК ЮридическоеЛицо,
	//|	ВТ_Договора.Договор КАК Договор
	//|ПОМЕСТИТЬ ВТ_Соглашения
	//|ИЗ
	//|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	//|		ПО вогКоммерческиеСоглашения.ЮридическоеЛицо = ВТ_Договора.ЮридическоеЛицо
	//|			И вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	//|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	вогКоммерческиеСоглашения.Ссылка,
	//|	2,
	//|	ВТ_Договора.ДатаДоговора,
	//|	ВТ_Договора.НомерДоговора,
	//|	ВТ_Договора.ЮридическоеЛицо,
	//|	ВТ_Договора.Договор
	//|ИЗ
	//|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	//|		ПО вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	//|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	//|			И (вогКоммерческиеСоглашения.ЮридическоеЛицо = ЗНАЧЕНИЕ(Справочник.вогЮридическиеЛица.ПустаяСсылка))
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//|	ВТ_Соглашения.Ссылка КАК Соглашение,
	//|	ВТ_Соглашения.Договор КАК Договор,
	//|	ВТ_Соглашения.Ссылка.вогВерсия КАК Версия,
	//|	ВТ_Соглашения.Приоритет КАК Приоритет
	//|ИЗ
	//|	ВТ_Соглашения КАК ВТ_Соглашения
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ВТ_Соглашения.Приоритет";
	
	// доработано VOG Ульянов И.В. 11.02.2020 CRM-323
	Запрос = Новый Запрос;
	// ++ VOG Солодов В.В. 25.06.2021 DEV-69
	Запрос.Текст = ТекстЗапросаАктуальныхВерсий(ТолькоПоследнюю);
	// До изменения
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ДоговорыКонтрагентов.Владелец КАК ЮридическоеЛицо,
	//|	ДоговорыКонтрагентов.Организация КАК Организация,
	//|	вогЮридическиеЛица.Партнер КАК Партнер,
	//|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаДоговора,
	//|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
	//|	ДоговорыКонтрагентов.Ссылка КАК Договор
	//|ПОМЕСТИТЬ ВТ_Договора
	//|ИЗ
	//|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	//|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
	//|ГДЕ
	//|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
	//|	1 КАК Приоритет,
	//|	ВТ_Договора.ДатаДоговора КАК ДатаДоговора,
	//|	ВТ_Договора.НомерДоговора КАК НомерДоговора,
	//|	ВТ_Договора.ЮридическоеЛицо КАК ЮридическоеЛицо,
	//|	ВТ_Договора.Договор КАК Договор,
	//|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаНачалаДействия
	//|ПОМЕСТИТЬ ВТ_Соглашения
	//|ИЗ
	//|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	//|		ПО вогКоммерческиеСоглашения.ЮридическоеЛицо = ВТ_Договора.ЮридическоеЛицо
	//|			И вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	//|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	//|			И (НЕ вогКоммерческиеСоглашения.Статус В (&СписокСтатусовДляИсключения))
	//|			И (вогКоммерческиеСоглашения.ПометкаУдаления = ЛОЖЬ)
	//|ГДЕ
	//|	ВЫБОР
	//|			КОГДА &НаправлениеДеятельности = НЕОПРЕДЕЛЕНО
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ вогКоммерческиеСоглашения.НаправлениеДеятельности = &НаправлениеДеятельности
	//|		КОНЕЦ
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	вогКоммерческиеСоглашения.Ссылка,
	//|	2,
	//|	ВТ_Договора.ДатаДоговора,
	//|	ВТ_Договора.НомерДоговора,
	//|	ВТ_Договора.ЮридическоеЛицо,
	//|	ВТ_Договора.Договор,
	//|	вогКоммерческиеСоглашения.ДатаНачалаДействия
	//|ИЗ
	//|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	//|		ПО вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	//|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	//|			И (вогКоммерческиеСоглашения.ЮридическоеЛицо = ЗНАЧЕНИЕ(Справочник.вогЮридическиеЛица.ПустаяСсылка))
	//|			И (НЕ вогКоммерческиеСоглашения.Статус В (&СписокСтатусовДляИсключения))
	//|			И (вогКоммерческиеСоглашения.ПометкаУдаления = ЛОЖЬ)
	//|ГДЕ
	//|	ВЫБОР
	//|			КОГДА &НаправлениеДеятельности = НЕОПРЕДЕЛЕНО
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ вогКоммерческиеСоглашения.НаправлениеДеятельности = &НаправлениеДеятельности
	//|		КОНЕЦ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//|	ВТ_Соглашения.Ссылка КАК Соглашение,
	//|	ВТ_Соглашения.Договор КАК Договор,
	//|	ВТ_Соглашения.Ссылка.вогВерсия КАК Версия,
	//|	ВТ_Соглашения.Приоритет КАК Приоритет,
	//|	ВТ_Соглашения.ДатаНачалаДействия КАК ДатаНачалаДействия
	//|ИЗ
	//|	ВТ_Соглашения КАК ВТ_Соглашения
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ВТ_Соглашения.Приоритет,
	//|	ДатаНачалаДействия УБЫВ";
	// -- VOG Солодов В.В. 25.06.2021 DEV-69
	
	СписокСтатусовДляИсключения = Новый Массив;
	СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт);
	СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован);
	СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласованКлиентом);
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", НаправлениеДеятельности); // доработано VOG Ульянов И.В. 26.02.2020 CRM-387	
	Запрос.УстановитьПараметр("СписокСтатусовДляИсключения", СписокСтатусовДляИсключения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат; 
	
КонецФункции


Процедура СформироватьПечатнуюФормуКоммерческоеСоглашениеВерсия2(ТабличныйДокумент, МассивОбъектов, ОбъектыПечати, НомерПриложения, ПоказыватьПодписи,НаправлениеДеятельности = Неопределено)
	
	// ++ VOG Солодов В.В. 28.06.2021 DEV-69
	ПараметрыПолученияДанных = ПараметрыПолученияДанных();
	ПараметрыПолученияДанных.МассивОбъектов 			= МассивОбъектов;
	ПараметрыПолученияДанных.НаправлениеДеятельности 	= НаправлениеДеятельности;
	ПараметрыПолученияДанных.Версия 					= 2;
	
	Результат = ПолучитьДанныеДляПечатнойФормыКоммерческоеСоглашение(ПараметрыПолученияДанных);
	// До изменения
	//Результат = ПолучитьДанныеДляПечатнойФормыКоммерческоеСоглашениеВерсия2(МассивОбъектов,НаправлениеДеятельности);
	// -- VOG Солодов В.В. 28.06.2021 DEV-69
	
	СтруктураДанных = Новый Структура;
	
	Для Каждого Колонка Из Результат[3].Колонки Цикл
		СтруктураДанных.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ДанныеПечати = Результат[3].Выбрать();
	
	
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		ПоследнийНомер = 0;
		
		НомераПриложений = Новый Структура;
		НомераПриложений.Вставить("НомерПриложение1");
		НомераПриложений.Вставить("НомерПриложение2");
		НомераПриложений.Вставить("НомерПриложение3");
		НомераПриложений.Вставить("НомерПриложение4");
		НомераПриложений.Вставить("НомерПриложение5");
		НомераПриложений.Вставить("НомерПриложение6");
		
		Для Счетчик = 1 по 6 цикл
			Если ДанныеПечати["ИспользоватьПриложение"+Строка(Счетчик)] Тогда
				ПоследнийНомер = ПоследнийНомер + 1;
				НомераПриложений["НомерПриложение"+Строка(Счетчик)] = Строка(ПоследнийНомер);
			Иначе
				НомераПриложений["НомерПриложение"+Строка(Счетчик)] = "";
			КонецЕсли;			
		КонецЦикла;	
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		СтруктураДанныхПечати = СформироватьСтруктуруДанныхПечатиВерсия2(ДанныеПечати, СтруктураДанных);
		
		Если Не ПроверитьЗаполнениеШапки(СтруктураДанныхПечати) Тогда
			Прервать;
		КонецЕсли;
		
		Если ПоказыватьПодписи Тогда
			СтруктураКартинок = РегистрыСведений.вогПечатиИПодписи.ПолучитьПодписьПечать(ДанныеПечати.Организация, ДанныеПечати.ОтветственноеЛицо);
		КонецЕсли;
		
		// +++ Кулаков П.Л. CRM-487 06.05.2020
		ТабличныйДокумент.РазмерКолонтитулаСнизу = 14;
		ТабличныйДокумент.ПолеСнизу = 16;
		// --- Кулаков П.Л.
		
		ЗаполнитьТабличныйДокументКоммерческоеСоглашениеВерсия2(ТабличныйДокумент,	
			СтруктураДанныхПечати, 
			ПоказыватьПодписи, 
			НомераПриложений, 
			СтруктураКартинок);
			
		// +++ VOG Кулаков П.Л. 23.03.2020 CRM-487
		ТабличныйДокумент.НижнийКолонтитул.НачальнаяСтраница = 1;
		ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
		ШаблонКолонтитула = "Приложение №2 от [ДатаПриложения]г. к Договору поставки [Номер] от [Дата]г." + Символы.ПС + "Страница [&НомерСтраницы] из [&СтраницВсего]";
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить("Номер",ДанныеПечати.НомерДоговора);
		ПараметрыСтроки.Вставить("Дата",Формат(ДанныеПечати.ДатаДоговора,"ДФ=dd.MM.yyyy"));
		// +++ VOG Кулаков П.Л. 20.08.2020 CRM-848
		Если ДанныеПечати.ДатаДоговора > ДанныеПечати.ДатаСоглашения Тогда
			ДатаСоглашения = ДанныеПечати.ДатаДоговора;
		Иначе
			ДатаСоглашения = ДанныеПечати.ДатаСоглашения;
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		ПараметрыСтроки.Вставить("ДатаПриложения",Формат(ДатаСоглашения,"ДФ=dd.MM.yyyy"));
		ТекстКолонтитула = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКолонтитула,ПараметрыСтроки);
		ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = ТекстКолонтитула;
		
		ТабличныйДокумент.НижнийКолонтитул.Шрифт = Новый Шрифт("Times New Roman",8);
		// --- VOG Кулаков П.Л.
		
		// Приложения к соглашению
		//ДанныеПечатиАдресовДоставки = Результат[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//ДанныеПечатиДокументовЭДО 	= Результат[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//ДанныеПечатиПриложений 		= Результат[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//
		//// +++ Кулаков П.Л. CRM-487
		//	ЗаполнитьПриложение(ТабличныйДокумент,
		//		СтруктураДанныхПечати,
		//		ДанныеПечати.ИспользоватьПриложение1,
		//		"Приложение1",
		//		ДанныеПечатиПриложений,
		//		НомераПриложений["НомерПриложение1"],
		//		ПоказыватьПодписи,
		//		СтруктураКартинок,
		//		Истина);
		//		
		//	ЗаполнитьПриложение(ТабличныйДокумент,
		//		СтруктураДанныхПечати,
		//		ДанныеПечати.ИспользоватьПриложение2,
		//		"Приложение2",
		//		ДанныеПечатиАдресовДоставки,
		//		НомераПриложений["НомерПриложение2"],
		//		ПоказыватьПодписи,
		//		СтруктураКартинок,
		//		Истина);
		//
		//Если ДанныеПечати.ИспользоватьПриложение4 тогда
		//	РезультатПриложение4 = ПолучитьДанныеДляПечатнойФормыПриложение4(МассивОбъектов,НаправлениеДеятельности);
		//	ДанныеПечатиПриложение4 = РезультатПриложение4.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//	ЗаполнитьПриложение4(
		//		ТабличныйДокумент,
		//		СтруктураДанныхПечати,
		//		Истина,
		//		"Приложение4",
		//		ДанныеПечатиПриложение4,
		//		НомераПриложений["НомерПриложение4"],
		//		ПоказыватьПодписи,
		//		СтруктураКартинок,
		//		Истина);
		//	
		//КонецЕсли;
		//
		//	ЗаполнитьПриложение(
		//		ТабличныйДокумент,
		//		СтруктураДанныхПечати,
		//		ДанныеПечати.ИспользоватьПриложение5,
		//		"Приложение5",
		//		ДанныеПечатиДокументовЭДО,
		//		НомераПриложений["НомерПриложение5"],
		//		ПоказыватьПодписи,
		//		СтруктураКартинок,
		//		Истина);
		//		
		//	ЗаполнитьПриложение(
		//		ТабличныйДокументПриложений,
		//		СтруктураДанныхПечати,
		//		ДанныеПечати.ИспользоватьПриложение6,
		//		"Приложение6",
		//		ДанныеПечатиПриложений,
		//		НомераПриложений["НомерПриложение6"],
		//		ПоказыватьПодписи,
		//		СтруктураКартинок,
		//		Истина);
		//	
		//Если ДанныеПечати.ЕстьДополнительноеСоглашениеПоНормеБоя тогда
		//	ЗаполнитьПриложение(
		//		ТабличныйДокумент,
		//		СтруктураДанныхПечати,
		//		ДанныеПечати.ЕстьДополнительноеСоглашениеПоНормеБоя,
		//		"ДопСоглашениеНормаБоя",
		//		ДанныеПечати,
		//		0,
		//		ПоказыватьПодписи,
		//		СтруктураКартинок,
		//		Истина);
		//КонецЕсли;
		//// --- Кулаков П.Л.	
			
	КонецЦикла;

КонецПроцедуры		

Функция ПолучитьДанныеДляПечатнойФормыКоммерческоеСоглашениеВерсия2(МассивОбъектов,НаправлениеДеятельности = Неопределено)
	
	//Павелко, CRM-218, 10.02.2020 - добавил сортировку по дате
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Владелец КАК ЮридическоеЛицо,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	вогЮридическиеЛица.Партнер КАК Партнер,
	|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаДоговора,
	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ ВТ_Договора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
	|	1 КАК Приоритет,
	|	ВТ_Договора.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Договора.НомерДоговора КАК НомерДоговора,
	|	ВТ_Договора.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	ВТ_Договора.Договор КАК Договор
	|ПОМЕСТИТЬ ВТ_Соглашения
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	|		ПО вогКоммерческиеСоглашения.ЮридическоеЛицо = ВТ_Договора.ЮридическоеЛицо
	|			И вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	|			И (НЕ вогКоммерческиеСоглашения.ПометкаУдаления)
	|			И (вогКоммерческиеСоглашения.НаправлениеДеятельности = &НаправлениеДеятельности)
	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован))
	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласованКлиентом))
	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогКоммерческиеСоглашения.Ссылка,
	|	2,
	|	ВТ_Договора.ДатаДоговора,
	|	ВТ_Договора.НомерДоговора,
	|	ВТ_Договора.ЮридическоеЛицо,
	|	ВТ_Договора.Договор
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	|		ПО вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	|			И (вогКоммерческиеСоглашения.ЮридическоеЛицо = ЗНАЧЕНИЕ(Справочник.вогЮридическиеЛица.ПустаяСсылка))
	|			И (НЕ вогКоммерческиеСоглашения.ПометкаУдаления)
	|			И (вогКоммерческиеСоглашения.НаправлениеДеятельности = &НаправлениеДеятельности)
	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован))
	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласованКлиентом))
	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВТ_Соглашения.Ссылка КАК Ссылка,
	|	ВТ_Соглашения.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Соглашения.НомерДоговора КАК НомерДоговора,
	|	ВТ_Соглашения.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	ВТ_Соглашения.Договор КАК Договор
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	ВТ_Соглашения КАК ВТ_Соглашения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Соглашения.Приоритет,
	|	ВТ_Соглашения.Ссылка.ДатаНачалаДействия УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоммерческиеСоглашения.Ссылка КАК Ссылка,
	|	КоммерческиеСоглашения.Код КАК Код,
	|	КоммерческиеСоглашения.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.ДатаНачалаДействия < ВТ_Документы.ДатаДоговора
	|			ТОГДА ВТ_Документы.ДатаДоговора
	|		ИНАЧЕ КоммерческиеСоглашения.ДатаНачалаДействия
	|	КОНЕЦ КАК ДатаСоглашения,
	|	КоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	КоммерческиеСоглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	КоммерческиеСоглашения.Комментарий КАК Комментарий,
	|	КоммерческиеСоглашения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	КоммерческиеСоглашения.СпособДоставкиТовара КАК СпособДоставкиТовара,
	|	КоммерческиеСоглашения.ОтправкаЗаказаПоФормеНаЭлПочту КАК ОтправкаЗаказаПоФормеНаЭлПочту,
	|	КоммерческиеСоглашения.ОтправкаЗаказаЧерезEDI КАК ОтправкаЗаказаЧерезEDI,
	|	КоммерческиеСоглашения.ОтправкаЗаказаЧерезВ2В КАК ОтправкаЗаказаЧерезВ2В,
	|	0 КАК РазмерСкидкиНаПроведениеКоммерческойАкции,
	|	КоммерческиеСоглашения.РазмерСкидкиПриОткрытииНовогоМагазина КАК РазмерСкидкиПриОткрытииНовогоМагазина,
	|	КоммерческиеСоглашения.РазмерСкидкиНаНовыйТовар КАК РазмерСкидкиНаНовыйТовар,
	|	КоммерческиеСоглашения.РазмерСкидкиНаРекламноДемонстрационныеМатериалы КАК РазмерСкидкиНаРекламноДемонстрационныеМатериалы,
	|	КоммерческиеСоглашения.РазмерСкидкиНаТоварПодлежащийВозврату КАК РазмерСкидкиНаТоварПодлежащийВозврату,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриОткрытииНовогоМагазина КАК ОтсрочкаОплатыПриОткрытииНовогоМагазина,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриЗаказеНовогоТовара КАК ОтсрочкаОплатыПриЗаказеНовогоТовара,
	|	КоммерческиеСоглашения.СрокНаправленияЗаявленияОВозврате КАК СрокНаправленияЗаявленияОВозврате,
	|	КоммерческиеСоглашения.ПроцентРеализованногоТовара КАК ПроцентРеализованногоТовара,
	|	КоммерческиеСоглашения.СрокРеализацииУказанногоПроцентаПоставленногоТовара КАК СрокРеализацииУказанногоПроцентаПоставленногоТовара,
	|	КоммерческиеСоглашения.РазмерШтрафаШоуРум КАК РазмерШтрафаШоуРум,
	|	КоммерческиеСоглашения.РазмерВыплатыПриРасторженииДоговора КАК РазмерВыплатыПриРасторженииДоговора,
	|	КоммерческиеСоглашения.СрокОплатыТовара КАК СрокОплатыТовара,
	|	КоммерческиеСоглашения.МаксимумДнейОтсрочки КАК МаксимумДнейОтсрочки,
	|	КоммерческиеСоглашения.ТестовыйПериодЭДО КАК ТестовыйПериодЭДО,
	|	КоммерческиеСоглашения.УслугаПоОрганизацииШоуРум КАК УслугаПоОрганизацииШоуРум,
	|	КоммерческиеСоглашения.ВыплачиваютсяПремии КАК ВыплачиваютсяПремии,
	|	КоммерческиеСоглашения.СрокиОтчетаОПродажах.Наименование КАК СрокиОтчетаОПродажах,
	|	КоммерческиеСоглашения.РекламноДемонстрационныеМатериалыПанели КАК РекламноДемонстрационныеМатериалыПанели,
	|	КоммерческиеСоглашения.ПолныйАвансовыйПлатежНаВесьТовар КАК ПолныйАвансовыйПлатежНаВесьТовар,
	|	КоммерческиеСоглашения.РазмерАвансаЗаПартиюТовара КАК РазмерАвансаЗаПартиюТовара,
	|	КоммерческиеСоглашения.ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара КАК ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара,
	|	КоммерческиеСоглашения.ОтсрочкаПлатежаНаВесьТовар КАК ОтсрочкаПлатежаНаВесьТовар,
	|	вогЮридическиеЛица.НаименованиеПолное КАК ПредставлениеКлиент,
	|	СпрОрганизации.Ссылка КАК Организация,
	|	СпрОрганизации.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СпрОрганизации.Наименование КАК ОрганизацияНаименование,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.КонтактноеЛицо) КАК ПредставлениеКонтактногоЛица,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.CRM_Должность) КАК ПредставлениеДолжностьКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.CRM_Должность.Родительный КАК ПредставлениеДолжностьКонтактногоЛицаРодительный,
	|	КонтактныеЛицаПартнеров.КонтактноеЛицо.Пол КАК ПолКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.КонтактноеЛицо.НеСклонятьФамилию КАК НеСклонятьФамилию,
	|	ФизическиеЛица.Наименование КАК РуководительПредставление,
	|	ФизическиеЛица.Пол КАК РуководительПол,
	|	ОтветственныеЛица.Должность КАК РуководительДолжностьПредставление,
	|	ЕСТЬNULL(ОтветственныеЛица.ПравоПодписиПоДоверенности, ЛОЖЬ) КАК ПравоПодписиПоДоверенности,
	|	ОтветственныеЛица.ОснованиеПраваПодписи КАК ОснованиеПраваПодписи,
	|	ИСТИНА КАК ИспользоватьПриложение1,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ <> 0
	|				ИЛИ КоммерческиеСоглашения.ПроцентРеализованногоТовара <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПриложение6,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.СпособДоставкиТовара = ЗНАЧЕНИЕ(Перечисление.вогСпособыДоставкиТовара.ДоставкаТовараПоставщиком)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПриложение2,
	|	КоммерческиеСоглашения.УслугаПоОрганизацииШоуРум КАК ИспользоватьПриложение3,
	|	КоммерческиеСоглашения.ВыплачиваютсяПремии КАК ИспользоватьПриложение4,
	|	КоммерческиеСоглашения.ИспользоватьЭДО КАК ИспользоватьЭДО,
	|	КоммерческиеСоглашения.СпособОтправкиЗаказа КАК СпособОтправкиЗаказа,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	СпрОрганизации.ИНН + ""/"" + СпрОрганизации.КПП КАК ИННКПП,
	|	вогЮридическиеЛица.CRM_ИНН + ""/"" + вогЮридическиеЛица.CRM_КПП КАК ИННКППКлиента,
	|	вогЮридическиеЛица.CRM_ОГРН КАК ОГРНКлиента,
	|	СпрОрганизации.CRM_ОГРН КАК ОГРН,
	|	ВТ_Документы.Договор КАК Договор,
	|	вогЮридическиеЛица.Ссылка КАК Клиент,
	|	ВТ_Документы.Договор.вогДокументОснованиеПартнера КАК ДокументОснованиеПартнера,
	|	вогЮридическиеЛица.ОрганизационноПравоваяФорма.ЮрФизЛицо КАК ЮрФизЛицо,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.ОператорЭДО <> ЗНАЧЕНИЕ(Справочник.вогОператорыЭДО.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПриложение5,
	|	ВТ_Документы.Договор.вогОтветственноеЛицо КАК ОтветственноеЛицо,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.Номер КАК ДоверенностьНомер,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ДатаДокумента КАК ДоверенностьДатаДокумента,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС КАК ДоверенностьПериодДействияС,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо КАК ДоверенностьПериодДействияПо,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.Основание КАК ДоверенностьОснование,
	|	КоммерческиеСоглашения.ДоставкуВозвратаОсуществляетКлиент КАК ДоставкуВозвратаОсуществляетКлиент,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ КАК ОтсрочкаОплатыПриПоставкеТовараПодЗаказ,
	|	вогОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ГенеральныйДиректор,
	|	КоммерческиеСоглашения.ПремияВычетСтоимостиПоТранзПоставке КАК ПремияВычетСтоимостиПоТранзПоставке,
	|	КоммерческиеСоглашения.СтоимостьОбразцовВключенаВСтоимостьТовара КАК СтоимостьОбразцовВключенаВСтоимостьТовара,
	|	КоммерческиеСоглашения.ЕстьДополнительноеСоглашениеПоНормеБоя КАК ЕстьДополнительноеСоглашениеПоНормеБоя,
	|	КоммерческиеСоглашения.ЕстьВозвратТовара КАК ЕстьВозвратТовара,
	|	КоммерческиеСоглашения.НормаБоя КАК НормаБоя,
	|	КоммерческиеСоглашения.ОтчетныйПериодДляДопСоглашенияПоНормеБоя КАК ОтчетныйПериодДляДопСоглашенияПоНормеБоя,
	|	КоммерческиеСоглашения.ПоставщикПроизводитВозвратНеликвидногоТовара КАК ПоставщикПроизводитВозвратНеликвидногоТовара,
	|	КоммерческиеСоглашения.ЕстьПоставкаТовараПодЗаказ КАК ЕстьПоставкаТовараПодЗаказ
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК КоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|			ПО ВТ_Документы.ЮридическоеЛицо = вогЮридическиеЛица.Ссылка
	// ++ VOG Солодов В.В. 09.02.2021 DEV-150
	// До изменения
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	//|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	//|				ПО ОтветственныеЛица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	//|			ПО ВТ_Документы.Договор.вогОтветственноеЛицо = ОтветственныеЛица.Ссылка
	//|				И ВТ_Документы.Договор.Организация = ОтветственныеЛица.Владелец
	// -- VOG Солодов В.В. 09.02.2021 DEV-150
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК КонтактныеЛицаПартнеров
	|			ПО ВТ_Документы.Договор.вогПодписантПартнера = КонтактныеЛицаПартнеров.КонтактноеЛицо
	|				И ВТ_Документы.ЮридическоеЛицо = КонтактныеЛицаПартнеров.ОбъектСвязи
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогКонтактныеЛицаПодписанты.СрезПоследних КАК вогКонтактныеЛицаПодписантыСрезПоследних
	|			ПО ВТ_Документы.ЮридическоеЛицо = вогКонтактныеЛицаПодписантыСрезПоследних.ЮридическоеЛицо
	|				И ВТ_Документы.Договор.вогПодписантПартнера = вогКонтактныеЛицаПодписантыСрезПоследних.КонтактноеЛицо
	|				И (ВТ_Документы.Ссылка.Дата >= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС
	|						И (ВТ_Документы.Ссылка.Дата <= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо
	|							ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|					ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.Основание = ЗНАЧЕНИЕ(Перечисление.ВариантыОснованийПодписанта.Устава))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК вогОтветственныеЛицаОрганизаций
	|			ПО ВТ_Документы.Договор.Организация = вогОтветственныеЛицаОрганизаций.Владелец
	|				И (""Генеральный директор"" = вогОтветственныеЛицаОрганизаций.Должность)
	|				И (ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) = вогОтветственныеЛицаОрганизаций.ДатаОкончания)
	|		ПО КоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СпрОрганизации
	|		ПО КоммерческиеСоглашения.Организация = СпрОрганизации.Ссылка
	// ++ VOG Солодов В.В. 09.02.2021 DEV-150
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ПО ОтветственныеЛица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ПО КоммерческиеСоглашения.ОтветственноеЛицо = ОтветственныеЛица.Ссылка
	|			И КоммерческиеСоглашения.Организация = ОтветственныеЛица.Владелец
	// -- VOG Солодов В.В. 09.02.2021 DEV-150
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(вогТорговыеТочкиКонтактнаяИнформация.Ссылка) КАК НаименованиеТорговойТочки,
	|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	вогТорговыеТочкиКонтактнаяИнформация.Представление КАК АдресДоставки,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.Номер КАК НомерСоглашения,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия КАК ДатаСоглашения,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.Договор КАК Договор,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита КАК МинимальнаяСтоимостьПартии
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.АдресаДоставки КАК вогКоммерческиеСоглашенияАдресаДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.Ссылка = ВТ_Документы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = вогТорговыеТочкиКонтактнаяИнформация.Ссылка
	|			И (вогТорговыеТочкиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресТорговойТочки))
	|			И (НЕ вогТорговыеТочкиКонтактнаяИнформация.Представление = """")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = CRM_ОбъектыЗначенийКлассификаторов.Объект
	|			И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатораМинСтоимостьТовара)
	|			И вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.НаправлениеДеятельности = CRM_ОбъектыЗначенийКлассификаторов.Аналитика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка),
	|	вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка,
	|	вогРаспределительныеЦентрыКонтактнаяИнформация.Представление,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.Номер,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия,
	|	ВТ_Документы.ДатаДоговора,
	|	ВТ_Документы.НомерДоговора,
	|	ВТ_Документы.Договор,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.АдресаДоставки КАК вогКоммерческиеСоглашенияАдресаДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.Ссылка = ВТ_Документы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогРаспределительныеЦентры.КонтактнаяИнформация КАК вогРаспределительныеЦентрыКонтактнаяИнформация
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка
	|			И (вогРаспределительныеЦентрыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресРаспределительногоЦентра))
	|			И (НЕ вогРаспределительныеЦентрыКонтактнаяИнформация.Представление = """")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = CRM_ОбъектыЗначенийКлассификаторов.Объект
	|			И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатораМинСтоимостьТовара)
	|ИТОГИ
	|	МАКСИМУМ(НомерСоглашения),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(ДатаДоговора)
	|ПО
	|	НомерДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	вогКоммерческиеСоглашенияДокументыЭДО.ВидДокумента КАК ВидДокумента,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.Номер КАК НомерСоглашения,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ДатаНачалаДействия КАК ДатаСоглашения,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ОператорЭДО КАК ОператорЭДО,
	|	ВТ_Документы.Договор КАК Договор
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.ДокументыЭДО КАК вогКоммерческиеСоглашенияДокументыЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияДокументыЭДО.Ссылка = ВТ_Документы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	вогКоммерческиеСоглашенияДокументыЭДО.ВидДокумента.Порядок
	|ИТОГИ
	|	МАКСИМУМ(НомерСоглашения),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(ОператорЭДО)
	|ПО
	|	НомерДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.Договор КАК Договор,
	|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаСоглашения,
	|	вогКоммерческиеСоглашения.Номер КАК НомерСоглашения
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(НомерСоглашения)
	|ПО
	|	НомерДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.Договор КАК Договор,
	|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаСоглашения,
	|	вогКоммерческиеСоглашения.Номер КАК НомерСоглашения
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(НомерСоглашения)
	|ПО
	|	НомерДоговора";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ЗначениеКлассификатораМинСтоимостьТовара", Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("fff7455d-cfd9-11e8-a684-005056bc3fe8")));
	Если НаправлениеДеятельности = Неопределено тогда
		НаправлениеДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(),"CRM_НаправлениеДеятельности");	
	КонецЕсли;
	Запрос.УстановитьПараметр("НаправлениеДеятельности",НаправлениеДеятельности);
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыПриложение4(МассивОбъектов,НаправлениеДеятельности=Неопределено)
	
	Запрос = Новый Запрос;
	
	#Область СтарыйКод1
	
	// доработано VOG Ульянов И.В. 04.03.2020 CRM-420
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ДоговорыКонтрагентов.Владелец КАК ЮридическоеЛицо,
	//	|	ДоговорыКонтрагентов.Организация КАК Организация,
	//	|	вогЮридическиеЛица.Партнер КАК Партнер,
	//	|	ДоговорыКонтрагентов.ДатаДоговора КАК ДатаДоговора,
	//	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
	//	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	//	|ПОМЕСТИТЬ ВТ_Договора
	//	|ИЗ
	//	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	//	|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
	//	|ГДЕ
	//	|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
	//	|	1 КАК Приоритет,
	//	|	ВТ_Договора.ДатаДоговора КАК ДатаДоговора,
	//	|	ВТ_Договора.НомерДоговора КАК НомерДоговора,
	//	|	ВТ_Договора.ЮридическоеЛицо КАК ЮридическоеЛицо,
	//	|	ВТ_Договора.Договор КАК Договор
	//	|ПОМЕСТИТЬ ВТ_Соглашения
	//	|ИЗ
	//	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	//	|		ПО вогКоммерческиеСоглашения.ЮридическоеЛицо = ВТ_Договора.ЮридическоеЛицо
	//	|			И вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	//	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	//	|			И (НЕ вогКоммерческиеСоглашения.ПометкаУдаления)
	//	|ГДЕ
	//	|	НЕ вогКоммерческиеСоглашения.ПометкаУдаления
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	вогКоммерческиеСоглашения.Ссылка,
	//	|	2,
	//	|	ВТ_Договора.ДатаДоговора,
	//	|	ВТ_Договора.НомерДоговора,
	//	|	ВТ_Договора.ЮридическоеЛицо,
	//	|	ВТ_Договора.Договор
	//	|ИЗ
	//	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	//	|		ПО вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	//	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	//	|			И (вогКоммерческиеСоглашения.ЮридическоеЛицо = ЗНАЧЕНИЕ(Справочник.вогЮридическиеЛица.ПустаяСсылка))
	//	|			И (НЕ вогКоммерческиеСоглашения.ПометкаУдаления)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	ВТ_Соглашения.Ссылка КАК Ссылка,
	//	|	ВТ_Соглашения.ДатаДоговора КАК ДатаДоговора,
	//	|	ВТ_Соглашения.НомерДоговора КАК НомерДоговора,
	//	|	ВТ_Соглашения.ЮридическоеЛицо КАК ЮридическоеЛицо,
	//	|	ВТ_Соглашения.Договор КАК Договор
	//	|ПОМЕСТИТЬ ВТ_Документы
	//	|ИЗ
	//	|	ВТ_Соглашения КАК ВТ_Соглашения
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ВТ_Соглашения.Приоритет
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	КоммерческиеСоглашения.Ссылка КАК Ссылка,
	//	|	ВЫБОР
	//	|		КОГДА КоммерческиеСоглашения.ДатаНачалаДействия > ВТ_Документы.ДатаДоговора
	//	|			ТОГДА ВТ_Документы.ДатаДоговора
	//	|		ИНАЧЕ КоммерческиеСоглашения.ДатаНачалаДействия
	//	|	КОНЕЦ КАК ДатаСоглашения,
	//	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	//	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	//	|	ВТ_Документы.ЮридическоеЛицо КАК ЮридическоеЛицо,
	//	|	ВТ_Документы.Договор КАК Договор,
	//	|	КоммерческиеСоглашения.Номер КАК НомерСоглашения,
	//	|	КоммерческиеСоглашения.Организация КАК Организация
	//	|ПОМЕСТИТЬ ВТ_СоглашенияДляПечати
	//	|ИЗ
	//	|	Справочник.вогКоммерческиеСоглашения КАК КоммерческиеСоглашения
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	//	|		ПО КоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	вогУсловияПредоставленияПремий.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
	//	|	вогУсловияПредоставленияПремий.Анкета КАК Анкета,
	//	|	вогУсловияПредоставленияПремий.ПериодДействияС КАК Дата
	//	|ПОМЕСТИТЬ ВТ_СписокАнкет
	//	|ИЗ
	//	|	РегистрСведений.вогУсловияПредоставленияПремий КАК вогУсловияПредоставленияПремий
	//	|ГДЕ
	//	|	вогУсловияПредоставленияПремий.КоммерческоеСоглашение В
	//	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|				ВТ_СоглашенияДляПечати.Ссылка КАК Ссылка
	//	|			ИЗ
	//	|				ВТ_СоглашенияДляПечати КАК ВТ_СоглашенияДляПечати)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	вогУсловияПредоставленияПремий.КоммерческоеСоглашение,
	//	|	вогУсловияПредоставленияПремий.Анкета,
	//	|	вогУсловияПредоставленияПремий.ПериодДействияС
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_Анкеты.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
	//	|	МАКСИМУМ(ВТ_Анкеты.Дата) КАК Дата
	//	|ПОМЕСТИТЬ ВТ_ДатыПоследнихАнкет
	//	|ИЗ
	//	|	ВТ_СписокАнкет КАК ВТ_Анкеты
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ВТ_Анкеты.КоммерческоеСоглашение
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_ДатыПоследнихАнкет.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
	//	|	ВТ_СписокАнкет.Анкета КАК Анкета
	//	|ПОМЕСТИТЬ ВТ_АнкетыДляОтбора
	//	|ИЗ
	//	|	ВТ_ДатыПоследнихАнкет КАК ВТ_ДатыПоследнихАнкет
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокАнкет КАК ВТ_СписокАнкет
	//	|		ПО ВТ_ДатыПоследнихАнкет.Дата = ВТ_СписокАнкет.Дата
	//	|			И ВТ_ДатыПоследнихАнкет.КоммерческоеСоглашение = ВТ_СписокАнкет.КоммерческоеСоглашение
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	вогУсловияПредоставленияПремий.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
	//	|	вогУсловияПредоставленияПремий.Анкета КАК Анкета,
	//	|	вогУсловияПредоставленияПремий.ИдентификаторНГ КАК ИдентификаторНГ,
	//	|	вогУсловияПредоставленияПремий.БазаНачисления КАК БазаНачисления,
	//	|	вогУсловияПредоставленияПремий.ЛимитС КАК ЛимитС,
	//	|	вогУсловияПредоставленияПремий.ЛимитПо КАК ЛимитПо,
	//	|	вогУсловияПредоставленияПремий.ПроцентнаяСтавкаПремии КАК ПроцентнаяСтавкаПремии,
	//	|	вогУсловияПредоставленияПремий.КоличествоЭлементов КАК КоличествоЭлементов,
	//	|	вогУсловияПредоставленияПремий.Периодичность КАК Периодичность,
	//	|	вогУсловияПредоставленияПремий.ВыбранныйПериод КАК ВыбранныйПериод,
	//	|	вогУсловияПредоставленияПремий.ПериодДействияС КАК ПериодДействияС,
	//	|	вогУсловияПредоставленияПремий.ПериодДействияПо КАК ПериодДействияПо,
	//	|	вогУсловияПредоставленияПремий.ДатаЗаключенияПриложения КАК ДатаЗаключенияПриложения,
	//	|	вогУсловияПредоставленияПремий.ЕдиницаИзмеренияБазы КАК ЕдиницаИзмеренияБазы
	//	|ПОМЕСТИТЬ ВТ_УсловияПредоставленияПремий
	//	|ИЗ
	//	|	РегистрСведений.вогУсловияПредоставленияПремий КАК вогУсловияПредоставленияПремий
	//	|ГДЕ
	//	|	вогУсловияПредоставленияПремий.Анкета В
	//	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|				ВТ_АнкетыДляОтбора.Анкета КАК Анкета
	//	|			ИЗ
	//	|				ВТ_АнкетыДляОтбора КАК ВТ_АнкетыДляОтбора)
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	вогСпискиГруппНоменклатуры.Идентификатор КАК Идентификатор,
	//	|	вогСпискиГруппНоменклатуры.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
	//	|ПОМЕСТИТЬ ВТ_СпискиГруппНоменклатуры
	//	|ИЗ
	//	|	РегистрСведений.вогСпискиГруппНоменклатуры КАК вогСпискиГруппНоменклатуры
	//	|ГДЕ
	//	|	вогСпискиГруппНоменклатуры.Идентификатор В
	//	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|				ВТ_УсловияПредоставленияПремий.ИдентификаторНГ КАК ИдентификаторНГ
	//	|			ИЗ
	//	|				ВТ_УсловияПредоставленияПремий КАК ВТ_УсловияПредоставленияПремий)
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Идентификатор
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_УсловияПредоставленияПремий.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
	//	|	ВТ_УсловияПредоставленияПремий.ИдентификаторНГ КАК ИдентификаторНГ,
	//	|	ВТ_УсловияПредоставленияПремий.БазаНачисления КАК БазаНачисления,
	//	|	ВТ_УсловияПредоставленияПремий.Периодичность КАК Периодичность,
	//	|	ВТ_УсловияПредоставленияПремий.ПериодДействияС КАК ПериодДействияС,
	//	|	ВТ_УсловияПредоставленияПремий.ПериодДействияПо КАК ПериодДействияПо,
	//	|	ВТ_СпискиГруппНоменклатуры.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	//	|	ВТ_УсловияПредоставленияПремий.ЛимитС КАК ЛимитС,
	//	|	ВТ_УсловияПредоставленияПремий.ЛимитПо КАК ЛимитПо,
	//	|	ВТ_УсловияПредоставленияПремий.ПроцентнаяСтавкаПремии КАК ПроцентнаяСтавкаПремии,
	//	|	ВТ_УсловияПредоставленияПремий.ВыбранныйПериод КАК ВыбранныйПериод,
	//	|	ВТ_СоглашенияДляПечати.НомерСоглашения КАК НомерСоглашения,
	//	|	ВТ_СоглашенияДляПечати.ДатаСоглашения КАК ДатаСоглашения,
	//	|	ВТ_СоглашенияДляПечати.НомерДоговора КАК НомерДоговора,
	//	|	ВТ_СоглашенияДляПечати.ДатаДоговора КАК ДатаДоговора,
	//	|	ВТ_УсловияПредоставленияПремий.ДатаЗаключенияПриложения КАК ДатаЗаключенияПриложения,
	//	|	ВТ_УсловияПредоставленияПремий.ЕдиницаИзмеренияБазы КАК ЕдиницаИзмеренияБазы
	//	|ИЗ
	//	|	ВТ_УсловияПредоставленияПремий КАК ВТ_УсловияПредоставленияПремий
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СпискиГруппНоменклатуры КАК ВТ_СпискиГруппНоменклатуры
	//	|		ПО ВТ_УсловияПредоставленияПремий.ИдентификаторНГ = ВТ_СпискиГруппНоменклатуры.Идентификатор
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоглашенияДляПечати КАК ВТ_СоглашенияДляПечати
	//	|		ПО ВТ_УсловияПредоставленияПремий.КоммерческоеСоглашение = ВТ_СоглашенияДляПечати.Ссылка
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ВыбранныйПериод,
	//	|	ЛимитС
	//	|ИТОГИ
	//	|	МАКСИМУМ(БазаНачисления),
	//	|	МАКСИМУМ(Периодичность),
	//	|	МАКСИМУМ(ПериодДействияС),
	//	|	МАКСИМУМ(ПериодДействияПо),
	//	|	МАКСИМУМ(ЛимитС),
	//	|	МАКСИМУМ(ЛимитПо),
	//	|	МАКСИМУМ(ПроцентнаяСтавкаПремии),
	//	|	МАКСИМУМ(ВыбранныйПериод),
	//	|	МАКСИМУМ(НомерСоглашения),
	//	|	МАКСИМУМ(ДатаСоглашения),
	//	|	МАКСИМУМ(НомерДоговора),
	//	|	МАКСИМУМ(ДатаДоговора),
	//	|	МАКСИМУМ(ДатаЗаключенияПриложения),
	//	|	МАКСИМУМ(ЕдиницаИзмеренияБазы)
	//	|ПО
	//	|	КоммерческоеСоглашение,
	//	|	ИдентификаторНГ";
	
	#КонецОбласти
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		 	|	ДоговорыКонтрагентов.Владелец КАК ЮридическоеЛицо,
		 	|	ДоговорыКонтрагентов.Организация КАК Организация,
		 	|	вогЮридическиеЛица.Партнер КАК Партнер,
		 	|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаДоговора,
		 	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
		 	|	ДоговорыКонтрагентов.Ссылка КАК Договор
		 	|ПОМЕСТИТЬ ВТ_Договора
		 	|ИЗ
		 	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		 	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
		 	|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
		 	|ГДЕ
		 	|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)
		 	|;
		 	|
		 	|////////////////////////////////////////////////////////////////////////////////
		 	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		 	|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
		 	|	1 КАК Приоритет,
		 	|	ВТ_Договора.ДатаДоговора КАК ДатаДоговора,
		 	|	ВТ_Договора.НомерДоговора КАК НомерДоговора,
		 	|	ВТ_Договора.ЮридическоеЛицо КАК ЮридическоеЛицо,
		 	|	ВТ_Договора.Договор КАК Договор,
		 	|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаНачалаДействия
		 	|ПОМЕСТИТЬ ВТ_Соглашения
		 	|ИЗ
		 	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
		 	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
		 	|		ПО вогКоммерческиеСоглашения.ЮридическоеЛицо = ВТ_Договора.ЮридическоеЛицо
		 	|			И вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
		 	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
		 	|			И (НЕ вогКоммерческиеСоглашения.Статус В (&СписокСтатусовДляИсключения))
		 	|			И (вогКоммерческиеСоглашения.ПометкаУдаления = ЛОЖЬ)
		 	|ГДЕ
		 	|	ВЫБОР
		 	|			КОГДА &НаправлениеДеятельности = НЕОПРЕДЕЛЕНО
		 	|				ТОГДА ИСТИНА
		 	|			ИНАЧЕ вогКоммерческиеСоглашения.НаправлениеДеятельности = &НаправлениеДеятельности
		 	|		КОНЕЦ
		 	|
		 	|ОБЪЕДИНИТЬ ВСЕ
		 	|
		 	|ВЫБРАТЬ
		 	|	вогКоммерческиеСоглашения.Ссылка,
		 	|	2,
		 	|	ВТ_Договора.ДатаДоговора,
		 	|	ВТ_Договора.НомерДоговора,
		 	|	ВТ_Договора.ЮридическоеЛицо,
		 	|	ВТ_Договора.Договор,
		 	|	вогКоммерческиеСоглашения.ДатаНачалаДействия
		 	|ИЗ
		 	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
		 	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
		 	|		ПО вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
		 	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
		 	|			И (вогКоммерческиеСоглашения.ЮридическоеЛицо = ЗНАЧЕНИЕ(Справочник.вогЮридическиеЛица.ПустаяСсылка))
		 	|			И (НЕ вогКоммерческиеСоглашения.Статус В (&СписокСтатусовДляИсключения))
		 	|			И (вогКоммерческиеСоглашения.ПометкаУдаления = ЛОЖЬ)
		 	|ГДЕ
		 	|	ВЫБОР
		 	|			КОГДА &НаправлениеДеятельности = НЕОПРЕДЕЛЕНО
		 	|				ТОГДА ИСТИНА
		 	|			ИНАЧЕ вогКоммерческиеСоглашения.НаправлениеДеятельности = &НаправлениеДеятельности
		 	|		КОНЕЦ
		 	|;
		 	|
		 	|////////////////////////////////////////////////////////////////////////////////
		 	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		 	|	ВТ_Соглашения.Ссылка КАК Ссылка,
		 	|	ВТ_Соглашения.ДатаДоговора КАК ДатаДоговора,
		 	|	ВТ_Соглашения.НомерДоговора КАК НомерДоговора,
		 	|	ВТ_Соглашения.ЮридическоеЛицо КАК ЮридическоеЛицо,
		 	|	ВТ_Соглашения.Договор КАК Договор
		 	|ПОМЕСТИТЬ ВТ_Документы
		 	|ИЗ
		 	|	ВТ_Соглашения КАК ВТ_Соглашения
		 	|
		 	|УПОРЯДОЧИТЬ ПО
		 	|	ВТ_Соглашения.Приоритет,
		 	|	ВТ_Соглашения.ДатаНачалаДействия УБЫВ
		 	|;
		 	|
		 	|////////////////////////////////////////////////////////////////////////////////
		 	|ВЫБРАТЬ РАЗЛИЧНЫЕ
		 	|	КоммерческиеСоглашения.Ссылка КАК Ссылка,
		 	|	ВЫБОР
		 	|		КОГДА КоммерческиеСоглашения.ДатаНачалаДействия > ВТ_Документы.ДатаДоговора
		 	|			ТОГДА ВТ_Документы.ДатаДоговора
		 	|		ИНАЧЕ КоммерческиеСоглашения.ДатаНачалаДействия
		 	|	КОНЕЦ КАК ДатаСоглашения,
		 	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
		 	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
		 	|	ВТ_Документы.ЮридическоеЛицо КАК ЮридическоеЛицо,
		 	|	ВТ_Документы.Договор КАК Договор,
		 	|	КоммерческиеСоглашения.Номер КАК НомерСоглашения,
		 	|	КоммерческиеСоглашения.Организация КАК Организация
		 	|ПОМЕСТИТЬ ВТ_СоглашенияДляПечати
		 	|ИЗ
		 	|	Справочник.вогКоммерческиеСоглашения КАК КоммерческиеСоглашения
		 	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
		 	|		ПО КоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
		 	|
		 	|ИНДЕКСИРОВАТЬ ПО
		 	|	Ссылка
		 	|;
		 	|
		 	|////////////////////////////////////////////////////////////////////////////////
		 	|ВЫБРАТЬ
		 	|	вогУсловияПредоставленияПремий.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
		 	|	вогУсловияПредоставленияПремий.Анкета КАК Анкета,
		 	|	вогУсловияПредоставленияПремий.ПериодДействияС КАК Дата
		 	|ПОМЕСТИТЬ ВТ_СписокАнкет
		 	|ИЗ
		 	|	РегистрСведений.вогУсловияПредоставленияПремий КАК вогУсловияПредоставленияПремий
		 	|ГДЕ
		 	|	вогУсловияПредоставленияПремий.КоммерческоеСоглашение В
		 	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		 	|				ВТ_СоглашенияДляПечати.Ссылка КАК Ссылка
		 	|			ИЗ
		 	|				ВТ_СоглашенияДляПечати КАК ВТ_СоглашенияДляПечати)
		 	|
		 	|СГРУППИРОВАТЬ ПО
		 	|	вогУсловияПредоставленияПремий.КоммерческоеСоглашение,
		 	|	вогУсловияПредоставленияПремий.Анкета,
		 	|	вогУсловияПредоставленияПремий.ПериодДействияС
		 	|;
		 	|
		 	|////////////////////////////////////////////////////////////////////////////////
		 	|ВЫБРАТЬ
		 	|	ВТ_Анкеты.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
		 	|	МАКСИМУМ(ВТ_Анкеты.Дата) КАК Дата
		 	|ПОМЕСТИТЬ ВТ_ДатыПоследнихАнкет
		 	|ИЗ
		 	|	ВТ_СписокАнкет КАК ВТ_Анкеты
		 	|
		 	|СГРУППИРОВАТЬ ПО
		 	|	ВТ_Анкеты.КоммерческоеСоглашение
		 	|;
		 	|
		 	|////////////////////////////////////////////////////////////////////////////////
		 	|ВЫБРАТЬ
		 	|	ВТ_ДатыПоследнихАнкет.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
		 	|	ВТ_СписокАнкет.Анкета КАК Анкета
		 	|ПОМЕСТИТЬ ВТ_АнкетыДляОтбора
		 	|ИЗ
		 	|	ВТ_ДатыПоследнихАнкет КАК ВТ_ДатыПоследнихАнкет
		 	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокАнкет КАК ВТ_СписокАнкет
		 	|		ПО ВТ_ДатыПоследнихАнкет.Дата = ВТ_СписокАнкет.Дата
		 	|			И ВТ_ДатыПоследнихАнкет.КоммерческоеСоглашение = ВТ_СписокАнкет.КоммерческоеСоглашение
		 	|;
		 	|
		 	|////////////////////////////////////////////////////////////////////////////////
		 	|ВЫБРАТЬ
		 	|	вогУсловияПредоставленияПремий.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
		 	|	вогУсловияПредоставленияПремий.Анкета КАК Анкета,
		 	|	вогУсловияПредоставленияПремий.ИдентификаторНГ КАК ИдентификаторНГ,
		 	|	вогУсловияПредоставленияПремий.БазаНачисления КАК БазаНачисления,
		 	|	вогУсловияПредоставленияПремий.ЛимитС КАК ЛимитС,
		 	|	вогУсловияПредоставленияПремий.ЛимитПо КАК ЛимитПо,
		 	|	вогУсловияПредоставленияПремий.ПроцентнаяСтавкаПремии КАК ПроцентнаяСтавкаПремии,
		 	|	вогУсловияПредоставленияПремий.КоличествоЭлементов КАК КоличествоЭлементов,
		 	|	вогУсловияПредоставленияПремий.Периодичность КАК Периодичность,
		 	|	вогУсловияПредоставленияПремий.ВыбранныйПериод КАК ВыбранныйПериод,
		 	|	вогУсловияПредоставленияПремий.ПериодДействияС КАК ПериодДействияС,
		 	|	вогУсловияПредоставленияПремий.ПериодДействияПо КАК ПериодДействияПо,
		 	|	вогУсловияПредоставленияПремий.ДатаЗаключенияПриложения КАК ДатаЗаключенияПриложения,
		 	|	вогУсловияПредоставленияПремий.ЕдиницаИзмеренияБазы КАК ЕдиницаИзмеренияБазы
		 	|ПОМЕСТИТЬ ВТ_УсловияПредоставленияПремий
		 	|ИЗ
		 	|	РегистрСведений.вогУсловияПредоставленияПремий КАК вогУсловияПредоставленияПремий
		 	|ГДЕ
		 	|	вогУсловияПредоставленияПремий.Анкета В
		 	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		 	|				ВТ_АнкетыДляОтбора.Анкета КАК Анкета
		 	|			ИЗ
		 	|				ВТ_АнкетыДляОтбора КАК ВТ_АнкетыДляОтбора)
		 	|;
		 	|
		 	|////////////////////////////////////////////////////////////////////////////////
		 	|ВЫБРАТЬ РАЗЛИЧНЫЕ
		 	|	вогСпискиГруппНоменклатуры.Идентификатор КАК Идентификатор,
		 	|	вогСпискиГруппНоменклатуры.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		 	|ПОМЕСТИТЬ ВТ_СпискиГруппНоменклатуры
		 	|ИЗ
		 	|	РегистрСведений.вогСпискиГруппНоменклатуры КАК вогСпискиГруппНоменклатуры
		 	|ГДЕ
		 	|	вогСпискиГруппНоменклатуры.Идентификатор В
		 	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		 	|				ВТ_УсловияПредоставленияПремий.ИдентификаторНГ КАК ИдентификаторНГ
		 	|			ИЗ
		 	|				ВТ_УсловияПредоставленияПремий КАК ВТ_УсловияПредоставленияПремий)
		 	|
		 	|ИНДЕКСИРОВАТЬ ПО
		 	|	Идентификатор
		 	|;
		 	|
		 	|////////////////////////////////////////////////////////////////////////////////
		 	|ВЫБРАТЬ
		 	|	ВТ_УсловияПредоставленияПремий.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
		 	|	ВТ_УсловияПредоставленияПремий.ИдентификаторНГ КАК ИдентификаторНГ,
		 	|	ВТ_УсловияПредоставленияПремий.БазаНачисления КАК БазаНачисления,
		 	|	ВТ_УсловияПредоставленияПремий.Периодичность КАК Периодичность,
		 	|	ВТ_УсловияПредоставленияПремий.ПериодДействияС КАК ПериодДействияС,
		 	|	ВТ_УсловияПредоставленияПремий.ПериодДействияПо КАК ПериодДействияПо,
		 	|	ВТ_СпискиГруппНоменклатуры.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		 	|	ВТ_УсловияПредоставленияПремий.ЛимитС КАК ЛимитС,
		 	|	ВТ_УсловияПредоставленияПремий.ЛимитПо КАК ЛимитПо,
		 	|	ВТ_УсловияПредоставленияПремий.ПроцентнаяСтавкаПремии КАК ПроцентнаяСтавкаПремии,
		 	|	ВТ_УсловияПредоставленияПремий.ВыбранныйПериод КАК ВыбранныйПериод,
		 	|	ВТ_СоглашенияДляПечати.НомерСоглашения КАК НомерСоглашения,
		 	|	ВТ_СоглашенияДляПечати.ДатаСоглашения КАК ДатаСоглашения,
		 	|	ВТ_СоглашенияДляПечати.НомерДоговора КАК НомерДоговора,
		 	|	ВТ_СоглашенияДляПечати.ДатаДоговора КАК ДатаДоговора,
		 	|	ВТ_УсловияПредоставленияПремий.ДатаЗаключенияПриложения КАК ДатаЗаключенияПриложения,
		 	|	ВТ_УсловияПредоставленияПремий.ЕдиницаИзмеренияБазы КАК ЕдиницаИзмеренияБазы
		 	|ИЗ
		 	|	ВТ_УсловияПредоставленияПремий КАК ВТ_УсловияПредоставленияПремий
		 	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СпискиГруппНоменклатуры КАК ВТ_СпискиГруппНоменклатуры
		 	|		ПО ВТ_УсловияПредоставленияПремий.ИдентификаторНГ = ВТ_СпискиГруппНоменклатуры.Идентификатор
		 	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоглашенияДляПечати КАК ВТ_СоглашенияДляПечати
		 	|		ПО ВТ_УсловияПредоставленияПремий.КоммерческоеСоглашение = ВТ_СоглашенияДляПечати.Ссылка
		 	|
		 	|УПОРЯДОЧИТЬ ПО
		 	|	ВыбранныйПериод,
		 	|	ЛимитС
		 	|ИТОГИ
		 	|	МАКСИМУМ(БазаНачисления),
		 	|	МАКСИМУМ(Периодичность),
		 	|	МАКСИМУМ(ПериодДействияС),
		 	|	МАКСИМУМ(ПериодДействияПо),
		 	|	МАКСИМУМ(ЛимитС),
		 	|	МАКСИМУМ(ЛимитПо),
		 	|	МАКСИМУМ(ПроцентнаяСтавкаПремии),
		 	|	МАКСИМУМ(ВыбранныйПериод),
		 	|	МАКСИМУМ(НомерСоглашения),
		 	|	МАКСИМУМ(ДатаСоглашения),
		 	|	МАКСИМУМ(НомерДоговора),
		 	|	МАКСИМУМ(ДатаДоговора),
		 	|	МАКСИМУМ(ДатаЗаключенияПриложения),
		 	|	МАКСИМУМ(ЕдиницаИзмеренияБазы)
		 	|ПО
		 	|	КоммерческоеСоглашение,
		 	|	ИдентификаторНГ";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", НаправлениеДеятельности); // доработано VOG Ульянов И.В. 04.03.2020 CRM-420
	СписокСтатусовДляИсключения = Новый Массив;
	СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт);
	СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован);
	СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласованКлиентом);
	Запрос.УстановитьПараметр("СписокСтатусовДляИсключения", СписокСтатусовДляИсключения);	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыПриложение4v2(МассивОбъектов,МассивСоглашений) Экспорт//доработано VOG Ульянов И.В. 16.04.2020 CRM-579
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Владелец КАК ЮридическоеЛицо,
		|	ДоговорыКонтрагентов.Организация КАК Организация,
		|	вогЮридическиеЛица.Партнер КАК Партнер,
		|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаДоговора,
		|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ПОМЕСТИТЬ ВТ_Договора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
		|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
		|	2 КАК Приоритет,
		|	ВТ_Договора.ДатаДоговора КАК ДатаДоговора,
		|	ВТ_Договора.НомерДоговора КАК НомерДоговора,
		|	ВТ_Договора.ЮридическоеЛицо КАК ЮридическоеЛицо,
		|	ВТ_Договора.Договор КАК Договор,
		|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаНачалаДействия
		|ПОМЕСТИТЬ ВТ_Соглашения
		|ИЗ
		|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
		|		ПО (вогКоммерческиеСоглашения.Ссылка В (&МассивСоглашений))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВТ_Соглашения.Ссылка КАК Ссылка,
		|	ВТ_Соглашения.ДатаДоговора КАК ДатаДоговора,
		|	ВТ_Соглашения.НомерДоговора КАК НомерДоговора,
		|	ВТ_Соглашения.ЮридическоеЛицо КАК ЮридическоеЛицо,
		|	ВТ_Соглашения.Договор КАК Договор
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	ВТ_Соглашения КАК ВТ_Соглашения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Соглашения.Приоритет,
		|	ВТ_Соглашения.ДатаНачалаДействия УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КоммерческиеСоглашения.Ссылка КАК Ссылка,
		|	КоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаСоглашения,
		|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
		|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
		|	ВТ_Документы.ЮридическоеЛицо КАК ЮридическоеЛицо,
		|	ВТ_Документы.Договор КАК Договор,
		|	КоммерческиеСоглашения.Номер КАК НомерСоглашения,
		|	КоммерческиеСоглашения.Организация КАК Организация
		|ПОМЕСТИТЬ ВТ_СоглашенияДляПечати
		|ИЗ
		|	Справочник.вогКоммерческиеСоглашения КАК КоммерческиеСоглашения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
		|		ПО КоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вогУсловияПредоставленияПремий.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
		|	вогУсловияПредоставленияПремий.Анкета КАК Анкета,
		|	вогУсловияПредоставленияПремий.ПериодДействияС КАК Дата
		|ПОМЕСТИТЬ ВТ_СписокАнкет
		|ИЗ
		|	РегистрСведений.вогУсловияПредоставленияПремий КАК вогУсловияПредоставленияПремий
		|ГДЕ
		|	вогУсловияПредоставленияПремий.КоммерческоеСоглашение В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ_СоглашенияДляПечати.Ссылка КАК Ссылка
		|			ИЗ
		|				ВТ_СоглашенияДляПечати КАК ВТ_СоглашенияДляПечати)
		|
		|СГРУППИРОВАТЬ ПО
		|	вогУсловияПредоставленияПремий.КоммерческоеСоглашение,
		|	вогУсловияПредоставленияПремий.Анкета,
		|	вогУсловияПредоставленияПремий.ПериодДействияС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Анкеты.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
		|	МАКСИМУМ(ВТ_Анкеты.Дата) КАК Дата
		|ПОМЕСТИТЬ ВТ_ДатыПоследнихАнкет
		|ИЗ
		|	ВТ_СписокАнкет КАК ВТ_Анкеты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Анкеты.КоммерческоеСоглашение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДатыПоследнихАнкет.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
		|	ВТ_СписокАнкет.Анкета КАК Анкета
		|ПОМЕСТИТЬ ВТ_АнкетыДляОтбора
		|ИЗ
		|	ВТ_ДатыПоследнихАнкет КАК ВТ_ДатыПоследнихАнкет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокАнкет КАК ВТ_СписокАнкет
		|		ПО ВТ_ДатыПоследнихАнкет.Дата = ВТ_СписокАнкет.Дата
		|			И ВТ_ДатыПоследнихАнкет.КоммерческоеСоглашение = ВТ_СписокАнкет.КоммерческоеСоглашение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вогУсловияПредоставленияПремий.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
		|	вогУсловияПредоставленияПремий.Анкета КАК Анкета,
		|	вогУсловияПредоставленияПремий.ИдентификаторНГ КАК ИдентификаторНГ,
		|	вогУсловияПредоставленияПремий.БазаНачисления КАК БазаНачисления,
		|	вогУсловияПредоставленияПремий.ЛимитС КАК ЛимитС,
		|	вогУсловияПредоставленияПремий.ЛимитПо КАК ЛимитПо,
		|	вогУсловияПредоставленияПремий.ПроцентнаяСтавкаПремии КАК ПроцентнаяСтавкаПремии,
		|	вогУсловияПредоставленияПремий.КоличествоЭлементов КАК КоличествоЭлементов,
		|	вогУсловияПредоставленияПремий.Периодичность КАК Периодичность,
		|	вогУсловияПредоставленияПремий.ВыбранныйПериод КАК ВыбранныйПериод,
		|	вогУсловияПредоставленияПремий.ПериодДействияС КАК ПериодДействияС,
		|	вогУсловияПредоставленияПремий.ПериодДействияПо КАК ПериодДействияПо,
		|	вогУсловияПредоставленияПремий.ДатаЗаключенияПриложения КАК ДатаЗаключенияПриложения,
		|	вогУсловияПредоставленияПремий.ЕдиницаИзмеренияБазы КАК ЕдиницаИзмеренияБазы
		|ПОМЕСТИТЬ ВТ_УсловияПредоставленияПремий
		|ИЗ
		|	РегистрСведений.вогУсловияПредоставленияПремий КАК вогУсловияПредоставленияПремий
		|ГДЕ
		|	вогУсловияПредоставленияПремий.Анкета В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ_АнкетыДляОтбора.Анкета КАК Анкета
		|			ИЗ
		|				ВТ_АнкетыДляОтбора КАК ВТ_АнкетыДляОтбора)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	вогСпискиГруппНоменклатуры.Идентификатор КАК Идентификатор,
		|	вогСпискиГруппНоменклатуры.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа
		|ПОМЕСТИТЬ ВТ_СпискиГруппНоменклатуры
		|ИЗ
		|	РегистрСведений.вогСпискиГруппНоменклатуры КАК вогСпискиГруппНоменклатуры
		|ГДЕ
		|	вогСпискиГруппНоменклатуры.Идентификатор В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ВТ_УсловияПредоставленияПремий.ИдентификаторНГ КАК ИдентификаторНГ
		|			ИЗ
		|				ВТ_УсловияПредоставленияПремий КАК ВТ_УсловияПредоставленияПремий)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Идентификатор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_УсловияПредоставленияПремий.КоммерческоеСоглашение КАК КоммерческоеСоглашение,
		|	ВТ_УсловияПредоставленияПремий.ИдентификаторНГ КАК ИдентификаторНГ,
		|	ВТ_УсловияПредоставленияПремий.БазаНачисления КАК БазаНачисления,
		|	ВТ_УсловияПредоставленияПремий.Периодичность КАК Периодичность,
		|	ВТ_УсловияПредоставленияПремий.ПериодДействияС КАК ПериодДействияС,
		|	ВТ_УсловияПредоставленияПремий.ПериодДействияПо КАК ПериодДействияПо,
		|	ВТ_СпискиГруппНоменклатуры.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	ВТ_УсловияПредоставленияПремий.ЛимитС КАК ЛимитС,
		|	ВТ_УсловияПредоставленияПремий.ЛимитПо КАК ЛимитПо,
		|	ВТ_УсловияПредоставленияПремий.ПроцентнаяСтавкаПремии КАК ПроцентнаяСтавкаПремии,
		|	ВТ_УсловияПредоставленияПремий.ВыбранныйПериод КАК ВыбранныйПериод,
		|	ВТ_СоглашенияДляПечати.НомерСоглашения КАК НомерСоглашения,
		|	ВТ_СоглашенияДляПечати.ДатаСоглашения КАК ДатаСоглашения,
		|	ВТ_СоглашенияДляПечати.НомерДоговора КАК НомерДоговора,
		|	ВТ_СоглашенияДляПечати.ДатаДоговора КАК ДатаДоговора,
		|	ВТ_УсловияПредоставленияПремий.ДатаЗаключенияПриложения КАК ДатаЗаключенияПриложения,
		|	ВТ_УсловияПредоставленияПремий.ЕдиницаИзмеренияБазы КАК ЕдиницаИзмеренияБазы
		|ИЗ
		|	ВТ_УсловияПредоставленияПремий КАК ВТ_УсловияПредоставленияПремий
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СпискиГруппНоменклатуры КАК ВТ_СпискиГруппНоменклатуры
		|		ПО ВТ_УсловияПредоставленияПремий.ИдентификаторНГ = ВТ_СпискиГруппНоменклатуры.Идентификатор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоглашенияДляПечати КАК ВТ_СоглашенияДляПечати
		|		ПО ВТ_УсловияПредоставленияПремий.КоммерческоеСоглашение = ВТ_СоглашенияДляПечати.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВыбранныйПериод,
		|	ЛимитС
		|ИТОГИ
		|	МАКСИМУМ(БазаНачисления),
		|	МАКСИМУМ(Периодичность),
		|	МАКСИМУМ(ПериодДействияС),
		|	МАКСИМУМ(ПериодДействияПо),
		|	МАКСИМУМ(ЛимитС),
		|	МАКСИМУМ(ЛимитПо),
		|	МАКСИМУМ(ПроцентнаяСтавкаПремии),
		|	МАКСИМУМ(ВыбранныйПериод),
		|	МАКСИМУМ(НомерСоглашения),
		|	МАКСИМУМ(ДатаСоглашения),
		|	МАКСИМУМ(НомерДоговора),
		|	МАКСИМУМ(ДатаДоговора),
		|	МАКСИМУМ(ДатаЗаключенияПриложения),
		|	МАКСИМУМ(ЕдиницаИзмеренияБазы)
		|ПО
		|	КоммерческоеСоглашение,
		|	ИдентификаторНГ";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("МассивСоглашений", МассивСоглашений);
	СписокСтатусовДляИсключения = Новый Массив;
	СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт);
	СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован);
	СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласованКлиентом);
	Запрос.УстановитьПараметр("СписокСтатусовДляИсключения", СписокСтатусовДляИсключения);	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции


Процедура ЗаполнитьТабличныйДокументКоммерческоеСоглашениеВерсия2(ТабличныйДокумент, ДанныеПечати, ПоказыватьПодписи = Ложь, НомераПриложений, СтруктураКартинок = Неопределено) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.вогКоммерческиеСоглашения.ПФ_MXL_КоммерческоеСоглашениеВерсия2");
	
	НастроитьМакетВерсия2(ДанныеПечати, Макет);
	
	ТаблицаОбластейКВыводу 		= Новый ТаблицаЗначений;
	ТаблицаОбластейКВыводу.Колонки.Добавить("Область");
	ТаблицаОбластейКВыводу.Колонки.Добавить("ЭтоРаздел");
	ТаблицаОбластейКВыводу.Колонки.Добавить("ИмяОбласти");
	
	ОбластьШапка 				= Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
	// +++ VOG Кулаков П.Л. 19.08.2020 CRM-848
	Если ОбластьШапка.Параметры.ДатаСоглашения < ДанныеПечати.ДатаНачалаДействия Тогда
		ОбластьШапка.Параметры.ДатаСоглашения = ДанныеПечати.ДатаНачалаДействия;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	ОбластьШапка.Параметры.ТоварнаяГруппа = ?(ДанныеПечати.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои,"ОБОИ","ПЛИТА");
	ОбластьТаблицаПодвал 		= Макет.ПолучитьОбласть("ТаблицаПодвал");
	СтруктураОбластей 			= СформироватьСтруктуруОбластейВерсия2(ДанныеПечати, Макет);
	
	НомерПункта62 = "";
	Для Каждого ИмяОбласти Из СтруктураОбластей Цикл
		
		Область = Макет.ПолучитьОбласть(ИмяОбласти.Ключ);
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.Заполнить(НомераПриложений);
		
		// Заполнение номера пункта
		УИД = Новый УникальныйИдентификатор;
		
		СтруктураПараметра = Новый Структура;
		СтруктураПараметра.Вставить("НомерПункта", УИД);
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметра, Область.Параметры);
		
		Если СтруктураПараметра.НомерПункта <> УИД Тогда
			Область.Параметры.НомерПункта = ИмяОбласти.Значение;
		КонецЕсли;
		//
		Если ИмяОбласти.Ключ = "Раздел2_Пункт6_ПодПункт2"
			Или ИмяОбласти.Ключ = "Раздел2_Вариант7_Пункт2" Тогда // VOG Солодов В.В. 14.05.2020 CRM-611 // Добавил условие
			НомерПункта62 = ИмяОбласти.Значение; 	
		КонецЕсли;
		Если ИмяОбласти.Ключ = "Раздел2_Пункт7"
			Или ИмяОбласти.Ключ = "Раздел2_Вариант8" Тогда // VOG Солодов В.В. 14.05.2020 CRM-611 // Добавил условие
			Область.Параметры.Пункт62 = НомерПункта62; 	
		КонецЕсли;
		НоваяСтрокаКВыводу = ТаблицаОбластейКВыводу.Добавить();
		НоваяСтрокаКВыводу.Область 			= Область;
		НоваяСтрокаКВыводу.ИмяОбласти 		= ИмяОбласти.Ключ;
		
		Если СтрНайти(ИмяОбласти.Ключ, "Пункт") = 0 Тогда
			НоваяСтрокаКВыводу.ЭтоРаздел 	= Истина;
		Иначе
			НоваяСтрокаКВыводу.ЭтоРаздел 	= Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Вывод документа
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	// ++ VOG Солодов В.В. 04.12.2019 bugs 976
	//ПустаяОбласть = Макет.ПолучитьОбласть("ОбластьПустая");
	// -- VOG Солодов В.В. 04.12.2019
	ОбластьПодписи2 = Макет.ПолучитьОбласть("Подписи2");
	ОбластьПустая = Макет.ПолучитьОбласть("ОбластьПустая");
	ПоследняяОбласть = Неопределено;
	
	ОбластьРазрыв 			= Макет.ПолучитьОбласть("Разрыв");
	нОб = ТаблицаОбластейКВыводу.Добавить();
	нОб.Область = ОбластьРазрыв;
	нОб.ЭтоРаздел = Истина;
	нОб.ИмяОбласти = "Разрыв";
	
	Если ДанныеПечати.ИспользоватьПриложение1 Тогда
		ОбластьПриложение1 	= Макет.ПолучитьОбласть("Приложение1");
		ОбластьПриложение1.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение1;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение1";
	КонецЕсли;
	
	Если ДанныеПечати.ИспользоватьПриложение2 Тогда
		ОбластьПриложение2 	= Макет.ПолучитьОбласть("Приложение2");
		ОбластьПриложение2.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение2;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение2";
	КонецЕсли;
	
	Если ДанныеПечати.ИспользоватьПриложение3 Тогда
		ОбластьПриложение3 	= Макет.ПолучитьОбласть("Приложение3");
		ОбластьПриложение3.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение3;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение3";
	КонецЕсли;
	
	Если ДанныеПечати.ИспользоватьПриложение4 Тогда
		ОбластьПриложение4 	= Макет.ПолучитьОбласть("Приложение4");
		ОбластьПриложение4.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение4;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение4";
	КонецЕсли;
	
	Если ДанныеПечати.ИспользоватьПриложение5 Тогда
		ОбластьПриложение5 	= Макет.ПолучитьОбласть("Приложение5");
		ОбластьПриложение5.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение5;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение5";
	КонецЕсли;
	Если ДанныеПечати.ИспользоватьПриложение6 Тогда
		ОбластьПриложение6 	= Макет.ПолучитьОбласть("Приложение6");
		ОбластьПриложение6.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение6;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение6";
	КонецЕсли;
	
	
	ОбластьРазрыв 			= Макет.ПолучитьОбласть("Разрыв");
	нОб = ТаблицаОбластейКВыводу.Добавить();
	нОб.Область = ОбластьРазрыв;
	нОб.ЭтоРаздел = Истина;
	нОб.ИмяОбласти = "Разрыв";
	
	// +++ VOG Кулаков П.Л. 23.03.2020 CRM-487
	Для Индекс = 1 По 6 Цикл
		ОбластьПодпись 			= Макет.ПолучитьОбласть("Подписи_" + Индекс);
		ОбластьПодпись.Параметры.Заполнить(ДанныеПечати);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПодпись;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Подписи_" + Индекс;
	КонецЦикла;
	// --- VOG Кулаков П.Л.
	
	ОбластьПодписи 			= Макет.ПолучитьОбласть("Подписи");
	ОбластьПодписи.Параметры.Заполнить(ДанныеПечати);
	
	Если ПоказыватьПодписи Тогда
		Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
			ОбластьПодписи.Рисунки["ПодписиКартинкаПодпись"].Картинка = СтруктураКартинок.Подпись;
		КонецЕсли;
		Если ТипЗнч(СтруктураКартинок.Печать) = Тип("Картинка") тогда
			ОбластьПодписи.Рисунки["ПодписиКартинкаПечать"].Картинка = СтруктураКартинок.Печать;
		КонецЕсли;
	КонецЕсли;
	
	нОб = ТаблицаОбластейКВыводу.Добавить();
	нОб.Область = ОбластьПодписи;
	нОб.ЭтоРаздел = Истина;
	нОб.ИмяОбласти = "Подписи";
	
	
	Для Каждого СтрокаОбласть Из ТаблицаОбластейКВыводу Цикл
		//БЫЛО
		//
		//// ++ VOG Солодов В.В. 04.12.2019 bugs 976
		//Пока Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
		//	ТабличныйДокумент.Вывести(ПустаяОбласть);
		//КонецЦикла;
		//// До изменения
		////Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
		////	
		////	//ТабличныйДокумент.Вывести(ОбластьТаблицаПодвал);
		////	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		////	
		////КонецЕсли;
		//// -- VOG Солодов В.В. 04.12.2019
		//
		//ТабличныйДокумент.Вывести(СтрокаОбласть.Область);
		
		
		МассивВыводимыхОбластей = Новый Массив;
		МассивВыводимыхОбластей.Добавить(СтрокаОбласть.Область);
		МассивВыводимыхОбластей.Добавить(ОбластьПодписи2);
		
		Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			
			МассивВыводимыхОбластей = Новый Массив;
			МассивВыводимыхОбластей.Добавить(ОбластьПодписи2);
			
			Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				ТабличныйДокумент.УдалитьОбласть(ПоследняяОбласть);
				
				МассивВыводимыхОбластей.Добавить(ОбластьПустая);
				//МассивВыводимыхОбластей.Добавить(ОбластьПодписи);
				
				Пока ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
					ТабличныйДокумент.Вывести(ОбластьПустая);
				КонецЦикла;
				
				Если ПоказыватьПодписи Тогда
					Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
						ОбластьПодписи2.Рисунки["ПодписиКартинкаПодписьЛисты"].Картинка = СтруктураКартинок.Подпись;
					КонецЕсли;
				КонецЕсли;					
				ТабличныйДокумент.Вывести(ОбластьПодписи2);
				//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ПоследняяОбласть);
				
			Иначе
				
				МассивВыводимыхОбластей.Добавить(ОбластьПустая);
				//МассивВыводимыхОбластей.Добавить(ОбластьПодписи);
				
				Пока ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
					ТабличныйДокумент.Вывести(ОбластьПустая);
				КонецЦикла;
				
				Если ПоказыватьПодписи Тогда
					Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
						ОбластьПодписи2.Рисунки["ПодписиКартинкаПодписьЛисты"].Картинка = СтруктураКартинок.Подпись;
					КонецЕсли;	
				КонецЕсли;					
				ТабличныйДокумент.Вывести(ОбластьПодписи2);
				//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(СтрокаОбласть.Область);
		ПоследняяОбласть = СтрокаОбласть.Область;
		
		
	КонецЦикла;
	
	//ТабличныйДокумент.Вывести(ОбластьТаблицаПодвал);
	
	//ОбластьРазрыв 			= Макет.ПолучитьОбласть("Разрыв");
	//ТабличныйДокумент.Вывести(ОбластьРазрыв);
	//
	//// ++ VOG Солодов В.В. 03.12.2019 
	//МассивВыводимыхОбластей = Новый Массив;
	//// -- VOG Солодов В.В. 03.12.2019
	//
	//Если ДанныеПечати.ИспользоватьПриложение1 Тогда
	//	ОбластьПриложение1 	= Макет.ПолучитьОбласть("Приложение1");
	//	ОбластьПриложение1.Параметры.Заполнить(НомераПриложений);
	//	// ++ VOG Солодов В.В. 03.12.2019 
	//	МассивВыводимыхОбластей.Добавить(ОбластьПриложение1);
	//	// До изменения
	//	//ТабличныйДокумент.Вывести(ОбластьПриложение1);
	//	// -- VOG Солодов В.В. 03.12.2019
	//КонецЕсли;
	//
	//Если ДанныеПечати.ИспользоватьПриложение2 Тогда
	//	ОбластьПриложение2 	= Макет.ПолучитьОбласть("Приложение2");
	//	ОбластьПриложение2.Параметры.Заполнить(НомераПриложений);
	//	// ++ VOG Солодов В.В. 03.12.2019 
	//	МассивВыводимыхОбластей.Добавить(ОбластьПриложение2);
	//	// До изменения
	//	//ТабличныйДокумент.Вывести(ОбластьПриложение1);
	//	// -- VOG Солодов В.В. 03.12.2019
	//КонецЕсли;
	//
	//Если ДанныеПечати.ИспользоватьПриложение3 Тогда
	//	ОбластьПриложение3 	= Макет.ПолучитьОбласть("Приложение3");
	//	ОбластьПриложение3.Параметры.Заполнить(НомераПриложений);
	//	// ++ VOG Солодов В.В. 03.12.2019 
	//	МассивВыводимыхОбластей.Добавить(ОбластьПриложение3);
	//	// До изменения
	//	//ТабличныйДокумент.Вывести(ОбластьПриложение1);
	//	// -- VOG Солодов В.В. 03.12.2019
	//КонецЕсли;
	//
	//Если ДанныеПечати.ИспользоватьПриложение4 Тогда
	//	ОбластьПриложение4 	= Макет.ПолучитьОбласть("Приложение4");
	//	ОбластьПриложение4.Параметры.Заполнить(НомераПриложений);
	//	// ++ VOG Солодов В.В. 03.12.2019 
	//	МассивВыводимыхОбластей.Добавить(ОбластьПриложение4);
	//	// До изменения
	//	//ТабличныйДокумент.Вывести(ОбластьПриложение1);
	//	// -- VOG Солодов В.В. 03.12.2019
	//КонецЕсли;
	//
	//Если ДанныеПечати.ИспользоватьПриложение5 Тогда
	//	ОбластьПриложение5 	= Макет.ПолучитьОбласть("Приложение5");
	//	ОбластьПриложение5.Параметры.Заполнить(НомераПриложений);
	//	// ++ VOG Солодов В.В. 03.12.2019 
	//	МассивВыводимыхОбластей.Добавить(ОбластьПриложение5);
	//	// До изменения
	//	//ТабличныйДокумент.Вывести(ОбластьПриложение1);
	//	// -- VOG Солодов В.В. 03.12.2019
	//КонецЕсли;
	//Если ДанныеПечати.ИспользоватьПриложение6 Тогда
	//	ОбластьПриложение6 	= Макет.ПолучитьОбласть("Приложение6");
	//	ОбластьПриложение6.Параметры.Заполнить(НомераПриложений);
	//	МассивВыводимыхОбластей.Добавить(ОбластьПриложение6);
	//КонецЕсли;
	
	//ОбластьПодписи 			= Макет.ПолучитьОбласть("Подписи");
	//ОбластьПодписи.Параметры.Заполнить(ДанныеПечати);
	//
	//Если ПоказыватьПодписи Тогда
	//	Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
	//		ОбластьПодписи.Рисунки["ПодписиКартинкаПодпись"].Картинка = СтруктураКартинок.Подпись;
	//	КонецЕсли;
	//	Если ТипЗнч(СтруктураКартинок.Печать) = Тип("Картинка") тогда
	//		ОбластьПодписи.Рисунки["ПодписиКартинкаПечать"].Картинка = СтруктураКартинок.Печать;
	//	КонецЕсли;
	//КонецЕсли;
	
	//// ++ VOG Солодов В.В. 03.12.2019
	//МассивВыводимыхОбластей.Добавить(ОбластьПодписи);
	//
	//Пока Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
	//	ТабличныйДокумент.Вывести(ОбластьПустая);
	//КонецЦикла;
	
	//Для Каждого ЭлементОбласть Из МассивВыводимыхОбластей Цикл
	//	ТабличныйДокумент.Вывести(ЭлементОбласть);
	//КонецЦикла;
	// До изменения
	//ТабличныйДокумент.Вывести(ОбластьПодписи);
	// -- VOG Солодов В.В. 03.12.2019
	
КонецПроцедуры

Функция ЗаполнитьПриложение(ТабличныйДокумент, СтруктураДанныхПечати, ПриложениеИспользуется = Истина, НаименованиеПриложения, ВыборкаДанных, НомерПриложения = "", ПоказыватьПодписи = Ложь, СтруктураКартинок = Неопределено, ЭтоНоваяВерсия = Ложь)
	
	Если ПриложениеИспользуется Тогда
		
		Пока ВыборкаДанных.Следующий() Цикл
			
			// +++ Кулаков П.Л. CRM-487
			Если ЭтоНоваяВерсия Тогда
				ТабличныйДокумент.РазмерКолонтитулаСнизу = 14;
				ТабличныйДокумент.ПолеСнизу = 16;
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			// --- Кулаков П.Л.
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.вогКоммерческиеСоглашения.ПФ_MXL_" + НаименованиеПриложения);
			
			ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
			ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьСтрокаТаблицы 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
			ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
				
			
			ОбластьЗаголовок.Параметры.Заполнить(ВыборкаДанных);
			ОбластьЗаголовок.Параметры.НомерПриложения = НомерПриложения;
			// +++ VOG Кулаков П.Л. 19.08.2020 CRM-848
			Если ОбластьЗаголовок.Параметры.ДатаСоглашения < ОбластьЗаголовок.Параметры.ДатаДоговора Тогда
				ОбластьЗаголовок.Параметры.ДатаСоглашения = ОбластьЗаголовок.Параметры.ДатаДоговора;
			КонецЕсли;
			//Если ОбластьЗаголовок.Параметры.Свойство("ДатаПриложенияУсловияДоставки") 
			// --- VOG Кулаков П.Л.
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			
			СтруктураНомера = Новый Структура;
			СтруктураНомера.Вставить("НомерСтроки", 0);
			
			ВыборкаДетальныеЗаписи = ВыборкаДанных.Выбрать();
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
		
			// Выводим многострочную часть докмента
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьСтрокаТаблицы);
				
				Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
					
				КонецЕсли;
				
				СтруктураНомера.НомерСтроки = СтруктураНомера.НомерСтроки + 1;
				
				ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураНомера);
				ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
				
			КонецЦикла;
			ОбластьПодвалТаблицы.Параметры.Заполнить(СтруктураДанныхПечати);
			ОбластьПодвалТаблицы.Параметры.Заполнить(ВыборкаДанных);
			
			Если ПоказыватьПодписи Тогда
				Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
					ОбластьПодвалТаблицы.Рисунки["ПодписиКартинкаПодпись"].Картинка = СтруктураКартинок.Подпись;
				КонецЕсли;
				Если ТипЗнч(СтруктураКартинок.Печать) = Тип("Картинка") тогда
					ОбластьПодвалТаблицы.Рисунки["ПодписиКартинкаПечать"].Картинка = СтруктураКартинок.Печать;
				КонецЕсли;
			КонецЕсли;	
			
			ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
			
			// +++ Кулаков П.Л. CRM-487
			ШаблонКолонтитула = "Приложение №[НомерПриложения] от [ДатаПриложения]г. к Коммерческому соглашению от [ДатаКС]г. к Договору поставки [Номер] от [Дата]г.";
			ШаблонКолонтитула = ШаблонКолонтитула + Символы.ПС + "Страница [&НомерСтраницы] из [&СтраницВсего]";
			ПараметрыСтроки = Новый Структура;
			ПараметрыСтроки.Вставить("Номер",ВыборкаДанных.НомерДоговора);
			ПараметрыСтроки.Вставить("Дата",Формат(ВыборкаДанных.ДатаДоговора,"ДФ=dd.MM.yyyy"));
			ПараметрыСтроки.Вставить("НомерПриложения",НомерПриложения);
			// +++ VOG Кулаков П.Л. 20.08.2020 CRM-848
			Если ВыборкаДанных.ДатаДоговора > ВыборкаДанных.ДатаСоглашения Тогда
				ДатаСоглашения = ВыборкаДанных.ДатаДоговора;
			Иначе
				ДатаСоглашения = ВыборкаДанных.ДатаСоглашения;
			КонецЕсли;
			// --- VOG Кулаков П.Л.
			ПараметрыСтроки.Вставить("ДатаПриложения",Формат(ДатаСоглашения,"ДФ=dd.MM.yyyy"));
			ПараметрыСтроки.Вставить("ДатаКС",Формат(ДатаСоглашения,"ДФ=dd.MM.yyyy"));
			ТекстКолонтитула = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКолонтитула,ПараметрыСтроки);
			// --- Кулаков П.Л.
			
			// +++ Кулаков П.Л. CRM-487
			Если НЕ ЭтоНоваяВерсия Тогда
				Если  НаименованиеПриложения = "ДопСоглашениеНормаБоя" тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.вогКоммерческиеСоглашения.ПФ_MXL_ДополнительноСоглашениеПоНормеБоя");
					
					Область 		= Макет.ПолучитьОбласть("Соглашение");
					Область.Параметры.Заполнить(ВыборкаДанных);
					Область.Параметры.Заполнить(СтруктураДанныхПечати);
					Если ПоказыватьПодписи Тогда
						Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
							Область.Рисунки["ПодписиКартинкаПодпись"].Картинка = СтруктураКартинок.Подпись;
						КонецЕсли;
						Если ТипЗнч(СтруктураКартинок.Печать) = Тип("Картинка") тогда
							Область.Рисунки["ПодписиКартинкаПечать"].Картинка = СтруктураКартинок.Печать;
						КонецЕсли;
					КонецЕсли;			
					
					ТабличныйДокумент.Вывести(Область);
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоНоваяВерсия Тогда
				ТабличныйДокумент.НижнийКолонтитул.НачальнаяСтраница = 1;
				ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
				ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = ТекстКолонтитула;
				ТабличныйДокумент.НижнийКолонтитул.Шрифт = Новый Шрифт("Times New Roman",8);
			КонецЕсли;
			// --- Кулаков П.Л.
		
		КонецЦикла;
				
	КонецЕсли;

КонецФункции

Функция ЗаполнитьДополнительноеПриложениеПоНормеБоя(ТабличныйДокумент, СтруктураДанныхПечати, ПриложениеИспользуется = Истина, НаименованиеПриложения, ВыборкаДанных, НомерПриложения = "", ПоказыватьПодписи = Ложь, СтруктураКартинок = Неопределено, ЭтоНоваяВерсия = Ложь)
	
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.вогКоммерческиеСоглашения.ПФ_MXL_ДополнительноСоглашениеПоНормеБоя");
		
		Если ВыборкаДанных.Следующий() <> Неопределено Тогда
			Область 		= Макет.ПолучитьОбласть("Соглашение");
			Область.Параметры.Заполнить(ВыборкаДанных);
			Область.Параметры.Заполнить(СтруктураДанныхПечати);
			Если ПоказыватьПодписи Тогда
				Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
					Область.Рисунки["ПодписиКартинкаПодпись"].Картинка = СтруктураКартинок.Подпись;
				КонецЕсли;
				Если ТипЗнч(СтруктураКартинок.Печать) = Тип("Картинка") тогда
					Область.Рисунки["ПодписиКартинкаПечать"].Картинка = СтруктураКартинок.Печать;
				КонецЕсли;
			КонецЕсли;			
			
			// +++ VOG Кулаков П.Л. 19.08.2020 CRM-848
			Если Область.Параметры.ДатаСоглашения < ВыборкаДанных.ДатаДоговора Тогда
				Область.Параметры.ДатаСоглашения = ВыборкаДанных.ДатаДоговора;
			КонецЕсли;
			// --- VOG Кулаков П.Л.
			
			ТабличныйДокумент.Вывести(Область);
			
			ШаблонКолонтитула = "Дополнительное соглашение от [ДатаСоглашения]г. к Договору поставки [Номер] от [Дата]г.";
			ШаблонКолонтитула = ШаблонКолонтитула + Символы.ПС + "Страница [&НомерСтраницы] из [&СтраницВсего]";
			ПараметрыСтроки = Новый Структура;
			ПараметрыСтроки.Вставить("Номер",ВыборкаДанных.НомерДоговора);
			ПараметрыСтроки.Вставить("Дата",Формат(ВыборкаДанных.ДатаДоговора,"ДФ=dd.MM.yyyy"));
			// +++ VOG Кулаков П.Л. 20.08.2020 CRM-848
			Если ВыборкаДанных.ДатаДоговора > ВыборкаДанных.ДатаСоглашения Тогда
				ДатаСоглашения = ВыборкаДанных.ДатаДоговора;
			Иначе
				ДатаСоглашения = ВыборкаДанных.ДатаСоглашения;
			КонецЕсли;
			// --- VOG Кулаков П.Л.
			ПараметрыСтроки.Вставить("ДатаСоглашения",Формат(ДатаСоглашения,"ДФ=dd.MM.yyyy"));
			ТекстКолонтитула = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКолонтитула,ПараметрыСтроки);
			ТабличныйДокумент.НижнийКолонтитул.НачальнаяСтраница = 1;
			ТабличныйДокумент.РазмерКолонтитулаСнизу = 14;
			ТабличныйДокумент.ПолеСнизу = 16;
			ТабличныйДокумент.НижнийКолонтитул.Шрифт = Новый Шрифт("Times New Roman",8);
			ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
			ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = ТекстКолонтитула;
		КонецЕсли;
		
КонецФункции

Функция ЗаполнитьПриложение4(ТабличныйДокумент, СтруктураДанныхПечати, ПриложениеИспользуется = Истина, НаименованиеПриложения, ВыборкаДанных, НомерПриложения = "4", ПоказыватьПодписи = Ложь, СтруктураКартинок = Неопределено, ЭтоНоваяВерсия = Ложь)
	
	Если ПриложениеИспользуется Тогда
		
		Пока ВыборкаДанных.Следующий() Цикл
			
			// +++ Кулаков П.Л. CRM-487
			Если ЭтоНоваяВерсия Тогда
				ТабличныйДокумент = Новый ТабличныйДокумент;
				ШаблонКолонтитула = "Приложение №[НомерПриложения] от [ДатаПриложения]г. к Коммерческому соглашению от [ДатаКС]г. к Договору поставки [Номер] от [Дата]г.";
				ШаблонКолонтитула = ШаблонКолонтитула + Символы.ПС + "Страница [&НомерСтраницы] из [&СтраницВсего]";
				ПараметрыСтроки = Новый Структура;
				ПараметрыСтроки.Вставить("Номер",ВыборкаДанных.НомерДоговора);
				ПараметрыСтроки.Вставить("Дата",Формат(ВыборкаДанных.ДатаДоговора,"ДФ=dd.MM.yyyy"));
				ПараметрыСтроки.Вставить("НомерПриложения",НомерПриложения);
				// +++ VOG Кулаков П.Л. 20.08.2020 CRM-848
				Если ВыборкаДанных.ДатаДоговора > ВыборкаДанных.ДатаСоглашения Тогда
					ДатаСоглашения = ВыборкаДанных.ДатаДоговора;
				Иначе
					ДатаСоглашения = ВыборкаДанных.ДатаСоглашения;
				КонецЕсли;
				// --- VOG Кулаков П.Л.
				ПараметрыСтроки.Вставить("ДатаПриложения",Формат(ДатаСоглашения,"ДФ=dd.MM.yyyy"));
				ПараметрыСтроки.Вставить("ДатаКС",Формат(ДатаСоглашения,"ДФ=dd.MM.yyyy"));
				ТекстКолонтитула = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКолонтитула,ПараметрыСтроки);
				ТабличныйДокумент.РазмерКолонтитулаСнизу = 14;
				ТабличныйДокумент.ПолеСнизу = 16;
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			// --- Кулаков П.Л.
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.вогКоммерческиеСоглашения.ПФ_MXL_" + НаименованиеПриложения);
			
			ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
			ОбластьШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьСтрокаТаблицы 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
			ОбластьПодвалТаблицы 	= Макет.ПолучитьОбласть("ПодвалТаблицы");
			
			ОбластьЗаголовок.Параметры.Заполнить(ВыборкаДанных);
			ОбластьЗаголовок.Параметры.НомерПриложения = НомерПриложения;
			// +++ VOG Кулаков П.Л. 19.08.2020 CRM-848
			Если ОбластьЗаголовок.Параметры.ДатаСоглашения < ОбластьЗаголовок.Параметры.ДатаДоговора Тогда
				ОбластьЗаголовок.Параметры.ДатаСоглашения = ОбластьЗаголовок.Параметры.ДатаДоговора;
			КонецЕсли;
			Если ОбластьЗаголовок.Параметры.ДатаЗаключенияПриложения < ОбластьЗаголовок.Параметры.ДатаДоговора Тогда
				ОбластьЗаголовок.Параметры.ДатаЗаключенияПриложения = ОбластьЗаголовок.Параметры.ДатаДоговора;
			КонецЕсли;
			// --- VOG Кулаков П.Л.
			ОбластьШапкаТаблицы.Параметры.Заполнить(ВыборкаДанных);
			ОбластьШапкаТаблицы.Параметры.БазаНачисления = Строка(ОбластьШапкаТаблицы.Параметры.БазаНачисления) + ?(ЗначениеЗаполнено(ВыборкаДанных.ЕдиницаИзмеренияБазы),","+ВыборкаДанных.ЕдиницаИзмеренияБазы,"") ;
			
			ОбластьПодвалТаблицы.Параметры.Заполнить(СтруктураДанныхПечати);
			ОбластьПодвалТаблицы.Параметры.Заполнить(ВыборкаДанных);
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);			
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			
			СтруктураНомера = Новый Структура;
			СтруктураНомера.Вставить("НомерСтроки", 0);
			
			ВыборкаСтроки = ВыборкаДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			ТекущийПериод = Неопределено;
			
			// Выводим многострочную часть докмента
			Пока ВыборкаСтроки.Следующий() Цикл
				
				МассивВыводимыхОбластей.Очистить();
				МассивВыводимыхОбластей.Добавить(ОбластьСтрокаТаблицы);
				
				Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
					
				КонецЕсли;
				
				СтруктураНомера.НомерСтроки = СтруктураНомера.НомерСтроки + 1;
				
				ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураНомера);
				ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаСтроки);
				
				ВыборкаГруппы = ВыборкаСтроки.Выбрать();
				
				НоменклатурнаяГруппаПредставление = "";
				НомерСтроки = 1;
				
				Пока ВыборкаГруппы.Следующий() цикл
					НоменклатурнаяГруппаПредставление = НоменклатурнаяГруппаПредставление + ?(НомерСтроки = 1,"","; ") + СокрЛП(ВыборкаГруппы.НоменклатурнаяГруппа);
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;	
				
				ВыбранныйПериодПредставление = "";
				
				Если ВыборкаСтроки.ВыбранныйПериод = 0 тогда
					ВыбранныйПериодПредставление = "";
				ИначеЕсли ВыборкаСтроки.Периодичность = Перечисления.Периодичность.Месяц тогда					
					ВыбранныйПериодПредставление = Формат(Дата(2000,ВыборкаСтроки.ВыбранныйПериод,1)," ДФ=ММММ");
				ИначеЕсли ВыборкаСтроки.Периодичность = Перечисления.Периодичность.Квартал тогда	
					ВыбранныйПериодПредставление = СокрЛП(ВыборкаСтроки.ВыбранныйПериод)+" квартал";
				ИначеЕсли ВыборкаСтроки.Периодичность = Перечисления.Периодичность.Полугодие тогда	
					//++ VOG Ульянов И.В. 29.04.2020 CRM-609
					ВыбранныйПериодПредставление = СокрЛП(ВыборкаСтроки.ВыбранныйПериод)+" полугодие";
					//ВыбранныйПериодПредставление = "Полугодие";
					//-- VOG Ульянов И.В. 29.04.2020 CRM-609
				Иначе
					ВыбранныйПериодПредставление = "Год";
				КонецЕсли;	
				
				ОбластьСтрокаТаблицы.Параметры.ВыбранныйПериодПредставление = ВыбранныйПериодПредставление;
				ОбластьСтрокаТаблицы.Параметры.ЛимитОтгруженногоТовараПредставление = ?(ВыборкаСтроки.ЛимитПо = 0,"Свыше "+Формат(ВыборкаСтроки.ЛимитС,"ЧН="),Формат(ВыборкаСтроки.ЛимитС,"ЧН=")+" - "+Формат(ВыборкаСтроки.ЛимитПо,"ЧН="));
				ОбластьСтрокаТаблицы.Параметры.НоменклатурнаяГруппаПредставление = НоменклатурнаяГруппаПредставление;
				
				Если СокрЛП(ВыбранныйПериодПредставление) = "" тогда
					ОбластьСтрокаТаблицы.Параметры.ВыбранныйПериодПредставление = ВыборкаСтроки.Периодичность;
				КонецЕсли;	
				
				Если ТекущийПериод <> ВыборкаСтроки.ВыбранныйПериод тогда
					ТекущийПериод = ВыборкаСтроки.ВыбранныйПериод;						
					ОбластьСтрокаТаблицы.Область(1,2,1,2).ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
					ОбластьСтрокаТаблицы.Область(1,2,1,2).ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 1);
				Иначе
					ОбластьСтрокаТаблицы.Параметры.ВыбранныйПериодПредставление	= "";			
					ОбластьСтрокаТаблицы.Область(1,2,1,2).ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
					ОбластьСтрокаТаблицы.Область(1,2,1,2).ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
				КонецЕсли;			
				Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);	
				
			КонецЦикла;
			
			Если ПоказыватьПодписи Тогда
				Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
					ОбластьПодвалТаблицы.Рисунки["ПодписиКартинкаПодпись"].Картинка = СтруктураКартинок.Подпись;
				КонецЕсли;
				Если ТипЗнч(СтруктураКартинок.Печать) = Тип("Картинка") тогда
					ОбластьПодвалТаблицы.Рисунки["ПодписиКартинкаПечать"].Картинка = СтруктураКартинок.Печать;
				КонецЕсли;
			КонецЕсли;			
			
			ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
			
		КонецЦикла;
		
		// +++ Кулаков П.Л. CRM-487
		Если ЭтоНоваяВерсия Тогда 
			ТабличныйДокумент.НижнийКолонтитул.НачальнаяСтраница = 1;
			ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
			ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = ТекстКолонтитула;
			ТабличныйДокумент.НижнийКолонтитул.Шрифт = Новый Шрифт("Times New Roman",8);
			Возврат ТабличныйДокумент;
		КонецЕсли;
		// --- Кулаков П.Л.
		
	КонецЕсли;

КонецФункции

Функция СформироватьСтруктуруДанныхПечатиВерсия2(ДанныеПечати, СтруктураДанных)
	
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеПечати);
	
	СтруктураДанных.Вставить("ДатаДоговора", Формат(ДанныеПечати.ДатаДоговора, "ДЛФ=DD"));
		
	//ПредставлениеОрганизации = ?(Не ПустаяСтрока(ДанныеПечати.ОрганизацияНаименованиеПолное),
	//	СокрЛП(ДанныеПечати.ОрганизацияНаименованиеПолное),
	//	СокрЛП(ДанныеПечати.ОрганизацияНаименование));
		
	ФС 			= "ЧН=Пусто";
	Параметры 	= ",,,,,,,, 0";
		
	//СтруктураДанных.Вставить("ПредставлениеОрганизации", 	СокрЛП(ПредставлениеОрганизации));
	//СтруктураДанных.Вставить("ПредставлениеКлиента", 		СокрЛП(ДанныеПечати.ПредставлениеКлиент));
	
	СведенияОбОрганизации = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДоговора,,ДанныеПечати.Договор.вогСчетОрганизации);
	СведенияОбКлиенте = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ДанныеПечати.Клиент, ДанныеПечати.ДатаДоговора,,ДанныеПечати.Договор.вогСчетКонтрагента);
	СтруктураДанных.Вставить("ПредставлениеОрганизации", СведенияОбОрганизации.ПолноеНаименование);
	СтруктураДанных.Вставить("ДолжностьРуководителя", ПолучитьДолжностьВРодительномПадеже(ДанныеПечати.РуководительДолжностьПредставление));
	СтруктураДанных.Вставить("ДолжностьОтветственный", ДанныеПечати.РуководительДолжностьПредставление);
	ФИОРуководителя = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.РуководительПредставление, 2, ФИОРуководителя, ДанныеПечати.РуководительПол);
	СтруктураДанных.Вставить("ФИОРуководителя", 			ФИОРуководителя);
	
	СтруктураДанных.Вставить("ПредставлениеКлиента", 		СведенияОбКлиенте.ПолноеНаименование);
	СтруктураДанных.Вставить("ДолжностьКонтактноеЛицо",	ДанныеПечати.ПредставлениеДолжностьКонтактногоЛицаРодительный);
	
	ПредставлениеКонтактногоЛица = "";
	//ФизическиеЛица.Просклонять(ДанныеПечати.ПредставлениеКонтактногоЛица, 2, ПредставлениеКонтактногоЛица, ДанныеПечати.ПолКонтактногоЛица);
	//СтруктураДанных.Вставить("ПредставлениеКонтактноеЛицо", ПредставлениеКонтактногоЛица);	
	ФИОРуководителя = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.РуководительПредставление, 2, ФИОРуководителя, ДанныеПечати.РуководительПол);
	ОтветственныйФИО =  ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.РуководительПредставление);
	СтруктураДанных.Вставить("ФИОРуководителя", 			ФИОРуководителя);
	СтруктураДанных.Вставить("ОтветственныйФИО", 			ОтветственныйФИО);
	СтруктураДанных.Вставить("ПредставлениеКлиента", 		СведенияОбКлиенте.ПолноеНаименование);
	СтруктураДанных.Вставить("ДолжностьКонтактноеЛицо", ДанныеПечати.ПредставлениеДолжностьКонтактногоЛицаРодительный);
	ПредставлениеКонтактногоЛица = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.ПредставлениеКонтактногоЛица, 2, ПредставлениеКонтактногоЛица, ДанныеПечати.ПолКонтактногоЛица,ДанныеПечати.НеСклонятьФамилию);
	ПредставлениеКонтактногоЛица = ?(СокрЛП(ПредставлениеКонтактногоЛица) = "","",
		""+ДанныеПечати.ПредставлениеДолжностьКонтактногоЛицаРодительный+" "+СокрЛП(ПредставлениеКонтактногоЛица));
	//START Кайдашов 05/03/20 crm-251
	Если ДанныеПечати.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель или 
		ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель И СокрЛП(ДанныеПечати.ПредставлениеКонтактногоЛица)<>"" тогда
		ПредставлениеКонтактногоЛица = ПредставлениеКонтактногоЛица;
	Иначе
		ПредставлениеКонтактногоЛица = "";
	КонецЕсли;
	//END Кайдашов 05/03/20 crm-251
	
	ОтветственныйКлиентФИО =  ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.ПредставлениеКонтактногоЛица);
	
	Если ЗначениеЗаполнено(ДанныеПечати.ПредставлениеКонтактногоЛица) тогда // Кайдашов crm-251
		ОтветственныйКлиентФИО =  "/"+ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.ПредставлениеКонтактногоЛица)+"/";
	Иначе
		ОтветственныйКлиентФИО =  "               ";
	КонецЕсли;
	СтруктураДанных.Вставить("ОтветственныйКлиентФИО", ОтветственныйКлиентФИО);
	
	Если ДанныеПечати.ПравоПодписиПоДоверенности Тогда
		СтруктураДанных.Вставить("ОснованиеРуководителя", СтрЗаменить(СтрЗаменить(ДанныеПечати.ОснованиеПраваПодписи,"Доверенность","Доверенности"),"Приказ","Приказ"));
		СтруктураДанных.Вставить("ТекстДоверенностиГД", СтрЗаменить(СтрЗаменить(ДанныеПечати.ОснованиеПраваПодписи,"Доверенности","Доверенность"),"Приказа","Приказ"));
	Иначе
		СтруктураДанных.Вставить("ОснованиеРуководителя", "Устава");
	КонецЕсли;
	СтруктураДанных.Вставить("ОснованиеПартнера", ДанныеПечати.Договор.вогДокументОснованиеПартнера);
	СтруктураДанных.Вставить("ЮридическийАдрес",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес"));
	СтруктураДанных.Вставить("ЮридическийАдресКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "ЮридическийАдрес"));
	СтруктураДанных.Вставить("ФактическийАдрес",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ФактическийАдрес"));
	СтруктураДанных.Вставить("ФактическийАдресКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "ФактическийАдрес"));
	СтруктураДанных.Вставить("РасчетныйСчет",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,БИК,КоррСчет"));
	СтруктураДанных.Вставить("РасчетныйСчетКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "НомерСчета,Банк,БИК,КоррСчет"));
	
	СтруктураДанных.Вставить("ДатаОкончанияДействияПредставление",Формат(ДанныеПечати.ДатаОкончанияДействия,"ДЛФ=DD"));
		
	Телефон = СведенияОбОрганизации.Телефоны + ?(СведенияОбОрганизации.Телефоны <> "" И СведенияОбОрганизации.email <> "" ,", ","") + СведенияОбОрганизации.email;   	
	ТелефонКлиента = СведенияОбКлиенте.Телефоны + ?(СведенияОбКлиенте.Телефоны <> "" И СведенияОбКлиенте.email <> "" ,", ","") + СведенияОбКлиенте.email;	
	
	СтруктураДанных.Вставить("Телефон",Телефон);                                                  
	СтруктураДанных.Вставить("ТелефонКлиента",ТелефонКлиента);	
	
	Если ДанныеПечати.ДоверенностьОснование <> Перечисления.ВариантыОснованийПодписанта.Устава тогда 
		ТекстДоверенности = СтрЗаменить(СтрЗаменить(ДанныеПечати.ДоверенностьОснование,"Доверенность","Доверенности"),"Приказ","Приказ")+" №"+ДанныеПечати.ДоверенностьНомер+" от "+Формат(ДанныеПечати.ДоверенностьДатаДокумента,"ДФ=dd.MM.yyyy");
	Иначе
		ТекстДоверенности = "Устава";
	КонецЕсли;
	
	ПредставлениеОснованиеПартнера = ", в лице "+ПредставлениеКонтактногоЛица+" действующего на основании " + ТекстДоверенности;	
	//START Кайдашов 05/03/20 crm-251
	Если ДанныеПечати.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель или 
		ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель И СокрЛП(ДанныеПечати.ПредставлениеКонтактногоЛица)<>"" тогда
		ПредставлениеОснованиеПартнера = ", в лице "+ПредставлениеКонтактногоЛица+" действующего на основании " + ТекстДоверенности;
		Если ДанныеПечати.ДоверенностьОснование = Перечисления.ВариантыОснованийПодписанта.Устава  тогда
			СтруктураДанных.Вставить("ДолжностьОтветственныйКлиента",ДанныеПечати.ПредставлениеДолжностьКонтактногоЛица);	
		Иначе
			СтруктураДанных.Вставить("ДолжностьОтветственныйКлиента","");	
			СтруктураДанных.Вставить("ОтветственныйКлиентДолжность",СтрЗаменить(СтрЗаменить(ДанныеПечати.ДоверенностьОснование,"Доверенности","Доверенность"),"Приказа","Приказ")+" №"+ДанныеПечати.ДоверенностьНомер+" от "+Формат(ДанныеПечати.ДоверенностьДатаДокумента,"ДФ=dd.MM.yyyy"));
		КонецЕсли;	
	Иначе
		ПредставлениеОснованиеПартнера = ", зарегистрированный в Едином государственном Реестре индивидуальных предпринимателей за государственным регистрационным номером (ОГРНИП) "+ДанныеПечати.ОГРНКлиента;
		СтруктураДанных.Вставить("ДолжностьОтветственныйКлиента",	?(ДанныеПечати.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,ДанныеПечати.ПредставлениеДолжностьКонтактногоЛица,""));
	КонецЕсли;
	//END Кайдашов 05/03/20 crm-251
	
	Именуемое = ?(ДанныеПечати.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,"именуемое","именуемый"); 
	СтруктураДанных.Вставить("Именуемое",Именуемое);
	
	//ПредставлениеОснованиеПартнера = ", в лице "+ПредставлениеКонтактногоЛица+" действующего на основании " + ДанныеПечати.ДокументОснованиеПартнера;
	//ПредставлениеОснованиеПартнера = ?(ДанныеПечати.ДокументОснованиеПартнера = "" И ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,"",ПредставлениеОснованиеПартнера);
	СтруктураДанных.Вставить("ПредставлениеОснованиеПартнера",ПредставлениеОснованиеПартнера );	
	СтруктураДанных.Вставить("ПредставлениеОГРНКлиента",?(ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,"ОГРНИП","ОГРН"));
	
	СтруктураДанных.Вставить("ДатаСоглашенияПредставление",Формат(ДанныеПечати.ДатаСоглашения,"ДЛФ=DD"));
	
	//РуководительПредставление = "";
	//ФизическиеЛица.Просклонять(ДанныеПечати.РуководительПредставление, 2, РуководительПредставление, ДанныеПечати.РуководительПол);
	//СтруктураДанных.Вставить("ФИОРуководителя", 			СокрЛП(РуководительПредставление));
	//СтруктураДанных.Вставить("ДолжностьРуководителя", 		
	//	ПолучитьДолжностьВРодительномПадеже(ДанныеПечати.РуководительДолжностьПредставление));
	
	ПредставлениеКонтактноеЛицо = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.ПредставлениеКонтактногоЛица, 2, ПредставлениеКонтактноеЛицо, ДанныеПечати.ПолКонтактногоЛица);
	СтруктураДанных.Вставить("ПредставлениеКонтактноеЛицо", СокрЛП(ПредставлениеКонтактноеЛицо));
	СтруктураДанных.Вставить("ДолжностьКонтактноеЛицо", ДанныеПечати.ПредставлениеДолжностьКонтактногоЛицаРодительный);
	
	СтруктураДанных.Вставить("РазмерШтрафаПрописью", 		НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.РазмерШтрафаШоуРум, ФС, Параметры))));
	СтруктураДанных.Вставить("КоличествоДнейПрописью",
		Нрег(СокрЛП(ЧислоПрописью(ДанныеПечати.СрокНаправленияЗаявленияОВозврате, ФС, Параметры))));
	СтруктураДанных.Вставить("ПроцентПрописью", 			НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.ПроцентРеализованногоТовара, ФС, Параметры))));
	СтруктураДанных.Вставить("СрокРеализацииПрописью",
		НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.СрокРеализацииУказанногоПроцентаПоставленногоТовара, ФС, Параметры))));
	СтруктураДанных.Вставить("РазмерСкидкиПрописью",
		НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.РазмерСкидкиНаТоварПодлежащийВозврату, ФС, Параметры))));
	СтруктураДанных.Вставить("СрокОплатыТовараПрописью", 	НРЕг(СокрЛП(ЧислоПрописью(ДанныеПечати.СрокОплатыТовара, ФС, Параметры))));
	СтруктураДанных.Вставить("МаксимумДнейОтсрочкиПрописью", 	НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.МаксимумДнейОтсрочки, ФС, Параметры))));
	СтруктураДанных.Вставить("РазмерВыплатыПрописью",
		НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.РазмерВыплатыПриРасторженииДоговора, ФС, Параметры))));
	СтруктураДанных.Вставить("ТестовыйПериодЭДОПрописью", 	НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.ТестовыйПериодЭДО, ФС, Параметры))));
	
	СтруктураДанных.Вставить("РазмерАвансаЗаПартиюТовараПрописью",
		НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.РазмерАвансаЗаПартиюТовара, ФС, Параметры))));	 
	
	
	//ДокументОснованиеПартнера = "";
	//ФизическиеЛица.Просклонять(ДанныеПечати.ДокументОснованиеПартнера, 2, ДокументОснованиеПартнера);
	//СтруктураДанных.Вставить("ОснованиеПартнера", СокрЛП(ДокументОснованиеПартнера));
	
	// Контактная информация организации
	СтруктураДанных.Вставить("ГородОрганизации", "");
	СтруктураДанных.Вставить("ЭлАдресОрганизации", "");
	
	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДляПриемкиЗаказаОбои);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДляПриемкиЗаказаПлитка);
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ДанныеПечати.Организация);
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивСсылок,, МассивВидовКИ, ТекущаяДата());
	
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
		
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			СтруктураКИ = Новый Структура;
			Если ДанныеПечати.Организация.ИНН = "2309123330" или ДанныеПечати.Организация.ИНН = "2373013119" тогда
				СтруктураКИ.Вставить("Регион", "");
				СтруктураКИ.Вставить("НаселенныйПункт", "");
			Иначе	
				СтруктураКИ.Вставить("Город", "");
				СтруктураКИ.Вставить("ГородСокращение", "");
				
			КонецЕсли;
			
			Результат = РаботаСАдресами.ПредыдущаяСтруктураКонтактнойИнформацииXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Вид);
			
			ЗаполнитьЗначенияСвойств(СтруктураКИ, Результат);
			// ++ VOG Солодов В.В. 03.12.2019 
			Если СтруктураКИ.Свойство("Город") тогда
				МассивСлов 		= СтрРазделить(СтруктураКИ.Город, " ", Ложь);
				ИндСокращения 	= МассивСлов.Найти(СтруктураКИ.ГородСокращение);
				Если Не ИндСокращения = Неопределено Тогда
					МассивСлов.Удалить(ИндСокращения);
				КонецЕсли;
			КонецЕслИ;
			
			Если ДанныеПечати.Организация.ИНН = "2309123330" или ДанныеПечати.Организация.ИНН = "2373013119" тогда
				СтруктураДанных.ГородОрганизации = СтруктураКИ.Регион+", "+СтруктураКИ.НаселенныйПункт;
			Иначе				
				СтруктураДанных.ГородОрганизации = "г. "+СтрСоединить(МассивСлов, " ");
			КонецЕсли;
			
			
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			
			Если ДанныеПечати.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка 
				И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресДляПриемкиЗаказаПлитка тогда
					СтруктураДанных.ЭлАдресОрганизации = СтрокаКИ.Представление;
				КонецЕсли;	
				
			Если ДанныеПечати.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои 
				И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресДляПриемкиЗаказаОбои тогда
					СтруктураДанных.ЭлАдресОрганизации = СтрокаКИ.Представление;
			КонецЕсли;	
				
//			СтруктураДанных.ЭлАдресОрганизации = СтрокаКИ.Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если ДанныеПечати.ПремияВычетСтоимостиПоТранзПоставке тогда
		СтруктураДанных.Вставить("ПремияУсловиеСтоимостиТовараПоТранзитноеПоставке", "- стоимости товара по транзитной поставке (без НДС) (когда товар поступает на склад Покупателя минуя склад Поставщика).");
	Иначе
		СтруктураДанных.Вставить("ПремияУсловиеСтоимостиТовараПоТранзитноеПоставке", "");
	КонецЕсли;
	
	Если ДанныеПечати.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ <> 0 тогда
		СтруктураДанных.Вставить("ПредставлениеОтсрочкаОплатыПриПоставкеТовараПодЗаказ",
			Строка(ДанныеПечати.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ) + " ("+НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ, ФС, Параметры))) +")");	
	КонецЕсли;
	
	Если ДанныеПечати.ОтсрочкаОплатыПриОткрытииНовогоМагазина<> 0 тогда
		СтруктураДанных.Вставить("ОтсрочкаОплатыПриОткрытииНовогоМагазинаПрописью",НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.ОтсрочкаОплатыПриОткрытииНовогоМагазина, ФС, Параметры))));	
	КонецЕсли;
	     
	Если ДанныеПечати.ОтсрочкаОплатыПриЗаказеНовогоТовара<> 0 тогда
		СтруктураДанных.Вставить("ОтсрочкаОплатыПриЗаказеНовогоТовараПрописью",НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.ОтсрочкаОплатыПриЗаказеНовогоТовара, ФС, Параметры))));	
	КонецЕсли;
	 
	Если ДанныеПечати.ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара<> 0 тогда
		СтруктураДанных.Вставить("ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовараПрописью",НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара, ФС, Параметры))));	
	КонецЕсли;
	
	Если ДанныеПечати.ОтсрочкаПлатежаНаВесьТовар<> 0 тогда
		СтруктураДанных.Вставить("ОтсрочкаПлатежаНаВесьТоварПрописью",НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.ОтсрочкаПлатежаНаВесьТовар, ФС, Параметры))));	
	КонецЕсли;
	
	СтруктураДанных.Вставить("ОтчетныйПериодДляДопСоглашенияПоНормеБояПредставление", Нрег(СокрЛП(ДанныеПечати.ОтчетныйПериодДляДопСоглашенияПоНормеБоя)));
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СформироватьСтруктуруОбластейВерсия2(ДанныеПечати, Макет)
	
	СтруктураОбластей = Новый Структура;
	
	НомерРаздела 		= 0;
	
	Для ИндексРаздела = 1 По 19 Цикл
		
		НомерВарианта 		= 0;
		НомерПунктаРаздела 	= 0;
		ИмяРаздела 			= "Раздел" + Строка(ИндексРаздела);
		
		Если Не Макет.Области.Найти(ИмяРаздела) = Неопределено Тогда
			
			НомерРаздела = НомерРаздела + 1;
			ПредставлениеНомераРаздела = Строка(НомерРаздела);
			
			СтруктураОбластей.Вставить(ИмяРаздела, ПредставлениеНомераРаздела);
			
			// +++ VOG Кулаков П.Л. 16.03.2020 CRM-447
			// Для ИндексВарианта = 1 По 10 Цикл
			Для ИндексВарианта = 1 По 12 Цикл
			// --- VOG Кулаков П.Л.
				
				НомерПункта = 0;
				ИмяВарианта = ИмяРаздела + "_Вариант" + Строка(ИндексВарианта);
				
				Если Не Макет.Области.Найти(ИмяВарианта) = Неопределено Тогда
					
					НомерВарианта = НомерВарианта + 1;
					ПредставлениеНомераВарианта = ПредставлениеНомераРаздела + "." + Строка(НомерВарианта);
					СтруктураОбластей.Вставить(ИмяВарианта, ПредставлениеНомераВарианта);
					
					Для ИндексПункта = 1 По 20 Цикл
						
						ИмяПункта = ИмяВарианта + "_Пункт" + Строка(ИндексПункта);
						
						Если Не Макет.Области.Найти(ИмяПункта) = Неопределено Тогда
							
							ОбластьПункта = Макет.ПолучитьОбласть(ИмяПункта);
							
							УИД = Новый УникальныйИдентификатор;
							
							СтруктураПараметра = Новый Структура;
							СтруктураПараметра.Вставить("НомерПункта", УИД);
							
							ЗаполнитьЗначенияСвойств(СтруктураПараметра, ОбластьПункта.Параметры);
							
							Если СтруктураПараметра.НомерПункта <> УИД Тогда
								НомерПункта = НомерПункта + 1;
								ПредставлениеНомераПункта = ПредставлениеНомераВарианта + "." + Строка(НомерПункта);
								СтруктураОбластей.Вставить(ИмяПункта, ПредставлениеНомераПункта);
							Иначе
								СтруктураОбластей.Вставить(ИмяПункта, "");
							КонецЕсли;
							
						//Иначе
						//	Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для ИндексПунктаРаздела = 1 По 20 Цикл
				
				НомерПодПункта 	= 0;
				ИмяПунктаРаздела = ИмяРаздела + "_Пункт" + Строка(ИндексПунктаРаздела);
				
				Если Не Макет.Области.Найти(ИмяПунктаРаздела) = Неопределено Тогда
					
					ОбластьПунктаРаздела = Макет.ПолучитьОбласть(ИмяПунктаРаздела);
					
					УИД = Новый УникальныйИдентификатор;
					
					СтруктураПараметра = Новый Структура;
					СтруктураПараметра.Вставить("НомерПункта", УИД);
					
					ЗаполнитьЗначенияСвойств(СтруктураПараметра, ОбластьПунктаРаздела.Параметры);
					
					Если СтруктураПараметра.НомерПункта <> УИД Тогда
						
						НомерПунктаРаздела = НомерПунктаРаздела + 1;
						ПредставлениеНомераПунктаРаздела = ПредставлениеНомераРаздела + "." + Строка(НомерПунктаРаздела);
						СтруктураОбластей.Вставить(ИмяПунктаРаздела, ПредставлениеНомераПунктаРаздела);
						
						Для ИндексПодПункта = 1 По 20 Цикл
							
							ИмяПодПункта = ИмяПунктаРаздела + "_ПодПункт" + Строка(ИндексПодПункта);
							
							Если Не Макет.Области.Найти(ИмяПодПункта) = Неопределено Тогда
								
								ОбластьПодПункта = Макет.ПолучитьОбласть(ИмяПодПункта);
								
								УИД = Новый УникальныйИдентификатор;
								
								СтруктураПараметра = Новый Структура;
								СтруктураПараметра.Вставить("НомерПункта", УИД);
								
								ЗаполнитьЗначенияСвойств(СтруктураПараметра, ОбластьПодПункта.Параметры);
								
								Если СтруктураПараметра.НомерПункта <> УИД Тогда
									НомерПодПункта = НомерПодПункта + 1;
									ПредставлениеНомераПодПункта = ПредставлениеНомераПунктаРаздела + "." + Строка(НомерПодПункта);
									СтруктураОбластей.Вставить(ИмяПодПункта, ПредставлениеНомераПодПункта);
								Иначе
									СтруктураОбластей.Вставить(ИмяПодПункта, "");
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						СтруктураОбластей.Вставить(ИмяПунктаРаздела, "");
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураОбластей;
	
КонецФункции

Процедура НастроитьМакетВерсия2(ДанныеПечати, Макет)
	
	
	
	// ++ VOG Солодов В.В. 14.11.2019 task 880
	Если ДанныеПечати.СпособОтправкиЗаказа = Перечисления.вогСпособыОтправкиЗаказа.ОтправкаЗаказаЧерезEDI Тогда
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант1");
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант3");
	ИначеЕсли ДанныеПечати.СпособОтправкиЗаказа = Перечисления.вогСпособыОтправкиЗаказа.ОтправкаЗаказаЧерезB2B Тогда
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант1");
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант2");
	Иначе
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант2");
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант3");
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант4");
	КонецЕсли;
	// До изменения
	//Если Не ДанныеПечати.ОтправкаЗаказаПоФормеНаЭлПочту Тогда
	//	УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант1");		
	//КонецЕсли;
	//
	//Если Не ДанныеПечати.ОтправкаЗаказаЧерезEDI Тогда
	//	УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант2");		
	//КонецЕсли;
	//	
	//Если Не ДанныеПечати.ОтправкаЗаказаЧерезВ2В Тогда
	//	УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант3");		
	//КонецЕсли;
	//
	//Если Не ДанныеПечати.ОтправкаЗаказаПоФормеНаЭлПочту И Не ДанныеПечати.ОтправкаЗаказаЧерезEDI И Не ДанныеПечати.ОтправкаЗаказаЧерезВ2В Тогда
	//	УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант4");		
	//КонецЕсли;
	// -- VOG Солодов В.В. 14.11.2019
	
	// Поставка товара под заказ
	
	Если НЕ ДанныеПечати.ЕстьПоставкаТовараПодЗаказ Тогда
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант1");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант2");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант3");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант4");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант5");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант6");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант7");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант8");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант9");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант10");
	Иначе
		Если ДанныеПечати.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ = 0 тогда
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант2");
		Иначе			
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант3");
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ДанныеПечати.СпособДоставкиТовара = Перечисления.вогСпособыДоставкиТовара.ДоставкаТовараПоставщиком Тогда
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант10");
		УдалитьОбластиМакета(Макет, "Раздел4", "Раздел4_Вариант1");
	ИначеЕсли ДанныеПечати.СпособДоставкиТовара = Перечисления.вогСпособыДоставкиТовара.СамовывозТовара Тогда
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант1");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант2");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант3");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант4");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант5");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант6");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант7");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант8");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант9");
		УдалитьОбластиМакета(Макет, "Раздел4", "Раздел4_Вариант2");
	КонецЕсли;
	
	// Рекламно-демонстрационные материалы (Образцы)
	Если ДанныеПечати.РазмерСкидкиНаРекламноДемонстрационныеМатериалы = 0 Тогда
		УдалитьОбластиМакета(Макет, "Раздел7", "Раздел7_Вариант1");
	КонецЕсли;
	Если НЕ ДанныеПечати.СтоимостьОбразцовВключенаВСтоимостьТовара Тогда
		УдалитьОбластиМакета(Макет, "Раздел7", "Раздел7_Вариант2");
	КонецЕсли;
	// Рекламно-демонстрационные материалы (Плитка)
	Если Не ДанныеПечати.РекламноДемонстрационныеМатериалыПанели Тогда
		УдалитьОбластиМакета(Макет, "Раздел8", "Раздел8_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел8", "Раздел8_Пункт2");
	КонецЕсли;
	
	// Услуга по организации шоу-рум
	Если Не ДанныеПечати.УслугаПоОрганизацииШоуРум Тогда
		УдалитьОбластиМакета(Макет, "Раздел9", "Раздел9_Пункт1");
	КонецЕсли;
	
	// Премии
	Если Не ДанныеПечати.ВыплачиваютсяПремии Тогда
		УдалитьОбластиМакета(Макет, "Раздел10", "Раздел10_Пункт1");
	КонецЕсли;
	
	// Скидки
	Если ДанныеПечати.РазмерСкидкиНаПроведениеКоммерческойАкции = 0 Тогда
		УдалитьОбластиМакета(Макет, "Раздел11", "Раздел11_Вариант1");
	КонецЕсли;
	
	Если ДанныеПечати.РазмерСкидкиПриОткрытииНовогоМагазина = 0 Тогда
		УдалитьОбластиМакета(Макет, "Раздел11", "Раздел11_Вариант2");
	КонецЕсли;
	
	Если ДанныеПечати.РазмерСкидкиНаНовыйТовар = 0 Тогда
		УдалитьОбластиМакета(Макет, "Раздел11", "Раздел11_Вариант3");
	КонецЕсли;
	
	//1 - 1
	//2 - 2,3,4
	//3 - 5,6,7,8
	//4 - 9,10
	//5 - 11
	//6 - 12
	
	// Отсрочка платежа
	Если ДанныеПечати.ПолныйАвансовыйПлатежНаВесьТовар Тогда                 		//п.1
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант2");	//2
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант3");	//3
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант4");	//4
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант5");	//5
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант6");	//6
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант7");
	Иначе
		//Частичная оплата и отсрочка на неоплаченную часть товара		
		Если ДанныеПечати.РазмерАвансаЗаПартиюТовара <> 0
			И ДанныеПечати.ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара <> 0 Тогда      //п.2
			
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант1");	//1
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант3");	//3
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант4");	//4
			
		//Отсрочка оплаты на весь поставляемый товар	
		ИначеЕсли ДанныеПечати.ОтсрочкаПлатежаНаВесьТовар <> 0 Тогда				//п.4
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант1");	//1
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант2");	//2
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант3");	//3
			
		// Оплата после реализации товара	
		ИначеЕсли ЗначениеЗаполнено(ДанныеПечати.СрокиОтчетаОПродажах) Тогда		//п.3
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант1");	//1
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант2");	//2
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант4");	//4
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант7");
			
		Иначе	
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант1");	//1			
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант2");	//2
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант3");	//3
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант4");	//4
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант5");	//5
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант6");	//6
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант7");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеПечати.ОтсрочкаОплатыПриОткрытииНовогоМагазина = 0 тогда
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант5");	//5
	КонецЕсли;	
	
	Если ДанныеПечати.ОтсрочкаОплатыПриЗаказеНовогоТовара = 0 тогда
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант6");	//6
	КонецЕсли;	
	
	//// Оплата после реализации товара
	//Если Не ЗначениеЗаполнено(ДанныеПечати.СрокиОтчетаОПродажах) Тогда				//п.3
	//	УдалитьОбластиМакета(Макет, "Раздел11", "Раздел11_Вариант3");
	//КонецЕсли;
	
	// Условия возврата товара
	Если Не ДанныеПечати.ЕстьВозвратТовара Тогда
		
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант1");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант1_Пункт2");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант1_Пункт3");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант2");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант2_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт2");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт3");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт4");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт5");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт6");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант4");
		УдалитьОбластиМакета(Макет, "Раздел14", "Раздел13_Вариант4_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел14", "Раздел13_Вариант4_Пункт2");
	ИначеЕсли ДанныеПечати.РазмерСкидкиНаТоварПодлежащийВозврату	= 0 тогда
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант2");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант2_Пункт1");
	ИначеЕсли	НЕ ДанныеПечати.ПоставщикПроизводитВозвратНеликвидногоТовара тогда
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт2");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт3");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт4");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт5");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт6");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант4");
		УдалитьОбластиМакета(Макет, "Раздел14", "Раздел13_Вариант4_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел14", "Раздел13_Вариант4_Пункт2");
	КонецЕсли;
	
	Если ДанныеПечати.ДоставкуВозвратаОсуществляетКлиент тогда
		УдалитьОбластиМакета(Макет, "Раздел14", "Раздел13_Вариант4_Пункт2");
	КонецЕсли;	
	
	Если ДанныеПечати.НаправлениеДеятельности <> Справочники.НаправленияДеятельности.Плитка Тогда
		УдалитьОбластиМакета(Макет, "Раздел15", "Раздел15_Вариант1");
		//УдалитьОбластиМакета(Макет, "Раздел15", "Раздел15_Вариант2");
	//Иначе	
	//	УдалитьОбластиМакета(Макет, "Раздел15", "Раздел15_Вариант2");
	КонецЕсли;
	
	Если Не ДанныеПечати.ИспользоватьЭДО Тогда
		УдалитьОбластиМакета(Макет, "Раздел16", "Раздел16_Вариант1");
	КонецЕсли;
	
    Если ДанныеПечати.РазмерВыплатыПриРасторженииДоговора = 0 тогда
    	УдалитьОбластиМакета(Макет, "Раздел17", "Раздел17_Вариант1");
    	УдалитьОбластиМакета(Макет, "Раздел17", "Раздел17_Вариант2");
    	УдалитьОбластиМакета(Макет, "Раздел17", "Раздел17_Вариант3");
	КонецЕсли;
	Если ДанныеПечати.ЕстьДополнительноеСоглашениеПоНормеБоя тогда
    	УдалитьОбластиМакета(Макет, "Раздел15", "Раздел15_Вариант1");
		//УдалитьОбластиМакета(Макет, "Раздел15", "Раздел15_Вариант2");
		
	КонецЕсли;
	
	Если ДанныеПечати.ДатаОкончанияДействия <> '00010101' тогда
		УдалитьОбластиМакета(Макет, "Раздел18", "Раздел18_Вариант3");
	Иначе
		УдалитьОбластиМакета(Макет, "Раздел18", "Раздел18_Вариант2");
	КонецЕсли;	
	
КонецПроцедуры

Процедура УдалитьОбластиМакета(Макет, ИмяРаздела, ИмяВарианта)
	
	// Удаление варианта
	Если Не Макет.Области.Найти(ИмяВарианта) = Неопределено Тогда
		Макет.УдалитьОбласть(Макет.Область(ИмяВарианта), ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	// Удаление пунктов варианта
	Для ИндексПункта = 1 По 20 Цикл
		
		ИмяПункта = ИмяВарианта + "_Пункт" + Строка(ИндексПункта);
		
		Если Не Макет.Области.Найти(ИмяПункта) = Неопределено Тогда
			Макет.УдалитьОбласть(Макет.Область(ИмяПункта), ТипСмещенияТабличногоДокумента.ПоВертикали);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка оставшихся вариантов раздела
	КоличествоВариантов = 0;
	
	Для ИндексВарианта = 1 По 10 Цикл
				
		ИмяВарианта = ИмяРаздела + "_Вариант" + Строка(ИндексВарианта);
				
		Если Не Макет.Области.Найти(ИмяВарианта) = Неопределено Тогда
			КоличествоВариантов = КоличествоВариантов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление раздела и оставщихся пунктов раздела
	Если КоличествоВариантов = 0 Тогда
		
		Если Не Макет.Области.Найти(ИмяРаздела) = Неопределено Тогда
			
			Макет.УдалитьОбласть(Макет.Область(ИмяРаздела), ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			Для ИндексПунктаРаздела = 1 По 20 Цикл
				
				ИмяПунктаРаздела = ИмяРаздела + "_Пункт" + Строка(ИндексПунктаРаздела);
				
				Если Не Макет.Области.Найти(ИмяПунктаРаздела) = Неопределено Тогда
					Макет.УдалитьОбласть(Макет.Область(ИмяПунктаРаздела), ТипСмещенияТабличногоДокумента.ПоВертикали);
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСтруктуруОбластейПриложения()
	
	СтруктураОбластей = Новый Структура;
	СтруктураОбластей.Вставить("Заголовок");
	СтруктураОбластей.Вставить("ШапкаТаблицы");
	СтруктураОбластей.Вставить("СтрокаТаблицы");
	СтруктураОбластей.Вставить("ПодвалТаблицы");
	
	Возврат СтруктураОбластей;
	
КонецФункции

Функция ПроверитьЗаполнениеШапки(СтруктураДанныхПечати)
	
	Отказ = Ложь;
	
	СтруктураОбязательныхПолей = Новый Структура;
	СтруктураОбязательныхПолей.Вставить("ПредставлениеОрганизации");
	СтруктураОбязательныхПолей.Вставить("ДолжностьРуководителя");
	СтруктураОбязательныхПолей.Вставить("ФИОРуководителя");
	СтруктураОбязательныхПолей.Вставить("ОснованиеРуководителя");
	СтруктураОбязательныхПолей.Вставить("ПредставлениеКлиента");
	
	ЗаполнитьЗначенияСвойств(СтруктураОбязательныхПолей, СтруктураДанныхПечати);
	
	Для Каждого ЭлементСтруктуры Из СтруктураОбязательныхПолей Цикл
		Если Не ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
			
			СтрокаИмя = "";
			
			Для Позиция = 5 По СтрДлина(ЭлементСтруктуры.Ключ) Цикл
				Символ = Сред(ЭлементСтруктуры.Ключ, Позиция, 1);
				Если Символ = ВРег(Символ) Тогда
					ПерваяЧастьСтроки = Лев(ЭлементСтруктуры.Ключ, Позиция - 1);
					ВтораяЧастьСтроки = СтрЗаменить(ЭлементСтруктуры.Ключ, ПерваяЧастьСтроки, "");
					СтрокаИмя = ПерваяЧастьСтроки + " " + СтрЗаменить(ВтораяЧастьСтроки, Символ, НРег(Символ));
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ШаблонСообщения = НСтр("ru = 'Не заполнено поле %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаИмя);
			// ++ VOG Солодов В.В. 19.06.2020 CRM-658
			ВызватьИсключение(ТекстСообщения);
			// До изменения
			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			//Прервать;
			// -- VOG Солодов В.В. 19.06.2020
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции

Функция ПолучитьДолжностьВРодительномПадеже(Знач ИсходнаяСтрока)
	
	СтруктураР = Справочники.CRM_Должности.ПолучитьСтруктуруСклонения(ИсходнаяСтрока);	
	Возврат СтруктураР.Родительный;
	//Результат 		= "";
	//ИсходнаяСтрока 	= СокрЛП(ИсходнаяСтрока);
	//
	//Если СтрДлина(ИсходнаяСтрока) = 0 Тогда
	//	Возврат Результат;
	//КонецЕсли;
	//
	//Поз = Найти(ИсходнаяСтрока, " ");
	//
	//Пока Поз > 0 Цикл
	//	
	//	СловоВПадеже = "";
	//	
	//	Слово = Лев(ИсходнаяСтрока, Поз - 1);
	//	СловоВПадеже = CRM_ОбщегоНазначенияСервер.Склонение(Слово, "Р");
	//	
	//	Результат = СокрЛП(Результат + " " + НРег(СловоВПадеже));
	//	ИсходнаяСтрока = СокрЛП(Сред(ИсходнаяСтрока, Поз));
	//	
	//	Если ПустаяСтрока(ИсходнаяСтрока) Тогда
	//		Прервать;
	//	КонецЕсли;
	//	
	//	Поз = Найти(ИсходнаяСтрока, " ");
	//	
	//КонецЦикла;
	//
	//Если Не ПустаяСтрока(ИсходнаяСтрока) Тогда
	//	
	//	СловоВПадеже = "";
	//	СловоВПадеже = CRM_ОбщегоНазначенияСервер.Склонение(ИсходнаяСтрока, "Р");
	//	Результат = СокрЛП(Результат + " " + НРег(СловоВПадеже));
	//	
	//КонецЕсли;
	//
	//Возврат Результат;
	
КонецФункции

#КонецОбласти

// ++ VOG Солодов В.В. 25.06.2021 DEV-69

// Возвращает текст запроса для получения актуальных коммерческих соглашений
//
Функция ТекстЗапросаАктуальныхВерсий(ТолькоПоследнюю)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Владелец КАК ЮридическоеЛицо,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	вогЮридическиеЛица.Партнер КАК Партнер,
	|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаДоговора,
	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ ВТ_Договора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
	|	1 КАК Приоритет,
	|	ВТ_Договора.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Договора.НомерДоговора КАК НомерДоговора,
	|	ВТ_Договора.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	ВТ_Договора.Договор КАК Договор,
	|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	вогКоммерческиеСоглашения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	вогКоммерческиеСоглашения.Статус КАК Статус
	|ПОМЕСТИТЬ ВТ_Соглашения
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	|		ПО вогКоммерческиеСоглашения.ЮридическоеЛицо = ВТ_Договора.ЮридическоеЛицо
	|			И вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	|			И (НЕ вогКоммерческиеСоглашения.Статус В (&СписокСтатусовДляИсключения))
	|			И (вогКоммерческиеСоглашения.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НаправлениеДеятельности = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ вогКоммерческиеСоглашения.НаправлениеДеятельности = &НаправлениеДеятельности
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогКоммерческиеСоглашения.Ссылка,
	|	2,
	|	ВТ_Договора.ДатаДоговора,
	|	ВТ_Договора.НомерДоговора,
	|	ВТ_Договора.ЮридическоеЛицо,
	|	ВТ_Договора.Договор,
	|	вогКоммерческиеСоглашения.ДатаНачалаДействия,
	|	вогКоммерческиеСоглашения.НаправлениеДеятельности,
	|	вогКоммерческиеСоглашения.Статус
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	|		ПО вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	|			И (вогКоммерческиеСоглашения.ЮридическоеЛицо = ЗНАЧЕНИЕ(Справочник.вогЮридическиеЛица.ПустаяСсылка))
	|			И (НЕ вогКоммерческиеСоглашения.Статус В (&СписокСтатусовДляИсключения))
	|			И (вогКоммерческиеСоглашения.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НаправлениеДеятельности = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ вогКоммерческиеСоглашения.НаправлениеДеятельности = &НаправлениеДеятельности
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВТ_Соглашения.Ссылка КАК Соглашение,
	|	ВТ_Соглашения.Договор КАК Договор,
	|	ВТ_Соглашения.Ссылка.вогВерсия КАК Версия,
	|	ВТ_Соглашения.Приоритет КАК Приоритет,
	|	ВТ_Соглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	ВТ_Соглашения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВТ_Соглашения.Статус КАК Статус
	|ИЗ
	|	ВТ_Соглашения КАК ВТ_Соглашения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет ВОЗР,
	|	ДатаНачалаДействия УБЫВ";
	
	Если Не ТолькоПоследнюю Тогда
		
		Схема = Новый СхемаЗапроса;
		Схема.УстановитьТекстЗапроса(ТекстЗапроса);
		
		ИндексПоследнегоПакета = Схема.ПакетЗапросов.Количество() - 1;
		
		Если ИндексПоследнегоПакета >= 0 Тогда
			
			ЗапросВыбора 	= Схема.ПакетЗапросов.Получить(ИндексПоследнегоПакета);
			Оператор 		= ЗапросВыбора.Операторы.Получить(0);
			Оператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.Объединить;
			
			КолонкаСоглашение = ЗапросВыбора.Колонки.Найти("Соглашение");
			
			Если ТипЗнч(КолонкаСоглашение) = Тип("КолонкаСхемыЗапроса") Тогда
				КолонкаСоглашение.Псевдоним = "КоммерческоеСоглашение";
			КонецЕсли;
			
			ДополнительныйОператор = ЗапросВыбора.Операторы.Добавить(Оператор);
			ДополнительныйОператор.КоличествоПолучаемыхЗаписей 	= Неопределено;
			ДополнительныйОператор.ТипОбъединения 				= ТипОбъединенияСхемыЗапроса.Объединить;
			
			Оператор.ВыбираемыеПоля.Добавить("Истина");
			КолонкаОсновное = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
			КолонкаОсновное.Псевдоним = "Основное";
			
			ДополнительныйОператор.ВыбираемыеПоля.Добавить("Ложь");
			
			МассивУсловияОтбора = Новый Массив;
			МассивУсловияОтбора.Добавить("ВТ_Соглашения.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.Действует)");
			МассивУсловияОтбора.Добавить("ВТ_Соглашения.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.СогласованКлиентом)");
			//--> VOG Турский Сергей 13.07.2021 13:56:39 ID заявки: DEV-724.
			МассивУсловияОтбора.Добавить("ВТ_Соглашения.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.Согласован)");
			//<-- VOG Турский Сергей 13.07.2021 13:56:49 ID заявки: DEV-724.
			
			ДополнительныйОператор.Отбор.Добавить(СтрСоединить(МассивУсловияОтбора, " ИЛИ "));
			
		КонецЕсли;
		
		ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПараметрыПолученияДанных()
	
	ПараметрыПолученияДанных = Новый Структура;
	ПараметрыПолученияДанных.Вставить("МассивОбъектов");
	ПараметрыПолученияДанных.Вставить("МассивСоглашений");
	ПараметрыПолученияДанных.Вставить("НаправлениеДеятельности");
	ПараметрыПолученияДанных.Вставить("Версия");
	ПараметрыПолученияДанных.Вставить("ПечатьПриложения");
	
	Возврат ПараметрыПолученияДанных;
	
КонецФункции

// Возвращает данные печати
//
// Параметры:
//     МассивОбъектов           - Массив    - Массив ссылок на объекты, по которым нужно получит данные.
//     НаправлениеДеятельности  - СправочникСсылка.НаправленияДеятельности    - Массив ссылок на объекты которые нужно распечатать.
//     Версия                   - Число    - Версия коммерческого соглашения.
//
// Возвращаемое значение:
//     Результат - Массив - Результат выполнения пакета запросов.
//
Функция ПолучитьДанныеДляПечатнойФормыКоммерческоеСоглашение(ПараметрыПолученияДанных)
	
	Перем МассивОбъектов, Версия;
	
	ПараметрыПолученияДанных.Свойство("МассивОбъектов", 	МассивОбъектов);
	ПараметрыПолученияДанных.Свойство("Версия", 			Версия);
	
	ТипОбъектов = Тип("СправочникСсылка.ДоговорыКонтрагентов");
	
	// ++ VOG Солодов В.В. 06.08.2021 DEV-784
	Для Каждого ОбъектПечати Из МассивОбъектов Цикл
		
		ТекущийТип = ТипЗнч(ОбъектПечати);
		
		Если Не ТекущийТип = ТипОбъектов Тогда
			ТипОбъектов = ТекущийТип;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	// До изменения
	//Если МассивОбъектов.Количество() > 0 Тогда
	//	ТипОбъектов = ТипЗнч(МассивОбъектов[0]);
	//КонецЕсли;
	// -- VOG Солодов В.В. 06.08.2021 DEV-784
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныхКоммерческиогоПриложения(ТипОбъектов, Версия);
	
	ОпределитьПараметрыЗапроса(Запрос, ПараметрыПолученияДанных);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает динамически сформированный текст запроса, в зависимости от типа объектов и версии
//
// Параметры:
//     ТипОбъектов              - Тип      - Тип объекта, см. Справочник.вогКоммерческиеСоглашения.Печать (параметр МассивОбъектов)
//     Версия                   - Число    - Версия коммерческого соглашения.
//
// Возвращаемое значение:
//     ТекстЗапроса - Строка - текст запроса
//
Функция ТекстЗапросаДанныхКоммерческиогоПриложения(ТипОбъектов, Версия)
	
	ПоДоговорам = (ТипОбъектов = Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	Схема 		= Новый СхемаЗапроса;
	
	Если ПоДоговорам Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Владелец КАК ЮридическоеЛицо,
		|	ДоговорыКонтрагентов.Организация КАК Организация,
		|	вогЮридическиеЛица.Партнер КАК Партнер,
		|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаДоговора,
		|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ПОМЕСТИТЬ ВТ_Договора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
		|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ ВТ_Соглашения
		|ИЗ
		|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИСТИНА КАК Поле1
		|ПОМЕСТИТЬ СлужебнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
		|	1 КАК Приоритет
		|ПОМЕСТИТЬ ВТ_Соглашения
		|ИЗ
		|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения";
		
	КонецЕсли;
	
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ЗапросВыбора 			= Схема.ПакетЗапросов.Получить(Схема.ПакетЗапросов.Количество() - 1);
	
	Оператор1 				= ЗапросВыбора.Операторы.Получить(0);
	Источник1 				= Оператор1.Источники.НайтиПоПсевдониму("вогКоммерческиеСоглашения");
	
	// Левое соединение с таблицей договоров
	Если ПоДоговорам Тогда
		Источник2 			= Оператор1.Источники.Добавить("ВТ_Договора", "ВТ_Договора");
	Иначе
		Источник2 			= Оператор1.Источники.Добавить("Справочник.ДоговорыКонтрагентов", "ТаблицаДоговорыКонтрагентов");
	КонецЕсли;
	
	Если ПоДоговорам Тогда
		
		// Условия соединения с таблицей договоров
		Источник1.Соединения.Очистить();
		
		Источник1.Соединения.Добавить(Источник2, "вогКоммерческиеСоглашения.ЮридическоеЛицо = ВТ_Договора.ЮридическоеЛицо");
		Источник1.Соединения.Добавить(Источник2, "вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация");
		Источник1.Соединения.Добавить(Источник2, "вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер");
		
		// Поля запроса
		Оператор1.ВыбираемыеПоля.Добавить("ВТ_Договора.ДатаДоговора");
		Оператор1.ВыбираемыеПоля.Добавить("ВТ_Договора.НомерДоговора");
		Оператор1.ВыбираемыеПоля.Добавить("ВТ_Договора.ЮридическоеЛицо");
		Оператор1.ВыбираемыеПоля.Добавить("ВТ_Договора.Договор");
		
	Иначе
		
		// Добавим таблицу Справочник.ЮридическиеЛица
		Источник3 = Оператор1.Источники.Добавить("Справочник.вогЮридическиеЛица", "ТаблицаЮридическиеЛица");
		Источник1.Соединения.Очистить();
		Источник2.Соединения.Очистить();
		
		// Условия соединения с таблицей юр. лиц
		Источник2.Соединения.Добавить(Источник3, "ТаблицаДоговорыКонтрагентов.Владелец = ТаблицаЮридическиеЛица.Ссылка");
		Соединение = Источник2.Соединения.НайтиПоПсевдониму("ТаблицаЮридическиеЛица");
		Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
		
		// Условия соединения с таблицей договоров
		Источник1.Соединения.Добавить(Источник2, "вогКоммерческиеСоглашения.ЮридическоеЛицо = ТаблицаДоговорыКонтрагентов.Владелец");
		Источник1.Соединения.Добавить(Источник2, "вогКоммерческиеСоглашения.Организация = ТаблицаДоговорыКонтрагентов.Организация");
		Источник1.Соединения.Добавить(Источник2, "вогКоммерческиеСоглашения.Владелец = ТаблицаЮридическиеЛица.Партнер");
		
		// Поля запроса
		Оператор1.ВыбираемыеПоля.Добавить("ТаблицаДоговорыКонтрагентов.вогДатаНачалаДействия");
		КолонкаПоля = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
		КолонкаПоля.Псевдоним = "ДатаДоговора";
		Оператор1.ВыбираемыеПоля.Добавить("ТаблицаДоговорыКонтрагентов.НомерДоговора");
		Оператор1.ВыбираемыеПоля.Добавить("ТаблицаДоговорыКонтрагентов.Владелец");
		КолонкаПоля = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
		КолонкаПоля.Псевдоним = "ЮридическоеЛицо";
		Оператор1.ВыбираемыеПоля.Добавить("ТаблицаДоговорыКонтрагентов.Ссылка");
		КолонкаПоля = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
		КолонкаПоля.Псевдоним = "Договор";
		
		// Отбор
		Оператор1.Отбор.Добавить("вогКоммерческиеСоглашения.Ссылка В (&МассивОбъектов)");
		// ++ VOG Солодов В.В. 06.08.2021 DEV-784
		Оператор1.Отбор.Добавить("ТаблицаДоговорыКонтрагентов.Ссылка В (&МассивОбъектов)");
		// -- VOG Солодов В.В. 06.08.2021 DEV-784
		
	КонецЕсли;
	
	Если Не Версия = 1 И ПоДоговорам Тогда
		
		// Дополнительные условия соединения с таблицей договоров
		Источник1.Соединения.Добавить(Источник2, "НЕ вогКоммерческиеСоглашения.ПометкаУдаления");
		Источник1.Соединения.Добавить(Источник2, "вогКоммерческиеСоглашения.НаправлениеДеятельности = &НаправлениеДеятельности");
		Источник1.Соединения.Добавить(Источник2, "НЕ вогКоммерческиеСоглашения.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован)");
		Источник1.Соединения.Добавить(Источник2, "НЕ вогКоммерческиеСоглашения.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласованКлиентом)");
		Источник1.Соединения.Добавить(Источник2, "НЕ вогКоммерческиеСоглашения.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт)");
		
	КонецЕсли;
	
	Для Каждого Соединение Из Источник1.Соединения Цикл
		Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	КонецЦикла;
	
	// Смена условия во втором запросе объединения
	Оператор2 				= ЗапросВыбора.Операторы.Добавить(Оператор1);
	Источник1 				= Оператор2.Источники.НайтиПоПсевдониму("вогКоммерческиеСоглашения");
	Соединение1 			= Источник1.Соединения[0];
	Соединение1.Условие 	= Новый ВыражениеСхемыЗапроса("вогКоммерческиеСоглашения.ЮридическоеЛицо = ЗНАЧЕНИЕ(Справочник.вогЮридическиеЛица.ПустаяСсылка)");
	
	// Поле Приоритет во втором запросе объединения
	Оператор2.ВыбираемыеПоля.Установить(1, Новый ВыражениеСхемыЗапроса("2"));
	
	////////////////////////////////////////////////////////////////////////////////
	
	ЗапросВыбора = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВТ_Соглашения.Ссылка КАК Ссылка,
	|	ВТ_Соглашения.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Соглашения.НомерДоговора КАК НомерДоговора,
	|	ВТ_Соглашения.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	ВТ_Соглашения.Договор КАК Договор
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	ВТ_Соглашения КАК ВТ_Соглашения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Соглашения.Приоритет,
	|	ВТ_Соглашения.Ссылка.ДатаНачалаДействия УБЫВ";
	
	ЗапросВыбора.УстановитьТекстЗапроса(ТекстЗапроса);
	
	////////////////////////////////////////////////////////////////////////////////
	
	ЗапросВыбора = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоммерческиеСоглашения.Ссылка КАК Ссылка,
	|	КоммерческиеСоглашения.Код КАК Код,
	|	КоммерческиеСоглашения.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.ДатаНачалаДействия < ВТ_Документы.ДатаДоговора
	|			ТОГДА ВТ_Документы.ДатаДоговора
	|		ИНАЧЕ КоммерческиеСоглашения.ДатаНачалаДействия
	|	КОНЕЦ КАК ДатаСоглашения,
	|	КоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	КоммерческиеСоглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	КоммерческиеСоглашения.Комментарий КАК Комментарий,
	|	КоммерческиеСоглашения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	КоммерческиеСоглашения.СпособДоставкиТовара КАК СпособДоставкиТовара,
	|	КоммерческиеСоглашения.ОтправкаЗаказаПоФормеНаЭлПочту КАК ОтправкаЗаказаПоФормеНаЭлПочту,
	|	КоммерческиеСоглашения.ОтправкаЗаказаЧерезEDI КАК ОтправкаЗаказаЧерезEDI,
	|	КоммерческиеСоглашения.ОтправкаЗаказаЧерезВ2В КАК ОтправкаЗаказаЧерезВ2В,
	|	КоммерческиеСоглашения.РазмерСкидкиПриОткрытииНовогоМагазина КАК РазмерСкидкиПриОткрытииНовогоМагазина,
	|	КоммерческиеСоглашения.РазмерСкидкиНаНовыйТовар КАК РазмерСкидкиНаНовыйТовар,
	|	КоммерческиеСоглашения.РазмерСкидкиНаРекламноДемонстрационныеМатериалы КАК РазмерСкидкиНаРекламноДемонстрационныеМатериалы,
	|	КоммерческиеСоглашения.РазмерСкидкиНаТоварПодлежащийВозврату КАК РазмерСкидкиНаТоварПодлежащийВозврату,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриОткрытииНовогоМагазина КАК ОтсрочкаОплатыПриОткрытииНовогоМагазина,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриЗаказеНовогоТовара КАК ОтсрочкаОплатыПриЗаказеНовогоТовара,
	|	КоммерческиеСоглашения.СрокНаправленияЗаявленияОВозврате КАК СрокНаправленияЗаявленияОВозврате,
	|	КоммерческиеСоглашения.ПроцентРеализованногоТовара КАК ПроцентРеализованногоТовара,
	|	КоммерческиеСоглашения.СрокРеализацииУказанногоПроцентаПоставленногоТовара КАК СрокРеализацииУказанногоПроцентаПоставленногоТовара,
	|	КоммерческиеСоглашения.РазмерШтрафаШоуРум КАК РазмерШтрафаШоуРум,
	|	КоммерческиеСоглашения.РазмерВыплатыПриРасторженииДоговора КАК РазмерВыплатыПриРасторженииДоговора,
	|	КоммерческиеСоглашения.СрокОплатыТовара КАК СрокОплатыТовара,
	|	КоммерческиеСоглашения.МаксимумДнейОтсрочки КАК МаксимумДнейОтсрочки,
	|	КоммерческиеСоглашения.ТестовыйПериодЭДО КАК ТестовыйПериодЭДО,
	|	КоммерческиеСоглашения.УслугаПоОрганизацииШоуРум КАК УслугаПоОрганизацииШоуРум,
	|	КоммерческиеСоглашения.ВыплачиваютсяПремии КАК ВыплачиваютсяПремии,
	|	КоммерческиеСоглашения.СрокиОтчетаОПродажах.Наименование КАК СрокиОтчетаОПродажах,
	|	КоммерческиеСоглашения.РекламноДемонстрационныеМатериалыПанели КАК РекламноДемонстрационныеМатериалыПанели,
	|	КоммерческиеСоглашения.ПолныйАвансовыйПлатежНаВесьТовар КАК ПолныйАвансовыйПлатежНаВесьТовар,
	|	КоммерческиеСоглашения.РазмерАвансаЗаПартиюТовара КАК РазмерАвансаЗаПартиюТовара,
	|	КоммерческиеСоглашения.ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара КАК ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара,
	|	КоммерческиеСоглашения.ОтсрочкаПлатежаНаВесьТовар КАК ОтсрочкаПлатежаНаВесьТовар,
	|	вогЮридическиеЛица.НаименованиеПолное КАК ПредставлениеКлиент,
	|	СпрОрганизации.Ссылка КАК Организация,
	|	СпрОрганизации.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СпрОрганизации.Наименование КАК ОрганизацияНаименование,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.КонтактноеЛицо) КАК ПредставлениеКонтактногоЛица,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.CRM_Должность) КАК ПредставлениеДолжностьКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.CRM_Должность.Родительный КАК ПредставлениеДолжностьКонтактногоЛицаРодительный,
	|	КонтактныеЛицаПартнеров.КонтактноеЛицо.Пол КАК ПолКонтактногоЛица,
	|	ФизическиеЛица.Наименование КАК РуководительПредставление,
	|	ФизическиеЛица.Пол КАК РуководительПол,
	|	ОтветственныеЛица.Должность КАК РуководительДолжностьПредставление,
	|	ЕСТЬNULL(ОтветственныеЛица.ПравоПодписиПоДоверенности, ЛОЖЬ) КАК ПравоПодписиПоДоверенности,
	|	ОтветственныеЛица.ОснованиеПраваПодписи КАК ОснованиеПраваПодписи,
	|	ИСТИНА КАК ИспользоватьПриложение1,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.СпособДоставкиТовара = ЗНАЧЕНИЕ(Перечисление.вогСпособыДоставкиТовара.ДоставкаТовараПоставщиком)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПриложение2,
	|	КоммерческиеСоглашения.УслугаПоОрганизацииШоуРум КАК ИспользоватьПриложение3,
	|	КоммерческиеСоглашения.ВыплачиваютсяПремии КАК ИспользоватьПриложение4,
	|	КоммерческиеСоглашения.ИспользоватьЭДО КАК ИспользоватьЭДО,
	|	КоммерческиеСоглашения.СпособОтправкиЗаказа КАК СпособОтправкиЗаказа,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	СпрОрганизации.ИНН + ""/"" + СпрОрганизации.КПП КАК ИННКПП,
	|	вогЮридическиеЛица.CRM_ИНН + ""/"" + вогЮридическиеЛица.CRM_КПП КАК ИННКППКлиента,
	|	вогЮридическиеЛица.CRM_ОГРН КАК ОГРНКлиента,
	|	СпрОрганизации.CRM_ОГРН КАК ОГРН,
	|	ВТ_Документы.Договор КАК Договор,
	|	вогЮридическиеЛица.Ссылка КАК Клиент,
	|	ВТ_Документы.Договор.вогДокументОснованиеПартнера КАК ДокументОснованиеПартнера,
	|	вогЮридическиеЛица.ОрганизационноПравоваяФорма.ЮрФизЛицо КАК ЮрФизЛицо,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.ОператорЭДО <> ЗНАЧЕНИЕ(Справочник.вогОператорыЭДО.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПриложение5,
	|	ВТ_Документы.Договор.вогОтветственноеЛицо КАК ОтветственноеЛицо,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.Номер КАК ДоверенностьНомер,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ДатаДокумента КАК ДоверенностьДатаДокумента,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС КАК ДоверенностьПериодДействияС,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо КАК ДоверенностьПериодДействияПо,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.Основание КАК ДоверенностьОснование,
	|	КоммерческиеСоглашения.ДоставкуВозвратаОсуществляетКлиент КАК ДоставкуВозвратаОсуществляетКлиент,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ КАК ОтсрочкаОплатыПриПоставкеТовараПодЗаказ,
	|	КоммерческиеСоглашения.НормаБоя КАК НормаБоя,
	|	КоммерческиеСоглашения.ОтчетныйПериодДляДопСоглашенияПоНормеБоя КАК ОтчетныйПериодДляДопСоглашенияПоНормеБоя
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК КоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|			ПО ВТ_Документы.ЮридическоеЛицо = вогЮридическиеЛица.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК КонтактныеЛицаПартнеров
	|			ПО ВТ_Документы.Договор.вогПодписантПартнера = КонтактныеЛицаПартнеров.КонтактноеЛицо
	|				И ВТ_Документы.ЮридическоеЛицо = КонтактныеЛицаПартнеров.ОбъектСвязи
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогКонтактныеЛицаПодписанты.СрезПоследних КАК вогКонтактныеЛицаПодписантыСрезПоследних
	|			ПО ВТ_Документы.ЮридическоеЛицо = вогКонтактныеЛицаПодписантыСрезПоследних.ЮридическоеЛицо
	|				И ВТ_Документы.Договор.вогПодписантПартнера = вогКонтактныеЛицаПодписантыСрезПоследних.КонтактноеЛицо
	|		ПО КоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СпрОрганизации
	|		ПО КоммерческиеСоглашения.Организация = СпрОрганизации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ПО ОтветственныеЛица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ПО КоммерческиеСоглашения.ОтветственноеЛицо = ОтветственныеЛица.Ссылка
	|			И КоммерческиеСоглашения.Организация = ОтветственныеЛица.Владелец";
	
	ЗапросВыбора.УстановитьТекстЗапроса(ТекстЗапроса);
	Оператор 		= ЗапросВыбора.Операторы.Получить(0);
	
	ОсновнойИсточник 	= Оператор.Источники.НайтиПоПсевдониму("КоммерческиеСоглашения");
	Источник1 			= Оператор.Источники.НайтиПоПсевдониму("ВТ_Документы");
	Источник2 			= Оператор.Источники.НайтиПоПсевдониму("вогКонтактныеЛицаПодписантыСрезПоследних");
	
	Если Версия = 1 Тогда
		
		Оператор.ВыбираемыеПоля.Добавить("КоммерческиеСоглашения.РазмерСкидкиНаПроведениеКоммерческойАкции");
		
		// Дополнительные условия соединения с таблицей Контактные Лица Подписанты
		Источник1.Соединения.Добавить(Источник2, "ВТ_Документы.Ссылка.Дата >= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС	
		|						И ВТ_Документы.Ссылка.Дата <= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо
		|					ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.Основание = ЗНАЧЕНИЕ(Перечисление.ВариантыОснованийПодписанта.Устава)");
		
	Иначе
		
		// Дополнительная таблица Ответственные Лица Организаций
		Источник3 = Оператор.Источники.Добавить("Справочник.вогОтветственныеЛицаОрганизаций", "вогОтветственныеЛицаОрганизаций");
		ОсновнойИсточник.Соединения.Удалить(ОсновнойИсточник.Соединения.Количество() - 1);
		
		// Условия соединения с таблицей Ответственные Лица Организаций
		Источник1.Соединения.Добавить(Источник3, "ВТ_Документы.Договор.Организация = вогОтветственныеЛицаОрганизаций.Владелец");
		Источник1.Соединения.Добавить(Источник3, """Генеральный директор"" = вогОтветственныеЛицаОрганизаций.Должность");
		Источник1.Соединения.Добавить(Источник3, "ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) = вогОтветственныеЛицаОрганизаций.ДатаОкончания");
		
		// Дополнительное условие соединения с таблицей Контактные Лица Подписанты
		Источник1.Соединения.Добавить(Источник2, "ВТ_Документы.Ссылка.Дата >= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС
		|						И (ВТ_Документы.Ссылка.Дата <= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо
		|							ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|					ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.Основание = ЗНАЧЕНИЕ(Перечисление.ВариантыОснованийПодписанта.Устава)");
		
		// Дополнительные поля
		Оператор.ВыбираемыеПоля.Добавить("0");
		КолонкаПоля = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
		КолонкаПоля.Псевдоним = "РазмерСкидкиНаПроведениеКоммерческойАкции";
		
		Оператор.ВыбираемыеПоля.Добавить("КонтактныеЛицаПартнеров.КонтактноеЛицо.НеСклонятьФамилию");
		КолонкаПоля = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
		КолонкаПоля.Псевдоним = "НеСклонятьФамилию";
		
		Оператор.ВыбираемыеПоля.Добавить(
		// ++ VOG Солодов В.В. 29.06.2021 DEV-91
		"	ВЫБОР
		|		КОГДА КоммерческиеСоглашения.ЕстьВозвратТовара
		|			И КоммерческиеСоглашения.ЕстьПоставкаТовараПодЗаказ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ");
		// До изменения
		//"	ВЫБОР
		//|		КОГДА КоммерческиеСоглашения.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ <> 0
		//|			ИЛИ КоммерческиеСоглашения.ПроцентРеализованногоТовара <> 0
		//|			ТОГДА ИСТИНА
		//|		ИНАЧЕ ЛОЖЬ
		//|	КОНЕЦ");
		// -- VOG Солодов В.В. 29.06.2021 DEV-91
		КолонкаПоля = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
		КолонкаПоля.Псевдоним = "ИспользоватьПриложение6";
		
		Оператор.ВыбираемыеПоля.Добавить("вогОтветственныеЛицаОрганизаций.ФизическоеЛицо");
		КолонкаПоля = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
		КолонкаПоля.Псевдоним = "ГенеральныйДиректор";
		
		Оператор.ВыбираемыеПоля.Добавить("КоммерческиеСоглашения.ПремияВычетСтоимостиПоТранзПоставке");
		КолонкаПоля = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
		КолонкаПоля.Псевдоним = "ПремияВычетСтоимостиПоТранзПоставке";
		
		Оператор.ВыбираемыеПоля.Добавить("КоммерческиеСоглашения.СтоимостьОбразцовВключенаВСтоимостьТовара");
		КолонкаПоля = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
		КолонкаПоля.Псевдоним = "СтоимостьОбразцовВключенаВСтоимостьТовара";
		
		Оператор.ВыбираемыеПоля.Добавить("КоммерческиеСоглашения.ЕстьДополнительноеСоглашениеПоНормеБоя");
		КолонкаПоля = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
		КолонкаПоля.Псевдоним = "ЕстьДополнительноеСоглашениеПоНормеБоя";
		
		Оператор.ВыбираемыеПоля.Добавить("КоммерческиеСоглашения.ЕстьВозвратТовара");
		КолонкаПоля = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
		КолонкаПоля.Псевдоним = "ЕстьВозвратТовара";
		
		Оператор.ВыбираемыеПоля.Добавить("КоммерческиеСоглашения.ПоставщикПроизводитВозвратНеликвидногоТовара");
		КолонкаПоля = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
		КолонкаПоля.Псевдоним = "ПоставщикПроизводитВозвратНеликвидногоТовара";
		
		Оператор.ВыбираемыеПоля.Добавить("КоммерческиеСоглашения.ЕстьПоставкаТовараПодЗаказ");
		КолонкаПоля = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
		КолонкаПоля.Псевдоним = "ЕстьПоставкаТовараПодЗаказ";
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ЗапросВыбора = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(вогТорговыеТочкиКонтактнаяИнформация.Ссылка) КАК НаименованиеТорговойТочки,
	|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	вогТорговыеТочкиКонтактнаяИнформация.Представление КАК АдресДоставки,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.Номер КАК НомерСоглашения,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия КАК ДатаСоглашения,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.Договор КАК Договор,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита КАК МинимальнаяСтоимостьПартии
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.АдресаДоставки КАК вогКоммерческиеСоглашенияАдресаДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.Ссылка = ВТ_Документы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = вогТорговыеТочкиКонтактнаяИнформация.Ссылка
	|			И (вогТорговыеТочкиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресТорговойТочки))
	|			И (НЕ вогТорговыеТочкиКонтактнаяИнформация.Представление = """")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = CRM_ОбъектыЗначенийКлассификаторов.Объект
	|			И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатораМинСтоимостьТовара)
	|			И вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.НаправлениеДеятельности = CRM_ОбъектыЗначенийКлассификаторов.Аналитика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка),
	|	вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка,
	|	вогРаспределительныеЦентрыКонтактнаяИнформация.Представление,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.Номер,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия,
	|	ВТ_Документы.ДатаДоговора,
	|	ВТ_Документы.НомерДоговора,
	|	ВТ_Документы.Договор,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.АдресаДоставки КАК вогКоммерческиеСоглашенияАдресаДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.Ссылка = ВТ_Документы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогРаспределительныеЦентры.КонтактнаяИнформация КАК вогРаспределительныеЦентрыКонтактнаяИнформация
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка
	|			И (вогРаспределительныеЦентрыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресРаспределительногоЦентра))
	|			И (НЕ вогРаспределительныеЦентрыКонтактнаяИнформация.Представление = """")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = CRM_ОбъектыЗначенийКлассификаторов.Объект
	|			И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатораМинСтоимостьТовара)
	|ИТОГИ
	|	МАКСИМУМ(НомерСоглашения),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(ДатаДоговора)
	|ПО
	|	НомерДоговора";
	
	ЗапросВыбора.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если Версия = 1 Тогда
		
		Для Индекс = 0 По 1 Цикл
			
			Оператор = ЗапросВыбора.Операторы.Получить(Индекс);
			
			// Дополнительные поля
			Оператор.ВыбираемыеПоля.Добавить("ВЫБОР
			|		КОГДА ВТ_Документы.ДатаДоговора > вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия
			|			ТОГДА ВТ_Документы.ДатаДоговора
			|		ИНАЧЕ вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия
			|	КОНЕЦ");
			
			Если Индекс = 0 Тогда
				КолонкаПоля = ЗапросВыбора.Колонки.Получить(ЗапросВыбора.Колонки.Количество() - 1);
				КолонкаПоля.Псевдоним = "ДатаПриложенияАдресаДоставки";
			КонецЕсли;
			
		КонецЦикла;
		
		// Дополнительные итоги
		ЗапросВыбора.ВыраженияИтогов.Добавить("МАКСИМУМ(ДатаПриложенияАдресаДоставки)", "ДатаПриложенияАдресаДоставки");
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ЗапросВыбора = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	вогКоммерческиеСоглашенияДокументыЭДО.ВидДокумента КАК ВидДокумента,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.Номер КАК НомерСоглашения,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ДатаНачалаДействия КАК ДатаСоглашения,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ОператорЭДО КАК ОператорЭДО,
	|	ВТ_Документы.Договор КАК Договор
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.ДокументыЭДО КАК вогКоммерческиеСоглашенияДокументыЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияДокументыЭДО.Ссылка = ВТ_Документы.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(НомерСоглашения),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(ОператорЭДО)
	|ПО
	|	НомерДоговора";
	
	ЗапросВыбора.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если Не Версия = 1 Тогда
		// Сортировка по порядку документа ЭДО
		ЗапросВыбора.Порядок.Добавить("вогКоммерческиеСоглашенияДокументыЭДО.ВидДокумента.Порядок");
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	ЗапросВыбора = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.Договор КАК Договор,
	|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаСоглашения,
	|	вогКоммерческиеСоглашения.Номер КАК НомерСоглашения
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(НомерСоглашения)
	|ПО
	|	НомерДоговора";
	
	ЗапросВыбора.УстановитьТекстЗапроса(ТекстЗапроса);
	
	////////////////////////////////////////////////////////////////////////////////
	
	Если Не Версия = 1 Тогда
		
		ЗапросВыбора = Схема.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
		ЗапросВыбора.УстановитьТекстЗапроса(ТекстЗапроса);
		
	КонецЕсли;
	
	Возврат Схема.ПолучитьТекстЗапроса();
	
КонецФункции

Процедура ОпределитьПараметрыЗапроса(Запрос, ПараметрыЗапроса)
	
	Перем НаправлениеДеятельности;
	
	ПараметрыЗапроса.Свойство("НаправлениеДеятельности", НаправлениеДеятельности);
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	
	Для Каждого ОписаниеПараметра Из ОписаниеПараметровЗапроса Цикл
		
		Если ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.вогКоммерческиеСоглашения")
			И НРег(ОписаниеПараметра.Имя) = НРег("МассивСоглашений") Тогда
			
			Запрос.УстановитьПараметр(ОписаниеПараметра.Имя, ПараметрыЗапроса.МассивСоглашений);
			
		// ++ VOG Солодов В.В. 06.08.2021 DEV-784
		ИначеЕсли ОписаниеПараметра.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов"))
			Или ОписаниеПараметра.ТипЗначения.СодержитТип(Тип("СправочникСсылка.вогКоммерческиеСоглашения")) Тогда
		// До изменения
		//ИначеЕсли ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов")
		//	Или ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.вогКоммерческиеСоглашения") Тогда
		// -- VOG Солодов В.В. 06.08.2021 DEV-784
			
			Запрос.УстановитьПараметр(ОписаниеПараметра.Имя, ПараметрыЗапроса.МассивОбъектов);
			
		ИначеЕсли ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности") Тогда
			
			Если НаправлениеДеятельности = Неопределено Тогда
				ТекущийПользователь 	= Пользователи.ТекущийПользователь();
				НаправлениеДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь,"CRM_НаправлениеДеятельности");
			КонецЕсли;
			
			Запрос.УстановитьПараметр(ОписаниеПараметра.Имя, НаправлениеДеятельности);
			
		ИначеЕсли ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.CRM_ЗначенияКлассификаторов")
			И НРег(ОписаниеПараметра.Имя) = НРег("ЗначениеКлассификатораМинСтоимостьТовара") Тогда
			
			ЗначениеКлассификатора_УИД 	= Новый УникальныйИдентификатор("fff7455d-cfd9-11e8-a684-005056bc3fe8");
			ЗначениеКлассификатора 		= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(ЗначениеКлассификатора_УИД);
			
			Запрос.УстановитьПараметр(ОписаниеПараметра.Имя, ЗначениеКлассификатора);
			
		ИначеЕсли ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.вогСтатусыДоговоровКоммерческихСоглашений") Тогда
			
			СписокСтатусовДляИсключения = Новый Массив;
			СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт);
			СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован);
			СписокСтатусовДляИсключения.Добавить(Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласованКлиентом);
			
			Запрос.УстановитьПараметр(ОписаниеПараметра.Имя, СписокСтатусовДляИсключения);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьПараметрыДаннымиПечати(Знач МассивОбъектов, Знач НаправлениеДеятельности, Знач ПараметрыПечати) Экспорт
	
	ДанныеКоммерческогоСоглашения 	= Неопределено;
	КоммерческоеСоглашение 			= Неопределено;
	МассивОбъектовПриложения 		= Новый Массив;
	МассивСоглашений 				= Новый Массив;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		
		ДанныеКоммерческогоСоглашения 	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыПечати, "ДанныеКоммерческогоСоглашения");
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеКоммерческогоСоглашения) = Тип("Структура") Тогда
		
		КоммерческоеСоглашение 			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКоммерческогоСоглашения, "Ссылка");
		Версия 							= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКоммерческогоСоглашения, "Версия", 0);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КоммерческоеСоглашение) Тогда
		
		Если Версия <> 1 Тогда
			
			МассивОбъектовПриложения 	= МассивОбъектов;
			МассивСоглашений 			= Новый Массив;
			МассивСоглашений.Добавить(КоммерческоеСоглашение);
			
		КонецЕсли;
		
	Иначе
		
		МассивОбъектовПриложения 	= Новый Массив;
		МассивСоглашений 			= Новый Массив;
		
		СписокСоглашений = ПолучитьКоммерческиеСоглашения(МассивОбъектов, НаправлениеДеятельности);
		
		Выборка = СписокСоглашений.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Версия <> 1 тогда
				МассивОбъектовПриложения.Добавить(Выборка.Договор);
				МассивСоглашений.Добавить(Выборка.Соглашение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеПечатиПриложений 	= ПолучитьДанныеДляПечатнойФормыПриложений(МассивОбъектовПриложения, МассивСоглашений);
	ДанныеПечатиПриложение4 = ПолучитьДанныеДляПечатнойФормыПриложение4v2(МассивОбъектовПриложения, МассивСоглашений);
	
	РезультатыЗапросаДанных = Новый Структура;
	РезультатыЗапросаДанных.Вставить("ДанныеПриложений", 	ДанныеПечатиПриложений);
	РезультатыЗапросаДанных.Вставить("ДанныеПриложения4", 	ДанныеПечатиПриложение4);
	
	ПараметрыПечати.Вставить("РезультатыЗапросаДанных", 	РезультатыЗапросаДанных);
	
КонецПроцедуры
// -- VOG Солодов В.В. 25.06.2021 DEV-69

#КонецОбласти

Процедура НастроитьМакетВерсия1(ДанныеПечати, Макет)
	
	Если Не ДанныеПечати.ОтправкаЗаказаЧерезEDI Тогда
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант2");
	КонецЕсли;
		
	Если Не ДанныеПечати.ОтправкаЗаказаЧерезВ2В Тогда
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант3");
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант4");
	КонецЕсли;
	
	Если ДанныеПечати.СпособДоставкиТовара = Перечисления.вогСпособыДоставкиТовара.ДоставкаТовараПоставщиком Тогда
		УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант2");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант10");
		// +++ VOG Кулаков П.Л. 16.03.2020 CRM-455
		УдалитьОбластиМакета(Макет, "Раздел4", "Раздел4_Вариант1");
		// --- VOG Кулаков П.Л.
	ИначеЕсли ДанныеПечати.СпособДоставкиТовара = Перечисления.вогСпособыДоставкиТовара.СамовывозТовара Тогда
		УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант1");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант1");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант2");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант4");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант5");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант6");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант7");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант8");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант9");
		// +++ VOG Кулаков П.Л. 16.03.2020 CRM-455
		УдалитьОбластиМакета(Макет, "Раздел4", "Раздел4_Вариант2");
		// --- VOG Кулаков П.Л.
	КонецЕсли;
	
	// Рекламно-демонстрационные материалы (Образцы)
	Если ДанныеПечати.РазмерСкидкиНаРекламноДемонстрационныеМатериалы = 0 Тогда
		УдалитьОбластиМакета(Макет, "Раздел7", "Раздел7_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел7", "Раздел7_Пункт2");
	КонецЕсли;
	
	// Рекламно-демонстрационные материалы (Плитка)
	Если Не ДанныеПечати.РекламноДемонстрационныеМатериалыПанели Тогда
		УдалитьОбластиМакета(Макет, "Раздел8", "Раздел8_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел8", "Раздел8_Пункт2");
	КонецЕсли;
	
	// Услуга по организации шоу-рум
	Если Не ДанныеПечати.УслугаПоОрганизацииШоуРум Тогда
		УдалитьОбластиМакета(Макет, "Раздел9", "Раздел9_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел9", "Раздел9_Пункт2");
		УдалитьОбластиМакета(Макет, "Раздел9", "Раздел9_Пункт3");
		УдалитьОбластиМакета(Макет, "Раздел9", "Раздел9_Пункт4");
		УдалитьОбластиМакета(Макет, "Раздел9", "Раздел9_Пункт5");
		УдалитьОбластиМакета(Макет, "Раздел9", "Раздел9_Пункт6");
		УдалитьОбластиМакета(Макет, "Раздел9", "Раздел9_Пункт7");
		УдалитьОбластиМакета(Макет, "Раздел9", "Раздел9_Пункт8");
	КонецЕсли;
	
	// Премии
	Если Не ДанныеПечати.ВыплачиваютсяПремии Тогда
		УдалитьОбластиМакета(Макет, "Раздел10", "Раздел10_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел10", "Раздел10_Пункт2");
		УдалитьОбластиМакета(Макет, "Раздел10", "Раздел10_Пункт3");
		УдалитьОбластиМакета(Макет, "Раздел10", "Раздел10_Пункт4");
		УдалитьОбластиМакета(Макет, "Раздел10", "Раздел10_Пункт5");
		УдалитьОбластиМакета(Макет, "Раздел10", "Раздел10_Пункт6");
		УдалитьОбластиМакета(Макет, "Раздел10", "Раздел10_Пункт7");
		УдалитьОбластиМакета(Макет, "Раздел10", "Раздел10_Пункт8");
	КонецЕсли;
	
	// Скидки
	Если ДанныеПечати.РазмерСкидкиНаПроведениеКоммерческойАкции = 0 Тогда
		УдалитьОбластиМакета(Макет, "Раздел11", "Раздел11_Вариант1");
	КонецЕсли;
	
	Если ДанныеПечати.РазмерСкидкиПриОткрытииНовогоМагазина = 0 Тогда
		УдалитьОбластиМакета(Макет, "Раздел11", "Раздел11_Вариант2");
	КонецЕсли;
	
	Если ДанныеПечати.РазмерСкидкиНаНовыйТовар = 0 Тогда
		УдалитьОбластиМакета(Макет, "Раздел11", "Раздел11_Вариант3");
	КонецЕсли;
	
	// Отсрочка платежа
	Если ДанныеПечати.ПолныйАвансовыйПлатежНаВесьТовар Тогда                 		//п.1
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант2");
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант3");
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант4");
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант5");
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант6");
		// +++ VOG Кулаков П.Л. 12.03.2020 CRM-443
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант7");
		// --- VOG Кулаков П.Л.
	Иначе
		//Частичная оплата и отсрочка на неоплаченную часть товара		
		Если ДанныеПечати.РазмерАвансаЗаПартиюТовара <> 0
			И ДанныеПечати.ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара <> 0 Тогда      //п.2
			
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант1");
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант3");			
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант4");
			
		//Отсрочка оплаты на весь поставляемый товар	
		ИначеЕсли ДанныеПечати.ОтсрочкаПлатежаНаВесьТовар <> 0 Тогда				//п.4
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант1");
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант2");
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант3");
			
		// Оплата после реализации товара	
		ИначеЕсли ЗначениеЗаполнено(ДанныеПечати.СрокиОтчетаОПродажах) Тогда		//п.3
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант1");
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант2");
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант4");
			// +++ VOG Кулаков П.Л. 12.03.2020 CRM-443
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант7");
			// --- VOG Кулаков П.Л.
			
		Иначе	
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант1");			
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант2");
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант3");
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант4");
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант5");
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант6");
		КонецЕсли;
		
		// +++ VOG Кулаков П.Л. 12.03.2020 CRM-442
		Если ДанныеПечати.ОтсрочкаОплатыПриОткрытииНовогоМагазина = 0 Тогда
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант5");
		КонецЕсли;
		
		Если ДанныеПечати.ОтсрочкаОплатыПриЗаказеНовогоТовара = 0 Тогда
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант6");
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		
	КонецЕсли;
	
	//// Оплата после реализации товара
	//Если Не ЗначениеЗаполнено(ДанныеПечати.СрокиОтчетаОПродажах) Тогда				//п.3
	//	УдалитьОбластиМакета(Макет, "Раздел11", "Раздел11_Вариант3");
	//КонецЕсли;
	
	// Условия возврата товара
	Если Не ЗначениеЗаполнено(ДанныеПечати.СрокНаправленияЗаявленияОВозврате)
		И Не ЗначениеЗаполнено(ДанныеПечати.ПроцентРеализованногоТовара) Тогда
		
		//УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант1");
		//УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант2");
		
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант1");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант2");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант4");
		УдалитьОбластиМакета(Макет, "Раздел14", "Раздел14_Вариант1");
		УдалитьОбластиМакета(Макет, "Раздел14", "Раздел14_Вариант2");
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеПечати.СрокНаправленияЗаявленияОВозврате) Тогда
		//УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант1");
		//УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант2");
		
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант1_Пункт1");
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеПечати.ПроцентРеализованногоТовара) Тогда
		//УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант1");
		//УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант2");
		
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант1_Пункт2");
	//Иначе
	//	УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант1");
	//	УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант2");
	КонецЕсли;
	
	Если ДанныеПечати.ДоставкуВозвратаОсуществляетКлиент тогда    
		УдалитьОбластиМакета(Макет, "Раздел14", "Раздел14_Вариант2");
		УдалитьОбластиМакета(Макет, "Раздел14", "Раздел14_Вариант2_Пункт1");
	КонецЕсли;	
	
	Если ДанныеПечати.НаправлениеДеятельности <> Справочники.НаправленияДеятельности.Плитка Тогда
		УдалитьОбластиМакета(Макет, "Раздел15", "Раздел15_Вариант1");
		УдалитьОбластиМакета(Макет, "Раздел15", "Раздел15_Вариант2");
	Иначе	
		УдалитьОбластиМакета(Макет, "Раздел15", "Раздел15_Вариант2");
	КонецЕсли;
	
	Если Не ДанныеПечати.ИспользоватьЭДО Тогда
		УдалитьОбластиМакета(Макет, "Раздел16", "Раздел16_Пункт1");
	КонецЕсли;
	
	// +++ VOG Кулаков П.Л. 12.03.2020 CRM-443
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаОкончанияДействияПредставление) Тогда
		УдалитьОбластиМакета(Макет, "Раздел16", "Раздел18_Вариант3");
	Иначе
		УдалитьОбластиМакета(Макет, "Раздел16", "Раздел18_Вариант2");
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	// +++ VOG Кулаков П.Л. 23.03.2020 CRM-497
	Если ДанныеПечати.РазмерВыплатыПриРасторженииДоговора = 0 тогда
    	УдалитьОбластиМакета(Макет, "Раздел17", "Раздел17_Вариант1");
    	УдалитьОбластиМакета(Макет, "Раздел17", "Раздел17_Вариант2");
    	УдалитьОбластиМакета(Макет, "Раздел17", "Раздел17_Вариант3");
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры

// ++ VOG Солодов В.В. 27.12.2019 
// До изменения
//#КонецЕсли
// -- VOG Солодов В.В. 27.12.2019
// -- VOG Солодов В.В. 02.09.2019

// ++ VOG Ульянов И.В. 18.12.2019 CRM-41
#Область Версия1

Процедура СформироватьПечатнуюФормуКоммерческоеСоглашениеВерсия1(ТабличныйДокумент, МассивОбъектов, ОбъектыПечати, НомерПриложения, ПоказыватьПодписи)
	
	// ++ VOG Солодов В.В. 28.06.2021 DEV-69
	ПараметрыПолученияДанных = ПараметрыПолученияДанных();
	ПараметрыПолученияДанных.МассивОбъектов = МассивОбъектов;
	ПараметрыПолученияДанных.Версия 		= 1;
	
	Результат = ПолучитьДанныеДляПечатнойФормыКоммерческоеСоглашение(ПараметрыПолученияДанных);
	// До изменения
	//Результат = ПолучитьДанныеДляПечатнойФормыКоммерческоеСоглашениеВерсия1(МассивОбъектов);
	// -- VOG Солодов В.В. 28.06.2021 DEV-69
	
	СтруктураДанных = Новый Структура;
	
	Для Каждого Колонка Из Результат[3].Колонки Цикл
		СтруктураДанных.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ДанныеПечати = Результат[3].Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		ПоследнийНомер = 0;
		
		НомераПриложений = Новый Структура;
		НомераПриложений.Вставить("НомерПриложение1");
		НомераПриложений.Вставить("НомерПриложение2");
		НомераПриложений.Вставить("НомерПриложение3");
		НомераПриложений.Вставить("НомерПриложение4");
		НомераПриложений.Вставить("НомерПриложение5");
		
		Для Счетчик = 1 по 5 цикл
			Если ДанныеПечати["ИспользоватьПриложение"+Строка(Счетчик)] Тогда
				ПоследнийНомер = ПоследнийНомер + 1;
				НомераПриложений["НомерПриложение"+Строка(Счетчик)] = Строка(ПоследнийНомер);
			Иначе
				НомераПриложений["НомерПриложение"+Строка(Счетчик)] = "";
			КонецЕсли;			
		КонецЦикла;	
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		СтруктураДанныхПечати = СформироватьСтруктуруДанныхПечатиВерсия1(ДанныеПечати, СтруктураДанных);
		
		Если Не ПроверитьЗаполнениеШапки(СтруктураДанныхПечати) Тогда
			Прервать;
		КонецЕсли;
		
		Если ПоказыватьПодписи Тогда
			СтруктураКартинок = РегистрыСведений.вогПечатиИПодписи.ПолучитьПодписьПечать(ДанныеПечати.Организация, ДанныеПечати.ОтветственноеЛицо);
		КонецЕсли;
		
		ЗаполнитьТабличныйДокументКоммерческоеСоглашениеВерсия1(ТабличныйДокумент,	
			СтруктураДанныхПечати, 
			ПоказыватьПодписи, 
			НомераПриложений, 
			СтруктураКартинок);
		
		// Приложения к соглашению
		ДанныеПечатиАдресовДоставки = Результат[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ДанныеПечатиДокументовЭДО 	= Результат[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ДанныеПечатиПриложений 		= Результат[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ЗаполнитьПриложение(ТабличныйДокумент,
			СтруктураДанныхПечати,
			ДанныеПечати.ИспользоватьПриложение1,
			"Приложение1",
			ДанныеПечатиПриложений,
			НомераПриложений["НомерПриложение1"],
			ПоказыватьПодписи,
			СтруктураКартинок);
			
		ЗаполнитьПриложение(ТабличныйДокумент,
			СтруктураДанныхПечати,
			ДанныеПечати.ИспользоватьПриложение2,
			"Приложение2",
			ДанныеПечатиАдресовДоставки,
			НомераПриложений["НомерПриложение2"],
			ПоказыватьПодписи,
			СтруктураКартинок);
		
		Если ДанныеПечати.ИспользоватьПриложение4 тогда
			
			
			
			РезультатПриложение4 = ПолучитьДанныеДляПечатнойФормыПриложение4(МассивОбъектов);
			ДанныеПечатиПриложение4 = РезультатПриложение4.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ЗаполнитьПриложение4(
				ТабличныйДокумент,
				СтруктураДанныхПечати,
				Истина,
				"Приложение4",
				ДанныеПечатиПриложение4,
				НомераПриложений["НомерПриложение4"],
				ПоказыватьПодписи,
				СтруктураКартинок);
			
		КонецЕсли;
		
		ЗаполнитьПриложение(
			ТабличныйДокумент,
			СтруктураДанныхПечати,
			ДанныеПечати.ИспользоватьПриложение5,
			"Приложение5",
			ДанныеПечатиДокументовЭДО,
			НомераПриложений["НомерПриложение5"],
			ПоказыватьПодписи,
			СтруктураКартинок);
		
	КонецЦикла;

КонецПроцедуры	

Процедура ЗаполнитьТабличныйДокументКоммерческоеСоглашениеВерсия1(ТабличныйДокумент, ДанныеПечати, ПоказыватьПодписи = Ложь, НомераПриложений, СтруктураКартинок = Неопределено) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.вогКоммерческиеСоглашения.ПФ_MXL_КоммерческоеСоглашениеВерсия1");
	
	НастроитьМакетВерсия1(ДанныеПечати, Макет);
	
	ТаблицаОбластейКВыводу 		= Новый ТаблицаЗначений;
	ТаблицаОбластейКВыводу.Колонки.Добавить("Область");
	ТаблицаОбластейКВыводу.Колонки.Добавить("ЭтоРаздел");
	ТаблицаОбластейКВыводу.Колонки.Добавить("ИмяОбласти");
	
	ОбластьШапка 				= Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
	// +++ VOG Кулаков П.Л. 19.08.2020 CRM-848
	Если ОбластьШапка.Параметры.ДатаСоглашения < ДанныеПечати.ДатаНачалаДействия Тогда
		ОбластьШапка.Параметры.ДатаСоглашения = ДанныеПечати.ДатаНачалаДействия;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	ОбластьТаблицаПодвал 		= Макет.ПолучитьОбласть("ТаблицаПодвал");
	СтруктураОбластей 			= СформироватьСтруктуруОбластейВерсия1(ДанныеПечати, Макет);
	
	//НомерПункта62 = "";
	Для Каждого ИмяОбласти Из СтруктураОбластей Цикл
		
		Область = Макет.ПолучитьОбласть(ИмяОбласти.Ключ);
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.Заполнить(НомераПриложений);
		
		// Заполнение номера пункта
		УИД = Новый УникальныйИдентификатор;
		
		СтруктураПараметра = Новый Структура;
		СтруктураПараметра.Вставить("НомерПункта", УИД);
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметра, Область.Параметры);
		
		Если СтруктураПараметра.НомерПункта <> УИД Тогда
			Область.Параметры.НомерПункта = ИмяОбласти.Значение;
		КонецЕсли;
		//
		//Если ИмяОбласти.Ключ = "Раздел2_Пункт6_ПодПункт2" тогда
		//	НомерПункта62 = ИмяОбласти.Значение; 	
		//КонецЕсли;
		//Если ИмяОбласти.Ключ = "Раздел2_Пункт7" тогда
		//	Область.Параметры.Пункт62 = НомерПункта62; 	
		//КонецЕсли;
		НоваяСтрокаКВыводу = ТаблицаОбластейКВыводу.Добавить();
		НоваяСтрокаКВыводу.Область 			= Область;
		НоваяСтрокаКВыводу.ИмяОбласти 		= ИмяОбласти.Ключ;
		
		Если СтрНайти(ИмяОбласти.Ключ, "Пункт") = 0 Тогда
			НоваяСтрокаКВыводу.ЭтоРаздел 	= Истина;
		Иначе
			НоваяСтрокаКВыводу.ЭтоРаздел 	= Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Вывод документа
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьПодписи2 = Макет.ПолучитьОбласть("Подписи2");
	ОбластьПустая = Макет.ПолучитьОбласть("ОбластьПустая");
	ПоследняяОбласть = Неопределено;
	
	ОбластьРазрыв 			= Макет.ПолучитьОбласть("Разрыв");
	нОб = ТаблицаОбластейКВыводу.Добавить();
	нОб.Область = ОбластьРазрыв;
	нОб.ЭтоРаздел = Истина;
	нОб.ИмяОбласти = "Разрыв";
	
	Если ДанныеПечати.ИспользоватьПриложение1 Тогда
		ОбластьПриложение1 	= Макет.ПолучитьОбласть("Приложение1");
		ОбластьПриложение1.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение1;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение1";
	КонецЕсли;
	
	Если ДанныеПечати.ИспользоватьПриложение2 Тогда
		ОбластьПриложение2 	= Макет.ПолучитьОбласть("Приложение2");
		ОбластьПриложение2.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение2;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение2";
	КонецЕсли;
	
	Если ДанныеПечати.ИспользоватьПриложение3 Тогда
		ОбластьПриложение3 	= Макет.ПолучитьОбласть("Приложение3");
		ОбластьПриложение3.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение3;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение3";
	КонецЕсли;
	
	Если ДанныеПечати.ИспользоватьПриложение4 Тогда
		ОбластьПриложение4 	= Макет.ПолучитьОбласть("Приложение4");
		ОбластьПриложение4.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение4;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение4";
	КонецЕсли;
	
	Если ДанныеПечати.ИспользоватьПриложение5 Тогда
		ОбластьПриложение5 	= Макет.ПолучитьОбласть("Приложение5");
		ОбластьПриложение5.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение5;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение5";
	КонецЕсли;
	
	ОбластьРазрыв 			= Макет.ПолучитьОбласть("Разрыв");
	нОб = ТаблицаОбластейКВыводу.Добавить();
	нОб.Область = ОбластьРазрыв;
	нОб.ЭтоРаздел = Истина;
	нОб.ИмяОбласти = "Разрыв";
	
	ОбластьПодписи 			= Макет.ПолучитьОбласть("Подписи");
	ОбластьПодписи.Параметры.Заполнить(ДанныеПечати);
	
	Если ПоказыватьПодписи Тогда
		Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
			ОбластьПодписи.Рисунки["ПодписиКартинкаПодпись"].Картинка = СтруктураКартинок.Подпись;
		КонецЕсли;
		Если ТипЗнч(СтруктураКартинок.Печать) = Тип("Картинка") тогда
			ОбластьПодписи.Рисунки["ПодписиКартинкаПечать"].Картинка = СтруктураКартинок.Печать;
		КонецЕсли;
	КонецЕсли;
	
	нОб = ТаблицаОбластейКВыводу.Добавить();
	нОб.Область = ОбластьПодписи;
	нОб.ЭтоРаздел = Истина;
	нОб.ИмяОбласти = "Подписи";
	
	
	Для Каждого СтрокаОбласть Из ТаблицаОбластейКВыводу Цикл
		
		МассивВыводимыхОбластей = Новый Массив;
		МассивВыводимыхОбластей.Добавить(СтрокаОбласть.Область);
		МассивВыводимыхОбластей.Добавить(ОбластьПодписи2);
		
		Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			
			МассивВыводимыхОбластей = Новый Массив;
			МассивВыводимыхОбластей.Добавить(ОбластьПодписи2);
			
			Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				ТабличныйДокумент.УдалитьОбласть(ПоследняяОбласть);
				
				МассивВыводимыхОбластей.Добавить(ОбластьПустая);
				//МассивВыводимыхОбластей.Добавить(ОбластьПодписи);
				
				Пока ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
					ТабличныйДокумент.Вывести(ОбластьПустая);
				КонецЦикла;
				
				Если ПоказыватьПодписи Тогда
					Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
						ОбластьПодписи2.Рисунки["ПодписиКартинкаПодписьЛисты"].Картинка = СтруктураКартинок.Подпись;
					КонецЕсли;
				КонецЕсли;					
				ТабличныйДокумент.Вывести(ОбластьПодписи2);
				//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ПоследняяОбласть);
				
			Иначе
				
				МассивВыводимыхОбластей.Добавить(ОбластьПустая);
				//МассивВыводимыхОбластей.Добавить(ОбластьПодписи);
				
				Пока ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
					ТабличныйДокумент.Вывести(ОбластьПустая);
				КонецЦикла;
				
				Если ПоказыватьПодписи Тогда
					Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
						ОбластьПодписи2.Рисунки["ПодписиКартинкаПодписьЛисты"].Картинка = СтруктураКартинок.Подпись;
					КонецЕсли;	
				КонецЕсли;					
				ТабличныйДокумент.Вывести(ОбластьПодписи2);
				//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(СтрокаОбласть.Область);
		ПоследняяОбласть = СтрокаОбласть.Область;
		
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыКоммерческоеСоглашениеВерсия1(МассивОбъектов)
	
	//Павелко, CRM-218, 10.02.2020 - добавил сортировку по дате
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Владелец КАК ЮридическоеЛицо,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	вогЮридическиеЛица.Партнер КАК Партнер,
	|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаДоговора,
	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ ВТ_Договора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
	|	1 КАК Приоритет,
	|	ВТ_Договора.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Договора.НомерДоговора КАК НомерДоговора,
	|	ВТ_Договора.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	ВТ_Договора.Договор КАК Договор
	|ПОМЕСТИТЬ ВТ_Соглашения
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	|		ПО вогКоммерческиеСоглашения.ЮридическоеЛицо = ВТ_Договора.ЮридическоеЛицо
	|			И вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогКоммерческиеСоглашения.Ссылка,
	|	2,
	|	ВТ_Договора.ДатаДоговора,
	|	ВТ_Договора.НомерДоговора,
	|	ВТ_Договора.ЮридическоеЛицо,
	|	ВТ_Договора.Договор
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	|		ПО вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	|			И (вогКоммерческиеСоглашения.ЮридическоеЛицо = ЗНАЧЕНИЕ(Справочник.вогЮридическиеЛица.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВТ_Соглашения.Ссылка КАК Ссылка,
	|	ВТ_Соглашения.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Соглашения.НомерДоговора КАК НомерДоговора,
	|	ВТ_Соглашения.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	ВТ_Соглашения.Договор КАК Договор
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	ВТ_Соглашения КАК ВТ_Соглашения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Соглашения.Приоритет,
	|	ВТ_Соглашения.Ссылка.ДатаНачалаДействия УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоммерческиеСоглашения.Ссылка КАК Ссылка,
	|	КоммерческиеСоглашения.Код КАК Код,
	|	КоммерческиеСоглашения.Номер КАК Номер,
	|	ВЫБОР
	// ++ VOG Солодов В.В. 09.02.2021 DEV-158
	|		КОГДА КоммерческиеСоглашения.ДатаНачалаДействия < ВТ_Документы.ДатаДоговора
	// До изменения
	//|		КОГДА КоммерческиеСоглашения.ДатаНачалаДействия > ВТ_Документы.ДатаДоговора
	// -- VOG Солодов В.В. 09.02.2021 DEV-158
	|			ТОГДА ВТ_Документы.ДатаДоговора
	|		ИНАЧЕ КоммерческиеСоглашения.ДатаНачалаДействия
	|	КОНЕЦ КАК ДатаСоглашения,
	|	КоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	КоммерческиеСоглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	КоммерческиеСоглашения.Комментарий КАК Комментарий,
	|	КоммерческиеСоглашения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	КоммерческиеСоглашения.СпособДоставкиТовара КАК СпособДоставкиТовара,
	|	КоммерческиеСоглашения.ОтправкаЗаказаПоФормеНаЭлПочту КАК ОтправкаЗаказаПоФормеНаЭлПочту,
	|	КоммерческиеСоглашения.ОтправкаЗаказаЧерезEDI КАК ОтправкаЗаказаЧерезEDI,
	|	КоммерческиеСоглашения.ОтправкаЗаказаЧерезВ2В КАК ОтправкаЗаказаЧерезВ2В,
	|	КоммерческиеСоглашения.РазмерСкидкиНаПроведениеКоммерческойАкции КАК РазмерСкидкиНаПроведениеКоммерческойАкции,
	|	КоммерческиеСоглашения.РазмерСкидкиПриОткрытииНовогоМагазина КАК РазмерСкидкиПриОткрытииНовогоМагазина,
	|	КоммерческиеСоглашения.РазмерСкидкиНаНовыйТовар КАК РазмерСкидкиНаНовыйТовар,
	|	КоммерческиеСоглашения.РазмерСкидкиНаРекламноДемонстрационныеМатериалы КАК РазмерСкидкиНаРекламноДемонстрационныеМатериалы,
	|	КоммерческиеСоглашения.РазмерСкидкиНаТоварПодлежащийВозврату КАК РазмерСкидкиНаТоварПодлежащийВозврату,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриОткрытииНовогоМагазина КАК ОтсрочкаОплатыПриОткрытииНовогоМагазина,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриЗаказеНовогоТовара КАК ОтсрочкаОплатыПриЗаказеНовогоТовара,
	|	КоммерческиеСоглашения.СрокНаправленияЗаявленияОВозврате КАК СрокНаправленияЗаявленияОВозврате,
	|	КоммерческиеСоглашения.ПроцентРеализованногоТовара КАК ПроцентРеализованногоТовара,
	|	КоммерческиеСоглашения.СрокРеализацииУказанногоПроцентаПоставленногоТовара КАК СрокРеализацииУказанногоПроцентаПоставленногоТовара,
	|	КоммерческиеСоглашения.РазмерШтрафаШоуРум КАК РазмерШтрафаШоуРум,
	|	КоммерческиеСоглашения.РазмерВыплатыПриРасторженииДоговора КАК РазмерВыплатыПриРасторженииДоговора,
	|	КоммерческиеСоглашения.СрокОплатыТовара КАК СрокОплатыТовара,
	|	КоммерческиеСоглашения.МаксимумДнейОтсрочки КАК МаксимумДнейОтсрочки,
	|	КоммерческиеСоглашения.ТестовыйПериодЭДО КАК ТестовыйПериодЭДО,
	|	КоммерческиеСоглашения.УслугаПоОрганизацииШоуРум КАК УслугаПоОрганизацииШоуРум,
	|	КоммерческиеСоглашения.ВыплачиваютсяПремии КАК ВыплачиваютсяПремии,
	|	КоммерческиеСоглашения.СрокиОтчетаОПродажах.Наименование КАК СрокиОтчетаОПродажах,
	|	КоммерческиеСоглашения.РекламноДемонстрационныеМатериалыПанели КАК РекламноДемонстрационныеМатериалыПанели,
	|	КоммерческиеСоглашения.ПолныйАвансовыйПлатежНаВесьТовар КАК ПолныйАвансовыйПлатежНаВесьТовар,
	|	КоммерческиеСоглашения.РазмерАвансаЗаПартиюТовара КАК РазмерАвансаЗаПартиюТовара,
	|	КоммерческиеСоглашения.ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара КАК ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара,
	|	КоммерческиеСоглашения.ОтсрочкаПлатежаНаВесьТовар КАК ОтсрочкаПлатежаНаВесьТовар,
	|	вогЮридическиеЛица.НаименованиеПолное КАК ПредставлениеКлиент,
	|	СпрОрганизации.Ссылка КАК Организация,
	|	СпрОрганизации.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СпрОрганизации.Наименование КАК ОрганизацияНаименование,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.КонтактноеЛицо) КАК ПредставлениеКонтактногоЛица,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.CRM_Должность) КАК ПредставлениеДолжностьКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.CRM_Должность.Родительный КАК ПредставлениеДолжностьКонтактногоЛицаРодительный,
	|	КонтактныеЛицаПартнеров.КонтактноеЛицо.Пол КАК ПолКонтактногоЛица,
	|	ФизическиеЛица.Наименование КАК РуководительПредставление,
	|	ФизическиеЛица.Пол КАК РуководительПол,
	|	ОтветственныеЛица.Должность КАК РуководительДолжностьПредставление,
	|	ЕСТЬNULL(ОтветственныеЛица.ПравоПодписиПоДоверенности, ЛОЖЬ) КАК ПравоПодписиПоДоверенности,
	|	ОтветственныеЛица.ОснованиеПраваПодписи КАК ОснованиеПраваПодписи,
	|	ИСТИНА КАК ИспользоватьПриложение1,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.СпособДоставкиТовара = ЗНАЧЕНИЕ(Перечисление.вогСпособыДоставкиТовара.ДоставкаТовараПоставщиком)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПриложение2,
	|	КоммерческиеСоглашения.УслугаПоОрганизацииШоуРум КАК ИспользоватьПриложение3,
	|	КоммерческиеСоглашения.ВыплачиваютсяПремии КАК ИспользоватьПриложение4,
	|	КоммерческиеСоглашения.ИспользоватьЭДО КАК ИспользоватьЭДО,
	|	КоммерческиеСоглашения.СпособОтправкиЗаказа КАК СпособОтправкиЗаказа,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	СпрОрганизации.ИНН + ""/"" + СпрОрганизации.КПП КАК ИННКПП,
	|	вогЮридическиеЛица.CRM_ИНН + ""/"" + вогЮридическиеЛица.CRM_КПП КАК ИННКППКлиента,
	|	вогЮридическиеЛица.CRM_ОГРН КАК ОГРНКлиента,
	|	СпрОрганизации.CRM_ОГРН КАК ОГРН,
	|	ВТ_Документы.Договор КАК Договор,
	|	вогЮридическиеЛица.Ссылка КАК Клиент,
	|	ВТ_Документы.Договор.вогДокументОснованиеПартнера КАК ДокументОснованиеПартнера,
	|	вогЮридическиеЛица.ОрганизационноПравоваяФорма.ЮрФизЛицо КАК ЮрФизЛицо,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.ОператорЭДО <> ЗНАЧЕНИЕ(Справочник.вогОператорыЭДО.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПриложение5,
	|	ВТ_Документы.Договор.вогОтветственноеЛицо КАК ОтветственноеЛицо,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.Номер КАК ДоверенностьНомер,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ДатаДокумента КАК ДоверенностьДатаДокумента,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС КАК ДоверенностьПериодДействияС,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо КАК ДоверенностьПериодДействияПо,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.Основание КАК ДоверенностьОснование,
	|	КоммерческиеСоглашения.ДоставкуВозвратаОсуществляетКлиент КАК ДоставкуВозвратаОсуществляетКлиент,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ КАК ОтсрочкаОплатыПриПоставкеТовараПодЗаказ,
	|	КоммерческиеСоглашения.НормаБоя КАК НормаБоя,
	|	КоммерческиеСоглашения.ОтчетныйПериодДляДопСоглашенияПоНормеБоя КАК ОтчетныйПериодДляДопСоглашенияПоНормеБоя
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК КоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|			ПО ВТ_Документы.ЮридическоеЛицо = вогЮридическиеЛица.Ссылка
	// ++ VOG Солодов В.В. 09.02.2021 DEV-150
	// До изменения
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	//|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	//|				ПО ОтветственныеЛица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	//|			ПО ВТ_Документы.Договор.вогОтветственноеЛицо = ОтветственныеЛица.Ссылка
	//|				И ВТ_Документы.Договор.Организация = ОтветственныеЛица.Владелец
	// -- VOG Солодов В.В. 09.02.2021 DEV-150
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК КонтактныеЛицаПартнеров
	|			ПО ВТ_Документы.Договор.вогПодписантПартнера = КонтактныеЛицаПартнеров.КонтактноеЛицо
	|				И ВТ_Документы.ЮридическоеЛицо = КонтактныеЛицаПартнеров.ОбъектСвязи
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогКонтактныеЛицаПодписанты.СрезПоследних КАК вогКонтактныеЛицаПодписантыСрезПоследних
	|			ПО ВТ_Документы.ЮридическоеЛицо = вогКонтактныеЛицаПодписантыСрезПоследних.ЮридическоеЛицо
	|				И ВТ_Документы.Договор.вогПодписантПартнера = вогКонтактныеЛицаПодписантыСрезПоследних.КонтактноеЛицо
	|				И (ВТ_Документы.Ссылка.Дата >= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС
	|						И ВТ_Документы.Ссылка.Дата <= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо
	|					ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.Основание = ЗНАЧЕНИЕ(Перечисление.ВариантыОснованийПодписанта.Устава))
	|		ПО КоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СпрОрганизации
	|		ПО КоммерческиеСоглашения.Организация = СпрОрганизации.Ссылка
	// ++ VOG Солодов В.В. 09.02.2021 DEV-150
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ПО ОтветственныеЛица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ПО КоммерческиеСоглашения.ОтветственноеЛицо = ОтветственныеЛица.Ссылка
	|			И КоммерческиеСоглашения.Организация = ОтветственныеЛица.Владелец
	// -- VOG Солодов В.В. 09.02.2021 DEV-150
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(вогТорговыеТочкиКонтактнаяИнформация.Ссылка) КАК НаименованиеТорговойТочки,
	|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	вогТорговыеТочкиКонтактнаяИнформация.Представление КАК АдресДоставки,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.Номер КАК НомерСоглашения,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия КАК ДатаСоглашения,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.Договор КАК Договор,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита КАК МинимальнаяСтоимостьПартии,
	// +++ VOG Кулаков П.Л. 06.10.2020 CRM-952
	|	ВЫБОР
	|		КОГДА ВТ_Документы.ДатаДоговора > вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия
	|			ТОГДА ВТ_Документы.ДатаДоговора
	|		ИНАЧЕ вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия
	|	КОНЕЦ КАК ДатаПриложенияАдресаДоставки
	// --- VOG Кулаков П.Л.
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.АдресаДоставки КАК вогКоммерческиеСоглашенияАдресаДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.Ссылка = ВТ_Документы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = вогТорговыеТочкиКонтактнаяИнформация.Ссылка
	|			И (вогТорговыеТочкиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресТорговойТочки))
	|			И (НЕ вогТорговыеТочкиКонтактнаяИнформация.Представление = """")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = CRM_ОбъектыЗначенийКлассификаторов.Объект
	|			И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатораМинСтоимостьТовара)
	|			И вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.НаправлениеДеятельности = CRM_ОбъектыЗначенийКлассификаторов.Аналитика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка),
	|	вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка,
	|	вогРаспределительныеЦентрыКонтактнаяИнформация.Представление,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.Номер,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия,
	|	ВТ_Документы.ДатаДоговора,
	|	ВТ_Документы.НомерДоговора,
	|	ВТ_Документы.Договор,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита,
	// +++ VOG Кулаков П.Л. 06.10.2020 CRM-952
	|	ВЫБОР
	|		КОГДА ВТ_Документы.ДатаДоговора > вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия
	|			ТОГДА ВТ_Документы.ДатаДоговора
	|		ИНАЧЕ вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия
	|	КОНЕЦ
	// --- VOG Кулаков П.Л.
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.АдресаДоставки КАК вогКоммерческиеСоглашенияАдресаДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.Ссылка = ВТ_Документы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогРаспределительныеЦентры.КонтактнаяИнформация КАК вогРаспределительныеЦентрыКонтактнаяИнформация
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка
	|			И (вогРаспределительныеЦентрыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресРаспределительногоЦентра))
	|			И (НЕ вогРаспределительныеЦентрыКонтактнаяИнформация.Представление = """")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = CRM_ОбъектыЗначенийКлассификаторов.Объект
	|			И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатораМинСтоимостьТовара)
	|ИТОГИ
	|	МАКСИМУМ(НомерСоглашения),
	// +++ VOG Кулаков П.Л. 06.10.2020 CRM-952
	|	МАКСИМУМ(ДатаПриложенияАдресаДоставки),
	// --- VOG Кулаков П.Л.
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(ДатаДоговора)
	|ПО
	|	НомерДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	вогКоммерческиеСоглашенияДокументыЭДО.ВидДокумента КАК ВидДокумента,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.Номер КАК НомерСоглашения,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ДатаНачалаДействия КАК ДатаСоглашения,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ОператорЭДО КАК ОператорЭДО,
	|	ВТ_Документы.Договор КАК Договор
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.ДокументыЭДО КАК вогКоммерческиеСоглашенияДокументыЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияДокументыЭДО.Ссылка = ВТ_Документы.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(НомерСоглашения),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(ОператорЭДО)
	|ПО
	|	НомерДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.Договор КАК Договор,
	|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаСоглашения,
	|	вогКоммерческиеСоглашения.Номер КАК НомерСоглашения
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(НомерСоглашения)
	|ПО
	|	НомерДоговора";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ЗначениеКлассификатораМинСтоимостьТовара", Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("fff7455d-cfd9-11e8-a684-005056bc3fe8")));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСтруктуруДанныхПечатиВерсия1(ДанныеПечати, СтруктураДанных)
	
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеПечати);
	
	СтруктураДанных.Вставить("ДатаДоговора", Формат(ДанныеПечати.ДатаДоговора, "ДЛФ=DD"));
		
	ФС 			= "ЧН=Пусто";
	Параметры 	= ",,,,,,,, 0";
	
	СведенияОбОрганизации = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДоговора,,ДанныеПечати.Договор.вогСчетОрганизации);
	СведенияОбКлиенте = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ДанныеПечати.Клиент, ДанныеПечати.ДатаДоговора,,ДанныеПечати.Договор.вогСчетКонтрагента);
	СтруктураДанных.Вставить("ПредставлениеОрганизации", СведенияОбОрганизации.ПолноеНаименование);
	СтруктураДанных.Вставить("ДолжностьРуководителя", ПолучитьДолжностьВРодительномПадеже(ДанныеПечати.РуководительДолжностьПредставление));
	ФИОРуководителя = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.РуководительПредставление, 2, ФИОРуководителя, ДанныеПечати.РуководительПол);
	СтруктураДанных.Вставить("ФИОРуководителя", 			ФИОРуководителя);
	ОтветственныйФИО =  ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.РуководительПредставление);
	СтруктураДанных.Вставить("ОтветственныйФИО", 			ОтветственныйФИО);
	
	СтруктураДанных.Вставить("ПредставлениеКлиента", 		СведенияОбКлиенте.ПолноеНаименование);
	СтруктураДанных.Вставить("ДолжностьКонтактноеЛицо",	ДанныеПечати.ПредставлениеДолжностьКонтактногоЛицаРодительный);
	ПредставлениеКонтактногоЛица = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.ПредставлениеКонтактногоЛица, 2, ПредставлениеКонтактногоЛица, ДанныеПечати.ПолКонтактногоЛица);
	ПредставлениеКонтактногоЛица = ?(СокрЛП(ПредставлениеКонтактногоЛица) = "","",
		""+ДанныеПечати.ПредставлениеДолжностьКонтактногоЛицаРодительный+" "+СокрЛП(ПредставлениеКонтактногоЛица));
	ПредставлениеКонтактногоЛица = ?(ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,"",ПредставлениеКонтактногоЛица);
	Если ЗначениеЗаполнено(ДанныеПечати.ПредставлениеКонтактногоЛица) тогда
		ОтветственныйКлиентФИО =  ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.ПредставлениеКонтактногоЛица);
	Иначе
		ОтветственныйКлиентФИО =  "               ";
	КонецЕсли;
	СтруктураДанных.Вставить("ОтветственныйКлиентФИО", ОтветственныйКлиентФИО);
	
	Если ДанныеПечати.ПравоПодписиПоДоверенности Тогда
		СтруктураДанных.Вставить("ОснованиеРуководителя", ДанныеПечати.ОснованиеПраваПодписи);
	Иначе
		СтруктураДанных.Вставить("ОснованиеРуководителя", "Устава");
	КонецЕсли;
	СтруктураДанных.Вставить("ОснованиеПартнера", ДанныеПечати.Договор.вогДокументОснованиеПартнера);
	СтруктураДанных.Вставить("ЮридическийАдрес",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес"));
	СтруктураДанных.Вставить("ЮридическийАдресКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "ЮридическийАдрес"));
	СтруктураДанных.Вставить("ФактическийАдрес",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ФактическийАдрес"));
	СтруктураДанных.Вставить("ФактическийАдресКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "ФактическийАдрес"));
	СтруктураДанных.Вставить("РасчетныйСчет",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,БИК,КоррСчет"));
	СтруктураДанных.Вставить("РасчетныйСчетКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "НомерСчета,Банк,БИК,КоррСчет"));
	
	СтруктураДанных.Вставить("ДатаОкончанияДействияПредставление",Формат(ДанныеПечати.ДатаОкончанияДействия,"ДЛФ=DD"));
		
	Телефон = СведенияОбОрганизации.Телефоны + ?(СведенияОбОрганизации.Телефоны <> "" И СведенияОбОрганизации.email <> "" ,", ","") + СведенияОбОрганизации.email;   	
	ТелефонКлиента = СведенияОбКлиенте.Телефоны + ?(СведенияОбКлиенте.Телефоны <> "" И СведенияОбКлиенте.email <> "" ,", ","") + СведенияОбКлиенте.email;	
	
	СтруктураДанных.Вставить("Телефон",Телефон);                                                  
	СтруктураДанных.Вставить("ТелефонКлиента",ТелефонКлиента);	
	
	Если ДанныеПечати.ДоверенностьОснование <> Перечисления.ВариантыОснованийПодписанта.Устава тогда 
		ТекстДоверенности = СокрЛП(ДанныеПечати.ДоверенностьОснование)+" №"+ДанныеПечати.ДоверенностьНомер+" от "+Формат(ДанныеПечати.ДоверенностьДатаДокумента,"ДФ=dd.MM.yyyy");
	Иначе
		ТекстДоверенности = "Устава";
	КонецЕсли;
	
	ПредставлениеОснованиеПартнера = ", в лице "+ПредставлениеКонтактногоЛица+" действующего на основании " + ТекстДоверенности;	
	ПредставлениеОснованиеПартнера = ?(ДанныеПечати.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,
	", в лице "+ПредставлениеКонтактногоЛица+" действующего на основании " + ТекстДоверенности,
	", зарегистрированный в Едином государственном Реестре индивидуальных предпринимателей за государственным регистрационным номером (ОГРНИП) "+ДанныеПечати.ОГРНКлиента);
	Именуемое = ?(ДанныеПечати.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,"именуемое","именуемый"); 
	СтруктураДанных.Вставить("Именуемое",Именуемое);
	
	СтруктураДанных.Вставить("ПредставлениеОснованиеПартнера",ПредставлениеОснованиеПартнера );	
	СтруктураДанных.Вставить("ПредставлениеОГРНКлиента",?(ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,"ОГРНИП","ОГРН"));
	
	СтруктураДанных.Вставить("ДатаСоглашенияПредставление",Формат(ДанныеПечати.ДатаСоглашения,"ДЛФ=DD"));
	
	ПредставлениеКонтактноеЛицо = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.ПредставлениеКонтактногоЛица, 2, ПредставлениеКонтактноеЛицо, ДанныеПечати.ПолКонтактногоЛица);
	СтруктураДанных.Вставить("ПредставлениеКонтактноеЛицо", СокрЛП(ПредставлениеКонтактноеЛицо));
	СтруктураДанных.Вставить("ДолжностьКонтактноеЛицо", 	
		ПолучитьДолжностьВРодительномПадеже(ДанныеПечати.ПредставлениеДолжностьКонтактногоЛица));
	
	СтруктураДанных.Вставить("РазмерШтрафаПрописью", 		СокрЛП(ЧислоПрописью(ДанныеПечати.РазмерШтрафаШоуРум, ФС, Параметры)));
	СтруктураДанных.Вставить("КоличествоДнейПрописью",
		СокрЛП(ЧислоПрописью(ДанныеПечати.СрокНаправленияЗаявленияОВозврате, ФС, Параметры)));
	СтруктураДанных.Вставить("ПроцентПрописью", 			СокрЛП(ЧислоПрописью(ДанныеПечати.ПроцентРеализованногоТовара, ФС, Параметры)));
	СтруктураДанных.Вставить("СрокРеализацииПрописью",
		СокрЛП(ЧислоПрописью(ДанныеПечати.СрокРеализацииУказанногоПроцентаПоставленногоТовара, ФС, Параметры)));
	СтруктураДанных.Вставить("РазмерСкидкиПрописью",
		СокрЛП(ЧислоПрописью(ДанныеПечати.РазмерСкидкиНаТоварПодлежащийВозврату, ФС, Параметры)));
	СтруктураДанных.Вставить("СрокОплатыТовараПрописью", 	СокрЛП(ЧислоПрописью(ДанныеПечати.СрокОплатыТовара, ФС, Параметры)));
	СтруктураДанных.Вставить("МаксимумДнейОтсрочкиПрописью", 	СокрЛП(ЧислоПрописью(ДанныеПечати.МаксимумДнейОтсрочки, ФС, Параметры)));
	СтруктураДанных.Вставить("РазмерВыплатыПрописью",
		СокрЛП(ЧислоПрописью(ДанныеПечати.РазмерВыплатыПриРасторженииДоговора, ФС, Параметры)));
	СтруктураДанных.Вставить("ТестовыйПериодЭДОПрописью", 	СокрЛП(ЧислоПрописью(ДанныеПечати.ТестовыйПериодЭДО, ФС, Параметры)));
	
	СтруктураДанных.Вставить("РазмерАвансаЗаПартиюТовараПрописью",
		СокрЛП(ЧислоПрописью(ДанныеПечати.РазмерАвансаЗаПартиюТовара, ФС, Параметры)));	 
	
	Если ДанныеПечати.ПравоПодписиПоДоверенности Тогда
		СтруктураДанных.Вставить("ОснованиеРуководителя", СокрЛП(ДанныеПечати.ОснованиеПраваПодписи));
	Иначе
		СтруктураДанных.Вставить("ОснованиеРуководителя", "Устава");
	КонецЕсли;
	
	// Контактная информация организации
	СтруктураДанных.Вставить("ГородОрганизации", "");
	СтруктураДанных.Вставить("ЭлАдресОрганизации", "");
	
	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДляПриемкиЗаказаОбои);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДляПриемкиЗаказаПлитка);
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ДанныеПечати.Организация);
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивСсылок,, МассивВидовКИ, ТекущаяДата());
	
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
		
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			СтруктураКИ = Новый Структура;
			Если ДанныеПечати.Организация.ИНН = "2309123330" или ДанныеПечати.Организация.ИНН = "2373013119" тогда
				СтруктураКИ.Вставить("Регион", "");
				СтруктураКИ.Вставить("НаселенныйПункт", "");
			Иначе	
				СтруктураКИ.Вставить("Город", "");
				СтруктураКИ.Вставить("ГородСокращение", "");
				
			КонецЕсли;
			
			Результат = РаботаСАдресами.ПредыдущаяСтруктураКонтактнойИнформацииXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Вид);
			
			ЗаполнитьЗначенияСвойств(СтруктураКИ, Результат);
			// ++ VOG Солодов В.В. 03.12.2019 
			Если СтруктураКИ.Свойство("Город") тогда
				МассивСлов 		= СтрРазделить(СтруктураКИ.Город, " ", Ложь);
				ИндСокращения 	= МассивСлов.Найти(СтруктураКИ.ГородСокращение);
				Если Не ИндСокращения = Неопределено Тогда
					МассивСлов.Удалить(ИндСокращения);
				КонецЕсли;
			КонецЕслИ;
			
			Если ДанныеПечати.Организация.ИНН = "2309123330" или ДанныеПечати.Организация.ИНН = "2373013119" тогда
				СтруктураДанных.ГородОрганизации = СтруктураКИ.Регион+", "+СтруктураКИ.НаселенныйПункт;
			Иначе				
				СтруктураДанных.ГородОрганизации = "г. "+СтрСоединить(МассивСлов, " ");
			КонецЕсли;
			
			
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			
			Если ДанныеПечати.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка 
				И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресДляПриемкиЗаказаПлитка тогда
					СтруктураДанных.ЭлАдресОрганизации = СтрокаКИ.Представление;
				КонецЕсли;	
				
			Если ДанныеПечати.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои 
				И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресДляПриемкиЗаказаОбои тогда
					СтруктураДанных.ЭлАдресОрганизации = СтрокаКИ.Представление;
			КонецЕсли;	

			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СформироватьСтруктуруОбластейВерсия1(ДанныеПечати, Макет)
	
	СтруктураОбластей = Новый Структура;
	
	НомерРаздела 		= 0;
	
	Для ИндексРаздела = 1 По 19 Цикл
		
		НомерВарианта 		= 0;
		НомерПунктаРаздела 	= 0;
		ИмяРаздела 			= "Раздел" + Строка(ИндексРаздела);
		
		Если Не Макет.Области.Найти(ИмяРаздела) = Неопределено Тогда
			
			НомерРаздела = НомерРаздела + 1;
			ПредставлениеНомераРаздела = Строка(НомерРаздела);
			
			СтруктураОбластей.Вставить(ИмяРаздела, ПредставлениеНомераРаздела);
			
			Для ИндексВарианта = 1 По 10 Цикл
				
				НомерПункта = 0;
				ИмяВарианта = ИмяРаздела + "_Вариант" + Строка(ИндексВарианта);
				
				Если Не Макет.Области.Найти(ИмяВарианта) = Неопределено Тогда
					
					НомерВарианта = НомерВарианта + 1;
					ПредставлениеНомераВарианта = ПредставлениеНомераРаздела + "." + Строка(НомерВарианта);
					СтруктураОбластей.Вставить(ИмяВарианта, ПредставлениеНомераВарианта);
					
					Для ИндексПункта = 1 По 20 Цикл
						
						ИмяПункта = ИмяВарианта + "_Пункт" + Строка(ИндексПункта);
						
						Если Не Макет.Области.Найти(ИмяПункта) = Неопределено Тогда
							
							ОбластьПункта = Макет.ПолучитьОбласть(ИмяПункта);
							
							УИД = Новый УникальныйИдентификатор;
							
							СтруктураПараметра = Новый Структура;
							СтруктураПараметра.Вставить("НомерПункта", УИД);
							
							ЗаполнитьЗначенияСвойств(СтруктураПараметра, ОбластьПункта.Параметры);
							
							Если СтруктураПараметра.НомерПункта <> УИД Тогда
								НомерПункта = НомерПункта + 1;
								ПредставлениеНомераПункта = ПредставлениеНомераВарианта + "." + Строка(НомерПункта);
								СтруктураОбластей.Вставить(ИмяПункта, ПредставлениеНомераПункта);
							Иначе
								СтруктураОбластей.Вставить(ИмяПункта, "");
							КонецЕсли;
							
						//Иначе
						//	Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для ИндексПунктаРаздела = 1 По 20 Цикл
				
				НомерПодПункта 	= 0;
				ИмяПунктаРаздела = ИмяРаздела + "_Пункт" + Строка(ИндексПунктаРаздела);
				
				Если Не Макет.Области.Найти(ИмяПунктаРаздела) = Неопределено Тогда
					
					ОбластьПунктаРаздела = Макет.ПолучитьОбласть(ИмяПунктаРаздела);
					
					УИД = Новый УникальныйИдентификатор;
					
					СтруктураПараметра = Новый Структура;
					СтруктураПараметра.Вставить("НомерПункта", УИД);
					
					ЗаполнитьЗначенияСвойств(СтруктураПараметра, ОбластьПунктаРаздела.Параметры);
					
					Если СтруктураПараметра.НомерПункта <> УИД Тогда
						
						НомерПунктаРаздела = НомерПунктаРаздела + 1;
						ПредставлениеНомераПунктаРаздела = ПредставлениеНомераРаздела + "." + Строка(НомерПунктаРаздела);
						СтруктураОбластей.Вставить(ИмяПунктаРаздела, ПредставлениеНомераПунктаРаздела);
						
						Для ИндексПодПункта = 1 По 20 Цикл
							
							ИмяПодПункта = ИмяПунктаРаздела + "_ПодПункт" + Строка(ИндексПодПункта);
							
							Если Не Макет.Области.Найти(ИмяПодПункта) = Неопределено Тогда
								
								ОбластьПодПункта = Макет.ПолучитьОбласть(ИмяПодПункта);
								
								УИД = Новый УникальныйИдентификатор;
								
								СтруктураПараметра = Новый Структура;
								СтруктураПараметра.Вставить("НомерПункта", УИД);
								
								ЗаполнитьЗначенияСвойств(СтруктураПараметра, ОбластьПодПункта.Параметры);
								
								Если СтруктураПараметра.НомерПункта <> УИД Тогда
									НомерПодПункта = НомерПодПункта + 1;
									ПредставлениеНомераПодПункта = ПредставлениеНомераПунктаРаздела + "." + Строка(НомерПодПункта);
									СтруктураОбластей.Вставить(ИмяПодПункта, ПредставлениеНомераПодПункта);
								Иначе
									СтруктураОбластей.Вставить(ИмяПодПункта, "");
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						СтруктураОбластей.Вставить(ИмяПунктаРаздела, "");
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураОбластей;
	
КонецФункции

#КонецОбласти
// -- VOG Ульянов И.В. 18.12.2019 CRM-41

// +++ Кулаков П.Л. CRM-487
#Область Приложения

// ++ VOG Солодов В.В. 29.06.2021 DEV-69
Функция СформироватьПечатнуюФормуПриложения(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт //доработано Ульянов И.В. 16.04.2020 CRM-579
	
	Перем НаправлениеДеятельности, ДанныеКоммерческогоСоглашения, КоммерческоеСоглашение, Договор, Версия, ДанныеПечати;
	
	Версия 				= 0;
	НомерПриложения 	= 0;
	ПоказыватьПодписи 	= Ложь;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		
		НаправлениеДеятельности 		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыПечати, "НаправлениеДеятельности");
		ДанныеКоммерческогоСоглашения 	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыПечати, "ДанныеКоммерческогоСоглашения");
		НомерПриложения 				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПечати, "НомерПриложения", 0);
		ПоказыватьПодписи 				= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПечати, "ПоказыватьПодписи", Ложь);
		ДанныеПечати 					= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПечати, "РезультатыЗапросаДанных");
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеКоммерческогоСоглашения) = Тип("Структура") Тогда
		
		КоммерческоеСоглашение 			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКоммерческогоСоглашения, "Ссылка");
		Договор 						= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКоммерческогоСоглашения, "Договор");
		Версия 							= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеКоммерческогоСоглашения, "Версия", 0);
		
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	РезультатыЗапросаДанных = Новый Структура;
	РезультатыЗапросаДанных.Вставить("ДанныеПриложений", 	ДанныеПечати.ДанныеПриложений);
	РезультатыЗапросаДанных.Вставить("ДанныеПриложения4", 	ДанныеПечати.ДанныеПриложения4);
	
	СформироватьПечатнуюФормуПоНомеруПриложения(ТабличныйДокумент, РезультатыЗапросаДанных, НомерПриложения, ПоказыватьПодписи);
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// До изменения
Функция Устарела_СформироватьПечатнуюФормуПриложения(МассивОбъектов, ОбъектыПечати, НомерПриложения, ПоказыватьПодписи = Ложь, НаправлениеДеятельности = Неопределено) Экспорт //доработано Ульянов И.В. 16.04.2020 CRM-579
	
	//ТабличныйДокумент = Новый ТабличныйДокумент;
	//
	//МассивОбъектовПриложения = Новый Массив;
	//
	//МассивСоглашений = Новый Массив; //доработано VOG Ульянов И.В. 16.04.2020 CRM-579
	//
	//СписокСоглашений = ПолучитьКоммерческиеСоглашения(МассивОбъектов, НаправлениеДеятельности); //доработано VOG Ульянов И.В. 16.04.2020 CRM-579
	//
	//Выборка = СписокСоглашений.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	Если Выборка.Версия <> 1 тогда
	//		МассивОбъектовПриложения.Добавить(Выборка.Договор);
	//		МассивСоглашений.Добавить(Выборка.Соглашение); 	//доработано VOG Ульянов И.В. 16.04.2020 CRM-579	
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если МассивОбъектовПриложения.Количество() > 0 тогда
	//	
	//	СформироватьПечатнуюФормуПоНомеруПриложения(ТабличныйДокумент, МассивОбъектовПриложения, ОбъектыПечати, НомерПриложения, МассивСоглашений, ПоказыватьПодписи, НаправлениеДеятельности); //доработано VOG Ульянов И.В. 16.04.2020 CRM-579
	//	
	//КонецЕсли;
	//
	//ТабличныйДокумент.ТолькоПросмотр = Истина;
	//	
	//Возврат ТабличныйДокумент;
	
КонецФункции
// -- VOG Солодов В.В. 29.06.2021 DEV-69

// ++ VOG Солодов В.В. 29.06.2021 DEV-69
Процедура СформироватьПечатнуюФормуПоНомеруПриложения(ТабличныйДокумент, РезультатыЗапросаДанных, НомерПриложения, ПоказыватьПодписи = ЛОЖЬ)
	
	Результат 				= РезультатыЗапросаДанных.ДанныеПриложений;
	РезультатПриложение4 	= РезультатыЗапросаДанных.ДанныеПриложения4;
// До изменения
//Процедура СформироватьПечатнуюФормуПоНомеруПриложения(ТабличныйДокумент, МассивОбъектов, ОбъектыПечати, НомерПриложения, МассивСоглашений, ПоказыватьПодписи = ЛОЖЬ, НаправлениеДеятельности = Неопределено) //доработано VOG Ульянов И.В. 16.04.2020 CRM-579
//	
//	Результат = ПолучитьДанныеДляПечатнойФормыПриложений(МассивОбъектов, МассивСоглашений);  //доработано VOG Ульянов И.В. 16.04.2020 CRM-579
// -- VOG Солодов В.В. 29.06.2021 DEV-69
	
	СтруктураДанных = Новый Структура;
	
	Для Каждого Колонка Из Результат[3].Колонки Цикл
		СтруктураДанных.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ДанныеПечати = Результат[3].Выбрать();
	
	Пока ДанныеПечати.Следующий() Цикл
		
		ПоследнийНомер = 0;
		
		НомераПриложений = Новый Структура;
		НомераПриложений.Вставить("НомерПриложение1");
		НомераПриложений.Вставить("НомерПриложение2");
		НомераПриложений.Вставить("НомерПриложение3");
		НомераПриложений.Вставить("НомерПриложение4");
		НомераПриложений.Вставить("НомерПриложение5");
		НомераПриложений.Вставить("НомерПриложение6");
		
		Для Счетчик = 1 по 6 цикл
			Если ДанныеПечати["ИспользоватьПриложение"+Строка(Счетчик)] Тогда
				ПоследнийНомер = ПоследнийНомер + 1;
				НомераПриложений["НомерПриложение"+Строка(Счетчик)] = Строка(ПоследнийНомер);
			Иначе
				НомераПриложений["НомерПриложение"+Строка(Счетчик)] = "";
			КонецЕсли;			
		КонецЦикла;	
		
		СтруктураДанныхПечати = СформироватьСтруктуруДанныхПечатиВерсия3(ДанныеПечати, СтруктураДанных);
		
		СтруктураКартинок = РегистрыСведений.вогПечатиИПодписи.ПолучитьПодписьПечать(ДанныеПечати.Организация, ДанныеПечати.ОтветственноеЛицо);
				
		// Приложения к соглашению
		ДанныеПечатиАдресовДоставки = Результат[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ДанныеПечатиДокументовЭДО 	= Результат[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ДанныеПечатиПриложений 		= Результат[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		// ++ VOG Солодов В.В. 29.06.2021 DEV-69
		ДанныеПечатиПриложение4 	= РезультатПриложение4.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		// -- VOG Солодов В.В. 29.06.2021 DEV-69
		
		Если НомерПриложения = 1 Тогда
			ЗаполнитьПриложение(ТабличныйДокумент,
				СтруктураДанныхПечати,
				ДанныеПечати["ИспользоватьПриложение"+НомерПриложения],
				"Приложение" + НомерПриложения,
				ДанныеПечатиПриложений,
				НомераПриложений["НомерПриложение"+НомерПриложения],
				ПоказыватьПодписи,                                   //доработано VOG Ульянов И.В. 16.04.2020 CRM-579
				СтруктураКартинок,
				Истина);
		КонецЕсли;
			
		Если НомерПриложения = 2 Тогда
			ЗаполнитьПриложение(ТабличныйДокумент,
				СтруктураДанныхПечати,
				ДанныеПечати["ИспользоватьПриложение2"],
				"Приложение2",
				ДанныеПечатиАдресовДоставки,
				НомераПриложений["НомерПриложение2"],
				ПоказыватьПодписи,                                  //доработано VOG Ульянов И.В. 16.04.2020 CRM-579
				СтруктураКартинок,
				Истина);
		КонецЕсли;	
		
		Если НомерПриложения = 4 Тогда
			
			// ++ VOG Солодов В.В. 29.06.2021 DEV-69
			// До изменения
			//РезультатПриложение4 = ПолучитьДанныеДляПечатнойФормыПриложение4v2(МассивОбъектов, МассивСоглашений);
			//ДанныеПечатиПриложение4 = РезультатПриложение4.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			// -- VOG Солодов В.В. 29.06.2021 DEV-69
			
			//VOG Ульянов И.В. 09.04.2020 CRM-565
			ЗаполнитьПриложение4(
				ТабличныйДокумент,
				СтруктураДанныхПечати,
				Истина,
				"Приложение4",
				ДанныеПечатиПриложение4,
				НомераПриложений["НомерПриложение4"],
				ПоказыватьПодписи,                                 //доработано VOG Ульянов И.В. 16.04.2020 CRM-579
				СтруктураКартинок,
				Истина);
			
			//ЗаполнитьПриложение4(ТабличныйДокумент,
			//	СтруктураДанныхПечати,
			//	ДанныеПечати["ИспользоватьПриложение4"],
			//	"Приложение4",
			//	ДанныеПечатиПриложение4,
			//	НомераПриложений["НомерПриложение4"],
			//	Ложь,
			//	СтруктураКартинок,
			//	Истина);
		КонецЕсли;
		
		Если НомерПриложения = 5 Тогда
			ЗаполнитьПриложение(ТабличныйДокумент,
				СтруктураДанныхПечати,
				ДанныеПечати["ИспользоватьПриложение5"],
				"Приложение5",
				ДанныеПечатиДокументовЭДО,
				НомераПриложений["НомерПриложение5"],
				ПоказыватьПодписи,
				СтруктураКартинок,                                 //доработано VOG Ульянов И.В. 16.04.2020 CRM-579
				Истина);
		КонецЕсли;
		
		Если НомерПриложения = 6 Тогда
			ЗаполнитьПриложение(ТабличныйДокумент,
				СтруктураДанныхПечати,
				ДанныеПечати["ИспользоватьПриложение6"],
				"Приложение6",
				ДанныеПечатиПриложений,
				НомераПриложений["НомерПриложение6"],
				ПоказыватьПодписи,                                //доработано VOG Ульянов И.В. 16.04.2020 CRM-579
				СтруктураКартинок,
				Истина);
			ТабличныйДокумент.АвтоМасштаб = Истина;
		КонецЕсли;
		
		// ++ VOG Солодов В.В. 29.06.2021 DEV-69
		Если ДанныеПечати.ЕстьДополнительноеСоглашениеПоНормеБоя И (НомерПриложения = 0 Или НомерПриложения = 7) Тогда
		// До изменения
		//Если НомерПриложения = 0 Тогда
			//Если ДанныеПечати.ЕстьДополнительноеСоглашениеПоНормеБоя тогда
		// -- VOG Солодов В.В. 29.06.2021 DEV-69
				ЗаполнитьДополнительноеПриложениеПоНормеБоя(ТабличныйДокумент,
					СтруктураДанныхПечати,
					ДанныеПечати.ЕстьДополнительноеСоглашениеПоНормеБоя,
					"ДопСоглашениеНормаБоя",
					ДанныеПечати,
					0,
					ПоказыватьПодписи,                            //доработано VOG Ульянов И.В. 16.04.2020 CRM-579
					СтруктураКартинок,
					Истина);
			//КонецЕсли;
		КонецЕсли;
		// --- Кулаков П.Л.
			
	КонецЦикла;

КонецПроцедуры

// ++ VOG Солодов В.В. 29.06.2021 DEV-69
Функция ПолучитьДанныеДляПечатнойФормыПриложений(МассивОбъектов, МассивСоглашений) Экспорт
// До изменения
//Функция ПолучитьДанныеДляПечатнойФормыПриложений(МассивОбъектов, МассивСоглашений)   //доработано VOG Ульянов И.В. 16.04.2020 CRM-579ч
// -- VOG Солодов В.В. 29.06.2021 DEV-69 
	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	ДоговорыКонтрагентов.Владелец КАК ЮридическоеЛицо,
//	|	ДоговорыКонтрагентов.Организация КАК Организация,
//	|	вогЮридическиеЛица.Партнер КАК Партнер,
//	|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаДоговора,
//	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
//	|	ДоговорыКонтрагентов.Ссылка КАК Договор
//	|ПОМЕСТИТЬ ВТ_Договора
//	|ИЗ
//	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
//	|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
//	|ГДЕ
//	|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
//	|	1 КАК Приоритет,
//	|	ВТ_Договора.ДатаДоговора КАК ДатаДоговора,
//	|	ВТ_Договора.НомерДоговора КАК НомерДоговора,
//	|	ВТ_Договора.ЮридическоеЛицо КАК ЮридическоеЛицо,
//	|	ВТ_Договора.Договор КАК Договор
//	|ПОМЕСТИТЬ ВТ_Соглашения
//	|ИЗ
//	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
//	|		ПО вогКоммерческиеСоглашения.ЮридическоеЛицо = ВТ_Договора.ЮридическоеЛицо
//	|			И вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
//	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
//	|			И (НЕ вогКоммерческиеСоглашения.ПометкаУдаления)
//	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован))
//	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласованКлиентом))
//	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт))
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	вогКоммерческиеСоглашения.Ссылка,
//	|	2,
//	|	ВТ_Договора.ДатаДоговора,
//	|	ВТ_Договора.НомерДоговора,
//	|	ВТ_Договора.ЮридическоеЛицо,
//	|	ВТ_Договора.Договор
//	|ИЗ
//	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
//	|		ПО вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
//	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
//	|			И (вогКоммерческиеСоглашения.ЮридическоеЛицо = ЗНАЧЕНИЕ(Справочник.вогЮридическиеЛица.ПустаяСсылка))
//	|			И (НЕ вогКоммерческиеСоглашения.ПометкаУдаления)
//	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован))
//	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласованКлиентом))
//	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
//	|	ВТ_Соглашения.Ссылка КАК Ссылка,
//	|	ВТ_Соглашения.ДатаДоговора КАК ДатаДоговора,
//	|	ВТ_Соглашения.НомерДоговора КАК НомерДоговора,
//	|	ВТ_Соглашения.ЮридическоеЛицо КАК ЮридическоеЛицо,
//	|	ВТ_Соглашения.Договор КАК Договор
//	|ПОМЕСТИТЬ ВТ_Документы
//	|ИЗ
//	|	ВТ_Соглашения КАК ВТ_Соглашения
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ВТ_Соглашения.Приоритет,
//	|	ВТ_Соглашения.Ссылка.ДатаНачалаДействия УБЫВ
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	КоммерческиеСоглашения.Ссылка КАК Ссылка,
//	|	КоммерческиеСоглашения.Код КАК Код,
//	|	КоммерческиеСоглашения.Номер КАК Номер,
//	|	ВЫБОР
//	|		КОГДА КоммерческиеСоглашения.ДатаНачалаДействия < ВТ_Документы.ДатаДоговора
//	|			ТОГДА ВТ_Документы.ДатаДоговора
//	|		ИНАЧЕ КоммерческиеСоглашения.ДатаНачалаДействия
//	|	КОНЕЦ КАК ДатаСоглашения,
//	|	КоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
//	|	КоммерческиеСоглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
//	|	КоммерческиеСоглашения.Комментарий КАК Комментарий,
//	|	КоммерческиеСоглашения.НаправлениеДеятельности КАК НаправлениеДеятельности,
//	|	КоммерческиеСоглашения.СпособДоставкиТовара КАК СпособДоставкиТовара,
//	|	КоммерческиеСоглашения.ОтправкаЗаказаПоФормеНаЭлПочту КАК ОтправкаЗаказаПоФормеНаЭлПочту,
//	|	КоммерческиеСоглашения.ОтправкаЗаказаЧерезEDI КАК ОтправкаЗаказаЧерезEDI,
//	|	КоммерческиеСоглашения.ОтправкаЗаказаЧерезВ2В КАК ОтправкаЗаказаЧерезВ2В,
//	|	0 КАК РазмерСкидкиНаПроведениеКоммерческойАкции,
//	|	КоммерческиеСоглашения.РазмерСкидкиПриОткрытииНовогоМагазина КАК РазмерСкидкиПриОткрытииНовогоМагазина,
//	|	КоммерческиеСоглашения.РазмерСкидкиНаНовыйТовар КАК РазмерСкидкиНаНовыйТовар,
//	|	КоммерческиеСоглашения.РазмерСкидкиНаРекламноДемонстрационныеМатериалы КАК РазмерСкидкиНаРекламноДемонстрационныеМатериалы,
//	|	КоммерческиеСоглашения.РазмерСкидкиНаТоварПодлежащийВозврату КАК РазмерСкидкиНаТоварПодлежащийВозврату,
//	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриОткрытииНовогоМагазина КАК ОтсрочкаОплатыПриОткрытииНовогоМагазина,
//	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриЗаказеНовогоТовара КАК ОтсрочкаОплатыПриЗаказеНовогоТовара,
//	|	КоммерческиеСоглашения.СрокНаправленияЗаявленияОВозврате КАК СрокНаправленияЗаявленияОВозврате,
//	|	КоммерческиеСоглашения.ПроцентРеализованногоТовара КАК ПроцентРеализованногоТовара,
//	|	КоммерческиеСоглашения.СрокРеализацииУказанногоПроцентаПоставленногоТовара КАК СрокРеализацииУказанногоПроцентаПоставленногоТовара,
//	|	КоммерческиеСоглашения.РазмерШтрафаШоуРум КАК РазмерШтрафаШоуРум,
//	|	КоммерческиеСоглашения.РазмерВыплатыПриРасторженииДоговора КАК РазмерВыплатыПриРасторженииДоговора,
//	|	КоммерческиеСоглашения.СрокОплатыТовара КАК СрокОплатыТовара,
//	|	КоммерческиеСоглашения.МаксимумДнейОтсрочки КАК МаксимумДнейОтсрочки,
//	|	КоммерческиеСоглашения.ТестовыйПериодЭДО КАК ТестовыйПериодЭДО,
//	|	КоммерческиеСоглашения.УслугаПоОрганизацииШоуРум КАК УслугаПоОрганизацииШоуРум,
//	|	КоммерческиеСоглашения.ВыплачиваютсяПремии КАК ВыплачиваютсяПремии,
//	|	КоммерческиеСоглашения.СрокиОтчетаОПродажах.Наименование КАК СрокиОтчетаОПродажах,
//	|	КоммерческиеСоглашения.РекламноДемонстрационныеМатериалыПанели КАК РекламноДемонстрационныеМатериалыПанели,
//	|	КоммерческиеСоглашения.ПолныйАвансовыйПлатежНаВесьТовар КАК ПолныйАвансовыйПлатежНаВесьТовар,
//	|	КоммерческиеСоглашения.РазмерАвансаЗаПартиюТовара КАК РазмерАвансаЗаПартиюТовара,
//	|	КоммерческиеСоглашения.ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара КАК ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара,
//	|	КоммерческиеСоглашения.ОтсрочкаПлатежаНаВесьТовар КАК ОтсрочкаПлатежаНаВесьТовар,
//	|	вогЮридическиеЛица.НаименованиеПолное КАК ПредставлениеКлиент,
//	|	СпрОрганизации.Ссылка КАК Организация,
//	|	СпрОрганизации.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
//	|	СпрОрганизации.Наименование КАК ОрганизацияНаименование,
//	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.КонтактноеЛицо) КАК ПредставлениеКонтактногоЛица,
//	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.CRM_Должность) КАК ПредставлениеДолжностьКонтактногоЛица,
//	|	КонтактныеЛицаПартнеров.CRM_Должность.Родительный КАК ПредставлениеДолжностьКонтактногоЛицаРодительный,
//	|	КонтактныеЛицаПартнеров.КонтактноеЛицо.Пол КАК ПолКонтактногоЛица,
//	|	КонтактныеЛицаПартнеров.КонтактноеЛицо.НеСклонятьФамилию КАК НеСклонятьФамилию,
//	|	ФизическиеЛица.Наименование КАК РуководительПредставление,
//	|	ФизическиеЛица.Пол КАК РуководительПол,
//	|	ОтветственныеЛица.Должность КАК РуководительДолжностьПредставление,
//	|	ЕСТЬNULL(ОтветственныеЛица.ПравоПодписиПоДоверенности, ЛОЖЬ) КАК ПравоПодписиПоДоверенности,
//	|	ОтветственныеЛица.ОснованиеПраваПодписи КАК ОснованиеПраваПодписи,
//	|	ИСТИНА КАК ИспользоватьПриложение1,
//	|	ВЫБОР
//	|		КОГДА КоммерческиеСоглашения.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ <> 0
//	|				ИЛИ КоммерческиеСоглашения.ПроцентРеализованногоТовара <> 0
//	|			ТОГДА ИСТИНА
//	|		ИНАЧЕ ЛОЖЬ
//	|	КОНЕЦ КАК ИспользоватьПриложение6,
//	|	ВЫБОР
//	|		КОГДА КоммерческиеСоглашения.СпособДоставкиТовара = ЗНАЧЕНИЕ(Перечисление.вогСпособыДоставкиТовара.ДоставкаТовараПоставщиком)
//	|			ТОГДА ИСТИНА
//	|		ИНАЧЕ ЛОЖЬ
//	|	КОНЕЦ КАК ИспользоватьПриложение2,
//	|	КоммерческиеСоглашения.УслугаПоОрганизацииШоуРум КАК ИспользоватьПриложение3,
//	|	КоммерческиеСоглашения.ВыплачиваютсяПремии КАК ИспользоватьПриложение4,
//	|	КоммерческиеСоглашения.ИспользоватьЭДО КАК ИспользоватьЭДО,
//	|	КоммерческиеСоглашения.СпособОтправкиЗаказа КАК СпособОтправкиЗаказа,
//	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
//	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
//	|	ВТ_Документы.ЮридическоеЛицо КАК ЮридическоеЛицо,
//	|	СпрОрганизации.ИНН + ""/"" + СпрОрганизации.КПП КАК ИННКПП,
//	|	вогЮридическиеЛица.CRM_ИНН + ""/"" + вогЮридическиеЛица.CRM_КПП КАК ИННКППКлиента,
//	|	вогЮридическиеЛица.CRM_ОГРН КАК ОГРНКлиента,
//	|	СпрОрганизации.CRM_ОГРН КАК ОГРН,
//	|	ВТ_Документы.Договор КАК Договор,
//	|	вогЮридическиеЛица.Ссылка КАК Клиент,
//	|	ВТ_Документы.Договор.вогДокументОснованиеПартнера КАК ДокументОснованиеПартнера,
//	|	вогЮридическиеЛица.ОрганизационноПравоваяФорма.ЮрФизЛицо КАК ЮрФизЛицо,
//	|	ВЫБОР
//	|		КОГДА КоммерческиеСоглашения.ОператорЭДО <> ЗНАЧЕНИЕ(Справочник.вогОператорыЭДО.ПустаяСсылка)
//	|			ТОГДА ИСТИНА
//	|		ИНАЧЕ ЛОЖЬ
//	|	КОНЕЦ КАК ИспользоватьПриложение5,
//	|	ВТ_Документы.Договор.вогОтветственноеЛицо КАК ОтветственноеЛицо,
//	|	вогКонтактныеЛицаПодписантыСрезПоследних.Номер КАК ДоверенностьНомер,
//	|	вогКонтактныеЛицаПодписантыСрезПоследних.ДатаДокумента КАК ДоверенностьДатаДокумента,
//	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС КАК ДоверенностьПериодДействияС,
//	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо КАК ДоверенностьПериодДействияПо,
//	|	вогКонтактныеЛицаПодписантыСрезПоследних.Основание КАК ДоверенностьОснование,
//	|	КоммерческиеСоглашения.ДоставкуВозвратаОсуществляетКлиент КАК ДоставкуВозвратаОсуществляетКлиент,
//	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ КАК ОтсрочкаОплатыПриПоставкеТовараПодЗаказ,
//	|	вогОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ГенеральныйДиректор,
//	|	КоммерческиеСоглашения.ПремияВычетСтоимостиПоТранзПоставке КАК ПремияВычетСтоимостиПоТранзПоставке,
//	|	КоммерческиеСоглашения.СтоимостьОбразцовВключенаВСтоимостьТовара КАК СтоимостьОбразцовВключенаВСтоимостьТовара,
//	|	КоммерческиеСоглашения.ЕстьДополнительноеСоглашениеПоНормеБоя КАК ЕстьДополнительноеСоглашениеПоНормеБоя,
//	|	КоммерческиеСоглашения.ЕстьВозвратТовара КАК ЕстьВозвратТовара,
//	|	КоммерческиеСоглашения.НормаБоя КАК НормаБоя,
//	|	КоммерческиеСоглашения.ОтчетныйПериодДляДопСоглашенияПоНормеБоя КАК ОтчетныйПериодДляДопСоглашенияПоНормеБоя,
//	|	КоммерческиеСоглашения.ПоставщикПроизводитВозвратНеликвидногоТовара КАК ПоставщикПроизводитВозвратНеликвидногоТовара,
//	|	КоммерческиеСоглашения.ЕстьПоставкаТовараПодЗаказ КАК ЕстьПоставкаТовараПодЗаказ
//	|ИЗ
//	|	Справочник.вогКоммерческиеСоглашения КАК КоммерческиеСоглашения
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
//	|			ПО ВТ_Документы.ЮридическоеЛицо = вогЮридическиеЛица.Ссылка
//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
//	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
//	|				ПО ОтветственныеЛица.ФизическоеЛицо = ФизическиеЛица.Ссылка
//	|			ПО ВТ_Документы.Договор.вогОтветственноеЛицо = ОтветственныеЛица.Ссылка
//	|				И ВТ_Документы.Договор.Организация = ОтветственныеЛица.Владелец
//	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК КонтактныеЛицаПартнеров
//	|			ПО ВТ_Документы.Договор.вогПодписантПартнера = КонтактныеЛицаПартнеров.КонтактноеЛицо
//	|				И ВТ_Документы.ЮридическоеЛицо = КонтактныеЛицаПартнеров.ОбъектСвязи
//	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогКонтактныеЛицаПодписанты.СрезПоследних КАК вогКонтактныеЛицаПодписантыСрезПоследних
//	|			ПО ВТ_Документы.ЮридическоеЛицо = вогКонтактныеЛицаПодписантыСрезПоследних.ЮридическоеЛицо
//	|				И ВТ_Документы.Договор.вогПодписантПартнера = вогКонтактныеЛицаПодписантыСрезПоследних.КонтактноеЛицо
//	|				И (ВТ_Документы.Ссылка.Дата >= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС
//	|						И (ВТ_Документы.Ссылка.Дата <= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо
//	|							ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
//	|					ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.Основание = ЗНАЧЕНИЕ(Перечисление.ВариантыОснованийПодписанта.Устава))
//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК вогОтветственныеЛицаОрганизаций
//	|			ПО ВТ_Документы.Договор.Организация = вогОтветственныеЛицаОрганизаций.Владелец
//	|				И (""Генеральный директор"" = вогОтветственныеЛицаОрганизаций.Должность)
//	|				И (ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) = вогОтветственныеЛицаОрганизаций.ДатаОкончания)
//	|		ПО КоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СпрОрганизации
//	|		ПО КоммерческиеСоглашения.Организация = СпрОрганизации.Ссылка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//	|	ПРЕДСТАВЛЕНИЕ(вогТорговыеТочкиКонтактнаяИнформация.Ссылка) КАК НаименованиеТорговойТочки,
//	|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка КАК Ссылка,
//	|	вогТорговыеТочкиКонтактнаяИнформация.Представление КАК АдресДоставки,
//	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.Номер КАК НомерСоглашения,
//	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия КАК ДатаСоглашения,
//	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
//	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
//	|	ВТ_Документы.Договор КАК Договор,
//	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита КАК МинимальнаяСтоимостьПартии,
////++ VOG Ульянов И.В. 14.04.2020 CRM-537	
//	|	ВЫБОР
//	|		КОГДА вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаПриложенияУсловияДоставки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//	|			ТОГДА вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия
//	|		ИНАЧЕ вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаПриложенияУсловияДоставки
//	|	КОНЕЦ КАК ДатаПриложенияАдресаДоставки
////-- VOG Ульянов И.В. 14.04.2020 CRM-537	
//	|ИЗ
//	|	Справочник.вогКоммерческиеСоглашения.АдресаДоставки КАК вогКоммерческиеСоглашенияАдресаДоставки
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
//	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.Ссылка = ВТ_Документы.Ссылка
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
//	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = вогТорговыеТочкиКонтактнаяИнформация.Ссылка
//	|			И (вогТорговыеТочкиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресТорговойТочки))
//	|			И (НЕ вогТорговыеТочкиКонтактнаяИнформация.Представление = """")
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
//	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = CRM_ОбъектыЗначенийКлассификаторов.Объект
//	|			И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатораМинСтоимостьТовара)
//	|			И вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.НаправлениеДеятельности = CRM_ОбъектыЗначенийКлассификаторов.Аналитика
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	ПРЕДСТАВЛЕНИЕ(вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка),
//	|	вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка,
//	|	вогРаспределительныеЦентрыКонтактнаяИнформация.Представление,
//	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.Номер,
//	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.Дата,
//	|	ВТ_Документы.ДатаДоговора,
//	|	ВТ_Документы.НомерДоговора,
//	|	ВТ_Документы.Договор,
//	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита,
////++ VOG Ульянов И.В. 14.04.2020 CRM-537	
//	|	ВЫБОР
//	|		КОГДА вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаПриложенияУсловияДоставки = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//	|			ТОГДА вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.Дата
//	|		ИНАЧЕ вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаПриложенияУсловияДоставки
//	|	КОНЕЦ
////-- VOG Ульянов И.В. 14.04.2020 CRM-537	
//	|ИЗ
//	|	Справочник.вогКоммерческиеСоглашения.АдресаДоставки КАК вогКоммерческиеСоглашенияАдресаДоставки
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
//	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.Ссылка = ВТ_Документы.Ссылка
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогРаспределительныеЦентры.КонтактнаяИнформация КАК вогРаспределительныеЦентрыКонтактнаяИнформация
//	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка
//	|			И (вогРаспределительныеЦентрыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресРаспределительногоЦентра))
//	|			И (НЕ вогРаспределительныеЦентрыКонтактнаяИнформация.Представление = """")
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
//	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = CRM_ОбъектыЗначенийКлассификаторов.Объект
//	|			И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатораМинСтоимостьТовара)
//	|ИТОГИ
//	|	МАКСИМУМ(НомерСоглашения),
//	|	МАКСИМУМ(ДатаСоглашения),
//	|	МАКСИМУМ(ДатаДоговора),
//	|	МАКСИМУМ(ДатаПриложенияАдресаДоставки)
//	|ПО
//	|	НомерДоговора
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//	|	вогКоммерческиеСоглашенияДокументыЭДО.ВидДокумента КАК ВидДокумента,
//	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.Номер КАК НомерСоглашения,
//	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ДатаНачалаДействия КАК ДатаСоглашения,
//	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
//	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
//	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ОператорЭДО КАК ОператорЭДО,
//	|	ВТ_Документы.Договор КАК Договор,
////++ VOG Ульянов И.В. 15.04.2020 CRM-561	
//	|	ВЫБОР
//	|		КОГДА вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ДатаПриложенияУсловияЭДО = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//	|			ТОГДА вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ДатаНачалаДействия
//	|		ИНАЧЕ вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ДатаПриложенияУсловияЭДО
//	|	КОНЕЦ КАК ДатаПриложенияУсловияЭДО
////-- VOG Ульянов И.В. 15.04.2020 CRM-561	
//	|ИЗ
//	|	Справочник.вогКоммерческиеСоглашения.ДокументыЭДО КАК вогКоммерческиеСоглашенияДокументыЭДО
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
//	|		ПО вогКоммерческиеСоглашенияДокументыЭДО.Ссылка = ВТ_Документы.Ссылка
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	вогКоммерческиеСоглашенияДокументыЭДО.ВидДокумента.Порядок
//	|ИТОГИ
//	|	МАКСИМУМ(НомерСоглашения),
//	|	МАКСИМУМ(ДатаСоглашения),
//	|	МАКСИМУМ(ДатаДоговора),
//	|	МАКСИМУМ(ОператорЭДО),
//	|	МАКСИМУМ(ДатаПриложенияУсловияЭДО)
//	|ПО
//	|	НомерДоговора
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
//	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
//	|	ВТ_Документы.Договор КАК Договор,
//	|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаСоглашения,
//	|	вогКоммерческиеСоглашения.Номер КАК НомерСоглашения
//	|ИЗ
//	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
//	|		ПО вогКоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
//	|ИТОГИ
//	|	МАКСИМУМ(ДатаДоговора),
//	|	МАКСИМУМ(ДатаСоглашения),
//	|	МАКСИМУМ(НомерСоглашения)
//	|ПО
//	|	НомерДоговора
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
//	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
//	|	ВТ_Документы.Договор КАК Договор,
//	|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаСоглашения,
//	|	вогКоммерческиеСоглашения.Номер КАК НомерСоглашения
//	|ИЗ
//	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
//	|		ПО вогКоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
//	|ИТОГИ
//	|	МАКСИМУМ(ДатаДоговора),
//	|	МАКСИМУМ(ДатаСоглашения),
//	|	МАКСИМУМ(НомерСоглашения)
//	|ПО
//	|	НомерДоговора";

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Владелец КАК ЮридическоеЛицо,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	вогЮридическиеЛица.Партнер КАК Партнер,
	|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаДоговора,
	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ ВТ_Договора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
	|	1 КАК Приоритет,
	|	ВТ_Договора.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Договора.НомерДоговора КАК НомерДоговора,
	|	ВТ_Договора.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	ВТ_Договора.Договор КАК Договор
	|ПОМЕСТИТЬ ВТ_Соглашения
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	|		ПО (вогКоммерческиеСоглашения.Ссылка В (&МассивСоглашений))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВТ_Соглашения.Ссылка КАК Ссылка,
	|	ВТ_Соглашения.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Соглашения.НомерДоговора КАК НомерДоговора,
	|	ВТ_Соглашения.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	ВТ_Соглашения.Договор КАК Договор
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	ВТ_Соглашения КАК ВТ_Соглашения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Соглашения.Приоритет,
	|	ВТ_Соглашения.Ссылка.ДатаНачалаДействия УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоммерческиеСоглашения.Ссылка КАК Ссылка,
	|	КоммерческиеСоглашения.Код КАК Код,
	|	КоммерческиеСоглашения.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.ДатаНачалаДействия < ВТ_Документы.ДатаДоговора
	|			ТОГДА ВТ_Документы.ДатаДоговора
	|		ИНАЧЕ КоммерческиеСоглашения.ДатаНачалаДействия
	|	КОНЕЦ КАК ДатаСоглашения,
	|	КоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	КоммерческиеСоглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	КоммерческиеСоглашения.Комментарий КАК Комментарий,
	|	КоммерческиеСоглашения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	КоммерческиеСоглашения.СпособДоставкиТовара КАК СпособДоставкиТовара,
	|	КоммерческиеСоглашения.ОтправкаЗаказаПоФормеНаЭлПочту КАК ОтправкаЗаказаПоФормеНаЭлПочту,
	|	КоммерческиеСоглашения.ОтправкаЗаказаЧерезEDI КАК ОтправкаЗаказаЧерезEDI,
	|	КоммерческиеСоглашения.ОтправкаЗаказаЧерезВ2В КАК ОтправкаЗаказаЧерезВ2В,
	|	0 КАК РазмерСкидкиНаПроведениеКоммерческойАкции,
	|	КоммерческиеСоглашения.РазмерСкидкиПриОткрытииНовогоМагазина КАК РазмерСкидкиПриОткрытииНовогоМагазина,
	|	КоммерческиеСоглашения.РазмерСкидкиНаНовыйТовар КАК РазмерСкидкиНаНовыйТовар,
	|	КоммерческиеСоглашения.РазмерСкидкиНаРекламноДемонстрационныеМатериалы КАК РазмерСкидкиНаРекламноДемонстрационныеМатериалы,
	|	КоммерческиеСоглашения.РазмерСкидкиНаТоварПодлежащийВозврату КАК РазмерСкидкиНаТоварПодлежащийВозврату,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриОткрытииНовогоМагазина КАК ОтсрочкаОплатыПриОткрытииНовогоМагазина,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриЗаказеНовогоТовара КАК ОтсрочкаОплатыПриЗаказеНовогоТовара,
	|	КоммерческиеСоглашения.СрокНаправленияЗаявленияОВозврате КАК СрокНаправленияЗаявленияОВозврате,
	|	КоммерческиеСоглашения.ПроцентРеализованногоТовара КАК ПроцентРеализованногоТовара,
	|	КоммерческиеСоглашения.СрокРеализацииУказанногоПроцентаПоставленногоТовара КАК СрокРеализацииУказанногоПроцентаПоставленногоТовара,
	|	КоммерческиеСоглашения.РазмерШтрафаШоуРум КАК РазмерШтрафаШоуРум,
	|	КоммерческиеСоглашения.РазмерВыплатыПриРасторженииДоговора КАК РазмерВыплатыПриРасторженииДоговора,
	|	КоммерческиеСоглашения.СрокОплатыТовара КАК СрокОплатыТовара,
	|	КоммерческиеСоглашения.МаксимумДнейОтсрочки КАК МаксимумДнейОтсрочки,
	|	КоммерческиеСоглашения.ТестовыйПериодЭДО КАК ТестовыйПериодЭДО,
	|	КоммерческиеСоглашения.УслугаПоОрганизацииШоуРум КАК УслугаПоОрганизацииШоуРум,
	|	КоммерческиеСоглашения.ВыплачиваютсяПремии КАК ВыплачиваютсяПремии,
	|	КоммерческиеСоглашения.СрокиОтчетаОПродажах.Наименование КАК СрокиОтчетаОПродажах,
	|	КоммерческиеСоглашения.РекламноДемонстрационныеМатериалыПанели КАК РекламноДемонстрационныеМатериалыПанели,
	|	КоммерческиеСоглашения.ПолныйАвансовыйПлатежНаВесьТовар КАК ПолныйАвансовыйПлатежНаВесьТовар,
	|	КоммерческиеСоглашения.РазмерАвансаЗаПартиюТовара КАК РазмерАвансаЗаПартиюТовара,
	|	КоммерческиеСоглашения.ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара КАК ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара,
	|	КоммерческиеСоглашения.ОтсрочкаПлатежаНаВесьТовар КАК ОтсрочкаПлатежаНаВесьТовар,
	|	вогЮридическиеЛица.НаименованиеПолное КАК ПредставлениеКлиент,
	|	СпрОрганизации.Ссылка КАК Организация,
	|	СпрОрганизации.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СпрОрганизации.Наименование КАК ОрганизацияНаименование,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.КонтактноеЛицо) КАК ПредставлениеКонтактногоЛица,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.CRM_Должность) КАК ПредставлениеДолжностьКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.CRM_Должность.Родительный КАК ПредставлениеДолжностьКонтактногоЛицаРодительный,
	|	КонтактныеЛицаПартнеров.КонтактноеЛицо.Пол КАК ПолКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.КонтактноеЛицо.НеСклонятьФамилию КАК НеСклонятьФамилию,
	|	ФизическиеЛица.Наименование КАК РуководительПредставление,
	|	ФизическиеЛица.Пол КАК РуководительПол,
	|	ОтветственныеЛица.Должность КАК РуководительДолжностьПредставление,
	|	ЕСТЬNULL(ОтветственныеЛица.ПравоПодписиПоДоверенности, ЛОЖЬ) КАК ПравоПодписиПоДоверенности,
	|	ОтветственныеЛица.ОснованиеПраваПодписи КАК ОснованиеПраваПодписи,
	|	ИСТИНА КАК ИспользоватьПриложение1,
	// ++ VOG Солодов В.В. 29.06.2021 DEV-91
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.ЕстьВозвратТовара
	|			И КоммерческиеСоглашения.ЕстьПоставкаТовараПодЗаказ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПриложение6,
	// До изменения
	//|	ВЫБОР
	//|		КОГДА КоммерческиеСоглашения.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ <> 0
	//|				ИЛИ КоммерческиеСоглашения.ПроцентРеализованногоТовара <> 0
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ИспользоватьПриложение6,
	// -- VOG Солодов В.В. 29.06.2021 DEV-91
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.СпособДоставкиТовара = ЗНАЧЕНИЕ(Перечисление.вогСпособыДоставкиТовара.ДоставкаТовараПоставщиком)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПриложение2,
	|	КоммерческиеСоглашения.УслугаПоОрганизацииШоуРум КАК ИспользоватьПриложение3,
	|	КоммерческиеСоглашения.ВыплачиваютсяПремии КАК ИспользоватьПриложение4,
	|	КоммерческиеСоглашения.ИспользоватьЭДО КАК ИспользоватьЭДО,
	|	КоммерческиеСоглашения.СпособОтправкиЗаказа КАК СпособОтправкиЗаказа,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	СпрОрганизации.ИНН + ""/"" + СпрОрганизации.КПП КАК ИННКПП,
	|	вогЮридическиеЛица.CRM_ИНН + ""/"" + вогЮридическиеЛица.CRM_КПП КАК ИННКППКлиента,
	|	вогЮридическиеЛица.CRM_ОГРН КАК ОГРНКлиента,
	|	СпрОрганизации.CRM_ОГРН КАК ОГРН,
	|	ВТ_Документы.Договор КАК Договор,
	|	вогЮридическиеЛица.Ссылка КАК Клиент,
	|	ВТ_Документы.Договор.вогДокументОснованиеПартнера КАК ДокументОснованиеПартнера,
	|	вогЮридическиеЛица.ОрганизационноПравоваяФорма.ЮрФизЛицо КАК ЮрФизЛицо,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.ОператорЭДО <> ЗНАЧЕНИЕ(Справочник.вогОператорыЭДО.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПриложение5,
	|	ВТ_Документы.Договор.вогОтветственноеЛицо КАК ОтветственноеЛицо,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.Номер КАК ДоверенностьНомер,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ДатаДокумента КАК ДоверенностьДатаДокумента,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС КАК ДоверенностьПериодДействияС,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо КАК ДоверенностьПериодДействияПо,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.Основание КАК ДоверенностьОснование,
	|	КоммерческиеСоглашения.ДоставкуВозвратаОсуществляетКлиент КАК ДоставкуВозвратаОсуществляетКлиент,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ КАК ОтсрочкаОплатыПриПоставкеТовараПодЗаказ,
	|	вогОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ГенеральныйДиректор,
	|	КоммерческиеСоглашения.ПремияВычетСтоимостиПоТранзПоставке КАК ПремияВычетСтоимостиПоТранзПоставке,
	|	КоммерческиеСоглашения.СтоимостьОбразцовВключенаВСтоимостьТовара КАК СтоимостьОбразцовВключенаВСтоимостьТовара,
	|	КоммерческиеСоглашения.ЕстьДополнительноеСоглашениеПоНормеБоя КАК ЕстьДополнительноеСоглашениеПоНормеБоя,
	|	КоммерческиеСоглашения.ЕстьВозвратТовара КАК ЕстьВозвратТовара,
	|	КоммерческиеСоглашения.НормаБоя КАК НормаБоя,
	|	КоммерческиеСоглашения.ОтчетныйПериодДляДопСоглашенияПоНормеБоя КАК ОтчетныйПериодДляДопСоглашенияПоНормеБоя,
	|	КоммерческиеСоглашения.ПоставщикПроизводитВозвратНеликвидногоТовара КАК ПоставщикПроизводитВозвратНеликвидногоТовара,
	|	КоммерческиеСоглашения.ЕстьПоставкаТовараПодЗаказ КАК ЕстьПоставкаТовараПодЗаказ
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК КоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|			ПО ВТ_Документы.ЮридическоеЛицо = вогЮридическиеЛица.Ссылка
	// ++ VOG Солодов В.В. 10.02.2021 DEV-150
	// До изменения
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	//|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	//|				ПО ОтветственныеЛица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	//|			ПО ВТ_Документы.Договор.вогОтветственноеЛицо = ОтветственныеЛица.Ссылка
	//|				И ВТ_Документы.Договор.Организация = ОтветственныеЛица.Владелец
	// -- VOG Солодов В.В. 10.02.2021 DEV-150
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК КонтактныеЛицаПартнеров
	|			ПО ВТ_Документы.Договор.вогПодписантПартнера = КонтактныеЛицаПартнеров.КонтактноеЛицо
	|				И ВТ_Документы.ЮридическоеЛицо = КонтактныеЛицаПартнеров.ОбъектСвязи
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогКонтактныеЛицаПодписанты.СрезПоследних КАК вогКонтактныеЛицаПодписантыСрезПоследних
	|			ПО ВТ_Документы.ЮридическоеЛицо = вогКонтактныеЛицаПодписантыСрезПоследних.ЮридическоеЛицо
	|				И ВТ_Документы.Договор.вогПодписантПартнера = вогКонтактныеЛицаПодписантыСрезПоследних.КонтактноеЛицо
	|				И (ВТ_Документы.Ссылка.Дата >= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС
	|						И (ВТ_Документы.Ссылка.Дата <= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо
	|							ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|					ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.Основание = ЗНАЧЕНИЕ(Перечисление.ВариантыОснованийПодписанта.Устава))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК вогОтветственныеЛицаОрганизаций
	|			ПО ВТ_Документы.Договор.Организация = вогОтветственныеЛицаОрганизаций.Владелец
	|				И (""Генеральный директор"" = вогОтветственныеЛицаОрганизаций.Должность)
	|				И (ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) = вогОтветственныеЛицаОрганизаций.ДатаОкончания)
	|		ПО КоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СпрОрганизации
	|		ПО КоммерческиеСоглашения.Организация = СпрОрганизации.Ссылка
	// ++ VOG Солодов В.В. 09.02.2021 DEV-150
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ПО ОтветственныеЛица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ПО КоммерческиеСоглашения.ОтветственноеЛицо = ОтветственныеЛица.Ссылка
	|			И КоммерческиеСоглашения.Организация = ОтветственныеЛица.Владелец
	// -- VOG Солодов В.В. 09.02.2021 DEV-150
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(вогТорговыеТочкиКонтактнаяИнформация.Ссылка) КАК НаименованиеТорговойТочки,
	|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	вогТорговыеТочкиКонтактнаяИнформация.Представление КАК АдресДоставки,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.Номер КАК НомерСоглашения,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия КАК ДатаСоглашения,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.Договор КАК Договор,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита КАК МинимальнаяСтоимостьПартии,
	|	ВЫБОР
	|		КОГДА ВТ_Документы.ДатаДоговора > вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия
	|			ТОГДА ВТ_Документы.ДатаДоговора
	|		ИНАЧЕ вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия
	|	КОНЕЦ КАК ДатаПриложенияАдресаДоставки
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.АдресаДоставки КАК вогКоммерческиеСоглашенияАдресаДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.Ссылка = ВТ_Документы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = вогТорговыеТочкиКонтактнаяИнформация.Ссылка
	|			И (вогТорговыеТочкиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресТорговойТочки))
	|			И (НЕ вогТорговыеТочкиКонтактнаяИнформация.Представление = """")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = CRM_ОбъектыЗначенийКлассификаторов.Объект
	|			И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатораМинСтоимостьТовара)
	|			И вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.НаправлениеДеятельности = CRM_ОбъектыЗначенийКлассификаторов.Аналитика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка),
	|	вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка,
	|	вогРаспределительныеЦентрыКонтактнаяИнформация.Представление,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.Номер,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия,
	|	ВТ_Документы.ДатаДоговора,
	|	ВТ_Документы.НомерДоговора,
	|	ВТ_Документы.Договор,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита,
	|	ВЫБОР
	|		КОГДА ВТ_Документы.ДатаДоговора > вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия
	|			ТОГДА ВТ_Документы.ДатаДоговора
	|		ИНАЧЕ вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия
	|	КОНЕЦ
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.АдресаДоставки КАК вогКоммерческиеСоглашенияАдресаДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.Ссылка = ВТ_Документы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогРаспределительныеЦентры.КонтактнаяИнформация КАК вогРаспределительныеЦентрыКонтактнаяИнформация
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка
	|			И (вогРаспределительныеЦентрыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресРаспределительногоЦентра))
	|			И (НЕ вогРаспределительныеЦентрыКонтактнаяИнформация.Представление = """")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = CRM_ОбъектыЗначенийКлассификаторов.Объект
	|			И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатораМинСтоимостьТовара)
	|			И вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.НаправлениеДеятельности = CRM_ОбъектыЗначенийКлассификаторов.Аналитика
	|ИТОГИ
	|	МАКСИМУМ(НомерСоглашения),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(ДатаПриложенияАдресаДоставки)
	|ПО
	|	НомерДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	вогКоммерческиеСоглашенияДокументыЭДО.ВидДокумента КАК ВидДокумента,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.Номер КАК НомерСоглашения,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ДатаНачалаДействия КАК ДатаСоглашения,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ОператорЭДО КАК ОператорЭДО,
	|	ВТ_Документы.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ВТ_Документы.ДатаДоговора > вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ДатаНачалаДействия
	|			ТОГДА ВТ_Документы.ДатаДоговора
	|		ИНАЧЕ вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ДатаНачалаДействия
	|	КОНЕЦ КАК ДатаПриложенияУсловияЭДО
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.ДокументыЭДО КАК вогКоммерческиеСоглашенияДокументыЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияДокументыЭДО.Ссылка = ВТ_Документы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	вогКоммерческиеСоглашенияДокументыЭДО.ВидДокумента.Порядок
	|ИТОГИ
	|	МАКСИМУМ(НомерСоглашения),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(ОператорЭДО),
	|	МАКСИМУМ(ДатаПриложенияУсловияЭДО)
	|ПО
	|	НомерДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.Договор КАК Договор,
	|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаСоглашения,
	|	вогКоммерческиеСоглашения.Номер КАК НомерСоглашения
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(НомерСоглашения)
	|ПО
	|	НомерДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.Договор КАК Договор,
	|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаСоглашения,
	|	вогКоммерческиеСоглашения.Номер КАК НомерСоглашения
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(НомерСоглашения)
	|ПО
	|	НомерДоговора";

	Запрос.УстановитьПараметр("МассивСоглашений", МассивСоглашений);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ЗначениеКлассификатораМинСтоимостьТовара", Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("fff7455d-cfd9-11e8-a684-005056bc3fe8")));
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
// --- Кулаков П.Л.

// +++ VOG Кулаков П.Л. 18.03.2020 CRM-447
#Область Версия3

Процедура СформироватьПечатнуюФормуКоммерческоеСоглашениеВерсия3(ТабличныйДокумент, МассивОбъектов, ОбъектыПечати, НомерПриложения, ПоказыватьПодписи,НаправлениеДеятельности = Неопределено)
	
	// ++ VOG Солодов В.В. 28.06.2021 DEV-69
	ПараметрыПолученияДанных = ПараметрыПолученияДанных();
	ПараметрыПолученияДанных.МассивОбъектов 			= МассивОбъектов;
	ПараметрыПолученияДанных.НаправлениеДеятельности 	= НаправлениеДеятельности;
	ПараметрыПолученияДанных.Версия 					= 3;
	
	Результат = ПолучитьДанныеДляПечатнойФормыКоммерческоеСоглашение(ПараметрыПолученияДанных);
	// До изменения
	//Результат = ПолучитьДанныеДляПечатнойФормыКоммерческоеСоглашениеВерсия3(МассивОбъектов,НаправлениеДеятельности);
	// -- VOG Солодов В.В. 28.06.2021 DEV-69
	
	СтруктураДанных = Новый Структура;
	
	Для Каждого Колонка Из Результат[3].Колонки Цикл
		СтруктураДанных.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ДанныеПечати = Результат[3].Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		ПоследнийНомер = 0;
		
		НомераПриложений = Новый Структура;
		НомераПриложений.Вставить("НомерПриложение1");
		НомераПриложений.Вставить("НомерПриложение2");
		НомераПриложений.Вставить("НомерПриложение3");
		НомераПриложений.Вставить("НомерПриложение4");
		НомераПриложений.Вставить("НомерПриложение5");
		НомераПриложений.Вставить("НомерПриложение6");
		
		Для Счетчик = 1 по 6 цикл
			Если ДанныеПечати["ИспользоватьПриложение"+Строка(Счетчик)] Тогда
				ПоследнийНомер = ПоследнийНомер + 1;
				НомераПриложений["НомерПриложение"+Строка(Счетчик)] = Строка(ПоследнийНомер);
			Иначе
				НомераПриложений["НомерПриложение"+Строка(Счетчик)] = "";
			КонецЕсли;			
		КонецЦикла;	
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		СтруктураДанныхПечати = СформироватьСтруктуруДанныхПечатиВерсия3(ДанныеПечати, СтруктураДанных);
		
		Если Не ПроверитьЗаполнениеШапки(СтруктураДанныхПечати) Тогда
			Прервать;
		КонецЕсли;
		
		Если ПоказыватьПодписи Тогда
			СтруктураКартинок = РегистрыСведений.вогПечатиИПодписи.ПолучитьПодписьПечать(ДанныеПечати.Организация, ДанныеПечати.ОтветственноеЛицо);
		КонецЕсли;
		
		// +++ Кулаков П.Л. CRM-487 06.05.2020
		ТабличныйДокумент.РазмерКолонтитулаСнизу = 14;
		ТабличныйДокумент.ПолеСнизу = 16;
		// --- Кулаков П.Л.
		
		ЗаполнитьТабличныйДокументКоммерческоеСоглашениеВерсия3(ТабличныйДокумент,	
			СтруктураДанныхПечати, 
			ПоказыватьПодписи, 
			НомераПриложений, 
			СтруктураКартинок);
			
		// +++ VOG Кулаков П.Л. 23.03.2020 CRM-487
		ТабличныйДокумент.НижнийКолонтитул.НачальнаяСтраница = 1;
		ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
		ШаблонКолонтитула = "Приложение №2 от [ДатаПриложения]г. к Договору поставки [Номер] от [Дата]г." + Символы.ПС + "Страница [&НомерСтраницы] из [&СтраницВсего]";
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить("Номер",ДанныеПечати.НомерДоговора);
		ПараметрыСтроки.Вставить("Дата",Формат(ДанныеПечати.ДатаДоговора,"ДФ=dd.MM.yyyy"));
		// +++ VOG Кулаков П.Л. 20.08.2020 CRM-848
		Если ДанныеПечати.ДатаДоговора > ДанныеПечати.ДатаСоглашения Тогда
			ДатаСоглашения = ДанныеПечати.ДатаДоговора;
		Иначе
			ДатаСоглашения = ДанныеПечати.ДатаСоглашения;
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		ПараметрыСтроки.Вставить("ДатаПриложения",Формат(ДатаСоглашения,"ДФ=dd.MM.yyyy"));
		ТекстКолонтитула = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКолонтитула,ПараметрыСтроки);
		ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = ТекстКолонтитула;
		ТабличныйДокумент.НижнийКолонтитул.Шрифт = Новый Шрифт("Times New Roman",8);
		// --- VOG Кулаков П.Л.
		
		// Приложения к соглашению
		ДанныеПечатиАдресовДоставки = Результат[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ДанныеПечатиДокументовЭДО 	= Результат[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ДанныеПечатиПриложений 		= Результат[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		// +++ Кулаков П.Л. CRM-487
		//	ЗаполнитьПриложение(ТабличныйДокумент,
		//		СтруктураДанныхПечати,
		//		ДанныеПечати.ИспользоватьПриложение1,
		//		"Приложение1",
		//		ДанныеПечатиПриложений,
		//		НомераПриложений["НомерПриложение1"],
		//		ПоказыватьПодписи,
		//		СтруктураКартинок,
		//		Истина);
		//		
		//	ЗаполнитьПриложение(ТабличныйДокумент,
		//		СтруктураДанныхПечати,
		//		ДанныеПечати.ИспользоватьПриложение2,
		//		"Приложение2",
		//		ДанныеПечатиАдресовДоставки,
		//		НомераПриложений["НомерПриложение2"],
		//		ПоказыватьПодписи,
		//		СтруктураКартинок,
		//		Истина);
		//
		//Если ДанныеПечати.ИспользоватьПриложение4 тогда
		//	
		//	РезультатПриложение4 = ПолучитьДанныеДляПечатнойФормыПриложение4(МассивОбъектов,НаправлениеДеятельности);  // доработано VOG Ульянов И.В. 04.03.2020 CRM-420
		//	ДанныеПечатиПриложение4 = РезультатПриложение4.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//	ЗаполнитьПриложение4(
		//		ТабличныйДокумент,
		//		СтруктураДанныхПечати,
		//		Истина,
		//		"Приложение4",
		//		ДанныеПечатиПриложение4,
		//		НомераПриложений["НомерПриложение4"],
		//		ПоказыватьПодписи,
		//		СтруктураКартинок,
		//		Истина);
		//	
		//КонецЕсли;
		//
		//	ЗаполнитьПриложение(
		//		ТабличныйДокумент,
		//		СтруктураДанныхПечати,
		//		ДанныеПечати.ИспользоватьПриложение5,
		//		"Приложение5",
		//		ДанныеПечатиДокументовЭДО,
		//		НомераПриложений["НомерПриложение5"],
		//		ПоказыватьПодписи,
		//		СтруктураКартинок,
		//		Истина);
		//		
		//	ЗаполнитьПриложение(
		//		ТабличныйДокумент,
		//		СтруктураДанныхПечати,
		//		ДанныеПечати.ИспользоватьПриложение6,
		//		"Приложение6",
		//		ДанныеПечатиПриложений,
		//		НомераПриложений["НомерПриложение6"],
		//		ПоказыватьПодписи,
		//		СтруктураКартинок,
		//		Истина);
		//	
		//Если ДанныеПечати.ЕстьДополнительноеСоглашениеПоНормеБоя тогда
		//	ЗаполнитьПриложение(
		//		ТабличныйДокумент,
		//		СтруктураДанныхПечати,
		//		ДанныеПечати.ЕстьДополнительноеСоглашениеПоНормеБоя,
		//		"ДопСоглашениеНормаБоя",
		//		ДанныеПечати,
		//		0,
		//		ПоказыватьПодписи,
		//		СтруктураКартинок,
		//		Истина);
		//КонецЕсли;
		// --- Кулаков П.Л.
			
	КонецЦикла;

КонецПроцедуры	

Процедура ЗаполнитьТабличныйДокументКоммерческоеСоглашениеВерсия3(ТабличныйДокумент, ДанныеПечати, ПоказыватьПодписи = Ложь, НомераПриложений, СтруктураКартинок = Неопределено) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.вогКоммерческиеСоглашения.ПФ_MXL_КоммерческоеСоглашениеВерсия3");
	
	НастроитьМакетВерсия3(ДанныеПечати, Макет);
	
	ТаблицаОбластейКВыводу 		= Новый ТаблицаЗначений;
	ТаблицаОбластейКВыводу.Колонки.Добавить("Область");
	ТаблицаОбластейКВыводу.Колонки.Добавить("ЭтоРаздел");
	ТаблицаОбластейКВыводу.Колонки.Добавить("ИмяОбласти");
	
	ОбластьШапка 				= Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
	// +++ VOG Кулаков П.Л. 19.08.2020 CRM-848
	Если ОбластьШапка.Параметры.ДатаСоглашения < ДанныеПечати.ДатаНачалаДействия Тогда
		ОбластьШапка.Параметры.ДатаСоглашения = ДанныеПечати.ДатаНачалаДействия;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	ОбластьШапка.Параметры.ТоварнаяГруппа = ?(ДанныеПечати.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои,"ОБОИ","ПЛИТА");
	ОбластьТаблицаПодвал 		= Макет.ПолучитьОбласть("ТаблицаПодвал");
	СтруктураОбластей 			= СформироватьСтруктуруОбластейВерсия3(ДанныеПечати, Макет);
	
	НомерПункта62 = "";
	Для Каждого ИмяОбласти Из СтруктураОбластей Цикл
		
		Область = Макет.ПолучитьОбласть(ИмяОбласти.Ключ);
		Область.Параметры.Заполнить(ДанныеПечати);
		Область.Параметры.Заполнить(НомераПриложений);
		
		// Заполнение номера пункта
		УИД = Новый УникальныйИдентификатор;
		
		СтруктураПараметра = Новый Структура;
		СтруктураПараметра.Вставить("НомерПункта", УИД);
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметра, Область.Параметры);
		
		Если СтруктураПараметра.НомерПункта <> УИД Тогда
			Область.Параметры.НомерПункта = ИмяОбласти.Значение;
		КонецЕсли;
		//
		Если ИмяОбласти.Ключ = "Раздел2_Пункт6_ПодПункт2"
			Или ИмяОбласти.Ключ = "Раздел2_Вариант7_Пункт2" Тогда // VOG Солодов В.В. 14.05.2020 CRM-611 // Добавил условие
			НомерПункта62 = ИмяОбласти.Значение; 	
		КонецЕсли;
		Если ИмяОбласти.Ключ = "Раздел2_Пункт7"
			Или ИмяОбласти.Ключ = "Раздел2_Вариант8" Тогда // VOG Солодов В.В. 14.05.2020 CRM-611 // Добавил условие
			Область.Параметры.Пункт62 = НомерПункта62; 	
		КонецЕсли;
		НоваяСтрокаКВыводу = ТаблицаОбластейКВыводу.Добавить();
		НоваяСтрокаКВыводу.Область 			= Область;
		НоваяСтрокаКВыводу.ИмяОбласти 		= ИмяОбласти.Ключ;
		
		Если СтрНайти(ИмяОбласти.Ключ, "Пункт") = 0 Тогда
			НоваяСтрокаКВыводу.ЭтоРаздел 	= Истина;
		Иначе
			НоваяСтрокаКВыводу.ЭтоРаздел 	= Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Вывод документа
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	// ++ VOG Солодов В.В. 04.12.2019 bugs 976
	//ПустаяОбласть = Макет.ПолучитьОбласть("ОбластьПустая");
	// -- VOG Солодов В.В. 04.12.2019
	ОбластьПодписи2 = Макет.ПолучитьОбласть("Подписи2");
	ОбластьПустая = Макет.ПолучитьОбласть("ОбластьПустая");
	ПоследняяОбласть = Неопределено;
	
	ОбластьРазрыв 			= Макет.ПолучитьОбласть("Разрыв");
	нОб = ТаблицаОбластейКВыводу.Добавить();
	нОб.Область = ОбластьРазрыв;
	нОб.ЭтоРаздел = Истина;
	нОб.ИмяОбласти = "Разрыв";
	
	Если ДанныеПечати.ИспользоватьПриложение1 Тогда
		ОбластьПриложение1 	= Макет.ПолучитьОбласть("Приложение1");
		ОбластьПриложение1.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение1;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение1";
	КонецЕсли;
	
	Если ДанныеПечати.ИспользоватьПриложение2 Тогда
		ОбластьПриложение2 	= Макет.ПолучитьОбласть("Приложение2");
		ОбластьПриложение2.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение2;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение2";
	КонецЕсли;
	
	Если ДанныеПечати.ИспользоватьПриложение3 Тогда
		ОбластьПриложение3 	= Макет.ПолучитьОбласть("Приложение3");
		ОбластьПриложение3.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение3;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение3";
	КонецЕсли;
	
	Если ДанныеПечати.ИспользоватьПриложение4 Тогда
		ОбластьПриложение4 	= Макет.ПолучитьОбласть("Приложение4");
		ОбластьПриложение4.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение4;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение4";
	КонецЕсли;
	
	Если ДанныеПечати.ИспользоватьПриложение5 Тогда
		ОбластьПриложение5 	= Макет.ПолучитьОбласть("Приложение5");
		ОбластьПриложение5.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение5;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение5";
	КонецЕсли;
	Если ДанныеПечати.ИспользоватьПриложение6 Тогда
		ОбластьПриложение6 	= Макет.ПолучитьОбласть("Приложение6");
		ОбластьПриложение6.Параметры.Заполнить(НомераПриложений);
		нОб = ТаблицаОбластейКВыводу.Добавить();
		нОб.Область = ОбластьПриложение6;
		нОб.ЭтоРаздел = Истина;
		нОб.ИмяОбласти = "Приложение6";
	КонецЕсли;
	
	
	ОбластьРазрыв 			= Макет.ПолучитьОбласть("Разрыв");
	нОб = ТаблицаОбластейКВыводу.Добавить();
	нОб.Область = ОбластьРазрыв;
	нОб.ЭтоРаздел = Истина;
	нОб.ИмяОбласти = "Разрыв";
	
	// +++ VOG Кулаков П.Л. 23.03.2020 CRM-487
	//Для Индекс = 1 По 6 Цикл
	//	ОбластьПодпись 			= Макет.ПолучитьОбласть("Подписи_" + Индекс);
	//	ОбластьПодпись.Параметры.Заполнить(ДанныеПечати);
	//	нОб = ТаблицаОбластейКВыводу.Добавить();
	//	нОб.Область = ОбластьПодпись;
	//	нОб.ЭтоРаздел = Истина;
	//	нОб.ИмяОбласти = "Подписи_" + Индекс;
	//КонецЦикла;
	// --- VOG Кулаков П.Л.
	
	ОбластьПодписи 			= Макет.ПолучитьОбласть("Подписи");
	ОбластьПодписи.Параметры.Заполнить(ДанныеПечати);
	нОб = ТаблицаОбластейКВыводу.Добавить();
	нОб.Область = ОбластьРазрыв;
	нОб.ЭтоРаздел = Истина;
	нОб.ИмяОбласти = "Подписи";
	
	Если ПоказыватьПодписи Тогда
		Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
			ОбластьПодписи.Рисунки["ПодписиКартинкаПодпись"].Картинка = СтруктураКартинок.Подпись;
		КонецЕсли;
		Если ТипЗнч(СтруктураКартинок.Печать) = Тип("Картинка") тогда
			ОбластьПодписи.Рисунки["ПодписиКартинкаПечать"].Картинка = СтруктураКартинок.Печать;
		КонецЕсли;
	КонецЕсли;
	
	нОб = ТаблицаОбластейКВыводу.Добавить();
	нОб.Область = ОбластьПодписи;
	нОб.ЭтоРаздел = Истина;
	нОб.ИмяОбласти = "Подписи";
	
	
	Для Каждого СтрокаОбласть Из ТаблицаОбластейКВыводу Цикл
		//БЫЛО
		//
		//// ++ VOG Солодов В.В. 04.12.2019 bugs 976
		//Пока Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
		//	ТабличныйДокумент.Вывести(ПустаяОбласть);
		//КонецЦикла;
		//// До изменения
		////Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
		////	
		////	//ТабличныйДокумент.Вывести(ОбластьТаблицаПодвал);
		////	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		////	
		////КонецЕсли;
		//// -- VOG Солодов В.В. 04.12.2019
		//
		//ТабличныйДокумент.Вывести(СтрокаОбласть.Область);
		
		
		МассивВыводимыхОбластей = Новый Массив;
		МассивВыводимыхОбластей.Добавить(СтрокаОбласть.Область);
		МассивВыводимыхОбластей.Добавить(ОбластьПодписи2);
		
		Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			
			МассивВыводимыхОбластей = Новый Массив;
			МассивВыводимыхОбластей.Добавить(ОбластьПодписи2);
			
			Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				ТабличныйДокумент.УдалитьОбласть(ПоследняяОбласть);
				
				МассивВыводимыхОбластей.Добавить(ОбластьПустая);
				//МассивВыводимыхОбластей.Добавить(ОбластьПодписи);
				
				Пока ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
					ТабличныйДокумент.Вывести(ОбластьПустая);
				КонецЦикла;
				
				Если ПоказыватьПодписи Тогда
					Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
						ОбластьПодписи2.Рисунки["ПодписиКартинкаПодписьЛисты"].Картинка = СтруктураКартинок.Подпись;
					КонецЕсли;
				КонецЕсли;					
				ТабличныйДокумент.Вывести(ОбластьПодписи2);
				//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ПоследняяОбласть);
				
			Иначе
				
				МассивВыводимыхОбластей.Добавить(ОбластьПустая);
				//МассивВыводимыхОбластей.Добавить(ОбластьПодписи);
				
				Пока ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
					ТабличныйДокумент.Вывести(ОбластьПустая);
				КонецЦикла;
				
				Если ПоказыватьПодписи Тогда
					Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
						ОбластьПодписи2.Рисунки["ПодписиКартинкаПодписьЛисты"].Картинка = СтруктураКартинок.Подпись;
					КонецЕсли;	
				КонецЕсли;					
				ТабличныйДокумент.Вывести(ОбластьПодписи2);
				//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(СтрокаОбласть.Область);
		ПоследняяОбласть = СтрокаОбласть.Область;
		
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыКоммерческоеСоглашениеВерсия3(МассивОбъектов,НаправлениеДеятельности = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Владелец КАК ЮридическоеЛицо,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	вогЮридическиеЛица.Партнер КАК Партнер,
	|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаДоговора,
	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор
	|ПОМЕСТИТЬ ВТ_Договора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
	|	1 КАК Приоритет,
	|	ВТ_Договора.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Договора.НомерДоговора КАК НомерДоговора,
	|	ВТ_Договора.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	ВТ_Договора.Договор КАК Договор
	|ПОМЕСТИТЬ ВТ_Соглашения
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	|		ПО вогКоммерческиеСоглашения.ЮридическоеЛицо = ВТ_Договора.ЮридическоеЛицо
	|			И вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	|			И (НЕ вогКоммерческиеСоглашения.ПометкаУдаления)
	|			И (вогКоммерческиеСоглашения.НаправлениеДеятельности = &НаправлениеДеятельности)
	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован))
	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласованКлиентом))
	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогКоммерческиеСоглашения.Ссылка,
	|	2,
	|	ВТ_Договора.ДатаДоговора,
	|	ВТ_Договора.НомерДоговора,
	|	ВТ_Договора.ЮридическоеЛицо,
	|	ВТ_Договора.Договор
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	|		ПО вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	|			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	|			И (вогКоммерческиеСоглашения.ЮридическоеЛицо = ЗНАЧЕНИЕ(Справочник.вогЮридическиеЛица.ПустаяСсылка))
	|			И (НЕ вогКоммерческиеСоглашения.ПометкаУдаления)
	|			И (вогКоммерческиеСоглашения.НаправлениеДеятельности = &НаправлениеДеятельности)
	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован))
	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласованКлиентом))
	|			И (вогКоммерческиеСоглашения.Статус <> ЗНАЧЕНИЕ(Перечисление.вогСтатусыДоговоровКоммерческихСоглашений.Закрыт))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВТ_Соглашения.Ссылка КАК Ссылка,
	|	ВТ_Соглашения.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Соглашения.НомерДоговора КАК НомерДоговора,
	|	ВТ_Соглашения.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	ВТ_Соглашения.Договор КАК Договор
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	ВТ_Соглашения КАК ВТ_Соглашения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Соглашения.Приоритет,
	|	ВТ_Соглашения.Ссылка.ДатаНачалаДействия УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КоммерческиеСоглашения.Ссылка КАК Ссылка,
	|	КоммерческиеСоглашения.Код КАК Код,
	|	КоммерческиеСоглашения.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.ДатаНачалаДействия < ВТ_Документы.ДатаДоговора
	|			ТОГДА ВТ_Документы.ДатаДоговора
	|		ИНАЧЕ КоммерческиеСоглашения.ДатаНачалаДействия
	|	КОНЕЦ КАК ДатаСоглашения,
	|	КоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	КоммерческиеСоглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	КоммерческиеСоглашения.Комментарий КАК Комментарий,
	|	КоммерческиеСоглашения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	КоммерческиеСоглашения.СпособДоставкиТовара КАК СпособДоставкиТовара,
	|	КоммерческиеСоглашения.ОтправкаЗаказаПоФормеНаЭлПочту КАК ОтправкаЗаказаПоФормеНаЭлПочту,
	|	КоммерческиеСоглашения.ОтправкаЗаказаЧерезEDI КАК ОтправкаЗаказаЧерезEDI,
	|	КоммерческиеСоглашения.ОтправкаЗаказаЧерезВ2В КАК ОтправкаЗаказаЧерезВ2В,
	|	0 КАК РазмерСкидкиНаПроведениеКоммерческойАкции,
	|	КоммерческиеСоглашения.РазмерСкидкиПриОткрытииНовогоМагазина КАК РазмерСкидкиПриОткрытииНовогоМагазина,
	|	КоммерческиеСоглашения.РазмерСкидкиНаНовыйТовар КАК РазмерСкидкиНаНовыйТовар,
	|	КоммерческиеСоглашения.РазмерСкидкиНаРекламноДемонстрационныеМатериалы КАК РазмерСкидкиНаРекламноДемонстрационныеМатериалы,
	|	КоммерческиеСоглашения.РазмерСкидкиНаТоварПодлежащийВозврату КАК РазмерСкидкиНаТоварПодлежащийВозврату,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриОткрытииНовогоМагазина КАК ОтсрочкаОплатыПриОткрытииНовогоМагазина,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриЗаказеНовогоТовара КАК ОтсрочкаОплатыПриЗаказеНовогоТовара,
	|	КоммерческиеСоглашения.СрокНаправленияЗаявленияОВозврате КАК СрокНаправленияЗаявленияОВозврате,
	|	КоммерческиеСоглашения.ПроцентРеализованногоТовара КАК ПроцентРеализованногоТовара,
	|	КоммерческиеСоглашения.СрокРеализацииУказанногоПроцентаПоставленногоТовара КАК СрокРеализацииУказанногоПроцентаПоставленногоТовара,
	|	КоммерческиеСоглашения.РазмерШтрафаШоуРум КАК РазмерШтрафаШоуРум,
	|	КоммерческиеСоглашения.РазмерВыплатыПриРасторженииДоговора КАК РазмерВыплатыПриРасторженииДоговора,
	|	КоммерческиеСоглашения.СрокОплатыТовара КАК СрокОплатыТовара,
	|	КоммерческиеСоглашения.МаксимумДнейОтсрочки КАК МаксимумДнейОтсрочки,
	|	КоммерческиеСоглашения.ТестовыйПериодЭДО КАК ТестовыйПериодЭДО,
	|	КоммерческиеСоглашения.УслугаПоОрганизацииШоуРум КАК УслугаПоОрганизацииШоуРум,
	|	КоммерческиеСоглашения.ВыплачиваютсяПремии КАК ВыплачиваютсяПремии,
	|	КоммерческиеСоглашения.СрокиОтчетаОПродажах.Наименование КАК СрокиОтчетаОПродажах,
	|	КоммерческиеСоглашения.РекламноДемонстрационныеМатериалыПанели КАК РекламноДемонстрационныеМатериалыПанели,
	|	КоммерческиеСоглашения.ПолныйАвансовыйПлатежНаВесьТовар КАК ПолныйАвансовыйПлатежНаВесьТовар,
	|	КоммерческиеСоглашения.РазмерАвансаЗаПартиюТовара КАК РазмерАвансаЗаПартиюТовара,
	|	КоммерческиеСоглашения.ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара КАК ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара,
	|	КоммерческиеСоглашения.ОтсрочкаПлатежаНаВесьТовар КАК ОтсрочкаПлатежаНаВесьТовар,
	|	вогЮридическиеЛица.НаименованиеПолное КАК ПредставлениеКлиент,
	|	СпрОрганизации.Ссылка КАК Организация,
	|	СпрОрганизации.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СпрОрганизации.Наименование КАК ОрганизацияНаименование,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.КонтактноеЛицо) КАК ПредставлениеКонтактногоЛица,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.CRM_Должность) КАК ПредставлениеДолжностьКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.CRM_Должность.Родительный КАК ПредставлениеДолжностьКонтактногоЛицаРодительный,
	|	КонтактныеЛицаПартнеров.КонтактноеЛицо.Пол КАК ПолКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.КонтактноеЛицо.НеСклонятьФамилию КАК НеСклонятьФамилию,
	|	ФизическиеЛица.Наименование КАК РуководительПредставление,
	|	ФизическиеЛица.Пол КАК РуководительПол,
	|	ОтветственныеЛица.Должность КАК РуководительДолжностьПредставление,
	|	ЕСТЬNULL(ОтветственныеЛица.ПравоПодписиПоДоверенности, ЛОЖЬ) КАК ПравоПодписиПоДоверенности,
	|	ОтветственныеЛица.ОснованиеПраваПодписи КАК ОснованиеПраваПодписи,
	|	ИСТИНА КАК ИспользоватьПриложение1,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ <> 0
	|				ИЛИ КоммерческиеСоглашения.ПроцентРеализованногоТовара <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПриложение6,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.СпособДоставкиТовара = ЗНАЧЕНИЕ(Перечисление.вогСпособыДоставкиТовара.ДоставкаТовараПоставщиком)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПриложение2,
	|	КоммерческиеСоглашения.УслугаПоОрганизацииШоуРум КАК ИспользоватьПриложение3,
	|	КоммерческиеСоглашения.ВыплачиваютсяПремии КАК ИспользоватьПриложение4,
	|	КоммерческиеСоглашения.ИспользоватьЭДО КАК ИспользоватьЭДО,
	|	КоммерческиеСоглашения.СпособОтправкиЗаказа КАК СпособОтправкиЗаказа,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	СпрОрганизации.ИНН + ""/"" + СпрОрганизации.КПП КАК ИННКПП,
	|	вогЮридическиеЛица.CRM_ИНН + ""/"" + вогЮридическиеЛица.CRM_КПП КАК ИННКППКлиента,
	|	вогЮридическиеЛица.CRM_ОГРН КАК ОГРНКлиента,
	|	СпрОрганизации.CRM_ОГРН КАК ОГРН,
	|	ВТ_Документы.Договор КАК Договор,
	|	вогЮридическиеЛица.Ссылка КАК Клиент,
	|	ВТ_Документы.Договор.вогДокументОснованиеПартнера КАК ДокументОснованиеПартнера,
	|	вогЮридическиеЛица.ОрганизационноПравоваяФорма.ЮрФизЛицо КАК ЮрФизЛицо,
	|	ВЫБОР
	|		КОГДА КоммерческиеСоглашения.ОператорЭДО <> ЗНАЧЕНИЕ(Справочник.вогОператорыЭДО.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИспользоватьПриложение5,
	|	ВТ_Документы.Договор.вогОтветственноеЛицо КАК ОтветственноеЛицо,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.Номер КАК ДоверенностьНомер,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ДатаДокумента КАК ДоверенностьДатаДокумента,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС КАК ДоверенностьПериодДействияС,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо КАК ДоверенностьПериодДействияПо,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.Основание КАК ДоверенностьОснование,
	|	КоммерческиеСоглашения.ДоставкуВозвратаОсуществляетКлиент КАК ДоставкуВозвратаОсуществляетКлиент,
	|	КоммерческиеСоглашения.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ КАК ОтсрочкаОплатыПриПоставкеТовараПодЗаказ,
	|	вогОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ГенеральныйДиректор,
	|	КоммерческиеСоглашения.ПремияВычетСтоимостиПоТранзПоставке КАК ПремияВычетСтоимостиПоТранзПоставке,
	|	КоммерческиеСоглашения.СтоимостьОбразцовВключенаВСтоимостьТовара КАК СтоимостьОбразцовВключенаВСтоимостьТовара,
	|	КоммерческиеСоглашения.ЕстьДополнительноеСоглашениеПоНормеБоя КАК ЕстьДополнительноеСоглашениеПоНормеБоя,
	|	КоммерческиеСоглашения.ЕстьВозвратТовара КАК ЕстьВозвратТовара,
	|	КоммерческиеСоглашения.НормаБоя КАК НормаБоя,
	|	КоммерческиеСоглашения.ОтчетныйПериодДляДопСоглашенияПоНормеБоя КАК ОтчетныйПериодДляДопСоглашенияПоНормеБоя,
	|	КоммерческиеСоглашения.ПоставщикПроизводитВозвратНеликвидногоТовара КАК ПоставщикПроизводитВозвратНеликвидногоТовара,
	|	КоммерческиеСоглашения.ЕстьПоставкаТовараПодЗаказ КАК ЕстьПоставкаТовараПодЗаказ
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК КоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|			ПО ВТ_Документы.ЮридическоеЛицо = вогЮридическиеЛица.Ссылка
	// ++ VOG Солодов В.В. 09.02.2021 DEV-150
	// До изменения
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	//|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	//|				ПО ОтветственныеЛица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	//|			ПО ВТ_Документы.Договор.вогОтветственноеЛицо = ОтветственныеЛица.Ссылка
	//|				И ВТ_Документы.Договор.Организация = ОтветственныеЛица.Владелец
	// -- VOG Солодов В.В. 09.02.2021 DEV-150
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК КонтактныеЛицаПартнеров
	|			ПО ВТ_Документы.Договор.вогПодписантПартнера = КонтактныеЛицаПартнеров.КонтактноеЛицо
	|				И ВТ_Документы.ЮридическоеЛицо = КонтактныеЛицаПартнеров.ОбъектСвязи
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогКонтактныеЛицаПодписанты.СрезПоследних КАК вогКонтактныеЛицаПодписантыСрезПоследних
	|			ПО ВТ_Документы.ЮридическоеЛицо = вогКонтактныеЛицаПодписантыСрезПоследних.ЮридическоеЛицо
	|				И ВТ_Документы.Договор.вогПодписантПартнера = вогКонтактныеЛицаПодписантыСрезПоследних.КонтактноеЛицо
	|				И (ВТ_Документы.Ссылка.Дата >= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС
	|						И (ВТ_Документы.Ссылка.Дата <= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо
	|							ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|					ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.Основание = ЗНАЧЕНИЕ(Перечисление.ВариантыОснованийПодписанта.Устава))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК вогОтветственныеЛицаОрганизаций
	|			ПО ВТ_Документы.Договор.Организация = вогОтветственныеЛицаОрганизаций.Владелец
	|				И (""Генеральный директор"" = вогОтветственныеЛицаОрганизаций.Должность)
	|				И (ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) = вогОтветственныеЛицаОрганизаций.ДатаОкончания)
	|		ПО КоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СпрОрганизации
	|		ПО КоммерческиеСоглашения.Организация = СпрОрганизации.Ссылка
	// ++ VOG Солодов В.В. 09.02.2021 DEV-150
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ПО ОтветственныеЛица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ПО КоммерческиеСоглашения.ОтветственноеЛицо = ОтветственныеЛица.Ссылка
	|			И КоммерческиеСоглашения.Организация = ОтветственныеЛица.Владелец
	// -- VOG Солодов В.В. 09.02.2021 DEV-150
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(вогТорговыеТочкиКонтактнаяИнформация.Ссылка) КАК НаименованиеТорговойТочки,
	|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	вогТорговыеТочкиКонтактнаяИнформация.Представление КАК АдресДоставки,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.Номер КАК НомерСоглашения,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия КАК ДатаСоглашения,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.Договор КАК Договор,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита КАК МинимальнаяСтоимостьПартии
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.АдресаДоставки КАК вогКоммерческиеСоглашенияАдресаДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.Ссылка = ВТ_Документы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = вогТорговыеТочкиКонтактнаяИнформация.Ссылка
	|			И (вогТорговыеТочкиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресТорговойТочки))
	|			И (НЕ вогТорговыеТочкиКонтактнаяИнформация.Представление = """")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = CRM_ОбъектыЗначенийКлассификаторов.Объект
	|			И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатораМинСтоимостьТовара)
	|			И вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.НаправлениеДеятельности = CRM_ОбъектыЗначенийКлассификаторов.Аналитика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка),
	|	вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка,
	|	вогРаспределительныеЦентрыКонтактнаяИнформация.Представление,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.Номер,
	|	вогКоммерческиеСоглашенияАдресаДоставки.Ссылка.ДатаНачалаДействия,
	|	ВТ_Документы.ДатаДоговора,
	|	ВТ_Документы.НомерДоговора,
	|	ВТ_Документы.Договор,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.АдресаДоставки КАК вогКоммерческиеСоглашенияАдресаДоставки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.Ссылка = ВТ_Документы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогРаспределительныеЦентры.КонтактнаяИнформация КАК вогРаспределительныеЦентрыКонтактнаяИнформация
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = вогРаспределительныеЦентрыКонтактнаяИнформация.Ссылка
	|			И (вогРаспределительныеЦентрыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресРаспределительногоЦентра))
	|			И (НЕ вогРаспределительныеЦентрыКонтактнаяИнформация.Представление = """")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|		ПО вогКоммерческиеСоглашенияАдресаДоставки.ВладелецАдреса = CRM_ОбъектыЗначенийКлассификаторов.Объект
	|			И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатораМинСтоимостьТовара)
	|ИТОГИ
	|	МАКСИМУМ(НомерСоглашения),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(ДатаДоговора)
	|ПО
	|	НомерДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	вогКоммерческиеСоглашенияДокументыЭДО.ВидДокумента КАК ВидДокумента,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.Номер КАК НомерСоглашения,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ДатаНачалаДействия КАК ДатаСоглашения,
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	вогКоммерческиеСоглашенияДокументыЭДО.Ссылка.ОператорЭДО КАК ОператорЭДО,
	|	ВТ_Документы.Договор КАК Договор
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения.ДокументыЭДО КАК вогКоммерческиеСоглашенияДокументыЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашенияДокументыЭДО.Ссылка = ВТ_Документы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	вогКоммерческиеСоглашенияДокументыЭДО.ВидДокумента.Порядок
	|ИТОГИ
	|	МАКСИМУМ(НомерСоглашения),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(ОператорЭДО)
	|ПО
	|	НомерДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.Договор КАК Договор,
	|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаСоглашения,
	|	вогКоммерческиеСоглашения.Номер КАК НомерСоглашения
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(НомерСоглашения)
	|ПО
	|	НомерДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Документы.ДатаДоговора КАК ДатаДоговора,
	|	ВТ_Документы.НомерДоговора КАК НомерДоговора,
	|	ВТ_Документы.Договор КАК Договор,
	|	вогКоммерческиеСоглашения.ДатаНачалаДействия КАК ДатаСоглашения,
	|	вогКоммерческиеСоглашения.Номер КАК НомерСоглашения
	|ИЗ
	|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО вогКоммерческиеСоглашения.Ссылка = ВТ_Документы.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(ДатаДоговора),
	|	МАКСИМУМ(ДатаСоглашения),
	|	МАКСИМУМ(НомерСоглашения)
	|ПО
	|	НомерДоговора";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ЗначениеКлассификатораМинСтоимостьТовара", Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("fff7455d-cfd9-11e8-a684-005056bc3fe8")));
	Если НаправлениеДеятельности = Неопределено тогда
		НаправлениеДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(),"CRM_НаправлениеДеятельности");	
	КонецЕсли;
	Запрос.УстановитьПараметр("НаправлениеДеятельности",НаправлениеДеятельности);
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСтруктуруДанныхПечатиВерсия3(ДанныеПечати, СтруктураДанных)
	
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеПечати);
	
	СтруктураДанных.Вставить("ДатаДоговора", Формат(ДанныеПечати.ДатаДоговора, "ДЛФ=DD"));
		
	//ПредставлениеОрганизации = ?(Не ПустаяСтрока(ДанныеПечати.ОрганизацияНаименованиеПолное),
	//	СокрЛП(ДанныеПечати.ОрганизацияНаименованиеПолное),
	//	СокрЛП(ДанныеПечати.ОрганизацияНаименование));
		
	ФС 			= "ЧН=Пусто";
	Параметры 	= ",,,,,,,, 0";
		
	//СтруктураДанных.Вставить("ПредставлениеОрганизации", 	СокрЛП(ПредставлениеОрганизации));
	//СтруктураДанных.Вставить("ПредставлениеКлиента", 		СокрЛП(ДанныеПечати.ПредставлениеКлиент));
	
	СведенияОбОрганизации = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДоговора,,ДанныеПечати.Договор.вогСчетОрганизации);
	СведенияОбКлиенте = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ДанныеПечати.Клиент, ДанныеПечати.ДатаДоговора,,ДанныеПечати.Договор.вогСчетКонтрагента);
	СтруктураДанных.Вставить("ПредставлениеОрганизации", СведенияОбОрганизации.ПолноеНаименование);
	СтруктураДанных.Вставить("ДолжностьРуководителя", ПолучитьДолжностьВРодительномПадеже(ДанныеПечати.РуководительДолжностьПредставление));
	СтруктураДанных.Вставить("ДолжностьОтветственный", ДанныеПечати.РуководительДолжностьПредставление);
	ФИОРуководителя = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.РуководительПредставление, 2, ФИОРуководителя, ДанныеПечати.РуководительПол);
	СтруктураДанных.Вставить("ФИОРуководителя", 			ФИОРуководителя);
	
	СтруктураДанных.Вставить("ПредставлениеКлиента", 		СведенияОбКлиенте.ПолноеНаименование);
	СтруктураДанных.Вставить("ДолжностьКонтактноеЛицо",	ДанныеПечати.ПредставлениеДолжностьКонтактногоЛицаРодительный);
	
	ПредставлениеКонтактногоЛица = "";
	//ФизическиеЛица.Просклонять(ДанныеПечати.ПредставлениеКонтактногоЛица, 2, ПредставлениеКонтактногоЛица, ДанныеПечати.ПолКонтактногоЛица);
	//СтруктураДанных.Вставить("ПредставлениеКонтактноеЛицо", ПредставлениеКонтактногоЛица);	
	ФИОРуководителя = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.РуководительПредставление, 2, ФИОРуководителя, ДанныеПечати.РуководительПол);
	ОтветственныйФИО =  ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.РуководительПредставление);
	СтруктураДанных.Вставить("ФИОРуководителя", 			ФИОРуководителя);
	СтруктураДанных.Вставить("ОтветственныйФИО", 			ОтветственныйФИО);
	СтруктураДанных.Вставить("ПредставлениеКлиента", 		СведенияОбКлиенте.ПолноеНаименование);
	СтруктураДанных.Вставить("ДолжностьКонтактноеЛицо", ДанныеПечати.ПредставлениеДолжностьКонтактногоЛицаРодительный);
	ПредставлениеКонтактногоЛица = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.ПредставлениеКонтактногоЛица, 2, ПредставлениеКонтактногоЛица, ДанныеПечати.ПолКонтактногоЛица,ДанныеПечати.НеСклонятьФамилию);
	ПредставлениеКонтактногоЛица = ?(СокрЛП(ПредставлениеКонтактногоЛица) = "","",
		""+ДанныеПечати.ПредставлениеДолжностьКонтактногоЛицаРодительный+" "+СокрЛП(ПредставлениеКонтактногоЛица));
	//START Кайдашов 05/03/20 crm-251
	Если ДанныеПечати.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель или 
		ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель И СокрЛП(ДанныеПечати.ПредставлениеКонтактногоЛица)<>"" тогда
		ПредставлениеКонтактногоЛица = ПредставлениеКонтактногоЛица;
	Иначе
		ПредставлениеКонтактногоЛица = "";
	КонецЕсли;
	//END Кайдашов 05/03/20 crm-251
	
	ОтветственныйКлиентФИО =  ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.ПредставлениеКонтактногоЛица);
	
	Если ЗначениеЗаполнено(ДанныеПечати.ПредставлениеКонтактногоЛица) тогда // Кайдашов crm-251
		ОтветственныйКлиентФИО =  "/"+ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.ПредставлениеКонтактногоЛица)+"/";
	Иначе
		ОтветственныйКлиентФИО =  "               ";
	КонецЕсли;
	СтруктураДанных.Вставить("ОтветственныйКлиентФИО", ОтветственныйКлиентФИО);
	
	Если ДанныеПечати.ПравоПодписиПоДоверенности Тогда
		СтруктураДанных.Вставить("ОснованиеРуководителя", СтрЗаменить(СтрЗаменить(ДанныеПечати.ОснованиеПраваПодписи,"Доверенность","Доверенности"),"Приказ","Приказ"));
		СтруктураДанных.Вставить("ТекстДоверенностиГД", СтрЗаменить(СтрЗаменить(ДанныеПечати.ОснованиеПраваПодписи,"Доверенности","Доверенность"),"Приказа","Приказ"));
	Иначе
		СтруктураДанных.Вставить("ОснованиеРуководителя", "Устава");
	КонецЕсли;
	СтруктураДанных.Вставить("ОснованиеПартнера", ДанныеПечати.Договор.вогДокументОснованиеПартнера);
	СтруктураДанных.Вставить("ЮридическийАдрес",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес"));
	СтруктураДанных.Вставить("ЮридическийАдресКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "ЮридическийАдрес"));
	СтруктураДанных.Вставить("ФактическийАдрес",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ФактическийАдрес"));
	СтруктураДанных.Вставить("ФактическийАдресКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "ФактическийАдрес"));
	СтруктураДанных.Вставить("РасчетныйСчет",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,БИК,КоррСчет"));
	СтруктураДанных.Вставить("РасчетныйСчетКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "НомерСчета,Банк,БИК,КоррСчет"));
	
	СтруктураДанных.Вставить("ДатаОкончанияДействияПредставление",Формат(ДанныеПечати.ДатаОкончанияДействия,"ДЛФ=DD"));
		
	Телефон = СведенияОбОрганизации.Телефоны + ?(СведенияОбОрганизации.Телефоны <> "" И СведенияОбОрганизации.email <> "" ,", ","") + СведенияОбОрганизации.email;   	
	ТелефонКлиента = СведенияОбКлиенте.Телефоны + ?(СведенияОбКлиенте.Телефоны <> "" И СведенияОбКлиенте.email <> "" ,", ","") + СведенияОбКлиенте.email;	
	
	СтруктураДанных.Вставить("Телефон",Телефон);                                                  
	СтруктураДанных.Вставить("ТелефонКлиента",ТелефонКлиента);	
	
	Если ДанныеПечати.ДоверенностьОснование <> Перечисления.ВариантыОснованийПодписанта.Устава тогда 
		ТекстДоверенности = СтрЗаменить(СтрЗаменить(ДанныеПечати.ДоверенностьОснование,"Доверенность","Доверенности"),"Приказ","Приказ")+" №"+ДанныеПечати.ДоверенностьНомер+" от "+Формат(ДанныеПечати.ДоверенностьДатаДокумента,"ДФ=dd.MM.yyyy");
	Иначе
		ТекстДоверенности = "Устава";
	КонецЕсли;
	
	ПредставлениеОснованиеПартнера = ", в лице "+ПредставлениеКонтактногоЛица+" действующего на основании " + ТекстДоверенности;	
	//START Кайдашов 05/03/20 crm-251
	Если ДанныеПечати.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель или 
		ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель И СокрЛП(ДанныеПечати.ПредставлениеКонтактногоЛица)<>"" тогда
		ПредставлениеОснованиеПартнера = ", в лице "+ПредставлениеКонтактногоЛица+" действующего на основании " + ТекстДоверенности;
		Если ДанныеПечати.ДоверенностьОснование = Перечисления.ВариантыОснованийПодписанта.Устава  тогда
			СтруктураДанных.Вставить("ДолжностьОтветственныйКлиента",ДанныеПечати.ПредставлениеДолжностьКонтактногоЛица);	
		Иначе
			СтруктураДанных.Вставить("ДолжностьОтветственныйКлиента","");	
			СтруктураДанных.Вставить("ОтветственныйКлиентДолжность",СтрЗаменить(СтрЗаменить(ДанныеПечати.ДоверенностьОснование,"Доверенности","Доверенность"),"Приказа","Приказ")+" №"+ДанныеПечати.ДоверенностьНомер+" от "+Формат(ДанныеПечати.ДоверенностьДатаДокумента,"ДФ=dd.MM.yyyy"));
		КонецЕсли;	
	Иначе
		ПредставлениеОснованиеПартнера = ", зарегистрированный в Едином государственном Реестре индивидуальных предпринимателей за государственным регистрационным номером (ОГРНИП) "+ДанныеПечати.ОГРНКлиента;
		СтруктураДанных.Вставить("ДолжностьОтветственныйКлиента",	?(ДанныеПечати.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,ДанныеПечати.ПредставлениеДолжностьКонтактногоЛица,""));
	КонецЕсли;
	//END Кайдашов 05/03/20 crm-251
	
	Именуемое = ?(ДанныеПечати.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,"именуемое","именуемый"); 
	СтруктураДанных.Вставить("Именуемое",Именуемое);
	
	//ПредставлениеОснованиеПартнера = ", в лице "+ПредставлениеКонтактногоЛица+" действующего на основании " + ДанныеПечати.ДокументОснованиеПартнера;
	//ПредставлениеОснованиеПартнера = ?(ДанныеПечати.ДокументОснованиеПартнера = "" И ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,"",ПредставлениеОснованиеПартнера);
	СтруктураДанных.Вставить("ПредставлениеОснованиеПартнера",ПредставлениеОснованиеПартнера );	
	СтруктураДанных.Вставить("ПредставлениеОГРНКлиента",?(ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,"ОГРНИП","ОГРН"));
	
	СтруктураДанных.Вставить("ДатаСоглашенияПредставление",Формат(ДанныеПечати.ДатаСоглашения,"ДЛФ=DD"));
	
	//РуководительПредставление = "";
	//ФизическиеЛица.Просклонять(ДанныеПечати.РуководительПредставление, 2, РуководительПредставление, ДанныеПечати.РуководительПол);
	//СтруктураДанных.Вставить("ФИОРуководителя", 			СокрЛП(РуководительПредставление));
	//СтруктураДанных.Вставить("ДолжностьРуководителя", 		
	//	ПолучитьДолжностьВРодительномПадеже(ДанныеПечати.РуководительДолжностьПредставление));
	
	ПредставлениеКонтактноеЛицо = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.ПредставлениеКонтактногоЛица, 2, ПредставлениеКонтактноеЛицо, ДанныеПечати.ПолКонтактногоЛица);
	СтруктураДанных.Вставить("ПредставлениеКонтактноеЛицо", СокрЛП(ПредставлениеКонтактноеЛицо));
	СтруктураДанных.Вставить("ДолжностьКонтактноеЛицо", ДанныеПечати.ПредставлениеДолжностьКонтактногоЛицаРодительный);
	
	СтруктураДанных.Вставить("РазмерШтрафаПрописью", 		НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.РазмерШтрафаШоуРум, ФС, Параметры))));
	СтруктураДанных.Вставить("КоличествоДнейПрописью",
		Нрег(СокрЛП(ЧислоПрописью(ДанныеПечати.СрокНаправленияЗаявленияОВозврате, ФС, Параметры))));
	СтруктураДанных.Вставить("ПроцентПрописью", 			НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.ПроцентРеализованногоТовара, ФС, Параметры))));
	СтруктураДанных.Вставить("СрокРеализацииПрописью",
		НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.СрокРеализацииУказанногоПроцентаПоставленногоТовара, ФС, Параметры))));
	СтруктураДанных.Вставить("РазмерСкидкиПрописью",
		НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.РазмерСкидкиНаТоварПодлежащийВозврату, ФС, Параметры))));
	СтруктураДанных.Вставить("СрокОплатыТовараПрописью", 	НРЕг(СокрЛП(ЧислоПрописью(ДанныеПечати.СрокОплатыТовара, ФС, Параметры))));
	СтруктураДанных.Вставить("МаксимумДнейОтсрочкиПрописью", 	НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.МаксимумДнейОтсрочки, ФС, Параметры))));
	СтруктураДанных.Вставить("РазмерВыплатыПрописью",
		НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.РазмерВыплатыПриРасторженииДоговора, ФС, Параметры))));
	СтруктураДанных.Вставить("ТестовыйПериодЭДОПрописью", 	НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.ТестовыйПериодЭДО, ФС, Параметры))));
	
	СтруктураДанных.Вставить("РазмерАвансаЗаПартиюТовараПрописью",
		НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.РазмерАвансаЗаПартиюТовара, ФС, Параметры))));	 
	
	
	//ДокументОснованиеПартнера = "";
	//ФизическиеЛица.Просклонять(ДанныеПечати.ДокументОснованиеПартнера, 2, ДокументОснованиеПартнера);
	//СтруктураДанных.Вставить("ОснованиеПартнера", СокрЛП(ДокументОснованиеПартнера));
	
	// Контактная информация организации
	СтруктураДанных.Вставить("ГородОрганизации", "");
	СтруктураДанных.Вставить("ЭлАдресОрганизации", "");
	
	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДляПриемкиЗаказаОбои);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресДляПриемкиЗаказаПлитка);
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ДанныеПечати.Организация);
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивСсылок,, МассивВидовКИ, ТекущаяДата());
	
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
		
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			СтруктураКИ = Новый Структура;
			Если ДанныеПечати.Организация.ИНН = "2309123330" или ДанныеПечати.Организация.ИНН = "2373013119" тогда
				СтруктураКИ.Вставить("Регион", "");
				СтруктураКИ.Вставить("НаселенныйПункт", "");
			Иначе	
				СтруктураКИ.Вставить("Город", "");
				СтруктураКИ.Вставить("ГородСокращение", "");
				
			КонецЕсли;
			
			Результат = РаботаСАдресами.ПредыдущаяСтруктураКонтактнойИнформацииXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Вид);
			
			ЗаполнитьЗначенияСвойств(СтруктураКИ, Результат);
			// ++ VOG Солодов В.В. 03.12.2019 
			Если СтруктураКИ.Свойство("Город") тогда
				МассивСлов 		= СтрРазделить(СтруктураКИ.Город, " ", Ложь);
				ИндСокращения 	= МассивСлов.Найти(СтруктураКИ.ГородСокращение);
				Если Не ИндСокращения = Неопределено Тогда
					МассивСлов.Удалить(ИндСокращения);
				КонецЕсли;
			КонецЕслИ;
			
			Если ДанныеПечати.Организация.ИНН = "2309123330" или ДанныеПечати.Организация.ИНН = "2373013119" тогда
				СтруктураДанных.ГородОрганизации = СтруктураКИ.Регион+", "+СтруктураКИ.НаселенныйПункт;
			Иначе				
				СтруктураДанных.ГородОрганизации = "г. "+СтрСоединить(МассивСлов, " ");
			КонецЕсли;
			
			
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			
			Если ДанныеПечати.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка 
				И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресДляПриемкиЗаказаПлитка тогда
					СтруктураДанных.ЭлАдресОрганизации = СтрокаКИ.Представление;
				КонецЕсли;	
				
			Если ДанныеПечати.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои 
				И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресДляПриемкиЗаказаОбои тогда
					СтруктураДанных.ЭлАдресОрганизации = СтрокаКИ.Представление;
			КонецЕсли;	
				
//			СтруктураДанных.ЭлАдресОрганизации = СтрокаКИ.Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если ДанныеПечати.ПремияВычетСтоимостиПоТранзПоставке тогда
		СтруктураДанных.Вставить("ПремияУсловиеСтоимостиТовараПоТранзитноеПоставке", "- стоимости товара по транзитной поставке (без НДС) (когда товар поступает на склад Покупателя минуя склад Поставщика).");
	Иначе
		СтруктураДанных.Вставить("ПремияУсловиеСтоимостиТовараПоТранзитноеПоставке", "");
	КонецЕсли;
	
	Если ДанныеПечати.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ <> 0 тогда
		СтруктураДанных.Вставить("ПредставлениеОтсрочкаОплатыПриПоставкеТовараПодЗаказ",
			Строка(ДанныеПечати.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ) + " ("+НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ, ФС, Параметры))) +")");	
	КонецЕсли;
	
	Если ДанныеПечати.ОтсрочкаОплатыПриОткрытииНовогоМагазина<> 0 тогда
		СтруктураДанных.Вставить("ОтсрочкаОплатыПриОткрытииНовогоМагазинаПрописью",НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.ОтсрочкаОплатыПриОткрытииНовогоМагазина, ФС, Параметры))));	
	КонецЕсли;
	     
	Если ДанныеПечати.ОтсрочкаОплатыПриЗаказеНовогоТовара<> 0 тогда
		СтруктураДанных.Вставить("ОтсрочкаОплатыПриЗаказеНовогоТовараПрописью",НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.ОтсрочкаОплатыПриЗаказеНовогоТовара, ФС, Параметры))));	
	КонецЕсли;
	 
	Если ДанныеПечати.ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара<> 0 тогда
		СтруктураДанных.Вставить("ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовараПрописью",НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара, ФС, Параметры))));	
	КонецЕсли;
	
	Если ДанныеПечати.ОтсрочкаПлатежаНаВесьТовар<> 0 тогда
		СтруктураДанных.Вставить("ОтсрочкаПлатежаНаВесьТоварПрописью",НРег(СокрЛП(ЧислоПрописью(ДанныеПечати.ОтсрочкаПлатежаНаВесьТовар, ФС, Параметры))));	
	КонецЕсли;
	
	СтруктураДанных.Вставить("ОтчетныйПериодДляДопСоглашенияПоНормеБояПредставление", Нрег(СокрЛП(ДанныеПечати.ОтчетныйПериодДляДопСоглашенияПоНормеБоя)));
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СформироватьСтруктуруОбластейВерсия3(ДанныеПечати, Макет)
	
	СтруктураОбластей = Новый Структура;
	
	НомерРаздела 		= 0;
	
	Для ИндексРаздела = 1 По 19 Цикл
		
		НомерВарианта 		= 0;
		НомерПунктаРаздела 	= 0;
		ИмяРаздела 			= "Раздел" + Строка(ИндексРаздела);
		
		Если Не Макет.Области.Найти(ИмяРаздела) = Неопределено Тогда
			
			НомерРаздела = НомерРаздела + 1;
			ПредставлениеНомераРаздела = Строка(НомерРаздела);
			
			СтруктураОбластей.Вставить(ИмяРаздела, ПредставлениеНомераРаздела);
			
			// +++ VOG Кулаков П.Л. 16.03.2020 CRM-447
			// Для ИндексВарианта = 1 По 10 Цикл
			Для ИндексВарианта = 1 По 12 Цикл
			// --- VOG Кулаков П.Л.
				
				НомерПункта = 0;
				ИмяВарианта = ИмяРаздела + "_Вариант" + Строка(ИндексВарианта);
				
				Если Не Макет.Области.Найти(ИмяВарианта) = Неопределено Тогда
					
					НомерВарианта = НомерВарианта + 1;
					ПредставлениеНомераВарианта = ПредставлениеНомераРаздела + "." + Строка(НомерВарианта);
					СтруктураОбластей.Вставить(ИмяВарианта, ПредставлениеНомераВарианта);
					
					Для ИндексПункта = 1 По 20 Цикл
						
						ИмяПункта = ИмяВарианта + "_Пункт" + Строка(ИндексПункта);
						
						Если Не Макет.Области.Найти(ИмяПункта) = Неопределено Тогда
							
							ОбластьПункта = Макет.ПолучитьОбласть(ИмяПункта);
							
							УИД = Новый УникальныйИдентификатор;
							
							СтруктураПараметра = Новый Структура;
							СтруктураПараметра.Вставить("НомерПункта", УИД);
							
							ЗаполнитьЗначенияСвойств(СтруктураПараметра, ОбластьПункта.Параметры);
							
							Если СтруктураПараметра.НомерПункта <> УИД Тогда
								НомерПункта = НомерПункта + 1;
								ПредставлениеНомераПункта = ПредставлениеНомераВарианта + "." + Строка(НомерПункта);
								СтруктураОбластей.Вставить(ИмяПункта, ПредставлениеНомераПункта);
							Иначе
								СтруктураОбластей.Вставить(ИмяПункта, "");
							КонецЕсли;
							
						//Иначе
						//	Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для ИндексПунктаРаздела = 1 По 20 Цикл
				
				НомерПодПункта 	= 0;
				ИмяПунктаРаздела = ИмяРаздела + "_Пункт" + Строка(ИндексПунктаРаздела);
				
				Если Не Макет.Области.Найти(ИмяПунктаРаздела) = Неопределено Тогда
					
					ОбластьПунктаРаздела = Макет.ПолучитьОбласть(ИмяПунктаРаздела);
					
					УИД = Новый УникальныйИдентификатор;
					
					СтруктураПараметра = Новый Структура;
					СтруктураПараметра.Вставить("НомерПункта", УИД);
					
					ЗаполнитьЗначенияСвойств(СтруктураПараметра, ОбластьПунктаРаздела.Параметры);
					
					Если СтруктураПараметра.НомерПункта <> УИД Тогда
						
						НомерПунктаРаздела = НомерПунктаРаздела + 1;
						ПредставлениеНомераПунктаРаздела = ПредставлениеНомераРаздела + "." + Строка(НомерПунктаРаздела);
						СтруктураОбластей.Вставить(ИмяПунктаРаздела, ПредставлениеНомераПунктаРаздела);
						
						Для ИндексПодПункта = 1 По 20 Цикл
							
							ИмяПодПункта = ИмяПунктаРаздела + "_ПодПункт" + Строка(ИндексПодПункта);
							
							Если Не Макет.Области.Найти(ИмяПодПункта) = Неопределено Тогда
								
								ОбластьПодПункта = Макет.ПолучитьОбласть(ИмяПодПункта);
								
								УИД = Новый УникальныйИдентификатор;
								
								СтруктураПараметра = Новый Структура;
								СтруктураПараметра.Вставить("НомерПункта", УИД);
								
								ЗаполнитьЗначенияСвойств(СтруктураПараметра, ОбластьПодПункта.Параметры);
								
								Если СтруктураПараметра.НомерПункта <> УИД Тогда
									НомерПодПункта = НомерПодПункта + 1;
									ПредставлениеНомераПодПункта = ПредставлениеНомераПунктаРаздела + "." + Строка(НомерПодПункта);
									СтруктураОбластей.Вставить(ИмяПодПункта, ПредставлениеНомераПодПункта);
								Иначе
									СтруктураОбластей.Вставить(ИмяПодПункта, "");
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						СтруктураОбластей.Вставить(ИмяПунктаРаздела, "");
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураОбластей;
	
КонецФункции

Процедура НастроитьМакетВерсия3(ДанныеПечати, Макет)
	
	Если ДанныеПечати.СпособОтправкиЗаказа = Перечисления.вогСпособыОтправкиЗаказа.ОтправкаЗаказаЧерезEDI Тогда
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант1");
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант3");
	ИначеЕсли ДанныеПечати.СпособОтправкиЗаказа = Перечисления.вогСпособыОтправкиЗаказа.ОтправкаЗаказаЧерезB2B Тогда
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант1");
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант2");
	Иначе
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант2");
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант3");
		УдалитьОбластиМакета(Макет, "Раздел1", "Раздел1_Вариант4");
	КонецЕсли;
	
	Если НЕ ДанныеПечати.ЕстьПоставкаТовараПодЗаказ Тогда
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант1");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант2");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант3");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант4");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант5");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант6");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант7");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант8");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант9");
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант10");
	Иначе
		Если ДанныеПечати.ОтсрочкаОплатыПриПоставкеТовараПодЗаказ = 0 тогда
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант2");
		Иначе			
			УдалитьОбластиМакета(Макет, "Раздел2", "Раздел2_Вариант3");
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ДанныеПечати.СпособДоставкиТовара = Перечисления.вогСпособыДоставкиТовара.ДоставкаТовараПоставщиком Тогда
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант10");
		УдалитьОбластиМакета(Макет, "Раздел4", "Раздел4_Вариант1");
	ИначеЕсли ДанныеПечати.СпособДоставкиТовара = Перечисления.вогСпособыДоставкиТовара.СамовывозТовара Тогда
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант1");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант2");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант3");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант4");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант5");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант6");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант7");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант8");
		УдалитьОбластиМакета(Макет, "Раздел3", "Раздел3_Вариант9");
		УдалитьОбластиМакета(Макет, "Раздел4", "Раздел4_Вариант2");
		УдалитьОбластиМакета(Макет, "Раздел4", "Раздел4_Вариант3");
	КонецЕсли;
	
	// Рекламно-демонстрационные материалы (Образцы)
	Если ДанныеПечати.РазмерСкидкиНаРекламноДемонстрационныеМатериалы = 0 Тогда
		УдалитьОбластиМакета(Макет, "Раздел7", "Раздел7_Вариант1");
	КонецЕсли;
	Если НЕ ДанныеПечати.СтоимостьОбразцовВключенаВСтоимостьТовара Тогда
		УдалитьОбластиМакета(Макет, "Раздел7", "Раздел7_Вариант2");
	КонецЕсли;
	// Рекламно-демонстрационные материалы (Плитка)
	Если Не ДанныеПечати.РекламноДемонстрационныеМатериалыПанели Тогда
		УдалитьОбластиМакета(Макет, "Раздел8", "Раздел8_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел8", "Раздел8_Пункт2");
	КонецЕсли;
	
	// Услуга по организации шоу-рум
	Если Не ДанныеПечати.УслугаПоОрганизацииШоуРум Тогда
		УдалитьОбластиМакета(Макет, "Раздел9", "Раздел9_Пункт1");
	КонецЕсли;
	
	// Премии
	Если Не ДанныеПечати.ВыплачиваютсяПремии Тогда
		УдалитьОбластиМакета(Макет, "Раздел10", "Раздел10_Пункт1");
	КонецЕсли;
	
	// Скидки
	Если ДанныеПечати.РазмерСкидкиНаПроведениеКоммерческойАкции = 0 Тогда
		УдалитьОбластиМакета(Макет, "Раздел11", "Раздел11_Вариант1");
	КонецЕсли;
	
	Если ДанныеПечати.РазмерСкидкиПриОткрытииНовогоМагазина = 0 Тогда
		УдалитьОбластиМакета(Макет, "Раздел11", "Раздел11_Вариант2");
	КонецЕсли;
	
	Если ДанныеПечати.РазмерСкидкиНаНовыйТовар = 0 Тогда
		УдалитьОбластиМакета(Макет, "Раздел11", "Раздел11_Вариант3");
	КонецЕсли;
	
	//1 - 1
	//2 - 2,3,4
	//3 - 5,6,7,8
	//4 - 9,10
	//5 - 11
	//6 - 12
	
	// Отсрочка платежа
	Если ДанныеПечати.ПолныйАвансовыйПлатежНаВесьТовар Тогда                 		//п.1
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант2");	//2
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант3");	//3
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант4");	//4
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант5");	//5
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант6");	//6
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант7");
	Иначе
		//Частичная оплата и отсрочка на неоплаченную часть товара		
		Если ДанныеПечати.РазмерАвансаЗаПартиюТовара <> 0
			И ДанныеПечати.ОтсрочкаПлатежаНаНеоплаченнуюЧастьТовара <> 0 Тогда      //п.2
			
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант1");	//1
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант3");	//3
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант4");	//4
			
		//Отсрочка оплаты на весь поставляемый товар	
		ИначеЕсли ДанныеПечати.ОтсрочкаПлатежаНаВесьТовар <> 0 Тогда				//п.4
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант1");	//1
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант2");	//2
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант3");	//3
			
		// Оплата после реализации товара	
		ИначеЕсли ЗначениеЗаполнено(ДанныеПечати.СрокиОтчетаОПродажах) Тогда		//п.3
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант1");	//1
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант2");	//2
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант4");	//4
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант7");
			
		Иначе	
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант1");	//1			
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант2");	//2
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант3");	//3
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант4");	//4
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант5");	//5
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант6");	//6
			УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант7");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеПечати.ОтсрочкаОплатыПриОткрытииНовогоМагазина = 0 тогда
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант5");	//5
	КонецЕсли;	
	
	Если ДанныеПечати.ОтсрочкаОплатыПриЗаказеНовогоТовара = 0 тогда
		УдалитьОбластиМакета(Макет, "Раздел12", "Раздел12_Вариант6");	//6
	КонецЕсли;	
	
	// Условия возврата товара
	Если Не ДанныеПечати.ЕстьВозвратТовара Тогда
		
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант1");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант1_Пункт2");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант1_Пункт3");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант2");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант2_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт2");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт3");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт4");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт5");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт6");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант4");
		УдалитьОбластиМакета(Макет, "Раздел14", "Раздел13_Вариант4_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел14", "Раздел13_Вариант4_Пункт2");
	ИначеЕсли ДанныеПечати.РазмерСкидкиНаТоварПодлежащийВозврату	= 0 тогда
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант2");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант2_Пункт1");
	ИначеЕсли	НЕ ДанныеПечати.ПоставщикПроизводитВозвратНеликвидногоТовара тогда
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт2");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт3");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт4");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт5");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант3_Пункт6");
		УдалитьОбластиМакета(Макет, "Раздел13", "Раздел13_Вариант4");
		УдалитьОбластиМакета(Макет, "Раздел14", "Раздел13_Вариант4_Пункт1");
		УдалитьОбластиМакета(Макет, "Раздел14", "Раздел13_Вариант4_Пункт2");
	КонецЕсли;
	
	Если ДанныеПечати.ДоставкуВозвратаОсуществляетКлиент тогда
		УдалитьОбластиМакета(Макет, "Раздел14", "Раздел13_Вариант4_Пункт2");
	КонецЕсли;	
	
	Если ДанныеПечати.НаправлениеДеятельности <> Справочники.НаправленияДеятельности.Плитка Тогда
		УдалитьОбластиМакета(Макет, "Раздел15", "Раздел15_Вариант1");
	КонецЕсли;
	
	Если Не ДанныеПечати.ИспользоватьЭДО Тогда
		УдалитьОбластиМакета(Макет, "Раздел16", "Раздел16_Вариант1");
	КонецЕсли;
	
    Если ДанныеПечати.РазмерВыплатыПриРасторженииДоговора = 0 тогда
    	УдалитьОбластиМакета(Макет, "Раздел17", "Раздел17_Вариант1");
    	УдалитьОбластиМакета(Макет, "Раздел17", "Раздел17_Вариант2");
    	УдалитьОбластиМакета(Макет, "Раздел17", "Раздел17_Вариант3");
	КонецЕсли;
	Если ДанныеПечати.ЕстьДополнительноеСоглашениеПоНормеБоя тогда
    	УдалитьОбластиМакета(Макет, "Раздел15", "Раздел15_Вариант1");
	КонецЕсли;
	
	Если ДанныеПечати.ДатаОкончанияДействия <> '00010101' тогда
		УдалитьОбластиМакета(Макет, "Раздел18", "Раздел18_Вариант3");
	Иначе
		УдалитьОбластиМакета(Макет, "Раздел18", "Раздел18_Вариант2");
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти
// --- VOG Кулаков П.Л.

// ++ VOG Солодов В.В. 27.12.2019 
#КонецЕсли
// -- VOG Солодов В.В. 27.12.2019
