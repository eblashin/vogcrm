
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Установка значения реквизита АдресКартинки.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ Объект.CRM_Фотография.Пустая() Тогда
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
			// +CRM
			Если ПустаяСтрока(АдресКартинки) Тогда
				ВывестиНедоступностьКартинки();
			КонецЕсли;	
			// -CRM
		Иначе
			АдресКартинки = "";
		КонецЕсли;
		CRM_УправлениеВидимостьюРамкиКартинки();
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация");	
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
		
	//Связи
	// ++ VOG Солодов В.В. 13.06.2019 task 374
	// До изменения
	//Если Параметры.Свойство("ЮрЛицоСвязи") Тогда
	//	ЮрЛицоСвязи = Параметры.ЮрЛицоСвязи;
	//КонецЕсли;
	// -- VOG Солодов В.В. 13.06.2019
	
	//+вог	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//ЗаполнитьОписаниеАдреса();
		
		//Менеджеры
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Менеджеры, "Владелец", Неопределено);
		
		
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Подразделения");
		ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
		вогУправлениеДоступом.ПрочитатьДоступныеПодразделенияОбъекта(ЭтотОбъект, Объект, ПараметрыОбъекта);
		
		НастроитьФорму();
		
	КонецЕсли;

	СкрытьРаскрытьВсеГруппы(Истина);
	
	РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
	УстановитьВидимостьРеквизитовКИ();
	
	 Если НЕ Параметры.Ключ.Пустая() Тогда		
		 ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КонтактныеЛица, 
		 	"ВидСвязи", Справочники.вогВидыСвязейКонтактныхЛиц.Сотрудник, ВидСравненияКомпоновкиДанных.Равно);
	 КонецЕсли;
	 
	 //+Объект связи
	 //Контакты
	 ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(КонтактныеЛица, "ОбъектСвязи", Объект.Ссылка);
	 КонтактныеЛица.Параметры.УстановитьЗначениеПараметра("ТекДата", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	 //Менеджеры
	 //ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Менеджеры, "Владелец", Объект.Ссылка);
	 //ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Менеджеры, "ТекущаяДата",CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	 //ID cards
	 ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ListIDCards, "ОбъектСвязи", Объект.Ссылка);
	 //-ОбъектСвязи
	 
	 //++ Подключаемые дополнительные команды
	 вогУправлениеИнтерфейсомСервер.ПодключитьДополнительныеКоманды(ЭтаФорма, Элементы.ФормаГруппаДействия);
	 //-- Подключаемые дополнительные команды
	 
	 ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Менеджеры, "ТекущаяДата", ТекущаяДата());
	 ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТорговыеТочкиСписок, "ТекущийРЦ", Объект.Ссылка); // ++ VOG Солодов В.В. 01.07.2019 
	 
	 ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма, Элементы.КоманднаяПанельФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//Статус согласования
	ОбновитьДанныеСтатусаСогласования();
	
	Если НЕ ТекущийОбъект.CRM_Фотография.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(ТекущийОбъект.CRM_Фотография, УникальныйИдентификатор);
		// +CRM
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
		// -CRM
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюРамкиКартинки();		
	
	// + Тищенко В.В.
	// Отключено отображение классификаторов на форме
	//+Классификаторы
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	// - Тищенко В.В.
	
	//скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	//ОбновитьОблакоНаправлений();
	
	//+вог
	Если Не ЗначениеЗаполнено(НастройкаВидимостиКарточкиОбъекта) Тогда
		НастройкаВидимостиКарточкиОбъекта       = "ПоказатьЗаполненные";
		РежимВидимостиПоказатьТолькоЗаполненные = Истина;
	
	КонецЕсли;
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	НастроитьФорму(НастройкиВидимостиИЗаголовков);
	
	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков, ЭтотОбъект);
	//-вог
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Подразделения");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
	вогУправлениеДоступом.ПрочитатьДоступныеПодразделенияОбъекта(ЭтотОбъект, Объект, ПараметрыОбъекта);
	
	// Вывод информации Общая
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакет(Объект.Ссылка,ИнформацияОбъект,Метаданные.Справочники.вогРаспределительныеЦентры,ЭтаФорма,"КарточкаОбъекта");
		
	//Менеджеры
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Менеджеры, "Владелец", ТекущийОбъект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Менеджеры,"Владелец",ТекущийОбъект.Ссылка,Истина);
	
	// ++ VOG Солодов В.В. 01.07.2019 
	// До изменения
	//ПрочитатСвязиОбъекта();
	// -- VOG Солодов В.В. 01.07.2019
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Выделить команду навигации при открытии формы объекта
	ВыделитьКомандуНавигацииПриОткрытииФормы();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) 
	  И РежимВидимостиПоказатьТолькоВажные Тогда
	  
	  	Шаблон = НСтр("ru = 'Поле ""%1"" не заполнено'");
		Если Не ЗначениеЗаполнено(АдресОбязательныеПоля) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, "Адрес"),, "АдресОбязательныеПоля",, Отказ);		
			
		КонецЕсли;
	
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЗаписыватьБезПроверки") Тогда
		Возврат;
	КонецЕсли;
		
	//Поиск дублей
	Если Не ЗначениеЗаполнено(Объект.Ссылка) 
	  И вогОбщегоНазначенияКлиентСерверПовтИсп.ВыполнятьПоискДублейОбъекта(Объект.Ссылка) Тогда 
		СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(Объект);
		СписокКонтактов = вогОбщегоНазначенияКлиентСервер.ЗаполнитьСтруктуруКонтактовОбъекта(ЭтотОбъект);
		
		Если ЕстьДубли(Объект, СтруктураПоиска, СписокКонтактов) Тогда 
			МассивОписанийОбъектов = Новый Массив;
			МассивОписанийОбъектов.Добавить(
				Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта", 
					Объект, "Справочник.вогРаспределительныеЦентры", СтруктураПоиска, СписокКонтактов)
			);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("МассивОписанийОбъектов", МассивОписанийОбъектов);
			
			//Определим список действий
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("Продолжить", 
				Новый Структура("КартаМаршрута", ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.вогСогласованиеДубляТорговойТочки"))
			);
			
			Если СтруктураПоиска.Свойство("Контакт_Адрес") Тогда
				СписокТиповОтношений = Новый СписокЗначений;				
				
				ЗначенияЗаполнения = Новый Структура;
				ЗначенияЗаполнения.Вставить("Наименование", Объект.Наименование);
				ЗначенияЗаполнения.Вставить("Адрес"		  , СписокКонтактов.Адрес);
				
				СтруктураДействий.Вставить("СоздатьПартнера", 
					Новый Структура("Заголовок, ТипыОтношений, ЗначенияЗаполнения", 
									НСтр("ru = 'Создать РЦ'"), СписокТиповОтношений, ЗначенияЗаполнения)	
				);
				
			КонецЕсли;
			
			ПараметрыФормы.Вставить("СтруктураДействий", СтруктураДействий);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.вогФормаНайденныхДублей", ПараметрыФормы,,,,, ОписаниеОповещения);
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//+вог
	Если Отказ Тогда
		Если НастройкаВидимостиФормы = "СвернутьВсеГруппы" Тогда
			НастройкаВидимостиФормы = "ПоказатьВсе";
		КонецЕсли;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
	КонецЕсли;
	//-вог
	
	// + Тищенко В.В.
	// Проврека на дубль
	
	ОбъектПоиска 			= Новый Структура;
	ОбъектПоиска.Вставить("Ссылка" , ПредопределенноеЗначение("Справочник.вогРаспределительныеЦентры.ПустаяСсылка"));
	СтруктураПоиска 		= вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
	СписокКонтактов 		= Новый Структура;
	МассивОписанийОбъектов 	= Новый Массив;
	
	ИнициализацияПараметровПоискаДублей(ОбъектПоиска,СтруктураПоиска,СписокКонтактов);
	
	Если ОбъектПоиска.Количество() > 1 Тогда
		Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов) Тогда 
			МассивОписанийОбъектов.Добавить(
			Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта",
			ОбъектПоиска, "Справочник.вогРаспределительныеЦентры", СтруктураПоиска, СписокКонтактов));
			Отказ = Истина;
			Если МассивОписанийОбъектов.Количество() > 0 Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("МассивОписанийОбъектов", МассивОписанийОбъектов);
				ОткрытьФорму("ОбщаяФорма.вогФормаНайденныхДублей", ПараметрыФормы,ЭтаФорма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
		// - Тищенко В.В.	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если РезультатЗакрытия.Результат = "Продолжить" Тогда
		ПараметрыЗаписи = Новый Структура("ЗаписыватьБезПроверки", Истина);
		
		ПараметрыДействия = РезультатЗакрытия.ПараметрыДействия;
		Если ПараметрыДействия.Свойство("КартаМаршрута") Тогда
			ПараметрыЗаписи.Вставить("КартаМаршрута", ПараметрыДействия.КартаМаршрута);
		КонецЕсли;
		
		Записать(ПараметрыЗаписи);
		
	ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
		Попытка 
			ВладелецФормы.ТекущаяСтрока = РезультатЗакрытия.Объект; 
		Исключение
			ФормаСписка = ПолучитьФорму("Справочник.вогРаспределительныеЦентры.ФормаСписка");
			ФормаСписка.Открыть();
			
			ФормаСписка.Элементы.Список.ТекущаяСтрока = РезультатЗакрытия.Объект;
			
		КонецПопытки;
		
		Модифицированность = Ложь;
		Закрыть();
						
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// + Солодов В.В.
	ПроверитьСвязьРЦТТ(Отказ);
	// - Солодов В.В.
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//Связи
	// ++ VOG Солодов В.В. 01.07.2019 
	// До изменения
	//ТекущийОбъект.ДополнительныеСвойства.Вставить("ТорговыеТочкиСвязи", ТорговыеТочки.Выгрузить().ВыгрузитьКолонку("ОбъектСвязи"));
	// -- VOG Солодов В.В. 01.07.2019
	// ++ VOG Солодов В.В. 13.06.2019 task 374
	// До изменения
	//Если ЗначениеЗаполнено(ЮрЛицоСвязи) Тогда
	//	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЮрЛицоСвязи", ЮрЛицоСвязи);
	//КонецЕсли;
	// -- VOG Солодов В.В. 13.06.2019
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Подразделения");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
	вогУправлениеДоступом.ЗаписатьДоступныеПодразделенияОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыОбъекта);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//+Классификаторы
	// ++ VOG Солодов В.В. 17.06.2019 task 377
	// До изменения
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	// -- VOG Солодов В.В. 17.06.2019
	//-Классификаторы
	
	// ++ VOG Солодов В.В. 29.03.2019
	//скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	вогУправлениеИнтерфейсомСервер.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, Элементы.ФормаГруппаДействия);
	// -- VOG Солодов В.В. 29.03.2019
	
	//+вог
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	Если Не Элементы.СтраницаКарточкаОбъекта.Доступность Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастройкаВидимостиФормы = "ПоказатьВсе";
		НастроитьФорму(НастройкиВидимостиИЗаголовков);
		СкрытьРаскрытьВсеГруппы(Ложь);
		
		Если Элементы.НастройкаВидимостиКарточкиОбъекта.СписокВыбора.Количество() = 3 Тогда
			Элементы.НастройкаВидимостиКарточкиОбъекта.СписокВыбора.Удалить(0);
		КонецЕсли;
		
	Иначе
		НастроитьФорму(НастройкиВидимостиИЗаголовков);
	КонецЕсли;

	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(ТекущийОбъект, НастройкиВидимостиИЗаголовков, ЭтотОбъект);
	
	//Менеджеры
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Менеджеры, "Владелец", ТекущийОбъект.Ссылка);
	
	//Запуск согласования
	Если ПараметрыЗаписи.Свойство("КартаМаршрута") Тогда
		ЗначенияЗаполнения = Новый Структура("Основание, КартаМаршрута", Объект.Ссылка, ПараметрыЗаписи.КартаМаршрута);
		БизнесПроцессСсылка = вогОбщегоНазначения.СформироватьЗапуститьБизнесПроцесс(ЗначенияЗаполнения);
		Если ЗначениеЗаполнено(БизнесПроцессСсылка) Тогда
			ПараметрыЗаписи.Вставить("ПараметрыОповещения", 
				Новый Структура("Заголовок, Текст", НСтр("ru = 'Запуск бизнес-процесса...'"), 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполнен запуск ""%1""'"), БизнесПроцессСсылка))
			);	
		
		КонецЕсли;
		
	КонецЕсли;
	
	//Обработка массива торговых точек
	Если ПараметрыЗаписи.Свойство("ПараметрыОбработкиТорговыхТочек") Тогда
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(ПараметрыЗаписи.ПараметрыОбработкиТорговыхТочек);
		ПараметрыВыполнения.Добавить(ТекущийОбъект.Ссылка);
		
		НаименованиеЗадания = НСтр("ru = 'Обработка массива торговых точек'");
		ФоновыеЗадания.Выполнить("вогОбщегоНазначения.ВыполнитьОбработкуТорговыхТочек", 
			ПараметрыВыполнения,, НаименованиеЗадания);

	КонецЕсли;		
	//-вог
	
	// Вывод информации Общая
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакет(Объект.Ссылка,ИнформацияОбъект,Метаданные.Справочники.вогРаспределительныеЦентры,ЭтаФорма,"КарточкаОбъекта",Истина);
	
	ЗапретРедактированияРеквизитовОбъектовСлужебный.ЗаписатьИзмененияБлокированныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЗаписьФайл" 
		И Параметр.Свойство("ВладелецФайла") Тогда
		
		Если Параметр.ВладелецФайла = Объект.Ссылка Тогда
			Модифицированность = Истина;
			
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			Если ВыборИзображения Тогда
				
				Объект.CRM_Фотография = СсылкаНаФайл;
				АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
				
			КонецЕсли;
			
			ФайлКартинкиПриИзменении(Элементы.ФайлКартинки);
			//+вог
			ОбновитьГиперссылкиИКарточку();
			//-вог
			
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_БизнесПрцесса" Тогда
		ОбновитьГиперссылкиИКарточку();
	
	КонецЕсли;
	
	//+вог
	Если ИмяСобытия = "Запись_БизнесПрцесса" 
	  И Параметр.Предмет = Объект.Ссылка Тогда
		ОбновитьДанныеСтатусаСогласования();
	
	КонецЕсли;
	//-вог
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	КлючОбъекта = СтрЗаменить(ЭтаФорма.ИмяФормы,".","_");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, "ИмяТекущейСтраницы", Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если Не ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,
	ЭтотОбъект,"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактныеЛица

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломИзменения(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОбъектСвязи", Объект.Ссылка);	
		ПараметрыФормы.Вставить("Ключ"		 , Элемент.ТекущаяСтрока);	
		
		ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", 
			ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)	
	
	Если Не Копирование Тогда
		Отказ = Истина;
		
		СписокВариантов = Новый СписокЗначений;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			СписокВариантов.Добавить("Выбрать", НСтр("ru = 'Выбрать'"));
		КонецЕсли;
		
		СписокВариантов.Добавить("Создать", НСтр("ru = 'Создать'"));
		СписокВариантов.Добавить("Отмена" , НСтр("ru = 'Отмена'"));
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КонтактныеЛицаПередНачаломДобавленияЗавершение", ЭтотОбъект, ПараметрыОповещения);	
		Если СписокВариантов.Количество() = 2 Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокВариантов[0].Значение);
		Иначе	
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Выберите действие...'"), СписокВариантов);	
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПередНачаломДобавленияЗавершение(Вариант, Контекст) Экспорт
	
	Если Вариант = Неопределено
	  ИЛИ Вариант = "Отмена" Тогда 
		Возврат;
	КонецЕсли;	
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектСвязи", Объект.Ссылка);
	// ++ VOG Солодов В.В. 27.05.2019 task 325
	ПараметрыФормы.Вставить("ОграничитьВыбор", 	Истина);
	// -- VOG Солодов В.В. 27.05.2019
	
	Если Вариант = "Создать" Тогда
		СуффиксИмяФормы = "ФормаОбъекта";		
	Иначе			
		СуффиксИмяФормы = "ФормаВыбора";		
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров." + СуффиксИмяФормы,
		ПараметрыФормы, Контекст.Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	//Связи
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьСвязиОбъекта(ВыбранноеЗначение, Объект.Ссылка);
	КонецЕсли;
	
	Элемент.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСвязиОбъекта(МассивОбъектов, ОбъектСвязи)

	// ++ VOG Солодов В.В. 27.05.2019 task 325
	Для Каждого СтруктураСвязи Из МассивОбъектов Цикл
		Если ТипЗнч(СтруктураСвязи) = Тип("Структура") 
			И СтруктураСвязи.Свойство("КонтактноеЛицо") Тогда
			
			вогУправлениеСвязями.УстановитьСвязьОбъекта(СтруктураСвязи.КонтактноеЛицо, ОбъектСвязи, СтруктураСвязи);
		Иначе
			вогУправлениеСвязями.УстановитьСвязьОбъекта(СтруктураСвязи, ОбъектСвязи);
		КонецЕсли;
	КонецЦикла;
	// До изменения
	//Для каждого КонтактноеЛицо Из МассивОбъектов Цикл
	//	вогУправлениеСвязями.УстановитьСвязьОбъекта(КонтактноеЛицо, ОбъектСвязи);
	//КонецЦикла;
	// -- VOG Солодов В.В. 27.05.2019

КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПолеКонтактнойИнформации(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюВидВыбран", ЭтотОбъект, ДополнительныеПараметры);
	
	СписокДоступныхВидов = СписокВидовДляДобавленияКонтактнойИнформации();
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДоступныхВидов, Элементы[Команда.Имя]);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюВидВыбран(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Отбор = Новый Структура("Вид", ВыбранныйЭлемент.Значение);
	
	НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформации.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СвойстваВида = НайденныеСтроки[0];
	
	Если СвойстваВида.ВыводитьВФормеВсегда = Ложь Тогда
		
		ДополнительныеПараметры.Вставить("ДобавляемыйВид", ВыбранныйЭлемент.Значение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюВопросЗадан", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = СтрШаблон(НСтр("ru='Добавить возможность ввода вида контактной информации ""%1""?'"), ВыбранныйЭлемент.Значение);
		ЗаголовокВопроса = НСтр("ru='Подтверждение добавления'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ЗаголовокВопроса);
		
	Иначе
		
		Форма.ДобавитьКонтактнуюИнформациюСервер(ВыбранныйЭлемент.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюВопросЗадан(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКонтактнуюИнформациюСервер(ДополнительныеПараметры.ДобавляемыйВид, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь)
	
	КоличествоЭлементовКоллекции = Объект.КонтактнаяИнформация.Количество();
	ИндексВставки = КоличествоЭлементовКоллекции;
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если Объект.КонтактнаяИнформация[ТекущийИндекс].Вид = ДобавляемыйВид Тогда
			ИндексВставки = ТекущийИндекс+1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКИ = Объект.КонтактнаяИнформация.Вставить(ИндексВставки);
	ДанныеКИ.Вид = ДобавляемыйВид;
	ДанныеКИ.Тип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемыйВид, "Тип");
	
	Результат = Новый Структура("ДобавляемыйВид", ДобавляемыйВид);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецПроцедуры

&НаСервере
Функция СписокВидовДляДобавленияКонтактнойИнформации()
	
	Если СвойстваВидовКонтактнойИнформацииИнициализирован <> Истина Тогда
		ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц();		
	КонецЕсли; 
	
	СписокДоступныхВидов = Новый СписокЗначений;
	Отбор = Новый Структура("Вид");
	Для Каждого СтрокаТаблицы Из ЭтаФорма.СвойстваВидовКонтактнойИнформации Цикл
		Отбор.Вид = СтрокаТаблицы.Вид;
		Если СтрокаТаблицы.РазрешитьВводНесколькихЗначений Или Объект.КонтактнаяИнформация.НайтиСтроки(Отбор).Количество() = 0  И СтрокаТаблицы.Вид.CRM_Основной Тогда
			// Заглушка для растягивания ширины списка выбора (ждем обновления платформы)
			СписокДоступныхВидов.Добавить(СтрокаТаблицы.Вид, СтрокаТаблицы.ПредставлениеВида + "       ");  
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДоступныхВидов;
	
КонецФункции

&НаСервере
Процедура ПрочитатьСвойстваВидовКонтактнойИнформацииКонтактныхЛиц()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПорядокТиповКИ.Тип,
	|	ПорядокТиповКИ.Порядок
	|ПОМЕСТИТЬ втПорядокТипов
	|ИЗ
	|	&ПорядокТиповКИ КАК ПорядокТиповКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ПРЕДСТАВЛЕНИЕ(ВидыКонтактнойИнформации.Ссылка) КАК ПредставлениеВида,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ЕСТЬNULL(НастройкиВидовКонтактнойИнформации.ВыводитьВФормеВсегда, ЛОЖЬ) КАК ВыводитьВФормеВсегда,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений КАК РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ПроверятьКорректность,
	// ++ VOG Солодов В.В. 02.03.2020 CRM-196
	|	ВидыКонтактнойИнформации.ВидРедактирования
	// До изменения
	//|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге
	// -- VOG Солодов В.В. 02.03.2020
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|		ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВидовКонтактнойИнформации КАК НастройкиВидовКонтактнойИнформации
	|		ПО ВидыКонтактнойИнформации.Ссылка = НастройкиВидовКонтактнойИнформации.Вид
	|ГДЕ
	|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|
	|УПОРЯДОЧИТЬ ПО
	|	втПорядокТипов.Порядок,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания");
	
	Запрос.УстановитьПараметр("ПорядокТиповКИ", УправлениеКонтактнойИнформацией.ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ГруппаВидовКИ", Справочники.ВидыКонтактнойИнформации.СправочниквогРаспределительныеЦентры);
	
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
	СвойстваВидовКонтактнойИнформации.Загрузить(ТаблицаСвойств);
	
КонецПроцедуры

// Механизм картинок
&НаКлиенте
Процедура ФайлКартинкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор);
		// +CRM
		Если ПустаяСтрока(АдресКартинки) Тогда
			ВывестиНедоступностьКартинки();
		КонецЕсли;	
		// -CRM
	Иначе
		АдресКартинки = "";
	КонецЕсли;
	CRM_УправлениеВидимостьюРамкиКартинки();			
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] =
		Новый Структура("ИмяБезРасширения, Расширение, ВремяИзменения, УниверсальноеВремяИзменения");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаИнициализацияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	Файл = Новый Файл;
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаИнициализацияФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаСуществованияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ДополнительныеПараметры.Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Файл не найден'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита], ДополнительныеПараметры.Файл);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение =
		СтрЗаменить(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение, ".", "");
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].ВремяИзменения = ВремяИзменения;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеУниверсальногоВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].УниверсальноеВремяИзменения = ВремяИзменения;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ДополнительныеПараметры.ИмяФайла);
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	Если ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаКартинки" Тогда
		АдресКартинки      = АдресФайлаВХранилище;
	ИначеЕсли ДополнительныеПараметры.ИмяРеквизита = "ДанныеФайлаHTML" Тогда
		АдресОписанияHTML  = АдресФайлаВХранилище;
		ПутьКФайлуОписанию = ДополнительныеПараметры.ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Перем ИдентификаторФайла;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр =  НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		                            + "|Все файлы(*.*)|*.*"
		                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат icon(*.ico)|*.ico"
		                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаДиалогЗавершение",
		ЭтотОбъект,
		Новый Структура("ИмяРеквизита", "ДанныеФайлаКартинки"));
		
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
		
	Иначе
		Фильтр =  НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		                            + "|Все файлы(*.*)|*.*"
		                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат icon(*.ico)|*.ico"
		                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
		
		ВыборИзображения   = Истина;
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);
		ВыборИзображения   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				Объект[ИмяРеквизитаОбъекта],
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.CRM_Фотография = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
	ДанныеФайлаКартинки = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("CRM_Фотография", "АдресКартинки",
		НСтр("ru='Отсутствует изображение для просмотра'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.CRM_Фотография) Тогда
		
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.CRM_Фотография);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	СтруктураПараметрыВыбора =
		Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", Объект.Ссылка, Истина, Истина);

	ОткрытьФорму(
		"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		СтруктураПараметрыВыбора,,,,,
		Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда
        Объект.CRM_Фотография = Результат;
        АдресКартинки = НавигационнаяСсылкаКартинки(Объект.CRM_Фотография, УникальныйИдентификатор)
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

#Область КарточкаОбъекта
	
&НаКлиенте
Процедура ГиперссылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента)
	
	Если ИмяЭлемента = "ГиперссылкаПерейтиФайлы"
	  ИЛИ ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
		Если вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка) Тогда
			ФормаИмя = "ОбщаяФорма.вогФормаУправленияПрисоединеннымиФайлами";
			ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Присоединенные файлы'"))
		Иначе	
			ФормаИмя = "ОбщаяФорма.ПрисоединенныеФайлы";
		КонецЕсли;
		
		ТипыФайлов = Новый Массив;
		Если ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда
			ТипыФайлов.Добавить(ПредопределенноеЗначение("Перечисление.вогТипыПрисоединенныхФайлов.Изображение"));
			ПараметрыФормы.Вставить("ТипыФайлов", ТипыФайлов);
			
		КонецЕсли;
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", ФормаИмя);
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы", ПараметрыФормы);
		ПараметрыПереходаПоГиперссылке.Вставить("Уникальность", ИмяЭлемента);
		
		Если ИмяЭлемента = "ГиперссылкаПерейтиФайлы" Тогда
			ИмяЗаголовка = "Файлы";
		Иначе 
			ИмяЗаголовка = "Изображения";
		КонецЕсли;
	  
		ПараметрыПереходаПоГиперссылке.Вставить("Заголовок", СтрШаблон("%1 (%2)", ИмяЗаголовка, Объект.Ссылка));

	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиАнкеты" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Респондент", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Документ.вогАнкета.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиУсловияДоставки" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ТорговаяТочка", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.вогУсловияДоставки.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиМероприятия" Тогда
		ПараметрыФормы = Новый Структура("ТорговаяТочка", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Документ.CRM_Мероприятие.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиПроцессы" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("вогТорговаяТочка", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "БизнесПроцесс.CRM_БизнесПроцесс.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЭкспозиции" Тогда
		ПараметрыФормы = Новый Структура("ВладелецЭкспозиции", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.вогЭкспозицииКлиентов.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиКонтакты" Тогда
		ПараметрыФормы = Новый Структура("ОбъектСвязи", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.КонтактныеЛицаПартнеров.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЮрЛица" Тогда
		ПараметрыФормы = Новый Структура("ТорговаяТочкаСвязи", Объект.Ссылка);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Справочник.вогЮридическиеЛица.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
				
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЗначенияКлассификаторов" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиВременныйДоступ" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ТорговаяТочка", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.вогВременныйДоступКТорговымТочкам.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	КонецЕсли;
	
	Если Не ПараметрыПереходаПоГиперссылке.Свойство("РежимОткрытияОкнаФормы") Тогда
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	Возврат ПараметрыПереходаПоГиперссылке
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информции возможен только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	Уникальность = ЭтаФорма.УникальныйИдентификатор;
	
	Если ПараметрыПереходаПоГиперссылке.Свойство("Уникальность") Тогда
		
		Уникальность = СокрЛП(Уникальность) + СокрЛП(ПараметрыПереходаПоГиперссылке.Уникальность); 
		
	КонецЕсли;
	
	
	ОткрытаяФорма = ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
	ПараметрыПереходаПоГиперссылке.ПараметрыФормы, ЭтаФорма, Уникальность, , , ,
	ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	
	Если ПараметрыПереходаПоГиперссылке.Свойство("Заголовок") Тогда
		ОткрытаяФорма.Заголовок = ПараметрыПереходаПоГиперссылке.Заголовок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиКоманда(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Если НЕ ( ИмяКоманды = "ГиперссылкаПерейтиФайлы"
		ИЛИ ИмяКоманды = "ГиперссылкаПерейтиИзображения") Тогда		
		
		Для каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
			Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
				ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
				ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
			Иначе
				ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
				ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Команда.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ссылка", Объект.Ссылка);
		
		СоответствиеРеквизитовКИ = Новый Соответствие;
		
		Для Каждого СтрокаДопРеквизита Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			
			Если СтрокаДопРеквизита.Выводить Тогда
				СоответствиеРеквизитовКИ.Вставить(СтрокаДопРеквизита.Вид, СтрокаДопРеквизита.ИмяРеквизита);
			КонецЕсли;
			
		КонецЦикла;	
		
		СтруктураПараметров.Вставить("СоответствиеРеквизитовКИ", СоответствиеРеквизитовКИ);
		
		ОповещениеПоЗавершению = Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтаФорма);
		
		ОткрытьФорму("ОбщаяФорма.вогФормаРазблокированиеРеквизитов",
			СтруктураПараметров,
			,
			,
			,
			, 
			ОповещениеПоЗавершению, 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ДатаРедактирования")
		И Результат.Свойство("МассивРеквизитов")
		И ТипЗнч(Результат.МассивРеквизитов) = Тип("Массив") 
		И Результат.МассивРеквизитов.Количество() > 0 Тогда
		
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(
			ЭтаФорма, 
			Результат.МассивРеквизитов);
			
		ЗапретРедактированияРеквизитовОбъектовКлиент.ЗаполнитьСписокРазрешенныхКРедактированию(
			ЭтаФорма,
			Результат.МассивРеквизитов);
		
		ДатаРедактированияРеквизитов = Результат.ДатаРедактирования;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключемыеДополнительныеКоманды

//++ Подключаемые дополнительные команды
&НаКлиенте
Процедура Подключаемый_ОбработчикДополнительнойКоманды(Команда) Экспорт 
	
	// ++ Тищенко В.В. 04.04.2019
	 вогОбщегоНазначенияВызовСервера.РазблокироватьОбъектИзФормы(Объект.Ссылка,УникальныйИдентификатор);
	// -- Тищенко В.В. 
	
	// ++ VOG Солодов В.В. 29.03.2019
	//вогУправлениеИнтерфейсомКлиент.ОбработчикКомандыФормы(Команда, ЭтаФорма);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "скДанныеЗапуска")
		И ЭтаФорма.скДанныеЗапуска.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя)).Количество() > 0 Тогда
	
		скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);	
	Иначе
		вогУправлениеИнтерфейсомКлиент.ОбработчикКомандыФормы(Команда, ЭтаФорма);
	КонецЕсли;
	// -- VOG Солодов В.В. 29.03.2019
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКоманды(Значение, ДополнительноеЗначение) Экспорт 
	
	вогУправлениеИнтерфейсомКлиент.ВыполнитьКодКомандыНаКлиенте(Значение, ДополнительноеЗначение, ЭтаФорма, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКомандыСервер(Значение, ДополнительноеЗначение) Экспорт 
	
	вогУправлениеИнтерфейсомСервер.ВыполнитьКодКомандыНаСервере(Значение, ДополнительноеЗначение, ЭтотОбъект, ЭтаФорма, Объект);
	
КонецПроцедуры
//-- Подключаемые дополнительные команды

#КонецОбласти

// ++ VOG Солодов В.В. 02.07.2019 task 440
&НаКлиенте
Процедура ОткрытьВыборТТ(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОткрытьВыборТТЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.вогТорговыеТочки.Форма.ФормаВыбора",
		ПараметрыФормыВыбора,
		ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьВыборТТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Объект.Ссылка);
		
		УстановитьСвязиОбъекта(МассивОбъектов, Результат);
		
		Элементы.ТорговыеТочкиСписок.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры // -- VOG Солодов В.В. 02.07.2019

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#КонецОбласти

#Область НавигацияФормы

&НаКлиенте
Процедура ВыполнитьПереходСтраницы(ИмяКоманды)
	
	Попытка
		// Выделить кнопку перехода
		Для каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
			Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
				ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
				ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
			Иначе
				ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
				ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
			КонецЕсли;
		КонецЦикла;
		// Переход страницы
		Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы[ИмяКоманды];
	Исключение
		ТекстСообщения 	= НСтр("ru = 'Не удалось перейти на страницу %1'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ИмяКоманды));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьКомандуНавигацииПриОткрытииФормы()

	Для каждого ЭлементКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
		Если ЭлементКоманды.ИмяКоманды 	= Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя Тогда
			ЭлементКоманды.ЦветТекста 	= Новый Цвет(128,0,128);
			ЭлементКоманды.Шрифт 		= Новый Шрифт(,10,Ложь,,Истина);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементов

&НаСервере
Процедура НастроитьФорму(НастройкиВидимостиИЗаголовков = Неопределено)
	
	Элементы.СтраницаКарточкаОбъекта.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
	// Настройка видимости и заголовков
	Если Не ЗначениеЗаполнено(НастройкиВидимостиИЗаголовков) Тогда
		НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	КонецЕсли;
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
		
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) <> Неопределено Тогда
			Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		КонецЕсли;
		
		// Формирование видимости элементов подменю "Перейти"
		ИмяКоманды = ЭлементВидимость.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				Элементы[ИмяКоманды].Видимость = ЭлементВидимость.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		Если Элементы.Найти(ЭлементЗаголовок.Ключ) <> Неопределено Тогда
			Элементы[ЭлементЗаголовок.Ключ].Заголовок = ЭлементЗаголовок.Значение;
		КонецЕсли;
		
		// Формирование заголовков элементов подменю "Перейти"
		ИмяКоманды = ЭлементЗаголовок.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				
				СтрокаИсключение = НСтр("ru = 'Список'");
				НачалоСтроки     = СтрНайти(ЭлементЗаголовок.Значение, "(") - 1;
				
				Если СтрНайти(ЭлементЗаголовок.Значение, СтрокаИсключение) = 0
					И НачалоСтроки > 0 Тогда
					
					Элементы[ИмяКоманды].Заголовок = СокрЛП(Лев(ЭлементЗаголовок.Значение, НачалоСтроки));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
			
	НастроитьВидимостьСворачиваемыхГрупп();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемыхГрупп()
	
	НастроитьВидимостьСворачиваемойГруппы("Портрет");
	НастроитьВидимостьСворачиваемойГруппы("Детали");
	//НастроитьВидимостьСворачиваемойГруппы("Контакты");
	НастроитьВидимостьСворачиваемойГруппы("КонтактнаяИнформация");
	//НастроитьВидимостьСворачиваемойГруппы("Менеджеры");
	НастроитьВидимостьСворачиваемойГруппы("ДополнительныеРеквизиты");
		
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемойГруппы(ИмяГруппы)
	
	ЭлементСворачиваяГруппа = Элементы["СворачиваемаяГруппа" + ИмяГруппы];
	Элементы["ГруппаЗаголовок" + ИмяГруппы].Видимость = ЕстьВидимыеЭлементыВГруппе(ЭлементСворачиваяГруппа);
	
КонецПроцедуры

&НаСервере
Функция ЕстьВидимыеЭлементыВГруппе(Элемент)
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Если ПодчиненныйЭлемент.Видимость 
				И ЕстьВидимыеЭлементыВГруппе(ПодчиненныйЭлемент) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПодчиненныйЭлемент.Видимость Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	ИмяГруппыСвернутьРазвернуть = Элемент.Имя;
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияОткрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияЗакрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ЗаголовокГруппы", "");
	ИзменитьСвернутостьГруппы(ИмяГруппыСвернутьРазвернуть);
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы",0.0001,Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть = Неопределено)
	Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость, Не Свернуть);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Свернуть);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Не Свернуть);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	Если Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяГруппыСвернутьРазвернуть];
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазвернутьСворачиваемуюГруппу(ИмяГруппы)
	ГруппаРодитель  = Элементы[ИмяГруппы].Родитель;
	Если ГруппаРодитель = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	ИмяГруппыРодителя =ГруппаРодитель.Имя;
	
	Если СтрНайти(ИмяГруппыРодителя, "СворачиваемаяГруппа") = 0 Тогда
		РазвернутьСворачиваемуюГруппу(ИмяГруппыРодителя);
	Иначе
		ИмяГруппыРодителя = СтрЗаменить(ИмяГруппыРодителя, "СворачиваемаяГруппа", "");
		ИзменитьСвернутостьГруппы(ИмяГруппыРодителя, Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область НастройкаСтраницФормы

&НаСервере
Процедура СкрытьРаскрытьВсеГруппы(Свернуть = Неопределено)
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	
	Для Каждого ИмяГруппы из ИменаСворачиваемыхГрупп Цикл
		
		ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходСтраницы(Команда)
	// Сверунть группу Контакты
	СкрытьРаскрытьВсеГруппы(Истина);
	// Переход страницы
	ВыполнитьПереходСтраницы(Команда.Имя);
КонецПроцедуры

#КонецОбласти

#Область ИзображениеПортрет

&НаСервереБезКонтекста
Функция ОбъектИмеетФайлы(Знач ВладелецФайлов, Знач ФайлИсключение = Неопределено, Фильтр)    //4
	Возврат CRM_ПрисоединенныеФайлы.ОбъектИмеетФайлы(ВладелецФайлов, ФайлИсключение);
КонецФункции // ОбъектИмеетФайлы()

&НаСервере
Процедура CRM_УправлениеВидимостьюРамкиКартинки()
	Если ЗначениеЗаполнено(АдресКартинки) Тогда
		Элементы.ФайлКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);		
	Иначе
		Элементы.ФайлКартинки.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);		
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ВывестиНедоступностьКартинки()
	АдресКартинки = "";
	Элементы.ФайлКартинки.ТекстНевыбраннойКартинки
		= НСтр("ru = 'Картинка не доступна (не доступен том) обратитесь к администратору.'");
	Объект.CRM_Фотография = Справочники.КонтактныеЛицаПартнеровПрисоединенныеФайлы.ПустаяСсылка();
	CRM_УправлениеВидимостьюРамкиКартинки();	
КонецПроцедуры // ВывестиНедоступностьКартинки()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыIDCards

&НаКлиенте
Процедура ListIDCardsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ 					= Истина;
	ПараметрыЗаполненения 	= Новый Структура("ОбъектСвязи",Объект.Ссылка);
	ПараметрыФормы 			= Новый Структура("ЗначенияЗаполнения",ПараметрыЗаполненения);
	
	ОткрытьФорму("РегистрСведений.вогIDCards.ФормаЗаписи",ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаСервере
Процедура УстановитьВидимостьРеквизитовКИ()
	
	СтруктураОтбора			= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.СправочниквогРаспределительныеЦентры, Ложь);
	флагВыводаГиперСсылки	= (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);

	Для Каждого СтрокаДопРеквизита Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если НЕ СтрокаДопРеквизита.Выводить Тогда Продолжить; КонецЕсли;
		
		Выводить = Истина;
		// ++ Харченко Д.И. № 000002173 - 29.08.2018 / 
		//Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		//	флаг_1 = НЕ (ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита] = "<адрес сайта не указан>") И НЕ РежимВидимостиПоказатьТолькоВажные;
		//Иначе	
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]);
		//КонецЕсли;	
		// -- Харченко Д.И. № 000002173 - 29.08.2018 / 
		
		Представление = СтрокаДопРеквизита.Представление;
		
// +CRM
		Для Каждого СтрокаДобавленногоРеквизита ИЗ ЭтотОбъект.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы Цикл
			Если СтрокаДобавленногоРеквизита.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(СтрокаДобавленногоРеквизита.Значение, СтрокаДопРеквизита.ИмяРеквизита) Тогда
				//+вог
				СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить");
				//СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить") ИЛИ (Не ЗначениеЗаполнено(Представление) И Не РедактироватьДР);
				//-вог
				
				Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = (Выводить И ((СтрокаДопРеквизита.Выводить И НЕ СкрыватьПолеКИ) ИЛИ ((РедактироватьДР И НЕ СкрыватьПолеКИ) ИЛИ флаг_1)));
				
			КонецЕсли;
		КонецЦИкла;
// -CRM
		
		Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт Тогда
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= Новый Цвет();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= Новый Шрифт();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Истина;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "";
			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].Высота = 5;
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].МногострочныйРежим = Истина;
				КонецЕсли;
				Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора				= истина;
					// ++ VOG Солодов В.В. 02.03.2020 CRM-196
					ВидРедактирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДопРеквизита.Вид, "ВидРедактирования");
					Если ВидРедактирования = "Диалог" Тогда
					// До изменения
					//Если СтрокаДопРеквизита.Вид.РедактированиеТолькоВДиалоге Тогда
					// -- VOG Солодов В.В. 02.03.2020
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветФона				= WebЦвета.Кремовый;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ИмяРеквизита = Элементы[СтрокаДопРеквизита.ИмяРеквизита].Имя;
			АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
			Если ПустаяСтрока(АдресСайтаКомпании) Тогда
				ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.РедактироватьКонтактныеДанные.Видимость = флагВыводаГиперСсылки И НЕ РежимВидимостиПоказатьТолькоВажные;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи(Элемент)
	CRM_УправлениеКонтактнойИнформациейКлиент.ОсновнойДляСвязиНажатие(ЭтотОбъект, Элемент);
КонецПроцедуры // Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи()

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
		// Если это адрес электронной почты, то надо проверить на коррректность заполнения.
		РезультатПроверки = CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПолучитьТипПроверитьЗаполнение(ЭтотОбъект, Элемент);
		Если НЕ РезультатПроверки = Неопределено И РезультатПроверки.КодОшибки<>0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	CRM_УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКонтактныеДанныеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РедактироватьДР Тогда
		РедактироватьКонтактныеДанные = НСтр("ru = 'Скрыть дополнительные контактные данные'");
		РедактироватьДР = Истина;
	Иначе
		РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
		РедактироватьДР = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзмененииАдресаЭлектроннойПочты(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомер(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьСМСНаНомер","");
		Телефон = ЭтотОбъект[ИмяРеквизита];
		Если ПустаяСтрока(Телефон) Тогда Возврат; КонецЕсли;
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Объект.Ссылка);
		Структура.Вставить("Телефон", ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Телефон));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьEmail(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьEmail","");
	
	АдресЭлектроннойПочты = ЭтотОбъект[ИмяРеквизита];

	Если НЕ ЗначениеЗаполнено(СокрЛП(АдресЭлектроннойПочты)) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	СтрРезультат = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(АдресЭлектроннойПочты);
	Если СтрРезультат.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрРезультат.Сообщение,,ИмяРеквизита);
		Возврат;
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.Добавить(Объект.Ссылка, СтрРезультат.АдресЭП);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
			
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПозвонитьНаНомер(Элемент)
	
	// +СофтФон
	сфпСофтФонПроКлиентПереопределяемый.сфпПодключаемый_ПозвонитьНаНомер(ЭтотОбъект, Объект);	
	// -СофтФон
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		Подключаемый_РедактироватьАдресСайтаКомпании(Элемент);
	Иначе
		Если Найти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		НачатьЗапускПриложения(, АдресСайтаКомпании);	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		АдресСайтаКомпании = "";
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводАдресаСайтаКомпанииЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, АдресСайтаКомпании, "Введите адрес сайта");
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура ВводАдресаСайтаКомпанииЗавершение(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
	Если АдресСайтаКомпании <> Неопределено Тогда
		Если ПустаяСтрока(АдресСайтаКомпании) Тогда
			ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
		Иначе	
			ЭтотОбъект[ИмяРеквизита] = АдресСайтаКомпании;
		КонецЕсли;	
			
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = АдресСайтаКомпании;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM
		
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресКомпании","");
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элементы[ИмяРеквизита], Неопределено, Ложь);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКарте(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОткрытьАдресНаИнтернетКарте","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(НайденныеСтроки[0].ЗначенияПолей);
	
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	СтруктураАдреса.Вставить("Представление", ЭтотОбъект[ИмяРеквизита]);
	
	СписокКарт = Новый СписокЗначений;
	// ++ Харченко Д.И. №  - 26.09.2018 / 
	//СписокКарт.Добавить("GIS","Карта GIS",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	//СписокКарт.Добавить("Google","Карта Google",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	//СписокКарт.Добавить("Yandex","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	СписокКарт.Добавить("вогГеокодирование","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
	//ПоказатьВыборИзСписка(ОписаниеОповещения, СписокКарт, ТекущийЭлемент,);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокКарт.Получить(0)); 
	// -- Харченко Д.И. №  - 26.09.2018
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение(Результат, СтруктураАдреса) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		СайтИнтернетКарты = Результат.Значение;
		CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочее(Элемент)
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьПрочее","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СтрокаПрочее = ЭтотОбъект[ИмяРеквизита];
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьПрочееЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, СтрокаПрочее, Строка(НайденныеСтроки[0].Вид),, Истина);
КонецПроцедуры // Подключаемый_РедактироватьПрочее

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочееЗавершение(СтрокаПрочее, ИмяРеквизита) Экспорт
	Если СтрокаПрочее <> Неопределено Тогда
		ЭтотОбъект[ИмяРеквизита] = СтрокаПрочее;
		
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = СтрокаПрочее;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM	
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьПрочее

// + Тищенко В.В.

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияЗапретРедактированиеТекста(Элемент, Текст, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Текст = ""; ЭтаФорма[Элемент.Имя] = "";
	ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Заперещено редактирование в поле формы'"));
	
КонецПроцедуры

// - Тищенко В.В.

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти 

#Область НастройкаВидимостиГруппИЭлементовПереключательРежима

&НаКлиенте
Процедура УстановитьАктивностьТекущийЭлемент()
	ЭтаФорма.ТекущийЭлемент = Элементы[ТекущийЭлементВыбор];
КонецПроцедуры

&НаКлиенте
Процедура СтраницыКарточкаОбъектаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаРеквизитыОбъекта Тогда
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Истина;
	Иначе
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГруппыРекурсивно(Элемент, Видимость)
	Если Видимость = Истина И 
		(СтрНайти(Элемент.Имя, "ДекорацияОткрыть") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаОбъемКолонки") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаДлинаКолонки") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаПлощадьКолонки") <> 0) Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Видимость = Видимость;
	Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьВидимостьГруппыРекурсивно(ПодчиненныйЭлемент,Видимость);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СтатусыСогласования

&НаСервере
Процедура ОбновитьДанныеСтатусаСогласования()

	ОписаниеСтатуса = вогОбщегоНазначения.ПолучитьОписаниеСтатусаСогласованияОбъекта(Объект.Ссылка);
	СтатусСогласования = ОписаниеСтатуса.Статус;
	РегистраторСтатуса = ОписаниеСтатуса.РегистраторСтатуса;

КонецПроцедуры

#КонецОбласти

#Область ПоискДублей

&НаСервереБезКонтекста
Функция ЕстьДубли(Знач Объект, Знач СтруктураПоиска, Знач СписокКонтактов, Знач ТочноеСоответствие = Ложь)
	
	МассивДублей = вогОбщегоНазначения.НайтиДубли(Объект, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие);
	Возврат МассивДублей.Количество() > 0;
	
КонецФункции 

&НаСервере
Процедура ИнициализацияПараметровПоискаДублей(ОбъектПоиска,СтруктураПоиска,СписокКонтактов)

	МассивКИ = Новый Массив;
	
	Для каждого Стр Из ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		Если Стр.Вид.вогПроверкаНаДубль Тогда
		 МассивКИ.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;

	Для каждого ЭлементКИ Из МассивКИ Цикл
		Если ЭлементКИ.Вид.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			СтруктураПоиска.Вставить("Контакт_Адрес", "ПОДОБНО");
			ОбъектПоиска.Вставить("Адрес"	, ЭлементКИ.Представление);
			СписокКонтактов.Вставить("Адрес", ЭлементКИ.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПодсистемыСвойств

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	// СтандартныеПодсистемы.Свойства
	//УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);	
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,, Ложь);
	НастроитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаСервере
Процедура НастроитьЭлементыДополнительныхРеквизитов()
	
	Для Каждого Элемент Из Элементы.ГруппаДополнительныеРеквизиты_1.ПодчиненныеЭлементы Цикл
		
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			
			Если Элемент.МногострочныйРежим <> Истина Тогда
				
				Элемент.РастягиватьПоГоризонтали = Ложь;
				
			Иначе
				
				Элемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Лево;
				Элемент.РастягиватьПоВертикали   = Ложь;
				Элемент.РастягиватьПоГоризонтали = Истина;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область МакетыИнформации

#Область ИнформацияОбъект

&НаКлиенте
Процедура ИнформацияОбъектОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка 				= Ложь;
	ТекстОбработчика 					= "";
	ТаблицаОбработчики 					= ЭтаФорма["КарточкаОбъекта_Обработчики"];
	ТаблицаРасшифровка					= ЭтаФорма["КарточкаОбъекта_Расшифровка"];
	ТаблицаРасшифровкиКлассификатора 	= ЭтаФорма["КарточкаОбъекта_РасшифровкаКлассификатора"];
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Гиперссылка_") <> 0 Тогда
		ИмяГиперссылки 		= СтрЗаменить(Расшифровка,"Гиперссылка_","");
		Для каждого ТекущийОбработчик Из ТаблицаОбработчики Цикл
			Если ТекущийОбработчик.Имя = ИмяГиперссылки Тогда
				ТекстОбработчика = ТекущийОбработчик.ПроизвольныйКод;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение	
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Пользователи") Тогда
		// Сверунть группу Контакты
		СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
		ВыполнитьПереходСтраницы("СтраницаМенеджеры");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		// Сверунть группу Контакты
		СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
		ВыполнитьПереходСтраницы("СтраницаКонтакты");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		ПоказатьЗначение(Неопределено,Расшифровка);
	ИначеЕсли вогОбщегоНазначенияВызовСервера.ПроверитьЭтоСсылка(ТипЗнч(Расшифровка)) Тогда
		
		Если ТипЗнч(Расшифровка) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы")
			Или (ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов") 
			И ТаблицаРасшифровкиКлассификатора.НайтиСтроки(Новый Структура("Имя", Расшифровка)).Количество() <> 0) Тогда
			
			вогУправлениеИнтерфейсомКлиент.ОбработатьРасшифровкуИнформации(ЭтотОбъект, Расшифровка);
			
		Иначе
			
			ПоказатьЗначение(Неопределено, Расшифровка);	
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Расшифровка_") <> 0 Тогда
		ИмяРасшифровки 	= СтрЗаменить(Расшифровка,"Расшифровка_","");
		ИмяПараметра 	= "Объект." + ИмяРасшифровки;
		Для каждого ТекущийОбработчик Из ТаблицаРасшифровка Цикл
			Если ТекущийОбработчик.Имя = ИмяПараметра Тогда
				ТекстОбработчика = ТекущийОбработчик.ТекстОбработчика;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"КИ_") <> 0 Тогда
		Расшифровка = СокрЛП(СтрЗаменить(Расшифровка,"КИ_",""));
		Результат = ОпределитьТипКонтактнойИнформации(Объект.Ссылка,Расшифровка);
		Если Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(Результат.Представление, Объект.Ссылка);
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
			//УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(Результат.Представление, "Яндекс.Карты");
			СтруктураАдреса 	= Новый Структура; 
			СтруктураАдреса.Вставить("Представление", Результат.Представление);
			СписокКарт 			= Новый СписокЗначений;
			СписокКарт.Добавить("вогГеокодирование","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
			ОписаниеОповещения 	= Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокКарт.Получить(0)); 
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо("", Результат.Представление, Результат.Тип);
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
			УправлениеКонтактнойИнформациейКлиент.ПерейтиПоВебСсылке("", Результат.Представление, Результат.Тип);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов") Тогда
		НайденныеСтроки = ТаблицаРасшифровкиКлассификатора.НайтиСтроки(Новый Структура("Имя",Расшифровка));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			WebService 	= НайденныеСтроки[0].Расшифровка;
			Результат 	= вогИнтеграцияСУчетнойСистемой.СформироватьОтчетЧерезWebService(Объект.Ссылка,WebService);
			Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
				Результат.ОтображатьСетку = Ложь;
				Результат.ОтображатьЗаголовки = Ложь;
				ЗаголовокОтчета = Строка(Расшифровка) +" "+Объект.Ссылка;
				Результат.Показать(НСтр("ru = '"+ЗаголовокОтчета+"'"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		вогОбщегоНазначенияКлиент.РасшифрокаВнешниеДанныеМакет(Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьТипКонтактнойИнформации(Ссылка,Представление)

	// ++ VOG Солодов В.В. 14.06.2019 task 376
	ИсходящаяСтруктура 	= Новый Структура("Тип, Вид, Широта, Долгота, Представление");
	ТекущаяТаблица 		= ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	" + (ТекущаяТаблица) + ".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактнаяИнформация.НомерСтроки = &Представление";
	
	Запрос.УстановитьПараметр("Ссылка", 		Ссылка);
	Запрос.УстановитьПараметр("Представление", 	Число(Представление));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ИсходящаяСтруктура, ВыборкаИзРезультатаЗапроса);
	КонецЕсли;
	
	Возврат ИсходящаяСтруктура;
	// До изменения
	//РезультатЗапроса 	= Неопределено;
	//ТекущаяТаблица 		= ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
	//
	//Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	//|	КонтактнаяИнформация.Тип КАК Тип,
	//|	КонтактнаяИнформация.Вид КАК Вид,
	//|	КонтактнаяИнформация.Широта КАК Широта,
	//|	КонтактнаяИнформация.Долгота КАК Долгота,
	//|	КонтактнаяИнформация.Представление КАК Представление
	//|ИЗ
	//|	"+(ТекущаяТаблица)+".КонтактнаяИнформация КАК КонтактнаяИнформация
	//|ГДЕ
	//|	КонтактнаяИнформация.Ссылка = &Ссылка
	//|	И КонтактнаяИнформация.Представление = &НомерСтроки");
	//
	//Запрос.УстановитьПараметр("Ссылка",Ссылка);
	//Запрос.УстановитьПараметр("НомерСтроки",Представление);

	//
	////Запрос.УстановитьПараметр("Представление",Представление);
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	ИсходящаяСтруктура 				= Новый Структура("Тип, Вид, Представление");
	//	ВыборкаИзРезультатаЗапроса 		= РезультатЗапроса.Выбрать();
	//	Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
	//		ЗаполнитьЗначенияСвойств(ИсходящаяСтруктура,ВыборкаИзРезультатаЗапроса);
	//		РезультатЗапроса = ИсходящаяСтруктура;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Возврат РезультатЗапроса;
	// -- VOG Солодов В.В. 14.06.2019
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПрочитатСвязиОбъекта()
	
	//+ Торговые точки
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогСвязиРаспределительныхЦентров.ОбъектСвязи КАК ОбъектСвязи
	|ИЗ
	|	РегистрСведений.вогСвязиРаспределительныхЦентров КАК вогСвязиРаспределительныхЦентров
	|ГДЕ
	|	вогСвязиРаспределительныхЦентров.РаспределительныйЦентр = &Ссылка
	|	И вогСвязиРаспределительныхЦентров.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки";
	
	ТорговыеТочки.Загрузить(Запрос.Выполнить().Выгрузить());
	//- Торговые точки
	
	//+ Юр. лицо
	// ++ VOG Солодов В.В. 13.06.2019 task 374
	// До изменения
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//|	вогСвязиЮридическихЛиц.ЮридическоеЛицо КАК ЮридическоеЛицо
	//|ИЗ
	//|	РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
	//|ГДЕ
	//|	ВЫРАЗИТЬ(вогСвязиЮридическихЛиц.ОбъектСвязи КАК Справочник.вогРаспределительныеЦентры) = &Ссылка";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	ЮрЛицоСвязи = Выборка.ЮридическоеЛицо;
	//КонецЕсли;
	// -- VOG Солодов В.В. 13.06.2019 
	//- Юр. лицо
	
КонецПроцедуры
 
&НаСервере
Функция ИменаСворачиваемыхГрупп()

	ИменаСворачиваемыхГрупп = Новый Массив;
	
	//ИменаСворачиваемыхГрупп.Добавить("Подразделения");
	//ИменаСворачиваемыхГрупп.Добавить("КонтактнаяИнформация");
	//ИменаСворачиваемыхГрупп.Добавить("НаправленияДеятельности");

	//ИменаСворачиваемыхГрупп.Добавить("Классификаторы");
	//ИменаСворачиваемыхГрупп.Добавить("Грузополучатели");
	
	//ИменаСворачиваемыхГрупп.Добавить("ВнешниеКоды");
	//ИменаСворачиваемыхГрупп.Добавить("НаправленияДеятельности");
	//ИменаСворачиваемыхГрупп.Добавить("ДополнительныеРеквизиты");

	Возврат ИменаСворачиваемыхГрупп;
	
КонецФункции

&НаСервере
Процедура ОбновитьГиперссылкиИКарточку()
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) = Неопределено
			Или СтрНайти(ЭлементВидимость.Ключ,"Гиперссылка") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		Если Элементы.Найти(ЭлементЗаголовок.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		Элементы[ЭлементЗаголовок.Ключ].Заголовок = ЭлементЗаголовок.Значение;
	КонецЦикла;
	
	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКарточку()    //4
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтроки(Текст, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Объект[ДополнительныеПараметры] = Текст;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСвязьРЦТТ(Отказ)
	
	// ++ VOG Солодов В.В. 01.07.2019 task 440
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогТорговыеТочки.Ссылка КАК ТорговаяТочка,
		|	вогТорговыеТочки.Вид КАК Вид
		|ИЗ
		|	Справочник.вогТорговыеТочки КАК вогТорговыеТочки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиРаспределительныхЦентров КАК СвязиРаспределительныхЦентров
		|		ПО вогТорговыеТочки.Ссылка = СвязиРаспределительныхЦентров.ОбъектСвязи
		|			И (СвязиРаспределительныхЦентров.РаспределительныйЦентр = &Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	// До изменения
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ТорговыеТочки.ОбъектСвязи КАК ОбъектСвязи
	//|ПОМЕСТИТЬ ВТ_ТорговыеТочки
	//|ИЗ
	//|	&ТорговыеТочки КАК ТорговыеТочки
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ВТ_ТорговыеТочки.ОбъектСвязи КАК ОбъектСвязи
	//|ИЗ
	//|	ВТ_ТорговыеТочки КАК ВТ_ТорговыеТочки
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки КАК вогТорговыеТочки
	//|		ПО ВТ_ТорговыеТочки.ОбъектСвязи = вогТорговыеТочки.Ссылка";
	//|			И (вогТорговыеТочки.Грузополучатель = ИСТИНА)";
	//
	//Запрос.УстановитьПараметр("ТорговыеТочки", ТорговыеТочки.Выгрузить());
	//
	//РезультатЗапроса = Запрос.Выполнить();
	// -- VOG Солодов В.В. 01.07.2019
	
	Если РезультатЗапроса.Пустой() Тогда
		// ++ VOG Солодов В.В. 01.07.2019 task 440
		ТекстСообщения = НСтр("ru = 'В связях РЦ нет торговых точек!'");
		// До изменения
		//ТекстСообщения = НСтр("ru = 'В связях РЦ нет торговых точек с признаком ""Грузополучатель""!'");
		// -- VOG Солодов В.В. 01.07.2019
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
