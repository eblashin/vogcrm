
&НаСервереБезКонтекста
// Функция возвращает текущего пользователя.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Текущий пользователь.
//
Функция ТекущийПользователь()
	Возврат Пользователи.ТекущийПользователь();
КонецФункции // ТекущийПользователь()

&НаСервере
Функция ПроверитьНаПрава()
	
	Возврат (Пользователи.РолиДоступны("CRM_СозданиеОбщихШаблоновДокументов, ПолныеПрава") ИЛИ ПравоДоступа("АдминистрированиеДанных", Метаданные));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписок()
	
	Список.Очистить();
	
	Если ЭтоНовыйШаблон Тогда
		ИмяСправочникаХранилищаФайлов = ВыгружаемыйОбъект.Метаданные().Имя + "ПрисоединенныеФайлы";
	Иначе
		ИмяСправочникаХранилищаФайлов = "CRM_ШаблоныОбъектовПрисоединенныеФайлы";
	КонецЕсли;
	CRM_ЕстьИдентификатор = Метаданные.Справочники[ИмяСправочникаХранилищаФайлов].Реквизиты.Найти("ИДФайлаЭлектронногоПисьма");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецФайла",           ?(ЭтоНовыйШаблон,ВыгружаемыйОбъект.Ссылка,Объект.Ссылка));
	Запрос.УстановитьПараметр("ТекущийПользователь",     ТекущийПользователь());
	Запрос.УстановитьПараметр("СекундДоМестногоВремени", 0);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА Файлы.ПометкаУдаления = ИСТИНА
	|			ТОГДА Файлы.ИндексКартинки + 1
	|		ИНАЧЕ Файлы.ИндексКартинки
	|	КОНЕЦ КАК ИндексКартинки,
	|	Файлы.Наименование КАК Наименование,
	|	Файлы.Описание,
	|	Файлы.ДатаСоздания,
	|	ДОБАВИТЬКДАТЕ(Файлы.ДатаМодификацииУниверсальная, СЕКУНДА, &СекундДоМестногоВремени) КАК ДатаИзменения,
	|	Файлы.Автор,
	|	Файлы.Размер / 1024 КАК Размер,
	|	Файлы.ПодписанЭП,
	|	Файлы.Зашифрован,
	|	ВЫБОР
	|		КОГДА Файлы.Редактирует = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ФайлРедактируется,
	|	ВЫБОР
	|		КОГДА Файлы.Редактирует = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФайлРедактируетТекущийПользователь,
	|	"""" КАК ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	&ИмяСправочника КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	Если ЭтоНовыйШаблон Тогда
		ТекстЗапроса = ТекстЗапроса +"
		|	И НЕ Файлы.ПометкаУдаления";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочникаХранилищаФайлов);
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Список.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВладельцевШаблона();
	
	Если НЕ ЭтоНовыйШаблон Тогда
		НаборЗаписей = РегистрыСведений.CRM_ШаблоныОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Шаблон.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если НЕ ЗначениеЗаполнено(ЗаписьНабора.Владелец) Тогда Продолжить; КонецЕсли;
			НоваяСтрока = СписокПользователей.Добавить();
			НоваяСтрока.Пользователь = ЗаписьНабора.Владелец;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// Общие процедуры и функции
&НаКлиенте
Функция ЕстьПометки(ТекущаяСтрока);
	Строки =ТекущаяСтрока.ПолучитьЭлементы();
	Если Строки.Количество() > 0 Тогда
	
		Для Каждого Строка Из Строки Цикл
			
			Если Строка.Пометка = Истина Тогда
			
				Возврат Истина;
			
			КонецЕсли;
			ЕстьПометки(Строка);
		КонецЦикла;	

	КонецЕсли; 
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура УстановитьСнятьПометку(ТекущаяСтрока,Пометка);
	Строки =ТекущаяСтрока.ПолучитьЭлементы(); 
	Если Строки.Количество() > 0 Тогда
	
		Для Каждого Строка Из Строки Цикл
			Строка.Пометка = Пометка;
			УстановитьСнятьПометку(Строка,Пометка);
		КонецЦикла;	

	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРеквизитов(ПереданныйОбъект = Неопределено)
	
	ДеревоМетаданных =Неопределено;
	Если (ЗначениеЗаполнено(ВыгружаемыйОбъект) И НЕ ТипЗнч(ВыгружаемыйОбъект)=Тип("СправочникСсылка.CRM_ШаблоныОбъектов")) ИЛИ (НЕ ПереданныйОбъект = Неопределено) Тогда
		ДеревоМетаданных = CRM_ШаблоныОбъектов.ПолучитьДеревоРеквизитов(?(ПереданныйОбъект=Неопределено,ВыгружаемыйОбъект,ПереданныйОбъект));
	Иначе
		Если ТипЗнч(ВыгружаемыйОбъект)=Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
			ДеревоМетаданных = CRM_ШаблоныОбъектов.ПолучитьДеревоРеквизитов(,ВыгружаемыйОбъект);
		Иначе
			ДеревоМетаданных = CRM_ШаблоныОбъектов.ПолучитьДеревоРеквизитов(,Объект.ссылка);
		КонецЕсли;
	КонецЕсли;
	ЗначениеВДанныеФормы(ДеревоМетаданных,СписокРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьШаблон(Владелец)
	
	ДеревоМетаданных			= ДанныеФормыВЗначение(СписокРеквизитов			,Тип("ДеревоЗначений"));
	ТекстШаблона = CRM_ШаблоныОбъектов.ОбновитьШаблон(Владелец,ДеревоМетаданных);
	
	ПолныйПуть = ПолучитьИмяВременногоФайла("xml");
	ФайлНаДиске = Новый ЗаписьТекста;
	ФайлНаДиске.Открыть(ПолныйПуть,КодировкаТекста.UTF8);
	ФайлНаДиске.Записать(ТекстШаблона);
	ФайлНаДиске.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
	
	ФайлНаДиске = Новый Файл(ПолныйПуть);
	ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
	УдалитьФайлы(ПолныйПуть);
	
	Владелец.ФайлХранилище = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьШаблон(Владелец)

	ДеревоМетаданных			= ДанныеФормыВЗначение(СписокРеквизитов			,Тип("ДеревоЗначений"));
	
	Если ТипЗнч(ВыгружаемыйОбъект)=Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
		ТекстШаблона = CRM_ШаблоныОбъектов.ОбновитьШаблон(ВыгружаемыйОбъект,ДеревоМетаданных);
	Иначе
		Если Не ЗначениеЗаполнено(ВыгружаемыйОбъект) И ЭтоАдресВременногоХранилища(ПереданныйОбъектАдресВоВременномХранилище) Тогда
			ТекстШаблона = CRM_ШаблоныОбъектов.ВыгрузитьРеквизитыДокументаВШаблон(ПереданныйОбъектАдресВоВременномХранилище,ДеревоМетаданных);
		Иначе
			ТекстШаблона = CRM_ШаблоныОбъектов.ВыгрузитьРеквизитыДокументаВШаблон(ВыгружаемыйОбъект,ДеревоМетаданных);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ПолучитьИмяВременногоФайла("xml");
	ФайлНаДиске = Новый ЗаписьТекста;
	ФайлНаДиске.Открыть(ПолныйПуть,КодировкаТекста.UTF8);
	ФайлНаДиске.Записать(ТекстШаблона);
	ФайлНаДиске.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
	
	ФайлНаДиске = Новый Файл(ПолныйПуть);
	ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
	УдалитьФайлы(ПолныйПуть);
	
	Владелец.ФайлХранилище = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////
// Обработчики событий табличных частей и связанных с ними контролов.

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	УстановитьСнятьПометку(СписокРеквизитов,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьВсе(Команда)
	
	УстановитьСнятьПометку(СписокРеквизитов,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовПометкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	
	СтрокиДерева = ТекущаяСтрока.ПолучитьЭлементы();
	
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда	
		СтрокиРодителя = Родитель.ПолучитьЭлементы();
		Если СтрокиРодителя.Количество() > 0 Тогда
			
			ПометкаРодителя = Ложь;
			
			Для Каждого ВложеннаяСтрока Из СтрокиРодителя Цикл
				Если ВложеннаяСтрока.Пометка Тогда
					ПометкаРодителя = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла; 
			Родитель.Пометка = ПометкаРодителя;

		КонецЕсли;
	ИначеЕсли СтрокиДерева.Количество()>0 Тогда
		// Если кликнули на табличной части значит надо либо полностью пометить все ее реквизиты, либо наоборот отменить
		// выделение.
		Для Каждого ВложеннаяСтрока Из СтрокиДерева Цикл
			ВложеннаяСтрока.Пометка = ТекущаяСтрока.Пометка;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////
// Обработчики событий формы 

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	Элементы.СписокПометка.Видимость			= ЭтоНовыйШаблон;
	Элементы.ГруппаВладельцы.Видимость			= НЕ ЭтоОбщийШаблон И ЕстьПраво;
	Элементы.ГруппаСтраниц.ОтображениеСтраниц	= ?((ЭтоОбщийШаблон И ЕстьПраво),ОтображениеСтраницФормы.Нет,ОтображениеСтраницФормы.ЗакладкиСверху);
	Элементы.ЭтоОбщийШаблон.Видимость			= ЕстьПраво;
	ТолькоПросмотр						= (НЕ ЕстьПраво И ЭтоОбщийШаблон И НЕ ЭтоНовыйШаблон);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПереданныйОбъект = Неопределено;
	
	ЭтоНовыйШаблон = Объект.Ссылка.Пустая();
	
	Элементы.ШаблонАвтотекста.Видимость = Ложь;
	Если НЕ Параметры.Свойство("ЗначенияЗаполнения") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ВыгружаемыйОбъект = Параметры.ЗначениеКопирования;
	Иначе
		стрДанныеЗаполнения = Параметры.ЗначенияЗаполнения;
		
		Если стрДанныеЗаполнения.Свойство("Объект") Тогда
			Если ЗначениеЗаполнено(стрДанныеЗаполнения.Объект) Тогда
				Если ТипЗнч(стрДанныеЗаполнения.Объект) = Тип("Строка") Тогда
					ПереданныйОбъект = ПолучитьИзВременногоХранилища(стрДанныеЗаполнения.Объект).ОбъектЗначение;
					ПереданныйОбъектАдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый Структура("ОбъектЗначение", ПереданныйОбъект), УникальныйИдентификатор);
					ВыгружаемыйОбъект = ПереданныйОбъект.Ссылка;
				Иначе
					ВыгружаемыйОбъект = стрДанныеЗаполнения.Объект;
				КонецЕсли;
				
				Если ТипЗнч(ВыгружаемыйОбъект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
					Элементы.ШаблонАвтотекста.Видимость = Истина;
				КонецЕсли;
			КонецЕсли;
			мДанные = ВыгружаемыйОбъект.Метаданные();
			
			Объект.ТипОбъекта = мДанные.ПолноеИмя();
			Объект.Синоним = мДанные.Синоним;
			Если CRM_ШаблоныОбъектов.ПроверитьСуществованиеРеквизита("Тема", ВыгружаемыйОбъект) И ПустаяСтрока(Объект.Наименование) Тогда
				Объект.Наименование = ВыгружаемыйОбъект.Тема;
				Если Не ЗначениеЗаполнено(Объект.Наименование) И ПереданныйОбъект <> Неопределено Тогда
					Попытка Объект.Наименование = ПереданныйОбъект.Тема;
					Исключение КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьДеревоРеквизитов(ПереданныйОбъект);
	
	Если НЕ ЭтоНовыйШаблон Тогда
		ПолучитьВладельцевШаблона();
		ЭтоОбщийШаблон = (СписокПользователей.Количество()=0);
	Иначе
		НоваяСтрока = СписокПользователей.Добавить();
		НоваяСтрока.Пользователь = ТекущийПользователь();
	КонецЕсли;
	
	ЗаполнитьСписок();
	
	ТипСправочникаСФайлами = Тип("СправочникСсылка." + ИмяСправочникаХранилищаФайлов);
	
	ЕстьПраво = ПроверитьНаПрава();
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоНовыйШаблон Тогда
		ЗаписатьШаблон(ТекущийОбъект);
		// Всегда обновляем новый шаблон, если до записи изменяли значения полей вручную.
		ОбновитьШаблон(ТекущийОбъект);
	Иначе
		ОбновитьШаблон(ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Если это новый шаблон, а объекта, на основании которого его делали есть
	// присоединенные файлы, то создадим присоединенные фалйы для этого шаблона.
	Если ЭтоНовыйШаблон Тогда
		ЗаписатьПрисоединенныеФайлы(ТекущийОбъект.Ссылка);
		ЗаполнитьСписок();
	КонецЕсли;
	
	ЗаписатьВладельцевШаблона(ТекущийОбъект.Ссылка);
	
	ЭтоНовыйШаблон = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВладельцевШаблона(ШаблонСсылка)
	
	НаборЗаписей = РегистрыСведений.CRM_ШаблоныОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Шаблон.Установить(ШаблонСсылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Если НЕ ЭтоОбщийШаблон Тогда
		Для Каждого СтрокаПользователя Из СписокПользователей Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Шаблон		= ШаблонСсылка;
			НоваяЗапись.Владелец	= СтрокаПользователя.Пользователь;
			НоваяЗапись.ТипОбъекта	= ШаблонСсылка.ТипОбъекта;
			НоваяЗапись.Синоним		= ШаблонСсылка.Синоним;
			НоваяЗапись.ИмяОбъекта	= ШаблонСсылка.ИмяОбъекта;
		КонецЦикла;
		
		Если СписокПользователей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Шаблон		= ШаблонСсылка;
			НоваяЗапись.ТипОбъекта	= ШаблонСсылка.ТипОбъекта;
			НоваяЗапись.Синоним		= ШаблонСсылка.Синоним;
			НоваяЗапись.ИмяОбъекта	= ШаблонСсылка.ИмяОбъекта;
		КонецЕсли;
	Иначе
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Шаблон		= ШаблонСсылка;
		НоваяЗапись.ТипОбъекта	= ШаблонСсылка.ТипОбъекта;
		НоваяЗапись.Синоним		= ШаблонСсылка.Синоним;
		НоваяЗапись.ИмяОбъекта	= ШаблонСсылка.ИмяОбъекта;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ЕстьПометки(СписокРеквизитов) Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Нстр("ru='Необходимо отметить хотя бы один реквизит!'");
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если НЕ ЭтоОбщийШаблон И ЕстьПраво И СписокПользователей.Количество() = 0 Тогда
			ТекстВопроса = НСтр("ru = 'Не указан владелец шаблона.
				|Сделать шаблон общим?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, ПараметрыЗаписи);	
			Отказ = Истина;
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ИначеЕсли ЭтоНовыйШаблон И НЕ ЕстьПраво И СписокПользователей.Количество() = 0 Тогда
			ЭтоОбщийШаблон = Ложь;
			НоваяСтрока = СписокПользователей.Добавить();
			НоваяСтрока.Пользователь = ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтоОбщийШаблон = Истина;
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать(Новый Структура("ЗакрытьПослеЗаписи", Истина));
КонецПроцедуры


&НаКлиенте
Процедура КомендаЗаписать(Команда)
	Записать();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПрисоединенныеФайлы(ШаблонСсылка);
	Если ЭтоНовыйШаблон Тогда
		СписокОтбора = Новый СписокЗначений;
		Для Каждого ТекущиеДанные Из Список Цикл
			Если ТекущиеДанные.Пометка Тогда
				СписокОтбора.Добавить(ТекущиеДанные.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если СписокОтбора.Количество() > 0 Тогда
			CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(ВыгружаемыйОбъект, ШаблонСсылка, СписокОтбора);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат КонецЕсли;
	
	Если (ТекущиеДанные.ТипРеквизита.Типы().Количество() = 1) И (ТекущиеДанные.ТипРеквизита.Типы()[0] = Тип("Строка")) Тогда
		ДополнительныеПараметры = Новый Структура("ТекДанные", ТекущиеДанные);
		Оповещение = Новый ОписаниеОповещения("ПослеВводаСтроки", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВводСтроки(Оповещение,ТекущиеДанные.Значение, Нстр("ru = 'Установка значения реквизита'"), 0, Истина);
	КонецЕсли;		
	//Элементы.ДеревоРеквизитов.ТекущийЭлемент.ОграничениеТипа = ТекущиеДанные.ТипРеквизита;
	//Элемент.ОграничениеТипа = ТекущиеДанные.ТипРеквизита;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтроки(Строка, ДополнительныеПараметры) Экспорт
	ТекДанные = ДополнительныеПараметры.ТекДанные;
	Если НЕ Строка = Неопределено Тогда
		ТекДанные.Значение = Строка;
    КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные		= Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные	= Неопределено Тогда Возврат; КонецЕсли;
	
	ЕстьПодчиненные = (ТекущиеДанные.ПолучитьЭлементы().Количество()>0);
	Элементы.ДеревоРеквизитовЗначение.Доступность = НЕ ЕстьПодчиненные;
	
	Если НЕ ЕстьПодчиненные Тогда
		Элементы.ДеревоРеквизитовЗначение.ОграничениеТипа = ТекущиеДанные.ТипРеквизита;
		Если (ТекущиеДанные.ТипРеквизита.Типы().Количество() = 1) И (ТекущиеДанные.ТипРеквизита.Типы()[0] = Тип("Строка")) Тогда
			Элементы.ДеревоРеквизитовЗначение.РедактированиеТекста	= Истина;
			Элементы.ДеревоРеквизитовЗначение.КнопкаВыбора			= Истина;
			Элементы.ДеревоРеквизитовЗначение.РежимРедактирования	= РежимРедактированияКолонки.Непосредственно;
		Иначе
			Элементы.ДеревоРеквизитовЗначение.РедактированиеТекста	= Ложь;
			Элементы.ДеревоРеквизитовЗначение.КнопкаВыбора			= Неопределено;
			Элементы.ДеревоРеквизитовЗначение.РежимРедактирования	= РежимРедактированияКолонки.Вход;			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл()
	
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Команда)
	
	ОткрытьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураДополнительныхПараметров = Новый Структура("Копирование, Элемент", Копирование, Элемент);
	
	Если ЭтоНовыйШаблон Тогда
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СписокПередНачаломДобавленияЗавершение", ЭтотОбъект, СтруктураДополнительныхПараметров);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		СписокПередНачаломДобавленияЗавершение(Неопределено, СтруктураДополнительныхПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавленияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
		
	Если ДополнительныеПараметры.Копирование Тогда
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
		
		ПараметрыФормы = Новый Структура("ЗначениеКопирования", ДополнительныеПараметры.Элемент.ТекущиеДанные.Ссылка);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы);
		
	Иначе
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если НЕ Элементы.Список.ТекущийЭлемент.Имя = "СписокПометка" Тогда
		
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",           ТекущиеДанные.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныйФайл", ПараметрыФормы, , Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуУдаленияПрисоединенногоФайла(СсылкаНаФайл)
	
	ФайлОбъект = СсылкаНаФайл.ПолучитьОбъект();
	ФайлОбъект.УстановитьПометкуУдаления(НЕ ФайлОбъект.ПометкаУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если НЕ ЭтоНовыйШаблон Тогда
		УстановитьПометкуУдаленияПрисоединенногоФайла(ТекущиеДанные.Ссылка);
		ЗаполнитьСписок();
	Иначе
		ТекущиеДанные.Пометка = НЕ ТекущиеДанные.Пометка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_Файл" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый Тогда
		
		ЗаполнитьСписок();
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВладельцыШаблонаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",				Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",		Ложь);
	ПараметрыФормы.Вставить("ВыборГруппПользователей",	Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",		Истина);
	ФормаПодбора = ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры


&НаСервере
// Функция получает список пользователей.
//
// Параметры:
//	ГруппаПользователей	- СправочникСсылка	- Группа, пользователей которой нужно получить.
//
// Возвращаемое значение:
//	СписокЗначений	- Список пользователей.
//
Функция ПолучитьСписокПользователей(ГруппаПользователей = Неопределено, ВключаяВложенные = Ложь)
	мСписокПользователей = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(ГруппаПользователей) Тогда
		Запрос.УстановитьПараметр("Ссылка", ГруппаПользователей);
		Запрос.Текст = "ВЫБРАТЬ
           |	ГруппыПользователейСостав.Пользователь
           |ИЗ
           |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
           |ГДЕ";
		Если ВключаяВложенные Тогда
			Запрос.Текст = Запрос.Текст + "
           |	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ(&Ссылка)";
		Иначе	   
			Запрос.Текст = Запрос.Текст + "
           |	ГруппыПользователейСостав.Ссылка = &Ссылка";
		КонецЕсли;   
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
           |	Пользователи.Ссылка КАК Пользователь
           |ИЗ
           |	Справочник.Пользователи КАК Пользователи";
	КонецЕсли;				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаПользователя = мСписокПользователей.Добавить();
		СтрокаПользователя.Значение	= Выборка.Пользователь;
	КонецЦикла;
	Возврат мСписокПользователей;
КонецФункции // ПолучитьСписокПользователей() 	

&НаКлиенте
// Процедура выполняет заполнение списка пользователей на форме.
//
// Параметры:
//	мСписокПользователей	- СписокЗначений	- Список пользователей для заполнения на форме
//
Процедура ЗаполнитьСписокПользователей(мСписокПользователей)
	// Удаляем дубли из списка
	Для Каждого СтрокаСписка Из СписокПользователей Цикл
		ТекПользователь = мСписокПользователей.НайтиПоЗначению(СтрокаСписка.Пользователь);
		Если НЕ (ТекПользователь = Неопределено) Тогда 
			мСписокПользователей.Удалить(ТекПользователь);
		КонецЕсли;
	КонецЦикла;	
	// Добавляем новых пользователей в список.
	Для Каждого СтрокаСписка Из мСписокПользователей Цикл
		СтрокаПользователя = СписокПользователей.Добавить();
		СтрокаПользователя.Пользователь	= СтрокаСписка.Значение;
	КонецЦикла;	
	СписокПользователей.Сортировать("Пользователь Возр");
КонецПроцедуры // ЗаполнитьСписокПользователей()	

&НаСервере
// Функция проверяет наличие вложенных групп у группы.
//
// Параметры:
//	ГруппаПользователей	- СпрвочникСсылка	- Группа для проверки.
//
// Возвращаемое значение:
//	Булево	- Наличие вложенных групп.
//
Функция ЕстьВложенныеГруппы(ГруппаПользователей)
	Если НЕ ЗначениеЗаполнено(ГруппаПользователей) Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ГруппаПользователей);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыПользователей.Ссылка
	               |ИЗ
	               |	Справочник.ГруппыПользователей КАК ГруппыПользователей
	               |ГДЕ
	               |	ГруппыПользователей.Родитель = &Родитель";
	Выборка = Запрос.Выполнить();
	Возврат НЕ Выборка.Пустой(); 
КонецФункции // ЕстьВложенныеГруппы()

&НаКлиенте
// Процедура заполнения всеми пользователями.
//
Процедура ЗаполнитьВсемиПользователями(Команда)
	мСписокПользователей = ПолучитьСписокПользователей();
	ЗаполнитьСписокПользователей(мСписокПользователей);
КонецПроцедуры

&НаСервереБезКонтекста
// Функция проверяет использование функциональной опции "ИспользоватьГруппыПользователей".
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Использование опции.
//
Функция ПолучитьИспользованиеГрупп()
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
КонецФункции // ПолучитьИспользованиеГрупп()
	
&НаКлиенте
// Процедура заполнения по группе пользователей.
//
Процедура ЗаполнитьПоГруппеПользователей(Команда)
	ИспользоватьГруппы = ПолучитьИспользованиеГрупп();
	Если НЕ ИспользоватьГруппы Тогда
		ПоказатьПредупреждение(, "Отключена настройка ""Использовать группы пользователей""");
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораГруппыПользователей", ЭтотОбъект);
	ОткрытьФорму("Справочник.ГруппыПользователей.ФормаВыбораГруппы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораГруппыПользователей(ГруппаПользователей, ВключаяВложенные) Экспорт
	ВключаяВложенные = ЕстьВложенныеГруппы(ГруппаПользователей);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоГруппеПользователейЗавершение", ЭтотОбъект, Новый Структура("ВключаяВложенные, ГруппаПользователей", ВключаяВложенные, ГруппаПользователей));
	Если ВключаяВложенные Тогда
		ПоказатьВопрос(ОписаниеОповещения, "Загрузить также пользователей вложенных групп?", РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппеПользователейЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если ДополнительныеПараметры.ВключаяВложенные Тогда
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ДополнительныеПараметры.ВключаяВложенные = Истина;
		Иначе	
			ДополнительныеПараметры.ВключаяВложенные = Ложь;
		КонецЕсли;			
	КонецЕсли;	
	мСписокПользователей = ПолучитьСписокПользователей(ДополнительныеПараметры.ГруппаПользователей, ДополнительныеПараметры.ВключаяВложенные);
	ЗаполнитьСписокПользователей(мСписокПользователей);
КонецПроцедуры

&НаКлиенте
// Процедура очистки списка пользователей.
//
Процедура ОчиститьСписок(Команда)
	ТД = Элементы.СписокПользователей.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьСписокЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Все пользователи из списка будут удалены. Продолжить?", РежимДиалогаВопрос.ДаНет, 0);
КонецПроцедуры // ОчиститьСписок()

&НаКлиенте
Процедура ОчиститьСписокЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СписокПользователей.Очистить();
	КонецЕсли;	
КонецПроцедуры // ОчиститьСписок()

&НаКлиенте
// Процедура заполнения подбором.
//
Процедура Подбор(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",				Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",		Истина);
	ПараметрыФормы.Вставить("ВыборГруппПользователей",	Ложь);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",		Ложь);
	ФормаПодбора = ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		мСписокПользователей = Новый СписокЗначений;
		мСписокПользователей.ЗагрузитьЗначения(ВыбранноеЗначение);
		ЗаполнитьСписокПользователей(мСписокПользователей);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		мСписокПользователей = Новый СписокЗначений;
		мСписокПользователей.Добавить(ВыбранноеЗначение);
		ЗаполнитьСписокПользователей(мСписокПользователей);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоОбщийШаблонПриИзменении(Элемент)
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры







