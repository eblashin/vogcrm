// Функция возвращает структуру с синонимом и схемой компоновки данных по имени макета
//
// Параметры:
//	ЦельСсылка - Ссылка, СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить схему
//	ИмяМакета - Строка, Неопределено - имя получаемого макета схемы компоновки данных
//
// Возвращаемое значение:
//	Структура - Описание - Строка - синоним получаемого макета
//				СхемаКомпоновкиДанных - СхемаКомпоновкиДанных, Неопределено - найденная схема компоновки данных
//				НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных, Неопределено - найденные настройки компоновки данных
//
Функция ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЦельСсылка, ИмяМакета = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание",                  "");
	ВозвращаемоеЗначение.Вставить("СхемаКомпоновкиДанных",     Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкиКомпоновкиДанных", Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	CRM_Триггеры.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	CRM_Триггеры.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных
	|ИЗ
	|	Справочник.CRM_Триггеры КАК CRM_Триггеры
	|ГДЕ
	|	CRM_Триггеры.Ссылка = &ЦельСсылка");
	
	Запрос.УстановитьПараметр("ЦельСсылка", ЦельСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		
		ВозвращаемоеЗначение.Описание = ИмяМакета;
		Если Выборка.Следующий() Тогда
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
			ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
		КонецЕсли;
		
	Иначе
		
		Макет = Метаданные.НайтиПоТипу(ТипЗнч(ЦельСсылка)).Макеты.Найти(ИмяМакета);
		Если НЕ Макет = Неопределено Тогда
			ВозвращаемоеЗначение.Описание = Макет.Синоним;
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Справочники.CRM_Триггеры.ПолучитьМакет(ИмяМакета);
			Если Выборка.Следующий() Тогда
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(ЭлементСтруктурыЦелей) Экспорт
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, СхемаКомпоновкиДанныхРасшифровки, НастройкиКомпоновкиДанныхРасшифровки, НаименованиеСхемы");
	
	Если ТипЗнч(ЭлементСтруктурыЦелей) = Тип("ДанныеФормыСтруктура") Тогда
		ЭлементСтруктурыЦелейСсылка = ЭлементСтруктурыЦелей.Ссылка;
	Иначе
		ЭлементСтруктурыЦелейСсылка = ЭлементСтруктурыЦелей;
	КонецЕсли;
	СхемаКомпоновкиДанных = Неопределено;
	СхемаКомпоновкиДанныхРасшифровки = Неопределено;
	// Получим схему компоновки данных
	Если ЭлементСтруктурыЦелейСсылка.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено И НЕ ЭлементСтруктурыЦелейСсылка.Пустая() Тогда
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЭлементСтруктурыЦелейСсылка, "ШаблоннаяСхемаКомпоновкиДанныхПредопределенный");
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		Если НЕ СхемаИНастройки.НастройкиКомпоновкиДанных = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.НастройкиКомпоновкиДанных);
		Иначе	
			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КонецЕсли;	
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ИначеЕсли НЕ ЭлементСтруктурыЦелейСсылка.Пустая() Тогда
		СхемаКомпоновкиДанных = ЭлементСтруктурыЦелейСсылка.ХранилищеСхемыКомпоновкиДанных.Получить();
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(ЭлементСтруктурыЦелейСсылка.ХранилищеНастроекКомпоновкиДанных.Получить());
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Справочники.CRM_Триггеры.ПолучитьМакет("ШаблоннаяСхемаКомпоновкиДанныхПредопределенный");
		Адреса.НаименованиеСхемы = "ШаблоннаяСхемаКомпоновкиДанныхПредопределенный";
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		
	КонецЕсли;
	
	
	ОтключитьОтборыПоФункциональнымОпциям(СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки);
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	
	//Настройки = ЭлементСтруктурыЦелейСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	//НастройкиРасшифровки = ЭлементСтруктурыЦелейСсылка.ХранилищеНастроекКомпоновкиДанныхРасшифровки.Получить();
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		ОтключитьОтборыПоФункциональнымОпциям(Настройки);
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор());
	КонецЕсли;
	
	
	Возврат Адреса;
	
КонецФункции

Процедура ОтключитьОтборыПоФункциональнымОпциям(Настройки)
	ИспользоватьПартнеровКакКонтрагентов		= Истина;
	ИспользоватьНесколькоОрганизаций			= Истина;
	ИспользоватьНесколькоКасс					= Истина;
	ИспользоватьНесколькоРасчетныхСчетов		= Истина;
	ИспользоватьХарактеристикиНоменклатуры		= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	УчитыватьСебестоимостьТоваровПоВидамЗапасов	= Истина;
	ИспользоватьКлассификациюКлиентов			= ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке")
	ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж");
	
	Отборы = Настройки.Отбор.Элементы;
	ИзменяемыеОтборы = Новый Соответствие;
	Для Каждого Отбор Из Отборы Цикл
		Если ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ИзменяемыеОтборы.Вставить(Отбор.ЛевоеЗначение, Отбор);
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Контрагент");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоОрганизаций Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Организация");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоКасс Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Касса");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоРасчетныхСчетов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "БанковскийСчет");
	КонецЕсли;
	
	Если Не ИспользоватьХарактеристикиНоменклатуры Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Характеристика");
	КонецЕсли;
	
	Если Не УчитыватьСебестоимостьТоваровПоВидамЗапасов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "ВидЗапасов");
	КонецЕсли;
	
	Если Не ИспользоватьКлассификациюКлиентов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Класс");
	КонецЕсли;
КонецПроцедуры


Процедура ОтключитьОтбор(Настройки, ИзменяемыеОтборы, ИмяПоля)
	ПроверяемоеПоле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	УдаляемыйОтбор = ИзменяемыеОтборы.Получить(ПроверяемоеПоле);
	Если Не УдаляемыйОтбор = Неопределено Тогда
		Настройки.Отбор.Элементы.Удалить(УдаляемыйОтбор);
	КонецЕсли;
КонецПроцедуры


Функция ШаблоныСхемыКомпоновкиДанных() Экспорт
	
	Шаблоны = Новый Массив;
	
	Для каждого Макет из Метаданные.Справочники.CRM_Триггеры.Макеты Цикл
		
		Если Макет.ТипМакета <> Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Шаблоны.Добавить(Новый Структура("Имя, Синоним", Макет.Имя, Макет.Синоним));
		
	КонецЦикла;
	
	Возврат Шаблоны;
	
КонецФункции


Функция ПроверитьУсловияТриггера(Триггер, ОбъектПроверки) Экспорт
	Попытка
		Если Триггер.УсловиеСрабатывания.ИспользоватьСКД Тогда
			СКД = Триггер.ХранилищеСхемыКомпоновкиДанных.Получить();
			НастройкиСКД = Триггер.ХранилищеНастроекКомпоновкиДанных.Получить();
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
			НастройкиСКД = КомпоновщикНастроек.Настройки;
			
			ДетальнаяГруппировка = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ДетальнаяГруппировка.Использование = Истина;
			
			ВыбранноеАвтоПоле = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеАвтоПоле.Использование = Истина;
			
			Для Каждого ПолеВыбора Из НастройкиСКД.ДоступныеПоляВыбора.Элементы Цикл
				// Пропускаем системные поля
				Если Лев(Строка(ПолеВыбора.Поле), 13) = "СистемныеПоля" Или Лев(Строка(ПолеВыбора.Поле), 12) = "SystemFields" Тогда Продолжить; КонецЕсли;
				Если Лев(Строка(ПолеВыбора.Поле), 15) = "ПараметрыДанных" Или Лев(Строка(ПолеВыбора.Поле), 14) = "DataParameters" Тогда Продолжить; КонецЕсли;
				
				ВыбранныеПоляДетальнаяГруппировка = НастройкиСКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных(ПолеВыбора.Поле);
			КонецЦикла;
			
			ПараметрыНастройки = НастройкиСКД.ПараметрыДанных;
			
			ЗначениеПараметра = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Ссылка"));
			Если ЗначениеПараметра <>  Неопределено Тогда
				ЗначениеПараметра.Использование = Истина;
				ЗначениеПараметра.Значение = ОбъектПроверки.Ссылка;
			КонецЕсли;
			
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
			
			ТаблицаРезультат = Новый ТаблицаЗначений;
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			
			ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			Возврат ТаблицаРезультат.Количество()>0;
		Иначе	
			Если Триггер.УсловиеСрабатывания.РежимОтладки Тогда
				Обработка = CRM_ТригерыСервер.ВернутьОбработкуУсловия(Триггер);
			Иначе	
				Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуУсловия(Триггер);
			КонецЕсли;
			НастройкиУсловий = Триггер.НастройкиУсловий.Получить();
			Если ТипЗнч(НастройкиУсловий) <> Тип("Структура") Тогда
				НастройкиУсловий = Новый Структура;
			КонецЕсли;	
			НастройкиУсловий.Вставить("ОбъектПроверки", ОбъектПроверки);
			ЗаполнитьЗначенияСвойств(Обработка, НастройкиУсловий);
			Возврат Обработка.ВыполнитьПроверку();
		КонецЕсли;
	Исключение
		МенеджерЗаписи = РегистрыСведений.CRM_ЛогиТриггеров.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДатаСрабатывания = ТекущаяДатаСеанса();
		МенеджерЗаписи.Объект = ОбъектПроверки.Ссылка;
		МенеджерЗаписи.Триггер = Триггер;
		МенеджерЗаписи.ОписаниеОшибки = ОписаниеОшибки();
		МенеджерЗаписи.ОшибкаУсловия = Истина;
		МенеджерЗаписи.Записать(Истина);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции	

Функция ВыполнитьТриггер(Триггер, ОбъектДействия) Экспорт
	Если Триггер.Действие.РежимОтладки Тогда
		Обработка = CRM_ТригерыСервер.ВернутьОбработкуДействия(Триггер);
	Иначе	
		Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуДействия(Триггер);
	КонецЕсли;	
	НастройкиДействий = Триггер.НастройкиДействий.Получить();
	Если ТипЗнч(НастройкиДействий) <> Тип("Структура") Тогда
		НастройкиДействий = Новый Структура;
	КонецЕсли;	
	НастройкиДействий.Вставить("ОбъектДействия", ОбъектДействия);
	НастройкиДействий.Вставить("УсловиеСрабатывания", Триггер.УсловиеСрабатывания);
	ЗаполнитьЗначенияСвойств(Обработка, НастройкиДействий);
	// + Тищенко В.В.
	Если  Триггер.Параметры.Количество() <> 0 Тогда
		Возврат Обработка.ВыполнитьДействие(Триггер.Параметры);
	Иначе
		Возврат Обработка.ВыполнитьДействие();
	КонецЕсли;
	// - Тищенко В.В.
	
КонецФункции

Функция ПроверитьПовторноеИспользование(Триггер, ОбъектДействия) Экспорт
	Если Триггер.РазрешитьПовторноеСрабатывание Тогда
		Возврат Истина;
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбработанныеОбъектыТриггеров.Триггер
	|ИЗ
	|	РегистрСведений.CRM_ОбработанныеОбъектыТриггеров КАК CRM_ОбработанныеОбъектыТриггеров
	|ГДЕ
	|	CRM_ОбработанныеОбъектыТриггеров.Триггер = &Триггер
	|	И CRM_ОбработанныеОбъектыТриггеров.Объект = &Объект";
	Запрос.УстановитьПараметр("Триггер", Триггер);
	Запрос.УстановитьПараметр("Объект", ОбъектДействия.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

Процедура ЗаписатьОбработанныйОбъектТриггера(Триггер, ОбъектДействия) Экспорт
	МенеджерЗаписи = РегистрыСведений.CRM_ОбработанныеОбъектыТриггеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = ОбъектДействия.Ссылка;
	МенеджерЗаписи.Триггер = Триггер;
	МенеджерЗаписи.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.CRM_ЛогиТриггеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаСрабатывания = ТекущаяДатаСеанса();
	МенеджерЗаписи.Объект = ОбъектДействия.Ссылка;
	МенеджерЗаписи.Триггер = Триггер;
	МенеджерЗаписи.ОписаниеОшибки = "";
	МенеджерЗаписи.Записать(Истина);
КонецПроцедуры	

Процедура ЗаписатьОшибкуТриггера(Триггер, ОбъектДействия, ОписаниеОшибки) Экспорт
	МенеджерЗаписи = РегистрыСведений.CRM_ЛогиТриггеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаСрабатывания = ТекущаяДатаСеанса();
	МенеджерЗаписи.Объект = ОбъектДействия.Ссылка;
	МенеджерЗаписи.Триггер = Триггер;
	МенеджерЗаписи.ОписаниеОшибки = ОписаниеОшибки;
	МенеджерЗаписи.ОшибкаДействия = Истина;
	МенеджерЗаписи.Записать(Истина);
КонецПроцедуры

#Область ПериодическиеТриггеры

Функция ВыполнитьПериодическийТриггер(Триггер) Экспорт
	Если Триггер.Действие.РежимОтладки Тогда
		Обработка = CRM_ТригерыСервер.ВернутьОбработкуДействия(Триггер);
	Иначе	
		Обработка = CRM_ТриггерыПовтИсп.ВернутьОбработкуДействия(Триггер);
	КонецЕсли;	
	НастройкиДействий = Триггер.НастройкиДействий.Получить();
	Если ТипЗнч(НастройкиДействий) <> Тип("Структура") Тогда
		НастройкиДействий = Новый Структура;
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Обработка, НастройкиДействий);
	Возврат Обработка.ВыполнитьДействие();
КонецФункции

Процедура ЗаписатьОшибкуПериодическогоТриггера(Триггер, ОписаниеОшибки) Экспорт
	МенеджерЗаписи = РегистрыСведений.CRM_ЛогиТриггеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаСрабатывания = ТекущаяДатаСеанса();
	МенеджерЗаписи.Триггер = Триггер;
	МенеджерЗаписи.ОписаниеОшибки = ОписаниеОшибки;
	МенеджерЗаписи.ОшибкаДействия = Истина;
	МенеджерЗаписи.Записать(Истина);
КонецПроцедуры

Процедура ЗаписатьВыполнениеПериодическогоТриггера(Триггер) Экспорт
	МенеджерЗаписи = РегистрыСведений.CRM_ЛогиТриггеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаСрабатывания = ТекущаяДатаСеанса();
	МенеджерЗаписи.Триггер = Триггер;
	МенеджерЗаписи.ОписаниеОшибки = "";
	МенеджерЗаписи.Записать(Истина);
КонецПроцедуры	

#КонецОбласти
