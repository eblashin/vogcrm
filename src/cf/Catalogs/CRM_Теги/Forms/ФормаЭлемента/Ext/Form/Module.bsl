
#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если  Параметры.Свойство("Владелец") Тогда
			Объект.Владелец = Параметры.Владелец;
		КонецЕсли;
		
		Если  Параметры.Свойство("Наименование") Тогда
			Объект.Наименование = Параметры.Наименование;
		КонецЕсли;
		Если Объект.Владелец.Пустая() Тогда
			Объект.Владелец = Пользователи.ТекущийПользователь().Подразделение;
		КонецЕсли;	
	КонецЕсли; 
	
	// Проверим, может ли пользователь редактировать\добавлять теги подразделения.
	ЕстьРоль = Пользователи.РолиДоступны("CRM_ДобавлениеИзменениеТегов");
	ЕстьПолныеПрава = Пользователи.РолиДоступны("ПолныеПрава");	
	
	ПодразделенияРодители = CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(Объект.Владелец, Истина); 
	ПодразделениеПользователяВышеПоИерархии = (ПодразделенияРодители.Найти(Пользователи.ТекущийПользователь().Подразделение) <> Неопределено);
	
	// Даем возможность редактировать, если есть роль и подразделение пользователя 
	// выше по иерерхии, чем подразделение у тега.
	ЕстьРоль = (ЕстьРоль И ПодразделениеПользователяВышеПоИерархии) ИЛИ ЕстьПолныеПрава;
	
	ПодчиненныеПодразделения = CRM_УправлениеДоступомПовтИсп.ПолучитьПодразделенияВКоторыхРуководитель(Пользователи.ТекущийПользователь(), Истина);

	РуководительПодразделения = (ПодчиненныеПодразделения.Найти(Объект.Владелец) <> Неопределено);	
	
	// Также радактирование разрешено руководителям подразделений выше по иерархии.
	Если НЕ ЕстьРоль И НЕ РуководительПодразделения Тогда
		ТекстСообщения = НСтр("ru = 'Нет права на добавление и изменение тегов подразделения'") + " <" + Объект.Владелец + ">.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью".
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ЕстьДублиТегов = ЕстьДублиТегов(Объект.Наименование, Объект.Владелец);
	Если ЕстьДублиТегов.ЕстьДубли Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Создаваемый тег уже существует у подразделения'") + " <" + ЕстьДублиТегов.Подразделение + ">.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПослеЗаписи".
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("ПослеЗаписиТега", Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЦветПриИзменении(Неопределено);
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере  
// Функция ищет теги с заданным наименованием вверх и вниз по иерархии.
Функция  ЕстьДублиТегов(Наименование, Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_Теги.Владелец
		|ИЗ
		|	Справочник.CRM_Теги КАК CRM_Теги
		|ГДЕ
		|	CRM_Теги.Наименование = &Наименование
		|	И (CRM_Теги.Владелец В (&ПодразделенияРодители)
		|			ИЛИ CRM_Теги.Владелец В (&ПодразделенияПодчиненные))
		|	И CRM_Теги.Ссылка <> &Ссылка";
	
	СписокВышестоящийхПодразделений = CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(Подразделение, Истина);
	СписокПодчиненныхПодразделений = Новый Массив;
	СписокПодчиненныхПодразделений = CRM_МетодыМодулейМенеджеровСправочников.ПолучитьПодчиненныеПодразделенияПользователя(Подразделение, СписокПодчиненныхПодразделений);
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ПодразделенияПодчиненные", СписокПодчиненныхПодразделений);
	Запрос.УстановитьПараметр("ПодразделенияРодители", СписокВышестоящийхПодразделений);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтруктураВозврата = Новый Структура("ЕстьДубли, Подразделение", Ложь, Неопределено);
	
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		СтруктураВозврата.ЕстьДубли = Истина;
		СтруктураВозврата.Подразделение = ВыборкаДетальныеЗаписи.Владелец;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере 
// Функция возвращает цвет из реквизита "Цвет" объекта для заполнения в элементе формы.
//
//  Параметры:
//    Ссылка - Справочник.CRM_Категории - Ссылка на элемент справочника.
//
//  Возвращаемое значение:
//   ЦветФона - Цвет - Цвет дял раскраски элемента фомры.
//
Функция ВернутьЦветКатегорииДляЗаполнения(Ссылка)
	Возврат Новый Цвет(Ссылка.ЦветКрасный, Ссылка.ЦветЗеленый, Ссылка.ЦветСиний);
КонецФункции	
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЦветПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Цвет) Тогда
		Элементы.Цвет.ЦветФона = ВернутьЦветКатегорииДляЗаполнения(Объект.Цвет);
	Иначе
		Элементы.Цвет.ЦветФона = Новый Цвет();
	КонецЕсли;		
КонецПроцедуры

#КонецОбласти
