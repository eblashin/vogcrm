&НаКлиенте
Перем ТекущийНомерВложения;

&НаКлиенте
Перем ПолучаемыеФайлы;

&НаКлиенте
Перем ПолученныеФайлы;

&НаКлиенте
Перем ПроверкаСуществованияФайлов;

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТиповПрисоединенныхФайлов()
	
	МассивТипов = Новый Массив();
	Для Каждого СправочникМд Из Метаданные.Справочники Цикл
		Если Прав(СправочникМд.Имя, 19) = "ПрисоединенныеФайлы" Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка." + СправочникМд.Имя));
		КонецЕсли;
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

&НаКлиенте
Функция ПеретаскиваетсяФайл(ЗначениеПеретаскивания)
	Если	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") И ЗначениеПеретаскивания.ЭтоФайл())
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл") И ЗначениеПеретаскивания[0].ЭтоФайл())
		Или КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания))
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания[0]))) Тогда
		//
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("ДанныеФормыЭлементДерева") Тогда
		бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		Попытка
			Если КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания.Ссылка)) Тогда
				бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Истина;
			КонецЕсли;
		Исключение
			бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		КонецПопытки;
		Возврат бПеретаскиваетсяПрисоединенныйФайлСВерсионированием;
		
	Иначе
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") Тогда
			Если Не ЗначениеПеретаскивания.ЭтоФайл() Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл") И Не ЗначениеПеретаскивания[0].ЭтоФайл() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПрисоединенныйФайлПеретаскиванием(МассивФайловИлиФайл)
	Если ТипЗнч(МассивФайловИлиФайл) = Тип("Массив") Тогда
		МассивФайлов = МассивФайловИлиФайл;
	Иначе
		МассивФайлов = Новый Массив();
		МассивФайлов.Добавить(МассивФайловИлиФайл);
	КонецЕсли;
	
	МассивФайловДляОбработки = Новый Массив();
	Для Каждого ЭлементМассива Из МассивФайлов Цикл
		Если Не ПеретаскиваетсяФайл(ЭлементМассива) = Истина Тогда
			Продолжить;
		КонецЕсли;
		МассивФайловДляОбработки.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Если МассивФайловДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокВложений = Новый СписокЗначений();
	
	Для Каждого Файл Из МассивФайловДляОбработки Цикл
		
		Если ТипЗнч(Файл) = Тип("Файл") Тогда
			
			// Это файл.
			// Сначала проверим добавляемый файл на разрешённый размер и расширения.
			МассивИменФайловСОшибками = Новый Массив;
			Если НЕ РаботаСФайламиСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(Файл, Ложь, МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			
			СписокВложений.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя), УникальныйИдентификатор), Файл.Имя);
			
		Иначе
			// Это элемент справочника *ПрисоединенныеФайлы.
			// Сначала проверим добавляемый файл на разрешённый размер и расширения.
			МассивИменФайловСОшибками = Новый Массив;
			РеквизитыФайла = ПолучитьРеквизитыПроверяемогоФайла(Файл);
			Если НЕ CRM_ПрисоединенныеФайлы.ПроверитьВозможностьЗагрузкиФайла(Файл, РеквизитыФайла.Размер, РеквизитыФайла.Расширение, Ложь, МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл, УникальныйИдентификатор, Истина);
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				СписокВложений.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокВложений.Количество() > 0 Тогда
		СтруктураДанных = Новый Структура("СписокВложений", СписокВложений);
		ОповещениеНовое = Новый ОписаниеОповещения("ДобавитьПрисоединенныйФайлПеретаскиваниемЗавершение", ЭтотОбъект, СтруктураДанных);
		НачатьПодключениеРасширенияРаботыСФайлами(ОповещениеНовое);
		Возврат;
	КонецЕсли;
	
	ДобавитьПрисоединенныйФайлПеретаскиваниемФрагмент();
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыПроверяемогоФайла(Файл)
	Возврат Новый Структура("Размер, Расширение", Файл.Размер, Файл.Расширение);
КонецФункции	

&НаКлиенте
Процедура ДобавитьПрисоединенныйФайлПеретаскиваниемЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	СписокВложений = ДополнительныеПараметры.СписокВложений;
		
	Для Каждого ЭлементСпискаФайлов Из СписокВложений Цикл
		новСтр = Вложения.Добавить();
		
		новСтр.Расположение = 4;
		новСтр.ИмяФайла = ЭлементСпискаФайлов.Представление;
		Расширение = ВзаимодействияКлиентСервер.РасширениеФайла(новСтр.ИмяФайла);
		новСтр.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
		новСтр.ИмяФайлаНаКомпьютере = ЭлементСпискаФайлов.Значение;
		новСтр.ИмяФайла = ЭлементСпискаФайлов.Представление;
		новСтр.Размер = ПолучитьИзВременногоХранилища(ЭлементСпискаФайлов.Значение).Размер();
		РазмерВложения = Цел(новСтр.Размер/1024);
		новСтр.РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
		новСтр.ИДФайлаЭлектронногоПисьмаОтбор = "#";
	КонецЦикла;
	
	Модифицированность = Истина;	
	
	ДобавитьПрисоединенныйФайлПеретаскиваниемФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПрисоединенныйФайлПеретаскиваниемФрагмент()
	
	Модицифированность = Истина;
	ОбновитьОтображениеДанных();
	СформироватьПредставлениеВложений();	
	
КонецПроцедуры

&НаСервере
// Функция загружает настройку из хранилища общих настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить().
//
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек = "", ЗначениеПоУмолчанию = Неопределено, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено)
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию, ОписаниеНастроек, ИмяПользователя);
КонецФункции // ХранилищеОбщихНастроекЗагрузить()

&НаСервере
// Процедура сохраняет настройку в хранилище общих настроек.
// 
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроекСохранить.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить().
// 
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек = "", Значение, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, НужноОбновитьПовторноИспользуемыеЗначения = Ложь)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Значение, ОписаниеНастроек, ИмяПользователя, НужноОбновитьПовторноИспользуемыеЗначения);
КонецПроцедуры // ХранилищеОбщихНастроекСохранить()

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если ВсегдаПоказыватьВложения Тогда
		Элементы.ВложенияПредставление.Видимость = Ложь;
		Если НЕ Элементы.Вложения.Видимость Тогда
			Элементы.Вложения.Видимость = Истина;
		КонецЕсли;			
		Возврат;
	КонецЕсли;		
	
	Если Элементы.Вложения.Видимость Тогда
		ВложенияПредставление	= НСтр("ru='свернуть вложения'");
		Элементы.ВложенияПредставление.Видимость = Ложь;
	Иначе	
		ВложенияПредставление = "";
		Элементы.ВложенияПредставление.Видимость = Истина;
		Для Каждого ЭлементТаблицы Из Вложения Цикл
			Если НЕ ВсеВложенияПометка И ЭлементТаблицы.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			ИначеЕсли ВсеВложенияПометка Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			КонецЕсли;
		КонецЦикла;
		Если ПустаяСтрока(ВложенияПредставление) Тогда
			ВложенияПредставление = НСтр("ru='Добавить файл...'");
			Элементы.ВложенияПредставление.Видимость = Истина;			
		Иначе
			ВложенияПредставление = Сред(ВложенияПредставление, 3);
			Элементы.ВложенияПредставление.Видимость = Истина;			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // СформироватьПредставлениеВложений()	

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВЛОЖЕНИЯМИ

 &НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ДобавитьВложение();
КонецПроцедуры
 
&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьВложения(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;    
	ПараметрыПеретаскивания.ДопустимыеДействия  = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Если ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение) = Истина Тогда
		ДобавитьПрисоединенныйФайлПеретаскиванием(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеПродолжение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеПродолжение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
		Если ПодключеноРасширениеРаботыСФайлами Тогда	
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.МножественныйВыбор = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеЗавершение", ЭтотОбъект);
			НачатьПомещениеФайлов(ОписаниеОповещения, , Диалог, Ложь, ЭтотОбъект.УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
		КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено Тогда
		
		Для Индекс = 0 По ПомещенныеФайлы.ВГраница() Цикл
			
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПомещенныеФайлы[Индекс].Имя, ?(ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент(),"/", "\"));
			ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
			ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
			РасширениеФайла = ?(ПозицияТочки = 0, "", Прав(ИмяФайла, СтрДлина(ИмяФайла) - ПозицияТочки));
			
			новСтр						= Вложения.Добавить();
			новСтр.Расположение			= 4;
			новСтр.ИмяФайла				= ИмяФайла;
			новСтр.ИмяФайлаНаКомпьютере	= ПомещенныеФайлы[Индекс].Хранение;
			новСтр.ИндексКартинки		= РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеФайла);
			новСтр.Размер				= РазмерФайла(ПомещенныеФайлы[Индекс].Хранение);
			РазмерВложения				= Цел(новСтр.Размер/1024);
			новСтр.РазмерСтрокой   		= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
			новСтр.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		КонецЦикла;
		
		Модицифированность = Истина;				
		ОбновитьОтображениеДанных();
		
	КонецЕсли;
	СформироватьПредставлениеВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура  ДобавитьВложениеВыполнить()
	ДобавитьВложение();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложения(ТолькоВыделенные = Ложь)
	ВыделенныеВложения = Элементы.Вложения.ВыделенныеСтроки;
	КоличествоВложений = Вложения.Количество();
	Если ТолькоВыделенные Тогда
		Если ВыделенныеВложения.Количество() = 1 Тогда
			ТекстВопроса = Нстр("ru='Удалить текущее вложение?'");
		Иначе	
			ТекстВопроса = Нстр("ru='Удалить выбранные вложения?'");
		КонецЕсли;	
	Иначе	
		ТекстВопроса = Нстр("ru='Удалить все вложения?'");
	КонецЕсли;
	СтруктураДанных = Новый Структура("ВыделенныеВложения, ТолькоВыделенные", ВыделенныеВложения, ТолькоВыделенные);
	Оповещение = Новый ОписаниеОповещения("УдалитьВложенияЗавершение", ЭтотОбъект, СтруктураДанных);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
КонецПроцедуры

&НаСервере
Функция РазмерФайла(Хранение)
	Возврат ПолучитьИзВременногоХранилища(Хранение).Размер();
КонецФункции

&НаКлиенте
Процедура УдалитьВложенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;	
	Если НЕ (РезультатВопроса = КодВозвратаДиалога.Да) Тогда Возврат; КонецЕсли;
	Если ТолькоВыделенные Тогда
		Для Каждого ВыделенноеВложение Из ВыделенныеВложения Цикл 
			ТекущееВложение = Вложения.НайтиПоИдентификатору(ВыделенноеВложение);
			Если (ТекущееВложение = Неопределено) Тогда Продолжить; КонецЕсли;
			Если ТекущееВложение.Расположение = 0 Тогда
				УдаленныеВложения.Добавить(ТекущееВложение.Ссылка);
			КонецЕсли;
			Вложения.Удалить(Вложения.Индекс(ТекущееВложение));
		КонецЦикла;	
	Иначе
		Для Каждого Вложение Из Вложения Цикл
			Если ЗначениеЗаполнено(Вложение.Ссылка) Тогда
				УдаленныеВложения.Добавить(Вложение.Ссылка);
			КонецЕсли;				
		КонецЦикла;			
		Вложения.Очистить();
	КонецЕсли;
	Модицифированность = Истина;
	ОбновитьОтображениеДанных();
	СформироватьПредставлениеВложений();

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеВыполнить(Команда)
	УдалитьВложения(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеВложенияВыполнить(Команда)
	УдалитьВложения(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(текДанные.Ссылка, УникальныйИдентификатор);

	ИначеЕсли текДанные.Расположение = 2 Тогда
		#Если Не ВебКлиент Тогда
			ОповещениеНовое = Новый ОписаниеОповещения("ЗапускПриложенияНажатие", ЭтотОбъект);			
			НачатьЗапускПриложения(ОповещениеНовое, """" + текДанные.ИмяФайлаНаКомпьютере + """");
		#КонецЕсли

	ИначеЕсли текДанные.Расположение = 4 Тогда
		
		#Если ВебКлиент Тогда
			
			СтруктураДанных = Новый Структура("текДанные", текДанные);
			ОповещениеНовое = Новый ОписаниеОповещения("ОткрытьВложениеПодключениеРасширения", ЭтотОбъект, СтруктураДанных);
			НачатьПодключениеРасширенияРаботыСФайлами(ОповещениеНовое);
            Возврат;	
		
		#КонецЕсли	
		ОткрытьВложениеФрагмент(текДанные);

		//Если текДанные.Расположение = 3 Тогда
		//	
		//КонецЕсли;
		//ПолучитьФайл(текДанные.ИмяФайлаНаКомпьютере, текДанные.ИмяФайла, Истина);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускПриложенияНажатие(КодВозврата, ДополнительныеПараметры) Экспорт
	// Действие не требуется	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеПодключениеРасширения(Подключено, ДополнительныеПараметры) Экспорт
	
	текДанные = ДополнительныеПараметры.текДанные;
		
	Если Не Подключено Тогда
		
		Возврат
		
	КонецЕсли;	
	
	ОткрытьВложениеФрагмент(текДанные);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеФрагмент(Знач текДанные)
	
	Перем ДвоичныеДанныеФайла;
	
	#Если Не ВебКлиент Тогда
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(текДанные.ИмяФайлаНаКомпьютере);
		
		СтруктураДанных = Новый Структура("ДвоичныеДанныеФайла, текДанные", ДвоичныеДанныеФайла, текДанные);
		ОповещениеНовое = Новый ОписаниеОповещения("ОткрытьВложениеЗавершение", ЭтотОбъект, СтруктураДанных);
		НачатьПолучениеКаталогаВременныхФайлов(ОповещениеНовое);		
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеЗавершение(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	
	ДвоичныеДанныеФайла = ДополнительныеПараметры.ДвоичныеДанныеФайла;
	текДанные = ДополнительныеПараметры.текДанные;	
	
	ДвоичныеДанныеФайла.Записать(ИмяКаталогаВременныхФайлов + текДанные.ИмяФайла);	
	ОповещениеНовое = Новый ОписаниеОповещения("ЗапускПриложенияНажатие", ЭтотОбъект);				
	НачатьЗапускПриложения(ОповещениеНовое, """" + ИмяКаталогаВременныхФайлов + текДанные.ИмяФайла + """");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить(Команда)
	ОткрытьВложение();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложение()
	// +CRM
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда Возврат; КонецЕсли;
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(текДанные.Ссылка, УникальныйИдентификатор);
	ИначеЕсли текДанные.Расположение = 2 Тогда
		
	ИначеЕсли текДанные.Расположение = 4 Тогда
		ФайлВложения = Новый Файл(текДанные.ИмяФайла);
		РасширениеВложения = ?(ПустаяСтрока(ФайлВложения.Расширение), ФайлВложения.Расширение, Прав(ФайлВложения.Расширение, СтрДлина(ФайлВложения.Расширение)-1));
		Если РасширениеВложения = "EML" Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Это вложение не может быть сохранено.'"));
			Возврат;
		КонецЕсли;
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
		СтруктураДанных = Новый Структура("РасширениеВложения, текДанные", РасширениеВложения, текДанные);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершение", ЭтотОбъект, СтруктураДанных);
		НачатьПодключениеРасширенияРаботыСФайлами(ОповещениеНовое);	
	КонецЕсли;
	// -CRM
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	РасширениеВложения = ДополнительныеПараметры.РасширениеВложения;
	текДанные = ДополнительныеПараметры.текДанные;
		
	Если Подключено Тогда
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = текДанные.ИмяФайла;
		ВыборФайла.Расширение = РасширениеВложения;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Все файлы (*.%1)|*.%1'"), РасширениеВложения, РасширениеВложения);
		СтруктураДанных = Новый Структура("ВыборФайла, текДанные", ВыборФайла, текДанные);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершениеВыборФайла", ЭтотОбъект, СтруктураДанных);
		ВыборФайла.Показать(ОповещениеНовое);
	Иначе
		#Если ВебКлиент Тогда
			ПолучитьФайл(текДанные.ИмяФайлаНаКомпьютере, текДанные.ИмяФайла, Истина);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершениеВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры1) Экспорт
	
	ВыборФайла = ДополнительныеПараметры1.ВыборФайла;
	текДанные = ДополнительныеПараметры1.текДанные;
		
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполняется сохранение файла ""%1"" ...
		|Пожалуйста, подождите.'"), текДанные.ИмяФайла);
		Состояние(ТекстПояснения);
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, текДанные.ИмяФайлаНаКомпьютере);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		ПолученныеФайлы = Новый Массив;
		СтруктураДанных = Новый Структура("ВыборФайла", ВыборФайла);
		ОповещениеНовое = Новый ОписаниеОповещения("СохранитьВложениеЗавершениеПолучитьФайлы", ЭтотОбъект, СтруктураДанных);
		НачатьПолучениеФайлов(ОповещениеНовое,ПолучаемыеФайлы, ВыборФайла, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершениеПолучитьФайлы(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборФайла = ДополнительныеПараметры.ВыборФайла;
		
	Если ПолученныеФайлы.Количество() > 0 Тогда
		Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ВыборФайла.ПолноеИмяФайла);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложения(ТолькоВыделенные = Ложь)
	ВыделенныеВложения = Элементы.Вложения.ВыделенныеСтроки;
	Если ТолькоВыделенные И (ВыделенныеВложения.Количество() = 1) Тогда
		СохранитьВложение();
		Возврат;
	КонецЕсли;	
	КоличествоВложений = Вложения.Количество();
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
	СтруктураДанных = Новый Структура("ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные", 
		ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные);
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПодключеноРасширение", ЭтотОбъект, СтруктураДанных);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПодключеноРасширение(Подключено, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если Подключено Тогда
		КаталогСохранения = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
		Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
			КаталогСохранения = "";
			КаталогСохранения = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();
		КонецЕсли;
		ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.МножественныйВыбор = Ложь;
		ВыборКаталога.Каталог = КаталогСохранения;
		ДополнительныеПараметры.Вставить("ВыборКаталога", ВыборКаталога);
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПослеВыбораКаталога", ЭтотОбъект, ДополнительныеПараметры);
		ВыборКаталога.Показать(Оповещение);
        Возврат;
	Иначе
		#Если ВебКлиент Тогда
			Для НомерВложения = 0 По КоличествоВложений Цикл
				Если ТолькоВыделенные Тогда
					Если ВыделенныеВложения.Найти(НомерВложения) = Неопределено Тогда Продолжить; КонецЕсли;
				КонецЕсли;	
				ТекущееВложение = Вложения[НомерВложения];
				// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
				//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
				// 
				ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
				РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
				Если РасширениеВложения = "EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
					Продолжить;
				КонецЕсли;
				ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
			КонецЦикла;	
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборКаталога = ДополнительныеПараметры.ВыборКаталога;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
	ПроверкаСуществованияФайлов = ДополнительныеПараметры.ПроверкаСуществованияФайлов;
		
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда Возврат; КонецЕсли;
	КаталогСохранения = ВыборКаталога.Каталог;
	Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда Возврат; КонецЕсли;
	Если НЕ (Прав(КаталогСохранения, 1) = "\") Тогда
		КаталогСохранения = КаталогСохранения + "\";
	КонецЕсли;
	
	Если ПроверкаСуществованияФайлов Тогда
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ТекущийНомерВложения", 0);
		ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;		
	
	ПерезаписатьВсе		= ?(ДополнительныеПараметры.Свойство("ПерезаписатьВсе"),ДополнительныеПараметры.ПерезаписатьВсе, Ложь);
	ПереименоватьВсе	= ?(ДополнительныеПараметры.Свойство("ПереименоватьВсе"),ДополнительныеПараметры.ПереименоватьВсе, Ложь);
	Если ДополнительныеПараметры.Свойство("ТекущийНомерВложения") Тогда
		ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения + 1;
	Иначе 
		ТекущийНомерВложения = 0;
	КонецЕсли;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		Если ТолькоВыделенные Тогда
			Если ВыделенныеВложения.Найти(ТекущийНомерВложения) = Неопределено Тогда Возврат; КонецЕсли;
		КонецЕсли;	
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 						
			// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
			//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
			// 
			Если ТекущееВложение.Расположение = 4 Тогда
				ДанныеФайла = ТекущееВложение.ИмяФайлаНаКомпьютере;
				Файл = Новый Файл(ТекущееВложение.ИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				Если РасширениеВложения = ".EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
					Возврат;
				КонецЕсли;
				ДополнительныеПараметры.Вставить("РазмерФайла", ТекущееВложение.Размер);
				ДополнительныеПараметры.Вставить("ДанныеФайла", ТекущееВложение.ИмяФайлаНаКомпьютере);												
			КонецЕсли;	
		Иначе
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
			РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
			Если РасширениеВложения = "EML" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
				Возврат;
			КонецЕсли;	
			ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);							
		КонецЕсли;
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		
		// Проверяем файл на существование, и, если он существует, то выбираем дальнейшее действие.
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ПерезаписатьВсе",   ПерезаписатьВсе);
		ДополнительныеПараметры.Вставить("ПереименоватьВсе",  ПереименоватьВсе);
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);				
		Оповещение = Новый ОписаниеОповещения("ФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры)
	
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 
			Если ТекущееВложение.Расположение = 4 Тогда 
				ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
				Файл = Новый Файл(ПолноеИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				Если РасширениеВложения = ".EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
					Возврат;
				КонецЕсли;
				ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);
				ДополнительныеПараметры.Вставить("ДанныеФайла",       ТекущееВложение.ИмяФайлаНаКомпьютере);								
				ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
				Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
				Файл = Новый Файл();
				Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);						
				Возврат;
			Иначе				
				Возврат; 
			КонецЕсли;				
		КонецЕсли;						
		// Если картинка из текста письма, то ее пропускаем.
		// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
		//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
		// 			
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
		РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));		
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ДанныеФайла",       ДанныеФайла);				
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
		Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);		
	Иначе
		ПроверкаСуществованияФайлов = Ложь;
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);		
		ДополнительныеПараметры.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПроверитьПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	 ФайлПроверитьНаСуществование(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПроверитьНаСуществование(Файл, ПараметрыВложения)
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайлаДляВопроса", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайлаДляВопроса(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		СохранитьВложенияВопрос(ПараметрыВложения);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		Возврат;
	ИначеЕсли ПараметрыВложения.ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
	Иначе		
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ПараметрыВложения.ТекущийНомерВложения + 1);
		ПроверитьНаличиеФайловНаДиске(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения)
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения)
	
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайла", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайла(Существует, ПараметрыВложения) Экспорт
	
	Если Существует Тогда
		СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения);				
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения)
		
	Если ПараметрыВложения.ПерезаписатьВсе Тогда
		Оповещение = Новый ОписаниеОповещения("УстановкаТолькоЧтенияУФайла", ЭтотОбъект, ПараметрыВложения);
		Файл = ПараметрыВложения.Файл;
		Файл.НачатьУстановкуТолькоЧтения(Оповещение, Ложь);
	ИначеЕсли ПараметрыВложения.ПереименоватьВсе Тогда
		НомерПоПорядку		= "";
		ИмяБезРасширения	= ПараметрыВложения.Файл.ИмяБезРасширения;
		Расширение			= ПараметрыВложения.Файл.Расширение;
		ПараметрыВложения.Вставить("НомерПоПорядку", НомерПоПорядку);
		ПараметрыВложения.Вставить("Расширение", 	 Расширение);
		ПараметрыВложения.Вставить("ИмяБезРасширения", ИмяБезРасширения);		
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаТолькоЧтенияУФайла(ПараметрыВложения) Экспорт
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияПереименованияФайла", ЭтотОбъект, ПараметрыВложения);
	НачатьУдалениеФайлов(Оповещение, ПараметрыВложения.ПолноеИмяФайла);	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПослеУдаленияПереименованияФайла(ПараметрыВложения) Экспорт
	
	ПолноеИмяФайла	= ПараметрыВложения.ПолноеИмяФайла;
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		СсылкаНаДвоичныеДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		ИмяФайла					= ПараметрыВложения.Файл.Имя;			
	Иначе	
		ДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		СсылкаНаДвоичныеДанныеФайла = ПараметрыВложения.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		ИмяФайла	= ДанныеФайла.ИмяФайла;
	КонецЕсли;		
	
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		РазмерВМб = ПараметрыВложения.РазмерФайла;
		ПараметрыВложения.Удалить("РазмерФайла");
	Иначе		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	КонецЕсли;	
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб)
	|Пожалуйста, подождите...'"), ИмяФайла, 
	РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	Состояние(ТекстПояснения);
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, СсылкаНаДвоичныеДанныеФайла);
	ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	Если ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений - 1 Тогда
		
		// Выполняем проверку на дубли и меняем дублям имена сохраняемых файлов.
		СписокИменФайлов = Новый СписокЗначений;
		Для Каждого ПолучаемыйФайл Из ПолучаемыеФайлы Цикл
			ЭлементСписка = СписокИменФайлов.НайтиПоЗначению(ПолучаемыйФайл.Имя);
			Если ЭлементСписка = Неопределено Тогда
				СписокИменФайлов.Добавить(ПолучаемыйФайл.Имя, "0");
			Иначе
				Файл = Новый Файл(ПолучаемыйФайл.Имя);
				ЭлементСписка.Представление = Строка(Число(ЭлементСписка.Представление) + 1);
				ПолучаемыйФайл.Имя = Файл.Путь + Файл.ИмяБезРасширения + "(" + ЭлементСписка.Представление + ")" + Файл.Расширение;
			КонецЕсли;
		КонецЦикла;
		// Выполняем сохранение файлов.
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияЗавершение", ЭтотОбъект, ПараметрыВложения);
		НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ПараметрыВложения.ВыборКаталога.Каталог, Ложь);
	Иначе
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ТекущийНомерВложения);
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);	
	КонецЕсли;		
	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияФрагментУсловие(ПараметрыВложения)
	
	Если ПараметрыВложения.НомерПоПорядку = "" Тогда
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ ПараметрыВложения.Расширение;
	Иначе			
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ "(" + Формат(ПараметрыВложения.НомерПоПорядку, "ЧРГ=") + ")" + ПараметрыВложения.Расширение;			
		КонецЕсли;
	ПараметрыВложения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);	
	Оповещение = Новый ОписаниеОповещения("ФайлПерезаписиПослеИнициализации", ЭтотОбъект, ПараметрыВложения);
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);

КонецПроцедуры

&НаКлиенте
Процедура ФайлПерезаписиПослеИнициализации (Файл, ПараметрыВложения) Экспорт
	ПараметрыВложения.Вставить("Файл",       Файл);				
	СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения);	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения)
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьНаСуществованиеФайлаПередСохранением", ЭтотОбъект, ПараметрыВложения);
	Файл = ПараметрыВложения.Файл;
	Файл.НачатьПроверкуСуществования(Оповещение);	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСуществованиеФайлаПередСохранением(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		НомерПоПорядку = ПараметрыВложения.НомерПоПорядку;
		ПараметрыВложения.Вставить("НомерПоПорядку", ?(НЕ ЗначениеЗаполнено(НомерПоПорядку),1,НомерПоПорядку + 1));
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;			
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если ПолученныеФайлы.Количество() > 0  Тогда
		ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак",  КаталогСохранения);
		Состояние(НСтр("ru = 'Файлы успешно сохранены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопрос(ПараметрыВложения)
	
	Перем ОтветНаВопрос, СписокКнопок, ТекстВопроса;
	
	ТекстВопроса	= НСтр("ru='Файл " + ПараметрыВложения.ПолноеИмяФайла + " уже существует." + Символы.ПС + "Выберите действие для всех существующих файлов:'");
	СписокКнопок	= Новый СписокЗначений;
	СписокКнопок.Добавить("Перезаписать",	НСтр("ru='Перезаписать'"));
	СписокКнопок.Добавить("Переименовать",	НСтр("ru='Переименовать'"));
	СписокКнопок.Добавить("Отмена",			НСтр("ru='Отмена'"));
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияВопросЗавершение", ЭтотОбъект, ПараметрыВложения);
	ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, , "Отмена");

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопросЗавершение(РезультатВопроса, ПараметрыВложения) Экспорт
	
	ТолькоВыделенные = ПараметрыВложения.ТолькоВыделенные;
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = "Перезаписать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Истина);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);
	ИначеЕсли ОтветНаВопрос = "Переименовать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Истина);
	Иначе
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);		
		Возврат;
	КонецЕсли;
	СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеВыполнить(Команда)
	ВыделенныеВложения = Элементы.Вложения.ВыделенныеСтроки;
	Если (ВыделенныеВложения.Количество() = 1) Тогда
		СохранитьВложение();
		Возврат;
	КонецЕсли;	
	ПолучаемыеФайлы = Новый Массив;
	ПолученныеФайлы = Новый Массив;		
	ПроверкаСуществованияФайлов = Истина;
	СохранитьВложения(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеВложениеВыполнить(Команда)
	ПолучаемыеФайлы = Новый Массив;
	ПолученныеФайлы = Новый Массив;	
	ПроверкаСуществованияФайлов = Истина;
	СохранитьВложения(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьВложение();
КонецПроцедуры

&НаКлиенте
Процедура ВсеВложения(Команда)
	
	Элементы.ФормаВсеВложения.Пометка	= НЕ Элементы.ФормаВсеВложения.Пометка;
	ВсеВложенияПометка					= Элементы.ФормаВсеВложения.Пометка;
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор","#");
	КонецЕсли;
	
	СформироватьПредставлениеВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВложенияПредставление = НСтр("ru='Добавить файл...'") Тогда
		ДобавитьВложение();
	КонецЕсли;		
	Элементы.Вложения.Видимость = НЕ Элементы.Вложения.Видимость;
	СформироватьПредставлениеВложений();
	
КонецПроцедуры // ВложенияПредставлениеНажатие()

&НаКлиенте
Процедура ВложенияСкрытьПанель(Команда)
	ВложенияПредставлениеНажатие(Неопределено, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПриИзменении(Элемент)
	
	СформироватьПредставлениеВложений()
	
КонецПроцедуры

&НаКлиенте
Процедура ВсегдаПоказыватьВложения(Команда)
	
	Элементы.ФормаВсегдаПоказыватьВложения.Пометка = НЕ Элементы.ФормаВсегдаПоказыватьВложения.Пометка;
	ВсегдаПоказыватьВложения = Элементы.ФормаВсегдаПоказыватьВложения.Пометка;
	Элементы.КоманднаяПанельВложенияСкрытьПанель.Видимость = НЕ ВсегдаПоказыватьВложения;
	
	СформироватьПредставлениеВложений();	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ВставитьТэгВФорматированныйДокумент(ИмяКоманды)
	
	МассивСтрок = ТаблицаАвтотекста.НайтиСтроки(Новый Структура("ИмяКоманды",ИмяКоманды));
	Тэг = МассивСтрок[0].Тэг;
	
	ПозицияНачала		= 0;
	ПозицияОкончания	= 0;
	Элементы.ТекстПисьмаФорматированныйДокумент.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
	Начало		= ТекстПисьмаФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ПозицияНачала);
	Окончание	= ТекстПисьмаФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ПозицияОкончания);
	Если НЕ Начало = Окончание Тогда
		ТекстПисьмаФорматированныйДокумент.Удалить(ПозицияНачала, ПозицияОкончания);
		ПозицияОкончания = ТекстПисьмаФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(Начало);
	КонецЕсли;
	ТекстПисьмаФорматированныйДокумент.Вставить(ПозицияОкончания, Тэг);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьТэгВПолеТемы(ИмяКоманды)
	
	МассивСтрок = ТаблицаАвтотекста.НайтиСтроки(Новый Структура("ИмяКоманды",ИмяКоманды));
	Тэг = МассивСтрок[0].Тэг;
	
	Объект.Тема = Объект.Тема + Тэг;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВставитьТэг(Команда)
	
	Если Лев(Команда.Имя,4) = "Тема" Тогда
		ВставитьТэгВПолеТемы(Команда.Имя);
	Иначе
		ВставитьТэгВФорматированныйДокумент(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КэшТипыСправочниковПрисоединенныхФайлов = ПолучитьОписаниеТиповПрисоединенныхФайлов();
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииИПриЧтенииНаСервере();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.ШаблонОповещения = Параметры.ЗначениеКопирования.ШаблонОповещения;
		Иначе
			Если Параметры.Свойство("ШаблонОповещения") Тогда
				Объект.ШаблонОповещения			= Параметры.ШаблонОповещения;
			Иначе
				Объект.ШаблонОповещения			= Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// АВТОТЕКСТ
	ТаблицаАвтотекстаЗнач = РеквизитФормыВЗначение("ТаблицаАвтотекста");
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекстаЗнач, Перечисления.CRM_НазначенияАвтотекста.АвтотекстЭлектронноеПисьмо);
	НачальныйНомер = ТаблицаАвтотекстаЗнач.Количество();
	
	Если Объект.ШаблонОповещения Тогда
		CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекстаЗнач, Перечисления.CRM_НазначенияАвтотекста.АвтотекстЗадачаИсполнителя,,,НачальныйНомер);
	КонецЕсли;
	
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекстаЗнач, Перечисления.CRM_НазначенияАвтотекста.АвтотекстЭлектронноеПисьмо, Истина);
	Если Объект.ШаблонОповещения Тогда
		CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекстаЗнач, Перечисления.CRM_НазначенияАвтотекста.АвтотекстЗадачаИсполнителя,Истина,,НачальныйНомер);
	КонецЕсли;
	ЗначениеВРеквизитФормы(ТаблицаАвтотекстаЗнач, "ТаблицаАвтотекста");
	
	CRM_АвтотекстПереопределяемый.ЗаполнитьКоманднуюПанельФорматированногоДокумента(ЭтотОбъект, Истина);
	CRM_АвтотекстПереопределяемый.ЗаполнитьКоманднуюПанельФорматированногоДокумента(ЭтотОбъект, Ложь,,Истина);
	
	ПереключательИзHTMLФайла = Число(Объект.ИзHTMLФайла);
	
	Элементы.ГруппаФорматированныйДокументПолеHTML.ТекущаяСтраница = ?(Объект.ИзHTMLФайла,Элементы.СтраницаHTML,Элементы.СтраницаФорматированныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор","#");
	КонецЕсли;
	Элементы.Вложения.Видимость = Ложь;
	СформироватьПредставлениеВложений();	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["ВсеВложенияПометка"] = Неопределено Тогда
		ВсеВложенияПометка	= Настройки["ВсеВложенияПометка"];
	Иначе
		ВсеВложенияПометка	= Ложь;
	КонецЕсли;
	Элементы.ФормаВсеВложения.Пометка	= ВсеВложенияПометка;
	
	Если НЕ Настройки["ВсегдаПоказыватьВложения"] = Неопределено Тогда
		ВсегдаПоказыватьВложения	= Настройки["ВсегдаПоказыватьВложения"];
	Иначе
		ВсегдаПоказыватьВложения	= Ложь;
	КонецЕсли;
	Элементы.ФормаВсегдаПоказыватьВложения.Пометка	= ВсегдаПоказыватьВложения;	
	Элементы.КоманднаяПанельВложенияСкрытьПанель.Видимость = НЕ ВсегдаПоказыватьВложения;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииИПриЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	ОбработатьПереданныеПараметры(Параметры);
	ЗаполнитьВложения(Параметры);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Если НЕ Объект.ИзHTMLФайла Тогда
			СтруктураВложений = Новый Структура;
			Объект.Текст = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
				Объект.Ссылка, Объект.Текст,СтруктураВложений);
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Объект.Текст, СтруктураВложений);
		Иначе
			
			ТекстПисьма = CRM_Взаимодействия.CRM_ОбработатьТекстHTML(Объект.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

// Обрабатывает переданные параметры при создании письма.
&НаСервере
Процедура ОбработатьПереданныеПараметры(Параметры)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ОснованиеСтруктураВложений = Новый Структура;
			ОснованиеТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
				Параметры.ЗначениеКопирования, Параметры.ЗначениеКопирования.Текст,ОснованиеСтруктураВложений);
				
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ОснованиеТекстHTML, ОснованиеСтруктураВложений);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения(Параметры = Неопределено)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Параметры.ЗначениеКопирования, Истина);
			
			Для Каждого Стр Из табВложения Цикл
				Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
					новСтр = Вложения.Добавить();
					новСтр.Ссылка								= Стр.Ссылка;
					новСтр.ИмяФайла								= Стр.ИмяФайла;
					новСтр.ИндексКартинки						= Стр.ИндексКартинки;
					новСтр.Размер								= Стр.Размер;
					РазмерВложения								= Цел(новСтр.Размер/1024);
					новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.РазмерПредставление					= Стр.РазмерПредставление;
					новСтр.ПодписанЭП							= Стр.ПодписанЭЦП;
					новСтр.Расположение							= 1;
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
					новСтр.ИДФайлаЭлектронногоПисьма			= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		Вложения.Очистить();
		табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка, Истина);
		
		Для Каждого Стр Из табВложения Цикл
			Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
				АдресВоВремХранилище = "";
				
				новСтр = Вложения.Добавить();
				новСтр.Ссылка								= Стр.Ссылка;
				новСтр.ИмяФайла								= Стр.ИмяФайла;
				новСтр.ИмяФайлаНаКомпьютере					= АдресВоВремХранилище;
				новСтр.ИндексКартинки						= Стр.ИндексКартинки;
				новСтр.Размер								= Стр.Размер;
				РазмерВложения								= Цел(новСтр.Размер/1024);
				новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
				новСтр.РазмерПредставление					= Стр.РазмерПредставление;
				новСтр.ПодписанЭП							= Стр.ПодписанЭП;
				новСтр.Расположение							= 0;
				новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
				новСтр.ИДФайлаЭлектронногоПисьма			= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ПереданныйТекстHTML)
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ПереданныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		Если АтрибутИсточникКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(АтрибутИсточникКартинки.ТекстовоеСодержимое, "://") > 0 Тогда
			РезультатСкаченногоФайла = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АтрибутИсточникКартинки.ТекстовоеСодержимое);
			
			Если НЕ РезультатСкаченногоФайла = Неопределено И РезультатСкаченногоФайла.Статус Тогда
				НоваяКартинка = Новый Картинка(ПолучитьИзВременногоХранилища(РезультатСкаченногоФайла.Путь));
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла = АтрибутИсточникКартинки.ТекстовоеСодержимое;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
				НоваяСтрока.Картинка = НоваяКартинка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИзмененШаблонHTML Тогда
		
		УдалитьВременныеФайлы();
		
		Если ПустаяСтрока(ИмяФайлаШаблона) Тогда Возврат; КонецЕсли;
		
		АдресХранилища = "";
		Если ПоместитьФайл(АдресХранилища, ИмяФайлаШаблона,,Ложь,УникальныйИдентификатор) Тогда
			
			ПолучитьИменаФайловНаКлиенте(АдресХранилища, ИмяФайлаШаблона);
			
			Пропустить = Истина;
			Для Каждого СтрокаКартинки ИЗ СоответствиеФайлов Цикл
				// Пропустим первую строку
				Если Пропустить Тогда
					Пропустить= Ложь;
					Продолжить;
				КонецЕсли;
				
				АдресХранилищаКартинки = "";
				Если ПоместитьФайл(АдресХранилищаКартинки, КаталогФайла + СтрокаКартинки.ИмяНаКлиенте,,Ложь,УникальныйИдентификатор) Тогда
					
					СтрокаКартинки.ИмяНаСервере = ВернутьИмяФайлаКартинкиНаСервере(КаталогФайла + СтрокаКартинки.ИмяНаКлиенте, АдресХранилищаКартинки, КаталогФайла + СтрокаКартинки.ИмяНаКлиенте);
					
				КонецЕсли;
			КонецЦикла;
			
			ТекстHTML = ПропаситьHTML();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДокументHTMLТекущегоПисьмаПодготовлен = Ложь;
		
	ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
	
	Если НЕ ТекущийОбъект.ИзHTMLФайла Тогда
		
		СтруктураВложений = Новый Структура;
		ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекущийОбъект.Текст, СтруктураВложений);
		
		ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ТекущийОбъект.Текст);
		
		Для каждого Вложение Из СтруктураВложений Цикл
			
			НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
			НоваяСтрока.ИмяФайла = Вложение.Ключ;
			НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
			НоваяСтрока.Картинка = Вложение.Значение;
			
		КонецЦикла;
		
		Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
			
			ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.Текст);
			Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
			    ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
			ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
			
		КонецЕсли;
	ИначеЕсли ИзмененШаблонHTML Тогда
		Если ПустаяСтрока(ИмяФайлаШаблона) Тогда Возврат; КонецЕсли;
		
		ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
		ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ТекстHTML);
		
		СтруктураВложений	= Новый Структура;
		ДокументHTML		= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
		
		Для каждого Картинка Из ДокументHTML.Картинки Цикл
			АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
			
			ПолныйПутьККартинке = СтрЗаменить(АтрибутИсточникКартинки.Значение,"/","\");
			ФайлКартинки = Новый Файл(ПолныйПутьККартинке);
			
			Если ФайлКартинки.Существует() Тогда
				
				МассивНайденых = ТаблицаСоответствийИменВложенийИдентификаторам.НайтиСтроки(Новый Структура("ИмяФайла",АтрибутИсточникКартинки.Значение));
				Если МассивНайденых.Количество() > 0 Тогда Продолжить; КонецЕсли;
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла = АтрибутИсточникКартинки.Значение;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
				НоваяСтрока.Картинка = Новый Картинка(ПолныйПутьККартинке);
				
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
			
			Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
			    ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
			ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументHTMLТекущегоПисьмаПодготовлен Тогда
		
		ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		ТекущийОбъект.Текст = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстHTML," ");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	Письмо = ТекущийОбъект.Ссылка;
	
	Если НЕ ТекущийОбъект.ИзHTMLФайла ИЛИ ИзмененШаблонHTML Тогда
		
		// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
		ТаблицаВложенийКартинокФорматированногоДокумента = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
		Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
			УдаленныеВложения.Добавить(Вложение.Ссылка);
		КонецЦикла;
		
		// Удалим удаленные вложения
		Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
			ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
			ОбъектВложение.Удалить();
		КонецЦикла;
		
		УдаленныеВложения.Очистить();
	
		Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
			
			ИмяФайлаВложения = "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_") + "." + Вложение.Картинка.Формат();
			
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			ПрисоединенныйФайл = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			                     Письмо,
			                     АдресКартинкиВоВременномХранилище,
			                     ИмяФайлаВложения,
			                     ДвоичныеДанныеКартинки.Размер());
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
		
		Размер = 0;
		ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
		
		Если СтрокаТаблицыВложений.Расположение = 4 Тогда
			// из временного хранилища
			CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ИмяФайла, Размер);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 3 Тогда
			// из файла на сервере
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 1 Тогда
			
			CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
				Письмо, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 0 Тогда
			// перезаписать вложение
			
		КонецЕсли;
		
		СтрокаТаблицыВложений.Расположение = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьВложения();
	
	Если НЕ ТекущийОбъект.ИзHTMLФайла Тогда
		ТекстПисьма = CRM_Взаимодействия.CRM_ОбработатьТекстHTML(ТекущийОбъект.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
	ИзмененШаблонHTML = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСHTMLФайлом

// Открывает диалог выбора файла.
//
// Параметры:
//  Элемент                - Элемент управления, для которого выбираем файл.
//  ПроверятьСуществование - Если Истина, то выбор отменяется если файл не существует.
// 
&НаКлиенте
Процедура ВыборФайла(Элемент, ИмяСвойства, ПроверятьСуществование, Знач РасширениеПоУмолчанию = "html")
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
	ДиалогВыбораФайла.Фильтр = "HTML файл (*.html)|*.html";
	ДиалогВыбораФайла.Расширение = "html";
	
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла = Элемент.ТекстРедактирования;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = ПроверятьСуществование;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ИмяСвойства		= ДиалогВыбораФайла.ПолноеИмяФайла;
		КаталогФайла	= ДиалогВыбораФайла.Каталог;
		
		ИмяФайлаШаблонаПриИзменении(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервере
Функция ВернутьHTML(ВременныйТекстHTML, ПутьККаталогу)
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ВременныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		ПутьККартинке = СтрЗаменить(АтрибутИсточникКартинки.Значение,"/","\");
		ПолныйПутьККартинке = ПутьККаталогу + ПутьККартинке;
		
		ВременныйТекстHTML = СтрЗаменить(ВременныйТекстHTML,АтрибутИсточникКартинки.Значение,ПолныйПутьККартинке);
	КонецЦикла;
	
	Возврат ВременныйТекстHTML;
	
КонецФункции

&НаКлиенте
Процедура ИмяФайлаШаблонаПриИзменении(Элемент)
	
	ТекстПисьма = "";
	
	УдалитьВременныеФайлы();
	
	Файл = Новый Файл(ИмяФайлаШаблона);
	ПутьККаталогу	= Файл.Путь;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайлаШаблона);
	ВременныйТекстHTML		= ТекстовыйДокумент.ПолучитьТекст();
	
	ТекстПисьма = ВернутьHTML(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ВременныйТекстHTML," "), ПутьККаталогу);
	
	Модифицированность = Истина;
	ИзмененШаблонHTML = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаШаблонаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, ИмяФайлаШаблона, Истина);
	
КонецПроцедуры

// Открывает файл обмена во внешнем приложении.
//
// Параметры:
//  
// 
&НаКлиенте
Процедура ОткрытьВПриложении(ИмяФайла, СтандартнаяОбработка = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ОткрытьКаталогСФайлом", ЭтотОбъект, ДополнительныеПараметры));
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(Новый ОписаниеОповещения("ПроверитьСуществованиеФайла", ЭтотОбъект, ДополнительныеПараметры), ИмяФайла);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПроверитьСуществованиеФайла(Файл, ДополнительныеПараметры) Экспорт
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОпределенияСуществованияФайла", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПослеОпределенияСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		НачатьЗапускПриложения(ДополнительныеПараметры.ОписаниеОповещения, ДополнительныеПараметры.ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ОткрытьКаталогСФайлом(КодВозврата, ДополнительныеПараметры) Экспорт
	// Обработка не требуется.
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаШаблонаОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Функция РасширениеФайла(Знач ИмяФайла)
	
	ПозицияТочки = ПоследнийРазделитель(ИмяФайла);
	
	Расширение = Прав(ИмяФайла,СтрДлина(ИмяФайла) - ПозицияТочки + 1);
	
	Возврат Расширение;
	
КонецФункции

&НаСервере
Функция ПоследнийРазделитель(СтрокаСРазделителем, Разделитель = ".")
	
	ДлинаСтроки = СтрДлина(СтрокаСРазделителем);
	
	Пока ДлинаСтроки > 0 Цикл
		
		Если Сред(СтрокаСРазделителем, ДлинаСтроки, 1) = Разделитель Тогда
			
			Возврат ДлинаСтроки; 
			
		КонецЕсли;
		
		ДлинаСтроки = ДлинаСтроки - 1;
		
	КонецЦикла;

КонецФункции

&НаСервере
Процедура УдалитьВременныеФайлы()
	
	Для Каждого СтрокаВременногоФайла Из СоответствиеФайлов Цикл
		Файл = Новый Файл(СтрокаВременногоФайла.ИмяНаСервере);
		Если Файл.Существует() Тогда
			Попытка
				УдалитьФайлы(СтрокаВременногоФайла.ИмяНаСервере);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеФайлов.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ИмяФайлаНаСервереИлиКлиенте(ИмяРеквизита ,Знач АдресФайла, Знач ИмяФайлаДляРасширения = ".html",ПроверятьСуществование = Истина)
	
	ИмяФайла = Неопределено;
	
	Расширение = РасширениеФайла(ИмяФайлаДляРасширения);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	АдресНаСервере = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(АдресНаСервере);
	ИмяФайла = АдресНаСервере;
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция ПропаситьHTML()
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(СоответствиеФайлов[0].ИмяНаСервере);
	ВременныйТекстHTML		= ТекстовыйДокумент.ПолучитьТекст();
	ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ВременныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		ПутьККартинке = СтрЗаменить(АтрибутИсточникКартинки.Значение,"/","\");
		
		МассивСтрок = СоответствиеФайлов.НайтиСтроки(Новый Структура("ИмяНаКлиенте",ПутьККартинке));
		
		Если МассивСтрок.Количество() = 0 Тогда Продолжить; КонецЕсли;
		
		ВременныйТекстHTML = СтрЗаменить(ВременныйТекстHTML,АтрибутИсточникКартинки.Значение,МассивСтрок[0].ИмяНаСервере);
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ВременныйТекстHTML," ");
	
КонецФункции

&НаСервере
Процедура ПолучитьИменаФайловНаКлиенте(АдресФайлаВХранилище, ИмяФайлаДляРасширения)
	
	ИмяФайла = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаШаблона ,АдресФайлаВХранилище, ИмяФайлаДляРасширения);
	
	Если ИмяФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = СоответствиеФайлов.Добавить();
	НоваяСтрока.ИмяНаКлиенте	= ИмяФайлаШаблона;
	НоваяСтрока.ИмяНаСервере = ИмяФайла;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	ВременныйТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ВременныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		ПутьККартинке = СтрЗаменить(АтрибутИсточникКартинки.Значение,"/","\");
		
		МассивСтрок = СоответствиеФайлов.НайтиСтроки(Новый Структура("ИмяНаКлиенте",ПутьККартинке));
		
		Если МассивСтрок.Количество() > 0 Тогда Продолжить; КонецЕсли;
		
		НоваяСтрока = СоответствиеФайлов.Добавить();
		НоваяСтрока.ИмяНаКлиенте = ПутьККартинке;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВернутьИмяФайлаКартинкиНаСервере(ИмяФайлаНаКлиенте ,АдресФайлаВХранилище, ИмяФайлаДляРасширения)
	
	ИмяФайла = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаНаКлиенте ,АдресФайлаВХранилище, ИмяФайлаДляРасширения);
	
	Возврат ИмяФайла;
	
КонецФункции


&НаКлиенте
Процедура ПереключательИзHTMLФайлаПриИзменении(Элемент)
	
	Объект.ИзHTMLФайла = Булево(ПереключательИзHTMLФайла);
	Элементы.ГруппаФорматированныйДокументПолеHTML.ТекущаяСтраница = ?(Объект.ИзHTMLФайла,Элементы.СтраницаHTML,Элементы.СтраницаФорматированныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
		
	Если ЗавершениеРаботы Тогда Возврат КонецЕсли;
	
	УдалитьВременныеФайлы();
	
КонецПроцедуры


#КонецОбласти