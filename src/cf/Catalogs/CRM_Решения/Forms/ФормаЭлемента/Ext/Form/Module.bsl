
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
// Функция возвращает текущего пользователя.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Текущий пользователь.
//
Функция ТекущийПользователь()
	Возврат Пользователи.ТекущийПользователь();
КонецФункции // ТекущийПользователь()

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаСервере
// Процедура заполняет заголовок кнопки "Присоединенные файлы".
//
// Параметры:
//	Нет.
//
Процедура УправлениеОтметкойНаличияФайлов()
	НаличиеФайлов = 0;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		табВложения = ПолучитьВложения(Объект.Ссылка);
		
		НаличиеФайлов = табВложения.Количество();
	КонецЕсли;
	Элементы.ФормаПрисоединенныеФайлы.Картинка = БиблиотекаКартинок.CRM_ВложенияВПисьмо;
	Если НаличиеФайлов = 0 Тогда
		Элементы.ФормаПрисоединенныеФайлы.Отображение = ОтображениеКнопки.Картинка;
	Иначе
		Элементы.ФормаПрисоединенныеФайлы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Текст = Формат(НаличиеФайлов, "ЧГ=");
		Если НаличиеФайлов <= 1 Тогда
			Текст = Текст + " файл";
		ИначеЕсли НаличиеФайлов <= 4 Тогда
			Текст = Текст + " файла";
		Иначе
			Текст = Текст + " файлов";
		КонецЕсли;
		Элементы.ФормаПрисоединенныеФайлы.Заголовок = Текст;
	КонецЕсли;
КонецПроцедуры // УправлениеОтметкойНаличияФайлов()

&НаСервере
// Процедура заполняет заголовок кнопки "Присоединенные файлы у ТЧ Ответы".
//
// Параметры:
//	Нет.
//
Процедура УправлениеОтметкойНаличияФайловОтветы(ПереданныйИДОтветаОтбор)
	НаличиеФайлов = 0;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		табВложения = ПолучитьВложения(Объект.Ссылка, ПереданныйИДОтветаОтбор);
		
		НаличиеФайлов = табВложения.Количество();
	КонецЕсли;
	Элементы.ОтветыПрисоединенныеФайлы.Картинка = БиблиотекаКартинок.CRM_ВложенияВПисьмо;
	Если НаличиеФайлов = 0 Тогда
		Элементы.ОтветыПрисоединенныеФайлы.Отображение = ОтображениеКнопки.Картинка;
	Иначе
		Элементы.ОтветыПрисоединенныеФайлы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Текст = Формат(НаличиеФайлов, "ЧГ=");
		Если НаличиеФайлов <= 1 Тогда
			Текст = Текст + " файл";
		ИначеЕсли НаличиеФайлов <= 4 Тогда
			Текст = Текст + " файла";
		Иначе
			Текст = Текст + " файлов";
		КонецЕсли;
		Элементы.ОтветыПрисоединенныеФайлы.Заголовок = Текст;
	КонецЕсли;
КонецПроцедуры // УправлениеОтметкойНаличияФайловОтветы()

&НаСервере
// Процедура заполняет таблицу связанных решений.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьСвязанныеРешения()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Решение", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_СвязанныеРешения.СвязанноеРешение КАК Решение,
	               |	CRM_СвязанныеРешения.СвязанноеРешение.СтатусРешения КАК Состояние,
	               |	CRM_СвязанныеРешения.СвязанноеРешение.Наименование КАК Наименование
	               |ИЗ
	               |	РегистрСведений.CRM_СвязанныеРешения КАК CRM_СвязанныеРешения
	               |ГДЕ
	               |	CRM_СвязанныеРешения.Решение = &Решение
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Решение";
	СвязанныеРешения.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры // ЗаполнитьСвязанныеРешения()	

&НаСервере
// Процедура записывает в регистр таблицу связанных решений.
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьСвязанныеРешения()
	НаборЗаписей = РегистрыСведений.CRM_СвязанныеРешения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Решение.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	Для Каждого СвязанноеРешение Из СвязанныеРешения Цикл
		НоваяЗапись						= НаборЗаписей.Добавить();
		НоваяЗапись.Решение				= Объект.Ссылка;
		НоваяЗапись.СвязанноеРешение	= СвязанноеРешение.Решение;
	КонецЦикла;
	Попытка
		НаборЗаписей.Записать();
	Исключение;
	КонецПопытки;	
КонецПроцедуры // ЗаписатьСвязанныеРешения()

&НаСервере
// Функция возвращает список решений, которые не должны отображаться в форме выбора решений.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений	- Список решений.
//
Функция ПолучитьСписокСвязаныхРешений()
	СписокРешений = Новый СписокЗначений;
	СписокРешений.ЗагрузитьЗначения(СвязанныеРешения.Выгрузить(,"Решение").ВыгрузитьКолонку("Решение"));
	СписокРешений.Добавить(Объект.Ссылка);
	Возврат СписокРешений;
КонецФункции // ПолучитьСписокСвязанныхРешений()	

&НаСервере
// Процедура заполняет значение поля "ВариантОтветаHTML".
//
// Параметры:
//	НомерСтроки	- Число	- Номер строки ТЧ "Ответы".
//
Процедура ЗаполнитьВариантОтветаHTML()
	
	МассивСтрок = ТаблицаСоответствийОтветов.НайтиСтроки(Новый Структура("ИДСтроки",ТекущийИДОтвета));
	Если МассивСтрок.Количество() = 0 Тогда
		ВариантОтветаHTML.УстановитьHTML("<html></html>", Новый Структура);
	Иначе	
		ВариантОтветаHTML.УстановитьHTML(МассивСтрок[0].ВариантОтветаHTML, МассивСтрок[0].СтруктураВложений);
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьВариантОтветаHTML()

&НаСервере
// Процедура добавляет новое решение в таблицу связанных решений.
//
// Параметры:
//	Решение	- СправочникСсылка	- Добавляемое решение.
//
Процедура ДобавитьСвязанноеРешение(Решение)
	НоваяСтрока = СвязанныеРешения.Добавить();
	НоваяСтрока.Решение			= Решение;
	НоваяСтрока.Наименование	= Решение.Наименование;
	НоваяСтрока.Состояние		= Решение.СтатусРешения;
КонецПроцедуры // ДобавитьСвязанноеРешение()

&НаСервере
// Процедура отображает категории решения на форме.
//
// Параметры:
//	Нет.
//
Процедура ОтрисоватьКатегорииНаФорме()
	ПрефиксРеквизита = "ПолеВводаКатегория";
	МассивУдаляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	Пока Истина Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		Попытка
			ТестовыйРеквизит = ЭтотОбъект[ИмяРеквизита];
			МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизита);
			нИндекс = нИндекс + 1;
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	МассивКатегорий = Новый Массив();
	Если ЗначениеЗаполнено(Объект.ОсновнаяКатегория) Тогда
		МассивКатегорий.Добавить(Объект.ОсновнаяКатегория);
	КонецЕсли;
	Для Каждого СтрокаКатегория Из Объект.Категории Цикл
		Если ЗначениеЗаполнено(СтрокаКатегория.Категория) И МассивКатегорий.Найти(СтрокаКатегория.Категория) = Неопределено Тогда
			МассивКатегорий.Добавить(СтрокаКатегория.Категория);
		КонецЕсли;
	КонецЦикла;
	МассивДобавляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.CRM_КатегорииРешений");
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		РеквизитКатегория = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТиповКатегория);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитКатегория);
		нИндекс = нИндекс + 1;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхРеквизитов Цикл
		Попытка Элементы.Удалить(Элементы[УдаляемыйЭлемент]);
		Исключение КонецПопытки;
	КонецЦикла;
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	нИндекс = 1;
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		ЭтотОбъект[ИмяРеквизита] = ДобавляемаяКатегория;
		ЭлементКатегория = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаКатегории);
		ЭлементКатегория.Вид					= ВидПоляФормы.ПолеВвода;
		ЭлементКатегория.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементКатегория.ПутьКДанным			= ИмяРеквизита;
		ЭлементКатегория.РедактированиеТекста	= Ложь;
		ЭлементКатегория.КнопкаСпискаВыбора		= Ложь;
		ЭлементКатегория.КнопкаВыбора			= Ложь;
		ЭлементКатегория.КнопкаОчистки			= Ложь;
		ЭлементКатегория.КнопкаРегулирования	= Ложь;
		ЭлементКатегория.КнопкаОткрытия			= Ложь;
		ЭлементКатегория.КнопкаВыпадающегоСписка= Ложь;
		
		ЦветКатегории = Новый Цвет(ДобавляемаяКатегория.ЦветКрасный, ДобавляемаяКатегория.ЦветЗеленый, ДобавляемаяКатегория.ЦветСиний);
		ЭлементКатегория.ЦветФона = ЦветКатегории;
		ЭлементКатегория.ЦветТекста = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветКатегории);
		Если нИндекс = 1 Тогда
			ЭлементКатегория.Шрифт = Новый Шрифт(ЭлементКатегория.Шрифт,,, Истина);
		КонецЕсли;
		ЭлементКатегория.УстановитьДействие("НачалоВыбора",	"Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора");
		ЭлементКатегория.УстановитьДействие("Очистка",		"Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка");
		ЭлементКатегория.УстановитьДействие("Открытие",		"Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие");
		нИндекс = нИндекс + 1;
	КонецЦикла;
КонецПроцедуры // ОтрисоватьКатегорииНаФорме()

&НаСервереБезКонтекста
// Функция получает все вложения решения.
//
// Параметры:
//	Ссылка		- СправочникСсылка	- Владелец вложений.
//	НомерСтроки	- Число				- НомерСтроки
//  КлючСтроки  - Строка (по умолчанию нет)	- Ключ строки, для которой нужно получить вложения.
//
// Возвращаемое значение:
//	ТаблицаЗначений	- Таблица вложений.
//
Функция ПолучитьВложения(Ссылка, ИДФайлаЭлектронногоПисьма = "")
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	Запрос.УстановитьПараметр("ИДФайлаЭлектронногоПисьма",	ИДФайлаЭлектронногоПисьма);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.ИндексКартинки,
	|	Файлы.Размер,
	|	Файлы.ИДФайлаЭлектронногоПисьма,
	|	ВЫБОР
	|		КОГДА Файлы.Расширение = """"
	|			ТОГДА Файлы.Наименование
	|		ИНАЧЕ Файлы.Наименование + ""."" + Файлы.Расширение
	|	КОНЕЦ КАК ИмяФайла
	|ИЗ
	|	Справочник.CRM_РешенияПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Ссылка
	|	И Файлы.ИДФайлаЭлектронногоПисьма = &ИДФайлаЭлектронногоПисьма";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьВложения()

&НаКлиенте
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеСвязанныхРешений()
	Если Элементы.СвязанныеРешения.Видимость Тогда
		ПредставлениеСвязанныхРешений	= НСтр("ru='свернуть связанные решения'");
	Иначе	
		КоличествоРешенийНаРассмотрении	= 0;
		КоличествоРешенийУстарело		= 0;
		КоличествоРешенийУтверждено		= 0;
		КоличествоРешенийВсего			= 0;
		Для Каждого ЭлементРешения Из СвязанныеРешения Цикл
			Если ЭлементРешения.Состояние = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении") Тогда
				КоличествоРешенийНаРассмотрении	= КоличествоРешенийНаРассмотрении + 1;
			ИначеЕсли ЭлементРешения.Состояние = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Устарело") Тогда
				КоличествоРешенийУстарело	= КоличествоРешенийУстарело + 1;
			ИначеЕсли ЭлементРешения.Состояние = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено") Тогда
				КоличествоРешенийУтверждено	= КоличествоРешенийУтверждено + 1;
			КонецЕсли;
			КоличествоРешенийВсего = КоличествоРешенийВсего + 1;
		КонецЦикла;
		Если КоличествоРешенийВсего = 0 Тогда
			ПредставлениеСвязанныхРешений	= НСтр("ru='нет связанных решений'");
		Иначе
			ПредставлениеСвязанныхРешений	= НСтр("ru='всего: '") + Строка(КоличествоРешенийВсего)
				+ НСтр("ru=' из них актуальных: '") + Строка(КоличествоРешенийУтверждено)
				+ НСтр("ru=', на рассмотрении: '")  + Строка(КоличествоРешенийНаРассмотрении)
				+ НСтр("ru=', устарело: '")  + Строка(КоличествоРешенийУстарело);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры // СформироватьПредставлениеВложений()	

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "Ответы".
//
// Параметры:
//	Нет.
//
Процедура ОбработчикОтветыПриАктивизацииСтроки()
	
	ТД = Элементы.Ответы.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(ТД.ИДСтроки) Тогда
		ТД.ИДСтроки = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
	КонецЕсли;
	
	ТекущийИДОтвета = ТД.ИДСтроки;
	
	// Заполняем текущий ответ
	ЗаполнитьВариантОтветаHTML();
	// Устанавливаем доступность ответа.
	УстановитьДоступностьОтвета();
	
	УправлениеОтметкойНаличияФайловОтветы(ТекущийИДОтвета);
	
КонецПроцедуры // ОбработчикОтветыПриАктивизацииСтроки()

&НаКлиенте
// Процедура устанавливает видимость колонки "Состояние" табличной части "Ответы".
//
// Параметры:
//	Нет.
//
Процедура ВидимостьСостоянияОтветов();
	Элементы.ОтветыСтатусОтвета.Видимость = НЕ (Объект.СтатусРешения = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Личное"));
КонецПроцедуры // ВидимостьСостоянияОтветов()

&НаКлиенте
// Процедура управляет доступностью решения.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьРешения()
	РешениеДоступно = Истина;
	Если НЕ CRM_БазаЗнанийСервер.ЕстьПраваАдминистратора() Тогда
		Если Объект.СтатусРешения = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено") Тогда
			РешениеДоступно = Ложь;
		ИначеЕсли Объект.СтатусРешения = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Устарело") Тогда
			РешениеДоступно = Ложь;
		ИначеЕсли НЕ (Объект.Автор = ТекущийПользователь()) Тогда
			РешениеДоступно = Ложь;
		КонецЕсли;
	КонецЕсли;	
	Элементы.Наименование.ТолькоПросмотр		= НЕ РешениеДоступно;	
	Элементы.Подразделение.ТолькоПросмотр		= НЕ РешениеДоступно;
	Элементы.Проект.ТолькоПросмотр				= НЕ РешениеДоступно;
	Элементы.СтатусРешения.ТолькоПросмотр		= НЕ РешениеДоступно;
	Элементы.ТекстВопросаHTML.ТолькоПросмотр	= НЕ РешениеДоступно;
	Элементы.ТекстВопросаHTMLПроверкаОрфографииВопроса.Доступность	= РешениеДоступно;
КонецПроцедуры // УстановитьДоступностьРешения()

&НаКлиенте
// Процедура управляет доступностью ответа.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьОтвета()
	ОтветДоступен = Истина;
	ТД = Элементы.Ответы.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ CRM_БазаЗнанийСервер.ЕстьПраваАдминистратора() Тогда
		Если ТД.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено") Тогда
			ОтветДоступен = Ложь;
		ИначеЕсли ТД.СтатусОтвета = ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Устарело") Тогда
			ОтветДоступен = Ложь;
		ИначеЕсли НЕ (ТД.АвторИзменения = ТекущийПользователь()) Тогда
			ОтветДоступен = Ложь;
		КонецЕсли;
	КонецЕсли;	
	Элементы.ВариантОтветаHTML.ТолькоПросмотр	= НЕ ОтветДоступен;
	Элементы.ОтветыВариантОтвета.ТолькоПросмотр	= НЕ ОтветДоступен;
	Элементы.ОтветыСтатусОтвета.ТолькоПросмотр	= НЕ ОтветДоступен;
	Элементы.ВариантОтветаHTMLПроверкаПравописанияОтвета.Доступность	= ОтветДоступен;
КонецПроцедуры // УстановитьДоступностьРешения()

&НаКлиенте
// Процедура управляет доступностью таблицы ответов и связанных решений.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьОтветов()
	РешениеЗаписано = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.ДекорацияОтветыНедоступны.Видимость	= НЕ РешениеЗаписано;		
	Элементы.Ответы.ТолькоПросмотр					= НЕ РешениеЗаписано;	
	Элементы.ВариантОтветаHTML.ТолькоПросмотр		= НЕ РешениеЗаписано;
	Элементы.СвязанныеРешения.ТолькоПросмотр		= НЕ РешениеЗаписано;
	Элементы.ВариантОтветаHTMLПроверкаПравописанияОтвета.Доступность	= РешениеЗаписано;
КонецПроцедуры // УстановитьДоступностьОтветов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Проект".
//
Процедура ПроектПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Проект) И НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = ПолучитьЗначениеРеквизита(Объект.Проект, "CRM_Подразделение");
	КонецЕсли;	
КонецПроцедуры // ПроектПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "СтатусРешения".
//
Процедура СтатусРешенияПриИзменении(Элемент)
	ВидимостьСостоянияОтветов();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "СтатусРешения".
//
Процедура СтатусРешенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	Если Объект.Автор = ТекущийПользователь() Тогда	
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Личное"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении"));
	КонецЕсли;	
	Если CRM_БазаЗнанийСервер.ЕстьПраваАдминистратора() Тогда
		Если СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении")) = Неопределено Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении"));
		КонецЕсли;	
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Устарело"));
	КонецЕсли;
	Если СписокВыбора.Количество() = 0 Тогда Возврат; КонецЕсли;
	НачальноеЗначение = СписокВыбора.НайтиПоЗначению(Объект.СтатусРешения);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатусРешенияНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент, НачальноеЗначение);
КонецПроцедуры // СтатусРешенияНачалоВыбора()

&НаКлиенте
Процедура СтатусРешенияНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если НЕ (ВыбранныйЭлемент = Неопределено) Тогда
		Объект.СтатусРешения = ВыбранныйЭлемент.Значение;
		СтатусРешенияПриИзменении(Неопределено);
	КонецЕсли;	
КонецПроцедуры // СтатусРешенияНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Нажатия" элемента формы "ПредставлениеСвязанныхРешений".
//
Процедура ПредставлениеСвязанныхРешенийНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка				= Ложь;
	Элементы.СвязанныеРешения.Видимость	= НЕ Элементы.СвязанныеРешения.Видимость;
	СформироватьПредставлениеСвязанныхРешений();	
КонецПроцедуры // ПредставлениеСвязанныхРешенийНажатие()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "Ответы".
//
Процедура ОтветыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОтветыПриАктивизацииСтроки", 0.2, Истина);
	
КонецПроцедуры // ОтветыПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы формы "Ответы".
//
Процедура ОтветыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТД.АвторИзменения	= ТекущийПользователь();
		ТД.СтатусОтвета		= ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении");
		// Устанавливаем доступность ответа.
		УстановитьДоступностьОтвета();
	КонецЕсли;
	
КонецПроцедуры // ОтветыПередОкончаниемРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы формы "Ответы".
//
Процедура ОтветыПередУдалением(Элемент, Отказ)
	
	ТД = Элементы.Ответы.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Отказ = Истина;
	ИначеЕсли НЕ CRM_БазаЗнанийСервер.ЕстьПраваАдминистратора() Тогда
		Если ЗначениеЗаполнено(ТД.АвторИзменения) И НЕ (ТД.АвторИзменения = ТекущийПользователь()) Тогда
			Отказ = Истина;
		КонецЕсли;	
	ИначеЕсли Объект.Ответы.Количество() = 1 Тогда
		ТекущийИДОтвета = "";
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		МассивСтрок = ТаблицаСоответствийОтветов.НайтиСтроки(Новый Структура("ИДСтроки",ТД.ИДСтроки));
		ТаблицаСоответствийОтветов.Удалить(ТаблицаСоответствийОтветов.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
КонецПроцедуры // ОтветыПередУдалением()

// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "Ответы".
//
&НаКлиенте
Процедура ОтветыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)		
	
	Элементы.ОтветыПрисоединенныеФайлы.Заголовок = "";
	
КонецПроцедуры // ОтветыПередНачаломДобавления()

// Процедура - обработчик события "ПриНачалеРедактирования" таблицы формы "Ответы".
//
&НаКлиенте
Процедура ОтветыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ИДСтроки = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
		СтрокаСоответствия = ТаблицаСоответствийОтветов.Добавить();
		
		ТекущийИДОтвета = Элемент.ТекущиеДанные.ИДСтроки;
		СтрокаСоответствия.ИДСтроки = ТекущийИДОтвета;
		СтрокаСоответствия.ВариантОтветаHTML = "";
		СтрокаСоответствия.СтруктураВложений = Новый Структура;
	КонецЕсли;
	
КонецПроцедуры  // ОтветыПриНачалеРедактирования()

// Процедура - обработчик события "ПослеУдаления" таблицы формы "Ответы".
//
&НаКлиенте
Процедура ОтветыПослеУдаления(Элемент)
	ТД = Элементы.Ответы.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		ВариантОтветаHTML.Удалить();
		Возврат;
	КонецЕсли;
	
	ТекущийИДОтвета = ТД.ИДСтроки;
	// Устанавливаем доступность ответа.
	УстановитьДоступностьОтвета();
	
КонецПроцедуры  // ОтветыПослеУдаления()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "СтатусОтвета" таблицы формы "Ответы".
//
Процедура ОтветыСтатусОтветаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.Ответы.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Если CRM_БазаЗнанийСервер.ЕстьПраваАдминистратора() Тогда
		СтандартнаяОбработка = Ложь;
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.НаРассмотрении"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Утверждено"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Устарело"));
		НачальноеЗначение = СписокВыбора.НайтиПоЗначению(ТД.СтатусОтвета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветыСтатусОтветаНачалоВыбораЗавершение", ЭтотОбъект, ТД);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент, НачальноеЗначение);
	КонецЕсли;	
КонецПроцедуры // ОтветыСтатусОтветаНачалоВыбора()

&НаКлиенте
Процедура ОтветыСтатусОтветаНачалоВыбораЗавершение(ВыбранныйЭлемент, ТД) Экспорт
	Если НЕ (ВыбранныйЭлемент = Неопределено) Тогда
		ТД.СтатусОтвета = ВыбранныйЭлемент.Значение;
	КонецЕсли;	
КонецПроцедуры // ОтветыСтатусОтветаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ВариантОтветаHTML".
//
Процедура ВариантОтветаHTMLПриИзменении(Элемент)
	
	ТД = Элементы.Ответы.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		Если ПустаяСтрока(ВариантОтветаHTML.ПолучитьТекст()) Тогда Возврат; КонецЕсли;
		
		НовыйОтвет = Объект.Ответы.Добавить();
		НовыйОтвет.ИДСтроки = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
		
		ТекущийИДОтвета = НовыйОтвет.ИДСтроки;
	КонецЕсли;
	
	МассивСтрок = ТаблицаСоответствийОтветов.НайтиСтроки(Новый Структура("ИДСтроки",ТекущийИДОтвета));
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаСоответствия = ТаблицаСоответствийОтветов.Добавить();
		СтрокаСоответствия.ИДСтроки = ТекущийИДОтвета;
	Иначе
		СтрокаСоответствия = МассивСтрок[0];
	КонецЕсли;
	
	СтруктураВложений = Новый Структура;
	ВариантОтветаHTML.ПолучитьHTML(СтрокаСоответствия.ВариантОтветаHTML, СтруктураВложений);
	СтрокаСоответствия.СтруктураВложений = СтруктураВложений;
	
КонецПроцедуры // ВариантОтветаHTMLПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" таблицы формы "СвязанныеРешения".
//
Процедура СвязанныеРешенияПриИзменении(Элемент)
	СформироватьПредставлениеСвязанныхРешений();	
КонецПроцедуры // СвязанныеРешенияПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "СвязанныеРешения".
//
Процедура СвязанныеРешенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ФормаВыбора = ПолучитьФорму("Справочник.CRM_Решения.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	СписокРешений = ПолучитьСписокСвязаныхРешений();
	НовыйОтбор = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Ссылка");
	НовыйОтбор.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеВСписке;
	НовыйОтбор.ПравоеЗначение	= СписокРешений;
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СвязанныеРешенияПередНачаломДобавленияЗавершение", ЭтотОбъект);
	ФормаВыбора.Открыть();
КонецПроцедуры // СвязанныеРешенияПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "СвязанныеРешения".
//
Процедура СвязанныеРешенияПередНачаломДобавленияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если НЕ (ВыбранныйЭлемент = Неопределено) Тогда
		НоваяСтрока 				= СвязанныеРешения.Добавить();
		НоваяСтрока.Решение			= ВыбранныйЭлемент;
		НоваяСтрока.Состояние		= ПолучитьЗначениеРеквизита(ВыбранныйЭлемент, "СтатусРешения");
		НоваяСтрока.Наименование	= ПолучитьЗначениеРеквизита(ВыбранныйЭлемент, "Наименование");
		ПоследняяСтрока = СвязанныеРешения[СвязанныеРешения.Количество() - 1].ПолучитьИдентификатор();
		Элементы.СвязанныеРешения.ТекущаяСтрока = ПоследняяСтрока;
	КонецЕсли;	
КонецПроцедуры // СвязанныеРешенияПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" таблицы формы "СвязанныеРешения".
//
Процедура СвязанныеРешенияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ПараметрыФормы = Новый Структура("Ключ", ТД.Решение);
	ФормаРешения = ПолучитьФорму("Справочник.CRM_Решения.ФормаОбъекта", ПараметрыФормы, Элемент);
	ФормаРешения.Открыть();	
КонецПроцедуры // СвязанныеРешенияПередНачаломИзменения()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ДекорацияВыбратьКатегории".
//
Процедура ДекорацияВыбратьКатегорииНажатие(Элемент)
	МассивКатегорий = Новый Массив();
	Для Каждого КатегорияСтрока Из Объект.Категории Цикл
		МассивКатегорий.Добавить(КатегорияСтрока.Категория);
	КонецЦикла;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивКатегорий",		МассивКатегорий);
	ПараметрыФормы.Вставить("ОсновнаяКатегория",	Объект.ОсновнаяКатегория);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияВыбратьКатегорииНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.CRM_Решения.Форма.ВыборКатегорий", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ДекорацияВыбратьКатегории".
//
Процедура ДекорацияВыбратьКатегорииНажатиеЗавершение(СписокВыбранныеКатегории, ДополнительныеПараметры) Экспорт
	Если СписокВыбранныеКатегории = Неопределено Тогда Возврат; КонецЕсли;
	Модифицированность = Истина;
	Объект.Категории.Очистить();
	Объект.ОсновнаяКатегория = ПредопределенноеЗначение("Справочник.CRM_КатегорииРешений.ПустаяСсылка");
	Для Каждого СтрокаКатегория Из СписокВыбранныеКатегории Цикл
		НоваяСтрока				= Объект.Категории.Добавить();
		НоваяСтрока.Категория	= СтрокаКатегория.Значение;
		Если СтрокаКатегория.Пометка Тогда
			Объект.ОсновнаяКатегория = НоваяСтрока.Категория;
		КонецЕсли;
	КонецЦикла;
	ОтрисоватьКатегорииНаФорме();
КонецПроцедуры

&НаКлиенте
// Процедура - динамически подключаемыйт обработчик события "НачалоВыбора" элементов формы отображения категорий.
//
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора()

&НаКлиенте
// Процедура - динамически подключаемыйт обработчик события "Очистка" элементов формы отображения категорий.
//
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка()

&НаКлиенте
// Процедура - динамически подключаемыйт обработчик события "Открытие" элементов формы отображения категорий.
//
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры // Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ КОМАНД ФОРМЫ

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПолеВОтборе(ЭлементыОтбора, Поле)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НайденныйЭлемент = НайтиПолеВОтборе(ЭлементОтбора.Элементы, Поле);
			Если НайденныйЭлемент <> Неопределено Тогда
				Возврат НайденныйЭлемент;
			КонецЕсли;
		Иначе
			Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
				Возврат ЭлементОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
// Процедура - обработчик команды формы "ПрисоединенныеФайлы".
//
Процедура ПрисоединенныеФайлы(Команда)
	Записано = Истина;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записано = Ложь;
		Текст = НСтр("ru = 'Данные еще не записаны.
		|Переход к ""Присоединенные файлы"" возможен только после записи данных.
		|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветыПрисоединенныеФайлыЗавершение", ЭтотОбъект, Ложь);
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет,,,,);
	Иначе
		ПрисоединенныеФайлыЗавершение(Неопределено, Истина);
	КонецЕсли;
КонецПроцедуры // ПрисоединенныеФайлы()

&НаКлиенте
Процедура ПрисоединенныеФайлыЗавершение(Ответ, Записано) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записано = Записать();
	КонецЕсли;
	Если Записано = Истина Тогда
		
		ФормаОткрытаИзОтветов = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",	Объект.Ссылка);
		
		ФормаПрисоединенныхФайлов = ПолучитьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
		
		Если ФормаПрисоединенныхФайлов.Открыта() Тогда
			ПолеОтбораЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка.ИДФайлаЭлектронногоПисьма");
			ЭлементОтбора = НайтиПолеВОтборе(ФормаПрисоединенныхФайлов.Список.Отбор.Элементы, ПолеОтбораЛевоеЗначение);
			Если ЭлементОтбора = Неопределено Тогда
				ЭлементОтбора = ФормаПрисоединенныхФайлов.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение	= ПолеОтбораЛевоеЗначение;
				ЭлементОтбора.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение= "";
			Иначе
				ЭлементОтбора.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = "";
			КонецЕсли;
			
			ФормаПрисоединенныхФайлов.Активизировать();
		Иначе
			ФормаПрисоединенныхФайлов.ЗакрыватьПриЗакрытииВладельца = Истина;
			
			ЭлементОтбора = ФормаПрисоединенныхФайлов.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка.ИДФайлаЭлектронногоПисьма");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = "";
			
			ФормаПрисоединенныхФайлов.Открыть();
		КонецЕсли;
	КонецЕсли;
	УправлениеОтметкойНаличияФайлов();
КонецПроцедуры // ПрисоединенныеФайлы()

&НаКлиенте
Процедура ОтветыПрисоединенныеФайлы(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Текст = НСтр("ru = 'Данные еще не записаны.
		|Переход к ""Файлы ответа"" возможен только после записи данных.
		|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветыПрисоединенныеФайлыЗавершение", ЭтотОбъект, Ложь);
		ПоказатьВопрос(ОписаниеОповещения, Текст,РежимДиалогаВопрос.ДаНет,,,,);
	Иначе
		ОтветыПрисоединенныеФайлыЗавершение(Неопределено, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветыПрисоединенныеФайлыЗавершение(Ответ, Записано) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записано = Записать();
	КонецЕсли;
	Если Записано = Истина Тогда
		Если ВариантОтветаИзменен Тогда
			Текст = НСтр("ru = 'Данные изменены.
			|Переход к ""Файлы ответа"" возможен только после записи данных.
			|Данные будут записаны.'");
			ОповещениеНовое = Новый ОписаниеОповещения("ПослеВопросаОСохраненииВариантаОтвета", ЭтотОбъект);
			ПоказатьВопрос(ОповещениеНовое,Текст,РежимДиалогаВопрос.ДаНет,,,,);
			Возврат;
		КонецЕсли;	
		
		ТД = Элементы.Ответы.ТекущиеДанные;
		Если ТД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ФормаОткрытаИзОтветов = Истина;
		ТекущийИДОтветаОтбор = ТекущийИДОтвета;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",	Объект.Ссылка);
		
		ФормаПрисоединенныхФайлов = ПолучитьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
		
		Если ФормаПрисоединенныхФайлов.Открыта() Тогда
			ПолеОтбораЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка.ИДФайлаЭлектронногоПисьма");
			ЭлементОтбора = НайтиПолеВОтборе(ФормаПрисоединенныхФайлов.Список.Отбор.Элементы, ПолеОтбораЛевоеЗначение);
			Если ЭлементОтбора = Неопределено Тогда
				ЭлементОтбора = ФормаПрисоединенныхФайлов.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение	= ПолеОтбораЛевоеЗначение;
				ЭлементОтбора.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение= ТекущийИДОтвета;
			Иначе
				ЭлементОтбора.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = ТекущийИДОтвета;
			КонецЕсли;
			
			ФормаПрисоединенныхФайлов.Активизировать();
		Иначе
			ФормаПрисоединенныхФайлов.ЗакрыватьПриЗакрытииВладельца = Истина;
			
			ЭлементОтбора = ФормаПрисоединенныхФайлов.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка.ИДФайлаЭлектронногоПисьма");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекущийИДОтвета;
			
			ФормаПрисоединенныхФайлов.Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОСохраненииВариантаОтвета(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
// Процедура - обработчик команды формы "ПроверкаПравописанияВопроса".
//
Процедура ПроверкаПравописанияВопроса(Команда)
	Если ПустаяСтрока(ТекстВопросаHTML.ПолучитьТекст()) Тогда Возврат; КонецЕсли;
	ВариантВопроса	= "";
	ВложенияВопроса	= Новый Структура;
	ТекстВопросаHTML.ПолучитьHTML(ВариантВопроса, ВложенияВопроса);
	CRM_ОбщегоНазначенияКлиент.ПроверитьПравописаниеТекста(ВариантВопроса, ВложенияВопроса,  "ТекстВопросаHTML", ЭтотОбъект);
КонецПроцедуры // ПроверкаПравописанияВопроса()

&НаКлиенте
// Процедура - обработчик команды формы "ПроверкаПравописанияОтвета".
//
Процедура ПроверкаПравописанияОтвета(Команда)
	Если ПустаяСтрока(ВариантОтветаHTML.ПолучитьТекст()) Тогда Возврат; КонецЕсли;
	ВариантОтвета	= "";
	ВложенияОтвета	= Новый Структура;
	ВариантОтветаHTML.ПолучитьHTML(ВариантОтвета, ВложенияОтвета);
	CRM_ОбщегоНазначенияКлиент.ПроверитьПравописаниеТекста(ВариантОтвета, ВложенияОтвета,  "ВариантОтветаHTML", ЭтотОбъект);
	ВариантОтветаИзменен = Истина;
КонецПроцедуры // ПроверкаПравописанияОтвета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.СтатусРешения	= ПредопределенноеЗначение("Перечисление.CRM_СтатусыРешений.Личное");
		Объект.Автор			= ТекущийПользователь();
	КонецЕсли;
	ВидимостьСостоянияОтветов();
	Элементы.СвязанныеРешения.Видимость	= Ложь;
	ЗаполнитьСвязанныеРешения();	
	СформироватьПредставлениеСвязанныхРешений();
	УправлениеОтметкойНаличияФайлов();
	ОтрисоватьКатегорииНаФорме();
	// Устанавливаем доступность решения.
	УстановитьДоступностьРешения();
	// Устанавливаем доступность ответов.
	УстановитьДоступностьОтветов();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаВыбора".
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_Решения") Тогда
		ДобавитьСвязанноеРешение(ВыбранноеЗначение);
		СформироватьПредставлениеСвязанныхРешений();			
	КонецЕсли;		
КонецПроцедуры // ОбработкаВыбора()

&НаСервере
Процедура ОбработатьЗаписьПрисоединенныхФайловОтвета(МассивФайлов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ПрисоединенныйФайл Из МассивФайлов Цикл
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = ТекущийИДОтветаОтбор;
		ПрисоединенныйФайлОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура обновляет значение поля "ТекстВопросаHTML".
//
Процедура ОбновитьТекстВопросаHTML(Текст, Вложения)
	
	ТекстВопросаHTML.УстановитьHTML(Текст, Вложения);
	
КонецПроцедуры

&НаСервере
// Процедура обновляет значение поля "ВариантОтветаHTML".
//
Процедура ОбновитьВариантОтветаHTML(Текст, Вложения)
	
	ВариантОтветаHTML.УстановитьHTML(Текст, Вложения);
	
КонецПроцедуры // ОбновитьВариантОтветаHTML()

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если (ИмяСобытия = "ПроверкаПравописания_ИзмененТекст") И (Источник = ЭтаФорма) Тогда
		Если Параметр.ИмяРеквизита = "ТекстВопросаHTML" Тогда
			ОбновитьТекстВопросаHTML(Параметр.Текст, Параметр.Вложения);
		ИначеЕсли Параметр.ИмяРеквизита = "ВариантОтветаHTML" Тогда
			ОбновитьВариантОтветаHTML(Параметр.Текст, Параметр.Вложения);
			ВариантОтветаHTMLПриИзменении(Элементы.ВариантОтветаHTML);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		Если ФормаОткрытаИзОтветов Тогда
			Если Параметр.ВладелецФайла = Объект.Ссылка И Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый Тогда
				ОбработатьЗаписьПрисоединенныхФайловОтвета(Источник);
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ВладелецФайла",	Объект.Ссылка);
				ФормаПрисоединенныхФайлов = ПолучитьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
				
				Если ФормаПрисоединенныхФайлов.Открыта() Тогда
					ФормаПрисоединенныхФайлов.Элементы.Список.Обновить();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ФормаОткрытаИзОтветов Тогда
			УправлениеОтметкойНаличияФайловОтветы(ТекущийИДОтветаОтбор);
		Иначе
			УправлениеОтметкойНаличияФайлов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПослеЗаписи".
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаписатьСвязанныеРешения();
	УстановитьДоступностьОтветов();
	Оповестить("CRM_РешенияОбновлениеСправочника", Объект.Ссылка);
	УжеЗаписан = Ложь;
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ОбработатьТекстВопроса()
	
	СтруктураВложений = Новый Структура;
	Объект.ТекстВопросаHTML = Справочники.CRM_Решения.ОбработатьТекстHTMLДляФорматированногоДокумента(
		Объект.Ссылка, Объект.ТекстВопросаHTML,СтруктураВложений);
		
	ТекстВопросаHTML.УстановитьHTML(Объект.ТекстВопросаHTML, СтруктураВложений);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработатьТекстыОтветов()
	
	Для Каждого СтрокаОтвета Из Объект.Ответы Цикл
		
		СтрокаСоответствия = ТаблицаСоответствийОтветов.Добавить();
		СтрокаСоответствия.ИДСтроки = СтрокаОтвета.ИДСтроки;
		
		СтрокаСоответствия.СтруктураВложений = Новый Структура;
		СтрокаСоответствия.ВариантОтветаHTML = Справочники.CRM_Решения.ОбработатьТекстHTMLДляФорматированногоДокумента(
			Объект.Ссылка, СтрокаОтвета.ВариантОтветаHTML,СтрокаСоответствия.СтруктураВложений);
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	ОбработатьТекстВопроса();
	ОбработатьТекстыОтветов();
	
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПриСозданииИПриЧтенииНаСервере();
КонецПроцедуры

&НаСервере
Функция ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ПереданныйТекстHTML)
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ПереданныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		Если АтрибутИсточникКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(АтрибутИсточникКартинки.ТекстовоеСодержимое, "://") > 0 И НЕ СтрНачинаетсяС(АтрибутИсточникКартинки.ТекстовоеСодержимое,  "e1c://") Тогда
			РезультатСкаченногоФайла = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АтрибутИсточникКартинки.ТекстовоеСодержимое);
			
			Если НЕ РезультатСкаченногоФайла = Неопределено И РезультатСкаченногоФайла.Статус Тогда
				НоваяКартинка = Новый Картинка(ПолучитьИзВременногоХранилища(РезультатСкаченногоФайла.Путь));
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла = АтрибутИсточникКартинки.ТекстовоеСодержимое;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
				НоваяСтрока.Картинка = НоваяКартинка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДокументHTMLТекущегоПисьмаПодготовлен = Ложь;
	ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
	
	СтруктураВложений = Новый Структура;
	ТекстВопросаHTML.ПолучитьHTML(ТекущийОбъект.ТекстВопросаHTML, СтруктураВложений);
	
	ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ТекущийОбъект.ТекстВопросаHTML);
	
	Для каждого Вложение Из СтруктураВложений Цикл
		
		НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
		НоваяСтрока.ИмяФайла = Вложение.Ключ;
		НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
		НоваяСтрока.Картинка = Вложение.Значение;
		
	КонецЦикла;
	
	Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
		
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстВопросаHTML);
		Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
		    ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
		ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
		
	КонецЕсли;
	
	Если ДокументHTMLТекущегоПисьмаПодготовлен Тогда
		
		ТекущийОбъект.ТекстВопросаHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		ТекущийОбъект.ТекстВопроса     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъект.ТекстВопросаHTML);
		
	КонецЕсли;
	
	Для Каждого СтрокаОтвета Из ТаблицаСоответствийОтветов Цикл
		
		ДокументHTMLТекущегоОтветаПодготовлен = Ложь;
		ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Очистить();
		
		ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(СтрокаОтвета.ВариантОтветаHTML);
		
		Для каждого Вложение Из СтрокаОтвета.СтруктураВложений Цикл
			
			НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Добавить();
			НоваяСтрока.ИмяФайла = Вложение.Ключ;
			НоваяСтрока.ИдентификаторФайлаДляHTML = Строка(Новый УникальныйИдентификатор)+"_"+СтрокаОтвета.ИДСтроки;
			НоваяСтрока.Картинка = Вложение.Значение;
			
		КонецЦикла;
		
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(СтрокаОтвета.ВариантОтветаHTML);
		Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
		    ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторамОтветы.Выгрузить());
		ДокументHTMLТекущегоОтветаПодготовлен = Истина;
			
		МассивОтветов = ТекущийОбъект.Ответы.НайтиСтроки(Новый Структура("ИДСтроки",СтрокаОтвета.ИДСтроки));
		
		МассивОтветов[0].ВариантОтветаHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		МассивОтветов[0].ВариантОтвета     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(МассивОтветов[0].ВариантОтветаHTML);
		
		Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторамОтветы Цикл
			НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Вложение);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
	ТаблицаВложенийКартинокФорматированногоДокумента = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(ТекущийОбъект.Ссылка);
	Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
		
		МассивОтветов = Объект.Ответы.НайтиСтроки(Новый Структура("ИДСтроки",Вложение.ИДФайлаЭлектронногоПисьма));
		Если МассивОтветов.Количество() = 0 Тогда
			УдаленныеВложения.Добавить(Вложение.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// Удалим удаленные вложения
	Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
		ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	
	УдаленныеВложения.Очистить();
	
	Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
		
		ИмяФайлаВложения = "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_") + "." + Вложение.Картинка.Формат();
		
		ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
		АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
		ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
		                     ТекущийОбъект.Ссылка,
		                     АдресКартинкиВоВременномХранилище,
		                     ИмяФайлаВложения,
		                     ДвоичныеДанныеКартинки.Размер());
		
		Если ПрисоединенныйФайл <> Неопределено Тогда
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

КонецПроцедуры

