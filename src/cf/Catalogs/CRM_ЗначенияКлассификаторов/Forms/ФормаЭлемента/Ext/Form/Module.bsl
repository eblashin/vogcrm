
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	ДополнительныеПараметры = Новый Структура; 
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры); 
	// Конец СтандартныеПодсистемы.Свойства

	вогГеокодированиеСервер.ПриСозданииЗаСервереСформироватьДанныеФормы(ЭтаФорма);
	CRM_КлассификаторыВызовСервера.ПриСозданииНаСервере(ЭтаФорма);
	УстановитьВидимостьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	CRM_КлассификаторыВызовСервера.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	вогГеокодированиеСервер.ПриЗаписиНаСервереСохранитьДанные(ЭтотОбъект, ПараметрыЗаписи, ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект); 
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СтандартныеПодсистемыСвойства

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

// ++ VOG Солодов В.В. 05.07.2019 task 425
&НаКлиенте
Процедура ДополнительныйРеквизитПриИзменении(Элемент)
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры // -- VOG Солодов В.В. 05.07.2019

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Сначала необходимо записать значение.'"));
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
				НСтр("ru='Перед формированием необходимо записать значение. Записать?'"),
				РежимДиалогаВопрос.ДаНет);
		
	Иначе
		СформироватьЗавершение(Неопределено, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;

	CRM_КлассификаторыВызовСервера.Сформировать(Объект.Ссылка);
	ПоказатьОповещениеПользователя(
		НСтр("ru='Формирование состава значения классификатора'"),,
		НСтр("ru='Состав значения сформирован.'")
	);

КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)

	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройки значения классификатора ""%ИмяЗначения%""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%ИмяЗначения%", Объект.Наименование);
	
	Адреса = CRM_КлассификаторыВызовСервера.ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище(
		Объект.Ссылка,
		Объект.ИмяШаблонаСКД,
		АдресСКД, 
		АдресНастроекСКД,
		УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект, Адреса);
	ОткрытьФорму("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		Новый Структура(
			"АдресСхемыКомпоновкиДанных,
			|АдресНастроекКомпоновкиДанных,
			|ИсточникШаблонов,
			|Заголовок,
			|НеПомещатьНастройкиВСхемуКомпоновкиДанных,
			|НеНастраиватьУсловноеОформление,
			|НеНастраиватьПорядок,
			|НеНастраиватьВыбор,
			|УникальныйИдентификатор,
			|ИмяШаблонаСКД,
			|ВозвращатьИмяТекущегоШаблонаСКД",
			Адреса.СхемаКомпоновкиДанных,
			Адреса.НастройкиКомпоновкиДанных,
			Объект.Ссылка,
			ЗаголовокФормыНастройкиСхемыКомпоновкиДанных,
			Истина,
			Истина,
			Истина,
			Истина,
			УникальныйИдентификатор,
			Объект.ИмяШаблонаСКД,
			Истина),
			,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗавершение(Результат, Адреса) Экспорт

	Если Результат <> Неопределено Тогда
			
		Объект.ИмяШаблонаСКД = Результат.ИмяТекущегоШаблонаСКД;
			
		Изменения = CRM_КлассификаторыВызовСервера.ПрименитьИзмененияКСхемеКомпоновкиДанных(
			Объект.Ссылка,
			Объект.ИмяШаблонаСКД, 
			Адреса.СхемаКомпоновкиДанных,
			Результат.АдресХранилищаНастройкиКомпоновщика,
			УникальныйИдентификатор);
		
		Объект.ИмяШаблонаСКД = Изменения.ИмяШаблонаСКД;
		ПредставлениеШаблонаСКД = Изменения.ПредставлениеШаблонаСКД;
		АдресСКД = Изменения.АдресСКД;
		АдресНастроекСКД = Изменения.АдресНастроекСКД;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Полигоны(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("Полигоны", ПолучитьСоответствиеПолигонов()); 
	ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина); 
	ПараметрыОткрытияФормы.Вставить("РежимРаботы", "Полигоны"); 
	
	// Центрируем по первому началу
	Если ЭтотОбъект.Полигоны.Количество() Тогда
		СтрокаПолигона = ЭтотОбъект.Полигоны.Получить(0);	
		ПараметрыОткрытияФормы.Вставить("ЦентрКарты", Новый Структура("Широта, Долгота", СтрокаПолигона.Широта, СтрокаПолигона.Долгота)); 
		ПараметрыОткрытияФормы.Вставить("МасштабКарты", 13); 
	КонецЕсли;
	
	ОписаниеОповещенияПолучениеДанныхПолигона = Новый ОписаниеОповещения("ОповещениеОбработчикПолучениеДанныхПолигона", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.вогГеокодирование.Форма.Форма", ПараметрыОткрытияФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,, ОписаниеОповещенияПолучениеДанныхПолигона);
	
КонецПроцедуры

#Область СтандартныеПодсистемыСвойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, 
												НавигационнаяСсылка = Неопределено, 
												СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтандартныеПодсистемыСвойства
  
&НаСервере 
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Полигоны
	
&НаКлиенте
Процедура РассчитатьКоличествоПолигонов()
	
	СоответствиеНомеровПолигонов = Новый Соответствие;
	
	Для Каждого стр из ЭтотОбъект.Полигоны Цикл 
		
		СоответствиеНомеровПолигонов.Вставить(стр.НомерПолигона);
		
	КонецЦикла;
	
	КоличествоПолигонов = СоответствиеНомеровПолигонов.Количество();
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСоответствиеПолигонов()

	Возврат ПолучитьСоответствиеПолигоновСервер();
	
КонецФункции // ПолучитьДанныеПолигонов()

Функция ПолучитьСоответствиеПолигоновСервер()

	Возврат вогГеокодированиеСервер.ПолучитьСоответствиеПолигонов(ЭтотОбъект.Полигоны.Выгрузить(), Объект.Наименование);
	
КонецФункции // ПолучитьДанныеПолигонов()

&НаКлиенте
Процедура ОповещениеОбработчикПолучениеДанныхПолигона(Значение, Доп) Экспорт 
	
	Если Значение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПолученныеДанныеПолигонов(Значение);
	
	РассчитатьКоличествоПолигонов();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ОповещениеОбработчикПолучениеДанныхПолигона()

Процедура ЗаполнитьПолученныеДанныеПолигонов(ДанныеПолигонов)
	
	вогГеокодированиеСервер.РазвернутьДанныеПоПолигонам(ЭтотОбъект.Полигоны, ДанныеПолигонов);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)

	Форма.Элементы.ГруппаСКД.Видимость = 
		Форма.СпособФормирования = ПредопределенноеЗначение("Перечисление.СпособыФормированияСегментов.ПериодическиОбновлять");
		
	Форма.Элементы.Сформировать.Видимость = 
		Форма.СпособФормирования = ПредопределенноеЗначение("Перечисление.СпособыФормированияСегментов.ПериодическиОбновлять");
		
	Форма.Элементы.ДополнительныйРеквизит.Видимость = 
		Форма.ВидОтображения = ПредопределенноеЗначение("Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит");
		
	Форма.Элементы.ФормаПолигоны.Видимость = Форма.Объект.Владелец.ЗначениеМожноОтметитьНаКарте;
	
КонецПроцедуры // УстановитьВидимостьДоступность()

#КонецОбласти
