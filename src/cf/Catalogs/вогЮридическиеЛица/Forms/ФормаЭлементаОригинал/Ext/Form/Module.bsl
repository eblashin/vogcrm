
// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ОтключитьЗаполнениеПоИНН;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация");	
	РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
	
	УстановитьВидимостьРеквизитовКИ();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаполнитьВспомогательныеРеквизиты();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
	КонецЕсли;
	ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
	РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо = (ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
	//Доступные организации
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Организации");
		ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеОрганизации");
		вогУправлениеДоступом.ПрочитатьДоступныеОрганизацииОбъекта(ЭтотОбъект, Объект, ПараметрыОбъекта);
		
		//{[+](фрагмент добавлен), Виноградов Дмитрий 24.07.2018 9:24:06 ID
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Подразделения");
		ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
		вогУправлениеДоступом.ПрочитатьДоступныеПодразделенияОбъекта(ЭтотОбъект, Объект, ПараметрыОбъекта);
		//}Администратор 24.07.2018 9:24:06
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТорговыеТочкиСписок , "ТекущееЮрЛицо" , Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(КонтактныеЛицаСписок, "ТекущееЮрЛицо" , Объект.Ссылка);
	
	НастроитьРеквизиты(ЭтаФорма);
	//{[+](фрагмент добавлен), Виноградов Дмитрий 07.06.2018 11:28:15 ID
	УстановитьВидимостьРеквизитовСвидетельства();
	//}Администратор 07.06.2018 11:28:15
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//+Классификаторы
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	//Статус согласования
	ОбновитьДанныеСтатусаСогласования();	
	
	//Доступные организации
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Организации");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеОрганизации");
	вогУправлениеДоступом.ПрочитатьДоступныеОрганизацииОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыОбъекта);
	
	//{[+](фрагмент добавлен), Виноградов Дмитрий 24.07.2018 9:24:06 ID
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Подразделения");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
	вогУправлениеДоступом.ПрочитатьДоступныеПодразделенияОбъекта(ЭтотОбъект, Объект, ПараметрыОбъекта);
	//}Администратор 24.07.2018 9:24:06
	
	скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЗаписыватьБезПроверки") Тогда
		Возврат;
	КонецЕсли;
		
	//Поиск дублей
	Если Не ЗначениеЗаполнено(Объект.Ссылка) 
	  И вогОбщегоНазначенияКлиентСерверПовтИсп.ВыполнятьПоискДублейОбъекта(Объект.Ссылка) Тогда 
		СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(Объект);
		СписокКонтактов = вогОбщегоНазначенияКлиентСервер.ЗаполнитьСтруктуруКонтактовОбъекта(ЭтотОбъект);
		
		Если ЕстьДубли(Объект, СтруктураПоиска, СписокКонтактов) Тогда 
			МассивОписанийОбъектов = Новый Массив;
			МассивОписанийОбъектов.Добавить(
				Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта", 
					Объект, "Справочник.вогЮридическиеЛица", СтруктураПоиска, СписокКонтактов)
			);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("МассивОписанийОбъектов", МассивОписанийОбъектов);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
			ОткрытьФорму("ОбщаяФорма.вогФормаНайденныхДублей", ПараметрыФормы,,,,, ОписаниеОповещения);
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если РезультатЗакрытия.Результат = "Продолжить" Тогда
		//Обработка не требуется	
	ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
		Попытка 
			ВладелецФормы.ТекущаяСтрока = РезультатЗакрытия.Объект; 
		Исключение
			ФормаСписка = ПолучитьФорму("Справочник.вогЮридическиеЛица.ФормаСписка");
			ФормаСписка.Открыть();
			
			ФормаСписка.Элементы.Список.ТекущаяСтрока = РезультатЗакрытия.Объект;
			
		КонецПопытки;
		
		Модифицированность = Ложь;
		Закрыть();
		
		Возврат;
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	Записать(Новый Структура("ЗаписыватьБезПроверки", Истина));
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
		
	//Доступные организации
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Организации");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеОрганизации");
	вогУправлениеДоступом.ЗаписатьДоступныеОрганизацииОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыОбъекта);
	
	//{[+](фрагмент добавлен), Виноградов Дмитрий 24.07.2018 9:25:14 ID
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Подразделения");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
	вогУправлениеДоступом.ЗаписатьДоступныеПодразделенияОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыОбъекта);
	//}Администратор 24.07.2018 9:25:14
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//+Классификаторы
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТорговыеТочкиСписок , "ТекущееЮрЛицо" , Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(КонтактныеЛицаСписок, "ТекущееЮрЛицо" , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	//+вог
	Если ИмяСобытия = "Запись_БизнесПрцесса" 
	  И Параметр.Предмет = Объект.Ссылка Тогда
		ОбновитьДанныеСтатусаСогласования();
	
	КонецЕсли;
	//-вог
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы 

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.CRM_ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.CRM_ИНН;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Наименование) 
		ИЛИ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;

КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы 

&НаКлиенте
Процедура ОрганизационноПравоваяФормаПриИзменении(Элемент)
	ОрганизационноПравоваяФормаПриИзмененииСервер();
	//{[+](фрагмент добавлен), Виноградов Дмитрий 07.06.2018 11:28:35 ID
	УстановитьВидимостьРеквизитовСвидетельства();
	//}Администратор 07.06.2018 11:28:35
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(Объект.CRM_ИНН) Тогда
		// Если КПП формируется стандартным образом по ИНН, то для КПП берутся 
		// первые 4 цифры ИНН + 01001, например:
		// ИНН 7712563009
		// КПП 771201001
		ЭтоЮрЛицо = (ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания"));
		Если РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.CRM_ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
			Объект.CRM_КПП = Лев(Объект.CRM_ИНН, 4) + "01001";
		Иначе	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.CRM_ИНН");
			Объект.CRM_КПП = "";
		КонецЕсли;
	Иначе
		Объект.CRM_КПП = "";
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если ЗначениеЗаполнено(Объект.CRM_ИНН)
		И НЕ (ЗначениеЗаполнено(Объект.Наименование) 
			ИЛИ ЗначениеЗаполнено(Объект.НаименованиеПолное)) Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	ОтключитьЗаполнениеПоИНН = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьЗаполнениеПоИНН", 0.1, Истина);
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
		// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочкиСписокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//Связи
	вогУправлениеСвязями.УстановитьСвязиОбъекта(ВыбранноеЗначение, Объект.Ссылка);	
	Элемент.Обновить();
	
КонецПроцедуры

#Область СвязиОбъектов

&НаКлиенте
Процедура ТорговыеТочкиСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Элемент"   , Элемент);
	ПараметрыОповещения.Вставить("ИмяОбъекта", "Справочник.вогТорговыеТочки");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СвязанныеОбъектыПередНачаломДобавленияФрагмент", ЭтотОбъект, ПараметрыОповещения);	
	СвязанныеОбъектыПередНачаломДобавления(ОписаниеОповещения, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Элемент"   , Элемент);
	ПараметрыОповещения.Вставить("ИмяОбъекта", "Справочник.КонтактныеЛицаПартнеров");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СвязанныеОбъектыПередНачаломДобавленияФрагмент", ЭтотОбъект, ПараметрыОповещения);	
	СвязанныеОбъектыПередНачаломДобавления(ОписаниеОповещения, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеОбъектыПередНачаломДобавления(ВыполняемоеОповещение, Отказ)
	
	Отказ = Истина;
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
                             |Добавление связанных объектов возможно только после записи данных.
                             |Данные будут записаны.'");
		
		ПоказатьВопрос(ВыполняемоеОповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);	
	
КонецПроцедуры // СвязанныеОбъектыПередНачаломДобавленияФрагмент()

&НаКлиенте
Процедура СвязанныеОбъектыПередНачаломДобавленияФрагмент(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
	
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("Выбрать", НСтр("ru = 'Выбрать'"));
	СписокВариантов.Добавить("Создать", НСтр("ru = 'Создать'"));
	СписокВариантов.Добавить("Отмена" , НСтр("ru = 'Отмена'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СвязанныеОбъектыПередНачаломДобавленияЗавершение", ЭтотОбъект, Контекст);	
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Выберите действие...'"), СписокВариантов);	
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеОбъектыПередНачаломДобавленияЗавершение(Вариант, Контекст) Экспорт
	
	Если Вариант = Неопределено
	  ИЛИ Вариант = "Отмена" Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	Если Контекст.ИмяОбъекта = "Справочник.вогТорговыеТочки" Тогда
		ПараметрыФормы.Вставить("ЮрЛицоСвязи", Объект.Ссылка);	
		
	ИначеЕсли Контекст.ИмяОбъекта = "Справочник.КонтактныеЛицаПартнеров" Тогда
		ПараметрыФормы.Вставить("ОбъектСвязи", Объект.Ссылка);		
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Не определен вид объекта связи'");
		
	КонецЕсли;
	
	Если Вариант = "Создать" Тогда
		мИмяФормы = Контекст.ИмяОбъекта + ".ФормаОбъекта";
		
	Иначе	
		мИмяФормы = Контекст.ИмяОбъекта + ".ФормаВыбора";
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
		
	КонецЕсли;
	
	ОткрытьФорму(мИмяФормы,
		ПараметрыФормы, Контекст.Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СтатусСогласования

&НаКлиенте
Процедура СтатусСогласованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;			
	вогОбщегоНазначенияКлиент.ОбработкаНажатияСтатусаСогласования(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

#Область ПроцедурыПодсистемыСвойств

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);	
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОрганизационноПравоваяФормаПриИзмененииСервер()

	ЗаполнитьВспомогательныеРеквизиты();
	НастроитьРеквизиты(ЭтаФорма);

КонецПроцедуры // ОрганизационноПравоваяФормаПриИзмененииСервер()

&НаСервере
Процедура ЗаполнитьВспомогательныеРеквизиты()
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЮрФизЛицо");
	
	РеквизитыОрганизационноПравоваяФорма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОрганизационноПравоваяФорма, СтруктураРеквизитов);
	Если РеквизитыОрганизационноПравоваяФорма.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	Иначе	
		ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьВспомогательныеРеквизиты()

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьРеквизиты(Форма)

КонецПроцедуры // НастроитьРеквизиты()

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаСервере
Процедура УстановитьВидимостьРеквизитовКИ()
	
	СтруктураОтбора			= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.СправочниквогЮридическиеЛица, Ложь);
	флагВыводаГиперСсылки	= (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);

	Для Каждого СтрокаДопРеквизита Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Выводить = Истина;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			флаг_1 = НЕ (ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита] = "<адрес сайта не указан>");
		Иначе	
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]);
		КонецЕсли;	
					
// +CRM
		Для Каждого СтрокаДобавленногоРеквизита ИЗ ЭтотОбъект.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы Цикл
			Если СтрокаДобавленногоРеквизита.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(СтрокаДобавленногоРеквизита.Значение, СтрокаДопРеквизита.ИмяРеквизита) Тогда
				//+вог
				//СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить");
				СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить") ИЛИ (Не ЗначениеЗаполнено(СтрокаДопРеквизита.Представление) И Не РедактироватьДР);
				//-вог
				Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = (Выводить И ((СтрокаДопРеквизита.Выводить И НЕ СкрыватьПолеКИ) ИЛИ ((РедактироватьДР И НЕ СкрыватьПолеКИ) ИЛИ флаг_1)));
			КонецЕсли;
		КонецЦИкла;
// -CRM
		
		Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт Тогда
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= Новый Цвет();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= Новый Шрифт();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Истина;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "";
			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].Высота = 5;
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].МногострочныйРежим = Истина;
				КонецЕсли;
				Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
				ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора				= истина;
					Если СтрокаДопРеквизита.Вид.РедактированиеТолькоВДиалоге Тогда
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветФона				= WebЦвета.Кремовый;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ИмяРеквизита = Элементы[СтрокаДопРеквизита.ИмяРеквизита].Имя;
			АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
			Если ПустаяСтрока(АдресСайтаКомпании) Тогда
				ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.РедактироватьКонтактныеДанные.Видимость = флагВыводаГиперСсылки;
	
КонецПроцедуры

//{[+](фрагмент добавлен), Виноградов Дмитрий 07.06.2018 10:58:21 ID 000001938
&НаСервере
Процедура УстановитьВидимостьРеквизитовСвидетельства()
	
	ЗначениеВидимостиИОбязательности = ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	Элементы.ГруппаСвидетельство.Видимость = ЗначениеВидимостиИОбязательности;
	
КонецПроцедуры
//}Администратор 07.06.2018 10:58:21

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи(Элемент)
	CRM_УправлениеКонтактнойИнформациейКлиент.ОсновнойДляСвязиНажатие(ЭтотОбъект, Элемент);
КонецПроцедуры // Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи()

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
		// Если это адрес электронной почты, то надо проверить на коррректность заполнения.
		РезультатПроверки = CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПолучитьТипПроверитьЗаполнение(ЭтотОбъект, Элемент);
		Если НЕ РезультатПроверки = Неопределено И РезультатПроверки.КодОшибки<>0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	CRM_УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКонтактныеДанныеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ РедактироватьДР Тогда
		РедактироватьКонтактныеДанные = НСтр("ru = 'Скрыть дополнительные контактные данные'");
		РедактироватьДР = Истина;
	Иначе
		РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
		РедактироватьДР = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовКИ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзмененииАдресаЭлектроннойПочты(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомер(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьСМСНаНомер","");
		Телефон = ЭтотОбъект[ИмяРеквизита];
		Если ПустаяСтрока(Телефон) Тогда Возврат; КонецЕсли;
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Объект.Ссылка);
		Структура.Вставить("Телефон", ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Телефон));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьEmail(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьEmail","");
	
	АдресЭлектроннойПочты = ЭтотОбъект[ИмяРеквизита];

	Если НЕ ЗначениеЗаполнено(СокрЛП(АдресЭлектроннойПочты)) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	СтрРезультат = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(АдресЭлектроннойПочты);
	Если СтрРезультат.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрРезультат.Сообщение,,ИмяРеквизита);
		Возврат;
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.Добавить(Объект.Ссылка, СтрРезультат.АдресЭП);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
			
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПозвонитьНаНомер(Элемент)
	
	// +СофтФон
	сфпСофтФонПроКлиентПереопределяемый.сфпПодключаемый_ПозвонитьНаНомер(ЭтотОбъект, Объект);	
	// -СофтФон
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		Подключаемый_РедактироватьАдресСайтаКомпании(Элемент);
	Иначе
		Если Найти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", ЭтотОбъект), АдресСайтаКомпании);	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияБезДействия(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		АдресСайтаКомпании = "";
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводАдресаСайтаКомпанииЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, АдресСайтаКомпании, "Введите адрес сайта");
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура ВводАдресаСайтаКомпанииЗавершение(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
	Если АдресСайтаКомпании <> Неопределено Тогда
		Если ПустаяСтрока(АдресСайтаКомпании) Тогда
			ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
		Иначе	
			ЭтотОбъект[ИмяРеквизита] = АдресСайтаКомпании;
		КонецЕсли;	
			
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = АдресСайтаКомпании;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM
		
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресКомпании","");
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элементы[ИмяРеквизита], Неопределено, Ложь);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКарте(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОткрытьАдресНаИнтернетКарте","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(НайденныеСтроки[0].ЗначенияПолей);
	
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	СтруктураАдреса.Вставить("Представление", ЭтотОбъект[ИмяРеквизита]);
	
	СписокКарт = Новый СписокЗначений;
	СписокКарт.Добавить("GIS","Карта GIS",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	СписокКарт.Добавить("Google","Карта Google",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	СписокКарт.Добавить("Yandex","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокКарт, ТекущийЭлемент,);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение(Результат, СтруктураАдреса) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		СайтИнтернетКарты = Результат.Значение;
		CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочее(Элемент)
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьПрочее","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СтрокаПрочее = ЭтотОбъект[ИмяРеквизита];
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьПрочееЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, СтрокаПрочее, Строка(НайденныеСтроки[0].Вид),, Истина);
КонецПроцедуры // Подключаемый_РедактироватьПрочее

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочееЗавершение(СтрокаПрочее, ИмяРеквизита) Экспорт
	Если СтрокаПрочее <> Неопределено Тогда
		ЭтотОбъект[ИмяРеквизита] = СтрокаПрочее;
		
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = СтрокаПрочее;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM	
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьПрочее
// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		// Обработка ошибок
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
				|необходимо подключиться к Интернет-поддержке пользователей.
				|Подключиться сейчас?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "")
	
	ЭтоЮридическоеЛицо = (ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(Объект.CRM_ИНН);
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(Объект.CRM_ИНН);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	
	Если ЭтоЮридическоеЛицо Тогда
		Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И ЗначениеЗаполнено(РеквизитыКонтрагента.ЮридическийАдрес) Тогда
			ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ЮрАдресЮридическогоЛица, 
				РеквизитыКонтрагента.ЮридическийАдрес);
			УстановитьВидимостьРеквизитовКИ();
		КонецЕсли;
	Иначе		

	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") И ЗначениеЗаполнено(РеквизитыКонтрагента.Телефон) Тогда
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонЮридическогоЛица, 
			РеквизитыКонтрагента.Телефон);
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.ЗначенияПолей = СтруктураДанных.КонтактнаяИнформация;
	ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат <> Неопределено 
		И Результат <> КодВозвратаДиалога.Отмена Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключитьЗаполнениеПоИНН()

	ОтключитьЗаполнениеПоИНН = Неопределено;	

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(ТекстЗаполнения)

	Если ЗначениеЗаполнено(ТекстЗаполнения)
		И (СтрДлина(ТекстЗаполнения) = 10 ИЛИ СтрДлина(ТекстЗаполнения) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстЗаполнения) Тогда // Текст заполнения содержит ИНН.
	
		Объект.Наименование = "";
		Объект.CRM_ИНН = ТекстЗаполнения;
		ЮрФизЛицо  = ?(СтрДлина(ТекстЗаполнения) = 10,
			Перечисления.КомпанияЧастноеЛицо.Компания,
			Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
			
		ЗаполнитьРеквизитыПоИНННаСервере();
		
		ТекстЗаполнения = Неопределено;
		
	КонецЕсли;
		
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти

#Область УправлениеДоступом

#Область ДоступныеОрганизации

&НаКлиенте
Процедура ДоступныеОрганизацииЗапретМодификацииСостава(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;	
КонецПроцедуры

#КонецОбласти

#Область СтатусыСогласования

&НаСервере
Процедура ОбновитьДанныеСтатусаСогласования()

	ОписаниеСтатуса = вогОбщегоНазначения.ПолучитьОписаниеСтатусаСогласованияОбъекта(Объект.Ссылка);
	СтатусСогласования = ОписаниеСтатуса.Статус;
	РегистраторСтатуса = ОписаниеСтатуса.РегистраторСтатуса;

КонецПроцедуры

#КонецОбласти

#Область ПоискДублей

&НаСервереБезКонтекста
Функция ЕстьДубли(Знач Объект, Знач СтруктураПоиска, Знач СписокКонтактов, Знач ТочноеСоответствие = Ложь)
	
	МассивДублей = вогОбщегоНазначения.НайтиДубли(Объект, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие);
	Возврат МассивДублей.Количество() > 0;
	
КонецФункции // ЕстьДубли()
	
#КонецОбласти

#КонецОбласти

//+Классификаторы
#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
		
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)

	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_ТегиКлассификатора_Обновить()

#КонецОбласти
//-Классификаторы

#Область Подключаемый_МеханизмЗапускаБизнесПроцессов

&НаКлиенте
Процедура Подключаемый_ЗапускБизнесПроцесса(Команда)
	скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);
КонецПроцедуры // Подключаемый_ЗапускБизнесПроцесса()

#КонецОбласти

