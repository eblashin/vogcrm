
#Область Переменные

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ОтключитьЗаполнениеПоИНН;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;          
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 23.08.2019 task 577
	Если Параметры.ЗначенияЗаполнения.Свойство("Партнер")
		И ТипЗнч(Параметры.ЗначенияЗаполнения.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
		
		СтруктураОтбора = Новый Структура("ТипОтношений", Справочники.CRM_ТипыОтношений.КлиентДистрибьютора);
		НайденныеСтроки = Параметры.ЗначенияЗаполнения.Партнер.вогТипыОтношений.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ШаблонСообщения = НСтр("ru = 'Нельзя создавать юр. лицо у клиента с типом отношений %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Справочники.CRM_ТипыОтношений.КлиентДистрибьютора));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 23.08.2019
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация");
	РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
	
	УстановитьВидимостьРеквизитовКИ();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПоискКнопки = ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("РедактироватьСоставДополнительныхРеквизитов");
	
	Если НЕ ПоискКнопки = Неопределено Тогда
		ПоискКнопки.Видимость = Ложь;
	КонецЕсли;

	ЗаполнитьВспомогательныеРеквизиты();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
	КонецЕсли;
	ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
	РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо = (ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	//Доступные организации
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Организации");
		ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеОрганизации");
		вогУправлениеДоступом.ПрочитатьДоступныеОрганизацииОбъекта(ЭтотОбъект, Объект, ПараметрыОбъекта);
		
		//{[+](фрагмент добавлен), Виноградов Дмитрий 24.07.2018 9:24:06 ID
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Подразделения");
		ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
		вогУправлениеДоступом.ПрочитатьДоступныеПодразделенияОбъекта(ЭтотОбъект, Объект, ПараметрыОбъекта);
		//}Администратор 24.07.2018 9:24:06
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТорговыеТочкиСписок , "ТекущееЮрЛицо" , Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(КонтактныеЛицаСписок, "ТекущееЮрЛицо" , Объект.Ссылка);
	
	// ++ VOG Солодов В.В. 13.09.2019 
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(БанковкиеСчетаЮрЛица, "Ссылка", Объект.Ссылка);
	// До изменения
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(БанковкиеСчетаЮрЛица, "Владелец" , Объект.Партнер);
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(БанковкиеСчетаЮрЛица, "Ссылка" 	, Объект.Ссылка);
	// -- VOG Солодов В.В. 13.09.2019
	
	// ++ VOG Солодов В.В. 30.09.2019 task 703
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДоговорыКонтрагентов, "Владелец", Объект.Ссылка);
	// До изменения
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДоговорыКонтрагентов, "Владелец" , Объект.Партнер);
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДоговорыКонтрагентов, "Ссылка" 	, Объект.Ссылка);
	// -- VOG Солодов В.В. 30.09.2019
	
	НастроитьРеквизиты(ЭтаФорма);
	//{[+](фрагмент добавлен), Виноградов Дмитрий 07.06.2018 11:28:15 ID
	УстановитьВидимостьРеквизитовСвидетельства();
	//}Администратор 07.06.2018 11:28:15
	
	СкрытьРаскрытьВсеГруппы(Ложь);
	
	
	Если Параметры.Ключ.Пустая() Тогда
		// Процент заполнености карточки объекта
		ЗаполненностьОбъекта 							= вогКонтрольЗаполненностиРеквизитовОбъектов.СтруктураЗаполненостиОбъекта(Объект.Ссылка);
		Элементы.КартинкаПроцентЗаполнености.Картинка 	= ЗаполненностьОбъекта.Картинка;
		ПроцентЗаполнености 							= Строка(ЗаполненностьОбъекта.ПроцентЗаполненностиОбщий)+"%";
	КонецЕсли;
	
	//++ Подключаемые дополнительные команды
	вогУправлениеИнтерфейсомСервер.ПодключитьДополнительныеКоманды(ЭтаФорма, Элементы.ФормаГруппаДействия);
	//-- Подключаемые дополнительные команды
	
	//ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма, Элементы.КоманднаяПанельФормы);

	ПроверитьСвязьЮЛРЦ();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//Режим редактирования
		Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаПортретЮрЛица;
		
		//Менеджеры
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Менеджеры, "Владелец", Неопределено);
		
	КонецЕсли;
	
	// + Взаимодействие (Динамический список)
	// ++ VOG Ульянов И.В. 28.11.2019 task 941
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВзаимодействие, "ОбъектСвязи", Объект.Ссылка);
	// ++ VOG Ульянов И.В. 28.11.2019 task 941
	// - Взаимодействие (Динамический список)
	
	//++ Бей №424
	ЗаблокироватьФормуВСтатусеСогласован();
	//--
	
	// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
	вогОбщегоНазначенияКлиентСервер.УстановитьПодсказкуКнопкиОткрытьЗадачу(ЭтаФорма);
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//+Классификаторы
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	//Статус согласования
	ОбновитьДанныеСтатусаСогласования();	
	
	//Доступные организации
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Организации");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеОрганизации");
	вогУправлениеДоступом.ПрочитатьДоступныеОрганизацииОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыОбъекта);
	
	//{[+](фрагмент добавлен), Виноградов Дмитрий 24.07.2018 9:24:06 ID
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Подразделения");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
	вогУправлениеДоступом.ПрочитатьДоступныеПодразделенияОбъекта(ЭтотОбъект, Объект, ПараметрыОбъекта);
	//}Администратор 24.07.2018 9:24:06
	
	//скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	
	// Вывод информации Общая
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакет(Объект.Ссылка,ИнформацияОбъект,Метаданные.Справочники.вогЮридическиеЛица,ЭтаФорма,"КарточкаОбъекта");
	
	// Процент заполнености карточки объекта
	ЗаполненностьОбъекта 							= вогКонтрольЗаполненностиРеквизитовОбъектов.СтруктураЗаполненостиОбъекта(ТекущийОбъект.Ссылка);
	Элементы.КартинкаПроцентЗаполнености.Картинка 	= ЗаполненностьОбъекта.Картинка;
	ПроцентЗаполнености 							= Строка(ЗаполненностьОбъекта.ПроцентЗаполненностиОбщий)+"%";
	
	// Облако тегов
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги") Тогда
		Подключаемый_ОбновитьОблакоТегов();
	Иначе
		Элементы.ОблакоТегов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Выделить команду навигации при открытии формы объекта
	ВыделитьКомандуНавигацииПриОткрытииФормы();
	
	//Менеджеры
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Менеджеры, "Владелец", Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Менеджеры, "ТекущаяДата", 
		CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	
	//ID cards
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ListIDCards, "ОбъектСвязи", Объект.Ссылка);
	
	УстановитьВидимостьРеквизитаКлиент();
	
	// +++ VOG Кулаков П.Л. 26.10.2020 CRM-999
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласования(ЭтаФорма);
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ПроверяемыеРеквизиты.Добавить("УдалитьКлиент");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЗаписыватьБезПроверки") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		НайтиДубли(Отказ);
	КонецЕсли;
	
	Если ЮрЛицоРЦ Тогда
		Ключ = Объект.Наименование + Объект.ОрганизационноПравоваяФорма + Объект.CRM_ИНН;		
		СохранитьКлючВХранилище(Ключ, "ЮрЛицоРЦ", ЮрЛицоРЦ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	CRM_УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//Доступные организации
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Организации");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеОрганизации");
	вогУправлениеДоступом.ЗаписатьДоступныеОрганизацииОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыОбъекта);
	
	//{[+](фрагмент добавлен), Виноградов Дмитрий 24.07.2018 9:25:14 ID
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ИмяРеквизитаОбъекта", "Подразделения");
	ПараметрыОбъекта.Вставить("ИмяРеквизитаФормы"  , "ДоступныеПодразделения");
	вогУправлениеДоступом.ЗаписатьДоступныеПодразделенияОбъекта(ЭтотОбъект, ТекущийОбъект, ПараметрыОбъекта);
	//}Администратор 24.07.2018 9:25:14
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//+Классификаторы
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	//	CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	// ++ VOG Солодов В.В. 29.03.2019
	//скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	вогУправлениеИнтерфейсомСервер.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, Элементы.ФормаГруппаДействия);
	// -- VOG Солодов В.В. 29.03.2019
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТорговыеТочкиСписок , "ТекущееЮрЛицо" , Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(КонтактныеЛицаСписок, "ТекущееЮрЛицо" , Объект.Ссылка);
	
	// Вывод информации Общая
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакет(Объект.Ссылка,ИнформацияОбъект,Метаданные.Справочники.вогЮридическиеЛица,ЭтаФорма,"КарточкаОбъекта",Истина);
	
	ЗапретРедактированияРеквизитовОбъектовСлужебный.ЗаписатьИзмененияБлокированныхРеквизитов(ЭтаФорма);
	
	//Менеджеры
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Менеджеры, "Владелец", ТекущийОбъект.Ссылка);
	
	// ++ Тищенко В.В. 09.04.2019
	// Обновить список менеджеры после записи
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Менеджеры,"Владелец",Параметры.Ключ);
	Элементы.Менеджеры.Обновить();	
	// -- Тищенко В.В. 
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(БанковкиеСчетаЮрЛица, "Ссылка" , Объект.Ссылка);
	Элементы.БанковкиеСчетаЮрЛица.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	//+вог
	Если ИмяСобытия = "Запись_БизнесПрцесса" 
		И Параметр.Предмет = Объект.Ссылка Тогда
		ОбновитьДанныеСтатусаСогласования();
		
	КонецЕсли;
	//-вог
	
	// ++ VOG Ульянов И.В. 28.11.2019 task 941
	Если ИмяСобытия = "ОбновитьВиджет" Тогда
			ТекущиеДелаДокументооборотКлиент.ОбработкаОповещенияФормыТекущиеДела(
		ЭтаФорма, ИмяСобытия, Параметр, Источник);
	КонецЕсли;	
	// -- VOG Ульянов И.В. 28.11.2019 task 941	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ПодключемыеДополнительныеКоманды
//++ Подключаемые дополнительные команды
&НаКлиенте
Процедура Подключаемый_ОбработчикДополнительнойКоманды(Команда) Экспорт 
	
	// ++ Тищенко В.В. 04.04.2019
	 вогОбщегоНазначенияВызовСервера.РазблокироватьОбъектИзФормы(Объект.Ссылка,УникальныйИдентификатор);
	// -- Тищенко В.В. 
	
	// ++ VOG Солодов В.В. 29.03.2019
	//вогУправлениеИнтерфейсомКлиент.ОбработчикКомандыФормы(Команда, ЭтаФорма);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "скДанныеЗапуска")
		И ЭтаФорма.скДанныеЗапуска.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя)).Количество() > 0 Тогда
	
		скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);	
	Иначе
		вогУправлениеИнтерфейсомКлиент.ОбработчикКомандыФормы(Команда, ЭтаФорма);
	КонецЕсли;
	// -- VOG Солодов В.В. 29.03.2019
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКоманды(Значение, ДополнительноеЗначение) Экспорт 
	
	вогУправлениеИнтерфейсомКлиент.ВыполнитьКодКомандыНаКлиенте(Значение, ДополнительноеЗначение, ЭтаФорма, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКомандыСервер(Значение, ДополнительноеЗначение) Экспорт 
	
	вогУправлениеИнтерфейсомСервер.ВыполнитьКодКомандыНаСервере(Значение, ДополнительноеЗначение, ЭтотОбъект, ЭтаФорма, Объект);
	
КонецПроцедуры
//-- Подключаемые дополнительные команды
#КонецОбласти

// +++ VOG Кулаков П.Л. 26.10.2020 CRM-999
&НаКлиенте
Процедура СогласоватьЗадачу(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		УспешнаяЗапись = Записать();
		Если Не УспешнаяЗапись Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВидСогласования = Элементы[Команда.Имя].Заголовок;
	ПараметрыФормы = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("СогласоватьЗадачуЗавершение", ЭтотОбъект,Новый Структура("ВидСогласования",ВидСогласования));
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиРезультатВыполнения", 
			ПараметрыФормы, 
			ЭтотОбъект,
			,
			,
			, 
			ОписаниеОповещения,  
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 10.11.2020 CRM-999
&НаКлиенте
Процедура СогласоватьЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("Отказ") И Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	вогОбщегоНазначенияВызовСервера.СогласоватьЗадачи(ДополнительныеПараметры.ВидСогласования,Объект.Ссылка,Результат.РезультатВыполнения);
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласования(ЭтаФорма);

КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
&НаКлиенте
Процедура ОткрытьТекущуюЗадачу(Команда)
	
	ВыбраннаяЗадача = Неопределено;
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		ВыбраннаяЗадача = ТекущаяЗадача;
	Иначе 
		МассивЗадач = вогОбщегоНазначенияВызовСервера.ПолучитьМассивЗадач(Объект.Ссылка);
		Если МассивЗадач.Количество() > 0 Тогда
			// +++ VOG Кулаков П.Л. 21.12.2020 CRM-1102
			//СписокЗадач = Новый СписокЗначений;
			//СписокЗадач.ЗагрузитьЗначения(МассивЗадач);
			//ВыбраннаяЗадача = СписокЗадач.ВыбратьЭлемент("Выберите задачу");
			ПараметрыФормы = Новый Структура("Предмет",Объект.Ссылка);
			ОткрытьФорму("ОбщаяФорма.вогФормаСпискаЗадачПредмета",
					ПараметрыФормы,
					ЭтаФорма,
					,
					,
					,
					Новый ОписаниеОповещения("ОткрытьТекущуюЗадачуЗавершение", ЭтотОбъект),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			// --- VOG Кулаков П.Л.
		КонецЕсли;
	КонецЕсли;
	
	Если ВыбраннаяЗадача = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",ВыбраннаяЗадача);
	ПараметрыФормы.Вставить("НеОткрыватьПредмет",Истина);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиНезависимыйПроцесс",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				, Новый ОписаниеОповещения("ОткрытьТекущуюЗадачуЗавершение", ЭтотОбъект), 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
&НаКлиенте
Процедура ОткрытьТекущуюЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласования(ЭтаФорма);	
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.CRM_ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.CRM_ИНН;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Наименование) 
		ИЛИ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Процедура ДобавитьПолеКонтактнойИнформации(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюВидВыбран", ЭтотОбъект, ДополнительныеПараметры);
	
	СписокДоступныхВидов = СписокВидовДляДобавленияКонтактнойИнформации();
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДоступныхВидов, Элементы[Команда.Имя]);
	
КонецПроцедуры

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ссылка", Объект.Ссылка);
		
		СоответствиеРеквизитовКИ = Новый Соответствие;
		
		Для Каждого СтрокаДопРеквизита Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			
			Если СтрокаДопРеквизита.Выводить Тогда
				СоответствиеРеквизитовКИ.Вставить(СтрокаДопРеквизита.Вид, СтрокаДопРеквизита.ИмяРеквизита);
			КонецЕсли;
			
		КонецЦикла;	
		
		СтруктураПараметров.Вставить("СоответствиеРеквизитовКИ", СоответствиеРеквизитовКИ);
		
		ОповещениеПоЗавершению = Новый ОписаниеОповещения("Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтаФорма);
		
		ОткрытьФорму("ОбщаяФорма.вогФормаРазблокированиеРеквизитов",
			СтруктураПараметров,
			,
			,
			,
			, 
			ОповещениеПоЗавершению, 
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ДатаРедактирования")
		И Результат.Свойство("МассивРеквизитов")
		И ТипЗнч(Результат.МассивРеквизитов) = Тип("Массив") 
		И Результат.МассивРеквизитов.Количество() > 0 Тогда
		
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(
			ЭтаФорма, 
			Результат.МассивРеквизитов);
			
		ЗапретРедактированияРеквизитовОбъектовКлиент.ЗаполнитьСписокРазрешенныхКРедактированию(
			ЭтаФорма,
			Результат.МассивРеквизитов);
		
		ДатаРедактированияРеквизитов = Результат.ДатаРедактирования;
		
	КонецЕсли;
	
КонецПроцедуры

#Область НавигацияФормы

&НаКлиенте
Процедура ПереходСтраницы(Команда)
	// Сверунть группу Контакты
	//	СкрытьРаскрытьВсеГруппы(Истина);
	// Переход страницы
	ВыполнитьПереходСтраницы(Команда.Имя);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СформироватьОтчетСтурктураВзаимосвязи(Команда)
	СформироватьОтчетСтурктураВзаимосвязиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборТТ(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыФормыВыбора = Новый Структура;
	
	ПараметрыОтбора = Новый Структура;
	
	СписокСсылок = Новый СписокЗначений;
	СписокСсылок.ЗагрузитьЗначения(ПолучитьМассивТТ(Объект.Партнер, Объект.Ссылка));
	
	ПараметрыОтбора.Вставить("Ссылка", СписокСсылок);	
	
	ПараметрыФормыВыбора.Вставить("Отбор", 					ПараметрыОтбора);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", 	Ложь);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОткрытьВыборТТЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.вогТорговыеТочки.Форма.ФормаВыбора", 
		ПараметрыФормыВыбора, 
		ЭтотОбъект, 
		ЭтотОбъект.УникальныйИдентификатор,
		,
		,
		ОписаниеОповещенияОЗакрытии, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьВыборТТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Объект.Ссылка);
		
		УстановитьСвязиОбъекта(МассивОбъектов, Результат);
		
		Элементы.ТорговыеТочкиСписок.Обновить();	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерыВидВсе(Команда)
	
	СписокМенеджерыИзменитьНаСервере(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерыВидДействующие(Команда)
	
	СписокМенеджерыИзменитьНаСервере(Команда.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы 

&НаКлиенте
Процедура ОрганизационноПравоваяФормаПриИзменении(Элемент)
	ОрганизационноПравоваяФормаПриИзмененииСервер();
	//{[+](фрагмент добавлен), Виноградов Дмитрий 07.06.2018 11:28:35 ID
	УстановитьВидимостьРеквизитовСвидетельства();
	//}Администратор 07.06.2018 11:28:35
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(Объект.CRM_ИНН) Тогда
		// Если КПП формируется стандартным образом по ИНН, то для КПП берутся 
		// первые 4 цифры ИНН + 01001, например:
		// ИНН 7712563009
		// КПП 771201001
		ЭтоЮрЛицо = (ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания"));
		Если РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.CRM_ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
			Если ЭтоЮрЛицо Тогда
				Объект.CRM_КПП = Лев(Объект.CRM_ИНН, 4) + "01001";
			Иначе
				Объект.CRM_КПП = "";
			КонецЕсли;
		Иначе	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.CRM_ИНН");
			Объект.CRM_КПП = "";
		КонецЕсли;
	Иначе
		Объект.CRM_КПП = "";
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	Если ЗначениеЗаполнено(Объект.CRM_ИНН)
		И НЕ (ЗначениеЗаполнено(Объект.Наименование) 
		ИЛИ ЗначениеЗаполнено(Объект.НаименованиеПолное)) Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	ОтключитьЗаполнениеПоИНН = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьЗаполнениеПоИНН", 0.1, Истина);
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
КонецПроцедуры

&НаКлиенте
Процедура ТорговыеТочкиСписокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//Связи
	вогУправлениеСвязями.УстановитьСвязиОбъекта(ВыбранноеЗначение, Объект.Ссылка);	
	Элемент.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизационноПравоваяФормаПриИзмененииСервер()
	
	ЗаполнитьВспомогательныеРеквизиты();
	НастроитьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовСвидетельства()
	
	ЗначениеВидимостиИОбязательности 		= Объект.ОрганизационноПравоваяФорма.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
	Элементы.ГруппаСвидетельство.Видимость 	= ЗначениеВидимостиИОбязательности;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрЛицоРЦПриИзменении(Элемент)
	
	Если ЮрЛицоРЦ = Истина
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПроверитьСвязьЮЛРЦ(Истина);
		
	ИначеЕсли ЮрЛицоРЦ = Ложь Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЮрЛицоРЦПриИзмененииЗавершение", ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru = 'Связи с РЦ будут удалены. Продолжить?'");
		
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
	УстановитьВидимостьРеквизитаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрЛицоРЦПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ЮрЛицоРЦ = Ложь;
		Возврат;
	КонецЕсли;
	
	УдалитьСвязьСРЦ(Объект.Ссылка);
	
КонецПроцедуры

#Область СвязиОбъектов

&НаКлиенте
Процедура ТорговыеТочкиСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Элемент"   , Элемент);
	ПараметрыОповещения.Вставить("ИмяОбъекта", "Справочник.вогТорговыеТочки");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СвязанныеОбъектыПередНачаломДобавленияФрагмент", ЭтотОбъект, ПараметрыОповещения);	
	СвязанныеОбъектыПередНачаломДобавления(ОписаниеОповещения, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Элемент"   , Элемент);
	ПараметрыОповещения.Вставить("ИмяОбъекта", "Справочник.КонтактныеЛицаПартнеров");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СвязанныеОбъектыПередНачаломДобавленияФрагмент", ЭтотОбъект, ПараметрыОповещения);
	СвязанныеОбъектыПередНачаломДобавления(ОписаниеОповещения, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеОбъектыПередНачаломДобавления(ВыполняемоеОповещение, Отказ)
	
	Отказ = Истина;
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Добавление связанных объектов возможно только после записи данных.
		|Данные будут записаны.'");
		
		ПоказатьВопрос(ВыполняемоеОповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Неопределено);	
	
КонецПроцедуры // СвязанныеОбъектыПередНачаломДобавленияФрагмент()

&НаКлиенте
Процедура СвязанныеОбъектыПередНачаломДобавленияФрагмент(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;	
	
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("Выбрать", НСтр("ru = 'Выбрать'"));
	СписокВариантов.Добавить("Создать", НСтр("ru = 'Создать'"));
	СписокВариантов.Добавить("Отмена" , НСтр("ru = 'Отмена'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СвязанныеОбъектыПередНачаломДобавленияЗавершение", ЭтотОбъект, Контекст);	
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Выберите действие...'"), СписокВариантов);	
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеОбъектыПередНачаломДобавленияЗавершение(Вариант, Контекст) Экспорт
	
	Если Вариант = Неопределено
		ИЛИ Вариант = "Отмена" Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	Если Контекст.ИмяОбъекта = "Справочник.вогТорговыеТочки" Тогда
		ПараметрыФормы.Вставить("ЮрЛицоСвязи", Объект.Ссылка);	
		
	ИначеЕсли Контекст.ИмяОбъекта = "Справочник.КонтактныеЛицаПартнеров" Тогда
		ПараметрыФормы.Вставить("ОбъектСвязи", Объект.Ссылка);		
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Не определен вид объекта связи'");
		
	КонецЕсли;
	
	Если Вариант = "Создать" Тогда
		мИмяФормы = Контекст.ИмяОбъекта + ".ФормаОбъекта";
		
	Иначе	
		мИмяФормы = Контекст.ИмяОбъекта + ".ФормаВыбора";
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
		
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 27.05.2019 task 325
	ПараметрыФормы.Вставить("ОграничитьВыбор", 	Истина);
	// -- VOG Солодов В.В. 27.05.2019
	
	ОткрытьФорму(мИмяФормы,
	ПараметрыФормы, Контекст.Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СтатусСогласования

&НаКлиенте
Процедура СтатусСогласованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;			
	вогОбщегоНазначенияКлиент.ОбработкаНажатияСтатусаСогласования(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Тег

&НаКлиенте
Процедура ТегПриИзменении(Элемент)
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтакты

&НаКлиенте
Процедура КонтактныеЛицаСписокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	//Связи
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьСвязиОбъекта(ВыбранноеЗначение, Объект.Ссылка);
	КонецЕсли;
	
	Элемент.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБанковскиеСчета

&НаКлиенте
Процедура БанковкиеСчетаЮрЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Элемент справочника еще не записан.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Отказ = Истина;
	ЗначениеЗаполненения = Новый Структура;
	// { VOG RMV 2019-01-21 изменение №2572
	// Принято решение создавать банковские счета с подчинением юр.лицу
	//ЗначениеЗаполненения.Вставить("Владелец", Объект.Партнер);
	ЗначениеЗаполненения.Вставить("Владелец", Объект.Ссылка);
	// } VOG RMV 2019-01-21 изменение №2572
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначениеЗаполненения);

	Оповещение = Новый ОписаниеОповещения("ЗавершениеБанквоскиеСчета",ЭтотОбъект);
	ОткрытьФорму("Справочник.БанковскиеСчета.Форма.ФормаЭлемента",ПараметрыФормы,ЭтаФорма ,УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМенеджеры

&НаКлиенте
Процедура МенеджерыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ 			= Истина;
	ПараметрыФормы 	= Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец", Объект.Ссылка));
	
	ОткрытьФорму("РегистрСведений.вогМенеджерыОбъектов.Форма.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыIDCards

&НаКлиенте
Процедура ListIDCardsПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ 					= Истина;
	ПараметрыЗаполненения 	= Новый Структура("ОбъектСвязи,Партнер",Объект.Ссылка,Объект.Партнер);
	ПараметрыФормы 			= Новый Структура("ЗначенияЗаполнения",ПараметрыЗаполненения);
	ОткрытьФорму("РегистрСведений.вогIDCards.ФормаЗаписи",ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыВзаимодействие

&НаКлиенте
Процедура СписокВзаимодействиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// ++ VOG Ульянов И.В. 28.11.2019 task 941	
	//ТекущиеДанные = Элементы.СписокВзаимодействие.ТекущиеДанные;
	//
	//Если ТекущиеДанные <> Неопределено Тогда
	//	ОткрытьЗначение(ТекущиеДанные.Ссылка);
	//КонецЕсли;
	// ++ VOG Ульянов И.В. 28.11.2019 task 941
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

#Область ПроцедурыПодсистемыСвойств

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);	
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОсновынеПроцедурыИФункции

#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементов

&НаСервере
Процедура ЗаполнитьВспомогательныеРеквизиты()
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЮрФизЛицо");
	
	РеквизитыОрганизационноПравоваяФорма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОрганизационноПравоваяФорма, СтруктураРеквизитов);
	Если РеквизитыОрганизационноПравоваяФорма.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
		Или РеквизитыОрганизационноПравоваяФорма.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		
		ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		
		Если ТипЗнч(РеквизитыПроверкиКонтрагентов) = Тип("Структура")
			И РеквизитыПроверкиКонтрагентов.Свойство("ЭтоЮридическоеЛицо") Тогда
			
			РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		
		Если ТипЗнч(РеквизитыПроверкиКонтрагентов) = Тип("Структура")
			И РеквизитыПроверкиКонтрагентов.Свойство("ЭтоЮридическоеЛицо") Тогда
			
			РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо = Истина;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьРеквизиты(Форма)
	
КонецПроцедуры // НастроитьРеквизиты()

&НаСервере
Процедура НастроитьВидимостьСворачиваемыхГрупп()
	
	НастроитьВидимостьСворачиваемойГруппы("Портрет");
	НастроитьВидимостьСворачиваемойГруппы("КонтактнаяИнформация");
	НастроитьВидимостьСворачиваемойГруппы("Менеджеры");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемойГруппы(ИмяГруппы)
	
	ЭлементСворачиваяГруппа = Элементы["СворачиваемаяГруппа" + ИмяГруппы];
	Элементы["ГруппаЗаголовок" + ИмяГруппы].Видимость = ЕстьВидимыеЭлементыВГруппе(ЭлементСворачиваяГруппа);
	
КонецПроцедуры

&НаСервере
Функция ЕстьВидимыеЭлементыВГруппе(Элемент)
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Если ПодчиненныйЭлемент.Видимость 
				И ЕстьВидимыеЭлементыВГруппе(ПодчиненныйЭлемент) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПодчиненныйЭлемент.Видимость Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	ИмяГруппыСвернутьРазвернуть = Элемент.Имя;
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияОткрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияЗакрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ЗаголовокГруппы", "");
	ИзменитьСвернутостьГруппы(ИмяГруппыСвернутьРазвернуть);
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы",0.0001,Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть = Неопределено)
	Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость, Не Свернуть);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Свернуть);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Не Свернуть);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	Если Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяГруппыСвернутьРазвернуть];
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазвернутьСворачиваемуюГруппу(ИмяГруппы)
	ГруппаРодитель  = Элементы[ИмяГруппы].Родитель;
	Если ГруппаРодитель = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	ИмяГруппыРодителя =ГруппаРодитель.Имя;
	
	Если СтрНайти(ИмяГруппыРодителя, "СворачиваемаяГруппа") = 0 Тогда
		РазвернутьСворачиваемуюГруппу(ИмяГруппыРодителя);
	Иначе
		ИмяГруппыРодителя = СтрЗаменить(ИмяГруппыРодителя, "СворачиваемаяГруппа", "");
		ИзменитьСвернутостьГруппы(ИмяГруппыРодителя, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СкрытьРаскрытьВсеГруппы(Свернуть = Неопределено)
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	
	Для Каждого ИмяГруппы из ИменаСворачиваемыхГрупп Цикл
		
		ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИменаСворачиваемыхГрупп()
	
	ИменаСворачиваемыхГрупп = Новый Массив;
	
	ИменаСворачиваемыхГрупп.Добавить("Портрет");
	ИменаСворачиваемыхГрупп.Добавить("КонтактнаяИнформация");
	
	Возврат ИменаСворачиваемыхГрупп;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьРеквизитаКлиент() // солодов
	
	Элементы.Партнер.Видимость = Не ЮрЛицоРЦ;
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

&НаСервере
Процедура УстановитьВидимостьРеквизитовКИ()
	
	СтруктураОтбора			= Новый Структура("Родитель, Выводить", Справочники.ВидыКонтактнойИнформации.СправочниквогЮридическиеЛица, Ложь);
	флагВыводаГиперСсылки	= (ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() > 0);
	
	Для Каждого СтрокаДопРеквизита Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если НЕ СтрокаДопРеквизита.Выводить Тогда Продолжить; КонецЕсли;
		
		Выводить = Истина;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			флаг_1 = НЕ (ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита] = "<адрес сайта не указан>");
		Иначе	
			флаг_1 = ЗначениеЗаполнено(ЭтотОбъект[СтрокаДопРеквизита.ИмяРеквизита]);
		КонецЕсли;	
		
		// +CRM
		Для Каждого СтрокаДобавленногоРеквизита ИЗ ЭтотОбъект.ПараметрыКонтактнойИнформации.ДобавленныеЭлементы Цикл
			Если СтрокаДобавленногоРеквизита.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(СтрокаДобавленногоРеквизита.Значение, СтрокаДопРеквизита.ИмяРеквизита) Тогда
				//+вог
				//СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить");
				СкрыватьПолеКИ = (СтрокаДопРеквизита.Комментарий = "Не выводить") ИЛИ (Не ЗначениеЗаполнено(СтрокаДопРеквизита.Представление) И Не РедактироватьДР);
				//-вог
				Элементы[СтрокаДобавленногоРеквизита.Значение].Видимость = (Выводить И ((СтрокаДопРеквизита.Выводить И НЕ СкрыватьПолеКИ) ИЛИ ((РедактироватьДР И НЕ СкрыватьПолеКИ) ИЛИ флаг_1)));
			КонецЕсли;
		КонецЦИкла;
		// -CRM
		
		Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт Тогда
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветТекстаЗаголовка	= Новый Цвет();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].ШрифтЗаголовка		= Новый Шрифт();
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОчистки			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора			= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаОткрытия		= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаСпискаВыбора	= Неопределено;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Истина;
			Элементы[СтрокаДопРеквизита.ИмяРеквизита].Подсказка				= "";
			Если Элементы[СтрокаДопРеквизита.ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
				Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].Высота = 5;
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].МногострочныйРежим = Истина;
				КонецЕсли;
				Если (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес)
					ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
					ИЛИ (СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.Факс) Тогда
					Элементы[СтрокаДопРеквизита.ИмяРеквизита].КнопкаВыбора				= истина;
					// ++ VOG Солодов В.В. 02.03.2020 CRM-196
					Если СтрокаДопРеквизита.Вид.ВидРедактирования = "Диалог" Тогда
					// До изменения
					//Если СтрокаДопРеквизита.Вид.РедактированиеТолькоВДиалоге Тогда
					// -- VOG Солодов В.В. 02.03.2020
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].РедактированиеТекста	= Ложь;
						Элементы[СтрокаДопРеквизита.ИмяРеквизита].ЦветФона				= WebЦвета.Кремовый;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДопРеквизита.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			ИмяРеквизита = Элементы[СтрокаДопРеквизита.ИмяРеквизита].Имя;
			АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
			Если ПустаяСтрока(АдресСайтаКомпании) Тогда
				ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.РедактироватьКонтактныеДанные.Видимость = флагВыводаГиперСсылки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи(Элемент)
	
	//START Кайдашов 12/09/19 bugs 676	
	Если не ТолькоПросмотр тогда
		CRM_УправлениеКонтактнойИнформациейКлиент.ОсновнойДляСвязиНажатие(ЭтотОбъект, Элемент);
	КонецЕсли;
	//END Кайдашов	
	
КонецПроцедуры // Подключаемый_КонтактнаяИнформацияОсновнойДляСвязи()

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	//START Кайдашов 12/09/19 bugs 676	
	Если не ТолькоПросмотр тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
			МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
			CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
			// Если это адрес электронной почты, то надо проверить на коррректность заполнения.
			РезультатПроверки = CRM_УправлениеКонтактнойИнформациейКлиент.CRM_ПолучитьТипПроверитьЗаполнение(ЭтотОбъект, Элемент);
			Если НЕ РезультатПроверки = Неопределено И РезультатПроверки.КодОшибки<>0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//END Кайдашов	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//START Кайдашов 12/09/19 bugs 676	
	Если не ТолькоПросмотр тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
			МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
			МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
		КонецЕсли;
	КонецЕсли;
	//END Кайдашов	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	//START Кайдашов 12/09/19 bugs 676	
	Если не ТолькоПросмотр тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
			МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("CRM_УправлениеКонтактнойИнформациейКлиент");
			МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
		КонецЕсли;
	КонецЕсли;
	//END Кайдашов	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	//START Кайдашов 12/09/19 bugs 676	
	Если не ТолькоПросмотр тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
			МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
			МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
	//END Кайдашов	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда) Экспорт
	//START Кайдашов 12/09/19 bugs 676	
	Если не ТолькоПросмотр тогда
		CRM_УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	КонецЕсли;
	//END Кайдашов	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	//START Кайдашов 12/09/19 bugs 676	
	Если не ТолькоПросмотр тогда
		CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	КонецЕсли;
	//END Кайдашов	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьКонтактныеДанныеНажатие(Элемент, СтандартнаяОбработка)
	
	//START Кайдашов 12/09/19 bugs 676	
	Если не ТолькоПросмотр тогда
		СтандартнаяОбработка = Ложь;
		
		Если НЕ РедактироватьДР Тогда
			РедактироватьКонтактныеДанные = НСтр("ru = 'Скрыть дополнительные контактные данные'");
			РедактироватьДР = Истина;
		Иначе
			РедактироватьКонтактныеДанные = НСтр("ru = 'Ввести дополнительную контактную информацию'");
			РедактироватьДР = Ложь;
		КонецЕсли;
		
		УстановитьВидимостьРеквизитовКИ();
	КонецЕсли;
	//END Кайдашов	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзмененииАдресаЭлектроннойПочты(Элемент)
	
	//START Кайдашов 12/09/19 bugs 676	
	Если не ТолькоПросмотр тогда
		РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
		Если РезультатПроверки.КодОшибки<>0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
		КонецЕсли;
	КонецЕсли;
	//END Кайдашов	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьСМСНаНомер(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьСМСНаНомер","");
		Телефон = ЭтотОбъект[ИмяРеквизита];
		Если ПустаяСтрока(Телефон) Тогда Возврат; КонецЕсли;
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Объект.Ссылка);
		Структура.Вставить("Телефон", ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Телефон));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьEmail(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо записать элемент'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОтправитьEmail","");
	
	АдресЭлектроннойПочты = ЭтотОбъект[ИмяРеквизита];
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(АдресЭлектроннойПочты)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрРезультат = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(АдресЭлектроннойПочты);
	Если СтрРезультат.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрРезультат.Сообщение,,ИмяРеквизита);
		Возврат;
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.Добавить(Объект.Ссылка, СтрРезультат.АдресЭП);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
	
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПозвонитьНаНомер(Элемент)
	
	// +СофтФон
	сфпСофтФонПроКлиентПереопределяемый.сфпПодключаемый_ПозвонитьНаНомер(ЭтотОбъект, Объект);	
	// -СофтФон
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатиеАдресаСайтаКомпании(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		Подключаемый_РедактироватьАдресСайтаКомпании(Элемент);
	Иначе
		Если Найти(АдресСайтаКомпании, "://") = 0 Тогда
			АдресСайтаКомпании = "http://" + АдресСайтаКомпании;
		КонецЕсли;	
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", ЭтотОбъект), АдресСайтаКомпании);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияБезДействия(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресСайтаКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресСайтаКомпании","");
	АдресСайтаКомпании = ЭтотОбъект[ИмяРеквизита];
	Если АдресСайтаКомпании = "<адрес сайта не указан>" Тогда
		АдресСайтаКомпании = "";
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводАдресаСайтаКомпанииЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, АдресСайтаКомпании, "Введите адрес сайта");
	
КонецПроцедуры // Подключаемый_РедактироватьАдресСайтаКомпании

&НаКлиенте
Процедура ВводАдресаСайтаКомпанииЗавершение(АдресСайтаКомпании, ИмяРеквизита) Экспорт
	
	Если АдресСайтаКомпании <> Неопределено Тогда
		Если ПустаяСтрока(АдресСайтаКомпании) Тогда
			ЭтотОбъект[ИмяРеквизита] = "<адрес сайта не указан>";
		Иначе	
			ЭтотОбъект[ИмяРеквизита] = АдресСайтаКомпании;
		КонецЕсли;	
		
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = АдресСайтаКомпании;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM
		
	КонецЕсли;	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_РедактироватьАдресКомпании(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьАдресКомпании","");
	Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элементы[ИмяРеквизита], Неопределено, Ложь);
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКарте(Элемент)
	
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ОткрытьАдресНаИнтернетКарте","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(НайденныеСтроки[0].ЗначенияПолей);
	
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	СтруктураАдреса.Вставить("Представление", ЭтотОбъект[ИмяРеквизита]);
	
	СписокКарт = Новый СписокЗначений;
	// ++ Харченко Д.И. №  - 26.09.2018 / 
	//СписокКарт.Добавить("GIS","Карта GIS",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	//СписокКарт.Добавить("Google","Карта Google",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	//СписокКарт.Добавить("Yandex","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	СписокКарт.Добавить("вогГеокодирование","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
	//ПоказатьВыборИзСписка(ОписаниеОповещения, СписокКарт, ТекущийЭлемент,);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокКарт.Получить(0)); 
	// -- Харченко Д.И. №  - 26.09.2018
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение(Результат, СтруктураАдреса) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		СайтИнтернетКарты = Результат.Значение;
		CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьАдресКомпании

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочее(Элемент)
	ИмяРеквизита = СтрЗаменить(ТекущийЭлемент.Имя, "Команда","");
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "РедактироватьПрочее","");
	НайденныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	СтрокаПрочее = ЭтотОбъект[ИмяРеквизита];
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_РедактироватьПрочееЗавершение", ЭтотОбъект, ИмяРеквизита);
	ПоказатьВводСтроки(ОписаниеОповещения, СтрокаПрочее, Строка(НайденныеСтроки[0].Вид),, Истина);
КонецПроцедуры // Подключаемый_РедактироватьПрочее

&НаКлиенте
Процедура Подключаемый_РедактироватьПрочееЗавершение(СтрокаПрочее, ИмяРеквизита) Экспорт
	Если СтрокаПрочее <> Неопределено Тогда
		ЭтотОбъект[ИмяРеквизита] = СтрокаПрочее;
		
		// +CRM
		ТекущийЭлементКонтактнойИнформации = Элементы[ИмяРеквизита];
		ТекущийЭлементКонтактнойИнформации.Заголовок = СтрокаПрочее;
		CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, ТекущийЭлементКонтактнойИнформации);
		Модифицированность = Истина;
		// -CRM	
		
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_РедактироватьПрочее

// Начало Добавление контактной информации

&НаСервере
Функция СписокВидовДляДобавленияКонтактнойИнформации()
	
	Если СвойстваВидовКонтактнойИнформацииИнициализирован <> Истина Тогда
		ПрочитатьСвойстваВидовКонтактнойИнформацииЮрЛица();
	КонецЕсли; 
	
	СписокДоступныхВидов = Новый СписокЗначений;
	Отбор = Новый Структура("Вид");
	Для Каждого СтрокаТаблицы Из ЭтаФорма.СвойстваВидовКонтактнойИнформации Цикл
		Отбор.Вид = СтрокаТаблицы.Вид;
		Если СтрокаТаблицы.РазрешитьВводНесколькихЗначений Или Объект.КонтактнаяИнформация.НайтиСтроки(Отбор).Количество() = 0 И СтрокаТаблицы.Вид.CRM_Основной Тогда
			СписокДоступныхВидов.Добавить(СтрокаТаблицы.Вид, СтрокаТаблицы.ПредставлениеВида);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДоступныхВидов;
	
КонецФункции

&НаСервере
Процедура ПрочитатьСвойстваВидовКонтактнойИнформацииЮрЛица()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПорядокТиповКИ.Тип,
	|	ПорядокТиповКИ.Порядок
	|ПОМЕСТИТЬ втПорядокТипов
	|ИЗ
	|	&ПорядокТиповКИ КАК ПорядокТиповКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ПРЕДСТАВЛЕНИЕ(ВидыКонтактнойИнформации.Ссылка) КАК ПредставлениеВида,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ЕСТЬNULL(НастройкиВидовКонтактнойИнформации.ВыводитьВФормеВсегда, ЛОЖЬ) КАК ВыводитьВФормеВсегда,
	|	ВидыКонтактнойИнформации.РазрешитьВводНесколькихЗначений КАК РазрешитьВводНесколькихЗначений,
	|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение,
	|	ВидыКонтактнойИнформации.ПроверятьКорректность,
	// ++ VOG Солодов В.В. 02.03.2020 CRM-196
	|	ВидыКонтактнойИнформации.ВидРедактирования
	// До изменения
	//|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге
	// -- VOG Солодов В.В. 02.03.2020
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокТипов КАК втПорядокТипов
	|		ПО ВидыКонтактнойИнформации.Тип = втПорядокТипов.Тип
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВидовКонтактнойИнформации КАК НастройкиВидовКонтактнойИнформации
	|		ПО ВидыКонтактнойИнформации.Ссылка = НастройкиВидовКонтактнойИнформации.Вид
	|ГДЕ
	|	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	|	И ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|
	|УПОРЯДОЧИТЬ ПО
	|	втПорядокТипов.Порядок,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания");
	
	Запрос.УстановитьПараметр("ПорядокТиповКИ", УправлениеКонтактнойИнформацией.ПорядокТиповКИ());
	Запрос.УстановитьПараметр("ГруппаВидовКИ", Справочники.ВидыКонтактнойИнформации.СправочниквогЮридическиеЛица);
	
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
	СвойстваВидовКонтактнойИнформации.Загрузить(ТаблицаСвойств);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюВидВыбран(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Отбор = Новый Структура("Вид", ВыбранныйЭлемент.Значение);
	
	НайденныеСтроки = Форма.СвойстваВидовКонтактнойИнформации.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СвойстваВида = НайденныеСтроки[0];
	
	Если СвойстваВида.ВыводитьВФормеВсегда = Ложь Тогда
		
		ДополнительныеПараметры.Вставить("ДобавляемыйВид", ВыбранныйЭлемент.Значение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКонтактнуюИнформациюВопросЗадан", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = СтрШаблон(НСтр("ru='Добавить возможность ввода вида контактной информации ""%1""?'"), ВыбранныйЭлемент.Значение);
		ЗаголовокВопроса = НСтр("ru='Подтверждение добавления'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ЗаголовокВопроса);
		
	Иначе
		
		Форма.ДобавитьКонтактнуюИнформациюСервер(ВыбранныйЭлемент.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь)
	
	КоличествоЭлементовКоллекции = Объект.КонтактнаяИнформация.Количество();
	ИндексВставки = КоличествоЭлементовКоллекции;
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		ТекущийИндекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если Объект.КонтактнаяИнформация[ТекущийИндекс].Вид = ДобавляемыйВид Тогда
			ИндексВставки = ТекущийИндекс+1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКИ = Объект.КонтактнаяИнформация.Вставить(ИндексВставки);
	ДанныеКИ.Вид = ДобавляемыйВид;
	ДанныеКИ.Тип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемыйВид, "Тип");
	
	Результат = Новый Структура("ДобавляемыйВид", ДобавляемыйВид);
	CRM_УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактнуюИнформациюВопросЗадан(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКонтактнуюИнформациюСервер(ДополнительныеПараметры.ДобавляемыйВид, Истина);
	
КонецПроцедуры

// Конец Добавление контактной информации

#КонецОбласти 

#Область РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН()
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		// Обработка ошибок
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
			|необходимо подключиться к Интернет-поддержке пользователей.
			|Подключиться сейчас?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	ИначеЕсли ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.Компания") Тогда
		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(ОписаниеОшибки = "")
	
	ЭтоЮридическоеЛицо = (ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания);
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(Объект.CRM_ИНН);
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(Объект.CRM_ИНН);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	
	Если ЭтоЮридическоеЛицо Тогда
		Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") И ЗначениеЗаполнено(РеквизитыКонтрагента.ЮридическийАдрес) Тогда
			ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ЮрАдресЮридическогоЛица, 
			РеквизитыКонтрагента.ЮридическийАдрес);
			УстановитьВидимостьРеквизитовКИ();
		КонецЕсли;
	Иначе		
		
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") И ЗначениеЗаполнено(РеквизитыКонтрагента.Телефон) Тогда
		ЗаполнитьЭлементКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.ТелефонЮридическогоЛица, 
		РеквизитыКонтрагента.Телефон);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	// ++ VOG Солодов В.В. 05.02.2021 DEV-100
	ДанныеСтроки.Значение = СтруктураДанных.КонтактнаяИнформация;
	// До изменения
	//ДанныеСтроки.ЗначенияПолей = СтруктураДанных.КонтактнаяИнформация;
	// -- VOG Солодов В.В. 05.02.2021 DEV-100
	ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект);
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено 
		И Результат <> КодВозвратаДиалога.Отмена Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключитьЗаполнениеПоИНН()
	
	ОтключитьЗаполнениеПоИНН = Неопределено;	
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(ТекстЗаполнения)
	
	Если ЗначениеЗаполнено(ТекстЗаполнения)
		И (СтрДлина(ТекстЗаполнения) = 10 ИЛИ СтрДлина(ТекстЗаполнения) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстЗаполнения) Тогда // Текст заполнения содержит ИНН.
		
		Объект.Наименование = "";
		Объект.CRM_ИНН = ТекстЗаполнения;
		ЮрФизЛицо  = ?(СтрДлина(ТекстЗаполнения) = 10,
		Перечисления.КомпанияЧастноеЛицо.Компания,
		Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
		
		ЗаполнитьРеквизитыПоИНННаСервере();
		
		ТекстЗаполнения = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НавигацияФормы

&НаКлиенте
Процедура ВыполнитьПереходСтраницы(ИмяКоманды)
	
	Попытка
		// Выделить кнопку перехода
		Для каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
			Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
				ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
				ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
			Иначе
				ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
				ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
			КонецЕсли;
		КонецЦикла;
		// Переход страницы
		Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы[ИмяКоманды];
		
		// ++ VOG Ульянов И.В. 28.11.2019 task 941
		Если ИмяКоманды = "СтраницаВзаимодействие" Тогда						
			ЗаполнитьВиджетыНаВкладке();			
		КонецЕсли;	
		// -- VOG Ульянов И.В. 28.11.2019 task 941		
		
		Если Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя = "СтраницаСтруктураВзаимосвязи" Тогда
			ДанныеКлиента 	= Истина; КонтактнаяИнформация 	= Истина; КонтактныеЛицаОтч 		= Истина;
			ЮридическиеЛица = Истина; ТорговыеТочки 		= Истина; РаспределительныйЦентр 	= Истина;
			СформироватьОтчетСтурктураВзаимосвязиСервер();
		КонецЕсли;
		
	Исключение
		ТекстСообщения 	= НСтр("ru = 'Не удалось перейти на страницу %1'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ИмяКоманды));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьКомандуНавигацииПриОткрытииФормы()
	
	Для каждого ЭлементКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
		Если ЭлементКоманды.ИмяКоманды 	= Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя Тогда
			ЭлементКоманды.ЦветТекста 	= Новый Цвет(128,0,128);
			ЭлементКоманды.Шрифт 		= Новый Шрифт(,10,Ложь,,Истина);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиКоманда(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	//Для каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
	//	Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
	//		ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
	//		ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
	//	Иначе
	//		ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
	//		ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
	//	КонецЕсли;
	//КонецЦикла;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Команда.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента)
	
	Если ИмяЭлемента = "ГиперссылкаПерейтиФайлы"
		ИЛИ ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
		Если вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка) Тогда
			ФормаИмя = "ОбщаяФорма.вогФормаУправленияПрисоединеннымиФайлами";
			ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Присоединенные файлы'"))
		Иначе	
			ФормаИмя = "ОбщаяФорма.ПрисоединенныеФайлы";
		КонецЕсли;
		
		ТипыФайлов = Новый Массив;
		Если ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда
			ТипыФайлов.Добавить(ПредопределенноеЗначение("Перечисление.вогТипыПрисоединенныхФайлов.Изображение"));
			ПараметрыФормы.Вставить("ТипыФайлов", ТипыФайлов);
			
		КонецЕсли;
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", ФормаИмя);
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	КонецЕсли;
	
	Если Не ПараметрыПереходаПоГиперссылке.Свойство("РежимОткрытияОкнаФормы") Тогда
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	Возврат ПараметрыПереходаПоГиперссылке
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информции возможен только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
	ПараметрыПереходаПоГиперссылке.ПараметрыФормы, , ЭтаФорма.УникальныйИдентификатор, , , ,
	ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыСогласования

&НаСервере
Процедура ОбновитьДанныеСтатусаСогласования()
	
	ОписаниеСтатуса = вогОбщегоНазначения.ПолучитьОписаниеСтатусаСогласованияОбъекта(Объект.Ссылка);
	СтатусСогласования = ОписаниеСтатуса.Статус;
	РегистраторСтатуса = ОписаниеСтатуса.РегистраторСтатуса;
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьФормуВСтатусеСогласован() //++ Бей №424
	
 	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогСтатусыСогласованияОбъектовСрезПоследних.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.вогСтатусыСогласованияОбъектов.СрезПоследних(, Объект = &ЮрЛицо) КАК вогСтатусыСогласованияОбъектовСрезПоследних
		|ГДЕ
		|	вогСтатусыСогласованияОбъектовСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыСогласования.Согласован)";
	
	Запрос.УстановитьПараметр("ЮрЛицо", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
		
КонецПроцедуры


#КонецОбласти

#Область СвязиОбъекта

&НаСервереБезКонтекста
Процедура УстановитьСвязиОбъекта(МассивОбъектов, ОбъектСвязи)
	
	// ++ VOG Солодов В.В. 27.05.2019 task 325
	Для Каждого ЭлементМассива Из МассивОбъектов Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") 
			И ЭлементМассива.Свойство("КонтактноеЛицо") Тогда
			
			вогУправлениеСвязями.УстановитьСвязьОбъекта(ЭлементМассива.КонтактноеЛицо, ОбъектСвязи, ЭлементМассива);
		// ++ VOG Солодов В.В. 11.11.2019 bugs833
		ИначеЕсли ТипЗнч(ОбъектСвязи) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
			вогУправлениеСвязями.УстановитьСвязьОбъекта(ЭлементМассива, ОбъектСвязи);
			ДобавитьМенеджеровПоСвязямС_ТТ(ОбъектСвязи, ЭлементМассива);
		// -- VOG Солодов В.В. 11.11.2019	
		Иначе
			вогУправлениеСвязями.УстановитьСвязьОбъекта(ЭлементМассива, ОбъектСвязи);
		КонецЕсли;
	КонецЦикла;
	// До изменения
	//Для каждого КонтактноеЛицо Из МассивОбъектов Цикл
	//	вогУправлениеСвязями.УстановитьСвязьОбъекта(КонтактноеЛицо, ОбъектСвязи);
	//КонецЦикла;
	// -- VOG Солодов В.В. 27.05.2019
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьМассивТТ(Партнер, ЮрЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогТорговыеТочки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогТорговыеТочки КАК вогТорговыеТочки
		|ГДЕ
		|	вогТорговыеТочки.Партнер = &Партнер
		|	И НЕ вогТорговыеТочки.Ссылка В
		|				(ВЫБРАТЬ
		|					вогСвязиЮридическихЛиц.ОбъектСвязи
		|				ИЗ
		|					РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
		|				ГДЕ
		|					вогСвязиЮридическихЛиц.ЮридическоеЛицо = &ЮрЛицо)";
	
	Запрос.УстановитьПараметр("Партнер", 	Партнер);
	Запрос.УстановитьПараметр("ЮрЛицо", 	ЮрЛицо);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// ++ VOG Солодов В.В. 08.11.2019 bugs 833
&НаСервереБезКонтекста
Процедура ДобавитьМенеджеровПоСвязямС_ТТ(ОбъектСвязи, ЮридическоеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогЮридическиеЛица.Ссылка КАК Владелец,
		|	вогМенеджерыОбъектов.Подразделение КАК Подразделение,
		|	вогМенеджерыОбъектов.Роль КАК Роль,
		|	вогМенеджерыОбъектов.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	вогМенеджерыОбъектов.Менеджер КАК Менеджер,
		|	вогМенеджерыОбъектов.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
		|		ПО (вогЮридическиеЛица.Ссылка = &ЮридическоеЛицо)
		|			И (вогМенеджерыОбъектов.Владелец = &ОбъектСвязи)
		|			И (вогМенеджерыОбъектов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))";
	
	Запрос.УстановитьПараметр("ОбъектСвязи", 		ОбъектСвязи);
	Запрос.УстановитьПараметр("ЮридическоеЛицо", 	ЮридическоеЛицо);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.вогМенеджерыОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Владелец.Установить(ВыборкаДетальныеЗаписи.Владелец);
		НаборЗаписей.Отбор.Подразделение.Установить(ВыборкаДетальныеЗаписи.Подразделение);
		НаборЗаписей.Отбор.Роль.Установить(ВыборкаДетальныеЗаписи.Роль);
		НаборЗаписей.Отбор.НаправлениеДеятельности.Установить(ВыборкаДетальныеЗаписи.НаправлениеДеятельности);
		НаборЗаписей.Отбор.Менеджер.Установить(ВыборкаДетальныеЗаписи.Менеджер);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // -- VOG Солодов В.В. 08.11.2019

#КонецОбласти

#Область МакетыИнформации

&НаКлиенте
Процедура ИнформацияОбъектОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка 				= Ложь;
	ТекстОбработчика 					= "";
	ТаблицаОбработчики 					= ЭтаФорма["КарточкаОбъекта_Обработчики"];
	ТаблицаРасшифровка					= ЭтаФорма["КарточкаОбъекта_Расшифровка"];
	ТаблицаРасшифровкиКлассификатора 	= ЭтаФорма["КарточкаОбъекта_РасшифровкаКлассификатора"];
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Гиперссылка_") <> 0 Тогда
		ИмяГиперссылки 		= СтрЗаменить(Расшифровка,"Гиперссылка_","");
		Для каждого ТекущийОбработчик Из ТаблицаОбработчики Цикл
			Если ТекущийОбработчик.Имя = ИмяГиперссылки Тогда
				ТекстОбработчика = ТекущийОбработчик.ПроизвольныйКод;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение	
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Пользователи") Тогда
		// Сверунть группу Контакты
		СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
		ВыполнитьПереходСтраницы("СтраницаМенеджеры");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		// Сверунть группу Контакты
		СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
		ВыполнитьПереходСтраницы("СтраницаКонтакты");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		ПоказатьЗначение(Неопределено,Расшифровка);
	ИначеЕсли вогОбщегоНазначенияВызовСервера.ПроверитьЭтоСсылка(ТипЗнч(Расшифровка)) Тогда
		ПоказатьЗначение(Неопределено,Расшифровка);
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Расшифровка_") <> 0 Тогда
		ИмяРасшифровки 	= СтрЗаменить(Расшифровка,"Расшифровка_","");
		ИмяПараметра 	= "Объект." + ИмяРасшифровки;
		Для каждого ТекущийОбработчик Из ТаблицаРасшифровка Цикл
			Если ТекущийОбработчик.Имя = ИмяПараметра Тогда
				ТекстОбработчика = ТекущийОбработчик.ТекстОбработчика;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"КИ_") <> 0 Тогда
		Расшифровка = СокрЛП(СтрЗаменить(Расшифровка,"КИ_",""));
		Результат = ОпределитьТипКонтактнойИнформации(Объект.Ссылка,Расшифровка);
		Если Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(Результат.Представление, Объект.Ссылка);
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
			//УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(Результат.Представление, "Яндекс.Карты");
			СтруктураАдреса 	= Новый Структура; 
			СтруктураАдреса.Вставить("Представление", Результат.Представление);
			СписокКарт 			= Новый СписокЗначений;
			СписокКарт.Добавить("вогГеокодирование","Карта Yandex",,БиблиотекаКартинок.CRM_ГлобусСЛупой);
			ОписаниеОповещения 	= Новый ОписаниеОповещения("Подключаемый_ОткрытьАдресНаИнтернетКартеЗавершение", ЭтотОбъект, СтруктураАдреса);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокКарт.Получить(0)); 
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо("", Результат.Представление, Результат.Тип);
		ИначеЕсли Результат.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.ВебСтраница") Тогда
			УправлениеКонтактнойИнформациейКлиент.ПерейтиПоВебСсылке("", Результат.Представление, Результат.Тип);
		КонецЕсли;
		ИначеЕсли ТипЗнч(Расшифровка) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы")
			Или (ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов")
			И ТаблицаРасшифровкиКлассификатора.НайтиСтроки(Новый Структура("Имя", Расшифровка)).Количество() <> 0) Тогда
			//НайденныеСтроки = ТаблицаРасшифровкиКлассификатора.НайтиСтроки(Новый Структура("Имя",Расшифровка));
			//Если НайденныеСтроки.Количество() <> 0 Тогда
			//	WebService 	= НайденныеСтроки[0].Расшифровка;
			//	Результат 	= вогИнтеграцияСУчетнойСистемой.СформироватьОтчетЧерезWebService(Объект.Ссылка,WebService);
			//	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
			//		Результат.ОтображатьСетку = Ложь;
			//		Результат.ОтображатьЗаголовки = Ложь;
			//		ЗаголовокОтчета = Строка(Расшифровка) +" "+Объект.Ссылка;
			//		Результат.Показать(НСтр("ru = '"+ЗаголовокОтчета+"'"));
			//	КонецЕсли;
			//КонецЕсли;
			вогУправлениеИнтерфейсомКлиент.ОбработатьРасшифровкуИнформации(ЭтотОбъект, Расшифровка);
		ИначеЕсли ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
			вогОбщегоНазначенияКлиент.РасшифрокаВнешниеДанныеМакет(Расшифровка);
		КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьТипКонтактнойИнформации(Ссылка,Представление)

	РезультатЗапроса 	= Неопределено;
	ТекущаяТаблица 		= ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
	
	//START Кайдашов 29/07/19 487
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	"+(ТекущаяТаблица)+".КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактнаяИнформация.НомерСтроки = &НомерСтроки");
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Попытка
		НомерСтрокиКИ = Число(Представление);
	Исключение
		НомерСтрокиКИ = 0;
	КонецПопытки;
	Запрос.УстановитьПараметр("НомерСтроки",НомерСтрокиКИ);
	РезультатЗапроса = Запрос.Выполнить();
	ИсходящаяСтруктура 				= Новый Структура("Тип,Вид,Представление");
	ВыборкаИзРезультатаЗапроса 		= РезультатЗапроса.Выбрать();
	Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ИсходящаяСтруктура,ВыборкаИзРезультатаЗапроса);
	КонецЕсли;
	
	Возврат ИсходящаяСтруктура;
	//END Кайдашов 487
КонецФункции

#КонецОбласти

#Область ОблакоТегов

&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура Подключаемый_ОбновитьОблакоТегов()
	
	//CRM_Теги.ОбновитьОблакоТегов(ЭтаФорма);
	// отбор по подразделению текущего пользователя, остальные теги прячем в "Еще".
	ТекущееПодразделение = Пользователи.АвторизованныйПользователь().Подразделение;
	
	МассивУдаляемых = Новый Массив;
	Для Каждого ЭлементТег Из Элементы.ОблакоТегов.ПодчиненныеЭлементы Цикл
		Если Лев(ЭлементТег.Имя, 12) = "СтрокаТегов_" И НЕ ЭлементТег.Имя = "СтрокаТегов_1" Тогда
			МассивУдаляемых.Добавить(ЭлементТег);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементТег Из Элементы.СтрокаТегов_1.ПодчиненныеЭлементы Цикл
		Если Лев(ЭлементТег.Имя, 4) = "Тег_" Тогда
			МассивУдаляемых.Добавить(ЭлементТег);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементТег Из МассивУдаляемых Цикл
		Элементы.Удалить(ЭлементТег);
	КонецЦикла;
	
	МаксДлинаПервойСтроки = 61;
	МаксДлинаСтроки = МаксДлинаПервойСтроки + 24;
	НомерЭлемента = 0;
	НомерСтрокиЭлементов = 1;
	ТекущаяДлинаСтроки = 0;
	ГруппаТегов = Элементы.СтрокаТегов_1;
	
	СчСлужебный = 0;
	
	Для Каждого СтрокаТегов Из Объект.CRM_Теги Цикл
		
		Если ТекущееПодразделение = СтрокаТегов.Тег.Владелец Тогда
			
			СчСлужебный = СчСлужебный + 1;
			
			НомерЭлемента = НомерЭлемента + 1;
			ПредставлениеТега = Строка(СтрокаТегов.Тег);
			Если СтрДлина(ПредставлениеТега) > 15 Тогда
				ПредставлениеТега = Лев(ПредставлениеТега, 15) + "...";
				ДлинаТега = 15-1;
			Иначе
				ДлинаТега = СтрДлина(ПредставлениеТега)+1;
			КонецЕсли;
			
			ТекущаяДлинаСтроки = ТекущаяДлинаСтроки + ДлинаТега;
			
			Если (НомерСтрокиЭлементов = 1 И ТекущаяДлинаСтроки > МаксДлинаПервойСтроки) Или (НомерСтрокиЭлементов > 1 И ТекущаяДлинаСтроки > МаксДлинаСтроки) Тогда
				
				ТекущаяДлинаСтроки = ДлинаТега;
				НомерСтрокиЭлементов = НомерСтрокиЭлементов + 1;
				
				ГруппаТегов = Элементы.Добавить("СтрокаТегов_" + НомерСтрокиЭлементов, Тип("ГруппаФормы"), ?(НомерСтрокиЭлементов = 1, Элементы.ПерваяСтрока, Элементы.ОблакоТегов));
				ГруппаТегов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаТегов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				ГруппаТегов.ОтображатьЗаголовок = Ложь;
				ГруппаТегов.Отображение = ОтображениеОбычнойГруппы.Нет;
				ГруппаТегов.РастягиватьПоВертикали = Ложь;
				ГруппаТегов.Высота = 1;
				
			КонецЕсли;
			
			КомпонентыТега = Новый Массив;
			КомпонентыТега.Добавить(Новый ФорматированнаяСтрока(ПредставлениеТега + " "));
			КомпонентыТега.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , "ТегИД_" + СтрокаТегов.НомерСтроки));
			
			ЭлементТег = Элементы.Добавить("Тег_" + НомерЭлемента, Тип("ДекорацияФормы"), ГруппаТегов);
			ЭлементТег.Вид = ВидДекорацииФормы.Надпись;
			ЭлементТег.Заголовок = Новый ФорматированнаяСтрока(КомпонентыТега);
			ЭлементТег.Подсказка = Строка(СтрокаТегов.Тег);
			ЭлементТег.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
			ЭлементТег.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
			ЭлементТег.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
			ЭлементТег.Ширина = ДлинаТега;
			ЭлементТег.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ТегОбработкаНавигационнойСсылки");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СчСлужебный <> Объект.CRM_Теги.Количество() Тогда
		Элементы.ДекорацияТегиДругихПодразделений.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТегиДругихПодразделенийНажатие(Элемент)
	
	ОП = Новый ОписаниеОповещения("ОповещениеСписокТегов", ЭтотОбъект);
	СписокТеговДругихПодразделений = ПолучитьСписокТеговДругихПодразделений();
	ПоказатьВыборИзМеню(ОП, СписокТеговДругихПодразделений, Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокТеговДругихПодразделений()
	
	ТекущееПодразделение = Пользователи.АвторизованныйПользователь().Подразделение;
	СписокТегов = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПартнерыТеги.Тег КАК Тег,
	|	ПартнерыТеги.Тег.Владелец КАК Подразделение
	|ИЗ
	|	Справочник.Партнеры.CRM_Теги КАК ПартнерыТеги
	|ГДЕ
	|	ПартнерыТеги.Тег.Владелец <> &Владелец
	|ИТОГИ ПО
	|	Подразделение";
	Запрос.УстановитьПараметр("Владелец", ТекущееПодразделение);
	ВыборкаПодразделений = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделений.Следующий() Цикл
		СписокТегов.Добавить(ВыборкаПодразделений.Подразделение, Строка(ВыборкаПодразделений.Подразделение));
		
		ВыборкаТег = ВыборкаПодразделений.Выбрать();
		Пока ВыборкаТег.Следующий() Цикл
			СписокТегов.Добавить(ВыборкаТег.Тег, "  - " + Строка(ВыборкаТег.Тег));
		КонецЦикла;
		
	КонецЦикла;
	
	//Для Каждого ТекТег Из Объект.Теги Цикл
	//	Если ТекТег.Тег.Владелец <> ТекущееПодразделение Тогда
	//		СписокТегов.Добавить(ТекТег.Тег, Строка(ТекТег.Тег) +" (" + Строка(ТекТег.Тег.Владелец) + ")");
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат СписокТегов;
КонецФункции

&НаКлиенте
Процедура ОповещениеСписокТегов(Параметры, Дополнительно) Экспорт
	// Заглушка для отображения тегов других подразделений.
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ЗавершениеБанквоскиеСчета(Параметры,ДополнительныеПараметры) Экспорт

	Элементы.БанковкиеСчетаЮрЛица.Обновить();

КонецПроцедуры

&НаСервере
Процедура ПроверитьСвязьЮЛРЦ(ВыводитьСообщение = Ложь)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогСвязиЮридическихЛиц.ОбъектСвязи КАК ОбъектСвязи
		|ИЗ
		|	РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
		|ГДЕ
		|	вогСвязиЮридическихЛиц.ЮридическоеЛицо = &Ссылка
		|	И вогСвязиЮридическихЛиц.ОбъектСвязи ССЫЛКА Справочник.вогРаспределительныеЦентры
		|	И НЕ вогСвязиЮридическихЛиц.ЮридическоеЛицо В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					вогСвязиЮридическихЛиц.ЮридическоеЛицо
		|				ИЗ
		|					РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
		|				ГДЕ
		|					вогСвязиЮридическихЛиц.ЮридическоеЛицо = &Ссылка
		|					И вогСвязиЮридическихЛиц.ОбъектСвязи ССЫЛКА Справочник.вогТорговыеТочки)";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ЮрЛицоРЦ = Не РезультатЗапроса.Пустой();
		
		Если ЮрЛицоРЦ = Ложь
			И ВыводитьСообщение Тогда
			
			ТекстСообщения = НСтр("ru = 'У юридического лица нет связи с РЦ!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСвязьСРЦ(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогСвязиЮридическихЛиц.ОбъектСвязи КАК ОбъектСвязи
		|ИЗ
		|	РегистрСведений.вогСвязиЮридическихЛиц КАК вогСвязиЮридическихЛиц
		|ГДЕ
		|	вогСвязиЮридическихЛиц.ЮридическоеЛицо = &ЮридическоеЛицо
		|	И вогСвязиЮридическихЛиц.ОбъектСвязи ССЫЛКА Справочник.вогРаспределительныеЦентры";
	
	Запрос.УстановитьПараметр("ЮридическоеЛицо", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.вогСвязиЮридическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЮридическоеЛицо.Установить(Ссылка);
		НаборЗаписей.Отбор.ОбъектСвязи.Установить(ВыборкаДетальныеЗаписи.ОбъектСвязи);
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКлючВХранилище(КлючОбъекта, КлючНастроек, Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СписокМенеджерыИзменитьНаСервере(Вид)
	
	СтруктураСвойств = РегистрыСведений.вогИсторияМенеджеровОбъектов.ПолучитьПараметрыСпискаМенеджерыОбъектов(Вид);
	
	ЭтотОбъект.Менеджеры.ТекстЗапроса 		= СтруктураСвойств.ТекстЗапроса;
	ЭтотОбъект.Менеджеры.ОсновнаяТаблица 	= СтруктураСвойств.ОсновнаяТаблица;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"МенеджерыВидВсе", 
		"Пометка", 
		Вид = "МенеджерыВидВсе");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"МенеджерыВидДействующие", 
		"Пометка", 
		Вид <> "МенеджерыВидВсе");
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Менеджеры, 
		"ТекущаяДата", 
		CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	
	Элементы.Менеджеры.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

#Область ДоступныеОрганизации

&НаКлиенте
Процедура ДоступныеОрганизацииЗапретМодификацииСостава(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
	
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_ТегиКлассификатора_Обновить()

#КонецОбласти

#Область Подключаемый_МеханизмЗапускаБизнесПроцессов

&НаКлиенте
Процедура Подключаемый_ЗапускБизнесПроцесса(Команда)
	скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);
КонецПроцедуры // Подключаемый_ЗапускБизнесПроцесса()

#КонецОбласти

#Область ОтчетСтруктураВзаимосвязи

&НаСервере
Процедура СформироватьОтчетСтурктураВзаимосвязиСервер()

	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("ДанныеКлиента"			,ДанныеКлиента);
	ПараметрыФормированияОтчета.Вставить("КонтактнаяИнформация"		,КонтактнаяИнформация);
	ПараметрыФормированияОтчета.Вставить("КонтактныеЛица"			,КонтактныеЛицаОтч);
	ПараметрыФормированияОтчета.Вставить("ЮридическиеЛица"			,ЮридическиеЛица);
	ПараметрыФормированияОтчета.Вставить("ТорговыеТочки"			,ТорговыеТочки);
	ПараметрыФормированияОтчета.Вставить("РаспределительныйЦентр"	,РаспределительныйЦентр);
	Отчеты.вогСтруктураВзаимосвязи.СформироватьОтчет(СтруктураВзаимосвязиОтчет,Объект.Ссылка,ПараметрыФормированияОтчета);

КонецПроцедуры

&НаКлиенте
Процедура СтруктураВзаимосвязиОтчетОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
		
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		СтандартнаяОбработка 	= Ложь;
		
		ДанныеРасшифровки		= ИнициализироватьРасшифровку(Расшифровка);
		ИсточникНастроек		= Новый ИсточникДоступныхНастроекКомпоновкиДанных(СформироватьПодменюРасшифровки());
		
		ОбработкаРасшифровки 	= Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки,ИсточникНастроек);
		ДоступныеДействия 		= Новый СписокЗначений;
		ИмяТаблицы 				= ?(Расшифровка.ИмяТаблицы = "ЮридическоеЛицо", "данного юр-лица","РЦ");
		ДоступныеДействия.Добавить("ОткрытьСписокТТ",НСтр("ru = 'Показать ТТ "+ИмяТаблицы+"'"),,БиблиотекаКартинок.CRM_Задача);
		ДоступныеДействия.Добавить("ВыборТТ",НСтр("ru = 'Выбор ТТ из списка'"),,БиблиотекаКартинок.Подменю);
		
		ОсновныеДействия 		= Новый Массив;
		ОсновныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет);
		
		ОписаниеОповещения 		= Новый ОписаниеОповещения("РасшифровкаОтчетаМеню",ЭтотОбъект,Расшифровка);
		ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения,Новый ИдентификаторРасшифровкиКомпоновкиДанных(0),ОсновныеДействия,ДоступныеДействия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьРасшифровку(Расшифровка)
	
	СписокПолейРасшифровки = Новый ЗначенияПолейРасшифровкиКомпоновкиДанных;
	СтрокаРасшифровки			= СписокПолейРасшифровки.Добавить();
	СтрокаРасшифровки.Значение 	= Расшифровка;
	СтрокаРасшифровки.Поле 		= "";
	
	ТекущаяРасшифровка = Новый ДанныеРасшифровкиКомпоновкиДанных;
	ТекущаяРасшифровка.Элементы.Добавить(Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля"), ,СписокПолейРасшифровки);
	
	Возврат	 ПоместитьВоВременноеХранилище(ТекущаяРасшифровка,УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция СформироватьПодменюРасшифровки()
	Возврат ПоместитьВоВременноеХранилище(Новый СхемаКомпоновкиДанных);
КонецФункции

&НаКлиенте
Процедура РасшифровкаОтчетаМеню(ВыбранноеДействие,ВыбранноеЗначение,ДополнительныйПараметры) Экспорт
	
	Если ВыбранноеДействие = "ВыборТТ" Тогда
		СписокТТ = РасшифровкаСервер(ДополнительныйПараметры.ИмяТаблицы,ДополнительныйПараметры.Значение);
		Если СписокТТ.Количество() <> 0 Тогда
			ОП = Новый ОписаниеОповещения("ЗавершениеОбработкаВыбораОтчет",ЭтотОбъект);
			СписокТТ.ПоказатьВыборЭлемента(ОП,"Выберите ТТ");
		КонецЕсли;
	ИначеЕсли ВыбранноеДействие = "ОткрытьСписокТТ" Тогда
		ЗавершениеОтборПоСписку(ДополнительныйПараметры);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция РасшифровкаСервер(ИмяТаблицы, ЗначениеРасшифровки)
	
	Если ИмяТаблицы = "ЮридическоеЛицо" Тогда
		Возврат Отчеты.вогСтруктураВзаимосвязи.ПолучитьТорговыеТочкиПоЮрЛицу(ЗначениеРасшифровки);
	ИначеЕсли ИмяТаблицы = "РЦ" Тогда
		Возврат Отчеты.вогСтруктураВзаимосвязи.ПолучитьТорговыеТочкиПоРЦ(ЗначениеРасшифровки);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеОтборПоСписку(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		ПараметрыФормированияОтчета = Новый Структура;
		ПараметрыФормированияОтчета = Новый Структура;
		ПараметрыФормированияОтчета.Вставить("ДанныеКлиента"			,ДанныеКлиента);
		ПараметрыФормированияОтчета.Вставить("КонтактнаяИнформация"		,КонтактнаяИнформация);
		ПараметрыФормированияОтчета.Вставить("КонтактныеЛица"			,КонтактныеЛицаОтч);
		ПараметрыФормированияОтчета.Вставить("ЮридическиеЛица"			,ЮридическиеЛица);
		ПараметрыФормированияОтчета.Вставить("ТорговыеТочки"			,ТорговыеТочки);
		ПараметрыФормированияОтчета.Вставить("РаспределительныйЦентр"	,РаспределительныйЦентр);
		
		ЗавершениеОбработкаВыбораОтчетСервер(ПараметрыФормированияОтчета,ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбработкаВыбораОтчет(ВыбранноеЗначение,ДополнительныеПараметры) Экспорт

	Если ВыбранноеЗначение <> Неопределено Тогда
		ПараметрыФормированияОтчета = Новый Структура;
		ПараметрыФормированияОтчета.Вставить("ДанныеКлиента"			,ДанныеКлиента);
		ПараметрыФормированияОтчета.Вставить("КонтактнаяИнформация"		,КонтактнаяИнформация);
		ПараметрыФормированияОтчета.Вставить("КонтактныеЛица"			,КонтактныеЛицаОтч);
		ПараметрыФормированияОтчета.Вставить("ЮридическиеЛица"			,ЮридическиеЛица);
		ПараметрыФормированияОтчета.Вставить("ТорговыеТочки"			,ТорговыеТочки);
		ПараметрыФормированияОтчета.Вставить("РаспределительныйЦентр"	,РаспределительныйЦентр);
		
		НоваяОбласть = Неопределено;
		ЗавершениеОбработкаВыбораОтчетСервер(ПараметрыФормированияОтчета,ВыбранноеЗначение.Значение);
		
		НоваяОбласть = СтруктураВзаимосвязиОтчет.НайтиЗначение(ВыбранноеЗначение.Значение);
		
		Если НоваяОбласть <> Неопределено Тогда
			Элементы.СтруктураВзаимосвязиОтчет.ТекущаяОбласть = НоваяОбласть;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершениеОбработкаВыбораОтчетСервер(ПараметрыФормированияОтчета,ВыбранноеЗначение)	
	Отчеты.вогСтруктураВзаимосвязи.СформироватьОтчетСОтбором(СтруктураВзаимосвязиОтчет,Объект.Ссылка,ПараметрыФормированияОтчета,ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти

#Область ПроверкаНаДубли

&НаКлиенте
Процедура НайтиДубли(НайденДубль = Ложь)
	
	МассивОписанийОбъектов = Новый Массив;
	
	НайденныеДубли = Новый Массив;
	
	ОбъектПоиска = Новый Структура;
	ОбъектПоиска.Вставить("Ссылка" , ПредопределенноеЗначение("Справочник.вогЮридическиеЛица.ПустаяСсылка"));
	
	Если ЭтоИндивидуальныйПредприниматель(Объект.ОрганизационноПравоваяФорма) Тогда
//START Кайдашов 30/07/19
			
		ОбъектПоиска.Вставить("CRM_ОГРН", Объект.CRM_ОГРН);
		ОбъектПоиска.Вставить("CRM_ИНН", Объект.CRM_ИНН);
		СтруктураПоиска = новый Структура;
		МассивПолей = Новый Массив;
		МассивПолей.Добавить(Новый Структура("CRM_ИНН", "="));
		МассивПолей.Добавить(Новый Структура("CRM_ОГРН", "="));
		СтруктураПоиска.Вставить("СоставноеУсловие", МассивПолей);
		ПропускатьПустые = Ложь;	
	Иначе
		ОбъектПоиска.Вставить("CRM_ИНН", Объект.CRM_ИНН);
		ПропускатьПустые = истина;	
		СтруктураПоиска = вогОбщегоНазначенияКлиентСервер.СоздатьСтруктуруПоиска(ОбъектПоиска);
	КонецЕсли;
	
	СписокКонтактов = Новый Структура;
	Если ЕстьДубли(ОбъектПоиска, СтруктураПоиска, СписокКонтактов,,,ПропускатьПустые) Тогда 
		МассивОписанийОбъектов.Добавить(
		Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта", 
		ОбъектПоиска, "Справочник.вогЮридическиеЛица", СтруктураПоиска, СписокКонтактов));
	КонецЕсли;
	
	Если МассивОписанийОбъектов.Количество() > 0 Тогда
		НайденДубль 	= Истина;
		ПараметрыФормы 	= Новый Структура;
		ПараметрыФормы.Вставить("МассивОписанийОбъектов",МассивОписанийОбъектов);
		ПараметрыФормы.Вставить("СоздатьРынок",Ложь);
		ОповещенияОЗакрытии = Новый ОписаниеОповещения("НайтиДублиЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.вогФормаНайденныхДублей", ПараметрыФормы,ЭтаФорма,,,, ОповещенияОЗакрытии);
	Иначе
		НайденДубль = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДубли(Знач Объект, Знач СтруктураПоиска, Знач СписокКонтактов, Знач ТочноеСоответствие = Ложь, МассивДублей=Неопределено,ПропускатьПустые = Истина)
	
	МассивДублей = вогОбщегоНазначения.НайтиДубли(Объект, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие,,ПропускатьПустые);
	Возврат МассивДублей.Количество() > 0;
	
КонецФункции 

&НаКлиенте
Процедура НайтиДублиЗавершение(РезультатЗакрытия, ОписаниеОповещения) Экспорт

	Если Не ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.Результат = "Продолжить" Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения,Ложь);
	ИначеЕсли РезультатЗакрытия.Результат = "Перейти" Тогда
		Если ТипЗнч(РезультатЗакрытия.Объект) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
			ПараметрыФормы = Новый Структура("Ключ",РезультатЗакрытия.Объект);
			ОткрытьФорму("Справочник.вогЮридическиеЛица.ФормаОбъекта",ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоИндивидуальныйПредприниматель(ОрганизационноПравоваяФорма)

	Возврат ОрганизационноПравоваяФорма.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;

КонецФункции

&НаКлиенте
Процедура ПроцентЗаполненостиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	структураОтбора = Новый Структура("Аналитика,Объект",Неопределено,Объект.Ссылка);
	ПарамФормы = Новый Структура("Отбор,СформироватьПриОткрытии",структураОтбора,Истина);
	ПарамФормы.Вставить("КлючВарианта","РасшифровкаПоказателей");
	ОткрытьФорму("Отчет.вогПоказателиЗаполненностиДанных.ФормаОбъекта",ПарамФормы);
	
КонецПроцедуры

#КонецОбласти

// ++ VOG Ульянов И.В. 28.11.2019 task 941
#Область Виджеты

&НаКлиенте
Процедура HTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОтобразитьИконкуНастройкиHTML();
	СкрытьИконкуНастройкиHTML();

	АдресХранилищаТаблицаПросмотра = Неопределено;
	
	ТекущиеДелаДокументооборотКлиент.HTMLПриНажатии(
		Этаформа, Элемент, ДанныеСобытия, СтандартнаяОбработка, АдресХранилищаТаблицаПросмотра);
		
	// доработано VOG Ульянов И.В. 12.02.2020 CRM-311
	Если АдресХранилищаТаблицаПросмотра <> Неопределено тогда		
		Если АдресХранилищаТаблицаПросмотра.ТипРезультата = "ТаблицаЗначений" тогда
			ЭтаФорма.Элементы.ГруппаТаблицаЗначений.Видимость = Истина;
			ЭтаФорма.Элементы.ГруппаТабличныйДокумент.Видимость = Ложь;
			ЗагрузитьТаблицуПросмотра(АдресХранилищаТаблицаПросмотра);
		ИначеЕсли АдресХранилищаТаблицаПросмотра.ТипРезультата = "Макет" тогда
			ЭтаФорма.Элементы.ГруппаТаблицаЗначений.Видимость = Ложь;
			ЭтаФорма.Элементы.ГруппаТабличныйДокумент.Видимость = Истина;
			ВывестиДанныеВТаблицу(АдресХранилищаТаблицаПросмотра);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Отображать иконку настройки в полях html виджетов.
//
&НаКлиенте
Процедура ОтобразитьИконкуНастройкиHTML()
	
	НовыйТекущийВиджет = ИндексТекущегоВиджета();
	
	Если ЗначениеЗаполнено(НовыйТекущийВиджет) Тогда
		ИмяРеквизитаHTML = "HTML" + НовыйТекущийВиджет;
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаHTML])
			И СтрНайти(ЭтаФорма[ИмяРеквизитаHTML], ".visibility_img{visibility:hidden;}") Тогда
			
			ЭтаФорма[ИмяРеквизитаHTML] = СтрЗаменить(ЭтаФорма[ИмяРеквизитаHTML],
				".visibility_img{visibility:hidden;}",
				".visibility_img{visibility:visible;}");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Скрывает иконку настройки в полях html виджетов.
//
&НаКлиенте
Процедура СкрытьИконкуНастройкиHTML()
	
	ПодключитьОбработчикОжидания("СкрытьИконкуНастройкиHTML", 0.1, Истина);
	
	НовыйТекущийВиджет = ИндексТекущегоВиджета();
	
	Если ТекущийВиджетHTML = НовыйТекущийВиджет Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийВиджетHTML) Тогда
		ИмяРеквизитаHTML = "HTML" + ТекущийВиджетHTML;
		Если ЗначениеЗаполнено(ЭтаФорма[ИмяРеквизитаHTML])
			И СтрНайти(ЭтаФорма[ИмяРеквизитаHTML], ".visibility_img{visibility:visible;}") Тогда
			
			ЭтаФорма[ИмяРеквизитаHTML] = СтрЗаменить(ЭтаФорма[ИмяРеквизитаHTML],
				".visibility_img{visibility:visible;}",
				".visibility_img{visibility:hidden;}");
		КонецЕсли;
	КонецЕсли;
	
	ТекущийВиджетHTML = НовыйТекущийВиджет;
	
КонецПроцедуры

// Возвращает индекс текущего виджета по выделенному элементу форму.
// Если по выделенному элементу невозможно определить индекс виджета, то
// возвращается пустая строка.
//
&НаКлиенте
Функция ИндексТекущегоВиджета() Экспорт
	
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ПолеФормы")
		И ТипЗнч(ТекущийЭлемент) <> Тип("ДекорацияФормы") Тогда
		
		Возврат "";
	КонецЕсли;
	
	ИндексТекущегоВиджета = Прав(ТекущийЭлемент.Имя,3);
	
	Если Сред(ИндексТекущегоВиджета, 2, 1) <> "_" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ИндексТекущегоВиджета;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВиджетыНаВкладке()
	
	ЗаполнитьВиджетыНаВкладкеНаСервере();
	
КонецПроцедуры	
	
&НаСервере
Процедура ЗаполнитьВиджетыНаВкладкеНаСервере()
	
	ОбъектСвязи = Объект.Ссылка;
	
	ПрочитатьНастройкиВиджетов = Истина;
	ЗаполнитьВиджеты(ПрочитатьНастройкиВиджетов);
			
	ЦветНепринятаяВерсия = ЦветаСтиля.НепринятаяВерсия;
			
	ТекущиеДелаДокументооборотСервер.ЗаполнитьКэшКартинокФормыТекущиеДела(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВиджеты(ПрочитатьНастройкиВиджетов = Ложь, Виджеты = Неопределено) Экспорт
	
	Если ПрочитатьНастройкиВиджетов = Истина Тогда
		// Загрузка настроек формы Текущие дела.
		Настройки = РегистрыСведений.НастройкиТекущихДел.ПолучитьНастройки();
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Настройки);
	КонецЕсли;
	
	// ++ VOG Ульянов И.В. 06.02.2020 CRM-239
	//ТекущиеДелаДокументооборотСервер.ЗаполнитьВиджетыТекущихДел(ЭтаФорма, Виджеты,1,4);
	//ТекущиеДелаДокументооборотСервер.ЗаполнитьВиджетыТекущихДел(ЭтаФорма, Виджеты,1,6); 
	ТекущиеДелаДокументооборотСервер.ЗаполнитьВиджетыТекущихДел(ЭтаФорма, Виджеты,1,5); // VOG Ульянов И.В. 12.02.2020 CRM-491
	// -- VOG Ульянов И.В. 06.02.2020 CRM-239
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаНажатие(Элемент)
	
	ИндексТекущегоВиджета = ИндексТекущегоВиджета();
	
	Если Не ЗначениеЗаполнено(ИндексТекущегоВиджета) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВиджет = ЭтаФорма["Виджет" + ИндексТекущегоВиджета];
	
	ТекущиеДелаДокументооборотКлиент.ОбработатьНажатиеНаОбластьМеню(
		ТекущийВиджет, ЭтаФорма, Элемент, ИндексТекущегоВиджета);
	
КонецПроцедуры
	
&НаСервере
Процедура ЗагрузитьТаблицуПросмотра(АдресВХранилище)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПросмотра = ПолучитьИзВременногоХранилища(АдресВХранилище.СтрокаРезультата);		
	
	МассивТекущихКолонок = ЭтаФорма.ПолучитьРеквизиты("ВзаимодействиеРасшифровка");
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	УдаляемыеЭлементыФормы = Новый Массив;
	
	Для каждого ЭлементМассива Из МассивТекущихКолонок Цикл
		МассивУдаляемыхРеквизитов.Добавить(ЭлементМассива.Путь + "." + ЭлементМассива.Имя);
		УдаляемыеЭлементыФормы.Добавить(ЭлементМассива.Имя);
	КонецЦикла;
	
	Для каждого ЭлементМассива Из УдаляемыеЭлементыФормы Цикл
		НайденныйЭлементФормы = Элементы.Найти(ЭлементМассива);
		Если НайденныйЭлементФормы <> Неопределено  Тогда
			Элементы.Удалить(НайденныйЭлементФормы);
		КонецЕсли;
	КонецЦикла;	
	
		МассивРеквизитов = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаПросмотра.Колонки Цикл
			
   		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,"ВзаимодействиеРасшифровка"));
    
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов, МассивУдаляемыхРеквизитов);
	
	Для Каждого Колонка Из ТаблицаПросмотра.Колонки Цикл
		НовыйЭлемент = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Элементы.ВзаимодействиеРасшифровка);       
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ВзаимодействиеРасшифровка." + Колонка.Имя;		
		НовыйЭлемент.Заголовок = Колонка.Заголовок;
	КонецЦикла;	
	
	Элементы.ВзаимодействиеРасшифровка.ПодчиненныеЭлементы.Документ.Видимость = Ложь;
	
	Элементы.ВзаимодействиеРасшифровка.Доступность = Истина;
	Элементы.ВзаимодействиеРасшифровка.ТолькоПросмотр = Ложь;	
	
	ЗначениеВРеквизитФормы(ТаблицаПросмотра,"ВзаимодействиеРасшифровка");
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеРасшифровкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВиджеты(Команда)
	ЗаполнитьВиджетыНаВкладке();
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеРасшифровкаСортировать(Команда)
	
	Если ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя <> "" тогда
		ВзаимодействиеРасшифровка.Сортировать(ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействиеРасшифровкаСортироватьПоУбыванию(Команда)
	
	Если ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя <> "" тогда
		ВзаимодействиеРасшифровка.Сортировать(ЭтаФорма.Элементы.ВзаимодействиеРасшифровка.ТекущийЭлемент.Имя+" Убыв");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТаблицу(СтруктураМакета)
	
	
	ВиджетМакетПросмотра = СтруктураМакета.СтрокаРезультата;
	
	ТаблицаВиджета.Очистить();
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;	
	
	СхемаКомпоновкиДанных = Справочники.Виджеты.ПолучитьМакет(СтруктураМакета.СтрокаРезультата); // изменено VOG Ульянов И.В. 12.02.2020 CRM-311
	
	АдресСхемыВиджеты = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	ЭтаФорма.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыВиджеты));
    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	СохраненныеНастройкиХранилище = ПолучитьНастройкиИзХранилища(Пользователи.ТекущийПользователь(),Строка(ТипЗнч(Объект.Ссылка)),СтруктураМакета.СтрокаРезультата);
	Если СохраненныеНастройкиХранилище <> Неопределено тогда
		СохраненныеНастройки = СохраненныеНастройкиХранилище.Получить();
		КомпоновщикНастроек.ЗагрузитьНастройки(СохраненныеНастройки);
	КонецЕсли;	
	
	//Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОбъектСвязи", Объект.Ссылка);
	Если СтруктураМакета.ПараметрыОтбора <> Неопределено тогда
		Для каждого ЭлементСтруктуры из СтруктураМакета.ПараметрыОтбора цикл			
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;	
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	АдресДанныхРасшифровкиВиджеты = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ТаблицаВиджета);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
    
КонецПроцедуры	

&НаСервере
Функция ПолучитьНастройкиИзХранилища(Пользователь, ТипОбъекта, НазваниеМакета) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогНастройкиПросмотраВиджетов.Настройка КАК Настройка
		|ИЗ
		|	РегистрСведений.вогНастройкиПросмотраВиджетов КАК вогНастройкиПросмотраВиджетов
		|ГДЕ
		|	вогНастройкиПросмотраВиджетов.ТипОбъекта = &ТипОбъекта
		|	И вогНастройкиПросмотраВиджетов.НазваниеМакета = &НазваниеМакета
		|	И вогНастройкиПросмотраВиджетов.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("НазваниеМакета", НазваниеМакета);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.Настройка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаписатьНастройкиВХранилище() // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	НаборЗаписей = РегистрыСведений.вогНастройкиПросмотраВиджетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	НаборЗаписей.Отбор.ТипОбъекта.Установить(Строка(ТипЗнч(Объект.Ссылка)));
	НаборЗаписей.Отбор.НазваниеМакета.Установить(ВиджетМакетПросмотра);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();
	НоваяЗапись.ТипОбъекта = Строка(ТипЗнч(Объект.Ссылка));
	НоваяЗапись.НазваниеМакета = ВиджетМакетПросмотра;
	НоваяЗапись.Настройка = Новый ХранилищеЗначения(КомпоновщикНастроек.Настройки);
	
	НаборЗаписей.Записать();	
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьОтборыТабличногоДокумента(Команда) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	Если ЭтаФорма.Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Ложь тогда
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Истина;
		//ЭтаФорма.Элементы.ОтобразитьОтборыТабличногоДокумента.Заголовок = "Скрыть отбор";
	Иначе	
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройкиОтбор.Видимость = Ложь;
		//ЭтаФорма.Элементы.ОтобразитьОтборыТабличногоДокумента.Заголовок = "Отбор...";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьНастройкиТабличногоДокумента(Команда) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	Если ЭтаФорма.Элементы.КомпоновщикНастроекНастройки.Видимость = Ложь тогда
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройки.Видимость = Истина;
		//ЭтаФорма.Элементы.ОтобразитьНастройкиТабличногоДокумента.Заголовок = "Скрыть настройки";
	Иначе	
		ЭтаФорма.Элементы.КомпоновщикНастроекНастройки.Видимость = Ложь;
		//ЭтаФорма.Элементы.ОтобразитьНастройкиТабличногоДокумента.Заголовок = "Настройки...";
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТабличныйДокумент(Команда) // VOG Ульянов И.В. 12.02.2020 CRM-311
	ОбновитьТабличныйДокументНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьТабличныйДокументНаСервере() // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	//ЗаписатьНастройкиВХранилище(Пользователи.ТекущийПользователь(),Строка(ТипЗнч(Объект.Ссылка)),ВиджетМакетПросмотра,КомпоновщикНастроек.Настройки);	
	
	ТаблицаВиджета.Очистить();
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;	
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыВиджеты);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	АдресДанныхРасшифровкиВиджеты = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ТаблицаВиджета);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ВиджетМакетПросмотра <> "СКДМоиЗадачи" тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
    
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВиджетаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры) // VOG Ульянов И.В. 12.02.2020 CRM-311
	
	СтандартнаяОбработка = Ложь;
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьЗначениеРасшифровки", ЭтотОбъект);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресДанныхРасшифровкиВиджеты, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыВиджеты));
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиТабличногоДокумента(Команда)
	
	ЗаписатьНастройкиВХранилище();
	
КонецПроцедуры

#КонецОбласти

// -- VOG Ульянов И.В. 28.11.2019 task 941


