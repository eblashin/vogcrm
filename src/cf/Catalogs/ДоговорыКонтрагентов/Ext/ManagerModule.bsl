
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

//+вог

#Область КарточкаОбъекта

// Возвращает табличный документ ДоговорыКонтрагентов.
// Параметры:
//  Договор - СправочникОбъект.ДоговорыКонтрагентов, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитов 
//  НастройкиВидимостиИЗаголовков - Структура - см. функцию Справочники.ДоговорыКонтрагентов.НастройкиВидимостиИЗаголовков
//
// Возвращаемое значение:
//	ТабличныйДокумент - табличный документ с реквизитами
//
Функция ТабличныйДокументКарточкиОбъекта(Договор, НастройкиВидимостиИЗаголовков) Экспорт
	
	//Перем Заголовок;
	//
	//ТолькоЗаполненные = (НастройкиВидимостиИЗаголовков.Свойство("ТолькоЗаполненные") И НастройкиВидимостиИЗаголовков.ТолькоЗаполненные);
	//
	//Объект = Неопределено;
	//Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
	//	Объект = Договор.ПолучитьОбъект();
	//ИначеЕсли ТипЗнч(Договор) = Тип("СправочникОбъект.ДоговорыКонтрагентов")
	//	Или ТипЗнч(Договор) = Тип("ДанныеФормыСтруктура") Тогда
	//	Объект = Договор;
	//Иначе
	//	Возврат Новый ТабличныйДокумент;
	//КонецЕсли;
	//
	//ТабличныйДокументКарточка = Новый ТабличныйДокумент;
	//
	//СтруктураВидимости = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	//СтруктураЗаголовков = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	//
	//Макет = ПолучитьМакет("ПФ_MXL_КарточкаДоговораКонтрагента");
	//
	//#Область Шапка
	//
	//ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	//ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Объект);
	//	
	//Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
	//	ОбластьШапка.Параметры.Наименование = ТекстЗначенияНеЗаполнен("Наименование");
	//КонецЕсли;
	//ОбластьШапка.Параметры.РасшифровкаНаименование = "Наименование";

	//Если Не ЗначениеЗаполнено(Объект.ДатаДоговора) Тогда
	//	ОбластьШапка.Параметры.ДатаДоговора = ТекстЗначенияНеЗаполнен("ДатаДоговора");
	//КонецЕсли;
	//ОбластьШапка.Параметры.РасшифровкаДатаДоговора = "ДатаДоговора";

	//
	//Если Не ЗначениеЗаполнено(Объект.вогДатаОкончанияДоговора) Тогда
	//	ОбластьШапка.Параметры.вогДатаОкончанияДоговора = ТекстЗначенияНеЗаполнен("вогДатаОкончанияДоговора");
	//КонецЕсли;
	//ОбластьШапка.Параметры.РасшифровкавогДатаОкончанияДоговора = "вогДатаОкончанияДоговора";

	//ТабличныйДокументКарточка.Присоединить(ОбластьШапка);
	//
	//#КонецОбласти
	//
	//ТабличныйДокументКолонки = Новый ТабличныйДокумент;
	//
	//#Область ОбщиеДанные
	//
	//МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	//
	////Классификаторы
	//Классификаторы = CRM_КлассификаторыВызовСервера.ТаблицаСоставаКлассификаторовОбъекта(Объект.Ссылка);
	//Если ГлаваВидна("Классификаторы", СтруктураВидимости,, Классификаторы.Количество()) Тогда 
	//	Запрос = Новый Запрос;
	//	Запрос.УстановитьПараметр("ТаблицаКлассификаторов", Классификаторы);
	//	Запрос.УстановитьПараметр("ОбъектСсылка", Объект.Ссылка);
	//	
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	ТаблицаКлассификаторов.Классификатор КАК Классификатор,
	//		|	ТаблицаКлассификаторов.ИспользуемаяАналитика КАК ИспользуемаяАналитика,
	//		|	ТаблицаКлассификаторов.Аналитика КАК Аналитика
	//		|ПОМЕСТИТЬ втТаблицаКлассификаторов
	//		|ИЗ
	//		|	&ТаблицаКлассификаторов КАК ТаблицаКлассификаторов
	//		|
	//		|ИНДЕКСИРОВАТЬ ПО
	//		|	Классификатор,
	//		|	Аналитика
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора,
	//		|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
	//		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита
	//		|ПОМЕСТИТЬ втТекущиеЗначенияКлассификаторов
	//		|ИЗ
	//		|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	//		|ГДЕ
	//		|	CRM_ОбъектыЗначенийКлассификаторов.Объект = &ОбъектСсылка
	//		|	И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец, CRM_ОбъектыЗначенийКлассификаторов.Аналитика) В
	//		|			(ВЫБРАТЬ
	//		|				втТаблицаКлассификаторов.Классификатор,
	//		|				втТаблицаКлассификаторов.Аналитика
	//		|			ИЗ
	//		|				втТаблицаКлассификаторов КАК втТаблицаКлассификаторов)
	//		|
	//		|ИНДЕКСИРОВАТЬ ПО
	//		|	ЗначениеКлассификатора,
	//		|	Аналитика
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	CRM_ЗначенияКлассификаторов.Владелец КАК Классификатор,
	//		|	CRM_ЗначенияКлассификаторов.Ссылка КАК Значение,
	//		|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит
	//		|ПОМЕСТИТЬ втВсеЗначенияКлассификаторов
	//		|ИЗ
	//		|	втТаблицаКлассификаторов КАК втТаблицаКлассификаторов
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
	//		|		ПО втТаблицаКлассификаторов.Классификатор = CRM_ЗначенияКлассификаторов.Владелец
	//		|ГДЕ
	//		|	НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
	//		|
	//		|ИНДЕКСИРОВАТЬ ПО
	//		|	Классификатор
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	втВсеЗначенияКлассификаторов.Классификатор КАК Классификатор,
	//		|	втВсеЗначенияКлассификаторов.Классификатор.ВидОтображения КАК ВидОтображения,
	//		|	втВсеЗначенияКлассификаторов.Классификатор.Представление,
	//		|	втВсеЗначенияКлассификаторов.Значение,
	//		|	втВсеЗначенияКлассификаторов.Значение.Представление,
	//		|	втВсеЗначенияКлассификаторов.ДополнительныйРеквизит,
	//		|	ЕСТЬNULL(втТекущиеЗначенияКлассификаторов.ЗначениеРеквизита, НЕОПРЕДЕЛЕНО) КАК ЗначениеРеквизита,
	//		|	ВЫБОР
	//		|		КОГДА втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора ЕСТЬ NULL
	//		|			ТОГДА ЛОЖЬ
	//		|		ИНАЧЕ ИСТИНА
	//		|	КОНЕЦ КАК Включен
	//		|ИЗ
	//		|	втВсеЗначенияКлассификаторов КАК втВсеЗначенияКлассификаторов
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ втТекущиеЗначенияКлассификаторов КАК втТекущиеЗначенияКлассификаторов
	//		|		ПО втВсеЗначенияКлассификаторов.Значение = втТекущиеЗначенияКлассификаторов.ЗначениеКлассификатора
	//		|
	//		|УПОРЯДОЧИТЬ ПО
	//		|	втВсеЗначенияКлассификаторов.Классификатор.РеквизитДопУпорядочивания,
	//		|	втВсеЗначенияКлассификаторов.Значение.РеквизитДопУпорядочивания
	//		|ИТОГИ ПО
	//		|	Классификатор";
	//	
	//	ВыборкаКлассификатор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//	
	//КонецЕсли;	
	//
	////Доп. реквизиты
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	НаборыДополнительныхРеквизитов.Свойство КАК Свойство,
	//|	ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ДоговорыКонтрагентов) КАК НаборСвойств,
	//|	НаборыДополнительныхРеквизитов.Свойство.Заголовок КАК ПредставлениеРеквизита,
	//|	ДоговорыКонтрагентовДополнительныеРеквизиты.Значение КАК Значение,
	//|	ИСТИНА КАК ОбщееСвойство,
	//|	НаборыДополнительныхРеквизитов.НомерСтроки КАК НомерСтрокиДляСортировки
	//|ИЗ
	//|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
	//|		ПО (ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка = &ДоговорКонтрагента)
	//|			И НаборыДополнительныхРеквизитов.Свойство = ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство
	//|ГДЕ
	//|	НЕ НаборыДополнительныхРеквизитов.Свойство.ЭтоДополнительноеСведение
	//|	И НаборыДополнительныхРеквизитов.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ДоговорыКонтрагентов)";
	//
	//Если ТолькоЗаполненные Тогда
	//	Запрос.Текст = Запрос.Текст  + " И НЕ ДоговорыКонтрагентовДополнительныеРеквизиты.Значение ЕСТЬ NULL"
	//КонецЕсли;
	//
	//Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.Ссылка);
	//ДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	//ДополнительныеРеквизиты.Сортировать("ОбщееСвойство Убыв, НомерСтрокиДляСортировки Возр");
	//
	//
	//#КонецОбласти
	//
	//#Область ТабличныйДокументЛево
	//
	//ТабличныйДокументЛево = Новый ТабличныйДокумент;
	//	
	//#Область Описание
	//
	//Если ГлаваВидна("Описание", СтруктураВидимости) Тогда 
	//	
	//	ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ОписаниеЗаголовок");
	//	ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
	//	
	//	Если РазделВиден("ВидДоговора", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ВидДоговора", Объект.ВидДоговора,,,, ТолькоЗаполненные);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("вогТипДоговора", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "вогТипДоговора", Объект.вогТипДоговора,,,, ТолькоЗаполненные);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("вогНаправлениеДеятельности", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "вогНаправлениеДеятельности", Объект.вогНаправлениеДеятельности,,,, ТолькоЗаполненные);
	//	КонецЕсли;		
	//	
	//	Если РазделВиден("вогФормаДоговора", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "вогФормаДоговора", Объект.вогФормаДоговора,,,, ТолькоЗаполненные);
	//	КонецЕсли;

	//	
	//	Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимости) Тогда
	//		ОбластьОписаниеФайлыСтрока = Макет.ПолучитьОбласть("ФайлыСтрока");
	//		
	//		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиФайлы", Заголовок) Тогда
	//			ОбластьОписаниеФайлыСтрока.Параметры.Файлы = Заголовок;
	//			ОбластьОписаниеФайлыСтрока.Параметры.Расшифровка = "ГиперссылкаПерейтиФайлы";
	//		КонецЕсли;
	//		ТабличныйДокументЛево.Вывести(ОбластьОписаниеФайлыСтрока);
	//	КонецЕсли;
	//	
	//	Если ГлаваВидна("Классификаторы", СтруктураВидимости,, Классификаторы.Количество())
	//	  И РазделВиден("ГиперссылкаПерейтиЗначенияКлассификаторов", СтруктураВидимости) Тогда
	//		ОбластьГиперссылкаПерейтиЗначенияКлассификаторов = Макет.ПолучитьОбласть("ГиперссылкаПерейтиЗначенияКлассификаторовСтрока");
	//		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиЗначенияКлассификаторов", Заголовок) Тогда  
	//			ОбластьГиперссылкаПерейтиЗначенияКлассификаторов.Параметры.ГиперссылкаПерейтиЗначенияКлассификаторов = Заголовок;
	//		КонецЕсли;
	//		ОбластьГиперссылкаПерейтиЗначенияКлассификаторов.Параметры.Расшифровка = "ГиперссылкаПерейтиЗначенияКлассификаторов";
	//		ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиЗначенияКлассификаторов);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("ГиперссылкаПерейтиПротоколыРазногласий", СтруктураВидимости) Тогда
	//		ОбластьГиперссылкаПерейтиПротоколыРазногласий = Макет.ПолучитьОбласть("ГиперссылкаПерейтиПротоколыРазногласийСтрока");
	//		Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиПротоколыРазногласий", Заголовок) Тогда
	//			ОбластьГиперссылкаПерейтиПротоколыРазногласий.Параметры.ГиперссылкаПерейтиПротоколыРазногласий = Заголовок;
	//			ОбластьГиперссылкаПерейтиПротоколыРазногласий.Параметры.Расшифровка = "ГиперссылкаПерейтиПротоколыРазногласий";
	//		КонецЕсли;
	//		ТабличныйДокументЛево.Вывести(ОбластьГиперссылкаПерейтиПротоколыРазногласий);
	//	КонецЕсли;

	//	
	//КонецЕсли;
	//	
	//#КонецОбласти
	//
	//#Область ЦеныИСкидки
	//
	//Если ГлаваВидна("ЦеныИСкидки", СтруктураВидимости) Тогда 
	//	ОбластьОписаниеЗаголовок = Макет.ПолучитьОбласть("ЦеныИСкидкиЗаголовок");
	//	ТабличныйДокументЛево.Вывести(ОбластьОписаниеЗаголовок);
	//	
	//	Если РазделВиден("ВалютаРасчетов", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ВалютаРасчетов", Объект.ВалютаРасчетов,,,, ТолькоЗаполненные);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("РасчетыВУсловныхЕдиницах", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "РасчетыВУсловныхЕдиницах", Объект.РасчетыВУсловныхЕдиницах,,,, ТолькоЗаполненные);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("ВидЦен", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ВидЦен", Объект.ВидЦен,,,, ТолькоЗаполненные);
	//	КонецЕсли;

	//	Если РазделВиден("ВидСкидкиНаценки", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ВидСкидкиНаценки", Объект.ВидСкидкиНаценки,,,, ТолькоЗаполненные);
	//	КонецЕсли;

	//КонецЕсли;
	//			
	//#КонецОбласти
	//
	//#Область РазделыЛево
	//
	//ОписаниеРазделов = вогОбщегоНазначения.ПолучитьДанныеРазделаКарточки(МетаданныеОбъекта.ПолноеИмя(), 
	//	"Лево", ВыборкаКлассификатор, ДополнительныеРеквизиты);
	//Для каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
	//	Если ОписаниеРаздела.ДанныеРаздела.Количество() = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ЦветФона = ОписаниеРаздела.ЦветФона;
	//	
	//	ОбластьЗаголовок = Макет.ПолучитьОбласть("РазделЗаголовокЛево");
	//	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОписаниеРаздела.РазделПредставление;
	//	ТабличныйДокументЛево.Вывести(ОбластьЗаголовок);		   
	//	
	//	Для каждого ЭлементРаздела Из ОписаниеРаздела.ДанныеРаздела Цикл
	//		ОписаниеДанных = Неопределено;
	//		Если Не ЭлементРаздела.СоставРаздела.Свойство("ОписаниеДанных", ОписаниеДанных) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если ЭлементРаздела.ТипРаздела = "ДополнительныеРеквизиты" Тогда				
	//			ИмяЭлементаДопРеквизита = "ДополнительныйРеквизитЗначение_" 
	//				+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.НаборСвойств.УникальныйИдентификатор())), "-", "x")
	//				+ "_"
	//				+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.Свойство.УникальныйИдентификатор())), "-", "x");
	//			
	//			Если РазделВиден(ИмяЭлементаДопРеквизита, СтруктураВидимости) Тогда 
	//				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ДополнительныеРеквизитыЛево", ОписаниеДанных.Значение, ОписаниеДанных.ПредставлениеРеквизита, ИмяЭлементаДопРеквизита,, ЦветФона);		
	//			КонецЕсли;	
	//			
	//		ИначеЕсли ЭлементРаздела.ТипРаздела = "Классификаторы" Тогда
	//			ИмяЭлементаКлассфикатора =  CRM_КлассификаторыВызовСервера.ИмяОсновногоЭлементаКлассификатора(ОписаниеДанных.Классификатор, ОписаниеДанных.ВидОтображения); 
	//			Если ТипЗнч(ОписаниеДанных.Значения) = Тип("Строка") Тогда
	//				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "КлассификаторыЛево", ОписаниеДанных.Значения, ОписаниеДанных.КлассификаторПредставление, ИмяЭлементаКлассфикатора, ТолькоЗаполненные, ЦветФона);
	//			Иначе	
	//				Если ОписаниеДанных.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
	//					Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
	//						ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументЛево, Макет, "ДополнительныеРеквизитыЛево", СтруктураЗначения.ЗначениеРеквизита, СтруктураЗначения.ЗначениеПредставление, ИмяЭлементаКлассфикатора, 0, ТолькоЗаполненные, ЦветФона);
	//					КонецЦикла
	//					
	//				Иначе	
	//					
	//					ОбластьТаблицейЗаголовок = Макет.ПолучитьОбласть("КлассификаторыТаблицейЗаголовокЛевоСтрока");
	//					ОбластьТаблицейЗаголовок.Параметры.КлассификаторыЗаголовок = ОписаниеДанных.КлассификаторПредставление;
	//					ОбластьТаблицейЗаголовок.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
	//					
	//					УстановитьЦветФонаОбласти(ОбластьТаблицейЗаголовок, ЦветФона);	
	//					ТабличныйДокументЛево.Вывести(ОбластьТаблицейЗаголовок);		   
	//					
	//					Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
	//						ОбластьКлассификаторыТаблицейСтрока = Макет.ПолучитьОбласть("КлассификаторыТаблицейЛевоСтрока");
	//						ОбластьКлассификаторыТаблицейСтрока.Параметры.КлассификаторыЛевоРеквизит = СтруктураЗначения.ЗначениеПредставление;
	//						
	//						Если СтруктураЗначения.Включен Тогда
	//							Картинка = БиблиотекаКартинок.CRM_УстановитьФлажки;	
	//						Иначе
	//							Картинка = БиблиотекаКартинок.CRM_СнятьФлажки;	
	//						КонецЕсли;
	//						
	//						ОбластьКлассификаторыТаблицейСтрока.Область("КлассификаторыТаблицейЛевоКартинка").Картинка = Картинка;
	//						ОбластьКлассификаторыТаблицейСтрока.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
	//						
	//						УстановитьЦветФонаОбласти(ОбластьКлассификаторыТаблицейСтрока, ЦветФона);	
	//						ТабличныйДокументЛево.Вывести(ОбластьКлассификаторыТаблицейСтрока);		   
	//						
	//					КонецЦикла;
	//					
	//				КонецЕсли;
	//				
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//	
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	//#КонецОбласти
	//
	//ТабличныйДокументКолонки.Присоединить(ТабличныйДокументЛево);
	//
	//#КонецОбласти
	//	
	//#Область ТабличныйДокументПраво
	//
	//ТабличныйДокументПраво = Новый ТабличныйДокумент;
	//
	//#Область СтороныДоговора
	//
	//Если ГлаваВидна("СтороныДоговора", СтруктураВидимости) Тогда 
	//	ОбластьЗаголовок = Макет.ПолучитьОбласть("СтороныДоговораЗаголовок");
	//	ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
	//	
	//	Если РазделВиден("Организация", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Организация", Объект.Организация,,,, ТолькоЗаполненные);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("Владелец", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Владелец", Объект.Владелец,,,, ТолькоЗаполненные);
	//	КонецЕсли;
	//	
	//	Если РазделВиден("вогЮридическоеЛицо", СтруктураВидимости) Тогда 
	//		ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "вогЮридическоеЛицо", Объект.вогЮридическоеЛицо,,,, ТолькоЗаполненные);
	//	КонецЕсли;
	//	
	//КонецЕсли;	
	//
	//#КонецОбласти
	//
	//#Область Подписи
	//
	//Если Не (Объект.вогПодписи.Количество() = 0 И ТолькоЗаполненные) Тогда
	//	Если ГлаваВидна("Подписи", СтруктураВидимости) Тогда 
	//		ОбластьЗаголовок = Макет.ПолучитьОбласть("ПодписиЗаголовок");
	//		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
	//		
	//		Если Объект.вогПодписи.Количество() > 0 Тогда
	//			НовоеИмяРаздела = ?(Объект.вогПодписи.Количество() > 1,"вогПодписи","Подписант");
	//			Для каждого СтрокаТЧ Из Объект.вогПодписи Цикл
	//				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Подписант", СтрокаТЧ.Подписант,,НовоеИмяРаздела);
	//			КонецЦикла;
	//			
	//		Иначе	
	//			ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "Подписант", ТекстЗначенияНеЗаполнен("Подписант"));
	//		КонецЕсли;
	//						
	//	КонецЕсли;	
	//	
	//КонецЕсли;	
	//
	//#КонецОбласти

	//
	//#Область РазделыПраво
	//
	//ОписаниеРазделов = вогОбщегоНазначения.ПолучитьДанныеРазделаКарточки(МетаданныеОбъекта.ПолноеИмя(), 
	//	"Право", ВыборкаКлассификатор, ДополнительныеРеквизиты);
	//Для каждого ОписаниеРаздела Из ОписаниеРазделов Цикл
	//	Если ОписаниеРаздела.ДанныеРаздела.Количество() = 0 Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ЦветФона = ОписаниеРаздела.ЦветФона;
	//	
	//	ОбластьЗаголовок = Макет.ПолучитьОбласть("РазделЗаголовокПраво");
	//	ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОписаниеРаздела.РазделПредставление;
	//	ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);		   
	//	
	//	Для каждого ЭлементРаздела Из ОписаниеРаздела.ДанныеРаздела Цикл
	//		ОписаниеДанных = Неопределено;
	//		Если Не ЭлементРаздела.СоставРаздела.Свойство("ОписаниеДанных", ОписаниеДанных) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если ЭлементРаздела.ТипРаздела = "ДополнительныеРеквизиты" Тогда				
	//			ИмяЭлементаДопРеквизита = "ДополнительныйРеквизитЗначение_" 
	//				+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.НаборСвойств.УникальныйИдентификатор())), "-", "x")
	//				+ "_"
	//				+ СтрЗаменить(ВРег(Строка(ОписаниеДанных.Свойство.УникальныйИдентификатор())), "-", "x");
	//			
	//			Если РазделВиден(ИмяЭлементаДопРеквизита, СтруктураВидимости) Тогда 
	//				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ДополнительныеРеквизитыПраво", ОписаниеДанных.Значение, ОписаниеДанных.ПредставлениеРеквизита, ИмяЭлементаДопРеквизита,, ЦветФона);		
	//			КонецЕсли;	
	//			
	//		ИначеЕсли ЭлементРаздела.ТипРаздела = "Классификаторы" Тогда
	//			ИмяЭлементаКлассфикатора =  CRM_КлассификаторыВызовСервера.ИмяОсновногоЭлементаКлассификатора(ОписаниеДанных.Классификатор, ОписаниеДанных.ВидОтображения); 
	//			Если ТипЗнч(ОписаниеДанных.Значения) = Тип("Строка") Тогда
	//				ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "КлассификаторыПраво", ОписаниеДанных.Значения, ОписаниеДанных.КлассификаторПредставление, ИмяЭлементаКлассфикатора, ТолькоЗаполненные, ЦветФона);
	//			Иначе	
	//				Если ОписаниеДанных.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
	//					Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
	//						ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, "ДополнительныеРеквизитыПраво", СтруктураЗначения.ЗначениеРеквизита, СтруктураЗначения.ЗначениеПредставление, ИмяЭлементаКлассфикатора, 0, ТолькоЗаполненные, ЦветФона);
	//					КонецЦикла
	//					
	//				Иначе	
	//				
	//					ОбластьТаблицейЗаголовок = Макет.ПолучитьОбласть("КлассификаторыТаблицейЗаголовокПравоСтрока");
	//					ОбластьТаблицейЗаголовок.Параметры.КлассификаторыЗаголовок = ОписаниеДанных.КлассификаторПредставление;
	//					ОбластьТаблицейЗаголовок.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
	//					
	//					УстановитьЦветФонаОбласти(ОбластьТаблицейЗаголовок, ЦветФона);	
	//					ТабличныйДокументПраво.Вывести(ОбластьТаблицейЗаголовок);		   
	//					
	//					Для каждого СтруктураЗначения Из ОписаниеДанных.Значения Цикл
	//						ОбластьКлассификаторыТаблицейСтрока = Макет.ПолучитьОбласть("КлассификаторыТаблицейПравоСтрока");
	//						ОбластьКлассификаторыТаблицейСтрока.Параметры.КлассификаторыПравоРеквизит = СтруктураЗначения.ЗначениеПредставление;
	//						
	//						Если СтруктураЗначения.Включен Тогда
	//							Картинка = БиблиотекаКартинок.CRM_УстановитьФлажки;	
	//						Иначе
	//							Картинка = БиблиотекаКартинок.CRM_СнятьФлажки;	
	//						КонецЕсли;
	//						
	//						ОбластьКлассификаторыТаблицейСтрока.Область("КлассификаторыТаблицейПравоКартинка").Картинка = Картинка;
	//						ОбластьКлассификаторыТаблицейСтрока.Параметры.Расшифровка = ИмяЭлементаКлассфикатора;
	//						
	//						УстановитьЦветФонаОбласти(ОбластьКлассификаторыТаблицейСтрока, ЦветФона);	
	//						ТабличныйДокументПраво.Вывести(ОбластьКлассификаторыТаблицейСтрока);		   
	//						
	//					КонецЦикла;
	//					
	//				КонецЕсли;
	//				
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//	
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	//#КонецОбласти
	//		
	//ТабличныйДокументКолонки.Присоединить(ТабличныйДокументПраво);
	//
	//#КонецОбласти
	//
	//ТабличныйДокументКарточка.Вывести(ТабличныйДокументКолонки);
	//
	//Возврат ТабличныйДокументКарточка;
	
КонецФункции

Процедура ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокумент, Макет, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита = Неопределено, НовоеИмяРаздела = Неопределено, КоличествоДополнительныхСтрок = Неопределено, ТолькоЗаполненные = Ложь, ЦветФона  = Неопределено)
	
	ОбластьСтрока = Макет.ПолучитьОбласть(ИмяРаздела + "Строка");
		
	Если ТекстЗаголовкаРеквизита <> Неопределено Тогда 
		ОбластьСтрока.Параметры[ИмяРаздела + "Реквизит"] = Строка(ТекстЗаголовкаРеквизита) + ":";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗначенияРеквизита) Тогда 
		ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияРеквизита;
	Иначе
		Если Не ТолькоЗаполненные Тогда
			ОбластьСтрока.Параметры[ИмяРаздела] = ТекстЗначенияНеЗаполнен(ИмяРаздела);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НовоеИмяРаздела = Неопределено Тогда 
		ОбластьСтрока.Параметры.Расшифровка = ИмяРаздела;
	Иначе
		ОбластьСтрока.Параметры.Расшифровка = НовоеИмяРаздела;
	КонецЕсли;
	
	УстановитьЦветФонаОбласти(ОбластьСтрока, ЦветФона);	
	ТабличныйДокумент.Вывести(ОбластьСтрока);
	
	Если КоличествоДополнительныхСтрок = Неопределено Тогда
		КоличествоДополнительныхСтрок = 0;
		КоличествоДополнительныхСтрок = КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗначенияРеквизита, ТекстЗаголовкаРеквизита);
		
	КонецЕсли;
	
	Счетчик = КоличествоДополнительныхСтрок;
	ОбластьДопСтрока = Макет.ПолучитьОбласть(ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела));
	УстановитьЦветФонаОбласти(ОбластьДопСтрока, ЦветФона);	
	
	Пока Счетчик > 0 Цикл
		Счетчик = Счетчик - 1;
		ТабличныйДокумент.Вывести(ОбластьДопСтрока);
	КонецЦикла;
	
	ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяРаздела + "Строка", КоличествоДополнительныхСтрок);
	                                                                                                           		
КонецПроцедуры

Функция ТекстЗначенияНеЗаполнен(ИмяРаздела)

	Если ИмяРаздела = "Наименование" Тогда
		Возврат НСтр("ru = '<не указано>'");	
	ИначеЕсли ИмяРаздела = "ДатаДоговора" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "вогДатаОкончанияДоговора" Тогда
		Возврат НСтр("ru = 'Бессрочный'");
	ИначеЕсли ИмяРаздела = "ВидДоговора" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "вогТипДоговора" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "вогНаправлениеДеятельности" Тогда
		Возврат НСтр("ru = '<не указано>'");
	ИначеЕсли ИмяРаздела = "вогФормаДоговора" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "ВалютаРасчетов" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "ВидЦен" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "ВидСкидкиНаценки" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "Организация" Тогда
		Возврат НСтр("ru = '<не указана>'");
	ИначеЕсли ИмяРаздела = "Владелец" Тогда
		Возврат НСтр("ru = '<не указан>'");
	ИначеЕсли ИмяРаздела = "вогЮридическоеЛицо" Тогда
		Возврат НСтр("ru = '<не указан>'");

	ИначеЕсли ИмяРаздела = "КлассификаторыЛево" Тогда
		Возврат НСтр("ru = '<значения не заданы>'");	
	ИначеЕсли ИмяРаздела = "КлассификаторыПраво" Тогда
		Возврат НСтр("ru = '<значения не заданы>'");	
	ИначеЕсли ИмяРаздела = "ДополнительныеРеквизитыЛево" Тогда
		Возврат НСтр("ru = '<значение не задано>'");		
	ИначеЕсли ИмяРаздела = "ДополнительныеРеквизитыПраво" Тогда
		Возврат НСтр("ru = '<значение не задано>'");			
		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЦветФонаОбласти(ИсходнаяОбласть, ЦветФона)

	Если ЦветФона <> Неопределено Тогда
		ВсяОбласть	     = ИсходнаяОбласть.Область();
		Область   	     = ИсходнаяОбласть.Область(1, 2, 1, ВсяОбласть.Право - 1);
		Область.ЦветФона = ЦветФона;
		
	КонецЕсли;

КонецПроцедуры

Функция Отступ(Количество)

	Результат = "";
	Для Сч = 1 По Количество Цикл
		Результат = Результат + " ";
	КонецЦикла;	

	Возврат Результат;
	
КонецФункции // Отступ()

Функция КоличествоДополнительныхСтрок(ТабличныйДокумент, ИмяРаздела, ТекстЗаполненияЗначения, ТекстЗаполненияРеквизита)
	
	ШиринаКолонки = 2.38;
	КоличествоКолонокВЗначенииРеквизита = 12;
	ШиринаЗначенияРеквизита = КоличествоКолонокВЗначенииРеквизита * ШиринаКолонки;
	ЧислоСтрокЗначения = КоличествоСтрок(ШиринаЗначенияРеквизита, ТекстЗаполненияЗначения);
		
	ЧислоСтрокСвойства = 0;
	Если ЗначениеЗаполнено(ТекстЗаполненияРеквизита) Тогда
		КоличествоКолонокВЗаголовкеРеквизита = 8;
		ШиринаЗаголовкаРеквизита = ШиринаКолонки * КоличествоКолонокВЗаголовкеРеквизита;
		ЧислоСтрокСвойства = КоличествоСтрок(ШиринаЗаголовкаРеквизита, ТекстЗаполненияРеквизита);
	КонецЕсли;
	
	ЧислоСтрок = Макс(ЧислоСтрокЗначения, ЧислоСтрокСвойства);
	
	Если ЧислоСтрок = 0 Тогда 
		Возврат 0;
	КонецЕсли;
	
	Возврат ЧислоСтрок - 1;	
	
КонецФункции

Процедура ОбъединитьРазделСоСтрокамиНиже(ТабличныйДокумент, ИмяОбласти, КоличествоДопСтрок)
	
	Если КоличествоДопСтрок = 0 Тогда 
		Возврат;
	КонецЕсли;

	Область = ТабличныйДокумент.Область(ИмяОбласти);	
	Область.Разъединить();
	Область.Имя = Неопределено;
	АдресОбласти = Область.Имя;
	СтруктураАдреса = СтруктураАдреса(АдресОбласти);
	
	АдресКолонкиЗаголовкаНачало = СтруктураАдреса.АдресКолонкиНачало + 1; // + 1, т.к. слева колонка-отступ
	АдресКолонкиЗаголовкаКонец = АдресКолонкиЗаголовкаНачало + 7; // +7, т.к. заголовок занимает 8 колонок
	АдресКолонкиЗначенияНачало = АдресКолонкиЗаголовкаКонец + 1;
	
	// В левой колонке карточки разность должна быть равна 20, в правой - 21
	Если СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 20 Тогда
		АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец;
	ИначеЕсли СтруктураАдреса.АдресКолонкиКонец - СтруктураАдреса.АдресКолонкиНачало = 21 Тогда
		АдресКолонкиЗначенияКонец = СтруктураАдреса.АдресКолонкиКонец - 1;
	КонецЕсли;
	
	АдресСтрокиНачало = СтруктураАдреса.АдресСтрокиНачало; 
	АдресСтрокиКонец = СтруктураАдреса.АдресСтрокиКонец;
	
	//Для заголовка
	НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗаголовкаНачало + ":" 
				+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗаголовкаКонец;
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	Область.Объединить();
	
	//Для значения
	НовыйАдрес = "R" + АдресСтрокиНачало + "C" + АдресКолонкиЗначенияНачало + ":" 
				+ "R" + (АдресСтрокиКонец + КоличествоДопСтрок) + "C" + АдресКолонкиЗначенияКонец;
	Область = ТабличныйДокумент.Область(НовыйАдрес);	
	Область.Объединить();
		
КонецПроцедуры

Функция СтруктураАдреса(Адрес)
	
	МассивАдресОбласти = СтрРазделить(Адрес, ":");
	Если МассивАдресОбласти.Количество() <> 2 Тогда
		// Это значит, что строка состоит из одной колонки, процедура объединения с такими не работает
		Возврат Неопределено;
	КонецЕсли;
	
	АдресНачало = МассивАдресОбласти[0];
	МассивАдресНачало = СтрРазделить(АдресНачало, "C");
	АдресСтрокиНачало = СтрЗаменить(МассивАдресНачало[0], "R", "");
	АдресКолонкиНачало = МассивАдресНачало[1];
	
	АдресКонец = МассивАдресОбласти[1];
	МассивАдресКонец = СтрРазделить(АдресКонец, "C");
	АдресСтрокиКонец = СтрЗаменить(МассивАдресКонец[0], "R", "");
	АдресКолонкиКонец = МассивАдресКонец[1];

	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("АдресСтрокиНачало", 	Число(АдресСтрокиНачало));
	СтруктураАдреса.Вставить("АдресКолонкиНачало", 	Число(АдресКолонкиНачало));
	СтруктураАдреса.Вставить("АдресСтрокиКонец", 	Число(АдресСтрокиКонец));
	СтруктураАдреса.Вставить("АдресКолонкиКонец", 	Число(АдресКолонкиКонец));
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция ПолучитьИмяОбластиДопСтрокиПоИмениРаздела(ИмяРаздела)
		
	Если ИмяРаздела = "ВидДоговора"
		Или ИмяРаздела = "вогТипДоговора"
		Или ИмяРаздела = "вогНаправлениеДеятельности"
		Или ИмяРаздела = "вогФормаДоговора"
		Или ИмяРаздела = "ВалютаРасчетов"
		Или ИмяРаздела = "РасчетыВУсловныхЕдиницах"
		Или ИмяРаздела = "ВидЦен"
		Или ИмяРаздела = "ВидСкидкиНаценки" Тогда
		Возврат "ДопСтрокаЛево";
	Иначе
		Возврат "ДопСтрокаПраво";
	КонецЕсли;

	
КонецФункции

Функция КоличествоСтрок(ШиринаОбласти, Строка)
	
	 Если Не ЗначениеЗаполнено(Строка) Тогда 
		Возврат 0;
	КонецЕсли;
	
	СредняяШиринаСимвола = 0.75;
	
	МассивСлов = СтрРазделить(Строка, " ");
		
	КоличествоСтрок = 1; // = 1, т.к. проверку на заполненность мы сделали выше, а значит одна строка нужна точно
	ТекущаяСтрока = "";
	
	Для Каждого Слово Из МассивСлов Цикл
		
		ТекущаяСтрока = ТекущаяСтрока + Слово + " ";
		Если СтрДлина(ТекущаяСтрока) * СредняяШиринаСимвола > ШиринаОбласти Тогда
			КоличествоСтрок = КоличествоСтрок + 1;
			ТекущаяСтрока = Слово + " ";
		КонецЕсли;
		
	КонецЦикла;	 
	 	 
	Возврат КоличествоСтрок;
	
КонецФункции

Функция РазделВиден(ИмяРаздела, СтруктураВидимости)
	
	Видимость = Истина;
	Если СтруктураВидимости.Свойство(ИмяРаздела) Тогда 
		Видимость = СтруктураВидимости[ИмяРаздела];	
	КонецЕсли;
	
	Возврат Видимость;
	
КонецФункции

Функция ГлаваВидна(ИмяГлавы, СтруктураВидимости, КоличествоДопРеквизитов = 0, КоличествоЗначенийКлассификаторов = 0)
	
	Если ИмяГлавы = "Описание" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "ЦеныИСкидки" Тогда
		Возврат РазделВиден("ВалютаРасчетов", СтруктураВидимости)
					Или РазделВиден("РасчетыВУсловныхЕдиницах", СтруктураВидимости)
					Или РазделВиден("ВидЦен", СтруктураВидимости)
					Или РазделВиден("ВидСкидкиНаценки", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "СтороныДоговора" Тогда
		Возврат РазделВиден("Организация", СтруктураВидимости)
					Или РазделВиден("Владелец", СтруктураВидимости)
					Или РазделВиден("вогЮридическоеЛицо", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "Подписи" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяГлавы = "Классификаторы" Тогда
		Возврат КоличествоЗначенийКлассификаторов > 0 И ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");		
	КонецЕсли;
	
	Если ИмяГлавы = "ДополнительныеРеквизиты" Тогда
		Возврат КоличествоДопРеквизитов > 0 И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");		
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область МеханизмыНастройкиРаботыСРеквизитами

// Возвращает имена реквизитов, которые в настоящий момент отключены функциональными опциями.
//
// Возвращаемое значение:
//	Массив, элементы - Строка - имена реквизитов
//
Функция РеквизитыОтключенныеПоФО() Экспорт
	
	Результат = Новый Массив;
	
	// ++ VOG Солодов В.В. 09.09.2019 task 636
	Результат.Добавить("ВидЦен");
	Результат.Добавить("ВидСкидкиНаценки");
	// -- VOG Солодов В.В. 09.09.2019
	
	Возврат Результат;
	
КонецФункции

Функция ЗависимостьРеквизитовОтВидаИТипаДоговора(ВидДоговора,
												ТипДоговора) Экспорт
			
	// Сформировать таблицу реквизитов для заполнения.
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
	ТаблицаРеквизитов.Колонки.Добавить("ДействиеСРеквизитом");
	
	Реквизиты = Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты;
	
	//ПРИМЕР
	//НоваяСтрока = ТаблицаРеквизитов.Добавить();
	//НоваяСтрока.Реквизит            = Реквизиты.вогКоллекцияНоменклатуры;
	//НоваяСтрока.ДействиеСРеквизитом = ?(ЭтоТовар, "Добавить", "Удалить");
	
	
	Для Каждого Реквизит из Реквизиты Цикл
		Если ТаблицаРеквизитов.Найти(Реквизит, "Реквизит") = Неопределено Тогда
			НоваяСтрока = ТаблицаРеквизитов.Добавить();
			НоваяСтрока.Реквизит            = Реквизит;
			НоваяСтрока.ДействиеСРеквизитом = "Добавить";
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу дополнительные реквизиты для ДоговорыКонтрагентов
//
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//		* ИмяРеквизита - Строка - наименование свойства
//		* ПредставлениеРеквизита - Строка - заголовок свойства
//		* ЭтоДопРеквизит - Булево - всегда ИСТИНА
//		* ЭтоОбщийРеквизит - Булево - признак, что доп. реквизит входит в набор Справочник_ДоговорыКонтрагентов
//		* ЗаполнятьОбязательно - Булево
//		* НаборСвойств - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений - набор свойств, для которого был создан доп. реквизит
//		* Тип - ОписаниеТипов
//
Функция ВсеДополнительныеРеквизиты() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Свойство");
		Таблица.Колонки.Добавить("ЭтоДопРеквизит");
		Возврат Таблица;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка КАК Набор,
	|	ДополнительныеРеквизиты.Свойство.Наименование КАК ИмяРеквизита,
	|	ДополнительныеРеквизиты.Свойство.Заголовок КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ВЫБОР
	|		КОГДА ДополнительныеРеквизиты.Ссылка = &ОбщийНабор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОбщийРеквизит,
	|	ДополнительныеРеквизиты.Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно,
	|	ДополнительныеРеквизиты.Свойство.НаборСвойств КАК НаборСвойств,
	|	ДополнительныеРеквизиты.Свойство.ТипЗначения КАК Тип
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка = &ОбщийНабор";
		
	ОбщийНабор = "ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ДоговорыКонтрагентов)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбщийНабор", ОбщийНабор);  	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	 
КонецФункции

Функция ПравоДоступаНаОбъектМетаданныхПоРеквизиту(Право, РеквизитОбъектМетаданных)

	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивтиповДляПроверки = РеквизитОбъектМетаданных.Тип.Типы();
	Для Каждого Тип Из МассивтиповДляПроверки Цикл
		
		//Если вогОбщегоНазначения.ЭтоПримитивныйТип(Тип) Тогда
		//	Продолжить;
		//КонецЕсли;
		//
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных <> Неопределено
			И Не ПравоДоступа(Право, ОбъектМетаданных) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ВидимостьРеквизита(Реквизит, ИмяРеквизита, РеквизитыОтключенныеПоФО, РежимВидимостиПоказатьТолькоВажные,
	ТаблицаОбязательныхРеквизитов)
	
	Если Не ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Возврат ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Реквизит)
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или ТаблицаОбязательныхРеквизитов.Найти(ИмяРеквизита, "Наименование") <> Неопределено)
	Иначе
		Возврат ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты[ИмяРеквизита])
				И ПравоДоступаНаОбъектМетаданныхПоРеквизиту("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов.Реквизиты[ИмяРеквизита])
				И РеквизитыОтключенныеПоФО.Найти(ИмяРеквизита) = Неопределено
				И (Не РежимВидимостиПоказатьТолькоВажные
					Или ТаблицаОбязательныхРеквизитов.Найти(ИмяРеквизита, "Наименование") <> Неопределено)
	КонецЕсли;
	
КонецФункции

Функция ТаблицаНастроекРеквизитов()

	ТаблицаНастроекРеквизитов = Новый ТаблицаЗначений;
	ТаблицаНастроекРеквизитов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));	
		
	Возврат ТаблицаНастроекРеквизитов;
	
КонецФункции

// Возвращает настройки видимости и заголовков элементов формы. Используется для построения формы и табличного
// документа карточки номенклатуры.
// Параметры:
//  Объект - СправочникОбъект.ДоговорыКонтрагентов, ДанныеФормыСтруктура - элемент, для которого нужно отработать логику связи реквизитов
//	РежимВидимостиПоказатьТолькоВажные 	- Булево - признак отображения основных реквизитов
//
// Возвращаемое значение:
//  Структура - структура с ключами:
//		* ВидимостьЭлементов - структура видимости элементов
//		* ЗаголовкиЭлементов - структура заголовков элементов
//
Функция НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные = Ложь) Экспорт
	
	НастройкиВидимостиИЗаголовков = Новый Структура;
	
	ВидимостьЭлементов = СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные);
	// ++ VOG Солодов В.В. 09.09.2019 task 636
	// Закомментировал
	// До изменения
	//УстановитьПривилегированныйРежим(Истина);
	//ЗаголовкиЭлементов = СтруктураЗаголовковЭлементовФормы(Объект, ВидимостьЭлементов);
	//УстановитьПривилегированныйРежим(Ложь);
	// -- VOG Солодов В.В. 09.09.2019
	
	НастройкиВидимостиИЗаголовков.Вставить("ВидимостьЭлементов", ВидимостьЭлементов);
	// ++ VOG Солодов В.В. 09.09.2019 task 636
	НастройкиВидимостиИЗаголовков.Вставить("ЗаголовкиЭлементов", Новый Структура);
	// До изменения
	//НастройкиВидимостиИЗаголовков.Вставить("ЗаголовкиЭлементов", ЗаголовкиЭлементов);
	// -- VOG Солодов В.В. 09.09.2019
		
	Возврат НастройкиВидимостиИЗаголовков;
	
КонецФункции

// Возвращает структуру с видимостью элементов.
// Параметры:
//	Объект - СправочникОбъект.ДоговорыКонтрагентов - элемент справочника ДоговорыКонтрагентов
//	РежимВидимостиПоказатьТолькоВажные - Булево - признак отображения основных реквизитов
//
// Возвращаемое значение:
//	Структура - струтура видимости элементов. Ключ - имя элемента, значения - видимость
//
Функция СтруктураВидимостиЭлементовФормы(Объект, РежимВидимостиПоказатьТолькоВажные)
	
	СтруктураВидимости = Новый Структура;
	
	#Область ФункциональныеОпции
	
	ИспользоватьКлассификаторы		 = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");
	
	#КонецОбласти
	
	
	РеквизитыОтключенныеПоФО  = РеквизитыОтключенныеПоФО();
	ТаблицаОбязательныхРеквизитов = ТаблицаНастроекРеквизитов();
	
	НастройкиРеквизитов = ЗависимостьРеквизитовОтВидаИТипаДоговора(Объект.ВидДоговора,
																Объект.вогТипДоговора);
																
	Для Каждого СтрТабл из НастройкиРеквизитов Цикл
		ИмяРеквизита = СтрТабл.Реквизит.Имя;
		СтруктураВидимости.Вставить(ИмяРеквизита, СтрТабл.ДействиеСРеквизитом = "Добавить"
			И ВидимостьРеквизита(ИмяРеквизита,
							ИмяРеквизита,
							РеквизитыОтключенныеПоФО,
							РежимВидимостиПоказатьТолькоВажные,
							ТаблицаОбязательныхРеквизитов));
	КонецЦикла;
		
	#Область Описание
	
	// ++ VOG Солодов В.В. 09.09.2019 task 636
	// Закомментировал
	// До изменения
	//ГиперссылкаПерейтиФайлыВидимость = ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентовПрисоединенныеФайлы)
	//	И Не РежимВидимостиПоказатьТолькоВажные;
	//	
	//СтруктураВидимости.Вставить("ГиперссылкаПерейтиИзображения", 	ГиперссылкаПерейтиФайлыВидимость 
	//	И вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка));
	//				
	//СтруктураВидимости.Вставить("ГиперссылкаПерейтиФайлы", 			ГиперссылкаПерейтиФайлыВидимость);
	//
	//СтруктураВидимости.Вставить("ГиперссылкаПерейтиПротоколыРазногласий", 	НЕ РежимВидимостиПоказатьТолькоВажные);
	//
	//СтруктураВидимости.Вставить("вогПолучитьКодИзУчетнойСистемы", 			НЕ РежимВидимостиПоказатьТолькоВажные);
	// -- VOG Солодов В.В. 09.09.2019
	СтруктураВидимости.Вставить("ДекорацияРазделительДатыДоговора", 		НЕ РежимВидимостиПоказатьТолькоВажные);
	
	#КонецОбласти
	
	#Область Цены
	
	СтруктураВидимости.Вставить("РасчетыВУсловныхЕдиницах",  	Ложь);
	
	#КонецОбласти
	
	
	#Область СтороныДоговора
	
	СтруктураВидимости.Вставить("Владелец",  	НЕ РежимВидимостиПоказатьТолькоВажные);
	
	#КонецОбласти 
	
	
	
	#Область Подписи
	
	// ++ VOG Солодов В.В. 09.09.2019 task 636
	// Закомментировал
	// До изменения
	//СтруктураВидимости.Вставить("ПодписиСписком", 		НЕ РежимВидимостиПоказатьТолькоВажные);
	//СтруктураВидимости.Вставить("Подписант", 			НЕ РежимВидимостиПоказатьТолькоВажные);
	//СтруктураВидимости.Вставить("вогПодписи", 			НЕ РежимВидимостиПоказатьТолькоВажные);
	// -- VOG Солодов В.В. 09.09.2019

	#КонецОбласти 
	

	
	#Область ГруппаОбязательныеПоля
	
	СтруктураВидимости.Вставить("ГруппаОбязательныеПоля", РежимВидимостиПоказатьТолькоВажные);

	#КонецОбласти



	
	#Область Классификаторы
	
	// ++ VOG Солодов В.В. 09.09.2019 task 636
	// Закомментировал
	// До изменения
	//ГиперссылкаПерейтиЗначенияКлассификаторовВидимость = ИспользоватьКлассификаторы
	//	И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.CRM_ОбъектыЗначенийКлассификаторов)
	//	И ЗначениеЗаполнено(Объект.Ссылка)
	//	И Не РежимВидимостиПоказатьТолькоВажные;
	//
	//СтруктураВидимости.Вставить("ГиперссылкаПерейтиЗначенияКлассификаторов", 
	//	ГиперссылкаПерейтиЗначенияКлассификаторовВидимость);
	// -- VOG Солодов В.В. 09.09.2019
	
	#КонецОбласти
		
	
	
	#Область ДополнительныеРеквизиты

	// Установка видимости для дополнительных реквизитов.
	ВсеДополнительныеРеквизитыНоменклатуры = ВсеДополнительныеРеквизиты();
	Для Каждого СтрокаТаблицыДопРеквизитов Из ВсеДополнительныеРеквизитыНоменклатуры Цикл
		ИмяРеквизита     = СтрокаТаблицыДопРеквизитов.ИмяРеквизита;
		ИмяЭлементаФормы = "ДополнительныйРеквизитЗначение_"
			+ СтрЗаменить(?(СтрокаТаблицыДопРеквизитов.ЭтоОбщийРеквизит,
					ВРег(Строка(СтрокаТаблицыДопРеквизитов.Набор.УникальныйИдентификатор())),
					ВРег(Строка(СтрокаТаблицыДопРеквизитов.НаборСвойств.УникальныйИдентификатор()))),
				"-",
				"x")
			+ "_"
			+ СтрЗаменить(ВРег(Строка(СтрокаТаблицыДопРеквизитов.Свойство.УникальныйИдентификатор())), "-", "x");
		
		СтруктураВидимости.Вставить(ИмяЭлементаФормы, ВидимостьРеквизита(СтрокаТаблицыДопРеквизитов,
																			ИмяРеквизита,
																			РеквизитыОтключенныеПоФО,
																			РежимВидимостиПоказатьТолькоВажные,
																			ТаблицаОбязательныхРеквизитов));
		
	КонецЦикла;

	#КонецОбласти
			
	Возврат СтруктураВидимости;
	
КонецФункции

// Возвращает структуру с заголовками элементов.
// Параметры:
//	Объект - СправочникОбъект.ДоговорыКонтрагентов - элемент справочника ДоговорыКонтрагентов
//	СтруктураВидимостиЭлементов - Структура - струтура видимости элементов
//
// Возвращаемое значение:
//	Структура - струтура заголовков элементов. Ключ - имя элемента, значения - заголовок
//
Функция СтруктураЗаголовковЭлементовФормы(Объект, СтруктураВидимостиЭлементов)
	
	ИмяСправочникаХранилищаФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(Объект.Ссылка);
	ПолноеИмяСправочника = "Справочник." + ИмяСправочникаХранилищаФайлов;
	
	СтруктураЗаголовков = Новый Структура;
			
	#Область ЗаголовокиГиперссылок
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентовПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентовПрисоединенныеФайлы КАК ДоговорыКонтрагентовПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК ПрисоедниненныеФайлыОбъектовПоВидам
	|		ПО ДоговорыКонтрагентовПрисоединенныеФайлы.Ссылка = ПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл
	|ГДЕ
	|	ДоговорыКонтрагентовПрисоединенныеФайлы.ВладелецФайла = &Договор
	|	И НЕ ДоговорыКонтрагентовПрисоединенныеФайлы.ПометкаУдаления
	|	И ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла.ТипФайла = ЗНАЧЕНИЕ(Перечисление.вогТипыПрисоединенныхФайлов.Изображение)
	|	И ПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла.Принадлежность = &Принадлежность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентовПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентовПрисоединенныеФайлы КАК ДоговорыКонтрагентовПрисоединенныеФайлы
	|ГДЕ
	|	ДоговорыКонтрагентовПрисоединенныеФайлы.ВладелецФайла = &Договор
	|	И НЕ ДоговорыКонтрагентовПрисоединенныеФайлы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК ОбъектыЗначенийКлассификаторов
	|ГДЕ
	|	ОбъектыЗначенийКлассификаторов.Объект = &Договор
	|	И ОбъектыЗначенийКлассификаторов.Аналитика В(&ЗначенияИспользуемыхАналитик)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПротоколРазногласий.Ссылка
	|ИЗ
	|	Документ.вогПротоколРазногласий КАК ПротоколРазногласий
	|ГДЕ
	|	ПротоколРазногласий.ДоговорКонтрагента = &Договор
	|	И НЕ ПротоколРазногласий.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Договор", Объект.Ссылка);
	Запрос.УстановитьПараметр("Принадлежность", ПолноеИмяСправочника);
	Запрос.УстановитьПараметр("ЗначенияИспользуемыхАналитик", CRM_КлассификаторыВызовСервера.ЗначенияИспользуемыхАналитикКлассификаторов().МассивЗначений);
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборки = Запрос.ВыполнитьПакет();
	
	УстановитьПривилегированныйРежим(Ложь);
	ВидимостьЭлемента = Ложь;
				

	
	Если РазделВиден("ГиперссылкаПерейтиИзображения", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[0].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Изображения'") + " (" + Количество + ")",,,,"Файлы");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиИзображения", ЗаголовокГиперссылки);		
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиФайлы", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[1].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Все файлы'") + " (" + Количество + ")",,,,"Файлы");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиФайлы", ЗаголовокГиперссылки);		
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиЗначенияКлассификаторов", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[2].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Значения классификаторов'") + " (" + Количество + ")",,,,"ЗначенияКлассификаторов");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиЗначенияКлассификаторов", ЗаголовокГиперссылки);
	КонецЕсли;
	
	Если РазделВиден("ГиперссылкаПерейтиПротоколыРазногласий", СтруктураВидимостиЭлементов) Тогда
		Количество = Выборки[3].Выбрать().Количество();
		ЗаголовокГиперссылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Протоколы разногласий'") + " (" + Количество + ")",,,,"ПротоколыРазногласий");
		СтруктураЗаголовков.Вставить("ГиперссылкаПерейтиПротоколыРазногласий", ЗаголовокГиперссылки);
	КонецЕсли;
	
	
	#КонецОбласти
	
	Возврат СтруктураЗаголовков;

КонецФункции

// ++ VOG Солодов В.В. 06.09.2019 task 636
#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
// 	КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// ++ VOG Солодов В.В. 12.05.2020 CRM-631 + CRM-658
	ПолноправныйПользователь = РольДоступна("ПолныеПрава");
	// Комплект документов с настройкой...
	Если РольДоступна("вогПечатьОригиналаДоговора") Или ПолноправныйПользователь Тогда
		
		// Тип договора - обычный
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик 						= "CRM_УправлениеПечатьюКлиент.ПечатьКомплектаДокументовСНастройкой";
		КомандаПечати.МенеджерПечати 					= "";
		КомандаПечати.Идентификатор 					= "ДоговорПоставки";
		КомандаПечати.Представление 					= НСтр("ru = 'Договор поставки'");
		КомандаПечати.ПроверкаПроведенияПередПечатью 	= Ложь;
		КомандаПечати.Порядок 							= 1;
		КомандаПечати.ДополнительныеПараметры.Вставить("ТолькоПечать", Истина);
		
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
			КомандаПечати,
			"вогТипДоговора",
			Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовараРазовый,
			ВидСравненияКомпоновкиДанных.НеРавно);
		
		Если Не ПолноправныйПользователь Тогда
			
			УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
				КомандаПечати,
				"вогФормаДоговора",
				Перечисления.вогТипыФормДоговоров.НашаФорма,
				ВидСравненияКомпоновкиДанных.Равно);
			
		КонецЕсли;
		
		// Тип договора - разовый
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор 					= "ДоговорПоставкиРазовый";
		КомандаПечати.Представление 					= НСтр("ru = 'Договор поставки'");
		КомандаПечати.Порядок 							= 1;
		КомандаПечати.ДополнительныеПараметры.Вставить("ТолькоПечать", Истина);
		
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
			КомандаПечати,
			"вогТипДоговора",
			Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовараРазовый,
			ВидСравненияКомпоновкиДанных.Равно);
			
		Если Не ПолноправныйПользователь Тогда
			
			УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
				КомандаПечати,
				"вогФормаДоговора",
				Перечисления.вогТипыФормДоговоров.НашаФорма,
				ВидСравненияКомпоновкиДанных.Равно);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Тип договора - обычный
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик 						= "CRM_УправлениеПечатьюКлиент.ПечатьКомплектаДокументовСНастройкой";
	КомандаПечати.МенеджерПечати 					= "";
	КомандаПечати.Идентификатор 					= "ДоговорПоставкиСПодписями";
	КомандаПечати.Представление 					= НСтр("ru = 'Договор поставки с подписями'");
	КомандаПечати.ПроверкаПроведенияПередПечатью 	= Ложь;
	КомандаПечати.Порядок 							= 2;
	КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
	КомандаПечати.ДополнительныеПараметры.Вставить("ТолькоОтправка", Истина);
	
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
			КомандаПечати,
			"вогТипДоговора",
			Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовараРазовый,
			ВидСравненияКомпоновкиДанных.НеРавно);
	
	Если Не ПолноправныйПользователь Тогда
		
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
			КомандаПечати,
			"вогФормаДоговора",
			Перечисления.вогТипыФормДоговоров.НашаФорма,
			ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
	// Тип договора - разовый
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор 					= "ДоговорПоставкиРазовыйСподписями";
	КомандаПечати.Представление 					= НСтр("ru = 'Договор поставки с подписями'");
	КомандаПечати.Порядок 							= 1;
	КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
	КомандаПечати.ДополнительныеПараметры.Вставить("ТолькоОтправка", Истина);
	
	УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
			КомандаПечати,
			"вогТипДоговора",
			Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовараРазовый,
			ВидСравненияКомпоновкиДанных.Равно);
	
	Если Не ПолноправныйПользователь Тогда
		
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
			КомандаПечати,
			"вогФормаДоговора",
			Перечисления.вогТипыФормДоговоров.НашаФорма,
			ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	// До изменения
	//Если РольДоступна("вогПечатьОригиналаДоговора") или РольДоступна("ПолныеПрава") тогда
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "ДоговорПоставки";
	//	КомандаПечати.Представление = НСтр("ru = 'Договор поставки'");
	//	КомандаПечати.МестоРазмещения = "ПодменюДоговор";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "КоммерческоеСоглашениеПлитка";
	//	КомандаПечати.Представление = НСтр("ru = 'Коммерческое соглашение (плитка)'");
	//	КомандаПечати.МестоРазмещения = "ПодменюДоговор";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "КоммерческоеСоглашениеОбои";
	//	КомандаПечати.Представление = НСтр("ru = 'Коммерческое соглашение (обои)'");
	//	КомандаПечати.МестоРазмещения = "ПодменюДоговор";
	//	
	//	//++ VOG Ульянов И.В. 27.04.2020 CRM-599
	//	//Приложение 1
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение1Обои";
	//	КомандаПечати.Представление = НСтр("ru = 'Форма Заказа (Обои)'");
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение1";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение1Плитка";
	//	КомандаПечати.Представление = НСтр("ru = 'Форма Заказа (Плитка)'");
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение1";
	//	
	//	//Приложение 2	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение2Обои";
	//	КомандаПечати.Представление = НСтр("ru = 'Адреса доставки (Обои)'");  //VOG Ульянов И.В. 10.04.2020 CRM-537
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение2";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение2Плитка";
	//	КомандаПечати.Представление = НСтр("ru = 'Адреса доставки (Плитка)'");  //VOG Ульянов И.В. 10.04.2020 CRM-537
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение2";
	//	
	//	//Приложение 4
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение4Обои";
	//	КомандаПечати.Представление = НСтр("ru = 'Условия предоставления Премии (Обои)'");  //VOG Ульянов И.В. 09.04.2020 CRM-565
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение4";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение4Плитка";
	//	КомандаПечати.Представление = НСтр("ru = 'Условия предоставления Премии (Плитка)'");  //VOG Ульянов И.В. 09.04.2020 CRM-565
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение4";
	//	
	//	//Приложение 5	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение5Обои";
	//	КомандаПечати.Представление = НСтр("ru = 'Оператор ЭДО (Обои)'");  //VOG Ульянов И.В. 10.04.2020 CRM-561
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение5";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение5Плитка";
	//	КомандаПечати.Представление = НСтр("ru = 'Оператор ЭДО (Плитка)'");  //VOG Ульянов И.В. 10.04.2020 CRM-561
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение5";
	//	
	//	//Приложение 6	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение6Обои";
	//	КомандаПечати.Представление = НСтр("ru = 'Форма соглашения об изменении стоимости (Обои)'");
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение6";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение6Плитка";
	//	КомандаПечати.Представление = НСтр("ru = 'Форма соглашения об изменении стоимости (Плитка)'");
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение6";
	//	
	//	//Доп соглашение нормы боя	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "ДопСоглашениеНормаБоя";
	//	КомандаПечати.Представление = НСтр("ru = 'Дополнительное соглашение по норме боя'");
	//	КомандаПечати.МестоРазмещения = "ПодменюДопСоглашениеНормаБоя";
	//	//-- VOG Ульянов И.В. 27.04.2020 CRM-599
	//	
	//КонецЕсли;	
	//// ++ VOG Ульянов И.В. 30.09.2019 task 714
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.Идентификатор = "ДоговорПоставкиСПодписями";
	//КомандаПечати.Представление = НСтр("ru = 'Договор поставки с подписями'");
	//КомандаПечати.МестоРазмещения = "ПодменюДоговор";
	//Направление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(),"CRM_НаправлениеДеятельности");
	//Если (ЗначениеЗаполнено(Направление) и Направление = Справочники.НаправленияДеятельности.Плитка)  или НЕ ЗначениеЗаполнено(Направление) 
	//	ИЛИ РольДоступна("вогПечатьОригиналаДоговора") или РольДоступна("ПолныеПрава") тогда
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "КоммерческоеСоглашениеСПодписямиПлитка";
	//	КомандаПечати.Представление = НСтр("ru = 'Коммерческое соглашение с подписями (плитка)'");
	//	КомандаПечати.МестоРазмещения = "ПодменюДоговор";
	//	
	//	// ++ VOG Ульянов И.В. 27.04.2020 CRM-599
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение1СПодписямиПлитка";
	//	КомандаПечати.Представление = НСтр("ru = 'Форма Заказа с подписями (Плитка)'");
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение1";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение2СПодписямиПлитка";
	//	КомандаПечати.Представление = НСтр("ru = 'Адреса доставки с подписями (Плитка)'");  //VOG Ульянов И.В. 10.04.2020 CRM-537
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение2";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение4СПодписямиПлитка";
	//	КомандаПечати.Представление = НСтр("ru = 'Условия предоставления Премии с подписями (Плитка)'");  //VOG Ульянов И.В. 09.04.2020 CRM-565
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение4";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение5СПодписямиПлитка";
	//	КомандаПечати.Представление = НСтр("ru = 'Оператор ЭДО с подписями (Плитка)'");  //VOG Ульянов И.В. 10.04.2020 CRM-561
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение5";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение6СПодписямиПлитка";
	//	КомандаПечати.Представление = НСтр("ru = 'Форма соглашения об изменении стоимости с подписями (Плитка)'");
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение6";
	//	
	//	//Доп соглашение нормы боя	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "ДопСоглашениеНормаБояСПодписями";
	//	КомандаПечати.Представление = НСтр("ru = 'Дополнительное соглашение по норме боя с подписями'");
	//	КомандаПечати.МестоРазмещения = "ПодменюДопСоглашениеНормаБоя";
	//	// -- VOG Ульянов И.В. 27.04.2020 CRM-599
	//	
	//КонецЕсли;
	//Если (ЗначениеЗаполнено(Направление) и Направление = Справочники.НаправленияДеятельности.Обои) или НЕ ЗначениеЗаполнено(Направление) 
	//	ИЛИ РольДоступна("вогПечатьОригиналаДоговора") или РольДоступна("ПолныеПрава") тогда
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "КоммерческоеСоглашениеСПодписямиОбои";
	//	КомандаПечати.Представление = НСтр("ru = 'Коммерческое соглашение с подписями (обои)'");
	//	КомандаПечати.МестоРазмещения = "ПодменюДоговор";
	//	
	//	// ++ VOG Ульянов И.В. 27.04.2020 CRM-599
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение1СПодписямиОбои";
	//	КомандаПечати.Представление = НСтр("ru = 'Форма Заказа с подписями (Обои)'");
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение1";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение2СПодписямиОбои";
	//	КомандаПечати.Представление = НСтр("ru = 'Адреса доставки с подписями (Обои)'");  //VOG Ульянов И.В. 10.04.2020 CRM-537
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение2";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение4СПодписямиОбои";
	//	КомандаПечати.Представление = НСтр("ru = 'Условия предоставления Премии с подписями (Обои)'");  //VOG Ульянов И.В. 09.04.2020 CRM-565
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение4";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение5СПодписямиОбои";
	//	КомандаПечати.Представление = НСтр("ru = 'Оператор ЭДО с подписями (Обои)'");  //VOG Ульянов И.В. 10.04.2020 CRM-561
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение5";
	//	
	//	КомандаПечати = КомандыПечати.Добавить();
	//	КомандаПечати.Идентификатор = "Приложение6СПодписямиОбои";
	//	КомандаПечати.Представление = НСтр("ru = 'Форма соглашения об изменении стоимости с подписями (Обои)'");
	//	КомандаПечати.МестоРазмещения = "ПодменюПриложение6";
	//	// -- VOG Ульянов И.В. 27.04.2020 CRM-599
	//
	//КонецЕсли;
	//// -- VOG Ульянов И.В. 30.09.2019 task 714
	//
	//// ++ VOG Ульянов И.В. 09.10.2019 task 730
	////КомандаПечати = КомандыПечати.Добавить();
	////КомандаПечати.Идентификатор = "КоммерческоеСоглашениеПриложение4";
	////КомандаПечати.Представление = НСтр("ru = 'Коммерческое соглашение (Приложение 4)'");
	//// -- VOG Ульянов И.В. 09.10.2019 task 730
	//
	//// +++ Кулаков П.Л. CRM-487 
	////переписано VOG Ульянов И.В. 16.04.2020 CRM-579
	//
	////Приложение 1
	//
	//// --- Кулаков П.Л.
	// -- VOG Солодов В.В. 12.05.2020

КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
// 		ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
// 		МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
// 		ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
// 		КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
// 		ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// ++ VOG Солодов В.В. 12.05.2020 CRM-631
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		КоллекцияПечатныхФорм.Очистить();
		СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 22.06.2020 CRM-658
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДоговорПоставкиРазовый") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ДоговорПоставкиРазовый",
			НСтр("ru='Договор поставки'"),
			СформироватьПечатнуюФормуДоговорПоставки(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДоговорПоставкиРазовыйСПодписями") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ДоговорПоставкиРазовыйСПодписями",
			НСтр("ru='Договор поставки'"),
			СформироватьПечатнуюФормуДоговорПоставки(МассивОбъектов, ОбъектыПечати, Истина));
			
	КонецЕсли;
	// -- VOG Солодов В.В. 22.06.2020
	// До изменения
	//
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДоговорПоставки") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"ДоговорПоставки",
	//		НСтр("ru='Договор поставки'"),
	//		СформироватьПечатнуюФормуДоговорПоставки(МассивОбъектов, ОбъектыПечати));
	//		
	//КонецЕсли;
	//	
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммерческоеСоглашениеПлитка") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"КоммерческоеСоглашениеПлитка",
	//		НСтр("ru='Коммерческое соглашение'"),
	//		СформироватьПечатнуюФормуКоммерческоеСоглашение(МассивОбъектов, ОбъектыПечати,,,Справочники.НаправленияДеятельности.Плитка));
	//		
	//КонецЕсли;
	//
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммерческоеСоглашениеОбои") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"КоммерческоеСоглашениеОбои",
	//		НСтр("ru='Коммерческое соглашение'"),
	//		СформироватьПечатнуюФормуКоммерческоеСоглашение(МассивОбъектов, ОбъектыПечати,,,Справочники.НаправленияДеятельности.Обои));
	//	
	//КонецЕсли;
	//// ++ VOG Ульянов И.В. 30.09.2019 task
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДоговорПоставкиСПодписями") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"ДоговорПоставкиСПодписями",
	//		НСтр("ru='Договор поставки'"),
	//		СформироватьПечатнуюФормуДоговорПоставки(МассивОбъектов, ОбъектыПечати, Истина));
	//		
	//КонецЕсли;
	//	
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммерческоеСоглашениеСПодписямиПлитка") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"КоммерческоеСоглашениеСПодписямиПлитка",
	//		НСтр("ru='Коммерческое соглашение'"),
	//		СформироватьПечатнуюФормуКоммерческоеСоглашение(МассивОбъектов, ОбъектыПечати, ,Истина,Справочники.НаправленияДеятельности.Плитка));
	//		
	//КонецЕсли;
	//
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммерческоеСоглашениеСПодписямиОбои") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"КоммерческоеСоглашениеСПодписямиОбои",
	//		НСтр("ru='Коммерческое соглашение'"),
	//		СформироватьПечатнуюФормуКоммерческоеСоглашение(МассивОбъектов, ОбъектыПечати, ,Истина,Справочники.НаправленияДеятельности.Обои));
	//		
	//КонецЕсли;
	//
	//// -- VOG Ульянов И.В. 30.09.2019 task
	//
	//// ++ VOG Ульянов И.В. 09.10.2019 task 730	
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммерческоеСоглашениеПриложение4") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"КоммерческоеСоглашениеПриложение4",
	//		НСтр("ru='Коммерческое соглашение (Приложение 4)'"),
	//		СформироватьПечатнуюФормуКоммерческоеСоглашение(МассивОбъектов, ОбъектыПечати, 4));
	//		
	//КонецЕсли;
	//// -- VOG Ульянов И.В. 09.10.2019 task 730
	//
	////++ VOG Ульянов И.В. 16.04.2020 CRM-579
	//ИмяМакета = КоллекцияПечатныхФорм[0].ИмяМакета;
	//
	//Если Лев(ИмяМакета,10) = "Приложение" ИЛИ Лев(ИмяМакета,21) = "ДопСоглашениеНормаБоя" тогда
	//	
	//	Если Лев(ИмяМакета,21) = "ДопСоглашениеНормаБоя" тогда
	//		НомерПриложения = 0;
	//	Иначе	
	//		НомерПриложения = Сред(ИмяМакета, 11, 1); 
	//	Конецесли;	
	//		
	//	НаправлениеДеятельности = Неопределено;
	//	Если СтрНайти(ИмяМакета,"Обои") <> 0 тогда
	//		НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои;
	//	ИначеЕсли СтрНайти(ИмяМакета,"Плитка") <> 0 тогда
	//		НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка;			
	//	КонецЕсли;
	//	
	//	Если СтрНайти(ИмяМакета,"СПодписями") <> 0 тогда
	//		СПодписями = Истина;
	//	Иначе
	//		СПодписями = Ложь;
	//	КонецЕсли;
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		ИмяМакета,
	//		НСтр("ru='Приложение "+СокрЛП(НомерПриложения)+"'"),
	//		СформироватьПечатнуюФормуПриложения(МассивОбъектов, ОбъектыПечати, Число(НомерПриложения), СПодписями, НаправлениеДеятельности));
	//		
	//КонецЕсли;
	////-- VOG Ульянов И.В. 16.04.2020 CRM-579
	//
	// -- VOG Солодов В.В. 12.05.2020
	
	// +++ Кулаков П.Л. CRM-487
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Приложение1") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"Приложение1",
	//		НСтр("ru='Приложение 1'"),
	//		СформироватьПечатнуюФормуПриложения(МассивОбъектов, ОбъектыПечати, 1));
	//		
	//КонецЕсли;
	//	
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Приложение2") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"Приложение2",
	//		НСтр("ru='Приложение 2'"),
	//		СформироватьПечатнуюФормуПриложения(МассивОбъектов, ОбъектыПечати, 2));
	//		
	//КонецЕсли;
	//	
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Приложение4") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"Приложение4",
	//		НСтр("ru='Приложение 4'"),
	//		СформироватьПечатнуюФормуПриложения(МассивОбъектов, ОбъектыПечати, 4));
	//		
	//КонецЕсли;
	//
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Приложение5") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"Приложение5",
	//		НСтр("ru='Приложение 5'"),
	//		СформироватьПечатнуюФормуПриложения(МассивОбъектов, ОбъектыПечати, 5));
	//		
	//КонецЕсли;
	//
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Приложение6") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"Приложение6",
	//		НСтр("ru='Приложение 6'"),
	//		СформироватьПечатнуюФормуПриложения(МассивОбъектов, ОбъектыПечати, 6));
	//		
	//КонецЕсли;
	//	
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДопСоглашениеНормаБоя") Тогда
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		"ДопСоглашениеНормаБоя",
	//		НСтр("ru='Дополнительное соглашение по норме боя'"),
	//		СформироватьПечатнуюФормуПриложения(МассивОбъектов, ОбъектыПечати));
	//		
	//КонецЕсли;	
	// --- Кулаков П.Л.
	
КонецПроцедуры

// ++ VOG Солодов В.В. 29.06.2021 DEV-69
Функция СформироватьПечатнуюФормуПриложения(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
		Возврат Справочники.вогКоммерческиеСоглашения.СформироватьПечатнуюФормуПриложения(
			МассивОбъектов, ОбъектыПечати, ПараметрыПечати);
	
КонецФункции
// До изменения
//// +++ Кулаков П.Л,.
//Функция СформироватьПечатнуюФормуПриложения(МассивОбъектов, ОбъектыПечати, НомерПриложения = 0, ПоказыватьПодписи = Ложь, НаправлениеДеятельности = Неопределено) Экспорт //доработано Ульянов И.В. 16.04.2020 CRM-579
//	
//		Возврат Справочники.вогКоммерческиеСоглашения.СформироватьПечатнуюФормуПриложения(
//			МассивОбъектов, ОбъектыПечати, НомерПриложения, ПоказыватьПодписи, НаправлениеДеятельности);
//	
//КонецФункции // --- Кулаков П.Л.
// -- VOG Солодов В.В. 29.06.2021 DEV-69

Функция СформироватьПечатнуюФормуДоговорПоставки(МассивОбъектов, ОбъектыПечати, ПоказыватьПодписи = Ложь) Экспорт

	ТабличныйДокумент 	= Новый ТабличныйДокумент;
	
	// +++ VOG Кулаков П.Л. 18.12.2020 CRM-1134
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ДоговорПоставки";
	// --- VOG Кулаков П.Л.
	
	// ++ VOG Ульянов И.В. 18.12.2019 CRM-41
	МассивОбъектовВерсия1 = Новый Массив;
	МассивОбъектовНовый = Новый Массив;

	Для каждого ЭлементМассива из МассивОбъектов цикл
		
		Если ЭлементМассива.вогВерсия = 1 тогда
			МассивОбъектовВерсия1.Добавить(ЭлементМассива);
		Иначе
			МассивОбъектовНовый.Добавить(ЭлементМассива);
		КонецЕсли;	
			
	КонецЦикла;

	//Печать версии 1
	Если МассивОбъектовВерсия1.Количество() > 0 тогда
		
		СформироватьПечатнуюФормуДоговорПоставкиВерсия1(ТабличныйДокумент, МассивОбъектов, ОбъектыПечати, ПоказыватьПодписи);
		
	КонецЕсли;			
	//Конец печати версии 1
	// -- VOG Ульянов И.В. 18.12.2019 CRM-41
	
	
	Если МассивОбъектовНовый.Количество() > 0 тогда
		
		СформироватьПечатнуюФормуДоговорПоставкиНовый(ТабличныйДокумент, МассивОбъектов, ОбъектыПечати, ПоказыватьПодписи);
		
	КонецЕсли;	
	
	ТабличныйДокумент.Автомасштаб 		= Истина;
	ТабличныйДокумент.ТолькоПросмотр 	= Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура СформироватьПечатнуюФормуДоговорПоставкиНовый(ТабличныйДокумент, МассивОбъектов, ОбъектыПечати, ПоказыватьПодписи = Ложь)
	
	СтруктураДанных 	= Новый Структура;
	
	ПервыйДокумент = Истина;
	
	Результат = ПолучитьДанныеДляПечатнойФормыДоговорПоставки(МассивОбъектов);	
		
	Для Каждого Колонка Из Результат.Колонки Цикл
		СтруктураДанных.Вставить(Колонка.Имя);
	КонецЦикла;
		
	ДанныеПечати = Результат.Выбрать();
		
	Пока ДанныеПечати.Следующий() Цикл
			
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
			
		ПервыйДокумент = Ложь;
			
		СтруктураДанныхПечати = СформироватьСтруктуруДанныхЗаполнения(ДанныеПечати, СтруктураДанных);
		ЗаполнитьТабличныйДокумент(ТабличныйДокумент, СтруктураДанныхПечати, ПоказыватьПодписи);
		
		// +++ VOG Кулаков П.Л. 23.03.2020 CRM-487
		ТабличныйДокумент.НижнийКолонтитул.НачальнаяСтраница = 1;
		ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
		ТабличныйДокумент.НижнийКолонтитул.Шрифт = Новый Шрифт("Times New Roman",8);
		ШаблонКолонтитула = "Договор поставки №[Номер] от [Дата]г."+Символы.ПС + "Страница [&НомерСтраницы] из [&СтраницВсего]";
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить("Номер",ДанныеПечати.НомерДоговора);
		ПараметрыСтроки.Вставить("Дата",Формат(ДанныеПечати.ДатаДоговора,"ДФ=dd.MM.yyyy"));
		ТекстКолонтитула = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонКолонтитула,ПараметрыСтроки);
		ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = ТекстКолонтитула;
		ТабличныйДокумент.РазмерКолонтитулаСнизу=10;
		ТабличныйДокумент.ПолеСверху = 5;
		ТабличныйДокумент.ПолеСнизу = 13;
		// --- VOG Кулаков П.Л.
	КонецЦикла;
	
КонецПроцедуры	

// ++ VOG Солодов В.В. 25.06.2021 DEV-69
Функция СформироватьПечатнуюФормуКоммерческоеСоглашение(МассивОбъектов, ОбъектыПечати, НомерПриложения = Неопределено, ПоказыватьПодписи = Ложь, ПараметрыПечати = Неопределено) Экспорт
// До изменения
//Функция СформироватьПечатнуюФормуКоммерческоеСоглашение(МассивОбъектов, ОбъектыПечати, НомерПриложения = Неопределено, ПоказыватьПодписи = Ложь,НаправлениеДеятельности = Неопределено) Экспорт
//	
//	Возврат Справочники.вогКоммерческиеСоглашения.СформироватьПечатнуюФормуКоммерческоеСоглашение(
//			МассивОбъектов, ОбъектыПечати, НомерПриложения, ПоказыватьПодписи,НаправлениеДеятельности);
// -- VOG Солодов В.В. 25.06.2021 DEV-69
	Возврат Справочники.вогКоммерческиеСоглашения.СформироватьПечатнуюФормуКоммерческоеСоглашение(
			МассивОбъектов, ОбъектыПечати, НомерПриложения, ПоказыватьПодписи, ПараметрыПечати);
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыДоговорПоставки(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.Владелец КАК Клиент,
	|	ДоговорыКонтрагентов.Код КАК Код,
	|	ДоговорыКонтрагентов.Наименование КАК Наименование,
	|	ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаДоговора,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
	|	ДоговорыКонтрагентов.ВидЦен КАК ВидЦен,
	|	ДоговорыКонтрагентов.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
	|	ДоговорыКонтрагентов.вогТипДоговора КАК вогТипДоговора,
	|	ДоговорыКонтрагентов.вогФормаДоговора КАК вогФормаДоговора,
	|	ДоговорыКонтрагентов.вогБессрочный КАК вогБессрочный,
	|	ДоговорыКонтрагентов.вогНаправлениеДеятельности КАК вогНаправлениеДеятельности,
	|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаНачалаДействия,
	|	ДоговорыКонтрагентов.вогДатаОкончанияДоговора КАК ДатаОкончанияДействия,
	|	ДоговорыКонтрагентов.вогОсновной КАК вогОсновной,
	|	ДоговорыКонтрагентов.вогДокументОснованиеПартнера КАК ДокументОснованиеПартнера,
	|	вогЮридическиеЛица.НаименованиеПолное КАК ПредставлениеКлиент,
	|	ВЫРАЗИТЬ(вогЮридическиеЛица.ОрганизационноПравоваяФорма КАК Справочник.вогОрганизационноПравовыеФормы).ЮрФизЛицо КАК ЮрФизЛицо,
	|	СпрОрганизации.Наименование КАК ОрганизацияНаименование,
	|	СпрОрганизации.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.КонтактноеЛицо) КАК ПредставлениеКонтактногоЛица,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.CRM_Должность) КАК ПредставлениеДолжностьКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.CRM_Должность.Родительный КАК ПредставлениеДолжностьКонтактногоЛицаРодительный,
	|	КонтактныеЛицаПартнеров.КонтактноеЛицо.НеСклонятьФамилию КАК НеСклонятьФамилию,
	|	КонтактныеЛицаПартнеров.КонтактноеЛицо.Пол КАК ПолКонтактногоЛица,
	|	ФизическиеЛица.Наименование КАК РуководительПредставление,
	|	ФизическиеЛица.Пол КАК РуководительПол,
	|	ОтветственныеЛица.Должность КАК РуководительДолжностьПредставление,
	// ++ VOG Солодов В.В. 18.06.2020 CRM-631
	|	ЕСТЬNULL(ОтветственныеЛица.ПравоПодписиПоДоверенности, ЛОЖЬ) КАК ПравоПодписиПоДоверенности,
	// До изменения
	//|	ОтветственныеЛица.ПравоПодписиПоДоверенности КАК ПравоПодписиПоДоверенности,
	// -- VOG Солодов В.В. 18.06.2020
	|	ОтветственныеЛица.ОснованиеПраваПодписи КАК ОснованиеПраваПодписи,
	|	СпрОрганизации.ИНН + ""/"" + СпрОрганизации.КПП КАК ИННКПП,
	|	вогЮридическиеЛица.CRM_ИНН + ""/"" + вогЮридическиеЛица.CRM_КПП КАК ИННКППКлиента,
	|	СпрОрганизации.CRM_ОГРН КАК CRM_ОГРН,
	|	вогЮридическиеЛица.CRM_ОГРН КАК CRM_ОГРНКлиента,
	|	ДоговорыКонтрагентов.вогСпособДоставкиТовара КАК вогСпособДоставкиТовара,
	|	ДоговорыКонтрагентов.вогСчетОрганизации КАК вогСчетОрганизации,
	|	ДоговорыКонтрагентов.вогСчетКонтрагента КАК вогСчетКонтрагента,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.Основание КАК ДоверенностьОснование,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.Номер КАК ДоверенностьНомер,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ДатаДокумента КАК ДоверенностьДатаДокумента,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС КАК ДоверенностьПериодДействияС,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо КАК ДоверенностьПериодДействияПо
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СпрОрганизации
	|		ПО ДоговорыКонтрагентов.Организация = СпрОрганизации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ПО ОтветственныеЛица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ПО ДоговорыКонтрагентов.Организация = ОтветственныеЛица.Владелец
	|			И ДоговорыКонтрагентов.вогОтветственноеЛицо = ОтветственныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК КонтактныеЛицаПартнеров
	|		ПО ДоговорыКонтрагентов.вогПодписантПартнера = КонтактныеЛицаПартнеров.КонтактноеЛицо
	|			И ДоговорыКонтрагентов.Владелец = КонтактныеЛицаПартнеров.ОбъектСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогКонтактныеЛицаПодписанты.СрезПоследних КАК вогКонтактныеЛицаПодписантыСрезПоследних
	|		ПО ДоговорыКонтрагентов.вогПодписантПартнера = вогКонтактныеЛицаПодписантыСрезПоследних.КонтактноеЛицо
	|			И ДоговорыКонтрагентов.Владелец = вогКонтактныеЛицаПодписантыСрезПоследних.ЮридическоеЛицо
	|			И (ДоговорыКонтрагентов.ДатаДоговора >= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС
	|					И (ДоговорыКонтрагентов.ДатаДоговора <= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо
	|						ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|				ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.Основание = ЗНАЧЕНИЕ(Перечисление.ВариантыОснованийПодписанта.Устава))
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// ++ VOG Ульянов И.В. 30.09.2019 task
Процедура ЗаполнитьТабличныйДокумент(ТабличныйДокумент, ДанныеПечати, ПоказыватьПодписи = Ложь);
//Процедура ЗаполнитьТабличныйДокумент(ТабличныйДокумент, ДанныеПечати);	

	Если ПоказыватьПодписи Тогда
		СтруктураКартинок = РегистрыСведений.вогПечатиИПодписи.ПолучитьПодписьПечать(ДанныеПечати.Организация,ДанныеПечати.Ссылка.вогОтветственноеЛицо);
	КонецЕсли;
// -- VOG Ульянов И.В. 30.09.2019 task	

	НазваниеОбластиПодпись = "";

	Если ДанныеПечати.вогТипДоговора = Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовараРазовый Тогда
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ДоговорыКонтрагентов.ПФ_MXL_ДоговорПоставкиТовараРазовый");
		НазваниеОбластиПодпись = "Пункт9";
	ИначеЕсли ДанныеПечати.вогТипДоговора = Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовара
		И ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ДоговорыКонтрагентов.ПФ_MXL_ДоговорПоставкиТовараИП");
		// +++ VOG Кулаков П.Л. 23.03.2020 CRM-487
		НазваниеОбластиПодпись = "Пункт099";;
		//НазваниеОбластиПодпись = "Пункт105";
		// --- VOG Кулаков П.Л.
	ИначеЕсли ДанныеПечати.вогТипДоговора = Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовара
		И ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ДоговорыКонтрагентов.ПФ_MXL_ДоговорПоставкиТовараЮЛ");
		// +++ VOG Кулаков П.Л. 23.03.2020 CRM-487
		НазваниеОбластиПодпись = "Пункт099";;
		//НазваниеОбластиПодпись = "Пункт105";
		// --- VOG Кулаков П.Л.
	Иначе
		Возврат;
	КонецЕсли;
	
	СтруктураОбластей = СформироватьСтруктуруОбластей(Макет);
	
	МассивОбластейКВыводу = Новый Массив;
	
	Для Каждого ИмяОбласти Из СтруктураОбластей Цикл
		Если ДанныеПечати.вогТипДоговора = Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовараРазовый Тогда
			Если ИмяОбласти.Ключ = "Заголовок" и ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель   тогда
				Продолжить;
			КонецЕсли;
			Если ИмяОбласти.Ключ = "Заголовок2" и ДанныеПечати.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель   тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//START Кайдашов 05/03/20 CRM - 251
		Если ДанныеПечати.вогТипДоговора <> Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовараРазовый Тогда
			Если ИмяОбласти.Ключ = "Заголовок" и ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель И ЗначениеЗаполнено(ДанныеПечати.ПредставлениеКонтактногоЛица) тогда
				Продолжить;
			КонецЕсли;
			Если ИмяОбласти.Ключ = "ЗаголовокДоверенность" и ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель И НЕ ЗначениеЗаполнено(ДанныеПечати.ПредставлениеКонтактногоЛица) тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//END Кайдашов 05/03/20 CRM - 251
		Область = Макет.ПолучитьОбласть(ИмяОбласти.Ключ);
		Область.Параметры.Заполнить(ДанныеПечати);
		
		Если ПоказыватьПодписи И ИмяОбласти.Ключ = НазваниеОбластиПодпись Тогда
			Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
				Область.Рисунки["ПодписиКартинкаПодпись"].Картинка = СтруктураКартинок.Подпись;
			КонецЕсли;	
			Если ТипЗнч(СтруктураКартинок.Печать) = Тип("Картинка") тогда
				Область.Рисунки["ПодписиКартинкаПечать"].Картинка = СтруктураКартинок.Печать;
			КонецЕсли;		
		КонецЕсли;
		
		МассивОбластейКВыводу.Добавить(Область);
	КонецЦикла;
	
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	ОбластьПустая = Макет.ПолучитьОбласть("Пустая");
	ОбластьПодписьИПечать = Макет.ПолучитьОбласть("ПодписиИПечати");
	
	// Вывод областей с проверкой на заполненность страницы
	ПоследняяОбласть = Неопределено;
	
	Для Каждого ЭлементОбласть Из МассивОбластейКВыводу Цикл
		
		МассивВыводимыхОбластей = Новый Массив;
		МассивВыводимыхОбластей.Добавить(ЭлементОбласть);
		МассивВыводимыхОбластей.Добавить(ОбластьПодписи);
		
		Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			
			МассивВыводимыхОбластей = Новый Массив;
			МассивВыводимыхОбластей.Добавить(ОбластьПодписи);
			
			Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				ТабличныйДокумент.УдалитьОбласть(ПоследняяОбласть);
				
				МассивВыводимыхОбластей.Добавить(ОбластьПустая);
				//МассивВыводимыхОбластей.Добавить(ОбластьПодписи);
				
				Пока ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
					ТабличныйДокумент.Вывести(ОбластьПустая);
				КонецЦикла;
				
				Если ПоказыватьПодписи Тогда
					Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
						ОбластьПодписи.Рисунки["ПодписиКартинкаПодписьЛисты"].Картинка = СтруктураКартинок.Подпись;
					КонецЕсли;
				КонецЕсли;					
				ТабличныйДокумент.Вывести(ОбластьПодписи);
				//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ПоследняяОбласть);
				
			Иначе
				
				МассивВыводимыхОбластей.Добавить(ОбластьПустая);
				//МассивВыводимыхОбластей.Добавить(ОбластьПодписи);
				
				Пока ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
					ТабличныйДокумент.Вывести(ОбластьПустая);
				КонецЦикла;
				
				Если ПоказыватьПодписи Тогда
					Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
						ОбластьПодписи.Рисунки["ПодписиКартинкаПодписьЛисты"].Картинка = СтруктураКартинок.Подпись;
					КонецЕсли;	
				КонецЕсли;					
				ТабличныйДокумент.Вывести(ОбластьПодписи);
				//ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ЭлементОбласть);
		ПоследняяОбласть = ЭлементОбласть;
		
	КонецЦикла;
	
	//Если ПоказыватьПодписи Тогда
	//	//Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
	//	//	ОбластьПодписьИПечать.Рисунки["ПодписиКартинкаПодпись"].Картинка = СтруктураКартинок.Подпись;		
	//	//КонецЕсли;		
	//	Если ТипЗнч(СтруктураКартинок.Печать) = Тип("Картинка") тогда
	//		ОбластьПодписьИПечать.Рисунки["ПодписиКартинкаПечать"].Картинка = СтруктураКартинок.Печать;
	//	КонецЕсли;
	//	ТабличныйДокумент.Вывести(ОбластьПодписьИПечать);
	//КонецЕсли;	
	
КонецПроцедуры

Функция СформироватьСтруктуруДанныхЗаполнения(ДанныеПечати, СтруктураДанных)
	
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеПечати);
	
	СведенияОбОрганизации = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДоговора,,ДанныеПечати.вогСчетОрганизации);
	СведенияОбКлиенте = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ДанныеПечати.Клиент, ДанныеПечати.ДатаДоговора,,ДанныеПечати.вогСчетКонтрагента);
	СтруктураДанных.Вставить("ПредставлениеОрганизации", СведенияОбОрганизации.ПолноеНаименование);
	СтруктураДанных.Вставить("ДолжностьРуководителя", ПолучитьДолжностьВРодительномПадеже(ДанныеПечати.РуководительДолжностьПредставление));
	ФИОРуководителя = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.РуководительПредставление, 2, ФИОРуководителя, ДанныеПечати.РуководительПол);
	ОтветственныйФИО =  ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.РуководительПредставление);
	СтруктураДанных.Вставить("ФИОРуководителя", 			ФИОРуководителя);
	СтруктураДанных.Вставить("ОтветственныйФИО", 			ОтветственныйФИО);
	СтруктураДанных.Вставить("ДолжностьОтветственный", ДанныеПечати.РуководительДолжностьПредставление);
	
	СтруктураДанных.Вставить("ПредставлениеКлиента", 		СведенияОбКлиенте.ПолноеНаименование);
	СтруктураДанных.Вставить("ДолжностьКонтактноеЛицо", ДанныеПечати.ПредставлениеДолжностьКонтактногоЛицаРодительный);
	ПредставлениеКонтактногоЛица = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.ПредставлениеКонтактногоЛица, 2, ПредставлениеКонтактногоЛица, ДанныеПечати.ПолКонтактногоЛица,ДанныеПечати.НеСклонятьФамилию);
	ПредставлениеКонтактногоЛица = ?(СокрЛП(ПредставлениеКонтактногоЛица) = "","",
		", в лице "+ДанныеПечати.ПредставлениеДолжностьКонтактногоЛицаРодительный+" "+СокрЛП(ПредставлениеКонтактногоЛица));
	
	//ПредставлениеКонтактногоЛица = ?(ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,"",ПредставлениеКонтактногоЛица);  Кайдашов CRM-251
	ОтветственныйКлиентФИО =  ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.ПредставлениеКонтактногоЛица);
	СтруктураДанных.Вставить("ПредставлениеКонтактноеЛицо", ПредставлениеКонтактногоЛица);
	СтруктураДанных.Вставить("ОтветственныйКлиентФИО", ОтветственныйКлиентФИО);
	Если ДанныеПечати.ДоверенностьОснование <> Перечисления.ВариантыОснованийПодписанта.Устава тогда 
		ТекстДоверенности = СтрЗаменить(СтрЗаменить(ДанныеПечати.ДоверенностьОснование,"Доверенность","Доверенности"),"Приказ","Приказ")+" №"+ДанныеПечати.ДоверенностьНомер+" от "+Формат(ДанныеПечати.ДоверенностьДатаДокумента,"ДФ=dd.MM.yyyy");
	Иначе
		ТекстДоверенности = "Устава";
	КонецЕсли;
	//START Кайдашов 05/03/20 CRM-251
	// +++ VOG Кулаков П.Л. 18.08.2020 CRM-825
	Если ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		Если ПредставлениеКонтактногоЛица<>"" тогда
			СтруктураДанных.Вставить("ДолжностьОтветственныйКлиента", СтрЗаменить(СтрЗаменить(ДанныеПечати.ДоверенностьОснование,"Доверенности","Доверенность"),"Приказа","Приказ") +" №"+ДанныеПечати.ДоверенностьНомер+" от "+Формат(ДанныеПечати.ДоверенностьДатаДокумента,"ДФ=dd.MM.yyyy"));
			СтруктураДанных.Вставить("ОтветственныйКлиентФИО", СтруктураДанных.ОтветственныйКлиентФИО);
			СтруктураДанных.Вставить("ОтветственныйКлиентДоверенность",СтрЗаменить(СтрЗаменить(ДанныеПечати.ДоверенностьОснование,"Доверенности","Доверенность"),"Приказа","Приказ")+" №"+ДанныеПечати.ДоверенностьНомер+" от "+Формат(ДанныеПечати.ДоверенностьДатаДокумента,"ДФ=dd.MM.yyyy"))
		Иначе
			СтруктураДанных.Вставить("ОтветственныйКлиентФИО", ПолучитьПодписантаДоговора(ДанныеПечати.Клиент));
		КонецЕсли;
		// --- VOG Кулаков П.Л.
	Иначе	
		СтруктураДанных.Вставить("ДолжностьОтветственныйКлиента", ДанныеПечати.ПредставлениеДолжностьКонтактногоЛица);
	КонецЕсли;
	//END Кайдашов CRM-251
	Если ДанныеПечати.ПравоПодписиПоДоверенности Тогда
		СтруктураДанных.Вставить("ОснованиеРуководителя", СтрЗаменить(СтрЗаменить(ДанныеПечати.ОснованиеПраваПодписи,"Доверенность","Доверенности"),"Приказ","Приказ"));
		СтруктураДанных.Вставить("ТекстДоверенностиГД",СтрЗаменить(СтрЗаменить(ДанныеПечати.ОснованиеПраваПодписи,"Доверенности","Доверенность"),"Приказа","Приказ"));
	Иначе
		СтруктураДанных.Вставить("ОснованиеРуководителя", "Устава");
	КонецЕсли;
	
	//|			И ДоговорыКонтрагентов.ДатаДоговора >= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС
	//|			И ДоговорыКонтрагентов.ДатаДоговора <= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо
	
	ПредставлениеОснованиеПартнера = ", в лице "+ПредставлениеКонтактногоЛица+" действующего на основании " + ТекстДоверенности;	
	ПредставлениеОснованиеПартнера = ?(ДанныеПечати.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,
	", в лице "+ПредставлениеКонтактногоЛица+" действующего на основании " + ТекстДоверенности,
	", зарегистрированный в Едином государственном Реестре индивидуальных предпринимателей за государственным регистрационным номером (ОГРНИП) "+ДанныеПечати.CRM_ОГРНКлиента);
	
	СтруктураДанных.Вставить("ОснованиеПартнера", ТекстДоверенности);
	//СтруктураДанных.Вставить("ОснованиеПартнераИП", ?(ДанныеПечати.ДокументОснованиеПартнера<>"",", в лице "+ПредставлениеКонтактногоЛица+" действующего на основании " + ДанныеПечати.ДокументОснованиеПартнера,""));
	
	СтруктураДанных.Вставить("ОснованиеПартнераРазовыйИП",ПредставлениеОснованиеПартнера);
	
	СтруктураДанных.Вставить("ДатаОкончанияДействия", Формат(ДанныеПечати.ДатаОкончанияДействия, "ДЛФ=DD"));
	СтруктураДанных.Вставить("ЮридическийАдрес",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес"));
	СтруктураДанных.Вставить("ЮридическийАдресКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "ЮридическийАдрес"));
	СтруктураДанных.Вставить("ФактическийАдрес",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ФактическийАдрес"));
	СтруктураДанных.Вставить("ФактическийАдресКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "ФактическийАдрес"));
	СтруктураДанных.Вставить("РасчетныйСчет",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,БИК,КоррСчет"));
	СтруктураДанных.Вставить("РасчетныйСчетКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "НомерСчета,Банк,БИК,КоррСчет"));
	СтруктураДанных.Вставить("ПредставлениеОГРНКлиента",?(ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,"ОГРНИП","ОГРН"));
	
	Телефон = СведенияОбОрганизации.Телефоны + ?(СведенияОбОрганизации.Телефоны <> "" И СведенияОбОрганизации.email <> "" ,", ","") + СведенияОбОрганизации.email;   	
	ТелефонКлиента = СведенияОбКлиенте.Телефоны + ?(СведенияОбКлиенте.Телефоны <> "" И СведенияОбКлиенте.email <> "" ,", ","") + СведенияОбКлиенте.email;	
	
	СтруктураДанных.Вставить("Телефон",Телефон);
	СтруктураДанных.Вставить("ТелефонКлиента",ТелефонКлиента);
	
	Если ДанныеПечати.вогСпособДоставкиТовара = Перечисления.вогСпособыДоставкиТовара.ДоставкаТовараПоставщиком тогда
		СтруктураДанных.Вставить("ВариантПоставки", "силами и за счёт Поставщика, при этом доставка включается в цену Товара.");
	ИначеЕсли ДанныеПечати.вогСпособДоставкиТовара = Перечисления.вогСпособыДоставкиТовара.СамовывозТовара тогда
		СтруктураДанных.Вставить("ВариантПоставки", "самовывозом со склада Поставщика. Под складом Поставщика понимается в том числе склад производителя Товара, грузоотправителя, указанного Поставщиком в товаросопроводительных документах;");
	Иначе
		СтруктураДанных.Вставить("ВариантПоставки", "");
	КонецЕсли;
	
	// Контактная информация организации
	СтруктураДанных.Вставить("ГородОрганизации", "");
	
	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ДанныеПечати.Организация);
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивСсылок,, МассивВидовКИ, ТекущаяДата());
	
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
		
		СтруктураКИ = Новый Структура;
		Если ДанныеПечати.Организация.ИНН = "2309123330" или ДанныеПечати.Организация.ИНН = "2373013119" тогда
			СтруктураКИ.Вставить("Регион", "");
			СтруктураКИ.Вставить("НаселенныйПункт", "");
		Иначе	
			СтруктураКИ.Вставить("Город", "");
			СтруктураКИ.Вставить("ГородСокращение", "");
			
		КонецЕсли;
		
		Результат = РаботаСАдресами.ПредыдущаяСтруктураКонтактнойИнформацииXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Вид);
		
		ЗаполнитьЗначенияСвойств(СтруктураКИ, Результат);
		// ++ VOG Солодов В.В. 03.12.2019 
		Если СтруктураКИ.Свойство("Город") тогда
			МассивСлов 		= СтрРазделить(СтруктураКИ.Город, " ", Ложь);
			ИндСокращения 	= МассивСлов.Найти(СтруктураКИ.ГородСокращение);
			Если Не ИндСокращения = Неопределено Тогда
				МассивСлов.Удалить(ИндСокращения);
			КонецЕсли;
		КонецЕслИ;
		
		Если ДанныеПечати.Организация.ИНН = "2309123330" или ДанныеПечати.Организация.ИНН = "2373013119" тогда
				СтруктураДанных.ГородОрганизации = СтруктураКИ.Регион+", "+СтруктураКИ.НаселенныйПункт;
		Иначе				
				СтруктураДанных.ГородОрганизации = "г. "+СтрСоединить(МассивСлов, " ");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

// +++ VOG Кулаков П.Л. 18.08.2020 CRM-825
Функция ПолучитьПодписантаДоговора(ЮридическоеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПРЕДСТАВЛЕНИЕ(вогКонтактныеЛицаПодписантыСрезПоследних.КонтактноеЛицо) КАК КонтактноеЛицоПредставление
		|ИЗ
		|	РегистрСведений.вогКонтактныеЛицаПодписанты.СрезПоследних(, ЮридическоеЛицо = &ЮридическоеЛицо) КАК вогКонтактныеЛицаПодписантыСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	вогКонтактныеЛицаПодписантыСрезПоследних.Период УБЫВ";
	
	Запрос.УстановитьПараметр("ЮридическоеЛицо", ЮридическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ФизическиеЛица.ФамилияИнициалыФизЛица(ВыборкаДетальныеЗаписи.КонтактноеЛицоПредставление);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // --- VOG Кулаков П.Л.

Функция СформироватьСтруктуруОбластей(Макет)
	
	СтруктураОбластей = Новый Структура;
	
	// Области упорядочены по имени
	//
	Для Каждого Область Из Макет.Области Цикл
		
		Если СтрНачинаетсяС(Область.Имя, "Подписи")
			Или СтрНачинаетсяС(Область.Имя, "Пустая") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОбластей.Вставить(Область.Имя);
		
	КонецЦикла;
	
	Возврат СтруктураОбластей;
	
КонецФункции

Функция ПолучитьДолжностьВРодительномПадеже(Знач ИсходнаяСтрока)
	
	
	СтруктураР = Справочники.CRM_Должности.ПолучитьСтруктуруСклонения(ИсходнаяСтрока);	
	Возврат СтруктураР.Родительный;
	//Результат 		= "";
	//ИсходнаяСтрока 	= СокрЛП(ИсходнаяСтрока);
	//
	//Если СтрДлина(ИсходнаяСтрока) = 0 Тогда
	//	Возврат Результат;
	//КонецЕсли;
	//
	//Поз = Найти(ИсходнаяСтрока, " ");
	//
	//Пока Поз > 0 Цикл
	//	
	//	СловоВПадеже = "";
	//	
	//	Слово = Лев(ИсходнаяСтрока, Поз - 1);
	//	СловоВПадеже = CRM_ОбщегоНазначенияСервер.Склонение(Слово, "Р");
	//	
	//	Результат = СокрЛП(Результат + " " + НРег(СловоВПадеже));
	//	ИсходнаяСтрока = СокрЛП(Сред(ИсходнаяСтрока, Поз));
	//	
	//	Если ПустаяСтрока(ИсходнаяСтрока) Тогда
	//		Прервать;
	//	КонецЕсли;
	//	
	//	Поз = Найти(ИсходнаяСтрока, " ");
	//	
	//КонецЦикла;
	//
	//Если Не ПустаяСтрока(ИсходнаяСтрока) Тогда
	//	
	//	СловоВПадеже = "";
	//	СловоВПадеже = CRM_ОбщегоНазначенияСервер.Склонение(ИсходнаяСтрока, "Р");
	//	Результат = СокрЛП(Результат + " " + НРег(СловоВПадеже));
	//	
	//КонецЕсли;
	
КонецФункции

// ++ VOG Солодов В.В. 12.05.2020 CRM-631
Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура")
		И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Справочники.ДоговорыКонтрагентов.ПолноеИмя(),
			МассивОбъектов,
			Неопределено);
		
	КонецЕсли;
		
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыводитьПодписи = (ТипЗнч(ПараметрыПечати) = Тип("Структура")
		И ПараметрыПечати.Свойство("ОтображатьФаксимиле")
		И ПараметрыПечати.ОтображатьФаксимиле = Истина);
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(
		КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"ДоговорПоставки");
	
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		
		ТабличныйДокумент = СформироватьПечатнуюФормуДоговорПоставки(
			МассивОбъектов,
			ОбъектыПечати,
			ВыводитьПодписи);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			ТабличныйДокумент);
		
	КонецЦикла;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("НаправлениеДеятельности") Тогда
		НаправлениеДеятельности = ПараметрыПечати.НаправлениеДеятельности;
	Иначе
		НаправлениеДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Пользователи.ТекущийПользователь(), "CRM_НаправлениеДеятельности");
	КонецЕсли;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(
		КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"КоммерческоеСоглашение");
	
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		
		ТабличныйДокумент = СформироватьПечатнуюФормуКоммерческоеСоглашение(
			МассивОбъектов,
			ОбъектыПечати,
			,
			ВыводитьПодписи,
			// ++ VOG Солодов В.В. 25.06.2021 DEV-69
			ПараметрыПечати);
			// До изменения
			//НаправлениеДеятельности);
			// -- VOG Солодов В.В. 25.06.2021 DEV-69
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			ТабличныйДокумент);
		
	КонецЦикла;
	
	// ++ VOG Солодов В.В. 29.06.2021 DEV-69
	Справочники.вогКоммерческиеСоглашения.ДополнитьПараметрыДаннымиПечати(МассивОбъектов, НаправлениеДеятельности, ПараметрыПечати);
	ПараметрыПечати.Вставить("ПоказыватьПодписи", ВыводитьПодписи);
	
	Для НомерПриложения = 1 По 7 Цикл
		
		Если НомерПриложения <> 7 Тогда
			ИмяПриложения 	= СтрШаблон("Приложение%1", НомерПриложения);
		Иначе
			ИмяПриложения 	= "ДопСоглашениеНормаБоя";
		КонецЕсли;
		
		КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(
			КоллекцияПечатныхФорм,
			КомплектПечатныхФорм,
			МассивОбъектов,
			ИмяПриложения);
		
		Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
			
			ПараметрыПечати.Вставить("НомерПриложения", НомерПриложения);
			
			ТабличныйДокумент = СформироватьПечатнуюФормуПриложения(
				МассивОбъектов,
				ОбъектыПечати,
				ПараметрыПечати);
			
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				КомплектПечати.Имя,
				КомплектПечати.Представление,
				ТабличныйДокумент);
			
		КонецЦикла;
			
	КонецЦикла;
	
	ПараметрыПечати.Удалить("РезультатыЗапросаДанных");
	// До изменения
	//Для НомерПриложения = 1 По 6 Цикл
	//	
	//	ИмяПриложения 	= СтрШаблон("Приложение%1", НомерПриложения);
	//	//ПараметрыОтбора = Новый Структура("Имя, Печатать", ИмяПриложения, Истина);
	//	//
	//	//Если КомплектПечатныхФорм.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
	//		
	//		КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(
	//			КоллекцияПечатныхФорм,
	//			КомплектПечатныхФорм,
	//			МассивОбъектов,
	//			ИмяПриложения);
	//		
	//		Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
	//			
	//			ТабличныйДокумент = СформироватьПечатнуюФормуПриложения(
	//				МассивОбъектов,
	//				ОбъектыПечати,
	//				НомерПриложения,
	//				ВыводитьПодписи,
	//				НаправлениеДеятельности);
	//			
	//			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//				КоллекцияПечатныхФорм,
	//				КомплектПечати.Имя,
	//				КомплектПечати.Представление,
	//				ТабличныйДокумент);
	//			
	//		КонецЦикла;
	//		
	//	//КонецЕсли;
	//	
	//КонецЦикла;
	//
	//КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(
	//	КоллекцияПечатныхФорм,
	//	КомплектПечатныхФорм,
	//	МассивОбъектов,
	//	"ДопСоглашениеНормаБоя");
	//
	//Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
	//	
	//	ТабличныйДокумент = СформироватьПечатнуюФормуПриложения(
	//		МассивОбъектов,
	//		ОбъектыПечати,
	//		,
	//		ВыводитьПодписи,
	//		НаправлениеДеятельности);
	//	
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//		КоллекцияПечатныхФорм,
	//		КомплектПечати.Имя,
	//		КомплектПечати.Представление,
	//		ТабличныйДокумент);
	//	
	//КонецЦикла;
	//
	//РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
	//	"Справочник.ДоговорыКонтрагентов",
	//	МассивОбъектов,
	//	ПараметрыПечати,
	//	КоллекцияПечатныхФорм,
	//	ОбъектыПечати);
	// -- VOG Солодов В.В. 29.06.2021 DEV-69
	
КонецФункции

Функция КомплектПечатныхФорм(НаправлениеДеятельности = Неопределено) Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
		КомплектПечатныхФорм,
		"ДоговорПоставки",
		НСтр("ru = 'Договор поставки'"), 1);
		
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
		КомплектПечатныхФорм,
		"КоммерческоеСоглашение",
		НСтр("ru = 'Коммерческое соглашение'"), 1);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
		КомплектПечатныхФорм,
		"Приложение1",
		НСтр("ru = 'Форма Заказа'"), 1);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
		КомплектПечатныхФорм,
		"Приложение2",
		НСтр("ru = 'Адреса доставки'"), 1);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
		КомплектПечатныхФорм,
		"Приложение4",
		НСтр("ru = 'Условия предоставления премии'"), 1);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
		КомплектПечатныхФорм,
		"Приложение5",
		НСтр("ru = 'Оператор ЭДО'"), 1);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
		КомплектПечатныхФорм,
		"Приложение6",
		НСтр("ru = 'Форма соглашения об изменении стоимости'"), 1);
	
	Если Не НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои Тогда
		
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
			КомплектПечатныхФорм,
			"ДопСоглашениеНормаБоя",
			НСтр("ru = 'Дополнительное соглашение по норме боя'"), 1);
		
	КонецЕсли;
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции // -- VOG Солодов В.В. 12.05.2020

#КонецОбласти
// -- VOG Солодов В.В. 06.09.2019

Функция УникальноеИмяФайла(ИмяФайла) // ++ VOG Солодов В.В. 22.06.2020 CRM-658
	
	Файл = Новый Файл(ИмяФайла);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	Расширение = Файл.Расширение;
	Папка = Файл.Путь;
	
	Счетчик = 1;
	Пока Файл.Существует() Цикл
		Счетчик = Счетчик + 1;
		Файл = Новый Файл(Папка + ИмяБезРасширения + " (" + Счетчик + ")" + Расширение);
	КонецЦикла;
	
	Возврат Файл.ПолноеИмя;

КонецФункции

#КонецОбласти

//-вог

// ++ VOG Солодов В.В. 27.12.2019 
// До изменения
//#КонецЕсли
// -- VOG Солодов В.В. 27.12.2019



//Функция возвращает действующее коммерческое соглашение к договору
//Параметры:
//	Договор - Ссылка - Справочник ДоговорыКонтрагентов
//Результат:
//	Неопределено - если не нашли действующее коммерческое соглашение к договору
//  Массив - массив ссылок на коммерческие соглашения
Функция ПолучитьДействующееКоммерческоеСоглашениеКДоговору(Договор) экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	              |	ДоговорыКонтрагентов.Владелец КАК ЮридическоеЛицо,
	              |	ДоговорыКонтрагентов.Организация КАК Организация,
	              |	вогЮридическиеЛица.Партнер КАК Партнер,
	              |	ДоговорыКонтрагентов.ДатаДоговора КАК ДатаДоговора,
	              |	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
	              |	ДоговорыКонтрагентов.Ссылка КАК Договор
	              |ПОМЕСТИТЬ ВТ_Договора
	              |ИЗ
	              |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	              |		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
	              |ГДЕ
	              |	ДоговорыКонтрагентов.Ссылка = &СсылкаНаДоговор
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	вогКоммерческиеСоглашения.Ссылка КАК Ссылка,
	              |	1 КАК Приоритет,
	              |	ВТ_Договора.ДатаДоговора КАК ДатаДоговора,
	              |	ВТ_Договора.НомерДоговора КАК НомерДоговора,
	              |	ВТ_Договора.ЮридическоеЛицо КАК ЮридическоеЛицо,
	              |	ВТ_Договора.Договор КАК Договор
	              |ПОМЕСТИТЬ ВТ_Соглашения
	              |ИЗ
	              |	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	              |		ПО вогКоммерческиеСоглашения.ЮридическоеЛицо = ВТ_Договора.ЮридическоеЛицо
	              |			И вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	              |			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	вогКоммерческиеСоглашения.Ссылка,
	              |	2,
	              |	ВТ_Договора.ДатаДоговора,
	              |	ВТ_Договора.НомерДоговора,
	              |	ВТ_Договора.ЮридическоеЛицо,
	              |	ВТ_Договора.Договор
	              |ИЗ
	              |	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Договора КАК ВТ_Договора
	              |		ПО вогКоммерческиеСоглашения.Организация = ВТ_Договора.Организация
	              |			И вогКоммерческиеСоглашения.Владелец = ВТ_Договора.Партнер
	              |			И (вогКоммерческиеСоглашения.ЮридическоеЛицо = ЗНАЧЕНИЕ(Справочник.вогЮридическиеЛица.ПустаяСсылка))
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ 
	              |	ВТ_Соглашения.Ссылка КАК Ссылка,
	              |	ВТ_Соглашения.ДатаДоговора КАК ДатаДоговора,
	              |	ВТ_Соглашения.НомерДоговора КАК НомерДоговора,
	              |	ВТ_Соглашения.ЮридическоеЛицо КАК ЮридическоеЛицо,
	              |	ВТ_Соглашения.Договор КАК Договор
	              |ИЗ
	              |	ВТ_Соглашения КАК ВТ_Соглашения
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	ВТ_Соглашения.Приоритет";
	
	
	Запрос.УстановитьПараметр("СсылкаНаДоговор",Договор);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		 Возврат Неопределено;
	КонецЕсли;
	 
	Выборка = Результат.Выбрать();
	Результат = Новый Массив;
	Пока Выборка.Следующий() цикл
		Результат.Добавить(Выборка.Ссылка);	
	КонецЦикла;
	Возврат Результат;	
	
	
КонецФункции


//Функция Формирует договор и кс в виде PDF документа
//Можно сформировать только документы в статусе Согласован
Функция СформироватьPDFДокументы(Договор) экспорт
	
	// ++ VOG Солодов В.В. 22.06.2020 CRM-658
	Результат = Новый Массив;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	НаправлениеДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущийПользователь,
		"CRM_НаправлениеДеятельности",
		Истина);
	ТипФайла = ТипФайлаТабличногоДокумента.PDF;
	
	ТаблицаФорматов 	= УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	НастройкиФормата 	= ТаблицаФорматов.НайтиСтроки(Новый Структура("ТипФайлаТабличногоДокумента", ТипФайла))[0];
	
	КомплектПечатныхФорм = Справочники.ДоговорыКонтрагентов.КомплектПечатныхФорм(НаправлениеДеятельности);
	
	АдресКомплектаПечатныхФорм = ПоместитьВоВременноеХранилище(КомплектПечатныхФорм, Новый УникальныйИдентификатор);
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Договор);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ПереопределитьПользовательскиеНастройкиКоличества", 	Истина);
	ПараметрыПечати.Вставить("АдресКомплектаПечатныхФорм", 							АдресКомплектаПечатныхФорм);
	ПараметрыПечати.Вставить("ФиксированныйКомплект", 								Истина);
	ПараметрыПечати.Вставить("ОбъектыПечати", 										МассивОбъектов);
	ПараметрыПечати.Вставить("ОтображатьФаксимиле", 								Истина);
	
	ТипДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "вогТипДоговора", Истина);
	
	Если ТипДоговора = Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовараРазовый Тогда
		ИмяМакета = "ДоговорПоставкиРазовыйСподписями";
	Иначе
		ИмяМакета = "КомплектДокументов";
	КонецЕсли;
	
	ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы("Справочник.ДоговорыКонтрагентов", ИмяМакета,
		МассивОбъектов, ПараметрыПечати, Неопределено);
	
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	
	Для Каждого ПечатнаяФорма Из ПечатныеФормы.КоллекцияПечатныхФорм Цикл
		
		Если ПечатнаяФорма.ТабличныйДокумент.ВысотаТаблицы = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяФайла = ПечатнаяФорма.СинонимМакета;
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
		ИмяФайла = ИмяФайла + "." + НастройкиФормата.Расширение;
		ПолноеИмяФайла = УникальноеИмяФайла(
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла);
		
		ПечатнаяФорма.ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайла);
		
		ДвоичныеДанные 				= Новый ДвоичныеДанные(ПолноеИмяФайла);
		ПутьВоВременномХранилище 	= ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ИмяФайла", 			ИмяФайла);
		СтруктураВозврата.Вставить("АдресВХранилище", 	ПутьВоВременномХранилище);
		Результат.Добавить(СтруктураВозврата);
		
	КонецЦикла;
	
	Возврат Результат;
	// До изменения
	//КаталогВрФайлов = КаталогВременныхФайлов();
	//Результат = Новый Массив;
	//МассивОбъектов = Новый Массив;
	//МассивОбъектов.Добавить(Договор);
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	//               |	ДоговорыКонтрагентов.вогСтатус КАК вогСтатус
	//               |ИЗ
	//               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//               |ГДЕ
	//               |	ДоговорыКонтрагентов.Ссылка = &Ссылка
	//               |	И НЕ ДоговорыКонтрагентов.ПометкаУдаления 
	//               |	И ДоговорыКонтрагентов.вогСтатус = &вогСтатус";
	//Запрос.УстановитьПараметр("вогСтатус",Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Согласован);
	//
	//Запрос.УстановитьПараметр("Ссылка",Договор);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() тогда
	//	//Печатаем и сохраняем PDF договора
	//	ИмяФайла = КаталогВрФайлов+Строка(новый УникальныйИдентификатор())+".pdf";	
	//	ТабДокДоговор = Справочники.ДоговорыКонтрагентов.СформироватьПечатнуюФормуДоговорПоставки(МассивОбъектов,МассивОбъектов,Истина);
	//	ТабДокДоговор.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.PDF);
	//	ДанныеФайлPDF = Новый ДвоичныеДанные(ИмяФайла);
	//	
	//	СтруктураВозврат = Новый Структура;
	//	СтруктураВозврат.Вставить("ИмяФайла",СтрЗаменить(Строка(Договор),"/"," ")+".pdf");
	//	СтруктураВозврат.Вставить("АдресВХранилище",ПоместитьВоВременноеХранилище(ДанныеФайлPDF,Новый УникальныйИдентификатор()));
	//	Результат.Добавить(СтруктураВозврат);
	//	
	//КонецЕсли;
	//
	//Напрпользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователи.ТекущийПользователь(),"CRM_НаправлениеДеятельности");
	//Если ЗначениеЗаполнено(Напрпользователя) тогда
	//	//Печатаем и сохраняем PDF КС к договору	
	//	ИмяФайла = КаталогВрФайлов+Строка(новый УникальныйИдентификатор())+".pdf";
	//	ТабДокКС = Справочники.вогКоммерческиеСоглашения.СформироватьПечатнуюФормуКоммерческоеСоглашение(
	//		МассивОбъектов,
	//		МассивОбъектов,
	//		,
	//		Истина,Напрпользователя);
	//		Если ТабДокКС.НайтиТекст("соглашение")<>Неопределено тогда			
	//			ТабДокКС.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.PDF);
	//			ДанныеФайлPDF = Новый ДвоичныеДанные(ИмяФайла);
	//			СтруктураВозврат = Новый Структура;
	//			СтруктураВозврат.Вставить("ИмяФайла","КС к " +СтрЗаменить(Строка(Договор),"/"," ")+".pdf");
	//			СтруктураВозврат.Вставить("АдресВХранилище",ПоместитьВоВременноеХранилище(ДанныеФайлPDF,Новый УникальныйИдентификатор()));
	//			Результат.Добавить(СтруктураВозврат);
	//		КонецЕсли;	
	//	Иначе	
	//		//Печатаем и сохраняем PDF КС к договору	
	//		ИмяФайла = КаталогВрФайлов+Строка(новый УникальныйИдентификатор())+".pdf";
	//		ТабДокКС = Справочники.вогКоммерческиеСоглашения.СформироватьПечатнуюФормуКоммерческоеСоглашение(
	//		МассивОбъектов,
	//		МассивОбъектов,
	//		,
	//		Истина,Справочники.НаправленияДеятельности.Плитка);
	//		Если ТабДокКС.НайтиТекст("соглашение")<>Неопределено тогда			
	//			ТабДокКС.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.PDF);
	//			ДанныеФайлPDF = Новый ДвоичныеДанные(ИмяФайла);
	//			СтруктураВозврат = Новый Структура;
	//			СтруктураВозврат.Вставить("ИмяФайла","КС (плитка) к " +СтрЗаменить(Строка(Договор),"/"," ")+".pdf");
	//			СтруктураВозврат.Вставить("АдресВХранилище",ПоместитьВоВременноеХранилище(ДанныеФайлPDF,Новый УникальныйИдентификатор()));
	//			Результат.Добавить(СтруктураВозврат);
	//		КонецЕсли;	
	//		//Печатаем и сохраняем PDF КС к договору	
	//		ИмяФайла = КаталогВрФайлов+Строка(новый УникальныйИдентификатор())+".pdf";
	//		ТабДокКС = Справочники.вогКоммерческиеСоглашения.СформироватьПечатнуюФормуКоммерческоеСоглашение(
	//		МассивОбъектов,
	//		МассивОбъектов,
	//		,
	//		Истина,Справочники.НаправленияДеятельности.Обои);
	//		Если ТабДокКС.НайтиТекст("соглашение")<>Неопределено тогда			
	//			ТабДокКС.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.PDF);
	//			ДанныеФайлPDF = Новый ДвоичныеДанные(ИмяФайла);
	//			СтруктураВозврат = Новый Структура;
	//			СтруктураВозврат.Вставить("ИмяФайла","КС (обои) к " +СтрЗаменить(Строка(Договор),"/"," ")+".pdf");
	//			СтруктураВозврат.Вставить("АдресВХранилище",ПоместитьВоВременноеХранилище(ДанныеФайлPDF,Новый УникальныйИдентификатор()));
	//			Результат.Добавить(СтруктураВозврат);
	//		КонецЕсли;	
	//	КонецЕсли;
	//	
	//
	//Возврат Результат;
	// -- VOG Солодов В.В. 22.06.2020
	
КонецФункции

// ++ VOG Ульянов И.В. 18.12.2019 CRM-41
#Область Версия1

Процедура СформироватьПечатнуюФормуДоговорПоставкиВерсия1(ТабличныйДокумент, МассивОбъектов, ОбъектыПечати, ПоказыватьПодписи = Ложь)
	
	СтруктураДанных 	= Новый Структура;
	ПервыйДокумент = Истина;
	
	Результат = ПолучитьДанныеДляПечатнойФормыДоговорПоставкиВерсия1(МассивОбъектов);	
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		СтруктураДанных.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ДанныеПечати = Результат.Выбрать();
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		СтруктураДанныхПечати = СформироватьСтруктуруДанныхЗаполненияВерсия1(ДанныеПечати, СтруктураДанных);
		ЗаполнитьТабличныйДокументВерсия1(ТабличныйДокумент, СтруктураДанныхПечати, ПоказыватьПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументВерсия1(ТабличныйДокумент, ДанныеПечати, ПоказыватьПодписи = Ложь);

	Если ПоказыватьПодписи Тогда
		СтруктураКартинок = РегистрыСведений.вогПечатиИПодписи.ПолучитьПодписьПечать(ДанныеПечати.Организация,ДанныеПечати.Ссылка.вогОтветственноеЛицо);
	КонецЕсли;

	НазваниеОбластиПодпись = "";

	Если ДанныеПечати.вогТипДоговора = Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовараРазовый Тогда
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ДоговорыКонтрагентов.ПФ_MXL_ДоговорПоставкиТовараРазовыйВерсия1");
		НазваниеОбластиПодпись = "Пункт9";
	ИначеЕсли ДанныеПечати.вогТипДоговора = Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовара
		И ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ДоговорыКонтрагентов.ПФ_MXL_ДоговорПоставкиТовараИПВерсия1");
		// +++ VOG Кулаков П.Л. 23.03.2020 CRM-487
		//НазваниеОбластиПодпись = "Пункт104";
		НазваниеОбластиПодпись = "Пункт110";
		// --- VOG Кулаков П.Л.
	ИначеЕсли ДанныеПечати.вогТипДоговора = Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовара
		И ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ДоговорыКонтрагентов.ПФ_MXL_ДоговорПоставкиТовараЮЛВерсия1");
		// +++ VOG Кулаков П.Л. 23.03.2020 CRM-487
		//НазваниеОбластиПодпись = "Пункт107";
		НазваниеОбластиПодпись = "Пункт113";
		// --- VOG Кулаков П.Л.
	Иначе
		Возврат;
	КонецЕсли;
	
	СтруктураОбластей = СформироватьСтруктуруОбластейВерсия1(Макет);
	
	МассивОбластейКВыводу = Новый Массив;
	
	Для Каждого ИмяОбласти Из СтруктураОбластей Цикл
		Если ДанныеПечати.вогТипДоговора = Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовараРазовый Тогда
			Если ИмяОбласти.Ключ = "Заголовок" и ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель   тогда
				Продолжить;
			КонецЕсли;
			Если ИмяОбласти.Ключ = "Заголовок2" и ДанныеПечати.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель   тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Область = Макет.ПолучитьОбласть(ИмяОбласти.Ключ);
		Область.Параметры.Заполнить(ДанныеПечати);
		
		Если ПоказыватьПодписи И ИмяОбласти.Ключ = НазваниеОбластиПодпись Тогда
			Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
				Область.Рисунки["ПодписиКартинкаПодпись"].Картинка = СтруктураКартинок.Подпись;
			КонецЕсли;	
			Если ТипЗнч(СтруктураКартинок.Печать) = Тип("Картинка") тогда
				Область.Рисунки["ПодписиКартинкаПечать"].Картинка = СтруктураКартинок.Печать;
			КонецЕсли;		
		КонецЕсли;
		
		МассивОбластейКВыводу.Добавить(Область);
	КонецЦикла;
	
	ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
	ОбластьПустая = Макет.ПолучитьОбласть("Пустая");
	ОбластьПодписьИПечать = Макет.ПолучитьОбласть("ПодписиИПечати");
	
	// Вывод областей с проверкой на заполненность страницы
	ПоследняяОбласть = Неопределено;
	
	Для Каждого ЭлементОбласть Из МассивОбластейКВыводу Цикл
		
		МассивВыводимыхОбластей = Новый Массив;
		МассивВыводимыхОбластей.Добавить(ЭлементОбласть);
		МассивВыводимыхОбластей.Добавить(ОбластьПодписи);
		
		Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			
			МассивВыводимыхОбластей = Новый Массив;
			МассивВыводимыхОбластей.Добавить(ОбластьПодписи);
			
			Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				ТабличныйДокумент.УдалитьОбласть(ПоследняяОбласть);
				
				МассивВыводимыхОбластей.Добавить(ОбластьПустая);
				
				Пока ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
					ТабличныйДокумент.Вывести(ОбластьПустая);
				КонецЦикла;
				
				Если ПоказыватьПодписи Тогда
					Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
						ОбластьПодписи.Рисунки["ПодписиКартинкаПодписьЛисты"].Картинка = СтруктураКартинок.Подпись;
					КонецЕсли;
				КонецЕсли;					
				ТабличныйДокумент.Вывести(ОбластьПодписи);
				ТабличныйДокумент.Вывести(ПоследняяОбласть);
				
			Иначе
				
				МассивВыводимыхОбластей.Добавить(ОбластьПустая);
				
				Пока ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Цикл
					ТабличныйДокумент.Вывести(ОбластьПустая);
				КонецЦикла;
				
				Если ПоказыватьПодписи Тогда
					Если ТипЗнч(СтруктураКартинок.Подпись) = Тип("Картинка") тогда
						ОбластьПодписи.Рисунки["ПодписиКартинкаПодписьЛисты"].Картинка = СтруктураКартинок.Подпись;
					КонецЕсли;	
				КонецЕсли;					
				ТабличныйДокумент.Вывести(ОбластьПодписи);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ЭлементОбласть);
		ПоследняяОбласть = ЭлементОбласть;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыДоговорПоставкиВерсия1(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.Владелец КАК Клиент,
	|	ДоговорыКонтрагентов.Код КАК Код,
	|	ДоговорыКонтрагентов.Наименование КАК Наименование,
	|	ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаРасчетов,
	|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаДоговора,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ДоговорыКонтрагентов.НомерДоговора КАК НомерДоговора,
	|	ДоговорыКонтрагентов.ВидЦен КАК ВидЦен,
	|	ДоговорыКонтрагентов.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
	|	ДоговорыКонтрагентов.вогТипДоговора КАК вогТипДоговора,
	|	ДоговорыКонтрагентов.вогФормаДоговора КАК вогФормаДоговора,
	|	ДоговорыКонтрагентов.вогБессрочный КАК вогБессрочный,
	|	ДоговорыКонтрагентов.вогНаправлениеДеятельности КАК вогНаправлениеДеятельности,
	|	ДоговорыКонтрагентов.вогДатаНачалаДействия КАК ДатаНачалаДействия,
	|	ДоговорыКонтрагентов.вогДатаОкончанияДоговора КАК ДатаОкончанияДействия,
	|	ДоговорыКонтрагентов.вогОсновной КАК вогОсновной,
	|	ДоговорыКонтрагентов.вогДокументОснованиеПартнера КАК ДокументОснованиеПартнера,
	|	вогЮридическиеЛица.НаименованиеПолное КАК ПредставлениеКлиент,
	|	ВЫРАЗИТЬ(вогЮридическиеЛица.ОрганизационноПравоваяФорма КАК Справочник.вогОрганизационноПравовыеФормы).ЮрФизЛицо КАК ЮрФизЛицо,
	|	СпрОрганизации.Наименование КАК ОрганизацияНаименование,
	|	СпрОрганизации.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.КонтактноеЛицо) КАК ПредставлениеКонтактногоЛица,
	|	ПРЕДСТАВЛЕНИЕ(КонтактныеЛицаПартнеров.CRM_Должность) КАК ПредставлениеДолжностьКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.CRM_Должность.Родительный КАК ПредставлениеДолжностьКонтактногоЛицаРодительный,
	|	КонтактныеЛицаПартнеров.КонтактноеЛицо.Пол КАК ПолКонтактногоЛица,
	|	КонтактныеЛицаПартнеров.КонтактноеЛицо.НеСклонятьФамилию КАК НеСклонятьФамилию,
	|	ФизическиеЛица.Наименование КАК РуководительПредставление,
	|	ФизическиеЛица.Пол КАК РуководительПол,
	|	ОтветственныеЛица.Должность КАК РуководительДолжностьПредставление,
	|	ОтветственныеЛица.ПравоПодписиПоДоверенности КАК ПравоПодписиПоДоверенности,
	|	ОтветственныеЛица.ОснованиеПраваПодписи КАК ОснованиеПраваПодписи,
	|	СпрОрганизации.ИНН + ""/"" + СпрОрганизации.КПП КАК ИННКПП,
	|	вогЮридическиеЛица.CRM_ИНН + ""/"" + вогЮридическиеЛица.CRM_КПП КАК ИННКППКлиента,
	|	СпрОрганизации.CRM_ОГРН КАК CRM_ОГРН,
	|	вогЮридическиеЛица.CRM_ОГРН КАК CRM_ОГРНКлиента,
	|	ДоговорыКонтрагентов.вогСпособДоставкиТовара КАК вогСпособДоставкиТовара,
	|	ДоговорыКонтрагентов.вогСчетОрганизации КАК вогСчетОрганизации,
	|	ДоговорыКонтрагентов.вогСчетКонтрагента КАК вогСчетКонтрагента,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.Основание КАК ДоверенностьОснование,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.Номер КАК ДоверенностьНомер,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ДатаДокумента КАК ДоверенностьДатаДокумента,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС КАК ДоверенностьПериодДействияС,
	|	вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо КАК ДоверенностьПериодДействияПо
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогЮридическиеЛица КАК вогЮридическиеЛица
	|		ПО ДоговорыКонтрагентов.Владелец = вогЮридическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СпрОрганизации
	|		ПО ДоговорыКонтрагентов.Организация = СпрОрганизации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогОтветственныеЛицаОрганизаций КАК ОтветственныеЛица
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ПО ОтветственныеЛица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ПО ДоговорыКонтрагентов.Организация = ОтветственныеЛица.Владелец
	|			И ДоговорыКонтрагентов.вогОтветственноеЛицо = ОтветственныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК КонтактныеЛицаПартнеров
	|		ПО ДоговорыКонтрагентов.вогПодписантПартнера = КонтактныеЛицаПартнеров.КонтактноеЛицо
	|			И ДоговорыКонтрагентов.Владелец = КонтактныеЛицаПартнеров.ОбъектСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогКонтактныеЛицаПодписанты.СрезПоследних КАК вогКонтактныеЛицаПодписантыСрезПоследних
	|		ПО ДоговорыКонтрагентов.вогПодписантПартнера = вогКонтактныеЛицаПодписантыСрезПоследних.КонтактноеЛицо
	|			И ДоговорыКонтрагентов.Владелец = вогКонтактныеЛицаПодписантыСрезПоследних.ЮридическоеЛицо
	|			И (ДоговорыКонтрагентов.ДатаДоговора >= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС
	// +++ VOG Кулаков П.Л. 12.03.2020 CRM-429
	|				И (ДоговорыКонтрагентов.ДатаДоговора <= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо
	|					ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))	
	// --- VOG Кулаков П.Л.
	|			ИЛИ вогКонтактныеЛицаПодписантыСрезПоследних.Основание = ЗНАЧЕНИЕ(Перечисление.ВариантыОснованийПодписанта.Устава))
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСтруктуруДанныхЗаполненияВерсия1(ДанныеПечати, СтруктураДанных)
	
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеПечати);
	
	СведенияОбОрганизации = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДоговора,,ДанныеПечати.вогСчетОрганизации);
	СведенияОбКлиенте = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(ДанныеПечати.Клиент, ДанныеПечати.ДатаДоговора,,ДанныеПечати.вогСчетКонтрагента);
	СтруктураДанных.Вставить("ПредставлениеОрганизации", СведенияОбОрганизации.ПолноеНаименование);
	СтруктураДанных.Вставить("ДолжностьРуководителя", ПолучитьДолжностьВРодительномПадеже(ДанныеПечати.РуководительДолжностьПредставление));
	ФИОРуководителя = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.РуководительПредставление, 2, ФИОРуководителя, ДанныеПечати.РуководительПол);
	ОтветственныйФИО =  ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.РуководительПредставление);
	СтруктураДанных.Вставить("ФИОРуководителя", 			ФИОРуководителя);
	СтруктураДанных.Вставить("ОтветственныйФИО", 			ОтветственныйФИО);
	СтруктураДанных.Вставить("ПредставлениеКлиента", 		СведенияОбКлиенте.ПолноеНаименование);
	СтруктураДанных.Вставить("ДолжностьКонтактноеЛицо", ДанныеПечати.ПредставлениеДолжностьКонтактногоЛицаРодительный);
	ПредставлениеКонтактногоЛица = "";
	ФизическиеЛица.Просклонять(ДанныеПечати.ПредставлениеКонтактногоЛица, 2, ПредставлениеКонтактногоЛица, ДанныеПечати.ПолКонтактногоЛица,ДанныеПечати.НеСклонятьФамилию);
	ПредставлениеКонтактногоЛица = ?(СокрЛП(ПредставлениеКонтактногоЛица) = "","",
		", в лице "+ДанныеПечати.ПредставлениеДолжностьКонтактногоЛицаРодительный+" "+СокрЛП(ПредставлениеКонтактногоЛица));
	ПредставлениеКонтактногоЛица = ?(ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,"",ПредставлениеКонтактногоЛица);
	ОтветственныйКлиентФИО =  ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.ПредставлениеКонтактногоЛица);
	СтруктураДанных.Вставить("ПредставлениеКонтактноеЛицо", ПредставлениеКонтактногоЛица);
	СтруктураДанных.Вставить("ОтветственныйКлиентФИО", ОтветственныйКлиентФИО);
	
	// +++ VOG Кулаков П.Л. 18.08.2020 CRM-825
	СтруктураДанных.Вставить("ДолжностьОтветственныйКлиента", ДанныеПечати.ПредставлениеДолжностьКонтактногоЛица);
	
	Если ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель И СтруктураДанных.ОтветственныйКлиентФИО = "" Тогда 
		СтруктураДанных.ОтветственныйКлиентФИО = ПолучитьПодписантаДоговора(ДанныеПечати.Клиент);
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	Если ДанныеПечати.ПравоПодписиПоДоверенности Тогда
		СтруктураДанных.Вставить("ОснованиеРуководителя", ДанныеПечати.ОснованиеПраваПодписи);
	Иначе
		СтруктураДанных.Вставить("ОснованиеРуководителя", "Устава");
	КонецЕсли;
	
	//|			И ДоговорыКонтрагентов.ДатаДоговора >= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияС
	//|			И ДоговорыКонтрагентов.ДатаДоговора <= вогКонтактныеЛицаПодписантыСрезПоследних.ПериодДействияПо
	
	Если ДанныеПечати.ДоверенностьОснование <> Перечисления.ВариантыОснованийПодписанта.Устава тогда 
		ТекстДоверенности = СокрЛП(ДанныеПечати.ДоверенностьОснование)+" №"+ДанныеПечати.ДоверенностьНомер+" от "+Формат(ДанныеПечати.ДоверенностьДатаДокумента,"ДФ=dd.MM.yyyy");
	Иначе
		ТекстДоверенности = "Устава";
	КонецЕсли;
	ПредставлениеОснованиеПартнера = ", в лице "+ПредставлениеКонтактногоЛица+" действующего на основании " + ТекстДоверенности;	
	ПредставлениеОснованиеПартнера = ?(ДанныеПечати.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,
	", в лице "+ПредставлениеКонтактногоЛица+" действующего на основании " + ТекстДоверенности,
	", зарегистрированный в Едином государственном Реестре индивидуальных предпринимателей за государственным регистрационным номером (ОГРНИП) "+ДанныеПечати.CRM_ОГРНКлиента);
	
	СтруктураДанных.Вставить("ОснованиеПартнера", ТекстДоверенности);
	//СтруктураДанных.Вставить("ОснованиеПартнераИП", ?(ДанныеПечати.ДокументОснованиеПартнера<>"",", в лице "+ПредставлениеКонтактногоЛица+" действующего на основании " + ДанныеПечати.ДокументОснованиеПартнера,""));
	
	СтруктураДанных.Вставить("ОснованиеПартнераРазовыйИП",ПредставлениеОснованиеПартнера);
	
	СтруктураДанных.Вставить("ДатаОкончанияДействия", Формат(ДанныеПечати.ДатаОкончанияДействия, "ДЛФ=DD"));
	СтруктураДанных.Вставить("ЮридическийАдрес",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес"));
	СтруктураДанных.Вставить("ЮридическийАдресКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "ЮридическийАдрес"));
	СтруктураДанных.Вставить("ФактическийАдрес",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ФактическийАдрес"));
	СтруктураДанных.Вставить("ФактическийАдресКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "ФактическийАдрес"));
	СтруктураДанных.Вставить("РасчетныйСчет",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "НомерСчета,Банк,БИК,КоррСчет"));
	СтруктураДанных.Вставить("РасчетныйСчетКлиента",CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКлиенте, "НомерСчета,Банк,БИК,КоррСчет"));
	СтруктураДанных.Вставить("ПредставлениеОГРНКлиента",?(ДанныеПечати.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель,"ОГРНИП","ОГРН"));
	
	Телефон = СведенияОбОрганизации.Телефоны + ?(СведенияОбОрганизации.Телефоны <> "" И СведенияОбОрганизации.email <> "" ,", ","") + СведенияОбОрганизации.email;   	
	ТелефонКлиента = СведенияОбКлиенте.Телефоны + ?(СведенияОбКлиенте.Телефоны <> "" И СведенияОбКлиенте.email <> "" ,", ","") + СведенияОбКлиенте.email;	
	
	СтруктураДанных.Вставить("Телефон",Телефон);
	СтруктураДанных.Вставить("ТелефонКлиента",ТелефонКлиента);
	
	Если ДанныеПечати.вогСпособДоставкиТовара = Перечисления.вогСпособыДоставкиТовара.ДоставкаТовараПоставщиком тогда
		СтруктураДанных.Вставить("ВариантПоставки", "силами и за счёт Поставщика, при этом доставка включается в цену Товара.");
	ИначеЕсли ДанныеПечати.вогСпособДоставкиТовара = Перечисления.вогСпособыДоставкиТовара.СамовывозТовара тогда
		СтруктураДанных.Вставить("ВариантПоставки", "самовывозом со склада Поставщика. Под складом Поставщика понимается в том числе склад производителя Товара, грузоотправителя, указанного Поставщиком в товаросопроводительных документах;");
	Иначе
		СтруктураДанных.Вставить("ВариантПоставки", "");
	КонецЕсли;
	
	// Контактная информация организации
	СтруктураДанных.Вставить("ГородОрганизации", "");
	
	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ДанныеПечати.Организация);
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивСсылок,, МассивВидовКИ, ТекущаяДата());
	
	Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
		
		СтруктураКИ = Новый Структура;
		Если ДанныеПечати.Организация.ИНН = "2309123330" или ДанныеПечати.Организация.ИНН = "2373013119" тогда
			СтруктураКИ.Вставить("Регион", "");
			СтруктураКИ.Вставить("НаселенныйПункт", "");
		Иначе	
			СтруктураКИ.Вставить("Город", "");
			СтруктураКИ.Вставить("ГородСокращение", "");
			
		КонецЕсли;
		
		Результат = РаботаСАдресами.ПредыдущаяСтруктураКонтактнойИнформацииXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Вид);
		
		ЗаполнитьЗначенияСвойств(СтруктураКИ, Результат);
		// ++ VOG Солодов В.В. 03.12.2019 
		Если СтруктураКИ.Свойство("Город") тогда
			МассивСлов 		= СтрРазделить(СтруктураКИ.Город, " ", Ложь);
			ИндСокращения 	= МассивСлов.Найти(СтруктураКИ.ГородСокращение);
			Если Не ИндСокращения = Неопределено Тогда
				МассивСлов.Удалить(ИндСокращения);
			КонецЕсли;
		КонецЕслИ;
		
		Если ДанныеПечати.Организация.ИНН = "2309123330" или ДанныеПечати.Организация.ИНН = "2373013119" тогда
				СтруктураДанных.ГородОрганизации = СтруктураКИ.Регион+", "+СтруктураКИ.НаселенныйПункт;
		Иначе				
				СтруктураДанных.ГородОрганизации = "г. "+СтрСоединить(МассивСлов, " ");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция СформироватьСтруктуруОбластейВерсия1(Макет)
	
	СтруктураОбластей = Новый Структура;
	
	// Области упорядочены по имени
	//
	Для Каждого Область Из Макет.Области Цикл
		
		Если СтрНачинаетсяС(Область.Имя, "Подписи")
			Или СтрНачинаетсяС(Область.Имя, "Пустая") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОбластей.Вставить(Область.Имя);
		
	КонецЦикла;
	
	Возврат СтруктураОбластей;
	
КонецФункции

#КонецОбласти
// -- VOG Ульянов И.В. 18.12.2019 CRM-41

// ++ VOG Солодов В.В. 27.12.2019 
#КонецЕсли
// -- VOG Солодов В.В. 27.12.2019