
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Процедура составляет наименование договора из номера и даты договора.
//
Процедура СформироватьНаименование()
	
	ТекстНаименования = НСтр("ru = '№ %НомерДоговора% от %ДатаДоговора% (%ВалютаРасчетов%)'");
	ТекстНаименования = СтрЗаменить(ТекстНаименования, "%НомерДоговора%", СокрЛП(Объект.НомерДоговора));
	ТекстНаименования = СтрЗаменить(ТекстНаименования, "%ДатаДоговора%", СокрЛП(Строка(Формат(Объект.ДатаДоговора, "ДФ=dd.MM.yyyy"))));
	ТекстНаименования = СтрЗаменить(ТекстНаименования, "%ВалютаРасчетов%", СокрЛП(Строка(Объект.ВалютаРасчетов)));
	
	Объект.Наименование = ТекстНаименования;
	
КонецПроцедуры // СформироватьНаименование()

&НаКлиенте
// Процедура устанавливает доступность элементов формы.
//
Процедура УстановитьВидимостьЭлементов()
	
	Если Объект.ВалютаРасчетов = ВалютаРегламентированногоУчета Тогда
		Элементы.РасчетыВУсловныхЕдиницах.Видимость = Ложь;
		Объект.РасчетыВУсловныхЕдиницах = Ложь;
	Иначе
		Элементы.РасчетыВУсловныхЕдиницах.Видимость = Истина;
	КонецЕсли;
	
	//+вог
	Элементы.НомерДоговора.Доступность = (Объект.вогФормаДоговора = ПредопределенноеЗначение("Перечисление.вогТипыФормДоговоров.ФормаКлиента"));
	
	ПодписиСписком = Объект.вогПодписи.Количество() > 1;
	УстановитьВидимостьПодписей();
	//-вог
	
	Если Объект.вогТипДоговора =  ПредопределенноеЗначение("Справочник.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовараРазовый") тогда
		Элементы.вогСпособДоставкиТовара.Видимость = Истина;
	Иначе
		Элементы.вогСпособДоставкиТовара.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьЭлементов()

// +CRM
&НаСервере
Процедура УстановитьВозможностьРедактированияЦен()
	
	ПраваНаРедактированиеЦен = Пользователи.РолиДоступны("CRM_РедактированиеЦенИСкидокВДокументах, ПолныеПрава");
	Элементы.ВидСкидкиНаценки.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	//Элементы.ВидЦен.ТолькоПросмотр = ПраваНаРедактированиеЦен;
	
КонецПроцедуры
// -CRM

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ВалютаРасчетов = ВалютаУправленческогоУчета;
	КонецЕсли;
	
	Если Объект.ВалютаРасчетов = ВалютаРегламентированногоУчета Тогда
		Элементы.РасчетыВУсловныхЕдиницах.Видимость = Ложь;
		Объект.РасчетыВУсловныхЕдиницах = Ложь;
	Иначе
		Элементы.РасчетыВУсловныхЕдиницах.Видимость = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
		//ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		Элементы.ВидЦен.АвтоВыборНезаполненного = Истина;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;	
	Иначе
		Элементы.ВидЦен.АвтоВыборНезаполненного = Ложь;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;	
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
// +CRM
	CRM_ОбщегоНазначенияСервер.УстановитьКнопкиПечати(Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя(), ЭтотОбъект);
// -CRM
	// заполним огранизацию
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
		Объект.Организация = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяОрганизация");
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
		КонецЕсли;
	КонецЕсли;
	// +CRM
	УстановитьВозможностьРедактированияЦен();
	// -CRM
	
	 //+вог
	 ЗаполнитьРеквизитФормыПодписи(ЭтотОбъект);
	 //-вог
	 
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.Печать);
	// Конец СтандартныеПодсистемы.Печать
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//Статус согласования
	ОбновитьДанныеСтатусаСогласования();
	
	//+Классификаторы
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	//+ск
	скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	//-ск

КонецПроцедуры

&НаКлиенте
// Процедура обработчик события ОбработкаОповещения.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	//+вог
	Если ИмяСобытия = "Запись_БизнесПрцесса" 
	  И Параметр.Предмет = Объект.Ссылка Тогда
		ОбновитьДанныеСтатусаСогласования();
	
	КонецЕсли;
	//-вог
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
// Процедура обработчик события ПриСозданииНаСервере.
// Осуществляет первоначальное заполнение реквизитов формы.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//+Классификаторы
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

#Область ПроцедурыОбработчикиСобытийРеквизитовФормы

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Валюта расчетов.
//
Процедура ВалютаРасчетовПриИзменении(Элемент)
	
	СформироватьНаименование();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры // ВалютаРасчетовПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода НомерДоговора.
//
Процедура НомерДоговораПриИзменении(Элемент)
	
	СформироватьНаименование();
	
КонецПроцедуры // НомерДоговораПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ДатаДоговора.
//
Процедура ДатаДоговораПриИзменении(Элемент)
	
	СформироватьНаименование();
	
КонецПроцедуры // ДатаДоговораПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ВидСкидкиНаценки.
//
Процедура ВидСкидкиНаценкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		Элементы.ВидЦен.АвтоВыборНезаполненного = Истина;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;	
	Иначе
		Элементы.ВидЦен.АвтоВыборНезаполненного = Ложь;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Очистка поля ввода ВидСкидкиНаценки.
//
Процедура ВидСкидкиНаценкиОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		Элементы.ВидЦен.АвтоВыборНезаполненного = Истина;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;	
	Иначе
		Элементы.ВидЦен.АвтоВыборНезаполненного = Ложь;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

// +CRM

&НаКлиенте
Процедура Подключаемый_ПечатьВнешнегоМакета(Команда)
	
	ИмяМакета = СтрЗаменить(Команда.Имя, "Печать_", "");
	
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.Добавить(Объект.Ссылка);
	
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения);
	
КонецПроцедуры

// -CRM

#КонецОбласти

#КонецОбласти

//+Классификаторы
#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
		
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)

	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_ТегиКлассификатора_Обновить()

#КонецОбласти
//-Классификаторы

//+вог
#Область СтатусСогласования

&НаКлиенте
Процедура СтатусСогласованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;			
	вогОбщегоНазначенияКлиент.ОбработкаНажатияСтатусаСогласования(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Подключаемый_МеханизмЗапускаБизнесПроцессов

&НаКлиенте
Процедура Подключаемый_ЗапускБизнесПроцесса(Команда)
	скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);
КонецПроцедуры // Подключаемый_ЗапускБизнесПроцесса()

#КонецОбласти

#Область Подписи

&НаКлиенте
Процедура УстановитьВидимостьПодписей()
	Элементы.ГруппаПодписи.Видимость = ПодписиСписком;  	
	Элементы.ГруппаПодписант.Видимость = Не ПодписиСписком;
КонецПроцедуры

&НаКлиенте
Процедура ПодписиСпискомПриИзменении(Элемент)
	
	Если Не ПодписиСписком 
	  И Объект.вогПодписи.Количество() > 1 Тогда
		Оповещение = Новый ОписаниеОповещения("ПодписиСпискомПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Все строки в списке подписей, кроме первой, будут удалены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьРеквизитФормыПодписи(ЭтотОбъект);
		УстановитьВидимостьПодписей();
		
		Если ПодписиСписком Тогда
			ТекущийЭлемент = Элементы.вогПодписи;	
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписиСпискомПриИзмененииЗавершение(Результат, Контекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ПодписиСписком = Не ПодписиСписком;
		Возврат;
	КонецЕсли;
	
	Пока Объект.вогПодписи.Количество() > 1 Цикл
		СтрокаУдаления = Объект.вогПодписи[1];
		Объект.Подписи.Удалить(СтрокаУдаления);
	КонецЦикла;
		
	ЗаполнитьРеквизитФормыПодписи(ЭтотОбъект);
	УстановитьВидимостьПодписей();
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитФормыПодписи(Форма)
	
	Если Форма.Объект.Подписи.Количество() > 0 Тогда				
		Форма.Подписант = Форма.Объект.Подписи[0].Подписант;
	Иначе
		Форма.Подписант = Неопределено;
	КонецЕсли;

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитОбъектаПодписи(Форма)
	
	Если Форма.Объект.Подписи.Количество() > 0 Тогда
		Форма.Объект.Подписи[0].Подписант = Форма.Подписант;
	Иначе
		Подпись = Форма.Объект.Подписи.Добавить();
		Подпись.Подписант = Форма.Подписант;
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПодписантПриИзменении(Элемент)
	ЗаполнитьРеквизитОбъектаПодписи(ЭтотОбъект)
КонецПроцедуры

&НаКлиенте
Процедура ПодписиПриИзменении(Элемент)
	ЗаполнитьРеквизитФормыПодписи(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПодписиПослеУдаления(Элемент)
	ЗаполнитьРеквизитФормыПодписи(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СтатусыСогласования

&НаСервере
Процедура ОбновитьДанныеСтатусаСогласования()

	ОписаниеСтатуса = вогОбщегоНазначения.ПолучитьОписаниеСтатусаСогласованияОбъекта(Объект.Ссылка);
	СтатусСогласования = ОписаниеСтатуса.Статус;
	РегистраторСтатуса = ОписаниеСтатуса.РегистраторСтатуса;

КонецПроцедуры

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПечатьПоТипу(Команда)
	ИмяМакета = ПолучитьИмяМакета(Объект.вогТипДоговора);
	Если ПустаяСтрока(ИмяМакета) Тогда
		Возврат;		
	КонецЕсли; 
	
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.Добавить(Объект.Ссылка);
	
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяМакета(ТипДоговора)
	
	Возврат ТипДоговора.ИмяМакета;
	
КонецФункции

 #КонецОбласти

&НаКлиенте
Процедура вогФормаДоговораПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура вогПолучитьНомерИзУчетнойСистемы(Команда)
	
	НомерДоговораУС = вогИнтеграцияСУчетнойСистемой.ПолучитьНомерДоговора(Объект.Ссылка);
	Если НомерДоговораУС <> Объект.НомерДоговора Тогда
	   	Объект.НомерДоговора	= НомерДоговораУС;
		Модифицированность		= Истина;
		СформироватьНаименование();
	КонецЕсли;
	
КонецПроцедуры
//-вог

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


&НаКлиенте
Процедура скТипДоговораПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать
