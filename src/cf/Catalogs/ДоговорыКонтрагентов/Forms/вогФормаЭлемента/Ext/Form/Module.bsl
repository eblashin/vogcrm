
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	// СтандартныеПодсистемы.Свойства
//	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);	
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Процедура составляет наименование договора из номера и даты договора.
//
Процедура СформироватьНаименование()
	
	//Кайдашов 20-01-2020 CRM-190 Start
	
	//ТекстНаименования = НСтр("ru = '№ %НомерДоговора% от %ДатаДоговора% (%ВалютаРасчетов%)'");
	ТекстНаименования = НСтр("ru = '№ %НомерДоговора% от %ДатаДоговора% %Клиент%'");
	// +++ VOG Кулаков П.Л. 16.03.2020 CRM-445
	ТекстНаименования = НСтр("ru = 'Договор поставки № %НомерДоговора% от %ДатаДоговора%'");
	// --- VOG Кулаков П.Л.
	ТекстНаименования = СтрЗаменить(ТекстНаименования, "%НомерДоговора%", СокрЛП(Объект.НомерДоговора));
	//++ VOG Иванов С.А. 20.11.2019 ID заявки: 000000896 
	//ТекстНаименования = СтрЗаменить(ТекстНаименования, "%ДатаДоговора%", СокрЛП(Строка(Формат(Объект.ДатаДоговора, "ДФ=dd.MM.yyyy"))));
	ТекстНаименования = СтрЗаменить(ТекстНаименования, "%ДатаДоговора%", СокрЛП(Строка(Формат(Объект.вогДатаНачалаДействия, "ДФ=dd.MM.yyyy"))));
	//-- VOG Иванов С.А. 20.11.2019 ID заявки: 000000896 
	//Если ЗначениеЗаполнено(Объект.ВалютаРасчетов) Тогда // ++ VOG Солодов В.В. 02.10.2019 // Добавлено условие
	//	ТекстНаименования = СтрЗаменить(ТекстНаименования, "%ВалютаРасчетов%", СокрЛП(Строка(Объект.ВалютаРасчетов)));
	//Иначе
	//	ТекстНаименования = СтрЗаменить(ТекстНаименования, " (%ВалютаРасчетов%)", "");
	//КонецЕсли;
	// +++ VOG Кулаков П.Л. 16.03.2020 CRM-445
	//ТекстНаименования = СтрЗаменить(ТекстНаименования,"%Клиент%",Объект.Владелец);
	// --- VOG Кулаков П.Л.
	//Кайдашов 20-01-2020 CRM-190 End
	
	Объект.Наименование = ТекстНаименования;
	
КонецПроцедуры // СформироватьНаименование()

&НаКлиенте
// Процедура устанавливает доступность элементов формы.
//
Процедура УстановитьВидимостьЭлементов()
	
	//+вог
	Элементы.НомерДоговора.Доступность = (Объект.вогФормаДоговора = ПредопределенноеЗначение("Перечисление.вогТипыФормДоговоров.ФормаКлиента"));
	
	// ++ VOG Солодов В.В. 09.09.2019 task 636
	// Закомментировал
	// До изменения
	//ПодписиСписком = Объект.вогПодписи.Количество() > 1;
	//УстановитьВидимостьПодписей();
	// -- VOG Солодов В.В. 09.09.2019
	//-вог
	
КонецПроцедуры // УстановитьДоступностьЭлементов()

// +CRM
&НаСервере
Процедура УстановитьВозможностьРедактированияЦен()
	
	ПраваНаРедактированиеЦен = Пользователи.РолиДоступны("CRM_РедактированиеЦенИСкидокВДокументах, ПолныеПрава");
	Элементы.ВидСкидкиНаценки.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	//Элементы.ВидЦен.ТолькоПросмотр = ПраваНаРедактированиеЦен;
	
КонецПроцедуры
// -CRM

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// ++ VOG Солодов В.В. 06.09.2019 task 636
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	МассивИсточниковКоманд = Новый Массив;
	МассивИсточниковКоманд.Добавить(Объект.Ссылка.Метаданные());
	
	ПараметрыРазмещения = Новый Структура;
	ПараметрыРазмещения.Вставить("Источники", 		МассивИсточниковКоманд);
	ПараметрыРазмещения.Вставить("КоманднаяПанель", Элементы.КоманднаяПанельФормы);
	ПараметрыРазмещения.Вставить("ПрефиксГрупп", 	"");
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// -- VOG Солодов В.В. 06.09.2019
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ВалютаРасчетов = ВалютаУправленческогоУчета;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		// ++ VOG Солодов В.В. 29.08.2019 task 575
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", 	"КоманднаяПанельФормы");
		// -- VOG Солодов В.В. 29.08.2019
		//ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		Элементы.ВидЦен.АвтоВыборНезаполненного = Истина;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;	
	Иначе
		Элементы.ВидЦен.АвтоВыборНезаполненного = Ложь;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;	
	КонецЕсли;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
// +CRM
	CRM_ОбщегоНазначенияСервер.УстановитьКнопкиПечати(Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя(), ЭтотОбъект);
// -CRM
	// заполним огранизацию
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
		Объект.Организация = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновнаяОрганизация");
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
		КонецЕсли;
	КонецЕсли;
	// +CRM
	УстановитьВозможностьРедактированияЦен();
	// -CRM
	
	 //+вог
	 Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		 //Режим копирования
		 Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаРеквизитыОбъекта;
		 НастройкаВидимостиФормы = "ПоказатьВсе";
		 РежимВидимостиПоказатьТолькоВажные = Ложь;
		 
		 СкрытьРаскрытьВсеГруппы(Ложь);
		 
	 ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		 //Режим редактирования
		 Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаКарточкаОбъекта;
		// ++ VOG Солодов В.В. 09.09.2019 task 636
		НастройкаВидимостиФормы 			= "ПоказатьВсе";
		РежимВидимостиПоказатьТолькоВажные 	= Ложь;
		СкрытьРаскрытьВсеГруппы(Ложь);
		// До изменения
		//НастройкаВидимостиФормы = "СвернутьВсеГруппы";
		//РежимВидимостиПоказатьТолькоВажные = Ложь;
		// 
		// СкрытьРаскрытьВсеГруппы(Истина);
		// -- VOG Солодов В.В. 09.09.2019
		
		 //Элементы.ГруппаГруппировкаЛевоПраво.Видимость=Ложь;
		 
		// ++ VOG Солодов В.В. 29.08.2019 task 575
		// До изменения
		//Элементы.НастройкаВидимостиФормы.СписокВыбора.Удалить(0);
		// -- VOG Солодов В.В. 29.08.2019
	 Иначе	
		 //Режим создания
		 Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаРеквизитыОбъекта;
		// ++ VOG Солодов В.В. 29.08.2019 task 575
		НастройкаВидимостиФормы 			= "ПоказатьВсе";
		РежимВидимостиПоказатьТолькоВажные 	= Ложь;
		// До изменения
		//НастройкаВидимостиФормы = "ПоказатьОсновные";
		//РежимВидимостиПоказатьТолькоВажные = Истина;
		// -- VOG Солодов В.В. 29.08.2019
		 
		 СкрытьРаскрытьВсеГруппы(Ложь);
	 КонецЕсли;
		
	// ++ VOG Солодов В.В. 29.08.2019 task 575
	Элементы.НастройкаВидимостиФормы.СписокВыбора.Удалить(0);
	
	// Подключаемые дополнительные команды
	вогУправлениеИнтерфейсомСервер.ПодключитьДополнительныеКоманды(ЭтотОбъект, Элементы.ФормаГруппаДействия);
	// Подключаемые дополнительные команды
	// -- VOG Солодов В.В. 29.08.2019
	 
	 Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		 НастроитьВидимостьСворачиваемойГруппы("ДополнительныеРеквизиты");  		
	 Иначе
		 НастройкаВидимостиКарточкиОбъекта       = "ПоказатьЗаполненные";
		 РежимВидимостиПоказатьТолькоЗаполненные = Истина;
		 НастроитьФорму();
	 КонецЕсли;
	 
	 ЗаполнитьРеквизитФормыПодписи(ЭтотОбъект);
	 //-вог
	 
	// СтандартныеПодсистемы.Печать
	//УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.Печать);
	// Конец СтандартныеПодсистемы.Печать
	//START Кайдашов 05/03/20 crm-415
//	Если Объект.вогФормаДоговора=Перечисления.вогТипыФормДоговоров.ФормаКлиента и Не РольДоступна("ПолныеПрава") тогда
// ++ VOG Ульянов И.В. 27.03.2020 CRM-494
	Если Объект.вогФормаДоговора=Перечисления.вогТипыФормДоговоров.ФормаКлиента и Не РольДоступна("ПолныеПрава") 
		И Объект.вогСтатус <> Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Действует тогда
		// ++ VOG Ульянов И.В. 27.04.2020 CRM-599		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПриложение1") Тогда
			Элементы.ПодменюПриложение1.Видимость = Ложь;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПриложение2") Тогда
			Элементы.ПодменюПриложение2.Видимость = Ложь;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПриложение3") Тогда
			Элементы.ПодменюПриложение3.Видимость = Ложь;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПриложение4") Тогда
			Элементы.ПодменюПриложение4.Видимость = Ложь;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПриложение5") Тогда
			Элементы.ПодменюПриложение5.Видимость = Ложь;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПриложение6") Тогда
			Элементы.ПодменюПриложение6.Видимость = Ложь;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюДопСоглашениеНормаБоя") Тогда
			Элементы.ПодменюДопСоглашениеНормаБоя.Видимость = Ложь;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюДоговор") Тогда
			Элементы.ПодменюДоговор.Видимость = Ложь;
		КонецЕсли;
		// -- VOG Ульянов И.В. 27.04.2020 CRM-599		
		
		//Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПечатьОбычное_КоммерческоеСоглашениеСПодписямиПлитка") Тогда
		//	Элементы.ПодменюПечатьОбычное_КоммерческоеСоглашениеСПодписямиПлитка.Видимость = Ложь;
		//КонецЕсли;
		//Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПечатьОбычное_ДоговорПоставки") Тогда
		//	Элементы["ПодменюПечатьОбычное_ДоговорПоставки"].Видимость = Ложь;
		//КонецЕсли;
		//Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПечатьОбычное_ДоговорПоставкиСПодписями") Тогда
		//	Элементы.ПодменюПечатьОбычное_ДоговорПоставкиСПодписями.Видимость  = Ложь;
		//КонецЕсли;
		//Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПечатьОбычное_КоммерческоеСоглашениеОбои") Тогда
		//	Элементы.ПодменюПечатьОбычное_КоммерческоеСоглашениеОбои.Видимость = Ложь;
		//КонецЕсли;
		//Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПечатьОбычное_КоммерческоеСоглашениеПлитка") Тогда
		//	Элементы.ПодменюПечатьОбычное_КоммерческоеСоглашениеПлитка.Видимость = Ложь;
		//КонецЕсли;
		//Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПечатьОбычное_КоммерческоеСоглашениеСПодписямиОбои") Тогда
		//	Элементы.ПодменюПечатьОбычное_КоммерческоеСоглашениеСПодписямиОбои.Видимость = Ложь;
		//КонецЕсли;
		//Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПечатьОбычное_КоммерческоеСоглашениеСПодписямиПлитка") Тогда
		//	Элементы.ПодменюПечатьОбычное_КоммерческоеСоглашениеСПодписямиПлитка.Видимость = Ложь;
		//КонецЕсли;
		Элементы.ФормаОтправитьПоEMail.Видимость = Ложь;
	КонецЕсли;
	// ++ VOG Ульянов И.В. 03.04.2020 CRM-533	
	Если Объект.вогТипДоговора = Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовараРазовый тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПечатьОбычное_КоммерческоеСоглашениеОбои") Тогда
			Элементы.ПодменюПечатьОбычное_КоммерческоеСоглашениеОбои.Видимость = Ложь;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПечатьОбычное_КоммерческоеСоглашениеПлитка") Тогда
			Элементы.ПодменюПечатьОбычное_КоммерческоеСоглашениеПлитка.Видимость = Ложь;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПечатьОбычное_КоммерческоеСоглашениеСПодписямиОбои") Тогда
			Элементы.ПодменюПечатьОбычное_КоммерческоеСоглашениеСПодписямиОбои.Видимость = Ложь;
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПечатьОбычное_КоммерческоеСоглашениеСПодписямиПлитка") Тогда
			Элементы.ПодменюПечатьОбычное_КоммерческоеСоглашениеСПодписямиПлитка.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	// -- VOG Ульянов И.В. 03.04.2020 CRM-533
	
	//END Кайдашов 05/03/20 crm-415
	// закоментировано VOG Ульянов И.В. 27.03.2020 CRM-494	
	//Если (Объект.вогСтатус = Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Действует  и Объект.вогТипДоговора<>Справочники.вогТипыДоговоровКонтрагентов.ДоговорПоставкиТовараРазовый) тогда
	//// ++ VOG Солодов В.В. 23.01.2020 CRM-205
	//	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПечатьОбычное_ДоговорПоставки") Тогда
	//		Элементы.ПодменюПечатьОбычное_ДоговорПоставки.Видимость = Ложь;
	//	КонецЕсли;
	//	// До изменения
	//	//Элементы.ПодменюПечатьОбычное_ДоговорПоставки.Видимость = Ложь;
	//	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ПодменюПечатьОбычное_КоммерческоеСоглашение") Тогда
	//		// -- VOG Солодов В.В. 23.01.2020
	//		МассивКС = Справочники.ДоговорыКонтрагентов.ПолучитьДействующееКоммерческоеСоглашениеКДоговору(Объект.Ссылка);
	//		Если МассивКС = Неопределено тогда
	//			Попытка 
	//				Элементы.ПодменюПечатьОбычное_КоммерческоеСоглашение.Видимость = ЛожЬ;
	//			Исключение
	//			КонецПопытки;
	//		Иначе
	//			ОтключитьПункт = Истина;
	//			Для каждого КС из МассивКС цикл
	//				СтатусКС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Кс,"Статус",Истина);	
	//				Если СтатусКС <> Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Действует тогда
	//					ОтключитьПункт = Ложь;
	//				КонецЕсли;
	//			КонецЦикла;
	//			Если ОтключитьПункт тогда
	//				Попытка 
	//					Элементы.ПодменюПечатьОбычное_КоммерческоеСоглашение.Видимость = ЛожЬ;
	//				Исключение
	//				КонецПопытки;
	//			КонецЕсли;	
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	ЗаполнитьТЧКС(); // ++ VOG Ульянов И.В. 13.03.2020 CRM-409
	
	// +++ VOG Кулаков П.Л. 20.03.2020 CRM-482
	Если РольДоступна("ПолныеПрава") Тогда
		Элементы.вогОтгрузкаПоСкануДоговораДо.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.вогОтгрузкаПоСкануДоговораДо.ТолькоПросмотр = НЕ Объект.вогДоступноРедактированиеОтгрузкаПоСкануДоговораДо;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры // ПриСозданииНаСервере()


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьЭлементов();
	// ++ VOG Солодов В.В. 30.09.2019 task 703
	ЗаполнитьПараметрыВыбораКонтактногоЛица();
	// -- VOG Солодов В.В. 30.09.2019
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект); // ++ VOG Солодов В.В. 22.06.2020 CRM-658
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//+вог
	Если Не ЗначениеЗаполнено(НастройкаВидимостиКарточкиОбъекта) Тогда
		НастройкаВидимостиКарточкиОбъекта       = "ПоказатьЗаполненные";
		РежимВидимостиПоказатьТолькоЗаполненные = Истина;
	
	КонецЕсли;
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	НастроитьФорму(НастройкиВидимостиИЗаголовков);
	
	//КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков);
	//-вог

		//+Классификаторы
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	//+ск
	// ++ VOG Солодов В.В. 29.08.2019 task 575
	// До изменения
	//скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	// -- VOG Солодов В.В. 29.08.2019
	//-ск

	// Вывод информации Общая
	РегистрыСведений.вогНастройкиОтображенияКлассификаторов.СформироватьМакет(Объект.Ссылка,ИнформацияОбъект,Метаданные.Справочники.ДоговорыКонтрагентов,ЭтаФорма,"КарточкаОбъекта");
	
	ЗаполнитьТЧКС(); // ++ VOG Ульянов И.В. 13.03.2020 CRM-409
	
	// -- VOG Солодов В.В. 22.06.2020
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект); // ++ VOG Солодов В.В. 22.06.2020 CRM-658
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события ОбработкаОповещения.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	//+вог
	Если ИмяСобытия = "Запись_БизнесПрцесса" 
	  И Параметр.Предмет = Объект.Ссылка Тогда
		
	
	КонецЕсли;
	//-вог
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//+вог
	Если Отказ Тогда
		Если НастройкаВидимостиФормы = "СвернутьВсеГруппы" Тогда
			НастройкаВидимостиФормы = "ПоказатьВсе";
		КонецЕсли;
		
		СкрытьРаскрытьВсеГруппы(Ложь);
		
	КонецЕсли;
	//-вог

КонецПроцедуры

&НаСервере
// Процедура обработчик события ПриСозданииНаСервере.
// Осуществляет первоначальное заполнение реквизитов формы.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//+Классификаторы
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	//CRM_КлассификаторыВызовСервера.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка);
	//-Классификаторы
	
	//+вог
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);

	
	Если Не Элементы.СтраницаКарточкаОбъекта.Доступность Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастройкаВидимостиФормы = "ПоказатьВсе";
		НастроитьФорму(НастройкиВидимостиИЗаголовков);
		СкрытьРаскрытьВсеГруппы(Ложь);
	Иначе
		НастроитьФорму(НастройкиВидимостиИЗаголовков);
	КонецЕсли;

	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(ТекущийОбъект, НастройкиВидимостиИЗаголовков);
	//-вог
	
	ЗаполнитьТЧКС(); // ++ VOG Ульянов И.В. 13.03.2020 CRM-409

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

#Область ПроцедурыОбработчикиСобытийРеквизитовФормы

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Валюта расчетов.
//
Процедура ВалютаРасчетовПриИзменении(Элемент)
	
	СформироватьНаименование();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры // ВалютаРасчетовПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода НомерДоговора.
//
Процедура НомерДоговораПриИзменении(Элемент)
	
	СформироватьНаименование();
	
КонецПроцедуры // НомерДоговораПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ДатаДоговора.
//
Процедура ДатаДоговораПриИзменении(Элемент)
	
	// ++ VOG Солодов В.В. 29.08.2019 task 575
	СформироватьНомерДоговораПоШаблону();
	// -- VOG Солодов В.В. 29.08.2019
	СформироватьНаименование();
	
КонецПроцедуры // ДатаДоговораПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ВидСкидкиНаценки.
//
Процедура ВидСкидкиНаценкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		Элементы.ВидЦен.АвтоВыборНезаполненного = Истина;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;	
	Иначе
		Элементы.ВидЦен.АвтоВыборНезаполненного = Ложь;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Очистка поля ввода ВидСкидкиНаценки.
//
Процедура ВидСкидкиНаценкиОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда
		Элементы.ВидЦен.АвтоВыборНезаполненного = Истина;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;	
	Иначе
		Элементы.ВидЦен.АвтоВыборНезаполненного = Ложь;
		Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

// +CRM

&НаКлиенте
Процедура Подключаемый_ПечатьВнешнегоМакета(Команда)
	
	ИмяМакета = СтрЗаменить(Команда.Имя, "Печать_", "");
	
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.Добавить(Объект.Ссылка);
	
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения);
	
КонецПроцедуры

// -CRM

#КонецОбласти

#КонецОбласти

//+Классификаторы
#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
		
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)

	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_ТегиКлассификатора_Обновить()

#КонецОбласти
//-Классификаторы

//+вог

#Область КарточкаОбъекта
	
&НаКлиенте
Процедура ГиперссылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Элемент.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента)
	
	Если ИмяЭлемента = "ГиперссылкаПерейтиФайлы"
	  ИЛИ ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
		Если вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка) Тогда
			ФормаИмя = "ОбщаяФорма.вогФормаУправленияПрисоединеннымиФайлами";
			ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Присоединенные файлы'"))
		Иначе	
			ФормаИмя = "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы";
		КонецЕсли;
		
		ТипыФайлов = Новый Массив;
		Если ИмяЭлемента = "ГиперссылкаПерейтиИзображения" Тогда
			ТипыФайлов.Добавить(ПредопределенноеЗначение("Перечисление.вогТипыПрисоединенныхФайлов.Изображение"));
			ПараметрыФормы.Вставить("ТипыФайлов", ТипыФайлов);
			
		КонецЕсли;
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", ФормаИмя);
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиЗначенияКлассификаторов" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов.Форма.ФормаСпискаКонтекст");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
		
	ИначеЕсли ИмяЭлемента = "ГиперссылкаПерейтиПротоколыРазногласий" Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("ДоговорКонтрагента", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("Отбор", Отбор);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Документ.вогПротоколРазногласий.Форма.ФормаСписка");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);

	КонецЕсли;
	
	Если Не ПараметрыПереходаПоГиперссылке.Свойство("РежимОткрытияОкнаФормы") Тогда
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	Возврат ПараметрыПереходаПоГиперссылке
	
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информции возможен только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы, , ЭтаФорма.УникальныйИдентификатор, , , ,
		ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементовПереключательРежима

&НаКлиенте
Процедура КарточкаОбъектаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Элементы.ГруппаГруппировкаЛевоПраво.Видимость Тогда
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Истина;
	КонецЕсли;
	
	Если СтрНайти(Расшифровка, "ГиперссылкаПерейти") <> 0 Тогда
		ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Расшифровка);
		ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	ИначеЕсли Элементы.Найти(Расшифровка) <> Неопределено Тогда
		Если Истина Тогда
			Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы.СтраницаРеквизитыОбъекта;
			
			РазвернутьСворачиваемуюГруппу(Расшифровка);
			ТекущийЭлементВыбор = Расшифровка;
			ПодключитьОбработчикОжидания("УстановитьАктивностьТекущийЭлемент",0.0001,Истина);
		Иначе
			Если Объект.Свойство(Расшифровка) Тогда
				Если ТипЗнч(Объект[Расшифровка]) <> Тип("Строка")
					И ТипЗнч(Объект[Расшифровка]) <> Тип("Булево")
					И ЗначениеЗаполнено(Объект[Расшифровка]) Тогда
					ПоказатьЗначение(,Объект[Расшифровка]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьТекущийЭлемент()
	ЭтаФорма.ТекущийЭлемент = Элементы[ТекущийЭлементВыбор];
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьГруппыРекурсивно(Элемент, Видимость)
	Если Видимость = Истина И 
		(СтрНайти(Элемент.Имя, "ДекорацияОткрыть") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаОбъемКолонки") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаДлинаКолонки") <> 0
		ИЛИ СтрНайти(Элемент.Имя, "ГруппаПлощадьКолонки") <> 0) Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Видимость = Видимость;
	Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьВидимостьГруппыРекурсивно(ПодчиненныйЭлемент,Видимость);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыКарточкаОбъектаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаРеквизитыОбъекта Тогда
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Истина;
	Иначе
		Элементы.ГруппаГруппировкаЛевоПраво.Видимость = Ложь;
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиКарточкиОбъектаПриИзменении(Элемент)
	
	Если НастройкаВидимостиКарточкиОбъекта = "ПоказатьЗаполненные" Тогда
		РежимВидимостиПоказатьТолькоЗаполненные = Истина;
	Иначе
		РежимВидимостиПоказатьТолькоЗаполненные = Ложь;
	КонецЕсли;   
	
	ОбновитьКарточку();

КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиФормыПриИзменении(Элемент)
	
	Если НастройкаВидимостиФормы = "ПоказатьВсе" Тогда
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Ложь);
	ИначеЕсли НастройкаВидимостиФормы = "ПоказатьОсновные" Тогда
		РежимВидимостиПоказатьТолькоВажные = Истина;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Ложь);
	Иначе
		РежимВидимостиПоказатьТолькоВажные = Ложь;
		НастроитьФорму();
		СкрытьРаскрытьВсеГруппы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьРаскрытьВсеГруппы(Свернуть = Неопределено)
	
	ИменаСворачиваемыхГрупп = ИменаСворачиваемыхГрупп();
	
	Для Каждого ИмяГруппы из ИменаСворачиваемыхГрупп Цикл
		
		ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВидимостиГруппИЭлементов

&НаСервере
Процедура НастроитьФорму(НастройкиВидимостиИЗаголовков = Неопределено)
	
	Элементы.СтраницаКарточкаОбъекта.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
	// Настройка видимости и заголовков
	Если Не ЗначениеЗаполнено(НастройкиВидимостиИЗаголовков) Тогда
		НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	КонецЕсли;
	
	ВидимостьЭлементов = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	ЗаголовкиЭлементов = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Для Каждого ЭлементВидимость Из ВидимостьЭлементов Цикл
		
		Если Элементы.Найти(ЭлементВидимость.Ключ) <> Неопределено Тогда
			Элементы[ЭлементВидимость.Ключ].Видимость = ЭлементВидимость.Значение;
		КонецЕсли;
		
		// Формирование видимости элементов подменю "Перейти"
		ИмяКоманды = ЭлементВидимость.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				Элементы[ИмяКоманды].Видимость = ЭлементВидимость.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовок Из ЗаголовкиЭлементов Цикл
		
		Если Элементы.Найти(ЭлементЗаголовок.Ключ) <> Неопределено Тогда
			Элементы[ЭлементЗаголовок.Ключ].Заголовок = ЭлементЗаголовок.Значение;
		КонецЕсли;
		
		// Формирование заголовков элементов подменю "Перейти"
		ИмяКоманды = ЭлементЗаголовок.Ключ;
		Если СтрНачинаетсяС(ИмяКоманды,"Гиперссылка") Тогда
			
			ИмяКоманды = СтрЗаменить(ИмяКоманды, "Гиперссылка", "Команда");
			
			Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
				
				СтрокаИсключение = НСтр("ru = 'Список'");
				НачалоСтроки     = СтрНайти(ЭлементЗаголовок.Значение, "(") - 1;
				
				Если СтрНайти(ЭлементЗаголовок.Значение, СтрокаИсключение) = 0
					И НачалоСтроки > 0 Тогда
					
					Элементы[ИмяКоманды].Заголовок = СокрЛП(Лев(ЭлементЗаголовок.Значение, НачалоСтроки));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
			
	НастроитьВидимостьСворачиваемыхГрупп();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемыхГрупп()
	
	НастроитьВидимостьСворачиваемойГруппы("Описание");
	НастроитьВидимостьСворачиваемойГруппы("СтороныДоговора");
	НастроитьВидимостьСворачиваемойГруппы("ДополнительныеРеквизиты");
	// ++ VOG Солодов В.В. 09.09.2019 task 636
	// Закомментировал
	// До изменения
	//НастроитьВидимостьСворачиваемойГруппы("Классификаторы");       
	//
	//НастроитьВидимостьСворачиваемойГруппы("ЦеныСкидки");
	// -- VOG Солодов В.В. 09.09.2019
	НастроитьВидимостьСворачиваемойГруппы("Подписи");
	//НастроитьВидимостьСворачиваемойГруппы("");
	//НастроитьВидимостьСворачиваемойГруппы("");

		
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьСворачиваемойГруппы(ИмяГруппы)
	
	ЭлементСворачиваяГруппа = Элементы["СворачиваемаяГруппа" + ИмяГруппы];
	Элементы["ГруппаЗаголовок" + ИмяГруппы].Видимость = ЕстьВидимыеЭлементыВГруппе(ЭлементСворачиваяГруппа);
	
КонецПроцедуры

&НаСервере
Функция ЕстьВидимыеЭлементыВГруппе(Элемент)
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Если ПодчиненныйЭлемент.Видимость 
				И ЕстьВидимыеЭлементыВГруппе(ПодчиненныйЭлемент) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПодчиненныйЭлемент.Видимость Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Элемент)
	ИмяГруппыСвернутьРазвернуть = Элемент.Имя;
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияОткрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ДекорацияЗакрыть", "");
	ИмяГруппыСвернутьРазвернуть = СтрЗаменить(ИмяГруппыСвернутьРазвернуть, "ЗаголовокГруппы", "");
	ИзменитьСвернутостьГруппы(ИмяГруппыСвернутьРазвернуть);
	ПодключитьОбработчикОжидания("УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы",0.0001,Истина);
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвернутостьГруппы(ИмяГруппы, Свернуть = Неопределено)
	Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["СворачиваемаяГруппа" + ИмяГруппы].Видимость, Не Свернуть);
	Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияОткрыть" + ИмяГруппы].Видимость, Свернуть);
	Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость = ?(Свернуть = Неопределено, Не Элементы["ДекорацияЗакрыть" + ИмяГруппы].Видимость, Не Свернуть);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПослеСворачиванияРазворачиванияГруппы()
	Если Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть].Видимость Тогда
		ТекущийЭлемент = Элементы["ДекорацияОткрыть" + ИмяГруппыСвернутьРазвернуть];
	Иначе
		ТекущийЭлемент = Элементы["ДекорацияЗакрыть" + ИмяГруппыСвернутьРазвернуть];
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РазвернутьСворачиваемуюГруппу(ИмяГруппы)
	ГруппаРодитель  = Элементы[ИмяГруппы].Родитель;
	Если ГруппаРодитель = ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	ИмяГруппыРодителя =ГруппаРодитель.Имя;
	
	Если СтрНайти(ИмяГруппыРодителя, "СворачиваемаяГруппа") = 0 Тогда
		РазвернутьСворачиваемуюГруппу(ИмяГруппыРодителя);
	Иначе
		ИмяГруппыРодителя = СтрЗаменить(ИмяГруппыРодителя, "СворачиваемаяГруппа", "");
		ИзменитьСвернутостьГруппы(ИмяГруппыРодителя, Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Подключаемый_МеханизмЗапускаБизнесПроцессов

&НаКлиенте
Процедура Подключаемый_ЗапускБизнесПроцесса(Команда)
	скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);
КонецПроцедуры // Подключаемый_ЗапускБизнесПроцесса()

#КонецОбласти

#Область Подписи

&НаКлиенте
Процедура УстановитьВидимостьПодписей()
	Элементы.ГруппаТЧПодписи.Видимость = ПодписиСписком;  	
	Элементы.ГруппаПодписант.Видимость = Не ПодписиСписком;
КонецПроцедуры

&НаКлиенте
Процедура ПодписиСпискомПриИзменении(Элемент)
	
	Если Не ПодписиСписком 
	  И Объект.вогПодписи.Количество() > 1 Тогда
		Оповещение = Новый ОписаниеОповещения("ПодписиСпискомПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Все строки в списке подписей, кроме первой, будут удалены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьРеквизитФормыПодписи(ЭтотОбъект);
		УстановитьВидимостьПодписей();
		
		Если ПодписиСписком Тогда
			ТекущийЭлемент = Элементы.вогПодписи;	
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписиСпискомПриИзмененииЗавершение(Результат, Контекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ПодписиСписком = Не ПодписиСписком;
		Возврат;
	КонецЕсли;
	
	Пока Объект.вогПодписи.Количество() > 1 Цикл
		СтрокаУдаления = Объект.вогПодписи[1];
		Объект.вогПодписи.Удалить(СтрокаУдаления);
	КонецЦикла;
		
	ЗаполнитьРеквизитФормыПодписи(ЭтотОбъект);
	УстановитьВидимостьПодписей();
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитФормыПодписи(Форма)
	
	Если Форма.Объект.вогПодписи.Количество() > 0 Тогда				
		Форма.Подписант = Форма.Объект.вогПодписи[0].Подписант;
	Иначе
		Форма.Подписант = Неопределено;
	КонецЕсли;

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитОбъектаПодписи(Форма)
	
	Если Форма.Объект.вогПодписи.Количество() > 0 Тогда
		Форма.Объект.вогПодписи[0].Подписант = Форма.Подписант;
	Иначе
		Подпись = Форма.Объект.вогПодписи.Добавить();
		Подпись.Подписант = Форма.Подписант;
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПодписантПриИзменении(Элемент)
	ЗаполнитьРеквизитОбъектаПодписи(ЭтотОбъект)
КонецПроцедуры

&НаКлиенте
Процедура ПодписиПриИзменении(Элемент)
	ЗаполнитьРеквизитФормыПодписи(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПодписиПослеУдаления(Элемент)
	ЗаполнитьРеквизитФормыПодписи(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПечатьПоТипу(Команда)
	
	ИмяМакета = ПолучитьИмяМакета(Объект.вогТипДоговора);
	Если ПустаяСтрока(ИмяМакета) Тогда
		Возврат;		
	КонецЕсли; 
	
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.Добавить(Объект.Ссылка);
	
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяМакета(ТипДоговора)
	
	Возврат ТипДоговора.ИмяМакета;
	
КонецФункции

 #КонецОбласти
   
 #Область Прочее
 
 &НаСервере
Функция ИменаСворачиваемыхГрупп()
	 
	ИменаСворачиваемыхГрупп = Новый Массив;
	
	ИменаСворачиваемыхГрупп.Добавить("Описание");
	ИменаСворачиваемыхГрупп.Добавить("СтороныДоговора");
	ИменаСворачиваемыхГрупп.Добавить("ДополнительныеРеквизиты");
	ИменаСворачиваемыхГрупп.Добавить("Классификаторы");
	
	ИменаСворачиваемыхГрупп.Добавить("ЦеныСкидки");
	ИменаСворачиваемыхГрупп.Добавить("Подписи");
	//ИменаСворачиваемыхГрупп.Добавить("");

	Возврат ИменаСворачиваемыхГрупп;
	
КонецФункции

&НаСервере
Процедура ОбновитьКарточку()
	
	НастройкиВидимостиИЗаголовков = вогОбщегоНазначения.НастройкиВидимостиИЗаголовков(Объект, РежимВидимостиПоказатьТолькоВажные);
	НастройкиВидимостиИЗаголовков.Вставить("ТолькоЗаполненные", РежимВидимостиПоказатьТолькоЗаполненные);
	
	КарточкаОбъекта = вогОбщегоНазначения.ТабличныйДокументКарточкиОбъекта(Объект, НастройкиВидимостиИЗаголовков);
	
КонецПроцедуры

 #КонецОбласти
 
&НаКлиенте
Процедура вогФормаДоговораПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	
	// ++ VOG Солодов В.В. 02.10.2019
	СформироватьНомерДоговораПоШаблону();
	// -- VOG Солодов В.В. 02.10.2019
	
КонецПроцедуры

&НаКлиенте
Процедура вогПолучитьНомерИзУчетнойСистемы(Команда)
	
	НомерДоговораУС = вогИнтеграцияСУчетнойСистемой.ПолучитьНомерДоговора(Объект.Ссылка);
	Если НомерДоговораУС <> Объект.НомерДоговора Тогда
	   	Объект.НомерДоговора	= НомерДоговораУС;
		Модифицированность		= Истина;
		СформироватьНаименование();
	КонецЕсли;
	
КонецПроцедуры
//-вог

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать


#Область МакетыИнформации

#Область ИнформацияОбъект

&НаКлиенте
Процедура ИнформацияОбъектОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка 	= Ложь;
	ТекстОбработчика 		= "";
	ТаблицаОбработчики 		= ЭтаФорма["КарточкаОбъекта_Обработчики"];
	ТаблицаРасшифровка		= ЭтаФорма["КарточкаОбъекта_Расшифровка"];
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Гиперссылка_") <> 0 Тогда
		ИмяГиперссылки 		= СтрЗаменить(Расшифровка,"Гиперссылка_","");
		Для каждого ТекущийОбработчик Из ТаблицаОбработчики Цикл
			Если ТекущийОбработчик.Имя = ИмяГиперссылки Тогда
				ТекстОбработчика = ТекущийОбработчик.ПроизвольныйКод;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение	
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Пользователи") Тогда
		// Сверунть группу Контакты
	//	СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
	//	ВыполнитьПереходСтраницы("СтраницаМенеджеры");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		// Сверунть группу Контакты
	//	СкрытьРаскрытьВсеГруппы(Истина);
		// Переход страницы
	//	ВыполнитьПереходСтраницы("СтраницаКонтакты");
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		ПоказатьЗначение(Неопределено,Расшифровка);
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") И СтрНайти(Расшифровка,"Расшифровка_") <> 0 Тогда
		ИмяРасшифровки 	= СтрЗаменить(Расшифровка,"Расшифровка_","");
		ИмяПараметра 	= "Объект." + ИмяРасшифровки;
		Для каждого ТекущийОбработчик Из ТаблицаРасшифровка Цикл
			Если ТекущийОбработчик.Имя = ИмяПараметра Тогда
				ТекстОбработчика = ТекущийОбработчик.ТекстОбработчика;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстОбработчика) Тогда
			Попытка
				Выполнить(ТекстОбработчика);
			Исключение
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// ++ VOG Солодов В.В. 28.08.2019 task 575
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура вогТипДоговораПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СформироватьНомерДоговораПоШаблону();
		СформироватьНаименование();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СформироватьНомерДоговораПоШаблону();
		СформироватьНаименование();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СформироватьНомерДоговораПоШаблону();
		СформироватьНаименование();
	КонецЕсли;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 13.03.2020 CRM-437
&НаКлиенте
Процедура ПодписантПартнераОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Объект.вогДокументОснованиеПартнера = ПолучитьОснованиеКонтактногоЛица(ВыбранноеЗначение, Объект.Владелец);
	КонецЕсли;
	
КонецПроцедуры // -- VOG Солодов В.В. 13.03.2020

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемыСвойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
												НавигационнаяСсылка = Неопределено,
												СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

// ++ VOG Солодов В.В. 06.09.2019 task 636
#Область СтандартныеПодсистемыПодключаемыеКоманды

&НаКлиенте 
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры 

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры 

#КонецОбласти
// -- VOG Солодов В.В. 06.09.2019

#Область ПодключемыеДополнительныеКоманды

&НаКлиенте
Процедура Подключаемый_ОбработчикДополнительнойКоманды(Команда) Экспорт 
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "скДанныеЗапуска")
		И ЭтаФорма.скДанныеЗапуска.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя)).Количество() > 0 Тогда
	
		скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);	
	Иначе
		вогУправлениеИнтерфейсомКлиент.ОбработчикКомандыФормы(Команда, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКоманды(Значение, ДополнительноеЗначение) Экспорт 
	
	вогУправлениеИнтерфейсомКлиент.ВыполнитьКодКомандыНаКлиенте(Значение, ДополнительноеЗначение, ЭтаФорма, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКомандыСервер(Значение, ДополнительноеЗначение) Экспорт 
	
	вогУправлениеИнтерфейсомСервер.ВыполнитьКодКомандыНаСервере(Значение, ДополнительноеЗначение, ЭтотОбъект, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПереходСтраницы(Команда)
	
	ВыполнитьПереходСтраницы(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиКоманда(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	Для Каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
		Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
			ЭлемКоманды.ЦветТекста 		= Новый Цвет(128, 0, 128);
			ЭлемКоманды.Шрифт 			= Новый Шрифт(, 10, Ложь,, Истина);
		Иначе
			ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28, 85, 174);
			ЭлемКоманды.Шрифт		 	= Новый Шрифт(, 10, Ложь,, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(Команда.Имя);
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Навигация

&НаКлиенте
Процедура ВыполнитьПереходСтраницы(ИмяКоманды)
	
	Попытка
		// Выделить кнопку перехода
		Для Каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
			
			Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
				ЭлемКоманды.ЦветТекста 	= Новый Цвет(128, 0, 128);
				ЭлемКоманды.Шрифт 		= Новый Шрифт(, 10, Ложь,, Истина);
			Иначе
				ЭлемКоманды.ЦветТекста 	= Новый Цвет(28, 85, 174);
				ЭлемКоманды.Шрифт 		= Новый Шрифт(, 10, Ложь,, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
		// Переход страницы
		Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы[ИмяКоманды];
		
	Исключение
		
		ШаблонСообщения 	= НСтр("ru = 'Не удалось перейти на страницу %1'");
		ТекстСообщения 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяКоманды);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Нумерация

&НаСервере
Процедура СформироватьНомерДоговораПоШаблону()
	
	Справочники.вогТипыДоговоровКонтрагентов.СформироватьНомерДоговораПоШаблону(Объект);
	
КонецПроцедуры

#КонецОбласти

// ++ VOG Солодов В.В. 13.03.2020 CRM-437
&НаСервереБезКонтекста
Функция ПолучитьОснованиеКонтактногоЛица(КонтактноеЛицо, ЮридическоеЛицо)
	
	ОснованиеКонтактногоЛица = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	вогКонтактныеЛицаПодписантыСрезПоследних.Основание КАК Основание
		|ИЗ
		|	РегистрСведений.вогКонтактныеЛицаПодписанты.СрезПоследних(
		|			,
		|			КонтактноеЛицо = &КонтактноеЛицо
		|				И ЮридическоеЛицо = &ЮридическоеЛицо) КАК вогКонтактныеЛицаПодписантыСрезПоследних";
	
	Запрос.УстановитьПараметр("КонтактноеЛицо", 	КонтактноеЛицо);
	Запрос.УстановитьПараметр("ЮридическоеЛицо", 	ЮридическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОснованиеКонтактногоЛица = ВыборкаДетальныеЗаписи.Основание;
	КонецЦикла;
	
	Возврат ОснованиеКонтактногоЛица;
	
КонецФункции // -- VOG Солодов В.В. 13.03.2020

// ++ VOG Солодов В.В. 30.09.2019 task 703
&НаКлиенте
Процедура ЗаполнитьПараметрыВыбораКонтактногоЛица()
	
	МассивРолей = Новый Массив();
	// ++ VOG Солодов В.В. 13.03.2020 CRM-437
	МассивРолей.Добавить(ПредопределенноеЗначение("Справочник.РолиКонтактныхЛицПартнеров.ПодписантДоговора"));
	
	МассивЗначений = Новый ФиксированныйМассив(МассивРолей);
	НовыйПараметр = Новый ПараметрВыбора("Отбор.РольКонтактногоЛица", МассивЗначений);
	// До изменения
	//МассивРолей.Добавить(ПредопределенноеЗначение("Справочник.РолиКонтактныхЛицПартнеров.ГенеральныйДиректор"));
	//МассивРолей.Добавить(ПредопределенноеЗначение("Справочник.РолиКонтактныхЛицПартнеров.ПодписантДоговора"));
	//МассивЗначений = Новый ФиксированныйМассив(МассивРолей);
	//НовыйПараметр = Новый ПараметрВыбора("Отбор.CRM_РольКонтактногоЛица", МассивЗначений);
	// -- VOG Солодов В.В. 13.03.2020
	
	МассивПараметровВыбора = Новый Массив();
	МассивПараметровВыбора.Добавить(НовыйПараметр);

	ПараметрыВыбораЭлемента = Новый ФиксированныйМассив(МассивПараметровВыбора);

	Элементы.ПодписантПартнера.ПараметрыВыбора = ПараметрыВыбораЭлемента;
	
КонецПроцедуры
// -- VOG Солодов В.В. 30.09.2019

&НаСервереБезКонтекста
Функция СформироватьДокументыPDFНаСервере(ссылка)
	
	Возврат Справочники.ДоговорыКонтрагентов.СформироватьPDFДокументы(Ссылка);
	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьКонтактныеЛица(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	вогСвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо КАК КонтактноеЛицо
	               |ИЗ
	               |	РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних КАК вогСвязиКонтактныхЛицСрезПоследних
	               |ГДЕ
	               |	вогСвязиКонтактныхЛицСрезПоследних.ОбъектСвязи В(&МассивСсылок)
	               |	И вогСвязиКонтактныхЛицСрезПоследних.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Работает)";
	Запрос.УстановитьПараметр("МассивСсылок",МассивСсылок);
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("КонтактноеЛицо"); 
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПоEMail(Команда)
	
	МассивPDF = СформироватьДокументыPDFНаСервере(Объект.Ссылка);
	Если МассивPDF.Количество() = 0 тогда
		Сообщить("Нет доступных форм для отправки по e-mail");	
	КонецЕсли;
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ЕстьФайлы",Истина);
	ДанныеЗаполнения.Вставить("Файлы",МассивPDF);
	СписокОбъектов = Новый СписокЗначений;
	СписокОбъектов.Добавить(Объект.Владелец);
	СписокОбъектов.Добавить(ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Владелец,"Партнер"));
	
	СписокКЛ = ПолучитьКонтактныеЛица(СписокОбъектов);
	Для каждого КЛ из СписокКЛ цикл
		СписокОбъектов.Добавить(КЛ);	
	КонецЦикла;
	// ++ VOG Солодов В.В. 22.06.2020 CRM-658
	вогОбщегоНазначенияКлиент.ОтправитьВыбравEMail(СписокОбъектов, ДанныеЗаполнения, Объект.Ссылка);
	// До изменения
	//вогОбщегоНазначенияКлиент.ОтправитьВыбравEMail(СписокОбъектов,ДанныеЗаполнения);
	// -- VOG Солодов В.В. 22.06.2020
	
КонецПроцедуры

#КонецОбласти
// -- VOG Солодов В.В. 28.08.2019

&НаСервере
Процедура ЗаполнитьТЧКС()			// ++ VOG Ульянов И.В. 13.03.2020 CRM-409
	
	Для каждого стр из Объект.КоммерческиеСоглашения цикл
		ЗаполнитьЗначенияСвойств(Стр,Стр.КоммерческоеСоглашение);
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура КоммерческиеСоглашенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элемент.ТекущиеДанные.КоммерческоеСоглашение);
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокКСДляВыбора() // ++ VOG Ульянов И.В. 18.03.2020 CRM-452
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	вогКоммерческиеСоглашения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогКоммерческиеСоглашения КАК вогКоммерческиеСоглашения
		|ГДЕ
		|	(вогКоммерческиеСоглашения.Владелец = &Партнер
		|			ИЛИ вогКоммерческиеСоглашения.ЮридическоеЛицо = &ЮридическоеЛицо)";
	
	Запрос.УстановитьПараметр("Партнер", Объект.Владелец.Партнер);
	Запрос.УстановитьПараметр("ЮридическоеЛицо", Объект.Владелец);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура КоммерческиеСоглашенияКоммерческоеСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) // ++ VOG Ульянов И.В. 18.03.2020 CRM-452
	
	МассивКСДляВыбора = ПолучитьСписокКСДляВыбора();
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	
	Для каждого Стр из МассивКСДляВыбора цикл
		СписокВыбора.Добавить(Стр);
	КонецЦикла;	
	
	Форма = ПолучитьФорму("Справочник.вогКоммерческиеСоглашения.ФормаВыбора",,Элемент);
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = МассивКСДляВыбора;
	
	Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура КоммерческиеСоглашенияКоммерческоеСоглашениеПриИзменении(Элемент) // ++ VOG Ульянов И.В. 18.03.2020 CRM-452
	ЗаполнитьТЧКС();
КонецПроцедуры

