#Область Переменные

&НаКлиенте
Перем ПервоеЗаполнениеПланировщика;

&НаКлиенте
Перем УдалениеСтроки; // VOG Солодов В.В. 24.06.2021 DEV-463

#КонецОбласти

#Область НастройкаСтраницФормы

&НаКлиенте
Процедура ПереходСтраницы(Команда)

	ВыполнитьПереходСтраницы(Команда.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереходСтраницы(ИмяКоманды)
	
	Попытка
		// Выделить кнопку перехода
		Для каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
			
			// +++ VOG Кулаков П.Л. 29.07.2020 CRM-806
			Если ТипЗнч(ЭлемКоманды) <> Тип("КнопкаФормы") Тогда
				Продолжить;
			КонецЕсли;
			// --- VOG Кулаков П.Л.
			
			Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
				ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
				ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
			Иначе
				ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
				ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
			КонецЕсли;
		КонецЦикла;
		// Переход страницы
		
		Если (Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя = "СтраницаЗадачи") И (ИмяКоманды <> "СтраницаЗадачи") тогда
			Если ЭтаФорма.Модифицированность = Истина тогда
				ЗаписатьСобытияПланировщика();
				ЗаполнитьДанныеПоРезультатамПодбора();
				ПересчитатьРасходы();
			КонецЕсли;	
		КонецЕсли;
		
		ЭтаФорма.Элементы.ГруппаКоманднаяПанельСворачивание.Видимость = Ложь;
		
		Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница = Элементы[ИмяКоманды];
		Если ИмяКоманды = "СтраницаЗадачи" тогда
			ПриПереходеНаСтраницуЗадачиНаКлиенте();
		КонецЕсли;
		
		// ++ VOG Солодов В.В. 10.11.2020 CRM-1026
		Если ИмяКоманды = "СтраницаРезультаты" Тогда
			ЗаполнитьТаблицуВыполненияЗадач();
		КонецЕсли;
		// -- VOG Солодов В.В. 10.11.2020 CRM-1026
		
	Исключение
		Сообщить(ОписаниеОшибки());
		ТекстСообщения 	= НСтр("ru = 'Не удалось перейти на страницу %1'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,ИмяКоманды));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаписатьСобытияПланировщика();
	//ЗаполнитьДанныеПоРезультатамПодбора(); //Павелко, Задача CRM-284, 11.02.2020 - в модуле объекта
	
	
	//START Кайдашов 04/02/20 CRM-260
	Если Не ЗначениеЗаполнено(Объект.ВремяНачала) тогда
		Сообщить("Не указана дата начала командировки");
		Отказ = Истина;	
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ВремяОкончания) тогда
		Сообщить("Не указана дата окончания командировки");
		Отказ = Истина;	
	КонецЕсли;
	Если Объект.ВремяНачала>Объект.ВремяОкончания тогда
		Сообщить("Дата начала командировки позже даты окончания");
		Отказ = Истина;	
	КонецЕсли;
	//END Кайдашов CRM-260
	
	// +++ VOG Кулаков П.Л. 31.07.2020 CRM-806
	Если ПараметрыЗаписи.Свойство("ЗапускБизнесПроцесса") И ПараметрыЗаписи.ЗапускБизнесПроцесса
		ИЛИ (ПараметрыЗаписи.Свойство("ИзменениеДаты") И ПараметрыЗаписи.ИзменениеДаты) Тогда
	ИначеЕсли Не Отказ Тогда
		БюджетИзменен = ПроверитьИзменениеБюджета();
		Если БюджетИзменен = Неопределено Тогда
			Сообщить("Нельзя изменять бюджет командировки в большую сторону");
			Отказ = Истина;
		ИначеЕсли БюджетИзменен Тогда
			Ответ = Вопрос(
			"Изменен бюджет на командировку. Потребуется согласование сотрудника финансового отдела. Продолжить?"
			, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			Иначе
				//Объект.Статус = ПредопределенноеЗначение("Перечисление.вогСтатусыКомандировок.Создан");
				//ОчиститьФинансированиеИЭтап();
				Объект.ИзмененБюджет = Истина;
				УстановитьНеобходимостьСогласования();
				ОчиститьСобытиеТриггера(Объект.Ссылка);
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьСтатусыСогласования();
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЗапускБизнесПроцесса") И ПараметрыЗаписи.ЗапускБизнесПроцесса Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ ИЛИ (ПараметрыЗаписи.Свойство("ИзменениеДаты") И ПараметрыЗаписи.ИзменениеДаты) Тогда
		ОчиститьФинансирование = ПроверитьИзменениеДатыКомандировки();
		Если ОчиститьФинансирование Тогда 
			Ответ = Вопрос(	
					"Дата начала командировки перенесена на следующий месяц. Потребуется согласование сотрудника финансового отдела. Продолжить?"
					,РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ОчиститьФинансированиеИЭтап();
				Объект.Статус = ПредопределенноеЗначение("Перечисление.вогСтатусыКомандировок.Создан");
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// +++ VOG Кулаков П.Л. 08.09.2020 CRM-875
	Если НЕ Объект.ИзмененСоставЗадач Тогда
		СоставЗадачИзменен = ПроверитьИзменениеСоставаЗадач();
		Если СоставЗадачИзменен Тогда
			Ответ = Вопрос("Изменен список задач, потребуется согласование РТН, продолжить?",РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			Иначе
				Объект.ИзмененСоставЗадач = Истина;
				УстановитьНеобходимостьСогласования();
				ОчиститьСобытиеТриггера(Объект.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	// --- VOG Кулаков П.Л.

КонецПроцедуры

// +++ VOG Кулаков П.Л. 08.09.2020 CRM-875
&НаСервереБезКонтекста
Процедура ОчиститьСобытиеТриггера(Командировка)
	
	УстановитьПривилегированныйРежим(Истина); // VOG Солодов В.В. 09.06.2021 DEV-626
	
	ТриггерСсылка = Справочники.CRM_Триггеры.ПолучитьСсылку(Новый УникальныйИдентификатор("70774d23-5fa3-11ea-b3c7-005056bcd3e3")); // УИД в рабочей базе
	НаборЗаписей = РегистрыСведений.CRM_ОбработанныеОбъектыТриггеров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Командировка);
	НаборЗаписей.Отбор.Триггер.Установить(ТриггерСсылка);
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь); // VOG Солодов В.В. 09.06.2021 DEV-626
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 08.09.2020 CRM-875
&НаСервере
Функция ПроверитьИзменениеСоставаЗадач();
	
	Если Объект.Статус = Перечисления.вогСтатусыКомандировок.Согласован 
				ИЛИ Объект.Статус = Перечисления.вогСтатусыКомандировок.Утверждено Тогда
		Согласование = РегистрыСведений.вогЭтапыСогласованияКомандировок.ПолучитьНеобходимыеЭтапыСогласования(Объект.Сотрудник);
		Если Согласование.СогласованиеРТН Тогда
			ТаблицаЗадач 		= Объект.Задачи.Выгрузить(,"АдресОфиса,ВремяНачала,ВремяОкончания,Город,Задача,Запланировал,Клиент,КлючеваяЦель,Комментарий,ОжидаемыйРезультат,Приоритет,Продолжительность,Расположение,Рынок,Сотрудник,ТорговаяТочка");
			СтараяТаблицаЗадач 	= Объект.Ссылка.Задачи.Выгрузить(,"АдресОфиса,ВремяНачала,ВремяОкончания,Город,Задача,Запланировал,Клиент,КлючеваяЦель,Комментарий,ОжидаемыйРезультат,Приоритет,Продолжительность,Расположение,Рынок,Сотрудник,ТорговаяТочка");
			ТаблицыЗадачОдинаковы = СравнитьТаблицыНаборовЗаписей(ТаблицаЗадач,СтараяТаблицаЗадач); 
			Возврат Не ТаблицыЗадачОдинаковы;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 08.09.2020 CRM-875
Процедура УстановитьНеобходимостьСогласования()
	
	Для Каждого Строка Из Объект.КомандированныеСотрудники Цикл
		Если Строка.Сотрудник = ПредопределенноеЗначение("Справочник.Пользователи.Водитель") Тогда
			Продолжить;
		КонецЕсли;
		РегистрыСведений.вогЭтапыСогласованияКомандировок.УстановитьЭтапСогласования(Строка.Сотрудник,Объект.Ссылка,Строка.Этап,Истина);
	КонецЦикла;
	
КонецПроцедуры
// --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 31.07.2020 CRM-806
&НаСервере
функция ПроверитьИзменениеДатыКомандировки()
	
	ПроверятьДатуКомандировки = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогФинансированиеКомандировок.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.вогФинансированиеКомандировок КАК вогФинансированиеКомандировок
		|ГДЕ
		|	вогФинансированиеКомандировок.Командировка = &Командировка
		|	И вогФинансированиеКомандировок.Финансирование = ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.ВБюджете)
		|	И вогФинансированиеКомандировок.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Пользователи.Водитель)";
	
	Запрос.УстановитьПараметр("Командировка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПроверятьДатуКомандировки = НЕ РезультатЗапроса.Пустой();
	
	ОчиститьФинансирование = Ложь;
	
	Если ПроверятьДатуКомандировки Тогда
		Если Объект.ВремяНачала <> Объект.Ссылка.ВремяНачала Тогда
			Если Год(Объект.ВремяНачала) = Год(Объект.Ссылка.ВремяНачала) И Месяц(Объект.ВремяНачала) > Месяц(Объект.Ссылка.ВремяНачала) Тогда
				ОчиститьФинансирование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ОчиститьФинансирование;
	
КонецФункции
// --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 30.07.2020 CRM-806
&НаСервере
Процедура ОчиститьФинансированиеИЭтап()
	
	Для Каждого Строка Из Объект.КомандированныеСотрудники Цикл
		Если Строка.Сотрудник = ПредопределенноеЗначение("Справочник.Пользователи.Водитель") Тогда
			Продолжить;
		КонецЕсли;
		РегистрыСведений.вогЭтапыСогласованияКомандировок.УстановитьЭтапСогласования(Строка.Сотрудник,Объект.Ссылка,ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.ПустаяСсылка"),Истина);
		РегистрыСведений.вогФинансированиеКомандировок.УстановитьФинансирование(Строка.Сотрудник,Объект.Ссылка,ПредопределенноеЗначение("Перечисление.вогВидыФинансирования.ПустаяСсылка"));
	КонецЦикла;
	
КонецПроцедуры
// --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 08.09.2020 CRM-875
&НаСервере
Функция СравнитьТаблицыНаборовЗаписей(ТаблицаЗначений1, ТаблицаЗначений2) Экспорт

    Если ТипЗнч(ТаблицаЗначений1) <> Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ТаблицаЗначений2) <> Тип("ТаблицаЗначений") Тогда
        Возврат Ложь;
    КонецЕсли; 
    
    Если ТаблицаЗначений1.Количество() <> ТаблицаЗначений2.Количество() Тогда
        Возврат Ложь;
    КонецЕсли; 

    Если ТаблицаЗначений1.Колонки.Количество() <> ТаблицаЗначений2.Колонки.Количество() Тогда
        Возврат Ложь;
    КонецЕсли;
    
    // Проверим поля
    Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
        Если ТаблицаЗначений2.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
            Возврат Ложь;
        КонецЕсли;
    КонецЦикла; 
    Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
        Если ТаблицаЗначений1.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
            Возврат Ложь;
        КонецЕсли;
    КонецЦикла; 
    
    // сформируем строку индекса для оптимизации поиска по таблице значений
    СтрокаИндекса = "";
    Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
        Если СтрокаИндекса = "" Тогда
            СтрокаИндекса = Колонка.Имя;
        Иначе
            СтрокаИндекса = СтрокаИндекса+","+Колонка.Имя;
        КонецЕсли;
    КонецЦикла;
    // добавим индекс
    ТаблицаЗначений2.Индексы.Добавить(СтрокаИндекса);
    
    // Проверим записи
    Для каждого СтрокаТаблицы Из ТаблицаЗначений1 Цикл
        СтруктураПоиска = Новый Структура;
        Для каждого Колонка Из ТаблицаЗначений1.Колонки Цикл
            СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
        КонецЦикла;
        СтрокиТаблицы2 = ТаблицаЗначений2.НайтиСтроки(СтруктураПоиска);
        Если СтрокиТаблицы2.Количество() <> 1 Тогда
            Возврат Ложь;
        КонецЕсли; 
    КонецЦикла;
    
    // сформируем строку индекса для оптимизации поиска по таблице значений
    СтрокаИндекса = "";
    Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
        Если СтрокаИндекса = "" Тогда
            СтрокаИндекса = Колонка.Имя;
        Иначе
            СтрокаИндекса = СтрокаИндекса+","+Колонка.Имя;
        КонецЕсли;
    КонецЦикла;
    // добавим индекс
    ТаблицаЗначений1.Индексы.Добавить(СтрокаИндекса);
    
    Для каждого СтрокаТаблицы Из ТаблицаЗначений2 Цикл
        СтруктураПоиска = Новый Структура;
        Для каждого Колонка Из ТаблицаЗначений2.Колонки Цикл
            СтруктураПоиска.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
        КонецЦикла;
        СтрокиТаблицы1 = ТаблицаЗначений1.НайтиСтроки(СтруктураПоиска);
        Если СтрокиТаблицы1.Количество() <> 1 Тогда
            Возврат Ложь;
        КонецЕсли; 
    КонецЦикла;
    
    Возврат Истина;
    
КонецФункции // --- VOG Кулаков П.Л. // СравнитьТаблицыЗначений

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьПредставительскиеРасходы();
	 ПересчитатьРасходы();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	
	// ++ VOG Солодов В.В. 04.02.2020 CRM-212
	ПервоеЗаполнениеПланировщика = Истина;
	// -- VOG Солодов В.В. 04.02.2020
	
	// +++ VOG Кулаков П.Л. 17.03.2020 CRM-463
		ПересчитатьРасходы();
	// --- VOG Кулаков П.Л. 
	
	Если Объект.Сотрудник <> ПользователиКлиентСервер.ТекущийПользователь() и НЕ ПользовательРольДоступна("ПолныеПрава") тогда
		ЭтаФорма.Элементы.ГруппаШапкаЦентра.ТолькоПросмотр = Истина;
		ЭтаФорма.Элементы.ГруппаШапка.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	Если ПользовательРольДоступна("ПолныеПрава") тогда
		ЭтаФорма.Элементы.Статус.ТолькоПросмотр = Ложь;
		ЭтаФорма.Элементы.Финансирование.ТолькоПросмотр = Ложь;
	Иначе	
		ЭтаФорма.Элементы.Статус.ТолькоПросмотр = Истина;
		ЭтаФорма.Элементы.Финансирование.ТолькоПросмотр = Истина;
	КонецЕсли;		
	
	Если Параметры.Ключ.Пустая() тогда
		ВыполнитьПереходСтраницы("СтраницаДетали");
	Иначе
		ВыполнитьПереходСтраницы("СтраницаЗадачи");
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 04.02.2020 CRM-212
	ПервоеЗаполнениеПланировщика = Ложь;
	// -- VOG Солодов В.В. 04.02.2020
	
	// +++ VOG Кулаков П.Л. 01.09.2020 CRM-885
	УстановитьДоступностьДат();
	// --- VOG Кулаков П.Л.
	
	// +++ VOG Кулаков П.Л. 26.10.2020 CRM-999
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласования(ЭтаФорма);
	// --- VOG Кулаков П.Л.
	
	//--> VOG Турский Сергей 07.12.2020 16:36:40 ID заявки: CRM 1067.
	УстановитьДоступностьЗаявлениеНаВыдачуДенежныхСредств();
	//<-- VOG Турский Сергей 07.12.2020 16:36:40 ID заявки: CRM 1067.
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 01.09.2020 CRM-885
&НаКлиенте
Процедура УстановитьДоступностьДат()
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.вогСтатусыКомандировок.Создан") Тогда
		Элементы.ВремяНачала.ТолькоПросмотр = Истина;
		Элементы.ВремяОкончания.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЭтотОбъект.Объект.Ссылка.Пустая() тогда
		Объект.Сотрудник = Пользователи.ТекущийПользователь();
		Объект.Статус = Перечисления.вогСтатусыКомандировок.Создан;
	КонецЕсли;	
	
	ПредыдущаяДатаНачала = Объект.ВремяНачала;
	ПредыдущаяДатаОкончания = Объект.ВремяОкончания;
	
	// ++ VOG Солодов В.В. 13.02.2020 CRM-342
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ОбновитьПредставительскиеРасходы();
	КонецЕсли;
	// -- VOG Солодов В.В. 13.02.2020
	
	УстановитьВидимостьКомандыНаправитьНаПроверку(); // VOG Ульянов И.В. 20.02.2020 CRM-344
	
	// +++ VOG Кулаков П.Л. 30.07.2020 CRM-806
	ОтобразитьКомандуСогласовать();
	// --- VOG Кулаков П.Л.
	
	// +++ VOG Кулаков П.Л. 01.09.2020 CRM-885
	ОтобразитьКомандуСогласоватьИзменения();
	ОтобразитьКомандуОтменитьКомандировку();
	Если Объект.Статус = Перечисления.вогСтатусыКомандировок.Отменено Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.КомандированныеСотрудникиДобавитьВодителя.Доступность = Ложь;
		Элементы.КомандированныеСотрудникиДобавитьДТН.Доступность = Ложь;
		Элементы.КомандированныеСотрудникиУдалитьСотрудника.Доступность = Ложь;
		Элементы.ФормаСогласовать.Доступность = Ложь;
		Элементы.ФормаСогласоватьИзменение.Доступность = Ложь;
		Элементы.СписокЗадач.ТолькоПросмотр = Истина;
		Элементы.Задачи.ТолькоПросмотр = Истина;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
	вогОбщегоНазначенияКлиентСервер.УстановитьПодсказкуКнопкиОткрытьЗадачу(ЭтаФорма);
	// --- VOG Кулаков П.Л.
	
	// ++ VOG Солодов В.В. 25.01.2021 DEV-102
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	// -- VOG Солодов В.В. 25.01.2021 DEV-102
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 30.07.2020 CRM-806
&НаСервере
Процедура ОтобразитьКомандуСогласовать()
	
	//Кайдашов CRM-240 END
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_БизнесПроцесс.Ссылка КАК Ссылка
	               |ИЗ
	               |	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	               |ГДЕ
	               |	CRM_БизнесПроцесс.Предмет = &Предмет
	               |	И НЕ CRM_БизнесПроцесс.Завершен
	               |	И CRM_БизнесПроцесс.КартаМаршрута В(&КартыМаршрута)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	CRM_БизнесПроцесс.Ссылка";
	Запрос.УстановитьПараметр("Предмет",Объект.Ссылка);
	КартыМаршрута = Новый Массив;
	КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("a274dd17-5f9c-11ea-b3c7-005056bcd3e3"));
	КартыМаршрута.Добавить(КартаМаршрута);
	КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("b39e7c2c-d255-11ea-8f2a-005056bcd3e3"));
	Запрос.УстановитьПараметр("КартыМаршрута",КартыМаршрута);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Элементы.ФормаСогласовать.Видимость = Ложь;	
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Пользователи.ТекущийПользователь()<>Объект.Сотрудник тогда
		Элементы.ФормаСогласовать.Видимость = Ложь;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.ФормаСогласовать.Видимость = Ложь;	
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.вогСтатусыКомандировок.НеСогласовано Тогда
		Элементы.ФормаСогласовать.Видимость = Ложь;	
	КонецЕсли;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновитьПредставительскиеРасходы();
	
//Кайдашов CRM-240 START	
	Если РольДоступна("ПолныеПрава") или РольДоступна("ЧтениеВсехКомандировок") или РольДоступна("ЧтениеИзменениеКомандировокПоСвоейОрганизации") тогда
		УстановитьПривилегированныйРежим(Истина);
		
		// ++ VOG Солодов В.В. 16.11.2020 CRM-1026
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить(
			"ИдентификаторЗадачи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		ПараметрыОтбораСтрок.Вставить("НаборЗадач", Справочники.вогНаборыТиповыхЗадач.ПустаяСсылка());
		
		НайденныеСтроки = Объект.Задачи.НайтиСтроки(ПараметрыОтбораСтрок);
		// -- VOG Солодов В.В. 16.11.2020 CRM-1026
		
		СписокЗадачРезультаты.Загрузить(Объект.Задачи.Выгрузить(НайденныеСтроки)); // VOG Солодов В.В. 16.11.2020 CRM-1026 // Добавлено НайденныеСтроки
		Для каждого Строка из СписокЗадачРезультаты цикл
			// ++ VOG Солодов В.В. 14.09.2020 
			//Если ЗначениеЗаполнено(Строка.ИдентификаторЗадачи) Тогда
			//	Строка.ЗадачаТекст = ПолучитьДанныеПунктаПоручения(Строка);
			//ИначеЕсли ЗначениеЗаполнено(Строка.НаборЗадач) Тогда
			//	Строка.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(Строка.НаборЗадач);
			//Иначе
				Строка.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(Строка.Задача);
			//КонецЕсли;
			// До изменения
			//Строка.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(Строка.Задача);
			// -- VOG Солодов В.В. 14.09.2020 
			Строка.КлиентТекст = ПолучитьНазваниеПривилегированныйРежим(Строка.Клиент);	
			Строка.ТорговаяТочкаТекст = ПолучитьНазваниеПривилегированныйРежим(Строка.ТорговаяТочка);	
			Если ТипЗнч(Строка.Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") тогда
				Строка.Выполнена = Строка.Задача.Выполнена;	
			КонецЕсли;	
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		Для каждого СтрокаЗадач из Объект.Задачи цикл
			
			// ++ VOG Солодов В.В. 16.11.2020 CRM-1026
			Если ЗначениеЗаполнено(СтрокаЗадач.ИдентификаторЗадачи) Или ЗначениеЗаполнено(СтрокаЗадач.НаборЗадач) Тогда
				Продолжить;
			КонецЕсли;
			// -- VOG Солодов В.В. 16.11.2020 CRM-1026
			
			Попытка
				Если ТипЗнч(СтрокаЗадач.Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") тогда
					СтрокаЗадач.Задача.ПолучитьОбъект();
					нСтр = СписокЗадачРезультаты.Добавить();
					ЗаполнитьЗначенияСвойств(нСтр,СтрокаЗадач);
					// ++ VOG Солодов В.В. 14.09.2020 
					//Если ЗначениеЗаполнено(нСтр.ИдентификаторЗадачи) Тогда
					//	нСтр.ЗадачаТекст = ПолучитьДанныеПунктаПоручения(нСтр);
					//ИначеЕсли ЗначениеЗаполнено(нСтр.НаборЗадач) Тогда
					//	нСтр.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(нСтр.НаборЗадач);
					//Иначе
						нСтр.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(нСтр.Задача);
					//КонецЕсли;
					// До изменения
					//нСтр.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(нСтр.Задача);
					// -- VOG Солодов В.В. 14.09.2020
					нСтр.КлиентТекст = ПолучитьНазваниеПривилегированныйРежим(нСтр.Клиент);	
					нСтр.ТорговаяТочкаТекст = ПолучитьНазваниеПривилегированныйРежим(нСтр.ТорговаяТочка);	
					нСтр.Выполнена = СтрокаЗадач.Задача.Выполнена;	
				ИначеЕсли ТипЗнч(СтрокаЗадач.Задача) = Тип("ДокументСсылка.CRM_Мероприятие") тогда
					Если СтрокаЗадач.Задача.Ответственный = Пользователи.ТекущийПользователь() или ПараметрыСеанса.вогПодчиненныеСотрудники.Найти(СтрокаЗадач.Задача.Ответственный)<>Неопределено тогда
						нСтр = СписокЗадачРезультаты.Добавить();
						ЗаполнитьЗначенияСвойств(нСтр,СтрокаЗадач);	
						нСтр.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(нСтр.Задача);	
						нСтр.КлиентТекст = ПолучитьНазваниеПривилегированныйРежим(нСтр.Клиент);	
						нСтр.ТорговаяТочкаТекст = ПолучитьНазваниеПривилегированныйРежим(нСтр.ТорговаяТочка);	
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
    
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка,,ЭтаФорма.УникальныйИдентификатор);
	Исключение
		Сообщить(ОписаниеОшибки());
		ТолькоПросмотр = Истина;
		Элементы.Календарь.Доступность = Истина;
		Элементы.КомандированныеСотрудники.Доступность = Истина;
	КонецПопытки;
	
	ЗаполнитьСтатусыСогласования(); // VOG Ульянов И.В. 27.02.2020 CRM-344
	
	Для каждого Строка из Объект.КомандированныеСотрудники цикл
		Строка.Подразделение = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Строка.Сотрудник,"Подразделение");
		Строка.Должность = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Строка.Сотрудник,"CRM_ДолжностнаяПозиция");
		ТекПодразделение = Строка.Подразделение;
		Пока НЕ ТекПодразделение.ОбособленноеПодразделение Цикл
			Родитель =  вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекПодразделение,"Родитель");
			Если ЗначениеЗаполнено(Родитель) тогда
				ТекПодразделение = Родитель;	
			Иначе
				Прервать;
			КонецЕсли;		
		КонецЦикла;
		Строка.Филиал =  ТекПодразделение;
	КонецЦикла;
	
	// +++ VOG Кулаков П.Л. 08.09.2020 CRM-875
	Если Объект.НаДоработкуОтГДУК Тогда
		ТекстЗаголовка = " Возвращено на доработку  ГД УК";
	ИначеЕсли Объект.ИзмененБюджет Тогда
		ТекстЗаголовка = " Изменены расходы";
	ИначеЕсли Объект.ИзмененПериод Тогда
		ТекстЗаголовка = " Изменен период";
	ИначеЕсли Объект.ИзмененСоставЗадач Тогда
		ТекстЗаголовка = " Изменены задачи";
	Иначе
		ТекстЗаголовка = "";
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ТекстЗаголовка;
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры

// ++ VOG Солодов В.В. 23.12.2020 DEV-41
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ИсключаемыеСтатусы = Новый Массив;
	ИсключаемыеСтатусы.Добавить(Перечисления.вогСтатусыКомандировок.Отменено);
	ИсключаемыеСтатусы.Добавить(Перечисления.вогСтатусыКомандировок.НеСогласовано);
	ИсключаемыеСтатусы.Добавить(Перечисления.вогСтатусыКомандировок.УчастиеОтклонено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиТекущейКомандировки.Задача КАК Задача,
		|	ЗадачиТекущейКомандировки.Клиент КАК Клиент,
		|	ЗадачиТекущейКомандировки.ТорговаяТочка КАК ТорговаяТочка,
		|	ЗадачиТекущейКомандировки.Город КАК Город
		|ПОМЕСТИТЬ ВТ_ЗадачиТекущейКомандировки
		|ИЗ
		|	&ЗадачиТекущейКомандировки КАК ЗадачиТекущейКомандировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ЗадачиТекущейКомандировки.Задача КАК Задача,
		|	ВТ_ЗадачиТекущейКомандировки.ТорговаяТочка КАК Предмет
		|ПОМЕСТИТЬ ВТ_Задачи
		|ИЗ
		|	ВТ_ЗадачиТекущейКомандировки КАК ВТ_ЗадачиТекущейКомандировки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки КАК вогТорговыеТочки
		|		ПО ВТ_ЗадачиТекущейКомандировки.ТорговаяТочка = вогТорговыеТочки.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ЗадачиТекущейКомандировки.Задача,
		|	ВТ_ЗадачиТекущейКомандировки.Клиент
		|ИЗ
		|	ВТ_ЗадачиТекущейКомандировки КАК ВТ_ЗадачиТекущейКомандировки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки КАК вогТорговыеТочки
		|		ПО ВТ_ЗадачиТекущейКомандировки.ТорговаяТочка = вогТорговыеТочки.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК СпрПартнеры
		|		ПО ВТ_ЗадачиТекущейКомандировки.Клиент = СпрПартнеры.Ссылка
		|ГДЕ
		|	вогТорговыеТочки.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ЗадачиТекущейКомандировки.Задача,
		|	ВТ_ЗадачиТекущейКомандировки.Город
		|ИЗ
		|	ВТ_ЗадачиТекущейКомандировки КАК ВТ_ЗадачиТекущейКомандировки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки КАК вогТорговыеТочки
		|		ПО ВТ_ЗадачиТекущейКомандировки.ТорговаяТочка = вогТорговыеТочки.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК СпрПартнеры
		|		ПО ВТ_ЗадачиТекущейКомандировки.Клиент = СпрПартнеры.Ссылка
		|ГДЕ
		|	вогТорговыеТочки.Ссылка ЕСТЬ NULL
		|	И СпрПартнеры.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА вогЗадачиПоручений.Пункт ЕСТЬ NULL
		|			ТОГДА ВТ_Задачи.Задача
		|		КОГДА НЕ вогНаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
		|			ТОГДА вогНаборыТиповыхЗадач.Ссылка
		|		ИНАЧЕ вогЗадачиПоручений.Пункт
		|	КОНЕЦ КАК Задача,
		|	ВТ_Задачи.Предмет КАК Предмет,
		|	вогКомандировкаЗадачи.Ссылка.Сотрудник КАК Инициатор
		|ИЗ
		|	ВТ_Задачи КАК ВТ_Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вогКомандировка.Задачи КАК вогКомандировкаЗадачи
		|		ПО ВТ_Задачи.Задача = вогКомандировкаЗадачи.Задача
		|			И (НЕ вогКомандировкаЗадачи.Ссылка = &Ссылка)
		|			И (НЕ вогКомандировкаЗадачи.Ссылка.Статус В (&ИсключаемыеСтатусы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК вогЗадачиПоручений
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНаборыТиповыхЗадач КАК вогНаборыТиповыхЗадач
		|			ПО вогЗадачиПоручений.НаборЗадач = вогНаборыТиповыхЗадач.Ссылка
		|		ПО ВТ_Задачи.Задача = вогЗадачиПоручений.Объект
		|			И ВТ_Задачи.Предмет = вогЗадачиПоручений.Предмет";
	
	Запрос.УстановитьПараметр("ЗадачиТекущейКомандировки", ТекущийОбъект.Задачи.Выгрузить());
	Запрос.УстановитьПараметр("ИсключаемыеСтатусы", ИсключаемыеСтатусы);
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ШаблонСообщения = НСтр("ru = 'Задача %1 для %2 уже добавлена в другую командировку, инициатором которой является %3.'");
		ТекстСообщения = СтрШаблон(
			ШаблонСообщения,
			ВыборкаДетальныеЗаписи.Задача,
			ВыборкаДетальныеЗаписи.Предмет,
			ВыборкаДетальныеЗаписи.Инициатор);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // -- VOG Солодов В.В. 23.12.2020 DEV-41

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр) //Павелко, Таск 000000936, 28.11.2019
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПриИзменении(Элемент)
	
	Если НЕ ПроверитьВозможностьИзмененияПериодаКомандировки() или не ЗначениеЗаполнено(Объект.ВремяОкончания) тогда
		Сообщить("Есть задачи которые не попадают в новый период");	
		Объект.ВремяОкончания = ПредыдущаяДатаОкончания;
	КонецЕсли;
	
	Если Объект.ВремяОкончания<Объект.ВремяНачала тогда
		 Объект.ВремяОкончания = КонецДня(Объект.ВремяНачала);
	КонецЕсли;
	
	ПересчитатьПродолжительностьКомандировки(Объект);
	ПредыдущаяДатаОкончания = Объект.ВремяОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВремяНачалаПриИзменении(Элемент) //Павелко, Таск 000000936, 28.11.2019
	
	ПересчитатьПродолжительностьКомандировки(Элементы.РасходыПроезд.ТекущиеДанные, "Час");	
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВремяОкончанияПриИзменении(Элемент) //Павелко, Таск 000000936, 28.11.2019
	
	ПересчитатьПродолжительностьКомандировки(Элементы.РасходыПроезд.ТекущиеДанные, "Час");	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьВодителя(Команда) //Павелко, Таск 000000936, 28.11.2019
	
	ПользовательВодитель = ПредопределенноеЗначение("Справочник.Пользователи.Водитель");
	
	Если Объект.КомандированныеСотрудники.НайтиСтроки(Новый Структура("Сотрудник", ПользовательВодитель)).Количество() = 0 Тогда
		НоваяСтрока = Объект.КомандированныеСотрудники.Добавить();
		НоваяСтрока.Сотрудник = ПользовательВодитель;
		НоваяСтрока.КоличествоДней = Объект.Продолжительность;
		НоваяСтрока.Сумма = РассчитатьСуммуКомандировочных(НоваяСтрока.КоличествоДней,НоваяСтрока.Сотрудник)
	КонецЕсли;	
	
	ПересчитатьРасходы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДТН(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДТНЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.вогКомандировка.Форма.ФормаВыборПользователя",,ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДТНЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		НоваяСтрока = Объект.КомандированныеСотрудники.Добавить();
		НоваяСтрока.Сотрудник = РезультатВыбора;
		ЭтаФорма.Модифицированность = Истина;
		НоваяСтрока.Подразделение = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(НоваяСтрока.Сотрудник,"Подразделение");
		НоваяСтрока.Должность = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(НоваяСтрока.Сотрудник,"CRM_ДолжностнаяПозиция");
		ТекПодразделение = НоваяСтрока.Подразделение;
		Обособленное = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекПодразделение,"ОбособленноеПодразделение");
		Пока НЕ Обособленное Цикл
			Родитель =  вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекПодразделение,"Родитель");
			Если ЗначениеЗаполнено(Родитель) тогда
				ТекПодразделение = Родитель;	
				Обособленное = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекПодразделение,"ОбособленноеПодразделение");
			Иначе
				Прервать;
			КонецЕсли;		
		КонецЦикла;
		НоваяСтрока.Филиал =  ТекПодразделение;
		// +++ VOG Кулаков П.Л. 19.03.2020 CRM-463
		НоваяСтрока.КоличествоДней = Объект.Продолжительность;
		НоваяСтрока.Сумма = РассчитатьСуммуКомандировочных(НоваяСтрока.КоличествоДней,НоваяСтрока.Сотрудник);
		// --- VOG Кулаков П.Л.
	КонецЕсли;	
	
	ПересчитатьРасходы();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСотрудника(Команда)
	
	// ++ VOG Солодов В.В. 24.12.2020 
	ТекущиеДанные = Элементы.КомандированныеСотрудники.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// -- VOG Солодов В.В. 24.12.2020 
	
	Если ЭтаФорма.Элементы.КомандированныеСотрудники.ТекущиеДанные.ДобавленАвтоматически = Ложь тогда
		
		Объект.КомандированныеСотрудники.Удалить(ЭтаФорма.Элементы.КомандированныеСотрудники.ТекущиеДанные.НомерСтроки-1);
		
	КонецЕсли;	
	
	ПересчитатьРасходы();
	
КонецПроцедуры

// ++ VOG Солодов В.В. 04.12.2020 CRM-1098
&НаКлиенте
Процедура ДобавитьСоисполнителя(Команда)
	
	ДобавитьСоисполнителяНаСервере();
	
КонецПроцедуры // -- VOG Солодов В.В. 04.12.2020 CRM-1098

&НаКлиенте
Процедура ПечатьЗаявлениеНаВыдачуДенежныхСредств(Команда) //--> VOG Турский Сергей 07.12.2020 16:12:39 ID заявки: CRM 1067. 
	
	ОбъектСсылка 		= Объект.Ссылка;
	Если ОбъектСсылка.Пустая() Тогда
		
		ОчиститьСообщения();

		ТекстСообщения = НСтр("ru = 'Документ не записан.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	МассивОбъектов 		= Новый Массив;
	МассивОбъектов.Добавить(ОбъектСсылка);
	
	ОбъектыПечати 		= Новый СписокЗначений;
	ОбъектыПечати.Добавить(ОбъектСсылка);
	
	ПараметрыФормы 		= Новый Структура;
	ПараметрыФормы.Вставить("МассивОбъектов", 			МассивОбъектов);
	ПараметрыФормы.Вставить("ОбъектыПечати", 			ОбъектыПечати);
	
	ОткрытьФорму("Документ.вогКомандировка.Форма.НастройкаПечатиЗаявлениеНаВыдачуДенежныхСредств", ПараметрыФормы);
	
КонецПроцедуры // ПечатьЗаявлениеНаВыдачуДенежныхСредств

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьДоступностьЗаявлениеНаВыдачуДенежныхСредств() //--> VOG Турский Сергей 07.12.2020 16:32:07 ID заявки: CRM 1067. 
																  
	Элементы.ФормаПечатьЗаявлениеНаВыдачуДенежныхСредств.Доступность = НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.вогСтатусыКомандировок.НеСогласовано");

КонецПроцедуры // УстановитьДоступностьЗаявлениеНаВыдачуДенежныхСредств()

&НаСервере
Процедура ОбновитьПредставительскиеРасходы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ++ VOG Солодов В.В. 07.12.2020 CRM-1098
	СоответствиеДанныхПунктов = ПолучитьДанныеПунктаПоручения(Объект.Задачи.Выгрузить());
	// -- VOG Солодов В.В. 07.12.2020 CRM-1098
	
	Для каждого Стр из Объект.Задачи цикл
	
		Стр.КлиентТекст	= ПолучитьНазваниеПривилегированныйРежим(Стр.Клиент);
		Стр.ТТТекст	= ПолучитьНазваниеПривилегированныйРежим(Стр.ТорговаяТочка);
		
		Если ТипЗнч(Стр.Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") тогда
			Стр.Тема = Стр.Задача.Наименование;
			// ++ VOG Солодов В.В. 14.09.2020 
			Если ЗначениеЗаполнено(Стр.ИдентификаторЗадачи)
				Или ЗначениеЗаполнено(Стр.НаборЗадач) Тогда
				// ++ VOG Солодов В.В. 07.12.2020 CRM-1098
				СтруктураЗаполнения = СоответствиеДанныхПунктов.Получить(Стр.НомерСтроки);
				Если Не СтруктураЗаполнения = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(Стр, СтруктураЗаполнения);
				КонецЕсли;
				// До изменения
				//	Стр.ЗадачаТекст = ПолучитьДанныеПунктаПоручения(Стр);
				//ИначеЕсли ЗначениеЗаполнено(Стр.НаборЗадач) Тогда
				//	Стр.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(Стр.НаборЗадач);
				// -- VOG Солодов В.В. 07.12.2020 CRM-1098
			Иначе
				Стр.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(Стр.Задача);
			КонецЕсли;
			// До изменения
			//Стр.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(Стр.Задача);
			// -- VOG Солодов В.В. 14.09.2020
			Стр.Картинка = 0;
			Если Стр.Задача.БизнесПроцесс.вогНастройка.Категория.ЦветПредставление = "" тогда
				Стр.ЦветИндекс = 99;
			Иначе	
				Стр.ЦветИндекс = Стр.Задача.БизнесПроцесс.вогНастройка.Категория.ЦветИндекс;
			КонецЕсли;	
		ИначеЕсли ТипЗнч(Стр.Задача) = Тип("ДокументСсылка.CRM_Мероприятие") тогда	
			Стр.Тема = Стр.Задача.Тема;			
			Стр.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(Стр.Задача);
			Стр.Картинка = 1;
			Если Стр.Задача.вогВидВзаимодействия.Категория.ЦветПредставление = "" тогда
				Стр.ЦветИндекс = 99;
			Иначе	
				Стр.ЦветИндекс = Стр.Задача.вогВидВзаимодействия.Категория.ЦветИндекс;
			КонецЕсли;					
			Стр.ПредставительскиеРасходы = Стр.Задача.ПредставительскиеРасходы;
		КонецЕсли;   		
		
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьПродолжительностьКомандировки(ОбъектПересчета, ЕдиницаВремени = "День")
	//Павелко, Таск 000000936, 28.11.2019 - добавил ЕдиницаВремени
		
	Если ОбъектПересчета.ВремяНачала <> '00010101' и ОбъектПересчета.ВремяОкончания <> '00010101' тогда
		
		Если ЕдиницаВремени = "Час" Тогда //Павелко, Таск 000000936, 28.11.2019
			ОбъектПересчета.Продолжительность = Окр((ОбъектПересчета.ВремяОкончания - ОбъектПересчета.ВремяНачала) / 3600, 2);
		Иначе
			ОбъектПересчета.Продолжительность = Окр((КонецДня(ОбъектПересчета.ВремяОкончания) - НачалоДня(ОбъектПересчета.ВремяНачала)) / 3600 / 24, 2);
		КонецЕсли;
		
		// +++ VOG Кулаков П.Л. 19.03.2020 CRM-463
		Для Каждого Строка Из Объект.КомандированныеСотрудники Цикл
			
			Если Строка.КоличествоДней > ОбъектПересчета.Продолжительность Тогда
				Строка.КоличествоДней = ОбъектПересчета.Продолжительность;
				Строка.Сумма = РассчитатьСуммуКомандировочных(Строка.КоличествоДней,Строка.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		// --- VOG Кулаков П.Л.
		
		ПересчитатьРасходы();
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьРасходы()
	
	ПересчитатьСтоимостьДня();
	
	//Суточные = ПолучитьРазмерСуточных(Объект.Сотрудник, Объект.Продолжительность);
	
	Суточные = РасчитатьСуточные();
	// +++ VOG Кулаков П.Л. 21.08.2020 CRM-823
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.вогСтатусыКомандировок.НеСогласовано") Тогда
		ПредставительскиеРасходы = 0;
	Иначе
		ПредставительскиеРасходы = Объект.Задачи.Итог("ПредставительскиеРасходы");
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	// +++ VOG Кулаков П.Л. 07.08.2020 CRM-823
	РассчитатьРасходыНаСервере();
	// --- VOG Кулаков П.Л.
	
	ЭтотОбъект.СтрокаРасходы = "Проезд: "+Формат(Проезд,"ЧДЦ=2; ЧН=0")+" р. "+
					"Проживание: "+Формат(Проживание,"ЧДЦ=2; ЧН=0")+" р. "+
					"Представительские расходы: "+Формат(ПредставительскиеРасходы,"ЧДЦ=2; ЧН=0")+" р. "+
					"Суточные "+Формат(Суточные,"ЧДЦ=2; ЧН=0")+" р. ";
	// +++ VOG Кулаков П.Л. 18.03.2020 CRM-463
	ЭтотОбъект.СтрокаРасходы = ЭтотОбъект.СтрокаРасходы + "Доп. расходы "+Формат(СуммаДополнительныеРасходы,"ЧДЦ=2; ЧН=0")+" р. ";
	// --- VOG Кулаков П.Л.
	
	Итого = Суточные + ПредставительскиеРасходы + Проживание + Проезд;
	// +++ VOG Кулаков П.Л. 18.03.2020 CRM-463
	Итого = Итого + СуммаДополнительныеРасходы;
	// --- VOG Кулаков П.Л.
	ЭтотОбъект.СтрокаИтого = "Итого "+Формат(Итого,"ЧДЦ=2; ЧН=0")+" р. ";	
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 07.08.2020 CRM-823
&НаСервере
Процедура РассчитатьРасходыНаСервере()
	
	// +++ VOG Кулаков П.Л. 21.08.2020 CRM-823
	Если Объект.Статус = Перечисления.вогСтатусыКомандировок.НеСогласовано Тогда
		Проживание = 0;
		Проезд = 0;
		СуммаДополнительныеРасходы = 0;
		Возврат;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	ЭтапНеСогласовано = Перечисления.вогЭтапыСогласованияКомандировок.НеСогласовано;
	ЭтапУчастиеОтклонено = Перечисления.вогЭтапыСогласованияКомандировок.УчастиеОтклонено;
	ТаблицаНеСогласованных = Объект.КомандированныеСотрудники.Выгрузить(Новый Структура("Этап",ЭтапНеСогласовано),"Сотрудник");
	ТаблицаОтклонено = Объект.КомандированныеСотрудники.Выгрузить(Новый Структура("Этап",ЭтапУчастиеОтклонено),"Сотрудник");
	МассивНеСогласованных = ТаблицаНеСогласованных.ВыгрузитьКолонку("Сотрудник");
	МассивОтклонено = ТаблицаОтклонено.ВыгрузитьКолонку("Сотрудник");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНеСогласованных,МассивОтклонено,Истина);
	
	ТаблицаПроживание = Объект.РасходыПроживание.Выгрузить();
	СуммаПроживание = 0;
	Для Каждого Строка Из ТаблицаПроживание Цикл
		Если МассивНеСогласованных.Найти(Строка.Сотрудник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СуммаПроживание = СуммаПроживание + Строка.Стоимость;
	КонецЦикла;
	
	Проживание = СуммаПроживание;
	
	ТаблицаПроезд = Объект.РасходыПроезд.Выгрузить();
	СуммаПроезд = 0;
	Для Каждого Строка Из ТаблицаПроезд Цикл
		Если МассивНеСогласованных.Найти(Строка.Сотрудник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СуммаПроезд = СуммаПроезд + Строка.Стоимость;
	КонецЦикла;
	Проезд = СуммаПроезд;
	
	ТаблицаДополнительныеРасходы = Объект.ДополнительныеРасходы.Выгрузить();
	ДополнительныеРасходы = 0;
	Для Каждого Строка Из ТаблицаДополнительныеРасходы Цикл
		Если МассивНеСогласованных.Найти(Строка.Сотрудник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДополнительныеРасходы = ДополнительныеРасходы + Строка.Сумма;
	КонецЦикла;
	СуммаДополнительныеРасходы = ДополнительныеРасходы;
	
КонецПроцедуры // --- VOG Кулаков П.Л.
	
&НаКлиенте
Процедура ПересчитатьСтоимостьДня() //15.11.2019 17:45
	
	Для каждого Стр из Объект.РасходыПроживание цикл
		
		Коэффициент = 1;
		
		Если Стр.Сотрудник = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка") тогда			
			Если Объект.КомандированныеСотрудники.Количество() <> 0 тогда
				МассивУжеПосчитан = Новый Массив;
				КоличествоСотрудников = Объект.КомандированныеСотрудники.Количество();
				Для Каждого СтрокаРасходыПроживание из Объект.РасходыПроживание цикл
					Если СтрокаРасходыПроживание.Сотрудник <> ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка") тогда
						Если МассивУжеПосчитан.Найти(СтрокаРасходыПроживание.Сотрудник) = Неопределено тогда 
							КоличествоСотрудников = КоличествоСотрудников - 1;
							МассивУжеПосчитан.Добавить(СтрокаРасходыПроживание.Сотрудник);
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;						
				Коэффициент = КоличествоСотрудников;
			КонецЕсли;
		КонецЕсли;	
		
		Стр.СредняяСтоимостьДня = ?(Стр.Продолжительность = 0 ИЛИ Коэффициент = 0, 0, Стр.Стоимость / Стр.Продолжительность/ Коэффициент);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция РасчитатьСуточные()
	
	// +++ VOG Кулаков П.Л. 21.08.2020 CRM-823
	Если Объект.Статус = Перечисления.вогСтатусыКомандировок.НеСогласовано Тогда
		Возврат 0;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	// +++ VOG Кулаков П.Л. 17.03.2020 CRM-463
	// переделал расчет суточных исходя из дней в табличной части КомандированныеСотрудники
	
	ТаблицаСотрудников = Объект.КомандированныеСотрудники.Выгрузить();
	Для Каждого Строка Из ТаблицаСотрудников Цикл
		Если Строка.КоличествоДней = 1 Тогда
			Строка.КоличествоДней = 0;
		КонецЕсли;
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаСотрудников.КоличествоДней КАК КоличествоДней,
		// +++ VOG Кулаков П.Л. 07.08.2020 CRM-823
		|   ТаблицаСотрудников.Этап КАК Этап
		// --- VOG Кулаков П.Л.
		|ПОМЕСТИТЬ ТаблицаСотрудников
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников
		// +++ VOG Кулаков П.Л. 07.08.2020 CRM-823
		|ГДЕ
		|	ТаблицаСотрудников.Этап <> ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.УчастиеОтклонено)
		|		И ТаблицаСотрудников.Этап <> ЗНАЧЕНИЕ(Перечисление.вогЭтапыСогласованияКомандировок.НеСогласовано)
		// --- VOG Кулаков П.Л.
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(вогРазмерСуточныхСрезПоследних.Размер, 0) КАК Размер,
		|	ЕСТЬNULL(вогРазмерСуточныхСрезПоследних.Размер, 0) * ТаблицаСотрудников.КоличествоДней КАК Сумма,
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник
		|ИЗ
		|	ТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогРазмерСуточных.СрезПоследних(&ДатаКомандировки, ) КАК вогРазмерСуточныхСрезПоследних
		// +++ VOG Кулаков П.Л. 28.07.2020 CRM-816
		|		ПО (ВЫБОР
		|				КОГДА ТаблицаСотрудников.Сотрудник = ЗНАЧЕНИЕ(Справочник.Пользователи.Водитель)
		|					ТОГДА вогРазмерСуточныхСрезПоследних.Вид = ЗНАЧЕНИЕ(Перечисление.вогРазмерыСуточных.Обычные)
		|				ИНАЧЕ ТаблицаСотрудников.Сотрудник.CRM_ДолжностнаяПозиция.Суточные = вогРазмерСуточныхСрезПоследних.Вид
		|			КОНЕЦ)";
		// --- VOG Кулаков П.Л.
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.УстановитьПараметр("ДатаКомандировки", Объект.ВремяНачала);
	//Запрос.УстановитьПараметр("Продолжительность", Объект.Продолжительность);
	
	ТЗ = Запрос.Выполнить().Выгрузить();	
	
	Возврат ТЗ.Итог("Сумма");
	// --- VOG Кулаков П.Л.
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьРазмерСуточных(Сотрудник, Продолжительность)
	
	Суточные = 0;
	
	Если Сотрудник <> Справочники.Пользователи.ПустаяСсылка() тогда
		Суточные = Сотрудник.РазмерСуточных * Продолжительность;
	КонецЕсли;
	
	Возврат Суточные;
	
КонецФункции

&НаКлиенте
Процедура РасходыПроездСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	Для каждого Стр из Объект.КомандированныеСотрудники цикл 
		// +++ VOG Кулаков П.Л. 20.08.2020 CRM-823
		Если Стр.Этап = ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.НеСогласовано") ИЛИ
				Стр.Этап =  ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.УчастиеОтклонено") Тогда
			Продолжить;
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		Элемент.СписокВыбора.Добавить(Стр.Сотрудник);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПроживаниеСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	Для каждого Стр из Объект.КомандированныеСотрудники цикл
		// +++ VOG Кулаков П.Л. 20.08.2020 CRM-823
		Если Стр.Этап = ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.НеСогласовано") ИЛИ
				Стр.Этап =  ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.УчастиеОтклонено") Тогда
			Продолжить;
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		
		Элемент.СписокВыбора.Добавить(Стр.Сотрудник);
	КонецЦикла;	
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 03.08.2020 CRM-777
&НаСервере
Процедура ПроверитьНеобходимостьСозданияБизнесПроцесса()
	
	СтартоватьПроцесс = Ложь;
	Для Каждого Строка Из Объект.КомандированныеСотрудники Цикл
		Финансирование = РегистрыСведений.вогФинансированиеКомандировок.ПолучитьФинансирование(Строка.Сотрудник,Объект.Ссылка);
		Если Финансирование <> Перечисления.вогВидыФинансирования.ВБюджете Тогда
			СтартоватьПроцесс = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтартоватьПроцесс Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.КомандированныеСотрудники Цикл
		
		Согласование = РегистрыСведений.вогЭтапыСогласованияКомандировок.ПолучитьНеобходимыеЭтапыСогласования(Строка.Сотрудник);
		
		Если Согласование.СогласованиеГД Тогда
			СтартоватьПроцесс = Истина;
			Продолжить;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		РегистрыСведений.вогЭтапыСогласованияКомандировок.УстановитьЭтапСогласования(Строка.Сотрудник, Объект.Ссылка, Перечисления.вогЭтапыСогласованияКомандировок.Утверждено);
		
		Попытка	
			
			Командировка = Объект.Ссылка;
			
			КлючОбсуждения	= вогСистемаВзаимодействийСервер.СоздатьНовоеОбсуждениеПоОбъекту(Командировка);	
			ИдентификаторАвтора	= СистемаВзаимодействия.ПолучитьИдентификаторПользователя(Строка.Сотрудник.ИдентификаторПользователяИБ);	
			
			ОбъектСообщение = СистемаВзаимодействия.СоздатьСообщение(КлючОбсуждения);
			ОбъектСообщение.Автор = ИдентификаторАвтора;
			ОбъектСообщение.Текст = "Создана командировка в рамках бюджета. "+СокрЛП(Командировка);
			
			РольГДГК = Справочники.РолиИсполнителей.НайтиПоКоду("000000004");
			СтруктураПараметров = Новый Структура("Подразделение",Строка.Сотрудник.Подразделение);
			ГДГК = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРолиСАдресацией(РольГДГК, СтруктураПараметров);		
			Для каждого ЭлементСписка из ГДГК цикл
				Попытка
					ИдентификаторПользователя 	= СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ЭлементСписка.Значение.ИдентификаторПользователяИБ);
					ОбъектСообщение.Получатели.Добавить(ИдентификаторПользователя);
				Исключение
					ТекстОшибки = ОписаниеОшибки();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Командировка.'"), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ТекстОшибки);		
				КонецПопытки;
			КонецЦикла;
			
			ОбъектСообщение.Записать();
			
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Командировка.'"), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки);
			
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла; 
	
	Если НЕ СтартоватьПроцесс Тогда
		Объект.Статус = Перечисления.вогСтатусыКомандировок.Утверждено;
	КонецЕсли;
		
КонецПроцедуры // --- VOG Кулаков П.Л.

// ++ VOG Солодов В.В. 10.11.2020 CRM-1026
&НаСервере
Процедура ЗаполнитьТаблицуВыполненияЗадач()
	
	ТаблицаЗадачи.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Задача,
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс
		|ПОМЕСТИТЬ ВТ_ВсеЗадачи
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка В(&СписокЗадач)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ВсеЗадачи.Задача КАК Задача,
		|	ВТ_ВсеЗадачи.БизнесПроцесс КАК БизнесПроцесс
		|ПОМЕСТИТЬ ВТ_ЗадачиПоПредметам
		|ИЗ
		|	ВТ_ВсеЗадачи КАК ВТ_ВсеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК ПунктыПоручений
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПунктыЧекЛистовЗадач КАК ПунктыЧекЛистовЗадач
		|			ПО ПунктыПоручений.ТиповаяЗадача = ПунктыЧекЛистовЗадач.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки КАК СпрТорговыеТочки
		|			ПО ПунктыПоручений.Предмет = СпрТорговыеТочки.Ссылка
		|		ПО ВТ_ВсеЗадачи.Задача = ПунктыПоручений.Объект
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_ВсеЗадачи.Задача,
		|	ВТ_ВсеЗадачи.БизнесПроцесс
		|ИЗ
		|	ВТ_ВсеЗадачи КАК ВТ_ВсеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК ПунктыПоручений
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПунктыЧекЛистовЗадач КАК ПунктыЧекЛистовЗадач
		|			ПО ПунктыПоручений.ТиповаяЗадача = ПунктыЧекЛистовЗадач.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК СпрПартнеры
		|			ПО ПунктыПоручений.Предмет = СпрПартнеры.Ссылка
		|		ПО ВТ_ВсеЗадачи.Задача = ПунктыПоручений.Объект
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_ВсеЗадачи.Задача,
		|	ВТ_ВсеЗадачи.БизнесПроцесс
		|ИЗ
		|	ВТ_ВсеЗадачи КАК ВТ_ВсеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК ПунктыПоручений
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПунктыЧекЛистовЗадач КАК ПунктыЧекЛистовЗадач
		|			ПО ПунктыПоручений.ТиповаяЗадача = ПунктыЧекЛистовЗадач.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогНаселенныеПункты КАК вогНаселенныеПункты
		|			ПО ПунктыПоручений.Предмет = вогНаселенныеПункты.Ссылка
		|		ПО ВТ_ВсеЗадачи.Задача = ПунктыПоручений.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ЗадачиПоПредметам.Задача КАК Задача,
		|	ВТ_ЗадачиПоПредметам.БизнесПроцесс КАК БизнесПроцесс,
		|	ВЫРАЗИТЬ(ВТ_ЗадачиПоПредметам.БизнесПроцесс КАК БизнесПроцесс.CRM_БизнесПроцесс).Наименование КАК ПредставлениеЗадачи,
		|	вогЗадачиПоручений.Идентификатор КАК Идентификатор,
		|	вогЗадачиПоручений.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
		|	вогЗадачиПоручений.Порядок КАК НомерСтроки,
		|	вогЗадачиПоручений.Пункт КАК Пункт,
		|	вогЗадачиПоручений.Предмет КАК Предмет,
		|	вогЗадачиПоручений.Результат КАК ОжидаемыйРезультат,
		|	ЕСТЬNULL(вогРезультатыВыполненияЗадачПоручений.Результат, НЕОПРЕДЕЛЕНО) КАК РезультатВыполнения
		|ИЗ
		|	РегистрСведений.вогЗадачиПоручений КАК вогЗадачиПоручений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗадачиПоПредметам КАК ВТ_ЗадачиПоПредметам
		|		ПО вогЗадачиПоручений.Объект = ВТ_ЗадачиПоПредметам.Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогРезультатыВыполненияЗадачПоручений КАК вогРезультатыВыполненияЗадачПоручений
		|		ПО вогЗадачиПоручений.Объект = вогРезультатыВыполненияЗадачПоручений.Объект
		|			И вогЗадачиПоручений.Идентификатор = вогРезультатыВыполненияЗадачПоручений.Идентификатор
		|			И вогЗадачиПоручений.ИдентификаторЗадачи = вогРезультатыВыполненияЗадачПоручений.ИдентификаторЗадачи
		|			И вогЗадачиПоручений.Предмет = вогРезультатыВыполненияЗадачПоручений.Предмет
		|ИТОГИ
		|	МАКСИМУМ(ПредставлениеЗадачи)
		|ПО
		|	Задача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_МероприятиеСторонниеЛица.Ссылка КАК ДокументСсылка,
		|	ТИПЗНАЧЕНИЯ(CRM_МероприятиеСторонниеЛица.Ссылка) КАК ТипДокумента,
		|	CRM_МероприятиеСторонниеЛица.Партнер КАК Предмет,
		|	НЕОПРЕДЕЛЕНО КАК ДополнительноеУсловие
		|ИЗ
		|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗадачиПоПредметам КАК ВТ_ЗадачиПоПредметам
		|		ПО (ВТ_ЗадачиПоПредметам.Задача = CRM_МероприятиеСторонниеЛица.Ссылка.ДокументОснование)
		|			И (CRM_МероприятиеСторонниеЛица.Ссылка.ПометкаУдаления = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_МероприятиеСторонниеЛица.Ссылка,
		|	ТИПЗНАЧЕНИЯ(CRM_МероприятиеСторонниеЛица.Ссылка),
		|	CRM_МероприятиеСторонниеЛица.вогТорговаяТочка,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗадачиПоПредметам КАК ВТ_ЗадачиПоПредметам
		|		ПО (ВТ_ЗадачиПоПредметам.Задача = CRM_МероприятиеСторонниеЛица.Ссылка.ДокументОснование)
		|			И (CRM_МероприятиеСторонниеЛица.Ссылка.ПометкаУдаления = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вогАнкета.Ссылка,
		|	ТИПЗНАЧЕНИЯ(вогАнкета.ВариантОпроса),
		|	вогАнкета.Респондент,
		|	вогАнкета.ВариантОпроса
		|ИЗ
		|	Документ.вогАнкета КАК вогАнкета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗадачиПоПредметам КАК ВТ_ЗадачиПоПредметам
		|		ПО (ВТ_ЗадачиПоПредметам.БизнесПроцесс = вогАнкета.ДокументОснование)
		|			И (вогАнкета.ПометкаУдаления = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вогКомандировка.Ссылка,
		|	ТИПЗНАЧЕНИЯ(вогКомандировка.Ссылка),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Документ.вогКомандировка КАК вогКомандировка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗадачиПоПредметам КАК ВТ_ЗадачиПоПредметам
		|		ПО (ВТ_ЗадачиПоПредметам.Задача = вогКомандировка.ДокументОснование)
		|			И (вогКомандировка.ПометкаУдаления = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка,
		|	ТИПЗНАЧЕНИЯ(ЗадачаИсполнителя.Ссылка),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗадачиПоПредметам КАК ВТ_ЗадачиПоПредметам
		|		ПО (ВТ_ЗадачиПоПредметам.Задача = ЗадачаИсполнителя.Предмет)
		|			И (ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка КАК ДанныеФайла,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|	ЕСТЬNULL(вогПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла, НЕОПРЕДЕЛЕНО) КАК ВидФайла,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Родитель КАК Родитель,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Родитель.Родитель КАК ОсновнойРодитель,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Наименование КАК Наименование,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Расширение КАК Расширение
		|ИЗ
		|	Справочник.ЗадачаИсполнителяПрисоединенныеФайлы КАК ЗадачаИсполнителяПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗадачиПоПредметам КАК ВТ_ЗадачиПоПредметам
		|		ПО ЗадачаИсполнителяПрисоединенныеФайлы.ВладелецФайла = ВТ_ЗадачиПоПредметам.Задача
		|			И (ЗадачаИсполнителяПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ)
		|			И (ЗадачаИсполнителяПрисоединенныеФайлы.ЭтоГруппа = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК вогПрисоедниненныеФайлыОбъектовПоВидам
		|		ПО ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка = вогПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_БизнесПроцессПрисоединенныеФайлы.Ссылка,
		|	CRM_БизнесПроцессПрисоединенныеФайлы.ВладелецФайла,
		|	НЕОПРЕДЕЛЕНО,
		|	CRM_БизнесПроцессПрисоединенныеФайлы.Родитель,
		|	НЕОПРЕДЕЛЕНО,
		|	CRM_БизнесПроцессПрисоединенныеФайлы.Наименование,
		|	CRM_БизнесПроцессПрисоединенныеФайлы.Расширение
		|ИЗ
		|	Справочник.CRM_БизнесПроцессПрисоединенныеФайлы КАК CRM_БизнесПроцессПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗадачиПоПредметам КАК ВТ_ЗадачиПоПредметам
		|		ПО CRM_БизнесПроцессПрисоединенныеФайлы.ВладелецФайла = ВТ_ЗадачиПоПредметам.БизнесПроцесс
		|			И (CRM_БизнесПроцессПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ)
		|			И (CRM_БизнесПроцессПрисоединенныеФайлы.ЭтоГруппа = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("СписокЗадач", 	Объект.Задачи.Выгрузить().ВыгрузитьКолонку("Задача"));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаЗадачи = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаДокументовВыполнения = РезультатЗапроса[3].Выгрузить();
	ТаблицаФайлов = РезультатЗапроса[4].Выгрузить();
	
	ВсегоОжидаемыхРезультатов 		= 0;
	ВсегоВыполненныхРезультатов 	= 0;
	
	Пока ВыборкаЗадачи.Следующий() Цикл
		
		НоваяСтрокаЗадача = ТаблицаЗадачи.Добавить();
		НоваяСтрокаЗадача.Задача 				= ВыборкаЗадачи.Задача;
		НоваяСтрокаЗадача.ПредставлениеЗадачи 	= ВыборкаЗадачи.ПредставлениеЗадачи;
		
		КоличествоОжидаемыхРезультатов 		= 0;
		КоличествоВыполненныхРезультатов 	= 0;
		
		ВыборкаДетальныеЗаписи = ВыборкаЗадачи.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ТекущееОжидание 	= 0;
			ТекущееВыполнение 	= 0;
			ОжидаемыйРезультат 	= Неопределено;
			РезультатВыполнения = Неопределено;
			
			Если Не ВыборкаДетальныеЗаписи.ОжидаемыйРезультат = Неопределено Тогда
				
				ОжидаемыйРезультат = ВыборкаДетальныеЗаписи.ОжидаемыйРезультат.Получить();
				
				Если Не ОжидаемыйРезультат = Неопределено Тогда
					ТекущееОжидание 				= ОжидаемыйРезультат.Количество();
					КоличествоОжидаемыхРезультатов 	= КоличествоОжидаемыхРезультатов + ТекущееОжидание;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВыборкаДетальныеЗаписи.РезультатВыполнения = Неопределено
				И Не ОжидаемыйРезультат = Неопределено
				И ТаблицаДокументовВыполнения.Количество() > 0 Тогда
				
				РезультатВыполнения = Новый ТаблицаЗначений;
				РезультатВыполнения.Колонки.Добавить("ЗначениеИсполнитель", Новый ОписаниеТипов());
				РезультатВыполнения.Колонки.Добавить("Пометка", 			вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаБулево());
				
				ПараметрыОтбораСтрок = Новый Структура;
				ПараметрыОтбораСтрок.Вставить("Предмет", ВыборкаДетальныеЗаписи.Предмет);
				
				СтрокиДокументовВыполнения = ТаблицаДокументовВыполнения.НайтиСтроки(ПараметрыОтбораСтрок);
				
				Если СтрокиДокументовВыполнения.Количество() > 0 Тогда
					
					Для Каждого СтрокаОжидаемогоРезультата Из ОжидаемыйРезультат Цикл
						
						СтрокаТабличнойЧасти = РезультатВыполнения.Добавить();
						
						Для Каждого СтрокаДокумент Из СтрокиДокументовВыполнения Цикл
							Если СтрокаДокумент.ТипДокумента = ТипЗнч(СтрокаОжидаемогоРезультата.Приложение) Тогда
								
								Если СтрокаДокумент.ДополнительноеУсловие = Неопределено Тогда
									СтрокаТабличнойЧасти.ЗначениеИсполнитель 	= СтрокаОжидаемогоРезультата.Приложение;
									
								ИначеЕсли СтрокаОжидаемогоРезультата.Приложение = СтрокаДокумент.ДополнительноеУсловие Тогда
									СтрокаТабличнойЧасти.ЗначениеИсполнитель 	= СтрокаОжидаемогоРезультата.Приложение;
								КонецЕсли;
								
							КонецЕсли;
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли Не ВыборкаДетальныеЗаписи.РезультатВыполнения = Неопределено Тогда
				РезультатВыполнения = ВыборкаДетальныеЗаписи.РезультатВыполнения.Получить();
			КонецЕсли;
			
			Если Не РезультатВыполнения = Неопределено Тогда
				
				ПараметрыОтбораСтрок = Новый Структура;
				ПараметрыОтбораСтрок.Вставить("Пометка", Ложь);
				
				НайденныеСтроки = РезультатВыполнения.НайтиСтроки(ПараметрыОтбораСтрок);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					// Документы
					ПараметрыОтбораСтрок = Новый Структура;
					ПараметрыОтбораСтрок.Вставить("Предмет", ВыборкаДетальныеЗаписи.Предмет);
					
					СтрокиДокументовВыполнения = ТаблицаДокументовВыполнения.НайтиСтроки(ПараметрыОтбораСтрок);
					
					Если СтрокиДокументовВыполнения.Количество() > 0 Тогда
						
						Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
							
							Пометка = Ложь;
							
							Для Каждого СтрокаДокумент Из СтрокиДокументовВыполнения Цикл
								
								Если СтрокаДокумент.ТипДокумента = ТипЗнч(СтрокаТабличнойЧасти.ЗначениеИсполнитель) Тогда
									
									Если СтрокаДокумент.ДополнительноеУсловие = Неопределено Тогда
										СтрокаТабличнойЧасти.ЗначениеИсполнитель 	= СтрокаДокумент.ДокументСсылка;
										Пометка = Истина;
									ИначеЕсли СтрокаТабличнойЧасти.ЗначениеИсполнитель = СтрокаДокумент.ДополнительноеУсловие Тогда
										СтрокаТабличнойЧасти.ЗначениеИсполнитель 	= СтрокаДокумент.ДокументСсылка;
										Пометка = Истина;
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
							СтрокаТабличнойЧасти.Пометка = Пометка;
							
						КонецЦикла;
					КонецЕсли;
					
					// Файлы
					Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
						
						Если Не ТипЗнч(СтрокаТабличнойЧасти.ЗначениеИсполнитель) = Тип("СправочникСсылка.вогВидыПрисоединенныхФайлов") Тогда
							Продолжить;
						КонецЕсли;
						
						ПараметрыОтбораСтрок = Новый Структура;
						ПараметрыОтбораСтрок.Вставить("ВидФайла", СтрокаТабличнойЧасти.ЗначениеИсполнитель);
						
						СтрокиФайлов = ТаблицаФайлов.НайтиСтроки(ПараметрыОтбораСтрок);
						
						Для Каждого СтрокаФайл Из СтрокиФайлов Цикл
							
							ИдентификаторГруппыФайлов = СтрокаФайл.ОсновнойРодитель.УникальныйИдентификатор();
							
							Если ИдентификаторГруппыФайлов = ВыборкаДетальныеЗаписи.ИдентификаторЗадачи Тогда
								СтрокаТабличнойЧасти.ЗначениеИсполнитель 	= СтрокаФайл.ДанныеФайла;
								СтрокаТабличнойЧасти.Пометка 				= Истина;
							КонецЕсли;
							
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				
				ПараметрыОтбораСтрок = Новый Структура;
				ПараметрыОтбораСтрок.Вставить("Пометка", Истина);
				
				НайденныеСтроки 	= РезультатВыполнения.НайтиСтроки(ПараметрыОтбораСтрок);
				ТекущееВыполнение 	= НайденныеСтроки.Количество();
				
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Идентификатор) Тогда
					КоличествоВыполненныхРезультатов 	= КоличествоВыполненныхРезультатов + ТекущееВыполнение;
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЦикла;
		
		НоваяСтрокаЗадача.КоличествоОжидаемыхРезультатов 	= КоличествоОжидаемыхРезультатов;
		НоваяСтрокаЗадача.КоличествоВыполненныхРезультатов 	= КоличествоВыполненныхРезультатов;
		
		Если КоличествоОжидаемыхРезультатов > 0 Тогда
			НоваяСтрокаЗадача.ПроцентВыполнения = КоличествоВыполненныхРезультатов / КоличествоОжидаемыхРезультатов * 100;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // -- VOG Солодов В.В. 10.11.2020 CRM-1026

#КонецОбласти

#Область ОбработчикиСтраницыЗадачи

&НаКлиенте
Процедура ПриПереходеНаСтраницуЗадачиНаКлиенте()
	
	ЭтаФорма.Элементы.ГруппаКоманднаяПанельСворачивание.Видимость = Истина;

	ПриПереходеНаСтраницуЗадачи();
	
	Если ПервоеЗаполнениеПланировщика Тогда // ++ VOG Солодов В.В. 28.01.2021 DEV-114 // Добавлено условие
		ЗаполнитьЭлементыКалендаря(Истина);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПриПереходеНаСтраницуЗадачи()
	
	МоиПодразделения = "Мои";
	ЗадачиМероприятияВсе = "Все";
	
	Календарь.НачалоПериодаОтображения = НачалоДня(Объект.ВремяНачала);
	Календарь.КонецПериодаОтображения = КонецДня(Объект.ВремяОкончания);
	// +++ VOG Кулаков П.Л. 06.10.2020 CRM-958
	Если ЗначениеЗаполнено(Объект.ВремяНачала) И ЗначениеЗаполнено(Объект.ВремяОкончания) Тогда
		Календарь.ТекущиеПериодыОтображения.Очистить();
		Календарь.ТекущиеПериодыОтображения.Добавить(НачалоДня(Объект.ВремяНачала), КонецДня(Объект.ВремяОкончания));
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	СписокВидовВзаимодействия = Новый Массив;
	СписокВидовВзаимодействия.Добавить(Справочники.CRM_ВидыВзаимодействий.НайтиПоНаименованию("Встреча с клиентом"));
	СписокВидовВзаимодействия.Добавить(Справочники.CRM_ВидыВзаимодействий.НайтиПоНаименованию("Встреча с представителем в торговой точке"));
	СписокВидовВзаимодействия.Добавить(Справочники.CRM_ВидыВзаимодействий.НайтиПоНаименованию("Обучение"));
	
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("СписокВидовВзаимодействия",СписокВидовВзаимодействия);
	
	ПодчиненныеСотрудники = Новый Массив(ПараметрыСеанса.вогПодчиненныеСотрудники);
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ВстречаСКлиентом",					Справочники.CRM_ВидыВзаимодействий.ПолучитьСсылку(Новый УникальныйИдентификатор("b23f6567-97ed-11e9-9b11-005056bcd3e3")));
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("Обучение",							Справочники.CRM_ВидыВзаимодействий.ПолучитьСсылку(Новый УникальныйИдентификатор("3926dd5c-ca6e-11e9-8661-005056bcd3e3"))); // VOG Ульянов И.В. 01.03.2020 CRM-462
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("НейтральнаяТерритория", 				Справочники.CRM_Помещения.ПолучитьСсылку(Новый УникальныйИдентификатор("fc23ab04-aa36-11e9-9b11-005056bcd3e3")));
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ОфисКлиента", 						Справочники.CRM_Помещения.ПолучитьСсылку(Новый УникальныйИдентификатор("eb5b1218-aa36-11e9-9b11-005056bcd3e3")));
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ВидМесторасположениеОфисаКлиента",	Справочники.ВидыКонтактнойИнформации.МесторасположениеОфисаКлиента);
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ПустойГород",						Справочники.вогНаселенныеПункты.ПустаяСсылка());
	
	Если ПодчиненныеСотрудники.Количество() = 0 Тогда
		Элементы.СписокЗадачСотрудник.Видимость    = Ложь;
		Элементы.ТаблицаПодбораСотрудник.Видимость = Ложь;
	КонецЕсли;	
	
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ТекущийДокумент", Объект.Ссылка);
	
	// ++ VOG Солодов В.В. 11.09.2020 
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ПоручениеНовое", Справочники.CRM_КартыМаршрутов.ПоручениеНовое);
	// -- VOG Солодов В.В. 11.09.2020 
	
	ОбновитьОтбор();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтбор()
	
	МассивОтбора = Объект.Задачи.Выгрузить().ВыгрузитьКолонку("Задача");
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("СписокУжеВыбрано",МассивОтбора);
	
	Если МоиПодразделения = "Мои" тогда
		СписокЗадач.Параметры.УстановитьЗначениеПараметра("СписокСотрудников", ПараметрыСеанса.ТекущийПользователь);
	Иначе
		МассивСотрудников = Новый Массив(ПараметрыСеанса.вогПодчиненныеСотрудники);
		МассивСотрудников.Удалить(МассивСотрудников.Найти(ПараметрыСеанса.ТекущийПользователь));
		СписокЗадач.Параметры.УстановитьЗначениеПараметра("СписокСотрудников", МассивСотрудников);
	КонецЕсли;	

	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ЗадачиМероприятияВсе", ЗадачиМероприятияВсе);	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборНаКлиенте(Элемент)
	
	ОбновитьОтбор();

КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ОткрытьЗадачу" Тогда //Павелко, Таск 000000936, 28.11.2019
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Задача);
	Иначе
		ПриПеретаскивании(Элемент);	
	КонецЕсли;	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНазваниеПривилегированныйРежим(Ссылка)
	
	УстановитьПривилегированныйРежим(истина);
	Если ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка,"Наименование");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Мероприятие") тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка,"Тема");
	// ++ VOG Солодов В.В. 14.09.2020 
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.вогНаборыТиповыхЗадач") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Наименование");
	// -- VOG Солодов В.В. 14.09.2020 
	Иначе
		Возврат Строка(Ссылка);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриПеретаскивании(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
	Если ИсточникПеретаскивания = "СписокЗадач" И ПриемникПеретаскивания = "Календарь" тогда
		ВремяНачалаПервогоСобытия = НачалоЧаса(ДатаПеретаскивания);
		ВремяОкончанияПервогоСобытия = НачалоЧаса(ДатаПеретаскивания) + 3600;
	Иначе
		ВремяНачалаПервогоСобытия = Объект.ВремяНачала;
		ВремяОкончанияПервогоСобытия = КонецЧаса(ВремяНачалаПервогоСобытия);
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 14.09.2020
	МассивДанныхСтрок = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		
		ЭтоПоручение 	= Ложь;
		
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыделеннаяСтрока);
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторЗадачи)
			Или ЗначениеЗаполнено(ДанныеСтроки.НаборЗадач) Тогда
			
			ЭтоПоручение = Истина;
			ПолучитьДанныеЗадачПоручения(МассивДанныхСтрок, ДанныеСтроки.Задача);
			
		Иначе
			МассивДанныхСтрок.Добавить(Новый Структура("ЭтоПоручение, ДанныеСтроки", Ложь, ДанныеСтроки));
		КонецЕсли;
		
	КонецЦикла;
	
	// ++ VOG Солодов В.В. 22.01.2021 DEV-102
	СписокДат = Новый СписокЗначений;
	
	Для Каждого ЭлементКалендаря Из Календарь.Элементы Цикл
		
		Если ЭлементКалендаря.Значение.Сотрудник = ТекущийПользователь Тогда
			СписокДат.Добавить(ЭлементКалендаря.Конец);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	Если СписокДат.Количество() > 0 Тогда
		ПоследняяДата = СписокДат.Получить(СписокДат.Количество() - 1).Значение;
	Иначе
		ПоследняяДата = Дата(1, 1, 1);
	КонецЕсли;
	
	Для Каждого СтруктураДанных Из МассивДанныхСтрок Цикл
		
		ВремяОкончания = Дата(1, 1, 1);
		
		СтруктураСтроки = Новый Структура("ВремяНачала, ВремяОкончания, Длительность");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтруктураДанных.ДанныеСтроки);
		
		Если ЗначениеЗаполнено(СтруктураСтроки.ВремяОкончания)
			И Не (ИсточникПеретаскивания = "СписокЗадач" И ПриемникПеретаскивания = "Календарь") Тогда
			ВремяОкончания = СтруктураСтроки.ВремяОкончания;
		ИначеЕсли ЗначениеЗаполнено(СтруктураСтроки.Длительность) Тогда
			ВремяОкончания = ПоследняяДата + (СтруктураСтроки.Длительность - Дата(1,1,1));
		Иначе
			ВремяОкончания = ПоследняяДата + 1;
		КонецЕсли;
		
		Если ВремяОкончания > КонецДня(Объект.ВремяОкончания) Тогда
			
			ТекстСообщения = НСтр("ru = 'Окончание задачи выходит за рамки командировки. Продолжение невозможно.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Возврат;
			
		КонецЕсли;
		
		ПоследняяДата = ВремяОкончания;
		
	КонецЦикла;
	// -- VOG Солодов В.В. 22.01.2021 DEV-102
	
	Для Каждого СтруктураДанных Из МассивДанныхСтрок Цикл
		
		ДанныеСтроки = СтруктураДанных.ДанныеСтроки;
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Задача", ДанныеСтроки.Задача);
		
		Если СтруктураДанных.ЭтоПоручение
			И ЗначениеЗаполнено(ДанныеСтроки.НаборЗадач) Тогда
			
			ПараметрыОтбораСтрок.Вставить("НаборЗадач", ДанныеСтроки.НаборЗадач);
			
		ИначеЕсли СтруктураДанных.ЭтоПоручение Тогда
			ПараметрыОтбораСтрок.Вставить("ИдентификаторЗадачи", ДанныеСтроки.ИдентификаторЗадачи);
		КонецЕсли;
		
		Если СтруктураДанных.ЭтоПоручение Тогда
			ПараметрыОтбораСтрок.Вставить("Клиент", 		ДанныеСтроки.Клиент);
			ПараметрыОтбораСтрок.Вставить("ТорговаяТочка", 	ДанныеСтроки.ТорговаяТочка);
		КонецЕсли;
		
		Если Объект.Задачи.НайтиСтроки(ПараметрыОтбораСтрок).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
	// До изменения
	//Для каждого ВыделеннаяСтрока Из Элемент.ВыделенныеСтроки цикл
	//	
	//	ДанныеСтроки = Элемент.ДанныеСтроки(ВыделеннаяСтрока);
	//	
	//	МассивСтрок = Объект.Задачи.НайтиСтроки(Новый Структура("Задача",ДанныеСтроки.Задача));
	//	
	//	Если МассивСтрок.Количество() > 0 тогда 
	//		Продолжить;
	//	КонецЕсли;
	// -- VOG Солодов В.В. 14.09.2020
		СтрокаТаблицы = Объект.Задачи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтроки);
		
		Если СтрокаТаблицы.ВремяНачала <> '00010101' И СтрокаТаблицы.ВремяОкончания <> '00010101' И
				НЕ (ИсточникПеретаскивания = "СписокЗадач" И ПриемникПеретаскивания = "Календарь") тогда
		Иначе	
			СтрокаТаблицы.ВремяНачала = ВремяНачалаПервогоСобытия;
			// ++ VOG Солодов В.В. 14.09.2020 
			Если Не ДанныеСтроки.Длительность = Дата(1,1,1) Тогда
				ВремяОкончания = СтрокаТаблицы.ВремяНачала + (ДанныеСтроки.Длительность - Дата(1,1,1));
				ВремяОкончанияПервогоСобытия = ВремяОкончания - 1;
				СтрокаТаблицы.ВремяОкончания = ВремяОкончания;
			Иначе
				СтрокаТаблицы.ВремяОкончания = ВремяОкончанияПервогоСобытия;
			КонецЕсли;
			// -- VOG Солодов В.В. 14.09.2020
			ВремяНачалаПервогоСобытия = НачалоЧаса(ВремяОкончанияПервогоСобытия + 1);
			ВремяОкончанияПервогоСобытия = КонецЧаса(ВремяНачалаПервогоСобытия);
		КонецЕсли;		
		
		// ++ VOG Солодов В.В. 17.09.2020 
		СтрокаТаблицы.Продолжительность = Окр((СтрокаТаблицы.ВремяОкончания - СтрокаТаблицы.ВремяНачала) / 3600, 2);
		// До изменения
		//СтрокаТаблицы.Продолжительность = Окр((СтрокаТаблицы.ВремяОкончания - СтрокаТаблицы.ВремяНачала) / 900, 2);
		// -- VOG Солодов В.В. 17.09.2020 
		
		СтрокаТаблицы.Запланировал = ПользователиКлиентСервер.ТекущийПользователь();
		
		СтрокаТаблицы.КлиентТекст	= ПолучитьНазваниеПривилегированныйРежим(СтрокаТаблицы.Клиент);
		СтрокаТаблицы.ТТТекст 		= ПолучитьНазваниеПривилегированныйРежим(СтрокаТаблицы.ТорговаяТочка);
		
		Если ТипЗнч(СтрокаТаблицы.Задача) = Тип("ДокументСсылка.CRM_Мероприятие") тогда
			СтрокаТаблицы.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(СтрокаТаблицы.Задача);
			СтрокаТаблицы.Картинка = 1;
			ЗначениеПланировщика = СтрокаТаблицы.Задача; // ++ VOG Солодов В.В. 11.09.2020
		Иначе
			// ++ VOG Солодов В.В. 11.09.2020 
			Если СтруктураДанных.ЭтоПоручение Тогда
				
				СтрокаТаблицы.ЗадачаТекст 	= ДанныеСтроки.Описание;
				ЗначениеПланировщика 		= ПолучитьСтруктуруЭлементаПланировщика(СтрокаТаблицы);
				
			Иначе
				СтрокаТаблицы.ЗадачаТекст 	= ПолучитьНазваниеПривилегированныйРежим(СтрокаТаблицы.Задача);
				ЗначениеПланировщика 		= СтрокаТаблицы.Задача;
			КонецЕсли;
			// До изменения
			//СтрокаТаблицы.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(СтрокаТаблицы.Задача);
			// -- VOG Солодов В.В. 11.09.2020 
			СтрокаТаблицы.Картинка = 0;
		КонецЕсли;	
		
		// ++ VOG Солодов В.В. 11.09.2020 
		СоздатьЭлементПланировщика(
			СтрокаТаблицы.ВремяНачала,
			СтрокаТаблицы.ВремяОкончания,
			ЗначениеПланировщика,
			СтрокаТаблицы.Тема,
			СтрокаТаблицы.Сотрудник,
			,
			,
			СтрокаТаблицы.ЦветИндекс);
		// До изменения
		//СоздатьЭлементПланировщика(СтрокаТаблицы.ВремяНачала, СтрокаТаблицы.ВремяОкончания, СтрокаТаблицы.Задача, СтрокаТаблицы.Тема, СтрокаТаблицы.Сотрудник,,,СтрокаТаблицы.ЦветИндекс);//Павелко, Таск 000000936, 28.11.2019
		// -- VOG Солодов В.В. 11.09.2020 
		
	КонецЦикла;		
	
	ОбновитьОтбор();
			
КонецПроцедуры

// ++ VOG Солодов В.В. 11.09.2020
&НаСервереБезКонтекста
Процедура ПолучитьДанныеЗадачПоручения(ДанныеСтрок, Задача)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// ++ VOG Солодов В.В. 04.12.2020 CRM-1098
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СпрТорговыеТочки.Партнер КАК Клиент,
	|	СпрТорговыеТочки.Ссылка КАК ТорговаяТочка,
	|	ЗадачаИсполнителя.Исполнитель КАК Ответственный,
	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	|	ЗадачаИсполнителя.Номер КАК Номер,
	|	СпрТорговыеТочки.НаселенныйПункт КАК Город,
	|	ЗадачаИсполнителя.Дата КАК Дата,
	|	ЕСТЬNULL(НаборыТиповыхЗадач.Наименование, ПунктыПоручений.Пункт) КАК Описание,
	|	ЕСТЬNULL(НаборыТиповыхЗадач.Наименование, ПунктыПоручений.Пункт) КАК Тема,
	|	ЕСТЬNULL(вогТорговыеТочкиКонтактнаяИнформация.Представление, """") КАК АдресОфиса,
	|	0 КАК Картинка,
	|	ЗадачаИсполнителя.Исполнитель КАК Сотрудник,
	|	ЕСТЬNULL(ЗадачаИсполнителя.БизнесПроцесс.вогНастройка.Категория.ЦветИндекс, 99) КАК ЦветИндекс,
	|	ЗадачаИсполнителя.Представление КАК ПредставлениеЗадачи,
	|	СпрТорговыеТочки.Рынок КАК Рынок,
	|	ВЫРАЗИТЬ(СпрТорговыеТочки.МестоположениеНаРынке КАК СТРОКА(500)) КАК Расположение,
	|	ВЫБОР
	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	|			ТОГДА ПунктыПоручений.ИдентификаторЗадачи
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИдентификаторЗадачи,
	|	ЕСТЬNULL(НаборыТиповыхЗадач.Ссылка, ЗНАЧЕНИЕ(Справочник.вогНаборыТиповыхЗадач.ПустаяСсылка)) КАК НаборЗадач,
	|	ВЫБОР
	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	|			ТОГДА ПунктыПоручений.Трудоемкость
	|		ИНАЧЕ НаборыТиповыхЗадач.ПлановоеВремя
	|	КОНЕЦ КАК Длительность,
	|	ВЫБОР
	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	|			ТОГДА ПунктыПоручений.Пункт
	|		ИНАЧЕ НаборыТиповыхЗадач.Наименование
	|	КОНЕЦ КАК ОжидаемыйРезультат
	|ПОМЕСТИТЬ ВТ_ПунктыЗадач
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК ПунктыПоручений
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки КАК СпрТорговыеТочки
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
	|				ПО СпрТорговыеТочки.Ссылка = вогТорговыеТочкиКонтактнаяИнформация.Ссылка
	|					И (вогТорговыеТочкиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.Месторасположение))
	|					И (НЕ вогТорговыеТочкиКонтактнаяИнформация.Представление = """")
	|			ПО ПунктыПоручений.Предмет = СпрТорговыеТочки.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНаборыТиповыхЗадач КАК НаборыТиповыхЗадач
	|			ПО ПунктыПоручений.НаборЗадач = НаборыТиповыхЗадач.Ссылка
	|		ПО ЗадачаИсполнителя.Ссылка = ПунктыПоручений.Объект
	|ГДЕ
	|	ЗадачаИсполнителя.Ссылка = &Задача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрПартнеры.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.вогТорговыеТочки.ПустаяСсылка),
	|	ЗадачаИсполнителя.Исполнитель,
	|	ЗадачаИсполнителя.Ссылка,
	|	ЗадачаИсполнителя.Номер,
	|	ВЫБОР
	|		КОГДА ПунктыПоручений.Город = ЗНАЧЕНИЕ(Справочник.вогНаселенныеПункты.ПустаяСсылка)
	|			ТОГДА СпрПартнеры.вогНаселенныйПункт
	|		ИНАЧЕ ПунктыПоручений.Город
	|	КОНЕЦ,
	|	ЗадачаИсполнителя.Дата,
	|	ЕСТЬNULL(НаборыТиповыхЗадач.Наименование, ПунктыПоручений.Пункт),
	|	ЕСТЬNULL(НаборыТиповыхЗадач.Наименование, ПунктыПоручений.Пункт),
	|	ВЫБОР
	|		КОГДА ПунктыПоручений.Адрес = """"
	|			ТОГДА ЕСТЬNULL(ПартнерыКонтактнаяИнформация.Представление, """")
	|		ИНАЧЕ ПунктыПоручений.Адрес
	|	КОНЕЦ,
	|	0,
	|	ЗадачаИсполнителя.Исполнитель,
	|	ЕСТЬNULL(ЗадачаИсполнителя.БизнесПроцесс.вогНастройка.Категория.ЦветИндекс, 99),
	|	ЗадачаИсполнителя.Представление,
	|	ЗНАЧЕНИЕ(Справочник.вогРынки.ПустаяСсылка),
	|	"""",
	|	ВЫБОР
	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	|			ТОГДА ПунктыПоручений.ИдентификаторЗадачи
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ЕСТЬNULL(НаборыТиповыхЗадач.Ссылка, ЗНАЧЕНИЕ(Справочник.вогНаборыТиповыхЗадач.ПустаяСсылка)),
	|	ВЫБОР
	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	|			ТОГДА ПунктыПоручений.Трудоемкость
	|		ИНАЧЕ НаборыТиповыхЗадач.ПлановоеВремя
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	|			ТОГДА ПунктыПоручений.Пункт
	|		ИНАЧЕ НаборыТиповыхЗадач.Наименование
	|	КОНЕЦ
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК ПунктыПоручений
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК СпрПартнеры
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|				ПО СпрПартнеры.Ссылка = ПартнерыКонтактнаяИнформация.Ссылка
	|					И (ПартнерыКонтактнаяИнформация.Вид = &ВидМесторасположениеОфисаКлиента)
	|					И (НЕ ПартнерыКонтактнаяИнформация.Представление = """")
	|			ПО ПунктыПоручений.Предмет = СпрПартнеры.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНаборыТиповыхЗадач КАК НаборыТиповыхЗадач
	|			ПО ПунктыПоручений.НаборЗадач = НаборыТиповыхЗадач.Ссылка
	|		ПО ЗадачаИсполнителя.Ссылка = ПунктыПоручений.Объект
	|ГДЕ
	|	ЗадачаИсполнителя.Ссылка = &Задача
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.вогТорговыеТочки.ПустаяСсылка),
	|	ЗадачаИсполнителя.Исполнитель,
	|	ЗадачаИсполнителя.Ссылка,
	|	ЗадачаИсполнителя.Номер,
	|	вогНаселенныеПункты.Ссылка,
	|	ЗадачаИсполнителя.Дата,
	|	ЕСТЬNULL(НаборыТиповыхЗадач.Наименование, ПунктыПоручений.Пункт),
	|	ЕСТЬNULL(НаборыТиповыхЗадач.Наименование, ПунктыПоручений.Пункт),
	|	вогНаселенныеПункты.Ссылка,
	|	0,
	|	ЗадачаИсполнителя.Исполнитель,
	|	ЕСТЬNULL(ЗадачаИсполнителя.БизнесПроцесс.вогНастройка.Категория.ЦветИндекс, 99),
	|	ЗадачаИсполнителя.Представление,
	|	ЗНАЧЕНИЕ(Справочник.вогРынки.ПустаяСсылка),
	|	"""",
	|	ВЫБОР
	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	|			ТОГДА ПунктыПоручений.ИдентификаторЗадачи
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ЕСТЬNULL(НаборыТиповыхЗадач.Ссылка, ЗНАЧЕНИЕ(Справочник.вогНаборыТиповыхЗадач.ПустаяСсылка)),
	|	ВЫБОР
	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	|			ТОГДА ПунктыПоручений.Трудоемкость
	|		ИНАЧЕ НаборыТиповыхЗадач.ПлановоеВремя
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	|			ТОГДА ПунктыПоручений.Пункт
	|		ИНАЧЕ НаборыТиповыхЗадач.Наименование
	|	КОНЕЦ
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК ПунктыПоручений
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНаборыТиповыхЗадач КАК НаборыТиповыхЗадач
	|			ПО ПунктыПоручений.НаборЗадач = НаборыТиповыхЗадач.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогНаселенныеПункты КАК вогНаселенныеПункты
	|			ПО ПунктыПоручений.Предмет = вогНаселенныеПункты.Ссылка
	|		ПО ЗадачаИсполнителя.Ссылка = ПунктыПоручений.Объект
	|ГДЕ
	|	ЗадачаИсполнителя.Ссылка = &Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_ПунктыЗадач.Задача КАК Задача,
	|	вогСписокИсполнителейПоручения.Исполнитель КАК Исполнитель,
	|	вогСписокИсполнителейПоручения.Соисполнитель КАК Соисполнитель
	|ПОМЕСТИТЬ ВТ_ИсполнителиПроцесса
	|ИЗ
	|	РегистрСведений.вогСписокИсполнителейПоручения КАК вогСписокИсполнителейПоручения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПунктыЗадач КАК ВТ_ПунктыЗадач
	|		ПО (ВТ_ПунктыЗадач.Задача.БизнесПроцесс = вогСписокИсполнителейПоручения.БизнесПроцесс)
	|			И (ВТ_ПунктыЗадач.Задача.Исполнитель = вогСписокИсполнителейПоручения.Исполнитель)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПунктыЗадач.Задача,
	|	вогСписокИсполнителейПоручения.Исполнитель,
	|	вогСписокИсполнителейПоручения.Соисполнитель
	|ИЗ
	|	РегистрСведений.вогСписокИсполнителейПоручения КАК вогСписокИсполнителейПоручения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПунктыЗадач КАК ВТ_ПунктыЗадач
	|		ПО (ВТ_ПунктыЗадач.Задача.БизнесПроцесс = вогСписокИсполнителейПоручения.БизнесПроцесс)
	|			И (вогСписокИсполнителейПоручения.Соисполнитель = ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПунктыЗадач.Клиент КАК Клиент,
	|	ВТ_ПунктыЗадач.ТорговаяТочка КАК ТорговаяТочка,
	|	ВТ_ПунктыЗадач.Ответственный КАК Ответственный,
	|	ВТ_ПунктыЗадач.Задача КАК Задача,
	|	ВТ_ПунктыЗадач.Номер КАК Номер,
	|	ВТ_ПунктыЗадач.Город КАК Город,
	|	ВТ_ПунктыЗадач.Дата КАК Дата,
	|	ВТ_ПунктыЗадач.Описание КАК Описание,
	|	ВТ_ПунктыЗадач.Тема КАК Тема,
	|	ВТ_ПунктыЗадач.АдресОфиса КАК АдресОфиса,
	|	ВТ_ПунктыЗадач.Картинка КАК Картинка,
	|	ВТ_ПунктыЗадач.Сотрудник КАК Сотрудник,
	|	ВТ_ПунктыЗадач.ЦветИндекс КАК ЦветИндекс,
	|	ВТ_ПунктыЗадач.ПредставлениеЗадачи КАК ПредставлениеЗадачи,
	|	ВТ_ПунктыЗадач.Рынок КАК Рынок,
	|	ВТ_ПунктыЗадач.Расположение КАК Расположение,
	|	ВТ_ПунктыЗадач.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ВТ_ПунктыЗадач.НаборЗадач КАК НаборЗадач,
	|	ВТ_ПунктыЗадач.Длительность КАК Длительность,
	|	ВТ_ПунктыЗадач.ОжидаемыйРезультат КАК ОжидаемыйРезультат
	|ИЗ
	|	ВТ_ПунктыЗадач КАК ВТ_ПунктыЗадач
	|
	|УПОРЯДОЧИТЬ ПО
	|	Клиент,
	|	ТорговаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсполнителиПроцесса.Исполнитель КАК Исполнитель,
	|	0 КАК Порядок
	|ИЗ
	|	ВТ_ИсполнителиПроцесса КАК ВТ_ИсполнителиПроцесса
	|ГДЕ
	|	НЕ ВТ_ИсполнителиПроцесса.Соисполнитель
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ИсполнителиПроцесса.Исполнитель,
	|	1
	|ИЗ
	|	ВТ_ИсполнителиПроцесса КАК ВТ_ИсполнителиПроцесса
	|ГДЕ
	|	ВТ_ИсполнителиПроцесса.Соисполнитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("ВидМесторасположениеОфисаКлиента", Справочники.ВидыКонтактнойИнформации.МесторасположениеОфисаКлиента);
	Запрос.УстановитьПараметр("Задача", Задача);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатыЗапроса[2].Выбрать();
	ВыборкаИсполнители = РезультатыЗапроса[3].Выбрать();
	
	МассивИсполнителей = Новый Массив;
	
	Пока ВыборкаИсполнители.Следующий() Цикл
		МассивИсполнителей.Добавить(ВыборкаИсполнители.Исполнитель);
	КонецЦикла;
	
	МассивИсполнителей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИсполнителей);
	
	СтрокаИсполнитель = СтрСоединить(МассивИсполнителей, ";");
	// До изменения
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//	|	СпрТорговыеТочки.Партнер КАК Клиент,
	//	|	СпрТорговыеТочки.Ссылка КАК ТорговаяТочка,
	//	|	ЗадачаИсполнителя.Исполнитель КАК Ответственный,
	//	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	//	|	ЗадачаИсполнителя.Номер КАК Номер,
	//	|	СпрТорговыеТочки.НаселенныйПункт КАК Город,
	//	|	ЗадачаИсполнителя.Дата КАК Дата,
	//	|	ЕСТЬNULL(НаборыТиповыхЗадач.Наименование, ПунктыПоручений.Пункт) КАК Описание,
	//	|	ЕСТЬNULL(НаборыТиповыхЗадач.Наименование, ПунктыПоручений.Пункт) КАК Тема,
	//	|	ЕСТЬNULL(вогТорговыеТочкиКонтактнаяИнформация.Представление, """") КАК АдресОфиса,
	//	|	0 КАК Картинка,
	//	|	ЗадачаИсполнителя.Исполнитель КАК Сотрудник,
	//	|	ЕСТЬNULL(ЗадачаИсполнителя.БизнесПроцесс.вогНастройка.Категория.ЦветИндекс, 99) КАК ЦветИндекс,
	//	|	ЗадачаИсполнителя.Представление КАК ПредставлениеЗадачи,
	//	|	СпрТорговыеТочки.Рынок КАК Рынок,
	//	|	ВЫРАЗИТЬ(СпрТорговыеТочки.МестоположениеНаРынке КАК СТРОКА(500)) КАК Расположение,
	//	|	ВЫБОР
	//	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	//	|			ТОГДА ПунктыПоручений.ИдентификаторЗадачи
	//	|		ИНАЧЕ """"
	//	|	КОНЕЦ КАК ИдентификаторЗадачи,
	//	|	ЕСТЬNULL(НаборыТиповыхЗадач.Ссылка, ЗНАЧЕНИЕ(Справочник.вогНаборыТиповыхЗадач.ПустаяСсылка)) КАК НаборЗадач,
	//	|	ВЫБОР
	//	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	//	|			ТОГДА ПунктыПоручений.Трудоемкость
	//	|		ИНАЧЕ НаборыТиповыхЗадач.ПлановоеВремя
	//	|	КОНЕЦ КАК Длительность,
	//	|	ВЫБОР
	//	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	//	|			ТОГДА ПунктыПоручений.Пункт
	//	|		ИНАЧЕ НаборыТиповыхЗадач.Наименование
	//	|	КОНЕЦ КАК ОжидаемыйРезультат
	//	|ИЗ
	//	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК ПунктыПоручений
	//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки КАК СпрТорговыеТочки
	//	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
	//	|				ПО СпрТорговыеТочки.Ссылка = вогТорговыеТочкиКонтактнаяИнформация.Ссылка
	//	|					И (вогТорговыеТочкиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.Месторасположение))
	//	|					И (НЕ вогТорговыеТочкиКонтактнаяИнформация.Представление = """")
	//	|			ПО ПунктыПоручений.Предмет = СпрТорговыеТочки.Ссылка
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНаборыТиповыхЗадач КАК НаборыТиповыхЗадач
	//	|			ПО ПунктыПоручений.НаборЗадач = НаборыТиповыхЗадач.Ссылка
	//	|		ПО ЗадачаИсполнителя.Ссылка = ПунктыПоручений.Объект
	//	|ГДЕ
	//	|	ЗадачаИсполнителя.Ссылка = &Задача
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	СпрПартнеры.Ссылка,
	//	|	ЗНАЧЕНИЕ(Справочник.вогТорговыеТочки.ПустаяСсылка),
	//	|	ЗадачаИсполнителя.Исполнитель,
	//	|	ЗадачаИсполнителя.Ссылка,
	//	|	ЗадачаИсполнителя.Номер,
	//	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	//	|	ВЫБОР
	//	|		КОГДА ПунктыПоручений.Город = ЗНАЧЕНИЕ(Справочник.вогНаселенныеПункты.ПустаяСсылка)
	//	|			ТОГДА СпрПартнеры.вогНаселенныйПункт
	//	|		ИНАЧЕ ПунктыПоручений.Город
	//	|	КОНЕЦ,
	//	// До изменения
	//	//|	|	СпрПартнеры.вогНаселенныйПункт,
	//	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	//	|	ЗадачаИсполнителя.Дата,
	//	|	ЕСТЬNULL(НаборыТиповыхЗадач.Наименование, ПунктыПоручений.Пункт),
	//	|	ЕСТЬNULL(НаборыТиповыхЗадач.Наименование, ПунктыПоручений.Пункт),
	//	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	//	|	ВЫБОР
	//	|		КОГДА ПунктыПоручений.Адрес = """"
	//	|			ТОГДА ЕСТЬNULL(ПартнерыКонтактнаяИнформация.Представление, """")
	//	|		ИНАЧЕ ПунктыПоручений.Адрес
	//	|	КОНЕЦ,
	//	// До изменения
	//	//|	ЕСТЬNULL(ПартнерыКонтактнаяИнформация.Представление, """"),
	//	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	//	|	0,
	//	|	ЗадачаИсполнителя.Исполнитель,
	//	|	ЕСТЬNULL(ЗадачаИсполнителя.БизнесПроцесс.вогНастройка.Категория.ЦветИндекс, 99),
	//	|	ЗадачаИсполнителя.Представление,
	//	|	ЗНАЧЕНИЕ(Справочник.вогРынки.ПустаяСсылка),
	//	|	"""",
	//	|	ВЫБОР
	//	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	//	|			ТОГДА ПунктыПоручений.ИдентификаторЗадачи
	//	|		ИНАЧЕ """"
	//	|	КОНЕЦ,
	//	|	ЕСТЬNULL(НаборыТиповыхЗадач.Ссылка, ЗНАЧЕНИЕ(Справочник.вогНаборыТиповыхЗадач.ПустаяСсылка)),
	//	|	ВЫБОР
	//	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	//	|			ТОГДА ПунктыПоручений.Трудоемкость
	//	|		ИНАЧЕ НаборыТиповыхЗадач.ПлановоеВремя
	//	|	КОНЕЦ,
	//	|	ВЫБОР
	//	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	//	|			ТОГДА ПунктыПоручений.Пункт
	//	|		ИНАЧЕ НаборыТиповыхЗадач.Наименование
	//	|	КОНЕЦ
	//	|ИЗ
	//	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК ПунктыПоручений
	//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК СпрПартнеры
	//	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	//	|				ПО СпрПартнеры.Ссылка = ПартнерыКонтактнаяИнформация.Ссылка
	//	|					И (ПартнерыКонтактнаяИнформация.Вид = &ВидМесторасположениеОфисаКлиента)
	//	|					И (НЕ ПартнерыКонтактнаяИнформация.Представление = """")
	//	|			ПО ПунктыПоручений.Предмет = СпрПартнеры.Ссылка
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНаборыТиповыхЗадач КАК НаборыТиповыхЗадач
	//	|			ПО ПунктыПоручений.НаборЗадач = НаборыТиповыхЗадач.Ссылка
	//	|		ПО ЗадачаИсполнителя.Ссылка = ПунктыПоручений.Объект
	//	|ГДЕ
	//	|	ЗадачаИсполнителя.Ссылка = &Задача
	//	|
	//	// +++ VOG Кулаков П.Л. 06.11.2020 CRM-1016
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка),
	//	|	ЗНАЧЕНИЕ(Справочник.вогТорговыеТочки.ПустаяСсылка),
	//	|	ЗадачаИсполнителя.Исполнитель,
	//	|	ЗадачаИсполнителя.Ссылка,
	//	|	ЗадачаИсполнителя.Номер,
	//	|	вогНаселенныеПункты.Ссылка,
	//	|	ЗадачаИсполнителя.Дата,
	//	|	ЕСТЬNULL(НаборыТиповыхЗадач.Наименование, ПунктыПоручений.Пункт),
	//	|	ЕСТЬNULL(НаборыТиповыхЗадач.Наименование, ПунктыПоручений.Пункт),
	//	|	вогНаселенныеПункты.Ссылка,
	//	|	0,
	//	|	ЗадачаИсполнителя.Исполнитель,
	//	|	ЕСТЬNULL(ЗадачаИсполнителя.БизнесПроцесс.вогНастройка.Категория.ЦветИндекс, 99),
	//	|	ЗадачаИсполнителя.Представление,
	//	|	ЗНАЧЕНИЕ(Справочник.вогРынки.ПустаяСсылка),
	//	|	"""",
	//	|	ВЫБОР
	//	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	//	|			ТОГДА ПунктыПоручений.ИдентификаторЗадачи
	//	|		ИНАЧЕ """"
	//	|	КОНЕЦ,
	//	|	ЕСТЬNULL(НаборыТиповыхЗадач.Ссылка, ЗНАЧЕНИЕ(Справочник.вогНаборыТиповыхЗадач.ПустаяСсылка)),
	//	|	ВЫБОР
	//	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	//	|			ТОГДА ПунктыПоручений.Трудоемкость
	//	|		ИНАЧЕ НаборыТиповыхЗадач.ПлановоеВремя
	//	|	КОНЕЦ,
	//	|	ВЫБОР
	//	|		КОГДА НаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
	//	|			ТОГДА ПунктыПоручений.Пункт
	//	|		ИНАЧЕ НаборыТиповыхЗадач.Наименование
	//	|	КОНЕЦ
	//	|ИЗ
	//	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК ПунктыПоручений
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНаборыТиповыхЗадач КАК НаборыТиповыхЗадач
	//	|			ПО ПунктыПоручений.НаборЗадач = НаборыТиповыхЗадач.Ссылка
	//	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогНаселенныеПункты КАК вогНаселенныеПункты
	//	|			ПО ПунктыПоручений.Предмет = вогНаселенныеПункты.Ссылка
	//	|		ПО ЗадачаИсполнителя.Ссылка = ПунктыПоручений.Объект
	//	|ГДЕ
	//	|	ЗадачаИсполнителя.Ссылка = &Задача
	//	// --- VOG Кулаков П.Л.
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Клиент,
	//	|	ТорговаяТочка";
	//
	//Запрос.УстановитьПараметр("ВидМесторасположениеОфисаКлиента", Справочники.ВидыКонтактнойИнформации.МесторасположениеОфисаКлиента);
	//Запрос.УстановитьПараметр("Задача", Задача);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	// -- VOG Солодов В.В. 04.12.2020 CRM-1098
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДанныеСтроки 	= Новый Структура;
		// ++ VOG Солодов В.В. 04.12.2020 CRM-1098
		ДанныеСтроки.Вставить("Исполнитель", СтрокаИсполнитель);
		
		Для Каждого Колонка Из РезультатыЗапроса[2].Колонки Цикл
		// До изменения
		//Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		// -- VOG Солодов В.В. 04.12.2020 CRM-1098
			ДанныеСтроки.Вставить(Колонка.Имя, ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ТорговаяТочка) Тогда
			ПредставлениеПункта = СтрШаблон(НСтр("ru = '%1 (%2)'"), ВыборкаДетальныеЗаписи.Описание, ВыборкаДетальныеЗаписи.ТорговаяТочка);
		ИначеЕсли ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Клиент) Тогда
			ПредставлениеПункта = СтрШаблон(НСтр("ru = '%1 (%2)'"), ВыборкаДетальныеЗаписи.Описание, ВыборкаДетальныеЗаписи.Клиент);
		Иначе
			ПредставлениеПункта = ВыборкаДетальныеЗаписи.Описание;
		КонецЕсли;
		
		ДанныеСтроки.Тема 		= ПредставлениеПункта;
		
		СтруктураЗадачи = Новый Структура;
		СтруктураЗадачи.Вставить("ЭтоПоручение", Истина);
		СтруктураЗадачи.Вставить("ДанныеСтроки", ДанныеСтроки);
		
		ДанныеСтрок.Добавить(СтруктураЗадачи);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПунктаПоручения(ТаблицаЗадач)
	
	// ++ VOG Солодов В.В. 04.12.2020 CRM-1098
	СоответствиеДанныхПунктов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗадач.НомерСтроки КАК НомерСтроки,
		|	ТаблицаЗадач.Задача КАК Задача,
		|	ТаблицаЗадач.ТорговаяТочка КАК ТорговаяТочка,
		|	ТаблицаЗадач.Клиент КАК Клиент,
		|	ТаблицаЗадач.Город КАК Город,
		|	ТаблицаЗадач.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
		|	ТаблицаЗадач.НаборЗадач КАК НаборЗадач
		|ПОМЕСТИТЬ ВТ_ТаблицаЗадач
		|ИЗ
		|	&ТаблицаЗадач КАК ТаблицаЗадач
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ТаблицаЗадач.НомерСтроки КАК НомерСтроки,
		|	ВТ_ТаблицаЗадач.Задача КАК Задача,
		|	ВТ_ТаблицаЗадач.ТорговаяТочка КАК Предмет,
		|	ВТ_ТаблицаЗадач.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
		|	ВТ_ТаблицаЗадач.НаборЗадач КАК НаборЗадач
		|ПОМЕСТИТЬ ВТ_Задачи
		|ИЗ
		|	ВТ_ТаблицаЗадач КАК ВТ_ТаблицаЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО ВТ_ТаблицаЗадач.Задача = ЗадачаИсполнителя.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки КАК СпрТорговыеТочки
		|		ПО ВТ_ТаблицаЗадач.ТорговаяТочка = СпрТорговыеТочки.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТаблицаЗадач.НомерСтроки,
		|	ВТ_ТаблицаЗадач.Задача,
		|	ВТ_ТаблицаЗадач.Клиент,
		|	ВТ_ТаблицаЗадач.ИдентификаторЗадачи,
		|	ВТ_ТаблицаЗадач.НаборЗадач
		|ИЗ
		|	ВТ_ТаблицаЗадач КАК ВТ_ТаблицаЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО ВТ_ТаблицаЗадач.Задача = ЗадачаИсполнителя.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК СпрПартнеры
		|		ПО ВТ_ТаблицаЗадач.Клиент = СпрПартнеры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки КАК СпрТорговыеТочки
		|		ПО ВТ_ТаблицаЗадач.ТорговаяТочка = СпрТорговыеТочки.Ссылка
		|ГДЕ
		|	СпрТорговыеТочки.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ТаблицаЗадач.НомерСтроки,
		|	ВТ_ТаблицаЗадач.Задача,
		|	ВТ_ТаблицаЗадач.Город,
		|	ВТ_ТаблицаЗадач.ИдентификаторЗадачи,
		|	ВТ_ТаблицаЗадач.НаборЗадач
		|ИЗ
		|	ВТ_ТаблицаЗадач КАК ВТ_ТаблицаЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО ВТ_ТаблицаЗадач.Задача = ЗадачаИсполнителя.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогНаселенныеПункты КАК СпрНаселенныеПункты
		|		ПО ВТ_ТаблицаЗадач.Город = СпрНаселенныеПункты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК СпрПартнеры
		|		ПО ВТ_ТаблицаЗадач.Клиент = СпрПартнеры.Ссылка
		|ГДЕ
		|	СпрПартнеры.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Задачи.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА вогНаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
		|			ТОГДА ВТ_Задачи.ИдентификаторЗадачи
		|		ИНАЧЕ вогНаборыТиповыхЗадач.Ссылка
		|	КОНЕЦ КАК ИдентификаторЗадачи,
		|	ВЫБОР
		|		КОГДА вогНаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
		|			ТОГДА вогЗадачиПоручений.Пункт
		|		ИНАЧЕ вогНаборыТиповыхЗадач.Наименование
		|	КОНЕЦ КАК Пункт,
		|	вогСписокИсполнителейПоручения.Исполнитель КАК Исполнитель,
		|	вогСписокИсполнителейПоручения.Соисполнитель КАК Соисполнитель,
		|	ВТ_Задачи.Предмет КАК Предмет
		|ПОМЕСТИТЬ ВТ_ПунктыИсполнители
		|ИЗ
		|	ВТ_Задачи КАК ВТ_Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК вогЗадачиПоручений
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСписокИсполнителейПоручения КАК вогСписокИсполнителейПоручения
		|			ПО вогЗадачиПоручений.Объект.БизнесПроцесс = вогСписокИсполнителейПоручения.БизнесПроцесс
		|				И (вогЗадачиПоручений.Объект.Исполнитель = вогСписокИсполнителейПоручения.Исполнитель
		|					ИЛИ вогСписокИсполнителейПоручения.Соисполнитель)
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНаборыТиповыхЗадач КАК вогНаборыТиповыхЗадач
		|			ПО вогЗадачиПоручений.НаборЗадач = вогНаборыТиповыхЗадач.Ссылка
		|		ПО ВТ_Задачи.Задача = вогЗадачиПоручений.Объект
		|			И ВТ_Задачи.Предмет = вогЗадачиПоручений.Предмет
		|			И ВТ_Задачи.ИдентификаторЗадачи = вогЗадачиПоручений.ИдентификаторЗадачи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Задачи.НомерСтроки,
		|	ВТ_Задачи.НаборЗадач,
		|	ВЫБОР
		|		КОГДА вогНаборыТиповыхЗадач.Ссылка ЕСТЬ NULL
		|			ТОГДА вогЗадачиПоручений.Пункт
		|		ИНАЧЕ вогНаборыТиповыхЗадач.Наименование
		|	КОНЕЦ,
		|	вогСписокИсполнителейПоручения.Исполнитель,
		|	вогСписокИсполнителейПоручения.Соисполнитель,
		|	ВТ_Задачи.Предмет
		|ИЗ
		|	ВТ_Задачи КАК ВТ_Задачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК вогЗадачиПоручений
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогСписокИсполнителейПоручения КАК вогСписокИсполнителейПоручения
		|			ПО вогЗадачиПоручений.Объект.БизнесПроцесс = вогСписокИсполнителейПоручения.БизнесПроцесс
		|				И (вогЗадачиПоручений.Объект.Исполнитель = вогСписокИсполнителейПоручения.Исполнитель
		|					ИЛИ вогСписокИсполнителейПоручения.Соисполнитель)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогНаборыТиповыхЗадач КАК вогНаборыТиповыхЗадач
		|			ПО вогЗадачиПоручений.НаборЗадач = вогНаборыТиповыхЗадач.Ссылка
		|		ПО ВТ_Задачи.Задача = вогЗадачиПоручений.Объект
		|			И ВТ_Задачи.Предмет = вогЗадачиПоручений.Предмет
		|			И ВТ_Задачи.НаборЗадач = вогЗадачиПоручений.НаборЗадач
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ПунктыИсполнители.Предмет КАК Предмет,
		|	ВТ_ПунктыИсполнители.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
		|	ВТ_ПунктыИсполнители.Пункт КАК Пункт,
		|	ВТ_ПунктыИсполнители.НомерСтроки КАК НомерСтроки,
		|	ВТ_ПунктыИсполнители.Исполнитель КАК Исполнитель,
		|	0 КАК Порядок
		|ИЗ
		|	ВТ_ПунктыИсполнители КАК ВТ_ПунктыИсполнители
		|ГДЕ
		|	НЕ ВТ_ПунктыИсполнители.Соисполнитель
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ПунктыИсполнители.Предмет,
		|	ВТ_ПунктыИсполнители.ИдентификаторЗадачи,
		|	ВТ_ПунктыИсполнители.Пункт,
		|	ВТ_ПунктыИсполнители.НомерСтроки,
		|	ВТ_ПунктыИсполнители.Исполнитель,
		|	1
		|ИЗ
		|	ВТ_ПунктыИсполнители КАК ВТ_ПунктыИсполнители
		|ГДЕ
		|	ВТ_ПунктыИсполнители.Соисполнитель
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|ИТОГИ
		|	МАКСИМУМ(НомерСтроки)
		|ПО
		|	Предмет,
		|	ИдентификаторЗадачи,
		|	Пункт";
	
	Запрос.УстановитьПараметр("ТаблицаЗадач", ТаблицаЗадач);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПредметы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПредметы.Следующий() Цикл
		
		ВыборкаИдентификаторы = ВыборкаПредметы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаИдентификаторы.Следующий() Цикл
			
			ВыборкаПункты = ВыборкаИдентификаторы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПункты.Следующий() Цикл
				
				МассивИсполнителей = Новый Массив;
				
				ВыборкаДетальныеЗаписи = ВыборкаПункты.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					МассивИсполнителей.Добавить(ВыборкаДетальныеЗаписи.Исполнитель);
				КонецЦикла;
				
				МассивИсполнителей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИсполнителей);
				
				СтруктураЗаполнения = Новый Структура;
				СтруктураЗаполнения.Вставить("ЗадачаТекст", ВыборкаПункты.Пункт);
				СтруктураЗаполнения.Вставить("Исполнитель", СтрСоединить(МассивИсполнителей, "; "));
				
				СоответствиеДанныхПунктов.Вставить(ВыборкаИдентификаторы.НомерСтроки, СтруктураЗаполнения);
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СоответствиеДанныхПунктов;
	// До изменения
	//ИмяКолонкиТТ = Неопределено;
	//
	//Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, "ТорговаяТочкаТекст") Тогда
	//	ИмяКолонкиТТ = "ТорговаяТочкаТекст";
	//ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, "ТТТекст") Тогда
	//	ИмяКолонкиТТ = "ТТТекст";
	//КонецЕсли;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	вогЗадачиПоручений.Пункт КАК Пункт
	//|ИЗ
	//|	РегистрСведений.вогЗадачиПоручений КАК вогЗадачиПоручений
	//|ГДЕ
	//|	вогЗадачиПоручений.Объект = &Объект
	//|	И вогЗадачиПоручений.Предмет = &Предмет
	//|	И вогЗадачиПоручений.ИдентификаторЗадачи = &ИдентификаторЗадачи";
	//
	//Запрос.УстановитьПараметр("ИдентификаторЗадачи", 	ДанныеСтроки.ИдентификаторЗадачи);
	//Запрос.УстановитьПараметр("Объект", 				ДанныеСтроки.Задача);
	//
	//Если ЗначениеЗаполнено(ДанныеСтроки.ТорговаяТочка) Тогда
	//	Запрос.УстановитьПараметр("Предмет", ДанныеСтроки.ТорговаяТочка);
	//// +++ VOG Кулаков П.Л. 11.11.2020 CRM-1016
	//ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Клиент) Тогда
	//	Запрос.УстановитьПараметр("Предмет", ДанныеСтроки.Клиент);
	//Иначе
	//	Запрос.УстановитьПараметр("Предмет", ДанныеСтроки.Город);
	//КонецЕсли;
	//// --- VOG Кулаков П.Л.
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	ТекстПункта = ВыборкаДетальныеЗаписи.Пункт;
	//КонецЦикла;
	//
	//Возврат ТекстПункта;
	// -- VOG Солодов В.В. 04.12.2020 CRM-1098
	
КонецФункции
// -- VOG Солодов В.В. 11.09.2020

// ++ VOG Солодов В.В. 07.12.2020 CRM-1098
&НаСервере
Процедура ДобавитьСоисполнителяНаСервере()
	
	МассивЗадач 			= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Задачи, "Задача", Истина);
	ДобавленныеСотрудники 	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.КомандированныеСотрудники, "Сотрудник", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс
		|ПОМЕСТИТЬ ВТ_БизнесПроцессы
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка В(&МассивЗадач)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Пользователи.Ссылка КАК Сотрудник,
		|	Пользователи.Подразделение КАК Подразделение,
		|	Пользователи.CRM_ДолжностнаяПозиция КАК Должность,
		// ++ VOG Солодов В.В. 23.12.2020 CRM-1098
		|	ИСТИНА КАК Соисполнитель
		// -- VOG Солодов В.В. 23.12.2020 CRM-1098
		|ИЗ
		|	РегистрСведений.вогСписокИсполнителейПоручения КАК вогСписокИсполнителейПоручения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_БизнесПроцессы КАК ВТ_БизнесПроцессы
		|		ПО вогСписокИсполнителейПоручения.БизнесПроцесс = ВТ_БизнесПроцессы.БизнесПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО вогСписокИсполнителейПоручения.Исполнитель = Пользователи.Ссылка
		|ГДЕ
		|	вогСписокИсполнителейПоручения.Соисполнитель = ИСТИНА
		|	И НЕ Пользователи.Ссылка В(&ДобавленныеСотрудники)";
	
	Запрос.УстановитьПараметр("МассивЗадач", 			МассивЗадач);
	Запрос.УстановитьПараметр("ДобавленныеСотрудники", 	ДобавленныеСотрудники);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрока = Объект.КомандированныеСотрудники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
			НоваяСтрока.КоличествоДней = Объект.Продолжительность;
			НоваяСтрока.Филиал = Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(
				ВыборкаДетальныеЗаписи.Подразделение);
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСоисполнителей()
	
	МассивЗадач = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Задачи, "Задача", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс
		|ПОМЕСТИТЬ ВТ_БизнесПроцессы
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка В(&МассивЗадач)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Пользователи.Ссылка КАК Сотрудник
		|ИЗ
		|	РегистрСведений.вогСписокИсполнителейПоручения КАК вогСписокИсполнителейПоручения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_БизнесПроцессы КАК ВТ_БизнесПроцессы
		|		ПО вогСписокИсполнителейПоручения.БизнесПроцесс = ВТ_БизнесПроцессы.БизнесПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО вогСписокИсполнителейПоручения.Исполнитель = Пользователи.Ссылка
		|ГДЕ
		|	вогСписокИсполнителейПоручения.Соисполнитель = ИСТИНА";
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивСоисполнителей = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Соисполнитель", Истина);
	
	НайденныеСтроки = Объект.КомандированныеСотрудники.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если МассивСоисполнителей.Найти(НайденнаяСтрока.Сотрудник) = Неопределено Тогда
			ИндексСтроки = Объект.КомандированныеСотрудники.Индекс(НайденнаяСтрока);
			Объект.КомандированныеСотрудники.Удалить(ИндексСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
// -- VOG Солодов В.В. 07.12.2020 CRM-1098

&НаКлиенте
Процедура СоздатьЭлементПланировщика(ДатаНачала, ДатаОкончания, Значение, Текст, СотрудникВСобытии, ТекущиеДанные = Неопределено, ЭтоДекорация = Ложь, ЦветИндекс = Неопределено)
	
	//Павелко, Таск 000000936, 28.11.2019+++
	УдалитьЭлементПланировщика(Значение);	
	
	Если ДатаНачала = '00010101' Или ДатаОкончания = '00010101' Или ДатаОкончания < ДатаНачала Тогда		
		Возврат;		
	КонецЕсли;		
	
	// ++ VOG Солодов В.В. 03.02.2020 CRM-212
	Если Не ПервоеЗаполнениеПланировщика Тогда
		
		// ++ VOG Солодов В.В. 21.09.2020 
		СписокДат = Новый СписокЗначений;
		
		Для Каждого ЭлементКалендаря Из Календарь.Элементы Цикл
			
			Если ЭлементКалендаря.Значение.Сотрудник = СотрудникВСобытии Тогда
				СписокДат.Добавить(ЭлементКалендаря.Конец);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокДат.Количество() > 0 Тогда
			
			СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
			ПоследняяДата = СписокДат.Получить(СписокДат.Количество() - 1);
			
			Продолжительность 	= ДатаОкончания - ДатаНачала;
			ДатаНачала 			= ПоследняяДата.Значение;
			ДатаОкончания 		= ДатаНачала + Продолжительность;
			
		КонецЕсли;
		// До изменения
		//Для Каждого ЭлементКалендаря Из Календарь.Элементы Цикл
		//	
		//	СтруктураДобавления = Новый Структура("Начало, Конец", ДатаНачала, ДатаОкончания);
		//	Если ЭлементКалендаря.Значение.Сотрудник = СотрудникВСобытии тогда 
		//		Если ОпределитьПересечениеИнтерваловКалендаря(СтруктураДобавления, ЭлементКалендаря) Тогда
		//			
		//			Продолжительность = ДатаОкончания - ДатаНачала;
		//			
		//			ДатаНачала = ЭлементКалендаря.Конец;
		//			// ++ VOG Солодов В.В. 17.09.2020 
		//			ДатаОкончания = ЭлементКалендаря.Конец + Продолжительность;
		//			// До изменения
		//			//ДатаОкончания = ЭлементКалендаря.Конец+900;
		//			// -- VOG Солодов В.В. 17.09.2020 
		//			
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//КонецЦикла;
		// -- VOG Солодов В.В. 21.09.2020 
		
	КонецЕсли;
	// -- VOG Солодов В.В. 03.02.2020
	
	НовыйЭлемент = Календарь.Элементы.Добавить(ДатаНачала, ДатаОкончания);
			
	Если ЭтоДекорация Тогда
		
		НовыйЭлемент.ЦветФона 	= WebЦвета.СветлоСерый;
		НовыйЭлемент.Картинка 	= БиблиотекаКартинок.CRM_Просрочено;
		НовыйЭлемент.Текст 		= Текст+","+Значение.ТипПеремещения+","+СотрудникВСобытии;
		НовыйЭлемент.Подсказка 	= Текст+","+Значение.ТипПеремещения+","+СотрудникВСобытии;
		НовыйЭлемент.Значение	= Новый Структура("Значение, Сотрудник, ЭтоДекорация,ТипПеремещения", Текст, СотрудникВСобытии, Истина,Значение.ТипПеремещения);
		
	Иначе
		
		// +++ VOG Кулаков П.Л. 11.11.2020 CRM-1016
		ПараметрыОтбораСтрок = Новый Структура;
		
		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			
			ПараметрыОтбораСтрок.Вставить("Задача", 		Значение.Задача);
			ПараметрыОтбораСтрок.Вставить("Клиент", 		Значение.Клиент);
			ПараметрыОтбораСтрок.Вставить("ТорговаяТочка", 	Значение.ТорговаяТочка);
			
			Если ЗначениеЗаполнено(Значение.ИдентификаторЗадачи) Тогда
				ПараметрыОтбораСтрок.Вставить("ИдентификаторЗадачи", Значение.ИдентификаторЗадачи);
			Иначе
				ПараметрыОтбораСтрок.Вставить("НаборЗадач", Значение.НаборЗадач);
			КонецЕсли;
			
		Иначе
			ПараметрыОтбораСтрок.Вставить("Задача", Значение);
		КонецЕсли;
		
		МассивСтрок = Объект.Задачи.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если МассивСтрок.Количество() > 0 тогда
			СтрокаЗадача = МассивСтрок[0];
			
			Если СокрЛП(СтрокаЗадача.ТорговаяТочка) = "" 
					И СокрЛП(СтрокаЗадача.Клиент) = "" 
					И СокрЛП(СтрокаЗадача.Город) <> "" Тогда
				Если СтрНайти(Текст,СтрокаЗадача.Город) = 0 Тогда
					Текст = Текст + " (" + СтрокаЗадача.Город + ")";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		
		НовыйЭлемент.Текст = Текст;
		НовыйЭлемент.Значение = Новый Структура("Значение, Сотрудник, ЭтоДекорация", Значение, СотрудникВСобытии, Ложь);
		
		НовыйЭлемент.Подсказка = СформироватьТекстПодсказки(Значение);
		
		Если ЦветИндекс <> Неопределено Тогда
			ЦветФона = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьЦветПоКлючу(ЦветИндекс);
			Если ЦветФона <> Неопределено тогда
				НовыйЭлемент.ЦветФона = ЦветФона.Цвет;
			КонецЕсли;
		Иначе
			ЦветФона = ПолучитьЦветЗадачи(Значение);
			Если ЦветФона <> Неопределено тогда
				НовыйЭлемент.ЦветФона = ЦветФона.Цвет;
			КонецЕсли;

		КонецЕсли;
		
		Если Не ТекущиеДанные = Неопределено Тогда
			ТекущиеДанные.ВремяНачала = НовыйЭлемент.Начало;
			ТекущиеДанные.ВремяОкончания = НовыйЭлемент.Конец;
			ТекущиеДанные.Продолжительность = Окр((ТекущиеДанные.ВремяОкончания - ТекущиеДанные.ВремяНачала) / 3600, 2);			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Функция СформироватьТекстПодсказки(Задача)
	ТекстПодсказки = "";
	
	// ++ VOG Солодов В.В. 17.09.2020
	ПараметрыОтбораСтрок = Новый Структура;
	
	Если ТипЗнч(Задача) = Тип("Структура") Тогда
		
		ПараметрыОтбораСтрок.Вставить("Задача", 		Задача.Задача);
		ПараметрыОтбораСтрок.Вставить("Клиент", 		Задача.Клиент);
		ПараметрыОтбораСтрок.Вставить("ТорговаяТочка", 	Задача.ТорговаяТочка);
		
		Если ЗначениеЗаполнено(Задача.ИдентификаторЗадачи) Тогда
			ПараметрыОтбораСтрок.Вставить("ИдентификаторЗадачи", Задача.ИдентификаторЗадачи);
		Иначе
			ПараметрыОтбораСтрок.Вставить("НаборЗадач", Задача.НаборЗадач);
		КонецЕсли;
		
	Иначе
		ПараметрыОтбораСтрок.Вставить("Задача", Задача);
	КонецЕсли;
	
	МассивСтрок = Объект.Задачи.НайтиСтроки(ПараметрыОтбораСтрок);
	// До изменения
	//МассивСтрок = Объект.Задачи.НайтиСтроки(Новый Структура("Задача", Задача));
	// -- VOG Солодов В.В. 17.09.2020 
	
	Если МассивСтрок.Количество() > 0 тогда
		СтрокаЗадача = МассивСтрок[0];		
		ПереносСтроки = "
		|";
		
		Если СокрЛП(СтрокаЗадача.Клиент) <> "" тогда
			ТекстПодсказки = ТекстПодсказки + "Клиент: "+ПолучитьНазваниеПривилегированныйРежим(СтрокаЗадача.Клиент)+ПереносСтроки;
		КонецЕсли;	
		
		Если СокрЛП(СтрокаЗадача.Город) <> "" тогда
			ТекстПодсказки = ТекстПодсказки + "Город: "+СокрЛП(СтрокаЗадача.Город)+ПереносСтроки;
		КонецЕсли;	
		
		Если СокрЛП(СтрокаЗадача.ТорговаяТочка) <> "" тогда
			ТекстПодсказки = ТекстПодсказки + "Торговая точка: "+ПолучитьНазваниеПривилегированныйРежим(СтрокаЗадача.ТорговаяТочка)+ПереносСтроки;
		КонецЕсли;	
		
		// ++ VOG Солодов В.В. 24.12.2020 DEV-33
		Если СокрЛП(СтрокаЗадача.Исполнитель) <> "" Тогда
			ТекстПодсказки = ТекстПодсказки + "Сотрудник: " + СокрЛП(СтрокаЗадача.Исполнитель) + ПереносСтроки;
		КонецЕсли;
		// До изменения
		//Если СокрЛП(СтрокаЗадача.Сотрудник) <> "" тогда
		//	ТекстПодсказки = ТекстПодсказки + "Сотрудник: "+СокрЛП(СтрокаЗадача.Сотрудник)+ПереносСтроки;
		//КонецЕсли;
		// -- VOG Солодов В.В. 24.12.2020 DEV-33
		
		Если СокрЛП(СтрокаЗадача.Приоритет) <> "" тогда
			ТекстПодсказки = ТекстПодсказки + "Приоритет: "+СокрЛП(СтрокаЗадача.Приоритет)+ПереносСтроки;
		КонецЕсли;	
		
		Если СокрЛП(СтрокаЗадача.Запланировал) <> "" тогда
			ТекстПодсказки = ТекстПодсказки + "Запланировал: "+СокрЛП(СтрокаЗадача.Запланировал)+ПереносСтроки;
		КонецЕсли;	
		
		Если СокрЛП(СтрокаЗадача.Комментарий) <> "" тогда
			ТекстПодсказки = ТекстПодсказки + "Комментарий: "+СокрЛП(СтрокаЗадача.Комментарий);
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ТекстПодсказки;
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьЦветЗадачи(Значение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЦветИндекс = 99;
	Если ТипЗнч(Значение) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") тогда								
		Если Значение.БизнесПроцесс.вогНастройка.Категория.ЦветПредставление <> "" тогда
			ЦветИндекс = Значение.БизнесПроцесс.вогНастройка.Категория.ЦветИндекс;
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.CRM_Мероприятие") тогда			
		Если Значение.вогВидВзаимодействия.Категория.ЦветПредставление <> "" тогда
			ЦветИндекс = Значение.вогВидВзаимодействия.Категория.ЦветИндекс;
		КонецЕсли;
	// ++ VOG Солодов В.В. 11.09.2020 
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура")
		И Значение.Свойство("Задача")
		И ТипЗнч(Значение.Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Если Значение.Задача.БизнесПроцесс.вогНастройка.Категория.ЦветПредставление <> "" тогда
			ЦветИндекс = Значение.Задача.БизнесПроцесс.вогНастройка.Категория.ЦветИндекс;
		КонецЕсли;
	// -- VOG Солодов В.В. 11.09.2020 
	КонецЕсли;
	
	ЦветФона = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьЦветПоКлючу(ЦветИндекс);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЦветФона;
					
КонецФункции

&НаКлиенте
Процедура УдалитьЭлементПланировщика(УдаляемыйЭлемент) //Павелко, Таск 000000936, 02.12.2019
	
	Если УдаляемыйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УдалитьЗадачу = (ТипЗнч(УдаляемыйЭлемент) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")); // VOG Солодов В.В. 14.09.2020
	
	МассивУдаляемых = Новый Массив; // ++ VOG Солодов В.В. 14.09.2020
	
	Для Каждого Элемент Из Календарь.Элементы Цикл
		
		// ++ VOG Солодов В.В. 14.09.2020
		Если УдалитьЗадачу Тогда
			
			Если ТипЗнч(Элемент.Значение.Значение) = Тип("Структура")
				И Элемент.Значение.Значение.Задача = УдаляемыйЭлемент Тогда
				МассивУдаляемых.Добавить(Элемент);
			ИначеЕсли Элемент.Значение.Значение = УдаляемыйЭлемент Тогда
				МассивУдаляемых.Добавить(Элемент);
				Прервать;
			КонецЕсли;
		
		Иначе
			
			Если ТипЗнч(Элемент.Значение.Значение) = Тип("Структура")
				И ТипЗнч(УдаляемыйЭлемент) = Тип("Структура")
				// +++ VOG Кулаков П.Л. 06.11.2020 CRM-1016
				И Не УдаляемыйЭлемент.Свойство("ТипПеремещения") // Исключим из удаления перемещение
				// --- VOG Кулаков П.Л.
				И ОпределитьПересечениеСтруктурыПланировщика(Элемент.Значение.Значение, УдаляемыйЭлемент) Тогда
				МассивУдаляемых.Добавить(Элемент);
				Прервать;
			ИначеЕсли Элемент.Значение.Значение = УдаляемыйЭлемент Тогда
				МассивУдаляемых.Добавить(Элемент);
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		// До изменения
		//Если Элемент.Значение.Значение = УдаляемыйЭлемент Тогда
		//	Календарь.Элементы.Удалить(Элемент);
		//	Прервать;
		//КонецЕсли;
		// -- VOG Солодов В.В. 14.09.2020 
		
	КонецЦикла;
	
	// ++ VOG Солодов В.В. 14.09.2020 
	Для Каждого Элемент Из МассивУдаляемых Цикл
		Календарь.Элементы.Удалить(Элемент);
	КонецЦикла;
	// -- VOG Солодов В.В. 14.09.2020 
	
КонецПроцедуры

// ++ VOG Солодов В.В. 19.09.2020
&НаКлиенте
Функция ОпределитьПересечениеСтруктурыПланировщика(СуществующийЭлемент, ПроверяемыйЭлемент)
	
	ЕстьПересечение = Ложь;
	
	Если СуществующийЭлемент.Клиент = ПроверяемыйЭлемент.Клиент
		И СуществующийЭлемент.ТорговаяТочка = ПроверяемыйЭлемент.ТорговаяТочка Тогда
		
		Если ЗначениеЗаполнено(СуществующийЭлемент.ИдентификаторЗадачи)
			И ЗначениеЗаполнено(ПроверяемыйЭлемент.ИдентификаторЗадачи)
			И СуществующийЭлемент.ИдентификаторЗадачи = ПроверяемыйЭлемент.ИдентификаторЗадачи Тогда
			
			ЕстьПересечение = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(СуществующийЭлемент.НаборЗадач)
			И ЗначениеЗаполнено(ПроверяемыйЭлемент.НаборЗадач)
			И СуществующийЭлемент.НаборЗадач = ПроверяемыйЭлемент.НаборЗадач Тогда
			
			ЕстьПересечение = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьПересечение;
	
КонецФункции // -- VOG Солодов В.В. 19.09.2020

&НаКлиенте
Процедура СписокЗадачНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИсточникПеретаскивания = "СписокЗадач";
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ПриемникПеретаскивания = "ТаблицаПодбора" тогда
		ПриПеретаскивании(Элемент);
	ИначеЕсли ПриемникПеретаскивания = "Календарь" тогда
		ПриПеретаскивании(Элемент);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПриемникПеретаскивания = "СписокЗадач";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = "ТаблицаПодбора";

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруЭлементаПланировщика(СтрокаКоллекции) // ++ VOG Солодов В.В. 14.09.2020
	
	ЗначениеПланировщика = Новый Структура;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаКоллекции, "Задача") Тогда
		ЗначениеПланировщика.Вставить("Задача", 			СтрокаКоллекции.Задача);
	Иначе
		ЗначениеПланировщика.Вставить("Задача", 			СтрокаКоллекции.Значение);
	КонецЕсли;
	ЗначениеПланировщика.Вставить("ИдентификаторЗадачи", 	"");
	ЗначениеПланировщика.Вставить("НаборЗадач", 			ПредопределенноеЗначение("Справочник.вогНаборыТиповыхЗадач.ПустаяСсылка"));
	ЗначениеПланировщика.Вставить("Клиент", 				СтрокаКоллекции.Клиент);
	ЗначениеПланировщика.Вставить("ТорговаяТочка", 			СтрокаКоллекции.ТорговаяТочка);
	
	Если ЗначениеЗаполнено(СтрокаКоллекции.ИдентификаторЗадачи) Тогда
		ЗначениеПланировщика.ИдентификаторЗадачи = СтрокаКоллекции.ИдентификаторЗадачи;
	ИначеЕсли ЗначениеЗаполнено(СтрокаКоллекции.НаборЗадач) Тогда
		ЗначениеПланировщика.НаборЗадач = СтрокаКоллекции.НаборЗадач;
	КонецЕсли;
	
	Возврат ЗначениеПланировщика;
	
КонецФункции

&НаКлиенте
Процедура ЗадачиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ПриемникПеретаскивания = "СписокЗадач" тогда
		
		УдалитьСтрокуТаблицы(Объект.Задачи.Индекс(Элемент.ТекущиеДанные));		
		
	КонецЕсли;
	
	Если ПриемникПеретаскивания = "Календарь" тогда
		
		ЭтаФорма.Модифицированность = Истина;
		
		// ++ VOG Солодов В.В. 14.09.2020
		Продолжительность = 900;
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если Не ТекущиеДанные.ВремяНачала = Дата(1,1,1)
			И Не ТекущиеДанные.ВремяОкончания = Дата(1,1,1) Тогда
			Продолжительность = ТекущиеДанные.ВремяОкончания - ТекущиеДанные.ВремяНачала;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторЗадачи)
			Или ЗначениеЗаполнено(ТекущиеДанные.НаборЗадач) Тогда
			
			ЗначениеПланировщика = ПолучитьСтруктуруЭлементаПланировщика(ТекущиеДанные);
			
		Иначе
			ЗначениеПланировщика = ТекущиеДанные.Задача;
		КонецЕсли;
		
		СоздатьЭлементПланировщика(
			НачалоЧаса(ДатаПеретаскивания),
			НачалоЧаса(ДатаПеретаскивания) + Продолжительность,
			ЗначениеПланировщика,
			ТекущиеДанные.Тема,
			ТекущиеДанные.Сотрудник,
			ТекущиеДанные,
			,
			ТекущиеДанные.ЦветИндекс);
		// До изменения
		//СоздатьЭлементПланировщика(НачалоЧаса(ДатаПеретаскивания), НачалоЧаса(ДатаПеретаскивания) +900, Элемент.ТекущиеДанные.Задача, Элемент.ТекущиеДанные.Тема, Элемент.ТекущиеДанные.Сотрудник, Элемент.ТекущиеДанные,,Элемент.ТекущиеДанные.ЦветИндекс);
		// -- VOG Солодов В.В. 14.09.2020 
		
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПриемникПеретаскивания = "ТаблицаПодбора";
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуТаблицы(НомерСтроки)
	
	УдаляемыйЭлемент = Объект.Задачи.Получить(НомерСтроки);
	
	Если ПользователиКлиентСервер.ТекущийПользователь() <> УдаляемыйЭлемент.Запланировал тогда
	//Если ПользователиКлиентСервер.ТекущийПользователь() <> УдаляемыйЭлемент.Запланировал И НЕ ПользовательРольДоступна("ПолныеПрава") тогда
		Сообщить("Удалить задачу/мероприятия из списка может сотрудник, добавивший её ("+СокрЛП(УдаляемыйЭлемент.Запланировал)+")");
	    Возврат;
	КонецЕсли;	
	
	ЭтаФорма.Модифицированность = Истина;
	
	// ++ VOG Солодов В.В. 14.09.2020 
	Если ЗначениеЗаполнено(УдаляемыйЭлемент.ИдентификаторЗадачи)
		Или ЗначениеЗаполнено(УдаляемыйЭлемент.НаборЗадач) Тогда
		
		СтрокиУдаления = Новый Массив;
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Задача", УдаляемыйЭлемент.Задача);
		
		НайденныеСтроки = Объект.Задачи.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			СтрокиУдаления.Добавить(СтрокаТабличнойЧасти);
			УдалитьЭлементПланировщика(СтрокаТабличнойЧасти.Задача);
		КонецЦикла;
		
		Для Каждого СтрокаТабличнойЧасти Из СтрокиУдаления Цикл
			ИндексСтроки = Объект.Задачи.Индекс(СтрокаТабличнойЧасти);
			Объект.Задачи.Удалить(ИндексСтроки);
		КонецЦикла;
		
		ОчиститьСоисполнителей();
		
	Иначе
		УдалитьЭлементПланировщика(УдаляемыйЭлемент.Задача);
		Объект.Задачи.Удалить(УдаляемыйЭлемент);
	КонецЕсли;
	// До изменения
	//УдалитьЭлементПланировщика(УдаляемыйЭлемент.Задача);
	//Объект.Задачи.Удалить(УдаляемыйЭлемент);
	// -- VOG Солодов В.В. 14.09.2020
	
	ОбновитьОтбор();
	
КонецПроцедуры

&НаСервере
Функция ПользовательРольДоступна(Роль)
	
	Возврат РольДоступна(Роль);
	
КонецФункции

&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЗадачиПриоритет" ИЛИ Поле.Имя = "ЗадачиОжидаемыйРезультат" ИЛИ Поле.Имя = "ЗадачиКомментарий"  ИЛИ Поле.Имя = "ЗадачиГород" Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не Элемент.ТекущиеДанные.Задача.Пустая() Тогда		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Задача);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьСтрокуТаблицы(Объект.Задачи.Индекс(Элемент.ТекущиеДанные));

КонецПроцедуры

&НаКлиенте
Процедура КалендарьПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	
	ПриемникПеретаскивания = "Календарь";
	ДатаПеретаскивания = Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭлементыКалендаря(ОбновитьДанные = Ложь)
	
	Календарь.Элементы.Очистить();
	
	Для Каждого Строка Из Объект.ДанныеПланировщика Цикл 	
		Если  Строка.ЭтоДекорация тогда
			СоздатьЭлементПланировщика(Строка.ДатаНачала, Строка.ДатаОкончания, Новый Структура("Описание,ТипПеремещения",Строка.Описание,Строка.ТипПеремещения), Строка.Описание, Строка.Сотрудник, , Строка.ЭтоДекорация);		
		Иначе
			// ++ VOG Солодов В.В. 14.09.2020 
			Если ЗначениеЗаполнено(Строка.ИдентификаторЗадачи)
				Или ЗначениеЗаполнено(Строка.НаборЗадач) Тогда
				
				ЗначениеПланировщика = ПолучитьСтруктуруЭлементаПланировщика(Строка);
				
			Иначе
				ЗначениеПланировщика = Строка.Значение;
			КонецЕсли;
			
			СоздатьЭлементПланировщика(
				Строка.ДатаНачала,
				Строка.ДатаОкончания,
				ЗначениеПЛанировщика,
				Строка.Описание,
				Строка.Сотрудник,
				,
				Строка.ЭтоДекорация);
			// До изменения
			//СоздатьЭлементПланировщика(Строка.ДатаНачала, Строка.ДатаОкончания, Строка.Значение, Строка.Описание, Строка.Сотрудник, , Строка.ЭтоДекорация);
			// -- VOG Солодов В.В. 14.09.2020 
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСобытияПланировщика()
	
	Если ЭтаФорма.Модифицированность = Ложь тогда
		Возврат;	
	КонецЕсли;	
		
	Объект.ДанныеПланировщика.Очистить();
	Для Каждого Событие Из Календарь.Элементы Цикл
		НоваяСтрока = Объект.ДанныеПланировщика.Добавить();				
		НоваяСтрока.Сотрудник 		= Событие.Значение.Сотрудник;
		// ++ VOG Солодов В.В. 14.09.2020 
		Если ТипЗнч(Событие.Значение.Значение) = Тип("Структура") Тогда
			НоваяСтрока.Значение 			= Событие.Значение.Значение.Задача;
			Если ЗначениеЗаполнено(Событие.Значение.Значение.ИдентификаторЗадачи) Тогда
				НоваяСтрока.ИдентификаторЗадачи = Событие.Значение.Значение.ИдентификаторЗадачи;
			ИначеЕсли ЗначениеЗаполнено(Событие.Значение.Значение.НаборЗадач) Тогда
				НоваяСтрока.НаборЗадач = Событие.Значение.Значение.НаборЗадач;
			КонецЕсли;
			НоваяСтрока.Клиент 			= Событие.Значение.Значение.Клиент;
			НоваяСтрока.ТорговаяТочка 	= Событие.Значение.Значение.ТорговаяТочка;
		Иначе
			НоваяСтрока.Значение 		= Событие.Значение.Значение;
		КонецЕсли;
		// До изменения
		//НоваяСтрока.Значение 		= Событие.Значение.Значение;
		// -- VOG Солодов В.В. 14.09.2020 
		НоваяСтрока.ДатаНачала 		= Событие.Начало;
		НоваяСтрока.ДатаОкончания 	= Событие.Конец;
		НоваяСтрока.Описание 		= Событие.Текст;
		НоваяСтрока.ЭтоДекорация 	= Событие.Значение.ЭтоДекорация;		
		Если НоваяСтрока.ЭтоДекорация тогда                     
			НоваяСтрока.ТипПеремещения	= Событие.Значение.ТипПеремещения;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьДанныеПоРезультатамПодбора()
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Павелко, Задача CRM-284, 11.02.2020 - перенесено в экспортную функцию СписокКомандированныхСотрудников модуля объекта +++
	//ТЗКомандированныеСотрудники = Новый ТаблицаЗначений;
	//ТЗКомандированныеСотрудники.Колонки.Добавить("Сотрудник");	
	//Строки = Объект.КомандированныеСотрудники.НайтиСтроки(Новый Структура("ДобавленАвтоматически",Ложь));
	//Для Каждого Стр из Строки цикл
	//	ТЗКомандированныеСотрудники.Добавить().Сотрудник = Стр.Сотрудник;
	//КонецЦикла;	
	//Павелко, Задача CRM-284, 11.02.2020 - перенесено в экспортную функцию СписокКомандированныхСотрудников модуля объекта ---
	
	Документы.вогКомандировка.ОбновитьДанныеКомандировки(Объект); //Павелко, Задача CRM-284, 11.02.2020
	
	//Павелко, Задача CRM-284, 11.02.2020 - перенесено в экспортную функцию СписокКомандированныхСотрудников модуля объекта +++
	//Для каждого Стр из ТЗКомандированныеСотрудники цикл
	//	УжеДобавлен = Объект.КомандированныеСотрудники.НайтиСтроки(Новый Структура("Сотрудник",Стр.Сотрудник));
	//	Если УжеДобавлен.Количество() = 0 тогда
	//		Объект.КомандированныеСотрудники.Добавить().Сотрудник = Стр.Сотрудник;	
	//	КонецЕсли;	
	//КонецЦикла;
	//Павелко, Задача CRM-284, 11.02.2020 - перенесено в экспортную функцию СписокКомандированныхСотрудников модуля объекта ---
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновитьПредставительскиеРасходы();
	
	ЗаполнитьСтатусыСогласования(); // VOG Ульянов И.В. 27.02.2020 CRM-344
	
	Для каждого Строка из Объект.КомандированныеСотрудники цикл
		Строка.Подразделение = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Строка.Сотрудник,"Подразделение");
		Строка.Должность = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Строка.Сотрудник,"CRM_ДолжностнаяПозиция");
		ТекПодразделение = Строка.Подразделение;
		Пока НЕ ТекПодразделение.ОбособленноеПодразделение Цикл
			Родитель =  вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекПодразделение,"Родитель");
			Если ЗначениеЗаполнено(Родитель) тогда
				ТекПодразделение = Родитель;	
			Иначе
				Прервать;
			КонецЕсли;		
		КонецЦикла;
		Строка.Филиал =  ТекПодразделение;
	КонецЦикла;
	
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СписокЦветов = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьСписокЦветов();
	
	Для каждого Цвет из СписокЦветов цикл
		
		ЭлементОформленияСписокЗадач = УсловноеОформление.Элементы.Добавить();		
		ЭлементОтбора = ЭлементОформленияСписокЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗадач.ЦветИндекс");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Цвет.Ключ;
		ЭлементОтбора.Использование = Истина;				
		ЭлементОформленияСписокЗадач.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет.Значение.Цвет);
		
		ПолеОформления = ЭлементОформленияСписокЗадач.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ОткрытьЗадачу");
		ПолеОформления.Использование = Истина;		
		
		ЭлементОформленияЛегенда = Легенда.УсловноеОформление.Элементы.Добавить();		
		ЭлементОтбора = ЭлементОформленияЛегенда.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦветИндекс");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Цвет.Ключ;
		ЭлементОтбора.Использование = Истина;				
		ЭлементОформленияЛегенда.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет.Значение.Цвет);		
		
		ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Задачи.ЦветИндекс");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Цвет.Ключ;
		ЭлементОтбора.Использование = Истина;				
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет.Значение.Цвет);		
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ЗадачиКартинка");
		ПолеОформления.Использование = Истина;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияОСозданииНовогоСобытияПланировщика", ЭтаФорма, Новый Структура("Начало, Конец", Начало, Конец));
	
	ОткрытьФорму("Документ.вогКомандировка.Форма.ФормаРедактированияПеремещения",,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	//ПоказатьВводСтроки(Оповещение, "Введите название перемещения или перерыва в работе", "Введите название ...", 100); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОСозданииНовогоСобытияПланировщика(Результат, Параметры) Экспорт //Павелко, Таск 000000936, 28.11.2019
	
	Если Результат<>Неопределено
		И Не Результат = КодВозвратаДиалога.Отмена Тогда // ++ VOG Солодов В.В. 17.09.2020 // Добавил условие
		
		СоздатьЭлементПланировщика(Параметры.Начало, Параметры.Конец, Результат, Результат.Описание, ПользователиКлиентСервер.ТекущийПользователь(), , Истина);
		
		ЭтаФорма.Модифицированность = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьВыбор(Элемент, СтандартнаяОбработка)
	
	Если Элемент.ВыделенныеЭлементы[0].Значение.Значение <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;		
		//КалендарьРедактирование(Элемент, СтандартнаяОбработка);
		ПоказатьЗначение(,Элемент.ВыделенныеЭлементы[0].Значение.Значение);
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьРедактирование(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	СтруктураСтроки = ПолучитьСтруктуруСтрокаЗадачи(Элемент.ВыделенныеЭлементы[0].Значение.Значение);	
		
	Если СтруктураСтроки <> Неопределено тогда
			
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СтруктураСтроки",СтруктураСтроки);			
			
		ОписаниеОповещения = Новый ОписаниеОповещения("КалендарьВыборЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.вогКомандировка.Форма.ФормаВыбораЗадачи",СтруктураОтбора,ЭтотОбъект,,,, ОписаниеОповещения);	
			
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруСтрокаЗадачи(Задача)
	
	СтруктураВозврата = Неопределено;
	
	МассивСтрок = Объект.Задачи.НайтиСтроки(Новый Структура("Задача", Задача));
	
	Если МассивСтрок.Количество() > 0 тогда
		СтруктураВозврата = Новый Структура;
		
		Для Каждого Колонка из Объект.Задачи.Выгрузить().Колонки цикл
			СтруктураВозврата.Вставить(Колонка.Имя);	
		КонецЦикла;	
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, МассивСтрок[0]);
		
	КонецЕсли;	
	
	Возврат СтруктураВозврата;
	
КонецФункции	

&НаКлиенте
Процедура КалендарьВыборЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ЭтаФорма.Модифицированность = Истина;
		
		МассивСтрок = Объект.Задачи.НайтиСтроки(Новый Структура("Задача", РезультатВыбора.Задача));
		
		Если МассивСтрок.Количество() > 0 тогда
			
			ЗаполнитьЗначенияСвойств(МассивСтрок[0], РезультатВыбора);
			ТекущиеДанные =    МассивСтрок[0];
			СоздатьЭлементПланировщика(НачалоЧаса(ТекущиеДанные.ВремяНачала), НачалоЧаса(ТекущиеДанные.ВремяОкончания), ТекущиеДанные.Задача, ТекущиеДанные.Тема, ТекущиеДанные.Сотрудник, ТекущиеДанные,,ТекущиеДанные.ЦветИндекс);

		КонецЕсли;	
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	ЭтаФорма.Модифицированность = Истина;
	
	Для каждого Стр из Элемент.ВыделенныеЭлементы цикл
		
		
		// ++ VOG Солодов В.В. 03.02.2020 CRM-212
		Для Каждого ЭлементКалендаря Из Календарь.Элементы Цикл
			Если стр.Значение.Сотрудник = ЭлементКалендаря.Значение.Сотрудник тогда
				Если Не ЭлементКалендаря = Стр
					И ОпределитьПересечениеИнтерваловКалендаря(Стр, ЭлементКалендаря) Тогда
					
					ОчиститьСообщения();
					
					ТекстСообщения = НСтр("ru = 'Невозможно добавить несколько задач в одном интервале.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					ОтменаРедактирования = Истина;
					
					Возврат;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		// -- VOG Солодов В.В. 03.02.2020
		
		// ++ VOG Солодов В.В. 21.09.2020 
		Если ТипЗнч(Стр.Значение.Значение) = Тип("Структура") Тогда
			СтруктураОтбора = Стр.Значение.Значение;
		Иначе
			СтруктураОтбора = Новый Структура("Задача", Стр.Значение.Значение);
		КонецЕсли;
		// До изменения
		//СтруктураОтбора = Новый Структура("Задача", Стр.Значение.Значение); //Павелко, Таск 000000936, 28.11.2019
		// -- VOG Солодов В.В. 21.09.2020 
		СтрокиТаблицы = Объект.Задачи.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаТаблицы из СтрокиТаблицы цикл
						
			Если ПользователиКлиентСервер.ТекущийПользователь() <> СтрокаТаблицы.Запланировал тогда
				Сообщить("Редактировать задачу/мероприятия из списка может сотрудник, добавивший её ("+СокрЛП(СтрокаТаблицы.Запланировал)+")");
				ОтменаРедактирования = Истина;
				Возврат;
			КонецЕсли;	
			
			СтрокаТаблицы.ВремяНачала = Стр.Начало;
			СтрокаТаблицы.ВремяОкончания = Стр.Конец;
			СтрокаТаблицы.Продолжительность = Окр((СтрокаТаблицы.ВремяОкончания - СтрокаТаблицы.ВремяНачала) / 3600, 2);		
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
		СтандартнаяОбработка = Ложь;		
	Если Элемент.ВыделенныеЭлементы[0].Значение.Значение <> Неопределено Тогда
		//КалендарьРедактирование(Элемент, СтандартнаяОбработка);
		Если Не Элемент.ВыделенныеЭлементы[0].Значение.ЭтоДекорация тогда 
			
			// ++ VOG Солодов В.В. 15.09.2020 
			ЗначениеПланировщика = Элемент.ВыделенныеЭлементы[0].Значение.Значение;
			
			Если ТипЗнч(ЗначениеПланировщика) = Тип("Структура") Тогда
				ПоказатьЗначение(Неопределено, ЗначениеПланировщика.Задача);
			Иначе
				ПоказатьЗначение(Неопределено, ЗначениеПланировщика);
			КонецЕсли;
				
			// До изменения
			//ПоказатьЗначение(,Элемент.ВыделенныеЭлементы[0].Значение.Значение);
			// -- VOG Солодов В.В. 15.09.2020 
		Иначе
			ПараметрыФ = Новый Структура;
			ПараметрыФ.Вставить("Описание",Элемент.ВыделенныеЭлементы[0].Значение.Значение);
			ПараметрыФ.Вставить("ТипПеремещения",Элемент.ВыделенныеЭлементы[0].Значение.ТипПеремещения);
			ПараметрыФ.Вставить("Сотрудник",Элемент.ВыделенныеЭлементы[0].Значение.Сотрудник);
			Оповещение = Новый ОписаниеОповещения("РедактированиеПеремещенияПриЗавершении",ЭтаФорма,Элемент.ВыделенныеЭлементы[0]);
			ОткрытьФорму("Документ.вогКомандировка.Форма.ФормаРедактированияПеремещения",ПараметрыФ,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеПеремещенияПриЗавершении(Результат,Параметры) экспорт
	
	Если ТипЗнч(Результат)=Тип("Структура") тогда
		Параметры.Текст = Результат.Описание+","+Результат.ТипПеремещения+","+Параметры.Значение.Сотрудник;
		Параметры.Подсказка = Результат.Описание+","+Результат.ТипПеремещения+","+Параметры.Значение.Сотрудник;
		Параметры.Значение.Значение = Результат.Описание;
		Параметры.Значение.ТипПеремещения = Результат.ТипПеремещения;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗадачиВремяНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПодбора.ТекущиеДанные;
	СоздатьЭлементПланировщика(НачалоЧаса(ТекущиеДанные.ВремяНачала), НачалоЧаса(ТекущиеДанные.ВремяОкончания), ТекущиеДанные.Задача, ТекущиеДанные.Тема, ТекущиеДанные.Сотрудник, ТекущиеДанные,,Элемент.ТекущиеДанные.ЦветИндекс); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиВремяОкончанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПодбора.ТекущиеДанные;
	СоздатьЭлементПланировщика(НачалоЧаса(ТекущиеДанные.ВремяНачала), НачалоЧаса(ТекущиеДанные.ВремяОкончания), ТекущиеДанные.Задача, ТекущиеДанные.Тема, ТекущиеДанные.Сотрудник, ТекущиеДанные,,Элемент.ТекущиеДанные.ЦветИндекс);
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриИзменении(Элемент)
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Легенда(Команда)
	
	ЭтаФОрма.Элементы.ГруппаЛегенда.Видимость = НЕ ЭтаФОрма.Элементы.ГруппаЛегенда.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьОткрытьКонтекстноеМеню(Команда)
	
	// ++ VOG Солодов В.В. 14.09.2020
	Если Элементы.Календарь.ВыделенныеЭлементы.Количество() > 0 Тогда
		
		ЗначениеПланировщика = Элементы.Календарь.ВыделенныеЭлементы[0].Значение.Значение;
		
		Если Не ЗначениеПланировщика = Неопределено Тогда
			
			Если ТипЗнч(ЗначениеПланировщика) = Тип("Структура") Тогда
				ПоказатьЗначение(Неопределено, ЗначениеПланировщика.Задача);
			Иначе
				ПоказатьЗначение(Неопределено, ЗначениеПланировщика);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	// До изменения
	//Попытка		
	//	Если ЭтаФорма.ТекущийЭлемент.ВыделенныеЭлементы[0].Значение.Значение <> Неопределено тогда
	//		
	//		ПоказатьЗначение(, ЭтаФорма.ТекущийЭлемент.ВыделенныеЭлементы[0].Значение.Значение);
	//		
	//	КонецЕсли;		
	//Исключение
	//	
	//КонецПопытки;
	// -- VOG Солодов В.В. 14.09.2020
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	Если НовыйЭлемент = Ложь И Элемент.ВыделенныеЭлементы[0].Значение.Значение <> Неопределено И НЕ Элемент.ВыделенныеЭлементы[0].Значение.ЭтоДекорация тогда
		КалендарьРедактирование(Элемент, СтандартнаяОбработка)
	ИначеЕсли НовыйЭлемент = Ложь И Элемент.ВыделенныеЭлементы[0].Значение.ЭтоДекорация тогда
		СтандартнаяОбработка = Ложь;	
		ПараметрыФ = Новый Структура;
		ПараметрыФ.Вставить("Описание",Элемент.ВыделенныеЭлементы[0].Значение.Значение);
		ПараметрыФ.Вставить("ТипПеремещения",Элемент.ВыделенныеЭлементы[0].Значение.ТипПеремещения);
		ПараметрыФ.Вставить("Сотрудник",Элемент.ВыделенныеЭлементы[0].Значение.Сотрудник);
		Оповещение = Новый ОписаниеОповещения("РедактированиеПеремещенияПриЗавершении",ЭтаФорма,Элемент.ВыделенныеЭлементы[0]);
		ОткрытьФорму("Документ.вогКомандировка.Форма.ФормаРедактированияПеремещения",ПараметрыФ,ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПередУдалением(Элемент, Отказ)
	
	ЭтаФорма.Модифицированность = Истина;
	
	Если Элемент.ВыделенныеЭлементы[0].Значение.Значение <> Неопределено тогда
		
		// ++ VOG Солодов В.В. 14.09.2020
		ЭтоПоручение = Ложь;
		ЗначениеПланировщика = Элемент.ВыделенныеЭлементы[0].Значение.Значение;
		
		ПараметрыОтбораСтрок = Новый Структура;
		Если ТипЗнч(ЗначениеПланировщика) = Тип("Структура") Тогда
			ЭтоПоручение = Истина;
			ПараметрыОтбораСтрок.Вставить("Задача", ЗначениеПланировщика.Задача);
		Иначе
			ПараметрыОтбораСтрок.Вставить("Задача", ЗначениеПланировщика);
		КонецЕсли;
		
		МассивСтрок = Объект.Задачи.НайтиСтроки(ПараметрыОтбораСтрок);
			
		// До изменения
		//МассивСтрок = Объект.Задачи.НайтиСтроки(Новый Структура("Задача", Элемент.ВыделенныеЭлементы[0].Значение.Значение));
		// -- VOG Солодов В.В. 14.09.2020
		Для каждого ЭлементМассива из МассивСтрок цикл
			
			Если ПользователиКлиентСервер.ТекущийПользователь() <> ЭлементМассива.Запланировал тогда
				Сообщить("Удалить задачу/мероприятия из списка может сотрудник, добавивший её ("+СокрЛП(ЭлементМассива.Запланировал)+")");
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
			Объект.Задачи.Удалить(ЭлементМассива);
			ОбновитьОтбор();
			
		КонецЦикла;
		
		// ++ VOG Солодов В.В. 14.09.2020 
		Если ЭтоПоручение Тогда
			Отказ = Истина;
			УдалитьЭлементПланировщика(ЗначениеПланировщика.Задача);
			ОчиститьСоисполнителей(); // VOG Солодов В.В. 23.12.2020 CRM-1098
		КонецЕсли;
		// -- VOG Солодов В.В. 14.09.2020 
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПроживаниеПослеУдаления(Элемент)
	
	ПересчитатьСтоимостьДня();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьСписокПодбора(Команда)
	
	Если ЭтаФорма.Элементы.ГруппаПраваяПанель.Видимость = ЛОЖЬ И ЭтаФорма.Элементы.ГруппаЗадачи.Видимость = ЛОЖЬ тогда
		Возврат;
	КонецЕсли;	
		
	
	ЭтаФорма.Элементы.ГруппаСписокЗадач.Видимость = НЕ ЭтаФорма.Элементы.ГруппаСписокЗадач.Видимость;

	Если ЭтаФорма.Элементы.ГруппаСписокЗадач.Видимость = Истина тогда
		ЭтаФорма.Элементы.СвернутьРазвернутьСписокПодбора.ЦветФона = WebЦвета.СветлоСерый;
	Иначе	
		ЭтаФорма.Элементы.СвернутьРазвернутьСписокПодбора.ЦветФона = WebЦвета.Белый;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СвернутьРазвернутьТаблицуЗадач(Команда)	
	
	Если ЭтаФорма.Элементы.ГруппаПраваяПанель.Видимость = ЛОЖЬ И ЭтаФорма.Элементы.ГруппаСписокЗадач.Видимость = ЛОЖЬ тогда
		Возврат;
	КонецЕсли;	
	
	ЭтаФорма.Элементы.ГруппаЗадачи.Видимость = НЕ ЭтаФорма.Элементы.ГруппаЗадачи.Видимость;
	
	Если ЭтаФорма.Элементы.ГруппаЗадачи.Видимость = Истина тогда
		ЭтаФорма.Элементы.СвернутьРазвернутьТаблицуЗадач.ЦветФона = WebЦвета.СветлоСерый;
	Иначе	
		ЭтаФорма.Элементы.СвернутьРазвернутьТаблицуЗадач.ЦветФона = WebЦвета.Белый;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьКалендарь(Команда)
	
	Если ЭтаФорма.Элементы.ГруппаСписокЗадач.Видимость = ЛОЖЬ И ЭтаФорма.Элементы.ГруппаЗадачи.Видимость = ЛОЖЬ тогда
		Возврат;
	КонецЕсли;	
	
	ЭтаФорма.Элементы.ГруппаПраваяПанель.Видимость = НЕ ЭтаФорма.Элементы.ГруппаПраваяПанель.Видимость;
	
	Если ЭтаФорма.Элементы.ГруппаПраваяПанель.Видимость = Истина тогда
		ЭтаФорма.Элементы.СвернутьРазвернутьКалендарь.ЦветФона = WebЦвета.СветлоСерый;
	Иначе	
		ЭтаФорма.Элементы.СвернутьРазвернутьКалендарь.ЦветФона = WebЦвета.Белый;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция	ПроверитьВозможностьОтправитьНаСогласование(СписокЗадач);
	
	УстановитьПривилегированныйРежим(Истина);
	
	массивОшибок = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	вогТорговыеТочки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.вогТорговыеТочки КАК вогТорговыеТочки
	               |ГДЕ
	               |	вогТорговыеТочки.Ссылка В(&Список)
	               |	И вогТорговыеТочки.НаселенныйПункт = ЗНАЧЕНИЕ(Справочник.вогНаселенныеПункты.)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Партнеры.Ссылка
	               |ИЗ
	               |	Справочник.Партнеры КАК Партнеры
	               |ГДЕ
	               |	Партнеры.вогНаселенныйПункт = ЗНАЧЕНИЕ(Справочник.вогНаселенныеПункты.)
	               |	И Партнеры.Ссылка В(&Список)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_Мероприятие.Ссылка
	               |ИЗ
	               |	Документ.CRM_Мероприятие КАК CRM_Мероприятие
	               |ГДЕ
	               |	CRM_Мероприятие.Город = ЗНАЧЕНИЕ(Справочник.вогНаселенныеПункты.)
	               |	И CRM_Мероприятие.Помещение = &Помещение
	               |	И CRM_Мероприятие.Ссылка В(&Список)";
	
	
	Запрос.УстановитьПараметр("Помещение",Справочники.CRM_Помещения.НайтиПоНаименованию("Нейтральная территория"));	
	Запрос.УстановитьПараметр("Список",СписокЗадач);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		массивОшибок.Добавить(Строка(Выборка.Ссылка));	
	КонецЦикла;
	
	Возврат массивОшибок;
	
КонецФункции

&НаКлиенте
Процедура Согласовать(Команда)
	
	массивЗадач = Новый Массив;
	Для каждого задача из Объект.Задачи цикл
		Если ЗначениеЗаполнено(Задача.ТорговаяТочка) тогда
			массивЗадач.Добавить(Задача.ТорговаяТочка);	
		ИначеЕсли ТипЗнч(Задача.Задача) <> Тип("ДокументСсылка.CRM_Мероприятие") И ЗначениеЗаполнено(Задача.Клиент) тогда
			массивЗадач.Добавить(Задача.Клиент);
		ИначеЕсли ТипЗнч(Задача.Задача) = Тип("ДокументСсылка.CRM_Мероприятие") И ЗначениеЗаполнено(Задача.Клиент) тогда
			Помещение =  ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Задача.Задача,"Помещение");
			Если Нрег(Помещение) <> "нейтральная территория" тогда
				массивЗадач.Добавить(Задача.Клиент);
			КонецЕсли;
		КонецЕсли;
		массивЗадач.Добавить(Задача.Задача);
	КонецЦикла;
	
	//массивОшибок = ПроверитьВозможностьОтправитьНаСогласование(массивЗадач);
	//Если массивОшибок.Количество() <> 0 тогда
	//	Сообщить("Не указан город в следующих данных:");
	//	Для каждого Ошибка из массивОшибок цикл
	//		Сообщить(Ошибка);	
	//	КонецЦикла;
	//	Возврат;	
	//КонецЕсли;
	ЕстьОшибка=Ложь;
	Для каждого Строка из Объект.Задачи цикл
		Если Не ЗначениеЗаполнено(Строка.Город) тогда
			Сообщить("В строке № " + Строка.НомерСтроки + "не указан город.");
			ЕстьОшибка = Истина;	
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибка тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Задачи.Количество()=0 тогда
		Сообщить("Нет подобранных задач");
		Возврат;
	КонецЕсли;
	
	Если Модифицированность тогда
		Сообщить("Предварительно нужно записать документ");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Статус) тогда
		
		// +++ VOG Кулаков П.Л. 31.07.2020 CRM-806
		ТребуетсяСогласовать = Ложь;
		Для Каждого Строка Из Объект.КомандированныеСотрудники Цикл
			Если Строка.ТребуетсяСогласовать Тогда
				ТребуетсяСогласовать = Истина;
			КонецЕсли;
		КонецЦикла;
		// --- VOG Кулаков П.Л.
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.вогСтатусыКомандировок.Создан") 
		// +++ VOG Кулаков П.Л. 31.07.2020 CRM-806
			ИЛИ ТребуетсяСогласовать Тогда
		// --- VOG Кулаков П.Л.
			// ++ VOG Солодов В.В. 12.02.2020 CRM-330
			Объект.Статус	= ПредопределенноеЗначение("Перечисление.вогСтатусыКомандировок.НаСогласовании");
			// До изменения
			//Объект.Статус	= ПредопределенноеЗначение("Перечисление.вогСтатусыКомандировок.ВРаботе");
			// -- VOG Солодов В.В. 12.02.2020
			// ++ VOG Солодов В.В. 07.05.2020 CRM-624
			Если Не ПроверитьЗаполнение() Тогда
				Объект.Статус = ПредопределенноеЗначение("Перечисление.вогСтатусыКомандировок.Создан");
				Возврат;
			КонецЕсли;
			// -- VOG Солодов В.В. 07.05.2020
			// +++ VOG Кулаков П.Л. 30.07.2020 CRM-806
			ПараметрыЗаписи = Новый Структура("ЗапускБизнесПроцесса",Истина);
			
			ПроверитьНеобходимостьСозданияБизнесПроцесса();
			
			Записать(ПараметрыЗаписи);
			// --- VOG Кулаков П.Л.
		Иначе
			// +++ VOG Кулаков П.Л. 31.07.2020 CRM-806
			Сообщить("Отправить на согласование можно только документ в статусе ""Создан"", или если требуется согласование задач.");
			// --- VOG Кулаков П.Л.
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Элементы.ФормаСогласовать.Видимость = Ложь;	
	
	// +++ VOG Кулаков П.Л. 01.09.2020 CRM-885
	Элементы.ФормаСогласоватьИзменение.Видимость = Ложь;
	УстановитьДоступностьДат();
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПроживаниеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "РасходыПроживаниеГород" тогда
		
		Поле.ИсторияВыбораПриВводе 	= ИсторияВыбораПриВводе.НеИспользовать;
		Поле.СписокВыбора.Очистить();		
		
		Для каждого Стр из Объект.Задачи цикл
			Если Стр.Город <> ПредопределенноеЗначение("Справочник.вогНаселенныеПункты.ПустаяСсылка") тогда
				Если Поле.СписокВыбора.НайтиПоЗначению(Стр.Город) = Неопределено тогда
					Поле.СписокВыбора.Добавить(Стр.Город);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура РасходыПроездВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "РасходыПроездГородПрибытия" ИЛИ Поле.Имя = "РасходыГород" тогда
		
		Поле.ИсторияВыбораПриВводе 	= ИсторияВыбораПриВводе.НеИспользовать;
		Поле.СписокВыбора.Очистить();		
		
		Для каждого Стр из Объект.Задачи цикл
			Если Стр.Город <> ПредопределенноеЗначение("Справочник.вогНаселенныеПункты.ПустаяСсылка") тогда
				Если Поле.СписокВыбора.НайтиПоЗначению(Стр.Город) = Неопределено тогда
					Поле.СписокВыбора.Добавить(Стр.Город);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПроживаниеПриАктивизацииПоля(Элемент)
	
	Поле = Элемент.ТекущийЭлемент;
	
	Если Поле.Имя = "РасходыПроживаниеГород" тогда
		
		Поле.ИсторияВыбораПриВводе 	= ИсторияВыбораПриВводе.НеИспользовать;
		Поле.СписокВыбора.Очистить();		
		
		Для каждого Стр из Объект.Задачи цикл
			Если Стр.Город <> ПредопределенноеЗначение("Справочник.вогНаселенныеПункты.ПустаяСсылка") тогда
				Если Поле.СписокВыбора.НайтиПоЗначению(Стр.Город) = Неопределено тогда
					Поле.СписокВыбора.Добавить(Стр.Город);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПроездПриАктивизацииПоля(Элемент)
	
	Поле = Элемент.ТекущийЭлемент;
	
	Если Поле.Имя = "РасходыПроездГородПрибытия" ИЛИ Поле.Имя = "РасходыГород" тогда
		
		Поле.ИсторияВыбораПриВводе 	= ИсторияВыбораПриВводе.НеИспользовать;
		Поле.СписокВыбора.Очистить();		
		
		Для каждого Стр из Объект.Задачи цикл
			Если Стр.Город <> ПредопределенноеЗначение("Справочник.вогНаселенныеПункты.ПустаяСсылка") тогда
				Если Поле.СписокВыбора.НайтиПоЗначению(Стр.Город) = Неопределено тогда
					Поле.СписокВыбора.Добавить(Стр.Город);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжительностьПриИзменении(Элемент)
	
	Если Объект.Продолжительность = 0 тогда
		Объект.Продолжительность = 1;
	КонецЕсли;
	
	// +++ VOG Кулаков П.Л. 19.03.2020 CRM-463
	Для Каждого Строка Из Объект.КомандированныеСотрудники Цикл
		Если Строка.КоличествоДней > Объект.Продолжительность Тогда
			Строка.КоличествоДней = Объект.Продолжительность;
			Строка.Сумма = РассчитатьСуммуКомандировочных(Строка.КоличествоДней,Строка.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	// --- VOG Кулаков П.Л.
	
	ПересчитатьОбщуюПродолжительностьКомандировки(Объект);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьИзмененияПериодаКомандировки()
	
	Для Каждого Событие Из Календарь.Элементы Цикл
		Если Объект.ВремяНачала> Событие.Начало или
			КонецДня(Объект.ВремяОкончания) < Событие.Начало или
			Объект.ВремяНачала > Событие.Конец или
			КонецДня(Объект.ВремяОкончания)< Событие.Конец тогда
			Возврат Ложь;
		КонецЕсли;			
	КонецЦикла;	

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВремяНачалаПриИзменении(Элемент)
	
	Если НЕ ПроверитьВозможностьИзмененияПериодаКомандировки() или Не ЗначениеЗаполнено(Объект.ВремяНачала) тогда
		Сообщить("Есть задачи которые не попадают в новый период");	
		Объект.ВремяНачала = ПредыдущаяДатаНачала;	
	КонецЕсли;
	Если Объект.ВремяОкончания<Объект.ВремяНачала тогда
		 Объект.ВремяОкончания = КонецДня(Объект.ВремяНачала);
	КонецЕсли;
	ПересчитатьОбщуюПродолжительностьКомандировки(Объект);
	ПредыдущаяДатаНачала = Объект.ВремяНачала;
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОбщуюПродолжительностьКомандировки(ОбъектПересчета)
		
	Если ОбъектПересчета.ВремяНачала <> '00010101' тогда
		
		ОбъектПересчета.ВремяОкончания = ОбъектПересчета.ВремяНачала + (ОбъектПересчета.Продолжительность - 1) * 3600 * 24;
		
		ПересчитатьРасходы();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы_ТаблицаЗадачи

// ++ VOG Солодов В.В. 10.11.2020 CRM-1026
&НаКлиенте
Процедура ТаблицаЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаЗадачи.ТекущиеДанные;
	ПоказатьЗначение(Неопределено, ТекущиеДанные.Задача);
	
КонецПроцедуры // -- VOG Солодов В.В. 10.11.2020 CRM-1026

#КонецОбласти
//Кайдашов CRM-240 START	

// ++ VOG Солодов В.В. 24.06.2021 DEV-463
#Область ОбработчикиСобытийТаблицыФормы_КомандированныеСотрудники

&НаКлиенте
Процедура КомандированныеСотрудникиПередУдалением(Элемент, Отказ)
	
	УдалениеСтроки = Истина;
	
КонецПроцедуры

#КонецОбласти
// -- VOG Солодов В.В. 24.06.2021 DEV-463

&НаСервереБезКонтекста
Функция ПолучитьСпискиОписаниеРезультат(Задача)
	УстановитьПривилегированныйРежим(Истина);
	структураОтвет = Новый Структура();
	структураОтвет.Вставить("ТипДанных",0);
	структураОтвет.Вставить("Описание",Новый Массив);
	структураОтвет.Вставить("Результат",Новый Массив);
	
	Если Тип("ЗадачаСсылка.ЗадачаИсполнителя") = ТипЗнч(Задача) тогда
		
		структураОтвет.ТипДанных = 1;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		               |	ЗадачаИсполнителя.Дата КАК Дата,
		               |	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс,
		               |	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
		               |	ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
		               |	ЗадачаИсполнителя.Выполнена КАК Выполнена,
		               |	ЗадачаИсполнителя.БизнесПроцесс.Описание КАК Описание
		               |ИЗ
		               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		               |ГДЕ
		               |	ЗадачаИсполнителя.Ссылка = &Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Дата УБЫВ";
		Запрос.УстановитьПараметр("Ссылка",Задача);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() тогда
			структураОписание = Новый Структура;
			структураОписание.Вставить("Описание",Выборка.Описание);
			структураОписание.Вставить("Задача",Выборка.Ссылка);
			структураОписание.Вставить("Выполнена",Выборка.Выполнена);
			структураОтвет.Описание.Добавить(структураОписание);
			структураРезультат = Новый Структура;
			структураРезультат.Вставить("Результат",Выборка.Результатвыполнения);
			структураРезультат.Вставить("Задача",Выборка.Ссылка);
			структураРезультат.Вставить("Выполнена",Выборка.Выполнена);
			структураОтвет.Результат.Добавить(структураРезультат);
		КонецЕсли;
		
	ИначеЕсли Тип("ДокументСсылка.CRM_Мероприятие") = ТипЗнч(Задача) тогда
		
		структураОтвет.ТипДанных = 2;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ  Разрешенные
		               |	CRM_МероприятиевогПрограмма.НомерСтроки КАК НомерСтроки,
		               |	CRM_МероприятиевогПрограмма.Исполнитель КАК Исполнитель,
		               |	CRM_МероприятиевогПрограмма.Содержание КАК Описание,
		               |	CRM_МероприятиевогПрограмма.ТребуетПринятияРешения КАК ТребуетПринятияРешения,
		               |	CRM_МероприятиевогПрограмма.ОтКлиента КАК ОтКлиента
		               |ИЗ
		               |	Документ.CRM_Мероприятие.вогПрограмма КАК CRM_МероприятиевогПрограмма
		               |ГДЕ
		               |	CRM_МероприятиевогПрограмма.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	CRM_МероприятиевогПротокол.НомерСтроки КАК НомерСтроки,
		               |	CRM_МероприятиевогПротокол.НомерПунктаПрограммы КАК НомерПунктаПрограммы,
		               |	CRM_МероприятиевогПротокол.ПунктПротокола КАК ПунктПротокола,
		               |	CRM_МероприятиевогПротокол.ПунктПротокола.Решили КАК Результат,
		               |	CRM_МероприятиевогПротокол.ПунктПротокола.Ответственный КАК Ответственный
		               |ИЗ
		               |	Документ.CRM_Мероприятие.вогПротокол КАК CRM_МероприятиевогПротокол
		               |ГДЕ
		               |	CRM_МероприятиевогПротокол.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",Задача);
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаОписание = Результат[0].Выбрать();
		ВыборкаРезультат = Результат[1].Выбрать(); 
		структураОписание = Новый Структура;
		структураОписание.Вставить("Описание","Не по повестке");
		структураОписание.Вставить("НомерСтроки",0);
		структураОписание.Вставить("ТребуетПринятияРешения",Истина);
		структураОтвет.Описание.Добавить(структураОписание);
		
		Пока ВыборкаОписание.Следующий() цикл
			
			структураОписание = Новый Структура;
			структураОписание.Вставить("Описание",ВыборкаОписание.Описание);
			структураОписание.Вставить("НомерСтроки",ВыборкаОписание.НомерСтроки);
			структураОписание.Вставить("Исполнитель",ВыборкаОписание.Исполнитель);
			структураОписание.Вставить("ТребуетПринятияРешения",ВыборкаОписание.ТребуетПринятияРешения);
			структураОписание.Вставить("ОтКлиента",ВыборкаОписание.ОтКлиента);
			структураОтвет.Описание.Добавить(структураОписание);
			
		КонецЦикла;
		
		Пока ВыборкаРезультат.Следующий() цикл
			
			структураРезультат = Новый Структура;
			структураРезультат.Вставить("НомерСтроки",ВыборкаРезультат.НомерСтроки);
			структураРезультат.Вставить("НомерПунктаПрограммы",ВыборкаРезультат.НомерПунктаПрограммы);
			структураРезультат.Вставить("ПунктПротокола",ВыборкаРезультат.ПунктПротокола);
			структураРезультат.Вставить("Результат",ВыборкаРезультат.Результат);
			структураРезультат.Вставить("Ответственный",ВыборкаРезультат.Ответственный);
			структураОтвет.Результат.Добавить(структураРезультат);
			
		КонецЦикла;
		
	КонецЕсли;
	Возврат структураОтвет;
	
КонецФункции

&НаКлиенте
Процедура СписокЗадачРезультатыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокЗадачРезультаты.ТекущиеДанные=Неопределено тогда
		Возврат;	
	КонецЕсли;
	
	СпискиДанных = ПолучитьСпискиОписаниеРезультат(Элементы.СписокЗадачРезультаты.ТекущиеДанные.Задача);
	ОписанияРезультаты.Очистить();
	РезультатыРезультаты.Очистить();
	Для каждого Данные из СпискиДанных.Описание цикл
		НоваяСтрока = ОписанияРезультаты.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Данные);	
		Если СпискиДанных.ТипДанных = 1 тогда
			ПолеОписанияРезультата = НоваяСтрока.Описание;
		КонецЕсли;
	КонецЦикла;
	Для каждого Данные из СпискиДанных.Результат цикл
		НоваяСтрока = РезультатыРезультаты.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Данные);	
		Если СпискиДанных.ТипДанных = 1 тогда
			ПолеРедактированияРезультата = НоваяСтрока.Результат;
		КонецЕсли;
	КонецЦикла;
	Элементы.ЗаписатьРезультаты.Доступность = Ложь;
	Если СпискиДанных.ТипДанных = 1 тогда
		Элементы.ОписанияРезультаты.Видимость = Ложь;
		Элементы.РезультатыРезультаты.Видимость = Ложь;
		Элементы.ПолеОписанияРезультата.Видимость = Истина;
		Элементы.ПолеРедактированияРезультата.Видимость = Истина;
		Элементы.ПолеРедактированияРезультата.Доступность = Ложь;
		Элементы.ГруппаКомандыПоляРедактированияРезультата.Видимость = Истина;	
	ИначеЕсли СпискиДанных.ТипДанных = 2 тогда
		Элементы.ОписанияРезультаты.Видимость = Истина;
		Элементы.РезультатыРезультаты.Видимость = Истина;
		Элементы.ПолеОписанияРезультата.Видимость = Ложь;
		Элементы.ПолеРедактированияРезультата.Видимость = Ложь;
		Элементы.ГруппаКомандыПоляРедактированияРезультата.Видимость = Ложь;	
	Иначе
		Элементы.ОписанияРезультаты.Видимость = Ложь;
		Элементы.РезультатыРезультаты.Видимость = Ложь;
		Элементы.ПолеОписанияРезультата.Видимость = Истина;
		Элементы.ПолеРедактированияРезультата.Видимость = Истина;
		Элементы.ПолеРедактированияРезультата.Доступность = Ложь;
		Элементы.ГруппаКомандыПоляРедактированияРезультата.Видимость = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписанияРезультатыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ОписанияРезультаты.ТекущиеДанные <> Неопределено 
		И НЕ ЗначениеЗаполнено(Элементы.ОписанияРезультаты.ТекущиеДанные.Задача) тогда
			структураОтбора = Новый Структура;
			структураОтбора.Вставить("НомерПунктаПрограммы",СокрЛП(Элементы.ОписанияРезультаты.ТекущиеДанные.НомерСтроки));
			Элементы.РезультатыРезультаты.ОтборСтрок = Новый ФиксированнаяСтруктура(структураОтбора);
			ПолеОписанияРезультата = Элементы.ОписанияРезультаты.ТекущиеДанные.Описание;
	Иначе
		Элементы.РезультатыРезультаты.ОтборСтрок = Неопределено;
	КонецЕсли;
	Элементы.ПолеРедактированияРезультата.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатыРезультатыПриАктивизацииПоля(Элемент)
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПротоколМероприятияНаСервере(СсылкаНаМероприятие)
	
	вогУправлениеМероприятиямиВызовСервера.ЗаполнитьПротокол(СсылкаНаМероприятие);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	вогПротоколыМероприятий.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.вогПротоколыМероприятий КАК вогПротоколыМероприятий
	               |ГДЕ
	               |	вогПротоколыМероприятий.Мероприятие = &Мероприятие
	               |	И вогПротоколыМероприятий.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.)";
	Запрос.УстановитьПараметр("Мероприятие",СсылкаНаМероприятие);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		П = Выборка.Ссылка.ПолучитьОбъект();
		П.Ответственный = Пользователи.ТекущийПользователь();
		П.Записать();
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПротоколМероприятия(Команда)
	
	Если Элементы.ОписанияРезультаты.ТекущиеДанные<>Неопределено тогда 	
		ЗаполнитьПротоколМероприятияНаСервере(Элементы.СписокЗадачРезультаты.ТекущиеДанные.Задача);
		СписокЗадачРезультатыПриАктивизацииСтроки(Элементы.СписокЗадачРезультаты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьПунктПротоколаНаСервере(Документ,НомерПункта)
	
	НачатьТранзакцию();
	Попытка
		новыйПунктПротокола = Справочники.вогПротоколыМероприятий.СоздатьЭлемент();
		новыйПунктПротокола.Мероприятие = Документ;
		новыйПунктПротокола.НомерПунктаПрограммы = НомерПункта;
		новыйПунктПротокола.Ответственный = Пользователи.ТекущийПользователь();
		новыйПунктПротокола.Записать();
		ДокОб = Документ.ПолучитьОбъект(); 
		СтрокаДокумента = ДокОб.вогПротокол.Добавить();
		СтрокаДокумента.НомерПунктаПрограммы = НомерПункта;
		СтрокаДокумента.ПунктПротокола = новыйПунктПротокола.Ссылка;
		ДокОб.Записать();
		нСтр = РезультатыРезультаты.Добавить();
		нСтр.НомерСтроки = СтрокаДокумента.НомерСтроки;
		нСтр.НомерПунктаПрограммы = СтрокаДокумента.НомерПунктаПрограммы;
		нСтр.ПунктПротокола = новыйПунктПротокола.Ссылка; 
		нСтр.Результат = "";
		нСтр.Ответственный = новыйПунктПротокола.Ответственный; 
		
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Неопределено;	
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	Возврат новыйПунктПротокола.Ссылка;
КонецФункции

&НаКлиенте
Процедура ДобавитьПунктПротокола(Команда)
	
	Если Элементы.ОписанияРезультаты.ТекущиеДанные<>Неопределено тогда 	
		Пункт = ДобавитьПунктПротоколаНаСервере(Элементы.СписокЗадачРезультаты.ТекущиеДанные.Задача,Элементы.ОписанияРезультаты.ТекущиеДанные.НомерСтроки);
		Если Пункт<>Неопределено тогда
			ПараметрыФормы = Новый Структура("Ключ", Пункт);
			ПараметрыФормы.Вставить("ДокументМероприятие", Элементы.СписокЗадачРезультаты.ТекущиеДанные.Задача);
			ОткрытьФорму("Справочник.вогПротоколыМероприятий.Форма.ФормаЭлементаИзДокумента" , ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеРедактированияРезультатаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Элементы.ЗаписатьРезультаты.Доступность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьРезультатыНаСервере(Задача,Результат,ПунктПротокола = Неопределено)
	НачатьТранзакцию();
	Попытка
		Если ТипЗнч(Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") тогда
			ТекущийПользователь = Пользователи.ТекущийПользователь();
			ОбъектЗадача = Задача.ПолучитьОбъект();
			Если НЕ ОбъектЗадача.ПринятаКИсполнению тогда
				ОбъектЗадача.ПринятаКИсполнению = Истина;
				ОбъектЗадача.ДатаПринятияКИсполнению = ТекущаяДата();
				ОбъектЗадача.Исполнитель = ТекущийПользователь;
				ДатаПринятияКИсполнениюСтрокой = Формат(ОбъектЗадача.ДатаПринятияКИсполнению,"ДЛФ=DD");
				ОбъектЗадача.CRM_ПоследнееДействиеСтрокой = ДатаПринятияКИсполнениюСтрокой+" "+НСтр("ru = 'Принята к исполнению -> '") + Строка(ТекущийПользователь);
				Если НЕ ОбъектЗадача.РезультатВыполнения = "" Тогда
					ОбъектЗадача.РезультатВыполнения = "
					|"+ДатаПринятияКИсполнениюСтрокой+" "+НСтр("ru = 'Принята к исполнению -> '") + Строка(ТекущийПользователь) + "
					|
					|" + ОбъектЗадача.РезультатВыполнения;
				Иначе
					ОбъектЗадача.РезультатВыполнения = ДатаПринятияКИсполнениюСтрокой +" "+ НСтр("ru = 'Принята к исполнению -> '") + Строка(ТекущийПользователь);
				КонецЕсли;
				CRM_БизнесПроцессыСервер.ЗафиксироватьИсполнителяЭтапаПоручения(Задача,ТекущийПользователь);
			КонецЕсли;
			ОбъектЗадача.РезультатВыполнения = ОбъектЗадача.РезультатВыполнения+Символы.ВК + Символы.ПС+ Результат;
			ОбъектЗадача.Записать();
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();	
		возврат;
	КонецПопытки;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРезультаты(Команда)
	
	Если Элементы.СписокЗадачРезультаты.ТекущиеДанные<>Неопределено и НЕ Элементы.СписокЗадачРезультаты.ТекущиеДанные.Выполнена тогда
		ЗаписатьРезультатыНаСервере(Элементы.СписокЗадачРезультаты.ТекущиеДанные.Задача,ПолеРедактированияРезультата);
		СписокЗадачРезультатыПриАктивизацииСтроки(Элементы.СписокЗадачРезультаты);
	КонецЕсли;
	Элементы.ЗаписатьРезультаты.Доступность = Ложь;
	Элементы.ПолеРедактированияРезультата.Доступность = ЛожЬ;
	
КонецПроцедуры
//Кайдашов CRM-240 END

// ++ VOG Солодов В.В. 03.02.2020 CRM-212
&НаКлиенте
Функция ОпределитьПересечениеИнтерваловКалендаря(ДобавляемыйЭлемент, СуществующийЭлемент)
	
	ЕстьПересечение = Ложь;
	
	Если ДобавляемыйЭлемент.Начало < СуществующийЭлемент.Конец
		И ДобавляемыйЭлемент.Конец > СуществующийЭлемент.Начало Тогда
		
		ЕстьПересечение = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьПересечение;
	
КонецФункции // -- VOG Солодов В.В. 03.02.2020

&НаКлиенте
Процедура РезультатыРезультатыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.РезультатыРезультаты.ТекущиеДанные <> Неопределено тогда
		ПолеРедактированияРезультата = Элементы.РезультатыРезультаты.ТекущиеДанные.Результат;
	Иначе	
		ПолеРедактированияРезультата = ""; 	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	Для каждого Строка из Объект.ДанныеПланировщика цикл
		Если ТипЗнч(Строка.Значение) = Тип("ДокументСсылка.CRM_Мероприятие") тогда
			Если Строка.Значение.Дата<>Строка.ДатаНачала или Строка.Значение.ОкончаниеМероприятия<>Строка.ДатаОкончания тогда 
				Попытка
					ДокОб = Строка.Значение.ПолучитьОбъект();
					ДокОб.Дата = Строка.ДатаНачала;
					ДокОб.ОкончаниеМероприятия=Строка.ДатаОкончания;
					ДокОб.Записать();
				Исключение
					Сообщить(ОписаниеОшибки());	
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачРезультатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Элемент.ТекущиеДанные.Задача.Пустая() Тогда		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Задача);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьРезультат(Команда)
	
	Если Элементы.СписокЗадачРезультаты.ТекущиеДанные <> Неопределено тогда
		Если НЕ Элементы.СписокЗадачРезультаты.ТекущиеДанные.Выполнена тогда
			Элементы.ПолеРедактированияРезультата.Доступность = Истина;
			ПолеРедактированияРезультата = "";	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
//Кайдашов CRM-240 START	
	СписокЗадачРезультаты.Очистить();
	Если РольДоступна("ПолныеПрава") или РольДоступна("ЧтениеВсехКомандировок") или РольДоступна("ЧтениеИзменениеКомандировокПоСвоейОрганизации") тогда
		УстановитьПривилегированныйРежим(Истина);
		
		// ++ VOG Солодов В.В. 16.11.2020 CRM-1026
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить(
		"ИдентификаторЗадачи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		ПараметрыОтбораСтрок.Вставить("НаборЗадач", Справочники.вогНаборыТиповыхЗадач.ПустаяСсылка());
		
		НайденныеСтроки = Объект.Задачи.НайтиСтроки(ПараметрыОтбораСтрок);
		// -- VOG Солодов В.В. 16.11.2020 CRM-1026
		
		СписокЗадачРезультаты.Загрузить(Объект.Задачи.Выгрузить(НайденныеСтроки)); // VOG Солодов В.В. 16.11.2020 CRM-1026 // Добавлено НайденныеСтроки
		Для каждого Строка из СписокЗадачРезультаты цикл
			// ++ VOG Солодов В.В. 14.09.2020 
			//Если ЗначениеЗаполнено(Строка.ИдентификаторЗадачи) Тогда
			//	Строка.ЗадачаТекст = ПолучитьДанныеПунктаПоручения(Строка);
			//ИначеЕсли ЗначениеЗаполнено(Строка.НаборЗадач) Тогда
			//	Строка.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(Строка.НаборЗадач);
			//Иначе
				Строка.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(Строка.Задача);
			//КонецЕсли;
			// До изменения
			//Строка.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(Строка.Задача);
			// -- VOG Солодов В.В. 14.09.2020
			Строка.КлиентТекст = ПолучитьНазваниеПривилегированныйРежим(Строка.Клиент);	
			Строка.ТорговаяТочкаТекст = ПолучитьНазваниеПривилегированныйРежим(Строка.ТорговаяТочка);	
			Если ТипЗнч(Строка.Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") тогда
				Строка.Картинка = 0;	
			ИначеЕсли ТипЗнч(Строка.Задача) = Тип("ДокументСсылка.CRM_Мероприятие") тогда
				Строка.Картинка = 1;	
			КонецЕсли;
			Если ТипЗнч(Строка.Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") тогда
				Строка.Выполнена = Строка.Задача.Выполнена;
			КонецЕсли;	
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		Для каждого СтрокаЗадач из Объект.Задачи цикл
			
			// ++ VOG Солодов В.В. 16.11.2020 CRM-1026
			Если ЗначениеЗаполнено(СтрокаЗадач.ИдентификаторЗадачи) Или ЗначениеЗаполнено(СтрокаЗадач.НаборЗадач) Тогда
				Продолжить;
			КонецЕсли;
			// -- VOG Солодов В.В. 16.11.2020 CRM-1026
			
			Попытка
				Если ТипЗнч(СтрокаЗадач.Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") тогда
					СтрокаЗадач.Задача.ПолучитьОбъект();
					нСтр = СписокЗадачРезультаты.Добавить();
					ЗаполнитьЗначенияСвойств(нСтр,СтрокаЗадач);	
					нСтр.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(нСтр.Задача);	
					нСтр.КлиентТекст = ПолучитьНазваниеПривилегированныйРежим(нСтр.Клиент);	
					нСтр.ТорговаяТочкаТекст = ПолучитьНазваниеПривилегированныйРежим(нСтр.ТорговаяТочка);
					нСтр.Картинка = 0;
					нСтр.Выполнена = СтрокаЗадач.Задача.Выполнена;
				ИначеЕсли ТипЗнч(СтрокаЗадач.Задача) = Тип("ДокументСсылка.CRM_Мероприятие") тогда
					Если СтрокаЗадач.Задача.Ответственный = Пользователи.ТекущийПользователь() или ПараметрыСеанса.вогПодчиненныеСотрудники.Найти(СтрокаЗадач.Задача.Ответственный)<>Неопределено тогда
						нСтр = СписокЗадачРезультаты.Добавить();
						ЗаполнитьЗначенияСвойств(нСтр,СтрокаЗадач);	
						нСтр.ЗадачаТекст = ПолучитьНазваниеПривилегированныйРежим(нСтр.Задача);	
						нСтр.КлиентТекст = ПолучитьНазваниеПривилегированныйРежим(нСтр.Клиент);	
						нСтр.ТорговаяТочкаТекст = ПолучитьНазваниеПривилегированныйРежим(нСтр.ТорговаяТочка);	
						нСтр.Картинка = 1;
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
//Кайдашов CRM-240 END

	ЗаполнитьСтатусыСогласования(); // VOG Ульянов И.В. 27.02.2020 CRM-344

	Для каждого Строка из Объект.КомандированныеСотрудники цикл
		Строка.Подразделение = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Строка.Сотрудник,"Подразделение");
		Строка.Должность = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Строка.Сотрудник,"CRM_ДолжностнаяПозиция");
		ТекПодразделение = Строка.Подразделение;
		Пока НЕ ТекПодразделение.ОбособленноеПодразделение Цикл
			Родитель =  вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекПодразделение,"Родитель");
			Если ЗначениеЗаполнено(Родитель) тогда
				ТекПодразделение = Родитель;	
			Иначе
				Прервать;
			КонецЕсли;		
		КонецЦикла;
		Строка.Филиал =  ТекПодразделение;
	КонецЦикла;

	

КонецПроцедуры

&НаСервере
Функция ДобавитьПунктПротоколаНеПоПовесткеНаСервере(Документ)
	
	НачатьТранзакцию();
	Попытка
		новыйПунктПротокола = Справочники.вогПротоколыМероприятий.СоздатьЭлемент();
		новыйПунктПротокола.Мероприятие = Документ;
		новыйПунктПротокола.НомерПунктаПрограммы = 0;
		новыйПунктПротокола.Ответственный = Пользователи.ТекущийПользователь();
		новыйПунктПротокола.Записать();
		ДокОб = Документ.ПолучитьОбъект(); 
		СтрокаДокумента = ДокОб.вогПротокол.Добавить();
		СтрокаДокумента.НомерПунктаПрограммы = 0;
		СтрокаДокумента.ПунктПротокола = новыйПунктПротокола.Ссылка;
		ДокОб.Записать();
		нСтр = РезультатыРезультаты.Добавить();
		нСтр.НомерСтроки = СтрокаДокумента.НомерСтроки;
		нСтр.НомерПунктаПрограммы = 0;
		нСтр.ПунктПротокола = новыйПунктПротокола.Ссылка; 
		нСтр.Результат = "";
		нСтр.Ответственный = новыйПунктПротокола.Ответственный; 
		
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	Возврат новыйПунктПротокола.Ссылка;
КонецФункции

&НаКлиенте
Процедура ДобавитьПунктПротоколаНеПоПовестке(Команда)
	Если Элементы.ОписанияРезультаты.ТекущиеДанные<>Неопределено тогда 	
		Пункт = ДобавитьПунктПротоколаНеПоПовесткеНаСервере(Элементы.СписокЗадачРезультаты.ТекущиеДанные.Задача);
		Если Пункт<>Неопределено тогда
			ПараметрыФормы = Новый Структура("Ключ", Пункт);
			ПараметрыФормы.Вставить("ДокументМероприятие", Элементы.СписокЗадачРезультаты.ТекущиеДанные.Задача);
			ОткрытьФорму("Справочник.вогПротоколыМероприятий.Форма.ФормаЭлементаИзДокумента" , ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьПунктПротоколаНаСервере(Документ,ПунктПротокола)
	// Вставить содержимое обработчика.
	НачатьТранзакцию();
	Попытка
		ОбДок = Документ.ПолучитьОбъект();
		стрДок = ОбДок.вогПротокол.Найти(ПунктПротокола); 
		ОбДок.вогПротокол.Удалить(стрДок);
		ОбДок.Записать();
		ОбПротокол = ПунктПротокола.ПолучитьОбъект();
		ОбПротокол.УстановитьПометкуУдаления(Истина);
		ОбПротокол.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
		возврат;
	КонецПопытки;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПунктПротокола(Команда)
	
	Если Элементы.РезультатыРезультаты.ТекущиеДанные<>Неопределено тогда
		УдалитьПунктПротоколаНаСервере(Элементы.СписокЗадачРезультаты.ТекущиеДанные.Задача,Элементы.РезультатыРезультаты.ТекущиеДанные.ПунктПротокола);
		СписокЗадачРезультатыПриАктивизацииСтроки(Элементы.СписокЗадачРезультаты);	
	КонецЕсли;	
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыПунктаПовестки(Документ,НомерСтроки)
	
	СтрокаДокумента = Документ.вогПрограмма.Найти(НомерСтроки);
	СтруктураОтвета = Новый Структура(
	"НомерПункта, 
	|Исполнитель, 
	|Содержание,
	|ВремяПлан,
	|ВремяФакт,
	|Начало,
	|отКлиента,
	|Окончание,
	|ТребуетПринятияРешения,
	|Комментарий");
	ЗаполнитьЗначенияСвойств(СтруктураОтвета,СтрокаДокумента);
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Процедура ОписанияРезультатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ОписанияРезультаты.ТекущиеДанные<>Неопределено и Элементы.ОписанияРезультаты.ТекущиеДанные.НомерСтроки>0  тогда
		
		ПараметрыФормы = Новый Структура(
		"НомерПункта, 
		|Исполнитель, 
		|Содержание,
		|ВремяПлан,
		|ВремяФакт,
		|Начало,
		|отКлиента,
		|Окончание,
		|ТребуетПринятияРешения,
		|Комментарий");
		
		струкОтвет = ПолучитьРеквизитыПунктаПовестки(Элементы.СписокЗадачРезультаты.ТекущиеДанные.Задача,Элементы.ОписанияРезультаты.ТекущиеДанные.НомерСтроки);
		ЗаполнитьЗначенияСвойств(ПараметрыФормы,струкОтвет);
		ПараметрыФормы.Вставить("ОтКлиентаВидимость",Истина);
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("НомерСтроки",Элементы.ОписанияРезультаты.ТекущиеДанные.НомерСтроки);
		ПараметрыОбработчика.Вставить("Документ",Элементы.СписокЗадачРезультаты.ТекущиеДанные.Задача);
		ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеПунктаПовесткиЗавершение", ЭтотОбъект, ПараметрыОбработчика);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Документ.CRM_Мероприятие.Форма.ВводПунктаПрограммы", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеПунктаПовесткиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	ИзменитьПунктПовесткиНаСервере(ДополнительныеПараметры.Документ,ДополнительныеПараметры.НомерСтроки,Результат);
	Элементы.ОписанияРезультаты.ТекущиеДанные.Описание = Результат.Содержание;
	Элементы.ОписанияРезультаты.ТекущиеДанные.исполнитель = Результат.Исполнитель;
	Элементы.ОписанияРезультаты.ТекущиеДанные.ТребуетПринятияРешения = Результат.ТребуетПринятияРешения;
	Элементы.ОписанияРезультаты.ТекущиеДанные.ОтКлиента = Результат.ОтКлиента;
	
	
КонецПроцедуры

&НаСервереБезконтекста
Процедура ИзменитьПунктПовесткиНаСервере(Документ,НомерСтроки,Данные)
	
	Попытка
		Док = Документ.ПолучитьОбъект(); 
		СтрокаПовестки = Док.вогПрограмма.Найти(НомерСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаПовестки,Данные);
		Док.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатыРезультатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.РезультатыРезультаты.ТекущиеДанные<>Неопределено  тогда
		ПараметрыФормы = Новый Структура("Ключ", Элементы.РезультатыРезультаты.ТекущиеДанные.ПунктПротокола);
		ПараметрыФормы.Вставить("ДокументМероприятие", Элементы.СписокЗадачРезультаты.ТекущиеДанные.Задача);
		ОткрытьФорму("Справочник.вогПротоколыМероприятий.Форма.ФормаЭлементаИзДокумента" , ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПунктПротокола" Тогда
			ПараметрыОтбора = Новый Структура("ПунктПротокола", Параметр.ПунктПротокола);
			СтрокиПунктаПротокола = РезультатыРезультаты.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиПунктаПротокола.Количество() <> 0 Тогда
				СтрокиПунктаПротокола[0].ПунктПротокола  = Параметр.ПунктПротокола;
				СтрокиПунктаПротокола[0].НомерПунктаПрограммы = Параметр.НомерПункта;
				Результат = вогОбщегоНазначенияВызовСервера.ЗначенияРеквизитовОбъекта(Параметр.ПунктПротокола,"Решили,Ответственный",Ложь,Истина);	
				СтрокиПунктаПротокола[0].Результат = Результат.Решили;
				СтрокиПунктаПротокола[0].Ответственный = Результат.Ответственный;
			КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененоМероприятие" тогда
		ПараметрыОтбора = Новый Структура("Задача",Параметр);
		СтрокиЗадач = Объект.Задачи.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиЗадач.Количество()>0 тогда
			 ЗаполнитьДанныеПоРезультатамПодбора();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтотОбъект() //Павелко, Задача CRM-284, 11.02.2020
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции	

&НаСервере
Процедура УстановитьВидимостьКомандыНаправитьНаПроверку() // VOG Ульянов И.В. 20.02.2020 CRM-344
	
	Если Объект.Статус = Перечисления.вогСтатусыКомандировок.Утверждено и Объект.ВремяОкончания <= ТекущаяДата() тогда
		
		УтвержденоПоПользователю = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	вогЭтапыСогласованияКомандировок.Этап КАК Этап
			|ИЗ
			|	РегистрСведений.вогЭтапыСогласованияКомандировок КАК вогЭтапыСогласованияКомандировок
			|ГДЕ
			|	вогЭтапыСогласованияКомандировок.Командировка = &Командировка
			|	И вогЭтапыСогласованияКомандировок.Сотрудник = &Сотрудник";
		
		Запрос.УстановитьПараметр("Командировка", Объект.Ссылка);
		Запрос.УстановитьПараметр("Сотрудник", Пользователи.ТекущийПользователь());
	
		Выборка = Запрос.Выполнить().Выбрать();
	
		Если Выборка.Следующий() Тогда
			Если Выборка.Этап = Перечисления.вогЭтапыСогласованияКомандировок.Утверждено тогда
				УтвержденоПоПользователю = Истина;
			КонецЕсли;	
		КонецЕсли;
		
		Если УтвержденоПоПользователю <> Ложь тогда
			УстановитьПривилегированныйРежим(Истина);
			
			//++ VOG Ульянов И.В. 29.04.2020 CRM-621	
			КартаМаршрута	= Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("bfe54371-5f9c-11ea-b3c7-005056bcd3e3"));
			//-- VOG Ульянов И.В. 29.04.2020 CRM-621	
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
				|ИЗ
				|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
				|ГДЕ
				|	CRM_БизнесПроцесс.Предмет = &Командировка
				|	И CRM_БизнесПроцесс.Автор = &ТекущийПользователь
				|	И CRM_БизнесПроцесс.КартаМаршрута = &КартаМаршрута
				|	И CRM_БизнесПроцесс.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("Командировка", Объект.Ссылка);
			Запрос.УстановитьПараметр("КартаМаршрута", КартаМаршрута);
			Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Количество() = 0 тогда		
				ЭтаФорма.Элементы.ФормаНаправитьНаПроверку.Видимость = Истина;
			Иначе
				ЭтаФорма.Элементы.ФормаНаправитьНаПроверку.Видимость = Ложь;
			КонецЕсли;	
			
			УстановитьПривилегированныйРежим(Ложь);
			
		Иначе
			ЭтаФорма.Элементы.ФормаНаправитьНаПроверку.Видимость = Ложь;						
		КонецЕсли;			
	Иначе	
		ЭтаФорма.Элементы.ФормаНаправитьНаПроверку.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры	
	
&НаСервере
Процедура НаправитьНаПроверкуНаСервере() // VOG Ульянов И.В. 20.02.2020 CRM-344
	
	УстановитьПривилегированныйРежим(Истина);
	
	//++ VOG Ульянов И.В. 29.04.2020 CRM-621	
	КартаМаршрута 					= Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("bfe54371-5f9c-11ea-b3c7-005056bcd3e3"));
	//-- VOG Ульянов И.В. 29.04.2020 CRM-621	

	БПОбъект 						= БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
	БПОбъект.Автор 					= Пользователи.ТекущийПользователь();
	БПОбъект.Дата 					= ТекущаяДата();
	БПОбъект.Предмет 				= Объект.Ссылка;
	
	//++ VOG Ульянов И.В. 29.04.2020 CRM-621	
	СтартГД = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("c5dfdf1b-5f9c-11ea-b3c7-005056bcd3e3"));
	СтартГДГК = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("c5dfdf23-5f9c-11ea-b3c7-005056bcd3e3"));
	СтартРРО = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("c5dfdf22-5f9c-11ea-b3c7-005056bcd3e3"));
	СтартРТН = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("c5dfdf26-5f9c-11ea-b3c7-005056bcd3e3"));	
	СтартпоСроку = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("bfe54372-5f9c-11ea-b3c7-005056bcd3e3"));
	//-- VOG Ульянов И.В. 29.04.2020 CRM-621	
	
	Согласование = РегистрыСведений.вогЭтапыСогласованияКомандировок.ПолучитьНеобходимыеЭтапыСогласования(Пользователи.ТекущийПользователь());
	
	Если Согласование.ПроверкаРРО тогда
		БПОбъект.ТочкаСтарта = СтартРРО;
	ИначеЕсли Согласование.ПроверкаРТН тогда
		БПОбъект.ТочкаСтарта = СтартРТН;
	ИначеЕсли Согласование.ПроверкаГД тогда
		БПОбъект.ТочкаСтарта = СтартГД;
	Иначе
		БПОбъект.ТочкаСтарта = СтартГДГК;
	КонецЕсли;
	
	БПОбъект.Ответственный 			= Пользователи.ТекущийПользователь();
	БПОбъект.КартаМаршрута 			= КартаМаршрута;	
	БПОбъект.ДатаСтарта 			= ТекущаяДата();
	БПОбъект.Наименование 			= СтрШаблон("%1 (%2)", БПОбъект.КартаМаршрута, БПОбъект.Предмет);
	БПОбъект.вогДолжностнаяПозиция 	= БПОбъект.Автор.CRM_ДолжностнаяПозиция;
	БПОбъект.НомерВерсииКартыМаршрута	= БПОбъект.КартаМаршрута.НомерВерсии;
	
	Для каждого Стр из Объект.КомандированныеСотрудники цикл
		Если Стр.Сотрудник = Пользователи.ТекущийПользователь()тогда
			 Стр.Статус = Перечисления.вогСтатусыКомандировок.ГотовоКПроверке;
		КонецЕсли;	
	КонецЦикла;		
	
	НачатьТранзакцию();
	
	НаборЗаписей = РегистрыСведений.вогЭтапыСогласованияКомандировок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Командировка.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.Сотрудник.Установить(Пользователи.ТекущийПользователь());
	Запись = НаборЗаписей.Добавить();
	Запись.Командировка = Объект.Ссылка;
	Запись.Сотрудник = Пользователи.ТекущийПользователь();
	Запись.Этап = Перечисления.вогЭтапыСогласованияКомандировок.ГотовоКПроверке;
	НаборЗаписей.Записать(Истина);	
	
	Попытка
		Записать();
		БПОбъект.Записать();
		БПОбъект.Старт();
		ЗафиксироватьТранзакцию();	
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();      		
	КонецПопытки;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьВидимостьКомандыНаправитьНаПроверку();
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаПроверку(Команда) // VOG Ульянов И.В. 20.02.2020 CRM-344
	НаправитьНаПроверкуНаСервере();
	
	//++ VOG Ульянов И.В. 29.04.2020 CRM-621	
	ОбновитьПредставительскиеРасходы();
 	ПересчитатьРасходы();
	//-- VOG Ульянов И.В. 29.04.2020 CRM-621	
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент) // VOG Ульянов И.В. 20.02.2020 CRM-344
	УстановитьВидимостьКомандыНаправитьНаПроверку();
	
	//--> VOG Турский Сергей 07.12.2020 16:37:37 ID заявки: CRM 1067.
	УстановитьДоступностьЗаявлениеНаВыдачуДенежныхСредств();
	//<-- VOG Турский Сергей 07.12.2020 16:37:37 ID заявки: CRM 1067.
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыСогласования() // VOG Ульянов И.В. 27.02.2020 CRM-344
	
	Сотрудники = Объект.КомандированныеСотрудники.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Запрос = Новый Запрос;
	// +++ VOG Кулаков П.Л. 29.07.2020 CRM-806
	// Добавлен вывод реквизита ТребуетсяСогласоватьЗадачи
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогЭтапыСогласованияКомандировок.Сотрудник КАК Сотрудник,
		|	вогЭтапыСогласованияКомандировок.Этап КАК Этап,
		|	NULL КАК Финансирование,
		|	вогЭтапыСогласованияКомандировок.ТребуетсяСогласоватьЗадачи КАК ТребуетсяСогласоватьЗадачи
		|ПОМЕСТИТЬ ВТ_СтатусыСогласования
		|ИЗ
		|	РегистрСведений.вогЭтапыСогласованияКомандировок КАК вогЭтапыСогласованияКомандировок
		|ГДЕ
		|	вогЭтапыСогласованияКомандировок.Командировка = &Командировка
		|	И вогЭтапыСогласованияКомандировок.Сотрудник В(&Сотрудники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вогФинансированиеКомандировок.Сотрудник,
		|	NULL,
		|	вогФинансированиеКомандировок.Финансирование,
		|	NULL
		|ИЗ
		|	РегистрСведений.вогФинансированиеКомандировок КАК вогФинансированиеКомандировок
		|ГДЕ
		|	вогФинансированиеКомандировок.Командировка = &Командировка
		|	И вогФинансированиеКомандировок.Сотрудник В(&Сотрудники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СтатусыСогласования.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(ВТ_СтатусыСогласования.Этап) КАК Этап,
		|	МАКСИМУМ(ВТ_СтатусыСогласования.Финансирование) КАК Финансирование,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_СтатусыСогласования.ТребуетсяСогласоватьЗадачи, ЛОЖЬ)) КАК ТребуетсяСогласоватьЗадачи
		|ИЗ
		|	ВТ_СтатусыСогласования КАК ВТ_СтатусыСогласования
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СтатусыСогласования.Сотрудник";
	// --- VOG Кулаков П.Л.
	
	Запрос.УстановитьПараметр("Командировка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	// +++ VOG Кулаков П.Л. 29.07.2020 CRM-806
	Финансирование = Перечисления.вогВидыФинансирования.Плановое;
	ТребуетсяСогласование = Ложь;
	// --- VOG Кулаков П.Л.
	
	Пока Выборка.Следующий() Цикл
		СтрокиТабличнойЧасти = Объект.КомандированныеСотрудники.НайтиСтроки(Новый Структура("Сотрудник",Выборка.Сотрудник));
		Для Каждого Стр из СтрокиТабличнойЧасти цикл
			Стр.Этап = Выборка.Этап;
			Стр.Финансирование = Выборка.Финансирование;
			// +++ VOG Кулаков П.Л. 29.07.2020 CRM-806
			Стр.ТребуетсяСогласовать = Выборка.ТребуетсяСогласоватьЗадачи;
			Если Выборка.Финансирование = Перечисления.вогВидыФинансирования.Плановое Тогда
			Иначе
				Финансирование = Выборка.Финансирование;
			КонецЕсли;
			Если Выборка.ТребуетсяСогласоватьЗадачи Тогда
				ТребуетсяСогласование = Истина;
			КонецЕсли;
			// --- VOG Кулаков П.Л.
		КонецЦикла;				
	КонецЦикла;
	
	// +++ VOG Кулаков П.Л. 29.07.2020 CRM-806
	Элементы.ПредыдущийБюджет.Видимость = Объект.ИзмененБюджет;
	Если ТребуетсяСогласование Тогда
		Элементы.ДекорацияТребуетсяСогласование.Видимость = Истина;
	Иначе
		Элементы.ДекорацияТребуетсяСогласование.Видимость = Ложь;
	КонецЕсли;
	Если Финансирование = Перечисления.вогВидыФинансирования.Плановое 
			И Объект.Статус = Перечисления.вогСтатусыКомандировок.Создан Тогда
		Элементы.ФормаСогласовать.Заголовок = "Включить в план";
	Иначе
		Элементы.ФормаСогласовать.Заголовок = "Согласовать задачи";
	КонецЕсли;
	Элементы.ФормаСогласовать.Видимость = Истина;
	ОтобразитьКомандуСогласовать();
	// --- VOG Кулаков П.Л.
	
	// +++ VOG Кулаков П.Л. 03.09.2020 CRM-885
	ОтобразитьКомандуСогласоватьИзменения();
	ОтобразитьКомандуОтменитьКомандировку();
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 17.03.2020 CRM-463
&НаКлиенте
Процедура КомандированныеСотрудникиПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "КомандированныеСотрудникиКоличествоДней" Тогда
		Если Элемент.ТекущиеДанные.КоличествоДней > Объект.Продолжительность Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Количество дней должно быть меньше или равно продолжительности командировки",,"КомандированныеСотрудники","Объект");
			Элемент.ТекущиеДанные.КоличествоДней = Объект.Продолжительность;
		КонецЕсли;
		Элемент.ТекущиеДанные.Сумма = РассчитатьСуммуКомандировочных(Элемент.ТекущиеДанные.КоличествоДней,Элемент.ТекущиеДанные.Сотрудник);
		ПересчитатьРасходы();
	// ++ VOG Солодов В.В. 24.06.2021 DEV-463
	ИначеЕсли УдалениеСтроки = Истина Тогда
		ПересчитатьРасходы();
		УдалениеСтроки = Ложь;
	// -- VOG Солодов В.В. 24.06.2021 DEV-463
	КонецЕсли;	
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 17.03.2020 CRM-463
&НаСервере
Функция РассчитатьСуммуКомандировочных(Знач Продолжительность,Сотрудник)
	
	Сумма = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Сотрудник,
		|	ЕСТЬNULL(вогРазмерСуточныхСрезПоследних.Размер, 0) КАК Размер,
		|	ЕСТЬNULL(вогРазмерСуточныхСрезПоследних.Размер, 0) * &Продолжительность КАК Сумма
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогРазмерСуточных.СрезПоследних(&ДатаКомандировки, ) КАК вогРазмерСуточныхСрезПоследних
		// +++ VOG Кулаков П.Л. 28.07.2020 CRM-816
		|		ПО (ВЫБОР
		|				КОГДА Пользователи.Ссылка = ЗНАЧЕНИЕ(Справочник.Пользователи.Водитель)
		|					ТОГДА вогРазмерСуточныхСрезПоследних.Вид = ЗНАЧЕНИЕ(Перечисление.вогРазмерыСуточных.Обычные)
		|				ИНАЧЕ Пользователи.CRM_ДолжностнаяПозиция.Суточные = вогРазмерСуточныхСрезПоследних.Вид
		|			КОНЕЦ)
		// --- VOG Кулаков П.Л.
		|ГДЕ
		|	Пользователи.Ссылка = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаКомандировки", Объект.ВремяНачала);
	// +++ VOG Кулаков П.Л. 27.07.2020 CRM-810
	Если Продолжительность = 1 Тогда 
		Продолжительность = 0;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	Запрос.УстановитьПараметр("Продолжительность", Продолжительность);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Сумма = РезультатЗапроса.Сумма;
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 18.03.2020 CRM-463
&НаКлиенте
Процедура ДополнительныеРасходыСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	Для каждого Стр из Объект.КомандированныеСотрудники цикл 
		// +++ VOG Кулаков П.Л. 20.08.2020 CRM-823
		Если Стр.Этап = ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.НеСогласовано") ИЛИ
				Стр.Этап =  ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.УчастиеОтклонено") Тогда
			Продолжить;
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		
		Элемент.СписокВыбора.Добавить(Стр.Сотрудник);
	КонецЦикла;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 29.07.2020 CRM-806
&НаСервере 
Функция ПроверитьИзменениеБюджета()
	
	БюджетИзменен = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат БюджетИзменен;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 24.06.2021 DEV-463
	ПредыдущийБюджет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ПредыдущийБюджет", Истина);
	
	Если ПредыдущийБюджет = Итого Или ПредыдущийБюджет = 0 Тогда
	// До изменения
	//Если Объект.Ссылка.ПредыдущийБюджет = Итого Тогда
	// -- VOG Солодов В.В. 24.06.2021 DEV-463
		Возврат БюджетИзменен;
	Иначе
		Для Каждого Строка Из Объект.КомандированныеСотрудники Цикл
			Если Строка.Сотрудник = Справочники.Пользователи.Водитель Тогда
				Продолжить;
			КонецЕсли;
			Финансирование = РегистрыСведений.вогФинансированиеКомандировок.ПолучитьФинансирование(Строка.Сотрудник,Объект.Ссылка);
			Если Финансирование = Перечисления.вогВидыФинансирования.ВБюджете Тогда
			Иначе
				Продолжить;
			КонецЕсли;
			// ++ VOG Солодов В.В. 24.06.2021 DEV-463
			Если ПредыдущийБюджет > Итого Тогда
			// До изменения
			//Если Объект.Ссылка.ПредыдущийБюджет > Итого Тогда
			// -- VOG Солодов В.В. 24.06.2021 DEV-463
				БюджетИзменен = Истина;
			Иначе
				БюджетИзменен = Неопределено;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		Возврат БюджетИзменен;
	КонецЕсли;
	
	Возврат БюджетИзменен;
	
КонецФункции // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 07.08.2020 CRM-823
&НаКлиенте
Процедура КомандированныеСотрудникиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Этап = ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.НеСогласовано")
			ИЛИ Элемент.ТекущиеДанные.Этап = ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.УчастиеОтклонено") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 07.08.2020 CRM-823
&НаКлиенте
Процедура РасходыПроездПередНачаломИзменения(Элемент, Отказ)
	
	НайденныеСтроки = Объект.КомандированныеСотрудники.НайтиСтроки(Новый Структура("Сотрудник",Элемент.ТекущиеДанные.Сотрудник));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Если НайденныеСтроки[0].Этап = ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.НеСогласовано")
			ИЛИ НайденныеСтроки[0].Этап = ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.УчастиеОтклонено") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 07.08.2020 CRM-823
&НаКлиенте
Процедура РасходыПроживаниеПередНачаломИзменения(Элемент, Отказ)
	
	НайденныеСтроки = Объект.КомандированныеСотрудники.НайтиСтроки(Новый Структура("Сотрудник",Элемент.ТекущиеДанные.Сотрудник));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Если НайденныеСтроки[0].Этап = ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.НеСогласовано")
			ИЛИ НайденныеСтроки[0].Этап = ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.УчастиеОтклонено") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 07.08.2020 CRM-823
&НаКлиенте
Процедура ДополнительныеРасходыПередНачаломИзменения(Элемент, Отказ)
	
	НайденныеСтроки = Объект.КомандированныеСотрудники.НайтиСтроки(Новый Структура("Сотрудник",Элемент.ТекущиеДанные.Сотрудник));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Если НайденныеСтроки[0].Этап = ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.НеСогласовано")
			ИЛИ НайденныеСтроки[0].Этап = ПредопределенноеЗначение("Перечисление.вогЭтапыСогласованияКомандировок.УчастиеОтклонено") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 01.09.2020 CRM-885
&НаКлиенте
Процедура СогласоватьИзменение(Команда)
	
	Если Модифицированность тогда
		Сообщить("Предварительно нужно записать документ");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НоваяДатаНачала) И Не Объект.ИзмененСоставЗадач Тогда
		Сообщить("Не заполнена новая дата начала.");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВремяНачала = Объект.НоваяДатаНачала И Не Объект.ИзмененСоставЗадач Тогда
		Сообщить("Новая дата начала совпадает с предыдущей.");
		Возврат;
	КонецЕсли;
	
	
	ЗапуститьСогласованиеИзмененияНаСервере();
	
	ОтобразитьКомандуСогласовать();
	ОтобразитьКомандуСогласоватьИзменения();
	ОтобразитьКомандуОтменитьКомандировку();
	
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 01.09.2020 CRM-885
&НаСервере
Процедура ЗапуститьСогласованиеИзмененияНаСервере()
	
	Подразделение = вогОбщегоНазначения.ПолучитьПодразделениеТекущегоПользователя();
	Выборка = РегистрыСведений.вогЗакрытиеПериодаПланированияКомандировки.Выбрать(Новый Структура("Подразделение",Подразделение));
	Если Не Выборка.Следующий() Тогда
		Сообщить("Не установлена дата закрытия периода планирования командировки");
		Возврат;
	КонецЕсли;
	
	Согласование = РегистрыСведений.вогЭтапыСогласованияКомандировок.ПолучитьНеобходимыеЭтапыСогласования(Объект.Сотрудник);
	
	Если Согласование.СогласованиеРТН Тогда 
		ЗапуститьСогласованиеИзмененияПоМаршруту();
	Иначе
		ИзменитьДатыКомандировки(Выборка.Дата);
	КонецЕсли;

	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 02.09.2020 CRM-885
&НаСервере
Процедура ИзменитьДатыКомандировки(ДатаЗакрытия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазницаСекунд = (Объект.НоваяДатаНачала - Объект.ВремяНачала);
	Объект.ИзмененПериод = Истина;
	Объект.ВремяНачала = Объект.НоваяДатаНачала;
	Объект.ВремяОкончания = Объект.ВремяНачала + (Объект.Продолжительность - 1) * 3600 * 24;
	
	Для Каждого Строка Из Объект.Задачи Цикл
		
		Если ТипЗнч(Строка.Задача) <> Тип("ДокументСсылка.CRM_Мероприятие") Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.ВремяНачала = Строка.ВремяНачала + РазницаСекунд;
		Строка.ВремяОкончания = Строка.ВремяОкончания + РазницаСекунд;
		МероприятиеОбъект = Строка.Задача.ПолучитьОбъект();
		МероприятиеОбъект.Дата = Строка.ВремяНачала;
		МероприятиеОбъект.ОкончаниеМероприятия = Строка.ВремяОкончания;
		МероприятиеОбъект.Состояние = Справочники.CRM_СостоянияСобытий.Запланировано;
		МероприятиеОбъект.Записать();
		
		НайденныеСтроки = Объект.ДанныеПланировщика.НайтиСтроки(Новый Структура("Значение",Строка.Задача));
		Для Каждого СтрокаПланировщика Из НайденныеСтроки Цикл
			СтрокаПланировщика.ДатаНачала = Строка.ВремяНачала;
			СтрокаПланировщика.ДатаОкончания = Строка.ВремяОкончания;
		КонецЦикла;
		
		Для Каждого ЭлементПланировщика Из Календарь.Элементы Цикл
			Если ЭлементПланировщика.Значение.Свойство("Значение") И ЭлементПланировщика.Значение.Значение = Строка.Задача Тогда
				ЭлементПланировщика.Начало = Строка.ВремяНачала;
				ЭлементПланировщика.Конец = Строка.ВремяОкончания;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ДатаЗакрытия < Объект.НоваяДатаНачала Тогда
		
		Объект.Статус = Перечисления.вогСтатусыКомандировок.Создан;
		
		Для Каждого Строка Из Объект.КомандированныеСотрудники Цикл
			РегистрыСведений.вогФинансированиеКомандировок.УстановитьФинансирование(Строка.Сотрудник,Объект.Ссылка,Перечисления.вогВидыФинансирования.Плановое);
			РегистрыСведений.вогЭтапыСогласованияКомандировок.УстановитьЭтапСогласования(Строка.Сотрудник,Объект.Ссылка,Перечисления.вогЭтапыСогласованияКомандировок.ПустаяСсылка());
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.CRM_ОбработанныеОбъектыТриггеров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Записать(Новый Структура("ИзменениеДаты",Истина));
	ОбновитьПредставительскиеРасходы();
	Сообщить("Даты командировки изменены.");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
// --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 02.09.2020 CRM-885
&НаСервере
Процедура ЗапуститьСогласованиеИзмененияПоМаршруту()
	
	Попытка	
		
		//КартаМаршрута 				= Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("da3d4703-ed1c-11ea-b7d6-005056bc3fe8")); // УИД в базе chb_crm
		КартаМаршрута 					= Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("e8525a6f-ede9-11ea-8f2a-005056bcd3e3")); // УИД в рабочей базе
		//ТочкаСтартаМаршрута 			= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("da3d4704-ed1c-11ea-b7d6-005056bc3fe8")); // УИД в базе chb_crm
		ТочкаСтартаМаршрута 			= Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("e8525a70-ede9-11ea-8f2a-005056bcd3e3")); // УИД в рабочей базе
		
		БПОбъект 						= БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
		БПОбъект.Автор 					= Объект.Сотрудник;
		БПОбъект.Дата 					= ТекущаяДата();
		БПОбъект.Предмет 				= Объект.Ссылка;
		БПОбъект.Ответственный 			= Объект.Сотрудник;
		БПОбъект.КартаМаршрута 			= КартаМаршрута;
		
		БПОбъект.ТочкаСтарта = ТочкаСтартаМаршрута;
		
		БПОбъект.ДатаСтарта 			= ТекущаяДата();
		БПОбъект.Наименование 			= СтрШаблон("%1 (%2)", БПОбъект.КартаМаршрута, БПОбъект.Предмет);
		БПОбъект.вогДолжностнаяПозиция 	= Объект.Сотрудник.CRM_ДолжностнаяПозиция;
		БПОбъект.НомерВерсииКартыМаршрута	= БПОбъект.КартаМаршрута.НомерВерсии;
		БПОбъект.Записать();
		БПОбъект.Старт();
			
			
		ТекстСообщения 					= НСтр("ru = 'Запущен бизнес процесс Согласования изменения командировки'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
		
	Исключение
		ТекстОшибки 					= ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ОбновитьНумерациюОбъектов();
	КонецПопытки;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 02.09.2020 CRM-885
&НаСервере
Процедура ОтобразитьКомандуОтменитьКомандировку()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_БизнесПроцесс.Ссылка КАК Ссылка
	               |ИЗ
	               |	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	               |ГДЕ
	               |	CRM_БизнесПроцесс.Предмет = &Предмет
	               |	И НЕ CRM_БизнесПроцесс.Завершен";
	Запрос.УстановитьПараметр("Предмет",Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Пользователи.ТекущийПользователь() = Объект.Сотрудник
			И (Объект.Статус = Перечисления.вогСтатусыКомандировок.Согласован
					ИЛИ Объект.Статус = Перечисления.вогСтатусыКомандировок.Утверждено)
			И ЗначениеЗаполнено(Объект.Ссылка)
			И НЕ Выборка.Следующий() Тогда
		Элементы.ФормаОтменитьКомандировку.Видимость = Истина;
	Иначе
		Элементы.ФормаОтменитьКомандировку.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 30.07.2020 CRM-885
&НаСервере
Процедура ОтобразитьКомандуСогласоватьИзменения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_БизнесПроцесс.Ссылка КАК Ссылка
	               |ИЗ
	               |	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	               |ГДЕ
	               |	CRM_БизнесПроцесс.Предмет = &Предмет
	               |	И НЕ CRM_БизнесПроцесс.Завершен";
	Запрос.УстановитьПараметр("Предмет",Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Элементы.ФормаСогласоватьИзменение.Видимость = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_БизнесПроцесс.Ссылка КАК Ссылка
	               |ИЗ
	               |	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	               |ГДЕ
	               |	CRM_БизнесПроцесс.Предмет = &Предмет
	               |	И НЕ CRM_БизнесПроцесс.Завершен
	               |	И CRM_БизнесПроцесс.КартаМаршрута <> &КартаМаршрута";
	//КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("da3d4703-ed1c-11ea-b7d6-005056bc3fe8")); // УИД в базе chb_crm
	КартаМаршрута 	= Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("e8525a6f-ede9-11ea-8f2a-005056bcd3e3")); // УИД в рабочей базе
	Запрос.УстановитьПараметр("КартаМаршрута",КартаМаршрута);
	Запрос.УстановитьПараметр("Предмет",Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Элементы.НоваяДатаНачала.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Пользователи.ТекущийПользователь() <> Объект.Сотрудник тогда
		Элементы.ФормаСогласоватьИзменение.Видимость = Ложь;	
		Элементы.НоваяДатаНачала.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.ФормаСогласоватьИзменение.Видимость = Ложь;	
		Элементы.НоваяДатаНачала.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.вогСтатусыКомандировок.НеСогласовано
			ИЛИ Объект.Статус = Перечисления.вогСтатусыКомандировок.Проверено
			ИЛИ Объект.Статус = Перечисления.вогСтатусыКомандировок.Отменено Тогда
		Элементы.ФормаСогласоватьИзменение.Видимость = Ложь;	
		Элементы.НоваяДатаНачала.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Элементы.ФормаСогласоватьИзменение.Видимость И Элементы.ФормаСогласоватьИзменение.Заголовок <> "Изменить" Тогда
		Согласование = РегистрыСведений.вогЭтапыСогласованияКомандировок.ПолучитьНеобходимыеЭтапыСогласования(Объект.Сотрудник);
		
		Если НЕ Согласование.СогласованиеРТН Тогда 
			Элементы.ФормаСогласоватьИзменение.Заголовок = "Изменить";
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НоваяДатаНачала) Тогда
		Элементы.ФормаСогласоватьИзменение.Доступность = Ложь;
	Иначе
		Элементы.ФормаСогласоватьИзменение.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 02.09.2020 CRM-885
&НаКлиенте
Процедура ОтменитьКомандировку(Команда)
	
	Если Модифицированность тогда
		Сообщить("Предварительно нужно записать документ");
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОтменитьКомандировкуЗавершение", ЭтотОбъект), "Командировка будет переведена в статус ""Отменено"". Дальнейшая работа с документом будет невозможна. Продолжить?",РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 02.09.2020 CRM-885
&НаКлиенте
Процедура ОтменитьКомандировкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Объект.Статус = ПредопределенноеЗначение("Перечисление.вогСтатусыКомандировок.Отменено");
	Записать();
	ЭтаФорма.ТолькоПросмотр = Истина;
	Элементы.КомандированныеСотрудникиДобавитьВодителя.Доступность = Ложь;
	Элементы.КомандированныеСотрудникиДобавитьДТН.Доступность = Ложь;
	Элементы.КомандированныеСотрудникиУдалитьСотрудника.Доступность = Ложь;
	Элементы.ФормаСогласовать.Доступность = Ложь;
	Элементы.ФормаСогласоватьИзменение.Доступность = Ложь;
	Элементы.СписокЗадач.ТолькоПросмотр = Истина;
	Элементы.Задачи.ТолькоПросмотр = Истина;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 03.09.2020 CRM-885
&НаКлиенте
Процедура НоваяДатаНачалаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.НоваяДатаНачала) ИЛИ НачалоМесяца(Объект.НоваяДатаНачала) <> НачалоМесяца(Объект.ВремяНачала) Тогда
		Элементы.ФормаСогласоватьИзменение.Доступность = Ложь;
	Иначе
		Элементы.ФормаСогласоватьИзменение.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 26.10.2020 CRM-999
&НаКлиенте
Процедура СогласоватьЗадачу(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		УспешнаяЗапись = Записать();
		Если Не УспешнаяЗапись Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВидСогласования = Элементы[Команда.Имя].Заголовок;
	ПараметрыФормы = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("СогласоватьЗадачуЗавершение", ЭтотОбъект,Новый Структура("ВидСогласования",ВидСогласования));
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиРезультатВыполнения", 
			ПараметрыФормы, 
			ЭтотОбъект,
			,
			,
			, 
			ОписаниеОповещения,  
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 10.11.2020 CRM-999
&НаКлиенте
Процедура СогласоватьЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("Отказ") И Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	вогОбщегоНазначенияВызовСервера.СогласоватьЗадачи(ДополнительныеПараметры.ВидСогласования,Объект.Ссылка,Результат.РезультатВыполнения);
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласования(ЭтаФорма);
	ЗаполнитьСтатусыСогласования();

КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
&НаКлиенте
Процедура ОткрытьТекущуюЗадачу(Команда)
	
	ВыбраннаяЗадача = Неопределено;
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		ВыбраннаяЗадача = ТекущаяЗадача;
	Иначе 
		МассивЗадач = вогОбщегоНазначенияВызовСервера.ПолучитьМассивЗадач(Объект.Ссылка);
		Если МассивЗадач.Количество() > 0 Тогда
			// +++ VOG Кулаков П.Л. 21.12.2020 CRM-1102
			//СписокЗадач = Новый СписокЗначений;
			//СписокЗадач.ЗагрузитьЗначения(МассивЗадач);
			//ВыбраннаяЗадача = СписокЗадач.ВыбратьЭлемент("Выберите задачу");
			ПараметрыФормы = Новый Структура("Предмет",Объект.Ссылка);
			ОткрытьФорму("ОбщаяФорма.вогФормаСпискаЗадачПредмета",
					ПараметрыФормы,
					ЭтаФорма,
					,
					,
					,
					Новый ОписаниеОповещения("ОткрытьТекущуюЗадачуЗавершение", ЭтотОбъект),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			// --- VOG Кулаков П.Л.
		КонецЕсли;
	КонецЕсли;
	
	Если ВыбраннаяЗадача = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",ВыбраннаяЗадача);
	ПараметрыФормы.Вставить("НеОткрыватьПредмет",Истина);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиНезависимыйПроцесс",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				, Новый ОписаниеОповещения("ОткрытьТекущуюЗадачуЗавершение", ЭтотОбъект), 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
&НаКлиенте
Процедура ОткрытьТекущуюЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласования(ЭтаФорма);	
	
КонецПроцедуры // --- VOG Кулаков П.Л.
