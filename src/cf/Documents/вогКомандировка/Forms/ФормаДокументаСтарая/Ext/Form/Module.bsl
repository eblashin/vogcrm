#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПересчитатьРасходы();
	
	Если Объект.Сотрудник <> ПользователиКлиентСервер.ТекущийПользователь() тогда
		ЭтаФорма.Элементы.ГруппаДаты.ТолькоПросмотр = Истина;
		ЭтаФорма.Элементы.ГруппаШапка.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ЭтотОбъект.Объект.Ссылка.Пустая() тогда
		Объект.Сотрудник = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	ОбновитьПредставительскиеРасходы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр) //Павелко, Таск 000000936, 28.11.2019
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Задачи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат; 
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") тогда
		ЗаполнитьСтрокуПоЗадаче(ВыбранноеЗначение,ТекущиеДанные.НомерСтроки);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.CRM_Мероприятие") тогда	
		ЗаполнитьСтрокуПоВстрече(ВыбранноеЗначение,ТекущиеДанные.НомерСтроки);
	КонецЕсли;
	
	ОбновитьПредставительскиеРасходы();
	ПересчитатьРасходы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПриИзменении(Элемент)
	ПересчитатьПродолжительностьКомандировки(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПриИзменении(Элемент)
	ПересчитатьПродолжительностьКомандировки(Объект);
КонецПроцедуры

&НаКлиенте
Процедура РасходыВремяНачалаПриИзменении(Элемент) //Павелко, Таск 000000936, 28.11.2019
	
	ПересчитатьПродолжительностьКомандировки(Элементы.РасходыПроезд.ТекущиеДанные, "Час");	
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВремяОкончанияПриИзменении(Элемент) //Павелко, Таск 000000936, 28.11.2019
	
	ПересчитатьПродолжительностьКомандировки(Элементы.РасходыПроезд.ТекущиеДанные, "Час");	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда //Павелко, Таск 000000936, 28.11.2019
		Сообщить("Запишите документ.");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВремяНачала = '00010101' или Объект.ВремяОкончания  = '00010101' тогда
		Сообщить("Введите время командировки.");
		Возврат;
	КонецЕсли;
	
	Если Объект.ВремяНачала > Объект.ВремяОкончания  тогда
		Сообщить("Дата окончания командировки не может быть раньше даты начала командировки.");
		Возврат;
	КонецЕсли;
	
	Если Объект.Сотрудник = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка") тогда
		Сообщить("Выберите сотрудника.");
		Возврат;
	КонецЕсли;	
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Сотрудник",Объект.Сотрудник);
	СтруктураОтбора.Вставить("Документ", Объект.Ссылка); //Павелко, Таск 000000936, 28.11.2019
	СтруктураОтбора.Вставить("ВремяНачала",Объект.ВремяНачала);
	СтруктураОтбора.Вставить("ВремяОкончания",Объект.ВремяОкончания);
	СтруктураОтбора.Вставить("АдресВХранилище",ЗаписатьЗадачиВХранилище());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.вогКомандировка.Форма.ФормаПодбора",СтруктураОтбора,ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВодителя(Команда) //Павелко, Таск 000000936, 28.11.2019
	
	ПользовательВодитель = ПредопределенноеЗначение("Справочник.Пользователи.Водитель");
	
	Если Объект.КомандированныеСотрудники.НайтиСтроки(Новый Структура("Сотрудник", ПользовательВодитель)).Количество() = 0 Тогда
		Объект.КомандированныеСотрудники.Добавить().Сотрудник = ПользовательВодитель;
	КонецЕсли;	
	
	ПересчитатьРасходы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДТН(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДТНЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.вогКомандировка.Форма.ФормаВыборПользователя",,ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДТНЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		НоваяСтрока = Объект.КомандированныеСотрудники.Добавить();
		НоваяСтрока.Сотрудник = РезультатВыбора;
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	
	
	ПересчитатьРасходы();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСотрудника(Команда)
	
	Если ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ДобавленАвтоматически = Ложь тогда
		
		Объект.КомандированныеСотрудники.Удалить(ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.НомерСтроки - 1);
		
	КонецЕсли;	
	
	ПересчитатьРасходы();
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьЗадачиВХранилище() 
		
	Возврат ПоместитьВоВременноеХранилище(Объект.Задачи.Выгрузить());
	
КонецФункции

&НаКлиенте
Процедура ПодборЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ЗагрузитьРезультатыПодбора(РезультатВыбора);
		ЭтаФорма.Модифицированность = Истина;
		ПересчитатьРасходы();	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатыПодбора(АдресВХранилище)
	
	ТаблицаРезультатВыбора = ПолучитьИзВременногоХранилища(АдресВХранилище);		
	
	Объект.Задачи.Загрузить(ТаблицаРезультатВыбора);
	
	ТЗКомандированныеСотрудники = Новый ТаблицаЗначений;
	ТЗКомандированныеСотрудники.Колонки.Добавить("Сотрудник");	
	Строки = Объект.КомандированныеСотрудники.НайтиСтроки(Новый Структура("ДобавленАвтоматически",Ложь));
	Для Каждого Стр из Строки цикл
		ТЗКомандированныеСотрудники.Добавить().Сотрудник = Стр.Сотрудник;
	КонецЦикла;	
	
	Объект.КомандированныеСотрудники.Загрузить(СписокКомандированныхСотрудников(Объект.Задачи.Выгрузить(, "Задача"))); //Павелко, Таск 000000936, 28.11.2019
	
	Для каждого Стр из ТЗКомандированныеСотрудники цикл
		УжеДобавлен = Объект.КомандированныеСотрудники.НайтиСтроки(Новый Структура("Сотрудник",Стр.Сотрудник));
		Если УжеДобавлен.Количество() = 0 тогда
			Объект.КомандированныеСотрудники.Добавить().Сотрудник = Стр.Сотрудник;	
		КонецЕсли;	
	КонецЦикла;
	
	ОбновитьПредставительскиеРасходы();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьПредставительскиеРасходы()
	
	Для каждого Стр из Объект.Задачи цикл
		
		Если ТипЗнч(Стр.Задача) = Тип("ДокументСсылка.CRM_Мероприятие") тогда	
			Стр.ПредставительскиеРасходы = Стр.Задача.ПредставительскиеРасходы;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция СписокКомандированныхСотрудников(Задачи) //Павелко, Таск 000000936, 28.11.2019
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_МероприятиеСвоиЛица.Лицо КАК Сотрудник,
		|	ИСТИНА КАК ДобавленАвтоматически
		|ИЗ
		|	Документ.CRM_Мероприятие.СвоиЛица КАК CRM_МероприятиеСвоиЛица
		|ГДЕ
		|	CRM_МероприятиеСвоиЛица.Ссылка В(&Задачи)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	CRM_Мероприятие.Ответственный,
		|	ИСТИНА
		|ИЗ
		|	Документ.CRM_Мероприятие КАК CRM_Мероприятие
		|ГДЕ
		|	CRM_Мероприятие.Ссылка В(&Задачи)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.Исполнитель,
		|	ИСТИНА
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Ссылка В(&Задачи)";
	
	Запрос.УстановитьПараметр("Задачи", Задачи);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьСтрокуПоЗадаче(ДокументСсылка, НомерСтроки)	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтрокуПоВстрече(ДокументСсылка, НомерСтроки)
	
	ТекущаяСтрока = Объект.Задачи[НомерСтроки-1];
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_МероприятиеСторонниеЛица.Партнер КАК Клиент,
		|	CRM_МероприятиеСторонниеЛица.вогТорговаяТочка КАК ТорговаяТочка,
		|	CRM_МероприятиеСторонниеЛица.вогТорговаяТочка.НаселенныйПункт КАК Город
		|ИЗ
		|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
		|ГДЕ
		|	CRM_МероприятиеСторонниеЛица.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПродолжительностьКомандировки(ОбъектПересчета, ЕдиницаВремени = "День")
	//Павелко, Таск 000000936, 28.11.2019 - добавил ЕдиницаВремени
		
	Если ОбъектПересчета.ВремяНачала <> '00010101' и ОбъектПересчета.ВремяОкончания <> '00010101' тогда
		
		Если ЕдиницаВремени = "Час" Тогда //Павелко, Таск 000000936, 28.11.2019
			ОбъектПересчета.Продолжительность = Окр((ОбъектПересчета.ВремяОкончания - ОбъектПересчета.ВремяНачала) / 3600, 2);
		Иначе
			ОбъектПересчета.Продолжительность = Окр((КонецДня(ОбъектПересчета.ВремяОкончания) - НачалоДня(ОбъектПересчета.ВремяНачала)) / 3600 / 24, 2);
		КонецЕсли;
		
		ПересчитатьРасходы();
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПересчитатьРасходы()
	
	ПересчитатьСтоимостьДня();
	
	//Суточные = ПолучитьРазмерСуточных(Объект.Сотрудник, Объект.Продолжительность);
	
	Суточные = РасчитатьСуточные();
	
	Представительские = Объект.Задачи.Итог("ПредставительскиеРасходы");
	Проживание = Объект.РасходыПроживание.Итог("Стоимость");	
	Проезд = Объект.РасходыПроезд.Итог("Стоимость");
	ЭтотОбъект.СтрокаРасходы = "Проезд: "+Формат(Проезд,"ЧДЦ=2; ЧН=0")+" р. "+
					"Проживание: "+Формат(Проживание,"ЧДЦ=2; ЧН=0")+" р. "+
					"Представительские расходы: "+Формат(Представительские,"ЧДЦ=2; ЧН=0")+" р. "+
					"Суточные "+Формат(Суточные,"ЧДЦ=2; ЧН=0")+" р. ";
	ЭтотОбъект.СтрокаИтого = "Итого "+Формат(Суточные+Представительские+Проживание+Проезд,"ЧДЦ=2; ЧН=0")+" р. ";
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтоимостьДня() //15.11.2019 17:45
	
	Для каждого Стр из Объект.РасходыПроживание цикл
		
		Коэффициент = 1;
		
		Если Стр.Сотрудник = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка") тогда
			Если Объект.КомандированныеСотрудники.Количество() <> 0 тогда
				Коэффициент = Объект.КомандированныеСотрудники.Количество()
			КонецЕсли;
		КонецЕсли;	
		
		Стр.СредняяСтоимостьДня = ?(Стр.Продолжительность = 0, 0, Стр.Стоимость / Стр.Продолжительность/ Коэффициент);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция РасчитатьСуточные()
	
	МассивСотрудников = Объект.КомандированныеСотрудники.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Сотрудник,
		|	ЕСТЬNULL(вогРазмерСуточныхСрезПоследних.Размер, 0) КАК Размер,
		|	ЕСТЬNULL(вогРазмерСуточныхСрезПоследних.Размер, 0) * &Продолжительность КАК Сумма
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогРазмерСуточных.СрезПоследних(&ДатаКомандировки, ) КАК вогРазмерСуточныхСрезПоследних
		|		ПО Пользователи.CRM_ДолжностнаяПозиция.Суточные = вогРазмерСуточныхСрезПоследних.Вид
		|ГДЕ
		|	Пользователи.Ссылка В(&МассивСотрудников)";
	
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("ДатаКомандировки", Объект.ВремяНачала);
	Запрос.УстановитьПараметр("Продолжительность", Объект.Продолжительность);
	
	ТЗ = Запрос.Выполнить().Выгрузить();	
	
	Возврат ТЗ.Итог("Сумма");
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьРазмерСуточных(Сотрудник, Продолжительность)
	
	Суточные = 0;
	
	Если Сотрудник <> Справочники.Пользователи.ПустаяСсылка() тогда
		Суточные = Сотрудник.РазмерСуточных * Продолжительность;
	КонецЕсли;
	
	Возврат Суточные;
	
КонецФункции

&НаКлиенте
Процедура РасходыПроездСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	Для каждого Стр из Объект.КомандированныеСотрудники цикл 
		Элемент.СписокВыбора.Добавить(Стр.Сотрудник);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПроживаниеСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	Для каждого Стр из Объект.КомандированныеСотрудники цикл 
		Элемент.СписокВыбора.Добавить(Стр.Сотрудник);
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

