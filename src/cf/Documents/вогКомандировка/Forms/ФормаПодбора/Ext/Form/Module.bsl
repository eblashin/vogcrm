#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	ОбновитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура МоиПодразделенияПриИзменении(Элемент)
	
	ОбновитьОтбор();

КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМероприятияВсеПриИзменении(Элемент)
	
	ОбновитьОтбор();

КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоПользователюПриИзменении(Элемент)
	
	Элементы.Пользователь.Видимость = ОтобратьПоПользователю;
	
	Если НЕ ОтобратьПоПользователю тогда
		Пользователь = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");	
	КонецЕсли;
	
	ОбновитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент) //Павелко, Таск 000000936, 28.11.2019
	
	ОбновитьОтбор();		
	ЗаполнитьЭлементыКалендаря(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) //Павелко, Таск 000000936, 28.11.2019
	
	ЗаписатьСобытияПланировщика(Документ, Календарь, ?(ТолькоВыбранныйСотрудник, Сотрудник, Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыбранныйСотрудникПриИзменении(Элемент) //Павелко, Таск 000000936, 28.11.2019
	
	ЗаписатьСобытияПланировщика(Документ, Календарь, ?(ТолькоВыбранныйСотрудник, Неопределено, Сотрудник));
	ОбновитьОтбор();		
	ЗаполнитьЭлементыКалендаря(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ОткрытьЗадачу" Тогда //Павелко, Таск 000000936, 28.11.2019
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Задача);
	Иначе
		ПриПеретаскивании(Элемент);	
	КонецЕсли;	
	
КонецПроцедуры

//&НаСервере //Павелко, Таск 000000936, 28.11.2019
&НаКлиенте
Процедура УдалитьСтрокуТаблицы(НомерСтроки)
	
	//Павелко, Таск 000000936, 28.11.2019+++
	УдаляемыйЭлемент = ТаблицаПодбора.Получить(НомерСтроки);
	
	Если ПользователиКлиентСервер.ТекущийПользователь() <> УдаляемыйЭлемент.Запланировал тогда
		Сообщить("Удалить задачу/мероприятия из списка может только тот кто ее добавил. ("+СокрЛП(УдаляемыйЭлемент.Запланировал)+")");
	    Возврат;
	КонецЕсли;	
		
	УдалитьЭлементПланировщика(УдаляемыйЭлемент.Задача);	
	ТаблицаПодбора.Удалить(УдаляемыйЭлемент);
	
	//ЭтаФорма.ТаблицаПодбора.Удалить(НомерСтроки);
	//Павелко, Таск 000000936, 28.11.2019---
	
	ОбновитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодбораПередУдалением(Элемент, Отказ) //Павелко, Таск 000000936, 28.11.2019
	
	Отказ = Истина;
	УдалитьСтрокуТаблицы(ЭтаФорма.ТаблицаПодбора.Индекс(Элемент.ТекущиеДанные));
	
КонецПроцедуры

//Павелко, Таск 000000936, 28.11.2019+++
//&НаКлиенте
//Процедура ТаблицаПодбораПослеУдаления(Элемент)
//	
//	ОбновитьОтбор();
//	ЗаполнитьЭлементыКалендаря();	
//	
//КонецПроцедуры
//Павелко, Таск 000000936, 28.11.2019---

&НаКлиенте
Процедура ТаблицаПодбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) //Павелко, Таск 000000936, 28.11.2019
	
	Если Не Элемент.ТекущиеДанные.Задача.Пустая() Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Задача);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПриемникПеретаскивания = "СписокЗадач";
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = "СписокЗадач";
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ПриемникПеретаскивания = "ТаблицаПодбора" тогда
		ПриПеретаскивании(Элемент);
	ИначеЕсли ПриемникПеретаскивания = "Календарь" тогда
		ПриПеретаскивании(Элемент);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодбораПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПриемникПеретаскивания = "ТаблицаПодбора";
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодбораНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = "ТаблицаПодбора";
	
КонецПроцедуры

&НаКлиенте                                                                                                                                
Процедура ТаблицаПодбораОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ПриемникПеретаскивания = "СписокЗадач" тогда
		УдалитьСтрокуТаблицы(ЭтаФорма.ТаблицаПодбора.Индекс(Элемент.ТекущиеДанные));
		//ЗаполнитьЭлементыКалендаря(); //Павелко, Таск 000000936, 28.11.2019
	КонецЕсли;
	
	Если ПриемникПеретаскивания = "Календарь" тогда
		
		СоздатьЭлементПланировщика(НачалоЧаса(ДатаПеретаскивания), НачалоЧаса(ДатаПеретаскивания) + 3600, Элемент.ТекущиеДанные.Задача, Элемент.ТекущиеДанные.Тема, Элемент.ТекущиеДанные.Сотрудник, Элемент.ТекущиеДанные,,Элемент.ТекущиеДанные.ЦветИндекс);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодбораВремяНачалаПриИзменении(Элемент) //Павелко, Таск 000000936, 28.11.2019
	
	ТекущиеДанные = Элементы.ТаблицаПодбора.ТекущиеДанные;
	СоздатьЭлементПланировщика(НачалоЧаса(ТекущиеДанные.ВремяНачала), НачалоЧаса(ТекущиеДанные.ВремяОкончания), ТекущиеДанные.Задача, ТекущиеДанные.Тема, ТекущиеДанные.Сотрудник, ТекущиеДанные,,Элемент.ТекущиеДанные.ЦветИндекс); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодбораВремяОкончанияПриИзменении(Элемент) //Павелко, Таск 000000936, 28.11.2019
	
	ТекущиеДанные = Элементы.ТаблицаПодбора.ТекущиеДанные;
	СоздатьЭлементПланировщика(НачалоЧаса(ТекущиеДанные.ВремяНачала), НачалоЧаса(ТекущиеДанные.ВремяОкончания), ТекущиеДанные.Задача, ТекущиеДанные.Тема, ТекущиеДанные.Сотрудник, ТекущиеДанные,,Элемент.ТекущиеДанные.ЦветИндекс);
	
КонецПроцедуры


&НаКлиенте
Процедура КалендарьПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	
	ПриемникПеретаскивания = "Календарь";
	ДатаПеретаскивания = Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	Для каждого Стр из Элемент.ВыделенныеЭлементы цикл
		СтруктураОтбора = Новый Структура("Задача", Стр.Значение.Значение); //Павелко, Таск 000000936, 28.11.2019
		СтрокиТаблицы = ТаблицаПодбора.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаТаблицы из СтрокиТаблицы цикл
			СтрокаТаблицы.ВремяНачала = Стр.Начало;
			СтрокаТаблицы.ВремяОкончания = Стр.Конец;
			СтрокаТаблицы.Продолжительность = Окр((СтрокаТаблицы.ВремяОкончания - СтрокаТаблицы.ВремяНачала) / 3600, 2);		
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьВыбор(Элемент, СтандартнаяОбработка) //Павелко, Таск 000000936, 28.11.2019
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка) //Павелко, Таск 000000936, 28.11.2019
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияОСозданииНовогоСобытияПланировщика", ЭтаФорма, Новый Структура("Начало, Конец", Начало, Конец));
	ПоказатьВводСтроки(Оповещение, "Перемещение к месту встречи", "Введите название события", 100); 
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка) //Павелко, Таск 000000936, 28.11.2019
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТаблицаПодбора.Загрузить(ПолучитьИзВременногоХранилища(ЭтотОбъект.Параметры.АдресВХранилище));
	ЗаполнитьТаблицуПодбора();
	Календарь.НачалоПериодаОтображения = НачалоДня(ЭтотОбъект.Параметры.ВремяНачала);
	Календарь.КонецПериодаОтображения = КонецДня(ЭтотОбъект.Параметры.ВремяОкончания);
	Календарь.ТекущиеПериодыОтображения.Очистить();
	Календарь.ТекущиеПериодыОтображения.Добавить(НачалоДня(ЭтотОбъект.Параметры.ВремяНачала), КонецДня(ЭтотОбъект.Параметры.ВремяОкончания));
	//Календарь.КратностьПериодическогоВарианта = Окр((ЭтотОбъект.Параметры.ВремяОкончания - ЭтотОбъект.Параметры.ВремяНачала) / 3600, 0);
	//ЗаполнитьЭлементыКалендаря(); //Павелко, Таск 000000936, 28.11.2019 - перенес на клиент и в ПриОткрытии
	
	СписокВидовВзаимодействия = Новый Массив;
	СписокВидовВзаимодействия.Добавить(Справочники.CRM_ВидыВзаимодействий.НайтиПоНаименованию("Встреча с клиентом"));
	СписокВидовВзаимодействия.Добавить(Справочники.CRM_ВидыВзаимодействий.НайтиПоНаименованию("Встреча с представителем в торговой точке"));
	
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("СписокВидовВзаимодействия",СписокВидовВзаимодействия);
	
	//Павелко, Таск 000000936, 28.11.2019+++
	Документ = Параметры.Документ;
	
	ПодчиненныеСотрудники = Новый Массив(ПараметрыСеанса.вогПодчиненныеСотрудники);
	//Элементы.Сотрудник.СписокВыбора.ЗагрузитьЗначения(ПодчиненныеСотрудники);
	//
	//СписокЗадач.Параметры.УстановитьЗначениеПараметра("Сотрудники", 						ПодчиненныеСотрудники);	
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ВстречаСКлиентом",					Справочники.CRM_ВидыВзаимодействий.ПолучитьСсылку(Новый УникальныйИдентификатор("b23f6567-97ed-11e9-9b11-005056bcd3e3")));
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("НейтральнаяТерритория", 				Справочники.CRM_Помещения.ПолучитьСсылку(Новый УникальныйИдентификатор("fc23ab04-aa36-11e9-9b11-005056bcd3e3")));
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ОфисКлиента", 						Справочники.CRM_Помещения.ПолучитьСсылку(Новый УникальныйИдентификатор("eb5b1218-aa36-11e9-9b11-005056bcd3e3")));
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ВидМесторасположениеОфисаКлиента",	Справочники.ВидыКонтактнойИнформации.МесторасположениеОфисаКлиента);
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ПустойГород",						Справочники.вогНаселенныеПункты.ПустаяСсылка());
	
	Сотрудник = Параметры.Сотрудник;
	
	Если ПодчиненныеСотрудники.Количество() = 0 Тогда
		Элементы.СписокЗадачСотрудник.Видимость    = Ложь;
		Элементы.ТаблицаПодбораСотрудник.Видимость = Ложь;
	КонецЕсли;	
	//Павелко, Таск 000000936, 28.11.2019---
	
	ОбновитьОтбор();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) //Павелко, Таск 000000936, 28.11.2019
	
	Элементы.Пользователь.Видимость = ОтобратьПоПользователю;
	
	МоиПодразделения = "Мои";
	ЗадачиМероприятияВсе = "Все";
	
	ЗаполнитьЭлементыКалендаря(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СвернутьРазвернутьПодбор(Команда)
	
	ЭтаФорма.Элементы.ГруппаЛеваяПанель.Видимость = НЕ ЭтаФорма.Элементы.ГруппаЛеваяПанель.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	ОповеститьОВыборе(ЗаписатьПодборВХранилище());	
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПодборВХранилище() 
	
	ЗаписатьСобытияПланировщика(Документ, Календарь, ?(ТолькоВыбранныйСотрудник, Сотрудник, Неопределено));
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаПодбора.Выгрузить());
	
КонецФункции

//Павелко, Таск 000000936, 28.11.2019+++
//&НаКлиенте
//Процедура Просмотр(Команда)
//	
//	Попытка
//		ОткрытьЗначение(ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.Задача);
//		
//	Исключение
//		
//	КонецПопытки;	
//	
//КонецПроцедуры
//Павелко, Таск 000000936, 28.11.2019---

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СписокЦветов = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьСписокЦветов();
	
	Для каждого Цвет из СписокЦветов цикл
		
		ЭлементОформленияСписокЗадач = СписокЗадач.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементОформленияСписокЗадач.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЦветИндекс");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Цвет.Ключ;
		ЭлементОтбора.Использование = Истина;		
		
		ЭлементОформленияСписокЗадач.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет.Значение.Цвет);
		
		ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаПодбора.ЦветИндекс");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Цвет.Ключ;
		ЭлементОтбора.Использование = Истина;		
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет.Значение.Цвет);		
		
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаПодбора");
		ПолеОформления.Использование = Истина;
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОповещенияОСозданииНовогоСобытияПланировщика(Результат, Параметры) Экспорт //Павелко, Таск 000000936, 28.11.2019
	
	Если Не ПустаяСтрока(Результат) Тогда
		
		СоздатьЭлементПланировщика(Параметры.Начало, Параметры.Конец, Неопределено, Результат, Сотрудник, , Истина);
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура СоздатьЭлементПланировщика(ДатаНачала, ДатаОкончания, Значение, Текст, СотрудникВСобытии, ТекущиеДанные = Неопределено, ЭтоДекорация = Ложь, ЦветИндекс = Неопределено)
	
	//Павелко, Таск 000000936, 28.11.2019+++
	УдалитьЭлементПланировщика(Значение);	
	
	Если ДатаНачала = '00010101' Или ДатаОкончания = '00010101' Или ДатаОкончания < ДатаНачала Тогда		
		Возврат;		
	КонецЕсли;		
	
	НовыйЭлемент = Календарь.Элементы.Добавить(ДатаНачала, ДатаОкончания);
			
	Если ЭтоДекорация Тогда
		
		НовыйЭлемент.ЦветФона 	= WebЦвета.СветлоСерый;
		НовыйЭлемент.Картинка 	= БиблиотекаКартинок.CRM_Просрочено;
		НовыйЭлемент.Текст 		= Текст;
		НовыйЭлемент.Значение	= Новый Структура("Значение, Сотрудник, ЭтоДекорация", Значение, СотрудникВСобытии, Истина);
		
	Иначе
		
		НовыйЭлемент.Текст = Текст;
		НовыйЭлемент.Значение = Новый Структура("Значение, Сотрудник, ЭтоДекорация", Значение, СотрудникВСобытии, Ложь);
		//Если СотрудникВСобытии = Сотрудник Тогда
		//	НовыйЭлемент.ЦветФона = WebЦвета.СветлоЗеленый;
		//КонецЕсли;
		Если ЦветИндекс <> Неопределено Тогда
			ЦветФона = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьЦветПоКлючу(ЦветИндекс);
			Если ЦветФона <> Неопределено тогда
				НовыйЭлемент.ЦветФона = ЦветФона.Цвет;
			КонецЕсли;
		Иначе
			ЦветФона = ПолучитьЦветЗадачи(Значение);
			Если ЦветФона <> Неопределено тогда
				НовыйЭлемент.ЦветФона = ЦветФона.Цвет;
			КонецЕсли;

		КонецЕсли;
		
		Если Не ТекущиеДанные = Неопределено Тогда
			ТекущиеДанные.ВремяНачала = НовыйЭлемент.Начало;
			ТекущиеДанные.ВремяОкончания = НовыйЭлемент.Конец;
			ТекущиеДанные.Продолжительность = Окр((ТекущиеДанные.ВремяОкончания - ТекущиеДанные.ВремяНачала) / 3600, 2);			
		КонецЕсли;
		
	КонецЕсли;
	//Павелко, Таск 000000936, 28.11.2019---
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьЦветЗадачи(Значение)
	
	ЦветИндекс = 99;
	Если ТипЗнч(Значение) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") тогда								
		Если Значение.БизнесПроцесс.вогНастройка.Категория.ЦветПредставление <> "" тогда
			ЦветИндекс = Значение.БизнесПроцесс.вогНастройка.Категория.ЦветИндекс;
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Значение) = Тип("ДокументСсылка.CRM_Мероприятие") тогда			
		Если Значение.вогВидВзаимодействия.Категория.ЦветПредставление <> "" тогда
			ЦветИндекс = Значение.вогВидВзаимодействия.Категория.ЦветИндекс;
		КонецЕсли;					
	КонецЕсли;
	
	ЦветФона = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьЦветПоКлючу(ЦветИндекс);
	
	Возврат ЦветФона;
					
КонецФункции	

&НаКлиенте
Процедура ПриПеретаскивании(Элемент)
	
	Для каждого ВыделеннаяСтрока Из Элемент.ВыделенныеСтроки цикл
		
		СтрокаТаблицы = ТаблицаПодбора.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Элемент.ДанныеСтроки(ВыделеннаяСтрока));
		
		Если СтрокаТаблицы.ВремяНачала <> '00010101' И СтрокаТаблицы.ВремяОкончания <> '00010101' тогда
			СтрокаТаблицы.Продолжительность = Окр((СтрокаТаблицы.ВремяОкончания - СтрокаТаблицы.ВремяНачала) / 3600, 2);
		КонецЕсли;	
		//ЗаполнитьЭлементыКалендаря();//Павелко, Таск 000000936, 28.11.2019
	
		Если ИсточникПеретаскивания = "СписокЗадач" И ПриемникПеретаскивания = "Календарь" тогда
			СтрокаТаблицы.ВремяНачала = НачалоЧаса(ДатаПеретаскивания); 
			СтрокаТаблицы.ВремяОкончания = НачалоЧаса(ДатаПеретаскивания) + 3600;
		КонецЕсли;	
		
		СтрокаТаблицы.Запланировал = ПользователиКлиентСервер.ТекущийПользователь();
		
		СоздатьЭлементПланировщика(СтрокаТаблицы.ВремяНачала, СтрокаТаблицы.ВремяОкончания, СтрокаТаблицы.Задача, СтрокаТаблицы.Тема, СтрокаТаблицы.Сотрудник,,,СтрокаТаблицы.ЦветИндекс);//Павелко, Таск 000000936, 28.11.2019
		
	КонецЦикла;		
	
	ОбновитьОтбор();
			
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивКлиентов(Задача)
	
	МассивСсылок = Новый Массив;
	
	Если НЕ Задача.БизнесПроцесс.Пустая() тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	вогОбъектыДляПроцесса.Объект КАК Объект
			|ИЗ
			|	РегистрСведений.вогОбъектыДляПроцесса КАК вогОбъектыДляПроцесса
			|ГДЕ
			|	вогОбъектыДляПроцесса.Объект ССЫЛКА Справочник.Партнеры
			|	И вогОбъектыДляПроцесса.Процесс = &Процесс";
		
		Запрос.УстановитьПараметр("Процесс", Задача.БизнесПроцесс);
		
		МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
	КонецЕсли;	
	
	Возврат МассивСсылок;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивТорговыхТочек(Задача)
	
	МассивСсылок = Новый Массив;
	
	Если НЕ Задача.БизнесПроцесс.Пустая() тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	вогОбъектыДляПроцесса.Объект КАК ТорговаяТочка,
			|	вогОбъектыДляПроцесса.Объект.НаселенныйПункт КАК Город,
			|	вогОбъектыДляПроцесса.Объект.Партнер КАК Клиент,
			|	вогТорговыеТочкиКонтактнаяИнформация.Представление КАК АдресОфиса
			|ИЗ
			|	РегистрСведений.вогОбъектыДляПроцесса КАК вогОбъектыДляПроцесса
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
			|		ПО вогОбъектыДляПроцесса.Объект = вогТорговыеТочкиКонтактнаяИнформация.Ссылка
			|			И (вогТорговыеТочкиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресТорговойТочки))
			|			И (НЕ вогТорговыеТочкиКонтактнаяИнформация.Представление = """")
			|ГДЕ
			|	вогОбъектыДляПроцесса.Объект ССЫЛКА Справочник.вогТорговыеТочки
			|	И вогОбъектыДляПроцесса.Процесс = &Процесс";
		
		Запрос.УстановитьПараметр("Процесс", Задача.БизнесПроцесс);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() цикл			
			СтруктураТочки = Новый Структура("ТорговаяТочка,Город,Клиент,АдресОфиса");
			ЗаполнитьЗначенияСвойств(СтруктураТочки,Выборка);
			МассивСсылок.Добавить(СтруктураТочки);			
		КонецЦикла;	
		
	КонецЕсли;	
	
	Возврат МассивСсылок;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтбор()
	
	МассивОтбора = ЭтаФорма.ТаблицаПодбора.Выгрузить().ВыгрузитьКолонку("Задача");
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("СписокУжеВыбрано",МассивОтбора);
	
	Если МоиПодразделения = "Мои" тогда
		СписокЗадач.Параметры.УстановитьЗначениеПараметра("СписокСотрудников", ПараметрыСеанса.ТекущийПользователь);
	Иначе
		СписокЗадач.Параметры.УстановитьЗначениеПараметра("СписокСотрудников", ПараметрыСеанса.вогПодчиненныеСотрудники);
	КонецЕсли;	

	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ЗадачиМероприятияВсе", ЗадачиМероприятияВсе);	
	
	//Если ТолькоВыбранныйСотрудник Тогда //Павелко, Таск 000000936, 28.11.2019
	//	СписокЗадач.Параметры.УстановитьЗначениеПараметра("Сотрудники", Сотрудник);
	//	Элементы.ТаблицаПодбора.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Сотрудник", Сотрудник));
	//Иначе
	//	СписокЗадач.Параметры.УстановитьЗначениеПараметра("Сотрудники", Элементы.Сотрудник.СписокВыбора.ВыгрузитьЗначения());
	//	Элементы.ТаблицаПодбора.ОтборСтрок = Неопределено;
	//КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПодбора()
	
	Для Каждого Стр из ТаблицаПодбора цикл
		
		Если ТипЗнч(Стр.Задача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") тогда
			Стр.Тема = Стр.Задача.Наименование;
			Если Стр.Задача.БизнесПроцесс.вогНастройка.Категория.ЦветПредставление = "" тогда
				Стр.ЦветИндекс = 99;
			Иначе	
				Стр.ЦветИндекс = Стр.Задача.БизнесПроцесс.вогНастройка.Категория.ЦветИндекс;
			КонецЕсли;	
		ИначеЕсли ТипЗнч(Стр.Задача) = Тип("ДокументСсылка.CRM_Мероприятие") тогда	
			Стр.Тема = Стр.Задача.Тема;
			Если Стр.Задача.вогВидВзаимодействия.Категория.ЦветПредставление = "" тогда
				Стр.ЦветИндекс = 99;
			Иначе	
				Стр.ЦветИндекс = Стр.Задача.вогВидВзаимодействия.Категория.ЦветИндекс;
			КонецЕсли;					
		КонецЕсли;		
		
		Стр.Дата = Стр.Задача.Дата;
	КонецЦикла;
	
КонецПроцедуры

//&НаСервере //Павелко, Таск 000000936, 28.11.2019
&НаКлиенте
Процедура ЗаполнитьЭлементыКалендаря(ОбновитьДанные = Ложь)
	
	Календарь.Элементы.Очистить();
	
	//Павелко, Таск 000000936, 28.11.2019+++
	Если ОбновитьДанные Тогда
		ЗаполнитьДанныеПланировщика();
	КонецЕсли;	
	
	Для Каждого Строка Из ДанныеПланировщика Цикл 			
		СоздатьЭлементПланировщика(Строка.ДатаНачала, Строка.ДатаОкончания, Строка.Значение, Строка.Описание, Строка.Сотрудник, , Строка.ЭтоДекорация);		
	КонецЦикла;
	//Павелко, Таск 000000936, 28.11.2019---
		
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДанныеПланировщика() //Павелко, Таск 000000936, 02.12.2019

	Если ТаблицаПодбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобытияПланировщика.Сотрудник КАК Сотрудник,
		|	СобытияПланировщика.Значение КАК Значение,
		|	СобытияПланировщика.ДатаНачала КАК ДатаНачала,
		|	СобытияПланировщика.ДатаОкончания КАК ДатаОкончания,
		|	СобытияПланировщика.Описание КАК Описание,
		|	СобытияПланировщика.ЭтоДекорация КАК ЭтоДекорация
		|ИЗ
		|	РегистрСведений.СобытияПланировщика КАК СобытияПланировщика
		|ГДЕ
		|	СобытияПланировщика.Объект = &Документ
		|	И ВЫБОР
		|			КОГДА &ТолькоВыбранныйСотрудник
		|				ТОГДА СобытияПланировщика.Сотрудник = &Сотрудник
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И (СобытияПланировщика.ЭтоДекорация
		|			ИЛИ СобытияПланировщика.Значение В (&МассивЗадач))";
	
	Запрос.УстановитьПараметр("Документ", 					Документ);
	Запрос.УстановитьПараметр("ТолькоВыбранныйСотрудник", 	ТолькоВыбранныйСотрудник);
	Запрос.УстановитьПараметр("Сотрудник", 					Сотрудник);
	Запрос.УстановитьПараметр("МассивЗадач", 				ТаблицаПодбора.Выгрузить().ВыгрузитьКолонку("Задача"));
	
	ДанныеПланировщика.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ЗаписатьСобытияПланировщика(Документ, Календарь, ОтборСотрудник = Неопределено) //Павелко, Таск 000000936, 02.12.2019
	
	НаборЗаписей = РегистрыСведений.СобытияПланировщика.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Документ);
	
	Если Не ОтборСотрудник = Неопределено Тогда
		НаборЗаписей.Отбор.Сотрудник.Установить(ОтборСотрудник);		
	КонецЕсли;
	
	Для Каждого Событие Из Календарь.Элементы Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Объект 			= Документ;
		НоваяЗапись.Сотрудник 		= Событие.Значение.Сотрудник;
		НоваяЗапись.Значение 		= Событие.Значение.Значение;
		НоваяЗапись.ДатаНачала 		= Событие.Начало;
		НоваяЗапись.ДатаОкончания 	= Событие.Конец;
		НоваяЗапись.Описание 		= Событие.Текст;
		НоваяЗапись.ЭтоДекорация 	= Событие.Значение.ЭтоДекорация;
		
	КонецЦикла;	
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементПланировщика(УдаляемыйЭлемент) //Павелко, Таск 000000936, 02.12.2019
	
	Если УдаляемыйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого Элемент Из Календарь.Элементы Цикл
		
		Если Элемент.Значение.Значение = УдаляемыйЭлемент Тогда
			Календарь.Элементы.Удалить(Элемент);
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

