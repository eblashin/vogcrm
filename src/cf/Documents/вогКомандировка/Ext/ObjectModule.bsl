#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// +++ VOG Кулаков П.Л. 19.03.2020 CRM-463
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	// ++ VOG Солодов В.В. 12.02.2020 CRM-330
	Если Не РольДоступна("ПолныеПрава")
		И ПометкаУдаления = Истина Тогда
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		
		Если Не Сотрудник = ТекущийПользователь
			Или (Не Статус = Перечисления.вогСтатусыКомандировок.Создан
				И Не Статус = Перечисления.вогСтатусыКомандировок.ВРаботе
				И Не Статус = Перечисления.вогСтатусыКомандировок.НеСогласовано) Тогда
			
			ШаблонСообщения = НСтр("ru = 'Невозможно пометить на удаление документ в статусе %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Статус);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 12.02.2020
	
	// ++ VOG Ульянов И.В. 25.02.2020 CRM-344
	//УстановитьПривилегированныйРежим(Истина);
	//Документы.вогКомандировка.ОбновитьДанныеКомандировки(ЭтотОбъект); //Павелко, Задача CRM-284, 11.02.2020
	//УстановитьПривилегированныйРежим(Ложь);	
	Если Статус = Перечисления.вогСтатусыКомандировок.Создан тогда
		УстановитьПривилегированныйРежим(Истина);
		Документы.вогКомандировка.ОбновитьДанныеКомандировки(ЭтотОбъект);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
			|ИЗ
			|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
			|ГДЕ
			|	CRM_БизнесПроцесс.Предмет = &Командировка";
			
		Запрос.УстановитьПараметр("Командировка", Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Количество() = 0 тогда		
			Документы.вогКомандировка.ОбновитьДанныеКомандировки(ЭтотОбъект);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;		
	// -- VOG Ульянов И.В. 25.02.2020 CRM-344
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
//START Кайдашов 04/02/20 CRM-257	

	УстановитьПривилегированныйРежим(Истина);
	СтрокаКлиенты = "";
	СтрокаТорговыеТочки = "";
	СтрокаГород = "";
	СтрокаУчастники = "";
	СтрокаРынки="";
	тзКлиенты = Задачи.Выгрузить(,"Клиент");
	тзКлиенты.Свернуть("Клиент");
	тзТорговыеТочки = Задачи.Выгрузить(,"ТорговаяТочка");
	тзТорговыеТочки.Свернуть("ТорговаяТочка");
	тзГород = Задачи.Выгрузить(,"Город");
	тзГород.Свернуть("Город");
	тзРынки = Новый ТаблицаЗначений;
	тзРынки.Колонки.Добавить("Рынок");
	Для каждого Строка из тзКлиенты цикл
		СтрокаКлиенты = СтрокаКлиенты + ?(СтрокаКлиенты<>"",";","")+Строка.Клиент;
	КонецЦикла;
	Для каждого Строка из тзТорговыеТочки цикл
		СтрокаТорговыеТочки = СтрокаТорговыеТочки + ?(СтрокаТорговыеТочки<>"",";","")+Строка.ТорговаяТочка;
		строкаР = тзРынки.Добавить();
		СтрокаР.Рынок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ТорговаяТочка,"Рынок");	
	КонецЦикла;
	Для каждого Строка из тзГород цикл
		СтрокаГород = СтрокаГород + ?(СтрокаГород<>"",";","") + Строка.Город;	
	КонецЦикла;
	Для каждого Строка из КомандированныеСотрудники цикл
		СтрокаУчастники = СтрокаУчастники + ?(СтрокаУчастники<>"",";","") + Строка.Сотрудник;
	КонецЦикла;
	
	тзРынки.Свернуть("Рынок");
	Для каждого Строка из тзРынки цикл
		СтрокаРынки = СтрокаРынки + ?(СтрокаРынки<>"",";","") + Строка.Рынок;
	КонецЦикла;
	
	
	МЗ = РегистрыСведений.СписокКомандировок.СоздатьМенеджерЗаписи();
	МЗ.Командировка = Ссылка;
	МЗ.Клиенты = СтрокаКлиенты;
	МЗ.Город = СтрокаГород;
	МЗ.Участники = СтрокаУчастники;
	МЗ.ТорговыеТочки = СтрокаТорговыеТочки;
	МЗ.Рынки = СтрокаРынки;
	МЗ.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
//END Кайдашов 04/02/20 CRM-257	

	// +++ VOG Кулаков П.Л. 22.07.2020 CRM-778
	Если НЕ ИзмененБюджет Тогда
		Запрос = Новый Запрос;
		
		// START Кайдашов 1032 23/11/2020
		Если КомандированныеСотрудники.Количество() = 0 Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	вогКомандировка.Ссылка КАК Ссылка,
			               |	вогКомандировка.Сотрудник КАК Сотрудник,
			               |	ВЫБОР
			               |		КОГДА вогКомандировка.Ссылка.ВремяНачала > КОНЕЦПЕРИОДА(вогЗакрытиеПериодаПланированияКомандировки.Дата, ДЕНЬ)
			               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.Плановое)
			               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.ПустаяСсылка)
			               |	КОНЕЦ КАК Финансирование
			               |ИЗ
			               |	Документ.вогКомандировка КАК вогКомандировка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогЗакрытиеПериодаПланированияКомандировки КАК вогЗакрытиеПериодаПланированияКомандировки
			               |		ПО вогКомандировка.Сотрудник.Подразделение.Организация = вогЗакрытиеПериодаПланированияКомандировки.Подразделение.Организация
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогЭтапыСогласованияКомандировок КАК вогЭтапыСогласованияКомандировок
			               |		ПО вогКомандировка.Ссылка = вогЭтапыСогласованияКомандировок.Командировка
			               |			И вогКомандировка.Сотрудник = вогЭтапыСогласованияКомандировок.Сотрудник
			               |ГДЕ
			               |	вогКомандировка.Ссылка = &Ссылка
			               |	И вогКомандировка.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.Создан)
			               |	И НЕ ЕСТЬNULL(вогЭтапыСогласованияКомандировок.ТребуетсяСогласоватьЗадачи, ЛОЖЬ)";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	вогКомандировкаКомандированныеСотрудники.Ссылка КАК Ссылка,
			               |	вогКомандировкаКомандированныеСотрудники.Сотрудник КАК Сотрудник,
			               |	ВЫБОР
			               |		КОГДА вогКомандировкаКомандированныеСотрудники.Ссылка.ВремяНачала > КОНЕЦПЕРИОДА(вогЗакрытиеПериодаПланированияКомандировки.Дата, ДЕНЬ)
			               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.Плановое)
			               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.ПустаяСсылка)
			               |	КОНЕЦ КАК Финансирование
			               |ИЗ
			               |	Документ.вогКомандировка.КомандированныеСотрудники КАК вогКомандировкаКомандированныеСотрудники
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогЗакрытиеПериодаПланированияКомандировки КАК вогЗакрытиеПериодаПланированияКомандировки
			               |		ПО вогКомандировкаКомандированныеСотрудники.Сотрудник.Подразделение.Организация = вогЗакрытиеПериодаПланированияКомандировки.Подразделение.Организация
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогЭтапыСогласованияКомандировок КАК вогЭтапыСогласованияКомандировок
			               |		ПО вогКомандировкаКомандированныеСотрудники.Ссылка = вогЭтапыСогласованияКомандировок.Командировка
			               |			И вогКомандировкаКомандированныеСотрудники.Сотрудник = вогЭтапыСогласованияКомандировок.Сотрудник
			               |ГДЕ
			               |	вогКомандировкаКомандированныеСотрудники.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Пользователи.Водитель)
			               |	И вогКомандировкаКомандированныеСотрудники.Ссылка = &Ссылка
			               |	И вогКомандировкаКомандированныеСотрудники.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.Создан)
			               |	И НЕ ЕСТЬNULL(вогЭтапыСогласованияКомандировок.ТребуетсяСогласоватьЗадачи, ЛОЖЬ)";
		КонецЕсли;
		
		//Если КомандированныеСотрудники.Количество() = 0 Тогда
		//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//	               |	вогКомандировка.Ссылка КАК Ссылка,
		//	               |	вогКомандировка.Сотрудник КАК Сотрудник,
		//	               |	ВЫБОР
		//	               |		КОГДА вогКомандировка.Ссылка.ВремяНачала > КОНЕЦПЕРИОДА(вогЗакрытиеПериодаПланированияКомандировки.Дата, ДЕНЬ)
		//	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.Плановое)
		//	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.ПустаяСсылка)
		//	               |	КОНЕЦ КАК Финансирование
		//	               |ИЗ
		//	               |	Документ.вогКомандировка КАК вогКомандировка
		//	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогЗакрытиеПериодаПланированияКомандировки КАК вогЗакрытиеПериодаПланированияКомандировки
		//	               |		ПО (вогКомандировка.Сотрудник.Подразделение = вогЗакрытиеПериодаПланированияКомандировки.Подразделение
		//	               |				ИЛИ вогКомандировка.Сотрудник.Подразделение.Родитель = вогЗакрытиеПериодаПланированияКомандировки.Подразделение
		//	               |				ИЛИ вогКомандировка.Сотрудник.Подразделение.Родитель.Родитель = вогЗакрытиеПериодаПланированияКомандировки.Подразделение)
		//	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогЭтапыСогласованияКомандировок КАК вогЭтапыСогласованияКомандировок
		//	               |		ПО вогКомандировка.Ссылка = вогЭтапыСогласованияКомандировок.Командировка
		//	               |			И вогКомандировка.Сотрудник = вогЭтапыСогласованияКомандировок.Сотрудник
		//	               |ГДЕ
		//	               |	вогКомандировка.Ссылка = &Ссылка
		//	               |	И вогКомандировка.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.Создан)
		//	               |	И НЕ ЕСТЬNULL(вогЭтапыСогласованияКомандировок.ТребуетсяСогласоватьЗадачи, ЛОЖЬ)";
		//Иначе
		//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//	               |	вогКомандировкаКомандированныеСотрудники.Ссылка КАК Ссылка,
		//	               |	вогКомандировкаКомандированныеСотрудники.Сотрудник КАК Сотрудник,
		//	               |	ВЫБОР
		//	               |		КОГДА вогКомандировкаКомандированныеСотрудники.Ссылка.ВремяНачала > КОНЕЦПЕРИОДА(вогЗакрытиеПериодаПланированияКомандировки.Дата, ДЕНЬ)
		//	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.Плановое)
		//	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.ПустаяСсылка)
		//	               |	КОНЕЦ КАК Финансирование
		//	               |ИЗ
		//	               |	Документ.вогКомандировка.КомандированныеСотрудники КАК вогКомандировкаКомандированныеСотрудники
		//	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогЗакрытиеПериодаПланированияКомандировки КАК вогЗакрытиеПериодаПланированияКомандировки
		//	               |		ПО (вогКомандировкаКомандированныеСотрудники.Сотрудник.Подразделение = вогЗакрытиеПериодаПланированияКомандировки.Подразделение
		//	               |				ИЛИ вогКомандировкаКомандированныеСотрудники.Сотрудник.Подразделение.Родитель = вогЗакрытиеПериодаПланированияКомандировки.Подразделение
		//	               |				ИЛИ вогКомандировкаКомандированныеСотрудники.Сотрудник.Подразделение.Родитель.Родитель = вогЗакрытиеПериодаПланированияКомандировки.Подразделение)
		//	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогЭтапыСогласованияКомандировок КАК вогЭтапыСогласованияКомандировок
		//	               |		ПО вогКомандировкаКомандированныеСотрудники.Ссылка = вогЭтапыСогласованияКомандировок.Командировка
		//	               |			И вогКомандировкаКомандированныеСотрудники.Сотрудник = вогЭтапыСогласованияКомандировок.Сотрудник
		//	               |ГДЕ
		//	               |	вогКомандировкаКомандированныеСотрудники.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Пользователи.Водитель)
		//	               |	И вогКомандировкаКомандированныеСотрудники.Ссылка = &Ссылка
		//	               |	И вогКомандировкаКомандированныеСотрудники.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.вогСтатусыКомандировок.Создан)
		//	               |	И НЕ ЕСТЬNULL(вогЭтапыСогласованияКомандировок.ТребуетсяСогласоватьЗадачи, ЛОЖЬ)";
		//КонецЕсли;
		
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		// END Кайдашов 1032 23/11/2020
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РегистрыСведений.вогФинансированиеКомандировок.УстановитьФинансирование(ВыборкаДетальныеЗаписи.Сотрудник,Ссылка,ВыборкаДетальныеЗаписи.Финансирование);
			Если ВыборкаДетальныеЗаписи.Финансирование <> Перечисления.вогВидыФинансирования.Плановое Тогда
				РегистрыСведений.вогЭтапыСогласованияКомандировок.УстановитьЭтапСогласования(ВыборкаДетальныеЗаписи.Сотрудник,Ссылка,Перечисления.вогЭтапыСогласованияКомандировок.ПустаяСсылка(),Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры

//START Кайдашов 04/02/20	CRM-260
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Продолжительность = 1;
	
	// ++ VOG Солодов В.В. 09.07.2020 CRM-572
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	// -- VOG Солодов В.В. 09.07.2020 CRM-572
	
КонецПроцедуры
//END Кайдашов CRM-260

// ++ VOG Солодов В.В. 13.02.2020 CRM-343
Процедура ПриКопировании(ОбъектКопирования)
	
	Финансирование = Перечисления.вогВидыФинансирования.ПустаяСсылка();
	
	РасходыПроезд.Очистить();
	РасходыПроживание.Очистить();
	
	ЗаполнитьТабличныеЧастиДокументаПриКопировании(ОбъектКопирования);
	
КонецПроцедуры
// -- VOG Солодов В.В. 13.02.2020

// ++ VOG Солодов В.В. 08.05.2020 CRM-624
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не Статус = Перечисления.вогСтатусыКомандировок.НаСогласовании Тогда
		
		ИсключаемыеРеквизиты = Новый Массив;
		ИсключаемыеРеквизиты.Добавить("ДополнительныеРасходы.ВидРасхода");
		ИсключаемыеРеквизиты.Добавить("ДополнительныеРасходы.Сумма");
		ИсключаемыеРеквизиты.Добавить("ДополнительныеРасходы.Комментарий");
		
		Для Каждого ИсключаемыйРеквизит Из ИсключаемыеРеквизиты Цикл
			
			ИндексРеквизита = ПроверяемыеРеквизиты.Найти(ИсключаемыйРеквизит);
			
			Если Не ИндексРеквизита = Неопределено Тогда
				ПроверяемыеРеквизиты.Удалить(ИндексРеквизита);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 08.05.2020

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьТабличныеЧастиДокументаПриКопировании(Знач ОбъектКопирования)
	
	СтатусыКомандировки = Новый Массив;
	СтатусыКомандировки.Добавить(Перечисления.вогСтатусыКомандировок.Утверждено);
	СтатусыКомандировки.Добавить(Перечисления.вогСтатусыКомандировок.Согласован);
	СтатусыКомандировки.Добавить(Перечисления.вогСтатусыКомандировок.НаСогласовании);
	СтатусыКомандировки.Добавить(Перечисления.вогСтатусыКомандировок.Создан);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗадачи.Сотрудник КАК Сотрудник,
		|	ТаблицаЗадачи.Задача КАК Задача,
		|	ТаблицаЗадачи.ТорговаяТочка КАК ТорговаяТочка,
		|	ТаблицаЗадачи.Клиент КАК Клиент,
		|	ТаблицаЗадачи.Город КАК Город,
		|	ТаблицаЗадачи.АдресОфиса КАК АдресОфиса,
		|	ТаблицаЗадачи.Приоритет КАК Приоритет,
		|	ТаблицаЗадачи.КлючеваяЦель КАК КлючеваяЦель,
		|	ТаблицаЗадачи.ОжидаемыйРезультат КАК ОжидаемыйРезультат,
		|	ТаблицаЗадачи.ВремяНачала КАК ВремяНачала,
		|	ТаблицаЗадачи.ВремяОкончания КАК ВремяОкончания,
		|	ТаблицаЗадачи.Продолжительность КАК Продолжительность,
		|	ТаблицаЗадачи.Комментарий КАК Комментарий,
		|	ТаблицаЗадачи.Запланировал КАК Запланировал,
		|	ТаблицаЗадачи.Рынок КАК Рынок,
		|	ТаблицаЗадачи.Расположение КАК Расположение
		|ПОМЕСТИТЬ ВТ_КопируемыеЗадачи
		|ИЗ
		|	&ТаблицаЗадачи КАК ТаблицаЗадачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУчастники.Сотрудник КАК Сотрудник,
		|	ТаблицаУчастники.ДобавленАвтоматически КАК ДобавленАвтоматически
		|ПОМЕСТИТЬ ВТ_КопируемыеУчастники
		|ИЗ
		|	&ТаблицаУчастники КАК ТаблицаУчастники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанныеПланировщика.Сотрудник КАК Сотрудник,
		|	ТаблицаДанныеПланировщика.Значение КАК Значение,
		|	ТаблицаДанныеПланировщика.ДатаНачала КАК ДатаНачала,
		|	ТаблицаДанныеПланировщика.ДатаОкончания КАК ДатаОкончания,
		|	ТаблицаДанныеПланировщика.Описание КАК Описание,
		|	ТаблицаДанныеПланировщика.ЭтоДекорация КАК ЭтоДекорация,
		|	ТаблицаДанныеПланировщика.ТипПеремещения КАК ТипПеремещения
		|ПОМЕСТИТЬ ВТ_КопируемыеЗадачиПланировщика
		|ИЗ
		|	&ТаблицаДанныеПланировщика КАК ТаблицаДанныеПланировщика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_КопируемыеЗадачи.Задача КАК Задача
		|ПОМЕСТИТЬ ВТ_ИсключаемыеЗадачи
		|ИЗ
		|	ВТ_КопируемыеЗадачи КАК ВТ_КопируемыеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вогКомандировка.Задачи КАК вогКомандировкаЗадачи
		|		ПО ВТ_КопируемыеЗадачи.Задача = вогКомандировкаЗадачи.Задача
		|			И (вогКомандировкаЗадачи.Ссылка.Статус В (&СтатусыКомандировки))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КопируемыеЗадачи.Задача КАК Задача
		|ПОМЕСТИТЬ ВТ_ОтобранныеЗадачи
		|ИЗ
		|	ВТ_КопируемыеЗадачи КАК ВТ_КопируемыеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсключаемыеЗадачи КАК ВТ_ИсключаемыеЗадачи
		|		ПО ВТ_КопируемыеЗадачи.Задача = ВТ_ИсключаемыеЗадачи.Задача
		|ГДЕ
		|	ВТ_ИсключаемыеЗадачи.Задача ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_МероприятиеСвоиЛица.Лицо КАК Сотрудник,
		|	ИСТИНА КАК ДобавленАвтоматически
		|ПОМЕСТИТЬ ВТ_ОтобранныеУчастники
		|ИЗ
		|	Документ.CRM_Мероприятие.СвоиЛица КАК CRM_МероприятиеСвоиЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтобранныеЗадачи КАК ВТ_ОтобранныеЗадачи
		|		ПО CRM_МероприятиеСвоиЛица.Ссылка = ВТ_ОтобранныеЗадачи.Задача
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	CRM_Мероприятие.Ответственный,
		|	ИСТИНА
		|ИЗ
		|	Документ.CRM_Мероприятие КАК CRM_Мероприятие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтобранныеЗадачи КАК ВТ_ОтобранныеЗадачи
		|		ПО CRM_Мероприятие.Ссылка = ВТ_ОтобранныеЗадачи.Задача
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.Исполнитель,
		|	ИСТИНА
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтобранныеЗадачи КАК ВТ_ОтобранныеЗадачи
		|		ПО ЗадачаИсполнителя.Ссылка = ВТ_ОтобранныеЗадачи.Задача
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_КопируемыеУчастники.Сотрудник,
		|	ВТ_КопируемыеУчастники.ДобавленАвтоматически
		|ИЗ
		|	ВТ_КопируемыеУчастники КАК ВТ_КопируемыеУчастники
		|ГДЕ
		|	ВТ_КопируемыеУчастники.ДобавленАвтоматически = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КопируемыеЗадачи.Сотрудник КАК Сотрудник,
		|	ВТ_КопируемыеЗадачи.Задача КАК Задача,
		|	ВТ_КопируемыеЗадачи.ТорговаяТочка КАК ТорговаяТочка,
		|	ВТ_КопируемыеЗадачи.Клиент КАК Клиент,
		|	ВТ_КопируемыеЗадачи.Город КАК Город,
		|	ВТ_КопируемыеЗадачи.АдресОфиса КАК АдресОфиса,
		|	ВТ_КопируемыеЗадачи.Приоритет КАК Приоритет,
		|	ВТ_КопируемыеЗадачи.КлючеваяЦель КАК КлючеваяЦель,
		|	ВТ_КопируемыеЗадачи.ОжидаемыйРезультат КАК ОжидаемыйРезультат,
		|	ВТ_КопируемыеЗадачи.ВремяНачала КАК ВремяНачала,
		|	ВТ_КопируемыеЗадачи.ВремяОкончания КАК ВремяОкончания,
		|	ВТ_КопируемыеЗадачи.Продолжительность КАК Продолжительность,
		|	ВТ_КопируемыеЗадачи.Комментарий КАК Комментарий,
		|	ВТ_КопируемыеЗадачи.Запланировал КАК Запланировал,
		|	ВТ_КопируемыеЗадачи.Рынок КАК Рынок,
		|	ВТ_КопируемыеЗадачи.Расположение КАК Расположение
		|ИЗ
		|	ВТ_КопируемыеЗадачи КАК ВТ_КопируемыеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтобранныеЗадачи КАК ВТ_ОтобранныеЗадачи
		|		ПО ВТ_КопируемыеЗадачи.Задача = ВТ_ОтобранныеЗадачи.Задача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ОтобранныеУчастники.Сотрудник КАК Сотрудник,
		|	ВТ_ОтобранныеУчастники.ДобавленАвтоматически КАК ДобавленАвтоматически
		|ИЗ
		|	ВТ_ОтобранныеУчастники КАК ВТ_ОтобранныеУчастники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_КопируемыеЗадачиПланировщика.Сотрудник КАК Сотрудник,
		|	ВТ_КопируемыеЗадачиПланировщика.Значение КАК Значение,
		|	ВТ_КопируемыеЗадачиПланировщика.ДатаНачала КАК ДатаНачала,
		|	ВТ_КопируемыеЗадачиПланировщика.ДатаОкончания КАК ДатаОкончания,
		|	ВТ_КопируемыеЗадачиПланировщика.Описание КАК Описание,
		|	ВТ_КопируемыеЗадачиПланировщика.ЭтоДекорация КАК ЭтоДекорация,
		|	ВТ_КопируемыеЗадачиПланировщика.ТипПеремещения КАК ТипПеремещения
		|ИЗ
		|	ВТ_КопируемыеЗадачиПланировщика КАК ВТ_КопируемыеЗадачиПланировщика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсключаемыеЗадачи КАК ВТ_ИсключаемыеЗадачи
		|		ПО ВТ_КопируемыеЗадачиПланировщика.Значение = ВТ_ИсключаемыеЗадачи.Задача
		|ГДЕ
		|	ВТ_ИсключаемыеЗадачи.Задача ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаЗадачи", 				ОбъектКопирования.Задачи.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаУчастники", 			ОбъектКопирования.КомандированныеСотрудники.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаДанныеПланировщика", 	ОбъектКопирования.ДанныеПланировщика.Выгрузить());
	Запрос.УстановитьПараметр("ТекущийПользователь", 		Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("СтатусыКомандировки", 		СтатусыКомандировки);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Задачи.Загрузить(РезультатЗапроса[6].Выгрузить());
	КомандированныеСотрудники.Загрузить(РезультатЗапроса[7].Выгрузить());
	Если Задачи.Количество() > 0 Тогда
		ДанныеПланировщика.Загрузить(РезультатЗапроса[8].Выгрузить());
	Иначе
		ДанныеПланировщика.Очистить();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли