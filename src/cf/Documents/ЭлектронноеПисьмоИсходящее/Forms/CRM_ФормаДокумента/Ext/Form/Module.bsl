&НаКлиенте
Перем ИдентификаторСтрокиПолучателя;

&НаКлиенте
Перем ИмяЭлемента;

&НаКлиенте
Перем ПроверкаСуществованияФайлов;

&НаКлиенте
Перем ТекущийНомерВложения;

&НаКлиенте
Перем ПолучаемыеФайлы;

&НаКлиенте
Перем ПолученныеФайлы;

&НаКлиенте
Перем КонтекстВыбора;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТиповПрисоединенныхФайлов()
	МассивТипов = Новый Массив();
	Для Каждого СправочникМд Из Метаданные.Справочники Цикл
		Если Прав(СправочникМд.Имя, 19) = "ПрисоединенныеФайлы" Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка." + СправочникМд.Имя));
		КонецЕсли;
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции

&НаКлиенте
Функция ПеретаскиваетсяФайл(ЗначениеПеретаскивания)
	Если	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") И ЗначениеПеретаскивания.ЭтоФайл())
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл") И ЗначениеПеретаскивания[0].ЭтоФайл())
		Или КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания))
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания[0]))) Тогда
		//
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("ДанныеФормыЭлементДерева") Тогда
		бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		Попытка
			Если КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания.Ссылка)) Тогда
				бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Истина;
			КонецЕсли;
		Исключение
			бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		КонецПопытки;
		Возврат бПеретаскиваетсяПрисоединенныйФайлСВерсионированием;
		
	Иначе
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") Тогда
			Если Не ЗначениеПеретаскивания.ЭтоФайл() Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл") И Не ЗначениеПеретаскивания[0].ЭтоФайл() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПрисоединенныйФайлПеретаскиванием(МассивФайловИлиФайл)
	Если ТипЗнч(МассивФайловИлиФайл) = Тип("Массив") Тогда
		МассивФайлов = МассивФайловИлиФайл;
	Иначе
		МассивФайлов = Новый Массив();
		МассивФайлов.Добавить(МассивФайловИлиФайл);
	КонецЕсли;
	
	МассивФайловДляОбработки = Новый Массив();
	Для Каждого ЭлементМассива Из МассивФайлов Цикл
		Если Не ПеретаскиваетсяФайл(ЭлементМассива) = Истина Тогда
			Продолжить;
		КонецЕсли;
		МассивФайловДляОбработки.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Если МассивФайловДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокВложений = Новый СписокЗначений();
	
	Для Каждого Файл Из МассивФайловДляОбработки Цикл
		Если ТипЗнч(Файл) = Тип("Файл") Тогда
			
			// Это файл.
			// Сначала проверим добавляемый файл на разрешённый размер и расширения.
			МассивИменФайловСОшибками = Новый Массив;
			Если НЕ РаботаСФайламиСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(Файл, Ложь, МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			
			СписокВложений.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя), УникальныйИдентификатор), Файл.Имя);
			
		ИначеЕсли ТипЗнч(Файл) = Тип("ДанныеФормыЭлементДерева") Тогда
			
			// Это присоединенный файл с версионированием.
			// Сначала проверим добавляемый файл на разрешённый размер и расширения.
			МассивИменФайловСОшибками = Новый Массив;
			РеквизитыФайла = ПолучитьРеквизитыПроверяемогоФайла(Файл);
			Если НЕ CRM_ПрисоединенныеФайлы.ПроверитьВозможностьЗагрузкиФайла(Файл, РеквизитыФайла.Размер, РеквизитыФайла.Расширение, Ложь, МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл.Ссылка, УникальныйИдентификатор, Истина);
			
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				СписокВложений.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
			КонецЕсли;
			
		Иначе
			
			// Это элемент справочника *ПрисоединенныеФайлы.
			// Сначала проверим добавляемый файл на разрешённый размер и расширения.
			МассивИменФайловСОшибками = Новый Массив;
			РеквизитыФайла = ПолучитьРеквизитыПроверяемогоФайла(Файл);
			Если НЕ CRM_ПрисоединенныеФайлы.ПроверитьВозможностьЗагрузкиФайла(Файл, РеквизитыФайла.Размер, РеквизитыФайла.Расширение, Ложь, МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл, УникальныйИдентификатор, Истина);
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				СписокВложений.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокВложений.Количество() > 0 Тогда
		ПодключитьРасширениеРаботыСФайлами();
		
		Для Каждого ЭлементСпискаФайлов Из СписокВложений Цикл
			новСтр = Вложения.Добавить();
			
			новСтр.Расположение = 4;
			новСтр.ИмяФайла = ЭлементСпискаФайлов.Представление;
			Расширение = ВзаимодействияКлиентСервер.РасширениеФайла(новСтр.ИмяФайла);
			новСтр.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
			новСтр.ИмяФайлаНаКомпьютере = ЭлементСпискаФайлов.Значение;
			новСтр.ИмяФайла = ЭлементСпискаФайлов.Представление;
			новСтр.Размер = ПолучитьИзВременногоХранилища(ЭлементСпискаФайлов.Значение).Размер();
			РазмерВложения = Цел(новСтр.Размер/1024);
			новСтр.РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
			новСтр.ИДФайлаЭлектронногоПисьмаОтбор = "#";
			новСтр.ИДФайлаЭлектронногоПисьма = "#";
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
	СформироватьПредставлениеВложений();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыПроверяемогоФайла(Файл)
	Возврат Новый Структура("Размер, Расширение", Файл.Размер, Файл.Расширение);
КонецФункции	

&НаСервере
// Функция загружает настройку из хранилища общих настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить().
//
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек = "", ЗначениеПоУмолчанию = Неопределено, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено)
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию, ОписаниеНастроек, ИмяПользователя);
КонецФункции // ХранилищеОбщихНастроекЗагрузить()

&НаСервере
// Процедура сохраняет настройку в хранилище общих настроек.
// 
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроекСохранить.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить().
// 
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек = "", Значение, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, НужноОбновитьПовторноИспользуемыеЗначения = Ложь)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Значение, ОписаниеНастроек, ИмяПользователя, НужноОбновитьПовторноИспользуемыеЗначения);
КонецПроцедуры // ХранилищеОбщихНастроекСохранить()

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаСервере
Функция ПроверитьНаВозможностьОтпавкиПисьма(УчетнаяЗаписьСсылка) 
	
	Если НЕ УчетнаяЗаписьСсылка.ИспользоватьДляОтправки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивПолучателей(ИмяТЧ)
	
	МассивПолучателей = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Контакт) Тогда
			СтруктураПолучателя = Новый Структура("Адрес, Контакт"
												  ,СтрокаТЧ.Адрес,СтрокаТЧ.Контакт);
			МассивПолучателей.Добавить(СтруктураПолучателя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПолучателей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтактПоАдресу(УчетнаяЗаписьЭП, Адрес, Знач Представление = Неопределено, СоответствияАдресовИКонтактовР)
	
	Для Каждого Элемент Из СоответствияАдресовИКонтактовР Цикл
		Если Элемент.Представление = Адрес Тогда
			Возврат Элемент.Значение;
		КонецЕсли;
	КонецЦикла;

	Контакт = Адрес;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	2 КАК Флаг
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|	И НЕ ОбъектСКонтактнойИнформацией.АдресЭП = &АдресУЗ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	1
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектСКонтактнойИнформацией.Ссылка,
	|	0
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК ОбъектСКонтактнойИнформацией
	|ГДЕ
	|	НЕ ОбъектСКонтактнойИнформацией.Ссылка.ПометкаУдаления
	|	И ОбъектСКонтактнойИнформацией.АдресЭП = &АдресЭП
	|	И ОбъектСКонтактнойИнформацией.Тип = &Тип
	|
	|УПОРЯДОЧИТЬ ПО
	|	Флаг";
	
	Запрос.УстановитьПараметр("АдресУЗ", УчетнаяЗаписьЭП.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("АдресЭП", Адрес);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Представление = Неопределено И Выборка.Следующий() Тогда
		Контакт = Выборка.Ссылка;
	Иначе
		Пока Выборка.Следующий() Цикл
			Если СокрЛП(Строка(Выборка.Ссылка)) = Представление Тогда
				Контакт = Выборка.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СоответствияАдресовИКонтактовР.Добавить(Контакт, Адрес);
	Возврат Контакт;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеИдентификаторовОснований(Знач Идентификаторы)

	Идентификаторы = СтрЗаменить(Идентификаторы, "<",  " ");
	Идентификаторы = СтрЗаменить(Идентификаторы, ">",  " ");
	Идентификаторы = СтрЗаменить(Идентификаторы, "  ", " ");
	Идентификаторы = СокрЛП(СтрЗаменить(Идентификаторы, "  ", " "));
	Идентификаторы = СтрЗаменить(Идентификаторы, " ", Символы.ПС + "                          ");
	
	Возврат Идентификаторы;

КонецФункции

// На входе подается: массив структур АдресЭП,Представление,Логин,Домены(массив) 
// ИмяТаблицы для заполнения.
&НаСервереБезКонтекста
Функция ПреобразоватьИменаПолучателей(ФормаИмяТаблицы, УчетнаяЗаписьЭП, МассивСтруктур, ФормаСоответствия)
	
	МассивСтруктурИтог = Новый Массив;
	
	ТабПолучателей = ФормаИмяТаблицы.Выгрузить();
	
	ФормаИмяТаблицы.Очистить();
	Для Каждого Стр Из МассивСтруктур Цикл
		новСтр = ФормаИмяТаблицы.Добавить();
		СтрокаТаблицы = ТабПолучателей.Найти(Стр.АдресЭП, "Адрес");
		Если НЕ СтрокаТаблицы = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(новСтр, СтрокаТаблицы);
		Иначе
			новСтр.Адрес = Стр.АдресЭП;
			новСтр.Представление = Стр.Представление;
			новСтр.Контакт = ПолучитьКонтактПоАдресу(УчетнаяЗаписьЭП, Стр.АдресЭП, Стр.Представление, ФормаСоответствия);
		КонецЕсли;
		
		СтруктураПолучателя = Новый Структура("Адрес,Представление,Контакт");
		ЗаполнитьЗначенияСвойств(СтруктураПолучателя,новСтр);
		
		МассивСтруктурИтог.Добавить(СтруктураПолучателя);
		
	КонецЦикла;
	
	Возврат Новый Структура("Получатели, СоответствиеАдресов", МассивСтруктурИтог, ФормаСоответствия.ВыгрузитьЗначения()); 
	
КонецФункции

&НаКлиенте
Процедура РедактироватьСписокПолучателей(ДляПодбора, ГруппаАдресов = "")
	
	// Получим список адресатов
	соотвТабЧастей = Новый Соответствие;
	соотвТабЧастей.Вставить("Кому",    ПолучателиПисьма);
	соотвТабЧастей.Вставить("Копии",   ПолучателиКопий);
	соотвТабЧастей.Вставить("Скрытые", ПолучателиСкрытыхКопий);
	соотвТабЧастей.Вставить("Ответ",   Объект.ПолучателиОтвета);
	
	СписокВыбранных = Новый СписокЗначений;
	Для Каждого ТабЧасть Из соотвТабЧастей Цикл
		СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(ТабЧасть.Значение), ТабЧасть.Ключ);
	КонецЦикла;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись",   Объект.УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных", СписокВыбранных);
	ПараметрыОткрытия.Вставить("Предмет", 		  Предмет);
	ПараметрыОткрытия.Вставить("Письмо", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию",?(ПустаяСтрока(ГруппаАдресов),НСтр("ru = 'Кому'"), ГруппаАдресов));
	
	Если ДляПодбора Тогда
		
		ПараметрыОткрытия.Вставить("ГруппаАдресов", ?(ПустаяСтрока(ГруппаАдресов),НСтр("ru = 'Кому'"), ГруппаАдресов));		
		
	КонецЕсли;
	
	// Откроем форму для редактирования списка адресатов.
	ИмяОбщейФормы = ?(ДляПодбора, "ОбщаяФорма.CRM_АдреснаяКнига", "ОбщаяФорма.УточнениеКонтактов");
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьСписокПолучателейЗавершение", ЭтотОбъект, Новый Структура("ДляПодбора, соотвТабЧастей", ДляПодбора, соотвТабЧастей));
	ОткрытьФорму(ИмяОбщейФормы, ПараметрыОткрытия,,,,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСписокПолучателейЗавершение(Результат, ДополнительныеПараметры) экспорт
	
	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;

	// Заполним адресатов
	Если ДополнительныеПараметры.ДляПодбора Тогда
		ЗаполнитьПодобранныхПолучателей(ДополнительныеПараметры.соотвТабЧастей, Результат);
	Иначе
		ЗаполнитьУточненныеКонтакты(ДополнительныеПараметры.соотвТабЧастей, Результат);
	КонецЕсли;

	// Сформируем представления контактов.
	СформироватьПредставленияКонтактов();
	
	ОбновитьСписокСписокПоследнихАдресов();
	
	УстановитьВидимостьПолучателейПисьма();
	
	// Установим признак модифицированности.
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодобранныхПолучателей(соотвТабЧастей, Результат)

	Для Каждого ТабЧасть Из соотвТабЧастей Цикл
		ТабЧасть.Значение.Очистить();
	КонецЦикла;
	
	Для Каждого Элемент Из Результат Цикл
		
		ТабЧасть = соотвТабЧастей.Получить(Элемент.Группа);
		Если ТабЧасть = Неопределено Тогда
			ТабЧасть = ПолучателиПисьма;
		КонецЕсли;
		
		новСтр = ТабЧасть.Добавить();
		новСтр.Адрес = Элемент.Адрес;
		новСтр.Представление = Элемент.Представление;
		новСтр.Контакт = Элемент.Контакт;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУточненныеКонтакты(соотвТабЧастей, соотвКонтактов)
	
	ПолучателиПисьма.Очистить();
	ПолучателиКопий.Очистить();
	ПолучателиСкрытыхКопий.Очистить();
	Объект.ПолучателиОтвета.Очистить();
	
	Для каждого ЭлементМассива Из соотвКонтактов Цикл
		
		Если ЭлементМассива.Группа = "Кому" Тогда
			ТаблицаПолучателей = ПолучателиПисьма;
		ИначеЕсли ЭлементМассива.Группа = "Копии" Тогда
			ТаблицаПолучателей = ПолучателиКопий;
		ИначеЕсли ЭлементМассива.Группа = "Скрытые" Тогда
			ТаблицаПолучателей = ПолучателиСкрытыхКопий;
		Иначе
			ТаблицаПолучателей = Объект.ПолучателиОтвета;
		КонецЕсли;
		
		СтрокаПолучатели = ТаблицаПолучателей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПолучатели, ЭлементМассива);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставленияКонтактов() Экспорт
	
	Объект.СписокПолучателейПисьма		 = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(ПолучателиПисьма,       Ложь);
	Объект.СписокПолучателейКопий		 = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(ПолучателиКопий,        Ложь);
	Объект.СписокПолучателейСкрытыхКопий = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(ПолучателиСкрытыхКопий, Ложь);

КонецПроцедуры

&НаСервере
Функция ВыполнитьОтправкуНаСервере(Пароль = Неопределено)
	
	текОбъект = РеквизитФормыВЗначение("Объект");
	
	Попытка
		
		ПараметрыПисьма = CRM_Взаимодействия.ПараметрыПисьмаДляОтправки(текОбъект);
		ИдентификаторПисьма = CRM_Взаимодействия.CRM_ВыполнитьОтправкуПисьма(текОбъект, , ПараметрыПисьма);
	
	Исключение
		ЗначениеВРеквизитФормы(текОбъект, "Объект");
		
		Если ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем")
		И НЕ Предмет = Документы.CRM_РассылкаЭлектронныхПисем.ПустаяСсылка() Тогда
			// Если не удалось отправить Письмо, добавим информацию об этом в РС CRM_НеОтправленныеПисьма.
			CRM_УправлениеЭлектроннойПочтой.ДобавитьЗаписьОНеотправленномПисьме(Объект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	текОбъект.ИдентификаторСообщения = ИдентификаторПисьма;
	Если ПараметрыПисьма.Свойство("ПротоколПочты") И ПараметрыПисьма.ПротоколПочты = "IMAP" Тогда
		текОбъект.ИдентификаторСообщенияОтправкаIMAP = ПараметрыПисьма.ИдентификаторСообщения;
	КонецЕсли;
	текОбъект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено");
	текОбъект.ДатаОтправления = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	// { VOG RMV 2019-03-06
	// Всё, что касается интереса не используется
	//CRM_ТаблицаИнтересовЗнач = РеквизитФормыВЗначение("CRM_ТаблицаИнтересов",Тип("ТаблицаЗначений"));
	//текОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",CRM_ТаблицаИнтересовЗнач);
	// } VOG RMV 2019-03-06
	текОбъект.Записать(РежимЗаписиДокумента.Запись);
	Папка = CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(текОбъект.УчетнаяЗапись,Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные);
	ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(
		Объект.Ссылка, Папка);
	
	Если ЗначениеЗаполнено(текОбъект.CRM_ТипОтвета) Тогда
		CRM_ОбщегоНазначенияСервер.ДобавитьЗаписьИнформацииОПисьме(текОбъект.Ссылка);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(текОбъект, "Объект");
	
	// Проверим нет ли записи в РС CRM_НеОтправленныеПисьма по этому письму
	// если есть, то удалим.
	CRM_УправлениеЭлектроннойПочтой.УдалитьЗаписьОНеотправленномПисьме(Объект.Ссылка);
	
	Возврат "";

КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОснованияБизнесПроцесса(Знач ИмяКоманды = Неопределено)
	СтруктураРезультат = Новый Структура("Основание,КартаМаршрута,ИспользоватьВИнтересах", Объект.Ссылка, Объект.CRM_Проект.CRM_КартаМаршрута, Объект.CRM_Проект.CRM_КартаМаршрута.ИспользоватьВИнтересах);
	
	Если ИмяКоманды <> Неопределено Тогда
		Если Найти(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_") > 0 Тогда
			ИдентификаторСсылки = Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_", ""), "_", "-"));
			ТочкаМаршрутаСсылка = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(ИдентификаторСсылки);
			Если ЗначениеЗаполнено(ТочкаМаршрутаСсылка) Тогда
				СтруктураРезультат.Вставить("ТочкаСтарта", ТочкаМаршрутаСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаСервере
Функция ВернутьЗаголовокКоманды(ИмяКоманды)
	
	Возврат Команды[ИмяКоманды].Заголовок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	
	Форма.Элементы.ГруппаТабПолучателей.Видимость				= Форма.Элементы.СкрытьПоказатьПолучателей.Пометка;
	Форма.Элементы.ГруппаТабПолучателейКопии.Видимость			= Форма.Элементы.СкрытьПоказатьПолучателейКопии.Пометка;
	Форма.Элементы.ГруппаТабПолучателейСкрытыеКопии.Видимость	= Форма.Элементы.СкрытьПоказатьПолучателейСкрытыеКопии.Пометка;
	Форма.Элементы.Вложения.Видимость							= Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСкорректироватьПолучателейПисьма()
	
	//Если ПолучателиПисьма.Количество() > 0 Тогда
		Объект.ПолучателиПисьма.Очистить();
		Для Каждого СтрокаПолучателя Из ПолучателиПисьма Цикл
			НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
		КонецЦикла;
	//КонецЕсли;
	
	//Если ПолучателиКопий.Количество() > 0 Тогда
		Объект.ПолучателиКопий.Очистить();
		Для Каждого СтрокаПолучателя Из ПолучателиКопий Цикл
			НоваяСтрока = Объект.ПолучателиКопий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
		КонецЦикла;
	//КонецЕсли;
	
	//Если ПолучателиСкрытыхКопий.Количество() > 0 Тогда
		Объект.ПолучателиСкрытыхКопий.Очистить();
		Для Каждого СтрокаПолучателя Из ПолучателиСкрытыхКопий Цикл
			НоваяСтрока = Объект.ПолучателиСкрытыхКопий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
		КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыПолучателей()
	
	Для Каждого СтрокаПолучателя Из Объект.ПолучателиПисьма Цикл
		НоваяСтрока = ПолучателиПисьма.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
	КонецЦикла;
	
	Для Каждого СтрокаПолучателя Из Объект.ПолучателиКопий Цикл
		НоваяСтрока = ПолучателиКопий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
	КонецЦикла;
	
	Для Каждого СтрокаПолучателя Из Объект.ПолучателиСкрытыхКопий Цикл
		НоваяСтрока = ПолучателиСкрытыхКопий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКнопкиПоУмолчанию()
	
	Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
		Элементы.Отправить.Заголовок = Нстр("ru = 'Отправить'");
	ИначеЕсли Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее Тогда
		Элементы.Отправить.Заголовок = Нстр("ru = 'Отправить сейчас'");
	ИначеЕсли Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		//Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			НастройкиРаботыСПочтой = Взаимодействия.ПолучитьНастройкуРаботаСПочтой();
			Если НастройкиРаботыСПочтой.Свойство("ОтправлятьСообщенияСразу") И НастройкиРаботыСПочтой.ОтправлятьСообщенияСразу Тогда
				ОтправлятьСообщенияСразу = Истина;
			КонецЕсли;
		//КонецЕсли;
		
		Элементы.Отправить.Заголовок = Нстр("ru = 'Отправить'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляОтправки(УчетнаяЗапись)
	Возврат УчетнаяЗапись.ИспользоватьДляОтправки;
КонецФункции

&НаСервере
Процедура ПеренестиПрисоединенныеФайлы(ПисьмоСсылка)
	
	Если Объект.Ссылка.Пустая() Тогда
		СписокОтбора = Новый СписокЗначений;
		Для Каждого ТекущиеДанные Из СписокФайловСобытия Цикл
			Если ТекущиеДанные.Пометка Тогда
				СписокОтбора.Добавить(ТекущиеДанные.Значение);
			КонецЕсли;
		КонецЦикла;
		Если СписокОтбора.Количество() > 0 Тогда
			CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(Предмет, ПисьмоСсылка, СписокОтбора);				
		КонецЕсли;
	КонецЕсли;
	
	СписокФайловСобытия.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайловДляКопирования(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		СписокФайловСобытия = Результат;
	Иначе
		СписокФайловСобытия.Очистить();
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайловДляКопированияБЗ(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ЭтотОбъект["бзСписокФайловРешения"] = Результат;
	Иначе
		ЭтотОбъект["бзСписокФайловРешения"].Очистить();
	КонецЕсли;	
	
	Если ЭтотОбъект["бзСписокФайловРешения"].Количество() > 0 Тогда
		Записывать = Истина;
	Иначе
		Записывать = Ложь;
	КонецЕсли;
	
	бзСкопироватьПрисоединенныеФайлыИзРешенияВПисьмо();
	
	Если Записывать Тогда
		Записать();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваКнопкиРазрешитьРедактирование()
	
	Если ЭтоПисьмоРассылки Тогда
		Элементы.ТекстРазрешитьРедактирование.Заголовок = ?(Объект.CRM_РазрешеноРедактирование,НСтр("ru = 'Отменить редактирование'"),НСтр("ru = 'Разрешить редактирование'"));
	Иначе
		Элементы.ТекстРазрешитьРедактирование.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПодсказкуОбАктивныхИнтересах()
	CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНовогоДокумента()
	
	НоваяСсылка = Документы.ЭлектронноеПисьмоВходящее.ПолучитьСсылку();
	
	Возврат НоваяСсылка;
	
КонецФункции

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииИПриЧтенииНаСервере();
	
	CRM_Теги.ПриЧтенииНаСервере(ЭтотОбъект, Элементы);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	
	КэшТипыСправочниковПрисоединенныхФайлов = ПолучитьОписаниеТиповПрисоединенныхФайлов();
	
	// Заполним список кодировок
	СписокКодировок = ВзаимодействияКлиентСервер.СписокКодировок();
	
	Для Каждого Элемент Из СписокКодировок Цикл
		
		Элементы.Кодировка.СписокВыбора.Добавить(Элемент.Значение);
		
	КонецЦикла;
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Элементы.Ответственный.КнопкаВыбора = Истина;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		Элементы.Ответственный.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииИПриЧтенииНаСервере();
		Взаимодействия.УстановитьПредметПоДаннымЗаполнения(Параметры, Предмет);
		Если НЕ ЗначениеЗаполнено(Предмет) И Параметры.Свойство("Основание") И CRM_ВзаимодействияСервер.ЯвляетсяПредметом(Параметры.Основание) Тогда
			Предмет = Параметры.Основание;
		КонецЕсли;
	КонецЕсли;
	
	// Запретим изменение документа пользователям, которых нет в учетной записи или нет права записи.
	//ЗаполнятьПервичныйИнтерес = Ложь;
	НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
	
	ПредставлениеУчетнойЗаписи = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеАдресата(Объект.УчетнаяЗапись.ИмяПользователя, Объект.УчетнаяЗапись.АдресЭлектроннойПочты, "");
	Заголовок = CRM_ОбщегоНазначенияСервер.ПолучитьЗаголовокФормыДокумента(Объект.Ссылка,ПредставлениеУчетнойЗаписи);
	
	// Установим папку по учетной записи.
	Если Объект.Ссылка.Пустая() Тогда
		Папка = CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(Объект.УчетнаяЗапись,Перечисления.CRM_ВидыПапокЭлектроннойПочты.Черновики);
	Иначе
		Папка = Взаимодействия.ПолучитьПапкуЭлектронногоПисьма(Объект.Ссылка);
	КонецЕсли;
	
	//Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор","#");
	Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьма","#");
	
	Элементы.Предмет.Видимость = ЗначениеЗаполнено(Предмет);
	Элементы.ИзменитьПредмет.Видимость = Истина;
	Элементы.ПредметИзменение.Видимость = Ложь;
	
	ТекущаяКодировка = Объект.Кодировка;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		
		ПараметрыРаботыПользователяПользователя =
			Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
			Объект.УчетнаяЗапись,
			ФорматСообщения,
			?(Объект.ВзаимодействиеОснование = Неопределено, Истина, Ложь));
		
		Объект.УведомитьОДоставке            = ПараметрыРаботыПользователяПользователя.УведомитьОДоставке;
		Объект.УведомитьОПрочтении           = ПараметрыРаботыПользователяПользователя.УведомитьОПрочтении;
		Объект.ВключатьТелоИсходногоПисьма   = ПараметрыРаботыПользователяПользователя.ВключатьТелоИсходногоПисьма;
		Объект.ОтображатьТелоИсходногоПисьма = ПараметрыРаботыПользователяПользователя.ОтображатьТелоИсходногоПисьма;
		
	КонецЕсли;
	
	ВключатьТелоИсходногоПисьмаНастройка = Объект.ВключатьТелоИсходногоПисьма;
	
	// СтандартныеПодсистемы.Свойства.
	// Обработчик механизма "Свойства".
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	//ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);	
	// Конец СтандартныеПодсистемы.Свойства
	
	//ЗаполнитьТаблицыПолучателей();
		
	Если Объект.CRM_РедактироватьТекстИсходногоПисьма Тогда
		Объект.ОтображатьТелоИсходногоПисьма = Ложь;
		Элементы.ОтображатьТекстПисьмаОснования.Доступность = Ложь;
		Элементы.ГруппаВходящее.Видимость = Ложь;
	КонецЕсли;
	Элементы.РедактироватьТекстПисьмаОснования.Пометка = Объект.CRM_РедактироватьТекстИсходногоПисьма;
	
	Элементы.РедактироватьТекстПисьмаОснования.Доступность = (НЕ Объект.ВзаимодействиеОснование = Неопределено 
		И НЕ Объект.ВзаимодействиеОснование.Пустая()
		И Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик
		И (ТипЗнч(Объект.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		ИЛИ ТипЗнч(Объект.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")));
	//
	
	ЭтотОбъект._Партнер = ОпределитьПартнера();
		
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	// ++ VOG Солодов В.В. 12.05.2020 CRM-631
	Если Параметры.Свойство("Основание")
		И ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		// ++ VOG Солодов В.В. 23.06.2020 CRM-658
		ОтображатьВложения = Ложь;
		
		Если Параметры.Свойство("Файлы") Тогда
			ОтображатьВложения = Параметры.Файлы.Количество() > 0;
		ИначеЕсли Параметры.Свойство("Вложения") Тогда
			ОтображатьВложения = Вложения.Количество() > 0;
		КонецЕсли;
		// -- VOG Солодов В.В. 23.06.2020
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Вложения",
			"Видимость",
			// ++ VOG Солодов В.В. 23.06.2020 CRM-658
			ОтображатьВложения);
			// До изменения
			//Вложения.Количество() > 0);
			// -- VOG Солодов В.В. 23.06.2020
		
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Вложения",
			"Видимость",
			Ложь);
	КонецЕсли;
	// До изменения
	//Элементы.Вложения.Видимость = Ложь;
	// -- VOG Солодов В.В. 12.05.2020
	СформироватьПредставлениеВложений();
	
	ПолучитьСписокПоследнихАдресов();

	ИспользоватьБизнесПроцессы = Константы.CRM_ИспользоватьБизнесПроцессы.Получить();
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
	// +БазаЗнаний
	// Создаем на форме элементы базы знаний.
	Если CRM_БазаЗнанийСервер.бзЗаполнениеБазыЗнанийВФорме(ЭтотОбъект, Объект.Ссылка, "бзГруппаБазаЗнаний") Тогда
		// Заполняем таблицу используемых решений.
		бзЗаполнитьИспользуемыеРешения();
		// Установим доступность полнотекстового поиска.
		CRM_БазаЗнанийСервер.бзДоступностьПолнотекстовыйПоискСписокРешений(ЭтотОбъект);
	КонецЕсли;	
	// -БазаЗнаний
	//CRM_ОбщегоНазначенияСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, Объект, "ГруппаИнтерес", ТипЗнч(Объект.Ссылка));
	//CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, Истина, , ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая(), Предмет);	
	//CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);
	
	ПереключательИзHTMLФайла = Число(Объект.CRM_ИзHTMLФайла);
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	
	
	Если Параметры.Свойство("Файлы") тогда
		   ПереданныеФайлы.ЗагрузитьЗначения(Параметры.Файлы);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьКорректностьАдресов()
	бЕстьОшибки = Ложь;
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(Объект.СписокПолучателейПисьма,,ЕстьОшибки);
	Если ЕстьОшибки Тогда
		бЕстьОшибки = Истина;
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки<>0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение, , "Объект.СписокПолучателейПисьма");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(Объект.СписокПолучателейКопий,,ЕстьОшибки);
	Если ЕстьОшибки Тогда
		бЕстьОшибки = Истина;
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки<>0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение, , "Объект.СписокПолучателейКопий");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(Объект.СписокПолучателейСкрытыхКопий,,ЕстьОшибки);
	Если ЕстьОшибки Тогда
		бЕстьОшибки = Истина;
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки<>0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение, , "Объект.СписокПолучателейСкрытыхКопий");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Не бЕстьОшибки;
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Не ПроверитьКорректностьАдресов() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Если СтрокаТаблицыВложений.Расположение = 2 Тогда
				Попытка
					Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
					СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Данные, "");
					СтрокаТаблицыВложений.Расположение = 4;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,"Вложения",, Отказ);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Объект.ЕстьВложения = (Вложения.Количество() <> 0);
	
	ПроверитьСкорректироватьПолучателейПисьма();
	
	Если ИзмененШаблонHTML Тогда
		
		УдалитьВременныеФайлы();
		
		Если ПустаяСтрока(ИмяФайлаШаблона) Тогда Возврат; КонецЕсли;
		
		АдресХранилища = "";
		Если ПоместитьФайл(АдресХранилища, ИмяФайлаШаблона,,Ложь,УникальныйИдентификатор) Тогда
			
			ПолучитьИменаФайловНаКлиенте(АдресХранилища, ИмяФайлаШаблона);
			
			Пропустить = Истина;
			Для Каждого СтрокаКартинки ИЗ СоответствиеФайлов Цикл
				// Пропустим первую строку
				Если Пропустить Тогда
					Пропустить= Ложь;
					Продолжить;
				КонецЕсли;
				
				АдресХранилищаКартинки = "";
				Если ПоместитьФайл(АдресХранилищаКартинки, КаталогФайла + СтрокаКартинки.ИмяНаКлиенте,,Ложь,УникальныйИдентификатор) Тогда
					
					СтрокаКартинки.ИмяНаСервере = ВернутьИмяФайлаКартинкиНаСервере(КаталогФайла + СтрокаКартинки.ИмяНаКлиенте, АдресХранилищаКартинки, КаталогФайла + СтрокаКартинки.ИмяНаКлиенте);
					
				КонецЕсли;
			КонецЦикла;
			
			ТекстHTML = ПропаситьHTML();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ПереданныйТекстHTML)
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ПереданныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		Если АтрибутИсточникКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(АтрибутИсточникКартинки.ТекстовоеСодержимое, "://") > 0 Тогда
			РезультатСкаченногоФайла = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АтрибутИсточникКартинки.ТекстовоеСодержимое);
			
			Если НЕ РезультатСкаченногоФайла = Неопределено И РезультатСкаченногоФайла.Статус Тогда
				НоваяКартинка = Новый Картинка(ПолучитьИзВременногоХранилища(РезультатСкаченногоФайла.Путь));
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла = АтрибутИсточникКартинки.ТекстовоеСодержимое;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
				НоваяСтрока.Картинка = НоваяКартинка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ДокументHTMLТекущегоПисьмаПодготовлен = Ложь;
	
	// Подготовим документ HTML из содержимого форматированного документа.
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
		 И ТекущийОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		 
		Если ТекущийОбъект.CRM_ИзHTMLФайла И ИзмененШаблонHTML Тогда
			ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
			
			СтруктураВложений		= Новый Структура;
			
			Если ЗначениеЗаполнено(Шаблон) И Шаблон.ИзHTMLФайла Тогда
				ТекущийОбъект.ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Шаблон, Шаблон.Текст, СтруктураВложений);
				
				ЗаполнитьАвтотекст(ТекущийОбъект.ТекстHTML);
				
				Для каждого Вложение Из СтруктураВложений Цикл
					
					НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
					НоваяСтрока.ИмяФайла = Вложение.Ключ;
					НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
					НоваяСтрока.Картинка = Вложение.Значение;
					
				КонецЦикла;
				
				ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстHTML);
			Иначе
				Если ПустаяСтрока(ИмяФайлаШаблона) Тогда Возврат; КонецЕсли;
				
				ЗаполнитьАвтотекст(ТекстHTML);
				
				ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
				ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ТекстHTML);
				
				СтруктураВложений	= Новый Структура;
				ДокументHTML		= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
				
				Для каждого Картинка Из ДокументHTML.Картинки Цикл
					АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
					
					ПолныйПутьККартинке = СтрЗаменить(АтрибутИсточникКартинки.Значение,"/","\");
					ФайлКартинки = Новый Файл(ПолныйПутьККартинке);
					
					Если ФайлКартинки.Существует() Тогда
						
						МассивНайденых = ТаблицаСоответствийИменВложенийИдентификаторам.НайтиСтроки(Новый Структура("ИмяФайла",АтрибутИсточникКартинки.Значение));
						Если МассивНайденых.Количество() > 0 Тогда Продолжить; КонецЕсли;
						
						НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
						НоваяСтрока.ИмяФайла = АтрибутИсточникКартинки.Значение;
						НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
						НоваяСтрока.Картинка = Новый Картинка(ПолныйПутьККартинке);
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
				
				Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
				ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
				ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
			КонецЕсли;
		Иначе
			// Т.к. это письмо рассылки и его не радактировали, вложения писать не требуется.
			Если ЭтоПисьмоРассылки И НЕ Объект.CRM_РазрешеноРедактирование Тогда
				ТекущийОбъект.ТекстHTML = Предмет.ТекстHTML;
				ТекущийОбъект.Текст     = Предмет.Текст;
			Иначе
				ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
				
				СтруктураВложений = Новый Структура;
				ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекущийОбъект.ТекстHTML, СтруктураВложений);
				
				ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ТекущийОбъект.ТекстHTML);
				
				Для каждого Вложение Из СтруктураВложений Цикл
					
					НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
					НоваяСтрока.ИмяФайла = Вложение.Ключ;
					НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
					НоваяСтрока.Картинка = Вложение.Значение;
					
				КонецЦикла;
			КонецЕсли;
			
			Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
				
				ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстHTML);
				Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
				ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
				ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		ТекущийОбъект.Текст = ТекстПисьма;
		
	КонецЕсли;
	
	Если НеобходимаОбработкаПисьмаОснования() И НЕ Объект.CRM_РедактироватьТекстИсходногоПисьма Тогда
		
		Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			
			ТекущийОбъект.ТекстHTML = СформироватьТекстПисьмаВключаяПисьмоОснование(
				?(ДокументHTMLТекущегоПисьмаПодготовлен,ДокументHTML,Неопределено), ТекущийОбъект);
				
			ТекущийОбъект.Текст = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъект.ТекстHTML);
			
		Иначе
			
			ТекущийОбъект.Текст = СформироватьТекстПисьмаВключаяПисьмоОснование(Неопределено, ТекущийОбъект);
			
		КонецЕсли;
		
	Иначе
		
		Если ДокументHTMLТекущегоПисьмаПодготовлен Тогда
			
			ТекущийОбъект.ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			ТекущийОбъект.Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъект.ТекстHTML);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняетсяОтправка И ((ТекущийОбъект.ПолучателиКопий.Количество() = 0)
	И (ТекущийОбъект.ПолучателиПисьма.Количество() = 0)
	И (ТекущийОбъект.ПолучателиСкрытыхКопий.Количество() = 0)) Тогда
		
		ВыполняетсяОтправка	= Ложь;
		Отказ				= Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указано ни одного получателя.'"));
		
	КонецЕсли;
	
	Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		
		ТекущийОбъект.ПисьмаВложения.Очистить();
		ИндексСтроки = 1;
		Для Каждого Вложение Из Вложения Цикл
			
			Если Вложение.Расположение = 5 И ЗначениеЗаполнено(Вложение.Письмо) Тогда
				НоваяСтрока = ТекущийОбъект.ПисьмаВложения.Добавить();
				НоваяСтрока.Письмо                     = Вложение.Письмо;
				НоваяСтрока.ПорядковыйНомерВоВложениях = ИндексСтроки;
			КонецЕсли;
			
			ИндексСтроки =  ИндексСтроки + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Если ВыполняетсяОтправка И Не ОтправлятьСообщенияСразу Тогда
	Если ВыполняетсяОтправка Тогда
		
		Папка = CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(ТекущийОбъект.УчетнаяЗапись,Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие);
		ТекущийОбъект.СтатусПисьма	= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
		
	КонецЕсли;
	
	ТекущийОбъект.Размер = ОценитьРазмерПисьма();
	
	// { VOG RMV 2019-03-05
	// Всё, что касается интереса не используется
	//CRM_ТаблицаИнтересовЗнач = РеквизитФормыВЗначение("CRM_ТаблицаИнтересов",Тип("ТаблицаЗначений"));
	//ТекущийОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",CRM_ТаблицаИнтересовЗнач);
	// } VOG RMV 2019-03-05
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);
	
	Если Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущийОбъект.CRM_ИзHTMLФайла ИЛИ (ТекущийОбъект.CRM_ИзHTMLФайла И ИзмененШаблонHTML) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Письмо = ТекущийОбъект.Ссылка;
		
		// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
		ТаблицаВложенийКартинокФорматированногоДокумента = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
		Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
			УдаленныеВложения.Добавить(Вложение.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	// Удалим удаленные вложения
	Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
		Если ТипЗнч(УдаленноеВложение.Значение) = Тип("СправочникСсылка.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы") Тогда
			ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
			ОбъектВложение.Удалить();
		КонецЕсли;			
	КонецЦикла;
	
	УдаленныеВложения.Очистить();
	
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		Если ЭтоПисьмоРассылки И НЕ Объект.CRM_РазрешеноРедактирование Тогда
			// Т.к. это письмо рассылки и его не радактировали, вложения писать не требуется.
		Иначе
			Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
				
				ИмяФайлаВложения = "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_") + "." + Вложение.Картинка.Формат();
				
				ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
				АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
				ПрисоединенныйФайл = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				                     Письмо,
				                     АдресКартинкиВоВременномХранилище,
				                     ИмяФайлаВложения,
				                     ДвоичныеДанныеКартинки.Размер());
				
				Если ПрисоединенныйФайл <> Неопределено Тогда
					ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
					ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
					ПрисоединенныйФайлОбъект.Записать();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НеобходимаОбработкаПисьмаОснования() Тогда
		
		ВложенияПисьмаОснования = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Объект.ВзаимодействиеОснование);
		
		Для Каждого Вложение Из ВложенияПисьмаОснования Цикл
			
			ДвоичныеДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(Вложение.Ссылка);
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			ПрисоединенныйФайл = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			Письмо,АдресКартинкиВоВременномХранилище,Вложение.Ссылка.Наименование+"."+Вложение.Ссылка.Расширение, Вложение.Размер);
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИДФайлаЭлектронногоПисьма;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
		
		Если НЕ СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма = "" И НЕ СтрокаТаблицыВложений.ИДФайлаЭлектронногоПисьма = "#" Тогда
			Продолжить;
		КонецЕсли;
		
		Размер = 0;
		ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
		
		Если СтрокаТаблицыВложений.Расположение = 4 Тогда
			// из временного хранилища
			CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ИмяФайла, Размер);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 3 Тогда
			// из файла на сервере
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 1 Тогда
			
			CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
				Письмо, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 0 Тогда
			// перезаписать вложение
			Если ЭтоПисьмоРассылки И Объект.CRM_РазрешеноРедактирование И МенялиФлагРедактирования Тогда
				СтрокаТаблицыВложений.Ссылка = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
												Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ИмяФайла, Размер);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицыВложений.Расположение = 0;
		
	КонецЦикла;
	
	МенялиФлагРедактирования = Ложь;
	
	ЗаписатьПервичныйИнтерес(ТекущийОбъект);
	
	СохранитьСписокСписокПоследнихАдресов();
	
	ПеренестиПрисоединенныеФайлы(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Взаимодействия.УстановитьПредмет(Объект.Ссылка, Предмет);
	
	ЗаполнитьВложения();
	
	Если Объект.СтатусПисьма <> ТекущийСтатусПисьма Тогда
		
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(Объект.Ссылка, Папка);
		ТекущийСтатусПисьма = Объект.СтатусПисьма;
		
	КонецЕсли;
	
	Если НЕ ТекущийОбъект.CRM_ИзHTMLФайла И ТекущийОбъект.ТипТекста<>Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		ТекстПисьма = CRM_Взаимодействия.CRM_ОбработатьТекстHTML(ТекущийОбъект.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
	ИзмененШаблонHTML = Ложь;
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// +CRM
	// оповестить взаимодействия о создании сделки.
	Оповестить("СозданПредметВзаимодействия");
	ДоступностьПервичногоИнтереса();
	// +БазаЗнаний
	// Сохраняем используемые решения.
	Если НЕ (Элементы.Найти("бзРешения") = Неопределено) Тогда
		бзСохранитьИспользуемыеРешения();
	КонецЕсли;
	// -БазаЗнаний	
	УжеЗаписан = Ложь;
	
	Элементы.Ответственный.ТолькоПросмотр = Истина;
	Элементы.Ответственный.КнопкаВыбора = Ложь;
	// -CRM
	
	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект,
		Объект,
		ПараметрыЗаписи,
		"ЭлектронноеПисьмоИсходящее");
	
	ОбновитьОтображениеДанных();
	Если ЗначениеЗаполнено(Взаимодействие) Тогда
		CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Партнеры") ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
	ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Если НЕ ИмяЭлемента = "" Тогда
			ТекДанные			= ЭтотОбъект[ИмяЭлемента].НайтиПоИдентификатору(ИдентификаторСтрокиПолучателя);
			ТекДанные.Контакт	= НовыйОбъект;
			ИмяЭлемента			= "";
			
			Если ИмяЭлемента = "ПолучателиПисьма" Тогда
				ЭтотОбъект._Партнер = ОпределитьПартнера();
				ПриИзмененииПартнера();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// +CRM
	ПроверкаЗаполнения(ПроверяемыеРеквизиты);
	// -CRM
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если флОтказ Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'У пользователя нет ни одной учетной записи электронной почты.'"), 10);
		Отказ = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СписокПолучателейПисьма) Тогда
		//ЭтаФорма.ТекущийЭлемент = Элементы.Текст;
		//ЭтаФорма.ТекущийЭлемент = Элементы.ТекстПисьмаФорматированныйДокумент;
	Иначе
		ТекущийЭлемент = Элементы.СписокПолучателейПисьма;
	КонецЕсли;
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	ДоступностьПервичногоИнтереса();
	Элементы.КнопкаУведомитьОДоставке.Пометка		= Объект.УведомитьОДоставке;
	Элементы.КнопкаУведомитьОПрочтении.Пометка		= Объект.УведомитьОПрочтении;
	Элементы.ВключатьТелоИсходногоПисьма.Пометка	= Объект.ВключатьТелоИсходногоПисьма;
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		//Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор","#");
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьма","#");
	КонецЕсли;
	СформироватьПредставлениеВложений();	
	УстановитьВидимостьПолучателейПисьма();
	// +БазаЗнаний
	Если НЕ (Элементы.Найти("бзРешения") = Неопределено) И ЭтотОбъект["бзРешения"].Количество() > 0 Тогда
		Элементы["бзГруппаБазаЗнаний"].Видимость	= Истина;
		Элементы["бзОткрытьБазуЗнаний"].Пометка		= Истина;
		// Устанавливаем область поиска по умолчанию.
		Если ПустаяСтрока(ЭтотОбъект["бзОбластьПоиска"]) Тогда
			ЭтотОбъект["бзОбластьПоиска"] = Элементы["бзОбластьПоиска"].СписокВыбора[0].Значение;
		КонецЕсли;	
	КонецЕсли;		
	// -БазаЗнаний	
	Если СписокФайловСобытия.Количество() > 0 Тогда
		НовоеОповещение = Новый ОписаниеОповещения("ВыборФайловДляКопирования", ЭтотОбъект);
		ПараметрыФормы = Новый Структура ("СписокФайлов", СписокФайловСобытия);
		ОткрытьФорму("ОбщаяФорма.CRM_ФормаВыбораФайловДляКопирования", ПараметрыФормы,,,,,НовоеОповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
		Возврат;
	КонецЕсли;
	
	// Если вложения пришли из события, то необходимо письмо записать, чтобы видеть их в таблице вложений.
	Если Объект.Ссылка.Пустая() Тогда
		Для Каждого Элемент Из СписокФайловСобытия Цикл
			Если Элемент.Пометка Тогда
				Записать();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// { VOG RMV 2019-03-05
	// Всё, что касается интереса не используется
	//CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	//CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваКоманднойПанелиИнтересовВФормеДокумента(ЭтотОбъект);
	// } VOG RMV 2019-03-05	
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ПереданныеФайлы.Количество()>0 тогда	
		Для каждого Файл из ПереданныеФайлы цикл
			ДвДанные = ПолучитьИзВременногоХранилища(Файл.Значение.АдресВХранилище);
			ПолноеИмяФайла = КаталогВременныхФайлов()+Файл.Значение.ИмяФайла;
			ДвДанные.Записать(ПолноеИмяФайла);
			новСтр = Вложения.Добавить();
			новСтр.Расположение = 4;
			Расширение = ВзаимодействияКлиентСервер.РасширениеФайла(Файл.Значение.ИмяФайла);
			новСтр.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
			новСтр.ИмяФайлаНаКомпьютере = Файл.Значение.АдресВХранилище;
			новСтр.ИмяФайла = Файл.Значение.ИмяФайла;
			новСтр.Размер = ПолучитьИзВременногоХранилища(Файл.Значение.АдресВХранилище).Размер();
			РазмерВложения = Цел(новСтр.Размер/1024);
			новСтр.РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
			новСтр.ИДФайлаЭлектронногоПисьмаОтбор = "#";
			новСтр.ИДФайлаЭлектронногоПисьма = "#";
			
		КонецЦикла;
		ОбновитьОтображениеДанных();
		СформироватьПредставлениеВложений();
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ПродолжитьОтправкуПисьма(Пароль = Неопределено)
	
	Результат = ВыполнитьОтправкуНаСервере(Пароль);
	
	Если Результат = "" Тогда
		Закрыть();
	Иначе
		РезультатБезПолучателей = СтрЗаменить(Результат, Лев(Результат,Найти(Результат, "}:")+2), "");
		Если РезультатБезПолучателей = "Не указано ни одного получателя." Тогда
			Результат = РезультатБезПолучателей;
		КонецЕсли;
		Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик");
		Записать();
		ПоказатьПредупреждение(, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПарольЗадан(УчетнаяЗапись)
	
	Возврат ЗначениеЗаполнено(ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ФормаПодтвержденияПароляУчетнойЗаписи", УчетнаяЗапись));
	
КонецФункции

&НаКлиенте
Процедура ОтправитьВыполнить()
	
	Если Не ОтправлятьСообщенияСразу Тогда
		ОтправлятьСообщенияСразу = (
		Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее"));
	КонецЕсли;
	
	ВыполняетсяОтправка = Истина;
	
	ОбъектНеЗаписан = Истина;
	
	Если Объект.Ссылка.Пустая() ИЛИ 
		Модифицированность ИЛИ
		(НЕ Объект.CRM_РедактироватьТекстИсходногоПисьма И Объект.ВключатьТелоИсходногоПисьма) ИЛИ
		(Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик")) Тогда
		Отказ = НЕ Записать();
		// Если ошибки при записи
		Если Отказ Тогда
			Возврат;
		ИначеЕсли НЕ Объект.CRM_РедактироватьТекстИсходногоПисьма Тогда
			ОбъектНеЗаписан = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ВыполняетсяОтправка = Ложь;
		
	Если ОтправлятьСообщенияСразу Тогда
		
		Если Объект.CRM_РедактироватьТекстИсходногоПисьма ИЛИ (НЕ Объект.CRM_РедактироватьТекстИсходногоПисьма И ОбъектНеЗаписан) Тогда
			Записать();
		КонецЕсли;
		
		ПродолжитьОтправкуПисьма();
	Иначе
		Закрыть();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтправителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляОтправки(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'В данной учётной записи отключена отправка писем!'"));
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Объект.УчетнаяЗапись <> ВыбранноеЗначение Тогда
		ИзменитьПодпись(Объект.УчетнаяЗапись, ВыбранноеЗначение);
	КонецЕсли;
	
	Объект.УчетнаяЗапись = ВыбранноеЗначение;
	Папка = CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(Объект.УчетнаяЗапись,"Исходящие");
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЭлементСписка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Объект.ОтправительПредставление = ЭлементСписка.Представление;
	КонецЕсли;
	
	ПолучитьСписокПоследнихАдресов();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДоступностьДокумента(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	ПараметрыДоступа = ПараметрыДоступа("Просмотр", Ссылка.Метаданные(), "Ссылка"); 	
	Возврат  ПараметрыДоступа.Доступность;
	
КонецФункции

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	// откроем форму предмета
	СтандартнаяОбработка = Ложь;
	Доступ = ПроверитьДоступностьДокумента(Предмет);
	
	Если Доступ Тогда
		
		Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", 
				Новый Структура("Ключ, ОткрытиеИзФормы", Предмет, Истина),,,,,,РежимОткрытияОкнаФормы.Независимый);
				
		ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда			
			ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента", 
				Новый Структура("Ключ, ОткрытиеИзФормы", Предмет, Истина),,,,,,РежимОткрытияОкнаФормы.Независимый);		
				
		Иначе			
			ПоказатьЗначение(, Предмет);
		КонецЕсли;
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Данный пользователь не имеет прав на просмотр этого документа!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейПисьмаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РедактироватьСписокПолучателей(Истина, "Кому");	
	
	ЭтотОбъект._Партнер = ОпределитьПартнера();
	ПриИзмененииПартнера();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейПисьмаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОжь;
	
	Если НЕ Объект.ПолучателиПисьма.Количество() = 0 Тогда
		МассивПолучателей = ПолучитьМассивПолучателей("ПолучателиПисьма");
		
		Если НЕ МассивПолучателей.Количество() = 0 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",НСтр("ru = 'Список получателей письма (Кому)'"));
			ПараметрыФормы.Вставить("МассивПолучателей",МассивПолучателей);
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаСпискаПолучателей",ПараметрыФормы,ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейКопийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОжь;
	
	Если НЕ Объект.ПолучателиПисьма.Количество() = 0 Тогда
		МассивПолучателей = ПолучитьМассивПолучателей("ПолучателиКопий");
		
		Если НЕ МассивПолучателей.Количество() = 0 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",НСтр("ru = 'Список получателей письма (Копии)'"));
			ПараметрыФормы.Вставить("МассивПолучателей",МассивПолучателей);
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаСпискаПолучателей",ПараметрыФормы,ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейСкрытыхКопийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОжь;
	
	Если НЕ Объект.ПолучателиПисьма.Количество() = 0 Тогда
		МассивПолучателей = ПолучитьМассивПолучателей("ПолучателиСкрытыхКопий");
		
		Если НЕ МассивПолучателей.Количество() = 0 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",НСтр("ru = 'Список получателей письма (Скрытые копии)'"));
			ПараметрыФормы.Вставить("МассивПолучателей",МассивПолучателей);
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаСпискаПолучателей",ПараметрыФормы,ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейКопийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РедактироватьСписокПолучателей(Истина, "Копии");	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейСкрытыхКопийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РедактироватьСписокПолучателей(Истина, "Скрытые");	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредмет(Команда)
	
	Элементы.Предмет.Видимость = Ложь;
	Элементы.ПредметИзменение.Видимость = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ПредметИзменениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПредметНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
			
КонецПроцедуры

&НаКлиенте
Процедура ПредметИзменениеОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ПредметИзменение.ВыбиратьТип = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредметИзменениеПриИзменении(Элемент)
	ПредметПредставление = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеПредметаДокумента(Предмет);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонАвтотекста(Команда)
	
	//ТекстДок = СокрЛП(СтрЗаменить(ФорматированныйДокументТекст.ПолучитьТекст(), " ", ""));
	ТекстДок = СокрЛП(СтрЗаменить(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст(), " ", ""));
	
	ТекстHTML = "";
	ВложенияHTML = Новый Структура();
	//ФорматированныйДокументТекст.ПолучитьHTML(ТекстHTML, ВложенияHTML);
	ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекстHTML, ВложенияHTML);
	
	Если Лев(НРег(Объект.Тема),3) <> "re:" И Лев(НРег(Объект.Тема),3) <> "fw:" Тогда
		ПодписьАвтора = ПолучитьПодписьПользователя(Объект.УчетнаяЗапись, Объект.Автор);
	Иначе
		ПодписьАвтора = ПолучитьПодписьПользователя(Объект.УчетнаяЗапись, Объект.Автор, Истина);
	КонецЕсли;
	
	Если НЕ ПодписьАвтора = Неопределено Тогда
		ТекстПодписиАвтора = СокрЛП(СтрЗаменить(ПодписьАвтора.ПолучитьТекст(), " ", ""))
	Иначе
		ТекстПодписиАвтора = "";
	КонецЕсли;
	
	Если НЕ Объект.CRM_ИзHTMLФайла И (((ЗначениеЗаполнено(ТекстДок) Или (ТипЗнч(ВложенияHTML) = Тип("Структура") И ВложенияHTML.Количество() > 0)) И ТекстДок <> ТекстПодписиАвтора)
	 Или (Вложения.Количество() > 0)) Тогда
	 
		КнопкиДиалогаВопрос = Новый СписокЗначений;
		
		КнопкиДиалогаВопрос.Добавить("ЗаменитьТекстИВложения", "Заменить");
		КнопкиДиалогаВопрос.Добавить("ДополнитьТекстИВложения", "Дополнить");
		КнопкиДиалогаВопрос.Добавить("Отмена", "Отмена");
		
		ТекстВопроса = НСтр("ru = 'Как поступить с текущим текстом и вложениями?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыбратьШаблонОбработатьРезультатВопроса", ЭтотОбъект), ТекстВопроса, КнопкиДиалогаВопрос,,,"Заполнение из шаблона");
		
	Иначе
		
		ВыбратьШаблонАвтотекстаПродолжение(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонОбработатьРезультатВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "ЗаменитьТекстИВложения" Тогда
		
		ВыбратьШаблонАвтотекстаПродолжение(Ложь);
	
	ИначеЕсли РезультатВопроса = "ДополнитьТекстИВложения" Тогда
		
		ВыбратьШаблонАвтотекстаПродолжение();
		
	КонецЕсли;	
	
КонецПроцедуры// ВыбратьШаблонОбработатьРезультатВопроса(РезультатВопроса, ДополнительныеПараметры)	

&НаКлиенте
Процедура ВыбратьШаблонАвтотекстаПродолжение(ДополнитьТекстИВложения = Истина)
	
	ДополнительныеПараметры = Новый Структура("ДополнитьТекстИВложения", ДополнитьТекстИВложения);
	
	ОписаниеОповещенияФормаВыбора = Новый ОписаниеОповещения("ВыбратьШаблонАвтотекстаОкончание", ЭтотОбъект, ДополнительныеПараметры);
	
	Отбор = Новый Структура("ШаблонОповещения", Ложь);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.CRM_ШаблоныРассылки.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещенияФормаВыбора);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьТемуШаблона(Шаблон)
	
	Возврат Шаблон.Тема;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьШаблонАвтотекстаОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если НЕ (РезультатВыбора = Неопределено) Тогда
		
		// Если у письма установлен тип текста "Простой текст", то при заполнении шаблона текст шаблона мы не увидим, поэтому
		// мы должны изменить тип письма и включить видимость соответствующих элементов.
		Если Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст") Тогда
			Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML");
			ОпределитьСпособРедактированияПисьма();
		КонецЕсли;			
		
		Шаблон = РезультатВыбора;
		
		Шаблон_Тема = ВернутьТемуШаблона(Шаблон);
		Если ЗначениеЗаполнено(Шаблон_Тема) Тогда
			
			ЗаполнитьАвтотекст(Шаблон_Тема);
			Объект.Тема = Шаблон_Тема;
			
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ДополнитьТекстИВложения") Тогда
			
			ДополнитьТекстИВложения = ДополнительныеПараметры.ДополнитьТекстИВложения;
			
		Иначе
			
			ДополнитьТекстИВложения = Ложь;			
		
		КонецЕсли; 
		
		ЗаполнитьПоШаблону(ДополнитьТекстИВложения);
		
		Если Объект.CRM_ИзHTMLФайла Тогда
			Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаОбычныйТекст;
			Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеHTMLДокумента;
			Элементы.ТекстПисьма.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаФорматированныйДокумент;
			ТекстПисьма = Объект.Текст;
			Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
			Элементы.ТекстПисьма.ТолькоПросмотр = Истина;
			
			Элементы.Вложения.Видимость = (Вложения.Количество() > 0);
		КонецЕсли;
		
		СформироватьПредставлениеВложений();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблону(ДополнитьТекстИВложения)
	
	Объект.CRM_ИзHTMLФайла = Шаблон.ИзHTMLФайла;
	ПереключательИзHTMLФайла = Число(Объект.CRM_ИзHTMLФайла);
	
	Если Объект.CRM_ИзHTMLФайла Тогда
		
		ИзмененШаблонHTML = Истина;
		ТекстПисьма = ВернутьТекстПисьмаПоШаблону();
		
	Иначе
		ФорматированныйДокументШаблон = ВернутьФорматированныйДокументПоШаблону(Шаблон);
		
		Если Не ДополнитьТекстИВложения Тогда
			
			СтруктураВложенийПоШаблону = Неопределено;
			ТекстHTMLПоШаблону = "";
			ФорматированныйДокументШаблон.ПолучитьHTML(ТекстHTMLПоШаблону, СтруктураВложенийПоШаблону);
			
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ТекстHTMLПоШаблону, СтруктураВложенийПоШаблону);
			
			Если Лев(НРег(Объект.Тема),3) <> "re:" И Лев(НРег(Объект.Тема),3) <> "fw:" Тогда
				ПодписьПользователя = ПолучитьПодписьПользователя(Объект.УчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь);
			Иначе
				ПодписьПользователя = ПолучитьПодписьПользователя(Объект.УчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь, Истина);
			КонецЕсли;
			
			Если ПодписьПользователя <> Неопределено Тогда
				ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ТекстПисьмаФорматированныйДокумент, ПодписьПользователя);
			КонецЕсли;
			
			Для Каждого ТекущееВложение Из Вложения Цикл
				Если ТекущееВложение.Расположение = 0 И НЕ ЗначениеЗаполнено(ТекущееВложение.ИДФайлаЭлектронногоПисьма) Тогда
					УдаленныеВложения.Добавить(ТекущееВложение.Ссылка);
				КонецЕсли;
			КонецЦикла;
			
			Вложения.Очистить();
		Иначе
			ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ТекстПисьмаФорматированныйДокумент, ФорматированныйДокументШаблон, Истина);
		КонецЕсли;
		
		Объект.Текст = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
	КонецЕсли;
	
	// Заполнение вложений по пересылаемому письму.
	табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Шаблон, Истина);
	
	Для Каждого Стр Из табВложения Цикл
		Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
			новСтр = Вложения.Добавить();
			новСтр.Ссылка								= Стр.Ссылка;
			новСтр.ИмяФайла								= Стр.ИмяФайла;
			новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
			новСтр.Размер								= Стр.Размер;
			РазмерВложения								= Цел(новСтр.Размер/1024);
			новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
			новСтр.РазмерПредставление					= Стр.РазмерПредставление;
			новСтр.Расположение							= 1;
			новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= "#";
			новСтр.ИДФайлаЭлектронногоПисьма	= "#";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВходящегоПисьмаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

// +CRM

&НаКлиенте
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
		И ТипПВХ(КаналПервичногоИнтереса)= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ИсточникПервичногоИнтереса);
		ПараметрыФормы.Вставить("СкрытьПодменюВид", Истина);
		
		ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
		
		ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
		ЭлементОтбора.ПравоеЗначение	= Истина;
		ЭлементОтбора.Использование		= Истина;
		
		ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
		ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
		ЭлементОтбора.Использование		= Истина;
		
		ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
		ЭлементОтбора.ПравоеЗначение	= НачалоДня(ТекущаяДата());
		ЭлементОтбора.Использование		= Истина;
		
		ФормаВыбора.Открыть();
	КонецЕсли;
	
	ДоступностьПервичногоИнтереса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ПоказатьЗначение(, Объект.УчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

// -CRM

&НаКлиенте
Процедура Переслать(Команда)
	
	Если Не ПроверитьНаВозможностьОтпавкиПисьма(Объект.УчетнаяЗапись) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Учетная запись не предназначена для отправки писем'"));
		Возврат;
		
	КонецЕсли;
	
	Основание = Новый Структура("Основание, Команда", Объект.Ссылка, "Переслать");
	ПараметрыОткрытия = Новый Структура("Основание, Ключ", Основание,ПолучитьСсылкуНовогоДокумента());
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
		
КонецПроцедуры

&НаКлиенте
Процедура ВсеВложения(Команда)
	
	Элементы.ФормаВсеВложения.Пометка	= НЕ Элементы.ФормаВсеВложения.Пометка;
	ВсеВложенияПометка					= Элементы.ФормаВсеВложения.Пометка;
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		//Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор","#");
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьма","#");
	КонецЕсли;
	
	СформироватьПредставлениеВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	Если Не ПроверитьНаВозможностьОтпавкиПисьма(Объект.УчетнаяЗапись) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Учетная запись не предназначена для отправки писем'"));
		Возврат;
		
	КонецЕсли;
	
	Основание = Новый Структура("Основание, Команда", Объект.Ссылка, "Ответить");
	//ПараметрыОткрытия = Новый Структура("Основание", Основание);
	ПараметрыОткрытия = Новый Структура("Основание, Ключ", Основание, Новый УникальныйИдентификатор);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	Если Не ПроверитьНаВозможностьОтпавкиПисьма(Объект.УчетнаяЗапись) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Учетная запись не предназначена для отправки писем'"));
		Возврат;
		
	КонецЕсли;
	
	Основание = Новый Структура("Основание, Команда", Объект.Ссылка, "ОтветитьВсем");
	//ПараметрыОткрытия = Новый Структура("Основание", Основание);
	ПараметрыОткрытия = Новый Структура("Основание, Ключ", Основание, Новый УникальныйИдентификатор);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсегдаПоказыватьВложения(Команда)
	
	Элементы.ФормаВсегдаПоказыватьВложения.Пометка = НЕ Элементы.ФормаВсегдаПоказыватьВложения.Пометка;
	ВсегдаПоказыватьВложения = Элементы.ФормаВсегдаПоказыватьВложения.Пометка;
	Элементы.КоманднаяПанельВложенияСкрытьПанель.Видимость = НЕ ВсегдаПоказыватьВложения;
	
	СформироватьПредставлениеВложений();	
	
КонецПроцедуры

// +CRM

////////////////////////////////////////////////////////////////////////////////
// Выполнение команд подключаемых отчетов и обработок.

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// -CRM

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПОЛЯМИ ПОЛУЧАТЕЛЕЙ

&НаСервереБезКонтекста
Функция СписокПолучателейПисьмаАвтоПодборНаСервере(СтрокаДляПоиска)
	
	СписокАдресов = Новый СписокЗначений;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц =МенеджерВТ;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
	|	Контакты.Ссылка КАК Контакт,
	|	Контакты.АдресЭП КАК АдресЭП
	|	ПОМЕСТИТЬ ВТВыборкаАдресов
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 50
	|		КонтактнаяИнформация.Ссылка КАК Ссылка,
	|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
	|	ИЗ
	|		Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
	|	ГДЕ
	|		(КонтактнаяИнформация.АдресЭП ПОДОБНО &Представление
	|		ИЛИ КонтактнаяИнформация.Ссылка.Наименование ПОДОБНО &Представление)
	|		И КонтактнаяИнформация.Тип = &Тип
	|		И НЕ(КонтактнаяИнформация.Ссылка.ПометкаУдаления)
	|";
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.МассивОписанияВозможныхКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 50
		|		КонтактнаяИнформация.Ссылка КАК Ссылка,
		|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.АдресЭП ПОДОБНО &Представление
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";		
		
	КонецЦикла;
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 50
		|		КонтактнаяИнформация.Ссылка КАК Ссылка,
		|		КонтактнаяИнформация.АдресЭП КАК АдресЭП
		|ИЗ
		|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка.Наименование ПОДОБНО &Представление
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И (НЕ КонтактнаяИнформация.Ссылка.ПометкаУдаления)
		|";		
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + ") КАК Контакты";
	
	Запрос.УстановитьПараметр("Представление","%"+СтрокаДляПоиска+"%");
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.Выполнить();
	
	// Формируем новый запрос из временной таблицы.
	
	Запрос.Текст ="ВЫБРАТЬ 
	|	Контакт,
	|	АдресЭП,
	// { VOG RMV 2019-01-23
	//Временная заглушка.
	//Коротко суть: справочник КонтактныеЛицаПартнеров когда-то был подчиненным с владельцем Партнеры
	//Исходя из этого и был написан данный запрос
	//На сегодняшний день справочник не подчиненный, соответственно, владельца нет и на этом месте система вылетает с ошибкой
	//Вот чтобы не вылетала вставлена заглушка, а нормальное решение проблемы еще предстоит найти в будущем
	//|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Контакт) = ТИП(Справочник.КонтактныеЛицаПартнеров)
	//|	ТОГДА Контакт.Владелец.Наименование
	//|	ИНАЧЕ NULL КОНЕЦ КАК Владелец
	|	NULL КАК Владелец
	// } VOG RMV 2019-01-23
	|ИЗ
	|	ВТВыборкаАдресов
	|ИТОГИ ПО
	|	АдресЭП";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		ВыборкаПоСсылкам = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока (ВыборкаПоСсылкам.Следующий()) Цикл
			
			СписокАдресов.Добавить(СокрЛП(Строка(ВыборкаПоСсылкам.Контакт))+ " <"+ Выборка.АдресЭП + "> "+ ?(ЗначениеЗаполнено(ВыборкаПоСсылкам.Владелец),"("+ВыборкаПоСсылкам.Владелец+")",""));
		
		КонецЦикла;
		
	КонецЦикла;

	Возврат СписокАдресов;
	
КонецФункции

&НаКлиенте
Процедура СписокПолучателейПисьмаПриИзменении(Элемент)
	
	ТекстРедактирования = Объект.СписокПолучателейПисьма;
	
	Если ПустаяСтрока(ТекстРедактирования) Тогда
		ПолучателиПисьма.Очистить();
		
		ЭтотОбъект._Партнер = ОпределитьПартнера();
		ПриИзмененииПартнера();
		
		Возврат;
	КонецЕсли;
	
	Длина = СтрДлина(ТекстРедактирования);
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	аа = 0;
	фф = 0;
	
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки,аа,КонецСтроки,фф);
	Элемент.УстановитьГраницыВыделения(1,фф,1,фф);
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекстРедактирования,,ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки<>0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение, , "Объект.СписокПолучателейПисьма");
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	//ПреобразоватьИменаПолучателей(ЭтаФорма, Объект.УчетнаяЗапись, Результат, "ПолучателиПисьма");
	
	ИмяТаблицы = "ПолучателиПисьма";
	ПолучателиПисьмаДанные = ЭтотОбъект[ИмяТаблицы];
	СоответствиеДанные = СоответствияАдресовИКонтактов;
	СтруктураДанных = ПреобразоватьИменаПолучателей(ПолучателиПисьмаДанные, Объект.УчетнаяЗапись, Результат, СоответствиеДанные);
	
	ЭтотОбъект[ИмяТаблицы].Очистить();
	ПолучателиТЗ = СтруктураДанных.Получатели;
	Для Каждого ПолучательЗначение Из ПолучателиТЗ Цикл
		новСтр = ЭтотОбъект[ИмяТаблицы].Добавить();
		новСтр.Адрес = ПолучательЗначение.Адрес;
		новСтр.Представление = ПолучательЗначение.Представление;
		новСтр.Контакт = ПолучательЗначение.Контакт;
	КонецЦикла;
	СоответствияАдресовИКонтактов.ЗагрузитьЗначения(СтруктураДанных.СоответствиеАдресов);
	
	ОбновитьСписокСписокПоследнихАдресов();
	
	ЭтотОбъект._Партнер = ОпределитьПартнера();
	ПриИзмененииПартнера();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейКопийПриИзменении(Элемент)
	
	ТекстРедактирования = Объект.СписокПолучателейКопий;
	
	Если ПустаяСтрока(ТекстРедактирования) Тогда
		ПолучателиКопий.Очистить();
		Возврат;
	КонецЕсли;
	
	Длина = СтрДлина(ТекстРедактирования);
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	аа = 0;
	фф = 0;
	
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки,аа,КонецСтроки,фф);
	Элемент.УстановитьГраницыВыделения(1,фф,1,фф);
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекстРедактирования,,ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки<>0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение, , "Объект.СписокПолучателейКопий");
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	//ПреобразоватьИменаПолучателей(ЭтаФорма, Объект.УчетнаяЗапись, Результат, "ПолучателиКопий");
	
	ИмяТаблицы = "ПолучателиКопий";
	ПолучателиПисьмаДанные = ЭтотОбъект[ИмяТаблицы];
	СоответствиеДанные = СоответствияАдресовИКонтактов;
	СтруктураДанных = ПреобразоватьИменаПолучателей(ПолучателиПисьмаДанные, Объект.УчетнаяЗапись, Результат, СоответствиеДанные);
	
	ЭтотОбъект[ИмяТаблицы].Очистить();
	ПолучателиТЗ = СтруктураДанных.Получатели;
	Для Каждого ПолучательЗначение Из ПолучателиТЗ Цикл
		новСтр = ЭтотОбъект[ИмяТаблицы].Добавить();
		новСтр.Адрес = ПолучательЗначение.Адрес;
		новСтр.Представление = ПолучательЗначение.Представление;
		новСтр.Контакт = ПолучательЗначение.Контакт;
	КонецЦикла;
	СоответствияАдресовИКонтактов.ЗагрузитьЗначения(СтруктураДанных.СоответствиеАдресов);

	ОбновитьСписокСписокПоследнихАдресов();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПолучателейСкрытыхКопийПриИзменении(Элемент)
	
	ТекстРедактирования = Объект.СписокПолучателейСкрытыхКопий;
	
	Если ПустаяСтрока(ТекстРедактирования) Тогда
		ПолучателиСкрытыхКопий.Очистить();
		Возврат;
	КонецЕсли;
	
	Длина = СтрДлина(ТекстРедактирования);
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	аа = 0;
	фф = 0;
	
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки,аа,КонецСтроки,фф);
	Элемент.УстановитьГраницыВыделения(1,фф,1,фф);
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекстРедактирования,,ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки<>0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение,, "Объект.СписокПолучателейСкрытыхКопий");
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	//ПреобразоватьИменаПолучателей(ЭтаФорма, Объект.УчетнаяЗапись, Результат, "ПолучателиСкрытыхКопий");
	
	ИмяТаблицы = "ПолучателиСкрытыхКопий";
	ПолучателиПисьмаДанные = ЭтотОбъект[ИмяТаблицы];
	СоответствиеДанные = СоответствияАдресовИКонтактов;
	СтруктураДанных = ПреобразоватьИменаПолучателей(ПолучателиПисьмаДанные, Объект.УчетнаяЗапись, Результат, СоответствиеДанные);
	
	ЭтотОбъект[ИмяТаблицы].Очистить();
	ПолучателиТЗ = СтруктураДанных.Получатели;
	Для Каждого ПолучательЗначение Из ПолучателиТЗ Цикл
		новСтр = ЭтотОбъект[ИмяТаблицы].Добавить();
		новСтр.Адрес = ПолучательЗначение.Адрес;
		новСтр.Представление = ПолучательЗначение.Представление;
		новСтр.Контакт = ПолучательЗначение.Контакт;
	КонецЦикла;
	СоответствияАдресовИКонтактов.ЗагрузитьЗначения(СтруктураДанных.СоответствиеАдресов);
	
	ОбновитьСписокСписокПоследнихАдресов();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокиПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЭтоАвтоПодбор Тогда
		
		НачалоСтроки = 0;
		КонецСтроки = 0;
		аа = 0;
		фф = 0;
		
		Элемент.ПолучитьГраницыВыделения(НачалоСтроки,аа,КонецСтроки,фф);
		
		ТекстДоМаркера		= Лев(Элемент.ТекстРедактирования, фф-1);
		ТекстПослеМаркера	= Сред(Элемент.ТекстРедактирования, фф);
		
		СборнаяСтрока = "";
		
		Если Найти(ТекстДоМаркера, ",") > 0 Тогда
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстДоМаркера,",");
			Для Индекс = 0 По МассивПодстрок.ВГраница() Цикл
				Если Индекс = (МассивПодстрок.Количество()-1) Тогда
					Продолжить;
				КонецЕсли;
				СборнаяСтрока = СборнаяСтрока +?(СборнаяСтрока="","",",")+ МассивПодстрок[Индекс];
			КонецЦикла;
		КонецЕсли;
		
		СборнаяСтрока = СборнаяСтрока +?(СборнаяСтрока="","",",")+ ВыбранноеЗначение;
		
		Если Найти(ТекстПослеМаркера, ",") > 0 Тогда
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстПослеМаркера,",");
			Для Индекс = 1 По МассивПодстрок.ВГраница() Цикл
				СборнаяСтрока = СборнаяСтрока +","+ МассивПодстрок[Индекс];
			КонецЦикла;
		КонецЕсли;
		
		ВыбранноеЗначение = СборнаяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпискиПолучателейПисьмаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ЭтоАвтоПодбор = (НЕ Ожидание = 0);
	
	Если НЕ Ожидание = 0 Тогда
		
		ДанныеВыбора = Неопределено;
		
		НачалоСтроки = 0;
		КонецСтроки = 0;
		аа = 0;
		фф = 0;
		
		Элемент.ПолучитьГраницыВыделения(НачалоСтроки,аа,КонецСтроки,фф);
		
		ТекстДоМаркера		= Лев(Текст, фф-1);
		ТекстПослеМаркера	= Сред(Текст, фф);
		
		ИтоговаяСтрокаДляПоиска = "";
		
		Если НЕ СокрЛП(ТекстДоМаркера) = "" И Найти(ТекстДоМаркера, ",") > 0 Тогда
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстДоМаркера,",");
			
			ИтоговаяСтрокаДляПоиска = МассивПодстрок[МассивПодстрок.Количество()-1];
		ИначеЕсли НЕ СокрЛП(ТекстДоМаркера) = "" И Найти(ТекстДоМаркера, ",") > 0 Тогда
			ИтоговаяСтрокаДляПоиска = "";
		Иначе
			ИтоговаяСтрокаДляПоиска = ТекстДоМаркера;
		КонецЕсли;
		
		Если НЕ ИтоговаяСтрокаДляПоиска = "" И СтрДлина(СокрЛП(ИтоговаяСтрокаДляПоиска)) > 0 Тогда
			СписокДляВыбора = СписокПолучателейПисьмаАвтоПодборНаСервере(СокрЛП(ИтоговаяСтрокаДляПоиска));
			Если СписокДляВыбора.Количество() > 0 Тогда
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = СписокДляВыбора;
			ИначеЕсли ИсторияАдресов.Количество() > 0 Тогда
				СписокИзИстории = Новый СписокЗначений;
				Для Каждого ЭлементИстории Из ИсторияАдресов Цикл
					Если Найти(ЭлементИстории.Представление, ИтоговаяСтрокаДляПоиска) > 0 Тогда
						СтандартнаяОбработка = Ложь;
						СписокИзИстории.Добавить(ЭлементИстории.Значение, ЭлементИстории.Представление);
					КонецЕсли;
				КонецЦикла;
				ДанныеВыбора = СписокИзИстории;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИсторияАдресов.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ИсторияАдресов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьКонтактыВыполнить()

	Если Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
		
		РедактироватьСписокПолучателей(Истина,НСтр("ru = 'Копии'"));
		
	Иначе
		
		РедактироватьСписокПолучателей(Ложь);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПисьма(Команда)
	
	ТекстИдентификаторы = Новый ТекстовыйДокумент;
	ТекстИдентификаторы.ДобавитьСтроку("Идентификатор сообщения:  " + Объект.ИдентификаторСообщения);
	ТекстИдентификаторы.ДобавитьСтроку("Идентификатор основания:  " + Объект.ИдентификаторОснования);
	ТекстИдентификаторы.ДобавитьСтроку("Идентификаторы оснований: " + 
		ПолучитьПредставлениеИдентификаторовОснований(Объект.ИдентификаторыОснований));
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Создано", Объект.Дата);
	СтруктураПараметры.Вставить("Отправлено", Объект.ДатаОтправления);
	СтруктураПараметры.Вставить("УведомитьОДоставке", Объект.УведомитьОДоставке);
	СтруктураПараметры.Вставить("УведомитьОПрочтении", Объект.УведомитьОПрочтении);
	СтруктураПараметры.Вставить("ЗаголовкиИнтернета", ТекстИдентификаторы);
	СтруктураПараметры.Вставить("Письмо", Объект.Ссылка);
	СтруктураПараметры.Вставить("ТипПисьма", "ЭлектронноеПисьмоИсходящее");
	СтруктураПараметры.Вставить("Кодировка", Объект.Кодировка);
	СтруктураПараметры.Вставить("ВнутреннийНомер", Объект.Номер);
	СтруктураПараметры.Вставить("ВключатьТелоИсходногоПисьма", Объект.ВключатьТелоИсходногоПисьма);
	СтруктураПараметры.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	СтруктураПараметры.Вставить("Папка", Папка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПараметрыПисьмаЗавершение", ЭтотОбъект);
	Результат = ОткрытьФорму("Обработка.CRM_МенеджерПочты.Форма.ПараметрыЭлектронногоПисьма",
		СтруктураПараметры, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПисьмаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Объект.СтатусПисьма <> ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено") Тогда
		
		Объект.УведомитьОДоставке          = Результат.УведомитьОДоставке;
		Объект.УведомитьОПрочтении         = Результат.УведомитьОПрочтении;
		Если Элементы.РедактироватьТекстПисьмаОснования.Пометка Тогда
			Объект.ВключатьТелоИсходногоПисьма = Ложь;
		Иначе
			Объект.ВключатьТелоИсходногоПисьма		= Результат.ВключатьТелоИсходногоПисьма;
			ВключатьТелоИсходногоПисьмаНастройка	= Объект.ВключатьТелоИсходногоПисьма;
		КонецЕсли;
		Элементы.ВключатьТелоИсходногоПисьма.Пометка	= Объект.ВключатьТелоИсходногоПисьма;		
		Элементы.КнопкаУведомитьОДоставке.Пометка		= Объект.УведомитьОДоставке;
		Элементы.КнопкаУведомитьОПрочтении.Пометка		= Объект.УведомитьОПрочтении;		
		Папка = Результат.Папка;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВЛОЖЕНИЯМИ

&НаСервере
Процедура СформироватьВложенияПослеЗаписи()
	
	Если ЭтоПисьмоРассылки И НЕ Объект.CRM_РазрешеноРедактирование И МенялиФлагРедактирования Тогда
		Для Каждого Стр Из Вложения Цикл
			Если Стр.Расположение = 0 И Стр.ИДФайлаЭлектронногоПисьма = "" Тогда
				УдаленныеВложения.Добавить(Стр.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьВложения();
	
	СтруктураВложений = Новый Структура;
	Если ЭтоПисьмоРассылки И НЕ Объект.CRM_РазрешеноРедактирование Тогда
		Объект.ТекстHTML = Предмет.ТекстHTML;
		Объект.Текст     = Предмет.Текст;
		
		Объект.ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
			Предмет, Объект.ТекстHTML,СтруктураВложений);
	Иначе
		Объект.ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
			Объект.Ссылка, Объект.ТекстHTML,СтруктураВложений);
	КонецЕсли;
	ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Объект.ТекстHTML, СтруктураВложений);
	Объект.Текст = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		
	СформироватьПредставлениеВложений();
	
КонецПроцедуры

 &НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ДобавитьВложение(Истина);
КонецПроцедуры
 
&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьВложения(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;    
	ПараметрыПеретаскивания.ДопустимыеДействия  = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Если ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение) = Истина Тогда
		ДобавитьПрисоединенныйФайлПеретаскиванием(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложение(Выбором = Ложь)
	
	Если Выбором Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеПродолжение", ЭтотОбъект);
		НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеПродолжение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
		Если ПодключеноРасширениеРаботыСФайлами Тогда	
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.МножественныйВыбор = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеЗавершение", ЭтотОбъект);
			НачатьПомещениеФайлов(ОписаниеОповещения, , Диалог, Ложь, УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
		КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьЗагрузкиВложения(ИмяФайла,
										  Размер,
										  Расширение,
                                          ВызыватьИсключение = Истина,
                                          МассивИменФайловСОшибками = Неопределено) Экспорт
	
	ОбщиеНастройки = РаботаСФайламиСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	
	// Размер файла слишком большой.
	Если Размер > ОбщиеНастройки.МаксимальныйРазмерФайла Тогда
		
		РазмерВМб     = Размер / (1024 * 1024);
		РазмерВМбМакс = ОбщиеНастройки.МаксимальныйРазмерФайла / (1024 * 1024);
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Размер файла ""%1"" (%2 Мб)
			           |превышает максимально допустимый размер файла (%3 Мб).'"),
			ИмяФайла,
			РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),
			РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		Запись = Новый Структура;
		Запись.Вставить("ИмяФайла", ИмяФайла);
		Запись.Вставить("Ошибка",   ОписаниеОшибки);
		
		МассивИменФайловСОшибками.Добавить(Запись);
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка расширения файла.
	Если Не РаботаСФайламиСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(Расширение, Ложь) Тогда
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена (""%2"").
			           |Обратитесь к администратору.'"),
			Расширение,
			ИмяФайла);			
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		Запись = Новый Структура;
		Запись.Вставить("ИмяФайла", ИмяФайла);
		Запись.Вставить("Ошибка",   ОписаниеОшибки);
		
		МассивИменФайловСОшибками.Добавить(Запись);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	

КонецФункции	

&НаКлиенте
Процедура ДобавитьВложениеЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено Тогда
		
		Для Индекс = 0 По ПомещенныеФайлы.ВГраница() Цикл
			
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПомещенныеФайлы[Индекс].Имя, ?(ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент(),"/", "\"));
			ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
			ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
			РасширениеФайла = ?(ПозицияТочки = 0, "", Прав(ИмяФайла, СтрДлина(ИмяФайла) - ПозицияТочки));
			МассивИменФайловСОшибками = Новый Массив;
			Если НЕ ПроверитьВозможностьЗагрузкиВложения(ИмяФайла, РазмерФайла(ПомещенныеФайлы[Индекс].Хранение), РасширениеФайла, Ложь, МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;

			
			новСтр						= Вложения.Добавить();
			новСтр.Расположение			= 4;
			новСтр.ИмяФайла				= ИмяФайла;
			новСтр.ИмяФайлаНаКомпьютере	= ПомещенныеФайлы[Индекс].Хранение;
			новСтр.ИндексКартинки		= РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеФайла);
			новСтр.Размер				= РазмерФайла(ПомещенныеФайлы[Индекс].Хранение);
			РазмерВложения				= Цел(новСтр.Размер/1024);
			новСтр.РазмерСтрокой   		= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
			новСтр.ИДФайлаЭлектронногоПисьмаОтбор = "#";
			новСтр.ИДФайлаЭлектронногоПисьма = "#";
		КонецЦикла;
		
		ОбновитьОтображениеДанных();
	
	КонецЕсли;
	СформироватьПредставлениеВложений();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазмерФайла(Хранение)
	Возврат ПолучитьИзВременногоХранилища(Хранение).Размер();
КонецФункции

&НаКлиенте
Процедура ДобавитьВложениеВыполнить()
	ДобавитьВложение(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложения(ТолькоВыделенные = Ложь)
	ВыделенныеВложения = Элементы.Вложения.ВыделенныеСтроки;
	Если ТолькоВыделенные Тогда
		Если ВыделенныеВложения.Количество() = 1 Тогда
			ТекстВопроса = Нстр("ru='Удалить текущее вложение?'");
		Иначе	
			ТекстВопроса = Нстр("ru='Удалить выбранные вложения?'");
		КонецЕсли;	
	Иначе	
		ТекстВопроса = Нстр("ru='Удалить все вложения?'");
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьВложенияЗавершение", ЭтотОбъект, ТолькоВыделенные);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложенияЗавершение(Ответ, ТолькоВыделенные) Экспорт
	Если НЕ (Ответ = КодВозвратаДиалога.Да) Тогда Возврат; КонецЕсли;
	ВыделенныеВложения = Элементы.Вложения.ВыделенныеСтроки;
	Если ТолькоВыделенные Тогда
		Для Каждого ВыделенноеВложение Из ВыделенныеВложения Цикл 
			ТекущееВложение = Вложения.НайтиПоИдентификатору(ВыделенноеВложение);
			Если (ТекущееВложение = Неопределено) Тогда Продолжить; КонецЕсли;
			Если ТекущееВложение.Расположение = 0 Тогда
				УдаленныеВложения.Добавить(ТекущееВложение.Ссылка);
			КонецЕсли;
			Вложения.Удалить(Вложения.Индекс(ТекущееВложение));
		КонецЦикла;	
	Иначе
		Для Каждого ТекВложение Из Вложения Цикл
			Если ТекВложение.Расположение = 0 Тогда
				УдаленныеВложения.Добавить(ТекВложение.Ссылка);
			КонецЕсли;
		КонецЦикла;			
		Вложения.Очистить();
	КонецЕсли;	
	ОбновитьОтображениеДанных();
	СформироватьПредставлениеВложений();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеВыполнить(Команда)
	УдалитьВложения(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеВложенияВыполнить(Команда)
	УдалитьВложения(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(текДанные.Ссылка, ЭтотОбъект);

	ИначеЕсли текДанные.Расположение = 2 Тогда
		#Если Не ВебКлиент Тогда
			НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер), """" + текДанные.ИмяФайлаНаКомпьютере + """");
		#КонецЕсли

	ИначеЕсли текДанные.Расположение = 4 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВложениеВыполнитьПродолжение", ЭтотОбъект, текДанные);
		НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнитьПродолжение(Подключен, текДанные) Экспорт
	
	Если Подключен Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВложениеВыполнитьЗавершение", ЭтотОбъект, текДанные);
		НачатьПолучениеКаталогаВременныхФайлов(ОписаниеОповещения);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнитьЗавершение(ИмяКаталогаВременныхФайлов, текДанные) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВложениеВыполнитьЗавершениеЗапуск", ЭтотОбъект);
	МассивФайлов = Новый Массив;
	ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла;
	ПередаваемыйФайл.Имя = текДанные.ИмяФайла;
	ПередаваемыйФайл.Хранение = текДанные.ИмяФайлаНаКомпьютере;
	МассивФайлов.Добавить(ПередаваемыйФайл);
	НачатьПолучениеФайлов(ОписаниеОповещения, МассивФайлов, ИмяКаталогаВременныхФайлов, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнитьЗавершениеЗапуск(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда Возврат; КонецЕсли;
	Для каждого Файл из ПолученныеФайлы Цикл
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер),
			// ++ VOG Солодов В.В. 29.01.2020 CRM-246
			Файл.ПолноеИмя
			// До изменения
			//"""" + Файл.Имя + """"
			// -- VOG Солодов В.В. 29.01.2020
			);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить(Команда)
	ОткрытьВложение();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложение()
	// +CRM
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда Возврат; КонецЕсли;
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(текДанные.Ссылка, УникальныйИдентификатор);
	ИначеЕсли текДанные.Расположение = 2 Тогда
		
	ИначеЕсли текДанные.Расположение = 4 Тогда
		ФайлВложения = Новый Файл(текДанные.ИмяФайла);
		РасширениеВложения = ?(ПустаяСтрока(ФайлВложения.Расширение), ФайлВложения.Расширение, Прав(ФайлВложения.Расширение, СтрДлина(ФайлВложения.Расширение)-1));
		Если РасширениеВложения = "EML" Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Это вложение не может быть сохранено.'"));
			Возврат;
		КонецЕсли;
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьВложениеПродолжение", ЭтотОбъект, Новый Структура("текДанные, РасширениеВложения", текДанные, РасширениеВложения));
		НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	КонецЕсли;
	// -CRM
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеПродолжение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	Если ПодключеноРасширениеРаботыСФайлами Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьВложениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ДополнительныеПараметры.текДанные.ИмяФайла;
		ВыборФайла.Расширение = ДополнительныеПараметры.РасширениеВложения;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ДополнительныеПараметры.РасширениеВложения, ДополнительныеПараметры.РасширениеВложения);
		
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.текДанные.ИмяФайла, ДополнительныеПараметры.текДанные.ИмяФайлаНаКомпьютере);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ВыборФайла, Ложь);
		
	Иначе
		#Если ВебКлиент Тогда
			ПолучитьФайл(ДополнительныеПараметры.текДанные.ИмяФайлаНаКомпьютере, ДополнительныеПараметры.текДанные.ИмяФайла, Истина);
		#КонецЕсли
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	Если ПолученныеФайлы <> Неопределено Тогда
		Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ПолученныеФайлы[0].Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложения(ТолькоВыделенные = Ложь)
	ВыделенныеВложения = Элементы.Вложения.ВыделенныеСтроки;
	Если ТолькоВыделенные И (ВыделенныеВложения.Количество() = 1) Тогда
		СохранитьВложение();
		Возврат;
	КонецЕсли;	
	КоличествоВложений = Вложения.Количество();
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
	СтруктураДанных = Новый Структура("ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные", 
		ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные);
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПодключеноРасширение", ЭтотОбъект, СтруктураДанных);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПодключеноРасширение(Подключено, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если Подключено Тогда
		КаталогСохранения = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
		Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
			КаталогСохранения = "";
			КаталогСохранения = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();
		КонецЕсли;
		ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.МножественныйВыбор = Ложь;
		ВыборКаталога.Каталог = КаталогСохранения;
		ДополнительныеПараметры.Вставить("ВыборКаталога", ВыборКаталога);
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПослеВыбораКаталога", ЭтотОбъект, ДополнительныеПараметры);
		ВыборКаталога.Показать(Оповещение);
        Возврат;
	Иначе
		#Если ВебКлиент Тогда
			Для НомерВложения = 0 По КоличествоВложений Цикл
				Если ТолькоВыделенные Тогда
					Если ВыделенныеВложения.Найти(НомерВложения) = Неопределено Тогда Продолжить; КонецЕсли;
				КонецЕсли;	
				ТекущееВложение = Вложения[НомерВложения];
				// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
				//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
				// 
				ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
				РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
				Если РасширениеВложения = "EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
					Продолжить;
				КонецЕсли;
				ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
			КонецЦикла;	
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборКаталога = ДополнительныеПараметры.ВыборКаталога;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
	ПроверкаСуществованияФайлов = ДополнительныеПараметры.ПроверкаСуществованияФайлов;
		
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда Возврат; КонецЕсли;
	КаталогСохранения = ВыборКаталога.Каталог;
	Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда Возврат; КонецЕсли;
	Если НЕ (Прав(КаталогСохранения, 1) = "\") Тогда
		КаталогСохранения = КаталогСохранения + "\";
	КонецЕсли;
	
	Если ПроверкаСуществованияФайлов Тогда
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ТекущийНомерВложения", 0);
		ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;		
	
	ПерезаписатьВсе		= ?(ДополнительныеПараметры.Свойство("ПерезаписатьВсе"),ДополнительныеПараметры.ПерезаписатьВсе, Ложь);
	ПереименоватьВсе	= ?(ДополнительныеПараметры.Свойство("ПереименоватьВсе"),ДополнительныеПараметры.ПереименоватьВсе, Ложь);
	Если ДополнительныеПараметры.Свойство("ТекущийНомерВложения") Тогда
		ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения + 1;
	Иначе 
		ТекущийНомерВложения = 0;
	КонецЕсли;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		Если ТолькоВыделенные Тогда
			Если ВыделенныеВложения.Найти(ТекущийНомерВложения) = Неопределено Тогда Возврат; КонецЕсли;
		КонецЕсли;	
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 						
			// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
			//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
			// 
			Если ТекущееВложение.Расположение = 4 Тогда
				ДанныеФайла = ТекущееВложение.ИмяФайлаНаКомпьютере;
				Файл = Новый Файл(ТекущееВложение.ИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				Если РасширениеВложения = ".EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
					Возврат;
				КонецЕсли;
				ДополнительныеПараметры.Вставить("РазмерФайла", ТекущееВложение.Размер);
				ДополнительныеПараметры.Вставить("ДанныеФайла", ТекущееВложение.ИмяФайлаНаКомпьютере);												
			КонецЕсли;	
		Иначе
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
			РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
			Если РасширениеВложения = "EML" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
				Возврат;
			КонецЕсли;	
			ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);							
		КонецЕсли;
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		
		// Проверяем файл на существование, и, если он существует, то выбираем дальнейшее действие.
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ПерезаписатьВсе",   ПерезаписатьВсе);
		ДополнительныеПараметры.Вставить("ПереименоватьВсе",  ПереименоватьВсе);
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);				
		Оповещение = Новый ОписаниеОповещения("ФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры)
	
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 
			Если ТекущееВложение.Расположение = 4 Тогда 
				ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
				Файл = Новый Файл(ПолноеИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				Если РасширениеВложения = ".EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
					Возврат;
				КонецЕсли;
				ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);
				ДополнительныеПараметры.Вставить("ДанныеФайла",       ТекущееВложение.ИмяФайлаНаКомпьютере);								
				ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
				Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
				Файл = Новый Файл();
				Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);						
				Возврат;
			Иначе				
				Возврат; 
			КонецЕсли;				
		КонецЕсли;						
		// Если картинка из текста письма, то ее пропускаем.
		// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
		//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
		// 			
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
		РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));		
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ДанныеФайла",       ДанныеФайла);				
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
		Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);		
	Иначе
		ПроверкаСуществованияФайлов = Ложь;
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);		
		ДополнительныеПараметры.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПроверитьПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	 ФайлПроверитьНаСуществование(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПроверитьНаСуществование(Файл, ПараметрыВложения)
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайлаДляВопроса", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайлаДляВопроса(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		СохранитьВложенияВопрос(ПараметрыВложения);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		Возврат;
	ИначеЕсли ПараметрыВложения.ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
	Иначе		
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ПараметрыВложения.ТекущийНомерВложения + 1);
		ПроверитьНаличиеФайловНаДиске(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения)
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения)
	
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайла", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайла(Существует, ПараметрыВложения) Экспорт
	
	Если Существует Тогда
		СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения);				
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения)
		
	Если ПараметрыВложения.ПерезаписатьВсе Тогда
		Оповещение = Новый ОписаниеОповещения("УстановкаТолькоЧтенияУФайла", ЭтотОбъект, ПараметрыВложения);
		Файл = ПараметрыВложения.Файл;
		Файл.НачатьУстановкуТолькоЧтения(Оповещение, Ложь);
	ИначеЕсли ПараметрыВложения.ПереименоватьВсе Тогда
		НомерПоПорядку		= "";
		ИмяБезРасширения	= ПараметрыВложения.Файл.ИмяБезРасширения;
		Расширение			= ПараметрыВложения.Файл.Расширение;
		ПараметрыВложения.Вставить("НомерПоПорядку", НомерПоПорядку);
		ПараметрыВложения.Вставить("Расширение", 	 Расширение);
		ПараметрыВложения.Вставить("ИмяБезРасширения", ИмяБезРасширения);		
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаТолькоЧтенияУФайла(ПараметрыВложения) Экспорт
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияПереименованияФайла", ЭтотОбъект, ПараметрыВложения);
	НачатьУдалениеФайлов(Оповещение, ПараметрыВложения.ПолноеИмяФайла);	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПослеУдаленияПереименованияФайла(ПараметрыВложения) Экспорт
	
	ПолноеИмяФайла	= ПараметрыВложения.ПолноеИмяФайла;
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		СсылкаНаДвоичныеДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		ИмяФайла					= ПараметрыВложения.Файл.Имя;			
	Иначе	
		ДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		СсылкаНаДвоичныеДанныеФайла = ПараметрыВложения.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		ИмяФайла	= ДанныеФайла.ИмяФайла;
	КонецЕсли;		
	
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		РазмерВМб = ПараметрыВложения.РазмерФайла;
		ПараметрыВложения.Удалить("РазмерФайла");
	Иначе		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	КонецЕсли;	
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб)
	|Пожалуйста, подождите...'"), ИмяФайла, 
	РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	Состояние(ТекстПояснения);
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, СсылкаНаДвоичныеДанныеФайла);
	ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	Если ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений - 1 Тогда
		
		// Выполняем проверку на дубли и меняем дублям имена сохраняемых файлов.
		СписокИменФайлов = Новый СписокЗначений;
		Для Каждого ПолучаемыйФайл Из ПолучаемыеФайлы Цикл
			ЭлементСписка = СписокИменФайлов.НайтиПоЗначению(ПолучаемыйФайл.Имя);
			Если ЭлементСписка = Неопределено Тогда
				СписокИменФайлов.Добавить(ПолучаемыйФайл.Имя, "0");
			Иначе
				Файл = Новый Файл(ПолучаемыйФайл.Имя);
				ЭлементСписка.Представление = Строка(Число(ЭлементСписка.Представление) + 1);
				ПолучаемыйФайл.Имя = Файл.Путь + Файл.ИмяБезРасширения + "(" + ЭлементСписка.Представление + ")" + Файл.Расширение;
			КонецЕсли;
		КонецЦикла;
		// Выполняем сохранение файлов.
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияЗавершение", ЭтотОбъект, ПараметрыВложения);
		НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ПараметрыВложения.ВыборКаталога.Каталог, Ложь);
	Иначе
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ТекущийНомерВложения);
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);	
	КонецЕсли;		
	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияФрагментУсловие(ПараметрыВложения)
	
	Если ПараметрыВложения.НомерПоПорядку = "" Тогда
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ ПараметрыВложения.Расширение;
	Иначе			
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ "(" + Формат(ПараметрыВложения.НомерПоПорядку, "ЧРГ=") + ")" + ПараметрыВложения.Расширение;			
		КонецЕсли;
	ПараметрыВложения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);	
	Оповещение = Новый ОписаниеОповещения("ФайлПерезаписиПослеИнициализации", ЭтотОбъект, ПараметрыВложения);
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);

КонецПроцедуры

&НаКлиенте
Процедура ФайлПерезаписиПослеИнициализации (Файл, ПараметрыВложения) Экспорт
	ПараметрыВложения.Вставить("Файл",       Файл);				
	СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения);	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения)
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьНаСуществованиеФайлаПередСохранением", ЭтотОбъект, ПараметрыВложения);
	Файл = ПараметрыВложения.Файл;
	Файл.НачатьПроверкуСуществования(Оповещение);	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСуществованиеФайлаПередСохранением(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		НомерПоПорядку = ПараметрыВложения.НомерПоПорядку;
		ПараметрыВложения.Вставить("НомерПоПорядку", ?(НЕ ЗначениеЗаполнено(НомерПоПорядку),1,НомерПоПорядку + 1));
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;			
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если ПолученныеФайлы.Количество() > 0  Тогда
		ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак",  КаталогСохранения);
		Состояние(НСтр("ru = 'Файлы успешно сохранены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопрос(ПараметрыВложения)
	
	Перем ОтветНаВопрос, СписокКнопок, ТекстВопроса;
	
	ТекстВопроса	= НСтр("ru='Файл " + ПараметрыВложения.ПолноеИмяФайла + " уже существует." + Символы.ПС + "Выберите действие для всех существующих файлов:'");
	СписокКнопок	= Новый СписокЗначений;
	СписокКнопок.Добавить("Перезаписать",	НСтр("ru='Перезаписать'"));
	СписокКнопок.Добавить("Переименовать",	НСтр("ru='Переименовать'"));
	СписокКнопок.Добавить("Отмена",			НСтр("ru='Отмена'"));
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияВопросЗавершение", ЭтотОбъект, ПараметрыВложения);
	ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, , "Отмена");

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопросЗавершение(РезультатВопроса, ПараметрыВложения) Экспорт
	
	ТолькоВыделенные = ПараметрыВложения.ТолькоВыделенные;
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = "Перезаписать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Истина);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);
	ИначеЕсли ОтветНаВопрос = "Переименовать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Истина);
	Иначе
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);		
		Возврат;
	КонецЕсли;
	СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеВыполнить(Команда)
	ВыделенныеВложения = Элементы.Вложения.ВыделенныеСтроки;
	Если (ВыделенныеВложения.Количество() = 1) Тогда
		СохранитьВложение();
		Возврат;
	КонецЕсли;	
	ПолучаемыеФайлы = Новый Массив;
	ПолученныеФайлы = Новый Массив;		
	ПроверкаСуществованияФайлов = Истина;
	СохранитьВложения(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеВложениеВыполнить(Команда)
	ПолучаемыеФайлы = Новый Массив;
	ПолученныеФайлы = Новый Массив;	
	ПроверкаСуществованияФайлов = Истина;
	СохранитьВложения(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьВложение();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТекстПисьмаОснования(Команда)
	
	Элементы.ОтображатьТекстПисьмаОснования.Пометка = НЕ Элементы.ОтображатьТекстПисьмаОснования.Пометка;
	Элементы.ГруппаВходящее.Видимость = Элементы.ОтображатьТекстПисьмаОснования.Пометка;
	Объект.ОтображатьТелоИсходногоПисьма = Не Объект.ОтображатьТелоИсходногоПисьма;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТекстВзаимодействиеОснование()
	
	ТекстПисьмаФорматированныйДокументОснования = Новый ФорматированныйДокумент;
	
	ОснованиеСтруктураВложений = Новый Структура;
	ОснованиеТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
		Объект.ВзаимодействиеОснование, Объект.ВзаимодействиеОснование.ТекстHTML,ОснованиеСтруктураВложений);
		
	ТекстПисьмаФорматированныйДокументОснования.УстановитьHTML(ОснованиеТекстHTML, ОснованиеСтруктураВложений);
	
	ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ТекстПисьмаФорматированныйДокумент, ТекстПисьмаФорматированныйДокументОснования);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьТекстПисьмаОснования(Команда)
	
	Элементы.РедактироватьТекстПисьмаОснования.Пометка	= НЕ Элементы.РедактироватьТекстПисьмаОснования.Пометка;
	Элементы.ОтображатьТекстПисьмаОснования.Доступность	= НЕ Элементы.РедактироватьТекстПисьмаОснования.Пометка;
	Элементы.ГруппаВходящее.Видимость					= НЕ Элементы.РедактироватьТекстПисьмаОснования.Пометка;
	
	Объект.CRM_РедактироватьТекстИсходногоПисьма		= Элементы.РедактироватьТекстПисьмаОснования.Пометка;
	
	Если Объект.CRM_РедактироватьТекстИсходногоПисьма Тогда
		
		ДобавитьТекстВзаимодействиеОснование();
		
	Иначе
		Объект.ВключатьТелоИсходногоПисьма = ВключатьТелоИсходногоПисьмаНастройка;
	КонецЕсли;
	
КонецПроцедуры

// Определяет необходимость отображения письма основания.
&НаСервере
Процедура ОтобразитьПисьмоОснование()
	
	Если Не Объект.ВзаимодействиеОснование = Неопределено И НЕ Объект.ВзаимодействиеОснование.Пустая()
		И Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик 
		И (ТипЗнч(Объект.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		ИЛИ ТипЗнч(Объект.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) Тогда
		
		ЗначенияРеквизитовВходящегоПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ВзаимодействиеОснование,"ТипТекста,ТекстHTML,Текст");
		
		ТипТекстаВходящегоПисьма = ?(ЗначенияРеквизитовВходящегоПисьма.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст,
			Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст,
			Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
		
		Если ЗначенияРеквизитовВходящегоПисьма.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
			
			ТекстВходящегоПисьма = CRM_ОбщегоНазначенияКлиентСервер.ПреобразоватьТекстВHTML(ЗначенияРеквизитовВходящегоПисьма.Текст);
			//Элементы.ТекстВходящегоПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
			
			Элементы.ТекстВходящегоПисьма.Вид = ВидПоляФормы.ПолеHTMLДокумента;
			Элементы.ТекстВходящегоПисьма.ТолькоПросмотр = Ложь;
		Иначе
				
			ТекстВходящегоПисьма = CRM_Взаимодействия.CRM_ОбработатьТекстHTML(Объект.ВзаимодействиеОснование, УникальныйИдентификатор);
			Элементы.ТекстВходящегоПисьма.Вид = ВидПоляФормы.ПолеHTMLДокумента;
			Элементы.ТекстВходящегоПисьма.ТолькоПросмотр = Ложь
			
		КонецЕсли;
		
		Если Не Объект.ОтображатьТелоИсходногоПисьма Тогда
			Элементы.ГруппаВходящее.Видимость = Ложь;
		Иначе
			Элементы.ОтображатьТекстПисьмаОснования.Пометка = Истина;
		КонецЕсли;
			
	Иначе
		
		Элементы.ГруппаВходящее.Видимость = Ложь;
		Элементы.ОтображатьТекстПисьмаОснования.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// Формирование текста письма

&НаСервере
Функция НеобходимаОбработкаПисьмаОснования()

	Возврат ВыполняетсяОтправка И Объект.ВключатьТелоИсходногоПисьма И 
		(Не Объект.ВзаимодействиеОснование = Неопределено) И (Не Объект.ВзаимодействиеОснование.Пустая()) И
		Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;

КонецФункции

&НаКлиенте
Процедура ВложенияСкрытьПанель(Команда)
	ВложенияПредставлениеНажатие(Неопределено, Ложь);
КонецПроцедуры

// +CRM

//////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕРВИЧНОГО ИНТЕРЕСА

Процедура УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,ИмяРеквизита)
	Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если Индекс <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции

&НаСервере
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	
	// Определить канал и источник первичного интереса.
	пПартнер = Неопределено;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		пПартнер = ЭтотОбъект.Партнер;
	ИначеЕсли ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		пПартнер = Объект.Партнер;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			Интерес = Неопределено;
			Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			
				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата,Объект.Ссылка);
				
			Иначе
				
				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата,Объект.Ссылка,пПартнер);
			
			КонецЕсли;
			
			КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса);
			
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПервичныйИнтерес(ТекущийОбъект)
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Участники = Новый ТаблицаЗначений;
		Участники.Колонки.Добавить("Партнер");
		
		Для каждого Адресат Из Объект.ПолучателиПисьма Цикл
				Если ЗначениеЗаполнено(Адресат.Контакт) И ТипЗнч(Адресат.Контакт)  = Тип("СправочникСсылка.Партнеры") Тогда
					
					Участник = Участники.Добавить();
					Участник.Партнер = Адресат.Контакт;
					
				ИначеЕсли ЗначениеЗаполнено(Адресат.Контакт) И ТипЗнч(Адресат.Контакт)  = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					
					Участник = Участники.Добавить();
					Участник.Партнер = Адресат.Контакт.Владелец;
					
				КонецЕсли;
				
		КонецЦикла;
		Участники.Свернуть("Партнер");
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущийОбъект.Дата);
		НаборЗаписей.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписей.Записать();
		
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
			
			Если (Не ЗначениеЗаполнено(ИсточникПервичногоИнтереса) 
				И ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) 
				= Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))
				ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				Тогда
				Для каждого Уч Из Участники Цикл
					
					Запрос = Новый Запрос("
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ИсточникиПервичногоИнтереса.Период КАК Период
					|ИЗ
					|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
					|ГДЕ
					|	ИсточникиПервичногоИнтереса.Сделка = &Сделка
					|	И ИсточникиПервичногоИнтереса.Партнер = &Партнер
					|");
					Запрос.УстановитьПараметр("Сделка", ТекущийОбъект.Ссылка);
					Запрос.УстановитьПараметр("Партнер", Уч.Партнер);
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Период = Выборка.Период;
						МенеджерЗаписи.Сделка = ТекущийОбъект.Ссылка;
						МенеджерЗаписи.Партнер = Уч.Партнер;
						МенеджерЗаписи.Удалить();
					КонецЦикла;
					
					Запись = НаборЗаписей.Добавить();
					Запись.Период						= ТекущийОбъект.Дата;
					Запись.Партнер						= Уч.Партнер;
					Запись.Сделка						= ТекущийОбъект.Ссылка;
					Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
					Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
				
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьПервичногоИнтереса()
	
	Элементы.КаналПервичногоИнтереса.Доступность = Истина;
	Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
	Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
				И ТипПВХ(КаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.Доступность = Истина;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
		// И ЗаполнятьПервичныйИнтерес 
		И Не ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
				И ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЗаполнения(ПроверяемыеРеквизиты)
	
	Входящее = Истина;
	УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"КаналПервичногоИнтереса");
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Если ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
		КонецЕсли;
	Иначе
		
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
			
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	
	ДоступностьПервичногоИнтереса();
	Если ИсточникПервичногоИнтереса = Неопределено ИЛИ ИсточникПервичногоИнтереса.Пустая() Тогда
		Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(КаналПервичногоИнтереса, "ТипЗначения"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УведомитьОДоставке(Команда)
	Объект.УведомитьОДоставке = НЕ Объект.УведомитьОДоставке;
	Элементы.КнопкаУведомитьОДоставке.Пометка = Объект.УведомитьОДоставке;
КонецПроцедуры

&НаКлиенте
Процедура УведомитьОПрочтении(Команда)
	Объект.УведомитьОПрочтении = НЕ Объект.УведомитьОПрочтении;
	Элементы.КнопкаУведомитьОПрочтении.Пометка = Объект.УведомитьОПрочтении;
КонецПроцедуры

&НаКлиенте
Процедура ВключатьТелоИсходногоПисьма(Команда)
	Объект.ВключатьТелоИсходногоПисьма				= НЕ Объект.ВключатьТелоИсходногоПисьма;
	Элементы.ВключатьТелоИсходногоПисьма.Пометка	= Объект.ВключатьТелоИсходногоПисьма;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПолучателей(Команда)
	
	Элементы.СкрытьПоказатьПолучателей.Пометка = НЕ Элементы.СкрытьПоказатьПолучателей.Пометка;
	Элементы.ГруппаТабПолучателей.Видимость = Элементы.СкрытьПоказатьПолучателей.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПолучателейКопии(Команда)
	
	Элементы.СкрытьПоказатьПолучателейКопии.Пометка = НЕ Элементы.СкрытьПоказатьПолучателейКопии.Пометка;
	Элементы.ГруппаТабПолучателейКопии.Видимость = Элементы.СкрытьПоказатьПолучателейКопии.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПолучателейСкрытыеКопии(Команда)
	
	Элементы.СкрытьПоказатьПолучателейСкрытыеКопии.Пометка = НЕ Элементы.СкрытьПоказатьПолучателейСкрытыеКопии.Пометка;
	Элементы.ГруппаТабПолучателейСкрытыеКопии.Видимость = Элементы.СкрытьПоказатьПолучателейСкрытыеКопии.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактПриИзменении(Элемент)
	
	ЭтотОбъект._Партнер = ОпределитьПартнера();
	ПриИзмененииПартнера();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОчистка(Элемент, СтандартнаяОбработка)
	
	ЭтотОбъект._Партнер = ОпределитьПартнера();
	ПриИзмененииПартнера();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	,ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	,ТекДанные.Представление);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				,Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		,Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	,ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Контактные лица");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Пользователи.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Пользователи");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.ФизическиеЛица.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Физические лица");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКопииКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПолучателиКопий.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	,ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	,ТекДанные.Представление);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				,Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		,Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	,ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Контактные лица");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Пользователи.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Пользователи");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.ФизическиеЛица.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Физические лица");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиСкрытыеКопииКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПолучателиСкрытыхКопий.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	,ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	,ТекДанные.Представление);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				,Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		,Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	,ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Контактные лица");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Пользователи.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Пользователи");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.ФизическиеЛица.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Физические лица");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ИмяЭлемента						= "ПолучателиПисьма";
	ИдентификаторСтрокиПолучателя	= Элементы.ПолучателиПисьма.ТекущаяСтрока;
	
	Элемент.СписокВыбора.Очистить();
	
	ТекДанные = Элементы.ПолучателиПисьма.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	,ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	,ТекДанные.Представление);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового",ПараметрыНового);
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Партнеры.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Клиента'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Контактное лицо'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Пользователи.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Пользователя'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.ФизическиеЛица.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Физическое лицо'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКопииКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ИмяЭлемента						= "ПолучателиКопий";
	ИдентификаторСтрокиПолучателя	= Элементы.ПолучателиКопий.ТекущаяСтрока;
	
	Элемент.СписокВыбора.Очистить();
	
	ТекДанные = Элементы.ПолучателиКопий.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	,ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	,ТекДанные.Представление);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового",ПараметрыНового);
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Партнеры.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Клиента'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Контактное лицо'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Пользователи.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Пользователя'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.ФизическиеЛица.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Физическое лицо'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиСкрытыеКопииКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ИмяЭлемента						= "ПолучателиСкрытыхКопий";
	ИдентификаторСтрокиПолучателя	= Элементы.ПолучателиСкрытыхКопий.ТекущаяСтрока;
	
	Элемент.СписокВыбора.Очистить();
	
	ТекДанные = Элементы.ПолучателиСкрытыхКопий.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	,ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	,ТекДанные.Представление);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового",ПараметрыНового);
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Партнеры.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Клиента'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Контактное лицо'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Пользователи.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Пользователя'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.ФизическиеЛица.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Физическое лицо'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы,ВыбранноеЗначение.ПараметрыФормы,?(ВыбранноеЗначение.РежимВыбора,Элемент,ЭтотОбъект),,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКопииКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы,ВыбранноеЗначение.ПараметрыФормы,?(ВыбранноеЗначение.РежимВыбора,Элемент,ЭтотОбъект),,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиСкрытыеКопииКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы,ВыбранноеЗначение.ПараметрыФормы,?(ВыбранноеЗначение.РежимВыбора,Элемент,ЭтотОбъект),,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.УточнениеКонтактов") Тогда
		
		
	Иначе
		
		ВзаимодействияКлиент.ФормаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, КонтекстВыбора);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если ИмяСобытия = "Создан новый партнер" ИЛИ  ИмяСобытия = "Создано новое контактное лицо" Тогда
		Попытка
		Если НЕ ИмяЭлемента = "" Тогда
			ТекДанные			= ЭтотОбъект[ИмяЭлемента].НайтиПоИдентификатору(ИдентификаторСтрокиПолучателя);
			ТекДанные.Контакт	= Параметр;
			ИмяЭлемента			= "";
		КонецЕсли;
		Исключение
		КонецПопытки;
	// +БазаЗнаний
	ИначеЕсли (ИмяСобытия = "CRM_РешенияОбновлениеСправочника") И (Параметр = ЭтотОбъект["бзТекущийВопрос"]) Тогда
		// Перезаполняем текст текущего решения.
		бзЗаполнитьТекстВопросаHTML();
	// -БазаЗнаний
	ИначеЕсли (ИмяСобытия = "ПроверкаПравописания_ИзмененТекст") И (Источник = ЭтотОбъект) Тогда
		ОбновитьТекстПисьма(Параметр.Текст, Параметр.Вложения);
	КонецЕсли;
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокус()
	
	Если НЕ ЭтотОбъект._ИмяЭлемента = "" Тогда
		
		Если ЭтотОбъект._ИмяЭлемента = "ПолучателиСсылкаКопия" ИЛИ ЭтотОбъект._ИмяЭлемента = "СкрытаяСсылкаКопия" Тогда
			ТекущийЭлемент = Элементы.СписокПолучателейКопий;
		КонецЕсли;
		
		Если ЭтотОбъект._ИмяЭлемента = "ПолучателиСсылкаСкрытая" ИЛИ ЭтотОбъект._ИмяЭлемента = "КопияСсылкаСкрытая" Тогда
			ТекущийЭлемент = Элементы.СписокПолучателейСкрытыхКопий;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПолучателейПисьма(ИмяЭлемент = "")
	
	ЭтотОбъект._ИмяЭлемента = ИмяЭлемент;
	
	Если Объект.Ссылка.Пустая() ИЛИ Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") Тогда
		Если НЕ ИмяЭлемент = "" Тогда
			Если ИмяЭлемент = "ПолучателиСсылкаКопия" Тогда
				Элементы.ГруппаПолучателиКопии.Видимость	= Истина;
				Элементы.ПолучателиСсылкаКопия.Видимость	= Ложь;
				Элементы.ПолучателиСсылкаСкрытая.Видимость	= Ложь;
				Элементы.КопияСсылкаСкрытая.Видимость		= Истина;
			КонецЕсли;
			
			Если ИмяЭлемент = "ПолучателиСсылкаСкрытая" Тогда
				Элементы.ГруппаПолучателиСкрытыкКопии.Видимость	= Истина;
				Элементы.ПолучателиСсылкаКопия.Видимость		= Ложь;
				Элементы.ПолучателиСсылкаСкрытая.Видимость		= Ложь;
				Элементы.СкрытаяСсылкаКопия.Видимость			= Истина;
			КонецЕсли;
			
			Если ИмяЭлемент = "КопияСсылкаСкрытая" Тогда
				Элементы.ГруппаПолучателиСкрытыкКопии.Видимость	= Истина;
				Элементы.КопияСсылкаСкрытая.Видимость			= Ложь;
				Элементы.СкрытаяСсылкаКопия.Видимость			= Ложь;
			КонецЕсли;
			
			Если ИмяЭлемент = "СкрытаяСсылкаКопия" Тогда
				Элементы.ГруппаПолучателиКопии.Видимость		= Истина;
				Элементы.СкрытаяСсылкаКопия.Видимость			= Ложь;
				Элементы.КопияСсылкаСкрытая.Видимость			= Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПолучателиКопии.Видимость			= ЗначениеЗаполнено(Объект.СписокПолучателейКопий);
			Элементы.ГруппаПолучателиСкрытыкКопии.Видимость		= ЗначениеЗаполнено(Объект.СписокПолучателейСкрытыхКопий);
			
			Элементы.ПолучателиСсылкаКопия.Видимость			= НЕ (ЗначениеЗаполнено(Объект.СписокПолучателейКопий) ИЛИ ЗначениеЗаполнено(Объект.СписокПолучателейСкрытыхКопий));
			Элементы.ПолучателиСсылкаСкрытая.Видимость			= НЕ (ЗначениеЗаполнено(Объект.СписокПолучателейКопий) ИЛИ ЗначениеЗаполнено(Объект.СписокПолучателейСкрытыхКопий));
			
			Элементы.КопияСсылкаСкрытая.Видимость				= ЗначениеЗаполнено(Объект.СписокПолучателейКопий) И НЕ ЗначениеЗаполнено(Объект.СписокПолучателейСкрытыхКопий);
			Элементы.СкрытаяСсылкаКопия.Видимость				= ЗначениеЗаполнено(Объект.СписокПолучателейСкрытыхКопий) И НЕ ЗначениеЗаполнено(Объект.СписокПолучателейКопий);
			
		КонецЕсли;
	Иначе
		Элементы.ГруппаПолучателиКопии.Видимость			= ЗначениеЗаполнено(Объект.СписокПолучателейКопий);
		Элементы.ГруппаПолучателиСкрытыкКопии.Видимость		= ЗначениеЗаполнено(Объект.СписокПолучателейСкрытыхКопий);
		
		Элементы.ПолучателиСсылкаКопия.Видимость			= НЕ (ЗначениеЗаполнено(Объект.СписокПолучателейКопий) ИЛИ ЗначениеЗаполнено(Объект.СписокПолучателейСкрытыхКопий));
		Элементы.ПолучателиСсылкаСкрытая.Видимость			= НЕ (ЗначениеЗаполнено(Объект.СписокПолучателейКопий) ИЛИ ЗначениеЗаполнено(Объект.СписокПолучателейСкрытыхКопий));
		
		Элементы.КопияСсылкаСкрытая.Видимость				= ЗначениеЗаполнено(Объект.СписокПолучателейКопий) И НЕ ЗначениеЗаполнено(Объект.СписокПолучателейСкрытыхКопий);
		Элементы.СкрытаяСсылкаКопия.Видимость				= ЗначениеЗаполнено(Объект.СписокПолучателейСкрытыхКопий) И НЕ ЗначениеЗаполнено(Объект.СписокПолучателейКопий);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СписокПолучателейПисьма) Тогда
		Элементы.СкрытьПоказатьПолучателей.Пометка	= Ложь;
		Элементы.ГруппаТабПолучателей.Видимость		= Ложь;
	КонецЕсли;
	
	Если НЕ Элементы.ГруппаПолучателиКопии.Видимость Тогда
		Элементы.СкрытьПоказатьПолучателейКопии.Пометка	= Ложь;
		Элементы.ГруппаТабПолучателейКопии.Видимость	= Ложь;
	КонецЕсли;
	
	Если НЕ Элементы.ГруппаПолучателиКопии.Видимость Тогда
		Элементы.СкрытьПоказатьПолучателейСкрытыеКопии.Пометка	= Ложь;
		Элементы.ГруппаТабПолучателейСкрытыеКопии.Видимость		= Ложь;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("УстановитьФокус", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНажатие(Элемент)
	УстановитьВидимостьПолучателейПисьма(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСписокПоследнихАдресов()
	
	Если ЗначениеЗаполнено(Объект.СписокПолучателейПисьма)
	И ИсторияАдресов.НайтиПоЗначению(СокрЛП(Объект.СписокПолучателейПисьма)) = Неопределено Тогда
		Если ИсторияАдресов.Количество() = 10 Тогда
			ИсторияАдресов.Удалить(0);
		КонецЕсли;
		ИсторияАдресов.Добавить(СокрЛП(Объект.СписокПолучателейПисьма),СокрЛП(Объект.СписокПолучателейПисьма));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СписокПолучателейКопий)
	И ИсторияАдресов.НайтиПоЗначению(СокрЛП(Объект.СписокПолучателейКопий)) = Неопределено Тогда
		Если ИсторияАдресов.Количество() = 10 Тогда
			ИсторияАдресов.Удалить(0);
		КонецЕсли;
		ИсторияАдресов.Добавить(СокрЛП(Объект.СписокПолучателейКопий),СокрЛП(Объект.СписокПолучателейКопий));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СписокПолучателейСкрытыхКопий)
	И ИсторияАдресов.НайтиПоЗначению(СокрЛП(Объект.СписокПолучателейСкрытыхКопий)) = Неопределено Тогда
		Если ИсторияАдресов.Количество() = 10 Тогда
			ИсторияАдресов.Удалить(0);
		КонецЕсли;
		ИсторияАдресов.Добавить(СокрЛП(Объект.СписокПолучателейСкрытыхКопий),СокрЛП(Объект.СписокПолучателейСкрытыхКопий));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСписокСписокПоследнихАдресов()
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("СписокПоследнихАдресов", Объект.УчетнаяЗапись, ИсторияАдресов);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокПоследнихАдресов()
	
	// Элементы.СписокПолучателейПисьма.СписокВыбора.Очистить();
	// Элементы.СписокПолучателейКопий.СписокВыбора.Очистить();
	// Элементы.СписокПолучателейСкрытыхКопий.СписокВыбора.Очистить();
	
	ИсторияАдресов = ХранилищеОбщихНастроек.Загрузить("СписокПоследнихАдресов", Объект.УчетнаяЗапись);
	
	//Если НЕ СписокПоследнихАдресов = Неопределено Тогда
	//	Для Каждого ЭлементСписка ИЗ СписокПоследнихАдресов Цикл
	//		Элементы.СписокПолучателейПисьма.СписокВыбора.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
	//		Элементы.СписокПолучателейКопий.СписокВыбора.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
	//		Элементы.СписокПолучателейСкрытыхКопий.СписокВыбора.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	Если ВсегдаПоказыватьВложения Тогда
		Элементы.ВложенияПредставление.Видимость = Ложь;
		Если НЕ Элементы.Вложения.Видимость Тогда
			Элементы.Вложения.Видимость = Истина;
		КонецЕсли;			
		Возврат;
	КонецЕсли;		
			
	Если Элементы.Вложения.Видимость Тогда
		ВложенияПредставление	= НСтр("ru='свернуть вложения'");
		Элементы.ВложенияПредставление.Видимость = Ложь;		
	Иначе	
		ВложенияПредставление = "";
		Элементы.ВложенияПредставление.Видимость = Истина;
		Для Каждого ЭлементТаблицы Из Вложения Цикл
			Если НЕ ВсеВложенияПометка И ЭлементТаблицы.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			ИначеЕсли ВсеВложенияПометка Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			КонецЕсли;
		КонецЦикла;
		Если ПустаяСтрока(ВложенияПредставление) Тогда
			ВложенияПредставление = НСтр("ru='Добавить файл...'");
			Если Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
				Элементы.ВложенияПредставление.Видимость = Истина;			
			Иначе
				Элементы.ВложенияПредставление.Видимость = Ложь;							
			КонецЕсли;				
		Иначе
			ВложенияПредставление = Сред(ВложенияПредставление, 3);
			Элементы.ВложенияПредставление.Видимость = Истина;			
		КонецЕсли;	
	КонецЕсли;			
КонецПроцедуры // СформироватьПредставлениеВложений()	

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" табличного поля "Вложения".
//
Процедура ВложенияПриИзменении(Элемент)
	СформироватьПредставлениеВложений();
КонецПроцедуры // ВложенияПриИзменении()

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВложенияПредставление = НСтр("ru='Добавить файл...'") И
		Объект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик") И 
		НЕ ТолькоПросмотр Тогда
			ДобавитьВложение(Истина);					
	КонецЕсли;		
	Элементы.Вложения.Видимость = НЕ Элементы.Вложения.Видимость;
	СформироватьПредставлениеВложений();
КонецПроцедуры // ВложенияПредставлениеНажатие()

&НаКлиенте
// Процедура - обработчик команды "ПроверкаПравописания".
//
Процедура ПроверкаПравописания(Команда)
	//Если ПустаяСтрока(ФорматированныйДокументТекст.ПолучитьТекст()) Тогда Возврат; КонецЕсли;
	Если ПустаяСтрока(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст()) Тогда Возврат; КонецЕсли;
	
	ПроверяемыйТекстПисьма	= "";
	ВложенияПисьма	= Новый Структура;
	//ФорматированныйДокументТекст.ПолучитьHTML(ТекстПисьма, ВложенияПисьма);
	//CRM_ОбщегоНазначенияКлиент.ПроверитьПравописаниеТекста(ТекстПисьма, ВложенияПисьма,  "ФорматированныйДокументТекст", ЭтотОбъект);
	ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ПроверяемыйТекстПисьма, ВложенияПисьма);
	CRM_ОбщегоНазначенияКлиент.ПроверитьПравописаниеТекста(ПроверяемыйТекстПисьма, ВложенияПисьма,  "ТекстПисьмаФорматированныйДокумент", ЭтотОбъект);
	
КонецПроцедуры // ПроверкаПравописания()

&НаСервере
// Процедура обновляет значение поля "ПроверенныйТекстПисьма".
//
// Параметры:
//	ПроверенныйТекстПисьма	- Строка	- Текст письма HTML.
//
Процедура ОбновитьТекстПисьма(ПроверенныйТекстПисьма, ВложенияПисьма)
	Объект.ТекстHTML = ПроверенныйТекстПисьма;
	//ФорматированныйДокументТекст.УстановитьHTML(Объект.ТекстHTML, ВложенияПисьма);
	ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Объект.ТекстHTML, ВложенияПисьма);
	
КонецПроцедуры // ОбновитьТекстВопросаHTML()

// +БазаЗнаний

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура удаляет из таблицы решений все неотмеченные решения.
//
// Параметры:
//	Форма	- Управляемая форма	- Форма, на котрой расположена таблица решений.
//
Процедура бзУдалитьНеотмеченныеРешения()
	КоличествоСтрок = ЭтотОбъект["бзРешения"].Количество();
	Если КоличествоСтрок = 0 Тогда Возврат; КонецЕсли;
	ВсеРешения =  РеквизитФормыВЗначение("бзРешения");
	Для текНомер = 1 По КоличествоСтрок Цикл
		НомерСтроки = КоличествоСтрок - текНомер;
		Если ВсеРешения[НомерСтроки].Использовать Тогда Продолжить; КонецЕсли;
		ВсеРешения.Удалить(НомерСтроки);
	КонецЦикла;	
	ЗначениеВРеквизитФормы(ВсеРешения, "бзРешения");
КонецПроцедуры // БзУдалитьНеотмеченныеРешения().

&НаСервере
// Процедура заполняет таблицу используемых решений.
//
// Параметры:
//	Нет.
//
Процедура бзЗаполнитьИспользуемыеРешения()
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда Возврат; КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИСТИНА КАК Использовать,
	               |	CRM_ИспользуемыеРешения.Решение.Ссылка КАК Решение,
	               |	CRM_ИспользуемыеРешения.ВыбранныйОтвет КАК ИДСтроки,
	               |	CRM_ИспользуемыеРешения.Пользователь КАК Пользователь,
	               |	ВЫБОР
	               |		КОГДА CRM_ИспользуемыеРешения.ВыбранныйОтвет = """"
	               |			ТОГДА """"
	               |		ИНАЧЕ CRM_РешенияОтветы.НаименованиеОтвета
	               |	КОНЕЦ КАК ВыбранныйОтвет
	               |ИЗ
	               |	РегистрСведений.CRM_ИспользуемыеРешения КАК CRM_ИспользуемыеРешения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_Решения.Ответы КАК CRM_РешенияОтветы
	               |		ПО CRM_ИспользуемыеРешения.Решение = CRM_РешенияОтветы.Ссылка
	               |			И CRM_ИспользуемыеРешения.ВыбранныйОтвет = CRM_РешенияОтветы.ИДСтроки
	               |ГДЕ
	               |	CRM_ИспользуемыеРешения.Объект = &Объект
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_ИспользуемыеРешения.Решение.Наименование";
	ЭтотОбъект["бзРешения"].Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры // БзЗаполнитьИспользуемыеРешения().

&НаСервере
// Процедура сохраняет таблицу используемых решений.
//
// Параметры:
//	Нет.
//
Процедура бзСохранитьИспользуемыеРешения()
	НаборЗаписей = РегистрыСведений.CRM_ИспользуемыеРешения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	Для Каждого бзИспользуемоеРешение Из ЭтотОбъект["бзРешения"] Цикл
		Если НЕ бзИспользуемоеРешение.Использовать Тогда Продолжить; КонецЕсли;
		НоваяЗапись					= НаборЗаписей.Добавить();
		НоваяЗапись.Объект			= Объект.Ссылка;
		НоваяЗапись.Решение			= бзИспользуемоеРешение.Решение;
		НоваяЗапись.ВыбранныйОтвет	= бзИспользуемоеРешение.ИДСтроки;
		НоваяЗапись.Пользователь	= бзИспользуемоеРешение.Пользователь;
	КонецЦикла;
	Попытка
		НаборЗаписей.Записать();
	Исключение;
	КонецПопытки;	
КонецПроцедуры // БзСохранитьИспользуемыеРешения().

&НаСервере
// Функция добавляет решение в таблицу используемых решений.
//
// Параметры:
//	Решение	- СправочникСсылка	- Добавляемое решение.
//
// Возвращаемое значение:
//	Число	- Индекс добавленной строки.
//
Функция бзДобавитьИспользуемоеРешение(Решение)
	ТаблицаРешений = РеквизитФормыВЗначение("бзРешения");
	СтрокаТаблицы = ТаблицаРешений.Найти(Решение, "Решение");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ТаблицаРешений.Добавить();
		СтрокаТаблицы.Использовать	 	= Ложь;
		СтрокаТаблицы.Решение			= Решение;
		СтрокаТаблицы.Пользователь		= Пользователи.АвторизованныйПользователь();
		Если Решение.Ответы.Количество()	= 1 Тогда
			СтрокаТаблицы.ИДСтроки			= Решение.Ответы[0].ИДСтроки;
			СтрокаТаблицы.ВыбранныйОтвет	= Решение.Ответы[0].НаименованиеОтвета;
		Иначе	
			СтрокаТаблицы.ИДСтроки			= "";
			СтрокаТаблицы.ВыбранныйОтвет	= "";
		КонецЕсли;	
	КонецЕсли;	
	ИндексСтроки = ТаблицаРешений.Индекс(СтрокаТаблицы);
	ЗначениеВРеквизитФормы(ТаблицаРешений, "бзРешения");
	Возврат ИндексСтроки;
КонецФункции // БзДобавитьИспользуемоеРешение().

&НаСервере
// Процедура создает новое решение и добавляет его в таблицу решений.
//
// Параметры:
//	Нет.
//
Процедура бзСоздатьНовоеРешение()
	// Создаем новое решение
	НовоеРешение = Справочники.CRM_Решения.СоздатьЭлемент();
	НовоеРешение.Наименование		= ЭтотОбъект["бзСтрокаПоиска"];
	НовоеРешение.ТекстВопроса		= ЭтотОбъект["бзСтрокаПоиска"];
	НовоеРешение.ТекстВопросаHTML	= ЭтотОбъект["бзСтрокаПоиска"];
	НовоеРешение.Проект				= бзПолучитьПроект(); 
	НовоеРешение.Автор				= Пользователи.АвторизованныйПользователь();
	НовоеРешение.СтатусРешения 		= Перечисления.CRM_СтатусыРешений.Личное;
	РешениеЗаписано = Ложь;
	Попытка
		НовоеРешение.Записать();
		РешениеЗаписано = Истина;
	Исключение
	КонецПопытки;
	// Добавляем созданное решение в таблицу.
	Если РешениеЗаписано Тогда
		ТаблицаРешений = РеквизитФормыВЗначение("бзРешения");
		НоваяСтрока = ТаблицаРешений.Добавить();
		НоваяСтрока.Использовать 	= Ложь;
		НоваяСтрока.Решение			= НовоеРешение.Ссылка;
		НоваяСтрока.Пользователь	= НовоеРешение.Автор;
		Если НовоеРешение.Ответы.Количество() = 1 Тогда
			НоваяСтрока.ИДСтроки		= НовоеРешение.Ответы[0].ИДСтроки;
			НоваяСтрока.ВыбранныйОтвет	= НовоеРешение.Ответы[0].НаименованиеОтвета;
		Иначе	
			НоваяСтрока.ИДСтроки		= "";
			НоваяСтрока.ВыбранныйОтвет	= "";
		КонецЕсли;	
		ЗначениеВРеквизитФормы(ТаблицаРешений, "бзРешения");
	КонецЕсли;	
КонецПроцедуры // бзСоздатьНовоеРешение()	
	
&НаСервере
// Функция возвращает текущий проект.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Проект
//
Функция бзПолучитьПроект()
	бзПроект = Справочники.Проекты.ПустаяСсылка();
	Попытка
		бзПроект = Объект.CRM_Проект;
	Исключение
	КонецПопытки;	
	Возврат бзПроект;
КонецФункции // бзПолучитьПроект()

&НаСервере
// Функция возвращает тему
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Тема
//
Функция бзПолучитьТему()
	бзТема = "";
	Попытка
		бзТема = СокрЛП(Объект.Тема);
		бзТема = СтрЗаменить(бзТема, "RE:", "");
		бзТема = СтрЗаменить(бзТема, "FW:", "");
		бзТема = СтрЗаменить(бзТема, "  ", " ");
		бзТема = СокрЛП(бзТема);
	Исключение
	КонецПопытки;	
	Возврат бзТема;
КонецФункции // бзПолучитьТему()

&НаСервере
// Функция удаляет из XML-текста недопустимые символы.
//
// Параметры:
//  Строка - Строка - XML-текст.
//
// Возвращаемое значение:
//  Строка - XML-текст без недопустимых символов.
//
Функция бзКорректнаяСтрока(Строка)
	Позиция = НайтиНедопустимыеСимволыXML(Строка);
	Пока Позиция > 0 Цикл
		Строка = СтрЗаменить(Строка, Сред(Строка, Позиция, 1), "");
		Позиция = НайтиНедопустимыеСимволыXML(Строка);
	КонецЦикла;	
	Возврат Строка;
КонецФункции // КорректнаяСтрока()

// Функция формирует описание текущего решения для загрузки в поле вопроса.
//
// Параметры:
//  ТекстПоляHTML - Строка - Текст, на основе которого формируется описание решение БЗ.
//  РешениеСсылка - СправочникСсылка.CRM_Решения - Ссылка на решение, описание которого формируется в поле вопроса.
//  ИДСтроки - Число - Служебный, ОБЯЗАТЕЛЬНЫЙ числовой параметр, если описание формируется для вопроса,
//			 то параметр = 0, если дял ответа, то равен соотв. параметру из ТЧ Ответы текущето ответа РешениеСсылка.
//
// Возвращаемое значение:
//   СтруктураОписания - Структура, содеражащая описание переданного текста в HTML.
//
&НаСервере
Функция бзСформироватьОписаниеТекущегоРешения(ТекстПоляHTML, РешениеСсылка, ИДСтроки)
	
	СтруктураОписания = Новый Структура;
	
	Кодировка = "utf-8";
	
	Если Не ПустаяСтрока(ТекстПоляHTML) Тогда
		Если СтрЧислоВхождений(ТекстПоляHTML,"<head") = 0 Тогда
			ТекстПоляHTML = "
			|<html>
			|<head>  
			|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
			|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
			|<body scroll=""auto"">" + ТекстПоляHTML + "
			|</body>
			|</html>";
		КонецЕсли;
		
		ТаблицаФайлов = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(РешениеСсылка);
		
		Если ТаблицаФайлов.Количество() Тогда
			
			ДокументHTML = CRM_Взаимодействия.CRM_ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстПоляHTML, ТаблицаФайлов, Кодировка,,УникальныйИдентификатор);
			ТекстПоляHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОписания.Вставить("Тело", ТекстПоляHTML);
	
	Возврат СтруктураОписания;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛНОТЕКСТОВОГО ПОИСКА

&НаКлиенте
// Процедура - обработчик команды формы "ПолнотекстовыйПоискНайти".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзПолнотекстовыйПоискНайти(Команда)
	Подключаемый_бзСтрокаПоискаПриИзменении(Элементы["бзСтрокаПоиска"]);
КонецПроцедуры // Подключаемый_бзПолнотекстовыйПоискНайти()

&НаКлиенте
// Процедура - обработчик команды формы "ПолнотекстовыйПоискОтменить".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзПолнотекстовыйПоискОтменить(Команда)
	ЭтотОбъект["бзСтрокаПоиска"] = "";
	Подключаемый_бзСтрокаПоискаПриИзменении(Элементы["бзСтрокаПоиска"]);
КонецПроцедуры // Подключаемый_бзПолнотекстовыйПоискОтменить()

&НаСервереБезКонтекста
// Выполняет обновление индекса полнотекстового поиска.
//
// Параметры:
//	Нет.
//
Процедура бзОбновитьИндексППД()
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ПолнотекстовыйПоиск.ОбновитьИндекс();
	Исключение
	КонецПопытки;	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // бзОбновитьИндексППД()

&НаКлиенте
// Функция возвращает структуру отбора для полнотекстового поиска.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура	- Структура параметров отбора.
//
Функция бзСоздатьСтруктуруОтбора()
	Если ЭтотОбъект["бзИскатьПоПроекту"] Тогда
		ТекущийПроект = бзПолучитьПроект();
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Проект", ТекущийПроект);
		Возврат СтруктураПоиска;
	КонецЕсли;	
	Возврат Неопределено;
КонецФункции // БзСоздатьСтруктуруОтбора().

&НаСервере
// Процедура выполняет полнотекстовый поиск.
//
// Параметры:
//	СтруктураОтбора	- Структура	- Структура отбора.
//
Функция бзНайтиРешенияПолнотекстовыйПоиск(СтруктураОтбора)
	ЭтотОбъект["бзИндексППДАктуален"] = ПолнотекстовыйПоиск.ИндексАктуален();
	Возврат CRM_БазаЗнанийСервер.бзНайтиРешенияПолнотекстовыйПоиск(ЭтотОбъект, СтруктураОтбора);
КонецФункции // БзНайтиРешенияПолнотекстовыйПоиск().

&НаКлиенте
// Процедура проверяет актуальность индекса, и, в случае необходимости, актуализирует его.
//
// Параметры:
//	Нет.
//
Процедура бзПроверитьИндексППД()
	СтруктураОтбора = бзСоздатьСтруктуруОтбора();
 	ТекстОшибки = бзНайтиРешенияПолнотекстовыйПоиск(СтруктураОтбора);
	Если ЭтотОбъект["бзИндексППДАктуален"] Тогда
		Если ТекстОшибки = Неопределено Тогда
			Элементы["бзДекорацияИндексППНеактуален"].Заголовок = "";
		Иначе
			Элементы["бзДекорацияИндексППНеактуален"].Заголовок = ТекстОшибки;
		КонецЕсли;
	Иначе	
		Элементы["бзДекорацияИндексППНеактуален"].Заголовок = НСтр("ru='Индекс полнотекстового поиска неактуален'");
	КонецЕсли;	
КонецПроцедуры // бзПроверитьИндексППД()

&НаКлиенте
// Процедура выполняет полнотекстовый поиск.
//
// Параметры:
//	Нет.
//
Процедура бзВыполнитьПП()
	Элементы["бзДекорацияИндексППНеактуален"].Заголовок = "";
	Если ПустаяСтрока(ЭтотОбъект["бзСтрокаПоиска"]) Тогда
		бзУдалитьНеотмеченныеРешения();
	Иначе	
		бзПроверитьИндексППД();
	КонецЕсли; 	
КонецПроцедуры // бзВыполнитьПП()

&НаКлиенте
// Процедура выполняет обновление индекса полнотекстового поиска.
//
// Параметры:
//	Нет.
//
Процедура бзОбновлениеИндексаПДД()
	Если НЕ ЭтотОбъект["бзИндексППДАктуален"] Тогда
		Состояние(НСтр("ru='Идет обновление индекса полнотекстового поиска ...'"));
		бзОбновитьИндексППД();
		ЭтотОбъект["бзИндексППДАктуален"] = Истина;
		Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено...'")); 
		бзВыполнитьПП();
	ИначеЕсли Элементы.бзДекорацияИндексППНеактуален.Заголовок = НСтр("ru = 'Ничего не найдено. Создать новое решение?'") Тогда
		бзСоздатьНовоеРешение();
		Элементы["бзДекорацияИндексППНеактуален"].Заголовок = "";
		ПоследняяСтрока = ЭтотОбъект["бзРешения"][ЭтотОбъект["бзРешения"].Количество() - 1].ПолучитьИдентификатор();
		Элементы["бзРешения"].ТекущаяСтрока = ПоследняяСтрока;
	КонецЕсли;
КонецПроцедуры // бзОбновлениеИндексаПДД()

// Функция проверяет, была ли нажата ссылка, активирующее действие с БЗ.
//
//  Параметры:
//   ПроверяемаяСсылка - Строка - Нажатая ссылка в поле вопроса.
// 
//  Возвращаемое значение:
//   СтруктураВозврата - Структура, содержащая информацию о результатах проверки.
//
&НаСервере
Функция бзПроверитьЧтоЭтоСсылкаНаДобавление(ПроверяемаяСсылка)
	СтруктураВозврата = Новый Структура("ОбработатьСсылку, ИмяОбработчика", Ложь, "");
	Если ЗначениеЗаполнено(ПроверяемаяСсылка) Тогда
		Если Найти(ПроверяемаяСсылка, "ДобавитьТекстВопросаВТекстПисьма") > 0 Тогда
			СтруктураВозврата.ОбработатьСсылку = Истина;
			СтруктураВозврата.ИмяОбработчика = "ДобавитьТекстВопросаВТекстПисьма";
		ИначеЕсли Найти(ПроверяемаяСсылка, "ДобавитьТекстОтветаВТекстПисьма") > 0 Тогда
			СтруктураВозврата.ОбработатьСсылку = Истина;
			СтруктураВозврата.ИмяОбработчика = Сред(ПроверяемаяСсылка, Найти(ПроверяемаяСсылка, "ДобавитьТекстОтветаВТекстПисьма"));
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураВозврата;
КонецФункции

// Функция возвращает текст вопроса переданного решения БЗ.
//
//  Параметры
//   Решение  - СправочникСсылка.CRM_Решения - Решение, для которого выполняется функция.
//
//  Возвращаемое значение:
//    Текст вопроса - Строка - Текст вопроса решения в HTML.
//
&НаСервере
Функция бзПолучитьТекстВопроса(Решение) 
	Возврат Решение.ТекстВопросаHTML;
КонецФункции

// Функция получает данные переданного ответа из Решения БЗ (реквизиты ТЧ).
//
//  Параметры
//   Решение  - СправочникСсылка.CRM_Решения - Решение, для которого выполняется функция.
//   НомерОтвета - Число - Номер строки ответа в решении.
//
//  Возвращаемое значение:
//   ДанныеОтвета - Структура - Структура, содержащая данные ответа (реквизиты ТЧ Ответы).
//
&НаСервере
Функция бзПолучитьДанныеОтветаПоИндексу(Решение, НомерОтвета) 
	ТекОтвет = Решение.Ответы[НомерОтвета - 1];
	ДанныеОтвета = Новый Структура("ИДСтроки, НаименованиеОтвета, ВариантОтвета, ВариантОтветаHTML", 
		ТекОтвет.ИДСтроки, ТекОтвет.НаименованиеОтвета, ТекОтвет.ВариантОтвета, ТекОтвет.ВариантОтветаHTML);
	Возврат	ДанныеОтвета;	 
КонецФункции

// Функция ищет в текущей ТЧ Решений переданную комбинацию Решения + Ответа.
//
//  Параметры
//   Решение  - СправочникСсылка.CRM_Решения - Решение, для которого выполняется функция.
//   Ответ - Строка - имя ответа переданного решения (реквизит НаименованиеОтвета).
//
//  Возвращаемое значение:
//   СтруктураВозврата - Структура - Структура с результатом проверки комбинацию решения и ответа в ТЧ "бзРешения".
//
&НаСервере
Функция бзНайтиКомбинациюРешенияИОтвета(Решение, Ответ)
	// РежимРезультата - 0 (нашли и ответ и решение в ТЧ)
	//					 1 (нашли решение)
	//					 2 (не нашли ни решение, ни ответ).
	СтруктураВозврата = Новый Структура("ИндексСтроки, РежимРезультата", Неопределено, 2);
	Для Каждого Строка Из ЭтотОбъект["бзРешения"] Цикл
		Если Строка.Решение = Решение Тогда
			Если Строка.ВыбранныйОтвет = Ответ Тогда
				СтруктураВозврата.ИндексСтроки    = ЭтотОбъект["бзРешения"].Индекс(Строка);
				СтруктураВозврата.РежимРезультата = 0;
				Прервать;
			ИначеЕсли ПустаяСтрока(Строка.ВыбранныйОтвет) Тогда
				СтруктураВозврата.ИндексСтроки    = ЭтотОбъект["бзРешения"].Индекс(Строка);
				СтруктураВозврата.РежимРезультата = 1;
			КонецЕсли;				
		КонецЕсли;			
	КонецЦикла;		
	Возврат СтруктураВозврата;
КонецФункции

// Процедура заполняет ТЧ "бзРешения" в зависимости от режима заполнения.
//
//  Параметры
//   РежимЗаполнения  - Число - Режим заполнения ТЧ "бзРешения".
//   ИндексСтроки - Число - Номер строки ТЧ "Ответы" в решении БЗ.
//   Ответ - Структура - Структура, содержащая данные ответа, которыми заполняется ТЧ "бзРешения".
//
&НаСервере
Процедура бзУстановитьДанныеСтрокиТЧРешения(РежимЗаполнения, ИндексСтроки, Ответ)
	Если РежимЗаполнения = 0 Тогда
		// Заполняем у строки ТЧ только реквизит "Использовать".
		ТекОтвет				= ЭтотОбъект["бзРешения"][ИндексСтроки];
		ТекОтвет.Использовать	= Истина;
	ИначеЕсли РежимЗаполнения = 1 Тогда
		// Заполняем у строки ТЧ реквизит "Использовать" и поле "ВыбранныйОтвет".
		ТекОтвет					= ЭтотОбъект["бзРешения"][ИндексСтроки];
		ТекОтвет.Использовать		= Истина;
		ТекОтвет.ВыбранныйОтвет		= Ответ.НаименованиеОтвета;
		ТекОтвет.ИДСтроки			= Ответ.ИДСтроки;
		ТекОтвет.Пользователь		= ПользователиКлиентСервер.АвторизованныйПользователь();
	КонецЕсли;		
КонецПроцедуры	

// Процедура обрабатывает переданную команду (ссылку), нажатую в поле вопроса БЗ.
//
//  Параметры
//   ИмяОбработчика  - Строка - Имя обработчика, который овтечает за отдельную команду по выполнению операций с БЗ.
//
&НаСервере
Процедура бзОбработатьСсылку(ИмяОбработчика)
	
	Решение = ЭтотОбъект["бзТекущийВопрос"];	
	НомерВложения = 0;
	Если ИмяОбработчика = "ДобавитьТекстВопросаВТекстПисьма" Тогда
		
		Решение = ЭтотОбъект["бзТекущийВопрос"];	
		// Получаем непосредственно текст вопроса решения без служебных тэгов HTML документа.
		ТекстВопроса = бзПолучитьТекстВопроса(Решение);
		ПозицияНачала	= Найти(Решение.ТекстВопросаHTML, "<body>") + 6;
		ТекстНачала		= Лев(Решение.ТекстВопросаHTML, ПозицияНачала);
		ПозицияКонца	= Найти(Решение.ТекстВопросаHTML, "</body>");
		ТекстКонца		= Сред(Решение.ТекстВопросаHTML, ПозицияКонца);
		ТекстВопроса	= Сред(Решение.ТекстВопросаHTML, ПозицияНачала, ПозицияКонца - ПозицияНачала - 1);
		ТекстВопроса	= СокрЛП(ТекстВопроса);
		ТекстВопроса	= СтрЗаменить(ТекстВопроса, Символы.ПС, "");
		ТекстВопроса	= СтрЗаменить(ТекстВопроса, "</p><p></p><p>", "</p><p>");	
		
		// Получаем данные форматированного документа: текст в HTML и вложения в тексте.
		ВложенияТекстаВопроса = Новый Структура;
		ТекстВопроса = Справочники.CRM_Решения.ОбработатьТекстHTMLДляФорматированногоДокумента(
		Решение.Ссылка, ТекстВопроса, ВложенияТекстаВопроса);
		ЭтотОбъект["бзСписокФайловРешения"].Очистить();
		
		// +Пробуем вставить текст в позицию курсора.
		бзДобавитьВТекстПисьма(ТекстВопроса, ВложенияТекстаВопроса); 
		// -
		
		Модифицированность = Истина;					
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаПисьмо;
		//ТекущийЭлемент = Элементы.Текст;
		ТекущийЭлемент = Элементы.ТекстПисьмаФорматированныйДокумент;
		
	ИначеЕсли Найти(ИмяОбработчика, "ДобавитьТекстОтветаВТекстПисьма") > 0 Тогда
		
		НомерОтвета = Число(Прав(ИмяОбработчика,СтрДлина(ИмяОбработчика) - СтрДлина("ДобавитьТекстОтветаВТекстПисьма")));
		ТекОтвет = бзПолучитьДанныеОтветаПоИндексу(Решение, НомерОтвета);
		СтруктураПоиска = бзНайтиКомбинациюРешенияИОтвета(Решение, ТекОтвет.НаименованиеОтвета);
		Если СтруктураПоиска.РежимРезультата = 2 Тогда
			НоваяСтрока = ЭтотОбъект["бзРешения"].Добавить();
			НоваяСтрока.Решение 		= Решение;
			НоваяСтрока.Использовать	= Истина;
			НоваяСтрока.ИДСтроки 		= ТекОтвет.ИДСтроки;
			НоваяСтрока.ВыбранныйОтвет  = ТекОтвет.НаименованиеОтвета;
			НоваяСтрока.Пользователь	= ПользователиКлиентСервер.АвторизованныйПользователь();			
		Иначе
			бзУстановитьДанныеСтрокиТЧРешения(СтруктураПоиска.РежимРезультата, СтруктураПоиска.ИндексСтроки, ТекОтвет);
		КонецЕсли;	
		
		// Получаем непосредственно текст ответа решения без служебных тэгов HTML документа.
		ТекстОтвета 	= ТекОтвет.ВариантОтветаHTML;
		ПозицияНачала	= Найти(ТекстОтвета, "<body>") + 6;
		ТекстНачала		= Лев(ТекстОтвета, ПозицияНачала);
		ПозицияКонца	= Найти(ТекстОтвета, "</body>");
		ТекстКонца		= Сред(ТекстОтвета, ПозицияКонца);
		ТекстОтвета		= Сред(ТекстОтвета, ПозицияНачала, ПозицияКонца - ПозицияНачала - 1);
		ТекстОтвета		= СокрЛП(ТекстОтвета);
		ТекстОтвета		= СтрЗаменить(ТекстОтвета, Символы.ПС, "");
		ТекстОтвета		= СтрЗаменить(ТекстОтвета, "</p><p></p><p>", "</p><p>");
		
		// Получаем данные форматированного документа: текст в HTML и вложения в тексте.
		ВложенияТекстаПисьма = Новый Структура;
		ТекстОтвета = Справочники.CRM_Решения.ОбработатьТекстHTMLДляФорматированногоДокумента(
		Решение.Ссылка, ТекстОтвета, ВложенияТекстаПисьма);
		ЭтотОбъект["бзСписокФайловРешения"].Очистить();	
		
		бзДобавитьВТекстПисьма(ТекстОтвета, ВложенияТекстаПисьма);
		Модифицированность = Истина;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаПисьмо;
		//ТекущийЭлемент = Элементы.Текст;
		ТекущийЭлемент = Элементы.ТекстПисьмаФорматированныйДокумент;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура бзСкопироватьПрисоединенныеФайлыИзРешенияВПисьмо()
	СписокОтбора = Новый СписокЗначений;
	Для Каждого ТекущиеДанные Из ЭтотОбъект["бзСписокФайловРешения"] Цикл
		Если ТекущиеДанные.Пометка Тогда
			СписокОтбора.Добавить(ТекущиеДанные.Значение);
		КонецЕсли;
	КонецЦикла;
	Если СписокОтбора.Количество() > 0 Тогда
		Если Объект.Ссылка.Пустая() Тогда
			Записать();
		КонецЕсли;			
		CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(ЭтотОбъект["бзТекущийВопрос"], Объект.Ссылка, СписокОтбора);				
	КонецЕсли;
КонецПроцедуры	
	
//////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМАТИРОВАННОГО ТЕКСТА

&НаСервере
// Процедура заполняет поле формы "ТекстВопросаHTML" и список выбора ответов для текущего решения.
//
// Параметры:
//	Нет.
//
Процедура бзЗаполнитьТекстВопросаHTML()
	ЭтотОбъект["бзТекстВопросаHTML"] = "";
	Решение = ЭтотОбъект["бзТекущийВопрос"];
	Если НЕ ЗначениеЗаполнено(Решение) Тогда Возврат; КонецЕсли;
	СтрокаРешения = Неопределено;
	МассивСтрок = ЭтотОбъект["бзРешения"].НайтиСтроки(Новый Структура("Решение", Решение));
	Для Каждого ЭлементМассива Из МассивСтрок Цикл
		Если ЭтотОбъект["бзТекущийИдентификатор"] = ЭлементМассива.ПолучитьИдентификатор() Тогда
			СтрокаРешения = ЭлементМассива;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Если СтрокаРешения = Неопределено Тогда Возврат; КонецЕсли;
	// Заполняем текст вопроса
	ОбластьПоиска	= ЭтотОбъект["бзОбластьПоиска"];
	СтрокаПоиска	= ЭтотОбъект["бзСтрокаПоиска"];
	ПозицияНачала   = CRM_УправлениеЭлектроннойПочтой.ПозицияПослеТега(Решение.ТекстВопросаHTML, "body");
	ТекстНачала		= Лев(Решение.ТекстВопросаHTML, ПозицияНачала);
	ПозицияКонца	= Найти(Решение.ТекстВопросаHTML, "</body>");
	ТекстКонца		= Сред(Решение.ТекстВопросаHTML, ПозицияКонца);
	ТекстВопроса	= Сред(Решение.ТекстВопросаHTML, ПозицияНачала, ПозицияКонца - ПозицияНачала - 1);
	ТекстВопроса	= СокрЛП(ТекстВопроса);
	ТекстВопроса	= СтрЗаменить(ТекстВопроса, Символы.ПС, "");
	ТекстВопроса	= СтрЗаменить(ТекстВопроса, "</p><p></p><p>", "</p><p>");
	НомерВложения = 0;
	
	Если ЗначениеЗаполнено(Решение.ОсновнаяКатегория) Тогда
		РешениеОсновнаяКатегория = Решение.ОсновнаяКатегория.Наименование;
	Иначе
		РешениеОсновнаяКатегория = НСтр("ru='[не задана]'");
	КонецЕсли;	
	Если ЗначениеЗаполнено(Решение.Проект) Тогда
		РешениеПроект = Решение.Проект.Наименование;
	Иначе
		РешениеПроект = НСтр("ru='[не задан]'");
	КонецЕсли;	
	// Добавляем текст вопроса
	ТекстПоляHTML	= ТекстНачала + "<p><b>"
		+ Нстр("ru='Вопрос: '") + "</b>" + CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(Решение.Наименование, СтрокаПоиска) + "</p><p><b>"; 
	// 
	ТекстПоляHTML = ТекстПоляHTML + "</b>" + " " 
	+ "<FONT size=2><A href=""ДобавитьТекстВопросаВТекстПисьма"">""Добавить в текст письма""</A></FONT><BR>" 	
	+ "</p><p>";
	//		
	Если ЗначениеЗаполнено(Решение.ОсновнаяКатегория) Тогда
		ТекстПоляHTML	= ТекстПоляHTML + "<FONT size=1>" + Нстр("ru='Основная категория: '") + "<b>" 
			+ CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(Решение.ОсновнаяКатегория.Наименование, СтрокаПоиска) + "</b></FONT></p><p><b>";
	Иначе
		ТекстПоляHTML	= ТекстПоляHTML + "<FONT size=1>" +  Нстр("ru='Основная категория: '")  + "<b>" + НСтр("ru='[не задана]'") + "</b></FONT></p>";
	КонецЕсли;	
	Если ЗначениеЗаполнено(Решение.Проект) Тогда
		ТекстПоляHTML	= ТекстПоляHTML + "<FONT size=1>" + Нстр("ru='Проект: '") 
			+ "<b>" + CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(Решение.Проект.Наименование, СтрокаПоиска) + "</b></FONT></p><p>"; 
	Иначе
		ТекстПоляHTML	= ТекстПоляHTML + "<FONT size=1>" + Нстр("ru='Проект: '") + "<b>" + НСтр("ru='[не задан]'") + "</b></FONT></p><p>"; 
	КонецЕсли;	
	Если ЗначениеЗаполнено(Решение.Автор) Тогда
		ТекстПоляHTML	= ТекстПоляHTML + "<FONT size=1>" + Нстр("ru='Автор: '") + "<b>" 
			+ CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(Решение.Автор.Наименование, СтрокаПоиска) + "</b></FONT></p><br>";
	Иначе
		ТекстПоляHTML	= ТекстПоляHTML + "<FONT size=1>" + Нстр("ru='Автор: '") + "<b>" + НСтр("ru='[не задан]'") + "</b></FONT></p><br>";
	КонецЕсли;	
	ТекстПоляHTML	= ТекстПоляHTML + CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(ТекстВопроса, СтрокаПоиска);
	// Заполняем список выбора
	СписокВыбораОтветов = Элементы["бзРешенияВыбранныйОтвет"].СписокВыбора;
	СписокВыбораОтветов.Очистить();
	СписокВыбораОтветов.Добавить("");
	Если (Решение.СтатусРешения = Перечисления.CRM_СтатусыРешений.Личное) И НЕ (Решение.Автор = Пользователи.АвторизованныйПользователь()) Тогда
		ТекстПоляHTML = ТекстПоляHTML + ТекстКонца;
		СтруктураПоляHTML = бзСформироватьОписаниеТекущегоРешения(ТекстПоляHTML, Решение, 0);
		ЭтотОбъект["бзТекстВопросаHTML"] = СтруктураПоляHTML.Тело;				
	ИначеЕсли Решение.СтатусРешения = Перечисления.CRM_СтатусыРешений.НаРассмотрении Тогда
		ТекстПоляHTML = ТекстПоляHTML + ТекстКонца;
		СтруктураПоляHTML = бзСформироватьОписаниеТекущегоРешения(ТекстПоляHTML, Решение, 0);
		ЭтотОбъект["бзТекстВопросаHTML"] = СтруктураПоляHTML.Тело;				
	Иначе	
		ТекстПоляHTML = ТекстПоляHTML + ТекстКонца;
		СтруктураПоляHTML = бзСформироватьОписаниеТекущегоРешения(ТекстПоляHTML, Решение, 0);
		ЭтотОбъект["бзТекстВопросаHTML"] = СтруктураПоляHTML.Тело;						
		// Заполняем тексты всех ответов и сортируем их.
		ЭтотОбъект["бзТаблицаОтветов"].Очистить();
		Для Каждого ТекОтвет Из Решение.Ответы Цикл
			НоваяСтрока		= ЭтотОбъект["бзТаблицаОтветов"].Добавить();
			НоваяСтрока.Наименование = ТекОтвет.НаименованиеОтвета;
			ПозицияНачала   = CRM_УправлениеЭлектроннойПочтой.ПозицияПослеТега(ТекОтвет.ВариантОтветаHTML, "body");
			ПозицияКонца	= Найти(ТекОтвет.ВариантОтветаHTML, "</body>");
			ТекстОтвета		= Сред(ТекОтвет.ВариантОтветаHTML, ПозицияНачала, ПозицияКонца - ПозицияНачала - 1);
			ТекстОтвета		= СокрЛП(ТекстОтвета);
			ТекстОтвета		= СтрЗаменить(ТекстОтвета, Символы.ПС, "");
			ТекстОтвета		= СтрЗаменить(ТекстОтвета, "</p><p></p><p>", "</p><p>");
			НоваяСтрока.ИДСтроки		= ТекОтвет.ИДСтроки;
			НоваяСтрока.НомерСтроки		= ТекОтвет.НомерСтроки;
			НоваяСтрока.Выбранный		= (СтрокаРешения.ИДСтроки = ТекОтвет.ИДСтроки);
			НоваяСтрока.Найденный		= НЕ (СтрокаРешения.Ответы.НайтиПоЗначению(ТекОтвет.ИДСтроки) = Неопределено);
			Если ТекОтвет.СтатусОтвета = Перечисления.CRM_СтатусыРешений.Утверждено Тогда
				НоваяСтрока.Порядок	= 2;
			ИначеЕсли ТекОтвет.СтатусОтвета = Перечисления.CRM_СтатусыРешений.Устарело Тогда	
				НоваяСтрока.Порядок	= 0;
			Иначе
				НоваяСтрока.Порядок	= 1;
			КонецЕсли;	

			НоваяСтрока.ТекстОтвета		= СокрЛП(ТекстОтвета);
			НоваяСтрока.НачалоТекста	= 0;	
			НоваяСтрока.КонецТекста		= 0;	
		КонецЦикла;
		НомерОтвета = 0;
		Для Каждого ТекОтвет Из ЭтотОбъект["бзТаблицаОтветов"] Цикл
			НомерОтвета = НомерОтвета + 1;
			СписокВыбораОтветов.Добавить(ТекОтвет.Наименование);
			// Добавляем текст ответа
			ТекстПоляОтветаHTML = "<p></p><p><b>" + Нстр("ru='Ответ №:'") + Строка(НомерОтвета) + " ";
			Если ТекОтвет.Порядок	= 0 Тогда
				ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + Нстр("ru='(устаревший)'") + " ";
			КонецЕсли;
			// 
			ТекстСсылки = "ДобавитьТекстОтветаВТекстПисьма" + НомерОтвета;
			ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + "</b>" + " " 
				+ "<FONT size=2><A href=" + ТекстСсылки +">""Добавить в текст письма""</A></FONT><BR>" 
				+ "</p><p>";				
			АвторИзменения = ЭтотОбъект["бзТекущийВопрос"].Ответы[ТекОтвет.НомерСтроки - 1].АвторИзменения;
			Если ЗначениеЗаполнено(АвторИзменения) Тогда
				ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + "<FONT size=1>" + НСтр("ru='Автор: '") + "<b>" 
					+ CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(АвторИзменения.Наименование, СтрокаПоиска) + "</FONT></b></p><br>";
			Иначе
				ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + "<FONT size=1>" + НСтр("ru='Автор: '") + "<b>" + НСтр("ru='[не задан]'") + "</FONT></b></p><br>";
			КонецЕсли;	
			ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(ТекОтвет.ТекстОтвета, СтрокаПоиска);
			//
			СтруктураПоляHTML = бзСформироватьОписаниеТекущегоРешения(ТекстПоляОтветаHTML, Решение, ТекОтвет.ИДСтроки);
			ЭтотОбъект["бзТекстВопросаHTML"] = ЭтотОбъект["бзТекстВопросаHTML"] + "<hr><br>" + СтруктураПоляHTML.Тело;				
		КонецЦикла;
		ТекстПоляHTML = ТекстПоляHTML + ТекстКонца;
	КонецЕсли;
	
	ДлинаТекстаВопроса	= СтрДлина(ТекстПоляHTML);
	ПозицияОтвета		= Найти(ТекстПоляHTML, НСтр("ru='Ответ №:'"));	
	НачалоОтвета		= ПозицияОтвета;
	Для Каждого ТекОтвет Из ЭтотОбъект["бзТаблицаОтветов"] Цикл
		ТекОтвет.НачалоТекста	= НачалоОтвета;
		ТекстВопроса			= Сред(ТекстПоляHTML, ПозицияОтвета + 8);
		ПозицияОтвета			= Найти(ТекстПоляHTML, НСтр("ru='Ответ №:'"));	
		Если ПозицияОтвета = 0 Тогда
			ТекОтвет.КонецТекста	= ДлинаТекстаВопроса;	
		Иначе	
			НачалоОтвета			= НачалоОтвета + 8 + ПозицияОтвета;	
			ТекОтвет.КонецТекста	= НачалоОтвета - 1;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры // БзЗаполнитьТекстВопросаHTML().

&НаСервере
// Функция возвращает ИДСтроки выбранного ответа.
//
// Параметры:
//	НаименованиеОтвета	- Строка			- Наименование ответа.
//
// Возвращаемое значение:
//	Число	- ИДСтроки
//
Функция бзПолучитьИДСтроки(НаименованиеОтвета);
	ИДСтроки = "";
	Если НЕ ПустаяСтрока(НаименованиеОтвета) Тогда
		Для Каждого ТекОтвет Из ЭтотОбъект["бзТаблицаОтветов"] Цикл
			Если ТекОтвет.Наименование = НаименованиеОтвета Тогда
				ИДСтроки = ТекОтвет.ИДСтроки;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	Возврат ИДСтроки;
КонецФункции // БзПолучитьИДСтроки(().

&НаСервере
// Функция возвращает текст выбранного ответа.
//
// Параметры:
//	НомерСтроки	- Число	- Номер строки ТЧ "Ответы".
//
// Возвращаемое значение:
//	Строка	- Текст ответа
//
Функция бзПолучитьТекстОтвета(НомерСтроки);
	ТекстОтвета = "";
	Если НомерСтроки > 0 Тогда
		ТекстОтвета = ЭтотОбъект["бзТекущийВопрос"].Ответы[НомерСтроки - 1].ВариантОтветаHTML;
	КонецЕсли;	
	Возврат ТекстОтвета;
КонецФункции // бзПолучитьТекстОтвета()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "Решения".
//
// Параметры:
//	Нет.
//
Процедура бзОбработчикРешенияПриАктивизацииСтроки()
	ТД = Элементы["бзРешения"].ТекущиеДанные;
	Если ТД = Неопределено Тогда
		ЭтотОбъект["бзТекстВопросаHTML"] = "";;
		Возврат;
	ИначеЕсли (ЭтотОбъект["бзТекущийВопрос"] = ТД.Решение) 
		И (ЭтотОбъект["бзТекущийИдентификатор"] = ТД.ПолучитьИдентификатор()) Тогда
		Возврат;
	КонецЕсли;
	ЭтотОбъект["бзТекущийВопрос"]			= ТД.Решение;
	ЭтотОбъект["бзТекущийИдентификатор"]	= ТД.ПолучитьИдентификатор();	
	Если ТД.Ответы.Количество() = 0 Тогда
		ТД.Ответы.Добавить(ТД.ИДСтроки);
	КонецЕсли;	
	бзЗаполнитьТекстВопросаHTML();
КонецПроцедуры // БзОбработчикРешенияПриАктивизацииСтроки().

&НаСервере
// Процедура добавляет в текст письма переданный текст.
//
// Параметры:
//	ВыделенныйТекст	- Строка	- Добавляемый текст.
//	ИДСтроки	- Строка	    - ИДСтроки
//
Процедура бзДобавитьВТекстПисьма(ВыделенныйТекст, ВложенияТекстаВопроса)
	//ФорматированныйДокументТекст.ПолучитьHTML(Объект.ТекстHTML, СтруктураВложенийТелаПисьма);
	//ФорматированныйДокументТекст.Удалить();
	ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(Объект.ТекстHTML, СтруктураВложенийТелаПисьма);
	ТекстПисьмаФорматированныйДокумент.Удалить();
	
	Для Каждого Стр Из ВложенияТекстаВопроса Цикл
		СтруктураВложенийТелаПисьма.Вставить(Стр.Ключ , Стр.Значение);
	КонецЦикла;
	Если Найти(ВыделенныйТекст, "<html>") = 0 Тогда
		ВставляемыйТекст	= "<p>" + ВыделенныйТекст + "</p>";
	Иначе	
		ПозицияНачала	    = CRM_УправлениеЭлектроннойПочтой.ПозицияПослеТега(ВыделенныйТекст, "body");
		ПозицияКонца		= Найти(ВыделенныйТекст, "</body>");
		ВставляемыйТекст	= СокрЛП(Сред(ВыделенныйТекст, ПозицияНачала, ПозицияКонца - ПозицияНачала));
	КонецЕсли;
	// Определяем длину вставляемого текста.
	НомерСимвола		= 0;
	НомерСимволаHTML	= 1;
	ФлагТега			= Ложь;
	ПолнаяДлинаТекста = СтрДлина(ВставляемыйТекст);
	Для  НомерСимволаHTML	= 1 По ПолнаяДлинаТекста Цикл
		ТекущийСимвол = Сред(ВставляемыйТекст, НомерСимволаHTML, 1); 
		Если ТекущийСимвол = "<" Тогда
			ФлагТега	= Истина;
		ИначеЕсли ТекущийСимвол = ">" Тогда
			ФлагТега	= Ложь;
		ИначеЕсли НЕ ФлагТега Тогда
			НомерСимвола	= НомерСимвола + 1;
		КонецЕсли;
	КонецЦикла;	
	ДлинаВставляемогоТекста = НомерСимвола;
	// Переходим на позицию в тексте.
	ПозицияНачала	= CRM_УправлениеЭлектроннойПочтой.ПозицияПослеТега(Объект.ТекстHTML, "body");
	ТекстНачала		= Лев(Объект.ТекстHTML, ПозицияНачала);
	ПозицияКонца	= Найти(Объект.ТекстHTML, "</body>");
	ТекстКонца		= Сред(Объект.ТекстHTML, ПозицияКонца);
	ТекстHTML		= СокрЛП(Сред(Объект.ТекстHTML, ПозицияНачала, ПозицияКонца - ПозицияНачала - 1));
	ПозицияНачала = ЭтотОбъект["бзПозицияТекста"];
	НомерСимвола		= 0;
	НомерСимволаHTML	= 1;
	ФлагТега			= Ложь;
	Если НЕ ПустаяСтрока(ТекстHTML) Тогда
		Пока Истина Цикл
			ТекущийСимвол = Сред(ТекстHTML, НомерСимволаHTML, 1); 
			Если ТекущийСимвол = "<" Тогда
				ФлагТега	= Истина;
			ИначеЕсли ТекущийСимвол = ">" Тогда
				ФлагТега	= Ложь;
			ИначеЕсли НЕ ФлагТега Тогда
				НомерСимвола	= НомерСимвола + 1;
			КонецЕсли;
			Если НомерСимвола = ПозицияНачала Тогда Прервать; КонецЕсли;
			НомерСимволаHTML	= НомерСимволаHTML + 1;
		КонецЦикла;	
	КонецЕсли;
	Объект.ТекстHTML	= ТекстНачала + Лев(ТекстHTML, НомерСимволаHTML - 1) + ВставляемыйТекст + Сред(ТекстHTML, НомерСимволаHTML) + ТекстКонца;
	// Вставляем текст
	//ФорматированныйДокументТекст.УстановитьHTML(Объект.ТекстHTML, СтруктураВложенийТелаПисьма);
	ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Объект.ТекстHTML, СтруктураВложенийТелаПисьма);
	// Запоминаем окончание вставки.
	Если ВложенияТекстаВопроса.Количество() = 0 Тогда
		ЭтотОбъект["бзПозицияТекста"] = ПозицияНачала + ДлинаВставляемогоТекста + 1;
	Иначе	
		ЭтотОбъект["бзПозицияТекста"] = ПозицияНачала + ДлинаВставляемогоТекста + 3;
	КонецЕсли;
	Попытка
		// Позиционируемся на окончание вставки
		//ЗакладкаКонца = ФорматированныйДокументТекст.ПолучитьЗакладкуПоПозиции(ЭтаФорма["бзПозицияТекста"]);
		ЗакладкаКонца = ТекстПисьмаФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(ЭтотОбъект["бзПозицияТекста"]);
		//Элементы.Текст.УстановитьГраницыВыделения(ЗакладкаКонца, ЗакладкаКонца);
		Элементы.ТекстПисьмаФорматированныйДокумент.УстановитьГраницыВыделения(ЗакладкаКонца, ЗакладкаКонца);
	Исключение
	КонецПопытки;	
КонецПроцедуры // бзДобавитьВТекстПисьма()

&НаКлиенте
Процедура бзПолучитьПозициюВТекстеПисьма()
	// Получаем позицию в тексте письма.
	ЗакладкаНачала	= Неопределено;
	ЗакладкаКонца	= Неопределено;
	Попытка
		//Элементы.Текст.ПолучитьГраницыВыделения(ЗакладкаНачала, ЗакладкаКонца);
		Элементы.ТекстПисьмаФорматированныйДокумент.ПолучитьГраницыВыделения(ЗакладкаНачала, ЗакладкаКонца);
		//ЭтаФорма["бзПозицияТекста"] = ФорматированныйДокументТекст.ПолучитьПозициюПоЗакладке(ЗакладкаКонца);
		ЭтотОбъект["бзПозицияТекста"] = ТекстПисьмаФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаКонца);
	Исключение
	КонецПопытки;
КонецПроцедуры // БзПолучитьПозициюВТекстеПисьма().

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "СтрокаПоиска".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзСтрокаПоискаПриИзменении(Элемент)
	Элементы["бзПолнотекстовыйПоискОтменить"].Доступность = ЗначениеЗаполнено(ЭтотОбъект["бзСтрокаПоиска"]);
	бзВыполнитьПП();
КонецПроцедуры // Подключаемый_бзСтрокаПоискаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "СтрокаПоиска".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзСтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокДляВыбора = Новый СписокЗначений();
	СписокДляВыбора.Добавить("[ПоискПоПолномуНазванию]", НСтр("ru = '[Поиск по полному названию]'"));
	СписокДляВыбора.Добавить("[ПоискПоПодстроке]", НСтр("ru = '[Поиск по подстроке]'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_бзСтрокаПоискаНачалоВыбораЗавершение", ЭтотОбъект, Элемент);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДляВыбора, Элемент, ?(ЭтотОбъект["бзПоискПоПодстроке"], СписокДляВыбора[1], СписокДляВыбора[0]));
КонецПроцедуры // Подключаемый_бзСтрокаПоискаНачалоВыбора()

&НаКлиенте
Процедура Подключаемый_бзСтрокаПоискаНачалоВыбораЗавершение(ВыбранноеЗначение, Элемент) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда
		Элементы["бзСтрокаПоиска"].ПодсказкаВвода = ВыбранноеЗначение.Представление;
		Элементы["бзСтрокаПоиска"].Подсказка = ВыбранноеЗначение.Представление;
		Если ВыбранноеЗначение.Значение = "[ПоискПоПодстроке]" Тогда
			ЭтотОбъект["бзПоискПоПодстроке"] = Истина;
		Иначе
			ЭтотОбъект["бзПоискПоПодстроке"] = Ложь;
		КонецЕсли;
		Подключаемый_бзСтрокаПоискаПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры // Подключаемый_бзСтрокаПоискаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" поля ввода "СтрокаПоиска".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзСтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	КоличествоНайденных = 0;
	Для Каждого ЭлементСписка Из ЭтотОбъект["бзСтрокаПоискаСписокВыбора"] Цикл
		Если ВРег(Лев(ЭлементСписка, 6)) = "[ПОИСК" Тогда
			Продолжить;
		КонецЕсли;
		Если ЛЕВ(ВРег(ЭлементСписка.Значение), СтрДлина(СокрЛП(Текст))) = ВРег(СокрЛП(Текст)) Тогда
			 ДанныеВыбора.Добавить(ЭлементСписка.Значение);
			 КоличествоНайденных = КоличествоНайденных + 1;
			 Если КоличествоНайденных > 7 Тогда
				 Прервать;
			 КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;
	Если ДанныеВыбора.Количество() = 0 Тогда
		ДанныеВыбора = Неопределено;
		СтандартнаяОбработка = Истина;
	КонецЕсли;
КонецПроцедуры // Подключаемый_бзСтрокаПоискаАвтоПодбор()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" флажка "ИскатьПоПроекту".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзИскатьПоПроектуПриИзменении(Элемент)
	бзВыполнитьПП();
КонецПроцедуры // Подключаемый_бзИскатьПоПроектуПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" надписи "ДекорацияИндексППНеактуален".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзДекорацияИндексППНеактуаленНажатие(Элемент)
	ПодключитьОбработчикОжидания("бзОбновлениеИндексаПДД", 0.2, Истина);
КонецПроцедуры // Подключаемый_бзДекорацияИндексППНеактуаленНажатие()

&НаКлиенте
// Процедура - обработчик события "Выбор" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзРешенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы["бзРешения"].ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ПоказатьЗначение(, ТД.Решение);
КонецПроцедуры // Подключаемый_бзРешенияВыбор()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзРешенияПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("бзОбработчикРешенияПриАктивизацииСтроки", 0.2, Истина);
КонецПроцедуры // Подключаемый_бзРешенияПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзРешенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_бзРешенияПередНачаломДобавленияЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.CRM_Решения.ФормаСписка", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры // Подключаемый_бзРешенияПередНачаломДобавления()

&НаКлиенте
Процедура Подключаемый_бзРешенияПередНачаломДобавленияЗавершение(ВыбранноеРешение, Группа) Экспорт
	Если ВыбранноеРешение = Неопределено Тогда Возврат; КонецЕсли;
	ИндексСтроки = бзДобавитьИспользуемоеРешение(ВыбранноеРешение);	
	СтрокаРешения = ЭтотОбъект["бзРешения"][ИндексСтроки].ПолучитьИдентификатор();
	Элементы["бзРешения"].ТекущаяСтрока = СтрокаРешения;
КонецПроцедуры // Подключаемый_бзРешенияПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзРешенияПередНачаломИзменения(Элемент, Отказ)
	Если (Элемент.ТекущийЭлемент.Имя = "бзРешенияРешение") ИЛИ (Элемент.ТекущийЭлемент.Имя = "бзРешенияКатегория") Тогда
		Отказ = Истина;
		ТД = Элементы["бзРешения"].ТекущиеДанные;
		Если ТД = Неопределено Тогда Возврат; КонецЕсли;
		ПоказатьЗначение(, ТД.Решение);
	КонецЕсли;	
КонецПроцедуры // Подключаемый_бзРешенияПередНачаломИзменения()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзРешенияПередУдалением(Элемент, Отказ)
	Если ЭтотОбъект["бзРешения"].Количество()	= 1 Тогда
		ЭтотОбъект["бзТекстВопросаHTML"]		= "";
		ЭтотОбъект["бзТекущийВопрос"]			= ПредопределенноеЗначение("Справочник.CRM_Решения.ПустаяСсылка");
		ЭтотОбъект["бзТекущийИдентификатор"]	= 0;
	КонецЕсли;	
КонецПроцедуры // Подключаемый_бзРешенияПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля ввода "ВыбранныйОтвет" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзРешенияВыбранныйОтветОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТД = Элементы["бзРешения"].ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ТД.ИДСтроки	= бзПолучитьИДСтроки(ВыбранноеЗначение);
	ТД.ВыбранныйОтвет	= ВыбранноеЗначение;
	Если НЕ ПустаяСтрока(ВыбранноеЗначение) Тогда
		ТД.Использовать = Истина;		
	КонецЕсли;	
	бзЗаполнитьТекстВопросаHTML();	
КонецПроцедуры // Подключаемый_бзРешенияВыбранныйОтветОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриНажатии" поля формы "бзТекстВопросаHTML".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзТекстВопросаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтруктураНажатия = бзПроверитьЧтоЭтоСсылкаНаДобавление(ДанныеСобытия.Href); 
	Если СтруктураНажатия.ОбработатьСсылку Тогда		
		СтандартнаяОбработка = Ложь;	
		бзОбработатьСсылку(СтруктураНажатия.ИмяОбработчика);
		
		// Подгатавливаем файлы для копирования из решения.
		Решение = ЭтотОбъект["бзТекущийВопрос"];	
		Если СтруктураНажатия.ИмяОбработчика = "ДобавитьТекстВопросаВТекстПисьма" Тогда
			МассивФайлов = CRM_БазаЗнанийСервер.бзПолучитьВсеПодчиненныеФайлы(Решение, "");
			Если МассивФайлов.Количество() > 0 Тогда
				ЭтотОбъект["бзСписокФайловРешения"].ЗагрузитьЗначения(МассивФайлов);
				Если ЭтотОбъект["бзСписокФайловРешения"].Количество() > 0 Тогда
					НовоеОповещение = Новый ОписаниеОповещения("ВыборФайловДляКопированияБЗ", ЭтотОбъект);
					ПараметрыФормы = Новый Структура ("СписокФайлов", ЭтотОбъект["бзСписокФайловРешения"]);
					ОткрытьФорму("ОбщаяФорма.CRM_ФормаВыбораФайловДляКопирования", ПараметрыФормы,,,,,НовоеОповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
					Возврат;
				КонецЕсли
			КонецЕсли;
		ИначеЕсли Найти(СтруктураНажатия.ИмяОбработчика, "ДобавитьТекстОтветаВТекстПисьма") > 0 Тогда
			НомерОтвета = Число(Прав(СтруктураНажатия.ИмяОбработчика,СтрДлина(СтруктураНажатия.ИмяОбработчика) - СтрДлина("ДобавитьТекстОтветаВТекстПисьма")));
			ТекОтвет = бзПолучитьДанныеОтветаПоИндексу(Решение, НомерОтвета);			
			МассивФайлов = CRM_БазаЗнанийСервер.бзПолучитьВсеПодчиненныеФайлы(Решение, ТекОтвет.ИДСтроки);
			Если МассивФайлов.Количество() > 0 Тогда
				ЭтотОбъект["бзСписокФайловРешения"].ЗагрузитьЗначения(МассивФайлов);
				Если ЭтотОбъект["бзСписокФайловРешения"].Количество() > 0 Тогда
					НовоеОповещение = Новый ОписаниеОповещения("ВыборФайловДляКопированияБЗ", ЭтотОбъект);
					ПараметрыФормы = Новый Структура ("СписокФайлов", ЭтотОбъект["бзСписокФайловРешения"]);
					ОткрытьФорму("ОбщаяФорма.CRM_ФормаВыбораФайловДляКопирования", ПараметрыФормы,,,,,НовоеОповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
					Возврат;
				КонецЕсли
			КонецЕсли;			
		КонецЕсли;						
	КонецЕсли;		
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ КОМАНД ФОРМЫ

&НаКлиенте
// Процедура - обработчик команды формы "ОткрытьБазуЗнаний".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзОткрытьБазуЗнаний(Команда)
	Элементы["бзОткрытьБазуЗнаний"].Пометка		= НЕ Элементы["бзОткрытьБазуЗнаний"].Пометка;
	Элементы["бзГруппаБазаЗнаний"].Видимость	= Элементы["бзОткрытьБазуЗнаний"].Пометка;
	Если Элементы["бзГруппаБазаЗнаний"].Видимость Тогда
		// Получаем позицию в тексте письма.
		бзПолучитьПозициюВТекстеПисьма();
		// Переходим на страницу "База знаний".
		ТекущийЭлемент = Элементы["бзГруппаБазаЗнаний"];
		// Устанавливаем область поиска по умолчанию.
		Если ПустаяСтрока(ЭтотОбъект["бзОбластьПоиска"]) Тогда
			ЭтотОбъект["бзОбластьПоиска"] = Элементы["бзОбластьПоиска"].СписокВыбора[0].Значение;
		КонецЕсли;	
		Если ЭтотОбъект["бзРешения"].Количество() = 0 Тогда
			ЭтотОбъект["бзСтрокаПоиска"]		= бзПолучитьТему();
			ЭтотОбъект["бзИскатьПоПроекту"]	= Ложь;
			Элементы["бзПолнотекстовыйПоискОтменить"].Доступность = ЗначениеЗаполнено(ЭтотОбъект["бзСтрокаПоиска"]);
			бзВыполнитьПП();
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // Подключаемый_бзОткрытьБазуЗнаний()

&НаКлиенте
Процедура ТекстПриИзменении(Элемент)
	// Получаем позицию в тексте письма.
	бзПолучитьПозициюВТекстеПисьма();
КонецПроцедуры // ТекстПриИзменении()

// -БазаЗнаний

// ********************Бизнес-Процессы********************

&НаКлиенте
Процедура ПриИзмененииПартнера()
	
	// { VOG RMV 2019-03-05
	// Всё, что касается интереса не используется
	//ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	//CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	//ПерезаполнитьПодсказкуОбАктивныхИнтересах();
	// } VOG RMV 2019-03-05
	
	ЗаполнитьАвтотекстПриИзмененииПартнера();
	
КонецПроцедуры

&НаСервере
Функция ВернутьВладельца(КонтактноеЛицо)
	
	Возврат КонтактноеЛицо.Владелец;
	
КонецФункции

&НаСервере
Функция ОпределитьПартнера()
	
	Для Каждого СтрокаЧТ Из ПолучателиПисьма Цикл
		Если ЗначениеЗаполнено(СтрокаЧТ.Контакт) Тогда
			Если ТипЗнч(СтрокаЧТ.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Возврат СтрокаЧТ.Контакт;
			ИначеЕсли ТипЗнч(СтрокаЧТ.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Возврат ВернутьВладельца(СтрокаЧТ.Контакт);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Справочники.Партнеры.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВозможныхИсполнителейПоРоли(Роль)
	
	СписокИсполнителей = Новый списокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РольИсполнителя",Роль);
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсполнителиЗадач.Исполнитель
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	
	СписокИсполнителей.ЗагрузитьЗначения(Массив);
	
	Возврат СписокИсполнителей;
	
КонецФункции

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
			
	Если НЕ Настройки["ВсеВложенияПометка"] = Неопределено Тогда
		ВсеВложенияПометка	= Настройки["ВсеВложенияПометка"];
	Иначе
		ВсеВложенияПометка	= Ложь;
	КонецЕсли;
	Элементы.ФормаВсеВложения.Пометка	= ВсеВложенияПометка;	
	
	Если НЕ Настройки["ВсегдаПоказыватьВложения"] = Неопределено Тогда
		ВсегдаПоказыватьВложения	= Настройки["ВсегдаПоказыватьВложения"];
	Иначе
		ВсегдаПоказыватьВложения	= Ложь;
	КонецЕсли;
	Элементы.ФормаВсегдаПоказыватьВложения.Пометка	= ВсегдаПоказыватьВложения;	
	Элементы.КоманднаяПанельВложенияСкрытьПанель.Видимость = НЕ ВсегдаПоказыватьВложения;		
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРежимаРедактирования()
	
	//Элементы.ГруппаТекст.ТолькоПросмотр						= НЕ Объект.CRM_РазрешеноРедактирование;
	Элементы.ГруппаВложения.ТолькоПросмотр					= НЕ Объект.CRM_РазрешеноРедактирование;
	Элементы.КоманднаяПанельВложенияДобавить.Доступность	= Объект.CRM_РазрешеноРедактирование;
	Элементы.КонтекстноеМенюВложенияДобавить.Доступность	= Объект.CRM_РазрешеноРедактирование;
	Элементы.КоманднаяПанельВложенияУдалить.Доступность		= Объект.CRM_РазрешеноРедактирование;
	Элементы.КонтекстноеМенюВложенияУдалить.Доступность		= Объект.CRM_РазрешеноРедактирование;
	Элементы.КоманднаяПанельВложенияУдалитьВсе.Доступность	= Объект.CRM_РазрешеноРедактирование;
	Элементы.КонтекстноеМенюВложенияУдалитьВсе.Доступность	= Объект.CRM_РазрешеноРедактирование;
	
	УстановитьСвойстваКнопкиРазрешитьРедактирование();
	
	Если НЕ Объект.CRM_РазрешеноРедактирование И МенялиФлагРедактирования Тогда
		СформироватьВложенияПослеЗаписи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактирование(Команда)
	
	Если НЕ Объект.CRM_РазрешеноРедактирование Тогда
		ТекстВопроса = НСтр("ru = 'Письмо было создано на основании рассылки.
		|При последующих изменениях содержания рассылки эти изменения не 
		|будут перенесены в данное письмо.
		|Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Письмо было создано на основании рассылки.
		|Содержание письма и вложения будут заполнены из рассылки.
		|Продолжить?'");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РазрешитьРедактированиеЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.CRM_РазрешеноРедактирование	= НЕ Объект.CRM_РазрешеноРедактирование;
	МенялиФлагРедактирования	= Истина;
	
	ПриИзмененииРежимаРедактирования();
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
	
КонецПроцедуры
// -CRM

// *******************************ПЕРЕНЕСЕНО ИЗ УТ11*******************************

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////
// Формирование текста письма

&НаСервере
Функция СформироватьТекстПисьмаВключаяПисьмоОснование(ДокументHTMLТекущееРедактирование, ТекущийОбъект)
	
	Выборка = Взаимодействия.ПолучитьДанныеПисьмаОснования(Объект.ВзаимодействиеОснование);
	
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
		
		Возврат СформироватьИсходящееОбычныйТекст(Выборка, ТекущийОбъект);
		
	Иначе
		
		Возврат СформироватьИсходящееHTML(Выборка,ДокументHTMLТекущееРедактирование, ТекущийОбъект);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьИсходящееHTML(Выборка,ДокументHTMLТекущееРедактирование, ТекущийОбъект)
	
	// Получим ДокументHTML входящего письма.
	Если Выборка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		ДокументHTML = Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(Выборка.Текст);
	Иначе
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(Выборка.ТекстHTML);
	КонецЕсли;
	
	ЭлементТелоПисьма = ДокументHTML.Тело;
	Если ЭлементТелоПисьма = Неопределено Тогда
		Если ДокументHTMLТекущееРедактирование = Неопределено Тогда
			Возврат ТекущийОбъект.ТекстHTML;
		Иначе
			Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTMLТекущееРедактирование);
		КонецЕсли
	КонецЕсли;
	
	Если ДокументHTMLТекущееРедактирование = Неопределено Тогда
		ДокументHTMLТекущееРедактирование = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстHTML);
	КонецЕсли;
	
	МассивДочернихУзловТела = Взаимодействия.МассивДочернихУзловСодержащихHTML(ЭлементТелоПисьма);
	
	// Добавляем текст отредактированный в поле форматированного документа.
	Если ДокументHTMLТекущееРедактирование.Тело <> Неопределено Тогда
		Для каждого ДочернийУзел Из ДокументHTMLТекущееРедактирование.Тело.ДочерниеУзлы Цикл
			
			ЭлементТелоПисьма.ДобавитьДочерний(ДокументHTML.ИмпортироватьУзел(ДочернийУзел,Истина));
			
		КонецЦикла;
	КонецЕсли;
	
	ЭлементDIV = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементТелоПисьма,
		"div",
		Новый Структура("style", "border:none;border-left:solid blue 1.5pt;padding:0cm 0cm 0cm 4.0pt"));
		
	Для каждого ДочернийУзел Из МассивДочернихУзловТела Цикл
		
		ЭлементDIV.ДобавитьДочерний(ДочернийУзел);
		
	КонецЦикла;

	// Подготовим шапку письма основания.
	// Горизонтальный разделитель
	СтруктураАтрибутов = Новый Структура;
	СтруктураАтрибутов.Вставить("size", "2");
	СтруктураАтрибутов.Вставить("width", "100%");
	СтруктураАтрибутов.Вставить("align", "center");
	СтруктураАтрибутов.Вставить("tabindex", "-1");
	
	ЭлементHR = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементDIV,
		"hr",
		СтруктураАтрибутов);
	Взаимодействия.ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементDIV ,ЭлементHR, МассивДочернихУзловТела);
	
	// Данные письма основания
	ЭлементШрифт = Взаимодействия.СформироватьЭлементДанныхШапкиПисьма(ЭлементDIV, Выборка);
	Взаимодействия.ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементDIV, ЭлементШрифт, МассивДочернихУзловТела);
	
	Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецФункции

&НаСервере
Функция СформироватьИсходящееОбычныйТекст(ВыборкаДанныеВходящегоПисьма, ТекущийОбъект)

	// Формирование шапки входящего письма.
	СтрокаШапка = НСтр("ru = '-----Пересылаемое сообщение-----'");
	
	СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'От'") + ": "+ ВыборкаДанныеВходящегоПисьма.ОтправительПредставление
		          + ?(ВыборкаДанныеВходящегоПисьма.ИмяОбъектаМетаданных = "ЭлектронноеПисьмоВходящее",
		          "[" + ВыборкаДанныеВходящегоПисьма.ОтправительАдрес +"]",
		          "");
		
	СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'Отправлено'") + ": " 
	              + Формат(ВыборкаДанныеВходящегоПисьма.Дата,"ДФ='dd MMMM yyyy'");
	
	СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'Кому'") + ": " 
	    + Взаимодействия.ПолучитьПредставленияПолучателейВходящегоПисьма(ВыборкаДанныеВходящегоПисьма.ПолучателиПисьма.Выгрузить());
		
	ТаблицаПолучателейКопий = ВыборкаДанныеВходящегоПисьма.ПолучателиКопий.Выгрузить();
	
	Если ТаблицаПолучателейКопий.Количество() > 0 Тогда
		СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'Копии'") + ": "
		+ Взаимодействия.ПолучитьПредставленияПолучателейВходящегоПисьма(ТаблицаПолучателейКопий);
	КонецЕсли;
	
	СтрокаШапка = СтрокаШапка + Символы.ПС+ НСтр("ru = 'Тема'") + ": " + ВыборкаДанныеВходящегоПисьма.Тема;
	
	// Преобразование к обычному тексту текста HTML если это необходимо.
	Если ВыборкаДанныеВходящегоПисьма.ТипТекста <> Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		
		ТекстВходящегоПисьма =  Взаимодействия.ПолучитьОбычныйТекстИзHTML(ВыборкаДанныеВходящегоПисьма.ТекстHTML);
		
	Иначе
		
		ТекстВходящегоПисьма = ВыборкаДанныеВходящегоПисьма.Текст
		
	КонецЕсли;
	
	Возврат ТекущийОбъект.Текст + Символы.ПС + Символы.ПС + СтрокаШапка + Символы.ПС + Символы.ПС + ТекстВходящегоПисьма;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ОценитьРазмерПисьма()

	Размер = СтрДлина(Объект.Тема)*2;
	Размер = Размер + ?(Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML,
	                    СтрДлина(Объект.ТекстHTML),
	                    СтрДлина(Объект.Текст)) * 2;
	
	Для каждого Вложение Из Вложения Цикл
		Размер = Размер + Вложение.Размер * 1.5;
	КонецЦикла;
	
	Для каждого СтрокаТаблицыСоответствий Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
		Размер = Размер + СтрокаТаблицыСоответствий.Картинка.ПолучитьДвоичныеДанные().Размер()*1.5;
	КонецЦикла;
	
	Возврат Размер;

КонецФункции

&НаСервере
Процедура ИзменитьПодпись(ПредыдущаяУчетнаяЗапись, НоваяУчетнаяЗапись)
	
	Если Лев(НРег(Объект.Тема),3) <> "re:" И Лев(НРег(Объект.Тема),3) <> "fw:" Тогда
		ПараметрыПредыдущаяУЗПодписьПользователя	= ПолучитьПодписьПользователя(ПредыдущаяУчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь);
		ПараметрыНоваяУЗПодписьПользователя			= ПолучитьПодписьПользователя(НоваяУчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь);
	Иначе
		ПараметрыПредыдущаяУЗПодписьПользователя	= ПолучитьПодписьПользователя(ПредыдущаяУчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь, Истина);
		ПараметрыНоваяУЗПодписьПользователя			= ПолучитьПодписьПользователя(НоваяУчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь, Истина);
	КонецЕсли;
	
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
		Если ПустаяСтрока(ТекстПисьма) Тогда
			//ТекстПисьма = ПараметрыНоваяУЗ.Подпись;
		Иначе
			Если СтрЧислоВхождений(ТекстПисьма, ПараметрыПредыдущаяУЗПодписьПользователя) > 0 Тогда
				ТекстПисьма = СтрЗаменить(ТекстПисьма, ПараметрыПредыдущаяУЗПодписьПользователя, ПараметрыНоваяУЗПодписьПользователя);
			Иначе
				ТекстПисьма = ТекстПисьма + ПараметрыНоваяУЗПодписьПользователя;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		ТекстПисьмо = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		Если ПустаяСтрока(ТекстПисьмо) И НЕ ПараметрыНоваяУЗПодписьПользователя = Неопределено Тогда
			
			ТекстПисьмаФорматированныйДокумент = ПараметрыНоваяУЗПодписьПользователя;
			
		Иначе
			Если НЕ ПараметрыПредыдущаяУЗПодписьПользователя = Неопределено Тогда
				ТекстПредыдущаяУЗ = ПараметрыПредыдущаяУЗПодписьПользователя.ПолучитьТекст();
				
				Если СтрЧислоВхождений(ТекстПисьмо, ТекстПредыдущаяУЗ) > 0 Тогда
					
					КоличествоЭлементовСтараяПодпись = ПараметрыПредыдущаяУЗПодписьПользователя.Элементы.Количество();
					КоличествоЭлементовПисьмо        = ТекстПисьмаФорматированныйДокумент.Элементы.Количество();
					
					УдалитьЭлементыСтаройПодписи(ТекстПисьмаФорматированныйДокумент,ПараметрыПредыдущаяУЗПодписьПользователя);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПараметрыНоваяУЗПодписьПользователя = Неопределено Тогда
				ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ТекстПисьмаФорматированныйДокумент, ПараметрыНоваяУЗПодписьПользователя)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СравнитьПараграфы(ПараграфЭталон,ПараграфПисьма)
	
	Если НЕ ПараграфЭталон.Элементы.Количество() = ПараграфПисьма.Элементы.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	Для Инд = 0 По ПараграфЭталон.Элементы.Количество()-1 Цикл
		
		Если НЕ ТипЗнч(ПараграфЭталон.Элементы[Инд]) = ТипЗнч(ПараграфПисьма.Элементы[Инд]) Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
		Если ТипЗнч(ПараграфЭталон.Элементы[Инд]) = Тип("ТекстФорматированногоДокумента") Тогда
			Если НЕ ПараграфЭталон.Элементы[Инд].Текст = ПараграфПисьма.Элементы[Инд].Текст Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ПараграфЭталон.Элементы[Инд]) = Тип("КартинкаФорматированногоДокумента") Тогда
			Если НЕ ПараграфЭталон.Элементы[Инд].Картинка = ПараграфПисьма.Элементы[Инд].Картинка Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УдалитьЭлементыСтаройПодписи(ТекстПисьмаФорматированныйДокумент, СтараяПодпись)
	
	Инд				= -1;
	МассивИнд		= Новый Массив;
	ПодписьИзменили	= Ложь;
	НачалиПоиск		= Ложь;
	Для Каждого ПараграфСтараяПодпись Из СтараяПодпись.Элементы Цикл
		
		Если ПараграфСтараяПодпись.Элементы.Количество() = 1
		И ТипЗнч(ПараграфСтараяПодпись.Элементы[0]) = Тип("ПереводСтрокиФорматированногоДокумента")
		И НЕ НачалиПоиск Тогда
			Продолжить;
		КонецЕсли;
		
		НачалиПоиск = Истина;
		
		ПараграфНайден = Ложь;
		
		ТекущийИндекс = Инд+1;
		Для Ном = ТекущийИндекс По ТекстПисьмаФорматированныйДокумент.Элементы.Количество() - 1 Цикл
			ПараграфТекстПисьма = ТекстПисьмаФорматированныйДокумент.Элементы[Ном];
			
			Если СравнитьПараграфы(ПараграфСтараяПодпись,ПараграфТекстПисьма) Тогда
				
				ПараграфНайден = Истина;
				Если Инд < 0 Тогда
					Инд = ТекстПисьмаФорматированныйДокумент.Элементы.Индекс(ПараграфТекстПисьма);
					МассивИнд.Добавить(Инд);
				ИначеЕсли (ТекстПисьмаФорматированныйДокумент.Элементы.Индекс(ПараграфТекстПисьма) - Инд) > 1 Тогда
					МассивИнд.Очистить();
					ПодписьИзменили = Истина;
					Прервать;
				Иначе
					Инд = ТекстПисьмаФорматированныйДокумент.Элементы.Индекс(ПараграфТекстПисьма);
					МассивИнд.Добавить(Инд);
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПараграфНайден ИЛИ ПодписьИзменили Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Инд = 0 По МассивИнд.Количество()-1 Цикл
		
		ТекстПисьмаФорматированныйДокумент.Элементы.Удалить(МассивИнд[МассивИнд.Количество()-1-Инд]);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ПриемникДокумент, ДобавляемыйДокумент, ПолучатьГраницыВыделения = Ложь)
	
	Если ПриемникДокумент.Элементы.Количество() = 0 Тогда
		
		НовыйПараграф				= ПриемникДокумент.Элементы.Добавить();
		НовыйПараграф.ТипПараграфа	= ТипПараграфа.Обычный;
		НовыйЭлемент				= НовыйПараграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
		НовыйЭлемент				= НовыйПараграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
		
	КонецЕсли;
	
	Если ПолучатьГраницыВыделения Тогда
		ПозицияНачала	= 0;
		ПозицияКонца	= 0;
		Элементы.ТекстПисьмаФорматированныйДокумент.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияКонца);
	Иначе
		ПозицияНачала	= ПриемникДокумент.ПолучитьЗакладкуКонца();
		ПозицияКонца	= ПриемникДокумент.ПолучитьЗакладкуКонца();
	КонецЕсли;
	
	ИндексНовогоПараграфа = 0;
	Кон = ПриемникДокумент.ПолучитьПозициюПоЗакладке(ПозицияКонца);
	
	Для Каждого ЭлементДокумента Из ПриемникДокумент.Элементы Цикл
		
		ПозицияНач = ПриемникДокумент.ПолучитьПозициюПоЗакладке(ЭлементДокумента.ЗакладкаНачала);
		ПозицияКон = ПриемникДокумент.ПолучитьПозициюПоЗакладке(ЭлементДокумента.ЗакладкаКонца);
		
		Если Кон >= ПозицияНач И Кон <= ПозицияКон Тогда
			
			Если Кон = ПозицияНач Тогда
				ИндексНовогоПараграфа = ПриемникДокумент.Элементы.Индекс(ЭлементДокумента);
			ИначеЕсли Кон <= ПозицияКон Тогда
				ИндексНовогоПараграфа = ПриемникДокумент.Элементы.Индекс(ЭлементДокумента)+1;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НужноПереопределитьИндекс = Ложь;
	Если ИндексНовогоПараграфа > 0 И ИндексНовогоПараграфа = ПриемникДокумент.Элементы.Количество() Тогда
		НужноПереопределитьИндекс = Истина;
	КонецЕсли;
	
	Для ИД = 0 По ДобавляемыйДокумент.Элементы.Количество() -1 Цикл
		ЭлементДокумента = ДобавляемыйДокумент.Элементы[(ДобавляемыйДокумент.Элементы.Количество() -1 -ИД)];
		
		Если ТипЗнч(ЭлементДокумента) = Тип("ПараграфФорматированногоДокумента") Тогда
			
			Если ПриемникДокумент.Элементы.Количество() > 0 Тогда
				Если НужноПереопределитьИндекс Тогда
					НужноПереопределитьИндекс = Ложь;
					НовыйПараграф = ПриемникДокумент.Элементы.Добавить();
					ИндексНовогоПараграфа = ПриемникДокумент.Элементы.Индекс(НовыйПараграф);
				Иначе
					НовыйПараграф = ПриемникДокумент.Элементы.Добавить();
					
					ИндексДобавленногоПараграфа = ПриемникДокумент.Элементы.Индекс(НовыйПараграф);
					
					Пока ИндексДобавленногоПараграфа > ИндексНовогоПараграфа Цикл
						
						ПриемникДокумент.Элементы.Сдвинуть(ИндексДобавленногоПараграфа - 1, 1);
						
						ИндексДобавленногоПараграфа = ИндексДобавленногоПараграфа - 1;
					
					КонецЦикла; 
				КонецЕсли;
			Иначе
				НовыйПараграф = ПриемникДокумент.Элементы.Добавить();
			КонецЕсли;
			НовыйПараграф.ТипПараграфа = ЭлементДокумента.ТипПараграфа;
			
			ЗаполнитьЗначенияСвойств(НовыйПараграф,ЭлементДокумента,,"ЗакладкаКонца, ЗакладкаНачала");
			Для Инд = 0 По ЭлементДокумента.Элементы.Количество() -1 Цикл
				ПодчиненныйЭлемент = ЭлементДокумента.Элементы[Инд];
				
				Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ТекстФорматированногоДокумента") Тогда
					
					НовыйЭлемент = НовыйПараграф.Элементы.Добавить(ПодчиненныйЭлемент.Текст, Тип("ТекстФорматированногоДокумента"));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент,ПодчиненныйЭлемент,,"ЗакладкаКонца, ЗакладкаНачала, Родитель");
					
				ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("КартинкаФорматированногоДокумента") Тогда
					
					НовыйЭлемент = НовыйПараграф.Элементы.Добавить(ПодчиненныйЭлемент.Картинка, Тип("КартинкаФорматированногоДокумента"));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент,ПодчиненныйЭлемент,,"ЗакладкаКонца, ЗакладкаНачала, Родитель");
					
				ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
					
					НовыйЭлемент = НовыйПараграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВернутьФорматированныйДокументПоШаблону(ПереданныйШаблон)
	
	ТекстШаблонаФорматированныйДокумент	= Новый ФорматированныйДокумент;
	СтруктураВложений					= Новый Структура;
	
	ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(ПереданныйШаблон, ПереданныйШаблон.Текст, СтруктураВложений);
	
	Если ПолучателиПисьма.Количество() > 0 Тогда
		
		// заполним автотекст
		СтруктураЗаполненияАвтотекста = Новый Структура;
		СтруктураЗаполненияАвтотекста.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		СтруктураЗаполненияАвтотекста.Вставить("КонтактноеЛицо", Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
		
		Клиент = ПолучателиПисьма[0].Контакт;
		
		Если ЗначениеЗаполнено(Клиент) Тогда
			
			Если ТипЗнч(Клиент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				
				СтруктураЗаполненияАвтотекста.КонтактноеЛицо = Клиент;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.Партнеры") Тогда
				
				СтруктураЗаполненияАвтотекста.Партнер = Клиент;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.Пользователи") Тогда
				
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент.Наименование));
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("Строка") Тогда
				
				Если ЗначениеЗаполнено(СокрЛП(ПолучателиПисьма[0].Представление)) Тогда
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Представление));
				Иначе
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент));
				КонецЕсли;
			Иначе
				Попытка
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент.Наименование));
				Исключение
				КонецПопытки;
			КонецЕсли;
		Иначе	
			Если ЗначениеЗаполнено(СокрЛП(ПолучателиПисьма[0].Представление)) Тогда
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Представление));
			Иначе
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Адрес));
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаАвтотекста = Новый ТаблицаЗначений;
		
		ТаблицаАвтотекста.Колонки.Добавить("Тэг");
		ТаблицаАвтотекста.Колонки.Добавить("ИмяКоманды");
		ТаблицаАвтотекста.Колонки.Добавить("ЗаголовокКоманды");
		ТаблицаАвтотекста.Колонки.Добавить("Действие");
		
		CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, Перечисления.CRM_НазначенияАвтотекста.АвтотекстЭлектронноеПисьмо);
		
		Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
			Если Найти(ТекстHTML, СтрокаАвтотекста.Тэг) > 0 Тогда
				
				ЗначениеТэга	= CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, СтруктураЗаполненияАвтотекста);
				ТекстHTML		= СтрЗаменить(ТекстHTML, СтрокаАвтотекста.Тэг, ЗначениеТэга);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекстШаблонаФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
	
	Возврат ТекстШаблонаФорматированныйДокумент;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьАвтотекст(ТекстСТегами)
	
	Если ПолучателиПисьма.Количество() > 0 Тогда
		
		// заполним автотекст
		СтруктураЗаполненияАвтотекста = Новый Структура;
		СтруктураЗаполненияАвтотекста.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		СтруктураЗаполненияАвтотекста.Вставить("КонтактноеЛицо", Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
		
		Клиент = ПолучателиПисьма[0].Контакт;
		
		Если ЗначениеЗаполнено(Клиент) Тогда
			
			Если ТипЗнч(Клиент) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				
				СтруктураЗаполненияАвтотекста.КонтактноеЛицо = Клиент;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.Партнеры") Тогда
				
				СтруктураЗаполненияАвтотекста.Партнер = Клиент;
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.Пользователи") Тогда
				
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент.Наименование));
				
			ИначеЕсли ТипЗнч(Клиент) = Тип("Строка") Тогда
				
				Если ЗначениеЗаполнено(СокрЛП(ПолучателиПисьма[0].Представление)) Тогда
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Представление));
				Иначе
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент));
				КонецЕсли;
			Иначе
				Попытка
					СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(Клиент.Наименование));
				Исключение
				КонецПопытки;
			КонецЕсли;
		Иначе	
			Если ЗначениеЗаполнено(СокрЛП(ПолучателиПисьма[0].Представление)) Тогда
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Представление));
			Иначе
				СтруктураЗаполненияАвтотекста.Партнер = Новый Структура("Наименование", СокрЛП(ПолучателиПисьма[0].Адрес));
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаАвтотекста = Новый ТаблицаЗначений;
		
		ТаблицаАвтотекста.Колонки.Добавить("Тэг");
		ТаблицаАвтотекста.Колонки.Добавить("ИмяКоманды");
		ТаблицаАвтотекста.Колонки.Добавить("ЗаголовокКоманды");
		ТаблицаАвтотекста.Колонки.Добавить("Действие");
		
		CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, Перечисления.CRM_НазначенияАвтотекста.АвтотекстЭлектронноеПисьмо);
		
		Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
			Если Найти(ТекстСТегами, СтрокаАвтотекста.Тэг) > 0 Тогда
				
				ЗначениеТэга			= CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, СтруктураЗаполненияАвтотекста);
				ТекстСТегами	= СтрЗаменить(ТекстСТегами, СтрокаАвтотекста.Тэг, ЗначениеТэга);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтотекстПриИзмененииПартнера()
	
	Если Объект.CRM_ИзHTMLФайла Тогда
		
		Результат = ТекстПисьма;
		ЗаполнитьАвтотекст(Результат);
		
		Если НЕ Результат = ТекстПисьма Тогда
			ТекстПисьма = Результат;
		КонецЕсли;
	Иначе
		ВременнаяСтруктураВложений = Новый Структура;
		ВременныйТекстHTML = "";
		ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ВременныйТекстHTML,ВременнаяСтруктураВложений);
		
		Результат = ВременныйТекстHTML;
		ЗаполнитьАвтотекст(Результат);
		
		Если НЕ Результат = ВременныйТекстHTML Тогда
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Результат,ВременнаяСтруктураВложений);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьТекстПисьмаПоШаблону()
	
	ТекстПисьмаПоШаблону = CRM_Взаимодействия.CRM_ОбработатьТекстHTML(Шаблон, ЭтотОбъект.УникальныйИдентификатор);
	
	ЗаполнитьАвтотекст(ТекстПисьмаПоШаблону);
	
	
	Возврат ТекстПисьмаПоШаблону;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПодписьПользователя(УчетнаяЗапись, Пользователь, ПодписьПересылаемогоПисьма = Ложь)
	
	НаборРегистра = РегистрыСведений.CRM_ПодписиУчетныхЗаписей.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Пользователь.Установить(Пользователь);
	НаборРегистра.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	НаборРегистра.Прочитать();
	
	Если НаборРегистра.Количество() > 0 Тогда
	
		Если ПодписьПересылаемогоПисьма Тогда
			Если НЕ ЗначениеЗаполнено(НаборРегистра[0].ПодписьПересылаемогоПисьма) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Подпись = НаборРегистра[0].ПодписьПересылаемогоПисьма;
		Иначе
			Если НЕ ЗначениеЗаполнено(НаборРегистра[0].ПодписьИсходящегоПисьма) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Подпись = НаборРегистра[0].ПодписьИсходящегоПисьма;
		КонецЕсли;
		СтруктураВложений					= Новый Структура;
		ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Подпись, Подпись.Текст, СтруктураВложений);
	Иначе
		ТекстHTML = "";
		СтруктураВложений = Новый Структура;
	КонецЕсли;
	
	ТекстПодписиФорматированныйДокумент	= Новый ФорматированныйДокумент;
	ТекстПодписиФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
	
	Возврат ТекстПодписиФорматированныйДокумент;
	
КонецФункции

// Обрабатывает переданные параметры при создании письма.
&НаСервере
Процедура ОбработатьПереданныеПараметры(Параметры)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		// Отправка прайса или печатной формы по почте тема.
		Если Параметры.Свойство("Тема") Тогда
			Объект.Тема = Параметры.Тема;
		КонецЕсли;
		
		Если Параметры.Свойство("СозданИзЭтапаСделки") Тогда
			_СозданИзЭтапаСделки = Параметры.СозданИзЭтапаСделки;
		Иначе
			_СозданИзЭтапаСделки = Ложь;
		КонецЕсли;
		
		Если Параметры.Свойство("УчетнаяЗапись") И ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
			Объект.УчетнаяЗапись = Параметры.УчетнаяЗапись;
		КонецЕсли;
		
		 // Заполним получателей, если список передан.
		Если Параметры.Свойство("СписокАдресов") Тогда
			Для Каждого АдресПолучателя Из Параметры.СписокАдресов Цикл
				МассивСтрок	= Объект.ПолучателиПисьма.НайтиСтроки(Новый Структура("Адрес", АдресПолучателя.Представление));
				Если МассивСтрок.Количество() = 0 Тогда
					ПолучателиНоваяСтрока = Объект.ПолучателиПисьма.Добавить();
					ПолучателиНоваяСтрока.Адрес = АдресПолучателя.Представление;
					Контакт = ?(ТипЗнч(АдресПолучателя.Значение) = Тип("Структура"), АдресПолучателя.Значение.Контакт, АдресПолучателя.Значение);
					ПолучателиНоваяСтрока.Представление = Строка(Контакт);
					ПолучателиНоваяСтрока.Контакт = Контакт;
				КонецЕсли;	
			КонецЦикла;
			Объект.СписокПолучателейПисьма = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма, Ложь);
		КонецЕсли;
		
		Если Параметры.Свойство("Взаимодействие") Тогда
			Взаимодействие	= Параметры.Взаимодействие;
		КонецЕсли;
		
		Если Параметры.Свойство("Кому") И (НЕ Параметры.Кому = Неопределено)Тогда
			
			Если (Параметры.Свойство("ОтправкаПечатнойФормы") И Параметры.ОтправкаПечатнойФормы)
				ИЛИ (Параметры.Свойство("ТолькоКому") И Параметры.ТолькоКому) Тогда
				Объект.ПолучателиПисьма.Очистить();
			КонецЕсли;
			
			Если ТипЗнч(Параметры.Кому) = Тип("Строка") И (Параметры.Основание = Неопределено) Тогда
				МассивСтрок	= Объект.ПолучателиПисьма.НайтиСтроки(Новый Структура("Адрес", Параметры.Кому));
				Если МассивСтрок.Количество() = 0 Тогда
					ПолучателиНоваяСтрока			= Объект.ПолучателиПисьма.Добавить();
					ПолучателиНоваяСтрока.Адрес		= Параметры.Кому;				
					Объект.СписокПолучателейПисьма	= CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма, Ложь);
				КонецЕсли;	
			ИначеЕсли НЕ (ТипЗнч(Параметры.Кому) = Тип("Строка")) Тогда
				Для Каждого ЭлементМассива Из Параметры.Кому Цикл
					Если ТипЗнч(Параметры.Кому) = Тип("СписокЗначений") Тогда
						МассивСтрок	= Объект.ПолучателиПисьма.НайтиСтроки(Новый Структура("Адрес", ЭлементМассива.Представление));
						Если МассивСтрок.Количество() = 0 Тогда
							ПолучателиНоваяСтрока = Объект.ПолучателиПисьма.Добавить();
							ПолучателиНоваяСтрока.Адрес = ЭлементМассива.Представление;
							ПолучателиНоваяСтрока.Представление = Строка(ЭлементМассива.Значение);
							ПолучателиНоваяСтрока.Контакт = ЭлементМассива.Значение;
						КонецЕсли;	
					ИначеЕсли ТипЗнч(Параметры.Кому) = Тип("Массив") Тогда
						МассивСтрок	= Объект.ПолучателиПисьма.НайтиСтроки(Новый Структура("Адрес", ЭлементМассива.Адрес));
						Если МассивСтрок.Количество() = 0 Тогда
							ПолучателиНоваяСтрока = Объект.ПолучателиПисьма.Добавить();
							ПолучателиНоваяСтрока.Адрес			= ЭлементМассива.Адрес;
							ПолучателиНоваяСтрока.Представление	= ЭлементМассива.Представление;
							ПолучателиНоваяСтрока.Контакт		= ЭлементМассива.ИсточникКонтактнойИнформации;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Объект.СписокПолучателейПисьма = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		// Заполним список вложений, если он передан  (отправка прайса или печатной формы по почте).
		Если Параметры.Свойство("Вложения") И Параметры.Вложения <> Неопределено Тогда
			
			ЭтоВебКлиент = ?(Параметры.Свойство("ЭтоВебКлиент"), Параметры.ЭтоВебКлиент, Ложь);
			
			Для Каждого ЭлементСпискаФайлов Из Параметры.Вложения Цикл
				
				// Если отправляем присоединенный к одному из объектов файл по почте , то
				// ЭлементСпискаФайлов - это структура, в противном случае это список значений				
				
				Если ТипЗнч(ЭлементСпискаФайлов) = Тип("Структура") Тогда
					ПредставлениеЭлемента	= ЭлементСпискаФайлов.Представление;
					ЗначениеЭлемента		= ЭлементСпискаФайлов.АдресВоВременномХранилище;
				Иначе
					ПредставлениеЭлемента	= ЭлементСпискаФайлов.Представление;
					ЗначениеЭлемента		= ЭлементСпискаФайлов.Значение;
				КонецЕсли;					
				
				новСтр = Вложения.Добавить();
				
				новСтр.Расположение	  = 4;
				новСтр.ИмяФайла 	  = ПредставлениеЭлемента;
				Расширение = ВзаимодействияКлиентСервер.РасширениеФайла(новСтр.ИмяФайла);
				новСтр.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
								
				Если ЭтоВебКлиент Тогда
					новСтр.ИмяФайлаНаКомпьютере = ЗначениеЭлемента;
				ИначеЕсли ЭтоАдресВременногоХранилища(ЗначениеЭлемента) Тогда
					новСтр.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(ЗначениеЭлемента), УникальныйИдентификатор);
					новСтр.ИмяФайла = ПредставлениеЭлемента;
					НовСтр.Размер = ПолучитьИзВременногоХранилища(новСтр.ИмяФайлаНаКомпьютере).Размер();
					РазмерВложения = Цел(новСтр.Размер/1024);
					новСтр.РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= "#";
					новСтр.ИДФайлаЭлектронногоПисьма			= "#";
				Иначе
					ДанныеФайла = Новый ДвоичныеДанные(ЗначениеЭлемента);
					новСтр.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(ДанныеФайла, "");
					новСтр.ИмяФайла = ПредставлениеЭлемента;
					новСтр.Размер = ДанныеФайла.Размер();
					РазмерВложения		  = Цел(новСтр.Размер/1024);
					новСтр.РазмерСтрокой  = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= "#";
					новСтр.ИДФайлаЭлектронногоПисьма			= "#";					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет) И (ТипЗнч(Предмет) = Тип("ДокументСсылка.УдалитьCRM_Событие")) Тогда
			
			МассивФайлов = РаботаСФайламиСлужебныйВызовСервера.ПолучитьВсеПодчиненныеФайлы(Предмет);
			
			Если МассивФайлов.Количество() > 0 Тогда
				СписокФайловСобытия.ЗагрузитьЗначения(МассивФайлов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ВсегдаПоказыватьВложения") Тогда
		Если НЕ (ВсегдаПоказыватьВложения = Параметры.ВсегдаПоказыватьВложения) Тогда
			ВсегдаПоказыватьВложения = Параметры.ВсегдаПоказыватьВложения;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения(Параметры = Неопределено)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Параметры.ЗначениеКопирования, Истина);
			
			Для Каждого Стр Из табВложения Цикл
				Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
					новСтр = Вложения.Добавить();
					новСтр.Ссылка								= Стр.Ссылка;
					новСтр.ИмяФайла								= Стр.ИмяФайла;
					новСтр.ИндексКартинки						= Стр.ИндексКартинки;
					новСтр.Размер								= Стр.Размер;
					РазмерВложения								= Цел(новСтр.Размер/1024);
					новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.РазмерПредставление					= Стр.РазмерПредставление;
					новСтр.ПодписанЭП							= Стр.ПодписанЭП;
					новСтр.Расположение							= 1;
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
					новСтр.ИДФайлаЭлектронногоПисьма			= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Параметры.Свойство("Основание") 
			И ТипЗнч(Параметры.Основание) = Тип("Структура") 
			И (ТипЗнч(Параметры.Основание.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
			   ИЛИ ТипЗнч(Параметры.Основание.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"))
			И Параметры.Основание.Свойство("Команда") 
			И (Параметры.Основание.Команда = "Переслать") > 0 Тогда
			
			// Заполнение вложений по пересылаемому письму.
			табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Параметры.Основание.Основание, Истина);
			
			Для Каждого Стр Из табВложения Цикл
				Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
					новСтр = Вложения.Добавить();
					новСтр.Ссылка								= Стр.Ссылка;
					новСтр.ИмяФайла								= Стр.ИмяФайла;
					новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
					новСтр.Размер								= Стр.Размер;
					РазмерВложения								= Цел(новСтр.Размер/1024);
					новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.РазмерПредставление					= Стр.РазмерПредставление;
					новСтр.Расположение							= 1;
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= "#";
					новСтр.ИДФайлаЭлектронногоПисьма			= "#";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		Вложения.Очистить();
		
		ЭтоПисьмоРассылки = (ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем"));
		
		Если ЭтоПисьмоРассылки И НЕ Объект.CRM_РазрешеноРедактирование Тогда
			табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Предмет, Истина);
		Иначе
			табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка, Истина);
		КонецЕсли;
		
		Для Каждого Стр Из табВложения Цикл
			
			//Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
				АдресВоВремХранилище = "";
				Если ЭтоПисьмоРассылки И НЕ Объект.CRM_РазрешеноРедактирование Тогда
					ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Стр.Ссылка);
					АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, "");
					Если ДвоичныеДанные = Неопределено Тогда Продолжить; КонецЕсли;
				КонецЕсли;
				
				новСтр = Вложения.Добавить();
				новСтр.Ссылка								= Стр.Ссылка;
				новСтр.ИмяФайла								= Стр.ИмяФайла;
				новСтр.ИмяФайлаНаКомпьютере					= АдресВоВремХранилище;
				новСтр.ИндексКартинки						= Стр.ИндексКартинки;
				новСтр.Размер								= Стр.Размер;
				РазмерВложения								= Цел(новСтр.Размер/1024);
				новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
				новСтр.РазмерПредставление					= Стр.РазмерПредставление;
				новСтр.ПодписанЭП							= Стр.ПодписанЭП;
				новСтр.Расположение							= 0;
				новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
				новСтр.ИДФайлаЭлектронногоПисьма			= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Определяет способ редактирования письма и
// отображает текст письма согласно способу редактирования.
&НаСервере
Процедура ОпределитьСпособРедактированияПисьма()

	Если Объект.ТипТекста.Пустая() Тогда
		
		// + CRM
		//ФорматСообщения = Взаимодействия.ФорматСообщенияПоУмолчанию(Пользователи.ТекущийПользователь());
		ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		// - CRM
		
		// Если тип текста не был заполнен, то может оказаться, что формат выбран некорректно, поэтому:
		// 1) Если текст заполнен, но не заполнен HTML - то формат сообщения исправляем на "текст".
		// 2) Если HTML заполнен, но не заполнен текст - то формат сообщения исправляем на "HTML".
		Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст 
			И СокрЛП(Объект.Текст) = "" И СокрЛП(Объект.ТекстHTML) <> "" Тогда
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		ИначеЕсли ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML
			И СокрЛП(Объект.Текст) <> "" И СокрЛП(Объект.ТекстHTML) = "" Тогда
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
		КонецЕсли;
		
	Иначе
		Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
		Иначе
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		//Если Не ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML") 
		//	И ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		//	ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
		//КонецЕсли;
		
		ПараметрыРаботыПользователяПользователя =
			Взаимодействия.ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(
			Объект.УчетнаяЗапись,
			ФорматСообщения,
			?(Объект.ВзаимодействиеОснование = Неопределено, Истина, Ложь));
		
		Объект.УведомитьОДоставке            = ПараметрыРаботыПользователяПользователя.УведомитьОДоставке;
		Объект.УведомитьОПрочтении           = ПараметрыРаботыПользователяПользователя.УведомитьОПрочтении;
		Объект.ВключатьТелоИсходногоПисьма   = ПараметрыРаботыПользователяПользователя.ВключатьТелоИсходногоПисьма;
		Объект.ОтображатьТелоИсходногоПисьма = ПараметрыРаботыПользователяПользователя.ОтображатьТелоИсходногоПисьма;
		
		Если Лев(НРег(Объект.Тема),3) <> "re:" И Лев(НРег(Объект.Тема),3) <> "fw:" Тогда
			ПодписьПользователя = ПолучитьПодписьПользователя(Объект.УчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь);
		Иначе
			ПодписьПользователя = ПолучитьПодписьПользователя(Объект.УчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаФорматированныйДокумент;
		Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
		Если Не Объект.Ссылка.Пустая() Тогда
			СтруктураВложений = Новый Структура;
			Если ЭтоПисьмоРассылки И НЕ Объект.CRM_РазрешеноРедактирование Тогда
				Объект.ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
					Предмет, Объект.ТекстHTML,СтруктураВложений);
			Иначе
				Объект.ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
					Объект.Ссылка, Объект.ТекстHTML,СтруктураВложений);
			КонецЕсли;
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Объект.ТекстHTML, СтруктураВложений);
		ИначеЕсли ПодписьПользователя <> Неопределено Тогда
			
			Если НЕ Объект.ТекстHTML = "" Тогда
				СтруктураВложений = Новый Структура;
				Объект.ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
					Объект.Ссылка, Объект.ТекстHTML,СтруктураВложений);
				ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Объект.ТекстHTML, СтруктураВложений);
			КонецЕсли;
			
			ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ТекстПисьмаФорматированныйДокумент, ПодписьПользователя);
		КонецЕсли;
	Иначе
		
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаОбычныйТекст;
		Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
		Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
		ТекстПисьма = Объект.Текст;
		Если Объект.Ссылка.Пустая() И ПараметрыРаботыПользователяПользователя.Подпись <> Неопределено Тогда
			
			ТекстПисьма = ТекстПисьма + ПараметрыРаботыПользователяПользователя.Подпись;
			
		КонецЕсли;
		Объект.Кодировка = "UTF-8";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьДоступностьЭлементовВЗависимостиОтСтатусаПисьма()

	Если Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено Тогда
		
		CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(Элементы.ОтправительПредставление.СписокВыбора,ДоступныеДляОтправкиУчетныеЗаписи);
		
		Если Объект.Ссылка.Пустая() И ДоступныеДляОтправкиУчетныеЗаписи.Количество() > 0 Тогда
			Если Параметры.Свойство("УчетнаяЗапись") 
			   И ТипЗнч(Параметры.УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты")
			   И Параметры.УчетнаяЗапись.ИспользоватьДляОтправки Тогда
			   
			   Объект.УчетнаяЗапись = Параметры.УчетнаяЗапись;
			   
				ЭлементСписка = Элементы.ОтправительПредставление.СписокВыбора.НайтиПоЗначению(Объект.УчетнаяЗапись);
				Если ЭлементСписка <> Неопределено Тогда
					СтандартнаяОбработка = Ложь;
					Объект.ОтправительПредставление = ЭлементСписка.Представление;
				КонецЕсли;
			
			ИначеЕсли (ТипЗнч(Объект.ВзаимодействиеОснование) <> Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
					И ТипЗнч(Объект.ВзаимодействиеОснование) <> Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) 
					Или Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
				ИмяПользователяИБ = Неопределено;
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийПользователь.ИдентификаторПользователяИБ);
				Если ПользовательИБ <> Неопределено Тогда
					ИмяПользователяИБ = ПользовательИБ.Имя;
				КонецЕсли;
				Объект.УчетнаяЗапись = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись", "ОсновнаяУчетнаяЗапись",, ИмяПользователяИБ);
				Если Объект.УчетнаяЗапись.ПометкаУдаления Тогда
					Объект.УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
				КонецЕсли;	
				Если Объект.УчетнаяЗапись.Пустая() Тогда
					Объект.УчетнаяЗапись = ДоступныеДляОтправкиУчетныеЗаписи[0].УчетнаяЗапись;
				КонецЕсли;
				
				ЭлементСписка = Элементы.ОтправительПредставление.СписокВыбора.НайтиПоЗначению(Объект.УчетнаяЗапись);
				Если ЭлементСписка <> Неопределено Тогда
					СтандартнаяОбработка = Ложь;
					Объект.ОтправительПредставление = ЭлементСписка.Представление;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Элементы.ОтправительПредставление.СписокВыбора.Количество() = 0 И НЕ ТолькоПросмотр Тогда
			флОтказ = Истина;
		Иначе
			флОтказ = Ложь;
		КонецЕсли;
		
		// Если это письмо на основе рассылки, то установим доступность текста и вложений
		// в зависимости от того разрешено редактирование или нет.
		Если ЭтоПисьмоРассылки Тогда
			ПриИзмененииРежимаРедактирования();
		Иначе
			УстановитьСвойстваКнопкиРазрешитьРедактирование();
		КонецЕсли;
	Иначе
		Элементы.Отправить.Доступность								= (Объект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее);
		Элементы.ОтправительПредставление.ТолькоПросмотр			= Истина;
		Элементы.СписокПолучателейПисьма.РедактированиеТекста		= Ложь;
		Элементы.СписокПолучателейПисьма.КнопкаВыбора				= Ложь;
		Элементы.СписокПолучателейПисьма.КнопкаОткрытия				= Истина;
		Элементы.СписокПолучателейКопий.РедактированиеТекста		= Ложь;
		Элементы.СписокПолучателейКопий.КнопкаВыбора				= Ложь;
		Элементы.СписокПолучателейКопий.КнопкаОткрытия				= Истина;
		Элементы.СписокПолучателейСкрытыхКопий.РедактированиеТекста = Ложь;
		Элементы.СписокПолучателейСкрытыхКопий.КнопкаВыбора			= Ложь;
		Элементы.СписокПолучателейСкрытыхКопий.КнопкаОткрытия		= Истина;
		
		//Элементы.ДобавитьВложение.Доступность						= Ложь;
		Элементы.КоманднаяПанельВложенияДобавить.Доступность		= Ложь;
		Элементы.КонтекстноеМенюВложенияДобавить.Доступность		= Ложь;
		Элементы.КоманднаяПанельВложенияУдалить.Доступность			= Ложь;
		Элементы.КонтекстноеМенюВложенияУдалить.Доступность			= Ложь;
		Элементы.КоманднаяПанельВложенияУдалитьВсе.Доступность		= Ложь;
		Элементы.КонтекстноеМенюВложенияУдалитьВсе.Доступность		= Ложь;
		
		Элементы.Кодировка.ТолькоПросмотр							= Истина;
		Элементы.КнопкаУведомитьОДоставке.Доступность				= Ложь;
		Элементы.КнопкаУведомитьОПрочтении.Доступность				= Ложь;
		Элементы.ВыбратьШаблонАвтотекста.Доступность		    	= Ложь;
		Элементы.ГруппаШаблона.ТолькоПросмотр						= Истина;
		Элементы.ГруппаКоманднаяПанель.ТолькоПросмотр				= Истина;
		Элементы.ГруппаВложения.ТолькоПросмотр						= Истина;
	КонецЕсли;
	
	Элементы.ПереключательИзHTMLФайла.ТолькоПросмотр					= (Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик);
	Элементы.ИмяФайлаШаблона.ТолькоПросмотр					= (Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик);
	
	Если Объект.CRM_ИзHTMLФайла ИЛИ Объект.СтатусПисьма <> Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик Тогда
		
		Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
			
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
			
			ТекстПисьма = Объект.ТекстHTML;
			
			ЭтоПисьмоРассылки = (ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем"));
			
			ТекстПисьма = CRM_Взаимодействия.CRM_ОбработатьТекстHTML(Объект.Ссылка, УникальныйИдентификатор,ЭтоПисьмоРассылки);
			Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеHTMLДокумента;
			Элементы.ТекстПисьма.ТолькоПросмотр = Ложь;
		Иначе
			ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
			ТекстПисьма = Объект.Текст;
			Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
			Элементы.ТекстПисьма.ТолькоПросмотр = Истина;
		КонецЕсли;
		
	Иначе
		
		ОпределитьСпособРедактированияПисьма();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Предмет = Взаимодействия.ПолучитьЗначениеПредмета(Объект.Ссылка);
	КонецЕсли;
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Взаимодействия.УстановитьЗаголовокФормыЭлектронногоПисьма(ЭтотОбъект);
	УстановитьЗаголовокКнопкиПоУмолчанию();
	ОбработатьПереданныеПараметры(Параметры);
	ЗаполнитьВложения(Параметры);
	
	ЗаполнитьТаблицыПолучателей();
	
	Для Каждого ПолучательПисьма Из Объект.ПолучателиПисьма Цикл
		Если ЗначениеЗаполнено(ПолучательПисьма.Контакт) Тогда
			СоответствияАдресовИКонтактов.Добавить(ПолучательПисьма.Контакт, ПолучательПисьма.Адрес);
		КонецЕсли;
	КонецЦикла;
	
	ОпределитьВидимостьДоступностьЭлементовВЗависимостиОтСтатусаПисьма();
	ОтобразитьПисьмоОснование();
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Взаимодействия.УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(ЭтотОбъект);
		ТекущийСтатусПисьма = Объект.СтатусПисьма;
	КонецЕсли;
	
	СтруктураСтатуса = CRM_ИнтеграцияСUniSenderСервер.ПолучитьСтатусПисьма(Объект.Ссылка);
	Если ЗначениеЗаполнено(СтруктураСтатуса.Статус) Тогда
		СтатусПисьмаEmailРассылки = СтруктураСтатуса.Статус;
		Элементы.СтатусПисьмаEmailРассылки.Подсказка = СтруктураСтатуса.РасшифровкаСтатуса;
		Элементы.ГруппаСтатусСервиса.Видимость = ЗначениеЗаполнено(СтатусПисьмаEmailРассылки);
		Элементы.СтатусПисьма.Видимость = НЕ Элементы.ГруппаСтатусСервиса.Видимость;
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

&НаКлиенте
Процедура ВставитьВнешнююСсылкуНаОбъектИнформационнойБазы(Команда)
	
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.ФормированиеВнешнейСсылкиНаОбъект",,ЭтотОбъект);
	
КонецПроцедуры

#Область ПривязкаДокументовКИнтересамКлиентов

&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, , ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	СтруктураОтбора.Вставить("Партнер", ЭтотОбъект.Клиент);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);	
	
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтересОбработкаВыбора(ВыбранноеЗначение, Результат) Экспорт
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда Возврат; КонецЕсли;
	ЗаменитьОсновное = (ТекущийЭлемент.Имя = "CRM_ИнтересСтрокой");
	CRM_ЗаменитьИнтересНаСервере(ВыбранноеЗначение, ЗаменитьОсновное, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка		= Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда Возврат; КонецЕсли;	
	ЗаменитьОсновное = (ТекущийЭлемент.Имя = "CRM_ИнтересСтрокой");
	CRM_ЗаменитьИнтересНаСервере(ВыбранноеЗначение, ЗаменитьОсновное, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 И ЭтотОбъект.CRM_ТаблицаИнтересов[0].ВведенНаОсновании Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Удалить(0);
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияКлиент.Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка, ЭтотОбъект.CRM_ТаблицаИнтересов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(,Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало = Ложь)
	
	МассивСтрок = ЭтотОбъект.CRM_ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",ВыбранноеЗначение));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Если ВНачало Тогда
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
		Иначе
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	ИначеЕсли ВНачало Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Сдвинуть(ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]),-ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкрытьПоказатьИнтересы(Команда)
	
	Элементы.СкрытьПоказатьИнтересы.Пометка = НЕ Элементы.СкрытьПоказатьИнтересы.Пометка;
	Элементы.ГруппаCRM_ТаблицаИнтересов.Видимость = Элементы.СкрытьПоказатьИнтересы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		Отказ = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.ВведенНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПослеУдаления(Элемент)
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Основной(Команда)
	
	ТекущиеДанные = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ДобавитьИнтересНаСервере(ТекущиеДанные.Ссылка, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ЗаменитьИнтересНаСервере(ВыбранноеЗначение,ЗаменитьОсновное = Истина, ВНачало = Ложь)
	Если ЗаменитьОсновное И (ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0) Тогда
		СтрокаДляУдаления = ЭтотОбъект.CRM_ТаблицаИнтересов[0];
		ЭтотОбъект.CRM_ТаблицаИнтересов.Удалить(СтрокаДляУдаления);
		НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	Иначе
		CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало)
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// +ПанельБП

&НаСервереБезКонтекста
Функция ПроверитьДубликатБизнесПроцесса(Предмет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|ГДЕ
	|	НЕ CRM_БизнесПроцесс.ПометкаУдаления
	|	И НЕ CRM_БизнесПроцесс.Завершен
	|	И CRM_БизнесПроцесс.Предмет = &Предмет");
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцесс(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Начать "+ВернутьЗаголовокКоманды(Команда.Имя)+""" возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессПродолжение", ЭтотОбъект, Команда.Имя);	
		ПоказатьВопрос(, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		Подключаемый_КомандаНачатьБизнесПроцессПродолжение(Неопределено, Команда.Имя)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессПродолжение(Ответ, КомандаИмя) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Ответ <> КодВозвратаДиалога.ОК Тогда 
			Возврат;
		КонецЕсли;	
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПроверитьДубликатБизнесПроцесса(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Уже создан бизнес-процесс.
			|Создать новый?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессЗавершение", ЭтотОбъект, КомандаИмя);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Неопределено, КомандаИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Ответ, КомандаИмя) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	СтруктураОснования = ПолучитьСтруктуруОснованияБизнесПроцесса(КомандаИмя);
	ПараметрыФормы = Новый Структура("Основание",СтруктураОснования);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьКомандуСозданияБизнесПроцесса()
	
	Если ИспользоватьБизнесПроцессы И ЗначениеЗаполнено(Объект.CRM_Проект) И ЗначениеЗаполнено(Объект.CRM_Проект.CRM_КартаМаршрута) Тогда
		CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект, Элементы.ГруппаКнопокСоздать, Объект.CRM_Проект.CRM_КартаМаршрута, Ложь);
	Иначе
		CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект,,, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПроектПриИзменении(Элемент)
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
КонецПроцедуры

// -ПанельБП

#Область ОбработчикиТегов

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Тег".
//
Процедура ТегПриИзменении(Элемент)
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Создание" элемента формы "Тег".
//
Процедура ТегСоздание(Элемент, СтандартнаяОбработка)
	CRM_ТегиКлиент.ТегСоздание(Элемент, СтандартнаяОбработка, ТекущееПодразделение);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаНавигационнойСсылки" элемента формы "Тег".
&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура Подключаемый_ОбновитьОблакоТегов()
	
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект);
	
КонецПроцедуры

// Функция возвращает позицию в Тексте символа, следующего за переданным Тегом.
// Для закрывающего тега надо передавать его вместе с символом "/". 
//
// Параметры:
//	Текст - Строка - текст HTML-документа,
//	Тег   - Строка - HTML-тег без "скобок". Например, "body".
//
// Возвращаемое значение:
//	Число - Позиция в тексте символа, следующего за закрывающей скобкой
//          переданного Тега. 
//
Функция  ПозицияПослеТега(Знач Текст, Знач Тег) Экспорт
	
	Текст = НРег(Текст);
	Тег   = НРег(Тег);
	ПозицияСимвола = 0;
	КонецТега = Найти(Текст, "<" + Тег) + СтрДлина(Тег)+1;
	Если КонецТега > 0 Тогда
		ПозицияСимвола = Найти(Сред(Текст,КонецТега),">") + КонецТега;
	КонецЕсли;
	
	Возврат ПозицияСимвола;

КонецФункции

#КонецОбласти


&НаКлиенте
Процедура ТекстПисьмаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	CRM_ОбщегоНазначенияКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Объект.Ссылка, Элемент.Документ);
	
КонецПроцедуры

// -CRM

#Область РаботаСHTMLФайлом

// Открывает диалог выбора файла.
//
// Параметры:
//  Элемент                - Элемент управления, для которого выбираем файл.
//  ПроверятьСуществование - Если Истина, то выбор отменяется если файл не существует.
// 
&НаКлиенте
Процедура ВыборФайла(Элемент, ИмяСвойства, ПроверятьСуществование, Знач РасширениеПоУмолчанию = "html")
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
	ДиалогВыбораФайла.Фильтр = "HTML файл (*.html)|*.html";
	ДиалогВыбораФайла.Расширение = "html";
	
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла = Элемент.ТекстРедактирования;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = ПроверятьСуществование;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ИмяСвойства		= ДиалогВыбораФайла.ПолноеИмяФайла;
		КаталогФайла	= ДиалогВыбораФайла.Каталог;
		
		ИмяФайлаШаблонаПриИзменении(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьHTML(ВременныйТекстHTML, ПутьККаталогу)
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ВременныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		ПутьККартинке = СтрЗаменить(АтрибутИсточникКартинки.Значение,"/","\");
		ПолныйПутьККартинке = ПутьККаталогу + ПутьККартинке;
		
		ВременныйТекстHTML = СтрЗаменить(ВременныйТекстHTML,АтрибутИсточникКартинки.Значение,ПолныйПутьККартинке);
	КонецЦикла;
	
	ЗаполнитьАвтотекст(ВременныйТекстHTML);
	
	Возврат ВременныйТекстHTML;
	
КонецФункции

&НаКлиенте
Процедура ИмяФайлаШаблонаПриИзменении(Элемент)
	
	ТекстПисьма = "";
	
	УдалитьВременныеФайлы();
	
	Файл = Новый Файл(ИмяФайлаШаблона);
	ПутьККаталогу	= Файл.Путь;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайлаШаблона);
	ВременныйТекстHTML		= ТекстовыйДокумент.ПолучитьТекст();
	
	ТекстПисьма = ВернутьHTML(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ВременныйТекстHTML," "), ПутьККаталогу);
	
	Объект.CRM_ИзHTMLФайла = Истина;
	Шаблон = ПредопределенноеЗначение("Справочник.CRM_ШаблоныРассылки.ПустаяСсылка");
	Модифицированность = Истина;
	ИзмененШаблонHTML = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаШаблонаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, ИмяФайлаШаблона, Истина);
	
КонецПроцедуры

// Открывает файл обмена во внешнем приложении.
//
// Параметры:
//  
// 
&НаКлиенте
Процедура ОткрытьВПриложении(ИмяФайла, СтандартнаяОбработка = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ОткрытьКаталогСФайлом", ЭтотОбъект, ДополнительныеПараметры));
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(Новый ОписаниеОповещения("ПроверитьСуществованиеФайла", ЭтотОбъект, ДополнительныеПараметры), ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаШаблонаОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Функция РасширениеФайла(Знач ИмяФайла)
	
	ПозицияТочки = ПоследнийРазделитель(ИмяФайла);
	
	Расширение = Прав(ИмяФайла,СтрДлина(ИмяФайла) - ПозицияТочки + 1);
	
	Возврат Расширение;
	
КонецФункции

&НаСервере
Функция ПоследнийРазделитель(СтрокаСРазделителем, Разделитель = ".")
	
	ДлинаСтроки = СтрДлина(СтрокаСРазделителем);
	
	Пока ДлинаСтроки > 0 Цикл
		
		Если Сред(СтрокаСРазделителем, ДлинаСтроки, 1) = Разделитель Тогда
			
			Возврат ДлинаСтроки; 
			
		КонецЕсли;
		
		ДлинаСтроки = ДлинаСтроки - 1;
		
	КонецЦикла;

КонецФункции

&НаСервере
Процедура УдалитьВременныеФайлы()
	
	Для Каждого СтрокаВременногоФайла Из СоответствиеФайлов Цикл
		Файл = Новый Файл(СтрокаВременногоФайла.ИмяНаСервере);
		Если Файл.Существует() Тогда
			Попытка
				УдалитьФайлы(СтрокаВременногоФайла.ИмяНаСервере);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеФайлов.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ИмяФайлаНаСервереИлиКлиенте(ИмяРеквизита ,Знач АдресФайла, Знач ИмяФайлаДляРасширения = ".html",ПроверятьСуществование = Истина)
	
	ИмяФайла = Неопределено;
	
	Расширение = РасширениеФайла(ИмяФайлаДляРасширения);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	АдресНаСервере = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(АдресНаСервере);
	ИмяФайла = АдресНаСервере;
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция ПропаситьHTML()
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(СоответствиеФайлов[0].ИмяНаСервере);
	ВременныйТекстHTML		= ТекстовыйДокумент.ПолучитьТекст();
	ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ВременныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		ПутьККартинке = СтрЗаменить(АтрибутИсточникКартинки.Значение,"/","\");
		
		МассивСтрок = СоответствиеФайлов.НайтиСтроки(Новый Структура("ИмяНаКлиенте",ПутьККартинке));
		
		Если МассивСтрок.Количество() = 0 Тогда Продолжить; КонецЕсли;
		
		ВременныйТекстHTML = СтрЗаменить(ВременныйТекстHTML,АтрибутИсточникКартинки.Значение,МассивСтрок[0].ИмяНаСервере);
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ВременныйТекстHTML," ");
	
КонецФункции

&НаСервере
Процедура ПолучитьИменаФайловНаКлиенте(АдресФайлаВХранилище, ИмяФайлаДляРасширения)
	
	ИмяФайла = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаШаблона ,АдресФайлаВХранилище, ИмяФайлаДляРасширения);
	
	Если ИмяФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = СоответствиеФайлов.Добавить();
	НоваяСтрока.ИмяНаКлиенте	= ИмяФайлаШаблона;
	НоваяСтрока.ИмяНаСервере = ИмяФайла;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	ВременныйТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ВременныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		ПутьККартинке = СтрЗаменить(АтрибутИсточникКартинки.Значение,"/","\");
		
		МассивСтрок = СоответствиеФайлов.НайтиСтроки(Новый Структура("ИмяНаКлиенте",ПутьККартинке));
		
		Если МассивСтрок.Количество() > 0 Тогда Продолжить; КонецЕсли;
		
		НоваяСтрока = СоответствиеФайлов.Добавить();
		НоваяСтрока.ИмяНаКлиенте = ПутьККартинке;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВернутьИмяФайлаКартинкиНаСервере(ИмяФайлаНаКлиенте ,АдресФайлаВХранилище, ИмяФайлаДляРасширения)
	
	ИмяФайла = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаНаКлиенте ,АдресФайлаВХранилище, ИмяФайлаДляРасширения);
	
	Возврат ИмяФайла;
	
КонецФункции

&НаКлиенте
Процедура ПереключательИзHTMLФайлаПриИзменении(Элемент)
	
	Если (ПереключательИзHTMLФайла = 1) Тогда
		Если НЕ ПустаяСтрока(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст()) Тогда
			КнопкиДиалогаВопрос = Новый СписокЗначений;
			
			КнопкиДиалогаВопрос.Добавить("Да", "Да");
			КнопкиДиалогаВопрос.Добавить("Нет", "Нет");
			
			ТекстВопроса = НСтр("ru = 'Текст, введенный во встроенном редакторе, будет удален. Продолжить?'");
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ПереключательИзHTMLФайлаПриИзмененииРезультатВопроса", ЭтотОбъект), ТекстВопроса, КнопкиДиалогаВопрос,,,"Переключение варианта редактирования");
		Иначе
			Объект.CRM_ИзHTMLФайла = Булево(ПереключательИзHTMLФайла);
			
			ПриИзмененииФлагаИзHTMLФайла();
		КонецЕсли;
	Иначе
		Если НЕ ПустаяСтрока(ТекстПисьма) Тогда
			КнопкиДиалогаВопрос = Новый СписокЗначений;
			
			КнопкиДиалогаВопрос.Добавить("Да", "Да");
			КнопкиДиалогаВопрос.Добавить("Нет", "Нет");
			
			ТекстВопроса = НСтр("ru = 'Текст, полученный из HTML файла, будет удален. Продолжить?'");
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ПереключательИзHTMLФайлаПриИзмененииРезультатВопроса", ЭтотОбъект), ТекстВопроса, КнопкиДиалогаВопрос,,,"Переключение варианта редактирования");
		Иначе
			Объект.CRM_ИзHTMLФайла = Булево(ПереключательИзHTMLФайла);
			
			ПриИзмененииФлагаИзHTMLФайла();
		Конецесли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательИзHTMLФайлаПриИзмененииРезультатВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Да" Тогда
		
		Объект.CRM_ИзHTMLФайла = Булево(ПереключательИзHTMLФайла);
		
		Если ПереключательИзHTMLФайла = 1 тогда
			ТекстПисьмаФорматированныйДокумент.Удалить();
		Иначе
			ТекстПисьма = "";
		КонецЕсли;
		
		ПриИзмененииФлагаИзHTMLФайла();
	ИначеЕсли РезультатВопроса = "Нет" Тогда
		
		ПереключательИзHTMLФайла = Число(НЕ Булево(ПереключательИзHTMLФайла));
		
	КонецЕсли;
	
КонецПроцедуры// ПереключательИзHTMLФайлаПриИзмененииРезультатВопроса(РезультатВопроса, ДополнительныеПараметры)	


&НаКлиенте
Процедура ПриИзмененииФлагаИзHTMLФайла()
	
	Если Объект.CRM_ИзHTMLФайла Тогда
		
		Объект.ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML");
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаОбычныйТекст;
		Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеHTMLДокумента;
		Элементы.ТекстПисьма.ТолькоПросмотр = Ложь;
		
	Иначе
		
		Элементы.СтраницыТекстПисьма.ТекущаяСтраница = Элементы.СтраницаФорматированныйДокумент;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти
