
///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	Если Не Форма.ДоступноИзменениеМенеджераПодразделения Тогда
		Форма.Элементы.Подразделение.Видимость				= Ложь;
		Форма.Элементы.Менеджер.ТолькоПросмотр				= Истина;
		Форма.Элементы.ОбъектПланирования.ТолькоПросмотр	= Истина;
		
		Если	(Форма.Объект.ОбъектПланирования <> ПредопределенноеЗначение("Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер"))
			Или	(Форма.Объект.ОбъектПланирования = ПредопределенноеЗначение("Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер") И Не ЗначениеЗаполнено(Форма.Объект.Менеджер)) Тогда
			//
			Форма.Элементы.ВоронкаПродаж.ТолькоПросмотр = Истина;
			Форма.Элементы.Планы.ТолькоПросмотр = Истина;
		КонецЕсли;
	Иначе
		Форма.Элементы.Подразделение.Видимость	= (Форма.Объект.ОбъектПланирования = ПредопределенноеЗначение("Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Подразделение"));
		Форма.Элементы.Подразделение.АвтоОтметкаНезаполненного = (Форма.Объект.ОбъектПланирования = ПредопределенноеЗначение("Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Подразделение"));
		Форма.Элементы.Менеджер.Видимость		= (Форма.Объект.ОбъектПланирования = ПредопределенноеЗначение("Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер"));
		Форма.Элементы.Менеджер.АвтоОтметкаНезаполненного		= (Форма.Объект.ОбъектПланирования = ПредопределенноеЗначение("Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер"));
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаСервереБезКонтекста
Функция ПолучитьЭтапыВоронкиПродаж(ВоронкаПродаж)
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВоронкиПродаж.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_ВоронкиПродаж КАК ВоронкиПродаж
	|ГДЕ
	|	ВоронкиПродаж.Родитель = &ВоронкаПродаж
	|	И НЕ ВоронкиПродаж.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ВоронкиПродаж.РеквизитДопУпорядочивания,
	|	ВоронкиПродаж.Ссылка
	|");
	Запрос.УстановитьПараметр("ВоронкаПродаж", ВоронкаПродаж);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаКлиенте
Процедура ПланыЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Объект.ВоронкаПродаж) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана воронка продаж!'"),, "Объект.ВоронкаПродаж");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура("ВыборЭтапа,Воронка", Истина, Объект.ВоронкаПродаж);
	Если Элементы.Планы.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Планы.ТекущиеДанные.Этап) Тогда
		СтруктураПараметры.Вставить("ТекущаяСтрока", Элементы.Планы.ТекущиеДанные.Этап);
	КонецЕсли;
	Форма = ПолучитьФорму("Справочник.CRM_ВоронкиПродаж.ФормаВыбора", СтруктураПараметры, Элемент);
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ВоронкаПродажПриИзменении(Элемент)
	Объект.Планы.Очистить();
	Если ЗначениеЗаполнено(Объект.ВоронкаПродаж) Тогда
		ЭтапыВоронки = ПолучитьЭтапыВоронкиПродаж(Объект.ВоронкаПродаж);
		Для Каждого Этап Из ЭтапыВоронки Цикл
			НоваяСтрока = Объект.Планы.Добавить();
			НоваяСтрока.Этап = Этап;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПланированияПриИзменении(Элемент)
	Если Объект.ОбъектПланирования = ПредопределенноеЗначение("Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер") Тогда
		Объект.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	ИначеЕсли Объект.ОбъектПланирования = ПредопределенноеЗначение("Перечисление.CRM_ОбъектыПланированияВоронкиПродаж.Подразделение") Тогда
		Объект.Менеджер = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	Иначе
		Объект.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		Объект.Менеджер = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

////////////////////////////////////////////////////////////////////////////////
// Выполнение команд подключаемых отчетов и обработок.

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть форму планирования воронок. Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		
	ПланироватьПродажи = ПолучитьФункциональнуюОпцию("CRM_ПланироватьПродажи");
	Если ПланироватьПродажи <> Истина Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(CRM_КлиентыСервер.ТекстСообщенияОНевозможностиПланирования());
		Возврат;
	КонецЕсли;
	
	ДоступноИзменениеМенеджераПодразделения = Истина;
	Если НЕ Пользователи.РолиДоступны("CRM_ПланироватьПоВсемПодразделениямМенеджерам, ПолныеПрава") Тогда
		ДоступноИзменениеМенеджераПодразделения = Ложь;
	КонецЕсли;
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Элементы.ПланыСумма.Заголовок = Элементы.ПланыСумма.Заголовок + " (" + Строка(ВалютаУправленческогоУчета) + ")";
	Элементы.ПланыСуммаПотенциальная.Заголовок = Элементы.ПланыСуммаПотенциальная.Заголовок + " (" + Строка(ВалютаУправленческогоУчета) + ")";
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события ПриЧтенииНаСервере.
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура Рассчитать(Команда)
	
	ПолучитьДанныеЗаПериодРассчитать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЭтапыТекущейВоронкиИСоответствиеТочекМаршрута()
	
	ЭтапыТекущейВоронки.Очистить();
	СоответствиеТочекМаршрута.Очистить();
	
	ЕстьЭтапыПоДокументам		= Ложь;
	ЕстьЭтапыПоИнтересам		= Ложь;
	ЕстьЭтапыПоКартамМаршрута	= Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ВоронкаПродаж) Тогда Возврат; КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ссылка КАК Ссылка,
	|	ВидЭтапа
	|ИЗ
	|	Справочник.CRM_ВоронкиПродаж
	|ГДЕ
	|	Родитель = &Воронка
	|	И НЕ ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания ВОЗР, Ссылка ВОЗР
	|");
	Запрос.УстановитьПараметр("Воронка", Объект.ВоронкаПродаж);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("ТочкаМаршрута,Этап");
	
	Пока Выборка.Следующий() Цикл
		СтрокаЭтап = ЭтапыТекущейВоронки.Добавить();
		СтрокаЭтап.Этап = Выборка.Ссылка;
		
		Для Каждого СтрокаТаблицы Из Выборка.Ссылка.Состав Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.КартаМаршрута) Или Не ЗначениеЗаполнено(СтрокаТаблицы.ТочкаМаршрута) Тогда Продолжить; КонецЕсли;
			
			НоваяСтрока = СтрокаЭтап.Состав.Добавить();
			НоваяСтрока.КартаМаршрута		= СтрокаТаблицы.КартаМаршрута;
			НоваяСтрока.ТочкаМаршрута		= СтрокаТаблицы.ТочкаМаршрута;
			НоваяСтрока.ВариантСчетаНаОплату= СтрокаТаблицы.ВариантСчетаНаОплату;
			
			СтруктураПоиска.ТочкаМаршрута = НоваяСтрока.ТочкаМаршрута;
			СтруктураПоиска.Этап = СтрокаЭтап.Этап;
			НайденныеСтроки = СоответствиеТочекМаршрута.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаСоответствие = СоответствиеТочекМаршрута.Добавить();
				СтрокаСоответствие.ТочкаМаршрута = НоваяСтрока.ТочкаМаршрута;
				СтрокаСоответствие.Этап = СтрокаЭтап.Этап;
			КонецЕсли;
			
			Если Выборка.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам Тогда
				
				ЕстьЭтапыПоДокументам = Истина;
				
			КонецЕсли;
			
			Если Выборка.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов Тогда
				
				ЕстьЭтапыПоИнтересам = Истина;
				
			КонецЕсли;
			
			Если Выборка.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоЭтапам Тогда
				
				ЕстьЭтапыПоКартамМаршрута = Истина;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеЗаПериодРассчитать()
	
	ЭтапСобытия				= Неопределено;
	ТочкаМаршрутаСобытия	= Неопределено;
	
	ЗаполнитьТаблицуЭтапыТекущейВоронкиИСоответствиеТочекМаршрута();
	бЕстьСобытие = Ложь;
	
	// Создание и настройка схемы компоновки данных.
	СКДДанные = Новый СхемаКомпоновкиДанных();
	
	ИсточникДанных = СКДДанные.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанныхЗадачи";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКДДанные.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанныхСобытия";
	НаборДанных.ИсточникДанных = "ИсточникДанныхЗадачи";
	
	ОтборПодразделение = Объект.Подразделение;
	ОтборОтветственные = Объект.Менеджер;
	
	НаборДанных.Запрос = CRM_ВоронкиПродажСервер.ВоронкаПродажПолучитьТекстЗапроса(ЭтотОбъект);
	
	НастройкиСКД = СКДДанные.НастройкиПоУмолчанию;
	
	ДетальнаяГруппировка = НастройкиСКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = НастройкиСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДДанные));
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		// Пропускаем системные поля
		Если Лев(Строка(ПолеВыбора.Поле), 13) = "СистемныеПоля" Или Лев(Строка(ПолеВыбора.Поле), 12) = "SystemFields" Тогда Продолжить; КонецЕсли;
		Если Лев(Строка(ПолеВыбора.Поле), 15) = "ПараметрыДанных" Или Лев(Строка(ПолеВыбора.Поле), 14) = "DataParameters" Тогда Продолжить; КонецЕсли;
		
		ВыбранныеПоляДетальнаяГруппировка = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных(ПолеВыбора.Поле);
	КонецЦикла;
	
	КартыИТочкиМаршрутаВоронки = ПолучитьВсеКартыИТочкиМаршрутаВоронки();
	
	ДатаНачалаПериода		= ?(ЗначениеЗаполнено(ПериодАнализа.ДатаНачала), ПериодАнализа.ДатаНачала, '00010101');
	ДатаОкончанияПериода	= ?(ЗначениеЗаполнено(ПериодАнализа.ДатаОкончания), ПериодАнализа.ДатаОкончания, ТекущаяДатаСеанса());
	ГоризонтВоронки			= ДатаОкончанияПериода;
	ГоризонтВоронкиПрогноз	= ГоризонтВоронки;
	ДатаКонецПериода		= ?(ЗначениеЗаполнено(ПериодАнализа.ДатаОкончания), ПериодАнализа.ДатаОкончания, ТекущаяДатаСеанса());
	
	// Установка обязательных параметров запроса.
	НастройкиСКД.ПараметрыДанных.Элементы.Очистить();
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Воронка");
	Параметр.Значение = Объект.ВоронкаПродаж;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("НачалоПериода");
	Параметр.Значение = ДатаНачалаПериода;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("КонецПериода");
	Параметр.Значение = ДатаКонецПериода;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ГоризонтВоронки");
	Параметр.Значение = ГоризонтВоронки;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ГоризонтВоронкиПрогноз");
	Параметр.Значение = ГоризонтВоронкиПрогноз;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("КартыМаршрута");
	Параметр.Значение = КартыИТочкиМаршрутаВоронки.Карты;
	Параметр.Использование = Истина;
	
	Для Каждого ЭтапВоронки ИЗ ЭтапыТекущейВоронки Цикл
		Если ЭтапВоронки.Этап.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам
		ИЛИ ЭтапВоронки.Этап.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов Тогда
			
			ИмяПараметраЭтапа = "_"+СтрЗаменить(ЭтапВоронки.Этап.УникальныйИдентификатор(),"-","_");
			
			Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
			Параметр.Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметраЭтапа);
			Параметр.Значение = ЭтапВоронки.Этап;
			Параметр.Использование = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	ОтборПодразделение = Объект.Подразделение;
	ОтборОтветственные = Объект.Менеджер;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ОтборПодразделение");
	Параметр.Значение = ОтборПодразделение;
	Параметр.Использование = Истина;
	
	Параметр = НастройкиСКД.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ОтборОтветственные");
	Параметр.Значение = ОтборОтветственные;
	Параметр.Использование = Истина;
	
	// Отбор
	НастройкиСКД.Отбор.Элементы.Очистить();
	
	Если Объект.ОбъектПланирования = Перечисления.CRM_ОбъектыПланированияВоронкиПродаж.Подразделение Тогда
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "Подразделение", ВидСравненияКомпоновкиДанных.Равно, Объект.Подразделение, Истина);
	КонецЕсли;
	
	Если Объект.ОбъектПланирования = Перечисления.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер Тогда
		УстановитьЗначениеВОтборе(НастройкиСКД.Отбор, "Пользователь", ВидСравненияКомпоновкиДанных.Равно, Объект.Менеджер, Истина);
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКДДанные, НастройкиСКД,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ДанныеТекущие = Новый ТаблицаЗначений();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеТекущие);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
	ОписаниеТиповЭтап			= Новый ОписаниеТипов("СправочникСсылка.CRM_ВоронкиПродаж, Строка");
	ОписаниеТиповЧислоЦелое		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
	ОписаниеТиповГруппировка	= Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.СтруктураПредприятия, Неопределено");
	ОписаниеТиповСумма			= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ОписаниеТиповСтрока			= Новый ОписаниеТипов("Строка");
	ОписаниеТиповПоказателя = ОписаниеТиповЧислоЦелое;
	
	ТаблицаТочки = Новый ТаблицаЗначений();
	ТаблицаТочки.Колонки.Добавить("Текст",		ОписаниеТиповСтрока);
	ТаблицаТочки.Колонки.Добавить("Подсказка",	ОписаниеТиповСтрока);
	ТаблицаТочки.Колонки.Добавить("Значение",	ОписаниеТиповЭтап);
	ТаблицаТочки.Колонки.Добавить("Точка",		ОписаниеТиповЧислоЦелое);
	ТаблицаТочки.Колонки.Добавить("Серия",		ОписаниеТиповСтрока);
	ТаблицаТочки.Колонки.Добавить("ЭтоПлан",	Новый ОписаниеТипов("Булево"));
	
	ТаблицаСерии = Новый ТаблицаЗначений();
	
	ТаблицаСерии.Колонки.Добавить("Точка",					ОписаниеТиповЧислоЦелое);
	ТаблицаСерии.Колонки.Добавить("Серия",					ОписаниеТиповЧислоЦелое);
	ТаблицаСерии.Колонки.Добавить("Текст",					ОписаниеТиповСтрока);
	ТаблицаСерии.Колонки.Добавить("Подсказка",				ОписаниеТиповСтрока);
	ТаблицаСерии.Колонки.Добавить("Значение",				ОписаниеТиповЭтап);
	ТаблицаСерии.Колонки.Добавить("Показатель",				ОписаниеТиповПоказателя);
	ТаблицаСерии.Колонки.Добавить("Группировка",			ОписаниеТиповГруппировка);
	ТаблицаСерии.Колонки.Добавить("ЭтоПлан",				Новый ОписаниеТипов("Булево"));
	ТаблицаСерии.Колонки.Добавить("Порядок",				ОписаниеТиповЧислоЦелое);
	ТаблицаСерии.Колонки.Добавить("ПоказательКоличество",	ОписаниеТиповЧислоЦелое);
	ТаблицаСерии.Колонки.Добавить("ПоказательСумма",		ОписаниеТиповСумма);
	ТаблицаСерии.Колонки.Добавить("ПоказательСуммаПотенциальная",	ОписаниеТиповСумма);
	
	Для Каждого СтрокаЭтап Из ЭтапыТекущейВоронки Цикл
		
		Точка = ТаблицаТочки.Добавить();
		Точка.Текст = Строка(СтрокаЭтап.Этап) + " ("+Строка(СтрокаЭтап.Этап.Оценка) + "% )";
		Точка.Подсказка = Строка(СтрокаЭтап.Этап) + " ("+Строка(СтрокаЭтап.Этап.Оценка) + "% )";
		Точка.Значение = СтрокаЭтап.Этап;
		
		СерияНеудачно = ТаблицаСерии.Добавить();
		РассчитанныеПоказатели = РассчитатьПоказательДляЭтапа(ДанныеТекущие, , СтрокаЭтап.Этап,,,,Ложь);
		СерияНеудачно.Показатель					= РассчитанныеПоказатели.Показатель;
		СерияНеудачно.ПоказательКоличество			= РассчитанныеПоказатели.ПоказательКоличество;
		СерияНеудачно.ПоказательСумма				= РассчитанныеПоказатели.ПоказательСумма;
		СерияНеудачно.ПоказательСуммаПотенциальная	= РассчитанныеПоказатели.ПоказательСуммаПотенциальная;
		СерияНеудачно.Точка = ТаблицаТочки.Индекс(Точка);
		СерияНеудачно.Текст = НСтр("ru = 'Неудачно'") + РассчитанныеПоказатели.ПоказательПроцент;
		СерияНеудачно.Значение = СтрокаЭтап.Этап;
		СерияНеудачно.Подсказка = НСтр("ru = 'Неудачно: '") + Строка(СерияНеудачно.Показатель) + РассчитанныеПоказатели.ПоказательПроцент;
		СерияНеудачно.Порядок = 1;
		
		СерияУспешно = ТаблицаСерии.Добавить();
		РассчитанныеПоказатели						= РассчитатьПоказательДляЭтапа(ДанныеТекущие, , СтрокаЭтап.Этап,,,, Истина);
		СерияУспешно.Показатель						= РассчитанныеПоказатели.Показатель;
		СерияУспешно.ПоказательКоличество			= РассчитанныеПоказатели.ПоказательКоличество;
		СерияУспешно.ПоказательСумма				= РассчитанныеПоказатели.ПоказательСумма;
		СерияУспешно.ПоказательСуммаПотенциальная	= РассчитанныеПоказатели.ПоказательСуммаПотенциальная;
		СерияУспешно.Точка = ТаблицаТочки.Индекс(Точка);
		СерияУспешно.Текст = НСтр("ru = 'Успешно'") + РассчитанныеПоказатели.ПоказательПроцент;
		СерияУспешно.Значение = СтрокаЭтап.Этап;
		СерияУспешно.Подсказка = НСтр("ru = 'Успешно: '") + Строка(СерияУспешно.Показатель) + РассчитанныеПоказатели.ПоказательПроцент;
		СерияУспешно.Порядок = 2;
		
		СерияДостроенные = ТаблицаСерии.Добавить();
		СерияДостроенные.Показатель = 0;
		СерияДостроенные.Точка = ТаблицаТочки.Индекс(Точка);
		СерияДостроенные.Текст = НСтр("ru = 'Достроенные'");
		СерияДостроенные.Значение = СтрокаЭтап.Этап;
		СерияДостроенные.Подсказка = НСтр("ru = 'Достроенные: '") + Строка(0);
		СерияДостроенные.Порядок = 0;
		
	КонецЦикла;
	
	ПоказательВсего						= 0;
	ПоказательКоличествоВсего			= 0;
	ПоказательСуммаВсего				= 0;
	ПоказательСуммаПотенциальнаяВсего	= 0;
	
	Для нИндекс = 0 По ТаблицаСерии.Количество() - 1 Цикл
		СтрокаТочки = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
		
		Если СтрокаТочки.Текст = "Достроенные"Тогда
			
			СтрокаТочки.Показатель						= ПоказательВсего;
			СтрокаТочки.ПоказательКоличество			= ПоказательКоличествоВсего;
			СтрокаТочки.ПоказательСумма					= ПоказательСуммаВсего;
			СтрокаТочки.ПоказательСуммаПотенциальная	= ПоказательСуммаПотенциальнаяВсего;
			СтрокаТочки.Подсказка						= НСтр("ru = 'Достроенные: '") + Строка(ПоказательВсего);
			
			Попытка
				СледующаяСтрока		= ТаблицаСерии[ТаблицаСерии.Количество() - 1 - (нИндекс+3)];
				ВидЭтапаСледующий	= СледующаяСтрока.Значение.ВидЭтапа;
			Исключение
				СледующаяСтрока = Неопределено;
				ВидЭтапаСледующий	= Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПустаяСсылка();
			КонецПопытки;
			
			ВыполнятьЦикл = Истина;
			Пока ВыполнятьЦикл Цикл
				нИндекс = нИндекс + 1;
				
				Если (ТаблицаСерии.Количество()-1) < нИндекс Тогда
					нИндекс = нИндекс - 1;
					Прервать;
				КонецЕсли;
				
				СтрокаТочки_1 = ТаблицаСерии[ТаблицаСерии.Количество() - 1 - нИндекс];
						
				Если СтрокаТочки_1.Значение.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам
				ИЛИ СтрокаТочки_1.Значение.ВидЭтапа = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов Тогда
					
					Если СтрокаТочки_1.Текст = "Неудачно" ИЛИ СтрокаТочки_1.Текст = "Успешно" Тогда
						ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
						ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
						ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
						ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
					КонецЕсли;
				Иначе
					Если ВидЭтапаСледующий = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоДокументам
					ИЛИ ВидЭтапаСледующий = Перечисления.CRM_ВидыЭтаповВоронкиПродаж.ПоСостояниямИнтересов Тогда
						ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
						ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
						ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
						ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
					Иначе
						Если СтрокаТочки_1.Текст = "Неудачно" Тогда
							ПоказательВсего						= ПоказательВсего + СтрокаТочки_1.Показатель;
							ПоказательКоличествоВсего			= ПоказательКоличествоВсего + СтрокаТочки_1.ПоказательКоличество;
							ПоказательСуммаВсего				= ПоказательСуммаВсего + СтрокаТочки_1.ПоказательСумма;
							ПоказательСуммаПотенциальнаяВсего	= ПоказательСуммаПотенциальнаяВсего + СтрокаТочки_1.ПоказательСуммаПотенциальная;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаТочки_1.Текст = "Достроенные" Тогда
					нИндекс = нИндекс - 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСерии.Сортировать("Точка Возр, Порядок Возр");
	
	ТаблицаИнформация.Очистить();
	
	СтруктураПоиска = Новый Структура("Этап");
	
	Если Объект.ОбъектПланирования = Перечисления.CRM_ОбъектыПланированияВоронкиПродаж.Подразделение Тогда
		СтруктураПоиска.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
	Если Объект.ОбъектПланирования = Перечисления.CRM_ОбъектыПланированияВоронкиПродаж.Менеджер Тогда
		СтруктураПоиска.Вставить("Пользователь", Объект.Менеджер);
	КонецЕсли;
	
	СтруктураПоискаПоСериям = Новый Структура("Значение,Текст");
	
	КоличествоВсегоДляКонверсии = 0;
	
	КоличествоУспешноВсего = 0;
	КоличествоНеудачноВсего = 0;
	КоличествоАктивныеВсего = 0;
	
	Для Каждого СтрокаЭтап Из ЭтапыТекущейВоронки Цикл
		СтруктураПоискаПоСериям.Значение	= СтрокаЭтап.Этап;
		СтруктураПоискаПоСериям.Текст		= "Достроенные";
		
		СтруктураПоиска.Этап				= СтрокаЭтап.Этап;
		
		НайденныеСтрокиТекущие		= ДанныеТекущие.НайтиСтроки(СтруктураПоиска);
		НайденныеСерии				= ТаблицаСерии.НайтиСтроки(СтруктураПоискаПоСериям);
		
		Достроено		= НайденныеСерии[0].ПоказательКоличество;
		ДостроеноСумма	= НайденныеСерии[0].ПоказательСумма;
		
		СтруктураТекущиеПоказатели = Новый Структура("Количество,Сумма,СуммаПотенциальная", 0, 0, 0);
		Если НайденныеСтрокиТекущие.Количество() > 0 Тогда
			НоваяСтрока						= ТаблицаИнформация.Добавить();
			НоваяСтрока.Этап				= СтрокаЭтап.Этап;
			НоваяСтрока.ЭтапПредставление	= Строка(СтрокаЭтап.Этап) + " ("+Строка(СтрокаЭтап.Этап.Оценка) + "% )";
			
			Для Каждого НайденнаяСтрока Из НайденныеСтрокиТекущие Цикл
				НоваяСтрока.Активно		= НоваяСтрока.Активно + НайденнаяСтрока.КоличествоАктивные;
				НоваяСтрока.Удачно		= НоваяСтрока.Удачно + НайденнаяСтрока.КоличествоУспешно;
				НоваяСтрока.Неудачно	= НоваяСтрока.Неудачно + НайденнаяСтрока.КоличествоНеудачно;
				
				НоваяСтрока.Сумма = НоваяСтрока.Сумма + НайденнаяСтрока.СуммаНеудачно + НайденнаяСтрока.СуммаУспешно;
				НоваяСтрока.Количество = НоваяСтрока.Количество + НайденнаяСтрока.КоличествоНеудачно + НайденнаяСтрока.КоличествоУспешно;
			КонецЦикла;
			
			НоваяСтрока.Сумма				= НоваяСтрока.Сумма + ДостроеноСумма;
			НоваяСтрока.КоличествоВсего		= НоваяСтрока.Количество + Достроено;
			НоваяСтрока.СуммаПотенциальная	= (НоваяСтрока.Сумма * СтрокаЭтап.Этап.Оценка)/100;
			
			Если КоличествоВсегоДляКонверсии = 0 Тогда
				КоличествоВсегоДляКонверсии = НоваяСтрока.КоличествоВсего;
			КонецЕсли;
			
			Если КоличествоВсегоДляКонверсии = 0 Тогда
				КонверсияЭтапа = 0;
			Иначе
				КонверсияЭтапа								= (НоваяСтрока.КоличествоВсего*100)/КоличествоВсегоДляКонверсии;
			КонецЕсли;
			НоваяСтрока.КоэффициентВероятности				= КонверсияЭтапа;
			НоваяСтрока.КоэффициентВероятностиПредставление	= Формат(КонверсияЭтапа, "ЧДЦ=; ЧН=0") + "%";
			
			Если НоваяСтрока.КоличествоВсего = 0 Тогда
				ПроцентПотерьЭтапа = 0;
			Иначе
				ПроцентПотерьЭтапа							= (НоваяСтрока.Неудачно*100)/НоваяСтрока.КоличествоВсего;
			КонецЕсли;
			НоваяСтрока.ПроцентПотерь						= ПроцентПотерьЭтапа;
			НоваяСтрока.ПроцентПотерьПредставление			= Формат(ПроцентПотерьЭтапа, "ЧДЦ=; ЧН=0") + "%";
			
			ЗаполнитьЗначенияСвойств(СтруктураТекущиеПоказатели, НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ПлановаяСумма		= Объект.ЦелеваяСумма;
	Если ТаблицаИнформация.Количество() > 0 Тогда
		ПлановоеКоличество	= (ТаблицаИнформация[ТаблицаИнформация.Количество()-1].Количество*ПлановаяСумма)/?(ТаблицаИнформация[ТаблицаИнформация.Количество()-1].Сумма=0,1,ТаблицаИнформация[ТаблицаИнформация.Количество()-1].Сумма);
		Конверсия			= ТаблицаИнформация[ТаблицаИнформация.Количество()-1].КоэффициентВероятности;
	КонецЕсли;
	
	Объект.Планы.Очистить();
	ЭтоПерваяСтрока			= Истина;
	КоличествоПерваяСтрока	= 0;
	СуммаПерваяСтрока		= 0;
	Для Каждого СтрокаДанных Из ТаблицаИнформация Цикл
		НоваяСтрокаПлан = Объект.Планы.Добавить();
		НоваяСтрокаПлан.Этап		= СтрокаДанных.Этап;
		
		Если ЭтоПерваяСтрока Тогда
			НоваяСтрокаПлан.Количество	= (ПлановоеКоличество*СтрокаДанных.КоэффициентВероятности)/Конверсия;
			НоваяСтрокаПлан.Сумма		= (ПлановаяСумма*СтрокаДанных.КоэффициентВероятности)/Конверсия;
			НоваяСтрокаПлан.Конверсия	= СтрокаДанных.КоэффициентВероятностиПредставление;
			КоличествоПерваяСтрока		= НоваяСтрокаПлан.Количество;
			СуммаПерваяСтрока			= НоваяСтрокаПлан.Сумма;
			ЭтоПерваяСтрока				= Ложь;
		Иначе
			НоваяСтрокаПлан.Количество	= (КоличествоПерваяСтрока*СтрокаДанных.КоэффициентВероятности)/100;
			НоваяСтрокаПлан.Сумма		= (СуммаПерваяСтрока*СтрокаДанных.КоэффициентВероятности)/100;
			НоваяСтрокаПлан.Конверсия	= СтрокаДанных.КоэффициентВероятностиПредставление;
		КонецЕсли;
		
		Если НоваяСтрокаПлан.Сумма > 999 Тогда
			НоваяСтрокаПлан.Сумма = Окр(НоваяСтрокаПлан.Сумма/1000,2,0)*1000;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьПоказательДляЭтапа(ДанныеТекущие, ДанныеСтатистика = Неопределено, Этап, ВидПоказателя = Неопределено, ЗначениеТекущейГруппировки = Неопределено, ИмяТекущейГруппировки = Неопределено, Успешные = Неопределено, Активные = Ложь)
	
	РассчитанныеПоказатели = Новый Структура("Показатель,ПоказательКоличество,ПоказательСумма,ПоказательСуммаПотенциальная,ПоказательПроцент",0,0,0,0,"");
	
	СтруктураПоиска = Новый Структура("Этап");
	Если ЗначениеЗаполнено(ИмяТекущейГруппировки) Тогда
		СтруктураПоиска.Вставить(ИмяТекущейГруппировки);
		СтруктураПоиска[ИмяТекущейГруппировки] = ЗначениеТекущейГруппировки;
	КонецЕсли;
	
	СтруктураПоискаСтатистика = Новый Структура("Этап");
	
	ЗначениеПоказателя = 0;
	ЗначениеАктивные = 0;
	ЗначениеУспешные = 0;
	ЗначениеНеудачные = 0;
	ЗначениеВсеЗадачи = 0;
	ОбщееКоличествоОбработанныхЗадач = 0;
	
	СтруктураПоиска.Этап = Этап;
	СтруктураПоискаСтатистика.Этап = Этап;
	
	ЭтоСобытия = Ложь;
	//Для Каждого тЭл Из Этап.Состав Цикл
	//	Если тЭл.ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Старт Тогда
	//		// Это первый этап, на котором учитываются события - для первого конверсия считается по всем завершенным БП, а не по
	//		// завершенным этого этапа.
	//		ЭтоСобытия = Истина;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	
	НайденныеСтроки = ДанныеТекущие.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		ЗначениеПоказателя	= ЗначениеПоказателя + НайденнаяСтрока.СуммаУспешно + НайденнаяСтрока.СуммаНеудачно;
		ЗначениеАктивные = 0;
		ЗначениеУспешные = ЗначениеУспешные + НайденнаяСтрока.СуммаУспешно;
		ЗначениеНеудачные = ЗначениеНеудачные + НайденнаяСтрока.СуммаНеудачно;
		
		РассчитанныеПоказатели.ПоказательКоличество = РассчитанныеПоказатели.ПоказательКоличество + ?(Успешные = Неопределено,
																									НайденнаяСтрока.КоличествоАктивные+НайденнаяСтрока.КоличествоУспешно+НайденнаяСтрока.КоличествоНеудачно,
																									?(Успешные, НайденнаяСтрока.КоличествоУспешно, НайденнаяСтрока.КоличествоНеудачно));
		РассчитанныеПоказатели.ПоказательСумма		= РассчитанныеПоказатели.ПоказательСумма + ?(Успешные = Неопределено,
																							   НайденнаяСтрока.СуммаАктивные+НайденнаяСтрока.СуммаУспешно+НайденнаяСтрока.СуммаНеудачно,
																							   ?(Успешные, НайденнаяСтрока.СуммаУспешно, НайденнаяСтрока.СуммаНеудачно));
		
	КонецЦикла;
	
	РассчитанныеПоказатели.Показатель = РассчитанныеПоказатели.ПоказательКоличество;
	
	Возврат РассчитанныеПоказатели;
	
КонецФункции

&НаСервере
Функция ПолучитьВсеКартыИТочкиМаршрутаВоронки()
	МассивКарты = Новый Массив();
	МассивТочки = Новый Массив();
	
	Для Каждого СтрокаЭтап Из ЭтапыТекущейВоронки Цикл
		Для Каждого СтрокаСостав Из СтрокаЭтап.Состав Цикл
			Если МассивКарты.Найти(СтрокаСостав.КартаМаршрута) = Неопределено Тогда
				МассивКарты.Добавить(СтрокаСостав.КартаМаршрута);
			КонецЕсли;
			Если МассивТочки.Найти(СтрокаСостав.ТочкаМаршрута) = Неопределено Тогда
				МассивТочки.Добавить(СтрокаСостав.ТочкаМаршрута);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый Структура("Карты,Точки", МассивКарты, МассивТочки);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеВОтборе(Отбор, Имя, ВидСравнения, Значение, Использование, ДоступныеПоля = Неопределено)
	Если ДоступныеПоля <> Неопределено Тогда
		Если ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(Имя)) = Неопределено Тогда Возврат; КонецЕсли;
	КонецЕсли;
	ПолеОтбораЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя);
	ЭлементОтбора = НайтиПолеВОтборе(Отбор.Элементы, ПолеОтбораЛевоеЗначение);
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = ПолеОтбораЛевоеЗначение;
	Иначе
		Возврат;
	КонецЕсли;
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.Использование = Использование;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиПолеВОтборе(ЭлементыОтбора, Поле)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НайденныйЭлемент = НайтиПолеВОтборе(ЭлементОтбора.Элементы, Поле);
			Если НайденныйЭлемент <> Неопределено Тогда
				Возврат НайденныйЭлемент;
			КонецЕсли;
		Иначе
			Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
				Возврат ЭлементОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ВариантПланированияПриИзменении(Элемент)
	
	УстановитьВидимостьПолейРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПолейРасчета()
	
	Элементы.ПериодАнализа.Видимость	= (Объект.ВариантПланирования = ПредопределенноеЗначение("Перечисление.CRM_ВариантыПланированияВоронки.ПоКоличеству"));
	Элементы.ЦелеваяСумма.Видимость		= (Объект.ВариантПланирования = ПредопределенноеЗначение("Перечисление.CRM_ВариантыПланированияВоронки.ПоКоличеству"));
	Элементы.ПланыРассчитать.Видимость	= (Объект.ВариантПланирования = ПредопределенноеЗначение("Перечисление.CRM_ВариантыПланированияВоронки.ПоКоличеству"));
	Элементы.ПланыКонверсия.Видимость	= (Объект.ВариантПланирования = ПредопределенноеЗначение("Перечисление.CRM_ВариантыПланированияВоронки.ПоКоличеству"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьПолейРасчета();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти
