///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаблокироватьСобытиеОтИзменения()
	Для Каждого ЭлементФормы Из Элементы Цикл
		Попытка
			ЭлементФормы.ТолькоПросмотр = Истина;
		Исключение
			Попытка
				ЭлементФормы.Доступность = Ложь;
			Исключение
			КонецПопытки;
		КонецПопытки;
	КонецЦикла;
	
	ИсключитьЭлементы =
	"ФормаПечать
	|ФормаАвтоКнопки
	|ФормаОбщаяКомандаДополнительныеОтчетыИОбработкиПечатныеФормы
	|ФормаДокументCRM_СобытиеПечатьСобытие
	|СоздатьПартнера
	|ФормаСоздатьНаОсновании";
	
	// автокнопки
	Попытка		ИтераторПодчиненныеЭлементы = Элементы.ФормаАвтоКнопки.ПодчиненныеЭлементы;
	Исключение	ИтераторПодчиненныеЭлементы = Неопределено;
	КонецПопытки;
	Для Каждого ПодчЭлемент Из ИтераторПодчиненныеЭлементы Цикл
		ИсключитьЭлементы = ИсключитьЭлементы + Символы.ПС + ПодчЭлемент.Имя;
	КонецЦикла;
	
	// создать на основании
	Попытка		ИтераторПодчиненныеЭлементы = Элементы.ФормаСоздатьНаОсновании.ПодчиненныеЭлементы;
	Исключение	ИтераторПодчиненныеЭлементы = Неопределено;
	КонецПопытки;
	Для Каждого ПодчЭлемент Из ИтераторПодчиненныеЭлементы Цикл
		ИсключитьЭлементы = ИсключитьЭлементы + Символы.ПС + ПодчЭлемент.Имя;
	КонецЦикла;
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(ИсключитьЭлементы) Цикл
		ТекСтр = СтрПолучитьСтроку(ИсключитьЭлементы, НомерСтроки);
		Если Не ЗначениеЗаполнено(ТекСтр) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ТекРодитель = Элементы[ТекСтр];
			Пока Истина Цикл
				Попытка
					Если ТекРодитель = ЭтотОбъект Тогда
						Прервать;
					КонецЕсли;
					
					Попытка
						ТекРодитель.ТолькоПросмотр = Ложь;
					Исключение
						ТекРодитель.Доступность = Истина;
					КонецПопытки;
					
					ТекРодитель = ТекРодитель.Родитель;
				Исключение
					Прервать;
				КонецПопытки;
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ЗаблокированноОтИзменения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПартнераПоНаименованию(Знач НаименованиеСтр)
	бИспользоватьПомощник = (CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьПомощникВводаНовогоКлиента") = Истина);
	
	СтруктураПараметрыНового = Новый Структура("Наименование,АдресПочты,Телефон", НаименованиеСтр, "", "");
	
	Если бИспользоватьПомощник Тогда
		CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, Новый Структура("ПараметрыНового", СтруктураПараметрыНового));
	Иначе
		ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("ПараметрыНового", СтруктураПараметрыНового), ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМаркетинговуюКампанию()
	
	Если Объект.МаркетинговаяКампания.Завершено ИЛИ Объект.МаркетинговаяКампания.ДатаОкончания < ТекущаяДатаСеанса() Тогда
		Возврат;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.МаркетинговыеМероприятия"));
	ТипМК = Новый ОписаниеТипов(МассивТипов);
	
	Отбор = Новый Структура("ТипЗначения", ТипМК);
	Выборка = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.Выбрать();
	
	Выборка.Следующий();
	КаналПервичногоИнтереса = Выборка.Ссылка;
	ИсточникПервичногоИнтереса = Объект.МаркетинговаяКампания;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает текущего пользователя.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Текущий пользователь.
//
Функция ТекущийПользователь()
	Возврат Пользователи.ТекущийПользователь();
КонецФункции // ТекущийПользователь()

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоУчастников(Форма)
	Форма.КоличествоУчастников = Форма.Объект.СторонниеЛица.Количество() + Форма.Объект.СвоиЛица.Количество();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрименитьНастройкиСтраницРеквизитовПоПроекту(Форма)
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Форма.СписокРеквизитовОбязательныхДляЗаполнения.Очистить();
	Форма.СписокДополнительныхРеквизитовОбязательныхДляЗаполнения.Очистить();
	
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаНастройкаСтраницСобытия Цикл
		Попытка	Элементы[СтрокаТаблицы.Имя].Видимость = СтрокаТаблицы.Видимость;
		Исключение КонецПопытки;
		Если СтрокаТаблицы.Заголовок <> "" Тогда
			Попытка	Элементы[СтрокаТаблицы.Имя].Заголовок = СтрокаТаблицы.Заголовок;
			Исключение КонецПопытки;
		Иначе
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаНастройкаРеквизитовСобытия Цикл
		МассивИмен = Новый Массив();
		
		Если СтрокаТаблицы.Имя = "Начало" Тогда
			МассивИмен.Добавить("ДатаНачало");
			МассивИмен.Добавить("ВремяНачало");
		ИначеЕсли СтрокаТаблицы.Имя = "Окончание" Тогда
			МассивИмен.Добавить("ДатаОкончание");
			МассивИмен.Добавить("ВремяОкончание");
		ИначеЕсли СтрокаТаблицы.Имя = "Трудозатраты" Тогда
			МассивИмен.Добавить("Трудозатраты");
			МассивИмен.Добавить("ДекорацияТрудозатратыЕдиница");
			МассивИмен.Добавить("ДекорацияТрудозатраты");
		Иначе
			МассивИмен.Добавить(СтрокаТаблицы.Имя);
		КонецЕсли;
		
		Для Каждого ИмяЭлемента Из МассивИмен Цикл
			Попытка Элементы[ИмяЭлемента].Видимость = СтрокаТаблицы.Видимость;
			Исключение КонецПопытки;
			
			Если СтрокаТаблицы.УстанавливатьДоступность Тогда
				Попытка Элементы[ИмяЭлемента].ТолькоПросмотр = Не СтрокаТаблицы.Доступность;
				Исключение КонецПопытки;
			КонецЕсли;
			
			Если СтрокаТаблицы.ВозможностьЗаполнения Тогда
				Попытка
					Элементы[ИмяЭлемента].АвтоОтметкаНезаполненного = СтрокаТаблицы.ОбязательноеЗаполнение;
					Если СтрокаТаблицы.ОбязательноеЗаполнение И Не СтрокаТаблицы.ЭтоДополнительныйРеквизит Тогда
						Форма.СписокРеквизитовОбязательныхДляЗаполнения.Добавить(СтрокаТаблицы.ПутьКДанным);
					ИначеЕсли СтрокаТаблицы.ОбязательноеЗаполнение И СтрокаТаблицы.ЭтоДополнительныйРеквизит Тогда
						Форма.СписокДополнительныхРеквизитовОбязательныхДляЗаполнения.Добавить(СтрокаТаблицы.ПутьКДанным);
					Иначе
						Если Не ЗначениеЗаполнено(Объект[СтрокаТаблицы.ПутьКДанным]) Тогда
							Элементы[ИмяЭлемента].ОтметкаНеЗаполненного = Ложь;
						КонецЕсли;
					КонецЕсли;
				Исключение КонецПопытки;
			КонецЕсли;
			
			Если СтрокаТаблицы.ВозможностьИзменятьЗаголовок Тогда
				Если СтрокаТаблицы.Заголовок <> "" Тогда
					Если	ИмяЭлемента = "ВремяНачало"
						Или	ИмяЭлемента = "ВремяОкончание"
						Или	ИмяЭлемента = "ДекорацияТрудозатратыЕдиница"
						Или	ИмяЭлемента = "ДекорацияТрудозатраты" Тогда
						//
						Продолжить;
					КонецЕсли;
					
					Если СтрокаТаблицы.ЭтоДополнительныйРеквизит Тогда
						Попытка
							Для Каждого СтрДопРеквизит Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
								Если СтрДопРеквизит.Свойство = СтрокаТаблицы.ДополнительныйРеквизитСсылка Тогда
									Попытка Элементы[СтрДопРеквизит.ИмяРеквизитаЗначение].Заголовок = СтрокаТаблицы.Заголовок;
									Исключение КонецПопытки;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Исключение
						КонецПопытки;
					Иначе
						Попытка Элементы[ИмяЭлемента].Заголовок = СтрокаТаблицы.Заголовок;
						Исключение КонецПопытки;
					КонецЕсли;
				Иначе
					// Рассматрвиаем случай, когда нам нужно откатится к названию колонок по умолчанию (если у проекта нет
					// заполненного заголовка).
					Если	ИмяЭлемента = "ВремяНачало"
						Или	ИмяЭлемента = "ВремяОкончание"
						Или	ИмяЭлемента = "ДекорацияТрудозатратыЕдиница"
						Или	ИмяЭлемента = "ДекорацияТрудозатраты" Тогда
						//
						Продолжить;
					КонецЕсли;
					
					Если СтрокаТаблицы.ЭтоДополнительныйРеквизит Тогда
						Попытка
							Для Каждого СтрДопРеквизит Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
								Если СтрДопРеквизит.Свойство = СтрокаТаблицы.ДополнительныйРеквизитСсылка Тогда
									Попытка Элементы[СтрДопРеквизит.ИмяРеквизитаЗначение].Заголовок = СтрокаТаблицы.Представление;
									Исключение КонецПопытки;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Исключение
						КонецПопытки;
					Иначе
						Попытка Элементы[ИмяЭлемента].Заголовок = СтрокаТаблицы.Представление;
						Исключение КонецПопытки;
					КонецЕсли;					

				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Попытка
		Для Каждого СтрДопРеквизит Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
			ЭлементФормы = Форма.Элементы.Найти(СтрДопРеквизит.ИмяРеквизитаЗначение);
			Если ЭлементФормы = Неопределено Тогда	
				СтрДопРеквизит.ЗаполнятьОбязательно = Ложь;
			ИначеЕсли НЕ ЭлементФормы.Видимость	Тогда
				СтрДопРеквизит.ЗаполнятьОбязательно = Ложь;
			КонецЕсли;	
		КонецЦикла;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСсылкуПоИмениЭлемента(Форма, ИмяЭлемента)
	НайденныеСтроки = Форма.ТаблицаСоответствияЭлементовУправленияСсылкам.НайтиСтроки(Новый Структура("Имя", ИмяЭлемента));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденныеСтроки[0].Ссылка;
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКартинкуДляОбъектов(Форма, ТипКартинки, Объект1, Объект2 = Неопределено)
	СтруктураПоиска = Новый Структура("Объект1", Объект1);
	Если Объект2 <> Неопределено Тогда
		СтруктураПоиска.Вставить("Объект2", Объект2);
	КонецЕсли;
	
	НайденныеСтроки = Форма.ТаблицаКэшКартинок.НайтиСтроки(СтруктураПоиска);
	
	Если ТипКартинки = "КартинкаВидаСобытия" Тогда
		Если НайденныеСтроки.Количество() = 0 Тогда
			ПолученнаяКартинка = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКартинкуВидаСобытия(Объект1, Объект2);
			
			НоваяСтрока = Форма.ТаблицаКэшКартинок.Добавить();
			НоваяСтрока.Объект1 = Объект1;
			НоваяСтрока.Объект2 = Объект2;
			НоваяСтрока.Картинка = ПолученнаяКартинка;
			
			Возврат ПолученнаяКартинка;
		Иначе
			Возврат НайденныеСтроки[0].Картинка;
		КонецЕсли;
		
	ИначеЕсли ТипКартинки = "Важность" Тогда
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если Объект1 = ПредопределенноеЗначение("Перечисление.ВариантыВажностиВзаимодействия.Высокая") Тогда
				ПолученнаяКартинка = БиблиотекаКартинок.CRM_Важно;
			ИначеЕсли Объект1 = ПредопределенноеЗначение("Перечисление.ВариантыВажностиВзаимодействия.Низкая") Тогда
				ПолученнаяКартинка = БиблиотекаКартинок.CRM_ВажностьНизкая;
			Иначе
				ПолученнаяКартинка = Новый Картинка;
			КонецЕсли;
			
			НоваяСтрока = Форма.ТаблицаКэшКартинок.Добавить();
			НоваяСтрока.Объект1 = Объект1;
			НоваяСтрока.Картинка = ПолученнаяКартинка;
			
			Возврат ПолученнаяКартинка;
		Иначе
			Возврат НайденныеСтроки[0].Картинка;
		КонецЕсли;
		
	ИначеЕсли ТипКартинки = "ВходящееИсходящее" Тогда	
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если Объект1 = ПредопределенноеЗначение("Перечисление.CRM_ВходящееИсходящееСобытие.Входящее") Тогда
				ПолученнаяКартинка = БиблиотекаКартинок.CRM_ВходящееСобытие;
			ИначеЕсли Объект1 = ПредопределенноеЗначение("Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее") Тогда
				ПолученнаяКартинка = БиблиотекаКартинок.CRM_ИсходящееСобытие;
			Иначе
				ПолученнаяКартинка = Новый Картинка;
			КонецЕсли;
			
			НоваяСтрока = Форма.ТаблицаКэшКартинок.Добавить();
			НоваяСтрока.Объект1 = Объект1;
			НоваяСтрока.Картинка = ПолученнаяКартинка;
			
			Возврат ПолученнаяКартинка;
		Иначе
			Возврат НайденныеСтроки[0].Картинка;
		КонецЕсли;
	ИначеЕсли ТипКартинки = "СостояниеСобытия" Тогда
		Если НайденныеСтроки.Количество() = 0 Тогда
			Попытка		ТипСостояния = ПолучитьЗначениеРеквизита(Объект1, "ТипСостояния");
			Исключение	ТипСостояния = Неопределено;
			КонецПопытки;
			Если ТипСостояния = ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.ВРаботе") Тогда
				ПолученнаяКартинка = БиблиотекаКартинок.CRM_СостояниеВРаботе;
			ИначеЕсли ТипСостояния = ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Завершено") Тогда
				ПолученнаяКартинка = БиблиотекаКартинок.CRM_СостояниеЗавершено;
			ИначеЕсли ТипСостояния = ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Запланировано") Тогда
				ПолученнаяКартинка = БиблиотекаКартинок.CRM_СостояниеЗапланировано;
			ИначеЕсли ТипСостояния = ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Отменено") Тогда
				ПолученнаяКартинка = БиблиотекаКартинок.CRM_СостояниеОтменено;
			Иначе
				ПолученнаяКартинка = Новый Картинка;
			КонецЕсли;
			
			НоваяСтрока = Форма.ТаблицаКэшКартинок.Добавить();
			НоваяСтрока.Объект1 = Объект1;
			НоваяСтрока.Картинка = ПолученнаяКартинка;
			
			Возврат ПолученнаяКартинка;
		Иначе
			Возврат НайденныеСтроки[0].Картинка;
		КонецЕсли;
	
	Иначе
		Возврат Новый Картинка();
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура НастроитьВидимостьИДоступностьФормыЭкспорт() Экспорт
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	ТипСостоянияСобытия = ПолучитьЗначениеРеквизита(Форма.Объект.СостояниеСобытия, "ТипСостояния");
	
	Форма.Элементы.ГруппаПериодВремя.Видимость = (Не Форма.Объект.НаВесьДень);
	
	// Элементы управления периодическим событием.
	Форма.Элементы.ГруппаПериодическоеСобытие.Видимость = Не Форма.Объект.ИзмененоВРяде;
	Если Форма.Элементы.ГруппаПериодическоеСобытие.Видимость Тогда
		Форма.Элементы.Периодическое.Доступность = (Не Форма.Объект.ИзмененоВРяде);
		Форма.Элементы.РядСобытийСсылкаНаименование.Доступность = (Форма.Объект.Периодическое И ЗначениеЗаполнено(Форма.Объект.РядСобытий) И Не Форма.Объект.ИзмененоВРяде);
	КонецЕсли;
	
	// Командная панель атрибутов события.
	СтрокаЗначениеНеВыбрано = НСтр("ru = '[Не выбрано]'");
	Заголовок		= ?(ЗначениеЗаполнено(Форма.Объект.Проект), Строка(Форма.Объект.Проект), НСтр("ru = '[Проект не задан]'"));
	Форма.Элементы.ПодменюПроектСобытия.Заголовок = Заголовок;
	Форма.Элементы.ПодменюВидСобытия.Заголовок			= ?(ЗначениеЗаполнено(Форма.Объект.ВидСобытия), Строка(Форма.Объект.ВидСобытия), СтрокаЗначениеНеВыбрано);
	Форма.Элементы.ПодменюВидСобытия.Картинка			= ПолучитьКартинкуДляОбъектов(Форма, "КартинкаВидаСобытия", Форма.Объект.ВидСобытия);
	
	Для Каждого КнопкаВидСобытия Из Форма.Элементы.ПодменюВидСобытия.ПодчиненныеЭлементы Цикл
		КнопкаВидСобытия.Картинка = ПолучитьКартинкуДляОбъектов(Форма, "КартинкаВидаСобытия", ПолучитьСсылкуПоИмениЭлемента(Форма, КнопкаВидСобытия.Имя));
	КонецЦикла;
	
	Форма.Элементы.ПодменюВходящееИсходящее.Заголовок	= ?(ЗначениеЗаполнено(Форма.Объект.ВходящееИсходящее), Строка(Форма.Объект.ВходящееИсходящее), СтрокаЗначениеНеВыбрано);
	Форма.Элементы.ПодменюВажность.Заголовок			= ?(ЗначениеЗаполнено(Форма.Объект.Важность), Строка(Форма.Объект.Важность), СтрокаЗначениеНеВыбрано);
	Форма.Элементы.ПодменюСостояниеСобытия.Заголовок	= ?(ЗначениеЗаполнено(Форма.Объект.СостояниеСобытия), Строка(Форма.Объект.СостояниеСобытия), СтрокаЗначениеНеВыбрано);
	
	Форма.Элементы.ПодменюВходящееИсходящее.Картинка	= ПолучитьКартинкуДляОбъектов(Форма, "ВходящееИсходящее", Форма.Объект.ВходящееИсходящее);
	Форма.Элементы.ПодменюВажность.Картинка				= ПолучитьКартинкуДляОбъектов(Форма, "Важность", Форма.Объект.Важность);
	Форма.Элементы.ПодменюСостояниеСобытия.Картинка		= ПолучитьКартинкуДляОбъектов(Форма, "СостояниеСобытия", Форма.Объект.СостояниеСобытия);
	
	Форма.Заголовок = ПолучитьЗаголовокФормы(Форма);
	
	Форма.Элементы.РядСобытийСсылкаНаименование.Видимость =  Форма.Объект.Периодическое;
	
	Форма.Элементы.ПричинаОтказа.Видимость = (ТипСостоянияСобытия = ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Отменено"));
	
	//Форма.Элементы.ФормаОбщаяКомандаCRM_СоздатьЛичнуюЗадачу.Доступность = НЕ ЗначениеЗаполнено(Форма._ЛичнаяЗадача);
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Форма.Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Форма.Элементы.Ответственный.КнопкаВыбора = Истина;
	Иначе
		Форма.Элементы.Ответственный.ТолькоПросмотр = Истина;
		Форма.Элементы.Ответственный.КнопкаВыбора = Ложь;
	КонецЕсли;
	//Форма.Элементы.ГруппаСторонниеЛица.Видимость 	= Форма.Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ЛичнаяВстреча");
	Форма.Элементы.ГруппаСторонниеЛица.Видимость 	= Истина;
	Форма.Элементы.СоздатьПартнера.Видимость 		= Форма.Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок")
														И НЕ ЗначениеЗаполнено(Форма.Объект.Партнер);
	Если Форма.Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок") Тогда
		Форма.Элементы.Место.Заголовок = НСтр("ru = 'Телефон'");
		Форма.Элементы.Место.Подсказка = НСтр("ru = 'Телефон'");
		Форма.Элементы.Место.КнопкаВыбора = Истина;	
		
	Иначе
		Форма.Элементы.Место.Заголовок = НСтр("ru = 'Место'");
		Форма.Элементы.Место.Подсказка = НСтр("ru = 'Место'");
		Форма.Элементы.Место.КнопкаВыбора = Истина;	
	КонецЕсли;
	
	// Применение настроек видимости / доступности реквизитов в зависимости от настроек.
	ПрименитьНастройкиСтраницРеквизитовПоПроекту(Форма);
	
	//Если Форма.Элементы.ГруппаСторонниеЛица.Видимость Тогда
	//	Форма.Элементы.ГруппаСторонниеЛица.Видимость 	= НЕ Форма.Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок");
	//КонецЕсли;
	Если Форма.Элементы.СоздатьПартнера.Видимость Тогда
		Форма.Элементы.СоздатьПартнера.Видимость 		= Форма.Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок")
															И НЕ ЗначениеЗаполнено(Форма.Объект.Партнер);
	КонецЕсли;
	Если Форма.Элементы.РядСобытийСсылкаНаименование.Видимость Тогда
		Форма.Элементы.РядСобытийСсылкаНаименование.Видимость =  Форма.Объект.Периодическое;
	КонецЕсли;
	Если Форма.Элементы.ПричинаОтказа.Видимость Тогда
		Форма.Элементы.ПричинаОтказа.Видимость = (ТипСостоянияСобытия = ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Отменено"));
	КонецЕсли;
	Если Форма.Элементы.ГруппаПериодВремя.Видимость Тогда
		Форма.Элементы.ГруппаПериодВремя.Видимость = (Не Форма.Объект.НаВесьДень);
	КонецЕсли;
	Если Форма.Элементы.ГруппаПериодическоеСобытие.Видимость Тогда
		Форма.Элементы.ГруппаПериодическоеСобытие.Видимость = Не Форма.Объект.ИзмененоВРяде;
	КонецЕсли;
	
	Форма.Элементы.ПодобратьМесто.Видимость = (Не Форма.Элементы.СоздатьПартнера.Видимость И Форма.Объект.ВидСобытия <> ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок"));
	
	Форма.Элементы.СторонниеЛицаТелефонФлаг.Видимость	= Форма.ИспользоватьОповещенияСМС;
	Форма.Элементы.СторонниеЛицаАдресФлаг.Видимость		= Форма.ИспользоватьОповещенияЭлектроннаяПочта;
	
	Форма.Элементы.СвоиЛицаНапоминания.Видимость		= Форма.ИспользоватьНапоминания;
	Форма.Элементы.СвоиЛицаТелефонФлаг.Видимость		= Форма.ИспользоватьОповещенияСМС;
	Форма.Элементы.СвоиЛицаАдресФлаг.Видимость			= Форма.ИспользоватьОповещенияЭлектроннаяПочта;
	
	// Свойства переключателей флажков каналов оповещений.
	Форма.Элементы.СторонниеУстановитьСнятьФлажки.Видимость = (Форма.ИспользоватьОповещенияСМС
														  ИЛИ Форма.ИспользоватьОповещенияЭлектроннаяПочта);
	
	Форма.Элементы.СвоиЛицаУстановитьСнятьФлажки.Видимость  = (Форма.ИспользоватьНапоминания
														  ИЛИ Форма.ИспользоватьОповещенияСМС
														  ИЛИ Форма.ИспользоватьОповещенияЭлектроннаяПочта);
	
	Форма.Элементы.УстановитьФлажкиНапоминания1.Видимость	= Форма.ИспользоватьНапоминания;
	Форма.Элементы.СнятьФлажкиНапоминания1.Видимость		= Форма.ИспользоватьНапоминания;
	
	Форма.Элементы.УстановитьФлажкиТелефон.Видимость		= Форма.ИспользоватьОповещенияСМС;
	Форма.Элементы.УстановитьФлажкиТелефон1.Видимость		= Форма.ИспользоватьОповещенияСМС;
	Форма.Элементы.СнятьФлажкиТелефон.Видимость				= Форма.ИспользоватьОповещенияСМС;
	Форма.Элементы.СнятьФлажкиТелефон1.Видимость			= Форма.ИспользоватьОповещенияСМС;
	
	Форма.Элементы.УстановитьФлажкиПочта.Видимость			= Форма.ИспользоватьОповещенияЭлектроннаяПочта;
	Форма.Элементы.УстановитьФлажкиПочта1.Видимость			= Форма.ИспользоватьОповещенияЭлектроннаяПочта;
	Форма.Элементы.СнятьФлажкиПочта.Видимость				= Форма.ИспользоватьОповещенияЭлектроннаяПочта;
	Форма.Элементы.СнятьФлажкиПочта1.Видимость				= Форма.ИспользоватьОповещенияЭлектроннаяПочта;
	
	// Видимость страници оповещений в зависимости от состояния события.
	Форма.Элементы.ГруппаОповещений.Видимость = (ТипСостоянияСобытия <> ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Отменено") И ТипСостоянияСобытия <> ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Завершено"));
	
	Если Форма.ТолькоПросмотр Тогда
		//Форма.Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность	= Ложь;
		Форма.Элементы.ДекорацияТрудозатраты.Доступность							= Ложь;
		Форма.Элементы.ДекорацияВыбратьГруппу.Доступность							= Ложь;
		Форма.Элементы.КоманднаяПанельАтрибутыСобытия.Доступность					= Ложь;
		Форма.Элементы.КаналПервичногоИнтереса.ТолькоПросмотр						= Истина;
		Форма.Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр					= Истина;
		Если НЕ (Форма.Элементы.Найти("_ДобавитьОповещение") = Неопределено) Тогда
			Форма.Элементы._ДобавитьОповещение.Доступность							= Ложь;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовокФормы(Форма)
	Если ЗначениеЗаполнено(Форма.Объект.ВидСобытия) Тогда
		СтрокаЗаголовок = Строка(Форма.Объект.ВидСобытия);
		Если ЗначениеЗаполнено(Форма.Объект.Партнер) Тогда
			СтрокаЗаголовок = СтрокаЗаголовок + ", " + Строка(Форма.Объект.Партнер);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Объект.Проект) Тогда
			СтрокаЗаголовок = СтрокаЗаголовок + ", " + Строка(Форма.Объект.Проект);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Форма.Объект.Партнер) Тогда
		СтрокаЗаголовок = Строка(Форма.Объект.Партнер);
		Если ЗначениеЗаполнено(Форма.Объект.Проект) Тогда
			СтрокаЗаголовок = СтрокаЗаголовок + ", " + Строка(Форма.Объект.Проект);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Форма.Объект.Проект) Тогда
		СтрокаЗаголовок = Строка(Форма.Объект.Проект);
	КонецЕсли;	
	Возврат СтрокаЗаголовок;
КонецФункции

// Преобразует дробные доли часа в минуты.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПеревестиТрудозатратыВЧасыМинуты(Форма)
	
	ЧасыТрудозатрат        = Цел(Форма.Объект.Трудозатраты);
	МинутыТрудозатрат      = Окр((Форма.Объект.Трудозатраты - ЧасыТрудозатрат)*3/5, 2);
	Форма.ТрудозатратыЧасыМинуты = ЧасыТрудозатрат + МинутыТрудозатрат;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьОсновноеКонтактноеЛицо(ВыбранныйПартнер)
	
	Возврат ВыбранныйПартнер.CRM_ОсновноеКонтактноеЛицо;
	
КонецФункции

&НаСервере
Функция ВернутьЗаголовокКоманды(ИмяКоманды)
	
	Возврат Команды[ИмяКоманды].Заголовок;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОснованияБизнесПроцесса(Знач ИмяКоманды = Неопределено)
	СтруктураРезультат = Новый Структура("Основание,КартаМаршрута,ИспользоватьВИнтересах", Объект.Ссылка, Объект.Проект.CRM_КартаМаршрута, Объект.Проект.CRM_КартаМаршрута.ИспользоватьВИнтересах);
	
	Если ИмяКоманды <> Неопределено Тогда
		Если Найти(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_") > 0 Тогда
			ИдентификаторСсылки = Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_", ""), "_", "-"));
			ТочкаМаршрутаСсылка = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(ИдентификаторСсылки);
			Если ЗначениеЗаполнено(ТочкаМаршрутаСсылка) Тогда
				СтруктураРезультат.Вставить("ТочкаСтарта", ТочкаМаршрутаСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаСервере
Функция ПроверитьНаличиеУчастниковСобытия()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УдалитьCRM_Событие.Партнер,
	               |	УдалитьCRM_Событие.КонтактноеЛицо
	               |ИЗ
	               |	Документ.УдалитьCRM_Событие КАК CRM_Событие
	               |ГДЕ
	               |	УдалитьCRM_Событие.Ссылка = &Ссылка
	               |	И (НЕ УдалитьCRM_Событие.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |			ИЛИ НЕ УдалитьCRM_Событие.КонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	CRM_СобытиеСторонниеЛица.Партнер,
	               |	CRM_СобытиеСторонниеЛица.КонтактноеЛицо
	               |ИЗ
	               |	Документ.УдалитьCRM_Событие.СторонниеЛица КАК CRM_СобытиеСторонниеЛица
	               |ГДЕ
	               |	CRM_СобытиеСторонниеЛица.Ссылка = &Ссылка
	               |	И (НЕ CRM_СобытиеСторонниеЛица.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |			ИЛИ НЕ CRM_СобытиеСторонниеЛица.КонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка),
	               |	CRM_СобытиеСвоиЛица.Лицо
	               |ИЗ
	               |	Документ.УдалитьCRM_Событие.СвоиЛица КАК CRM_СобытиеСвоиЛица
	               |ГДЕ
	               |	CRM_СобытиеСвоиЛица.Ссылка = &Ссылка
	               |	И (НЕ CRM_СобытиеСвоиЛица.Лицо = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |			ИЛИ НЕ CRM_СобытиеСвоиЛица.Лицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

// Процедура проверяет права на редактирование цен.
&НаСервере
Процедура УстановитьВозможностьРедактированияЦен()
	
	ПраваНаРедактированиеЦен = Пользователи.РолиДоступны("CRM_РедактированиеЦенИСкидокВДокументах, ПолныеПрава");
	Элементы.ЗапасыЦена.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	Элементы.ЗапасыСумма.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	Элементы.ЗапасыЦена.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	Элементы.ЗапасыВсего.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму() Экспорт
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТипОснования()
	
	УчетнаяЗапись		= CRM_УправлениеЭлектроннойПочтой.ПолучитьУчетнуюЗаписьПоПисьму(Объект.ДокументОснование);
	ФормаПисьма = ПолучитьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",Новый Структура("Ключ",Объект.ДокументОснование));
	
	Если НЕ (ФормаПисьма = Неопределено) Тогда	
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьТипОснованияЗавершение", ЭтотОбъект, ФормаПисьма);
		CRM_УправлениеЭлектроннойПочтойКлиент.ВопросПеренестиПисьмоВПапкуОбработанные(УчетнаяЗапись, ФормаПисьма.Объект.CRM_Папка, ОписаниеОповещения);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТипОснованияЗавершение(ПапкаОтработанные, ФормаПисьма) Экспорт
	
	Если ПапкаОтработанные = ПредопределенноеЗначение("Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка") Тогда
		Возврат;
	КонецЕсли;		
	Если ФормаПисьма.Открыта() Тогда
		ФормаПисьма.Объект.CRM_Папка = ПапкаОтработанные;
		ФормаПисьма.Объект.Удалить_Рассмотрено = Истина;
		ФормаПисьма.Модифицированность = Истина;
	Иначе
		CRM_УправлениеЭлектроннойПочтой.ПеренестиПисьмоВПапку(Объект.ДокументОснование, ПапкаОтработанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСписокАдресов(ТекущиеДанные, ТипКИ, ВидКИ = Неопределено)
	
	Если ТипЗнч(ТекущиеДанные) = Тип("Структура") Тогда
		Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(?(ЗначениеЗаполнено(ТекущиеДанные.Партнер), ТекущиеДанные.Партнер, Неопределено),
											?(ЗначениеЗаполнено(ТекущиеДанные.КонтактноеЛицо),ТекущиеДанные.КонтактноеЛицо,Неопределено),
											ТипКИ, ВидКИ);
	Иначе
		Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ТекущиеДанные, ТипКИ);
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	Если НЕ Таб = Неопределено Тогда
		СписокЗнач = Новый СписокЗначений;
		
		ТекСсылка = "";
		Для Каждого СтрокаТаб Из Таб Цикл
			СтруктураАдреса = Новый Структура;
			
			Если НЕ ТекСсылка = СтрокаТаб.Ссылка Тогда
				
				СтруктураАдреса.Вставить("Адрес"		,СокрЛП(СтрокаТаб.АдресЭП));
				СтруктураАдреса.Вставить("Представление",СокрЛП(СтрокаТаб.Представление));
				СтруктураАдреса.Вставить("Объект"		,СтрокаТаб.Ссылка);
				СписокАдресов.Добавить(СтруктураАдреса, Строка(СтрокаТаб.Ссылка));
				ТекСсылка = СтрокаТаб.Ссылка;
				
			КонецЕсли;
			
			СтруктураАдреса.Вставить("Адрес"		,СокрЛП(СтрокаТаб.АдресЭП));
			СтруктураАдреса.Вставить("Представление",СокрЛП(СтрокаТаб.Представление));
			СтруктураАдреса.Вставить("Объект"		,СтрокаТаб.Ссылка);
			СписокАдресов.Добавить(СтруктураАдреса, "   "+СокрЛП(СтрокаТаб.Вид) + ": " + СтрокаТаб.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокАдресов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	//
	//// Валюта.
	//Если СтруктураНадписи.УчетВалютныхОпераций Тогда
	//	Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
	//		ТекстНадписи = НСтр("ru = 'Валюта: %Валюта%, курс: %Курс%'");
	//		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
	//		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", ?((НЕ ЗначениеЗаполнено(СтруктураНадписи.ВалютаРасчетов)) ИЛИ СтруктураНадписи.ВалютаДокумента = СтруктураНадписи.ВалютаРасчетов, СокрЛП(Строка(СтруктураНадписи.Курс)), СокрЛП(Строка(СтруктураНадписи.КурсНациональнаяВалюта))));
	//	Иначе
	//		ТекстНадписи = НСтр("ru = 'Валюта: <нет>'");
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// Вид цен.
	//Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
	//	Если ПустаяСтрока(ТекстНадписи) Тогда
	//		ТекстНадписи = ТекстНадписи + НСтр("ru = 'Вид цен: %ВидЦен%'");
	//	Иначе	
	//		ТекстНадписи = ТекстНадписи + НСтр("ru = '; Вид цен: %ВидЦен%'");
	//	КонецЕсли;	
	//	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	//КонецЕсли;
	//
	//// Вид скидки наценки.
	//Если ЗначениеЗаполнено(СтруктураНадписи.ВидСкидки) Тогда
	//	Если ПустаяСтрока(ТекстНадписи) Тогда
	//		ТекстНадписи = ТекстНадписи + НСтр("ru = 'Вид скидки: %ВидСкидкиНаценки%'");
	//	Иначе
	//		ТекстНадписи = ТекстНадписи + НСтр("ru = '; Вид скидки: %ВидСкидкиНаценки%'");
	//	КонецЕсли;	
	//	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидСкидкиНаценки%", СокрЛП(Строка(СтруктураНадписи.ВидСкидки)));
	//КонецЕсли;
	//
	//// Флаг сумма включает НДС.
	//Если ПустаяСтрока(ТекстНадписи) Тогда	
	//	Если СтруктураНадписи.СуммаВключаетНДС Тогда	
	//		ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
	//	Иначе		
	//		ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
	//	КонецЕсли;	
	//КонецЕсли;	
	//
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

// Функция очищает поле телефона при вводе на основании клиента.
//
&НаСервере
Функция ОчиститьНомерТелефонаПриВводеНаОсновании(НомерТелефона)
	НомерТелефона = СтрЗаменить(НомерТелефона,"\", ",");
	НомерТелефона = СтрЗаменить(НомерТелефона,":", ",");
	НомерТелефона = СтрЗаменить(НомерТелефона,"/", ",");
	НомерТелефона = СтрЗаменить(НомерТелефона,".", ",");	
	Возврат НомерТелефона;
КонецФункции	

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ СЕРВЕР

&НаСервере
Процедура ПроверитьНаличиеНовыхУчастников(ТекущийОбъект)
	
	НовыеУчастники.Очистить();
	
	Для Каждого СтрокаУчастника Из ТекущийОбъект.СторонниеЛица Цикл
		МассивСтрок = ТекущийОбъект.Ссылка.СторонниеЛица.НайтиСтроки(Новый Структура("Партнер,КонтактноеЛицо",СтрокаУчастника.Партнер,СтрокаУчастника.КонтактноеЛицо));
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока = НовыеУчастники.Добавить();
			НоваяСтрока.Партнер			= СтрокаУчастника.Партнер;
			НоваяСтрока.КонтактноеЛицо	= СтрокаУчастника.КонтактноеЛицо;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаУчастника Из ТекущийОбъект.СвоиЛица Цикл
		МассивСтрок = ТекущийОбъект.Ссылка.СвоиЛица.НайтиСтроки(Новый Структура("Лицо",СтрокаУчастника.Лицо));
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока = НовыеУчастники.Добавить();
			НоваяСтрока.Партнер			= Справочники.Партнеры.ПустаяСсылка();
			НоваяСтрока.КонтактноеЛицо	= СтрокаУчастника.Лицо;
		КонецЕсли;
	КонецЦикла;
	
	ИзмененСоставСтороннихУчастников = (НовыеУчастники.Количество() > 0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВремяНачалоВремяОкончание()
	
	ВремяНачалаРабочегоДня		= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный, "ВремяНачалаРабочегоДня");
	ВремяОкончанияРабочегоДня	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный, "ВремяОкончанияРабочегоДня");
	
	Если НЕ ЗначениеЗаполнено(ВремяНачалаРабочегоДня) Тогда
		ВремяНачалаРабочегоДня = Константы.CRM_НачалоРабочегоДня.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВремяОкончанияРабочегоДня) Тогда
		ВремяОкончанияРабочегоДня = Константы.CRM_КонецРабочегоДня.Получить();
	КонецЕсли;
	
	ВремяНачало	= ВремяНачалаРабочегоДня;
	ВремяОкончание	= ВремяОкончанияРабочегоДня;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокТрудозатрат()
	Если ЗначениеЗаполнено(ДатаНачало) Тогда
		ДатаПериодаНачало		= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
		ДатаПериодаОкончание	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
	Иначе
		ДатаПериодаНачало		= Объект.Дата;
		ДатаПериодаОкончание	= Объект.ОкончаниеСобытия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
		ПродолжительностьПериода = CRM_ОбщегоНазначенияСервер.ПолучитьПродолжительностьПериода(ДатаПериодаНачало, ДатаПериодаОкончание, Объект.Ответственный);
	Иначе
		ПродолжительностьПериода = CRM_ОбщегоНазначенияСервер.ПолучитьПродолжительностьПериода(ДатаПериодаНачало, ДатаПериодаОкончание, Объект.Ответственный);
	КонецЕсли;
	
	Если ПродолжительностьПериода.ВДнях = 0 Тогда
		Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Элементы.ДекорацияТрудозатраты.Заголовок = НСтр("ru = 'согласно графику работ ответственного (в указанном периоде нет рабочих часов)'");
		Иначе
			Элементы.ДекорацияТрудозатраты.Заголовок = НСтр("ru = 'согласно графику работ (в указанном периоде нет рабочих часов)'");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Элементы.ДекорацияТрудозатраты.Заголовок = НСтр("ru = 'согласно графику работ ответственного'");
		Иначе
			Элементы.ДекорацияТрудозатраты.Заголовок = НСтр("ru = 'согласно графику работ'");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Расчет трудозатрат
//
&НаСервере
Процедура РасчетТрудозатрат()		
	
	Если НЕ Объект.РедактироватьТрудозатратыВручную Тогда
		Если ЗначениеЗаполнено(ДатаНачало) Тогда
			ДатаВремяНачалоСобытия		= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
			ДатаВремяОкончаниеСобытия	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
		Иначе
			ДатаВремяНачалоСобытия		= Объект.Дата;
			ДатаВремяОкончаниеСобытия	= Объект.ОкончаниеСобытия;
		КонецЕсли;
	КонецЕсли;	
	
	// Новый алгоритм расчёта трудозатрат.
	// Сначала проверим, является ли документ событием Софтфона.
	Если Объект.сфпИдентификаторЗвонка > 0 Тогда
		// Рассчитываем трудозатраты просто как разность дат.
		ДанныеТрудозатрат = Новый Структура("ВМинутах,ВЧасах", 0, 0);		
		// Округление до минут
		НачПериода		= НачалоДня(ДатаВремяНачалоСобытия) + Цел((ДатаВремяНачалоСобытия - НачалоДня(ДатаВремяНачалоСобытия)) / 60) * 60;
		КонПериода		= НачалоДня(ДатаВремяОкончаниеСобытия) + Цел((ДатаВремяОкончаниеСобытия - НачалоДня(ДатаВремяОкончаниеСобытия)) / 60) * 60;
		
		ДанныеТрудозатрат.ВМинутах = Число(КонПериода - НачПериода) / 60;
		ДанныеТрудозатрат.ВЧасах = Окр(ДанныеТрудозатрат.ВМинутах / 60, 1);				
		
	Иначе		
		// Если это обычное событие, то необходимо предусмотреть 2 варианта: автоматический	расчёт и ручной.
		Если Объект.РедактироватьТрудозатратыВручную Тогда
			// Ручной расчёт трудозатрат, поле трудозатрат открыто, куда вручную заносим трудозатраты
			// см. ПеревестиТрудозатратыВЧасы().
			Возврат;
		Иначе
			// Автоматический расчёт трудозатрат, поле трудозатрат закрыто, "старый" алгоритм расчёта трудозатрат.
			
			Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
				ДанныеТрудозатрат = CRM_ОбщегоНазначенияСервер.ПолучитьТрудозатратыЗаПериод(ДатаВремяНачалоСобытия, ДатаВремяОкончаниеСобытия, Объект.Ответственный);
			Иначе
				ДанныеТрудозатрат = CRM_ОбщегоНазначенияСервер.ПолучитьТрудозатратыЗаПериод(ДатаВремяНачалоСобытия, ДатаВремяОкончаниеСобытия);
			КонецЕсли;				
			
		КонецЕсли;			
	КонецЕсли;	
	
	Попытка
		ЧасыТрудозатрат = ДанныеТрудозатрат.ВМинутах / 60;
	Исключение
		ЧасыТрудозатрат = 0;
	КонецПопытки;
	
	ЧасыТрудозатрат = Окр(ЧасыТрудозатрат, 2);
	
	Если Объект.Трудозатраты = ЧасыТрудозатрат Тогда
		УстановитьЗаголовокТрудозатрат();
		Возврат;
	КонецЕсли;
	Объект.Трудозатраты = ЧасыТрудозатрат;
	
	УстановитьЗаголовокТрудозатрат();		
	
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьКатегорииНаФорме()
	ПрефиксРеквизита = "ПолеВводаКатегория";
	МассивУдаляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	Пока Истина Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		Попытка
			ТестовыйРеквизит = ЭтотОбъект[ИмяРеквизита];
			МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизита);
			нИндекс = нИндекс + 1;
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	МассивКатегорий = Новый Массив();
	Если ЗначениеЗаполнено(Объект.ОсновнаяКатегория) Тогда
		МассивКатегорий.Добавить(Объект.ОсновнаяКатегория);
	КонецЕсли;
	Для Каждого СтрокаКатегория Из Объект.Категории Цикл
		Если ЗначениеЗаполнено(СтрокаКатегория.Категория) И МассивКатегорий.Найти(СтрокаКатегория.Категория) = Неопределено Тогда
			МассивКатегорий.Добавить(СтрокаКатегория.Категория);
		КонецЕсли;
	КонецЦикла;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.CRM_Категории");
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		РеквизитКатегория = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТиповКатегория);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитКатегория);
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхРеквизитов Цикл
		Попытка Элементы.Удалить(Элементы[УдаляемыйЭлемент]);
		Исключение КонецПопытки;
	КонецЦикла;
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	нИндекс = 1;
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		ЭтотОбъект[ИмяРеквизита] = ДобавляемаяКатегория;
		
		ЭлементКатегория = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаКатегории);
		ЭлементКатегория.Вид					= ВидПоляФормы.ПолеВвода;
		ЭлементКатегория.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементКатегория.ПутьКДанным			= ИмяРеквизита;
		ЭлементКатегория.РедактированиеТекста	= Ложь;
		ЭлементКатегория.КнопкаСпискаВыбора		= Ложь;
		ЭлементКатегория.КнопкаВыбора			= Ложь;
		ЭлементКатегория.КнопкаОчистки			= Ложь;
		ЭлементКатегория.КнопкаРегулирования	= Ложь;
		ЭлементКатегория.КнопкаОткрытия			= Ложь;
		ЭлементКатегория.КнопкаВыпадающегоСписка= Ложь;
		
		ЦветКатегории = Новый Цвет(ДобавляемаяКатегория.ЦветКрасный, ДобавляемаяКатегория.ЦветЗеленый, ДобавляемаяКатегория.ЦветСиний);
		ЭлементКатегория.ЦветФона = ЦветКатегории;
		ЭлементКатегория.ЦветТекста = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветКатегории);
		
		Если нИндекс = 1 Тогда
			ЭлементКатегория.Шрифт = Новый Шрифт(ЭлементКатегория.Шрифт,,, Истина);
		КонецЕсли;
		
		ЭлементКатегория.УстановитьДействие("НачалоВыбора",	"Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора");
		ЭлементКатегория.УстановитьДействие("Очистка",		"Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка");
		ЭлементКатегория.УстановитьДействие("Открытие",		"Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие");
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоманднуюПанельАтрибутыСобытия()
	// ПодменюПроектСобытия
	// ПодменюВидСобытия
	// ПодменюВходящееИсходящее
	// ПодменюВажность
	// ПодменюСостояниеСобытия
	
	ТаблицаСоответствияЭлементовУправленияСсылкам.Очистить();
	
	// ПодменюПроектСобытия
	Команда = Команды.Добавить("КнопкаПодменюПроектСобытия1");
	Команда.Действие	= "Подключаемый_КомандаОбработкаАтрибутаСобытияОбщая";
	Команда.Заголовок	= НСтр("ru = '[Проект не задан]'");
	Команда.Отображение	= ОтображениеКнопки.КартинкаИТекст;
	Кнопка = Элементы.Добавить("КнопкаПодменюПроект1", Тип("КнопкаФормы"), Элементы.ПодменюПроектСобытия);
	Кнопка.Заголовок	= НСтр("ru = '[Проект не задан]'");
	Кнопка.ИмяКоманды	= Команда.Имя;
	НоваяСтрока = ТаблицаСоответствияЭлементовУправленияСсылкам.Добавить();
	НоваяСтрока.Имя		= Кнопка.Имя;
	НоваяСтрока.Ссылка	= Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	ТекущийПользователь = ТекущийПользователь();
	Подразделение = ТекущийПользователь.Подразделение;
	
	CRM_ОбщегоНазначенияСервер.КоманднаяПанельАтрибутыСобытияЗаполнитьПодменюПроект(ЭтотОбъект, Подразделение);
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	Проекты.Ссылка,
	//	|	Проекты.Наименование КАК Наименование,
	//	|	Проекты.CRM_Подразделение
	//	|ИЗ
	//	|	Справочник.Проекты КАК Проекты
	//	|ГДЕ
	//	|	НЕ Проекты.ЭтоГруппа
	//	|	И НЕ Проекты.ПометкаУдаления
	//	|	И НЕ Проекты.Завершен";
	//Если ЗначениеЗаполнено(Подразделение) Тогда
	//	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	//	Запрос.Текст = Запрос.Текст + "
	//	|	И (Проекты.CRM_Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	//	|	ИЛИ Проекты.CRM_Подразделение В ИЕРАРХИИ (&Подразделение))";
	//Иначе
	//	Запрос.Текст = Запрос.Текст + "
	//	|	И Проекты.CRM_Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
	//КонецЕсли;
	//	Запрос.Текст = Запрос.Текст + "
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Наименование";
	//нИндекс = 2;
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ИмяЭлемента			= "КнопкаПодменюПроектСобытия" + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
	//	Команда				= Команды.Добавить(ИмяЭлемента);
	//	Команда.Действие	= "Подключаемый_КомандаОбработкаАтрибутаСобытияОбщая";
	//	Команда.Заголовок	= Выборка.Наименование;
	//	Команда.Отображение	= ОтображениеКнопки.КартинкаИТекст;
	//	Кнопка				= Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Элементы.ПодменюПроектСобытия);
	//	Кнопка.Заголовок	= Выборка.Наименование;
	//	Кнопка.ИмяКоманды	= Команда.Имя;
	//	НоваяСтрока			= ТаблицаСоответствияЭлементовУправленияСсылкам.Добавить();
	//	НоваяСтрока.Имя		= Кнопка.Имя;
	//	НоваяСтрока.Ссылка	= Выборка.Ссылка;
	//	нИндекс				= нИндекс + 1;
	//КонецЦикла;
	
	// ПодменюВидСобытия
	Для нИндекс = 0 По Перечисления.CRM_ВидыСобытий.Количество() - 1 Цикл
		ИмяЭлемента = "КнопкаПодменюВидСобытия" + Формат(нИндекс + 1, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		Кнопка = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Элементы.ПодменюВидСобытия);
		Кнопка.Заголовок	= Строка(Перечисления.CRM_ВидыСобытий[нИндекс]);
		
		Команда = Команды.Добавить(ИмяЭлемента);
		Команда.Действие	= "Подключаемый_КомандаОбработкаАтрибутаСобытияОбщая";
		Команда.Заголовок	= Кнопка.Заголовок;
		Команда.Отображение	= ОтображениеКнопки.КартинкаИТекст;
		
		Кнопка.ИмяКоманды	= Команда.Имя;
		
		НоваяСтрока = ТаблицаСоответствияЭлементовУправленияСсылкам.Добавить();
		НоваяСтрока.Имя		= Кнопка.Имя;
		НоваяСтрока.Ссылка	= Перечисления.CRM_ВидыСобытий[нИндекс];
	КонецЦикла;
	
	// ПодменюВходящееИсходящее
	Для нИндекс = 0 По Перечисления.CRM_ВходящееИсходящееСобытие.Количество() - 1 Цикл
		ИмяЭлемента = "КнопкаПодменюВходящееИсходящее" + Формат(нИндекс + 1, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		Кнопка = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Элементы.ПодменюВходящееИсходящее);
		Кнопка.Заголовок	= Строка(Перечисления.CRM_ВходящееИсходящееСобытие[нИндекс]);
		Кнопка.Картинка		= ПолучитьКартинкуДляОбъектов(ЭтотОбъект, "ВходящееИсходящее", Перечисления.CRM_ВходящееИсходящееСобытие[нИндекс]);
		
		Команда = Команды.Добавить(ИмяЭлемента);
		Команда.Действие	= "Подключаемый_КомандаОбработкаАтрибутаСобытияОбщая";
		Команда.Заголовок	= Кнопка.Заголовок;
		Команда.Отображение	= ОтображениеКнопки.КартинкаИТекст;
		
		Кнопка.ИмяКоманды	= Команда.Имя;
		
		НоваяСтрока = ТаблицаСоответствияЭлементовУправленияСсылкам.Добавить();
		НоваяСтрока.Имя		= Кнопка.Имя;
		НоваяСтрока.Ссылка	= Перечисления.CRM_ВходящееИсходящееСобытие[нИндекс];
	КонецЦикла;
	
	// ПодменюВажность
	Для нИндекс = 0 По Перечисления.ВариантыВажностиВзаимодействия.Количество() - 1 Цикл
		ИмяЭлемента = "КнопкаПодменюВажность" + Формат(нИндекс + 1, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		Кнопка = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Элементы.ПодменюВажность);
		Кнопка.Заголовок	= Строка(Перечисления.ВариантыВажностиВзаимодействия[нИндекс]);
		Кнопка.Картинка		= ПолучитьКартинкуДляОбъектов(ЭтотОбъект, "Важность", Перечисления.ВариантыВажностиВзаимодействия[нИндекс]);
		
		Команда = Команды.Добавить(ИмяЭлемента);
		Команда.Действие	= "Подключаемый_КомандаОбработкаАтрибутаСобытияОбщая";
		Команда.Заголовок	= Кнопка.Заголовок;
		Команда.Отображение	= ОтображениеКнопки.КартинкаИТекст;
		
		Кнопка.ИмяКоманды	= Команда.Имя;
		
		НоваяСтрока = ТаблицаСоответствияЭлементовУправленияСсылкам.Добавить();
		НоваяСтрока.Имя		= Кнопка.Имя;
		НоваяСтрока.Ссылка	= Перечисления.ВариантыВажностиВзаимодействия[нИндекс];
	КонецЦикла;
	
	// ПодменюСостояниеСобытия
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	CRM_СостоянияСобытий.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_СостоянияСобытий КАК CRM_СостоянияСобытий
	|ГДЕ
	|	(НЕ CRM_СостоянияСобытий.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_СостоянияСобытий.РеквизитДопУпорядочивания");
	Выборка = Запрос.Выполнить().Выбрать();
	нИндекс = 1;
	Пока Выборка.Следующий() Цикл
		ИмяЭлемента = "КнопкаПодменюСостояниеСобытия" + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		Кнопка = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Элементы.ПодменюСостояниеСобытия);
		Кнопка.Заголовок	= Строка(Выборка.Ссылка);
		Кнопка.Картинка		= ПолучитьКартинкуДляОбъектов(ЭтотОбъект, "СостояниеСобытия", Выборка.Ссылка);
		
		Команда = Команды.Добавить(ИмяЭлемента);
		Команда.Действие	= "Подключаемый_КомандаОбработкаАтрибутаСобытияОбщая";
		Команда.Заголовок	= Кнопка.Заголовок;
		Команда.Отображение	= ОтображениеКнопки.КартинкаИТекст;
		Команда.Подсказка   = "Состояние события";
		
		Кнопка.ИмяКоманды	= Команда.Имя;
		
		НоваяСтрока = ТаблицаСоответствияЭлементовУправленияСсылкам.Добавить();
		НоваяСтрока.Имя		= Кнопка.Имя;
		НоваяСтрока.Ссылка	= Выборка.Ссылка;
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормы()
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.Дата);
	ДатаНачало	= ДатаВремя.Дата;
	ВремяНачало	= ДатаВремя.Время;
	
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ОкончаниеСобытия);
	ДатаОкончание	= ДатаВремя.Дата;
	ВремяОкончание	= ДатаВремя.Время;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьПомещенияПоТексту(Текст)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Помещения.Ссылка
	               |ИЗ
	               |	Справочник.CRM_Помещения КАК CRM_Помещения
	               |ГДЕ
	               |	CRM_Помещения.Наименование ПОДОБНО &Текст
	               |	И (НЕ CRM_Помещения.ПометкаУдаления)";
				   
	Запрос.УстановитьПараметр("Текст", СокрЛП(Текст) + "%");
	
	Результат = Запрос.Выполнить();
	
	Таблица = Результат.Выгрузить();
	
	Возврат Таблица.ВыгрузитьКолонку("Ссылка");                            
	
КонецФункции

&НаСервере
Процедура ДобавитьУдалитьКомандуСозданияБизнесПроцесса()
	//
	//Если ИспользоватьБизнесПроцессы И ЗначениеЗаполнено(Объект.Проект)
	//И ЗначениеЗаполнено(Объект.Проект.CRM_КартаМаршрута) И (НЕ Объект.Проект.CRM_КартаМаршрута.СтартоватьВФоновомРежимеИзДокументов) Тогда
	//	CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект, Элементы.ГруппаКнопокСоздать, Объект.Проект.CRM_КартаМаршрута, Ложь);
	//	
	//Иначе
	//	CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект,,, Истина);
	//КонецЕсли;
	//
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаЕдиницаПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Содержание", CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
																?(ЗначениеЗаполнено(СтруктураДанные.Номенклатура.НаименованиеПолное), 
																СтруктураДанные.Номенклатура.НаименованиеПолное, СтруктураДанные.Номенклатура.Наименование), 
																СтруктураДанные.Характеристика, СтруктураДанные.Номенклатура.Артикул));
	
	//Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
	//	СтруктураДанные.Вставить("Коэффициент", 1);
	//Иначе
	//	СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
	//КонецЕсли;
	//
	//Цена = CRM_ОбщегоНазначенияСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
	//СтруктураДанные.Вставить("Цена", Цена);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаЕдиницаПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(Номенклатура)
	
	СписокЕдиницаИзмерения = Новый СписокЗначений();
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("СписокЕдиницаИзмерения", СписокЕдиницаИзмерения);
	
	СписокЕдиницаИзмерения.Добавить(Номенклатура.ЕдиницаИзмерения, Номенклатура.ЕдиницаИзмерения.Наименование + " (ед. хранения)");
	
	МассивОтбора = Новый Массив();
	МассивОтбора.Добавить(Номенклатура);
	МассивОтбора.Добавить(Номенклатура.НоменклатурнаяГруппа);
	
	Родитель = Номенклатура.НоменклатурнаяГруппа.Родитель;
	
	Пока Истина Цикл
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			Прервать;
		Иначе
			МассивОтбора.Добавить(Родитель);
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец В(&Номенклатура)";	
	
	Запрос.УстановитьПараметр("Номенклатура", МассивОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЕдиницаИзмерения.Добавить(Выборка.ЕдиницаИзмерения);
	КонецЦикла;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(Объект.Организация) Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		
		//Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		//	
		//	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
		//		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		//	Иначе
		//		СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
		//	КонецЕсли;	
		//	
		//	СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		//	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		//							  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		//							  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
		//	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		//	
		//КонецЦикла;	
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		
		//Если Объект.Организация.СтавкаНДСПоУмолчанию.НеОблагается Тогда
		//    СтавкаНДСПоУмолчанию = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСБезНДС();
		//Иначе
		//	СтавкаНДСПоУмолчанию = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
		//КонецЕсли;	
		
		//Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		//
		//	СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		//	СтрокаТабличнойЧасти.СуммаНДС = 0;
		//	
		//	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
		//	
		//КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

&НаСервере
Процедура ЗаполнитьВалютуИЦену()
	//Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
	//	 И ЗначениеЗаполнено(Объект.Партнер) Тогда
	//	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
	//		Объект.Договор = Объект.Партнер.ДоговорПоУмолчанию;
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено(Объект.Договор) Тогда
	//		Объект.ВалютаДокумента = Объект.Договор.ВалютаРасчетов;
	//		ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.Договор.ВалютаРасчетов));
	//		Объект.Курс      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
	//		Объект.Кратность = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
	//		Объект.ВидСкидкиНаценки = Объект.Договор.ВидСкидкиНаценки;
	//		Объект.ВидЦен = Объект.Договор.ВидЦен;
	//		Объект.СуммаВключаетНДС = Объект.ВидЦен.ЦенаВключаетНДС;
	//	КонецЕсли;
	//КонецЕсли;
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	//Договор = Объект.Договор;
	//ВалютаРасчетов = Объект.Договор.ВалютаРасчетов;
	//ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	//СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРегламентированногоУчета));
	//КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	//КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.Основание) 
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	ИначеЕсли CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(Объект.Организация) Тогда
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
	Иначе	
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
	КонецЕсли;
	
	//// Сформируем надпись цены и валюты.
	//УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	//СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, СуммаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
	//ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуГиперссылок()
	
	ТекстКоманда = Команды.Найти("_ВыполнитьЗадачу");
	Если ТекстКоманда = Неопределено Тогда
		НоваяКомандаФормы = Команды.Добавить("_ВыполнитьЗадачу");
		НоваяКомандаФормы.Заголовок					= "Выполнить";
		НоваяКомандаФормы.Подсказка					= "Отметить задачу как выполненную";
		НоваяКомандаФормы.Действие					= "Подключаемый_ВыполнитьЗадачу";
		//НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
	КонецЕсли;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	
	Попытка
		ЭтотОбъект["_ЛичнаяЗадача"] = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
		ЭтотОбъект["_ЛичнаяЗадачаСтрокой"] = "";
	Исключение
		ОписаниеТиповЗадача = Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя");
		НовыйРеквизит = Новый РеквизитФормы("_ЛичнаяЗадача", ОписаниеТиповЗадача);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповЗадача = Новый ОписаниеТипов("Строка");
		НовыйРеквизит = Новый РеквизитФормы("_ЛичнаяЗадачаСтрокой", ОписаниеТиповЗадача);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	КонецПопытки;
	
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	0 КАК ВидСсылки
	|ПОМЕСТИТЬ ЛичныеЗадачи
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	(НЕ ЗадачаИсполнителя.ПометкаУдаления)
	|	И ЗадачаИсполнителя.CRM_Личная
	|	И (НЕ ЗадачаИсполнителя.Выполнена)
	|	И ЗадачаИсполнителя.Предмет = &Предмет
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ЛичныеЗадачи.Ссылка,
	|	ЛичныеЗадачи.ВидСсылки
	|ИЗ
	|	ЛичныеЗадачи КАК ЛичныеЗадачи";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предмет",Объект.Ссылка);
	
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаб Из ТаблицаОбъектов Цикл
		Если СтрокаТаб.ВидСсылки = 0 Тогда
			ЭтотОбъект._ЛичнаяЗадача			= СтрокаТаб.Ссылка;
			ЭтотОбъект._ЛичнаяЗадачаСтрокой	= Строка(СтрокаТаб.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// Отрисуем гиперссылки
	// Гирепссылка на Задачу
	Если НЕ Элементы.Найти("_ЛичнаяЗадачаСтрокой") = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект._ЛичнаяЗадача) Тогда
			Элементы.Удалить(Элементы["_ЛичнаяЗадачаЗаголовок"]);
			Элементы.Удалить(Элементы["_ЛичнаяЗадачаСтрокой"]);
			Элементы.Удалить(Элементы["Кнопка_ВыполнитьЗадачу"]);
		КонецЕсли;
	Иначе
		
		Если ЗначениеЗаполнено(ЭтотОбъект._ЛичнаяЗадача) Тогда
			
			НовыйЭлемент = Элементы.Добавить("_ЛичнаяЗадачаЗаголовок", Тип("ДекорацияФормы"), Элементы.ГиперссылкаЗаголовок);
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Заголовок	= "Задача: ";
			
			НовыйЭлемент = Элементы.Добавить("_ЛичнаяЗадачаСтрокой", Тип("ДекорацияФормы"), Элементы.ЗначениеГиперСсылкиЗадача);
			НовыйЭлемент.Заголовок	= СокрЛП(ЭтотОбъект._ЛичнаяЗадача);
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Гиперссылка= Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ГиперссылкаНажатие");
			
			НовыйЭлемент = Элементы.Добавить("Кнопка_ВыполнитьЗадачу",Тип("КнопкаФормы"), Элементы.ЗначениеГиперСсылкиЗадача);
			НовыйЭлемент.ИмяКоманды			= "_ВыполнитьЗадачу";
			НовыйЭлемент.Заголовок			= "Выполнить";
			НовыйЭлемент.Картинка			= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйЭлемент.Отображение		= ОтображениеКнопки.КартинкаИТекст;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОповещений()
	
	Запрос = Новый Запрос;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("Пользователь"	, Объект.Ответственный);
		Запрос.УстановитьПараметр("Предмет"			, Объект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 5
		|	ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание) КАК Канал,
		|	CRM_Напоминания.СрокОповещения,
		|	CRM_Напоминания.Периодичность,
		|	0 КАК ПолеСортировки
		|ИЗ
		|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
		|ГДЕ
		|	CRM_Напоминания.Пользователь = &Пользователь
		|	И CRM_Напоминания.Предмет = &Предмет
		|	И CRM_Напоминания.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_Оповещения.Канал,
		|	CRM_Оповещения.СрокОповещения,
		|	CRM_Оповещения.Периодичность,
		|	1
		|ИЗ
		|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
		|ГДЕ
		|	CRM_Оповещения.Получатель = &Пользователь
		|	И CRM_Оповещения.Предмет = &Предмет
		|	И CRM_Оповещения.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеСортировки";
		
	Иначе
		ПризнакИзмененыОповещения = Истина;
		Запрос.УстановитьПараметр("Пользователь", Объект.Ответственный);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 5
		|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
		|	ВЫБОР
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.Напоминание
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.СМС
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
		|	КОНЕЦ КАК Канал,
		|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
		|ИЗ
		|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		|ГДЕ
		|	CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
		|	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
		|	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
		|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
		|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидОповещения";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если (Выборка.Канал = Перечисления.CRM_КаналыОповещений.Напоминание И НЕ ИспользоватьНапоминания)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.СМС И НЕ ИспользоватьОповещенияСМС)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта И НЕ ИспользоватьОповещенияЭлектроннаяПочта) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаб = _ТаблицаОповещений.Добавить();
		НоваяСтрокаТаб.Канал			= Выборка.Канал;
		НоваяСтрокаТаб.СрокОповещения	= Выборка.СрокОповещения;
		НоваяСтрокаТаб.Периодичность	= Выборка.Периодичность;
		
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Новый Структура("Организация,Дата",Объект.Организация,Объект.Дата));
		СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		СтруктураОповещения.Вставить("СрокОповещения",	НоваяСтрокаТаб.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	НоваяСтрокаТаб.Периодичность);
		СтруктураОповещения.Вставить("Получатель",		Объект.Ответственный);
		
		НоваяСтрокаТаб.ДатаОповещения = CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуОповещений()
	
	ИспользоватьНапоминания					= Константы.CRM_ИспользоватьНапоминания.Получить();
	ИспользоватьОповещенияСМС				= Константы.CRM_ИспользоватьОповещенияСМС.Получить();
	ИспользоватьОповещенияЭлектроннаяПочта	= Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить();
	
	ЗаполнитьТаблицуОповещений();
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	// Всего предполагается 5 полей оповещений, по аналогии с гуглом.
	Ид = 0;
	Пока НЕ Ид =5 Цикл
		Ид = Ид + 1;
		
		ОписаниеТиповКанал = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_КаналыОповещений");
		НовыйРеквизит = Новый РеквизитФормы("_КаналОповещения"+Строка(Ид), ОписаниеТиповКанал);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповСрок = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
		НовыйРеквизит = Новый РеквизитФормы("_СрокОповещения"+Строка(Ид), ОписаниеТиповСрок);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповПериод = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_ПериодичностьОповещений");
		НовыйРеквизит = Новый РеквизитФормы("_ПериодОповещения"+Строка(Ид), ОписаниеТиповПериод);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповСрок = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		НовыйРеквизит = Новый РеквизитФормы("_ДатаОповещения"+Строка(Ид), ОписаниеТиповСрок);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповСрок = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
		НовыйРеквизит = Новый РеквизитФормы("_Предупреждение"+Строка(Ид), ОписаниеТиповСрок);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		НоваяКомандаФормы = Команды.Добавить("УдалитьОповещение_"+Строка(Ид));
		НоваяКомандаФормы.Заголовок					= "Удалить";
		НоваяКомандаФормы.Подсказка					= "Удалить оповещение";
		НоваяКомандаФормы.Действие					= "Подключаемый_УдалитьОповещение";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
		
	КонецЦикла;
	
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		
		СтрокаТаб.ИмяПоля = "ПолеКанала_"+Строка(Ид);
		
		Элемент = Элементы.Добавить("ПолеКанала_"+Строка(Ид),Тип("ПолеФормы"),Элементы.КаналыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок					= Строка(Ид);
		Элемент.ПутьКДанным					="_КаналОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		Элемент.Подсказка					= НСтр("ru = 'Канал оповещения'");
		
		ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = СтрокаТаб.Канал;
		
		ЭлементГруппаСрока = Элементы.Добавить("ГруппаСрокаОповещения_"+Строка(Ид),Тип("ГруппаФормы"), Элементы.СрокиОповещений);
		ЭлементГруппаСрока.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппаСрока.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ЭлементГруппаСрока.ОтображатьЗаголовок 		= Ложь;
		ЭлементГруппаСрока.Отображение 		  		= ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппаСрока.РастягиватьПоГоризонтали = Ложь;
		
		Элемент = Элементы.Добавить("НадписьСрокаОповещения_"+Строка(Ид),Тип("ДекорацияФормы"), ЭлементГруппаСрока);
		Элемент.Вид 						= ВидДекорацииФормы.Надпись;
		Элемент.Заголовок					= НСтр("ru = 'за'");
		Элемент.Ширина						= 2;
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		
		Элемент = Элементы.Добавить("ПолеСрокаОповещения_"+Строка(Ид),Тип("ПолеФормы"), ЭлементГруппаСрока);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_СрокОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.КнопкаРегулирования			= Истина;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		Элемент.Подсказка					= НСтр("ru = 'Срок до начала события, за который нужно напомнить'");
		
		ЭтотОбъект["_СрокОповещения"+Строка(Ид)] = СтрокаТаб.СрокОповещения;
		
		Элемент = Элементы.Добавить("ПолеПериодаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ПериодыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ПериодОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.Ширина						= 5;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_ПериодОповещения"+Строка(Ид)] = СтрокаТаб.Периодичность;
		
		Элемент = Элементы.Добавить("ПолеДатыОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ДатыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ДатаОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.ТолькоПросмотр				= Истина;
		Элемент.Подсказка					= НСтр("ru = 'Планируемая дата оповещения'");
		
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = СтрокаТаб.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > ТекущаяДатаСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
		
		Элемент = Элементы.Добавить("ПолеПредупреждения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.Предупреждения);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_Предупреждение"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Истина;
		Элемент.ТолькоПросмотр				= Истина;
		
		ЭтотОбъект["_Предупреждение"+Строка(Ид)] = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > ТекущаяДатаСеанса(), "", СообщениеОНекорректностиВремениОповещения);
		Элементы["ПолеПредупреждения_"+Строка(Ид)].ЦветТекста = Новый Цвет(255,0,0);
		
		НовыйЭлемент = Элементы.Добавить("Кнопка_УдалитьОповещение_"+Строка(Ид),Тип("КнопкаФормы"), Элементы.УдалениеОповещений);
		НовыйЭлемент.ИмяКоманды			= "УдалитьОповещение_"+Строка(Ид);
		НовыйЭлемент.Заголовок			= "Удалить";
		НовыйЭлемент.Картинка			= БиблиотекаКартинок.Удалить;
		НовыйЭлемент.Отображение		= ОтображениеКнопки.Картинка;
		
	КонецЦикла;
	
	Если Ид < 5 Тогда
		НовыйЭлемент = Элементы.Добавить("_ДобавитьОповещение", Тип("ДекорацияФормы"), Элементы.КаналыОповещений);
		НовыйЭлемент.Заголовок	= "Добавить оповещение";
		НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Гиперссылка= Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ДобавитьОповещение");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДатыОповещений()
	
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		
		Ид = СтрЗаменить(СтрокаТаб.ИмяПоля, "ПолеКанала_", "");
		
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Новый Структура("Организация,Дата",Объект.Организация,CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало)));
		СтруктураОповещения.Вставить("ВидОповещения",	ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения",	СтрокаТаб.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	СтрокаТаб.Периодичность);
		СтруктураОповещения.Вставить("Получатель",		ТекущийПользователь());
		
		СтрокаТаб.ДатаОповещения	= CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = СтрокаТаб.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(СтрокаТаб.ДатаОповещения > ТекущаяДатаСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
		
		ЭтотОбъект["_Предупреждение"+Строка(Ид)] = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > ТекущаяДатаСеанса(), "", СообщениеОНекорректностиВремениОповещения);
		Элементы["ПолеПредупреждения_"+Строка(Ид)].ЦветТекста = Новый Цвет(255,0,0);
	КонецЦикла;
	
	ПризнакИзмененыОповещения = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОповещение()
	
	Ид = 0;
	Пока Ид < 5 Цикл
		Ид = Ид + 1;
		
		Если НЕ Элементы.Найти("ПолеКанала_"+Строка(Ид)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = _ТаблицаОповещений.Добавить();
		НоваяСтрока.Канал			= Перечисления.CRM_КаналыОповещений.Напоминание;
		НоваяСтрока.СрокОповещения	= 10;
		НоваяСтрока.Периодичность	= Перечисления.CRM_ПериодичностьОповещений.Минута;
		НоваяСтрока.ИмяПоля			= "ПолеКанала_"+Строка(Ид);
		НоваяСтрока.ДатаОповещения	= "ПолеКанала_"+Строка(Ид);
		
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Новый Структура("Организация,Дата",Объект.Организация,CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало)));
		СтруктураОповещения.Вставить("ВидОповещения",	ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения",	НоваяСтрока.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	НоваяСтрока.Периодичность);
		СтруктураОповещения.Вставить("Получатель",		ТекущийПользователь());
		
		НоваяСтрока.ДатаОповещения	= CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		
		Элемент = Элементы.Вставить("ПолеКанала_"+Строка(Ид),Тип("ПолеФормы"),Элементы.КаналыОповещений, Элементы._ДобавитьОповещение);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок					= Строка(Ид);
		Элемент.ПутьКДанным					= "_КаналОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		Если ИспользоватьНапоминания Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.Напоминание;
		ИначеЕсли ИспользоватьОповещенияЭлектроннаяПочта Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта;
		ИначеЕсли ИспользоватьОповещенияЭлектроннаяПочта Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.СМС;
		КонецЕсли;
		
		ЭлементГруппаСрока = Элементы.Добавить("ГруппаСрокаОповещения_"+Строка(Ид),Тип("ГруппаФормы"), Элементы.СрокиОповещений);
		ЭлементГруппаСрока.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппаСрока.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ЭлементГруппаСрока.ОтображатьЗаголовок 		= Ложь;
		ЭлементГруппаСрока.Отображение 		  		= ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппаСрока.РастягиватьПоГоризонтали = Ложь;
		
		Элемент = Элементы.Добавить("НадписьСрокаОповещения_"+Строка(Ид),Тип("ДекорацияФормы"), ЭлементГруппаСрока);
		Элемент.Вид 						= ВидДекорацииФормы.Надпись;
		Элемент.Заголовок					= НСтр("ru = 'за'");
		Элемент.Ширина						= 2;
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		
		Элемент = Элементы.Добавить("ПолеСрокаОповещения_"+Строка(Ид),Тип("ПолеФормы"), ЭлементГруппаСрока);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_СрокОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.КнопкаРегулирования			= Истина;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		Элемент.Подсказка					= НСтр("ru = 'Срок до начала события, за который нужно напомнить'");

		ЭтотОбъект["_СрокОповещения"+Строка(Ид)] = 10;
		
		Элемент = Элементы.Добавить("ПолеПериодаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ПериодыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ПериодОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.Ширина						= 5;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_ПериодОповещения"+Строка(Ид)] = Перечисления.CRM_ПериодичностьОповещений.Минута;
		
		НовыйЭлемент = Элементы.Добавить("Кнопка_УдалитьОповещение_"+Строка(Ид),Тип("КнопкаФормы"), Элементы.УдалениеОповещений);
		НовыйЭлемент.ИмяКоманды			= "УдалитьОповещение_"+Строка(Ид);
		НовыйЭлемент.Заголовок			= "Удалить";
		НовыйЭлемент.Картинка			= БиблиотекаКартинок.Удалить;
		НовыйЭлемент.Отображение		= ОтображениеКнопки.Картинка;
		
		Элемент = Элементы.Добавить("ПолеДатыОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ДатыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ДатаОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.ТолькоПросмотр				= Истина;
		Элемент.Подсказка					= НСтр("ru = 'Планируемая дата оповещения'");
		
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = НоваяСтрока.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > ТекущаяДатаСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
		
		Элемент = Элементы.Добавить("ПолеПредупреждения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.Предупреждения);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_Предупреждение"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Истина;
		Элемент.ТолькоПросмотр				= Истина;
		
		ЭтотОбъект["_Предупреждение"+Строка(Ид)] = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > ТекущаяДатаСеанса(), "", СообщениеОНекорректностиВремениОповещения);
		Элементы["ПолеПредупреждения_"+Строка(Ид)].ЦветТекста = Новый Цвет(255,0,0);
		
		Прервать;
	КонецЦикла;
	
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		ЭлементФормы = Элементы.Найти(СтрокаТаб.ИмяПоля);
		ЭлементФормы.Заголовок = Строка(Ид);
	КонецЦикла;
	
	Если _ТаблицаОповещений.Количество() = 5 Тогда
		Если НЕ Элементы.Найти("_ДобавитьОповещение") = Неопределено Тогда
			Элементы.Удалить(Элементы["_ДобавитьОповещение"]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОповещение(ИмяКоманды)
	
	ИдПолей = СтрЗаменить(ИмяКоманды, "УдалитьОповещение_","");
	
	Если НЕ Элементы.Найти("ПолеКанала_"+ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеКанала_"+ИдПолей]);
	КонецЕсли;
	
	Если НЕ Элементы.Найти("ПолеСрокаОповещения_"+ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеСрокаОповещения_"+ИдПолей]);
	КонецЕсли;
	
	Если НЕ Элементы.Найти("ПолеПериодаОповещения_"+ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеПериодаОповещения_"+ИдПолей]);
	КонецЕсли;
	
	Если НЕ Элементы.Найти("Кнопка_УдалитьОповещение_"+ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["Кнопка_УдалитьОповещение_"+ИдПолей]);
	КонецЕсли;
	
	Если НЕ Элементы.Найти("ПолеДатыОповещения_"+ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеДатыОповещения_"+ИдПолей]);
	КонецЕсли;
	
	Если НЕ Элементы.Найти("ПолеПредупреждения_"+ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеПредупреждения_"+ИдПолей]);
	КонецЕсли;
	
	Если НЕ Элементы.Найти("ГруппаСрокаОповещения_"+ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ГруппаСрокаОповещения_"+ИдПолей]);
	КонецЕсли;

	МассивСтрок = _ТаблицаОповещений.НайтиСтроки(Новый Структура("ИмяПоля","ПолеКанала_"+ИдПолей));
	
	Если МассивСтрок.Количество() > 0 Тогда
		_ТаблицаОповещений.Удалить(_ТаблицаОповещений.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		ЭлементФормы = Элементы.Найти(СтрокаТаб.ИмяПоля);
		ЭлементФормы.Заголовок = Строка(Ид);
	КонецЦикла;
	
	Если Ид < 5 Тогда
		Если Элементы.Найти("_ДобавитьОповещение") = Неопределено Тогда
			НовыйЭлемент = Элементы.Добавить("_ДобавитьОповещение", Тип("ДекорацияФормы"), Элементы.КаналыОповещений);
			НовыйЭлемент.Заголовок	= "Добавить оповещение";
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Гиперссылка= Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ДобавитьОповещение");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОповещения(Ид)
	
	МассивСтрок = _ТаблицаОповещений.НайтиСтроки(Новый Структура("ИмяПоля","ПолеКанала_"+Ид));
	Если МассивСтрок.Количество() > 0 Тогда
		МассивСтрок[0].Канал			= ЭтотОбъект["_КаналОповещения"+Ид];
		МассивСтрок[0].СрокОповещения	= ЭтотОбъект["_СрокОповещения"+Ид];
		МассивСтрок[0].Периодичность	= ЭтотОбъект["_ПериодОповещения"+Ид];
		МассивСтрок[0].ДатаОповещения	= ЭтотОбъект["_ДатаОповещения"+Строка(Ид)];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьЗапасыВХранилище(ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии) 
	
	СписокКолонок = "Номенклатура, Количество, ЕдиницаИзмерения, ЭтоГруппа";
	Если ЕстьХарактеристики Тогда
		СписокКолонок = СписокКолонок + ", Характеристика";
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(, СписокКолонок), УникальныйИдентификатор);
	
КонецФункции // ПоместитьЗапасыВХранилище()

// Функция получает список товаров из временного хранилища.
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ОбработанныеСтроки	= Новый Соответствие();
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		Если ЕстьХарактеристики Тогда
			СтруктураОтбора.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		КонецЕсли;
		
		Строки = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
		
		// Удалим строки, изменения в которых уже перенесены.
		
		Если Строки.Количество() > 0 Тогда
			
			СчетчикСтрок	= 0;
			Пока СчетчикСтрок <= (Строки.Количество() - 1) Цикл
				
				СтрокаТабличнойЧасти = ОбработанныеСтроки.Получить(Строки[СчетчикСтрок]);
				
				Если СтрокаТабличнойЧасти = Неопределено Тогда
					
					СчетчикСтрок = СчетчикСтрок + 1;
					
				Иначе
					
					Строки.Удалить(СчетчикСтрок);
					
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЕсли;
		
		Если Строки.Количество() > 0 Тогда
			
			СтрокаТабличнойЧасти = Строки[0];
			
			Если Не СтрокаТабличнойЧасти.ЭтоГруппа Тогда
				СтрокаТабличнойЧасти.Количество = СтрокаЗагрузки.Количество;
				СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
				
				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
					СтрокаТабличнойЧасти.Сумма = 0;
				ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0
						И СтрокаТабличнойЧасти.Количество <> 0 Тогда
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
				КонецЕсли;
				
				СтавкаНДС = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС), СтрокаТабличнойЧасти.СтавкаНДС.Ставка, 0);
		
				СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
												  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
												  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
				СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
				
				ОбработанныеСтроки.Вставить(СтрокаТабличнойЧасти, СтрокаЗагрузки);
			КонецЕсли;
			
		Иначе 
			НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
			
			ОбработанныеСтроки.Вставить(НоваяСтрока, СтрокаЗагрузки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

&НаСервере
Процедура ИзСтруктурыВТабличнуюЧасть(ИмяТЧ,Структура)
    НайденноеЗначение = Неопределено;
    Если Структура.Свойство(ИмяТЧ,НайденноеЗначение) Тогда
            НайденнаяТч = Неопределено;
    	Если Объект.Свойство(ИмяТЧ,НайденнаяТч) Тогда
            НайденнаяТч.Очистить();
        	Для каждого СтрокаМас Из НайденноеЗначение Цикл
            
            	СтрокаТЧ = НайденнаяТч.Добавить();
                ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаМас);
            
            КонецЦикла;
        КонецЕсли; 
    
    КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПервичныйИнтерес(Основание)

//	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
//			
//		Если ЗначениеЗаполнено(Основание) И ( ТипЗнч(Основание) = Тип("ДокументСсылка.CRM_СчетНаОплатуПокупателю") 
//			ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.УдалитьCRM_Событие"))
//			Тогда
//				
//				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Основание.Дата, Основание);
//				КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
//				ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
//				Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ (ЗначениеЗаполнено(КаналПервичногоИнтереса) 
//				И НЕ ТипПВХ(КаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"));
//			
//			КонецЕсли;
//		
//		Иначе
//			
//			Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
//			
//		КонецЕсли;

КонецПроцедуры

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеПартнерПриИзменении(Дата, ВалютаДокумента, Партнер, Организация)
	
	СтруктураДанные = Новый Структура;
	//СтруктураДанные.Вставить("ОсновноеКонтактноеЛицо",		Партнер.CRM_ОсновноеКонтактноеЛицо);
	//мДоговор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(Партнер, Организация);
	//СтруктураДанные.Вставить("Договор",						мДоговор);
	//СтруктураДанные.Вставить("ВалютаРасчетов",				мДоговор.ВалютаРасчетов);
	//СтруктураДанные.Вставить("ВалютаРасчетовКурсКратность",	
	//	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", мДоговор.ВалютаРасчетов)));
	//СтруктураДанные.Вставить("ВидСкидкиНаценки",			мДоговор.ВидСкидкиНаценки);
	//СтруктураДанные.Вставить("ВидЦен",						мДоговор.ВидЦен);
	//СтруктураДанные.Вставить("РасчетыВУсловныхЕдиницах",	мДоговор.РасчетыВУсловныхЕдиницах);
	//СтруктураДанные.Вставить("ВидСкидкиНаценки",			мДоговор.ВидСкидкиНаценки);
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПартнерПриИзменении()

&НаСервере
Процедура СформироватьОписаниеСобытия()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
		// 1. Выделим описание события.
		Позиция = Найти(Объект.ДокументОснование.Описание, "-------------------------------");
		Если Позиция > 0 Тогда
			Объект.Описание = СокрЛП(Лев(Объект.ДокументОснование.Описание, Позиция-1));
		Иначе
			Объект.Описание = Объект.ДокументОснование.Описание;
		КонецЕсли;
		
		// 2. Выделим описание истории.
		Если Позиция > 0 Тогда
			ОписаниеИстории = Сред(Объект.ДокументОснование.Описание, Позиция);
		Иначе
			ОписаниеИстории = "";
		КонецЕсли;
		
		// 3. Сформируем описание и историю для текущего события.
		Если ЗначениеЗаполнено(Объект.ДокументОснование.Результат) Тогда
			Объект.Описание = Объект.Описание + Символы.ПС + Символы.ПС
				+ "-------------------------------"+ НСтр("ru = 'Результат предыдущего события'") + " " + Объект.ДокументОснование.Номер+" от "+Объект.ДокументОснование.Дата+ " ------------------------------------" + Символы.ПС
				+ Объект.ДокументОснование.Результат + Символы.ПС + Символы.ПС
				+ НСтр("ru = 'Ответственный:'") + " " + Объект.ДокументОснование.Ответственный
				+ ?(ЗначениеЗаполнено(Объект.ДокументОснование.КонтактноеЛицо),Символы.ПС + НСтр("ru = 'Контактное лицо:'") + " " + Объект.ДокументОснование.КонтактноеЛицо,"");
			Если НЕ ОписаниеИстории = "" Тогда
				Объект.Описание = Объект.Описание + Символы.ПС + Символы.ПС + ОписаниеИстории;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСвязанныеЛичныеЗадачи()
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Предмет = &Предмет
	|	И ЗадачаИсполнителя.CRM_Личная
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	|");
	Запрос.УстановитьПараметр("Предмет", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

&НаСервере
Процедура ВыполнитьСвязанныеЛичныеЗадачи(МассивЗадач)
	Если ТипЗнч(МассивЗадач) <> Тип("Массив") Или МассивЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЗадачаСсылка Из МассивЗадач Цикл
		CRM_БизнесПроцессыИЗадачиВызовСервера.Выполнить_Задачу(ЗадачаСсылка, Истина);
	КонецЦикла;
	
	ЗаполнитьГруппуГиперссылок();
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьКЛПартнера(ТекПартнер)
	
	Возврат ТекПартнер.CRM_ОсновноеКонтактноеЛицо;
	
КонецФункции

// Процедура пытается найти контакт по ID CoMagic и заполнить в Событии.
//
&НаСервере
Процедура ЗаполнитьПартнераИКонтактноеЛицоИзCoMagic()
	
	Контакт = сфпСофтФонПроСервер.сфпНайтиКонтактПоIDИзCoMagic(сфпСтруктураВнешнихДанных.comagic_context.visitor_id);
	Если ЗначениеЗаполнено(Контакт) Тогда
		Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Объект.Партнер = Контакт.Владелец;
			Объект.КонтактноеЛицо = Контакт.Ссылка;
		Иначе
			Объект.Партнер = Контакт.Ссылка;
		КонецЕсли;					
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДССервер(ИмяТабличнойЧасти)
	//CRM_ОбщегоНазначенияСервер.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, ИмяТабличнойЧасти);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалютеСервер(ВалютаРасчетовПередИзменением, ИмяТабличнойЧасти)
	//CRM_ОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ВалютаРасчетовПередИзменением, ИмяТабличнойЧасти);
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенСервер(ИмяТабличнойЧасти, ПересчитатьСкидки)
	//CRM_ОбщегоНазначенияСервер.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, ИмяТабличнойЧасти, ПересчитатьСкидки);
КонецПроцедуры

&НаСервере
Процедура ПеренестиПрисоединенныеФайлы(СобытиеСсылка)
	
	Если _ЭтоНовоеСобытие Тогда
		СписокОтбора = Новый СписокЗначений;
		Для Каждого ТекущиеДанные Из СписокФайловПисьма Цикл
			Если ТекущиеДанные.Пометка Тогда
				СписокОтбора.Добавить(ТекущиеДанные.Значение);
			КонецЕсли;
		КонецЦикла;
		Если СписокОтбора.Количество() > 0 Тогда
			CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(Объект.ДокументОснование, СобытиеСсылка, СписокОтбора);
		КонецЕсли;
	КонецЕсли;
	
	СписокФайловПисьма.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,ИмяРеквизита)
	Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если Индекс <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	Если СтруктураДанные.Номенклатура.ЭтоГруппа Тогда
		СтруктураДанные.Вставить("ЭтоГруппа");
		СтруктураДанные.Вставить("Содержание", Строка(СтруктураДанные.Номенклатура));
		Возврат СтруктураДанные;
	КонецЕсли;
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	СтруктураДанные.Вставить("Содержание", CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
																?(ЗначениеЗаполнено(СтруктураДанные.Номенклатура.НаименованиеПолное), 
																СтруктураДанные.Номенклатура.НаименованиеПолное, СтруктураДанные.Номенклатура.Наименование), 
																СтруктураДанные.Характеристика, СтруктураДанные.Номенклатура.Артикул));
	
	//Если НЕ CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(СтруктураДанные.Организация) Тогда
	//	Если СтруктураДанные.Организация.СтавкаНДСПоУмолчанию.НеОблагается Тогда
	//		СтруктураДанные.Вставить("СтавкаНДС", CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСБезНДС());
	//	Иначе
	//		СтруктураДанные.Вставить("СтавкаНДС", CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль());
	//	КонецЕсли;	
	//															
	//ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
	//	СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	//Иначе
	//	СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	//КонецЕсли;
			
	//Если СтруктураДанные.Свойство("ВидЦен") Тогда
	//	Цена = CRM_ОбщегоНазначенияСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
	//	СтруктураДанные.Вставить("Цена", Цена);
	//Иначе
	//	СтруктураДанные.Вставить("Цена", 0);
	//КонецЕсли;
	//	
	//Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
	//	И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
	//	СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	//Иначе	
	//	СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	//КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ КЛИЕНТ

&НаКлиенте
Процедура ПодборМеста()
	ПараметрыСтруктура = Новый Структура();
	ПараметрыСтруктура.Вставить("Место",			Объект.Помещение);
	ПараметрыСтруктура.Вставить("ПериодНачало",		ДатаНачало + (ВремяНачало - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ПериодОкончание",	ДатаОкончание + (ВремяОкончание - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ВыбиратьПериоды");
	ПараметрыСтруктура.Вставить("ЗакрыватьФормуПослеВыбораПериодов");
	ПараметрыСтруктура.Вставить("ПоказыватьПериодДокумента");
	ПараметрыСтруктура.Вставить("ИнтервалШкалыВремени", 30);
	
	Форма = ПолучитьФорму("ОбщаяФорма.CRM_ПодборПользователейПоКалендарю", ПараметрыСтруктура, ЭтотОбъект);
	Если Форма <> Неопределено Тогда
		РезультатОткрытия = Форма.ОткрытьМодально();
		Если ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
			МинимальнаяВыбраннаяДата = Неопределено;
			МаксимальнаяВыбраннаяДата = Неопределено;
			Для Каждого ДобавляемоеПомещение Из РезультатОткрытия Цикл
				Если Не ЗначениеЗаполнено(ДобавляемоеПомещение.Помещение) Тогда
					Продолжить;
				КонецЕсли;
				
				Если МинимальнаяВыбраннаяДата = Неопределено Или МинимальнаяВыбраннаяДата > ДобавляемоеПомещение.НачалоПериода Тогда
					МинимальнаяВыбраннаяДата = ДобавляемоеПомещение.НачалоПериода;
				КонецЕсли;
				Если МаксимальнаяВыбраннаяДата = Неопределено Или МаксимальнаяВыбраннаяДата < ДобавляемоеПомещение.ОкончаниеПериода Тогда
					МаксимальнаяВыбраннаяДата = ДобавляемоеПомещение.ОкончаниеПериода;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
					Объект.Место = СокрЛП(ДобавляемоеПомещение.Помещение);
					Объект.Помещение = ДобавляемоеПомещение.Помещение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
				ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МинимальнаяВыбраннаяДата);
				ДатаНачало	= ДатаВремя.Дата;
				ВремяНачало	= ДатаВремя.Время;
				
				ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МаксимальнаяВыбраннаяДата);
				ДатаОкончание	= ДатаВремя.Дата;
				ВремяОкончание	= ДатаВремя.Время;
				
				ДатаНачалоПриИзменении(Неопределено);
				ВремяНачалоПриИзменении(Неопределено);
				ДатаОкончаниеПриИзменении(Неопределено);
				ВремяОкончаниеПриИзменении(Неопределено);
			КонецЕсли;
			
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборУчастников()
	МассивУчастников = Новый Массив();
	Для Каждого СтрокаТаблицы Из Объект.СвоиЛица Цикл
		Если	ЗначениеЗаполнено(СтрокаТаблицы.Лицо)
			И	ТипЗнч(СтрокаТаблицы.Лицо) = Тип("СправочникСсылка.Пользователи")
			И	МассивУчастников.Найти(СтрокаТаблицы.Лицо) = Неопределено Тогда
			МассивУчастников.Добавить(СтрокаТаблицы.Лицо);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыСтруктура = Новый Структура();
	ПараметрыСтруктура.Вставить("Пользователи",		МассивУчастников);
	ПараметрыСтруктура.Вставить("ПериодНачало",		ДатаНачало + (ВремяНачало - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ПериодОкончание",	ДатаОкончание + (ВремяОкончание - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ВыбиратьПериоды");
	ПараметрыСтруктура.Вставить("ЗакрыватьФормуПослеВыбораПериодов");
	ПараметрыСтруктура.Вставить("ПоказыватьПериодДокумента");
	ПараметрыСтруктура.Вставить("ИнтервалШкалыВремени", 30);
	
	Форма = ПолучитьФорму("ОбщаяФорма.CRM_ПодборПользователейПоКалендарю", ПараметрыСтруктура, ЭтотОбъект);
	Если Форма <> Неопределено Тогда
		РезультатОткрытия = Форма.ОткрытьМодально();
		Если ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
			МинимальнаяВыбраннаяДата = Неопределено;
			МаксимальнаяВыбраннаяДата = Неопределено;
			МассивВыбранныеПользователи = Новый Массив();
			Для Каждого ДобавляемыйПользователь Из РезультатОткрытия Цикл
				МассивВыбранныеПользователи.Добавить(ДобавляемыйПользователь.Пользователь);
				Если Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ДобавляемыйПользователь.Пользователь)).Количество() = 0 Тогда
					НоваяСтрока = Объект.СвоиЛица.Добавить();
					НоваяСтрока.Лицо = ДобавляемыйПользователь.Пользователь;
					
					ПриИзмененииЛица(НоваяСтрока);
				КонецЕсли;
				Если МинимальнаяВыбраннаяДата = Неопределено Или МинимальнаяВыбраннаяДата > ДобавляемыйПользователь.НачалоПериода Тогда
					МинимальнаяВыбраннаяДата = ДобавляемыйПользователь.НачалоПериода;
				КонецЕсли;
				Если МаксимальнаяВыбраннаяДата = Неопределено Или МаксимальнаяВыбраннаяДата < ДобавляемыйПользователь.ОкончаниеПериода Тогда
					МаксимальнаяВыбраннаяДата = ДобавляемыйПользователь.ОкончаниеПериода;
				КонецЕсли;
			КонецЦикла;
			Для Каждого УдаляемыйПользователь Из МассивУчастников Цикл
				Если МассивВыбранныеПользователи.Найти(УдаляемыйПользователь) = Неопределено Тогда
					НайденныеСтроки = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", УдаляемыйПользователь));
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						Объект.СвоиЛица.Удалить(НайденнаяСтрока);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
				ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МинимальнаяВыбраннаяДата);
				ДатаНачало	= ДатаВремя.Дата;
				ВремяНачало	= ДатаВремя.Время;
				
				ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МаксимальнаяВыбраннаяДата);
				ДатаОкончание	= ДатаВремя.Дата;
				ВремяОкончание	= ДатаВремя.Время;
				
				ДатаНачалоПриИзменении(Неопределено);
				ВремяНачалоПриИзменении(Неопределено);
				ДатаОкончаниеПриИзменении(Неопределено);
				ВремяОкончаниеПриИзменении(Неопределено);
			КонецЕсли;
			
			УчастникиПриИзменении(Элементы.СвоиЛица);
			
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Преобразует минуты в дробные доли часа.
//
&НаКлиенте
Процедура ПеревестиТрудозатратыВЧасы()
	
	ЧасыТрудозатрат   = Цел(ТрудозатратыЧасыМинуты);
	МинутыТрудозатрат = Окр((ТрудозатратыЧасыМинуты - ЧасыТрудозатрат)*5/3, 2);
	Если МинутыТрудозатрат < 1 Тогда
		Объект.Трудозатраты  = ЧасыТрудозатрат + МинутыТрудозатрат;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В поле ""Трудозатраты"" введены некорректные данные: число минут должно быть меньше 60!'"),, "ТрудозатратыЧасыМинуты");
		ПеревестиТрудозатратыВЧасыМинуты(ЭтотОбъект);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаКорректность()
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата начала должна быть заполнена!'"),, "ДатаНачало");
		Возврат Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ОкончаниеСобытия) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата окончания должна быть заполнена!'"),, "ДатаОкончание");
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.ОкончаниеСобытия < Объект.Дата Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата окончания должна больше даты начала!'"),, "ДатаОкончание");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПроверитьДатыОповещений()
	
	//ТекстВопроса = "";
	//
	//ИД = 1;
	//Всего = 0;
	//Для Каждого СтрокаОповещения Из _ТаблицаОповещений Цикл
	//	Если СтрокаОповещения.ДатаОповещения < CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса() Тогда
	//		Если НЕ ТекстВопроса = "" Тогда
	//			ТекстВопроса = ТекстВопроса + Символы.ПС;
	//		КонецЕсли;
	//		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Срок оповещения №'") + Строка(ИД) + НСтр("ru = ' меньше текущей даты.'");
	//		Всего = Всего + 1;
	//	КонецЕсли;
	//	ИД = ИД + 1;
	//КонецЦикла;
	//
	//Если НЕ ТекстВопроса = "" Тогда
	//	Возврат Ложь;
	//	
	//	ТекстВопроса = ТекстВопроса + Символы.ПС + ?(Всего=1,НСтр("ru = 'Это оповещение не будет создано.'"),НСтр("ru = 'Эти оповещения не будут созданы.'")) + " " + НСтр("ru = 'Продолжить?'");
	//	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	//	Если Ответ = КодВозвратаДиалога.Да Тогда
	//		Возврат Ложь;
	//	Иначе
	//		Возврат Истина;
	//	КонецЕсли;
	//Иначе
		Возврат Ложь;
	//КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНовыйЭлементРядСобытий()
	//Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда Возврат; КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	Ответ = Вопрос(НСтр(	"ru = 'Данные еще не записаны.
	//							|Установка признака периодичности возможна только после записи данных.
	//							|Данные будут записаны.'"), РежимДиалогаВопрос.ОКОтмена);
	//	//
	//	Если Ответ = КодВозвратаДиалога.ОК Тогда
	//		Записать();
	//		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//			Возврат;
	//		КонецЕсли;
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Объект.Дата				= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	//Объект.ОкончаниеСобытия	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
	//
	//ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ДатаНачала", НачалоДня(ДатаНачало)));
	//Форма = ПолучитьФорму("Справочник.CRM_РядыСобытий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	//
	//Форма.ВремяНачала	= ВремяНачало;
	//Форма.ВремяКонца	= ВремяОкончание;
	//
	//Форма.ОткрытьМодально();
	//Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
	//	Объект.РядСобытий = Форма.Объект.Ссылка;
	//	
	//	ВремяНачало		 = Форма.ВремяНачала;
	//	ВремяОкончание	 = Форма.ВремяКонца;
	//	
	//	ПризнакПериодическоеСобытиеИнициализация = Истина;
	//	ПризнакИзмененоРасписание = Истина;
	//	
	//	Объект.ИзмененоВРяде = Ложь;
	//		
	//	Записать();
	//	// Запрет обновления календаря в фоне после создания периодических событий (только через кнопку "обновить" в
	//	// календаре).
	//	Параметры.ОбновлятьКалендарь = 2;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРасписания()
	ДатаВремяНачала		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.Дата);
	ДатаВремяОкончания	= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ОкончаниеСобытия);
	
	ПараметрыФормы = Новый Структура("Ключ", Объект.РядСобытий);
	Форма = ПолучитьФорму("Справочник.CRM_РядыСобытий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
	Форма.ВремяНачала	= ДатаВремяНачала.Время;
	Форма.ВремяКонца	= ДатаВремяОкончания.Время;
	
	Если Не ЗначениеЗаполнено(Форма.Объект.ДатаНачала) Тогда
		Форма.Объект.ДатаНачала = НачалоДня(Объект.Дата);
	КонецЕсли;
	
	Форма.ОткрытьМодально();
	Если Форма.ДанныеБылиИзменены Тогда
		
		ВремяНачало		 = Форма.ВремяНачала;
		ВремяОкончание	 = Форма.ВремяКонца;
		
		ПризнакИзмененоРасписание = Истина;
		
		Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьДатуВремя(ПриоритетДатыНачала)
	Если ДатаНачало > ДатаОкончание Тогда
		Если ПриоритетДатыНачала Тогда
			ДатаОкончание = ДатаНачало;
		Иначе
			ДатаНачало = ДатаОкончание;
		КонецЕсли;
	КонецЕсли;
	Если НачалоДня(ДатаНачало) = НачалоДня(ДатаОкончание) И ВремяНачало > ВремяОкончание Тогда
		Если ПриоритетДатыНачала Тогда
			ВремяОкончание = ВремяНачало;
		Иначе
			ВремяНачало = ВремяОкончание;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	//// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	//СтруктураПараметров = Новый Структура();
	//
	//СтруктураПараметров.Вставить("ВидЦен",				 Объект.ВидЦен);
	//СтруктураПараметров.Вставить("ВалютаДокумента",		 Объект.ВалютаДокумента);
	//СтруктураПараметров.Вставить("СуммаВключаетНДС",	 Объект.СуммаВключаетНДС);
	//СтруктураПараметров.Вставить("Договор",				 Объект.Договор);
	//СтруктураПараметров.Вставить("Курс",				 Объект.Курс);
	//СтруктураПараметров.Вставить("Кратность",			 Объект.Кратность);
	//СтруктураПараметров.Вставить("Организация",			 Объект.Организация);
	//СтруктураПараметров.Вставить("ДатаДокумента",		 Объект.Дата);
	//СтруктураПараметров.Вставить("ПерезаполнитьЦены",	 Ложь);
	//СтруктураПараметров.Вставить("ПересчитатьЦены",		 ПересчитатьЦены);
	//СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	//
	//СтруктураПараметров.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	//
	//// 2. Открываем форму "Цены и Валюта".
	//СтруктураЦеныИВалюта = ОткрытьФормуМодально("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров);
	//
	//// 3. Перезаполняем табличную часть "Затраты" если были внесены изменения в форме "Цены и Валюта".
	//Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
	//	
	//	Объект.ВидЦен = СтруктураЦеныИВалюта.ВидЦен;
	//	Объект.ВидСкидкиНаценки = СтруктураЦеныИВалюта.ВидСкидки;
	//	Объект.ВалютаДокумента = СтруктураЦеныИВалюта.ВалютаДокумента;
	//	Объект.Курс = СтруктураЦеныИВалюта.КурсРасчетов;
	//	Объект.Кратность = СтруктураЦеныИВалюта.КратностьРасчетов;
	//	Объект.СуммаВключаетНДС = СтруктураЦеныИВалюта.СуммаВключаетНДС;
	//	
	//	// Пересчитываем цены по виду цен.
	//	Если СтруктураЦеныИВалюта.ПерезаполнитьЦены Тогда
	//		ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенСервер("Запасы", Истина);
	//	КонецЕсли;
	//	
	//	// Пересчитываем цены по валюте.
	//	Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
	//		И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда
	//		ПересчитатьЦеныТабличнойЧастиПоВалютеСервер(ВалютаРасчетовПередИзменением, "Запасы");
	//	КонецЕсли;
	//	
	//	// Пересчитываем сумму если изменился признак "Сумма включает НДС".
	//	Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
	//		И НЕ СтруктураЦеныИВалюта.СуммаВключаетНДС = СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
	//		ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДССервер("Запасы");
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, ВалютаДокумента, ВалютаРасчетов, Курс, СуммаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
	//ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	//
	//Для Каждого СтрокаТаблицы Из Объект.Запасы Цикл
	//	Если СтрокаТаблицы.ЭтоГруппа Тогда
	//		СтрокаТаблицы.ПроцентСкидкиНаценки = 0;
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Сумма = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0
		    И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

 // Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
									  
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура ОткрытьНаОснованииЭтогоОбъекта()
	
	СтруктураПараметрыФорм = Новый Структура();
	СтруктураПараметрыФорм.Вставить("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.УдалитьCRM_Событие.ФормаОбъекта", СтруктураПараметрыФорм, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайловДляКопирования(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		СписокФайловПисьма = Результат;
	Иначе
		СписокФайловПисьма.Очистить();
	КонецЕсли;		
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Событие только для чтения
	ТолькоПросмотр = Истина;
	
	_ЭтоНовоеСобытие			= Объект.Ссылка.Пустая();
	ИспользоватьБизнесПроцессы	= ПолучитьФункциональнуюОпцию("CRM_ИспользоватьБизнесПроцессы");
	
	Если Параметры.Свойство("СозданИзЭтапаСделки") Тогда
		_СозданИзЭтапаСделки = Параметры.СозданИзЭтапаСделки;
	Иначе
		_СозданИзЭтапаСделки = Ложь;
	КонецЕсли;
	
	//ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("СвязыватьСобытияСБизнесПроцессами");
	//Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
	//	_СвязыватьСобытияСБизнесПроцессами = ЗначениеНастройки;
	//КонецЕсли;
	
	Если Параметры.Свойство("СпозиционироватьсяНаРеквизите") И ЗначениеЗаполнено(Параметры.СпозиционироватьсяНаРеквизите) Тогда
		СпозиционироватьсяНаРеквизите = Параметры.СпозиционироватьсяНаРеквизите;
	КонецЕсли;
	
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	Если Параметры.Свойство("ЗначенияЗаполнения") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) 
		И Параметры.ЗначенияЗаполнения.Свойство("ВидСобытия") Тогда
		Объект.ВидСобытия = Параметры.ЗначенияЗаполнения.ВидСобытия;	
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначенияЗаполнения") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) 
		И Параметры.ЗначенияЗаполнения.Свойство("ВходящееИсходящее") Тогда
		Объект.ВходящееИсходящее = Параметры.ЗначенияЗаполнения.ВходящееИсходящее;	
	КонецЕсли;
	
	Если НЕ _ЭтоНовоеСобытие И (Объект.Периодическое ИЛИ Объект.ИзмененоВРяде) И НЕ ЗначениеЗаполнено(Объект.РядСобытий) Тогда
		Объект.Периодическое = Ложь;
		Объект.ИзмененоВРяде = Ложь;
	КонецЕсли;
	
	Если _ЭтоНовоеСобытие Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
					
		Если ЗначениеЗаполнено(Объект.Проект) Тогда
			ВыдаватьВопросНаСозданиеНового = Ложь;
		КонецЕсли;
		
		СформироватьОписаниеСобытия();
		
	КонецЕсли;
	
	ВыдаватьВопросНаСозданиеНового = ?(ПолучитьЗначениеРеквизита(Объект.СостояниеСобытия, "ТипСостояния") = ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Завершено"), Ложь, Истина);
	
	ДанныеЗаполнения = Новый Структура;
	Если  Параметры.Свойство("ДанныеЗаполнения",ДанныеЗаполнения) Тогда
		ЗаполнитьЗначенияСвойств(Объект,ДанныеЗаполнения,,"СторонниеЛица,СвоиЛица,Категории,Запасы");
		ИзСтруктурыВТабличнуюЧасть("СторонниеЛица",ДанныеЗаполнения);
		ИзСтруктурыВТабличнуюЧасть("СвоиЛица",ДанныеЗаполнения);
		ИзСтруктурыВТабличнуюЧасть("Запасы",ДанныеЗаполнения);
	КонецЕсли;
		
	ЗаполнитьВалютуИЦену();
	
	ПериодическоеСтароеЗначение = Объект.Периодическое;
	
	ЗаполнитьКоманднуюПанельАтрибутыСобытия();
	
	ОтрисоватьКатегорииНаФорме();
	
	ЗаполнитьГруппуГиперссылок();
	
	ЗаполнитьГруппуБизнесПроцесс();
	
	ЗаполнитьГруппуОповещений();
	
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
	// +БазаЗнаний
	// Создаем на форме элементы базы знаний.
	Если НЕ ТолькоПросмотр И CRM_БазаЗнанийСервер.бзЗаполнениеБазыЗнанийВФорме(ЭтотОбъект, Объект.Ссылка, "бзГруппаБазаЗнаний") Тогда
		// Заполняем таблицу используемых решений.
		бзЗаполнитьИспользуемыеРешения();
		// Установим доступность полнотекстового поиска.
		CRM_БазаЗнанийСервер.бзДоступностьПолнотекстовыйПоискСписокРешений(ЭтотОбъект);
		Элементы.бзГруппаБазаЗнаний.Видимость = Истина;
	КонецЕсли;	
	// -БазаЗнаний
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	СформироватьОписаниеКаналаИсточника();
	
	Если НЕ _ЭтоНовоеСобытие Тогда
		НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
	КонецЕсли;
	
	ЗаполнитьПервичныйИнтерес(Параметры.Основание);
	
	ЗаполнятьПервичныйИнтерес = Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить();
	
	Если _ЭтоНовоеСобытие Тогда
		РасчетТрудозатрат();
	КонецЕсли;
	
	ПеревестиТрудозатратыВЧасыМинуты(ЭтотОбъект);
	
	УстановитьВозможностьРедактированияЦен();
	
	CRM_ШаблоныОбъектов.СформироватьДополнительныеЭлементыФормы(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	CRM_ОбщегоНазначенияСервер.УстановитьКнопкиПечати(Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя(), ЭтотОбъект);
	
	Если	ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес")
		И	Не ЗначениеЗаполнено(Объект.Ссылка)
		И	ЗначениеЗаполнено(Объект.МаркетинговаяКампания)
		И	Не ЗначениеЗаполнено(КаналПервичногоИнтереса)
		И	ЗначениеЗаполнено(Объект.Партнер) Тогда
		//
		НайденнаяСсылка = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию(НСтр("ru = 'Акция'"), Истина);
		Если	ЗначениеЗаполнено(НайденнаяСсылка)
			И	НайденнаяСсылка.ТипЗначения.Типы().Количество() = 1
			И	НайденнаяСсылка.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			//
			КаналПервичногоИнтереса = НайденнаяСсылка;
			ИсточникПервичногоИнтереса = Объект.МаркетинговаяКампания;
		Иначе
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	КаналыРекламныхВоздействий.Ссылка КАК Ссылка,
			|	КаналыРекламныхВоздействий.ТипЗначения КАК ТипЗначения
			|ИЗ
			|	ПланВидовХарактеристик.КаналыРекламныхВоздействий КАК КаналыРекламныхВоздействий
			|ГДЕ
			|	НЕ КаналыРекламныхВоздействий.ПометкаУдаления
			|УПОРЯДОЧИТЬ ПО
			|	КаналыРекламныхВоздействий.Наименование ВОЗР
			|");
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ТипЗначения.Типы().Количество() = 1 И Выборка.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
					КаналПервичногоИнтереса = Выборка.Ссылка;
					ИсточникПервичногоИнтереса = Объект.МаркетинговаяКампания;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если _ЭтоНовоеСобытие И ЗначениеЗаполнено(Объект.ДокументОснование) 
	И ((ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"))
	ИЛИ (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"))) Тогда
		
		МассивФайлов = РаботаСФайламиСлужебныйВызовСервера.ПолучитьВсеПодчиненныеФайлы(Объект.ДокументОснование);
		
		Если МассивФайлов.Количество() > 0 Тогда
			СписокФайловПисьма.ЗагрузитьЗначения(МассивФайлов);
		КонецЕсли;
	КонецЕсли;
	
	Если _ЭтоНовоеСобытие И ЗначениеЗаполнено(Объект.ДокументОснование) 
		И (ТипЗнч(Объект.ДокументОснование) = Тип("СправочникСсылка.МаркетинговыеМероприятия")) Тогда
		
		ЗаполнятьАкцию = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ОкончаниеСобытия) Тогда
		Объект.ОкончаниеСобытия = Объект.Дата + 30 * 60;
	КонецЕсли;	
	 
	Элементы.Трудозатраты.ТолькоПросмотр		= НЕ Объект.РедактироватьТрудозатратыВручную;
	Элементы.ДекорацияТрудозатраты.Видимость	= НЕ Объект.РедактироватьТрудозатратыВручную;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
	//ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Отказ = Истина;
	Возврат;
	
	Если _ЭтоНовоеСобытие И Параметры.ОбновлятьКалендарь = 1 Тогда
		// Событие создали из календаря.
		Если НЕ Объект.Периодическое Тогда
			// Если это периодическое событие, то обновление календаря произойдёт через ОбработкаЗаписиНового().
			Параметры.ОбновлятьКалендарь = 0;
		КонецЕсли;
	КонецЕсли;		
	
	ДатаНовая				= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	ОкончаниеСобытияНовое	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
	
	ЗакрытьФормуПослеЗаписиСОповещением = Ложь;
	ПериодическоеСобытиеСпособИзмененияРяда = "";
	
	Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
		бПризнакИзмененоВРяде = Неопределено;
		Если Объект.Периодическое И НЕ Объект.ИзмененоВРяде И НЕ ПризнакПериодическоеСобытиеИнициализация Тогда
			// Проверка на то, что даты были изменены больше чем на день - для периодического события это означает установку
			// флага ИзмененоВРяде.
			ДатаСтарая				= Объект.Дата;
			ОкончаниеСобытияСтарое	= Объект.ОкончаниеСобытия;
			бИзмененаДатаНачала		= (НачалоДня(ДатаСтарая) <> НачалоДня(ДатаНовая));
			БИзмененаДатаОкончания	= (НачалоДня(ОкончаниеСобытияСтарое) <> НачалоДня(ОкончаниеСобытияНовое));
			Если бИзмененаДатаНачала ИЛИ БИзмененаДатаОкончания Тогда
				бПризнакИзмененоВРяде = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Дата				= ДатаНовая;
	Объект.ОкончаниеСобытия	= ОкончаниеСобытияНовое;
	
	Если НЕ ПроверитьНаКорректность() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
		Если НЕ ПризнакПериодическоеСобытиеИнициализация Тогда
			Если Объект.Периодическое Тогда
				Если НЕ Объект.ИзмененоВРяде И бПризнакИзмененоВРяде = Истина Тогда
					Объект.ИзмененоВРяде = Истина;
				КонецЕсли;
			ИначеЕсли ПериодическоеСтароеЗначение И НЕ Объект.ИзмененоВРяде Тогда
				// Снята пометка "Периодическое".
				ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда";
			КонецЕсли;
			Если Объект.Периодическое И НЕ Объект.ИзмененоВРяде Тогда
				Если ПризнакПериодическоеСобытиеИнициализация Тогда
					ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд";
				Иначе
					Если НЕ Модифицированность И НЕ ПризнакИзмененоРасписание Тогда
						ПериодическоеСобытиеСпособИзмененияРяда = "";
					Иначе
						ПараметрыФормы = Новый Структура("ДоступныеДействия", Новый Массив());
						Если НЕ ПризнакИзмененоРасписание Тогда
							ПараметрыФормы.ДоступныеДействия.Добавить("ТолькоТекущее");
						КонецЕсли;
						ПараметрыФормы.ДоступныеДействия.Добавить("ДоКонцаРяда");
						ПараметрыФормы.ДоступныеДействия.Добавить("ВесьРяд");
						Форма = ПолучитьФорму("Документ.УдалитьCRM_Событие.Форма.ФормаИзменениеПериодическогоСобытия", ПараметрыФормы, ЭтотОбъект);
						Форма.ОткрытьМодально();
						Если НЕ Форма.ПринятьИзменения Тогда
							Отказ = Истина;
							Возврат;
						Иначе
							ПериодическоеСобытиеСпособИзмененияРяда = Форма.СпособИзмененияРяда;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроверитьДатыОповещений() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	//Если ПризнакОтменыСобытия Или ПризнакЗавершенияСобытия Тогда
	//	СвязанныеЛичныеЗадачи = ПолучитьСвязанныеЛичныеЗадачи();
	//	Если СвязанныеЛичныеЗадачи.Количество() > 0 Тогда
	//		ТекстВопроса = НСтр("ru = 'Выполнить связанные личные задачи?'");
	//		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	//		Если Ответ = КодВозвратаДиалога.Да Тогда
	//			ВыполнитьСвязанныеЛичныеЗадачи(СвязанныеЛичныеЗадачи);
	//			Оповестить("Запись_ЗадачаИсполнителя", Новый Структура("Выполнена, ОбновлятьКалендарь", Истина, 0), СвязанныеЛичныеЗадачи);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Объект.Ссылка, Параметры.ОбновлятьКалендарь), ЭтотОбъект);		
	//
	//Если ЗакрытьФормуПослеЗаписиСОповещением Тогда
	//	Модифицированность = Ложь;
	//	Если Открыта() Тогда
	//		Закрыть();
	//	КонецЕсли;
	//	Возврат;
	//КонецЕсли;
	//
	//ПериодическоеСтароеЗначение = Объект.Периодическое;
	//НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	//Завершено = ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Завершено");
	//Если ВыдаватьВопросНаСозданиеНового И ПолучитьЗначениеРеквизита(Объект.СостояниеСобытия, "ТипСостояния") = Завершено  
	//    Тогда
	//	ТекстВопроса = "Запланировать следующее событие?";
	//	Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	//    Если Ответ = КодВозвратаДиалога.Да Тогда 
	//       ОткрытьНаОснованииЭтогоОбъекта();
	//	КонецЕсли;	
	//КонецЕсли;
	//
	//// Посмотрим, надо ли оповестить участников события об изменениях.
	//Если ПризнакНовогоСобытия ИЛИ ПризнакИзмененаДата ИЛИ ПризнакОтменыСобытия ИЛИ ПризнакЗавершенияСобытия
	//ИЛИ ИзмененСоставСтороннихУчастников ИЛИ ПризнакИзмененоМестоСобытия Тогда
	//	
	//	Если Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ЛичнаяВстреча") И 
	//	ПроверитьНаличиеУчастниковСобытия() Тогда
	//		
	//		СтруктураИзменений = Новый Структура;
	//		СтруктураИзменений.Вставить("Новое"			,ПризнакНовогоСобытия);
	//		СтруктураИзменений.Вставить("ИзмененаДата"	,ПризнакИзмененаДата);
	//		СтруктураИзменений.Вставить("ИзмененоМесто"	,ПризнакИзмененоМестоСобытия);
	//		СтруктураИзменений.Вставить("Отменено"		,ПризнакОтменыСобытия);
	//		СтруктураИзменений.Вставить("Завершено"		,ПризнакЗавершенияСобытия);
	//		СтруктураИзменений.Вставить("ИзмененСостав"	,ИзмененСоставСтороннихУчастников);
	//		
	//		СтруктураОповещения = Новый Структура;
	//		СтруктураОповещения.Вставить("Событие"			,Объект.Ссылка);
	//		СтруктураОповещения.Вставить("НовыеУчастники"	,НовыеУчастники);
	//		СтруктураОповещения.Вставить("Состояние"		,СтруктураИзменений);
	//		
	//		CRM_ОповещенияСервер.ОповеститьУчастниковСобытия(СтруктураОповещения);
	//	КонецЕсли;
	//	
	//	ПризнакНовогоСобытия				= Ложь;
	//	ПризнакИзмененаДата					= Ложь;
	//	ПризнакИзмененоМестоСобытия			= Ложь;
	//	ПризнакОтменыСобытия				= Ложь;
	//	//ПризнакЗавершенияСобытия			= Ложь;
	//	ИзмененСоставСтороннихУчастников	= Ложь;
	//КонецЕсли;
	//
	//ДоступностьПервичногоИнтереса();
	//// +СофтФон
	//Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() 
	//	И (Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок")) Тогда
	//	//сфпСофтФонПроКлиент.ИзменениеМаршрутизацииПриЗаписиДокумента(Объект.Ссылка, Объект.Ответственный);
	//	Если ЗначениеЗаполнено(Объект.ДокументОснование) 
	//		И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Телемаркетинг")) Тогда
	//		СтруктураОповещения = Новый Структура;
	//		СтруктураОповещения.Вставить("Основание",		Объект.ДокументОснование);
	//		СтруктураОповещения.Вставить("Партнер",			Объект.Партнер);
	//		СтруктураОповещения.Вставить("КонтактноеЛицо",	Объект.КонтактноеЛицо);
	//		СтруктураОповещения.Вставить("НомерТелефона",	Объект.Место);
	//		СтруктураОповещения.Вставить("Событие",			Объект.Ссылка);
	//		СтруктураОповещения.Вставить("ПартнерСтрокой",	Объект.Описание);
	//		Оповестить("СофтФон_ЗаписьСобытия", СтруктураОповещения);
	//	КонецЕсли;
	//	Если НЕ (сфпСтруктураВнешнихДанных = Неопределено) Тогда
	//		СтруктураДанных = Новый Структура;
	//		СтруктураДанных.Вставить("КлючевыеСлова", сфпСтруктураВнешнихДанных.comagic_context.search_query);
	//		СтруктураДанных.Вставить("Канал", КаналПервичногоИнтереса);
	//		СтруктураДанных.Вставить("Источник", ИсточникПервичногоИнтереса);
	//		СтруктураДанных.Вставить("ИД", сфпСтруктураВнешнихДанных.comagic_context.visitor_id);
	//		Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
	//			СтруктураДанных.Вставить("Контакт", Объект.КонтактноеЛицо);
	//			сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.КонтактноеЛицо, СтруктураДанных.ИД);
	//		Иначе
	//			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
	//				сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.Партнер, СтруктураДанных.ИД);
	//			КонецЕсли;	
	//			СтруктураДанных.Вставить("Контакт", Объект.Партнер);
	//		КонецЕсли;
	//		сфпСофтФонПроСервер.сфпЗаписатьКлючевыеСловаСобытия(Объект.Ссылка, СтруктураДанных);	
	//		УправлениеВидимостьюКнопокОткрытьВCoMagic();		
	//	КонецЕсли;	
	//КонецЕсли;
	//// -СофтФон
	//Если НЕ _ЭтоВведенныйНаОсновании И _СвязыватьСобытияСБизнесПроцессами
	//И НЕ _ЕстьСвязьСБизнесПроцессом И ЗначениеЗаполнено(_БизнесПроцесс) Тогда
	//	СвязатьСобытиеСБизнесПроцессом();
	//	_ЕстьСвязьСБизнесПроцессом = Истина;
	//	УстановитьСвойстваЭлементовГруппыБизнесПроцесс();
	//ИначеЕсли НЕ _ЭтоВведенныйНаОсновании И НЕ _ЕстьСвязьСБизнесПроцессом И ПризнакЗавершенияСобытия И НЕ _СозданИзЭтапаСделки Тогда
	//	
	//	НовыйБизнесПроцесс = CRM_БизнесПроцессыСервер.ПроверитьНаличиеПроектаСтартоватьБизнесПроцесс(Объект.Ссылка, Объект.Проект);
	//	
	//	Если НЕ НовыйБизнесПроцесс = Неопределено Тогда
	//		Если ТипЗнч(НовыйБизнесПроцесс) = Тип("Структура") Тогда
	//			_БизнесПроцессСтр	= СформироватьПредставлениеБизнесПроцесса(НовыйБизнесПроцесс.БизнесПроцесс);
	//			_БизнесПроцесс		= НовыйБизнесПроцесс.БизнесПроцесс;
	//			_Задача			= НовыйБизнесПроцесс.Задача;
	//			
	//			ПриИзмененииЗадачи();
	//			
	//			СвязатьСобытиеСБизнесПроцессом();
	//			_ЕстьСвязьСБизнесПроцессом = Истина;
	//			
	//			УстановитьСвойстваЭлементовГруппыБизнесПроцесс();
	//		Иначе
	//			_СписокВведенныхНаОсновании.Добавить(НовыйБизнесПроцесс);
	//			
	//			_БизнесПроцесс				= НовыйБизнесПроцесс;
	//			_ЭтоВведенныйНаОсновании	= Истина;
	//			_Задача					    = ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");
	//			_СкрытьПоказатьИнформациюОЗадачеПометка = Ложь;
	//			Элементы.СкрытьПоказатьИнформациюОЗадаче.Пометка = Ложь;
	//			
	//			_БизнесПроцессСтр = СформироватьПредставлениеБизнесПроцесса(НовыйБизнесПроцесс);
	//			
	//			НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	//			УстановитьСвойстваЭлементовГруппыБизнесПроцесс();
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ПризнакЗавершенияСобытия = Ложь;
	//
	//Если ЗначениеЗаполнено(Объект.ДокументОснование)
	//И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
	//	
	//	ПроверитьТипОснования();
	//	
	//КонецЕсли;
	//
	//Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьПервичныйИнтерес(ТекущийОбъект);
	
	ТаблицаНастроекОповещений = ДанныеФормыВЗначение(_ТаблицаОповещений, Тип("ТаблицаЗначений"));
	
	СтруктураИзменений = Новый Структура;
	СтруктураИзменений.Вставить("Новое"			,ПризнакНовогоСобытия);
	СтруктураИзменений.Вставить("ИзмененаДата"	,ПризнакИзмененаДата);
	СтруктураИзменений.Вставить("ИзмененоМесто"	,ПризнакИзмененоМестоСобытия);
	СтруктураИзменений.Вставить("Отменено"		,ПризнакОтменыСобытия);
	СтруктураИзменений.Вставить("Завершено"		,ПризнакЗавершенияСобытия);
	СтруктураИзменений.Вставить("ИзмененСостав"	,ИзмененСоставСтороннихУчастников);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаНастроекОповещений",					ТаблицаНастроекОповещений);
	СтруктураДанных.Вставить("ЭтоНовоеСобытие",								ПризнакНовогоСобытия);
	СтруктураДанных.Вставить("ИзмененСоставУчастников",						ИзмененСоставУчастников);
	СтруктураДанных.Вставить("ПризнакПериодическоеСобытиеИнициализация",	ПризнакПериодическоеСобытиеИнициализация);
	СтруктураДанных.Вставить("Пользователь",								ТекущийОбъект.Ответственный);
	СтруктураДанных.Вставить("Состояние",									СтруктураИзменений);
	
	АдресНастроек = ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
		
	Если ПризнакИзмененыОповещения ИЛИ ПризнакПериодическоеСобытиеИнициализация ИЛИ ИзмененСоставУчастников Тогда
		// Тут надо формировать записи оповещений.
		CRM_ОповещенияСервер.СформироватьОповещенияПоСобытию(ТекущийОбъект.Ссылка,АдресНастроек);
		
		ИзмененСоставУчастников		= Ложь;
		ПризнакИзмененыОповещения	= Ложь;
	КонецЕсли;
	
	Если ПризнакЗавершенияСобытия ИЛИ ПризнакОтменыСобытия Тогда
		// Раз событие завершено, удаляем все оповещения по этому события, для всех участников этого события.
		CRM_ОповещенияСервер.УдалитьОповещения(ТекущийОбъект.Ссылка);
		
	КонецЕсли;
	
	Если _ЭтоНовоеСобытие Тогда
		ПеренестиПрисоединенныеФайлы(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	_ЭтоНовоеСобытие = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	РасчетТрудозатрат();
	ПеревестиТрудозатратыВЧасыМинуты(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) Тогда
		Если (ПризнакПериодическоеСобытиеИнициализация Или ПризнакИзмененоРасписание) И ТекущийОбъект.Периодическое Тогда
			Если ПризнакПериодическоеСобытиеИнициализация Тогда
				ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд";
			КонецЕсли;
			ТекущийОбъект.мНеУстанавливатьПризнакИзмененоВРяде		= Истина;
			ТекущийОбъект.мНеПроверятьНаКорректностьПриЗаписи		= Истина;
			
			Если ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд" Тогда
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.РядСобытий.ДатаНачала, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			ИначеЕсли ПериодическоеСобытиеСпособИзмененияРяда = "ДоКонцаРяда" Тогда
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.Дата, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			Иначе
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.РядСобытий.ДатаНачала, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			КонецЕсли;
			
			Если МассивДатРасписания.Количество() = 0 Тогда
				Если ПризнакПериодическоеСобытиеИнициализация Или ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд" Тогда
					Отказ = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Расписание периодического события настроенно некорректно - в указанный период не попадает ни одного события!'"), СтатусСообщения.Важное);
					НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
					Возврат;
				КонецЕсли;
			Иначе
				ДатаВремяПервоеСобытие = МассивДатРасписания[0];
				ТекущийОбъект.Дата = НачалоДня(ДатаВремяПервоеСобытие) + (ТекущийОбъект.Дата - НачалоДня(ТекущийОбъект.Дата)) ;
				ТекущийОбъект.ОкончаниеСобытия = НачалоДня(ДатаВремяПервоеСобытие) + (ТекущийОбъект.ОкончаниеСобытия - НачалоДня(ТекущийОбъект.ОкончаниеСобытия));
			КонецЕсли;
		Иначе
			Если ТекущийОбъект.Периодическое И Не ТекущийОбъект.ИзмененоВРяде Тогда
				Если	ПериодическоеСобытиеСпособИзмененияРяда = "ДоКонцаРяда"
					ИЛИ	ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд"
					ИЛИ	ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда" Тогда
					//
					ТекущийОбъект.мНеУстанавливатьПризнакИзмененоВРяде		= Истина;
					ТекущийОбъект.мНеПроверятьНаКорректностьПриЗаписи		= Истина;
					
				ИначеЕсли Не Модифицированность Тогда
					ТекущийОбъект.мНеУстанавливатьПризнакИзмененоВРяде		= Истина;
					ТекущийОбъект.мНеПроверятьНаКорректностьПриЗаписи		= Истина;
					
				КонецЕсли;
			ИначеЕсли Не ТекущийОбъект.Периодическое И ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) И Не ТекущийОбъект.ИзмененоВРяде Тогда
				Если ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда" Тогда
					ТекущийОбъект.мНеУстанавливатьПризнакИзмененоВРяде		= Истина;
					ТекущийОбъект.мНеПроверятьНаКорректностьПриЗаписи		= Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Признаки. по которым в дальнейшем после записи будем определять, надо ли
	// оповестить участников события.
	
	ЭтоНовыйОбъект = ТекущийОбъект.Ссылка.Пустая();
	ПризнакНовогоСобытия = ЭтоНовыйОбъект;
	
	Если ТекущийОбъект.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча Тогда
		
		Если НЕ ЭтоНовыйОбъект Тогда
			Если НЕ ТекущийОбъект.Дата = ТекущийОбъект.Ссылка.Дата ИЛИ НЕ ТекущийОбъект.ОкончаниеСобытия = ТекущийОбъект.Ссылка.ОкончаниеСобытия Тогда
				ПризнакИзмененаДата = Истина;
			КонецЕсли;
			
			Если НЕ ТекущийОбъект.Место = ТекущийОбъект.Ссылка.Место Тогда
				ПризнакИзмененоМестоСобытия = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (НЕ ТекущийОбъект.СостояниеСобытия = ТекущийОбъект.Ссылка.СостояниеСобытия)
		И ПолучитьЗначениеРеквизита(ТекущийОбъект.СостояниеСобытия, "ТипСостояния") = ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Отменено") Тогда
		ПризнакОтменыСобытия = Истина;
	КонецЕсли;
	
	Если (НЕ ТекущийОбъект.СостояниеСобытия = ТекущийОбъект.Ссылка.СостояниеСобытия)
		И ПолучитьЗначениеРеквизита(ТекущийОбъект.СостояниеСобытия, "ТипСостояния") = ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Завершено") Тогда
		ПризнакЗавершенияСобытия = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ (Год(ТекущийОбъект.Дата) = Год(ТекущийОбъект.Ссылка.Дата)) Тогда
		ТекущийОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		ПроверитьНаличиеНовыхУчастников(ТекущийОбъект);
		
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбъектЗаписанПользователем");	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) Тогда
		Если ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда" Тогда
			// Если удаляются все события ряда, форма должна быть закрыта после записи, т.к. объекта, связанного с формой, уже
			// не будет.
			ЗакрытьФормуПослеЗаписиСОповещением = Истина;
			// Объект нужно разблокировать т.к. он будет удаляться программно.
			Попытка ТекущийОбъект.Разблокировать();
			Исключение КонецПопытки;
			CRM_МероприятияСервер.ИзменитьСобытияРяда(ТекущийОбъект.Ссылка, ПериодическоеСобытиеСпособИзмененияРяда, ТекущийОбъект.Дата,,АдресНастроек);
		ИначеЕсли ТекущийОбъект.Периодическое И Не ТекущийОбъект.ИзмененоВРяде И ЗначениеЗаполнено(ПериодическоеСобытиеСпособИзмененияРяда) Тогда
			Если ПризнакИзмененоРасписание Тогда
				//ЗакрытьФормуПослеЗаписиСОповещением = Истина;
				// Объект нужно разблокировать т.к. он будет изменяться программно.
				Попытка ТекущийОбъект.Разблокировать();
				Исключение КонецПопытки;
			КонецЕсли;
			CRM_МероприятияСервер.ИзменитьСобытияРяда(ТекущийОбъект.Ссылка, ПериодическоеСобытиеСпособИзмененияРяда, ТекущийОбъект.Дата,,АдресНастроек);
			
		КонецЕсли;
		ПериодическоеСобытиеСпособИзмененияРяда = "";
		ПризнакПериодическоеСобытиеИнициализация = Ложь;
		ПризнакИзмененоРасписание = Ложь;
	КонецЕсли;
	
	Если CRM_МероприятияСервер.ИзмененияСобытияЗапрещены(Объект.Ссылка) Тогда
		ЗаблокироватьСобытиеОтИзменения();
	КонецЕсли;
		
	// +БазаЗнаний
	// Сохраняем используемые решения.
	Если НЕ (Элементы.Найти("бзРешения") = Неопределено) Тогда
		бзСохранитьИспользуемыеРешения();
	КонецЕсли;
	// -БазаЗнаний	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ПроверкаЗаполнения(ПроверяемыеРеквизиты);
	CRM_ХранилищеНастроек.Сохранить("_CRM_СобытияТекущиеДопРеквизитовОбязательныхДляЗаполнения_", "", СписокРеквизитовОбязательныхДляЗаполнения.ВыгрузитьЗначения());
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") ИЛИ ТипЗнч(НовыйОбъект) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		ЗаполнитьГруппуГиперссылок();
		//ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
		Завершено = ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Завершено");
		Отменено = ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Отменено");
		Если ТипЗнч(НовыйОбъект) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
			
			_СписокВведенныхНаОсновании.Добавить(НовыйОбъект);
			
			_БизнесПроцесс				= НовыйОбъект;
			_ЭтоВведенныйНаОсновании	= Истина;
			_Задача						= ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");
			_СкрытьПоказатьИнформациюОЗадачеПометка = Ложь;
			Элементы.СкрытьПоказатьИнформациюОЗадаче.Пометка = Ложь;
			
			_БизнесПроцессСтр = СформироватьПредставлениеБизнесПроцесса(НовыйОбъект);
			
			Если НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
				Объект.Проект = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НовыйОбъект, "Проект");
				ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
				Модифицированность	= Истина;
			КонецЕсли;
			
			Если ПолучитьЗначениеРеквизита(Объект.СостояниеСобытия, "ТипСостояния") <> Завершено
				И ПолучитьЗначениеРеквизита(Объект.СостояниеСобытия, "ТипСостояния") <> Отменено Тогда
				//
				Объект.СостояниеСобытия				= ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено");
				ПризнакЗавершенияСобытия	= Истина;
				Записать();
			КонецЕсли;
			//Модифицированность	= Истина;
		КонецЕсли;
		НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
		УстановитьСвойстваЭлементовГруппыБизнесПроцесс();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Возврат;
	//
	//Если ИмяСобытия = "ЗадачаВыполнена" ИЛИ ИмяСобытия = "Запись_ЗадачаИсполнителя" Тогда
	//	Если ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И Источник = _Задача Тогда
	//		ПриИзмененииЗадачи();
	//		УстановитьСвойстваЭлементовГруппыБизнесПроцесс();
	//	ИначеЕсли ТипЗнч(Источник) = Тип("Массив") И (НЕ Источник.Найти(_Задача) = Неопределено) Тогда
	//		ПриИзмененииЗадачи();
	//		УстановитьСвойстваЭлементовГруппыБизнесПроцесс();
	//	КонецЕсли;
	//КонецЕсли;
	//// +СофтФон
	//Если (ИмяСобытия = "СофтФон_НачалоРазговора") И (Параметр.ИдентификаторСобытия = сфпИдентификаторСобытия) Тогда
	//	Объект.сфпИдентификаторЗвонка = Параметр.ИдентификаторЗвонка;
	//	Если Параметр.Свойство("НомерТелефона") И НЕ (Объект.Место = Параметр.НомерТелефона) Тогда
	//		Объект.Место			= Параметр.НомерТелефона;
	//		сфпНомерБезВладельца	= Истина;
	//	КонецЕсли;
	//	Если Параметр.Свойство("Партнер") И НЕ (Объект.Партнер = Параметр.Партнер) Тогда
	//		Объект.Партнер			= Параметр.Партнер;
	//		сфпНомерБезВладельца	= Ложь;
	//	КонецЕсли;	
	//	Если Параметр.Свойство("КонтактноеЛицо") И НЕ (Объект.КонтактноеЛицо = Параметр.КонтактноеЛицо) Тогда
	//		Объект.КонтактноеЛицо	= Параметр.КонтактноеЛицо;
	//		сфпНомерБезВладельца	= Ложь;
	//	КонецЕсли;	
	//	Объект.Дата	= сфпСофтФонПроСервер.сфпCRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	//	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.Дата);
	//	ДатаНачало	= ДатаВремя.Дата;
	//	ВремяНачало	= ДатаВремя.Время;
	//	ВремяНачалоПриИзменении(Неопределено);
	//	Элементы.сфпДобавитьТелефон.Видимость = сфпНомерБезВладельца И (ЗначениеЗаполнено(Объект.Партнер));
	//ИначеЕсли (ИмяСобытия = "СофтФон_ОбновитьЗвонок") И (Параметр.ИдентификаторСобытия = сфпИдентификаторСобытия) Тогда
	//	Объект.сфпИдентификаторЗвонка = Параметр.ИдентификаторЗвонка;
	//ИначеЕсли (ИмяСобытия = "СофтФон_КонецРазговора") И (Параметр.ИдентификаторЗвонка = Объект.сфпИдентификаторЗвонка) Тогда
	//	Если (ТекущийЭлемент.Вид = ВидПоляФормы.ПолеВвода) 
	//		И НЕ ((ТекущийЭлемент.Имя = "Партнер") ИЛИ (ТекущийЭлемент.Имя = "КонтактноеЛицо")) Тогда
	//		Попытка
	//			Если НЕ (Объект[ТекущийЭлемент.Имя] = ТекущийЭлемент.ТекстРедактирования) Тогда
	//				Объект[ТекущийЭлемент.Имя] = ТекущийЭлемент.ТекстРедактирования;
	//			КонецЕсли;	
	//		Исключение
	//		КонецПопытки;	
	//	КонецЕсли;
	//	Объект.ОкончаниеСобытия	= сфпСофтФонПроСервер.сфпCRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	//	ДатаВремяОкончания	= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ОкончаниеСобытия);
	//	ДатаОкончание		= ДатаВремяОкончания.Дата;
	//	ВремяОкончание		= ДатаВремяОкончания.Время;
	//	ВремяОкончаниеПриИзменении(Неопределено);
	//	//Объект.СостояниеСобытия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено");
	//	//ПризнакЗавершенияСобытия	= Истина;
	//	//Попытка
	//	//	Записать();
	//	//Исключение
	//	// КонецПопытки;	
	//	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	//ИначеЕсли (ИмяСобытия = "Софтфон_CoMagic") И Параметр.Свойство("Звонок") Тогда
	//	Если Параметр.Звонок = Объект.Ссылка Тогда
	//		сфпСтруктураВнешнихДанных	= Параметр.СтруктураCoMagic;
	//		КаналПервичногоИнтереса		= ПредопределенноеЗначение("ПланВидовХарактеристик.КаналыРекламныхВоздействий.CRM_CoMagic");
	//		Элементы.КаналПервичногоИнтереса.Доступность		= Истина;
	//		Элементы.КаналПервичногоИнтереса.ТолькоПросмотр		= Ложь;
	//		Элементы.ИсточникПервичногоИнтереса.Доступность		= Истина;
	//		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Ложь;
	//		Элементы.ИсточникПервичногоИнтереса.ОграничениеТипа	= Новый ОписаниеТипов("СправочникСсылка.МаркетинговыеМероприятия");
	//		ИсточникПервичногоИнтереса	= сфпСофтФонПроСервер.сфпНайтиМаркетинговоеМероприятие(сфпСтруктураВнешнихДанных.comagic_context.campaign);	
	//		Объект.Описание = Объект.Описание + ?(ПустаяСтрока(Объект.Описание), "", Символы.ПС) 
	//		+ НСтр("ru='Сайт: '") + сфпСтруктураВнешнихДанных.comagic_context.site + Символы.ПС
	//		+ НСтр("ru='Строка поиска: '") + сфпСтруктураВнешнихДанных.comagic_context.search_query; 		
	//		Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
	//			ЗаполнитьПартнераИКонтактноеЛицоИзCoMagic();
	//			УправлениеВидимостьюКнопокОткрытьВCoMagic();			
	//			Элементы.СоздатьПартнера.Видимость = Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок")
	//				И НЕ ЗначениеЗаполнено(Объект.Партнер);			
	//		КонецЕсли;			
	//		Попытка
	//			Записать();
	//		Исключение
	//		КонецПопытки;	
	//	КонецЕсли;	
	//КонецЕсли;	
	//// -СофтФон
	//// +БазаЗнаний
	//Если (ИмяСобытия = "CRM_РешенияОбновлениеСправочника") И (Параметр = ЭтотОбъект["бзТекущийВопрос"]) Тогда
	//	// Перезаполняем текст текущего решения.
	//	бзЗаполнитьТекстВопросаHTML();
	//КонецЕсли;	
	//// -БазаЗнаний
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
		ЗагрузитьИзШаблонаНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
		СформироватьОписаниеКаналаИсточника();
		ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
		ДоступностьПервичногоИнтереса();
		НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере(Отказ)
	Если CRM_МероприятияСервер.ИзмененияСобытияЗапрещены(Объект.Ссылка) Тогда
		ЗаблокироватьСобытиеОтИзменения();
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьДанныеФормы();
	
	ДоступностьПервичногоИнтереса();
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	
	//Элементы.ФормаИзменитьФорму.Видимость = Ложь;
	
	УстановитьСвойстваЭлементовГруппыБизнесПроцесс();
	
	// +БазаЗнаний
	// Скрываем кнопку управления видимостью базу знаний.
	Если НЕ ТолькоПросмотр Тогда
		Элементы["бзОткрытьБазуЗнаний"].Видимость	= Ложь;
	КонецЕсли;	
	// -БазаЗнаний
	
	Попытка
		Если ЗначениеЗаполнено(СпозиционироватьсяНаРеквизите) Тогда
			ТекущийЭлемент = Элементы[СпозиционироватьсяНаРеквизите];
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	//Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
	//	ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) Тогда
	//	
	//	Режим = РежимДиалогаВопрос.ДаНет;
	//	СтрокаВопроса = НСтр("ru = 'Перенести список участников из письма?'");
	//	Ответ = Вопрос(СтрокаВопроса, Режим, 0);
	//	Если Ответ = КодВозвратаДиалога.Да Тогда
	//		ЗаполнитьТЧПоПисьмам();
	//	КонецЕсли;
	//КонецЕсли;
	
	Если НЕ Элементы.ПоказатьРазделБП.Пометка И НЕ ЗначениеЗаполнено(_БизнесПроцесс) Тогда
		Элементы.ГруппаБизнесПроцессСвязать.Видимость = Ложь;		
	КонецЕсли;
	Если  ЗначениеЗаполнено(_БизнесПроцесс) Тогда
		_ПоказатьРазделБППометка = Истина;
		Элементы.ПоказатьРазделБП.Пометка = Истина;
	КонецЕсли;
		
	ПриОткрытииНаСервере(Отказ);
	
	// Отключаем видимость кнопки "Редактировать вручную" и отображаем затраты 
	// (т.к. просто разница дат), если это Событие Софтфона.
	Если Объект.сфпИдентификаторЗвонка > 0 Тогда
		Элементы.РедактироватьТрудозатратыВручную.Видимость = Ложь;		
		РасчетТрудозатрат();
		ПеревестиТрудозатратыВЧасыМинуты(ЭтотОбъект)	
	КонецЕсли;
	
	// Всегда размещать это условие в конце процедуры.
	Если СписокФайловПисьма.Количество() > 0 Тогда
		НовоеОповещение = Новый ОписаниеОповещения("ВыборФайловДляКопирования", ЭтотОбъект);
		ПараметрыФормы = Новый Структура ("СписокФайлов", СписокФайловПисьма);
		ОткрытьФорму("ОбщаяФорма.CRM_ФормаВыбораФайловДляКопирования", ПараметрыФормы,,,,,НовоеОповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаОбработкаАтрибутаСобытияОбщая(Команда)
	//ИмяКоманды = Команда.Имя;
	//Модифицированность = Истина;
	//ЗначениеСсылки = ПолучитьСсылкуПоИмениЭлемента(ЭтотОбъект, ИмяКоманды);
	//Завершено	= ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Завершено");
	//Отменено	= ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Отменено");
	//Если Найти(ИмяКоманды, "КнопкаПодменюПроектСобытия") > 0  Тогда
	//	Объект.Проект = ЗначениеСсылки;
	//	ВыдаватьВопросНаСозданиеНового = ?(ПолучитьЗначениеРеквизита(Объект.СостояниеСобытия, "ТипСостояния") = Завершено, Ложь, Истина);
	//	
	//	_БизнесПроцесс					= ПредопределенноеЗначение("БизнесПроцесс.CRM_БизнесПроцесс.ПустаяСсылка");
	//	_Задача						= ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");
	//	_ЗадачаВыполнить				= Ложь;
	//	_ЗадачаПринятьКИсполнению		= Ложь;
	//	_ЭтоВведенныйНаОсновании		= Ложь;
	//	_ЕстьСвязьСБизнесПроцессом		= Ложь;
	//	_ЕстьБизнесПроцессыДляВыбора	= Ложь;
	//	ЗаполнитьГруппуБизнесПроцесс();
	//	
	//	ЗаполнитьГруппуГиперссылок();
	//	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
	//	ПрименитьНастройкиСтраницРеквизитовПоПроекту(ЭтотОбъект);
	//	УстановитьСвойстваЭлементовГруппыБизнесПроцесс();
	//ИначеЕсли Найти(ИмяКоманды, "КнопкаПодменюВидСобытия") > 0  Тогда
	//	Объект.ВидСобытия		= ЗначениеСсылки;
	//	Объект.Место			= "";
	//	Объект.Помещение		= ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
	//ИначеЕсли Найти(ИмяКоманды, "КнопкаПодменюВходящееИсходящее") > 0  Тогда
	//	Объект.ВходящееИсходящее = ЗначениеСсылки;
	//	ДоступностьПервичногоИнтереса();
	//ИначеЕсли Найти(ИмяКоманды, "КнопкаПодменюВажность") > 0  Тогда
	//	Объект.Важность = ЗначениеСсылки;
	//ИначеЕсли Найти(ИмяКоманды, "КнопкаПодменюСостояниеСобытия") > 0  Тогда
	//	ПрошлоеСостояниеСобытия = ПолучитьЗначениеРеквизита(Объект.СостояниеСобытия, "ТипСостояния");
	//	ТекущееСостояниеСобытия = ПолучитьЗначениеРеквизита(ЗначениеСсылки, "ТипСостояния");
	//	Объект.СостояниеСобытия = ЗначениеСсылки;
	//	Если (ТекущееСостояниеСобытия = Завершено) ИЛИ (ТекущееСостояниеСобытия = Отменено) Тогда
	//		Если НЕ (ПрошлоеСостояниеСобытия = ТекущееСостояниеСобытия) Тогда
	//			Ответ = Вопрос(НСтр("ru = 'Установить дату окончания равной текущей дате?'"), РежимДиалогаВопрос.ДаНет);
	//			Если Ответ = КодВозвратаДиалога.Да Тогда
	//				ТекДата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	//				ДатаСобытия = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	//				Если ДатаСобытия > ТекДата Тогда
	//					ДатаОкончаниеСобытия = ДатаСобытия;
	//				Иначе
	//					ДатаОкончаниеСобытия = ТекДата;
	//				КонецЕсли;
	//				
	//				Объект.Дата				= ДатаСобытия;
	//				Объект.ОкончаниеСобытия	= ДатаОкончаниеСобытия;
	//				
	//				ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.Дата);
	//				ДатаНачало	= ДатаВремя.Дата;
	//				ВремяНачало	= ДатаВремя.Время;
	//				
	//				ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ОкончаниеСобытия);
	//				ДатаОкончание	= ДатаВремя.Дата;
	//				ВремяОкончание	= ДатаВремя.Время;
	//				
	//				РасчетТрудозатрат();
	//				ПеревестиТрудозатратыВЧасыМинуты(ЭтотОбъект);
	//			КонецЕсли;
	//		КонецЕсли;
	//	Иначе
	//		ВыдаватьВопросНаСозданиеНового = Истина;
	//	КонецЕсли;   
	//	
	//	
	//	Если ЗначениеЗаполнено(Объект.СостояниеСобытия) И НЕ ПолучитьЗначениеРеквизита(Объект.СостояниеСобытия, "ТипСостояния") = ПредопределенноеЗначение("Перечисление.CRM_ТипыСостоянийСобытий.Отменено") Тогда
	//		Объект.ПричинаОтказа = ПредопределенноеЗначение("Справочник.CRM_ПричиныОтказов.ПустаяСсылка");
	//	КонецЕсли;
	//КонецЕсли;
	//
	//НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцесс(Команда)
	
	//Если Объект.Ссылка.Пустая() Тогда 
	//	
	//	ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
	//		|Выполнение действия """+ВернутьЗаголовокКоманды(Команда.Имя)+""" возможно только после записи данных.
	//		|Данные будут записаны.'");
	//	Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	//	
	//	Если Результат <> КодВозвратаДиалога.ОК Тогда 
	//		Возврат;
	//	КонецЕсли;	
	//	
	//КонецЕсли;
	//	
	//Если Модифицированность Тогда 
	//	Успех = Ложь;
	//	Попытка
	//		Успех = Записать();
	//	Исключение
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	//	КонецПопытки;
	//	Если НЕ Успех Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(_БизнесПроцесс) И _ЭтоВведенныйНаОсновании Тогда
	//	ТекстВопроса = НСтр("ru = 'Уже создан бизнес-процесс """+ВернутьНаименованиеКартыМаршрута(Объект.Проект)+""".
	//		|Создать новый?.'");
	//	Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	//	
	//	Если Результат <> КодВозвратаДиалога.Да Тогда 
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//СтруктураОснования = ПолучитьСтруктуруОснованияБизнесПроцесса(Команда.Имя);
	//ПараметрыФормы = Новый Структура("Основание",СтруктураОснования);
	//ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта",ПараметрыФормы,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачу(Команда)
	
	CRM_БизнесПроцессыИЗадачиВызовСервера.Выполнить_Задачу(ЭтотОбъект._ЛичнаяЗадача, Истина);
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Задача выполнена'"),
		ПолучитьНавигационнуюСсылку(ЭтотОбъект._ЛичнаяЗадача),
		Строка(ЭтотОбъект._ЛичнаяЗадача));
		
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено");
	Модифицированность = Истина;
	
	ЗаполнитьГруппуГиперссылок();
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	Оповестить("ЗадачаВыполнена", Новый Структура("ОбновлятьКалендарь", Параметры.ОбновлятьКалендарь));
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГиперссылкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.Имя = "_ЛичнаяЗадачаСтрокой" Тогда
		ПоказатьЗначение(, ЭтотОбъект._ЛичнаяЗадача);
	ИначеЕсли Элемент.Имя = "_БизнесПроцессСтрокой" Тогда
		ПоказатьЗначение(, ЭтотОбъект._БизнесПроцесс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДобавитьОповещение(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьОповещение();
	
	ПризнакИзмененыОповещения = Истина;
	
	// При добавлении оповещения изменения в форме не отражаются.
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьОповещение(Команда)
	
	УдалитьОповещение(Команда.Имя);
	
	ПризнакИзмененыОповещения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Если ИспользоватьНапоминания Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.Напоминание"));
	КонецЕсли;
	
	Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта"));
	КонецЕсли;
	
	Если ИспользоватьОповещенияСМС Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.СМС"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОповещениеПриИзменении(Элемент)
	
	Если Найти(Элемент.Имя, "ПолеКанала_") > 0 Тогда
		
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеКанала_","");
		
	ИначеЕсли Найти(Элемент.Имя, "ПолеСрокаОповещения_") > 0 Тогда
		
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеСрокаОповещения_","");
		
	ИначеЕсли Найти(Элемент.Имя, "ПолеПериодаОповещения_") > 0 Тогда
		
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеПериодаОповещения_","");
		
	КонецЕсли;
	
	Если (Найти(Элемент.Имя, "ПолеСрокаОповещения_") > 0)
	ИЛИ (Найти(Элемент.Имя, "ПолеПериодаОповещения_") > 0) Тогда
	
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Новый Структура("Организация,Дата",Объект.Организация,CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало)));
		СтруктураОповещения.Вставить("ВидОповещения",	ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения",	ЭтотОбъект["_СрокОповещения"+Строка(ИдПолей)]);
		СтруктураОповещения.Вставить("Периодичность",	ЭтотОбъект["_ПериодОповещения"+Строка(ИдПолей)]);
		СтруктураОповещения.Вставить("Получатель",		ТекущийПользователь());

		ЭтотОбъект["_ДатаОповещения"+Строка(ИдПолей)] = CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		Элементы["ПолеДатыОповещения_"+Строка(ИдПолей)].ЦветТекста = ?(ЭтотОбъект["_ДатаОповещения"+Строка(ИдПолей)] > CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
		
		ЭтотОбъект["_Предупреждение"+Строка(ИдПолей)] = ?(ЭтотОбъект["_ДатаОповещения"+Строка(ИдПолей)] > CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(), "", СообщениеОНекорректностиВремениОповещения);
		Элементы["ПолеПредупреждения_"+Строка(ИдПолей)].ЦветТекста = Новый Цвет(255,0,0);
	КонецЕсли;
	ПриИзмененииОповещения(ИдПолей);
	
	ПризнакИзмененыОповещения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодическоеПриИзменении(Элемент)
	Если Объект.Периодическое Тогда
		Если Не ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			СоздатьНовыйЭлементРядСобытий();
			Если Не ЗначениеЗаполнено(Объект.РядСобытий) Тогда
				Объект.Периодическое = Ложь;
				Возврат;
			КонецЕсли;
			
		ИначеЕсли Не Объект.Ссылка.Пустая() Тогда
			Если Объект.ИзмененоВРяде Тогда
				РядСобытийСтарый = Объект.РядСобытий;
				
				Объект.РядСобытий = ПредопределенноеЗначение("Справочник.CRM_РядыСобытий.ПустаяСсылка");
				СоздатьНовыйЭлементРядСобытий();
				
				Если Не ЗначениеЗаполнено(Объект.РядСобытий) Тогда
					Объект.Периодическое = Ложь;
					Объект.РядСобытий = РядСобытийСтарый;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если Не Объект.Ссылка.Пустая() И Объект.ИзмененоВРяде И ЗначениеЗаполнено(РядСобытийСтарый) Тогда
			Объект.РядСобытий = РядСобытийСтарый;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РядСобытийСсылкаНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.РядСобытий) Тогда
		СоздатьНовыйЭлементРядСобытий();
		Если Не ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			Объект.Периодическое = Ложь;
			НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
			Возврат;
		КонецЕсли;
	Иначе
		ОткрытьФормуРасписания();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаВесьДеньПриИзменении(Элемент)
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	Если Объект.НаВесьДень Тогда
		УстановитьВремяНачалоВремяОкончание();
		
		СкорректироватьДатуВремя(Ложь);
		
		РасчетТрудозатрат();
		ПеревестиТрудозатратыВЧасыМинуты(ЭтотОбъект);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалоПриИзменении(Элемент)
	
	СкорректироватьДатуВремя(Истина);
	
	РасчетТрудозатрат();
	ПеревестиТрудозатратыВЧасыМинуты(ЭтотОбъект);
	ПересчитатьДатыОповещений();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончаниеПриИзменении(Элемент)
	
	СкорректироватьДатуВремя(Ложь);
	
	РасчетТрудозатрат();
	ПеревестиТрудозатратыВЧасыМинуты(ЭтотОбъект);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалоПриИзменении(Элемент)
	
	СкорректироватьДатуВремя(Истина);
	
	РасчетТрудозатрат();
	ПеревестиТрудозатратыВЧасыМинуты(ЭтотОбъект);
	ПересчитатьДатыОповещений();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончаниеПриИзменении(Элемент)
	
	СкорректироватьДатуВремя(Ложь);
	
	РасчетТрудозатрат();
	ПеревестиТрудозатратыВЧасыМинуты(ЭтотОбъект);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ВыбранноеВремя = CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяНачало, Элемент);
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяНачало = ВыбранноеВремя;
		ВремяНачалоПриИзменении(Элементы.ВремяНачало)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НачалоДня(ДатаНачало) = НачалоДня(ДатаОкончание) Тогда
		ВыбранноеВремя = CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент, ВремяНачало, Истина);
	Иначе
		ВыбранноеВремя = CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент);
	КонецЕсли;
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяОкончание = ВыбранноеВремя;
		ВремяНачалоПриИзменении(Элементы.ВремяОкончание)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатие(Элемент)
	МассивКатегорий = Новый Массив();
	Для Каждого КатегорияСтрока Из Объект.Категории Цикл
		МассивКатегорий.Добавить(КатегорияСтрока.Категория);
	КонецЦикла;
	
	СтруктураОписаниеКатегорий = Новый Структура("МассивКатегорий,ОсновнаяКатегория", МассивКатегорий, Объект.ОсновнаяКатегория);
	Форма = ПолучитьФорму("Документ.УдалитьCRM_Событие.Форма.ФормаВыборКатегорий", Новый Структура("ОписаниеКатегорий", СтруктураОписаниеКатегорий), ЭтотОбъект);
	Форма.ОткрытьМодально();
	Если Форма.ДанныеБылиИзменены Тогда
		Модифицированность = Истина;
		
		Объект.Категории.Очистить();
		Для Каждого СтрокаКатегория Из Форма.СписокВыбранныеКатегории Цикл
			НоваяСтрока = Объект.Категории.Добавить();
			НоваяСтрока.Категория = СтрокаКатегория.Значение;
		КонецЦикла;
		Объект.ОсновнаяКатегория = Форма.ОсновнаяКатегория;
		
		ОтрисоватьКатегорииНаФорме();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьСтороннихУчастниковПоРезультатамОтчета(Команда)
	
	//Если Объект.СторонниеЛица.Количество() > 0 Тогда
	//	ВариантыОтветов = Новый СписокЗначений;
	//	ВариантыОтветов.Добавить("Заменить", "Заменить");
	//	ВариантыОтветов.Добавить("Добавить", "Добавить");
	//	ВариантыОтветов.Добавить("Отмена", "Отмена");
	//	Ответ = Вопрос(НСтр("ru = 'В списке уже есть участники, вы хотите заменить их или добавить новых?'"), ВариантыОтветов,,,"Выберите действие со списком участников");
	//	Если Ответ = "Заменить" Тогда 
	//		Объект.СторонниеЛица.Очистить();
	//	ИначеЕсли Ответ = "Отмена" Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//НаименованиеСохраненногоСписка = CRM_ОбщегоНазначенияКлиент.ОткрытьФормуЗаполненияПоРезультатамОтчета(ЭтотОбъект);
	//Если НаименованиеСохраненногоСписка <> Неопределено Тогда
	//	СохраненныйСписок = CRM_ОбщегоНазначенияСервер.ПолучитьСохраненныйРезультатОтчетаПоНаименованию(НаименованиеСохраненногоСписка);
	//	Если СохраненныйСписок <> Неопределено Тогда
	//		ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
	//		Для Каждого СтрокаСписка Из СохраненныйСписок Цикл
	//			Если ДопустимыеТипы.СодержитТип(ТипЗнч(СтрокаСписка.Значение)) Тогда
	//				НоваяСтрока = Объект.СторонниеЛица.Добавить();
	//				НоваяСтрока.Партнер = СтрокаСписка.Значение;
	//				
	//				ПриИзмененииПартнераКонтактногоЛица(НоваяСтрока, Истина);
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		Модифицированность = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборКлиентов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", 		  Истина);
	ПараметрыФормы.Вставить("ПрограммноеОткрытие",Истина);	
	
	ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элементы.СторонниеЛица);

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Объект.Тема) И ЗначениеЗаполнено(Объект.Описание) Тогда
		Объект.Тема = СтрПолучитьСтроку(Объект.Описание, 1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "КаналПервичногоИнтереса".
//
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	ДоступностьПервичногоИнтереса();
КонецПроцедуры // КаналПервичногоИнтересаПриИзменении()

&НаКлиенте
// Процедура - обработчик выбора партнера - владельца.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Владелец контактных лиц.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПартнераИсточника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	ПараметрыФормы	= Новый Структура("Отбор", Новый Структура("Владелец", РезультатЗакрытия));
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, ДополнительныеПараметры.Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // ОбработкаВыбораПартнераИсточника()

&НаКлиенте
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Если ТипПВХ(КаналПервичногоИнтереса)= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора", Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока", ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СкрытьПодменюВид", Истина);
			ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
			ЭлементОтбора.ПравоеЗначение	= Истина;
			ЭлементОтбора.Использование		= Истина;
			ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
			ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
			ЭлементОтбора.ПравоеЗначение	= НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
			ЭлементОтбора.Использование		= Истина;
			ФормаВыбора.Открыть();
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(ИсточникПервичногоИнтереса) И (ТипЗнч(ИсточникПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИсточникПервичногоИнтереса, "Владелец"));
			КонецЕсли;	
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеВыбораПартнера);
		КонецЕсли;
	КонецЕсли;
	ДоступностьПервичногоИнтереса();
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	//ПартнерПередИзменением = Партнер;
	//Партнер = Объект.Партнер;
	//
	//Если ПартнерПередИзменением <> Объект.Партнер Тогда
	//	
	//	СтруктураДанные = ПолучитьДанныеПартнерПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Партнер, Объект.Организация);
	//	
	//	Объект.Договор = СтруктураДанные.Договор;
	//	ДоговорПередИзменением = Договор;
	//	Договор = Объект.Договор;
	//	
	//	ВалютаРасчетовПередИзменением = ВалютаРасчетов;
	//	ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
	//	
	//	Если ЗначениеЗаполнено(Объект.Договор) Тогда 
	//		Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
	//		Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	//	КонецЕсли;
	//	
	//	Объект.КонтактноеЛицо = СтруктураДанные.ОсновноеКонтактноеЛицо;
	//	
	//	ИзменилсяВидЦен = Объект.ВидЦен <> СтруктураДанные.ВидЦен И ЗначениеЗаполнено(СтруктураДанные.ВидЦен);
	//	ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> СтруктураДанные.ВидСкидкиНаценки И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки);
	//	Если ЗначениеЗаполнено(Объект.Договор) И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки) Тогда
	//					
	//		Сообщение = НСтр("ru = 'Договор с партнером предусматривает условия цен и скидок, отличные от установленных в документе! 
	//								|Пересчитать документ в соответствии с договором?'");
	//								
	//		Если Вопрос(Сообщение, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	//			
	//			Если ИзменилсяВидЦен Тогда
	//				Объект.ВидЦен = СтруктураДанные.ВидЦен;
	//			КонецЕсли; 
	//			Если ИзменилсяВидСкидки Тогда
	//				Объект.ВидСкидкиНаценки = СтруктураДанные.ВидСкидкиНаценки;
	//			КонецЕсли; 
	//			СтруктураНадписи = Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦен, ВидСкидки", Объект.ВалютаДокумента, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.СуммаВключаетНДС, УчетВалютныхОпераций, Объект.ВидЦен, Объект.ВидСкидкиНаценки);
	//			ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	//			
	//			// Пересчитываем цены по виду цен.
	//			Если Объект.Запасы.Количество() > 0 Тогда
	//				ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенСервер("Запасы", Истина);
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	Если (ЗначениеЗаполнено(Объект.Договор)
	//	   И ЗначениеЗаполнено(ВалютаРасчетов)
	//	   И Объект.Договор <> ДоговорПередИзменением
	//	   И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
	//	   И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
	//	   
	//		Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
	//		Предупреждение(НСтр("ru = 'Изменилась валюта расчетов по договору с партнером! Необходимо проверить валюту документа!'"));
	//		ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина);
	//	КонецЕсли;
	//	
	//	ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
	//	// +СофтФон
	//	Если Объект.Помещение = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка") Тогда
	//		Если Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок") Тогда
	//			СтруктураДанных = Новый Структура;
	//			СтруктураДанных.Вставить("Партнер", 		Объект.Партнер);
	//			СтруктураДанных.Вставить("КонтактноеЛицо",	Объект.КонтактноеЛицо);
	//			СписокТелефонов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураДанных, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	//			// Проверяем есть ли данный номер в списке номеров.
	//			Если сфпНомерБезВладельца Тогда
	//				Для Каждого ТелефонСписка Из СписокТелефонов Цикл
	//					ТелефонныйНомер = ТелефонСписка.Значение;
	//					Если ТелефонныйНомер.Представление = Объект.Место Тогда
	//						сфпНомерБезВладельца	= Ложь;
	//						Прервать;
	//					КонецЕсли;	
	//				КонецЦикла;	
	//			ИначеЕсли СписокТелефонов.Количество() > 1 Тогда
	//					ТелефонныйНомер = СписокТелефонов[1].Значение;
	//					Объект.Место = ТелефонныйНомер.Представление;
	//			КонецЕсли;
	//			Элементы.сфпДобавитьТелефон.Видимость = (сфпНомерБезВладельца И ЗначениеЗаполнено(Объект.Партнер));
	//		ИначеЕсли сфпСофтФонПроСервер.сфпИспользоватьСофтФон() И ЗначениеЗаполнено(Объект.Место) Тогда
	//			Объект.Место = "";
	//		КонецЕсли;	
	//	КонецЕсли;
	//	УправлениеВидимостьюКнопокОткрытьВCoMagic();		
	//	// -СофтФон
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Объект.Партнер) Тогда
	//	
	//	Объект.КонтактноеЛицо = ВернутьОсновноеКонтактноеЛицо(Объект.Партнер);
	//	
	//КонецЕсли;
	//
	//КаналПервичногоИнтереса = Неопределено;
	//ИсточникПервичногоИнтереса = Неопределено;
	//СформироватьОписаниеКаналаИсточника();
	//
	//// Событие на основании маркетинговой компании.
	//Если ЗаполнятьАкцию И ЗначениеЗаполнено(Партнер) Тогда
	//	ЗаполнитьМаркетинговуюКампанию();
	//КонецЕсли;
	//
	//ДоступностьПервичногоИнтереса();
	//НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	//
	//// При изменении контрагента, попробуем найти бизнес-процесс
	//// по аналогии с тем, что делаем при создании на сервере.
	////Если ИспользоватьБизнесПроцессы И НЕ _ЭтоВведенныйНаОсновании Тогда
	//Если ИспользоватьБизнесПроцессы Тогда
	//	_БизнесПроцесс				= ПредопределенноеЗначение("БизнесПроцесс.CRM_БизнесПроцесс.ПустаяСсылка");
	//	_Задача						= ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");
	//	_ЗадачаВыполнить			= Ложь;
	//	_ЗадачаПринятьКИсполнению	= Ложь;
	//	_ЕстьСвязьСБизнесПроцессом	= Ложь;
	//	_ЭтоВведенныйНаОсновании	= Ложь;
	//	
	//	ЗаполнитьГруппуБизнесПроцесс();
	//	УстановитьСвойстваЭлементовГруппыБизнесПроцесс();
	//	_ПоказатьРазделБППометка = Элементы.ГруппаБизнесПроцессСвязать.Видимость;
	//	Элементы.ПоказатьРазделБП.Пометка =	_ПоказатьРазделБППометка;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	// +СофтФон
	Если Объект.Помещение = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка") Тогда
		Если Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок") Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Партнер", 		Объект.Партнер);
			СтруктураДанных.Вставить("КонтактноеЛицо",	Объект.КонтактноеЛицо);
			СписокТелефонов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураДанных, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
			// Проверяем есть ли данный номер в списке номеров.
			Если сфпНомерБезВладельца Тогда
				Для Каждого ТелефонСписка Из СписокТелефонов Цикл
					ТелефонныйНомер = ТелефонСписка.Значение;
					Если ТелефонныйНомер.Представление = Объект.Место Тогда
						сфпНомерБезВладельца	= Ложь;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			ИначеЕсли СписокТелефонов.Количество() > 1 Тогда
					ТелефонныйНомер = СписокТелефонов[1].Значение;
					Объект.Место = ТелефонныйНомер.Представление;
			КонецЕсли;
			Элементы.сфпДобавитьТелефон.Видимость = (сфпНомерБезВладельца И ЗначениеЗаполнено(Объект.Партнер));
		ИначеЕсли сфпСофтФонПроСервер.сфпИспользоватьСофтФон() И ЗначениеЗаполнено(Объект.Место) Тогда
			Объект.Место = "";
		КонецЕсли;	
	КонецЕсли;
	УправлениеВидимостьюКнопокОткрытьВCoMagic();	
	// -СофтФон
КонецПроцедуры

&НаКлиенте
Процедура МестоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//
	//ТелефонныйЗвонок = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок");
	//
	//Если Объект.ВидСобытия = ТелефонныйЗвонок Тогда
	//	СписокТелефонов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(Новый Структура("Партнер,КонтактноеЛицо",Объект.Партнер,Объект.КонтактноеЛицо),
	//																						ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	//	ЭлементСписка = СписокТелефонов.ВыбратьЭлемент("Выберите телефон");
	//	
	//	Если ЭлементСписка = Неопределено Тогда Возврат; КонецЕсли;
	//	
	//	ТелефонныйНомер = ЭлементСписка.Значение;
	//	Если Не ТелефонныйНомер.Количество() = 0 Тогда
	//		Объект.Место = ТелефонныйНомер.Представление;
	//	КонецЕсли;
	//Иначе
	//	
	//	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(Новый Структура("Партнер,КонтактноеЛицо",Объект.Партнер,Объект.КонтактноеЛицо),
	//																					ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	//																					
	//	Если СписокАдресов.Количество() > 0 Тогда
	//		ПараметрыФормы = Новый Структура("СписокАдресов",СписокАдресов);
	//		ПараметрыФормы.Вставить("РежимВыбора", Истина);
	//		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	//		Результат = ОткрытьФормуМодально("Документ.УдалитьCRM_Событие.Форма.ФормаВыбораМеста",ПараметрыФормы,Элемент);
	//	Иначе
	//		ПараметрыФормы = Новый Структура();
	//		ПараметрыФормы.Вставить("РежимВыбора", Истина);
	//		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	//		Результат = ОткрытьФормуМодально("Справочник.CRM_Помещения.ФормаВыбора",ПараметрыФормы,Элемент);
	//	КонецЕсли;
	//	
	//	Если Результат = Неопределено Тогда Возврат; КонецЕсли;
	//	
	//	Объект.Место = СокрЛП(Результат);
	//	
	//	Если ТипЗнч(Результат) = Тип("СправочникСсылка.CRM_Помещения") Тогда
	//		Объект.Помещение = Результат;
	//		Элементы.Место.РедактированиеТекста = Ложь;
	//	Иначе
	//		Объект.Помещение = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
	//		Элементы.Место.РедактированиеТекста = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Помещение = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
	Элементы.Место.РедактированиеТекста = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.Место = СокрЛП(ВыбранноеЗначение);
	Элементы.Место.РедактированиеТекста = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок") Тогда Возврат; КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Массив = ВернутьПомещенияПоТексту(Текст);
	
	СписокПодбора = Новый СписокЗначений;
	Для Каждого Стр Из Массив Цикл
		СписокПодбора.Добавить(Стр);		
	КонецЦикла;
	
	ДанныеВыбора = СписокПодбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЧасыМинутыПриИзменении(Элемент)
	ПеревестиТрудозатратыВЧасы();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
    	
	//СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	//
	//СтруктураДанные = Новый Структура();
	//
	//СтруктураДанные.Вставить("Организация", 	 Объект.Организация);
	//СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
	//СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
	//СтруктураДанные.Вставить("ВалютаДокумента",	 Объект.ВалютаДокумента);
	//СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	//СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	//СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
	//СтруктураДанные.Вставить("Коэффициент",		 1);
	//СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	//
	//СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	//
	//СтрокаТабличнойЧасти.Содержание = СтруктураДанные.Содержание;
	//
	//Если СтруктураДанные.Свойство("ЭтоГруппа") Тогда
	//	СтрокаТабличнойЧасти.ЭтоГруппа = Истина;
	//	
	//	СтрокаТабличнойЧасти.Всего = 0;
	//	СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
	//	СтрокаТабличнойЧасти.Количество = 0;
	//	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
	//	СтрокаТабличнойЧасти.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
	//	СтрокаТабличнойЧасти.Сумма = 0;
	//	СтрокаТабличнойЧасти.СуммаНДС = 0;
	//	СтрокаТабличнойЧасти.Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	//	СтрокаТабличнойЧасти.Цена = 0;
	//Иначе
	//	СтрокаТабличнойЧасти.ЭтоГруппа = Ложь;
	//	
	//	// Формирование списка выбора единиц измерения.
	//	ПолеЕдиницаИзмерения = Элементы.Запасы.ПодчиненныеЭлементы.ЗапасыЕдиницаИзмерения;
	//	СформироватьСписокВыбораЕдиницИзмерения(СтрокаТабличнойЧасти, ПолеЕдиницаИзмерения);
	//	
	//	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	//	СтрокаТабличнойЧасти.Количество = 1;
	//	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	//	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	//	СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанные.ПроцентСкидкиНаценки;
	//	РассчитатьСуммуВСтрокеТабличнойЧасти();
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	СформироватьСписокВыбораЕдиницИзмерения(СтрокаТабличнойЧасти, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокВыбораЕдиницИзмерения(СтрокаТабличнойЧасти, ЕдиницаИзмеренияПолеТЧ)
	ЕдиницаИзмеренияПолеТЧ.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
	
	Для каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		ЕдиницаИзмеренияПолеТЧ.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПересчетЦенПриИзмененииДанныхТЧ()
	//
	//СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	//
	//СтруктураДанные = Новый Структура();
	//
	//СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
	//СтруктураДанные.Вставить("ВидЦен",			 	Объект.ВидЦен);
	//СтруктураДанные.Вставить("ВалютаДокумента",	 	Объект.ВалютаДокумента);
	//СтруктураДанные.Вставить("СуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	//
	//СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
	//СтруктураДанные.Вставить("Номенклатура",	 	СтрокаТабличнойЧасти.Номенклатура);
	//СтруктураДанные.Вставить("Характеристика",	 	СтрокаТабличнойЧасти.Характеристика);
	//СтруктураДанные.Вставить("ЕдиницаИзмерения", 	СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	//
	//СтруктураДанные = ПолучитьДанныеХарактеристикаЕдиницаПриИзменении(СтруктураДанные);
	//
	//СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	//СтрокаТабличнойЧасти.Содержание = СтруктураДанные.Содержание;
	//РассчитатьСуммуВСтрокеТабличнойЧасти();

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ПересчетЦенПриИзмененииДанныхТЧ();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	ПересчетЦенПриИзмененииДанныхТЧ();
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ПроцентСкидкиНаценки.
//
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыПроцентСкидкиНаценкиПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Скидка.
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ((1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100) * СтрокаТабличнойЧасти.Количество);
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры  // ЗапасыСтавкаНДСПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//
	//СтандартнаяОбработка = Ложь;
	//
	//ПараметрыФормы = Новый Структура;
	//
	//ПараметрыФормы.Вставить("Период",			  Объект.Дата);
	//ПараметрыФормы.Вставить("ВидЦен",			  Объект.ВидЦен);
	//ПараметрыФормы.Вставить("ТекущаяСтрока",	  Элементы.Запасы.ТекущиеДанные.Номенклатура);
	//
	//ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора",ПараметрыФормы,Элемент);
	//ФормаВыбора.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	//ФормаВыбора.Открыть();
	//
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	Если Элемент.Имя = "СвоиЛица" Тогда
		ИзмененСоставУчастников = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаПослеУдаления(Элемент)
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧПоПисьмам() Экспорт
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		Для Каждого Получатель Из Объект.ДокументОснование.ПолучателиПисьма Цикл
			Если Получатель.Контакт = Объект.Партнер ИЛИ Объект.КонтактноеЛицо = Получатель.Контакт Тогда
				Продолжить;
			Иначе
				Если ТипЗнч(Получатель.Контакт) 	= Тип("СправочникСсылка.Партнеры") Тогда
					
					Стр 					= Объект.СторонниеЛица.Добавить();
					Стр.Партнер 			= Получатель.Контакт;
					Стр.КонтактноеЛицо  	= Получатель.Контакт.CRM_ОсновноеКонтактноеЛицо;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаПартнерТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Получатель.Контакт,,Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаПартнерТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;		
					
				ИначеЕсли  ТипЗнч(Получатель.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					
					Стр 					= Объект.СторонниеЛица.Добавить();
					Стр.Партнер 			= Получатель.Контакт.Владелец;
					Стр.КонтактноеЛицо  	= Получатель.Контакт;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаКЛТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(,Получатель.Контакт,Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаКЛТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;
							
				ИначеЕсли  ТипЗнч(Получатель.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
					
					Стр 					= Объект.СвоиЛица.Добавить();
					Стр.Лицо 				= Получатель.Контакт;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаПользовательТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПользователей(Получатель.Контакт, Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаПользовательТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;				
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого Получатель Из Объект.ДокументОснование.ПолучателиКопий Цикл
			Если Получатель.Контакт = Объект.Партнер ИЛИ Объект.КонтактноеЛицо = Получатель.Контакт Тогда
				Продолжить;
			Иначе
				Если ТипЗнч(Получатель.Контакт) 	= Тип("СправочникСсылка.Партнеры") Тогда
					
					Стр 					= Объект.СторонниеЛица.Добавить();
					Стр.Партнер 			= Получатель.Контакт;
					Стр.КонтактноеЛицо  	= Получатель.Контакт.CRM_ОсновноеКонтактноеЛицо;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаПартнерТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Получатель.Контакт,,Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаПартнерТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли  ТипЗнч(Получатель.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					
					Стр 					= Объект.СторонниеЛица.Добавить();
					Стр.Партнер 			= Получатель.Контакт.Владелец;
					Стр.КонтактноеЛицо  	= Получатель.Контакт;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаКЛТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(,Получатель.Контакт,Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаКЛТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;			
					
				ИначеЕсли  ТипЗнч(Получатель.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
					
					Стр 					= Объект.СвоиЛица.Добавить();
					Стр.Лицо 				= Получатель.Контакт;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаПользовательТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПользователей(Получатель.Контакт, Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаПользовательТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
	Иначе
		
		Для Каждого Получатель Из Объект.ДокументОснование.ПолучателиПисьма Цикл
			Если Получатель.Контакт = Объект.Партнер ИЛИ Объект.КонтактноеЛицо = Получатель.Контакт Тогда
				Продолжить;
			Иначе
				Если ТипЗнч(Получатель.Контакт) 	= Тип("СправочникСсылка.Партнеры") Тогда
					
					Стр 					= Объект.СторонниеЛица.Добавить();
					Стр.Партнер 			= Получатель.Контакт;
					Стр.КонтактноеЛицо  	= Получатель.Контакт.CRM_ОсновноеКонтактноеЛицо;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаПартнерТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Получатель.Контакт,,Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаПартнерТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли  ТипЗнч(Получатель.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					
					Стр 					= Объект.СторонниеЛица.Добавить();
					Стр.Партнер 			= Получатель.Контакт.Владелец;
					Стр.КонтактноеЛицо  	= Получатель.Контакт;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаКЛТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(,Получатель.Контакт,Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаКЛТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;	
					
				ИначеЕсли  ТипЗнч(Получатель.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
					
					Стр 					= Объект.СвоиЛица.Добавить();
					Стр.Лицо 				= Получатель.Контакт;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаПользовательТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПользователей(Получатель.Контакт, Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаПользовательТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого Получатель Из Объект.ДокументОснование.ПолучателиКопий Цикл
			Если Получатель.Контакт = Объект.Партнер ИЛИ Объект.КонтактноеЛицо = Получатель.Контакт Тогда
				Продолжить;
			Иначе
				Если ТипЗнч(Получатель.Контакт) 	= Тип("СправочникСсылка.Партнеры") Тогда
					
					Стр 					= Объект.СторонниеЛица.Добавить();
					Стр.Партнер 			= Получатель.Контакт;
					Стр.КонтактноеЛицо  	= Получатель.Контакт.CRM_ОсновноеКонтактноеЛицо;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаПартнерТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Получатель.Контакт,,Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаПартнерТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли  ТипЗнч(Получатель.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					
					Стр 					= Объект.СторонниеЛица.Добавить();
					Стр.Партнер 			= Получатель.Контакт.Владелец;
					Стр.КонтактноеЛицо  	= Получатель.Контакт;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаКЛТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(,Получатель.Контакт,Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаКЛТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;		
					
				ИначеЕсли  ТипЗнч(Получатель.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
					
					Стр 					= Объект.СвоиЛица.Добавить();
					Стр.Лицо 				= Получатель.Контакт;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаПользовательТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПользователей(Получатель.Контакт, Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаПользовательТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;		
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого Получатель Из Объект.ДокументОснование.ПолучателиСкрытыхКопий Цикл
			Если Получатель.Контакт = Объект.Партнер ИЛИ Объект.КонтактноеЛицо = Получатель.Контакт Тогда
				Продолжить;
				Иначе			Если ТипЗнч(Получатель.Контакт) 	= Тип("СправочникСсылка.Партнеры") Тогда
					
					Стр 					= Объект.СторонниеЛица.Добавить();
					Стр.Партнер 			= Получатель.Контакт;
					Стр.КонтактноеЛицо  	= Получатель.Контакт.CRM_ОсновноеКонтактноеЛицо;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаПартнерТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Получатель.Контакт,,Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаПартнерТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли  ТипЗнч(Получатель.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					
					Стр 					= Объект.СторонниеЛица.Добавить();
					Стр.Партнер 			= Получатель.Контакт.Владелец;
					Стр.КонтактноеЛицо  	= Получатель.Контакт;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаКЛТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(,Получатель.Контакт,Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаКЛТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли  ТипЗнч(Получатель.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
					
					Стр 					= Объект.СвоиЛица.Добавить();
					Стр.Лицо 				= Получатель.Контакт;
					Стр.Адрес				= Получатель.Адрес;
					Стр.ПредставлениеАдреса = Получатель.Представление;
					ТаблицаПользовательТелефон = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПользователей(Получатель.Контакт, Перечисления.ТипыКонтактнойИнформации.Телефон);
					Для каждого Строка Из ТаблицаПользовательТелефон Цикл
						Если Строка.CRM_ОсновнойДляСвязи ИЛИ Строка.Вид.CRM_Основной ИЛИ Строка.Вид.CRM_ИспользоватьДляОповещений Тогда
							Стр.Телефон = Строка.Представление;
							Прервать;
						КонецЕсли;
					КонецЦикла;		
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	CRM_ОбщегоНазначенияКлиентСервер.ПроверкаНаДублиВТЧ(Объект.СвоиЛица);
	CRM_ОбщегоНазначенияКлиентСервер.ПроверкаНаДублиВТЧ(Объект.СторонниеЛица);
	
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	//ИмяТабличнойЧасти  = "Запасы";
	//ЕстьХарактеристики = Истина;
	//ЕстьПартии		   = Ложь;
	//
	//ПараметрыПодбора = Новый Структура;
	//
	//ПараметрыПодбора.Вставить("Период",					Объект.Дата);
	//ПараметрыПодбора.Вставить("Организация",			Объект.Организация);
	//ПараметрыПодбора.Вставить("ВидСкидкиНаценки",		Объект.ВидСкидкиНаценки);
	//ПараметрыПодбора.Вставить("ВидЦен",					Объект.ВидЦен);
	//ПараметрыПодбора.Вставить("Валюта",					Объект.ВалютаДокумента);
	//ПараметрыПодбора.Вставить("СуммаВключаетНДС",		Объект.СуммаВключаетНДС);
	//ПараметрыПодбора.Вставить("ОрганизацияДокумента",	Объект.Организация);
	//ПараметрыПодбора.Вставить("ИспользуетсяСодержание",	Истина);
	//ПараметрыПодбора.Вставить("ВыбиратьГруппу",			Истина);
	//
	//Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
	//	АдресЗапасовВХранилище = ПоместитьЗапасыВХранилище(ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
	//	ПараметрыПодбора.Вставить("АдресЗапасовДокумента", АдресЗапасовВХранилище);
	//КонецЕсли;
	//
	//ТипНоменклатуры = Новый СписокЗначений;
	//Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
	//	Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
	//		Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
	//			Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
	//				ТипНоменклатуры.Добавить(ЭлементФиксМассива);
	//			КонецЦикла;
	//		Иначе
	//			ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	//
	//ФормаПодбора = ПолучитьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	//	
	//РезультатВыбора = ФормаПодбора.ОткрытьМодально();
	//
	//Если РезультатВыбора <> Неопределено Тогда
	//	АдресЗапасовВХранилище = ФормаПодбора.ЗаписатьПодборВХранилище();
	//КонецЕсли;

	////АдресЗапасовВХранилище = ОткрытьФормуМодально("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора);
	//
	//Если ЗначениеЗаполнено(АдресЗапасовВХранилище) Тогда
	//	ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
	//КонецЕсли;
	//
КонецПроцедуры // Подбор()

&НаКлиенте
Процедура СторонниеЛицаПартнерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ДоступностьПервичногоИнтереса();
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаПослеУдаления(Элемент)
	ДоступностьПервичногоИнтереса();
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда	
		
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			
			ТекДанные = Объект.СторонниеЛица.Добавить();
			ТекДанные.Партнер = ЭлементМассива;
			ТекДанные.КонтактноеЛицо = ВернутьКЛПартнера(ТекДанные.Партнер);
			СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо), 
				ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
			Если СписокАдресов.Количество() > 0 Тогда
				Адрес = СписокАдресов[0].Значение;
				Если НЕ Адрес.Количество() = 0 Тогда
					ТекДанные.Адрес					= Адрес.Представление;
					ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Партнер,Строка(ТекДанные.Партнер),Строка(ТекДанные.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
					ТекДанные.Принадлежность = (Адрес.Объект = ТекДанные.КонтактноеЛицо);
				Иначе
					ТекДанные.Адрес					= "";
					ТекДанные.ПредставлениеАдреса	= "";
					ТекДанные.Принадлежность = Ложь;
				КонецЕсли;
			Иначе
				ТекДанные.Адрес					= "";
				ТекДанные.ПредставлениеАдреса	= "";
				ТекДанные.Принадлежность = Ложь;
			КонецЕсли;
			
			СписокТелефонов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо), 
				ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
			Если СписокТелефонов.Количество() > 0 Тогда
				Телефон = СписокТелефонов[0].Значение;
				Если НЕ Телефон.Количество() = 0 Тогда
					ТекДанные.Телефон = Телефон.Представление;
				Иначе
					ТекДанные.Телефон = "";
				КонецЕсли;
			Иначе
				ТекДанные.Телефон	= "";
			КонецЕсли;
			
		КонецЦикла;		
	КонецЕсли;		
		
КонецПроцедуры


&НаКлиенте
Процедура ОписаниеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	ИначеЕсли НЕ ПустаяСтрока(Объект.Тема) Тогда
		Возврат;
	КонецЕсли;
	Объект.Описание = Текст;
	// Формируем тему из описания
	врСтрока = СтрЗаменить(СокрЛП(Текст), Символы.ПС, " ");
	врСтрока = СтрЗаменить(врСтрока, "  ", " ");
	ДлинаСтроки = СтрДлина(врСтрока);
	Если ДлинаСтроки > 100 Тогда
		мТема = Лев(врСтрока, 100);
		ПоследнийСимвол = Сред(врСтрока, 100, 1);
		Если ПоследнийСимвол = " " Тогда
			мТема = мТема + "...";	
		Иначе	
			врСтрока = Сред(врСтрока, 101);
			ПозицяПробела = Найти(врСтрока, " ");
			Если ПозицяПробела = 0 Тогда
				мТема = мТема + врСтрока;
			Иначе
				мТема = мТема + Лев(врСтрока, ПозицяПробела) + "...";	
			КонецЕсли;	
		КонецЕсли;
	Иначе	
		мТема = врСтрока;
	КонецЕсли;
	Объект.Тема = мТема;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодобратьУчастников(Команда)
	ПодборУчастников();
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтактныеЛицаПартнера(Партнер)
	
	 КонтактныеЛица = Новый СписокЗначений;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	КонтактныеЛицаПартнеров.Ссылка
	                |ИЗ
	                |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	                |ГДЕ
	                |	КонтактныеЛицаПартнеров.Владелец = &Владелец
	                |	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления";
	 
	 Запрос.УстановитьПараметр("Владелец",Партнер);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
	 	 КонтактныеЛица.Добавить(Выборка.Ссылка);
			 
	 КонецЦикла;
	 
	 Возврат КонтактныеЛица;
	
КонецФункции

// +СофтФон

&НаКлиенте
// Функция возвращает список участников.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений	- Список участников.
//
Функция ПолучитьСписокУчастников()
	СписокУчастников = Новый СписокЗначений;
	СписокУчастников.Добавить(Объект.Партнер);
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		СписокУчастников.Добавить(Объект.КонтактноеЛицо);
	Иначе
		Для Каждого КонтактноеЛицо Из ПолучитьКонтактныеЛицаПартнера(Объект.Партнер) Цикл
			СписокУчастников.Добавить(КонтактноеЛицо.Значение);
		КонецЦикла;
	КонецЕсли;
	Для Каждого СтороннееЛицо Из Объект.СторонниеЛица Цикл
		Если СписокУчастников.НайтиПоЗначению(СтороннееЛицо.Партнер) = Неопределено Тогда
			СписокУчастников.Добавить(СтороннееЛицо.Партнер);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтороннееЛицо.КонтактноеЛицо) Тогда
			Если СписокУчастников.НайтиПоЗначению(СтороннееЛицо.КонтактноеЛицо) = Неопределено Тогда
				СписокУчастников.Добавить(СтороннееЛицо.КонтактноеЛицо);
			КонецЕсли;
		Иначе
			Для Каждого КонтактноеЛицо Из ПолучитьКонтактныеЛицаПартнера(СтороннееЛицо.Партнер) Цикл
				Если СписокУчастников.НайтиПоЗначению(КонтактноеЛицо) = Неопределено Тогда
					СписокУчастников.Добавить(КонтактноеЛицо.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СвоеЛицо Из Объект.СвоиЛица Цикл
		СписокУчастников.Добавить(СвоеЛицо.Лицо);
	КонецЦикла;
	Возврат СписокУчастников;
КонецФункции // ПолучитьСписокУчастников()

&НаКлиенте
// Процедура - обработчик команды формы "Позвонить".
//
Процедура Позвонить(Команда)
	#Если Вебклиент Тогда
	Состояние(Нстр("ru = 'Работа СофтФона невозможна в web-клиенте!'"));
	#Иначе
	сфпИдентификаторСобытия = "";
	Если (Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок"))
		И (Объект.ВходящееИсходящее =  ПредопределенноеЗначение("Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее"))
		И ((Объект.СостояниеСобытия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.ВРаботе")) ИЛИ (Объект.СостояниеСобытия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано"))) Тогда
		Если Объект.сфпИдентификаторЗвонка = 0 Тогда 
			сфпИдентификаторСобытия = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;	
	КонецЕсли;	
	СписокОбъектов = ПолучитьСписокУчастников();
	Если СписокОбъектов.Количество() > 1 Тогда
		сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, сфпИдентификаторСобытия);
	ИначеЕсли (Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок")) И НЕ ПустаяСтрока(Объект.Место) Тогда
		сфпСофтФонПроКлиент.сфпПозвонить(Объект.Место, ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"), сфпИдентификаторСобытия);
	КонецЕсли;	
	#КонецЕсли
КонецПроцедуры // Позвонить()

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" элемента формы "Место".
//
Процедура МестоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок") Тогда 
		сфпНомерБезВладельца = Истина;
		Объект.Место = Элементы.Место.ТекстРедактирования;
		Элементы.сфпДобавитьТелефон.Видимость = (сфпНомерБезВладельца И ЗначениеЗаполнено(Объект.Партнер));
	КонецЕсли;	
КонецПроцедуры // МестоОкончаниеВводаТекста()

// -СофтФон

&НаКлиенте
Процедура СоздатьПартнера(Команда)
	
	СтруктураПараметры = Новый Структура;
	// +СофтФон
	Телефон = ОчиститьНомерТелефонаПриВводеНаОсновании(Объект.Место);
	СтруктураПараметры.Вставить("Телефон", Телефон);
	// -СофтФон
	
	бИспользоватьПомощник = (CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьПомощникВводаНовогоКлиента") = Истина);
	
	Если бИспользоватьПомощник Тогда
		
		CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, СтруктураПараметры);
		
	Иначе
		ФормаПартнера = ПолучитьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураПараметры), ЭтотОбъект);
		Если СтруктураПараметры.Свойство("Наименование") Тогда
			Если Не ЗначениеЗаполнено(ФормаПартнера.Объект.Наименование) Тогда
				ФормаПартнера.Объект.Наименование = СтруктураПараметры.Наименование;
			КонецЕсли;
		КонецЕсли;
		ФормаПартнера.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьМесто(Команда)
	ПодборМеста();
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ТекущаяСтрока = Элементы.СторонниеЛица.ТекущиеДанные;
	
	СписокТелефонов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(Новый Структура("Партнер,КонтактноеЛицо",ТекущаяСтрока.Партнер,ТекущаяСтрока.КонтактноеЛицо),
																						ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	ЭлементСписка = СписокТелефонов.ВыбратьЭлемент("Выберите телефон");
	
	Если ЭлементСписка = Неопределено Тогда Возврат; КонецЕсли;
	
	ТелефонныйНомер = ЭлементСписка.Значение;
	Если Не ТелефонныйНомер.Количество() = 0 Тогда
		ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	ТекущаяСтрока = Элементы.СторонниеЛица.ТекущиеДанные;
	
	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(Новый Структура("Партнер,КонтактноеЛицо",ТекущаяСтрока.Партнер,ТекущаяСтрока.КонтактноеЛицо),
																					  ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	
	ЭлементСписка = СписокАдресов.ВыбратьЭлемент("Выберите адрес");
	
	Если ЭлементСписка = Неопределено Тогда Возврат; КонецЕсли;
	
	Адрес = ЭлементСписка.Значение;
	Если Не Адрес.Количество() = 0 Тогда
		ТекущаяСтрока.Адрес = Адрес.Представление;
		ТекущаяСтрока.ПредставлениеАдреса	= ?(Адрес.Объект = ТекущаяСтрока.Партнер,Строка(ТекущаяСтрока.Партнер),Строка(ТекущаяСтрока.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
		ТекущаяСтрока.Принадлежность = (Адрес.Объект = ТекущаяСтрока.КонтактноеЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаАдресПриИзменении(Элемент)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(ВыбранноеЗначение));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаАдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.СторонниеЛица.ТекущиеДанные;
	ТекДанные.ПредставлениеАдреса	= Строка(ТекДанные.Партнер) + " <" + Текст + ">";
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПартнераКонтактногоЛица(ТекущаяСтрока, ПодставлятьКонтактноеЛицо = Ложь)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Партнер) Тогда
		Если ПодставлятьКонтактноеЛицо Тогда
			ТекущаяСтрока.КонтактноеЛицо = ВернутьКЛПартнера(ТекущаяСтрока.Партнер);
		КонецЕсли;
		
		// телефон
		Если ИспользоватьОповещенияСМС Тогда
		
			СписокТелефонов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(Новый Структура("Партнер,КонтактноеЛицо",ТекущаяСтрока.Партнер,ТекущаяСтрока.КонтактноеЛицо),
																								ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
			Если СписокТелефонов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокТелефонов Цикл
					Если ЭлементСписка.Пометка Тогда
						ТелефонныйНомер = ЭлементСписка.Значение;
						Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
							ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
						Иначе
							ТекущаяСтрока.Телефон = "";
						КонецЕсли;
						
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЕстьДляОповещений Тогда
					ТелефонныйНомер = СписокТелефонов[0].Значение;
					Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
						ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
					Иначе
						ТекущаяСтрока.Телефон = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Телефон = "";
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Телефон = "";
		КонецЕсли;
		
		// е-майл
		Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
			СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(Новый Структура("Партнер,КонтактноеЛицо",ТекущаяСтрока.Партнер,ТекущаяСтрока.КонтактноеЛицо),
																							  ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
			Если СписокАдресов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокАдресов Цикл
					Если ЭлементСписка.Пометка Тогда
						Адрес = ЭлементСписка.Значение;
						Если НЕ Адрес.Количество() = 0 Тогда
							ТекущаяСтрока.Адрес					= Адрес.Представление;
							ТекущаяСтрока.ПредставлениеАдреса	= ?(Адрес.Объект = ТекущаяСтрока.Партнер,Строка(ТекущаяСтрока.Партнер),Строка(ТекущаяСтрока.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
							ТекущаяСтрока.Принадлежность = (Адрес.Объект = ТекущаяСтрока.КонтактноеЛицо);
						Иначе
							ТекущаяСтрока.Адрес					= "";
							ТекущаяСтрока.ПредставлениеАдреса	= "";
							ТекущаяСтрока.Принадлежность = Ложь;
						КонецЕсли;
						
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЕстьДляОповещений Тогда
					Адрес = СписокАдресов[0].Значение;
					Если НЕ Адрес.Количество() = 0 Тогда
						ТекущаяСтрока.Адрес					= Адрес.Представление;
						ТекущаяСтрока.ПредставлениеАдреса	= ?(Адрес.Объект = ТекущаяСтрока.Партнер,Строка(ТекущаяСтрока.Партнер),Строка(ТекущаяСтрока.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
						ТекущаяСтрока.Принадлежность = (Адрес.Объект = ТекущаяСтрока.КонтактноеЛицо);
					Иначе
						ТекущаяСтрока.Адрес					= "";
						ТекущаяСтрока.ПредставлениеАдреса	= "";
						ТекущаяСтрока.Принадлежность = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Адрес					= "";
				ТекущаяСтрока.ПредставлениеАдреса	= "";
				ТекущаяСтрока.Принадлежность = Ложь;
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Адрес					= "";
			ТекущаяСтрока.ПредставлениеАдреса	= "";
			ТекущаяСтрока.Принадлежность = Ложь;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Телефон = "";
		ТекущаяСтрока.Адрес					= "";
		ТекущаяСтрока.ПредставлениеАдреса	= "";
		ТекущаяСтрока.Принадлежность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаПартнерПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СторонниеЛица.ТекущиеДанные;
	ПриИзмененииПартнераКонтактногоЛица(ТекущаяСтрока, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаКонтактноеЛицоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СторонниеЛица.ТекущиеДанные;
	ПриИзмененииПартнераКонтактногоЛица(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЛица(ТекущаяСтрока)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Лицо) Тогда
		
		// телефон
		Если ИспользоватьОповещенияСМС Тогда
			СписокТелефонов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(Новый Структура("ОбъектКонтактнойИнформации",ТекущаяСтрока.Лицо),
																								ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
			Если СписокТелефонов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокТелефонов Цикл
					Если ЭлементСписка.Пометка Тогда
						ТелефонныйНомер = ЭлементСписка.Значение;
						Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
							ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
						Иначе
							ТекущаяСтрока.Телефон = "";
						КонецЕсли;
						
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЕстьДляОповещений Тогда
					ТелефонныйНомер = СписокТелефонов[0].Значение;
					Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
						ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
					Иначе
						ТекущаяСтрока.Телефон = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Телефон = "";
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Телефон = "";
		КонецЕсли;
		
		// е-майл
		Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
			СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(Новый Структура("ОбъектКонтактнойИнформации",ТекущаяСтрока.Лицо),
																							  ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
			Если СписокАдресов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокАдресов Цикл
					Если ЭлементСписка.Пометка Тогда
						Адрес = ЭлементСписка.Значение;
						Если НЕ Адрес.Количество() = 0 Тогда
							ТекущаяСтрока.Адрес					= Адрес.Представление;
							ТекущаяСтрока.ПредставлениеАдреса	= Строка(ТекущаяСтрока.Лицо) + " <" + Адрес.Представление + ">";
						Иначе
							ТекущаяСтрока.Адрес					= "";
							ТекущаяСтрока.ПредставлениеАдреса	= "";
						КонецЕсли;
						
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЕстьДляОповещений Тогда
					Адрес = СписокАдресов[0].Значение;
					Если НЕ Адрес.Количество() = 0 Тогда
						ТекущаяСтрока.Адрес					= Адрес.Представление;
						ТекущаяСтрока.ПредставлениеАдреса	= Строка(ТекущаяСтрока.Лицо) + " <" + Адрес.Представление + ">";
					Иначе
						ТекущаяСтрока.Адрес					= "";
						ТекущаяСтрока.ПредставлениеАдреса	= "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Адрес					= "";
				ТекущаяСтрока.ПредставлениеАдреса	= "";
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Адрес					= "";
			ТекущаяСтрока.ПредставлениеАдреса	= "";
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Телефон = "";
		ТекущаяСтрока.Адрес					= "";
		ТекущаяСтрока.ПредставлениеАдреса	= "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаЛицоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СвоиЛица.ТекущиеДанные;
	ПриИзмененииЛица(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ТекущаяСтрока = Элементы.СвоиЛица.ТекущиеДанные;
	
	СписокТелефонов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(Новый Структура("ОбъектКонтактнойИнформации",ТекущаяСтрока.Лицо),
																						ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	ЭлементСписка = СписокТелефонов.ВыбратьЭлемент("Выберите телефон");
	
	Если ЭлементСписка = Неопределено Тогда Возврат; КонецЕсли;
	
	ТелефонныйНомер = ЭлементСписка.Значение;
	Если Не ТелефонныйНомер.Количество() = 0 Тогда
		ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление;
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура СвоиЛицаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	ТекущаяСтрока = Элементы.СвоиЛица.ТекущиеДанные;
	
	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(Новый Структура("ОбъектКонтактнойИнформации",ТекущаяСтрока.Лицо),
																					  ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	
	ЭлементСписка = СписокАдресов.ВыбратьЭлемент("Выберите адрес");
	
	Если ЭлементСписка = Неопределено Тогда Возврат; КонецЕсли;
	
	Адрес = ЭлементСписка.Значение;
	Если Не Адрес.Количество() = 0 Тогда
		ТекущаяСтрока.Адрес = Адрес.Представление;
		ТекущаяСтрока.ПредставлениеАдреса	= Строка(ТекущаяСтрока.Лицо) + " <" + Адрес.Представление + ">";
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура СвоиЛицаАдресПриИзменении(Элемент)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры
 
&НаКлиенте
Процедура СвоиЛицаАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(ВыбранноеЗначение));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры
 
&НаКлиенте
Процедура СвоиЛицаАдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.СвоиЛица.ТекущиеДанные;
	ТекДанные.ПредставлениеАдреса	= Строка(ТекДанные.Лицо) + " <" + Текст + ">";
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТрудозатратыНажатие(Элемент)
	ОсновнойПроизводственныйКалендарь = CRM_ОбщегоНазначенияСервер.ПолучитьОсновнойПроизводственныйКалендарь();
	Если ЗначениеЗаполнено(ОсновнойПроизводственныйКалендарь) Тогда
		ОткрытьФорму("Справочник.Календари.ФормаОбъекта", Новый Структура("Ключ", ОсновнойПроизводственныйКалендарь), ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Лицо = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьФизЛицо(Команда)
	//Элементы.СвоиЛица.ДобавитьСтроку();
	//Элементы.СвоиЛица.ТекущиеДанные.Лицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	//Результат = ОткрытьФормуМодально("Справочник.ФизическиеЛица.ФормаВыбора", Новый Структура("Ключ", Элементы.СвоиЛица.ТекущиеДанные.Лицо), ЭтотОбъект);
	//Если ЗначениеЗаполнено(Результат) Тогда
	//	Элементы.СвоиЛица.ТекущиеДанные.Лицо = Результат;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(ИмяТаблицы)
	//Если Объект[ИмяТаблицы].Количество() > 0 Тогда
	//	Ответ = Вопрос(НСтр("ru = 'Табличная часть содержит записи. Продолжить?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	//							
	//	Если Ответ = КодВозвратаДиалога.Нет Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Объект[ИмяТаблицы].Очистить();
	//	Модифицированность = Истина;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаОчиститьТЧ(Команда)
	ОчиститьТабличнуюЧасть("СвоиЛица");	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаОчиститьТЧ(Команда)	
	ОчиститьТабличнуюЧасть("СторонниеЛица");
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля ввода "Тема".
//
Процедура ТемаПриИзменении(Элемент)
	Объект.Тема = СтрЗаменить(Объект.Тема, "¶", " ");
	Объект.Тема = СтрЗаменить(Объект.Тема, Символы.ПС, " ");
	Объект.Тема = СтрЗаменить(Объект.Тема, "  ", " ");
КонецПроцедуры // ТемаПриИзменении()

&НаКлиенте
Процедура РедактироватьТрудозатратыВручнуюПриИзменении(Элемент)
	Элементы.Трудозатраты.ТолькоПросмотр		= НЕ Объект.РедактироватьТрудозатратыВручную;
	Элементы.ДекорацияТрудозатраты.Видимость	= НЕ Объект.РедактироватьТрудозатратыВручную;
	РасчетТрудозатрат();
	ПеревестиТрудозатратыВЧасыМинуты(ЭтотОбъект)	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКомандПодключаемыхОтчетовИОбработок

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПроцедурыИФункцииПервичногоИнтереса

&НаСервереБезКонтекста
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции

&НаСервере
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру(ДатаАктуальности)
	
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	пПартнер = Неопределено;
	
	пПартнер = Объект.Партнер;
	
	Если ЗначениеЗаполнено(пПартнер) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата,,пПартнер);
		Если ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
			
			СтрокаПервичногоИнтереса = ПервичныйИнтерес.Вставить(0);
			ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса,Интерес);
			СтрокаПервичногоИнтереса.Актуальность = Истина;
			
			Если ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("СправочникСсылка.МаркетинговыеМероприятия") 
			   И ЗначениеЗаполнено(Интерес.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(Объект.Дата);
				ДатаАктуальности = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеКаналаИсточника()
		
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		
		КаналПервичногоИнтереса = Неопределено;
		ИсточникПервичногоИнтереса = Неопределено;
		Элементы.РанееЗарегистрированныйИнтерес.Видимость = ЗначениеЗаполнено(Партнер);
		ПервичныйИнтерес.Очистить();
		ВыводитьНадпись = Ложь;
		
		пПартнер = Объект.Партнер;
		
		Если ЗначениеЗаполнено(пПартнер) Тогда
			АктуальноДо = '00010101';
			ПолучитьПредыдущийПервичныйИнтересПоПартнеру(АктуальноДо);
			
			Интерес = Неопределено;
			Попытка
				
				Интерес = ПервичныйИнтерес.Получить(0);
				
			Исключение	КонецПопытки;
			
			РанееНеЗарегистровано = Ложь;
			Если Интерес <> Неопределено И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
				ВыводитьНадпись = Истина;
					Надпись = "";
					CRM_МаркетингСервер.СформироватьНадписьПервичногоИнтереса(Объект.Ссылка, Интерес, АктуальноДо, Надпись, ВыводитьНадпись);
					Элементы.РанееЗарегистрированныйИнтерес.Заголовок = Надпись;
			КонецЕсли;
			
			Элементы.РанееЗарегистрированныйИнтерес.Видимость = ВыводитьНадпись;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	
	// Определить канал и источник первичного интереса.
	пПартнер = Объект.Партнер;
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			
			Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата,Объект.Ссылка,пПартнер);
			
			КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса);
			
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПервичныйИнтерес(ТекущийОбъект)
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		
		Участники = Новый ТаблицаЗначений;
		Участники.Колонки.Добавить("Партнер");
		Если ТипЗнч(ТекущийОбъект.Ссылка) = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
			
			мСторонниеЛица = ТекущийОбъект.СторонниеЛица.ВыгрузитьКолонку("Партнер");
			Для каждого Лицо Из мСторонниеЛица Цикл
				
				Участник = Участники.Добавить();
				Участник.Партнер = Лицо;
				
			КонецЦикла;
			
		КонецЕсли;
		пПартнер = Объект.Партнер;
		Участник = Участники.Добавить();
		Участник.Партнер = пПартнер;
		Участники.Свернуть("Партнер");
		
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущийОбъект.Дата);
		НаборЗаписей.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
			
			Если (Не ЗначениеЗаполнено(ИсточникПервичногоИнтереса) 
				И ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) 
				= Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))
				ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				Тогда
				Для каждого Уч Из Участники Цикл
					
					Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ИсточникиПервичногоИнтереса.Период КАК Период
					|ИЗ
					|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
					|ГДЕ
					|	ИсточникиПервичногоИнтереса.Сделка = &Сделка
					|	И ИсточникиПервичногоИнтереса.Партнер = &Партнер
					|");
					Запрос.УстановитьПараметр("Сделка", ТекущийОбъект.Ссылка);
					Запрос.УстановитьПараметр("Партнер", Уч.Партнер);
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Период = Выборка.Период;
						МенеджерЗаписи.Сделка = ТекущийОбъект.Ссылка;
						МенеджерЗаписи.Партнер = Уч.Партнер;
						МенеджерЗаписи.Удалить();
					КонецЦикла;
					
					Запись = НаборЗаписей.Добавить();
					Запись.Период						= ТекущийОбъект.Дата;
					Запись.Партнер						= Уч.Партнер;
					Запись.Сделка						= ТекущийОбъект.Ссылка;
					Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
					Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
				
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЕсли;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьПервичногоИнтереса()
	
	Актуальность = Ложь;
	ПредыдущийИсточник = Неопределено;
	Попытка
		ПредыдущийИсточник = ПервичныйИнтерес.Получить(0);
	Исключение КонецПопытки;
	Если ПредыдущийИсточник <> Неопределено Тогда
	
		Актуальность = ПредыдущийИсточник.Актуальность;
	
	КонецЕсли;
	
	пПартнер = Объект.Партнер;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
		НаличиеУчастников = ?(Объект.СторонниеЛица.Количество() > 0 ИЛИ ЗначениеЗаполнено(пПартнер),Истина,Ложь);
	Иначе
		НаличиеУчастников = ?(ЗначениеЗаполнено(пПартнер),Истина,Ложь);
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр Тогда
		Если НаличиеУчастников Тогда
			Элементы.КаналПервичногоИнтереса.Доступность = Истина;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.КаналПервичногоИнтереса.Доступность = Ложь;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр = Истина;
			Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
					И ТипПВХ(КаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
			Элементы.ИсточникПервичногоИнтереса.Доступность = Истина;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
		// Отметки незаполненного
		
	Если Актуальность = Истина И Не ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	ИначеЕсли Актуальность = Ложь 
		И Не ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		// Если обязательно заполнять актуальный источник привлечения, тогда подсвечиваем канал первичного интереса.
		Если ЗаполнятьПервичныйИнтерес Тогда
		
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Истина;
		
		Иначе
		
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
		
		КонецЕсли;
		
	КонецЕсли;
	
	//Если Канал
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса)
		И Не ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
		Тогда
		
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
				И ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
		
		Входящее = ?(ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УдалитьCRM_Событие") И Объект.ВходящееИсходящее = ПредопределенноеЗначение("Перечисление.CRM_ВходящееИсходящееСобытие.Входящее"),Истина,Ложь);
		Если Не Входящее Тогда
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЗаполнения(ПроверяемыеРеквизиты)
	Входящее		= Истина;
	Актуальность	= Ложь;
	
	пПартнер = Объект.Партнер;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.УдалитьCRM_Событие") Тогда
		НаличиеУчастников = ?(Объект.СторонниеЛица.Количество() > 0 ИЛИ ЗначениеЗаполнено(пПартнер),Истина,Ложь);
		Входящее = ?(Объект.ВходящееИсходящее = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее,Истина,Ложь);
	Иначе
		НаличиеУчастников = ?(ЗначениеЗаполнено(пПартнер),Истина,Ложь);
	КонецЕсли;
	Попытка
		ПредыдущийИсточник = ПервичныйИнтерес.Получить(0);
	Исключение КонецПопытки;
	Если НЕ (ПредыдущийИсточник = Неопределено) Тогда
		Актуальность = ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если НЕ ЗаполнятьПервичныйИнтерес ИЛИ НЕ Входящее Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"КаналПервичногоИнтереса");
	КонецЕсли;
	Если НаличиеУчастников Тогда
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
			Если ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
				УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
			КонецЕсли;
		Иначе
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
		КонецЕсли;
	Иначе
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
	КонецЕсли;
	Если НЕ Элементы.ГруппаОписание.Видимость Или Не Элементы.КаналПервичногоИнтереса.Видимость Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"КаналПервичногоИнтереса");
	КонецЕсли;
	Если Не Элементы.ГруппаОписание.Видимость Или Не Элементы.ИсточникПервичногоИнтереса.Видимость Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
	КонецЕсли;
	ТабПервичныйИнтерес = Неопределено;
	Попытка
		ТабПервичныйИнтерес = ПервичныйИнтерес.Получить(0);
	Исключение
	КонецПопытки;
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
	Для Каждого ЗначениеСписка Из СписокДополнительныхРеквизитовОбязательныхДляЗаполнения Цикл
		Если ПроверяемыеРеквизиты.Найти(ЗначениеСписка.Значение) = Неопределено Тогда
			ПроверяемыеРеквизиты.Добавить(ЗначениеСписка.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШаблонов

&НаСервере
Процедура ЗагрузитьИзШаблонаНаСервере(ШаблонОбъект)
	
	ОписаниеРеквизитов = ПолучитьРеквизиты("Объект");
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	CRM_ШаблоныОбъектов.ЗаполнитьПредставлениеОбъекта(ШаблонОбъект,ОбъектЗначение,ОписаниеРеквизитов);
	ЗначениеВДанныеФормы(ОбъектЗначение,Объект);
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	Объект.Шаблон = ШаблонОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзШаблона(Команда)
	
	СсылкаНаОбъект = Объект.Ссылка;
	сПараметры = Новый Структура("Ссылка, Форма", СсылкаНаОбъект, ЭтотОбъект);
	CRM_ШаблоныОбъектовКлиент.ЗагрузитьИзШаблонаНаКлиенте(сПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляВыгрузки()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	ОбъектСтруктура = Новый Структура("ОбъектЗначение", ОбъектЗначение);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектСтруктура, УникальныйИдентификатор);
	
	Возврат Новый Структура("ЗначенияЗаполнения",Новый Структура("Объект,ТипФормы",АдресВХранилище,"ФормаДокумента"));
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыгрузитьВШаблон(Команда)
	
	ОткрытьФорму("Справочник.CRM_ШаблоныОбъектов.ФормаОбъекта",ПолучитьПараметрыДляВыгрузки(),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ПечатьВнешнегоМакета(Команда)
	
	ИмяМакета = СтрЗаменить(Команда.Имя, "Печать_", "");
	
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.Добавить(Объект.Ссылка);
	
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерОчистка(Элемент, СтандартнаяОбработка)
	// +СофтФон
	Если Объект.Помещение = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка") Тогда
		Если ЗначениеЗаполнено(Объект.Место) Тогда
			Если Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок") Тогда
				Если НЕ сфпНомерБезВладельца Тогда
					Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
						Объект.Место = "";
					КонецЕсли;	
				КонецЕсли;	
			ИначеЕсли сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
				Объект.Место = "";
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	Элементы.КнопкаПартнерОткрытьВCoMagic.Видимость = Ложь;
	// -СофтФон
КонецПроцедуры

&НаКлиенте
Процедура ПартнерСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		СоздатьПартнераПоНаименованию(Элемент.ТекстРедактирования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	// +СофтФон
	Если Объект.Помещение = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка") Тогда
		Если ЗначениеЗаполнено(Объект.Место) Тогда
			Если Объект.ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок") Тогда
				Если НЕ сфпНомерБезВладельца Тогда
					Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
						Объект.Место = "";
					КонецЕсли;	
				КонецЕсли;	
			ИначеЕсли сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
				Объект.Место = "";
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	Элементы.КнопкаКонтактноеЛицоОткрытьCoMagic.Видимость = Ложь;
	// -СофтФон
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеФлажка(ИмяТЧ,ИмяПолЯ = Неопределено,ЗначениеФлажка)
	
	Для Каждого ЭлементКоллекции Из Объект[ИмяТЧ] Цикл
		
		Если ИмяПолЯ = Неопределено Тогда
			Если ИспользоватьНапоминания И ИмяТЧ = "СвоиЛица" Тогда
				ЭлементКоллекции.ОтправлятьНапоминания = ЗначениеФлажка;
			КонецЕсли;
			
			Если ИспользоватьОповещенияСМС Тогда
				ЭлементКоллекции.ОтправлятьСМС = ЗначениеФлажка;
			КонецЕсли;
			
			Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
				ЭлементКоллекции.ОтправлятьПоПочте = ЗначениеФлажка;
			КонецЕсли;
			
		Иначе
			ЭлементКоллекции[ИмяПолЯ] = ЗначениеФлажка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Если Команда.Имя = "СторонниеЛицаУстановитьФлажки" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица",,Истина);
	КонецЕсли;
	
	Если Команда.Имя = "СторонниеЛицаУстановитьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица","ОтправлятьСМС",Истина);
	КонецЕсли;
	
	Если Команда.Имя = "СторонниеЛицаУстановитьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица","ОтправлятьПоПочте",Истина);
	КонецЕсли;
	
	Если Команда.Имя = "СвоиЛицаУстановитьФлажки" Тогда
		УстановитьЗначениеФлажка("СвоиЛица",,Истина);
	КонецЕсли;
	
	Если Команда.Имя = "СвоиЛицаУстановитьФлажкиНапоминания" Тогда
		УстановитьЗначениеФлажка("СвоиЛица","ОтправлятьНапоминания",Истина);
	КонецЕсли;
	
	Если Команда.Имя = "СвоиЛицаУстановитьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СвоиЛица","ОтправлятьСМС",Истина);
	КонецЕсли;
	
	Если Команда.Имя = "СвоиЛицаУстановитьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СвоиЛица","ОтправлятьПоПочте",Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Если Команда.Имя = "СторонниеЛицаСнятьФлажки" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица",,Ложь);
	КонецЕсли;
	
	Если Команда.Имя = "СторонниеЛицаСнятьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица","ОтправлятьСМС",Ложь);
	КонецЕсли;
	
	Если Команда.Имя = "СторонниеЛицаСнятьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица","ОтправлятьПоПочте",Ложь);
	КонецЕсли;
	
	Если Команда.Имя = "СвоиЛицаСнятьФлажки" Тогда
		УстановитьЗначениеФлажка("СвоиЛица",,Ложь);
	КонецЕсли;
	
	Если Команда.Имя = "СвоиЛицаСнятьФлажкиНапоминания" Тогда
		УстановитьЗначениеФлажка("СвоиЛица","ОтправлятьНапоминания",Ложь);
	КонецЕсли;
	
	Если Команда.Имя = "СвоиЛицаСнятьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СвоиЛица","ОтправлятьСМС",Ложь);
	КонецЕсли;
	
	Если Команда.Имя = "СвоиЛицаСнятьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СвоиЛица","ОтправлятьПоПочте",Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементовГруппыБизнесПроцесс()
	
	Если НЕ _ПоказатьРазделБППометка Тогда

		Элементы.ГруппаБизнесПроцессСвязать.Видимость			= ИспользоватьБизнесПроцессы И (ЗначениеЗаполнено(Объект.Партнер) И (_ЭтоВведенныйНаОсновании ИЛИ (_ЕстьБизнесПроцессыДляВыбора И НЕ _ЭтоВведенныйНаОсновании)));
		Элементы._БизнесПроцесс.ТолькоПросмотр					= _ЭтоВведенныйНаОсновании;
		Элементы.ВывестиСписокВведенныхНаОсновании.Видимость	= _ЭтоВведенныйНаОсновании;
		Элементы.ПривязатьКБизнесПроцессу.Видимость				= НЕ _ЭтоВведенныйНаОсновании И НЕ _СвязыватьСобытияСБизнесПроцессами;
		Элементы.ПривязатьКБизнесПроцессу.Доступность			= НЕ _ЕстьСвязьСБизнесПроцессом И ЗначениеЗаполнено(_БизнесПроцесс);
		Элементы.СкрытьПоказатьИнформациюОЗадаче.Видимость		= НЕ _ЭтоВведенныйНаОсновании;
		
		Элементы.ГруппаЗадача.Видимость							= Элементы.СкрытьПоказатьИнформациюОЗадаче.Видимость
		И _СкрытьПоказатьИнформациюОЗадачеПометка
		И Элементы.ГруппаБизнесПроцессСвязать.Видимость;
		Элементы.ПринятьЗадачу.Доступность						= _ЗадачаДоступноПользователю И _ЗадачаПринятьКИсполнению И _ЗадачаВыполнить;
		Элементы.ЗадачаЗадачаИсполнителяВыполнено.Доступность	= _ЗадачаДоступноПользователю И _ЗадачаВыполнить;
	Иначе
		Элементы.ГруппаБизнесПроцессСвязать.Видимость			= ИспользоватьБизнесПроцессы И _ПоказатьРазделБППометка;
		Элементы._БизнесПроцесс.ТолькоПросмотр					=  _ЭтоВведенныйНаОсновании;
		Элементы.ВывестиСписокВведенныхНаОсновании.Видимость	=  _ЭтоВведенныйНаОсновании;
		Элементы.ПривязатьКБизнесПроцессу.Видимость				= НЕ _ЭтоВведенныйНаОсновании И НЕ _СвязыватьСобытияСБизнесПроцессами;
		Элементы.ПривязатьКБизнесПроцессу.Доступность			= НЕ _ЕстьСвязьСБизнесПроцессом И ЗначениеЗаполнено(_БизнесПроцесс);
		Элементы.СкрытьПоказатьИнформациюОЗадаче.Видимость		= НЕ _ЭтоВведенныйНаОсновании;
		Элементы.ГруппаЗадача.Видимость							= Элементы.СкрытьПоказатьИнформациюОЗадаче.Видимость
		И _СкрытьПоказатьИнформациюОЗадачеПометка
		И Элементы.ГруппаБизнесПроцессСвязать.Видимость;
		Элементы.ПринятьЗадачу.Доступность						= _ЗадачаДоступноПользователю И _ЗадачаПринятьКИсполнению И _ЗадачаВыполнить;
		Элементы.ЗадачаЗадачаИсполнителяВыполнено.Доступность	= _ЗадачаДоступноПользователю И _ЗадачаВыполнить;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуБизнесПроцесс()
	
	Если ИспользоватьБизнесПроцессы Тогда
		Если Объект.Ссылка.Пустая() Тогда
			Нашли = Ложь;
			
			// Если событие введено на основании объекта, связанного с бизнес-процессом, то подставим в реквизит
			// "_БизнесПроцесс".
			// БП из события основания
			Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				
				ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	CRM_ОбъектыПоБизнесПроцессам.Задача,
				|	CRM_ОбъектыПоБизнесПроцессам.Задача.Выполнена КАК ЗадачаВыполнена
				|ИЗ
				|	РегистрСведений.CRM_ОбъектыПоБизнесПроцессам КАК CRM_ОбъектыПоБизнесПроцессам
				|ГДЕ
				|	CRM_ОбъектыПоБизнесПроцессам.Объект = &Объект
				|
				|УПОРЯДОЧИТЬ ПО
				|	ЗадачаВыполнена";
				
				Запрос = Новый Запрос;
				Запрос.Текст = ТекстЗапроса;
				Запрос.УстановитьПараметр("Объект",Объект.ДокументОснование);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					Нашли = Истина;
					
					_БизнесПроцесс = Выборка.Задача.БизнесПроцесс;
					_ЕстьБизнесПроцессыДляВыбора = Истина;
					
					Если НЕ Выборка.ЗадачаВыполнена Тогда
						_Задача = Выборка.Задача;
					Иначе
						_Задача = ПолучитьЗадачуБизнесПроцесса(_БизнесПроцесс);
						Если НЕ ЗначениеЗаполнено(_Задача) Тогда
							_Задача = Выборка.Задача;
						КонецЕсли;
					КонецЕсли;
					
					ПриИзмененииЗадачи();
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Нашли И ЗначениеЗаполнено(Объект.Партнер) Тогда
		// Если это новое событие, то в качестве бизнес-процесса подставляем бизнес-процесс,
		// у которого проект и клиент равны проекту и клиенту события и он единственный не завершенный
		// бизнес-процесс на текущий момент. Иначе, если бизне-процессов более, чем один или вообще нет,
		// то поле пустое, но можно выбрать руками.
				
				Запрос = Новый Запрос;
				ТекстЗапроса = "ВЫБРАТЬ
				|	CRM_БизнесПроцесс.Ссылка
				|ИЗ
				|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
				|ГДЕ
				|	CRM_БизнесПроцесс.Партнер = &Партнер
				|	И НЕ CRM_БизнесПроцесс.Завершен
				|	И НЕ CRM_БизнесПроцесс.ПометкаУдаления
				|	И CRM_БизнесПроцесс.Стартован";
				Если ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(Объект.Проект.CRM_КартаМаршрута) Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|	И CRM_БизнесПроцесс.Проект = &Проект
					|	И CRM_БизнесПроцесс.КартаМаршрута = &КартаМаршрута";
				КонецЕсли;
				ТекстЗапроса = ТекстЗапроса + "
				|
				|УПОРЯДОЧИТЬ ПО
				|	CRM_БизнесПроцесс.Дата УБЫВ";
				
				Запрос.Текст = ТекстЗапроса;
				Запрос.УстановитьПараметр("Проект"			,Объект.Проект);
				Запрос.УстановитьПараметр("КартаМаршрута"	,Объект.Проект.CRM_КартаМаршрута);
				Запрос.УстановитьПараметр("Партнер"			,Объект.Партнер);
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
					_БизнесПроцесс			= Выборка.Ссылка;
					
					Если ЗначениеЗаполнено(_БизнесПроцесс) Тогда
						_Задача = ПолучитьЗадачуБизнесПроцесса(_БизнесПроцесс);
					Иначе
						_Задача = ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");
					КонецЕсли;
					
					_ЕстьБизнесПроцессыДляВыбора = Истина;
					
					ПриИзмененииЗадачи();
				ИначеЕсли Выборка.Следующий() И Выборка.Количество() > 1 Тогда
					_ЕстьБизнесПроцессыДляВыбора = Истина;
				Иначе
					_ЕстьБизнесПроцессыДляВыбора = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Проект"			,Объект.Проект);
			Запрос.УстановитьПараметр("КартаМаршрута"	,Объект.Проект.CRM_КартаМаршрута);
			Запрос.УстановитьПараметр("Партнер"			,Объект.Партнер);
			Запрос.УстановитьПараметр("Объект"			,Объект.Ссылка);
			
			ТекстЗапроса = "ВЫБРАТЬ
			|	CRM_БизнесПроцесс.Ссылка,
			|	0 КАК ВидСсылки,
			|	CRM_БизнесПроцесс.Дата
			|ПОМЕСТИТЬ ВведенныеНаОсновании
			|ИЗ
			|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
			|ГДЕ
			|	CRM_БизнесПроцесс.Партнер = &Партнер
			|	И НЕ CRM_БизнесПроцесс.ПометкаУдаления
			|	И CRM_БизнесПроцесс.Предмет = &Объект";
			Если ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(Объект.Проект.CRM_КартаМаршрута) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И CRM_БизнесПроцесс.Проект = &Проект
				|	И CRM_БизнесПроцесс.КартаМаршрута = &КартаМаршрута";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	CRM_БизнесПроцесс.Ссылка,
			|	2 КАК ВидСсылки,
			|	CRM_БизнесПроцесс.Дата
			|ПОМЕСТИТЬ ВведенныеПоПроектуКлиенту
			|ИЗ
			|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
			|ГДЕ
			|	CRM_БизнесПроцесс.Партнер = &Партнер
			|	И НЕ CRM_БизнесПроцесс.ПометкаУдаления
			|	И НЕ CRM_БизнесПроцесс.Предмет = &Объект";
			Если ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(Объект.Проект.CRM_КартаМаршрута) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И CRM_БизнесПроцесс.Проект = &Проект
				|	И CRM_БизнесПроцесс.КартаМаршрута = &КартаМаршрута";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	CRM_ОбъектыПоБизнесПроцессам.Задача.Ссылка,
			|	1 КАК ВидСсылки,
			|	CRM_ОбъектыПоБизнесПроцессам.ДатаРегистрации КАК Дата
			|ПОМЕСТИТЬ ОбъектыПоБизнесПроцессам
			|ИЗ
			|	РегистрСведений.CRM_ОбъектыПоБизнесПроцессам КАК CRM_ОбъектыПоБизнесПроцессам
			|ГДЕ
			|	CRM_ОбъектыПоБизнесПроцессам.Объект = &Объект
			|	И НЕ CRM_ОбъектыПоБизнесПроцессам.БизнесПроцесс.ПометкаУдаления
			|	И CRM_ОбъектыПоБизнесПроцессам.БизнесПроцесс.Партнер = &Партнер";
			Если ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(Объект.Проект.CRM_КартаМаршрута) Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И CRM_ОбъектыПоБизнесПроцессам.БизнесПроцесс.Проект = &Проект
				|	И CRM_ОбъектыПоБизнесПроцессам.БизнесПроцесс.КартаМаршрута = &КартаМаршрута";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|УПОРЯДОЧИТЬ ПО
			|	Дата УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВведенныеНаОсновании.Ссылка,
			|	ВведенныеНаОсновании.ВидСсылки КАК ВидСсылки,
			|	ВведенныеНаОсновании.Дата КАК Дата
			|ИЗ
			|	ВведенныеНаОсновании КАК ВведенныеНаОсновании
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВведенныеПоПроектуКлиенту.Ссылка,
			|	ВведенныеПоПроектуКлиенту.ВидСсылки КАК ВидСсылки,
			|	ВведенныеПоПроектуКлиенту.Дата КАК Дата
			|ИЗ
			|	ВведенныеПоПроектуКлиенту КАК ВведенныеПоПроектуКлиенту
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОбъектыПоБизнесПроцессам.ЗадачаСсылка,
			|	ОбъектыПоБизнесПроцессам.ВидСсылки,
			|	ОбъектыПоБизнесПроцессам.Дата
			|ИЗ
			|	ОбъектыПоБизнесПроцессам КАК ОбъектыПоБизнесПроцессам
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидСсылки,
			|	Дата УБЫВ";
			
			Запрос.Текст = ТекстЗапроса;
			Выборка = Запрос.Выполнить().Выбрать();
			
			_ЕстьБизнесПроцессыДляВыбора = (НЕ Выборка.Количество() = 0);
			
			_СписокВведенныхНаОсновании.Очистить();
			
			СписокБизнесПроцессов = Новый СписокЗначений;
			
			ЕстьВведенныйНаОсновании = Ложь;
			Пока Выборка.Следующий() Цикл
				// Если есть бизнес-процесс введенный на основании.
				Если Выборка.ВидСсылки = 0 Тогда
					
					_СписокВведенныхНаОсновании.Добавить(Выборка.Ссылка);
					Если НЕ ЕстьВведенныйНаОсновании Тогда
						_БизнесПроцесс					= Выборка.Ссылка;
						_ЭтоВведенныйНаОсновании		= Истина;
						_ЕстьБизнесПроцессыДляВыбора	= Ложь;
						
						ЕстьВведенныйНаОсновании = Истина;
					КонецЕсли;
				// Если есть бизнес-процесс с которым связано событие.
				ИначеЕсли Выборка.ВидСсылки = 1 Тогда
					Если ЕстьВведенныйНаОсновании Тогда
						Продолжить;
					КонецЕсли;
					
					_БизнесПроцесс				= Выборка.Ссылка.БизнесПроцесс;
					_Задача						= Выборка.Ссылка;
					_ЕстьСвязьСБизнесПроцессом	= Истина;
					
					_ЕстьБизнесПроцессыДляВыбора = Истина;
					
					ПриИзмененииЗадачи();
					Прервать;
				// Возможно открываем ранее записанное событие, которое не было связано
				// с бизнес-процессом или изменили клиента.
				ИначеЕсли НЕ ЕстьВведенныйНаОсновании Тогда
					СписокБизнесПроцессов.Добавить(Выборка.Ссылка);
				КонецЕсли;
			КонецЦикла;
			
			Если СписокБизнесПроцессов.Количество() >= 1 Тогда
				_БизнесПроцесс = СписокБизнесПроцессов[0].Значение;
				_Задача		   = ПолучитьЗадачуБизнесПроцесса(СписокБизнесПроцессов[0].Значение);
				
				_ЕстьБизнесПроцессыДляВыбора = Истина;
				ПриИзмененииЗадачи();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(_БизнесПроцесс) Тогда
			_БизнесПроцессСтр = "[" + Формат(_БизнесПроцесс.Дата,"ДЛФ=D") + "]: " + _БизнесПроцесс.Наименование;
		КонецЕсли;
		
		Элементы.СкрытьПоказатьИнформациюОЗадаче.Пометка	= _СкрытьПоказатьИнформациюОЗадачеПометка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеЗадачи(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Задача",_Задача);
	ОткрытьФорму("ОбщаяФорма.CRM_ОписаниеЗадачи",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СвязатьСобытиеСБизнесПроцессом(УдалитьСвязь = Ложь)
	
	Если УдалитьСвязь Тогда
		НаборРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.БизнесПроцесс.Установить(_БизнесПроцесс);
		НаборРегистра.Отбор.Объект.Установить(Объект.Ссылка);
		НаборРегистра.Прочитать();
		НаборРегистра.Очистить();
		НаборРегистра.Записать();
	Иначе
		ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.БизнесПроцесс	= _БизнесПроцесс;
		ЗаписьРегистра.Задача			= _Задача;
		ЗаписьРегистра.ТочкаМаршрута	= _Задача.CRM_ТочкаМаршрута;
		ЗаписьРегистра.Объект			= Объект.Ссылка;
		ЗаписьРегистра.ДатаРегистрации	= ТекущаяДатаСеанса();
		ЗаписьРегистра.ВидОбъекта		= ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Событие;
		ЗаписьРегистра.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВозможныхИсполнителейПоРоли(Роль)
	
	СписокИсполнителей = Новый списокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РольИсполнителя",Роль);
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсполнителиЗадач.Исполнитель
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	
	СписокИсполнителей.ЗагрузитьЗначения(Массив);
	
	Возврат СписокИсполнителей;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииЗадачи()
	
	_ЗадачаСписокВозможныхИсполнителей.Очистить();
	_ЗадачаПринятьКИсполнению	= Ложь;
	_ЗадачаВыполнить			= Ложь;
	
	Если ЗначениеЗаполнено(_Задача) Тогда
		Если ЗначениеЗаполнено(_Задача.РольИсполнителя) Тогда
			_ЗадачаСписокВозможныхИсполнителей = ПолучитьВозможныхИсполнителейПоРоли(_Задача.Исполнитель);
		Иначе
			_ЗадачаСписокВозможныхИсполнителей.Добавить(_Задача.Исполнитель);
		КонецЕсли;
		_ЗадачаДоступноПользователю = (НЕ _ЗадачаСписокВозможныхИсполнителей.НайтиПоЗначению(ТекущийПользователь()) = Неопределено);
		_ЗадачаПринятьКИсполнению	= НЕ _Задача.ПринятаКИсполнению;
		_ЗадачаВыполнить			= НЕ _Задача.Выполнена;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьКартуПроекта(Проект)
	
	Если ЗначениеЗаполнено(Проект) Тогда
		Возврат Проект.CRM_КартаМаршрута;
	Иначе
		Возврат Справочники.CRM_КартыМаршрутов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗадачуБизнесПроцесса(БизнесПроцесс)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	               |	ЗадачаИсполнителя.Выполнена КАК Выполнена,
	               |	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
	               |	ЗадачаИсполнителя.РольИсполнителя КАК РольИсполнителя
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Выполнена
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Исполнитель),
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РольИсполнителя)
	               |ПО
	               |	Выполнена";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("БизнесПроцесс",БизнесПроцесс);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыполненнаяЗадача	= Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	НеВыполненнаяЗадача	= Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Выполнена И НЕ НеВыполненнаяЗадача = Неопределено Тогда
			Возврат НеВыполненнаяЗадача;
		КонецЕсли;
		
		ВыборкаПоЗадачам = Выборка.Выбрать();
		Пока ВыборкаПоЗадачам.Следующий() Цикл
			
			Если НЕ ВыборкаПоЗадачам.Выполнена Тогда
				НеВыполненнаяЗадача = ВыборкаПоЗадачам.Ссылка;
			Иначе
				ВыполненнаяЗадача = ВыборкаПоЗадачам.Ссылка;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоЗадачам.РольИсполнителя) Тогда
				СписокВозможныхИсполнителей = ПолучитьВозможныхИсполнителейПоРоли(ВыборкаПоЗадачам.РольИсполнителя);
			Иначе
				СписокВозможныхИсполнителей = Новый СписокЗначений;
				СписокВозможныхИсполнителей.Добавить(ВыборкаПоЗадачам.Исполнитель);
			КонецЕсли;
			
			Если НЕ СписокВозможныхИсполнителей.НайтиПоЗначению(ТекущийПользователь) = Неопределено Тогда
				Возврат ВыборкаПоЗадачам.Ссылка;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если НЕ НеВыполненнаяЗадача	= Неопределено Тогда
		Возврат НеВыполненнаяЗадача;
	КонецЕсли;
	
	Возврат ВыполненнаяЗадача;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьНаименованиеКартыМаршрута(Проект)
	
	Если ЗначениеЗаполнено(Проект) И ЗначениеЗаполнено(Проект.CRM_КартаМаршрута) Тогда
		Возврат СокрЛП(Проект.CRM_КартаМаршрута.Наименование);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПривязатьКБизнесПроцессу(Команда)
	
	//Если Объект.Ссылка.Пустая() Тогда 
	//	
	//	ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
	//		|Выполнение действия ""Связать"" возможно только после записи данных.
	//		|Данные будут записаны.'");
	//	Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	//	
	//	Если Результат <> КодВозвратаДиалога.ОК Тогда 
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Если Не Записать() Тогда 
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//СвязатьСобытиеСБизнесПроцессом();
	//_ЕстьСвязьСБизнесПроцессом = Истина;
	//УстановитьСвойстваЭлементовГруппыБизнесПроцесс();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьИнформациюОЗадаче(Команда)
	
	Элементы.СкрытьПоказатьИнформациюОЗадаче.Пометка = НЕ Элементы.СкрытьПоказатьИнформациюОЗадаче.Пометка;
	_СкрытьПоказатьИнформациюОЗадачеПометка = Элементы.СкрытьПоказатьИнформациюОЗадаче.Пометка;
	Элементы.ГруппаЗадача.Видимость = Элементы.СкрытьПоказатьИнформациюОЗадаче.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура _БизнесПроцессНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Проект) И НЕ ВернутьКартуПроекта(Объект.Проект) = ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.ПустаяСсылка") Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			СтруктураОтбора = Новый Структура("Проект, Партнер, КартаМаршрута, Стартован, Завершен, ПометкаУдаления",
			Объект.Проект,Объект.Партнер, ВернутьКартуПроекта(Объект.Проект), Истина, Ложь, Ложь);
		Иначе
			СтруктураОтбора = Новый Структура("Проект, КартаМаршрута, Стартован, Завершен, ПометкаУдаления",
			Объект.Проект, ВернутьКартуПроекта(Объект.Проект), Истина, Ложь, Ложь);			
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда 
			СтруктураОтбора = Новый Структура("Партнер, Стартован, Завершен, ПометкаУдаления",Объект.Партнер, Истина, Ложь, Ложь);
		Иначе
			СтруктураОтбора = Новый Структура("Стартован, Завершен, ПометкаУдаления", Истина, Ложь, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	Если ЗначениеЗаполнено(_БизнесПроцесс) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", _БизнесПроцесс);
	КонецЕсли;
	
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаСписка",ПараметрыФормы,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьЗадачу(Команда)
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(_Задача);
	
	БизнесПроцессыИЗадачиКлиент.ПринятьЗадачиКИсполнению(МассивЗадач);
	
	Элементы.ПринятьЗадачу.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура _ЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура("БизнесПроцесс",_БизнесПроцесс);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаВыбора",ПараметрыФормы,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура _ЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура _ЗадачаПриИзменении(Элемент)
	
	ПриИзмененииЗадачи();
	УстановитьСвойстваЭлементовГруппыБизнесПроцесс();
	
КонецПроцедуры

&НаКлиенте
Процедура _БизнесПроцессОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = _БизнесПроцесс Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		СтандартнаяОбработка = Ложь;
		
		_БизнесПроцессСтр = СформироватьПредставлениеБизнесПроцесса(ВыбранноеЗначение);
		_БизнесПроцесс = ВыбранноеЗначение;
		_ЕстьСвязьСБизнесПроцессом = Ложь;
		
		Если ЗначениеЗаполнено(_БизнесПроцесс) Тогда
			_Задача = ПолучитьЗадачуБизнесПроцесса(_БизнесПроцесс);
		Иначе
			_Задача = ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");
		КонецЕсли;
		
		ПриИзмененииЗадачи();
		УстановитьСвойстваЭлементовГруппыБизнесПроцесс();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьПредставлениеБизнесПроцесса(ВыбранноеЗначение)
	
	Возврат "["+ Формат(ВыбранноеЗначение.Дата,"ДЛФ=D") + "]: " + ВыбранноеЗначение.Наименование;
	
КонецФункции

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["_СкрытьПоказатьИнформациюОЗадачеПометка"] = Неопределено Тогда
		_СкрытьПоказатьИнформациюОЗадачеПометка	= Настройки["_СкрытьПоказатьИнформациюОЗадачеПометка"];
	Иначе
		_СкрытьПоказатьИнформациюОЗадачеПометка	= Ложь;
	КонецЕсли;
		
	Элементы.СкрытьПоказатьИнформациюОЗадаче.Пометка	= _СкрытьПоказатьИнформациюОЗадачеПометка;
	Если НЕ ЗначениеЗаполнено(_Задача) Тогда
		_СкрытьПоказатьИнформациюОЗадачеПометка = Ложь;
		Элементы.СкрытьПоказатьИнформациюОЗадаче.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура _ЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = _Задача Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		_ЕстьСвязьСБизнесПроцессом = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСписокВведенныхНаОсновании(Команда)
	
	СтруктураОтбора = Новый Структура("Ссылка",_СписокВведенныхНаОсновании);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	Если ЗначениеЗаполнено(_БизнесПроцесс) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", _БизнесПроцесс);
	КонецЕсли;
	
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаСписка",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

// ***************************************************************************************

&НаКлиенте
Процедура _БизнесПроцессОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(_БизнесПроцесс) Тогда
		ПоказатьЗначение(, _БизнесПроцесс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура _БизнесПроцессОчистка(Элемент, СтандартнаяОбработка)
	
	_БизнесПроцессСтр							= "";
	Элементы.СкрытьПоказатьИнформациюОЗадаче.Пометка	= Ложь;
	_СкрытьПоказатьИнформациюОЗадачеПометка	= Ложь;
	
	Если _ЕстьСвязьСБизнесПроцессом Тогда
		СвязатьСобытиеСБизнесПроцессом(Истина);
		_ЕстьСвязьСБизнесПроцессом = Ложь;
	КонецЕсли;
		
	_БизнесПроцесс	= ПредопределенноеЗначение("БизнесПроцесс.CRM_БизнесПроцесс.ПустаяСсылка");
	_Задача			= ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");

	ПриИзмененииЗадачи();
	УстановитьСвойстваЭлементовГруппыБизнесПроцесс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПанельБизнесПроцессов(Команда)
	
	Элементы.ПоказатьРазделБП.Пометка = НЕ Элементы.ПоказатьРазделБП.Пометка;
	_ПоказатьРазделБППометка		  = Элементы.ПоказатьРазделБП.Пометка;
	
	Элементы.ГруппаБизнесПроцессСвязать.Видимость = Элементы.ПоказатьРазделБП.Пометка;
	Элементы._БизнесПроцесс.ТолькоПросмотр					= _ЭтоВведенныйНаОсновании;
	Элементы.ВывестиСписокВведенныхНаОсновании.Видимость	= _ЭтоВведенныйНаОсновании;
	Элементы.ПривязатьКБизнесПроцессу.Видимость				= НЕ _ЭтоВведенныйНаОсновании И НЕ _СвязыватьСобытияСБизнесПроцессами;
	Элементы.ПривязатьКБизнесПроцессу.Доступность			= НЕ _ЕстьСвязьСБизнесПроцессом И ЗначениеЗаполнено(_БизнесПроцесс);
	Элементы.СкрытьПоказатьИнформациюОЗадаче.Видимость		= НЕ _ЭтоВведенныйНаОсновании;

	Элементы.ГруппаЗадача.Видимость							= Элементы.СкрытьПоказатьИнформациюОЗадаче.Видимость
															  И _СкрытьПоказатьИнформациюОЗадачеПометка
															  И Элементы.ГруппаБизнесПроцессСвязать.Видимость;
	Элементы.ПринятьЗадачу.Доступность						= _ЗадачаДоступноПользователю И _ЗадачаПринятьКИсполнению И _ЗадачаВыполнить;
	Элементы.ЗадачаЗадачаИсполнителяВыполнено.Доступность	= _ЗадачаДоступноПользователю И _ЗадачаВыполнить;
	
КонецПроцедуры

// +СофтФон

&НаСервере
// Функция добавляет новый телефон в контактную информацию.
// 
// Параметры:
//	Телефон	- Строка	- Номер телефона.
//
// Возвращаемое значение:
//	Булево	- Результат добавления.
//
Функция ДобавитьНовыйТелефон(Владелец, Телефон)
	ВладелецТелефона	= Владелец.ПолучитьОбъект();
	СтрокаТелефон		= ВладелецТелефона.КонтактнаяИнформация.Добавить();
	СтрокаТелефон.Тип	= Перечисления.ТипыКонтактнойИнформации.Телефон;
	СтруктураНомера		= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Телефон);
	Если ТипЗнч(ВладелецТелефона) = Тип("СправочникОбъект.Партнеры") Тогда
		Если ВладелецТелефона.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			СтрокаТелефон.Вид	= Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		ИначеЕсли Найти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			СтрокаТелефон.Вид	= Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица;
		Иначе	
			СтрокаТелефон.Вид	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;	
	ИначеЕсли ТипЗнч(ВладелецТелефона) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") Тогда	
		Если Найти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			СтрокаТелефон.Вид	= Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
		Иначе	
			СтрокаТелефон.Вид	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;	
	КонецЕсли;	
	СтрокаТелефон.НомерТелефона			= Телефон;
	СтрокаТелефон.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;
	Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
		СтрокаТелефон.Представление	= СтруктураНомера.КодСтраны + " (" + СтруктураНомера.КодГорода + ") " + СтруктураНомера.НомерТелефона;
	Иначе	
		СтрокаТелефон.Представление	= Телефон;
	КонецЕсли;	
	ЗначенияПолей	= Новый СписокЗначений;
	ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
	ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
	ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
	СтрокаТелефон.ЗначенияПолей	= ЗначенияПолей;
	НомерДобавлен = Истина;
	Попытка
		ВладелецТелефона.Записать();
	Исключение
		НомерДобавлен = Ложь;
	КонецПопытки;	
	Возврат НомерДобавлен;
КонецФункции // ДобавитьНовыйТелефон()
	
&НаКлиенте
// Процедура - обработчик команды "ДобавитьТелефон".
//
Процедура ДобавитьТелефон(Команда)
	Если НЕ сфпНомерБезВладельца Тогда
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		Если ДобавитьНовыйТелефон(Объект.КонтактноеЛицо, Объект.Место) Тогда
			сфпНомерБезВладельца = Ложь;
			ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", Новый Структура("Ключ", Объект.КонтактноеЛицо));
		КонецЕсли;	
	ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
		Если ДобавитьНовыйТелефон(Объект.Партнер, Объект.Место) Тогда
			сфпНомерБезВладельца = Ложь;
			ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("Ключ", Объект.Партнер));
		КонецЕсли;	
	Иначе
		Возврат;
	КонецЕсли;
	Элементы.сфпДобавитьТелефон.Видимость = (сфпНомерБезВладельца И ЗначениеЗаполнено(Объект.Партнер));
КонецПроцедуры // ДобавитьТелефон()

&НаКлиенте
// Процедура - обработчик видимостью кнопок по открытию в CoMagic.
//
Процедура УправлениеВидимостьюКнопокОткрытьВCoMagic()
	Элементы.КнопкаПартнерОткрытьВCoMagic.Видимость			= сфпСофтФонПроСервер.сфпИспользоватьCoMagic()
		И НЕ ПустаяСтрока(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(?(ЗначениеЗаполнено(Объект.Партнер),Объект.Партнер,ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка")), "сфпCoMagicID"));
	Элементы.КнопкаКонтактноеЛицоОткрытьCoMagic.Видимость	= сфпСофтФонПроСервер.сфпИспользоватьCoMagic()
		И НЕ ПустаяСтрока(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(?(ЗначениеЗаполнено(Объект.КонтактноеЛицо),Объект.КонтактноеЛицо,ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка")), "сфпCoMagicID"));
КонецПроцедуры // УправлениеВидимостьюКнопокОткрытьВCoMagic()

&НаКлиенте
// Процедура - обработчик команды "сфпОткрытьКарточкуВCoMagic".
//
Процедура сфпОткрытьКарточкуВCoMagic(Команда)
	СтруктураЗапроса = сфпОткрытьКарточкуВCoMagicНаСервере(Команда.Имя);		
	сфпОткрытьКлиентаВСистемеCoMagic(СтруктураЗапроса.Контакт, СтруктураЗапроса.CoMagicID);
КонецПроцедуры // СфпОткрытьКарточкуВCoMagic().

&НаСервере
// Функция возвращает необходимые параметры для открытия карточки клиента в CoMagic.
//
// Параметры:
//  ИмяКоманды - Строка - Имя команды, которая вызывает эту функцию.
//
// Возвращаемое значение:
//  СтруктураЗапроса - Структура - Содержит ссылку на объект и идентификатор в системе CoMagic.
//
Функция сфпОткрытьКарточкуВCoMagicНаСервере(ИмяКоманды)
	СтруктураЗапроса = Новый Структура;
	Если ИмяКоманды = "сфпОткрытьПартнераВCoMagic" Тогда
		СтруктураЗапроса.Вставить("Контакт", Объект.Партнер);
		СтруктураЗапроса.Вставить("CoMagicID", Объект.Партнер.сфпCoMagicID);
	ИначеЕсли ИмяКоманды = "сфпОткрытьКонтактноеЛицоВCoMagic" Тогда
		СтруктураЗапроса.Вставить("Контакт", Объект.КонтактноеЛицо);
		СтруктураЗапроса.Вставить("CoMagicID", Объект.КонтактноеЛицо.сфпCoMagicID);
	КонецЕсли;		
	Возврат СтруктураЗапроса;
КонецФункции // СфпОткрытьКарточкуВCoMagic().

&НаКлиенте
// Процедура открывает карточку контакта в системе CoMagic.
//
// Параметры:
//	Контакт		- СправочникСсылка	- Контакт
//  CoMagicID	- Строка			- Идентификатор контакта в системе CoMagic.
//
Процедура сфпОткрытьКлиентаВСистемеCoMagic(Контакт, CoMagicID)
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(CoMagicID) Тогда
		Возврат;
	КонецЕсли;	
	КлючСессии	= сфпСофтФонПроСервер.сфпПолучитьКлючСессииCoMagic();
	Если НЕ ЗначениеЗаполнено(КлючСессии) Тогда Возврат; КонецЕсли;
	//сфпКарточкаCoMagic	= "http://app.comagic.ru/analytics/auditory/cmvisitor/?session_key=" + КлючСессии + "&visitor_id=" + Контакт.сфпCoMagicID;
	Адрес	= "http://app.comagic.ru/analytics/auditory/cmvisitor/?session_key=" + КлючСессии + "&visitor_id=" + CoMagicID;
	ПерейтиПоНавигационнойСсылке(Адрес);
КонецПроцедуры // СфпОткрытьКлиентаВСистемеCoMagic().

// -СофтФон

// +БазаЗнаний

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Процедура удаляет из таблицы решений все неотмеченные решения.
//
// Параметры:
//	Форма	- Управляемая форма	- Форма, на котрой расположена таблица решений.
//
Процедура бзУдалитьНеотмеченныеРешения()
	КоличествоСтрок = ЭтотОбъект["бзРешения"].Количество();
	Если КоличествоСтрок = 0 Тогда Возврат; КонецЕсли;
	ВсеРешения =  РеквизитФормыВЗначение("бзРешения");
	Для текНомер = 1 По КоличествоСтрок Цикл
		НомерСтроки = КоличествоСтрок - текНомер;
		Если ВсеРешения[НомерСтроки].Использовать Тогда Продолжить; КонецЕсли;
		ВсеРешения.Удалить(НомерСтроки);
	КонецЦикла;	
	 ЗначениеВРеквизитФормы(ВсеРешения, "бзРешения");
КонецПроцедуры // БзУдалитьНеотмеченныеРешения().

&НаСервере
// Процедура заполняет таблицу используемых решений.
//
// Параметры:
//	Нет.
//
Процедура бзЗаполнитьИспользуемыеРешения()
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда Возврат; КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ИСТИНА КАК Использовать,
	|	CRM_ИспользуемыеРешения.Решение.Ссылка КАК Решение,
	|	CRM_ИспользуемыеРешения.ВыбранныйОтвет КАК ИДСтроки,
	|	CRM_ИспользуемыеРешения.Пользователь КАК Пользователь,
	|	ВЫБОР
	|		КОГДА CRM_ИспользуемыеРешения.ВыбранныйОтвет = """"
	|			ТОГДА """"
	|		ИНАЧЕ CRM_РешенияОтветы.НаименованиеОтвета
	|	КОНЕЦ КАК ВыбранныйОтвет
	|ИЗ
	|	РегистрСведений.CRM_ИспользуемыеРешения КАК CRM_ИспользуемыеРешения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.CRM_Решения.Ответы КАК CRM_РешенияОтветы
	|		ПО CRM_ИспользуемыеРешения.Решение = CRM_РешенияОтветы.Ссылка
	|			И CRM_ИспользуемыеРешения.ВыбранныйОтвет = CRM_РешенияОтветы.ИДСтроки
	|ГДЕ
	|	CRM_ИспользуемыеРешения.Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_ИспользуемыеРешения.Решение.Наименование";
	ЭтотОбъект["бзРешения"].Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры // БзЗаполнитьИспользуемыеРешения().

&НаСервере
// Процедура сохраняет таблицу используемых решений.
//
// Параметры:
//	Нет.
//
Процедура бзСохранитьИспользуемыеРешения()
	НаборЗаписей = РегистрыСведений.CRM_ИспользуемыеРешения.СоздатьНаборЗаписей();
	НаборЗаписей = РегистрыСведений.CRM_ИспользуемыеРешения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	Для Каждого бзИспользуемоеРешение Из ЭтотОбъект["бзРешения"] Цикл
		Если НЕ бзИспользуемоеРешение.Использовать Тогда Продолжить; КонецЕсли;
		НоваяЗапись					= НаборЗаписей.Добавить();
		НоваяЗапись.Объект			= Объект.Ссылка;
		НоваяЗапись.Решение			= бзИспользуемоеРешение.Решение;
		НоваяЗапись.ВыбранныйОтвет	= бзИспользуемоеРешение.ИДСтроки;
		НоваяЗапись.Пользователь	= бзИспользуемоеРешение.Пользователь;
	КонецЦикла;
	Попытка
		НаборЗаписей.Записать();
	Исключение;
	КонецПопытки;	
КонецПроцедуры // БзСохранитьИспользуемыеРешения().

&НаСервере
// Функция добавляет решение в таблицу используемых решений.
//
// Параметры:
//	Решение	- СправочникСсылка	- Добавляемое решение.
//
// Возвращаемое значение:
//	Число	- Индекс добавленной строки.
//
Функция бзДобавитьИспользуемоеРешение(Решение)
	ТаблицаРешений = РеквизитФормыВЗначение("бзРешения");
	СтрокаТаблицы = ТаблицаРешений.Найти(Решение, "Решение");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ТаблицаРешений.Добавить();
		СтрокаТаблицы.Использовать	 	= Ложь;
		СтрокаТаблицы.Решение			= Решение;
		СтрокаТаблицы.Пользователь		= Пользователи.АвторизованныйПользователь();
		Если Решение.Ответы.Количество()	= 1 Тогда
			СтрокаТаблицы.ИДСтроки			= Решение.Ответы[0].ИДСтроки;
			СтрокаТаблицы.ВыбранныйОтвет	= Решение.Ответы[0].НаименованиеОтвета;
		Иначе	
			СтрокаТаблицы.ИДСтроки			= "";
			СтрокаТаблицы.ВыбранныйОтвет	= "";
		КонецЕсли;	
	КонецЕсли;	
	ИндексСтроки = ТаблицаРешений.Индекс(СтрокаТаблицы);
	ЗначениеВРеквизитФормы(ТаблицаРешений, "бзРешения");
	Возврат ИндексСтроки;
КонецФункции // БзДобавитьИспользуемоеРешение().

&НаСервере
// Процедура создает новое решение и добавляет его в таблицу решений.
//
// Параметры:
//	Нет.
//
Процедура бзСоздатьНовоеРешение()
	// Создаем новое решение
	НовоеРешение = Справочники.CRM_Решения.СоздатьЭлемент();
	НовоеРешение.Наименование		= ЭтотОбъект["бзСтрокаПоиска"];
	НовоеРешение.ТекстВопроса		= ЭтотОбъект["бзСтрокаПоиска"];
	НовоеРешение.ТекстВопросаHTML	= ЭтотОбъект["бзСтрокаПоиска"];
	НовоеРешение.Проект				= бзПолучитьПроект(); 
	НовоеРешение.Автор				= Пользователи.АвторизованныйПользователь();
	НовоеРешение.СтатусРешения 		= Перечисления.CRM_СтатусыРешений.Личное;
	РешениеЗаписано = Ложь;
	Попытка
		НовоеРешение.Записать();
		РешениеЗаписано = Истина;
	Исключение
	КонецПопытки;
	// Добавляем созданное решение в таблицу.
	Если РешениеЗаписано Тогда
		ТаблицаРешений = РеквизитФормыВЗначение("бзРешения");
		НоваяСтрока = ТаблицаРешений.Добавить();
		НоваяСтрока.Использовать 	= Ложь;
		НоваяСтрока.Решение			= НовоеРешение.Ссылка;
		НоваяСтрока.Пользователь	= НовоеРешение.Автор;
		Если НовоеРешение.Ответы.Количество() = 1 Тогда
			НоваяСтрока.ИДСтроки		= НовоеРешение.Ответы[0].ИДСтроки;
			НоваяСтрока.ВыбранныйОтвет	= НовоеРешение.Ответы[0].НаименованиеОтвета;
		Иначе	
			НоваяСтрока.ИДСтроки		= "";
			НоваяСтрока.ВыбранныйОтвет	= "";
		КонецЕсли;	
		ЗначениеВРеквизитФормы(ТаблицаРешений, "бзРешения");
	КонецЕсли;	
КонецПроцедуры // бзСоздатьНовоеРешение()	
	
&НаСервере
// Функция возвращает текущий проект.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Проект
//
Функция бзПолучитьПроект()
	бзПроект = Справочники.Проекты.ПустаяСсылка();
	Попытка
		бзПроект = Объект.Проект;
	Исключение
	КонецПопытки;	
	Возврат бзПроект;
КонецФункции // бзПолучитьПроект()

&НаСервере
// Функция возвращает тему
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Тема
//
Функция бзПолучитьТему()
	бзТема = "";
	Попытка
		бзТема = СокрЛП(Объект.Тема);
	Исключение
	КонецПопытки;	
	Возврат бзТема;
КонецФункции // бзПолучитьТему()

&НаСервере
// Функция удаляет из XML-текста недопустимые символы.
//
// Параметры:
//  Строка - Строка - XML-текст.
//
// Возвращаемое значение:
//  Строка - XML-текст без недопустимых символов.
//
Функция бзКорректнаяСтрока(Строка)
	Позиция = НайтиНедопустимыеСимволыXML(Строка);
	Пока Позиция > 0 Цикл
		Строка = СтрЗаменить(Строка, Сред(Строка, Позиция, 1), "");
		Позиция = НайтиНедопустимыеСимволыXML(Строка);
	КонецЦикла;	
	Возврат Строка;
КонецФункции // КорректнаяСтрока()

#КонецОбласти

#Область ПроцедурыИФункцииПолнотекстовогоПоиска

&НаКлиенте
// Процедура - обработчик команды формы "ПолнотекстовыйПоискНайти".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзПолнотекстовыйПоискНайти(Команда)
	Подключаемый_бзСтрокаПоискаПриИзменении(Элементы["бзСтрокаПоиска"]);
КонецПроцедуры // Подключаемый_бзПолнотекстовыйПоискНайти()

&НаКлиенте
// Процедура - обработчик команды формы "ПолнотекстовыйПоискОтменить".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзПолнотекстовыйПоискОтменить(Команда)
	ЭтотОбъект["бзСтрокаПоиска"] = "";
	Подключаемый_бзСтрокаПоискаПриИзменении(Элементы["бзСтрокаПоиска"]);
КонецПроцедуры // Подключаемый_бзПолнотекстовыйПоискОтменить()

&НаСервереБезКонтекста
// Выполняет обновление индекса полнотекстового поиска.
//
// Параметры:
//	Нет.
//
Процедура бзОбновитьИндексППД()
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ПолнотекстовыйПоиск.ОбновитьИндекс();
	Исключение
	КонецПопытки;	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // бзОбновитьИндексППД()

&НаКлиенте
// Функция возвращает структуру отбора для полнотекстового поиска.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура	- Структура параметров отбора.
//
Функция бзСоздатьСтруктуруОтбора()
	Если ЭтотОбъект["бзИскатьПоПроекту"] Тогда
		ТекущийПроект = бзПолучитьПроект();
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Проект", ТекущийПроект);
		Возврат СтруктураПоиска;
	КонецЕсли;	
	Возврат Неопределено;
КонецФункции // БзСоздатьСтруктуруОтбора().

&НаСервере
// Процедура выполняет полнотекстовый поиск.
//
// Параметры:
//	СтруктураОтбора	- Структура	- Структура отбора.
//
Функция бзНайтиРешенияПолнотекстовыйПоиск(СтруктураОтбора)
	ЭтотОбъект["бзИндексППДАктуален"] = ПолнотекстовыйПоиск.ИндексАктуален();
	Возврат CRM_БазаЗнанийСервер.бзНайтиРешенияПолнотекстовыйПоиск(ЭтотОбъект, СтруктураОтбора);
КонецФункции // БзНайтиРешенияПолнотекстовыйПоиск().

&НаКлиенте
// Процедура проверяет актуальность индекса, и, в случае необходимости, актуализирует его.
//
// Параметры:
//	Нет.
//
Процедура бзПроверитьИндексППД()
	СтруктураОтбора = бзСоздатьСтруктуруОтбора();
 	ТекстОшибки = бзНайтиРешенияПолнотекстовыйПоиск(СтруктураОтбора);
	Если ЭтотОбъект["бзИндексППДАктуален"] Тогда
		Если ТекстОшибки = Неопределено Тогда
			Элементы["бзДекорацияИндексППНеактуален"].Заголовок = "";
		Иначе
			Элементы["бзДекорацияИндексППНеактуален"].Заголовок = ТекстОшибки;
		КонецЕсли;
	Иначе	
		Элементы["бзДекорацияИндексППНеактуален"].Заголовок = НСтр("ru='Индекс полнотекстового поиска неактуален'");
	КонецЕсли;	
КонецПроцедуры // бзПроверитьИндексППД()

&НаКлиенте
// Процедура выполняет полнотекстовый поиск.
//
// Параметры:
//	Нет.
//
Процедура бзВыполнитьПП()
	Элементы["бзДекорацияИндексППНеактуален"].Заголовок = "";
	Если ПустаяСтрока(ЭтотОбъект["бзСтрокаПоиска"]) Тогда
		бзУдалитьНеотмеченныеРешения();
	Иначе	
		бзПроверитьИндексППД();
	КонецЕсли; 	
КонецПроцедуры // бзВыполнитьПП()

&НаКлиенте
// Процедура выполняет обновление индекса полнотекстового поиска.
//
// Параметры:
//	Нет.
//
Процедура бзОбновлениеИндексаПДД()
	Если НЕ ЭтотОбъект["бзИндексППДАктуален"] Тогда
		Состояние(НСтр("ru='Идет обновление индекса полнотекстового поиска ...'"));
		бзОбновитьИндексППД();
		ЭтотОбъект["бзИндексППДАктуален"] = Истина;
		Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено...'")); 
		бзВыполнитьПП();
	ИначеЕсли Элементы.бзДекорацияИндексППНеактуален.Заголовок = НСтр("ru = 'Ничего не найдено. Создать новое решение?'") Тогда
		бзСоздатьНовоеРешение();
		Элементы["бзДекорацияИндексППНеактуален"].Заголовок = "";
		ПоследняяСтрока = ЭтотОбъект["бзРешения"][ЭтотОбъект["бзРешения"].Количество() - 1].ПолучитьИдентификатор();
		Элементы["бзРешения"].ТекущаяСтрока = ПоследняяСтрока;
	КонецЕсли;
КонецПроцедуры // бзОбновлениеИндексаПДД()

// Функция проверяет, была ли нажата ссылка, активирующее действие с БЗ.
//
//  Параметры:
//   ПроверяемаяСсылка - Строка - Нажатая ссылка в поле вопроса.
// 
//  Возвращаемое значение:
//   СтруктураВозврата - Структура, содержащая информацию о результатах проверки.
//
&НаСервере
Функция бзПроверитьЧтоЭтоСсылкаНаДобавление(ПроверяемаяСсылка)
	СтруктураВозврата = Новый Структура("ОбработатьСсылку, ИмяОбработчика", Ложь, "");
	Если ЗначениеЗаполнено(ПроверяемаяСсылка) Тогда
		Если Найти(ПроверяемаяСсылка, "ДобавитьТекстВопросаВОписаниеСобытия") > 0 Тогда
			СтруктураВозврата.ОбработатьСсылку = Истина;
			СтруктураВозврата.ИмяОбработчика = "ДобавитьТекстВопросаВОписаниеСобытия";
		ИначеЕсли Найти(ПроверяемаяСсылка, "ДобавитьТекстВопросаВРезультатСобытия") > 0 Тогда
			СтруктураВозврата.ОбработатьСсылку = Истина;
			СтруктураВозврата.ИмяОбработчика = "ДобавитьТекстВопросаВРезультатСобытия";
		ИначеЕсли Найти(ПроверяемаяСсылка, "ДобавитьТекстОтветаВОписаниеСобытия") > 0 Тогда
			СтруктураВозврата.ОбработатьСсылку = Истина;
			СтруктураВозврата.ИмяОбработчика = Сред(ПроверяемаяСсылка, Найти(ПроверяемаяСсылка, "ДобавитьТекстОтветаВОписаниеСобытия"));
		ИначеЕсли Найти(ПроверяемаяСсылка, "ДобавитьТекстОтветаВРезультатСобытия") > 0 Тогда
			СтруктураВозврата.ОбработатьСсылку = Истина;
			СтруктураВозврата.ИмяОбработчика = Сред(ПроверяемаяСсылка, Найти(ПроверяемаяСсылка, "ДобавитьТекстОтветаВРезультатСобытия"));
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураВозврата;
КонецФункции

// Функция возвращает текст вопроса переданного решения БЗ.
//
//  Параметры
//   Решение  - СправочникСсылка.CRM_Решения - Решение, для которого выполняется функция.
//
//  Возвращаемое значение:
//    Текст вопроса - Строка - Текст вопроса решения.
//
&НаСервере
Функция бзПолучитьТекстВопроса(Решение) 
	Возврат Решение.ТекстВопроса;
КонецФункции

// Функция получает данные переданного ответа из Решения БЗ (реквизиты ТЧ).
//
//  Параметры
//   Решение  - СправочникСсылка.CRM_Решения - Решение, для которого выполняется функция.
//   НомерОтвета - Число - Номер строки ответа в решении.
//
//  Возвращаемое значение:
//   ДанныеОтвета - Структура - Структура, содержащая данные ответа (реквизиты ТЧ Ответы).
//
&НаСервере
Функция бзПолучитьДанныеОтветаПоИндексу(Решение, ИДСтроки) 
	
	ТекОтвет = Решение.Ответы.НайтиСтроки(Новый Структура("ИДСтроки",ИДСтроки))[0];
	//ТекОтвет = Решение.Ответы[НомерОтвета - 1];
	ДанныеОтвета = Новый Структура("ИДСтроки, НаименованиеОтвета, ВариантОтвета", 
		ТекОтвет.ИДСтроки, ТекОтвет.НаименованиеОтвета, ТекОтвет.ВариантОтвета);
	Возврат	ДанныеОтвета;	 
КонецФункции

// Функция ищет в текущей ТЧ Решений переданную комбинацию Решения + Ответа.
//
//  Параметры
//   Решение  - СправочникСсылка.CRM_Решения - Решение, для которого выполняется функция.
//   Ответ - Строка - имя ответа переданного решения (реквизит НаименованиеОтвета).
//
//  Возвращаемое значение:
//   СтруктураВозврата - Структура - Структура с результатом проверки комбинацию решения и ответа в ТЧ "бзРешения".
//
&НаСервере
Функция бзНайтиКомбинациюРешенияИОтвета(Решение, Ответ)
	// РежимРезультата - 0 (нашли и ответ и решение в ТЧ)
	//					 1 (нашли решение)
	//					 2 (не нашли ни решение, ни ответ).
	СтруктураВозврата = Новый Структура("ИндексСтроки, РежимРезультата", Неопределено, 2);
	Для Каждого Строка Из ЭтотОбъект["бзРешения"] Цикл
		Если Строка.Решение = Решение Тогда
			Если Строка.ВыбранныйОтвет = Ответ Тогда
				СтруктураВозврата.ИндексСтроки    = ЭтотОбъект["бзРешения"].Индекс(Строка);
				СтруктураВозврата.РежимРезультата = 0;
				Прервать;
			ИначеЕсли ПустаяСтрока(Строка.ВыбранныйОтвет) Тогда
				СтруктураВозврата.ИндексСтроки    = ЭтотОбъект["бзРешения"].Индекс(Строка);
				СтруктураВозврата.РежимРезультата = 1;
			КонецЕсли;				
		КонецЕсли;			
	КонецЦикла;		
	Возврат СтруктураВозврата;
КонецФункции

// Процедура заполняет ТЧ "бзРешения" в зависимости от режима заполнения.
//
//  Параметры
//   РежимЗаполнения  - Число - Режим заполнения ТЧ "бзРешения".
//   ИндексСтроки - Число - Номер строки ТЧ "Ответы" в решении БЗ.
//   Ответ - Структура - Структура, содержащая данные ответа, которыми заполняется ТЧ "бзРешения".
//
&НаСервере
Процедура бзУстановитьДанныеСтрокиТЧРешения(РежимЗаполнения, ИндексСтроки, Ответ)
	Если РежимЗаполнения = 0 Тогда
		// Заполняем у строки ТЧ только реквизит "Использовать".
		ТекОтвет				= ЭтотОбъект["бзРешения"][ИндексСтроки];
		ТекОтвет.Использовать	= Истина;
	ИначеЕсли РежимЗаполнения = 1 Тогда
		// Заполняем у строки ТЧ реквизит "Использовать" и поле "ВыбранныйОтвет".
		ТекОтвет					= ЭтотОбъект["бзРешения"][ИндексСтроки];
		ТекОтвет.Использовать		= Истина;
		ТекОтвет.ВыбранныйОтвет		= Ответ.НаименованиеОтвета;
		ТекОтвет.ИДСтроки			= Ответ.ИДСтроки;
		ТекОтвет.Пользователь		= ПользователиКлиентСервер.АвторизованныйПользователь();
	КонецЕсли;		
КонецПроцедуры	

// Процедура обрабатывает переданную команду (ссылку), нажатую в поле вопроса БЗ.
//
//  Параметры
//   ИмяОбработчика  - Строка - Имя обработчика, который овтечает за отдельную команду по выполнению операций с БЗ.
//
&НаКлиенте
Процедура бзОбработатьСсылку(ИмяОбработчика)
	ТД = Элементы["бзРешения"].ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;	
	Решение = ЭтотОбъект["бзТекущийВопрос"];	
	Если ИмяОбработчика = "ДобавитьТекстВопросаВОписаниеСобытия" Тогда
		Решение = ЭтотОбъект["бзТекущийВопрос"];	
		ДобавитьТекст = бзПолучитьТекстВопроса(Решение); 		
		Если ПустаяСтрока(Объект.Описание) Тогда
			Объект.Описание = ДобавитьТекст;
		Иначе
			бзВставитьТекстПослеКурсора(ДобавитьТекст, Истина);			
		КонецЕсли;
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаОписание;
		ТекущийЭлемент = Элементы.Описание;	
	ИначеЕсли ИмяОбработчика = "ДобавитьТекстВопросаВРезультатСобытия" Тогда
		Решение = ЭтотОбъект["бзТекущийВопрос"];	
		ДобавитьТекст = бзПолучитьТекстВопроса(Решение); 		
		Если ПустаяСтрока(Объект.Результат) Тогда
			Объект.Результат = ДобавитьТекст;
		Иначе
			бзВставитьТекстПослеКурсора(ДобавитьТекст, Ложь);						
		КонецЕсли;
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаОписание;
		ТекущийЭлемент = Элементы.Результат;			
	ИначеЕсли Найти(ИмяОбработчика, "ДобавитьТекстОтветаВОписаниеСобытия") > 0 Тогда
		
		ИДСтроки = СтрЗаменить(ИмяОбработчика,"ДобавитьТекстОтветаВОписаниеСобытия","");
		//НомерОтвета = Число(Прав(ИмяОбработчика,СтрДлина(ИмяОбработчика) - СтрДлина("ДобавитьТекстОтветаВОписаниеСобытия")));
		ТекОтвет = бзПолучитьДанныеОтветаПоИндексу(Решение, ИДСтроки);
		СтруктураПоиска = бзНайтиКомбинациюРешенияИОтвета(Решение, ТекОтвет.НаименованиеОтвета);
		Если СтруктураПоиска.РежимРезультата = 2 Тогда
			НоваяСтрока = ЭтотОбъект["бзРешения"].Добавить();
			НоваяСтрока.Решение 		= Решение;
			НоваяСтрока.Использовать	= Истина;
			НоваяСтрока.ИДСтроки 		= ТекОтвет.ИДСтроки;
			НоваяСтрока.ВыбранныйОтвет  = ТекОтвет.НаименованиеОтвета;
			НоваяСтрока.Пользователь	= ПользователиКлиентСервер.АвторизованныйПользователь();			
		Иначе
			бзУстановитьДанныеСтрокиТЧРешения(СтруктураПоиска.РежимРезультата, СтруктураПоиска.ИндексСтроки, ТекОтвет);
		КонецЕсли;	
		ДобавитьТекст = ТекОтвет.ВариантОтвета; 				
		Если ПустаяСтрока(Объект.Описание) Тогда
			Объект.Описание = ДобавитьТекст;
		Иначе
			бзВставитьТекстПослеКурсора(ДобавитьТекст, Истина);						
		КонецЕсли;
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаОписание;
		ТекущийЭлемент = Элементы.Описание;	
	ИначеЕсли Найти(ИмяОбработчика, "ДобавитьТекстОтветаВРезультатСобытия") > 0 Тогда
		
		ИДСтроки = СтрЗаменить(ИмяОбработчика,"ДобавитьТекстОтветаВОписаниеСобытия","");
		//НомерОтвета = Число(Прав(ИмяОбработчика,СтрДлина(ИмяОбработчика) - СтрДлина("ДобавитьТекстОтветаВРезультатСобытия")));
		ТекОтвет = бзПолучитьДанныеОтветаПоИндексу(Решение, ИДСтроки);
		СтруктураПоиска = бзНайтиКомбинациюРешенияИОтвета(Решение, ТекОтвет.НаименованиеОтвета);
		Если СтруктураПоиска.РежимРезультата = 2 Тогда
			НоваяСтрока = ЭтотОбъект["бзРешения"].Добавить();
			НоваяСтрока.Решение 		= Решение;
			НоваяСтрока.Использовать	= Истина;
			НоваяСтрока.ИДСтроки		= ТекОтвет.ИДСтроки;
			НоваяСтрока.ВыбранныйОтвет  = ТекОтвет.НаименованиеОтвета;
			НоваяСтрока.Пользователь	= ПользователиКлиентСервер.АвторизованныйПользователь();			
		Иначе
			бзУстановитьДанныеСтрокиТЧРешения(СтруктураПоиска.РежимРезультата, СтруктураПоиска.ИндексСтроки, ТекОтвет);
		КонецЕсли;	
		ДобавитьТекст = ТекОтвет.ВариантОтвета; 				
		Если ПустаяСтрока(Объект.Результат) Тогда
			Объект.Результат = ДобавитьТекст;
		Иначе
			бзВставитьТекстПослеКурсора(ДобавитьТекст, Ложь);						
		КонецЕсли;
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаОписание;
		ТекущийЭлемент = Элементы.Результат;			
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры	

// Процедура вставляет текст из решения БЗ (вопрос или ответ) в описание или результат события по позиции курсора.
//
//  Параметры:
//   ТекстВставки - Строка - текст для вставки в событие.
//   ОписаниеИлиРезультат - Булево - Если Истина, то вставка в описание, если Ложь - в результат.
//
&НаКлиенте
Процедура бзВставитьТекстПослеКурсора(ТекстВставки, ОписаниеИлиРезультат)
	
	Если ОписаниеИлиРезультат Тогда
		ЭлементПоля = Элементы.Описание;
	Иначе
		ЭлементПоля = Элементы.Результат;
	КонецЕсли;	
	// Чтобы вставить текст после курсора, нам необходимо найти позицию курсора.
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	
    ЭлементПоля.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
    ЭлементПоля.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, Началостроки, НачалоКолонки);
	
    ЭлементПоля.УстановитьГраницыВыделения(1, 1, Началостроки, НачалоКолонки);
    ТекстДоКурсора = ЭлементПоля.ВыделенныйТекст;
	ДлинаТекстДоКурсора = СтрДлина(ТекстДоКурсора);
	ЭлементПоля.УстановитьГраницыВыделения(ДлинаТекстДоКурсора+1, СтрДлина(ЭлементПоля.ТекстРедактирования));	
    ТекстПослеКурсора = ЭлементПоля.ВыделенныйТекст;
	
	Если ОписаниеИлиРезультат Тогда
		Объект.Описание = ТекстДоКурсора + Символы.ПС + ТекстВставки + Символы.ПС + ТекстПослеКурсора;
	Иначе
		Объект.Результат = ТекстДоКурсора + Символы.ПС + ТекстВставки + Символы.ПС + ТекстПослеКурсора;
	КонецЕсли;		
	
КонецПроцедуры	

#КонецОбласти

#Область ПроцедурыИФункцииФорматированногоТекста

&НаСервере
// Процедура заполняет поле формы "ТекстВопросаHTML" и список выбора ответов для текущего решения.
//
// Параметры:
//	Нет.
//
Процедура бзЗаполнитьТекстВопросаHTML()
	ЭтотОбъект["бзТекстВопросаHTML"] = "";	
	Решение = ЭтотОбъект["бзТекущийВопрос"];
	Если НЕ ЗначениеЗаполнено(Решение) Тогда Возврат; КонецЕсли;
	
	Решение_ТекстВопросаHTML = CRM_БазаЗнанийСервер.ОбработатьТекстHTML(Решение,,ЭтаФорма.УникальныйИдентификатор);
	
	СтрокаРешения = Неопределено;
	МассивСтрок = ЭтотОбъект["бзРешения"].НайтиСтроки(Новый Структура("Решение", Решение));
	Для Каждого ЭлементМассива Из МассивСтрок Цикл
		Если ЭтотОбъект["бзТекущийИдентификатор"] = ЭлементМассива.ПолучитьИдентификатор() Тогда
			СтрокаРешения = ЭлементМассива;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Если СтрокаРешения = Неопределено Тогда Возврат; КонецЕсли;
	// Заполняем текст вопроса
	ОбластьПоиска	= ЭтотОбъект["бзОбластьПоиска"];
	СтрокаПоиска	= ЭтотОбъект["бзСтрокаПоиска"];
	ПозицияНачала	= Найти(Решение_ТекстВопросаHTML, "<body>") + 6;
	ТекстНачала		= Лев(Решение_ТекстВопросаHTML, ПозицияНачала);
	ПозицияКонца	= Найти(Решение_ТекстВопросаHTML, "</body>");
	ТекстКонца		= Сред(Решение_ТекстВопросаHTML, ПозицияКонца);
	ТекстВопроса	= Сред(Решение_ТекстВопросаHTML, ПозицияНачала, ПозицияКонца - ПозицияНачала - 1);
	ТекстВопроса	= СокрЛП(ТекстВопроса);
	ТекстВопроса	= СтрЗаменить(ТекстВопроса, Символы.ПС, "");
	ТекстВопроса	= СтрЗаменить(ТекстВопроса, "</p><p></p><p>", "</p><p>");
	НомерВложения = 0;
		
	// Добавляем текст вопроса
	ТекстПоляHTML = ТекстНачала + "<p>" + Нстр("ru='Вопрос: '") + "<b>" 
	+ CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(Решение.Наименование, СтрокаПоиска) + "</b></p><p><b>"; 
	// 
	ТекстПоляHTML = ТекстПоляHTML + "</b>" + " " 
	+ "<FONT size=2><A href=""ДобавитьТекстВопросаВОписаниеСобытия"">""Добавить в описание события""</A></FONT><BR>" 	
	+ "</p><p>";
	ТекстПоляHTML = ТекстПоляHTML + "</b>" + " " 
	+ "<FONT size=2><A href=""ДобавитьТекстВопросаВРезультатСобытия"">""Добавить в результат события""</A></FONT><BR>" 
	+ "</p><p>";	
	//	
	Если ЗначениеЗаполнено(Решение.ОсновнаяКатегория) Тогда
		ТекстПоляHTML	= ТекстПоляHTML + "<FONT size=1>" + Нстр("ru='Основная категория: '") + "<b>" 
			+ CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(Решение.ОсновнаяКатегория.Наименование, СтрокаПоиска) + "</b></FONT></p><p>";
	Иначе
		ТекстПоляHTML	= ТекстПоляHTML + "<FONT size=1>" + Нстр("ru='Основная категория: '") + "<b>" + НСтр("ru='[не задана]'") + "</b></FONT></p><p>";
	КонецЕсли;	
	Если ЗначениеЗаполнено(Решение.Проект) Тогда
		ТекстПоляHTML	= ТекстПоляHTML + "<FONT size=1>" + Нстр("ru='Проект: '") + "<b>" 
			+ CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(Решение.Проект.Наименование, СтрокаПоиска) + "</b></FONT></p><p>"; 
	Иначе
		ТекстПоляHTML	= ТекстПоляHTML + "<FONT size=1>" + Нстр("ru='Проект: '") + "<b>" + НСтр("ru='[не задан]'") + "</b></FONT></p><p>"; 
	КонецЕсли;	
	Если ЗначениеЗаполнено(Решение.Автор) Тогда
		ТекстПоляHTML	= ТекстПоляHTML + "<FONT size=1>" + Нстр("ru='Автор: '") + "<b>" 
			+ CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(Решение.Автор.Наименование, СтрокаПоиска) + "</b></FONT></p><br>";
	Иначе
		ТекстПоляHTML	= ТекстПоляHTML + "<FONT size=1>" + Нстр("ru='Автор: '") + "<b>" + НСтр("ru='[не задан]'") + "</b></FONT></p><br>";
	КонецЕсли;	
	ТекстПоляHTML	= ТекстПоляHTML + CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(ТекстВопроса, СтрокаПоиска);
	// Заполняем список выбора
	СписокВыбораОтветов = Элементы["бзРешенияВыбранныйОтвет"].СписокВыбора;
	СписокВыбораОтветов.Очистить();
	СписокВыбораОтветов.Добавить("");
	Если (Решение.СтатусРешения = Перечисления.CRM_СтатусыРешений.Личное) И НЕ (Решение.Автор = Пользователи.АвторизованныйПользователь()) Тогда
		ТекстПоляHTML = ТекстПоляHTML + ТекстКонца;
		ЭтотОбъект["бзТекстВопросаHTML"] = ТекстПоляHTML;
	ИначеЕсли Решение.СтатусРешения = Перечисления.CRM_СтатусыРешений.НаРассмотрении Тогда
		ТекстПоляHTML = ТекстПоляHTML + ТекстКонца;
		ЭтотОбъект["бзТекстВопросаHTML"] = ТекстПоляHTML;
	Иначе	
		ТекстПоляHTML = ТекстПоляHTML + ТекстКонца;
		ЭтотОбъект["бзТекстВопросаHTML"] = ТекстПоляHTML;
		
		// Заполняем тексты всех ответов и сортируем их.
		ЭтотОбъект["бзТаблицаОтветов"].Очистить();
		Для Каждого ТекОтвет Из Решение.Ответы Цикл
			
			НоваяСтрока		= ЭтотОбъект["бзТаблицаОтветов"].Добавить();
			НоваяСтрока.Наименование	= ТекОтвет.НаименованиеОтвета;
			
			Ответ_ВариантОтветаHTML = CRM_БазаЗнанийСервер.ОбработатьТекстHTML(Решение, ТекОтвет.ИДСтроки, ЭтаФорма.УникальныйИдентификатор);
			
			ПозицияНачала	= Найти(Ответ_ВариантОтветаHTML, "<body>") + 6;
			ПозицияКонца	= Найти(Ответ_ВариантОтветаHTML, "</body>");
			ТекстОтвета		= Сред(Ответ_ВариантОтветаHTML, ПозицияНачала, ПозицияКонца - ПозицияНачала - 1);
			ТекстОтвета		= СокрЛП(ТекстОтвета);
			ТекстОтвета		= СтрЗаменить(ТекстОтвета, Символы.ПС, "");
			ТекстОтвета		= СтрЗаменить(ТекстОтвета, "</p><p></p><p>", "</p><p>");
			
			НоваяСтрока.ИДСтроки		= ТекОтвет.ИДСтроки;
			НоваяСтрока.НомерСтроки		= ТекОтвет.НомерСтроки;
			НоваяСтрока.Выбранный		= (СтрокаРешения.ИДСтроки = ТекОтвет.ИДСтроки);
			НоваяСтрока.Найденный		= НЕ (СтрокаРешения.Ответы.НайтиПоЗначению(ТекОтвет.ИДСтроки) = Неопределено);
			Если ТекОтвет.СтатусОтвета = Перечисления.CRM_СтатусыРешений.Утверждено Тогда
				НоваяСтрока.Порядок	= 2;
			ИначеЕсли ТекОтвет.СтатусОтвета = Перечисления.CRM_СтатусыРешений.Устарело Тогда	
				НоваяСтрока.Порядок	= 0;
			Иначе
				НоваяСтрока.Порядок	= 1;
			КонецЕсли;	
				
			НоваяСтрока.ТекстОтвета		= СокрЛП(ТекстОтвета);
			НоваяСтрока.НачалоТекста	= 0;	
			НоваяСтрока.КонецТекста		= 0;
			
		КонецЦикла;
		НомерОтвета = 0;
		Для Каждого ТекОтвет Из ЭтотОбъект["бзТаблицаОтветов"] Цикл
			НомерОтвета = НомерОтвета + 1;
			СписокВыбораОтветов.Добавить(ТекОтвет.Наименование);
			// Добавляем текст ответа
			ТекстПоляОтветаHTML = "<p></p><p><b>" + Нстр("ru='Ответ №:'") + Строка(НомерОтвета) + " ";
			Если ТекОтвет.Порядок	= 0 Тогда
				ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + Нстр("ru='(устаревший)'") + " ";
			КонецЕсли;
			
			ТекстСсылки = "ДобавитьТекстОтветаВОписаниеСобытия" + ТекОтвет.ИДСтроки;
			ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + "</b>" + " " 
				+ "<FONT size=2><A href=" + ТекстСсылки +">""Добавить в описание события""</A></FONT><BR>" 
				+ "</p><p>";
			ТекстСсылки = "ДобавитьТекстОтветаВРезультатСобытия" + ТекОтвет.ИДСтроки;
			ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + "</b>" + " " 
				+ "<FONT size=2><A href=" + ТекстСсылки +">""Добавить в результат события""</A></FONT><BR>" 
				+ "</p><p>";				
			АвторИзменения = ЭтотОбъект["бзТекущийВопрос"].Ответы[ТекОтвет.НомерСтроки - 1].АвторИзменения;
			Если ЗначениеЗаполнено(АвторИзменения) Тогда
				ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + "<FONT size=1>" + НСтр("ru='Автор: '") + "<b>" 
					+ CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(АвторИзменения.Наименование, СтрокаПоиска) + "</FONT></b></p><br>";
			Иначе
				ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + "<FONT size=1>" + НСтр("ru='Автор: '") + "<b>" + НСтр("ru='[не задан]'") + "</FONT></b></p><br>";
			КонецЕсли;	
			
			ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(ТекОтвет.ТекстОтвета, СтрокаПоиска);
			ЭтотОбъект["бзТекстВопросаHTML"] = ЭтотОбъект["бзТекстВопросаHTML"] + "<hr><br>" + ТекстПоляОтветаHTML;
		КонецЦикла;
		ТекстПоляHTML = ТекстПоляHTML + ТекстКонца;
	КонецЕсли;
	
	ДлинаТекстаВопроса	= СтрДлина(ТекстПоляHTML);
	ПозицияОтвета		= Найти(ТекстПоляHTML, НСтр("ru='Ответ №:'"));	
	НачалоОтвета		= ПозицияОтвета;
	Для Каждого ТекОтвет Из ЭтотОбъект["бзТаблицаОтветов"] Цикл
		ТекОтвет.НачалоТекста	= НачалоОтвета;
		ТекстПоляHTML			= Сред(ТекстПоляHTML, ПозицияОтвета + 8);
		ПозицияОтвета			= Найти(ТекстПоляHTML, НСтр("ru='Ответ №:'"));	
		Если ПозицияОтвета = 0 Тогда
			ТекОтвет.КонецТекста	= ДлинаТекстаВопроса;	
		Иначе	
			НачалоОтвета			= НачалоОтвета + 8 + ПозицияОтвета;	
			ТекОтвет.КонецТекста	= НачалоОтвета - 1;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры // БзЗаполнитьТекстВопросаHTML().

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "Решения".
//
// Параметры:
//	Нет.
//
Процедура бзОбработчикРешенияПриАктивизацииСтроки()
	ТД = Элементы["бзРешения"].ТекущиеДанные;
	Если ТД = Неопределено Тогда
		ЭтотОбъект["бзТекстВопросаHTML"] = "";
		Возврат;
	ИначеЕсли (ЭтотОбъект["бзТекущийВопрос"] = ТД.Решение) 
		И (ЭтотОбъект["бзТекущийИдентификатор"] = ТД.ПолучитьИдентификатор()) Тогда
		Возврат;
	КонецЕсли;
	ЭтотОбъект["бзТекущийВопрос"]			= ТД.Решение;
	ЭтотОбъект["бзТекущийИдентификатор"]	= ТД.ПолучитьИдентификатор();	
	Если ТД.Ответы.Количество() = 0 Тогда
		ТД.Ответы.Добавить(ТД.ИДСтроки);
	КонецЕсли;	
	бзЗаполнитьТекстВопросаHTML();
КонецПроцедуры // БзОбработчикРешенияПриАктивизацииСтроки().

#КонецОбласти

#Область ПроцедурыИФункцииЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "СтрокаПоиска".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзСтрокаПоискаПриИзменении(Элемент)
	Элементы["бзПолнотекстовыйПоискОтменить"].Доступность = ЗначениеЗаполнено(ЭтотОбъект["бзСтрокаПоиска"]);
	бзВыполнитьПП();
КонецПроцедуры // Подключаемый_бзСтрокаПоискаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "СтрокаПоиска".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзСтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//СписокДляВыбора = Новый СписокЗначений();
	//СписокДляВыбора.Добавить("[ПоискПоПолномуНазванию]", НСтр("ru = '[Поиск по полному названию]'"));
	//СписокДляВыбора.Добавить("[ПоискПоПодстроке]", НСтр("ru = '[Поиск по подстроке]'"));
	//ВыбранноеЗначение = ВыбратьИзСписка(СписокДляВыбора, Элемент, ?(ЭтотОбъект["бзПоискПоПодстроке"], СписокДляВыбора[1], СписокДляВыбора[0]));
	//Если НЕ (ВыбранноеЗначение = Неопределено) Тогда
	//	Элементы["бзСтрокаПоиска"].ПодсказкаВвода = ВыбранноеЗначение.Представление;
	//	Элементы["бзСтрокаПоиска"].Подсказка = ВыбранноеЗначение.Представление;
	//	Если ВыбранноеЗначение.Значение = "[ПоискПоПодстроке]" Тогда
	//		ЭтотОбъект["бзПоискПоПодстроке"] = Истина;
	//	Иначе
	//		ЭтотОбъект["бзПоискПоПодстроке"] = Ложь;
	//	КонецЕсли;
	//	Подключаемый_бзСтрокаПоискаПриИзменении(Элемент);
	//КонецЕсли;
КонецПроцедуры // Подключаемый_бзСтрокаПоискаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" поля ввода "СтрокаПоиска".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзСтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	КоличествоНайденных = 0;
	Для Каждого ЭлементСписка Из ЭтотОбъект["бзСтрокаПоискаСписокВыбора"] Цикл
		Если ВРег(Лев(ЭлементСписка, 6)) = "[ПОИСК" Тогда
			Продолжить;
		КонецЕсли;
		Если ЛЕВ(ВРег(ЭлементСписка.Значение), СтрДлина(СокрЛП(Текст))) = ВРег(СокрЛП(Текст)) Тогда
			 ДанныеВыбора.Добавить(ЭлементСписка.Значение);
			 КоличествоНайденных = КоличествоНайденных + 1;
			 Если КоличествоНайденных > 7 Тогда
				 Прервать;
			 КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;
	Если ДанныеВыбора.Количество() = 0 Тогда
		ДанныеВыбора = Неопределено;
		СтандартнаяОбработка = Истина;
	КонецЕсли;
КонецПроцедуры // Подключаемый_бзСтрокаПоискаАвтоПодбор()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" флажка "ИскатьПоПроекту".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзИскатьПоПроектуПриИзменении(Элемент)
	бзВыполнитьПП();
КонецПроцедуры // Подключаемый_бзИскатьПоПроектуПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" надписи "ДекорацияИндексППНеактуален".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзДекорацияИндексППНеактуаленНажатие(Элемент)
	ПодключитьОбработчикОжидания("бзОбновлениеИндексаПДД", 0.2, Истина);
КонецПроцедуры // Подключаемый_бзДекорацияИндексППНеактуаленНажатие()

&НаКлиенте
// Процедура - обработчик события "Выбор" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзРешенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы["бзРешения"].ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ПоказатьЗначение(, ТД.Решение);
КонецПроцедуры // Подключаемый_бзРешенияВыбор()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзРешенияПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("бзОбработчикРешенияПриАктивизацииСтроки", 0.2, Истина);
КонецПроцедуры // Подключаемый_бзРешенияПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзРешенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
	ФормаВыбораРешения = ПолучитьФорму("Справочник.CRM_Решения.ФормаСписка", ПараметрыФормы, ЭтотОбъект);	
	ВыбранноеРешение = ФормаВыбораРешения.ОткрытьМодально();
	Если ВыбранноеРешение = Неопределено Тогда Возврат; КонецЕсли;
	ИндексСтроки = бзДобавитьИспользуемоеРешение(ВыбранноеРешение);	
	СтрокаРешения = ЭтотОбъект["бзРешения"][ИндексСтроки].ПолучитьИдентификатор();
	Элементы["бзРешения"].ТекущаяСтрока = СтрокаРешения;
КонецПроцедуры // Подключаемый_бзРешенияПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзРешенияПередНачаломИзменения(Элемент, Отказ)
	Если (Элемент.ТекущийЭлемент.Имя = "бзРешенияРешение") ИЛИ (Элемент.ТекущийЭлемент.Имя = "бзРешенияКатегория") Тогда
		Отказ = Истина;
		ТД = Элементы["бзРешения"].ТекущиеДанные;
		Если ТД = Неопределено Тогда Возврат; КонецЕсли;
		ПоказатьЗначение(, ТД.Решение);
	КонецЕсли;	
КонецПроцедуры // Подключаемый_бзРешенияПередНачаломИзменения()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзРешенияПередУдалением(Элемент, Отказ)
	Если ЭтотОбъект["бзРешения"].Количество() = 1 Тогда
		ЭтотОбъект["бзТекстВопросаHTML"] 		= "";
		ЭтотОбъект["бзТекущийВопрос"]			= ПредопределенноеЗначение("Справочник.CRM_Решения.ПустаяСсылка");
		ЭтотОбъект["бзТекущийИдентификатор"]	= 0;
	КонецЕсли;	
КонецПроцедуры // Подключаемый_бзРешенияПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриНажатии" поля формы "бзТекстВопросаHTML".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзТекстВопросаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтруктураНажатия = бзПроверитьЧтоЭтоСсылкаНаДобавление(ДанныеСобытия.Href); 
	Если СтруктураНажатия.ОбработатьСсылку Тогда
		СтандартнаяОбработка = Ложь;	
		бзОбработатьСсылку(СтруктураНажатия.ИмяОбработчика)
	КонецЕсли;		
КонецПроцедуры	

#КонецОбласти

#Область ПроцедурыКомандФормы

&НаКлиенте
// Процедура - обработчик команды формы "ОткрытьБазуЗнаний".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура Подключаемый_бзОткрытьБазуЗнаний(Команда)
	Элементы["бзОткрытьБазуЗнаний"].Пометка		= НЕ Элементы["бзОткрытьБазуЗнаний"].Пометка;
	Элементы["бзГруппаБазаЗнаний"].Видимость	= Элементы["бзОткрытьБазуЗнаний"].Пометка;
	Если Элементы["бзГруппаБазаЗнаний"].Видимость Тогда
		ТекущийЭлемент = Элементы["бзГруппаБазаЗнаний"];
		// Устанавливаем область поиска по умолчанию.
		Если ПустаяСтрока(ЭтотОбъект["бзОбластьПоиска"]) Тогда
			ЭтотОбъект["бзОбластьПоиска"] = Элементы["бзОбластьПоиска"].СписокВыбора[0].Значение;
		КонецЕсли;	
		Если ЭтотОбъект["бзРешения"].Количество() = 0 Тогда
			ЭтотОбъект["бзСтрокаПоиска"]		= бзПолучитьТему();
			ЭтотОбъект["бзИскатьПоПроекту"]	= Ложь;
			Элементы["бзПолнотекстовыйПоискОтменить"].Доступность = ЗначениеЗаполнено(ЭтотОбъект["бзСтрокаПоиска"]);
			бзВыполнитьПП();
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // Подключаемый_бзОткрытьБазуЗнаний()
	
&НаКлиенте
// Процедура - обработчик события "ПриСменеСтраницы" группы формы "Страницы".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "бзГруппаБазаЗнаний" Тогда
		Элементы["бзТекстВопросаHTML"].Видимость	= Истина;
		// Устанавливаем область поиска по умолчанию.
		Если ПустаяСтрока(ЭтотОбъект["бзОбластьПоиска"]) Тогда
			ЭтотОбъект["бзОбластьПоиска"] = Элементы["бзОбластьПоиска"].СписокВыбора[0].Значение;
		КонецЕсли;	
		Если ЭтотОбъект["бзРешения"].Количество() = 0 Тогда
			ЭтотОбъект["бзСтрокаПоиска"]		= бзПолучитьТему();
			ЭтотОбъект["бзИскатьПоПроекту"]	= Ложь;
			Элементы["бзПолнотекстовыйПоискОтменить"].Доступность = ЗначениеЗаполнено(ЭтотОбъект["бзСтрокаПоиска"]);
			бзВыполнитьПП();
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

// -БазаЗнаний

// +GOOGLE

&НаСервере
Процедура УправлениеНастройкамиСобытияGoogle()
	
	Если ЗначениеЗаполнено(Объект.ОрганизаторGApi) И Объект.ОрганизаторGApi<>Объект.Автор Тогда
		Элементы.ГостиМогутИзменятьМероприятиеGApi.ТолькоПросмотр = Истина;
		Элементы.ГостиМогутПриглашатьДругихГостейGApi.ТолькоПросмотр = Истина;
		Элементы.ГостиМогутВидетьСписокГостейGApi.ТолькоПросмотр     = Истина;
	КонецЕсли;
	
	//рассылка оповещений
	Объект.РассылатьУведомленияПоНастройкеGApi = Не Объект.РассылкаПоУмолчаниюGApi;
	Элементы.МинутыGApi.ТолькоПросмотр = Объект.РассылкаПоУмолчаниюGApi;
	
	// права гостей
	Если ЗначениеЗаполнено(Объект.Ссылка) И Объект.ГостиМогутИзменятьМероприятиеGApi Тогда
		Объект.ГостиМогутПриглашатьДругихГостейGApi = Истина;
		Объект.ГостиМогутВидетьСписокГостейGApi     = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассылкаПоУмолчаниюGApiПриИзменении(Элемент)
	  УправлениеНастройкамиСобытияGoogle();
КонецПроцедуры

&НаКлиенте
Процедура РассылатьУведомленияПоНастройкеGApiПриИзменении(Элемент)
	Объект.РассылкаПоУмолчаниюGApi = Не Объект.РассылатьУведомленияПоНастройкеGApi;
	УправлениеНастройкамиСобытияGoogle();
КонецПроцедуры

&НаКлиенте
Процедура ГостиМогутИзменятьМероприятиеGApiПриИзменении(Элемент)
	УправлениеНастройкамиСобытияGoogle();
КонецПроцедуры

// -GOOGLE

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	ОтветственныйПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Прав(СтрокаТаб.ИмяПоля,1);
		
		Элементы.Удалить(Элементы["ПолеКанала_"+Строка(Ид)]);
		Элементы.Удалить(Элементы["ПолеСрокаОповещения_"+Строка(Ид)]);
		Элементы.Удалить(Элементы["ПолеПериодаОповещения_"+Строка(Ид)]);
		Элементы.Удалить(Элементы["ПолеДатыОповещения_"+Строка(Ид)]);
		Элементы.Удалить(Элементы["Кнопка_УдалитьОповещение_"+Строка(Ид)]);
		Элементы.Удалить(Элементы["ПолеПредупреждения_"+Строка(Ид)]);
		Элементы.Удалить(Элементы["НадписьСрокаОповещения_"+Строка(Ид)]);
		Элементы.Удалить(Элементы["ГруппаСрокаОповещения_"+Строка(Ид)]);
	КонецЦикла;
	
	Если _ТаблицаОповещений.Количество() < 5 Тогда
		Элементы.Удалить(Элементы["_ДобавитьОповещение"]);
	КонецЕсли;
	
	_ТаблицаОповещений.Очистить();
	
	ЗаполнитьТаблицуОповещений();
	
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		
		СтрокаТаб.ИмяПоля = "ПолеКанала_"+Строка(Ид);
		
		Элемент = Элементы.Добавить("ПолеКанала_"+Строка(Ид),Тип("ПолеФормы"),Элементы.КаналыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок					= Строка(Ид);
		Элемент.ПутьКДанным					="_КаналОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = СтрокаТаб.Канал;
		
		ЭлементГруппаСрока = Элементы.Добавить("ГруппаСрокаОповещения_"+Строка(Ид),Тип("ГруппаФормы"), Элементы.СрокиОповещений);
		ЭлементГруппаСрока.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппаСрока.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ЭлементГруппаСрока.ОтображатьЗаголовок 		= Ложь;
		ЭлементГруппаСрока.Отображение 		  		= ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппаСрока.РастягиватьПоГоризонтали = Ложь;
		
		Элемент = Элементы.Добавить("НадписьСрокаОповещения_"+Строка(Ид),Тип("ДекорацияФормы"), ЭлементГруппаСрока);
		Элемент.Вид 						= ВидДекорацииФормы.Надпись;
		Элемент.Заголовок					= НСтр("ru = 'за'");
		Элемент.Ширина						= 2;
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		
		Элемент = Элементы.Добавить("ПолеСрокаОповещения_"+Строка(Ид),Тип("ПолеФормы"), ЭлементГруппаСрока);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_СрокОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.КнопкаРегулирования			= Истина;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		Элемент.Подсказка					= НСтр("ru = 'Срок до начала события, за который нужно напомнить'");
		
		ЭтотОбъект["_СрокОповещения"+Строка(Ид)] = СтрокаТаб.СрокОповещения;
		
		Элемент = Элементы.Добавить("ПолеПериодаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ПериодыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ПериодОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.Ширина						= 5;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_ПериодОповещения"+Строка(Ид)] = СтрокаТаб.Периодичность;
		
		Элемент = Элементы.Добавить("ПолеДатыОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ДатыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ДатаОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.ТолькоПросмотр				= Истина;
		Элемент.Подсказка					= НСтр("ru = 'Планируемая дата оповещения'");
		
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = СтрокаТаб.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > ТекущаяДатаСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
		
		Элемент = Элементы.Добавить("ПолеПредупреждения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.Предупреждения);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_Предупреждение"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Истина;
		Элемент.ТолькоПросмотр				= Истина;
		
		ЭтотОбъект["_Предупреждение"+Строка(Ид)] = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > ТекущаяДатаСеанса(), "", СообщениеОНекорректностиВремениОповещения);
		Элементы["ПолеПредупреждения_"+Строка(Ид)].ЦветТекста = Новый Цвет(255,0,0);
		
		НовыйЭлемент = Элементы.Добавить("Кнопка_УдалитьОповещение_"+Строка(Ид),Тип("КнопкаФормы"), Элементы.УдалениеОповещений);
		НовыйЭлемент.ИмяКоманды			= "УдалитьОповещение_"+Строка(Ид);
		НовыйЭлемент.Заголовок			= "Удалить";
		НовыйЭлемент.Картинка			= БиблиотекаКартинок.Удалить;
		НовыйЭлемент.Отображение		= ОтображениеКнопки.Картинка;
		
	КонецЦикла;
	
	Если Ид < 5 Тогда
		НовыйЭлемент = Элементы.Добавить("_ДобавитьОповещение", Тип("ДекорацияФормы"), Элементы.КаналыОповещений);
		НовыйЭлемент.Заголовок	= "Добавить оповещение";
		НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Гиперссылка= Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ДобавитьОповещение");
	КонецЕсли;
	
КонецПроцедуры

СообщениеОНекорректностиВремениОповещения = НСтр("ru = '(Время события не корректно, оповещение не будет создано!)'");

#КонецОбласти

#КонецОбласти
