
#Область ОбработчикиСобытий

// ++ VOG Солодов В.В. 29.06.2021 DEV-700
Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.Планирование.Очистить();
	
КонецПроцедуры // -- VOG Солодов В.В. 29.06.2021 DEV-700

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьЗаполнениеПериода(Отказ);
		ПроверитьУникальностьДокументаПоПериодуПланирования(Отказ);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", 	ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", 	РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СоздатьМаршрутыКомандировок(Отказ);
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.КонструкторМаршрутов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	Документы.КонструкторМаршрутов.ОтразитьДанныеПланированияМаршрутов(ДополнительныеСвойства, Движения, Отказ);
	Документы.КонструкторМаршрутов.ОтразитьДанныеТочкиМаршрутов(ДополнительныеСвойства, Движения, Отказ);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Очистить дополнительные свойства для проведения
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеПериода(Отказ)
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Уровень", 	0);
	ПараметрыОтбораСтрок.Вставить("Период", 	Дата(1,1,1));
	
	НайденныеСтроки = Планирование.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		ШаблонСообщения = НСтр("ru = 'Для маршрута %1 не указан период.'");
		ТекстСообщения 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, НайденнаяСтрока.Маршрут);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьУникальностьДокументаПоПериодуПланирования(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КонструкторМаршрутов.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КонструкторМаршрутов КАК КонструкторМаршрутов
		|ГДЕ
		|	НЕ КонструкторМаршрутов.Ссылка = &Ссылка
		|	И КонструкторМаршрутов.Ответственный = &Ответственный
		|	И КонструкторМаршрутов.ПериодПланирования = &Период
		|	И КонструкторМаршрутов.Проведен";
	
	Запрос.УстановитьПараметр("Ответственный", 	Ответственный);
	Запрос.УстановитьПараметр("Период", 		ПериодПланирования);
	Запрос.УстановитьПараметр("Ссылка", 		Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ШаблонСообщения = НСтр("ru = 'В рамках %1 уже создан документ.
		|Для проведения данного документа, необходимо отменить проведение предыдущего.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, Формат(ПериодПланирования, "ДФ='к""-го"" ""квартала"" гггг ""г.""'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьМаршрутыКомандировок(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// +++ VOG Кулаков П.Л. 18.06.2021 DEV-665
	// Изменен запрос, добавлено поле Клиент
	"ВЫБРАТЬ
	|	КонструкторМаршрутовПланирование.Маршрут КАК Маршрут,
	|	КонструкторМаршрутовПланирование.Город КАК Город,
	|	КонструкторМаршрутовПланирование.ТРТ КАК ТРТ,
	|	КонструкторМаршрутовПланирование.Идентификатор КАК Идентификатор,
	|	КонструкторМаршрутовПланирование.ИдентификаторРодителя КАК ИдентификаторРодителя,
	|	КонструкторМаршрутовПланирование.Уровень КАК Уровень,
	|	КонструкторМаршрутовПланирование.ИдентификаторМаршрута КАК ИдентификаторМаршрута,
	|	КонструкторМаршрутовПланирование.Клиент КАК Клиент
	|ПОМЕСТИТЬ ВТ_ВсеСтроки
	|ИЗ
	|	Документ.КонструкторМаршрутов.Планирование КАК КонструкторМаршрутовПланирование
	|ГДЕ
	|	КонструкторМаршрутовПланирование.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиМаршрут.ИдентификаторМаршрута КАК ИдентификаторМаршрута,
	|	СтрокиМаршрут.Маршрут КАК Маршрут,
	|	СтрокиГород.Город КАК НаселенныйПункт,
	|	ВТ_ВсеСтроки.ТРТ КАК Точка,
	|	ВТ_ВсеСтроки.Клиент КАК Клиент
	|ПОМЕСТИТЬ ВТ_Маршруты
	|ИЗ
	|	ВТ_ВсеСтроки КАК ВТ_ВсеСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВсеСтроки КАК СтрокиГород
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВсеСтроки КАК СтрокиРегион
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВсеСтроки КАК СтрокиМаршрут
	|				ПО СтрокиРегион.ИдентификаторРодителя = СтрокиМаршрут.Идентификатор
	|			ПО СтрокиГород.ИдентификаторРодителя = СтрокиРегион.Идентификатор
	|		ПО ВТ_ВсеСтроки.ИдентификаторРодителя = СтрокиГород.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутыКомандировокСоставМаршрута.Ссылка.НаименованиеПолное КАК НаименованиеПолное,
	|	МаршрутыКомандировокСоставМаршрута.НаселенныйПункт КАК НаселенныйПункт,
	|	МаршрутыКомандировокСоставМаршрута.Точка КАК Точка,
	|	МаршрутыКомандировокСоставМаршрута.Клиент КАК Клиент
	|ПОМЕСТИТЬ ВТ_СуществующиеМаршруты
	|ИЗ
	|	ВТ_Маршруты КАК ВТ_Маршруты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаршрутыКомандировок.СоставМаршрута КАК МаршрутыКомандировокСоставМаршрута
	|		ПО ВТ_Маршруты.Маршрут = МаршрутыКомандировокСоставМаршрута.Ссылка.НаименованиеПолное
	|			И (НЕ МаршрутыКомандировокСоставМаршрута.Ссылка.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Маршруты.ИдентификаторМаршрута КАК ИдентификаторМаршрута,
	|	ВТ_СуществующиеМаршруты.НаселенныйПункт КАК НаселенныйПункт,
	|	ВТ_СуществующиеМаршруты.Точка КАК Точка,
	|	ЛОЖЬ КАК СоздаватьМаршрут,
	|	ВТ_СуществующиеМаршруты.Клиент КАК Клиент
	|ПОМЕСТИТЬ ВТ_Подготовленная
	|ИЗ
	|	ВТ_Маршруты КАК ВТ_Маршруты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СуществующиеМаршруты КАК ВТ_СуществующиеМаршруты
	|		ПО ВТ_Маршруты.Маршрут = ВТ_СуществующиеМаршруты.НаименованиеПолное
	|			И ВТ_Маршруты.НаселенныйПункт = ВТ_СуществующиеМаршруты.НаселенныйПункт
	|			И ВТ_Маршруты.Точка = ВТ_СуществующиеМаршруты.Точка
	|			И ВТ_Маршруты.Клиент = ВТ_СуществующиеМаршруты.Клиент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Маршруты.ИдентификаторМаршрута,
	|	ВТ_Маршруты.НаселенныйПункт,
	|	ВТ_Маршруты.Точка,
	|	ИСТИНА,
	|	ВТ_Маршруты.Клиент
	|ИЗ
	|	ВТ_Маршруты КАК ВТ_Маршруты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуществующиеМаршруты КАК ВТ_СуществующиеМаршруты
	|		ПО ВТ_Маршруты.Маршрут = ВТ_СуществующиеМаршруты.НаименованиеПолное
	|			И ВТ_Маршруты.НаселенныйПункт = ВТ_СуществующиеМаршруты.НаселенныйПункт
	|			И ВТ_Маршруты.Точка = ВТ_СуществующиеМаршруты.Точка
	|ГДЕ
	|	ВТ_СуществующиеМаршруты.НаименованиеПолное ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Маршруты.ИдентификаторМаршрута,
	|	ВТ_СуществующиеМаршруты.НаселенныйПункт,
	|	ВТ_СуществующиеМаршруты.Точка,
	|	ИСТИНА,
	|	ВТ_СуществующиеМаршруты.Клиент
	|ИЗ
	|	ВТ_СуществующиеМаршруты КАК ВТ_СуществующиеМаршруты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Маршруты КАК ВТ_Маршруты
	|		ПО ВТ_СуществующиеМаршруты.НаименованиеПолное = ВТ_Маршруты.Маршрут
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Маршруты КАК ВТ_Маршруты2
	|		ПО ВТ_СуществующиеМаршруты.НаселенныйПункт = ВТ_Маршруты2.НаселенныйПункт
	|			И ВТ_СуществующиеМаршруты.Точка = ВТ_Маршруты2.Точка
	|			И ВТ_СуществующиеМаршруты.Клиент = ВТ_Маршруты2.Клиент
	|ГДЕ
	|	ВТ_Маршруты2.ИдентификаторМаршрута ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Маршруты.ИдентификаторМаршрута КАК ИдентификаторМаршрута,
	|	ВТ_Маршруты.Маршрут КАК Маршрут,
	|	ВТ_Маршруты.НаселенныйПункт КАК НаселенныйПункт,
	|	ВТ_Маршруты.Точка КАК Точка,
	|	ВТ_Маршруты.Клиент КАК Клиент
	|ИЗ
	|	ВТ_Маршруты КАК ВТ_Маршруты
	// ++ VOG Солодов В.В. 29.06.2021 DEV-700
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВТ_Подготовленная.ИдентификаторМаршрута КАК ИдентификаторМаршрута,
	|			ВТ_Подготовленная.Точка КАК Точка,
	|			ВТ_Подготовленная.Клиент КАК Клиент
	|		ИЗ
	|			ВТ_Подготовленная КАК ВТ_Подготовленная
	|		ГДЕ
	|			ВТ_Подготовленная.СоздаватьМаршрут = ИСТИНА) КАК ВложенныйЗапрос
	|		ПО ВТ_Маршруты.ИдентификаторМаршрута = ВложенныйЗапрос.ИдентификаторМаршрута
	|			И ВТ_Маршруты.Точка = ВложенныйЗапрос.Точка
	|			И ВТ_Маршруты.Клиент = ВложенныйЗапрос.Клиент
	// До изменения
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|			ВТ_Подготовленная.ИдентификаторМаршрута КАК ИдентификаторМаршрута
	//|		ИЗ
	//|			ВТ_Подготовленная КАК ВТ_Подготовленная
	//|		ГДЕ
	//|			ВТ_Подготовленная.СоздаватьМаршрут = ИСТИНА) КАК ВложенныйЗапрос
	//|		ПО ВТ_Маршруты.ИдентификаторМаршрута = ВложенныйЗапрос.ИдентификаторМаршрута
	// -- VOG Солодов В.В. 29.06.2021 DEV-700
	|ИТОГИ
	|	МАКСИМУМ(Маршрут)
	|ПО
	|	ИдентификаторМаршрута";
	// --- VOG Кулаков П.Л.
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИдентификаторМаршрута = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИдентификаторМаршрута.Следующий() Цикл
		
		ИдентификаторМаршрута 	= Новый УникальныйИдентификатор(ВыборкаИдентификаторМаршрута.ИдентификаторМаршрута);
		НовыйМаршрутСсылка 		= Справочники.МаршрутыКомандировок.ПолучитьСсылку(ИдентификаторМаршрута);
		
		// ++ VOG Солодов В.В. 29.06.2021 DEV-700
		Если ОбщегоНазначения.СсылкаСуществует(НовыйМаршрутСсылка) Тогда
			НовыйМаршрут = НовыйМаршрутСсылка.ПолучитьОбъект();
			НовыйМаршрут.СоставМаршрута.Очистить();
			НовыйМаршрут.ПометкаУдаления = Ложь;
		Иначе // -- VOG Солодов В.В. 29.06.2021 DEV-700
			НовыйМаршрут = Справочники.МаршрутыКомандировок.СоздатьЭлемент();
			НовыйМаршрут.УстановитьСсылкуНового(НовыйМаршрутСсылка);
		КонецЕсли;
		
		НовыйМаршрут.НаименованиеПолное = ВыборкаИдентификаторМаршрута.Маршрут;
		НовыйМаршрут.Наименование 		= ВыборкаИдентификаторМаршрута.Маршрут;
		НовыйМаршрут.Идентификатор 		= ВыборкаИдентификаторМаршрута.ИдентификаторМаршрута;
	
		ВыборкаДетальныеЗаписи = ВыборкаИдентификаторМаршрута.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаСостав = НовыйМаршрут.СоставМаршрута.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСостав, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
		Попытка
			НовыйМаршрут.Записать();
		Исключение
			
			ТекстСообщения = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти