
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь 				= Пользователи.ТекущийПользователь();
	// ++ VOG Солодов В.В. 16.06.2021 DEV-655
	РеквизитыПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ТекущийПользователь,
		"CRM_НаправлениеДеятельности, Подразделение",
		Истина);
	// До изменения
	//НаправлениеДеятельностиПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
	//	ТекущийПользователь,
	//	"CRM_НаправлениеДеятельности",
	//	Истина);
	// -- VOG Солодов В.В. 16.06.2021 DEV-655
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Дата 					= ТекущаяДата();
		Объект.ПериодПланирования 		= КонецКвартала(Объект.Дата) + 1;
		// ++ VOG Солодов В.В. 16.06.2021 DEV-655
		Объект.НаправлениеДеятельности 	= РеквизитыПользователя.CRM_НаправлениеДеятельности;
		Объект.Подразделение 			= Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(
			РеквизитыПользователя.Подразделение);
		// До изменения
		//Объект.НаправлениеДеятельности 	= НаправлениеДеятельностиПользователя;
		// -- VOG Солодов В.В. 16.06.2021 DEV-655
		
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 16.06.2021 DEV-655
	Если ЗначениеЗаполнено(РеквизитыПользователя.CRM_НаправлениеДеятельности) Тогда
	// До изменения
	//Если ЗначениеЗаполнено(НаправлениеДеятельностиПользователя) Тогда
	// -- VOG Солодов В.В. 16.06.2021 DEV-655
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НаправлениеДеятельности",
			"ТолькоПросмотр",
			Истина);
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	ИнициализироватьКомпоновщикНастроек();
	ЗаполнитьДеревоПодбораНаСервере();
	ЗаполнитьПодобранныеОбъекты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьСлужебныеНастройки();
	РазвернутьСтрокиДерева("ДеревоПодбора");
	РазвернутьСтрокиДерева("ПодобранныеОбъекты");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ответственный) Тогда
		ТекущийОбъект.Ответственный = ТекущийПользователь;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 16.06.2021 DEV-655
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Подразделение) Тогда
		
		ПодразделениеПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущийОбъект.Ответственный,
			"Подразделение",
			Истина);
		
		ТекущийОбъект.Подразделение = Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(
			ПодразделениеПользователя);
		
	КонецЕсли;
	// -- VOG Солодов В.В. 16.06.2021 DEV-655
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Автор) Тогда
		ТекущийОбъект.Автор = ТекущийПользователь;
	КонецЕсли;
	
	ТаблицаМаршрутов = СформироватьТаблицуСуществующихМаршрутов();
	ТекущийОбъект.Планирование.Очистить();
	ЗаполнитьТаблицуПланированияКоллекциейЭлементовДерева(ПодобранныеОбъекты, ТекущийОбъект, "", ТаблицаМаршрутов);
	
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//+++ Терпогосян Д.Б. [06.08.2021 16:52:01] № DEV-743
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//--- Терпогосян Д.Б. [06.08.2021 16:52:07] № DEV-743 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДеревоПодбора

&НаКлиенте
Процедура ДеревоПодбораПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьВыделенныеСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	ТекущиеДанные 			= Элементы.ДеревоПодбора.ТекущиеДанные;
	ТекущаяСтрокаПриемник 	= Элементы.ПодобранныеОбъекты.ТекущаяСтрока;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Регион");
	ПараметрыОтбора.Вставить("Город");
	ПараметрыОтбора.Вставить("ТРТ");
	ПараметрыОтбора.Вставить("Уровень");
	ПараметрыОтбора.Вставить("ВсегоКомандировок");
	
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ТекущиеДанные);
	
	Если ТекущаяСтрокаПриемник = Неопределено Тогда
		Приемник = Неопределено;
	Иначе
		Приемник = ПодобранныеОбъекты.НайтиПоИдентификатору(ТекущаяСтрокаПриемник);
	КонецЕсли;
	
	Если ПроверитьВозможностьПереноса(Неопределено, Приемник, ПараметрыОтбора) Тогда
		
		Источник 	= ДеревоПодбора.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НоваяСтрока = СкопироватьСтрокуДерева(Приемник, Источник);
		
		Если Не НоваяСтрока = Неопределено Тогда
			Элементы.ПодобранныеОбъекты.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
		КонецЕсли;
		
		ПометитьСкопированнуюСтроку(Источник, ЭтотОбъект);
		ЗаполнитьМаршруты();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодбораНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	// Из данного табличного поля разрешено только копировать данные.
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодбораПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодбораОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	// Отметить скопированные ТРТ
	Если Не ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена Тогда
		
		Для Каждого ПеренесеннаяСтрока Из ПараметрыПеретаскивания.Значение Цикл
			ПометитьСкопированнуюСтроку(ПеренесеннаяСтрока, ЭтотОбъект);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодбораПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	МассивУдаляемыхСтрок 	= Новый Массив;
	СтрокиКРасчетуПосещений = Новый Массив;
	
	Для Каждого ПеремещаемаяСтрока Из ПараметрыПеретаскивания.Значение Цикл
		
	    // +++ VOG Кулаков П.Л. 18.06.2021 DEV-665
		Если ТипЗнч(ПеремещаемаяСтрока) <> Тип("ДанныеФормыЭлементДерева") Тогда
			Продолжить;
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		
		Если ПеремещаемаяСтрока.Уровень = 3 Тогда
			МассивУдаляемыхСтрок.Добавить(ПеремещаемаяСтрока);
		Иначе
			
			ПодчиненныеСтроки = НайтиСтрокиДереваРекурсивно(ПеремещаемаяСтрока, Новый Структура("Уровень", 3));
			
			Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
				МассивУдаляемыхСтрок.Добавить(ПодчиненнаяСтрока);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Регион");
		ПараметрыОтбора.Вставить("Город");
		ПараметрыОтбора.Вставить("ТРТ");
		ПараметрыОтбора.Вставить("Уровень");
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, УдаляемаяСтрока);
		
		НайденныеСтроки = НайтиСтрокиДереваРекурсивно(ДеревоПодбора, ПараметрыОтбора);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтрокиКРасчетуПосещений.Добавить(НайденнаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		УдалитьСтрокуДерева(УдаляемаяСтрока);
	КонецЦикла;
	
	Для Каждого СтрокаДереваПодбора Из СтрокиКРасчетуПосещений Цикл
		СтрокаДереваПодбора.Пометка = Ложь;
		РассчитатьКоличествоПосещений(СтрокаДереваПодбора, Истина, ЭтотОбъект);
	КонецЦикла;
	
	УдалитьПустыеСтроки();
	ЗаполнитьМаршруты();
	КэшированныеЗначения 	= Неопределено;
	Модифицированность 		= Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПодобранныеОбъекты

&НаКлиенте
Процедура ПодобранныеОбъектыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеОбъектыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьДоступностьКомандПеремещения", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеОбъектыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ПодобранныеОбъекты.ТекущиеДанные;
	
	Если ТекущиеДанные.НовыйМаршрут Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Индекс = 0 По Элементы.ПодобранныеОбъекты.ВыделенныеСтроки.ВГраница() Цикл
		
		ИдентификаторВыделеннойСтроки = Элементы.ПодобранныеОбъекты.ВыделенныеСтроки.Получить(Индекс);
		ВыделеннаяСтрока = ПодобранныеОбъекты.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		
		Если ВыделеннаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыделеннаяСтрока.Уровень = 3 Тогда
			МассивУдаляемыхСтрок.Добавить(ВыделеннаяСтрока);
		Иначе
			
			ПодчиненныеСтроки = НайтиСтрокиДереваРекурсивно(ВыделеннаяСтрока, Новый Структура("Уровень", 3));
			
			Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
				МассивУдаляемыхСтрок.Добавить(ПодчиненнаяСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Регион");
		ПараметрыОтбора.Вставить("Город");
		ПараметрыОтбора.Вставить("ТРТ");
		ПараметрыОтбора.Вставить("Уровень");
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, УдаляемаяСтрока);
		
		НайденнаяСтрока = вогБизнесПроцессыИЗадачиКлиент.НайтиСтрокуДереваРекурсивно(ДеревоПодбора, ПараметрыОтбора);
		
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТипЗнч(КэшированныеЗначения) = Тип("Массив") Тогда
			КэшированныеЗначения = Новый Массив;
		КонецЕсли;
		
		КэшированныеЗначения.Добавить(НайденнаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеОбъектыПослеУдаления(Элемент)
	
	Если Не ТипЗнч(КэшированныеЗначения) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	// Снимем пометку подбора
	ИскомыеСтроки = Новый Массив;
	
	Для Каждого УдаленнаяСтрока Из КэшированныеЗначения Цикл
		
		Если УдаленнаяСтрока.Уровень = 3 Тогда
			ИскомыеСтроки.Добавить(УдаленнаяСтрока);
		Иначе
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Уровень", 3);
			
			НайденныеСтроки = НайтиСтрокиДереваРекурсивно(УдаленнаяСтрока, ПараметрыОтбора);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ИскомыеСтроки.Добавить(НайденнаяСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИскомаяСтрока Из ИскомыеСтроки Цикл
		
		ПараметрыОтбора = ПараметрыОтбораПоУровню(3);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ИскомаяСтрока);
		НайденныеСтроки = НайтиСтрокиДереваРекурсивно(ПодобранныеОбъекты, ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ИскомаяСтрока.Пометка = Ложь;
		КонецЕсли;
		
		РассчитатьКоличествоПосещений(ИскомаяСтрока, Истина, ЭтотОбъект);
		
	КонецЦикла;
	
	УдалитьПустыеСтроки();
	ЗаполнитьМаршруты();
	КэшированныеЗначения 	= Неопределено;
	Модифицированность 		= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеОбъектыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка 				= Ложь;
	Если ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение Тогда
		ПараметрыПеретаскивания.Действие 	= ДействиеПеретаскивания.Перемещение;
	Иначе
		ПараметрыПеретаскивания.Действие 	= ДействиеПеретаскивания.Копирование;
	КонецЕсли;
	
	НовыйРодитель = ?(Строка = Неопределено, Неопределено, ПодобранныеОбъекты.НайтиПоИдентификатору(Строка));
	
	МассивПереносимыхЭлементов 	= ПараметрыПеретаскивания.Значение;
	СчетчикПереносимыхЭлементов = 0;
	
	Для Каждого СтрокаПодбора Из МассивПереносимыхЭлементов Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Регион");
		ПараметрыОтбора.Вставить("Город");
		ПараметрыОтбора.Вставить("ТРТ");
		ПараметрыОтбора.Вставить("Уровень");
		
		Если ТипЗнч(СтрокаПодбора) = Тип("Число") Тогда
			ПараметрыОтбора.Вставить("Маршрут");
			ПереносимыйЭлемент = ПодобранныеОбъекты.НайтиПоИдентификатору(СтрокаПодбора);
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ПереносимыйЭлемент);
		Иначе
			ПараметрыОтбора.Вставить("ВсегоКомандировок", 0);
			ПереносимыйЭлемент = Неопределено;
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаПодбора);
		КонецЕсли;
		
		Если ПроверитьВозможностьПереноса(ПереносимыйЭлемент, НовыйРодитель, ПараметрыОтбора) Тогда
			СчетчикПереносимыхЭлементов = СчетчикПереносимыхЭлементов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СчетчикПереносимыхЭлементов = МассивПереносимыхЭлементов.Количество() Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеОбъектыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение Тогда
		ПараметрыПеретаскивания.Действие 	= ДействиеПеретаскивания.Перемещение;
	Иначе
		ПараметрыПеретаскивания.Действие 	= ДействиеПеретаскивания.Копирование;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Приемник = Неопределено;
	Иначе
		Приемник = ПодобранныеОбъекты.НайтиПоИдентификатору(Строка);
	КонецЕсли;
	
	МассивПереносимыхЭлементов = ПараметрыПеретаскивания.Значение;
	
	Для Каждого СтрокаПодбора Из МассивПереносимыхЭлементов Цикл
		
		НоваяСтрока = СкопироватьСтрокуДерева(Приемник, СтрокаПодбора);
		
		Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
			
			ПеремещаемаяСтрока = ПодобранныеОбъекты.НайтиПоИдентификатору(СтрокаПодбора);
			УдалитьСтрокуДерева(ПеремещаемаяСтрока);
			
		КонецЕсли;
		
		Если Не НоваяСтрока = Неопределено Тогда
			
			ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			
			Элементы.ПодобранныеОбъекты.Развернуть(ТекущаяСтрока, Истина);
			Элементы.ПодобранныеОбъекты.ТекущаяСтрока = ТекущаяСтрока;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьМаршруты();
	УстановитьДоступностьКомандПеремещения();
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДеревоПодбора(Команда)
	
	ЗаполнитьДеревоПодбораНаСервере();
	РазвернутьСтрокиДерева("ДеревоПодбора");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПредыдущему(Команда)
	
	ЭлементыКорня = ПодобранныеОбъекты.ПолучитьЭлементы();
	
	Если ЭлементыКорня.Количество() > 1 Тогда
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьПоПредыдущемуЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Подобранные маршруты будут очищены. Продолжить?'");
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПодобранныеОбъекты(Истина);
	РазвернутьСтрокиДерева("ПодобранныеОбъекты");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПредыдущемуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПодобранныеОбъекты(Истина);
	РазвернутьСтрокиДерева("ПодобранныеОбъекты");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоУровень(Команда)
	
	УровеньСтрокой 		= СтрЗаменить(Команда.Имя, "РазвернутьДеревоУровень", "");
	Уровень 			= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(УровеньСтрокой);
	ПометкаВыбранного 	= Ложь;
	
	Для НомерКоманды = 1 По 4 Цикл
		
		ИмяЭлемента 	= СтрШаблон("ПодобранныеОбъектыРазвернутьДеревоУровень%1", НомерКоманды);
		
		Если НомерКоманды = Уровень Тогда
			
			ТекущееЗначение 	= ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, ИмяЭлемента, "Пометка");
			ПометкаВыбранного 	= Не ТекущееЗначение;
			Пометка 			= ПометкаВыбранного;
			
		Иначе
			Пометка = Ложь;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Пометка", Пометка);
		
	КонецЦикла;
	
	ПоказатьУровеньДерева(Уровень - 1, ПометкаВыбранного);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ПереместитьСтроку(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ПереместитьСтроку(1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// ДеревоПодбора
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодбораТРТ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПодбора.Пометка");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 	ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", 		Новый Шрифт(,,, Истина));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодбораГород.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПодбора.Уровень");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение 	= ПолучитьСписокУровней("1,3");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", 	Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодбораТРТ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПодбора.Уровень");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение 	= ПолучитьСписокУровней("1,2");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", 	Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодбораРегион.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПодбора.Уровень");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение 	= ПолучитьСписокУровней("2,3");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", 	Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодбораРегион.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПодбора.Регион");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", 		НСтр("ru = '<не указан>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 	ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодбораГород.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПодбора.Город");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", 		НСтр("ru = '<не указан>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 	ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Служебная строка
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодбораРегион.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПодбора.Служебная");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", 		НСтр("ru = '<нет объектов для планирования>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 	ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодбораГород.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПодбора.Служебная");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", 	Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодбораТРТ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПодбора.Служебная");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", 	Ложь);
	
	
	// ПодобранныеОбъекты
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобранныеОбъектыМаршрут.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПодобранныеОбъекты.НовыйМаршрут");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", 			НСтр("ru = '<<Новый маршрут>>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 		ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", 			Новый Шрифт(,, Истина, Истина));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", 	Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобранныеОбъектыМаршрут.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПодобранныеОбъекты.Уровень");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение 	= ПолучитьСписокУровней("1,2,3");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", 	Ложь);
	
	// 
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобранныеОбъектыРегион.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПодобранныеОбъекты.Уровень");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение 	= ПолучитьСписокУровней("0,2,3");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", 	Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобранныеОбъектыГород.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПодобранныеОбъекты.Уровень");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение 	= ПолучитьСписокУровней("0,1,3");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", 	Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобранныеОбъектыТРТ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПодобранныеОбъекты.Уровень");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение 	= ПолучитьСписокУровней("0,1,2");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", 	Ложь);
	
	//
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПодобранныеОбъектыКоличествоДней");
	МассивЭлементов.Добавить("ПодобранныеОбъектыПериод");
	МассивЭлементов.Добавить("ПодобранныеОбъектыАвиа");
	МассивЭлементов.Добавить("ПодобранныеОбъектыАренда");
	МассивЭлементов.Добавить("ПодобранныеОбъектыЖД");
	МассивЭлементов.Добавить("ПодобранныеОбъектыЛичныйТранспорт");
	МассивЭлементов.Добавить("ПодобранныеОбъектыАвтобус");
	МассивЭлементов.Добавить("ПодобранныеОбъектыСлужебныйТранспорт");
	МассивЭлементов.Добавить("ПодобранныеОбъектыТакси");
	МассивЭлементов.Добавить("ПодобранныеОбъектыПроживание");
	МассивЭлементов.Добавить("ПодобранныеОбъектыКилометраж");
	// ++ VOG Солодов В.В. 16.06.2021 DEV-655
	МассивЭлементов.Добавить("ПодобранныеОбъектыРРО_РТН");
	МассивЭлементов.Добавить("ПодобранныеОбъектыГД");
	МассивЭлементов.Добавить("ПодобранныеОбъектыПрочие");
	// -- VOG Солодов В.В. 16.06.2021 DEV-655
	
	Для Каждого ИмяЭлемента Из МассивЭлементов Цикл
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяЭлемента].Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПодобранныеОбъекты.Уровень");
		ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение 	= ПолучитьСписокУровней("1,2,3");
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ПодобранныеОбъекты.НовыйМаршрут");
		ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение 	= Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандПеремещения()
	
	ТекущиеДанные = Элементы.ПодобранныеОбъекты.ТекущиеДанные;
	
	ДоступностьКомандыВверх = Истина;
	ДоступностьКомандыВниз 	= Истина;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ТекущиеДанные.НовыйМаршрут Тогда
			
			ДоступностьКомандыВверх = Ложь;
			ДоступностьКомандыВниз 	= Ложь;
			
		Иначе
			
			ТекущаяСтрока = Элементы.ПодобранныеОбъекты.ТекущаяСтрока;
			ПеремещаемаяСтрока 	= ПодобранныеОбъекты.НайтиПоИдентификатору(ТекущаяСтрока);
			РодительСтроки 		= ПеремещаемаяСтрока.ПолучитьРодителя();
			
			Если РодительСтроки = Неопределено Тогда
				ЭлементыРодителя 	= ПодобранныеОбъекты.ПолучитьЭлементы();
			Иначе
				ЭлементыРодителя 	= РодительСтроки.ПолучитьЭлементы();
			КонецЕсли;
			
			ИндексТекущейСтроки = ЭлементыРодителя.Индекс(ПеремещаемаяСтрока);
			
			Если ИндексТекущейСтроки <= 0 Тогда
				ДоступностьКомандыВверх = Ложь;
			Иначе
				
				ВерхняяСтрока = ЭлементыРодителя.Получить(ИндексТекущейСтроки - 1);
				
				Если Не ВерхняяСтрока = Неопределено
					И ВерхняяСтрока.НовыйМаршрут Тогда
					ДоступностьКомандыВверх = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИндексТекущейСтроки = ЭлементыРодителя.Количество() - 1 Тогда
				ДоступностьКомандыВниз = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не Элементы.ПодобранныеОбъектыПереместитьВверх.Доступность = ДоступностьКомандыВверх Тогда
		Элементы.ПодобранныеОбъектыПереместитьВверх.Доступность = ДоступностьКомандыВверх;
	КонецЕсли;
	
	Если Не Элементы.ПодобранныеОбъектыПереместитьВниз.Доступность = ДоступностьКомандыВниз Тогда
		Элементы.ПодобранныеОбъектыПереместитьВниз.Доступность 	= ДоступностьКомандыВниз;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	СхемаКомпоновкиДанных 			= Документы.КонструкторМаршрутов.ПолучитьМакет("СхемаЗаполнения");
	АдресСхемыКомпоновкиДанных 		= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек 		= Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	НастройкиКомпоновщика = Объект.Ссылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	Если Не ЗначениеЗаполнено(НастройкиКомпоновщика) Тогда
		НастройкиКомпоновщика = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщика);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокУровней(УровниСтрокой)
	
	СписокУровней = Новый СписокЗначений;
	МассивУровней = СтрРазделить(УровниСтрокой, ",");
	
	Для Каждого ЗначениеСтрокой Из МассивУровней Цикл
		СписокУровней.Добавить(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеСтрокой));
	КонецЦикла;
	
	Возврат СписокУровней;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСлужебныеНастройки()
	
	// +++ VOG Кулаков П.Л. 02.07.2021 DEV-721
	Элементы.ПодобранныеОбъектыПериод.СписокВыбора.Очистить();
	// --- VOG Кулаков П.Л.
	
	ПредставлениеПервогоМесяца 				= Формат(Объект.ПериодПланирования, "ДФ=MMMM");
	Элементы.ПодобранныеОбъектыПериод.СписокВыбора.Добавить(Объект.ПериодПланирования, ПредставлениеПервогоМесяца);
	Элементы.ДеревоПодбораМесяц1.Заголовок 	= ПредставлениеПервогоМесяца;
	
	Для КоличествоМесяцев = 1 По 2 Цикл
		
		ИмяЭлемента 			= СтрШаблон("ДеревоПодбораМесяц%1", 1 + КоличествоМесяцев);
		ДатаСледующегоМесяца 	= ДобавитьМесяц(Объект.ПериодПланирования, КоличествоМесяцев);
		ПредставлениеМесяца 	= Формат(ДатаСледующегоМесяца, "ДФ=MMMM");
		
		Элементы.ПодобранныеОбъектыПериод.СписокВыбора.Добавить(ДатаСледующегоМесяца, ПредставлениеМесяца);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			ИмяЭлемента,
			"Заголовок",
			ПредставлениеМесяца);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПодбораНаСервере()
	
	ДеревоРезультат 		= Новый ДеревоЗначений;
	
	СхемаКомпоновкиДанных 	= ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	НастройкиКомпоновки 	= КомпоновщикНастроек.ПолучитьНастройки();
	
	СписокНаправлений = Новый Массив;
	Если ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		СписокНаправлений.Добавить(Объект.НаправлениеДеятельности);
	Иначе
		СписокНаправлений.Добавить(Справочники.НаправленияДеятельности.Плитка);
		СписокНаправлений.Добавить(Справочники.НаправленияДеятельности.Обои);
	КонецЕсли;
	
	УстанавливаемыеПараметры = Новый Соответствие;
	УстанавливаемыеПараметры.Вставить("НаправленияДеятельности", 	СписокНаправлений);
	УстанавливаемыеПараметры.Вставить("Период", 					Объект.Дата);
	УстанавливаемыеПараметры.Вставить("ПериодПланирования", 		Объект.ПериодПланирования);
	
	КомпоновкаДанныхКлиентСервер.УстановитьКоллекциюПараметров(НастройкиКомпоновки, УстанавливаемыеПараметры);
	
	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки 	= КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		НастройкиКомпоновки,
		,
		,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
	
	ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ЭлементыКорня = ДеревоПодбора.ПолучитьЭлементы();
	ЭлементыКорня.Очистить();
	
	ИтогМесяц1 			= 0;
	ИтогМесяц2 			= 0;
	ИтогМесяц3 			= 0;
	ИтогоПосещений 		= 0;
	
	Если ДеревоРезультат.Строки.Количество() = 0 Тогда
		
		НоваяСтрокаРегион = ЭлементыКорня.Добавить();
		НоваяСтрокаРегион.Служебная = Истина;
		
	Иначе
		
		Для Каждого СтрокаРегион Из ДеревоРезультат.Строки Цикл
			
			НоваяСтрокаРегион = ЭлементыКорня.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРегион, СтрокаРегион);
			НоваяСтрокаРегион.Уровень = 1;
			
			ИтогМесяц1 = ИтогМесяц1 + НоваяСтрокаРегион.Месяц1;
			ИтогМесяц2 = ИтогМесяц2 + НоваяСтрокаРегион.Месяц2;
			ИтогМесяц3 = ИтогМесяц3 + НоваяСтрокаРегион.Месяц3;
			
			ЭлементыСтрокиРегион = НоваяСтрокаРегион.ПолучитьЭлементы();
			
			Для Каждого СтрокаГород Из СтрокаРегион.Строки Цикл
				
				НоваяСтрокаГород = ЭлементыСтрокиРегион.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаГород, СтрокаГород);
				НоваяСтрокаГород.Уровень = 2;
				
				ЭлементыСтрокиГород = НоваяСтрокаГород.ПолучитьЭлементы();
				
				Для Каждого СтрокаТРТ Из СтрокаГород.Строки Цикл
					
					НоваяСтрокаТРТ = ЭлементыСтрокиГород.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТРТ, СтрокаТРТ);
					НоваяСтрокаТРТ.Уровень = 3;
					
				КонецЦикла;
			КонецЦикла;
			
			ИтогоПосещений = ИтогоПосещений + НоваяСтрокаРегион.ВсегоКомандировок;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВсегоМесяц1 		= ИтогМесяц1;
	ВсегоМесяц2 		= ИтогМесяц2;
	ВсегоМесяц3 		= ИтогМесяц3;
	ВсегоКомандировок 	= ИтогоПосещений;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодобранныеОбъекты(НаОснованииПредыдущего = Ложь)
	
	Если НаОснованииПредыдущего Тогда
		ТаблицаДанных = ПолучитьТаблицуДанныхОснования();
	Иначе
		ТаблицаДанных = Объект.Планирование;
	КонецЕсли;
	
	ЭлементыКорня = ПодобранныеОбъекты.ПолучитьЭлементы();
	ЭлементыКорня.Очистить();
	
	// Добавление строки Новый маршрут
	НоваяСтрока 				= ЭлементыКорня.Добавить();
	НоваяСтрока.НовыйМаршрут 	= Истина;
	
	// Заполнение сущ. данными
	СтрокиМаршрут = ТаблицаДанных.НайтиСтроки(Новый Структура("ИдентификаторРодителя", ""));
	
	Для Каждого СтрокаМаршрут Из СтрокиМаршрут Цикл
		
		ВсегоТРТ = 0;
		НоваяСтрокаМаршрут = ЭлементыКорня.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаМаршрут, СтрокаМаршрут);
		
		СтрокиРегион 	= ТаблицаДанных.НайтиСтроки(
			Новый Структура("ИдентификаторРодителя", СтрокаМаршрут.Идентификатор));
		
		Если СтрокиРегион.Количество() > 0 Тогда
			
			ЭлементыМаршрут = НоваяСтрокаМаршрут.ПолучитьЭлементы();
			
			Для Каждого СтрокаРегион Из СтрокиРегион Цикл
				
				НоваяСтрокаРегион = ЭлементыМаршрут.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРегион, СтрокаРегион);
				
				СтрокиГород 	= ТаблицаДанных.НайтиСтроки(
					Новый Структура("ИдентификаторРодителя", СтрокаРегион.Идентификатор));
				
				Если СтрокиГород.Количество() > 0 Тогда
					
					ЭлементыГород 	= НоваяСтрокаРегион.ПолучитьЭлементы();
					
					Для Каждого СтрокаГород Из СтрокиГород Цикл
						
						НоваяСтрокаГород = ЭлементыГород.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаГород, СтрокаГород);
						
						СтрокиТРТ 	= ТаблицаДанных.НайтиСтроки(
							Новый Структура("ИдентификаторРодителя", СтрокаГород.Идентификатор));
							
						Если СтрокиТРТ.Количество() > 0 Тогда
							
							ЭлементыТРТ 	= НоваяСтрокаГород.ПолучитьЭлементы();
							
							Для Каждого СтрокаТРТ Из СтрокиТРТ Цикл
								
								ВсегоТРТ = ВсегоТРТ + 1;
								
								НоваяСтрокаТРТ = ЭлементыТРТ.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрокаТРТ, СтрокаТРТ);
								// +++ VOG Кулаков П.Л. 18.06.2021 DEV-665
								Если ЗначениеЗаполнено(СтрокаТРТ.Клиент) Тогда
									НоваяСтрокаТРТ.ТРТ = СтрокаТРТ.Клиент;
									
									ПараметрыОтбора = Новый Структура;
									ПараметрыОтбора.Вставить("ТРТ", СтрокаТРТ.Клиент);
									
									НайденныеСтроки = НайтиСтрокиДереваРекурсивно(ДеревоПодбора, ПараметрыОтбора);
									
									Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
										ПометитьСкопированнуюСтроку(НайденнаяСтрока, ЭтотОбъект);
									КонецЦикла;
								КонецЕсли;
								// --- VOG Кулаков П.Л.
								
								ПараметрыОтбора = Новый Структура;
								ПараметрыОтбора.Вставить("ТРТ", СтрокаТРТ.ТРТ);
								
								НайденныеСтроки = НайтиСтрокиДереваРекурсивно(ДеревоПодбора, ПараметрыОтбора);
								
								Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
									ПометитьСкопированнуюСтроку(НайденнаяСтрока, ЭтотОбъект);
								КонецЦикла;
								
							КонецЦикла;
						КонецЕсли;
						
						РассчитатьКоличествоТРТ(НоваяСтрокаГород);
						
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрокаМаршрут.КоличествоТРТ = ВсегоТРТ;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПланированияКоллекциейЭлементовДерева(ДеревоЭлементов, ТекущийОбъект, ИдентификаторРодителя, ТаблицаМаршрутов)
	
	КоллекцияЭлементовДерева = ДеревоЭлементов.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из КоллекцияЭлементовДерева Цикл
		
		Если ЭлементДерева.НовыйМаршрут Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементДерева.Идентификатор) Тогда
			ИдентификаторСтроки = ЭлементДерева.Идентификатор;
		Иначе
			ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		ЭлементДерева.Идентификатор 			= ИдентификаторСтроки;
		ЭлементДерева.ИдентификаторРодителя 	= ИдентификаторРодителя;
		
		СтрокаТабличнойЧасти = ТекущийОбъект.Планирование.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЭлементДерева);
		// +++ VOG Кулаков П.Л. 18.06.2021 DEV-665
		Если ТипЗнч(ЭлементДерева.ТРТ) = Тип("СправочникСсылка.Партнеры") Тогда
			СтрокаТабличнойЧасти.Клиент = ЭлементДерева.ТРТ;
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		СтрокаТабличнойЧасти.ИдентификаторМаршрута =
			ПолучитьИдентификаторМаршрутаПоПолномуИмени(ЭлементДерева, ТаблицаМаршрутов);
		
		ЗаполнитьТаблицуПланированияКоллекциейЭлементовДерева(ЭлементДерева, ТекущийОбъект, ИдентификаторСтроки, ТаблицаМаршрутов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуСуществующихМаршрутов()
	
	ТаблицаМаршрутов = Новый ТаблицаЗначений;
	ТаблицаМаршрутов.Колонки.Добавить("Идентификатор", 		ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ТаблицаМаршрутов.Колонки.Добавить("НаименованиеПолное", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаМаршрутов.Колонки.Добавить("Точки", 				Новый ОписаниеТипов("СписокЗначений"));
	// +++ VOG Кулаков П.Л. 18.06.2021 DEV-665
	ТаблицаМаршрутов.Колонки.Добавить("Клиенты", 			Новый ОписаниеТипов("СписокЗначений"));
	// --- VOG Кулаков П.Л.
	
	НаименованияМаршрутов 	= Новый Массив;
	ТочкиМаршрута 			= Новый Массив;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Уровень", 		0);
	ПараметрыОтбора.Вставить("НовыйМаршрут", 	Ложь);
	
	НайденныеСтроки = НайтиСтрокиДереваРекурсивно(ПодобранныеОбъекты, ПараметрыОтбора);
	
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		
		НаименованияМаршрутов.Добавить(СтрокаДерева.Маршрут);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Уровень", 3);
		
		НайденныеСтроки = НайтиСтрокиДереваРекурсивно(СтрокаДерева, ПараметрыОтбора);
		Для Каждого ПодчиненнаяСтрока Из НайденныеСтроки Цикл
			ТочкиМаршрута.Добавить(ПодчиненнаяСтрока.ТРТ);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	МаршрутыКомандировок.Ссылка.Идентификатор КАК Идентификатор,
		|	МаршрутыКомандировок.Ссылка.НаименованиеПолное КАК НаименованиеПолное,
		|	МаршрутыКомандировок.Точка КАК Точка,
		// +++ VOG Кулаков П.Л. 18.06.2021 DEV-665
		|	МаршрутыКомандировок.Клиент КАК Клиент
		// --- VOG Кулаков П.Л.
		|ИЗ
		|	Справочник.МаршрутыКомандировок.СоставМаршрута КАК МаршрутыКомандировок
		|ГДЕ
		|	МаршрутыКомандировок.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И МаршрутыКомандировок.Ссылка.НаименованиеПолное В(&НаименованияМаршрутов)
		|	И (МаршрутыКомандировок.Точка В (&ТочкиМаршрута)
		// +++ VOG Кулаков П.Л. 18.06.2021 DEV-665
		|			ИЛИ МаршрутыКомандировок.Клиент В (&ТочкиМаршрута))
		// --- VOG Кулаков П.Л.
		|ИТОГИ
		|	МАКСИМУМ(НаименованиеПолное)
		|ПО
		|	Идентификатор";
	
	Запрос.УстановитьПараметр("НаименованияМаршрутов", 	НаименованияМаршрутов);
	Запрос.УстановитьПараметр("ТочкиМаршрута", 			ТочкиМаршрута);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИдентификатор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИдентификатор.Следующий() Цикл
		
		НоваяСтрока = ТаблицаМаршрутов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИдентификатор);
		
		ВыборкаДетальныеЗаписи = ВыборкаИдентификатор.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// +++ VOG Кулаков П.Л. 18.06.2021 DEV-665
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Точка) Тогда
				НоваяСтрока.Точки.Добавить(ВыборкаДетальныеЗаписи.Точка);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Точка) Тогда
				НоваяСтрока.Клиенты.Добавить(ВыборкаДетальныеЗаписи.Клиент);
			КонецЕсли;
			// --- VOG Кулаков П.Л.
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаМаршрутов;
	
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторМаршрутаПоПолномуИмени(СтрокаДерева, ТаблицаМаршрутов)
	
	ПоискУспешен 			= Ложь;
	ИдентификаторМаршрута 	= "";
	ПолноеИмяМаршрута 		= СтрокаДерева.Маршрут;
	
	Если ПустаяСтрока(ПолноеИмяМаршрута) Тогда
		Возврат ИдентификаторМаршрута;
	КонецЕсли;
	
	ТочкиМаршрута = Новый СписокЗначений;
	// +++ VOG Кулаков П.Л. 18.06.2021 DEV-665
	Клиенты = Новый СписокЗначений;
	// --- VOG Кулаков П.Л.
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Уровень", 3);
	
	НайденныеСтроки = НайтиСтрокиДереваРекурсивно(СтрокаДерева, ПараметрыОтбора);
	Для Каждого ПодчиненнаяСтрока Из НайденныеСтроки Цикл
		// +++ VOG Кулаков П.Л. 18.06.2021 DEV-665
		Если ТипЗнч(ПодчиненнаяСтрока.ТРТ) = Тип("СправочникСсылка.вогТорговыеТочки") И ЗначениеЗаполнено(ПодчиненнаяСтрока.ТРТ) Тогда
			ТочкиМаршрута.Добавить(ПодчиненнаяСтрока.ТРТ);
		КонецЕсли;
		Если ТипЗнч(ПодчиненнаяСтрока.ТРТ) = Тип("СправочникСсылка.Партнеры") И ЗначениеЗаполнено(ПодчиненнаяСтрока.ТРТ) Тогда
			Клиенты.Добавить(ПодчиненнаяСтрока.ТРТ);
		КонецЕсли;
		// --- VOG Кулаков П.Л.
	КонецЦикла;
	
	Если ТаблицаМаршрутов.Количество() > 0 Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НаименованиеПолное", ПолноеИмяМаршрута);
		
		НайденныеСтроки = ТаблицаМаршрутов.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			
			Если ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(СтрокаТабличнойЧасти.Точки, ТочкиМаршрута) Тогда
				
				ИдентификаторМаршрута 	= СтрокаТабличнойЧасти.Идентификатор;
				ПоискУспешен 			= Истина;
				
			КонецЕсли;
			
			// +++ VOG Кулаков П.Л. 18.06.2021 DEV-665
			Если ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(СтрокаТабличнойЧасти.Клиенты, Клиенты) Тогда
				
				ИдентификаторМаршрута 	= СтрокаТабличнойЧасти.Идентификатор;
				ПоискУспешен 			= Истина;
				
			КонецЕсли;
			// --- VOG Кулаков П.Л.
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ПоискУспешен Тогда
		
		ИдентификаторМаршрута = Формат(Новый УникальныйИдентификатор);
		
		НоваяСтрокаМаршрут = ТаблицаМаршрутов.Добавить();
		НоваяСтрокаМаршрут.Идентификатор 		= ИдентификаторМаршрута;
		НоваяСтрокаМаршрут.НаименованиеПолное 	= ПолноеИмяМаршрута;
		НоваяСтрокаМаршрут.Точки 				= ТочкиМаршрута;
		// +++ VOG Кулаков П.Л. 18.06.2021 DEV-665
		НоваяСтрокаМаршрут.Клиенты 				= Клиенты;
		// --- VOG Кулаков П.Л.
		
	КонецЕсли;
	
	Возврат ИдентификаторМаршрута;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуДанныхОснования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонструкторМаршрутов.Ссылка КАК Ссылка,
		|	КонструкторМаршрутов.Дата КАК Дата
		|ПОМЕСТИТЬ ВТ_ВсеДокументы
		|ИЗ
		|	Документ.КонструкторМаршрутов КАК КонструкторМаршрутов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаправленияДеятельности КАК СпрНаправленияДеятельности
		|		ПО КонструкторМаршрутов.НаправлениеДеятельности = СпрНаправленияДеятельности.Ссылка
		|			И (СпрНаправленияДеятельности.Ссылка = &НаправлениеДеятельности)
		|ГДЕ
		|	НЕ КонструкторМаршрутов.Ссылка = &Ссылка
		|	И КонструкторМаршрутов.ПериодПланирования = &ПериодПланирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеДокументы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ПоследниеДокументы
		|ИЗ
		|	ВТ_ВсеДокументы КАК ВТ_ВсеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ВТ_ВсеДокументы.Дата) КАК Дата
		|		ИЗ
		|			ВТ_ВсеДокументы КАК ВТ_ВсеДокументы) КАК ВложенныйЗапрос
		|		ПО ВТ_ВсеДокументы.Дата = ВложенныйЗапрос.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонструкторМаршрутовПланирование.Ссылка КАК Ссылка,
		|	КонструкторМаршрутовПланирование.Маршрут КАК Маршрут,
		|	КонструкторМаршрутовПланирование.Регион КАК Регион,
		|	КонструкторМаршрутовПланирование.Город КАК Город,
		|	КонструкторМаршрутовПланирование.ТРТ КАК ТРТ,
		// +++ VOG Кулаков П.Л. 18.06.2021 DEV-665
		|	КонструкторМаршрутовПланирование.Клиент КАК Клиент,
		// --- VOG Кулаков П.Л.
		|	КонструкторМаршрутовПланирование.КоличествоТРТ КАК КоличествоТРТ,
		|	КонструкторМаршрутовПланирование.КоличествоДней КАК КоличествоДней,
		|	КонструкторМаршрутовПланирование.Период КАК Период,
		|	КонструкторМаршрутовПланирование.Авиа КАК Авиа,
		|	КонструкторМаршрутовПланирование.Аренда КАК Аренда,
		|	КонструкторМаршрутовПланирование.ЖД КАК ЖД,
		|	КонструкторМаршрутовПланирование.ЛичныйТранспорт КАК ЛичныйТранспорт,
		|	КонструкторМаршрутовПланирование.Автобус КАК Автобус,
		|	КонструкторМаршрутовПланирование.СлужебныйТранспорт КАК СлужебныйТранспорт,
		|	КонструкторМаршрутовПланирование.Такси КАК Такси,
		|	КонструкторМаршрутовПланирование.Проживание КАК Проживание,
		|	КонструкторМаршрутовПланирование.Идентификатор КАК Идентификатор,
		|	КонструкторМаршрутовПланирование.ИдентификаторРодителя КАК ИдентификаторРодителя,
		|	КонструкторМаршрутовПланирование.Уровень КАК Уровень,
		// ++ VOG Солодов В.В. 17.06.2021 DEV-655
		|	КонструкторМаршрутовПланирование.Километраж КАК Километраж,
		|	КонструкторМаршрутовПланирование.РРО_РТН КАК РРО_РТН,
		|	КонструкторМаршрутовПланирование.ГД КАК ГД,
		|	КонструкторМаршрутовПланирование.Прочие КАК Прочие
		// -- VOG Солодов В.В. 17.06.2021 DEV-655
		|ИЗ
		|	ВТ_ПоследниеДокументы КАК ВТ_ПоследниеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонструкторМаршрутов.Планирование КАК КонструкторМаршрутовПланирование
		|		ПО ВТ_ПоследниеДокументы.Ссылка = КонструкторМаршрутовПланирование.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", 					Объект.Ссылка);
	Запрос.УстановитьПараметр("ПериодПланирования", 		Объект.ПериодПланирования);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", 	Объект.НаправлениеДеятельности);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыделенныеСтроки()
	
	Если Элементы.ДеревоПодбора.ВыделенныеСтроки.Количество() > 1 Тогда
		
		ЕстьИзменения 		= Ложь;
		МассивВыделенных 	= Новый Массив;
		
		ПерваяСтрока = ДеревоПодбора.НайтиПоИдентификатору(Элементы.ДеревоПодбора.ВыделенныеСтроки[0]);
		
		Если ПерваяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		УровеньПервойСтроки = ПерваяСтрока.Уровень;
		МассивВыделенных.Добавить(Элементы.ДеревоПодбора.ВыделенныеСтроки[0]);
		
		Для Индекс = 1 По Элементы.ДеревоПодбора.ВыделенныеСтроки.ВГраница() Цикл
			
			ИдентификаторВыделеннойСтроки = Элементы.ДеревоПодбора.ВыделенныеСтроки.Получить(Индекс);
			ВыделеннаяСтрока = ДеревоПодбора.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
			
			Если ВыделеннаяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыделеннаяСтрока.Уровень = УровеньПервойСтроки Тогда
				МассивВыделенных.Добавить(ИдентификаторВыделеннойСтроки);
			Иначе
				ЕстьИзменения = Истина;
			КонецЕсли;
				
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			
			Элементы.ДеревоПодбора.ТекущаяСтрока = МассивВыделенных[МассивВыделенных.ВГраница()];
			Элементы.ДеревоПодбора.ВыделенныеСтроки.Очистить();
			
			Для Каждого ИдентификаторВыделеннойСтроки Из МассивВыделенных Цикл
				Элементы.ДеревоПодбора.ВыделенныеСтроки.Добавить(ИдентификаторВыделеннойСтроки);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСДеревомЗначений

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ИмяДерева)
	
	ЭлементыКорня = ЭтотОбъект[ИмяДерева].ПолучитьЭлементы();
	
	Для Каждого ЭлементКорня Из ЭлементыКорня Цикл
		Элементы[ИмяДерева].Развернуть(ЭлементКорня.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПереноса(ПереносимыйЭлемент, Знач НовыйРодитель, ПараметрыОтбора)
	
	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("НовыйМаршрут", Ложь);
	СтруктураПроверки.Вставить("Регион");
	СтруктураПроверки.Вставить("Город");
	СтруктураПроверки.Вставить("ВсегоКомандировок", 0);
	СтруктураПроверки.Вставить("Уровень", 0);
	
	Если ПереносимыйЭлемент = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПроверки, ПараметрыОтбора);
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураПроверки, ПереносимыйЭлемент);
		СтруктураПроверки.ВсегоКомандировок = 1;
	КонецЕсли;
	
	Если Не НовыйРодитель = Неопределено И НовыйРодитель.Уровень = 0 И СтруктураПроверки.Уровень = 0 Тогда
		
		// Проверка на перетаскивание друг в друга одинаковых маршрутов
		Если Не ПереносимыйЭлемент = Неопределено Тогда
			
			Если СтрНайти(НовыйРодитель.Маршрут, ПереносимыйЭлемент.Маршрут) > 0
				Или СтрНайти(ПереносимыйЭлемент.Маршрут, НовыйРодитель.Маршрут) > 0 Тогда
				
				СуществующиеСтроки = НайтиСтрокиДереваРекурсивно(НовыйРодитель, Новый Структура("Уровень", 3));
				
				Для Каждого СуществующаяСтрока Из СуществующиеСтроки Цикл
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Уровень", 3);
					СтруктураПоиска.Вставить("ТРТ", 	СуществующаяСтрока.ТРТ);
					
					Если НайтиСтрокиДереваРекурсивно(ПереносимыйЭлемент, СтруктураПоиска).Количество() > 0 Тогда
						Возврат Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураПроверки.НовыйМаршрут = Истина
		Или СтруктураПроверки.ВсегоКомандировок = 0
		Или (Не ЗначениеЗаполнено(СтруктураПроверки.Регион) И Не ЗначениеЗаполнено(СтруктураПроверки.Город)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НовыйРодитель = Неопределено Или НовыйРодитель.НовыйМаршрут Тогда
		Возврат Истина;
	Иначе
		
		ТребуемыйУровень = ПараметрыОтбора.Уровень - 1;
		
		Если ТребуемыйУровень >= НовыйРодитель.Уровень И НовыйРодитель.Уровень <> 0 Тогда
			
			Если НовыйРодитель.Уровень = ТребуемыйУровень Тогда
				УровеньПоиска = ТребуемыйУровень;
			Иначе
				УровеньПоиска = НовыйРодитель.Уровень;
			КонецЕсли;
			
			СтруктураРодителя = ПараметрыОтбораПоУровню(УровеньПоиска);
			ЗаполнитьЗначенияСвойств(СтруктураРодителя, НовыйРодитель);
			
			Для Каждого КлючИЗначение Из СтруктураРодителя Цикл
				
				Если Не КлючИЗначение.Значение = ПараметрыОтбора[КлючИЗначение.Ключ] Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НайтиСтрокиДереваРекурсивно(НовыйРодитель, ПараметрыОтбора).Количество() > 0 Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Возврат Истина;
			
		ИначеЕсли НовыйРодитель.Уровень = 0
			И ПереносимыйЭлемент = Неопределено
			И НайтиСтрокиДереваРекурсивно(НовыйРодитель, ПараметрыОтбора).Количество() = 0 Тогда
			Возврат Истина;
		ИначеЕсли Не ПереносимыйЭлемент = Неопределено Тогда
			
			Если ПереносимыйЭлемент.Уровень = 0 Тогда
				
				Если НовыйРодитель.Уровень = 0 И ПереносимыйЭлемент.Маршрут <> НовыйРодитель.Маршрут Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли ПереносимыйЭлемент.Уровень > НовыйРодитель.Уровень Тогда
				
				СтруктураОтбора = Новый Структура;
				УровеньПоля 	= ПереносимыйЭлемент.Уровень;
				
				Пока УровеньПоля > 0 Цикл
					ИмяПоля = ПолучитьИмяПоляПоУровню(УровеньПоля);
					Если ЗначениеЗаполнено(ИмяПоля) Тогда
						СтруктураОтбора.Вставить(ИмяПоля, ПереносимыйЭлемент[ИмяПоля]);
					КонецЕсли;
					УровеньПоля = УровеньПоля - 1;
				КонецЦикла;
				
				Если СтруктураОтбора.Количество() > 0 Тогда
					НайденныеСтроки = НайтиСтрокиДереваРекурсивно(НовыйРодитель, ПараметрыОтбора);
					Если НайденныеСтроки.Количество() = 0 Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СкопироватьСтрокуДерева(Приемник, Знач Источник, Знач ДочерняяСтрока = Ложь)
	
	Перем НоваяСтрока;
	
	ЗаполнитьНовуюСтроку 	= Истина;
	Перетаскивание 			= Ложь;
	
	Если Источник = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("Число") Тогда
		Перетаскивание 	= Истина;
		Источник 		= ПодобранныеОбъекты.НайтиПоИдентификатору(Источник);
	КонецЕсли;
	
	Если Приемник = Неопределено
		Или Приемник.НовыйМаршрут Тогда
		НовыйМаршрут = Истина;
	Иначе
		НовыйМаршрут = Ложь;
	КонецЕсли;
	
	Если НовыйМаршрут Тогда
		
		ЭлементыКорня 	= ПодобранныеОбъекты.ПолучитьЭлементы();
		СтрокаМаршрут 	= ЭлементыКорня.Добавить();
		
		Если Источник.Уровень = 1 Тогда								// Если добавляем регион в маршрут
			НоваяСтрока = СтрокаМаршрут.ПолучитьЭлементы().Добавить();
		Иначе
			
			НоваяСтрока = ДобавитьИерархиюСтрок(СтрокаМаршрут, Источник, Истина);
			ЗаполнитьНовуюСтроку 	= Ложь;
			
		КонецЕсли;
		
	ИначеЕсли Не Приемник = Неопределено Тогда
		
		Если Не ДочерняяСтрока Тогда
			ДочерняяСтрока = (Источник.Уровень - Приемник.Уровень = 1);
		КонецЕсли;
		
		Если ДочерняяСтрока											// Если идет добавление дочерней строки
			Или (Приемник.Уровень = 0 И Источник.Уровень = 1) Тогда	// Если добавляем регион в маршрут
			
			ЗаполняемыеРеквизиты = ОпределитьЗаполняемыеРеквизитыПоУровню(Источник.Уровень);
			ПараметрыОтбора = ПараметрыОтбораПоУровню(Источник.Уровень);
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Источник, СтрСоединить(ЗаполняемыеРеквизиты, ","));
			
			НайденныеСтроки = НайтиСтрокиДереваРекурсивно(Приемник, ПараметрыОтбора);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				НоваяСтрока = НайденныеСтроки[0];
			Иначе
				
				ЭлементыКорня 	= Приемник.ПолучитьЭлементы();
				НоваяСтрока 	= ЭлементыКорня.Добавить();
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока = ДобавитьИерархиюСтрок(Приемник, Источник,, Перетаскивание);
			ЗаполнитьНовуюСтроку 	= Ложь;
			
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗаполнитьНовуюСтроку Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
	КонецЕсли;
	
	// Добавление дочерних строк
	КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
	
	Если КолПодчиненныхСтрок = 0 Тогда
		РассчитатьКоличествоТРТ(НоваяСтрока);
		Если Перетаскивание Тогда
			РассчитатьКоличествоТРТ(Источник);
		КонецЕсли;
	Иначе
		
		Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
			
			ПодчиненнаяСтрока = Источник.ПолучитьЭлементы().Получить(КолПодчиненныхСтрок - ОбратныйИндекс);
			СкопироватьСтрокуДерева(НоваяСтрока, ПодчиненнаяСтрока, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Функция ДобавитьИерархиюСтрок(Приемник, Источник, НовыйМаршрут = Ложь, Перетаскиввание = Ложь)
	
	ОбратныйУровень = 3 - Источник.Уровень;
	
	Если ОбратныйУровень < Приемник.Уровень Тогда
		ОбратныйУровень = Приемник.Уровень + 1;
	КонецЕсли;
	
	НоваяСтрока 	= Приемник;
	
	Пока ОбратныйУровень <= Источник.Уровень И ОбратныйУровень <= 3 Цикл
		
		ЗаполняемыеРеквизиты = ОпределитьЗаполняемыеРеквизитыПоУровню(ОбратныйУровень);
		
		Если ЗаполняемыеРеквизиты.Количество() > 0 Тогда
			
			Если Не НовыйМаршрут Тогда
				
				ПараметрыОтбора = ПараметрыОтбораПоУровню(3);
				ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Источник, СтрСоединить(ЗаполняемыеРеквизиты, ","), "Уровень");
				
				НайденныеСтроки = НайтиСтрокиДереваРекурсивно(Приемник, ПараметрыОтбора);
				
			КонецЕсли;
			
			Если Не НовыйМаршрут И НайденныеСтроки.Количество() > 0 Тогда
				НоваяСтрока = НайденныеСтроки[0];
			Иначе
				НоваяСтрока = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник, СтрСоединить(ЗаполняемыеРеквизиты, ","), "Уровень");
				НоваяСтрока.Уровень = ОбратныйУровень;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбратныйУровень = ОбратныйУровень + 1;
		
	КонецЦикла;
	
	Если НоваяСтрока.Уровень = Источник.Уровень Тогда
		Возврат НоваяСтрока;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОпределитьЗаполняемыеРеквизитыПоУровню(Знач УровеньПоля)
	
	ЗаполняемыеРеквизиты = Новый Массив;
	
	Пока УровеньПоля > 0 Цикл
		ИмяПоля = ПолучитьИмяПоляПоУровню(УровеньПоля);
		Если ЗначениеЗаполнено(ИмяПоля) Тогда
			ЗаполняемыеРеквизиты.Добавить(ИмяПоля);
		КонецЕсли;
		УровеньПоля = УровеньПоля - 1;
	КонецЦикла;
	
	Возврат ЗаполняемыеРеквизиты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокиДереваРекурсивно(ДеревоЗначений, СтруктураОтбора)
	
	МассивСтрок 	= Новый Массив;
	ЭлементыДерева 	= ДеревоЗначений.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		СтруктураЭлемента = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураОтбора);
		ЗаполнитьЗначенияСвойств(СтруктураЭлемента, ЭлементДерева);
		
		ПоискУспешен = Ложь;
		
		Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
			
			Если СтруктураЭлемента[КлючИЗначение.Ключ] = КлючИЗначение.Значение Тогда
				ПоискУспешен = Истина;
			Иначе
				ПоискУспешен = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПоискУспешен Тогда
			МассивСтрок.Добавить(ЭлементДерева);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			МассивДочернихСтрок = НайтиСтрокиДереваРекурсивно(ЭлементДерева, СтруктураОтбора);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, МассивДочернихСтрок);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяПоляПоУровню(Уровень)
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить(1, "Регион");
	СоответствиеПолей.Вставить(2, "Город");
	СоответствиеПолей.Вставить(3, "ТРТ");
	
	Возврат СоответствиеПолей.Получить(Уровень);
	
КонецФункции

&НаКлиенте
Функция ПараметрыОтбораПоУровню(Уровень)
	
	ЗначенияПоУмолчанию = Новый Соответствие;
	ЗначенияПоУмолчанию.Вставить("Регион", 	ПредопределенноеЗначение("Справочник.вогНаселенныеПункты.ПустаяСсылка"));
	ЗначенияПоУмолчанию.Вставить("Город", 	ПредопределенноеЗначение("Справочник.вогНаселенныеПункты.ПустаяСсылка"));
	ЗначенияПоУмолчанию.Вставить("ТРТ", 	ПредопределенноеЗначение("Справочник.вогТорговыеТочки.ПустаяСсылка"));
	
	УровниПолей = Новый Соответствие;
	УровниПолей.Вставить(1, "Регион");
	УровниПолей.Вставить(2, "Город");
	УровниПолей.Вставить(3, "ТРТ");
	
	ПараметрыОтбора = Новый Структура;
	
	Для НомерУровня = 1 По Уровень Цикл
		ИмяПоля = УровниПолей.Получить(НомерУровня);
		Если ЗначениеЗаполнено(ИмяПоля) Тогда
			ПараметрыОтбора.Вставить(ИмяПоля, ЗначенияПоУмолчанию.Получить(ИмяПоля));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыОтбора;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокуДерева(УдаляемаяСтрока)
	
	РодительскийЭлемент = УдаляемаяСтрока.ПолучитьРодителя();
	
	Если РодительскийЭлемент = Неопределено Тогда
		ПодобранныеОбъекты.ПолучитьЭлементы().Удалить(УдаляемаяСтрока);
	Иначе
		
		РодительскийЭлемент.ПолучитьЭлементы().Удалить(УдаляемаяСтрока);
		
		Если РодительскийЭлемент.ПолучитьЭлементы().Количество() = 0 Тогда
			УдалитьСтрокуДерева(РодительскийЭлемент);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтроки()
	
	ЭлементыКорня = ПодобранныеОбъекты.ПолучитьЭлементы();
	
	Если ЭлементыКорня.Количество() > 1 Тогда
		
		Для Каждого СтрокаМаршрут Из ЭлементыКорня Цикл
			
			Если СтрокаМаршрут.НовыйМаршрут Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиРегион = СтрокаМаршрут.ПолучитьЭлементы();
			
			Если СтрокиРегион.Количество() = 0 Тогда
				УдалитьСтрокуДерева(СтрокаМаршрут);
			КонецЕсли;
			
			Для Каждого СтрокаРегион Из СтрокиРегион Цикл
				
				СтрокиГород = СтрокаРегион.ПолучитьЭлементы();
				
				Если СтрокиГород.Количество() = 0 Тогда
					УдалитьСтрокуДерева(СтрокаРегион);
				КонецЕсли;
				
				Для Каждого СтрокаГород Из СтрокиГород Цикл
					
					СтрокиТРТ = СтрокаГород.ПолучитьЭлементы();
					
					Если СтрокиТРТ.Количество() = 0 Тогда
						УдалитьСтрокуДерева(СтрокаГород);
					КонецЕсли;
					
					РассчитатьКоличествоТРТ(СтрокаГород);
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПометитьСкопированнуюСтроку(СкопированнаяСтрока, Форма)
	
	ПомечаемыеСтроки = Новый Массив;
	
	Если СкопированнаяСтрока.Уровень = 3 Тогда
		ПомечаемыеСтроки.Добавить(СкопированнаяСтрока);
	Иначе
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Уровень", 3);
		
		НайденныеСтроки = НайтиСтрокиДереваРекурсивно(СкопированнаяСтрока, ПараметрыОтбора);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПомечаемыеСтроки.Добавить(НайденнаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ПомечаемаяСтрока Из ПомечаемыеСтроки Цикл
		ПомечаемаяСтрока.Пометка = Истина;
		РассчитатьКоличествоПосещений(ПомечаемаяСтрока,, Форма);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьКоличествоПосещений(СкопированнаяСтрока, УдалениеСтроки = Ложь, Форма)
	
	Если УдалениеСтроки Тогда
		СкопированнаяСтрока.ВсегоКомандировок = СкопированнаяСтрока.ВсегоКомандировок + 1;
	ИначеЕсли СкопированнаяСтрока.ВсегоКомандировок > 0 Тогда
		СкопированнаяСтрока.ВсегоКомандировок = СкопированнаяСтрока.ВсегоКомандировок - 1;
	КонецЕсли;
	
	РодительСтроки = СкопированнаяСтрока.ПолучитьРодителя();
	Пока Не РодительСтроки = Неопределено Цикл
		
		ВсегоПоРодителю = 0;
		
		ПодчиненныеСтроки = РодительСтроки.ПолучитьЭлементы();
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			ВсегоПоРодителю = ВсегоПоРодителю + ПодчиненнаяСтрока.ВсегоКомандировок;
		КонецЦикла;
		
		РодительСтроки.ВсегоКомандировок = ВсегоПоРодителю;
		РодительСтроки = РодительСтроки.ПолучитьРодителя();
		
	КонецЦикла;
	
	ИтогоПосещений = 0;
	
	Для Каждого СтрокаРегион  Из Форма.ДеревоПодбора.ПолучитьЭлементы() Цикл
		ИтогоПосещений = ИтогоПосещений + СтрокаРегион.ВсегоКомандировок;
	КонецЦикла;
	
	Форма.ВсегоКомандировок = ИтогоПосещений;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьКоличествоТРТ(СкопированнаяСтрока)
	
	Если СкопированнаяСтрока.Уровень = 2 Тогда
		РодительСтроки = СкопированнаяСтрока;
	Иначе
		РодительСтроки = СкопированнаяСтрока.ПолучитьРодителя();
	КонецЕсли;
	
	Пока Не РодительСтроки = Неопределено Цикл
		
		СтрокиТРТ = НайтиСтрокиДереваРекурсивно(РодительСтроки, Новый Структура("Уровень", 3));
		
		РодительСтроки.КоличествоТРТ = СтрокиТРТ.Количество();
		РодительСтроки = РодительСтроки.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМаршруты()
	
	ЭлементыКорня = ПодобранныеОбъекты.ПолучитьЭлементы();
	
	Если ЭлементыКорня.Количество() > 1 Тогда
		
		Для Каждого СтрокаМаршрут Из ЭлементыКорня Цикл
			
			Если СтрокаМаршрут.НовыйМаршрут Тогда
				Продолжить;
			КонецЕсли;
			
			МассивЗначенийМаршрута = Новый Массив;
			
			СтрокиРегион = СтрокаМаршрут.ПолучитьЭлементы();
			
			Для Каждого СтрокаРегион Из СтрокиРегион Цикл
				
				СтрокиГород = СтрокаРегион.ПолучитьЭлементы();
				
				Для Каждого СтрокаГород Из СтрокиГород Цикл
					Если ЗначениеЗаполнено(СтрокаГород.Город) Тогда
						МассивЗначенийМаршрута.Добавить(СтрокаГород.Город);
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
			СтрокаМаршрут.Маршрут = СтрСоединить(МассивЗначенийМаршрута, "-");
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУровеньДерева(Уровень, Пометка)
	
	СвернутьДерево(ПодобранныеОбъекты);
	
	Если Пометка Тогда
		РазвернутьДерево(ПодобранныеОбъекты, Уровень);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Дерево)
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		СвернутьДерево(Строка);
		
		Элементы.ПодобранныеОбъекты.Свернуть(ИдентификаторСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Дерево, Знач Уровень)
	
	Уровень = Уровень - 1;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		
		Если Уровень >= 0 Тогда
			
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ПодобранныеОбъекты.Развернуть(ИдентификаторСтроки);
			
			РазвернутьДерево(Строка, Уровень);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьСтроку(Количество)
	
	ТекущаяСтрока = Элементы.ПодобранныеОбъекты.ТекущаяСтрока;
	
	Если Не ТекущаяСтрока = Неопределено Тогда
		
		ПеремещаемаяСтрока 	= ПодобранныеОбъекты.НайтиПоИдентификатору(ТекущаяСтрока);
		РодительСтроки 		= ПеремещаемаяСтрока.ПолучитьРодителя();
		
		Если РодительСтроки = Неопределено Тогда
			ЭлементыРодителя 	= ПодобранныеОбъекты.ПолучитьЭлементы();
		Иначе
			ЭлементыРодителя 	= РодительСтроки.ПолучитьЭлементы();
		КонецЕсли;
		
		ИндексТекущейСтроки = ЭлементыРодителя.Индекс(ПеремещаемаяСтрока);
		
		ЭлементыРодителя.Сдвинуть(ИндексТекущейСтроки, Количество);
		УстановитьДоступностьКомандПеремещения();
		
	КонецЕсли;
	
	ЗаполнитьМаршруты();
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 02.07.2021 DEV-721
&НаКлиенте
Процедура КварталПланированияПриИзменении(Элемент)
	
	Объект.ПериодПланирования = НачалоКвартала(Объект.ПериодПланирования);
	
	ЗаполнитьДеревоПодбораНаСервере();
	ЗаполнитьПодобранныеОбъекты();
	
	УстановитьСлужебныеНастройки();
	РазвернутьСтрокиДерева("ДеревоПодбора");
	РазвернутьСтрокиДерева("ПодобранныеОбъекты");
	
КонецПроцедуры // --- VOG Кулаков П.Л.

#КонецОбласти

#КонецОбласти

