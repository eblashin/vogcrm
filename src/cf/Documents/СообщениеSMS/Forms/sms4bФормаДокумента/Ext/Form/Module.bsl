
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Подсистема Свойства

&НаСервере
// Процедура выполняет обновление дополнительных реквизитов
//
// Параметры:
//	Нет.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
// Процедура выполняет заполнение на основе переданных параметров
//
// Параметры:
//	Параметры	- Структура	- Структура параметров
//
Процедура ОбработатьПереданныеПараметры(Параметры)
	Если Объект.Ссылка.Пустая() Тогда
		Если Параметры.Свойство("Текст") И НЕ ПустаяСтрока(Параметры.Текст) Тогда
			Объект.ТекстСообщения = Параметры.Текст;
		КонецЕсли;
		Если Параметры.Свойство("Адресаты") Тогда
			Если ТипЗнч(Параметры.Адресаты) = Тип("Строка") И НЕ ПустаяСтрока(Параметры.Адресаты) Тогда
				НоваяСтрока							= Объект.Адресаты.Добавить();
				НоваяСтрока.ПредставлениеКонтакта	= Параметры.Кому;
			ИначеЕсли ТипЗнч(Параметры.Адресаты) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементСписка Из Параметры.Адресаты Цикл
					НоваяСтрока = Объект.Адресаты.Добавить();
					НоваяСтрока.КакСвязаться			= ЭлементСписка.Значение;
					НоваяСтрока.ПредставлениеКонтакта	= ЭлементСписка.Представление;
				КонецЦикла;
			ИначеЕсли ТипЗнч(Параметры.Адресаты) = Тип("Массив") Тогда
				Для Каждого ЭлементМассива Из Параметры.Адресаты Цикл
					НоваяСтрока = Объект.Адресаты.Добавить();
					НоваяСтрока.КакСвязаться			= ЭлементМассива.Телефон;
					НоваяСтрока.ПредставлениеКонтакта	= ЭлементМассива.Представление;
					НоваяСтрока.Контакт					= ЭлементМассива.ИсточникКонтактнойИнформации;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если Параметры.Свойство("Предмет") Тогда
			Предмет = Параметры.Предмет;
		КонецЕсли;
		Если Параметры.Свойство("ОтправлятьВТранслите") Тогда
			Объект.ОтправлятьВТранслите	= Параметры.ОтправлятьВТранслите;
			Если Объект.ОтправлятьВТранслите Тогда
				ТекстСообщенияДоТранслитерации	= Объект.ТекстСообщения;
				Объект.ТекстСообщения			= ОтправкаSMSЧерезSMS4B.Транслитерация(ТекстСообщенияДоТранслитерации);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработатьПереданныеПараметры()

&НаКлиентеНаСервереБезКонтекста
// Процедура устанавливает доступность элементов формы
//
// Параметры:
//	Форма	- УправляемаяФорма	- Форма
//
Процедура УправлениеДоступностью(Форма)
	Форма.Элементы.АдресатыТекстСообщения.Видимость	= Форма.Объект.sms4bАвтотекстБулево;
	Форма.Элементы.РассмотретьПосле.Доступность		= Форма.НаКонтроле;
	Если ОтправкаSMSЧерезSMS4B.ИспользоватьSMS4B() Тогда
		Форма.Элементы.НомерОтправителя.ТолькоПросмотр						= Ложь;
		Форма.Элементы.ГруппаНеОтправлятьРавномернаяРассылка.ТолькоПросмотр	= Ложь;
		Форма.Элементы.Баланс.Видимость 									= Истина;
		Форма.Элементы.АдресатыПроверитьСтатусыДоставки.Видимость 			= Ложь;
	Иначе	
		Форма.Элементы.НомерОтправителя.ТолькоПросмотр						= Истина;
		Форма.Элементы.ГруппаНеОтправлятьРавномернаяРассылка.ТолькоПросмотр	= Истина;
		Форма.Элементы.Баланс.Видимость 									= Ложь;
		Форма.Элементы.АдресатыПроверитьСтатусыДоставки.Видимость 			= Истина;
	КонецЕсли;	
	Если Форма.Объект.sms4bТипСообщения = ПредопределенноеЗначение("Перечисление.sms4ВходящееИсходящееSMS.Входящее") Тогда
		// Входящее сообщение
		Форма.Элементы.ФормаОтправить.Доступность							= Ложь;
		Форма.Элементы.ГруппаШапка.Доступность								= Ложь;
        Форма.Элементы.ГруппаАдресаты.Видимость 							= Ложь;
        Форма.Элементы.ГруппаАдресатыПроверка.Доступность					= Ложь;
        Форма.Элементы.ГруппаТекстСообщения.Доступность						= Ложь;
		Форма.Элементы.ГруппаКнопкиИТекстКоличество.Видимость				= Ложь;
		Форма.Элементы.ГруппаДатаОтправкиАктуальность.Доступность			= Ложь;
		Форма.Элементы.ГруппаНеОтправлятьРавномернаяРассылка.Доступность	= Ложь;
	ИначеЕсли ЕстьСообщенияВОчереди(Форма.Объект.Ссылка) Тогда
		// Отправленное исходящее сообщение
		Форма.Элементы.ФормаОтправить.Доступность							= Ложь;
		Форма.Элементы.ГруппаШапка.Доступность								= Ложь;
        Форма.Элементы.ГруппаАдресаты.Доступность 							= Ложь;
        Форма.Элементы.ГруппаАдресатыПроверка.Доступность					= Ложь;
        Форма.Элементы.ГруппаТекстСообщения.Доступность						= Ложь;
		Форма.Элементы.ГруппаКнопкиИТекстКоличество.Видимость				= Ложь;
		Форма.Элементы.ГруппаДатаОтправкиАктуальность.Доступность			= Ложь;
		Форма.Элементы.ГруппаНеОтправлятьРавномернаяРассылка.Доступность	= Ложь;
	Иначе
		СообщениеОтправлено = СообщениеОтправлено(Форма.Объект.Состояние);
		ОтправкаДоступна = Истина;
		Если Форма.ИнформационнаяБазаФайловая Тогда
			Если СообщениеОтправлено Тогда
				ОтправкаДоступна = Ложь;
			ИначеЕсли Форма.Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Исходящее") Тогда
				#Если Клиент Тогда
					ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
				#Иначе
					ДатаСеанса = ТекущаяДатаСеанса();
				#КонецЕсли
				Если (Форма.Объект.ДатаКогдаОтправить) <> Дата(1,1,1)
					И Форма.Объект.ДатаКогдаОтправить > ДатаСеанса Тогда
					ОтправкаДоступна = Ложь;
				КонецЕсли;
				Если (Форма.Объект.ДатаАктуальностиОтправки) <> Дата(1,1,1)
					И Форма.Объект.ДатаАктуальностиОтправки < ДатаСеанса Тогда
					ОтправкаДоступна = Ложь;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Форма.Объект.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Черновик") Тогда
				ОтправкаДоступна = Ложь;
			КонецЕсли
		КонецЕсли;
		Форма.Элементы.ФормаОтправить.Доступность							= ОтправкаДоступна;
        Форма.Элементы.ГруппаАдресаты.Доступность 							= НЕ СообщениеОтправлено;
        Форма.Элементы.ГруппаАдресатыПроверка.Доступность					= НЕ СообщениеОтправлено;
        Форма.Элементы.ГруппаТекстСообщения.Доступность						= НЕ СообщениеОтправлено;
		Форма.Элементы.ГруппаКнопкиИТекстКоличество.Видимость				= НЕ СообщениеОтправлено;
		Форма.Элементы.ГруппаДатаОтправкиАктуальность.Доступность			= НЕ СообщениеОтправлено;
		Форма.Элементы.ГруппаНеОтправлятьРавномернаяРассылка.Доступность	= НЕ СообщениеОтправлено;
		Форма.Элементы.АдресатыПроверитьСтатусыДоставки.Доступность	= Форма.ИнформационнаяБазаФайловая
			И СообщениеОтправлено И (Форма.Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Доставляется"));
	КонецЕсли;
КонецПроцедуры // УправлениеДоступностью()

&НаСервере
// Процедура выполняет проверку статусов сообщений
//
// Параметры:
//	Нет.
//
Процедура ПроверитьСтатусыДоставкиСервер()
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выполнены настройки отправки SMS.'"), , "Объект");
		Возврат;
	КонецЕсли;
	Взаимодействия.ПроверитьСтатусыДоставкиSMS(Объект, Модифицированность);
	УправлениеДоступностью(ЭтотОбъект);
КонецПроцедуры // ПроверитьСтатусыДоставкиСервер()

&НаСервере
// Процедура заполняет значения при чтении документа на сервере
//
// Параметры:
//	Нет.
Процедура ПриСозданииЧтенииНаСервере()
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ОбработатьПереданныеПараметры(Параметры);
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "СообщениеSMS");
	Элементы.РассмотретьПосле.Доступность	= НЕ Рассмотрено;
	Элементы.СтраницаКомментарий.Картинка	= ОбщегоНазначения.ПолучитьКартинкуКомментария(Объект.Комментарий);
	НаКонтроле								= НЕ Рассмотрено;
	УправлениеДоступностью(ЭтотОбъект);
	КоличествоАдресатов						= Объект.Адресаты.Количество();
КонецПроцедуры // ПриСозданииЧтенииНаСервере()

&НаСервере
// Процедура очищает условное оформление
//
// Параметры:
//	Нет.
//
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
КонецПроцедуры // УстановитьУсловноеОформление()

&НаСервере
// Функция выполняет отправку сообщения
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Число	- Количество отправленных сообщений
//
Функция ВыполнитьОтправкуНаСервере()
	Возврат Взаимодействия.ОтправкаSMSПоДокументу(Объект);
КонецФункции // ВыполнитьОтправкуНаСервере()

&НаСервере
// Процедура загружает данные из шалона
//
// Параметры:
//	ШаблонОбъект	- СправочникОъект	- Шалон
//
Процедура CRM_ЗагрузитьИзШаблонаНаСервере(ШаблонОбъект)
	ОписаниеРеквизитов = ПолучитьРеквизиты("Объект");
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	CRM_ШаблоныОбъектов.ЗаполнитьПредставлениеОбъекта(ШаблонОбъект, ОбъектЗначение, ОписаниеРеквизитов);
	ЗначениеВДанныеФормы(ОбъектЗначение, Объект);
КонецПроцедуры // CRM_ЗагрузитьИзШаблонаНаСервере()

&НаСервере
// Процедура заполняет получателей по сегменту
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьТЧПоСегменту()
	Запрос = Новый Запрос;
	Если CRM_Сегмент.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда
		РеквизитыСКДСегмента = CRM_ОбщегоНазначенияСервер.ПолучитьЗначенияРеквизитов(
			CRM_Сегмент,
			"СхемаКомпоновкиДанных,ХранилищеНастроекКомпоновкиДанных,ИмяШаблонаСКД");
		НастройкиСегмента = РеквизитыСКДСегмента.ХранилищеНастроекКомпоновкиДанных.Получить();
		Если ПустаяСтрока(РеквизитыСКДСегмента.ИмяШаблонаСКД) Тогда
			СКД = РеквизитыСКДСегмента.СхемаКомпоновкиДанных.Получить();
		Иначе
			СКД_Макета = СегментыСервер.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(CRM_Сегмент, РеквизитыСКДСегмента.ИмяШаблонаСКД);
			СКД = СКД_Макета.СхемаКомпоновкиДанных;
		КонецЕсли;
		Если СКД.НаборыДанных.Найти("СписокСегмента") <> Неопределено Тогда
			Поля = СКД.НаборыДанных.СписокСегмента.Поля;
			Для Каждого Поле Из Поля Цикл
				Поле.ОграничениеИспользования.Поле = Ложь;
			КонецЦикла;
			НастройкиСписка = СКД.ВариантыНастроек.Список.Настройки;
			Настройки = СКД.НастройкиПоУмолчанию;
			CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.ПараметрыДанных, Настройки.ПараметрыДанных);
			CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.Отбор, Настройки.Отбор);
		ИначеЕсли  СКД.НаборыДанных.Найти("ФормированиеСегмента") <> Неопределено Тогда
			Если НастройкиСегмента <> Неопределено Тогда
				НастройкиСписка = НастройкиСегмента;
			Иначе
				НастройкиСписка = СКД.ВариантыНастроек.ФормированиеСегмента.Настройки;
			КонецЕсли;
		Иначе
			НастройкиСписка = Неопределено;
		КонецЕсли;
		Если НастройкиСписка = Неопределено Тогда
			МассивПартнеров = Новый Массив();
		Иначе
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(
				СКД,НастройкиСписка,,,
				Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
			);
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ТаблицаЗначений = Новый ТаблицаЗначений;
			ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			МассивПартнеров = ТаблицаЗначений.ВыгрузитьКолонку("Партнер");
		КонецЕсли;
		Если CRM_ТолькоОсновныеКонтактныеЛица Тогда
			ТекстЗапроса = "ВЫБРАТЬ
               |	Партнеры.Ссылка КАК Партнер,
               |	Партнеры.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
               |ИЗ
               |	Справочник.Партнеры КАК Партнеры
               |ГДЕ
               |	НЕ Партнеры.ПометкаУдаления
			   |	И Партнеры.Ссылка В (&МассивПартнеров)";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ
               |	Партнеры.Ссылка КАК Партнер,
               |	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК КонтактноеЛицо
               |ИЗ
               |	Справочник.Партнеры КАК Партнеры
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
               |		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
               |			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
               |ГДЕ
               |	НЕ Партнеры.ПометкаУдаления
			   |	И Партнеры.Ссылка В (&МассивПартнеров)";
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивПартнеров", МассивПартнеров);
	Иначе	
		Запрос.УстановитьПараметр("Сегмент", CRM_Сегмент);
		Если CRM_ТолькоОсновныеКонтактныеЛица Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	ПартнерыСегмента.Партнер КАК Партнер,
               |	ПартнерыСегмента.Сегмент,
               |	ПартнерыСегмента.Партнер.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
               |ИЗ
               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
               |ГДЕ
               |	ПартнерыСегмента.Сегмент = &Сегмент
               |	И НЕ ПартнерыСегмента.Партнер.ПометкаУдаления";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	ПартнерыСегмента.Партнер КАК Партнер,
               |	ПартнерыСегмента.Сегмент,
               |	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК КонтактноеЛицо
               |ИЗ
               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
               |		ПО ПартнерыСегмента.Партнер = КонтактныеЛицаПартнеров.Владелец
               |			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
               |ГДЕ
               |	ПартнерыСегмента.Сегмент = &Сегмент
               |	И НЕ ПартнерыСегмента.Партнер.ПометкаУдаления";
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	ТабПартнеров = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаб ИЗ ТабПартнеров Цикл
		Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
			СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(СтрокаТаб.КонтактноеЛицо);
		Иначе	
			СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(СтрокаТаб.Партнер);
		КонецЕсли;	
		Если СписокТелефонов.Количество() > 0 Тогда
			НоваяСтрока = Объект.Адресаты.Добавить();
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				НоваяСтрока.Контакт	= СтрокаТаб.КонтактноеЛицо;
			Иначе
				НоваяСтрока.Контакт	= СтрокаТаб.Партнер;
			КонецЕсли;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
			НоваяСтрока.КакСвязаться			= СписокТелефонов[0].Значение; 
			НоваяСтрока.НомерДляОтправки		= ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(НоваяСтрока.КакСвязаться); 
		ИначеЕсли НЕ CRM_НеЗаполнятьСПустымиТелефонами Тогда
			НоваяСтрока = Объект.Адресаты.Добавить();
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				НоваяСтрока.Контакт	= СтрокаТаб.КонтактноеЛицо;
			Иначе
				НоваяСтрока.Контакт	= СтрокаТаб.Партнер;
			КонецЕсли;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // CRM_ЗаполнитьТЧПоСегменту()	

&НаСервере
// Процедура заполняет получателей по результату отчета
//
// Параметры:
//	СписокСсылок	- СписокЗначений	- Список получателей из отчета
//
Процедура CRM_ЗаполнитьТЧПоРезультатуОтчета(СписокСсылок)
	Для Каждого ЭлементСписка ИЗ СписокСсылок Цикл
		Если НЕ ЭлементСписка.Пометка Тогда Продолжить; КонецЕсли;
		СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ЭлементСписка.Значение);
		Если СписокТелефонов.Количество() > 0 Тогда
			НоваяСтрока							= Объект.Адресаты.Добавить();
			НоваяСтрока.Контакт					= ЭлементСписка.Значение;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
			НоваяСтрока.КакСвязаться			= СписокТелефонов[0].Значение; 
			НоваяСтрока.НомерДляОтправки		= ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(НоваяСтрока.КакСвязаться); 
		ИначеЕсли НЕ CRM_НеЗаполнятьСПустымиТелефонами Тогда
			НоваяСтрока							= Объект.Адресаты.Добавить();
			НоваяСтрока.Контакт					= ЭлементСписка.Значение;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // CRM_ЗаполнитьТЧПоРезультатуОтчета()

&НаСервере
// Функция возвращает список номеров телефонов получателя
//
// Парамеры:
//	Получатель	- СправочникСсылка	- Получатель
//
// Возвращаемое значение:
//	СписокЗначений	- Список номеров телефонов
//
Функция CRM_ПолучитьСписокНомеровТелефоновКонтрагента(Получатель)
	Если НЕ ЗначениеЗаполнено(Получатель) Тогда 
		ТаблицаКИ = Новый ТаблицаЗначений;
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Получатель,, Перечисления.ТипыКонтактнойИнформации.Телефон);
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(,Получатель, Перечисления.ТипыКонтактнойИнформации.Телефон);
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи")  Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПользователей(Получатель, Перечисления.ТипыКонтактнойИнформации.Телефон);
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.ФизическиеЛица")  Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюФизЛиц(Получатель, Перечисления.ТипыКонтактнойИнформации.Телефон);
	Иначе	
		ТаблицаКИ = Новый ТаблицаЗначений;
	КонецЕсли;	
	// Заполним список выбора
	СписокВозврата = Новый СписокЗначений;
	Для Каждого Строка ИЗ ТаблицаКИ Цикл
		НомерТелефона = ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Строка.Представление);
		Если СтрДлина(НомерТелефона) > 10 Тогда
			Если Найти(Прав(НомерТелефона, 10), "9") = 1 Тогда
				СписокВозврата.Вставить(0, Строка.Представление, СокрЛП(Строка.Представление) + " (" + Строка.Вид + ")");
			Иначе	
				СписокВозврата.Добавить(Строка.Представление, СокрЛП(Строка.Представление) + " (" + Строка.Вид + ")");
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Возврат СписокВозврата;
КонецФункции // CRM_ПолучитьСписокНомеровТелефоновКонтрагента()

&НаСервере
// Функция возвращает массив клиентов, входящих в переданную группу
//
// Параметры:
//	ПартнерГруппа	- СправочникСсылка	- Группа клиентов
//
// Возвращаемое значение:
//	Массив	- Массив клиентов
//
Функция CRM_ПолучитьПартнеровГруппы(ПартнерГруппа)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ПартнерГруппа);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	Партнеры.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.Партнеры КАК Партнеры
	                |ГДЕ
	                |	НЕ Партнеры.ПометкаУдаления
	                |	И НЕ Партнеры.ЭтоГруппа";
	Если ПартнерГруппа.ЭтоГруппа Тогда
		Запрос.Текст =  Запрос.Текст + "
    |	И Партнеры.Родитель В ИЕРАРХИИ(&Родитель)";
	Иначе	
		Запрос.Текст =  Запрос.Текст + "
	|	И Партнеры.Родитель = &Родитель";
	КонецЕсли;					
	Запрос.Текст =  Запрос.Текст + "
    |
    |УПОРЯДОЧИТЬ ПО
    |	Партнеры.Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // CRM_ПолучитьПартнеровГруппы()

&НаСервере
// Функция возвращает массив физических лиц, входящих в переданную группу
//
// Параметры:
//	ФизЛицоГруппа	- СправочникСсылка	- Группа физических лиц
//
// Возвращаемое значение:
//	Массив	- Массив физических лиц
//
Функция CRM_ПолучитьФизическихЛицГруппы(ФизЛицоГруппа)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ФизЛицоГруппа);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ФизическиеЛица.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	                |ГДЕ
	                |	НЕ ФизическиеЛица.ПометкаУдаления
	                |	И НЕ ФизическиеЛица.ЭтоГруппа";
	Если ФизЛицоГруппа.ЭтоГруппа Тогда
		Запрос.Текст =  Запрос.Текст + "
    |	И ФизическиеЛица.Родитель В ИЕРАРХИИ(&Родитель)";
	Иначе	
		Запрос.Текст =  Запрос.Текст + "
	|	И ФизическиеЛица.Родитель = &Родитель";
	КонецЕсли;					
	Запрос.Текст =  Запрос.Текст + "
    |
    |УПОРЯДОЧИТЬ ПО
    |	ФизическиеЛица.Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // CRM_ПолучитьФизическихЛицГруппы()

&НаСервере
// Процедура добавляет получателей, входящих в переданную группу
//
// Параметры:
//	ГруппаПользователей	- СправочникСсылка	- Группа пользователей
//
Процедура CRM_ДобавитьПолучателейПоГруппеПользователей(ГруппаПользователей)
	Если НЕ ЗначениеЗаполнено(ГруппаПользователей) Или НЕ (ТипЗнч(ГруппаПользователей) = Тип("СправочникСсылка.ГруппыПользователей")) Тогда
		Возврат;
	КонецЕсли;
	МассивПользователиГруппы = CRM_ОбщегоНазначенияСервер.ПолучитьПользователейГруппы(ГруппаПользователей, Истина);
	Для Каждого ПользовательСсылка Из МассивПользователиГруппы Цикл
		СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ПользовательСсылка);
		НоваяСтрока 						= Объект.Адресаты.Добавить();
		НоваяСтрока.Контакт					= ПользовательСсылка;
		НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
		Если СписокТелефонов.Количество() > 0 Тогда
			НоваяСтрока.КакСвязаться		= СписокТелефонов[0].Значение;
			НоваяСтрока.НомерДляОтправки	= ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(НоваяСтрока.КакСвязаться); 
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ДобавитьПолучателейПоГруппеПользователей()

&НаСервере
// Процедура - обработчик события "Выбор"
//
// Параметры:
//	ВыбранноеЗначение	- СправочникСсылка	- Выбранное значение
//
Процедура CRM_ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры") Тогда
		Если ВыбранноеЗначение.ЭтоГруппа 
			ИЛИ (ВыбранноеЗначение = Справочники.Партнеры.ПустаяСсылка()) Тогда
			мПартнеры = CRM_ПолучитьПартнеровГруппы(ВыбранноеЗначение);
			Для Каждого эПартнер Из мПартнеры Цикл
				СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(эПартнер);
				Если СписокТелефонов.Количество() > 0 Тогда
					НоваяСтрока							= Объект.Адресаты.Добавить();
					НоваяСтрока.Контакт					= эПартнер;
					НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
					НоваяСтрока.КакСвязаться			= СписокТелефонов[0].Значение;
					НоваяСтрока.НомерДляОтправки		= ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(НоваяСтрока.КакСвязаться); 
				ИначеЕсли НЕ CRM_НеЗаполнятьСПустымиТелефонами Тогда
					НоваяСтрока							= Объект.Адресаты.Добавить();
					НоваяСтрока.Контакт					= эПартнер;
					НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ВыбранноеЗначение);
			НоваяСтрока 						= Объект.Адресаты.Добавить();
			НоваяСтрока.Контакт					= ВыбранноеЗначение;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока.КакСвязаться		= СписокТелефонов[0].Значение;
				НоваяСтрока.НомерДляОтправки	= ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(НоваяСтрока.КакСвязаться); 
			КонецЕсли;	
		КонецЕсли;
		Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если ВыбранноеЗначение.ЭтоГруппа 
			ИЛИ (ВыбранноеЗначение = Справочники.ФизическиеЛица.ПустаяСсылка()) Тогда
			мФизЛица = CRM_ПолучитьФизическихЛицГруппы(ВыбранноеЗначение);
			Для Каждого эФизЛицо Из мФизЛица Цикл
				СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(эФизЛицо);
				Если СписокТелефонов.Количество() > 0 Тогда
					НоваяСтрока							= Объект.Адресаты.Добавить();
					НоваяСтрока.Контакт					= эПартнер;
					НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
					НоваяСтрока.КакСвязаться			= СписокТелефонов[0].Значение;
					НоваяСтрока.НомерДляОтправки		= ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(НоваяСтрока.КакСвязаться); 
				ИначеЕсли НЕ CRM_НеЗаполнятьСПустымиТелефонами Тогда
					НоваяСтрока							= Объект.Адресаты.Добавить();
					НоваяСтрока.Контакт					= эПартнер;
					НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ВыбранноеЗначение);
			НоваяСтрока 						= Объект.Адресаты.Добавить();
			НоваяСтрока.Контакт					= ВыбранноеЗначение;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока.КакСвязаться		= СписокТелефонов[0].Значение;
				НоваяСтрока.НомерДляОтправки	= ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(НоваяСтрока.КакСвязаться); 
			КонецЕсли;	
		КонецЕсли;
		Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		Для Каждого ВыбранныйПользовательГруппа Из МассивПользователейГрупп Цикл
			Если ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.Пользователи") Тогда
				СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ВыбранныйПользовательГруппа);
				НоваяСтрока 						= Объект.Адресаты.Добавить();
				НоваяСтрока.Контакт					= ВыбранныйПользовательГруппа;
				НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
				Если СписокТелефонов.Количество() > 0 Тогда
					НоваяСтрока.КакСвязаться		= СписокТелефонов[0].Значение;
					НоваяСтрока.НомерДляОтправки	= ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(НоваяСтрока.КакСвязаться); 
				КонецЕсли;	
			ИначеЕсли ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				CRM_ДобавитьПолучателейПоГруппеПользователей(ВыбранныйПользовательГруппа);
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // CRM_ОбработкаВыбораНаСервере()
 
////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТАТУСАМИ

&НаСервере
// Процедура получает статусы сообщений из регистра сведений
//
// Параметры:
//	Нет.
//
Процедура ПолучитьСтатусыСообщений() 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаДокумент", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	sms4bСостоянияСообщений.СостояниеСообщения,
	               |	sms4bСостоянияСообщений.ТекстОшибки,
	               |	sms4bСостоянияСообщений.ИдентификаторСообщения,
	               |	sms4bСостоянияСообщений.НомерСтрокиДокумента
	               |ИЗ
	               |	РегистрСведений.sms4bСостоянияСообщений КАК sms4bСостоянияСообщений
	               |ГДЕ
	               |	sms4bСостоянияСообщений.Сообщение = &СсылкаНаДокумент";
	Выборка = Запрос.Выполнить().Выбрать();
	СтатусыИзменены = Ложь;
	Пока Выборка.Следующий() Цикл
		ТекСтрока = Объект.Адресаты[Выборка.НомерСтрокиДокумента - 1];
		Если НЕ (ТекСтрока.СостояниеСообщения = Выборка.СостояниеСообщения) Тогда
			ТекСтрока.ИдентификаторСообщения	= Выборка.ИдентификаторСообщения;
			ТекСтрока.СостояниеСообщения		= Выборка.СостояниеСообщения;
			ТекСтрока.ТекстОшибки				= Выборка.ТекстОшибки;
			СтатусыИзменены 					= Истина;
		КонецЕсли;	
	КонецЦикла; 
	Если СтатусыИзменены Тогда
		Записать();
	КонецЕсли;	
	Элементы.АдресатыСтатус.Видимость			= Истина;
	Элементы.АдресатыОписаниеОшибки.Видимость	= Истина;
КонецПроцедуры // ПолучитьСтатусыСообщений() 

////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ШАБЛОНАМИ

&НаКлиенте
// Функция формирует текстовую строку по шаблону
//
// Параметры:
//	ШаблонТекст	- Строка			- Текст шаблона
//	Контрагент	- СправочникСсылка	- Контрагент для заполнения
//
// Возвращаемое значение:
//	Строка	- Сформированная текстовая строка
//
Функция СформироватьСообщениеПоШаблону(Знач ШаблонТекст, Контрагент)
	РедактируемыйТекст = ШаблонТекст;
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		Если Найти(РедактируемыйТекст, СтрокаАвтотекста.Тэг) > 0 Тогда
			СтруктураАвтотекста = Новый Структура;
			СтруктураАвтотекста.Вставить("Тэг",			СтрокаАвтотекста.Тэг);
			СтруктураАвтотекста.Вставить("Действие",	СтрокаАвтотекста.Действие);
			ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэгаСМС(СтруктураАвтотекста, Контрагент);
			РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.Тэг, ЗначениеТэга);
		КонецЕсли;
	КонецЦикла;
	Если Объект.ОтправлятьВТранслите Тогда
		РедактируемыйТекст = ОтправкаSMSЧерезSMS4B.Транслитерация(РедактируемыйТекст);
	КонецЕсли; 
	Возврат РедактируемыйТекст;
КонецФункции // СформироватьСообщениеПоШаблону()

&НаКлиенте
// Процедура выполняет заполнение по шалону
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьПоШаблону()
	
	Если ТипЗнч(Шаблон) = Тип("Структура") Тогда
		
		Объект.ТекстСообщения = Шаблон.Содержание;
		
	Иначе
		
		Объект.ТекстСообщения = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Шаблон, "Содержание");
	
	КонецЕсли; 
	
	Если ЕстьТэги() Тогда
		Для Каждого ТекущаяСтрока Из Объект.Адресаты Цикл 
			ТекущаяСтрока.sms4bТекстСообщения = СформироватьСообщениеПоШаблону(Объект.ТекстСообщения, ТекущаяСтрока.Контакт);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьПоШаблону()

&НаКлиенте
// Функция проверяет наличие тегов в тексте сообщения
//
// Параметры:
//	Нет.
//
// Булево	- Наличие тегов
//
Функция ЕстьТэги()
	ЕстьТэги = Ложь;
	Текст = Объект.ТекстСообщения;
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		Если Найти(Текст, СтрокаАвтотекста.Тэг) > 0 Тогда
			ЕстьТэги = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Объект.sms4bАвтотекстБулево = ЕстьТэги;
	ОбработкаКолонкиТекстаСообщения();
	Возврат ЕстьТэги;
КонецФункции // ЕстьТэги()

////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
// Функция возвращает наличие владельца у контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	Булево	- Наличие владельца
//
Функция ЕстьВладелец(Контакт)
	Возврат НЕ (Контакт.Владелец = Неопределено);
КонецФункции // ЕстьВладелец()	

&НаСервереБезКонтекста
// Функция возвращает имя владельца контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	Строка	- Имя справочника владельца
//
Функция ИмяВладельца(Контакт)
	Возврат Контакт.Владелец.Метаданные().Имя;
КонецФункции // ИмяВладельца()	

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  Ссылка       - Ссылка на объект	- Элемент справочника, документ, ...
//  ИмяРеквизита - Строка			- Например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - Зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
КонецФункции // ЗначениеРеквизитаОбъекта()

&НаСервереБезКонтекста
// Функция возвращает структуру со значениями констант
//
// Параметры:
//	Нет.
//
Функция ПолучитьКонстанты()
	Структура = Новый Структура;
    Структура.Вставить("НеОтправлятьSMS",		Константы.sms4bНеОтправлятьSMS.Получить());
    Структура.Вставить("НачалоПериодаЗапрета",	Константы.sms4bНачалоПериодаЗапрета.Получить());
    Структура.Вставить("КонецПериодаЗапрета",	Константы.sms4bКонецПериодаЗапрета.Получить());
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ПровайдерSMS");
	УстановитьПривилегированныйРежим(Истина);
	ИмяОтправителя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "ИмяОтправителя");
	УстановитьПривилегированныйРежим(Ложь);
	Структура.Вставить("ИмяОтправителя", 		?(ИмяОтправителя = Неопределено, "", ИмяОтправителя));
    Структура.Вставить("СрокЖизниSMS",			Константы.sms4bСрокЖизниSMS.Получить());
    Структура.Вставить("ДлительностьДоставки",	Константы.sms4bДлительностьДоставки.Получить());
    Структура.Вставить("АктуальностьДоставки",	Константы.sms4bАктуальностьДоставки.Получить());
    Структура.Вставить("НомераОтправителя",		Константы.sms4bНомераОтправителя.Получить());
    Структура.Вставить("ОстатокСМС",			Константы.sms4bОстатокСМС.Получить());
    Возврат Структура;
КонецФункции // ПолучитьКонстанты()

&НаСервереБезКонтекста
// Функция возвращает наличие неотправленных сообщений в документе
//
// Параметры:
//	Ссылка	- ДокументСсылка	- Документ
//
// Возвращаемое значение:
//	Булево	- Наличие неотправленных сообщений
//
Функция ЕстьСообщенияВОчереди(Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.sms4bСостоянияСообщений КАК sms4bСостоянияСообщений
	|ГДЕ
	|	sms4bСостоянияСообщений.Сообщение = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
КонецФункции // ЕстьСообщенияВОчереди()

&НаСервере
// Процедура заполняет список номеров отправителя
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьСписокНомеровОтправителя()
	НомераОтправителя = СтруктураКонстант.НомераОтправителя;
	Элементы.НомерОтправителя.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(НомераОтправителя) Тогда
		МассивНомеров = ОтправкаSMSЧерезSMS4B.ПолучитьМассивНомеровИзСтроки(НомераОтправителя);
		Для Каждого Номер Из МассивНомеров Цикл
			Если НЕ ПустаяСтрока(Номер) Тогда
				Элементы.НомерОтправителя.СписокВыбора.Добавить(Номер);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	Если Элементы.НомерОтправителя.СписокВыбора.Количество() = 0 Тогда
		Объект.sms4bНомерОтправителя = "";
	ИначеЕсли ПустаяСтрока(Объект.sms4bНомерОтправителя) Тогда
		Объект.sms4bНомерОтправителя = Элементы.НомерОтправителя.СписокВыбора[0].Значение;
	ИначеЕсли Элементы.НомерОтправителя.СписокВыбора.НайтиПоЗначению(Объект.sms4bНомерОтправителя) = Неопределено Тогда
		Объект.sms4bНомерОтправителя = Элементы.НомерОтправителя.СписокВыбора[0].Значение;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьСписокНомеровОтправителя()

&НаКлиенте
// Функция рассчитывает длину сообщения в символах и число частей, на которое будет разбито сообщения при отправке 
//
// Параметры:
//	Сообщение	- Строка	- Текст сообщения
//
// Возвращаемое значение:
//	Структура	- Структура, содержащая длину сообщения и количество частей
//
Функция ВернутьДлинуТекстаСМС(Сообщение)
	СтруктураВозврата = Новый Структура;
	// Максимальная длинна T-UD (User Data) в октетах
	МаксДлинаСообщения  =  140;
	// Длинна заголовка пользовательских данных в октетах
	ДлинаЗаголовка = 6;
	// Максимальная длинна данных в UCS2 (16 бит представляются 2 октетами)
	МаксДлинаСМС_UCS2 = Цел(МаксДлинаСообщения / 2); // 70;
	// Максимальная длинна данных в UCS2 минус заголовок пользовательских данных
	МаксДлинаСМС_UCS2_БезUDH =  Цел((МаксДлинаСообщения  - ДлинаЗаголовка - 1) / 2);
	// Максимальная длинна данных в 7 bit
	МаксДлинаСМС_7bit = МаксДлинаСообщения + Цел(МаксДлинаСообщения / 7); // 160
	// Максимальная длинна данных в  8 bit минус заголовок пользовательских данных
	МаксДлинаСМС_7bit_БезUDH = МаксДлинаСМС_7bit - (ДлинаЗаголовка + 1);
	// Определяем из скольких частей будет состоять SMS
	ДлинаСообщения = СтрДлина(Сообщение);
	СтруктураВозврата.Вставить("ДлинаСообщения", ДлинаСообщения);
	Кодировка = ОтправкаSMSЧерезSMS4B.Использовать7БитСообщение(Сообщение);
	Если Кодировка = 0 Тогда
		Если ДлинаСообщения > МаксДлинаСМС_7bit Тогда 
			МаксДлина = МаксДлинаСМС_7bit_БезUDH;
			КолвоЧастей = Цел(ДлинаСообщения / МаксДлина);
			Если (ДлинаСообщения / МаксДлина - Цел(ДлинаСообщения / МаксДлина) > 0) Тогда 
				КолвоЧастей = КолвоЧастей + 1; 
			КонецЕсли;
		Иначе
			МаксДлина = МаксДлинаСМС_7bit;
			КолвоЧастей = 1;			
		КонецЕсли;
	Иначе
		Если ДлинаСообщения > МаксДлинаСМС_UCS2 Тогда
			МаксДлина = МаксДлинаСМС_UCS2_БезUDH;
			КолвоЧастей = Цел(ДлинаСообщения / МаксДлина);
			Если (ДлинаСообщения / МаксДлина - Цел(ДлинаСообщения / МаксДлина) > 0) Тогда
				КолвоЧастей = КолвоЧастей + 1;
			КонецЕсли;
		Иначе
			МаксДлина = МаксДлинаСМС_UCS2;
			КолвоЧастей = 1;
		КонецЕсли;
	КонецЕсли;
	СтруктураВозврата.Вставить("КоличествоЧастей", КолвоЧастей);
	Возврат СтруктураВозврата;
КонецФункции // ВернутьДлинуТекстаСМС()

&НаКлиенте
// Функция заполненность таблицы адресатов
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Заполненность адресатов
//
Функция ПроверитьЗаполнениеАдресатов()
    ЕстьОшибки = Ложь;
    СписокТелефонов = Новый СписокЗначений;
	Для Каждого Адресат Из Объект.Адресаты Цикл
		Если ПустаяСтрока(Адресат.КакСвязаться) Тогда
            ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Номер телефона"" не заполнено.'"), ,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"));
		ИначеЕсли СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Адресат.КакСвязаться, ";", Истина).Количество() > 1 Тогда
            ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Должен быть указан только один номер телефона'"), ,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"));
		Иначе		
			СтруктураПолей = ОтправкаSMSЧерезSMS4B.ЗаполнитьСтруктуруПолейПоПредставлениюТелефон(Адресат.КакСвязаться);
			Если ВзаимодействияКлиентСервер.КорректноВведенНомерТелефона(Адресат.КакСвязаться) Тогда
	            Если СписокТелефонов.НайтиПоЗначению(Адресат.КакСвязаться) = Неопределено Тогда
	                СписокТелефонов.Добавить(Адресат.КакСвязаться);
					Адресат.НомерДляОтправки = "+" + ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Адресат.КакСвязаться);
	            Иначе	
		            ЕстьОшибки = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Номер телефона уже присутствует в таблице адресатов!'"), ,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"));
	            КонецЕсли;
			Иначе	
	            ЕстьОшибки = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Номер телефона должен быть указан в формате ""+xx (xxx) xxxxxxx"".'"), ,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"));
			КонецЕсли;
		КонецЕсли;
        Если Объект.sms4bАвтотекстБулево И ПустаяСтрока(Адресат.sms4bТекстСообщения) Тогда
            ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Текст сообщения"" не заполнено.'"), ,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "sms4bТекстСообщения"));
        КонецЕсли; 
    КонецЦикла;
    Возврат НЕ ЕстьОшибки;
КонецФункции // ПроверитьЗаполнениеАдресатов()	

&НаКлиенте
// Функция проверяет возможность отправки сообщения по введенным интервалам
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Возможность отправки сообщения
//
Функция ПроверитьВозможностьОтправки()
	Если НЕ Объект.sms4bНеОтправлятьSMS Тогда Возврат Истина; КонецЕсли;
	Если Объект.sms4bКонецПериодаЗапрета > Объект.sms4bНачалоПериодаЗапрета Тогда
		ДлинаПериодаЗапрета = Объект.sms4bКонецПериодаЗапрета - Объект.sms4bНачалоПериодаЗапрета;
	Иначе	
		ДлинаПериодаЗапрета = Объект.sms4bКонецПериодаЗапрета - Объект.sms4bНачалоПериодаЗапрета + 86400;
	КонецЕсли;
	Если (Объект.sms4bКонецПериодаЗапрета = Объект.sms4bНачалоПериодаЗапрета) ИЛИ (ДлинаПериодаЗапрета = 86399) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Период запрета отправки составляет полные сутки!'"), СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;	
	Если (Объект.ДатаАктуальностиОтправки - Объект.ДатаКогдаОтправить) > ДлинаПериодаЗапрета Тогда Возврат Истина; КонецЕсли;
	Если (Объект.ДатаКогдаОтправить - НачалоДня(Объект.ДатаКогдаОтправить)) < (Объект.sms4bНачалоПериодаЗапрета - Дата('00010101')) Тогда Возврат Истина; КонецЕсли;
	Если Объект.sms4bКонецПериодаЗапрета > Объект.sms4bНачалоПериодаЗапрета Тогда
		Если (Объект.ДатаКогдаОтправить - НачалоДня(Объект.ДатаКогдаОтправить)) > (Объект.sms4bКонецПериодаЗапрета - Дата('00010101')) Тогда
			Возврат Истина;
		ИначеЕсли (Объект.ДатаАктуальностиОтправки - НачалоДня(Объект.ДатаАктуальностиОтправки)) > (Объект.sms4bКонецПериодаЗапрета - Дата('00010101')) Тогда
			Возврат Истина;
		Иначе	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Начало отправки и актуальность находятся внутри периода запрета отправки!'"), СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если (Объект.ДатаАктуальностиОтправки - НачалоДня(Объект.ДатаАктуальностиОтправки)) > (Объект.sms4bНачалоПериодаЗапрета - Дата('00010101')) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Начало отправки и актуальность находятся внутри периода запрета отправки!'"), СтатусСообщения.Важное);
			Возврат Ложь;
		ИначеЕсли (Объект.ДатаАктуальностиОтправки - НачалоДня(Объект.ДатаАктуальностиОтправки)) < (Объект.sms4bКонецПериодаЗапрета - Дата('00010101')) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Начало отправки и актуальность находятся внутри периода запрета отправки!'"), СтатусСообщения.Важное);
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецФункции // ПроверитьВозможностьОтправки()	

&НаКлиенте
// Процедура проверяет длительность доставки
//
// Параметры:
//	Нет.
//
Процедура ПроверитьДлительность()
	МаксДлительностьДоставки = СтруктураКонстант.ДлительностьДоставки;
	Если (МаксДлительностьДоставки > 0) И ((Объект.ДатаАктуальностиОтправки - Объект.ДатаКогдаОтправить) > МаксДлительностьДоставки * 3600) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Длительность доставки превышает " + МаксДлительностьДоставки / 24 + " суток'"));
		Объект.ДатаАктуальностиОтправки = (Объект.ДатаКогдаОтправить + (МаксДлительностьДоставки * 60 * 60));
    КонецЕсли;
КонецПроцедуры // ПроверитьДлительность()

&НаКлиенте 
// Процедура выполняет подсчет длины текста сообщения
//
// Параметры:
//	Текст	- Строка	- Текст сообщения
//
Процедура Подсчет(Текст)
    СтруктураДлины	= ВернутьДлинуТекстаСМС(Текст);
   	ТекстКоличествоСимволов	= НСтр("ru = 'символов: " + Строка(СтруктураДлины.ДлинаСообщения)
		+ ", частей: '") + Строка(СтруктураДлины.КоличествоЧастей);
КонецПроцедуры // Подсчет()
 
&НаКлиенте
// Процедура - обработчик заполнения по выбранному шаблону
//
// Параметры:
//	ВыбранныйШаблон			- СправочникCсылка	- Выбранный шаблон
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров
//
Процедура ЗаполнитьПоВыбранномуШаблону(ВыбранныйШаблон, ДополнительныеПараметры) Экспорт
	Шаблон = ВыбранныйШаблон;
	Если Шаблон = Неопределено Тогда Возврат; КонецЕсли;
	ЗаполнитьПоШаблону();
КонецПроцедуры // ЗаполнитьПоВыбранномуШаблону()

&НаКлиенте
// Процедура - обработчик очищает текст сообщения
//
// Параметры:
//	Ответ					- КодВозвратаДиалога	- Ответ на вопрос
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура ОчиститьТекстСообщения(Ответ, ДополнительныеПараметры) Экспорт
	Если НЕ (Ответ = КодВозвратаДиалога.Да) Тогда Возврат; КонецЕсли;	
	ТекстСообщения = "";
	Отбор = Новый Структура("CRM_ШаблонОповещения", Ложь);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь);
	ПараметрыФормы.Вставить("ТекущаяСтрока",		Шаблон);
	ОписаниеВыбора = Новый ОписаниеОповещения("ЗаполнитьПоВыбранномуШаблону", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.sms4bШаблоны.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеВыбора);
КонецПроцедуры // ОчиститьТекстСообщения()

&НаСервере
// Процедура выполняет очистку колонки текста сообщения
//
// Параметры:
//	Нет.
//
Процедура ОбработкаКолонкиТекстаСообщения()
	Элементы.АдресатыТекстСообщения.Видимость = Объект.sms4bАвтотекстБулево;
	Если НЕ Объект.sms4bАвтотекстБулево Тогда 
		Для Каждого ТекущаяСтрока Из Объект.Адресаты Цикл 
			ТекущаяСтрока.sms4bТекстСообщения = "";
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // ОбработкаКолонкиТекстаСообщения()

&НаСервере
// Функция возвращает список номеров телефонов адресата
//
// Парамеры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	СписокЗначений	- Список номеров телефонов
//
Функция ПолучитьСписокНомеровТелефоновКонтрагента(Контакт)
	// Заполним список выбора
	СписокВозврата = Новый СписокЗначений;
	МассивТелефонов = ОтправкаSMSЧерезSMS4B.ПолучитьМассивТелефоновИФаксов(Контакт);
	Для Каждого Телефон Из МассивТелефонов Цикл
		НомерТелефона = ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Телефон.Представление);
		Если СтрДлина(НомерТелефона) > 9 Тогда
			Если Найти(Прав(НомерТелефона, 10), "9") = 1 Тогда
				СписокВозврата.Вставить(0, Телефон.Представление, СокрЛП(Телефон.Представление) + " (" + Телефон.Вид + ")");
			Иначе	
				СписокВозврата.Добавить(Телефон.Представление, СокрЛП(Телефон.Представление) + " (" + Телефон.Вид + ")");
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Возврат СписокВозврата;
КонецФункции // ПолучитьСписокНомеровТелефоновКонтрагента()

&НаСервере
// Функция возвращает оформление элемента
//
// Параметры:
//	ЭлементДляПоиска	- ЭлементФормы	- Элемент, в элементах которого ищется оформление
//	ИмяЭлемента			- Строка		- Имя элемента формы, для которого ищется оформление
//
// Возвращаемое значение:
//	ЭлементОформления	- Оформление элемента
//
Функция ПолучитьОформлениеЭлемента(ЭлементДляПоиска, ИмяЭлемента)
	Для Каждого ОформлениеЭлемента Из ЭлементДляПоиска.Оформление.Элементы Цикл
		Если ОформлениеЭлемента.Параметр = Новый ПараметрКомпоновкиДанных(ИмяЭлемента) Тогда
			Возврат ОформлениеЭлемента;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции // ПолучитьОформлениеЭлемента()

&НаСервере
// Процедура удаляет оформление элементов
//
// Параметры:
//	Нет.
//
Процедура УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами()
	// "Аккуратный" поиск и удаление созданных программно оформлений для поля -
	// на случай, если у формы есть другие условные оформления - их трогать нельзя
	МассивЭлементовДляУдаления = Новый Массив();
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если ЭлементОформления.Поля.Элементы.Количество() <> 1
				Или	ЭлементОформления.Поля.Элементы[0].Поле <> Новый ПолеКомпоновкиДанных("Адресаты") Тогда
				Продолжить;
			КонецЕсли;
			ОформлениеЭлемента = ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			Если ОформлениеЭлемента = Неопределено Тогда Продолжить; КонецЕсли;
			Если ЭлементОформления.Отбор.Элементы.Количество() <> 1
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0]) <> Тип("ЭлементОтбораКомпоновкиДанных")
				Или	ЭлементОформления.Отбор.Элементы[0].ЛевоеЗначение <> Новый ПолеКомпоновкиДанных("Объект.Адресаты.ИдентификаторОформления")
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение) <> Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			Если Найти(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение, "_Ид_Оформления_") > 0 Тогда
				МассивЭлементовДляУдаления.Добавить(ЭлементОформления);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементДляУдаления Из МассивЭлементовДляУдаления Цикл
		Попытка
			УсловноеОформление.Элементы.Удалить(ЭлементДляУдаления);
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры // УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами()

&НаСервере
// Процедура выделяет адресатов с одинаковыми номерами телефонов
//
// Параметры:
//	Нет.
//
Процедура ВыделитьАдресатовСОдинаковымиТелефонами()
	УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами();
	Для Каждого СтрокаТаблицы Из Объект.Адресаты Цикл
		СтрокаТаблицы.ИдентификаторОформления = "";
	КонецЦикла;
	МассивЦветов = Новый Массив();
	МассивЦветов.Добавить(Новый Цвет(216,218,154));
	МассивЦветов.Добавить(Новый Цвет(218,195,154));
	МассивЦветов.Добавить(Новый Цвет(218,172,154));
	МассивЦветов.Добавить(Новый Цвет(218,154,156));
	МассивЦветов.Добавить(Новый Цвет(218,154,180));
	МассивЦветов.Добавить(Новый Цвет(196,154,218));
	МассивЦветов.Добавить(Новый Цвет(154,162,218));
	МассивЦветов.Добавить(Новый Цвет(154,192,218));
	МассивЦветов.Добавить(Новый Цвет(148,218,228));
	УжеПроверенныеНомера = Новый Массив();
	ТекущийИндексИдентификатораОформления = 0;
	ТекущийИндексСдвига = 0;
	Для Каждого СтрокаТаблицы Из Объект.Адресаты Цикл
		ТекНомер = СтрокаТаблицы.КакСвязаться;
		Если НЕ ЗначениеЗаполнено(ТекНомер) Тогда Продолжить; КонецЕсли;
		Если НЕ (УжеПроверенныеНомера.Найти(ТекНомер) = Неопределено) Тогда Продолжить; КонецЕсли;
		УжеПроверенныеНомера.Добавить(ТекНомер);
		НайденныеСтроки = Объект.Адресаты.НайтиСтроки(Новый Структура("КакСвязаться", ТекНомер));
		Если НайденныеСтроки.Количество() > 1 Тогда
			СтрИдентификаторОформления = "_Ид_Оформления_" + Формат(ТекущийИндексИдентификатораОформления, "ЧН=0; ЧГ=");
			ТекущийИндексЦвета = Мин(ТекущийИндексИдентификатораОформления, МассивЦветов.ВГраница());
			ТекущийИндексИдентификатораОформления = ТекущийИндексИдентификатораОформления + 1;
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЭлементОформления.Использование = Истина;
			ОформлениеЭлемента = ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			ОформлениеЭлемента.Использование = Истина;
			ОформлениеЭлемента.Значение = МассивЦветов[ТекущийИндексЦвета];
			НовоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Адресаты");
			НовоеПоле.Использование = Истина;
			НовыйЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Адресаты.ИдентификаторОформления");
			НовыйЭлементОтбора.ПравоеЗначение = СтрИдентификаторОформления;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.Использование = Истина;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ИдентификаторОформления = СтрИдентификаторОформления;
				ИндексСтроки = Объект.Адресаты.Индекс(НайденнаяСтрока);
				Если ИндексСтроки > ТекущийИндексСдвига Тогда
					Объект.Адресаты.Сдвинуть(ИндексСтроки, ТекущийИндексСдвига - ИндексСтроки);
					ТекущийИндексСдвига = ТекущийИндексСдвига + 1;
				Иначе
					ТекущийИндексСдвига = ИндексСтроки + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ВыделитьАдресатовСОдинаковымиТелефонами()

&НаСервере
// Процедура удаляет лишних адресатов с одинаковыми номерами телефонов
//
// Параметры:
//	Нет.
//
Процедура УдалитьАдресатовСОдинаковымиТелефонами()
	КоличествоАдресатов = Объект.Адресаты.Количество();
	Для Индекс = 1 По КоличествоАдресатов Цикл
		СтрокаТЧ = Объект.Адресаты[КоличествоАдресатов - Индекс];
		МассивСтрок = Объект.Адресаты.НайтиСтроки(Новый Структура("КакСвязаться", СтрокаТЧ.КакСвязаться));
		Если МассивСтрок.Количество() > 1 Тогда
			Объект.Адресаты.Удалить(СтрокаТЧ);
			Модифицированность = Истина;
		КонецЕсли;	
	КонецЦикла;
	УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами();
КонецПроцедуры // УдалитьАдресатовСОдинаковымиТелефонами()

&НаСервере
// Процедура удаляет адресатов с пустым номеров телефона
//
// Параметры:
//	Нет.
//
Процедура УдалитьАдресатовБезТелефона()
	КоличествоАдресатов = Объект.Адресаты.Количество();
	Для Индекс = 1 По КоличествоАдресатов Цикл
		СтрокаТЧ = Объект.Адресаты[КоличествоАдресатов - Индекс];
		Если ПустаяСтрока(СтрокаТЧ.КакСвязаться) Тогда
			Объект.Адресаты.Удалить(СтрокаТЧ);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // УдалитьАдресатовБезТелефона()

&НаКлиенте
// Процедура выполняет очистку таблицы адресатов
//
// Параметры:
//	Ответ					- КодВозвратаДиалога	- Ответ на вопрос
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура ОчиститьАдресатов(Ответ, ДополнительныеПараметры) Экспорт
	Если НЕ (Ответ = КодВозвратаДиалога.Да) Тогда Возврат; КонецЕсли;
	Объект.Адресаты.Очистить();
	Модифицированность = Истина;
КонецПроцедуры // ОчиститьАдресатов()

&НаКлиентеНаСервереБезКонтекста
// Функция проверяет отправлено ли сообщение по его состоянию
//
// Параметры:
//	Состояние	- ПеречислениеСсылка	- Состояние сообщения
//
// Возвращаемое значение:
//	Булево	- Признак отправки сообщения
//
Функция СообщениеОтправлено(Состояние)
	Если Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Черновик") Тогда
		Возврат Ложь;
	ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Исходящее") Тогда
		Возврат Ложь;
	ИначеЕсли Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.ПустаяСсылка") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции // СообщениеОтправлено()	

&НаКлиенте
// Процедура - обработчик открытия контакта
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Выбранный контакт
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров
//
Процедура ОбработкаОткрытияКонтакта(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ТД = ДополнительныеПараметры.ТекущиеДанные;
	ТД.ПредставлениеКонтакта	= ЗначениеРеквизитаОбъекта(ТД.Контакт, "Наименование");
	АдресатыКонтрагентПриИзменении(Неопределено);
КонецПроцедуры // ОбработкаОткрытияКонтакта()	

&НаКлиенте
// Процедура - обработчик выбора контакта из списка
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Выбранный контакт
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров
//
Процедура ОбработкаВыбораКонтакта(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	ТД = ДополнительныеПараметры.ТекущиеДанные;
	Если ТД.Контакт = РезультатЗакрытия Тогда Возврат; КонецЕсли;
	ТД.Контакт					= РезультатЗакрытия;
	ТД.ПредставлениеКонтакта	= ЗначениеРеквизитаОбъекта(РезультатЗакрытия, "Наименование");
	АдресатыКонтрагентПриИзменении(Неопределено);
КонецПроцедуры // ОбработкаВыбораКонтакта()	

&НаКлиенте
// Процедура - обработчик выбора владельца контактного лица
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Выбранный владелец контактного лица
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров
//
Процедура ОбработкаВыбораВладельца(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Истина); 
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина); 
	ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь); 
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов",	ИспользованиеГруппИЭлементов.Элементы); 
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", РезультатЗакрытия)); 
	ОписаниеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораКонтакта", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник." + ДополнительныеПараметры.ИмяКонтакта + ".ФормаВыбора", ПараметрыФормы, , , , , ОписаниеВыбора);
КонецПроцедуры // ОбработкаВыбораВладельца()	

&НаКлиенте
// Процедура - обработчик выбора типа контакта из списка
//
// Параметры:
//	ВыбранныйЭлемент		- ЭлементСпискаЗначений	- Выбранный тип контакта
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура ОбработкаВыбораТипаКонтакта(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда Возврат; КонецЕсли;
	ТД = ДополнительныеПараметры.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Истина); 
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина); 
	ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь); 
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов",	ИспользованиеГруппИЭлементов.Элементы);
	ЕстьВладелец = Ложь;
	Попытка
		Контакт			= ПредопределенноеЗначение("Справочник." + ВыбранныйЭлемент.Значение + ".ПустаяСсылка");
		ЕстьВладелец	= ЕстьВладелец(Контакт);
		ИмяВладельца	= ИмяВладельца(Контакт);
	Исключение
	КонецПопытки;	
	Если ЕстьВладелец Тогда
		ДополнительныеПараметры.Вставить("ИмяКонтакта",	ВыбранныйЭлемент.Значение);
		ОписаниеВыбораВладельца = Новый ОписаниеОповещения("ОбработкаВыбораВладельца", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Справочник." + ИмяВладельца + ".ФормаВыбора", ПараметрыФормы, , , , , ОписаниеВыбораВладельца);
	Иначе	
		ОписаниеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораКонтакта", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Справочник." + ВыбранныйЭлемент.Значение + ".ФормаВыбора", ПараметрыФормы, , , , , ОписаниеВыбора);
	КонецЕсли;
КонецПроцедуры // ОбработкаВыбораТипаКонтакта()	

&НаСервереБезКонтекста
// Функция возвращает массив структур имен и сининимов справочников, имеющих табличную часть "КонтактнаяИнформация"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив имен справочников
//
Функция ПолучитьМассивСтруктурСправочников()
	МассивСтруктурСправочников = Новый Массив;
	УстановитьПривилегированныйРежим(Истина); 	
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.КонтактВзаимодействия.Тип.Типы() Цикл
		ТекущийСправочник = Новый(Тип);
		Если ТекущийСправочник.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда Продолжить; КонецЕсли;
		СтруктураСправочника = Новый Структура;
		СтруктураСправочника.Вставить("Значение",		ТекущийСправочник.Метаданные().Имя);
		СтруктураСправочника.Вставить("Представление",	ТекущийСправочник.Метаданные().Синоним);
		МассивСтруктурСправочников.Добавить(СтруктураСправочника);	
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь); 	
	Возврат МассивСтруктурСправочников;
КонецФункции // ПолучитьМассивСтруктурСправочников()

&НаСервереБезКонтекста
// Функция возвращает имя справочника по ссылке на его элемент
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	Строка	- Имя справочника
//
Функция ПолучитьИмяСправочника(Контакт)
	Возврат Контакт.Метаданные().Имя;
КонецФункции // ПолучитьИмяСправочника()
	
&НаКлиенте
// Процедура - обработчик выбора номера телефона из списка
//
// Параметры:
//	ВыбранныйЭлемент		- ЭлементСпискаЗначений	- Выбранный телефонный номер
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура ОбработкаВыбораНомераТелефона(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда Возврат; КонецЕсли;
	ТД = ДополнительныеПараметры.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ПредставлениеТелефона	= ВыбранныйЭлемент.Значение;
	МассивСтрок = Объект.Адресаты.НайтиСтроки(Новый Структура("КакСвязаться", ПредставлениеТелефона));
	Если МассивСтрок.Количество() = 0 Тогда
		ТД.КакСвязаться		= ПредставлениеТелефона;
		ТД.НомерДляОтправки	= "+" + ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(ПредставлениеТелефона);
	ИначеЕсли МассивСтрок.Количество() = 1 Тогда
		Если МассивСтрок[0].НомерСтроки = ТД.НомерСтроки Тогда
			ТД.КакСвязаться		= ПредставлениеТелефона;
			ТД.НомерДляОтправки	= "+" + ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(ПредставлениеТелефона);
		Иначе	
			ПоказатьПредупреждение(, НСтр("ru='Выбранный номер телефона уже присутствует в таблице адресатов!'"));
		КонецЕсли;	
	Иначе	
		ПоказатьПредупреждение(, НСтр("ru='Выбранный номер телефона уже присутствует в таблице адресатов!'"));
	КонецЕсли;	
КонецПроцедуры // ОбработкаВыбораНомераТелефона()	

&НаКлиенте
// Функция возвращает длину временного инетрвала, исключая переданный период
//
// Параметры:
//	Н	- ДатаВремя	- Начало интервала
//	К	- ДатаВремя	- Окончание интервала
//	Т1	- Число		- Час начала исключаемого периода
//	Т2	- ДатаВремя	- Час окончания исключаемого периода
//
// Возвращаемое значение:
//	Число	- Длина временного интервала
//
Функция ИсключениеВременногоПериода(Знач Н, Знач К, Знач Т1 = 0, Знач Т2 = 0)
	Если ТипЗнч(Н) = Тип("Дата") тогда
		Если ТипЗнч(Т1)=Тип("Дата") тогда
			Т1 = Т1 - НачалоДня(Т1);
		КонецЕсли;
		Если ТипЗнч(Т2)=Тип("Дата") тогда
			Т2 = Т2 - НачалоДня(Т2);
			Если Т2 = 0 тогда
				Т2 = 86400;
			КонецЕсли;
		КонецЕсли;
		Д = Мин(К, КонецДня(Н)+1);
		Всего = ИсключениеВременногоПериода(Н - НачалоДня(Н), Д - НачалоДня(Н), Т1, Т2);
		Если Д < К тогда
			Всего = Всего + ИсключениеВременногоПериода(0, К - НачалоДня(К), Т1, Т2);
			ПолныхДней = (НачалоДня(К)-Д)/86400;
			ЧастьДня = ?(Т1>Т2, Т1-Т2, 86400-Т2+Т1);
			Всего = Всего + ПолныхДней*ЧастьДня;
		КонецЕсли;
	Иначе
		Всего = К - Н;
		Если Т1 <= Т2 тогда
			Если (Т1 < К) И (Т2 > Н) тогда
				Всего = Всего - (Т2-Т1) + ?(Т1<Н, Н-Т1, 0) + ?(Т2>К, Т2-К, 0);
			КонецЕсли;
		Иначе
			Всего = Всего - ?(Н<Т2, Т2-Н, 0) - ?(К>Т1, К-Т1, 0);
		КонецЕсли;
	КонецЕсли;
	Возврат Всего;
КонецФункции // ИсключениеВременногоПериода()

&НаКлиенте
// Функция возвращает строковое представление времени
//
// Параметры:
//	Время	- ДатаВремя	- Время
//
// Возвращаемое значение:
//	Строка	- Строковое представление времени
//
Функция ПолучитьПредставлениеВремени(Время)
	СписокВремен = Новый СписокЗначений;
	СписокВремен.Добавить(86400,	"ru='дня(ей)'");
	СписокВремен.Добавить(3600,		"ru='часа(ов)'");
	СписокВремен.Добавить(60,		"ru='минут(ы)'");
	СписокВремен.Добавить(1,		"ru='секунд(ы)'");
	Текст = "";
	Для Каждого Элемент Из СписокВремен Цикл
		Если Время >= Элемент.Значение Тогда
			Текст = Формат(Время / Элемент.Значение, "ЧДЦ=1; ЧРД=.; ЧГ=0") + " " + НСтр(Элемент.Представление);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Текст;
КонецФункции // ПолучитьПредставлениеВремени()

&НаКлиенте
// Процедура - обработчик ответа на вопрос перед закрытием формы
//
// Параметры:
//	РезультатВопроса		- КодВозвратаДиалога	- Ответ на вопрос
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура ОбработкаОтветаНаВопросПередЗакрытием(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = Неопределено Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры	// ОбработкаОтветаНаВопросПередЗакрытием()

&НаКлиенте
// Процедура заполняет список выбора для поля ввода времени
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений	- Список выбора времени
//
Функция ЗаполнитьСписокВыбораВремени()
	СписокВремени	= Новый СписокЗначений;
	ПустаяДата		= Дата("00010101");
	ТекВремя		= ПустаяДата;
	Пока НачалоДня(ТекВремя) <= НачалоДня(ПустаяДата) Цикл
		ПредставлениеВремени = Формат(ТекВремя, "ДФ=HH:mm; ДП=00:00");
		СписокВремени.Добавить(ТекВремя, ПредставлениеВремени);
		ТекВремя = ТекВремя + 30 * 60;
	КонецЦикла;
	Возврат СписокВремени;
КонецФункции // ЗаполнитьСписокВыбораВремени()

&НаКлиенте
// Процедура - обработчик выбора времени из списка
//
// Параметры:
//	ВыбранныйЭлемент		- ЭлементСпискаЗначений	- Ответ на вопрос
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура НачалоОтправкиВремяВыбратьИзСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда  Возврат; КонецЕсли;
	НачалоОтправкиВремя	= ВыбранныйЭлемент.Значение;
	НачалоОтправкиВремяПриИзменении(Неопределено);
КонецПроцедуры // НачалоОтправкиВремяВыбратьИзСписка()	

&НаКлиенте
// Процедура - обработчик выбора времени из списка
//
// Параметры:
//	ВыбранныйЭлемент		- ЭлементСпискаЗначений	- Ответ на вопрос
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура АктуальностьВремяВыбратьИзСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда  Возврат; КонецЕсли;
	АктуальностьВремя	= ВыбранныйЭлемент.Значение;
	АктуальностьВремяПриИзменении(Неопределено);
КонецПроцедуры // АктуальностьВремяВыбратьИзСписка()	

&НаКлиенте
// Процедура формирует заголовок формы
//
// Параметры:
//	Нет.
//
Процедура СформироватьЗаголовок()
	Если Объект.sms4bТипСообщения = ПредопределенноеЗначение("Перечисление.sms4ВходящееИсходящееSMS.Входящее") Тогда
		ТекстЗаголовка	= НСтр("ru='Входящее сообщение'");
	Иначе	
		ТекстЗаголовка	= НСтр("ru='Исходящее сообщение'");
	КонецЕсли;
	ТекстЗаголовка	= ТекстЗаголовка + " от " + Формат(Объект.Дата, "ДЛФ=DD") + " (" + НРег(Строка(Объект.Состояние)) + ")";
	Заголовок		= ТекстЗаголовка;
КонецПроцедуры // СформироватьЗаголовок()	

&НаКлиенте
// Процедура - обработчик закрытия формы адресной книги
//
// Параметры:
//	РезультатЗакрытия		- Произвольный	- Результат закрытия формы
//	ДополнительныеПараметры	- Структура		- Структура дополнительных параметров
//
Процедура ОбновитьРавномернуюРассылку(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	АдресатыПриИзменении(Неопределено);
КонецПроцедуры // ОбновитьРавномернуюРассылку()

&НаСервереБезКонтекста
// Функция возвращает признак использования регламентного задания по отправке СМС
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Использование регламентного задания
//
Функция ИспользуетсяРегламентноеЗадание()
	УстановитьПривилегированныйРежим(Истина);
	Задание = РегламентныеЗадания.НайтиПредопределенное("ОтправкаSMS");
	Если Задание = Неопределено Тогда
		ИспользованиеЗадания = Ложь;
	Иначе
		ИспользованиеЗадания = Задание.Использование;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ИспользованиеЗадания;
КонецФункции // ИспользуетсяРегламентноеЗадание()

&НаКлиенте
// Процедура - обработчик закрытия формы сообщения
//
// Параметры:
//	РезультатЗакрытия		- Произвольный	- Результат закрытия формы
//	ДополнительныеПараметры	- Структура		- Структура дополнительных параметров
//
Процедура ОтправитьСообщение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ОтправкаSMSЧерезSMS4B.РегламентноеЗаданиеПроверкаСМС();	
КонецПроцедуры // ОтправитьСообщение()	
	
#КонецОбласти

#Область ОбработчикиСобытийРеквизитовФормыДокумента

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ ДОКУМЕНТА

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "ТекстСообщения"
//
Процедура ТекстСообщенияПриИзменении(Элемент)
    Подсчет(Объект.ТекстСообщения);
	Если ЕстьТэги() Тогда
		Для Каждого ТекущаяСтрока Из Объект.Адресаты Цикл 
			ТекущаяСтрока.sms4bТекстСообщения = СформироватьСообщениеПоШаблону(Объект.ТекстСообщения, ТекущаяСтрока.Контакт);
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры // ТекстСообщенияПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ИзменениеТекстаРедактирования" поля ввода "ТекстСообщения"
//
Процедура ТекстСообщенияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	Подсчет(Текст);
КонецПроцедуры // ТекстСообщенияИзменениеТекстаРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ФлагАктуальность"
//
Процедура ФлагАктуальностьПриИзменении(Элемент)
	Если Объект.sms4bФлагАктуальность Тогда
		Элементы.АктуальностьДата.Доступность	= Истина;
		Элементы.АктуальностьВремя.Доступность	= Истина;
		Если НЕ ЗначениеЗаполнено(Объект.ДатаАктуальностиОтправки) Тогда
			Если СтруктураКонстант.СрокЖизниSMS = 0 Тогда
				Объект.ДатаАктуальностиОтправки = Объект.ДатаКогдаОтправить + (24 * 3600);
			Иначе	
				Объект.ДатаАктуальностиОтправки = Объект.ДатаКогдаОтправить + (СтруктураКонстант.СрокЖизниSMS * 3600);
			КонецЕсли;	
			АктуальностьДата		= Объект.ДатаАктуальностиОтправки;
			АктуальностьВремя	= Объект.ДатаАктуальностиОтправки;
		КонецЕсли;
	Иначе
		Элементы.АктуальностьДата.Доступность	= Ложь;
		Элементы.АктуальностьВремя.Доступность	= Ложь;
		Объект.ДатаАктуальностиОтправки				= "";
    КонецЕсли;
    РавномернаяРассылкаПриИзменении();
КонецПроцедуры // ФлагАктуальностьПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "НеОтправлятьSMS"
//
Процедура НеОтправлятьSMSПриИзменении()
    ДоступностьЭлемента = Объект.sms4bНеОтправлятьSMS;
    Элементы.НачалоПериодаЗапрета.Доступность = ДоступностьЭлемента;
	Элементы.КонецПериодаЗапрета.Доступность  = ДоступностьЭлемента;
	Если ДоступностьЭлемента Тогда
		Если НЕ ЗначениеЗаполнено(Объект.sms4bНачалоПериодаЗапрета) Тогда
			Объект.sms4bНачалоПериодаЗапрета = СтруктураКонстант.НачалоПериодаЗапрета;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.sms4bКонецПериодаЗапрета) Тогда 
			Объект.sms4bКонецПериодаЗапрета  = СтруктураКонстант.КонецПериодаЗапрета;
		КонецЕсли;
	Иначе
		Объект.sms4bНачалоПериодаЗапрета	= Дата('00010101');
		Объект.sms4bКонецПериодаЗапрета		= Дата('00010101');
    КонецЕсли;
    РавномернаяРассылкаПриИзменении();
КонецПроцедуры // НеОтправлятьSMSПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "РавномернаяРассылка"
//
Процедура РавномернаяРассылкаПриИзменении()
	КоличествоПолучателей = Объект.Адресаты.Количество();
	Если Объект.sms4bРавномернаяРассылка И (КоличествоПолучателей > 0) Тогда
		Дата1 = Объект.ДатаКогдаОтправить;
		Дата2 = Объект.ДатаАктуальностиОтправки;
		Если НЕ ЗначениеЗаполнено(Дата2) Тогда
			Если СтруктураКонстант.СрокЖизниSMS = 0 Тогда
				Дата2 = Дата1 + (24 * 3600);
			Иначе	
				Дата2 = Дата1 + (СтруктураКонстант.СрокЖизниSMS * 3600);
			КонецЕсли;	
		КонецЕсли;
		Если Объект.sms4bНеОтправлятьSMS Тогда
			Всего = ИсключениеВременногоПериода(Дата1, Дата2, Объект.sms4bНачалоПериодаЗапрета, Объект.sms4bКонецПериодаЗапрета);
		Иначе
			Всего = ИсключениеВременногоПериода(Дата1, Дата2);
		КонецЕсли;
		Интервал		= Всего / КоличествоПолучателей;
		ТекстВсего		= ПолучитьПредставлениеВремени(Всего);
		ТекстИнтервала	= ПолучитьПредставлениеВремени(Интервал);
		Элементы.ВремяРассылки.Заголовок = НСтр("ru='В течении '") + ТекстВсего + НСтр("ru=' с интервалом '") + ТекстИнтервала;
    Иначе
    	Элементы.ВремяРассылки.Заголовок = "";
    КонецЕсли;
КонецПроцедуры // РавномернаяРассылкаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "НачалоОтправкиДата"
//
Процедура НачалоОтправкиДатаПриИзменении()
	Объект.ДатаКогдаОтправить = НачалоОтправкиДата + (НачалоОтправкиВремя - Дата('00010101'));
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если Объект.ДатаКогдаОтправить < ДатаСеанса Тогда
		Объект.ДатаКогдаОтправить	= ДатаСеанса;
		НачалоОтправкиДата		= Объект.ДатаКогдаОтправить;
		НачалоОтправкиВремя		= Объект.ДатаКогдаОтправить;
	КонецЕсли;
	Если СтруктураКонстант.СрокЖизниSMS = 0 Тогда
		НоваяАктуальность = Объект.ДатаКогдаОтправить + (24 * 3600);
	Иначе	
		НоваяАктуальность = Объект.ДатаКогдаОтправить + (СтруктураКонстант.СрокЖизниSMS * 3600);
	КонецЕсли;	
	Если Объект.sms4bФлагАктуальность И (Объект.ДатаАктуальностиОтправки < НоваяАктуальность) Тогда
		АктуальностьДата				= НоваяАктуальность;
		АктуальностьВремя			= НоваяАктуальность;
		АктуальностьДатаПриИзменении();
	Иначе
		ПроверитьДлительность();
	    РавномернаяРассылкаПриИзменении();
	КонецЕсли;
КонецПроцедуры // НачалоОтправкиДатаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "НачалоОтправкиВремя"
//
Процедура НачалоОтправкиВремяПриИзменении(Элемент)
	НачалоОтправкиДатаПриИзменении();	
КонецПроцедуры // НачалоОтправкиВремяПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "НачалоОтправкиВремя"
//
Процедура НачалоОтправкиВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	СписокВремени			= ЗаполнитьСписокВыбораВремени();
	ЗначениеОкругленное		= Дата("00010101") + (Цел((НачалоОтправкиВремя - НачалоДня(НачалоОтправкиВремя)) / (30 * 60)) * (30 * 60) );
	НачальноеЗначение		= СписокВремени.НайтиПоЗначению(ЗначениеОкругленное);
	ОповещениеВыбора		= Новый ОписаниеОповещения("НачалоОтправкиВремяВыбратьИзСписка", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзСписка(ОповещениеВыбора, СписокВремени, Элемент, НачальноеЗначение);
КонецПроцедуры // НачалоОтправкиВремяНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "АктуальностьДата"
//
Процедура АктуальностьДатаПриИзменении()
	Объект.ДатаАктуальностиОтправки = АктуальностьДата + (АктуальностьВремя - Дата('00010101'));
	Если НЕ ЗначениеЗаполнено(Объект.ДатаАктуальностиОтправки) Тогда
		Если СтруктураКонстант.СрокЖизниSMS = 0 Тогда
    		Объект.ДатаАктуальностиОтправки = Объект.ДатаКогдаОтправить + (24 * 3600);
		Иначе	
    		Объект.ДатаАктуальностиОтправки = Объект.ДатаКогдаОтправить + (СтруктураКонстант.СрокЖизниSMS * 3600);
		КонецЕсли;	
		АктуальностьДата				= Объект.ДатаАктуальностиОтправки;
		АктуальностьВремя			= Объект.ДатаАктуальностиОтправки;
    КонецЕсли; 
	Если Объект.ДатаАктуальностиОтправки < (Объект.ДатаКогдаОтправить + 900) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Время актуальности сообщения не может быть меньше 15 минут от времени начала рассылки'"));
		Объект.ДатаАктуальностиОтправки = Объект.ДатаКогдаОтправить + 900;
		АктуальностьДата				= Объект.ДатаАктуальностиОтправки;
		АктуальностьВремя			= Объект.ДатаАктуальностиОтправки;
	КонецЕсли;
	МаксАктуальностьДоставки = СтруктураКонстант.АктуальностьДоставки;
	Если (МаксАктуальностьДоставки > 0) И (Объект.ДатаАктуальностиОтправки > (Объект.Дата + (МаксАктуальностьДоставки * 60 * 60))) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Время актуальность не может быть больше " + МаксАктуальностьДоставки / 24 + " суток от даты документа'"));
		Объект.ДатаАктуальностиОтправки = (Объект.Дата + (МаксАктуальностьДоставки * 60 * 60));
		АктуальностьДата				= Объект.ДатаАктуальностиОтправки;
		АктуальностьВремя			= Объект.ДатаАктуальностиОтправки;
	КонецЕсли;
    ПроверитьДлительность();
    РавномернаяРассылкаПриИзменении();
КонецПроцедуры // АктуальностьДатаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "АктуальностьВремя"
//
Процедура АктуальностьВремяПриИзменении(Элемент)
	АктуальностьДатаПриИзменении();	
КонецПроцедуры // АктуальностьВремяПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "АктуальностьВремя"
//
Процедура АктуальностьВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	СписокВремени			= ЗаполнитьСписокВыбораВремени();
	ЗначениеОкругленное		= Дата("00010101") + (Цел((АктуальностьВремя - НачалоДня(АктуальностьВремя)) / (30 * 60)) * (30 * 60) );
	НачальноеЗначение		= СписокВремени.НайтиПоЗначению(ЗначениеОкругленное);
	ОповещениеВыбора		= Новый ОписаниеОповещения("АктуальностьВремяВыбратьИзСписка", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзСписка(ОповещениеВыбора, СписокВремени, Элемент, НачальноеЗначение);
КонецПроцедуры // АктуальностьВремяНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "НачалоПериода"
//
Процедура НачалоПериодаЗапретаПриИзменении(Элемент)
	Объект.sms4bНачалоПериодаЗапрета = НачалоЧаса(Объект.sms4bНачалоПериодаЗапрета);
    РавномернаяРассылкаПриИзменении();
КонецПроцедуры // НачалоПериодаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Регулирование" поля ввода "НачалоПериода"
//
Процедура НачалоПериодаЗапретаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Объект.sms4bНачалоПериодаЗапрета = Дата('00010101') И (Направление = -1) Тогда
		Объект.sms4bНачалоПериодаЗапрета = Объект.sms4bНачалоПериодаЗапрета + 82800;
	Иначе	
		Объект.sms4bНачалоПериодаЗапрета = Объект.sms4bНачалоПериодаЗапрета + 3600 * Направление;
	КонецЕсли;	
    РавномернаяРассылкаПриИзменении();
КонецПроцедуры // НачалоПериодаРегулирование()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "КонецПериода"
//
Процедура КонецПериодаЗапретаПриИзменении(Элемент)
	Объект.sms4bКонецПериодаЗапрета = НачалоЧаса(Объект.sms4bКонецПериодаЗапрета);
    РавномернаяРассылкаПриИзменении();
КонецПроцедуры // КонецПериодаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Регулирование" поля ввода "КонецПериода"
//
Процедура КонецПериодаЗапретаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Объект.sms4bКонецПериодаЗапрета = Дата('00010101') И (Направление = -1) Тогда
		Объект.sms4bКонецПериодаЗапрета = Объект.sms4bКонецПериодаЗапрета + 82800;
	Иначе	
		Объект.sms4bКонецПериодаЗапрета = Объект.sms4bКонецПериодаЗапрета + 3600 * Направление;
	КонецЕсли;	
    РавномернаяРассылкаПриИзменении();
КонецПроцедуры // КонецПериодаРегулирование()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" флажка "НаКонтроле"
//
Процедура НаКонтролеПриИзменении(Элемент)
	Рассмотрено = НЕ НаКонтроле;
	УправлениеДоступностью(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры // НаКонтролеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля ввода "РассмотретьПосле"
//
Процедура РассмотретьПослеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВзаимодействияКлиент.ОбработатьВыборВПолеРассмотретьПосле(РассмотретьПосле, ВыбранноеЗначение, СтандартнаяОбработка,
		Модифицированность);
КонецПроцедуры // РассмотретьПослеОбработкаВыбора()

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовТаблицыАдресаты

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЦЫ АДРЕСАТЫ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Адресаты"
//
Процедура АдресатыПриИзменении(Элемент)
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "СообщениеSMS");
	КоличествоАдресатов = Объект.Адресаты.Количество();
	ИзменилисьКонтакты = Истина;
    РавномернаяРассылкаПриИзменении();
КонецПроцедуры // АдресатыПриИзменении()

// +CRM
&НаКлиенте
// Процедура - обработчик события "ПослеУдаления" поля ввода "Адресаты"
//
Процедура АдресатыПослеУдаления(Элемент)
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
КонецПроцедуры // АдресатыПослеУдаления()
// -CRM

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" поля ввода "Адресаты"
//
Процедура АдресатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТД = Элементы.Адресаты.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТД.СостояниеСообщения) Тогда
		ТД.СостояниеСообщения = ПредопределенноеЗначение("Перечисление.СостоянияСообщенияSMS.Черновик");
	КонецЕсли;
КонецПроцедуры // АдресатыПриОкончанииРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент" таблицы формы "Адресаты"
//
Процедура АдресатыКонтрагентПриИзменении(Элемент)
	ТД = Элементы.Адресаты.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	ИначеЕсли ТД.Контакт = Неопределено Тогда
		ТД.ПредставлениеКонтакта	= "";
		ТД.НомерДляОтправки			= "";
		ТД.КакСвязаться				= "";
		ТД.sms4bТекстСообщения		= "";
		Возврат;
	КонецЕсли;	
	ТД.ПредставлениеКонтакта = ЗначениеРеквизитаОбъекта(ТД.Контакт, "Наименование");
    СписокТелефонов = ПолучитьСписокНомеровТелефоновКонтрагента(ТД.Контакт);
	Для Каждого ЭлементСписка Из СписокТелефонов Цикл
		ПредставлениеТелефона	= ЭлементСписка.Значение;
		// Проверяем наличие телефонного номера в таблице адресатов
		МассивСтрок = Объект.Адресаты.НайтиСтроки(Новый Структура("КакСвязаться", ПредставлениеТелефона));
		Если МассивСтрок.Количество() = 0 Тогда
			ТД.КакСвязаться		= ПредставлениеТелефона;
			ТД.НомерДляОтправки	= "+" + ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(ПредставлениеТелефона);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Объект.sms4bАвтотекстБулево Тогда
		ТД.sms4bТекстСообщения = СформироватьСообщениеПоШаблону(Объект.ТекстСообщения, ТД.Контакт);
	КонецЕсли;
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "СообщениеSMS");
// +CRM	
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);	
// -CRM	
КонецПроцедуры // АдресатыКонтрагентПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Контрагент" таблицы формы "Адресаты"
//
Процедура АдресатыКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.Адресаты.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли; 
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные",	ТД);
	ДополнительныеПараметры.Вставить("Элемент",			Элемент);
	Если ЗначениеЗаполнено(ТД.Контакт) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора",			Истина); 
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина); 
		ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь); 
		ПараметрыФормы.Вставить("ВыборГруппИЭлементов",	ИспользованиеГруппИЭлементов.Элементы); 
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТД.Контакт); 
		Если ЕстьВладелец(ТД.Контакт) Тогда
			ВладелецКонтрагента = ЗначениеРеквизитаОбъекта(ТД.Контакт, "Владелец");
			Если ЗначениеЗаполнено(ВладелецКонтрагента) Тогда
				ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", ВладелецКонтрагента)); 
			КонецЕсли;	
		КонецЕсли;	
		ОписаниеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораКонтакта", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Справочник." + ПолучитьИмяСправочника(ТД.Контакт) + ".ФормаВыбора", ПараметрыФормы, , , , , ОписаниеВыбора);
	Иначе
		СписокВыбораТипа = Новый СписокЗначений;
		МассивСтруктурСправочников = ПолучитьМассивСтруктурСправочников();
		Для Каждого ЭлементМассива Из МассивСтруктурСправочников Цикл
			СписокВыбораТипа.Добавить(ЭлементМассива.Значение, ЭлементМассива.Представление);
		КонецЦикла;
		СписокВыбораТипа.СортироватьПоПредставлению();
		ОписаниеВыбораТипа = Новый ОписаниеОповещения("ОбработкаВыбораТипаКонтакта", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзСписка(ОписаниеВыбораТипа, СписокВыбораТипа, Элемент);
	КонецЕсли;	
КонецПроцедуры // АдресатыКонтрагентНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Контрагент" таблицы формы "Адресаты"
//
Процедура АдресатыКонтрагентОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.Адресаты.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТД.Контакт) Тогда Возврат; КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТД.Контакт);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТД);
	ОписаниеИзменения = Новый ОписаниеОповещения("ОбработкаОткрытияКонтакта", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник." + ПолучитьИмяСправочника(ТД.Контакт) + ".ФормаОбъекта", ПараметрыФормы, , , , , ОписаниеИзменения);
КонецПроцедуры // АдресатыКонтрагентОткрытие()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "НомерТелефона" таблицы формы "Адресаты"
//
Процедура АдресатыНомерТелефонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.Адресаты.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТД.Контакт) Тогда Возврат; КонецЕсли;
	СписокВыбора = ПолучитьСписокНомеровТелефоновКонтрагента(ТД.Контакт);
	НачальноеЗначение = СписокВыбора.НайтиПоЗначению(ТД.КакСвязаться);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТД);
	ОписаниеВыбора = Новый ОписаниеОповещения("ОбработкаВыбораНомераТелефона", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзСписка(ОписаниеВыбора, СписокВыбора, Элемент, НачальноеЗначение); 		
КонецПроцедуры // АдресатыНомерТелефонаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "ТекстСообщения" элемента формы "Адресаты"
//
Процедура АдресатыТекстСообщенияОткрытие(Элемент, СтандартнаяОбработка)
   	СтандартнаяОбработка = Ложь;
	ТД = Элементы.Адресаты.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ПоказатьВводСтроки( , ТД.sms4bТекстСообщения, , , Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ ДОКУМЕНТА

&НаКлиенте
// Процедура - обработчик команды "Отправить"
//
Процедура Отправить(Команда)
	ОчиститьСообщения();
    Если НЕ ПроверитьЗаполнение() Тогда
    	Возврат;
	ИначеЕсли НЕ ПроверитьЗаполнениеАдресатов() Тогда
    	Возврат;
	ИначеЕсли НЕ ПроверитьВозможностьОтправки() Тогда
    	Возврат;
    КонецЕсли; 
	Если ОтправкаSMSЧерезSMS4B.ИспользоватьSMS4B() Тогда
		Для Каждого ТекущееСообщение Из Объект.Адресаты Цикл
			ТекущееСообщение.ИдентификаторСообщения = Лев(Строка(Новый УникальныйИдентификатор), 20);
		КонецЦикла;
		ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(Объект);
		Записать();
		ОтправкаSMSЧерезSMS4B.ЗаписатьСтатусыВРегистр(Объект.Ссылка);
		Если ИспользуетсяРегламентноеЗадание() Тогда
			ПоказатьПредупреждение(, НСтр("ru='Сообщение будет отправлено регламентным заданием.'"), 5);
		ИначеЕсли НЕ ОтправкаSMSЧерезSMS4B.РолиДоступны("ОтправкаSMS, ПолныеПрава") Тогда
			ПоказатьПредупреждение(, НСтр("ru='Сообщение добавлено в очередь на отправку.'"), 5);
		Иначе	
			ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОтправитьСообщение", ЭтотОбъект, Новый Структура); 
		КонецЕсли;	
		Закрыть();
	Иначе
		ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		Если ИнформационнаяБазаФайловая 
			И (Объект.ДатаКогдаОтправить = Дата(1,1,1) ИЛИ Объект.ДатаКогдаОтправить < ДатаСеанса)
			И (Объект.ДатаАктуальностиОтправки = Дата(1,1,1) ИЛИ Объект.ДатаАктуальностиОтправки > ДатаСеанса) Тогда
			КоличествоОтправленных = ВыполнитьОтправкуНаСервере();
			Если КоличествоОтправленных = 0 Тогда Возврат; КонецЕсли;
		Иначе
			ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(Объект);
		КонецЕсли;
		Записать();
		Закрыть();
	КонецЕсли;
КонецПроцедуры // Отправить()

&НаКлиенте
// Процедура - обработчик команды формы "CRM_ЗаполнитьПоГруппе"
//
Процедура CRM_ПолучателиЗаполнитьПоГруппе(Команда)
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.Партнеры.ФормаВыбораГруппы", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры // CRM_ПолучателиЗаполнитьПоГруппе()

&НаКлиенте
// Процедура - обработчик команды формы "CRM_ЗаполнитьПоРезультатамОтчета"
//
Процедура CRM_ПолучателиЗаполнитьПоРезультатамОтчета(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Адресаты.Количество() > 0));
	ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ПолучателиЗаполнитьПоРезультатамОтчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СообщениеSMS.Форма.sms4bФормаВыбораРезультатаОтчета", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // CRM_ПолучателиЗаполнитьПоРезультатамОтчета()

&НаКлиенте
// Процедура - обработчик команды формы "CRM_ЗаполнитьПоРезультатамОтчета"
//
Процедура CRM_ПолучателиЗаполнитьПоРезультатамОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) Тогда
		CRM_ВидКонтактнойИнформации			= Результат.ВидКонтактнойИнформации;
		CRM_НеЗаполнятьСПустымиТелефонами	= Результат.НеЗаполнятьСПустымиТелефонами;
		Если Результат.ОчищатьТЧ Тогда
			Объект.Участники.Очистить();
		КонецЕсли;
		CRM_ЗаполнитьТЧПоРезультатуОтчета(Результат.СписокСсылок);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // CRM_ПолучателиЗаполнитьПоРезультатамОтчета()

&НаКлиенте
// Процедура - обработчик команды формы "CRM_ЗаполнитьПоСегменту"
//
Процедура CRM_ПолучателиЗаполнитьПоСегменту(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Адресаты.Количество() > 0));
	ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ПолучателиЗаполнитьПоСегментуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СообщениеSMS.Форма.sms4bФормаВыборСегмента", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // CRM_ПолучателиЗаполнитьПоСегменту()

&НаКлиенте
Процедура CRM_ПолучателиЗаполнитьПоСегментуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) Тогда
		CRM_Сегмент							= Результат.Сегмент;
		CRM_ВидКонтактнойИнформации			= Результат.ВидКонтактнойИнформации;
		CRM_НеЗаполнятьСПустымиТелефонами	= Результат.НеЗаполнятьСПустымиТелефонами;
		CRM_ТолькоОсновныеКонтактныеЛица	= Результат.ТолькоОсновныеКонтактныеЛица;
		Если Результат.ОчищатьТЧ Тогда
			Объект.Адресаты.Очистить();
		КонецЕсли;
		CRM_ЗаполнитьТЧПоСегменту();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // CRM_ПолучателиЗаполнитьПоСегменту()

&НаКлиенте
// Процедура - обработчик команды "Отправить"
//
Процедура ПроверитьСтатусыДоставки(Команда)
	ОчиститьСообщения();
	ПроверитьСтатусыДоставкиСервер();
КонецПроцедуры // ПроверитьСтатусыДоставки()

&НаКлиенте
// Процедура - обработчик команды "ВставитьШаблон"
//
Процедура ВставитьШаблон(Команда)
	ДополнительныеПараметры = Новый Структура;
	Если ПустаяСтрока(Объект.ТекстСообщения) Тогда
		ОчиститьТекстСообщения(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	Иначе
		ТекстВопроса = НСтр("ru = 'Текст сообщения будет очищен. Продолжить?'");
		ОповещениеОтвета = Новый ОписаниеОповещения("ОчиститьТекстСообщения", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОповещениеОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
	КонецЕсли;
КонецПроцедуры // ВставитьШаблон()

&НаКлиенте
// Процедура - обработчик команды "Транслитерация"
//
Процедура Транслитерация(Команда)
    ТекстСообщения = Объект.ТекстСообщения;
	Кнопка = Элементы.Транслитерация;
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Если Кнопка.Заголовок =  НСтр("ru = 'Транслитерация'") Тогда
			Объект.ОтправлятьВТранслите = Истина;
			Кнопка.Заголовок =  НСтр("ru = 'Отмена транслитерации'");
			ТекстСообщенияДоТранслитерации = ТекстСообщения;
			Если Объект.sms4bАвтотекстБулево Тогда
				Для Каждого ТекСтрока Из Объект.Адресаты Цикл
					ТекСтрока.sms4bТекстСообщения = ОтправкаSMSЧерезSMS4B.Транслитерация(ТекСтрока.sms4bТекстСообщения);
				КонецЦикла;	
			Иначе
				Объект.ТекстСообщения = ОтправкаSMSЧерезSMS4B.Транслитерация(ТекстСообщения);
			КонецЕсли;	
		Иначе
			Объект.ОтправлятьВТранслите = Ложь;
			Кнопка.Заголовок =  НСтр("ru = 'Транслитерация'");
			Если Объект.sms4bАвтотекстБулево Тогда
				Для Каждого ТекСтрока Из Объект.Адресаты Цикл
					ТекСтрока.sms4bТекстСообщения = СформироватьСообщениеПоШаблону(ТекстСообщенияДоТранслитерации, ТекСтрока.Контакт);
				КонецЦикла;	
			Иначе
				Объект.ТекстСообщения = ТекстСообщенияДоТранслитерации;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // Транслитерация()

&НаКлиенте
// Процедура - обработчик команды "АдресатыПодбор"
//
Процедура АдресатыПодбор(Команда)
	Если СообщениеОтправлено(Объект.Состояние) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Команда недоступна (сообщение уже отправлено)'"));
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеОЗакрытии		= Новый ОписаниеОповещения("ОбновитьРавномернуюРассылку", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы			= Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь);
	ОткрытьФорму("ОбщаяФорма.sms4bФормаАдреснаяКнига", ПараметрыФормы, ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно, , ОповещениеОЗакрытии);
КонецПроцедуры // АдресатыПодбор()

&НаКлиенте
// Динамически поключаемый обработчик команды "ВставитьТэгСМС"
//
Процедура Подключаемый_ВставитьТэгСМС(Команда)
	ИмяКоманды = СтрЗаменить(Команда.Имя,"_СМС","");
	МассивСтрок = ТаблицаАвтотекста.НайтиСтроки(Новый Структура("ИмяКоманды", ИмяКоманды));
	Тэг = МассивСтрок[0].Тэг;
	Элементы.ТекстСообщения.ВыделенныйТекст = Тэг;
КонецПроцедуры // Подключаемый_ВставитьТэгСМС()

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиКомандТаблицыАдресаты

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ЗАПОЛНЕНИЯ ТАБЛИЦЫ АДРЕСАТЫ

&НаКлиенте
// Процедура - обработчик команды формы "АдресатыПроверитьТелефоны"
//
Процедура АдресатыПроверитьТелефоны(Команда)
	Если ПроверитьЗаполнениеАдресатов() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Проверка выполнена успешно!'"));
	КонецЕсли;
КонецПроцедуры // АдресатыПроверитьТелефоны()

&НаКлиенте
// Процедура - обработчик команды формы "АдресатыВыделитьСОдинаковымиТелефонами"
//
Процедура АдресатыВыделитьСОдинаковымиТелефонами(Команда)
	ВыделитьАдресатовСОдинаковымиТелефонами();
КонецПроцедуры // АдресатыВыделитьСОдинаковымиТелефонами()

&НаКлиенте
// Процедура - обработчик команды формы "АдресатыУдалитьСОдинаковымиТелефонами"
//
Процедура АдресатыУдалитьСОдинаковымиТелефонами(Команда)
	УдалитьАдресатовСОдинаковымиТелефонами();
КонецПроцедуры // АдресатыУдалитьСОдинаковымиТелефонами()

&НаКлиенте
// Процедура - обработчик команды формы "АдресатыУдалитьБезТелефонов"
//
Процедура АдресатыУдалитьБезТелефонов(Команда)
	УдалитьАдресатовБезТелефона();
КонецПроцедуры // АдресатыУдалитьБезТелефонов()

&НаКлиенте
// Процедура - обработчик команды формы "АдресатыОчистить"
//
Процедура АдресатыОчистить(Команда)
	Если Объект.Адресаты.Количество() = 0 Тогда Возврат; КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ТекстВопроса = НСтр("ru = 'Табличная часть содержит записи. Продолжить?'");
	ОповещениеОтвета = Новый ОписаниеОповещения("ОчиститьАдресатов", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОповещениеОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
КонецПроцедуры // АдресатыОчистить()

#КонецОбласти

#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере"
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьУсловноеОформление();
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда Возврат; КонецЕсли;
	Если Параметры.Свойство("Взаимодействие") Тогда
		Взаимодействие	= Параметры.Взаимодействие;
	КонецЕсли;
	Если Параметры.Свойство("ДанныеЗаполнения") И ТипЗнч(Параметры.ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Объект.ВзаимодействиеОснование = Параметры.ДанныеЗаполнения;
	КонецЕСли;		
    СтруктураКонстант	= ПолучитьКонстанты();
	// Заполняем новое сообщение
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Состояние	= Перечисления.СостоянияДокументаСообщениеSMS.Черновик;
		Рассмотрено			= Истина;
		ИзменилисьКонтакты	= Истина;
		ПриСозданииЧтенииНаСервере();
		Взаимодействия.УстановитьПредметПоДаннымЗаполнения(Параметры, Предмет);
		// Новое исходящее сообщение
		Объект.Дата 				= ТекущаяДатаСеанса();
		Объект.Ответственный		= ПользователиКлиентСервер.ТекущийПользователь();
		Объект.Автор				= Объект.Ответственный;
		Объект.CRM_ПодразделениеЗаказчик	= Объект.Автор.Подразделение;
		Объект.ДатаКогдаОтправить	= Объект.Дата;
		Объект.sms4bТипСообщения 		= ПредопределенноеЗначение("Перечисление.sms4ВходящееИсходящееSMS.Исходящее");
		Объект.Важность				= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		Если ОтправкаSMSЧерезSMS4B.ИспользоватьSMS4B() Тогда
			Объект.sms4bНомерОтправителя	= СтруктураКонстант.ИмяОтправителя;
			Объект.sms4bНеОтправлятьSMS			= СтруктураКонстант.НеОтправлятьSMS;
			Если Объект.sms4bНеОтправлятьSMS Тогда
				Объект.sms4bНачалоПериодаЗапрета	= СтруктураКонстант.НачалоПериодаЗапрета;
				Объект.sms4bКонецПериодаЗапрета		= СтруктураКонстант.КонецПериодаЗапрета;
			КонецЕсли;
			Если СтруктураКонстант.СрокЖизниSMS = 0 Тогда
				Объект.sms4bФлагАктуальность			= Ложь;
				Объект.ДатаАктуальностиОтправки	= Дата('00010101');
			Иначе
				Объект.sms4bФлагАктуальность			= Истина;
				Объект.ДатаАктуальностиОтправки	= Объект.ДатаКогдаОтправить + (СтруктураКонстант.СрокЖизниSMS * 3600);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	ТаблицаАвтотекстаЗнач = РеквизитФормыВЗначение("ТаблицаАвтотекста");
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекстаЗнач, Перечисления.CRM_НазначенияАвтотекста.АвтотекстСМССообщение);
	ЗначениеВРеквизитФормы(ТаблицаАвтотекстаЗнач, "ТаблицаАвтотекста");
	CRM_АвтотекстПереопределяемый.ЗаполнитьКоманднуюПанельСообщенияСМС(ЭтотОбъект);
	Взаимодействия.ЗаполнитьСписокВыбораДляРассмотретьПосле(Элементы.РассмотретьПосле.СписокВыбора);
	// Подготовить оповещения взаимодействий.
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры);
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.Свойства
	CRM_ШаблоныОбъектов.СформироватьДополнительныеЭлементыФормы(ЭтотОбъект);
	// +CRM
	CRM_ОбщегоНазначенияСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, Объект, "ГруппаИнтерес", ТипЗнч(Объект.Ссылка));
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, Истина, , ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);
	CRM_МодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -CRM
	Если НЕ (Объект.sms4bТипСообщения = ПредопределенноеЗначение("Перечисление.sms4ВходящееИсходящееSMS.Входящее")) Тогда
		Если ОтправкаSMSЧерезSMS4B.ИспользоватьSMS4B() Тогда
			ЗаполнитьСписокНомеровОтправителя();
		КонецЕсли;	
		Если ЕстьСообщенияВОчереди(Объект.Ссылка) Тогда
			ПолучитьСтатусыСообщений();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриСозданииНаСервере"
//
Процедура ПриОткрытии(Отказ)
	Если НЕ ОтправкаSMSЧерезSMS4B.НастройкаОтправкиSMSВыполнена() Тогда
		ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Не заполнены настройки отправки SMS сообщений!'"), СтатусСообщения.Внимание, , , Истина);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Объект.Ссылка.Пустая() Тогда
		Если ЕстьТэги() Тогда
			Для Каждого ТекущаяСтрока Из Объект.Адресаты Цикл 
				ТекущаяСтрока.sms4bТекстСообщения = СформироватьСообщениеПоШаблону(Объект.ТекстСообщения, ТекущаяСтрока.Контакт);
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
    Подсчет(Объект.ТекстСообщения);
	НеОтправлятьSMSПриИзменении();
	ФлагАктуальностьПриИзменении(Неопределено);
	НачалоОтправкиДата	= Объект.ДатаКогдаОтправить;
	НачалоОтправкиВремя	= Объект.ДатаКогдаОтправить;
	АктуальностьДата		= Объект.ДатаАктуальностиОтправки;
	АктуальностьВремя	= Объект.ДатаАктуальностиОтправки;
	СформироватьЗаголовок();
	Элементы.Баланс.Заголовок = НСтр("ru='Баланс: '")
		+ Формат(СтруктураКонстант.ОстатокСМС,"ЧДЦ=2; ЧРГ=' '" ) + НСтр("ru=' руб.'");
	// +CRM
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваКоманднойПанелиИнтересовВФормеДокумента(ЭтотОбъект);	
	// -CRM			
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием"
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
    СтандартнаяОбработка = Ложь;
	Если Модифицированность Тогда
		Отказ = Истина;	
		ДополнительныеПараметры = Новый Структура;
		ОписаниеОтвета = Новый ОписаниеОповещения("ОбработкаОтветаНаВопросПередЗакрытием", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОтвета, НСтр("ru = 'Данные были изменены. Сохранить данные?'"), РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да, Заголовок);
	КонецЕсли;	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаВыбора"
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("Содержание") Тогда
			Возврат;	
		ИначеЕсли ВыбранноеЗначение.Свойство("Телефон") Тогда
			ПредставлениеТелефона = СокрЛП(ВыбранноеЗначение.Телефон);
		ИначеЕсли ВыбранноеЗначение.Свойство("Поле1") Тогда	
			ПредставлениеТелефона = СокрЛП(ВыбранноеЗначение.Поле1) + СокрЛП(ВыбранноеЗначение.Поле2) + СокрЛП(ВыбранноеЗначение.Поле3);
		Иначе
			ПредставлениеТелефона = "";
		КонецЕсли;	
		ВыбранныйТелефон	= ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(ПредставлениеТелефона);
		ВыбраннаяСтрока		= Элементы.Адресаты.ТекущиеДанные;
		// Проверяем наличие телефонного номера в таблице адресатов
		МассивСтрок = Объект.Адресаты.НайтиСтроки(Новый Структура("КакСвязаться", ПредставлениеТелефона));
		Если МассивСтрок.Количество() > 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru='Выбранный номер телефона уже присутствует в таблице адресатов!'"));
			Возврат;
		КонецЕсли;
		Если ВыбраннаяСтрока = Неопределено Тогда
			ВыбраннаяСтрока							= Объект.Адресаты.Добавить();
			ВыбраннаяСтрока.Контакт					= ВыбранноеЗначение.Объект;
			ВыбраннаяСтрока.ПредставлениеКонтакта	= ЗначениеРеквизитаОбъекта(ВыбраннаяСтрока.Контакт, "Наименование");
			Элементы.Адресаты.ТекущаяСтрока			= ВыбраннаяСтрока;
		ИначеЕсли ВыбраннаяСтрока.Контакт = Неопределено Тогда
			ВыбраннаяСтрока.Контакт					= ВыбранноеЗначение.Объект;
			ВыбраннаяСтрока.ПредставлениеКонтакта	= ЗначениеРеквизитаОбъекта(ВыбраннаяСтрока.Контакт, "Наименование");
		Иначе
			ВыбраннаяСтрока							= Объект.Адресаты.Добавить();
			ВыбраннаяСтрока.Контакт					= ВыбранноеЗначение.Объект;
			ВыбраннаяСтрока.ПредставлениеКонтакта	= ЗначениеРеквизитаОбъекта(ВыбраннаяСтрока.Контакт, "Наименование");
			Элементы.Адресаты.ТекущаяСтрока			= ВыбраннаяСтрока;
		КонецЕсли;	
		ВыбраннаяСтрока.КакСвязаться		= ПредставлениеТелефона;	
		ВыбраннаяСтрока.НомерДляОтправки	= "+" + ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(ПредставлениеТелефона);
		Если Объект.sms4bАвтотекстБулево Тогда
			ВыбраннаяСтрока.sms4bТекстСообщения = СформироватьСообщениеПоШаблону(Объект.ТекстСообщения, ВыбраннаяСтрока.Контакт);
		КонецЕсли;
	// +CRM
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если Объект.Адресаты.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Очистить список получателей?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет,,,,);
		Иначе	
			CRM_ОбработкаВыбораНаСервере(ВыбранноеЗначение);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		CRM_ОбработкаВыбораНаСервере(МассивПользователейГрупп);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
		CRM_ЗагрузитьИзШаблонаНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	// -CRM
	КонецЕсли;	
КонецПроцедуры // ОбработкаВыбора()

&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Адресаты.Очистить();
	КонецЕсли;
	CRM_ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения"
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_НастройкиОтправкиSMS" Тогда
		СтруктураКонстант = ПолучитьКонстанты();
		Возврат;
	КонецЕсли;	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	ВзаимодействияКлиент.ОтработатьОповещение(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "СообщениеSMS");
	КоличествоАдресатов = Объект.Адресаты.Количество();
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПриЧтенииНаСервере"
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ПриСозданииЧтенииНаСервере();
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    Если НЕ ПроверитьЗаполнение() Тогда
		Отказ = Истина;
    КонецЕсли; 
	Если НЕ ПроверитьЗаполнениеАдресатов() Тогда
		Отказ = Истина;
	КонецЕсли;
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Черновик")
		ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Исходящее") Тогда
		Объект.sms4bСтатусСтрокой = НСтр("ru = 'Всего: '") + Строка(Объект.Адресаты.Количество()) + ";" + НСтр("ru = ' записано, но не отправлено'");
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПередЗаписьюНаСервере"
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	Взаимодействия.ПередЗаписьюВзаимодействияИзФормы(ЭтотОбъект, ТекущийОбъект, ИзменилисьКонтакты);
// +CRM	
	CRM_ТаблицаИнтересовЗнач = РеквизитФормыВЗначение("CRM_ТаблицаИнтересов",Тип("ТаблицаЗначений"));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",CRM_ТаблицаИнтересовЗнач);	
// -CRM		
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
// Процедура - обработчик события формы "ПриЗаписиНаСервере"
//
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);
КонецПроцедуры // ПриЗаписиНаСервере()

&НаСервере
// Процедура - обработчик события формы "ПослеЗаписиНаСервере"
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначения.ПолучитьКартинкуКомментария(Объект.Комментарий);
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПослеЗаписи"
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	СформироватьЗаголовок();
	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "СообщениеSMS");
	Если ЗначениеЗаполнено(Взаимодействие) Тогда
		CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие, Объект.Ссылка);
	КонецЕсли;	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
// Процедура - обработчик события формы "ОбработкаПроверкиЗаполненияНаСервере"
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийШаблонов

//////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ШАБЛОНОВ 

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзШаблона(Команда)
	
	СсылкаНаОбъект = Объект.Ссылка;
	сПараметры = Новый Структура("Ссылка, Форма", СсылкаНаОбъект, ЭтотОбъект);
	CRM_ШаблоныОбъектовКлиент.ЗагрузитьИзШаблонаНаКлиенте(сПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляВыгрузки()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	ОбъектСтруктура = Новый Структура("ОбъектЗначение", ОбъектЗначение);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектСтруктура, УникальныйИдентификатор);
	
	Возврат Новый Структура("ЗначенияЗаполнения",Новый Структура("Объект,ТипФормы",АдресВХранилище,"ФормаДокумента"));
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыгрузитьВШаблон(Команда)
	
	ОткрытьФорму("Справочник.CRM_ШаблоныОбъектов.ФормаОбъекта",ПолучитьПараметрыДляВыгрузки(),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

// +CRM

#Область ОбработчикиИнтереса

&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, , ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.КлиентСписок) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		СтруктураОтбора.Вставить("Партнер", ЭтотОбъект.КлиентСписок);
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
		ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
		ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);		
		
		ОткрытьФорму("Документ.CRM_Интерес.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор);
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
		ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
		ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);		
		
		ОткрытьФорму("Документ.CRM_Интерес.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов[0].ВведенНаОсновании Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Удалить(0);
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияКлиент.Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка, ЭтотОбъект.CRM_ТаблицаИнтересов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(,Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало = Ложь)
	
	МассивСтрок = ЭтотОбъект.CRM_ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",ВыбранноеЗначение));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Если ВНачало Тогда
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
		Иначе
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	ИначеЕсли ВНачало Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Сдвинуть(ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]),-ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкрытьПоказатьИнтересы(Команда)
	
	Элементы.СкрытьПоказатьИнтересы.Пометка = НЕ Элементы.СкрытьПоказатьИнтересы.Пометка;
	Элементы.ГруппаCRM_ТаблицаИнтересов.Видимость = Элементы.СкрытьПоказатьИнтересы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		Отказ = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.ВведенНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПослеУдаления(Элемент)
	

	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Основной(Команда)
	
	ТекущиеДанные = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ДобавитьИнтересНаСервере(ТекущиеДанные.Ссылка, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

// -CRM
