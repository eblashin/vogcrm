
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ПараметрыЗаписиОбработчика;

// ++ VOG Солодов В.В. 21.04.2020 CRM-600
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ
// -- VOG Солодов В.В. 21.04.2020

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 24.01.2020 CRM-106
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения 				= ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ПодменюПечать;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// -- VOG Солодов В.В. 24.01.2020
	
	// ++ Харченко Д.И. №  - 10.09.2018 / 
	Параметры.Свойство("АдресДанныхДляЗаполнения", АдресДанныхДляЗаполнения);
	// -- Харченко Д.И. №  - 10.09.2018
	
	ЗаполнятьДанными = Истина;
	Если Параметры.Свойство("ЗаполнятьДанными") Тогда
		ЗаполнятьДанными = Параметры.ЗаполнятьДанными;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 28.10.2020 CRM-1000
	Если Параметры.Свойство("ДокументОснование") Тогда
		Объект.ДокументОснование = Параметры.ДокументОснование;
	КонецЕсли;
	// -- VOG Солодов В.В. 28.10.2020 CRM-1000

	//Если Параметры.Свойство("ЗаполнятьДанными") Тогда
	//	ЗаполнятьДанными = Параметры.ЗаполнятьДанными;
	//КонецЕсли;
	 Элементы.ГруппаСтраницы.ОтображениеСтраниц 		   = ОтображениеСтраницФормы.Нет;
	
	// ++ Тищенко В.В. 21.02.2019
	// + Программное создание статусов
	Если Объект.ВариантОпроса.ИспользоватьСостояниеПроцессов И НЕ Параметры.НеИспользоватьСтатусы Тогда
		//CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
		// { VOG RMV 2019-01-31
		//Элементы.КомандаПровестиИЗакрыть.Видимость = Ложь;		
		ДоступностьЭлементовФормыПоСтатусу();
		// } VOG RMV 2019-01-31		
	КонецЕсли;
	// - Программное создание статуосв
	
	// -- Тищенко В.В.
	
	Заголовок = ПолучитьЗаголовокОбъекта(Объект.ВариантОпроса, Объект.Номер, Объект.Дата, Объект.Статус, Объект.Респондент); //+ VOG Иванов С.А. 03.12.2019 ID заявки: 000000961
	
	// + Тищенко В.В.
	// Признак для определния запуска бизнес процесса
	// Для тригерра.
	Если Параметры.Свойство("СозданоИзОбъекта") Тогда
		Объект.СозданоИзОбъекта = Параметры.СозданоИзОбъекта;
	КонецЕсли;
	// - Тищенко В.В.
	
	// ++ Тищенко В.В. 29.01.2019
	// Управление видимостью реквизит Вариант опроса
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ВариантОпроса","Видимость"
								,Пользователи.ЭтоПолноправныйПользователь(Пользователи.ТекущийПользователь()));
	// -- Тищенко В.В.
	
	// ++ Тищенко В.В. 01.03.2019
	// Управление доступностью респондент
	Если ЗначениеЗаполнено(Объект.Респондент) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Респондент","ТолькоПросмотр"
										,Не Пользователи.ЭтоПолноправныйПользователь(Пользователи.ТекущийПользователь()));
	КонецЕсли;
	// -- Тищенко В.В. 
	
	// { VOG RMV 2019-02-28
	Если Параметры.Ключ.Пустая() Тогда
		Если Не Объект.ВариантОпроса.ОтключитьПроверкуУжеСуществующейАнкетыСТакимВариантом тогда
			СтатусОпроса = вогУправлениеОпросамиСервер.ПолучитьСтатусОпроса(Объект.Респондент, Объект.ВариантОпроса);
			Если НЕ СтатусОпроса = Неопределено И СтатусОпроса.Анкета <> Объект.Ссылка Тогда
				Отказ = Истина;	
				Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 по объекту %2 уже запущена: %3'"), Объект.ВариантОпроса, Объект.Респондент, СтатусОпроса.АнкетаПредставление));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// } VOG RMV 2019-02-28
	
	// ++ Тищенко В.В. 20.05.2019
	// Изменил логику отображения кнопки
	// { VOG RMV 2019-03-05 task 208
	// ++ Оригинал
	//Элементы.ЗаписатьСтандартная.Видимость = ЗначениеЗаполнено(Объект.Респондент);
	// -- Оригинал
	Если ЗначениеЗаполнено(Объект.Респондент) Тогда
		Элементы.ЗаписатьСтандартная.Видимость = НЕ Объект.СозданоИзОбъекта;
		// ++ VOG Солодов В.В. 14.06.2019 task 351
		Если CRM_МодификацияКонфигурацииПереопределяемый.ПроверкаДоступностиКнопкиЗаписиПоРолиТекущегоПользователя(ЭтотОбъект) Тогда
			Элементы.ЗаписатьСтандартная.Видимость = Истина;
		КонецЕсли;
		// -- VOG Солодов В.В. 14.06.2019
	Иначе
		Элементы.ЗаписатьСтандартная.Видимость = Ложь;
	КонецЕсли;
	// } VOG RMV 2019-03-05 task 208
	// -- Тищенко В.В. 
	
	// ++ VOG Солодов В.В. 23.01.2020 CRM-141
	ПрикреплятьФайлы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВариантОпроса, "ПрикреплятьФайлы", Истина);
	
	Если ПрикреплятьФайлы Тогда
		CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФайлыПредставление", "Видимость", Ложь);
	КонецЕсли;
	// -- VOG Солодов В.В. 23.01.2020
	
	// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
	вогОбщегоНазначенияКлиентСервер.УстановитьПодсказкуКнопкиОткрытьЗадачу(ЭтаФорма);
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ++ VOG Солодов В.В. 24.01.2020 CRM-106
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// -- VOG Солодов В.В. 24.01.2020
	
	ПодключитьОбработчикОжидания("Подключаемый_ИницализироватьДанныеОпроса", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// ++ VOG Солодов В.В. 24.01.2020 CRM-106
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// -- VOG Солодов В.В. 24.01.2020
	
	// + Настройки видимости бизнес процессов
//START Кайдашов 09/08/19 500	
	//Если ЗначениеЗаполнено(Объект.ВариантОпроса) И Объект.ВариантОпроса.ИспользоватьБизнесПроцесс Тогда
	//	скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервереПоНастройкеБизнесПроцесса(ЭтаФорма, ТекущийОбъект.Ссылка,
	//													Объект.ВариантОпроса.НастройкаБизнесПроцесса, Элементы.ГруппаЗапускБизнесПроцесса);
	//Иначе
	//	скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);	
	//КонецЕсли;
//END Кайдашов 500	
	// - Настройка видимости бизнес процессов
	
	// + Видимость статусов
	ВидимостьСтатусаСогласования();
	// - Видимость статусов	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьДоступностьПоЗадачамБизнесПроцесса(Анкета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Анкета",Анкета);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка КАК Ссылка
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	НЕ ЗадачаИсполнителя.Выполнена
	               |	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	               |	И Выразить(ЗадачаИсполнителя.БизнесПроцесс.Предмет как Документ.ВогАнкета) = &Анкета
				   |	И НЕ ЗадачаИсполнителя.БизнесПроцесс.ПометкаУдаления
	               |	И ЗадачаИсполнителя.вогБлокироватьПредметДляРедактирования
	               |	И ЗадачаИсполнителя.БизнесПроцесс.Предмет ССЫЛКА Документ.вогАнкета";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// { VOG RMV 2019-03-18 task 250
	Если ПропуститьПроверкуДублей = Истина Тогда
		Возврат;	
	КонецЕсли;	
	// } VOG RMV 2019-03-18 task 250
	
	// ++ Тищенко В.В. 23.01.2019
	// Проверка на дубль
	ПроверитьНаДубль(Отказ);
	// -- Тищенко В.В.
	
	// ++ VOG Солодов В.В. 10.06.2019 task 351
	Если ТипЗнч(ПараметрыЗаписиОбработчика) = Тип("Структура") Тогда
		Для Каждого ПараметрЗаписиОбработчика Из ПараметрыЗаписиОбработчика Цикл
			ПараметрыЗаписи.Вставить(ПараметрЗаписиОбработчика.Ключ, ПараметрЗаписиОбработчика.Значение);
		КонецЦикла;
	КонецЕсли;
	// -- VOG Солодов В.В. 10.06.2019
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//ЭлементарныеВопросы
	
	ВыполнитьЗаполнениеРеквизитовОбъекта(ТекущийОбъект);
		
	Если РеквизитыВариантаОпроса.ИспользоватьДополнительныеРеквизиты Тогда
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
		// Конец СтандартныеПодсистемы.Свойства
	КонецЕсли;
	
	
	Если ПараметрыЗаписи.Свойство("ЗаписатьКлассификаторы") И ПараметрыЗаписи.ЗаписатьКлассификаторы Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписатьКлассификаторы", Истина);
	КонецЕсли;
		
	// { VOG RMV 2019-02-06
	Проводить = (Проводить ИЛИ ПараметрыЗаписи.Свойство("ЗаписатьКлассификаторы") И ПараметрыЗаписи.ЗаписатьКлассификаторы);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Проводить", Проводить);
	// } VOG RMV 2019-02-06
	
	// ++ Тищенко В.В. 20.05.2019
	// Если запись по кнопке тогда не стратовать триггер
	Если НЕ Объект.СозданоИзОбъекта Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НеЗапускатьТриггер",Истина);
	КонецЕсли;
	// -- Тищенко В.В. 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
//START Кайдашов 09/08/19 500	
	//скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);	
//END Кайдашов
	Заголовок = ПолучитьЗаголовокОбъекта(Объект.ВариантОпроса, Объект.Номер, Объект.Дата, Объект.Статус, Объект.Респондент); //+ VOG Иванов С.А. 03.12.2019 ID заявки: 000000961
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработкаСтрокиВопроса" Тогда
		ОбработатьВходящиеДанныеСтроки(Параметр);	
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 23.01.2020 CRM-141
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" Тогда //И Объект.БизнесПроцесс = Параметр 
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл" 
		И (ТипЗнч(Источник) = Тип("СправочникСсылка.вогАнкетаПрисоединенныеФайлы")
			Или ТипЗнч(Источник) = Тип("Массив") 
			И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.вогАнкетаПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	КонецЕсли;
	// -- VOG Солодов В.В. 23.01.2020
	
КонецПроцедуры

// ++ VOG Солодов В.В. 09.07.2020 CRM-572
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДокументОснование", 	Объект.ДокументОснование);
	ПараметрыОповещения.Вставить("Предмет", 			Объект.Респондент);
	ПараметрыОповещения.Вставить("ВариантОпроса", 		Объект.ВариантОпроса);
	
	Оповестить("Документ.вогАнкета.Запись", ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры
// -- VOG Солодов В.В. 09.07.2020 CRM-572

// ++ VOG Солодов В.В. 07.06.2021 DEV-618
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Респондент) Тогда
		Возврат;
	КонецЕсли;
	
	ОсвободитьФайлыРеспондента(Объект.Респондент);
	
КонецПроцедуры // -- VOG Солодов В.В. 07.06.2021 DEV-618

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПредыдущийВопрос(Команда)
	ИзменитьСтраницуВопроса("Назад");	
КонецПроцедуры

&НаКлиенте
Процедура СледующийВопрос(Команда)
	ИзменитьСтраницуВопроса("Вперед");	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКлассификаторы(Команда)
	
	ОписаниеОповещенияОтветМодифицированности = Новый ОписаниеОповещения("ОписаниеОповещенияОтветМодифицированности", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещенияОтветМодифицированности, "Сохранить изменения, провести и записать классификаторы?", РежимДиалогаВопрос.ДаНет,,, "Запись классификаторов");
		
КонецПроцедуры

// ++ Тищенко В.В.
&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Записать(Новый Структура("РежимЗаписи",ПредопределенноеЗначение("РежимЗаписиДокумента.Запись")));
	
КонецПроцедуры // -- Тищенко В.В.

// ++ VOG Солодов В.В. 06.04.2020 CRM-470
&НаКлиенте
Процедура КомандаИнструкция(Команда)
	
	НавигационнаяСсылка = РеквизитыВариантаОпроса.СсылкаНаИнструкцию;
	
	Если ФайловаяСистемаСлужебныйКлиент.ЭтоВебСсылка(НавигационнаяСсылка)
		Или ОбщегоНазначенияСлужебныйКлиент.ЭтоНавигационнаяСсылка(НавигационнаяСсылка) Тогда
		СтрокаЗапуска = НавигационнаяСсылка;
	Иначе
		СтрокаЗапуска = "http://" + НавигационнаяСсылка;
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СтрокаЗапуска);
	
КонецПроцедуры // -- VOG Солодов В.В. 06.04.2020

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВариантОпросаПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ИницализироватьДанныеОпроса", 0.1, Истина);
	
	Заголовок = ПолучитьЗаголовокОбъекта(Объект.ВариантОпроса, Объект.Номер, Объект.Дата, Объект.Статус, Объект.Респондент); //+ VOG Иванов С.А. 03.12.2019 ID заявки: 000000961
	
	// + Программное создание статусов
	Если Параметры.Ключ.Пустая() Тогда
		ОбновитьСтатусыПриСоздании();
	КонецЕсли;
	// - Программное создание статуосв	
	
	// + Видимость статусов
	ВидимостьСтатусаСогласования();
	// - Видимость статусов
	
КонецПроцедуры

&НаКлиенте
Процедура РеспондентПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ИницализироватьДанныеОпроса", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделАнкетыПереключательПриИзменении(Элемент)
	
	УстановитьАктивнуюСтраницуАнкеты(ЭтаФорма);
	УстановитьДоступностьКнопокДалее(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРазвернутьРазделыНажатие(Элемент)
	
	РазделыРазвернуты = НЕ РазделыРазвернуты;
	
	Элементы.ГруппаРазделыАнкеты.Видимость = РазделыРазвернуты;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОпросаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Респондент) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытия = Новый Структура;
		
		ТипРеспондента = ПолучитьТипРеспондента(Объект.Респондент);
		
		ФормаВыбора = ПолучитьФорму("ПланВидовХарактеристик.вогВариантыОпросов.ФормаВыбора", ПараметрыОткрытия, Элемент);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФормаВыбора.Список, "ТипыРеспондента.ТипРеспондента", ТипРеспондента);
		
		ФормаВыбора.Открыть();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВариантОпросаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
КонецПроцедуры

// ++ VOG Солодов В.В. 23.01.2020 CRM-141
&НаКлиенте
Процедура ФайлыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ТекстПредупреждения = Нстр("ru = 'Бизнес-процесс не записан. Добавление файлов невозможно!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла", 			Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр", 			ЭтотОбъект.ТолькоПросмотр);
	ПараметрыФормы.Вставить("СкрытьКнопкиИзменения", 	Истина);
	
	Если вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка) Тогда
		ФормаИмя = "ОбщаяФорма.вогФормаУправленияПрисоединеннымиФайлами";
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Присоединенные файлы'"))
	Иначе	
		ФормаИмя = "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы";
	КонецЕсли;
	
	ОткрытьФорму(ФормаИмя, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры // -- VOG Солодов В.В. 23.01.2020

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

&НаКлиенте
Процедура Подключаемый_ИницализироватьДанныеОпроса()
	
	ИницализироватьДанныеОпросаКлиент();	
	
КонецПроцедуры // Подключаемый_ИницализироватьДанныеОпроса()

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			//ПодключитьОбработчикОжидания("ВыполнитьОбработкуДанныхОпросаКлиент",2,Истина);
			ВыполнитьОбработкуДанныхОпроса();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНетДанных;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// ++ Харченко Д.И. №  - 07.09.2018 / был один Подключаемый_ЗапретМодификацииСоставаНабораВопроса

&НаКлиенте
Процедура Подключаемый_ЭлементарныйВопросПриИзменении(Элемент)
	
	 
	
	// ++ Солодов В.В. 13.02.2019
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Вопрос", Элемент.Имя);
	СтруктураОтбора.Вставить("ВидСобытия", 0);
	
	МассивОбработчиков = ТаблицаОбработчикиЭлементарныхВопросов.НайтиСтроки(СтруктураОтбора);
	
	
	//*** Описание
	//*** 18 июня 2019 г.
	//*** Блашин Евгений Игоревич VOG Начало
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Вопрос", Элемент.Имя);
	мсвСтрокВопроса = ТаблицаЭлементарныеВопросы.НайтиСтроки(СтруктураОтбора);	
	
	Если мсвСтрокВопроса.Количество() Тогда
		мсвСтрокВопроса[0].ОтветПолучен = Истина;
	КонецЕсли; 
	
	//*** Блашин Евгений Игоревич VOG Окончание
		
	Если МассивОбработчиков.Количество() > 0 Тогда
		
		Если МассивОбработчиков[0].НаСервере Тогда
			
			Подключаемый_ЭлементарныйВопросПриИзмененииСервер(Элемент.Имя, МассивОбработчиков[0].Обработчик);
			
		Иначе
			
			Попытка
				
				Выполнить(МассивОбработчиков[0].Обработчик);
								
			Исключение
				
				ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика при изменении'") + ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	// -- Солодов В.В.
	
	// ++ VOG Солодов В.В. 18.11.2019 task 888
	ОчиститьЗначенияЗависимыхПолей(Элемент.Имя);
	// -- VOG Солодов В.В. 18.11.2019
	
	ПересчитатьОтображенияПолейПоУсловиям(Элемент);
	
КонецПроцедуры

// ++ Солодов В.В. 13.02.2019
&НаСервере
Процедура Подключаемый_ЭлементарныйВопросПриИзмененииСервер(Знач ИмяЭлемента, Знач Обработчик)
	
	Попытка
		
		Выполнить(Обработчик);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика на сервере при изменении'") + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	
КонецПроцедуры
// -- Солодов В.В.


//START Кайдашов 29/07/19 481
&НаКлиенте
Процедура Подключаемый_ЭлементарныйВопросНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	сОтбора = Новый Структура;
	сОтбора.Вставить("Вопрос", Элемент.Имя);
	сОтбора.Вставить("ВидСобытия", 1);
	
	МассивОбработчиков = ТаблицаОбработчикиЭлементарныхВопросов.НайтиСтроки(сОтбора);
	Если МассивОбработчиков.Количество() > 0 Тогда
		Если МассивОбработчиков[0].НаСервере Тогда
			Подключаемый_ЭлементарныйВопросНачалоВыбораСервер(Элемент.Имя, МассивОбработчиков[0].Обработчик,ДанныеВыбора,СтандартнаяОбработка);
		Иначе
			Попытка
				Выполнить(МассивОбработчиков[0].Обработчик);
			Исключение
				ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика Начало выбора'") + ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ЭлементарныйВопросНачалоВыбораСервер(Знач ИмяЭлемента, Знач Обработчик, ДанныеВыбора, СтандартнаяОбработка)
	Попытка
		Выполнить(Обработчик);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика на сервере при изменении'") + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры
//END Кайдашов 481

&НаКлиенте
Процедура Подключаемый_ВидКонтактнойИнформацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	
	Если Строки.Количество() Тогда
		
		СтрокаИнформации = Строки.Получить(0);
		
	Иначе 
		
		СтрокаИнформации = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		СтрокаИнформации.ИмяРеквизита = Элемент.Имя;
		
	КонецЕсли;
	
	ПоискВопроса = ТаблицаОписания.НайтиСтроки(Новый Структура("ПутьКДанным", Элемент.Имя));
	
	Если НЕ ПоискВопроса.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПоискВопроса = ПоискВопроса.Получить(0);
	СтрокаИнформации.Вид = ПолучитьРеквизитОбъекта(ПоискВопроса.Ссылка, "CRM_ВидКонтактнойИнформации");
	
	Если ВидКонтактнойИнформацииРедактируетсяВотдельнойФорме(СтрокаИнформации.Вид) Тогда
		CRM_УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВидКонтактнойИнформацииОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	
	Если Строки.Количество() Тогда
		
		СтрокаИнформации = Строки.Получить(0);
		
	Иначе 
		
		СтрокаИнформации = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		СтрокаИнформации.ИмяРеквизита = Элемент.Имя;
		
	КонецЕсли;
	
	ПоискВопроса = ТаблицаОписания.НайтиСтроки(Новый Структура("ПутьКДанным", Элемент.Имя));
	
	Если НЕ ПоискВопроса.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПоискВопроса = ПоискВопроса.Получить(0);
	СтрокаИнформации.Вид = ПолучитьРеквизитОбъекта(ПоискВопроса.Ссылка, "CRM_ВидКонтактнойИнформации");
	
	ЗначениеРеквизита = ЭтаФорма[ПоискВопроса.ПутьКДанным];
	
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		ПредставлениеАдреса = "";
		Если СтрокаИнформации.Свойство("Долгота") ИЛИ СтрокаИнформации.Свойство("Широта") Тогда
			//Проверим что обе не равны 0, надеемся что адреса с координатами 0,0 не будет)))
			Если СтрокаИнформации.Долгота <> 0  ИЛИ СтрокаИнформации.Широта <> 0 Тогда
				ПредставлениеАдреса = Формат(СтрокаИнформации.Широта, "ЧРД=.") + ", " + Формат(СтрокаИнформации.Долгота, "ЧРД=.");
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыГеокода = Новый Структура;
		ПараметрыГеокода.Вставить("СкрытьПанельАдресов", Истина);
		ПараметрыГеокода.Вставить("Адрес", ?(ПустаяСтрока(ПредставлениеАдреса),ЗначениеРеквизита,ПредставлениеАдреса));
		ПараметрыГеокода.Вставить("КоличествоОтветов", 1);

		
		ОткрытьФорму("Обработка.вогГеокодирование.Форма.Форма", ПараметрыГеокода, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 27.01.2021 DEV-64
&НаКлиенте
Процедура Подключаемый_ВидКонтактнойИнформацииОкончаниеВводаТекста(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура("ИмяРеквизита", Элемент.Имя);
	
	Если Не ПустаяСтрока(Элемент.ТекстРедактирования)
		И КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
		
		СтрокаИнформации = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		СтрокаИнформации.ИмяРеквизита = Элемент.Имя;
		СтрокаИнформации.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Вопрос", Элемент.Имя);
		
		НайденныеСтроки = ТаблицаЭлементарныеВопросы.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтрокаИнформации.Вид = НайденнаяСтрока.CRM_ВидКонтактнойИнформации;
		КонецЦикла;
		
	КонецЕсли;
	
	CRM_УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	Подключаемый_ОбновитьКонтактнуюИнформацию(СтруктураОтбора);
	
КонецПроцедуры
// -- VOG Солодов В.В. 27.01.2021 DEV-64

&НаКлиенте
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ИмяРеквизита", Результат.ИмяРеквизита);
	Строки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	
	Если НЕ Строки.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// +++ VOG Кулаков П.Л. 03.12.2020 CRM-1005
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Вопрос", Результат.ИмяРеквизита);
	мсвСтрокВопроса = ТаблицаЭлементарныеВопросы.НайтиСтроки(СтруктураОтбора);	
	
	Если мсвСтрокВопроса.Количество() Тогда
		мсвСтрокВопроса[0].ОтветПолучен = Истина;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	СтрокаИнформации = Строки.Получить(0);
	
	ЭтаФорма[Результат.ИмяРеквизита] = СтрокаИнформации.Представление;
	
	ПересчитатьОтображенияПолейПоУсловиям(Элементы[Результат.ИмяРеквизита]);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОписаниеОповещения(Значение, ДополнительноеЗначение) Экспорт 
	
	Если ТипЗнч(ДополнительноеЗначение) = Тип("Структура") Тогда
		
		Если ДополнительноеЗначение.Свойство("КодВыполнения") 
			И ЗначениеЗаполнено(ДополнительноеЗначение.КодВыполнения) Тогда
			
			Если ДополнительноеЗначение.Свойство("НаСервере") Тогда
				
				Подключаемый_ОписаниеОповещенияСервер(Значение, ДополнительноеЗначение);
				
			Иначе 
				
				Если ДополнительноеЗначение.Свойство("Параметр1") Тогда
					Параметр1 = ДополнительноеЗначение.Параметр1;
				КонецЕсли;
				Если ДополнительноеЗначение.Свойство("Параметр2") Тогда
					Параметр2 = ДополнительноеЗначение.Параметр2;
				КонецЕсли;
				Если ДополнительноеЗначение.Свойство("Параметр3") Тогда
					Параметр3 = ДополнительноеЗначение.Параметр3;
				КонецЕсли;
				
				Попытка
					
					Выполнить(ДополнительноеЗначение.КодВыполнения);
					
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика опиания оповещения'") + ОписаниеОшибки();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецПопытки;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_ОписаниеОповещенияСервер(Значение, ДополнительноеЗначение) Экспорт 
	
	Если ДополнительноеЗначение.Свойство("Параметр1") Тогда
		Параметр1 = ДополнительноеЗначение.Параметр1;
	КонецЕсли;
	Если ДополнительноеЗначение.Свойство("Параметр2") Тогда
		Параметр2 = ДополнительноеЗначение.Параметр2;
	КонецЕсли;
	Если ДополнительноеЗначение.Свойство("Параметр3") Тогда
		Параметр3 = ДополнительноеЗначение.Параметр3;
	КонецЕсли;

	Попытка
		
		Выполнить(ДополнительноеЗначение.КодВыполнения);
				

	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика опиания оповещения'") + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НабораВопросаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		
	КодПоУмолчанию = "Отказ = Истина;";
	
	ОбщийВыполнитьКодОбработчика("ПередНачаломДобавления", Элемент,,, Копирование,, Отказ,, КодПоУмолчанию);
	
КонецПроцедуры // Подключаемый_ПередНачаломДобавления()

&НаКлиенте
Процедура Подключаемый_НабораВопросаПередУдалением(Элемент, Отказ)
	
	КодПоУмолчанию = "Отказ = Истина;";
	
	ОбщийВыполнитьКодОбработчика("ПередУдалением", Элемент,,,,, Отказ,, КодПоУмолчанию);
	
КонецПроцедуры // Подключаемый_ПередНачаломДобавления()

&НаКлиенте
Процедура Подключаемый_НабораВопросаПриИзменении(Элемент)
	
	ОбщийВыполнитьКодОбработчика("ПриИзменении", Элемент);

	ПересчитатьОтображенияПолейПоУсловиям(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НабораВопросаВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ОбщийВыполнитьКодОбработчика("ВыборЗначения", Элемент,,,,СтандартнаяОбработка,, Значение);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НабораВопросаПередНачаломИзменения(Элемент, Отказ)
	
	ОбщийВыполнитьКодОбработчика("ПередНачаломИзменения", Элемент,,,,, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НабораВопросаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОбщийВыполнитьКодОбработчика("ПередОкончаниемРедактирования", Элемент, НоваяСтрока, ОтменаРедактирования,,, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НабораВопросаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбщийВыполнитьКодОбработчика("ПриОкончанииРедактирования", Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НабораВопросаПослеУдаления(Элемент)
	
	ОбщийВыполнитьКодОбработчика("ПослеУдаления", Элемент);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НабораВопросаОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ОбщийВыполнитьКодОбработчика("ОбработкаЗаписиНового",,,,, СтандартнаяОбработка,,,, Источник);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НабораВопросаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбщийВыполнитьКодОбработчика("ПриНачалеРедактирования", Элемент, НоваяСтрока,, Копирование);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НабораВопросаПриАктивизацииСтроки(Элемент)
	
	ОбщийВыполнитьКодОбработчика("ПриАктивизацииСтроки", Элемент);

КонецПроцедуры // Подключаемый_НабораВопросаПриАктивизацииСтроки()

&НаКлиенте
Процедура ОбщийВыполнитьКодОбработчика(ИмяОбработчика, 
										Элемент=Неопределено,
										НоваяСтрока=Неопределено,
										ОтменаРедактирования=Неопределено,
										Копирование=Неопределено,
										СтандартнаяОбработка=Неопределено,										
										Отказ=Неопределено,
										Значение=Неопределено,
										КодПоУмолчанию=Неопределено,
										Источник=Неопределено,
										ВыбраннаяСтрока=Неопределено,
										Поле=Неопределено)
										
	Если НЕ Элемент=Неопределено Тогда										
		ИдентификаторВопроса = СтрЗаменить(Элемент.Имя, "Таблица_", "");
		ИмяТаблицы 			 = Элемент.Имя;
		СхемаДанныхВопроса   = СхемаДанныхВопросов[ИдентификаторВопроса];	
	КонецЕсли;
	
	Обработчик = ПолучитьОбработчикСобытия(СхемаДанныхВопроса, ИмяОбработчика, КодПоУмолчанию);
	
	Если ЗначениеЗаполнено(Обработчик) Тогда
		
		Попытка
			
			Выполнить(Обработчик);
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика ""Таблица вопроса """ + ИмяОбработчика+ """""'")+ ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

// -- Харченко Д.И. №  - 07.09.2018

&НаКлиенте
Процедура Подключаемый_НабораВопросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Таблица_", "");
	
	Если СтрНайти(Поле.Имя, "НаличиеПрисоединенныеФайлы") > 0 Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;	
		КонецЕсли;

		СтандартнаяОбработка = Ложь;
		Если Объект.Ссылка.Пустая() Тогда
			ТекстПредупреждения = Нстр("ru = 'Анкета не записана. Редактирование файлов невозможно!'");
			ПоказатьПредупреждение(,ТекстПредупреждения, 10);
			Возврат;
		КонецЕсли;
		
		ЕстьВыбранныеВарианты = Ложь;
		
		ДанныеВариантовОтветов = СхемаДанныхВопросов[ИмяРеквизита].СтруктураВариантовОтветов;
		Для каждого КлючЗначение Из ДанныеВариантовОтветов Цикл			
			Если ТекущиеДанные[КлючЗначение.Ключ] = Истина Тогда
				ЕстьВыбранныеВарианты = Истина;
			
			КонецЕсли;
		
		КонецЦикла;
		
		Если Не ЕстьВыбранныеВарианты Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для редактирования файлов необходимо указать вариант ответа.'"));
			Возврат;
		
		КонецЕсли;
		
		ИмяКолонкиФайлов = "ПрисоединенныеФайлы" + ИмяРеквизита;
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ПослеРедактированияФайловСтрокиВопроса", 
			ЭтотОбъект, Новый Структура("ТекущиеДанные, ИмяКолонкиФайлов", ТекущиеДанные, ИмяКолонкиФайлов)
		);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДокументСсылка", Объект.Ссылка);
		ПараметрыФормы.Вставить("МассивФайлов"  , МассивПрисоединенныхФайловСтрокиВопроса(ТекущиеДанные[ИмяКолонкиФайлов]));
		
		ОткрытьФорму("Документ.вогАнкета.Форма.ФормаРедактированияПрисоединенныхФайлов",
			ПараметрыФормы,
			ЭтаФорма,
			УникальныйИдентификатор,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе//Если СтрНайти(Поле.Имя, "ОбъектОпроса") > 0 Тогда

		ОбщийВыполнитьКодОбработчика("Выбор", Элемент,,,, СтандартнаяОбработка,,,,, ВыбраннаяСтрока, Поле);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НабораВопросаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьДанныеВыбораНабораВопроса(Элемент.Имя, ВыбранноеЗначение);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеРедактированияФайловСтрокиВопроса(РезультатРедактирования, Контекст) Экспорт

	Если РезультатРедактирования = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;
	
	ТаблицаПрисоединенныеФайлы = Контекст.ТекущиеДанные[Контекст.ИмяКолонкиФайлов];
	ТаблицаПрисоединенныеФайлы.Очистить();
	
	Для каждого ПрисоединенныйФайл Из РезультатРедактирования.ПрисоединенныеФайлы Цикл
		НоваяСтрокаФайла = ТаблицаПрисоединенныеФайлы.Добавить(); 	
		НоваяСтрокаФайла.ПрисоединенныйФайл  = ПрисоединенныйФайл;
		
	КонецЦикла;
	
	Контекст.ТекущиеДанные["Наличие" + Контекст.ИмяКолонкиФайлов] = ТаблицаПрисоединенныеФайлы.Количество();	
	
КонецПроцедуры // Подключаемый_ПослеРедактированияФайловСтрокиВопроса()

&НаКлиенте
Процедура Подключаемый_ВариантОтветаПриИзменении(Элемент)
	
	// ++ Солодов В.В. Добавил попытку и действие в исключении
	Попытка
		
		ЭлементТаблица = Элемент.Родитель.Родитель;
	    ТекущиеДанные = ЭлементТаблица.ТекущиеДанные;
		
	Исключение
		
		ЭлементТаблица = Элемент.Родитель;
	    ТекущиеДанные = ЭлементТаблица.ТекущиеДанные;
		
	КонецПопытки;
	// -- Солодов. В.В.
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ЭлементТаблица.Имя, "Таблица_", "");
	
	ДанныеВариантовОтветов = СхемаДанныхВопросов[ИмяРеквизита].СтруктураВариантовОтветов;	
	ДанныеВариантаОтвета   = ДанныеВариантовОтветов.Получить(Элемент.Имя);
	Если ДанныеВариантаОтвета = Неопределено Тогда
		Возврат;
	
	КонецЕсли;
	
	Если ДанныеВариантаОтвета.ТипОтвета = ПредопределенноеЗначение("Перечисление.вогТипыОтветов.Одиночный") Тогда
		Для каждого КлючЗначение Из ДанныеВариантовОтветов Цикл
			Если КлючЗначение.Ключ = Элемент.Имя Тогда
				Продолжить;
				
			КонецЕсли;
			
			ТекущиеДанные[КлючЗначение.Ключ] = Ложь;	
		
		КонецЦикла;
	
	КонецЕсли;		
	
КонецПроцедуры // Подключаемый_ВариантОтветаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ВводДополнительнойИнформации(ТекущиеДанные, ДанныеВариантаОтвета)

	Если ДанныеВариантаОтвета.ДополнительнаяИнформация.Количество() > 0 Тогда	  	  
		ИмяКолонкиДополнительнаяИнформация = "ДополнительнаяИнформацияВариантОтвета_" + ИдентификаторЭлемента(ДанныеВариантаОтвета.ВариантОтвета);
		ТаблицаДополнительнаяИнформация = ТекущиеДанные[ИмяКолонкиДополнительнаяИнформация];
	  
	  	Оповещение = Новый ОписаниеОповещения("Подключаемый_ВводДополнительнойИнформацииЗавершение", ЭтотОбъект, ТаблицаДополнительнаяИнформация);
	   	ОткрытьФорму("Справочник.вогВариантыОтветов.Форма.ФормаРедактированияДополнительнойИнформации", 
			Новый Структура("ВариантОтвета, ТаблицаДополнительнаяИнформация", ДанныеВариантаОтвета.ВариантОтвета, ТаблицаДополнительнаяИнформация),
			ЭтотОбъект,
			УникальныйИдентификатор,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;

КонецПроцедуры // Подключаемый_ВводДополнительнойИнформации()

&НаКлиенте
Процедура Подключаемый_ВводДополнительнойИнформацииЗавершение(Результат, ТаблицаДополнительнаяИнформация) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДополнительнаяИнформация Из ТаблицаДополнительнаяИнформация Цикл
		СтрокаДополнительнаяИнформация.Значение = Результат.Получить(СтрокаДополнительнаяИнформация.Свойство); 
	КонецЦикла;
	
КонецПроцедуры // Подключаемый_ВводДополнительнойИнформацииЗавершение()

&НаКлиенте
Процедура Подключаемый_СтрокаПоискаВопросаПриИзменении(Элемент)
	УстановитьОтборСтрок(СтрЗаменить(Элемент.Имя, "СтрокаПоиска_", ""), Истина);
КонецПроцедуры // Подключаемый_СтрокаПоискаВопросаПриИзменении()

&НаКлиенте
Процедура Подключаемый_СтрокаОтбораВопросаПриИзменении(Элемент)
	УстановитьОтборСтрок(СтрЗаменить(Элемент.Имя, "СтрокаОтбора_", ""));
КонецПроцедуры // Подключаемый_СтрокаПоискаВопросаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОбработчикКомандыВопроса(Команда)

	СтрокаКоманды = НайтиСтрокуКоманды(ЭтотОбъект, Команда.Имя);
	
	Если СтрокаКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаКоманды.Обработчик) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Команда.Имя, "__");
	
	//Переменные
	ИдентификаторВопроса = МассивИмени[МассивИмени.ВГраница()];
	ИмяТаблицы 			 = "Таблица_" + ИдентификаторВопроса;
	СхемаДанныхВопроса   = СхемаДанныхВопросов[ИдентификаторВопроса];	
	
	Параметр1			 = СтрокаКоманды.Параметр1;
	Параметр2			 = СтрокаКоманды.Параметр2;
	Параметр3			 = СтрокаКоманды.Параметр3;
	Параметр4			 = СтрокаКоманды.Параметр4;
	Параметр5			 = СтрокаКоманды.Параметр5;
		
	Попытка
	    Выполнить(СтрокаКоманды.Обработчик);
	Исключение
	 	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить команду. Причина: '") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
КонецПроцедуры // Подключаемый_ОбработчикКомандыВопроса()

&НаКлиенте
Процедура УстановитьОтборСтрок(ИдентификаторТаблицы, ПроизволнаяСтрока = Ложь)

	ИмяТаблицы 		= "Таблица_" + ИдентификаторТаблицы;
	СтруктураОтбора = Новый Структура;
	
	ИмяОписания = "СтрокаПоиска_" + ИдентификаторТаблицы;
	Если Элементы.Найти(ИмяОписания) <> Неопределено
	  И ЗначениеЗаполнено(ЭтотОбъект[ИмяОписания]) Тогда
		СтруктураОтбора.Вставить("ОбъектОпроса", ЭтотОбъект[ИмяОписания]); 	
	КонецЕсли;
	
	ИмяОписания = "СтрокаОтбора_" + ИдентификаторТаблицы;
	Если Элементы.Найти(ИмяОписания) <> Неопределено
	  И ЗначениеЗаполнено(ЭтотОбъект[ИмяОписания]) Тогда
		СтруктураОтбора.Вставить(ЭтотОбъект[ИмяОписания], Истина); 	
	КонецЕсли;
	
	Если СтруктураОтбора.Количество() = 0 Тогда
		ОтборСтрок = Неопределено;
	Иначе	
		ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	КонецЕсли;
	
	Элементы[ИмяТаблицы].ОтборСтрок = ОтборСтрок;
	ПослеФормированияОтбораСтрок(ИдентификаторТаблицы, ИмяОписания, ОтборСтрок, ПроизволнаяСтрока);
	
КонецПроцедуры // УстановитьОтборСтрок()

&НаКлиенте
Процедура ПослеФормированияОтбораСтрок(ИдентификаторТаблицы, ИмяОписания, Знач ОтборСтрок, ПроизволнаяСтрока)

	Если ПроизволнаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	СхемаДанныхВопроса = СхемаДанныхВопросов[ИдентификаторТаблицы];
	Если СхемаДанныхВопроса = Неопределено Тогда
		Возврат;    
	КонецЕсли;
	
	Если Не СхемаДанныхВопроса.СтруктураВопроса.ИспользоватьОтборПоВариантамОтвета Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого КлючЗначение Из СхемаДанныхВопроса.СтруктураВариантовОтветов Цикл
		Элемент = Элементы.Найти(КлючЗначение.Ключ);	
		Если Элемент = Неопределено Тогда
			Продолжить;
		
		КонецЕсли;
		
		ЗначениеВидимости = ?(ОтборСтрок = Неопределено, Истина, ОтборСтрок.Свойство(КлючЗначение.Ключ));
		Элемент.Видимость = ЗначениеВидимости;
		
		ОписаниеВариантаОтвета = КлючЗначение.Значение;
		ИмяКолонки = "ВариантОтвета_" + ИдентификаторЭлемента(ОписаниеВариантаОтвета.ВариантОтвета);
		Если ОписаниеВариантаОтвета.ДополнительнаяИнформация.Количество() > 0 Тогда
			Для каждого ОписаниеСвойства Из ОписаниеВариантаОтвета.ДополнительнаяИнформация Цикл
				ИмяКолонкиСвойства = "ДополнительнаяИнформация" + ИмяКолонки + "_" + ИдентификаторЭлемента(ОписаниеСвойства.Свойство);
				ЭлементСвойства = Элементы.Найти(ИмяКолонкиСвойства);	
				Если ЭлементСвойства = Неопределено Тогда
					Продолжить;
				
				КонецЕсли;
				
				ЭлементСвойства.Видимость = ?(ОтборСтрок = Неопределено, Ложь, ЗначениеВидимости);
				
			КонецЦикла;
		
		КонецЕсли;
		
		Элементы[ИмяКолонки].Видимость = ?(ОтборСтрок = Неопределено, Истина, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры // ПослеФормированияОтбораСтрок()

&НаКлиенте
Процедура Подключаемый_СоздатьОбъектОпроса(Команда)

	ИмяВопроса = СтрЗаменить(Команда.Имя, "СоздатьОбъектОпроса_", "");
	ИмяТаблицы = "Таблица_" + ИмяВопроса;
	
	СтруктураВопроса = СхемаДанныхВопросов[ИмяВопроса].СтруктураВопроса;
	Если СтруктураВопроса.ОписанияОбъектаОпроса.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не определен тип объекта.'"));
		Возврат;	
	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Оповещение = Новый ОписаниеОповещения("СоздатьОбъектОпросаЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормы, ИмяТаблицы", ПараметрыФормы, ИмяТаблицы));
	Если СтруктураВопроса.ОписанияОбъектаОпроса.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(Оповещение, СтруктураВопроса.ОписанияОбъектаОпроса[0].ИмяФормы);
		
	Иначе
		СписокВыбора = Новый СписокЗначений;
		Для каждого ОписаниеОбъектаОпроса Из СтруктураВопроса.ОписанияОбъектаОпроса Цикл
			СписокВыбора.Добавить(ОписаниеОбъектаОпроса.ИмяФормы, ОписаниеОбъектаОпроса.Представление);
		КонецЦикла;
		
		СписокВыбора.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выбор типа данных'"));
		
	КонецЕсли;	
	
КонецПроцедуры // Подключаемый_СоздатьОбъектОпроса()

&НаКлиенте
Процедура СоздатьОбъектОпросаЗавершение(ИмяФормыОбъекта, Контекст) Экспорт

	Если ИмяФормыОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыОбъекта, Контекст.ПараметрыФормы, 
		Элементы[Контекст.ИмяТаблицы], УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры // СоздатьОбъектОпросаЗавершение()

#Область ПроцедурыПодсистемыСвойств

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект);	
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

#КонецОбласти

#КонецОбласти

#Область Оповещения

&НаКлиенте
Процедура ОписаниеОповещенияОтветМодифицированности(Ответ, Доп) Экспорт
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровЗаписи = Новый Структура;
	
	СтруктураПараметровЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	СтруктураПараметровЗаписи.Вставить("ЗаписатьКлассификаторы", Истина);
		
	Записать(СтруктураПараметровЗаписи);
	
КонецПроцедуры // ОписаниеОповещенияОтветМодифицированности	

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаКлиенте
Процедура ИницализироватьДанныеОпросаКлиент()

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПроцессФормирования;
	
	// ++ Солодов В.В. 14.02.2019
	ТаблицаОбработчикиЭлементарныхВопросов.Очистить();
	// -- Солодов В.В.
	
	ТаблицаОбработчикиКлассификаторов.Очистить(); //+ VOG Иванов С.А. 14.10.2019 task: 706
	
	Результат = ИницализироватьДанныеОпроса();
	// ++ Тищенко В.В. 17.01.2019
	// Закоментировал Проверку выполненеия
	// Проврека задания в подключаемомом обработчике
	
	Если  Не Результат.ЗаданиеВыполнено Тогда
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);

	КонецЕсли;
	// -- Тищенко В.В.
	
КонецПроцедуры // ИницализироватьДанныеОпросаКлиент()

//++ VOG Иванов С.А. 18.10.2019 task: 706
&НаСервереБезКонтекста
Функция ПолучитьОбработчикПриОткрытии(ВариантОпроса)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантОпроса, "ОбработчикПриОткрытии");	
КонецФункции

&НаСервере
Процедура Подключаемый_ОбработчикПриОткрытииСервер(Знач Обработчик)
	
	Попытка
		
		Выполнить(Обработчик);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика на сервере при открытии'") + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	
КонецПроцедуры
//-- VOG Иванов С.А. 18.10.2019 task: 706

&НаСервере
Функция ИницализироватьДанныеОпроса()
	
	РеквизитыВариантаОпроса = вогУправлениеОпросамиСервер.ПолучитьРеквизитыВариантаОпроса(Объект.ВариантОпроса);
	
	Если ЗначениеЗаполнено(РеквизитыВариантаОпроса.Ссылка) Тогда
		ЗаполнитьПараметрыВыбораРеспондента(ЭтаФорма);
	КонецЕсли;
	
	//--> VOG Бей В.В.  24.08.2018 16:29:36 ID заявки:000002167
	Если РеквизитыВариантаОпроса.УказатьНаправлениеДеятельности = Истина Тогда
		Объект.НаправлениеДеятельности = РеквизитыВариантаОпроса.НаправлениеДеятельности;
	КонецЕсли;
	//<-- VOG Бей В.В.  24.08.2018 16:29:37 ID заявки:000002167
	
	// ++ Харченко Д.И. №  - 05.09.2018 / Перенесего в вопрос
	//Элементы.ГруппаНаправлениеДеятельности.Видимость = РеквизитыВариантаОпроса.УказатьНаправлениеДеятельности = Истина;
	// -- Харченко Д.И. №  - 05.09.2018
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
	ПараметрыВыполнения = вогУправлениеОпросамиСервер.ПолучитьПараметрыВыполненияИнициализацииАнкеты(Объект, РеквизитыВариантаОпроса);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, 
																"вогУправлениеОпросамиСервер.СформироватьДанныеОпроса", 
																ПараметрыВыполнения, 
																НСтр("ru = 'Формирование данных опроса. '"));
															
															
	АдресХранилища = Результат.АдресХранилища;
										
	Если Результат.ЗаданиеВыполнено Тогда
		ВыполнитьОбработкуДанныхОпроса();
	КонецЕсли;
	
	//START Кайдашов 13/08/19 538
	Если ЗначениеЗаполнено(Объект.Ссылка) и ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВариантОпроса,"ИспользоватьБизнесПроцесс") тогда
		Доступ = ПроверитьДоступностьПоЗадачамБизнесПроцесса(Объект.Ссылка);	
		Если Не Доступ тогда
			Для каждого Эл из Элементы.ГруппаДанные.ПодчиненныеЭлементы цикл
				Эл.Доступность = Ложь;
			КонецЦикла;
			Элементы.ЗаписатьСтандартная.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	//END Кайдашов 538
	
	// ++ VOG Солодов В.В. 06.04.2020 CRM-470
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаКомандаИнструкция",
		"Видимость",
		ЗначениеЗаполнено(РеквизитыВариантаОпроса.СсылкаНаИнструкцию));
	// -- VOG Солодов В.В. 06.04.2020
	
	Возврат Результат;	
		
КонецФункции // ИницализироватьДанныеОпроса()

&НаКлиенте
Процедура ВыполнитьОбработкуДанныхОпросаКлиент()

	ВыполнитьОбработкуДанныхОпроса();

КонецПроцедуры 
 
&НаСервере
Процедура ВыполнитьОбработкуДанныхОпроса()

	//УстановитьПривилегированныйРежим(Истина);
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Результат = Неопределено Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНетДанных;
		Возврат;
	КонецЕсли;
	
	// ++ Харченко Д.И. № 000002197 - 04.09.2018 / переструктурировал процедуры для вывода по разделам
	
	СхемаДанныхВопросов = Новый Структура;
	
	ТаблицаСтруктурыАнкеты.Загрузить(Результат.ТаблицаСтруктурыАнкеты);
	ТаблицаЭлементарныеВопросы.Загрузить(Результат.ТаблицаЭлементарныхВопросов);
	
	//*** Описание
	//*** 16 апреля 2019 г.
	//*** Блашин Евгений Игоревич VOG Начало
	КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Загрузить(Объект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить());
	//*** Блашин Евгений Игоревич VOG Окончание 
	Если ЗаполнятьДанными 
		И Объект.СоставКлассификаторов.Количество() = 0 Тогда
		Объект.СоставКлассификаторов.Загрузить(Результат.ТаблицаЗначенийКлассификаторов);
	КонецЕсли;
	
	// ДАННЫЕ ДЛЯ НАЧАЛЬНОГО ЗАПОЛНЕНИЯ
	Если ЗначениеЗаполнено(АдресДанныхДляЗаполнения) Тогда
		// + Тищенко В.В.
		ДанныеДляЗаполнения = Неопределено;
		Если ЭтоАдресВременногоХранилища(АдресДанныхДляЗаполнения) Тогда
			ДанныеДляЗаполнения = ПолучитьИзВременногоХранилища(АдресДанныхДляЗаполнения);
		Иначе
			// Попытка десириализации объекта
			ВременныеДанные = ЗначениеИзСтрокиВнутр(АдресДанныхДляЗаполнения);	
			ДанныеДляЗаполнения = ?(ТипЗнч(ВременныеДанные) = Тип("Структура"),ВременныеДанные,Неопределено);
		КонецЕсли;
		
		Если ДанныеДляЗаполнения <> Неопределено Тогда
			// Заполняем таблицы, как будто они уже были в документе, потом обычным способом заполняем форму
			ВыполнитьЗаполнениеТаблицОтветов(ДанныеДляЗаполнения);
		КонецЕсли;
		// - Тищенко В.В.
		
	КонецЕсли;
	
	ВыборкаКлассификатор = CRM_КлассификаторыВызовСервера.ФормаОпросаАнкетыИнициализация(ЭтаФорма, Объект, Объект.Респондент, РеквизитыВариантаОпроса.Ссылка, Результат.ТаблицаКлассификаторов, ЗаполнятьДанными);
	Результат.Вставить("ВыборкаКлассификатор", ВыборкаКлассификатор);

	// СОЗДАНИЕ РЕКВИЗИТОВ И ЭЛЕМЕНТОВ ФОРМ
	ДобавитьРекурсивноЭлементыРазделов(Результат, Элементы.СтраницыРазделыАнкеты, ДанныеДляЗаполнения);
	
	Если Результат.ТаблицаКлассификаторов.Количество() Тогда
		
		CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
		
		Для Каждого стр из ЭтаФорма.CRM_ТаблицаКлассификаторов_Вспомогательная Цикл 
			
			Если ЗначениеЗаполнено(стр.СсылкаДляВидимости) Тогда
				ДобавитьОписание(Стр.ИмяЭлемента,,,,, стр.СсылкаДляВидимости);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// ВЫПОЛНЕНИЕ ОБРАБОТЧИКОВ ЗАПОЛНЕНИЯ
	//Если ЗначениеЗаполнено(АдресДанныхДляЗаполнения) Тогда // Повторная инициализация
		ВыполнитьОбработкуЗаполненияВопросов();
	//КонецЕсли;
	
	//Доп. реквизиты
	Если РеквизитыВариантаОпроса.ИспользоватьДополнительныеРеквизиты Тогда
		// СтандартныеПодсистемы.Свойства
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", Объект.Респондент);
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "НаборДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", Истина);
			
		ПараметрыИнициализацииСвойств = Новый Структура;
		ПараметрыИнициализацииСвойств.Вставить("Свойства_ИспользоватьСвойства", Неопределено);
		ЗаполнитьЗначенияСвойств(ПараметрыИнициализацииСвойств, ЭтаФорма);
		Если Не ПараметрыИнициализацииСвойств.Свойства_ИспользоватьСвойства = Неопределено Тогда
			УправлениеСвойствами.УдалитьСтарыеРеквизитыИЭлементы(ЭтаФорма);
			
			МассивУдаляемыхРеквизитов = Новый Массив;
			МассивУдаляемыхРеквизитов.Добавить("Свойства_ИспользоватьСвойства");
			МассивУдаляемыхРеквизитов.Добавить("Свойства_СкрытьУдаленные");
			МассивУдаляемыхРеквизитов.Добавить("ПараметрыСвойств");		
			МассивУдаляемыхРеквизитов.Добавить("Свойства_ИспользоватьДопРеквизиты");		
			ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
			
			ДополнительныеПараметры.Вставить("НеСоздаватьОписаниеДополнительныхРеквизитов");
			
		КонецЕсли;
		
		УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);		
		УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект, Объект);
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	//ПРОВЕРКА УСЛОВИЙ ОТОБРАЖЕНИЯ ВОПРОСОВ
	ПересчитатьОтображенияПолейПоУсловиямСервер();
	
	//++ VOG Иванов С.А. 18.10.2019 task: 706       {000000789 не успевали отрисоваться элементы на форме}
	ОбработчикПриОткрытии = ПолучитьОбработчикПриОткрытии(Объект.ВариантОпроса);
	Если ЗначениеЗаполнено(ОбработчикПриОткрытии) Тогда
		Если СтрНачинаетсяС(ОбработчикПриОткрытии, "&НаСервере") Тогда
			ОбработчикПриОткрытии = СтрЗаменить(ОбработчикПриОткрытии, "&НаСервере", "");
			Подключаемый_ОбработчикПриОткрытииСервер(ОбработчикПриОткрытии);
		Иначе
			Попытка
				Выполнить(ОбработчикПриОткрытии);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить обработчик при открытии. Причина: '") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;                                         
	//-- VOG Иванов С.А. 18.10.2019 task: 706
	
	//Если ЗначениеЗаполнено(АдресДанныхДляЗаполнения) Тогда
	//	УдалитьИзВременногоХранилища(АдресДанныхДляЗаполнения);
	//КонецЕсли;
	
	// -- Харченко Д.И. № 000002197 - 04.09.2018	
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДанные;
	
	// { VOG RMV 2019-02-25
	CRM_МодификацияКонфигурацииПереопределяемый.СоздатьСтатусыДокументов(ЭтаФорма);
	ДоступностьЭлементовФормыПоСтатусу();	
	// } VOG RMV 2019-02-25	
	
	// +++ VOG Кулаков П.Л. 28.10.2020 CRM-999
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласованияНаСервере(ЭтаФорма);
	// --- VOG Кулаков П.Л.
		
КонецПроцедуры // ВыполнитьОбработкуДанныхОпроса()

// ++ Харченко Д.И. № 000002197 - 04.09.2018 / 

// ++ VOG Солодов В.В. 16.12.2019 task 799
&НаКлиенте
Процедура ПерезаполнитьАнкетуКлиент(Основание, ПараметрыЗаполнения)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПроцессФормирования;
	
	Результат = ПерезаполнитьАнкету(Основание, ПараметрыЗаполнения);
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		
		ИдентификаторЗадания 	= Результат.ИдентификаторЗадания;
		АдресХранилища 			= Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПерезаполнениеАнкеты", 1, Истина);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьПерезаполнениеАнкеты() Экспорт
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ВыполнитьОбработкуПерезаполнения();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьПерезаполнениеАнкеты", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНетДанных;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПерезаполнитьАнкету(Основание, ПараметрыЗаполнения)
	
	РеквизитыВариантаОпроса = вогУправлениеОпросамиСервер.ПолучитьРеквизитыВариантаОпроса(Объект.ВариантОпроса);
	
	ПараметрыВыполнения = вогУправлениеОпросамиСервер.ПолучитьПараметрыВыполненияИнициализацииАнкеты(Объект, РеквизитыВариантаОпроса);
	
	ПараметрыВыполнения.Опрос 				= Основание;
	ПараметрыВыполнения.ДокументОснование 	= Основание;
	
	Объект.Состав.Очистить();
	Объект.СоставОпроса.Очистить();
	Объект.ДополнительнаяИнформацияВопросов.Очистить();
	Объект.ДополнительнаяИнформацияВариантовОтвета.Очистить();
	
	Если ЗначениеЗаполнено(Основание)
		И ТипЗнч(Основание) = Тип("ДокументСсылка.вогАнкета") Тогда
		
		Для Каждого СтрокаТЧ Из Основание.Состав Цикл
			ЗаполнитьЗначенияСвойств(Объект.Состав.Добавить(), СтрокаТЧ);
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из Основание.СоставОпроса Цикл
			ЗаполнитьЗначенияСвойств(Объект.СоставОпроса.Добавить(), СтрокаТЧ);
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из Основание.ДополнительнаяИнформацияВопросов Цикл
			ЗаполнитьЗначенияСвойств(Объект.ДополнительнаяИнформацияВопросов.Добавить(), СтрокаТЧ);
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из Основание.ДополнительнаяИнформацияВариантовОтвета Цикл
			ЗаполнитьЗначенияСвойств(Объект.ДополнительнаяИнформацияВариантовОтвета.Добавить(), СтрокаТЧ);
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
		"вогУправлениеОпросамиСервер.СформироватьДанныеОпроса", 
		ПараметрыВыполнения, 
		НСтр("ru = 'Формирование данных опроса. '"));
	
	АдресХранилища = Результат.АдресХранилища;
										
	Если Результат.ЗаданиеВыполнено Тогда
		ВыполнитьОбработкуПерезаполнения();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВыполнитьОбработкуПерезаполнения()
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ТаблицаСтруктурыАнкеты.Загрузить(РезультатФормирования.ТаблицаСтруктурыАнкеты);
	ТаблицаЭлементарныеВопросы.Загрузить(РезультатФормирования.ТаблицаЭлементарныхВопросов);
	КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Загрузить(Объект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить());
	
	ПерезаполнитьРеквизитыОпроса(РезультатФормирования);
	ВыполнитьОбработкуЗаполненияВопросов();
	ПересчитатьОтображенияПолейПоУсловиямСервер();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДанные;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРеквизитыОпроса(СтруктураДанных)
	
	Для Каждого Стр Из ТаблицаСтруктурыАнкеты Цикл 
		//START Кайдашов 16/01/20 CRM-150 Добавил общую попытку/исключению, т.к. варианты опроса могут меняться по версиям и заполнение отработает не корректно.
		Попытка
			ЭтоЭлементарныйВопрос 	= Ложь;
			ПоискВопросаВТаблице 	= Неопределено;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Раздел", Стр.Раздел);
			
			// Вопросы
			Если Стр.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Вопрос") Тогда
				
				СтруктураОтбора.Вставить("Вопрос", Стр.Значение);
				ПоискВопросаВТаблице = СтруктураДанных.ТаблицаВопросов.НайтиСтроки(СтруктураОтбора);
				
				// Элементарные вопросы
			ИначеЕсли Стр.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.ЭлементарныйВопрос") Тогда
				
				ЭтоЭлементарныйВопрос = Истина;
				
				СтруктураОтбора.Вставить("ЭлементарныйВопрос", Стр.Значение);
				ПоискВопросаВТаблице = ТаблицаЭлементарныеВопросы.НайтиСтроки(СтруктураОтбора);
				
			КонецЕсли;
			
			Если ПоискВопросаВТаблице = Неопределено
				Или ПоискВопросаВТаблице.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = ПоискВопросаВТаблице.Получить(0);
			
			ИмяВопроса = АнкетированиеКлиентСервер.ПолучитьИмяВопроса(Стр.Значение.УникальныйИдентификатор());
			
			Если ЭтоЭлементарныйВопрос Тогда
				
				ЭтотОбъект[ИмяВопроса] = Неопределено;
				
				Если СтрокаТаблицы.ЗаполнятьПоДокументуОснованию Тогда
					УстановитьЗначениеРеквизита(ИмяВопроса, СтрокаТаблицы);
				КонецЕсли;
				
			Иначе
				
				ЭтотОбъект[ИмяВопроса].Очистить();
				
				Если СтрокаТаблицы.ЗаполнятьПоДокументуОснованию Тогда
					
					СтруктураПараметров = СтрокаТаблицы.СтруктураПараметров;
					ЗаполнитьТаблицуВопроса(Стр.Значение, СтруктураПараметров, ИмяВопроса);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры
// -- VOG Солодов В.В. 16.12.2019

&НаСервереБезКонтекста
Функция ПолучитьТипРеспондента(Респондент)
	
	Мета = Респондент.Метаданные();
	
	Возврат Мета.ПолноеИмя();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗаголовокОбъекта(ВариантОпроса, Номер, Дата, Статус, Респондент)

	// ++ Тищенко В.В. 28.02.2019
	// Добавлен в представление реквизит статус
	Возврат Документы.вогАнкета.ПолучитьПредставлениеОбъекта(ВариантОпроса, Номер, Дата,Статус, Респондент); //+ VOG Иванов С.А. 03.12.2019 ID заявки: 000000961
	// -- Тищенко В.В.
	
КонецФункции // ПолучитьЗаголовокОбъекта()

&НаСервере
Процедура ВыполнитьОбработкуЗаполненияВопросов()
	
	Если ЭтоАдресВременногоХранилища(АдресДанныхДляЗаполнения) Тогда
		ДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресДанныхДляЗаполнения);
	ИначеЕсли ЗначениеЗаполнено(АдресДанныхДляЗаполнения) Тогда 
		ДанныеЗаполнения = ЗначениеИзСтрокиВнутр(АдресДанныхДляЗаполнения);
	Иначе
		ДанныеЗаполнения = Неопределено;
	КонецЕсли;
	
	Для Каждого СтрЭлементарныйВопрос из ТаблицаЭлементарныеВопросы Цикл 
		
		Если СтрЭлементарныйВопрос.ИспользоватьОбработкуЗаполнения Тогда
			
			ЭлементарныйВопрос = СтрЭлементарныйВопрос.ЭлементарныйВопрос;
			
			Если Не ЗначениеЗаполнено(ЭлементарныйВопрос.АлгоритмОбработкиЗаполнения) Тогда
				// ++ VOG Солодов В.В. 26.02.2020 CRM-267
				Продолжить;
				// До изменения
				//Возврат;
				// -- VOG Солодов В.В. 26.02.2020
			КонецЕсли;
			
			//Переменные
			ИдентификаторВопроса = вогУправлениеОпросамиПовтИспСеанс.ПолучитьИмяРеквизитаПоСсылке(ЭлементарныйВопрос, "Вопрос_");
			ИмяТаблицы 			 = "Таблица_" + ИдентификаторВопроса;		
			
			КоличествоПараметров = ЭлементарныйВопрос.ПараметрыОбработчиков.Количество();
			
			Параметр1 = ?(КоличествоПараметров >= 1, ЭлементарныйВопрос.ПараметрыОбработчиков.Получить(0).ЗначениеПараметры, Неопределено);
			Параметр2 = ?(КоличествоПараметров >= 2, ЭлементарныйВопрос.ПараметрыОбработчиков.Получить(1).ЗначениеПараметры, Неопределено);
			Параметр3 = ?(КоличествоПараметров >= 3, ЭлементарныйВопрос.ПараметрыОбработчиков.Получить(2).ЗначениеПараметры, Неопределено);
			Параметр4 = ?(КоличествоПараметров >= 4, ЭлементарныйВопрос.ПараметрыОбработчиков.Получить(3).ЗначениеПараметры, Неопределено);
			Параметр5 = ?(КоличествоПараметров >= 5, ЭлементарныйВопрос.ПараметрыОбработчиков.Получить(4).ЗначениеПараметры, Неопределено);
			
			Попытка
				Выполнить(ЭлементарныйВопрос.АлгоритмОбработкиЗаполнения);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить обработку заполнения вопроса. Причина: '") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ВыполнитьОбработкуЗаполненияВопросов()

&НаКлиенте
Процедура ПересчитатьОтображенияПолейПоУсловиям(Элемент)
	
	Модифицированность = Истина;
	
	// TODO: Сделать пересчет условий отображения вопросов только в том случае, если затронут зависимый реквизит
	// TODO: Вступить в раздумья по вопросу перевода механизма на использование "Длительных операций"	
		
	ПересчитатьОтображенияПолейПоУсловиямСервер();
	
	//++ Бей #407
	ИмяТаблицы = СтрЗаменить(Элемент.Имя,"Таблица_","");
	ПересчитатьИтогиПодвала(ИмяТаблицы);
	//--
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаполнениеРеквизитовОбъекта(ТекущийОбъект)
	
	
	ТекущийОбъект.Состав.Очистить();
	
	Для каждого СтрокаТаблицы Из ТаблицаЭлементарныеВопросы Цикл
		
		ИмяВопроса = вогУправлениеОпросамиПовтИспСеанс.ПолучитьИмяРеквизитаПоСсылке(СтрокаТаблицы.ЭлементарныйВопрос, "Вопрос_");
		
		
		//--> VOG Бей В.В.  22.08.2018 15:27:44 ID заявки:000002158		
		
		Если СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ОдинВариантИз Тогда
			
			Ответ = ЭтотОбъект[ИмяВопроса];
			Если ЗначениеЗаполнено(Ответ) Тогда
				
				НоваяСтрока = ТекущийОбъект.Состав.Добавить();
				НоваяСтрока.ЭлементарныйВопрос = СтрокаТаблицы.ЭлементарныйВопрос;
				НоваяСтрока.Ответ = Ответ;
				Если СтрокаТаблицы.ТребуетсяКомментарий Тогда
					НоваяСтрока.ОткрытыйОтвет = ЭтотОбъект[ИмяВопроса + "_Комментарий"];
				КонецЕсли;
				
				//*** Описание
				//*** 18 июня 2019 г.
				//*** Блашин Евгений Игоревич VOG Начало
				НоваяСтрока.ОтветПолучен = СтрокаТаблицы.ОтветПолучен;
				//*** Блашин Евгений Игоревич VOG Окончание
				
			КонецЕсли;
			
		ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
			                      						
			СтрокиСоответвияРеквизитов = ТаблицаОписания.НайтиСтроки(Новый Структура("ИмяЭлемента,Ключ","ПолеФормы","Вопросы"));
			ИмяРеквизита =  ИмяВопроса + "_Реквизит_";
			
			Для каждого ВариантОтвета Из СтрокиСоответвияРеквизитов Цикл
				
				Если Найти(ВариантОтвета.ПутьКДанным,ИмяРеквизита) Тогда		
					
					Если ЭтотОбъект[ВариантОтвета.ПутьКДанным] Тогда
						
						НоваяСтрока = ТекущийОбъект.Состав.Добавить();
						
						НоваяСтрока.ЭлементарныйВопрос = СтрокаТаблицы.ЭлементарныйВопрос;
						НоваяСтрока.Ответ              = ВариантОтвета.Ссылка;						
												
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; 
			
			// ++ Харченко Д.И. №  - 10.09.2018 / 
			// Перенес в конец, раньше было только для типа текст, если нужна другая обработка - написать выше
			
		Иначе
			
			Ответ = ЭтотОбъект[ИмяВопроса];
			
			Если ЗначениеЗаполнено(Ответ)
				// ++ VOG Солодов В.В. 27.01.2021 DEV-64
				Или (ЗначениеЗаполнено(СтрокаТаблицы.CRM_ВидКонтактнойИнформации)
					И СтрокаТаблицы.ОтветПолучен
					И (СтрокаТаблицы.CRM_ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты
						Или СтрокаТаблицы.CRM_ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)) Тогда
				// -- VOG Солодов В.В. 27.01.2021 DEV-64
				
				НоваяСтрока = ТекущийОбъект.Состав.Добавить();
				НоваяСтрока.ЭлементарныйВопрос = СтрокаТаблицы.ЭлементарныйВопрос;
				НоваяСтрока.Ответ = Ответ;
				
				Если СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
					НоваяСтрока.ОткрытыйОтвет = Ответ;
				КонецЕсли;
				
				//*** Описание
				//*** 18 июня 2019 г.
				//*** Блашин Евгений Игоревич VOG Начало
				НоваяСтрока.ОтветПолучен = СтрокаТаблицы.ОтветПолучен;
				//*** Блашин Евгений Игоревич VOG Окончание 
				
			КонецЕсли;
			
		КонецЕсли;
		//<-- VOG Бей В.В.  22.08.2018 15:27:44 ID заявки:000002158

	КонецЦикла;	
	//*** Описание
	//*** 12 апреля 2019 г.
	//*** Блашин Евгений Игоревич VOG Начало
	
	Если НЕ ТипЗнч(ТекущийОбъект) = Тип("ДанныеФормыСтруктура") Тогда
		
		ТекущийОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Очистить(); 
	 	ТекущийОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Загрузить(ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Выгрузить());
		
	КонецЕсли; 
	
	//*** Блашин Евгений Игоревич VOG Окончание 
		
	//Вопросы
	ТекущийОбъект.СоставОпроса.Очистить();
	ТекущийОбъект.ДополнительнаяИнформацияВопросов.Очистить();
	ТекущийОбъект.ДополнительнаяИнформацияВариантовОтвета.Очистить();
	ТекущийОбъект.СоставОпросаПрисоединенныеФайлы.Очистить();
	
	Если РеквизитыВариантаОпроса.ИспользоватьВопросы 
	  И СхемаДанныхВопросов <> Неопределено Тогда
		//Обработка алгоритмов ответов
		ТаблицаВопросовОбработки = Новый ТаблицаЗначений;
		ТаблицаВопросовОбработки.Колонки.Добавить("Вопрос");
		ТаблицаВопросовОбработки.Колонки.Добавить("АлгоритмОбработкиОтветов");
		ТаблицаВопросовОбработки.Колонки.Добавить("ДанныеВариантовОтветов");
		ТаблицаВопросовОбработки.Колонки.Добавить("ТаблицаВопроса");
		
		Для каждого КлючЗначение Из СхемаДанныхВопросов Цикл
			ИмяОписания			     = КлючЗначение.Ключ;
			Вопрос 				     = КлючЗначение.Значение.СтруктураВопроса.Вопрос;
			ТипОтвета				 = Вопрос.ТипОтвета;
			СтруктураВопроса         = КлючЗначение.Значение.СтруктураВопроса;
			ДанныеВариантовОтветов   = КлючЗначение.Значение.СтруктураВариантовОтветов;
			ДополнительнаяИнформация = КлючЗначение.Значение.СтруктураВопроса.ДополнительнаяИнформация;
			
			ИмяОписания = "Вопрос_" + ИдентификаторЭлемента(Вопрос); 
			
			Для каждого СтрокаТаблицы Из ЭтаФорма[ИмяОписания] Цикл
				// ++ Харченко Д.И. №  - 10.09.2018 / 
				// Механизм ответов в колонках
				
				Если ТипОтвета = ПредопределенноеЗначение("Перечисление.вогТипыОтветов.Заполняемый") 
					//++ Бей #407 - если вариантов ответа нет, то делаем просто запись инфо в тч
					ИЛИ ДанныеВариантовОтветов.Количество()=0 Тогда
					//--
					НоваяСтрокаОпроса = ТекущийОбъект.СоставОпроса.Добавить();
					
					НоваяСтрокаОпроса.Вопрос				= Вопрос;
					НоваяСтрокаОпроса.ОбъектОпроса  	  	= СтрокаТаблицы.ОбъектОпроса;
					НоваяСтрокаОпроса.ИдентификаторСтроки 	= СтрокаТаблицы.ИдентификаторСтроки;
					НоваяСтрокаОпроса.Ответ 				= СтрокаТаблицы.Ответ;
					
				Иначе 
					
					Для каждого ДанныеВариантаОтвета Из ДанныеВариантовОтветов Цикл
						
						//Кайдашов 407
						Если   ((НЕ Вопрос.ДинамическоеФормированиеВариантовОтветов И ЗначениеЗаполнено(ДанныеВариантаОтвета.Значение.ВариантОтвета) И ЗначениеЗаполнено(ДанныеВариантаОтвета.Значение.ВариантОтвета.ТипЗначенияОтвета)) ИЛИ Вопрос.ДинамическоеФормированиеВариантовОтветов) 
							ИЛИ (НЕ Вопрос.ДинамическоеФормированиеВариантовОтветов И НЕ ЗначениеЗаполнено(ДанныеВариантаОтвета.Значение.ВариантОтвета.ТипЗначенияОтвета) И СтрокаТаблицы[ДанныеВариантаОтвета.Ключ]) Тогда
							
							НоваяСтрокаОпроса = ТекущийОбъект.СоставОпроса.Добавить();
							
							НоваяСтрокаОпроса.Вопрос				= Вопрос;
							НоваяСтрокаОпроса.ОбъектОпроса  	  	= СтрокаТаблицы.ОбъектОпроса;
							НоваяСтрокаОпроса.ВариантОтвета 	  	= ДанныеВариантаОтвета.Значение.ВариантОтвета;
							//Кайдашов 407 !
							Если  НЕ Вопрос.ДинамическоеФормированиеВариантовОтветов И Не ЗначениеЗаполнено(ДанныеВариантаОтвета.Значение.ВариантОтвета.ТипЗначенияОтвета) тогда
								НоваяСтрокаОпроса.Ответ 				= СтрокаТаблицы.Ответ;
							Иначе	
								НоваяСтрокаОпроса.Ответ 				= СтрокаТаблицы[ДанныеВариантаОтвета.Ключ];
							КонецЕсли;
							
							НоваяСтрокаОпроса.ИдентификаторСтроки 	= СтрокаТаблицы.ИдентификаторСтроки;
							
							ИдентификаторЭлемента = ИдентификаторЭлемента(ДанныеВариантаОтвета.Значение.ВариантОтвета);
							
							//Дополнительная информация
							Для каждого ОписаниеСвойства Из ДанныеВариантаОтвета.Значение.ДополнительнаяИнформация Цикл
								ИмяКолонкиСвойства = "ДополнительнаяИнформацияВариантОтвета_" + ИдентификаторЭлемента + "_" + ИдентификаторЭлемента(ОписаниеСвойства.Свойство);
								Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонкиСвойства]) Тогда
									НоваяСтрокаСвойства = ТекущийОбъект.ДополнительнаяИнформацияВариантовОтвета.Добавить();
									
									НоваяСтрокаСвойства.Свойство 	  		= ОписаниеСвойства.Свойство;
									НоваяСтрокаСвойства.Значение 	  		= СтрокаТаблицы[ИмяКолонкиСвойства];
									НоваяСтрокаСвойства.ВариантОтвета 		= ДанныеВариантаОтвета.Значение.ВариантОтвета;
									НоваяСтрокаСвойства.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				// -- Харченко Д.И. №  - 10.09.2018
				
				//Присоединенные файлы
				Если СтруктураВопроса.ПрикреплятьФайлы Тогда
					ИмяКолонкиФайлов = "ПрисоединенныеФайлы" + ИмяОписания;
					Для каждого СтрокаФайла Из СтрокаТаблицы[ИмяКолонкиФайлов] Цикл
						НоваяСтрокаФайла = ТекущийОбъект.СоставОпросаПрисоединенныеФайлы.Добавить();	
						НоваяСтрокаФайла.ПрисоединенныйФайл  = СтрокаФайла.ПрисоединенныйФайл;
						НоваяСтрокаФайла.Вопрос				 = Вопрос;
						НоваяСтрокаФайла.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
					
					КонецЦикла;
					
				КонецЕсли;
					
				//Дополнительная информация вопроса
				Для каждого ОписаниеСвойства Из ДополнительнаяИнформация Цикл
					ИмяКолонкиСвойства = "ДополнительнаяИнформация" + ИмяОписания + "_" + ИдентификаторЭлемента(ОписаниеСвойства.Свойство);
					Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонкиСвойства]) Тогда
						НоваяСтрокаСвойства = ТекущийОбъект.ДополнительнаяИнформацияВопросов.Добавить();
						
					    НоваяСтрокаСвойства.Свойство 	  		= ОписаниеСвойства.Свойство;
					    НоваяСтрокаСвойства.Значение 	  		= СтрокаТаблицы[ИмяКолонкиСвойства];
					    НоваяСтрокаСвойства.Вопрос		 		= Вопрос;
					    НоваяСтрокаСвойства.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
						
					КонецЕсли;
						
				КонецЦикла;
				
			КонецЦикла;
			
			//Обработка алгоритмов ответов
			Если СтруктураВопроса.ИспользоватьАлгоритмОбработкиОтветов Тогда
				НоваяСтрокаОбработки = ТаблицаВопросовОбработки.Добавить();
				
				НоваяСтрокаОбработки.Вопрос 				  = Вопрос;
				НоваяСтрокаОбработки.АлгоритмОбработкиОтветов = СтруктураВопроса.АлгоритмОбработкиОтветов;
				НоваяСтрокаОбработки.Вопрос 				  = Вопрос;
				НоваяСтрокаОбработки.ТаблицаВопроса 		  = ЭтаФорма[ИмяОписания].Выгрузить();
				НоваяСтрокаОбработки.ДанныеВариантовОтветов   = ДанныеВариантовОтветов;
			
			КонецЕсли;			
			
		КонецЦикла;  
		
		Если ТаблицаВопросовОбработки.Количество() > 0 И НЕ ТипЗнч(ТекущийОбъект) = Тип("ДанныеФормыСтруктура") Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ТаблицаВопросовОбработки", ТаблицаВопросовОбработки);
		КонецЕсли;
		
 	КонецЕсли;
	
	//Классификаторы
	Если РеквизитыВариантаОпроса.ИспользоватьКлассификаторы Тогда 
		ТекущийОбъект.СоставКлассификаторов.Очистить();
		
		ИмяОписания = "CRM_ТаблицаКлассификаторов";
		Если CRM_КлассификаторыВызовСервера.РеквизитФормыСуществует(ЭтаФорма, ИмяОписания) Тогда
			Для каждого СтрокаКлассификатора Из ЭтаФорма[ИмяОписания] Цикл
				Если СтрокаКлассификатора.Включен Тогда
					НоваяСтрока = ТекущийОбъект.СоставКлассификаторов.Добавить();	
					НоваяСтрока.ЗначениеКлассификатора = СтрокаКлассификатора.Значение;
					//*** Описание
					//*** 18 июня 2019 г.
					//*** Блашин Евгений Игоревич VOG Начало
					НоваяСтрока.ОтветПолучен = СтрокаКлассификатора.ОтветПолучен;
					//*** Блашин Евгений Игоревич VOG Окончание 
				КонецЕсли;
			
			КонецЦикла;	
			
			Если НЕ ТипЗнч(ТекущийОбъект) = Тип("ДанныеФормыСтруктура") Тогда
				ТекущийОбъект.ДополнительныеСвойства.Вставить(ИмяОписания, ЭтаФорма[ИмяОписания]);
				// ++ Тищенко В.В. 10.01.2019
				// Формирование таблицы классификаторов для записи при согласовании БП (Сертификация)
				ТекущийОбъект.ТаблицаКлассификаторов = ЗначениеВСтрокуВнутр(ДанныеФормыВЗначение(ЭтаФорма[ИмяОписания],Тип("ТаблицаЗначений")));
				// -- Тищенко В.В. 
			КонецЕсли;
			
		КонецЕсли;	  
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПересчитатьОтображенияПолейПоУсловиямСервер()
	
	ВыполнитьЗаполнениеРеквизитовОбъекта(Объект);
	
	ПоискСтрокВопроса = ТаблицаСтруктурыАнкеты.НайтиСтроки(Новый Структура("ИмеетУсловиеОтображения", Истина));
	
	СтруктураСТаблицами = вогУправлениеОпросамиСервер.ПолучитьСтруктуруДанныхПолученныхОтветовДляОбработкиУсловий(Объект);
	
	Для Каждого СтрЭлементАнкеты ИЗ ПоискСтрокВопроса Цикл 
		
		Результат = вогУправлениеОпросамиСервер.ПоложительноеЗначениеОтображенияПоУсловиям(СтрЭлементАнкеты.Значение, СтруктураСТаблицами);
		
		УстановитьВидимостьЭлементаФормыПоЭлементуАнкеты(СтрЭлементАнкеты.Значение, Результат);
		
	КонецЦикла;

	ПерезаполнитьСписокСтраниц();
	
КонецПроцедуры

Процедура ПерезаполнитьСписокСтраниц()
	
	Элементы.РазделАнкетыПереключатель.СписокВыбора.Очистить();
	
	КоллекцияСтраниц = Элементы.СтраницыРазделыАнкеты.ПодчиненныеЭлементы;
	
	Для Каждого Стр из КоллекцияСтраниц Цикл 
		
		Если НЕ Стр.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.РазделАнкетыПереключатель.СписокВыбора.Добавить(Стр.Имя, Стр.Заголовок);	
		
	КонецЦикла;
	
	УстановитьАктивнуюСтраницуАнкеты(ЭтаФорма);
	УстановитьДоступностьКнопокДалее(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементаФормыПоЭлементуАнкеты(ЭлементАнкеты, Видимость)
	
	ПоискСтрокДанных = ТаблицаОписания.НайтиСтроки(Новый Структура("СсылкаДляВидимости", ЭлементАнкеты));
	
	Для Каждого стр Из ПоискСтрокДанных Цикл 
		Элементы[стр.ИмяЭлемента].Видимость = Видимость;
	КонецЦикла;
	
	// ++ VOG Солодов В.В. 19.11.2019 task 888
	Если Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ПоискСтрокДанных = ТаблицаОписания.НайтиСтроки(Новый Структура("Ссылка", ЭлементАнкеты));
	
	Для Каждого Стр Из ПоискСтрокДанных Цикл 
		ОчиститьЗначенияЗависимыхПолей(Стр.ПутьКДанным, ЭтотОбъект);
	КонецЦикла;
	// -- VOG Солодов В.В. 19.11.2019
	
КонецПроцедуры

// ++ VOG Солодов В.В. 18.11.2019 task 888
#Если Клиент Тогда
	&НаКлиенте
#Иначе
	&НаКлиентеНаСервереБезКонтекста
#КонецЕсли
Процедура ОчиститьЗначенияЗависимыхПолей(ИмяЭлемента, ФормаАнкеты = Неопределено)
	
	#Если Сервер Тогда
		СтруктураФормы = Новый Структура;
		СтруктураФормы.Вставить(ИмяЭлемента);
		
		ЗаполнитьЗначенияСвойств(СтруктураФормы, ФормаАнкеты);
		
		Если СтруктураФормы[ИмяЭлемента] = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЭтотОбъект = ФормаАнкеты;
	#КонецЕсли
	
	Ответ = ЭтотОбъект[ИмяЭлемента];
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Вопрос", ИмяЭлемента);
	
	ОчищаемыеСтроки = ЭтотОбъект.ТаблицаЗависимостиОчищаемыхПолей.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого ОчищаемаяСтрока Из ОчищаемыеСтроки Цикл
		
		Если Не Ответ = ОчищаемаяСтрока.Ответ
			И ЗначениеЗаполнено(ОчищаемаяСтрока.Ответ) Тогда // VOG Солодов В.В. 28.01.2020 CRM-216 // Добавлено условие
			Продолжить;
		КонецЕсли;
		
		ИмяВопроса = ОчищаемаяСтрока.ЗависимоеПоле;
		
		Если ОчищаемаяСтрока.ТипЗависимогоПоля = "Элементарный вопрос" Тогда
			
// ++ VOG Ульянов И.В. 27.01.2020 CRM-156
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(ЭтотОбъект[ОчищаемаяСтрока.ЗависимоеПоле]));
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
			
			ЭтотОбъект[ОчищаемаяСтрока.ЗависимоеПоле] = ОписаниеТипов.ПривестиЗначение(Неопределено);
			
			ВопросДляОчистки = ПолучитьЭлементарныйВопрос(ОчищаемаяСтрока.ЗависимоеПоле);
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЭлементарныйВопрос", ВопросДляОчистки);
			
//			СтруктураОтбора = Новый Структура;
//			СтруктураОтбора.Вставить("ЭлементарныйВопрос", ОчищаемаяСтрока.ЭлементарныйВопрос);
// -- VOG Ульянов И.В. 27.01.2020 CRM-156

			
			СохраненныеОтветы = ЭтотОбъект.Объект.Состав.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого СтрОтвет Из СохраненныеОтветы Цикл
				ЭтотОбъект.Объект.Состав.Удалить(ЭтотОбъект.Объект.Состав.Индекс(СтрОтвет));
			КонецЦикла;
			
		ИначеЕсли ОчищаемаяСтрока.ТипЗависимогоПоля = "Вопрос" Тогда
			
			Если ОчищаемаяСтрока.ОчищатьТаблицу Тогда
				ЭтотОбъект[ИмяВопроса].Очистить();
			Иначе
				
				Для Каждого ВариантОтвета Из ЭтотОбъект.СхемаДанныхВопросов[ИмяВопроса].СтруктураВариантовОтветов Цикл
					
					Для Каждого СтрокаОтвета Из ЭтотОбъект[ИмяВопроса] Цикл
						СтрокаОтвета[ВариантОтвета.Ключ] = Ложь;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ОчищаемаяСтрока.ТипЗависимогоПоля = "Классификатор" Тогда
			
			ИмяКлассификатора = СтрЗаменить(ОчищаемаяСтрока.ЗависимоеПоле, "Вопрос_", "CRM_Классификатор");
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("КлючКлассификатора", ИмяКлассификатора);
			
			ОчищаемыеКлассификаторы = ЭтотОбъект.CRM_ТаблицаКлассификаторов.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого ОчищаемыйКлассификатор Из ОчищаемыеКлассификаторы Цикл
				
				ЭтотОбъект[ОчищаемыйКлассификатор.КлючСтроки] = Неопределено;
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ЗначениеКлассификатора", ОчищаемыйКлассификатор.Значение);
				
				СохраненныеОтветы = ЭтотОбъект.Объект.СоставКлассификаторов.НайтиСтроки(СтруктураОтбора);
				
				Для Каждого СтрОтвет Из СохраненныеОтветы Цикл
					ИндексСтроки = ЭтотОбъект.Объект.СоставКлассификаторов.Индекс(СтрОтвет);
					ЭтотОбъект.Объект.СоставКлассификаторов.Удалить(ИндексСтроки);
				КонецЦикла;
				
				ОчищаемыйКлассификатор.Включен = Ложь;
				
				Если ОчищаемыйКлассификатор.ВидОтображения 
					= ПредопределенноеЗначение("Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит") Тогда
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Свойство", ОчищаемыйКлассификатор.ДополнительныйРеквизит);
					
					СохраненныеРеквизиты = ЭтотОбъект.Объект.ДополнительныеРеквизитыРеспондента.НайтиСтроки(СтруктураОтбора);
					
					Для Каждого СтрРеквизит Из СохраненныеРеквизиты Цикл
						ИндексСтроки = ЭтотОбъект.Объект.ДополнительныеРеквизитыРеспондента.Индекс(СтрРеквизит);
						ЭтотОбъект.Объект.ДополнительныеРеквизитыРеспондента.Удалить(ИндексСтроки);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // -- VOG Солодов В.В. 18.11.2019

&НаСервереБезКонтекста
Функция ПолучитьЭлементарныйВопрос(НаименованиеВопроса) //++ VOG Ульянов И.В. 27.01.2020 CRM-156
	Возврат ПланыВидовХарактеристик.ВопросыДляАнкетирования.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(НаименованиеВопроса,"Вопрос_",""),"_","-")))
КонецФункции	


&НаСервереБезКонтекста
Функция ВидКонтактнойИнформацииРедактируетсяВотдельнойФорме(ВидИнформации)
	
	Если НЕ ЗначениеЗаполнено(ВидИнформации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// ++ Тищенко В.В. 17.01.2019
	//Добавлена новая проверка на сайт компании
	
	Если ВидИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты ИЛИ ВидИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		
	// -- Тищенко В.В. 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область ПредварительноеЗаполнение
	
&НаСервере
Процедура ВыполнитьЗаполнениеТаблицОтветов(ДанныеДляЗаполнения)
	
	Документы.вогАнкета.ВыполнитьЗаполнениеТаблицОтветов(Объект, ДанныеДляЗаполнения, ТаблицаЭлементарныеВопросы); 
	
//	Если ДанныеДляЗаполнения = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Для Каждого СтрСтравочника из ДанныеДляЗаполнения Цикл 
//		
//		ИмяСправочника = СтрСтравочника.Ключ; 
//		
//		Если НРег(ИмяСправочника) = НРег("Клиент") Тогда
//			ИмяСправочника = "Партнеры";
//		ИначеЕсли НРег(ИмяСправочника) = НРег("КонтактноеЛицо") Тогда
//			ИмяСправочника = "КонтактныеЛицаПартнеров";
//		ИначеЕсли НРег(ИмяСправочника) = НРег("ТорговаяТочка") Тогда
//			ИмяСправочника = "вогТорговыеТочки";
//		ИначеЕсли НРег(ИмяСправочника) = НРег("ЮрЛицо") Тогда
//			ИмяСправочника = "вогЮридическиеЛица";
//			
//		ИначеЕсли НРег(ИмяСправочника) = НРег("ВыбранныеКлассификаторы") Тогда
//			
//			Если СтрСтравочника.Значение = Неопределено Тогда
//				Продолжить;
//			КонецЕсли;

//			Для Каждого ЗначениеКлассификатора Из СтрСтравочника.Значение Цикл 
//				
//				ПоискКлассификатор = Объект.СоставКлассификаторов.НайтиСтроки(Новый Структура("ЗначениеКлассификатора", ЗначениеКлассификатора));
//				
//				Если НЕ ПоискКлассификатор.Количество() Тогда
//					НоваяСтрока = Объект.СоставКлассификаторов.Добавить();
//					НоваяСтрока.ЗначениеКлассификатора = ЗначениеКлассификатора;
//				КонецЕсли;
//				
//			КонецЦикла;
//			
//			Продолжить;
//		Иначе 
//			
//			Продолжить;
//		КонецЕсли;
//		
//		Для Каждого СтрКлючТипаПоля Из СтрСтравочника.Значение Цикл 
//			
//			Если НЕ СтрКлючТипаПоля.Ключ = "НайденныеДубли" Тогда
//				
//				ЗаполнитьДанныеАнкетыЕдиничнымиОтветами(СтрКлючТипаПоля.Значение, СтрКлючТипаПоля.Ключ, ИмяСправочника);
//				
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//КонецПроцедуры
//	
//&НаСервере
//Процедура ЗаполнитьДанныеАнкетыЕдиничнымиОтветами(ДанныеДляЗаполнения, ИмяПоля, ИмяСправочника )
//	
//	Для Каждого СтрИмяПоля Из ДанныеДляЗаполнения Цикл 
//		
//		ИтоговоеЗначение = СтрИмяПоля.Значение;
//		
//		Если ИтоговоеЗначение = Неопределено ИЛИ СокрЛП(ИтоговоеЗначение) = "" Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		СтруктураПоискаЭлементарногоВопроса = Новый Структура;
//		СтруктураПоискаЭлементарногоВопроса.Вставить("CRM_ИмяСправочника", ИмяСправочника);
//		
//		Если ИмяПоля = "КонтактнаяИнформация" Тогда
//			СтруктураПоискаЭлементарногоВопроса.Вставить("CRM_ВидКонтактнойИнформации", СтрИмяПоля.Ключ);
//		Иначе 
//			СтруктураПоискаЭлементарногоВопроса.Вставить("CRM_ИмяРеквизита", СтрИмяПоля.Ключ);
//		КонецЕсли;
//		
//		ПоискСтрокВопроса = ТаблицаЭлементарныеВопросы.НайтиСтроки(СтруктураПоискаЭлементарногоВопроса);
//		
//		Если ПоискСтрокВопроса.Количество() Тогда
//			СтрокаВопроса = ПоискСтрокВопроса.Получить(0);
//			
//			ПоискСтрокиВопроса = Объект.Состав.НайтиСтроки(Новый Структура("ЭлементарныйВопрос", СтрокаВопроса.ЭлементарныйВопрос));
//			Если ПоискСтрокиВопроса.Количество() Тогда
//				ПоискСтрокиВопроса = ПоискСтрокиВопроса.Получить(0);
//			Иначе 
//				ПоискСтрокиВопроса = Объект.Состав.Добавить();
//				ПоискСтрокиВопроса.ЭлементарныйВопрос = СтрокаВопроса.ЭлементарныйВопрос;
//			КонецЕсли;
//			
//			ПоискСтрокиВопроса.Ответ = ИтоговоеЗначение;
//			Продолжить; // Найдено  в элементарных вопросах, дальше не смотрим
//		КонецЕсли;
//		
//	КонецЦикла;

КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьАктивнуюСтраницуАнкеты(Форма) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.ТекущаяСтраницаАнкеты) Тогда
		
		Для Каждого стр из Форма.Элементы.РазделАнкетыПереключатель.СписокВыбора Цикл 
			Форма.ТекущаяСтраницаАнкеты = стр.Значение;
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ТекущаяСтраницаАнкеты) Тогда
		Форма.Элементы.СтраницыРазделыАнкеты.ТекущаяСтраница = Форма.Элементы[Форма.ТекущаяСтраницаАнкеты];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопокДалее(Форма)
	
	КоллекцияСтраниц 	= Форма.Элементы.СтраницыРазделыАнкеты.ПодчиненныеЭлементы;
	ТекущаяСтраница 	=  Форма.Элементы.СтраницыРазделыАнкеты.ТекущаяСтраница;
	
	ПоПорядку = 0;
	КоличествоСтраниц = 0;
	ОтсчитываемСначала = Истина;
	
	Для Каждого Страница из КоллекцияСтраниц Цикл 
		
		Если НЕ Страница.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоСтраниц = КоличествоСтраниц + 1;
		
		Если ОтсчитываемСначала Тогда 
			ПоПорядку = ПоПорядку + 1;
		КонецЕсли;
		
		Если ТекущаяСтраница = Страница Тогда
			ОтсчитываемСначала = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтоПоследняяСтраница 	=  (КоличествоСтраниц = ПоПорядку);
	
	Форма.Элементы.ДекорацияИнформацияСтраниц.Заголовок = 
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Раздел %1 из %2'"), ПоПорядку, КоличествоСтраниц);	
	

	Форма.Элементы.ПредыдущийВопрос.Видимость			= ПоПорядку > 1;
	Форма.Элементы.СледующийВопрос.Видимость 			= НЕ ЭтоПоследняяСтраница;
	// ++ Тищенко В.В. 28.12.2018
	// 	Форма.Элементы.ПровестиИЗакрытьВнизу.Видимость 		= ЭтоПоследняяСтраница;
	// -- Тищенко В.В. 	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРекурсивноЭлементыРазделов(СтруктураДанных, РодительГруппы, ДанныеДляЗаполнения, Раздел=Неопределено, УровеньИерархии=1)
	
	Если Раздел = Неопределено Тогда
		Раздел = ПредопределенноеЗначение("Справочник.вогРазделыАнкет.ПустаяСсылка");
	КонецЕсли;
	
	ПоискСтрок = ТаблицаСтруктурыАнкеты.НайтиСтроки(Новый Структура("Раздел", Раздел));
	
	Для Каждого Стр из ПоискСтрок Цикл 
		
		// В СТРУКТУРЕ ВСТРЕТИЛСЯ:
		
			// РАЗДЕЛ АНКЕТЫ
		Если стр.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Раздел") Тогда	
			
			ВывестиРазделВСтруктуру(СтруктураДанных, стр, РодительГруппы, УровеньИерархии, ДанныеДляЗаполнения);	
			
			// ВОПРОС 
		ИначеЕсли стр.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Вопрос") Тогда	
			
			ДобавитьВСтруктуруВопрос(СтруктураДанных.ТаблицаВопросов, стр.Значение, Раздел, РодительГруппы);
			
			// ЭЛЕМЕНТАРНЫЙ ВОПРОС
		ИначеЕсли стр.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.ЭлементарныйВопрос") Тогда	
			
			ДобавитьВСтруктуруЭлементарныйВопрос(стр.Значение, Раздел, РодительГруппы);
			
			// КЛАССИФИКАТОР
		ИначеЕсли стр.ТипСтроки = ПредопределенноеЗначение("Перечисление.вогТипыВопросовАнкеты.Классификатор") Тогда	
			
			ДобавитьВСтруктуруКлассификатор(СтруктураДанных, стр.Значение, Раздел, РодительГруппы, Стр.Синоним);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВСтруктуруКлассификатор(СтруктураДанных, Классификатор, Раздел, РодительГруппы, Синоним)
	
	МожноСохранятьЗначения = вогУправлениеОпросамиПовтИспСеанс.ПользовательИмеетПравоСохранятьЗначенияКлассификаторов();
	
	КодКлассификатора = вогУправлениеОпросамиКлиентСервер.ПолучитьИмяРеквизитаПоСсылке(Классификатор, "Классификатор");
	
	ЭлементФормыГруппаКлассификатора = Элементы.Добавить("ГруппаКлассификатора_" + КодКлассификатора, Тип("ГруппаФормы"), РодительГруппы); 
	ЭлементФормыГруппаКлассификатора.ТолькоПросмотр = Истина;
	
	ВыборкаКлассификатор = СтруктураДанных.ВыборкаКлассификатор; 
	
	Если СтруктураДанных.ВыборкаКлассификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаКлассификатор.Сбросить();
	
	СтруктураПоиска = Новый Структура("Классификатор", Классификатор);
	
	Если НЕ ВыборкаКлассификатор.НайтиСледующий(СтруктураПоиска) Тогда		
		Возврат; //Данные для вывода классификатора отсутствуют;
	КонецЕсли;
	
	ПараметрыРазмещенияНаФорме = Новый Структура;
	ПараметрыРазмещенияНаФорме.Вставить("КонкретныйЭлемент", РодительГруппы);
	
	КлассификаторПредставление = ВыборкаКлассификатор.КлассификаторПредставление;
	
	Если ЗначениеЗаполнено(Синоним) Тогда
		КлассификаторПредставление = Синоним;
	КонецЕсли;
	
		//Отдельным списком (классификатор) Объединен с  ОдиночноеЗначение, потому что мы вроде как разделы настраиваем.
	Если ВыборкаКлассификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОтдельнымСписком Тогда
		
		CRM_КлассификаторыВызовСервера.СформироватьОтдельныйСписокКлассификатора(ЭтаФорма, ВыборкаКлассификатор.Классификатор, КлассификаторПредставление, ПараметрыРазмещенияНаФорме);	
		
		//Одиночное значение (классификатор)
	ИначеЕсли ВыборкаКлассификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение Тогда
		
		CRM_КлассификаторыВызовСервера.СформироватьОдиночноеЗначениеКлассификатора(ЭтаФорма, ВыборкаКлассификатор.Классификатор, КлассификаторПредставление, ПараметрыРазмещенияНаФорме);		
		//++ VOG Иванов С.А. 16.10.2019 ID заявки: 706
		ОбработчикПриИзменении =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаКлассификатор.Классификатор, "ОбработчикПриИзменении");
		Если Не ПустаяСтрока(ОбработчикПриИзменении) Тогда
			
			НоваяСтрокаОбработчик = ТаблицаОбработчикиКлассификаторов.Добавить();
			НоваяСтрокаОбработчик.Вопрос = "CRM_Классификатор" + ИдентификаторЭлемента(ВыборкаКлассификатор.Классификатор);
						
			Если СтрНачинаетсяС(ОбработчикПриИзменении, "&НаСервере") Тогда
				НоваяСтрокаОбработчик.НаСервере = Истина;
				ОбработчикПриИзменении = СтрЗаменить(ОбработчикПриИзменении, "&НаСервере", "");
			Иначе
				ОбработчикПриИзменении = ОбработчикПриИзменении;
			КонецЕсли;
			
			НоваяСтрокаОбработчик.Обработчик = ОбработчикПриИзменении;
			НоваяСтрокаОбработчик.ВидСобытия = 0;
	
		КонецЕсли;
		ОбработчикНачалоВыбора =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаКлассификатор.Классификатор, "ОбработчикНачалоВыбора");
		Если Не ПустаяСтрока(ОбработчикНачалоВыбора) Тогда
			НоваяСтрокаОбработчик = ТаблицаОбработчикиКлассификаторов.Добавить();
			НоваяСтрокаОбработчик.Вопрос = "CRM_Классификатор" + ИдентификаторЭлемента(ВыборкаКлассификатор.Классификатор);
			Если СтрНачинаетсяС(ОбработчикНачалоВыбора, "&НаСервере") Тогда
				НоваяСтрокаОбработчик.НаСервере = Истина;
				ОбработчикНачалоВыбора = СтрЗаменить(ОбработчикНачалоВыбора, "&НаСервере", "");
			Иначе
				ОбработчикНачалоВыбора = ОбработчикНачалоВыбора;
			КонецЕсли;
			НоваяСтрокаОбработчик.Обработчик = ОбработчикНачалоВыбора;
			НоваяСтрокаОбработчик.ВидСобытия = 1;
			
		КонецЕсли;
		//-- VOG Иванов С.А. 16.10.2019 ID заявки: 706
		//Вхождение (классификатор)
	ИначеЕсли ВыборкаКлассификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.Вхождение Тогда
		
		CRM_КлассификаторыВызовСервера.СформироватьВхождениеКлассификатора(ЭтаФорма, ВыборкаКлассификатор.Классификатор, КлассификаторПредставление, ПараметрыРазмещенияНаФорме);		
		
		//Тег (классификатор)
	ИначеЕсли ВыборкаКлассификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.Тег Тогда
		
		CRM_КлассификаторыВызовСервера.СформироватьВводТегаКлассификатора(ЭтаФорма, ВыборкаКлассификатор.СпособФормирования, Классификатор, ВыборкаКлассификатор.КлассификаторПредставление, ПараметрыРазмещенияНаФорме);
		
		//Дополнительный реквизит (классификатор)
	ИначеЕсли ВыборкаКлассификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
		
		CRM_КлассификаторыВызовСервера.СформироватьДополнительныеРеквизитыКлассификатора(ЭтаФорма, ВыборкаКлассификатор.Классификатор, КлассификаторПредставление, ПараметрыРазмещенияНаФорме);
		
		//Общим списком (классификатор) ОБЩИЙ СПИСОК НЕ РАЗМЕЩАЕМ, ПОТОМУ ЧТО СМЫСЛ ПРИВЯЗКИ К РАЗДЕЛАМ МЕНЯЕТСЯ
		//ИначеЕсли ВыборкаКлассификатор.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОбщимСписком Тогда
		//CRM_КлассификаторыВызовСервера.СтрокаОбщегоСписка = CRM_КлассификаторыВызовСервера.ДобавитьВОбщийСписокКлассификатора_Классификатор(ЭтаФорма, ВыборкаКлассификатор.Классификатор, ПараметрыРазмещенияНаФорме);	
		//ОСТАЛЬНОЕ НЕ ПОДДЕРЖИВАЕТСЯ, ПРОПУСКАЕМ
	Иначе 
		Возврат;
	КонецЕсли;
	//
	ВыборкаЗаписи = ВыборкаКлассификатор.Выбрать();
	Пока ВыборкаЗаписи.Следующий() Цикл
				
		//Отдельным списком (значение) Объединен с  ОдиночноеЗначение, потому что мы вроде как разделы настраиваем.
		Если ВыборкаЗаписи.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОтдельнымСписком Тогда
			
			CRM_КлассификаторыВызовСервера.ДобавитьВОтдельныйСписокКлассификатора(ЭтаФорма, ВыборкаЗаписи);		
			
			//Одиночное значение (значение)
		ИначеЕсли ВыборкаЗаписи.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение Тогда
			
			CRM_КлассификаторыВызовСервера.ДобавитьОдиночноеЗначениеКлассификатора(ЭтаФорма, ВыборкаЗаписи);		
			
			//Вхождение (значение)
		ИначеЕсли ВыборкаЗаписи.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.Вхождение Тогда
			
			CRM_КлассификаторыВызовСервера.ДобавитьВхождениеКлассификатора(ЭтаФорма, ВыборкаЗаписи);		
			//++ VOG Иванов С.А. 16.10.2019 ID заявки: 706
			ОбработчикПриИзменении = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаЗаписи.Классификатор, "ОбработчикПриИзменении");
			Если Не ПустаяСтрока(ОбработчикПриИзменении) Тогда
				
				НоваяСтрокаОбработчик = ТаблицаОбработчикиКлассификаторов.Добавить();
				НоваяСтрокаОбработчик.Вопрос = "Значение" + ИдентификаторЭлемента(ВыборкаЗаписи.Значение);
				
				Если СтрНачинаетсяС(ОбработчикПриИзменении, "&НаСервере") Тогда
					НоваяСтрокаОбработчик.НаСервере = Истина;
					ОбработчикПриИзменении = СтрЗаменить(ОбработчикПриИзменении, "&НаСервере", "");
				Иначе
					ОбработчикПриИзменении = ОбработчикПриИзменении;
				КонецЕсли;
				
				НоваяСтрокаОбработчик.Обработчик = ОбработчикПриИзменении;
				НоваяСтрокаОбработчик.ВидСобытия = 0;
				
			КонецЕсли;
			ОбработчикНачалоВыбора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаЗаписи.Классификатор, "ОбработчикНачалоВыбора");
			Если Не ПустаяСтрока(ОбработчикНачалоВыбора) Тогда
				НоваяСтрокаОбработчик = ТаблицаОбработчикиКлассификаторов.Добавить();
				НоваяСтрокаОбработчик.Вопрос = "Значение" + ИдентификаторЭлемента(ВыборкаЗаписи.Значение);
				Если СтрНачинаетсяС(ОбработчикНачалоВыбора, "&НаСервере") Тогда
					НоваяСтрокаОбработчик.НаСервере = Истина;
					ОбработчикНачалоВыбора = СтрЗаменить(ОбработчикНачалоВыбора, "&НаСервере", "");
				Иначе
					ОбработчикНачалоВыбора = ОбработчикНачалоВыбора;
				КонецЕсли;
				НоваяСтрокаОбработчик.Обработчик = ОбработчикНачалоВыбора;
				НоваяСтрокаОбработчик.ВидСобытия = 1;
				
			КонецЕсли;
			//-- VOG Иванов С.А. 16.10.2019 ID заявки: 706
			//Тег (значение)
		ИначеЕсли ВыборкаЗаписи.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.Тег Тогда
			
			CRM_КлассификаторыВызовСервера.ДобавитьЗначениеТегаКлассификатора(ЭтаФорма, ВыборкаЗаписи);		
			
			//Дополнительный реквизит (значение)
		ИначеЕсли ВыборкаЗаписи.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит Тогда
						
			CRM_КлассификаторыВызовСервера.СформироватьЗначениеДополнительногоРеквизитаКлассификатора(ЭтаФорма, ВыборкаЗаписи);		
						
			//Общим списком (значение) ОБЩИЙ СПИСОК НЕ РАЗМЕЩАЕМ, ПОТОМУ ЧТО СМЫСЛ ПРИВЯЗКИ К РАЗДЕЛАМ МЕНЯЕТСЯ
			//ИначеЕсли ВыборкаЗаписи.ВидОтображения = Перечисления.CRM_ВидыОтображенияКлассификаторов.ОбщимСписком Тогда
			//CRM_КлассификаторыВызовСервера.ДобавитьВОбщийСписокКлассификатора_Значение(ЭтаФорма, СтрокаОбщегоСписка, ВыборкаЗаписи);		
			//ОСТАЛЬНОЕ НЕ ПОДДЕРЖИВАЕТСЯ, ПРОПУСКАЕМ
		Иначе 
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = ЭтаФорма.CRM_ТаблицаКлассификаторов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗаписи);
		
		НоваяСтрока.КлючСтроки 		   = "Значение" + ИдентификаторЭлемента(ВыборкаЗаписи.Значение);
		НоваяСтрока.КлючКлассификатора = "CRM_Классификатор" + ИдентификаторЭлемента(ВыборкаЗаписи.Классификатор);
		
		// ++ Тищенко В.В. 15.01.2019
		Если ВыборкаЗаписи.ЗначениеДополнительногоРеквизита <> Неопределено Тогда
			НоваяСтрока.ЗначениеРеквизита = ВыборкаЗаписи.ЗначениеДополнительногоРеквизита;
		КонецЕсли;
		// -- Тищенко В.В.
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВСтруктуруВопрос(ТаблицаВопросов, Вопрос, Раздел, РодительГруппы)
	
	СтрокиВопроса = ТаблицаВопросов.НайтиСтроки(Новый Структура("Вопрос, Раздел", Вопрос, Раздел));		
	
	Если НЕ СтрокиВопроса.Количество() Тогда
		ВызватьИсключение "В Таблице вопросов отсутствует вопрос. Обратитесь к администратору";
	КонецЕсли;
	
	СтруктураПараметров = СтрокиВопроса.Получить(0).СтруктураПараметров;
	
	ИмяОписания = СформироватьТаблицуВопроса(Вопрос, СтруктураПараметров, "Вопросы", РодительГруппы);
	ЗаполнитьТаблицуВопроса(Вопрос, СтруктураПараметров, ИмяОписания);
	
	//++ Бей #407
	ПересчитатьИтогиПодвала(ИмяОписания);
	//--

	Если Вопрос.ИспользоватьОбработкуЗаполнения И ЗначениеЗаполнено(АдресДанныхДляЗаполнения) Тогда
				
		Если Не ЗначениеЗаполнено(Вопрос.АлгоритмОбработкиЗаполнения) Тогда
			Возврат;
		КонецЕсли;
		
		// ++ Тищенко В.В. 18.01.2019
		Если ЭтоАдресВременногоХранилища(АдресДанныхДляЗаполнения) Тогда
			ДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресДанныхДляЗаполнения);
		ИначеЕсли ТипЗнч(АдресДанныхДляЗаполнения) = Тип("Строка") Тогда
			ДанныеЗаполнения = ЗначениеИзСтрокиВнутр(АдресДанныхДляЗаполнения);
		КонецЕсли;
		// -- Тищенко В.В. 
		
		//Переменные
		ИдентификаторВопроса = ИмяОписания;
		ИмяТаблицы 			 = "Таблица_" + ИдентификаторВопроса;
		СхемаДанныхВопроса   = СхемаДанныхВопросов[ИдентификаторВопроса];	
		
		Попытка
			Выполнить(Вопрос.АлгоритмОбработкиЗаполнения);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить команду. Причина: '") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВСтруктуру(СтруктураДанных, СтрокаДанныхРаздела, РодительГруппы, УровеньИерархии, ДанныеДляЗаполнения)
	
	ВыводимыйРаздел = СтрокаДанныхРаздела.Значение; 
	
	ИмяЭлементаРаздела = вогУправлениеОпросамиКлиентСервер.ПолучитьИмяРеквизитаПоСсылке(ВыводимыйРаздел);
	
	НовыйЭлемент = Элементы.Добавить(ИмяЭлементаРаздела, Тип("ГруппаФормы"), РодительГруппы);
	НовыйЭлемент.Заголовок = СокрЛП(ВыводимыйРаздел);
	
	Если УровеньИерархии = 1 Тогда // СТРАНИЦА 
		
		//Элементы.РазделАнкетыПереключатель.СписокВыбора.Добавить(НовыйЭлемент.Имя, НовыйЭлемент.Заголовок);
		
		НовыйЭлемент.ВертикальнаяПрокруткаПриСжатии = Истина;
		
		Если ЗначениеЗаполнено(СтрокаДанныхРаздела.ИмяКартинки) Тогда
			НовыйЭлемент.Картинка = БиблиотекаКартинок[СтрокаДанныхРаздела.ИмяКартинки];
		КонецЕсли;
				
	Иначе // ГРУППА ВНУТРИ СТРАНИЦЫ
		
		НовыйЭлемент.Вид 					= ВидГруппыФормы.ОбычнаяГруппа;
				
		НовыйЭлемент.Поведение   			= ПоведениеОбычнойГруппы.Свертываемая;
		НовыйЭлемент.ОтображениеУправления 	= ОтображениеУправленияОбычнойГруппы.Картинка;
		
		Если ВыводимыйРаздел.РежимВыделенияГруппы = 1 Тогда
			НовыйЭлемент.Отображение 			= ОтображениеОбычнойГруппы.Нет;
		ИначеЕсли ВыводимыйРаздел.РежимВыделенияГруппы = 2 Тогда
			НовыйЭлемент.Отображение 			= ОтображениеОбычнойГруппы.ОбычноеВыделение;
		ИначеЕсли ВыводимыйРаздел.РежимВыделенияГруппы = 3 Тогда
			НовыйЭлемент.Отображение 			= ОтображениеОбычнойГруппы.СильноеВыделение;
		КонецЕсли;
		
		Если ВыводимыйРаздел.ПоГоризонтали Тогда
			НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Иначе 
			НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		КонецЕсли;
		
		Если ВыводимыйРаздел.Жирный ИЛИ  ВыводимыйРаздел.Наклонный ИЛИ  ВыводимыйРаздел.Подчеркнутый Тогда 
			
			НовыйЭлемент.ШрифтЗаголовка = Новый Шрифт(,,ВыводимыйРаздел.Жирный, ВыводимыйРаздел.Наклонный, ВыводимыйРаздел.Подчеркнутый);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыводимыйРаздел.Цвет) Тогда
			НовыйЭлемент.ЦветТекстаЗаголовка = WebЦвета[ВыводимыйРаздел.Цвет];
		КонецЕсли;
		
		НовыйЭлемент.ОтображатьЗаголовок = НЕ ВыводимыйРаздел.СкрытьЗаголовок;
		
	КонецЕсли;
	
	НовыйЭлемент.РастягиватьПоГоризонтали   = Истина;
	НовыйЭлемент.РастягиватьПоВертикали     = Ложь;
		
	ДобавитьОписание(НовыйЭлемент.Имя,,,, "Разделы", ВыводимыйРаздел);	
	
	ДобавитьРекурсивноЭлементыРазделов(СтруктураДанных, НовыйЭлемент, ДанныеДляЗаполнения, СтрокаДанныхРаздела.Значение, УровеньИерархии+1);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВСтруктуруЭлементарныйВопрос(ЭлементарныйВопрос, Раздел, РодительГруппы)  
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	СтруктураПоиска = Новый Структура("ЭлементарныйВопрос, Раздел", ЭлементарныйВопрос, Раздел);
	
	ПоискВопросаВТаблице = ТаблицаЭлементарныеВопросы.НайтиСтроки(СтруктураПоиска);
	
	Если ПоискВопросаВТаблице.Количество() = 0 Тогда
		ВызватьИсключение "В списке вопросов не оказалось вопроса из структуры"; 
	КонецЕсли;
	
	СтрокаТаблицы = ПоискВопросаВТаблице.Получить(0);
	
	ИмяОписания = ДобавитьРеквизитыДляЭлементарногоВопроса(СтрокаТаблицы, МассивДобавляемыхРеквизитов);
	
	// { VOG RMV 2019-02-06
	// для того, чтобы свойство «ТолькоПросмотр» формы работало на все добавляемые реквизиты, у них должно быть установлен в истину признак СохраняемыеДанные
	Для каждого ДобавляемыйРеквизит Из МассивДобавляемыхРеквизитов Цикл
		 ДобавляемыйРеквизит.СохраняемыеДанные = Истина;
	КонецЦикла;
	// } VOG RMV 2019-02-06

	//Создадим реквизиты
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ДобавитьЭлементыФормыЭлементарногоВопросаПоСтрокеТаблицы(СтрокаТаблицы, РодительГруппы, "Вопросы");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(Ссылка, ИмяРеквизита)
	Возврат Ссылка[ИмяРеквизита];
КонецФункции

Функция ЗаполнитьЗначениеКлассификатораПоПредыдущемуЗначению(ЗначениеПереданное, ИмяПоля)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеПереданное) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруткураИтог = Новый Структура;
	СтруткураИтог.Вставить("ТекстСообщения", "");
	СтруткураИтог.Вставить("Значение", Неопределено);
	
	Если ТипЗнч(ЗначениеПереданное) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
		|	CRM_ОбъектыЗначенийКлассификаторов.Аналитика КАК Аналитика,
		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора
		|ИЗ
		|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
		|ГДЕ
		|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец = &Владелец
		|	И CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Владелец", ЗначениеПереданное);
		Запрос.УстановитьПараметр("Объект", Объект.Респондент);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ЭтаФорма[ИмяПоля] 				= ВыборкаДетальныеЗаписи.ЗначениеКлассификатора;
			
			СтруткураИтог.ТекстСообщения 	= "Заполнено значением";
			СтруткураИтог.Значение			= СокрЛП(ВыборкаДетальныеЗаписи.ЗначениеКлассификатора);
			
			Модифицированность = Истина;
			
		КонецЦикла;
		
		
	ИначеЕсли ТипЗнч(ЗначениеПереданное) = Тип("СправочникСсылка.CRM_ЗначенияКлассификаторов") Тогда
		
		Если ЗначениеПереданное.Владелец.ВидОтображения = ПредопределенноеЗначение("Перечисление.CRM_ВидыОтображенияКлассификаторов.ДополнительныйРеквизит") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	вогАнкетаДополнительныеРеквизитыРеспондента.Значение КАК Значение,
			|	вогАнкетаДополнительныеРеквизитыРеспондента.Ссылка.Дата КАК Дата
			|ИЗ
			|	Документ.вогАнкета.ДополнительныеРеквизитыРеспондента КАК вогАнкетаДополнительныеРеквизитыРеспондента
			|ГДЕ
			|	вогАнкетаДополнительныеРеквизитыРеспондента.Ссылка <> &Ссылка
			|	И вогАнкетаДополнительныеРеквизитыРеспондента.Свойство = &Свойство
			|	И вогАнкетаДополнительныеРеквизитыРеспондента.Ссылка.Дата < &Дата
			|	И вогАнкетаДополнительныеРеквизитыРеспондента.Ссылка.Проведен
			|	И вогАнкетаДополнительныеРеквизитыРеспондента.Ссылка.Респондент = &Респондент
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата УБЫВ";
			
			Запрос.УстановитьПараметр("Свойство", ЗначениеПереданное.ДополнительныйРеквизит);
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			Запрос.УстановитьПараметр("Респондент", Объект.Респондент);
			Запрос.УстановитьПараметр("Дата", Объект.Дата);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ЭтаФорма[ИмяПоля] = ВыборкаДетальныеЗаписи.Значение;
				
				СтруткураИтог.ТекстСообщения 	= "Заполнено значением ";
				СтруткураИтог.Значение 			= СокрЛП(ВыборкаДетальныеЗаписи.Значение);
				
				Модифицированность = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруткураИтог;
	
КонецФункции

// -- Харченко Д.И. № 000002197 - 04.09.2018

&НаСервере
Процедура СформироватьДобавляемыеРеквизитыЭлементарныхВопросов(ТаблицаВопросов)  //4  TODO: Удалить при рефакторинге
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	Для каждого Строка Из ТаблицаВопросов Цикл
		ДобавитьРеквизитыДляЭлементарногоВопроса(Строка, МассивДобавляемыхРеквизитов);
	КонецЦикла;
	
	// { VOG RMV 2019-02-06
	// для того, чтобы свойство «ТолькоПросмотр» формы работало на все добавляемые реквизиты, у них должно быть установлен в истину признак СохраняемыеДанные
	Для каждого ДобавляемыйРеквизит Из МассивДобавляемыхРеквизитов Цикл
		 ДобавляемыйРеквизит.СохраняемыеДанные = Истина;
	КонецЦикла;
	// } VOG RMV 2019-02-06
	
	//Создадим реквизиты
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьРеквизитыДляЭлементарногоВопроса(СтрокаДерева, ДобавляемыеРеквизиты)
	
	ИмяВопроса = вогУправлениеОпросамиПовтИспСеанс.ПолучитьИмяРеквизитаПоСсылке(СтрокаДерева.ЭлементарныйВопрос, "Вопрос_");	
	
	//*** Описание
	//*** 18 июня 2019 г.
	//*** Блашин Евгений Игоревич VOG Начало
	СтрокаДерева.Вопрос = ИмяВопроса;
	//*** Блашин Евгений Игоревич VOG Окончание 
		
	ОписаниеТипаСтроки = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса + "_Формулировка", ОписаниеТипаСтроки,));
			
	Если СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Строка Тогда
		ОписаниеТипаСтроки = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(СтрокаДерева.Длина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,ОписаниеТипаСтроки,,СтрокаДерева.Формулировка));
		
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Текст Тогда
		ОписаниеТипаСтроки = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(СтрокаДерева.Длина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,ОписаниеТипаСтроки,,СтрокаДерева.Формулировка));
	
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Булево Тогда
		ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,ОписаниеТипаБулево,,СтрокаДерева.Формулировка));
		
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Дата Тогда
		ОписаниеТипаДата = Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,ОписаниеТипаДата,,СтрокаДерева.Формулировка));
		
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Число Тогда
		ОписаниеТипаЧисло = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(СтрокаДерева.Длина,СтрокаДерева.Точность));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,ОписаниеТипаЧисло,,СтрокаДерева.Формулировка));
	// +CRM
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.CRM_ВидКонтактнойИнформации Тогда
		ОписаниеТипаСтроки = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,ОписаниеТипаСтроки,,СтрокаДерева.Формулировка));			
	// -CRM
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ЗначениеИнформационнойБазы Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,СтрокаДерева.ТипЗначения,,СтрокаДерева.Формулировка));
	//--> VOG Бей В.В.  22.08.2018 14:31:06 ID заявки:000002158
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ОдинВариантИз Тогда
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,СтрокаДерева.ТипЗначения,,СтрокаДерева.Формулировка));
		
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
		
		ВариантыОтветовНаВопрос = ПолучитьВариантыОтветовНаВопрос(СтрокаДерева.ЭлементарныйВопрос);
		
		ОписаниеТипаСтроки = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150));
		ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
		
		Счетчик = 0;
						
		Для каждого ВариантОтвета Из ВариантыОтветовНаВопрос Цикл
			Счетчик = Счетчик + 1;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса + "_Реквизит_" + Счетчик,ОписаниеТипаБулево,,ВариантОтвета.Представление));
			Если ВариантОтвета.ТребуетОткрытогоОтвета Тогда
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса + "_Комментарий_" + Счетчик,ОписаниеТипаСтроки));
			КонецЕсли;
		КонецЦикла;

	//<-- VOG Бей В.В.  22.08.2018 14:31:07 ID заявки:000002158						
	КонецЕсли;
	
	Если (СтрокаДерева.ТипОтвета <> Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз) И (СтрокаДерева.ТребуетсяКомментарий) Тогда
		ОписаниеТипаСтроки = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса + "_Комментарий",ОписаниеТипаСтроки,,СтрокаДерева.ПояснениеКомментария));
		
	КонецЕсли;

	Возврат ИмяВопроса;
	
КонецФункции

&НаСервере
Функция ПолучитьВариантыОтветовНаВопрос(ЭлементарныйВопрос) //<-- VOG Бей В.В.  22.08.2018 14:30:04 ID заявки:000002158
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыОтветовАнкет.Ссылка КАК Ответ,
		|	ВариантыОтветовАнкет.Представление КАК Представление,
		|	ВариантыОтветовАнкет.ТребуетОткрытогоОтвета КАК ТребуетОткрытогоОтвета
		|ИЗ
		|	Справочник.ВариантыОтветовАнкет КАК ВариантыОтветовАнкет
		|ГДЕ
		|	ВариантыОтветовАнкет.Владелец = &ЭлементарныйВопрос";
	
	Запрос.УстановитьПараметр("ЭлементарныйВопрос", ЭлементарныйВопрос);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементыФормыЭлементарногоВопросаПоСтрокеТаблицы(СтрокаТаблицы, ЭлементГруппа, Ключ)
	
	ИмяВопроса = АнкетированиеКлиентСервер.ПолучитьИмяВопроса(СтрокаТаблицы.ЭлементарныйВопрос.УникальныйИдентификатор());
	
	
	// Зададим элемент группы для вопроса.
	ЭлементГруппаВопроса = Элементы.Добавить(ИмяВопроса + "_Группа" ,Тип("ГруппаФормы"),ЭлементГруппа);
	ЭлементГруппаВопроса.Вид                        = ВидГруппыФормы.ОбычнаяГруппа ;
	ЭлементГруппаВопроса.ОтображатьЗаголовок        = Ложь;
	ЭлементГруппаВопроса.Отображение                = ОтображениеОбычнойГруппы.Нет;
	ЭлементГруппаВопроса.Группировка                = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ЭлементГруппаВопроса.РастягиватьПоГоризонтали   = Истина;
	ЭлементГруппаВопроса.РастягиватьПоВертикали     = Ложь;
	
	ДобавитьОписание(ЭлементГруппаВопроса.Имя,,,, Ключ, СтрокаТаблицы.ЭлементарныйВопрос);
	
	ЭтотОбъект[ИмяВопроса + "_Формулировка"] = СтрокаТаблицы.Формулировка;
	Элемент = Элементы.Добавить(ИмяВопроса + "_Формулировка",Тип("ПолеФормы"),ЭлементГруппаВопроса);
	Элемент.Вид                   = ВидПоляФормы.ПолеНадписи;
	Элемент.ПоложениеЗаголовка    = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	Элемент.ПутьКДанным           = ИмяВопроса + "_Формулировка";

	Элемент.РастягиватьПоВертикали = Истина;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	
	ДобавитьОписание(Элемент.Имя, Элемент.ПутьКДанным,,, Ключ);
	
	ЭлементГруппаВопросКомментарий = Элементы.Добавить(ИмяВопроса + "_Группа_Вопрос_Комментарий",Тип("ГруппаФормы"),ЭлементГруппаВопроса);
	ЭлементГруппаВопросКомментарий.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементГруппаВопросКомментарий.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ЭлементГруппаВопросКомментарий.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ЭлементГруппаВопросКомментарий.ОтображатьЗаголовок = Ложь;
	
	ДобавитьОписание(Элемент.Имя,,,, Ключ);
	
	УстановитьОтметкуПустого = СтрокаТаблицы.Обязательный;
	
	Если СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Строка Тогда
		
		Элемент = Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ЭлементГруппаВопросКомментарий);
		Элемент.Вид                        = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка         = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.АвтоОтметкаНезаполненного  = СтрокаТаблицы.Обязательный;
		Элемент.ПутьКДанным                = ИмяВопроса;
		
	ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Текст Тогда
		
		Элемент = Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ЭлементГруппаВопросКомментарий);
		Элемент.Вид                       = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.АвтоОтметкаНезаполненного = СтрокаТаблицы.Обязательный;
		Элемент.ПутьКДанным               = ИмяВопроса;
		Элемент.РастягиватьПоВертикали    = Ложь;
		//УстановитьПараметрыЭлементаЯчейкаТекст(Элемент); 
		
	ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Булево Тогда
		
		Элемент = Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ЭлементГруппаВопросКомментарий);
		Элемент.Вид                = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным        = ИмяВопроса;
		
	ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Дата Тогда
		
		Элемент = Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ЭлементГруппаВопросКомментарий);
		Элемент.Вид                       = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.АвтоОтметкаНезаполненного = СтрокаТаблицы.Обязательный;
		Элемент.ПутьКДанным               = ИмяВопроса;
		
	ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Число Тогда
		
		Элемент = Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ЭлементГруппаВопросКомментарий);
		Элемент.Вид                       = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.АвтоОтметкаНезаполненного = СтрокаТаблицы.Обязательный;
		Элемент.МинимальноеЗначение       = ?(СтрокаТаблицы.МинимальноеЗначение = 0,Неопределено,СтрокаТаблицы.МинимальноеЗначение);
		Элемент.МаксимальноеЗначение      = ?(СтрокаТаблицы.МаксимальноеЗначение = 0,Неопределено,СтрокаТаблицы.МаксимальноеЗначение);
		Элемент.КнопкаВыбора              = Ложь;
		Элемент.ПутьКДанным               = ИмяВопроса;
		Если СтрокаТаблицы.МинимальноеЗначение <> 0 ИЛИ СтрокаТаблицы.МаксимальноеЗначение <> 0 Тогда
			Элемент.КнопкаРегулирования = Истина;
			
			ТекстПодсказки = "";
			Если СтрокаТаблицы.МинимальноеЗначение <> 0 И СтрокаТаблицы.МаксимальноеЗначение <> 0 Тогда
				ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Допустим ввод значения от %1 до %2'"),
					СтрокаТаблицы.МинимальноеЗначение, СтрокаТаблицы.МаксимальноеЗначение);
			ИначеЕсли СтрокаТаблицы.МинимальноеЗначение = 0 И СтрокаТаблицы.МаксимальноеЗначение <> 0 Тогда
				ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Допустим ввод значения до %1'"), СтрокаТаблицы.МаксимальноеЗначение);
			Иначе
				ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Допустим ввод значения от %1'"), СтрокаТаблицы.МинимальноеЗначение);
			КонецЕсли;
			
			Элемент.Подсказка = ТекстПодсказки;
			
		КонецЕсли;
	// +CRM
	ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.CRM_ВидКонтактнойИнформации Тогда
		
		Элемент = Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ЭлементГруппаВопросКомментарий);
		Элемент.Вид                         = ВидПоляФормы.ПолеВвода;
		Элемент.МногострочныйРежим          = Ложь;
		Элемент.ПоложениеЗаголовка          = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.АвтоОтметкаНезаполненного   = СтрокаТаблицы.Обязательный;
		Элемент.ПутьКДанным                 = ИмяВопроса;
		
		// ++ Харченко Д.И. №  - 10.09.2018 / 
		// ++ VOG Солодов В.В. 27.01.2021 DEV-64
		Если СтрокаТаблицы.CRM_ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			Элемент.КнопкаВыбора 			= Ложь;
			Элемент.КнопкаОчистки 			= Истина;
			Элемент.УстановитьДействие("ОкончаниеВводаТекста", "Подключаемый_ВидКонтактнойИнформацииОкончаниеВводаТекста");
			Элемент.УстановитьДействие("Очистка", "Подключаемый_ВидКонтактнойИнформацииОкончаниеВводаТекста");
		Иначе
		// -- VOG Солодов В.В. 27.01.2021 DEV-64
			Элемент.КнопкаВыбора 			= Истина;
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ВидКонтактнойИнформацииНачалоВыбора");
		КонецЕсли;
		
		Если СтрокаТаблицы.CRM_ВидКонтактнойИнформации.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
			
			Элемент.УстановитьДействие("Открытие", "Подключаемый_ВидКонтактнойИнформацииОткрытие");
			Элемент.КнопкаОткрытия				= Истина;			
			
			Элемент.РедактированиеТекста = Ложь;
			
		ИначеЕсли СтрокаТаблицы.CRM_ВидКонтактнойИнформации.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
			
			Элемент.РедактированиеТекста = Ложь;
			
		КонецЕсли;
		
		//Элемент.РедактированиеТекста 		= Ложь;
		
	// -CRM
	ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ЗначениеИнформационнойБазы Тогда
		
		Элемент = Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ЭлементГруппаВопросКомментарий);
		Элемент.Вид                       = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.АвтоОтметкаНезаполненного = СтрокаТаблицы.Обязательный;
		Элемент.ПутьКДанным               = ИмяВопроса;
		
	//--> VOG Бей В.В.  22.08.2018 14:29:38 ID заявки:000002158			
	ИначеЕсли  СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ОдинВариантИз Тогда
		
		УстановитьОтметкуПустого = Ложь;
		
		ВариантыОтветовНаВопрос = ПолучитьВариантыОтветовНаВопрос(СтрокаТаблицы.ЭлементарныйВопрос);
		
		Элемент = Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ЭлементГруппаВопросКомментарий);
		Элемент.Вид                     = ВидПоляФормы.ПолеПереключателя;
		Элемент.ПоложениеЗаголовка      = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным             = ИмяВопроса;
		Элемент.КоличествоКолонок       = 1;
		Элемент.ВысотаЭлемента          = 1;
		Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		
		Если СтрокаТаблицы.ЭлементарныйВопрос.ВидПереключателя = Перечисления.ВидыПереключателяВАнкетах.Тумблер Тогда
			Элемент.ВидПереключателя = ВидПереключателя.Тумблер;
			Элемент.КоличествоКолонок = 0;
			Элемент.ОдинаковаяШиринаКолонок = Ложь;
		Иначе
			Элемент.ВидПереключателя = ВидПереключателя.Переключатель;
			Элемент.КоличествоКолонок = 1;
		КонецЕсли;
		
		Для каждого ВариантОтвета Из ВариантыОтветовНаВопрос Цикл
			Элемент.СписокВыбора.Добавить(ВариантОтвета.Ответ,ВариантОтвета.Представление);
		КонецЦикла;
		
	ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
		
		УстановитьОтметкуПустого = Ложь;
		
		ВариантыОтветовНаВопрос = ПолучитьВариантыОтветовНаВопрос(СтрокаТаблицы.ЭлементарныйВопрос);
		
		Счетчик = 0;
		
		ЭлементГруппаВариантыОтветов = Элементы.Добавить(ИмяВопроса + "_Группа_Варианты",Тип("ГруппаФормы"),ЭлементГруппаВопросКомментарий);
		
		ЭлементГруппаВариантыОтветов.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппаВариантыОтветов.Отображение         = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппаВариантыОтветов.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ЭлементГруппаВариантыОтветов.ОтображатьЗаголовок = Ложь;
		
		Для каждого ВариантОтвета Из ВариантыОтветовНаВопрос Цикл
			
			Счетчик = Счетчик + 1;
			
			ЭлементГруппаВариантОтвета = Элементы.Добавить(ИмяВопроса + "_Группа_ВариантОтвета_" + Строка(Счетчик),Тип("ГруппаФормы"),ЭлементГруппаВариантыОтветов);
			
			ЭлементГруппаВариантОтвета.Вид                        = ВидГруппыФормы.ОбычнаяГруппа;
			ЭлементГруппаВариантОтвета.Отображение                = ОтображениеОбычнойГруппы.Нет;
			ЭлементГруппаВариантОтвета.Группировка                = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ЭлементГруппаВариантОтвета.ОтображатьЗаголовок        = Ложь;
			ЭлементГруппаВариантОтвета.РастягиватьПоГоризонтали   = Истина;
			
			ИмяРеквизитаВопроса = ИмяВопроса + "_Реквизит_" + Счетчик;
			Элемент = Элементы.Добавить(ИмяРеквизитаВопроса,Тип("ПолеФормы"),ЭлементГруппаВариантОтвета);
			
			Элемент.Вид                = ВидПоляФормы.ПолеФлажка;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			Элемент.ПутьКДанным        = ИмяРеквизитаВопроса;
			Элемент.ВысотаЗаголовка    = 1;
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементарныйВопросПриИзменении");
			
			Если ВариантОтвета.ТребуетОткрытогоОтвета Тогда
				ИмяРеквизитаКомментария = ИмяВопроса + "_Комментарий_" + Счетчик;
				Элемент = Элементы.Добавить(ИмяРеквизитаКомментария,Тип("ПолеФормы"),ЭлементГруппаВариантОтвета);
				Элемент.Вид 		= ВидПоляФормы.ПолеФлажка;
				Элемент.ПутьКДанным	= ИмяРеквизитаКомментария;
				Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			КонецЕсли;
			
			ДобавитьОписание(Элемент, Элемент.ПутьКДанным,,ВариантОтвета.Ответ, Ключ);
			
			// ++ VOG Солодов В.В. 20.02.2020 CRM-267
			Если Не ПустаяСтрока(СтрокаТаблицы.ОбработчикПриИзменении) Тогда
				
				НоваяСтрокаОбработчик = ТаблицаОбработчикиЭлементарныхВопросов.Добавить();
				НоваяСтрокаОбработчик.Вопрос = ИмяРеквизитаВопроса;
				
				Если СтрНачинаетсяС(СтрокаТаблицы.ОбработчикПриИзменении, "&НаСервере") Тогда
					НоваяСтрокаОбработчик.НаСервере = Истина;
					ОбработчикПриИзменении = СтрЗаменить(СтрокаТаблицы.ОбработчикПриИзменении, "&НаСервере", "");
				Иначе
					ОбработчикПриИзменении = СтрокаТаблицы.ОбработчикПриИзменении;
				КонецЕсли;
				
				НоваяСтрокаОбработчик.Обработчик = ОбработчикПриИзменении;
				НоваяСтрокаОбработчик.ВидСобытия = 0;
				
			КонецЕсли;
			// -- VOG Солодов В.В. 20.02.2020
			
		КонецЦикла;

		Элемент = Неопределено; 
		//<-- VOG Бей В.В.  22.08.2018 14:30:04 ID заявки:000002158	
		
	Иначе 
		
		УстановитьОтметкуПустого = Ложь;
		
	КонецЕсли;
	
	
	
	Если НЕ Элемент = Неопределено Тогда
		Если УстановитьОтметкуПустого Тогда
			Элемент.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;
		
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементарныйВопросПриИзменении");
	//START Кайдашов 29/07/19 481
	 Если Элемент.Вид = ВидПоляФормы.ПолеВвода И Не ПустаяСтрока(СтрокаТаблицы.ОбработчикНачалоВыбора) Тогда 
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ЭлементарныйВопросНачалоВыбора");
	КонецЕсли;	
		// ++ Солодов В.В.
		Если Не ПустаяСтрока(СтрокаТаблицы.ОбработчикПриИзменении) Тогда
			
			НоваяСтрокаОбработчик = ТаблицаОбработчикиЭлементарныхВопросов.Добавить();
			НоваяСтрокаОбработчик.Вопрос = Элемент.Имя;
						
			Если СтрНачинаетсяС(СтрокаТаблицы.ОбработчикПриИзменении, "&НаСервере") Тогда
				НоваяСтрокаОбработчик.НаСервере = Истина;
				ОбработчикПриИзменении = СтрЗаменить(СтрокаТаблицы.ОбработчикПриИзменении, "&НаСервере", "");
			Иначе
				ОбработчикПриИзменении = СтрокаТаблицы.ОбработчикПриИзменении;
			КонецЕсли;
			
			НоваяСтрокаОбработчик.Обработчик = ОбработчикПриИзменении;
			НоваяСтрокаОбработчик.ВидСобытия = 0;
	
		КонецЕсли;
		Если Не ПустаяСтрока(СтрокаТаблицы.ОбработчикНачалоВыбора) Тогда
			НоваяСтрокаОбработчик = ТаблицаОбработчикиЭлементарныхВопросов.Добавить();
			НоваяСтрокаОбработчик.Вопрос = Элемент.Имя;
			Если СтрНачинаетсяС(СтрокаТаблицы.ОбработчикНачалоВыбора, "&НаСервере") Тогда
				НоваяСтрокаОбработчик.НаСервере = Истина;
				Обработчик = СтрЗаменить(СтрокаТаблицы.ОбработчикНачалоВыбора, "&НаСервере", "");
			Иначе
				Обработчик = СтрокаТаблицы.ОбработчикНачалоВыбора;
			КонецЕсли;
			НоваяСтрокаОбработчик.Обработчик = Обработчик;
			НоваяСтрокаОбработчик.ВидСобытия = 1;
			Элемент.КнопкаСоздания = Ложь;
			Элемент.РедактированиеТекста = Ложь;
		КонецЕсли;
		// -- Солодов В.В.
	//END Кайдашов 29/07/19 481
		
		// ++ VOG Солодов В.В. 18.11.2019 task 888
		//Если Не СтрокаТаблицы.ОтветДляОчистки = Неопределено Тогда // VOG Солодов В.В. 28.01.2020 CRM-216 // Закомментировал
			
			ЭлементарныйВопрос = СтрокаТаблицы.ЭлементарныйВопрос;
			
			Для Каждого СтрокаЗависимоеПоле Из ЭлементарныйВопрос.ОчищаемыеПоля Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаЗависимоеПоле.Поле) Тогда
					Продолжить;
				КонецЕсли;
				
				ИдентификаторПоля = СтрокаЗависимоеПоле.Поле.УникальныйИдентификатор();
				
				НоваяСтрокаЗависимоеПоле = ТаблицаЗависимостиОчищаемыхПолей.Добавить();
				НоваяСтрокаЗависимоеПоле.Вопрос 			= Элемент.Имя;
				НоваяСтрокаЗависимоеПоле.Ответ 				= СтрокаТаблицы.ОтветДляОчистки;
				НоваяСтрокаЗависимоеПоле.ТипЗависимогоПоля 	= Строка(ТипЗнч(СтрокаЗависимоеПоле.Поле));
				НоваяСтрокаЗависимоеПоле.ЗависимоеПоле 		= АнкетированиеКлиентСервер.ПолучитьИмяВопроса(ИдентификаторПоля);
				НоваяСтрокаЗависимоеПоле.ОчищатьТаблицу 	= СтрокаЗависимоеПоле.ОчищатьТаблицу;
				НоваяСтрокаЗависимоеПоле.ЭлементарныйВопрос = ЭлементарныйВопрос;
				
			КонецЦикла;
		
		//КонецЕсли;
		// -- VOG Солодов В.В. 18.11.2019
		
	КонецЕсли;
	
	УстановитьЗначениеРеквизита(ИмяВопроса, СтрокаТаблицы);
	Если Элемент <> Неопределено Тогда
		ДобавитьОписание(Элемент, Элемент.ПутьКДанным,, СтрокаТаблицы.ЭлементарныйВопрос, Ключ);		
	КонецЕсли;
	
	// Комментарии к вопросам
	Если (СтрокаТаблицы.ТипОтвета <> Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз) И (СтрокаТаблицы.ТребуетсяКомментарий) Тогда
		Элемент             = Элементы.Добавить(ИмяВопроса + "_Комментарий",Тип("ПолеФормы"),ЭлементГруппаВопросКомментарий);
		Элемент.Вид         = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ИмяВопроса + "_Комментарий";
		
		ДобавитьОписание(Элемент, Элемент.ПутьКДанным,,, Ключ);
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеРеквизита(ИмяВопроса, СтрокаТаблицы)

	СтрокиОбъекта = Объект.Состав.НайтиСтроки(Новый Структура("ЭлементарныйВопрос", СтрокаТаблицы.ЭлементарныйВопрос));
	Если СтрокиОбъекта.Количество() > 0 Тогда
		//*** Описание
		//*** 18 июня 2019 г.
		//*** Блашин Евгений Игоревич VOG Начало
		
		ОтветПолучен = СтрокиОбъекта[0].ОтветПолучен;

		Если ОтветПолучен Тогда
			
			Элементы[ИмяВопроса + "_Группа"].ЦветФона	 = ЦветаСтиля.ДобавленныйРеквизитФон;
			//Элементы[ИмяВопроса + "_Группа"].Отображение = ОтображениеОбычнойГруппы.СильноеВыделение; 
		КонецЕсли;
		
		//*** Блашин Евгений Игоревич VOG Окончание 
		 
		Если СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Текст Тогда
			ЭтотОбъект[ИмяВопроса] = СтрокиОбъекта[0].ОткрытыйОтвет;
			
		//--> VOG Бей В.В.  22.08.2018 16:42:52 ID заявки:000002158
		ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
			Для Каждого СтрокаОтвет Из СтрокиОбъекта Цикл
				
				МассивРеквизитовОтвет = ТаблицаОписания.НайтиСтроки(Новый Структура("Ссылка",СтрокаОтвет.Ответ));
				Для Каждого РеквизитОтвет Из МассивРеквизитовОтвет Цикл
					ЭтотОбъект[РеквизитОтвет.ПутьКДанным] = Истина;	
				КонецЦикла;
				
			КонецЦикла;
		//<-- VOG Бей В.В.  22.08.2018 16:42:58 ID заявки:000002158	
		Иначе
			ЭтотОбъект[ИмяВопроса] = СтрокиОбъекта[0].Ответ;
			
			Если (СтрокаТаблицы.ТребуетсяКомментарий) Тогда
				ЭтотОбъект[ИмяВопроса + "_Комментарий"] = СтрокиОбъекта[0].ОткрытыйОтвет;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначениеРеквизита()

// +++ VOG Кулаков П.Л. 11.08.2020 CRM-672
&НаСервере
Функция ПолучитьСтруктуруКвалификатора(ТипОтвета)
	
	СтруктураКвалификатора = Новый Структура("ТипВопроса,КвалификаторыЧисла");
	ТипОтветаЧисло = СтрНайти(НРег(ТипОтвета),"число");
	Если ТипОтветаЧисло = 0 Тогда
		СтруктураКвалификатора.КвалификаторыЧисла = Новый КвалификаторыЧисла(15,2);
		СтруктураКвалификатора.ТипВопроса = ТипОтвета;
	Иначе
		СтруктураКвалификатора.ТипВопроса = "Число";
		ФорматЧисла = СтрЗаменить(НРег(ТипОтвета),"число","");
		ФорматЧисла = СтрЗаменить(ФорматЧисла,"(","");
		ФорматЧисла = СтрЗаменить(ФорматЧисла,")","");
		ФорматЧисла = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ФорматЧисла);
		Если ФорматЧисла = 0 ИЛИ ФорматЧисла = Неопределено Тогда 
			СтруктураКвалификатора.КвалификаторыЧисла = Новый КвалификаторыЧисла(15,2);
		Иначе
			ЦелаяЧасть = Цел(ФорматЧисла);
			ДробнаяЧасть = Цел((ФорматЧисла - Цел(ФорматЧисла)) * 10);
			СтруктураКвалификатора.КвалификаторыЧисла = Новый КвалификаторыЧисла(ЦелаяЧасть,ДробнаяЧасть);
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураКвалификатора;
	
КонецФункции // --- VOG Кулаков П.Л.

&НаСервере
Функция СформироватьТаблицуВопроса(Вопрос, СтруктураПараметров, Ключ, РодительГруппы)

	//УстановитьПривилегированныйРежим(Истина);
	
	ИмяОписания = "Вопрос_" + ИдентификаторЭлемента(Вопрос);
	
	//ОписаниеВопроса
 	СтруктураВопроса = Новый Структура;
	СтруктураВопроса.Вставить("Вопрос"								, Вопрос);
	СтруктураВопроса.Вставить("АлгоритмОбработкиОтветов"			, СтруктураПараметров.АлгоритмОбработкиОтветов);
	СтруктураВопроса.Вставить("ИспользоватьАлгоритмОбработкиОтветов", СтруктураПараметров.ИспользоватьАлгоритмОбработкиОтветов);
	СтруктураВопроса.Вставить("ИспользоватьОтборПоВариантамОтвета"  , СтруктураПараметров.ИспользоватьОтборПоВариантамОтвета);
	СтруктураВопроса.Вставить("ИспользоватьПоискПоОбъектуОпроса"    , СтруктураПараметров.ИспользоватьПоискПоОбъектуОпроса);
	СтруктураВопроса.Вставить("ПрикреплятьФайлы"    				, СтруктураПараметров.ПрикреплятьФайлы);
	СтруктураВопроса.Вставить("ДополнительнаяИнформация"    		, СтруктураПараметров.ДополнительнаяИнформация);
	СтруктураВопроса.Вставить("ОбработчикиСобытий"    				, СтруктураПараметров.ОбработчикиСобытий);
	
	МассивОписанияОбъектаОпроса = Новый Массив;	
	Для каждого Тип Из СтруктураПараметров.Колонки.ОбъектОпроса.ТипЗначения.Типы() Цикл
		Если Тип = Тип("Null") Тогда
			Продолжить;
		КонецЕсли;	
		
		МетаданныеОбъектаОпроса = Метаданные.НайтиПоТипу(Тип);
		Если МетаданныеОбъектаОпроса <> Неопределено Тогда
			ОписаниеОбъектаОпроса = Новый Структура;
			ОписаниеОбъектаОпроса.Вставить("Тип"          , Тип);
			ОписаниеОбъектаОпроса.Вставить("Представление", МетаданныеОбъектаОпроса.Представление());
			ОписаниеОбъектаОпроса.Вставить("ИмяФормы"     , МетаданныеОбъектаОпроса.ПолноеИмя() + ".ФормаОбъекта");
			
			МассивОписанияОбъектаОпроса.Добавить(ОписаниеОбъектаОпроса);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	СтруктураВопроса.Вставить("ОписанияОбъектаОпроса", МассивОписанияОбъектаОпроса);
	
	//Реквизиты
	МассивДобавляемыхРеквизитов = Новый Массив;                                              
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений"),,, Истина));
	
	//Колонки набора данных
	Для каждого ОписаниеКолонки Из СтруктураПараметров.Колонки Цикл
		
		Колонка = ОписаниеКолонки.Значение;
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяОписания, Колонка.Заголовок));
		
	КонецЦикла;
	
	//Колонки вариантов ответа
	Для каждого СтрокаВариантОтвета Из СтруктураПараметров.СоставВопроса Цикл
		ИмяКолонки = "ВариантОтвета_" + ИдентификаторЭлемента(СтрокаВариантОтвета.ВариантОтвета);
		//Кайдашов №407
		Если Вопрос.ДинамическоеФормированиеВариантовОтветов тогда
			// +++ VOG Кулаков П.Л. 11.08.2020 CRM-672
			СтруктураКвалификатора = ПолучитьСтруктуруКвалификатора(Вопрос.ТипЗначенияОтветаДинамическихВариантов);
			// --- VOG Кулаков П.Л.
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов(СтруктураКвалификатора.ТипВопроса,СтруктураКвалификатора.КвалификаторыЧисла,Новый КвалификаторыСтроки(200)), ИмяОписания, Строка(СтрокаВариантОтвета.ВариантОтвета)));
			// ++ VOG Солодов В.В. 08.10.2020 CRM-941
			Если СтрНайти(НРег(Вопрос.ТипЗначенияОтветаДинамическихВариантов), "число") > 0 Тогда
			// До изменения
			//Если НРег(Вопрос.ТипЗначенияОтветаДинамическихВариантов) = ("число") Тогда
			// -- VOG Солодов В.В. 08.10.2020 CRM-941
				СтрИтоги = ТаблицаПодвалИтоги.Добавить();	
				СтрИтоги.ИмяЭлемента = ИмяКолонки;  			
				СтрИтоги.ИмяТаблицы = ИмяОписания;
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтруктураПараметров.СоставВопроса) = Тип("СправочникСсылка.вогВариантыОтветов") и ЗначениеЗаполнено(СтруктураПараметров.СоставВопроса.ТипЗначенияОтвета) тогда
			// +++ VOG Кулаков П.Л. 11.08.2020 CRM-672
			СтруктураКвалификатора = ПолучитьСтруктуруКвалификатора(СтруктураПараметров.СоставВопроса.ТипЗначенияОтвета);
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов(СтруктураКвалификатора.ТипВопроса,СтруктураКвалификатора.КвалификаторыЧисла,Новый КвалификаторыСтроки(200)), ИмяОписания, Строка(СтрокаВариантОтвета.ВариантОтвета)));
			// --- VOG Кулаков П.Л.
			Если СтрНайти(НРег(Вопрос.ТипЗначенияОтветаДинамическихВариантов), "число") > 0 Тогда
			// До изменения
			//Если НРег(Вопрос.ТипЗначенияОтветаДинамическихВариантов) = ("число") Тогда
			// -- VOG Солодов В.В. 08.10.2020 CRM-941
				СтрИтоги = ТаблицаПодвалИтоги.Добавить();	
				СтрИтоги.ИмяЭлемента = ИмяКолонки;  			
				СтрИтоги.ИмяТаблицы = ИмяОписания;
			КонецЕсли;
		// ++ VOG Ульянов И.В. 04.10.2019	
		ИначеЕсли ТипЗнч(СтрокаВариантОтвета.ВариантОтвета) = Тип("СправочникСсылка.вогВариантыОтветов") и ЗначениеЗаполнено(СтрокаВариантОтвета.ВариантОтвета.ТипЗначенияОтвета) тогда
			// +++ VOG Кулаков П.Л. 11.08.2020 CRM-672
			СтруктураКвалификатора = ПолучитьСтруктуруКвалификатора(СтрокаВариантОтвета.ВариантОтвета.ТипЗначенияОтвета);
			Если НРег(СтруктураКвалификатора.ТипВопроса) = ("число") Тогда
				МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов(СтруктураКвалификатора.ТипВопроса,СтруктураКвалификатора.КвалификаторыЧисла), ИмяОписания, Строка(СтрокаВариантОтвета.ВариантОтвета)));
			ИначеЕсли НРег(СтруктураКвалификатора.ТипВопроса) = ("строка") Тогда
			// --- VOG Кулаков П.Л.
				МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(200)), ИмяОписания, Строка(СтрокаВариантОтвета.ВариантОтвета)));
			Иначе	
				МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов("Булево"), ИмяОписания, Строка(СтрокаВариантОтвета.ВариантОтвета)));
			КонецЕсли;
		// -- VOG Ульянов И.В. 04.10.2019	
		Иначе	
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов("Булево"), ИмяОписания, Строка(СтрокаВариантОтвета.ВариантОтвета)));
		КонецЕсли;
		
		//Колонки дополнительная информация
		Для каждого ОписаниеСвойства Из СтрокаВариантОтвета.ДополнительнаяИнформация Цикл
			ИмяКолонки = "ДополнительнаяИнформацияВариантОтвета_" + ИдентификаторЭлемента(СтрокаВариантОтвета.ВариантОтвета) + "_" + ИдентификаторЭлемента(ОписаниеСвойства.Свойство);
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеСвойства.ТипЗначения, ИмяОписания));
			
		КонецЦикла;
				
	КонецЦикла;
	
	//Колонки присоединенные файлы
	Если СтруктураПараметров.ПрикреплятьФайлы Тогда
		ИмяКолонки = "ПрисоединенныеФайлы" + ИмяОписания;
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов("ТаблицаЗначений"), ИмяОписания));
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПрисоединенныйФайл", Новый ОписаниеТипов("СправочникСсылка.вогАнкетаПрисоединенныеФайлы"), ИмяОписания + "." + ИмяКолонки));
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Наличие" + ИмяКолонки, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)), ИмяОписания));
		
	КонецЕсли;
	
	//Колонки дополнительная информация вопроса
	Для каждого ОписаниеСвойства Из СтруктураПараметров.ДополнительнаяИнформация Цикл
		ИмяКолонки = "ДополнительнаяИнформация" + ИмяОписания + "_" + ИдентификаторЭлемента(ОписаниеСвойства.Свойство);
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеСвойства.ТипЗначения, ИмяОписания));
		//++ Бей #407
		Если ОписаниеСвойства.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			СтрИтоги = ТаблицаПодвалИтоги.Добавить();	
			СтрИтоги.ИмяЭлемента = ИмяКолонки;  			
			СтрИтоги.ИмяТаблицы = ИмяОписания;
		КонецЕсли;
		//--
	КонецЦикла;
	
	//ИдентификаторСтроки
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИдентификаторСтроки", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)), ИмяОписания));
	
	//СтрокаОтбора
	Если СтруктураПараметров.ИспользоватьОтборПоВариантамОтвета Тогда
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СтрокаОтбора_" + ИмяОписания, Новый ОписаниеТипов("Строка")));
	КонецЕсли;
	
	//СтрокаПоиска
	Если СтруктураПараметров.ИспользоватьПоискПоОбъектуОпроса Тогда
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СтрокаПоиска_" + ИмяОписания, Новый ОписаниеТипов("Строка")));
	КонецЕсли;
	
	// { VOG RMV 2019-02-06
	// для того, чтобы свойство «ТолькоПросмотр» формы работало на все добавляемые реквизиты, у них должно быть установлен в истину признак СохраняемыеДанные
	Для каждого ДобавляемыйРеквизит Из МассивДобавляемыхРеквизитов Цикл
		 ДобавляемыйРеквизит.СохраняемыеДанные = Истина;
	КонецЦикла;
	// } VOG RMV 2019-02-06
	
	//Создадим реквизиты
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	//Элементы.ГруппаСтраницыВопросов
	//Элементы
	ЭлементСтраница 		 			  = Элементы.Вставить("Страница_" + ИмяОписания, Тип("ГруппаФормы"), РодительГруппы);
	ЭлементСтраница.Заголовок 			  = СтруктураПараметров.Представление;      
	ЭлементСтраница.Вид 	  			  = ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементСтраница.Поведение 		      = ПоведениеОбычнойГруппы.Свертываемая;
	ЭлементСтраница.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	ЭлементСтраница.Заголовок 			  = Вопрос;
	ЭлементСтраница.Группировка			  = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ДобавитьОписание(ЭлементСтраница.Имя,,,, Ключ, Вопрос);
		
	//ДекорацияФормулировка
	Если ЗначениеЗаполнено(СтруктураПараметров.Формулировка) Тогда
		ДекорацияФормулировка          				   = Элементы.Добавить("ДекорацияФормулировка_" + ИмяОписания, Тип("ДекорацияФормы"), ЭлементСтраница);
		ДекорацияФормулировка.Вид      				   = ВидДекорацииФормы.Надпись;
		ДекорацияФормулировка.Заголовок 			   = СтруктураПараметров.Формулировка;
		ДекорацияФормулировка.АвтоМаксимальнаяШирина   = Ложь;
		ДекорацияФормулировка.РастягиватьПоГоризонтали = Истина;
		
		ДобавитьОписание(ДекорацияФормулировка.Имя,,,, Ключ);
		
	КонецЕсли;
		
	//ФормированиеПанелиТаблицы
	Если СтруктураПараметров.ИспользоватьПоискПоОбъектуОпроса
	  ИЛИ СтруктураПараметров.ИспользоватьСозданиеОбъектаОпроса 
	  ИЛИ СтруктураПараметров.ИспользоватьОтборПоВариантамОтвета 
	  ИЛИ СтруктураПараметров.КомандыВопроса.Количество() > 0 Тогда
		ЭлементПанельТаблица 		 		     = Элементы.Добавить("ПанельТаблица_" + ИмяОписания, Тип("ГруппаФормы"), ЭлементСтраница);
		ЭлементПанельТаблица.Вид 	  			 = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементПанельТаблица.ОтображатьЗаголовок = Ложь;
		ЭлементПанельТаблица.Группировка		 = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		ДобавитьОписание(ЭлементПанельТаблица.Имя,,,, Ключ);
		
		//СтрокаОтбора
		Если СтруктураПараметров.ИспользоватьОтборПоВариантамОтвета Тогда
			ЭлементСтрокаОтбора     		        = Элементы.Добавить("СтрокаОтбора_" + ИмяОписания, Тип("ПолеФормы"), ЭлементПанельТаблица); 
			ЭлементСтрокаОтбора.ПутьКДанным         = "СтрокаОтбора_" + ИмяОписания;
			ЭлементСтрокаОтбора.Вид 		        = ВидПоляФормы.ПолеВвода;
			ЭлементСтрокаОтбора.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементСтрокаОтбора.ПодсказкаВвода      = НСтр("ru = 'отбор по варианту ответа...'");
			ЭлементСтрокаОтбора.РежимВыбораИзСписка = Истина;
			ЭлементСтрокаОтбора.КнопкаОчистки       = Истина;
			
			Для каждого СтрокаВариантОтвета Из СтруктураПараметров.СоставВопроса Цикл
				ИмяКолонки = "ВариантОтвета_" + ИдентификаторЭлемента(СтрокаВариантОтвета.ВариантОтвета);
				ЭлементСтрокаОтбора.СписокВыбора.Добавить(ИмяКолонки, Строка(СтрокаВариантОтвета.ВариантОтвета));
				
			КонецЦикла;
			
			ЭлементСтрокаОтбора.УстановитьДействие("ПриИзменении", "Подключаемый_СтрокаОтбораВопросаПриИзменении");
			
			ДобавитьОписание(ЭлементСтрокаОтбора.Имя, ЭлементСтрокаОтбора.ПутьКДанным,,, Ключ);
			
		КонецЕсли;
		
		//СтрокаПоиска
		Если СтруктураПараметров.ИспользоватьПоискПоОбъектуОпроса Тогда
			ЭлементСтрокаПоиска     		       = Элементы.Добавить("СтрокаПоиска_" + ИмяОписания, Тип("ПолеФормы"), ЭлементПанельТаблица); 
			ЭлементСтрокаПоиска.ПутьКДанным        = "СтрокаПоиска_" + ИмяОписания;
			ЭлементСтрокаПоиска.Вид 		       = ВидПоляФормы.ПолеВвода;
			ЭлементСтрокаПоиска.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементСтрокаПоиска.ПодсказкаВвода     = НСтр("ru = 'поиск по подстроке...'");
			ЭлементСтрокаПоиска.КнопкаОчистки      = Истина;
			
			ЭлементСтрокаПоиска.УстановитьДействие("ПриИзменении", "Подключаемый_СтрокаПоискаВопросаПриИзменении");
			
			ДобавитьОписание(ЭлементСтрокаПоиска.Имя, ЭлементСтрокаПоиска.ПутьКДанным,,, Ключ);
			
		КонецЕсли;
		
		//СозданиеОбъектаОпроса
		Если СтруктураПараметров.ИспользоватьСозданиеОбъектаОпроса
		  И СтруктураВопроса.ОписанияОбъектаОпроса.Количество() > 0 Тогда	
			ИмяКоманды = "СоздатьОбъектОпроса_" + ИмяОписания;
			
			КомандаСозданиеОбъектаОпроса 				= Команды.Добавить(ИмяКоманды);
			КомандаСозданиеОбъектаОпроса.Действие		= "Подключаемый_СоздатьОбъектОпроса";
			КомандаСозданиеОбъектаОпроса.Заголовок		= НСтр("ru = 'Создать'");
			КомандаСозданиеОбъектаОпроса.Картинка 		= БиблиотекаКартинок.СоздатьЭлементСписка;
			КомандаСозданиеОбъектаОпроса.Отображение	= ОтображениеКнопки.КартинкаИТекст;
			
			КнопкаСозданиеОбъектаОпроса 				= Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ЭлементПанельТаблица);
			КнопкаСозданиеОбъектаОпроса.ИмяКоманды  	= ИмяКоманды;
			
			// { VOG RMV 2019-02-28 task 164
			// Ограничение доступности в зависимости от статуса
			КнопкаСозданиеОбъектаОпроса.Доступность = ?(ЗначениеЗаполнено(Объект.Статус), Объект.Статус.РазрешеноРедактирование, Истина);
			// } VOG RMV 2019-02-28 task 164
			
			
			ДобавитьОписание(КнопкаСозданиеОбъектаОпроса.Имя,, ИмяКоманды,, Ключ);
			
		КонецЕсли;
		
		//КомандыВопроса
		Если СтруктураПараметров.КомандыВопроса.Количество() Тогда
			ПанельКомандыВопроса   		   = Элементы.Добавить("ПанельКомандыВопроса_" + ИмяОписания, Тип("ГруппаФормы"), ЭлементПанельТаблица);	
			ПанельКомандыВопроса.Вид	   = ВидГруппыФормы.КоманднаяПанель;	
			
			ГруппаКомандыВопроса   		   = Элементы.Добавить("ПодменюКомандыВопроса_" + ИмяОписания, Тип("ГруппаФормы"), ПанельКомандыВопроса);	
			//+Диденко
			//ГруппаКомандыВопроса.Вид	   = ВидГруппыФормы.Подменю;
			ГруппаКомандыВопроса.Вид	   = ВидГруппыФормы.ГруппаКнопок;
			//ГруппаКомандыВопроса.Заголовок = НСтр("ru = 'Действия...'");
			//-Диденко
			
			ДобавитьОписание(ГруппаКомандыВопроса.Имя,,,, Ключ);
			
			Для каждого СтрокаКоманды Из СтруктураПараметров.КомандыВопроса Цикл
				ИмяКоманды = "КомандаВопроса" + Формат(СтрокаКоманды.НомерСтроки, "ЧГ=") + "__" + ИмяОписания;
				
				КомандаВопроса 			  = Команды.Добавить(ИмяКоманды);
				КомандаВопроса.Действие	  = "Подключаемый_ОбработчикКомандыВопроса";
				КомандаВопроса.Заголовок  = СтрокаКоманды.Команда;
				
				КомандаВопроса 			  = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаКомандыВопроса);
				КомандаВопроса.ИмяКоманды = ИмяКоманды;
				
				// { VOG RMV 2019-02-28 task 164
				// Ограничение доступности в зависимости от статуса
				КомандаВопроса.Доступность = ?(ЗначениеЗаполнено(Объект.Статус), Объект.Статус.РазрешеноРедактирование, Истина);
				// } VOG RMV 2019-02-28 task 164
				
				// ++ Харченко Д.И. №  - 05.09.2018 / 
				
				Если ЗначениеЗаполнено(СтрокаКоманды.ИмяКартинки) Тогда
					КомандаВопроса.Картинка = БиблиотекаКартинок[СтрокаКоманды.ИмяКартинки];
					КомандаВопроса.Отображение = ОтображениеКнопки.КартинкаИТекст;
				КонецЕсли;
				
				НоваяСтрокаКоманды = КомандыВопросов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКоманды, СтрокаКоманды); 
				НоваяСтрокаКоманды.ИмяКоманды = ИмяКоманды;
				
				// -- Харченко Д.И. №  - 05.09.2018
				
				ДобавитьОписание(КомандаВопроса.Имя,, ИмяКоманды, СтрокаКоманды.Обработчик, Ключ);
				
			КонецЦикла;	
			
		КонецЕсли;
			
	КонецЕсли;
	
	//ФормированиеТаблицы
	ЭлементТаблица							 = Элементы.Добавить("Таблица_" + ИмяОписания, Тип("ТаблицаФормы"), ЭлементСтраница);
	ЭлементТаблица.ПутьКДанным				 = ИмяОписания;
	ЭлементТаблица.КоманднаяПанель.Видимость = Ложь;
	ЭлементТаблица.ПоложениеКоманднойПанели  = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементТаблица.ПоложениеЗаголовка		 = ПоложениеЗаголовкаЭлементаФормы.Нет;	
	//START Кайдашов 17/01/20 
	//ЭлементТаблица.ВысотаВСтрокахТаблицы 	 = 5;
	Если НЕ Вопрос.НеОграничиватьРазмерТаблицыНаФорме тогда
		ЭлементТаблица.ВысотаВСтрокахТаблицы 	 = 5;
	Иначе
		ЭлементТаблица.ВысотаВСтрокахТаблицы 	 = 15;
		ЭлементТаблица.МаксимальнаяВысота = 15;
	КонецЕсли;
	// ++ Харченко Д.И. №  - 07.09.2018 / Был установлен Подключаемый_ЗапретМодификацииСоставаНабораВопроса
	
	ЭлементТаблица.ГоризонтальныеЛинии 		= Ложь;
	ЭлементТаблица.ЦветФона					= ЦветаСтиля.ЦветФонаФормы;
	ЭлементТаблица.ЦветРамки				= ЦветаСтиля.ЦветФонаФормы;
	ЭлементТаблица.ЧередованиеЦветовСтрок	= Истина;
	
	ЭлементТаблица.УстановитьДействие("ПередНачаломДобавления"			, "Подключаемый_НабораВопросаПередНачаломДобавления");
	ЭлементТаблица.УстановитьДействие("ПередУдалением"        			, "Подключаемый_НабораВопросаПередУдалением");
	
	ЭлементТаблица.УстановитьДействие("ПриИзменении"        			, "Подключаемый_НабораВопросаПриИзменении");
	ЭлементТаблица.УстановитьДействие("ВыборЗначения"        			, "Подключаемый_НабораВопросаВыборЗначения");
	ЭлементТаблица.УстановитьДействие("ПередНачаломИзменения"        	, "Подключаемый_НабораВопросаПередНачаломИзменения");
	ЭлементТаблица.УстановитьДействие("ПередОкончаниемРедактирования"	, "Подключаемый_НабораВопросаПередОкончаниемРедактирования");
	ЭлементТаблица.УстановитьДействие("ПриОкончанииРедактирования"		, "Подключаемый_НабораВопросаПриОкончанииРедактирования");	
	ЭлементТаблица.УстановитьДействие("ПослеУдаления"					, "Подключаемый_НабораВопросаПослеУдаления");
	ЭлементТаблица.УстановитьДействие("ОбработкаЗаписиНового"        	, "Подключаемый_НабораВопросаОбработкаЗаписиНового");
	ЭлементТаблица.УстановитьДействие("ПриНачалеРедактирования"        	, "Подключаемый_НабораВопросаПриНачалеРедактирования");
	 
	// -- Харченко Д.И. №  - 07.09.2018
	ЭлементТаблица.УстановитьДействие("Выбор"        		  , "Подключаемый_НабораВопросаВыбор");
	ЭлементТаблица.УстановитьДействие("ОбработкаВыбора"       , "Подключаемый_НабораВопросаОбработкаВыбора");
	ЭлементТаблица.УстановитьДействие("ПриАктивизацииСтроки"  , "Подключаемый_НабораВопросаПриАктивизацииСтроки");
	
	ДобавитьОписание(ЭлементТаблица.Имя, ЭлементТаблица.ПутьКДанным,,Вопрос , Ключ);
	
	//++ Бей #407
	ЭлементТаблица.Подвал = Вопрос.ВыводитьПодвал;
	// --
	
	//Группа колонок // не понял зачем она
	//ЭлементГруппа = Элементы.Добавить("ГруппаНабораДанных_" + ИмяОписания, Тип("ГруппаФормы"), ЭлементТаблица);
	//ЭлементГруппа.Вид 		  	   = ВидГруппыФормы.ГруппаКолонок;
	//ЭлементГруппа.Группировка 	   = ГруппировкаКолонок.Горизонтальная;
	//ЭлементГруппа.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	
	//Колонки набора данных
	Для каждого ОписаниеКолонки Из СтруктураПараметров.Колонки Цикл
		
		Колонка = ОписаниеКолонки.Значение;
		
		ЭлементКолонка 			      = Элементы.Добавить("Колонка_" + Колонка.Имя + "_" + ИмяОписания, Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементКолонка.Вид			  = ВидПоляФормы.ПолеВвода;
		ЭлементКолонка.ПутьКДанным	  = ИмяОписания + "." + Колонка.Имя;
		ЭлементКолонка.ТолькоПросмотр = Истина;
		ЭлементКолонка.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
		
		// ++ Харченко Д.И. №  - 05.09.2018 / Прячем колонку объектотбора, если по ней устанавливается отбор
		//Если СтруктураПараметров.ИспользоватьПоискПоОбъектуОпроса И НРег(Колонка.Имя) = "объектопроса" Тогда
		//	ЭлементКолонка.Видимость = Ложь;	
		//КонецЕсли;
		
		Если Колонка.Ширина = 777 ИЛИ НРег(Колонка.Заголовок) = НРег("Видимость=Ложь") Тогда // служебное магическое число, -1 не работает, прячем если ширина такая
			ЭлементКолонка.Видимость = Ложь;	
		КонецЕсли;

		// -- Харченко Д.И. №  - 05.09.2018
		
	КонецЦикла;
	
	//Условное оформление доп. информации вопроса
	Если СтруктураПараметров.ДополнительнаяИнформация.Количество() > 0 Тогда
		ЭлементОформлениеВопрос = УсловноеОформление.Элементы.Добавить();
		Для каждого ОписаниеСвойства Из СтруктураПараметров.ДополнительнаяИнформация Цикл
			ИмяКолонкиСвойства = "ДополнительнаяИнформация" + ИмяОписания + "_" + ИдентификаторЭлемента(ОписаниеСвойства.Свойство);
			
			ПолеЭлементаОформления = ЭлементОформлениеВопрос.Поля.Элементы.Добавить();
			ПолеЭлементаОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиСвойства);
			
		КонецЦикла;
		
		ГруппаОтборЭлементаОформленияВопрос = ЭлементОформлениеВопрос.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборЭлементаОформленияВопрос.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
					
	КонецЕсли;
	
	//Колонки вариантов ответа
	СтруктураВариантовОтветов = Новый Соответствие;
	Для каждого СтрокаВариантОтвета Из СтруктураПараметров.СоставВопроса Цикл
		ИмяКолонки = "ВариантОтвета_" + ИдентификаторЭлемента(СтрокаВариантОтвета.ВариантОтвета);
		
		//ЭлементГруппа 				   = Элементы.Добавить("Группа" + ИмяКолонки, Тип("ГруппаФормы"), ЭлементТаблица);
		//ЭлементГруппа.Вид 		  	   = ВидГруппыФормы.ГруппаКолонок;
		//ЭлементГруппа.Группировка 	   = ГруппировкаКолонок.Горизонтальная;
		//ЭлементГруппа.ОтображатьВШапке = Истина;
		//ЭлементГруппа.Заголовок        = СтрокаВариантОтвета.ВариантОтвета;
		
		ЭлементКолонка 			     	  = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ЭлементТаблица);
		
		//Кайдашов 407	
		Если Вопрос.ДинамическоеФормированиеВариантовОтветов тогда
			
			Если НРег(Вопрос.ТипЗначенияОтветаДинамическихВариантов) = "булево" тогда
				ЭлементКолонка.Вид			 	  = ВидПоляФормы.ПолеФлажка;         
			Иначе
				ЭлементКолонка.Вид			 	  = ВидПоляФормы.ПолеВвода;         
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаВариантОтвета.ВариантОтвета) = тип("СправочникСсылка.вогВариантыОтветов") тогда 
			Если ЗначениеЗаполнено(СтрокаВариантОтвета.ВариантОтвета.ТипЗначенияОтвета) и НРег(СтрокаВариантОтвета.ВариантОтвета.ТипЗначенияОтвета) = "булево" тогда
				ЭлементКолонка.Вид			 	  = ВидПоляФормы.ПолеФлажка;         
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаВариантОтвета.ВариантОтвета.ТипЗначенияОтвета) тогда
				ЭлементКолонка.Вид			 	  = ВидПоляФормы.ПолеФлажка;         
			Иначе
				ЭлементКолонка.Вид			 	  = ВидПоляФормы.ПолеВвода;         
			КонецЕсли;
			
		Иначе	
			ЭлементКолонка.Вид			 	  = ВидПоляФормы.ПолеФлажка;         
		КонецЕсли;

		//START Кайдашов 24/06/19
		Если ТипЗнч(СтрокаВариантОтвета.ВариантОтвета) = Тип("СправочникСсылка.вогВариантыОтветов")  и НЕ СтрокаВариантОтвета.ВариантОтвета.ВыводитьЗаголовок тогда
			ЭлементКолонка.КартинкаШапки  	  = БиблиотекаКартинок.CRM_ПиктограммаТрендаНеопределен;
			ЭлементКолонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементКолонка.ОтображатьВШапке   = СтрокаВариантОтвета.ДополнительнаяИнформация.Количество() > 0;
		Иначе
			ЭлементКолонка.Заголовок        = Строка(СтрокаВариантОтвета.ВариантОтвета);
			ЭлементКолонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
			ЭлементКолонка.ОтображатьВШапке   = Истина;
		КонецЕсли;
		//END Кайдашов
		
		ЭлементКолонка.ПутьКДанным		  = ИмяОписания + "." + ИмяКолонки;
		
		ЭлементКолонка.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
		
		ЭлементКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ВариантОтветаПриИзменении");
		
		СтруктураВариантовОтветов.Вставить(ИмяКолонки,	Новый Структура("ВариантОтвета, ДополнительнаяИнформация, ТипОтвета", 
			СтрокаВариантОтвета.ВариантОтвета, СтрокаВариантОтвета.ДополнительнаяИнформация, СтруктураПараметров.ТипОтвета)
			);
		//Кайдашов 407
		Если Вопрос.ВыводитьПодвал Тогда
			СтрИтог = ТаблицаПодвалИтоги.НайтиСтроки(Новый Структура("ИмяЭлемента",ИмяКолонки));
			Если стрИтог.Количество()>0 тогда
				СтрИтогИндекс = ТаблицаПодвалИтоги.Индекс(СтрИтог[0]);
				ЭлементКолонка.ПутьКДаннымПодвала = "ТаблицаПодвалИтоги["+Строка(СтрИтогИндекс)+"].Итог";
				ЭлементКолонка.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;	
			КонецЕсли;
		КонецЕсли;
		//-
		
		//Колонки дополнительная информация
		Для каждого ОписаниеСвойства Из СтрокаВариантОтвета.ДополнительнаяИнформация Цикл
			ИмяКолонкиСвойства = "ДополнительнаяИнформация" + ИмяКолонки + "_" + ИдентификаторЭлемента(ОписаниеСвойства.Свойство);
			
			ЭлементКолонка = Элементы.Добавить(ИмяКолонкиСвойства, Тип("ПолеФормы"), ЭлементТаблица);
			ЭлементКолонка.ПутьКДанным = ИмяОписания + "." + ИмяКолонкиСвойства;
			ЭлементКолонка.Заголовок   = ОписаниеСвойства.Свойство;
			
			Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ОписаниеСвойства.ТипЗначения, Тип("Булево")) Тогда
				ЭлементКолонка.Вид = ВидПоляФормы.ПолеФлажка;
				
			Иначе	
				ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода;
				
				ПараметрыВыбораЗначений = Новый Массив;
				ПараметрыВыбораЗначений.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ОписаниеСвойства.Свойство));
				ЭлементКолонка.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЗначений);
				
			КонецЕсли;
						
			//Видимость
			ЭлементКолонка.Видимость = Не СтруктураПараметров.ИспользоватьОтборПоВариантамОтвета;
			
			ЭлементКолонка.ЦветФонаЗаголовка = ЦветаСтиля.ЦветФонаФормы;
			
			//Условное оформление
			ЭлементОформление = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлементаОформления = ЭлементОформление.Поля.Элементы.Добавить();
			ПолеЭлементаОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиСвойства);
			
			ОтборЭлементаОформления = ЭлементОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлементаОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОписания + "." + ИмяКолонки);
			ОтборЭлементаОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлементаОформления.ПравоеЗначение = Ложь;
			
			ЭлементОформление.Оформление.УстановитьЗначениеПараметра("Текст"		 , "");
			ЭлементОформление.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			
		КонецЦикла;
		
		//Условное оформление доп. информации вопроса
		Если СтруктураПараметров.ДополнительнаяИнформация.Количество() > 0 Тогда									
			ОтборЭлементаОформления = ГруппаОтборЭлементаОформленияВопрос.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлементаОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОписания + "." + ИмяКолонки);
			ОтборЭлементаОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлементаОформления.ПравоеЗначение = Ложь;
			
			// +++ VOG Кулаков П.Л. 19.07.2021 DEV-579
			// Не понятно зачем очищаются значения для дополнительной информации анкет
			//ЭлементОформлениеВопрос.Оформление.УстановитьЗначениеПараметра("Текст"		 , "");
			// --- VOG Кулаков П.Л.
			ЭлементОформлениеВопрос.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			
		КонецЕсли;
			
	КонецЦикла;	
	
	//Колонки присоединенные файлы
	Если СтруктураПараметров.ПрикреплятьФайлы Тогда
		ИмяКолонкиФайлов = "НаличиеПрисоединенныеФайлы" + ИмяОписания;
		
		ЭлементКолонка 			     	  = Элементы.Добавить(ИмяКолонкиФайлов, Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементКолонка.Вид			 	  = ВидПоляФормы.ПолеНадписи;         
		ЭлементКолонка.КартинкаШапки  	  = БиблиотекаКартинок.ЗакончитьРедактированиеФайла;     
		ЭлементКолонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементКолонка.ПутьКДанным		  = ИмяОписания + "." + ИмяКолонкиФайлов;
		ЭлементКолонка.ОтображатьВШапке   = Ложь;
		
	КонецЕсли;
	
	//Колонки дополнительная информация вопроса
	Для каждого ОписаниеСвойства Из СтруктураПараметров.ДополнительнаяИнформация Цикл
		ИмяКолонкиСвойства = "ДополнительнаяИнформация" + ИмяОписания + "_" + ИдентификаторЭлемента(ОписаниеСвойства.Свойство);
		
		ЭлементКолонка = Элементы.Добавить(ИмяКолонкиСвойства, Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементКолонка.ПутьКДанным = ИмяОписания + "." + ИмяКолонкиСвойства;
		ЭлементКолонка.Заголовок   = ОписаниеСвойства.Свойство;
		
		Если ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ОписаниеСвойства.ТипЗначения, Тип("Булево")) Тогда
			ЭлементКолонка.Вид = ВидПоляФормы.ПолеФлажка;
			
		Иначе	
			ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода;
			
			ПараметрыВыбораЗначений = Новый Массив;
			ПараметрыВыбораЗначений.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ОписаниеСвойства.Свойство));
			ЭлементКолонка.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЗначений);
			
		КонецЕсли;
		
		//++ Бей #407
		Если Вопрос.ВыводитьПодвал Тогда
			СтрИтог = ТаблицаПодвалИтоги.НайтиСтроки(Новый Структура("ИмяЭлемента",ИмяКолонкиСвойства));
			Для Каждого НайденнаяСтрИтог Из СтрИтог Цикл
				СтрИтогИндекс = ТаблицаПодвалИтоги.Индекс(НайденнаяСтрИтог);
				ЭлементКолонка.ПутьКДаннымПодвала = "ТаблицаПодвалИтоги["+Строка(СтрИтогИндекс)+"].Итог";
				ЭлементКолонка.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;	
			КонецЦикла;
		КонецЕсли;
		//--
	КонецЦикла;
			
	СхемаДанныхВопросов.Вставить(ИмяОписания, Новый Структура("СтруктураВопроса, СтруктураВариантовОтветов", СтруктураВопроса, СтруктураВариантовОтветов));
	
	Возврат ИмяОписания;
	
КонецФункции // СформироватьТаблицуВопроса()

&НаСервере
Процедура ЗаполнитьТаблицуВопроса(Вопрос, СтруктураПараметров, ИмяОписания)

	//++ Бей #407 - Изменен принцип обхода набора данных, ранее был только один цикл обхода, детальные строки читались только при заполнении вариантов ответов
	// теперь считываются все детальные записи сразу, это необходимо для корректного связывания набора данных с данными объекта по цникальному идентификатору
	Для каждого СтрокаДерева0 Из СтруктураПараметров.ДеревоНабораДанных.Строки Цикл
		ПерваяСтрока = Истина;
		Для каждого СтрокаДерева Из СтрокаДерева0.Строки Цикл
			//Кайдашов
			Если СтрокаДерева.ОбъектОпроса = СтрокаДерева0.ОбъектОпроса тогда
				Если ПерваяСтрока тогда 
					НоваяСтрока = ЭтаФорма[ИмяОписания].Добавить();	
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
					Если Не ЗначениеЗаполнено(НоваяСтрока.ИдентификаторСтроки) Тогда
						НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;	
					КонецЕсли;
					ПерваяСтрока = Ложь;
				КонецЕсли;
				ЗаполнитьЗначенияДополнительнойИнформацииВопроса(НоваяСтрока, Вопрос, СтруктураПараметров, Объект.ДополнительнаяИнформацияВопросов); 
				ЗаполнитьЗначенияВаринтовОтветов(НоваяСтрока, СтрокаДерева, СтруктураПараметров, Объект.ДополнительнаяИнформацияВариантовОтвета, Вопрос.ДинамическоеФормированиеВариантовОтветов); 
				Если СтруктураПараметров.ПрикреплятьФайлы Тогда
					ЗаполнитьПрисоединенныеФайлыСтрокиВопроса(НоваяСтрока, Вопрос, СтруктураПараметров, Объект.СоставОпросаПрисоединенныеФайлы);
				КонецЕсли;
			КонецЕсли;
			//END Кайдашов
		КонецЦикла;
	КонецЦикла;
	//--
	
КонецПроцедуры // ЗаполнитьТаблицуВопроса()

&НаСервереБезКонтекста
Процедура ЗаполнитьЗначенияДополнительнойИнформацииВопроса(НоваяСтрока, Вопрос, СтруктураПараметров, ДополнительнаяИнформация)

	ИмяОписания = "Вопрос_" + ИдентификаторЭлемента(Вопрос);
	
	//Дополнительная информация
	Для каждого ОписаниеСвойства Из СтруктураПараметров.ДополнительнаяИнформация Цикл
		СтрокиЗначенийСвойства = ДополнительнаяИнформация.НайтиСтроки(Новый Структура("Вопрос, ИдентификаторСтроки, Свойство", 
			Вопрос, НоваяСтрока.ИдентификаторСтроки, ОписаниеСвойства.Свойство)
		);
		Если СтрокиЗначенийСвойства.Количество() > 0 Тогда
			ИмяКолонкиСвойства = "ДополнительнаяИнформация" + ИмяОписания + "_" + ИдентификаторЭлемента(ОписаниеСвойства.Свойство);
			НоваяСтрока[ИмяКолонкиСвойства] = СтрокиЗначенийСвойства[0].Значение; 
			
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ЗаполнитьЗначенияДополнительнойИнформация()

&НаСервереБезКонтекста
Процедура ЗаполнитьЗначенияВаринтовОтветов(НоваяСтрока, СтрокаВариантовОтвета, СтруктураПараметров, ДополнительнаяИнформация, ДинамическоеФормированиеВариантовОтветов = Ложь) 

	Для каждого СтрокаСоставаВопроса Из СтруктураПараметров.СоставВопроса Цикл
		ИмяКолонки = "ВариантОтвета_" + ИдентификаторЭлемента(СтрокаСоставаВопроса.ВариантОтвета);
		//++ Бей #407
		//Для каждого СтрокаВариантовОтвета Из СтрокиВариантовОтвета Цикл
		//--
			Если СтрокаВариантовОтвета.ВариантОтвета = СтрокаСоставаВопроса.ВариантОтвета Тогда
				//Кайдашов 407
				//Если ТипЗнч(СтрокаВариантовОтвета.Ответ) = Тип("Булево") тогда
				Если НЕ ДинамическоеФормированиеВариантовОтветов И НЕ ЗначениеЗаполнено(СтрокаВариантовОтвета.ВариантОтвета.ТипЗначенияОтвета) Тогда //++ ВОГ Иванов С.А. 08.11.2019 bugs: 000000887 
					НоваяСтрока[ИмяКолонки] = СтрокаВариантовОтвета.Пометка; 
				Иначе
					НоваяСтрока[ИмяКолонки] = СтрокаВариантовОтвета.Ответ; 
				КонецЕсли;
				//конец Кайдашов 407
				Если СтрокаВариантовОтвета.Пометка Тогда
					//Дополнительная информация
					Для каждого ОписаниеСвойства Из СтрокаСоставаВопроса.ДополнительнаяИнформация Цикл
						СтрокиЗначенийСвойства = ДополнительнаяИнформация.НайтиСтроки(Новый Структура("ВариантОтвета, ИдентификаторСтроки, Свойство", 
							СтрокаВариантовОтвета.ВариантОтвета, НоваяСтрока.ИдентификаторСтроки, ОписаниеСвойства.Свойство)
						);
						Если СтрокиЗначенийСвойства.Количество() > 0 Тогда
							ИмяКолонкиСвойства = "ДополнительнаяИнформация" + ИмяКолонки + "_" + ИдентификаторЭлемента(ОписаниеСвойства.Свойство);
							НоваяСтрока[ИмяКолонкиСвойства] = СтрокиЗначенийСвойства[0].Значение; 
							
						КонецЕсли;
					
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		//++ Бей #407
		//КонецЦикла;
		//--		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначенияВаринтовОтветов()

&НаСервереБезКонтекста
Процедура ЗаполнитьПрисоединенныеФайлыСтрокиВопроса(НоваяСтрока, Вопрос, СтруктураПараметров, ПрисоединенныеФайлыОпроса)

	//Присоединенные файлы
	ИмяКолонкиФайлов = "ПрисоединенныеФайлыВопрос_" + ИдентификаторЭлемента(Вопрос);
	НоваяСтрока["Наличие" + ИмяКолонкиФайлов] = -1;

	СтрокиФайлов = ПрисоединенныеФайлыОпроса.НайтиСтроки(Новый Структура("Вопрос, ИдентификаторСтроки", Вопрос, НоваяСтрока.ИдентификаторСтроки));
	Если СтрокиФайлов.Количество() > 0 Тогда
		ТаблицаПрисоединенныеФайлы = НоваяСтрока[ИмяКолонкиФайлов];
		Для каждого СтрокаФайлов Из СтрокиФайлов Цикл
			НоваяСтрокаФайла = ТаблицаПрисоединенныеФайлы.Добавить();	
		    НоваяСтрокаФайла.ПрисоединенныйФайл = СтрокаФайлов.ПрисоединенныйФайл;

		КонецЦикла;
		
		НоваяСтрока["Наличие" + ИмяКолонкиФайлов] = ТаблицаПрисоединенныеФайлы.Количество();

	КонецЕсли;

КонецПроцедуры // ЗаполнитьПрисоединенныеФайлыСтрокиВопроса()

&НаСервере
Процедура ОбработатьДанныеВыбораНабораВопроса(ИмяЭлементаТаблицы, ВыбранноеЗначение)
	
	ИмяТаблицы = Элементы[ИмяЭлементаТаблицы].ПутьКДанным;
	
	НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
	НоваяСтрока.ОбъектОпроса = ВыбранноеЗначение;
	
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СправочникВопросы.СхемаКомпоновкиДанных,
		|	СправочникВопросы.ХранилищеСхемыКомпоновкиДанных,
		|	СправочникВопросы.ХранилищеНастроекКомпоновкиДанных
		|ИЗ
		|	Справочник.вогВопросы КАК СправочникВопросы
		|ГДЕ
		|	СправочникВопросы.Ссылка = &Вопрос";
	
	Запрос.УстановитьПараметр("Вопрос", СсылкаЭлемента(СтрЗаменить(ИмяТаблицы, "Вопрос_", ""), "Справочник.вогВопросы"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	НаборДанных = вогУправлениеОпросамиСервер.СформироватьНаборДанныхВопроса(Выборка, РеквизитыВариантаОпроса, Объект.Респондент, Объект.Проект, ВыбранноеЗначение, Объект.Ссылка, Объект.Дата);
	Если НаборДанных.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НаборДанных[0],, "ОбъектОпроса");
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось заполнить колонки данных созданного объекта опроса.'"));	
	КонецЕсли;
	
	Элементы[ИмяЭлементаТаблицы].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры // ОбработатьДанныеВыбораНабораВопроса()

&НаСервере
Процедура ОбработатьВходящиеДанныеСтроки(ВходящиеДанные) 

	ТаблицаВопроса = ЭтотОбъект[ВходящиеДанные.ИдентификаторВопроса];
	
	СтрокиВопроса = ТаблицаВопроса.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ВходящиеДанные.ИдентификаторСтроки));
	Для каждого СтрокаВопроса Из СтрокиВопроса Цикл
		СтрокаВопроса[ВходящиеДанные.ИмяКолонки] = ВходящиеДанные.Значение;
		
		Модифицированность = Истина;
		
	КонецЦикла;	

КонецПроцедуры // ОбработатьВходящиеДанныеСтроки()

&НаСервереБезКонтекста
Функция ИдентификаторЭлемента(Ссылка) Экспорт

	Возврат СтрЗаменить(XMLСтрока(Ссылка), "-", "_");	

КонецФункции // ИдентификаторЭлемента()

&НаСервереБезКонтекста
Функция СсылкаЭлемента(ИдентификаторЭлемента, ИмяМенеджераОбъекта)

	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераОбъекта);	
	Возврат МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(ИдентификаторЭлемента, "_", "-")));
	
КонецФункции // СсылкаЭлемента()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыВыбораРеспондента(Форма)
	
	СписокТипыРеспондента = Новый СписокЗначений;
	Типы = Форма.РеквизитыВариантаОпроса.ТипЗначения.Типы();
	Для Инд = 1 По Типы.Количество() Цикл
		СписокТипыРеспондента.Добавить(ИмяТаблицыПоСсылке(Новый(Типы[Инд - 1])));
	КонецЦикла;		
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("ТипыРеспондента.ИмяТаблиц", СписокТипыРеспондента));
	
	Форма.Элементы.Респондент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры // ЗаполнитьПараметрыВыбора()

&НаСервереБезКонтекста
Функция ИмяТаблицыПоСсылке(Ссылка)
	
	Возврат ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
	
КонецФункции // ИмяТаблицыПоСсылке()

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ВыполнитьОчисткуДобавленныхДанныхФормы()
	
	УсловноеОформление.Элементы.Очистить();
	//Элементы.РазделАнкетыПереключатель.СписокВыбора.Очистить();
	ТекущаяСтраницаАнкеты = "";
	
	МассивУдаляемыхРеквизитов = Новый Массив;

	Для каждого СтрокаОписания Из ТаблицаОписания Цикл
		Элемент = Элементы.Найти(СтрокаОписания.ИмяЭлемента);		
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОписания.ПутьКДанным) Тогда
			МассивУдаляемыхРеквизитов.Добавить(СтрокаОписания.ПутьКДанным);	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОписания.ИмяКоманды) Тогда
			Команда = Команды.Найти(СтрокаОписания.ИмяКоманды);
			Если Команда <> Неопределено Тогда
				Команды.Удалить(Команда);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	//Удалим реквизиты
	Если МассивУдаляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);	
	КонецЕсли;
	
	ТаблицаОписания.Очистить();
	
	КомандыВопросов.Очистить();

КонецПроцедуры // ВыполнитьОбработкуДанныхФормы()

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуОписания(Форма, ИмяЭлемента)

	Строки = Форма.ТаблицаОписания.НайтиСтроки(Новый Структура("ИмяЭлемента", ИмяЭлемента));	
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0]
	Иначе	
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции // НайтиСтрокуОписания()

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуКоманды(Форма, ИмяЭлемента)

	Строки = Форма.КомандыВопросов.НайтиСтроки(Новый Структура("ИмяКоманды", ИмяЭлемента));	
	Если Строки.Количество() Тогда
		Возврат Строки[0]
	Иначе	
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции // НайтиСтрокуКоманды()

&НаСервере
Процедура ДобавитьОписание(ИмяЭлемента, 
						   ПутьКДанным = "", 
						   ИмяКоманды = "", 
						   Ссылка = Неопределено, 
						   Ключ = "",
						   СсылкаДляВидимости = Неопределено) Экспорт

	НоваяСтрока = ТаблицаОписания.Добавить();	
	НоваяСтрока.ИмяЭлемента = ИмяЭлемента;
	НоваяСтрока.ПутьКДанным = ПутьКДанным;
	НоваяСтрока.ИмяКоманды  = ИмяКоманды;
	НоваяСтрока.Ссылка      = Ссылка;
	НоваяСтрока.Ключ	    = Ключ;
	НоваяСтрока.СсылкаДляВидимости      = СсылкаДляВидимости;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтраницуВопроса(Направление)

	Смещение = ?(Направление = "Вперед", 1, -1);
	
	КоллекцияСтраниц = Элементы.СтраницыРазделыАнкеты.ПодчиненныеЭлементы;
	
	Если Элементы.СтраницыРазделыАнкеты.ТекущаяСтраница = Неопределено Тогда
		ИндексТекущаяСтраница = 0;
	Иначе 		
		ИндексТекущаяСтраница = КоллекцияСтраниц.Индекс(Элементы.СтраницыРазделыАнкеты.ТекущаяСтраница);		
	КонецЕсли;
	
	ИндексСтраницыПерехода = ИндексТекущаяСтраница;
	
	Пока Истина Цикл 
		
		ИндексСтраницыПерехода = ИндексСтраницыПерехода + Смещение;
		
		СтраницаПерехода = КоллекцияСтраниц.Получить(ИндексСтраницыПерехода);
		
		Если СтраницаПерехода = Неопределено Тогда
			
			Прервать;
			
		Иначе 
			
			Если НЕ СтраницаПерехода.Видимость Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяСтраницаАнкеты = СтраницаПерехода.Имя;
			
			УстановитьАктивнуюСтраницуАнкеты(ЭтаФорма);
			УстановитьДоступностьКнопокДалее(ЭтаФорма);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ИзменитьСтраницуВопроса()

&НаКлиенте
Функция МассивПрисоединенныхФайловСтрокиВопроса(ТаблицаПрисоединенныеФайлы)

	МассивФайлов = Новый Массив;
	Для каждого СтрокаФайла Из ТаблицаПрисоединенныеФайлы Цикл
		МассивФайлов.Добавить(СтрокаФайла.ПрисоединенныйФайл);	
	
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции // МассивПрисоединенныхФайловСтрокиВопроса()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	//Элементы.Респондент.ТолькоПросмотр = Ложь;
	Если Форма.РеквизитыВариантаОпроса.РегистрироватьНовогоРеспондента = Истина Тогда
		
		Если Объект.Проведен Тогда
			
			Элементы.ГруппаРеспондент.ТекущаяСтраница = Элементы.ГруппаВыборРеспондента;	
			Элементы.Респондент.ТолькоПросмотр = Истина;

		Иначе	
			
			Элементы.ГруппаРеспондент.ТекущаяСтраница = Элементы.ГруппаРегистрацияРеспондента;	
			
		КонецЕсли;
	Иначе	
		Элементы.ГруппаРеспондент.ТекущаяСтраница = Элементы.ГруппаВыборРеспондента;	
	КонецЕсли;
	
	Элементы.ВариантОпроса.ТолькоПросмотр = Объект.ВариантОпроса.ЗапретитьВыборПользователем;
	
	Элементы.Респондент.Видимость = НЕ Объект.ВариантОпроса.НеТребоватьЗаполнениеРеспондента;
	
КонецПроцедуры // УстановитьВидимостьДоступность()

&НаКлиенте
Функция ПолучитьОбработчикСобытия(СхемаДанныхВопроса, ИмяСобытия, КодПоУмолчанию=Неопределено)
	
	ТекущийКод = СхемаДанныхВопроса.СтруктураВопроса.ОбработчикиСобытий.Получить(ПредопределенноеЗначение("Перечисление.вогСобытияВопросов." + ИмяСобытия));
	
	Если НЕ ЗначениеЗаполнено(ТекущийКод) И ЗначениеЗаполнено(КодПоУмолчанию) Тогда
		ТекущийКод = КодПоУмолчанию;
	КонецЕсли;
	
	Возврат ТекущийКод;
	
КонецФункции // ПолучитьОбработчикСобытия()

#Область ПрограммноеСозданиеСтатусов

&НаСервере
Процедура РазрешеноРедактирование()

	ТолькоПросмотр = НЕ Объект.Статус.РазрешеноРедактирование;	
	
КонецПроцедуры

&НаСервере
Процедура ДоступностьЭлементовФормыПоСтатусу()
	
	Если ЗначениеЗаполнено(Объект.Статус) Тогда
		
		ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.вогАнкета);
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ШаблоныСтатусов.НастроитьДоступностьРеквизитов КАК НастроитьДоступностьРеквизитов
		// { VOG RMV 2019-02-06
		|	,
		|	ШаблоныСтатусов.РазрешеноРедактирование КАК РазрешеноРедактирование
		// } VOG RMV 2019-02-06		
		|ИЗ
		|	Справочник.вогШаблоныСтатусов КАК ШаблоныСтатусов
		|ГДЕ
		|	ШаблоныСтатусов.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДоступности.Свойство КАК Свойство,
		|	ТаблицаДоступности.Доступность КАК Доступность
		|ИЗ
		|	Справочник.вогШаблоныСтатусов.НастройкаДоступности КАК ТаблицаДоступности
		|ГДЕ
		|	ТаблицаДоступности.Ссылка = &Ссылка
		|	И ТаблицаДоступности.ОбъектМетаданных = &ОбъектМетаданных");
		Запрос.УстановитьПараметр("Ссылка", Объект.Статус);
		Запрос.УстановитьПараметр("ОбъектМетаданных",ИдентификаторОбъекта);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаИЗРезультатаЗапроса = РезультатЗапроса[0].Выбрать();
		// { VOG RMV 2019-02-06
		//Если ВыборкаИЗРезультатаЗапроса.Следующий() И ВыборкаИЗРезультатаЗапроса.НастроитьДоступностьРеквизитов = Истина Тогда
		Если ВыборкаИЗРезультатаЗапроса.Следующий() Тогда
			ТолькоПросмотр = НЕ ВыборкаИЗРезультатаЗапроса.РазрешеноРедактирование;
			Если ВыборкаИЗРезультатаЗапроса.НастроитьДоступностьРеквизитов = Истина Тогда
		// } VOG RMV 2019-02-06
			ВыборкаНастройкаДоступности = РезультатЗапроса[1].Выбрать();
			Для каждого ТекущийЭлементФормы Из Элементы Цикл
				Если ТипЗнч(ТекущийЭлементФормы) = Тип("ПолеФормы") Тогда
					Если ВыборкаНастройкаДоступности.НайтиСледующий(Новый Структура("Свойство", ТекущийЭлементФормы.ПутьКДанным)) Тогда
						ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ТекущийЭлементФормы.Имя, "ТолькоПросмотр", НЕ ВыборкаНастройкаДоступности.Доступность);
						ВыборкаНастройкаДоступности.Сбросить();
					Иначе
						ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ТекущийЭлементФормы.Имя, "ТолькоПросмотр", Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		// { VOG RMV 2019-02-06
			КонецЕсли;
		// } VOG RMV 2019-02-06	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПроверитьНаДубль(Отказ) // ++ Тищенко В.В.

	МассивОписанийОбъектов = Новый Массив;
	
	Для каждого СтрокаТаблицы Из ТаблицаЭлементарныеВопросы Цикл
		Если СтрокаТаблицы.вогПроверкаНаДубль Тогда		
			ОбщаяСтруктура = СформироватьПоляПроверкиНаДубль(СтрокаТаблицы.ЭлементарныйВопрос
																,СтрокаТаблицы.CRM_ИмяСправочника
																,СтрокаТаблицы.CRM_ВидКонтактнойИнформации);
			//Кайдашов #362(добавил параметр ДополнительныеПараметры)													
			Если ЕстьДубли(ОбщаяСтруктура.ОбъектПоиска, ОбщаяСтруктура.СтруктураПоиска, ОбщаяСтруктура.СписокКонтактов,,,Объект.Респондент,ОбщаяСтруктура.ДополнительныеПараметры) Тогда 
				МассивОписанийОбъектов.Добавить(
				Новый Структура("Объект, ПолноеИмя, СтруктураПоиска, СтруктураОбъекта",
				ОбщаяСтруктура.ОбъектПоиска, "Справочник."+СтрокаТаблицы.CRM_ИмяСправочника, ОбщаяСтруктура.СтруктураПоиска, ОбщаяСтруктура.СписокКонтактов));
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла; 
		
	Если МассивОписанийОбъектов.Количество() > 0 Тогда
		Отказ 			= Истина;
		ПараметрыФормы 	= Новый Структура;
		ПараметрыФормы.Вставить("МассивОписанийОбъектов"	, МассивОписанийОбъектов);
		ПараметрыФормы.Вставить("ТекущаяСсылка"				, Объект.Респондент);
		ОткрытьФорму("ОбщаяФорма.вогФормаНайденныхДублей"	, ПараметрыФормы,ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // -- Тищенко В.В.
 
&НаСервере
Функция СформироватьПоляПроверкиНаДубль(ЭлементарныйВопрос,ИмяСправочника,ВидКонтактнойИнформации) // ++ Тищенко В.В.

	ОбъектПоиска 	= Новый Структура;
	ОбъектПоиска.Вставить("Ссылка", ПредопределенноеЗначение("Справочник."+ИмяСправочника+".ПустаяСсылка"));
	СписокКонтактов = Новый Структура; 
	СтруктураПоиска = Новый Структура;
	//START Кайдашов #362
	ДополнительныеПараметраПоиска = Неопределено;
	//END Кайдашов #362
	
	ИмяРеквизита 		= вогУправлениеОпросамиПовтИспСеанс.ПолучитьИмяРеквизитаПоСсылке(ЭлементарныйВопрос, "Вопрос_");
	ЗначениеРеквизита 	= ЭтаФорма[ИмяРеквизита];
	
	// ++ VOG Солодов В.В. 01.04.2019
	Если ИмяСправочника = "КонтактныеЛицаПартнеров" Тогда
		
		ОбъектПоиска.Вставить("Наименование", ЗначениеРеквизита);
		СтруктураПоиска.Вставить("Наименование", "=");
	// -- VOG Солодов В.В. 01.04.2019
		
	ИначеЕсли ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка() Тогда  // ++ Тищенко В.В.
		ОбъектПоиска.Вставить(ЭлементарныйВопрос.CRM_ИмяРеквизита,ЗначениеРеквизита);
		СтруктураПоиска.Вставить(ЭлементарныйВопрос.CRM_ИмяРеквизита, "ПОДОБНО");
	Иначе
		
		Если ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			СтруктураПоиска.Вставить("Контакт_Адрес"				, "ПОДОБНО");
			ОбъектПоиска.Вставить("Адрес"							, ЗначениеРеквизита);
			СписокКонтактов.Вставить("Адрес"						, ЗначениеРеквизита);
			//START Кайдашов #362
			ДополнительныеПараметраПоиска = Новый Структура;
			ДополнительныеПараметраПоиска.Вставить("Адрес",ВидКонтактнойИнформации);
			//END Кайдашов #362
		ИначеЕсли ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			СтруктураПоиска.Вставить("Контакт_Телефон"				, "ПОДОБНО");
			ОбъектПоиска.Вставить("Телефон" 						, ЗначениеРеквизита);
			СписокКонтактов.Вставить("Телефон"						, ЗначениеРеквизита);
		ИначеЕсли ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СтруктураПоиска.Вставить("Контакт_АдресЭлектроннойПочты", "ПОДОБНО");
			ОбъектПоиска.Вставить("АдресЭлектроннойПочты" 			, ЗначениеРеквизита);
			СписокКонтактов.Вставить("АдресЭлектроннойПочты"		, ЗначениеРеквизита);
		ИначеЕсли ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			СтруктураПоиска.Вставить("Контакт_ВебСтраница"			, "ПОДОБНО");
			ОбъектПоиска.Вставить("ВебСтраница" 					, ЗначениеРеквизита);
			СписокКонтактов.Вставить("ВебСтраница"					, ЗначениеРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	ОбщаяСтруктура = Новый Структура;
	ОбщаяСтруктура.Вставить("СтруктураПоиска"	, СтруктураПоиска);
	ОбщаяСтруктура.Вставить("ОбъектПоиска"		, ОбъектПоиска);
	ОбщаяСтруктура.Вставить("СписокКонтактов"	, СписокКонтактов);
	//START Кайдашов #362
   	ОбщаяСтруктура.Вставить("ДополнительныеПараметры"	, ДополнительныеПараметраПоиска);
	//END Кайдашов #362
	Возврат ОбщаяСтруктура;
		
КонецФункции // -- Тищенко В.В.

// ++ Тищенко В.В
//Кайдашов #362 (добавил параметр ДополнительныеПараметры)
&НаСервереБезКонтекста
Функция ЕстьДубли(Знач Объект, Знач СтруктураПоиска, Знач СписокКонтактов, Знач ТочноеСоответствие = Ложь, МассивДублей=Неопределено,ТекущийОбъект,ДополнительныеПараметры = Неопределено)
		
	МассивНайденныхДублей 	= Новый Массив;
	МассивДублей 			= вогОбщегоНазначения.НайтиДубли(Объект, СтруктураПоиска, СписокКонтактов, ТочноеСоответствие,ДополнительныеПараметры);
	
	Для каждого Стр Из МассивДублей Цикл
		Если Стр.Ссылка <> ТекущийОбъект Тогда
			МассивНайденныхДублей.Добавить(Стр.Ссылка);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат МассивНайденныхДублей.Количество() > 0;
	
КонецФункции // -- Тищенко В.В 

//++ Бей #407
&НаСервере
Процедура ПересчитатьИтогиПодвала(ИмяТаблицы)
			
	ТаблицаПересчет = ЭтаФорма[ИмяТаблицы];
	
	Для Каждого СтрИтог Из ТаблицаПодвалИтоги.НайтиСтроки(Новый Структура("ИмяТаблицы",ИмяТаблицы)) Цикл
		СтрИтог.Итог = ТаблицаПересчет.Итог(СтрИтог.ИмяЭлемента);
	КонецЦикла;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 23.01.2020 CRM-141
&НаСервере
Процедура СформироватьПредставлениеВложений()
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры // -- VOG Солодов В.В. 23.01.2020

#КонецОбласти

//+Классификаторы
#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_Команда_ЗаполнитьПоПредыдущему_(Команда)
	
	ИдентификаторПоля = СтрЗаменить(Команда.Имя, "Команда_ЗаполнитьПоПредыдущему_", "");
	
	ПоискСтрокОписания = ТаблицаОписания.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
	
	Для Каждого Стр из ПоискСтрокОписания Цикл 
		
		Если НЕ ЗначениеЗаполнено(Стр.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатЗаполнения = ЗаполнитьЗначениеКлассификатораПоПредыдущемуЗначению(Стр.Ссылка, ИдентификаторПоля);
		
		Если НЕ РезультатЗаполнения = Неопределено И ЗначениеЗаполнено(РезультатЗаполнения.ТекстСообщения) Тогда
			
			ПоказатьОповещениеПользователя(РезультатЗаполнения.ТекстСообщения,, РезультатЗаполнения.Значение);
			
		Иначе 
			
			ПоказатьОповещениеПользователя("Отсутствуют данные для заполнения");
						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
	ПересчитатьОтображенияПолейПоУсловиям(Элемент);
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
	ПересчитатьОтображенияПолейПоУсловиям(Элемент);
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
	
	//++ VOG Иванов С.А. 16.10.2019 ID заявки: 706
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Вопрос", Элемент.Имя);
	СтруктураОтбора.Вставить("ВидСобытия", 0);
	
	МассивОбработчиков = ТаблицаОбработчикиКлассификаторов.НайтиСтроки(СтруктураОтбора);
 
	
	Если МассивОбработчиков.Количество() > 0 Тогда
		
		Если МассивОбработчиков[0].НаСервере Тогда
			
			Подключаемый_ОдиночноеЗначениеПриИзмененииСервер(Элемент.Имя, МассивОбработчиков[0].Обработчик);
			
		Иначе
			
			Попытка
				
				Выполнить(МассивОбработчиков[0].Обработчик);
								
			Исключение
				
				ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика при изменении'") + ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	//-- VOG Иванов С.А. 16.10.2019 ID заявки: 706
	
	ПересчитатьОтображенияПолейПоУсловиям(Элемент);
	
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

//++ VOG Иванов С.А. 16.10.2019 ID заявки: 706
&НаСервере
Процедура Подключаемый_ОдиночноеЗначениеПриИзмененииСервер(Знач ИмяЭлемента, Знач Обработчик)
	
	Попытка
		
		Выполнить(Обработчик);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика на сервере при изменении'") + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	сОтбора = Новый Структура;
	сОтбора.Вставить("Вопрос", Элемент.Имя);
	сОтбора.Вставить("ВидСобытия", 1);
	
	МассивОбработчиков = ТаблицаОбработчикиКлассификаторов.НайтиСтроки(сОтбора);
	Если МассивОбработчиков.Количество() > 0 Тогда
		Если МассивОбработчиков[0].НаСервере Тогда
			Подключаемый_ОдиночноеЗначениеНачалоВыбораСервер(Элемент.Имя, МассивОбработчиков[0].Обработчик,ДанныеВыбора,СтандартнаяОбработка);
		Иначе
			Попытка
				Выполнить(МассивОбработчиков[0].Обработчик);
			Исключение
				ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика Начало выбора'") + ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВхождениеПриИзмененииСервер(Знач ИмяЭлемента, Знач Обработчик)
	
	Попытка
		
		Выполнить(Обработчик);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика на сервере при изменении'") + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_Вхождение_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	сОтбора = Новый Структура;
	сОтбора.Вставить("Вопрос", Элемент.Имя);
	сОтбора.Вставить("ВидСобытия", 1);
	
	МассивОбработчиков = ТаблицаОбработчикиКлассификаторов.НайтиСтроки(сОтбора);
	Если МассивОбработчиков.Количество() > 0 Тогда
		Если МассивОбработчиков[0].НаСервере Тогда
			Подключаемый_Вхождение_НачалоВыбораСервер(Элемент.Имя, МассивОбработчиков[0].Обработчик,ДанныеВыбора,СтандартнаяОбработка);
		Иначе
			Попытка
				Выполнить(МассивОбработчиков[0].Обработчик);
			Исключение
				ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика Начало выбора'") + ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_Вхождение_НачалоВыбораСервер(Знач ИмяЭлемента, Знач Обработчик, ДанныеВыбора, СтандартнаяОбработка)
	
	Попытка
		Выполнить(Обработчик);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика на сервере при изменении'") + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры


//-- VOG Иванов С.А. 16.10.2019 ID заявки: 706

&НаСервере
Процедура Подключаемый_ОдиночноеЗначениеНачалоВыбораСервер(Знач ИмяЭлемента, Знач Обработчик, ДанныеВыбора, СтандартнаяОбработка)
	
	Попытка
		Выполнить(Обработчик);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика на сервере при изменении'") + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
	//++ VOG Иванов С.А. 16.10.2019 ID заявки: 706
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Вопрос", Элемент.Имя);
	СтруктураОтбора.Вставить("ВидСобытия", 0);
	
	МассивОбработчиков = ТаблицаОбработчикиКлассификаторов.НайтиСтроки(СтруктураОтбора);
                                
	 
	Если МассивОбработчиков.Количество() > 0 Тогда
		
		Если МассивОбработчиков[0].НаСервере Тогда
			
			Подключаемый_ВхождениеПриИзмененииСервер(Элемент.Имя, МассивОбработчиков[0].Обработчик);
			
		Иначе
			
			Попытка
				
				Выполнить(МассивОбработчиков[0].Обработчик);
								
			Исключение
				
				ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика при изменении'") + ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	//-- VOG Иванов С.А. 16.10.2019 ID заявки: 706
	
	ПересчитатьОтображенияПолейПоУсловиям(Элемент);
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)

	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_ТегиКлассификатора_Обновить()

#КонецОбласти
//-Классификаторы

#Область Подключаемый_МеханизмЗапускаБизнесПроцессов

&НаКлиенте
Процедура Подключаемый_ЗапускБизнесПроцесса(Команда)
	скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);
КонецПроцедуры // Подключаемый_ЗапускБизнесПроцесса()      

#КонецОбласти

#Область ПодключаемыеКоманды

#Область ПрограммноеСозданиеСтатусов
	
&НаКлиенте
Процедура Подключаемый_СтатусыДокументов(Команда)
	
	// ++ VOG Солодов В.В. 07.05.2020 CRM-628
	ТекущийСтатус = Объект.Статус;
	// -- VOG Солодов В.В. 07.05.2020
	// ++ VOG Солодов В.В. 13.05.2020 CRM-614
	Отказ = Ложь;
	ПроверитьНаДубль(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// -- VOG Солодов В.В. 13.05.2020
	
	ЭлементКоманды = Элементы.Найти("Элемент_" + Команда.Имя);
	// { VOG RMV 2019-02-26
	// Честно не понял, зачем пометка инвертируется. По логике, если кнопка нажата, значит пометка Истина, варианта «кнопка отжата» не должно быть
	//ЭлементКоманды.Пометка 			= Не ЭлементКоманды.Пометка;
	ЭлементКоманды.Пометка = Истина;
	// } VOG RMV 2019-02-26
	
	Для каждого КнопкаДокумента Из ЭтаФорма.СписокКнопок Цикл
		Если КнопкаДокумента.Значение <> ЭлементКоманды.Имя тогда
			Элементы[КнопкаДокумента.Значение].Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// ++ VOG Солодов В.В. 06.02.2020 CRM-269
	РежимЗаписи = Неопределено;
	// -- VOG Солодов В.В. 06.02.2020
	
	ИмяКоманды = Команда.Имя;
	// Выполнить действия обработчика статуса
	ТекстСобытия = ЭтаФорма["Обработчик_" + ИмяКоманды];

	// { VOG RMV 2019-02-06
	// перенес выше
	Если ТекстСобытия <>"" Тогда
		Выполнить(ТекстСобытия);
	КонецЕсли;
	// } VOG RMV 2019-02-06
	
	ИмяТаблицы 		= "ТаблицаКнопок";
	НайденныеСтроки = ЭтаФорма[ИмяТаблицы].НайтиСтроки(Новый Структура("ИмяКоманды",ИмяКоманды));
	
	Если НайденныеСтроки.Количество() <> 0 Тогда
		НайденнаяСтрока = НайденныеСтроки[0];
		Объект.Статус 	= НайденнаяСтрока.Статус;
	КонецЕсли;
	
	// { VOG RMV 2019-02-28
	//ЭтаФорма.Записать(Новый Структура("РежимЗаписи",ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение")));
	// ++ VOG Солодов В.В. 20.08.2019 task 583 
	// Вынесено в функцию ЗаписатьДокументНаСервере
	МассивЗадач = ЗаписатьДокументНаСервере(РежимЗаписи); // VOG Солодов В.В. 06.02.2020 CRM-269 // Добавлен параметр
	
	// ++ VOG Солодов В.В. 07.05.2020 CRM-628
	Если ОшибкаПриСменеСтатуса Тогда
		Объект.Статус = ТекущийСтатус;
		ЭлементКоманды.Пометка = Ложь;
	КонецЕсли;
	// -- VOG Солодов В.В. 07.05.2020
	
	Если МассивЗадач = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// До изменения
	//Попытка
	//	Записать(Новый Структура("РежимЗаписи", ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение")));
	//	ОшибкаПриСменеСтатуса = Ложь;
	//Исключение
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	//	ОшибкаПриСменеСтатуса = Истина;
	//	Возврат;
	//КонецПопытки;
	// -- VOG Солодов В.В. 20.08.2019
	// } VOG RMV 2019-02-28
	
	Если ЭлементКоманды.Пометка Тогда
		Подключаемый_ПерестроитьКнопкиПоУсловию(ИмяКоманды);
		ОповеститьОбИзменении(Объект.Ссылка);
	КонецЕсли;	
		
	// { VOG RMV 2019-02-06
	// перенес выше
	//Если ТекстСобытия <>"" Тогда
	//	Выполнить(ТекстСобытия);
	//КонецЕсли;
	// } VOG RMV 2019-02-06
	
	// { VOG RMV 2019-02-26
	// перенес в Подключаемый_ПерестроитьКнопкиПоУсловию
	//Подключаемый_ТочкаОбработкиСервер(КомандаИмя);
	//РазрешеноРедактирование();
	//ДоступностьЭлементовФормыПоСтатусу();
	// } VOG RMV 2019-02-26
	
	// { VOG RMV 2019-03-22
	ПропуститьПроверкуДублей = Ложь;	
	// } VOG RMV 2019-03-22
	
	// ++ VOG Солодов В.В. 19.08.2019 
	Для Каждого ЗадачаСсылка Из МассивЗадач Цикл
		Оповестить("ЗадачаВыполнена", 		Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", ЗадачаСсылка, Истина));
		Оповестить("ОбновитьНапоминания", 	Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	КонецЦикла;
	// -- VOG Солодов В.В. 19.08.2019
	
КонецПроцедуры

// ++ VOG Солодов В.В. 19.08.2019
&НаСервере
Функция ЗаписатьДокументНаСервере(РежимЗаписи = Неопределено) 
	
	МассивЗадач = Новый Массив;
	
	Попытка
		
		НачатьТранзакцию();
		
		// ++ VOG Солодов В.В. 06.02.2020 CRM-269
		Если РежимЗаписи = Неопределено Тогда
			СтруктураЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Иначе
			СтруктураЗаписи = Новый Структура("РежимЗаписи", РежимЗаписи);
		КонецЕсли;
		// До изменения
		//СтруктураЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		// -- VOG Солодов В.В. 06.02.2020
		
		Записать(СтруктураЗаписи);
		ОшибкаПриСменеСтатуса = Ложь;
		
		МассивЗадач = вогCRM_БизнесПроцессыОбщегоНазначения.ВыполнитьЗадачиПоАнкете(Объект.Ссылка, Объект.Статус);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОшибкаПриСменеСтатуса = Истина;
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат МассивЗадач;

КонецФункции
// -- VOG Солодов В.В. 19.08.2019

&НаКлиенте
Процедура ЗакрыватьПриСменеСтатуса()
	
	// { VOG RMV 2019-02-28
	Если ОшибкаПриСменеСтатуса = Истина Тогда Возврат; КонецЕсли;	
	// } VOG RMV 2019-02-28	
	
	// ++ VOG Солодов В.В. 06.10.2020 CRM-932
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДокументОснование", 	Объект.ДокументОснование);
	ПараметрыОповещения.Вставить("Предмет", 			Объект.Респондент);
	ПараметрыОповещения.Вставить("ВариантОпроса", 		Объект.ВариантОпроса);
	ПараметрыОповещения.Вставить("Статус", 				Объект.Статус);
	
	Оповестить("Документ.вогАнкета.Запись", ПараметрыОповещения, Объект.Ссылка);
	// -- VOG Солодов В.В. 06.10.2020 CRM-932
	
	Если Не ЭтотОбъект.Модифицированность Тогда
		Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ТочкаОбработкиСервер(Статус)

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СтатусыДокументовЭлементыСхемы.ИД КАК СТРОКА(150)) КАК ИД,
	|	СтатусыДокументовЭлементыСхемы.ИмяЭлемента КАК ИмяЭлемента,
	|	ВЫРАЗИТЬ(СтатусыДокументовЭлементыСхемы.НачалоЭлемента КАК СТРОКА(150)) КАК НачалоЭлемента,
	|	ВЫРАЗИТЬ(СтатусыДокументовЭлементыСхемы.КонецЭлемента КАК СТРОКА(150)) КАК КонецЭлемента,
	|	СтатусыДокументовЭлементыСхемы.ТипГрафическойСхемы КАК ТипГрафическойСхемы
	|ПОМЕСТИТЬ ВТ_Статусы
	|ИЗ
	|	Справочник.вогСостояниеПроцессов.ЭлементыСхемы КАК СтатусыДокументовЭлементыСхемы
	|ГДЕ
	|	СтатусыДокументовЭлементыСхемы.Ссылка = &ТекщаяСхема
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Статусы.КонецЭлемента КАК КонецЭлемента
	|ПОМЕСТИТЬ ВТ_СледующийСтатус
	|ИЗ
	|	ВТ_Статусы КАК ВТ_Статусы
	|ГДЕ
	|	ВТ_Статусы.НачалоЭлемента = &Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Статусы.ИД КАК ИД
	|ИЗ
	|	ВТ_Статусы КАК ВТ_Статусы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СледующийСтатус КАК ВТ_СледующийСтатус
	|		ПО ВТ_Статусы.ИД = ВТ_СледующийСтатус.КонецЭлемента
	|			И (ВТ_Статусы.ТипГрафическойСхемы = ЗНАЧЕНИЕ(Перечисление.вогТипыГрафическойСхемы.Обработка))");
	Запрос.УстановитьПараметр("Статус",Статус);
	Запрос.УстановитьПараметр("ТекщаяСхема",Объект.ВариантОпроса.СостояниеПроцессов);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		Если ВыборкаИзРезультатаЗапроса.Следующий() Тогда
			ИДОбработчика = ВыборкаИзРезультатаЗапроса.ИД;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрокаОбработчик = ЭтаФорма.ТекущаяСхема.Обработчики.НайтиСтроки(Новый Структура("ИД",ИДОбработчика));
	Если НайденнаяСтрокаОбработчик.Количество()<> 0 Тогда
		Настройки = НайденнаяСтрокаОбработчик[0].Настройки;
		Если Настройки <> "" Тогда
			ПолучениеНастройки 	= ЗначениеИзСтрокиВнутр(Настройки);
			ТекстВыполненения 	= ПолучениеНастройки.ТекстДействия;
			Выполнить(ТекстВыполненения);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ПерестроитьКнопкиПоУсловию(Знач ИмяКоманды)

	// { VOG RMV 2019-02-26
	//Записать(); //Записать(Новый Структура("РежимЗаписи",ПредопределенноеЗначение("РежимЗаписиДокумента.Запись")));
	//Попытка
	//	//ЭтаФорма.Записать(Новый Структура("РежимЗаписи",ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение")));
	//Исключение
	//	Возврат;
	//КонецПопытки;
	// } VOG RMV 2019-02-26	
		
	CRM_МодификацияКонфигурацииПереопределяемый.СоздатьСтатусыДокументов(ЭтаФорма,Истина);
	
	// { VOG RMV 2019-02-26
	// перенес из Подключаемый_СтатусыДокументов
	Подключаемый_ТочкаОбработкиСервер(ИмяКоманды);
	РазрешеноРедактирование();
	ДоступностьЭлементовФормыПоСтатусу();
	// } VOG RMV 2019-02-26
	
КонецПроцедуры 

#КонецОбласти

// ++ VOG Солодов В.В. 24.01.2020 CRM-106
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
// -- VOG Солодов В.В. 24.01.2020

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСтатусыПриСоздании()
	
	// + Программное создание статусов
	Если Объект.ВариантОпроса.ИспользоватьСостояниеПроцессов Тогда
		CRM_МодификацияКонфигурацииПереопределяемый.СоздатьСтатусыДокументов(ЭтаФорма
													,?(Элементы.КоманднаяПаенльФормыПрограммно.ПодчиненныеЭлементы.Количество() <> 0,Истина,Ложь));
		// { VOG RMV 2019-01-31
		//Элементы.КомандаПровестиИЗакрыть.Видимость = Ложь;		
		// } VOG RMV 2019-01-31		
	КонецЕсли;
	// - Программное создание статуосв	
	
КонецПроцедуры 

&НаСервере
Процедура ВидимостьСтатусаСогласования()

	Если ЗначениеЗаполнено(Объект.ВариантОпроса) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СтатусСогласования","Видимость",Объект.ВариантОпроса.ИспользоватьСтатусы);
	КонецЕсли;
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 26.10.2020 CRM-999
&НаКлиенте
Процедура Согласовать(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		УспешнаяЗапись = Записать();
		Если Не УспешнаяЗапись Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВидСогласования = Элементы[Команда.Имя].Заголовок;
	ПараметрыФормы = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("СогласоватьЗадачуЗавершение", ЭтотОбъект,Новый Структура("ВидСогласования",ВидСогласования));
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиРезультатВыполнения", 
			ПараметрыФормы, 
			ЭтотОбъект,
			,
			,
			, 
			ОписаниеОповещения,  
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 10.11.2020 CRM-999
&НаКлиенте
Процедура СогласоватьЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("Отказ") И Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	вогОбщегоНазначенияВызовСервера.СогласоватьЗадачи(ДополнительныеПараметры.ВидСогласования,Объект.Ссылка,Результат.РезультатВыполнения);
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласования(ЭтаФорма);

КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
&НаКлиенте
Процедура ОткрытьТекущуюЗадачу(Команда)
	
	ВыбраннаяЗадача = Неопределено;
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		ВыбраннаяЗадача = ТекущаяЗадача;
	Иначе 
		МассивЗадач = вогОбщегоНазначенияВызовСервера.ПолучитьМассивЗадач(Объект.Ссылка);
		Если МассивЗадач.Количество() > 0 Тогда
			// +++ VOG Кулаков П.Л. 21.12.2020 CRM-1102
			//СписокЗадач = Новый СписокЗначений;
			//СписокЗадач.ЗагрузитьЗначения(МассивЗадач);
			//ВыбраннаяЗадача = СписокЗадач.ВыбратьЭлемент("Выберите задачу");
			ПараметрыФормы = Новый Структура("Предмет",Объект.Ссылка);
			ОткрытьФорму("ОбщаяФорма.вогФормаСпискаЗадачПредмета",
					ПараметрыФормы,
					ЭтаФорма,
					,
					,
					,
					Новый ОписаниеОповещения("ОткрытьТекущуюЗадачуЗавершение", ЭтотОбъект),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			// --- VOG Кулаков П.Л.
		КонецЕсли;
	КонецЕсли;
	
	Если ВыбраннаяЗадача = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",ВыбраннаяЗадача);
	ПараметрыФормы.Вставить("НеОткрыватьПредмет",Истина);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиНезависимыйПроцесс",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				, Новый ОписаниеОповещения("ОткрытьТекущуюЗадачуЗавершение", ЭтотОбъект), 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 09.11.2020 CRM-999
&НаКлиенте
Процедура ОткрытьТекущуюЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	вогОбщегоНазначенияКлиентСервер.УстановитьКнопкиСогласования(ЭтаФорма);	
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// ++ VOG Солодов В.В. 07.06.2021 DEV-618
&НаСервереБезКонтекста
Процедура ОсвободитьФайлыРеспондента(ВладелецФайла)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СведенияОФайлах.Файл КАК Файл
		|ИЗ
		|	РегистрСведений.СведенияОФайлах КАК СведенияОФайлах
		|ГДЕ
		|	СведенияОФайлах.Редактирует = &Пользователь
		|	И СведенияОФайлах.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", 	ВладелецФайла);
	Запрос.УстановитьПараметр("Пользователь", 	Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РаботаСФайламиСлужебный.ОсвободитьФайл(ВыборкаДетальныеЗаписи.Файл);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // -- VOG Солодов В.В. 07.06.2021 DEV-618

#КонецОбласти


