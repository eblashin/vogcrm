
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
		
	Элементы.ГруппаСтраницы.ОтображениеСтраниц 		   = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаСтраницыВопросов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	УстановитьВидимостьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("Подключаемый_ИницализироватьДанныеОпроса", 0.1, Истина);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//Вопросы
	ТекущийОбъект.СоставОпроса.Очистить();
	ТекущийОбъект.ДополнительнаяИнформацияВариантовОтвета.Очистить();
	ТекущийОбъект.СоставОпросаПрисоединенныеФайлы.Очистить();
	
	Если РеквизитыВариантаОпроса.ИспользоватьВопросы 
	  И СхемаДанныхВопросов <> Неопределено Тогда
		Для каждого КлючЗначение Из СхемаДанныхВопросов Цикл
			ИмяОписания			   = КлючЗначение.Ключ;
			Вопрос 				   = СсылкаЭлемента(СтрЗаменить(ИмяОписания, "Вопрос_", ""), "Справочник.вогВопросы");
			ДанныеВариантовОтветов = КлючЗначение.Значение;
			
			Для каждого СтрокаТаблицы Из ЭтаФорма[ИмяОписания] Цикл
				Для каждого ДанныеВариантаОтвета Из ДанныеВариантовОтветов Цикл
					Если СтрокаТаблицы[ДанныеВариантаОтвета.Ключ] Тогда
						НоваяСтрокаОпроса = ТекущийОбъект.СоставОпроса.Добавить();
						
						НоваяСтрокаОпроса.ОбъектОпроса  	  = СтрокаТаблицы.ОбъектОпроса;
						НоваяСтрокаОпроса.ВариантОтвета 	  = ДанныеВариантаОтвета.Значение.ВариантОтвета;
						НоваяСтрокаОпроса.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
						
						ИдентификаторЭлемента = ИдентификаторЭлемента(ДанныеВариантаОтвета.Значение.ВариантОтвета);
						
						//Дополнительная информация
						Для каждого ОписаниеСвойства Из ДанныеВариантаОтвета.Значение.ДополнительнаяИнформация Цикл
							ИмяКолонкиСвойства = "ДополнительнаяИнформацияВариантОтвета_" + ИдентификаторЭлемента + "_" + ИдентификаторЭлемента(ОписаниеСвойства.Свойство);
							Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонкиСвойства]) Тогда
								НоваяСтрокаСвойства = ТекущийОбъект.ДополнительнаяИнформацияВариантовОтвета.Добавить();
								
							    НоваяСтрокаСвойства.Свойство 	  		= ОписаниеСвойства.Свойство;
							    НоваяСтрокаСвойства.Значение 	  		= СтрокаТаблицы[ИмяКолонкиСвойства];
							    НоваяСтрокаСвойства.ВариантОтвета 		= ДанныеВариантаОтвета.Значение.ВариантОтвета;
							    НоваяСтрокаСвойства.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
								
							КонецЕсли;
								
						КонецЦикла;
												
					КонецЕсли;
				
				КонецЦикла;
				
				//Присоединенные файлы
				ИмяКолонкиФайлов = "ПрисоединенныеФайлы" + ИмяОписания;
				Для каждого СтрокаФайла Из СтрокаТаблицы[ИмяКолонкиФайлов] Цикл
					НоваяСтрокаФайла = ТекущийОбъект.СоставОпросаПрисоединенныеФайлы.Добавить();	
					НоваяСтрокаФайла.ПрисоединенныйФайл  = СтрокаФайла.ПрисоединенныйФайл;
					НоваяСтрокаФайла.Вопрос			     = Вопрос;
					НоваяСтрокаФайла.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
				
				КонецЦикла;
	
			КонецЦикла;
						
		КонецЦикла;  
	  
 	КонецЕсли;
	
	//Классификаторы
	Если РеквизитыВариантаОпроса.ИспользоватьКлассификаторы Тогда 
		ТекущийОбъект.СоставКлассификаторов.Очистить();
		
		ИмяОписания = "CRM_ТаблицаКлассификаторов";
		Если CRM_КлассификаторыВызовСервера.РеквизитФормыСуществует(ЭтаФорма, ИмяОписания) Тогда
			Для каждого СтрокаКлассификатора Из ЭтаФорма[ИмяОписания] Цикл
				Если СтрокаКлассификатора.Включен Тогда
					НоваяСтрока = ТекущийОбъект.СоставКлассификаторов.Добавить();	
					НоваяСтрока.ЗначениеКлассификатора = СтрокаКлассификатора.Значение;
					
				КонецЕсли;
			
			КонецЦикла;	
			
			ТекущийОбъект.ДополнительныеСвойства.Вставить(ИмяОписания, ЭтаФорма[ИмяОписания]);
			
		КонецЕсли;	  
	КонецЕсли;
	
	Если РеквизитыВариантаОпроса.ИспользоватьДополнительныеРеквизиты Тогда
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
		// Конец СтандартныеПодсистемы.Свойства
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПредыдущийВопрос(Команда)
	ИзменитьСтраницуВопроса("Назад");	
КонецПроцедуры

&НаКлиенте
Процедура СледующийВопрос(Команда)
	ИзменитьСтраницуВопроса("Вперед");	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВариантОпросаПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ИницализироватьДанныеОпроса", 0.1, Истина);
	УстановитьВидимостьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РеспондентПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ИницализироватьДанныеОпроса", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

&НаКлиенте
Процедура Подключаемый_ИницализироватьДанныеОпроса()
	ИницализироватьДанныеОпросаКлиент();	
КонецПроцедуры // Подключаемый_ИницализироватьДанныеОпроса()

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ВыполнитьОбработкуДанныхОпроса();

		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНетДанных;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаНабораВопроса(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаНабораВопроса()

&НаКлиенте
Процедура Подключаемый_НабораВопросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;

	Если СтрНайти(Поле.Имя, "НаличиеПрисоединенныеФайлы") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Если Объект.Ссылка.Пустая() Тогда
			ТекстПредупреждения = Нстр("ru = 'Анкета не записана. Редактирование файлов невозможно!'");
			ПоказатьПредупреждение(,ТекстПредупреждения, 10);
			Возврат;
		КонецЕсли;
		
		ЕстьВыбранныеВарианты = Ложь;
		
		ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Таблица_", "");
		ДанныеВариантовОтветов = СхемаДанныхВопросов[ИмяРеквизита];
		Для каждого КлючЗначение Из ДанныеВариантовОтветов Цикл			
			Если ТекущиеДанные[КлючЗначение.Ключ] = Истина Тогда
				ЕстьВыбранныеВарианты = Истина;
			
			КонецЕсли;
		
		КонецЦикла;
		
		Если Не ЕстьВыбранныеВарианты Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для редактирования файлов необходимо указать вариант ответа.'"));
			Возврат;
		
		КонецЕсли;
		
		ИмяКолонкиФайлов = "ПрисоединенныеФайлы" + ИмяРеквизита;
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ПослеРедактированияФайловСтрокиВопроса", 
			ЭтотОбъект, Новый Структура("ТекущиеДанные, ИмяКолонкиФайлов", ТекущиеДанные, ИмяКолонкиФайлов)
		);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДокументСсылка", Объект.Ссылка);
		ПараметрыФормы.Вставить("МассивФайлов"  , МассивПрисоединенныхФайловСтрокиВопроса(ТекущиеДанные[ИмяКолонкиФайлов]));
		
		ОткрытьФорму("Документ.вогАнкета.Форма.ФормаРедактированияПрисоединенныхФайлов",
			ПараметрыФормы,
			ЭтаФорма,
			УникальныйИдентификатор,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеРедактированияФайловСтрокиВопроса(РезультатРедактирования, Контекст) Экспорт

	Если РезультатРедактирования = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;
	
	ТаблицаПрисоединенныеФайлы = Контекст.ТекущиеДанные[Контекст.ИмяКолонкиФайлов];
	ТаблицаПрисоединенныеФайлы.Очистить();
	
	Для каждого ПрисоединенныйФайл Из РезультатРедактирования.ПрисоединенныеФайлы Цикл
		НоваяСтрокаФайла = ТаблицаПрисоединенныеФайлы.Добавить(); 	
		НоваяСтрокаФайла.ПрисоединенныйФайл  = ПрисоединенныйФайл;
		
	КонецЦикла;
	
	Если ТаблицаПрисоединенныеФайлы.Количество() > 0 Тогда
		Контекст.ТекущиеДанные["Наличие" + Контекст.ИмяКолонкиФайлов] = 0;	
	Иначе
		Контекст.ТекущиеДанные["Наличие" + Контекст.ИмяКолонкиФайлов] = -1;	
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_ПослеРедактированияФайловСтрокиВопроса()

&НаКлиенте
Процедура Подключаемый_ВариантОтветаПриИзменении(Элемент)
	
	ЭлементТаблица = Элемент.Родитель.Родитель;
	
	ТекущиеДанные = ЭлементТаблица.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(ЭлементТаблица.Имя, "Таблица_", "");
	
	ДанныеВариантовОтветов = СхемаДанныхВопросов[ИмяРеквизита];	
	ДанныеВариантаОтвета   = ДанныеВариантовОтветов.Получить(Элемент.Имя);
	Если ДанныеВариантаОтвета = Неопределено Тогда
		Возврат;
	
	КонецЕсли;
	
	Если ДанныеВариантаОтвета.ТипОтвета = ПредопределенноеЗначение("Перечисление.вогТипыОтветов.Одиночный") Тогда
		Для каждого КлючЗначение Из ДанныеВариантовОтветов Цикл
			Если КлючЗначение.Ключ = Элемент.Имя Тогда
				Продолжить;
				
			КонецЕсли;
			
			ТекущиеДанные[КлючЗначение.Ключ] = Ложь;	
		
		КонецЦикла;
	
	КонецЕсли;		
	
КонецПроцедуры // Подключаемый_ВариантОтветаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ВводДополнительнойИнформации(ТекущиеДанные, ДанныеВариантаОтвета)

	Если ДанныеВариантаОтвета.ДополнительнаяИнформация.Количество() > 0 Тогда	  	  
		ИмяКолонкиДополнительнаяИнформация = "ДополнительнаяИнформацияВариантОтвета_" + ИдентификаторЭлемента(ДанныеВариантаОтвета.ВариантОтвета);
		ТаблицаДополнительнаяИнформация = ТекущиеДанные[ИмяКолонкиДополнительнаяИнформация];
	  
	  	Оповещение = Новый ОписаниеОповещения("Подключаемый_ВводДополнительнойИнформацииЗавершение", ЭтотОбъект, ТаблицаДополнительнаяИнформация);
	   	ОткрытьФорму("Справочник.вогВариантыОтветов.Форма.ФормаРедактированияДополнительнойИнформации", 
			Новый Структура("ВариантОтвета, ТаблицаДополнительнаяИнформация", ДанныеВариантаОтвета.ВариантОтвета, ТаблицаДополнительнаяИнформация),
			ЭтотОбъект,
			УникальныйИдентификатор,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;

КонецПроцедуры // Подключаемый_ВводДополнительнойИнформации()

&НаКлиенте
Процедура Подключаемый_ВводДополнительнойИнформацииЗавершение(Результат, ТаблицаДополнительнаяИнформация) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДополнительнаяИнформация Из ТаблицаДополнительнаяИнформация Цикл
		СтрокаДополнительнаяИнформация.Значение = Результат.Получить(СтрокаДополнительнаяИнформация.Свойство); 
	КонецЦикла;
	
КонецПроцедуры // Подключаемый_ВводДополнительнойИнформацииЗавершение()

#Область ПроцедурыПодсистемыСвойств

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);	
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаКлиенте
Процедура ИницализироватьДанныеОпросаКлиент()

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПроцессФормирования;
	
	Результат = ИницализироватьДанныеОпроса();
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ИницализироватьДанныеОпросаКлиент()

&НаСервере
Функция ИницализироватьДанныеОпроса()
		
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ИспользоватьВопросы");
	СтруктураРеквизитов.Вставить("ИспользоватьКлассификаторы");
	СтруктураРеквизитов.Вставить("ИспользоватьДополнительныеРеквизиты");
	СтруктураРеквизитов.Вставить("ТипЗначения");
	СтруктураРеквизитов.Вставить("Ссылка");
	
	РеквизитыВариантаОпроса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(объект.ВариантОпроса, СтруктураРеквизитов);
	Если ЗначениеЗаполнено(РеквизитыВариантаОпроса.Ссылка) Тогда
		ЗаполнитьПараметрыВыбораРеспондента(ЭтаФорма);
		
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;	
	ПараметрыВыполнения.Вставить("Опрос"				  , Объект.Ссылка);
	ПараметрыВыполнения.Вставить("Респондент"			  , Объект.Респондент);
	ПараметрыВыполнения.Вставить("РеквизитыВариантаОпроса", РеквизитыВариантаОпроса);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"вогУправлениеОпросамиСервер.СформироватьДанныеОпроса", 
		ПараметрыВыполнения,                 
		НСтр("ru = 'Формирование данных опроса. '"));
		
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ВыполнитьОбработкуДанныхОпроса();
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции // ИницализироватьДанныеОпроса()

&НаСервере
Процедура ВыполнитьОбработкуДанныхОпроса()

	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если Результат = Неопределено Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНетДанных;
		Возврат;
		
	КонецЕсли;
	
	//Вопросы
	Если РеквизитыВариантаОпроса.ИспользоватьВопросы Тогда
		СхемаДанныхВопросов = Новый Структура;
		
		Ключ = "Вопросы";
		ВыполнитьОбработкуДанныхФормы(Ключ);
				
		ТаблицаВопросов = Результат.ТаблицаВопросов;		
		Для каждого СтрокаВопроса Из ТаблицаВопросов Цикл
			Вопрос 				= СтрокаВопроса.Вопрос;
			СтруктураПараметров = СтрокаВопроса.СтруктураПараметров;
			
			ИмяОписания = СформироватьТаблицуВопроса(Вопрос, СтруктураПараметров, Ключ);
			ЗаполнитьТаблицуВопроса(Вопрос, СтруктураПараметров, ИмяОписания);
			
		КонецЦикла;	
		
		СформироватьИнформациюВопросов(ЭтаФорма, Элементы.ГруппаСтраницыВопросов.ПодчиненныеЭлементы);
		
	КонецЕсли;
	
	//Классификаторы
	Если РеквизитыВариантаОпроса.ИспользоватьКлассификаторы Тогда
		Если Объект.СоставКлассификаторов.Количество() = 0 Тогда
			Объект.СоставКлассификаторов.Загрузить(Результат.ТаблицаЗначенийКлассификаторов);
			
		КонецЕсли;
		
		CRM_КлассификаторыВызовСервера.ФормаОпросаПриЧтенииНаСервере(ЭтаФорма, Объект, Объект.Респондент, РеквизитыВариантаОпроса.Ссылка);
		
	КонецЕсли;
	
	//Доп. реквизиты
	Если РеквизитыВариантаОпроса.ИспользоватьДополнительныеРеквизиты Тогда
		// СтандартныеПодсистемы.Свойства
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", Объект.Респондент);
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "НаборДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", Истина);
			
		ПараметрыИнициализацииСвойств = Новый Структура;
		ПараметрыИнициализацииСвойств.Вставить("Свойства_ИспользоватьСвойства", Неопределено);
		ЗаполнитьЗначенияСвойств(ПараметрыИнициализацииСвойств, ЭтаФорма);
		Если Не ПараметрыИнициализацииСвойств.Свойства_ИспользоватьСвойства = Неопределено Тогда
			УправлениеСвойствами.УдалитьСтарыеРеквизитыИЭлементы(ЭтаФорма);
			
			МассивУдаляемыхРеквизитов = Новый Массив;
			МассивУдаляемыхРеквизитов.Добавить("Свойства_ИспользоватьСвойства");
			МассивУдаляемыхРеквизитов.Добавить("Свойства_СкрытьУдаленные");
			МассивУдаляемыхРеквизитов.Добавить("ПараметрыСвойств");		
			МассивУдаляемыхРеквизитов.Добавить("Свойства_ИспользоватьДопРеквизиты");		
			ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
			
			ДополнительныеПараметры.Вставить("НеСоздаватьОписаниеДополнительныхРеквизитов");
			
		КонецЕсли;
		
		УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);		
		УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект, Объект);
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
		
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДанные;
	
КонецПроцедуры // ВыполнитьОбработкуДанныхОпроса()

&НаСервере
Функция СформироватьТаблицуВопроса(Вопрос, СтруктураПараметров, Ключ)

	ИмяОписания = "Вопрос_" + ИдентификаторЭлемента(Вопрос);
	
	//Реквизиты
	МассивДобавляемыхРеквизитов = Новый Массив;                                              
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений"),,, Истина));
	
	//Колонки набора данных
	Для каждого Колонка Из СтруктураПараметров.Колонки Цикл
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяОписания, Колонка.Заголовок));
	КонецЦикла;
	
	//Колонки вариантов ответа
	Для каждого СтрокаВариантОтвета Из СтруктураПараметров.СоставВопроса Цикл
		ИмяКолонки = "ВариантОтвета_" + ИдентификаторЭлемента(СтрокаВариантОтвета.ВариантОтвета);
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов("Булево"), ИмяОписания, Строка(СтрокаВариантОтвета.ВариантОтвета)));
		
		//Колонки дополнительная информация
		Для каждого ОписаниеСвойства Из СтрокаВариантОтвета.ДополнительнаяИнформация Цикл
			ИмяКолонки = "ДополнительнаяИнформацияВариантОтвета_" + ИдентификаторЭлемента(СтрокаВариантОтвета.ВариантОтвета) + "_" + ИдентификаторЭлемента(ОписаниеСвойства.Свойство);
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеСвойства.ТипЗначения, ИмяОписания));
			
		КонецЦикла;
				
	КонецЦикла;
	
	//Колонки присоединенные файлы
	ИмяКолонки = "ПрисоединенныеФайлы" + ИмяОписания;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов("ТаблицаЗначений"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПрисоединенныйФайл", Новый ОписаниеТипов("СправочникСсылка.вогАнкетаПрисоединенныеФайлы"), ИмяОписания + "." + ИмяКолонки));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Наличие" + ИмяКолонки, Новый ОписаниеТипов("Число"), ИмяОписания));
	
	//ИдентификаторСтроки
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИдентификаторСтроки", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)), ИмяОписания));
	
	//Создадим реквизиты
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
	//Элементы
	ЭлементСтраница 		  = Элементы.Вставить("Страница_" + ИмяОписания, Тип("ГруппаФормы"), Элементы.ГруппаСтраницыВопросов);
	ЭлементСтраница.Заголовок = СтруктураПараметров.Представление;
	ДобавитьОписание(ЭлементСтраница.Имя,,,, Ключ);
	
	ДекорацияФормулировка          				   = Элементы.Добавить("ДекорацияФормулировка_" + ИмяОписания, Тип("ДекорацияФормы"), ЭлементСтраница);
	ДекорацияФормулировка.Вид      				   = ВидДекорацииФормы.Надпись;
	ДекорацияФормулировка.Заголовок 			   = СтруктураПараметров.Формулировка;
	ДекорацияФормулировка.АвтоМаксимальнаяШирина   = Ложь;
	ДекорацияФормулировка.РастягиватьПоГоризонтали = Истина;
	ДобавитьОписание(ДекорацияФормулировка.Имя,,,, Ключ);
	
	ЭлементТаблица							 = Элементы.Добавить("Таблица_" + ИмяОписания, Тип("ТаблицаФормы"), ЭлементСтраница);
	ЭлементТаблица.ПутьКДанным				 = ИмяОписания;
	ЭлементТаблица.КоманднаяПанель.Видимость = Ложь;
	ЭлементТаблица.ПоложениеКоманднойПанели  = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементТаблица.ПоложениеЗаголовка		 = ПоложениеЗаголовкаЭлементаФормы.Нет;	
	ЭлементТаблица.ВысотаВСтрокахТаблицы 	 = 5;
	
	ЭлементТаблица.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ЗапретМодификацииСоставаНабораВопроса");
	ЭлементТаблица.УстановитьДействие("ПередУдалением"        , "Подключаемый_ЗапретМодификацииСоставаНабораВопроса");
	ЭлементТаблица.УстановитьДействие("Выбор"        		  , "Подключаемый_НабораВопросаВыбор");

	ДобавитьОписание(ЭлементТаблица.Имя, ЭлементТаблица.ПутьКДанным,,, Ключ);
	
	//Группа колонок
	ЭлементГруппа = Элементы.Добавить("ГруппаНабораДанных_" + ИмяОписания, Тип("ГруппаФормы"), ЭлементТаблица);
	ЭлементГруппа.Вид 		  	   = ВидГруппыФормы.ГруппаКолонок;
	ЭлементГруппа.Группировка 	   = ГруппировкаКолонок.Горизонтальная;
	ЭлементГруппа.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	
	//Колонки набора данных
	Для каждого Колонка Из СтруктураПараметров.Колонки Цикл
		ЭлементКолонка 			      = Элементы.Добавить("Колонка_" + Колонка.Имя + "_" + ИмяОписания, Тип("ПолеФормы"), ЭлементГруппа);
		ЭлементКолонка.Вид			  = ВидПоляФормы.ПолеВвода;
		ЭлементКолонка.ПутьКДанным	  = ИмяОписания + "." + Колонка.Имя;
		ЭлементКолонка.ТолькоПросмотр = Истина;
		
	КонецЦикла;
		
	//Колонки вариантов ответа
	СтруктураВариантовОтветов = Новый Соответствие;
	Для каждого СтрокаВариантОтвета Из СтруктураПараметров.СоставВопроса Цикл
		ИмяКолонки = "ВариантОтвета_" + ИдентификаторЭлемента(СтрокаВариантОтвета.ВариантОтвета);
		
		ЭлементГруппа 				   = Элементы.Добавить("Группа" + ИмяКолонки, Тип("ГруппаФормы"), ЭлементТаблица);
		ЭлементГруппа.Вид 		  	   = ВидГруппыФормы.ГруппаКолонок;
		ЭлементГруппа.Группировка 	   = ГруппировкаКолонок.Горизонтальная;
		ЭлементГруппа.ОтображатьВШапке = Истина;
		ЭлементГруппа.Заголовок        = СтрокаВариантОтвета.ВариантОтвета;
		
		ЭлементКолонка 			     	  = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ЭлементГруппа);
		ЭлементКолонка.Вид			 	  = ВидПоляФормы.ПолеФлажка;         
		ЭлементКолонка.КартинкаШапки  	  = БиблиотекаКартинок.CRM_ПиктограммаТрендаНеопределен;
		ЭлементКолонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементКолонка.ПутьКДанным		  = ИмяОписания + "." + ИмяКолонки;
		ЭлементКолонка.ОтображатьВШапке   = СтрокаВариантОтвета.ДополнительнаяИнформация.Количество() > 0;
		
		ЭлементКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ВариантОтветаПриИзменении");
		
		СтруктураВариантовОтветов.Вставить(ИмяКолонки,
			Новый Структура("ВариантОтвета, ДополнительнаяИнформация, ТипОтвета", 
			СтрокаВариантОтвета.ВариантОтвета, СтрокаВариантОтвета.ДополнительнаяИнформация, СтруктураПараметров.ТипОтвета)
		);
						
		//Колонки дополнительная информация
		Для каждого ОписаниеСвойства Из СтрокаВариантОтвета.ДополнительнаяИнформация Цикл
			ИмяКолонкиСвойства = "ДополнительнаяИнформация" + ИмяКолонки + "_" + ИдентификаторЭлемента(ОписаниеСвойства.Свойство);
			
			ЭлементКолонка 			       = Элементы.Добавить(ИмяКолонкиСвойства, Тип("ПолеФормы"), ЭлементГруппа);
			ЭлементКолонка.Вид			   = ВидПоляФормы.ПолеВвода;
			ЭлементКолонка.ПутьКДанным	   = ИмяОписания + "." + ИмяКолонкиСвойства;
			ЭлементКолонка.Заголовок	   = ОписаниеСвойства.Свойство;
			
			ПараметрыВыбораЗначений = Новый Массив;
			ПараметрыВыбораЗначений.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ОписаниеСвойства.Свойство));
			ЭлементКолонка.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЗначений);
			
			//Условное оформление
			ЭлементОформление = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлементаОформления = ЭлементОформление.Поля.Элементы.Добавить();
			ПолеЭлементаОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиСвойства);
			
			ОтборЭлементаОформления = ЭлементОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлементаОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОписания + "." + ИмяКолонки);
			ОтборЭлементаОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлементаОформления.ПравоеЗначение = Ложь;
			
			ЭлементОформление.Оформление.УстановитьЗначениеПараметра("Текст"		 , "");
			ЭлементОформление.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			
		КонецЦикла;
				
	КонецЦикла;	
	
	//Колонки присоединенные файлы
	ИмяКолонкиФайлов = "НаличиеПрисоединенныеФайлы" + ИмяОписания;
	
	ЭлементКолонка 			     	  = Элементы.Добавить(ИмяКолонкиФайлов, Тип("ПолеФормы"), ЭлементТаблица);
	ЭлементКолонка.Вид			 	  = ВидПоляФормы.ПолеКартинки;         
	ЭлементКолонка.КартинкаШапки  	  = БиблиотекаКартинок.ЗакончитьРедактированиеФайла;     
	ЭлементКолонка.КартинкаЗначений	  = БиблиотекаКартинок.ОткрытьВыбранныйФайл;
	ЭлементКолонка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементКолонка.ПутьКДанным		  = ИмяОписания + "." + ИмяКолонкиФайлов;
	ЭлементКолонка.ОтображатьВШапке   = Ложь;
	
	СхемаДанныхВопросов.Вставить(ИмяОписания, СтруктураВариантовОтветов);
	
	Возврат ИмяОписания;
	
КонецФункции // СформироватьТаблицуВопроса()

&НаСервере
Процедура ЗаполнитьТаблицуВопроса(Вопрос, СтруктураПараметров, ИмяОписания)

	Для каждого СтрокаДерева Из СтруктураПараметров.ДеревоНабораДанных.Строки Цикл
		НоваяСтрока = ЭтаФорма[ИмяОписания].Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.ИдентификаторСтроки) Тогда
			НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;	
		КонецЕсли;
		
		ЗаполнитьЗначенияВаринтовОтветов(НоваяСтрока, СтрокаДерева.Строки, СтруктураПараметров, Объект.ДополнительнаяИнформацияВариантовОтвета);
		ЗаполнитьПрисоединенныеФайлыСтрокиВопроса(НоваяСтрока, Вопрос, СтруктураПараметров, Объект.СоставОпросаПрисоединенныеФайлы);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуВопроса()

&НаСервереБезКонтекста
Процедура ЗаполнитьЗначенияВаринтовОтветов(НоваяСтрока, СтрокиВариантовОтвета, СтруктураПараметров, ДополнительнаяИнформация)

	Для каждого СтрокаСоставаВопроса Из СтруктураПараметров.СоставВопроса Цикл
		ИмяКолонки = "ВариантОтвета_" + ИдентификаторЭлемента(СтрокаСоставаВопроса.ВариантОтвета);
		Для каждого СтрокаВариантовОтвета Из СтрокиВариантовОтвета Цикл
			Если СтрокаВариантовОтвета.ВариантОтвета = СтрокаСоставаВопроса.ВариантОтвета Тогда
				НоваяСтрока[ИмяКолонки] = СтрокаВариантовОтвета.Пометка; 

				Если СтрокаВариантовОтвета.Пометка Тогда
					//Дополнительная информация
					Для каждого ОписаниеСвойства Из СтрокаСоставаВопроса.ДополнительнаяИнформация Цикл
						СтрокиЗначенийСвойства = ДополнительнаяИнформация.НайтиСтроки(Новый Структура("ВариантОтвета, ИдентификаторСтроки, Свойство", 
							СтрокаВариантовОтвета.ВариантОтвета, НоваяСтрока.ИдентификаторСтроки, ОписаниеСвойства.Свойство)
						);
						Если СтрокиЗначенийСвойства.Количество() > 0 Тогда
							ИмяКолонкиСвойства = "ДополнительнаяИнформация" + ИмяКолонки + "_" + ИдентификаторЭлемента(ОписаниеСвойства.Свойство);
							НоваяСтрока[ИмяКолонкиСвойства] = СтрокиЗначенийСвойства[0].Значение; 
							
						КонецЕсли;
					
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначенияВаринтовОтветов()

&НаСервереБезКонтекста
Процедура ЗаполнитьПрисоединенныеФайлыСтрокиВопроса(НоваяСтрока, Вопрос, СтруктураПараметров, ПрисоединенныеФайлыОпроса)

	//Присоединенные файлы
	ИмяКолонкиФайлов = "ПрисоединенныеФайлыВопрос_" + ИдентификаторЭлемента(Вопрос);
	НоваяСтрока["Наличие" + ИмяКолонкиФайлов] = -1;

	СтрокиФайлов = ПрисоединенныеФайлыОпроса.НайтиСтроки(Новый Структура("Вопрос, ИдентификаторСтроки", Вопрос, НоваяСтрока.ИдентификаторСтроки));
	Если СтрокиФайлов.Количество() > 0 Тогда
		ТаблицаПрисоединенныеФайлы = НоваяСтрока[ИмяКолонкиФайлов];
		Для каждого СтрокаФайлов Из СтрокиФайлов Цикл
			НоваяСтрокаФайла = ТаблицаПрисоединенныеФайлы.Добавить();	
		    НоваяСтрокаФайла.ПрисоединенныйФайл = СтрокаФайлов.ПрисоединенныйФайл;

		КонецЦикла;
		
		НоваяСтрока["Наличие" + ИмяКолонкиФайлов] = 0;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьПрисоединенныеФайлыСтрокиВопроса()

&НаСервереБезКонтекста
Функция ИдентификаторЭлемента(Ссылка) Экспорт

	Возврат СтрЗаменить(XMLСтрока(Ссылка), "-", "_");	

КонецФункции // ИдентификаторЭлемента()

&НаСервереБезКонтекста
Функция СсылкаЭлемента(ИдентификаторЭлемента, ИмяМенеджераОбъекта)

	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераОбъекта);	
	Возврат МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрЗаменить(ИдентификаторЭлемента, "_", "-")));
	
КонецФункции // СсылкаЭлемента()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.Респондент.Доступность = ЗначениеЗаполнено(Объект.ВариантОпроса);
	Если Не Элементы.Респондент.Доступность Тогда
		Объект.Респондент = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоступность()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПараметрыВыбораРеспондента(Форма)
	
	СписокТипыРеспондента = Новый СписокЗначений;
	Типы = Форма.РеквизитыВариантаОпроса.ТипЗначения.Типы();
	Для Инд = 1 По Типы.Количество() Цикл
		СписокТипыРеспондента.Добавить(ИмяТаблицыПоСсылке(Новый(Типы[Инд - 1])));
	КонецЦикла;		
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("ТипыРеспондента.ИмяТаблиц", СписокТипыРеспондента));
	
	Форма.Элементы.Респондент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры // ЗаполнитьПараметрыВыбора()

&НаСервереБезКонтекста
Функция ИмяТаблицыПоСсылке(Ссылка)
	
	Возврат ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
	
КонецФункции // ИмяТаблицыПоСсылке()

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ВыполнитьОбработкуДанныхФормы(Ключ)
	
	МассивСтрок 			  = Новый Массив;
	МассивУдаляемыхРеквизитов = Новый Массив;
	СтрокиОписания = ТаблицаОписания.НайтиСтроки(
		Новый Структура("Ключ", Ключ));
	
	Для каждого СтрокаОписания Из ТаблицаОписания Цикл
		Элемент = Элементы.Найти(СтрокаОписания.ИмяЭлемента);		
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОписания.ПутьКДанным) Тогда
			МассивУдаляемыхРеквизитов.Добавить(СтрокаОписания.ПутьКДанным);	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОписания.ИмяКоманды) Тогда
			Команда = Команды.Найти(СтрокаОписания.ИмяКоманды);
			Если Команда <> Неопределено Тогда
				Команды.Удалить(Команда);
			
			КонецЕсли;
		
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаОписания);
		
	КонецЦикла;
	
	//Удалим реквизиты
	Если МассивУдаляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);	
	КонецЕсли;
	
	СтрокиОписания = ТаблицаОписания.НайтиСтроки(
		Новый Структура("Ключ", Ключ));
	Для каждого СтрокаОписания Из СтрокиОписания Цикл
		ТаблицаОписания.Удалить(СтрокаОписания);	
	КонецЦикла;

КонецПроцедуры // ВыполнитьОбработкуДанныхФормы()

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуОписания(Форма, ИмяЭлемента)

	Строки = Форма.ТаблицаОписания.НайтиСтроки(Новый Структура("ИмяЭлемента", ИмяЭлемента));	
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0]
	Иначе	
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции // НайтиСтрокуОписания()

&НаСервере
Процедура ДобавитьОписание(ИмяЭлемента, 
						   ПутьКДанным = "", 
						   ИмяКоманды = "", 
						   Ссылка = Неопределено, 
						   Ключ = "")

	НоваяСтрока = ТаблицаОписания.Добавить();	
	НоваяСтрока.ИмяЭлемента = ИмяЭлемента;
	НоваяСтрока.ПутьКДанным = ПутьКДанным;
	НоваяСтрока.ИмяКоманды  = ИмяКоманды;
	НоваяСтрока.Ссылка      = Ссылка;
	НоваяСтрока.Ключ	    = Ключ;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтраницуВопроса(Направление)

	Смещение = ?(Направление = "Вперед", 1, -1);
	КоллекцияСтраниц = Элементы.ГруппаСтраницыВопросов.ПодчиненныеЭлементы;
	
	ТекущаяСтраница = Элементы.ГруппаСтраницыВопросов.ТекущаяСтраница;
	ИндексТекущаяСтраница = КоллекцияСтраниц.Индекс(ТекущаяСтраница);		

	СтраницаПерехода = КоллекцияСтраниц.Получить(ИндексТекущаяСтраница + Смещение);
	Если СтраницаПерехода <> Неопределено Тогда
		Элементы.ГруппаСтраницыВопросов.ТекущаяСтраница = СтраницаПерехода;	
		СформироватьИнформациюВопросов(ЭтаФорма, КоллекцияСтраниц, СтраницаПерехода);
		
	КонецЕсли;
		
КонецПроцедуры // ИзменитьСтраницуВопроса()

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьИнформациюВопросов(Форма, КоллекцияСтраниц, СтраницаПерехода = Неопределено)

	Если СтраницаПерехода = Неопределено Тогда
		НомерВопроса = 1;
	Иначе	
		НомерВопроса = КоллекцияСтраниц.Индекс(СтраницаПерехода) + 1;
	КонецЕсли;
	
	Форма.Элементы.ДекорацияИнформацияВопросов.Заголовок = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вопрос %1 из %2'"), НомерВопроса, КоллекцияСтраниц.Количество());	
	
КонецПроцедуры // СформироватьИнформациюВопросов()

&НаКлиенте
Функция МассивПрисоединенныхФайловСтрокиВопроса(ТаблицаПрисоединенныеФайлы)

	МассивФайлов = Новый Массив;
	Для каждого СтрокаФайла Из ТаблицаПрисоединенныеФайлы Цикл
		МассивФайлов.Добавить(СтрокаФайла.ПрисоединенныйФайл);	
	
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции // МассивПрисоединенныхФайловСтрокиВопроса()
#КонецОбласти

//+Классификаторы
#Область Подключаемый_Классификаторы

&НаКлиенте
Процедура Подключаемый_ЗапретМодификацииСоставаКлассификаторов(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // Подключаемый_ЗапретМодификацииСоставаКлассификаторов()

&НаКлиенте
Процедура Подключаемый_ОбщимСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОбщимСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОтдельнымСписком_ВключенПриИзменении(Элемент)

	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, ТекущиеДанные.КлючСтроки, ТекущиеДанные.Включен);	
	
КонецПроцедуры // Подключаемый_ОтдельнымСписком_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОдиночноеЗначение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПакетно(ЭтаФорма, Элемент.Имя);	        
		
КонецПроцедуры // Подключаемый_ОдиночноеЗначение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Вхождение_ВключенПриИзменении(Элемент)
	
	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторов(ЭтаФорма, Элемент.Имя, ЭтаФорма[Элемент.Имя]);	        
	
КонецПроцедуры // Подключаемый_Вхождение_ВключенПриИзменении()

&НаКлиенте
Процедура Подключаемый_Классификатор_ДобавитьТег(Элемент)

	CRM_КлассификаторыКлиентСервер.НайтиИзменитьСтрокиКлассификаторовПоЗначению(ЭтаФорма, ЭтаФорма[Элемент.Имя], Истина);
	Подключаемый_ТегиКлассификатора_Обновить();
	
КонецПроцедуры // Подключаемый_Классификатор_ДобавитьТег()

&НаКлиенте
Процедура Подключаемый_ТегКлассификатора_ОбработкаСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_КлассификаторыКлиентСервер.ОбработкаНавигационнойСсылкиТегаКлассификаторов(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры // Подключаемый_ТегКлассификатора_ОбработкаСсылки()

&НаСервере
Процедура Подключаемый_ТегиКлассификатора_Обновить()
	
	CRM_КлассификаторыВызовСервера.СформироватьТегиКлассификаторов(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_ТегиКлассификатора_Обновить()

#КонецОбласти
//-Классификаторы

#Область Подключаемый_МеханизмЗапускаБизнесПроцессов

&НаКлиенте
Процедура Подключаемый_ЗапускБизнесПроцесса(Команда)
	скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);
КонецПроцедуры // Подключаемый_ЗапускБизнесПроцесса()

#КонецОбласти
