&НаКлиенте
Перем ПараметрыЗадач_Даты;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	//Контроллер = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("КонтроллерПоУмолчанию");
	КартыПоручений.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(Справочник.CRM_КартыМаршрутов.Поручение) КАК КартаПоручения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КартыПоручений.Добавить(ВыборкаДетальныеЗаписи.КартаПоручения);
	КонецЦикла;
	
	ПриСозданииЧтенииНаСервере();
	
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	
	Если МаксимальныйРазмерФайла = 0 Тогда 
		МаксимальныйРазмерФайла = 50*1048576 ; // 50 Мбайт
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодчиненныеПользователи,"ТекущийПользователь", Пользователи.ТекущийПользователь());
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
	Для Каждого СтрокаОбъекта Из Объект.Файлы Цикл
		СтрокаОбъекта.АдресФайла = ПоместитьВоВременноеХранилище(
			ТекущийОбъект.Файлы[СтрокаОбъекта.НомерСтроки-1].Файл.Получить(),
			УникальныйИдентификатор);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПараметрыЗадач_Даты = Новый Структура;
	ПараметрыЗадач_Даты.Вставить("ДатаИсполнения", ДатаИсполнения);
	ПараметрыЗадач_Даты.Вставить("ДатаКонтроля", ДатаКонтроля);
КонецПроцедуры
	

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Объект.Режим = РежимРаботыОднаЗадача() Тогда 
		Если Не ЗначениеЗаполнено(Объект.ОписаниеПоручения) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Поле ""Описание поручения"" не заполнено",
				Объект.Ссылка,
				"ОписаниеПоручения",
				"Объект",
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Распределить(Команда)
	
	ВыделенныеПользователи = Элементы.ПодчиненныеПользователи.ВыделенныеСтроки;
	Если ВыделенныеПользователи.Количество() = 0 Тогда 
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Нельзя распределить'"),
			,
			НСтр("ru = 'Не выбраны подчиненные пользователи'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеПользователи Цикл
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("СправочникСсылка.Пользователи") Тогда 
			НоваяСтрокаИсполнители = Объект.ИсполнителиИЗадачи.Добавить();
			НоваяСтрокаИсполнители.Исполнитель = ВыделеннаяСтрока;
			НоваяСтрокаИсполнители.Важность = Объект.Важность;
			НоваяСтрокаИсполнители.Контроль = Контроллер;
			НоваяСтрокаИсполнители.ДатаИсполнения = ДатаИсполнения;
			НоваяСтрокаИсполнители.ДатаКонтроля = ДатаКонтроля;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗадачи(Команда)
	СоздатьЗадачиНаСервере();
	ОповеститьОбИзменении(Тип("ЗадачаСсылка.ЗадачаИсполнителя"));	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПеренестиПрисоединенныеФайлы(СписокФайлов, Поручение)
	
	Для Каждого Элемент Из СписокФайлов Цикл
		
		ФайлНовый = Справочники.CRM_БизнесПроцессПрисоединенныеФайлы.СоздатьЭлемент();
		
		Для Каждого Реквизит ИЗ Элемент.Метаданные().Реквизиты Цикл
			
			Если Найти(Реквизит.Имя,"CRM_") > 0 ИЛИ Найти(Реквизит.Имя,"ИДФайлаЭлектронногоПисьма") Тогда 
				Продолжить; 
			КонецЕсли;
			
			ФайлНовый[Реквизит.Имя] = Элемент[Реквизит.Имя];
		КонецЦикла;
		
		ФайлНовый.ВладелецФайла 	= Поручение;
		ФайлНовый.Наименование	 	= Элемент.Наименование;
		ФайлНовый.Записать();
		
		НаборЗаписей = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрисоединенныйФайл.Установить(Элемент);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
		
			МенеджерЗаписи = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПрисоединенныйФайл = ФайлНовый.Ссылка;
			МенеджерЗаписи.ХранимыйФайл = Запись.ХранимыйФайл;
			МенеджерЗаписи.Записать();
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Функция ЗаписатьИСтартоватьБППоручение(СтруктураРезультат, 	Описание, Исполнитель, ДатаВыполнения, Контроль, 
		ДатаКонтроля, Клиент, КонтролироватьВыполнение, Важность)
	
	Успешно = Ложь;
	МодифицированностьБыло = Модифицированность;
	ЭтоПоручение = КартыПоручений.НайтиПоЗначению(Объект.КартаМаршрута) <> Неопределено; 
	Попытка
		НачатьТранзакцию();
		Если Записать() Тогда 
			
			бпСогласование = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			бпСогласование.Заполнить(Объект.Ссылка);
			бпСогласование.КартаМаршрута 			= Объект.КартаМаршрута;
			бпСогласование.НомерВерсииКартыМаршрута = Объект.КартаМаршрута.НомерВерсии;
			бпСогласование.Наименование             = Описание;
			бпСогласование.Партнер                  = Клиент;						 
			бпСогласование.Предмет		            = Объект.Ссылка;
			бпСогласование.ГлавнаяЗадача            = Объект.Предмет;
			
			бпСогласование.Дата                     = ТекущаяДатаСеанса();
			БпСогласование.Ответственный            = Исполнитель;
			БпСогласование.ПланируемаяДатаЗавершения = ДатаВыполнения;
			бпСогласование.Важность                 = Важность;
			СписокТочекСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(бпСогласование.КартаМаршрута);
			Если СписокТочекСтарта.Количество() <> 1 Тогда
				ВызватьИсключение НСтр("ru='Не найдена точка старта бизнес-процесса """ + Объект.КартаМаршрута + """.
				|Обратитесь к администратору.'");
			КонецЕсли;
			бпСогласование.ТочкаСтарта = СписокТочекСтарта[0].Значение;
			бпСогласование.Записать();
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(бпСогласование.Ссылка);
			НаборЭтапов.Прочитать();
			
			//исполнители бизнес-процесса
			НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборИсполнителей.Отбор.Объект.Установить(бпСогласование.Ссылка);
			НаборИсполнителей.Прочитать();	
			
			Для Каждого СтрокаНабора ИЗ НаборИсполнителей Цикл
				Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[0].ТочкаМаршрута Тогда		// точка действия "Выполнить"
					СтрокаНабора.Исполнитель = ?(ЗначениеЗаполнено(Исполнитель),Исполнитель,Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан);
					НаборЭтапов[0].ДатаВыполнения = ДатаВыполнения;
					НаборЭтапов[0].Задание = Описание;
					НаборЭтапов[0].ВариантВыполнения = ?(КонтролироватьВыполнение,1,0);
					НаборЭтапов[0].ВариантВыполненияСтрокой = CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(НаборЭтапов[0].ТочкаМаршрута, НаборЭтапов[0].ВариантВыполнения, бпСогласование.НомерВерсииКартыМаршрута);
				ИначеЕсли ЭтоПоручение И СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда	// точка действия "Проверить"
					НаборЭтапов[1].ДатаВыполнения = ДатаКонтроля;
					НаборЭтапов[1].Используется	= КонтролироватьВыполнение;
					СтрокаНабора.Исполнитель = ?(ЗначениеЗаполнено(Контроль),Контроль,Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан);
				КонецЕсли;
			КонецЦикла;
			
			НаборЭтапов.Записать();
			НаборИсполнителей.Записать();
			
			
			
			
			
			
			бпСогласование.Старт();
			
			Успешно = Истина;
			
			//РегИсполнители = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			//РегИсполнители.Отбор.Объект.Установить(бпСогласование.Ссылка);
			//РегИсполнители.Прочитать();
			//
			//Для каждого Стр из РегИсполнители Цикл
			//	Если Стр.ТочкаМаршрута.Наименование      = "Выполнить" Тогда
			//		Стр.Исполнитель = Исполнитель;
			//	ИначеЕсли Стр.ТочкаМаршрута.Наименование = "Проверить" Тогда
			//		Стр.Исполнитель = Контроль;
			//	КонецЕсли;	
			//	
			//КонецЦикла;	
			//РегИсполнители.Записать();
			//
			//НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			//НаборЭтапов.Отбор.Объект.Установить(БпСогласование.Ссылка);
			//НаборЭтапов.Прочитать();
			//
			//Для Каждого Этап из НаборЭтапов Цикл
			//	Если Этап.ТочкаМаршрута.Наименование      = "Выполнить" Тогда
			//		Этап.ДатаВыполнения = ДатаВыполнения;
			//	ИначеЕсли Этап.ТочкаМаршрута.Наименование = "Проверить" Тогда
			//		Этап.ДатаВыполнения = ДатаКонтроля;
			//	КонецЕсли;	
			//	
			//	
			//КонецЦикла;
			СтруктураРезультат.БизнесПроцесс 		= бпСогласование.Ссылка;
			СтруктураРезультат.БизнесПроцессНомер 	= бпСогласование.Номер;
			
			ИсторияРаботыПользователя.Добавить(бпСогласование.Ссылка);
			бпСогласование.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Инфо = ИнформацияОбОшибке();
		Сообщить(КраткоеПредставлениеОшибки(Инфо));
		
		Модифицированность = МодифицированностьБыло;
		
	КонецПопытки;
	
	Возврат БПСогласование.Ссылка;
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Вставить содержимое обработчика
	ЭтаФорма.ПроверитьЗаполнение();
	
	СоответствиеАдресов = Новый Соответствие;
	Для Каждого СтрокаОбъекта Из Объект.Файлы Цикл
		//адрес может быть пустой строкой если например клиента добавли и файл не поместили
		Если ЭтоАдресВременногоХранилища(СтрокаОбъекта.АдресФайла) Тогда 
			ТекущийОбъект.Файлы[СтрокаОбъекта.НомерСтроки-1].Файл = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаОбъекта.АдресФайла));
		КонецЕсли;
			
		СоответствиеАдресов.Вставить(СтрокаОбъекта.НомерСтроки-1,СтрокаОбъекта.АдресФайла);
	КонецЦикла;
	ТекущийОбъект.ДополнительныеСвойства.Вставить("АдресаФайлов",СоответствиеАдресов);	

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СоответствиеАдресов = ТекущийОбъект.ДополнительныеСвойства.АдресаФайлов;
	Для Каждого  КиЗ из СоответствиеАдресов Цикл 
		Объект.Файлы[КиЗ.Ключ].АдресФайла = КиЗ.Значение;
	КонецЦикла;
	
КонецПроцедуры



&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//Для простоты будем считать
	//что карты созданных БП соответствуют карте документа
	//(хотя это может быть и не так).
	
	Если ЗначениеЗаполнено(Элементы.ИсполнителиИЗадачи.ТекущиеДанные.Поручение) Тогда
		
		ЭтоПоручение = КартыПоручений.НайтиПоЗначению(Объект.КартаМаршрута) <> Неопределено; 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Элементы.ИсполнителиИЗадачи.ТекущиеДанные.Поручение);
		Если ЭтоПоручение Тогда 
			ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыФормы, );
		Иначе
			ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта", ПараметрыФормы, );
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗадачиПередНачаломИзменения(Элемент, Отказ)
	// Вставить содержимое обработчика.
	Если ЗначениеЗаполнено(Элементы.ИсполнителиИЗадачи.ТекущиеДанные.Поручение) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ИсполнителиИЗадачиПриИзменении(Элемент)
	ИсполнителиИЗадачиПриИзмененииНаСервере();
КонецПроцедуры


&НаСервере
Процедура ИсполнителиИЗадачиПриИзмененииНаСервере()
	// Вставить содержимое обработчика.
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ИсполнителиИЗадачиДатаКонтроляПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ПроверкаКорректностиДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКорректностиДат()
	ТекущиеДанные = Элементы.ИсполнителиИЗадачи.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ДатаКонтроля) и  ТекущиеДанные.ДатаКонтроля < ТекущиеДанные.ДатаИсполнения Тогда
		Предупреждение("Дата контроля должна быть больше даты выполнения!");
		ТекущиеДанные.ДатаКонтроля = "";
	КонецЕслИ;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИЗадачиДатаИсполненияПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ПроверкаКорректностиДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИЗадачиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Вставить содержимое обработчика.
	Если НоваяСтрока и ЗначениеЗаполнено(Контроллер) Тогда
		 Элемент.ТекущиеДанные.Контроль = Контроллер;
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда 
		Элемент.ТекущиеДанные.ИдСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда 
		ТД = Элемент.ТекущиеДанные;
		ТД.Важность = Объект.Важность;
		ЗаполнитьЗначенияСвойств(ТД,ЭтотОбъект,"ДатаИсполнения,ДатаКонтроля");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИЗадачиПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ИсполнителиПриАктивизацииСтроки",0.2,Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Если КартыПоручений.НайтиПоЗначению(Объект.КартаМаршрута)<> Неопределено Тогда 
		Элементы.ГруппаКонтроль.Видимость = Истина;
	Иначе
		Элементы.ГруппаКонтроль.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Режим = РежимРаботыОднаЗадача() Тогда 
		Элементы.ОписаниеПоручения.Видимость = Истина;
		Элементы.ИсполнителиИЗадачиОписаниеПоручения.Видимость = Ложь;
		Элементы.ИсполнителиИЗадачиВажность.Видимость = Ложь;
	ИначеЕсли Объект.Режим = РежимРаботыРазныеЗадачи() Тогда 
		Элементы.ОписаниеПоручения.Видимость = Ложь;
		Элементы.ИсполнителиИЗадачиОписаниеПоручения.Видимость = Истина;
		Элементы.ИсполнителиИЗадачиВажность.Видимость = Истина;
	Иначе
		Сообщить("Указан не верный режим документа. Обратитесь к администратору.")
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрутаПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура РежимПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	
	Если Объект.Режим = РежимРаботыРазныеЗадачи()
		И Объект.ИсполнителиИЗадачи.Количество()>0 Тогда 
		ОО = Новый ОписаниеОповещения("ВажностьПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОО, НСтр("ru = 'Изменить важность у формируемых задач?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИсполненияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ДатаКонтроля)
		Или ДатаКонтроля > ДатаИсполнения Тогда
		
		ПараметрыЗадач_Даты.Вставить("ДатаИсполнения",ДатаИсполнения);
		
	Иначе
		ОО = Новый ОписаниеОповещения("КонтрольДатЗавершение", ЭтотОбъект, Элемент);
		ДатаИсполнения = ПараметрыЗадач_Даты.ДатаИсполнения;
		
		ПоказатьПредупреждение(ОО, НСтр("ru = 'Дата контроля должна быть больше даты выполнения!'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаКонтроляПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ДатаКонтроля)
		Или ДатаКонтроля > ДатаИсполнения Тогда
		
		ПараметрыЗадач_Даты.Вставить("ДатаКонтроля",ДатаКонтроля);
		
	Иначе
		ОО = Новый ОписаниеОповещения("КонтрольДатЗавершение", ЭтотОбъект, Элемент);
		ДатаКонтроля = ПараметрыЗадач_Даты.ДатаКонтроля;
		ПоказатьПредупреждение(ОО, НСтр("ru = 'Дата контроля должна быть больше даты выполнения!'"));
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Файлы

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОсновнойСписокТД = Элементы.ИсполнителиИЗадачи.ТекущиеДанные;
	Если ОсновнойСписокТД = Неопределено Тогда 
		Отказ = Истина;
		ПоказатьПредупреждение(,"Для добавления файла выберите исполнителя.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	ТД = Элементы.Файлы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда 
		ОсновнойСписокТД = Элементы.ИсполнителиИЗадачи.ТекущиеДанные;
		//У старых документов ид не заполнен. Проверим, заполним.
		Если Не ЗначениеЗаполнено(ОсновнойСписокТД.ИдСтроки) Тогда 
			ОсновнойСписокТД.ИдСтроки =	Новый УникальныйИдентификатор;
		КонецЕсли;
		
		ТД.ИдСтроки = ОсновнойСписокТД.ИдСтроки;
	КонецЕсли;
	
	Если Копирование Тогда 
		
		ТД.ИмяФайла = "";
		ТД.АдресФайла = "";
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыИмяФайлаПриИзменении(Элемент)
	
	ТД = Элементы.Файлы.ТекущиеДанные;
	Если ПустаяСтрока(ТД.ИмяФайла) Тогда 
		ТД.АдресФайла = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'Все файлы'; en = 'All files'")
	+ "(*.*)|*.*";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ИмяФайла = ДиалогОткрытияФайла.ПолноеИмяФайла;
		ВыбФайл = Новый Файл(ИмяФайла);
		Размер = ВыбФайл.Размер();
		Если Размер > МаксимальныйРазмерФайла Тогда 
			ВызватьИсключение "Вы выбрали слишком большой файл. Выберите другой файл либо обратитесь к администратору.";
		КонецЕсли;
		Модифицированность = Истина;
		АдресФайла = "";
		//ПоместитьФайл(АдресФайла,ИмяФайла,,Ложь);
		//ДобавлениеФайлаНаСервере(Элементы.Файлы.ТекущаяСтрока, АдресФайла, ВыбФайл.Имя);
		ОО = Новый ОписаниеОповещения("ИмяФайлаНачалоВыбораЗавершение",ЭтотОбъект);
		НачатьПомещениеФайла(ОО,АдресФайла,ИмяФайла,Ложь);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыИмяФайлаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.Файлы.ТекущиеДанные;
	Если ПустаяСтрока(ТД.ИмяФайла) Тогда 
		ПоказатьПредупреждение(,"Файл не выбран");
		Возврат;
	КонецЕсли;
	Если ЭтоАдресВременногоХранилища(ТД.АдресФайла) Тогда 
	Иначе
		ВызватьИсключение "Ошибка получения данных файла. Обратитесь к администратору.";
	КонецЕсли;
	
	ИВФ = ПолучитьИмяВременногоФайла(ТД.РасширениеФайла);
	//В Хранилище должны быть Двоичные данные
	ДД = ПолучитьИзВременногоХранилища(ТД.АдресФайла);
	Если ТипЗнч(ДД) <> Тип("ДвоичныеДанные") Тогда 
		ВызватьИсключение "Содержимое файла разрушено. Обратитесь к администратору.";
	КонецЕсли;
	
	ДД.Записать(ИВФ);
	РаботаСФайламиСлужебныйКлиент.ВыполнитьЗапускПриложения(ИВФ);
	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	УстановитьРежимыРаботы(ЭтотОбъект);
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда 
		Для Каждого СтрокаТЧ Из Объект.ИсполнителиИЗадачи Цикл 
			СтрокаТЧ.Важность = Объект.Важность;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДатЗавершение(Элемент) Экспорт
	ЭтотОбъект.ТекущийЭлемент = Элемент;
КонецПроцедуры

&НаСервере
Процедура СоздатьЗадачиНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат;
	КонецЕсли;
	
	МассивПрисоединенныхФайлов = Новый Массив;
	ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(Объект.Ссылка,МассивПрисоединенныхФайлов);
	
	Для Каждого СтрокаТЧ Из Объект.ИсполнителиИЗадачи Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Поручение) Тогда 
			стрПараметры = Новый Структура("БизнесПроцесс,БизнесПроцессНомер");
			
			ВажностьПоручения = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			
			Если Объект.Режим = РежимРаботыРазныеЗадачи() Тогда 
				ОписаниеПоручения = СтрокаТЧ.ОписаниеПоручения;
				ВажностьПоручения = СтрокаТЧ.Важность;
			ИначеЕсли Объект.Режим = РежимРаботыОднаЗадача() Тогда 
				ОписаниеПоручения = Объект.ОписаниеПоручения;
				ВажностьПоручения = Объект.Важность;
			Иначе
				ВызватьИсключение "Не правильный режим работы документа."; 
			КонецЕсли;
			
			СтрокаТЧ.Поручение = ЗаписатьИСтартоватьБППоручение(стрПараметры, ОписаниеПоручения, СтрокаТЧ.Исполнитель, СтрокаТЧ.ДатаИсполнения,
 				СтрокаТЧ.Контроль, СтрокаТЧ.ДатаКонтроля, СтрокаТЧ.Клиент, ЗначениеЗаполнено(СтрокаТч.Контроль),ВажностьПоручения);
			ПеренестиПрисоединенныеФайлы(МассивПрисоединенныхФайлов,СтрокаТЧ.Поручение);
			
			Отбор = Новый Структура("ИдСтроки", СтрокаТЧ.ИдСтроки);
			СтрокиФайлы = Объект.Файлы.НайтиСтроки(Отбор);
			Для Каждого ЭМ Из СтрокиФайлы Цикл 
				//адрес может быть пустой строкой если например  файл не поместили
				Если ЭтоАдресВременногоХранилища(ЭМ.АдресФайла) Тогда 
					//В Хранилище должны быть Двоичные данные
					СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ЭМ.ИмяФайла);
					Если СтрокиПути.Количество() >= 2 Тогда
						Расширение = СтрокиПути[СтрокиПути.Количество()-1];
						ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
					Иначе
						Расширение = "";
						ИмяБезРасширения = ЭМ.ИмяФайла;
					КонецЕсли;
					ПрисоединенныеФайлы.ДобавитьФайл(СтрокаТЧ.Поручение, ИмяБезРасширения, Расширение,,,ЭМ.АдресФайла);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	Записать();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРежимыРаботы(Форма)
	
	Тумблер = Форма.Элементы.Режим;
	Тумблер.СписокВыбора.Очистить();
	
	ПредставлениеРежима = "";
	Режим = РежимРаботыОднаЗадача(ПредставлениеРежима);
	Тумблер.СписокВыбора.Добавить(Режим,ПредставлениеРежима);
	ПредставлениеРежима = "";
	Режим = РежимРаботыРазныеЗадачи(ПредставлениеРежима);
	Тумблер.СписокВыбора.Добавить(Режим,ПредставлениеРежима);
КонецПроцедуры

#Область Константы
&НаКлиентеНаСервереБезКонтекста
Функция РежимРаботыОднаЗадача(Представление = Неопределено)
	
	Возврат вогОбщегоНазначенияКлиентСервер.РаспределениеЗадач_РежимРаботыОднаЗадача(Представление)
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РежимРаботыРазныеЗадачи(Представление = Неопределено)
	
	Возврат вогОбщегоНазначенияКлиентСервер.РаспределениеЗадач_РежимРаботыРазныеЗадачи(Представление);
	
КонецФункции

#КонецОбласти

#Область ФайлыИсполнителей

&НаСервере
Процедура ДобавлениеФайлаНаСервере(ТекущаяСтрока, АдресФайла, КороткоеИмя);
	
	Если Не ЭтоАдресВременногоХранилища(АдресФайла) Тогда 
		ВызватьИсключение "Ошибка получения файла на сервере. Обратитесь к администратору. ""Адрес файла"" не является адресом временного хранилища.";
	КонецЕсли;
	
	ДД = ПолучитьИзВременногоХранилища(АдресФайла);
	//СтрокаТЧ = Объект.Файлы.НайтиПоИдентификатору(ТекущаяСтрока);
	//НомерСтроки = СтрокаТЧ.НомерСтроки;
	СтрокаТЧ = Объект.Файлы.НайтиПоИдентификатору(ТекущаяСтрока);
	СтрокаТЧ.АдресФайла = ПоместитьВоВременноеХранилище(ДД,УникальныйИдентификатор);
	СтрокаТЧ.ИмяФайла = КороткоеИмя;
	СтрокаТЧ.РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(КороткоеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИсполнителиПриАктивизацииСтроки()
	УстановитьОтборФайлов(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборФайлов(Форма)
	
	ОсновнойСписокТД = Форма.Элементы.ИсполнителиИЗадачи.ТекущиеДанные;
	Если ОсновнойСписокТД<>Неопределено Тогда 
		Отбор = Новый Структура("ИдСтроки", ОсновнойСписокТД.ИдСтроки);
		Форма.Элементы.Файлы.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбораЗавершение(Результат, Адрес, ВыбранноеИмя, ДопПараметры) Экспорт
	ДобавлениеФайлаНаСервере(Элементы.Файлы.ТекущаяСтрока, Адрес, ВыбранноеИмя);	
КонецПроцедуры

#КонецОбласти

#КонецОбласти