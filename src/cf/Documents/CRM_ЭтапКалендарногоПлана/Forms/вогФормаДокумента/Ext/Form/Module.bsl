#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//Модель кейса
		СтруктураМоделиКейса = CRM_УправлениеПроектамиСервер.СтруктураМоделиКейса(Объект.Проект.CRM_МодельКейса);
		
	КонецЕсли;
	
	//Данные регистров
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ПрочитатьТаблицыДанных(Параметры.ЗначениеКопирования);	
	КонецЕсли;
	
	//Инициализация
	ИнициализироватьФормуПоМоделиКейса();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//Модель кейса
	СтруктураМоделиКейса = CRM_УправлениеПроектамиСервер.СтруктураМоделиКейса(Объект.Проект.CRM_МодельКейса);
	
	//Данные регистров
	ПрочитатьТаблицыДанных(ТекущийОбъект);
	
	//+ск
	скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	//-ск

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//Данные регистров
	ЗаписатьТаблицыДанных(ТекущийОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьПродолжительность()
	Объект.ПродолжительностьДней = (КонецДня(Объект.ДатаЗакрытия) - НачалоДня(Объект.Дата)+1)/86400;
КонецПроцедуры

#Область ЗаполнениеКлассификаторы

&НаКлиенте
Процедура ЗаполнитьПоКлассификацииТаблицаКлиентов(Команда)

	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("ФормаПартнеров"    , НСтр("ru = 'Классификация клиентов'"));	
	СписокВариантов.Добавить("ФормаТорговыхТочек", НСтр("ru = 'Классификация торговых точек'"));	
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоКлассификацииЗавершение", ЭтотОбъект, Элементы.ТаблицаКлиентов);
	Если СписокВариантов.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(Оповещение, СписокВариантов[0]); 
	Иначе	
		СписокВариантов.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выберите вариант заполнения'"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКлассификацииТаблицаНоменклатура(Команда)
	
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("ФормаНоменклатура", НСтр("ru = 'Классификация номенклатуры'"));	
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоКлассификацииЗавершение", ЭтотОбъект, Элементы.ТаблицаНоменклатура);
	ВыполнитьОбработкуОповещения(Оповещение, СписокВариантов[0]); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКлассификацииТаблицаКоллекции(Команда)
	
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("ФормаКоллекцииНоменклатуры", НСтр("ru = 'Классификация коллекций'"));	
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоКлассификацииЗавершение", ЭтотОбъект, Элементы.ТаблицаКоллекции);
	ВыполнитьОбработкуОповещения(Оповещение, СписокВариантов[0]); 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДатаЗакрытияПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	РассчитатьПродолжительность();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	РассчитатьПродолжительность();
КонецПроцедуры

#Область ЗаполнениеКлассификаторы

&НаКлиенте
Процедура ТаблицаКлиентыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораТаблицы(Элемент.Имя, ВыбранноеЗначение, СтандартнаяОбработка);		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораТаблицы(Элемент.Имя, ВыбранноеЗначение, СтандартнаяОбработка);		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКоллекцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораТаблицы(Элемент.Имя, ВыбранноеЗначение, СтандартнаяОбработка);		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаСервере
Процедура ИнициализироватьФормуПоМоделиКейса()
	
	//+вог
	
	Элементы.БизнесРегион.Видимость	   			    = ?(ЗначениеЗаполнено(СтруктураМоделиКейса.ИспользоватьБизнесРегион), СтруктураМоделиКейса.ИспользоватьБизнесРегион, Истина);
	
	Элементы.ГруппаПартнеры.Видимость               = ?(ЗначениеЗаполнено(СтруктураМоделиКейса.ИспользоватьСвязанныхПартнеров), СтруктураМоделиКейса.ИспользоватьСвязанныхПартнеров, Истина)
													ИЛИ ?(ЗначениеЗаполнено(СтруктураМоделиКейса.ИспользоватьСвязанныеТорговыеТочки), СтруктураМоделиКейса.ИспользоватьСвязанныеТорговыеТочки, Истина);
	Элементы.ТаблицаКлиентовПартнер.Видимость       = ?(ЗначениеЗаполнено(СтруктураМоделиКейса.ИспользоватьСвязанныхПартнеров),СтруктураМоделиКейса.ИспользоватьСвязанныхПартнеров, Истина);
	Элементы.ТаблицаКлиентовТорговаяТочка.Видимость = ?(ЗначениеЗаполнено(СтруктураМоделиКейса.ИспользоватьСвязанныеТорговыеТочки),СтруктураМоделиКейса.ИспользоватьСвязанныеТорговыеТочки, Истина);
	Элементы.ГруппаПланДоходов.Видимость            = ?(ЗначениеЗаполнено(СтруктураМоделиКейса.ИспользоватьПланПродаж),СтруктураМоделиКейса.ИспользоватьПланПродаж, Истина);;
	Элементы.ГруппаПланРасходов.Видимость           = ?(ЗначениеЗаполнено(СтруктураМоделиКейса.ИспользоватьПланРасходовПоПроекту),СтруктураМоделиКейса.ИспользоватьПланРасходовПоПроекту, Истина);
	
	Элементы.ГруппаНоменклатура.Видимость    	    = ?(ЗначениеЗаполнено(СтруктураМоделиКейса.ИспользоватьСвязаннуюНоменклатуру),СтруктураМоделиКейса.ИспользоватьСвязаннуюНоменклатуру, Истина);
	Элементы.ГруппаКоллекции.Видимость    	        = ?(ЗначениеЗаполнено(СтруктураМоделиКейса.ИспользоватьСвязаннуюНоменклатуру),СтруктураМоделиКейса.ИспользоватьСвязаннуюНоменклатуру, Истина);
	
	//-вог

	
	//Элементы.БизнесРегион.Видимость	   			    = СтруктураМоделиКейса.ИспользоватьБизнесРегион;
	//
	//Элементы.ГруппаПартнеры.Видимость               = СтруктураМоделиКейса.ИспользоватьСвязанныхПартнеров ИЛИ СтруктураМоделиКейса.ИспользоватьСвязанныеТорговыеТочки;
	//Элементы.ТаблицаКлиентовПартнер.Видимость       = СтруктураМоделиКейса.ИспользоватьСвязанныхПартнеров;
	//Элементы.ТаблицаКлиентовТорговаяТочка.Видимость = СтруктураМоделиКейса.ИспользоватьСвязанныеТорговыеТочки;
	//Элементы.ГруппаПланДоходов.Видимость            = СтруктураМоделиКейса.ИспользоватьПланПродаж;
	//Элементы.ГруппаПланРасходов.Видимость           = СтруктураМоделиКейса.ИспользоватьПланРасходовПоПроекту;
	//
	////+вог
	//Элементы.ГруппаНоменклатура.Видимость    	    = СтруктураМоделиКейса.ИспользоватьСвязаннуюНоменклатуру;
	//Элементы.ГруппаКоллекции.Видимость    	        = СтруктураМоделиКейса.ИспользоватьСвязаннуюНоменклатуру;
	////-вог
		
КонецПроцедуры

#КонецОбласти

#Область ТаблицыДанных

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДанных()

	ОписанияТаблиц = Новый Массив;
	
	ОписанияТаблиц.Добавить(Новый Структура("ИмяТаблицы, ИмяРегистра", "ТаблицаКлиентов"    , "вогПартнерыПроектов"));
	ОписанияТаблиц.Добавить(Новый Структура("ИмяТаблицы, ИмяРегистра", "ТаблицаНоменклатура", "вогНоменклатураПроектов"));
	ОписанияТаблиц.Добавить(Новый Структура("ИмяТаблицы, ИмяРегистра", "ТаблицаКоллекции"   , "вогКоллекцииНоменклатурыПроектов"));
	ОписанияТаблиц.Добавить(Новый Структура("ИмяТаблицы, ИмяРегистра", "ТаблицаПланДоходов" , "вогПланДоходовПоПроектам"));
	ОписанияТаблиц.Добавить(Новый Структура("ИмяТаблицы, ИмяРегистра", "ТаблицаПланРасходов", "вогПланРасходовПоПроектам"));
	
	Возврат ОписанияТаблиц;

КонецФункции // ОписанияТаблицДанных()

&НаСервере
Процедура ПрочитатьТаблицыДанных(ТекущийОбъект, ОписанияТаблиц = Неопределено)

	Если ОписанияТаблиц = Неопределено Тогда
		ОписанияТаблиц = ОписанияТаблицДанных();
		
	КонецЕсли;
	
	Для каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл
		ТаблицаДанных = РеквизитФормыВЗначение(ОписаниеТаблицы.ИмяТаблицы);
		вогОбщегоНазначения.ПрочитатьТаблицуДанных(ТекущийОбъект.Проект, ТекущийОбъект.Ссылка, ТаблицаДанных, ОписаниеТаблицы);	
		ЗначениеВРеквизитФормы(ТаблицаДанных, ОписаниеТаблицы.ИмяТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры // ПрочитатьТаблицыДанных()

&НаСервере
Процедура ЗаписатьТаблицыДанных(ТекущийОбъект, ОписанияТаблиц = Неопределено)

	Если Не Модифицированность Тогда
		Возврат;	
	КонецЕсли;
	
	Если ОписанияТаблиц = Неопределено Тогда
		ОписанияТаблиц = ОписанияТаблицДанных();
		
	КонецЕсли;
	
	Для каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл
		ТаблицаДанных = РеквизитФормыВЗначение(ОписаниеТаблицы.ИмяТаблицы);
		вогОбщегоНазначения.ЗаписатьТаблицуДанных(ТекущийОбъект.Проект, ТекущийОбъект.Ссылка, ТаблицаДанных, ОписаниеТаблицы);	
		
	КонецЦикла;

КонецПроцедуры // ЗаписатьТаблицыДанных()

#КонецОбласти

#Область ЗаполнениеКлассификаторы

&НаКлиенте
Процедура ЗаполнитьПоКлассификацииЗавершение(ЭлементСписка, Элемент) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиент.ОткрытьПодборПоКлассификации(ЭлементСписка.Значение, Элемент);	
	
КонецПроцедуры // ЗаполнитьПоКлассификацииЗавершение()

&НаСервере
Процедура ОбработкаВыбораТаблицы(ИмяТаблицы, ВыбранноеЗначение, СтандартнаяОбработка)
	CRM_КлассификаторыВызовСервера.ОбработкаВыбораТаблицы(ЭтотОбъект, ИмяТаблицы, ВыбранноеЗначение, СтандартнаяОбработка);	
КонецПроцедуры // ОбработкаВыбора()


#КонецОбласти

#Область Подключаемый_МеханизмЗапускаБизнесПроцессов

&НаКлиенте
Процедура Подключаемый_ЗапускБизнесПроцесса(Команда)
	скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);
КонецПроцедуры // Подключаемый_ЗапускБизнесПроцесса()

#КонецОбласти

//+вог

#Область КарточкаОбъекта


&НаКлиенте
Процедура СтраницыКарточкаОбъектаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиКарточкиОбъектаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидимостиФормыПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры



#КонецОбласти
//-вог


