
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ++ VOG Солодов В.В. 05.03.2021 DEV-218
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	// -- VOG Солодов В.В. 05.03.2021 DEV-218
	
	Если Объект.Ссылка = Документы.ПланированиеПродажПлитка.ПустаяСсылка() тогда
		
		// ++ VOG Солодов В.В. 13.10.2021 CRM-1254
		Объект.Автор = ТекущийПользователь;
		
		Если Параметры.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаКвартал Тогда
			Объект.СценарийПланирования = Параметры.СценарийПланирования;
		Иначе
			
			Объект.ПериодПланирования 	= вогОбщегоНазначенияКлиентСервер.ПолучитьГодПланирования(Истина); // VOG Солодов В.В. 14.10.2021 CRM-1246
			Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаГод;
			
			// ++ VOG Солодов В.В. 13.10.2021 CRM-1253
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ПериодПланирования",
				"Доступность",
				Ложь);
			// -- VOG Солодов В.В. 13.10.2021 CRM-1253
			
		КонецЕсли;
		// До изменения
		//Объект.ПериодПланирования = Дата(Константы.ГодПланированияПлитка.Получить(),1,1);
		//// ++ VOG Солодов В.В. 20.02.2021 DEV-218
		//Объект.Автор = ТекущийПользователь;
		//Если Параметры.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаКвартал Тогда
		//	Объект.СценарийПланирования = Параметры.СценарийПланирования;
		//	Объект.ПериодПланирования 	= ДобавитьМесяц(НачалоКвартала(ТекущаяДата()), 3);
		//ИначеЕсли Не РольДоступна("ПолныеПрава") Тогда
		//	
		//	ТекстСообщения = НСтр("ru = 'Запрещено создавать годовое планирование.'");
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		//	
		//Иначе
		//// -- VOG Солодов В.В. 20.02.2021 DEV-218
		//	Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаГод;
		//КонецЕсли;
		// -- VOG Солодов В.В. 13.10.2021 CRM-1254
		
		Если Объект.Дата = НачалоДня(Объект.Дата) тогда
			Объект.Дата = ТекущаяДата();
		КонецЕсли;
		//+++ Терпогосян Д.Б. [06.08.2021 17:26:29] № DEV-743
		//ТекущийПользователь = Пользователи.ТекущийПользователь(); // ++ VOG Солодов В.В. 13.10.2021 CRM-1254 // Закомментировал
		РеквизитыПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(	ТекущийПользователь, "Подразделение", Истина);
		Объект.Подразделение  = Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(	РеквизитыПользователя.Подразделение);
		//--- Терпогосян Д.Б. [06.08.2021 17:26:35] № DEV-743 

	КонецЕсли;
	
	ОбъектКомпоновки = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.ПланированиеПродажПлитка"));
	// ++ VOG Солодов В.В. 20.02.2021 DEV-218
	Если Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаКвартал Тогда
		Схема = ОбъектКомпоновки.ПолучитьМакет("СхемаПлиткаКвартал");
		КвартальноеПланирование = Истина;
	Иначе
	// -- VOG Солодов В.В. 20.02.2021 DEV-218
		Схема = ОбъектКомпоновки.ПолучитьМакет("СхемаПлитка");
	КонецЕсли;
	АдресСхемы = ПоместитьВоВременноеХранилище(Схема,УникальныйИдентификатор);
	НастройкиСКД= Схема.НастройкиПоУмолчанию;
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	Компоновщик.Инициализировать(Источник);
	Если Объект.Ссылка<>Документы.ПланированиеПродажПлитка.ПустаяСсылка() тогда
		НастройкиСКД = Объект.Ссылка.Настройки.Получить();
	Иначе		
		Если НЕ ЗначениеЗаполнено(Объект.Автор) тогда
			Объект.Автор = Пользователи.ТекущийПользователь();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ВерсияСценария) тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	вогВерсииСценариевПланирования.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.вогВерсииСценариевПланирования КАК вогВерсииСценариевПланирования
			               |ГДЕ
			               |	вогВерсииСценариевПланирования.Владелец = &Владелец
			               |	И вогВерсииСценариевПланирования.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Владелец",Объект.СценарийПланирования);
			Запрос.УстановитьПараметр("Наименование","Основная");
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Объект.ВерсияСценария = Выборка.Ссылка;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ПериодПланирования) тогда
			// ++ VOG Солодов В.В. 14.10.2021 CRM-1246
			Объект.ПериодПланирования = вогОбщегоНазначенияКлиентСервер.ПолучитьГодПланирования(Истина);
			// До изменения
			//Объект.ПериодПланирования = Дата(Константы.ГодПланированияПлитка.Получить(),1,1);
			// -- VOG Солодов В.В. 14.10.2021 CRM-1246
		КонецЕсли;
		
	КонецЕсли;
	Компоновщик.ЗагрузитьНастройки(НастройкиСКД);
	
	
	// ++ VOG Солодов В.В. 14.10.2021 CRM-1246
	ГодПланирования = вогОбщегоНазначенияКлиентСервер.ПолучитьГодПланирования();
	// До изменения
	//ГодПланирования = Константы.ГодПланированияПлитка.Получить();
	// -- VOG Солодов В.В. 14.10.2021 CRM-1246
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КоэффициентыПереводаКоличестваВО_в_КоличествоМСрезПоследних.Комплект КАК Комплект,
	               |	КоэффициентыПереводаКоличестваВО_в_КоличествоМСрезПоследних.Коэффициент КАК К,
	               |	ВЫБОР
	               |		КОГДА КоэффициентыПереводаКоличестваВО_в_КоличествоМСрезПоследних.Комплект.ОграничитьКоличеством = 0
	               |			ТОГДА 9999
	               |		ИНАЧЕ КоэффициентыПереводаКоличестваВО_в_КоличествоМСрезПоследних.Комплект.ОграничитьКоличеством
	               |	КОНЕЦ КАК Ограничение
	               |ИЗ
	               |	РегистрСведений.КоэффициентыПереводаКоличестваВО_в_КоличествоМ.СрезПоследних КАК КоэффициентыПереводаКоличестваВО_в_КоличествоМСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		Строка = КоэффициентыПересчёта.Добавить();
		ЗаполнитьЗначенияСвойств(Строка,Выборка);
	КонецЦикла;
	
	//УжеЕсть = Ложь;	
	//ПолеКомп = Новый ПолеКомпоновкиДанных("СтатусТТ");
	//Для каждого Элемент из Компоновщик.Настройки.Отбор.Элементы цикл
	//	Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") тогда
	//		Если Элемент.ЛевоеЗначение = ПолеКомп тогда
	//			Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	//			Элемент.ПравоеЗначение = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af2-9a74-11e8-89fa-005056bc3fe8"));
	//			Элемент.Использование = Истина;
	//			УжеЕсть = Истина;	
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Если не УжеЕсть тогда
	//	Элемент = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	Элемент.ЛевоеЗначение = ПолеКомп;
	//	Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	//	Элемент.ПравоеЗначение = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af2-9a74-11e8-89fa-005056bc3fe8"));
	//	Элемент.Использование = Истина;
	//КонецЕсли;
	
	УстановитьСтандартныеОтборы(); // VOG Солодов В.В. 05.03.2021 DEV-218 // Вынес в отдельную процедуру
	
	//ПодразделениеТекущегопользователя = Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(Пользователи.ТекущийПользователь().Подразделение);	
	//Если ПодразделениеТекущегопользователя.Код<>"000000001" тогда
	//	
	//	Для каждого Элемент из Компоновщик.Настройки.Отбор.Элементы цикл
	//		Если ТипЗнч(Элемент)=Тип("ЭлементОтбораКомпоновкиДанных") тогда
	//			Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") тогда
	//				ЭлементОтбора = Элемент;
	//				Прервать;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Если ЭлементОтбора=Неопределено тогда
	//		ЭлементОтбора = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
	//	КонецЕсли;
	//	
	//	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	//	ЭлементОтбора.ПравоеЗначение = ПодразделениеТекущегопользователя;
	//	ЭлементОтбора.Использование = Истина;
	//	
	//КонецЕсли;
	
	
	ТабДок.ФиксацияСлева = 1;

	Элементы.ДляПолныхПрав.Видимость = РольДоступна("ПолныеПрава");
	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//+++ Терпогосян Д.Б. [06.08.2021 16:52:01] № DEV-743
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//--- Терпогосян Д.Б. [06.08.2021 16:52:07] № DEV-743 
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Автор) тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	ТекущийОбъект.Настройки = Новый ХранилищеЗначения(Компоновщик.ПолучитьНастройки());
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ВерсияСценария) тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	вогВерсииСценариевПланирования.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.вогВерсииСценариевПланирования КАК вогВерсииСценариевПланирования
		               |ГДЕ
		               |	вогВерсииСценариевПланирования.Владелец = &Владелец
		               |	И вогВерсииСценариевПланирования.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Владелец",ТекущийОбъект.СценарийПланирования);
		Запрос.УстановитьПараметр("Наименование","Основная");
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ТекущийОбъект.ВерсияСценария = Выборка.Ссылка;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ПериодПланирования) тогда
		// ++ VOG Солодов В.В. 14.10.2021 CRM-1246
		ТекущийОбъект.ПериодПланирования = вогОбщегоНазначенияКлиентСервер.ПолучитьГодПланирования(Истина);
		// До изменения
		//ТекущийОбъект.ПериодПланирования = Дата(Константы.ГодПланированияПлитка.Получить(),1,1);
		// -- VOG Солодов В.В. 14.10.2021 CRM-1246
	КонецЕсли;
	//ПересчитатьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ++ VOG Солодов В.В. 12.03.2021 DEV-218
	Если ВыполняетсяЗакрытие Тогда
		Возврат;
	КонецЕсли;
	// -- VOG Солодов В.В. 12.03.2021 DEV-218
	// ++ VOG Солодов В.В. 25.02.2021 DEV-218
	Если Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаКвартал Тогда
		ЗаполнитьНаСервереКвартал();
	Иначе
	// -- VOG Солодов В.В. 25.02.2021 DEV-218
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	// ++ VOG Солодов В.В. 20.02.2021 DEV-218
	Если Объект.СценарийПланирования = ПредопределенноеЗначение("Справочник.вогСценарииПланирования.ПланНаКвартал") Тогда
		ЗаполнитьНаСервереКвартал();
	Иначе
	// -- VOG Солодов В.В. 20.02.2021 DEV-218
		ЗаполнитьНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	УстановитьСтандартныеНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Пересчитать(Команда)
	
	ПересчитатьНаСервере();	
	Модифицированность = Истина;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 12.03.2021 DEV-218
&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ВыполняетсяЗакрытие = Истина;
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Записать(ПараметрыЗаписи);
	Закрыть();
	
КонецПроцедуры // -- VOG Солодов В.В. 12.03.2021 DEV-218

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Схема 				= ПолучитьИзВременногоХранилища(АдресСхемы);
	Настройки 			= Компоновщик.ПолучитьНастройки();
	ТекущаяДата 		= ДобавитьМесяц(Объект.Дата,0);
	ОбъектКомпоновки 	= ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ПланированиеПродажПлитка"));
	МакетОформления 	= ОбъектКомпоновки.ПолучитьМакет("МакетОформления");
	
	// ++ VOG Солодов В.В. 13.10.2021 CRM-1249
	Если Месяц(ТекущаяДата) 	= 1 Тогда
		
		НачалоМесяца 	= НачалоМесяца(ТекущаяДата);
		НачалоПродаж 	= НачалоМесяца(ТекущаяДата);
		
	Иначе
		
		НачалоМесяца 	= НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1));
		НачалоПродаж 	= НачалоГода(ДобавитьМесяц(ТекущаяДата, -1));
		
	КонецЕсли;
	
	КонецМесяца 	= КонецМесяца(ДобавитьМесяц(ТекущаяДата, -1));
	КонецПродаж 	= КонецМесяца(ДобавитьМесяц(ТекущаяДата, -1));
	// -- VOG Солодов В.В. 13.10.2021 CRM-1249
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("РольДоступнаПолныеПрава", 		РольДоступна("ПолныеПрава"));
	УстановитьПривилегированныйРежим(Истина);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Подчиненные", 					Новый Массив(ПараметрыСеанса.вогПодчиненныеСотрудники));
	УстановитьПривилегированныйРежим(Ложь);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Подразделение", 					Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(Пользователи.ТекущийПользователь().Подразделение));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаДокумента", 					Объект.Дата);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка", 						Объект.Ссылка);
	// ++ VOG Солодов В.В. 13.10.2021 CRM-1249
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоМесяца", 					НачалоМесяца);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецМесяца", 					КонецМесяца);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПродаж", 					НачалоПродаж);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПродаж", 					КонецПродаж);
	// До изменения
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоМесяца", 					НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1)));
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецМесяца", 					КонецМесяца(ДобавитьМесяц(ТекущаяДата, -1)));
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПродаж", 					НачалоГода(ДобавитьМесяц(ТекущаяДата, -1)));
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПродаж", 					КонецМесяца(ДобавитьМесяц(ТекущаяДата, -1)));
	// -- VOG Солодов В.В. 13.10.2021 CRM-1249
	// +++ VOG Кулаков П.Л. 23.06.2021 DEV-678
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПродажТекущаяДата",ТекущаяДата);
	// --- VOG Кулаков П.Л.
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПродажПрошлыйГод", 		НачалоГода(ДобавитьМесяц(ТекущаяДата,-12)));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПродажПрошлыйГод", 			КонецГода(ДобавитьМесяц(ТекущаяДата,-12)));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПродаж4мес", 				НачалоМесяца(ДобавитьМесяц(ТекущаяДата,-4)));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Направление", 					Справочники.НаправленияДеятельности.Плитка);
	// +++ VOG Кулаков П.Л. 09.06.2021 DEV-605
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Версия", 						Объект.ВерсияСценария);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодПланирования", 			Объект.ПериодПланирования);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СценарийПланирования", 			Объект.СценарийПланирования);
	// --- VOG Кулаков П.Л.
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПринадлежностьБренда", 			Перечисления.вогПринадлежностьБренда.ТоварныйПортфельВОГ); 
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлассификаторФорматТРТ", 		ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("47b0ee76-ada2-11e7-80ce-08606e7382bc")));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлассификаторСтатусТТ", 			ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8")));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлассификаторКлассификацияТТ", 	ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("b3d84c6b-7581-11ea-87ff-005056bc3fe8")));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлассификаторПлощадьОтдела", 	ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("aa8de7b3-1aec-11e8-92c3-005056bcf152")));
	СписокDIY = Новый СписокЗначений;
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("4fc40649-ada2-11e7-80ce-08606e7382bc")));
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("64a60c68-06d3-11eb-8f2a-005056bcd3e3")));
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("6cac4f07-06d3-11eb-8f2a-005056bcd3e3")));
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ФорматDIY", 						СписокDIY);
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СтатусТТЗакрыта", 				Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8"))); 
	
	// ++ VOG Солодов В.В. 14.10.2021 CRM-1252
	// Перенесено в схему компоновки, связь с РС НоменклатурныеГруппыСегмента
	// До изменения
	// +++ VOG Кулаков П.Л. 15.06.2021 DEV-
	//СписокНоменклатурныхГрупп = Новый Массив;
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("3d9d7ea6-9214-11e3-ba76-005056ac259f"))); 	// Cersanit эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("0724a7b8-9214-11e3-ba76-005056ac259f"))); 	// Cersanit грес
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("1124e951-8af2-11e6-bdbb-005056acd97c"))); 	// Cersanit эксклюзив
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("4fb1c538-8af2-11e6-bdbb-005056acd97c"))); 	// Cersanit эксклюзив эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("fe9b747f-66b5-11e3-b895-005056ac8899"))); 	// Керамин Грес
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("890358c7-9215-11e3-ba76-005056ac259f"))); 	// Керамин эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("6305ae54-66b2-11e3-b895-005056ac8899"))); 	// Лассельсбергер Грес
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("beb8fcb7-9215-11e3-ba76-005056ac259f"))); 	// Лассельсбергер эконом
	////СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("ac73bba4-d609-11e8-90d6-005056acd97c"))); 	// Евро-Керамика эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("718e0936-4466-11e8-8a33-005056acd97c"))); 	// Глобал Тайл Керосса
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("2c413b40-6868-11e7-9071-005056acd97c"))); 	// Глобал Тайл Береза эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("93d2e7ca-9214-11e3-ba76-005056ac259f"))); 	// Глобал Тайл Брест
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("ce968682-8b47-11e9-b50e-005056acd97c"))); 	// Глобал Тайл Волгоград
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("d9c62157-8b47-11e9-b50e-005056acd97c"))); 	// Глобал Тайл Волгоград эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("bbf9cf19-9214-11e3-ba76-005056ac259f"))); 	// Глобал Тайл Контакт
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("dbded927-9214-11e3-ba76-005056ac259f"))); 	// Глобал Тайл Контакт эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("bcd952fb-943b-11ea-9d8b-005056acd97c"))); 	// Глобал Тайл Мозаика
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("7d97e0a1-ec17-11e5-b10e-005056acd97c"))); 	// Глобал Тайл Печоры эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("4f495708-9215-11e3-ba76-005056ac259f"))); 	// Глобал Тайл УФА эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("12f8f600-6868-11e7-9071-005056acd97c"))); 	// Глобал Тайл Шахты эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("9b07ca14-66bc-11e3-b895-005056ac8899"))); 	// Meissen грес
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("d1baae94-1cdc-11eb-b333-005056bcd3e3"))); 	// Concept GT эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("5016c309-9428-11ea-9d8b-005056acd97c"))); 	// Интеркерама мозаика
	//// --- VOG Кулаков П.Л.
	//
	//НовОтбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//НовОтбор.Использование = Истина;
	//НовОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НоменклатурнаяГруппа");
	//НовОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	//НовОтбор.ПравоеЗначение = СписокНоменклатурныхГрупп;
	// -- VOG Солодов В.В. 14.10.2021 CRM-1252
	
	КомпоновщикМакета 		= Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(Схема,Настройки,ДанныеРасшифровки,МакетОформления,Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,ДанныеРасшифровки,Истина,Истина);
	
	ТабДок.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки,УникальныйИдентификатор);
	
	СохраненныеРасшифровкиЯчеек = Новый ТаблицаЗначений;
	СохраненныеРасшифровкиЯчеек.Колонки.Добавить("ИмяОбласти");
	СохраненныеРасшифровкиЯчеек.Колонки.Добавить("ИДРасшифровки");
	Для НомерСтроки = 1 по ТабДок.ВысотаТаблицы цикл
		Для НомерСтолбца = 1 по ТабДок.ШиринаТаблицы цикл
			ИмяОбласти = "R"+Формат(НомерСтроки,"ЧГ=0")+"C"+Формат(НомерСтолбца,"ЧГ=0");
			СтрокаД = СохраненныеРасшифровкиЯчеек.Добавить();
			СтрокаД.ИДРасшифровки = ТабДок.Область(ИмяОбласти).Расшифровка;
			СтрокаД.ИмяОбласти = ИмяОбласти;
		КонецЦикла;
	КонецЦикла;
	СохраненныеРасшифровкиЯчеек.Индексы.Добавить("ИмяОбласти");
	АдресСохраненныхРасшифровокЯчеек = ПоместитьВоВременноеХранилище(СохраненныеРасшифровкиЯчеек,УникальныйИдентификатор);
	
	ТабДок.ФиксацияСлева = 1;
	ТабДок.ФиксацияСверху = 7;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтандартныеОтборы()
	
	ЭлементОтбора = Неопределено;
	Зпрс = Новый Запрос;
	Зпрс.Текст = "ВЫБРАТЬ
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель
	|	И ИсполнителиЗадач.РольИсполнителя = &Роль";
	Зпрс.УстановитьПараметр("Исполнитель", ТекущийПользователь);
	Зпрс.УстановитьПараметр("Роль",Справочники.РолиИсполнителей.НайтиПоКоду("000000032"));
	Результат = Зпрс.Выполнить();
	Если не Результат.Пустой() тогда
		Для каждого Элемент из Компоновщик.Настройки.Отбор.Элементы цикл
			Если ТипЗнч(Элемент)=Тип("ЭлементОтбораКомпоновкиДанных") тогда
				Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Менеджер")
					Или Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МенеджерОтбор") Тогда // VOG Солодов В.В. 09.03.2021 DEV-218
					ЭлементОтбора = Элемент;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ЭлементОтбора=Неопределено тогда
			ЭлементОтбора = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Менеджер");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ЭлементОтбора.ПравоеЗначение = Объект.Автор;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 05.03.2021 DEV-218
	Если Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаКвартал Тогда
		
		ПодразделениеПользователя 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение", Истина);
		КодПоразделения 			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодразделениеПользователя, "Код", Истина);
		
		ОбособленноеПодразделениеПольхователя 	= Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(
			ПодразделениеПользователя);
		
		Если Объект.Ссылка.Пустая() И Не КодПоразделения = "000000001" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				Компоновщик.Настройки.Отбор,
				"ПодразделениеОтбор",
				ОбособленноеПодразделениеПольхователя,
				ВидСравненияКомпоновкиДанных.Равно,
				,
				Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 09.03.2021 DEV-218

КонецПроцедуры 

// ++ VOG Солодов В.В. 20.02.2021 DEV-218
&НаСервере
Процедура ЗаполнитьНаСервереКвартал()
	
	// Значения параметров
	КлассификаторКлассификацияТТ 	= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("b3d84c6b-7581-11ea-87ff-005056bc3fe8"));
	КлассификаторПлощадьОтдела 		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("aa8de7b3-1aec-11e8-92c3-005056bcf152"));
	КлассификаторСтатусТТ 			= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8"));
	КлассификаторФорматТРТ 			= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("47b0ee76-ada2-11e7-80ce-08606e7382bc"));
	КлассификаторКатегорияКлиента 	= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("165f1d7d-b614-11ea-8f2a-005056bcd3e3"));
	
	СтатусТТЗакрыта 				= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8"));
	
	СписокDIY = Новый СписокЗначений;
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("4fc40649-ada2-11e7-80ce-08606e7382bc")));
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("64a60c68-06d3-11eb-8f2a-005056bcd3e3")));
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("6cac4f07-06d3-11eb-8f2a-005056bcd3e3")));
	
	// ++ VOG Солодов В.В. 14.10.2021 CRM-1252
	// Перенесено в схему компоновки, связь с РС НоменклатурныеГруппыСегмента
	// До изменения
	// +++ VOG Кулаков П.Л. 15.06.2021 DEV-
	//СписокНоменклатурныхГрупп = Новый Массив;
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("3d9d7ea6-9214-11e3-ba76-005056ac259f"))); 	// Cersanit эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("0724a7b8-9214-11e3-ba76-005056ac259f"))); 	// Cersanit грес
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("1124e951-8af2-11e6-bdbb-005056acd97c"))); 	// Cersanit эксклюзив
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("4fb1c538-8af2-11e6-bdbb-005056acd97c"))); 	// Cersanit эксклюзив эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("fe9b747f-66b5-11e3-b895-005056ac8899"))); 	// Керамин Грес
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("890358c7-9215-11e3-ba76-005056ac259f"))); 	// Керамин эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("6305ae54-66b2-11e3-b895-005056ac8899"))); 	// Лассельсбергер Грес
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("beb8fcb7-9215-11e3-ba76-005056ac259f"))); 	// Лассельсбергер эконом
	////СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("ac73bba4-d609-11e8-90d6-005056acd97c"))); 	// Евро-Керамика эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("718e0936-4466-11e8-8a33-005056acd97c"))); 	// Глобал Тайл Керосса
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("2c413b40-6868-11e7-9071-005056acd97c"))); 	// Глобал Тайл Береза эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("93d2e7ca-9214-11e3-ba76-005056ac259f"))); 	// Глобал Тайл Брест
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("ce968682-8b47-11e9-b50e-005056acd97c"))); 	// Глобал Тайл Волгоград
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("d9c62157-8b47-11e9-b50e-005056acd97c"))); 	// Глобал Тайл Волгоград эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("bbf9cf19-9214-11e3-ba76-005056ac259f"))); 	// Глобал Тайл Контакт
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("dbded927-9214-11e3-ba76-005056ac259f"))); 	// Глобал Тайл Контакт эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("bcd952fb-943b-11ea-9d8b-005056acd97c"))); 	// Глобал Тайл Мозаика
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("7d97e0a1-ec17-11e5-b10e-005056acd97c"))); 	// Глобал Тайл Печоры эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("4f495708-9215-11e3-ba76-005056ac259f"))); 	// Глобал Тайл УФА эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("12f8f600-6868-11e7-9071-005056acd97c"))); 	// Глобал Тайл Шахты эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("9b07ca14-66bc-11e3-b895-005056ac8899"))); 	// Meissen грес
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("d1baae94-1cdc-11eb-b333-005056bcd3e3"))); 	// Concept GT эконом
	//СписокНоменклатурныхГрупп.Добавить(Справочники.НоменклатурныеГруппы.ПолучитьСсылку(Новый УникальныйИдентификатор("5016c309-9428-11ea-9d8b-005056acd97c"))); 	// Интеркерама мозаика
	//// --- VOG Кулаков П.Л.
	// -- VOG Солодов В.В. 14.10.2021 CRM-1252
	
	ПодчиненныеСотрудники = вогОбщегоНазначенияПовтИсп.ПолучитьПодчиненныхСотрудников();
	
	СтатусыКомандировок = Новый Массив;
	СтатусыКомандировок.Добавить(Перечисления.вогСтатусыКомандировок.Утверждено);
	СтатусыКомандировок.Добавить(Перечисления.вогСтатусыКомандировок.ГотовоКПроверке);
	СтатусыКомандировок.Добавить(Перечисления.вогСтатусыКомандировок.Проверено);
	
	ВидыТорговыхТочек = Новый Массив;
	ВидыТорговыхТочек.Добавить(Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
	ВидыТорговыхТочек.Добавить(Справочники.вогВидыТорговыхТочек.ТРТД);
	ВидыТорговыхТочек.Добавить(Справочники.вогВидыТорговыхТочек.Дистрибьютор);
	
	//
	Схема = ПолучитьИзВременногоХранилища(АдресСхемы);
	МакетОформления = Неопределено;
	
	ТекущаяДата 						= Объект.Дата;
	ТекущийКвартал 						= Цел((Месяц(ТекущаяДата) - 1) / 3) + 1;
	
	УстановитьЗаголовкиПолей(Схема, ТекущаяДата, ТекущийКвартал);
	
	// Продажи текущий квартал текущего года
	НачалоПродаж 						= НачалоГода(ТекущаяДата);
	КонецПродаж 						= НачалоМесяца(ТекущаяДата) - 1;
	
	// Продажи весь прошлый год
	НачалоПродажПрошлыйГод 				= НачалоГода(НачалоПродаж - 1);
	КонецПродажПрошлыйГод 				= КонецГода(НачалоПродажПрошлыйГод);
	
	// Продажи следующий квартал прошлого года
	// +++ VOG Кулаков П.Л. 15.06.2021 DEV-648
	//КонецПродажПрошлыйГодСледКвартал 	= КонецКвартала(ДобавитьМесяц(КонецПродаж, - (12 - 3 * ТекущийКвартал)));
	//НачалоПродажПрошлыйГодСледКвартал 	= НачалоКвартала(КонецПродажПрошлыйГодСледКвартал);
	ПериодПланирования 					= КонецДня(Объект.ПериодПланирования);
	
	КонецПродажПрошлыйГодСледКвартал 	= КонецКвартала(ДобавитьМесяц(ПериодПланирования, - 12));
	НачалоПродажПрошлыйГодСледКвартал 	= НачалоКвартала(КонецПродажПрошлыйГодСледКвартал);
	// --- VOG Кулаков П.Л.
	
	// Продажи следующий квартал прошлого года
	КонецПродажL2L 						= КонецКвартала(ДобавитьМесяц(Объект.ПериодПланирования, -12));
	
	// Периоды планирования
	ДатаНачалаРасчетаСледующийКвартал 	= ДобавитьМесяц(Объект.ПериодПланирования, 3);
	ДатаНачалаРасчетаПрошлыйКвартал 	= Объект.ПериодПланирования;
	
	// Установка параметров
	УстанавливаемыеПараметры = Новый Соответствие;
	УстанавливаемыеПараметры.Вставить("Ссылка", 							Объект.Ссылка);
	УстанавливаемыеПараметры.Вставить("ДатаДокумента", 						Объект.Дата);
	УстанавливаемыеПараметры.Вставить("Направление", 						Справочники.НаправленияДеятельности.Плитка);
	УстанавливаемыеПараметры.Вставить("Подразделение", 						ОбособленноеПодразделениеПольхователя);
	УстанавливаемыеПараметры.Вставить("Подчиненные", 						ПодчиненныеСотрудники);
	УстанавливаемыеПараметры.Вставить("ПринадлежностьБренда", 				Перечисления.вогПринадлежностьБренда.ТоварныйПортфельВОГ);
	УстанавливаемыеПараметры.Вставить("РольДоступнаПолныеПрава", 			РольДоступна("ПолныеПрава"));
	УстанавливаемыеПараметры.Вставить("КлассификаторКлассификацияТТ", 		КлассификаторКлассификацияТТ);
	УстанавливаемыеПараметры.Вставить("КлассификаторПлощадьОтдела", 		КлассификаторПлощадьОтдела);
	УстанавливаемыеПараметры.Вставить("КлассификаторСтатусТТ", 				КлассификаторСтатусТТ);
	УстанавливаемыеПараметры.Вставить("КлассификаторФорматТРТ", 			КлассификаторФорматТРТ);
	УстанавливаемыеПараметры.Вставить("ФорматDIY", 							СписокDIY);
	УстанавливаемыеПараметры.Вставить("НачалоПродаж", 						НачалоПродаж);
	УстанавливаемыеПараметры.Вставить("КонецПродаж", 						КонецПродаж);
	// +++ VOG Кулаков П.Л. 23.06.2021 DEV-678
	УстанавливаемыеПараметры.Вставить("КонецПродажТекущаяДата",				ТекущаяДата);
	// --- VOG Кулаков П.Л.
	УстанавливаемыеПараметры.Вставить("НачалоПродажПрошлыйГод", 			НачалоПродажПрошлыйГод);
	УстанавливаемыеПараметры.Вставить("КонецПродажПрошлыйГод", 				КонецПродажПрошлыйГод);
	УстанавливаемыеПараметры.Вставить("КлассификаторКатегорияКлиента", 		КлассификаторКатегорияКлиента);
	УстанавливаемыеПараметры.Вставить("НачалоПродажПрошлыйГодСледКвартал", 	НачалоПродажПрошлыйГодСледКвартал);
	УстанавливаемыеПараметры.Вставить("КонецПродажПрошлыйГодСледКвартал", 	КонецПродажПрошлыйГодСледКвартал);
	УстанавливаемыеПараметры.Вставить("ДатаНачалаРасчетаПрошлыйКвартал", 	ДатаНачалаРасчетаПрошлыйКвартал);
	УстанавливаемыеПараметры.Вставить("ДатаНачалаРасчетаСледующийКвартал", 	ДатаНачалаРасчетаСледующийКвартал);
	УстанавливаемыеПараметры.Вставить("КонецПродажL2L", 					КонецПродажL2L);
	УстанавливаемыеПараметры.Вставить("СтатусТТЗакрыта", 					СтатусТТЗакрыта);
	УстанавливаемыеПараметры.Вставить("СтатусыКомандировок", 				СтатусыКомандировок);
	УстанавливаемыеПараметры.Вставить("ВидыТорговыхТочек", 					ВидыТорговыхТочек);
	УстанавливаемыеПараметры.Вставить("Версия", 							Объект.ВерсияСценария);
	УстанавливаемыеПараметры.Вставить("ПериодПланирования", 				Объект.ПериодПланирования);
	УстанавливаемыеПараметры.Вставить("СценарийПланирования", 				Объект.СценарийПланирования);
	УстанавливаемыеПараметры.Вставить("ПериодПланаНаМесяц", 				ДобавитьМесяц(НачалоМесяца(ТекущаяДата), -1)); // ИЗМЕНИТЬ на НачалоМесяца(Объект.Дата)
	УстанавливаемыеПараметры.Вставить("Сценарий", 							Справочники.вогСценарииПланирования.ПланНаМесяцПоКлиентам);
	// ++ VOG Солодов В.В. 14.10.2021 CRM-1252
	// До изменения
	//УстанавливаемыеПараметры.Вставить("СписокНоменклатурныхГрупп", 			СписокНоменклатурныхГрупп);
	// -- VOG Солодов В.В. 14.10.2021 CRM-1252
	
	КомпоновкаДанныхКлиентСервер.УстановитьКоллекциюПараметров(Компоновщик, УстанавливаемыеПараметры);
	
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки 			= Новый ДанныеРасшифровкиКомпоновкиДанных;
	Настройки 					= Компоновщик.ПолучитьНастройки();
	
	МакетКомпоновкиДанных 		= КомпоновщикМакета.Выполнить(Схема, Настройки, ДанныеРасшифровки, МакетОформления, Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,, ДанныеРасшифровки, Истина, Истина);
	
	ТабДок.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	АдресДанныхРасшифровки 	= ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	
	СохраненныеРасшифровкиЯчеек = Новый ТаблицаЗначений;
	СохраненныеРасшифровкиЯчеек.Колонки.Добавить("ИмяОбласти");
	СохраненныеРасшифровкиЯчеек.Колонки.Добавить("ИДРасшифровки");
	Для НомерСтроки = 1 по ТабДок.ВысотаТаблицы цикл
		Для НомерСтолбца = 1 по ТабДок.ШиринаТаблицы цикл
			ИмяОбласти = СтрШаблон("R%1C%2", Формат(НомерСтроки, "ЧГ=0"), Формат(НомерСтолбца, "ЧГ=0"));
			СтрокаД = СохраненныеРасшифровкиЯчеек.Добавить();
			СтрокаД.ИДРасшифровки = ТабДок.Область(ИмяОбласти).Расшифровка;
			СтрокаД.ИмяОбласти = ИмяОбласти;
		КонецЦикла;
	КонецЦикла;
	СохраненныеРасшифровкиЯчеек.Индексы.Добавить("ИмяОбласти");
	АдресСохраненныхРасшифровокЯчеек = ПоместитьВоВременноеХранилище(СохраненныеРасшифровкиЯчеек, УникальныйИдентификатор);
	
	ТабДок.ФиксацияСлева 	= 2;
	ТабДок.ФиксацияСверху 	= 4;
	
	ВключитьВозможностьСверткиГруппыКолонок("Выставочное оборудование");
	ВключитьВозможностьСверткиГруппыКолонок("Выставление");
	ВключитьВозможностьСверткиГруппыКолонок("Продажи");
	ВключитьВозможностьСверткиГруппыКолонок("Маркетинг");
	
	ТабДок.ПоказатьУровеньГруппировокКолонок(0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиПолей(СхемаКомпоновкиДанных, ДатаДокумента, ТекущийКвартал)
	
	Для Каждого Поле Из СхемаКомпоновкиДанных.НаборыДанных.Данные.Поля Цикл
		
		Если СтрНайти(Поле.Заголовок, "%Текущий год%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Текущий год%", Формат(ДатаДокумента, "ДФ=yyyy"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Прошлый год%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Прошлый год%", Формат(НачалоГода(ДатаДокумента) - 1, "ДФ=yyyy"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Следующий квартал%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Следующий квартал%", СтрШаблон("%1 кв", ТекущийКвартал + 1));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Прошлый квартал%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Прошлый квартал%", СтрШаблон("%1 кв", ТекущийКвартал));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%1 месяц%") > 0 Тогда
			ДатаМесяца = ДобавитьМесяц(НачалоГода(ДатаДокумента), ТекущийКвартал * 3);
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%1 месяц%", Формат(ДатаМесяца, "ДФ=MMMM"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%2 месяц%") > 0 Тогда
			ДатаМесяца = ДобавитьМесяц(НачалоГода(ДатаДокумента), ТекущийКвартал * 3 + 1);
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%2 месяц%", Формат(ДатаМесяца, "ДФ=MMMM"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%3 месяц%") > 0 Тогда
			ДатаМесяца = ДобавитьМесяц(НачалоГода(ДатаДокумента), ТекущийКвартал * 3 + 2);
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%3 месяц%", Формат(ДатаМесяца, "ДФ=MMMM"));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьВозможностьСверткиГруппыКолонок(НазваниеГруппыКолонок)
	
	// найдем первую ячейку группы
	ПерваяЯчейкаГруппы = ТабДок.НайтиТекст(НазваниеГруппыКолонок,,,, Истина);
	Если ПерваяЯчейкаГруппы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// определим количество колонок группы (используется особенность объединенных ячеек - одинаковый текст в них)
	КоличествоКолонокГруппы = 1;
	Пока ПерваяЯчейкаГруппы.Текст = ТабДок.Область(ПерваяЯчейкаГруппы.Верх, ПерваяЯчейкаГруппы.Лево + КоличествоКолонокГруппы).Текст Цикл
		КоличествоКолонокГруппы = КоличествоКолонокГруппы + 1;
	КонецЦикла;
	
	Если НазваниеГруппыКолонок = "Маркетинг" Тогда
		КолонкаНачалаСвертки 	= ПерваяЯчейкаГруппы.Лево + 1;
	Иначе
		КолонкаНачалаСвертки 	= ПерваяЯчейкаГруппы.Лево + 2;
	КонецЕсли;
	КолонкаКонцаСвертки 	= ПерваяЯчейкаГруппы.Лево + КоличествоКолонокГруппы - 1;
	
	// сгруппируем колонки группы
	ТабДок.Область(, КолонкаНачалаСвертки, ПерваяЯчейкаГруппы.Верх, КолонкаКонцаСвертки).Сгруппировать();
	
КонецПроцедуры

&НаСервере
Процедура ТабДокПриИзмененииСодержимогоОбластиКварталНаСервере(Значение, ИДРасшифровки, ИмяОбласти)
	
	Перем Реквизит, Смещение;
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	
	ДанныеРасшифровкиОбласти 	= ДанныеРасшифровки.Элементы[ИДРасшифровки];
	ПоляРасшифровки 			= ДанныеРасшифровкиОбласти.ПолучитьПоля();
	
	Если ПоляРасшифровки.Найти("Комментарий") = Неопределено
		И ПоляРасшифровки.Найти("ЗадачиПоДостижениюЦели") = Неопределено
		И ПоляРасшифровки.Найти("КомментарийВыставление") = Неопределено Тогда
		
		ЗначениеПоля 			= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение);
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
			
			Если ЗначениеПоля < 0 Тогда
				ЗначениеПоля 	= -1 * ЗначениеПоля;
			КонецЕсли;
			
			Значение 			= ЗначениеПоля;
			
		ИначеЕсли ЗначениеПоля = Неопределено Тогда
			Значение 			= "";
		КонецЕсли;
		
	КонецЕсли;
	
	ПоискСтруктура = Новый Структура;
	
	Если Не ПоляРасшифровки.Найти("Командировка") = Неопределено Тогда // Командировки
		
		Для Каждого ПолеРасшифровки Из ПоляРасшифровки Цикл
			
			Если ПолеРасшифровки.Поле = "Партнер"
				И ПоляРасшифровки.Найти("ТорговаяТочкаОтбор") = Неопределено Тогда
				ПоискСтруктура.Вставить("Владелец", ПолеРасшифровки.Значение);
			ИначеЕсли ПолеРасшифровки.Поле = "ТорговаяТочкаОтбор" Тогда
				ПоискСтруктура.Вставить("Владелец", ПолеРасшифровки.Значение);
			ИначеЕсли Не ПолеРасшифровки.Поле = "Командировка"
				И Не ПолеРасшифровки.Поле = "Партнер"
				И Не ПолеРасшифровки.Поле = "ПотеницальнаяТорговаяТочка" Тогда
				Реквизит = ПолеРасшифровки.Поле;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПоискСтруктура.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		НайденныеСтроки = Объект.Командировки.НайтиСтроки(ПоискСтруктура);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			Строка = Объект.Командировки.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ПоискСтруктура);
			
		ИначеЕсли НайденныеСтроки.Количество() > 0 Тогда
			
			Строка = НайденныеСтроки[0];
			
		КонецЕсли;
		
		Строка[Реквизит] = Значение;
		
	ИначеЕсли Не ПоляРасшифровки.Найти("Комментарий") = Неопределено
		Или Не ПоляРасшифровки.Найти("КомментарийВыставление") = Неопределено Тогда // Комментарии
		
		ПоискСтруктура.Вставить("Бренд", Справочники.вогБренды.ПустаяСсылка());
		ПоискСтруктура.Вставить("КомплектПанелей", Справочники.КомплектыПанелейДляПланирования.ПустаяСсылка());
		
		Для Каждого ПолеРасшифровки Из ПоляРасшифровки Цикл
			
			Если ПолеРасшифровки.Поле = "Партнер"
				И ПоляРасшифровки.Найти("ТорговаяТочкаОтбор") = Неопределено Тогда
				ПоискСтруктура.Вставить("Владелец", ПолеРасшифровки.Значение);
			ИначеЕсли ПолеРасшифровки.Поле = "ТорговаяТочкаОтбор" Тогда
				ПоискСтруктура.Вставить("Владелец", ПолеРасшифровки.Значение);
			ИначеЕсли ПолеРасшифровки.Поле = "Бренд" Тогда
				ПоискСтруктура.Вставить("Бренд", ПолеРасшифровки.Значение);
			ИначеЕсли ПолеРасшифровки.Поле = "КомплектПанелей" Тогда
				ПоискСтруктура.Вставить("КомплектПанелей", ПолеРасшифровки.Значение);
			ИначеЕсли ПолеРасшифровки.Поле = "Комментарий" Тогда
				ПоискСтруктура.Вставить("Выставление", Ложь);
			ИначеЕсли ПолеРасшифровки.Поле = "КомментарийВыставление" Тогда
				ПоискСтруктура.Вставить("Выставление", Истина);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПоискСтруктура.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		НайденныеСтроки = Объект.КомментарииКвартал.НайтиСтроки(ПоискСтруктура);
		
		Если НайденныеСтроки.Количество() = 0
			И Не ПустаяСтрока(Значение) Тогда
			
			Строка = Объект.КомментарииКвартал.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ПоискСтруктура);
			
			Строка.Комментарий = Значение;
			
		ИначеЕсли НайденныеСтроки.Количество() > 0 Тогда
			
			Строка = НайденныеСтроки[0];
			
			Если ПустаяСтрока(Значение) Тогда
				
				ИндексСтроки = Объект.КомментарииКвартал.Индекс(Строка);
				Объект.КомментарииКвартал.Удалить(ИндексСтроки);
				
				Возврат;
				
			КонецЕсли;
			
			Строка.Комментарий = Значение;
			
		КонецЕсли;
		
		Возврат;
	
	Иначе // Остальные поля
		
		Для Каждого ПолеРасшифровки Из ПоляРасшифровки Цикл
			
			Если ПолеРасшифровки.Поле = "ТорговаяТочкаОтбор" Тогда
				ПоискСтруктура.Вставить("ТорговаяТочка", ПолеРасшифровки.Значение);
			ИначеЕсли ПолеРасшифровки.Поле = "Партнер" Тогда
				
				// ++ VOG Солодов В.В. 30.06.2021 DEV-707
				Если ПоляРасшифровки.Найти("ТорговаяТочкаОтбор") = Неопределено Тогда
					ПоискСтруктура.Вставить("Партнер", ПолеРасшифровки.Значение);
				КонецЕсли;
				// До изменения
				//ПоискСтруктура.Вставить("Партнер", ПолеРасшифровки.Значение);
				// -- VOG Солодов В.В. 30.06.2021 DEV-707
				
			ИначеЕсли ПолеРасшифровки.Поле = "Бренд" Тогда
				ПоискСтруктура.Вставить("Бренд", ПолеРасшифровки.Значение);
			ИначеЕсли ПолеРасшифровки.Поле = "КомплектПанелей" Тогда
				ПоискСтруктура.Вставить("КомплектПанелей", ПолеРасшифровки.Значение);
			ИначеЕсли ПолеРасшифровки.Поле = "МерчендайзингАкция"
				Или ПолеРасшифровки.Поле = "МерчендайзингIndoor"
				// +++ VOG Кулаков П.Л. 27.05.2021 DEV-571
				Или ПолеРасшифровки.Поле = "Представительские"
					// --- VOG Кулаков П.Л.
				Или ПолеРасшифровки.Поле = "МерчендайзингOutdoor" Тогда
				
				Родители = ДанныеРасшифровкиОбласти.ПолучитьРодителей();
				
				Если Родители.Количество() <> 0 Тогда
					
					ДанныеРасшифровкиГруппировки 	= ДанныеРасшифровки.Элементы.Получить(Родители[0].Идентификатор);
					ПоляРасшифровкиГруппировки 		= ДанныеРасшифровкиГруппировки.ПолучитьПоля();
					
					Для Каждого ПолеРасшифровкиГруппировки Из ПоляРасшифровкиГруппировки Цикл
						
						Если ПолеРасшифровкиГруппировки.Поле = "ТорговаяТочкаОтбор" Тогда
							ПоискСтруктура.Вставить("ТорговаяТочка", ПолеРасшифровкиГруппировки.Значение);
						ИначеЕсли ПолеРасшифровкиГруппировки.Поле = "Партнер" Тогда
							ПоискСтруктура.Вставить("Партнер", ПолеРасшифровкиГруппировки.Значение);
						ИначеЕсли ПолеРасшифровкиГруппировки.Поле = "Бренд" Тогда
							ПоискСтруктура.Вставить("Бренд", ПолеРасшифровкиГруппировки.Значение);
						КонецЕсли;
						
					КонецЦикла;
					
					ПоискСтруктура.Вставить("КомплектПанелей", Справочники.КомплектыПанелейДляПланирования.ПустаяСсылка());
					
				КонецЕсли;
				
				Реквизит = ПолеРасшифровки.Поле;
				
			ИначеЕсли Не ПолеРасшифровки.Поле = "ВозможноРедактирование"
				И Не ПолеРасшифровки.Поле = "ПотеницальнаяТорговаяТочка" Тогда
				
				ПолеРотация = ПоляРасшифровки.Найти("РотацияПанелей");
				
				Если Не ПолеРотация = Неопределено Тогда
					Реквизит = "РотацияПанелей";
				Иначе
					Реквизит = ПолеРасшифровки.Поле;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПоискСтруктура.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		НайденныеСтроки = Объект.ДанныеПланированияКвартал.НайтиСтроки(ПоискСтруктура);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			Строка = Объект.ДанныеПланированияКвартал.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ПоискСтруктура);
			
		Иначе
			Строка = НайденныеСтроки[0];
		КонецЕсли;
		
		Реквизит 			= СтрЗаменить(Реквизит, "Отбор", "");
		Строка[Реквизит] 	= Значение;
		
		Если Реквизит = "КорректировкаКоличествоВОФактУПП"
			И СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение) = 0 Тогда
			Строка.РотацияПанелей = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяОбласть 	= ТабДок.Область(ИмяОбласти);
	СтруктураПоля 	= Новый Структура;
	
	Если Реквизит = "КорректировкаКоличествоВОФактУПП" Тогда
		
		Смещение 			= 2;
		
		Если СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение) <> 0 Тогда
			СтруктураПоля.Вставить("ЦветФона", WebЦвета.Лазурный);
		Иначе
			СтруктураПоля.Вставить("ЦветФона", Новый Цвет);
			СтруктураПоля.Вставить("Текст", "");
		КонецЕсли;
		
	ИначеЕсли Реквизит = "ПланВыставленияСледующийКвартал" Тогда
		
		Смещение 			= -5;
		ИмяЗависимойОбласти = СтрШаблон(
			"R%1C%2",
			Формат(ТекущаяОбласть.Верх, "ЧГ=0"),
			Формат(ТекущаяОбласть.Лево + Смещение, "ЧГ=0"));
		ЗависимаяОбласть 	= ТабДок.Область(ИмяЗависимойОбласти);
		
		Если Значение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗависимаяОбласть.Текст) Тогда
			СтруктураПоля.Вставить("ЦветФона", WebЦвета.Роса);
		Иначе
			СтруктураПоля.Вставить("ЦветФона", Новый Цвет);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Смещение) Тогда
		
		ИмяЗависимойОбласти = СтрШаблон(
			"R%1C%2",
			Формат(ТекущаяОбласть.Верх, "ЧГ=0"),
			Формат(ТекущаяОбласть.Лево + Смещение, "ЧГ=0"));
		ЗависимаяОбласть 	= ТабДок.Область(ИмяЗависимойОбласти);
		
		Для Каждого КлючИЗначение Из СтруктураПоля Цикл
			ЗависимаяОбласть[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////
	РедактируемыеПоля = Новый Соответствие;
	
	// +++ VOG Кулаков П.Л. 27.05.2021 DEV-571
	Если СтрНайти(Реквизит, "Командировка") > 0
		Или СтрНайти(Реквизит, "ЗадачиПоДостижениюЦели") > 0 Тогда
		
		РедактируемыеПоля.Вставить("ЗадачиПоДостижениюЦели", 36);
		РедактируемыеПоля.Вставить("КомандировкаМесяц1", 39);
		РедактируемыеПоля.Вставить("КомандировкаМесяц2", 40);
		РедактируемыеПоля.Вставить("КомандировкаМесяц3", 41);
		
	// +++ VOG Кулаков П.Л. 21.06.2021 DEV-673
	ИначеЕсли СтрНайти(Реквизит, "Мерчендайзинг") > 0
			ИЛИ СтрНайти(Реквизит, "Представительские") > 0 Тогда
		
		РедактируемыеПоля.Вставить("МерчендайзингOutdoor", 43);
		РедактируемыеПоля.Вставить("МерчендайзингIndoor", 44);
		РедактируемыеПоля.Вставить("МерчендайзингАкция", 45);
		
		РедактируемыеПоля.Вставить("Представительские", 46);
	// --- VOG Кулаков П.Л.
		// --- VOG Кулаков П.Л.
		
	Иначе
		
		РедактируемыеПоля.Вставить("КорректировкаКоличествоВОФактУПП", 15);
		РедактируемыеПоля.Вставить("ПланВыставленияСледующийКвартал", 16);
		РедактируемыеПоля.Вставить("РотацияПанелей", 17);
		РедактируемыеПоля.Вставить("КоличествоШоуРум", 18);
		РедактируемыеПоля.Вставить("СтоимостьШоуРум", 19);
		РедактируемыеПоля.Вставить("КоличествоПланСледующийКвартал", 21);
		РедактируемыеПоля.Вставить("КоличествоУценка", 33);
		РедактируемыеПоля.Вставить("ПроцентУценка", 34);
		// +++ VOG Кулаков П.Л. 27.05.2021 DEV-571
		РедактируемыеПоля.Вставить("СтоимостьУценка", 35);
		// --- VOG Кулаков П.Л.
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из РедактируемыеПоля Цикл
		
		Если Не КлючИЗначение.Ключ = Реквизит Тогда
			
			ИмяЗависимойОбласти = СтрШаблон(
				"R%1C%2",
				Формат(ТекущаяОбласть.Верх, "ЧГ=0"),
				Формат(КлючИЗначение.Значение, "ЧГ=0"));
			
			ЗависимаяОбласть = ТабДок.Область(ИмяЗависимойОбласти);
			
			Если ТипЗнч(Строка[КлючИЗначение.Ключ]) = Тип("Число") Тогда
				Строка[КлючИЗначение.Ключ] = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗависимаяОбласть.Текст);
			Иначе
				Строка[КлючИЗначение.Ключ] = ЗависимаяОбласть.Текст;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьВозможностьРедактироватьКвартальное(АдресРасшифровки, ИДРасшифровки)
	
	Попытка
		
		ДанныеРасшифровки 			= ПолучитьИзВременногоХранилища(АдресРасшифровки);
		ДанныеРасшифровкиОбласти 	= ДанныеРасшифровки.Элементы.Получить(ИДРасшифровки);
		
		Если ТипЗнч(ДанныеРасшифровкиОбласти) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			
			ПоляРасшифровки 		= ДанныеРасшифровкиОбласти.ПолучитьПоля(); 
			
			ПараметрыОтбора = Новый Структура;
			
			Для Каждого ПолеРасшифровки Из ПоляРасшифровки Цикл
				Если ПолеРасшифровки.Поле = "ТорговаяТочкаОтбор"
					// ++ VOG Солодов В.В. 14.09.2021 CRM-1212
					Или (ПолеРасшифровки.Поле = "Партнер" И ПоляРасшифровки.Найти("ТорговаяТочкаОтбор") = Неопределено)
					// До изменения
					//Или ПолеРасшифровки.Поле = "Партнер"
					// -- VOG Солодов В.В. 14.09.2021 CRM-1212
					Или ПолеРасшифровки.Поле = "Бренд"
					Или ПолеРасшифровки.Поле = "КомплектПанелей" Тогда
					ПараметрыОтбора.Вставить(СтрЗаменить(ПолеРасшифровки.Поле, "Отбор", ""), ПолеРасшифровки.Значение);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ПолеРасшифровки Из ПоляРасшифровки Цикл
				
				Если ПолеРасшифровки.Поле = "ВозможноРедактирование" Тогда
					
					Если Не ПоляРасшифровки.Найти("РотацияПанелей") = Неопределено Тогда
						
						ПолеУсловие = ПоляРасшифровки.Найти("КорректировкаКоличествоВОФактУПП");
						
						НайденныеСтроки = Объект.ДанныеПланированияКвартал.НайтиСтроки(ПараметрыОтбора);
						
						ИскомоеЗначение = 0;
						Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
							ИскомоеЗначение = СтрокаТабличнойЧасти.КорректировкаКоличествоВОФактУПП;
						КонецЦикла;
						
						Если ИскомоеЗначение <> 0 Или ПолеУсловие.Значение <> 0 Тогда
							Возврат Истина;
						КонецЕсли;
						
						Возврат Ложь;
						
					ИначеЕсли Не ПоляРасшифровки.Найти("КорректировкаКоличествоВОФактУПП") = Неопределено
						Или Не ПоляРасшифровки.Найти("КоличествоУценка") = Неопределено
						Или Не ПоляРасшифровки.Найти("ПроцентУценка") = Неопределено
						Или Не ПоляРасшифровки.Найти("СтоимостьУценка") = Неопределено Тогда
						
						Если (ПоляРасшифровки.Найти("ПотеницальнаяТорговаяТочка").Значение = Истина) Тогда
							Возврат Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
					Возврат Истина;
					
				ИначеЕсли ПолеРасшифровки.Поле = "КомандировкаМесяц1"
					Или ПолеРасшифровки.Поле = "КомандировкаМесяц2"
					Или ПолеРасшифровки.Поле = "КомандировкаМесяц3"
					Или ПолеРасшифровки.Поле = "ЗадачиПоДостижениюЦели" Тогда
					
					//// Ограничение на ввод количества командировок для потенциальных ТТ
					//Если Не ПолеРасшифровки.Поле = "ЗадачиПоДостижениюЦели"
					//	И (ПоляРасшифровки.Найти("ПотеницальнаяТорговаяТочка").Значение = Истина) Тогда
					//	
					//	Возврат Ложь;
					//	
					//КонецЕсли;
					
					Родители = ДанныеРасшифровкиОбласти.ПолучитьРодителей();
					
					Если Родители.Количество() <> 0 Тогда
						
						ДанныеРасшифровкиГруппировки 	= ДанныеРасшифровки.Элементы.Получить(Родители[0].Идентификатор);
						ПоляРасшифровкиГруппировки 		= ДанныеРасшифровкиГруппировки.ПолучитьПоля();
						
						ПолеУсловие1 = ПоляРасшифровкиГруппировки.Найти("КомплектПанелей");
						ПолеУсловие2 = ПоляРасшифровкиГруппировки.Найти("Бренд");
						
						Возврат (ПолеУсловие1 = Неопределено И ПолеУсловие2 = Неопределено);
						
					КонецЕсли;
					
				ИначеЕсли ПолеРасшифровки.Поле = "МерчендайзингАкция"
					Или ПолеРасшифровки.Поле = "МерчендайзингIndoor"
					// +++ VOG Кулаков П.Л. 27.05.2021 DEV-571
					Или ПолеРасшифровки.Поле = "Представительские"
					// --- VOG Кулаков П.Л.
					Или ПолеРасшифровки.Поле = "МерчендайзингOutdoor" Тогда
					
					Родители = ДанныеРасшифровкиОбласти.ПолучитьРодителей();
					
					Если Родители.Количество() <> 0 Тогда
						
						ДанныеРасшифровкиГруппировки 	= ДанныеРасшифровки.Элементы.Получить(Родители[0].Идентификатор);
						ПоляРасшифровкиГруппировки 		= ДанныеРасшифровкиГруппировки.ПолучитьПоля();
						
						ПолеУсловие1 = ПоляРасшифровкиГруппировки.Найти("КомплектПанелей");
						ПолеУсловие2 = ПоляРасшифровкиГруппировки.Найти("Партнер");
						ПолеУсловие3 = ПоляРасшифровкиГруппировки.Найти("ТорговаяТочкаОтбор");
						
						Возврат (ПолеУсловие1 = Неопределено И ПолеУсловие2 = Неопределено И ПолеУсловие3 = Неопределено);
						
					КонецЕсли;
					
				ИначеЕсли ПолеРасшифровки.Поле = "Комментарий"
					Или ПолеРасшифровки.Поле = "КомментарийВыставление" Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// -- VOG Солодов В.В. 20.02.2021 DEV-218

#КонецОбласти




&НаКлиенте
Процедура ТабДокВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ++ VOG Солодов В.В. 25.02.2021 DEV-218
	ИДРасшифровки = ПолучитьИДРасшифровки(Область.Имя, АдресСохраненныхРасшифровокЯчеек);
	
	Если (КвартальноеПланирование И ЕстьВозможностьРедактироватьКвартальное(АдресДанныхРасшифровки, ИДРасшифровки))
		Или (НЕ КвартальноеПланирование И ЕстьВозможностьРедактировать(АдресДанныхРасшифровки, ИДРасшифровки,ПолучитьСписокК())) Тогда
	// До Изменения
	//Если ЕстьВозможностьРедактировать(АдресДанныхРасшифровки, ПолучитьИДРасшифровки(Область.Имя,АдресСохраненныхРасшифровокЯчеек),ПолучитьСписокК()) тогда
	// -- VOG Солодов В.В. 25.02.2021 DEV-218
		Если ЭтоПолеВводаКвартала(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(Область.Имя,АдресСохраненныхРасшифровокЯчеек)) тогда
			СпЗ = Новый СписокЗначений;
			СпЗ.Добавить("1","4 кв "+Формат((ГодПланирования-1),"ЧГ=0"));
			СпЗ.Добавить("2","1 кв "+Формат(ГодПланирования,"ЧГ=0"));
			СпЗ.Добавить("3","2 кв "+Формат(ГодПланирования,"ЧГ=0"));
			СпЗ.Добавить("4","3 кв "+Формат(ГодПланирования,"ЧГ=0"));
			СпЗ.Добавить("5","4 кв "+Формат(ГодПланирования,"ЧГ=0"));
			Выбор = ВыбратьИзСписка(СпЗ);
			Область.Текст = Выбор;
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
		Область.Защита = Истина;
		Значение = ОткрытьЗначение(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(Область.Имя,АдресСохраненныхРасшифровокЯчеек));
		Если ЗначениеЗаполнено(Значение) и ТипЗнч(Значение) = Тип("СправочникСсылка.вогТорговыеТочки") тогда
			ОткрытьФорму("Справочник.вогТорговыеТочки.Форма.ФормаЭлемента",Новый Структура("Ключ",Значение));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаСервереБезКонтекста
Функция ЕстьВозможностьРедактировать(АдресРасшифровки,ИДРасшифровки,СписокК)
	
	Попытка
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки);
		ДанныеРасшифровкиОбласти = ДанныеРасшифровки.Элементы[ИДРасшифровки];
		ПоляРасшифровки = ДанныеРасшифровкиОбласти.ПолучитьПоля(); 
		КолВоПолей=0;
		//Если ПоляРасшифровки.Найти("КоличествоПотенциал")<>Неопределено	тогда
		//	ПолеР = ПоляРасшифровки.Найти("СредниеПродажи4_Расшифровка");
		//	Если ЗначениеЗаполнено(ПолеР.Значение) и ПоляРасшифровки.Найти("ВозможноРедактирование")<>Неопределено 
		//		и ПоляРасшифровки.Найти("КомплектПанелей").Значение.ВидВО = Перечисления.вогВидыОборудования.DIYПолка и НЕ ЗначениеЗаполнено(ПоляРасшифровки.Найти("КоличествоВОПоБрендамУПП").Значение)	
		//		и НЕ ЗначениеЗаполнено(ПоляРасшифровки.Найти("КоличествоВОПоБрендамАнкета").Значение)	тогда
		//			Возврат Истина;
		//	КонецЕсли;
		//КонецЕсли;
		
		Если ПоляРасшифровки.Найти("Комментарий")<>Неопределено тогда
			Возврат Истина;
		КонецЕслИ;
		
		Если ПоляРасшифровки.Найти("НаименованиеТТ")<>Неопределено тогда
			
			Если ПоляРасшифровки.Найти("НаименованиеТТ").Значение = Перечисления.ВидыПотенциальнойТорговойТочки.ПотенциальныйИнтернетМагазин тогда
				Если ПоляРасшифровки.Найти("КомплектПанелей").Значение.ВидВО <> Перечисления.вогВидыОборудования.ОборудованиеКлиента тогда
					Возврат Ложь;	
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
		Если ПоляРасшифровки.Найти("КоличествоПотенциал")<>Неопределено	тогда
			ПолеР = ПоляРасшифровки.Найти("СредниеПродажи4_Расшифровка");
			Если НЕ ЗначениеЗаполнено(ПоляРасшифровки.Найти("КоличествоВОПоБрендамУПП").Значение)	
				и НЕ ЗначениеЗаполнено(ПоляРасшифровки.Найти("КоличествоВОПоБрендамАнкета").Значение) и ПоляРасшифровки.Найти("ВозможноРедактирование")<>Неопределено тогда
				ПолеР = ПоляРасшифровки.Найти("КомплектПанелей");
				//Если СписокК.Найти(ПолеР.Значение)= Неопределено и ПолеР.Значение.ВидВО <> Перечисления.вогВидыОборудования.ОборудованиеКлиента  тогда
				Если СписокК.Найти(ПолеР.Значение)= Неопределено  тогда
					Возврат Истина;
				Иначе
					Возврат ЛОжь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ПоляРасшифровки.Найти("КоличествоПлан")<>Неопределено тогда
			ПолеР = ПоляРасшифровки.Найти("СредниеПродажи4_Расшифровка");
			Если Не ЗначениеЗаполнено(ПолеР.Значение) и ПоляРасшифровки.Найти("ВозможноРедактирование")<>Неопределено тогда
				ПолеР = ПоляРасшифровки.Найти("КомплектПанелей");
				//Если СписокК.Найти(ПолеР.Значение)= Неопределено и ПолеР.Значение.ВидВО <> Перечисления.вогВидыОборудования.ОборудованиеКлиента тогда
				Если СписокК.Найти(ПолеР.Значение)= Неопределено тогда
					Возврат Истина;
				Иначе
					Возврат ЛОжь;
				КонецЕсли;
			//Иначе
			//	Возврат ЛОжь;
			КонецЕсли;
		КонецЕсли;
		
		Если ПоляРасшифровки.Найти("КоличествоВОПлан")<>Неопределено тогда
			Возврат Ложь;
		КонецЕсли;
		
		Поле = ПоляРасшифровки.Найти("КомплектПанелей");
		Если Поле<>Неопределено тогда
			Если Поле.Значение.ВидВО = Перечисления.вогВидыОборудования.ОборудованиеКлиента тогда
				Если ПоляРасшифровки.Найти("КоличествоВОПотенциал")<>Неопределено или  ПоляРасшифровки.Найти("ДатаВыставленияВОПотенциал")<>Неопределено или
					ПоляРасшифровки.Найти("ПоправочныйКоэффициентПотенциал")<>Неопределено или ПоляРасшифровки.Найти("КоличествоПотенциал")<>Неопределено или 
					ПоляРасшифровки.Найти("ПоправочныйКоэффициентПотенциал")<>Неопределено или  ПоляРасшифровки.Найти("КоличествоПлан")<>Неопределено тогда                
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ПолеР из ПоляРасшифровки цикл
			Если ПолеР.Поле = "ВозможноРедактирование" тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;	
	Исключение
		возврат Ложь;	
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОткрытьЗначение(АдресРасшифровки,ИДРасшифровки)
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки);
	Попытка
		ДанныеРасшифровкиОбласти = ДанныеРасшифровки.Элементы[ИДРасшифровки];
		ПоляРасшифровки = ДанныеРасшифровкиОбласти.ПолучитьПоля(); 
		КолВо=0;
		Значение = Неопределено;
		Для каждого ПолеР из ПоляРасшифровки цикл
			Если ТипЗнч(ПолеР.Значение) = Тип("СправочникСсылка.вогТорговыеТочки") тогда
				Значение = ПолеР.Значение;	
			КонецЕсли;
			КолВо=КолВо+1;	
		КонецЦикла;
		Если КолВо>1 тогда
			Значение = Неопределено;
		КонецЕслИ;
		Возврат Значение;	
	Исключение	
	КонецПопытки;
	Возврат Неопределено;
КонецФункции


&НаСервереБезКонтекста
Функция ЭтоПолеВводаКвартала(АдресРасшифровки,ИДРасшифровки)
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки);
	Попытка
		ДанныеРасшифровкиОбласти = ДанныеРасшифровки.Элементы[ИДРасшифровки];
		ПоляРасшифровки = ДанныеРасшифровкиОбласти.ПолучитьПоля(); 
		КолВоПолей=0;
		Для каждого ПолеР из ПоляРасшифровки цикл
			Если Найти(ПолеР.Поле,"Дата")>0 тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;	
	Исключение
		возврат Ложь;	
	КонецПопытки;
	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьИДРасшифровки(ИмяОбласти,Адрес)
	Попытка
		ТЗ = ПолучитьИзВременногоХранилища(Адрес);
		Поиск = Новый Структура("ИмяОбласти",ИмяОбласти);
		СтрокиРасшифроки = ТЗ.НайтиСтроки(Поиск);
		Если СтрокиРасшифроки.Количество()>0 тогда
			Возврат СтрокиРасшифроки[0].ИдРасшифровки;		
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат 0;
КонецФункции

&НаКлиенте
Процедура ТабДокПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ++ VOG Солодов В.В. 25.02.2021 DEV-218
	Если КвартальноеПланирование Тогда
		
		ИДРасшифровки = ПолучитьИДРасшифровки(Область.Имя, АдресСохраненныхРасшифровокЯчеек);
		
		Если ЕстьВозможностьРедактироватьКвартальное(АдресДанныхРасшифровки, ИДРасшифровки) Тогда
			ТабДокПриИзмененииСодержимогоОбластиКварталНаСервере(Область.Текст, ИДРасшифровки,Область.Имя);
			Модифицированность = Истина;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 25.02.2021 DEV-218
	Если Найти(Область.Имя,":")>0 тогда
		МассивОбластей = СтрРазделить(Область.Имя,":",Ложь);		
		ПерваяЯчейка= СтрРазделить(Сред(МассивОбластей[0],2),"C",Ложь);
		ПоследняяЧейка= СтрРазделить(Сред(МассивОбластей[1],2),"C",Ложь);
		Для  НомерСтроки = Число(ПерваяЯчейка[0]) по Число(ПоследняяЧейка[0]) цикл
			Для  НомерКолонки = Число(ПерваяЯчейка[1]) по Число(ПоследняяЧейка[1]) цикл
				ОбластьТабДок = ТабДок.Область("R"+Формат(НомерСтроки,"ЧГ=0")+"C"+Формат(НомерКолонки,"ЧГ=0"));
				Если ЕстьВозможностьРедактировать(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(ОбластьТабДок.Имя,АдресСохраненныхРасшифровокЯчеек),ПолучитьСписокК()) тогда
					ТабДокПриИзмененииСодержимогоОбластиНаСервере(ОбластьТабДок.Текст,ПолучитьИДРасшифровки(ОбластьТабДок.Имя,АдресСохраненныхРасшифровокЯчеек),ОбластьТабДок.Имя);
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	Иначе	
		Если ЕстьВозможностьРедактировать(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(Область.Имя,АдресСохраненныхРасшифровокЯчеек),ПолучитьСписокК()) тогда
			ТабДокПриИзмененииСодержимогоОбластиНаСервере(Область.Текст,ПолучитьИДРасшифровки(Область.Имя,АдресСохраненныхРасшифровокЯчеек),Область.Имя);
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура ТабДокПриИзмененииСодержимогоОбластиНаСервере(Значение,ИДРасшифровки,ИмяОбласти)
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	Попытка
		ДанныеРасшифровкиОбласти = ДанныеРасшифровки.Элементы[ИДРасшифровки];
		ПоляРасшифровки = ДанныеРасшифровкиОбласти.ПолучитьПоля(); 
		ЗначениеПоля = 	Число(СтрЗаменить(СтрЗаменить(Значение,",",".")," ",""));
	Исключение
		ЗначениеПоля = Неопределено;
	КонецПопытки;
	ПоискСтруктура = Новый Структура;
	СредниеПродажи = 0;
	КоличествоВО = 0;
	КоличествоВОУПП = 0;
	КоличествоВОПоБрендуУПП = 0 ;
	КоличествоВОПоБрендуАнкета = 0;
	
	Если ПоляРасшифровки.Найти("Комментарий")=Неопределено тогда
		
		
		Для каждого ПолеР из ПоляРасшифровки цикл
			Если ПолеР.Поле = "ТорговаяТочка" тогда
				ПоискСтруктура.Вставить("ТорговаяТочка",ПолеР.Значение);
			ИначеЕсли ПолеР.Поле = "Бренд" тогда
				ПоискСтруктура.Вставить("Бренд",ПолеР.Значение);
			ИначеЕсли ПолеР.Поле = "КомплектПанелей" тогда
				ПоискСтруктура.Вставить("КомплектПанелей",ПолеР.Значение);
			ИначеЕсли ПолеР.Поле = "СредниеПродажи4_Расшифровка" тогда
				СредниеПродажи = ПолеР.Значение;
			ИначеЕсли ПолеР.Поле = "КоличествоВО_Факт" тогда  
				КоличествоВО = ПолеР.Значение;
			ИначеЕсли ПолеР.Поле = "КоличествоВОПоБрендамУПП" тогда  
				КоличествоВОПоБрендуУПП = ПолеР.Значение;
			ИначеЕсли ПолеР.Поле = "КоличествоВОПоБрендамАнкета" тогда  
				КоличествоВОПоБрендуАнкета = ПолеР.Значение;
			ИначеЕсли ПолеР.Поле = "НаименованиеТТ" тогда  
				НаименованиеТТ = ПолеР.Значение;
			ИначеЕсли ПолеР.Поле = "КоличествоКомплектов_По_Брендам" тогда  
				КоличествоВОУПП = ПолеР.Значение;
			ИначеЕсли ПолеР.Поле = "Комментарий" или  Найти(ПолеР.Поле,"Дата")>0 тогда
				ЗначениеПоля = Значение;
				Реквизит = ПолеР.Поле;
			ИначеЕсли ПолеР.Поле <> "ВозможноРедактирование" тогда
				Реквизит = ПолеР.Поле;
			КонецЕсли;	
		КонецЦикла;
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Число") тогда 
			Если ЗначениеПоля<0 тогда
				ЗначениеПоля = -1*ЗначениеПоля ;
			КонецЕсли;
			
			Если ПоискСтруктура.КомплектПанелей.ВидВО <> Перечисления.вогВидыОборудования.ОборудованиеКлиента тогда
				Если Реквизит <> "ПоправочныйКоэффициентПотенциал" и Реквизит <> "ПоправочныйКоэффициентПлан" тогда		
					ЗначениеПоля = Окр(ЗначениеПоля,0);
				КонецЕсли;
			Иначе
				Если СтрНайти(Реквизит,"Потенциал")>0 тогда
					ЗначениеПоля = 0;
				КонецЕсли;
			КонецЕсли;
			Если Реквизит = "ПоправочныйКоэффициентПотенциал" и ЗначениеПоля < 1 тогда
				ЗначениеПоля = 1;
			КонецЕсли;
			Значение = ЗначениеПоля;
		Иначе
			Если Реквизит = "ПоправочныйКоэффициентПотенциал" тогда
				ЗначениеПоля = 1;
				Значение = 1;
			КонецЕсли;
			Если Реквизит = "КоличествоПлан" тогда
				ЗначениеПоля = 0;
				Значение = 0;
			КонецЕсли;
			Если Реквизит = "КоличествоПланПоправочное" тогда
				ЗначениеПоля = 0;
				Значение = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеПоля = Неопределено тогда
			Значение = "";
		КонецЕсли;
		Если Реквизит = "ДатаВыставленияВОПотенциал" и СтрНайти(ЗначениеПоля,"кв")=0 тогда
			Значение = "";
			ТабДок.Область(ИмяОбласти).Текст = "";
			Возврат;
		КонецЕсли;
		
		
		Если Не ЗначениеЗаполнено(КоличествоВО) тогда
			КоличествоВО = 0;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КоличествоВОУПП) тогда
			КоличествоВОУПП = 0;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СредниеПродажи) тогда
			СредниеПродажи = 0;
		КонецЕсли;
		КоличествоВОПоБренду = ?(КоличествоВОПоБрендуУПП = 0 , КоличествоВОПоБрендуАнкета,КоличествоВОПоБрендуУПП);
		
		НайденныеСтроки = Объект.ДанныеПланирования.НайтиСтроки(ПоискСтруктура);
		Если НайденныеСтроки.Количество()=0 тогда
			Строка = Объект.ДанныеПланирования.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,ПоискСтруктура);
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеПланированияПродажПлиткаСрезПоследних.Период КАК Период,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.Регистратор КАК Регистратор,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.НомерСтроки КАК НомерСтроки,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.Активность КАК Активность,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.Направление КАК Направление,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.Бренд КАК Бренд,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.КомплектПанелей КАК КомплектПанелей,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.Сценарий КАК Сценарий,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.Версия КАК Версия,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.ПериодПланирования КАК ПериодПланирования,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.КоличествоВОПотенциал КАК КоличествоВОПотенциал,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.КоличествоПотенциал КАК КоличествоПотенциал,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.КоличествоВОПлан КАК КоличествоВОПлан,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.КоличествоПлан КАК КоличествоПлан,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.ДатаВыставленияВОПотенциал КАК ДатаВыставленияВОПотенциал,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.ДатаВыставленияВОПлан КАК ДатаВыставленияВОПлан,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.ПоправочныйКоэффициентПотенциал КАК ПоправочныйКоэффициентПотенциал,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.ПоправочныйКоэффициентПлан КАК ПоправочныйКоэффициентПлан,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.КоличествоПотенциалПоправочное КАК КоличествоПотенциалПоправочное,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.КоличествоПланПоправочное КАК КоличествоПланПоправочное,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.Автор КАК Автор,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.ДатаИзменения КАК ДатаИзменения,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.ЭтапПланирования КАК ЭтапПланирования,
			|	ДанныеПланированияПродажПлиткаСрезПоследних.Комментарий КАК Комментарий
			|ИЗ
			|	РегистрСведений.ДанныеПланированияПродажПлитка.СрезПоследних(
			|			&ДатаДокумента,
			|			ТорговаяТочка = &ТТ
			|				И Бренд = &Бренд
			|				И КомплектПанелей = &Комплект) КАК ДанныеПланированияПродажПлиткаСрезПоследних";
			Запрос.УстановитьПараметр("ДатаДОкумента",Объект.Дата);
			Запрос.УстановитьПараметр("ТТ",ПоискСтруктура.ТорговаяТочка);
			Запрос.УстановитьПараметр("Бренд",ПоискСтруктура.Бренд);
			Запрос.УстановитьПараметр("Комплект",ПоискСтруктура.КомплектПанелей);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() тогда
				ЗаполнитьЗначенияСвойств(Строка,Выборка);
			Иначе
				Строка.ПоправочныйКоэффициентПотенциал = 1;
				Строка.ПоправочныйКоэффициентПлан = 1;
			КонецЕсли;
		Иначе
			Строка = НайденныеСтроки[0];
		КонецЕсли;
		Строка[Реквизит] = Значение;
	Иначе
		Город = ПоляРасшифровки.Найти("Город");
		Район = ПоляРасшифровки.Найти("Район");
		Регион = ПоляРасшифровки.Найти("Регион");
		Рынок = ПоляРасшифровки.Найти("Рынок");
		ТорговаяТочка = ПоляРасшифровки.Найти("ТорговаяТочка");
		Бренд = ПоляРасшифровки.Найти("Бренд");
		Комплект = ПоляРасшифровки.Найти("КомплектПанелей");
		Если Город<>Неопределено тогда
			ЗначениеРегиона = Город.Значение;	
		ИначеЕсли Район<>Неопределено тогда
			ЗначениеРегиона = Район.Значение;	
		ИначеЕсли Регион<>Неопределено тогда
			ЗначениеРегиона = Регион.Значение;	
		КонецЕсли;
		
		Если Рынок<>Неопределено тогда
			ЗначениеРынок = Рынок.Значение;	
		Иначе
			ЗначениеРынок = Справочники.вогРынки.ПустаяСсылка();
		КонецЕсли;
		
		Если ТорговаяТочка<>Неопределено тогда
			ЗначениеТорговаяТочка = ТорговаяТочка.Значение;	
		Иначе
			ЗначениеТорговаяТочка = Справочники.вогТорговыеТочки.ПустаяСсылка();
		КонецЕсли;
		
		Если Бренд<>Неопределено тогда
			ЗначениеБренд = Бренд.Значение;
		Иначе
			ЗначениеБренд = Справочники.вогБренды.ПустаяСсылка();
		КонецЕсли;
		
		Если Комплект<>Неопределено тогда
			ЗначениеКомплект = Комплект.Значение;	
		Иначе
			ЗначениеКомплект = Справочники.КомплектыПанелейДляПланирования.ПустаяСсылка();
		КонецЕсли;
		ПоискСтруктура = Новый Структура("Регион,Рынок,ТорговаяТочка,Бренд,Комплект",ЗначениеРегиона,ЗначениеРынок,ЗначениеТорговаяТочка,ЗначениеБренд,ЗначениеКомплект);
		НайденныеСтроки = Объект.Комментарии.НайтиСтроки(ПоискСтруктура);
		Если НайденныеСтроки.Количество()=0 тогда
			Строка = Объект.Комментарии.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,ПоискСтруктура);
			Строка.Комментарий = Значение;
		Иначе
			НайденныеСтроки[0].Комментарий = Значение;	
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Заголовок = "Планирование продаж (плитка) " + Формат(ГодПланирования,"ЧГ=0") + " (изменено)";
	ПоискК = Новый Структура;
	ПоискК.Вставить("Комплект",ПоискСтруктура.КомплектПанелей);
	СтрокиК = КоэффициентыПересчёта.НайтиСтроки(ПоискК);
	ОграничениеКолВа = 9999;
	Если СтрокиК.Количество()>0 тогда
		К = СтрокиК[0].К;
		ОграничениеКолВа = СтрокиК[0].Ограничение;
	Иначе
		К=0;
	КонецЕсли;
	КФакт = К;
	Если СредниеПродажи<0 тогда
		СредниеПродажи = 0;
	КонецЕсли;
	
	
	//Если ПоискСтруктура.КомплектПанелей.ВидВО = Перечисления.вогВидыОборудования.DIYПолка  или  
	//	К < ?(КоличествоВОПоБренду=0,0,СредниеПродажи / КоличествоВОПоБренду) тогда
	//	К = ?(КоличествоВОПоБренду=0,0,СредниеПродажи / КоличествоВОПоБренду);
	//КонецЕсли;
	Если К= 0 тогда
		К = ?(КоличествоВОПоБренду=0,0,СредниеПродажи / КоличествоВОПоБренду);
	КонецЕсли;
	
	Если КоличествоВОУПП=0 или ПоискСтруктура.КомплектПанелей.ВидВО = Перечисления.вогВидыОборудования.DIYПолка  или  
		К < ?(КоличествоВОПоБренду=0,0,СредниеПродажи / КоличествоВОПоБренду) тогда
		КФакт = ?(КоличествоВОПоБренду=0,0,СредниеПродажи / КоличествоВОПоБренду);
	КонецЕсли;
	
	Если Строка.КоличествоВОПотенциал>0 и КоличествоВОПоБрендуУПП = 0 тогда
		КоличествоВО = 0;
	КонецЕсли;
	
	
	//Расчет
	Если Реквизит = "КоличествоВОПотенциал" или Реквизит = "ДатаВыставленияВОПотенциал"  тогда		
		
		Если Реквизит = "КоличествоВОПотенциал" тогда
			Смещение = 2;
			ИмяОбластиКоличествоВОПотенциал = ИмяОбласти;
			ИмяОбластиКвартал = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+1,"ЧГ=0");
			Если Значение = 0 или Значение= "" тогда
				Строка.ДатаВыставленияВОПотенциал="";
				ТабДок.Область(ИмяОбластиКвартал).Текст = "";	
			Иначе
				Если (КоличествоВО + Значение) > ОграничениеКолВа тогда
					Значение = ОграничениеКолВа - КоличествоВО;	
					ТабДок.Область(ИмяОбласти).Текст = Строка(Значение);	
				КонецЕсли;
			КонецЕсли;
		Иначе
			Смещение = 1;
			ИмяОбластиКвартал = ИмяОбласти;
			ИмяОбластиКоличествоВОПотенциал = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))-1,"ЧГ=0");
		КонецЕсли;
		Попытка
			Строка.КоличествоВОПотенциал = Окр(Число(ТабДок.Область(ИмяОбластиКоличествоВОПотенциал).Текст),0);
		Исключение
			Строка.КоличествоВОПотенциал = 0;
		КонецПопытки;
			
		КолвоМесяцев = КоличествоМесяцевДоКонцаГодаПоКварталу(Строка.ДатаВыставленияВОПотенциал); 
		Если КолвоМесяцев <> Неопределено тогда
			Строка.КоличествоПотенциал = Строка.КоличествоВОПотенциал * К * КоличествоМесяцевДоКонцаГодаПоКварталу(Строка.ДатаВыставленияВОПотенциал);
		Иначе
			Строка.КоличествоПотенциал = 0;
			Строка.ДатаВыставленияВОПотенциал = "";	
		КонецЕсли;
		
		Если Найти(ИмяОбласти,":")>0 тогда
			ИмяОбласти = Лев(ИмяОбласти,Найти(ИмяОбласти,":")-1);	
		КонецЕсли;
		ИмяОбластиПлан = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+(Смещение+5),"ЧГ=0");
		ОбластьПлан = ТабДок.Область(ИмяОбластиПлан);
		Попытка
			Строка.ПоправочныйКоэффициентПлан = Число(ОбластьПлан.Текст);
		Исключение
			Строка.ПоправочныйКоэффициентПлан = 0;
		КонецПопытки;
		ИмяОбластиКоличество = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+Смещение,"ЧГ=0");
		ИмяОбластиКоличество2 = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+(Смещение+2),"ЧГ=0");
		ОбластьКвартал = ТабДок.Область(ИмяОбластиКвартал);
		ОбластьКвартал.Текст = Строка.ДатаВыставленияВОПотенциал;
		ОбластьКоличество = ТабДок.Область(ИмяОбластиКоличество);
		ОбластьКоличество.Текст = Формат(Строка.КоличествоПотенциал,"ЧДЦ=0; ЧГ=3,0");	
		
		ИмяОбластиК = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+(Смещение+1),"ЧГ=0");
		Попытка
			Строка.ПоправочныйКоэффициентПотенциал = Число(ТабДок.Область(ИмяОбластиК).Текст);
		Исключение
			Строка.ПоправочныйКоэффициентПотенциал = 0;
		КонецПопытки;
		Строка.КоличествоПотенциалПоправочное = Окр(Строка.ПоправочныйКоэффициентПотенциал * Строка.КоличествоПотенциал,0);
		ОбластьКоличество = ТабДок.Область(ИмяОбластиКоличество2);
		ОбластьКоличество.Текст = Формат(Строка.КоличествоПотенциалПоправочное,"ЧДЦ=0; ЧГ=3,0");	
		Строка.КоличествоВОПлан = КоличествоВО + Строка.КоличествоВОПотенциал;
		Строка.КоличествоПлан = Окр(КоличествоВО * КФакт *12 + Строка.КоличествоПотенциалПоправочное,0);
		Строка.ДатаВыставленияВОПлан = Строка.ДатаВыставленияВОПотенциал;
		Строка.КоличествоПланПоправочное = Окр(Строка.ПоправочныйКоэффициентПлан * КоличествоВО * КФакт * 12 + Строка.КоличествоПотенциалПоправочное ,0);
		
		ИмяОбластиПлан = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+(Смещение+3),"ЧГ=0");
		ОбластьПлан = ТабДок.Область(ИмяОбластиПлан);
		ОбластьПлан.Текст = Формат(Строка.КоличествоВОПлан,"ЧДЦ=0; ЧГ=3,0");
		ИмяОбластиПлан = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+(Смещение+4),"ЧГ=0");
		ОбластьПлан = ТабДок.Область(ИмяОбластиПлан);
		ОбластьПлан.Текст = Формат(Строка.КоличествоПлан,"ЧДЦ=0; ЧГ=3,0");
		ИмяОбластиПлан = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+(Смещение+6),"ЧГ=0");
		ОбластьПлан = ТабДок.Область(ИмяОбластиПлан);
		ОбластьПлан.Текст = Формат(Строка.КоличествоПланПоправочное,"ЧДЦ=0; ЧГ=3,0");
		
	КонецЕсли;
	
	Если Реквизит = "КоличествоПотенциал" тогда		
		
		ИмяОбластиК = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+1,"ЧГ=0");
		ИмяОбластиКоличество2 = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+2,"ЧГ=0");
		попытка
			Строка.ПоправочныйКоэффициентПотенциал = Число(ТабДок.Область(ИмяОбластиК).Текст);
		Исключение
			Строка.ПоправочныйКоэффициентПотенциал = 0;
		КонецПопытки;
		Строка.КоличествоПотенциалПоправочное = Окр(Строка.ПоправочныйКоэффициентПотенциал * Строка.КоличествоПотенциал,0);
		ОбластьКоличество = ТабДок.Область(ИмяОбластиКоличество2);
		ОбластьКоличество.Текст = Формат(Строка.КоличествоПотенциалПоправочное,"ЧДЦ=0; ЧГ=3,0");	
		ИмяОбластиП = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+3,"ЧГ=0");
		Строка.КоличествоВОПлан = Строка.КоличествоВОПотенциал;
		ТабДок.Область(ИмяОбластиП).Текст = Формат(Строка.КоличествоВОПлан,"ЧДЦ=0; ЧГ=3,0");;
		ИмяОбластиП = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+4,"ЧГ=0");
		Строка.КоличествоПлан =  Формат(Строка.КоличествоПотенциалПоправочное + КоличествоВО * КФакт * 12,0);
		ТабДок.Область(ИмяОбластиП).Текст = Формат(Строка.КоличествоПлан,"ЧДЦ=0; ЧГ=3,0");;
		ИмяОбластиП = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+5,"ЧГ=0");
		Попытка
			Строка.ПоправочныйКоэффициентПлан = Число(ТабДок.Область(ИмяОбластиП).Текст);
		Исключение
			Строка.ПоправочныйКоэффициентПлан = 0;
		КонецПопытки;
		ИмяОбластиП = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+6,"ЧГ=0");
		Строка.КоличествоПланПоправочное = Окр(Строка.ПоправочныйКоэффициентПлан * КФакт * КоличествоВО * 12 + Строка.КоличествоПотенциалПоправочное, 0);
		ТабДок.Область(ИмяОбластиП).Текст = Формат(Строка.КоличествоПланПоправочное,"ЧДЦ=0; ЧГ=3,0");
		
	КонецЕсли;
	
	
	
	//Если Реквизит = "КоличествоВОПлан" или 	Реквизит = "ДатаВыставленияВОПлан" тогда 
	//	
	//	
	//	Строка.КоличествоПлан = Строка.КоличествоВОПлан * К * КоличествоМесяцевДоКонцаГодаПоКварталу(Строка.ДатаВыставленияВОПлан);
	//	Если Реквизит = "КоличествоВОПлан" тогда
	//		Смещение = 2;
	//	Иначе
	//		Смещение = 1;
	//		
	//	КонецЕсли;
	//	Если Найти(ИмяОбласти,":")>0 тогда
	//		ИмяОбласти = Лев(ИмяОбласти,Найти(ИмяОбласти,":")-1);	
	//	КонецЕсли;
	//	
	//	ИмяОбластиКоличество = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+Смещение,"ЧГ=0");
	//	ИмяОбластиКоличество2 = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+(Смещение+2),"ЧГ=0");
	//	ИмяОбластиК = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+(Смещение+1),"ЧГ=0");
	//	ОбластьКоличество = ТабДок.Область(ИмяОбластиКоличество);
	//	ОбластьКоличество.Текст = Формат(Строка.КоличествоПлан,"ЧГ=0");	
	//	
	//	ИмяОбластиК = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+(Смещение+1),"ЧГ=0");
	//	Строка.ПоправочныйКоэффициентПлан = Число(ТабДок.Область(ИмяОбластиК).Текст);
	//	Строка.КоличествоПланПоправочное = Строка.ПоправочныйКоэффициентПлан * Строка.КоличествоПлан;
	//	ОбластьКоличество = ТабДок.Область(ИмяОбластиКоличество2);
	//	ОбластьКоличество.Текст = Формат(Строка.КоличествоПланПоправочное,"ЧГ=0");	
	//	
	//КонецЕсли;
	
	
	Если Реквизит = "ПоправочныйКоэффициентПотенциал" тогда		
		
		Строка.КоличествоПотенциалПоправочное = Окр(Строка.ПоправочныйКоэффициентПотенциал * Строка.КоличествоПотенциал,0);
		Смещение = 1;
		
		
		Если Найти(ИмяОбласти,":")>0 тогда
			ИмяОбласти = Лев(ИмяОбласти,Найти(ИмяОбласти,":")-1);	
		КонецЕсли;
		ИмяОбластиКоличество = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+Смещение,"ЧГ=0");
		
		ИмяОбластиПлан = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+(Смещение+3),"ЧГ=0");
		ОбластьПлан = ТабДок.Область(ИмяОбластиПлан);
		Попытка
			Строка.ПоправочныйКоэффициентПлан = Число(ОбластьПлан.Текст);
		Исключение
			Строка.ПоправочныйКоэффициентПлан = 0;
		КонецПопытки;
		
		ОбластьКоличество = ТабДок.Область(ИмяОбластиКоличество);
		ОбластьКоличество.Текст = Формат(Строка.КоличествоПотенциалПоправочное,"ЧГ=0");	
		Строка.КоличествоПлан = Окр(КоличествоВО * К * 12 + Строка.КоличествоПотенциалПоправочное,0);
		Строка.КоличествоПланПоправочное = Окр(Строка.ПоправочныйКоэффициентПлан*КоличествоВО * КФакт* 12 + Строка.КоличествоПотенциалПоправочное,0);
		
		ИмяОбластиПлан = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+(Смещение+1),"ЧГ=0");
		ОбластьПлан = ТабДок.Область(ИмяОбластиПлан);
		ОбластьПлан.Текст = Формат(Строка.КоличествоВОПлан,"ЧДЦ=0; ЧГ=3,0");
		
		
		ИмяОбластиПлан = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+(Смещение+2),"ЧГ=0");
		ОбластьПлан = ТабДок.Область(ИмяОбластиПлан);
		
		ОбластьПлан.Текст = Формат(Строка.КоличествоПлан,"ЧДЦ=0; ЧГ=3,0");
		
		ИмяОбластиПлан = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+(Смещение+3),"ЧГ=0");
		ОбластьПлан = ТабДок.Область(ИмяОбластиПлан);
		ОбластьПлан.Текст = Формат(Строка.ПоправочныйКоэффициентПлан,"ЧГ=0");
		
		ИмяОбластиПлан = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+(Смещение+4),"ЧГ=0");
		ОбластьПлан = ТабДок.Область(ИмяОбластиПлан);
		ОбластьПлан.Текст = Формат(Строка.КоличествоПланПоправочное,"ЧДЦ=0; ЧГ=3,0");
	КонецЕсли;
	
	Если Реквизит = "ПоправочныйКоэффициентПлан" тогда 
		Если Строка.КоличествоВОПлан = 0 тогда
			ИмяОбластиКоличество = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))-2,"ЧГ=0");
			Попытка
				Строка.КоличествоВОПлан = Число(СтрЗаменить(ТабДок.Область(ИмяОбластиКоличество).Текст," ",""));
			Исключение
				Строка.КоличествоВОПлан = 0;
			КонецПопытки;
		КонецЕсли;
		ИмяОбластиКоличество = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))-1,"ЧГ=0");
		Попытка
			Строка.КоличествоПлан = Число(ТабДок.Область(ИмяОбластиКоличество).Текст);
		Исключение
			Строка.КоличествоПлан = 0;
		КонецПопытки;
		Если ПоискСтруктура.КомплектПанелей.ВидВО <> Перечисления.вогВидыОборудования.ОборудованиеКлиента тогда
			Строка.КоличествоПланПоправочное = Окр(Строка.ПоправочныйКоэффициентПлан*КоличествоВО * КФакт * 12 + Строка.КоличествоПотенциалПоправочное,0);
		Иначе
			Строка.КоличествоПланПоправочное = Окр(Строка.ПоправочныйКоэффициентПлан * Строка.КоличествоПлан,0);
		КонецЕсли;
		
		Если Строка.КоличествоПлан = 0 тогда Строка.КоличествоПланПоправочное=0 КонецЕсли;
		
		Смещение = 1;
		Если Найти(ИмяОбласти,":")>0 тогда
			ИмяОбласти = Лев(ИмяОбласти,Найти(ИмяОбласти,":")-1);	
		КонецЕсли;
		
		
		ИмяОбластиКоличество = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+Смещение,"ЧГ=0");
		ОбластьКоличество = ТабДок.Область(ИмяОбластиКоличество);
		ОбластьКоличество.Текст = Формат(Строка.КоличествоПланПоправочное,"ЧДЦ=0; ЧГ=3,0");	
		
	КонецЕсли;
	Если Реквизит = "КоличествоПлан" тогда 
		
		Смещение = 2;
		Если Найти(ИмяОбласти,":")>0 тогда
			ИмяОбласти = Лев(ИмяОбласти,Найти(ИмяОбласти,":")-1);	
		КонецЕсли;
		ИмяОбластиК = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+Смещение-1,"ЧГ=0");
		Попытка
			Строка.ПоправочныйКоэффициентПлан = Число(ТабДок.Область(ИмяОбластиК).Текст);
		Исключение
			Строка.ПоправочныйКоэффициентПлан = 0;
		КонецПопытки;
		Если ПоискСтруктура.КомплектПанелей.ВидВО <> Перечисления.вогВидыОборудования.ОборудованиеКлиента тогда
			Строка.КоличествоПланПоправочное = Окр(Строка.ПоправочныйКоэффициентПлан*КоличествоВО * КФакт * 12 + Строка.КоличествоПотенциалПоправочное,0);
		Иначе
			Строка.КоличествоПланПоправочное = Окр(Строка.ПоправочныйКоэффициентПлан*ЗначениеПоля,0);
		КонецЕсли;
		
		ИмяОбластиКоличество = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))+Смещение,"ЧГ=0");
		ОбластьКоличество = ТабДок.Область(ИмяОбластиКоличество);
		ОбластьКоличество.Текст = Формат(Строка.КоличествоПланПоправочное,"ЧДЦ=0; ЧГ=3,0");	
		
	КонецЕсли;
	
	Если Реквизит = "КоличествоПланПоправочное" тогда 
		Если ТипЗнч(ЗначениеПоля) = Тип("Строка") или ЗначениеПоля = Неопределено тогда
			ЗначениеПоля = 0;
			Значение = 0;
		КонецЕсли;
		ИмяОбластиК = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))-2,"ЧГ=0");
		Попытка
			Строка.КоличествоПлан = Число(ТабДок.Область(ИмяОбластиК).Текст);
		Исключение
			Строка.КоличествоПлан = 0;
		КонецПопытки;
		Если ПоискСтруктура.КомплектПанелей.ВидВО <> Перечисления.вогВидыОборудования.ОборудованиеКлиента тогда
			Если ЗначениеПоля < Строка.КоличествоПотенциалПоправочное тогда
				ЗначениеПоля = Строка.КоличествоПотенциалПоправочное;
				Строка.КоличествоПотенциалПоправочное = Строка.КоличествоПотенциалПоправочное;
				ТабДок.Область(ИмяОбласти).Текст = Формат(Значение,"ЧДЦ=0; ЧГ=3,0");	
			Иначе
				Если Строка.КоличествоПлан <> 0 тогда
					Строка.ПоправочныйКоэффициентПлан = Значение/Строка.КоличествоПлан;
				Иначе	
					Строка.ПоправочныйКоэффициентПлан = 1;
				КонецЕсли;
			КонецЕсли;
			//Если КоличествоВО = 0 или КФакт = 0 тогда
			//	Строка.ПоправочныйКоэффициентПлан = 1;
			//	ТабДок.Область(ИмяОбласти).Текст = Строка.КоличествоПотенциалПоправочное;
			//	Строка.КоличествоПланПоправочное = Строка.КоличествоПотенциалПоправочное;
			//Иначе	
			//	Строка.ПоправочныйКоэффициентПлан = ?(КоличествоВО * К >0, (ЗначениеПоля - Строка.КоличествоПотенциалПоправочное)/ Окр(КоличествоВО * КФакт * 12,0),0);
			//КонецЕсли;	
		Иначе
			Если Строка.КоличествоПлан <> 0 тогда
				Строка.ПоправочныйКоэффициентПлан = Значение/Строка.КоличествоПлан;
			Иначе	
				Строка.ПоправочныйКоэффициентПлан = 1;
			КонецЕсли;
		КонецЕсли;
		//Если Строка.КоличествоПлан = 0 и не (ПоискСтруктура.КомплектПанелей.ВидВО = Перечисления.вогВидыОборудования.ОборудованиеКлиента и КоличествоВОПоБрендуАнкета = 0 и КоличествоВОПоБрендуУПП = 0) тогда
		//	ЗначениеПоля = 0;
		//	Строка.КоличествоПланПоправочное = 0;
		//	ТабДок.Область(ИмяОбласти).Текст = "0";	
		//КонецеслИ;
		Строка.ПоправочныйКоэффициентПлан = окр(Строка.ПоправочныйКоэффициентПлан,2);  
		ИмяОбластиК = Сред(ИмяОбласти,1,Найти(ИмяОбласти,"C")-1)+"C"+Формат(Число(Сред(ИмяОбласти,Найти(ИмяОбласти,"C")+1))-1,"ЧГ=0");
		ОбластьК = ТабДок.Область(ИмяОбластиК);
		ОбластьК.Текст = Формат(Строка.ПоправочныйКоэффициентПлан,"ЧДЦ=2; ЧГ=3,0");	
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоМесяцевДоКонцаГодаПоКварталу(Квартал)
	
	Если ЗначениеЗаполнено(Квартал) тогда
		Попытка
			// ++ VOG Солодов В.В. 14.10.2021 CRM-1246
			ГодПланирования = вогОбщегоНазначенияКлиентСервер.ПолучитьГодПланирования();
			// До изменения
			//ГодПланирования = Константы.ГодПланированияПлитка.Получить();
			// -- VOG Солодов В.В. 14.10.2021 CRM-1246
			
			КварталЧисло = Число(Лев(Квартал,1));
			ГодЧисло = Число(Прав(Квартал,4));
			Возврат ((ГодПланирования - ГодЧисло)*4 + 4-КварталЧисло)*3; 
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция  КатегорияТТ(ТорговаяТочка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора
	               |ИЗ
	               |	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	               |ГДЕ
	               |	CRM_ОбъектыЗначенийКлассификаторов.Объект = &Объект
	               |	И CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец = &Владелец
	               |	И CRM_ОбъектыЗначенийКлассификаторов.Аналитика = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Плитка)";
	Запрос.УстановитьПараметр("Владелец",ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("b3d84c6b-7581-11ea-87ff-005056bc3fe8")));
	Запрос.УстановитьПараметр("Объект",ТорговаяТочка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Строка(Выборка.ЗначениеКлассификатора);
	Иначе
		Возврат "";
	КонецЕсли;
	
	
	
КонецФункции


&НаКлиенте
Процедура ТабДокПриАктивизации(Элемент)
	
	Область = ТабДок.ТекущаяОбласть;
	Редактирование = Истина;
	// ++ VOG Солодов В.В. 25.02.2021 DEV-218
	Если КвартальноеПланирование Тогда
		
		ИДРасшифровки = ПолучитьИДРасшифровки(Область.Имя, АдресСохраненныхРасшифровокЯчеек);
		
		Если Не ЕстьВозможностьРедактироватьКвартальное(АдресДанныхРасшифровки, ИДРасшифровки) тогда
			Редактирование = Ложь;
		КонецЕсли;
		
	Иначе
	// -- VOG Солодов В.В. 25.02.2021 DEV-218
	Если Найти(Область.Имя,":")>0 тогда
		МассивОбластей = СтрРазделить(Область.Имя,":",Ложь);		
		ПерваяЯчейка= СтрРазделить(Сред(МассивОбластей[0],2),"C",Ложь);
		ПоследняяЧейка= СтрРазделить(Сред(МассивОбластей[1],2),"C",Ложь);
		Попытка
			Для  НомерСтроки = Число(ПерваяЯчейка[0]) по Число(ПоследняяЧейка[0]) цикл
				Для  НомерКолонки = Число(ПерваяЯчейка[1]) по Число(ПоследняяЧейка[1]) цикл
					ОбластьТабДок = ТабДок.Область("R"+Формат(НомерСтроки,"ЧГ=0")+"C"+Формат(НомерКолонки,"ЧГ=0"));
					Если НЕ ЕстьВозможностьРедактировать(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(ОбластьТабДок.Имя,АдресСохраненныхРасшифровокЯчеек),ПолучитьСписокК()) тогда
						Редактирование = Ложь;
						Прервать;	
					КонецЕсли;
					
				КонецЦикла;
				Если Редактирование = Ложь тогда Прервать; КонецЕсли;	
			КонецЦикла;
		Исключение
		КонецПопытки;
	Иначе	
		Если НЕ ЕстьВозможностьРедактировать(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(Область.Имя,АдресСохраненныхРасшифровокЯчеек),ПолучитьСписокК()) тогда
				Редактирование = Ложь;
		КонецЕсли;
	КонецЕсли;
	КонецЕсли;
	Элементы.ТабДок.Редактирование = Редактирование;
	

КонецПроцедуры


&НаСервере
Процедура ПересчитатьНаСервере()
	
	// ++ VOG Солодов В.В. 05.03.2021 DEV-218
	Если КвартальноеПланирование Тогда
		
		// ++ VOG Солодов В.В. 25.03.2021 DEV-331
		НомераСтолбцов = Новый Соответствие;
		НомераСтолбцов.Вставить(15, "16,17,18,19,21,33,34");
		//НомераСтолбцов.Вставить(20, "");
		//НомераСтолбцов.Вставить(35, "38,39,40");
		НомераСтолбцов.Вставить(42, "43,44");
		//НомераСтолбцов.Вставить(45, "");
		
		Для НомерСтроки = 1 По ТабДок.ВысотаТаблицы Цикл
			
			Для Каждого КлючИЗначение Из НомераСтолбцов Цикл
				
				НомерСтолбца 	= КлючИЗначение.Ключ;
				ИмяОбласти 		= СтрШаблон("R%1C%2", Формат(НомерСтроки, "ЧГ=0"), Формат(НомерСтолбца, "ЧГ=0"));
				Область 		= ТабДок.Область(ИмяОбласти);
				
				// временно убрал проверку заполненности
				//Если ПустаяСтрока(Область.Текст) Тогда
				//	
				//	Если ПустаяСтрока(КлючИЗначение.Значение) Тогда
				//		Продолжить;
				//	КонецЕсли;
				//	
				//	ЗависимыеСтолбцы 	= СтрРазделить(КлючИЗначение.Значение, ",");
				//	ЕстьЗначения 		= Ложь;
				//	Для Каждого НомерЗависимогоСтолбца Из ЗависимыеСтолбцы Цикл
				//		
				//		ИмяЗависимойОбласти = СтрШаблон("R%1C%2", Формат(НомерСтроки, "ЧГ=0"), НомерЗависимогоСтолбца);
				//		ЗависимаяОбласть 	= ТабДок.Область(ИмяЗависимойОбласти);
				//		
				//		Если Не ПустаяСтрока(ЗависимаяОбласть.Текст) Тогда
				//			ЕстьЗначения = Истина;
				//			Прервать;
				//		КонецЕсли;
				//		
				//	КонецЦикла;
				//	
				//	Если Не ЕстьЗначения Тогда
				//		Продолжить;
				//	КонецЕсли;
				//	
				//КонецЕсли;
				
				ИДРасшифровки 	= ПолучитьИДРасшифровки(ИмяОбласти, АдресСохраненныхРасшифровокЯчеек);
				Если ЕстьВозможностьРедактироватьКвартальное(АдресДанныхРасшифровки, ИДРасшифровки) Тогда
					ТабДокПриИзмененииСодержимогоОбластиКварталНаСервере(Область.Текст, ИДРасшифровки, ИмяОбласти);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		// -- VOG Солодов В.В. 25.03.2021 DEV-331
		
	Иначе // -- VOG Солодов В.В. 05.03.2021 DEV-218
		Для НомерСтроки = 1 по ТабДок.ВысотаТаблицы цикл
			//Для НомерСтолбца = 20 по 27 цикл
			НомерСтолбца = 20; 
			ИмяОбласти = "R"+Формат(НомерСтроки,"ЧГ=0")+"C"+Формат(НомерСтолбца,"ЧГ=0");
			Если ЕстьВозможностьРедактировать(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(ИмяОбласти,АдресСохраненныхРасшифровокЯчеек),КоэффициентыПересчёта.Выгрузить()) тогда
				Если ТабДок.Область(ИмяОбласти).Текст<>"" тогда 
					ТабДокПриИзмененииСодержимогоОбластиНаСервере(ТабДок.Область(ИмяОбласти).Текст,ПолучитьИДРасшифровки(ИмяОбласти,АдресСохраненныхРасшифровокЯчеек),ИмяОбласти);
				КонецЕсли;	
			КонецЕсли;
			//НомерСтолбца = 22; 
			//ИмяОбласти = "R"+Формат(НомерСтроки,"ЧГ=0")+"C"+Формат(НомерСтолбца,"ЧГ=0");
			//	Если ЕстьВозможностьРедактировать(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(ИмяОбласти,АдресСохраненныхРасшифровокЯчеек),КоэффициентыПересчёта.Выгрузить()) тогда
			//		ТабДокПриИзмененииСодержимогоОбластиНаСервере(ТабДок.Область(ИмяОбласти).Текст,ПолучитьИДРасшифровки(ИмяОбласти,АдресСохраненныхРасшифровокЯчеек),ИмяОбласти);
			//	КонецЕсли;
			//НомерСтолбца = 23; 
			//ИмяОбласти = "R"+Формат(НомерСтроки,"ЧГ=0")+"C"+Формат(НомерСтолбца,"ЧГ=0");
			//	Если ЕстьВозможностьРедактировать(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(ИмяОбласти,АдресСохраненныхРасшифровокЯчеек),КоэффициентыПересчёта.Выгрузить()) тогда
			//		ТабДокПриИзмененииСодержимогоОбластиНаСервере(ТабДок.Область(ИмяОбласти).Текст,ПолучитьИДРасшифровки(ИмяОбласти,АдресСохраненныхРасшифровокЯчеек),ИмяОбласти);
			//	КонецЕсли;
			//НомерСтолбца = 26; 
			//ИмяОбласти = "R"+Формат(НомерСтроки,"ЧГ=0")+"C"+Формат(НомерСтолбца,"ЧГ=0");
			//	Если ЕстьВозможностьРедактировать(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(ИмяОбласти,АдресСохраненныхРасшифровокЯчеек),КоэффициентыПересчёта.Выгрузить()) тогда
			//		ТабДокПриИзмененииСодержимогоОбластиНаСервере(ТабДок.Область(ИмяОбласти).Текст,ПолучитьИДРасшифровки(ИмяОбласти,АдресСохраненныхРасшифровокЯчеек),ИмяОбласти);
			//	КонецЕсли;
			НомерСтолбца = 27; 
			ИмяОбласти = "R"+Формат(НомерСтроки,"ЧГ=0")+"C"+Формат(НомерСтолбца,"ЧГ=0");
			Если ЕстьВозможностьРедактировать(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(ИмяОбласти,АдресСохраненныхРасшифровокЯчеек),КоэффициентыПересчёта.Выгрузить()) тогда
				ТабДокПриИзмененииСодержимогоОбластиНаСервере(ТабДок.Область(ИмяОбласти).Текст,ПолучитьИДРасшифровки(ИмяОбласти,АдресСохраненныхРасшифровокЯчеек),ИмяОбласти);
			КонецЕсли;
			//КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Функция ПолучитьСписокК()
	
	Список = Новый Массив;
	Для каждого Строка из КоэффициентыПересчёта цикл
		Список.Добавить(Строка.Комплект);
	КонецЦикла;
	Возврат Список;
КонецФункции


&НаСервереБезКонтекста
Функция ЕстьВозможностьПересчитать(АдресРасшифровки,ИДРасшифровки,СписокК)
	
	Попытка
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки);
		ДанныеРасшифровкиОбласти = ДанныеРасшифровки.Элементы[ИДРасшифровки];
		ПоляРасшифровки = ДанныеРасшифровкиОбласти.ПолучитьПоля(); 
		КолВоПолей=0;
			Если ПоляРасшифровки.Найти("ВозможноРедактирование")<>Неопределено тогда
					Возврат Истина;
			КонецЕсли;
		Возврат Ложь;	
	Исключение
		возврат Ложь;	
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура УстановитьСтандартныеНастройкиНаСервере()
	ОбъектКомпоновки = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.ПланированиеПродажПлитка"));
	// ++ VOG Солодов В.В. 05.03.2021 DEV-218
	Если Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаКвартал Тогда
		Схема = ОбъектКомпоновки.ПолучитьМакет("СхемаПлиткаКвартал");
	Иначе // -- VOG Солодов В.В. 05.03.2021 DEV-218
		Схема = ОбъектКомпоновки.ПолучитьМакет("СхемаПлитка");
	КонецЕсли;
	АдресСхемы = ПоместитьВоВременноеХранилище(Схема,УникальныйИдентификатор);
	НастройкиСКД= Схема.НастройкиПоУмолчанию;
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	Компоновщик.Инициализировать(Источник);
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	ОбъектКомпоновки.Настройки = Новый ХранилищеЗначения(НастройкиСКД);
	Компоновщик.ЗагрузитьНастройки(НастройкиСКД);
	Модифицированность = Истина;
	// Вставить содержимое обработчика.
	// ++ VOG Солодов В.В. 09.03.2021 DEV-218
	УстановитьСтандартныеОтборы();
	// -- VOG Солодов В.В. 09.03.2021 DEV-218
КонецПроцедуры





