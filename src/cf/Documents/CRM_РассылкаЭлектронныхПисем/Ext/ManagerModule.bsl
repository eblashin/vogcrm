#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Результат = Новый Массив;
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

Функция СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(Рассылка, СтрокаПолучателя, ТаблицаАвтотекста)
	
	НовоеЭлектронноеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	
	НовоеЭлектронноеПисьмо.Дата                      = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	//НовоеЭлектронноеПисьмо.УдалитьПредмет = Объект.Ссылка;
	
	НовоеЭлектронноеПисьмо.УчетнаяЗапись			= Рассылка.УчетнаяЗапись;
	НовоеЭлектронноеПисьмо.ОтправительПредставление	= Рассылка.ОтправительПредставление;
	
	НовоеЭлектронноеПисьмо.Ответственный			= Рассылка.Ответственный;
	НовоеЭлектронноеПисьмо.Автор					= Пользователи.ТекущийПользователь();
	НовоеЭлектронноеПисьмо.Важность					= Рассылка.Важность;
	НовоеЭлектронноеПисьмо.Тема						= ВернутьТему(Рассылка.Тема, СтрокаПолучателя, ТаблицаАвтотекста);
	НовоеЭлектронноеПисьмо.СтатусПисьма				= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
	
	НовоеЭлектронноеПисьмо.CRM_ИзHTMLФайла			= Рассылка.ИзHTMLФайла;
	
	НовоеЭлектронноеПисьмо.Кодировка				= Рассылка.Кодировка;
	Если ПустаяСтрока(НовоеЭлектронноеПисьмо.Кодировка) Тогда
		НовоеЭлектронноеПисьмо.Кодировка			= "utf-8";
	КонецЕсли;
	
	НовоеЭлектронноеПисьмо.ТипТекста				= Рассылка.ТипТекста;
	
	ИтоговыйТекстПисьма = СформироватьТекстПисьмаПолучателю(Рассылка.ТекстHTML, СтрокаПолучателя, ТаблицаАвтотекста);
	НовоеЭлектронноеПисьмо.Текст					= ИтоговыйТекстПисьма;
	НовоеЭлектронноеПисьмо.ТекстHTML				= ИтоговыйТекстПисьма;
	
	НовоеЭлектронноеПисьмо.СписокПолучателейПисьма = СтрокаПолучателя.ПредставлениеАдреса;
	
	НоваяСтрокаПолучателей = НовоеЭлектронноеПисьмо.ПолучателиПисьма.Добавить();
	
	НоваяСтрокаПолучателей.Адрес         = СтрокаПолучателя.Адрес;
	НоваяСтрокаПолучателей.Представление = СтрокаПолучателя.КонтактноеЛицо;
	НоваяСтрокаПолучателей.Контакт       = СтрокаПолучателя.Партнер;
	
	НовоеЭлектронноеПисьмо.ЕстьВложения = Рассылка.ЕстьВложения;
	
	Возврат НовоеЭлектронноеПисьмо;
	
КонецФункции

Функция ПолучитьТаблицуАвтотекста()
	ТаблицаАвтотекста = Новый ТаблицаЗначений;
	ТаблицаАвтотекста.Колонки.Добавить("Тэг");
	ТаблицаАвтотекста.Колонки.Добавить("ИмяКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("ЗаголовокКоманды");
	ТаблицаАвтотекста.Колонки.Добавить("Действие");
	ТаблицаАвтотекста.Колонки.Добавить("ТэгLAT");
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, Перечисления.CRM_НазначенияАвтотекста.АвтотекстЭлектронноеПисьмо,,Истина);
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекста, Перечисления.CRM_НазначенияАвтотекста.АвтотекстЭлектронноеПисьмо, Истина, Истина);
	Возврат ТаблицаАвтотекста;
КонецФункции

Функция СформироватьПисьма(Рассылка, СпособОтправки) Экспорт
	
	Если СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.UniSender И НЕ CRM_ИнтеграцияСUniSenderКлиентСервер.UniSenderПроверитьАдресУчетнойЗаписи(Рассылка.УчетнаяЗапись.АдресЭлектроннойПочты) Тогда
		Возврат Ложь;
	КонецЕсли;
	НачатьТранзакцию();
	Попытка
		СоздалиХотьОдноПисьмо = Ложь;
		ТабПолучателей = СформироватьТаблицуПолучателей(Рассылка);
		
		ТаблицаАвтотекста = ПолучитьТаблицуАвтотекста();
		
		Для Каждого СтрокаПолучателя Из ТабПолучателей Цикл
			Если ЗначениеЗаполнено(СтрокаПолучателя.Адрес) Тогда
				
				НовоеЭлектронноеПисьмо = СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(Рассылка, СтрокаПолучателя, ТаблицаАвтотекста);
				НовоеЭлектронноеПисьмо.Записать();
				
				Взаимодействия.УстановитьПредмет(НовоеЭлектронноеПисьмо.Ссылка, Рассылка);
				ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(НовоеЭлектронноеПисьмо.Ссылка,
					CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(Рассылка.УчетнаяЗапись,"Исходящие"), Ложь);
				
				СоздалиХотьОдноПисьмо = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат СоздалиХотьОдноПисьмо;
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЕстьОшибки = Истина;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ПолучитьНеОтправленныеПисьмаИОтправить(Рассылка, СпособОтправки, бОтправитьСразу) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭлектронноеПисьмоИсходящее.Ссылка
	               |ИЗ
	               |	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	               |		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
	               |ГДЕ
	               |	ПредметыПапкиВзаимодействий.Предмет = &Ссылка
	               |	И НЕ ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	               |	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления";
	Запрос.УстановитьПараметр("Ссылка", Рассылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПисьмоОбъект						= Выборка.Ссылка.ПолучитьОбъект();
		ПисьмоОбъект.СтатусПисьма			= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
		ПисьмоОбъект.ОбменДанными.Загрузка	= Истина;
		ПисьмоОбъект.Записать();
		
		// Если отправляем сразу
		Если бОтправитьСразу Тогда
			Если СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.SMTP Тогда
				Результат = ВыполнитьОтправку(Выборка.Ссылка, СпособОтправки);
			ИначеЕсли СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.UniSender Тогда
				ПараметрыСервиса = CRM_ИнтеграцияСUniSenderСервер.ДанныеДоступаКUniSender();
				ПараметрыСервиса.Вставить("Отправитель", Рассылка.УчетнаяЗапись.ИмяПользователя);
				ПараметрыСервиса.Вставить("EmailОтправителя", Рассылка.УчетнаяЗапись.АдресЭлектроннойПочты);
				ПараметрыСервиса.Вставить("ИдРассылки", СтрЗаменить(Строка(Год(Рассылка.Дата)), Символы.НПП, "")+Рассылка.Номер);
				Результат = ВыполнитьОтправку(Выборка.Ссылка, СпособОтправки, ПараметрыСервиса);
			КонецЕсли;
			Если НЕ Результат = "" Тогда
				ЕстьОшибки = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат + "  (" + Строка(Выборка.Ссылка)+")");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыполнитьОтправку(ЭлектронноеПисьмо, СпособОтправки, ПараметрыСервиса=Неопределено)
	
	ЭлектронноеПисьмоОбъект = ЭлектронноеПисьмо.ПолучитьОбъект();
	Попытка
		ПараметрыПисьма = CRM_Взаимодействия.ПараметрыПисьмаДляОтправки(ЭлектронноеПисьмоОбъект);
		Если СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.SMTP Тогда
			ИдентификаторПисьма = CRM_Взаимодействия.CRM_ВыполнитьОтправкуПисьма(ЭлектронноеПисьмоОбъект,, ПараметрыПисьма);
		ИначеЕсли СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.UniSender Тогда
			ТекстОшибки = "";
			ИдентификаторПисьма = CRM_ИнтеграцияСUniSenderКлиентСервер.ОтправитьПисьмо(ПараметрыПисьма, ПараметрыСервиса.КлючДоступа, 
										ПараметрыСервиса.СписокДляРассылок, ПараметрыСервиса.Отправитель, ПараметрыСервиса.EmailОтправителя, ПараметрыСервиса.ИдРассылки, ТекстОшибки);
			Если ЗначениеЗаполнено(ИдентификаторПисьма) Тогда
				Если ТипЗнч(ИдентификаторПисьма) = Тип("ПеречислениеСсылка.CRM_СтатусыПисемEmailРассылки") Тогда
					ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
					ЗаписьСтатуса.Письмо = ЭлектронноеПисьмо;
					ЗаписьСтатуса.Статус = ИдентификаторПисьма;
					ЗаписьСтатуса.СтатусСтрокой = ТекстОшибки;
					ЗаписьСтатуса.Записать();
					ВызватьИсключение ТекстОшибки;
				Иначе
					ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
					ЗаписьСтатуса.Письмо = ЭлектронноеПисьмо;
					ЗаписьСтатуса.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.Отправляется;
					ЗаписьСтатуса.Записать();
				КонецЕсли;
			Иначе
				ЗаписьСтатуса = РегистрыСведений.CRM_СтатусыПисемEmailРассылки.СоздатьМенеджерЗаписи();
				ЗаписьСтатуса.Письмо = ЭлектронноеПисьмо;
				ЗаписьСтатуса.Статус = Перечисления.CRM_СтатусыПисемEmailРассылки.ОшибкаОтправки;
				ЗаписьСтатуса.СтатусСтрокой = ТекстОшибки;
				ЗаписьСтатуса.Записать();
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
	Исключение
		// Если не удалось отправить Письмо, добавим информацию об этом в РС CRM_НеОтправленныеПисьма.
		CRM_УправлениеЭлектроннойПочтой.ДобавитьЗаписьОНеотправленномПисьме(ЭлектронноеПисьмо, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	ЭлектронноеПисьмоОбъект.ИдентификаторСообщения = ИдентификаторПисьма;
	Если ПараметрыПисьма.Свойство("ПротоколПочты") И ПараметрыПисьма.ПротоколПочты = "IMAP" Тогда
		ЭлектронноеПисьмоОбъект.ИдентификаторСообщенияОтправкаIMAP = ПараметрыПисьма.ИдентификаторСообщения;
	КонецЕсли;
	ЭлектронноеПисьмоОбъект.СтатусПисьма = ПредопределенноеЗначение("Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено");
	ЭлектронноеПисьмоОбъект.ДатаОтправления = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	ЭлектронноеПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
	ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(ЭлектронноеПисьмоОбъект.Ссылка, 
										CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(ЭлектронноеПисьмо.УчетнаяЗапись,Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные));
	
	// Проверим нет ли записи в РС CRM_НеОтправленныеПисьма по этому письму
	// если есть, то удалим.
	CRM_УправлениеЭлектроннойПочтой.УдалитьЗаписьОНеотправленномПисьме(ЭлектронноеПисьмоОбъект.Ссылка);
	Возврат "";
	
КонецФункции

Функция СформироватьТаблицуПолучателей(Рассылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_РассылкаЭлектронныхПисемПолучатели.НомерСтроки,
	|	ВЫБОР
	|		КОГДА CRM_РассылкаЭлектронныхПисемПолучатели.Принадлежность
	|			ТОГДА CRM_РассылкаЭлектронныхПисемПолучатели.КонтактноеЛицо
	|		ИНАЧЕ CRM_РассылкаЭлектронныхПисемПолучатели.Партнер
	|	КОНЕЦ КАК Партнер,
	|	CRM_РассылкаЭлектронныхПисемПолучатели.КонтактноеЛицо,
	|	CRM_РассылкаЭлектронныхПисемПолучатели.Адрес,
	|	CRM_РассылкаЭлектронныхПисемПолучатели.ПредставлениеАдреса
	|ИЗ
	|	Документ.CRM_РассылкаЭлектронныхПисем.Получатели КАК CRM_РассылкаЭлектронныхПисемПолучатели
	|ГДЕ
	|	CRM_РассылкаЭлектронныхПисемПолучатели.Ссылка.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_РассылкаЭлектронныхПисемСвоиЛица.НомерСтроки,
	|	CRM_РассылкаЭлектронныхПисемСвоиЛица.Пользователь,
	|	ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка),
	|	CRM_РассылкаЭлектронныхПисемСвоиЛица.Адрес,
	|	CRM_РассылкаЭлектронныхПисемСвоиЛица.ПредставлениеАдреса
	|ИЗ
	|	Документ.CRM_РассылкаЭлектронныхПисем.СвоиЛица КАК CRM_РассылкаЭлектронныхПисемСвоиЛица
	|ГДЕ
	|	CRM_РассылкаЭлектронныхПисемСвоиЛица.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_РассылкаЭлектронныхПисемФизЛица.НомерСтроки,
	|	CRM_РассылкаЭлектронныхПисемФизЛица.ФизЛицо,
	|	ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка),
	|	CRM_РассылкаЭлектронныхПисемФизЛица.Адрес,
	|	CRM_РассылкаЭлектронныхПисемФизЛица.ПредставлениеАдреса
	|ИЗ
	|	Документ.CRM_РассылкаЭлектронныхПисем.ФизЛица КАК CRM_РассылкаЭлектронныхПисемФизЛица
	|ГДЕ
	|	CRM_РассылкаЭлектронныхПисемФизЛица.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Рассылка);
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция СформироватьТекстПисьмаПолучателю(CRM_Объект_ТекстHTML, СтрокаТаблицы, ТаблицаАвтотекста)
	
	РедактируемыйТекст = CRM_Объект_ТекстHTML;
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		
		Если Найти(РедактируемыйТекст, СтрокаАвтотекста.Тэг) > 0 Тогда
			Если СтрокаАвтотекста.Тэг = "%АДРЕС_WEB_ДОСТУПА%" Тогда
				WEbДоступ = Константы.CRM_АдресWebДоступа.Получить();
				Если НЕ ЗначениеЗаполнено(WEbДоступ) Тогда
					СтрокаWEBДоступа = "{адрес web-доступа в настройках системы не заполнен}";
				Иначе
					СтрокаWEBДоступа = "<a target='_blank' href='" + WEbДоступ + "'>Адрес web-доступа</a>";					
				КонецЕсли;
				РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.Тэг, СтрокаWEBДоступа);
				Продолжить;
			КонецЕсли;
			ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, СтрокаТаблицы);
			РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.Тэг, ЗначениеТэга);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаАвтотекста.ТэгLAT) И Найти(РедактируемыйТекст, СтрокаАвтотекста.ТэгLAT) > 0 Тогда
			ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, СтрокаТаблицы);
			РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.ТэгLAT, ЗначениеТэга);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РедактируемыйТекст;
	
КонецФункции

Функция ВернутьТему(ОбъектТема, СтрокаТаблицы, ТаблицаАвтотекста)
	
	РедактируемыйТекст = ОбъектТема;
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		
		Если Найти(РедактируемыйТекст, СтрокаАвтотекста.Тэг) > 0 Тогда
			Если СтрокаАвтотекста.Тэг = "%АДРЕС_WEB_ДОСТУПА%" Тогда
				WEbДоступ = Константы.CRM_АдресWebДоступа.Получить();
				Если НЕ ЗначениеЗаполнено(WEbДоступ) Тогда
					СтрокаWEBДоступа = "{адрес web-доступа в настройках системы не заполнен}";
				Иначе
					СтрокаWEBДоступа = "<a target='_blank' href='" + WEbДоступ + "'>Адрес web-доступа</a>";					
				КонецЕсли;
				РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.Тэг, СтрокаWEBДоступа);
				Продолжить;
			КонецЕсли;
			ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэга(СтрокаАвтотекста, СтрокаТаблицы);
			РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.Тэг, ЗначениеТэга);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РедактируемыйТекст;
	
КонецФункции

Процедура ПолучитьНеОтправленныеПисьмаИСкорректировать(Рассылка, CRM_ИзмененоСодержаниеРассылки, CRM_ИзмененОтправитель, CRM_ИзмененаТема, CRM_ИзмененыВложения) Экспорт
	
	// Получим актуальную таблицу получателей.
	ТабПолучателей = СформироватьТаблицуПолучателей(Рассылка);
	ТабПолучателей.Колонки.Добавить("Обработано",Новый ОписаниеТипов("Булево"));
	
	// Создадим таблицу для неактуальных писем.
	ТаблицаНеактуальныхПисем = Новый ТаблицаЗначений;
	ТаблицаНеактуальныхПисем.Колонки.Добавить("Ссылка",Новый ОписаниеТипов("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
	
	// Запросом получим ранее созданные письма.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка
	|ИЗ
    |	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
    |		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет = &Ссылка
	|	И НЕ ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|	И НЕ ЭлектронноеПисьмоИсходящее.CRM_РазрешеноРедактирование
	|	И (НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления)";
	Запрос.УстановитьПараметр("Ссылка", Рассылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	ТаблицаАвтотекста = ПолучитьТаблицуАвтотекста();
	
	Пока Выборка.Следующий() Цикл
		МассивПолучателей = ТабПолучателей.НайтиСтроки(Новый Структура("Партнер", Выборка.Ссылка.ПолучателиПисьма[0].Контакт));
		
		// Если среди получателей не нашли, то данное письмо неактуально.
		Если МассивПолучателей.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаНеактуальныхПисем.Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			Продолжить;
		КонецЕсли;
		
		// Перенесем изменения в письмо.
		НачатьТранзакцию();
		Попытка
			МассивПолучателей[0].Обработано = Истина;
			
			ЭлектронноеПисьмо			= Выборка.Ссылка.ПолучитьОбъект();
			
			КонтактПисьма				= Выборка.Ссылка.ПолучателиПисьма[0].Контакт;
			
			ИзмененАдресПолучателя = Ложь;
			
			// Если изменили адрес почты, то меняем и в письме.
			Если НЕ Выборка.Ссылка.ПолучателиПисьма[0].Адрес = МассивПолучателей[0].Адрес Тогда
				ЭлектронноеПисьмо.ПолучателиПисьма[0].Адрес			= МассивПолучателей[0].Адрес;
				ЭлектронноеПисьмо.ПолучателиПисьма[0].Представление	= МассивПолучателей[0].ПредставлениеАдреса;
				ЭлектронноеПисьмо.СписокПолучателейПисьма			= МассивПолучателей[0].ПредставлениеАдреса;
				
				АдресПисьма					= МассивПолучателей[0].Адрес;
				АдресПисьмаПредставление	= МассивПолучателей[0].ПредставлениеАдреса;
				
				ИзмененАдресПолучателя = Истина;
			Иначе
				АдресПисьма					= Выборка.Ссылка.ПолучателиПисьма[0].Адрес;
				АдресПисьмаПредставление	= Выборка.Ссылка.ПолучателиПисьма[0].Представление;
			КонецЕсли;
			
			СтрокаПолучателя = Новый Структура;
			СтрокаПолучателя.Вставить("НомерСтроки"			, 0);
			
			Если ТипЗнч(КонтактПисьма) = Тип("СправочникСсылка.Партнеры") ИЛИ ТипЗнч(КонтактПисьма) = Тип("СправочникСсылка.Пользователи") 
			ИЛИ ТипЗнч(КонтактПисьма) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				СтрокаПолучателя.Вставить("Партнер"			,КонтактПисьма);
				СтрокаПолучателя.Вставить("КонтактноеЛицо"	,Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
			ИначеЕсли ТипЗнч(КонтактПисьма) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				СтрокаПолучателя.Вставить("Партнер"			,КонтактПисьма.Владелец);
				СтрокаПолучателя.Вставить("КонтактноеЛицо"	,КонтактПисьма);
			КонецЕсли;
			
			СтрокаПолучателя.Вставить("Адрес"				,АдресПисьма);
			СтрокаПолучателя.Вставить("ПредставлениеАдреса"	,АдресПисьмаПредставление);
			
			ИтоговыйТекстПисьма = СформироватьТекстПисьмаПолучателю(Рассылка.ТекстHTML ,СтрокаПолучателя, ТаблицаАвтотекста);
			
			Если CRM_ИзмененОтправитель Тогда
				ЭлектронноеПисьмо.УчетнаяЗапись				= Рассылка.УчетнаяЗапись;
				ЭлектронноеПисьмо.ОтправительПредставление	= Рассылка.ОтправительПредставление;
			КонецЕсли;
			
			Если CRM_ИзмененоСодержаниеРассылки ИЛИ ИзмененАдресПолучателя Тогда
				ЭлектронноеПисьмо.Текст					= ИтоговыйТекстПисьма;
				ЭлектронноеПисьмо.ТекстHTML				= ИтоговыйТекстПисьма;
			КонецЕсли;
			
			Если CRM_ИзмененаТема Тогда
				ЭлектронноеПисьмо.Тема = ВернутьТему(Рассылка.Тема, СтрокаПолучателя, ТаблицаАвтотекста);
			КонецЕсли;
			
			Если (CRM_ИзмененоСодержаниеРассылки ИЛИ CRM_ИзмененОтправитель ИЛИ ИзмененАдресПолучателя ИЛИ CRM_ИзмененаТема) И НЕ CRM_ИзмененыВложения Тогда
				ЭлектронноеПисьмо.Записать();
			КонецЕсли;
			
			Если CRM_ИзмененоСодержаниеРассылки ИЛИ CRM_ИзмененыВложения Тогда
				ЭлектронноеПисьмо.ЕстьВложения = Рассылка.ЕстьВложения;
				ЭлектронноеПисьмо.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого СтрокаПолучателя Из ТабПолучателей Цикл
		// Тут либо новый получатель, либо поменяли получателя.
		Если НЕ СтрокаПолучателя.Обработано Тогда
			НачатьТранзакцию();
			Попытка
				Если ЗначениеЗаполнено(СтрокаПолучателя.Адрес) Тогда
					
					НовоеЭлектронноеПисьмо = СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(Рассылка, СтрокаПолучателя, ТаблицаАвтотекста);
					НовоеЭлектронноеПисьмо.Записать();
					
					Взаимодействия.УстановитьПредмет(НовоеЭлектронноеПисьмо.Ссылка, Рассылка.Ссылка);
					ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(НовоеЭлектронноеПисьмо.Ссылка,
					CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(Рассылка.УчетнаяЗапись,"Исходящие"), Ложь);
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	// Установим пометку удаления у неактуальных писем.
	Для Каждого НеактуальноеПисьмо Из ТаблицаНеактуальныхПисем Цикл
		НачатьТранзакцию();
		Попытка
			НеактуальноеПисьмоОбъект = НеактуальноеПисьмо.Ссылка.ПолучитьОбъект();
			НеактуальноеПисьмоОбъект.УстановитьПометкуУдаления(Истина);
			НеактуальноеПисьмоОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли