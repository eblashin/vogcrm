///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ СЕРВЕР

&НаСервере
Процедура ОбновитьСписокНеОтправленныхПисем()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		НаборРегистра = РегистрыСведений.CRM_НеОтправленныеПисьма.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.Рассылка.Установить(Объект.Ссылка);
		НаборРегистра.Прочитать();
		
		НеОтправленныеПисьма.Очистить();
		
		Если НаборРегистра.Количество() > 0 Тогда
			табПисем_Значение = РеквизитФормыВЗначение("НеОтправленныеПисьма");
			
			Для Каждого СтрокаНабора Из НаборРегистра Цикл		
				НоваяСтрока = табПисем_Значение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНабора);
			КонецЦикла;
			
			ЗначениеВРеквизитФормы(табПисем_Значение, "НеОтправленныеПисьма");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПисьмаПоставитьПометкуУдаления(Рассылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет",Рассылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭлектронноеПисьмоИсходящее.Ссылка
	               |ИЗ
	               |	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	               |		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
	               |ГДЕ
	               |	ПредметыПапкиВзаимодействий.Предмет = &Предмет
	               |	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Письмо = Выборка.Ссылка.ПолучитьОбъект();
			Письмо.УстановитьПометкуУдаления(Истина);
			Письмо.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧПоСегменту()
	
	Запрос = Новый Запрос;
	Если Сегмент.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьДинамически ИЛИ Сегмент.СпособФормирования = Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять Тогда
		// Для периодически обновляемых сегментов всеравно получаем клиентов вручную - как и по динамическим - чтобы не
		// возникало вопросов о том, что сегмент в настоящий момент может быть не актуален.
		РеквизитыСКДСегмента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Сегмент,
			"СхемаКомпоновкиДанных,ХранилищеНастроекКомпоновкиДанных,ИмяШаблонаСКД");
			
		НастройкиСегмента = РеквизитыСКДСегмента.ХранилищеНастроекКомпоновкиДанных.Получить();
		Если ПустаяСтрока(РеквизитыСКДСегмента.ИмяШаблонаСКД) Тогда
			СКД = РеквизитыСКДСегмента.СхемаКомпоновкиДанных.Получить();
		Иначе
			СКД_Макета = СегментыСервер.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Сегмент, РеквизитыСКДСегмента.ИмяШаблонаСКД);
			СКД = СКД_Макета.СхемаКомпоновкиДанных;
		КонецЕсли;
		
		Если СКД.НаборыДанных.Найти("СписокСегмента") <> Неопределено Тогда
			Поля = СКД.НаборыДанных.СписокСегмента.Поля;
			Для Каждого Поле Из Поля Цикл
				Поле.ОграничениеИспользования.Поле = Ложь;
			КонецЦикла;// Подключить поля запроса списка.
			
			НастройкиСписка = СКД.ВариантыНастроек.Список.Настройки;
			Настройки = СКД.НастройкиПоУмолчанию;
			CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.ПараметрыДанных, Настройки.ПараметрыДанных);
			CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.Отбор, Настройки.Отбор);
		ИначеЕсли  СКД.НаборыДанных.Найти("ФормированиеСегмента") <> Неопределено Тогда
			Если НастройкиСегмента <> Неопределено Тогда
				НастройкиСписка = НастройкиСегмента;
			Иначе
				НастройкиСписка = СКД.ВариантыНастроек.ФормированиеСегмента.Настройки;
			КонецЕсли;
		Иначе
			НастройкиСписка = Неопределено;
		КонецЕсли;
		Если НастройкиСписка = Неопределено Тогда
			МассивПартнеров = Новый Массив();
		Иначе
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(
				СКД,НастройкиСписка,,,
				Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
			);
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ТаблицаЗначений = Новый ТаблицаЗначений;
			ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			МассивПартнеров = ТаблицаЗначений.ВыгрузитьКолонку("Партнер");
		КонецЕсли;
		
		Если ТолькоОсновныеКонтактныеЛица Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Партнеры.Ссылка КАК Партнер,
				|	Партнеры.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
				|ИЗ
				|	Справочник.Партнеры КАК Партнеры
				|ГДЕ
				|	НЕ Партнеры.ПометкаУдаления
				|	И Партнеры.Ссылка В (&МассивПартнеров)
				|	И НЕ Партнеры.CRM_ОсновноеКонтактноеЛицо.CRM_ОтписалсяОтEmailРассылок";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	Партнеры.Ссылка КАК Партнер,
               |	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК КонтактноеЛицо
               |ИЗ
               |	Справочник.Партнеры КАК Партнеры
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
               |		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
               |			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
               |			И (НЕ КонтактныеЛицаПартнеров.CRM_ОтписалсяОтEmailРассылок)
               |ГДЕ
               |	НЕ Партнеры.ПометкаУдаления
			   |	И Партнеры.Ссылка В (&МассивПартнеров)";
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивПартнеров", МассивПартнеров);
	Иначе	
		Запрос.УстановитьПараметр("Сегмент", Сегмент);
		Если ТолькоОсновныеКонтактныеЛица Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартнерыСегмента.Партнер КАК Партнер,
			|	ПартнерыСегмента.Сегмент,
			|	ПартнерыСегмента.Партнер.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
			|ИЗ
			|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			|ГДЕ
			|	ПартнерыСегмента.Сегмент = &Сегмент
			|	И НЕ ПартнерыСегмента.Партнер.ПометкаУдаления
			|	И НЕ ПартнерыСегмента.Партнер.CRM_ОсновноеКонтактноеЛицо.CRM_ОтписалсяОтEmailРассылок";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПартнерыСегмента.Партнер КАК Партнер,
			|	ПартнерыСегмента.Сегмент,
			|	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК КонтактноеЛицо
			|ИЗ
			|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|		ПО ПартнерыСегмента.Партнер = КонтактныеЛицаПартнеров.Владелец
			|			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
			|			И (НЕ КонтактныеЛицаПартнеров.CRM_ОтписалсяОтEmailРассылок)
			|ГДЕ
			|	ПартнерыСегмента.Сегмент = &Сегмент
			|	И НЕ ПартнерыСегмента.Партнер.ПометкаУдаления";
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	ТабПартнеров = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаб Из ТабПартнеров Цикл
		СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо", СтрокаТаб.Партнер, СтрокаТаб.КонтактноеЛицо),
			?(ЗначениеЗаполнено(ВидКонтактнойИнформации), ВидКонтактнойИнформации, Неопределено));
		Если СписокАдресов.Количество() > 0 Тогда
			НоваяСтрока = Объект.Получатели.Добавить();
			НоваяСтрока.Партнер			= СтрокаТаб.Партнер;
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				НоваяСтрока.КонтактноеЛицо	= СтрокаТаб.КонтактноеЛицо;
			КонецЕсли;
			НоваяСтрока.Адрес				= СписокАдресов[0].Значение.Представление;
			НоваяСтрока.ПредставлениеАдреса	= ?(СписокАдресов[0].Значение.Объект = НоваяСтрока.Партнер, Строка(НоваяСтрока.Партнер), 
				Строка(НоваяСтрока.КонтактноеЛицо)) + " <" + СписокАдресов[0].Значение.Представление + ">";
		ИначеЕсли НЕ НеЗаполнятьСПустымиАдресами Тогда
			НоваяСтрока = Объект.Получатели.Добавить();
			НоваяСтрока.Партнер			= СтрокаТаб.Партнер;
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				НоваяСтрока.КонтактноеЛицо	= СтрокаТаб.КонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТЧПоРезультатуОтчета(СписокСсылок)
	
	Для Каждого ЭлементСписка Из СписокСсылок Цикл
		Если НЕ ЭлементСписка.Пометка Тогда Продолжить; КонецЕсли;
		
		Если ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
			ТекПартнер	= ЭлементСписка.Значение;
			ТекКл		= ТекПартнер.CRM_ОсновноеКонтактноеЛицо;
		ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ТекПартнер	= ЭлементСписка.Значение;
			ТекКл		= Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		Иначе
			ТекКл		= ЭлементСписка.Значение;
			ТекПартнер	= ТекКл.Владелец;
		КонецЕсли;
		
		СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",ТекПартнер,ТекКл),
													?(ЗначениеЗаполнено(ВидКонтактнойИнформации),ВидКонтактнойИнформации,Неопределено));
		Если СписокАдресов.Количество() > 0 Тогда
			НоваяСтрока = Объект.Получатели.Добавить();
			НоваяСтрока.Партнер			= ТекПартнер;
			НоваяСтрока.КонтактноеЛицо	= ТекКл;
			НоваяСтрока.Адрес			= СписокАдресов[0].Значение.Представление;
			НоваяСтрока.ПредставлениеАдреса	= ?(СписокАдресов[0].Значение.Объект = НоваяСтрока.Партнер,Строка(НоваяСтрока.Партнер),Строка(НоваяСтрока.КонтактноеЛицо)) + " <" + СписокАдресов[0].Значение.Представление + ">";
		ИначеЕсли НЕ НеЗаполнятьСПустымиАдресами Тогда
			НоваяСтрока = Объект.Получатели.Добавить();
			НоваяСтрока.Партнер			= ТекПартнер;
			НоваяСтрока.КонтактноеЛицо	= ТекКл;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучателиЗаполнитьПоСпискуРассылкиНаСервере(СписокРассылки)
	СоставСписка = Справочники.CRM_СпискиРассылок.ПолучитьСоставСпискаРассылки(СписокРассылки);
	Если СоставСписка.Количество() > 0 Тогда
		Для Каждого СтруктураАдреса Из СоставСписка Цикл
			Если Не ЗначениеЗаполнено(СтруктураАдреса.Адрес) И Не ЗначениеЗаполнено(СтруктураАдреса.Контакт) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекПартнер = Неопределено;
			ТекКонтактноеЛицо = Неопределено;
			ТекАдрес = Неопределено;
			
			Если НЕ ЗначениеЗаполнено(СтруктураАдреса.Контакт) Тогда
				Продолжить;
			КонецЕсли;	
			
			Если	ЗначениеЗаполнено(СтруктураАдреса.Контакт)
				И	(ТипЗнч(СтруктураАдреса.Контакт) <> Тип("СправочникСсылка.Партнеры") И ТипЗнч(СтруктураАдреса.Контакт) <> Тип("СправочникСсылка.КонтактныеЛицаПартнеров") 
					И ТипЗнч(СтруктураАдреса.Контакт) <> Тип("Строка")) Тогда
				//
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтруктураАдреса.Контакт) = Тип("Строка") Тогда
				НоваяСтрока = Объект.Получатели.Добавить();
				НоваяСтрока.ПартнерСтрокой = СтруктураАдреса.Контакт;
				НоваяСтрока.Адрес = СтруктураАдреса.Адрес;
				НоваяСтрока.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтруктураАдреса.Контакт), 
					Строка(СтруктураАдреса.Контакт) + " <" + СтруктураАдреса.Адрес + ">", СтруктураАдреса.Адрес);
				Продолжить;
			КонецЕсли;				
			
			Если ТипЗнч(СтруктураАдреса.Контакт) = Тип("СправочникСсылка.Партнеры") И ЗначениеЗаполнено(СтруктураАдреса.Контакт) Тогда
				ТекПартнер = СтруктураАдреса.Контакт;
			ИначеЕсли ТипЗнч(СтруктураАдреса.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") И ЗначениеЗаполнено(СтруктураАдреса.Контакт) Тогда
				ТекПартнер = СтруктураАдреса.Контакт.Владелец;
				ТекКонтактноеЛицо = СтруктураАдреса.Контакт;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураАдреса.Адрес) Тогда
				ТекАдрес = СтруктураАдреса.Адрес;
			КонецЕсли;
			
			СписокАдресов = Неопределено;
			Если Не ЗначениеЗаполнено(ТекАдрес) И (ЗначениеЗаполнено(ТекПартнер) Или ЗначениеЗаполнено(ТекКонтактноеЛицо)) Тогда
				СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо", ТекПартнер, ТекКонтактноеЛицо), Неопределено);
				Если СписокАдресов.Количество() = 0 Тогда
					СписокАдресов = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если СписокАдресов <> Неопределено Тогда
				НоваяСтрока = Объект.Получатели.Добавить();
				НоваяСтрока.Партнер = ТекПартнер;
				Если ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
					НоваяСтрока.КонтактноеЛицо = ТекКонтактноеЛицо;
				КонецЕсли;
				НоваяСтрока.Адрес = СписокАдресов[0].Значение.Представление;
				НоваяСтрока.ПредставлениеАдреса = ?(СписокАдресов[0].Значение.Объект = НоваяСтрока.Партнер, Строка(НоваяСтрока.Партнер), 
					Строка(НоваяСтрока.КонтактноеЛицо)) + " <" + СписокАдресов[0].Значение.Представление + ">";
				//
			ИначеЕсли ЗначениеЗаполнено(ТекАдрес) Тогда
				НоваяСтрока = Объект.Получатели.Добавить();
				Если ЗначениеЗаполнено(ТекПартнер) Тогда
					НоваяСтрока.Партнер = ТекПартнер;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
					НоваяСтрока.КонтактноеЛицо = ТекКонтактноеЛицо;
				КонецЕсли;
				НоваяСтрока.Адрес = ТекАдрес;
				
				ОбъектПредставления = Неопределено;
				Если ЗначениеЗаполнено(ТекПартнер) И Не ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
					ОбъектПредставления = ТекПартнер;
				ИначеЕсли ЗначениеЗаполнено(ТекПартнер) И ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
					СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо", ТекПартнер, Неопределено), Неопределено);
					Если СписокАдресов.Количество() = 0 Тогда
						ОбъектПредставления = ТекКонтактноеЛицо;
					Иначе
						Для Каждого ЗначениеСписка Из СписокАдресов Цикл
							Если НРег(ЗначениеСписка.Значение.Адрес) = НРег(ТекАдрес) Тогда
								ОбъектПредставления = ТекПартнер;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не ЗначениеЗаполнено(ОбъектПредставления) Тогда
							ОбъектПредставления = ТекКонтактноеЛицо;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ОбъектПредставления = ТекКонтактноеЛицо;
				КонецЕсли;
				
				НоваяСтрока.ПредставлениеАдреса = ?(ЗначениеЗаполнено(ОбъектПредставления), Строка(ОбъектПредставления) + " <" + ТекАдрес + ">", ТекАдрес);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СвоиЛицаЗаполнитьПоСпискуРассылкиНаСервере(СписокРассылки)
	СоставСписка = Справочники.CRM_СпискиРассылок.ПолучитьСоставСпискаРассылки(СписокРассылки);
	Если СоставСписка.Количество() > 0 Тогда
		Для Каждого СтруктураАдреса Из СоставСписка Цикл
			Если Не ЗначениеЗаполнено(СтруктураАдреса.Адрес) И Не ЗначениеЗаполнено(СтруктураАдреса.Контакт) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекПользователь = Неопределено;
			ТекАдрес = Неопределено;
			
			Если НЕ ЗначениеЗаполнено(СтруктураАдреса.Контакт) Тогда
				Продолжить;
			КонецЕсли;	
			
			Если	ЗначениеЗаполнено(СтруктураАдреса.Контакт)
				И	(ТипЗнч(СтруктураАдреса.Контакт) <> Тип("СправочникСсылка.Пользователи")) Тогда
				//
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураАдреса.Контакт) Тогда
				ТекПользователь = СтруктураАдреса.Контакт;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураАдреса.Адрес) Тогда
				ТекАдрес = СтруктураАдреса.Адрес;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекАдрес) И ЗначениеЗаполнено(ТекПользователь) Тогда
				СтрокаПолучатель = Объект.СвоиЛица.Добавить();
				СтрокаПолучатель.Пользователь = ТекПользователь;
				ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя");
				АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ТекПользователь, ВидыИнформации);
				СтрокаПолучатель.Адрес = АдресЭП;
				СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.Пользователь) + " <" + СтрокаПолучатель.Адрес + ">", "");
			ИначеЕсли ЗначениеЗаполнено(ТекАдрес) Тогда
				СтрокаПолучатель						= Объект.СвоиЛица.Добавить();
				СтрокаПолучатель.Пользователь           = ТекПользователь;
				СтрокаПолучатель.Адрес					= ТекАдрес;
				СтрокаПолучатель.ПредставлениеАдреса	= ?(ЗначениеЗаполнено(ТекПользователь), Строка(ТекПользователь) + " <" + ТекАдрес + ">", "");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ФизЛицаЗаполнитьПоСпискуРассылкиНаСервере(СписокРассылки)
	СоставСписка = Справочники.CRM_СпискиРассылок.ПолучитьСоставСпискаРассылки(СписокРассылки);
	Если СоставСписка.Количество() > 0 Тогда
		Для Каждого СтруктураАдреса Из СоставСписка Цикл
			Если Не ЗначениеЗаполнено(СтруктураАдреса.Адрес) И Не ЗначениеЗаполнено(СтруктураАдреса.Контакт) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекФизЛицо = Неопределено;
			ТекАдрес = Неопределено;
			
			Если НЕ ЗначениеЗаполнено(СтруктураАдреса.Контакт) Тогда
				Продолжить;
			КонецЕсли;	
			
			Если	ЗначениеЗаполнено(СтруктураАдреса.Контакт)
				И	(ТипЗнч(СтруктураАдреса.Контакт) <> Тип("СправочникСсылка.ФизическиеЛица")) Тогда
				//
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураАдреса.Контакт) Тогда
				ТекФизЛицо = СтруктураАдреса.Контакт;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураАдреса.Адрес) Тогда
				ТекАдрес = СтруктураАдреса.Адрес;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекАдрес) И ЗначениеЗаполнено(ТекФизЛицо) Тогда
				СтрокаПолучатель = Объект.ФизЛица.Добавить();
				СтрокаПолучатель.ФизЛицо = ТекФизЛицо;
				ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
				АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ТекФизЛицо, ВидыИнформации);
				СтрокаПолучатель.Адрес = АдресЭП;
				СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.ФизЛицо) + " <" + СтрокаПолучатель.Адрес + ">", "");
			ИначеЕсли ЗначениеЗаполнено(ТекАдрес) Тогда
				СтрокаПолучатель			= Объект.ФизЛица.Добавить();
				СтрокаПолучатель.ФизЛицо	= ТекФизЛицо;
				СтрокаПолучатель.Адрес		= ТекАдрес;
				СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(ТекФизЛицо), Строка(ТекФизЛицо) + " <" + ТекАдрес + ">", "");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСписокАдресов(ТекущиеДанные, ВидКИ = Неопределено, ИспользоватьКИДляОповещений = Ложь)
	
	Если ТипЗнч(ТекущиеДанные) = Тип("Структура") Тогда
		Если ТипЗнч(ТекущиеДанные.Партнер) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ТекущиеДанные.Партнер, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Иначе
			Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(?(ЗначениеЗаполнено(ТекущиеДанные.Партнер) И НЕ ТекущиеДанные.Партнер.ЭтоГруппа И НЕ ТекущиеДанные.Партнер.CRM_ОтписалсяОтEmailРассылок, ТекущиеДанные.Партнер, Неопределено),
											?(ЗначениеЗаполнено(ТекущиеДанные.КонтактноеЛицо),ТекущиеДанные.КонтактноеЛицо,Неопределено),
											Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВидКИ);
		КонецЕсли;
	Иначе
		Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ТекущиеДанные, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;	
	
	Если НЕ Таб = Неопределено Тогда
		
		Если ТипЗнч(ТекущиеДанные) = Тип("Структура") И ТипЗнч(ТекущиеДанные.Партнер) <> Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			Таб.Сортировать("ПорядокВремТаб Возр, Порядок Возр, CRM_ОсновнойДляСвязи Убыв");
			МассивСтрок = Таб.НайтиСтроки(Новый Структура("ИспользоватьДляОповещений", Истина));
			
			НайтиВидКИ	= Таб.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиКонтактногоЛица));
			Если НайтиВидКИ.Количество() > 0 Тогда
				ПерваяСтрока = НайтиВидКИ[0];
			Иначе
				НайтиВидКИ	= Таб.НайтиСтроки(Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.CRM_EmailРассылкиЧастногоЛица));
				Если НайтиВидКИ.Количество() > 0 Тогда
					ПерваяСтрока = НайтиВидКИ[0];
				Иначе
					ПерваяСтрока = Неопределено;
				КонецЕсли;				
			КонецЕсли;	
		Иначе
			МассивСтрок = Таб.НайтиСтроки(Новый Структура("ИспользоватьДляОповещений", Истина));			
			ПерваяСтрока = Неопределено;
		КонецЕсли;
		
		СписокЗнач = Новый СписокЗначений;
		ТекСсылка = "";
		ПерваяСтрокаБыла = Ложь;
		
		Для Каждого СтрокаТаб Из МассивСтрок Цикл
			
			СтруктураАдреса = Новый Структура;
			
			Если НЕ ТекСсылка = СтрокаТаб.Ссылка Тогда
				
				Если ПерваяСтрока = Неопределено Тогда						
					СтруктураАдреса.Вставить("Адрес"		,СокрЛП(СтрокаТаб.АдресЭП));
					СтруктураАдреса.Вставить("Представление",СокрЛП(СтрокаТаб.Представление));
					СтруктураАдреса.Вставить("Объект"		,СтрокаТаб.Ссылка);
					СписокАдресов.Добавить(СтруктураАдреса, Строка(СтрокаТаб.Ссылка));
					ТекСсылка = СтрокаТаб.Ссылка;						
				Иначе						
					СтруктураАдреса.Вставить("Адрес"		,СокрЛП(ПерваяСтрока.АдресЭП));
					СтруктураАдреса.Вставить("Представление",СокрЛП(ПерваяСтрока.Представление));
					СтруктураАдреса.Вставить("Объект"		,ПерваяСтрока.Ссылка);
					СписокАдресов.Добавить(СтруктураАдреса, Строка(ПерваяСтрока.Ссылка));
					ТекСсылка = ПерваяСтрока.Ссылка;
					ПерваяСтрока = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураАдреса = Новый Структура;
			СтруктураАдреса.Вставить("Адрес"		,СокрЛП(СтрокаТаб.АдресЭП));
			СтруктураАдреса.Вставить("Представление",СокрЛП(СтрокаТаб.Представление));
			СтруктураАдреса.Вставить("Объект"		,СтрокаТаб.Ссылка);
			СписокАдресов.Добавить(СтруктураАдреса, "   "+СокрЛП(СтрокаТаб.Вид) + ": " + СтрокаТаб.Представление);
		КонецЦикла;	
		Если СписокАдресов.Количество() > 0 Тогда
			Возврат СписокАдресов;
		КонецЕсли;				
	КонецЕсли;	
	
	Возврат СписокАдресов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьКЛПартнера(ТекПартнер)
	
	Если НЕ ТекПартнер.CRM_ОсновноеКонтактноеЛицо.CRM_ОтписалсяОтEmailРассылок Тогда
		Возврат ТекПартнер.CRM_ОсновноеКонтактноеЛицо;
	Иначе
		Возврат Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьНеОтправленныеПисьмаИСкорректировать(Рассылка, CRM_ИзмененоСодержаниеРассылки, CRM_ИзмененОтправитель, CRM_ИзмененаТема, CRM_ИзмененыВложения);
	
	Документы.CRM_РассылкаЭлектронныхПисем.ПолучитьНеОтправленныеПисьмаИСкорректировать(Рассылка, CRM_ИзмененоСодержаниеРассылки, CRM_ИзмененОтправитель, CRM_ИзмененаТема, CRM_ИзмененыВложения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьНеОтправленныеПисьма(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектронноеПисьмоИсходящее.Ссылка
	|ИЗ
    |	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
    |		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет = &Предмет
	|	И НЕ ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления";
	Запрос.УстановитьПараметр("Предмет",ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

&НаСервереБезКонтекста
Функция ВведеныПисьмаНаОсновании(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ЭлектронноеПисьмоИсходящее.Ссылка,
	               |	ВЫБОР
	               |		КОГДА ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Отправляли
	               |ИЗ
				   |	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
				   |		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
	               |ГДЕ
	               |	ПредметыПапкиВзаимодействий.Предмет = &Предмет
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Отправляли УБЫВ";
	Запрос.УстановитьПараметр("Предмет",ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура("ЕстьПисьма, Отправляли");
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.ЕстьПисьма	= Истина;
		СтруктураВозврата.Отправляли	= Выборка.Отправляли;
	Иначе
		СтруктураВозврата.ЕстьПисьма	= Ложь;
		СтруктураВозврата.Отправляли	= Ложь;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборСписка(СписокОтбора, ИмяПоляОтбора, ЗначениеОтбора)

	СписокОтбора.Отбор.Элементы.Очистить();
	НовыйЭлементОтбора = СписокОтбора.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоляОтбора);
	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.Использование  = Истина;
	НовыйЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;

КонецПроцедуры// УстановитьОтборСписка(СписокОтбора, ИмяПоляОтбора, ЗначениеОтбора)	

&НаСервере
Функция СформироватьПисьмаНаСервере(Рассылка, СпособОтправки)
	
	ПисьмаСформированы = Документы.CRM_РассылкаЭлектронныхПисем.СформироватьПисьма(Рассылка, СпособОтправки);
	УстановитьОтборСписка(СписокПисем, "Предмет", Объект.Ссылка);
	Возврат ПисьмаСформированы;
	
КонецФункции


&НаСервере
Процедура ПолучитьНеОтправленныеПисьмаИОтправить()
	
	бОтправитьСразу = (Не Константы.CRM_ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем.Получить() ИЛИ Объект.ОтправлятьПисьмаСразу);
	Документы.CRM_РассылкаЭлектронныхПисем.ПолучитьНеОтправленныеПисьмаИОтправить(Объект.Ссылка, СпособОтправки, бОтправитьСразу);
	Если бОтправитьСразу Тогда
		ОбновитьСтатусОтправленныхПисемНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьАдресаПолучателей()
	
	Флаг = Истина;
	
	Для Каждого СтрокаТЧ Из Объект.Получатели Цикл
		РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(СтрокаТЧ.Адрес));
		Если РезультатПроверки.КодОшибки <> 0 Тогда
			Флаг = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, ,"Объект.Получатели["
			+ Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].Адрес");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.СвоиЛица Цикл
		РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(СтрокаТЧ.Адрес));
		Если РезультатПроверки.КодОшибки <> 0 Тогда
			Флаг = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, ,"Объект.СвоиЛица["
			+ Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].Адрес");
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из Объект.ФизЛица Цикл
		РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(СтрокаТЧ.Адрес));
		Если РезультатПроверки.КодОшибки <> 0 Тогда
			Флаг = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, ,"Объект.ФизЛица["
			+ Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].Адрес");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Флаг;
	
КонецФункции

&НаСервере
Процедура УдалитьКонтактыБезАдреса(ИмяТаблицы = "Получатели")
	
	Индекс = 0;
	Пока Индекс <= Объект[ИмяТаблицы].Количество()-1 Цикл
		Если Не ЗначениеЗаполнено(Объект[ИмяТаблицы][Индекс].Адрес) Тогда
			Объект[ИмяТаблицы].Удалить(Индекс);
			Модифицированность = Истина;
			Продолжить;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКонтактыСОдинаковымиАдресами(ИмяТаблицы = "Получатели")
	
	ТабТЧ = Объект[ИмяТаблицы].Выгрузить();
	Индекс = 0;
	Пока Индекс <= Объект[ИмяТаблицы].Количество()-1 Цикл
		Если ЗначениеЗаполнено(Объект[ИмяТаблицы][Индекс].Адрес) Тогда
			МассивСтрок = ТабТЧ.НайтиСтроки(Новый Структура("Адрес", Объект[ИмяТаблицы][Индекс].Адрес));
			Если МассивСтрок.Количество() > 1 Тогда
				Объект[ИмяТаблицы].Удалить(Индекс);
				Модифицированность = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОформлениеЭлемента(ЭлементДляПоиска, ИмяЭлемента)
	
	Для Каждого ОформлениеЭлемента Из ЭлементДляПоиска.Оформление.Элементы Цикл
		Если ОформлениеЭлемента.Параметр = Новый ПараметрКомпоновкиДанных(ИмяЭлемента) Тогда
			Возврат ОформлениеЭлемента;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами(ИмяТаблицы = "Получатели")
	// "Аккуратный" поиск и удаление созданных программно оформлений для поля -
	// на случай, если у формы есть другие условные оформления - их трогать нельзя.
	МассивЭлементовДляУдаления = Новый Массив();
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если	ЭлементОформления.Поля.Элементы.Количество() <> 1
				Или	ЭлементОформления.Поля.Элементы[0].Поле <> Новый ПолеКомпоновкиДанных(ИмяТаблицы) Тогда
				//
				Продолжить;
			КонецЕсли;
			
			ОформлениеЭлемента = ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			Если ОформлениеЭлемента = Неопределено Тогда Продолжить; КонецЕсли;
			
			Если	ЭлементОформления.Отбор.Элементы.Количество() <> 1
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0]) <> Тип("ЭлементОтбораКомпоновкиДанных")
				Или	ЭлементОформления.Отбор.Элементы[0].ЛевоеЗначение <> Новый ПолеКомпоновкиДанных("Объект." + ИмяТаблицы + ".ИдентификаторОформления")
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение) <> Тип("Строка") Тогда
				//
				Продолжить;
			КонецЕсли;
			
			Если Найти(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение, "_Ид_Оформления_") > 0 Тогда
				МассивЭлементовДляУдаления.Добавить(ЭлементОформления);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементДляУдаления Из МассивЭлементовДляУдаления Цикл
		Попытка УсловноеОформление.Элементы.Удалить(ЭлементДляУдаления);
		Исключение КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьКонтактыСОдинаковымиАдресами(ИмяТаблицы = "Получатели")
	УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами(ИмяТаблицы);
	
	Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
		СтрокаТаблицы.ИдентификаторОформления = "";
	КонецЦикла;
	
	МассивЦветов = Новый Массив();
	МассивЦветов.Добавить(Новый Цвет(216,218,154));
	МассивЦветов.Добавить(Новый Цвет(218,195,154));
	МассивЦветов.Добавить(Новый Цвет(218,172,154));
	МассивЦветов.Добавить(Новый Цвет(218,154,156));
	МассивЦветов.Добавить(Новый Цвет(218,154,180));
	МассивЦветов.Добавить(Новый Цвет(196,154,218));
	МассивЦветов.Добавить(Новый Цвет(154,162,218));
	МассивЦветов.Добавить(Новый Цвет(154,192,218));
	МассивЦветов.Добавить(Новый Цвет(148,218,228));
	
	УжеПроверенныеАдреса = Новый Массив();
	ТекущийИндексИдентификатораОформления = 0;
	ТекущийИндексСдвига = 0;
	Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
		ТекАдрес = СтрокаТаблицы.Адрес;
		Если Не ЗначениеЗаполнено(ТекАдрес) Тогда Продолжить; КонецЕсли;
		Если УжеПроверенныеАдреса.Найти(ТекАдрес) <> Неопределено Тогда Продолжить; КонецЕсли;
		
		УжеПроверенныеАдреса.Добавить(ТекАдрес);
		
		НайденныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("Адрес", ТекАдрес));
		Если НайденныеСтроки.Количество() > 1 Тогда
			СтрИдентификаторОформления = "_Ид_Оформления_" + Формат(ТекущийИндексИдентификатораОформления, "ЧН=0; ЧГ=");
			ТекущийИндексЦвета = Мин(ТекущийИндексИдентификатораОформления, МассивЦветов.ВГраница());
			ТекущийИндексИдентификатораОформления = ТекущийИндексИдентификатораОформления + 1;
			Если ТекущийИндексИдентификатораОформления > МассивЦветов.ВГраница() Тогда
				ТекущийИндексИдентификатораОформления = 0;
			КонецЕсли;	
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЭлементОформления.Использование = Истина;
			
			ОформлениеЭлемента = ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			ОформлениеЭлемента.Использование = Истина;
			ОформлениеЭлемента.Значение = МассивЦветов[ТекущийИндексЦвета];
			
			НовоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
			НовоеПоле.Использование = Истина;
			
			НовыйЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТаблицы + ".ИдентификаторОформления");
			НовыйЭлементОтбора.ПравоеЗначение = СтрИдентификаторОформления;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.Использование = Истина;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ИдентификаторОформления = СтрИдентификаторОформления;
				
				ИндексСтроки = Объект[ИмяТаблицы].Индекс(НайденнаяСтрока);
				Если ИндексСтроки > ТекущийИндексСдвига Тогда
					Объект[ИмяТаблицы].Сдвинуть(ИндексСтроки, ТекущийИндексСдвига - ИндексСтроки);
					ТекущийИндексСдвига = ТекущийИндексСдвига + 1;
				Иначе
					ТекущийИндексСдвига = ИндексСтроки + 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоУчастников(Форма)
	Форма.КоличествоКлиентов      = Форма.Объект.Получатели.Количество();
	Форма.КоличествоПользователей = Форма.Объект.СвоиЛица.Количество();
	Форма.КоличествоФизлиц        = Форма.Объект.ФизЛица.Количество();
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьКомандуСозданияБизнесПроцесса()
	
	Если ИспользоватьБизнесПроцессы И ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(Объект.Проект.CRM_КартаМаршрута) Тогда
		CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект, Элементы.ГруппаКнопокСоздать, Объект.Проект.CRM_КартаМаршрута, Ложь);
	Иначе
		CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект,,, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьДубликатБизнесПроцесса(Предмет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|ГДЕ
	|	НЕ CRM_БизнесПроцесс.ПометкаУдаления
	|	И НЕ CRM_БизнесПроцесс.Завершен
	|	И CRM_БизнесПроцесс.Предмет = &Предмет");
	Запрос.УстановитьПараметр("Предмет", Предмет);	
	
	Возврат НЕ Запрос.Выполнить().Пустой();	
	
КонецФункции

&НаСервере
Функция ВернутьЗаголовокКоманды(ИмяКоманды)
	
	Возврат Команды[ИмяКоманды].Заголовок;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоШаблону(ДополнитьТекстИВложения)
	
	Объект.ИзHTMLФайла = Шаблон.ИзHTMLФайла;
	
	CRM_ИзмененоСодержаниеРассылки = Истина;
	
	Если Объект.ИзHTMLФайла Тогда
		
		ИзмененШаблонHTML = Истина;
		ТекстПисьма = CRM_Взаимодействия.CRM_ОбработатьТекстHTML(Шаблон, ЭтотОбъект.УникальныйИдентификатор);
		
	Иначе
		ФорматированныйДокументШаблон = ВернутьФорматированныйДокументПоШаблону(Шаблон);
		
		Если Не ДополнитьТекстИВложения Тогда
			
			СтруктураВложенийПоШаблону = Неопределено;
			ТекстHTMLПоШаблону = "";
			ФорматированныйДокументШаблон.ПолучитьHTML(ТекстHTMLПоШаблону, СтруктураВложенийПоШаблону);
			
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ТекстHTMLПоШаблону, СтруктураВложенийПоШаблону);
			
			Если Лев(НРег(Объект.Тема),3) <> "re:" И Лев(НРег(Объект.Тема),3) <> "fw:" Тогда
				ПодписьПользователя = ПолучитьПодписьПользователя(Объект.УчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь);
			Иначе
				ПодписьПользователя = ПолучитьПодписьПользователя(Объект.УчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь, Истина);
			КонецЕсли;
			
			Если ПодписьПользователя <> Неопределено Тогда
				ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ТекстПисьмаФорматированныйДокумент, ПодписьПользователя);
			КонецЕсли;
			
			Для Каждого ТекущееВложение Из Вложения Цикл
				Если ТекущееВложение.Расположение = 0 И НЕ ЗначениеЗаполнено(ТекущееВложение.ИДФайлаЭлектронногоПисьма) Тогда
					УдаленныеВложения.Добавить(ТекущееВложение.Ссылка);
				КонецЕсли;
			КонецЦикла;
			
			Вложения.Очистить();
		Иначе
			ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ТекстПисьмаФорматированныйДокумент, ФорматированныйДокументШаблон, Истина);
		КонецЕсли;
		
		Объект.Текст = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
	КонецЕсли;
	
	// Заполнение вложений по пересылаемому письму.
	табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Шаблон, Истина);
	
	Для Каждого Стр Из табВложения Цикл
		Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
			новСтр = Вложения.Добавить();
			новСтр.Ссылка								= Стр.Ссылка;
			новСтр.ИмяФайла								= Стр.ИмяФайла;
			новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
			новСтр.Размер								= Стр.Размер;
			РазмерВложения								= Цел(новСтр.Размер/1024);
			новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
			новСтр.РазмерПредставление					= Стр.РазмерПредставление;
			новСтр.Расположение							= 1;
			новСтр.ИДФайлаЭлектронногоПисьмаОтбор		= "#";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусОтправленныхПисемНаСервере()
	КоличествоВсего = 0;
	КоличествоОтправлено = 0;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СУММА(	ВЫБОР
		|				КОГДА	ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
		|				ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ)	КАК Отправлено,
		|	СУММА(1)		КАК Всего
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
		|		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
		|ГДЕ
		|	НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления
		|	И ВЫРАЗИТЬ(ПредметыПапкиВзаимодействий.Предмет КАК Документ.CRM_РассылкаЭлектронныхПисем) = &Ссылка
		|");
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Всего <> Null Тогда
				КоличествоВсего			= Выборка.Всего;
				КоличествоОтправлено	= Выборка.Отправлено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияСтатусОтправленныхПисем.Заголовок =
		"" + Формат(КоличествоОтправлено, "ЧН=0; ЧГ=")
		+ " " + НСтр("ru = 'из'")
		+ " " + Формат(КоличествоВсего, "ЧН=0; ЧГ=")
		+ НСтр("ru = ' писем'");
	//
КонецПроцедуры

&НаСервере
Функция ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляОтправки(УчетнаяЗапись)
	Возврат УчетнаяЗапись.ИспользоватьДляОтправки;
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	Если ВсегдаПоказыватьВложения Тогда
		Элементы.ВложенияПредставление.Видимость = Ложь;
		Если НЕ Элементы.Вложения.Видимость Тогда
			Элементы.Вложения.Видимость = Истина;
		КонецЕсли;			
		Возврат;
	КонецЕсли;		
		
	Если Элементы.Вложения.Видимость Тогда
		ВложенияПредставление	= НСтр("ru='свернуть вложения'");
		Элементы.ВложенияПредставление.Видимость = Ложь;		
	Иначе	
		ВложенияПредставление = "";
		Элементы.ВложенияПредставление.Видимость = Истина;
		Для Каждого ЭлементТаблицы Из Вложения Цикл
			Если НЕ ВсеВложенияПометка И ЭлементТаблицы.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			ИначеЕсли ВсеВложенияПометка Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			КонецЕсли;
		КонецЦикла;
		Если ПустаяСтрока(ВложенияПредставление) Тогда
			ВложенияПредставление = НСтр("ru='Добавить файл...'");
			Элементы.ВложенияПредставление.Видимость = Истина;			
		Иначе
			ВложенияПредставление = Сред(ВложенияПредставление, 3);
			Элементы.ВложенияПредставление.Видимость = Истина;			
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // СформироватьПредставлениеВложений()	

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТиповПрисоединенныхФайлов()
	МассивТипов = Новый Массив();
	Для Каждого СправочникМд Из Метаданные.Справочники Цикл
		Если Прав(СправочникМд.Имя, 19) = "ПрисоединенныеФайлы" Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка." + СправочникМд.Имя));
		КонецЕсли;
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции

&НаКлиенте
Функция ПеретаскиваетсяФайл(ЗначениеПеретаскивания)
	Если	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") И ЗначениеПеретаскивания.ЭтоФайл())
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл") И ЗначениеПеретаскивания[0].ЭтоФайл())
		Или КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания))
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания[0]))) Тогда
		//
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("ДанныеФормыЭлементДерева") Тогда
		бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		Попытка
			Если КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания.Ссылка)) Тогда
				бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Истина;
			КонецЕсли;
		Исключение
			бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		КонецПопытки;
		Возврат бПеретаскиваетсяПрисоединенныйФайлСВерсионированием;
		
	Иначе
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") Тогда
			Если Не ЗначениеПеретаскивания.ЭтоФайл() Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл") И Не ЗначениеПеретаскивания[0].ЭтоФайл() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПрисоединенныйФайлПеретаскиванием(МассивФайловИлиФайл)
	Если ТипЗнч(МассивФайловИлиФайл) = Тип("Массив") Тогда
		МассивФайлов = МассивФайловИлиФайл;
	Иначе
		МассивФайлов = Новый Массив();
		МассивФайлов.Добавить(МассивФайловИлиФайл);
	КонецЕсли;
	
	МассивФайловДляОбработки = Новый Массив();
	Для Каждого ЭлементМассива Из МассивФайлов Цикл
		Если Не ПеретаскиваетсяФайл(ЭлементМассива) = Истина Тогда
			Продолжить;
		КонецЕсли;
		МассивФайловДляОбработки.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Если МассивФайловДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокВложений = Новый СписокЗначений();
	
	Для Каждого Файл Из МассивФайловДляОбработки Цикл
		Если ТипЗнч(Файл) = Тип("Файл") Тогда
			
			// Это файл.
			// Сначала проверим добавляемый файл на разрешённый размер и расширения.
			МассивИменФайловСОшибками = Новый Массив;
			Если НЕ РаботаСФайламиСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(Файл, Ложь, МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			
			СписокВложений.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя), УникальныйИдентификатор), Файл.Имя);
			
		ИначеЕсли ТипЗнч(Файл) = Тип("ДанныеФормыЭлементДерева") Тогда
			
			// Это присоединенный файл с версионированием.
			// Сначала проверим добавляемый файл на разрешённый размер и расширения.
			МассивИменФайловСОшибками = Новый Массив;
			РеквизитыФайла = ПолучитьРеквизитыПроверяемогоФайла(Файл);
			Если НЕ CRM_ПрисоединенныеФайлы.ПроверитьВозможностьЗагрузкиФайла(Файл, РеквизитыФайла.Размер, РеквизитыФайла.Расширение, Ложь, МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл.Ссылка, УникальныйИдентификатор, Истина);
			
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				СписокВложений.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
			КонецЕсли;
			
		Иначе
			
			// Это элемент справочника *ПрисоединенныеФайлы.
			// Сначала проверим добавляемый файл на разрешённый размер и расширения.
			МассивИменФайловСОшибками = Новый Массив;
			РеквизитыФайла = ПолучитьРеквизитыПроверяемогоФайла(Файл);
			Если НЕ CRM_ПрисоединенныеФайлы.ПроверитьВозможностьЗагрузкиФайла(Файл, РеквизитыФайла.Размер, РеквизитыФайла.Расширение, Ложь, МассивИменФайловСОшибками) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщение.Текст + МассивИменФайловСОшибками[0].Ошибка;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл, УникальныйИдентификатор, Истина);
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				СписокВложений.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокВложений.Количество() > 0 Тогда
		
		Для Каждого ЭлементСпискаФайлов Из СписокВложений Цикл
			новСтр = Вложения.Добавить();
			
			новСтр.Расположение = 4;
			новСтр.ИмяФайла = ЭлементСпискаФайлов.Представление;
			Расширение = ВзаимодействияКлиентСервер.РасширениеФайла(новСтр.ИмяФайла);
			новСтр.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Расширение);
			новСтр.ИмяФайлаНаКомпьютере = ЭлементСпискаФайлов.Значение;
			новСтр.ИмяФайла = ЭлементСпискаФайлов.Представление;
			новСтр.Размер = ПолучитьИзВременногоХранилища(ЭлементСпискаФайлов.Значение).Размер();
			РазмерВложения = Цел(новСтр.Размер/1024);
			новСтр.РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
			новСтр.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
	СформироватьПредставлениеВложений();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыПроверяемогоФайла(Файл)
	Возврат Новый Структура("Размер, Расширение", Файл.Размер, Файл.Расширение);
КонецФункции	

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаСервере
Процедура УдалитьДублиСтрок()
	CRM_ОбщегоНазначенияКлиентСервер.ПроверкаНаДублиВТЧ(Объект.Получатели);						
КонецПроцедуры	

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура УстановитьСвойстваЭлементовФормы()
	
	Элементы.ФормаСформироватьПисьма.Доступность = НЕ ТолькоПросмотр;
	
	Элементы.СтраницаПолучателей.Видимость			= НЕ CRM_Отправляли;
	Элементы.СтраницаСвоиЛица.Видимость				= НЕ CRM_Отправляли;
	Элементы.СтраницаФизЛиц.Видимость				= НЕ CRM_Отправляли;
	Элементы.СтраницаПисем.Видимость				= CRM_ЕстьПисьма;
	Элементы.СтраницаНеОтправленныеПисьма.Видимость	= CRM_ЕстьПисьма;
	Элементы.ИнформационнаяНадпись.Видимость		= Объект.ЕстьИзменения И НЕ CRM_Отправляли;
	Элементы.СтраницаНеОтправленныеПисьма.Видимость	= CRM_ЕстьПисьма;
	Элементы.ИнформационнаяНадпись.Видимость		= Объект.ЕстьИзменения И НЕ CRM_Отправляли;
	
	Элементы.ФормаСформироватьПисьма.Доступность	= НЕ CRM_Отправляли И (Объект.ЕстьИзменения 
													  ИЛИ НЕ CRM_ЕстьПисьма 
													  ИЛИ CRM_ИзмененСоставПолучателей
													  ИЛИ CRM_ИзмененыВложения
													  ИЛИ CRM_ИзмененОтправитель
													  ИЛИ CRM_ИзмененоСодержаниеРассылки
													  ИЛИ CRM_ИзмененаТема);
	Если CRM_ЕстьПисьма Тогда
		Элементы.ФормаСформироватьПисьма.Заголовок	= НСтр("ru = 'Переформировать письма'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть форму рассылки. Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	КэшТипыСправочниковПрисоединенныхФайлов = ПолучитьОписаниеТиповПрисоединенныхФайлов();
	
	// Заполним список кодировок
	СписокКодировок = ВзаимодействияКлиентСервер.СписокКодировок();
	
	Для Каждого Элемент Из СписокКодировок Цикл
		
		Элементы.Кодировка.СписокВыбора.Добавить(Элемент.Значение);
		
	КонецЦикла;
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Элементы.Ответственный.КнопкаВыбора = Истина;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		Элементы.Ответственный.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	// Заполним список выбора учетных записей.
	CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(Элементы.ОтправительПредставление.СписокВыбора);
	
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	
	ПереключательИзHTMLФайла = Число(Объект.ИзHTMLФайла);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииИПриЧтенииНаСервере();
	КонецЕсли;
	
	Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор","#");
	
	ТекущаяКодировка = Объект.Кодировка;
	
	СписокПисем.Отбор.Элементы.Очистить();
	УстановитьОтборСписка(СписокПисем, "Предмет", Объект.Ссылка);
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаСодержания;
	Иначе	
		Элементы.Панель.ТекущаяСтраница = ?(CRM_ЕстьПисьма,Элементы.СтраницаПисем,Элементы.СтраницаПолучателей);
	КонецЕсли;
	
	ИспользоватьБизнесПроцессы = Константы.CRM_ИспользоватьБизнесПроцессы.Получить();
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
	
	// АВТОТЕКСТ
	ТаблицаАвтотекстаЗнач = РеквизитФормыВЗначение("ТаблицаАвтотекста");
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекстаЗнач, Перечисления.CRM_НазначенияАвтотекста.АвтотекстЭлектронноеПисьмо,,Истина);
	CRM_АвтотекстПереопределяемый.СформироватьСписокАвтотекста(ТаблицаАвтотекстаЗнач, Перечисления.CRM_НазначенияАвтотекста.АвтотекстЭлектронноеПисьмо, Истина, Истина);
	ЗначениеВРеквизитФормы(ТаблицаАвтотекстаЗнач, "ТаблицаАвтотекста");
	
	CRM_АвтотекстПереопределяемый.ЗаполнитьКоманднуюПанельФорматированногоДокумента(ЭтотОбъект, Истина);
	CRM_АвтотекстПереопределяемый.ЗаполнитьКоманднуюПанельФорматированногоДокумента(ЭтотОбъект, Ложь,,Истина);
	
	ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем = Константы.CRM_ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем.Получить();
	Элементы.ОтправлятьПисьмаСразу.Видимость = ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем;
	
	ИспользоватьГруппыПользователей = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	Если Не ИспользоватьГруппыПользователей Тогда
		Элементы.СвоиЛицаПользователиЗаполнитьПоГруппе.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьСтатусОтправленныхПисемНаСервере();
	
	ОбновитьСписокНеОтправленныхПисем();
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	СформироватьПредставлениеВложений();	
	
	CRM_ШаблоныОбъектов.СформироватьДополнительныеЭлементыФормы(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Свойство("Взаимодействие") Тогда
		Взаимодействие	= Параметры.Взаимодействие;
	КонецЕсли;
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
	СпособОтправки = Константы.CRM_СпособОтправкиРассылок.Получить();
	Если СпособОтправки = Перечисления.CRM_СпособыОтправкиРассылок.UniSender Тогда
		Элементы.ПереключательИзHTMLФайла.СписокВыбора.Добавить(2, "Шаблон UniSender");
	КонецЕсли;
	
	Элементы.ОтправлятьПисьмаСразу.Доступность = (Объект.ДатаНачалаВыполненияРассылки<CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	#Если Не ВебКлиент Тогда
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Если СтрокаТаблицыВложений.Расположение = 2 Тогда
				Попытка
					Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
					СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Данные, "");
					СтрокаТаблицыВложений.Расположение = 4;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,"Вложения",, Отказ);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Объект.ЕстьВложения = (Вложения.Количество() <> 0);
	//Объект.ЕстьВложения = (Вложения.Количество() <> 0 Или (СтруктураВложенийТелаПисьма <> Неопределено И СтруктураВложенийТелаПисьма.Количество() > 0));
	
	// Если рассылка не новая и уже есть черновики, тогда надо уточнить переносить ли изменения
	// содержания, вложений и отправителя в существующие черновики.
	Если НЕ Объект.Ссылка.Пустая() И ЕстьНеОтправленныеПисьма(Объект.Ссылка) И ( Объект.ЕстьИзменения
																			 ИЛИ CRM_ИзмененоСодержаниеРассылки 
																			 ИЛИ CRM_ИзмененОтправитель
																			 ИЛИ CRM_ИзмененыВложения
																			 ИЛИ CRM_ИзмененСоставПолучателей
																			 ИЛИ CRM_ИзмененаТема) Тогда
		Если НЕ CRM_НеЗадаватьВопросПередЗаписью Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Рассылка была изменена.
								  |Переформировать письма?'"), Режим, 0);
		Иначе
			Объект.ЕстьИзменения			= Ложь;
			CRM_ПеренестиИзменения	= Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИзмененШаблонHTML И НЕ CRM_ЭтоШаблонUniSender Тогда
		
		УдалитьВременныеФайлы();
		
		Если ПустаяСтрока(ИмяФайлаШаблона) Тогда Возврат; КонецЕсли;
		
		АдресХранилища = "";
		Если ПоместитьФайл(АдресХранилища, ИмяФайлаШаблона,,Ложь,УникальныйИдентификатор) Тогда
			
			ПолучитьИменаФайловНаКлиенте(АдресХранилища, ИмяФайлаШаблона);
			
			Пропустить = Истина;
			Для Каждого СтрокаКартинки ИЗ СоответствиеФайлов Цикл
				// Пропустим первую строку
				Если Пропустить Тогда
					Пропустить= Ложь;
					Продолжить;
				КонецЕсли;
				
				АдресХранилищаКартинки = "";
				Если ПоместитьФайл(АдресХранилищаКартинки, КаталогФайла + СтрокаКартинки.ИмяНаКлиенте,,Ложь,УникальныйИдентификатор) Тогда
					
					СтрокаКартинки.ИмяНаСервере = ВернутьИмяФайлаКартинкиНаСервере(КаталогФайла + СтрокаКартинки.ИмяНаКлиенте, АдресХранилищаКартинки, КаталогФайла + СтрокаКартинки.ИмяНаКлиенте);
					
				КонецЕсли;
			КонецЦикла;
			
			Объект.ТекстHTML = ПропаситьHTML();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ЕстьИзменения			= Ложь;
		CRM_ПеренестиИзменения	= Истина;
	Иначе
		Объект.ЕстьИзменения			= Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ПереданныйТекстHTML)
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ПереданныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		Если АтрибутИсточникКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(АтрибутИсточникКартинки.ТекстовоеСодержимое, "://") > 0 Тогда
			РезультатСкаченногоФайла = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АтрибутИсточникКартинки.ТекстовоеСодержимое);
			
			Если НЕ РезультатСкаченногоФайла = Неопределено И РезультатСкаченногоФайла.Статус Тогда
				НоваяКартинка = Новый Картинка(ПолучитьИзВременногоХранилища(РезультатСкаченногоФайла.Путь));
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла = АтрибутИсточникКартинки.ТекстовоеСодержимое;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
				НоваяСтрока.Картинка = НоваяКартинка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ИзHTMLФайла И ТекущийОбъект.ТекстHTML = "" Тогда
		ТекущийОбъект.ИзHTMLФайла = Ложь;	
	КонецЕсли;	
	
	Если НЕ CRM_ЕстьПисьма ИЛИ CRM_ИзмененоСодержаниеРассылки Тогда
		
		ДокументHTMLТекущегоПисьмаПодготовлен = Ложь;
		
		// Подготовим документ HTML из содержимого форматированного документа.
		ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
		
		Если ТекущийОбъект.ИзHTMLФайла И ИзмененШаблонHTML Тогда
			СтруктураВложений		= Новый Структура;
			
			Если ЗначениеЗаполнено(Шаблон) И Шаблон.ИзHTMLФайла Тогда
				ТекущийОбъект.ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Шаблон, Шаблон.Текст, СтруктураВложений);
				
				Для каждого Вложение Из СтруктураВложений Цикл
					
					НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
					НоваяСтрока.ИмяФайла = Вложение.Ключ;
					НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
					НоваяСтрока.Картинка = Вложение.Значение;
					
				КонецЦикла;
				
				ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстHTML);
			Иначе
				Если ПустаяСтрока(ИмяФайлаШаблона) Тогда Возврат; КонецЕсли;
				
				ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
				ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ТекстHTML);
				
				СтруктураВложений	= Новый Структура;
				ДокументHTML		= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
				
				Для каждого Картинка Из ДокументHTML.Картинки Цикл
					АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
					
					ПолныйПутьККартинке = СтрЗаменить(АтрибутИсточникКартинки.Значение,"/","\");
					ФайлКартинки = Новый Файл(ПолныйПутьККартинке);
					
					Если ФайлКартинки.Существует() Тогда
						
						МассивНайденых = ТаблицаСоответствийИменВложенийИдентификаторам.НайтиСтроки(Новый Структура("ИмяФайла",АтрибутИсточникКартинки.Значение));
						Если МассивНайденых.Количество() > 0 Тогда Продолжить; КонецЕсли;
						
						НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
						НоваяСтрока.ИмяФайла = АтрибутИсточникКартинки.Значение;
						НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
						НоваяСтрока.Картинка = Новый Картинка(ПолныйПутьККартинке);
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
				
				Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
				ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
				ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
			КонецЕсли;
			
		ИначеЕсли НЕ ТекущийОбъект.ИзHTMLФайла Тогда
			СтруктураВложений = Новый Структура;
			ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекущийОбъект.ТекстHTML, СтруктураВложений);
			
			ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ТекущийОбъект.ТекстHTML);
			
			Для каждого Вложение Из СтруктураВложений Цикл
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла = Вложение.Ключ;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
				НоваяСтрока.Картинка = Вложение.Значение;
				
			КонецЦикла;
			
			Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
				
				ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстHTML);
				Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
				    ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
				ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ДокументHTMLТекущегоПисьмаПодготовлен Тогда
			
			ТекущийОбъект.ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			ТекущийОбъект.Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(ТекущийОбъект.ТекстHTML);
		КонецЕсли;
		CRM_Объект_ТекстHTML		= ТекущийОбъект.ТекстHTML;
	Иначе
		ТекущийОбъект.ТекстHTML = CRM_Объект_ТекстHTML;
	КонецЕсли;
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ CRM_ЕстьПисьма ИЛИ CRM_ИзмененоСодержаниеРассылки Тогда
		
		Если НЕ ТекущийОбъект.ИзHTMLФайла ИЛИ (ТекущийОбъект.ИзHTMLФайла И ИзмененШаблонHTML) Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			Письмо = ТекущийОбъект.Ссылка;
			
			// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
			ТаблицаВложенийКартинокФорматированногоДокумента = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
			Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
				УдаленныеВложения.Добавить(Вложение.Ссылка);
			КонецЦикла;
			
		КонецЕсли;
		
		// Удалим удаленные вложения
		Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
			ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
			ОбъектВложение.Удалить();
		КонецЦикла;
		
		УдаленныеВложения.Очистить();
			
		Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
			
			ИмяФайлаВложения = "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_") + "." + Вложение.Картинка.Формат();
			
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			ПрисоединенныйФайл = CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			                     Письмо,
			                     АдресКартинкиВоВременномХранилище,
			                     ИмяФайлаВложения,
			                     ДвоичныеДанныеКартинки.Размер());
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
			
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			
			Размер = 0;
			ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
			
			Если СтрокаТаблицыВложений.Расположение = 4 Тогда
				// из временного хранилища
				CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
					Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ИмяФайла, Размер);
				
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 3 Тогда
				// из файла на сервере
				
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 1 Тогда
				
				CRM_УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
					Письмо, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор);
				
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 0 Тогда
				// перезаписать вложение
			КонецЕсли;
			
			СтрокаТаблицыВложений.Расположение = 0;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьВложения();
	Если НЕ ТекущийОбъект.ИзHTMLФайла Тогда
		ТекстПисьма = CRM_Взаимодействия.CRM_ОбработатьТекстHTML(ТекущийОбъект.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
	ИзмененШаблонHTML = Ложь;
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Переносим изменения в ранее созданные письма, если требуется
	// создаем новые письма.
	Если CRM_ПеренестиИзменения Тогда
		ПолучитьНеОтправленныеПисьмаИСкорректировать(Объект.Ссылка, CRM_ИзмененоСодержаниеРассылки, CRM_ИзмененОтправитель, CRM_ИзмененаТема, CRM_ИзмененыВложения);
		Элементы.СписокПисем.Обновить();
	КонецЕсли;
	
	Элементы.Вложения.Обновить();
	
	CRM_НеЗадаватьВопросПередЗаписью = Ложь;
	CRM_ПеренестиИзменения			  = Ложь;
	CRM_ИзмененоСодержаниеРассылки	  = Ложь;
	CRM_ИзмененОтправитель			  = Ложь;
	CRM_ИзмененыВложения			  = Ложь;
	CRM_ИзмененСоставПолучателей	  = Ложь;
	CRM_ИзмененаТема				  = Ложь;
	
	УстановитьСвойстваЭлементовФормы();
	
	УжеЗаписан = Ложь;	
	
	Элементы.Ответственный.ТолькоПросмотр = Истина;
	Элементы.Ответственный.КнопкаВыбора = Ложь;
	
	Если ЗначениеЗаполнено(Взаимодействие) Тогда
		CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") ИЛИ ТипЗнч(НовыйОбъект) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор","#");
	КонецЕсли;	
	СформироватьПредставлениеВложений();	
	
	УстановитьСвойстваЭлементовФормы();
	
	ОбновитьКоличествоУчастников(ЭтотОбъект);	
	
	ПереключательИзHTMLФайлаПриИзменении(Неопределено);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныРассылки") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры") Тогда
		Если Объект.Получатели.Количество() > 0 Тогда
		
			ТекстВопроса = НСтр("ru='Очистить список получателей?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет,,,,);
		
		Иначе
			ОбработкаВыбораЗавершение(КодВозвратаДиалога.ОК, ВыбранноеЗначение)
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Если Объект.ФизЛица.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Очистить список физических лиц?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет,,,,);
		Иначе
			ОбработкаВыбораЗавершение(КодВозвратаДиалога.ОК, ВыбранноеЗначение)
		КонецЕсли;
		
	ИначеЕсли		ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
				Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
				Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		//
		
		Если Объект.СвоиЛица.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Очистить список пользователей?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет,,,,);
		Иначе
			ОбработкаВыбораЗавершение(КодВозвратаДиалога.ОК, ВыбранноеЗначение)
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
		ЗагрузитьИзШаблонаНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;

	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда	
		
		Если Объект.СвоиЛица.Количество() > 0 Тогда
		
			ТекстВопроса = НСтр("ru='Очистить список пользователей?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена,,,,);
		Иначе
			ОбработкаВыбораЗавершение(КодВозвратаДиалога.ОК, ВыбранноеЗначение)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры") Тогда
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.Получатели.Очистить();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.ФизЛица.Очистить();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;				
		КонецЕсли;
		
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли		ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		//
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.СвоиЛица.Очистить();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;								
		КонецЕсли;
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
		ОбработкаВыбораНаСервере(МассивПользователейГрупп);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда	
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.СвоиЛица.Очистить();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;												
		КонецЕсли;
		
		
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
	ОбновитьКоличествоУчастников(ЭтотОбъект);		
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события ПриЧтенииНаСервере.
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииИПриЧтенииНаСервере();
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Функция ОбработатьСтартСделки(Сделка)
	
	Если Сделка.Основание = Объект.Ссылка Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗаписьПартнера" Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
			КонтактСсылка = Параметр;
		ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.Партнеры") Тогда
			КонтактСсылка = Источник;
		Иначе
			КонтактСсылка = Неопределено;
		КонецЕсли;
		
		ОбновитьАдресаКлиенты(КонтактСсылка);
		
	ИначеЕсли ИмяСобытия = "НовоеКонтактноеЛицоЗаписано" Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			КонтактСсылка = Параметр;
		ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			КонтактСсылка = Источник;
		Иначе
			КонтактСсылка = Неопределено;
		КонецЕсли;
		
		ОбновитьАдресаКлиенты(КонтактСсылка);
		
	ИначеЕсли ИмяСобытия = "Запись_Пользователи" Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Пользователи") Тогда
			КонтактСсылка = Параметр;
		ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.Пользователи") Тогда
			КонтактСсылка = Источник;
		Иначе
			КонтактСсылка = Неопределено;
		КонецЕсли;
		
		ОбновитьАдресаПользователи(КонтактСсылка);
		
	ИначеЕсли ИмяСобытия = "ОбновитьКоличествоУчастников" Тогда
		
		ОбновитьКоличествоУчастников(ЭтотОбъект);	
		
	ИначеЕсли ИмяСобытия = "СтартованаСделка" Тогда
		Если ОбработатьСтартСделки(Параметр) Тогда
			НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Если НЕ Настройки["ВсеВложенияПометка"] = Неопределено Тогда
		ВсеВложенияПометка	= Настройки["ВсеВложенияПометка"];
	Иначе
		ВсеВложенияПометка	= Ложь;
	КонецЕсли;
	Элементы.ФормаВсеВложения.Пометка	= ВсеВложенияПометка;
	
	Если НЕ Настройки["ВсегдаПоказыватьВложения"] = Неопределено Тогда
		ВсегдаПоказыватьВложения	= Настройки["ВсегдаПоказыватьВложения"];
	Иначе
		ВсегдаПоказыватьВложения	= Ложь;
	КонецЕсли;
	Элементы.ФормаВсегдаПоказыватьВложения.Пометка	= ВсегдаПоказыватьВложения;	
	Элементы.КоманднаяПанельВложенияСкрытьПанель.Видимость = НЕ ВсегдаПоказыватьВложения;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСвоиЛицаПоГруппеПользователей(ГруппаПользователей)
	Если Не ЗначениеЗаполнено(ГруппаПользователей) Или ТипЗнч(ГруппаПользователей) <> Тип("СправочникСсылка.ГруппыПользователей") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПользователиГруппы = CRM_ОбщегоНазначенияСервер.ПолучитьПользователейГруппы(ГруппаПользователей, Истина);
	Для Каждого ПользовательСсылка Из МассивПользователиГруппы Цикл
		СтрокаПолучатель = Объект.СвоиЛица.Добавить();
		СтрокаПолучатель.Пользователь = ПользовательСсылка;
		ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя");
		АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ПользовательСсылка,ВидыИнформации);
		СтрокаПолучатель.Адрес = АдресЭП;
		СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.Пользователь) + " <" + СтрокаПолучатель.Адрес + ">", "");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбранноеЗначение(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры") Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
			ТекДанные = Объект.Получатели.Добавить();
			ТекДанные.Партнер = ВыбранноеЗначение;
			//стрЗаполнения = ПолучитьСтруктуруЗаполненияСтрокиТЧКлиентов(ВыбранноеЗначение);
			//СтрокаПолучатель.КонтактноеЛицо = стрЗаполнения.КонтактноеЛицо;
			//СтрокаПолучатель.Адрес = стрЗаполнения.Адрес;
			ТекДанные.КонтактноеЛицо = ВернутьКЛПартнера(ТекДанные.Партнер);
			СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо));
			Если СписокАдресов.Количество() > 0 Тогда
				Адрес = СписокАдресов[0].Значение;
				Если НЕ Адрес.Количество() = 0 Тогда
					ТекДанные.Адрес					= Адрес.Представление;
					ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Партнер,Строка(ТекДанные.Партнер),Строка(ТекДанные.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
					ТекДанные.Принадлежность = (Адрес.Объект = ТекДанные.КонтактноеЛицо);
				Иначе
					ТекДанные.Адрес					= "";
					ТекДанные.ПредставлениеАдреса	= "";
					ТекДанные.Принадлежность = Ложь;
				КонецЕсли;
			Иначе
				ТекДанные.Адрес					= "";
				ТекДанные.ПредставлениеАдреса	= "";
				ТекДанные.Принадлежность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли		ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
				Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
				Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		//
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
		Для Каждого ВыбранныйПользовательГруппа Из МассивПользователейГрупп Цикл
			Если ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.Пользователи") Тогда
				СтрокаПолучатель = Объект.СвоиЛица.Добавить();
				СтрокаПолучатель.Пользователь = ВыбранныйПользовательГруппа;
				ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя");
				АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыбранныйПользовательГруппа,ВидыИнформации);
				СтрокаПолучатель.Адрес = АдресЭП;
				СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.Пользователь) + " <" + СтрокаПолучатель.Адрес + ">", "");
			ИначеЕсли ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ДобавитьСвоиЛицаПоГруппеПользователей(ВыбранныйПользовательГруппа);
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		СтрокаПолучатель = Объект.ФизЛица.Добавить();
		СтрокаПолучатель.ФизЛицо = ВыбранноеЗначение;
		ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
		АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыбранноеЗначение,ВидыИнформации);
		СтрокаПолучатель.Адрес = АдресЭП;
		СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.ФизЛицо) + " <" + СтрокаПолучатель.Адрес + ">", "");
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_СпискиРассылок") И Элемент.Имя = "ФизЛица" Тогда	
		
		Если Объект.ФизЛица.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Очистить список физических лиц?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВыбранноеЗначениеЗавершение", ЭтотОбъект, ВыбранноеЗначение);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена,,,,);
			Возврат;
		КонецЕсли;
		
		ФизЛицаЗаполнитьПоСпискуРассылкиНаСервере(ВыбранноеЗначение);		
		
	КонецЕсли;
	
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбранноеЗначениеЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ФизЛица.Очистить();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;												
	КонецЕсли;
	ФизЛицаЗаполнитьПоСпискуРассылкиНаСервере(ВыбранноеЗначение);		
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресаКлиенты(КонтактСсылка = Неопределено)
	Если ЗначениеЗаполнено(КонтактСсылка) Тогда
		Если ТипЗнч(КонтактСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
			ИтераторСтрок = Объект.Получатели.НайтиСтроки(Новый Структура("Партнер", КонтактСсылка));
		ИначеЕсли ТипЗнч(КонтактСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ИтераторСтрок = Объект.Получатели.НайтиСтроки(Новый Структура("КонтактноеЛицо", КонтактСсылка));
		Иначе
			ИтераторСтрок = Объект.Получатели;
		КонецЕсли;
	Иначе
		ИтераторСтрок = Объект.Получатели;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ИтераторСтрок Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Адрес) И ЗначениеЗаполнено(СтрокаТаблицы.Партнер) Тогда
			СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",СтрокаТаблицы.Партнер,СтрокаТаблицы.КонтактноеЛицо));
			Если СписокАдресов.Количество() > 0 Тогда
				Адрес = СписокАдресов[0].Значение;
				Если НЕ Адрес.Количество() = 0 Тогда
					СтрокаТаблицы.Адрес					= Адрес.Представление;
					СтрокаТаблицы.ПредставлениеАдреса	= ?(Адрес.Объект = СтрокаТаблицы.Партнер,Строка(СтрокаТаблицы.Партнер),Строка(СтрокаТаблицы.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
					СтрокаТаблицы.Принадлежность		= (Адрес.Объект = СтрокаТаблицы.КонтактноеЛицо);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресаПользователи(КонтактСсылка = Неопределено)
	Если ЗначениеЗаполнено(КонтактСсылка) Тогда
		Если ТипЗнч(КонтактСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
			ИтераторСтрок = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Пользователь", КонтактСсылка));
		Иначе
			ИтераторСтрок = Объект.СвоиЛица;
		КонецЕсли;
	Иначе
		ИтераторСтрок = Объект.СвоиЛица;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ИтераторСтрок Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Адрес) И ЗначениеЗаполнено(СтрокаТаблицы.Пользователь) Тогда
			СписокАдресов = СформироватьСписокАдресов(СтрокаТаблицы.Пользователь);
			Если СписокАдресов.Количество() > 0 Тогда
				Адрес = СписокАдресов[0].Значение;
				Если НЕ Адрес.Количество() = 0 Тогда
					СтрокаТаблицы.Адрес					= Адрес.Представление;
					СтрокаТаблицы.ПредставлениеАдреса	= Строка(СтрокаТаблицы.Пользователь) + " <" + Адрес.Представление + ">";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресаФизЛица(КонтактСсылка = Неопределено)
	Если ЗначениеЗаполнено(КонтактСсылка) Тогда
		Если ТипЗнч(КонтактСсылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ИтераторСтрок = Объект.ФизЛица.НайтиСтроки(Новый Структура("ФизЛицо", КонтактСсылка));
		Иначе
			ИтераторСтрок = Объект.ФизЛица;
		КонецЕсли;
	Иначе
		ИтераторСтрок = Объект.ФизЛица;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ИтераторСтрок Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Адрес) И ЗначениеЗаполнено(СтрокаТаблицы.ФизЛицо) Тогда
			СписокАдресов = СформироватьСписокАдресов(СтрокаТаблицы.ФизЛицо);
			Если СписокАдресов.Количество() > 0 Тогда
				Адрес = СписокАдресов[0].Значение;
				Если НЕ Адрес.Количество() = 0 Тогда
					СтрокаТаблицы.Адрес					= Адрес.Представление;
					СтрокаТаблицы.ПредставлениеАдреса	= Строка(СтрокаТаблицы.ФизЛицо) + " <" + Адрес.Представление + ">";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыборРассылкиЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_СпискиРассылок") Тогда
		
		СвоиЛицаЗаполнитьПоСпискуРассылкиНаСервере(ВыбранноеЗначение);	
		ФизЛицаЗаполнитьПоСпискуРассылкиНаСервере(ВыбранноеЗначение);	
		ПолучателиЗаполнитьПоСпискуРассылкиНаСервере(ВыбранноеЗначение);	
		
	КонецЕсли;
	
КонецПроцедуры	

#Область ПроцедурыОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВложенияПредставление = НСтр("ru='Добавить файл...'") Тогда
		ДобавитьВложение();		
	КонецЕсли;			
	Элементы.Вложения.Видимость = НЕ Элементы.Вложения.Видимость;
	СформироватьПредставлениеВложений();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонАвтотекста(Команда)
	
	ТекстДок = СокрЛП(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст());
	ТекстHTML = "";
	ВложенияHTML = Новый Структура();
	ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекстHTML, ВложенияHTML);
	
	Если НЕ Объект.ИзHTMLФайла И (ЗначениеЗаполнено(ТекстДок) Или (ТипЗнч(ВложенияHTML) = Тип("Структура") И ВложенияHTML.Количество() > 0)
	 Или (Вложения.Количество() > 0)) Тогда
	 
		КнопкиДиалогаВопрос = Новый СписокЗначений;
		
		КнопкиДиалогаВопрос.Добавить("ЗаменитьТекстИВложения", "Заменить");
		КнопкиДиалогаВопрос.Добавить("ДополнитьТекстИВложения", "Дополнить");
		КнопкиДиалогаВопрос.Добавить("Отмена", "Отмена");
		
		ТекстВопроса = НСтр("ru = 'Как поступить с текущим текстом и вложениями?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыбратьШаблонОбработатьРезультатВопроса", ЭтотОбъект), ТекстВопроса, КнопкиДиалогаВопрос,,,"Заполнение из шаблона");

	Иначе
		
		ВыбратьШаблонАвтотекстаПродолжение(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонОбработатьРезультатВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "ЗаменитьТекстИВложения" Тогда
		
		ВыбратьШаблонАвтотекстаПродолжение(Ложь);
	
	ИначеЕсли РезультатВопроса = "ДополнитьТекстИВложения" Тогда
		
		ВыбратьШаблонАвтотекстаПродолжение();
		
	КонецЕсли;	
	
КонецПроцедуры// ВыбратьШаблонОбработатьРезультатВопроса(РезультатВопроса, ДополнительныеПараметры)	

&НаКлиенте
Процедура ВыбратьШаблонАвтотекстаПродолжение(ДополнитьТекстИВложения = Истина)
	
	ДополнительныеПараметры = Новый Структура("ДополнитьТекстИВложения", ДополнитьТекстИВложения);
	
	ОписаниеОповещенияФормаВыбора = Новый ОписаниеОповещения("ВыбратьШаблонАвтотекстаОкончание", ЭтотОбъект, ДополнительныеПараметры);
	
	Отбор = Новый Структура("ШаблонОповещения", Ложь);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.CRM_ШаблоныРассылки.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещенияФормаВыбора);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьТемуШаблона(Шаблон)
	
	Возврат Шаблон.Тема;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьШаблонАвтотекстаОкончание(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если НЕ (РезультатВыбора = Неопределено) Тогда
		
		Шаблон = РезультатВыбора;
		
		Шаблон_Тема = ВернутьТемуШаблона(Шаблон);
		Если ЗначениеЗаполнено(Шаблон_Тема) Тогда
			
			Объект.Тема = Шаблон_Тема;
			
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ДополнитьТекстИВложения") Тогда
			
			ДополнитьТекстИВложения = ДополнительныеПараметры.ДополнитьТекстИВложения;
			
		Иначе
			
			ДополнитьТекстИВложения = Ложь;			
		
		КонецЕсли;
		
		ЗаполнитьПоШаблону(ДополнитьТекстИВложения);
		
		Шаблон = РезультатВыбора;
		
		Шаблон_Тема = ВернутьТемуШаблона(Шаблон);
		Если ЗначениеЗаполнено(Шаблон_Тема) Тогда
			
			Объект.Тема = Шаблон_Тема;
			
		КонецЕсли;
		
		УстановитьСвойстваЭлементовФормы();
		
		Элементы.Вложения.Видимость = (Вложения.Количество() > 0);
		СформироватьПредставлениеВложений();
		
		Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаСодержания;
		
		Элементы.ПанельФорматированныйДокументТекстHTML.ТекущаяСтраница = ?(Объект.ИзHTMLФайла,Элементы.СтраницаHTML,Элементы.СтраницаФорматированныйДокумент);
		Если НЕ Объект.ИзHTMLФайла Тогда
			ТекущийЭлемент = Элементы.ТекстПисьмаФорматированныйДокумент;
		Иначе
			ТекущийЭлемент = Элементы.ТекстПисьма;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Партнеры

&НаКлиенте
Процедура ПолучателиПартнерПриИзменении(Элемент)
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Партнер) И ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
		ТекДанные.КонтактноеЛицо = ВернутьКЛПартнера(ТекДанные.Партнер);
		СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо));
		Если СписокАдресов.Количество() > 0 Тогда
			Адрес = СписокАдресов[0].Значение;
			Если НЕ Адрес.Количество() = 0 Тогда
				ТекДанные.Адрес					= Адрес.Представление;
				ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Партнер,Строка(ТекДанные.Партнер),Строка(ТекДанные.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
				ТекДанные.Принадлежность = (Адрес.Объект = ТекДанные.КонтактноеЛицо);
			Иначе
				ТекДанные.Адрес					= "";
				ТекДанные.ПредставлениеАдреса	= "";
				ТекДанные.Принадлежность = Ложь;
			КонецЕсли;
		Иначе
			ТекДанные.Адрес					= "";
			ТекДанные.ПредставлениеАдреса	= "";
			ТекДанные.Принадлежность = Ложь;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекДанные.Партнер) И ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
		СписокАдресов = СформироватьСписокАдресов(ТекДанные.Партнер);
		Если СписокАдресов.Количество() > 0 Тогда
			Адрес = СписокАдресов[0].Значение;
			Если НЕ Адрес.Количество() = 0 Тогда
				ТекДанные.Адрес					= Адрес.Представление;
				ТекДанные.ПредставлениеАдреса	= Строка(ТекДанные.Партнер) + " <" + Адрес.Представление + ">";
				ТекДанные.Принадлежность 		= Истина;
			Иначе
				ТекДанные.Адрес					= "";
				ТекДанные.ПредставлениеАдреса	= "";
				ТекДанные.Принадлежность = Ложь;
			КонецЕсли;
		Иначе
			ТекДанные.Адрес					= "";
			ТекДанные.ПредставлениеАдреса	= "";
			ТекДанные.Принадлежность = Ложь;
		КонецЕсли;		
	Иначе
		ТекДанные.Адрес					= "";
		ТекДанные.ПредставлениеАдреса	= "";
		ТекДанные.Принадлежность = Ложь;
	КонецЕсли;
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененСоставПолучателей = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПартнерОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ПолучателиПартнер.ВыбиратьТип = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПартнерНачалоВыбораПослеВыбораТипа(ЭлементСписка, Контекст) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементСписка.Значение = 1 Тогда
		НовоеОповещение = Новый ОписаниеОповещения("ПолучателиПартнерВыборИзПартнеров", ЭтотОбъект);
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора",,,,,,НовоеОповещение);
	ИначеЕсли ЭлементСписка.Значение = 2 Тогда
		НовоеОповещение = Новый ОписаниеОповещения("ПолучателиПартнерВыборИзПотенциальныхКлиентов", ЭтотОбъект);
		ОткрытьФорму("Справочник.CRM_ПотенциальныеКлиенты.ФормаВыбора",,,,,,НовоеОповещение);
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПартнерВыборИзПартнеров(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Получатели.ТекущиеДанные.Партнер = Результат;	
	ПолучателиПартнерПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПартнерВыборИзПотенциальныхКлиентов(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Получатели.ТекущиеДанные.Партнер = Результат;	
	ПолучателиПартнерПриИзменении(Неопределено);
КонецПроцедуры


&НаКлиенте
Процедура ПолучателиКонтактноеЛицоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Партнер) Тогда
		СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо));
		Если СписокАдресов.Количество() > 0 Тогда
			Адрес = СписокАдресов[0].Значение;
			Если НЕ Адрес.Количество() = 0 Тогда
				ТекДанные.Адрес					= Адрес.Представление;
				ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Партнер,Строка(ТекДанные.Партнер),Строка(ТекДанные.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
				ТекДанные.Принадлежность = (Адрес.Объект = ТекДанные.КонтактноеЛицо);
			Иначе
				ТекДанные.Адрес					= "";
				ТекДанные.ПредставлениеАдреса	= "";
				ТекДанные.Принадлежность = Ложь;
			КонецЕсли;
		Иначе
			ТекДанные.Адрес					= "";
			ТекДанные.ПредставлениеАдреса	= "";
			ТекДанные.Принадлежность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененСоставПолучателей = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиАдресЗавершениеВыбора", ЭтотОбъект, ТекДанные);
	СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо));
	СписокАдресов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите адрес");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресЗавершениеВыбора(ЭлементСписка, ТекДанные) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда Возврат; КонецЕсли;
	
	Адрес = ЭлементСписка.Значение;
	Если Не Адрес.Количество() = 0 Тогда
		ТекДанные.Адрес = Адрес.Представление;
		ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Партнер,Строка(ТекДанные.Партнер),Строка(ТекДанные.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
		ТекДанные.Принадлежность = (Адрес.Объект = ТекДанные.КонтактноеЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	ТекДанные.ПредставлениеАдреса	= Строка(ТекДанные.Партнер) + " <" + Текст + ">";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСегменту(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Получатели.Количество() > 0));
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоСегментуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_РассылкаЭлектронныхПисем.Форма.ФормаВыборСегмента", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСегментуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ (Результат = Неопределено) Тогда
		Сегмент							= Результат.Сегмент;
		ВидКонтактнойИнформации			= Результат.ВидКонтактнойИнформации;
		НеЗаполнятьСПустымиАдресами		= Результат.НеЗаполнятьСПустымиАдресами;
		ТолькоОсновныеКонтактныеЛица	= Результат.ТолькоОсновныеКонтактныеЛица;
		Если Результат.ОчищатьТЧ Тогда
			Объект.Получатели.Очистить();
		КонецЕсли;
		ЗаполнитьТЧПоСегменту();
		Модифицированность = Истина;
		ОбновитьКоличествоУчастников(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусОтправленныхПисем(Команда)
	ОбновитьСтатусОтправленныхПисемНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРезультатамОтчета(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Получатели.Количество() > 0));
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоРезультатамОтчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_РассылкаЭлектронныхПисем.Форма.ФормаВыбораРезультатаОтчета", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРезультатамОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ (Результат = Неопределено) Тогда
		ВидКонтактнойИнформации			= Результат.ВидКонтактнойИнформации;
		НеЗаполнятьСПустымиАдресами		= Результат.НеЗаполнятьСПустымиАдресами;
		Если Результат.ОчищатьТЧ Тогда
			Объект.Получатели.Очистить();
		КонецЕсли;
		ЗаполнитьТЧПоРезультатуОтчета(Результат.СписокСсылок);
		Модифицированность = Истина;
		ОбновитьКоличествоУчастников(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиЗаполнитьПоСпискуРассылки(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиЗаполнитьПоСпискуРассылкиПродолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.CRM_СпискиРассылок.ФормаВыбора",, ЭтотОбъект,,,, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиЗаполнитьПоСпискуРассылкиПродолжение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если Объект.Получатели.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Очистить список получателей?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолучателиЗаполнитьПоСпискуРассылкиЗавершение", ЭтотОбъект, ВыбранноеЗначение);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет,,,,);
		Иначе
			ПолучателиЗаполнитьПоСпискуРассылкиЗавершение(КодВозвратаДиалога.ОК, ВыбранноеЗначение)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиЗаполнитьПоСпискуРассылкиЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Получатели.Очистить();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;												
	КонецЕсли;
	
	ПолучателиЗаполнитьПоСпискуРассылкиНаСервере(ВыбранноеЗначение);
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМаркетинговойКампании(Команда)
	НовоеОповещение = Новый ОписаниеОповещения("ЗаполнитьПоМаркетинговойКампанииЗавершение", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ПараметрыФормы = Новый Структура("ВыборИзТелемаркетинга", Истина);
	ОткрытьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы,,,,,НовоеОповещение,РежимОткрытия); 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМаркетинговойКампанииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) Тогда
		Если Объект.Получатели.Количество() > 0 Тогда
			ТекстВопроса = Нстр("ru = 'Табличная часть содержит записи. Заменить или дополнить?'");
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(1, Нстр("ru = 'Заменить'"));
			КнопкиВопроса.Добавить(2, Нстр("ru = 'Дополнить'"));
			КнопкиВопроса.Добавить(0, Нстр("ru = 'Отмена'"));	
			ПараметрыОповещения = Новый Структура("Кампания", Результат);
			НовоеОповещение = Новый ОписаниеОповещения("ЗаполнениеПоМаркетинговойКампанииПослеВопроса", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВопрос(НовоеОповещение,ТекстВопроса, КнопкиВопроса);
		Иначе
			ЗаполнениеПоМаркетинговойКампании(Результат);
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнениеПоМаркетинговойКампанииПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = 0 Тогда
		Возврат;
	ИначеЕсли Результат = 1 Тогда
		Объект.Получатели.Очистить();
		ЗаполнениеПоМаркетинговойКампании(ДополнительныеПараметры.Кампания);		
	ИначеЕсли Результат = 2 Тогда
		ЗаполнениеПоМаркетинговойКампании(ДополнительныеПараметры.Кампания);
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПоМаркетинговойКампании(Кампания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиПервичногоИнтереса.Партнер
	|ИЗ
	|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
	|ГДЕ
	|	ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса = &Кампания";
	
	Запрос.УстановитьПараметр("Кампания", Кампания);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партнер");
	
	Для Каждого СтрокаМассива Из Результат Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("СправочникСсылка.Партнеры") Тогда
			НоваяСтрока = Объект.Получатели.Добавить();
			НоваяСтрока.Партнер = СтрокаМассива;
			НоваяСтрока.КонтактноеЛицо = ВернутьКЛПартнера(СтрокаМассива);
			СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",НоваяСтрока.Партнер,НоваяСтрока.КонтактноеЛицо));
			Если СписокАдресов.Количество() > 0 Тогда
				НоваяСтрока.Адрес	= СписокАдресов[0].Значение.Представление;
				НоваяСтрока.ПредставлениеАдреса	= ?(СписокАдресов[0].Значение.Объект = НоваяСтрока.Партнер,Строка(НоваяСтрока.Партнер),Строка(НоваяСтрока.КонтактноеЛицо)) + " <" + СписокАдресов[0].Значение.Представление + ">";				
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаМассива) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда			
			НоваяСтрока = Объект.Получатели.Добавить();
			НоваяСтрока.Партнер = ?(ЗначениеЗаполнено(СтрокаМассива.Партнер), СтрокаМассива.Партнер, СтрокаМассива);
			Если ЗначениеЗаполнено(СтрокаМассива.Партнер) Тогда
				НоваяСтрока.КонтактноеЛицо = ВернутьКЛПартнера(НоваяСтрока.Партнер);				
			КонецЕсли;				
			СписокАдресов = СформироватьСписокАдресов(НоваяСтрока.Партнер);			
			Если СписокАдресов.Количество() > 0 Тогда
				НоваяСтрока.Адрес				= СписокАдресов[0].Значение.Представление;
				НоваяСтрока.ПредставлениеАдреса	= Строка(НоваяСтрока.Партнер) + " <" + СписокАдресов[0].Значение.Представление + ">";				
			КонецЕсли;			
		КонецЕсли;
		Модифицированность = Истина;
	КонецЦикла;	
	
	Если Результат.Количество() > 0 Тогда
		УдалитьДублиСтрок();							
	КонецЕсли;		
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузкаКлиентовИзФайла(Команда)
	НовоеОповещение = Новый ОписаниеОповещения("ЗагрузкаКлиентовИзФайлаЗавершение", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;	
	ПараметрыФормы = Новый Структура("ВидСправочника", "Партнеры");
	ПараметрыФормы.Вставить("ЗагрузкаВДокумент", "РассылкаПисем");
	ОткрытьФорму("Обработка.CRM_ЗагрузкаСправочниковИзФайла.Форма", ПараметрыФормы,,,,, НовоеОповещение, РежимОткрытия);
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузкаКлиентовИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) И Результат.Количество() > 0 Тогда
		Если Объект.Получатели.Количество() > 0 Тогда
			ТекстВопроса = Нстр("ru = 'Табличная часть содержит записи. Заменить или дополнить?'");
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(1, Нстр("ru = 'Заменить'"));
			КнопкиВопроса.Добавить(2, Нстр("ru = 'Дополнить'"));
			КнопкиВопроса.Добавить(0, Нстр("ru = 'Отмена'"));	
			ПараметрыОповещения = Новый Структура("МассивЭлементов", Результат);
			НовоеОповещение = Новый ОписаниеОповещения("ЗагрузкаКлиентовИзФайлаПослеВопроса", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВопрос(НовоеОповещение,ТекстВопроса, КнопкиВопроса);
		Иначе
			ЗагрузкаКлиентовИзФайлаНаСервере(Результат);
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузкаКлиентовИзФайлаПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = 0 Тогда
		Возврат;
	ИначеЕсли Результат = 1 Тогда
		Объект.Получатели.Очистить();
		ЗагрузкаКлиентовИзФайлаНаСервере(ДополнительныеПараметры.МассивЭлементов);		
	ИначеЕсли Результат = 2 Тогда
		ЗагрузкаКлиентовИзФайлаНаСервере(ДополнительныеПараметры.МассивЭлементов);
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаКлиентовИзФайлаНаСервере(МассивЭлементов)
	
	Для Каждого ЭлементМассива Из МассивЭлементов Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			Если ЗначениеЗаполнено(ЭлементМассива.Клиент) Тогда
				НоваяСтрока = Объект.Получатели.Добавить();
				НоваяСтрока.Партнер = ЭлементМассива.Клиент;
				НоваяСтрока.КонтактноеЛицо = ВернутьКЛПартнера(НоваяСтрока.Партнер);
				НоваяСтрока.Адрес 				= СокрЛП(ЭлементМассива.Почта);
				НоваяСтрока.ПредставлениеАдреса = СокрЛП(ЭлементМассива.Почта);				
			ИначеЕсли ЗначениеЗаполнено(ЭлементМассива.Наименование) Тогда				
				НоваяСтрока = Объект.Получатели.Добавить();
				НоваяСтрока.ПартнерСтрокой = ЭлементМассива.Наименование;
				НоваяСтрока.Адрес = СокрЛП(ЭлементМассива.Почта);
				НоваяСтрока.ПредставлениеАдреса = СокрЛП(ЭлементМассива.Почта);				
			КонецЕсли;				
		КонецЕсли;			
	КонецЦикла;		
	
	Если МассивЭлементов.Количество() > 0 Тогда
		УдалитьДублиСтрок();					
	КонецЕсли;		
	
КонецПроцедуры	

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(ИмяТаблицы = "Получатели")
	Если Объект[ИмяТаблицы].Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТабличнуюЧастьЗавершение", ЭтотОбъект, ИмяТаблицы);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Табличная часть содержит записи. Продолжить?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧастьЗавершение(Ответ, ИмяТаблицы) Экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ИмяТаблицы].Очистить();
	Модифицированность = Истина;
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧ(Команда)
	
	ОчиститьТабличнуюЧасть();
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаОчиститьТЧ(Команда)
	
	ОчиститьТабличнуюЧасть("СвоиЛица");
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаОчиститьТЧ(Команда)
	
	ОчиститьТабличнуюЧасть("ФизЛица");
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцесс(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Начать "+ВернутьЗаголовокКоманды(Команда.Имя)+""" возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессПродолжение", ЭтотОбъект, Команда.Имя);	
		ПоказатьВопрос(, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		Подключаемый_КомандаНачатьБизнесПроцессПродолжение(Неопределено, Команда.Имя)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессПродолжение(Ответ, КомандаИмя) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Ответ <> КодВозвратаДиалога.ОК Тогда 
			Возврат;
		КонецЕсли;	
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПроверитьДубликатБизнесПроцесса(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Уже создан бизнес-процесс.
			|Создать новый?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессЗавершение", ЭтотОбъект, КомандаИмя);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Неопределено, КомандаИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Ответ, КомандаИмя) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	СтруктураОснования = ПолучитьСтруктуруОснованияБизнесПроцесса(КомандаИмя);
	ПараметрыФормы = Новый Структура("Основание",СтруктураОснования);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГиперссылкаНажатие(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//Если Элемент.Имя = "_ЛичнаяЗадачаСтрокой" Тогда
	//	ПоказатьЗначение(, ЭтотОбъект._ЛичнаяЗадача);
	//ИначеЕсли Элемент.Имя = "CRM_БизнесПроцессСтрокой" Тогда
	//	ПоказатьЗначение(, ЭтотОбъект._БизнесПроцесс);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОснованияБизнесПроцесса(Знач ИмяКоманды = Неопределено)
	СтруктураРезультат = Новый Структура("Основание,КартаМаршрута,ИспользоватьВИнтересах", Объект.Ссылка, Объект.Проект.CRM_КартаМаршрута, Объект.Проект.CRM_КартаМаршрута.ИспользоватьВИнтересах);
	
	Если ИмяКоманды <> Неопределено Тогда
		Если Найти(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_") > 0 Тогда
			ИдентификаторСсылки = Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_", ""), "_", "-"));
			ТочкаМаршрутаСсылка = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(ИдентификаторСсылки);
			Если ЗначениеЗаполнено(ТочкаМаршрутаСсылка) Тогда
				СтруктураРезультат.Вставить("ТочкаСтарта", ТочкаМаршрутаСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	
	Форма.Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность = НЕ Форма.ТолькоПросмотр;
	Форма.Элементы.Вложения.Видимость = Ложь;
	
КонецПроцедуры

// Начало

// Получатели

&НаКлиенте
Процедура ПолучателиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		ДобавитьВыбранноеЗначение(Элемент, ЭлементМассива, СтандартнаяОбработка);
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда
		Отказ = Истина;
		НоваяСтрока = Объект.Получатели.Добавить();
		НоваяСтрока.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Элементы.Получатели.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.ПолучателиПартнер.ВыбиратьТип = Ложь;
		Модифицированность = Истина;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПослеУдаления(Элемент)
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

// СвоиЛица

&НаКлиенте
Процедура СвоиЛицаПользовательПриИзменении(Элемент)
	ТекДанные = Элементы.СвоиЛица.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Пользователь) Тогда
		
		СписокАдресов = СформироватьСписокАдресов(ТекДанные.Пользователь);
		Если СписокАдресов.Количество() > 0 Тогда
			Адрес = СписокАдресов[0].Значение;
			Если НЕ Адрес.Количество() = 0 Тогда
				ТекДанные.Адрес					= Адрес.Представление;
				ТекДанные.ПредставлениеАдреса	= Строка(ТекДанные.Пользователь) + " <" + Адрес.Представление + ">";
			Иначе
				ТекДанные.Адрес					= "";
				ТекДанные.ПредставлениеАдреса	= "";
			КонецЕсли;
		Иначе
			ТекДанные.Адрес					= "";
			ТекДанные.ПредставлениеАдреса	= "";
		КонецЕсли;
	Иначе
		ТекДанные.Адрес					= "";
		ТекДанные.ПредставлениеАдреса	= "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элементы.СвоиЛица.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СвоиЛицаАдресЗавершениеВыбора", ЭтотОбъект, ТекДанные);
	СписокАдресов = СформироватьСписокАдресов(ТекДанные.Пользователь);
	СписокАдресов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите адрес");
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаАдресЗавершениеВыбора(ЭлементСписка, ТекДанные) Экспорт
	Если ЭлементСписка = Неопределено Тогда Возврат; КонецЕсли;
	
	Адрес = ЭлементСписка.Значение;
	Если Не Адрес.Количество() = 0 Тогда
		ТекДанные.Адрес = Адрес.Представление;
		ТекДанные.ПредставлениеАдреса	= Строка(ТекДанные.Пользователь) + " <" + Адрес.Представление + ">";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаАдресПриИзменении(Элемент)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаАдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СвоиЛица.ТекущиеДанные;
	ТекДанные.ПредставлениеАдреса	= Строка(ТекДанные.Пользователь) + " <" + Текст + ">";
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаПослеУдаления(Элемент)
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьВыбранноеЗначение(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// Физ. лица

&НаКлиенте
Процедура ФизЛицаФизЛицоПриИзменении(Элемент)
	ТекДанные = Элементы.ФизЛица.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.ФизЛицо) Тогда
		
		СписокАдресов = СформироватьСписокАдресов(ТекДанные.ФизЛицо);
		Если СписокАдресов.Количество() > 0 Тогда
			Адрес = СписокАдресов[0].Значение;
			Если НЕ Адрес.Количество() = 0 Тогда
				ТекДанные.Адрес					= Адрес.Представление;
				ТекДанные.ПредставлениеАдреса	= Строка(ТекДанные.ФизЛицо) + " <" + Адрес.Представление + ">";
			Иначе
				ТекДанные.Адрес					= "";
				ТекДанные.ПредставлениеАдреса	= "";
			КонецЕсли;
		Иначе
			ТекДанные.Адрес					= "";
			ТекДанные.ПредставлениеАдреса	= "";
		КонецЕсли;
	Иначе
		ТекДанные.Адрес					= "";
		ТекДанные.ПредставлениеАдреса	= "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаАдресПриИзменении(Элемент)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элементы.ФизЛица.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ФизЛицаАдресЗавершениеВыбора", ЭтотОбъект, ТекДанные);
	СписокАдресов = СформироватьСписокАдресов(ТекДанные.ФизЛицо);
	СписокАдресов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите адрес");
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаАдресЗавершениеВыбора(ЭлементСписка, ТекДанные) Экспорт
	Если ЭлементСписка = Неопределено Тогда Возврат; КонецЕсли;
	
	Адрес = ЭлементСписка.Значение;
	Если Не Адрес.Количество() = 0 Тогда
		ТекДанные.Адрес = Адрес.Представление;
		ТекДанные.ПредставлениеАдреса	= Строка(ТекДанные.ФизЛицо) + " <" + Адрес.Представление + ">";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаАдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ФизЛица.ТекущиеДанные;
	ТекДанные.ПредставлениеАдреса	= Строка(ТекДанные.ФизЛицо) + " <" + Текст + ">";
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьВыбранноеЗначение(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаПослеУдаления(Элемент)
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

 // Конец
 
 // ДатаНачалаВыполненияРассылки
 
 &НаКлиенте
Процедура ДатаНачалаВыполненияРассылкиПриИзменении(Элемент)
	Если Объект.ДатаНачалаВыполненияРассылки>ТекущаяДата() Тогда
		Если Объект.ОтправлятьПисьмаСразу Тогда
			Объект.ОтправлятьПисьмаСразу = Ложь;
		КонецЕсли;
		Элементы.ОтправлятьПисьмаСразу.Доступность = Ложь;
	Иначе
		Элементы.ОтправлятьПисьмаСразу.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

 // Конец

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьВложениеВыполнить();

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	УдалитьВложениеВыполнить();	
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьма()
	
	Если НЕ CRM_ЕстьПисьма Тогда
		Если ((Объект.Получатели.Количество() > 0) ИЛИ (Объект.СвоиЛица.Количество() > 0)
			ИЛИ (Объект.ФизЛица.Количество() > 0)) И ПроверитьАдресаПолучателей() Тогда
			Состояние(НСтр("ru = 'Выполняется формирование электронных писем. Пожалуйста подождите...'"));
			
			Если СформироватьПисьмаНаСервере(Объект.Ссылка, СпособОтправки) Тогда
				
				Состояние(НСтр("ru = 'Формирование электронных писем завершено.'"));
				
				CRM_ЕстьПисьма = Истина;
				Элементы.СписокПисем.Обновить();
				Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаПисем;
				
				Состояние(НСтр("ru = 'Выполняется отправка писем. Пожалуйста подождите...'"));
				ПолучитьНеОтправленныеПисьмаИОтправить();
				CRM_Отправляли = Истина;
			Иначе
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		ИначеЕсли Объект.Получатели.Количество() = 0 Тогда
			ЕстьОшибки = Истина;
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не указаны получатели!'");
			Сообщение.Сообщить();
		Иначе
			ЕстьОшибки = Истина;
		КонецЕсли;
	Иначе
		Состояние(НСтр("ru = 'Выполняется отправка писем. Пожалуйста подождите...'"));
		ПолучитьНеОтправленныеПисьмаИОтправить();
		Элементы.СписокПисем.Обновить();
		CRM_Отправляли = Истина;
	КонецЕсли;
	
	Элементы.СписокПисем.Обновить();
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИЗакрыть(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ОтправитьПисьма();
	
	Если НЕ ЕстьОшибки Тогда
		Закрыть();
	Иначе
		ЕстьОшибки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ОтправитьПисьма();
	
	Если НЕ ЕстьОшибки Тогда
		Состояние(НСтр("ru = 'Отправка электронных писем завершена'"));
	Иначе
		ЕстьОшибки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтправителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляОтправки(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'В данной учётной записи отключена отправка писем!'"));
		СтандартнаяОбработка = Ложь;				
		Возврат;
	КонецЕсли;	
	
	Если Объект.УчетнаяЗапись <> ВыбранноеЗначение Тогда
		ИзменитьПодпись(Объект.УчетнаяЗапись, ВыбранноеЗначение);
	КонецЕсли;
	
	Объект.УчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЭлементСписка <> Неопределено Тогда
		СтандартнаяОбработка			= Ложь;
		Объект.ОтправительПредставление	= ЭлементСписка.Представление;
		Модифицированность		= Истина;
		Если CRM_ЕстьПисьма Тогда
			CRM_ИзмененОтправитель	= Истина;
			Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
			УстановитьСвойстваЭлементовФормы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Копирование;
	
	Если Не Отказ Тогда
		// Стандартная обработка нас не устраивает, надо передать параметры.
		
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАдреса(Команда)
	
	ПроверитьАдресаПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКонтактыБезАдреса(Команда)
	
	УдалитьКонтактыБезАдреса();
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаОчиститьКонтактыБезАдреса(Команда)
	
	УдалитьКонтактыБезАдреса("СвоиЛица");
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаОчиститьКонтактыБезАдреса(Команда)
	
	УдалитьКонтактыБезАдреса("ФизЛица");
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОдинаковыеСтроки(Команда)
	
	УдалитьКонтактыСОдинаковымиАдресами();
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаУдалитьОдинаковыеСтроки(Команда)
	
	УдалитьКонтактыСОдинаковымиАдресами("СвоиЛица");
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаУдалитьОдинаковыеСтроки(Команда)
	
	УдалитьКонтактыСОдинаковымиАдресами("ФизЛица");
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьОдинаковыеСтроки(Команда)
	
	ВыделитьКонтактыСОдинаковымиАдресами();
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаВыделитьОдинаковыеСтроки(Команда)
	
	ВыделитьКонтактыСОдинаковымиАдресами("СвоиЛица");
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаВыделитьОдинаковыеСтроки(Команда)
	
	ВыделитьКонтактыСОдинаковымиАдресами("ФизЛица");
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Ложь);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	Если Элементы.Панель.ТекущаяСтраница.Имя = "СтраницаПолучателей" Тогда
		
		ПараметрыФормы.Вставить("МножественныйВыбор",Истина);
		ПараметрыФормы.Вставить("ПрограммноеОткрытие",Истина);	
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора",ПараметрыФормы,Элементы.Получатели,,);
		
	ИначеЕсли Элементы.Панель.ТекущаяСтраница.Имя = "СтраницаСвоиЛица" Тогда
		
		Если ИспользоватьГруппыПользователей Тогда
			ПараметрыФормы.Вставить("ВыборГруппПользователей",	Истина);
			ПараметрыФормы.Вставить("ВыборГруппИЭлементов",		ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
		КонецЕсли;
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаСписка", ПараметрыФормы, Элементы.СвоиЛица, , );
		
	ИначеЕсли Элементы.Панель.ТекущаяСтраница.Имя = "СтраницаФизЛиц" Тогда
		
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора",ПараметрыФормы,Элементы.ФизЛица,,);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиСПустымиАдресамиКлиенты(Команда)
	ОбновитьАдресаКлиенты();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиСПустымиАдресамиПользователи(Команда)
	ОбновитьАдресаПользователи();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиСПустымиАдресамиФизЛица(Команда)
	ОбновитьАдресаФизЛица();
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПодразделению(Команда)
	
	ПодразделенияСУчетомИерархии = Ложь;
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);		
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, ,);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПодразделениюВложенные(Команда)
	
	ПодразделенияСУчетомИерархии = Истина;
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);		
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, ,);	
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКомандПодключаемыхОтчетовИОбработок

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область РаботаСВложениями

&НаКлиенте
Процедура ДобавитьВложение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеПродолжение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеПродолжение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
		Если ПодключеноРасширениеРаботыСФайлами Тогда	
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			Диалог.МножественныйВыбор = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеЗавершение", ЭтотОбъект);
			НачатьПомещениеФайлов(ОписаниеОповещения, , Диалог, Ложь, УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
		КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеЗавершение(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено Тогда
		
		Для Индекс = 0 По ПомещенныеФайлы.ВГраница() Цикл
			
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПомещенныеФайлы[Индекс].Имя, ?(ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент(),"/", "\"));
			ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
			ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
			РасширениеФайла = ?(ПозицияТочки = 0, "", Прав(ИмяФайла, СтрДлина(ИмяФайла) - ПозицияТочки));
			
			новСтр						= Вложения.Добавить();
			новСтр.Расположение			= 4;
			новСтр.ИмяФайла				= ИмяФайла;
			новСтр.ИмяФайлаНаКомпьютере	= ПомещенныеФайлы[Индекс].Хранение;
			новСтр.ИндексКартинки		= РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеФайла);
			новСтр.Размер				= РазмерФайла(ПомещенныеФайлы[Индекс].Хранение);
			РазмерВложения				= Цел(новСтр.Размер/1024);
			новСтр.РазмерСтрокой   		= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
			новСтр.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		КонецЦикла;
		
		ОбновитьОтображениеДанных();
		CRM_ИзмененоСодержаниеРассылки = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазмерФайла(Хранение)
	Возврат ПолучитьИзВременногоХранилища(Хранение).Размер();
КонецФункции

&НаКлиенте
Процедура ДобавитьВложениеВыполнить()
	
	ДобавитьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить()
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(текДанные.Ссылка, ЭтотОбъект);

	ИначеЕсли текДанные.Расположение = 2 Тогда
			НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер),
				"""" + текДанные.ИмяФайлаНаКомпьютере + """");

	ИначеЕсли текДанные.Расположение = 4 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВложениеВыполнитьПродолжение", ЭтотОбъект, текДанные);
		НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнитьПродолжение(Подключен, текДанные) Экспорт
	
	Если Подключен Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВложениеВыполнитьЗавершение", ЭтотОбъект, текДанные);
		НачатьПолучениеКаталогаВременныхФайлов(ОписаниеОповещения);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнитьЗавершение(ИмяКаталогаВременныхФайлов, текДанные) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВложениеВыполнитьЗавершениеЗапуск", ЭтотОбъект);
	МассивФайлов = Новый Массив;
	ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла;
	ПередаваемыйФайл.Имя = текДанные.ИмяФайла;
	ПередаваемыйФайл.Хранение = текДанные.ИмяФайлаНаКомпьютере;
	МассивФайлов.Добавить(ПередаваемыйФайл);
	НачатьПолучениеФайлов(ОписаниеОповещения, МассивФайлов, ИмяКаталогаВременныхФайлов, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнитьЗавершениеЗапуск(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда Возврат; КонецЕсли;
	Для каждого Файл из ПолученныеФайлы Цикл
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер),
			"""" + Файл.Имя + """");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеВыполнить()
	
	// +CRM
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(текДанные.Ссылка, УникальныйИдентификатор);
	
	ИначеЕсли текДанные.Расположение = 2 Тогда
		
	ИначеЕсли текДанные.Расположение = 4 Тогда
		
		ФайлВложения = Новый Файл(текДанные.ИмяФайла);
		
		РасширениеВложения = ?(ПустаяСтрока(ФайлВложения.Расширение), ФайлВложения.Расширение, Прав(ФайлВложения.Расширение, СтрДлина(ФайлВложения.Расширение)-1));
		
		Если РасширениеВложения = "EML" Тогда
				
			ПоказатьПредупреждение(, НСтр("ru = 'Это вложение не может быть сохранено.'"));
				
			Возврат;
				
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьВложениеПродолжение", ЭтотОбъект, Новый Структура("текДанные, РасширениеВложения", текДанные, РасширениеВложения));
		НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеПродолжение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	Если ПодключеноРасширениеРаботыСФайлами Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьВложениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ДополнительныеПараметры.текДанные.ИмяФайла;
		ВыборФайла.Расширение = ДополнительныеПараметры.РасширениеВложения;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ДополнительныеПараметры.РасширениеВложения, ДополнительныеПараметры.РасширениеВложения);
		
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.текДанные.ИмяФайла, ДополнительныеПараметры.текДанные.ИмяФайлаНаКомпьютере);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ВыборФайла, Ложь);
		
	Иначе
		#Если ВебКлиент Тогда
			ПолучитьФайл(ДополнительныеПараметры.текДанные.ИмяФайлаНаКомпьютере, ДополнительныеПараметры.текДанные.ИмяФайла, Истина);
		#КонецЕсли
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	Если ПолученныеФайлы <> Неопределено Тогда
		Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ПолученныеФайлы[0].Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияСкрытьПанель(Команда)
	ВложенияПредставлениеНажатие(Неопределено, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеВыполнить()

	ДобавитьВложениеВСписокУдаленных();
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		Индекс = Вложения.Индекс(текДанные);
		Вложения.Удалить(Индекс);
		
		ОбновитьОтображениеДанных();
		
		//Если _ЕстьПисьма Тогда
		//	_ИзмененыВложения = Истина;
		//	Объект.ЕстьИзменения = (_ЕстьПисьма И НЕ _Отправляли);
		//	УстановитьСвойстваЭлементовФормы();
		//КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВСписокУдаленных()

	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если (текДанные <> Неопределено) И (текДанные.Расположение = 0) Тогда
		 
		 УдаленныеВложения.Добавить(текДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеВложения(Команда)
	
	Элементы.ФормаВсеВложения.Пометка	= НЕ Элементы.ФормаВсеВложения.Пометка;
	ВсеВложенияПометка					= Элементы.ФормаВсеВложения.Пометка;
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор","#");
	КонецЕсли;
	
	СформироватьПредставлениеВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;    
	ПараметрыПеретаскивания.ДопустимыеДействия  = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Если ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение) = Истина Тогда
		ДобавитьПрисоединенныйФайлПеретаскиванием(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВсегдаПоказыватьВложения(Команда)
	
	Элементы.ФормаВсегдаПоказыватьВложения.Пометка = НЕ Элементы.ФормаВсегдаПоказыватьВложения.Пометка;
	ВсегдаПоказыватьВложения = Элементы.ФормаВсегдаПоказыватьВложения.Пометка;
	Элементы.КоманднаяПанельВложенияСкрытьПанель.Видимость = НЕ ВсегдаПоказыватьВложения;
	
	СформироватьПредставлениеВложений();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗакладкиПоСпискуРассылки(Команда)
	Если Объект.Получатели.Количество() > 0 ИЛИ Объект.СвоиЛица.Количество() > 0 ИЛИ Объект.ФизЛица.Количество() > 0 Тогда
		РежимДиалога = РежимДиалогаВопрос.ДаНетОтмена;
		ТекстВопроса = Нстр("ru = 'Очистить все списки получателей?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗакладкиПоСпискуРассылкиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалога, 0);
	Иначе
		ЗаполнитьЗакладкиПоСпискуРассылкиЗавершение(КодВозвратаДиалога.Нет, Новый Структура);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗакладкиПоСпискуРассылкиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Получатели.Очистить();
		Объект.СвоиЛица.Очистить();
		Объект.ФизЛица.Очистить();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборРассылкиЗавершение", ЭтотОбъект);
	ФормаВыбора = ОткрытьФорму("Справочник.CRM_СпискиРассылок.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗакрытии);	
	
КонецПроцедуры	

#КонецОбласти

#Область РаботаСАвтотекстом

&НаСервере
Процедура ВставитьТэгВФорматированныйДокумент(ИмяКоманды)
	
	МассивСтрок = ТаблицаАвтотекста.НайтиСтроки(Новый Структура("ИмяКоманды",ИмяКоманды));
	Тэг = МассивСтрок[0].Тэг;
	
	ПозицияНачала		= 0;
	ПозицияОкончания	= 0;
	Элементы.ТекстПисьмаФорматированныйДокумент.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
	Начало		= ТекстПисьмаФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ПозицияНачала);
	Окончание	= ТекстПисьмаФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ПозицияОкончания);
	Если НЕ Начало = Окончание Тогда
		ТекстПисьмаФорматированныйДокумент.Удалить(ПозицияНачала, ПозицияОкончания);
		ПозицияОкончания = ТекстПисьмаФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(Начало);
	КонецЕсли;
	ТекстПисьмаФорматированныйДокумент.Вставить(ПозицияОкончания, Тэг);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьТэгВПолеТемы(ИмяКоманды)
	
	МассивСтрок = ТаблицаАвтотекста.НайтиСтроки(Новый Структура("ИмяКоманды",ИмяКоманды));
	Тэг = МассивСтрок[0].Тэг;
	
	Объект.Тема = Объект.Тема + Тэг;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВставитьТэг(Команда)
	
	Если Лев(Команда.Имя,4) = "Тема" Тогда
		ВставитьТэгВПолеТемы(Команда.Имя);
	Иначе
		ВставитьТэгВФорматированныйДокумент(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресПриИзменении(Элемент)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	Иначе
		ТекДанные = Элементы.Получатели.ТекущиеДанные;
		ТекДанные.ПредставлениеАдреса	= ?(ЗначениеЗаполнено(ТекДанные.КонтактноеЛицо),Строка(ТекДанные.КонтактноеЛицо),Строка(ТекДанные.Партнер)) + " <" + ТекДанные.Адрес + ">";
	КонецЕсли;
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененСоставПолучателей = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(ВыбранноеЗначение));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

// Заполнение по группе Партнеров
&НаСервере
Функция ПолучитьПартнеровГруппы(ПартнерГруппа)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ПартнерГруппа);
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	Партнеры.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.Партнеры КАК Партнеры
	                |ГДЕ
	                |	НЕ Партнеры.ПометкаУдаления
	                |	И НЕ Партнеры.ЭтоГруппа";
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Партнеры.ЭтоГруппа", "");
	КонецЕсли;
	Если ПартнерГруппа.ЭтоГруппа Тогда
		Запрос.Текст =  Запрос.Текст + "
    |	И Партнеры.Родитель В ИЕРАРХИИ(&Родитель)";
	Иначе	
		Запрос.Текст =  Запрос.Текст + "
	|	И Партнеры.Родитель = &Родитель";
	КонецЕсли;					
	Запрос.Текст =  Запрос.Текст + "
    |
    |УПОРЯДОЧИТЬ ПО
    |	Партнеры.Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // ()

&НаСервере
Функция ПолучитьФизическихЛицГруппы(ФизЛицоГруппа)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ФизЛицоГруппа);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ФизическиеЛица.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	                |ГДЕ
	                |	НЕ ФизическиеЛица.ПометкаУдаления
	                |	И НЕ ФизическиеЛица.ЭтоГруппа";
	Если ФизЛицоГруппа.ЭтоГруппа Тогда
		Запрос.Текст =  Запрос.Текст + "
    |	И ФизическиеЛица.Родитель В ИЕРАРХИИ(&Родитель)";
	Иначе	
		Запрос.Текст =  Запрос.Текст + "
	|	И ФизическиеЛица.Родитель = &Родитель";
	КонецЕсли;					
	Запрос.Текст =  Запрос.Текст + "
    |
    |УПОРЯДОЧИТЬ ПО
    |	ФизическиеЛица.Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // ()

&НаКлиенте
Процедура ЗаполнитьПоГруппе(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.Партнеры.ФормаВыбораГруппы", ПараметрыФормы, ЭтотОбъект, ,);
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаЗаполнитьПоГруппе(Команда)
	
	Если Не ИспользоватьГруппыПользователей Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Отключена настройка ""Использовать группы пользователей""!'"), 10);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора,ЗакрыватьПриВыборе,ВыборГруппПользователей", Истина, Истина, Истина);
	ОткрытьФорму("Справочник.Пользователи.ФормаСписка", ПараметрыФормы, ЭтотОбъект, ,);
		
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаЗаполнитьПоСпискуРассылки(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("СвоиЛицаЗаполнитьПоСпискуРассылкиПродолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.CRM_СпискиРассылок.ФормаВыбора",, ЭтотОбъект,,,, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаЗаполнитьПоСпискуРассылкиПродолжение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если Объект.СвоиЛица.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Очистить список пользователей?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("СвоиЛицаЗаполнитьПоСпискуРассылкиЗавершение", ЭтотОбъект, ВыбранноеЗначение);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена,,,,);
		Иначе
			СвоиЛицаЗаполнитьПоСпискуРассылкиЗавершение(КодВозвратаДиалога.ОК, ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаЗаполнитьПоСпискуРассылкиЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.СвоиЛица.Очистить();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СвоиЛицаЗаполнитьПоСпискуРассылкиНаСервере(ВыбранноеЗначение);
	ОбновитьКоличествоУчастников(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаЗаполнитьПоГруппе(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбораГруппы", ПараметрыФормы, ЭтотОбъект, ,);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицаЗаполнитьПоСпискуРассылки(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);	
	ОткрытьФорму("Справочник.CRM_СпискиРассылок.ФормаВыбора", ПараметрыФормы, Элементы.ФизЛица);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПользователейПодразделения(Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникПользователи.Ссылка,
	               |	СправочникПользователи.ПометкаУдаления,
	               |	СправочникПользователи.Предопределенный,
	               |	СправочникПользователи.Наименование,
	               |	СправочникПользователи.Подразделение КАК Подразделение
	               |ИЗ
	               |	Справочник.Пользователи КАК СправочникПользователи
	               |ГДЕ
	               |	СправочникПользователи.Подразделение В(&Подразделение)
	               |	И НЕ СправочникПользователи.ПометкаУдаления";	 
	
	Если ПодразделенияСУчетомИерархии Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "В(&Подразделение)", "В ИЕРАРХИИ(&Подразделение)");
	КонецЕсли;		
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры") Тогда
	
		Если ВыбранноеЗначение.ЭтоГруппа 
			ИЛИ (ВыбранноеЗначение = Справочники.Партнеры.ПустаяСсылка()) Тогда
		
			мПартнеры = ПолучитьПартнеровГруппы(ВыбранноеЗначение);
			Для Каждого эПартнер Из мПартнеры Цикл
			
				//стрЗаполнения = ПолучитьСтруктуруЗаполненияСтрокиТЧКлиентов(эПартнер);
				//СтрокаПолучатель				= Объект.Получатели.Добавить();
				//СтрокаПолучатель.Партнер		= эПартнер;
				//СтрокаПолучатель.КонтактноеЛицо	= стрЗаполнения.КонтактноеЛицо;
				//СтрокаПолучатель.Адрес			= стрЗаполнения.Адрес;
				ТекДанные = Объект.Получатели.Добавить();
				ТекДанные.Партнер = эПартнер;
				ТекДанные.КонтактноеЛицо = ВернутьКЛПартнера(ТекДанные.Партнер);
				СписокАдресов = СформироватьСписокАдресов(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо));
				Если СписокАдресов.Количество() > 0 Тогда
					Адрес = СписокАдресов[0].Значение;
					Если НЕ Адрес.Количество() = 0 Тогда
						ТекДанные.Адрес					= Адрес.Представление;
						ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Партнер,Строка(ТекДанные.Партнер),Строка(ТекДанные.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
						ТекДанные.Принадлежность = (Адрес.Объект = ТекДанные.КонтактноеЛицо);
					Иначе
						ТекДанные.Адрес					= "";
						ТекДанные.ПредставлениеАдреса	= "";
						ТекДанные.Принадлежность = Ложь;
					КонецЕсли;
				Иначе
					ТекДанные.Адрес					= "";
					ТекДанные.ПредставлениеАдреса	= "";
					ТекДанные.Принадлежность = Ложь;
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Если ВыбранноеЗначение.ЭтоГруппа 
			ИЛИ (ВыбранноеЗначение = Справочники.ФизическиеЛица.ПустаяСсылка()) Тогда
			//
			
			мФизЛица = ПолучитьФизическихЛицГруппы(ВыбранноеЗначение);
			Для Каждого эФизЛицо Из мФизЛица Цикл
				СтрокаПолучатель = Объект.ФизЛица.Добавить();
				СтрокаПолучатель.ФизЛицо = эФизЛицо;
				ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
				АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(эФизЛицо,ВидыИнформации);
				СтрокаПолучатель.Адрес = АдресЭП;
				СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.ФизЛицо) + " <" + СтрокаПолучатель.Адрес + ">", "");
			КонецЦикла;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	ИначеЕсли		ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
				Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
				Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		//
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		
		Для Каждого ВыбранныйПользовательГруппа Из МассивПользователейГрупп Цикл
			Если ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.Пользователи") Тогда
				СтрокаПолучатель = Объект.СвоиЛица.Добавить();
				СтрокаПолучатель.Пользователь = ВыбранныйПользовательГруппа;
				ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя");
				АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыбранныйПользовательГруппа,ВидыИнформации);
				СтрокаПолучатель.Адрес = АдресЭП;
				СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.Пользователь) + " <" + СтрокаПолучатель.Адрес + ">", "");
			ИначеЕсли ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ДобавитьСвоиЛицаПоГруппеПользователей(ВыбранныйПользовательГруппа);
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Истина;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда		
		
		мПользователи = ПолучитьПользователейПодразделения(ВыбранноеЗначение);
		Для Каждого Пользователь Из мПользователи Цикл
			Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
				СтрокаПолучатель = Объект.СвоиЛица.Добавить();
				СтрокаПолучатель.Пользователь = Пользователь;
				ВидыИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя");
				АдресЭП = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(Пользователь,ВидыИнформации);
				СтрокаПолучатель.Адрес = АдресЭП;
				СтрокаПолучатель.ПредставлениеАдреса = ?(ЗначениеЗаполнено(СтрокаПолучатель.Адрес), Строка(СтрокаПолучатель.Пользователь) + " <" + СтрокаПолучатель.Адрес + ">", "");
			КонецЕсли;				
		КонецЦикла;			
		Модифицированность = Истина;
				
	КонецЕсли;

КонецПроцедуры
 
&НаКлиенте
Процедура ТекстПисьмаФорматированныйДокументПриИзменении(Элемент)
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененоСодержаниеРассылки = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененаТема	= Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеПисьма(Команда)
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПолучитьПисьмаПоставитьПометкуУдаления(Объект.Ссылка);
		Элементы.СписокПисем.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокНеотправленныхПисем(Команда)
	
	ОбновитьСписокНеОтправленныхПисем();
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтправленныеПисьмаПисьмоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НеОтправленныеПисьмаОписаниеОшибкиОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НеОтправленныеПисьмаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеОтправленныеПисьмаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПисьма(Команда)
	
	CRM_НеЗадаватьВопросПередЗаписью = (НЕ Объект.Ссылка.Пустая() И Модифицированность) ИЛИ Объект.ЕстьИзменения;
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность ИЛИ Объект.ЕстьИзменения Тогда
		Записать();
	КонецЕсли;
	
	Если НЕ CRM_ЕстьПисьма И СформироватьПисьмаНаСервере(Объект.Ссылка, СпособОтправки) Тогда
		CRM_ЕстьПисьма = Истина;
	КонецЕсли;
		
	Элементы.СписокПисем.Обновить();
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПолучателейПисем(Элемент)
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененСоставПолучателей = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШаблонов

&НаСервере
Процедура ЗагрузитьИзШаблонаНаСервере(ШаблонОбъект)
	
	ОписаниеРеквизитов = ПолучитьРеквизиты("Объект");
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	CRM_ШаблоныОбъектов.ЗаполнитьПредставлениеОбъекта(ШаблонОбъект,ОбъектЗначение,ОписаниеРеквизитов);
	ЗначениеВДанныеФормы(ОбъектЗначение,Объект);
	ОбновитьКоличествоУчастников(ЭтотОбъект);
	Объект.Шаблон = ШаблонОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзШаблона(Команда)
	
	СсылкаНаОбъект = Объект.Ссылка;
	сПараметры = Новый Структура("Ссылка, Форма", СсылкаНаОбъект, ЭтотОбъект);
	CRM_ШаблоныОбъектовКлиент.ЗагрузитьИзШаблонаНаКлиенте(сПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляВыгрузки()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	ОбъектСтруктура = Новый Структура("ОбъектЗначение", ОбъектЗначение);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектСтруктура, УникальныйИдентификатор);
	
	Возврат Новый Структура("ЗначенияЗаполнения",Новый Структура("Объект,ТипФормы",АдресВХранилище,"ФормаДокумента"));
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыгрузитьВШаблон(Команда)
	
	ОткрытьФорму("Справочник.CRM_ШаблоныОбъектов.ФормаОбъекта",ПолучитьПараметрыДляВыгрузки(),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ВернутьФорматированныйДокументПоШаблону(ПереданныйШаблон)
	
	ТекстШаблонаФорматированныйДокумент	= Новый ФорматированныйДокумент;
	СтруктураВложений					= Новый Структура;
	
	ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(ПереданныйШаблон, ПереданныйШаблон.Текст, СтруктураВложений);
	
	ТекстШаблонаФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
	
	Возврат ТекстШаблонаФорматированныйДокумент;
	
КонецФункции

&НаСервере
Процедура ИзменитьПодпись(ПредыдущаяУчетнаяЗапись, НоваяУчетнаяЗапись)
	
	ПараметрыПредыдущаяУЗПодписьПользователя	= ПолучитьПодписьПользователя(ПредыдущаяУчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь);
	ПараметрыНоваяУЗПодписьПользователя			= ПолучитьПодписьПользователя(НоваяУчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь);
	
	ТекстПисьмо = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
	Если ПустаяСтрока(ТекстПисьмо) Тогда
		
		ТекстПисьмаФорматированныйДокумент = ПараметрыНоваяУЗПодписьПользователя;
		
	Иначе
		Если ПустаяСтрока(ТекстПисьмо) И НЕ ПараметрыНоваяУЗПодписьПользователя = Неопределено Тогда
			
			ТекстПисьмаФорматированныйДокумент = ПараметрыНоваяУЗПодписьПользователя;
			
		Иначе
			Если НЕ ПараметрыПредыдущаяУЗПодписьПользователя = Неопределено Тогда
				ТекстПредыдущаяУЗ = ПараметрыПредыдущаяУЗПодписьПользователя.ПолучитьТекст();
				
				Если СтрЧислоВхождений(ТекстПисьмо, ТекстПредыдущаяУЗ) > 0 Тогда
					
					КоличествоЭлементовСтараяПодпись = ПараметрыПредыдущаяУЗПодписьПользователя.Элементы.Количество();
					КоличествоЭлементовПисьмо        = ТекстПисьмаФорматированныйДокумент.Элементы.Количество();
					
					УдалитьЭлементыСтаройПодписи(ТекстПисьмаФорматированныйДокумент,ПараметрыПредыдущаяУЗПодписьПользователя);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПараметрыНоваяУЗПодписьПользователя = Неопределено Тогда
				ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ТекстПисьмаФорматированныйДокумент, ПараметрыНоваяУЗПодписьПользователя)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СравнитьПараграфы(ПараграфЭталон,ПараграфПисьма)
	
	Если НЕ ПараграфЭталон.Элементы.Количество() = ПараграфПисьма.Элементы.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	Для Инд = 0 По ПараграфЭталон.Элементы.Количество()-1 Цикл
		
		Если НЕ ТипЗнч(ПараграфЭталон.Элементы[Инд]) = ТипЗнч(ПараграфПисьма.Элементы[Инд]) Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
		Если ТипЗнч(ПараграфЭталон.Элементы[Инд]) = Тип("ТекстФорматированногоДокумента") Тогда
			Если НЕ ПараграфЭталон.Элементы[Инд].Текст = ПараграфПисьма.Элементы[Инд].Текст Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ПараграфЭталон.Элементы[Инд]) = Тип("КартинкаФорматированногоДокумента") Тогда
			Если НЕ ПараграфЭталон.Элементы[Инд].Картинка = ПараграфПисьма.Элементы[Инд].Картинка Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УдалитьЭлементыСтаройПодписи(ТекстПисьмаФорматированныйДокумент, СтараяПодпись)
	
	Инд				= -1;
	МассивИнд		= Новый Массив;
	ПодписьИзменили	= Ложь;
	НачалиПоиск		= Ложь;
	Для Каждого ПараграфСтараяПодпись Из СтараяПодпись.Элементы Цикл
		
		Если ПараграфСтараяПодпись.Элементы.Количество() = 1
		И ТипЗнч(ПараграфСтараяПодпись.Элементы[0]) = Тип("ПереводСтрокиФорматированногоДокумента")
		И НЕ НачалиПоиск Тогда
			Продолжить;
		КонецЕсли;
		
		НачалиПоиск = Истина;
		
		ПараграфНайден = Ложь;
		
		ТекущийИндекс = Инд+1;
		Для Ном = ТекущийИндекс По ТекстПисьмаФорматированныйДокумент.Элементы.Количество() - 1 Цикл
			ПараграфТекстПисьма = ТекстПисьмаФорматированныйДокумент.Элементы[Ном];
			
			Если СравнитьПараграфы(ПараграфСтараяПодпись,ПараграфТекстПисьма) Тогда
				
				ПараграфНайден = Истина;
				Если Инд < 0 Тогда
					Инд = ТекстПисьмаФорматированныйДокумент.Элементы.Индекс(ПараграфТекстПисьма);
					МассивИнд.Добавить(Инд);
				ИначеЕсли (ТекстПисьмаФорматированныйДокумент.Элементы.Индекс(ПараграфТекстПисьма) - Инд) > 1 Тогда
					МассивИнд.Очистить();
					ПодписьИзменили = Истина;
					Прервать;
				Иначе
					Инд = ТекстПисьмаФорматированныйДокумент.Элементы.Индекс(ПараграфТекстПисьма);
					МассивИнд.Добавить(Инд);
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПараграфНайден ИЛИ ПодписьИзменили Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Инд = 0 По МассивИнд.Количество()-1 Цикл
		
		ТекстПисьмаФорматированныйДокумент.Элементы.Удалить(МассивИнд[МассивИнд.Количество()-1-Инд]);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ПриемникДокумент, ДобавляемыйДокумент, ПолучатьГраницыВыделения = Ложь)
	
	Если ПриемникДокумент.Элементы.Количество() = 0 Тогда
		
		НовыйПараграф				= ПриемникДокумент.Элементы.Добавить();
		НовыйПараграф.ТипПараграфа	= ТипПараграфа.Обычный;
		НовыйЭлемент				= НовыйПараграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
		НовыйЭлемент				= НовыйПараграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
		
	КонецЕсли;
	
	Если ПолучатьГраницыВыделения Тогда
		ПозицияНачала	= 0;
		ПозицияКонца	= 0;
		Элементы.ТекстПисьмаФорматированныйДокумент.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияКонца);
	Иначе
		ПозицияНачала	= ПриемникДокумент.ПолучитьЗакладкуКонца();
		ПозицияКонца	= ПриемникДокумент.ПолучитьЗакладкуКонца();
	КонецЕсли;
	
	ИндексНовогоПараграфа = 0;
	Кон = ПриемникДокумент.ПолучитьПозициюПоЗакладке(ПозицияКонца);
	
	Для Каждого ЭлементДокумента Из ПриемникДокумент.Элементы Цикл
		
		ПозицияНач = ПриемникДокумент.ПолучитьПозициюПоЗакладке(ЭлементДокумента.ЗакладкаНачала);
		ПозицияКон = ПриемникДокумент.ПолучитьПозициюПоЗакладке(ЭлементДокумента.ЗакладкаКонца);
		
		Если Кон >= ПозицияНач И Кон <= ПозицияКон Тогда
			
			Если Кон = ПозицияНач Тогда
				ИндексНовогоПараграфа = ПриемникДокумент.Элементы.Индекс(ЭлементДокумента);
			ИначеЕсли Кон <= ПозицияКон Тогда
				ИндексНовогоПараграфа = ПриемникДокумент.Элементы.Индекс(ЭлементДокумента)+1;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НужноПереопределитьИндекс = Ложь;
	Если ИндексНовогоПараграфа > 0 И ИндексНовогоПараграфа = ПриемникДокумент.Элементы.Количество() Тогда
		НужноПереопределитьИндекс = Истина;
	КонецЕсли;
	
	Для ИД = 0 По ДобавляемыйДокумент.Элементы.Количество() -1 Цикл
		ЭлементДокумента = ДобавляемыйДокумент.Элементы[(ДобавляемыйДокумент.Элементы.Количество() -1 -ИД)];
		
		Если ТипЗнч(ЭлементДокумента) = Тип("ПараграфФорматированногоДокумента") Тогда
			
			Если ПриемникДокумент.Элементы.Количество() > 0 Тогда
				Если НужноПереопределитьИндекс Тогда
					НужноПереопределитьИндекс = Ложь;
					НовыйПараграф = ПриемникДокумент.Элементы.Добавить();
					ИндексНовогоПараграфа = ПриемникДокумент.Элементы.Индекс(НовыйПараграф);
				Иначе
					НовыйПараграф = ПриемникДокумент.Элементы.Добавить();
					
					ИндексДобавленногоПараграфа = ПриемникДокумент.Элементы.Индекс(НовыйПараграф);
					
					Пока ИндексДобавленногоПараграфа > ИндексНовогоПараграфа Цикл
						
						ПриемникДокумент.Элементы.Сдвинуть(ИндексДобавленногоПараграфа - 1, 1);
						
						ИндексДобавленногоПараграфа = ИндексДобавленногоПараграфа - 1;
					
					КонецЦикла; 
				КонецЕсли;
			Иначе
				НовыйПараграф = ПриемникДокумент.Элементы.Добавить();
			КонецЕсли;
			НовыйПараграф.ТипПараграфа = ЭлементДокумента.ТипПараграфа;
			
			ЗаполнитьЗначенияСвойств(НовыйПараграф,ЭлементДокумента,,"ЗакладкаКонца, ЗакладкаНачала");
			Для Инд = 0 По ЭлементДокумента.Элементы.Количество() -1 Цикл
				ПодчиненныйЭлемент = ЭлементДокумента.Элементы[Инд];
				
				Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ТекстФорматированногоДокумента") Тогда
					
					НовыйЭлемент = НовыйПараграф.Элементы.Добавить(ПодчиненныйЭлемент.Текст, Тип("ТекстФорматированногоДокумента"));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент,ПодчиненныйЭлемент,,"ЗакладкаКонца, ЗакладкаНачала, Родитель");
					
				ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("КартинкаФорматированногоДокумента") Тогда
					
					НовыйЭлемент = НовыйПараграф.Элементы.Добавить(ПодчиненныйЭлемент.Картинка, Тип("КартинкаФорматированногоДокумента"));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент,ПодчиненныйЭлемент,,"ЗакладкаКонца, ЗакладкаНачала, Родитель");
					
				ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
					
					НовыйЭлемент = НовыйПараграф.Элементы.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПодписьПользователя(УчетнаяЗапись, Пользователь, ПодписьПересылаемогоПисьма = Ложь)
	
	НаборРегистра = РегистрыСведений.CRM_ПодписиУчетныхЗаписей.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Пользователь.Установить(Пользователь);
	НаборРегистра.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	НаборРегистра.Прочитать();
	
	Если НаборРегистра.Количество() > 0 Тогда
		
		Если ПодписьПересылаемогоПисьма Тогда
			Если НЕ ЗначениеЗаполнено(НаборРегистра[0].ПодписьПересылаемогоПисьма) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Подпись = НаборРегистра[0].ПодписьПересылаемогоПисьма;
		Иначе
			Если НЕ ЗначениеЗаполнено(НаборРегистра[0].ПодписьИсходящегоПисьма) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Подпись = НаборРегистра[0].ПодписьИсходящегоПисьма;
		КонецЕсли;
		
		СтруктураВложений					= Новый Структура;
		ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(Подпись, Подпись.Текст, СтруктураВложений);
	Иначе
		ТекстHTML = "";
		СтруктураВложений = Новый Структура;
	КонецЕсли;
	
	ТекстПодписиФорматированныйДокумент	= Новый ФорматированныйДокумент;
	ТекстПодписиФорматированныйДокумент.УстановитьHTML(ТекстHTML, СтруктураВложений);
	
	Возврат ТекстПодписиФорматированныйДокумент;
	
КонецФункции

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	ОбработатьПереданныеПараметры(Параметры);
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ДанныеПоПисьмам = ВведеныПисьмаНаОсновании(Объект.Ссылка);
		CRM_ЕстьПисьма		= ДанныеПоПисьмам.ЕстьПисьма;
		CRM_Отправляли		= ДанныеПоПисьмам.Отправляли;
	КонецЕсли;
	
	ЗаполнитьВложения(Параметры);
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ПодписьПользователя = ПолучитьПодписьПользователя(Объект.УчетнаяЗапись, ПараметрыСеанса.ТекущийПользователь);
			
			Если ПодписьПользователя <> Неопределено Тогда
				ДобавитьФорматированныйДокументКФорматированномуДокументуСУчетомПараграфов(ТекстПисьмаФорматированныйДокумент, ПодписьПользователя);
			КонецЕсли;
		КонецЕсли;
	Иначе
		CRM_Объект_ТекстHTML = Объект.ТекстHTML;
		Если НЕ Объект.ИзHTMLФайла Тогда
			СтруктураВложений = Новый Структура;
			Объект.ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
				Объект.Ссылка, Объект.ТекстHTML,СтруктураВложений);
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Объект.ТекстHTML, СтруктураВложений);
		Иначе
			
			ТекстПисьма = CRM_Взаимодействия.CRM_ОбработатьТекстHTML(Объект.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьВложения(Параметры = Неопределено)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Параметры.ЗначениеКопирования, Истина);
			
			Для Каждого Стр Из табВложения Цикл
				Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
					новСтр = Вложения.Добавить();
					новСтр.Ссылка								= Стр.Ссылка;
					новСтр.ИмяФайла								= Стр.ИмяФайла;
					новСтр.ИндексКартинки						= Стр.ИндексКартинки;
					новСтр.Размер								= Стр.Размер;
					РазмерВложения								= Цел(новСтр.Размер/1024);
					новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.РазмерПредставление					= Стр.РазмерПредставление;
					новСтр.ПодписанЭП							= Стр.ПодписанЭП;
					новСтр.Расположение							= 1;
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
					новСтр.ИДФайлаЭлектронногоПисьма			= Стр.ИДФайлаЭлектронногоПисьма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	//ИначеЕсли ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") И Параметры.ЗначенияЗаполнения.Свойство("Основание") 
	//	И ТипЗнч(Параметры.ЗначенияЗаполнения.Основание) = Тип("ДокументСсылка.НазначениеОпросов") Тогда
		
		Если Параметры.Свойство("Основание") 
		И ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Параметры.Основание, Истина);
			
			Для Каждого Стр Из табВложения Цикл
				Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
					новСтр = Вложения.Добавить();
					новСтр.Ссылка								= Стр.Ссылка;
					новСтр.ИмяФайла								= Стр.ИмяФайла;
					новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
					новСтр.Размер								= Стр.Размер;
					РазмерВложения								= Цел(новСтр.Размер/1024);
					новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.РазмерПредставление					= Стр.РазмерПредставление;
					новСтр.Расположение							= 1;
					новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= "#";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Вложения.Очистить();
		
		табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка, Истина);
		
		Для Каждого Стр Из табВложения Цикл
			
			//Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
				АдресВоВремХранилище = "";
				
				новСтр = Вложения.Добавить();
				новСтр.Ссылка								= Стр.Ссылка;
				новСтр.ИмяФайла								= Стр.ИмяФайла;
				новСтр.ИмяФайлаНаКомпьютере					= АдресВоВремХранилище;
				новСтр.ИндексКартинки						= Стр.ИндексКартинки;
				новСтр.Размер								= Стр.Размер;
				РазмерВложения								= Цел(новСтр.Размер/1024);
				новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
				новСтр.РазмерПредставление					= Стр.РазмерПредставление;
				новСтр.ПодписанЭП							= Стр.ПодписанЭП;
				новСтр.Расположение							= 0;
				новСтр.ИДФайлаЭлектронногоПисьмаОтбор	= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
				новСтр.ИДФайлаЭлектронногоПисьма			= Стр.ИДФайлаЭлектронногоПисьма;
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает переданные параметры при создании письма.
&НаСервере
Процедура ОбработатьПереданныеПараметры(Параметры)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
			ОсновнаяУчетнаяЗапись = Объект.УчетнаяЗапись;
		Иначе
			Если Параметры.Свойство("УчетнаяЗапись") И ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
				ОсновнаяУчетнаяЗапись = Параметры.УчетнаяЗапись;
			Иначе
				ОсновнаяУчетнаяЗапись = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись", "ОсновнаяУчетнаяЗапись");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ОсновнаяУчетнаяЗапись = Неопределено Тогда
			Если НЕ Элементы.ОтправительПредставление.СписокВыбора.НайтиПоЗначению(ОсновнаяУчетнаяЗапись) = Неопределено Тогда
				Объект.УчетнаяЗапись = ОсновнаяУчетнаяЗапись;
				Объект.ОтправительПредставление = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеАдресата(ОсновнаяУчетнаяЗапись.ИмяПользователя, ОсновнаяУчетнаяЗапись.АдресЭлектроннойПочты, "");
			ИначеЕсли Элементы.ОтправительПредставление.СписокВыбора.Количество() > 0 Тогда 
				Объект.УчетнаяЗапись = Элементы.ОтправительПредставление.СписокВыбора[0].Значение;
				Объект.ОтправительПредставление = Элементы.ОтправительПредставление.СписокВыбора[0].Представление;
			КонецЕсли;
		ИначеЕсли Элементы.ОтправительПредставление.СписокВыбора.Количество() > 0 Тогда 
			Объект.УчетнаяЗапись = Элементы.ОтправительПредставление.СписокВыбора[0].Значение;
			Объект.ОтправительПредставление = Элементы.ОтправительПредставление.СписокВыбора[0].Представление;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ОснованиеСтруктураВложений = Новый Структура;
			ОснованиеТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
				Параметры.ЗначениеКопирования, Параметры.ЗначениеКопирования.ТекстHTML,ОснованиеСтруктураВложений);
				
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ОснованиеТекстHTML, ОснованиеСтруктураВложений);
			
		КонецЕсли;
	Иначе
		УчетнаяЗаписьСпискавыбора =  Элементы.ОтправительПредставление.СписокВыбора.НайтиПоЗначению(Объект.УчетнаяЗапись);
		Если УчетнаяЗаписьСпискаВыбора  <> Неопределено Тогда
			Объект.ОтправительПредставление =  УчетнаяЗаписьСпискавыбора.Представление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область РаботаСHTMLФайлом

// Открывает диалог выбора файла.
//
// Параметры:
//  Элемент                - Элемент управления, для которого выбираем файл.
//  ПроверятьСуществование - Если Истина, то выбор отменяется если файл не существует.
// 
&НаКлиенте
Процедура ВыборФайла(Элемент, ИмяСвойства, ПроверятьСуществование, Знач РасширениеПоУмолчанию = "html")
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
	ДиалогВыбораФайла.Фильтр = "HTML файл (*.html)|*.html";
	ДиалогВыбораФайла.Расширение = "html";
	
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла = Элемент.ТекстРедактирования;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = ПроверятьСуществование;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ИмяСвойства		= ДиалогВыбораФайла.ПолноеИмяФайла;
		КаталогФайла	= ДиалогВыбораФайла.Каталог;
		
		ИмяФайлаШаблонаПриИзменении(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервере
Функция ВернутьHTML(ВременныйТекстHTML, ПутьККаталогу)
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ВременныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		ПутьККартинке = СтрЗаменить(АтрибутИсточникКартинки.Значение,"/","\");
		ПолныйПутьККартинке = ПутьККаталогу + ПутьККартинке;
		
		ВременныйТекстHTML = СтрЗаменить(ВременныйТекстHTML,АтрибутИсточникКартинки.Значение,ПолныйПутьККартинке);
	КонецЦикла;
	
	Возврат ВременныйТекстHTML;
	
КонецФункции

&НаКлиенте
Процедура ИмяФайлаШаблонаПриИзменении(Элемент)
	
	ТекстПисьма = "";
	
	УдалитьВременныеФайлы();
	
	Если ПереключательИзHTMLФайла = 1 Тогда
		Файл = Новый Файл(ИмяФайлаШаблона);
		ПутьККаталогу	= Файл.Путь;
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяФайлаШаблона);
		ВременныйТекстHTML		= ТекстовыйДокумент.ПолучитьТекст();
		
		ТекстПисьма = ВернутьHTML(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ВременныйТекстHTML," "), ПутьККаталогу);
		
		ИзмененШаблонHTML = Истина;
		
		CRM_ЭтоШаблонUniSender = Ложь;
	ИначеЕсли ПереключательИзHTMLФайла = 2 Тогда
		СтруктураШаблона = CRM_ИнтеграцияСUniSenderКлиентСервер.ШаблонUniSender(ИмяФайлаШаблона);
		Объект.Тема = СтруктураШаблона.Тема;
		ТекстПисьма = СтруктураШаблона.ТекстПисьма;
		Объект.ТекстHTML = ТекстПисьма;
		CRM_ЭтоШаблонUniSender = Истина;
	КонецЕсли;
	
	//Объект.ИзHTMLФайла = Истина;
	Шаблон = ПредопределенноеЗначение("Справочник.CRM_ШаблоныРассылки.ПустаяСсылка");
	Модифицированность = Истина;
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененоСодержаниеРассылки = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаШаблонаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПереключательИзHTMLФайла = 1 Тогда
		ВыборФайла(Элемент, ИмяФайлаШаблона, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Открывает файл обмена во внешнем приложении.
//
// Параметры:
//  
// 
&НаКлиенте
Процедура ОткрытьВПриложении(ИмяФайла, СтандартнаяОбработка = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ОткрытьКаталогСФайлом", ЭтотОбъект, ДополнительныеПараметры));
	
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(Новый ОписаниеОповещения("ПроверитьСуществованиеФайла", ЭтотОбъект, ДополнительныеПараметры), ИмяФайла);
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПроверитьСуществованиеФайла(Файл, ДополнительныеПараметры) Экспорт
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОпределенияСуществованияФайла", ЭтотОбъект, ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПослеОпределенияСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		НачатьЗапускПриложения(ДополнительныеПараметры.ОписаниеОповещения, ДополнительныеПараметры.ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ОткрытьКаталогСФайлом(КодВозврата, ДополнительныеПараметры) Экспорт
	// Обработка не требуется.
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаШаблонаОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Функция РасширениеФайла(Знач ИмяФайла)
	
	ПозицияТочки = ПоследнийРазделитель(ИмяФайла);
	
	Расширение = Прав(ИмяФайла,СтрДлина(ИмяФайла) - ПозицияТочки + 1);
	
	Возврат Расширение;
	
КонецФункции

&НаСервере
Функция ПоследнийРазделитель(СтрокаСРазделителем, Разделитель = ".")
	
	ДлинаСтроки = СтрДлина(СтрокаСРазделителем);
	
	Пока ДлинаСтроки > 0 Цикл
		
		Если Сред(СтрокаСРазделителем, ДлинаСтроки, 1) = Разделитель Тогда
			
			Возврат ДлинаСтроки; 
			
		КонецЕсли;
		
		ДлинаСтроки = ДлинаСтроки - 1;
		
	КонецЦикла;

КонецФункции

&НаСервере
Процедура УдалитьВременныеФайлы()
	
	Для Каждого СтрокаВременногоФайла Из СоответствиеФайлов Цикл
		Файл = Новый Файл(СтрокаВременногоФайла.ИмяНаСервере);
		Если Файл.Существует() Тогда
			Попытка
				УдалитьФайлы(СтрокаВременногоФайла.ИмяНаСервере);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеФайлов.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ИмяФайлаНаСервереИлиКлиенте(ИмяРеквизита ,Знач АдресФайла, Знач ИмяФайлаДляРасширения = ".html",ПроверятьСуществование = Истина)
	
	ИмяФайла = Неопределено;
	
	Расширение = РасширениеФайла(ИмяФайлаДляРасширения);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	АдресНаСервере = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(АдресНаСервере);
	ИмяФайла = АдресНаСервере;
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция ПропаситьHTML()
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(СоответствиеФайлов[0].ИмяНаСервере);
	ВременныйТекстHTML		= ТекстовыйДокумент.ПолучитьТекст();
	ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ВременныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		ПутьККартинке = СтрЗаменить(АтрибутИсточникКартинки.Значение,"/","\");
		
		МассивСтрок = СоответствиеФайлов.НайтиСтроки(Новый Структура("ИмяНаКлиенте",ПутьККартинке));
		
		Если МассивСтрок.Количество() = 0 Тогда Продолжить; КонецЕсли;
		
		ВременныйТекстHTML = СтрЗаменить(ВременныйТекстHTML,АтрибутИсточникКартинки.Значение,МассивСтрок[0].ИмяНаСервере);
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ВременныйТекстHTML," ");
	
КонецФункции

&НаСервере
Процедура ПолучитьИменаФайловНаКлиенте(АдресФайлаВХранилище, ИмяФайлаДляРасширения)
	
	ИмяФайла = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаШаблона ,АдресФайлаВХранилище, ИмяФайлаДляРасширения);
	
	Если ИмяФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = СоответствиеФайлов.Добавить();
	НоваяСтрока.ИмяНаКлиенте	= ИмяФайлаШаблона;
	НоваяСтрока.ИмяНаСервере = ИмяФайла;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	ВременныйТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
	ДокументHTML	= Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ВременныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		ПутьККартинке = СтрЗаменить(АтрибутИсточникКартинки.Значение,"/","\");
		
		МассивСтрок = СоответствиеФайлов.НайтиСтроки(Новый Структура("ИмяНаКлиенте",ПутьККартинке));
		
		Если МассивСтрок.Количество() > 0 Тогда Продолжить; КонецЕсли;
		
		НоваяСтрока = СоответствиеФайлов.Добавить();
		НоваяСтрока.ИмяНаКлиенте = ПутьККартинке;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВернутьИмяФайлаКартинкиНаСервере(ИмяФайлаНаКлиенте ,АдресФайлаВХранилище, ИмяФайлаДляРасширения)
	
	ИмяФайла = ИмяФайлаНаСервереИлиКлиенте(ИмяФайлаНаКлиенте ,АдресФайлаВХранилище, ИмяФайлаДляРасширения);
	
	Возврат ИмяФайла;
	
КонецФункции

&НаКлиенте
Процедура ПереключательИзHTMLФайлаПриИзменении(Элемент)
	
	//Объект.ИзHTMLФайла = Булево(ПереключательИзHTMLФайла);
	Объект.ИзHTMLФайла = ПереключательИзHTMLФайла;
	Элементы.ПанельФорматированныйДокументТекстHTML.ТекущаяСтраница = ?(Объект.ИзHTMLФайла,Элементы.СтраницаHTML,Элементы.СтраницаФорматированныйДокумент);
	Элементы.ВыбратьШаблонАвтотекста.Доступность = Истина;
	Если ПереключательИзHTMLФайла = 1 Тогда
		Элементы.ИмяФайлаШаблона.СписокВыбора.Очистить();
		Элементы.ИмяФайлаШаблона.Заголовок = НСтр("ru = 'Файл'");
		Элементы.ИмяФайлаШаблона.КнопкаВыпадающегоСписка = Ложь;
		Элементы.ИмяФайлаШаблона.КнопкаВыбора = Истина;
		Элементы.ИмяФайлаШаблона.КнопкаОткрытия = Истина;
		Элементы.ИмяФайлаШаблона.ПодсказкаВвода = НСтр("Выберите файл HTML для загрузки");
		Элементы.ИмяФайлаШаблона.РежимВыбораИзСписка = Ложь;
	ИначеЕсли ПереключательИзHTMLФайла = 2 Тогда
		МассивШаблонов = CRM_ИнтеграцияСUniSenderКлиентСервер.МассивШаблоновUniSender();
		Элементы.ИмяФайлаШаблона.СписокВыбора.Очистить();
		Для каждого ТекШаблон из МассивШаблонов Цикл
			Элементы.ИмяФайлаШаблона.СписокВыбора.Добавить(Строка(ТекШаблон.id), ТекШаблон.Title);
		КонецЦикла;
		Элементы.ИмяФайлаШаблона.РежимВыбораИзСписка = Истина;
		Элементы.ИмяФайлаШаблона.КнопкаВыпадающегоСписка = Истина;
		Элементы.ИмяФайлаШаблона.КнопкаВыбора = Ложь;
		Элементы.ИмяФайлаШаблона.КнопкаОткрытия = Ложь;
		Элементы.ИмяФайлаШаблона.Заголовок = НСтр("ru = 'Шаблон UniSender'");
		Элементы.ИмяФайлаШаблона.ПодсказкаВвода = НСтр("Выберите шаблон UniSender");
		Элементы.ВыбратьШаблонАвтотекста.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда Возврат КонецЕсли;
	
	УдалитьВременныеФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

