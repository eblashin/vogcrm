#Область ОбработчикиСобытийФормы

 &НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТаблицуПереходов();
	ЗаполнитьСпискиВыбора();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	СписокВыбора = Новый Массив;
	
	ЕдиницаКоробки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("8751"); // Корбоки
	ЕдиницаПаллеты	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("005"); // Паллеты
	СписокВыбора.Добавить(ЕдиницаКоробки);
	СписокВыбора.Добавить(ЕдиницаПаллеты);
	Если Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
		ЕдиницаШтуки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"); // Штуки
		ЕдиницаМ2	 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("055"); // Квадратный метр
		СписокВыбора.Добавить(ЕдиницаШтуки);
		СписокВыбора.Добавить(ЕдиницаМ2);
	ИначеЕсли  Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои Тогда
		ЕдиницаРулоны	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("736"); // Рулоны
		СписокВыбора.Добавить(ЕдиницаРулоны);
	КонецЕсли;
	
	Элементы.НоменклатураЕдиницаДляОтчетов.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);;
	Элементы.НоменклатураЕдиницаХраненияОстатков.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьЗаголовокФормы()
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПорядковыйНомерПерехода(1);
	УстановитьДействияКомандНавигации();
	УстановитьВидимостьПоНаправлениюДеятельности();
	УстановитьВидимостьПоВидуОперации();
	УстановитьВидимостьКнопокДомой();
	Если Объект.Проведен Тогда
		Элементы.ГруппаНомерДата.ТолькоПросмотр 			= Истина;
		Элементы.Номенклатура.ТолькоПросмотр 				= Истина;
		Элементы.КоллекцииДляСайта.ТолькоПросмотр 			= Истина;
		Элементы.СтраницыВводаКоллекций.ТолькоПросмотр 		= Истина;
		Элементы.НоменклатурныеПозиции.ТолькоПросмотр 		= Истина;
		Элементы.Дизайны.ТолькоПросмотр 					= Истина;
		Элементы.НоменклатураСоставМозаики.ТолькоПросмотр	= Истина;
		Элементы.ГруппаНоменклатураОбоиТЧ.ТолькоПросмотр	= Истина;
		
		Элементы.КоллекцииДляСайтаПодборКоллекцийДляСайта.Доступность 			= Ложь;
		Элементы.ДизайныПодборДизайнов.Доступность 								= Ложь;
		Элементы.НоменклатурныеПозицииПодборНоменклатурныхПозиций.Доступность 	= Ложь;
		Элементы.НоменклатураПодборНоменклатуры.Доступность 					= Ложь;
	КонецЕсли;
	
	УстановитьДоступностьНаправленияДеятельности();
	
	Элементы.ДизайныВосстановитьЗначения.Отображение = ОтображениеКнопки.Картинка;
	Элементы.НоменклатурныеПозицииВосстановитьЗначения.Отображение = ОтображениеКнопки.Картинка;
	Элементы.НоменклатураВосстановитьЗначения.Отображение = ОтображениеКнопки.Картинка;
	Элементы.КоллекцииДляСайтаВосстановитьЗначения.Отображение = ОтображениеКнопки.Картинка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопокДомой()
	
	СтрокиТаблицыПереходов = ТаблицаПереходов.НайтиСтроки(Новый Структура("ИмяОсновнойСтраницы","СтраницаМастераНачало"));
	Если СтрокиТаблицыПереходов.Количество() > 0 Тогда 
		ВидимостьКнопки = Истина;
	Иначе
		ВидимостьКнопки = Ложь;
	КонецЕсли;
	
	Элементы.КнопкаДомой.Видимость 	= ВидимостьКнопки;
	Элементы.КнопкаДомой1.Видимость = ВидимостьКнопки;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДействияКомандНавигации()
	
	НайденныеСтроки = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода",ПорядковыйНомерПерехода));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Страница = НайденныеСтроки[0].ИмяОсновнойСтраницы;
		ЦветТекущейСтраницы = Новый Цвет(255, 255, 0);
		ЖирныйШрифт = Новый Шрифт(,,Истина);
		ОбычныйШрифт = Новый Шрифт(,,Ложь);
		ЦветНеВыбраннойСтраницы = Новый Цвет(232, 232, 232);
		Если Страница = "СтраницаМастераНачало" Тогда
			Элементы.ГруппаПрогресса.Видимость = Ложь;
			
			ИмяДействияДизайны 					= "";
			ИмяДействияНоменклатурныеПозиции 	= "";
			ИмяДействияНоменклатура 			= "";
			ИмяДействияКоллекцииДляСайта 		= "";
		ИначеЕсли Страница = "СтраницаДизайн" Тогда
			Элементы.ГруппаПрогресса.Видимость = Истина;
			
			Элементы.НавигацияДизайны.ЦветФона 	= ЦветТекущейСтраницы;
			Элементы.НавигацияДизайны.Шрифт 	= ЖирныйШрифт;
			Элементы.НавигацияДизайны.Пометка 	= Истина;
			
			Элементы.НавигацияНоменклатурныеПозиции.ЦветФона = ЦветНеВыбраннойСтраницы;
			Элементы.НавигацияНоменклатурныеПозиции.Шрифт 	 = ОбычныйШрифт;
			Элементы.НавигацияНоменклатурныеПозиции.Пометка  = Ложь;
			
			Элементы.НавигацияНоменклатура.ЦветФона = ЦветНеВыбраннойСтраницы;
			Элементы.НавигацияНоменклатура.Шрифт 	= ОбычныйШрифт;
			Элементы.НавигацияНоменклатура.Пометка 	= Ложь;
			
			Элементы.НавигацияКоллекцииДляСайта.ЦветФона = ЦветНеВыбраннойСтраницы;
			Элементы.НавигацияКоллекцииДляСайта.Шрифт 	 = ОбычныйШрифт;
			Элементы.НавигацияКоллекцииДляСайта.Пометка  = Ложь;
			
			ИмяДействияДизайны 					= "";
			ИмяДействияНоменклатурныеПозиции 	= "ДекорацияПрогресс1Нажатие";
			ИмяДействияНоменклатура 			= "ДекорацияПрогресс2Нажатие";
			ИмяДействияКоллекцииДляСайта 		= "ДекорацияПрогресс9Нажатие";
		ИначеЕсли Страница = "СтраницаBSU" Тогда
			Элементы.ГруппаПрогресса.Видимость = Истина;
			
			Элементы.НавигацияДизайны.ЦветФона = ЦветНеВыбраннойСтраницы; 
			Элементы.НавигацияДизайны.Шрифт    = ОбычныйШрифт;
			Элементы.НавигацияДизайны.Пометка  = Ложь;
			
			Элементы.НавигацияНоменклатурныеПозиции.ЦветФона = ЦветТекущейСтраницы;
			Элементы.НавигацияНоменклатурныеПозиции.Шрифт 	 = ЖирныйШрифт;
			Элементы.НавигацияНоменклатурныеПозиции.Пометка  = Истина;
			
			Элементы.НавигацияНоменклатура.ЦветФона = ЦветНеВыбраннойСтраницы; 
			Элементы.НавигацияНоменклатура.Шрифт 	= ОбычныйШрифт;
			Элементы.НавигацияНоменклатура.Пометка  = Ложь;
			
			Элементы.НавигацияКоллекцииДляСайта.ЦветФона = ЦветНеВыбраннойСтраницы; 
			Элементы.НавигацияКоллекцииДляСайта.Шрифт 	 = ОбычныйШрифт;
			Элементы.НавигацияКоллекцииДляСайта.Пометка  = Ложь;
			
			ИмяДействияДизайны 					= "ДекорацияПрогресс3Нажатие";
			ИмяДействияНоменклатурныеПозиции 	= "";
			ИмяДействияНоменклатура 			= "ДекорацияПрогресс5Нажатие";
			ИмяДействияКоллекцииДляСайта 		= "ДекорацияПрогресс13Нажатие";
		ИначеЕсли Страница = "СтраницаНоменклатура" Тогда
			Элементы.ГруппаПрогресса.Видимость = Истина;
			
			Элементы.НавигацияДизайны.ЦветФона = ЦветНеВыбраннойСтраницы;
			Элементы.НавигацияДизайны.Шрифт    = ОбычныйШрифт;
			Элементы.НавигацияДизайны.Пометка  = Ложь;
			
			Элементы.НавигацияНоменклатурныеПозиции.ЦветФона = ЦветНеВыбраннойСтраницы; 
			Элементы.НавигацияНоменклатурныеПозиции.Шрифт 	 = ОбычныйШрифт;
			Элементы.НавигацияНоменклатурныеПозиции.Пометка  = Ложь;
			
			Элементы.НавигацияНоменклатура.ЦветФона = ЦветТекущейСтраницы;
			Элементы.НавигацияНоменклатура.Шрифт 	= ЖирныйШрифт;
			Элементы.НавигацияНоменклатура.Пометка  = Истина;
			
			Элементы.НавигацияКоллекцииДляСайта.ЦветФона = ЦветНеВыбраннойСтраницы; 
			Элементы.НавигацияКоллекцииДляСайта.Шрифт 	 = ОбычныйШрифт;
			Элементы.НавигацияКоллекцииДляСайта.Пометка  = Ложь;
			
			ИмяДействияДизайны 					= "ДекорацияПрогресс6Нажатие";
			ИмяДействияНоменклатурныеПозиции 	= "ДекорацияПрогресс7Нажатие";
			ИмяДействияНоменклатура 			= "";
			ИмяДействияКоллекцииДляСайта 		= "ДекорацияПрогресс15Нажатие";
		ИначеЕсли Страница = "СтраницаКоллекцииДляСайта" Тогда
			Элементы.ГруппаПрогресса.Видимость = Истина;
			
			Элементы.НавигацияДизайны.ЦветФона = ЦветНеВыбраннойСтраницы;
			Элементы.НавигацияДизайны.Шрифт    = ОбычныйШрифт;
			Элементы.НавигацияДизайны.Пометка  = Ложь;
			
			Элементы.НавигацияНоменклатурныеПозиции.ЦветФона = ЦветНеВыбраннойСтраницы;
			Элементы.НавигацияНоменклатурныеПозиции.Шрифт 	 = ОбычныйШрифт;
			Элементы.НавигацияНоменклатурныеПозиции.Пометка  = Ложь;
			
			Элементы.НавигацияНоменклатура.ЦветФона = ЦветНеВыбраннойСтраницы; 
			Элементы.НавигацияНоменклатура.Шрифт 	= ОбычныйШрифт;
			Элементы.НавигацияНоменклатура.Пометка  = Ложь;
			
			Элементы.НавигацияКоллекцииДляСайта.ЦветФона = ЦветТекущейСтраницы;
			Элементы.НавигацияКоллекцииДляСайта.Шрифт 	 = ЖирныйШрифт;
			Элементы.НавигацияКоллекцииДляСайта.Пометка  = Истина;
			
			ИмяДействияДизайны 					= "ДекорацияПрогресс10Нажатие";
			ИмяДействияНоменклатурныеПозиции 	= "ДекорацияПрогресс11Нажатие";
			ИмяДействияНоменклатура 			= "ДекорацияПрогресс12Нажатие";
			ИмяДействияКоллекцииДляСайта 		= "";
		КонецЕсли;
		
		ИзменитьДействиеКоманды("НавигацияДизайны",ИмяДействияДизайны);
		ИзменитьДействиеКоманды("НавигацияНоменклатурныеПозиции",ИмяДействияНоменклатурныеПозиции);
		ИзменитьДействиеКоманды("НавигацияНоменклатура",ИмяДействияНоменклатура);
		ИзменитьДействиеКоманды("НавигацияКоллекцииДляСайта",ИмяДействияКоллекцииДляСайта);
		
	Иначе
		Элементы.ГруппаПрогресса.Видимость = Ложь;
		
		ИмяДействияДизайны 					= "";
		ИмяДействияНоменклатурныеПозиции 	= "";
		ИмяДействияНоменклатура 			= "";
		ИмяДействияКоллекцииДляСайта 		= "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДействиеКоманды(ИмяКоманды,ИмяДействия);
	Команда = ЭтаФорма.Команды.Найти(ИмяКоманды);
	Команда.Действие = ИмяДействия;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
		Представление = "Изменение %1 от %2 №%3";
	Иначе
		Представление = "Создание %1 от %2 №%3";
	КонецЕсли;
	
	СписокТаблиц = "";
	Если Объект.ТаблицаДизайны Тогда
		СписокТаблиц = СписокТаблиц + "Дизайна";
	КонецЕсли;
	Если Объект.ТаблицаНоменклатурныеПозиции Тогда
		Если СписокТаблиц <> "" Тогда
			СписокТаблиц = СписокТаблиц + ", ";
		КонецЕсли;
		СписокТаблиц = СписокТаблиц + "BSU";
	КонецЕсли;
	Если Объект.ТаблицаНоменклатура Тогда
		Если СписокТаблиц <> "" Тогда
			СписокТаблиц = СписокТаблиц + ", ";
		КонецЕсли;
		СписокТаблиц = СписокТаблиц + "SKU";
	КонецЕсли;
	Если Объект.ТаблицаКоллекцииДляСайта Тогда
		Если СписокТаблиц <> "" Тогда
			СписокТаблиц = СписокТаблиц + ", ";
		КонецЕсли;
		СписокТаблиц = СписокТаблиц + "Коллекций для сайта";
	КонецЕсли;
	Представление = СтрШаблон(Представление,СписокТаблиц,Формат(Объект.Дата,"ДФ=dd.MM.yyyy"),Объект.Номер);
	ЭтаФорма.Заголовок = Представление;
	Этаформа.АвтоЗаголовок = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандПерехода()
	
	Если Объект.ТаблицаДизайны Тогда
		Элементы.НавигацияДизайны.Видимость = Истина;
	Иначе
		Элементы.НавигацияДизайны.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ТаблицаНоменклатурныеПозиции Тогда
		Элементы.НавигацияНоменклатурныеПозиции.Видимость = Истина;
	Иначе
		Элементы.НавигацияНоменклатурныеПозиции.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ТаблицаНоменклатура Тогда
		Элементы.НавигацияНоменклатура.Видимость = Истина;
	Иначе
		Элементы.НавигацияНоменклатура.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ТаблицаКоллекцииДляСайта Тогда
		Элементы.НавигацияКоллекцииДляСайта.Видимость = Истина;
	Иначе
		Элементы.НавигацияКоллекцииДляСайта.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
		Элементы.НоменклатураЗаполнитьНоменклатурныеПозиции.Видимость = Объект.ТаблицаНоменклатурныеПозиции;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоВидуОперации()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
		Видимость = Истина;
		ЗаголовокКнопкиПодбора = "Подбор";
		ЗаголовокГруппыСоставТаблиц = "Что изменяем:";
		
	Иначе
		Видимость = Ложь;
		ЗаголовокКнопкиПодбора = "Копирование";
		ЗаголовокГруппыСоставТаблиц = "Что создаем:";
	КонецЕсли;
	Элементы.ДизайныДизайнСсылка.Видимость 								= Видимость;
	Элементы.НоменклатурныеПозицииНоменклатурнаяПозицияСсылка.Видимость = Видимость;
	Элементы.НоменклатураНоменклатураСсылка.Видимость 					= Видимость;
	Элементы.КоллекцииДляСайтаКоллекцияСсылка.Видимость 				= Видимость;
	Элементы.ДизайныДобавить.Видимость									= НЕ Видимость;
	Элементы.НоменклатурныеПозицииДобавить.Видимость					= НЕ Видимость;
	Элементы.НоменклатураДобавить.Видимость								= НЕ Видимость;
	Элементы.КоллекцииДляСайтаДобавить.Видимость						= НЕ Видимость;
	
	Элементы.ГруппаСоставТаблиц.Заголовок = ЗаголовокГруппыСоставТаблиц;
		
	Элементы.ДизайныПодборДизайнов.Заголовок = ЗаголовокКнопкиПодбора;
	Элементы.НоменклатурныеПозицииПодборНоменклатурныхПозиций.Заголовок = ЗаголовокКнопкиПодбора;
	Элементы.НоменклатураПодборНоменклатуры.Заголовок = ЗаголовокКнопкиПодбора;
	Элементы.КоллекцииДляСайтаПодборКоллекцийДляСайта.Заголовок = ЗаголовокКнопкиПодбора;
	
	Если ЗаголовокКнопкиПодбора = "Копирование" Тогда
		ВидОтображенияПодсказки = ОтображениеПодсказки.Авто;
	Иначе
		ВидОтображенияПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	Элементы.ДизайныПодборДизайнов.ОтображениеПодсказки = ВидОтображенияПодсказки;
	Элементы.НоменклатурныеПозицииПодборНоменклатурныхПозиций.ОтображениеПодсказки = ВидОтображенияПодсказки;
	Элементы.НоменклатураПодборНоменклатуры.ОтображениеПодсказки = ВидОтображенияПодсказки;
	Элементы.КоллекцииДляСайтаПодборКоллекцийДляСайта.ОтображениеПодсказки = ВидОтображенияПодсказки;

	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьНаправленияДеятельности()
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	Элементы.НаправлениеДеятельности.ТолькоПросмотр = Не ЭтоПолноправныйПользователь;
	
	Если Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои Тогда
		Элементы.НоменклатураНоменклатурнаяПозиция.ТолькоПросмотр = Истина;
		Элементы.НоменклатураВидТоварвДляWMS.ТолькоПросмотр = Ложь;
		Элементы.НоменклатураШтрихкодШТ.Заголовок = "Штрихкод (рул)";
	Иначе
		Элементы.НоменклатураНоменклатурнаяПозиция.ТолькоПросмотр = Ложь;
		Элементы.НоменклатураВидТоварвДляWMS.ТолькоПросмотр = Истина;
		Элементы.НоменклатураШтрихкодШТ.Заголовок = "Штрихкод (шт)";
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 19.01.2021 DEV-67
	ИменаЭлементов = 
	"ДизайныЗагрузитьИзВнешнегоФайла,
	|НоменклатурныеПозицииЗагрузитьИзВнешнегоФайла,
	|НоменклатураЗагрузитьИзВнешнегоФайла";
	
	вогОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		ИменаЭлементов,
		"Видимость",
		Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка);
	// -- VOG Солодов В.В. 19.01.2021 DEV-67
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//Если Не ПроверитьЗаполнение() Тогда
	//	Отказ = Истина;
	//КонецЕсли;
	
	// +++ VOG Кулаков П.Л. 20.02.2021 DEV-196
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	ПроверитьЗаполнениеДополнительныхРеквизитов(Отказ);
	
	ПроверитьШтрихкоды(Отказ);
	
КонецПроцедуры

&Наклиенте
Процедура ПроверитьШтрихкоды(Отказ)
	
	ЕстьОшибки = Ложь;
	Для Каждого Строка Из Объект.Номенклатура Цикл
		
		ШтрихкодУникален = ПроверитьУникальностьШтрихкода(Строка.Штрихкод,Строка.УИД);
		Если Не ШтрихкодУникален Тогда 
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Строка.ШтрихкодШТ <> "" Тогда
			ШтрихкодУникален = ПроверитьУникальностьШтрихкода(Строка.ШтрихкодШТ,Строка.УИД);
			Если Не ШтрихкодУникален Тогда 
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.ШтрихкодШТ = Строка.Штрихкод И НЕ ПустаяСтрока(Строка.Штрихкод)  Тогда
			НомерСтроки = Строка.НомерСтроки;
			НаименованиеНоменклатуры = Строка.Наименование;
			Сообщить("Штрихкод: " + Строка.Штрихкод + " используется в строке №" + НомерСтроки + ", SKU: " + НаименованиеНоменклатуры);
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Отказ = ЕстьОшибки;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПроверитьЗаполнениеДополнительныхРеквизитов(Отказ)
	
	ЕстьОшибка = Ложь;
	Для Каждого Строка Из Объект.Номенклатура Цикл
		ЭтоПанно = Ложь;
		Если ТипЗнч(Строка.НоменклатурнаяПозиция) = Тип("Строка") Тогда
			СтрокиНоменклатурныхПозиций = Объект.НоменклатурныеПозиции.НайтиСтроки(Новый Структура("УИД",Строка.УИДНоменклатурнаяПозиция));
			Если СтрокиНоменклатурныхПозиций.Количество() > 0 Тогда
				Если СтрокиНоменклатурныхПозиций[0].ЕдиницаПродажиПлитка = ПредопределенноеЗначение("Справочник.вогВидыПлитки.Панно") Тогда
					ЭтоПанно = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(Строка.НоменклатурнаяПозиция) Тогда
				ЭтоПанно = Истина;
			Иначе
				ЭтоПанно = ПолучитьЗначениеЕдиницыПродажи(Строка.НоменклатурнаяПозиция) = ПредопределенноеЗначение("Справочник.вогВидыПлитки.Панно");
			КонецЕсли;
		КонецЕсли;
		Если ЭтоПанно И (Не ЗначениеЗаполнено(Строка.КоличествоСоставныхЭлементов) 
				ИЛИ Не ЗначениеЗаполнено(Строка.ДлинаСоставногоЭлемента)
				ИЛИ Не ЗначениеЗаполнено(Строка.ШиринаСоставногоЭлемента)) Тогда
			ЕстьОшибка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибка Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнены обязательные поля составных элементов",,,,Отказ);
	КонецЕсли;		
	
КонецПроцедуры

// ++ VOG Солодов В.В. 15.01.2021 DEV-67
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры// -- VOG Солодов В.В. 15.01.2021 DEV-67

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтобразитьВсеДизайны(Отобразить)
	
	Для Каждого ЭлементФормы Из Элементы.Дизайны.ПодчиненныеЭлементы Цикл
		Если ЭлементФормы.Вид <> ВидПоляФормы.ПолеВвода Тогда
			Продолжить;
		КонецЕсли;
		Если Отобразить Тогда
			ЭлементФормы.Видимость = Истина;
		ИначеЕсли ЭлементФормы.АвтоОтметкаНезаполненного <> Неопределено И ЭлементФормы.АвтоОтметкаНезаполненного Тогда
		Иначе
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка") Тогда
		 НаправлениеПлитка = Истина;
	Иначе
		 НаправлениеПлитка = Ложь;
	КонецЕсли;
	УстановитьВидимостьДизайны(НаправлениеПлитка,Отобразить);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВсе(Команда)
	
	ИзменитьВидимостьПолей(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьПолей(Отобразить)
	
	НайденныеСтроки = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода",ПорядковыйНомерПерехода));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Страница = НайденныеСтроки[0].ИмяОсновнойСтраницы;
		Если Страница = "СтраницаДизайн" Тогда
			ОтобразитьВсеДизайны(Отобразить);
			Элементы.ОтобразитьВсе.Пометка = Отобразить;
			Элементы.ТолькоОбязательные.Пометка = НЕ Отобразить;
		ИначеЕсли Страница = "СтраницаBSU" Тогда
			ОтобразитьВсеBSU(Отобразить);
			Элементы.НоменклатурныеПозицииОтобразитьВсе.Пометка = Отобразить;
			Элементы.НоменклатурныеПозицииТолькоОбязательные.Пометка = НЕ Отобразить;
		ИначеЕсли Страница = "СтраницаНоменклатура" Тогда
			ОтобразитьВсеНоменклатура(Отобразить);
			Элементы.НоменклатураОтобразитьВсе.Пометка = Отобразить;
			Элементы.НоменклатураТолькоОбязательные.Пометка = НЕ Отобразить;
		КонецЕсли;
		
		УстановитьВидимостьПоВидуОперации();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВсеНоменклатура(Отобразить)
	
	Для Каждого ЭлементФормы Из Элементы.Номенклатура.ПодчиненныеЭлементы Цикл
		Если ЭлементФормы.Вид <> ВидПоляФормы.ПолеВвода Тогда
			Продолжить;
		КонецЕсли;
		Если Отобразить Тогда
			ЭлементФормы.Видимость = Истина;
		ИначеЕсли ЭлементФормы.АвтоОтметкаНезаполненного <> Неопределено И ЭлементФормы.АвтоОтметкаНезаполненного Тогда
		Иначе
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.НоменклатураНаименование.Видимость = Истина;
	Элементы.НоменклатураНаименованиеПолное.Видимость = Истина;
	
	Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка") Тогда
		НаправлениеПлитка = Истина;
	Иначе
		НаправлениеПлитка = Ложь;
	КонецЕсли;
	УстановитьВидимостьНоменклатура(НаправлениеПлитка,Отобразить);

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВсеBSU(Отобразить)
	
	Для Каждого ЭлементФормы Из Элементы.НоменклатурныеПозиции.ПодчиненныеЭлементы Цикл
		Если ЭлементФормы.Вид <> ВидПоляФормы.ПолеВвода Тогда
			Продолжить;
		КонецЕсли;
		Если Отобразить Тогда
			ЭлементФормы.Видимость = Истина;
		ИначеЕсли ЭлементФормы.АвтоОтметкаНезаполненного <> Неопределено И ЭлементФормы.АвтоОтметкаНезаполненного Тогда
		Иначе
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	Элементы.НоменклатурныеПозицииРектификацияПлитка.Видимость = Отобразить;
	Элементы.НоменклатурныеПозицииНаименование.Видимость = Истина;
	
	Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка") Тогда
		НаправлениеПлитка = Истина;
	Иначе
		НаправлениеПлитка = Ложь;
	КонецЕсли;
	УстановитьВидимостьНоменклатурныеПозиции(НаправлениеПлитка,Отобразить);

КонецПроцедуры

&НаКлиенте
Процедура ТолькоОбязательные(Команда)
	ИзменитьВидимостьПолей(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗначениеТаблицы(Команда) // ++ VOG Солодов В.В. 18.01.2021 DEV-67 // Переименовал процедуру
	
	Если Этаформа.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Этаформа.ТекущийЭлемент) <> Тип("ТаблицаФормы") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = СохранитьЗначениеНаСервере();
	Если ИмяКолонки = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ИмяКолонки,"Наименование") > 0
			ИЛИ СтрНайти(ИмяКолонки,"Ссылка") > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Этаформа.ТекущийЭлемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонкиЗаполнения = ИмяКолонки;
	
	ЗначениеЗаполнения = Этаформа.ТекущийЭлемент.ТекущиеДанные[ИмяКолонки];
	ЗаголовокЗаполнения = "" + ЗначениеЗаполнения;
	ВариантОтображения = ОтображениеКнопки.КартинкаИТекст;
	
	Если ЗначениеЗаполнено(ЗначениеЗаполнения) Тогда
		Если Этаформа.ТекущийЭлемент.Имя = "Дизайны" Тогда
			Элементы.ДизайныВосстановитьЗначения.Доступность = Истина;
			Элементы.ДизайныВосстановитьЗначения.Заголовок = ЗаголовокЗаполнения;
			Элементы.ДизайныВосстановитьЗначения.Отображение = ВариантОтображения;
		КонецЕсли;
		Если Этаформа.ТекущийЭлемент.Имя = "НоменклатурныеПозиции" Тогда
			Элементы.НоменклатурныеПозицииВосстановитьЗначения.Доступность = Истина;
			Элементы.НоменклатурныеПозицииВосстановитьЗначения.Заголовок = ЗаголовокЗаполнения;
			Элементы.НоменклатурныеПозицииВосстановитьЗначения.Отображение = ВариантОтображения;
		КонецЕсли;
		Если Этаформа.ТекущийЭлемент.Имя = "Номенклатура" Тогда
			Элементы.НоменклатураВосстановитьЗначения.Доступность = Истина;
			Элементы.НоменклатураВосстановитьЗначения.Заголовок = ЗаголовокЗаполнения;
			Элементы.НоменклатураВосстановитьЗначения.Отображение = ВариантОтображения;
		КонецЕсли;
		Если Этаформа.ТекущийЭлемент.Имя = "КоллекцииДляСайта" Тогда
			Элементы.КоллекцииДляСайтаВосстановитьЗначения.Доступность = Истина;
			Элементы.КоллекцииДляСайтаВосстановитьЗначения.Заголовок = ЗаголовокЗаполнения;
			Элементы.КоллекцииДляСайтаВосстановитьЗначения.Отображение = ВариантОтображения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьЗначениеНаСервере()
	
	НомерСимвола = СтрНайти(Этаформа.ТекущийЭлемент.ТекущийЭлемент.ПутьКДанным,".",НаправлениеПоиска.СКонца);
	Если НомерСимвола = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	ДлинаСтроки = СтрДлина(Этаформа.ТекущийЭлемент.ТекущийЭлемент.ПутьКДанным);
	ИмяКолонки = Прав(Этаформа.ТекущийЭлемент.ТекущийЭлемент.ПутьКДанным,ДлинаСтроки - НомерСимвола);
	
	Возврат ИмяКолонки;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьЗначения(Команда)
	
	Если ЗначениеЗаполнено(ЗначениеЗаполнения) Тогда
		ВариантОтображения = ОтображениеКнопки.Картинка;
		Если Этаформа.ТекущийЭлемент.Имя = "Дизайны" Тогда
			Для Каждого ИндексСтроки Из ЭтаФорма.ТекущийЭлемент.ВыделенныеСтроки Цикл
				Строка = Объект.Дизайны.НайтиПоИдентификатору(ИндексСтроки);
				Если Строка <> Неопределено И Строка.Свойство(ИмяКолонкиЗаполнения) Тогда
					Строка[ИмяКолонкиЗаполнения] = ЗначениеЗаполнения;
				КонецЕсли;
			КонецЦикла;
			Элементы.ДизайныВосстановитьЗначения.Доступность = Ложь;
			Элементы.ДизайныВосстановитьЗначения.Отображение = ВариантОтображения;
		КонецЕсли;
		Если Этаформа.ТекущийЭлемент.Имя = "НоменклатурныеПозиции" Тогда
			Для Каждого ИндексСтроки Из ЭтаФорма.ТекущийЭлемент.ВыделенныеСтроки Цикл
				Строка = Объект.НоменклатурныеПозиции.НайтиПоИдентификатору(ИндексСтроки);
				Если Строка <> Неопределено И Строка.Свойство(ИмяКолонкиЗаполнения) Тогда
					Строка[ИмяКолонкиЗаполнения] = ЗначениеЗаполнения;
					СформироватьНаименованиеBSU(Строка.НомерСтроки - 1);
				КонецЕсли;
			КонецЦикла;
			Элементы.НоменклатурныеПозицииВосстановитьЗначения.Доступность = Ложь;
			Элементы.НоменклатурныеПозицииВосстановитьЗначения.Отображение = ВариантОтображения;
		КонецЕсли;
		Если Этаформа.ТекущийЭлемент.Имя = "Номенклатура" Тогда
			Для Каждого ИндексСтроки Из ЭтаФорма.ТекущийЭлемент.ВыделенныеСтроки Цикл
				Строка = Объект.Номенклатура.НайтиПоИдентификатору(ИндексСтроки);
				Если Строка <> Неопределено И Строка.Свойство(ИмяКолонкиЗаполнения) Тогда
					Строка[ИмяКолонкиЗаполнения] = ЗначениеЗаполнения;
					СформироватьНаименованиеSKU(Строка.НомерСтроки - 1);
				КонецЕсли;
			КонецЦикла;
			Элементы.НоменклатураВосстановитьЗначения.Доступность = Ложь;
			Элементы.НоменклатураВосстановитьЗначения.Отображение = ВариантОтображения;
		КонецЕсли;
		Если Этаформа.ТекущийЭлемент.Имя = "КоллекцииДляСайта" Тогда
			Для Каждого ИндексСтроки Из ЭтаФорма.ТекущийЭлемент.ВыделенныеСтроки Цикл
				Строка = Объект.КоллекцииДляСайта.НайтиПоИдентификатору(ИндексСтроки);
				Если  Строка <> Неопределено И Строка.Свойство(ИмяКолонкиЗаполнения) Тогда
					Строка[ИмяКолонкиЗаполнения] = ЗначениеЗаполнения;
				КонецЕсли;
			КонецЦикла;
			Элементы.КоллекцииДляСайтаВосстановитьЗначения.Доступность = Ложь;
			Элементы.КоллекцииДляСайтаВосстановитьЗначения.Отображение = ВариантОтображения;
		КонецЕсли;
		
		ЗначениеЗаполнения = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
	УстановитьДействияКомандНавигации()
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Если Объект.Проведен Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Если Объект.СтатусСогласования = ПредопределенноеЗначение("Перечисление.вогСтатусыСогласования.Согласован") Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		ПараметрыЗаписи = Новый Структура("РежимЗаписи",РежимЗаписи); 
		
		Записать(ПараметрыЗаписи);            
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Если Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Если Объект.СтатусСогласования = ПредопределенноеЗначение("Перечисление.вогСтатусыСогласования.Согласован") Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		ПараметрыЗаписи = Новый Структура("РежимЗаписи",РежимЗаписи); 
		
		Записать(ПараметрыЗаписи);            
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборДизайнов(Команда)
	
	Отбор = Новый Структура("НаправлениеДеятельности",Объект.НаправлениеДеятельности);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр",Истина);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму(
		"Справочник.вогДизайныНоменклатуры.ФормаВыбора",
		ПараметрыФормы,
		Элементы.Дизайны,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПодборНоменклатурныхПозиций(Команда)
	
	Отбор = Новый Структура("НаправлениеДеятельности",Объект.НаправлениеДеятельности);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр",Истина);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму(
		"Справочник.вогНоменклатурныеПозиции.ФормаВыбора",
		ПараметрыФормы,
		Элементы.НоменклатурныеПозиции,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	Отбор = Новый Структура("НаправлениеДеятельности",Объект.НаправлениеДеятельности);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр",Истина);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму(
		"Справочник.Номенклатура.ФормаВыбора",
		ПараметрыФормы,
		Элементы.Номенклатура,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКоллекцийДляСайта(Команда)
	
	Отбор = Новый Структура("НаправлениеДеятельности",Объект.НаправлениеДеятельности);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Ложь);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр",Истина);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму(
		"Справочник.КоллекцииДляСайта.ФормаВыбора",
		ПараметрыФормы,
		Элементы.КоллекцииДляСайта,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДомой(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-ПорядковыйНомерПерехода + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатурныеПозиции(Команда)
	
	Если Этаформа.ТекущийЭлемент.Имя <> "Номенклатура" Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИндексСтроки Из ЭтаФорма.ТекущийЭлемент.ВыделенныеСтроки Цикл
		Строка = Объект.Номенклатура.НайтиПоИдентификатору(ИндексСтроки);
		Если ЗначениеЗаполнено(Строка.НоменклатурнаяПозиция) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаBSU = Объект.НоменклатурныеПозиции.Добавить();
		НоваяСтрокаBSU.УИД = Новый УникальныйИдентификатор();
		Строка.УИДНоменклатурнаяПозиция = НоваяСтрокаBSU.УИД;
		НоваяСтрокаBSU.ГодАнонса = Год(ТекущаяДата());
		СформироватьНаименованиеBSU(НоваяСтрокаBSU.НомерСтроки - 1);
		Строка.НоменклатурнаяПозиция = Объект.НоменклатурныеПозиции[НоваяСтрокаBSU.НомерСтроки - 1].Наименование;
		
	КонецЦикла;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 15.01.2021 DEV-67
&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидОперации", 				Объект.ВидОперации);
	ПараметрыФормы.Вставить("НаправлениеДеятельности", 	Объект.НаправлениеДеятельности);
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры // -- VOG Солодов В.В. 15.01.2021 DEV-67

#КонецОбласти

#Область Прочее

// Формирует наименование номенклатуры по шаблону.
// Параметры:
// 	НоменклатураСсылка - СправочникСсылка.Номенклатура - элемент, для которого нужно сформировать наименование
//	ПолноеНаименование 	- Булево - признак формирования полного наименования
//	ДляBSU 	- Булево - признак формирования наименования для BSU
//
// Возвращаемое значение:
//  ШаблонНаименования - Сформированное наименование
//
&НаСервере
Функция СформироватьНаименованиеНоменклатуры(СтруктураДанных, НаправлениеДеятельности, ПолноеНаименование = Ложь, BSU = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
		Возврат "";
	КонецЕсли;
	
	ШаблонНаименования 	= "";
	
	Если НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
		
		ШаблонНаименования = "%Артикул% %ВидПлитки%";
		
		Если СтруктураДанных.ВидПлитки = "Плита" Тогда
			ШаблонНаименования = ШаблонНаименования + " %ТипСокр%";
		КонецЕсли;
		
		Если СтруктураДанных.Панно Тогда
			// +++ VOG Кулаков П.Л. 04.05.2021 DEV-428
			ШаблонНаименования = ШаблонНаименования + "%КоличествоЭлементов%" + " плиток";
			// --- VOG Кулаков П.Л.
		КонецЕсли;
		
		Если (СтруктураДанных.ВидПлитки = "Мозаика" И СтруктураДанных.Материал = "Керамич.") ИЛИ СтруктураДанных.ВидПлитки = "Спец.элемент"  Тогда
			ШаблонНаименования = ШаблонНаименования + " %Материал%";
		КонецЕсли;
		
		Если ПолноеНаименование Тогда
			ШаблонНаименования = ШаблонНаименования + " %Бренд%";
		КонецЕсли;
		
		ШаблонНаименования = ШаблонНаименования + " %Коллекция% %ЦветПроизводителя% %Комментарий%";
		
		Если СтруктураДанных.ВидПлитки = "Бордюр" ИЛИ СтруктураДанных.ВидПлитки = "Плинтус" Тогда
			ШаблонНаименования = ШаблонНаименования + " %Длина%*%Ширина%";
		Иначе
			ШаблонНаименования = ШаблонНаименования + " %Ширина%*%Длина%";
		КонецЕсли;
		
		Если Не BSU Тогда
			ШаблонНаименования = ШаблонНаименования + "_%Содержит%";
		КонецЕсли;
		
		Если СтруктураДанных.ВидПлитки = "Плита" 
				ИЛИ СтруктураДанных.ВидПлитки = "Керамогранит" 
				ИЛИ СтруктураДанных.ВидПлитки = "Ступень" Тогда
			ШаблонНаименования = ШаблонНаименования + "/%Сорт%";
		КонецЕсли;
		
	Иначе
		
		Если ПолноеНаименование Тогда
			
			ШаблонНаименования = "%Артикул% (%Содержит%) %НаправлениеДеятельности% %Тип% %Бренд%";
			
			Если ЗначениеЗаполнено(СтруктураДанных.Комментарий) Тогда
				ШаблонНаименования = ШаблонНаименования + " / %Комментарий%";
			КонецЕсли;
			
		Иначе
			ШаблонНаименования = "%Артикул% (%Содержит%) %Бренд%";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураДанных.Содержит) Тогда
			ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "(%Содержит%)", "");
		КонецЕсли;
		
	КонецЕсли;
	
	// +++ VOG Кулаков П.Л. 17.12.2020 CRM-1102
	//Если СтруктураДанных.Комментарий = "_" Тогда
	//	ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "_", "");
	//КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	Для Каждого ЭлементСтруктуры Из СтруктураДанных Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
			ШаблонНаименования = СтрЗаменить(ШаблонНаименования, " %" + ЭлементСтруктуры.Ключ + "%_", " ");
			ШаблонНаименования = СтрЗаменить(ШаблонНаименования, " %" + ЭлементСтруктуры.Ключ + "%", "");
		КонецЕсли;
			
		ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "%" + ЭлементСтруктуры.Ключ + "%", ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Возврат СокрЛП(ШаблонНаименования);
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДанныхНаименования(СтрокаТаблицы, ПоBSU)
	
	СтруктураДанных = Новый Структура;

	Панно = Ложь;
	
	Если ПоBSU Тогда
		
		// ЕдиницаПродажи
		Если ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаПродажиПлитка) Тогда
			ЕдиницаПродажи = СтрокаТаблицы.ЕдиницаПродажиПлитка;
		Иначе
			ЕдиницаПродажи = Неопределено;
		КонецЕсли;
		
		// Материал
		Если ЗначениеЗаполнено(СтрокаТаблицы.МатериалПлитка) Тогда
			Материал = СтрокаТаблицы.МатериалПлитка.НаименованиеСокращенное;
		Иначе
			Материал = "";
		КонецЕсли;
		
		// Тип использования
		Если ЗначениеЗаполнено(СтрокаТаблицы.ТипИспользования) Тогда
			Тип = СтрокаТаблицы.ТипИспользования;
			ТипСокр = СтрокаТаблицы.ТипИспользования;
		Иначе
			Тип = "";
			ТипСокр = "";
		КонецЕсли;
		
		// Реквизиты из Дизайна
		Если ЗначениеЗаполнено(СтрокаТаблицы.Дизайн) Тогда 
			Если ТипЗнч(СтрокаТаблицы.Дизайн) = Тип("Строка") Тогда 
				НайденныеСтроки = Объект.Дизайны.НайтиСтроки(Новый Структура("УИД",СтрокаТаблицы.УИДДизайн));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Коллекция 				= НайденныеСтроки[0].КоллекцияПлитки;
					Бренд 					= НайденныеСтроки[0].Бренд;
					НоменклатурнаяГруппа	= НайденныеСтроки[0].НоменклатурнаяГруппа;
					Сорт 					= НайденныеСтроки[0].Сорт;
					Размер					= НайденныеСтроки[0].ФорматПлитки;
				Иначе
					Коллекция 				= "";
					Бренд 					= "";
					Тип 					= "";
					ТипСокр					= "";
					НоменклатурнаяГруппа 	= "";
					Сорт 					= "";
					Размер					= "";
				КонецЕсли;
			Иначе
				Коллекция 				= СтрокаТаблицы.Дизайн.КоллекцияПлитки;
				Бренд 					= СтрокаТаблицы.Дизайн.Бренд;
				НоменклатурнаяГруппа 	= СтрокаТаблицы.Дизайн.НоменклатурнаяГруппа;
				Сорт 					= СтрокаТаблицы.Дизайн.Сорт;
				Размер					= СтрокаТаблицы.Дизайн.ФорматПлитки;
			КонецЕсли;
		Иначе
			Коллекция 				= "";
			Бренд 					= "";
			ТипСокр					= "";
			НоменклатурнаяГруппа 	= "";
			Сорт 					= "";
			Размер					= "";
		КонецЕсли;
		
		ДанныеBSUЗаполнены = Ложь;
		СтрокиНоменклатурыПоBSU = Объект.Номенклатура.НайтиСтроки(Новый Структура("УИДНоменклатурнаяПозиция,Основной",СтрокаТаблицы.УИД, Истина));
		Если СтрокиНоменклатурыПоBSU.Количество() = 0 Тогда
			
			Если Объект.ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
				СтруктураДанныхSKU = ПолучитьСтруктуруДанныхДляФормированияНаименованияBSU(СтрокаТаблицы.НоменклатурнаяПозицияСсылка, Истина);
				Если СтруктураДанныхSKU <> Неопределено Тогда
					Содержит = СтруктураДанныхSKU.Содержит;
					Артикул = СтруктураДанныхSKU.Артикул;
					ДлинаПлитки  = СтруктураДанныхSKU.ДлинаПлитки*100;
					ШиринаПлитки = СтруктураДанныхSKU.ШиринаПлитки*100;
					ЦветПроизводителя = СтруктураДанныхSKU.ЦветПроизводителя;
					// +++ VOG Кулаков П.Л. 05.05.2021 DEV-428
					КоличествоЭлементов = СтруктураДанныхSKU.КоличествоЭлементов;
					// --- VOG Кулаков П.Л.
					ДанныеBSUЗаполнены = Истина;
				Иначе
					СтрокиНоменклатурыПоBSU = Объект.Номенклатура.НайтиСтроки(Новый Структура("УИДНоменклатурнаяПозиция",СтрокаТаблицы.УИД));
					Если СтрокиНоменклатурыПоBSU.Количество() = 0 Тогда
						СтруктураДанныхSKU = ПолучитьСтруктуруДанныхДляФормированияНаименованияBSU(СтрокаТаблицы.НоменклатурнаяПозицияСсылка, Ложь);
						Если СтруктураДанныхSKU <> Неопределено Тогда
							Содержит = СтруктураДанныхSKU.Содержит;
							Артикул = СтруктураДанныхSKU.Артикул;
							ДлинаПлитки  = СтруктураДанныхSKU.ДлинаПлитки*100;
							ШиринаПлитки = СтруктураДанныхSKU.ШиринаПлитки*100;
							ЦветПроизводителя = СтруктураДанныхSKU.ЦветПроизводителя;
							// +++ VOG Кулаков П.Л. 05.05.2021 DEV-428
							КоличествоЭлементов = СтруктураДанныхSKU.КоличествоЭлементов;
							// --- VOG Кулаков П.Л.
							ДанныеBSUЗаполнены = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокиНоменклатурыПоBSU = Объект.Номенклатура.НайтиСтроки(Новый Структура("УИДНоменклатурнаяПозиция",СтрокаТаблицы.УИД));
			КонецЕсли;
			
			Если НЕ ДанныеBSUЗаполнены Тогда
				Если СтрокиНоменклатурыПоBSU.Количество() = 0 Тогда
					Содержит = "";
					Артикул = "";
					ДлинаПлитки  = "";
					ШиринаПлитки = "";
					ЦветПроизводителя = "";
					// +++ VOG Кулаков П.Л. 05.05.2021 DEV-428
					КоличествоЭлементов = "";
					// --- VOG Кулаков П.Л.
				Иначе
					Артикул = СтрокиНоменклатурыПоBSU[0].Артикул;
					ДлинаПлитки  = Формат(СтрокиНоменклатурыПоBSU[0].ДлинаПлитка*100,"ЧГ=0");
					ШиринаПлитки = Формат(СтрокиНоменклатурыПоBSU[0].ШиринаПлитка*100,"ЧГ=0");
					ЦветПроизводителя = СтрокиНоменклатурыПоBSU[0].ЦветПроизводителя;
					Если ЕдиницаПродажи = Справочники.вогВидыПлитки.Основная 
						ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Дополнительная
						ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Декорированная
						ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Ступень Тогда
						Содержит = Формат(СтрокиНоменклатурыПоBSU[0].КоличествоМетровВПаллетеПлитка,"ЧГ=0");
					Иначе
						Содержит = Формат(СтрокиНоменклатурыПоBSU[0].КоличествоШтукВКоробке,"ЧГ=0");
					КонецЕсли;
					// +++ VOG Кулаков П.Л. 05.05.2021 DEV-428
					КоличествоЭлементов = Формат(СтрокиНоменклатурыПоBSU[0].КоличествоСоставныхЭлементов,"ЧГ=0");
					// --- VOG Кулаков П.Л.
				КонецЕсли;
			КонецЕсли;
		Иначе
			Артикул = СтрокиНоменклатурыПоBSU[0].Артикул;
			ДлинаПлитки  = Формат(СтрокиНоменклатурыПоBSU[0].ДлинаПлитка*100,"ЧГ=0");
			ШиринаПлитки = Формат(СтрокиНоменклатурыПоBSU[0].ШиринаПлитка*100,"ЧГ=0");
			ЦветПроизводителя = СтрокиНоменклатурыПоBSU[0].ЦветПроизводителя;
			Если ЕдиницаПродажи = Справочники.вогВидыПлитки.Основная 
				ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Дополнительная
				ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Декорированная
				ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Ступень Тогда
				Содержит = Формат(СтрокиНоменклатурыПоBSU[0].КоличествоМетровВПаллетеПлитка,"ЧГ=0");
			Иначе
				Содержит = Формат(СтрокиНоменклатурыПоBSU[0].КоличествоШтукВКоробке,"ЧГ=0");
			КонецЕсли;
			// +++ VOG Кулаков П.Л. 05.05.2021 DEV-428
			КоличествоЭлементов = Формат(СтрокиНоменклатурыПоBSU[0].КоличествоСоставныхЭлементов,"ЧГ=0");
			// --- VOG Кулаков П.Л.
		КонецЕсли;
		
	Иначе
		// Артикул
		Артикул = СтрокаТаблицы.Артикул;
		
		// Длина и Ширина
		ДлинаПлитки  = Формат(СтрокаТаблицы.ДлинаПлитка*100,"ЧГ=0");
		ШиринаПлитки = Формат(СтрокаТаблицы.ШиринаПлитка*100,"ЧГ=0");
		
		// Цвет производителя
		ЦветПроизводителя = СтрокаТаблицы.ЦветПроизводителя;
		
		// Количество элементов
		КоличествоЭлементов = Формат(СтрокаТаблицы.КоличествоСоставныхЭлементов,"ЧГ=0");
		
		// Реквизиты из Дизайна
		Если ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяПозиция) Тогда
			Если ТипЗнч(СтрокаТаблицы.НоменклатурнаяПозиция) = Тип("Строка") Тогда
				НайденныеСтроки = Объект.НоменклатурныеПозиции.НайтиСтроки(Новый Структура("УИД",СтрокаТаблицы.УИДНоменклатурнаяПозиция));
				Если НайденныеСтроки.Количество() > 0 Тогда
					НоменклатурнаяПозиция = НайденныеСтроки[0];
				Иначе
					НоменклатурнаяПозиция = Неопределено;
				КонецЕсли;
			Иначе
				НоменклатурнаяПозиция = СтрокаТаблицы.НоменклатурнаяПозиция;
			КонецЕсли;
		Иначе
			НоменклатурнаяПозиция = Неопределено;
		КонецЕсли;
		
		Если НоменклатурнаяПозиция = Неопределено Тогда
			Коллекция 				= "";
			Бренд 					= "";
			Тип 					= "";
			ТипСокр					= "";
			НоменклатурнаяГруппа 	= "";
			Сорт 					= "";
			Размер					= "";
		Иначе
			Если ЗначениеЗаполнено(НоменклатурнаяПозиция.МатериалПлитка) Тогда
				Материал = НоменклатурнаяПозиция.МатериалПлитка.НаименованиеСокращенное;
			Иначе
				Материал = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоменклатурнаяПозиция.ЕдиницаПродажиПлитка) Тогда
				ЕдиницаПродажи = НоменклатурнаяПозиция.ЕдиницаПродажиПлитка;
			Иначе
				ЕдиницаПродажи = Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоменклатурнаяПозиция.ТипИспользования) Тогда
				Тип = НоменклатурнаяПозиция.ТипИспользования;
				ТипСокр = НоменклатурнаяПозиция.ТипИспользования;
			Иначе
				Тип = "";
				ТипСокр = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоменклатурнаяПозиция.Дизайн) Тогда
				Если ТипЗнч(НоменклатурнаяПозиция.Дизайн) = Тип("Строка") Тогда 
					НайденныеСтроки = Объект.Дизайны.НайтиСтроки(Новый Структура("УИД",НоменклатурнаяПозиция.УИДДизайн));
					Если НайденныеСтроки.Количество() > 0 Тогда
						Коллекция 				= НайденныеСтроки[0].КоллекцияПлитки;
						Бренд 					= НайденныеСтроки[0].Бренд;
						НоменклатурнаяГруппа	= НайденныеСтроки[0].НоменклатурнаяГруппа;
						Сорт 					= НайденныеСтроки[0].Сорт;
						Размер					= НайденныеСтроки[0].ФорматПлитки;
					Иначе
						Коллекция 				= "";
						Бренд 					= "";
						НоменклатурнаяГруппа 	= "";
						Сорт 					= "";
						Размер					= "";
					КонецЕсли;
				Иначе
					Коллекция 				= НоменклатурнаяПозиция.Дизайн.КоллекцияПлитки;
					Бренд 					= НоменклатурнаяПозиция.Дизайн.Бренд;
					НоменклатурнаяГруппа 	= НоменклатурнаяПозиция.Дизайн.НоменклатурнаяГруппа;
					Сорт 					= НоменклатурнаяПозиция.Дизайн.Сорт;
					Размер					= НоменклатурнаяПозиция.Дизайн.ФорматПлитки;
				КонецЕсли;
			Иначе
				Коллекция 				= "";
				Бренд 					= "";
				НоменклатурнаяГруппа 	= "";
				Сорт 					= "";
				Размер					= "";
			КонецЕсли;
		КонецЕсли;
		
		Если ЕдиницаПродажи = Справочники.вогВидыПлитки.Основная 
			ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Дополнительная
			ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Декорированная
			ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Ступень Тогда
			Содержит = СтрокаТаблицы.КоличествоМетровВПаллетеПлитка;
		Иначе
			Содержит = СтрокаТаблицы.КоличествоШтукВКоробке;
		КонецЕсли;
		
	КонецЕсли;
	
	// ВидПлитки
	Если ЕдиницаПродажи = Справочники.вогВидыПлитки.Основная 
			ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Дополнительная
			ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Декорированная Тогда
		Если Материал = "Керамогранит" Тогда
			ВидПлитки = "Керамогранит";
		Иначе
			ВидПлитки = "Плита";
		КонецЕсли;
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Ступень Тогда
		ВидПлитки = "Ступень";
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Штучный Тогда
		ВидПлитки = "Декор";
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Панно Тогда
		ВидПлитки = "Панно из ";
		Панно = Истина;
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Рамка Тогда
		ВидПлитки = "Декор рамка";
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Вставка Тогда
		ВидПлитки = "Декор вставка";
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Бордюр Тогда
		ВидПлитки = "Бордюр";
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Мозаика Тогда
		ВидПлитки = "Мозаика";
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Плинтус Тогда
		ВидПлитки = "Плинтус";	
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.СпецЭлемент Тогда
		ВидПлитки = "Спец.элемент";
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.СтупеньДек Тогда
		ВидПлитки = "Ступень декор.";
	Иначе
		ВидПлитки = "";
	КонецЕсли;
	
	СтруктураДанных.Вставить("Артикул"					,Артикул);
	СтруктураДанных.Вставить("Материал"					,Материал);
	СтруктураДанных.Вставить("Коллекция"				,Коллекция);
	СтруктураДанных.Вставить("Бренд"					,Бренд);
	СтруктураДанных.Вставить("Тип"						,Тип);
	СтруктураДанных.Вставить("ТипСокр"					,ТипСокр);
	СтруктураДанных.Вставить("НаправлениеДеятельности"	,Объект.НаправлениеДеятельности);
	СтруктураДанных.Вставить("НоменклатурнаяГруппа"		,НоменклатурнаяГруппа);
	СтруктураДанных.Вставить("Комментарий"				,СтрокаТаблицы.Комментарий);
	СтруктураДанных.Вставить("Сорт"						,Сорт);
	СтруктураДанных.Вставить("Содержит"					,Содержит);
	СтруктураДанных.Вставить("Размер"					,Размер);
	СтруктураДанных.Вставить("Длина"					,ДлинаПлитки);
	СтруктураДанных.Вставить("Ширина"					,ШиринаПлитки);
	СтруктураДанных.Вставить("ВидПлитки"				,ВидПлитки);
	СтруктураДанных.Вставить("КоличествоЭлементов"		,КоличествоЭлементов);
	СтруктураДанных.Вставить("Панно"					,Панно);
	СтруктураДанных.Вставить("ЦветПроизводителя"		,ЦветПроизводителя);
	                                                
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДанныхДляФормированияНаименованияBSU(НоменклатурнаяПозиция, Основная)
	
	ЕдиницаШтуки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"); // Штуки
	ЕдиницаКоробки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("8751"); // Корбоки
	ЕдиницаПаллеты	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("005"); // Паллеты
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Артикул КАК Артикул,
		|	Номенклатура.ЦветПроизводителя КАК ЦветПроизводителя,
		|	ЕСТЬNULL(ЕдиницыИзмеренияШтуки.Длина, 0) КАК ДлинаПлитки,
		|	ЕСТЬNULL(ЕдиницыИзмеренияШтуки.Ширина, 0) КАК ШиринаПлитки,
		|	ВЫБОР
		|		КОГДА Номенклатура.НоменклатурнаяПозиция.ЕдиницаПродажиПлитка В (&ЕдиницыПродажи)
		|			ТОГДА ЕдиницыИзмеренияПаллеты.Содержит
		|		ИНАЧЕ ЕдиницыИзмеренияКоробки.Содержит
		|	КОНЕЦ КАК Содержит,
		// +++ VOG Кулаков П.Л. 05.05.2021 DEV-428
		|	Номенклатура.КоличествоСоставныхЭлементов КАК КоличествоЭлементов
		// --- VOG Кулаков П.Л.
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмеренияШтуки
		|		ПО Номенклатура.Ссылка = ЕдиницыИзмеренияШтуки.Владелец
		|			И (ЕдиницыИзмеренияШтуки.ЕдиницаПоКлассификатору = &ЕдиницаШтуки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмеренияКоробки
		|		ПО Номенклатура.Ссылка = ЕдиницыИзмеренияКоробки.Владелец
		|			И (ЕдиницыИзмеренияКоробки.ЕдиницаПоКлассификатору = &ЕдиницаКоробки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмеренияПаллеты
		|		ПО Номенклатура.Ссылка = ЕдиницыИзмеренияПаллеты.Владелец
		|			И (ЕдиницыИзмеренияПаллеты.ЕдиницаПоКлассификатору = &ЕдиницаПаллеты)
		|ГДЕ
		|	Номенклатура.Основной = &Основная
		|	И Номенклатура.НоменклатурнаяПозиция = &НоменклатурнаяПозиция";
	
	Запрос.УстановитьПараметр("ЕдиницаКоробки", ЕдиницаКоробки);
	Запрос.УстановитьПараметр("ЕдиницаПаллеты", ЕдиницаПаллеты);
	Запрос.УстановитьПараметр("ЕдиницаШтуки", ЕдиницаШтуки);
	Запрос.УстановитьПараметр("Основная", Основная);
	Запрос.УстановитьПараметр("НоменклатурнаяПозиция", НоменклатурнаяПозиция);
	
	ЕдиницыПродажи = Новый Массив;
	ЕдиницыПродажи.Добавить(Справочники.вогВидыПлитки.Основная);
	ЕдиницыПродажи.Добавить(Справочники.вогВидыПлитки.Дополнительная);
	ЕдиницыПродажи.Добавить(Справочники.вогВидыПлитки.Декорированная);
	ЕдиницыПродажи.Добавить(Справочники.вогВидыПлитки.Ступень);
	
	Запрос.УстановитьПараметр("ЕдиницыПродажи", ЕдиницыПродажи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	// +++ VOG Кулаков П.Л. 05.05.2021 DEV-428
	СтруктураВозврата = Новый Структура("Артикул, ЦветПроизводителя, ДлинаПлитки, ШиринаПлитки, Содержит, КоличествоЭлементов", "", "", "", "", "", "");
	// --- VOG Кулаков П.Л.
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата,ВыборкаДетальныеЗаписи);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
	УстановитьДействияКомандНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 1 Тогда
		
		ПорядковыйНомерПерехода = 1;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// Обработчик ПриПереходеДалее.
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			РезультатВычисления = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
				
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьПоНаправлениюДеятельности(ОтобразитьВсе = Истина)
	
	Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка") Тогда
		 НаправлениеПлитка = Истина;
	 Иначе
		 НаправлениеПлитка = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДизайны(НаправлениеПлитка);
	УстановитьВидимостьНоменклатурныеПозиции(НаправлениеПлитка);
	УстановитьВидимостьНоменклатура(НаправлениеПлитка);
	УстановитьВидимостьВспомогательныхТабличныхЧастей(НаправлениеПлитка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьВспомогательныхТабличныхЧастей(НаправлениеПлитка)
	
	Элементы.НоменклатураСоставМозаики.Видимость	= НаправлениеПлитка;
	Элементы.ГруппаНоменклатураОбоиТЧ.Видимость		= НЕ НаправлениеПлитка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДизайны(НаправлениеПлитка, ОтобразитьВсе = Истина)
	
	Если ОтобразитьВсе Тогда
		Элементы.ДизайныФорматПлитки.Видимость 					= НаправлениеПлитка;
		Элементы.ДизайныТипРисункаОбои.Видимость 				= НЕ НаправлениеПлитка;
		Элементы.ДизайныРаппортОбои.Видимость 					= НЕ НаправлениеПлитка;
		Элементы.ДизайныСдвигОбои.Видимость 					= НЕ НаправлениеПлитка;
		Элементы.ДизайныПоверхностьОбои.Видимость 				= НЕ НаправлениеПлитка;
		Элементы.ДизайныКоллекцияПлитки.Видимость 				= НаправлениеПлитка;
		Элементы.ДизайныСорт.Видимость 							= НаправлениеПлитка;
		Элементы.ДизайныДекорОбои.Видимость 					= НЕ НаправлениеПлитка;
		Элементы.ДизайныСтильРисункаОбои.Видимость				= НЕ НаправлениеПлитка;
		Элементы.ДизайныРазмерРисункаОбои.Видимость				= НЕ НаправлениеПлитка;
		Элементы.ДизайныЭлементРисунка.Видимость				= НЕ НаправлениеПлитка;
		Элементы.ДизайныРазмерПолосыОбои.Видимость				= НЕ НаправлениеПлитка;
		Элементы.ДизайныСтруктураОбои.Видимость					= НЕ НаправлениеПлитка;
		Элементы.ДизайныРасположениеСтруктурыОбои.Видимость		= НЕ НаправлениеПлитка;
		Элементы.ДизайныРазмерСтруктурыОбои.Видимость			= НЕ НаправлениеПлитка;
		Элементы.ДизайныТипДизайна.Видимость					= НЕ НаправлениеПлитка;
		Элементы.ДизайныСтильРисункаПроизводителя.Видимость		= НЕ НаправлениеПлитка;
		Элементы.ДизайныКоллекцияПлитки.Видимость				= НаправлениеПлитка;
	Иначе
		Элементы.ДизайныФорматПлитки.Видимость 					= НаправлениеПлитка;
		Элементы.ДизайныСорт.Видимость 							= НаправлениеПлитка;
		
		Элементы.ДизайныТипРисункаОбои.Видимость 				= Ложь;
		Элементы.ДизайныРаппортОбои.Видимость 					= Ложь;
		Элементы.ДизайныСдвигОбои.Видимость 					= Ложь;
		Элементы.ДизайныПоверхностьОбои.Видимость 				= Ложь;
		Элементы.ДизайныКоллекцияПлитки.Видимость 				= Ложь;
		Элементы.ДизайныДекорОбои.Видимость 					= Ложь;
		Элементы.ДизайныСтильРисункаОбои.Видимость              = Ложь;
		Элементы.ДизайныРазмерРисункаОбои.Видимость				= Ложь;
		Элементы.ДизайныЭлементРисунка.Видимость				= Ложь;
		Элементы.ДизайныРазмерПолосыОбои.Видимость				= Ложь;
		Элементы.ДизайныСтруктураОбои.Видимость					= Ложь;
		Элементы.ДизайныРасположениеСтруктурыОбои.Видимость		= Ложь;
		Элементы.ДизайныРазмерСтруктурыОбои.Видимость			= Ложь;
		Элементы.ДизайныКоллекцияПлитки.Видимость				= Ложь;
		Элементы.ДизайныТипДизайна.Видимость					= Ложь;
		Элементы.ДизайныСтильРисункаПроизводителя.Видимость		= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьНоменклатурныеПозиции(НаправлениеПлитка, ОтобразитьВсе = Истина)
	
	Если ОтобразитьВсе Тогда
		Элементы.НоменклатурныеПозицииЕдиницаПродажиПлитка.Видимость 	= НаправлениеПлитка;
		Элементы.НоменклатурныеПозицииРектификацияПлитка.Видимость 		= НаправлениеПлитка;
		Элементы.НоменклатурныеПозицииВидыПоверхностиПлитка.Видимость 	= НаправлениеПлитка;
		Элементы.НоменклатурныеПозицииМатериалПлитка.Видимость 			= НаправлениеПлитка;
		Элементы.НоменклатурныеПозицииТипИспользования.Видимость 		= НаправлениеПлитка;
		Элементы.НоменклатурныеПозицииСтатусПлитка.Видимость			= НаправлениеПлитка;
		Элементы.НоменклатурныеПозицииРейтингХолдинга.Видимость			= НаправлениеПлитка;
		Элементы.НоменклатурныеПозицииГодАнонса.Видимость				= НаправлениеПлитка;
		Элементы.НоменклатурныеПозицииГруппировкаПоставщика.Видимость	= НаправлениеПлитка;
	Иначе
		Элементы.НоменклатурныеПозицииЕдиницаПродажиПлитка.Видимость 	= НаправлениеПлитка;
		Элементы.НоменклатурныеПозицииМатериалПлитка.Видимость 			= НаправлениеПлитка;
		Элементы.НоменклатурныеПозицииТипИспользования.Видимость 		= НаправлениеПлитка;
		Элементы.НоменклатурныеПозицииСтатусПлитка.Видимость			= НаправлениеПлитка;
		Элементы.НоменклатурныеПозицииРейтингХолдинга.Видимость			= НаправлениеПлитка;
		Элементы.НоменклатурныеПозицииГодАнонса.Видимость				= НаправлениеПлитка;
		
		Элементы.НоменклатурныеПозицииГруппировкаПоставщика.Видимость	= Ложь;
		Элементы.НоменклатурныеПозицииРектификацияПлитка.Видимость 		= Ложь;
		Элементы.НоменклатурныеПозицииВидыПоверхностиПлитка.Видимость 	= Ложь;
	КонецЕсли;
	
	Элементы.НоменклатурныеПозицииСтатусПлитка.АвтоОтметкаНезаполненного	= НаправлениеПлитка;
	Элементы.НоменклатурныеПозицииРейтингХолдинга.АвтоОтметкаНезаполненного = НаправлениеПлитка;
	//Элементы.НоменклатурныеПозицииГодАнонса.АвтоОтметкаНезаполненного 		= НаправлениеПлитка; Кайдашов DEV-167
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьНоменклатура(НаправлениеПлитка, ОтобразитьВсе = Истина)
	
	Если ОтобразитьВсе Тогда
		Элементы.НоменклатураЦветПроизводителя.Видимость				= НаправлениеПлитка;
		Элементы.НоменклатураЗаводскойАртикул.Видимость 				= НаправлениеПлитка;
		Элементы.НоменклатураДатаЗапуска.Видимость 						= НЕ НаправлениеПлитка;
		Элементы.НоменклатураДатаСнятия.Видимость 						= НЕ НаправлениеПлитка;
		Элементы.НоменклатураКоличествоСоставныхЭлементов.Видимость 	= НаправлениеПлитка;
		Элементы.НоменклатураДлинаСоставногоЭлемента.Видимость 			= НаправлениеПлитка;
		Элементы.НоменклатураШиринаСоставногоЭлемента.Видимость 		= НаправлениеПлитка;
		Элементы.НоменклатураКоличествоМетровВКоробкеПлитка.Видимость 	= НаправлениеПлитка;
		Элементы.НоменклатураДлинаПлитка.Видимость 						= НаправлениеПлитка;
		Элементы.НоменклатураВысотаПлитка.Видимость 					= НаправлениеПлитка;
		Элементы.НоменклатураШиринаПлитка.Видимость 					= НаправлениеПлитка;
		Элементы.НоменклатураКоличествоМетровВПаллетеПлитка.Видимость 	= НаправлениеПлитка;
		Элементы.НоменклатураСтрана.Видимость							= НаправлениеПлитка;
		Элементы.НоменклатураОсновной.Видимость							= НаправлениеПлитка;
		Элементы.НоменклатураШтрихкод.Видимость							= Истина;
		Элементы.НоменклатураШтрихкодШТ.Видимость						= Истина;
		Элементы.НоменклатураРейтинг.Видимость							= НаправлениеПлитка;
		Элементы.НоменклатураСтатус.Видимость							= НаправлениеПлитка;
		
		Элементы.НоменклатураДатаПоследнегоТиража.Видимость				= НЕ НаправлениеПлитка;
		Элементы.НоменклатураЦеновойСегментФабрики.Видимость			= НЕ НаправлениеПлитка;
		Элементы.НоменклатураЦеноваяГруппа.Видимость					= НЕ НаправлениеПлитка;
	Иначе
		Элементы.НоменклатураЦветПроизводителя.Видимость				= НаправлениеПлитка;
		Элементы.НоменклатураРейтинг.Видимость							= НаправлениеПлитка;
		Элементы.НоменклатураЗаводскойАртикул.Видимость 				= НаправлениеПлитка;
		Элементы.НоменклатураСтрана.Видимость							= НаправлениеПлитка;
		Элементы.НоменклатураОсновной.Видимость							= НаправлениеПлитка;
		Элементы.НоменклатураСтатус.Видимость							= НаправлениеПлитка;
		
		Элементы.НоменклатураКоличествоМетровВКоробкеПлитка.Видимость 	= НаправлениеПлитка;
		Элементы.НоменклатураКоличествоМетровВПаллетеПлитка.Видимость 	= НаправлениеПлитка;
		
		Элементы.НоменклатураДлинаПлитка.Видимость 						= НаправлениеПлитка;
		Элементы.НоменклатураВысотаПлитка.Видимость 					= НаправлениеПлитка;
		Элементы.НоменклатураШиринаПлитка.Видимость 					= НаправлениеПлитка;
		Элементы.НоменклатураДатаЗапуска.Видимость 						= Ложь;
		Элементы.НоменклатураДатаСнятия.Видимость 						= Ложь;
		Элементы.НоменклатураКоличествоСоставныхЭлементов.Видимость 	= Ложь;
		Элементы.НоменклатураДлинаСоставногоЭлемента.Видимость 			= Ложь;
		Элементы.НоменклатураШиринаСоставногоЭлемента.Видимость 		= Ложь;
		Элементы.НоменклатураШтрихкод.Видимость							= Ложь;
		Элементы.НоменклатураШтрихкодШТ.Видимость						= Ложь;
		
		Элементы.НоменклатураДатаПоследнегоТиража.Видимость				= Ложь;
		Элементы.НоменклатураЦеновойСегментФабрики.Видимость			= Ложь;
		Элементы.НоменклатураЦеноваяГруппа.Видимость					= Ложь;
	КонецЕсли;
	
	Элементы.НоменклатураКоличествоМетровВКоробкеПлитка.АвтоОтметкаНезаполненного 	= НаправлениеПлитка;
	Элементы.НоменклатураКоличествоМетровВПаллетеПлитка.АвтоОтметкаНезаполненного 	= НаправлениеПлитка;
	
	Элементы.НоменклатураЗаполнитьНоменклатурныеПозиции.Видимость = НаправлениеПлитка;
	
	// +++ VOG Кулаков П.Л. 16.11.2020 CRM-1045
	Элементы.НоменклатураДлинаПлитка.АвтоОтметкаНезаполненного 	= НаправлениеПлитка;
	Элементы.НоменклатураВысотаПлитка.АвтоОтметкаНезаполненного = НаправлениеПлитка;
	Элементы.НоменклатураШиринаПлитка.АвтоОтметкаНезаполненного = НаправлениеПлитка;
	Элементы.НоменклатураРейтинг.АвтоОтметкаНезаполненного		= НаправлениеПлитка;
	Элементы.НоменклатураСтатус.АвтоОтметкаНезаполненного		= НаправлениеПлитка;
	// --- VOG Кулаков П.Л.
	
	Если НаправлениеПлитка Тогда
		ЗаголовокПоля = "Кол-во шт. в кор.";
	Иначе
		ЗаголовокПоля = "Кол-во рул. в кор.";
	КонецЕсли;	
	Элементы.НоменклатураКоличествоШтукВКоробке.Заголовок 			= ЗаголовокПоля;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуBSU(НоменклатурнаяПозиция, ЗаполнитьПоСсылке = Ложь)
	
	НоваяСтрокаBSU = Объект.НоменклатурныеПозиции.Добавить();
	Если ЗначениеЗаполнено(НоменклатурнаяПозиция) И ЗаполнитьПоСсылке Тогда
		НоваяСтрокаBSU.УИД = НоменклатурнаяПозиция.УникальныйИдентификатор();
		ЗаполнитьСтрокуПоСсылке(НоменклатурнаяПозиция,НоваяСтрокаBSU.НомерСтроки - 1,"НоменклатурныеПозиции");
		НоваяСтрокаBSU.НоменклатурнаяПозицияСсылка = НоменклатурнаяПозиция;
		СформироватьНаименованиеBSU(НоваяСтрокаBSU.НомерСтроки - 1);
	Иначе
		НоваяСтрокаBSU.УИД = Новый УникальныйИдентификатор();
		НоваяСтрокаBSU.ГодАнонса = Год(ТекущаяДата());
		НоменклатурнаяПозиция = Объект.НоменклатурныеПозиции[НоваяСтрокаBSU.НомерСтроки - 1].Наименование;
	КонецЕсли;
	
	Возврат НоваяСтрокаBSU.УИД;
	
КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуSKU(СтрокаBSU, ЗаполнитьПоСсылке = Ложь)
		
	НоваяСтрокаSKU = Объект.Номенклатура.Добавить();
	Если НЕ ЗаполнитьПоСсылке Тогда 
		НоваяСтрокаSKU.УИД = Новый УникальныйИдентификатор();
	КонецЕсли;
	НоваяСтрокаSKU.УИДНоменклатурнаяПозиция = СтрокаBSU.УИД;
	Если Не ЗначениеЗаполнено(НоваяСтрокаSKU.Страна) Тогда 
		НоваяСтрокаSKU.Страна = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли;
	НоваяСтрокаSKU.УсловияХранения = ПредопределенноеЗначение("Перечисление.вогУсловияХранения.Склад");
	ЗаполнитьЕдиницыИзмеренияНаСервере(НоваяСтрокаSKU.НомерСтроки-1);
	
	Если ЗаполнитьПоСсылке Тогда
		SKU = ПолучитьСсылкуНаSKU(СтрокаBSU.НоменклатурнаяПозицияСсылка);
		Если SKU <> Неопределено Тогда
			ЗаполнитьСтрокуПоСсылке(SKU,НоваяСтрокаSKU.НомерСтроки - 1,"Номенклатура");
			НоваяСтрокаSKU.НоменклатураСсылка = SKU;
			НоваяСтрокаSKU.УИД = SKU.УникальныйИдентификатор();
			СформироватьНаименованиеSKU(НоваяСтрокаSKU.НомерСтроки-1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НоваяСтрокаSKU;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаSKU(НоменклатурнаяПозиция)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.НоменклатурнаяПозиция = &НоменклатурнаяПозиция";
	
	Запрос.УстановитьПараметр("НоменклатурнаяПозиция", НоменклатурнаяПозиция);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции 

&НаСервере
Процедура СформироватьНаименованиеBSU(НомерСтроки = Неопределено)
	
	Если НомерСтроки <> Неопределено Тогда
		ТекущаяСтрока = Объект.НоменклатурныеПозиции[НомерСтроки];
		СтруктураДанных = ПолучитьСтруктуруДанныхНаименования(ТекущаяСтрока,Истина);
		ТекущаяСтрока.Наименование = СформироватьНаименованиеНоменклатуры(СтруктураДанных,Объект.НаправлениеДеятельности,Истина,Истина);
		НайденныеСтрокиSKU = Объект.Номенклатура.НайтиСтроки(Новый Структура("УИДНоменклатурнаяПозиция",ТекущаяСтрока.УИД));
		Для Каждого Строка Из НайденныеСтрокиSKU Цикл
			Строка.НоменклатурнаяПозиция = ТекущаяСтрока.Наименование;
			СтруктураДанных = ПолучитьСтруктуруДанныхНаименования(Строка,Ложь);
			НаименованиеSKU = СформироватьНаименованиеНоменклатуры(СтруктураДанных,Объект.НаправлениеДеятельности,Ложь);
			Строка.Наименование = НаименованиеSKU;
			ЗаполнитьЕдиницыИзмеренияНаСервере(Строка.НомерСтроки-1);	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаименованиеSKU(НомерСтроки = Неопределено)
	
	Если НомерСтроки <> Неопределено Тогда
		ТекущаяСтрока = Объект.Номенклатура[НомерСтроки];
		СтруктураДанных = ПолучитьСтруктуруДанныхНаименования(ТекущаяСтрока, Ложь);
		ТекущаяСтрока.Наименование = СформироватьНаименованиеНоменклатуры(СтруктураДанных,Объект.НаправлениеДеятельности,Ложь);
		ТекущаяСтрока.НаименованиеПолное = СформироватьНаименованиеНоменклатуры(СтруктураДанных,Объект.НаправлениеДеятельности,Истина);
		Если ТипЗнч(ТекущаяСтрока.НоменклатурнаяПозиция) = Тип("Строка") Тогда
			НайденныеСтрокиBSU = Объект.НоменклатурныеПозиции.НайтиСтроки(Новый Структура("УИД",ТекущаяСтрока.УИДНоменклатурнаяПозиция));
			Если НайденныеСтрокиBSU.Количество() > 0 Тогда
				СтруктураДанных = ПолучитьСтруктуруДанныхНаименования(НайденныеСтрокиBSU[0], Истина);
				НаименованиеBSU = СформироватьНаименованиеНоменклатуры(СтруктураДанных,Объект.НаправлениеДеятельности,Истина,Истина);
				НайденныеСтрокиBSU[0].Наименование = НаименованиеBSU;
				ТекущаяСтрока.НоменклатурнаяПозиция = НаименованиеBSU;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 15.01.2021 DEV-67
&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	РежимСоздания = (Объект.ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		
		// Заполнение SKU
		ДобавитьSKU 	= Истина;
		ДобавитьBSU 	= Истина;
		
		Если Не РежимСоздания Тогда
			ПараметрыОтбора = Новый Структура("НоменклатураСсылка", СтрокаТоваров.Номенклатура);
			НайденныеСтроки = Объект.Номенклатура.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				ДобавитьSKU = Ложь;
				СтрокаSKU 	= НайденныеСтроки[0];
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавитьSKU Тогда
			
			СтрокаSKU 		= Объект.Номенклатура.Добавить();
			ИндексСтроки 	= Объект.Номенклатура.Индекс(СтрокаSKU);
			
			Если Не РежимСоздания Тогда
				
				СтрокаSKU.НоменклатураСсылка 	= СтрокаТоваров.Номенклатура;
				ЗаполнитьСтрокуПоСсылке(СтрокаSKU.НоменклатураСсылка, ИндексСтроки, "Номенклатура");
				СтрокаSKU.УИД 					= СтрокаТоваров.Номенклатура.УникальныйИдентификатор();
				
			Иначе
				СтрокаSKU.УИД = Новый УникальныйИдентификатор();
			КонецЕсли;
			
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "Артикул", СтрокаТоваров.Артикул);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "ЗаводскойАртикул", СтрокаТоваров.ЗаводскойАртикул);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "Штрихкод", СтрокаТоваров.ШтрихкодКор);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "ШтрихкодШТ", СтрокаТоваров.ШтрихкодЕд);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "ДлинаПлитка", СтрокаТоваров.Длина);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "ШиринаПлитка", СтрокаТоваров.Ширина);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "ВысотаПлитка", СтрокаТоваров.Высота);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "КоличествоШтукВКоробке", СтрокаТоваров.КоличествоШтВКор);
			
			// +++ VOG Кулаков П.Л. 04.05.2021 DEV-270
			Если Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
				Если СтрокаSKU.ДлинаПлитка <> 0 Тогда
					СтрокаSKU.ДлинаКоробки 			= СтрокаSKU.ДлинаПлитка + 0.007;
				КонецЕсли;
				Если СтрокаSKU.ШиринаПлитка <> 0 Тогда
					СтрокаSKU.ШиринаКоробки 		= СтрокаSKU.ШиринаПлитка + 0.007;
				КонецЕсли;
				Если СтрокаSKU.КоличествоШтукВКоробке <> 0 Тогда
					СтрокаSKU.ВысотаКоробки 		= СтрокаSKU.КоличествоШтукВКоробке * 0.009 + 0.014;
				КонецЕсли;
			КонецЕсли;
			// --- VOG Кулаков П.Л.
			
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "КоличествоКоробокВПаллете", СтрокаТоваров.КоличествоКорВПалл);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "ВесКоробки", СтрокаТоваров.ВесКор);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "ЦветПроизводителя", СтрокаТоваров.Цвет);
			
			Если РежимСоздания Тогда
				СтрокаSKU.Страна 				= Справочники.СтраныМира.Россия;
				СтрокаSKU.Основной 				= Истина;
			КонецЕсли;
			
			СформироватьНаименованиеSKU(ИндексСтроки);
			ЗаполнитьЕдиницыИзмеренияНаСервере(ИндексСтроки);
			ПересчитатьКоличествоМ2ВКоробке(ИндексСтроки);
			
			ЗаполнитьСтрокуПоСтрокеЗагрузки(
				СтрокаSKU,
				"КоличествоМетровВКоробкеПлитка",
				СтрокаТоваров.Длина * СтрокаТоваров.Ширина * СтрокаТоваров.КоличествоШтВКор);
			
			ЗаполнитьСтрокуПоСтрокеЗагрузки(
				СтрокаSKU,
				"КоличествоМетровВПаллетеПлитка",
				СтрокаSKU.КоличествоМетровВКоробкеПлитка * СтрокаТоваров.КоличествоКорВПалл);
			
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "Рейтинг", СтрокаТоваров.Рейтинг);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "Статус", СтрокаТоваров.Статус);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "вогПроизводитель", СтрокаТоваров.Производитель);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "Комментарий", СтрокаТоваров.КомментарийSKU);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаSKU, "УсловияХранения", СтрокаТоваров.УсловияХранения);
			
		КонецЕсли;
		
		// Заполнение BSU
		Если Не РежимСоздания Тогда
			ПараметрыОтбора = Новый Структура("НоменклатурнаяПозицияСсылка", СтрокаSKU.НоменклатураСсылка.НоменклатурнаяПозиция);
			НайденныеСтроки = Объект.НоменклатурныеПозиции.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				ДобавитьBSU = Ложь;
				СтрокаBSU = НайденныеСтроки[0];
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавитьBSU Тогда
			
			СтрокаBSU 		= Объект.НоменклатурныеПозиции.Добавить();
			ИндексСтроки 	= Объект.НоменклатурныеПозиции.Индекс(СтрокаBSU);
			
			Если Не РежимСоздания Тогда
				СтрокаBSU.НоменклатурнаяПозицияСсылка 	= СтрокаSKU.НоменклатурнаяПозиция;
				ЗаполнитьСтрокуПоСсылке(СтрокаBSU.НоменклатурнаяПозицияСсылка, ИндексСтроки, "НоменклатурныеПозиции");
				СтрокаBSU.УИД 							= СтрокаBSU.НоменклатурнаяПозицияСсылка.УникальныйИдентификатор();
			Иначе
				СтрокаBSU.УИД 							= Новый УникальныйИдентификатор();
				// +++ VOG Кулаков П.Л. 24.02.2021 DEV-195
				//СтрокаBSU.ГодАнонса 					= Год(ТекущаяДата());
				// --- VOG Кулаков П.Л.
			КонецЕсли;
			
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаBSU, "РектификацияПлитка", СтрокаТоваров.Ректификация);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаBSU, "ВидыПоверхностиПлитка", СтрокаТоваров.ВидПоверхности);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаBSU, "МатериалПлитка", СтрокаТоваров.Материал);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаBSU, "ЕдиницаПродажиПлитка", СтрокаТоваров.ЕдиницаПродажи);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаBSU, "ТипИспользования", СтрокаТоваров.ТипИспользованияНоменклатуры);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаBSU, "РейтингХолдинга", СтрокаТоваров.Рейтинг);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаBSU, "Комментарий", СтрокаТоваров.КомментарийBSU);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаBSU, "СтатусПлитка", СтрокаТоваров.Статус);
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаBSU, "ГруппировкаПоставщика", СтрокаТоваров.ГруппировкаПоставщика);
			// +++ VOG Кулаков П.Л. 24.02.2021 DEV-195
			ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаBSU, "ГодАнонса", СтрокаТоваров.ГодАнонса);
			// --- VOG Кулаков П.Л.
			
		КонецЕсли;
		
		СтрокаSKU.УИДНоменклатурнаяПозиция = СтрокаBSU.УИД;
		
		Если ДобавитьBSU Тогда
			СформироватьНаименованиеBSU(ИндексСтроки);
		КонецЕсли;
		
		// Заполнение дизайна
		Если ЗначениеЗаполнено(СтрокаТоваров.Дизайн) Тогда
			
			ДизайнНайден 	= Ложь;
			ДобавитьДизайн 	= Истина;
			
			Если ТипЗнч(СтрокаТоваров.Дизайн) = Тип("СправочникСсылка.вогДизайныНоменклатуры")
				И ЗначениеЗаполнено(СтрокаТоваров.Дизайн) Тогда
				ДизайнНайден 		= Истина;
			КонецЕсли;
			
			Если РежимСоздания Тогда
				ПараметрыОтбора = Новый Структура("Наименование", СтрокаТоваров.Дизайн);
			Иначе
				ПараметрыОтбора = Новый Структура("ДизайнСсылка", СтрокаТоваров.Дизайн);
			КонецЕсли;
			
			НайденныеСтроки = Объект.Дизайны.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ДобавитьДизайн = Ложь;
				СтрокаДизайн = НайденныеСтроки[0];
			КонецЕсли;
			
			Если ДизайнНайден Или РежимСоздания Тогда
				СтрокаBSU.Дизайн 	= СтрокаТоваров.Дизайн;
			КонецЕсли;
			
			Если ДобавитьДизайн Тогда
				
				Если Не ДизайнНайден И РежимСоздания Тогда
					СтрокаДизайн = Объект.Дизайны.Добавить();
					СтрокаДизайн.Наименование 	= СтрокаТоваров.Дизайн;
				ИначеЕсли ДизайнНайден И Не РежимСоздания Тогда
					СтрокаДизайн = Объект.Дизайны.Добавить();
					СтрокаДизайн.ДизайнСсылка 	= СтрокаТоваров.Дизайн;
					ИндексСтроки 	= Объект.Дизайны.Индекс(СтрокаДизайн);
					ЗаполнитьСтрокуПоСсылке(СтрокаДизайн.ДизайнСсылка, ИндексСтроки, "Дизайны");
				Иначе
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаДизайн, "Бренд", СтрокаТоваров.Бренд);
				
				ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаДизайн, "НоменклатурнаяГруппа", СтрокаТоваров.НоменклатурнаяГруппа);
				ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаДизайн, "КоллекцияПлитки", СтрокаТоваров.КоллекцияПлитки);
				ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаДизайн, "ТипНоменклатуры", СтрокаТоваров.НазначениеКоллекции);
				ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаДизайн, "Сорт", СтрокаТоваров.Сорт);
				ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаДизайн, "ФорматПлитки", СтрокаТоваров.ФорматКоллекции);
				
				Если ДизайнНайден Тогда
					СтрокаДизайн.УИД = СтрокаТоваров.Дизайн.УникальныйИдентификатор();
				Иначе
					СтрокаДизайн.УИД = Новый УникальныйИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаBSU.УИДДизайн = СтрокаДизайн.УИД;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Видимость команд перехода
	Если (Не Объект.ТаблицаДизайны И Объект.Дизайны.Количество() > 0)
		Или Не Объект.ТаблицаНоменклатура
		Или Не Объект.ТаблицаНоменклатурныеПозиции Тогда
		
		ИмяТекущейСтраницы = "";
		
		Если Не Объект.ТаблицаДизайны Тогда
			Объект.ТаблицаДизайны 			= (Объект.Дизайны.Количество() > 0);
		КонецЕсли;
		Объект.ТаблицаНоменклатура 			= Истина;
		Объект.ТаблицаНоменклатурныеПозиции = Истина;
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
		
		Для Каждого ТекущаяСтрокаПерехода Из СтрокиПерехода Цикл
			ИмяТекущейСтраницы = ТекущаяСтрокаПерехода.ИмяОсновнойСтраницы;
		КонецЦикла;
		
		ЗаполнитьТаблицуПереходовДляПросмотра(Истина);
		
		Если Не ПустаяСтрока(ИмяТекущейСтраницы) Тогда
			
			СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ИмяОсновнойСтраницы", ИмяТекущейСтраницы));
			
			Для Каждого ТекущаяСтрокаПерехода Из СтрокиПерехода Цикл
				ПорядковыйНомерПерехода = ТекущаяСтрокаПерехода.ПорядковыйНомерПерехода;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуПоСтрокеЗагрузки(СтрокаТаблицы, ИмяРеквизита, ЗначениеЗаполнения)
	
	Если Не ЗначениеЗаполнено(ЗначениеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы[ИмяРеквизита] = ЗначениеЗаполнения;
	
КонецПроцедуры
// -- VOG Солодов В.В. 15.01.2021 DEV-67

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НоменклатураСоставМозаикиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Истина);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	МассивНоменклатуры = Новый Массив();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание") Тогда
		Для Каждого Строка Из Объект.Номенклатура Цикл
			Если Строка.Наименование = "" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураНоменклатуры = Новый Структура("Наименование,УИД");
			СтруктураНоменклатуры.Наименование = Строка.Наименование;
			СтруктураНоменклатуры.УИД = Строка.УИД;
			МассивНоменклатуры.Добавить(СтруктураНоменклатуры);
		КонецЦикла;
	КонецЕсли;
	ПараметрыФормы.Вставить("СписокНоменклатуры",МассивНоменклатуры);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",Объект.НаправлениеДеятельности);
	
	ОткрытьФорму(
		"Документ.вогМастерСозданияИРедактированияНоменклатуры.Форма.ФормаВыбораНоменклатуры",
		ПараметрыФормы,
		Элементы.НоменклатураСоставМозаикиНоменклатура,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураКомпаньоныКоллекцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.Номенклатура.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураКомпаньоныКомпаньонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Истина);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	МассивНоменклатуры = Новый Массив();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание") Тогда
		Для Каждого Строка Из Объект.Номенклатура Цикл
			Если Строка.Наименование = "" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураНоменклатуры = Новый Структура("Наименование,УИД");
			СтруктураНоменклатуры.Наименование = Строка.Наименование;
			СтруктураНоменклатуры.УИД = Строка.УИД;
			МассивНоменклатуры.Добавить(СтруктураНоменклатуры);
		КонецЦикла;
	КонецЕсли;
	ПараметрыФормы.Вставить("СписокНоменклатуры",МассивНоменклатуры);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",Объект.НаправлениеДеятельности);
	
	ОткрытьФорму(
		"Документ.вогМастерСозданияИРедактированияНоменклатуры.Форма.ФормаВыбораНоменклатуры",
		ПараметрыФормы,
		Элементы.НоменклатураКомпаньоныКомпаньон,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураКомпаньоныКомпаньонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НоменклатураКомпаньоны.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда 
			ТекущиеДанные.Компаньон 		= ВыбранноеЗначение;
			ТекущиеДанные.УИДНоменклатура	= "";
		Иначе
			ТекущиеДанные.Компаньон 		= ВыбранноеЗначение.Наименование;
			ТекущиеДанные.УИДНоменклатура	= ВыбранноеЗначение.УИД;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураСоставМозаикиНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НоменклатураСоставМозаики.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда 
			ТекущиеДанные.Номенклатура 		= ВыбранноеЗначение;
			ТекущиеДанные.УИДНоменклатура	= "";
		Иначе
			ТекущиеДанные.Номенклатура 		= ВыбранноеЗначение.Наименование;
			ТекущиеДанные.УИДНоменклатура	= ВыбранноеЗначение.УИД;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныеПозицииЕдиницаПродажиПлиткаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НоменклатурныеПозиции.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено 
		И ТекущиеДанные.ЕдиницаПродажиПлитка <> ПредопределенноеЗначение("Справочник.вогВидыПлитки.Мозаика") Тогда
		НайденныеСтроки = Объект.Номенклатура.НайтиСтроки(Новый Структура("УИДНоменклатурнаяПозиция",ТекущиеДанные.УИД));
		Если НайденныеСтроки.Количество() > 0 Тогда 
			МассивУИДНоменклатуры = Новый Массив;
			Для Каждого Строка Из НайденныеСтроки Цикл
				МассивУИДНоменклатуры.Добавить(Строка.УИД);
			КонецЦикла;
			ЕстьСоставМозаики = Ложь;
			Для Каждого Строка Из Объект.НоменклатураСоставМозаики Цикл
				Если МассивУИДНоменклатуры.Найти(Строка.УИДНоменклатураВладелец) <> Неопределено Тогда
					ЕстьСоставМозаики = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьСоставМозаики Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("НоменклатурныеПозицииЕдиницаПродажиПлиткаПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("МассивУИДНоменклатуры,ТекущиеДанные", МассивУИДНоменклатуры,ТекущиеДанные)), "Для SKU с текущей BSU создан состав мозаики. при изменении он будет удален. Продолжить?",РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныеПозицииЕдиницаПродажиПлиткаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ДополнительныеПараметры.ТекущиеДанные.ЕдиницаПродажиПлитка = ПредопределенноеЗначение("Справочник.вогВидыПлитки.Мозаика");
		СформироватьНаименованиеBSU(ДополнительныеПараметры.ТекущиеДанные.НомерСтроки - 1);
		Возврат;
	КонецЕсли;
	
	МассивУИДНоменклатуры = ДополнительныеПараметры.МассивУИДНоменклатуры;
		
	Для Каждого УИД Из МассивУИДНоменклатуры Цикл
		
		НайденныеСтроки = Объект.НоменклатураСоставМозаики.НайтиСтроки(Новый Структура("УИДНоменклатураВладелец",УИД));
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект.НоменклатураСоставМозаики.Удалить(Строка);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПередУдалением(Элемент, Отказ)
	
	Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка") Тогда 
		НайденныеСтроки = Объект.НоменклатураСоставМозаики.НайтиСтроки(Новый Структура("УИДНоменклатураВладелец",Элемент.ТекущиеДанные.УИД));
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект.НоменклатураСоставМозаики.Удалить(Строка);
		КонецЦикла;
	Иначе
		
		НайденныеСтроки = Объект.НоменклатураКомпаньоны.НайтиСтроки(Новый Структура("УИДНоменклатураВладелец",Элемент.ТекущиеДанные.УИД));
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект.НоменклатураКомпаньоны.Удалить(Строка);
		КонецЦикла;
		
		НайденныеСтроки = Объект.НоменклатураКоллекции.НайтиСтроки(Новый Структура("УИДНоменклатураВладелец",Элемент.ТекущиеДанные.УИД));
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект.НоменклатураКоллекции.Удалить(Строка);
		КонецЦикла;
		
		НайденныеСтроки = Объект.НоменклатурныеПозиции.НайтиСтроки(Новый Структура("УИД",Элемент.ТекущиеДанные.УИДНоменклатурнаяПозиция));
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект.НоменклатурныеПозиции.Удалить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныеПозицииПередУдалением(Элемент, Отказ)
	
	Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда
		НайденныеСтроки = Объект.Номенклатура.НайтиСтроки(Новый Структура("УИДНоменклатурнаяПозиция",Элемент.ТекущиеДанные.УИД));
		Для Каждого Строка Из НайденныеСтроки Цикл
			Объект.Номенклатура.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаПередУдалением(Элемент, Отказ)
	
	НайденныеСтроки = Объект.КоллекцииДляСайтаСостав.НайтиСтроки(Новый Структура("УИДКоллекция",Элемент.ТекущиеДанные.УИД));
	Для Каждого Строка Из НайденныеСтроки Цикл
		Объект.КоллекцииДляСайтаСостав.Удалить(Строка);
	КонецЦикла;
	
	НайденныеСтроки = Объект.КоллекцииДляСайтаИзображения.НайтиСтроки(Новый Структура("УИДКоллекция",Элемент.ТекущиеДанные.УИД));
	Для Каждого Строка Из НайденныеСтроки Цикл
		Объект.КоллекцииДляСайтаИзображения.Удалить(Строка);
	КонецЦикла;
	
	НайденныеСтроки = Объект.КоллекцииДляСайтаАналоги.НайтиСтроки(Новый Структура("УИДКоллекция",Элемент.ТекущиеДанные.УИД));
	Для Каждого Строка Из НайденныеСтроки Цикл
		Объект.КоллекцииДляСайтаАналоги.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураИзмеренияПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя <> "НоменклатураШтрихкодШТ" И Элемент.ТекущийЭлемент.Имя <> "НоменклатураКоличествоМетровВКоробкеПлитка" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатурнаяПозиция) Тогда
		Если ТипЗнч(ТекущиеДанные.НоменклатурнаяПозиция) = Тип("Строка") Тогда
			НайденныеСтроки = Объект.НоменклатурныеПозиции.НайтиСтроки(Новый Структура("УИД",ТекущиеДанные.УИДНоменклатурнаяПозиция));
			Если НайденныеСтроки.Количество() > 0 Тогда
				ВидПлитки = НайденныеСтроки[0].ЕдиницаПродажиПлитка;
			Иначе
				ВидПлитки = Неопределено;
			КонецЕсли;
		Иначе
			ВидПлитки = ПолучитьЗначениеЕдиницыПродажи(ТекущиеДанные.НоменклатурнаяПозиция);
		КонецЕсли;
	Иначе
		ВидПлитки = Неопределено;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ВидПлитки) Тогда
		ЕдиницаПродажи = ВидПлитки;
	Иначе
		ЕдиницаПродажи = Неопределено;
	КонецЕсли;
	
	Если ЕдиницаПродажи <> Неопределено И ПроверитьПринадлежностьЭлементу(ЕдиницаПродажи,ПредопределенноеЗначение("Справочник.вогВидыПлитки.Декорация")) Тогда
		Элементы[Элемент.ТекущийЭлемент.Имя].ТолькоПросмотр = Элемент.ТекущийЭлемент.Имя = "НоменклатураКоличествоМетровВКоробкеПлитка";
	Иначе
		Элементы[Элемент.ТекущийЭлемент.Имя].ТолькоПросмотр = Элемент.ТекущийЭлемент.Имя <> "НоменклатураКоличествоМетровВКоробкеПлитка";
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПринадлежностьЭлементу(Ссылка,Значение)
	Возврат Ссылка.ПринадлежитЭлементу(Значение);
КонецФункции

&НаКлиенте
Процедура НоменклатураСоставМозаикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		
	ТекущиеДанные = Элементы.Номенклатура.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.НоменклатурнаяПозиция) Тогда
		Отказ = Истина;
	Иначе
		Если ТипЗнч(ТекущиеДанные.НоменклатурнаяПозиция) = Тип("Строка") Тогда
			НайденныеСтроки = Объект.НоменклатурныеПозиции.НайтиСтроки(Новый Структура("УИД",ТекущиеДанные.УИДНоменклатурнаяПозиция));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Отказ = НайденныеСтроки[0].ЕдиницаПродажиПлитка <> ПредопределенноеЗначение("Справочник.вогВидыПлитки.Мозаика");
			Иначе
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Отказ = ПолучитьЗначениеЕдиницыПродажи(ТекущиеДанные.НоменклатурнаяПозиция) <> ПредопределенноеЗначение("Справочник.вогВидыПлитки.Мозаика");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураВспомогательныеТЧПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УстановитьУИДВспомогательныхТЧ(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУИДВспомогательныхТЧ(Элемент, НоваяСтрока)
	
	Если Элементы.Номенклатура.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		НоменклатураУИД = Элементы.Номенклатура.ТекущиеДанные.УИД;
		Элемент.ТекущиеДанные.УИДНоменклатураВладелец = НоменклатураУИД;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокВспомогательныхТЧ()
	
	Если Элементы.Номенклатура.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НоменклатураУИД = Элементы.Номенклатура.ТекущиеДанные.УИД;
	Элементы.НоменклатураСоставМозаики.ОтборСтрок 	= Новый ФиксированнаяСтруктура("УИДНоменклатураВладелец",НоменклатураУИД);
	Элементы.НоменклатураКомпаньоны.ОтборСтрок 	 	= Новый ФиксированнаяСтруктура("УИДНоменклатураВладелец",НоменклатураУИД);
	Элементы.НоменклатураКоллекции.ОтборСтрок 	 	= Новый ФиксированнаяСтруктура("УИДНоменклатураВладелец",НоменклатураУИД);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриАктивизацииСтроки(Элемент)
	УстановитьОтборСтрокВспомогательныхТЧ();
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
		Отказ = Копирование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
		Отказ = Копирование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныеПозицииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
		Отказ = Копирование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДизайныПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
		Отказ = Копирование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДизайныПриИзменении(Элемент)
	
	Если НЕ Объект.ТаблицаДизайны И Объект.Дизайны.Количество() <> 0 Тогда
		ПоказатьВопрос(
				Новый ОписаниеОповещения("ТаблицаДизайныПриИзмененииЗавершение", ЭтотОбъект)
				,"Табличная часть Дизайны будет очищена. продолжить?"
				,РежимДиалогаВопрос.ДаНет);
	Иначе
		УстановитьЗаголовокФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДизайныПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Дизайны.Очистить();
		УстановитьЗаголовокФормы();
	Иначе
		Объект.ТаблицаДизайны = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурныеПозицииПриИзменении(Элемент)
	
	Если НЕ Объект.ТаблицаНоменклатурныеПозиции И Объект.НоменклатурныеПозиции.Количество() <> 0 Тогда
		ПоказатьВопрос(
				Новый ОписаниеОповещения("ТаблицаНоменклатурныеПозицииПриИзмененииЗавершение", ЭтотОбъект)
				,"Табличная часть Номенклатурные позиции будет очищена. продолжить?"
				,РежимДиалогаВопрос.ДаНет);
	Иначе
		Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда
			Объект.ТаблицаНоменклатура = Объект.ТаблицаНоменклатурныеПозиции;
		КонецЕсли;
		УстановитьЗаголовокФормы();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурныеПозицииПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.НоменклатурныеПозиции.Очистить();
		Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда
			Объект.Номенклатура.Очистить();
			Объект.НоменклатураКомпаньоны.Очистить();
			Объект.НоменклатураКоллекции.Очистить();
			Объект.ТаблицаНоменклатура = Объект.ТаблицаНоменклатурныеПозиции;
		КонецЕсли;
		
		УстановитьЗаголовокФормы();
	Иначе
		Объект.ТаблицаНоменклатурныеПозиции = Истина;
		Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда
			Объект.ТаблицаНоменклатура = Объект.ТаблицаНоменклатурныеПозиции;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатураПриИзменении(Элемент)
	
	Если НЕ Объект.ТаблицаНоменклатура И Объект.Номенклатура.Количество() <> 0 Тогда
		ПоказатьВопрос(
				Новый ОписаниеОповещения("ТаблицаНоменклатураПриИзмененииЗавершение", ЭтотОбъект)
				, "Табличная часть Номенклатура будет очищена. продолжить?"
				,РежимДиалогаВопрос.ДаНет);
	Иначе
		Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда
			Объект.ТаблицаНоменклатурныеПозиции = Объект.ТаблицаНоменклатура;
		КонецЕсли;
		УстановитьЗаголовокФормы();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатураПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Номенклатура.Очистить();
		Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда
			Объект.НоменклатурныеПозиции.Очистить();
			Объект.НоменклатураКомпаньоны.Очистить();
			Объект.НоменклатураКоллекции.Очистить();
			Объект.ТаблицаНоменклатурныеПозиции = Объект.ТаблицаНоменклатура;
		Иначе
			Объект.НоменклатураСоставМозаики.Очистить();
		КонецЕсли;
		УстановитьЗаголовокФормы();
	Иначе
		Объект.ТаблицаНоменклатура = Истина;
		Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда
			Объект.ТаблицаНоменклатурныеПозиции = Объект.ТаблицаНоменклатура;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКоллекцииДляСайтаПриИзменении(Элемент)
	
	Если НЕ Объект.ТаблицаКоллекцииДляСайта И Объект.КоллекцииДляСайта.Количество() <> 0 Тогда
		ПоказатьВопрос(
				Новый ОписаниеОповещения("ТаблицаКоллекцииДляСайтаПриИзмененииЗавершение", ЭтотОбъект)
				, "Табличная часть Коллекции для сайта будет очищена. продолжить?"
				,РежимДиалогаВопрос.ДаНет);
	Иначе
		УстановитьЗаголовокФормы();
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКоллекцииДляСайтаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.КоллекцииДляСайта.Очистить();
		Объект.КоллекцииДляСайтаАналоги.Очистить();
		Объект.КоллекцииДляСайтаИзображения.Очистить();
		Объект.КоллекцииДляСайтаСостав.Очистить();
		УстановитьЗаголовокФормы();
	Иначе
		Объект.ТаблицаКоллекцииДляСайта = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Номенклатура.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СформироватьНаименованиеSKU(ТекущиеДанные.НомерСтроки-1);
		ЗаполнитьЕдиницыИзмеренияНаСервере(ТекущиеДанные.НомерСтроки-1);
		
		// +++ VOG Кулаков П.Л. 05.11.2020 CRM-1018
		Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка") Тогда
			// +++ VOG Кулаков П.Л. 04.05.2021 DEV-270
			ТекущиеДанные.ДлинаКоробки = ТекущиеДанные.ДлинаПлитка + 0.007;
			ТекущиеДанные.ШиринаКоробки = ТекущиеДанные.ШиринаПлитка + 0.007;
			ТекущиеДанные.ВысотаКоробки = ТекущиеДанные.КоличествоШтукВКоробке * 0.009 + 0.014;
			// --- VOG Кулаков П.Л.
			Если Элемент.ТекущийЭлемент <> Неопределено 
					И Элемент.ТекущийЭлемент.Имя = "НоменклатураОсновной"
					И ТипЗнч(ТекущиеДанные.НоменклатурнаяПозиция) = Тип("Строка") Тогда
				НайденныеСтроки = Объект.Номенклатура.НайтиСтроки(Новый Структура("УИДНоменклатурнаяПозиция,Основной",ТекущиеДанные.УИДНоменклатурнаяПозиция,Истина));
				Для Каждого Строка Из НайденныеСтроки Цикл
					Если Строка.УИД = ТекущиеДанные.УИД Тогда
						Продолжить;
					КонецЕсли;
					Строка.Основной = Ложь;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ПересчитатьКоличествоМ2ВКоробке(ТекущиеДанные.НомерСтроки-1);
		// --- VOG Кулаков П.Л.
	КонецЕсли;
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 05.11.2020 CRM-1018
&НаСервере
Процедура ПересчитатьКоличествоМ2ВКоробке(НомерСтроки)
	
	ТекущаяСтрока = Объект.Номенклатура[НомерСтроки];
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатурнаяПозиция) Тогда
		Если ТипЗнч(ТекущаяСтрока.НоменклатурнаяПозиция) = Тип("Строка") Тогда
			НайденныеСтроки = Объект.НоменклатурныеПозиции.НайтиСтроки(Новый Структура("УИД",ТекущаяСтрока.УИДНоменклатурнаяПозиция));
			Если НайденныеСтроки.Количество() > 0 Тогда
				ВидПлитки = НайденныеСтроки[0].ЕдиницаПродажиПлитка;
			Иначе
				ВидПлитки = Неопределено;
			КонецЕсли;
		Иначе
			ВидПлитки = ПолучитьЗначениеЕдиницыПродажи(ТекущаяСтрока.НоменклатурнаяПозиция);
		КонецЕсли;
	Иначе
		ВидПлитки = Неопределено;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ВидПлитки) Тогда
		ЕдиницаПродажи = ВидПлитки;
	Иначе
		ЕдиницаПродажи = Неопределено;
	КонецЕсли;
	
	Если ЕдиницаПродажи <> Неопределено И ПроверитьПринадлежностьЭлементу(ЕдиницаПродажи,ПредопределенноеЗначение("Справочник.вогВидыПлитки.Декорация")) Тогда
		ТекущаяСтрока.КоличествоМетровВКоробкеПлитка = ТекущаяСтрока.ДлинаПлитка * ТекущаяСтрока.ШиринаПлитка * ТекущаяСтрока.КоличествоШтукВКоробке;
	КонецЕсли;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

&НаСервере
Процедура ЗаполнитьЕдиницыИзмеренияНаСервере(НомерСтроки)
	
	ТекущаяСтрока = Объект.Номенклатура[НомерСтроки];
	Если Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
		ЕдиницаМ2 = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("055");
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.НоменклатурнаяПозиция) Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(ТекущаяСтрока.НоменклатурнаяПозиция) = Тип("Строка") Тогда
			НайденныеСтроки = Объект.НоменклатурныеПозиции.НайтиСтроки(Новый Структура("УИД",ТекущаяСтрока.УИДНоменклатурнаяПозиция));
			Если НайденныеСтроки.Количество() > 0 И ЗначениеЗаполнено(НайденныеСтроки[0].ЕдиницаПродажиПлитка) Тогда	
				Если НайденныеСтроки[0].ЕдиницаПродажиПлитка.ПринадлежитЭлементу(Справочники.вогВидыПлитки.Базовая) Тогда
					ТекущаяСтрока.ЕдиницаИзмерения = ЕдиницаМ2;
				Иначе
					ТекущаяСтрока.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
				КонецЕсли;
				Если НайденныеСтроки[0].ЕдиницаПродажиПлитка = Справочники.вогВидыПлитки.Основная 
					И НайденныеСтроки[0].ТипИспользования = Перечисления.вогТипыИспользованияПлитки.Настенная Тогда
					ТекущаяСтрока.ВидТовараДляWMS = Справочники.вогВидыТовараДляWMS.НайтиПоКоду("000000001");
				ИначеЕсли НайденныеСтроки[0].ТипИспользования = Перечисления.вогТипыИспользованияПлитки.Настенная И
					(НайденныеСтроки[0].ЕдиницаПродажиПлитка = Справочники.вогВидыПлитки.Дополнительная
					ИЛИ НайденныеСтроки[0].ЕдиницаПродажиПлитка = Справочники.вогВидыПлитки.Декорированная) Тогда
					ТекущаяСтрока.ВидТовараДляWMS = Справочники.вогВидыТовараДляWMS.НайтиПоКоду("000000002");
				ИначеЕсли НайденныеСтроки[0].ЕдиницаПродажиПлитка.ПринадлежитЭлементу(Справочники.вогВидыПлитки.Декорация) Тогда
					ТекущаяСтрока.ВидТовараДляWMS = Справочники.вогВидыТовараДляWMS.НайтиПоКоду("000000004");
				Иначе
					ТекущаяСтрока.ВидТовараДляWMS = Справочники.вогВидыТовараДляWMS.НайтиПоКоду("000000003");
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатурнаяПозиция.ЕдиницаПродажиПлитка) Тогда
				Если ТекущаяСтрока.НоменклатурнаяПозиция.ЕдиницаПродажиПлитка.ПринадлежитЭлементу(Справочники.вогВидыПлитки.Базовая) Тогда
					ТекущаяСтрока.ЕдиницаИзмерения = ЕдиницаМ2;
				Иначе
					ТекущаяСтрока.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.шт;
				КонецЕсли;
				
				Если ТекущаяСтрока.НоменклатурнаяПозиция.ЕдиницаПродажиПлитка.ПринадлежитЭлементу(Справочники.вогВидыПлитки.Основная) 
					И ТекущаяСтрока.НоменклатурнаяПозиция.ТипИспользования = Перечисления.вогТипыИспользованияПлитки.Настенная Тогда
					ТекущаяСтрока.ВидТовараДляWMS = Справочники.вогВидыТовараДляWMS.НайтиПоКоду("000000001");
				ИначеЕсли ТекущаяСтрока.НоменклатурнаяПозиция.ЕдиницаПродажиПлитка.ПринадлежитЭлементу(Справочники.вогВидыПлитки.Дополнительная)
					ИЛИ ТекущаяСтрока.НоменклатурнаяПозиция.ЕдиницаПродажиПлитка.ПринадлежитЭлементу(Справочники.вогВидыПлитки.Декорированная) Тогда
					ТекущаяСтрока.ВидТовараДляWMS = Справочники.вогВидыТовараДляWMS.НайтиПоКоду("000000002");
				ИначеЕсли ТекущаяСтрока.НоменклатурнаяПозиция.ЕдиницаПродажиПлитка.ПринадлежитЭлементу(Справочники.вогВидыПлитки.Декорация) Тогда
					ТекущаяСтрока.ВидТовараДляWMS = Справочники.вогВидыТовараДляWMS.НайтиПоКоду("000000004");
				Иначе
					ТекущаяСтрока.ВидТовараДляWMS = Справочники.вогВидыТовараДляWMS.НайтиПоКоду("000000003");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения) Тогда
			ТекущаяСтрока.ЕдиницаИзмерения = ЕдиницаМ2;
		КонецЕсли;
		
		ТекущаяСтрока.ЕдиницаХраненияОстатков = ТекущаяСтрока.ЕдиницаИзмерения;
		
		ТекущаяСтрока.ЕдиницаДляОтчетов = ЕдиницаМ2;
		
	Иначе
		
		ЕдиницаРул = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("736");
		
		ТекущаяСтрока.ЕдиницаИзмерения = ЕдиницаРул;
		ТекущаяСтрока.ЕдиницаХраненияОстатков = ЕдиницаРул;
		ТекущаяСтрока.ЕдиницаДляОтчетов = ЕдиницаРул;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныеПозицииПриИзменении(Элемент)
	
	Если Элементы.НоменклатурныеПозиции.ТекущиеДанные <> Неопределено Тогда
		СформироватьНаименованиеBSU(Элементы.НоменклатурныеПозиции.ТекущиеДанные.НомерСтроки-1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураШтрихкодПриИзменении(Элемент)
	
	ИмяКолонки = СтрЗаменить(Элемент.Имя,"Номенклатура","");
	Штрихкод = Элементы.Номенклатура.ТекущиеДанные[ИмяКолонки];
	ТекущаяSKU = Элементы.Номенклатура.ТекущиеДанные.УИД;
	Если Элементы.Номенклатура.ТекущиеДанные.ШтрихкодШТ = Элементы.Номенклатура.ТекущиеДанные.Штрихкод 
		// +++ VOG Кулаков П.Л. 18.12.2020 CRM-1102
				И НЕ ПустаяСтрока(Элементы.Номенклатура.ТекущиеДанные.Штрихкод) Тогда
		// --- VOG Кулаков П.Л.
		НомерСтроки = Элементы.Номенклатура.ТекущиеДанные.НомерСтроки;
		НаименованиеНоменклатуры = Элементы.Номенклатура.ТекущиеДанные.Наименование;
		Сообщить("Штрихкод: " + Штрихкод + " используется в строке №" + НомерСтроки + ", SKU: " + НаименованиеНоменклатуры);
	КонецЕсли;
	ПроверитьУникальностьШтрихкода(Штрихкод,ТекущаяSKU);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьУникальностьШтрихкода(Штрихкод,УИДSKU)
	
	ШтрихкодУникален = Истина;
	НаименованиеНоменклатуры = "";
	НомерСтроки = -1;
	
	Для Каждого Строка Из Объект.Номенклатура Цикл
		Если Строка.УИД = УИДSKU Тогда
			Продолжить;
		КонецЕсли;
		Если (Строка.Штрихкод = Штрихкод И Не ПустаяСтрока(Строка.Штрихкод)) ИЛИ (Строка.ШтрихкодШТ = Штрихкод И Не ПустаяСтрока(Строка.ШтрихкодШТ)) Тогда
			ШтрихкодУникален = Ложь;
			НаименованиеНоменклатуры = Строка.Наименование;
			НомерСтроки = Строка.НомерСтроки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ШтрихкодУникален Тогда
		Сообщить("Штрихкод: " + Штрихкод + " используется в строке №" + НомерСтроки + ", SKU: " + НаименованиеНоменклатуры);
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.вогШтрихкодыНоменклатуры КАК вогШтрихкодыНоменклатуры
		|ГДЕ
		|	вогШтрихкодыНоменклатуры.Штрихкод = &Штрихкод
		|	И вогШтрихкодыНоменклатуры.Номенклатура <> &Номенклатура";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Если Объект.ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
		Запрос.УстановитьПараметр("Номенклатура",Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДSKU)));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И вогШтрихкодыНоменклатуры.Номенклатура <> &Номенклатура","");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ШтрихкодУникален = Ложь;
		Сообщить("Штрихкод: " + Штрихкод + " используется в SKU: " + ВыборкаДетальныеЗаписи.Номенклатура);
	КонецЕсли;
	
	Возврат ШтрихкодУникален;
	
КонецФункции

&НаКлиенте
Процедура НоменклатураИзмеренияПриИзменении(Элемент)
	
	Если Элементы.Номенклатура.ТекущиеДанные <> Неопределено Тогда
		Элемент.ТекущиеДанные.КоличествоМетровВПаллетеПлитка = Элемент.ТекущиеДанные.КоличествоМетровВКоробкеПлитка * Элемент.ТекущиеДанные.КоличествоКоробокВПаллете;
		// +++ VOG Кулаков П.Л. 04.05.2021 DEV-270
		Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка") Тогда 
			Элемент.ТекущиеДанные.ДлинаКоробки = Элемент.ТекущиеДанные.ДлинаПлитка + 0.007;
			Элемент.ТекущиеДанные.ШиринаКоробки = Элемент.ТекущиеДанные.ШиринаПлитка + 0.007;
			Элемент.ТекущиеДанные.ВысотаКоробки = Элемент.ТекущиеДанные.КоличествоШтукВКоробке * 0.009 + 0.014;
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		СформироватьНаименованиеSKU(Элемент.ТекущиеДанные.НомерСтроки - 1);
		// +++ VOG Кулаков П.Л. 05.11.2020 CRM-1018
		ПересчитатьКоличествоМ2ВКоробке(Элемент.ТекущиеДанные.НомерСтроки - 1);
		// --- VOG Кулаков П.Л.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзмененииПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Дизайны.Очистить();
		Объект.НоменклатурныеПозиции.Очистить();
		Объект.Номенклатура.Очистить();
		Объект.КоллекцииДляСайта.Очистить();
		Объект.КоллекцииДляСайтаСостав.Очистить();
		Объект.КоллекцииДляСайтаИзображения.Очистить();
		Объект.КоллекцииДляСайтаАналоги.Очистить();
		УстановитьВидимостьПоВидуОперации();
	Иначе
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание");
			СтандартнаяОбработка = Ложь;
		Иначе
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.Дизайны.Количество() = 0 
		И Объект.НоменклатурныеПозиции.Количество() = 0
		И Объект.Номенклатура.Количество() = 0
		И Объект.КоллекцииДляСайта.Количество() = 0
		И Объект.КоллекцииДляСайтаСостав.Количество() = 0
		И Объект.КоллекцииДляСайтаИзображения.Количество() = 0
		И Объект.КоллекцииДляСайтаАналоги.Количество() = 0 Тогда
		УстановитьВидимостьПоВидуОперации();
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ВидОперацииПриИзмененииПродолжение", ЭтотОбъект), "При изменении вида операции все табличные части будут очищены. Продолжить?",РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаИзображенияПревьюПриИзменении(Элемент)
	
	Если НЕ Элемент.Родитель.ТекущиеДанные.Превью Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Строка Из Объект.КоллекцииДляСайтаИзображения Цикл
		Если Строка = Элемент.Родитель.ТекущиеДанные Тогда
			Продолжить;
		КонецЕсли;
		Строка.Превью = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "НоменклатураКоличествоСоставныхЭлементов"
			ИЛИ Элемент.ТекущийЭлемент.Имя = "НоменклатураДлинаСоставногоЭлемента"
			ИЛИ Элемент.ТекущийЭлемент.Имя = "НоменклатураШиринаСоставногоЭлемента" Тогда
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.НоменклатурнаяПозиция) Тогда
			Отказ = Истина;
		Иначе
			Если ТипЗнч(Элемент.ТекущиеДанные.НоменклатурнаяПозиция) = Тип("Строка") Тогда
				СтрокиНоменклатурныхПозиций = Объект.НоменклатурныеПозиции.НайтиСтроки(Новый Структура("УИД",Элемент.ТекущиеДанные.УИДНоменклатурнаяПозиция));
				Если СтрокиНоменклатурныхПозиций.Количество() > 0 Тогда
					Если СтрокиНоменклатурныхПозиций[0].ЕдиницаПродажиПлитка <> ПредопределенноеЗначение("Справочник.вогВидыПлитки.Панно") Тогда
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.НоменклатурнаяПозиция) И ПолучитьЗначениеЕдиницыПродажи(Элемент.ТекущиеДанные.НоменклатурнаяПозиция) <> ПредопределенноеЗначение("Справочник.вогВидыПлитки.Панно") Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	// +++ VOG Кулаков П.Л. 05.11.2020 CRM-1018
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "НоменклатураОсновной" Тогда
		Если Элемент.ТекущиеДанные.Основной = Ложь 
				И ЗначениеЗаполнено(Элемент.ТекущиеДанные.НоменклатурнаяПозиция) 
				И ТипЗнч(Элемент.ТекущиеДанные.НоменклатурнаяПозиция) = Тип("СправочникСсылка.вогНоменклатурныеПозиции") Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("НоменклатураПередНачаломИзмененияЗавершение", ЭтотОбъект,Новый Структура("ТекущиеДанные",Элемент.ТекущиеДанные))
					,"При устновке признака ""Основной"" у основного SKU в BSU будет снят соответствующий признак. Продолжить редактирование?"
					,РежимДиалогаВопрос.ДаНет);
		КонецЕсли;			
	// --- VOG Кулаков П.Л.	
	КонецЕсли;
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 05.11.2020 CRM-1018
&НаКлиенте
Процедура НоменклатураПередНачаломИзмененияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ДополнительныеПараметры.ТекущиеДанные.Основной = Ложь;
		// +++ VOG Кулаков П.Л. 20.02.2021 DEV-193
	Иначе
		// --- VOG Кулаков П.Л.		
		НайденныеСтроки = Объект.Номенклатура.НайтиСтроки(Новый Структура("НоменклатурнаяПозиция,Основной",ДополнительныеПараметры.ТекущиеДанные.НоменклатурнаяПозиция,Истина));
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если Строка.УИД = ДополнительныеПараметры.ТекущиеДанные.УИД Тогда
				Продолжить;
			КонецЕсли;
			Строка.Основной = Ложь;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // --- VOG Кулаков П.Л.

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(РеквизитОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(РеквизитОбъекта) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(
				РеквизитОбъекта,
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураФайлКартинкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПросмотретьПрисоединенныйФайл(Элемент.Родитель.ТекущиеДанные.ФайлКартинки, "Элемент.Имя",
		НСтр("ru='Отсутствует изображение для просмотра'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ДизайныТипРисункаОбоиПриИзменении(Элемент)
	
	// ++ VOG Солодов В.В. 21.05.2021 DEV-507
	// До изменения
	//Если Элемент.Родитель.ТекущиеДанные.ТипРисункаОбои = ПредопределенноеЗначение("Перечисление.вогТипРисункаОбоев.Рисунок") Тогда
	//	
	//	Элементы.ДизайныСтильРисункаОбои.Видимость 			= Истина;
	//	Элементы.ДизайныРазмерРисункаОбои.Видимость 		= Истина;
	//	Элементы.ДизайныЭлементРисунка.Видимость 			= Истина;
	//	
	//	Элементы.ДизайныРазмерПолосыОбои.Видимость 			= Ложь;
	//	
	//	Элементы.ДизайныРасположениеСтруктурыОбои.Видимость = Ложь;
	//	Элементы.ДизайныРазмерСтруктурыОбои.Видимость 		= Ложь;
	//	Элементы.ДизайныСтруктураОбои.Видимость 			= Ложь;
	//	
	//ИначеЕсли Элемент.Родитель.ТекущиеДанные.ТипРисункаОбои = ПредопределенноеЗначение("Перечисление.вогТипРисункаОбоев.Полоса") Тогда
	//	
	//	Элементы.ДизайныСтильРисункаОбои.Видимость 			= Ложь;
	//	Элементы.ДизайныРазмерРисункаОбои.Видимость 		= Ложь;
	//	Элементы.ДизайныЭлементРисунка.Видимость 			= Ложь;
	//	
	//	Элементы.ДизайныРазмерПолосыОбои.Видимость 			= Истина;
	//	
	//	Элементы.ДизайныРасположениеСтруктурыОбои.Видимость = Ложь;
	//	Элементы.ДизайныРазмерСтруктурыОбои.Видимость 		= Ложь;
	//	Элементы.ДизайныСтруктураОбои.Видимость 			= Ложь;
	//	
	//ИначеЕсли Элемент.Родитель.ТекущиеДанные.ТипРисункаОбои = ПредопределенноеЗначение("Перечисление.вогТипРисункаОбоев.Структура") Тогда
	//	
	//	Элементы.ДизайныСтильРисункаОбои.Видимость 			= Ложь;
	//	Элементы.ДизайныРазмерРисункаОбои.Видимость 		= Ложь;
	//	Элементы.ДизайныЭлементРисунка.Видимость 			= Ложь;
	//	
	//	Элементы.ДизайныРазмерПолосыОбои.Видимость 			= Ложь;
	//	
	//	Элементы.ДизайныРасположениеСтруктурыОбои.Видимость = Истина;
	//	Элементы.ДизайныРазмерСтруктурыОбои.Видимость 		= Истина;
	//	Элементы.ДизайныСтруктураОбои.Видимость 			= Истина;
	//	
	//КонецЕсли;
	// -- VOG Солодов В.В. 21.05.2021 DEV-507
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаСоставНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Истина);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	МассивНоменклатуры = Новый Массив();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание") Тогда
		Для Каждого Строка Из Объект.Номенклатура Цикл
			Если Строка.Наименование = "" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураНоменклатуры = Новый Структура("Наименование,УИД");
			СтруктураНоменклатуры.Наименование = Строка.Наименование;
			СтруктураНоменклатуры.УИД = Строка.УИД;
			МассивНоменклатуры.Добавить(СтруктураНоменклатуры);
		КонецЦикла;
	КонецЕсли;
	ПараметрыФормы.Вставить("СписокНоменклатуры",МассивНоменклатуры);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",Объект.НаправлениеДеятельности);
	
	ОткрытьФорму(
		"Документ.вогМастерСозданияИРедактированияНоменклатуры.Форма.ФормаВыбораНоменклатуры",
		ПараметрыФормы,
		Элементы.КоллекцииДляСайтаСоставНоменклатура,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаСоставНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.КоллекцииДляСайтаСостав.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.Номенклатура 		= ВыбранноеЗначение.Наименование;
		ТекущиеДанные.УИДНоменклатура	= ВыбранноеЗначение.УИД;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаАналогиКоллекцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Истина);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	МассивКоллекций = Новый Массив();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание") Тогда
		Для Каждого Строка Из Объект.КоллекцииДляСайта Цикл
			Если Строка.Наименование = "" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строка.УИД = Элемент.Родитель.ТекущиеДанные.УИДКоллекция Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураКоллекций = Новый Структура("Наименование,УИД");
			СтруктураКоллекций.Наименование = Строка.Наименование;
			СтруктураКоллекций.УИД = Строка.УИД;
			МассивКоллекций.Добавить(СтруктураКоллекций);
		КонецЦикла;
	КонецЕсли;
	ПараметрыФормы.Вставить("СписокКоллекций",МассивКоллекций);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",Объект.НаправлениеДеятельности);
	
	ОткрытьФорму(
		"Документ.вогМастерСозданияИРедактированияНоменклатуры.Форма.ФормаВыбораКоллекцийДляСайта",
		ПараметрыФормы,
		Элементы.КоллекцииДляСайтаАналогиКоллекция,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУИДКоллекции(Элемент, НоваяСтрока)
	
	Если Элементы.КоллекцииДляСайта.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		КоллекцияУИД = Элементы.КоллекцииДляСайта.ТекущиеДанные.УИД;
		Элемент.ТекущиеДанные.УИДКоллекция = КоллекцияУИД;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаАналогиКоллекцияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.КоллекцииДляСайтаАналоги.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.Коллекция 		= ВыбранноеЗначение.Наименование;
		ТекущиеДанные.УИДНоваяКоллекция	= ВыбранноеЗначение.УИД;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаСоставПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УстановитьУИДКоллекции(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаИзображенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УстановитьУИДКоллекции(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаАналогиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УстановитьУИДКоллекции(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборСтрокКоллекции();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокКоллекции()
	
	Если Элементы.КоллекцииДляСайта.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КоллекцияУИД = Элементы.КоллекцииДляСайта.ТекущиеДанные.УИД;
	Элементы.КоллекцииДляСайтаСостав.ОтборСтрок 	 = Новый ФиксированнаяСтруктура("УИДКоллекция",КоллекцияУИД);
	Элементы.КоллекцииДляСайтаИзображения.ОтборСтрок = Новый ФиксированнаяСтруктура("УИДКоллекция",КоллекцияУИД);
	Элементы.КоллекцииДляСайтаАналоги.ОтборСтрок 	 = Новый ФиксированнаяСтруктура("УИДКоллекция",КоллекцияУИД);
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаСоставПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.КоллекцииДляСайта.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаИзображенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.КоллекцииДляСайта.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаАналогиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.КоллекцииДляСайта.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаКоллекцияСсылкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
			НайденныеСтроки = Объект.КоллекцииДляСайта.НайтиСтроки(Новый Структура("КоллекцияСсылка",ВыбранноеЗначение));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				Сообщить("Данная коллекция для сайта уже выбрана.");
				Возврат;
			КонецЕсли;
			Элементы.КоллекцииДляСайта.ТекущиеДанные.КоллекцияСсылка = ВыбранноеЗначение;
			Элементы.КоллекцииДляСайта.ТекущиеДанные.УИД = ВыбранноеЗначение.УникальныйИдентификатор();
		КонецЕсли;
		
		ЗаполнитьСтрокуПоСсылке(ВыбранноеЗначение,Элементы.КоллекцииДляСайта.ТекущиеДанные.НомерСтроки-1,"КоллекцииДляСайта");
		
	КонецЕсли;
	
	УстановитьОтборСтрокКоллекции();
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение <> Неопределено Тогда
		Для Каждого КоллекцияДляСайта Из ВыбранноеЗначение Цикл
			
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
				НайденныеСтроки = Объект.КоллекцииДляСайта.НайтиСтроки(Новый Структура("КоллекцияСсылка",КоллекцияДляСайта));
				Если НайденныеСтроки.Количество() > 0 Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = Объект.КоллекцииДляСайта.Добавить();
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
				НоваяСтрока.КоллекцияСсылка = КоллекцияДляСайта;
				НоваяСтрока.УИД = КоллекцияДляСайта.УникальныйИдентификатор();
			Иначе
				НоваяСтрока.УИД = Новый УникальныйИдентификатор();
			КонецЕсли;
			ЗаполнитьСтрокуПоСсылке(КоллекцияДляСайта,НоваяСтрока.НомерСтроки - 1,"КоллекцииДляСайта");
				
		КонецЦикла;
	КонецЕсли;
	
	УстановитьОтборСтрокКоллекции();
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьУИД(Элемент.ТекущиеДанные, НоваяСтрока);
	УстановитьОтборСтрокКоллекции();
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаНоменклатурнаяПозицияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Истина);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	МассивBSU = Новый Массив();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание") Тогда
		Для Каждого Строка Из Объект.НоменклатурныеПозиции Цикл
			Если Строка.Наименование = "" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураBSU = Новый Структура("Наименование,УИД");
			СтруктураBSU.Наименование = Строка.Наименование;
			СтруктураBSU.УИД = Строка.УИД;
			МассивBSU.Добавить(СтруктураBSU);
		КонецЦикла;
	КонецЕсли;
	ПараметрыФормы.Вставить("СписокBSU",МассивBSU);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",Объект.НаправлениеДеятельности);
	
	ОткрытьФорму(
		"Документ.вогМастерСозданияИРедактированияНоменклатуры.Форма.ФормаВыбораНоменклатурнойПозиции",
		ПараметрыФормы,
		Элементы.КоллекцииДляСайтаНоменклатурнаяПозиция,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КоллекцииДляСайтаНоменклатурнаяПозицияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.КоллекцииДляСайта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.НоменклатурнаяПозиция 		= ВыбранноеЗначение.Наименование;
		ТекущиеДанные.УИДНоменклатурнаяПозиция	 	= ВыбранноеЗначение.УИД;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрогресс1Нажатие(Элемент)
	Если Объект.ТаблицаНоменклатура Тогда
			Итератор = +2;
		Иначе
			Итератор = +1;
		КонецЕсли;
	ИзменитьПорядковыйНомерПерехода(Итератор);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрогресс9Нажатие(Элемент)
	
	Если Объект.ТаблицаНоменклатура Тогда
		Если Объект.ТаблицаНоменклатурныеПозиции Тогда
			Итератор = +3;
		Иначе
			Итератор = +2;
		КонецЕсли;
	Иначе 
		Если Объект.ТаблицаНоменклатурныеПозиции Тогда
			Итератор = +2;
		Иначе
			Итератор = +1;
		КонецЕсли;
	КонецЕсли;
	ИзменитьПорядковыйНомерПерехода(Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрогресс2Нажатие(Элемент)
	
 	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрогресс3Нажатие(Элемент)
	Если Объект.ТаблицаНоменклатура Тогда
		Итератор = -2;
	Иначе
		Итератор = -1;
	КонецЕсли;
	ИзменитьПорядковыйНомерПерехода(Итератор);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрогресс13Нажатие(Элемент)
	ИзменитьПорядковыйНомерПерехода(+1);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрогресс5Нажатие(Элемент)
	ИзменитьПорядковыйНомерПерехода(-1);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрогресс10Нажатие(Элемент)
	
	Если Объект.ТаблицаНоменклатура Тогда
		Если Объект.ТаблицаНоменклатурныеПозиции Тогда
			Итератор = -3;
		Иначе
			Итератор = -2;
		КонецЕсли;
	Иначе 
		Если Объект.ТаблицаНоменклатурныеПозиции Тогда
			Итератор = -2;
		Иначе
			Итератор = -1;
		КонецЕсли;
	КонецЕсли;
	ИзменитьПорядковыйНомерПерехода(Итератор);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрогресс11Нажатие(Элемент)
	ИзменитьПорядковыйНомерПерехода(-1);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрогресс12Нажатие(Элемент)
	Если Объект.ТаблицаНоменклатурныеПозиции Тогда
		Итератор = -2;
	Иначе
		Итератор = -1;
	КонецЕсли;
	ИзменитьПорядковыйНомерПерехода(Итератор);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрогресс6Нажатие(Элемент)
	ИзменитьПорядковыйНомерПерехода(-1);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрогресс7Нажатие(Элемент)
	ИзменитьПорядковыйНомерПерехода(+1);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрогресс15Нажатие(Элемент)
	Если Объект.ТаблицаНоменклатурныеПозиции Тогда
		Итератор = +2;
	Иначе
		Итератор = +1;
	КонецЕсли;
	ИзменитьПорядковыйНомерПерехода(Итератор);
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураФайлКартинкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Если Не Записать() Тогда
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
    
    ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
    
    Перем ИдентификаторФайла;
    
    ВыборИзображения   = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, CRM_ОбщегоНазначенияКлиент.ФильтрФайловИзображений());
	// +CRM_УТ
	#Если НЕ ВебКлиент Тогда
	// -CRM_УТ
	ВыборИзображения   = Ложь;
	// +CRM_УТ
	#КонецЕсли
	// -CRM_УТ
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" 
		И Параметр.Свойство("ВладелецФайла") Тогда
		
		Если Параметр.ВладелецФайла = Объект.Ссылка Тогда
			Модифицированность = Истина;
			
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			Если ВыборИзображения И Этаформа.ТекущийЭлемент.ТекущиеДанные.Свойство("ФайлКартинки") Тогда
				
				Этаформа.ТекущийЭлемент.ТекущиеДанные.ФайлКартинки = СсылкаНаФайл;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныеПозицииДизайнОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НоменклатурныеПозиции.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.Дизайн 		= ВыбранноеЗначение.Наименование;
		ТекущиеДанные.УИДДизайн	 	= ВыбранноеЗначение.УИД;
		СформироватьНаименованиеBSU(ТекущиеДанные.НомерСтроки-1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНоменклатурнаяПозицияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Номенклатура.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.вогНоменклатурныеПозиции") Тогда 
			ТекущиеДанные.НоменклатурнаяПозиция 		= ВыбранноеЗначение;
			ТекущиеДанные.УИДНоменклатурнаяПозиция	 	= "";
		Иначе
			ТекущиеДанные.НоменклатурнаяПозиция 		= ВыбранноеЗначение.Наименование;
			ТекущиеДанные.УИДНоменклатурнаяПозиция	 	= ВыбранноеЗначение.УИД;
		КонецЕсли;
		//Если ТипЗнч(ВыбранноеЗначение.Наименование) = Тип("Строка") Тогда
		//	СтрокиНоменклатурныхПозиций = Объект.НоменклатурныеПозиции.НайтиСтроки(Новый Структура("УИД",ВыбранноеЗначение.УИД));
		//	Если СтрокиНоменклатурныхПозиций.Количество() > 0 Тогда
		//		Если СтрокиНоменклатурныхПозиций[0].ЕдиницаПродажиПлитка = ПредопределенноеЗначение("Справочник.вогВидыПлитки.Панно") Тогда
		//			ТекущиеДанные.Панно = Истина;
		//		КонецЕсли;
		//	КонецЕсли;	
		//Иначе
		//	ТекущиеДанные.Панно = ПолучитьЗначениеПанно(ВыбранноеЗначение.Наименование);
		//КонецЕсли;
		
		Если ТипЗнч(ТекущиеДанные.НоменклатурнаяПозиция) = Тип("СправочникСсылка.вогНоменклатурныеПозиции") Тогда
			ЕдиницаПродажи = ПолучитьЗначениеЕдиницыПродажи(ТекущиеДанные.НоменклатурнаяПозиция);
			Если Не ЗначениеЗаполнено(ЕдиницаПродажи) Тогда
				Сообщить("В выбранной BSU не заполнена единица продажи. Единицы измерения установлены по умолчанию.");
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущиеДанные.Основной Тогда
			Если ТипЗнч(ТекущиеДанные.НоменклатурнаяПозиция) = Тип("СправочникСсылка.вогНоменклатурныеПозиции") Тогда
				НайденныеСтроки = Объект.Номенклатура.НайтиСтроки(Новый Структура("НоменклатурнаяПозиция",ТекущиеДанные.НоменклатурнаяПозиция));
			Иначе
				НайденныеСтроки = Объект.Номенклатура.НайтиСтроки(Новый Структура("УИДНоменклатурнаяПозиция",ТекущиеДанные.УИДНоменклатурнаяПозиция));
			КонецЕсли;
			
			Если НайденныеСтроки.Количество() > 1 Тогда
				ТекущиеДанные.Основной = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЕдиницыИзмеренияНаСервере(ТекущиеДанные.НомерСтроки-1);
		
		СформироватьНаименованиеSKU(ТекущиеДанные.НомерСтроки-1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеЕдиницыПродажи(ВыбранноеЗначение)
	
	ВидПлитки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение,"ЕдиницаПродажиПлитка");
	Возврат ВидПлитки;
	
КонецФункции

&НаКлиенте
Процедура НоменклатурныеПозицииДизайнНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Истина);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	МассивДизайнов= Новый Массив;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание") Тогда
		Для Каждого Строка Из Объект.Дизайны Цикл
			Если Строка.Наименование = "" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДизайнов = Новый Структура("Наименование,УИД");
			СтруктураДизайнов.Наименование = Строка.Наименование;
			СтруктураДизайнов.УИД = Строка.УИД;
			МассивДизайнов.Добавить(СтруктураДизайнов);
		КонецЦикла;
	КонецЕсли;
	ПараметрыФормы.Вставить("СписокДизайнов",МассивДизайнов);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",Объект.НаправлениеДеятельности);
	
	ОткрытьФорму(
		"Документ.вогМастерСозданияИРедактированияНоменклатуры.Форма.ФормаВыбораДизайна",
		ПараметрыФормы,
		Элементы.НоменклатурныеПозицииДизайн,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура НоменклатураПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьУИД(Элемент.ТекущиеДанные, НоваяСтрока);
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Страна) Тогда 
			Элемент.ТекущиеДанные.Страна = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
		КонецЕсли;
		Элемент.ТекущиеДанные.УсловияХранения = ПредопределенноеЗначение("Перечисление.вогУсловияХранения.Склад");
	КонецЕсли;
	Если НЕ ОтменаРедактирования Тогда
		ЗаполнитьЕдиницыИзмеренияНаСервере(Элемент.ТекущиеДанные.НомерСтроки-1);
		УстановитьОтборСтрокВспомогательныхТЧ();
	КонецЕсли;
	
	Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои")
				И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание")
				И НоваяСтрока 
				И НЕ ОтменаРедактирования Тогда
		УИДСтроки = ДобавитьСтрокуBSU(Элемент.ТекущиеДанные.НоменклатурнаяПозиция);
		Элемент.ТекущиеДанные.УИДНоменклатурнаяПозиция = УИДСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныеПозицииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьУИД(Элемент.ТекущиеДанные, НоваяСтрока);
	Если НоваяСтрока И Не ОтменаРедактирования И Элемент.ТекущиеДанные.ГодАнонса = 0 Тогда
		Элемент.ТекущиеДанные.ГодАнонса = Год(ТекущаяДата());
	КонецЕсли;
	
	Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои")
				И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание")
				И НоваяСтрока 
				И НЕ ОтменаРедактирования Тогда
		ДобавитьСтрокуSKU(Элемент.ТекущиеДанные);
		СформироватьНаименованиеBSU(Элемент.ТекущиеДанные.НомерСтроки - 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДизайныПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьУИД(Элемент.ТекущиеДанные, НоваяСтрока);
	
	СтрокиНоменклатурнойГруппы = Объект.НоменклатурныеПозиции.НайтиСтроки(Новый Структура("УИДДизайн",Элемент.ТекущиеДанные.УИД));
	Если СтрокиНоменклатурнойГруппы.Количество() > 0 Тогда
		Для Каждого СтрокаBSU Из СтрокиНоменклатурнойГруппы Цикл
			СформироватьНаименованиеBSU(СтрокаBSU.НомерСтроки-1);
			СтрокаBSU.Дизайн = Элемент.ТекущиеДанные.Наименование;
			СтрокиНоменклатуры = Объект.Номенклатура.НайтиСтроки(Новый Структура("УИДНоменклатурнаяПозиция",СтрокаBSU.УИД));
			Если СтрокиНоменклатуры.Количество() > 0 Тогда
				Для Каждого СтрокаSKU Из СтрокиНоменклатуры Цикл
					СформироватьНаименованиеSKU(СтрокаSKU.НомерСтроки-1);
					СтрокаSKU.НоменклатурнаяПозиция = СтрокаBSU.Наименование;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУИД(ТекущиеДанные, НоваяСтрока)
	
	// +++ VOG Кулаков П.Л. 09.03.2021 CRM-251
	Если НоваяСтрока И ТекущиеДанные <> Неопределено Тогда
	// --- VOG Кулаков П.Л.
		Если ТекущиеДанные.Свойство("НоменклатураСсылка") И ЗначениеЗаполнено(ТекущиеДанные.НоменклатураСсылка) Тогда
			ТекущиеДанные.УИД = ТекущиеДанные.НоменклатураСсылка.УникальныйИдентификатор();
		ИначеЕсли ТекущиеДанные.Свойство("ДизайнСсылка") И ЗначениеЗаполнено(ТекущиеДанные.ДизайнСсылка) Тогда
			ТекущиеДанные.УИД = ТекущиеДанные.ДизайнСсылка.УникальныйИдентификатор();
		ИначеЕсли ТекущиеДанные.Свойство("НоменклатурнаяПозицияСсылка") И ЗначениеЗаполнено(ТекущиеДанные.НоменклатурнаяПозицияСсылка) Тогда
			ТекущиеДанные.УИД = ТекущиеДанные.НоменклатурнаяПозицияСсылка.УникальныйИдентификатор();
		ИначеЕсли ТекущиеДанные.Свойство("ЕдиницаИзмеренияСсылка") И ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаИзмеренияСсылка) Тогда
			ТекущиеДанные.УИД = ТекущиеДанные.ЕдиницаИзмеренияСсылка.УникальныйИдентификатор();
		ИначеЕсли ТекущиеДанные.Свойство("КоллекцияСсылка") И ЗначениеЗаполнено(ТекущиеДанные.КоллекцияСсылка) Тогда
			ТекущиеДанные.УИД = ТекущиеДанные.КоллекцияСсылка.УникальныйИдентификатор();
		Иначе
			ТекущиеДанные.УИД = Новый УникальныйИдентификатор();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНоменклатурнаяПозицияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Истина);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	МассивBSU = Новый Массив();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание") Тогда
		Для Каждого Строка Из Объект.НоменклатурныеПозиции Цикл
			Если Строка.Наименование = "" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураBSU = Новый Структура("Наименование,УИД");
			СтруктураBSU.Наименование = Строка.Наименование;
			СтруктураBSU.УИД = Строка.УИД;
			МассивBSU.Добавить(СтруктураBSU);
		КонецЦикла;
	КонецЕсли;
	ПараметрыФормы.Вставить("СписокBSU",МассивBSU);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",Объект.НаправлениеДеятельности);
	
	ОткрытьФорму(
		"Документ.вогМастерСозданияИРедактированияНоменклатуры.Форма.ФормаВыбораНоменклатурнойПозиции",
		ПараметрыФормы,
		Элементы.НоменклатураНоменклатурнаяПозиция,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныеПозицииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение <> Неопределено Тогда
		Для Каждого НоменклатурнаяПозиция Из ВыбранноеЗначение Цикл
			
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
				НайденныеСтроки = Объект.НоменклатурныеПозиции.НайтиСтроки(Новый Структура("НоменклатурнаяПозицияСсылка",НоменклатурнаяПозиция));
				Если НайденныеСтроки.Количество() > 0 Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = Объект.НоменклатурныеПозиции.Добавить();
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
				НоваяСтрока.НоменклатурнаяПозицияСсылка = НоменклатурнаяПозиция;
				НоваяСтрока.УИД = НоменклатурнаяПозиция.УникальныйИдентификатор();
			Иначе
				НоваяСтрока.УИД = Новый УникальныйИдентификатор();
			КонецЕсли;
			
			ЗаполнитьСтрокуПоСсылке(НоменклатурнаяПозиция,НоваяСтрока.НомерСтроки - 1,"НоменклатурныеПозиции");
			
			Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда
				ДобавитьСтрокуSKU(НоваяСтрока, Истина);
			КонецЕсли;
			
			СформироватьНаименованиеBSU(НоваяСтрока.НомерСтроки - 1);			
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение <> Неопределено Тогда
		Для Каждого Номенклатура Из ВыбранноеЗначение Цикл
			
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
				НайденныеСтроки = Объект.Номенклатура.НайтиСтроки(Новый Структура("НоменклатураСсылка",Номенклатура));
				Если НайденныеСтроки.Количество() > 0 Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = Объект.Номенклатура.Добавить();
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
				НоваяСтрока.НоменклатураСсылка = Номенклатура;
				НоваяСтрока.УИД = Номенклатура.УникальныйИдентификатор();
			Иначе
				НоваяСтрока.УИД = Новый УникальныйИдентификатор();
			КонецЕсли;
			
			ЗаполнитьСтрокуПоСсылке(Номенклатура,НоваяСтрока.НомерСтроки - 1,"Номенклатура");
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Страна) Тогда
				НоваяСтрока.Страна = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
			КонецЕсли;
			
			Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда
				УИДСтроки = ДобавитьСтрокуBSU(НоваяСтрока.НоменклатурнаяПозиция, Истина);
				НоваяСтрока.УИДНоменклатурнаяПозиция = УИДСтроки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	УстановитьОтборСтрокВспомогательныхТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура ДизайныОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение <> Неопределено Тогда
		Для Каждого Дизайн Из ВыбранноеЗначение Цикл
			
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
				НайденныеСтроки = Объект.Дизайны.НайтиСтроки(Новый Структура("ДизайнСсылка",Дизайн));
				Если НайденныеСтроки.Количество() > 0 Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = Объект.Дизайны.Добавить();
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
				НоваяСтрока.ДизайнСсылка = Дизайн;
				НоваяСтрока.УИД = Дизайн.УникальныйИдентификатор();
			Иначе
				НоваяСтрока.УИД = Новый УникальныйИдентификатор();
			КонецЕсли;
			
			ЗаполнитьСтрокуПоСсылке(Дизайн,НоваяСтрока.НомерСтроки - 1,"Дизайны");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДизайныДизайнСсылкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
			НайденныеСтроки = Объект.Дизайны.НайтиСтроки(Новый Структура("ДизайнСсылка",ВыбранноеЗначение));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				Сообщить("Данный дизайн уже выбран.");
				Возврат;
			КонецЕсли;
			Элементы.Дизайны.ТекущиеДанные.ДизайнСсылка = ВыбранноеЗначение;
		Иначе
			Элементы.Дизайны.ТекущиеДанные.УИД = Новый УникальныйИдентификатор();
		КонецЕсли;
		ЗаполнитьСтрокуПоСсылке(ВыбранноеЗначение,Элементы.Дизайны.ТекущиеДанные.НомерСтроки-1,"Дизайны");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНоменклатураСсылкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
			НайденныеСтроки = Объект.Номенклатура.НайтиСтроки(Новый Структура("НоменклатураСсылка",ВыбранноеЗначение));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				Сообщить("Данная номенклатура уже выбрана.");
				Возврат;
			КонецЕсли;
			Элементы.Номенклатура.ТекущиеДанные.НоменклатураСсылка = ВыбранноеЗначение;
			Элементы.Номенклатура.ТекущиеДанные.УИД = ВыбранноеЗначение.УникальныйИдентификатор();
		КонецЕсли;
		
		ЗаполнитьСтрокуПоСсылке(ВыбранноеЗначение,Элементы.Номенклатура.ТекущиеДанные.НомерСтроки-1,"Номенклатура");
		
		Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда
			Элементы.Номенклатура.ТекущиеДанные.УИДНоменклатурнаяПозиция = ДобавитьСтрокуBSU(Элементы.Номенклатура.ТекущиеДанные.НоменклатурнаяПозиция, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтборСтрокВспомогательныхТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныеПозицииНоменклатурнаяПозицияСсылкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
			НайденныеСтроки = Объект.НоменклатурныеПозиции.НайтиСтроки(Новый Структура("НоменклатурнаяПозицияСсылка",ВыбранноеЗначение));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				Сообщить("Данная BSU уже выбрана.");
				Возврат;
			КонецЕсли;
			Элементы.НоменклатурныеПозиции.ТекущиеДанные.НоменклатурнаяПозицияСсылка = ВыбранноеЗначение;
			Элементы.НоменклатурныеПозиции.ТекущиеДанные.УИД = ВыбранноеЗначение.УникальныйИдентификатор();
		Иначе
			Элементы.НоменклатурныеПозиции.ТекущиеДанные.УИД = Новый УникальныйИдентификатор();
		КонецЕсли;
		
		ЗаполнитьСтрокуПоСсылке(ВыбранноеЗначение,Элементы.НоменклатурныеПозиции.ТекущиеДанные.НомерСтроки-1,"НоменклатурныеПозиции");
		
		Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда 
			ДобавитьСтрокуSKU(Элементы.НоменклатурныеПозиции.ТекущиеДанные, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	УстановитьВидимостьПоНаправлениюДеятельности();
	УстановитьДоступностьНаправленияДеятельности()
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуПоСсылке(Ссылка, НомерСтроки, ИмяТаблицы)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Реквизит Из Ссылка.Метаданные().Реквизиты Цикл
		
		Если Объект[ИмяТаблицы][НомерСтроки].Свойство(Реквизит.Имя) Тогда
			Объект[ИмяТаблицы][НомерСтроки][Реквизит.Имя] =  Ссылка[Реквизит.Имя];
		КонецЕсли;
		
		Если Реквизит.Имя = "ЕдиницаХраненияОстатков" ИЛИ Реквизит.Имя = "ЕдиницаДляОтчетов" Тогда
			Объект[ИмяТаблицы][НомерСтроки][Реквизит.Имя] =  Ссылка[Реквизит.Имя].ЕдиницаПоКлассификатору;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
		Объект[ИмяТаблицы][НомерСтроки].Наименование = Ссылка.Наименование;
	КонецЕсли;
	
	Если ИмяТаблицы = "КоллекцииДляСайта" Тогда
		
		Для Каждого Строка Из Ссылка.Состав Цикл
			НоваяСтрока = Объект.КоллекцииДляСайтаСостав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.УИДКоллекция = Объект[ИмяТаблицы][НомерСтроки].УИД;
		КонецЦикла;
		
		Для Каждого Строка Из Ссылка.Изображения Цикл
			НоваяСтрока = Объект.КоллекцииДляСайтаИзображения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.УИДКоллекция = Объект[ИмяТаблицы][НомерСтроки].УИД;
		КонецЦикла;
		
		Для Каждого Строка Из Ссылка.АналогиКоллекций Цикл
			НоваяСтрока = Объект.КоллекцииДляСайтаАналоги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.УИДКоллекция = Объект[ИмяТаблицы][НомерСтроки].УИД;
		КонецЦикла;
		
	КонецЕсли;
	
	// +++ VOG Кулаков П.Л. 17.12.2020 CRM-1102
	Если ИмяТаблицы = "НоменклатурныеПозиции" Тогда
		Объект[ИмяТаблицы][НомерСтроки].УИДДизайн = Ссылка.Дизайн.УникальныйИдентификатор();
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	Если ИмяТаблицы = "Номенклатура" Тогда
		
		Объект[ИмяТаблицы][НомерСтроки].ЦветПроизводителя = Ссылка.вогЦветПроизводителя;
		Объект[ИмяТаблицы][НомерСтроки].УИДНоменклатурнаяПозиция = Ссылка.НоменклатурнаяПозиция.УникальныйИдентификатор();
		
		ЕдиницаКоробки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("8751"); // Корбоки
		ЕдиницаПаллеты	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("005"); // Паллеты
		
		Запрос = Новый Запрос;
		ЕдиницаШтуки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"); // Штуки
		Если Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои Тогда
			ЕдиницаРулоны	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("736"); // Рулоны
			ТекстЗапроса 	= 
				"ВЫБРАТЬ
					|	ЕдиницыКоробки.Ссылка КАК Коробки,
					|	ЕдиницыРулоны.Ссылка КАК Рулоны,
					|	ЕдиницыПаллеты.Ссылка КАК Паллеты
					|ИЗ
					|	Справочник.ЕдиницыИзмерения КАК ЕдиницыКоробки,
					|	Справочник.ЕдиницыИзмерения КАК ЕдиницыРулоны,
					|	Справочник.ЕдиницыИзмерения КАК ЕдиницыПаллеты
					|ГДЕ
					|	ЕдиницыПаллеты.Владелец = &Ссылка
					|	И ЕдиницыПаллеты.ЕдиницаПоКлассификатору = &ЕдиницаПаллеты
					|	И ЕдиницыРулоны.Владелец = &Ссылка
					|	И ЕдиницыРулоны.ЕдиницаПоКлассификатору = &ЕдиницаРулоны
					|	И ЕдиницыКоробки.Владелец = &Ссылка
					|	И ЕдиницыКоробки.ЕдиницаПоКлассификатору = &ЕдиницаКоробки";
			Запрос.УстановитьПараметр("ЕдиницаРулоны", ЕдиницаРулоны);
		ИначеЕсли Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
			ЕдиницаМ2	 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("055"); // Квадратный метр
			ТекстЗапроса 	= 
				"ВЫБРАТЬ
					|	ЕдиницыШтуки.Ссылка КАК Штуки,
					|	ЕдиницыКоробки.Ссылка КАК Коробки,
					|	ЕдиницыМ2.Ссылка КАК Метры,
					|	ЕдиницыПаллеты.Ссылка КАК Паллеты
					|ИЗ
					|	Справочник.ЕдиницыИзмерения КАК ЕдиницыШтуки,
					|	Справочник.ЕдиницыИзмерения КАК ЕдиницыКоробки,
					|	Справочник.ЕдиницыИзмерения КАК ЕдиницыМ2,
					|	Справочник.ЕдиницыИзмерения КАК ЕдиницыПаллеты
					|ГДЕ
					|	ЕдиницыШтуки.Владелец = &Ссылка
					|	И ЕдиницыШтуки.ЕдиницаПоКлассификатору = &ЕдиницаШтуки
					|	И ЕдиницыПаллеты.Владелец = &Ссылка
					|	И ЕдиницыПаллеты.ЕдиницаПоКлассификатору = &ЕдиницаПаллеты
					|	И ЕдиницыМ2.Владелец = &Ссылка
					|	И ЕдиницыМ2.ЕдиницаПоКлассификатору = &ЕдиницаМетры
					|	И ЕдиницыКоробки.Владелец = &Ссылка
					|	И ЕдиницыКоробки.ЕдиницаПоКлассификатору = &ЕдиницаКоробки";
			Запрос.УстановитьПараметр("ЕдиницаМетры", ЕдиницаМ2);
			Запрос.УстановитьПараметр("ЕдиницаШтуки", ЕдиницаШтуки);
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ЕдиницаКоробки", ЕдиницаКоробки);
		Запрос.УстановитьПараметр("ЕдиницаПаллеты", ЕдиницаПаллеты);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Если Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои Тогда
				Объект[ИмяТаблицы][НомерСтроки].КоличествоШтукВКоробке 				= ВыборкаДетальныеЗаписи.Коробки.Коэффициент;
			ИначеЕсли Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда 
				Если Объект[ИмяТаблицы][НомерСтроки].ЕдиницаИзмерения = ЕдиницаМ2 Тогда
					Объект[ИмяТаблицы][НомерСтроки].КоличествоМетровВПаллетеПлитка 	= ВыборкаДетальныеЗаписи.Паллеты.Коэффициент;
					Объект[ИмяТаблицы][НомерСтроки].КоличествоМетровВКоробкеПлитка 	= ВыборкаДетальныеЗаписи.Коробки.Коэффициент;
				ИначеЕсли Объект[ИмяТаблицы][НомерСтроки].ЕдиницаИзмерения = ЕдиницаШтуки Тогда
					Объект[ИмяТаблицы][НомерСтроки].КоличествоМетровВПаллетеПлитка 	= ВыборкаДетальныеЗаписи.Паллеты.Коэффициент / ВыборкаДетальныеЗаписи.Метры.Коэффициент;
					Объект[ИмяТаблицы][НомерСтроки].КоличествоМетровВКоробкеПлитка 	= ВыборкаДетальныеЗаписи.Коробки.Содержит / ВыборкаДетальныеЗаписи.Метры.Коэффициент;
				КонецЕсли;
				Объект[ИмяТаблицы][НомерСтроки].КоличествоШтукВКоробке 				= ВыборкаДетальныеЗаписи.Коробки.Содержит;
				Объект[ИмяТаблицы][НомерСтроки].ДлинаПлитка 						= ВыборкаДетальныеЗаписи.Штуки.Длина;
				Объект[ИмяТаблицы][НомерСтроки].ШиринаПлитка 						= ВыборкаДетальныеЗаписи.Штуки.Ширина;
				Объект[ИмяТаблицы][НомерСтроки].ВысотаПлитка 						= ВыборкаДетальныеЗаписи.Штуки.Высота;
			КонецЕсли;
			Объект[ИмяТаблицы][НомерСтроки].ВесКоробки 								= ВыборкаДетальныеЗаписи.Коробки.Вес;
			Объект[ИмяТаблицы][НомерСтроки].ДлинаКоробки 							= ВыборкаДетальныеЗаписи.Коробки.Длина;
			Объект[ИмяТаблицы][НомерСтроки].ШиринаКоробки 							= ВыборкаДетальныеЗаписи.Коробки.Ширина;
			Объект[ИмяТаблицы][НомерСтроки].ВысотаКоробки 							= ВыборкаДетальныеЗаписи.Коробки.Высота;
			Объект[ИмяТаблицы][НомерСтроки].КоличествоКоробокВПаллете 				= ВыборкаДетальныеЗаписи.Паллеты.Содержит;
		КонецЕсли;
		
		// +++ VOG Кулаков П.Л. 21.10.2020 CRM-991
		Если Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка 
					И Объект.ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
			Запрос.Текст = "ВЫБРАТЬ
			               |	вогШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
			               |	вогШтрихкодыНоменклатуры.Упаковка.ЕдиницаПоКлассификатору КАК Упаковка
			               |ИЗ
			               |	РегистрСведений.вогШтрихкодыНоменклатуры КАК вогШтрихкодыНоменклатуры
			               |ГДЕ
			               |	вогШтрихкодыНоменклатуры.Номенклатура = &Ссылка
			               |	И вогШтрихкодыНоменклатуры.Упаковка.ЕдиницаПоКлассификатору В(&Единицы)";
			Единицы = Новый Массив;
			Единицы.Добавить(ЕдиницаШтуки);
			Единицы.Добавить(ЕдиницаКоробки);
			Запрос.УстановитьПараметр("Единицы",Единицы);
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Пока РезультатЗапроса.Следующий() Цикл
				Если РезультатЗапроса.Упаковка = ЕдиницаКоробки Тогда
					Объект[ИмяТаблицы][НомерСтроки].Штрихкод = РезультатЗапроса.Штрихкод;
				ИначеЕсли РезультатЗапроса.Упаковка = ЕдиницаШтуки Тогда				
					Если ЗначениеЗаполнено(Объект[ИмяТаблицы][НомерСтроки].НоменклатурнаяПозиция) Тогда
						Если ТипЗнч(Объект[ИмяТаблицы][НомерСтроки].НоменклатурнаяПозиция) = Тип("Строка") Тогда
							НайденныеСтроки = Объект.НоменклатурныеПозиции.НайтиСтроки(Новый Структура("УИД",Объект[ИмяТаблицы][НомерСтроки].УИДНоменклатурнаяПозиция));
							Если НайденныеСтроки.Количество() > 0 Тогда
								НоменклатурнаяПозиция = НайденныеСтроки[0];
							Иначе
								НоменклатурнаяПозиция = Неопределено;
							КонецЕсли;
						Иначе
							НоменклатурнаяПозиция = Объект[ИмяТаблицы][НомерСтроки].НоменклатурнаяПозиция;
						КонецЕсли;
					Иначе
						НоменклатурнаяПозиция = Неопределено;
					КонецЕсли;
					
					Если НоменклатурнаяПозиция <> Неопределено Тогда
						Если ЗначениеЗаполнено(НоменклатурнаяПозиция.ЕдиницаПродажиПлитка) Тогда
							ЕдиницаПродажи = НоменклатурнаяПозиция.ЕдиницаПродажиПлитка;
						Иначе
							ЕдиницаПродажи = Неопределено;
						КонецЕсли;
						Если ЕдиницаПродажи <> Неопределено И ЕдиницаПродажи.ПринадлежитЭлементу(Справочники.вогВидыПлитки.Декорация) Тогда
							Объект[ИмяТаблицы][НомерСтроки].ШтрихкодШТ = РезультатЗапроса.Штрихкод;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		
		// +++ VOG Кулаков П.Л. 01.09.2020 CRM-883
		Для Каждого Строка Из Ссылка.вогСоставМозаики Цикл
			НоваяСтрока = Объект.НоменклатураСоставМозаики.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.УИДНоменклатураВладелец = Объект[ИмяТаблицы][НомерСтроки].УИД;
		КонецЦикла;
		// --- VOG Кулаков П.Л.
		
		// +++ VOG Кулаков П.Л. 20.11.2020 CRM-1020
		Для Каждого Строка Из Ссылка.Компаньоны Цикл
			НоваяСтрока = Объект.НоменклатураКомпаньоны.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.УИДНоменклатураВладелец = Объект[ИмяТаблицы][НомерСтроки].УИД;
		КонецЦикла;
		
		Для Каждого Строка Из Ссылка.Коллекции Цикл
			НоваяСтрока = Объект.НоменклатураКоллекции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.УИДНоменклатураВладелец = Объект[ИмяТаблицы][НомерСтроки].УИД;
		КонецЦикла;
		// --- VOG Кулаков П.Л.
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияПереходов

&НаСервере
Процедура ЗаполнитьТаблицуПереходов()
	
	ЗаполнитьТаблицуПереходовДляПросмотра(Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПереходовДляРедактирования()
	
	ТаблицаПереходов.Очистить();
	
	НовыйПереход = ТаблицаПереходов.Добавить();
	НовыйПереход.ПорядковыйНомерПерехода 			= 1;
	НовыйПереход.ИмяОсновнойСтраницы  				= "СтраницаМастераНачало";
	НовыйПереход.ИмяСтраницыНавигации 				= "СтраницаНавигацииНачало";
	НовыйПереход.ИмяОбработчикаПриПереходеДалее 	= "СтраницаМастераНачало_ПриПереходеДалее";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПереходовДляПросмотра(НовыйДокумент)
	
	ТаблицаПереходов.Очистить();
	
	КоличествоСтраниц = 0;
	НомерПерехода = 1;
	Если НовыйДокумент ИЛИ Объект.СтатусСогласования = Перечисления.вогСтатусыСогласования.Создан Тогда
		НовыйПереход = ТаблицаПереходов.Добавить();
		НовыйПереход.ПорядковыйНомерПерехода 			= 1;
		НовыйПереход.ИмяОсновнойСтраницы  				= "СтраницаМастераНачало";
		НовыйПереход.ИмяСтраницыНавигации 				= "СтраницаНавигацииНачало";
		НовыйПереход.ИмяОбработчикаПриПереходеДалее 	= "СтраницаМастераНачало_ПриПереходеДалее";
		КоличествоСтраниц = КоличествоСтраниц + 1;
		НомерПерехода = НомерПерехода + 1;
	КонецЕсли;
	
	
	Если Объект.ТаблицаДизайны Тогда
		КоличествоСтраниц = КоличествоСтраниц + 1;
	КонецЕсли;
	Если Объект.ТаблицаНоменклатура Тогда
		КоличествоСтраниц = КоличествоСтраниц + 1;
	КонецЕсли;
	Если Объект.ТаблицаНоменклатурныеПозиции Тогда
		КоличествоСтраниц = КоличествоСтраниц + 1;
	КонецЕсли;
	Если Объект.ТаблицаКоллекцииДляСайта Тогда
		КоличествоСтраниц = КоличествоСтраниц + 1;
	КонецЕсли;
	
	Если КоличествоСтраниц = 0 Тогда
		ЗаполнитьТаблицуПереходовДляРедактирования();
	КонецЕсли;
	
	Если Объект.ТаблицаДизайны Тогда
		НовыйПереход = ТаблицаПереходов.Добавить();
		НовыйПереход.ПорядковыйНомерПерехода 			= НомерПерехода;
		НовыйПереход.ИмяОсновнойСтраницы  				= "СтраницаДизайн";
		Если НомерПерехода = КоличествоСтраниц Тогда
			Если КоличествоСтраниц = 1 Тогда
				ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
			Иначе
				ИмяСтраницыНавигации = "СтраницаНавигацииОкончаниеИНазад";
			КонецЕсли;
		ИначеЕсли НомерПерехода = 1 Тогда
			ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
		Иначе
			ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
		КонецЕсли;
		НовыйПереход.ИмяСтраницыНавигации 				= ИмяСтраницыНавигации;
		НомерПерехода = НомерПерехода + 1;
	КонецЕсли;
	
	Если Объект.ТаблицаНоменклатура Тогда
		НовыйПереход = ТаблицаПереходов.Добавить();
		НовыйПереход.ПорядковыйНомерПерехода 			= НомерПерехода;
		НовыйПереход.ИмяОсновнойСтраницы  				= "СтраницаНоменклатура";
		Если НомерПерехода = КоличествоСтраниц Тогда
			Если КоличествоСтраниц = 1 Тогда
				ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
			Иначе
				ИмяСтраницыНавигации = "СтраницаНавигацииОкончаниеИНазад";
			КонецЕсли;
		ИначеЕсли НомерПерехода = 1 Тогда
			ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
		Иначе
			ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
		КонецЕсли;
		НовыйПереход.ИмяСтраницыНавигации 				= ИмяСтраницыНавигации;
		НомерПерехода = НомерПерехода + 1;
	КонецЕсли;
	
	Если Объект.ТаблицаНоменклатурныеПозиции Тогда
		НовыйПереход = ТаблицаПереходов.Добавить();
		НовыйПереход.ПорядковыйНомерПерехода 			= НомерПерехода;
		НовыйПереход.ИмяОсновнойСтраницы  				= "СтраницаBSU";
		Если НомерПерехода = КоличествоСтраниц Тогда
			Если КоличествоСтраниц = 1 Тогда
				ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
			Иначе
				ИмяСтраницыНавигации = "СтраницаНавигацииОкончаниеИНазад";
			КонецЕсли;
		ИначеЕсли НомерПерехода = 1 Тогда
			ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
		Иначе
			ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
		КонецЕсли;
		НовыйПереход.ИмяСтраницыНавигации 				= ИмяСтраницыНавигации;
		НомерПерехода = НомерПерехода + 1;
	КонецЕсли;
	
	Если Объект.ТаблицаКоллекцииДляСайта Тогда
		НовыйПереход = ТаблицаПереходов.Добавить();
		НовыйПереход.ПорядковыйНомерПерехода 			= НомерПерехода;
		НовыйПереход.ИмяОсновнойСтраницы  				= "СтраницаКоллекцииДляСайта";
		Если НомерПерехода = КоличествоСтраниц Тогда
			Если КоличествоСтраниц = 1 Тогда
				ИмяСтраницыНавигации = "СтраницаНавигацииОкончание";
			Иначе
				ИмяСтраницыНавигации = "СтраницаНавигацииОкончаниеИНазад";
			КонецЕсли;
		ИначеЕсли НомерПерехода = 1 Тогда
			ИмяСтраницыНавигации = "СтраницаНавигацииНачало";
		Иначе
			ИмяСтраницыНавигации = "СтраницаНавигацииПродолжение";
		КонецЕсли;
		НовыйПереход.ИмяСтраницыНавигации 				= ИмяСтраницыНавигации;
		НомерПерехода = НомерПерехода + 1;
	КонецЕсли;
	
	УстановитьВидимостьКомандПерехода();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПереходов

&НаКлиенте
Функция Подключаемый_СтраницаМастераНачало_ПриПереходеДалее(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбран способ заполнения документа");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Объект.ТаблицаДизайны
			И Не Объект.ТаблицаКоллекцииДляСайта
			И Не Объект.ТаблицаНоменклатура
			И Не Объект.ТаблицаНоменклатурныеПозиции Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбрано ни одной таблицы для отображения");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаполнитьТаблицуПереходовДляПросмотра(Объект.Ссылка.Пустая());
		УстановитьЗаголовокФормы();
	КонецЕсли;
			
КонецФункции

#КонецОбласти