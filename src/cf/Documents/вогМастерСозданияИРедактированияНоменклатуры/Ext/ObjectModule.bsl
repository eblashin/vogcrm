
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		Ответственный = ТекущийПользователь;
		
		НаправлениеДеятельности = ТекущийПользователь.CRM_НаправлениеДеятельности;
		Если НЕ ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
			НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка;
		КонецЕсли;
		
		НаправлениеДеятельности = НаправлениеДеятельности;
		СтатусСогласования		= Перечисления.вогСтатусыСогласования.Создан;
		ВидОперации			    = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// +++ VOG Кулаков П.Л. 20.02.2021 DEV-196
	Если СтатусСогласования = Перечисления.вогСтатусыСогласования.Создан Тогда
		ПроверяемыеРеквизиты.Очистить();
		Возврат;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	Если НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
		
		ПроверяемыеРеквизиты.Добавить("Дизайны.ФорматПлитки");
		ПроверяемыеРеквизиты.Добавить("Дизайны.Сорт");
		ПроверяемыеРеквизиты.Добавить("НоменклатурныеПозиции.ЕдиницаПродажиПлитка");
		ПроверяемыеРеквизиты.Добавить("НоменклатурныеПозиции.ТипИспользования");
		ПроверяемыеРеквизиты.Добавить("НоменклатурныеПозиции.СтатусПлитка");
		//ПроверяемыеРеквизиты.Добавить("НоменклатурныеПозиции.ГодАнонса"); Кайдашов DEV-167
		ПроверяемыеРеквизиты.Добавить("НоменклатурныеПозиции.РейтингХолдинга");
		ПроверяемыеРеквизиты.Добавить("НоменклатурныеПозиции.МатериалПлитка");
		ПроверяемыеРеквизиты.Добавить("Номенклатура.ЗаводскойАртикул");
		ПроверяемыеРеквизиты.Добавить("Номенклатура.ЦветПроизводителя");
		// +++ VOG Кулаков П.Л. 01.09.2020 CRM-883
		ПроверяемыеРеквизиты.Добавить("Номенклатура.КоличествоМетровВКоробкеПлитка");
		ПроверяемыеРеквизиты.Добавить("Номенклатура.КоличествоМетровВПаллетеПлитка");
		// --- VOG Кулаков П.Л.
		
		// +++ VOG Кулаков П.Л. 16.11.2020 CRM-1045
		ПроверяемыеРеквизиты.Добавить("Номенклатура.Рейтинг");
		ПроверяемыеРеквизиты.Добавить("Номенклатура.Статус");
		ПроверяемыеРеквизиты.Добавить("Номенклатура.ДлинаПлитка");
		ПроверяемыеРеквизиты.Добавить("Номенклатура.ШиринаПлитка");
		ПроверяемыеРеквизиты.Добавить("Номенклатура.ВысотаПлитка");
		// --- VOG Кулаков П.Л.
		
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
		ПроверяемыеРеквизиты.Добавить("Дизайны.ДизайнСсылка");
		ПроверяемыеРеквизиты.Добавить("НоменклатурныеПозиции.НоменклатурнаяПозицияСсылка");
		ПроверяемыеРеквизиты.Добавить("Номенклатура.НоменклатураСсылка");
		ПроверяемыеРеквизиты.Добавить("КоллекцииДляСайта.КоллекцияСсылка");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	                    
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииСоздание 		= Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание;
	ВидОперацииРедактирование 	= Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение;
	Для Каждого Строка Из Дизайны Цикл
		Если ВидОперации = ВидОперацииСоздание Тогда
			ДизайнОбъект = Справочники.вогДизайныНоменклатуры.СоздатьЭлемент();
			ДизайнОбъект.УстановитьСсылкуНового(Строка.ДизайнСсылка);
		ИначеЕсли ВидОперации = ВидОперацииРедактирование Тогда
			ДизайнОбъект = Строка.ДизайнСсылка.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ДизайнОбъект,Строка);
		ДизайнОбъект.НаправлениеДеятельности = НаправлениеДеятельности;
		ДизайнОбъект.Записать();
	КонецЦикла;	
	
	Для Каждого Строка Из НоменклатурныеПозиции Цикл
		Если ВидОперации = ВидОперацииСоздание Тогда
			НоменклатурнаяПозицияОбъект = Справочники.вогНоменклатурныеПозиции.СоздатьЭлемент();
			НоменклатурнаяПозицияОбъект.УстановитьСсылкуНового(Строка.НоменклатурнаяПозицияСсылка);
		ИначеЕсли ВидОперации = ВидОперацииРедактирование Тогда
			НоменклатурнаяПозицияОбъект = Строка.НоменклатурнаяПозицияСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоменклатурнаяПозицияОбъект,Строка);
		Если ТипЗнч(Строка.Дизайн) = Тип("Строка") Тогда
			ДизайнСтрока = Дизайны.Найти(Строка.УИДДизайн,"УИД");
			Если ДизайнСтрока <> Неопределено Тогда
				НоменклатурнаяПозицияОбъект.Дизайн = ДизайнСтрока.ДизайнСсылка;
			КонецЕсли;
		КонецЕсли;
		НоменклатурнаяПозицияОбъект.НаправлениеДеятельности = НаправлениеДеятельности;
		НоменклатурнаяПозицияОбъект.Записать();
		// +++ VOG Кулаков П.Л. 21.12.2020 CRM-1102
		Если ВидОперации = ВидОперацииРедактирование Тогда
			ИзменитьНаименованияСвязанныхSKU(Строка.НоменклатурнаяПозицияСсылка);
		КонецЕсли;
		// --- VOG Кулаков П.Л.
	КонецЦикла;
	
	Для Каждого Строка Из Номенклатура Цикл
		Если ВидОперации = ВидОперацииСоздание Тогда
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			НоменклатураОбъект.УстановитьСсылкуНового(Строка.НоменклатураСсылка);
		ИначеЕсли ВидОперации = ВидОперацииРедактирование Тогда
			НоменклатураОбъект = Строка.НоменклатураСсылка.ПолучитьОбъект();
		КонецЕсли;
		// +++ VOG Кулаков П.Л. 18.02.2021 DEV-176
		Если ВидОперации = ВидОперацииРедактирование Тогда
			ЗаполнитьЗначенияСвойств(НоменклатураОбъект,Строка,,"ФайлКартинки, Наименование, НаименованиеПолное");
			Если НетПродажПоНоменклатуре(НоменклатураОбъект.Ссылка) Тогда
				ЗаполнитьЗначенияСвойств(НоменклатураОбъект,Строка,"Наименование, НаименованиеПолное");
			Иначе
				Сообщить("Невозможно изменить наименование SKU: " + НоменклатураОбъект.Ссылка + ". По SKU есть продажи.");
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(НоменклатураОбъект,Строка,,"ФайлКартинки");
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		
		НоменклатураОбъект.вогЦветПроизводителя = Строка.ЦветПроизводителя;
		НоменклатураОбъект.НаправлениеДеятельности = НаправлениеДеятельности;
		НоменклатураОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
		
		Если ТипЗнч(Строка.НоменклатурнаяПозиция) = Тип("Строка") Тогда
			НоменклатурнаяПозицияСтрока = НоменклатурныеПозиции.Найти(Строка.УИДНоменклатурнаяПозиция,"УИД");
			Если НоменклатурнаяПозицияСтрока <> Неопределено Тогда
				НоменклатураОбъект.НоменклатурнаяПозиция = НоменклатурнаяПозицияСтрока.НоменклатурнаяПозицияСсылка;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ФайлКартинки) Тогда
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор",Ответственный);
			ПараметрыФайла.Вставить("ВладелецФайлов",Строка.НоменклатураСсылка);
			ПараметрыФайла.Вставить("ИмяБезРасширения",Строка.ФайлКартинки.Наименование);
			ПараметрыФайла.Вставить("РасширениеБезТочки",Строка.ФайлКартинки.Расширение);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяДата());
			ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Строка.ФайлКартинки);
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла,Новый УникальныйИдентификатор());
			Описание = Строка.ФайлКартинки.Описание;
			СсылкаНаФайл = РаботаСФайлами.ДобавитьФайл(
			ПараметрыФайла,
			АдресФайлаВоВременномХранилище,
			,
			Описание);
			НоменклатураОбъект.ФайлКартинки = СсылкаНаФайл;
		КонецЕсли;
		
		// +++ VOG Кулаков П.Л. 01.09.2020 CRM-883
		Если НоменклатураОбъект.НоменклатурнаяПозиция.ЕдиницаПродажиПлитка = Справочники.вогВидыПлитки.Мозаика Тогда
			НоменклатураОбъект.вогСоставМозаики.Очистить();
			НайденныеСтроки = НоменклатураСоставМозаики.НайтиСтроки(Новый Структура("УИДНоменклатураВладелец",Строка.УИД));
			Для Каждого Элемент Из НайденныеСтроки Цикл
				НоваяСтрока = НоменклатураОбъект.вогСоставМозаики.Добавить();
				НоваяСтрока.КоличествоЧипов = Элемент.КоличествоЧипов;
				Если ТипЗнч(Элемент.Номенклатура) = Тип("Строка") Тогда
					НоменклатураСтрока = Номенклатура.Найти(Элемент.УИДНоменклатура,"УИД");
					Если НоменклатураСтрока <> Неопределено Тогда
						НоваяСтрока.Номенклатура = НоменклатураСтрока.НоменклатураСсылка;
					КонецЕсли;
				Иначе
					НоваяСтрока.Номенклатура = Элемент.Номенклатура;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		
		// +++ VOG Кулаков П.Л. 20.11.2020 CRM-1020
		НоменклатураОбъект.Компаньоны.Очистить();
		НайденныеСтроки = НоменклатураКомпаньоны.НайтиСтроки(Новый Структура("УИДНоменклатураВладелец",Строка.УИД));
		Для Каждого Элемент Из НайденныеСтроки Цикл
			НоваяСтрока = НоменклатураОбъект.Компаньоны.Добавить();
			Если ТипЗнч(Элемент.Компаньон) = Тип("Строка") Тогда
				НоменклатураСтрока = Номенклатура.Найти(Элемент.УИДНоменклатура,"УИД");
				Если НоменклатураСтрока <> Неопределено Тогда
					НоваяСтрока.Компаньон = НоменклатураСтрока.НоменклатураСсылка;
				КонецЕсли;
			Иначе
				НоваяСтрока.Компаньон = Элемент.Компаньон;
			КонецЕсли;
		КонецЦикла;
		
		НоменклатураОбъект.Коллекции.Очистить();
		НайденныеСтроки = НоменклатураКоллекции.НайтиСтроки(Новый Структура("УИДНоменклатураВладелец",Строка.УИД));
		Для Каждого Элемент Из НайденныеСтроки Цикл
			НоваяСтрока = НоменклатураОбъект.Коллекции.Добавить();
			НоваяСтрока.Коллекция = Элемент.Коллекция;
		КонецЦикла;
		// --- VOG Кулаков П.Л.
		
		НоменклатураОбъект.Записать();
		
		// +++ VOG Кулаков П.Л. 05.11.2020 CRM-1018
		Если НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка 
					И ТипЗнч(Строка.НоменклатурнаяПозиция) = Тип("СправочникСсылка.вогНоменклатурныеПозиции") 
					И Строка.Основной Тогда
			// +++ VOG Кулаков П.Л. 01.03.2021 DEV-193
			СнятьПризнакОсновнойУНоменклатуры(Строка.НоменклатурнаяПозиция);
			// --- VOG Кулаков П.Л.
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		
		вогИнтеграцияСУчетнойСистемой.ЗарегистрироватьДанныеКОтправкеВУчетнуюСистему(НоменклатураОбъект.Ссылка,Истина,Истина);
		
		СоответствиеЕдиницИзмерения = СоздатьЕдиницыИзмерения(НоменклатураОбъект.Ссылка, Строка);
		Если СоответствиеЕдиницИзмерения <> Неопределено Тогда
			НоменклатураОбъект.ЕдиницаХраненияОстатков = СоответствиеЕдиницИзмерения.Получить(Строка.ЕдиницаХраненияОстатков);
			НоменклатураОбъект.ЕдиницаДляОтчетов = СоответствиеЕдиницИзмерения.Получить(Строка.ЕдиницаДляОтчетов);
			НоменклатураОбъект.Записать();
		КонецЕсли;
		
		// +++ VOG Кулаков П.Л. 21.10.2020 CRM-991
	    ДобавитьИнформациюОШтрихкодах(НоменклатураОбъект.Ссылка,СоответствиеЕдиницИзмерения,Строка);
		// --- VOG Кулаков П.Л.
		
	КонецЦикла;
	
	Для Каждого Строка Из КоллекцииДляСайта Цикл
		Если ВидОперации = ВидОперацииСоздание Тогда
			КоллекцияОбъект = Справочники.КоллекцииДляСайта.СоздатьЭлемент();
			КоллекцияОбъект.УстановитьСсылкуНового(Строка.КоллекцияСсылка);
		ИначеЕсли ВидОперации = ВидОперацииРедактирование Тогда
			КоллекцияОбъект = Строка.КоллекцияСсылка.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(КоллекцияОбъект,Строка);
		КоллекцияОбъект.НаправлениеДеятельности = НаправлениеДеятельности;
		
		Если ТипЗнч(Строка.НоменклатурнаяПозиция) = Тип("Строка") Тогда
			НоменклатурнаяПозицияСтрока = НоменклатурныеПозиции.Найти(Строка.УИДНоменклатурнаяПозиция,"УИД");
			Если НоменклатурнаяПозицияСтрока <> Неопределено Тогда
				КоллекцияОбъект.НоменклатурнаяПозиция = НоменклатурнаяПозицияСтрока.НоменклатурнаяПозицияСсылка;
			КонецЕсли;
		КонецЕсли;
		
		// Табличная часть Состав
		Состав = КоллекцииДляСайтаСостав.НайтиСтроки(Новый Структура("УИДКоллекция",Строка.УИД));
		Для Каждого Элемент Из Состав Цикл
			НоваяСтрока = КоллекцияОбъект.Состав.Добавить();
			Если ТипЗнч(Элемент.Номенклатура) = Тип("Строка") Тогда
				НоменклатураСтрока = Номенклатура.Найти(Элемент.УИДНоменклатура,"УИД");
				Если НоменклатураСтрока <> Неопределено Тогда
					НоваяСтрока.Номенклатура = НоменклатураСтрока.НоменклатураСсылка;
				КонецЕсли;
			Иначе
				НоваяСтрока.Номенклатура = Элемент.Номенклатура;
			КонецЕсли;
		КонецЦикла;
		
		// Табличная часть Изображения
		Изображения = КоллекцииДляСайтаИзображения.НайтиСтроки(Новый Структура("УИДКоллекция",Строка.УИД));
		Для Каждого Элемент Из Изображения Цикл
			НоваяСтрока = КоллекцияОбъект.Изображения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Элемент);
		КонецЦикла;
		
		// Табличная часть Аналоги
		Аналоги = КоллекцииДляСайтаАналоги.НайтиСтроки(Новый Структура("УИДКоллекция",Строка.УИД));
		Для Каждого Элемент Из Аналоги Цикл
			НоваяСтрока = КоллекцияОбъект.АналогиКоллекций.Добавить();
			Если ТипЗнч(Элемент.Коллекция) = Тип("Строка") Тогда
				КоллекцияСтрока = КоллекцииДляСайта.Найти(Элемент.УИДНоваяКоллекция,"УИД");
				Если КоллекцияСтрока <> Неопределено Тогда
					НоваяСтрока.Коллекция = КоллекцияСтрока.КоллекцияСсылка;
				КонецЕсли;
			Иначе
				НоваяСтрока.Коллекция = Элемент.Коллекция;
			КонецЕсли;
		КонецЦикла;
		
		КоллекцияОбъект.Записать();
	КонецЦикла;
				
КонецПроцедуры

Процедура ИзменитьНаименованияСвязанныхSKU(НоменклатурнаяПозиция)
	
	МассивНоменклатуры = Номенклатура.ВыгрузитьКолонку("НоменклатураСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.НоменклатурнаяПозиция = &НоменклатурнаяПозиция";
	
	Запрос.УстановитьПараметр("НоменклатурнаяПозиция", НоменклатурнаяПозиция);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если МассивНоменклатуры.Найти(ВыборкаДетальныеЗаписи.Ссылка) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если НетПродажПоНоменклатуре(ВыборкаДетальныеЗаписи.Ссылка) Тогда
			СтруктураДанных = ПолучитьСтруктуруДанныхНаименования(ВыборкаДетальныеЗаписи.Ссылка,Ложь);
			НаименованиеSKU = СформироватьНаименованиеНоменклатуры(СтруктураДанных,НаправлениеДеятельности,Ложь);
			ПолноеНаименованиеSKU = СформироватьНаименованиеНоменклатуры(СтруктураДанных,НаправлениеДеятельности,Истина);
			Если ВыборкаДетальныеЗаписи.Ссылка.Наименование <> НаименованиеSKU ИЛИ ВыборкаДетальныеЗаписи.Ссылка.НаименованиеПолное <> ПолноеНаименованиеSKU Тогда
				НоменклатураОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				НоменклатураОбъект.Наименование = НаименованиеSKU;
				НоменклатураОбъект.НаименованиеПолное = ПолноеНаименованиеSKU;
				НоменклатураОбъект.Записать();
				Сообщить("Изменено наименование связанной SKU: " + ВыборкаДетальныеЗаписи.Ссылка);
			КонецЕсли;
		Иначе
			Сообщить("Невозможно изменить наименование связанной SKU: " + ВыборкаДетальныеЗаписи.Ссылка + ". По SKU есть продажи.");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НетПродажПоНоменклатуре(СсылкаНоменклатуры)
		
	МассивМест = Новый Массив;
    МассивМест.Добавить(Метаданные.РегистрыНакопления.вогПродажи);
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СсылкаНоменклатуры);
	УстановитьПривилегированныйРежим(Истина);
    ТабСсылок = НайтиПоСсылкам(МассивСсылок, Новый Массив, МассивМест, Новый Массив);
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ТабСсылок.Количество() = 0;
	
КонецФункции

Процедура СнятьПризнакОсновнойУНоменклатуры(НоменклатурнаяПозиция)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ПометкаУдаления
		|	И Номенклатура.НоменклатурнаяПозиция = &НоменклатурнаяПозиция
		|	И Номенклатура.Основной
		// +++ VOG Кулаков П.Л. 01.03.2021 DEV-193
		|	И НЕ Номенклатура.Ссылка В (&Номенклатура)";
		// --- VOG Кулаков П.Л.
	
	Запрос.УстановитьПараметр("НоменклатурнаяПозиция", НоменклатурнаяПозиция);
	// +++ VOG Кулаков П.Л. 01.03.2021 DEV-193
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура.ВыгрузитьКолонку("НоменклатураСсылка"));
	// --- VOG Кулаков П.Л.
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		НомОбъект.Основной = Ложь;
		НомОбъект.Записать();
		// ++ VOG Солодов В.В. 11.02.2021 DEV-164
		вогИнтеграцияСУчетнойСистемой.ЗарегистрироватьДанныеКОтправкеВУчетнуюСистему(НомОбъект.Ссылка, Истина, Истина);
		// -- VOG Солодов В.В. 11.02.2021 DEV-164
		// +++ VOG Кулаков П.Л. 01.03.2021 DEV-193
		Сообщить("У SKU " + НомОбъект.Наименование  + " снят признак ""Основной""");
		// --- VOG Кулаков П.Л.
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИнформациюОШтрихкодах(НоменклатураСсылка,СоответствиеЕдиницИзмерения,Строка)
	
	Если СокрЛП(Строка.Штрихкод) <> "" Тогда
		ЕдиницаКоробки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("8751"); // Корбоки
		МенеджерЗаписи = РегистрыСведений.вогШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Номенклатура = НоменклатураСсылка;
		МенеджерЗаписи.Штрихкод = СокрЛП(Строка.Штрихкод);
		МенеджерЗаписи.Упаковка = СоответствиеЕдиницИзмерения.Получить(ЕдиницаКоробки);
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Если СокрЛП(Строка.ШтрихкодШТ) <> "" Тогда
		Если НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
			ЕдиницаШтуки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"); // Штуки
		Иначе
			ЕдиницаШтуки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("736"); // Рулон
		КонецЕсли;
		МенеджерЗаписи = РегистрыСведений.вогШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Номенклатура = НоменклатураСсылка;
		МенеджерЗаписи.Штрихкод = СокрЛП(Строка.ШтрихкодШТ);
		МенеджерЗаписи.Упаковка = СоответствиеЕдиницИзмерения.Получить(ЕдиницаШтуки);
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	
КонецПроцедуры

Функция СоздатьЕдиницыИзмерения(НоменклатураСсылка, СтрокаТаблицы)
	
	Если НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
		Возврат СоздатьЕдиницыИзмеренияПлитка(НоменклатураСсылка, СтрокаТаблицы);
	Иначе
		Возврат СоздатьЕдиницыИзмеренияОбои(НоменклатураСсылка, СтрокаТаблицы);
	КонецЕсли;
	
КонецФункции

Функция СоздатьЕдиницыИзмеренияПлитка(НоменклатураСсылка, СтрокаТаблицы)
	
	ЕдиницаШтуки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"); // Штуки
	ЕдиницаМ2	 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("055"); // Квадратный метр
	ЕдиницаКоробки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("8751"); // Корбоки
	ЕдиницаПаллеты	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("005"); // Паллеты
	СоответствиеЕдиницыИзмерения = Новый Соответствие;
	
	Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание Тогда
		
		СсылкаЕдиницаИзмеренияШтуки = Справочники.ЕдиницыИзмерения.ПолучитьСсылку();
		ЕдиницаИзмеренияШтуки 	 	= Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		ЕдиницаИзмеренияШтуки.УстановитьСсылкуНового(СсылкаЕдиницаИзмеренияШтуки);
		
		СсылкаЕдиницаИзмеренияМ2 	= Справочники.ЕдиницыИзмерения.ПолучитьСсылку();
		ЕдиницаИзмеренияМ2 	 		= Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		ЕдиницаИзмеренияМ2.УстановитьСсылкуНового(СсылкаЕдиницаИзмеренияМ2);
		
		ЕдиницаИзмеренияКоробки 	= Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		ЕдиницаИзмеренияПаллеты 	= Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		
	ИначеЕсли ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
				|	ЕдиницыШтуки.Ссылка КАК Штуки,
				|	ЕдиницыКоробки.Ссылка КАК Коробки,
				|	ЕдиницыМ2.Ссылка КАК Метры,
				|	ЕдиницыПаллеты.Ссылка КАК Паллеты
				|ИЗ
				|	Справочник.ЕдиницыИзмерения КАК ЕдиницыШтуки,
				|	Справочник.ЕдиницыИзмерения КАК ЕдиницыКоробки,
				|	Справочник.ЕдиницыИзмерения КАК ЕдиницыМ2,
				|	Справочник.ЕдиницыИзмерения КАК ЕдиницыПаллеты
				|ГДЕ
				|	ЕдиницыШтуки.Владелец = &Ссылка
				|	И ЕдиницыШтуки.ЕдиницаПоКлассификатору = &ЕдиницаШтуки
				|	И ЕдиницыПаллеты.Владелец = &Ссылка
				|	И ЕдиницыПаллеты.ЕдиницаПоКлассификатору = &ЕдиницаПаллеты
				|	И ЕдиницыМ2.Владелец = &Ссылка
				|	И ЕдиницыМ2.ЕдиницаПоКлассификатору = &ЕдиницаМетры
				|	И ЕдиницыКоробки.Владелец = &Ссылка
				|	И ЕдиницыКоробки.ЕдиницаПоКлассификатору = &ЕдиницаКоробки";
		
		Запрос.УстановитьПараметр("ЕдиницаКоробки", ЕдиницаКоробки);
		Запрос.УстановитьПараметр("ЕдиницаМетры", ЕдиницаМ2);
		Запрос.УстановитьПараметр("ЕдиницаПаллеты", ЕдиницаПаллеты);
		Запрос.УстановитьПараметр("ЕдиницаШтуки", ЕдиницаШтуки);
		Запрос.УстановитьПараметр("Ссылка", НоменклатураСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЕдиницаИзмеренияШтуки 	 	= ВыборкаДетальныеЗаписи.Штуки.ПолучитьОбъект();
			СсылкаЕдиницаИзмеренияШтуки = ЕдиницаИзмеренияШтуки.Ссылка;
			
			ЕдиницаИзмеренияМ2 	 		= ВыборкаДетальныеЗаписи.Метры.ПолучитьОбъект();
			СсылкаЕдиницаИзмеренияМ2 	= ЕдиницаИзмеренияМ2.Ссылка;
			
			ЕдиницаИзмеренияКоробки 	= ВыборкаДетальныеЗаписи.Коробки.ПолучитьОбъект();
			ЕдиницаИзмеренияПаллеты 	= ВыборкаДетальныеЗаписи.Паллеты.ПолучитьОбъект();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Штуки
	ЕдиницаИзмеренияШтуки.Владелец 					= НоменклатураСсылка; 
	ЕдиницаИзмеренияШтуки.Вес 						= ?(СтрокаТаблицы.КоличествоШтукВКоробке = 0,0,СтрокаТаблицы.ВесКоробки / СтрокаТаблицы.КоличествоШтукВКоробке);
	ЕдиницаИзмеренияШтуки.Длина						= СтрокаТаблицы.ДлинаПлитка;
	ЕдиницаИзмеренияШтуки.Ширина 					= СтрокаТаблицы.ШиринаПлитка;
	ЕдиницаИзмеренияШтуки.Высота 					= СтрокаТаблицы.ВысотаПлитка;
	ЕдиницаИзмеренияШтуки.ЕдиницаПоКлассификатору 	= ЕдиницаШтуки;
	Если СтрокаТаблицы.ЕдиницаИзмерения = ЕдиницаМ2 Тогда
		ЕдиницаИзмеренияШтуки.Коэффициент 			= ?(СтрокаТаблицы.КоличествоШтукВКоробке = 0,0,СтрокаТаблицы.КоличествоМетровВКоробкеПлитка / СтрокаТаблицы.КоличествоШтукВКоробке);
	Иначе
		ЕдиницаИзмеренияШтуки.Коэффициент 			= 1;
	КонецЕсли;
	ЕдиницаИзмеренияШтуки.Наименование 				= ЕдиницаИзмеренияШтуки.ЕдиницаПоКлассификатору.Наименование;
	ЕдиницаИзмеренияШтуки.Объем 					= ?(СтрокаТаблицы.КоличествоШтукВКоробке = 0,0,(СтрокаТаблицы.ВысотаКоробки * СтрокаТаблицы.ДлинаКоробки * СтрокаТаблицы.ШиринаКоробки) / СтрокаТаблицы.КоличествоШтукВКоробке);
	ЕдиницаИзмеренияШтуки.Содержит 					= 1;
	ЕдиницаИзмеренияШтуки.СодержитЕдИзм 			= СсылкаЕдиницаИзмеренияШтуки;
	ЕдиницаИзмеренияШтуки.Записать();
	СоответствиеЕдиницыИзмерения.Вставить(ЕдиницаШтуки,ЕдиницаИзмеренияШтуки.Ссылка);
	
	// м2
	ЕдиницаИзмеренияМ2.Владелец 					= НоменклатураСсылка;
	ЕдиницаИзмеренияМ2.Вес 							= ?(СтрокаТаблицы.КоличествоМетровВКоробкеПлитка = 0,0,СтрокаТаблицы.ВесКоробки / СтрокаТаблицы.КоличествоМетровВКоробкеПлитка);
	ЕдиницаИзмеренияМ2.Высота 						= 0;
	ЕдиницаИзмеренияМ2.Длина 						= 0;
	ЕдиницаИзмеренияМ2.Ширина 						= 0;
	ЕдиницаИзмеренияМ2.ЕдиницаПоКлассификатору 		= ЕдиницаМ2;
	Если СтрокаТаблицы.ЕдиницаИзмерения = ЕдиницаШтуки Тогда
		Если СтрокаТаблицы.ДлинаПлитка = 0 ИЛИ СтрокаТаблицы.ШиринаПлитка = 0 Тогда
			ЕдиницаИзмеренияМ2.Коэффициент = 1;
		Иначе
			ЕдиницаИзмеренияМ2.Коэффициент				= 1 / СтрокаТаблицы.ДлинаПлитка / СтрокаТаблицы.ШиринаПлитка;
		КонецЕсли;
	Иначе
		ЕдиницаИзмеренияМ2.Коэффициент 				= 1;
	КонецЕсли;
	ЕдиницаИзмеренияМ2.Наименование 				= ЕдиницаИзмеренияМ2.ЕдиницаПоКлассификатору.Наименование;
	ЕдиницаИзмеренияМ2.Объем 						= ?(СтрокаТаблицы.КоличествоМетровВКоробкеПлитка = 0,0,(СтрокаТаблицы.ВысотаКоробки * СтрокаТаблицы.ДлинаКоробки * СтрокаТаблицы.ШиринаКоробки) / СтрокаТаблицы.КоличествоМетровВКоробкеПлитка);
	ЕдиницаИзмеренияМ2.Содержит 					= 1;
	ЕдиницаИзмеренияМ2.СодержитЕдИзм 				= СсылкаЕдиницаИзмеренияМ2;
	ЕдиницаИзмеренияМ2.Записать();
	СоответствиеЕдиницыИзмерения.Вставить(ЕдиницаМ2,ЕдиницаИзмеренияМ2.Ссылка);
	
	// Коробки
	ЕдиницаИзмеренияКоробки.Владелец 				= НоменклатураСсылка;
	ЕдиницаИзмеренияКоробки.Вес 					= СтрокаТаблицы.ВесКоробки;
	ЕдиницаИзмеренияКоробки.Высота 					= СтрокаТаблицы.ВысотаКоробки;
	ЕдиницаИзмеренияКоробки.Длина 					= СтрокаТаблицы.ДлинаКоробки;
	ЕдиницаИзмеренияКоробки.Ширина 					= СтрокаТаблицы.ШиринаКоробки;
	ЕдиницаИзмеренияКоробки.ЕдиницаПоКлассификатору = ЕдиницаКоробки;
	Если СтрокаТаблицы.ЕдиницаИзмерения = ЕдиницаШтуки Тогда
		ЕдиницаИзмеренияКоробки.Коэффициент 		= СтрокаТаблицы.КоличествоШтукВКоробке;
	Иначе
		ЕдиницаИзмеренияКоробки.Коэффициент 		= СтрокаТаблицы.КоличествоМетровВКоробкеПлитка;
	КонецЕсли;
	ЕдиницаИзмеренияКоробки.Наименование			= ЕдиницаИзмеренияКоробки.ЕдиницаПоКлассификатору.Наименование;
	ЕдиницаИзмеренияКоробки.Объем 					= СтрокаТаблицы.ВысотаКоробки * СтрокаТаблицы.ДлинаКоробки * СтрокаТаблицы.ШиринаКоробки;
	ЕдиницаИзмеренияКоробки.Содержит 				= СтрокаТаблицы.КоличествоШтукВКоробке;
	ЕдиницаИзмеренияКоробки.СодержитЕдИзм 			= ЕдиницаИзмеренияШтуки.Ссылка;
	ЕдиницаИзмеренияКоробки.Записать();
	СоответствиеЕдиницыИзмерения.Вставить(ЕдиницаКоробки,ЕдиницаИзмеренияКоробки.Ссылка);
	
	// Паллеты
	ЕдиницаИзмеренияПаллеты.Владелец 				= НоменклатураСсылка;
	ЕдиницаИзмеренияПаллеты.Вес 					= СтрокаТаблицы.ВесКоробки * СтрокаТаблицы.КоличествоКоробокВПаллете;
	ЕдиницаИзмеренияПаллеты.Высота 					= 1.1;
	ЕдиницаИзмеренияПаллеты.Длина 					= 1.2;
	ЕдиницаИзмеренияПаллеты.Ширина 					= 0.8;
	ЕдиницаИзмеренияПаллеты.ЕдиницаПоКлассификатору = ЕдиницаПаллеты;
	Если СтрокаТаблицы.ЕдиницаИзмерения = ЕдиницаШтуки Тогда
		ЕдиницаИзмеренияПаллеты.Коэффициент 		= СтрокаТаблицы.КоличествоШтукВКоробке * СтрокаТаблицы.КоличествоКоробокВПаллете;
	Иначе
		ЕдиницаИзмеренияПаллеты.Коэффициент 		= СтрокаТаблицы.КоличествоМетровВПаллетеПлитка;
	КонецЕсли;
	
	ЕдиницаИзмеренияПаллеты.Наименование 			= ЕдиницаИзмеренияПаллеты.ЕдиницаПоКлассификатору.Наименование;
	ЕдиницаИзмеренияПаллеты.Объем 					= СтрокаТаблицы.КоличествоКоробокВПаллете * СтрокаТаблицы.ВысотаКоробки * СтрокаТаблицы.ДлинаКоробки * СтрокаТаблицы.ШиринаКоробки;
	ЕдиницаИзмеренияПаллеты.Содержит 				= СтрокаТаблицы.КоличествоКоробокВПаллете;
	ЕдиницаИзмеренияПаллеты.СодержитЕдИзм 			= ЕдиницаИзмеренияКоробки.Ссылка;
	ЕдиницаИзмеренияПаллеты.Записать();
	СоответствиеЕдиницыИзмерения.Вставить(ЕдиницаПаллеты,ЕдиницаИзмеренияПаллеты.Ссылка);
		
	Возврат СоответствиеЕдиницыИзмерения;
	
КонецФункции

Функция СоздатьЕдиницыИзмеренияОбои(НоменклатураСсылка, СтрокаТаблицы)
	
	ЕдиницаРулоны	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("736"); // Рулоны
	ЕдиницаКоробки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("8751"); // Корбоки
	ЕдиницаПаллеты	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("005"); // Паллеты
	СоответствиеЕдиницыИзмерения = Новый Соответствие;
	
	Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание Тогда
		
		СсылкаЕдиницаИзмеренияРулоны = Справочники.ЕдиницыИзмерения.ПолучитьСсылку();
		ЕдиницаИзмеренияРулоны 	 	= Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		ЕдиницаИзмеренияРулоны.УстановитьСсылкуНового(СсылкаЕдиницаИзмеренияРулоны);
		
		ЕдиницаИзмеренияКоробки = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		ЕдиницаИзмеренияПаллеты = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		
	ИначеЕсли ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕдиницыКоробки.Ссылка КАК Коробки,
		|	ЕдиницыРулоны.Ссылка КАК Рулоны,
		|	ЕдиницыПаллеты.Ссылка КАК Паллеты
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыКоробки,
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыРулоны,
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыПаллеты
		|ГДЕ
		|	ЕдиницыПаллеты.Владелец = &Ссылка
		|	И ЕдиницыПаллеты.ЕдиницаПоКлассификатору = &ЕдиницаПаллеты
		|	И ЕдиницыРулоны.Владелец = &Ссылка
		|	И ЕдиницыРулоны.ЕдиницаПоКлассификатору = &ЕдиницаРулоны
		|	И ЕдиницыКоробки.Владелец = &Ссылка
		|	И ЕдиницыКоробки.ЕдиницаПоКлассификатору = &ЕдиницаКоробки";
		
		Запрос.УстановитьПараметр("ЕдиницаКоробки", ЕдиницаКоробки);
		Запрос.УстановитьПараметр("ЕдиницаРулоны", ЕдиницаРулоны);
		Запрос.УстановитьПараметр("ЕдиницаПаллеты", ЕдиницаПаллеты);
		Запрос.УстановитьПараметр("Ссылка", НоменклатураСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЕдиницаИзмеренияРулоны 		 = ВыборкаДетальныеЗаписи.Рулоны.ПолучитьОбъект();
			СсылкаЕдиницаИзмеренияРулоны = ЕдиницаИзмеренияРулоны.Ссылка;
			ЕдиницаИзмеренияКоробки 	 = ВыборкаДетальныеЗаписи.Коробки.ПолучитьОбъект();
			ЕдиницаИзмеренияПаллеты 	 = ВыборкаДетальныеЗаписи.Паллеты.ПолучитьОбъект();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТаблицы.НоменклатурнаяПозиция) = Тип("Строка") Тогда
		НайденныеСтроки = НоменклатурныеПозиции.НайтиСтроки(Новый Структура("УИД",СтрокаТаблицы.УИДНоменклатурнаяПозиция));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоменклатурнаяПозиция = НайденныеСтроки[0];
		Иначе
			НоменклатурнаяПозиция = Неопределено;
		КонецЕсли;
	Иначе
		НоменклатурнаяПозиция = СтрокаТаблицы.НоменклатурнаяПозиция;
	КонецЕсли;
	
	Если НоменклатурнаяПозиция = Неопределено Тогда
		Длина  = 0;
		Ширина = 0;
	Иначе
		Если ТипЗнч(НоменклатурнаяПозиция.Дизайн) = Тип("Строка") Тогда 
			НайденныеСтроки = Дизайны.НайтиСтроки(Новый Структура("УИД",НоменклатурнаяПозиция.УИДДизайн));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Длина  = НайденныеСтроки[0].ТипНоменклатуры.Длина;
				Ширина = НайденныеСтроки[0].ТипНоменклатуры.Ширина;
			Иначе
				Длина  = 0;
				Ширина = 0;
			КонецЕсли;
		Иначе
			Длина  = НоменклатурнаяПозиция.Дизайн.ТипНоменклатуры.Длина;
			Ширина = НоменклатурнаяПозиция.Дизайн.ТипНоменклатуры.Ширина;
		КонецЕсли;
	КонецЕсли;
	
	// Рулоны
	ЕдиницаИзмеренияРулоны.Владелец 					= НоменклатураСсылка;
	ЕдиницаИзмеренияРулоны.Вес 							= СтрокаТаблицы.ВесКоробки / СтрокаТаблицы.КоличествоШтукВКоробке;
	ЕдиницаИзмеренияРулоны.Высота 						= 0;
	ЕдиницаИзмеренияРулоны.Длина 						= Длина;
	ЕдиницаИзмеренияРулоны.Ширина 						= Ширина;
	ЕдиницаИзмеренияРулоны.ЕдиницаПоКлассификатору 		= ЕдиницаРулоны;
	ЕдиницаИзмеренияРулоны.Коэффициент 					= 1;
	ЕдиницаИзмеренияРулоны.Наименование 				= ЕдиницаИзмеренияРулоны.ЕдиницаПоКлассификатору.Наименование;
	ЕдиницаИзмеренияРулоны.Объем 						= (СтрокаТаблицы.ВысотаКоробки * СтрокаТаблицы.ДлинаКоробки * СтрокаТаблицы.ШиринаКоробки) / СтрокаТаблицы.КоличествоШтукВКоробке;
	ЕдиницаИзмеренияРулоны.Содержит 					= 1;
	ЕдиницаИзмеренияРулоны.СодержитЕдИзм 				= СсылкаЕдиницаИзмеренияРулоны;
	ЕдиницаИзмеренияРулоны.Штрихкод						= СтрокаТаблицы.Штрихкод;
	ЕдиницаИзмеренияРулоны.Записать();
	СоответствиеЕдиницыИзмерения.Вставить(ЕдиницаРулоны,ЕдиницаИзмеренияРулоны.Ссылка);
	
	// Коробки
	ЕдиницаИзмеренияКоробки.Владелец 				= НоменклатураСсылка;
	ЕдиницаИзмеренияКоробки.Вес 					= СтрокаТаблицы.ВесКоробки;
	ЕдиницаИзмеренияКоробки.Высота 					= СтрокаТаблицы.ВысотаКоробки;
	ЕдиницаИзмеренияКоробки.Длина 					= СтрокаТаблицы.ДлинаКоробки;
	ЕдиницаИзмеренияКоробки.Ширина 					= СтрокаТаблицы.ШиринаКоробки;
	ЕдиницаИзмеренияКоробки.ЕдиницаПоКлассификатору = ЕдиницаКоробки;
	ЕдиницаИзмеренияКоробки.Коэффициент 			= СтрокаТаблицы.КоличествоШтукВКоробке;
	ЕдиницаИзмеренияКоробки.Наименование			= ЕдиницаИзмеренияКоробки.ЕдиницаПоКлассификатору.Наименование;
	ЕдиницаИзмеренияКоробки.Объем 					= СтрокаТаблицы.ВысотаКоробки * СтрокаТаблицы.ДлинаКоробки * СтрокаТаблицы.ШиринаКоробки;
	ЕдиницаИзмеренияКоробки.Содержит 				= СтрокаТаблицы.КоличествоШтукВКоробке;
	ЕдиницаИзмеренияКоробки.СодержитЕдИзм 			= ЕдиницаИзмеренияРулоны.Ссылка;
	ЕдиницаИзмеренияКоробки.Записать();
	СоответствиеЕдиницыИзмерения.Вставить(ЕдиницаКоробки,ЕдиницаИзмеренияКоробки.Ссылка);
	
	// Паллеты
	ЕдиницаИзмеренияПаллеты.Владелец 				= НоменклатураСсылка;
	ЕдиницаИзмеренияПаллеты.Вес 					= СтрокаТаблицы.ВесКоробки * СтрокаТаблицы.КоличествоКоробокВПаллете;
	ЕдиницаИзмеренияПаллеты.Высота 					= 0;
	ЕдиницаИзмеренияПаллеты.Длина 					= 0;
	ЕдиницаИзмеренияПаллеты.Ширина 					= 0;
	ЕдиницаИзмеренияПаллеты.ЕдиницаПоКлассификатору = ЕдиницаПаллеты;
	ЕдиницаИзмеренияПаллеты.Коэффициент 			= СтрокаТаблицы.КоличествоШтукВКоробке * СтрокаТаблицы.КоличествоКоробокВПаллете;
	ЕдиницаИзмеренияПаллеты.Наименование 			= ЕдиницаИзмеренияПаллеты.ЕдиницаПоКлассификатору.Наименование;
	ЕдиницаИзмеренияПаллеты.Объем 					= СтрокаТаблицы.КоличествоКоробокВПаллете * СтрокаТаблицы.ВысотаКоробки * СтрокаТаблицы.ДлинаКоробки * СтрокаТаблицы.ШиринаКоробки;
	ЕдиницаИзмеренияПаллеты.Содержит 				= СтрокаТаблицы.КоличествоКоробокВПаллете;
	ЕдиницаИзмеренияПаллеты.СодержитЕдИзм 			= ЕдиницаИзмеренияКоробки.Ссылка;
	ЕдиницаИзмеренияПаллеты.Записать();
	СоответствиеЕдиницыИзмерения.Вставить(ЕдиницаПаллеты,ЕдиницаИзмеренияПаллеты.Ссылка);
	
	Возврат СоответствиеЕдиницыИзмерения;
	
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Проведен Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
			
		Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание Тогда
			Для Каждого Строка Из Дизайны Цикл
				Если Строка.ДизайнСсылка = Справочники.вогДизайныНоменклатуры.ПустаяСсылка() Тогда
					Строка.ДизайнСсылка = Справочники.вогДизайныНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.УИД));
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Строка Из НоменклатурныеПозиции Цикл
				Если Строка.НоменклатурнаяПозицияСсылка = Справочники.вогНоменклатурныеПозиции.ПустаяСсылка() Тогда
					Строка.НоменклатурнаяПозицияСсылка = Справочники.вогНоменклатурныеПозиции.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.УИД));
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Строка Из Номенклатура Цикл
				Если Строка.НоменклатураСсылка = Справочники.Номенклатура.ПустаяСсылка() Тогда
					Строка.НоменклатураСсылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.УИД));
				КонецЕсли;
			КонецЦикла; 
			
			Для Каждого Строка Из КоллекцииДляСайта Цикл
				Если Строка.КоллекцияСсылка = Справочники.КоллекцииДляСайта.ПустаяСсылка() Тогда
					Строка.КоллекцияСсылка = Справочники.КоллекцииДляСайта.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.УИД));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// +++ VOG Кулаков П.Л. 05.11.2020 CRM-1018
		Если НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
			Отказ = ПроверитьНаПравильноеЗаполнениеПризнакаОсновной();
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		
	КонецЕсли;

КонецПроцедуры

// +++ VOG Кулаков П.Л. 05.11.2020 CRM-1018
Функция ПроверитьНаПравильноеЗаполнениеПризнакаОсновной()
	
	ЕстьОшибки = Ложь;
	
	// проверим сначала у новых BSU
	Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание Тогда
		МассивУИДBSU = НоменклатурныеПозиции.ВыгрузитьКолонку("УИД");
		Для Каждого УИД Из МассивУИДBSU Цикл
			НайденныеСтроки = Номенклатура.НайтиСтроки(Новый Структура("УИДНоменклатурнаяПозиция",УИД));
			ЕстьОсновной = Ложь;
			Для Каждого Строка Из НайденныеСтроки Цикл
				Если Строка.Основной Тогда
					ЕстьОсновной = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЕстьОсновной Тогда
				ЕстьОшибки = Истина;
				СтрокаBSU = НоменклатурныеПозиции.Найти(УИД,"УИД");
				Если СтрокаBSU <> Неопределено Тогда
					Сообщить("По BSU: " + СтрокаBSU.Наименование + " не указано ни одной основной SKU.");
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// +++ VOG Кулаков П.Л. 01.03.2021 DEV-193
	Возврат ЕстьОшибки;
	// --- VOG Кулаков П.Л.
	
	// Проверим у уже существующих BSU
	МассивBSU = Новый Массив;
	Для Каждого Строка Из Номенклатура Цикл
		Если ТипЗнч(Строка.НоменклатурнаяПозиция) = Тип("СправочникСсылка.вогНоменклатурныеПозиции") Тогда
			МассивBSU.Добавить(Строка.НоменклатурнаяПозиция);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
		Для Каждого Строка Из НоменклатурныеПозиции Цикл
			МассивBSU.Добавить(Строка.НоменклатурнаяПозицияСсылка);
		КонецЦикла;
	КонецЕсли;
	
	// +++ VOG Кулаков П.Л. 19.02.2021 DEV-193
	МассивBSU = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивBSU);
	// --- VOG Кулаков П.Л.
	
	Для Каждого НоменклатурнаяПозиция Из МассивBSU Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	НЕ Номенклатура.ПометкаУдаления
			|	И Номенклатура.НоменклатурнаяПозиция = &НоменклатурнаяПозиция
			|	И Номенклатура.Основной
			// +++ VOG Кулаков П.Л. 01.03.2021 DEV-193
			|	И НЕ Номенклатура.Ссылка В (&СписокНоменклатурыИзДокумента)";
			// --- VOG Кулаков П.Л.
			
		// +++ VOG Кулаков П.Л. 01.03.2021 DEV-193
		Запрос.УстановитьПараметр("СписокНоменклатурыИзДокумента",Номенклатура.ВыгрузитьКолонку("НоменклатураСсылка"));
		// --- VOG Кулаков П.Л.	
			
		Запрос.УстановитьПараметр("НоменклатурнаяПозиция", НоменклатурнаяПозиция);
		ЕстьОсновнаяSKU = НЕ Запрос.Выполнить().Пустой();
		
		НайденныеСтроки = Номенклатура.НайтиСтроки(Новый Структура("НоменклатурнаяПозиция",НоменклатурнаяПозиция));
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если Строка.Основной И ЕстьОсновнаяSKU Тогда
				Сообщить("Для BSU: " + НоменклатурнаяПозиция + " указано несколько основных SKU.");
				ЕстьОшибки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции // --- VOG Кулаков П.Л.

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание Тогда
		Для Каждого Строка Из Дизайны Цикл
			Строка.ДизайнСсылка = Справочники.вогДизайныНоменклатуры.ПустаяСсылка();
		КонецЦикла;
		Для Каждого Строка Из НоменклатурныеПозиции Цикл
			Строка.НоменклатурнаяПозицияСсылка = Справочники.вогНоменклатурныеПозиции.ПустаяСсылка();
		КонецЦикла;
		Для Каждого Строка Из Номенклатура Цикл
			Строка.НоменклатураСсылка = Справочники.Номенклатура.ПустаяСсылка();
		КонецЦикла;
		Для Каждого Строка Из КоллекцииДляСайта Цикл
			Строка.НоменклатураСсылка = Справочники.Номенклатура.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьНаименованиеНоменклатуры(СтруктураДанных, НаправлениеДеятельности, ПолноеНаименование = Ложь, BSU = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
		Возврат "";
	КонецЕсли;
	
	ШаблонНаименования 	= "";
	
	Если НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
		
		ШаблонНаименования = "%Артикул% %ВидПлитки%";
		
		Если СтруктураДанных.ВидПлитки = "Плита" Тогда
			ШаблонНаименования = ШаблонНаименования + " %ТипСокр%";
		КонецЕсли;
		
		Если СтруктураДанных.Панно Тогда
			// +++ VOG Кулаков П.Л. 04.05.2021 DEV-428
			ШаблонНаименования = ШаблонНаименования + "%КоличествоЭлементов%" + " плиток";
			// --- VOG Кулаков П.Л.
		КонецЕсли;
		
		Если (СтруктураДанных.ВидПлитки = "Мозаика" И СтруктураДанных.Материал = "Керамич.") ИЛИ СтруктураДанных.ВидПлитки = "Спец.элемент"  Тогда
			ШаблонНаименования = ШаблонНаименования + " %Материал%";
		КонецЕсли;
		
		Если ПолноеНаименование Тогда
			ШаблонНаименования = ШаблонНаименования + " %Бренд%";
		КонецЕсли;
		
		ШаблонНаименования = ШаблонНаименования + " %Коллекция% %ЦветПроизводителя% %Комментарий%";
		
		Если СтруктураДанных.ВидПлитки = "Бордюр" ИЛИ СтруктураДанных.ВидПлитки = "Плинтус" Тогда
			ШаблонНаименования = ШаблонНаименования + " %Длина%*%Ширина%";
		Иначе
			ШаблонНаименования = ШаблонНаименования + " %Ширина%*%Длина%";
		КонецЕсли;
		
		Если Не BSU Тогда
			ШаблонНаименования = ШаблонНаименования + "_%Содержит%";
		КонецЕсли;
		
		Если СтруктураДанных.ВидПлитки = "Плита" 
				ИЛИ СтруктураДанных.ВидПлитки = "Керамогранит" 
				ИЛИ СтруктураДанных.ВидПлитки = "Ступень" Тогда
			ШаблонНаименования = ШаблонНаименования + "/%Сорт%";
		КонецЕсли;
		
	Иначе
		
		Если ПолноеНаименование Тогда
			
			ШаблонНаименования = "%Артикул% (%Содержит%) %НаправлениеДеятельности% %Тип% %Бренд%";
			
			Если ЗначениеЗаполнено(СтруктураДанных.Комментарий) Тогда
				ШаблонНаименования = ШаблонНаименования + " / %Комментарий%";
			КонецЕсли;
			
		Иначе
			ШаблонНаименования = "%Артикул% (%Содержит%) %Бренд%";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураДанных.Содержит) Тогда
			ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "(%Содержит%)", "");
		КонецЕсли;
		
	КонецЕсли;
	
	// +++ VOG Кулаков П.Л. 04.05.2021 DEV-245
	//Если СтруктураДанных.Комментарий = "_" Тогда
	//	ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "_", "");
	//КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	Для Каждого ЭлементСтруктуры Из СтруктураДанных Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
			ШаблонНаименования = СтрЗаменить(ШаблонНаименования, " %" + ЭлементСтруктуры.Ключ + "%_", " ");
			ШаблонНаименования = СтрЗаменить(ШаблонНаименования, " %" + ЭлементСтруктуры.Ключ + "%", "");
		КонецЕсли;
			
		ШаблонНаименования = СтрЗаменить(ШаблонНаименования, "%" + ЭлементСтруктуры.Ключ + "%", ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Возврат СокрЛП(ШаблонНаименования);
	
КонецФункции

Функция ПолучитьСтруктуруДанныхНаименования(СтрокаТаблицы, ПоBSU)
	
	СтруктураДанных = Новый Структура;

	Панно = Ложь;
	
	Если ПоBSU Тогда
		
		// ЕдиницаПродажи
		Если ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаПродажиПлитка) Тогда
			ЕдиницаПродажи = СтрокаТаблицы.ЕдиницаПродажиПлитка;
		Иначе
			ЕдиницаПродажи = Неопределено;
		КонецЕсли;
		
		// Материал
		Если ЗначениеЗаполнено(СтрокаТаблицы.МатериалПлитка) Тогда
			Материал = СтрокаТаблицы.МатериалПлитка.НаименованиеСокращенное;
		Иначе
			Материал = "";
		КонецЕсли;
		
		// Тип использования
		Если ЗначениеЗаполнено(СтрокаТаблицы.ТипИспользования) Тогда
			Тип = СтрокаТаблицы.ТипИспользования;
			ТипСокр = СтрокаТаблицы.ТипИспользования;
		Иначе
			Тип = "";
			ТипСокр = "";
		КонецЕсли;
		
		// Реквизиты из Дизайна
		Если ЗначениеЗаполнено(СтрокаТаблицы.Дизайн) Тогда 
			Если ТипЗнч(СтрокаТаблицы.Дизайн) = Тип("Строка") Тогда 
				НайденныеСтроки = Дизайны.НайтиСтроки(Новый Структура("УИД",СтрокаТаблицы.УИДДизайн));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Коллекция 				= НайденныеСтроки[0].КоллекцияПлитки;
					Бренд 					= НайденныеСтроки[0].Бренд;
					НоменклатурнаяГруппа	= НайденныеСтроки[0].НоменклатурнаяГруппа;
					Сорт 					= НайденныеСтроки[0].Сорт;
					Размер					= НайденныеСтроки[0].ФорматПлитки;
				Иначе
					Коллекция 				= "";
					Бренд 					= "";
					Тип 					= "";
					ТипСокр					= "";
					НоменклатурнаяГруппа 	= "";
					Сорт 					= "";
					Размер					= "";
				КонецЕсли;
			Иначе
				Коллекция 				= СтрокаТаблицы.Дизайн.КоллекцияПлитки;
				Бренд 					= СтрокаТаблицы.Дизайн.Бренд;
				НоменклатурнаяГруппа 	= СтрокаТаблицы.Дизайн.НоменклатурнаяГруппа;
				Сорт 					= СтрокаТаблицы.Дизайн.Сорт;
				Размер					= СтрокаТаблицы.Дизайн.ФорматПлитки;
			КонецЕсли;
		Иначе
			Коллекция 				= "";
			Бренд 					= "";
			ТипСокр					= "";
			НоменклатурнаяГруппа 	= "";
			Сорт 					= "";
			Размер					= "";
		КонецЕсли;
		
		ДанныеBSUЗаполнены = Ложь;
		СтрокиНоменклатурыПоBSU = Номенклатура.НайтиСтроки(Новый Структура("УИДНоменклатурнаяПозиция,Основной",СтрокаТаблицы.УИД, Истина));
		Если СтрокиНоменклатурыПоBSU.Количество() = 0 Тогда
			
			Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
				СтруктураДанныхSKU = ПолучитьСтруктуруДанныхДляФормированияНаименованияBSU(СтрокаТаблицы.НоменклатурнаяПозицияСсылка, Истина);
				Если СтруктураДанныхSKU <> Неопределено Тогда
					Содержит = СтруктураДанныхSKU.Содержит;
					Артикул = СтруктураДанныхSKU.Артикул;
					ДлинаПлитки  = СтруктураДанныхSKU.ДлинаПлитки*100;
					ШиринаПлитки = СтруктураДанныхSKU.ШиринаПлитки*100;
					ЦветПроизводителя = СтруктураДанныхSKU.ЦветПроизводителя;
					// +++ VOG Кулаков П.Л. 05.05.2021 DEV-428
					КоличествоЭлементов		= СтруктураДанныхSKU.КоличествоЭлементов;
					// --- VOG Кулаков П.Л.
					ДанныеBSUЗаполнены = Истина;
				Иначе
					СтрокиНоменклатурыПоBSU = Номенклатура.НайтиСтроки(Новый Структура("УИДНоменклатурнаяПозиция",СтрокаТаблицы.УИД));
					Если СтрокиНоменклатурыПоBSU.Количество() = 0 Тогда
						СтруктураДанныхSKU = ПолучитьСтруктуруДанныхДляФормированияНаименованияBSU(СтрокаТаблицы.НоменклатурнаяПозицияСсылка, Ложь);
						Если СтруктураДанныхSKU <> Неопределено Тогда
							Содержит = СтруктураДанныхSKU.Содержит;
							Артикул = СтруктураДанныхSKU.Артикул;
							ДлинаПлитки  = СтруктураДанныхSKU.ДлинаПлитки*100;
							ШиринаПлитки = СтруктураДанныхSKU.ШиринаПлитки*100;
							ЦветПроизводителя = СтруктураДанныхSKU.ЦветПроизводителя;
							// +++ VOG Кулаков П.Л. 05.05.2021 DEV-428
							КоличествоЭлементов		= СтруктураДанныхSKU.КоличествоЭлементов;
							// --- VOG Кулаков П.Л.
							ДанныеBSUЗаполнены = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокиНоменклатурыПоBSU = Номенклатура.НайтиСтроки(Новый Структура("УИДНоменклатурнаяПозиция",СтрокаТаблицы.УИД));
			КонецЕсли;
			
			Если НЕ ДанныеBSUЗаполнены Тогда
				Если СтрокиНоменклатурыПоBSU.Количество() = 0 Тогда
					Содержит = "";
					Артикул = "";
					ДлинаПлитки  = "";
					ШиринаПлитки = "";
					ЦветПроизводителя = "";
					// +++ VOG Кулаков П.Л. 05.05.2021 DEV-428
					КоличествоЭлементов = "";
					// --- VOG Кулаков П.Л.
				Иначе
					Артикул = СтрокиНоменклатурыПоBSU[0].Артикул;
					ДлинаПлитки  = Формат(СтрокиНоменклатурыПоBSU[0].ДлинаПлитка*100,"ЧГ=0");
					ШиринаПлитки = Формат(СтрокиНоменклатурыПоBSU[0].ШиринаПлитка*100,"ЧГ=0");
					ЦветПроизводителя = СтрокиНоменклатурыПоBSU[0].ЦветПроизводителя;
					Если ЕдиницаПродажи = Справочники.вогВидыПлитки.Основная 
						ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Дополнительная
						ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Декорированная
						ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Ступень Тогда
						Содержит = Формат(СтрокиНоменклатурыПоBSU[0].КоличествоМетровВПаллетеПлитка,"ЧГ=0");
					Иначе
						Содержит = Формат(СтрокиНоменклатурыПоBSU[0].КоличествоШтукВКоробке,"ЧГ=0");
					КонецЕсли;
					// +++ VOG Кулаков П.Л. 05.05.2021 DEV-428
					КоличествоЭлементов		= СтрокиНоменклатурыПоBSU[0].КоличествоСостаныхЭлементов;
					// --- VOG Кулаков П.Л.
				КонецЕсли;
			КонецЕсли;
		Иначе
			Артикул = СтрокиНоменклатурыПоBSU[0].Артикул;
			ДлинаПлитки  = Формат(СтрокиНоменклатурыПоBSU[0].ДлинаПлитка*100,"ЧГ=0");
			ШиринаПлитки = Формат(СтрокиНоменклатурыПоBSU[0].ШиринаПлитка*100,"ЧГ=0");
			ЦветПроизводителя = СтрокиНоменклатурыПоBSU[0].ЦветПроизводителя;
			Если ЕдиницаПродажи = Справочники.вогВидыПлитки.Основная 
				ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Дополнительная
				ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Декорированная
				ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Ступень Тогда
				Содержит = Формат(СтрокиНоменклатурыПоBSU[0].КоличествоМетровВПаллетеПлитка,"ЧГ=0");
			Иначе
				Содержит = Формат(СтрокиНоменклатурыПоBSU[0].КоличествоШтукВКоробке,"ЧГ=0");
			КонецЕсли;
			// +++ VOG Кулаков П.Л. 05.05.2021 DEV-428
			КоличествоЭлементов		= СтрокиНоменклатурыПоBSU[0].КоличествоСостаныхЭлементов;
			// --- VOG Кулаков П.Л.
		КонецЕсли;
		
	Иначе
		// Артикул
		Артикул = СтрокаТаблицы.Артикул;
		
		// Длина и Ширина
		СтруктураДанных = ПолучитьСтруктуруДанныхДляФормированияНаименованияSKU(СтрокаТаблицы.Ссылка);
		Если СтруктураДанных = Неопределено Тогда
			ДлинаПлитки = 0;
			ШиринаПлитки = 0;
		Иначе 
			ДлинаПлитки  = Формат(СтруктураДанных.ДлинаПлитка*100,"ЧГ=0");
			ШиринаПлитки = Формат(СтруктураДанных.ШиринаПлитка*100,"ЧГ=0");
		КонецЕсли;
		
		// Цвет производителя
		ЦветПроизводителя = СтрокаТаблицы.ЦветПроизводителя;
		
		// Количество элементов
		КоличествоЭлементов = Формат(СтрокаТаблицы.КоличествоСоставныхЭлементов,"ЧГ=0");
		
		// Реквизиты из Дизайна
		Если ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяПозиция) Тогда
			Если ТипЗнч(СтрокаТаблицы.НоменклатурнаяПозиция) = Тип("Строка") Тогда
				НайденныеСтроки = НоменклатурныеПозиции.НайтиСтроки(Новый Структура("УИД",СтрокаТаблицы.УИДНоменклатурнаяПозиция));
				Если НайденныеСтроки.Количество() > 0 Тогда
					НоменклатурнаяПозиция = НайденныеСтроки[0];
				Иначе
					НоменклатурнаяПозиция = Неопределено;
				КонецЕсли;
			Иначе
				НоменклатурнаяПозиция = СтрокаТаблицы.НоменклатурнаяПозиция;
			КонецЕсли;
		Иначе
			НоменклатурнаяПозиция = Неопределено;
		КонецЕсли;
		
		Если НоменклатурнаяПозиция = Неопределено Тогда
			Коллекция 				= "";
			Бренд 					= "";
			Тип 					= "";
			ТипСокр					= "";
			НоменклатурнаяГруппа 	= "";
			Сорт 					= "";
			Размер					= "";
		Иначе
			Если ЗначениеЗаполнено(НоменклатурнаяПозиция.МатериалПлитка) Тогда
				Материал = НоменклатурнаяПозиция.МатериалПлитка.НаименованиеСокращенное;
			Иначе
				Материал = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоменклатурнаяПозиция.ЕдиницаПродажиПлитка) Тогда
				ЕдиницаПродажи = НоменклатурнаяПозиция.ЕдиницаПродажиПлитка;
			Иначе
				ЕдиницаПродажи = Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоменклатурнаяПозиция.ТипИспользования) Тогда
				Тип = НоменклатурнаяПозиция.ТипИспользования;
				ТипСокр = НоменклатурнаяПозиция.ТипИспользования;
			Иначе
				Тип = "";
				ТипСокр = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоменклатурнаяПозиция.Дизайн) Тогда
				Если ТипЗнч(НоменклатурнаяПозиция.Дизайн) = Тип("Строка") Тогда 
					НайденныеСтроки = Дизайны.НайтиСтроки(Новый Структура("УИД",НоменклатурнаяПозиция.УИДДизайн));
					Если НайденныеСтроки.Количество() > 0 Тогда
						Коллекция 				= НайденныеСтроки[0].КоллекцияПлитки;
						Бренд 					= НайденныеСтроки[0].Бренд;
						НоменклатурнаяГруппа	= НайденныеСтроки[0].НоменклатурнаяГруппа;
						Сорт 					= НайденныеСтроки[0].Сорт;
						Размер					= НайденныеСтроки[0].ФорматПлитки;
					Иначе
						Коллекция 				= "";
						Бренд 					= "";
						НоменклатурнаяГруппа 	= "";
						Сорт 					= "";
						Размер					= "";
					КонецЕсли;
				Иначе
					Коллекция 				= НоменклатурнаяПозиция.Дизайн.КоллекцияПлитки;
					Бренд 					= НоменклатурнаяПозиция.Дизайн.Бренд;
					НоменклатурнаяГруппа 	= НоменклатурнаяПозиция.Дизайн.НоменклатурнаяГруппа;
					Сорт 					= НоменклатурнаяПозиция.Дизайн.Сорт;
					Размер					= НоменклатурнаяПозиция.Дизайн.ФорматПлитки;
				КонецЕсли;
			Иначе
				Коллекция 				= "";
				Бренд 					= "";
				НоменклатурнаяГруппа 	= "";
				Сорт 					= "";
				Размер					= "";
			КонецЕсли;
		КонецЕсли;
		
		Если ЕдиницаПродажи = Справочники.вогВидыПлитки.Основная 
			ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Дополнительная
			ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Декорированная
			ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Ступень Тогда
			Содержит = СтруктураДанных.КоличествоМетровВПаллетеПлитка;
		Иначе
			Содержит = СтруктураДанных.КоличествоШтукВКоробке;
		КонецЕсли;
		
	КонецЕсли;
	
	// ВидПлитки
	Если ЕдиницаПродажи = Справочники.вогВидыПлитки.Основная 
			ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Дополнительная
			ИЛИ ЕдиницаПродажи = Справочники.вогВидыПлитки.Декорированная Тогда
		Если Материал = "Керамогранит" Тогда
			ВидПлитки = "Керамогранит";
		Иначе
			ВидПлитки = "Плита";
		КонецЕсли;
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Ступень Тогда
		ВидПлитки = "Ступень";
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Штучный Тогда
		ВидПлитки = "Декор";
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Панно Тогда
		ВидПлитки = "Панно из ";
		Панно = Истина;
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Рамка Тогда
		ВидПлитки = "Декор рамка";
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Вставка Тогда
		ВидПлитки = "Декор вставка";
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Бордюр Тогда
		ВидПлитки = "Бордюр";
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Мозаика Тогда
		ВидПлитки = "Мозаика";
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.Плинтус Тогда
		ВидПлитки = "Плинтус";	
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.СпецЭлемент Тогда
		ВидПлитки = "Спец.элемент";
	ИначеЕсли ЕдиницаПродажи = Справочники.вогВидыПлитки.СтупеньДек Тогда
		ВидПлитки = "Ступень декор.";
	Иначе
		ВидПлитки = "";
	КонецЕсли;
	
	СтруктураДанных.Вставить("Артикул"					,Артикул);
	СтруктураДанных.Вставить("Материал"					,Материал);
	СтруктураДанных.Вставить("Коллекция"				,Коллекция);
	СтруктураДанных.Вставить("Бренд"					,Бренд);
	СтруктураДанных.Вставить("Тип"						,Тип);
	СтруктураДанных.Вставить("ТипСокр"					,ТипСокр);
	СтруктураДанных.Вставить("НаправлениеДеятельности"	,НаправлениеДеятельности);
	СтруктураДанных.Вставить("НоменклатурнаяГруппа"		,НоменклатурнаяГруппа);
	СтруктураДанных.Вставить("Комментарий"				,СтрокаТаблицы.Комментарий);
	СтруктураДанных.Вставить("Сорт"						,Сорт);
	СтруктураДанных.Вставить("Содержит"					,Содержит);
	СтруктураДанных.Вставить("Размер"					,Размер);
	СтруктураДанных.Вставить("Длина"					,ДлинаПлитки);
	СтруктураДанных.Вставить("Ширина"					,ШиринаПлитки);
	СтруктураДанных.Вставить("ВидПлитки"				,ВидПлитки);
	СтруктураДанных.Вставить("КоличествоЭлементов"		,КоличествоЭлементов);
	СтруктураДанных.Вставить("Панно"					,Панно);
	СтруктураДанных.Вставить("ЦветПроизводителя"		,ЦветПроизводителя);
	                                                
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхДляФормированияНаименованияBSU(НоменклатурнаяПозиция, Основная)
	
	ЕдиницаШтуки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"); // Штуки
	ЕдиницаКоробки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("8751"); // Корбоки
	ЕдиницаПаллеты	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("005"); // Паллеты
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Артикул КАК Артикул,
		|	Номенклатура.ЦветПроизводителя КАК ЦветПроизводителя,
		|	ЕСТЬNULL(ЕдиницыИзмеренияШтуки.Длина, 0) КАК ДлинаПлитки,
		|	ЕСТЬNULL(ЕдиницыИзмеренияШтуки.Ширина, 0) КАК ШиринаПлитки,
		|	ВЫБОР
		|		КОГДА Номенклатура.НоменклатурнаяПозиция.ЕдиницаПродажиПлитка В (&ЕдиницыПродажи)
		|			ТОГДА ЕдиницыИзмеренияПаллеты.Содержит
		|		ИНАЧЕ ЕдиницыИзмеренияКоробки.Содержит
		|	КОНЕЦ КАК Содержит,
		// +++ VOG Кулаков П.Л. 05.05.2021 DEV-428
		|	Номенклатура.КоличествоСоставныхЭлементов КАК КоличествоЭлементов
		// --- VOG Кулаков П.Л.
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмеренияШтуки
		|		ПО Номенклатура.Ссылка = ЕдиницыИзмеренияШтуки.Владелец
		|			И (ЕдиницыИзмеренияШтуки.ЕдиницаПоКлассификатору = &ЕдиницаШтуки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмеренияКоробки
		|		ПО Номенклатура.Ссылка = ЕдиницыИзмеренияКоробки.Владелец
		|			И (ЕдиницыИзмеренияКоробки.ЕдиницаПоКлассификатору = &ЕдиницаКоробки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмеренияПаллеты
		|		ПО Номенклатура.Ссылка = ЕдиницыИзмеренияПаллеты.Владелец
		|			И (ЕдиницыИзмеренияПаллеты.ЕдиницаПоКлассификатору = &ЕдиницаПаллеты)
		|ГДЕ
		|	Номенклатура.Основной = &Основная
		|	И Номенклатура.НоменклатурнаяПозиция = &НоменклатурнаяПозиция";
	
	Запрос.УстановитьПараметр("ЕдиницаКоробки", ЕдиницаКоробки);
	Запрос.УстановитьПараметр("ЕдиницаПаллеты", ЕдиницаПаллеты);
	Запрос.УстановитьПараметр("ЕдиницаШтуки", ЕдиницаШтуки);
	Запрос.УстановитьПараметр("Основная", Основная);
	Запрос.УстановитьПараметр("НоменклатурнаяПозиция", НоменклатурнаяПозиция);
	
	ЕдиницыПродажи = Новый Массив;
	ЕдиницыПродажи.Добавить(Справочники.вогВидыПлитки.Основная);
	ЕдиницыПродажи.Добавить(Справочники.вогВидыПлитки.Дополнительная);
	ЕдиницыПродажи.Добавить(Справочники.вогВидыПлитки.Декорированная);
	ЕдиницыПродажи.Добавить(Справочники.вогВидыПлитки.Ступень);
	
	Запрос.УстановитьПараметр("ЕдиницыПродажи", ЕдиницыПродажи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	// +++ VOG Кулаков П.Л. 05.05.2021 DEV-428
	СтруктураВозврата = Новый Структура("Артикул, ЦветПроизводителя, ДлинаПлитки, ШиринаПлитки, Содержит, КоличествоЭлементов", "", "", "", "", "", "");
	// --- VOG Кулаков П.Л.
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата,ВыборкаДетальныеЗаписи);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхДляФормированияНаименованияSKU(Номенклатура)
	
	ЕдиницаШтуки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"); // Штуки
	ЕдиницаКоробки 	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("8751"); // Корбоки
	ЕдиницаПаллеты	= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("005"); // Паллеты
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЕСТЬNULL(ЕдиницыИзмеренияШтуки.Длина, 0) КАК ДлинаПлитка,
		|	ЕСТЬNULL(ЕдиницыИзмеренияШтуки.Ширина, 0) КАК ШиринаПлитка,
		|	ЕСТЬNULL(ЕдиницыИзмеренияКоробки.Содержит, 0) КАК КоличествоШтукВКоробке,
		// +++ VOG Кулаков П.Л. 04.05.2021 DEV-245
		//|	ЕСТЬNULL(ЕдиницыИзмеренияПаллеты.Содержит, 0) КАК КоличествоМетровВПаллетеПлитка
		|	ЕСТЬNULL(ЕдиницыИзмеренияПаллеты.Коэффициент, 0) КАК КоличествоМетровВПаллетеПлитка
		// --- VOG Кулаков П.Л.
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмеренияШтуки
		|		ПО Номенклатура.Ссылка = ЕдиницыИзмеренияШтуки.Владелец
		|			И (ЕдиницыИзмеренияШтуки.ЕдиницаПоКлассификатору = &ЕдиницаШтуки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмеренияКоробки
		|		ПО Номенклатура.Ссылка = ЕдиницыИзмеренияКоробки.Владелец
		|			И (ЕдиницыИзмеренияКоробки.ЕдиницаПоКлассификатору = &ЕдиницаКоробки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмеренияПаллеты
		|		ПО Номенклатура.Ссылка = ЕдиницыИзмеренияПаллеты.Владелец
		|			И (ЕдиницыИзмеренияПаллеты.ЕдиницаПоКлассификатору = &ЕдиницаПаллеты)
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ЕдиницаШтуки", ЕдиницаШтуки);
	Запрос.УстановитьПараметр("ЕдиницаКоробки", ЕдиницаКоробки);
	Запрос.УстановитьПараметр("ЕдиницаПаллеты", ЕдиницаПаллеты);
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтруктураВозврата = Новый Структура("ДлинаПлитка, ШиринаПлитка, КоличествоШтукВКоробке, КоличествоМетровВПаллетеПлитка", "", "", "", "");
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата,ВыборкаДетальныеЗаписи);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Возврат СтруктураВозврата;
	
КонецФункции