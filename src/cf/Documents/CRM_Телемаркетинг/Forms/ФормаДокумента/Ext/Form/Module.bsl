////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
// Функция возвращает текущего пользователя.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Текущий пользователь.
//
Функция ТекущийПользователь()
	Возврат Пользователи.ТекущийПользователь();
КонецФункции // ТекущийПользователь()

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	Форма.Элементы.ГруппаПериодВремя.Видимость = (Не Форма.Объект.НаВесьДень);
	Если Форма.ТолькоПросмотр Тогда
		Форма.Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность	= Ложь;
		Форма.Элементы.ДатаНачало.Доступность										= Ложь;
		Форма.Элементы.ДатаОкончания.Доступность									= Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УдалитьДублиСтрок()
	CRM_ОбщегоНазначенияКлиентСервер.ПроверкаНаДублиВТЧ(Объект.Участники);						
КонецПроцедуры	

// Процедура формирует заголовок формы.
//
// Параметры:
//	Нет
//
&НаСервере
Процедура ОбновитьЗаголовокФормы()
	Тема = Объект.Тема;
	Заголовок = Нстр("ru = 'Телемаркетинг '") + ?(ЗначениеЗаполнено(Тема), ": " + Тема, "") + Нстр("ru = ' от '") + Формат(Объект.Дата, "ДЛФ = ДД");
КонецПроцедуры

// Процедура вычисляет общее количество участников
//
// Параметры:
//	Нет
//
&НаСервере
Процедура ВычислитьОбщееЧислоУчастников()
	КоличествоУчастников = Объект.Участники.Количество();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ СЕРВЕР

// Преобразовать строку полей в структуру.
//
&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВСтруктуруПолей(СтрокаПолей)
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(СтрокаПолей) Тогда
		Результат = CRM_ОбщегоНазначенияСервер.КонтактнаяИнформацияВСтаруюСтруктуру(СтрокаПолей).ЗначенияПолей;
	Иначе
		Результат = Новый СписокЗначений;
		ПоследнийЭлемент = Неопределено;
		
		Для Сч = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
			Стр = СтрПолучитьСтроку(СтрокаПолей, Сч);
			Если Лев(Стр, 1) = Символы.Таб Тогда
				Если ПоследнийЭлемент <> Неопределено Тогда
					ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(Стр, 2);
				КонецЕсли;
			Иначе
				Поз = Найти(Стр, "=");
				Если Поз <> 0 Тогда
					ПоследнийЭлемент = Результат.Добавить(Сред(Стр, Поз+1), Лев(Стр, Поз-1));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	Для Каждого ЭлементСписка Из Результат Цикл
		СтруктураВозврата.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТЧПоСегменту()
	
	Запрос = Новый Запрос;
	Если Сегмент.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьДинамически ИЛИ Сегмент.СпособФормирования = Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять Тогда
		// Для периодически обновляемых сегментов всеравно получаем клиентов вручную - как и по динамическим - чтобы не
		// возникало вопросов о том, что сегмент в настоящий момент может быть не актуален.
		РеквизитыСКДСегмента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Сегмент,
			"СхемаКомпоновкиДанных,ХранилищеНастроекКомпоновкиДанных,ИмяШаблонаСКД");
			
		НастройкиСегмента = РеквизитыСКДСегмента.ХранилищеНастроекКомпоновкиДанных.Получить();
		Если ПустаяСтрока(РеквизитыСКДСегмента.ИмяШаблонаСКД) Тогда
			СКД = РеквизитыСКДСегмента.СхемаКомпоновкиДанных.Получить();
		Иначе
			СКД_Макета = СегментыСервер.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(Сегмент, РеквизитыСКДСегмента.ИмяШаблонаСКД);
			СКД = СКД_Макета.СхемаКомпоновкиДанных;
		КонецЕсли;
		
		Если СКД.НаборыДанных.Найти("СписокСегмента") <> Неопределено Тогда
			Поля = СКД.НаборыДанных.СписокСегмента.Поля;
			Для Каждого Поле Из Поля Цикл
				Поле.ОграничениеИспользования.Поле = Ложь;
			КонецЦикла;// Подключить поля запроса списка.
			
			НастройкиСписка = СКД.ВариантыНастроек.Список.Настройки;
			Настройки = СКД.НастройкиПоУмолчанию;
			CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.ПараметрыДанных, Настройки.ПараметрыДанных);
			CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.Отбор, Настройки.Отбор);
		ИначеЕсли  СКД.НаборыДанных.Найти("ФормированиеСегмента") <> Неопределено Тогда
			Если НастройкиСегмента <> Неопределено Тогда
				НастройкиСписка = НастройкиСегмента;
			Иначе
				НастройкиСписка = СКД.ВариантыНастроек.ФормированиеСегмента.Настройки;
			КонецЕсли;
		Иначе
			НастройкиСписка = Неопределено;
		КонецЕсли;
		Если НастройкиСписка = Неопределено Тогда
			МассивПартнеров = Новый Массив();
		Иначе
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(
				СКД,НастройкиСписка,,,
				Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
			);
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ТаблицаЗначений = Новый ТаблицаЗначений;
			ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			МассивПартнеров = ТаблицаЗначений.ВыгрузитьКолонку("Партнер");
		КонецЕсли;
		
		Если ТолькоОсновныеКонтактныеЛица Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	Партнеры.Ссылка КАК Партнер,
               |	Партнеры.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
               |ИЗ
               |	Справочник.Партнеры КАК Партнеры
               |ГДЕ
               |	НЕ Партнеры.ПометкаУдаления
			   |	И Партнеры.Ссылка В (&МассивПартнеров)";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	Партнеры.Ссылка КАК Партнер,
               |	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК КонтактноеЛицо
               |ИЗ
               |	Справочник.Партнеры КАК Партнеры
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
               |		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
               |			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
               |ГДЕ
               |	НЕ Партнеры.ПометкаУдаления
			   |	И Партнеры.Ссылка В (&МассивПартнеров)";
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивПартнеров", МассивПартнеров);
	Иначе	
		Запрос.УстановитьПараметр("Сегмент", Сегмент);
		Если ТолькоОсновныеКонтактныеЛица Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	ПартнерыСегмента.Партнер КАК Партнер,
               |	ПартнерыСегмента.Сегмент,
               |	ПартнерыСегмента.Партнер.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
               |ИЗ
               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
               |ГДЕ
               |	ПартнерыСегмента.Сегмент = &Сегмент
               |	И НЕ ПартнерыСегмента.Партнер.ПометкаУдаления";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	ПартнерыСегмента.Партнер КАК Партнер,
               |	ПартнерыСегмента.Сегмент,
               |	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК КонтактноеЛицо
               |ИЗ
               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
               |		ПО ПартнерыСегмента.Партнер = КонтактныеЛицаПартнеров.Владелец
               |			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
               |ГДЕ
               |	ПартнерыСегмента.Сегмент = &Сегмент
               |	И НЕ ПартнерыСегмента.Партнер.ПометкаУдаления";
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	ТабПартнеров = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаб Из ТабПартнеров Цикл
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо", СтрокаТаб.Партнер, СтрокаТаб.КонтактноеЛицо),
			?(ЗначениеЗаполнено(ВидКонтактнойИнформации), ВидКонтактнойИнформации, Неопределено));
		Если СписокТелефонов.Количество() > 0 Тогда
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер			= СтрокаТаб.Партнер;
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				НоваяСтрока.КонтактноеЛицо	= СтрокаТаб.КонтактноеЛицо;
			КонецЕсли;
			НоваяСтрока.Телефон = СписокТелефонов[0].Значение.Представление;
		ИначеЕсли НЕ НеЗаполнятьСПустымиТелефонами Тогда
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер = СтрокаТаб.Партнер;
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				НоваяСтрока.КонтактноеЛицо	= СтрокаТаб.КонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// заполним анкеты
	ЗаполнитьАнкетыУчастников();
	
	ВычислитьОбщееЧислоУчастников();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТЧПоРезультатуОтчета(СписокСсылок)
	
	Для Каждого ЭлементСписка Из СписокСсылок Цикл
		Если НЕ ЭлементСписка.Пометка Тогда Продолжить; КонецЕсли;
		
		Если ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
			ТекПартнер	= ЭлементСписка.Значение;
			ТекКл		= ТекПартнер.CRM_ОсновноеКонтактноеЛицо;
		ИначеЕсли ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ТекПартнер	= ЭлементСписка.Значение;
			ТекКл		= Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		Иначе
			ТекКл		= ЭлементСписка.Значение;
			ТекПартнер	= ТекКл.Владелец;
		КонецЕсли;
		
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",ТекПартнер,ТекКл),
													?(ЗначениеЗаполнено(ВидКонтактнойИнформации),ВидКонтактнойИнформации,Неопределено), ТипЗнч(ТекПартнер) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"));
		Если СписокТелефонов.Количество() > 0 Тогда
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер			= ТекПартнер;
			НоваяСтрока.КонтактноеЛицо	= ТекКл;
			НоваяСтрока.Телефон			= СписокТелефонов[0].Значение.Представление;
		ИначеЕсли НЕ НеЗаполнятьСПустымиТелефонами Тогда
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер			= ТекПартнер;
			НоваяСтрока.КонтактноеЛицо	= ТекКл;
		КонецЕсли;
	КонецЦикла;
	// заполним анкеты
	ЗаполнитьАнкетыУчастников();
	ВычислитьОбщееЧислоУчастников();
	
КонецПроцедуры

&НаСервере
Функция СформироватьСписокТелефонов(ТекущиеДанные, ВидКИ = Неопределено, ПотенциальныеКлиенты = Ложь)
	
	Если НЕ ПотенциальныеКлиенты Тогда
		Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(ТекущиеДанные.Партнер,
										?(ЗначениеЗаполнено(ТекущиеДанные.КонтактноеЛицо),ТекущиеДанные.КонтактноеЛицо,Неопределено),
										Перечисления.ТипыКонтактнойИнформации.Телефон, ВидКИ);
	Иначе
		Таб = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПоТипуКИ(ТекущиеДанные.Партнер, Перечисления.ТипыКонтактнойИнформации.Телефон);									
	КонецЕсли;									
	
	СписокТелефонов = Новый СписокЗначений;
	
	Если НЕ Таб = Неопределено Тогда
		СписокЗнач = Новый СписокЗначений;
		
		ТекСсылка = "";
		Для Каждого СтрокаТаб Из Таб Цикл
			
			Если НЕ ТекСсылка = СтрокаТаб.Ссылка Тогда
				СтруктураНомера = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.ЗначенияПолей);
				СтруктураНомера.Вставить("Представление"	, СтрокаТаб.Представление);
				СтруктураНомера.Вставить("Объект"			, СтрокаТаб.Ссылка);
				СписокТелефонов.Добавить(СтруктураНомера, Строка(СтрокаТаб.Ссылка));
				ТекСсылка = СтрокаТаб.Ссылка;
			КонецЕсли;
			
			СтруктураНомера = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.ЗначенияПолей);
			СтруктураНомера.Вставить("Представление"	, СтрокаТаб.Представление);
			СтруктураНомера.Вставить("Объект"			, СтрокаТаб.Ссылка);
			СписокТелефонов.Добавить(СтруктураНомера, "   "+СокрЛП(СтрокаТаб.Вид) + ": " + СтрокаТаб.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокТелефонов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьКЛПартнера(ТекПартнер)
	
	Возврат ТекПартнер.CRM_ОсновноеКонтактноеЛицо;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыСервер()
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ДатаНачала);
	ДатаНачало	= ДатаВремя.Дата;
	ВремяНачало	= ДатаВремя.Время;
	
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ДатаОкончания);
	ДатаОкончание	= ДатаВремя.Дата;
	ВремяОкончание	= ДатаВремя.Время;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуГиперссылок()
	
	ТекстКоманда = Команды.Найти("_ВыполнитьЗадачу");
	Если ТекстКоманда = Неопределено Тогда
		НоваяКомандаФормы = Команды.Добавить("_ВыполнитьЗадачу");
		НоваяКомандаФормы.Заголовок					= "Выполнить";
		НоваяКомандаФормы.Подсказка					= "Отметить задачу как выполненную";
		НоваяКомандаФормы.Действие					= "Подключаемый_ВыполнитьЗадачу";
		//НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
	КонецЕсли;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	
	Попытка
		ЭтотОбъект["_ЛичнаяЗадача"] = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
		ЭтотОбъект["_ЛичнаяЗадачаСтрокой"] = "";
	Исключение
		ОписаниеТиповЗадача = Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя");
		НовыйРеквизит = Новый РеквизитФормы("_ЛичнаяЗадача", ОписаниеТиповЗадача);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповЗадача = Новый ОписаниеТипов("Строка");
		НовыйРеквизит = Новый РеквизитФормы("_ЛичнаяЗадачаСтрокой", ОписаниеТиповЗадача);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	КонецПопытки;
	
	Попытка
		ЭтотОбъект["_БизнесПроцесс"] = БизнесПроцессы.CRM_БизнесПроцесс.ПустаяСсылка();
		ЭтотОбъект["_БизнесПроцессСтрокой"] = "";
	Исключение
		ОписаниеТиповЗадача = Новый ОписаниеТипов("БизнесПроцессСсылка.CRM_БизнесПроцесс");
		НовыйРеквизит = Новый РеквизитФормы("_БизнесПроцесс", ОписаниеТиповЗадача);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповЗадача = Новый ОписаниеТипов("Строка");
		НовыйРеквизит = Новый РеквизитФормы("_БизнесПроцессСтрокой", ОписаниеТиповЗадача);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	КонецПопытки;
	
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	0 КАК ВидСсылки
	|ПОМЕСТИТЬ ЛичныеЗадачи
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	(НЕ ЗадачаИсполнителя.ПометкаУдаления)
	|	И ЗадачаИсполнителя.CRM_Личная
	|	И (НЕ ЗадачаИсполнителя.Выполнена)
	|	И ЗадачаИсполнителя.Предмет = &Предмет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	Если ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(Объект.Проект.CRM_КартаМаршрута) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_БизнесПроцесс.Ссылка КАК Ссылка,
		|	1 КАК ВидСсылки
		|ПОМЕСТИТЬ БизнесПроцессы
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|ГДЕ
		|	(НЕ CRM_БизнесПроцесс.ПометкаУдаления)
		|	И CRM_БизнесПроцесс.КартаМаршрута = &КартаМаршрута
		|	И CRM_БизнесПроцесс.Предмет = &Предмет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ЛичныеЗадачи.Ссылка,
	|	ЛичныеЗадачи.ВидСсылки
	|ИЗ
	|	ЛичныеЗадачи КАК ЛичныеЗадачи";
	Если ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(Объект.Проект.CRM_КартаМаршрута) Тогда
	ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БизнесПроцессы.Ссылка,
		|	БизнесПроцессы.ВидСсылки
		|ИЗ
		|	БизнесПроцессы КАК БизнесПроцессы";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предмет",Объект.Ссылка);
	Если ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(Объект.Проект.CRM_КартаМаршрута) Тогда
		Запрос.УстановитьПараметр("КартаМаршрута", Объект.Проект.CRM_КартаМаршрута);
	КонецЕсли;
	
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаб Из ТаблицаОбъектов Цикл
		Если СтрокаТаб.ВидСсылки = 0 Тогда
			ЭтотОбъект._ЛичнаяЗадача			= СтрокаТаб.Ссылка;
			ЭтотОбъект._ЛичнаяЗадачаСтрокой	= Строка(СтрокаТаб.Ссылка);
		КонецЕсли;
		
		Если СтрокаТаб.ВидСсылки = 1 Тогда
			ЭтотОбъект._БизнесПроцесс			= СтрокаТаб.Ссылка;
			ЭтотОбъект._БизнесПроцессСтрокой	= CRM_БизнесПроцессыСервер.СформироватьПредставлениеБизнесПроцесса(СтрокаТаб.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// Отрисуем гиперссылки
	// Гирепссылка на бизнес-процесс.
	Если НЕ Элементы.Найти("_БизнесПроцессСтрокой") = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект._БизнесПроцесс) Тогда
			Элементы.Удалить(Элементы["_БизнесПроцессЗаголовок"]);
			Элементы.Удалить(Элементы["_БизнесПроцессСтрокой"]);
		Иначе
			Элементы["_БизнесПроцессСтрокой"].Заголовок	= СокрЛП(ЭтотОбъект._БизнесПроцессСтрокой);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ЭтотОбъект._БизнесПроцесс) Тогда
			
			НовыйЭлемент = Элементы.Добавить("_БизнесПроцессЗаголовок", Тип("ДекорацияФормы"), Элементы.ГиперссылкаЗаголовок);
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Заголовок	= "Бизнес-процесс: ";
			
			НовыйЭлемент = Элементы.Добавить("_БизнесПроцессСтрокой", Тип("ДекорацияФормы"), Элементы.ГиперссылкаЗначение);
			НовыйЭлемент.Заголовок	= СокрЛП(ЭтотОбъект._БизнесПроцессСтрокой);
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Гиперссылка= Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ГиперссылкаНажатие");
			
		КонецЕсли;
	КонецЕсли;
	
	// Гирепссылка на Задачу
	Если НЕ Элементы.Найти("_ЛичнаяЗадачаСтрокой") = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект._ЛичнаяЗадача) Тогда
			Элементы.Удалить(Элементы["_ЛичнаяЗадачаЗаголовок"]);
			Элементы.Удалить(Элементы["_ЛичнаяЗадачаСтрокой"]);
			Элементы.Удалить(Элементы["Кнопка_ВыполнитьЗадачу"]);
		КонецЕсли;
	Иначе
		
		Если ЗначениеЗаполнено(ЭтотОбъект._ЛичнаяЗадача) Тогда
			
			ЭлементПеред = Элементы.Найти("_БизнесПроцессЗаголовок");
			Если НЕ ЭлементПеред = Неопределено Тогда
				НовыйЭлемент = Элементы.Вставить("_ЛичнаяЗадачаЗаголовок", Тип("ДекорацияФормы"), Элементы.ГиперссылкаЗаголовок, ЭлементПеред);
			Иначе
				НовыйЭлемент = Элементы.Добавить("_ЛичнаяЗадачаЗаголовок", Тип("ДекорацияФормы"), Элементы.ГиперссылкаЗаголовок);
			КонецЕсли;
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Заголовок	= "Задача: ";
			
			НовыйЭлемент = Элементы.Добавить("_ЛичнаяЗадачаСтрокой", Тип("ДекорацияФормы"), Элементы.ЗначениеГиперСсылкиЗадача);
			НовыйЭлемент.Заголовок	= СокрЛП(ЭтотОбъект._ЛичнаяЗадача);
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Гиперссылка= Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ГиперссылкаНажатие");
			
			НовыйЭлемент = Элементы.Добавить("Кнопка_ВыполнитьЗадачу",Тип("КнопкаФормы"), Элементы.ЗначениеГиперСсылкиЗадача);
			НовыйЭлемент.ИмяКоманды			= "_ВыполнитьЗадачу";
			НовыйЭлемент.Заголовок			= "Выполнить";
			НовыйЭлемент.Картинка			= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйЭлемент.Отображение		= ОтображениеКнопки.КартинкаИТекст;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьДубликатБизнесПроцесса(Предмет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|ГДЕ
	|	НЕ CRM_БизнесПроцесс.ПометкаУдаления
	|	И НЕ CRM_БизнесПроцесс.Завершен
	|	И CRM_БизнесПроцесс.Предмет = &Предмет");
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ДобавитьУдалитьКомандуСозданияБизнесПроцесса()
	
	Если ИспользоватьБизнесПроцессы И ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(Объект.Проект.CRM_КартаМаршрута) Тогда
		CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект, Элементы.ГруппаКнопокСоздать, Объект.Проект.CRM_КартаМаршрута, Ложь);
	Иначе
		CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект,,, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьЗаголовокКоманды(ИмяКоманды)
	
	Возврат Команды[ИмяКоманды].Заголовок;
	
КонецФункции

&НаСервере
Функция ПолучитьОформлениеЭлемента(ЭлементДляПоиска, ИмяЭлемента)
	
	Для Каждого ОформлениеЭлемента Из ЭлементДляПоиска.Оформление.Элементы Цикл
		Если ОформлениеЭлемента.Параметр = Новый ПараметрКомпоновкиДанных(ИмяЭлемента) Тогда
			Возврат ОформлениеЭлемента;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура УдалитьОформленияСОдинаковымиЗначениямиТЧ(ИмяТаблицы = "Участники")
	// "Аккуратный" поиск и удаление созданных программно оформлений для поля -
	// на случай, если у формы есть другие условные оформления - их трогать нельзя.
	МассивЭлементовДляУдаления = Новый Массив();
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если	ЭлементОформления.Поля.Элементы.Количество() <> 1
				Или	ЭлементОформления.Поля.Элементы[0].Поле <> Новый ПолеКомпоновкиДанных(ИмяТаблицы) Тогда
				//
				Продолжить;
			КонецЕсли;
			
			ОформлениеЭлемента = ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			Если ОформлениеЭлемента = Неопределено Тогда Продолжить; КонецЕсли;
			
			Если	ЭлементОформления.Отбор.Элементы.Количество() <> 1
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0]) <> Тип("ЭлементОтбораКомпоновкиДанных")
				Или	ЭлементОформления.Отбор.Элементы[0].ЛевоеЗначение <> Новый ПолеКомпоновкиДанных("Объект." + ИмяТаблицы + ".ИдентификаторОформления")
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение) <> Тип("Строка") Тогда
				//
				Продолжить;
			КонецЕсли;
			
			Если Найти(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение, "_Ид_Оформления_") > 0 Тогда
				МассивЭлементовДляУдаления.Добавить(ЭлементОформления);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементДляУдаления Из МассивЭлементовДляУдаления Цикл
		Попытка УсловноеОформление.Элементы.Удалить(ЭлементДляУдаления); Исключение КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеСОдинаковымиЗначениямиТЧ(ИмяТаблицы = "Участники", ИмяРеквизита = "Телефон")
	
	УдалитьОформленияСОдинаковымиЗначениямиТЧ(ИмяТаблицы);
	
	Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
		СтрокаТаблицы.ИдентификаторОформления = "";
	КонецЦикла;
	
	МассивЦветов = Новый Массив();
	МассивЦветов.Добавить(Новый Цвет(216,218,154));
	МассивЦветов.Добавить(Новый Цвет(218,195,154));
	МассивЦветов.Добавить(Новый Цвет(218,172,154));
	МассивЦветов.Добавить(Новый Цвет(218,154,156));
	МассивЦветов.Добавить(Новый Цвет(218,154,180));
	МассивЦветов.Добавить(Новый Цвет(196,154,218));
	МассивЦветов.Добавить(Новый Цвет(154,162,218));
	МассивЦветов.Добавить(Новый Цвет(154,192,218));
	МассивЦветов.Добавить(Новый Цвет(148,218,228));
	
	УжеПроверенныеЗначения = Новый Массив();
	ТекущийИндексИдентификатораОформления = 0;
	ТекущийИндексСдвига = 0;
	ТЧ = Объект[ИмяТаблицы];
	Для Каждого СтрокаТаблицы Из ТЧ Цикл
		Значение = СтрокаТаблицы[ИмяРеквизита];
		Если Не ЗначениеЗаполнено(Значение) Тогда Продолжить; КонецЕсли;
		Если УжеПроверенныеЗначения.Найти(Значение) <> Неопределено Тогда Продолжить; КонецЕсли;
		
		УжеПроверенныеЗначения.Добавить(Значение);
		
		НайденныеСтроки = ТЧ.НайтиСтроки(Новый Структура(ИмяРеквизита, Значение));
		Если НайденныеСтроки.Количество() > 1 Тогда
			СтрИдентификаторОформления = "_Ид_Оформления_" + Формат(ТекущийИндексИдентификатораОформления, "ЧН=0; ЧГ=");
			ТекущийИндексЦвета = Мин(ТекущийИндексИдентификатораОформления, МассивЦветов.ВГраница());
			ТекущийИндексИдентификатораОформления = ТекущийИндексИдентификатораОформления + 1;
			Если ТекущийИндексИдентификатораОформления > МассивЦветов.ВГраница() Тогда
				ТекущийИндексИдентификатораОформления = 0;
			КонецЕсли;
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЭлементОформления.Использование = Истина;
			
			ОформлениеЭлемента = ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			ОформлениеЭлемента.Использование = Истина;
			ОформлениеЭлемента.Значение = МассивЦветов[ТекущийИндексЦвета];
			
			НовоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
			НовоеПоле.Использование = Истина;
			
			НовыйЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТаблицы + ".ИдентификаторОформления");
			НовыйЭлементОтбора.ПравоеЗначение = СтрИдентификаторОформления;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.Использование = Истина;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ИдентификаторОформления = СтрИдентификаторОформления;
				
				ИндексСтроки = ТЧ.Индекс(НайденнаяСтрока);
				Если ИндексСтроки > ТекущийИндексСдвига Тогда
					ТЧ.Сдвинуть(ИндексСтроки, ТекущийИндексСдвига - ИндексСтроки);
					ТекущийИндексСдвига = ТекущийИндексСдвига + 1;
				Иначе
					ТекущийИндексСдвига = ИндексСтроки + 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ КЛИЕНТ

&НаКлиенте
Процедура СкорректироватьДатуВремя(ПриоритетДатыНачала)
	Если ДатаНачало > ДатаОкончание Тогда
		Если ПриоритетДатыНачала Тогда
			ДатаОкончание = ДатаНачало;
		Иначе
			ДатаНачало = ДатаОкончание;
		КонецЕсли;
	КонецЕсли;
	Если ВремяНачало > ВремяОкончание Тогда
		Если ПриоритетДатыНачала Тогда
			ВремяОкончание = ВремяНачало;
		Иначе
			ВремяНачало = ВремяОкончание;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачало) Тогда
		ВремяНачало = Дата("00010101");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаОкончание) Тогда
		ВремяОкончание = Дата("00010101");
	КонецЕсли;
	
	Объект.ДатаНачала		= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	Объект.ДатаОкончания	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбработаноНеДозвонились(Тип, Текущий = Неопределено, Зависимый = Неопределено)
	
	Если Тип = "Открытие" Тогда
		
		КоличествоОбработано	 = 0;
		КоличествоНеДозвонились	 = 0;
		Для Каждого СтрокаТЧ Из Объект.Участники Цикл
			Если СтрокаТЧ.Обработан Тогда
				КоличествоОбработано 	= КоличествоОбработано + 1;
			КонецЕсли;
			Если СтрокаТЧ.НеДозвонились Тогда
				КоличествоНеДозвонились = КоличествоНеДозвонились + 1;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Тип = "ИзменениеОбработан" Тогда
		
		Если Текущий Тогда
			КоличествоОбработано 	= КоличествоОбработано + 1;
			Если Зависимый Тогда
				КоличествоНеДозвонились = КоличествоНеДозвонились - 1;
			КонецЕсли;
		Иначе
			КоличествоОбработано 	= КоличествоОбработано - 1;
		КонецЕсли;
			
	ИначеЕсли Тип = "ИзменениеНеДозвонились" Тогда
		
		Если Текущий Тогда
			КоличествоНеДозвонились 	= КоличествоНеДозвонились + 1;
			Если Зависимый Тогда
				КоличествоОбработано = КоличествоОбработано - 1;
			КонецЕсли;
		Иначе
			КоличествоНеДозвонились 	= КоличествоНеДозвонились - 1;
		КонецЕсли;
		
	КонецЕсли;
	
	ИтогоНеДозвонились	= "" + КоличествоНеДозвонились + " (" + 
		?(Объект.Участники.Количество() > 0, Окр(КоличествоНеДозвонились / Объект.Участники.Количество() * 100, 1), 0) + "%)";
	ИтогоОбработано		= "" + КоличествоОбработано + " (" + 
		?(Объект.Участники.Количество() > 0, Окр(КоличествоОбработано / Объект.Участники.Количество() * 100, 1), 0) + "%)";
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть форму телемаркетинга. Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииИПриЧтенииНаСервере();
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Элементы.Ответственный.КнопкаВыбора = Истина;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		Элементы.Ответственный.КнопкаВыбора = Ложь;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ТекДата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
		Объект.ДатаНачала = ТекДата;
		Объект.ДатаОкончания = ТекДата;
	КонецЕсли;
	
	ЗаполнитьДанныеФормыСервер();
	
	CRM_ШаблоныОбъектов.СформироватьДополнительныеЭлементыФормы(ЭтотОбъект);
	ИспользоватьБизнесПроцессы = Константы.CRM_ИспользоватьБизнесПроцессы.Получить();
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	ЗаполнитьГруппуГиперссылок();
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
	
	// Заполним анкеты
	
	ИспользоватьАнкетирование = Константы.ИспользоватьАнкетирование.Получить();
	
	Если ИспользоватьАнкетирование Тогда
		
		ЗаполнитьАнкетыУчастников(Ложь);
		
	КонецЕсли;	
	
	ВидимостьПанелиИнформации = Ложь;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьЗаголовокФормы();
	
	Элементы.Основание.Видимость = ЗначениеЗаполнено(Объект.Основание);
	Элементы.ТекМаркетинговоеМероприятие.Видимость = ЗначениеЗаполнено(Объект.МаркетинговоеМероприятие);
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаОсновнаяИнформация;
	КонецЕсли;		
	
	ВычислитьОбщееЧислоУчастников();	
	СформироватьПредставлениеВложений();
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Функция ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ПереданныйТекстHTML)
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ПереданныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		Если АтрибутИсточникКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(АтрибутИсточникКартинки.ТекстовоеСодержимое, "://") > 0 Тогда
			РезультатСкаченногоФайла = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АтрибутИсточникКартинки.ТекстовоеСодержимое);
			
			Если НЕ РезультатСкаченногоФайла = Неопределено И РезультатСкаченногоФайла.Статус Тогда
				НоваяКартинка = Новый Картинка(ПолучитьИзВременногоХранилища(РезультатСкаченногоФайла.Путь));
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла = АтрибутИсточникКартинки.ТекстовоеСодержимое;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
				НоваяСтрока.Картинка = НоваяКартинка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	
	ДокументHTMLТекущегоПисьмаПодготовлен = Ложь;
		
	ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
	
	СтруктураВложений = Новый Структура;
	СценарийДокумент.ПолучитьHTML(ТекущийОбъект.Сценарий, СтруктураВложений);
	
	ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ТекущийОбъект.Сценарий);
	
	Для каждого Вложение Из СтруктураВложений Цикл
		
		НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
		НоваяСтрока.ИмяФайла = Вложение.Ключ;
		НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
		НоваяСтрока.Картинка = Вложение.Значение;
		
	КонецЦикла;
	
	Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
		
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.Сценарий);
		Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
		ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
		ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
		
	КонецЕсли;
	
	Если ДокументHTMLТекущегоПисьмаПодготовлен Тогда
		
		ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		ТекущийОбъект.Сценарий = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекстHTML," ");
		
	КонецЕсли;
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	Письмо = ТекущийОбъект.Ссылка;
		
	// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
	ТаблицаВложенийКартинокФорматированногоДокумента = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
	Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
		УдаленныеВложения.Добавить(Вложение.Ссылка);
	КонецЦикла;
	
	// Удалим удаленные вложения
	Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
		ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
		ОбъектВложение.Удалить();
	КонецЦикла;
	
	УдаленныеВложения.Очистить();
	
	Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
		
		ИмяФайлаВложения = "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_") + "." + Вложение.Картинка.Формат();
		
		ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
		АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
		ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
		Письмо,
		АдресКартинкиВоВременномХранилище,
		ИмяФайлаВложения,
		ДвоичныеДанныеКартинки.Размер());
		
		Если ПрисоединенныйФайл <> Неопределено Тогда
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
		
		Размер = 0;
		ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
		
		Если СтрокаТаблицыВложений.Расположение = 4 Тогда
			// из временного хранилища
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, ИмяФайла, Размер);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 3 Тогда
			// из файла на сервере
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 1 Тогда
			
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
				Письмо, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор);
			
		ИначеЕсли СтрокаТаблицыВложений.Расположение = 0 Тогда
			// перезаписать вложение
			
		КонецЕсли;
		
		СтрокаТаблицыВложений.Расположение = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//ТекстПисьма = Взаимодействия.ОбработатьТекстHTML(ТекущийОбъект.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки.Получить("ВидимостьПанелиИнформации") = Неопределено Тогда
		ВидимостьПанелиИнформации = Настройки.Получить("ВидимостьПанелиИнформации");
	Иначе
		ВидимостьПанелиИнформации = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьСтартСделки(Сделка)
	
	Если Сделка.Основание = Объект.Ссылка Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	Если ИмяСобытия = "СтартованаСделка" Тогда
		Если ОбработатьСтартСделки(Параметр) Тогда
			ЗаполнитьГруппуГиперссылок();
			НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	//+СофтФон	
	Если ИмяСобытия = "СофтФон_ЗаписьИнтереса" Тогда
		Если Параметр.Свойство("Основание") И (Параметр.Основание = Объект.Ссылка) Тогда
			Если (ЗначениеЗаполнено(Параметр.Партнер) ИЛИ ЗначениеЗаполнено(Параметр.КонтактноеЛицо)) Тогда
				СтруктураПоиска = Новый Структура;
				Если ЗначениеЗаполнено(Параметр.Партнер) Тогда
					СтруктураПоиска.Вставить("Партнер", Параметр.Партнер);
				КонецЕсли;	
				Если ЗначениеЗаполнено(Параметр.КонтактноеЛицо) Тогда
					СтруктураПоиска.Вставить("КонтактноеЛицо",	Параметр.КонтактноеЛицо);
				КонецЕсли;	
				НайденныеСтроки = Объект.Участники.НайтиСтроки(СтруктураПоиска);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если Параметр.Свойство("Звонок") Тогда
						НайденнаяСтрока.Звонок = Параметр.Звонок;
					КонецЕсли;
					Если Параметр.Свойство("Интерес") Тогда
						НайденнаяСтрока.Интерес = Параметр.Интерес;
					КонецЕсли;
					НайденнаяСтрока.Обработан		= Истина;
					НайденнаяСтрока.НеДозвонились	= Ложь;
					Прервать;
				КонецЦикла;	
		    КонецЕсли;
	    КонецЕсли;
	//-СофтФон	
	ИначеЕсли ИмяСобытия = "ОбновитьСтрокуВТелемаркетинге" Тогда
		Если ЗначениеЗаполнено(Параметр.ПартнерСтрокой) Тогда
			СтруктураПоиска = Новый Структура;
			СтрокаПоиска = СтрЗаменить(Параметр.ПартнерСтрокой,"[ ","");
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска," ]","");			
			СтруктураПоиска.Вставить("ПартнерСтрокой",	СтрокаПоиска);
			НайденныеСтроки = Объект.Участники.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Интерес) Тогда
					НайденнаяСтрока.Обработан		= Истина;
					НайденнаяСтрока.НеДозвонились	= Ложь;
					НайденнаяСтрока.Интерес			= Параметр.Интерес;
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Партнер) Тогда
						НайденнаяСтрока.Партнер		= ПолучитьЗначениеРеквизита(Параметр.Интерес, "Партнер");						
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.КонтактноеЛицо) Тогда					
						НайденнаяСтрока.КонтактноеЛицо	= ПолучитьЗначениеРеквизита(Параметр.Интерес, "КонтактноеЛицо");
					КонецЕсли;
					ОбновитьОбработаноНеДозвонились("Открытие");					
					Модифицированность = Истина;					
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		Иначе
			ТекДанные = Элементы.Участники.ТекущиеДанные;
			Если НЕ (ТекДанные = Неопределено) Тогда
				Если НЕ ЗначениеЗаполнено(ТекДанные.Интерес) Тогда
					ТекДанные.Интерес = Параметр.Интерес;
				КонецЕсли;	
				Если НЕ ЗначениеЗаполнено(ТекДанные.Партнер) Тогда
					ТекДанные.Партнер = ПолучитьЗначениеРеквизита(Параметр.Интерес, "Партнер");
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ТекДанные.КонтактноеЛицо) Тогда
					ТекДанные.КонтактноеЛицо = ПолучитьЗначениеРеквизита(Параметр.Интерес, "КонтактноеЛицо");
				КонецЕсли;
				ТекДанные.Обработан		= Истина;
				ТекДанные.НеДозвонились	= Ложь;				
			КонецЕсли;	
			ОбновитьОбработаноНеДозвонились("Открытие");			
			Модифицированность = Истина;
		КонецЕсли;			
	ИначеЕсли ИмяСобытия = "ПринатиеОбращения" И Источник = ЭтотОбъект Тогда
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ТекДанные = Элементы.Участники.ТекущиеДанные;
			Если ТекДанные<>Неопределено Тогда
				ТекДанные.Интерес = Параметр;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();	
	КонецЕсли;
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры(Параметры)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ОснованиеСтруктураВложений = Новый Структура;
			ОснованиеТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
				Параметры.ЗначениеКопирования, Параметры.ЗначениеКопирования.Сценарий,ОснованиеСтруктураВложений);
				
			СценарийДокумент.УстановитьHTML(ОснованиеТекстHTML, ОснованиеСтруктураВложений);
			
		ИначеЕсли Параметры.Свойство("ТекстHTML") И Параметры.Свойство("Вложения") Тогда
			
			СценарийДокумент.УстановитьHTML(Параметры.ТекстHTML, Параметры.Вложения);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложения(Параметры = Неопределено)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			табВложения = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Параметры.ЗначениеКопирования, Истина);
			
			Для Каждого Стр Из табВложения Цикл
				Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
					новСтр = Вложения.Добавить();
					новСтр.Ссылка								= Стр.Ссылка;
					новСтр.ИмяФайла								= Стр.ИмяФайла;
					новСтр.ИндексКартинки						= Стр.ИндексКартинки;
					новСтр.Размер								= Стр.Размер;
					РазмерВложения								= Цел(новСтр.Размер/1024);
					новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.РазмерПредставление					= Стр.РазмерПредставление;
					новСтр.ПодписанЭП							= Стр.ПодписанЭП;
					новСтр.Расположение							= 1;
					новСтр.ИДФайлаЭлектронногоПисьма			= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		Вложения.Очистить();
		табВложения = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка, Истина);
		
		Для Каждого Стр Из табВложения Цикл
			Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
				АдресВоВремХранилище = "";
				
				новСтр = Вложения.Добавить();
				новСтр.Ссылка								= Стр.Ссылка;
				новСтр.ИмяФайла								= Стр.ИмяФайла;
				новСтр.ИмяФайлаНаКомпьютере					= АдресВоВремХранилище;
				новСтр.ИндексКартинки						= Стр.ИндексКартинки;
				новСтр.Размер								= Стр.Размер;
				РазмерВложения								= Цел(новСтр.Размер/1024);
				новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
				новСтр.РазмерПредставление					= Стр.РазмерПредставление;
				новСтр.ПодписанЭП							= Стр.ПодписанЭП;
				новСтр.Расположение							= 0;
				новСтр.ИДФайлаЭлектронногоПисьма			= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	ОбработатьПереданныеПараметры(Параметры);
	ЗаполнитьВложения(Параметры);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		СтруктураВложений = Новый Структура;
		Объект.Сценарий = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
			Объект.Ссылка, Объект.Сценарий,СтруктураВложений);
		СценарийДокумент.УстановитьHTML(Объект.Сценарий, СтруктураВложений);
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события ПриЧтенииНаСервере.
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	ПриСозданииИПриЧтенииНаСервере();
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
		ЗагрузитьИзШаблонаНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД И РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОбработанПриИзменении(Элемент)
	ОбновитьОбработаноНеДозвонились("ИзменениеОбработан", Элементы.Участники.ТекущиеДанные.Обработан, Элементы.Участники.ТекущиеДанные.НеДозвонились);
	
	Если Элементы.Участники.ТекущиеДанные.Обработан Тогда
		Элементы.Участники.ТекущиеДанные.НеДозвонились = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчастникиНеДозвонилисьПриИзменении(Элемент)
	ОбновитьОбработаноНеДозвонились("ИзменениеНеДозвонились", Элементы.Участники.ТекущиеДанные.НеДозвонились, Элементы.Участники.ТекущиеДанные.Обработан);
	
	Если Элементы.Участники.ТекущиеДанные.НеДозвонились Тогда
		Элементы.Участники.ТекущиеДанные.Обработан = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	ОбновитьОбработаноНеДозвонились("Открытие");
	//ИнициализироватьЗакладкуТекущийАбонент();		
	ВычислитьОбщееЧислоУчастников();

КонецПроцедуры

&НаКлиенте
Процедура УчастникиПартнерПриИзменении(Элемент)
	
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Партнер) И ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
		ТекДанные.КонтактноеЛицо = ВернутьКЛПартнера(ТекДанные.Партнер);
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо));
		Если СписокТелефонов.Количество() > 0 Тогда
			ТелефонныйНомер = СписокТелефонов[0].Значение;
			Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
				ТекДанные.Телефон = ТелефонныйНомер.Представление
			Иначе
				ТекДанные.Телефон = "";
			КонецЕсли;
		Иначе
			ТекДанные.Телефон = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекДанные.Партнер) И ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда		
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,Неопределено),,Истина);
		Если СписокТелефонов.Количество() > 0 Тогда
			ТелефонныйНомер = СписокТелефонов[0].Значение;
			Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
				ТекДанные.Телефон = ТелефонныйНомер.Представление
			Иначе
				ТекДанные.Телефон = "";
			КонецЕсли;
		Иначе
			ТекДанные.Телефон = "";
		КонецЕсли;
	Иначе
		ТекДанные.Телефон = "";
	КонецЕсли;
	
	ЗаполнитьАнкетуСтроки(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПартнерОчистка(Элемент, СтандартнаяОбработка)
	Элементы.УчастникиПартнер.ВыбиратьТип = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПартнерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.УчастникиПартнер.ВыбиратьТип Тогда
		СтандартнаяОбработка = Ложь;
		НовоеОповещение = Новый ОписаниеОповещения("УчастникиПартнерНачалоВыбораПослеВыбораТипа", ЭтотОбъект);
		СписокВыбораТипов = Новый СписокЗначений;
		СписокВыбораТипов.Добавить(1, Нстр("ru = 'Клиент'"));
		СписокВыбораТипов.Добавить(2, Нстр("ru = 'Потенциальный клиент'"));
		СписокВыбораТипов.ПоказатьВыборЭлемента(НовоеОповещение, НСтр("ru = 'Выбор типа данных'"), Элемент);
	КонецЕсли;
		
КонецПроцедуры
	
&НаКлиенте
Процедура УчастникиПартнерНачалоВыбораПослеВыбораТипа(ЭлементСписка, Контекст) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементСписка.Значение = 1 Тогда
		НовоеОповещение = Новый ОписаниеОповещения("УчастникиПартнерВыборИзПартнеров", ЭтотОбъект);
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора",,,,,,НовоеОповещение);
	ИначеЕсли ЭлементСписка.Значение = 2 Тогда
		НовоеОповещение = Новый ОписаниеОповещения("УчастникиПартнерВыборИзПотенциальныхКлиентов", ЭтотОбъект);
		ОткрытьФорму("Справочник.CRM_ПотенциальныеКлиенты.ФормаВыбора",,,,,,НовоеОповещение);
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПартнерВыборИзПартнеров(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Участники.ТекущиеДанные.Партнер = Результат;	
	УчастникиПартнерПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПартнерВыборИзПотенциальныхКлиентов(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.Участники.ТекущиеДанные.Партнер = Результат;	
	УчастникиПартнерПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура УчастникиКонтактноеЛицоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Партнер) И ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо));
		Если СписокТелефонов.Количество() > 0 Тогда
			ТелефонныйНомер = СписокТелефонов[0].Значение;
			Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
				ТекДанные.Телефон = ТелефонныйНомер.Представление
			Иначе
				ТекДанные.Телефон = "";
			КонецЕсли;
		Иначе
			ТекДанные.Телефон = "";
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьАнкетуСтроки(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	
	Если ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",ТекДанные.Партнер,ТекДанные.КонтактноеЛицо));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УчастникиТелефонНачалоВыбораЗавершение", ЭтотОбъект);
		СписокТелефонов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите телефон");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиТелефонНачалоВыбораЗавершение(ЭлементСписка, ДополнительныеПараметры) Экспорт
	
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	
	Если ЭлементСписка <> Неопределено Тогда
		ТелефонныйНомер = ЭлементСписка.Значение;
		Если Не ТелефонныйНомер.Количество() = 0 Тогда
			ТекДанные.Телефон = ТелефонныйНомер.Представление;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСегменту(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Участники.Количество() > 0));
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоСегментуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_Телемаркетинг.Форма.ФормаВыборСегмента",ПараметрыФормы,ЭтотОбъект,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСегментуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ (Результат = Неопределено) Тогда
		Сегмент							= Результат.Сегмент;
		ВидКонтактнойИнформации			= Результат.ВидКонтактнойИнформации;
		НеЗаполнятьСПустымиТелефонами	= Результат.НеЗаполнятьСПустымиТелефонами;
		ТолькоОсновныеКонтактныеЛица	= Результат.ТолькоОсновныеКонтактныеЛица;
		Если Результат.ОчищатьТЧ Тогда
			Объект.Участники.Очистить();
		КонецЕсли;
		ЗаполнитьТЧПоСегменту();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРезультатамОтчета(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Участники.Количество() > 0));
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоРезультатамОтчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_Телемаркетинг.Форма.ФормаВыбораРезультатаОтчета", ПараметрыФормы, ЭтотОбъект,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРезультатамОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ (Результат = Неопределено) Тогда
		ВидКонтактнойИнформации			= Результат.ВидКонтактнойИнформации;
		НеЗаполнятьСПустымиТелефонами	= Результат.НеЗаполнятьСПустымиТелефонами;
		Если Результат.ОчищатьТЧ Тогда
			Объект.Участники.Очистить();
		КонецЕсли;
		ЗаполнитьТЧПоРезультатуОтчета(Результат.СписокСсылок);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМаркетинговойКампании(Команда)
	НовоеОповещение = Новый ОписаниеОповещения("ЗаполнитьПоМаркетинговойКампанииЗавершение", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ПараметрыФормы = Новый Структура("ВыборИзТелемаркетинга", Истина);
	ОткрытьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы,,,,,НовоеОповещение,РежимОткрытия); 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМаркетинговойКампанииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) Тогда
		Если Объект.Участники.Количество() > 0 Тогда
			ТекстВопроса = Нстр("ru = 'Табличная часть содержит записи. Заменить или дополнить?'");
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(1, Нстр("ru = 'Заменить'"));
			КнопкиВопроса.Добавить(2, Нстр("ru = 'Дополнить'"));
			КнопкиВопроса.Добавить(0, Нстр("ru = 'Отмена'"));	
			ПараметрыОповещения = Новый Структура("Кампания", Результат);
			НовоеОповещение = Новый ОписаниеОповещения("ЗаполнениеПоМаркетинговойКампанииПослеВопроса", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВопрос(НовоеОповещение,ТекстВопроса, КнопкиВопроса);
		Иначе
			ЗаполнениеПоМаркетинговойКампании(Результат);
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнениеПоМаркетинговойКампанииПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = 0 Тогда
		Возврат;
	ИначеЕсли Результат = 1 Тогда
		Объект.Участники.Очистить();
		ЗаполнениеПоМаркетинговойКампании(ДополнительныеПараметры.Кампания);		
	ИначеЕсли Результат = 2 Тогда
		ЗаполнениеПоМаркетинговойКампании(ДополнительныеПараметры.Кампания);
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПоМаркетинговойКампании(Кампания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиПервичногоИнтереса.Партнер
	|ИЗ
	|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
	|ГДЕ
	|	ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса = &Кампания";
	
	Запрос.УстановитьПараметр("Кампания", Кампания);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партнер");
	
	Для Каждого СтрокаМассива Из Результат Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("СправочникСсылка.Партнеры") Тогда
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер = СтрокаМассива;
			НоваяСтрока.КонтактноеЛицо = ВернутьКЛПартнера(СтрокаМассива);
			СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",НоваяСтрока.Партнер,НоваяСтрока.КонтактноеЛицо), Неопределено);
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока.Телефон	= СписокТелефонов[0].Значение.Представление;
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаМассива) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда			
			НоваяСтрока = Объект.Участники.Добавить();
			НоваяСтрока.Партнер = ?(ЗначениеЗаполнено(СтрокаМассива.Партнер), СтрокаМассива.Партнер, СтрокаМассива);
			Если ЗначениеЗаполнено(СтрокаМассива.Партнер) Тогда
				НоваяСтрока.КонтактноеЛицо = ВернутьКЛПартнера(НоваяСтрока.Партнер);				
			КонецЕсли;				
			СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо",НоваяСтрока.Партнер,Неопределено), , Истина);			
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока.Телефон	= СписокТелефонов[0].Значение.Представление;
			КонецЕсли;			
		КонецЕсли;
		Модифицированность = Истина;
	КонецЦикла;		
	
	Если Результат.Количество() > 0 Тогда
		УдалитьДублиСтрок();				
	КонецЕсли;		
	
	// заполним анкеты
	ЗаполнитьАнкетыУчастников();	
	ВычислитьОбщееЧислоУчастников();	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузкаКлиентовИзФайла(Команда)
	НовоеОповещение = Новый ОписаниеОповещения("ЗагрузкаКлиентовИзФайлаЗавершение", ЭтотОбъект);
	РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;	
	ПараметрыФормы = Новый Структура("ВидСправочника", "Партнеры");
	ПараметрыФормы.Вставить("ЗагрузкаВДокумент", "Телемаркетинг");
	ОткрытьФорму("Обработка.CRM_ЗагрузкаСправочниковИзФайла.Форма", ПараметрыФормы,,,,, НовоеОповещение, РежимОткрытия);
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузкаКлиентовИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) И Результат.Количество() > 0 Тогда
		Если Объект.Участники.Количество() > 0 Тогда
			ТекстВопроса = Нстр("ru = 'Табличная часть содержит записи. Заменить или дополнить?'");
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить(1, Нстр("ru = 'Заменить'"));
			КнопкиВопроса.Добавить(2, Нстр("ru = 'Дополнить'"));
			КнопкиВопроса.Добавить(0, Нстр("ru = 'Отмена'"));	
			ПараметрыОповещения = Новый Структура("МассивЭлементов", Результат);
			НовоеОповещение = Новый ОписаниеОповещения("ЗагрузкаКлиентовИзФайлаПослеВопроса", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВопрос(НовоеОповещение,ТекстВопроса, КнопкиВопроса);
		Иначе
			ЗагрузкаКлиентовИзФайлаНаСервере(Результат);
		КонецЕсли;
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ЗагрузкаКлиентовИзФайлаПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = 0 Тогда
		Возврат;
	ИначеЕсли Результат = 1 Тогда
		Объект.Участники.Очистить();
		ЗагрузкаКлиентовИзФайлаНаСервере(ДополнительныеПараметры.МассивЭлементов);		
	ИначеЕсли Результат = 2 Тогда
		ЗагрузкаКлиентовИзФайлаНаСервере(ДополнительныеПараметры.МассивЭлементов);
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаКлиентовИзФайлаНаСервере(МассивЭлементов)
	
	Для Каждого ЭлементМассива Из МассивЭлементов Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			Если ЗначениеЗаполнено(ЭлементМассива.Клиент) Тогда
				НоваяСтрока = Объект.Участники.Добавить();
				НоваяСтрока.Партнер = ЭлементМассива.Клиент;
				НоваяСтрока.КонтактноеЛицо = ВернутьКЛПартнера(НоваяСтрока.Партнер);
				НоваяСтрока.Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ЭлементМассива.Телефон);
			ИначеЕсли ЗначениеЗаполнено(ЭлементМассива.Наименование) Тогда				
				НоваяСтрока = Объект.Участники.Добавить();
				НоваяСтрока.ПартнерСтрокой = ЭлементМассива.Наименование;
				НоваяСтрока.Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(ЭлементМассива.Телефон);
			КонецЕсли;				
		КонецЕсли;			
	КонецЦикла;	
	
	Если МассивЭлементов.Количество() > 0 Тогда
		УдалитьДублиСтрок();
	КонецЕсли;
	
	// заполним анкеты
	ЗаполнитьАнкетыУчастников();
	ВычислитьОбщееЧислоУчастников();	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОчиститьТЧ(Команда)
	
	Если Объект.Участники.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТЧЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Табличная часть содержит записи. Продолжить?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
								
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Участники.Очистить();
		ВычислитьОбщееЧислоУчастников();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТекущемуКлиенту(Команда)
	ТекДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ТекстСообщения = Нстр("ru = 'Не выбрана строка для перехода!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
	Если ТекНеДозвонились Тогда
		Элементы.Участники.ТекущаяСтрока				= Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		Элементы.Участники.ТекущиеДанные.НеДозвонились 	= ТекНеДозвонились;
		ТекНеДозвонились = Ложь;
	КонецЕсли;	
	ТекПозицияКурсора = ТекДанные.НомерСтроки - 1;
	Если ТекДанные.Обработан Тогда
		ТекРежимПоказа = "Обработаны";
	ИначеЕсли ТекДанные.НеДозвонились Тогда		
		ТекРежимПоказа = "НеДозвонились";
	Иначе
		ТекРежимПоказа = "НеЗвонили";
	КонецЕсли;		
	ИнициализироватьЗакладкуТекущийАбонентНаКлиенте();
	Элементы.Панель.ТекущаяСтраница = Элементы.ГруппаСтраницаТекущийАбонент;
КонецПроцедуры

 &НаКлиенте
Процедура НаВесьДеньПриИзменении(Элемент)
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалоПриИзменении(Элемент)
	
	СкорректироватьДатуВремя(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	СкорректироватьДатуВремя(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалоПриИзменении(Элемент)
	
	СкорректироватьДатуВремя(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПриИзменении(Элемент)
	
	СкорректироватьДатуВремя(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалоНачалоВыбораИзСписка(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("Данные", "ВремяНачало");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяНачало, Элемент,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияНачалоВыбораИзСписка(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("Данные", "ВремяОкончание");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	Если НачалоДня(ДатаНачало) = НачалоДня(ДатаОкончание) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент, ВремяНачало, Истина, ОписаниеОповещения);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент,,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработки выбора времени из списка.
//
Процедура ОбработкаОповещенияВыбранногоВремени(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ЭтотОбъект[Дополнительно.Данные] = ВыбранноеВремя.Значение;
		ВремяНачалоПриИзменении(Дополнительно.Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	ЗаполнитьГруппуГиперссылок();
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(,Объект.Основание);
КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	ОбновитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ДатаНачалаНовая			= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	ДатаОкончанияНовая		= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
	Объект.ДатаНачала		= ДатаНачалаНовая;
	Объект.ДатаОкончания	= ДатаОкончанияНовая;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Объект.Ссылка, Параметры.ОбновлятьКалендарь), ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект._БизнесПроцесс) Тогда
		
		НовыйБизнесПроцесс = CRM_БизнесПроцессыСервер.ПроверитьНаличиеПроектаСтартоватьБизнесПроцесс(Объект.Ссылка, Объект.Проект);
		
		Если НЕ НовыйБизнесПроцесс = Неопределено Тогда
			ЗаполнитьГруппуГиперссылок();
			НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Ответственный.ТолькоПросмотр = Истина;
	Элементы.Ответственный.КнопкаВыбора = Ложь;
	
	Оповестить("ОбновитьПланировщик");
	ОбновитьЗаголовокФормы();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершенПриИзменении(Элемент)
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	Элементы.УчастникиАнкета.Видимость = ИспользоватьАнкетирование И ЗначениеЗаполнено(Объект.Опрос);
	ОбновитьОбработаноНеДозвонились("Открытие");
	ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(Истина);
	
КонецПроцедуры

//+СофтФон

&НаКлиенте
// Процедура - обработчик оповещения для выполнения звонка
//
// Параметры:
//	ВыбранныйНомер			- ЭлементСпискаЗначений	- Контакт
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура ПозвонитьПоНомеру(ВыбранныйНомер, ДополнительныеПараметры) Экспорт
	Если ВыбранныйНомер = Неопределено Тогда Возврат; КонецЕсли;
	сфпСофтФонПроКлиент.сфпПозвонить(ВыбранныйНомер.Значение, ДополнительныеПараметры.Партнер, ДополнительныеПараметры.ДанныеЗаполнения);
КонецПроцедуры // ПозвонитьПоНомеру()

&НаКлиенте
// Процедура - обработчик команды формы "Позвонить"
//
Процедура Позвонить(Команда)
	ТД = Элементы.Участники.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ДанныеЗаполнения 		= Новый Структура;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо записать документ!'"));
		Возврат;
	КонецЕсли;	
	ДанныеЗаполнения.Вставить("Проект",		Объект.Проект); 
	ДанныеЗаполнения.Вставить("Основание",	Объект.Ссылка);	
	НомерТелефона	= ТД.Телефон;
	Если ПустаяСтрока(НомерТелефона) Тогда
		СписокОбъектов = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ТД.Партнер) Тогда
			СписокОбъектов.Добавить(ТД.Партнер);
		КонецЕсли;	
		Если ЗначениеЗаполнено(ТД.КонтактноеЛицо) Тогда
			СписокОбъектов.Добавить(ТД.КонтактноеЛицо);
		КонецЕсли;	
		сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, ДанныеЗаполнения);
	ИначеЕсли ЗначениеЗаполнено(ТД.КонтактноеЛицо) Тогда
		сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, ТД.КонтактноеЛицо, ДанныеЗаполнения);
	ИначеЕсли ЗначениеЗаполнено(ТД.Партнер) Тогда
		сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, ТД.Партнер, ДанныеЗаполнения);
	Иначе
		ДанныеЗаполнения.Вставить("Описание",	ТД.ПартнерСтрокой);	
		СписокТелефонов = Новый СписокЗначений;
		СписокТелефонов.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НомерТелефона,	","));
		Если СписокТелефонов.Количество() = 1 Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, ТД.Партнер, ДанныеЗаполнения);
		Иначе
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Партнер",					ТД.Партнер);
			ДополнительныеПараметры.Вставить("ДанныеЗаполнения",		ДанныеЗаполнения);
			ОписаниеВыбора = Новый ОписаниеОповещения("ПозвонитьПоНомеру", ЭтотОбъект, ДополнительныеПараметры); 
			СписокТелефонов.ПоказатьВыборЭлемента(ОписаниеВыбора, НСтр("ru='Выберите номер телефона'"), ЭтотОбъект);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // Позвонить()

//-СофтФон

&НаКлиенте
Процедура УчастникиИнтересНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Список = Новый СписокЗначений;
	ЭлСписка = Список.Добавить("Создать", Нстр("ru = 'Создать новый интерес'"));
	ЭлСписка.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	ЭлСписка = Список.Добавить("Выбрать", Нстр("ru = 'Выбрать из списка ...'"));
	ЭлСписка.Картинка  = БиблиотекаКартинок.Лупа;
	//ЭлСписка = Список.Добавить("Очистить", Нстр("ru = 'Очистить'"));
	//ЭлСписка.Картинка = БиблиотекаКартинок.Очистить;
	ОписаниеОповещения = Новый ОписаниеОповещения("УчастникиИнтересНачалоВыбораПродолжение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, Список, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИнтересНачалоВыбораПродолжение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаИнтереса = Неопределено;
	Если ВыбранныйЭлемент.Значение = "Создать" Тогда
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
				|Создание нового интереса возможно только после записи данных.
				|Данные будут записаны.'");
			//
			ОписаниеОповещения = Новый ОписаниеОповещения("УчастникиИнтересНачалоВыбораЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			УчастникиИнтересНачалоВыбораЗавершение(Неопределено, Неопределено)
		КонецЕсли;
		
	ИначеЕсли ВыбранныйЭлемент.Значение = Нстр("ru = 'Выбрать'") Тогда
		Партнер			= Элементы.Участники.ТекущиеДанные.Партнер;
		КонтактноеЛицо	= Элементы.Участники.ТекущиеДанные.КонтактноеЛицо;
		ПараметрыФормы	= Новый Структура;
		ПараметрыФормы.Вставить("ПодборИзТелемаркетинга", Истина);		
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		ПараметрыФормы.Вставить("Партнер", Партнер);		
		ПараметрыФормы.Вставить("КонтактноеЛицо", КонтактноеЛицо);						
		Если ЗначениеЗаполнено(Элементы.Участники.ТекущиеДанные.Интерес) Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.Участники.ТекущиеДанные.Интерес);
		КонецЕсли;	
		СтруктураДанных = Новый Структура("Партнер, КонтактноеЛицо", Партнер, КонтактноеЛицо);
		НовоеОповещение = Новый ОписаниеОповещения("ВыборИнтересаЗавершение", ЭтотОбъект, СтруктураДанных);
		РежимОткрытияФормы = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Документ.CRM_Интерес.ФормаВыбора", ПараметрыФормы,,,,,НовоеОповещение, РежимОткрытияФормы);
	ИначеЕсли ВыбранныйЭлемент.Значение = "Очистить" Тогда
		Элементы.Участники.ТекущиеДанные.Интерес = ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИнтересНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
		Если Результат = КодВозвратаДиалога.Отмена Тогда 
			Возврат;
		ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда 
			Если НЕ Записать() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ВидВзаимодействия) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru ='Не заполнен реквизит ""Вид взаимодействия!""'"),Объект.ВидВзаимодействия);
			Возврат;
		КонецЕсли;		
		
		СтруктураПараметров = Новый Структура;
		Партнер = Элементы.Участники.ТекущиеДанные.Партнер;			
		КонтактноеЛицо = Элементы.Участники.ТекущиеДанные.КонтактноеЛицо;
		Тема = Объект.Тема;
		ПартнерСтрокой = Элементы.Участники.ТекущиеДанные.ПартнерСтрокой;
		Телефон = Элементы.Участники.ТекущиеДанные.Телефон;
		
		ЗначенияЗаполнения = Новый Структура("КонтактноеЛицо,Тема, Офис", КонтактноеЛицо, Тема, Объект.Подразделение, ВернутьОфисПодразделения(Объект.Подразделение));
		Если ЗначениеЗаполнено(Партнер) и ТипЗнч(Партнер) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ЗначенияЗаполнения.Вставить("ПотенциальныйКлиент", Партнер);			
		ИначеЕсли ЗначениеЗаполнено(Партнер) и ТипЗнч(Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
			ЗначенияЗаполнения.Вставить("Партнер", Партнер);
		ИначеЕсли ЗначениеЗаполнено(ПартнерСтрокой)	Тогда 
			НомерСпецСимвола = СтрНайти(ПартнерСтрокой," / ");
			Если НомерСпецСимвола > 0 Тогда
				ПартнерСтрокой = СокрЛП(Лев(ПартнерСтрокой, НомерСпецСимвола - 1));
			КонецЕсли;				
			ЗначенияЗаполнения.Вставить("ПотенциальныйКлиент", СоздатьПотенциальногоКлиента(ПартнерСтрокой, Телефон));						
		КонецЕсли;		
	
		ЗначенияЗаполнения.Вставить("Автор", ПользователиКлиентСервер.ТекущийПользователь());		
		ЗначенияЗаполнения.Вставить("Описание", "");		
		ЗначенияЗаполнения.Вставить("ТипУслуги", ПредопределенноеЗначение("Справочник.CRM_ТипУслуги.ПоставкаТоварыУслуги"));
		ЗначенияЗаполнения.Вставить("СостояниеИнтереса", ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПервичныйИнтерес"));		
		
		ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			ЗначенияЗаполнения.Вставить("Организация", ЗначениеНастройки);
		Иначе
			ЗначенияЗаполнения.Вставить("Организация", CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию());
		КонецЕсли;
				
		ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			ЗначенияЗаполнения.Вставить("Ответственный", ЗначениеНастройки);			
		Иначе
			ЗначенияЗаполнения.Вставить("Ответственный", CRM_ОбщегоНазначенияСервер.ТекущийПользователь());
		КонецЕсли;		
		
		СтруктураПараметров.Вставить("ЗначенияЗаполнения",ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("ОткрытиеИзТелемаркетинга", Истина);	
		СтруктураПараметров.Вставить("СозданиеИзСтрокиТелемаркетинга", Истина);	
		СтруктураПараметров.Вставить("Взаимодействие", Объект.ВидВзаимодействия);			
		СтруктураПараметров.Вставить("Содержание", ПолучитьЗначениеРеквизита(Объект.ВидВзаимодействия, "Наименование"));					
		
		Если Не ЗначениеЗаполнено(Партнер) И Не ЗначениеЗаполнено(КонтактноеЛицо) И ЗначениеЗаполнено(Элементы.Участники.ТекущиеДанные.ПартнерСтрокой) Тогда
			СтруктураПараметров.Вставить("ПоискКлиентНаименование", Элементы.Участники.ТекущиеДанные.ПартнерСтрокой);	
		КонецЕсли;
		
		ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
		
КонецПроцедуры

// Вызывается после выбора пользователем интереса в ТЧ Участники
//
//  Параметры
//   ВыбранныйИнтерес - Неопределено/ДокументСсылка - Результат выбора интереса
//   ДополнительныеПараметры - Структура - Дополнительные параметры, переданные в процедуру
//
&НаКлиенте
Процедура ВыборИнтересаЗавершение(ВыбранныйИнтерес, ДополнительныеПараметры) Экспорт
	Если НЕ ВыбранныйИнтерес = Неопределено Тогда
		Партнер = ДополнительныеПараметры.Партнер;		
		КонтактноеЛицо = ДополнительныеПараметры.КонтактноеЛицо;				
		Элементы.Участники.ТекущиеДанные.Интерес = ВыбранныйИнтерес;
		Если НЕ ЗначениеЗаполнено(Партнер) Тогда
			Элементы.Участники.ТекущиеДанные.Партнер = ПолучитьЗначениеРеквизита(ВыбранныйИнтерес, "Партнер");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			Элементы.Участники.ТекущиеДанные.КонтактноеЛицо = ПолучитьЗначениеРеквизита(ВыбранныйИнтерес, "КонтактноеЛицо");
		КонецЕсли;
		Элементы.Участники.ТекущиеДанные.Обработан		= Истина;
		Элементы.Участники.ТекущиеДанные.НеДозвонились	= Ложь;				
	КонецЕсли;
	ОбновитьОбработаноНеДозвонились("Открытие");		
	Модифицированность = Истина;	
КонецПроцедуры	

&НаКлиенте
Процедура ОтправитьСМС(Команда)
	Если Элементы.Участники.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		Структура = Новый Структура();
		Если ЗначениеЗаполнено(Элементы.Участники.ТекущиеДанные.КонтактноеЛицо) Тогда
			Структура.Вставить("Ссылка", Элементы.Участники.ТекущиеДанные.КонтактноеЛицо);
		Иначе
			Структура.Вставить("Ссылка", Элементы.Участники.ТекущиеДанные.Партнер);
		КонецЕсли;	
		Структура.Вставить("Телефон", ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Элементы.Участники.ТекущиеДанные.Телефон));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выполнение команд подключаемых отчетов и обработок.

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ШАБЛОНОВ 

&НаСервере
Процедура ЗагрузитьИзШаблонаНаСервере(ШаблонОбъект)
	
	ОписаниеРеквизитов = ПолучитьРеквизиты("Объект");
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	CRM_ШаблоныОбъектов.ЗаполнитьПредставлениеОбъекта(ШаблонОбъект,ОбъектЗначение,ОписаниеРеквизитов);
	ЗначениеВДанныеФормы(ОбъектЗначение,Объект);
	Объект.Шаблон = ШаблонОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзШаблона(Команда)
	
	СсылкаНаОбъект = Объект.Ссылка;
	сПараметры = Новый Структура("Ссылка, Форма", СсылкаНаОбъект, ЭтотОбъект);
	CRM_ШаблоныОбъектовКлиент.ЗагрузитьИзШаблонаНаКлиенте(сПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляВыгрузки()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	ОбъектСтруктура = Новый Структура("ОбъектЗначение", ОбъектЗначение);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектСтруктура, УникальныйИдентификатор);
	
	Возврат Новый Структура("ЗначенияЗаполнения",Новый Структура("Объект,ТипФормы",АдресВХранилище,"ФормаДокумента"));
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыгрузитьВШаблон(Команда)
	
	ОткрытьФорму("Справочник.CRM_ШаблоныОбъектов.ФормаОбъекта",ПолучитьПараметрыДляВыгрузки(),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцесс(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Начать "+ВернутьЗаголовокКоманды(Команда.Имя)+""" возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессПродолжение", ЭтотОбъект, Команда.Имя);	
		ПоказатьВопрос(, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		Подключаемый_КомандаНачатьБизнесПроцессПродолжение(Неопределено, Команда.Имя)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессПродолжение(Ответ, КомандаИмя) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Ответ <> КодВозвратаДиалога.ОК Тогда 
			Возврат;
		КонецЕсли;	
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПроверитьДубликатБизнесПроцесса(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Уже создан бизнес-процесс.
			|Создать новый?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессЗавершение", ЭтотОбъект, КомандаИмя);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Неопределено, КомандаИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Ответ, КомандаИмя) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	СтруктураОснования = ПолучитьСтруктуруОснованияБизнесПроцесса(КомандаИмя);
	ПараметрыФормы = Новый Структура("Основание",СтруктураОснования);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачу(Команда)
	
	CRM_БизнесПроцессыИЗадачиВызовСервера.Выполнить_Задачу(ЭтотОбъект._ЛичнаяЗадача, Истина);
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Задача выполнена'"),
		ПолучитьНавигационнуюСсылку(ЭтотОбъект._ЛичнаяЗадача),
		Строка(ЭтотОбъект._ЛичнаяЗадача));
		
	Объект.Завершен		= Истина;
	Модифицированность	= Истина;
	
	ЗаполнитьГруппуГиперссылок();
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	Оповестить("ЗадачаВыполнена", Новый Структура("ОбновлятьКалендарь", Параметры.ОбновлятьКалендарь));
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГиперссылкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.Имя = "_ЛичнаяЗадачаСтрокой" Тогда
		ПоказатьЗначение(, ЭтотОбъект._ЛичнаяЗадача);
	ИначеЕсли Элемент.Имя = "_БизнесПроцессСтрокой" Тогда
		ПоказатьЗначение(, ЭтотОбъект._БизнесПроцесс);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОснованияБизнесПроцесса(Знач ИмяКоманды = Неопределено)
	СтруктураРезультат = Новый Структура("Основание,КартаМаршрута,ИспользоватьВИнтересах", Объект.Ссылка, Объект.Проект.CRM_КартаМаршрута, Объект.Проект.CRM_КартаМаршрута.ИспользоватьВИнтересах);
	
	Если ИмяКоманды <> Неопределено Тогда
		Если Найти(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_") > 0 Тогда
			ИдентификаторСсылки = Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_", ""), "_", "-"));
			ТочкаМаршрутаСсылка = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(ИдентификаторСсылки);
			Если ЗначениеЗаполнено(ТочкаМаршрутаСсылка) Тогда
				СтруктураРезультат.Вставить("ТочкаСтарта", ТочкаМаршрутаСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") ИЛИ ТипЗнч(НовыйОбъект) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		ЗаполнитьГруппуГиперссылок();
		НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУчастникиУдалитьСОдинаковымиТелефонами(Команда)
	ТЧ = Объект.Участники;
	Индекс = 0;
	Пока Индекс <= ТЧ.Количество()-1 Цикл
		Значение = ТЧ[Индекс].Телефон;
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		МассивСтрок = ТЧ.НайтиСтроки(Новый Структура("Телефон", Значение));
		Если МассивСтрок.Количество() > 1 Тогда
			Для каждого Строка Из МассивСтрок Цикл
				ТЧ.Удалить(Строка);
				Модифицированность = Истина;
			КонецЦикла;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	ВычислитьОбщееЧислоУчастников();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУчастникиВыделитьСОдинаковымиТелефонами(Команда)
	УстановитьОформлениеСОдинаковымиЗначениямиТЧ();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУчастникиУдалитьБезТелефонов(Команда)
	ТЧ = Объект.Участники;
	Индекс = 0;
	Пока Индекс <= ТЧ.Количество()-1 Цикл
		Если НЕ ЗначениеЗаполнено(ТЧ[Индекс].Телефон) Тогда
			ТЧ.Удалить(Индекс);
			Модифицированность = Истина;
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	ВычислитьОбщееЧислоУчастников();	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ АНКЕТИРОВАНИЯ

&НаСервере
Процедура ЗаполнитьАнкетыУчастников(ПроверятьЗавершенностьОпроса = Истина)
	
	Если ЗначениеЗаполнено(Объект.Опрос) Тогда
		
		ТипыРеспондентовОпроса = ПолучитьТипыРеспондентовОпроса(Объект.Опрос);
		
		Если НЕ ТипыРеспондентовОпроса.Пользователи Тогда
			
			ТаблицаАнкет = ПолучитьПоследниеАнкетыРеспондентов(Объект.Опрос);
				
			Для каждого СтрокаУчастники Из Объект.Участники Цикл
				
				СтрокаАнкетаРеспондента = ТаблицаАнкет.Найти(?(ТипыРеспондентовОпроса.Партнеры, СтрокаУчастники.Партнер, СтрокаУчастники.КонтактноеЛицо), "Респондент");
				
				Если СтрокаАнкетаРеспондента <> Неопределено Тогда
					
					СтрокаУчастники.Анкета = СтрокаАнкетаРеспондента.Анкета;
					
					Если ПроверятьЗавершенностьОпроса И СтрокаАнкетаРеспондента.ОпросЗавершен Тогда
						
						СтрокаУчастники.Обработан = Истина;				
					
					КонецЕсли; 
				
				КонецЕсли;	
			
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры// ЗаполнитьАнкетыУчастников()

&НаКлиенте
Процедура ЗаполнитьАнкетуСтроки(ТекДанные)
	
	Если ЗначениеЗаполнено(Объект.Опрос) Тогда
		
		ТипыРеспондентовОпроса = ПолучитьТипыРеспондентовОпроса(Объект.Опрос);
		
		Если ТипыРеспондентовОпроса.Партнеры Тогда
					
			Если ЗначениеЗаполнено(ТекДанные.Партнер) Тогда
				
				СтруктураАнкеты = ПолучитьАнкетуРеспондента(Объект.Опрос, ТекДанные.Партнер);
				
				Если СтруктураАнкеты.ЕстьАнкета Тогда
					
					ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураАнкеты);
					
				КонецЕсли;
				
			Иначе
				
				ТекДанные.Анкета = ПредопределенноеЗначение("Документ.Анкета.ПустаяСсылка");				
				
			КонецЕсли;	
			
		ИначеЕсли ТипыРеспондентовОпроса.КонтактныеЛица Тогда
			
			Если ЗначениеЗаполнено(ТекДанные.КонтактноеЛицо) Тогда
				
				СтруктураАнкеты = ПолучитьАнкетуРеспондента(Объект.Опрос, ТекДанные.КонтактноеЛицо);
				
				Если СтруктураАнкеты.ЕстьАнкета Тогда
					
					ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураАнкеты);
					
				КонецЕсли;
				
			Иначе
				
				ТекДанные.Анкета = ПредопределенноеЗначение("Документ.Анкета.ПустаяСсылка");				
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАнкетуСтроки()

&НаКлиенте
Процедура УчастникиАнкетаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Анкета) Тогда
		
		// открываем анкету

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ключ",ТекущиеДанные.Анкета);
		СтруктураПараметров.Вставить("ТолькоФормаЗаполнения",Истина);
		
		АнкетаПроведена = ПолучитьЗначениеРеквизита(ТекущиеДанные.Анкета, "Проведен");
		
		Если АнкетаПроведена Тогда
			СтруктураПараметров.Вставить("ТолькоПросмотр",Истина);
		КонецЕсли;

		ОткрытьФорму("Документ.Анкета.ФормаОбъекта",СтруктураПараметров,Элемент);

	Иначе
		
		// создаем анкету
		
		Если НЕ ЗначениеЗаполнено(Объект.Опрос) Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано назначение опроса!'"));
			
			Возврат;			
		
		КонецЕсли; 
		
		Партнер = Элементы.Участники.ТекущиеДанные.Партнер;
		КонтактноеЛицо = Элементы.Участники.ТекущиеДанные.КонтактноеЛицо;
		
		ТипыРеспондентовОпроса = ПолучитьТипыРеспондентовОпроса(Объект.Опрос);
		
		Если ТипыРеспондентовОпроса.КонтактныеЛица Тогда
			
			Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			
				Респондент = КонтактноеЛицо;
				
			Иначе
				
				ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано контактное лицо'"));
				
				Возврат;
			
			КонецЕсли;		
			
		ИначеЕсли ТипыРеспондентовОпроса.Партнеры Тогда 
			
			Если ЗначениеЗаполнено(Партнер) Тогда
				
				Респондент = Партнер;
				
			Иначе	
				
				ПоказатьПредупреждение(, НСтр("ru = 'Не выбран клиент'"));
				
				Возврат;
			
			КонецЕсли;	
			
		Иначе
				
			ПоказатьПредупреждение(, НСтр("ru = 'В телемаркетинге не может использоваться опрос с типом респондентов Пользователи'"));
				
			Возврат;
			
		КонецЕсли;	
		
		СтруктураПараметров = Новый Структура;
		ЗначенияЗаполнения 	= Новый Структура;	
		
		ЗначенияЗаполнения.Вставить("Опрос", Объект.Опрос);
		ЗначенияЗаполнения.Вставить("Респондент", Респондент);
		
		СтруктураПараметров.Вставить("ЗначенияЗаполнения",ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("ТолькоФормаЗаполнения", Истина);
		СтруктураПараметров.Вставить("ОткрытиеИзТелемаркетинга", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УчастникиАнкетаСозданиеЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.Анкета.ФормаОбъекта", СтруктураПараметров,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиАнкетаСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Анкета) Тогда
		
		Возврат;

	Иначе
		
		// создаем анкету
		
		Если НЕ ЗначениеЗаполнено(Объект.Опрос) Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано назначение опроса!'"));
			
			Возврат;			
		
		КонецЕсли; 
		
		Партнер = Элементы.Участники.ТекущиеДанные.Партнер;
		КонтактноеЛицо = Элементы.Участники.ТекущиеДанные.КонтактноеЛицо;
		
		ТипыРеспондентовОпроса = ПолучитьТипыРеспондентовОпроса(Объект.Опрос);
		
		Если ТипыРеспондентовОпроса.КонтактныеЛица Тогда
			
			Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			
				Респондент = КонтактноеЛицо;
				
			Иначе
				
				ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано контактное лицо'"));
				
				Возврат;
			
			КонецЕсли;		
			
		ИначеЕсли ТипыРеспондентовОпроса.Партнеры Тогда 
			
			Если ЗначениеЗаполнено(Партнер) Тогда
				
				Респондент = Партнер;
				
			Иначе	
				
				ПоказатьПредупреждение(, НСтр("ru = 'Не выбран клиент'"));
				
				Возврат;
			
			КонецЕсли;	
			
		Иначе
				
			ПоказатьПредупреждение(, НСтр("ru = 'В телемаркетинге не может использоваться опрос с типом респондентов Пользователи'"));
				
			Возврат;
			
		КонецЕсли;	
		
		СтруктураПараметров = Новый Структура;
		ЗначенияЗаполнения 	= Новый Структура;	
		
		ЗначенияЗаполнения.Вставить("Опрос", Объект.Опрос);
		ЗначенияЗаполнения.Вставить("Респондент", Респондент);
		
		СтруктураПараметров.Вставить("ЗначенияЗаполнения",ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("ТолькоФормаЗаполнения", Истина);
		СтруктураПараметров.Вставить("ОткрытиеИзТелемаркетинга", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УчастникиАнкетаСозданиеЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.Анкета.ФормаОбъекта", СтруктураПараметров,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиАнкетаСозданиеЗавершение(НоваяАнкета, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(НоваяАнкета) Тогда
		Элементы.Участники.ТекущиеДанные.Анкета = НоваяАнкета;
		АнкетаЗавершена = ПолучитьЗначениеРеквизита(НоваяАнкета, "Проведен");
		Элементы.Участники.ТекущиеДанные.Обработан = АнкетаЗавершена;
		Модифицированность = Истина;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СоздатьОпрос(Команда)
	Если ЗначениеЗаполнено(Объект.Опрос) Тогда
	    ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьОпросНачало", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Текущее назначение опроса будет заменено на новое! Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		СоздатьОпросНачало(Неопределено, Неопределено);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОпросНачало(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;			
	КонецЕсли; 
	
	// Заполним массив респондентов.
	
	МассивПартнеров = Новый Массив;
	
	МассивКонтактныхЛиц = Новый Массив;
	
	Для каждого СтрокаУчастники Из Объект.Участники Цикл
		
		Если ЗначениеЗаполнено(СтрокаУчастники.Партнер) Тогда
			
			НайденныйПартнер = МассивПартнеров.Найти(СтрокаУчастники.Партнер);
			
			Если НайденныйПартнер = Неопределено Тогда
				
				МассивПартнеров.Добавить(СтрокаУчастники.Партнер);	
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаУчастники.КонтактноеЛицо) Тогда
			
			НайденноеКонтактноеЛицо = МассивКонтактныхЛиц.Найти(СтрокаУчастники.КонтактноеЛицо);
			
			Если НайденноеКонтактноеЛицо = Неопределено Тогда
		
				МассивКонтактныхЛиц.Добавить(СтрокаУчастники.КонтактноеЛицо);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура("МассивКонтактныхЛиц, МассивПартнеров", МассивКонтактныхЛиц, МассивПартнеров);
	Если МассивКонтактныхЛиц.Количество() > 0 Тогда
		
		// зададим вопрос
		СписокОтветов = Новый СписокЗначений;
		
		СписокОтветов.Добавить("Клиент", НСтр("ru = 'Клиент'"));
		СписокОтветов.Добавить("КонтактноеЛицо", НСтр("ru = 'Контактное лицо'"));
		СписокОтветов.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьОпросПродолжение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Выберите тип респондентов нового опроса:'"), СписокОтветов);
		
	Иначе
		
		СоздатьОпросПродолжение(Неопределено, ДополнительныеПараметры);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОпросПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	Если ДополнительныеПараметры.МассивКонтактныхЛиц.Количество() > 0 Тогда
		
		Если Ответ = "Клиент" Тогда
			
			СтруктураПараметров.Вставить("МассивРеспондентов", ДополнительныеПараметры.МассивПартнеров);
		
		ИначеЕсли Ответ = "КонтактноеЛицо" Тогда
		
			СтруктураПараметров.Вставить("МассивРеспондентов", ДополнительныеПараметры.МассивКонтактныхЛиц);
			
		Иначе
			
			Возврат;
		
		КонецЕсли;	
	
	Иначе
		
		СтруктураПараметров.Вставить("МассивРеспондентов", ДополнительныеПараметры.МассивПартнеров);
	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Объект.Тема) Тогда
	
		СтруктураПараметров.Вставить("Наименование", Объект.Тема);	
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьОпросЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.НазначениеОпросов.ФормаОбъекта", СтруктураПараметров, ,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОпросЗавершение(НовыйОпрос, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(НовыйОпрос) Тогда
		Объект.Опрос = НовыйОпрос;
		Элементы.УчастникиАнкета.Видимость = ЗначениеЗаполнено(Объект.Опрос);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОпросНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТипРеспондентаПартнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	ТипРеспондентаКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	
	ОтборПоТипуРеспондента = Новый СписокЗначений;
	ОтборПоТипуРеспондента.Добавить(ТипРеспондентаПартнер, ТипРеспондентаПартнер);
	ОтборПоТипуРеспондента.Добавить(ТипРеспондентаКонтактноеЛицо, ТипРеспондентаКонтактноеЛицо);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.Независимый);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормыВыбора.Вставить("Отбор",              Новый Структура("ТипРеспондентов", ОтборПоТипуРеспондента));
	
	ОткрытьФорму("Документ.НазначениеОпросов.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьРеспонденты(НазначениеОпросаСсылка)

	Возврат НазначениеОпросаСсылка.Респонденты.Количество() > 0; 

КонецФункции // ЕстьРеспонденты()

&НаСервереБезКонтекста
Функция ПолучитьПоследниеАнкетыРеспондентов(Опрос, Респонденты = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст ="ВЫБРАТЬ
	              |	МАКСИМУМ(Анкета.Дата) КАК Дата,
	              |	Анкета.Респондент
	              |ПОМЕСТИТЬ ДатыПоследнихАнкет
	              |ИЗ
	              |	Документ.Анкета КАК Анкета
	              |ГДЕ
	              |	Анкета.Опрос = &Опрос
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	Анкета.Респондент
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	Анкета.Дата КАК Дата,
	              |	Анкета.Респондент,
	              |	Анкета.Ссылка КАК Анкета,
	              |	Анкета.Проведен КАК ОпросЗавершен
	              |ИЗ
	              |	Документ.Анкета КАК Анкета
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыПоследнихАнкет КАК ДатыПоследнихАнкет
	              |		ПО Анкета.Дата = ДатыПоследнихАнкет.Дата
	              |			И Анкета.Респондент = ДатыПоследнихАнкет.Респондент
	              |ГДЕ
	              |	Анкета.Опрос = &Опрос";
				  
	Запрос.УстановитьПараметр("Опрос", Опрос);
	
	Если ЗначениеЗаполнено(Респонденты) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Анкета.Опрос = &Опрос", "Анкета.Опрос = &Опрос И Анкета.Респондент В(&Респонденты)");  
		
		Запрос.УстановитьПараметр("Респонденты", Респонденты);
		
	КонецЕсли;
	
	ТаблицаАнкет = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаАнкет;
	
КонецФункции // ПолучитьПоследниеАнкетыРеспондентов()

&НаСервереБезКонтекста
// 
//
Функция ПолучитьТипыРеспондентовОпроса(Опрос)
	
	СтруктураТипов = Новый Структура;
	
	СтруктураТипов.Вставить("Партнеры", ТипЗнч(Опрос.ТипРеспондентов) = Тип("СправочникСсылка.Партнеры"));
	СтруктураТипов.Вставить("КонтактныеЛица", ТипЗнч(Опрос.ТипРеспондентов) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров"));
	СтруктураТипов.Вставить("Пользователи", ТипЗнч(Опрос.ТипРеспондентов) = Тип("СправочникСсылка.Пользователи"));	

	Возврат СтруктураТипов;

КонецФункции // ПолучитьТипыРеспондентовОпроса()

&НаСервереБезКонтекста
Функция ПолучитьАнкетуРеспондента(Опрос, Респондент)
	
	МассивРеспондентов = Новый Массив;
	
	МассивРеспондентов.Добавить(Респондент);
	
	ТаблицаАнкет = ПолучитьПоследниеАнкетыРеспондентов(Опрос, МассивРеспондентов);
	
	СтруктураАнкеты = Новый Структура("ЕстьАнкета");
	
	Если ТаблицаАнкет.Количество() > 0 Тогда
		
		СтруктураАнкеты.ЕстьАнкета = Истина;
		
		СтруктураАнкеты.Вставить("Анкета", ТаблицаАнкет[0].Анкета);
		
		СтруктураАнкеты.Вставить("Обработан", ТаблицаАнкет[0].ОпросЗавершен);
	
	Иначе
	
		СтруктураАнкеты.ЕстьАнкета = Ложь;		
	
	КонецЕсли;	
	
	Возврат	СтруктураАнкеты;
	
КонецФункции// ПолучитьАнкетуРеспондента()	

&НаСервере
Процедура ЗаполнитьУчастниковПоОпросу(ПереноситьВсех)
	
	Если НЕ ЗначениеЗаполнено(Объект.Опрос) Тогда
		
		Возврат;
	
	КонецЕсли;
	
	ТипыРеспондентовОпроса = ПолучитьТипыРеспондентовОпроса(Объект.Опрос);
	
	Если ТипыРеспондентовОпроса.Пользователи Тогда
		
		Возврат;
	
	КонецЕсли;
	
	ТаблицаАнкет = ПолучитьПоследниеАнкетыРеспондентов(Объект.Опрос);
	
	Респонденты = Объект.Опрос.Респонденты;
	
	Для Каждого РеспондентыСтрока Из Респонденты Цикл
		
		СтрокаАнкетаРеспондента = ТаблицаАнкет.Найти(РеспондентыСтрока.Респондент, "Респондент");
		
		// Проверим, опрошен ли респондент.
		
		РеспондентОпрошен = (НЕ СтрокаАнкетаРеспондента = Неопределено И СтрокаАнкетаРеспондента.ОпросЗавершен);
		
		Если ПереноситьВсех Или НЕ РеспондентОпрошен Тогда
			
			Если ТипыРеспондентовОпроса.Партнеры Тогда
				
				МассивСтрокРеспондента = Объект.Участники.НайтиСтроки(Новый Структура("Партнер", РеспондентыСтрока.Респондент));
				
				Если МассивСтрокРеспондента.Количество() > 0 Тогда
					
					Продолжить;				
					
				КонецЕсли;	
				
				СтрокаРеспондента = Объект.Участники.Добавить();
				
				СтрокаРеспондента.Партнер = РеспондентыСтрока.Респондент;
				
				СтрокаРеспондента.КонтактноеЛицо = РеспондентыСтрока.Респондент.CRM_ОсновноеКонтактноеЛицо;
				
			ИначеЕсли ТипыРеспондентовОпроса.КонтактныеЛица Тогда
				
				МассивСтрокРеспондента = Объект.Участники.НайтиСтроки(Новый Структура("КонтактноеЛицо", РеспондентыСтрока.Респондент));
				
				Если МассивСтрокРеспондента.Количество() > 0 Тогда
					
					Продолжить;				
					
				КонецЕсли;	
				
				СтрокаРеспондента = Объект.Участники.Добавить();
				
				СтрокаРеспондента.Партнер = РеспондентыСтрока.Респондент.Владелец;
				
				СтрокаРеспондента.КонтактноеЛицо = РеспондентыСтрока.Респондент;
				
			КонецЕсли;
			
			СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо", СтрокаРеспондента.Партнер, СтрокаРеспондента.КонтактноеЛицо));
			
			Если СписокТелефонов.Количество() > 0 Тогда
				
				ТелефонныйНомер = СписокТелефонов[0].Значение;
				
				Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
					
					СтрокаРеспондента.Телефон = ТелефонныйНомер.Представление
					
				КонецЕсли;
				
			КонецЕсли;	
		
		КонецЕсли;
		
	КонецЦикла;
	
	// заполним анкеты
	
	Для каждого СтрокаУчастники Из Объект.Участники Цикл
		
		СтрокаАнкетаРеспондента = ТаблицаАнкет.Найти(?(ТипыРеспондентовОпроса.Партнеры, СтрокаУчастники.Партнер, СтрокаУчастники.КонтактноеЛицо), "Респондент");
		
		Если СтрокаАнкетаРеспондента <> Неопределено Тогда
			
			СтрокаУчастники.Анкета = СтрокаАнкетаРеспондента.Анкета;
			
			Если СтрокаАнкетаРеспондента.ОпросЗавершен Тогда
				
				СтрокаУчастники.Обработан = Истина;				
			
			КонецЕсли; 
		
		КонецЕсли;	
	
	КонецЦикла;	
	
	ВычислитьОбщееЧислоУчастников();
	
КонецПроцедуры// ЗаполнитьУчастниковПоОпросу() 

&НаКлиенте
Процедура ОпросПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Опрос) Тогда
		
		Если ЕстьРеспонденты(Объект.Опрос) Тогда
			
			СписокКнопокОтветов = Новый СписокЗначений;
			СписокКнопокОтветов.Добавить("ПеренестиНеопрошенных", "Перенести  неопрошенных");
			СписокКнопокОтветов.Добавить("ПеренестиВсех", "Перенести всех");
			СписокКнопокОтветов.Добавить("Отмена", "Отмена");
			
			ОписаниеОповещения = Новый  ОписаниеОповещения("ОпросПриИзмененииЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Перенести список анкетируемых из Опроса в состав участников?'"), СписокКнопокОтветов, ,"ПеренестиНеопрошенных");
			Возврат;
		КонецЕсли;	
	
	КонецЕсли;	
	
	Элементы.УчастникиАнкета.Видимость = ЗначениеЗаполнено(Объект.Опрос);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпросПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Не Ответ = "Отмена" Тогда
			
		ПереноситьВсех = (Ответ = "ПеренестиВсех");
		ЗаполнитьУчастниковПоОпросу(ПереноситьВсех);
				
	КонецЕсли; 
	
	Элементы.УчастникиАнкета.Видимость = ЗначениеЗаполнено(Объект.Опрос);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборКлиентов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", 		  Истина);
	ПараметрыФормы.Вставить("ПрограммноеОткрытие",Истина);		
	
	ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элементы.Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборКонтактныхЛиц(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", 		  Истина);
	ПараметрыФормы.Вставить("ПрограммноеОткрытие",Истина);		
	
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, Элементы.Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		
		ВыбранноеЗначениеПартнер		= (ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Партнеры"));
		ВыбранноеЗначениеКонтактноеЛицо = (ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров"));
		
		Если ВыбранноеЗначениеПартнер Или ВыбранноеЗначениеКонтактноеЛицо Тогда		
			
			// Не должно быть дублирования.
			
			СтруктураПоиска = Новый Структура();
			
			Если ВыбранноеЗначениеПартнер Тогда
				
				НовыйПартнер = ЭлементМассива;
				
				НовоеКонтактноеЛицо = ВернутьКЛПартнера(НовыйПартнер);
				
				СтруктураПоиска.Вставить("КонтактноеЛицо", НовоеКонтактноеЛицо);
				СтруктураПоиска.Вставить("Партнер", НовыйПартнер);
				
			Иначе
				
				НовоеКонтактноеЛицо = ЭлементМассива;
				
				НовыйПартнер = ПолучитьЗначениеРеквизита(ЭлементМассива, "Владелец");
				
				СтруктураПоиска.Вставить("КонтактноеЛицо", НовоеКонтактноеЛицо);
				
			КонецЕсли; 
			
			СтрокиУчастники = Объект.Участники.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиУчастники.Количество() = 0 Тогда
				
				НоваяСтрокаУчастники = Объект.Участники.Добавить();
				
				НоваяСтрокаУчастники.Партнер = НовыйПартнер;
				
				НоваяСтрокаУчастники.КонтактноеЛицо = НовоеКонтактноеЛицо;
				
				СписокТелефонов = СформироватьСписокТелефонов(Новый Структура("Партнер, КонтактноеЛицо", НовыйПартнер, НовоеКонтактноеЛицо));
				Если СписокТелефонов.Количество() > 0 Тогда
					ТелефонныйНомер = СписокТелефонов[0].Значение;
					Если НЕ ТелефонныйНомер.Количество() = 0 Тогда
						НоваяСтрокаУчастники.Телефон = ТелефонныйНомер.Представление
					Иначе
						НоваяСтрокаУчастники.Телефон = "";
					КонецЕсли;
				Иначе
					НоваяСтрокаУчастники.Телефон = "";
				КонецЕсли;
				ЗаполнитьАнкетуСтроки(НоваяСтрокаУчастники);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВычислитьОбщееЧислоУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда
		Отказ = Истина;
		НоваяСтрока = Объект.Участники.Добавить();
		НоваяСтрока.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Элементы.Участники.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.УчастникиПартнер.ВыбиратьТип = Ложь;
		Модифицированность = Истина;
	КонецЕсли;	
	ВычислитьОбщееЧислоУчастников();
КонецПроцедуры   

&НаКлиенте
Процедура УчастникиПослеУдаления(Элемент)
	ВычислитьОбщееЧислоУчастников();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеАнкет(Команда)	
	
	ЗаполнитьАнкетыУчастников();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНазначениюОпроса(Команда)
	
	Если ЗначениеЗаполнено(Объект.Опрос) Тогда
		
		Если ЕстьРеспонденты(Объект.Опрос) Тогда
			
			СписокКнопокОтветов = Новый СписокЗначений;
			СписокКнопокОтветов.Добавить("ПеренестиНеопрошенных", "Перенести  неопрошенных");
			СписокКнопокОтветов.Добавить("ПеренестиВсех", "Перенести всех");
			СписокКнопокОтветов.Добавить("Отмена", "Отмена");
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоНазначениюОпросаЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Перенести список анкетируемых из Опроса в состав участников?'"), СписокКнопокОтветов, ,"ПеренестиНеопрошенных");
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано назначение опроса!'"));
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНазначениюОпросаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Не Ответ = "Отмена" Тогда
		ПереноситьВсех = (Ответ = "ПеренестиВсех");
		ЗаполнитьУчастниковПоОпросу(ПереноситьВсех);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВложениями_Телемаркетинг

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Нет вложений...'");
		Возврат;
	КонецЕсли;		
	
	ВложенияПредставление = "";
	ВложенияТелемаркетинга = ПолучитьВложенияТелемаркетинга();
	Для Каждого ЭлементТаблицы Из ВложенияТелемаркетинга Цикл
		РазмерВложения = Цел(ЭлементТаблицы.Размер/1024);
		РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(ЭлементТаблицы.Размер) + " байт");		
		ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + " (" + РазмерСтрокой + ")";
	КонецЦикла;
	Если ПустаяСтрока(ВложенияПредставление) Тогда
		ВложенияПредставление = НСтр("ru='Нет вложений...'");				
	Иначе
		ВложенияПредставление = Сред(ВложенияПредставление, 3);
	КонецЕсли;	
			
КонецПроцедуры // СформироватьПредставлениеВложений()			 

&НаСервере
Функция ПолучитьВложенияТелемаркетинга()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТелемаркетингПрисоединенныеФайлы.Ссылка,
	|	CRM_ТелемаркетингПрисоединенныеФайлы.Наименование КАК ИмяФайла,
	|	CRM_ТелемаркетингПрисоединенныеФайлы.Размер
	|ИЗ
	|	Справочник.CRM_ТелемаркетингПрисоединенныеФайлы КАК CRM_ТелемаркетингПрисоединенныеФайлы
	|ГДЕ
	|	CRM_ТелемаркетингПрисоединенныеФайлы.ВладелецФайла = &Телемаркетинг
	|	И НЕ CRM_ТелемаркетингПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Телемаркетинг", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru = 'Телемаркетинг не записан. Добавление файлов невозможно!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеПрисоединенныхФайлов", ЭтотОбъект);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтотОбъект,
	             Ложь,
	             Неопределено, ,ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеПрисоединенныхФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	СформироватьПредставлениеВложений();
КонецПроцедуры
#КонецОбласти

#Область Закладка_Текущий_Абонент

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка()
	Возврат Новый ОписаниеТипов("СправочникСсылка.Партнеры");
КонецФункции

&НаСервере
// Процедура заполняет данные закладки, 
// исходя из текущего состояния документа (открытие, переход к следующему/предыдущему элементу и пр.).
//
Процедура ИнициализироватьЗакладкуТекущийАбонент(ПриОткрытии = Ложь, СледующийКлиент = Ложь, ПредыдущийКлиент = Ложь)
	
	РассчитатьКоличествоКлиентовПоРежимамПоказа();
	НерабочееВремя = Ложь;
	
	Если Объект.Участники.Количество() = 0 Тогда
		ОчиститьЗакладкуТекущийАбонент();					
		НетУчастников = Истина;
		Возврат;
	КонецЕсли;
		
	Если Объект.Участники.Количество() = 1 Тогда
		Элементы.ТекАбонентВперёд.Доступность	= Ложь;
		Элементы.ТекАбонентНазад.Доступность	= Ложь;	
	Иначе
		Элементы.ТекАбонентВперёд.Доступность	= Истина;
		Элементы.ТекАбонентНазад.Доступность	= Истина;	
	КонецЕсли;		
	
	КнопкаНазад = Неопределено;
	КнопкаВперёд = Неопределено;
	
	Если Элементы.ДекорацияНетЭлементов.Видимость Тогда
		Элементы.ДекорацияНетЭлементов.Видимость 		= Ложь;	
		Элементы.ТекМаркетинговоеМероприятие.Видимость 	= Истина;
		Элементы.ТекАбонентПозвонить.Доступность		= Истина;
		Элементы.ТекАбонентОтправитьСМС.Доступность		= Истина;	
		Элементы.ТекСценарий.Видимость					= Истина;
		Элементы.ПустойСценарий.Видимость				= Ложь;		
		Элементы.ТекКлиент.Видимость					= Истина;
		Элементы.ТекКонтактноеЛицо.Видимость			= Истина;		
		Элементы.ГруппаАнкета.Видимость					= Истина;
		Элементы.ГруппаИнтерес.Видимость				= Истина;		
	КонецЕсли;
	
	Если ТекРежимПоказа = "НеЗвонили" Тогда
		Элементы.ТекНеДозвонились.Видимость = Истина;
	Иначе
		Элементы.ТекНеДозвонились.Видимость = Ложь;
	КонецЕсли;		
	
	// Это открытие формы, просто показываем первого абонента в ТЧ "Участники".
	Если ПриОткрытии Тогда
		ТекПозицияКурсора = 0;
		Если Не ЗначениеЗаполнено(ТекРежимПоказа) Тогда
			Элементы.ТекАбонентНазад.Доступность = Ложь;
		ИначеЕсли ТекРежимПоказа = "НеДозвонились" Тогда			
			ТекСтрока = Объект.Участники[ТекПозицияКурсора];
			Пока НЕ ТекСтрока.НеДозвонились Цикл
				ТекПозицияКурсора	= ТекПозицияКурсора  + 1;
				Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
					// Значит таких строк не нашли, нужно залочить кнопки перехода "назад" и "вперёд" 
					// и открываем первого клиента из ТЧ "Участники".
					ТекПозицияКурсора = 0;
					Элементы.ТекАбонентВперёд.Доступность = Ложь;
					Элементы.ТекАбонентНазад.Доступность  = Ложь;	
					ОчиститьЗакладкуТекущийАбонент();					
					Возврат;
				КонецЕсли;															
				ТекСтрока			= Объект.Участники[ТекПозицияКурсора];					
			КонецЦикла;				
		ИначеЕсли ТекРежимПоказа = "Обработаны" Тогда
			ТекСтрока = Объект.Участники[ТекПозицияКурсора];
			Пока НЕ ТекСтрока.Обработан Цикл
				ТекПозицияКурсора	= ТекПозицияКурсора  + 1;				
				Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
					// Значит таких строк не нашли, нужно залочить кнопки перехода "назад" и "вперёд" 
					// и открываем первого клиента из ТЧ "Участники".
					ТекПозицияКурсора = 0;
					Элементы.ТекАбонентВперёд.Доступность = Ложь;
					Элементы.ТекАбонентНазад.Доступность  = Ложь;	
					ОчиститьЗакладкуТекущийАбонент();										
					Возврат;
				КонецЕсли;																			
				ТекСтрока			= Объект.Участники[ТекПозицияКурсора];					
			КонецЦикла;							
		ИначеЕсли ТекРежимПоказа = "НеЗвонили" Тогда			
			ТекСтрока = Объект.Участники[ТекПозицияКурсора];
			Пока ТекСтрока.НеДозвонились ИЛИ ТекСтрока.Обработан Цикл
				ТекПозицияКурсора	= ТекПозицияКурсора  + 1;
				Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
					// Значит таких строк не нашли, нужно залочить кнопки перехода "назад" и "вперёд" 
					// и открываем первого клиента из ТЧ "Участники".
					ТекПозицияКурсора = 0;
					Элементы.ТекАбонентВперёд.Доступность = Ложь;
					Элементы.ТекАбонентНазад.Доступность  = Ложь;	
					ОчиститьЗакладкуТекущийАбонент();										
					Возврат;					
				КонецЕсли;																			
				ТекСтрока			= Объект.Участники[ТекПозицияКурсора];					
			КонецЦикла;										
		КонецЕсли;
	//	Обрабатываем нажатие кнопки "Вперёд".
	ИначеЕсли СледующийКлиент Тогда
		Если Не ЗначениеЗаполнено(ТекРежимПоказа) Тогда
			ТекПозицияКурсора = ТекПозицияКурсора  + 1;
			Если Объект.Участники.Количество() - 1 = ТекПозицияКурсора Тогда
				Элементы.ТекАбонентВперёд.Доступность = Ложь;
			КонецЕсли;				
		Иначе
			ПозицияКурсораКэш = ТекПозицияКурсора;
			ТекПозицияКурсора	= ТекПозицияКурсора  + 1;
			Если ТекРежимПоказа = "НеДозвонились" Тогда
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока НЕ ТекСтрока.НеДозвонились Цикл
					ТекПозицияКурсора	= ТекПозицияКурсора  + 1;					
					Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
						ТекПозицияКурсора = ПозицияКурсораКэш + 1; 						
						КнопкаВперёд = Ложь;						
						ОчиститьЗакладкуТекущийАбонент();											
						Прервать;
					КонецЕсли;																
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];					
				КонецЦикла;	
			ИначеЕсли ТекРежимПоказа = "Обработаны" Тогда
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока НЕ ТекСтрока.Обработан Цикл
					ТекПозицияКурсора	= ТекПозицияКурсора  + 1;					
					Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
						ТекПозицияКурсора = ПозицияКурсораКэш + 1; 						
						КнопкаВперёд = Ложь;												
						ОчиститьЗакладкуТекущийАбонент();											
						Прервать;
						Возврат;
					КонецЕсли;											
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];					
				КонецЦикла;	
			ИначеЕсли ТекРежимПоказа = "НеЗвонили" Тогда
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока ТекСтрока.НеДозвонились ИЛИ ТекСтрока.Обработан Цикл
					ТекПозицияКурсора	= ТекПозицияКурсора  + 1;					
					Если ТекПозицияКурсора >= Объект.Участники.Количество() Тогда 
						ТекПозицияКурсора = ПозицияКурсораКэш + 1; 		
						КнопкаВперёд = Ложь;												
						ОчиститьЗакладкуТекущийАбонент();											
						Прервать;
					КонецЕсли;																
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];					
				КонецЦикла;									
			КонецЕсли;				
		КонецЕсли;	
	//	Обрабатываем нажатие кнопки "Назад".
	ИначеЕсли ПредыдущийКлиент Тогда		
		Если Не ЗначениеЗаполнено(ТекРежимПоказа) Тогда
			ТекПозицияКурсора = ТекПозицияКурсора  - 1;
			Если ТекПозицияКурсора = 0 Тогда
				Элементы.ТекАбонентНазад.Доступность = Ложь;
			КонецЕсли;	
		Иначе
			ПозицияКурсораКэш = ТекПозицияКурсора;			
			ТекПозицияКурсора	= ТекПозицияКурсора  - 1;
			Если ТекРежимПоказа = "НеДозвонились" Тогда
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока НЕ ТекСтрока.НеДозвонились Цикл
					ТекПозицияКурсора = ТекПозицияКурсора  - 1;
					Если ТекПозицияКурсора = -1 Тогда
						ТекПозицияКурсора = ПозицияКурсораКэш - 1; 		
						КнопкаНазад = Ложь;						
						ОчиститьЗакладкуТекущийАбонент();											
						Прервать;
					КонецЕсли;																
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];					
				КонецЦикла;	
			ИначеЕсли ТекРежимПоказа = "Обработаны" Тогда
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока НЕ ТекСтрока.Обработан Цикл
					ТекПозицияКурсора = ТекПозицияКурсора  - 1;
					Если ТекПозицияКурсора = -1 Тогда
						ТекПозицияКурсора = ПозицияКурсораКэш - 1; 						
						КнопкаНазад = Ложь;						
						ОчиститьЗакладкуТекущийАбонент();											
						Прервать;
					КонецЕсли;											
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];					
				КонецЦикла;	
			ИначеЕсли ТекРежимПоказа = "НеЗвонили"  Тогда
				ТекСтрока			=  Объект.Участники[ТекПозицияКурсора];
				Пока ТекСтрока.НеДозвонились ИЛИ ТекСтрока.Обработан Цикл
					ТекПозицияКурсора = ТекПозицияКурсора  - 1;
					Если ТекПозицияКурсора = -1 Тогда
						ТекПозицияКурсора = ПозицияКурсораКэш - 1; 						
						КнопкаНазад = Ложь;
						ОчиститьЗакладкуТекущийАбонент();											
						Прервать;
					КонецЕсли;																
					ТекСтрока			= Объект.Участники[ТекПозицияКурсора];					
				КонецЦикла;									
			КонецЕсли;							
		КонецЕсли;				
	КонецЕсли;
	
	Если ТекПозицияКурсора > 1 Тогда
		Если НЕ Элементы.ТекАбонентНазад.Доступность Тогда
			Элементы.ТекАбонентНазад.Доступность = Истина;
		КонецЕсли;	
	Иначе
		Элементы.ТекАбонентНазад.Доступность = Ложь;
	КонецЕсли;
	
	Если ТекПозицияКурсора < Объект.Участники.Количество() - 1 Тогда
		Если НЕ Элементы.ТекАбонентВперёд.Доступность Тогда
			Элементы.ТекАбонентВперёд.Доступность = Истина;
		КонецЕсли;	
	Иначе
		Элементы.ТекАбонентВперёд.Доступность = Ложь;
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(РежимДляБлокированияКнопок) И СтрНайти(РежимДляБлокированияКнопок, ТекРежимПоказа) > 0 Тогда
		Элементы.ТекАбонентНазад.Доступность = Ложь;
		Элементы.ТекАбонентВперёд.Доступность = Ложь;		
	КонецЕсли;			
	
	Если НЕ (КнопкаНазад = Неопределено) И НЕ КнопкаНазад Тогда
		Элементы.ТекАбонентНазад.Доступность = Ложь;
		Возврат;
	КонецЕсли;	
	
	Если НЕ (КнопкаВперёд = Неопределено) И НЕ КнопкаВперёд Тогда
		Элементы.ТекАбонентВперёд.Доступность = Ложь;
		Возврат;
	КонецЕсли;			
	
	ТекСтрока = Объект.Участники[ТекПозицияКурсора];
	Если ТекРежимПоказа = "НеЗвонили" Тогда
		ТекНеДозвонились = ТекСтрока.НеДозвонились;
	Иначе
		ТекНеДозвонились = Ложь;
	КонецЕсли;		
	Если ЗначениеЗаполнено(ТекСтрока.Партнер) Тогда
		ТекКлиент = ТекСтрока.Партнер;
		ЗаполнитьПанельИнформацииПоДаннымПартнера(ТекКлиент);
		Если ЗначениеЗаполнено(ТекСтрока.КонтактноеЛицо) Тогда
			ТекКонтактноеЛицо = ТекСтрока.КонтактноеЛицо;
		Иначе
			ТекКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");			
		КонецЕсли;	
		ТекПотенциальныйКлиент = "";				
	Иначе 
		ТекКлиент = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		ТекКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
		ТекПотенциальныйКлиент = ТекСтрока.ПартнерСтрокой;				
		ТекСодержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
	КонецЕсли;				
	ТекТелефон = ТекСтрока.Телефон;
	Если ЗначениеЗаполнено(ТекТелефон) Тогда
		Элементы.ТекАбонентОтправитьСМС.Доступность = Истина;
		Элементы.ТекАбонентПозвонить.Доступность	= Истина;		
	Иначе
		Элементы.ТекАбонентОтправитьСМС.Доступность = Ложь;
		Элементы.ТекАбонентПозвонить.Доступность	= Ложь;				
		ТекТелефон									= Нстр("ru = 'Нет телефона'");
	КонецЕсли;		
	ТекМаркетинговоеМероприятие = Объект.МаркетинговоеМероприятие;
	Если ЗначениеЗаполнено(ТекСтрока.Анкета)	 Тогда
		ТекАнкета = ТекСтрока.Анкета;
		Элементы.ГруппаДекорациияАнкета.Видимость	= Ложь;
		Элементы.ТекАнкета.Видимость				= Истина;
	Иначе
		Элементы.ГруппаДекорациияАнкета.Видимость	= ЗначениеЗаполнено(Объект.Опрос);
		Элементы.ТекАнкета.Видимость				= Ложь;
	КонецЕсли;		
	Если ЗначениеЗаполнено(ТекСтрока.Интерес) Тогда
		ТекИнтерес = ТекСтрока.Интерес;
		Элементы.ГруппаДекорацияИнтерес.Видимость	= Ложь;
		Элементы.ТекИнтерес.Видимость    			= Истина;
	Иначе
		Элементы.ГруппаДекорацияИнтерес.Видимость 	= Истина;
		Элементы.ТекИнтерес.Видимость    			= Ложь;
		СформироватьДанныеПоКлиенту();
	КонецЕсли;	
	
	Если ТипЗнч(ТекКлиент) = Тип("СправочникСсылка.Партнеры") Тогда
		СформироватьСмещениеВремениТекущегоАбонента(ТекКлиент.БизнесРегион, Объект.Подразделение.CRM_Офис);
	Иначе
		Элементы.ДекорацияСмещениеВремени.ЦветТекста = ЦветаСтиля.CRM_ИнфНадпись;		
		Элементы.ДекорацияСмещениеВремени.Видимость = Ложь;
	КонецЕсли;		
	
	Если Элементы.ПанельТекАбонент.ТекущаяСтраница = Элементы.СтраницаПанельИнтересКонтакты Тогда
		СформироватьДанныеПоКлиенту();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекКлиент) Тогда
		Элементы.СтраницаПанельИнтересКонтакты.Доступность = Ложь;	
		Элементы.ПанельТекАбонент.ТекущаяСтраница = Элементы.СтраницаПанельСценарий;
		Элементы.ДекорацияСоздатьИнтерес.Заголовок = Нстр("ru = 'Создать интерес'");
		Элементы.ДекорацияСоздатьИнтерес.УстановитьДействие("Нажатие", "ДекорацияСоздатьИнтересНажатие");		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(ПриОткрытии = Ложь, СледующийКлиент = Ложь, ПредыдущийКлиент = Ложь)
	
	ИнициализироватьЗакладкуТекущийАбонент(ПриОткрытии, СледующийКлиент, ПредыдущийКлиент);
	
	Если НЕ ПриОткрытии Тогда
		ЗакладкаК = СценарийДокумент.ПолучитьЗакладкуКонца();
		ЗакладкаН = СценарийДокумент.ПолучитьЗакладкуПоПозиции(СценарийДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаК)-1);
		Элементы.ТекСценарий.УстановитьГраницыВыделения(ЗакладкаН, ЗакладкаК);	
		Закладка = СценарийДокумент.ПолучитьЗакладкуНачала();
		Элементы.ТекСценарий.УстановитьГраницыВыделения(Закладка, Закладка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельИнформацииПоДаннымПартнера(Контакт)
	
	ТекСодержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
	Если Контакт = Неопределено Тогда Возврат КонецЕсли;
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(Контакт, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
		Если Содержание <> ТекСодержание Тогда
			ТекСодержание = Содержание;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СформироватьСмещениеВремениТекущегоАбонента(БизнесРегион, Офис)
	Если НЕ ЗначениеЗаполнено(БизнесРегион) ИЛИ НЕ ЗначениеЗаполнено(Офис) Тогда
		Элементы.ДекорацияСмещениеВремени.ЦветТекста = ЦветаСтиля.CRM_ИнфНадпись;		
		Элементы.ДекорацияСмещениеВремени.Видимость = Ложь;
	Иначе
		ВремяПоБП		= БизнесРегион.CRM_ВремяПоГринвичу_GMT;
		ВремяПоОфису	= Офис.CRM_ВремяПоГринвичу_GMT;
		Если ВремяПоБП >= 0 И ВремяПоОфису >= 0 Тогда 
			Если ВремяПоБП >= ВремяПоОфису Тогда 
				СмещениеВремени = ВремяПоБП	- ВремяПоОфису;			
			Иначе			
				СмещениеВремени = -(ВремяПоОфису - ВремяПоБП);			
			КонецЕсли;
		ИначеЕсли ВремяПоБП >= 0 И ВремяПоОфису < 0 Тогда
			СмещениеВремени = -(ВремяПоОфису - ВремяПоБП);			
		ИначеЕсли ВремяПоБП < 0 И ВремяПоОфису >= 0 Тогда
			СмещениеВремени = ВремяПоБП	- ВремяПоОфису;			
		ИначеЕсли ВремяПоБП < 0 И ВремяПоОфису < 0 Тогда 			
			Если ВремяПоБП >= ВремяПоОфису Тогда 
				СмещениеВремени = -(ВремяПоОфису - ВремяПоБП);			
			Иначе			
				СмещениеВремени = ВремяПоОфису - ВремяПоБП;			
			КонецЕсли;
		КонецЕсли;	
		Элементы.ДекорацияСмещениеВремени.Видимость = Истина;
		
		ТекущееВремяКлиента	= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса() + СмещениеВремени * 60 * 60;
		НачалоДняКлиента 	= НачалоДня(ТекущееВремяКлиента) + 9 * 60 * 60;
		КонецДняКлиента		= НачалоДня(ТекущееВремяКлиента) + 19 * 60 * 60;
		Если ТекущееВремяКлиента >= НачалоДняКлиента И ТекущееВремяКлиента <= КонецДняКлиента Тогда
			Элементы.ДекорацияСмещениеВремени.ЦветТекста = ЦветаСтиля.CRM_ИнфНадпись;
		Иначе
			Элементы.ДекорацияСмещениеВремени.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
		КонецЕсли;
		
		Если Час(ТекущееВремяКлиента) < 9 И Час(ТекущееВремяКлиента) > 5 Тогда
			ДобавочныйТекст = Нстр("ru = ' (утро)'");
			НерабочееВремя = Истина;
		ИначеЕсли Час(ТекущееВремяКлиента) > 19 И Час(ТекущееВремяКлиента) <= 23 Тогда
			ДобавочныйТекст = Нстр("ru = ' (вечер)'");			
			НерабочееВремя = Истина;
		ИначеЕсли Час(ТекущееВремяКлиента) >= 0 И Час(ТекущееВремяКлиента) <= 5 Тогда
			ДобавочныйТекст = Нстр("ru = ' (ночь)'");			
			НерабочееВремя = Истина
		Иначе
			ДобавочныйТекст = "";
		КонецЕсли;			
				
		Элементы.ДекорацияСмещениеВремени.Заголовок = Нстр("ru = 'У клиента сейчас: '") + Формат(ТекущееВремяКлиента, "ДФ = Ч:мм") + ДобавочныйТекст;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ТекАбонентПозвонить(Команда)
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
		Возврат;
	КонецЕсли;		
	СтруктураДанных = Новый Структура("СМС, Звонок", Ложь, Истина);
	Если НерабочееВремя Тогда
		// значит попытка создания документа осуществляется в нерабочее время
		ТекстВопроса = Нстр("ru = 'У клиента сейчас нерабочее время, вы уверены?'");
		НовоеОповещение = Новый ОписаниеОповещения("ПослеВопросаОРабочемВремени", ЭтотОбъект, СтруктураДанных);
		ПоказатьВопрос(НовоеОповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена); 
		Возврат;
	КонецЕсли;	
	ТекущийАбонентОтправитьСМСИлиПозвонить(СтруктураДанных);	
КонецПроцедуры

&НаКлиенте
Процедура ТекАбонентОтправитьСМС(Команда)
	СтруктураДанных = Новый Структура("СМС, Звонок", Истина, Ложь);
	Если НерабочееВремя Тогда
		// значит попытка создания документа осуществляется в нерабочее время
		ТекстВопроса = Нстр("ru = 'У клиента сейчас нерабочее время, вы уверены?'");
		НовоеОповещение = Новый ОписаниеОповещения("ПослеВопросаОРабочемВремени", ЭтотОбъект, СтруктураДанных);
		ПоказатьВопрос(НовоеОповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена); 
		Возврат;
	КонецЕсли;	
	ТекущийАбонентОтправитьСМСИлиПозвонить(СтруктураДанных);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОРабочемВремени(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТекущийАбонентОтправитьСМСИлиПозвонить(ДополнительныеПараметры);
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ТекущийАбонентОтправитьСМСИлиПозвонить(СтруктураКоманды)
	
	Если СтруктураКоманды.СМС Тогда
		Если CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
			Структура = Новый Структура();
			Если ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
				Структура.Вставить("Ссылка", ТекКонтактноеЛицо);
			Иначе
				Структура.Вставить("Ссылка", ТекКлиент);
			КонецЕсли;	
			Структура.Вставить("Телефон", ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(ТекТелефон));
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Основание", Структура);
			ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
		
	ИначеЕсли СтруктураКоманды.Звонок Тогда		
		
		ДанныеЗаполнения 		= Новый Структура;
		ТелефонДляНабора = ТекТелефон;
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо записать документ!'"));
			Возврат;
		КонецЕсли;	
		ДанныеЗаполнения.Вставить("Проект",		Объект.Проект); 
		ДанныеЗаполнения.Вставить("Основание",	Объект.Ссылка);	
		Если ПустаяСтрока(ТелефонДляНабора) Тогда
			СписокОбъектов = Новый СписокЗначений;
			Если ЗначениеЗаполнено(ТекКлиент) Тогда
				СписокОбъектов.Добавить(ТекКлиент);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
				СписокОбъектов.Добавить(ТекКонтактноеЛицо);
			КонецЕсли;	
			сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, ДанныеЗаполнения);
		ИначеЕсли ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(ТелефонДляНабора, ТекКонтактноеЛицо, ДанныеЗаполнения);
		ИначеЕсли ЗначениеЗаполнено(ТекКлиент) Тогда
			сфпСофтФонПроКлиент.сфпПозвонить(ТелефонДляНабора, ТекКлиент, ДанныеЗаполнения);
		Иначе
			ДанныеЗаполнения.Вставить("Описание",	ТекПотенциальныйКлиент);	
			СписокТелефонов = Новый СписокЗначений;
			СписокТелефонов.ЗагрузитьЗначения(СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТелефонДляНабора,	","));
			Если СписокТелефонов.Количество() = 1 Тогда
				сфпСофтФонПроКлиент.сфпПозвонить(ТелефонДляНабора, ТекКлиент, ДанныеЗаполнения);
			Иначе
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Партнер",					ТекКлиент);
				ДополнительныеПараметры.Вставить("ДанныеЗаполнения",		ДанныеЗаполнения);
				ОписаниеВыбора = Новый ОписаниеОповещения("ПозвонитьПоНомеру", ЭтотОбъект, ДополнительныеПараметры); 
				СписокТелефонов.ПоказатьВыборЭлемента(ОписаниеВыбора, НСтр("ru='Выберите номер телефона'"), ЭтотОбъект);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ТекАбонентВперёд(Команда)	
	Если ТекНеДозвонились Тогда
		Элементы.Участники.ТекущаяСтрока				= Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		Элементы.Участники.ТекущиеДанные.НеДозвонились 	= ТекНеДозвонились;
		ТекНеДозвонились = Ложь;
	КонецЕсли;	
	ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(,Истина);
	РазвернутьВсе();
КонецПроцедуры

&НаКлиенте
Процедура ТекСценарийПриИзменении(Элемент)
	СценарийДокумент.ПолучитьHTML(Объект.Сценарий, Новый Структура);
КонецПроцедуры

&НаКлиенте
Процедура ТекАбонентНазад(Команда)
	Если ТекНеДозвонились Тогда
		Элементы.Участники.ТекущаяСтрока				= Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		Элементы.Участники.ТекущиеДанные.НеДозвонились 	= ТекНеДозвонились;
		ТекНеДозвонились = Ложь;
	КонецЕсли;	
	ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(,,Истина);
	РазвернутьВсе();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоздатьАнкетуНажатие(Элемент)
	
	// создаем анкету
	Если НЕ ЗначениеЗаполнено(Объект.Опрос) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбрано назначение опроса!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Опрос);
		
		Возврат;			
		
	КонецЕсли; 
	
	Партнер = ТекКлиент;
	КонтактноеЛицо = ТекКонтактноеЛицо;
	
	ТипыРеспондентовОпроса = ПолучитьТипыРеспондентовОпроса(Объект.Опрос);
	
	Если ТипыРеспондентовОпроса.КонтактныеЛица Тогда
		
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			
			Респондент = КонтактноеЛицо;
			
		Иначе
			
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано контактное лицо'"));
			
			Возврат;
			
		КонецЕсли;		
		
	ИначеЕсли ТипыРеспондентовОпроса.Партнеры Тогда 
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			
			Респондент = Партнер;
			
		Иначе	
			
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбран клиент'"));
			
			Возврат;
			
		КонецЕсли;	
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'В телемаркетинге не может использоваться опрос с типом респондентов Пользователи'"));
		
		Возврат;
		
	КонецЕсли;	
	
	СтруктураПараметров = Новый Структура;
	ЗначенияЗаполнения 	= Новый Структура;	
	
	ЗначенияЗаполнения.Вставить("Опрос", Объект.Опрос);
	ЗначенияЗаполнения.Вставить("Респондент", Респондент);
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения",ЗначенияЗаполнения);
	СтруктураПараметров.Вставить("ТолькоФормаЗаполнения", Истина);
	СтруктураПараметров.Вставить("ОткрытиеИзТелемаркетинга", Истина);	
	
	НовоеОповещение = Новый ОписаниеОповещения("СозданиеАнкетыЗавершение", ЭтотОбъект);
	РежимОткрытия	= РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОткрытьФорму("Документ.Анкета.ФормаОбъекта",СтруктураПараметров,,,,,НовоеОповещение, РежимОткрытия);
		
КонецПроцедуры

&НаКлиенте
Процедура СозданиеАнкетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
		
	Если ЗначениеЗаполнено(Результат) Тогда
		текАнкета									= Результат;
		Элементы.Участники.ТекущаяСтрока			= Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		АнкетаЗавершена								= ПолучитьЗначениеРеквизита(Результат, "Проведен");		
		Элементы.Участники.ТекущиеДанные.Анкета		= Результат;
		Элементы.Участники.ТекущиеДанные.Обработан	= АнкетаЗавершена;
		Элементы.ГруппаДекорациияАнкета.Видимость	= Ложь;
		Элементы.ТекАнкета.Видимость				= Истина;
		Модифицированность							= Истина;
	КонецЕсли;		
		
КонецПроцедуры	

&НаКлиенте
Процедура ТекРежимПоказаПриИзменении(Элемент)
	ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолеСодержаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	// Поле отображения содержания.
	Если Элемент.Имя = "ТекСодержание" Тогда
		
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
		
	ИначеЕсли Элемент.Имя = "ТекСодержание1" Тогда
					
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСпискаПанели());
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоздатьИнтересНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ВидВзаимодействия) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru ='Не заполнен реквизит ""Вид взаимодействия!""'"),Объект.ВидВзаимодействия);
		Возврат;
	КонецЕсли;		
	// Для создания интереса необходимо заполнить поле "Что сделать".
	Подсказка	= Нстр("ru = 'Заполнение поля ""Что сделать""'"); 
	Оповещение	= Новый ОписаниеОповещения("ПослеВводаСтроки", ЭтотОбъект);
	ПоказатьВводСтроки(Оповещение, "", Подсказка, 0, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаВкладкуИнтересыИКонтакты(Элемент)
	Элементы.ПанельТекАбонент.ТекущаяСтраница = Элементы.СтраницаПанельИнтересКонтакты;
	РазвернутьВсе();
	ПодключитьОбработчикОжидания("Подключаемый_ДеревоПоискаПриАктивизацииСтроки",0.1, Истина);	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПослеВводаСтроки(СтрокаВвода, Параметры) Экспорт
	
	Если НЕ СтрокаВвода = Неопределено Тогда
		// Создать Интерес
		
		ИнтересСсылка = СоздатьНовыйИнтерес();
		
		Если ЗначениеЗаполнено(ИнтересСсылка) Тогда
			ВзаимодействиеСсылка = ДобавитьВзаимодействиеКИнтересу(ИнтересСсылка, СтрокаВвода);
			Если ЗначениеЗаполнено(ВзаимодействиеСсылка) Тогда 
				ДописатьИнтересПослеДобавленияВзаимодействия(ИнтересСсылка);
			КонецЕсли;				
			Если ОткрыватьИнтересПриСоздании Тогда
				ПоказатьЗначение(,ИнтересСсылка);
			КонецЕсли;	
		КонецЕсли;				
		
		Если ЗначениеЗаполнено(ИнтересСсылка) Тогда
			ТекИнтерес										= ИнтересСсылка;
			Элементы.Участники.ТекущаяСтрока				= Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
			Элементы.Участники.ТекущиеДанные.Интерес		= ИнтересСсылка;
			Элементы.Участники.ТекущиеДанные.Обработан		= Истина;
			Элементы.Участники.ТекущиеДанные.НеДозвонились	= Ложь;			
			Элементы.ГруппаДекорацияИнтерес.Видимость		= Ложь;
			Элементы.ТекИнтерес.Видимость					= Истина;
			РассчитатьКоличествоКлиентовПоРежимамПоказа();				
			Модифицированность								= Истина;
		КонецЕсли;					
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ВернутьОфисПодразделения(Подразделение)
	Возврат Подразделение.CRM_Офис;
КонецФункции	

&НаСервере
Процедура ОчиститьЗакладкуТекущийАбонент()
	
	ТекАнкета										= ПредопределенноеЗначение("Документ.Анкета.ПустаяСсылка");
	Элементы.ТекАнкета.Видимость 					= Истина;
	Элементы.ГруппаДекорациияАнкета.Видимость		= Ложь;
	ТекИнтерес										= ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка");
	Элементы.ТекИнтерес.Видимость 					= Истина;
	Элементы.ГруппаДекорацияИнтерес.Видимость 		= Ложь;
	ТекКлиент 										= ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	ТекКонтактноеЛицо 								= ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	ТекПотенциальныйКлиент							= "";
	ТекСодержание 									= CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
	ТекСодержание1 									= CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
	ТекТелефон										= Нстр("ru = 'Нет телефона'");
	Элементы.ТекМаркетинговоеМероприятие.Видимость	= Ложь;
	Элементы.ДекорацияСмещениеВремени.Видимость 	= Ложь;
	Элементы.ДекорацияНетЭлементов.Видимость		= Истина;
	Элементы.ТекАбонентПозвонить.Доступность		= Ложь;
	Элементы.ТекАбонентОтправитьСМС.Доступность		= Ложь;
	Элементы.ТекСценарий.Видимость					= Ложь;
	Элементы.ПустойСценарий.Видимость				= Истина;
	Элементы.ТекКлиент.Видимость					= Ложь;
	Элементы.ТекКонтактноеЛицо.Видимость			= Ложь;
	Элементы.ГруппаАнкета.Видимость					= Ложь;
	Элементы.ГруппаИнтерес.Видимость				= Ложь;
	Элементы.ПанельТекАбонент.ТекущаяСтраница		= Элементы.СтраницаПанельСценарий;
	Элементы.СтраницаПанельИнтересКонтакты.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоКлиентовПоРежимамПоказа()
	
	КоличествоОбработано	= Объект.Участники.НайтиСтроки(Новый Структура("Обработан", Истина)).Количество();
	КоличествоНеДозвонились = Объект.Участники.НайтиСтроки(Новый Структура("НеДозвонились", Истина)).Количество();	 
	КоличествоНеЗвонили		= Объект.Участники.НайтиСтроки(Новый Структура("Обработан, НеДозвонились", Ложь, Ложь)).Количество();	 	 
	
	Для Каждого ЭлементСписка Из Элементы.ТекРежимПоказа.СписокВыбора Цикл
		Если СтрНайти(ЭлементСписка.Представление, Нстр("ru = 'Не дозвонились'")) > 0 Тогда
			ЭлементСписка.Представление = Нстр("ru = 'Не дозвонились'") + " (" + КоличествоНеДозвонились + ")"
		ИначеЕсли СтрНайти(ЭлементСписка.Представление, Нстр("ru = 'Обработаны'")) > 0 Тогда
			ЭлементСписка.Представление = Нстр("ru = 'Обработаны'") + " (" + КоличествоОбработано + ")"			
		ИначеЕсли СтрНайти(ЭлементСписка.Представление, Нстр("ru = 'Не звонили'")) > 0 Тогда			
			ЭлементСписка.Представление = Нстр("ru = 'Не звонили'") + " (" + КоличествоНеЗвонили + ")"			
		КонецЕсли;			 
	КонецЦикла;	 
	
	// Для блокировок кнопок "Вперёд" и "Назад" считаем какое из числе равно "Единиц"
	РежимДляБлокированияКнопок = "";
	Если КоличествоОбработано = 1 Тогда
		РежимДляБлокированияКнопок = РежимДляБлокированияКнопок + Нстр("ru = 'Обработаны'");
	КонецЕсли;				
	Если КоличествоНеДозвонились = 1 Тогда
		РежимДляБлокированияКнопок = РежимДляБлокированияКнопок + Нстр("ru = 'НеДозвонились'");
	КонецЕсли;				
	Если КоличествоНеЗвонили = 1 Тогда
		РежимДляБлокированияКнопок = РежимДляБлокированияКнопок + Нстр("ru = 'НеЗвонили'");		
	КонецЕсли;				
		 
КонецПроцедуры	

&НаКлиенте
Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаСтраницаТекущийАбонент И НетУчастников
	И Объект.Участники.Количество() > 0 Тогда
		НетУчастников = Ложь;
		ИнициализироватьЗакладкуТекущийАбонентНаКлиенте(Истина);
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаСтраницаТекущийАбонент И Объект.Участники.Количество() > 0 Тогда
		РассчитатьКоличествоКлиентовПоРежимамПоказа();
		ТекДанные = Элементы.Участники.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			ИнициализироватьЗакладкуТекущийАбонентНаКлиенте();
			Возврат;
		КонецЕсли;	
		Если ТекНеДозвонились Тогда
			Элементы.Участники.ТекущаяСтрока				= Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
			Элементы.Участники.ТекущиеДанные.НеДозвонились 	= ТекНеДозвонились;
			ТекНеДозвонились = Ложь;
		КонецЕсли;	
		ТекПозицияКурсора = ТекДанные.НомерСтроки - 1;
		Если ТекДанные.Обработан Тогда
			ТекРежимПоказа = "Обработаны";
		ИначеЕсли ТекДанные.НеДозвонились Тогда		
			ТекРежимПоказа = "НеДозвонились";
		Иначе
			ТекРежимПоказа = "НеЗвонили";
		КонецЕсли;		
		ИнициализироватьЗакладкуТекущийАбонентНаКлиенте();
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаСтраницаТекущийАбонент Тогда
		Элементы.ПанельТекАбонент.ТекущаяСтраница = Элементы.СтраницаПанельСценарий;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаУчастники И Объект.Участники.Количество() > 0 Тогда
		Элементы.Участники.ТекущаяСтрока = Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекАнкетаНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(,ТекАнкета);
КонецПроцедуры

&НаКлиенте
Процедура ТекИнтересНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(,ТекИнтерес);
КонецПроцедуры

&НаКлиенте
Процедура ТекКлиентНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(,ТекКлиент);
КонецПроцедуры

&НаКлиенте
Процедура ТекКонтактноеЛицоНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(,ТекКонтактноеЛицо);
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборкуЗапроса(ВыборкаКлиентов, Партнер, КонтактноеЛицоВыбрано)
	
	Если НЕ КонтактноеЛицоВыбрано Тогда
		ВеткаКорень						= ДеревоПоиска.ПолучитьЭлементы();
		СтрокаКлиент 					= ВеткаКорень.Добавить();
		СтрокаКлиент.Объект 			= Партнер.Наименование;
		СтрокаКлиент.Ссылка 			= Партнер;			
		СтрокаКлиент.КорневойЭлемент 	= Истина;
		ВеткаКлиент 					= СтрокаКлиент.ПолучитьЭлементы();
	Иначе
		ВеткаКлиент = ДеревоПоиска.ПолучитьЭлементы();
	КонецЕсли;
	
	КоличествоИнтересов = 0;
	
	Пока ВыборкаКлиентов.Следующий() Цикл
		
		ВыборкаКонтактов = ВыборкаКлиентов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКонтактов.Следующий() Цикл
			Если ВыборкаКонтактов.Контакт <> Null Тогда
				СтрокаКонтакт 					= ВеткаКлиент.Добавить();
				СтрокаКонтакт.Объект 			= ВыборкаКонтактов.Контакт.Наименование;
				СтрокаКонтакт.Ссылка 			= ВыборкаКонтактов.Контакт;	
				СтрокаКонтакт.КорневойЭлемент 	= Истина;
				ВеткаИнтерес 					= СтрокаКонтакт.ПолучитьЭлементы();
				ВыборкаИнтересов 				= ВыборкаКонтактов.Выбрать();
				Пока ВыборкаИнтересов.Следующий() Цикл
					Если ВыборкаИнтересов.Интерес <> Null Тогда
						СтрокаИнтерес 			= ВеткаИнтерес.Добавить();
						СтрокаИнтерес.Объект 	= ВыборкаИнтересов.Интерес.Тема;
						СтрокаИнтерес.Ссылка 	= ВыборкаИнтересов.Интерес;			
						КоличествоИнтересов 	= КоличествоИнтересов + 1;
					КонецЕсли
				КонецЦикла;				
			КонецЕсли;				
		КонецЦикла;	
	КонецЦикла;	
	
	Если КоличествоИнтересов > 0 Тогда
		Элементы.ДекорацияСоздатьИнтерес.Заголовок = Нстр("ru = 'Создать интерес'")  
			+ Нстр("ru = ' (Есть активные интересы - '") + Строка(КоличествоИнтересов) + ")";
		Элементы.ДекорацияСоздатьИнтерес.УстановитьДействие("Нажатие", "ПерейтиНаВкладкуИнтересыИКонтакты");
		Элементы.СтраницаПанельИнтересКонтакты.Доступность = Истина;
	Иначе
		Элементы.ДекорацияСоздатьИнтерес.Заголовок = Нстр("ru = 'Создать интерес'");
		Элементы.ДекорацияСоздатьИнтерес.УстановитьДействие("Нажатие", "ДекорацияСоздатьИнтересНажатие");
		Элементы.СтраницаПанельИнтересКонтакты.Доступность = Ложь;
		Элементы.ПанельТекАбонент.ТекущаяСтраница = Элементы.СтраницаПанельСценарий;
		ДеревоПоиска.ПолучитьЭлементы().Очистить();
	КонецЕсли;		
	
КонецПроцедуры	

&НаСервере
Процедура СформироватьДанныеПоКлиенту()
	
	ДеревоПоиска.ПолучитьЭлементы().Очистить();
	ЗаполнитьПанельИнформацииПоДанным(Неопределено);
	
	Если ЗначениеЗаполнено(ТекКлиент) И ТипЗнч(ТекКлиент) = Тип("СправочникСсылка.Партнеры") Тогда
				
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Партнеры.Ссылка КАК Клиент,
		|	КонтактныеЛицаПартнеров.Ссылка КАК Контакт
		|ПОМЕСТИТЬ ВсеКонтакты
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
		|ГДЕ
		|	Партнеры.Ссылка = &Партнер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеКонтакты.Клиент КАК Клиент,
		|	ВсеКонтакты.Контакт КАК Контакт,
		|	CRM_Интерес.Ссылка КАК Интерес
		|ИЗ
		|	ВсеКонтакты КАК ВсеКонтакты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Интерес КАК CRM_Интерес
		|		ПО ВсеКонтакты.Клиент = CRM_Интерес.Партнер
		|			И (НЕ CRM_Интерес.Завершен)
		|			И (НЕ CRM_Интерес.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ИнтересЗакрыт))
		|			И (НЕ CRM_Интерес.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ИнтересПотерян))
		|			И (НЕ CRM_Интерес.Завершен)
		|			И (НЕ CRM_Интерес.ПометкаУдаления)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеКонтакты.Клиент,
		|	ВсеКонтакты.Контакт,
		|	CRM_Интерес.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВсеКонтакты.Клиент.Наименование,
		|	Интерес УБЫВ,
		|	ВсеКонтакты.Контакт.Наименование
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Интерес)
		|ПО
		|	Клиент,
		|	Контакт";
				
		Запрос.УстановитьПараметр("Партнер", ТекКлиент);	
		Если ЗначениеЗаполнено(ТекКонтактноеЛицо) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Отбор", "ГДЕ CRM_Интерес.КонтактноеЛицо = &КЛ");
			Запрос.УстановитьПараметр("КЛ", ТекКонтактноеЛицо); 
			КЛВыбрано = Истина;
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Отбор", "");
			КЛВыбрано = Ложь;
		КонецЕсли;			
		
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаКлиентов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		ОбработатьВыборкуЗапроса(ТаблицаКлиентов, ТекКлиент, КЛВыбрано);
		
	ИначеЕсли ЗначениеЗаполнено(ТекКлиент) И ТипЗнч(ТекКлиент) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_Интерес.ПотенциальныйКлиент КАК Клиент,
		|	CRM_Интерес.Ссылка КАК Интерес
		|ИЗ
		|	Документ.CRM_Интерес КАК CRM_Интерес
		|ГДЕ
		|	НЕ CRM_Интерес.Завершен
		|	И НЕ CRM_Интерес.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ИнтересЗакрыт)
		|	И НЕ CRM_Интерес.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ИнтересПотерян)
		|	И НЕ CRM_Интерес.Завершен
		|	И НЕ CRM_Интерес.ПометкаУдаления
		|	И CRM_Интерес.ПотенциальныйКлиент = &ПотенциальныйКлиент";
		
		Запрос.УстановитьПараметр("ПотенциальныйКлиент", ТекКлиент);
		РезультатЗапроса = Запрос.Выполнить();
		МассивИнтересов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Интерес");
		КоличествоИнтересов =  МассивИнтересов.Количество();
		
		Если КоличествоИнтересов > 0 Тогда
			
			ВеткаКорень						= ДеревоПоиска.ПолучитьЭлементы();
			СтрокаКлиент 					= ВеткаКорень.Добавить();
			СтрокаКлиент.Объект 			= ТекКлиент.Наименование;
			СтрокаКлиент.Ссылка 			= ТекКлиент;			
			СтрокаКлиент.КорневойЭлемент 	= Истина;
			ВеткаИнтерес 					= СтрокаКлиент.ПолучитьЭлементы();
			
			Для Каждого ЭлементМассива Из МассивИнтересов Цикл
				
				СтрокаИнтерес 					= ВеткаИнтерес.Добавить();
				СтрокаИнтерес.Объект 			= ЭлементМассива.Тема;
				СтрокаИнтерес.Ссылка 			= ЭлементМассива;	
				
			КонецЦикла;				
			
		КонецЕсли;	
		
		Если КоличествоИнтересов > 0 Тогда
			Элементы.ДекорацияСоздатьИнтерес.Заголовок = Нстр("ru = 'Создать интерес'")  
			+ Нстр("ru = ' (Есть активные интересы - '") + Строка(КоличествоИнтересов) + ")";
			Элементы.ДекорацияСоздатьИнтерес.УстановитьДействие("Нажатие", "ПерейтиНаВкладкуИнтересыИКонтакты");
			Элементы.СтраницаПанельИнтересКонтакты.Доступность = Истина;
		Иначе
			Элементы.ДекорацияСоздатьИнтерес.Заголовок = Нстр("ru = 'Создать интерес'");
			Элементы.ДекорацияСоздатьИнтерес.УстановитьДействие("Нажатие", "ДекорацияСоздатьИнтересНажатие");
			Элементы.СтраницаПанельИнтересКонтакты.Доступность = Ложь;
			Элементы.ПанельТекАбонент.ТекущаяСтраница = Элементы.СтраницаПанельСценарий;
			ДеревоПоиска.ПолучитьЭлементы().Очистить();
		КонецЕсли;				
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСпискаПанели()
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Партнеры"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КонтактныеЛицаПартнеров"));
	МассивТипов.Добавить(Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"));
	МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Интерес"));
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции

&НаКлиенте
Процедура РазвернутьВсе()
	ЭлементыКлиенты = ДеревоПоиска.ПолучитьЭлементы();
	Для Каждого СтрокаКлиент Из ЭлементыКлиенты Цикл
		ИдентификаторСтроки = СтрокаКлиент.ПолучитьИдентификатор();
		Элементы.ДеревоПоиска.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПанельТекАбонентПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаПанельИнтересКонтакты Тогда
		РазвернутьВсе();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъект(Команда)
	ТекДанные = Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка;
	ПоказатьЗначение(, ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаПриАктивизацииСтроки(Элемент)
	Если Элементы.ДеревоПоиска.ТекущиеДанные = Неопределено Тогда 
		ЗаполнитьПанельИнформацииПоДанным(Неопределено);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ДеревоПоискаПриАктивизацииСтроки",0.1, Истина);
		РазвернутьВсе();
	КонецЕсли;
	ВычислитьСсылкуТекущегоЭлементаДерева();
	Если ЗначениеЗаполнено(НовыйИнтерес) Тогда
		Элементы.СоздатьИнтерес.Заголовок = Нстр("ru = 'Создать взаимодействие'");
	Иначе		
		Элементы.СоздатьИнтерес.Заголовок = Нстр("ru = 'Создать интерес'");
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоПоискаПриАктивизацииСтроки()		
	Если Элементы.ДеревоПоиска.ТекущиеДанные = Неопределено Тогда
		ЗаполнитьПанельИнформацииПоДанным(Неопределено);
		Возврат;
	КонецЕсли;
	ЗаполнитьПанельИнформацииПоДанным(Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка);
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПанельИнформацииПоДанным(Ссылка)	
	
	// Поле отображения содержания.	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Партнеры")  
			ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
			ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")
			ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(Ссылка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСпискаПанели());
		Если Содержание <> ТекСодержание1 Тогда
			ТекСодержание1 = Содержание;
		КонецЕсли;
	Иначе
		Содержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
		Если Содержание <> ТекСодержание1 Тогда
			ТекСодержание1 = Содержание;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущийЭлемент = Элементы.ИнтересЧтоСделать;
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСсылкуТекущегоЭлементаДерева()
	
	ТекДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		НовыйИнтерес = ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка");
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ТекДанные.Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		НовыйИнтерес = ТекДанные.Ссылка;
	Иначе
		НовыйИнтерес = ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка");
	КонецЕсли;		
		
КонецПроцедуры	

&НаКлиенте
Процедура ТекМаркетинговоеМероприятиеНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(,Объект.МаркетинговоеМероприятие);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИнтерес(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидВзаимодействия) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru ='Не заполнен реквизит ""Вид взаимодействия!""'"),Объект.ВидВзаимодействия);
		Возврат;
	КонецЕсли;		
	
	Если НЕ ЗначениеЗаполнено(ИнтересЧтоСделать) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru ='Не заполнено поле ""Что сделать""'"),,,"ИнтересЧтоСделать","");
		Возврат;
	КонецЕсли;			
	
	ВычислитьСсылкуТекущегоЭлементаДерева();
	Результат = ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка");
	
	Если ЗначениеЗаполнено(НовыйИнтерес) Тогда
		ВзаимодействиеСсылка = ДобавитьВзаимодействиеКИнтересу(НовыйИнтерес);
		Если ЗначениеЗаполнено(ВзаимодействиеСсылка) Тогда 
			ДописатьИнтересПослеДобавленияВзаимодействия(НовыйИнтерес);
		КонецЕсли;						
		Результат = НовыйИнтерес;
		Если ОткрыватьИнтересПриСоздании Тогда
			ПоказатьЗначение(,НовыйИнтерес);
		КонецЕсли;			
		
	Иначе
		
		ИнтересСсылка = СоздатьНовыйИнтерес();
		
		Если ЗначениеЗаполнено(ИнтересСсылка) Тогда
			Результат = ИнтересСсылка;
			ВзаимодействиеСсылка = ДобавитьВзаимодействиеКИнтересу(ИнтересСсылка);
			Если ЗначениеЗаполнено(ВзаимодействиеСсылка) Тогда 
				ДописатьИнтересПослеДобавленияВзаимодействия(ИнтересСсылка);
			КонецЕсли;				
			СформироватьДанныеПоКлиенту();
			РазвернутьВсе();
			ИнтересЧтоСделать = "";
			Если ОткрыватьИнтересПриСоздании Тогда
				ПоказатьЗначение(,ИнтересСсылка);
			КонецЕсли;	
		КонецЕсли;				
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекИнтерес										= Результат;
		Элементы.Участники.ТекущаяСтрока				= Объект.Участники[ТекПозицияКурсора].ПолучитьИдентификатор();
		Элементы.Участники.ТекущиеДанные.Интерес		= Результат;
		Элементы.Участники.ТекущиеДанные.Обработан		= Истина;
		Элементы.Участники.ТекущиеДанные.НеДозвонились	= Ложь;
		Элементы.ГруппаДекорацияИнтерес.Видимость		= Ложь;
		Элементы.ТекИнтерес.Видимость					= Истина;
		РассчитатьКоличествоКлиентовПоРежимамПоказа();			
		Модифицированность								= Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Функция ДобавитьВзаимодействиеКИнтересу(ИнтересСсылка, Результат = Неопределено)
	
	НовоеВзаимодействие							= Документы.CRM_Взаимодействие.СоздатьДокумент();
	НовоеВзаимодействие.Автор 					= Пользователи.ТекущийПользователь();
	НовоеВзаимодействие.Баллы 					= ?(ЗначениеЗаполнено(Объект.ВидВзаимодействия), Объект.ВидВзаимодействия.Баллы, 0);
	НовоеВзаимодействие.ВидВзаимодействия 		= Объект.ВидВзаимодействия;
	НовоеВзаимодействие.Дата 					= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	НовоеВзаимодействие.ДокументОснование 		= ИнтересСсылка.Ссылка;
	НовоеВзаимодействие.КонтактноеЛицо 			= ИнтересСсылка.КонтактноеЛицо;
	НовоеВзаимодействие.ОжидаемаяВыручка 		= ИнтересСсылка.ОжидаемаяВыручка;
	НовоеВзаимодействие.Организация 			= ИнтересСсылка.Организация;
	НовоеВзаимодействие.Ответственный 			= Пользователи.ТекущийПользователь();
	НовоеВзаимодействие.ПлановаяДата			= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	НовоеВзаимодействие.Партнер 				= ИнтересСсылка.Партнер;
	НовоеВзаимодействие.Подразделение 			= ИнтересСсылка.Подразделение;
	НовоеВзаимодействие.ПотенциальныйКлиент 	= ИнтересСсылка.ПотенциальныйКлиент;
	НовоеВзаимодействие.СостояниеИнтереса 		= ИнтересСсылка.СостояниеИнтереса;
	НовоеВзаимодействие.Содержание 				= ?(ЗначениеЗаполнено(Результат), Результат, ИнтересЧтоСделать);
	НовоеВзаимодействие.СтатусВзаимодействия 	= Справочники.CRM_СостоянияСобытий.ВРаботе;
	
	Попытка
		НовоеВзаимодействие.Записать();
		Возврат НовоеВзаимодействие.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Документы.CRM_Взаимодействие.ПустаяСсылка();
	КонецПопытки;

КонецФункции

&НаСервере
Функция СоздатьНовыйИнтерес()
	
	ДокументИнтерес 					= Документы.CRM_Интерес.СоздатьДокумент();
	ДокументИнтерес.Автор 				= Пользователи.ТекущийПользователь();
	ДокументИнтерес.Дата 				= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	ДокументИнтерес.ДокументОснование 	= Объект.Ссылка;
	ДокументИнтерес.КонтактноеЛицо 		= ТекКонтактноеЛицо;
	
	ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		ДокументИнтерес.Организация = ЗначениеНастройки;
	Иначе
		ДокументИнтерес.Организация = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
	КонецЕсли;
	
	ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		ДокументИнтерес.Ответственный = ЗначениеНастройки;			
	Иначе
		ДокументИнтерес.Ответственный = CRM_ОбщегоНазначенияСервер.ТекущийПользователь();
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекКлиент) и ТипЗнч(ТекКлиент) = Тип("СправочникСсылка.Партнеры") Тогда
		ДокументИнтерес.Партнер = ТекКлиент;
		Если НЕ ЗначениеЗаполнено(ДокументИнтерес.КонтактноеЛицо) Тогда
			ДокументИнтерес.КонтактноеЛицо = ДокументИнтерес.Партнер.CRM_ОсновноеКонтактноеЛицо;
		КонецЕсли;	
	ИначеЕсли ЗначениеЗаполнено(ТекКлиент) и ТипЗнч(ТекКлиент) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда		
		ДокументИнтерес.ПотенциальныйКлиент = ТекКлиент;
	ИначеЕсли ЗначениеЗаполнено(ТекПотенциальныйКлиент) Тогда
		ДокументИнтерес.ПотенциальныйКлиент = СоздатьПотенциальногоКлиента(ТекПотенциальныйКлиент, ТекТелефон);
	КонецЕсли;		
	
	ДокументИнтерес.Подразделение 		= Объект.Подразделение;
	ДокументИнтерес.Офис 				= Объект.Подразделение.CRM_Офис;
	ДокументИнтерес.СостояниеИнтереса 	= Справочники.CRM_СостоянияИнтересов.ВыявлениеПотребностей;
	ДокументИнтерес.Тема 				= Объект.Тема;
	ДокументИнтерес.ТипУслуги 			= Справочники.CRM_ТипУслуги.ПоставкаТоварыУслуги;
	
	Попытка
		ДокументИнтерес.Записать();
		Возврат ДокументИнтерес.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Документы.CRM_Интерес.ПустаяСсылка();
	КонецПопытки;	
	
КонецФункции

&НаСервере
Функция СоздатьПотенциальногоКлиента(НаименованиеКлиента, ТелефонКлиента)
	
	ПотенциальныйКлиент	= Справочники.CRM_ПотенциальныеКлиенты.НайтиПоНаименованию(НаименованиеКлиента, Истина);
	Если ЗначениеЗаполнено(ПотенциальныйКлиент) Тогда
		Возврат ПотенциальныйКлиент.Ссылка; 
	Иначе
		НовыйПотенциальныйКлиент 				= Справочники.CRM_ПотенциальныеКлиенты.СоздатьЭлемент();
		НовыйПотенциальныйКлиент.Наименование 	= НаименованиеКлиента;
		
		Если ЗначениеЗаполнено(ТелефонКлиента) Тогда
			НоваяКИ = НовыйПотенциальныйКлиент.КонтактнаяИнформация.Добавить();
			НоваяКИ.CRM_ОсновнойДляСвязи = Истина;
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента");
			НоваяКИ.НомерТелефона = ТелефонКлиента;
			НоваяКИ.Представление = ТелефонКлиента;
			НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		КонецЕсли;
		
		Попытка
			НовыйПотенциальныйКлиент.Записать();
			Возврат НовыйПотенциальныйКлиент.Ссылка;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Справочники.CRM_ПотенциальныеКлиенты.ПустаяСсылка();
		КонецПопытки;	
	КонецЕсли;
	
КонецФункции	

&НаСервере
Процедура ДописатьИнтересПослеДобавленияВзаимодействия(СсылкаНаИнтерес)
	ИнтересОбъект = СсылкаНаИнтерес.ПолучитьОбъект();
	Попытка
		ИнтересОбъект.Записать();
	Исключение
	КонецПопытки;		
КонецПроцедуры	

&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТД = Элементы.Участники.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Если Поле.Имя = "УчастникиЗвонок" Тогда
		Если ЗначениеЗаполнено(ТД.Звонок) Тогда
			ПараметрыФормы = Новый Структура("Ключ", ТД.Звонок);
			ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти


// Пока не используется, тестовый вариант расчёта трудоёмкости
#Область РасчётТрудозатрат
//&НаСервереБезКонтекста
//Функция ПолучитьПредельноеКоличествоБаллов(Пользователь)
//	Подразделение = Пользователь.Подразделение;
//	Результат = 0;
//	
//	Пока ЗначениеЗаполнено(Подразделение) И Результат = 0 Цикл
//		Результат = Подразделение.CRM_МаксимальноеКоличествоБалловВДень;
//		Подразделение = Подразделение.Родитель;
//	КонецЦикла;
//	
//	Если Результат = 0 Тогда
//		Возврат 8; // по умолчанию
//	КонецЕсли;
//	
//	Возврат Результат;
//КонецФункции

//&НаСервере
//Функция ВычислитьЗанятостьПользователя(Пользователь, ДатаКалендаря)
//	
//	Запрос = Новый Запрос();
//	Запрос.Текст = "ВЫБРАТЬ
//	|	СУММА(CRM_СобытияКалендаря.Балл) КАК Балл,
//	|	ВЫБОР
//	|		КОГДА CRM_СобытияКалендаря.Завершено
//	|			ТОГДА НАЧАЛОПЕРИОДА(CRM_СобытияКалендаря.ПериодОкончание, ДЕНЬ)
//	|		ИНАЧЕ НАЧАЛОПЕРИОДА(CRM_СобытияКалендаря.ПериодНачало, ДЕНЬ)
//	|	КОНЕЦ КАК День
//	|ИЗ
//	|	РегистрСведений.CRM_СобытияКалендаря КАК CRM_СобытияКалендаря
//	|ГДЕ
//	|	CRM_СобытияКалендаря.Пользователь = &Пользователь
//	|	И ВЫБОР
//	|	    КОГДА CRM_СобытияКалендаря.Завершено
//	|				ТОГДА CRM_СобытияКалендаря.ПериодОкончание МЕЖДУ &НачалоРаскраски И &КонецРаскраски
//	|			ИНАЧЕ CRM_СобытияКалендаря.ПериодНачало МЕЖДУ &НачалоРаскраски И &КонецРаскраски
//	|		КОНЕЦ
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВЫБОР
//	|		КОГДА CRM_СобытияКалендаря.Завершено
//	|			ТОГДА НАЧАЛОПЕРИОДА(CRM_СобытияКалендаря.ПериодОкончание, ДЕНЬ)
//	|		ИНАЧЕ НАЧАЛОПЕРИОДА(CRM_СобытияКалендаря.ПериодНачало, ДЕНЬ)
//	|	КОНЕЦ";
//	
//	Запрос.УстановитьПараметр("Пользователь",    Пользователь);
//	Запрос.УстановитьПараметр("НачалоРаскраски", НачалоДня(ДатаКалендаря));
//	Запрос.УстановитьПараметр("КонецРаскраски",  КонецДня(ДатаКалендаря));	
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.Балл;
//	Иначе
//		Возврат 0;
//	КонецЕсли;			
//	
//КонецФункции	

//#КонецОбласти

//&НаСервере
//Процедура ВычислитьДатуОкончанияТелемаркетинга()
//	
//	Если НЕ ЗначениеЗаполнено(Объект.ВидВзаимодействия) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПодразделениеПользователя = Объект.Ответственный.Подразделение;
//	
//	Если НЕ ЗначениеЗаполнено(ПодразделениеПользователя) Тогда
//		Возврат;
//	КонецЕсли;				
//	
//	КоличествоУчастников 		= Объект.Участники.Количество();
//	Если КоличествоУчастников = 0 Тогда
//		Возврат;
//	КонецЕсли;	
//	
//	БаллыПоВидуВзаимодействию	= Объект.ВидВзаимодействия.Баллы;
//	БаллыПоПодразделению	    = ПолучитьПредельноеКоличествоБаллов(Объект.Ответственный);
//	ПроцентПревышения			= Объект.Подразделение.CRM_ПроцентПревышенияКоличестваБаллов; 
//	ЗанятостьПользователя		= ВычислитьЗанятостьПользователя(Объект.Ответственный, Объект.ДатаНачала);
//	
//	НастройкиРабочееВремяПользователя = CRM_ОбщегоНазначенияСервер.ПолучитьСтруктуруРабочихВременПользователя(Объект.Ответственный);
//	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяНачалаРабочегоДня) Тогда
//		НачалоРабочегоДняЧас = Час(НастройкиРабочееВремяПользователя.ВремяНачалаРабочегоДня);
//		НачалоРабочегоДняМинуты = НачалоРабочегоДняЧас * 60 + Минута(НастройкиРабочееВремяПользователя.ВремяНачалаРабочегоДня);
//	Иначе
//		НачалоРабочегоДняЧас = 0;
//		НачалоРабочегоДняМинуты = 0;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяОкончанияРабочегоДня) Тогда
//		КонецРабочегоДняЧас = Час(НастройкиРабочееВремяПользователя.ВремяОкончанияРабочегоДня);
//		КонецРабочегоДняМинуты = КонецРабочегоДняЧас * 60 + Минута(НастройкиРабочееВремяПользователя.ВремяОкончанияРабочегоДня);
//	Иначе
//		КонецРабочегоДняЧас = 23;
//		КонецРабочегоДняМинуты = 24 * 60 - 1;
//	КонецЕсли;
//		
//	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва) И ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва) Тогда
//		ЕстьОбеденныйПерерыв = Истина;
//		НачалоОбеденногоПерерываЧас = Час(НастройкиРабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва);
//		КонецОбеденногоПерерываЧас = Час(НастройкиРабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва);
//		ПродолжительностьОбедаВМинутах = Окр((НастройкиРабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва - 
//											НастройкиРабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва) / 60);
//	Иначе
//		ЕстьОбеденныйПерерыв = Ложь;
//		НачалоОбеденногоПерерываЧас = 0;
//		КонецОбеденногоПерерываЧас = 23;
//		ПродолжительностьОбедаВМинутах = 0;
//	КонецЕсли;
//	
//	НачалоПериода 	= Объект.ДатаНачала;
//	КонецПериода	= ДобавитьМесяц(Объект.ДатаНачала, 1);
//	
//	МассивДат = Новый Массив;
//	МассивДат.Добавить(НачалоДня(НачалоПериода));
//	МассивДат.Добавить(НачалоДня(КонецПериода));	
//	
//	Если ЗначениеЗаполнено(ПодразделениеПользователя.ГрафикРаботы) Тогда
//		ГрафикРаботы = ГрафикиРаботы.РасписанияРаботыНаПериод(ПодразделениеПользователя.ГрафикРаботы, НачалоПериода, КонецПериода);
//		ГрафикРаботы.Свернуть("ДатаГрафика");
//		Для каждого ТекДата Из ГрафикРаботы Цикл
//			НоваяСтрока = РабочиеДни.Добавить();
//			НоваяСтрока.День = ТекДата.ДатаГрафика;
//		КонецЦикла;	
//	Иначе
//		КалендарныйГрафик = CRM_ОбщегоНазначенияСервер.ПолучитьСоответствиеКалендарныхГрафиков(МассивДат);
//		Если КалендарныйГрафик <> Неопределено Тогда
//			Для каждого ТекДата Из КалендарныйГрафик Цикл
//				Если ТекДата.Значение.ДеньРабочийПоПроизводственномуКалендарю Тогда 
//					НоваяСтрока = РабочиеДни.Добавить();
//					НоваяСтрока.День = ТекДата.Ключ;
//				КонецЕсли;	
//			КонецЦикла;		
//		КонецЕсли;	
//	КонецЕсли;	
//	
//	ПродолжительностьРабочегоДняВМинутах = КонецРабочегоДняМинуты - НачалоРабочегоДняМинуты - ПродолжительностьОбедаВМинутах;			
//	
//	СтоимостьБаллаВМинутах = ПродолжительностьРабочегоДняВМинутах / БаллыПоПодразделению;
//	ОбщаяСтоимостьВбаллахДокумента = КоличествоУчастников * БаллыПоВидуВзаимодействию;
//	ОбщаяСтоимостьВМинутахДокумента = СтоимостьБаллаВМинутах * ОбщаяСтоимостьВбаллахДокумента; 
//	
//	Если ЗанятостьПользователя = 0 Тогда
//		// расписание пользователя свободное, значит планируем дату окончания телемаркетинга
//		// как сумму даты начала с суммой баллой, умноженной на стоимость баллов
//		ОсталосьМинутВТекущемДне = ПродолжительностьРабочегоДняВМинутах - (Час(Объект.ДатаНачала) * 60 + Минута(Объект.ДатаНачала) - НачалоРабочегоДняМинуты); 			
//		Если ОсталосьМинутВТекущемДне >= ОбщаяСтоимостьВМинутахДокумента Тогда
//			ПлановаяДатаОкончания = Объект.ДатаНачала + ОбщаяСтоимостьВМинутахДокумента * 60;
//		Иначе			
//			// переносим на остатки на следующий рабочий день
//			ОбщаяСтоимостьВМинутахДокумента = ОбщаяСтоимостьВМинутахДокумента - ОсталосьМинутВТекущемДне;
//			КоличествоДнейДоЗавершения = Окр(ОбщаяСтоимостьВМинутахДокумента / ПродолжительностьРабочегоДняВМинутах, 0, РежимОкругления.Окр15как10) + 1;
//			Если КоличествоДнейДоЗавершения = 1 Тогда
//				ОстатокМинут = ОбщаяСтоимостьВМинутахДокумента;
//			Иначе
//				ОстатокМинут = ОбщаяСтоимостьВМинутахДокумента - ПродолжительностьРабочегоДняВМинутах * (КоличествоДнейДоЗавершения - 1);
//			КонецЕсли;				
//			СледующийДень = НачалоДня(Объект.ДатаНачала) + 60*60*24 * КоличествоДнейДоЗавершения;
//			Пока (РабочиеДни.НайтиСтроки(Новый Структура("День", СледующийДень)) = 0) Цикл
//				СледующийДень = НачалоДня(СледующийДень) + 60 * 60 * 24;
//			КонецЦикла;
//			ПлановаяДатаОкончания = НачалоДня(СледующийДень) + НачалоРабочегоДняМинуты * 60 + ОстатокМинут;
//		КонецЕсли;
//	Иначе
//		// расписанеи пользователя несвободно, поэтому планируем обзвон в рамках текущей занятости
//	КонецЕсли;		
//	
//КонецПроцедуры	
#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры
