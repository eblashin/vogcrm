
///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
// Функция возвращает заголовок формиы.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Заголовок формы
//
Функция ПолучитьЗаголовокФормы()
	Попытка
		ОчищенныйНомер = Строка(Число(Объект.Номер));
	Исключение
		ОчищенныйНомер = Объект.Номер;
	КонецПопытки;
	СтрокаЗаголовок = "Мероприятие ";
	СтрокаЗаголовок = СтрокаЗаголовок + " № " + ОчищенныйНомер + " от " + Формат(Объект.Дата, "ДФ='dd.MM.yyyy HH:mm'; ДЛФ=DT");
	Возврат СтрокаЗаголовок;
КонецФункции // ПолучитьЗаголовокФормы()

&НаКлиенте 
// Процедура настраивает видимость и доступность элементов формы.
//
// Параметры:
//	Нет.
//
Процедура НастроитьВидимостьИДоступностьФормы()
	
	//+вог
	//Элементы.ВремяНачало.Видимость    = (НЕ Объект.НаВесьДень);
	//Элементы.ВремяОкончание.Видимость = (НЕ Объект.НаВесьДень);
	Если Не Объект.НаВесьДень Тогда
		Элементы.СтраницыВремяНачало.ТекущаяСтраница 	= Элементы.СтраницаВремяНачало;	
		Элементы.СтраницыВремяОкончание.ТекущаяСтраница = Элементы.СтраницаВремяОкончание;	
	Иначе
		Элементы.СтраницыВремяНачало.ТекущаяСтраница    = Элементы.СтраницаВремяНачалоПусто;	
		Элементы.СтраницыВремяОкончание.ТекущаяСтраница = Элементы.СтраницаВремяОкончаниеПусто;	
	КонецЕсли;	
	//-вог
	Заголовок = ПолучитьЗаголовокФормы();
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр	= Ложь;
		Элементы.Ответственный.КнопкаВыбора		= Истина;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр	= Истина;
		Элементы.Ответственный.КнопкаВыбора		= Ложь;
	КонецЕсли;
	// Страница "Участники"
	//Элементы.СторонниеЛицаТелефонФлаг.Видимость	= ИспользоватьОповещенияСМС;
	//Элементы.СторонниеЛицаАдресФлаг.Видимость	= ИспользоватьОповещенияЭлектроннаяПочта;
//START Кайдашов 05/08/19 486	
	//Элементы.СвоиЛицаНапоминания.Видимость		= ИспользоватьНапоминания;
//END Кайдашов	486
	Элементы.СвоиЛицаТелефонФлаг.Видимость		= ИспользоватьОповещенияСМС;
	Элементы.СвоиЛицаАдресФлаг.Видимость		= ИспользоватьОповещенияЭлектроннаяПочта;
	// Настройка доступности формы в зависимости от настроек Google.
	ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	// ++ VOG Солодов В.В. 31.07.2019 task 106
	ЕстьПолныеПрава = (ЭтоПолноправныйПользователь 
		ИЛИ (Объект.Автор = ТекПользователь)
		ИЛИ (Объект.Ответственный = ТекПользователь)
		ИЛИ (Объект.Инициатор = ТекПользователь)
		ИЛИ ТекущийПользовательЯвляетсяДелегатом(ТекПользователь));
	// До изменения
	//ЕстьПолныеПрава = (ЭтоПолноправныйПользователь ИЛИ (Объект.Автор = ТекПользователь) ИЛИ (Объект.Ответственный = ТекПользователь) ИЛИ (Объект.Инициатор = ТекПользователь));
	// -- VOG Солодов В.В. 31.07.2019
	
	Элементы.ГруппаИнтеграцияGoogleCalendar.ТолькоПросмотр	= НЕ ЕстьПолныеПрава;
	Если НЕ ЕстьПолныеПрава Тогда
		//+вог
		// ++ VOG Ульянов И.В. 07.02.2020 CRM-227
		//Элементы.ГруппаСторонниеЛица.Видимость	= Ложь;
		Если Объект.СторонниеЛица.Количество() > 1 Тогда // ++ VOG Солодов В.В. 10.02.2020 CRM-326 // Добавил условие
			Элементы.ГруппаСторонниеЛица.Видимость	= Истина;
			Элементы.ГруппаСторонниеЛица.ТолькоПросмотр = Истина;
		КонецЕсли;
		// -- VOG Ульянов И.В. 07.02.2020 CRM-227
		//-вог
		// Только просмотр
		Если Объект.ГостиМогутИзменятьМероприятиеGApi Тогда
			Если НЕ Объект.ГостиМогутВидетьСписокГостейGApi Тогда
				// ++zhdkse 14.12.2015
				//Элементы.ГруппаУчастники.Видимость	= Ложь;				
				// --zhdkse 14.12.2015
			ИначеЕсли НЕ Объект.ГостиМогутПриглашатьДругихГостейGApi Тогда
				Для Каждого ПодчиненныйЭлемент Из Элементы.СвоиЛица.КоманднаяПанель.ПодчиненныеЭлементы Цикл
					ПодчиненныйЭлемент.Доступность	= Ложь;
				КонецЦикла;
				Для Каждого ПодчиненныйЭлемент Из Элементы.СвоиЛица.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
					ПодчиненныйЭлемент.Доступность	= Ложь;
				КонецЦикла;
			КонецЕсли;                    
		Иначе
			ТолькоПросмотр	= Истина;
			Для Каждого ПодчиненныйЭлемент Из КоманднаяПанель.ПодчиненныеЭлементы Цикл
				Если ПодчиненныйЭлемент.Имя <> "ФормаОбщаяКомандаCRM_СтруктураПодчиненности" тогда
					//Сергей Иванов: оставить доступность печати карточки мероприятия для пользователей, входящих в состав тч СвоиЛица ++
					Если ПодчиненныйЭлемент.Имя = "ПодменюПечать" Тогда
						ПодчиненныйЭлемент.Доступность	= ?(Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо",ТекПользователь)).Количество() <> 0, Истина, Ложь);	
					Иначе
						ПодчиненныйЭлемент.Доступность	= Ложь;	
					КонецЕсли
					//Сергей Иванов --
				КонецЕсли;
			КонецЦикла;
			Элементы.ПодобратьМесто.Видимость									= Ложь;
			Элементы.вогПротоколЗаполнитьПротокол.Видимость						= Ложь;
			Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Видимость	= Ложь;
			Элементы.ГруппаПериодДаты.ТолькоПросмотр = Истина;
			Элементы.ГруппаПартнер.ТолькоПросмотр = Истина;
			Если Объект.ГостиМогутВидетьСписокГостейGApi Тогда
				Для Каждого ПодчиненныйЭлемент Из Элементы.СвоиЛица.КоманднаяПанель.ПодчиненныеЭлементы Цикл
					ПодчиненныйЭлемент.Видимость	= Ложь;
				КонецЦикла;
				Для Каждого ПодчиненныйЭлемент Из Элементы.СвоиЛица.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
					ПодчиненныйЭлемент.Видимость	= Ложь;
				КонецЦикла;
			Иначе	
				// ++zhdkse 14.12.2015
				//Элементы.ГруппаУчастники.Видимость	= Ложь;				
				// --zhdkse 14.12.2015
			КонецЕсли;	
		КонецЕсли;
		Элементы.ФормаПерейтиФайлы.Доступность = Истина;
		
	КонецЕсли;	
	
	// видимость расписания
	Элементы.РядСобытийНаименование.Видимость = Не Объект.ИзмененоВРяде;
	Если Элементы.РядСобытийНаименование.Видимость Тогда
		Элементы.Периодическое.Доступность = (Не Объект.ИзмененоВРяде);
		Элементы.РядСобытийНаименование.Доступность = (Объект.Периодическое И ЗначениеЗаполнено(Объект.РядСобытий) И Не Объект.ИзмененоВРяде);
	КонецЕсли;
	
	Элементы.РядСобытийНаименование.Видимость = Объект.Периодическое;

	//+вог
	СторонниеЛицаСписком = Объект.СторонниеЛица.Количество() > 1;
	УстановитьВидимостьСтороннихЛиц();
	//-вог
	парамПоиска = Новый Структура;
	парамПоиска.Вставить("Лицо",ТекПользователь);
	массивСтрок = Объект.СвоиЛица.НайтиСтроки(парамПоиска);
	Элементы.СвоиЛицаМероприятиеДа.Пометка = Ложь;
	Элементы.СвоиЛицаМероприятиеМожетБыть.Пометка = Ложь;
	Элементы.СвоиЛицаМероприятиеНет.Пометка = Ложь;
	Если массивСтрок.Количество() = 0  тогда
		Элементы.СвоиЛицаПосещениеМероприятия.Видимость = Ложь;
	Иначе
		Если массивСтрок[0].ПосетитМероприятие =1 тогда
			Элементы.СвоиЛицаМероприятиеДа.Пометка = Истина;
		ИначеЕсли массивСтрок[0].ПосетитМероприятие = 2 тогда
			Элементы.СвоиЛицаМероприятиеМожетБыть.Пометка = Истина;
		ИначеЕсли массивСтрок[0].ПосетитМероприятие = 0 тогда
			Элементы.СвоиЛицаМероприятиеНет.Пометка = Истина;
		КонецЕсли;
		Если массивСтрок[0].Обязательно тогда
			Элементы.СвоиЛицаМероприятиеНет.Видимость = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Элементы.Проект.Видимость = Объект.ОперационноеПроектное = 1;
	
	
КонецПроцедуры // НастроитьВидимостьИДоступностьФормы()

&НаСервереБезКонтекста
// Функция возвращает массив помещений с наименованием, похожим на переданный текст.
//
// Параметры:
//	Текст	- Строка	- Наименование помещения.
//
// Возвращаемое значение:
//	Массив	- Vассив помещений с наименованием, похожим на переданный текст.
//
Функция ВернутьПомещенияПоТексту(Текст)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", СокрЛП(Текст) + "%");
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Помещения.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.CRM_Помещения КАК CRM_Помещения
	               |ГДЕ
	               |	CRM_Помещения.Наименование ПОДОБНО &Текст
	               |	И НЕ CRM_Помещения.ПометкаУдаления
	               |	И CRM_Помещения.Родитель <> ЗНАЧЕНИЕ(Справочник.CRM_Помещения.ПустаяСсылка)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");                            
КонецФункции // ВернутьПомещенияПоТексту()

&НаСервере
// Процедура заполняет настройки оповещений.
//
// Параметры:
//	Нет.
//
&НаСервере
Процедура ЗаполнитьГруппуОповещений()
	
	
	
	ИспользоватьНапоминания					= Константы.CRM_ИспользоватьНапоминания.Получить();
	ИспользоватьОповещенияСМС				= Константы.CRM_ИспользоватьОповещенияСМС.Получить();
	ИспользоватьОповещенияЭлектроннаяПочта	= Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить();
	Если Объект.Ответственный<>ПользователиКлиентСервер.ТекущийПользователь() тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьТаблицуОповещений();
	МассивДобавляемыхРеквизитов = Новый Массив();
	// Всего предполагается 5 полей оповещений, по аналогии с гуглом.
	Ид = 0;
	Пока НЕ Ид = 1 Цикл
		Ид = Ид + 1;
		
		ОписаниеТиповКанал = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_КаналыОповещений");
		НовыйРеквизит = Новый РеквизитФормы("_КаналОповещения"+Строка(Ид), ОписаниеТиповКанал);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповСрок = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
		НовыйРеквизит = Новый РеквизитФормы("_СрокОповещения"+Строка(Ид), ОписаниеТиповСрок);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповПериод = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_ПериодичностьОповещений");
		НовыйРеквизит = Новый РеквизитФормы("_ПериодОповещения"+Строка(Ид), ОписаниеТиповПериод);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповСрок = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		НовыйРеквизит = Новый РеквизитФормы("_ДатаОповещения"+Строка(Ид), ОписаниеТиповСрок);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		НоваяКомандаФормы = Команды.Добавить("УдалитьОповещение_"+Строка(Ид));
		НоваяКомандаФормы.Заголовок					= "Удалить";
		НоваяКомандаФормы.Подсказка					= "Удалить оповещение";
		НоваяКомандаФормы.Действие					= "Подключаемый_УдалитьОповещение";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
		
	КонецЦикла;
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		Если Ид > 1 Тогда Прервать; КонецЕсли; 
		СтрокаТаб.ИмяПоля = "ПолеКанала_"+Строка(Ид);
		
		Элемент = Элементы.Добавить("ПолеКанала_"+Строка(Ид),Тип("ПолеФормы"),Элементы.КаналыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок					= Строка(Ид);
		//Элемент.Заголовок					= "Оповещение №"+Строка(Ид);
		//Элемент.ПоложениеЗаголовка			=ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					="_КаналОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Истина; //Ложь;
		Элемент.Ширина						= 0; //17
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = СтрокаТаб.Канал;
		
		Элемент = Элементы.Добавить("ПолеСрокаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.СрокиОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_СрокОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.КнопкаРегулирования			= Истина;
		//Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_СрокОповещения"+Строка(Ид)] = СтрокаТаб.СрокОповещения;
		
		Элемент = Элементы.Добавить("ПолеПериодаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ПериодыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ПериодОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.Ширина						= 5;
		//Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_ПериодОповещения"+Строка(Ид)] = СтрокаТаб.Периодичность;
		
		Элемент = Элементы.Добавить("ПолеДатыОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ДатыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ДатаОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.ТолькоПросмотр				= Истина;
		Элемент.Подсказка					= НСтр("ru = 'Планируемая дата оповещения'");
		
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = СтрокаТаб.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
		
		НовыйЭлемент = Элементы.Добавить("Кнопка_УдалитьОповещение_"+Строка(Ид),Тип("КнопкаФормы"), Элементы.УдалениеОповещений);
		НовыйЭлемент.ИмяКоманды			= "УдалитьОповещение_"+Строка(Ид);
		НовыйЭлемент.Заголовок			= "Удалить";
		НовыйЭлемент.Картинка			= БиблиотекаКартинок.Удалить;
		НовыйЭлемент.Отображение		= ОтображениеКнопки.Картинка;
	КонецЦикла;
	
	Если Ид < 5 Тогда
		НовыйЭлемент = Элементы.Добавить("_ДобавитьОповещение", Тип("ДекорацияФормы"), Элементы.КаналыОповещений);
		НовыйЭлемент.Заголовок	= "Добавить оповещение";
		НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Гиперссылка= Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ДобавитьОповещение");
	КонецЕсли;
КонецПроцедуры // ЗаполнитьГруппуОповещений()

&НаКлиенте
// Процедура заполняет даты и времена начала и окончания мероприятия.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДанныеФормы()
	
	//ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.Дата);
	//ДатаНачало		= ДатаВремя.Дата;
	//ВремяНачало		= ДатаВремя.Время;
	//ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ОкончаниеМероприятия);
	//ДатаОкончание	= ДатаВремя.Дата;
	//ВремяОкончание	= ДатаВремя.Время;
	ДатаВремяНачало = Объект.дата;
	ДатаВремяОкончание = Объект.ОкончаниеМероприятия;
	ДатаВремяНачалоПриИзменении();
	ДатаВремяОкончаниеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет корректировку значений полей даты и времени.
//
// Параметры:
//	ПриоритетДатыНачала	- Булево	- Приоритет даты начала.
//
Процедура СкорректироватьДатуВремя(ПриоритетДатыНачала)
	
	//Если ДатаНачало > ДатаОкончание Тогда
	//	Если ПриоритетДатыНачала Тогда
	//		ДатаОкончание = ДатаНачало;
	//	Иначе
	//		ДатаНачало = ДатаОкончание;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если НачалоДня(ДатаНачало) = НачалоДня(ДатаОкончание) И ВремяНачало > ВремяОкончание Тогда
	//	Если ПриоритетДатыНачала Тогда
	//		ВремяОкончание = ВремяНачало;
	//	Иначе
	//		ВремяНачало = ВремяОкончание;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если ДатаВремяНачало>ДатаВремяОкончание тогда
		Если ПриоритетДатыНачала тогда
			ДатаВремяОкончание = ДатаВремяНачало;
			ДатаВремяОкончаниеПриИзменении();	
		Иначе	
			ДатаВремяНачало = ДатаВремяОкончание;
			ДатаВремяНачалоПриИзменении();	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СкорректироватьДатуВремя()

&НаКлиенте
// Процедура - обработчик изменения контакта и контактной информации при изменении клиента.
//
// Параметры:
//	ТекущаяСтрока				- СтрокаТЧ	- Строка ТЧ
//	ПодставлятьКонтактноеЛицо	- Булево	- Признак изменения контакта.
//
Процедура ПриИзмененииПартнераКонтакногоЛица(ТекущаяСтрока, ПодставлятьКонтактноеЛицо = Ложь)
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Партнер) Тогда
		Если ПодставлятьКонтактноеЛицо Тогда
			ТекущаяСтрока.КонтактноеЛицо = КонтактноеЛицоКлиента(ТекущаяСтрока.Партнер,ТекущаяСтрока.вогТорговаяТочка,Объект.Дата);
		КонецЕсли;
		ЗаполнитьОписаниеДолжности(ТекущаяСтрока);	
		СтруктураПоиска	= Новый Структура;
		СтруктураПоиска.Вставить("Партнер",			ТекущаяСтрока.Партнер); 
		СтруктураПоиска.Вставить("ТорговаяТочка",	ТекущаяСтрока.вогТорговаяТочка); 
		СтруктураПоиска.Вставить("КонтактноеЛицо",	ТекущаяСтрока.КонтактноеЛицо); 
		// Телефон
		Если ИспользоватьОповещенияСМС Тогда
			СписокТелефонов	= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
			Если СписокТелефонов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокТелефонов Цикл
					Если ЭлементСписка.Пометка Тогда
						ТелефонныйНомер = ЭлементСписка.Значение;
						Если ТелефонныйНомер.Количество() = 0 Тогда
							ТекущаяСтрока.Телефон = "";
						Иначе	
							ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
						КонецЕсли;
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьДляОповещений Тогда
					ТелефонныйНомер = СписокТелефонов[0].Значение;
					Если ТелефонныйНомер.Количество() = 0 Тогда
						ТекущаяСтрока.Телефон = "";
					Иначе	
						ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Телефон = "";
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Телефон = "";
		КонецЕсли;
		// E-майл
		Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
			СписокАдресов	= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
			Если СписокАдресов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокАдресов Цикл
					Если ЭлементСписка.Пометка Тогда
						мАдрес = ЭлементСписка.Значение;
						Если мАдрес.Количество() = 0 Тогда
							ТекущаяСтрока.Адрес					= "";
							ТекущаяСтрока.ПредставлениеАдреса	= "";
							ТекущаяСтрока.Принадлежность		= Ложь;
						Иначе	
							ТекущаяСтрока.Адрес					= мАдрес.Представление;
							ТекущаяСтрока.ПредставлениеАдреса	= ?(мАдрес.Объект = ТекущаяСтрока.Партнер,Строка(ТекущаяСтрока.Партнер), Строка(ТекущаяСтрока.КонтактноеЛицо)) + " <" + мАдрес.Представление + ">";
							ТекущаяСтрока.Принадлежность		= (мАдрес.Объект = ТекущаяСтрока.КонтактноеЛицо);
						КонецЕсли;
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьДляОповещений Тогда
					мАдрес = СписокАдресов[0].Значение;
					Если мАдрес.Количество() = 0 Тогда
						ТекущаяСтрока.Адрес					= "";
						ТекущаяСтрока.ПредставлениеАдреса	= "";
						ТекущаяСтрока.Принадлежность		= Ложь;
					Иначе	
						ТекущаяСтрока.Адрес					= мАдрес.Представление;
						ТекущаяСтрока.ПредставлениеАдреса	= ?(мАдрес.Объект = ТекущаяСтрока.Партнер,Строка(ТекущаяСтрока.Партнер),Строка(ТекущаяСтрока.КонтактноеЛицо)) + " <" + мАдрес.Представление + ">";
						ТекущаяСтрока.Принадлежность		= (мАдрес.Объект = ТекущаяСтрока.КонтактноеЛицо);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Адрес					= "";
				ТекущаяСтрока.ПредставлениеАдреса	= "";
				ТекущаяСтрока.Принадлежность		= Ложь;
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Адрес					= "";
			ТекущаяСтрока.ПредставлениеАдреса	= "";
			ТекущаяСтрока.Принадлежность		= Ложь;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Телефон = "";
		ТекущаяСтрока.Адрес					= "";
		ТекущаяСтрока.ПредставлениеАдреса	= "";
		ТекущаяСтрока.Принадлежность		= Ложь;
	КонецЕсли;
		
КонецПроцедуры // ПриИзмененииПартнераКонтакногоЛица()

&НаКлиенте
// Процедура - обработчик изменения контактной информации при изменении лица.
//
// Параметры:
//	ТекущаяСтрока				- СтрокаТЧ	- Строка ТЧ
//
Процедура ПриИзмененииЛица(ТекущаяСтрока)
	Если ЗначениеЗаполнено(ТекущаяСтрока.Лицо) Тогда
		ТекущаяСтрока.ПосетитМероприятие = 2;
		СтруктураПоиска	= Новый Структура("ОбъектКонтактнойИнформации", ТекущаяСтрока.Лицо); 
		// Телефон
		Если ИспользоватьОповещенияСМС Тогда
			СписокТелефонов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска,
				ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
			Если СписокТелефонов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокТелефонов Цикл
					Если ЭлементСписка.Пометка Тогда
						ТелефонныйНомер = ЭлементСписка.Значение;
						Если ТелефонныйНомер.Количество() = 0 Тогда
							ТекущаяСтрока.Телефон = "";
						Иначе
							ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
						КонецЕсли;
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьДляОповещений Тогда
					ТелефонныйНомер = СписокТелефонов[0].Значение;
					Если ТелефонныйНомер.Количество() = 0 Тогда
						ТекущаяСтрока.Телефон = "";
					Иначе	
						ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Телефон = "";
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Телефон = "";
		КонецЕсли;
		// E-майл
		Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
			СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска,
				ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
			Если СписокАдресов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокАдресов Цикл
					Если ЭлементСписка.Пометка Тогда
						мАдрес = ЭлементСписка.Значение;
						Если мАдрес.Количество() = 0 Тогда
							ТекущаяСтрока.Адрес					= "";
							ТекущаяСтрока.ПредставлениеАдреса	= "";
						Иначе	
							ТекущаяСтрока.Адрес					= мАдрес.Представление;
							ТекущаяСтрока.ПредставлениеАдреса	= Строка(ТекущаяСтрока.Лицо) + " <" + мАдрес.Представление + ">";
						КонецЕсли;
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьДляОповещений Тогда
					мАдрес = СписокАдресов[0].Значение;
					Если мАдрес.Количество() = 0 Тогда
						ТекущаяСтрока.Адрес					= "";
						ТекущаяСтрока.ПредставлениеАдреса	= "";
					Иначе	
						ТекущаяСтрока.Адрес					= мАдрес.Представление;
						ТекущаяСтрока.ПредставлениеАдреса	= Строка(ТекущаяСтрока.Лицо) + " <" + мАдрес.Представление + ">";
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Адрес					= "";
				ТекущаяСтрока.ПредставлениеАдреса	= "";
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Адрес					= "";
			ТекущаяСтрока.ПредставлениеАдреса	= "";
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Телефон = "";
		ТекущаяСтрока.Адрес					= "";
		ТекущаяСтрока.ПредставлениеАдреса	= "";
	КонецЕсли;
КонецПроцедуры // ПриИзмененииЛица()

&НаКлиенте
// Процедура - обработчик выбора телефона.
//
// Параметры:
//	РезультатВыбора			- ЭлементСпискаЗначений	- Выбранный номер телефона.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораТелефона(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	ТелефонныйНомер = РезультатВыбора.Значение;
	ДополнительныеПараметры.ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление;
	//Если НЕ СторонниеЛицаСписком тогда
	//	ЗаполнитьРеквизитыОбъектаСтороннихЛиц(ЭтотОбъект);	
	//КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораТелефона()	

&НаКлиенте
// Процедура - обработчик выбора e-mail.
//
// Параметры:
//	РезультатВыбора			- ЭлементСпискаЗначений	- Выбранный e-mail.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораАдреса(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	мАдрес 										= РезультатВыбора.Значение;
	ДополнительныеПараметры.ТекущаяСтрока.Адрес	= мАдрес.Представление;
	Если ДополнительныеПараметры.СвоеЛицо Тогда
		ДополнительныеПараметры.ТекущаяСтрока.ПредставлениеАдреса	= Строка(ДополнительныеПараметры.ТекущаяСтрока.Лицо) + " <" + мАдрес.Представление + ">";
	Иначе	
		ДополнительныеПараметры.ТекущаяСтрока.ПредставлениеАдреса	= ?(мАдрес.Объект = ДополнительныеПараметры.ТекущаяСтрока.Партнер, Строка(ДополнительныеПараметры.ТекущаяСтрока.Партнер), Строка(ДополнительныеПараметры.ТекущаяСтрока.КонтактноеЛицо)) + " <" + мАдрес.Представление + ">";
		ДополнительныеПараметры.ТекущаяСтрока.Принадлежность		= (мАдрес.Объект = ДополнительныеПараметры.ТекущаяСтрока.КонтактноеЛицо);
	КонецЕсли;
	//Если НЕ СторонниеЛицаСписком тогда
	//	ЗаполнитьРеквизитыОбъектаСтороннихЛиц(ЭтотОбъект);	
	//КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораАдреса()	

&НаКлиенте
// Процедура устанавливает значения флажков в полях ТЧ.
//
// Параметры:
//	ИмяТЧ			- Строка	- Имя табличной части.
//	ИмяПоля			- Строка	- Имя колонки табличной части.
//	ЗначениеФлажка	- Булево	- Устанавливаемое значение.
//
Процедура УстановитьЗначениеФлажка(ИмяТЧ, ИмяПоля = Неопределено, ЗначениеФлажка)
	Для Каждого ЭлементКоллекции Из Объект[ИмяТЧ] Цикл
		Если ИмяПоля = Неопределено Тогда
			Если ИспользоватьНапоминания И (ИмяТЧ = "СвоиЛица") Тогда
				ЭлементКоллекции.ОтправлятьНапоминания = ЗначениеФлажка;
			КонецЕсли;
			Если ИспользоватьОповещенияСМС Тогда
				ЭлементКоллекции.ОтправлятьСМС = ЗначениеФлажка;
			КонецЕсли;
			Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
				ЭлементКоллекции.ОтправлятьПоПочте = ЗначениеФлажка;
			КонецЕсли;
		Иначе
			ЭлементКоллекции[ИмяПоля] = ЗначениеФлажка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // УстановитьЗначениеФлажка()

&НаКлиенте
// Функция возвращает массив участников.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив участников
//
Функция ПолучитьМассивУчастников()
	МассивУчастников = Новый Массив();
	Для Каждого СтрокаТаблицы Из Объект.СвоиЛица Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Лицо) И ТипЗнч(СтрокаТаблицы.Лицо) = Тип("СправочникСсылка.Пользователи") Тогда
			Если МассивУчастников.Найти(СтрокаТаблицы.Лицо) = Неопределено Тогда
				МассивУчастников.Добавить(СтрокаТаблицы.Лицо);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	Возврат МассивУчастников;
КонецФункции // ПолучитьМассивУчастников()	

&НаКлиенте
// Процедура создает новый элемент ряда событий.
//
// Параметры:
//	Нет.
//
Процедура СоздатьНовыйЭлементРядСобытий()
	Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = (НСтр(	"ru = 'Данные еще не записаны.
								|Установка признака периодичности возможна только после записи данных.
								|Данные будут записаны.'"));
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияВопросОЗаписи", ЭтотОбъект);
		ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		СозданиеЭлементаРядаСобытий();
	КонецЕсли;

КонецПроцедуры // СоздатьНовыйЭлементРядСобытий()

&НаКлиенте
// Процедура обработки ответа на вопрос о записи документа.
//
Процедура ОбработкаОповещенияВопросОЗаписи(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		Записать();
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Объект.Периодическое = Ложь;
		НастроитьВидимостьИДоступностьФормы();
		Возврат;
	КонецЕсли;
	СозданиеЭлементаРядаСобытий();
КонецПроцедуры

&НаКлиенте
Процедура СозданиеЭлементаРядаСобытий()
	
	//Объект.Дата					= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	//Объект.ОкончаниеМероприятия	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
	Объект.Дата					= ДатаВремяНачало;
	Объект.ОкончаниеМероприятия	= ДатаВремяОкончание;
	
	ПараметрыФормы				= Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("ДатаНачала", НачалоДня(ДатаВремяНачало)));
	ПараметрыФормы.Вставить("ВремяНачала",CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ДатаВремяНачало).Время);
	ПараметрыФормы.Вставить("ВремяКонца", CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ДатаВремяОкончание).Время);
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("НовыйРяд", Истина);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОСозданииРядаСобытий", ЭтотОбъект, Дополнительно);
		
	ОткрытьФорму("Справочник.CRM_РядыСобытий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ,,, ОП);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОСозданииРядаСобытий(Параметры, Дополнительно) Экспорт
	
	Если Параметры <> Неопределено Тогда  //++ VOG Иванов С.А. 14.10.2019 bugs: 724  ИЛИ Параметры.ПризнакЗакрытия = Неопределено Тогда
		Если Параметры.ПризнакЗакрытия = Истина Тогда
			Если Дополнительно.НовыйРяд Тогда
				Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
					Объект.РядСобытий	= Параметры.Ссылка;
					ВремяНачало			= Параметры.ВремяНачала;
					ВремяОкончание		= Параметры.ВремяКонца;
					ПризнакПериодическоеСобытиеИнициализация	= Истина;
					ПризнакИзмененоРасписание					= Истина;
					Объект.ИзмененоВРяде						= Ложь;
					Записать();
				Иначе
					Объект.Периодическое = Ложь;
				КонецЕсли;
			Иначе
				Если Параметры.ДанныеБылиИзменены Тогда
					ВремяНачало		 = Параметры.ВремяНачала;
					ВремяОкончание	 = Параметры.ВремяКонца;
					ПризнакИзмененоРасписание = Истина;
					Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НастроитьВидимостьИДоступностьФормы();
	Иначе
		Если Дополнительно.НовыйРяд Тогда
			Объект.Периодическое = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура открывает форму расписания.
//
// Параметры:
//	Нет.
//
Процедура ОткрытьФормуРасписания()
	
	ДатаВремяНачала		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.Дата);
	ДатаВремяОкончания	= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ОкончаниеМероприятия);
	ПараметрыФормы = Новый Структура("Ключ", Объект.РядСобытий);
	
	ПараметрыФормы.Вставить("ВремяНачала", ДатаВремяНачала.Время);
	ПараметрыФормы.Вставить("ВремяКонца", ДатаВремяОкончания.Время);
	ПараметрыФормы.Вставить("ДатаНачала", НачалоДня(Объект.Дата));
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("НовыйРяд", Ложь);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОСозданииРядаСобытий", ЭтотОбъект, Дополнительно);
		
	ОткрытьФорму("Справочник.CRM_РядыСобытий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ,,, ОП);
	
КонецПроцедуры // ОткрытьФормуРасписания()

&НаСервере
// Процедура проверяет наличие новых участников.
//
// Параметры:
//	ТекущийОбъект	- ДокументОбъект	- Текущий документ.
//
Процедура ПроверитьНаличиеНовыхУчастников(ТекущийОбъект)
	НовыеУчастники.Очистить();
	Для Каждого СтрокаУчастника Из ТекущийОбъект.СторонниеЛица Цикл
		МассивСтрок = ТекущийОбъект.Ссылка.СторонниеЛица.НайтиСтроки(Новый Структура("Партнер,КонтактноеЛицо", СтрокаУчастника.Партнер, СтрокаУчастника.КонтактноеЛицо));
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока = НовыеУчастники.Добавить();
			НоваяСтрока.Партнер			= СтрокаУчастника.Партнер;
			НоваяСтрока.КонтактноеЛицо	= СтрокаУчастника.КонтактноеЛицо;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУчастника Из ТекущийОбъект.СвоиЛица Цикл
		МассивСтрок = ТекущийОбъект.Ссылка.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", СтрокаУчастника.Лицо));
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока = НовыеУчастники.Добавить();
			НоваяСтрока.Партнер			= Справочники.Партнеры.ПустаяСсылка();
			НоваяСтрока.КонтактноеЛицо	= СтрокаУчастника.Лицо;
		КонецЕсли;
	КонецЦикла;
	ИзмененСоставСтороннихУчастников = (НовыеУчастники.Количество() > 0);
КонецПроцедуры // ПроверитьНаличиеНовыхУчастников()

&НаСервере
Процедура ПроверитьНеобходимостьОбновленияКомандировки(ТекущийОбъект) //Павелко, Задача CRM-284, 11.02.2020
	
	Если Не Объект.Ссылка.АдресПредставление = Объект.АдресПредставление Или Не Объект.Ссылка.Город = Объект.Город Или Не Объект.Ссылка.Ответственный = Объект.Ответственный Тогда //Павелко, CRM-324, 12.02.2020
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ТребуетсяОбновитьКомандировку");
		Возврат;		
	КонецЕсли;	
		
	Если ДанныеТаблицыИзменены(Объект.Ссылка.СвоиЛица, Объект.СвоиЛица, Новый Структура("Лицо, ПосетитМероприятие, Роль"))
		Или ДанныеТаблицыИзменены(Объект.Ссылка.СторонниеЛица, Объект.СторонниеЛица, Новый Структура("Партнер, вогТорговаяТочка")) Тогда
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ТребуетсяОбновитьКомандировку");
		Возврат;
		
	КонецЕсли;	
		
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ДанныеТаблицыИзменены(БазоваяТаблица, СравниваемаяТаблица, Отбор)
	
	Если Не БазоваяТаблица.Количество() = СравниваемаяТаблица.Количество() Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Для Каждого Строка Из БазоваяТаблица Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		
		НайденныеСтроки = СравниваемаяТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

&НаСервереБезКонтекста
// Процедура проверяет наличие новых участников.
//
// Параметры:
//	ТекущийОбъект	- ДокументОбъект	- Текущий документ.
//
Функция ПроверитьНаличиеУчастниковСобытия(Ссылка)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_МероприятиеСторонниеЛица.Партнер,
	               |	CRM_МероприятиеСторонниеЛица.КонтактноеЛицо
	               |ИЗ
	               |	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
	               |ГДЕ
	               |	CRM_МероприятиеСторонниеЛица.Ссылка = &Ссылка
	               |	И (НЕ CRM_МероприятиеСторонниеЛица.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |			ИЛИ НЕ CRM_МероприятиеСторонниеЛица.КонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка),
	               |	CRM_МероприятиеСвоиЛица.Лицо
	               |ИЗ
	               |	Документ.CRM_Мероприятие.СвоиЛица КАК CRM_МероприятиеСвоиЛица
	               |ГДЕ
	               |	CRM_МероприятиеСвоиЛица.Ссылка = &Ссылка
	               |	И (НЕ CRM_МероприятиеСвоиЛица.Лицо = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |			ИЛИ НЕ CRM_МероприятиеСвоиЛица.Лицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))";
	РезультатЗапроса = Запрос.Выполнить();			   
	Возврат НЕ РезультатЗапроса.Пустой();
КонецФункции // ПроверитьНаличиеУчастниковСобытия()

&НаСервере
// Процедура заполняет таблицу оповещений.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьТаблицуОповещений()
	Запрос = Новый Запрос;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("Пользователь"	, Объект.Ответственный);
		Запрос.УстановитьПараметр("Предмет"			, Объект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 5
		|	ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание) КАК Канал,
		|	CRM_Напоминания.СрокОповещения,
		|	CRM_Напоминания.Периодичность,
		|	0 КАК ПолеСортировки
		|ИЗ
		|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
		|ГДЕ
		|	CRM_Напоминания.Пользователь = &Пользователь
		|	И CRM_Напоминания.Предмет = &Предмет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	CRM_Оповещения.Канал,
		|	CRM_Оповещения.СрокОповещения,
		|	CRM_Оповещения.Периодичность,
		|	1
		|ИЗ
		|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
		|ГДЕ
		|	CRM_Оповещения.Получатель = &Пользователь
		|	И CRM_Оповещения.Предмет = &Предмет
		|	И CRM_Оповещения.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеСортировки";
	Иначе
		ПризнакИзмененыОповещения = Истина;
		Запрос.УстановитьПараметр("Пользователь"	, Объект.Ответственный);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 5
		|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
		|	ВЫБОР
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.Напоминание
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.СМС
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
		|	КОНЕЦ КАК Канал,
		|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
		|ИЗ
		|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		|ГДЕ
		|	CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
		|	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
		|	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
		|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
		|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидОповещения";
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если (Выборка.Канал = Перечисления.CRM_КаналыОповещений.Напоминание И НЕ ИспользоватьНапоминания)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.СМС И НЕ ИспользоватьОповещенияСМС)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта И НЕ ИспользоватьОповещенияЭлектроннаяПочта) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаТаб = _ТаблицаОповещений.Добавить();
		НоваяСтрокаТаб.Канал			= Выборка.Канал;
		НоваяСтрокаТаб.СрокОповещения	= Выборка.СрокОповещения;
		НоваяСтрокаТаб.Периодичность	= Выборка.Периодичность;
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет"			,Новый Структура("Дата", Объект.Дата));
		СтруктураОповещения.Вставить("ВидОповещения"	,Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		СтруктураОповещения.Вставить("СрокОповещения"	,НоваяСтрокаТаб.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность"	,НоваяСтрокаТаб.Периодичность);
		СтруктураОповещения.Вставить("ВпередПоКалендарю", Ложь);
		СтруктураОповещения.Вставить("Получатель"		,Объект.Ответственный);
		НоваяСтрокаТаб.ДатаОповещения = CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
	КонецЦикла;
	
	
КонецПроцедуры // ЗаполнитьТаблицуОповещений()

&НаСервере
// Процедура пересчитывает даты оповещений.
//
// Параметры:
//	Нет.
//
Процедура ПересчитатьДатыОповещений()
	
	ДатаВремяНачало = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ДатаВремяНачало);
	
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = СтрЗаменить(СтрокаТаб.ИмяПоля, "ПолеКанала_", "");
		ДатаОповещения = ДатаВремяНачало.Дата;
		ВремяОповещения = ДатаВремяНачало.Время;
		СрокОповещения = СтрокаТаб.СрокОповещения;

		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Новый Структура("Дата", CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОповещения, ВремяОповещения)));
		СтруктураОповещения.Вставить("ВидОповещения",	ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	СтрокаТаб.Периодичность);
		СтруктураОповещения.Вставить("Получатель",		ПользователиКлиентСервер.ТекущийПользователь());
		СтруктураОповещения.Вставить("ВпередПоКалендарю"	,Ложь);
		СтрокаТаб.ДатаОповещения	= CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = СтрокаТаб.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(СтрокаТаб.ДатаОповещения > CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
	КонецЦикла;
	ПризнакИзмененыОповещения = Истина;
	
КонецПроцедуры // ПересчитатьДатыОповещений()

&НаСервере
// Процедура добавляет оповещение.
//
// Параметры:
//	Нет.
//
Процедура ДобавитьОповещение()
	Ид = 0;
	Пока Ид < 5 Цикл
		Ид = Ид + 1;
		Если НЕ Элементы.Найти("ПолеКанала_"+Строка(Ид)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = _ТаблицаОповещений.Добавить();
		НоваяСтрока.Канал			= Перечисления.CRM_КаналыОповещений.Напоминание;
		НоваяСтрока.СрокОповещения	= 10;
		НоваяСтрока.Периодичность	= Перечисления.CRM_ПериодичностьОповещений.Минута;
		НоваяСтрока.ИмяПоля			= "ПолеКанала_"+Строка(Ид);
		НоваяСтрока.ДатаОповещения	= "ПолеКанала_"+Строка(Ид);
		
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет"			,Новый Структура("Дата", ДатаВремяНачало));
		СтруктураОповещения.Вставить("ВидОповещения"	,ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения"	,НоваяСтрока.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность"	,НоваяСтрока.Периодичность);
		СтруктураОповещения.Вставить("ВпередПоКалендарю", Ложь);
		СтруктураОповещения.Вставить("Получатель"		,Пользователи.ТекущийПользователь());
		
		НоваяСтрока.ДатаОповещения	= CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		
		Элемент = Элементы.Вставить("ПолеКанала_"+Строка(Ид),Тип("ПолеФормы"),Элементы.КаналыОповещений, Элементы._ДобавитьОповещение);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок					= Строка(Ид);
		//Элемент.Заголовок					= "Оповещение №"+Строка(Ид);
		//Элемент.ПоложениеЗаголовка			=ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					="_КаналОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Истина; //Ложь;
		Элемент.Ширина						= 0; //17
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		Если ИспользоватьНапоминания Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.Напоминание;
		ИначеЕсли ИспользоватьОповещенияЭлектроннаяПочта Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта;
		ИначеЕсли ИспользоватьОповещенияЭлектроннаяПочта Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.СМС;
		КонецЕсли;
		
		Элемент = Элементы.Добавить("ПолеСрокаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.СрокиОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_СрокОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.КнопкаРегулирования			= Истина;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_СрокОповещения"+Строка(Ид)] = 10;
		
		Элемент = Элементы.Добавить("ПолеПериодаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ПериодыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ПериодОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.Ширина						= 5;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_ПериодОповещения"+Строка(Ид)] = Перечисления.CRM_ПериодичностьОповещений.Минута;
		
		НовыйЭлемент = Элементы.Добавить("Кнопка_УдалитьОповещение_"+Строка(Ид),Тип("КнопкаФормы"), Элементы.УдалениеОповещений);
		НовыйЭлемент.ИмяКоманды			= "УдалитьОповещение_"+Строка(Ид);
		НовыйЭлемент.Заголовок			= "Удалить";
		НовыйЭлемент.Картинка			= БиблиотекаКартинок.Удалить;
		НовыйЭлемент.Отображение		= ОтображениеКнопки.Картинка;
		
		Элемент = Элементы.Добавить("ПолеДатыОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ДатыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ДатаОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.ТолькоПросмотр				= Истина;
		Элемент.Подсказка					= НСтр("ru = 'Планируемая дата оповещения'");
		
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = НоваяСтрока.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
		Прервать;
	КонецЦикла;
	
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		ЭлементФормы = Элементы.Найти(СтрокаТаб.ИмяПоля);
		ЭлементФормы.Заголовок = Строка(Ид);
		//ЭлементФормы.Заголовок = "Оповещение №"+Строка(Ид);
	КонецЦикла;
	
	Если _ТаблицаОповещений.Количество() = 5 Тогда
		Если НЕ Элементы.Найти("_ДобавитьОповещение") = Неопределено Тогда
			Элементы.Удалить(Элементы["_ДобавитьОповещение"]);
		КонецЕсли;
	КонецЕсли;
	ПризнакИзмененыОповещения	= Ложь;
КонецПроцедуры // ДобавитьОповещение()

&НаСервере
// Процедура удаляет оповещение.
//
// Параметры:
//	ИмяКоманды	- Строка	- Имя команды.
//
Процедура УдалитьОповещение(ИмяКоманды)
	ИдПолей = СтрЗаменить(ИмяКоманды, "УдалитьОповещение_","");
	Если НЕ Элементы.Найти("ПолеКанала_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеКанала_" + ИдПолей]);
	КонецЕсли;
	Если НЕ Элементы.Найти("ПолеСрокаОповещения_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеСрокаОповещения_" + ИдПолей]);
	КонецЕсли;
	Если НЕ Элементы.Найти("ПолеПериодаОповещения_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеПериодаОповещения_" + ИдПолей]);
	КонецЕсли;
	Если НЕ Элементы.Найти("Кнопка_УдалитьОповещение_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["Кнопка_УдалитьОповещение_" + ИдПолей]);
	КонецЕсли;
	Если НЕ Элементы.Найти("ПолеДатыОповещения_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеДатыОповещения_" + ИдПолей]);
	КонецЕсли;
	МассивСтрок = _ТаблицаОповещений.НайтиСтроки(Новый Структура("ИмяПоля","ПолеКанала_" + ИдПолей));
	Если МассивСтрок.Количество() > 0 Тогда
		_ТаблицаОповещений.Удалить(_ТаблицаОповещений.Индекс(МассивСтрок[0]));
	КонецЕсли;
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		Если Ид>5 Тогда Продолжить; КонецЕсли;
		ЭлементФормы = Элементы.Найти(СтрокаТаб.ИмяПоля);
		ЭлементФормы.Заголовок = Строка(Ид);
		//ЭлементФормы.Заголовок = "Оповещение №"+Строка(Ид);
	КонецЦикла;
	Если Ид < 5 Тогда
		Если Элементы.Найти("_ДобавитьОповещение") = Неопределено Тогда
			НовыйЭлемент = Элементы.Добавить("_ДобавитьОповещение", Тип("ДекорацияФормы"), Элементы.КаналыОповещений);
			НовыйЭлемент.Заголовок	= "Добавить оповещение";
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Гиперссылка= Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ДобавитьОповещение");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УдалитьОповещение()

&НаСервере
// Процедура - обработчик события "ПриИзмененииОповещения".
//
// Параметры:
//	Ид	- Строка	- Идентификатор оповещения.
//
Процедура ПриИзмененииОповещения(Ид)
	МассивСтрок = _ТаблицаОповещений.НайтиСтроки(Новый Структура("ИмяПоля", "ПолеКанала_" + Ид));
	Если МассивСтрок.Количество() > 0 Тогда
		МассивСтрок[0].Канал			= ЭтотОбъект["_КаналОповещения" + Ид];
		МассивСтрок[0].СрокОповещения	= ЭтотОбъект["_СрокОповещения" + Ид];
		МассивСтрок[0].Периодичность	= ЭтотОбъект["_ПериодОповещения" + Ид];
		МассивСтрок[0].ДатаОповещения	= ЭтотОбъект["_ДатаОповещения" + Строка(Ид)];
	КонецЕсли;
КонецПроцедуры // ПриИзмененииОповещения()

&НаКлиенте
// Динамически подключаемый обработчик добавления оповещения.
//
// Параметры:
//	Элемент					- ЭлементФормы 	- Элемент формы.
//	СтандартнаяОбработка	- Булево		- Признак стандартной обработки.
//
Процедура Подключаемый_ДобавитьОповещение(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДобавитьОповещение();
	ПризнакИзмененыОповещения = Истина;
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	// При добавлении оповещения изменения в форме не отражаются.
	Модифицированность = Истина;
КонецПроцедуры // Подключаемый_ДобавитьОповещение()

&НаКлиенте
// Динамически подключаемый обработчик удаления оповещения.
//
// Параметры:
//	Команда	- КомандаФормы 	- Команда формы.
//
Процедура Подключаемый_УдалитьОповещение(Команда)
	УдалитьОповещение(Команда.Имя);
	ПризнакИзмененыОповещения = Истина;
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
КонецПроцедуры //  Подключаемый_УдалитьОповещение()

&НаКлиенте
// Динамически подключаемый обработчик начала выбора вида оповещения.
//
// Параметры:
//	Элемент					- ЭлементФормы 		- Элемент формы.
//	ДанныеВыбора			- СписокЗначений	- Данные выбора.
//	СтандартнаяОбработка	- Булево			- Признак стандартной обработки.
//
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Если ИспользоватьНапоминания Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.Напоминание"));
	КонецЕсли;
	Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта"));
	КонецЕсли;
	Если ИспользоватьОповещенияСМС Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.СМС"));
	КонецЕсли;
КонецПроцедуры // Подключаемый_НачалоВыбора()

&НаКлиенте
// Динамически подключаемый обработчик изменения оповещения.
//
// Параметры:
//	Элемент	- ЭлементФормы	- Элемент формы.
//
Процедура Подключаемый_ОповещениеПриИзменении(Элемент)
	Если Найти(Элемент.Имя, "ПолеКанала_") > 0 Тогда
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеКанала_","");
	ИначеЕсли Найти(Элемент.Имя, "ПолеСрокаОповещения_") > 0 Тогда
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеСрокаОповещения_","");
	ИначеЕсли Найти(Элемент.Имя, "ПолеПериодаОповещения_") > 0 Тогда
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеПериодаОповещения_","");
	КонецЕсли;
	Если (Найти(Элемент.Имя, "ПолеСрокаОповещения_") > 0)
		ИЛИ (Найти(Элемент.Имя, "ПолеПериодаОповещения_") > 0) Тогда
		//ДатаОповещения = ДатаНачало;
		//ВремяОповещения = ВремяНачало;
		СрокОповещения = ЭтотОбъект["_СрокОповещения" + Строка(ИдПолей)];

		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Новый Структура(" Дата", ДатаВремяНачало));
		СтруктураОповещения.Вставить("ВидОповещения",	ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	ЭтотОбъект["_ПериодОповещения" + Строка(ИдПолей)]);
		СтруктураОповещения.Вставить("Получатель",		ПользователиКлиентСервер.ТекущийПользователь());
		СтруктураОповещения.Вставить("ВпередПоКалендарю", Ложь);
		ЭтотОбъект["_ДатаОповещения"+Строка(ИдПолей)]					= CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		Элементы["ПолеДатыОповещения_"+Строка(ИдПолей)].ЦветТекста	= ?(ЭтотОбъект["_ДатаОповещения" + Строка(ИдПолей)] > ТекущаяДата(), Новый Цвет(25,85,174), Новый Цвет(255,0,0));
	КонецЕсли;
	ПриИзмененииОповещения(ИдПолей);
	ПризнакИзмененыОповещения = Истина;
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
КонецПроцедуры // Подключаемый_ОповещениеПриИзменении()

&НаСервере
// Процедура устанавливает время начало и окончания по рабочему дню.
//
// Параметры:
//	Нет.
//
Процедура УстановитьВремяНачалоВремяОкончание()
	
	ВремяНачалаРабочегоДня		= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный, "ВремяНачалаРабочегоДня");
	ВремяОкончанияРабочегоДня	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный, "ВремяОкончанияРабочегоДня");
	Если НЕ ЗначениеЗаполнено(ВремяНачалаРабочегоДня) Тогда
		ВремяНачалаРабочегоДня = Константы.CRM_НачалоРабочегоДня.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВремяОкончанияРабочегоДня) Тогда
		ВремяОкончанияРабочегоДня = Константы.CRM_КонецРабочегоДня.Получить();
	КонецЕсли;
	
	ДатаВремяНачало	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(НачалоДня(ДатаВремяНачало), ВремяНачалаРабочегоДня);
	ДатаВремяОкончание	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(НачалоДня(ДатаВремяОкончание),ВремяОкончанияРабочегоДня);
	ДатаВремяНачалоПредставление = Формат(ДатаВремяНачало,"ДФ='dd.MM.yy HH:mm'; ДП='%1'");
	ДатаВремяОкончаниеПредставление = Формат(ДатаВремяОкончание,"ДФ='dd.MM.yy HH:mm'; ДП='%1'");
	
КонецПроцедуры // УстановитьВремяНачалоВремяОкончание()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОПОВЕЩЕНИЙ ФОРМЫ

&НаКлиенте
// Процедура - обработчик выбора телефона.
//
// Параметры:
//	РезультатВыбора			- СправочникСсылка	- Выбранное физическое лицо.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораСвоиЛица(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> Неопределено Тогда
		НоваяСтрока = Объект.СвоиЛица.Добавить();
		НоваяСтрока.Лицо = РезультатВыбора;
		ПриИзмененииЛица(НоваяСтрока);
	КонецЕсли;
КонецПроцедуры // ОбработкаВыбораСвоиЛица()

&НаКлиенте
// Процедура - обработчик подбора помещения по календарю.
//
// Параметры:
//	РезультатВыбора			- Массив		- Массив помещений.
//	ДополнительныеПараметры	- Структура		- Структура дополнительных параметров.
//
Процедура ОбработкаПодбораМеста(РезультатОткрытия, ДополнительныеПараметры) Экспорт
	Если РезультатОткрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		МинимальнаяВыбраннаяДата = Неопределено;
		МаксимальнаяВыбраннаяДата = Неопределено;
		Для Каждого ДобавляемоеПомещение Из РезультатОткрытия Цикл
			Если НЕ ЗначениеЗаполнено(ДобавляемоеПомещение.Помещение) Тогда
				Продолжить;
			КонецЕсли;
			Если (МинимальнаяВыбраннаяДата = Неопределено) ИЛИ (МинимальнаяВыбраннаяДата > ДобавляемоеПомещение.НачалоПериода) Тогда
				МинимальнаяВыбраннаяДата = ДобавляемоеПомещение.НачалоПериода;
			КонецЕсли;
			Если (МаксимальнаяВыбраннаяДата = Неопределено) ИЛИ (МаксимальнаяВыбраннаяДата < ДобавляемоеПомещение.ОкончаниеПериода) Тогда
				МаксимальнаяВыбраннаяДата = ДобавляемоеПомещение.ОкончаниеПериода;
			КонецЕсли;
			Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
				Объект.Место		= СокрЛП(ДобавляемоеПомещение.Помещение);
				Объект.Помещение	= ДобавляемоеПомещение.Помещение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
			ДатаВремяНачало		= МинимальнаяВыбраннаяДата;
			ДатаВремяОкончание		= МаксимальнаяВыбраннаяДата;
			ДатаВремяНачалоПриИзменении();
			ДатаВремяОкончаниеПриИзменении();
		КонецЕсли;
		Модифицированность = Истина;
		МестоПриИзмененииНаСервере(); //Павелко, Таск 000000945, 26.11.2019
	КонецЕсли;
КонецПроцедуры // ОбработкаПодбораМеста()

&НаКлиенте
// Процедура - обработчик подбора участников.
//
// Параметры:
//	РезультатВыбора			- Массив		- Массив помещений.
//	ДополнительныеПараметры	- Структура		- Структура дополнительных параметров.
//
Процедура ОбработкаПодбораУчастников(РезультатОткрытия, ДополнительныеПараметры) Экспорт
	Если РезультатОткрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		МинимальнаяВыбраннаяДата	= Неопределено;
		МаксимальнаяВыбраннаяДата	= Неопределено;
		МассивВыбранныеПользователи	= Новый Массив();
		Для Каждого ДобавляемыйПользователь Из РезультатОткрытия Цикл
			МассивВыбранныеПользователи.Добавить(ДобавляемыйПользователь.Пользователь);
			Если Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ДобавляемыйПользователь.Пользователь)).Количество() = 0 Тогда
				НоваяСтрока = Объект.СвоиЛица.Добавить();
				НоваяСтрока.Лицо	= ДобавляемыйПользователь.Пользователь;
				НоваяСтрока.ОтправлятьПоПочте = Истина;
				НоваяСтрока.ОтправлятьНапоминания = Истина;
				НоваяСтрока.Роль = вогОбщегоНазначенияКлиентСервер.ПолучитьРольУчастникМероприятия();
				ПриИзмененииЛица(НоваяСтрока);
			КонецЕсли;
			Если МинимальнаяВыбраннаяДата = Неопределено Или МинимальнаяВыбраннаяДата > ДобавляемыйПользователь.НачалоПериода Тогда
				МинимальнаяВыбраннаяДата = ДобавляемыйПользователь.НачалоПериода;
			КонецЕсли;
			Если МаксимальнаяВыбраннаяДата = Неопределено Или МаксимальнаяВыбраннаяДата < ДобавляемыйПользователь.ОкончаниеПериода Тогда
				МаксимальнаяВыбраннаяДата = ДобавляемыйПользователь.ОкончаниеПериода;
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемыйПользователь Из ДополнительныеПараметры.МассивУчастников Цикл
			Если МассивВыбранныеПользователи.Найти(УдаляемыйПользователь) = Неопределено Тогда
				НайденныеСтроки = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", УдаляемыйПользователь));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Объект.СвоиЛица.Удалить(НайденнаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
			ДатаВремяНачало		= МинимальнаяВыбраннаяДата;
			ДатаВремяОкончание		= МаксимальнаяВыбраннаяДата;
			ДатаВремяНачалоПриИзменении();
			ДатаВремяОкончаниеПриИзменении();
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // ОбработкаПодбораУчастников()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "НаВесьДень".
//
Процедура НаВесьДеньПриИзменении(Элемент)
	НастроитьВидимостьИДоступностьФормы();
	Если Объект.НаВесьДень Тогда
		УстановитьВремяНачалоВремяОкончание();
		СкорректироватьДатуВремя(Ложь);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // НаВесьДеньПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ДатаНачало".
//
Процедура ДатаНачалоПриИзменении(Элемент)
	СкорректироватьДатуВремя(Истина);
	ПересчитатьДатыОповещений();
	Модифицированность = Истина;
КонецПроцедуры // ДатаНачалоПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ДатаОкончание".
//
Процедура ДатаОкончаниеПриИзменении(Элемент)
	СкорректироватьДатуВремя(Ложь);
	ПересчитатьДатыОповещений();
	Модифицированность = Истина;
КонецПроцедуры // ДатаОкончаниеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ВремяНачало".
//
Процедура ВремяНачалоПриИзменении(Элемент)
	СкорректироватьДатуВремя(Истина);
	ПересчитатьДатыОповещений();
	Модифицированность = Истина;
КонецПроцедуры // ВремяНачалоПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ВремяОкончание".
//
Процедура ВремяОкончаниеПриИзменении(Элемент)
	СкорректироватьДатуВремя(Ложь);
	ПересчитатьДатыОповещений();
	Модифицированность = Истина;
КонецПроцедуры // ВремяОкончаниеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ВремяНачало".
//
Процедура ВремяНачалоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("Данные", "ВремяНачало");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяНачало, Элемент,,, ОписаниеОповещения);
КонецПроцедуры // ВремяНачалоНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ВремяОкончание".
//
Процедура ВремяОкончаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("Данные", "ВремяОкончание");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	Если НачалоДня(ДатаНачало) = НачалоДня(ДатаОкончание) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент, ВремяНачало, Истина, ОписаниеОповещения);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент,,, ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры // ВремяОкончаниеНачалоВыбора()

&НаКлиенте
// Процедура обработки выбора времени из списка.
//
Процедура ОбработкаОповещенияВыбранногоВремени(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ЭтотОбъект[Дополнительно.Данные] = ВыбранноеВремя.Значение;
		ВремяНачалоПриИзменении(Дополнительно.Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик выбора места.
//
// Параметры:
//	РезультатВыбора			- СправочникСсылка	- Результат выбора места.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораМеста(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	Объект.Место = СокрЛП(РезультатВыбора);
	Если ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.CRM_Помещения") Тогда
		Объект.Помещение					= РезультатВыбора;
		Элементы.Место.РедактированиеТекста	= Ложь;
	Иначе
		Объект.Помещение					= ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
		Элементы.Место.РедактированиеТекста	= Истина;
	КонецЕсли;
КонецПроцедуры // ОбработкаВыбораМеста()	

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "Место".
//
Процедура МестоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура();
	ОповещениеВыбораМеста	= Новый ОписаниеОповещения("ОбработкаВыбораМеста", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы			= Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ОткрытьФорму("Справочник.CRM_Помещения.ФормаВыбора", ПараметрыФормы, Элемент, , , , ОповещениеВыбораМеста);
КонецПроцедуры // МестоНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Очистка" элемента формы "Место".
//
Процедура МестоОчистка(Элемент, СтандартнаяОбработка)
	Объект.Помещение = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
	Элементы.Место.РедактированиеТекста = Истина;
КонецПроцедуры // МестоОчистка()

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" элемента формы "Место".
//
Процедура МестоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//Массив = ВернутьПомещенияПоТексту(Текст);
	//СписокПодбора = Новый СписокЗначений;
	//Для Каждого Стр Из Массив Цикл
	//	СписокПодбора.Добавить(Стр);		
	//КонецЦикла;
	//ДанныеВыбора = СписокПодбора;
	
КонецПроцедуры // МестоАвтоПодбор()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "Помещение".
//
Процедура ПомещениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект.Место = СокрЛП(ВыбранноеЗначение);
	Элементы.Место.РедактированиеТекста = Ложь;
КонецПроцедуры // ПомещениеОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Ответственный".
//
Процедура ОтветственныйПриИзменении(Элемент)
	Объект.Подразделение = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Ответственный, "Подразделение");
	Объект.ОтветственныйПосетитМероприятие	= 1;	
КонецПроцедуры // ОтветственныйПриИзменении()

&НаКлиенте
Процедура СторонниеЛицаПриИзменении(Элемент)
	//+вог
	ЗаполнитьРеквизитыФормыСтороннихЛиц(ЭтотОбъект);	
	//-вог	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаПослеУдаления(Элемент)
	//+вог
	ЗаполнитьРеквизитыФормыСтороннихЛиц(ЭтотОбъект);	
	//-вог	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "СторонниеЛицаПартнер".
//
Процедура СторонниеЛицаПартнерПриИзменении(Элемент)
	ТД = Элементы.СторонниеЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ПриИзмененииПартнераКонтакногоЛица(ТД, Истина);
КонецПроцедуры // СторонниеЛицаПартнерПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "СторонниеЛицаКонтактноеЛицо".
//
Процедура СторонниеЛицаКонтактноеЛицоПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.СторонниеЛица.ТекущиеДанные;
	ПриИзмененииПартнераКонтакногоЛица(ТекущаяСтрока);
КонецПроцедуры // СторонниеЛицаКонтактноеЛицоПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "СторонниеЛицаТелефон".
//
Процедура СторонниеЛицаТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СторонниеЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	ТД);
	ОписаниеВыбораТелефона	= Новый ОписаниеОповещения("ОбработкаВыбораТелефона", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура;
	СтруктураПоиска.Вставить("Партнер",			ТД.Партнер); 
	СтруктураПоиска.Вставить("ТорговаяТочка",	ТД.вогТорговаяТочка); 
	СтруктураПоиска.Вставить("КонтактноеЛицо",	ТД.КонтактноеЛицо); 
	СписокТелефонов			= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	ПоказатьВыборИзСписка(ОписаниеВыбораТелефона, СписокТелефонов, Элемент);
КонецПроцедуры // СторонниеЛицаТелефонНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "СторонниеЛицаАдрес".
//
Процедура СторонниеЛицаАдресПриИзменении(Элемент)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если НЕ (РезультатПроверки.КодОшибки = 0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры // СторонниеЛицаАдресПриИзменении(

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "СторонниеЛицаАдрес".
//
Процедура СторонниеЛицаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СторонниеЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	ТД);
	ДополнительныеПараметры.Вставить("СвоеЛицо",		Ложь);
	ОписаниеВыбораАдреса	= Новый ОписаниеОповещения("ОбработкаВыбораАдреса", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура;
	СтруктураПоиска.Вставить("Партнер",			ТД.Партнер); 
	СтруктураПоиска.Вставить("ТорговаяТочка",	ТД.вогТорговаяТочка); 
	СтруктураПоиска.Вставить("КонтактноеЛицо",	ТД.КонтактноеЛицо); 
	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	ПоказатьВыборИзСписка(ОписаниеВыбораАдреса, СписокАдресов, Элемент);
КонецПроцедуры // СторонниеЛицаАдресНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "СторонниеЛицаАдрес".
//
Процедура СторонниеЛицаАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(ВыбранноеЗначение));
	Если НЕ (РезультатПроверки.КодОшибки = 0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры // СторонниеЛицаАдресОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "СторонниеЛицаАдрес".
//
Процедура СторонниеЛицаАдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ТД = Элементы.СторонниеЛица.ТекущиеДанные;
	ТД.ПредставлениеАдреса	= Строка(ТД.Партнер) + " <" + Текст + ">";
КонецПроцедуры // СторонниеЛицаАдресОкончаниеВводаТекста()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" таблицы формы "СвоиЛица".
//
Процедура СвоиЛицаПриИзменении(Элемент)
	ИзмененСоставУчастников = Истина;
КонецПроцедуры // СвоиЛицаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "СвоиЛица".
//
Процедура СвоиЛицаПриАктивизацииСтроки(Элемент)
	
	//УстановитьПометкуУчастия();
	//Если Элементы.СвоиЛица.ТекущиеДанные <> Неопределено тогда
	//	Если ТекущийПользователь <> Элементы.СвоиЛица.ТекущиеДанные.Лицо  И ТекущийПользователь <> объект.Ответственный тогда
	//		Элементы.СвоиЛицаПосещениеМероприятия.Видимость = Ложь;
	//		Элементы.СвоиЛицаМероприятиеДа.Видимость = Ложь; 
	//		Элементы.СвоиЛицаМероприятиеМожетБыть.Видимость = Ложь;
	//		Элементы.СвоиЛицаМероприятиеНет.Видимость = Ложь;
	//	Иначе
	//		Элементы.СвоиЛицаПосещениеМероприятия.Видимость = Истина;
	//		Элементы.СвоиЛицаМероприятиеДа.Видимость = Истина; 
	//		Элементы.СвоиЛицаМероприятиеМожетБыть.Видимость = Истина;
	//		Элементы.СвоиЛицаМероприятиеНет.Видимость = истина;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "СвоиЛицаЛицо".
//
Процедура СвоиЛицаЛицоПриИзменении(Элемент)
	ТД = Элементы.СвоиЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ПриИзмененииЛица(ТД);
КонецПроцедуры // СвоиЛицаЛицоПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "СвоиЛицаТелефон".
//
Процедура СвоиЛицаТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СвоиЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	ТД);
	ОписаниеВыбораТелефона	= Новый ОписаниеОповещения("ОбработкаВыбораТелефона", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура("ОбъектКонтактнойИнформации", ТД.Лицо); 
	СписокТелефонов			= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	ПоказатьВыборИзСписка(ОписаниеВыбораТелефона, СписокТелефонов, Элемент);
КонецПроцедуры // СвоиЛицаТелефонНачалоВыбора()
 
&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "СвоиЛицаАдрес".
//
Процедура СвоиЛицаАдресПриИзменении(Элемент)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если НЕ (РезультатПроверки.КодОшибки = 0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры // СвоиЛицаАдресПриИзменении()
 
&НаКлиенте
Процедура СвоиЛицаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СвоиЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	ТД);
	ДополнительныеПараметры.Вставить("СвоеЛицо",		Истина);
	ОписаниеВыбораАдреса	= Новый ОписаниеОповещения("ОбработкаВыбораАдреса", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура("ОбъектКонтактнойИнформации", ТД.Лицо); 
	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	ПоказатьВыборИзСписка(ОписаниеВыбораАдреса, СписокАдресов, Элемент);
КонецПроцедуры // СвоиЛицаАдресНачалоВыбора()
 
&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "СвоиЛицаАдрес".
//
Процедура СвоиЛицаАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(ВыбранноеЗначение));
	Если НЕ (РезультатПроверки.КодОшибки =  0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры // СвоиЛицаАдресОбработкаВыбора()
 
&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "ОкончаниеВводаТекста".
//
Процедура СвоиЛицаАдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ТД = Элементы.СвоиЛица.ТекущиеДанные;
	ТД.ПредставлениеАдреса	= Строка(ТД.Лицо) + " <" + Текст + ">";
КонецПроцедуры // СвоиЛицаАдресОкончаниеВводаТекста()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Периодическое".
//
Процедура ПериодическоеПриИзменении(Элемент)
	Если Объект.Периодическое Тогда
		Если НЕ ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			СоздатьНовыйЭлементРядСобытий();
		ИначеЕсли НЕ Объект.Ссылка.Пустая() Тогда
			Если Объект.ИзмененоВРяде Тогда
				РядСобытийСтарый = Объект.РядСобытий;
				Объект.РядСобытий = ПредопределенноеЗначение("Справочник.CRM_РядыСобытий.ПустаяСсылка");
				СоздатьНовыйЭлементРядСобытий();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ Объект.Ссылка.Пустая() И Объект.ИзмененоВРяде И ЗначениеЗаполнено(РядСобытийСтарый) Тогда
			Объект.РядСобытий = РядСобытийСтарый;
		КонецЕсли;
		НастроитьВидимостьИДоступностьФормы();
	КонецЕсли;
	
КонецПроцедуры // ПериодическоеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "РядСобытийНаименование".
//
Процедура РядСобытийНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.РядСобытий) Тогда
		СоздатьНовыйЭлементРядСобытий();
	Иначе
		ОткрытьФормуРасписания();
	КонецЕсли;
КонецПроцедуры // РядСобытийНаименованиеНажатие()

//+вог
&НаКлиенте
Процедура вогВидВзаимодействияПриИзменении(Элемент)
	
	вогВидВзаимодействияПриИзмененииНаСервере();
	ОтрисоватьКатегорииНаФорме();
	ПолучитьПараметрыВидаВзаимодействия();
	НастроитьЭлементыФормы(ЭтотОбъект);
	НастроитьПроверкуЗаполнения(); //Сергей Иванов task 564 +
	
КонецПроцедуры
//-вог

&НаСервере
Процедура вогВидВзаимодействияПриИзмененииНаСервере()
	
	Объект.Категории.Очистить();
	Стр = Объект.Категории.Добавить();
	Стр.Категория = Объект.вогВидВзаимодействия.Категория;
	Объект.ОсновнаяКатегория = Объект.вогВидВзаимодействия.Категория;
	
	// ++ VOG Ульянов И.В. 17.01.2020 CRM-145
	Если Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСТТ") тогда		
		Объект.Помещение = ПолучитьПомещениеПоНаименованию("ОфисКлиента");
		Объект.Место = СокрЛП(Объект.Помещение);
		// ++ VOG Ульянов И.В. 20.03.2020 CRM-380
		Для каждого Стр из Объект.СторонниеЛица цикл
			Стр.Партнер = Справочники.Партнеры.ПустаяСсылка();
		КонецЦикла;	
		// -- VOG Ульянов И.В. 20.03.2020 CRM-380
	КонецЕсли;		
	
	// ++ VOG Ульянов И.В. 20.03.2020 CRM-380
	Если Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом") тогда		
		Для каждого Стр из Объект.СторонниеЛица цикл
			Стр.вогТорговаяТочка = Справочники.вогТорговыеТочки.ПустаяСсылка();
		КонецЦикла;			
	КонецЕсли;		
	// -- VOG Ульянов И.В. 20.03.2020 CRM-380
	
	//Элементы.Город.Видимость = Не Объект.вогВидВзаимодействия.Пустая() И Не Объект.Помещение.Пустая() И Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом") И Объект.Помещение = ПолучитьПомещениеПоНаименованию("НейтральнаяТерритория");
	//Если Не Элементы.Город.Видимость Тогда
	//	Объект.Город = Неопределено;
	//КонецЕсли;
	// -- VOG Ульянов И.В. 17.01.2020 CRM-145
	
	//Павелко, Таск 000000945, 26.11.2019+++
//	Если Не Объект.СторонниеЛица.Количество() = 0 Тогда
	Если Не Объект.СторонниеЛица.Количество() = 0 или
		Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("Обучение") Тогда  // ++ VOG Ульянов И.В. 31.03.2020 CRM-462
		// ++ VOG Ульянов И.В. 17.01.2020 CRM-145
		//Элементы.МесторасположениеОфисаКлиента.Видимость = УстановленаНадписьМесторасположениеОфисаКлиента(Объект.СторонниеЛица[0].Партнер, Объект.вогВидВзаимодействия, Объект.Помещение, МесторасположениеОфисаКлиента, СтруктураАдресаОфисаКлиента);
		ОбновитьПредставлениеАдреса();
		// -- VOG Ульянов И.В. 17.01.2020 CRM-145
	КонецЕсли;
	
	//Элементы.Город.Видимость = Не Объект.вогВидВзаимодействия.Пустая() И Не Объект.Помещение.Пустая() 
	//							И Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом") И Объект.Помещение = ПолучитьПомещениеПоНаименованию("НейтральнаяТерритория");
	//							
	//Если Не Элементы.Город.Видимость Тогда
	//	Объект.Город = Неопределено;
	//КонецЕсли;
	
	Элементы.ГруппаПредставительскиеРасходы.Видимость = Объект.вогВидВзаимодействия.ВозможностьУказатьПредставительскиеРасходы;
	Если Не Элементы.ПредставительскиеРасходы.Видимость Тогда
		Объект.ПредставительскиеРасходы = 0;
		Объект.вогНазначение = "";
	КонецЕсли;	
	//Павелко, Таск 000000945, 26.11.2019---
	
КонецПроцедуры

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик команды формы "УстановитьФлажки".
//
Процедура УстановитьФлажки(Команда)
	Если Команда.Имя = "СторонниеЛицаУстановитьВсеФлажки" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", , Истина);
	ИначеЕсли Команда.Имя = "СторонниеЛицаУстановитьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", "ОтправлятьСМС", Истина);
	ИначеЕсли Команда.Имя = "СторонниеЛицаУстановитьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", "ОтправлятьПоПочте", Истина);
	ИначеЕсли Команда.Имя = "СвоиЛицаУстановитьВсеФлажки" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", , Истина);
	ИначеЕсли Команда.Имя = "СвоиЛицаУстановитьФлажкиНапоминания" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьНапоминания", Истина);
	ИначеЕсли Команда.Имя = "СвоиЛицаУстановитьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьСМС", Истина);
	ИначеЕсли Команда.Имя = "СвоиЛицаУстановитьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьПоПочте", Истина);
	КонецЕсли;
КонецПроцедуры // УстановитьФлажки()

&НаКлиенте
// Процедура - обработчик команды формы "СнятьФлажки".
//
Процедура СнятьФлажки(Команда)
	Если Команда.Имя = "СторонниеЛицаСнятьВсеФлажки" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", , Ложь);
	ИначеЕсли Команда.Имя = "СторонниеЛицаСнятьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица","ОтправлятьСМС",Ложь);
	ИначеЕсли Команда.Имя = "СторонниеЛицаСнятьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", "ОтправлятьПоПочте", Ложь);
	ИначеЕсли Команда.Имя = "СвоиЛицаСнятьВсеФлажки" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", , Ложь);
	ИначеЕсли Команда.Имя = "СвоиЛицаСнятьФлажкиНапоминания" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьНапоминания", Ложь);
	ИначеЕсли Команда.Имя = "СвоиЛицаСнятьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьСМС", Ложь);
	ИначеЕсли Команда.Имя = "СвоиЛицаСнятьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьПоПочте", Ложь);
	КонецЕсли;
КонецПроцедуры // СнятьФлажки()

&НаКлиенте
// Процедура - обработчик команды формы "ПодобратьМесто".
//
Процедура ПодобратьМесто(Команда)
	ДополнительныеПараметры		= Новый Структура;
	ОписаниеПодбораМеста		= Новый ОписаниеОповещения("ОбработкаПодбораМеста", ЭтотОбъект, ДополнительныеПараметры); 
	ПараметрыСтруктура			= Новый Структура();
	ПараметрыСтруктура.Вставить("Место",							Объект.Помещение);
	ПараметрыСтруктура.Вставить("ПериодНачало",						ДатаВремяНачало);
	ПараметрыСтруктура.Вставить("ПериодОкончание",					ДатаВремяОкончание);
	ПараметрыСтруктура.Вставить("ВыбиратьПериоды");
	ПараметрыСтруктура.Вставить("ЗакрыватьФормуПослеВыбораПериодов");
	ПараметрыСтруктура.Вставить("ПоказыватьПериодДокумента");
	ПараметрыСтруктура.Вставить("ИнтервалШкалыВремени",				30);
	ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоКалендарю",	ПараметрыСтруктура, ЭтотОбъект, , , , ОписаниеПодбораМеста);
КонецПроцедуры // ПодобратьМесто()

&НаКлиенте
// Процедура - обработчик команды формы "ПодобратьУчастников".
//
Процедура ПодобратьУчастников(Команда)
	МассивУчастников			= ПолучитьМассивУчастников();
	ДополнительныеПараметры		= Новый Структура("МассивУчастников", МассивУчастников);
	ОписаниеПодбораУчастников	= Новый ОписаниеОповещения("ОбработкаПодбораУчастников", ЭтотОбъект, ДополнительныеПараметры); 
	ПараметрыСтруктура			= Новый Структура();
	ПараметрыСтруктура.Вставить("Пользователи",						МассивУчастников);
	ПараметрыСтруктура.Вставить("ПериодНачало",						ДатаВремяНачало );
	ПараметрыСтруктура.Вставить("ПериодОкончание",					ДатаВремяОкончание );
	ПараметрыСтруктура.Вставить("ВыбиратьПериоды");
	ПараметрыСтруктура.Вставить("ЗакрыватьФормуПослеВыбораПериодов");
	ПараметрыСтруктура.Вставить("ПоказыватьПериодДокумента");
	ПараметрыСтруктура.Вставить("ИнтервалШкалыВремени",				30);
	ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоКалендарю",	ПараметрыСтруктура, ЭтотОбъект, , , , ОписаниеПодбораУчастников);
КонецПроцедуры // ПодобратьУчастников()

&НаКлиенте
// Процедура - обработчик команды формы "ДобавитьФизЛицо".
//
Процедура ДобавитьФизЛицо(Команда)
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);	
	ОписаниеВыбораФизЛица	= Новый ОписаниеОповещения("ОбработкаВыбораСвоиЛица", ЭтотОбъект);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,,ОписаниеВыбораФизЛица,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ДобавитьФизЛицо()

&НаКлиенте
Процедура ДобавитьПользователя(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыборГруппПользователей", Ложь);
	ОписаниеВыбораФизЛица	= Новый ОписаниеОповещения("ОбработкаВыбораСвоиЛица", ЭтотОбъект);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,,ОписаниеВыбораФизЛица,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "УчастиеВМероприятии".
//
Процедура УчастиеВМероприятии(Команда)
	
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Элементы.СвоиЛицаМероприятиеДа.Пометка = Ложь;
	Элементы.СвоиЛицаМероприятиеМожетБыть.Пометка = Ложь;
	Элементы.СвоиЛицаМероприятиеНет.Пометка = Ложь;
	Для каждого Строка из Объект.СвоиЛица цикл
		Если Строка.Лицо = ТекПользователь тогда
			Если Команда.Имя = "МероприятиеДа" Тогда
				Строка.ПосетитМероприятие = 1;	
				Элементы.СвоиЛицаМероприятиеДа.Пометка = Истина;
			ИначеЕсли Команда.Имя = "МероприятиеМожетБыть" Тогда
				Строка.ПосетитМероприятие = 2;	
				Элементы.СвоиЛицаМероприятиеМожетБыть.Пометка = Истина;
			ИначеЕсли Команда.Имя = "МероприятиеНет" Тогда
				Если Строка.Обязательно тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Вы являетесь обязательным участником мероприятия";
					Сообщение.Сообщить();
					Продолжить;
				КонецЕсли;
				Строка.ПосетитМероприятие = 0;	
				Элементы.СвоиЛицаМероприятиеНет.Пометка = Истина;
			КонецЕсли;
		КонецЕслИ;
	КонецЦикла;
	
	Записать();	
	
КонецПроцедуры // УчастиеВМероприятии()

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	//START Кайдашов 02/07/19
	CRM_ОбщегоНазначенияСервер.УстановитьКнопкиПечати(Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя(), ЭтотОбъект);
	// СтандартныеПодсистемы.Печать
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	//END Кайдашов
	
	//+вог
	ТекущийПользователь  = Пользователи.ТекущийПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	//-вог
	
	// ++ VOG Солодов В.В. 06.08.2019 task 464
	ДокументОткрытАссистентом(Отказ);
	// -- VOG Солодов В.В. 06.08.2019
	
	ДанныеВзаимодействия = Неопределено;
	Если Параметры.Свойство("ДанныеВзаимодействия", ДанныеВзаимодействия) ИЛИ ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.CRM_Мероприятие")).ДополнительныеСвойства.Свойство("ДанныеВзаимодействия", ДанныеВзаимодействия) Тогда
		ЗаполнитьЗначенияСвойств(Объект, ДанныеВзаимодействия);
		Если ДанныеВзаимодействия.Свойство("Партнер") Тогда
			СтрокаСторонниеЛица = Объект.СторонниеЛица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСторонниеЛица, ЭтотОбъект.Параметры.ДанныеВзаимодействия);
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Если ЗначениеЗаполнено(Параметры.Основание.Партнер) Тогда
			СтрокаСторонниеЛица = Объект.СторонниеЛица.Добавить();
			СтрокаСторонниеЛица.Партнер = Параметры.Основание.Партнер;
			СтрокаСторонниеЛица.КонтактноеЛицо = Параметры.Основание.КонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	Если ЭтотОбъект.Параметры.Свойство("Взаимодействие") Тогда
		ЭтотОбъект.Взаимодействие	= ЭтотОбъект.Параметры.Взаимодействие;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
			Объект.Автор = Пользователи.АвторизованныйПользователь(); 
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(Объект.Инициатор) Тогда
			Объект.Инициатор = Пользователи.АвторизованныйПользователь(); 
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
			Объект.Подразделение	= Объект.Ответственный.Подразделение;
			Объект.ОтветственныйПосетитМероприятие	= 1;
			Объект.РольОтветственного = Справочники.вогРолиУчастникаМероприятия.Администратор;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.Дата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();			
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(Объект.ОкончаниеМероприятия) Тогда
			Объект.ОкончаниеМероприятия = Объект.Дата + 3600;			
		КонецЕсли;	
		//Если ЗначениеЗаполнено(Объект.ДокументОснование) И Объект.ДокументОснование.ПолучитьОбъект() = Неопределено Тогда
		//	ТребуетсяПредварительноЗаписатьИнтерес = Истина;
		//	
		//КонецЕсли;
		
		Если Параметры.Свойство("ЗаполняемИзПланировщика") Тогда
			Объект.Дата					= Параметры.Дата;
			Объект.ОкончаниеМероприятия	= Параметры.ОкончаниеМероприятия;
			Объект.Тема					= Параметры.Тема;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Состояние) Тогда
			Объект.Состояние = Справочники.CRM_СостоянияСобытий.ВСтадииПодготовки;
		КонецЕсли;
		Элементы.вогПротокол.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("Начало") Тогда
		Объект.Дата = Параметры.Начало;
	КонецЕсли;
	Если Параметры.Свойство("Окончание") Тогда
		Объект.ОкончаниеМероприятия = Параметры.Окончание;
	КонецЕсли;
	Если Параметры.Свойство("Наименование") Тогда
		Объект.Тема = Параметры.Наименование;
	КонецЕсли;
	ОтрисоватьКатегорииНаФорме();
	
	//+вог
	Если Не Параметры.Свойство("НеЗаполнятьГруппуОповещений") Тогда
	
		ЗаполнитьГруппуОповещений();
	КонецЕсли;
	//-вог
	ПериодическоеСтароеЗначение = Объект.Периодическое;
	
	ПредставлениеДокументаОснования = Формат(Объект.ДокументОснование);
	Элементы.ДокументОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	//+вог
	
	//CRM_ОбщегоНазначенияСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, Объект, "ГруппаИнтерес", ТипЗнч(Объект.Ссылка));
	//CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, Истина, , ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	//CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);
	//-вог
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
		Объект.Подразделение	= Объект.Ответственный.Подразделение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение	= Объект.Ответственный.Подразделение;
	КонецЕсли;
	
	// +GOOGLE
	Если ПолучитьФункциональнуюОпцию("CRM_СинхронизироватьКалендарьСКалендаремGoogle") Тогда
		Элементы.ГруппаИнтеграцияGoogleCalendar.Видимость = Истина;
	Иначе
		Элементы.ГруппаИнтеграцияGoogleCalendar.Видимость = Ложь;
	КонецЕсли;
	// -GOOGLE
	
	// Устанавливаем отбор по подразделению для тегов
	// подразделение из текущего пользователя.
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", ТекущийПользователь.Подразделение);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.Тег.ПараметрыВыбора = НовыеПараметры;
	
	//+вог
	
	//СформироватьПредставлениеВложений();
	//-вог
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	//+вог
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПолучитьПараметрыВидаВзаимодействия();
	КонецЕсли;
	
	Если Не Параметры.Свойство("ОтложеннаяИнициализация", ОтложеннаяИнициализация) Тогда
		ЗаполнитьРеквизитыФормыСтороннихЛиц(ЭтотОбъект);
	КонецЕсли;

	НастроитьЭлементыФормы(ЭтотОбъект);

	УстановитьОформлениеЗадач(ЗадачаИсполнителяСписок.КомпоновщикНастроек.Настройки.УсловноеОформление);
	УстановитьПараметрыЗадач();	
	Если ПараметрыВидаВзаимодействия.ИспользоватьСписокЗадач Тогда
		ЗадачиСписокУстановитьОтбор(ЭтотОбъект);
	КонецЕсли;
	//-вог
	
	ВывестиДлительностьВПрограмме();
	ВывестиПротоколМероприятия();
	ДатаОтсчетаДляРасчетаСроков = ТекущаяДата();
	ОтборОбсуждения = Новый ОтборОбсужденийСистемыВзаимодействия;
	ОтборОбсуждения.КонтекстОбсуждения = Новый КонтекстОбсужденияСистемыВзаимодействия(ПолучитьНавигационнуюСсылку(Объект.Ссылка));
	ОтборОбсуждения.КонтекстноеОбсуждение = Истина;
	Попытка
	СписокОбсуждений = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждения);
	Если СписокОбсуждений.Количество()>0 тогда
		Элементы.ГруппаЕстьОбсуждение.Видимость = Истина;
	Иначе
		Элементы.ГруппаЕстьОбсуждение.Видимость = Ложь;
	КонецЕсли;
	Исключение
	КонецПопытки;
	
	//Павелко, Таск 000000794, 08.11.2019 - Перенесено из ПриЧтенииНаСервере и добавлена проверка на количество тегов +++
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги") И Не Объект.CRM_Теги.Количество() = 0 Тогда
		Подключаемый_ОбновитьОблакоТегов();
	Иначе
		Элементы.ОблакоТегов.Видимость = Ложь;
	КонецЕсли;
	//Павелко, Таск 000000794, 08.11.2019 ---
	
	//Павелко, Таск 000000945, 26.11.2019+++
	СтруктураАдресаОфисаКлиента = Новый Структура("Представление, Широта, Долгота");
	
	// ++ VOG Ульянов И.В. 17.01.2020 CRM-145
	Если Объект.АдресПредставление <> "" тогда
		СтруктураАдресаОфисаКлиента.Представление = Объект.АдресПредставление;
		СтруктураАдресаОфисаКлиента.Широта = Объект.АдресШирота;
		СтруктураАдресаОфисаКлиента.Долгота = Объект.АдресДолгота;
	КонецЕсли;	
	// -- VOG Ульянов И.В. 17.01.2020 CRM-145
	
	Если Не Объект.СторонниеЛица.Количество() = 0 Тогда
		// ++ VOG Ульянов И.В. 17.01.2020 CRM-145
		//Элементы.МесторасположениеОфисаКлиента.Видимость = УстановленаНадписьМесторасположениеОфисаКлиента(Объект.СторонниеЛица[0].Партнер, Объект.вогВидВзаимодействия, Объект.Помещение, МесторасположениеОфисаКлиента, СтруктураАдресаОфисаКлиента);
		ОбновитьПредставлениеАдреса();
		// -- VOG Ульянов И.В. 17.01.2020 CRM-145
	КонецЕсли;
	
	//Элементы.Город.Видимость = Не Объект.вогВидВзаимодействия.Пустая() И Не Объект.Помещение.Пустая() 
	//							И Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом") И Объект.Помещение = ПолучитьПомещениеПоНаименованию("НейтральнаяТерритория");
	
	Элементы.ГруппаПредставительскиеРасходы.Видимость = Объект.вогВидВзаимодействия.ВозможностьУказатьПредставительскиеРасходы;
	//Павелко, Таск 000000945, 26.11.2019---
	
	ПроверитьНаличиеКомандировокПоМероприятию();  // VOG Ульянов И.В. 20.03.2020 CRM-380
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	
	
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы(ЭтотОбъект);
	//START Кайдашов 03/07/19 436
	УправлениеВидимостьюПоПрограмме();
	Если Объект.СторонниеЛица.Количество()>1 тогда
		Элементы.ГруппаСторонниеЛица.Видимость = Истина;
		Элементы.НадписьНесколькоКонтактныхЛиц.Видимость = Ложь;
		Элементы.ГруппаСторонниеЛицаКонтактноеЛицо.Видимость = Ложь;
	КонецЕсли;
	
	Для каждого Строка из Объект.СторонниеЛица цикл
		Если ЗначениеЗаполнено(Строка.КонтактноеЛицо) тогда
			ЗаполнитьОписаниеДолжности(Строка);	
		КонецЕсли;
	КонецЦикла;
	//END Кайдашов
	// Если текущий пользователь есть в участниках, то позиционируемся на него.
	ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	МассивСтрок = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ТекПользователь));
	Если МассивСтрок.Количество() > 0 Тогда
		//ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаУчастники;
		Элементы.СвоиЛица.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	НастроитьВидимостьИДоступностьФормы();
	
	// +GOOGLE
	УправлениеНастройкамиСобытияGoogle();
	// -GOOGLE
	
	//+вог
	//CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	//CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваКоманднойПанелиИнтересовВФормеДокумента(ЭтотОбъект);
	
	//Если Объект.Ссылка.Пустая() И Объект.СторонниеЛица.Количество()>0 Тогда
	//	Для каждого ТекущаяСтрока из Объект.СторонниеЛица Цикл
	//		ПриИзмененииПартнераКонтакногоЛица(ТекущаяСтрока);
	//	КонецЦикла;
	//КонецЕсли;
	Если ОтложеннаяИнициализация Тогда
		ЗаполнитьРеквизитыФормыСтороннихЛиц(ЭтотОбъект);
	КонецЕсли;
	//-вог
	НастроитьПроверкуЗаполнения(); //+ VOG Иванов С.А. 02.10.2019 task 564
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//Если ТребуетсяПредварительноЗаписатьИнтерес Тогда
	//	Отказ = Истина;
	//	ОП = Новый ОписаниеОповещения("ОбработчикОповещенияЗаписиИнтереса", ЭтотОбъект);
	//	ПоказатьВопрос(ОП, "Требуется записать интерес. Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	//КонецЕсли;
	//
	
	
	//ДатаНовая				= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	//ОкончаниеСобытияНовое	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
	ДатаНовая = ДатаВремяНачало;
	ОкончаниеСобытияНовое = ДатаВремяОкончание;
	Объект.Дата					= ДатаНовая;
	Объект.ОкончаниеМероприятия	= ОкончаниеСобытияНовое;
	
	Если Не ВопросИзмененияЗадавался Тогда
		ПериодическоеСобытиеСпособИзмененияРяда = "";
		
		Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			бПризнакИзмененоВРяде = Неопределено;
			Если Объект.Периодическое И НЕ Объект.ИзмененоВРяде И НЕ ПризнакПериодическоеСобытиеИнициализация Тогда
				// Проверка на то, что даты были изменены больше чем на день - для периодического события это означает установку
				// флага ИзмененоВРяде.
				ДатаСтарая				= Объект.Дата;
				ОкончаниеСобытияСтарое	= Объект.ОкончаниеМероприятия;
				бИзмененаДатаНачала		= НЕ (НачалоДня(ДатаСтарая) = НачалоДня(ДатаНовая));
				бИзмененаДатаОкончания	= НЕ (НачалоДня(ОкончаниеСобытияСтарое) = НачалоДня(ОкончаниеСобытияНовое));
				Если бИзмененаДатаНачала ИЛИ бИзмененаДатаОкончания Тогда
					бПризнакИзмененоВРяде = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			Если Не ПризнакПериодическоеСобытиеИнициализация Тогда
				Если Объект.Периодическое Тогда
					Если НЕ Объект.ИзмененоВРяде И (бПризнакИзмененоВРяде = Истина) Тогда
						Объект.ИзмененоВРяде = Истина;
					КонецЕсли;
				ИначеЕсли ПериодическоеСтароеЗначение И НЕ Объект.ИзмененоВРяде Тогда
					// Снята пометка "Периодическое".
					ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда";
				КонецЕсли;
				Если Объект.Периодическое И НЕ Объект.ИзмененоВРяде Тогда
					Если ПризнакПериодическоеСобытиеИнициализация Тогда
						ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд";
					Иначе
						Если НЕ Модифицированность И НЕ ПризнакИзмененоРасписание Тогда
							ПериодическоеСобытиеСпособИзмененияРяда = "";
						Иначе
							ПараметрыФормы = Новый Структура("ДоступныеДействия", Новый Массив());
							Если НЕ ПризнакИзмененоРасписание Тогда
								ПараметрыФормы.ДоступныеДействия.Добавить("ТолькоТекущее");
							КонецЕсли;
							ПараметрыФормы.ДоступныеДействия.Добавить("ДоКонцаРяда");
							ПараметрыФормы.ДоступныеДействия.Добавить("ВесьРяд");
							
							Отказ = Истина;
							ОП = Новый ОписаниеОповещения("ОбработчикОповещенияСпособаИзмененияРяда", ЭтотОбъект);
							ОткрытьФорму("Документ.CRM_Мероприятие.Форма.ФормаИзменениеПериодическогоСобытия", ПараметрыФормы, ЭтотОбъект,,,,ОП, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
							Возврат;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	
	//+GOOGLE
	// 1С не поддреживает Patch запрос, с помощью которого можно обновить "чужое событие"
	Если ЗначениеЗаполнено(Объект.ОрганизаторGApi) И НЕ (Объект.ОрганизаторGApi = Объект.Ответственный) Тогда
		Состояние(НСтр("ru='Автором данного события является < " + ЭтотОбъект.Объект.ОрганизаторGApi + ">. Все изменения отобразятся только в CRM-календаре пользователя.'"));
	КонецЕсли;
	//-GOOGLE
	
	
	Если ЗначениеЗаполнено(ДатаВремяНачало) и ЗначениеЗаполнено(ДатаВремяОкончание) тогда
		Если ДатаВремяОкончание<=ДатаВремяНачало тогда
			предупр = Новый СообщениеПользователю;
			предупр.УстановитьДанные(ДатаВремяОкончание);
			предупр.Текст = "Дата и время окончания раньше чем дата начала мероприятия";
			предупр.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтотОбъект.Модифицированность И ВопросИзмененияЗадавался Тогда
		ВопросИзмененияЗадавался = Ложь;
		ЭтотОбъект.Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

&НаКлиенте
Процедура ОбработчикОповещенияСпособаИзмененияРяда(Параметры, Дополнительно) Экспорт
	Если Параметры <> Неопределено Тогда
		Если Параметры.ПринятьИзменения = Истина Тогда 
			ПериодическоеСобытиеСпособИзмененияРяда = Параметры.СпособИзмененияРяда;
			ВопросИзмененияЗадавался = Истина;
			Записать();
		Иначе
			ВопросИзмененияЗадавался = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// &НаКлиенте
//Процедура ОбработчикОповещенияЗаписиИнтереса(Параметры, Дополнительно) Экспорт
//	Если Параметры <> Неопределено Тогда
//		Если Параметры =  КодВозвратаДиалога.Да Тогда
//			ТребуетсяПредварительноЗаписатьИнтерес = Ложь;
//			Оповестить("ЗаписатьИнтерес", ЭтотОбъект.ВладелецФормы.УникальныйИдентификатор);
//			Записать();
//		КонецЕсли;
//	КонецЕсли
//КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПередЗаписьюНаСервере".
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	//+вог
	//ТекущийОбъект.СторонниеЛица.Свернуть("Партнер,КонтактноеЛицо,Адрес,ПредставлениеАдреса,Принадлежность,Телефон","ОтправлятьСМС,ОтправлятьПоПочте");
	ТекущийОбъект.СторонниеЛица.Свернуть("Партнер,вогТорговаяТочка,КонтактноеЛицо,Адрес,ПредставлениеАдреса,Принадлежность,Телефон","ОтправлятьСМС,ОтправлятьПоПочте");
	//-вог
	Если ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) Тогда
		Если (ПризнакПериодическоеСобытиеИнициализация Или ПризнакИзмененоРасписание) И ТекущийОбъект.Периодическое Тогда
			Если ПризнакПериодическоеСобытиеИнициализация Тогда
				ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд";
			КонецЕсли;
			ТекущийОбъект.мНеУстанавливатьПризнакИзмененоВРяде		= Истина;
			
			Если ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд" Тогда
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.РядСобытий.ДатаНачала, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			ИначеЕсли ПериодическоеСобытиеСпособИзмененияРяда = "ДоКонцаРяда" Тогда
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.Дата, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			Иначе
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.РядСобытий.ДатаНачала, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			КонецЕсли;
			
			Если МассивДатРасписания.Количество() = 0 Тогда
				Если ПризнакПериодическоеСобытиеИнициализация Или ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд" Тогда
					Отказ = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Расписание периодического события настроенно некорректно - в указанный период не попадает ни одного события!'"), СтатусСообщения.Важное);
					//НастроитьВидимостьИДоступностьФормы(ЭтаФорма);
					Элементы.РядСобытийНаименование.Доступность = (Объект.Периодическое И ЗначениеЗаполнено(Объект.РядСобытий) И Не Объект.ИзмененоВРяде);
					Элементы.РядСобытийНаименование.Видимость = Объект.Периодическое;
					Возврат;
				КонецЕсли;
			Иначе
				ДатаВремяПервоеСобытие = МассивДатРасписания[0];
				ТекущийОбъект.Дата = НачалоДня(ДатаВремяПервоеСобытие) + (ТекущийОбъект.Дата - НачалоДня(ТекущийОбъект.Дата)) ;
				ТекущийОбъект.ОкончаниеМероприятия = НачалоДня(ДатаВремяПервоеСобытие) + (ТекущийОбъект.ОкончаниеМероприятия - НачалоДня(ТекущийОбъект.ОкончаниеМероприятия));
			КонецЕсли;
		Иначе
			Если ТекущийОбъект.Периодическое И Не ТекущийОбъект.ИзмененоВРяде Тогда
				Если	ПериодическоеСобытиеСпособИзмененияРяда = "ДоКонцаРяда"
					ИЛИ	ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд"
					ИЛИ	ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда" Тогда
					//
					ТекущийОбъект.мНеУстанавливатьПризнакИзмененоВРяде		= Истина;
					
				ИначеЕсли Не Модифицированность Тогда
					ТекущийОбъект.мНеУстанавливатьПризнакИзмененоВРяде		= Истина;
					
				КонецЕсли;
			ИначеЕсли Не ТекущийОбъект.Периодическое И ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) И Не ТекущийОбъект.ИзмененоВРяде Тогда
				Если ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда" Тогда
					ТекущийОбъект.мНеУстанавливатьПризнакИзмененоВРяде		= Истина;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Признаки. по которым в дальнейшем после записи будем определять, надо ли	оповестить участников мероприятия.
	ЭтоНовыйОбъект = ТекущийОбъект.Ссылка.Пустая();
	ПризнакНовогоМероприятия = ЭтоНовыйОбъект;
	Если НЕ ЭтоНовыйОбъект Тогда
		Если НЕ (ТекущийОбъект.Дата = ТекущийОбъект.Ссылка.Дата) ИЛИ НЕ (ТекущийОбъект.ОкончаниеМероприятия = ТекущийОбъект.Ссылка.ОкончаниеМероприятия) Тогда
			ПризнакИзмененаДата = Истина;
		КонецЕсли;
		Если НЕ (ТекущийОбъект.Место = ТекущийОбъект.Ссылка.Место) Тогда
			ПризнакИзмененоМестоМероприятия = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ (Год(ТекущийОбъект.Дата) = Год(ТекущийОбъект.Ссылка.Дата)) Тогда
		ТекущийОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПроверитьНаличиеНовыхУчастников(ТекущийОбъект);
		ПроверитьНеобходимостьОбновленияКомандировки(ТекущийОбъект); //Павелко, Задача CRM-284, 11.02.2020
	КонецЕсли;
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбъектЗаписанПользователем");
	
	//+вог
	//CRM_ТаблицаИнтересовЗнач = РеквизитФормыВЗначение("CRM_ТаблицаИнтересов",Тип("ТаблицаЗначений"));
	//ТекущийОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",CRM_ТаблицаИнтересовЗнач);
	//-вог
	
	// +Google
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПериодическоеСобытиеСпособИзмененияРяда",ПериодическоеСобытиеСпособИзмененияРяда);
	// -Google
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	
	// ++ VOG Ульянов И.В. 05.02.2020 CRM-263
	Отказ = ПроверитьЗаполненостьРеквизитовДляКомандировки(Отказ);
	// -- VOG Ульянов И.В. 05.02.2020 CRM-263
	
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
// Процедура - обработчик события формы "ПриЗаписиНаСервере".
//
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТаблицаНастроекОповещений = ДанныеФормыВЗначение(ЭтотОбъект._ТаблицаОповещений, Тип("ТаблицаЗначений"));
	СтруктураИзменений = Новый Структура;
	СтруктураИзменений.Вставить("Новое",			ПризнакНовогоМероприятия);
	СтруктураИзменений.Вставить("ИзмененаДата",		ПризнакИзмененаДата);
	СтруктураИзменений.Вставить("ИзмененоМесто",	ПризнакИзмененоМестоМероприятия);
	СтруктураИзменений.Вставить("Отменено",		    Объект.Состояние = Справочники.CRM_СостоянияСобытий.Отменено);
	//СтруктураИзменений.Вставить("Завершено",		ЭтаФорма.ПризнакЗавершенияСобытия);
	СтруктураИзменений.Вставить("ИзмененСостав",	ИзмененСоставСтороннихУчастников);
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаНастроекОповещений",					ТаблицаНастроекОповещений);
	СтруктураДанных.Вставить("ЭтоНовоеСобытие",								ПризнакНовогоМероприятия);
	СтруктураДанных.Вставить("ИзмененСоставУчастников",						ИзмененСоставУчастников);
	СтруктураДанных.Вставить("ПризнакПериодическоеСобытиеИнициализация",	ПризнакПериодическоеСобытиеИнициализация);
	СтруктураДанных.Вставить("Пользователь",								ТекущийОбъект.Ответственный);
	СтруктураДанных.Вставить("Состояние",									СтруктураИзменений);
	АдресНастроек = ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
	Если ПризнакИзмененыОповещения ИЛИ ПризнакПериодическоеСобытиеИнициализация ИЛИ ИзмененСоставУчастников Тогда
		// Тут надо формировать записи оповещений.
		CRM_ОповещенияСервер.СформироватьОповещенияПоСобытию(ТекущийОбъект.Ссылка, АдресНастроек);
		ИзмененСоставУчастников	= Ложь;
		ПризнакИзмененыОповещения	= Ложь;
	КонецЕсли;
КонецПроцедуры // ПриЗаписиНаСервере()

&НаСервере
// Процедура - обработчик события формы "ПослеЗаписиНаСервере".
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) Тогда
		Если ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда" Тогда
			// Если удаляются все события ряда, форма должна быть закрыта после записи, т.к. объекта, связанного с формой, уже
			// не будет.
			ЗакрытьФормуПослеЗаписиСОповещением = Истина;
			// Объект нужно разблокировать т.к. он будет удаляться программно.
			Попытка
				ТекущийОбъект.Разблокировать();
			Исключение
			КонецПопытки;
			CRM_МероприятияСервер.ИзменитьМероприятияРяда(ТекущийОбъект.Ссылка, ПериодическоеСобытиеСпособИзмененияРяда, ТекущийОбъект.Дата,,АдресНастроек);
		ИначеЕсли ТекущийОбъект.Периодическое И Не ТекущийОбъект.ИзмененоВРяде И ЗначениеЗаполнено(ПериодическоеСобытиеСпособИзмененияРяда) Тогда
			Если ПризнакИзмененоРасписание Тогда
				//ЗакрытьФормуПослеЗаписиСОповещением = Истина;
				// Объект нужно разблокировать т.к. он будет изменяться программно.
				Попытка
					ТекущийОбъект.Разблокировать();
				Исключение
				КонецПопытки;
			КонецЕсли;
			CRM_МероприятияСервер.ИзменитьМероприятияРяда(ТекущийОбъект.Ссылка, ПериодическоеСобытиеСпособИзмененияРяда, ТекущийОбъект.Дата,,АдресНастроек);
			// +GOOGLE
			Если CRM_GoogleИнтеграция.СинхронизироватьКалендарьGoogle(Пользователи.АвторизованныйПользователь()) Тогда
				ОбновитьПериодическоеСобытиеВGoogleКалендаре(ТекущийОбъект);
			КонецЕсли;
			// -GOOGLE
		КонецЕсли;
		ПериодическоеСобытиеСпособИзмененияРяда		= "";
		ПризнакПериодическоеСобытиеИнициализация	= Ложь;
		ПризнакИзмененоРасписание					= Ложь;
	КонецЕсли;
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	//+вог
	скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	//-вог
	ВывестиДлительностьВПрограмме();
	ВывестиПротоколМероприятия();	
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПослеЗаписи".
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// Посмотрим, надо ли оповестить участников события об изменениях.
	Если ПризнакНовогоМероприятия ИЛИ ПризнакИзмененаДата ИЛИ ИзмененСоставСтороннихУчастников ИЛИ ПризнакИзмененоМестоМероприятия или ПризнакОтмены Тогда
		Если ПроверитьНаличиеУчастниковСобытия(Объект.Ссылка) Тогда
			СтруктураИзменений = Новый Структура;
			СтруктураИзменений.Вставить("Новое",			ПризнакНовогоМероприятия);
			СтруктураИзменений.Вставить("ИзмененаДата",		ПризнакИзмененаДата);
			СтруктураИзменений.Вставить("ИзмененоМесто",	ПризнакИзмененоМестоМероприятия);
			СтруктураИзменений.Вставить("ИзмененСостав",	ИзмененСоставСтороннихУчастников);
			СтруктураИзменений.Вставить("Отменено",			ПризнакОтмены);
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Событие",			Объект.Ссылка);
			СтруктураОповещения.Вставить("НовыеУчастники",	НовыеУчастники);
			СтруктураОповещения.Вставить("Состояние",		СтруктураИзменений);
			CRM_ОповещенияСервер.ОповеститьУчастниковСобытия(СтруктураОповещения);
		КонецЕсли;
		ПризнакНовогоМероприятия			= Ложь;
		ПризнакИзмененаДата					= Ложь;
		ПризнакИзмененоМестоМероприятия		= Ложь;
		ИзмененСоставСтороннихУчастников	= Ложь;
	КонецЕсли;
	ПредставлениеДокументаОснования = Формат(Объект.ДокументОснование);
	Оповестить("ОбновитьПланировщик");
	Если ЗначениеЗаполнено(Взаимодействие) Тогда
		CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие, Объект.Ссылка);
	КонецЕсли;	
	Для каждого Строка из Объект.СторонниеЛица цикл
		Если ЗначениеЗаполнено(Строка.КонтактноеЛицо) тогда
			ЗаполнитьОписаниеДолжности(Строка);	
		КонецЕсли;
	КонецЦикла;
	ОтрисоватьКатегорииНаФорме();
	
	Заголовок = ПолучитьЗаголовокФормы();
	Элементы.вогПротокол.ТолькоПросмотр = Ложь;
	
	Оповестить("ИзмененоМероприятие",Объект.Ссылка,ЭтаФорма);
	
	// ++ VOG Солодов В.В. 20.07.2020 CRM-572
	Если Объект.СторонниеЛица.Количество() > 0 Тогда
		
		Предмет = Неопределено;
		
		Если ЗначениеЗаполнено(Объект.СторонниеЛица[0].вогТорговаяТочка) Тогда
			Предмет = Объект.СторонниеЛица[0].вогТорговаяТочка;
		ИначеЕсли ЗначениеЗаполнено(Объект.СторонниеЛица[0].Партнер) Тогда
			Предмет = Объект.СторонниеЛица[0].Партнер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предмет) Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ДокументОснование", 	Объект.ДокументОснование);
			ПараметрыОповещения.Вставить("Предмет", 			Предмет);
			
			Оповестить("Документ.CRM_Мероприятие.Запись", ПараметрыОповещения, Объект.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 20.07.2020 CRM-572
	
КонецПроцедуры // ПослеЗаписи()

&НаКлиенте
Процедура ДокументОснованиеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Объект.ДокументОснование);
КонецПроцедуры

// +ГруппаИнтерес

#КонецОбласти

#Область ПривязкаДокументовКИнтересамКлиентов

&НаКлиенте
Процедура Подключаемый_ИнтересНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.КлиентСписок) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		СтруктураОтбора.Вставить("Партнер", ЭтотОбъект.КлиентСписок);
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
		ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
		ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);
		
		ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
		ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
		ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);		
		
		ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтересОбработкаВыбора(ВыбранноеЗначение, Результат) Экспорт
	CRM_ОбщегоНазначенияКлиент.ИнтересОбработкаВыбора(ВыбранноеЗначение, ЭтотОбъект, ТекущийЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	
	CRM_ОбщегоНазначенияКлиент.ИнтересОбработкаВыбора(ВыбранноеЗначение, ЭтотОбъект, ТекущийЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияКлиент.Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияКлиент.Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка, ЭтотОбъект.CRM_ТаблицаИнтересов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(,Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало = Ложь)
	
	МассивСтрок = ЭтотОбъект.CRM_ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",ВыбранноеЗначение));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Если ВНачало Тогда
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
		Иначе
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	ИначеЕсли ВНачало Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Сдвинуть(ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]),-ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкрытьПоказатьИнтересы(Команда)
	
	Элементы.СкрытьПоказатьИнтересы.Пометка = НЕ Элементы.СкрытьПоказатьИнтересы.Пометка;
	Элементы.ГруппаCRM_ТаблицаИнтересов.Видимость = Элементы.СкрытьПоказатьИнтересы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		Отказ = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.ВведенНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПослеУдаления(Элемент)
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Основной(Команда)
	
	ТекущиеДанные = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ДобавитьИнтересНаСервере(ТекущиеДанные.Ссылка, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

// -ГруппаИнтерес

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Интерес" Тогда
		Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество()  > 0 Тогда
			Если Параметр = ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка Тогда
				ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		//+вог
		//СформироватьПредставлениеВложений();
		//-вог
		
	ИначеЕсли ИмяСобытия = "СофтФон_КонецРазговора" 
	  И Параметр.Свойство("Звонок") Тогда
		Если (Параметр.Звонок = Объект.ДокументОснование) Тогда
			Объект.ОкончаниеМероприятия = сфпСофтФонПроСервер.сфпТекущаяДата();
			ПересчитатьДатыОповещений();
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Если ИмяСобытия = "ОбновитьФорму" и Параметр.Ключ = Объект.Ссылка тогда
	//	Прочитать();
	//КонецЕсли;
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	
	Если ИмяСобытия = "Запись_ПунктПротокола" Тогда
		Если Параметр.Мероприятие = Объект.Ссылка Тогда
			
			
			ПараметрыОтбора = Новый Структура("ПунктПротокола", Параметр.ПунктПротокола);
			СтрокиПунктаПротокола = Объект.вогПротокол.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиПунктаПротокола.Количество() <> 0 Тогда
				СтрокиПунктаПротокола[0].ПунктПротокола  = Параметр.ПунктПротокола;
				СтрокиПунктаПротокола[0].НомерПунктаПрограммы = Параметр.НомерПункта;
				СтрокиПунктаПротокола[0].НомерПунктаПротокола = "";
				Записать();
				Прочитать();
				вогУправлениеМероприятиямиКлиентСервер.СортироватьПротокол(Объект.вогПротокол);
				СтрокаПунктаПротокола = СтрокиПунктаПротокола[0];
				Элементы.вогПротокол.ТекущаяСтрока = СтрокаПунктаПротокола.ПолучитьИдентификатор();
			Иначе
				НоваяСтрока = Объект.вогПротокол.Добавить();
				НоваяСтрока.ПунктПротокола = Параметр.ПунктПротокола;
				НоваяСтрока.НомерПунктаПрограммы = Параметр.НомерПункта;
				Записать();
				Прочитать();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	Если ИмяСобытия = "Обновить_ПунктПротокола" Тогда
		Если Параметр.Мероприятие = Объект.Ссылка Тогда
			ВывестиПротоколМероприятия();	
			// Сортировка протокола
			вогУправлениеМероприятиямиКлиентСервер.СортироватьПротокол(Объект.вогПротокол);
		КонецЕсли;
	КонецЕсли;
	Если ИмяСобытия = "ИзменениеСрока" и Параметр.Форма = ЭтаФорма Тогда
		Если Параметр.Реквизит = "ДатаВремяНачало"	тогда
			ДатаВремяНачалоПриИзменении();	
		КонецЕсли;
		Если Параметр.реквизит = "ДатаВремяОкончание"	тогда
			ДатаВремяОкончаниеПриИзменении();	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Тег".
//
Процедура ТегПриИзменении(Элемент)
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	//Павелко, Таск 000000794, 08.11.2019 - Перенесено в ПриСозданииНаСервере +++
	//Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги") Тогда
	//	Подключаемый_ОбновитьОблакоТегов();
	//Иначе
	//	Элементы.ОблакоТегов.Видимость = Ложь;
	//КонецЕсли;
	//Павелко, Таск 000000794, 08.11.2019 ---
	
	//+вог
	ПолучитьПараметрыВидаВзаимодействия();
	скМеханизмЗапускаБизнесПроцессовОбъектовСервер.ФормаОбъектаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект.Ссылка, Элементы.ГруппаЗапускБизнесПроцесса);
	//-вог
	
	ВывестиПротоколМероприятия();	
	
КонецПроцедуры

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура Подключаемый_ОбновитьОблакоТегов()
	
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьКатегорииНаФорме()
	ПрефиксРеквизита = "ПолеВводаКатегория";
	МассивУдаляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	Пока Истина Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		Попытка
			ТестовыйРеквизит = ЭтотОбъект[ИмяРеквизита];
			МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизита);
			нИндекс = нИндекс + 1;
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	МассивКатегорий = Новый Массив();
	Если ЗначениеЗаполнено(Объект.ОсновнаяКатегория) Тогда
		МассивКатегорий.Добавить(Объект.ОсновнаяКатегория);
	КонецЕсли;
	Для Каждого СтрокаКатегория Из Объект.Категории Цикл
		Если ЗначениеЗаполнено(СтрокаКатегория.Категория) И МассивКатегорий.Найти(СтрокаКатегория.Категория) = Неопределено Тогда
			МассивКатегорий.Добавить(СтрокаКатегория.Категория);
		КонецЕсли;
	КонецЦикла;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.CRM_Категории");
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		РеквизитКатегория = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТиповКатегория);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитКатегория);
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхРеквизитов Цикл
		Попытка Элементы.Удалить(Элементы[УдаляемыйЭлемент]);
		Исключение КонецПопытки;
	КонецЦикла;
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	нИндекс = 1;
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		ЭтотОбъект[ИмяРеквизита] = ДобавляемаяКатегория;
		
		ЭлементКатегория = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаКатегории);
		ЭлементКатегория.Вид					= ВидПоляФормы.ПолеВвода;
		ЭлементКатегория.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементКатегория.ПутьКДанным			= ИмяРеквизита;
		ЭлементКатегория.РедактированиеТекста	= Ложь;
		ЭлементКатегория.КнопкаСпискаВыбора		= Ложь;
		ЭлементКатегория.КнопкаВыбора			= Ложь;
		ЭлементКатегория.КнопкаОчистки			= Ложь;
		ЭлементКатегория.КнопкаРегулирования	= Ложь;
		ЭлементКатегория.КнопкаОткрытия			= Ложь;
		ЭлементКатегория.КнопкаВыпадающегоСписка= Ложь;
		ЭлементКатегория.КнопкаСоздания 		= Ложь;
		ЦветКатегории = Новый Цвет(ДобавляемаяКатегория.ЦветКрасный, ДобавляемаяКатегория.ЦветЗеленый, ДобавляемаяКатегория.ЦветСиний);
		ЭлементКатегория.ЦветФона = ЦветКатегории;
		ЭлементКатегория.ЦветТекста = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветКатегории);
		
		Если нИндекс = 1 Тогда
			ЭлементКатегория.Шрифт = Новый Шрифт(ЭлементКатегория.Шрифт,,, Истина);
		КонецЕсли;
		
		//ЭлементКатегория.УстановитьДействие("НачалоВыбора",	"Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора");
		ЭлементКатегория.УстановитьДействие("Очистка",		"Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка");
		//ЭлементКатегория.УстановитьДействие("Открытие",		"Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие");
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатие(Элемент)
	МассивКатегорий = Новый Массив();
	Для Каждого КатегорияСтрока Из Объект.Категории Цикл
		МассивКатегорий.Добавить(КатегорияСтрока.Категория);
	КонецЦикла;
	
	СтруктураОписаниеКатегорий = Новый Структура("МассивКатегорий,ОсновнаяКатегория", МассивКатегорий, Объект.ОсновнаяКатегория);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияВыбратьГруппуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_Мероприятие.Форма.ФормаВыборКатегорий", Новый Структура("ОписаниеКатегорий", СтруктураОписаниеКатегорий), ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Модифицированность = Истина;
		
		Объект.Категории.Очистить();
		Для Каждого СтрокаКатегория Из Результат.СписокВыбранныеКатегории Цикл
			НоваяСтрока = Объект.Категории.Добавить();
			НоваяСтрока.Категория = СтрокаКатегория.Значение;
		КонецЦикла;
		Объект.ОсновнаяКатегория = Результат.ОсновнаяКатегория;
		
		ОтрисоватьКатегорииНаФорме();
	КонецЕсли;
КонецПроцедуры

#Область РаботаСВложениями_Мероприятие

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Нет вложений...'");
		Возврат;
	КонецЕсли;		
	
	ВложенияПредставление = "";
	Вложения = ПолучитьВложенияМероприятия();
	Для Каждого ЭлементТаблицы Из Вложения Цикл
		РазмерВложения = Цел(ЭлементТаблицы.Размер/1024);
		РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(ЭлементТаблицы.Размер) + " байт");		
		ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + РазмерСтрокой + ")";
	КонецЦикла;
	Если ПустаяСтрока(ВложенияПредставление) Тогда
		ВложенияПредставление = НСтр("ru='Нет вложений...'");				
	Иначе
		ВложенияПредставление = Сред(ВложенияПредставление, 3);
	КонецЕсли;	
			
КонецПроцедуры // СформироватьПредставлениеВложений()			 

&НаСервере
Функция ПолучитьВложенияМероприятия()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_МероприятиеПрисоединенныеФайлы.Ссылка,
	|	CRM_МероприятиеПрисоединенныеФайлы.Наименование КАК ИмяФайла,
	|	CRM_МероприятиеПрисоединенныеФайлы.Размер КАК Размер
	|ИЗ
	|	Справочник.CRM_МероприятиеПрисоединенныеФайлы КАК CRM_МероприятиеПрисоединенныеФайлы
	|ГДЕ
	|	CRM_МероприятиеПрисоединенныеФайлы.ВладелецФайла = &Мероприятие
	|	И НЕ CRM_МероприятиеПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Мероприятие", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

&НаКлиенте
Процедура ВложенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru = 'Мероприятие не записано. Добавление файлов невозможно!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеПрисоединенныхФайлов", ЭтотОбъект);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтотОбъект,
	             Ложь,
	             Неопределено, ,ОписаниеОповещенияОЗакрытии);
КонецПроцедуры
			 
&НаКлиенте
Процедура ЗакрытиеПрисоединенныхФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	СформироватьПредставлениеВложений();
КонецПроцедуры
			 
#КонецОбласти

// +GOOGLE
#Область ОбменСGoogle

&НаКлиенте
// Процедура устанавливает доступность настроек Google
//
// Параметры:
//	Нет.
//
Процедура УправлениеНастройкамиСобытияGoogle()
	// Рассылка оповещений
	Объект.РассылатьУведомленияПоНастройкеGApi	= НЕ Объект.РассылкаПоУмолчаниюGApi;
	Элементы.МинутыGApi.ТолькоПросмотр			= Объект.РассылкаПоУмолчаниюGApi;
	// Права гостей
	Если ЗначениеЗаполнено(Объект.ОрганизаторGApi) И НЕ (Объект.ОрганизаторGApi = Объект.Автор) Тогда
		Элементы.ГостиМогутИзменятьМероприятиеGApi.Доступность		= Ложь;
		Элементы.ГостиМогутВидетьСписокГостейGApi.Доступность		= Ложь;
		Элементы.ГостиМогутПриглашатьДругихГостейGApi.Доступность	= Ложь;
	Иначе
		Элементы.ГостиМогутПриглашатьДругихГостейGApi.Доступность = (Объект.ГостиМогутИзменятьМероприятиеGApi И Объект.ГостиМогутВидетьСписокГостейGApi);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "РассылкаПоУмолчаниюGApi"
//
Процедура РассылкаПоУмолчаниюGApiПриИзменении(Элемент)
	  УправлениеНастройкамиСобытияGoogle();
КонецПроцедуры // РассылкаПоУмолчаниюGApiПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "РассылатьУведомленияПоНастройкеGApi"
//
Процедура РассылатьУведомленияПоНастройкеGApiПриИзменении(Элемент)
	Объект.РассылкаПоУмолчаниюGApi = НЕ Объект.РассылатьУведомленияПоНастройкеGApi;
	УправлениеНастройкамиСобытияGoogle();
КонецПроцедуры // РассылатьУведомленияПоНастройкеGApiПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ГостиМогутИзменятьМероприятиеGApi"
//
Процедура ГостиМогутИзменятьМероприятиеGApiПриИзменении(Элемент)
	Если НЕ Объект.ГостиМогутИзменятьМероприятиеGApi Тогда
		Объект.ГостиМогутПриглашатьДругихГостейGApi = Ложь;
	КонецЕсли;	
	УправлениеНастройкамиСобытияGoogle();
КонецПроцедуры // ГостиМогутИзменятьМероприятиеGApiПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ГостиМогутВидетьСписокГостейGApi"
//
Процедура ГостиМогутВидетьСписокГостейGApiПриИзменении(Элемент)
	Если НЕ Объект.ГостиМогутВидетьСписокГостейGApi Тогда
		Объект.ГостиМогутПриглашатьДругихГостейGApi = Ложь;
	КонецЕсли;	
	УправлениеНастройкамиСобытияGoogle();
КонецПроцедуры // ГостиМогутВидетьСписокГостейGApiПриИзменении()

&НаСервере
Процедура ОбновитьПериодическоеСобытиеВGoogleКалендаре(ТекущийОбъект) 
	// Отправим только оригинальное событие, остальные добавятся автоматически
	АвторСобытия = Неопределено;
	Если ТипЗнч(ТекущийОбъект.ОрганизаторGApi) = Тип("Строка") Тогда
		ТаблицаОрганизатор =    CRM_GoogleИнтеграция.НайтиКонтакт(ТекущийОбъект.ОрганизаторGApi); 
		Если ТаблицаОрганизатор.Количество()<>0 Тогда
			Если ТипЗнч(ТаблицаОрганизатор[0].Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
				АвторСобытия = ТаблицаОрганизатор[0].Контакт;
			Иначе
				АвторСобытия = ТекущийОбъект.ОрганизаторGApi;	
			КонецЕсли;
		Иначе 
			АвторСобытия = ТекущийОбъект.ОрганизаторGApi;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТекущийОбъект.ОрганизаторGApi) = Тип("СправочникСсылка.Пользователи") Тогда
		АвторСобытия = ТекущийОбъект.ОрганизаторGApi;	
	КонецЕсли;
	// Отправим это событие в Google
	Автор = Неопределено;
	Если (ТипЗнч(АвторСобытия) = Тип("Строка")) ИЛИ ((ТипЗнч(АвторСобытия) = Тип("СправочникСсылка.Пользователи")) 
		И НЕ (ТекущийОбъект.Ответственный = АвторСобытия)) Тогда
		Автор = АвторСобытия;	
	Иначе
		Автор = ТекущийОбъект.Ответственный;
	КонецЕсли;
	Если ТекущийОбъект.ПометкаУдаления Тогда
		CRM_GoogleИнтеграция.УдалитьСобытиеИзКалендаря(ТекущийОбъект, Автор);
	Иначе
		CRM_GoogleИнтеграция.ОбновитьСобытиеВКалендаре(ТекущийОбъект ,Автор);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
// -GOOGLE

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

//+вог

#Область СторонниеЛица
	
&НаКлиенте
Процедура УстановитьВидимостьСтороннихЛиц()
	
	//Элементы.ГруппаСторонниеЛица.Видимость = СторонниеЛицаСписком И ПараметрыВидаВзаимодействия.ИспользоватьКлиенты;
	//Элементы.ГруппаПартнер.Видимость       = Не СторонниеЛицаСписком И ПараметрыВидаВзаимодействия.ИспользоватьКлиенты;
		
КонецПроцедуры // УстановитьВидимостьСтороннихЛиц()

&НаКлиенте
Процедура СторонниеЛицаСпискомПриИзменении(Элемент)
	
	Если Не СторонниеЛицаСписком 
	  И Объект.СторонниеЛица.Количество() > 1 Тогда
		Оповещение = Новый ОписаниеОповещения("СторонниеЛицаСпискомПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Все строки в списке клиентов, кроме первой, будут удалены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьРеквизитыФормыСтороннихЛиц(ЭтотОбъект);
		УстановитьВидимостьСтороннихЛиц();
		
		Если СторонниеЛицаСписком Тогда
			ТекущийЭлемент = Элементы.СторонниеЛица;	
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаСпискомПриИзмененииЗавершение(Результат, Контекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		СторонниеЛицаСписком = Не СторонниеЛицаСписком;
		Возврат;
		
	КонецЕсли;
	
	Пока Объект.СторонниеЛица.Количество() > 1 Цикл
		СтрокаУдаления = Объект.СторонниеЛица[1];
		Объект.СторонниеЛица.Удалить(СтрокаУдаления);
		
	КонецЦикла;
		
	ЗаполнитьРеквизитыФормыСтороннихЛиц(ЭтотОбъект);
	УстановитьВидимостьСтороннихЛиц();
		
КонецПроцедуры // СторонниеЛицаСпискомПриИзмененииЗавершение()


&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСвойствСтороннихЛиц()
	Возврат "Партнер, вогТорговаяТочка, КонтактноеЛицо, Адрес, ПредставлениеАдреса, ОтправлятьПоПочте, Телефон, ОтправлятьСМС, Принадлежность";
КонецФункции // СтрокаСвойствСтороннихЛиц()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыФормыСтороннихЛиц(Форма) Экспорт
	
	Если Форма.Объект.СторонниеЛица.Количество() > 0 Тогда				
		ЗаполнитьЗначенияСвойств(Форма, Форма.Объект.СторонниеЛица[0], СтрокаСвойствСтороннихЛиц());
	КонецЕсли;
	
	Форма.ЗадачаИсполнителяСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	ОбновитьОтборыЗадачиСписокНаСервере(Форма);
	
КонецПроцедуры // ЗаполнитьРеквизитыФормыСтороннихЛиц()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыОбъектаСтороннихЛиц(Форма)

	Если Форма.Объект.СторонниеЛица.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект.СторонниеЛица[0], Форма, СтрокаСвойствСтороннихЛиц());
	КонецЕсли;
	
	Форма.ЗадачаИсполнителяСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	ОбновитьОтборыЗадачиСписокНаСервере(Форма);
	
КонецПроцедуры // ЗаполнитьРеквизитыСтороннихЛиц()

#КонецОбласти

#Область ПараметрыВидаВзаимодейтсвия

&НаСервере
Процедура ПолучитьПараметрыВидаВзаимодействия()
	ПараметрыВидаВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПараметрыВидаВзаимодействий(Объект.вогВидВзаимодействия);
КонецПроцедуры // ПолучитьПараметрыВидаВзаимодействия()

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	ПараметрыВидаВзаимодействия = Форма.ПараметрыВидаВзаимодействия;
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ГруппаСторонниеЛицаКолонки"		 , 
		(ПараметрыВидаВзаимодействия.ИспользоватьКлиенты И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхКлиенты = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач")) или 
		 (ПараметрыВидаВзаимодействия.ИспользоватьТорговыеТочки И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхТорговыеТочки = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач"))));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ТорговаяТочкаЭлемент"		 , 
		(ПараметрыВидаВзаимодействия.ИспользоватьКлиенты И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхКлиенты = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач")) или 
		 (ПараметрыВидаВзаимодействия.ИспользоватьТорговыеТочки И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхТорговыеТочки = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач"))));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "вогПрограммаОтКлиента"		 , 
		(ПараметрыВидаВзаимодействия.ИспользоватьКлиенты И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхКлиенты = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач")) или 
		 (ПараметрыВидаВзаимодействия.ИспользоватьТорговыеТочки И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхТорговыеТочки = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач"))));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "вогПротоколОтКлиента"		 , 
		(ПараметрыВидаВзаимодействия.ИспользоватьКлиенты И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхКлиенты = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач")) или 
		 (ПараметрыВидаВзаимодействия.ИспользоватьТорговыеТочки И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхТорговыеТочки = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач"))));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ПартнерЭлемент" , 
	  (ПараметрыВидаВзаимодействия.ИспользоватьКлиенты И  ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхКлиенты = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач"))));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ТорговаяТочкаЭлемент"		 ,
		 (ПараметрыВидаВзаимодействия.ИспользоватьТорговыеТочки И ПараметрыВидаВзаимодействия.ВариантЗаполненияДанныхТорговыеТочки = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач"))));
	
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ГруппаСвоиЛица"		 , ПараметрыВидаВзаимодействия.ИспользоватьСвоиУчастники));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ГруппаПрочее"		 , ПараметрыВидаВзаимодействия.ИспользоватьПрочее));
	//МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ГруппаМесто"			 , ПараметрыВидаВзаимодействия.ИспользоватьМесто));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "вогРезультат"         , ПараметрыВидаВзаимодействия.ИспользоватьРезультат));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ГруппаПовестка"		 , ПараметрыВидаВзаимодействия.ИспользоватьПовестка));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ГруппаПротоколМероприятия", ПараметрыВидаВзаимодействия.ИспользоватьПовестка));
	МассивЭлементов.Добавить(Новый Структура("ИмяЭлемента, Значение, Обработчик", "ГруппаСписокЗадач", ПараметрыВидаВзаимодействия.ИспользоватьСписокЗадач, "ЗадачиСписокУстановитьОтбор(Форма)"));
	
	Для каждого ОписаниеЭлемента Из МассивЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
			ОписаниеЭлемента.ИмяЭлемента, "Видимость", ОписаниеЭлемента.Значение); 
			
		Если ЗначениеЗаполнено(ОписаниеЭлемента.Обработчик)
		  И ОписаниеЭлемента.Значение Тогда
			Попытка
			    Выполнить(ОписаниеЭлемента.Обработчик);
			Исключение
			КонецПопытки;
		
		КонецЕсли;	
			
	КонецЦикла;
		
КонецПроцедуры // НастроитьЭлементыФормы()	
	
#КонецОбласти

#Область Задачи

&НаСервереБезКонтекста
Процедура УстановитьОформлениеЗадач(УсловноеОформление) Экспорт
	
	// Установка оформления для просроченных задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОсталосьДней");
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = 0;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение;   
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для важных задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Важность");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ВариантыВажностиЗадачи.Высокая;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.НеПринятыеКИсполнениюЗадачи.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для принятых задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение =  Новый Цвет(255,252,218);
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Новый Цвет(105,72,47);
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для выполненных задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение =  Новый Цвет(245,251,247);
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Новый Цвет(104,144,87);
	ЭлементЦветаОформления.Использование = Истина;

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыЗадач()

	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.ЗадачаИсполнителяСписокДатаНачала.Формат	  = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	Элементы.ЗадачаИсполнителяСписокСрокИсполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	
	ЗадачаИсполнителяСписок.Параметры.УстановитьЗначениеПараметра("Исполнитель"     , Пользователи.ТекущийПользователь());
	ЗадачаИсполнителяСписок.Параметры.УстановитьЗначениеПараметра("ПарамТекущаяДата", КонецДня(ТекущаяДатаСеанса()));
	ЗадачаИсполнителяСписок.Параметры.УстановитьЗначениеПараметра("ПарамПустаяДата" , Дата("00010101"));
	                                                                                
	// Отборы
	Если НЕ ЗначениеЗаполнено(ОтборПринадлежность) Тогда
		ОтборПринадлежность = "Все";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОтборСтатус) Тогда
		ОтборСтатус = "Все";
	КонецЕсли;

КонецПроцедуры // УстановитьПараметрыЗадач()

&НаКлиенте
Процедура ЗадачиСписокОтборПриИзменении(Элемент)
	ЗадачиСписокУстановитьОтбор(ЭтотОбъект);
	ТекущийЭлемент = Элементы.ЗадачаИсполнителяСписок;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗадачиСписокУстановитьОтбор(Форма)
	Форма.ЗадачаИсполнителяСписок.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	ОбновитьОтборыЗадачиСписокНаСервере(Форма);
КонецПроцедуры // ЗадачиСписокУстановитьОтбор()

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтборыЗадачиСписокНаСервере(Форма)
	
	Список 			     = Форма.ЗадачаИсполнителяСписок;
	ОтборПринадлежность  = Форма.ОтборПринадлежность;
	ОтборСтатус          = Форма.ОтборСтатус;
	ТекущийПользователь  = Форма.ТекущийПользователь;
	ТекущееПодразделение = Форма.ТекущееПодразделение;
	
	тНастройки = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого ЭлементНастроек Из тНастройки Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
			тОтбор = ЭлементНастроек.Элементы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВыбранИсполнитель = Ложь;
	ВыбранАвтор = Ложь;
	ВыбранТекущееПодразделение = Ложь;
	ВыбранСрокИсполнения = Ложь;
	ВыбранВыполнена = Ложь;
	ВыбранПринятаКИсполнению = Ложь;
	
	Для Каждого ЭлементОтбора Из тОтбор Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсполнительПотенциальный") И ЭлементОтбора.Использование Тогда
				ВыбранИсполнитель = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автор") И ЭлементОтбора.Использование Тогда
				ВыбранАвтор = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсполнительПотенциальный.ТекущееПодразделение") И ЭлементОтбора.Использование Тогда
				ВыбранТекущееПодразделение = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения") И ЭлементОтбора.Использование Тогда
				ВыбранСрокИсполнения = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена") И ЭлементОтбора.Использование Тогда
				ВыбранВыполнена = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПринятаКИсполнению") И ЭлементОтбора.Использование Тогда
				ВыбранПринятаКИсполнению = Истина;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Если ОтборПринадлежность = "Мои" И НЕ ВыбранИсполнитель Тогда
		CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ИсполнительПотенциальный", ТекущийПользователь); 
	ИначеЕсли ОтборПринадлежность = "МоегоПодразделения" И НЕ ВыбранТекущееПодразделение Тогда
		CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ИсполнительПотенциальный.Подразделение", ТекущееПодразделение); 
	КонецЕсли;
	
	Если ОтборСтатус = "Просроченные" Тогда
		Если НЕ ВыбранСрокИсполнения Тогда
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СрокИсполнения", '00010101', ВидСравненияКомпоновкиДанных.НеРавно); 
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СрокИсполнения", НачалоДня(ТекущаяДата()), ВидСравненияКомпоновкиДанных.Меньше); 
		КонецЕсли;
		Если НЕ ВыбранВыполнена Тогда
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Выполнена", Ложь); 
		КонецЕсли;
	ИначеЕсли ОтборСтатус = "ВРаботе" Тогда
	    // Отбор составной, поэтому разные условия распределяем по группам отбора.
		ОбщаяГруппаОтбора	= CRM_ОбщегоНазначенияКлиентСервер.УстановитьГруппуОтбораСписка(Список, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ГруппаИ1			= CRM_ОбщегоНазначенияКлиентСервер.УстановитьГруппуОтбораСписка(Список, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ,ОбщаяГруппаОтбора); 
		ГруппаИ2			= CRM_ОбщегоНазначенияКлиентСервер.УстановитьГруппуОтбораСписка(Список, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ,ОбщаяГруппаОтбора); 		
		Если НЕ ВыбранПринятаКИсполнению Тогда
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ПринятаКИсполнению", Истина, , ГруппаИ1); 
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ПринятаКИсполнению", Ложь, , ГруппаИ2); 			
		КонецЕсли;
		Если НЕ ВыбранВыполнена Тогда
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Выполнена", Ложь,,ГруппаИ1); 
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Выполнена", Ложь,,ГруппаИ2); 			
		КонецЕсли;
		Если НЕ ВыбранСрокИсполнения Тогда
	    	CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СрокИсполнения", НачалоДня(ТекущаяДата()), ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ГруппаИ2); 
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СрокИсполнения", '00010101', ВидСравненияКомпоновкиДанных.НеРавно, ГруппаИ2); 			
	    КонецЕсли;		
	КонецЕсли;
	
	Если Форма.ПараметрыВидаВзаимодействия.ИспользоватьКлиенты Тогда
		CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Ссылка.CRM_Партнер", Форма.Партнер); 
		Если ЗначениеЗаполнено(Форма.вогТорговаяТочка) Тогда
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Ссылка.вогТорговаяТочка", Форма.вогТорговаяТочка); 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подключаемый_МеханизмЗапускаБизнесПроцессов

&НаКлиенте
Процедура Подключаемый_ЗапускБизнесПроцесса(Команда)
	скМеханизмЗапускаБизнесПроцессовОбъектовКлиент.ОбработкаКомандыЗапускаБизнесПроцесса(ЭтаФорма, Команда, Объект.Ссылка);
КонецПроцедуры // Подключаемый_ЗапускБизнесПроцесса()

&НаКлиенте
Процедура ЗаполнитьПротокол(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПротоколЗавершение", ЭтотОбъект);
	Если Объект.вогПротокол.Количество() > 0  Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением строки протокола будут очищены, а мероприятие будет записано.
			|Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Заполнить протокол мероприятия?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Функция ПередВыполнениемОперацииМероприятия()
	
	ОтменаОперации = Ложь;
	ТребуетсяЗаписатьМероприятие = Объект.Ссылка.Пустая() Или Модифицированность;
	Если ТребуетсяЗаписатьМероприятие Тогда
		Если Не Записать() Тогда
			ОтменаОперации = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОтменаОперации Тогда
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Возврат ОтменаОперации;
	
КонецФункции



&НаКлиенте
Процедура ЗаполнитьПротоколЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	вогУправлениеМероприятиямиВызовСервера.ЗаполнитьПротокол(Объект.Ссылка);
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПротоколМероприятия()
	
	вогУправлениеМероприятиями.ВывестиПротоколМероприятия(Объект.вогПротокол);
	вогУправлениеМероприятиямиКлиентСервер.ВывестиРешенияПрограммы(Объект.вогПрограмма, Объект.вогПротокол);
	
КонецПроцедуры




&НаКлиенте
Процедура вогПрограммаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура(
		"НомерПункта, 
		|Исполнитель, 
		|Содержание,
		|ВремяПлан,
		|ВремяФакт,
		|отКлиента,
		|отКлиентаВидимость,
		|Начало,
		|Окончание,
		|ТребуетПринятияРешения,
		|Комментарий");
	
	Если Копирование Тогда 
		ТекущиеДанные = Элементы.вогПрограмма.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	КонецЕсли;	
	
	// последний пункт программы
	Если Объект.вогПрограмма.Количество() = 0 Тогда 
		НомерПункта = 1;
		Начало = Объект.Дата;
	Иначе	
		ПоследнийПункт = Объект.вогПрограмма[Объект.вогПрограмма.Количество()-1];
		НомерПункта = ПоследнийПункт.НомерПункта + 1;
		Начало = ПоследнийПункт.Окончание;
	КонецЕсли;
	
	ПараметрыФормы.НомерПункта = НомерПункта;
	ПараметрыФормы.Начало = Начало;
	ПараметрыФормы.отКлиентаВидимость = Элементы.вогПрограммаОтКлиента.Видимость;
	ПараметрыФормы.ТребуетПринятияРешения = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрограммаПередНачаломДобавленияЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Документ.CRM_Мероприятие.Форма.ВводПунктаПрограммы", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.вогПрограмма.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
	
	НоваяСтрока.ВремяПланСтр = вогУчетВремениКлиентСервер.ЧислоВСтроку(НоваяСтрока.ВремяПлан);
	НоваяСтрока.ВремяФактСтр = вогУчетВремениКлиентСервер.ЧислоВСтроку(НоваяСтрока.ВремяФакт);
	НоваяСтрока.Решение = вогУправлениеМероприятиямиКлиентСервер.ПолучитьРешениеВСтрокеПрограммы(НоваяСтрока, Объект.вогПротокол);
	
	Элементы.вогПрограмма.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Модифицированность = Истина;
	
	вогУправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	УправлениеВидимостьюПоПрограмме();
	Элементы.вогПрограмма.Обновить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.вогПрограмма.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура(
		"НомерПункта, 
		|Исполнитель, 
		|Содержание,
		|ВремяПлан,
		|ВремяФакт,
		|Начало,
		|отКлиента,
		|отКлиентаВидимость,
		|Окончание,
		|ТребуетПринятияРешения,
		|Комментарий");
		
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	ПараметрыФормы.ОтКлиентаВидимость = Элементы.вогПрограммаОтКлиента.Видимость;
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрограммаПередНачаломИзмененияЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Документ.CRM_Мероприятие.Форма.ВводПунктаПрограммы", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломИзмененияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	
	ТекущиеДанные.ВремяПланСтр = вогУчетВремениКлиентСервер.ЧислоВСтроку(ТекущиеДанные.ВремяПлан);
	ТекущиеДанные.ВремяФактСтр = вогУчетВремениКлиентСервер.ЧислоВСтроку(ТекущиеДанные.ВремяФакт);
	ТекущиеДанные.Решение = вогУправлениеМероприятиямиКлиентСервер.ПолучитьРешениеВСтрокеПрограммы(ТекущиеДанные, Объект.вогПротокол);
	
	Модифицированность = Истина;
	
	вогУправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	
	УправлениеВидимостьюПоПрограмме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.вогПрограмма.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("НомерПунктаПрограммы", ТекущиеДанные.НомерПункта);
	НайденныеСтроки = Объект.вогПротокол.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда 
		ТекстПредупреждения = НСтр("ru = 'Нельзя удалить пункт программы, так как для него введен пункт протокола.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.вогПрограмма.ТекущаяСтрока;
	ЭлементКоллекции = Объект.вогПрограмма.НайтиПоИдентификатору(ТекущаяСтрока);
	ИндексЭлемента = Объект.вогПрограмма.Индекс(ЭлементКоллекции);
	
	// Изменение номеров пунктов программы
	Для Инд = ИндексЭлемента + 1 По Объект.вогПрограмма.Количество()-1 Цикл
		
		СтарыйНомер = Объект.вогПрограмма[Инд].НомерПункта;
		НовыйНомер = СтарыйНомер - 1;
		
		ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
		
	КонецЦикла;
	
	Объект.вогПрограмма.Удалить(ИндексЭлемента);
	
	// Пересчет программы
	вогУправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	
	// Сортировка протокола
	вогУправлениеМероприятиямиКлиентСервер.СортироватьПротокол(Объект.вогПротокол);
	
	Модифицированность = Истина;
	УправлениеВидимостьюПоПрограмме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер)
	
	СтруктураПоиска = Новый Структура("НомерПункта", СтарыйНомер);
	НайденныеСтрокиСтарыйНомер = Объект.вогПрограмма.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("НомерПункта", НовыйНомер);
	НайденныеСтрокиНовыйНомер = Объект.вогПрограмма.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтрокиСтарыйНомер.Количество() > 0 Тогда 
		НайденныеСтрокиСтарыйНомер[0].НомерПункта = НовыйНомер;
	КонецЕсли;
	
	Если НайденныеСтрокиНовыйНомер.Количество() > 0 Тогда 
		НайденныеСтрокиНовыйНомер[0].НомерПункта = СтарыйНомер;
	КонецЕсли;
	
	Если НовыйНомер > СтарыйНомер Тогда 
		
		НайденныеСтрокиНовыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Начало;
		НайденныеСтрокиНовыйНомер[0].Окончание = НайденныеСтрокиНовыйНомер[0].Начало + НайденныеСтрокиНовыйНомер[0].ВремяПлан;
		
		НайденныеСтрокиСтарыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Окончание;
		НайденныеСтрокиСтарыйНомер[0].Окончание = НайденныеСтрокиСтарыйНомер[0].Начало + НайденныеСтрокиСтарыйНомер[0].ВремяПлан;
		
	ИначеЕсли НовыйНомер < СтарыйНомер Тогда 
		
		НайденныеСтрокиСтарыйНомер[0].Начало = НайденныеСтрокиНовыйНомер[0].Начало;
		НайденныеСтрокиСтарыйНомер[0].Окончание = НайденныеСтрокиСтарыйНомер[0].Начало + НайденныеСтрокиСтарыйНомер[0].ВремяПлан;
		
		НайденныеСтрокиНовыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Окончание;
		НайденныеСтрокиНовыйНомер[0].Окончание = НайденныеСтрокиНовыйНомер[0].Начало + НайденныеСтрокиНовыйНомер[0].ВремяПлан;
		
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("НомерПунктаПрограммы", СтарыйНомер);
	НайденныеСтрокиСтарыйНомер = Объект.вогПротокол.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("НомерПунктаПрограммы", НовыйНомер);
	НайденныеСтрокиНовыйНомер = Объект.вогПротокол.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка Из НайденныеСтрокиСтарыйНомер Цикл
		Строка.НомерПунктаПрограммы = НовыйНомер;
		Строка.ИзменилсяНомерПунктаПротокола = Истина;
		ИзменилсяНомерПунктаПротокола = Истина;
	КонецЦикла;	
	
	Для Каждого Строка Из НайденныеСтрокиНовыйНомер Цикл
		Строка.НомерПунктаПрограммы = СтарыйНомер;
		Строка.ИзменилсяНомерПунктаПротокола = Истина;
		ИзменилсяНомерПунктаПротокола = Истина;
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПрограммаПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.вогПрограмма.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда 
		Возврат;
	КонецЕсли;	
	СтарыйНомер = ТекущиеДанные.НомерПункта;
	НовыйНомер = СтарыйНомер-1;
	
	Объект.вогПрограмма.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, -1); 
	ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
	
	вогУправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	Модифицированность = Истина;
	
	// Сортировка протокола
	вогУправлениеМероприятиямиКлиентСервер.СортироватьПротокол(Объект.вогПротокол);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.вогПрограмма.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = Объект.вогПрограмма.Количество() Тогда 
		Возврат;
	КонецЕсли;
	СтарыйНомер = ТекущиеДанные.НомерПункта;
	НовыйНомер = СтарыйНомер+1;
	
	Объект.вогПрограмма.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, 1); 
	ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
	
	вогУправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	Модифицированность = Истина;
	
	// Сортировка протокола
	вогУправлениеМероприятиямиКлиентСервер.СортироватьПротокол(Объект.вогПротокол);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДлительностьВПрограмме()
	
	Для Каждого Строка Из Объект.вогПрограмма Цикл
		Строка.ВремяПланСтр = вогУчетВремениКлиентСервер.ЧислоВСтроку(Строка.ВремяПлан);
		Строка.ВремяФактСтр = вогУчетВремениКлиентСервер.ЧислоВСтроку(Строка.ВремяФакт);
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура вогПротоколПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.вогПротокол.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	//Если Элемент.ТекущийЭлемент = Элементы.вогПротоколСостояниеИсполненияГиперссылка Тогда
	//	Если ЗначениеЗаполнено(ТекущиеДанные.Исполнение) Тогда
	//		ПоказатьЗначение(, ТекущиеДанные.Исполнение);
	//	КонецЕсли;
	//	Возврат;
	//КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ПунктПротокола);
	ПараметрыФормы.Вставить("ДокументМероприятие", Объект.Ссылка);
	ОткрытьФорму("Справочник.вогПротоколыМероприятий.Форма.ФормаЭлементаИзДокумента" , ПараметрыФормы, ЭтаФорма);
	

КонецПроцедуры

&НаКлиенте
Процедура вогПротоколПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	//Если ПротоколТолькоПросмотр Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Если Копирование Тогда
		ТекущиеДанные = Элементы.вогПротокол.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.ПунктПротокола);
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура("Мероприятие", Объект.Ссылка);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("ДокументМероприятие", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.вогПротоколыМероприятий.Форма.ФормаЭлементаИзДокумента", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура вогПротоколПередУдалением(Элемент, Отказ)

	
	//Если ПротоколТолькоПросмотр Тогда
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура вогПротоколПриИзменении(Элемент)

	// Сортировка протокола
	вогУправлениеМероприятиямиКлиентСервер.СортироватьПротокол(Объект.вогПротокол);

	
КонецПроцедуры

&НаКлиенте
Процедура вогПротоколВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.вогПротокол.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	//Если Элемент.ТекущийЭлемент = Элементы.вогПротоколСостояниеИсполненияГиперссылка Тогда
	//	Если ЗначениеЗаполнено(ТекущиеДанные.Исполнение) Тогда
	//		ПоказатьЗначение(, ТекущиеДанные.Исполнение);
	//	КонецЕсли;
	//	Возврат;
	//КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ПунктПротокола);
	ПараметрыФормы.Вставить("ДокументМероприятие", Объект.Ссылка);
	ОткрытьФорму("Справочник.вогПротоколыМероприятий.Форма.ФормаЭлементаИзДокумента" , ПараметрыФормы, ЭтаФорма);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалоПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПараметрыВыбораСрока = вогУправлениеИнтерфейсомКлиент.ПараметрыВыбораСрока();
	ПараметрыВыбораСрока.Форма = ЭтаФорма; 
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "ДатаВремяНачало";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "ДатаВремяНачалоПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "ЭтотОбъект";
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "ДатаВремяНачало";
	
	вогСрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончаниеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСрока = вогУправлениеИнтерфейсомКлиент.ПараметрыВыбораСрока();
	ПараметрыВыбораСрока.Форма = ЭтаФорма; 
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "ДатаВремяОкончание";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "ДатаВремяОкончаниеПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "ЭтотОбъект";
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "ДатаВремяОкончание";
	
	вогСрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);

КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалоПредставлениеПриИзменении(Элемент)
	
	

КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалоПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ДатаВремяНачало = ДатаВремяНачало + 600*Направление;
	ДатаВремяНачалоПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончаниеПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ДатаВремяОкончание = ДатаВремяОкончание + 600*Направление;
	ДатаВремяОкончаниеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалоПриИзменении()
	
	Если ДатаВремяОкончание<ДатаВремяНачало тогда
		ДатаВремяОкончание = ДатаВремяНачало + 3600;
		ДатаВремяОкончаниеПриИзменении();	
	КонецЕсли;
	ДатаВремяНачалоПредставление = Формат(ДатаВремяНачало,"ДФ='dd.MM.yy HH:mm'; ДП='%1'");
	Объект.Дата = ДатаВремяНачало;
	вогУправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект);
	УправлениеВидимостьюПоПрограмме();
	// +++ VOG Кулаков П.Л. 20.01.2021
	Попытка
		Элементы.вогПрограмма.Обновить();	
	Исключение
	КонецПопытки;;
	// --- VOG Кулаков П.Л.
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончаниеПриИзменении()
	
	Если ДатаВремяОкончание<ДатаВремяНачало тогда
		ДатаВремяНачало = ДатаВремяОкончание - 3600;
		
		// ++ VOG Ульянов И.В. 13.01.2020 CRM-139
		ДатаВремяНачалоПриИзменении();
		// -- VOG Ульянов И.В. 13.01.2020 CRM-139
		
	КонецЕсли;
	
	ДатаВремяОкончаниеПредставление = Формат(ДатаВремяОкончание,"ДФ='dd.MM.yy HH:mm'; ДП='%1'");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалоПредставлениеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Текст="";
	Если ЗначениеЗаполнено(ДатаВремяНачало) тогда
		ДатаВремяНачалоПредставление = Формат(ДатаВремяНачало,"ДФ='dd.MM.yy HH:mm'; ДП='%1'");
	Иначе
		ДатаВремяНачалоПредставление = "";
	КонецЕсли;
	ПараметрыВыбораСрока = вогУправлениеИнтерфейсомКлиент.ПараметрыВыбораСрока();
	ПараметрыВыбораСрока.Форма = ЭтаФорма; 
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "ДатаВремяНачало";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "ДатаВремяНачалоПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "ЭтотОбъект";
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "ДатаВремяНачало";
	вогСрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончаниеПредставлениеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Текст="";
	Если ЗначениеЗаполнено(ДатаВремяОкончание) тогда
		ДатаВремяОкончаниеПредставление = Формат(ДатаВремяОкончание,"ДФ='dd.MM.yy HH:mm'; ДП='%1'");
	Иначе
		ДатаВремяОкончаниеПредставление = "";
	КонецЕсли;
	ПараметрыВыбораСрока = вогУправлениеИнтерфейсомКлиент.ПараметрыВыбораСрока();
	ПараметрыВыбораСрока.Форма = ЭтаФорма; 
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "ДатаВремяОкончание";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "ДатаВремяОкончаниеПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "ЭтотОбъект";
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "ДатаВремяОкончание";
	
	вогСрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	ДатаВремяОкончаниеПриИзменении();
	
КонецПроцедуры


&НаКлиенте
Процедура СторонниеЛицаКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	МассивПараметров = Новый Массив;
	Списоквыбора = Новый массив;
	Если НЕ Элементы.СторонниеЛица.ТекущиеДанные.Партнер.пустая() тогда
		Списоквыбора.Добавить(Элементы.СторонниеЛица.ТекущиеДанные.Партнер);
	КонецЕсли;
	Если  НЕ Элементы.СторонниеЛица.ТекущиеДанные.вогТорговаяТочка.Пустая() тогда
		Списоквыбора.Добавить(Элементы.СторонниеЛица.ТекущиеДанные.вогТорговаяТочка);
	КонецЕсли;
	МассивПараметров.Добавить(Новый ПараметрВыбора("ОбъектСвязи",Списоквыбора));
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиФайлы(Команда)
	
	ИмяКоманды = Команда.Имя;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	
	Если вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(Объект.Ссылка) Тогда
		ФормаИмя = "ОбщаяФорма.вогФормаУправленияПрисоединеннымиФайлами";
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Присоединенные файлы'"))
	Иначе	
		ФормаИмя = "ОбщаяФорма.ПрисоединенныеФайлы";
	КонецЕсли;
	
	
	ПараметрыПереходаПоГиперссылке = Новый Структура;
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", ФормаИмя);
	ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
	ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информции возможен только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ГиперссылкаПерейти(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	//Оповещение = Новый ОписаниеОповещения("ГиперссылкаПереходЗавершение",ЭтаФорма,Элементы.СтраницыКарточкаОбъекта.ТекущаяСтраница.Имя);
	
	ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
		ПараметрыПереходаПоГиперссылке.ПараметрыФормы, , ЭтаФорма.УникальныйИдентификатор, , , ,
		ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	
КонецПроцедуры


&НаКлиенте
Процедура вогПрограммаПриИзменении(Элемент)
	
	УправлениеВидимостьюПоПрограмме();	
		
КонецПроцедуры

//START Кайдашов 02/07/19  432
// СтандартныеПодсистемы.Печать
// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ПечатьВнешнегоМакета(Команда)
	
	ИмяМакета = СтрЗаменить(Команда.Имя, "Печать_", "");
	
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.Добавить(Объект.Ссылка);
	
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения);
	
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_ВыполнитьКоманду(Команда)
          ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры 

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
          ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
          ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры 
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
// Конец СтандартныеПодсистемы.Печать
//END Кайдашов

//START Кайдашов 03/07/19 436
&НаКлиенте
Процедура УправлениеВидимостьюПоПрограмме()
	
	ПоказатьПротокол = Ложь;
	ПоказатьВремя = Ложь;
	Для каждого Строка из Объект.вогПрограмма цикл
		Если Строка.ТребуетПринятияРешения тогда
			ПоказатьПротокол = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ВремяПлан) тогда
			ПоказатьВремя = истина;
		КонецЕсли;
	КонецЦикла;
	
	//Если ПоказатьПротокол и НЕ элементы.ГруппаПротоколМероприятия.Видимость тогда
	//	Элементы.ГруппаПротоколМероприятия.Видимость = Истина;
	//КонецЕслИ;
	//
	//Если НЕ ПоказатьПротокол и элементы.ГруппаПротоколМероприятия.Видимость тогда
	//	Элементы.ГруппаПротоколМероприятия.Видимость = Ложь;
	//КонецЕслИ;
	
	Если ПоказатьВремя и НЕ Элементы.вогПрограммаГруппаВремя.Видимость тогда
		Элементы.вогПрограммаГруппаВремя.Видимость = Истина;
	КонецЕсли;
	
	Если НЕ ПоказатьВремя и Элементы.вогПрограммаГруппаВремя.Видимость тогда
		Элементы.вогПрограммаГруппаВремя.Видимость = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПодчинениеСотрудника(Сотрудник,Начальник = Неопределено)
	
	Если Начальник = Неопределено тогда
		Начальник = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
		ТекущийПользователь  = Начальник;
		ТекущаяДолжностнаяПозиция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Начальник,"CRM_ДолжностнаяПозиция");
	
		ДолжностныеПозиции = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
		|ПОМЕСТИТЬ Подичененные
		|ИЗ
		|	Справочник.CRM_ДолжностныеПозиции.ПодчиненныеДолжностныеПозиции КАК CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции
		|ГДЕ
		|	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка В ИЕРАРХИИ(&ТекущаяДолжностнаяПозиция)
		|	И НЕ CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка.ПометкаУдаления
		|	И НЕ &ТекущаяДолжностнаяПозиция = ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CRM_ДолжностныеПозиции.Ссылка КАК Позиция
		|ИЗ
		|	Справочник.CRM_ДолжностныеПозиции КАК CRM_ДолжностныеПозиции
		|ГДЕ
		|	CRM_ДолжностныеПозиции.Ссылка В ИЕРАРХИИ(&ТекущаяДолжностнаяПозиция)
		|	И НЕ &ТекущаяДолжностнаяПозиция = ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
		|	И НЕ CRM_ДолжностныеПозиции.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Подичененные.CRM_ДолжностнаяПозиция
		|ИЗ
		|	Подичененные КАК Подичененные";
		
		Запрос.УстановитьПараметр("ТекущийПользователь"			, ТекущийПользователь);
		Запрос.УстановитьПараметр("ТекущаяДолжностнаяПозиция"	, ТекущаяДолжностнаяПозиция);
		
		ДолжностныеПозиции = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Позиция");
		
		
		//Павелко, CRM-69, 18.12.2019 - добавил в запрос подчиненных по делегированию прав
		Запрос = Новый Запрос("ВЫБРАТЬ
	      |	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
	      |ПОМЕСТИТЬ ВТ_ДолжностныеПозиции
	      |ИЗ
	      |	Справочник.CRM_ДолжностныеПозиции.ПодчиненныеДолжностныеПозиции КАК CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции
	      |ГДЕ
	      |	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.Ссылка В(&СписокДолжностныхПозиций)
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	CRM_ДолжностныеПозицииПодчиненныеДолжностныеПозиции.CRM_ДолжностнаяПозиция
	      |
	      |ОБЪЕДИНИТЬ ВСЕ
	      |
	      |ВЫБРАТЬ
	      |	CRM_ДолжностныеПозиции.Ссылка
	      |ИЗ
	      |	Справочник.CRM_ДолжностныеПозиции КАК CRM_ДолжностныеПозиции
	      |ГДЕ
	      |	CRM_ДолжностныеПозиции.Ссылка В(&СписокДолжностныхПозиций)
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	Пользователи.Ссылка КАК Сотрудник
	      |ИЗ
	      |	Справочник.Пользователи КАК Пользователи
	      |ГДЕ
	      |	Пользователи.CRM_ДолжностнаяПозиция В ИЕРАРХИИ
	      |			(ВЫБРАТЬ
	      |				ВТ_ДолжностныеПозиции.CRM_ДолжностнаяПозиция КАК CRM_ДолжностнаяПозиция
	      |			ИЗ
	      |				ВТ_ДолжностныеПозиции КАК ВТ_ДолжностныеПозиции)
	      |	И (НЕ Пользователи.CRM_ДолжностнаяПозиция = &ТекущаяДолжностнаяПозиция
	      |			ИЛИ Пользователи.Ссылка = &ТекущийПользователь)
	      |
	      |СГРУППИРОВАТЬ ПО
	      |	Пользователи.Ссылка
	      |
	      |ОБЪЕДИНИТЬ ВСЕ
	      |
	      |ВЫБРАТЬ
	      |	вогИсполнителиРолейИДелегаты.ПодчиненныйСотрудник
	      |ИЗ
	      |	РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
	      |ГДЕ
	      |	вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Мероприятия"")
	      |	И вогИсполнителиРолейИДелегаты.ИсполнительДелегат = &ТекущийПользователь");
		
		
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		Запрос.УстановитьПараметр("СписокДолжностныхПозиций", ДолжностныеПозиции);
		Запрос.УстановитьПараметр("ТекущаяДолжностнаяПозиция", ТекущаяДолжностнаяПозиция);
		
		ПодчиненныеСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Возврат ПодчиненныеСотрудники.Найти(Сотрудник)<>Неопределено;
	
КонецФункции

&НаКлиенте
Процедура СвоиЛицаОбязательноПриИзменении(Элемент)
	
	 ТекущиеДанные = Элементы.СвоиЛица.ТекущиеДанные;
	 Если ЗначениеЗаполнено(ТекущиеДанные.Лицо) и ТекущиеДанные.Обязательно тогда
		 Если НЕ ПроверитьПодчинениеСотрудника(ТекущиеДанные.Лицо,Объект.Инициатор) тогда
		 	Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Строка(ТекущиеДанные.Лицо) + " не подчиняется "+ Объект.Инициатор + ", вы не можете поставить флаг 'Обязательно'";
			Сообщение.Поле = "Лицо";
			Сообщение.УстановитьДанные(Элементы.СвоиЛица.ТекущиеДанные);
			Сообщение.Сообщить();
			ТекущиеДанные.Обязательно = Ложь;
		 КонецЕсли;
		 
	 КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНесколькоКонтактныхЛицНажатие(Элемент)

	Элементы.НадписьНесколькоКонтактныхЛиц.Видимость = Ложь;
	Элементы.ГруппаСторонниеЛица.Видимость = Истина;
	Элементы.ГруппаСторонниеЛицаКонтактноеЛицо.Видимость = ЛожЬ;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонСтороннегоЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	Объект.СторонниеЛица[0]);
	ОписаниеВыбораТелефона	= Новый ОписаниеОповещения("ОбработкаВыбораТелефона", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура;
	СтруктураПоиска.Вставить("Партнер",			Объект.СторонниеЛица[0].Партнер); 
	СтруктураПоиска.Вставить("ТорговаяТочка",	Объект.СторонниеЛица[0].вогТорговаяТочка); 
	СтруктураПоиска.Вставить("КонтактноеЛицо",	Объект.СторонниеЛица[0].КонтактноеЛицо); 
	СписокТелефонов			= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	ПоказатьВыборИзСписка(ОписаниеВыбораТелефона, СписокТелефонов, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура EMAILСтороннегоЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	Объект.СторонниеЛица[0]);
	ДополнительныеПараметры.Вставить("СвоеЛицо",		Ложь);
	ОписаниеВыбораАдреса	= Новый ОписаниеОповещения("ОбработкаВыбораАдреса", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура;
	СтруктураПоиска.Вставить("Партнер",			Объект.СторонниеЛица[0].Партнер); 
	СтруктураПоиска.Вставить("ТорговаяТочка",	Объект.СторонниеЛица[0].вогТорговаяТочка); 
	СтруктураПоиска.Вставить("КонтактноеЛицо",	Объект.СторонниеЛица[0].КонтактноеЛицо); 
	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	ПоказатьВыборИзСписка(ОписаниеВыбораАдреса, СписокАдресов, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПартнерЭлементПриИзменении(Элемент)
	
	Объект.СторонниеЛица[0].вогТорговаяТочка = ПредопределенноеЗначение("Справочник.вогТорговыеТочки.ПустаяСсылка");
	ПриИзмененииПартнераКонтакногоЛица(Объект.СторонниеЛица[0],Истина);
	
	Если Не Объект.СторонниеЛица.Количество() = 0 Тогда //Павелко, Таск 000000945, 26.11.2019
		// ++ VOG Ульянов И.В. 17.01.2020 CRM-145
		//Элементы.МесторасположениеОфисаКлиента.Видимость = УстановленаНадписьМесторасположениеОфисаКлиента(Объект.СторонниеЛица[0].Партнер, Объект.вогВидВзаимодействия, Объект.Помещение, МесторасположениеОфисаКлиента, СтруктураАдресаОфисаКлиента);
		Объект.Город = ПредопределенноеЗначение("Справочник.вогНаселенныеПункты.ПустаяСсылка");
		ОбновитьПредставлениеАдреса();
		// -- VOG Ульянов И.В. 17.01.2020 CRM-145
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоЭлементПриИзменении(Элемент)
	
	ПриИзмененииПартнераКонтакногоЛица(Объект.СторонниеЛица[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура ТорговаяТочкаЭлементПриИзменении(Элемент)
	
	Объект.СторонниеЛица[0].Партнер = ПолучитьКлиентаТорговойТочки(Объект.СторонниеЛица[0].вогТорговаяТочка);
	ПриИзмененииПартнераКонтакногоЛица(Объект.СторонниеЛица[0],Истина);
	
	// ++ VOG Ульянов И.В. 17.01.2020 CRM-145
	Если Не Объект.СторонниеЛица.Количество() = 0 Тогда		
		ОбновитьПредставлениеАдреса();				
	КонецЕсли;	
	// -- VOG Ульянов И.В. 17.01.2020 CRM-145
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлиентаТорговойТочки(ТорговаяТочка)
	Если ЗначениеЗаполнено(ТорговаяТочка) тогда
		Возврат ТорговаяТочка.Партнер;
	Иначе
		Возврат Справочники.Партнеры.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ЗаполнитьОписаниеДолжности(Строка)
	
	МассивОбъектовСвязи = Новый Массив;
	Если ЗначениеЗаполнено(Строка.вогТорговаяТочка) тогда
		МассивОбъектовСвязи.Добавить(Строка.вогТорговаяТочка);
	КонецЕсли;
	Если ЗначениеЗаполнено(Строка.Партнер) тогда
		МассивОбъектовСвязи.Добавить(Строка.Партнер);
	КонецЕсли;
	РолиДолжности = вогУправлениеСвязями.РолиДолжностиКонтактногоЛица(Строка.КонтактноеЛицо,МассивОбъектовСвязи,Объект.Дата);
	Если РолиДолжности.Количество()>0 тогда
		Строка.РольИДолжность = ""+РолиДолжности[0].Должность + ?(НЕ РолиДолжности[0].Действует," <НЕ РАБОТАЕТ> ","");	
	Иначе	
		Строка.РольИДолжность = "<<>>";
	КонецЕсли;
	
КонецФункции


&НаСервереБезКонтекста
Функция  КонтактноеЛицоКлиента(Партнер,ТорговаяТочка=Неопределено,ДатаДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	вогСвязиКонтактныхЛицСрезПоследних.КонтактноеЛицо КАК КонтактноеЛицо
	               |ИЗ
	               |	РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних(&ДатаСреза, ОбъектСвязи = &Объект) КАК вогСвязиКонтактныхЛицСрезПоследних
	               |ГДЕ
	               |	вогСвязиКонтактныхЛицСрезПоследних.CRM_Состояние <> ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Уволен)";
	Запрос.УстановитьПараметр("ДатаСреза",ДатаДокумента);
	Запрос.УстановитьПараметр("Объект",ТорговаяТочка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Запрос.УстановитьПараметр("Объект",Партнер);
		Результат = Запрос.Выполнить();
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.КонтактноеЛицо;	
	КонецЕсли;
	
	
КонецФункции

&НаКлиенте
Процедура КонтактноеЛицоЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивПараметров = Новый Массив;
	Списоквыбора = Новый массив;
	Если НЕ Объект.СторонниеЛица[0].Партнер.Пустая() тогда
		Списоквыбора.Добавить(Объект.СторонниеЛица[0].партнер);
	КонецЕсли;
	Если не Объект.СторонниеЛица[0].вогТорговаяТочка.Пустая() тогда
		Списоквыбора.Добавить(Объект.СторонниеЛица[0].вогТорговаяТочка);
	КонецЕслИ;	
	МассивПараметров.Добавить(Новый ПараметрВыбора("ОбъектСвязи",Списоквыбора));
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	

КонецПроцедуры

// ++ VOG Солодов В.В. 10.02.2020 CRM-326
&НаКлиенте
Процедура КонтактноеЛицоЭлементОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПолучитьДанныеВыбораКонтактногоЛица(ДанныеВыбора, ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоЭлементАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПолучитьДанныеВыбораКонтактногоЛица(ДанныеВыбора, ПараметрыПолученияДанных);
	
КонецПроцедуры
// -- VOG Солодов В.В. 10.02.2020

// ++ VOG Солодов В.В. 11.02.2020 CRM-332
&НаКлиенте
Процедура СторонниеЛицаКонтактноеЛицоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПолучитьДанныеВыбораКонтактногоЛица(ДанныеВыбора, ПараметрыПолученияДанных, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаКонтактноеЛицоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПолучитьДанныеВыбораКонтактногоЛица(ДанныеВыбора, ПараметрыПолученияДанных, Истина);
	
КонецПроцедуры
// -- VOG Солодов В.В. 11.02.2020

&НаКлиенте
Процедура СторонниеЛицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не Копирование и НоваяСтрока тогда
		Элементы.СторонниеЛица.ТекущиеДанные.Партнер = Объект.СторонниеЛица[0].Партнер;
		Элементы.СторонниеЛица.ТекущиеДанные.вогТорговаяТочка = Объект.СторонниеЛица[0].вогТорговаяТочка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура EMAILСтороннегоЛицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(ВыбранноеЗначение));
	Если НЕ (РезультатПроверки.КодОшибки = 0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура EMAILСтороннегоЛицаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Объект.СторонниеЛица[0].ПредставлениеАдреса	= Строка(Партнер) + " <" + Текст + ">";

КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
//START Кайдашов 05/08/19 486	
	Если Не ЗначениеЗаполнено(Элементы.СвоиЛица.ТекущиеДанные.Лицо) тогда
		Элементы.СвоиЛица.ТекущиеДанные.Лицо = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		Элементы.СвоиЛица.ТекущиеДанные.ОтправлятьНапоминания = Истина;
		Элементы.СвоиЛица.ТекущиеДанные.Роль = вогОбщегоНазначенияКлиентСервер.ПолучитьРольУчастникМероприятия();
		Элементы.СвоиЛица.ТекущиеДанные.ОтправлятьПоПочте = Истина;
	КонецЕсли;
//END Кайдашов 486
КонецПроцедуры

&НаКлиенте
Процедура вогПрограммаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашенияВОбсуждении(Команда)
	
	Если Модифицированность тогда
		Сообщить("Сначала необходимо сохранить документ");
		возврат;
	КонецЕсли;
	ОтправитьПриглашенияВОбсужденииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПриглашенияВОбсужденииНаСервере()
	
	//START Кайдашов 12/07/19 429
	//УстановитьПривилегированныйРежим(Истина);
	//
	//идОбсуждения = вогСистемаВзаимодействийСервер.СоздатьНовоеОбсуждениеПоОбъекту(Объект.Ссылка);	
	//МассивИД = Новый Массив;
	//Для каждого СтрокаЛица из Объект.СвоиЛица цикл
	//	НовоеСообщение = СистемаВзаимодействия.СоздатьСообщение(идОбсуждения);
	//	НовоеСообщение.Автор = СистемаВзаимодействия.ИдентификаторТекущегоПользователя();
	//	НовоеСообщение.Данные = Объект.Ссылка;
	//	идПользователя = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(СтрокаЛица.Лицо.ИдентификаторПользователяИБ);
	//	МассивИД.Добавить(идПользователя);
	//	НовоеСообщение.Получатели.Добавить(идПользователя); 
	//	НовоеСообщение.Текст = "Новое приглашение на мероприятие"+Символы.ПС + Символы.ВК + Объект.Ссылка;
	//	ПараметрыКнопки = вогСистемаВзаимодействийКлиентСервер.ПолучитьПараметрыДействияКомандыСообщения();
	//	ПараметрыКнопки.Данные = Объект.Ссылка;
	//	ПараметрыКнопки.ДополнительныеПараметры = Новый Структура("Обязательно");
	//	ПараметрыКнопки.Команда = "ПринятьПриглашение";
	//	НовоеСообщение.Действия.Добавить(ПараметрыКнопки,"Принять");
	//	ПараметрыКнопки = вогСистемаВзаимодействийКлиентСервер.ПолучитьПараметрыДействияКомандыСообщения();
	//	ПараметрыКнопки.Данные = Объект.Ссылка;
	//	ПараметрыКнопки.ДополнительныеПараметры = Новый Структура("Обязательно");
	//	ПараметрыКнопки.Команда = "ОтклонитьПриглашение";
	//	НовоеСообщение.Действия.Добавить(ПараметрыКнопки,"Отклонить");
	//	НовоеСообщение.Записать();
	//КонецЦикла;
	//
	////Добавим напоминания 
	//вогСистемаВзаимодействийСервер.ДобавитьНапоминаниеДляПолучателейПриОтправкеСообщения(МассивИД,ПолучитьНавигационнуюСсылку(Объект.Ссылка),Строка(Объект.Ссылка))
	////END Кайдашов 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектноеМероприятиеПриИзменении(Элемент)
	НастроитьВидимостьИДоступностьФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	//START Кайдашов 12/07/19 429
	//вогСистемаВзаимодействийКлиент.ПриЗакрытииФормыОбъекта(ПолучитьНавигационнуюСсылку(Объект.Ссылка));
	//END Кайдашов 
	
КонецПроцедуры

&НаСервере
Процедура МестоПриИзмененииНаСервере()
	
	//Павелко, Таск 000000945, 26.11.2019+++
//	Если Не Объект.СторонниеЛица.Количество() = 0 Тогда
	Если Не Объект.СторонниеЛица.Количество() = 0 или
		Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("Обучение") Тогда  // ++ VOG Ульянов И.В. 31.03.2020 CRM-462

		// ++ VOG Ульянов И.В. 17.01.2020 CRM-145
		//Элементы.МесторасположениеОфисаКлиента.Видимость = УстановленаНадписьМесторасположениеОфисаКлиента(Объект.СторонниеЛица[0].Партнер, Объект.вогВидВзаимодействия, Объект.Помещение, МесторасположениеОфисаКлиента, СтруктураАдресаОфисаКлиента);
		ОбновитьПредставлениеАдреса();
		// -- VOG Ульянов И.В. 17.01.2020 CRM-145
	КонецЕсли;	
	
	//Элементы.Город.Видимость = Не Объект.вогВидВзаимодействия.Пустая() И Не Объект.Помещение.Пустая() 
	//							И Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом") И Объект.Помещение = ПолучитьПомещениеПоНаименованию("НейтральнаяТерритория");
	//							
	//Если Не Элементы.Город.Видимость Тогда
	//	Объект.Город = Неопределено;
	//КонецЕсли;								
	//Павелко, Таск 000000945, 26.11.2019---
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПриИзменении(Элемент)
	МестоПриИзмененииНаСервере();
	НастроитьПроверкуЗаполнения();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	
	Если Объект.Состояние = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено") тогда
		ПризнакОтмены = истина;
	Иначе
		ПризнакОтмены = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//END Кайдашов

// ++ VOG Солодов В.В. 31.07.2019 task 106
&НаСервере
Функция ТекущийПользовательЯвляетсяДелегатом(ТекПользователь)
	
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(Объект.Автор);
	МассивПользователей.Добавить(Объект.Ответственный);
	МассивПользователей.Добавить(Объект.Инициатор);
	
	ЭтоДелегат = РегистрыСведений.вогИсполнителиРолейИДелегаты.ИсполнительЯвляетсяДелегатом(
		МассивПользователей, ТекПользователь, "Мероприятия");
	
	Возврат ЭтоДелегат;
	
КонецФункции
// -- VOG Солодов В.В. 31.07.2019

// ++ VOG Солодов В.В. 06.08.2019 task 464
&НаСервере
Процедура ДокументОткрытАссистентом(Отказ)
	
	РуководительПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "вогРуководитель");
	
	Если Не ЗначениеЗаполнено(РуководительПользователя) Тогда
		Возврат;
	КонецЕсли;
	
	// Если руководитель есть в участниках мероприятия, а текущий пользователь не является ни автором,
	// ни ответственным ни инициатором мероприятия т текущего пользователя нет в списке участников
	//Если Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", РуководительПользователя)).Количество() > 0
	//	И Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ТекущийПользователь)).Количество() = 0
	//	И Объект.Автор <> ТекущийПользователь
	//	И Объект.Инициатор <> ТекущийПользователь
	//	И Объект.Ответственный <> ТекущийПользователь Тогда
	// ++ VOG Солодов В.В. 10.12.2019 bugs 979
	Если Не Объект.Ссылка.Пустая()
		И Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ТекущийПользователь)).Количество() = 0
		И Объект.Автор <> ТекущийПользователь
		И Объект.Инициатор <> ТекущийПользователь
		И Объект.Ответственный <> ТекущийПользователь Тогда
	// До изменения
	//Если Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ТекущийПользователь)).Количество() = 0
	//	И Объект.Автор <> ТекущийПользователь
	//	И Объект.Инициатор <> ТекущийПользователь
	//	И Объект.Ответственный <> ТекущийПользователь Тогда
	// -- VOG Солодов В.В. 10.12.2019
	
		ТекстСообщения = НСтр("ru = 'У вас нет прав открывать этот документ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
		Возврат;
	
	КонецЕсли;
	
КонецПроцедуры


//START Кайдашов 09/09/19 596
//Удаляет напоминания по пользователю и мероприятию
&НаСервереБезКонтекста
Процедура УдалитьНапоминанияПоМероприятию(Мероприятие)
	
	Набор = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
	Набор.Отбор.Предмет.Установить(Мероприятие);
	Набор.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	УдалитьНапоминанияПоМероприятию(Объект.Ссылка);	
	
КонецПроцедуры
//END Кайдашов 596

// ++ VOG Иванов С.А. 02.10.2019 task 564
&НаКлиенте
Процедура НастроитьПроверкуЗаполнения()
	Элементы.ПартнерЭлемент.АвтоОтметкаНезаполненного        = ?(Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом"),Истина, Ложь);
	Элементы.КонтактноеЛицоЭлемент.АвтоОтметкаНезаполненного = ?(Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом")
																	ИЛИ Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСТТ"),Истина, Ложь);
	//Элементы.Место.АвтоОтметкаНезаполненного                 = ?(Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом")
	//																ИЛИ Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСТТ")
	//																ИЛИ Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ЦРУ")
	//																ИЛИ Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ПИР")
	//																ИЛИ Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВИД"),Истина, Ложь);													
	Элементы.Место.ОтметкаНезаполненного                     = ?((Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом")
																	ИЛИ Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСТТ")
																	ИЛИ Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ЦРУ")
																	ИЛИ Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ПИР")
																	ИЛИ Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВИД")) И НЕ ЗначениеЗаполнено(Объект.Место),Истина, Ложь);													
																	
																	
	Элементы.ТорговаяТочкаЭлемент.АвтоОтметкаНезаполненного  = ?(Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСТТ"),Истина, Ложь);													
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ПолучитьВидВзаимодействияПоНаименованию(НаименованиеВзаимодействия)
	ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПустаяСсылка();
	Если НаименованиеВзаимодействия = "ВстречаСКлиентом" Тогда
		ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПолучитьСсылку(Новый УникальныйИдентификатор("b23f6567-97ed-11e9-9b11-005056bcd3e3"));
	ИначеЕсли НаименованиеВзаимодействия = "ВстречаСТТ" Тогда	
		ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПолучитьСсылку(Новый УникальныйИдентификатор("3ad7458f-97ee-11e9-9b11-005056bcd3e3"));
	ИначеЕсли НаименованиеВзаимодействия = "ЦРУ" Тогда	
		ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПолучитьСсылку(Новый УникальныйИдентификатор("9c657cf9-97ed-11e9-9b11-005056bcd3e3"));
	ИначеЕсли НаименованиеВзаимодействия = "ПИР" Тогда	
		ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПолучитьСсылку(Новый УникальныйИдентификатор("32679a50-aa37-11e9-9b11-005056bcd3e3"));
	ИначеЕсли НаименованиеВзаимодействия = "ВИД" Тогда	
		ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПолучитьСсылку(Новый УникальныйИдентификатор("32679a51-aa37-11e9-9b11-005056bcd3e3"));
// ++ VOG Ульянов И.В. 31.03.2020 CRM-462		
	ИначеЕсли НаименованиеВзаимодействия = "Обучение" Тогда	
		ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.ПолучитьСсылку(Новый УникальныйИдентификатор("3926dd5c-ca6e-11e9-8661-005056bcd3e3"));
// -- VOG Ульянов И.В. 31.03.2020 CRM-462		
	КонецЕсли;	
	Возврат ВидВзаимодействия;
КонецФункции
// -- VOG Иванов С.А. 02.10.2019 task 564

&НаСервереБезКонтекста
Функция ПолучитьПомещениеПоНаименованию(НаименованиеПомещения)
	
	Помещение = Справочники.CRM_Помещения.ПустаяСсылка();
	
	Если НаименованиеПомещения = "ОфисКлиента" Тогда
		Помещение = Справочники.CRM_Помещения.ПолучитьСсылку(Новый УникальныйИдентификатор("eb5b1218-aa36-11e9-9b11-005056bcd3e3"));
	ИначеЕсли НаименованиеПомещения = "НейтральнаяТерритория" Тогда	
		Помещение = Справочники.CRM_Помещения.ПолучитьСсылку(Новый УникальныйИдентификатор("fc23ab04-aa36-11e9-9b11-005056bcd3e3"));
	КонецЕсли;	
	
	Возврат Помещение;
	
КонецФункции

&НаСервере
Процедура ОбновитьПредставлениеАдреса()		// VOG Ульянов И.В. 17.01.2020 CRM-145
	
	//Элементы.МесторасположениеОфисаКлиента.Видимость = УстановленаНадписьМесторасположениеОфисаКлиента(Объект.СторонниеЛица[0].Партнер, Объект.вогВидВзаимодействия, Объект.Помещение, МесторасположениеОфисаКлиента, СтруктураАдресаОфисаКлиента);
	
	//Элементы.Город.Видимость = Не Объект.вогВидВзаимодействия.Пустая() И Не Объект.Помещение.Пустая() 
	//							И Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом") И Объект.Помещение = ПолучитьПомещениеПоНаименованию("НейтральнаяТерритория");
	//							
	//Если Не Элементы.Город.Видимость Тогда
	//	Объект.Город = Неопределено;
	//КонецЕсли;	
	
	//Элементы.МесторасположениеОфисаКлиента.Видимость = Ложь;
	Элементы.ДекорацияМесторасположениеОфисаКлиента.Видимость = Ложь;
	Элементы.ДекорацияМесторасположениеОфисаКлиента.Заголовок = "";
	Элементы.ДекорацияМесторасположениеОфисаКлиента.Гиперссылка = Истина;
	
//	Элементы.МесторасположениеОфисаКлиента.Гиперссылка = Истина;
	Элементы.РынокПредставление.Видимость = Ложь;
	//Элементы.Город.Видимость = Ложь;
	Элементы.ОчиститьАдрес.Видимость = Ложь;
	
	Партнер = Объект.СторонниеЛица[0].Партнер;
	ТТ = Объект.СторонниеЛица[0].вогТорговаяТочка;
	ВидВзаимодействия = Объект.вогВидВзаимодействия;
	Помещение = Объект.Помещение;
	
	Если ВидВзаимодействия.Пустая() Или Помещение.Пустая()
		И НЕ ВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("Обучение") Тогда // VOG Ульянов И.В. 31.03.2020 CRM-462	
		Возврат;
	КонецЕсли;
	
	Если НЕ (ВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом") И Помещение = ПолучитьПомещениеПоНаименованию("НейтральнаяТерритория")) тогда
		Если НЕ (ВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("Обучение") И Помещение = ПолучитьПомещениеПоНаименованию("НейтральнаяТерритория"))Тогда // VOG Ульянов И.В. 31.03.2020 CRM-462	
			Если Объект.АдресПредставление <> "" тогда
				Объект.АдресПредставление = "";
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом") И НЕ Партнер.Пустая() тогда
	
		Если Помещение = ПолучитьПомещениеПоНаименованию("ОфисКлиента") Тогда
			
			КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Партнер, , Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.МесторасположениеОфисаКлиента);
			
			//Элементы.МесторасположениеОфисаКлиента.Видимость = Истина;
						
			Если Не КонтактнаяИнформация = Неопределено И Не КонтактнаяИнформация.Количество() = 0 Тогда
				
				МесторасположениеОфисаКлиента = КонтактнаяИнформация[0].Представление;
				
				Элементы.ДекорацияМесторасположениеОфисаКлиента.Видимость = Истина;
				Элементы.ДекорацияМесторасположениеОфисаКлиента.Заголовок = МесторасположениеОфисаКлиента;
	
				СтруктураАдресаОфисаКлиента.Очистить();
				
				СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(КонтактнаяИнформация[0].ЗначенияПолей);
				Для Каждого ЭлементСписка Из СписокПолей Цикл
					СтруктураАдресаОфисаКлиента.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
				КонецЦикла;
				СтруктураАдресаОфисаКлиента.Вставить("Представление", МесторасположениеОфисаКлиента);
				
			Иначе
				
				МесторасположениеОфисаКлиента = "Адрес не указан";
				Элементы.ДекорацияМесторасположениеОфисаКлиента.Видимость = Истина;
				Элементы.ДекорацияМесторасположениеОфисаКлиента.Заголовок = "Адрес: "+МесторасположениеОфисаКлиента;
				Элементы.ДекорацияМесторасположениеОфисаКлиента.Гиперссылка = Ложь;
				
//				Элементы.МесторасположениеОфисаКлиента.Гиперссылка = Ложь;
					
			КонецЕсли;
			
		ИначеЕсли Помещение = ПолучитьПомещениеПоНаименованию("НейтральнаяТерритория") Тогда
			
			Если Объект.АдресПредставление = "" тогда				
				МесторасположениеОфисаКлиента = "Указать адрес";
				//Элементы.МесторасположениеОфисаКлиента.Видимость = Истина;
				Элементы.ДекорацияМесторасположениеОфисаКлиента.Видимость = Истина;
				Элементы.ДекорацияМесторасположениеОфисаКлиента.Заголовок = МесторасположениеОфисаКлиента;
				//Элементы.Город.Видимость = Ложь;
			Иначе
				МесторасположениеОфисаКлиента = Объект.АдресПредставление; 
				//Элементы.МесторасположениеОфисаКлиента.Видимость = Истина;
				Элементы.ДекорацияМесторасположениеОфисаКлиента.Видимость = Истина;
				Элементы.ДекорацияМесторасположениеОфисаКлиента.Заголовок = "Адрес: "+МесторасположениеОфисаКлиента;
				//Элементы.Город.Видимость = Ложь;
				Элементы.ОчиститьАдрес.Видимость = Истина;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;		
	
	Если ВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСТТ") И НЕ ТТ.Пустая() тогда
		
		Если Помещение = ПолучитьПомещениеПоНаименованию("ОфисКлиента") Тогда
		
			КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(, , Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.Месторасположение, ТТ);
			
			Если Не КонтактнаяИнформация = Неопределено И Не КонтактнаяИнформация.Количество() = 0 Тогда
				
				МесторасположениеОфисаКлиента = КонтактнаяИнформация[0].Представление;	
				
				СтруктураАдресаОфисаКлиента.Очистить();
				
				СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(КонтактнаяИнформация[0].ЗначенияПолей);
				Для Каждого ЭлементСписка Из СписокПолей Цикл
					СтруктураАдресаОфисаКлиента.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
				КонецЦикла;
				СтруктураАдресаОфисаКлиента.Вставить("Представление", МесторасположениеОфисаКлиента);
				
				//Элементы.МесторасположениеОфисаКлиента.Видимость = Истина;
				Элементы.ДекорацияМесторасположениеОфисаКлиента.Видимость = Истина;
				Элементы.ДекорацияМесторасположениеОфисаКлиента.Заголовок = "Адрес: "+МесторасположениеОфисаКлиента;
				
			КонецЕсли;	
			
			Если НЕ ТТ.Рынок.Пустая() тогда
				
				Рынок = ТТ.Рынок;
				РынокПредставление = "Рынок: " + СокрЛП(ТТ.Рынок.Наименование);
				Элементы.РынокПредставление.Видимость = Истина;
				
				Если ТТ.МестоположениеНаРынке <> "" тогда	
					РынокПредставление = РынокПредставление + ", " + ТТ.МестоположениеНаРынке;
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;
	
	// ++ VOG Ульянов И.В. 31.03.2020 CRM-462
	Если ВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("Обучение") И Помещение = ПолучитьПомещениеПоНаименованию("НейтральнаяТерритория") тогда
		Если Объект.АдресПредставление = "" тогда				
			МесторасположениеОфисаКлиента = "Указать адрес";
			Элементы.ДекорацияМесторасположениеОфисаКлиента.Видимость = Истина;
			Элементы.ДекорацияМесторасположениеОфисаКлиента.Заголовок = МесторасположениеОфисаКлиента;
		Иначе
			МесторасположениеОфисаКлиента = Объект.АдресПредставление; 
			Элементы.ДекорацияМесторасположениеОфисаКлиента.Видимость = Истина;
			Элементы.ДекорацияМесторасположениеОфисаКлиента.Заголовок = "Адрес: "+МесторасположениеОфисаКлиента;
			Элементы.ОчиститьАдрес.Видимость = Истина;
		КонецЕсли;
	Иначе
		// ++ VOG Солодов В.В. 16.07.2020 CRM_771
		// Закомментировал
		// До изменения
		//Элементы.ДекорацияМесторасположениеОфисаКлиента.Видимость = Ложь;
		//Элементы.ОчиститьАдрес.Видимость = Ложь;
		// -- VOG Солодов В.В. 16.07.2020 CRM_771
	КонецЕсли;	
	// -- VOG Ульянов И.В. 31.03.2020 CRM-462
	
	// ++ VOG Солодов В.В. 30.01.2020 CRM-212
	Если ТипЗнч(СтруктураАдресаОфисаКлиента) = Тип("Структура")
		И СтруктураАдресаОфисаКлиента.Свойство("Представление") Тогда
		Объект.Город = ОпределитьНаселенныйПункт(СтруктураАдресаОфисаКлиента.Представление);
	КонецЕсли;
	// -- VOG Солодов В.В. 30.01.2020
	
КонецПроцедуры		

&НаСервереБезКонтекста
Функция УстановленаНадписьМесторасположениеОфисаКлиента(Партнер, ВидВзаимодействия, Помещение, Надпись, СтруктураАдреса) //Павелко, Таск 000000945, 26.11.2019
	
	СтруктураАдреса.Очистить();
	
	Если Партнер.Пустая() Или ВидВзаимодействия.Пустая() Или Помещение.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом") И Помещение = ПолучитьПомещениеПоНаименованию("ОфисКлиента") Тогда
		
		КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Партнер, , Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.МесторасположениеОфисаКлиента);
		
		Если Не КонтактнаяИнформация = Неопределено И Не КонтактнаяИнформация.Количество() = 0 Тогда
			
			Надпись = КонтактнаяИнформация[0].Представление;	
			
			СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(КонтактнаяИнформация[0].ЗначенияПолей);
			Для Каждого ЭлементСписка Из СписокПолей Цикл
				СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
			КонецЦикла;
			СтруктураАдреса.Вставить("Представление", Надпись);

			Возврат Истина;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Процедура МесторасположениеОфисаКлиентаНажатие(Элемент, СтандартнаяОбработка) //Павелко, Таск 000000945, 26.11.2019
	
	СтандартнаяОбработка = Ложь;
	// ++ VOG Ульянов И.В. 17.01.2020 CRM-145
	//CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдресаОфисаКлиента, "вогГеокодирование");
	Если МесторасположениеОфисаКлиента <> "Указать адрес" тогда
		CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдресаОфисаКлиента, "вогГеокодирование");
	Иначе
		ПараметрыОткрытияФормы = Новый Структура;
	
		ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина); 
		//ПараметрыОткрытияФормы.Вставить("СкрытьПанельАдресов", Истина); 
			
		ОписаниеОповещенияВыборАдреса = Новый ОписаниеОповещения("ОповещениеОписаниеОповещенияВыборАдреса", ЭтотОбъект);
			
		ОткрытьФорму("Обработка.вогГеокодирование.Форма.Форма", ПараметрыОткрытияФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,, ОписаниеОповещенияВыборАдреса);
			
	КонецЕсли;	
	// -- VOG Ульянов И.В. 17.01.2020 CRM-145
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОписаниеОповещенияВыборАдреса(Значение, Доп) Экспорт // VOG Ульянов И.В. 17.01.2020 CRM-145
	
	Если Значение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МесторасположениеОфисаКлиента = Значение.Адрес;
	Элементы.ДекорацияМесторасположениеОфисаКлиента.Видимость = Истина;
	Элементы.ДекорацияМесторасположениеОфисаКлиента.Заголовок = "Адрес: "+МесторасположениеОфисаКлиента;	
	
	Объект.АдресПредставление = Значение.Адрес;
	Объект.АдресШирота = Значение.Широта;
	Объект.АдресДолгота = Значение.Долгота;
	
	Модифицированность = Истина;
	
	СтруктураАдресаОфисаКлиента = Значение;
	СтруктураАдресаОфисаКлиента.Вставить("Представление", МесторасположениеОфисаКлиента);
	
	Элементы.ОчиститьАдрес.Видимость = Истина;
	
	// ++ VOG Солодов В.В. 30.01.2020 CRM-212
	Объект.Город = ОпределитьНаселенныйПункт(МесторасположениеОфисаКлиента);
	// -- VOG Солодов В.В. 30.01.2020
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьНаселенныйПункт(ПредставлениеАдреса) // VOG Солодов В.В. 30.01.2020 CRM-212
	
	Город = Справочники.вогНаселенныеПункты.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ПредставлениеАдреса) Тогда
		Город = Справочники.вогНаселенныеПункты.СформироватьИерархиюАдресаПоПредставлению(ПредставлениеАдреса);
	КонецЕсли;

	Возврат Город;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьАдрес(Команда) // VOG Ульянов И.В. 28.01.2020 CRM-145
	
	Объект.АдресПредставление = "";
	Объект.АдресШирота = 0;
	Объект.АдресДолгота = 0;	
	
	СтруктураАдресаОфисаКлиента.Очистить();
	
	МесторасположениеОфисаКлиента = "Указать адрес";
	
	Элементы.ДекорацияМесторасположениеОфисаКлиента.Видимость = Истина;
	Элементы.ДекорацияМесторасположениеОфисаКлиента.Заголовок = МесторасположениеОфисаКлиента;
		
	Элементы.ОчиститьАдрес.Видимость = Ложь;
	
	Модифицированность = Истина;
	
	// ++ VOG Солодов В.В. 30.01.2020 CRM-212
	Объект.Город = ПредопределенноеЗначение("Справочник.вогНаселенныеПункты.ПустаяСсылка");
	// -- VOG Солодов В.В. 30.01.2020
	
КонецПроцедуры

&НаКлиенте
Процедура РынокПредставлениеНажатие(Элемент, СтандартнаяОбработка)  // VOG Ульянов И.В. 29.01.2020 CRM-145
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Рынок) тогда
		ОткрытьЗначение(Рынок);
	КонецЕсли;
	
КонецПроцедуры

// ++ VOG Ульянов И.В. 07.11.2019 bugs 801
&НаКлиенте
Процедура МестоИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Объект.Место = "";
КонецПроцедуры

// -- VOG Ульянов И.В. 07.11.2019 bugs 801

	
&НаСервере
Функция ПроверитьЗаполненостьРеквизитовДляКомандировки(Отказ) // VOG Ульянов И.В. 05.02.2020 CRM-263
	
	// ++ VOG Солодов В.В. 11.02.2020 CRM-325
	Если Не ТекущийПользователь = Объект.Автор
		И Не ТекущийПользователь = Объект.Ответственный Тогда
		
		Возврат Отказ;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 11.02.2020
	
	Если Объект.Состояние <> Справочники.CRM_СостоянияСобытий.Запланировано тогда		
		Возврат Отказ;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогКомандировкаЗадачи.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.вогКомандировка.Задачи КАК вогКомандировкаЗадачи
		|ГДЕ
		|	вогКомандировкаЗадачи.Задача = &Задача
		|	И вогКомандировкаЗадачи.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Объект.Помещение = ПолучитьПомещениеПоНаименованию("НейтральнаяТерритория") тогда
			Если НЕ ЗначениеЗаполнено(Объект.Город) ИЛИ Объект.АдресПредставление = "" тогда
				Сообщить("Не найден адрес проведения встречи.");
				Возврат Истина;
			Иначе
				Возврат Отказ;				
			КонецЕсли;
		КонецЕсли;			
		
		Если Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСКлиентом") тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.Город) тогда
				Сообщить("Не найден адрес проведения встречи.");
				Возврат Истина;
			КонецЕсли;			
			
			Партнер = Объект.СторонниеЛица[0].Партнер;
			КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Партнер, , Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.МесторасположениеОфисаКлиента);
			Если Не КонтактнаяИнформация = Неопределено И Не КонтактнаяИнформация.Количество() = 0 Тогда
				Возврат Отказ;
			Иначе
				Сообщить("Не найден адрес проведения встречи.");
				Возврат Истина;
			КонецЕсли;	
			
		КонецЕсли;
		
		Если Объект.вогВидВзаимодействия = ПолучитьВидВзаимодействияПоНаименованию("ВстречаСТТ") тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.Город) тогда
				Сообщить("Не найден адрес проведения встречи.");
				Возврат Истина;
			КонецЕсли;			
			
			ТТ = Объект.СторонниеЛица[0].вогТорговаяТочка;			
			КонтактнаяИнформация = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(, , Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.Месторасположение, ТТ);			
			Если Не КонтактнаяИнформация = Неопределено И Не КонтактнаяИнформация.Количество() = 0 Тогда
				Возврат Отказ;
			Иначе
				Сообщить("Не найден адрес проведения встречи.");
				Возврат Истина;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;	
	
КонецФункции

// ++ VOG Солодов В.В. 10.02.2020 CRM-326
&НаКлиенте
Процедура ПолучитьДанныеВыбораКонтактногоЛица(ДанныеВыбора, ПараметрыПолученияДанных, ПоТекущимДанным = Ложь)
	
	Перем ТекущиеДанные;
	
	СписокВыбора = Новый Массив;
	
	Если ПоТекущимДанным Тогда
		ТекущиеДанные = Элементы.СторонниеЛица.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Объект.СторонниеЛица[0];
	КонецЕсли;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если Не ТекущиеДанные.Партнер.Пустая() Тогда
			СписокВыбора.Добавить(ТекущиеДанные.Партнер);
		КонецЕсли;
		
		Если Не ТекущиеДанные.вогТорговаяТочка.Пустая() Тогда
			СписокВыбора.Добавить(ТекущиеДанные.вогТорговаяТочка);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыПолученияДанных.Отбор.Вставить("ОбъектСвязи", СписокВыбора);
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.КонтактныеЛицаПартнеров"), ПараметрыПолученияДанных);
	
КонецПроцедуры
// -- VOG Солодов В.В. 10.02.2020

&НаСервере
Процедура ПроверитьНаличиеКомандировокПоМероприятию()  // VOG Ульянов И.В. 20.03.2020 CRM-380
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	вогКомандировкаЗадачи.Ссылка КАК Командировка
		|ИЗ
		|	Документ.вогКомандировка.Задачи КАК вогКомандировкаЗадачи
		|ГДЕ
		|	вогКомандировкаЗадачи.Задача = &Задача";
	
	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 тогда
		
		Если Выборка.Следующий() тогда
			ЭтаФорма.Командировка = Выборка.Командировка;
			ЭтаФорма.СсылкаНаКомандировку = "Мероприятие выбрано в командировке "+СокрЛП(Выборка.Командировка.Номер)+" от "+СокрЛП(Выборка.Командировка.Дата)
		КонецЕсли;
		
		ЭтаФорма.Элементы.вогВидВзаимодействия.ТолькоПросмотр = Истина;
		ЭтаФорма.Элементы.СсылкаНаКомандировку.Видимость = Истина;
		
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаКлиенте
Процедура СсылкаНаКомандировкуНажатие(Элемент, СтандартнаяОбработка) // VOG Ульянов И.В. 20.03.2020 CRM-380
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(ЭтаФорма.Командировка);
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 29.07.2020 CRM-806
&НаСервере
Функция ПолучитьКоличествоСвязанныхКомандировок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ вогКомандировкаЗадачи.Ссылка) КАК Количество
		|ИЗ
		|	Документ.вогКомандировка.Задачи КАК вогКомандировкаЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогФинансированиеКомандировок КАК вогФинансированиеКомандировок
		|		ПО вогКомандировкаЗадачи.Ссылка = вогФинансированиеКомандировок.Командировка
		|			И вогКомандировкаЗадачи.Сотрудник = вогФинансированиеКомандировок.Сотрудник
		|ГДЕ
		|	НЕ вогКомандировкаЗадачи.Ссылка.ПометкаУдаления
		|	И вогКомандировкаЗадачи.Задача = &Мероприятие
		|	И вогФинансированиеКомандировок.Финансирование = ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.ВБюджете)";
	
	Запрос.УстановитьПараметр("Мероприятие", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	Возврат ВыборкаДетальныеЗаписи.Количество;
	
КонецФункции // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 29.07.2020 CRM-806
&НаКлиенте
Процедура ПредставительскиеРасходыПриИзмененииНаСервереЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ИзменитьСостояниеДокументаКомандировки();
		Записать();
	Иначе
		Объект.ПредставительскиеРасходы = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Ссылка,"ПредставительскиеРасходы");
	КонецЕсли;

КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 29.07.2020 CRM-
Процедура ИзменитьСостояниеДокументаКомандировки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогКомандировкаЗадачи.Ссылка КАК Командировка
		|ИЗ
		|	Документ.вогКомандировка.Задачи КАК вогКомандировкаЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогФинансированиеКомандировок КАК вогФинансированиеКомандировок
		|		ПО вогКомандировкаЗадачи.Ссылка = вогФинансированиеКомандировок.Командировка
		|			И вогКомандировкаЗадачи.Сотрудник = вогФинансированиеКомандировок.Сотрудник
		|ГДЕ
		|	НЕ вогКомандировкаЗадачи.Ссылка.ПометкаУдаления
		|	И вогКомандировкаЗадачи.Задача = &Мероприятие
		|	И вогФинансированиеКомандировок.Финансирование = ЗНАЧЕНИЕ(Перечисление.вогВидыФинансирования.ВБюджете)
		|
		|СГРУППИРОВАТЬ ПО
		|	вогКомандировкаЗадачи.Ссылка";
	
	Запрос.УстановитьПараметр("Мероприятие", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДетальныеЗаписи.Командировка.ПолучитьОбъект();
		ДокументОбъект.ИзмененБюджет = Истина;
		ДокументОбъект.Финансирование = Перечисления.вогВидыФинансирования.ПустаяСсылка();
		ДокументОбъект.Статус = Перечисления.вогСтатусыКомандировок.Создан;
		ДокументОбъект.Записать();
		Для Каждого Строка Из ДокументОбъект.КомандированныеСотрудники Цикл
			РегистрыСведений.вогЭтапыСогласованияКомандировок.УстановитьЭтапСогласования(Строка.Сотрудник,ДокументОбъект.Ссылка,Перечисления.вогЭтапыСогласованияКомандировок.ПустаяСсылка(),Истина);
			РегистрыСведений.вогФинансированиеКомандировок.УстановитьФинансирование(Строка.Сотрудник,ДокументОбъект.Ссылка,Перечисления.вогВидыФинансирования.ПустаяСсылка());
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 29.07.2020 CRM-806
&НаКлиенте
Процедура ПредставительскиеРасходыПриИзменении(Элемент)
	КоличествоКомандировок = ПолучитьКоличествоСвязанныхКомандировок();
	Если КоличествоКомандировок <> 0 И Объект.ПредставительскиеРасходы > ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Ссылка,"ПредставительскиеРасходы") Тогда
		ПоказатьВопрос(
				Новый ОписаниеОповещения("ПредставительскиеРасходыПриИзмененииНаСервереЗавершение", ЭтотОбъект)
				,"При изменении представительских расходов на командировку потребуется заново ее согласовать. Продолжить?"
				,РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры // --- VOG Кулаков П.Л.
