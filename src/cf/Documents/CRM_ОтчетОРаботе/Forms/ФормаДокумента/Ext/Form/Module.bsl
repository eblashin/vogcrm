
///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

&НаКлиенте
Перем ПредыдущаяСтрокаСозданаКопированием;

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДеньНедели(ДатаРабот)
	Возврат Сред(НСтр("ru = ' ПнВтСрЧтПтСбВс'"), ДеньНедели(ДатаРабот) * 2, 2);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивДат(ДатаНачала, ДатаКонца)
	МассивДат = Новый Массив();
	ТекДата = НачалоДня(ДатаНачала);
	СекундВДне = 24 * 60 * 60;
	Пока ТекДата <= НачалоДня(ДатаКонца) Цикл
		МассивДат.Добавить(ТекДата);
		ТекДата = ТекДата + СекундВДне;

	КонецЦикла;
	
	Возврат МассивДат;
КонецФункции

&НаСервере
Процедура ЗаполнитьДни()
	МинДата = Неопределено;
	МаксДата = Неопределено;
	Для Каждого СтрокаТаблицы Из Объект.СтрокиОтчета Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаР) Тогда
			СтрокаТаблицы.День = ПолучитьДеньНедели(СтрокаТаблицы.ДатаР);
			Если МинДата = Неопределено Или СтрокаТаблицы.ДатаР < МинДата Тогда
				МинДата = СтрокаТаблицы.ДатаР;
			КонецЕсли;
			Если МаксДата = Неопределено Или СтрокаТаблицы.ДатаР > МаксДата Тогда
				МаксДата = СтрокаТаблицы.ДатаР;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МинДата <> Неопределено И МаксДата <> Неопределено Тогда
		МассивДат = ПолучитьМассивДат(МинДата, МаксДата);
		СоответствиеКалендарныеДни = CRM_ОбщегоНазначенияСервер.ПолучитьСоответствиеКалендарныхГрафиков(МассивДат,, Объект.Сотрудник);
		
		Для Каждого СтрокаТаблицы Из Объект.СтрокиОтчета Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаР) Тогда
				СтрокаТаблицы.ЭтоНеРабочийДень = ЭтоНеРабочийДень(СтрокаТаблицы.ДатаР, Объект.Сотрудник, СоответствиеКалендарныеДни);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДатыНачалаИОкончанияПериода(Дата, НачалоПериода, КонецПериода, Сотрудник) Экспорт
	Если НЕ ЗначениеЗаполнено(Дата) Тогда Возврат; КонецЕсли;
	
	// Настроим автоматически даты начала и окончания периода.
	НМДатыДок = НачалоМесяца(Дата);
	ННДатыДок = НачалоНедели(Дата);
	КНДатыДок = КонецНедели(Дата);
	
	Если НачалоМесяца(ННДатыДок) = НМДатыДок Тогда 
		НачалоПериода = ННДатыДок;
	Иначе
		НачалоПериода = НМДатыДок;
	КонецЕсли;
	
	Если НачалоМесяца(КНДатыДок) = НМДатыДок Тогда
		КонецПериода = КНДатыДок;
	Иначе
		КонецПериода = КонецМесяца(Дата);
	КонецЕсли;
	
	// Пока сделано для 5-дневной рабочей недели.
	Если ДеньНедели(КонецПериода) = 7 Тогда
		КонецПериода = КонецПериода - 2*3600*24;
	ИначеЕсли ДеньНедели(КонецПериода) = 6 Тогда
		КонецПериода = КонецПериода - 3600*24;
	КонецЕсли;
	
	// Исключение - если пятница данной недели относится к прошлому периоду.
	Если КонецПериода < НачалоПериода Тогда
		КонецПериода = НачалоПериода;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущийЭтапПроекта(Проект)
	Результат = ПредопределенноеЗначение("Справочник.CRM_ЭтапыПроектов.ПустаяСсылка");
	
	Если Проект.CRM_ЭтоПроект И ЗначениеЗаполнено(Проект.CRM_ТекущийЭтап) Тогда
		Результат = Проект.CRM_ТекущийЭтап;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоНеРабочийДень(Дата, Сотрудник, Знач СоответствиеКалендарныеДни = Неопределено)
	Если ТипЗнч(СоответствиеКалендарныеДни) <> Тип("Соответствие") Тогда
		СоответствиеКалендарныеДни = CRM_ОбщегоНазначенияСервер.ПолучитьСоответствиеКалендарныхГрафиков(НачалоДня(Дата),, Сотрудник);
	КонецЕсли;
	Если ТипЗнч(СоответствиеКалендарныеДни) = Тип("Соответствие") Тогда
		Структура = СоответствиеКалендарныеДни[НачалоДня(Дата)];
		Если Структура = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат (Структура.ДеньРабочийДляРесурса = Ложь);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПроверитьНеРабочиеДниНаСервере(МассивДат)
	СоответствиеКалендарныеДни = CRM_ОбщегоНазначенияСервер.ПолучитьСоответствиеКалендарныхГрафиков(МассивДат,, Объект.Сотрудник);
	СтрСтроки = "";
	Для Каждого СтрокаТаблицы Из Объект.СтрокиОтчета Цикл
		Если ЭтоНеРабочийДень(СтрокаТаблицы.ДатаР, Объект.Сотрудник, СоответствиеКалендарныеДни) Тогда
			СтрСтроки = СтрСтроки
				+ ?(ПустаяСтрока(СтрСтроки), "", ", ")
				+ СтрокаТаблицы.НомерСтроки;
			//
		КонецЕсли;
	КонецЦикла;
	Возврат СтрСтроки;
КонецФункции

&НаСервере
Процедура ЗаполнитьОтчетПоСуществующемуОтчету(ВыбранныйДокумент, ОчищатьТЧПередЗаполнением = Истина)
	Если ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.CRM_ОтчетОРаботе") Тогда
		Если ОчищатьТЧПередЗаполнением Тогда
			Объект.СтрокиОтчета.Очистить();
		КонецЕсли;
		
		РазницаПериодов = (Объект.НачалоПериода - ВыбранныйДокумент.НачалоПериода);
		Для Каждого ТекСтрока Из ВыбранныйДокумент.СтрокиОтчета Цикл
			НоваяСтрока = Объект.СтрокиОтчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока, , "ДатаР");
			НоваяСтрока.ДатаР = ТекСтрока.ДатаР + (Объект.НачалоПериода - ВыбранныйДокумент.НачалоПериода);
		КонецЦикла;
		ЗаполнитьДни();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоТекущейСтрокеДоКонцаПериода(ИндексТекущейСтроки)
	ТекДанные = Объект.СтрокиОтчета[ИндексТекущейСтроки];
	
	МассивДат = ПолучитьМассивДат(Объект.НачалоПериода, Объект.КонецПериода);
	СоответствиеКалендарныеДни = CRM_ОбщегоНазначенияСервер.ПолучитьСоответствиеКалендарныхГрафиков(МассивДат,, Объект.Сотрудник);
	
	СчетчикДата = ТекДанные.ДатаР;
	Пока НачалоДня(СчетчикДата) < НачалоДня(Объект.КонецПериода) Цикл
		СчетчикДата = СчетчикДата + 3600*24;
		
		НоваяСтрока = Объект.СтрокиОтчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные, , "ДатаР, НомерСтроки, ИсходныйНомерСтроки");
		НоваяСтрока.ДатаР = СчетчикДата;
		НоваяСтрока.День = ПолучитьДеньНедели(НоваяСтрока.ДатаР);
		НоваяСтрока.ЭтоНеРабочийДень = ЭтоНеРабочийДень(НоваяСтрока.ДатаР, Объект.Сотрудник, СоответствиеКалендарныеДни);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПроверкаКорректностиЗаполненияНаСервере()
	Ошибки = "";
	
	// Если проект - не процесс и у проекта есть хотя бы один этап - в строке ТЧ обязательно должен быть указан этап.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ 
	|	Проекты.Ссылка	КАК Проект,
	|	Этапы.Ссылка	КАК Этап
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.CRM_ЭтапыПроектов КАК Этапы
	|ПО
	|	Проекты.CRM_ЭтоПроект
	|	И Этапы.Владелец = Проекты.Ссылка
	|	И НЕ Этапы.ПометкаУдаления
	|ГДЕ
	|	Проекты.Ссылка В (&Проекты)
	|");
	Запрос.УстановитьПараметр("Проекты", Объект.СтрокиОтчета.Выгрузить().ВыгрузитьКолонку("Проект"));
	
	ТаблицаПроектыЭтапы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из Объект.СтрокиОтчета Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Этап) Тогда
			НайденнаяСтрока = ТаблицаПроектыЭтапы.Найти(СтрокаТаблицы.Проект);
			Если НайденнаяСтрока <> Неопределено Тогда
				Ошибки = Ошибки
					+ ?(Ошибки = "", "", Символы.ПС)
					+ НСтр("ru = 'Не заполнена колонка ""Этап"" в строке'")
					+ " " + СтрокаТаблицы.НомерСтроки + " "
					+ НСтр("ru = 'списка ""Строки отчета""'");
				//
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(Ошибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПроверкаКорректностиЗаполненияНаКлиенте()
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Начало периода не заполнено!'"),, "Объект.НачалоПериода");
		//
		Возврат Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Конец периода не заполнен!'"),, "Объект.КонецПериода");
		//
		Возврат Ложь;
	КонецЕсли;
	Если Объект.НачалоПериода > Объект.КонецПериода Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Начало периода больше конца периода!'"),, "Объект.НачалоПериода");
		//
		Возврат Ложь;
	КонецЕсли;
	Если Объект.Дата < НачалоДня(Объект.НачалоПериода) Или Объект.Дата > КонецДня(Объект.КонецПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Дата документа должна находится в выбранном периоде!'"),, "Объект.Дата");
		//
		Возврат Ложь;
	КонецЕсли;
	
	// Выбранный период не должен превышать один год:
	ДнейВГоду = 365;
	СекундВДне = 24 * 60 * 60;
	Если (НачалоДня(Объект.КонецПериода) - НачалоДня(Объект.НачалоПериода)) / СекундВДне > ДнейВГоду Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Выбранный период не должен превышать один год!'"),, "Объект.КонецПериода");
		//
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка, что даты работ в табличной части находятся внутри выбранного периода:
	Ошибки = "";
	Для Каждого СтрокаТаблицы Из Объект.СтрокиОтчета Цикл
		Если СтрокаТаблицы.ДатаР < Объект.НачалоПериода Или СтрокаТаблицы.ДатаР > Объект.КонецПериода Тогда
			Ошибки = Ошибки
				+ ?(Ошибки = "", "", Символы.ПС)
				+ НСтр("ru = 'Строка'") + " " + СтрокаТаблицы.НомерСтроки + ": "
				+ НСтр("ru = 'дата работ находится за пределами выбранного периода!'");
			//
		КонецЕсли;
	КонецЦикла;
	Если Не ПустаяСтрока(Ошибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьЗначениеНастройки(Пользователь,Настройка) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.CRM_НастройкиПользователей[Настройка]);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Значение
	|ИЗ
	|	РегистрСведений.CRM_НастройкиПользователей КАК РегистрЗначениеПрав
	|
	|ГДЕ
	|	Пользователь = &Пользователь
	| И Настройка    = &Настройка";
	Выборка = Запрос.Выполнить().Выбрать();
	ПустоеЗначение = ПланыВидовХарактеристик.CRM_НастройкиПользователей[Настройка].ТипЗначения.ПривестиЗначение();
	Если Выборка.Количество() = 0 Тогда
		Возврат ПустоеЗначение;
	ИначеЕсли Выборка.Следующий() Тогда
		Если НЕ ЗначениеЗаполнено(Выборка.Значение) Тогда
			Возврат ПустоеЗначение;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	Подразделение = Объект.Сотрудник.Подразделение;
	Объект.Подразделение = Подразделение;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ЗаполнитьДатыНачалаИОкончанияПериода(Объект.Дата, Объект.НачалоПериода, Объект.КонецПериода, Объект.Сотрудник);
КонецПроцедуры

&НаКлиенте
Процедура СтрокиОтчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элементы.СтрокиОтчета.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ПредыдущаяСтрокаСозданаКопированием = Копирование;
	
	Если НоваяСтрока Тогда
		ТекДанные.ПодразделениеРабот = Объект.Подразделение;
		
		Если Не ЗначениеЗаполнено(ТекДанные.ДатаР) И Не ЗначениеЗаполнено(ТекДанные.Проект) Тогда
			// Если текущая дата в одной календарной неделе с датой документа, тогда добавляем строку текущей датой.
			Если НачалоНедели(Объект.Дата) = НачалоНедели(ТекущаяДата()) Тогда
				ТекДанные.ДатаР = НачалоДня(ТекущаяДата());
			Иначе
				ТекДанные.ДатаР = НачалоДня(Объект.НачалоПериода);
			КонецЕсли;
			
			ТекДанные.Проект = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Сотрудник, "ОсновнойПроект");
			
			СтрокиОтчетаДатаРПриИзменении(Неопределено)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрокиОтчетаДатаРПриИзменении(Элемент)
	ТекДанные = Элементы.СтрокиОтчета.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекДанные.День = ПолучитьДеньНедели(ТекДанные.ДатаР);
	ТекДанные.ЭтоНеРабочийДень = ЭтоНеРабочийДень(ТекДанные.ДатаР, Объект.Сотрудник);
КонецПроцедуры

&НаКлиенте
Процедура СтрокиОтчетаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элементы.СтрокиОтчета.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтрокиОтчетаПроектПриИзменении(Элемент)
	ТекДанные = Элементы.СтрокиОтчета.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекДанные.Этап = ПолучитьТекущийЭтапПроекта(ТекДанные.Проект);
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Для Каждого СтрокаТаблицы Из Объект.СтрокиОтчета Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ПодразделениеРабот) Тогда
				СтрокаТаблицы.ПодразделениеРабот = Объект.Подразделение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

&НаКлиенте
Процедура КомандаЗаполнитьТекущейСтрокойДоКонцаПериода(Команда)
	ТекДанные = Элементы.СтрокиОтчета.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если День(Объект.НачалоПериода) > День(Объект.КонецПериода) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоТекущейСтрокеДоКонцаПериода(Объект.СтрокиОтчета.Индекс(ТекДанные));
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоСуществующемуОтчету(Команда)
	Если Объект.СтрокиОтчета.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьПоСуществующемуОтчетуЗавершение", ЭтотОбъект), НСтр("ru = 'Заполнить с очисткой табличной части?'"), РежимДиалогаВопрос.ДаНетОтмена);
        Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьПоСуществующемуОтчетуФрагмент(Ответ);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоСуществующемуОтчетуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьПоСуществующемуОтчетуФрагмент(Ответ);

КонецПроцедуры


&НаКлиенте
Процедура КомандаЗаполнитьПоСуществующемуОтчетуФрагмент(Знач Ответ)
	
	ОткрытьФорму("Документ.CRM_ОтчетОРаботе.ФормаВыбора",, ЭтотОбъект,,,, Новый ОписаниеОповещения("КомандаЗаполнитьПоСуществующемуОтчетуФрагментЗавершение", ЭтотОбъект, Ответ));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоСуществующемуОтчетуФрагментЗавершение(ВыбранныйДокумент, Ответ) Экспорт
	
	Если ТипЗнч(ВыбранныйДокумент) <> Тип("ДокументСсылка.CRM_ОтчетОРаботе") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОтчетПоСуществующемуОтчету(ВыбранныйДокумент, Ответ = КодВозвратаДиалога.Да);
	Модифицированность = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выполнение команд подключаемых отчетов и обработок.

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть форму отчета о работе. Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().Документ_CRM_ОтчетОРаботе_ФормаДокумента_ПриСозданииНаСервере();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	Если ЭтоНовый Тогда
		Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			Объект.Сотрудник = Пользователи.ТекущийПользователь();
		КонецЕсли;
		ЗаполнитьДатыНачалаИОкончанияПериода(Объект.Дата, Объект.НачалоПериода, Объект.КонецПериода, Объект.Сотрудник);
	КонецЕсли;
	
	ЗаполнитьДни();
	CRM_ШаблоныОбъектов.СформироватьДополнительныеЭлементыФормы(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	Элементы.СтрокиОтчетаКомандаЗаполнитьПоРабочемуВремени.Видимость = Константы.CRM_ИспользоватьУчетРабочегоВремени.Получить();		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьДни();
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		// Проверка корректности заполнения.
		Если Не ПроверкаКорректностиЗаполненияНаКлиенте() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если Не ПроверкаКорректностиЗаполненияНаСервере() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если Модифицированность Тогда
		// Проверка рабочих дат на выходные дни.
			МассивДат = ПолучитьМассивДат(Объект.НачалоПериода, Объект.КонецПериода);
			СтрСтроки = ПроверитьНеРабочиеДниНаСервере(МассивДат);
			Если Не ПустаяСтрока(СтрСтроки) Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, ПараметрыЗаписи);
				ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Рабочие даты попадают на выходные дни. Строки:'")
					+ " " + СтрСтроки + ". "
					+ Символы.ПС +НСтр("ru = 'Продолжить?'"), РежимДиалогаВопрос.ДаНет);
					
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Ответ, ПараметрыЗаписи) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Записать(ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события ПриЧтенииНаСервере.
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
		ЗагрузитьИзШаблонаНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийШаблонов

&НаСервере
Процедура ЗагрузитьИзШаблонаНаСервере(ШаблонОбъект)
	
	ОписаниеРеквизитов = ПолучитьРеквизиты("Объект");
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	CRM_ШаблоныОбъектов.ЗаполнитьПредставлениеОбъекта(ШаблонОбъект,ОбъектЗначение,ОписаниеРеквизитов);
	ЗначениеВДанныеФормы(ОбъектЗначение,Объект);
	Объект.Шаблон = ШаблонОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзШаблона(Команда)
	
	СсылкаНаОбъект = Объект.Ссылка;
	сПараметры = Новый Структура("Ссылка, Форма", СсылкаНаОбъект, ЭтотОбъект);
	CRM_ШаблоныОбъектовКлиент.ЗагрузитьИзШаблонаНаКлиенте(сПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляВыгрузки()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	ОбъектСтруктура = Новый Структура("ОбъектЗначение", ОбъектЗначение);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектСтруктура, УникальныйИдентификатор);
	
	Возврат Новый Структура("ЗначенияЗаполнения",Новый Структура("Объект,ТипФормы",АдресВХранилище,"ФормаДокумента"));
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыгрузитьВШаблон(Команда)
	
	ОткрытьФорму("Справочник.CRM_ШаблоныОбъектов.ФормаОбъекта",ПолучитьПараметрыДляВыгрузки(),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьПоРабочемуВремениНаСервере()
	Объект.СтрокиОтчета.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(CRM_РабочееВремяПользователей.Трудозатраты / 60 / 60) КАК Часов,
	|	CRM_РабочееВремяПользователей.ДатаРабот КАК ДатаР,
	|	CRM_РабочееВремяПользователей.Этап,
	|	CRM_РабочееВремяПользователей.Проект,
	|	CRM_РабочееВремяПользователей.Подразделение КАК ПодразделениеРабот
	|ИЗ
	|	РегистрСведений.CRM_РабочееВремяПользователей КАК CRM_РабочееВремяПользователей
	|ГДЕ
	|	CRM_РабочееВремяПользователей.Пользователь = &Сотрудник
	|	И CRM_РабочееВремяПользователей.Подразделение = &Подразделение
	|	И CRM_РабочееВремяПользователей.ДатаРабот МЕЖДУ &НачДата И &КонДата
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_РабочееВремяПользователей.ДатаРабот,
	|	CRM_РабочееВремяПользователей.Проект,
	|	CRM_РабочееВремяПользователей.Этап,
	|	CRM_РабочееВремяПользователей.Подразделение";
	Запрос.УстановитьПараметр("НачДата", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("КонДата", Объект.КонецПериода);
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Объект.СтрокиОтчета.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоРабочемуВремени(Команда)
	Если Объект.СтрокиОтчета.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьПоРабочемуВремениЗавершение", ЭтотОбъект), НСтр("ru = 'Заполнить с очисткой табличной части?'"), РежимДиалогаВопрос.ДаНетОтмена);
        Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьПоРабочемуВремениНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоРабочемуВремениЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		КомандаЗаполнитьПоРабочемуВремениНаСервере();
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#КонецОбласти
