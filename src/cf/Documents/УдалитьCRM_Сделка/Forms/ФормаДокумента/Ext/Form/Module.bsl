 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция РассчитатьСуммуОплатыОтгрузки(БизнесПроцесс)
	СтруктураВозврата 	= Новый Структура ("ЕстьДокументы", Ложь, Ложь);
	МассивЗаказов 		= Новый Массив;
	СуммаСделки 		= 0;
	Оплачено 			= 0;
	Отгружено 			= 0;
	ОплаченоПроцент 	= 0;
	ОтгруженоПроцент	= 0;
	
	СписокЗаказовПокупателей = ПолучитьСписокЗаказовПокупателейПоСделке(БизнесПроцесс);
	
	Если СписокЗаказовПокупателей.Количество() > 0 Тогда
		
		СтруктураВозврата.ЕстьДокументы = Истина;
		
		Для каждого ДокументЗаказ Из СписокЗаказовПокупателей Цикл
			Оплачено 	= Оплачено + ДокументЗаказ.Значение.СуммаОплаты;
			Отгружено 	= Отгружено + ДокументЗаказ.Значение.СуммаОтгрузки;
			СуммаСделки = СуммаСделки + ДокументЗаказ.Значение.СуммаДокумента;
		КонецЦикла;
		
		Если НЕ СуммаСделки 	 = 0 Тогда
			ОплаченоПроцент 	 = Окр((Оплачено/СуммаСделки)*100, 0, РежимОкругления.Окр15как10);
			ОтгруженоПроцент 	 = Окр((Отгружено/СуммаСделки)*100, 0, РежимОкругления.Окр15как10);
		Иначе
			Если Оплачено 	 > 0 Тогда
				ОплаченоПроцент  = 100;
			КонецЕсли;
			Если Отгружено  > 0 Тогда
				ОтгруженоПроцент = 100;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураВозврата.Вставить("Оплачено", Формат(Оплачено, "ЧДЦ=2"));
		СтруктураВозврата.Вставить("ОплаченоПроцент", ОплаченоПроцент);
		СтруктураВозврата.Вставить("Отгружено", Формат(Отгружено, "ЧДЦ=2"));
		СтруктураВозврата.Вставить("ОтгруженоПроцент", ОтгруженоПроцент);
		СтруктураВозврата.Вставить("СуммаСделки", Формат(СуммаСделки, "ЧДЦ=2"));
		
		//Для Каждого СтрокаРасчетов Из РасчетыПоСделке Цикл
		//	//Если СтрокаРасчетов.Валюта = ВалютаУправленческогоУчета Тогда
		//	Долг = Долг + СтрокаРасчетов.СуммаОстаток;		
		//	//Иначе
		//	//	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаРасчетов.Валюта, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
		//	//	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,  CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
		//	//	Долг = Долг + РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		//	//	СтрокаРасчетов.СуммаОстаток, СтрокаРасчетов.Валюта, ВалютаУправленческогоУчета,
		//	//	СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
		//	//	СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
		//	//КонецЕсли;
		//КонецЦикла;
		//Иначе
		//	ВключитьВидимость = Ложь;
		//КонецЕсли;	
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокЗаказовПокупателейПоСделке(БизнесПроцесс)
	
	СписокЗаказовПокупателей = Новый СписокЗначений;
	//Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
	//Набор.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	//Набор.Прочитать();
	//Если Набор.Количество() > 0 Тогда
	//	Для каждого ЗаписьНабора Из Набор Цикл
	//		Если ТипЗнч(ЗаписьНабора.Объект) = Тип("ДокументСсылка.CRM_СчетНаОплатуПокупателю") Тогда
	//			СписокЗаказовПокупателей.Добавить(ЗаписьНабора.Объект);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
	Возврат СписокЗаказовПокупателей;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеОснования(ИмяДокумента)
	
	СинонимДокумента	= Метаданные.НайтиПоТипу(Тип("ДокументСсылка."+ИмяДокумента)).Синоним;
	
	СписокОснований = Новый СписокЗначений;
	
	Для Каждого СтрокаТаб Из ТаблицаТипов Цикл
		Если СтрокаТаб.ВидОбъекта.ТипЗначения.СодержитТип(Тип("ДокументСсылка."+ИмяДокумента)) Тогда
			Если ЗначениеЗаполнено(СтрокаТаб.ЭтапОснования) Тогда
				
				Если СтрокаТаб.ЭтапОснования.Вид = Перечисления.CRM_ВидыТочекМаршрута.Старт Тогда
					
					МассивСсылок = Новый Массив;
					
					Если ЗначениеЗаполнено(Объект.БизнесПроцесс.Предмет) И НЕ ТипЗнч(Объект.БизнесПроцесс.Предмет) = Тип("ДокументСсылка.удалитьCRM_Сделка") Тогда
						МассивСсылок.Добавить(Объект.БизнесПроцесс.Предмет);
					Иначе
						МассивСсылок.Добавить(Объект.БизнесПроцесс.Ссылка);
					КонецЕсли;
					СписокОснований.Добавить(МассивСсылок,"Основание бизнес-процесса");
				Иначе
					Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
					Набор.Отбор.БизнесПроцесс.Установить(Объект.БизнесПроцесс);
					Набор.Отбор.ТочкаМаршрута.Установить(СтрокаТаб.ЭтапОснования);
					Набор.Прочитать();
					
					Если Набор.Количество() > 0 Тогда
						МассивСсылок = Набор.ВыгрузитьКолонку("Объект");
						СписокОснований.Добавить(МассивСсылок,НСтр("ru = 'Документы этапа: '") + СтрокаТаб.ЭтапОснования.Наименование);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Объект.БизнесПроцесс.Предмет) И НЕ ТипЗнч(Объект.БизнесПроцесс.Предмет) = Тип("ДокументСсылка.удалитьCRM_Сделка") Тогда
					МассивСсылок = Новый Массив;
					МассивСсылок.Добавить(Объект.БизнесПроцесс.Предмет);
					
					СписокОснований.Добавить(МассивСсылок,"Основание бизнес-процесса");
				КонецЕсли;
				
				Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
				Набор.Отбор.БизнесПроцесс.Установить(Объект.БизнесПроцесс);
				Набор.Прочитать();
				
				ОписаниеТипаЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный));
				ТабНабора = Набор.Выгрузить();
				ТабНабора.Колонки.Добавить("Порядок",ОписаниеТипаЧисло);
				
				Для Каждого СтрокаТаб Из ТабНабора Цикл
					СтрокаТаб.Порядок = СтрокаТаб.ТочкаМаршрута.РеквизитДопУпорядочивания;
				КонецЦикла;
				ТабНабора.Сортировать("Порядок Возр");
				
				ТекущийЭтап = Неопределено;
				МассивСсылок = Новый Массив;
				Для Каждого СтрокаТаб Из ТабНабора Цикл
					
					Если НЕ ТекущийЭтап = СтрокаТаб.ТочкаМаршрута Тогда
						Если МассивСсылок.Количество() > 0 Тогда
							СписокОснований.Добавить(МассивСсылок,ТекущийЭтап.Наименование);
							МассивСсылок = Новый Массив;
						КонецЕсли;
						
						ТекущийЭтап = СтрокаТаб.ТочкаМаршрута;
					КонецЕсли;
					
					МассивСсылок.Добавить(СтрокаТаб.Объект);
				КонецЦикла;
				
				Если МассивСсылок.Количество() > 0 Тогда
					СписокОснований.Добавить(МассивСсылок,НСтр("ru = 'Документы этапа: '") + ТекущийЭтап.Наименование);
				КонецЕсли;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("СписокСсылок,ИмяДокумента",СписокОснований,СинонимДокумента);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьРеквизитПартнера(ИмяДокумента, ИмяРеквизита)
	
	МетаданныеДокумента = Метаданные.Документы[ИмяДокумента];
	
	Возврат CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента); 
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьПартнера(БизнесПроцесс)
	
	Если ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда
		Возврат БизнесПроцесс.Партнер;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
Функция ПолучитьДанныеКлиентПриИзменении(Дата, Клиент, КонтактноеЛицо, Организация) Экспорт
	
	КонтактноеЛицо = Клиент.CRM_ОсновноеКонтактноеЛицо;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец", Клиент);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если РезультатЗапроса.Количество() > 0 Тогда
			Возврат РезультатЗапроса[0].Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Клиент.ДоговорПоУмолчанию;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТемуИзПроекта(Проект)
	Возврат Проект.CRM_КартаМаршрута.Наименование;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлиентаИзПроекта(Проект)
	Возврат Проект.CRM_Партнер;
КонецФункции

&НаКлиенте
Процедура ВвестиОбъект(Команда)
	
	//Если Элементы.Исполнители.ТекущиеДанные = Неопределено Тогда
		Возврат;
	//КонецЕсли;
	//	
	//Если НЕ Элементы.Исполнители.ТекущиеДанные.ЗадачаПринятаКИсполнению Тогда 
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Задача не принята к исполнению!'"));
	//	Возврат;
	//КонецЕсли;
	//
	//КомандаИмя = СтрЗаменить(Команда.Имя, "_"+Элементы.Исполнители.ТекущиеДанные.ТочкаМаршрутаИмя, "");
	//
	//Если Найти(КомандаИмя, "Команда_Ввести_Документ_") > 0 Тогда
	//	
	//	ИмяДокумента = СтрЗаменить(КомандаИмя, "Команда_Ввести_Документ_", "");
	//	ИмяДокумента = СтрЗаменить(ИмяДокумента, "_врем", "");
	//	
	//	ПараметрыФормы = ПроверитьНаличиеОснования(ИмяДокумента);
	//	Если ПараметрыФормы.СписокСсылок.Количество() > 0 Тогда
	//		
	//		ВыбЗнач = ОткрытьФормуМодально("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаВыбораОснования",ПараметрыФормы, ЭтаФорма);
	//		
	//		Если НЕ ВыбЗнач = Неопределено Тогда
	//			ПараметрыФормы = Новый Структура("Основание", ВыбЗнач);
	//			ПараметрыФормы.Вставить("СозданИзЭтапаСделки", Истина);
	//			ОткрытьФорму("Документ."+ИмяДокумента+".ФормаОбъекта",ПараметрыФормы,ЭтаФорма);
	//		КонецЕсли;
	//	Иначе
	//		ПараметрыФормы = Новый Структура("Основание", ТекущаяЗадача);
	//		ПараметрыФормы.Вставить("СозданИзЭтапаСделки", Истина);
	//		ОткрытьФорму("Документ."+ИмяДокумента+".ФормаОбъекта",ПараметрыФормы,ЭтаФорма);
	//	КонецЕсли;
	//	
	//ИначеЕсли Найти(КомандаИмя, "Команда_Ввести_Справочник_") > 0 Тогда
	//	
	//	ИмяСправочника = СтрЗаменить(КомандаИмя, "Команда_Ввести_Справочник_", "");
	//	ИмяСправочника = СтрЗаменить(ИмяСправочника, "_врем", "");
	//	ОткрытьФорму("Справочник."+ИмяСправочника+".ФормаОбъекта",,ЭтаФорма);
	//	
	//ИначеЕсли Найти(КомандаИмя, "Команда_Добавить_Документ_") > 0 Тогда
	//	
	//	ИмяДокумента = СтрЗаменить(КомандаИмя, "Команда_Добавить_Документ_", "");
	//	ИмяДокумента = СтрЗаменить(ИмяДокумента, "_врем", "");
	//	
	//	ПараметрыФормы = Новый Структура("Основание", ТекущаяЗадача);
	//	ИмяДокумента = СтрЗаменить(КомандаИмя, "Команда_Добавить_Документ_", "");
	//	ПараметрыФормы.Вставить("СозданИзЭтапаСделки", Истина);
	//	ОткрытьФорму("Документ."+ИмяДокумента+".ФормаОбъекта",ПараметрыФормы,ЭтаФорма);
	//	
	//ИначеЕсли Найти(КомандаИмя, "Команда_Добавить_Справочник_") > 0 Тогда
	//	
	//	ИмяСправочника = СтрЗаменить(КомандаИмя, "Команда_Добавить_Справочник_", "");
	//	ИмяСправочника = СтрЗаменить(ИмяСправочника, "_врем", "");
	//	ОткрытьФорму("Справочник."+ИмяСправочника+".ФормаОбъекта",,ЭтаФорма);
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОбъект(Команда)
	
	//Если Элементы.Исполнители.ТекущиеДанные = Неопределено Тогда
		Возврат;
	//КонецЕсли;
	//
	//Если НЕ Элементы.Исполнители.ТекущиеДанные.ЗадачаПринятаКИсполнению Тогда 
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Задача не принята к исполнению!'"));
	//	Возврат;
	//КонецЕсли;
	//
	//КомандаИмя = СтрЗаменить(Команда.Имя, "_"+Элементы.Исполнители.ТекущиеДанные.ТочкаМаршрутаИмя, "");
	//
	//Если Найти(КомандаИмя, "Команда_Выбрать_Документ_") > 0 Тогда
	//	
	//	ИмяДокумента = СтрЗаменить(КомандаИмя, "Команда_Выбрать_Документ_", "");
	//	ИмяДокумента = СтрЗаменить(ИмяДокумента, "_врем", "");
	//	
	//	ПараметрыФормы = Новый Структура;
	//	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	//	
	//	ФормаВыбора = ПолучитьФорму("Документ."+ИмяДокумента+".ФормаВыбора",ПараметрыФормы,ЭтаФорма);
	//	
	//	Если ОбъектыПоБизнесПроцессам.Количество() > 0 Тогда
	//		СписокОтбора = Новый СписокЗначений();
	//		СписокОтбора.ЗагрузитьЗначения(ПолучитьСписокОбъектов());
	//		
	//		ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеВСписке;
	//		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Ссылка");
	//		ЭлементОтбора.ПравоеЗначение	= СписокОтбора;
	//		ЭлементОтбора.Использование		= Истина;
	//		
	//	КонецЕсли;
	//	
	//	ЕстьПартнер 	= ?(ЕстьРеквизитПартнера(ИмяДокумента, "Партнер"), Истина, Ложь);
	//	
	//	Если ЕстьПартнер Тогда
	//		Партнер = ВернутьПартнера(Объект.БизнесПроцесс);
	//		Если НЕ Партнер = Неопределено Тогда
	//			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	//			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(?(ЕстьПартнер, "Партнер", "Клиент"));
	//			ЭлементОтбора.ПравоеЗначение	= Партнер;
	//			ЭлементОтбора.Использование		= Истина;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Рез = ФормаВыбора.ОткрытьМодально();
	//	
	//	Если НЕ Рез = Неопределено Тогда
	//		ОбработатьОповещенияЗаписиНовогоОбъекта(Рез);
	//	КонецЕсли;
	//	
	//ИначеЕсли Найти(Команда.Имя, "Команда_Выбрать_Справочник_") > 0 Тогда
	//	
	//	ИмяСправочника = СтрЗаменить(Команда.Имя, "Команда_Выбрать_Справочник_", "");
	//	ИмяСправочника = СтрЗаменить(ИмяСправочника, "_врем", "");
	//	ПараметрыФормы = Новый Структура;
	//	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	//	
	//	Если ОбъектыПоБизнесПроцессам.Количество() > 0 Тогда
	//		СписокОтбора = Новый СписокЗначений();
	//		СписокОтбора.ЗагрузитьЗначения(ПолучитьСписокОбъектов());
	//		
	//		ФормаВыбора = ПолучитьФорму("Справочник."+ИмяСправочника+".ФормаВыбора",ПараметрыФормы,ЭтаФорма);
	//		
	//		ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеВСписке;
	//		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Ссылка");
	//		ЭлементОтбора.ПравоеЗначение	= СписокОтбора;
	//		ЭлементОтбора.Использование		= Истина;
	//		
	//		Рез = ФормаВыбора.ОткрытьМодально();
	//	Иначе
	//		Рез = ОткрытьФормуМодально("Справочник."+ИмяСправочника+".ФормаВыбора",ПараметрыФормы,ЭтаФорма);
	//	КонецЕсли;
	//	
	//	Если НЕ Рез = Неопределено Тогда
	//		ОбработатьОповещенияЗаписиНовогоОбъекта(Рез);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОбъект(Команда)
	
	Если Элементы.Исполнители.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.Исполнители.ТекущиеДанные.ЗадачаПринятаКИсполнению Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Задача не принята к исполнению!'"));
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ОбъектыПоБизнесПроцессам.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("БизнесПроцесс",ТекДанные.БизнесПроцесс);
	СтруктураДанных.Вставить("Задача",ТекДанные.Задача);
	СтруктураДанных.Вставить("ТочкаМаршрута",ТекДанные.ТочкаМаршрута);
	СтруктураДанных.Вставить("Объект",ТекДанные.Объект);
	
	УдалитьЗаписьПоОбъекту(СтруктураДанных);
	
	ОбъектыПоБизнесПроцессам.Удалить(ОбъектыПоБизнесПроцессам.Индекс(ТекДанные));
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокОбъектовПоБизнесПроцессу()
	
	ОбъектыЗначение = РеквизитФормыВЗначение("ОбъектыПоБизнесПроцессам");
	
	РегНабор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
	РегНабор.Отбор.БизнесПроцесс.Установить(Объект.БизнесПроцесс);
	РегНабор.Отбор.Задача.Установить(ТекущаяЗадача);
	РегНабор.Прочитать();
	
	ОбъектыЗначение = РегНабор.Выгрузить();
	
	ЗначениеВРеквизитФормы(ОбъектыЗначение, "ОбъектыПоБизнесПроцессам");
	КоличествоОбъектов = РегНабор.Количество();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписьПоОбъекту(ТекДанные)
	
	ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.БизнесПроцесс	= ТекДанные.БизнесПроцесс;
	ЗаписьРегистра.Задача			= ТекДанные.Задача;
	ЗаписьРегистра.ТочкаМаршрута	= ТекДанные.ТочкаМаршрута;
	ЗаписьРегистра.Объект			= ТекДанные.Объект;
	ЗаписьРегистра.Прочитать();
	Если ЗаписьРегистра.Выбран() Тогда
		ЗаписьРегистра.Удалить();
	КонецЕсли;
	
	ОписаниеТочкиМаршрута = CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(ТекущаяЗадача, Истина);
	
	НастроитьВидимостьИДоступностьФормы(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьПоОбъекту(НовыйОбъект)
	
	НоваяСтрока					= ОбъектыПоБизнесПроцессам.Добавить();
	НоваяСтрока.БизнесПроцесс	= Объект.БизнесПроцесс;
	НоваяСтрока.Задача			= ТекущаяЗадача;
	НоваяСтрока.ТочкаМаршрута	= ТекущаяЗадача.CRM_ТочкаМаршрута;
	НоваяСтрока.Объект			= НовыйОбъект;
	НоваяСтрока.ДатаРегистрации	= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	
	Для Каждого СтрокаТипа Из ТаблицаТипов Цикл
		Если СтрокаТипа.ВидОбъекта.ТипЗначения.СодержитТип(ТипЗнч(НовыйОбъект)) Тогда
			НоваяСтрока.ВидОбъекта = СтрокаТипа.ВидОбъекта;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
	Набор.Отбор.БизнесПроцесс.Установить(НоваяСтрока.БизнесПроцесс);
	Набор.Отбор.Объект.Установить(НоваяСтрока.Объект);
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
	
	ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.БизнесПроцесс	= НоваяСтрока.БизнесПроцесс;
	ЗаписьРегистра.Задача			= НоваяСтрока.Задача;
	ЗаписьРегистра.ТочкаМаршрута	= НоваяСтрока.ТочкаМаршрута;
	ЗаписьРегистра.Объект			= НоваяСтрока.Объект;
	ЗаписьРегистра.ДатаРегистрации	= НоваяСтрока.ДатаРегистрации;
	ЗаписьРегистра.ВидОбъекта		= НоваяСтрока.ВидОбъекта;
	ЗаписьРегистра.Записать();
	
	ОписаниеТочкиМаршрута = CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(ТекущаяЗадача, Истина);
	
	НастроитьВидимостьИДоступностьФормы(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокОбъектов()
	
	Возврат ОбъектыПоБизнесПроцессам.Выгрузить(,"Объект").ВыгрузитьКолонку("Объект");
	
КонецФункции

&НаСервере
Процедура ДействияПриЗавершенномБизнесПроцессе(Результат, ОткрытиеФормы)
	
	Если НЕ ОткрытиеФормы Тогда
		CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(Результат);
	КонецЕсли;
	Объект.Статус		 	 = ?(Объект.БизнесПроцесс.ВариантЗавершения.УспешностьЗавершения = Ложь, "Отказ", "Успех");
	Объект.ДатаЗавершения	 = Объект.БизнесПроцесс.ДатаЗавершения;
	Попытка
		ОписаниеТочкиМаршрута	 = CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(Исполнители[Исполнители.Количество() - 1].ЗадачаЭтапа, Истина);
	Исключение	
	КонецПопытки;
	Элементы.Исполнители.Доступность 							= Ложь;
	Элементы.ФормаЗавершитьБизнесПроцессДосрочно.Доступность 	= Ложь;
	Элементы.ФормаПередвинутьЭтап.Доступность 					= Ложь;
	Элементы.ПричинаОтказа.Видимость							= НЕ Объект.БизнесПроцесс.ВариантЗавершения.УспешностьЗавершения;
	Объект.ПричинаОтказа 										= Объект.БизнесПроцесс.ПричинаДосрочногоЗавершения;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗадачуПоБизнесПроцессу()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.Ссылка,
	|	ЗадачаИсполнителя.CRM_ТочкаМаршрута.РеквизитДопУпорядочивания КАК CRM_ТочкаМаршрутаРеквизитДопУпорядочивания
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	(НЕ ЗадачаИсполнителя.Выполнена)
	|	И (НЕ ЗадачаИсполнителя.ПометкаУдаления)
	|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_ТочкаМаршрутаРеквизитДопУпорядочивания";
	Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.CRM_ЗавершенДосрочно = Истина;
		ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
		ЗадачаОбъект.Записать();
		
		CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(ЗадачаОбъект.Ссылка);
		
		Возврат Новый Структура("Задача, ТочкаМаршрута",ЗадачаОбъект.Ссылка,ЗадачаОбъект.CRM_ТочкаМаршрута);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция БизнесПроцессЗавершается(БизнесПроцессССылка)
	
	Возврат БизнесПроцессССылка.Завершен;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьРеквизитТекущейЗадачи(ЗадачаСсылка, РеквизитИмя, РеквизитЗначение)
	ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
	ЗадачаОбъект[РеквизитИмя] = РеквизитЗначение;
	ЗадачаОбъект.Записать();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьКомментарийКЗадаче(Задача, Комментарий)
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.РезультатВыполнения = ?(ЗначениеЗаполнено(ЗадачаОбъект.РезультатВыполнения), ". ", "") + "Комментарий: " + Комментарий;
	ЗадачаОбъект.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыЗадачиНаСервере(Задача)
	
	СтруктураРеквизитовЗадачи = Новый Структура;
	СтруктураРеквизитовЗадачи.Вставить("CRM_ВариантВыполненияСтрокой", Задача.CRM_ВариантВыполненияСтрокой);
	СтруктураРеквизитовЗадачи.Вставить("ДатаПринятияКИсполнению", Задача.ДатаПринятияКИсполнению);
	СтруктураРеквизитовЗадачи.Вставить("CRM_ВариантВыполнения", Задача.CRM_ВариантВыполнения);
	СтруктураРеквизитовЗадачи.Вставить("ПринятаКИсполнению", Задача.ПринятаКИсполнению);
	СтруктураРеквизитовЗадачи.Вставить("CRM_ТочкаМаршрута", Задача.CRM_ТочкаМаршрута);
	СтруктураРеквизитовЗадачи.Вставить("РольИсполнителя", Задача.РольИсполнителя);
	СтруктураРеквизитовЗадачи.Вставить("БизнесПроцесс", Задача.БизнесПроцесс);
	СтруктураРеквизитовЗадачи.Вставить("Исполнитель", Задача.Исполнитель);
	СтруктураРеквизитовЗадачи.Вставить("Ссылка", Задача.Ссылка);
	
	Возврат СтруктураРеквизитовЗадачи;
	
КонецФункции

&НаКлиенте
Процедура ВыполнениеЗадачиПоУсловию(Кнопка)
	
	//Если Элементы.Исполнители.ТекущиеДанные = Неопределено Тогда
		Возврат;
	//КонецЕсли;
	
	//Завершается = Ложь;
	//ТекущаяЗадачаСсылка 	= Элементы.Исполнители.ТекущиеДанные.ЗадачаЭтапа;
	//ТекущаяЗадачаСтруктура	= ПолучитьРеквизитыЗадачиНаСервере(ТекущаяЗадачаСсылка);
	//
	//ВариантПоКнопке = СтрЗаменить(Кнопка.Имя, "Команда_", "");
	//ВариантПоКнопке = СтрЗаменить(ВариантПоКнопке, "_"+Элементы.Исполнители.ТекущиеДанные.ТочкаМаршрутаИмя, "");
	//
	//ТекущаяЗадачаСтруктура.CRM_ВариантВыполнения		= Число(ВариантПоКнопке);
	//ТекущаяЗадачаСтруктура.CRM_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(ТекущаяЗадачаСтруктура.CRM_ТочкаМаршрута, Число(ВариантПоКнопке), Объект.НомерВерсииКартыМаршрута);
	//
	//СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(ТекущаяЗадачаСтруктура.Ссылка);
	//Если СписокТочекМаршрута.Количество() > 0 Тогда
	//	ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута", ТекущаяЗадачаСтруктура.БизнесПроцесс, СписокТочекМаршрута);
	//	Рез = ОткрытьФормуМодально("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя",ПараметрыФормы,ЭтаФорма);
	//	
	//	Если Рез = КодВозвратаДиалога.Отмена ИЛИ Рез = Неопределено Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если СписокОбязательныхТипов.Количество() > 0 Тогда
	//	МассивОшибок = CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(ТекущаяЗадачаСтруктура.Ссылка, СписокОбязательныхТипов);
	//	Если МассивОшибок.Количество() > 0 Тогда
	//		Для Индекс = 0 По МассивОшибок.ВГраница() Цикл
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивОшибок[Индекс]);
	//		КонецЦикла;
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// Если бизнес-процесс далее завершается неудачно, то возможно надо указать причину.
	//Если CRM_БизнесПроцессыСервер.ПриведетКНеудачномуЗавершению(ТекущаяЗадачаСтруктура.БизнесПроцесс, ТекущаяЗадачаСтруктура.CRM_ТочкаМаршрута, ТекущаяЗадачаСтруктура.CRM_ВариантВыполнения) Тогда
	//	
	//	ФормаДосрочногоЗавершения = ПолучитьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения",,ЭтаФорма);
	//	ФормаДосрочногоЗавершения.Заголовок = "Неудачное завершение бизнес-процесса";
	//	ФормаДосрочногоЗавершения.Элементы.ПричинаНеудачногоЗавершения.Заголовок = "Причина неудачного завершения";
	//	Рез = ФормаДосрочногоЗавершения.ОткрытьМодально();
	//	
	//	Если НЕ Рез = Неопределено Тогда
	//		Рез.Вставить("Задача"					, ТекущаяЗадачаСтруктура.Ссылка);
	//		Рез.Вставить("ЭтапДосрочногоЗавершения"	, ТекущаяЗадачаСтруктура.CRM_ТочкаМаршрута);
	//		Завершается = Истина;
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(ТекущаяЗадачаСтруктура.Ссылка,ТекущаяЗадачаСтруктура.CRM_ВариантВыполнения);
	//ПоказатьОповещениеПользователя(
	//НСтр("ru = 'Задача выполнена'"),
	//ПолучитьНавигационнуюСсылку(ТекущаяЗадачаСтруктура.Ссылка),
	//Строка(ТекущаяЗадачаСтруктура.Ссылка));
	//
	//Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	//
	//ЗаписатьРеквизитТекущейЗадачи(ТекущаяЗадачаСсылка, "РезультатВыполнения", РезультатВыполнения);
	//РезультатВыполнения = "";
	//
	//Если Завершается Тогда
	//	ДействияПриЗавершенномБизнесПроцессе(Рез, Ложь);
	//ИначеЕсли БизнесПроцессЗавершается(Объект.БизнесПроцесс) Тогда
	//	ДействияПриЗавершенномБизнесПроцессе(Неопределено, Истина);
	//КонецЕсли;
	//
	//ПараметрыОповещения = Новый Структура("ЗадачаСсылка, Завершается", ТекущаяЗадачаСтруктура.Ссылка, Завершается);
	//Оповестить("ЗадачаВыполнена", ПараметрыОповещения);
	//
	//СформироватьОписаниеТекущегоСостоянияБП();
	//
	//ЭтаФорма.Записать();
	
КонецПроцедуры // ВыполнениеЗадачиПоУсловию()

&НаКлиенте
Процедура ВыполнитьЗадачуБезУсловия(Команда)
	
	//Если Элементы.Исполнители.ТекущиеДанные = Неопределено Тогда
		Возврат;
	//КонецЕсли;
	
	//Завершается = Ложь;
	//ТекущаяЗадачаСсылка 	= Элементы.Исполнители.ТекущиеДанные.ЗадачаЭтапа;
	//ТекущаяЗадачаСтруктура 	= ПолучитьРеквизитыЗадачиНаСервере(ТекущаяЗадачаСсылка);
	//
	//Если НЕ ТекущаяЗадачаСтруктура.CRM_ВариантВыполнения = ВариантВыполнения Тогда
	//	ТекущаяЗадачаСтруктура.CRM_ВариантВыполнения		= ВариантВыполнения;
	//	ТекущаяЗадачаСтруктура.CRM_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(ТекущаяЗадачаСтруктура.CRM_ТочкаМаршрута, ВариантВыполнения, Объект.НомерВерсииКартыМаршрута);
	//КонецЕсли;
	//
	//СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(ТекущаяЗадачаСтруктура.Ссылка);
	//Если СписокТочекМаршрута.Количество() > 0 Тогда
	//	ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута", ТекущаяЗадачаСтруктура.БизнесПроцесс, СписокТочекМаршрута);
	//	Рез = ОткрытьФормуМодально("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя",ПараметрыФормы,ЭтаФорма);
	//	
	//	Если Рез = КодВозвратаДиалога.Отмена ИЛИ Рез = Неопределено Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если СписокОбязательныхТипов.Количество() > 0 Тогда
	//	МассивОшибок = CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(ТекущаяЗадачаСтруктура.Ссылка, СписокОбязательныхТипов);
	//	Если МассивОшибок.Количество() > 0 Тогда
	//		Для Индекс = 0 По МассивОшибок.ВГраница() Цикл
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивОшибок[Индекс]);
	//		КонецЦикла;
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// Если бизнес-процесс далее завершается неудачно, то возможно надо указать причину.
	//Если CRM_БизнесПроцессыСервер.ПриведетКНеудачномуЗавершению(ТекущаяЗадачаСтруктура.БизнесПроцесс, ТекущаяЗадачаСтруктура.CRM_ТочкаМаршрута, ТекущаяЗадачаСтруктура.CRM_ВариантВыполнения) Тогда
	//	
	//	ФормаДосрочногоЗавершения = ПолучитьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения",,ЭтаФорма);
	//	ФормаДосрочногоЗавершения.Заголовок = "Неудачное завершение бизнес-процесса";
	//	ФормаДосрочногоЗавершения.Элементы.ПричинаНеудачногоЗавершения.Заголовок = "Причина неудачного завершения";
	//	Рез = ФормаДосрочногоЗавершения.ОткрытьМодально();
	//	
	//	Если НЕ Рез = Неопределено Тогда
	//		Рез.Вставить("Задача"					, ТекущаяЗадачаСтруктура.Ссылка);
	//		Рез.Вставить("ЭтапДосрочногоЗавершения"	, ТекущаяЗадачаСтруктура.CRM_ТочкаМаршрута);
	//		Завершается = Истина;
	//	Иначе
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(ТекущаяЗадачаСтруктура.Ссылка);
	//ПоказатьОповещениеПользователя(НСтр("ru = 'Задача выполнена'"), ПолучитьНавигационнуюСсылку(ТекущаяЗадачаСтруктура.Ссылка), Строка(ТекущаяЗадачаСтруктура.Ссылка));
	//
	//Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	//
	//ЗаписатьРеквизитТекущейЗадачи(ТекущаяЗадачаСсылка, "РезультатВыполнения", РезультатВыполнения);
	//РезультатВыполнения = "";
	//
	//ПараметрыОповещения = Новый Структура("ЗадачаСсылка, Завершается", ТекущаяЗадачаСтруктура.Ссылка, Завершается);
	//Оповестить("ЗадачаВыполнена", ПараметрыОповещения);
	//
	//Если Завершается Тогда
	//	ДействияПриЗавершенномБизнесПроцессе(Рез, Ложь);
	//ИначеЕсли БизнесПроцессЗавершается(Объект.БизнесПроцесс) Тогда
	//	ДействияПриЗавершенномБизнесПроцессе(Неопределено, Истина);
	//КонецЕсли;
	//
	//СформироватьОписаниеТекущегоСостоянияБП();
	//
	//ЭтаФорма.Записать();
	
КонецПроцедуры	

&НаСервере
Процедура ПолучитьОбязательныеТипыОбъектовИВариантВыполнения(ТекущаяЗадача)
	
	ТаблицаТипов.Очистить();
	
	ТаблицаТиповЗначение 	= РеквизитФормыВЗначение("ТаблицаТипов");
	
	ВариантВыполнения 		= ТекущаяЗадача.CRM_ВариантВыполнения;
	СтруктураТипов 			= CRM_БизнесПроцессыСервер.ПолучитьСтруктуруТипов_Новая(ТекущаяЗадача);
	
	Если СтруктураТипов.ТаблицаТипов.Количество() > 0 Тогда
	СписокОбязательныхТипов = СтруктураТипов.СписокОбязательныхТипов;
		Для Каждого СтрокаТаб Из СтруктураТипов.ТаблицаТипов Цикл
			НоваяСтрока = ТаблицаТиповЗначение.Добавить();
			НоваяСтрока.ВидОбъекта		= СтрокаТаб.ВидОбъекта;
			НоваяСтрока.ЭтапОснования	= СтрокаТаб.ЭтапОснования;
			НоваяСтрока.Обязательный	= СтрокаТаб.Обязательный;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаТиповЗначение, "ТаблицаТипов");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВариантыВыполненияЭтапа(Объект, ТочкаМаршрута)
	
	ПредставлениеТочкиЗаголовок	= "";
	
	НаборМаршрута = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборМаршрута.Отбор.Объект.Установить(Объект);
	НаборМаршрута.Отбор.ТочкаМаршрута.Установить(ТочкаМаршрута);
	НаборМаршрута.Прочитать();
	
	ТабНабора = НаборМаршрута.Выгрузить();
	СтрокаМаршрута = ТабНабора.Найти(ТочкаМаршрута,"ТочкаМаршрута");
	СписокВариантов = Новый СписокЗначений;
	
	СтруктураТочки = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТочкаМаршрута,Объект.НомерВерсииКартыМаршрута, 0);
	Если НЕ (СтруктураТочки = Неопределено) И (СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Условие 
		ИЛИ СтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВыборВарианта) Тогда
		ПредставлениеТочкиЗаголовок = СтруктураТочки.ИсходящаяТочка.Наименование;
		МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(СтруктураТочки.ИсходящаяТочка,Объект.НомерВерсииКартыМаршрута);
		Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
			СписокВариантов.Добавить(ЗначениеМассива.Индекс, ЗначениеМассива.ВариантСиноним,(СтрокаМаршрута.ВариантВыполнения = ЗначениеМассива.Индекс));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("СписокВариантов, ПредставлениеТочкиЗаголовок",СписокВариантов,ПредставлениеТочкиЗаголовок);
	
КонецФункции // ПолучитьВариантыВыполненияЗадачи()

&НаСервере
Процедура СформироватьИЗаполнитьПанельАвтокнопок(ИмяЭлементаДляРазмещения = "")
	
	Для Каждого СтрокаИсполнителя Из Исполнители Цикл
		
		Если НЕ СтрокаИсполнителя.ЭтоСтрокаНастройкиЭтапа Тогда Продолжить; КонецЕсли;
		
		ТекущийЭтап = СтрокаИсполнителя.ТочкаМаршрута;
		
		СтруктураВариантовВыполнения = ПолучитьВариантыВыполненияЭтапа(Объект.БизнесПроцесс, ТекущийЭтап);
		
		СтраницаСКоманднойПанелью			= ЭтаФорма.Элементы.Добавить("СтраницаАвтоКнопок"+ТекущийЭтап.Имя, Тип("ГруппаФормы"), ЭтаФорма.Элементы[ИмяЭлементаДляРазмещения]);
		СтраницаСКоманднойПанелью.Вид		= ВидГруппыФормы.Страница;
		СтраницаСКоманднойПанелью.Заголовок	= ТекущийЭтап.Наименование;
		
		ГруппаАвтоКнопки = ЭтаФорма.Элементы.Добавить("ГруппаАвтоКнопки"+ТекущийЭтап.Имя, Тип("ГруппаФормы"), СтраницаСКоманднойПанелью);
		ГруппаАвтоКнопки.Вид					= ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаАвтоКнопки.Отображение			= ОтображениеОбычнойГруппы.Нет;
		ГруппаАвтоКнопки.ЦветТекстаЗаголовка	= Новый Цвет(83,106,194);
		ГруппаАвтоКнопки.ШрифтЗаголовка			= Новый Шрифт(,,Истина,,,);
		ГруппаАвтоКнопки.Заголовок				= СтруктураВариантовВыполнения.ПредставлениеТочкиЗаголовок;
		
		КоманднаяПанельАвтоКнопокЭтапа			= ЭтаФорма.Элементы.Добавить("АвтоКнопки"+ТекущийЭтап.Имя, Тип("ГруппаФормы"), ГруппаАвтоКнопки);
		КоманднаяПанельАвтоКнопокЭтапа.Вид		= ВидГруппыФормы.КоманднаяПанель;
		
		Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 Тогда
			НоваяКомандаФормы = Команды.Добавить("Команда_0_"+ТекущийЭтап.Имя);
			НоваяКомандаФормы.Заголовок                 = "Выполнить";
			НоваяКомандаФормы.Действие                  = "ВыполнитьЗадачуБезУсловия";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			
			НовыйПунктМеню = Элементы.Вставить("Кнопка_0_"+ТекущийЭтап.Имя,Тип("КнопкаФормы"), КоманднаяПанельАвтоКнопокЭтапа);
			НовыйПунктМеню.ИмяКоманды	= "Команда_0_"+ТекущийЭтап.Имя;
			НовыйПунктМеню.Заголовок	= "Выполнить";
			НовыйПунктМеню.Картинка		= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйПунктМеню.Отображение	= ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
	
		НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборЭтапов.Отбор.Объект.Установить(Объект.БизнесПроцесс);
		НаборЭтапов.Прочитать();
		
		// Если это задача БП Поручение и этап "Выполнить", то кнопка будет одна.
		Если Объект.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
			И НаборЭтапов[0].ТочкаМаршрута = ТекущийЭтап Тогда
			
			ГруппаАвтоКнопки.Заголовок ="";
			НоваяКомандаФормы = Команды.Добавить("Команда_"+?(НаборЭтапов[1].Используется,"1","0") + "_"+ТекущийЭтап.Имя);
			НоваяКомандаФормы.Заголовок                 = "Выполнить";
			НоваяКомандаФормы.Действие                  = "ВыполнениеЗадачиПоУсловию";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			
			НовыйПунктМеню = Элементы.Вставить("Кнопка_0_врем",Тип("КнопкаФормы"), КоманднаяПанельАвтоКнопокЭтапа);
			НовыйПунктМеню.ИмяКоманды	= "Команда_"+?(НаборЭтапов[1].Используется,"1","0") + "_"+ТекущийЭтап.Имя;
			НовыйПунктМеню.Заголовок	= "Выполнить";
			НовыйПунктМеню.Картинка		= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйПунктМеню.Отображение	= ОтображениеКнопки.КартинкаИТекст;
			
		Иначе
			ТекЭлементСписка = Неопределено;
			Для Каждого ЭлементСписка Из СтруктураВариантовВыполнения.СписокВариантов Цикл
				Если ЭлементСписка.Пометка Тогда
					ТекЭлементСписка = ЭлементСписка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ТекЭлементСписка = Неопределено Тогда
				СтруктураВариантовВыполнения.СписокВариантов.Сдвинуть(ТекЭлементСписка,-(СтруктураВариантовВыполнения.СписокВариантов.Индекс(ТекЭлементСписка)));
			КонецЕсли;
			
			Для Каждого ЭлементСписка Из СтруктураВариантовВыполнения.СписокВариантов Цикл
				НоваяКомандаФормы = Команды.Добавить("Команда_"+СокрЛП(Строка(ЭлементСписка.Значение)) + "_"+ТекущийЭтап.Имя);
				НоваяКомандаФормы.Заголовок                 = ЭлементСписка.Представление;
				НоваяКомандаФормы.Действие                  = "ВыполнениеЗадачиПоУсловию";
				НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
				
				НовыйПунктМеню = Элементы.Вставить("Кнопка_"+СокрЛП(Строка(ЭлементСписка.Значение)) + "_"+ТекущийЭтап.Имя, Тип("КнопкаФормы"), КоманднаяПанельАвтоКнопокЭтапа);
				НовыйПунктМеню.ИмяКоманды			= "Команда_"+СокрЛП(Строка(ЭлементСписка.Значение)) + "_"+ТекущийЭтап.Имя;
				НовыйПунктМеню.Заголовок			= ЭлементСписка.Представление;
				НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
				НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОбъектыЭтаповБизнесПроцесса()
	
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		
		НаборОбъектов = РегистрыСведений.CRM_ОбъектыЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборОбъектов.Отбор.Объект.Установить(Объект.БизнесПроцесс);
		
	ИначеЕсли ЗначениеЗаполнено(Объект.КартаМаршрута) Тогда
		
		НаборОбъектов = РегистрыСведений.CRM_ОбъектыЭтапов.СоздатьНаборЗаписей();
		НаборОбъектов.Отбор.Объект.Установить(Объект.КартаМаршрута);
		
	КонецЕсли;
	
	НаборОбъектов.Прочитать();
	
	ОбъектыЭтаповБизнесПроцесса.Очистить();
	Для Каждого СтрокаНабора Из НаборОбъектов Цикл
		НоваяСтрокаОбъекта = ОбъектыЭтаповБизнесПроцесса.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОбъекта,СтрокаНабора);
	КонецЦикла;
	
	ОбъектыЭтаповБизнесПроцесса.Сортировать("ТочкаМаршрута возр");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИЗаполнитьПанельОбъектовПоБизнесПроцессу(ИмяЭлементаДляРазмещения = "")
	
	ТекущийЭтап = Неопределено;
	
	Для Каждого СтрокаОбъекта Из ОбъектыЭтаповБизнесПроцесса Цикл
		
		Если НЕ ТекущийЭтап = СтрокаОбъекта.ТочкаМаршрута Тогда
			ТекущийЭтап = СтрокаОбъекта.ТочкаМаршрута;
			
			МассивСтрок = ОбъектыЭтаповБизнесПроцесса.НайтиСтроки(Новый Структура("ТочкаМаршрута",ТекущийЭтап));
			
			СтраницаСКоманднойПанелью			= ЭтаФорма.Элементы.Добавить("СтраницаОбъектов"+ТекущийЭтап.Имя, Тип("ГруппаФормы"), ЭтаФорма.Элементы[ИмяЭлементаДляРазмещения]);
			СтраницаСКоманднойПанелью.Вид		= ВидГруппыФормы.Страница;
			СтраницаСКоманднойПанелью.Заголовок	= ТекущийЭтап.Наименование;
			
			Если МассивСтрок.Количество() > 0 Тогда
				
				КоманднаяПанельЭтапа = ЭтаФорма.Элементы.Добавить("ПодключаемаяКомПанель"+ТекущийЭтап.Имя, Тип("ГруппаФормы"), СтраницаСКоманднойПанелью);
				КоманднаяПанельЭтапа.Вид = ВидГруппыФормы.КоманднаяПанель;
				
				Если МассивСтрок.Количество() > 0 Тогда
					
					НоваяКомандаФормы = Команды.Добавить("Команда_Ввести"+ТекущийЭтап.Имя);
					НоваяКомандаФормы.Заголовок                 = НСтр("ru = Создать документ'");
					НоваяКомандаФормы.Действие                  = "ВвестиОбъект";
					НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
					НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Создать новый документ на основании документа этапа'");
					
					НоваяКомандаФормы = Команды.Добавить("Команда_Выбрать"+ТекущийЭтап.Имя);
					НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Выбрать'");
					НоваяКомандаФормы.Действие                  = "ВыбратьОбъект";
					НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
					НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Выбрать существующий документ'");
					
					НоваяКомандаФормы = Команды.Добавить("Команда_Добавить"+ТекущийЭтап.Имя);
					НоваяКомандаФормы.Заголовок                 = НСтр("ru = На основании этапа'");
					НоваяКомандаФормы.Действие                  = "ВвестиОбъект";
					НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
					НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Создать новый документ на основании текущего этапа'");
				КонецЕсли;
				
				Если МассивСтрок.Количество() = 1 Тогда
					
					МассивТипов = МассивСтрок[0].ВидОбъекта.ТипЗначения.Типы();
					
					МетаданныеДок	= Метаданные.НайтиПоТипу(МассивТипов[0]);
					ПолноеИмя		= МетаданныеДок.ПолноеИмя();
					Синоним			= МетаданныеДок.Синоним;
					
					ИмяКнопкиДобавить	= "Добавить_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_");
					ИмяКнопкиВвести		= "Ввести_"  +ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_");
					ИмяКнопкиВыбрать	= "Выбрать_" +ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_");
					
					// Ввести объект на основании
					НоваяКомандаФормы = Команды.Добавить("Команда_Ввести_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_"));
					НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Создать документ'");
					НоваяКомандаФормы.Действие                  = "ВвестиОбъект";
					НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
					НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Создать документ %Синоним% на основании документа этапа'");
					НоваяКомандаФормы.Подсказка = СтрЗаменить(НоваяКомандаФормы.Подсказка, "%Синоним%", Синоним);		
					
					НовыйПунктМеню = Элементы.Вставить(ИмяКнопкиВвести, Тип("КнопкаФормы"), КоманднаяПанельЭтапа);
					НовыйПунктМеню.ИмяКоманды			= "Команда_Ввести_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_");
					НовыйПунктМеню.Заголовок			= НСтр("ru = 'Создать документ'");
					НовыйПунктМеню.Картинка				= БиблиотекаКартинок.СоздатьЭлементСписка;
					НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
					
					// Ввести объект без основания.
					НоваяКомандаФормы = Команды.Добавить("Команда_Добавить_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_"));
					НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'На основании этапа'");
					НоваяКомандаФормы.Действие                  = "ВвестиОбъект";
					НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
					НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Создать новый документ %Синоним% на основании текущего этапа'");
					НоваяКомандаФормы.Подсказка = СтрЗаменить(НоваяКомандаФормы.Подсказка, "%Синоним%", Синоним);		
					
					НовыйПунктМеню = Элементы.Вставить(ИмяКнопкиДобавить, Тип("КнопкаФормы"), КоманднаяПанельЭтапа);
					НовыйПунктМеню.ИмяКоманды			= "Команда_Добавить_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_");
					НовыйПунктМеню.Заголовок			= НСтр("ru = 'На основании этапа'");
					НовыйПунктМеню.Картинка				= БиблиотекаКартинок.СоздатьЭлементСписка;
					НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
					
					// Выбрать объект
					НоваяКомандаФормы = Команды.Добавить("Команда_Выбрать_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_"));
					НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Добавить'");
					НоваяКомандаФормы.Действие                  = "ВыбратьОбъект";
					НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
					НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Выбрать документ %Синоним%'");
					НоваяКомандаФормы.Подсказка = СтрЗаменить(НоваяКомандаФормы.Подсказка, "%Синоним%", Синоним);
					
					НовыйПунктМеню = Элементы.Вставить(ИмяКнопкиВыбрать, Тип("КнопкаФормы"), КоманднаяПанельЭтапа);
					НовыйПунктМеню.ИмяКоманды			= "Команда_Выбрать_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_");
					НовыйПунктМеню.Заголовок			= НСтр("ru = 'Выбрать документ'");
					НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
					
				ИначеЕсли МассивСтрок.Количество() > 1 Тогда
					ПунктМенюВвести		= Элементы.Вставить("Кнопка_Ввести"+ТекущийЭтап.Имя,Тип("ГруппаФормы"), КоманднаяПанельЭтапа);
					ПунктМенюВвести.Заголовок	= НСтр("ru = 'Создать документ'");
					ПунктМенюВвести.Картинка	= БиблиотекаКартинок.СоздатьЭлементСписка;
					ПунктМенюВвести.Отображение	= ОтображениеКнопки.КартинкаИТекст;
					
					ПунктМенюДобавить				= Элементы.Вставить("Кнопка_Добавить"+ТекущийЭтап.Имя,Тип("ГруппаФормы"), КоманднаяПанельЭтапа);
					ПунктМенюДобавить.Заголовок		= НСтр("ru = 'На основании этапа'");
					ПунктМенюДобавить.Картинка		= БиблиотекаКартинок.СоздатьЭлементСписка;
					ПунктМенюДобавить.Отображение	= ОтображениеКнопки.КартинкаИТекст;
					
					ПунктМенюВыбрать	= Элементы.Вставить("Кнопка_Выбрать"+ТекущийЭтап.Имя,Тип("ГруппаФормы"), КоманднаяПанельЭтапа);
					ПунктМенюВыбрать.Заголовок = НСтр("ru = 'Выбрать документ'");
					
					Для Каждого СтрокаТаб Из МассивСтрок Цикл
						
						МассивТипов = СтрокаТаб.ВидОбъекта.ТипЗначения.Типы();
						
						МетаданныеДок	= Метаданные.НайтиПоТипу(МассивТипов[0]);
						ПолноеИмя		= МетаданныеДок.ПолноеИмя();
						Синоним			= МетаданныеДок.Синоним;
						
						ИмяКнопкиДобавить	= "Добавить_" +ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_");
						ИмяКнопкиВвести		= "Ввести_"   +ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_");
						ИмяКнопкиВыбрать	= "Выбрать_"  +ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_");
						
						// Ввести объект на основании
						НоваяКомандаФормы = Команды.Добавить("Команда_Ввести_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_"));
						НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Создать документ'");
						НоваяКомандаФормы.Действие                  = "ВвестиОбъект";
						НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
						НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Создать документ %Синоним% на основании документа этапа'");
						НоваяКомандаФормы.Подсказка = СтрЗаменить(НоваяКомандаФормы.Подсказка, "%Синоним%", Синоним);			
						
						НовыйПунктМеню = Элементы.Вставить(ИмяКнопкиВвести, Тип("КнопкаФормы"), ПунктМенюВвести);
						НовыйПунктМеню.ИмяКоманды			= "Команда_Ввести_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_");
						НовыйПунктМеню.Заголовок			= Синоним;
						НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
						
						// Выбрать объект
						НоваяКомандаФормы = Команды.Добавить("Команда_Выбрать_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_"));
						НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Добавить'");
						НоваяКомандаФормы.Действие                  = "ВыбратьОбъект";
						НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
						НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Выбрать документ %Синоним%'");
						НоваяКомандаФормы.Подсказка = СтрЗаменить(НоваяКомандаФормы.Подсказка, "%Синоним%", Синоним);
						
						НовыйПунктМеню = Элементы.Вставить(ИмяКнопкиВыбрать, Тип("КнопкаФормы"), ПунктМенюВыбрать);
						НовыйПунктМеню.ИмяКоманды			= "Команда_Выбрать_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_");
						НовыйПунктМеню.Заголовок			= Синоним;
						НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
						
						// Ввести объект без основания.
						НоваяКомандаФормы = Команды.Добавить("Команда_Добавить_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_"));
						НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'На основании этапа'");
						НоваяКомандаФормы.Действие                  = "ВвестиОбъект";
						НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
						НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Добавить документ %Синоним%'");
						НоваяКомандаФормы.Подсказка = СтрЗаменить(НоваяКомандаФормы.Подсказка, "%Синоним%", Синоним);			
						
						НовыйПунктМеню = Элементы.Вставить(ИмяКнопкиДобавить, Тип("КнопкаФормы"), ПунктМенюДобавить);
						НовыйПунктМеню.ИмяКоманды			= "Команда_Добавить_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_");
						НовыйПунктМеню.Заголовок			= Синоним;
						НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
						
					КонецЦикла;
				КонецЕсли;
				
				// Удалить объект
				НоваяКомандаФормы = Команды.Добавить("Команда_Удалить_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_"));
				НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Удалить'");
				НоваяКомандаФормы.Действие                  = "УдалитьОбъект";
				НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
				НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Удалить текущий элемент (Del)'");
				
				ИмяКнопкиУдалить = "Удалить_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_");
				
				НовыйПунктМеню = Элементы.Вставить(ИмяКнопкиУдалить, Тип("КнопкаФормы"), КоманднаяПанельЭтапа);
				НовыйПунктМеню.ИмяКоманды			= "Команда_Удалить_"+ТекущийЭтап.Имя+"_"+СтрЗаменить(ПолноеИмя, ".", "_");
				НовыйПунктМеню.Заголовок			= НСтр("ru = 'Удалить'");
				НовыйПунктМеню.Картинка				= БиблиотекаКартинок.Удалить;
				НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуИсполнителейПоКарте(НоваяДатаСтарта = Неопределено)
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		// Получение исполнителей по процессу.
		НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
		НаборИсполнителей.Отбор.Объект.Установить(Объект.Проект);
		НаборИсполнителей.Прочитать();
		
		// Если для процесса исполнители не определены, тогда берем их из карты.
		Если НаборИсполнителей.Количество() = 0 Тогда
			НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
			НаборИсполнителей.Отбор.Объект.Установить(Объект.Проект.CRM_КартаМаршрута);
			НаборИсполнителей.Прочитать();	
		КонецЕсли;
	Иначе
		НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
		НаборИсполнителей.Отбор.Объект.Установить(Объект.Проект.CRM_КартаМаршрута);
		НаборИсполнителей.Прочитать();
	КонецЕсли;
	
	ТочкаСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(Объект.Проект.CRM_КартаМаршрута)[0].Значение;
	
	Этапы_Значение = РеквизитФормыВЗначение("Этапы");
	Этапы_Значение.Очистить();
	
	Если МожноУказыватьСрокВыполненияЭтапов Тогда
		
		НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
		НаборЭтапов.Отбор.Объект.Установить(Объект.Проект.CRM_КартаМаршрута);
		НаборЭтапов.Прочитать();
		Для Каждого СтрокаНабора Из НаборЭтапов Цикл
			НоваяСтрокаЭтапов = Этапы_Значение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЭтапов,СтрокаНабора);
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(НоваяДатаСтарта) Тогда
			НачПериода	= ?(НачалоДня(?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса())) = Объект.ДатаСтарта, ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()), Объект.ДатаСтарта);
		Иначе
			НачПериода = НоваяДатаСтарта;
		КонецЕсли;
		CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(Объект.Проект.CRM_КартаМаршрута.НомерВерсии, Объект.Организация, ТочкаСтарта, Этапы_Значение, НачПериода);
		
	КонецЕсли;
	
	Исполнители_Значение = РеквизитФормыВЗначение("Исполнители");
	Исполнители_Значение.Очистить();
	Исполнители.Очистить();
	
	Для Каждого СтрокаНабора Из НаборИсполнителей Цикл
		
		МассивСтрок = Исполнители_Значение.НайтиСтроки(Новый Структура("ТочкаМаршрута",СтрокаНабора.ТочкаМаршрута));
		Если НЕ МассивСтрок.Количество() = 0 Тогда
			СтрокаТаб = МассивСтрок[0];
		Иначе
			СтрокаТаб = Исполнители_Значение.Добавить();
			СтрокаТаб.ЭтоСтрокаНастройкиЭтапа	= Истина;
			СтрокаТаб.ТочкаМаршрута				= СтрокаНабора.ТочкаМаршрута;
			СтрокаТаб.Групповая					= СтрокаНабора.ТочкаМаршрута.Групповая;
			СтрокаТаб.Порядок					= СтрокаНабора.ТочкаМаршрута.РеквизитДопУпорядочивания;
			СтрокаТаб.ВидыСоздаваемыхДокументов	= ПолучитьСписокВидов(Объект.КартаМаршрута, СтрокаТаб.ТочкаМаршрута);
			
			ДокументыСтрокой = "";
			Для каждого ВидДокумента Из СтрокаТаб.ВидыСоздаваемыхДокументов Цикл
				ДокументыСтрокой = ДокументыСтрокой + Строка(ВидДокумента) +  ", ";
			КонецЦикла;
			СтрокаТаб.ВидыСоздаваемыхДокументовСтрокой 	= Лев(ДокументыСтрокой, СтрДлина(ДокументыСтрокой) - 2);
			
			Если СтрокаНабора.ТочкаМаршрута.Групповая Тогда
				СтрСписок = Новый СписокЗначений;
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
				МассивТипов.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
				МассивТипов.Добавить(Тип("СправочникСсылка.CRM_ТочкиМаршрутов"));
				МассивТипов.Добавить(Тип("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач"));
				СтрСписок.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				СтрокаТаб.Исполнитель = СтрСписок;
			КонецЕсли;
		КонецЕсли;
		
		Исполнитель = ?(СтрокаНабора.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор,Объект.Автор,СтрокаНабора.Исполнитель);
		
		Если СтрокаНабора.ТочкаМаршрута.Групповая Тогда
			СтрокаТаб.Исполнитель.Добавить(Исполнитель,,СтрокаНабора.Все);
		Иначе
			СтрокаТаб.Исполнитель = Исполнитель;
		КонецЕсли;
		
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Если НЕ СтрокаНабора.Все Тогда
				СтрокаИсполнителя = НСтр("ru = 'Роль """ + Строка(СтрокаТаб.Исполнитель) + """'");
			Иначе
				СтрокаИсполнителя = СокрЛП(Строка(СтрокаТаб.Исполнитель));
			КонецЕсли;
		ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов") Тогда
			СтрокаИсполнителя = НСтр("ru = 'Исполнитель этапа """ + Строка(СтрокаТаб.Исполнитель) + """'");
		Иначе
			СтрокаИсполнителя = СокрЛП(Строка(СтрокаТаб.Исполнитель));
		КонецЕсли;
		
		СтрокаТаб.ИсполнительПредставление = СтрокаИсполнителя;
		
		Если МожноУказыватьСрокВыполненияЭтапов Тогда
			СтрокаЭтапа = Этапы_Значение.Найти(СтрокаТаб.ТочкаМаршрута,"ТочкаМаршрута");
			Если НЕ СтрокаЭтапа = Неопределено Тогда
				
				СтрокаТаб.ВариантВыполнения	= СтрокаЭтапа.ВариантВыполнения;
				СтрокаТаб.ДлительностьДней	= СтрокаЭтапа.ДлительностьДней;
				СтрокаТаб.ДлительностьЧасов	= СтрокаЭтапа.ДлительностьЧасов;
				СтрокаТаб.ДлительностьМинут	= СтрокаЭтапа.ДлительностьМинут;
				СтрокаТаб.Шаблон			= СтрокаЭтапа.Шаблон;
				Попытка
					СтрокаТаб.ДатаНачала		= СтрокаЭтапа.ДатаНачала;
					СтрокаТаб.ДатаВыполнения	= СтрокаЭтапа.ДатаВыполнения;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Этапы_Значение, "Этапы");
	
	Исполнители_Значение.Сортировать("Порядок ВОЗР");
	ЗначениеВРеквизитФормы(Исполнители_Значение, "Исполнители");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуИсполнителейПоБизнесПроцессу(НоваяДатаСтарта = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект.БизнесПроцесс);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_НастройкиЭтаповБизнесПроцессов.Объект,
	               |	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута,
	               |	CRM_ИсполнителиЭтаповБизнесПроцессов.Исполнитель,
	               |	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполнения,
	               |	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполненияСтрокой,
	               |	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьДней,
	               |	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьЧасов,
	               |	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьМинут,
	               |	CRM_НастройкиЭтаповБизнесПроцессов.ИсполнительСтрокой,
	               |	CRM_НастройкиЭтаповБизнесПроцессов.Порядок КАК Порядок,
	               |	CRM_НастройкиЭтаповБизнесПроцессов.ДатаНачала,
	               |	CRM_НастройкиЭтаповБизнесПроцессов.ДатаВыполнения,
	               |	CRM_НастройкиЭтаповБизнесПроцессов.Шаблон,
	               |	CRM_ИсполнителиЭтаповБизнесПроцессов.Все
	               |ИЗ
	               |	РегистрСведений.CRM_ИсполнителиЭтаповБизнесПроцессов КАК CRM_ИсполнителиЭтаповБизнесПроцессов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
	               |		ПО CRM_ИсполнителиЭтаповБизнесПроцессов.Объект = CRM_НастройкиЭтаповБизнесПроцессов.Объект
	               |			И CRM_ИсполнителиЭтаповБизнесПроцессов.ТочкаМаршрута = CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута
	               |ГДЕ
	               |	CRM_ИсполнителиЭтаповБизнесПроцессов.Объект = &Объект
	               |	И CRM_НастройкиЭтаповБизнесПроцессов.Объект = &Объект
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";
	
	ТабИсполнители = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка,
	               |	ЗадачаИсполнителя.Выполнена КАК Выполнена,
	               |	ЗадачаИсполнителя.ПринятаКИсполнению,
	               |	ВЫБОР
	               |		КОГДА ЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
	               |			ТОГДА ЗадачаИсполнителя.Исполнитель
	               |		КОГДА НЕ ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |			ТОГДА ЗадачаИсполнителя.Исполнитель
	               |		ИНАЧЕ ЗадачаИсполнителя.РольИсполнителя
	               |	КОНЕЦ КАК ИсполнительРоль,
	               |	ЗадачаИсполнителя.Исполнитель,
	               |	ЗадачаИсполнителя.РольИсполнителя,
	               |	ЗадачаИсполнителя.CRM_ТочкаМаршрута КАК ТочкаМаршрута,
	               |	ЗадачаИсполнителя.ДатаНачала,
	               |	ЗадачаИсполнителя.СрокИсполнения
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Выполнена";
	
	ТабЗадачи = Запрос.Выполнить().Выгрузить();
	
	Исполнители_Значение = РеквизитФормыВЗначение("Исполнители");
	Исполнители_Значение.Очистить();
	
	ЭтапПройден 					= Истина;
	ПоказыватьСтроку				= Истина;
	ПорядокЭтапа 					= 0;
	
	Для Каждого СтрокаНабора Из ТабИсполнители Цикл
		
		ЭтоТекущийЭтап = Ложь;
		
		МассивЗадач		= ТабЗадачи.НайтиСтроки(Новый Структура("Выполнена, ТочкаМаршрута",Ложь,СтрокаНабора.ТочкаМаршрута));
		МассивСтрок		= Исполнители_Значение.НайтиСтроки(Новый Структура("ТочкаМаршрута",СтрокаНабора.ТочкаМаршрута));
		МассивСтрок_1	= Исполнители_Значение.НайтиСтроки(Новый Структура("ТочкаМаршрута,ЭтоСтрокаНастройкиЭтапа",СтрокаНабора.ТочкаМаршрута, Ложь));
		
		Если (НЕ МассивЗадач.Количество() = 0) И (НЕ МассивСтрок.Количество() = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ МассивЗадач.Количество() = 0 Тогда
			ЭтоТекущийЭтап = Истина;
			
			Если ЭтапПройден Тогда
				ЭтапПройден = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоТекущийЭтап И (МассивСтрок_1.Количество() = 0) Тогда
			Для Каждого СтрокаЗадачи Из МассивЗадач Цикл
				СтрокаТаб = Исполнители_Значение.Добавить();
				
				СтрокаТаб.ЗадачаЭтапа				= СтрокаЗадачи.Ссылка;
				СтрокаТаб.ТочкаМаршрута				= СтрокаЗадачи.ТочкаМаршрута;
				СтрокаТаб.Групповая					= СтрокаЗадачи.ТочкаМаршрута.Групповая;
				СтрокаТаб.Порядок					= СтрокаЗадачи.ТочкаМаршрута.РеквизитДопУпорядочивания;
				СтрокаТаб.Исполнитель				= СтрокаЗадачи.ИсполнительРоль;
				СтрокаТаб.ЭтоТекущийЭтап			= ЭтоТекущийЭтап;
				СтрокаТаб.Пройден					= ЭтапПройден;
				СтрокаТаб.ЗадачаПринятаКИсполнению	= СтрокаЗадачи.ПринятаКИсполнению;
				СтрокаТаб.ЗадачаВыполнена			= СтрокаЗадачи.Выполнена;
				СтрокаТаб.ЭтоСтрокаНастройкиЭтапа	= Ложь;
				СтрокаТаб.ТочкаМаршрутаИмя			= СтрокаЗадачи.ТочкаМаршрута.Имя;
				СтрокаТаб.ВидыСоздаваемыхДокументов = ПолучитьСписокВидов(Объект.КартаМаршрута, СтрокаТаб.ТочкаМаршрута);
				
				ДокументыСтрокой = "";
				Для каждого ВидДокумента Из СтрокаТаб.ВидыСоздаваемыхДокументов Цикл
					ДокументыСтрокой = ДокументыСтрокой + Строка(ВидДокумента) +  ", ";
				КонецЦикла;
				СтрокаТаб.ВидыСоздаваемыхДокументовСтрокой 	= Лев(ДокументыСтрокой, СтрДлина(ДокументыСтрокой) - 2);
				
				Если ТипЗнч(СтрокаТаб.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					СтрокаИсполнителя = НСтр("ru = 'Роль """ + Строка(СтрокаТаб.Исполнитель) + """'");
				Иначе
					СтрокаИсполнителя = СокрЛП(Строка(СтрокаТаб.Исполнитель));
				КонецЕсли;
				
				СтрокаТаб.ИсполнительПредставление = СтрокаИсполнителя;
				
				Если МожноУказыватьСрокВыполненияЭтапов Тогда
					СтрокаТаб.ВариантВыполнения			= СтрокаНабора.ВариантВыполнения;
					СтрокаТаб.ДлительностьДней			= СтрокаНабора.ДлительностьДней;
					СтрокаТаб.ДлительностьЧасов			= СтрокаНабора.ДлительностьЧасов;
					СтрокаТаб.ДлительностьМинут			= СтрокаНабора.ДлительностьМинут;
					СтрокаТаб.Шаблон					= СтрокаНабора.Шаблон;
					СтрокаТаб.ДатаНачала				= СтрокаЗадачи.ДатаНачала;
					СтрокаТаб.ДатаВыполнения			= СтрокаЗадачи.СрокИсполнения;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ МассивСтрок.Количество() = 0 Тогда
			СтрокаТаб = МассивСтрок[0];
		Иначе
			СтрокаТаб				 			= Исполнители_Значение.Добавить();
			СтрокаТаб.ТочкаМаршрута	 			= СтрокаНабора.ТочкаМаршрута;
			СтрокаТаб.Групповая		 			= СтрокаНабора.ТочкаМаршрута.Групповая;
			СтрокаТаб.Порядок		 			= СтрокаНабора.ТочкаМаршрута.РеквизитДопУпорядочивания;
			СтрокаТаб.Пройден		 			= ЭтапПройден;
			СтрокаТаб.ЭтоСтрокаНастройкиЭтапа	= Истина;
			СтрокаТаб.ЭтоСкрытыйЭтап 			= ЭтоТекущийЭтап;
			СтрокаТаб.ТочкаМаршрутаИмя			= СтрокаНабора.ТочкаМаршрута.Имя;
			СтрокаТаб.ВидыСоздаваемыхДокументов = ПолучитьСписокВидов(Объект.КартаМаршрута, СтрокаТаб.ТочкаМаршрута);
			
			ДокументыСтрокой = "";
			Для каждого ВидДокумента Из СтрокаТаб.ВидыСоздаваемыхДокументов Цикл
				ДокументыСтрокой = ДокументыСтрокой + Строка(ВидДокумента) +  ", ";
			КонецЦикла;
			СтрокаТаб.ВидыСоздаваемыхДокументовСтрокой 	= Лев(ДокументыСтрокой, СтрДлина(ДокументыСтрокой) - 2);
			
			Если СтрокаНабора.ТочкаМаршрута.Групповая Тогда
				СтрСписок = Новый СписокЗначений;
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
				МассивТипов.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
				МассивТипов.Добавить(Тип("СправочникСсылка.CRM_ТочкиМаршрутов"));
				МассивТипов.Добавить(Тип("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач"));
				СтрСписок.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				СтрокаТаб.Исполнитель = СтрСписок;
			КонецЕсли;
		КонецЕсли;
		
		Исполнитель = ?(СтрокаНабора.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор,Объект.Автор,СтрокаНабора.Исполнитель);
		
		Если СтрокаНабора.ТочкаМаршрута.Групповая Тогда
			СтрокаТаб.Исполнитель.Добавить(Исполнитель,,СтрокаНабора.Все);
		Иначе
			СтрокаТаб.Исполнитель = Исполнитель;
		КонецЕсли;
		
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Если НЕ СтрокаНабора.Все Тогда
				СтрокаИсполнителя = НСтр("ru = 'Роль """ + Строка(СтрокаТаб.Исполнитель) + """'");
			Иначе
				СтрокаИсполнителя = СокрЛП(Строка(СтрокаТаб.Исполнитель));
			КонецЕсли;
		ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов") Тогда
			СтрокаИсполнителя = НСтр("ru = 'Исполнитель этапа """ + Строка(СтрокаТаб.Исполнитель) + """'");
		Иначе
			СтрокаИсполнителя = СокрЛП(Строка(СтрокаТаб.Исполнитель));
		КонецЕсли;
		
		СтрокаТаб.ИсполнительПредставление = СтрокаИсполнителя;
		
		Если МожноУказыватьСрокВыполненияЭтапов Тогда
			СтрокаТаб.ВариантВыполнения	= СтрокаНабора.ВариантВыполнения;
			СтрокаТаб.ДлительностьДней	= СтрокаНабора.ДлительностьДней;
			СтрокаТаб.ДлительностьЧасов	= СтрокаНабора.ДлительностьЧасов;
			СтрокаТаб.ДлительностьМинут	= СтрокаНабора.ДлительностьМинут;
			СтрокаТаб.Шаблон			= СтрокаНабора.Шаблон;
			СтрокаТаб.ДатаНачала		= СтрокаНабора.ДатаНачала;
			СтрокаТаб.ДатаВыполнения	= СтрокаНабора.ДатаВыполнения;
		КонецЕсли;
			
	КонецЦикла;                      
	
	Исполнители_Значение.Сортировать("Пройден Убыв,ЭтоТекущийЭтап Убыв, Порядок Возр");
	ЗначениеВРеквизитФормы(Исполнители_Значение, "Исполнители");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьВсеЗавершенныеЭтапыСделки()
	
	ТаблицаЭтапов = РеквизитФормыВЗначение("Исполнители");
	ТаблицаЭтапов.Очистить();
	
	ТекущаяКарта = Объект.КартаМаршрута;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";

	Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Порядок = 1;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗадачаЭтапа = ВыборкаДетальныеЗаписи.Ссылка;
		
		НоваяСтрока = ТаблицаЭтапов.Добавить();
		НоваяСтрока.ЭтоТекущийЭтап 						= Ложь;
		НоваяСтрока.Пройден		 						= Истина;
		НоваяСтрока.Порядок 							= Порядок;
		НоваяСтрока.ЗадачаЭтапа 						= ЗадачаЭтапа;
		НоваяСтрока.ТочкаМаршрута						= ЗадачаЭтапа.CRM_ТочкаМаршрута;
		НоваяСтрока.ДатаНачала							= ЗадачаЭтапа.ДатаНачала;
		НоваяСтрока.ДатаВыполнения						= ЗадачаЭтапа.СрокИсполнения;
		НоваяСтрока.ВидыСоздаваемыхДокументов 			= ПолучитьСписокВидов(ТекущаяКарта, НоваяСтрока.ТочкаМаршрута);
		
		ДокументыСтрокой = "";
		Для каждого ВидДокумента Из НоваяСтрока.ВидыСоздаваемыхДокументов Цикл
			ДокументыСтрокой = ДокументыСтрокой + Строка(ВидДокумента) +  ", ";
		КонецЦикла;
		
		НоваяСтрока.ВидыСоздаваемыхДокументовСтрокой 	= Лев(ДокументыСтрокой, СтрДлина(ДокументыСтрокой) - 2);
		
		Попытка
			НоваяСтрока.Исполнитель						= ЗадачаЭтапа.Исполнитель;
		Исключение
		КонецПопытки;
		
		Порядок = Порядок + 1;
		
	КонецЦикла;
	
	ТаблицаЭтапов.Сортировать("ДатаНачала Возр, Порядок Возр");
	ЗначениеВРеквизитФормы(ТаблицаЭтапов, "Исполнители");
	
	Элементы.Исполнители.ОтборСтрок = Неопределено;
	ОтборСтрок = Новый ФиксированнаяСтруктура("ЭтоСкрытыйЭтап", Ложь);
	Элементы.Исполнители.ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВидов(ТекущаяКарта, ТекущийЭтап)
	
	СписокВыбранныхВидов = Новый СписокЗначений;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ОбъектыЭтапов.ВидОбъекта
		|ИЗ
		|	РегистрСведений.CRM_ОбъектыЭтапов КАК CRM_ОбъектыЭтапов
		|ГДЕ
		|	CRM_ОбъектыЭтапов.Объект = &КартаМаршрута
		|	И CRM_ОбъектыЭтапов.ТочкаМаршрута = &ЭтапМаршрута";

	Запрос.УстановитьПараметр("КартаМаршрута", ТекущаяКарта);
	Запрос.УстановитьПараметр("ЭтапМаршрута", ТекущийЭтап);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для каждого ТипДокумента Из ВыборкаДетальныеЗаписи.ВидОбъекта.ТипЗначения.Типы() Цикл
			СписокВыбранныхВидов.Добавить(ТипДокумента);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокВыбранныхВидов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКартинкуДляОбъектов(Форма, ТипКартинки, Объект1, Объект2 = Неопределено)
	СтруктураПоиска = Новый Структура("Объект1", Объект1);
	Если Объект2 <> Неопределено Тогда
		СтруктураПоиска.Вставить("Объект2", Объект2);
	КонецЕсли;
	
	НайденныеСтроки = Форма.ТаблицаКэшКартинок.НайтиСтроки(СтруктураПоиска);
	
	Если ТипКартинки = "Важность" Тогда
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если Объект1 = ПредопределенноеЗначение("Перечисление.ВариантыВажностиВзаимодействия.Высокая") Тогда
				ПолученнаяКартинка = БиблиотекаКартинок.CRM_Важно;
			ИначеЕсли Объект1 = ПредопределенноеЗначение("Перечисление.ВариантыВажностиВзаимодействия.Низкая") Тогда
				ПолученнаяКартинка = БиблиотекаКартинок.CRM_ВажностьНизкая;
			Иначе
				ПолученнаяКартинка = Новый Картинка;
			КонецЕсли;
			
			НоваяСтрока = Форма.ТаблицаКэшКартинок.Добавить();
			НоваяСтрока.Объект1 = Объект1;
			НоваяСтрока.Картинка = ПолученнаяКартинка;
			
			Возврат ПолученнаяКартинка;
		Иначе
			Возврат НайденныеСтроки[0].Картинка;
		КонецЕсли;
	Иначе
		Возврат Новый Картинка();
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура УстановитьСвойстваЭлементовФормы()
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбъектыПоБизнесПроцессам.Очистить();
		
		Элементы.ПанельАвтоКнопок.ТекущаяСтраница = Элементы.СтраницаБезКнопок;
		
		Элементы.ПанельГруппыОтветственныйПоЗадаче.ТекущаяСтраница = Элементы.ГруппаПринятьКИсполнению;
		Элементы.ПеренаправитьЗадачу.Доступность	= Ложь;
		Элементы.ПринятьКИсполнению.Доступность	= Ложь;
		Возврат;
	КонецЕсли;
	
	//Если ТекущиеДанные.Порядок <> АктивизированаСтрока Тогда
		АктивизированаСтрока = ТекущиеДанные.Порядок;
		
		Если ТекущиеДанные.ЭтоТекущийЭтап Тогда
			
			ДоступноПользователю = ПолучитьВозможныхИсполнителейПоРолиОпределитьДоступность(ТекущиеДанные.Исполнитель);
			
			Элементы.ПанельАвтоКнопок.ТекущаяСтраница				= Элементы["СтраницаАвтоКнопок"+ТекущиеДанные.ТочкаМаршрутаИмя];
			Элементы.ПанельАвтоКнопок.ТекущаяСтраница.Доступность	= НЕ ТекущиеДанные.ЗадачаВыполнена И ТекущиеДанные.ЗадачаПринятаКИсполнению;
			Попытка
				Элементы.ГруппаПанельОбъектов.ТекущаяСтраница			= Элементы["СтраницаОбъектов"+ТекущиеДанные.ТочкаМаршрутаИмя];
			Исключение
				Элементы.ГруппаПанельОбъектов.ТекущаяСтраница			= Элементы.СтраницаБезКнопок1;
			КонецПопытки;
			
			Если ТекущиеДанные.ЗадачаВыполнена Тогда
				Элементы.ПанельГруппыОтветственныйПоЗадаче.ТекущаяСтраница	= Элементы.ГруппаПринятьКИсполнению;
				Элементы.ПеренаправитьЗадачу.Доступность					= Ложь;
				Элементы.ПринятьКИсполнению.Доступность					= Ложь;
			Иначе
				Элементы.ПанельГруппыОтветственныйПоЗадаче.ТекущаяСтраница = ?(ТекущиеДанные.ЗадачаПринятаКИсполнению,Элементы.ГруппаОтменитьПринятие,Элементы.ГруппаПринятьКИсполнению);
				
				Если ТекущиеДанные.ЗадачаПринятаКИсполнению Тогда
					
					Элементы.ПеренаправитьЗадачу.Доступность	= Ложь;
					Элементы.ПеренаправитьЗадачу2.Доступность	= ДоступноПользователю;
					Элементы.ПринятьКИсполнению.Доступность		= Ложь;
					Элементы.ПринятьКИсполнению2.Доступность	= ДоступноПользователю;
				Иначе
					
					Элементы.ПеренаправитьЗадачу.Доступность	= ДоступноПользователю;
					Элементы.ПеренаправитьЗадачу2.Доступность	= Ложь;
					Элементы.ПринятьКИсполнению.Доступность		= ДоступноПользователю;
					Элементы.ПринятьКИсполнению2.Доступность	= Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Элементы.РезультатВыполнения.ТолькоПросмотр = ТекущиеДанные.ЗадачаВыполнена ИЛИ НЕ ТекущиеДанные.ЗадачаПринятаКИсполнению;
			
			ТекущаяЗадача 			= ТекущиеДанные.ЗадачаЭтапа;
			ОтветственныйЭтапа 		= ТекущиеДанные.Исполнитель;
			
			Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
				ОписаниеТочкиМаршрута 	= CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(ТекущаяЗадача, Истина);
			КонецЕсли;
				
			Элементы.ГруппаОтветственныйПоЗадаче.Доступность = Истина;
			ПолучитьОбязательныеТипыОбъектовИВариантВыполнения(ТекущаяЗадача);
			ПолучитьСписокОбъектовПоБизнесПроцессу();
			
			Если ТекущиеДанные.ВидыСоздаваемыхДокументов.Количество() > 0 Тогда
				Элементы.ГруппаПанельОбъектов.ТолькоПросмотр = ?(ДоступноПользователю,НЕ ТекущиеДанные.ЗадачаПринятаКИсполнению,Ложь);
				Элементы.СтраницаДокументов.ТолькоПросмотр = ?(ДоступноПользователю,НЕ ТекущиеДанные.ЗадачаПринятаКИсполнению,Ложь);
			Иначе
				Элементы.СтраницаДокументов.ТолькоПросмотр = Истина;
			КонецЕсли;
		Иначе
			ОбъектыПоБизнесПроцессам.Очистить();
			
			Элементы.ПанельАвтоКнопок.ТекущаяСтраница					= Элементы.СтраницаБезКнопок;
			Элементы.ПанельГруппыОтветственныйПоЗадаче.ТекущаяСтраница	= Элементы.ГруппаПринятьКИсполнению;
			Элементы.ПеренаправитьЗадачу.Доступность					= Ложь;
			Элементы.ПринятьКИсполнению.Доступность						= Ложь;
			Элементы.ГруппаПанельОбъектов.ТекущаяСтраница				= Элементы.СтраницаБезКнопок1;
			
			Элементы.РезультатВыполнения.ТолькоПросмотр					= Истина;
			Элементы.ГруппаОтветственныйПоЗадаче.Доступность			= Ложь;
			Элементы.СтраницаДокументов.ТолькоПросмотр = Истина;
		КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма, ОбновитьЗадолженность)
	
	Если ОбновитьЗадолженность Тогда
		// Заполнение информации по задолженности Клиента (если выбран).
		Если ЗначениеЗаполнено(Форма.Объект.Клиент) Тогда
			ЭтотКлиент 		= Форма.Объект.Клиент;
			ЭтотБизнесПроцесс 	= Форма.Объект.БизнесПроцесс;
			ВключитьВидимость 	= Истина;
			
		//	// общая задолженность
		//	ИнформацияПоЗадолженности = CRM_КлиентыСервер.РассчитатьЗадолженность(ВключитьВидимость, ЭтотКлиент);
		//Форма.Элементы.ДекорацияОбщаяЗадолженность.Видимость  = ИнформацияПоЗадолженности.Видимость;
		//	ВрЗаголовок = ИнформацияПоЗадолженности.Заголовок;
		//	Форма.Элементы.ДекорацияОбщаяЗадолженность.Заголовок  = ?((НЕ ВрЗаголовок = "Задолженности нет"), СтрЗаменить(ВрЗаголовок, Лев(ВрЗаголовок, 23), ?(Найти(ВрЗаголовок, "клиента"), "Общий долг клиента", "Общий долг клиенту")), ВрЗаголовок);
		//	Форма.Элементы.ДекорацияОбщаяЗадолженность.ЦветТекста = ИнформацияПоЗадолженности.ЦветТекста;
			
			Если ЗначениеЗаполнено(ЭтотБизнесПроцесс) Тогда
				
				// Оплаты по сделке, ВидОперации - "Оплата".
				ИнформацияПоОплатамОтгрузкам = РассчитатьСуммуОплатыОтгрузки(ЭтотБизнесПроцесс);
				Если ИнформацияПоОплатамОтгрузкам.ЕстьДокументы Тогда
					Форма.Объект.ЕстьЗаказыПокупателя = Истина;
					
					Форма.Элементы.ДекорацияОплаченоПоСделке.Видимость	= Истина; 
					Форма.Элементы.ДекорацияОплаченоПоСделке.Заголовок  = "Оплачено по сделке: " + ИнформацияПоОплатамОтгрузкам.Оплачено + " (" + ИнформацияПоОплатамОтгрузкам.ОплаченоПроцент + "%)";
					
					Форма.Элементы.ДекорацияОтгруженоПоСделке.Видимость	= Истина; 
					Форма.Элементы.ДекорацияОтгруженоПоСделке.Заголовок = "Отгружено по сделке: " + ИнформацияПоОплатамОтгрузкам.Отгружено + " (" + ИнформацияПоОплатамОтгрузкам.ОтгруженоПроцент + "%)";
					
					Форма.Объект.СуммаОплатПоСделке 	= ИнформацияПоОплатамОтгрузкам.Оплачено;
					Форма.Объект.СуммаОтгрузокПоСделке	= ИнформацияПоОплатамОтгрузкам.Отгружено;
					Форма.Объект.СуммаСделки 			= ИнформацияПоОплатамОтгрузкам.СуммаСделки;
				Иначе
					Форма.Элементы.ДекорацияОплаченоПоСделке.Видимость 	= Ложь; 
					Форма.Элементы.ДекорацияОтгруженоПоСделке.Видимость	= Ложь; 
				КонецЕсли;
				
			Иначе
				Форма.Элементы.ДекорацияОплаченоПоСделке.Видимость 	 	= Ложь; 
				Форма.Элементы.ДекорацияОтгруженоПоСделке.Видимость	 	= Ложь; 
			КонецЕсли;
			
			Форма.Элементы.НетЗаказовПокупателей.Видимость				= НЕ Форма.Элементы.ДекорацияОплаченоПоСделке.Видимость; 
			
		КонецЕсли;
		
		Форма.Элементы.ГруппаЗадолженностьИнформация.Видимость 			= (Форма.Элементы.ДекорацияОбщаяЗадолженность.Видимость
																			ИЛИ Форма.Элементы.ДекорацияОплаченоПоСделке.Видимость
																			ИЛИ Форма.Элементы.ДекорацияОтгруженоПоСделке.Видимость);
		
	КонецЕсли;
	Форма.Элементы.ДатаОкончания.ТолькоПросмотр		= Истина;
	
	Форма.Элементы.ИсполнителиДатаНачала.Видимость		= Форма.МожноУказыватьСрокВыполненияЭтапов;
	Форма.Элементы.ИсполнителиДатаВыполнения.Видимость	= Форма.МожноУказыватьСрокВыполненияЭтапов;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,ИмяРеквизита)
	Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если Индекс <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещенияЗаписиНовогоОбъекта(НовыйОбъект)
	
	Если НЕ Метаданные.ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Тип.Типы().Найти(ТипЗнч(НовыйОбъект)) = Неопределено Тогда
		
		ДобавитьЗаписьПоОбъекту(НовыйОбъект);
		
		НастроитьВидимостьИДоступностьФормы(ЭтаФорма, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеТекущегоСостоянияБП()
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		|	CRM_ТекущиеЭтапыБизнесПроцессов.ТекущийЭтап КАК СтрокаЭтапа
		|ИЗ
		|	РегистрСведений.CRM_ТекущиеЭтапыБизнесПроцессов КАК CRM_ТекущиеЭтапыБизнесПроцессов
		|ГДЕ
		|	CRM_ТекущиеЭтапыБизнесПроцессов.Объект = &БизнесПроцесс";
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		Если ТаблицаЗапроса.Количество() > 0 Тогда
			Элементы.ДекорацияТекущееСостояние.Заголовок = "Текущее состояние: " + ТаблицаЗапроса[0].СтрокаЭтапа;
		Иначе
			Элементы.ДекорацияТекущееСостояние.Заголовок = "Текущее состояние: сделка не запущена";
		КонецЕсли;			
	Иначе
		Элементы.ДекорацияТекущееСостояние.Заголовок = "Текущее состояние: сделка не запущена";
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ПерейтиВСледующиеДействия()
	Элементы.ПанельСделки.ТекущаяСтраница = Элементы.СтраницаСледующееДействие;
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтактныеЛицаПартнера(Партнер)
	
	 CRM_КонтактныеЛица = Новый СписокЗначений;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	КонтактныеЛицаПартнеров.Ссылка
	                |ИЗ
	                |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	                |ГДЕ
	                |	КонтактныеЛицаПартнеров.Владелец = &Владелец
	                |	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления";
	 
	 Запрос.УстановитьПараметр("Владелец",Партнер);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
	 	 CRM_КонтактныеЛица.Добавить(Выборка.Ссылка);
			 
	 КонецЦикла;
	 
	 Возврат CRM_КонтактныеЛица;
	
 КонецФункции
 
&НаСервереБезКонтекста
Функция ВернутьКонтактноеЛицо(Партнер)
	
	КонтактноеЛицо = Партнер.CRM_ОсновноеКонтактноеЛицо;
	
	Если КонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка") Тогда
		Возврат Неопределено;
	Иначе
		Возврат КонтактноеЛицо;
	КонецЕсли;		
	
КонецФункции

&НаКлиенте
// Функция возвращает список участников.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений	- Список участников.
//
Функция ПолучитьСписокУчастников()
	СписокУчастников = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		СписокУчастников.Добавить(Объект.Клиент);
		КонтактноеЛицо = ВернутьКонтактноеЛицо(Объект.Клиент);
	Иначе
		КонтактноеЛицо = Неопределено;
	КонецЕсли;		
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		СписокУчастников.Добавить(КонтактноеЛицо);
	Иначе
		Если ЗначениеЗаполнено(Объект.Клиент) Тогда
			Для Каждого КонтактноеЛицо Из ПолучитьКонтактныеЛицаПартнера(Объект.Клиент) Цикл
				СписокУчастников.Добавить(КонтактноеЛицо.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат СписокУчастников;
КонецФункции // ПолучитьСписокУчастников()

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	//Элементы.ПеренаправитьСделку.Доступность				= НЕ ЭтаФорма.ТолькоПросмотр;
	//Элементы.РассчитатьПотенциалПоДокументам.Доступность	= НЕ ЭтаФорма.ТолькоПросмотр;
	//Элементы.ГруппаПервичныйИнтерес.Доступность				= НЕ ЭтаФорма.ТолькоПросмотр;
	//
	//Элементы.ФормаПередвинутьЭтап.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Сделка только для чтения
	ТолькоПросмотр = Истина;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Объект.Ссылка.Пустая() Тогда
		Если ЗначениеЗаполнено(Объект.Проект) Тогда
			Объект.КартаМаршрута = Объект.Проект.CRM_КартаМаршрута;
			Если ЗначениеЗаполнено(Объект.КартаМаршрута) Тогда
				Объект.НомерВерсииКартыМаршрута = Объект.КартаМаршрута.НомерВерсии;
			КонецЕсли;
		КонецЕсли;
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Элементы.Ответственный.КнопкаВыбора = Истина;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		Элементы.Ответственный.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КартаМаршрута) Тогда
		МожноУказыватьСрокВыполненияЭтапов				= Объект.КартаМаршрута.УказыватьСрокВыполненияЭтапов;
		ДинамическиРассчитыватьСрокиВыполненияЭтапов	= Объект.КартаМаршрута.ДинамическиРассчитыватьСрокиВыполненияЭтапов;
		РазрешитьПеремещатьТекущийЭтап					= Объект.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап;
		РазрешеноДосрочноеЗавершение					= Объект.КартаМаршрута.РазрешеноДосрочноеЗавершение;
	Иначе
		МожноУказыватьСрокВыполненияЭтапов = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БизнесПроцесс) И ЗначениеЗаполнено(Объект.КартаМаршрута) Тогда
		
		ЗаполнитьТаблицуИсполнителейПоКарте();
		
		Элементы.ФормаЗавершитьБизнесПроцессДосрочно.Видимость		= Ложь;
		Элементы.ФормаПередвинутьЭтап.Видимость 					= Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		
		Элементы.ФормаСтартоватьБизнесПроцесс.Видимость				= Ложь;
		Элементы.ФормаЗавершитьБизнесПроцессДосрочно.Видимость		= Истина;
		Элементы.ФормаПередвинутьЭтап.Видимость 					= Истина;
		
		БизнесПроцессПомеченНаУдаление = Объект.БизнесПроцесс.ПометкаУдаления;
		
		ЗаполнитьТаблицуИсполнителейПоБизнесПроцессу();
		
		СформироватьИЗаполнитьПанельАвтокнопок("ПанельАвтоКнопок");
		
		МассивСтрок = Исполнители.НайтиСтроки(Новый Структура("ЭтоТекущийЭтап",Истина));
		Если МассивСтрок.Количество() > 0 И ЗначениеЗаполнено(МассивСтрок[0].ЗадачаЭтапа) Тогда
			Элементы.Исполнители.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		Элементы.ФормаСтартоватьБизнесПроцесс.Видимость				= Ложь;
		Элементы.ФормаЗавершитьБизнесПроцессДосрочно.Видимость		= Ложь;
		Элементы.ФормаПередвинутьЭтап.Видимость 					= Ложь;
	КонецЕсли;
	
	Если Элементы.ФормаЗавершитьБизнесПроцессДосрочно.Видимость 
		И ЗначениеЗаполнено(Объект.БизнесПроцесс)
		И Объект.БизнесПроцесс.ЗавершенДосрочно Тогда
			Элементы.ФормаЗавершитьБизнесПроцессДосрочно.Доступность = Ложь;
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		ПолучитьОбъектыЭтаповБизнесПроцесса();
		СформироватьИЗаполнитьПанельОбъектовПоБизнесПроцессу("ГруппаПанельОбъектов");
	КонецЕсли;
	
	НастроитьВидимостьИДоступностьФормы(ЭтаФорма, Истина);
	
	СформироватьОписаниеКаналаИсточника();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Если	ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес")
		И	Не ЗначениеЗаполнено(Объект.Ссылка)
		И	Не ЗначениеЗаполнено(КаналПервичногоИнтереса)
		И	ЗначениеЗаполнено(Объект.Клиент) Тогда
		//
		НайденнаяСсылка = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.НайтиПоНаименованию(НСтр("ru = 'Акция'"), Истина);
		Если	ЗначениеЗаполнено(НайденнаяСсылка)
			И	НайденнаяСсылка.ТипЗначения.Типы().Количество() = 1
			И	НайденнаяСсылка.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			//
			КаналПервичногоИнтереса = НайденнаяСсылка;
		Иначе
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	КаналыРекламныхВоздействий.Ссылка КАК Ссылка,
			|	КаналыРекламныхВоздействий.ТипЗначения КАК ТипЗначения
			|ИЗ
			|	ПланВидовХарактеристик.КаналыРекламныхВоздействий КАК КаналыРекламныхВоздействий
			|ГДЕ
			|	НЕ КаналыРекламныхВоздействий.ПометкаУдаления
			|УПОРЯДОЧИТЬ ПО
			|	КаналыРекламныхВоздействий.Наименование ВОЗР
			|");
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ТипЗначения.Типы().Количество() = 1 И Выборка.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
					КаналПервичногоИнтереса = Выборка.Ссылка;
					ИсточникПервичногоИнтереса = Объект.МаркетинговаяКампания;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.БизнесПроцесс.Завершен И ЗначениеЗаполнено(Объект.БизнесПроцесс.ПричинаДосрочногоЗавершения) Тогда
		Объект.ПричинаОтказа 				= Объект.БизнесПроцесс.ПричинаДосрочногоЗавершения;
		Элементы.ПричинаОтказа.Видимость	= НЕ Объект.БизнесПроцесс.ВариантЗавершения.УспешностьЗавершения;
	КонецЕсли;
	
	Элементы.СтраницаДокументов.ТолькоПросмотр = Истина;
	
	АктивизированаСтрока = -1;
	
	Если ЭтаФорма.ФлагПоказатьВсеЭтапы Тогда
		Элементы.Исполнители.ОтборСтрок = Неопределено;
		ОтборСтрок = Новый ФиксированнаяСтруктура("ЭтоСкрытыйЭтап", Ложь);
		Элементы.Исполнители.ОтборСтрок = ОтборСтрок;
	Иначе
		Элементы.Исполнители.ОтборСтрок = Неопределено;
		ОтборСтрок = Новый ФиксированнаяСтруктура("Пройден, ЭтоСкрытыйЭтап", Ложь, Ложь);
		Элементы.Исполнители.ОтборСтрок = ОтборСтрок;
	КонецЕсли;
	
	ПоказатьПанельИнформации = CRM_ХранилищеНастроек.Загрузить("ПоказыватьСкрыватьПанельИнформацииЗадачаБП"); 
	Если НЕ ЗначениеЗаполнено(ПоказатьПанельИнформации) Тогда
		ПоказатьПанельИнформации = Истина;
	КонецЕсли;		
	Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка = ПоказатьПанельИнформации;
	Элементы.ГруппаОписаниеПравая.Видимость		= ПоказатьПанельИнформации;
	
	КонтактныеЛица.Параметры.УстановитьЗначениеПараметра("Период", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	
	КонтактныеЛицаОтборПоКлиенту = КонтактныеЛица.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	КонтактныеЛицаОтборПоКлиенту.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
	КонтактныеЛицаОтборПоКлиенту.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	КонтактныеЛицаОтборПоКлиенту.Использование  = Истина;
	КонтактныеЛицаОтборПоКлиенту.ПравоеЗначение = Объект.Клиент;
	
	Если Параметры.Свойство("ОткрытоВместоЗадачи") Тогда
		ОткрытоВместоЗадачи = Истина;
	КонецЕсли; 
	
	НеобходимыеДействияПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьСвойстваЭлементовФормы();
	ДоступностьПервичногоИнтереса();
	СформироватьНадписиКонтактнойИнформацииКлиента();
	СформироватьНадписиКонтактнойИнформацииКонтакта();
	СформироватьОписаниеТекущегоСостоянияБП();
	
	// Перейдем на закладку "Следующее действие", если открыли из списка задач.
	Если ОткрытоВместоЗадачи Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПерейтиВСледующиеДействия", 0.1, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	НастроитьВидимостьИДоступностьФормы(ЭтаФорма, Истина);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если КлиентИзменен И ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		ИзменитьКлиентаВБизнесПроцессе();
	КонецЕсли;
	
	ЗаписатьПервичныйИнтерес(ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	АктивизированаСтрока = -1;
	
	Если БизнесПроцессЗавершается(Объект.БизнесПроцесс) Тогда
		ПоказатьВсеЗавершенныеЭтапыСделки();
	КонецЕсли;
	
	ДоступностьПервичногоИнтереса();
	
	Элементы.Ответственный.ТолькоПросмотр = Истина;
	Элементы.Ответственный.КнопкаВыбора = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НеобходимыеДействияПриСозданииНаСервере()
	
	// Определить канал и источник первичного интереса.
	пПартнер = Объект.Клиент;
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			
			Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата,Объект.Ссылка,пПартнер);
			
			КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса);
			
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверкаЗаполнения(ПроверяемыеРеквизиты);
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	     
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗадачаВыполнена" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Завершается") И НЕ Параметр.Завершается Тогда
			
			ЗаполнитьТаблицуИсполнителейПоБизнесПроцессу();
			
			СтрокаТекущийЭтап = Исполнители.НайтиСтроки(Новый Структура("ЭтоТекущийЭтап", Истина));
			Если СтрокаТекущийЭтап.Количество() > 0 Тогда
				Элементы.Исполнители.ТекущаяСтрока = СтрокаТекущийЭтап[0].ПолучитьИдентификатор();
			КонецЕсли;
			
			УстановитьСвойстваЭлементовФормы();
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗадачаПеренаправлена"
		И НЕ Элементы.Исполнители.ТекущиеДанные = Неопределено
		И Элементы.Исполнители.ТекущиеДанные.ЭтоТекущийЭтап Тогда
		Если ТипЗнч(Параметр.МассивЗадач) = Тип("Массив") И (НЕ Параметр.МассивЗадач.Найти(Элементы.Исполнители.ТекущиеДанные.ЗадачаЭтапа)=Неопределено) Тогда
			ПересланнаяЗадача = Элементы.Исполнители.ТекущиеДанные.ЗадачаЭтапа;
			
			ЗаполнитьТаблицуИсполнителейПоБизнесПроцессу();
			СтрокаТекущийЭтап = Исполнители.НайтиСтроки(Новый Структура("ЗадачаЭтапа", ПересланнаяЗадача));
			Если СтрокаТекущийЭтап.Количество() > 0 Тогда
				Элементы.Исполнители.ТекущаяСтрока = СтрокаТекущийЭтап[0].ПолучитьИдентификатор();
			КонецЕсли;
			УстановитьСвойстваЭлементовФормы();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ВведенКомментарийПоЗадаче" Тогда
		ДобавитьКомментарийКЗадаче(Параметр.Задача, Параметр.Комментарий);
		ОписаниеТочкиМаршрута	= CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(Параметр.Задача, Истина);
	// Обновление информации в надписях КИ после записи элементов.
	ИначеЕсли ИмяСобытия = "ЗаписьПартнера" Тогда
		СформироватьНадписиКонтактнойИнформацииКлиента();
		СформироватьНадписиКонтактнойИнформацииКонтакта();
	ИначеЕсли ИмяСобытия = "НовоеКонтактноеЛицоЗаписано" Тогда
		СформироватьНадписиКонтактнойИнформацииКонтакта();		
	Иначе
		Возврат;
	КонецЕсли;
	
	НастроитьВидимостьИДоступностьФормы(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	ОбработатьОповещенияЗаписиНовогоОбъекта(НовыйОбъект);
КонецПроцедуры

#Область ПроцедурыИФункцииПервичногоИнтереса

&НаСервереБезКонтекста
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции

&НаСервере
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру()
	
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	пПартнер = Неопределено;
	
	пПартнер = Объект.Клиент;
	
	Если ЗначениеЗаполнено(пПартнер) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата,,пПартнер);
		Если ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
			
			СтрокаПервичногоИнтереса = ЭтаФорма.ПервичныйИнтерес.Вставить(0);
			ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса,Интерес);
			СтрокаПервичногоИнтереса.Актуальность = Истина;
			
			Если ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("СправочникСсылка.МаркетинговыеМероприятия") 
			   И ЗначениеЗаполнено(Интерес.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(Объект.Дата);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеКаналаИсточника()
		
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		
		КаналПервичногоИнтереса = Неопределено;
		ИсточникПервичногоИнтереса = Неопределено;
		Элементы.РанееЗарегистрированныйИнтерес.Видимость 		= ЗначениеЗаполнено(Партнер);
		Элементы.ОтступРанееЗарегистрированныйИнтерес.Видимость = ЗначениеЗаполнено(Партнер);
		ПервичныйИнтерес.Очистить();
		ВыводитьНадпись = Ложь;
		пПартнер = Неопределено;
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			пПартнер = ЭтаФорма.Партнер;
		Иначе
			пПартнер = Объект.Клиент;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пПартнер) Тогда
			
			ПолучитьПредыдущийПервичныйИнтересПоПартнеру();
			Интерес = Неопределено;
			Попытка
			
				Интерес = ПервичныйИнтерес.Получить(0);
			
			Исключение	КонецПопытки;
			
			РанееНеЗарегистровано = Ложь;
			Если Интерес <> Неопределено И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
				ДопНадпись = "";
				ВыводитьНадпись = Истина;
				Если ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) 
						<> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") 		
						Тогда
					Надпись = НСтр("ru = 'Ранее зарегистрирован актуальный источник привлечения по каналу %КПИ%; источник %ИПИ%'");
					Надпись = СтрЗаменить(Надпись, "%КПИ%", Интерес.КаналПервичногоИнтереса);
					Надпись = СтрЗаменить(Надпись, "%ИПИ%", Интерес.ИсточникПервичногоИнтереса);
					
				Иначе
					Надпись = НСтр("ru = 'Ранее зарегистрирован актуальный источник привлечения по каналу %КПИ%'");
					Надпись = СтрЗаменить(Надпись, "%КПИ%", Интерес.КаналПервичногоИнтереса);
					
				КонецЕсли;
				
				Если Интерес.Сделка = Объект.Ссылка Тогда
					
					ВыводитьНадпись = Ложь;	
					
				КонецЕсли;
				
				Если ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
						Если Не Интерес.Актуальность Тогда
							ДопНадпись = НСтр("ru = 'Срок действия маркетингового мероприятия истек.'");
						Иначе
							ДопНадпись = "";
						КонецЕсли;
					Элементы.РанееЗарегистрированныйИнтерес.Заголовок = Надпись + "
					|"+ДопНадпись;
				Иначе
					Элементы.РанееЗарегистрированныйИнтерес.Заголовок = Надпись;
				КонецЕсли;
			КонецЕсли;
			
			Элементы.РанееЗарегистрированныйИнтерес.Видимость 		= ВыводитьНадпись;
			Элементы.ОтступРанееЗарегистрированныйИнтерес.Видимость = ВыводитьНадпись;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПервичныйИнтерес(ТекущийОбъект)
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		
		Участники = Новый ТаблицаЗначений;
		Участники.Колонки.Добавить("Партнер");
		
		пПартнер = Объект.Клиент;
		Участник = Участники.Добавить();
		Участник.Партнер = пПартнер;
		Участники.Свернуть("Партнер");
		
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущийОбъект.Дата);
		НаборЗаписей.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписей.Записать();
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
			
			Если (Не ЗначениеЗаполнено(ИсточникПервичногоИнтереса) 
				И ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) 
				= Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))
				ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				Тогда
				Для каждого Уч Из Участники Цикл
					
					Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ИсточникиПервичногоИнтереса.Период КАК Период
					|ИЗ
					|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
					|ГДЕ
					|	ИсточникиПервичногоИнтереса.Сделка = &Сделка
					|	И ИсточникиПервичногоИнтереса.Партнер = &Партнер
					|");
					Запрос.УстановитьПараметр("Сделка", ТекущийОбъект.Ссылка);
					Запрос.УстановитьПараметр("Партнер", Уч.Партнер);
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Период = Выборка.Период;
						МенеджерЗаписи.Сделка = ТекущийОбъект.Ссылка;
						МенеджерЗаписи.Партнер = Уч.Партнер;
						МенеджерЗаписи.Удалить();
					КонецЦикла;
					
					Запись = НаборЗаписей.Добавить();
					Запись.Период						= ТекущийОбъект.Дата;
					Запись.Партнер						= Уч.Партнер;
					Запись.Сделка						= ТекущийОбъект.Ссылка;
					Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
					Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
				
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЕсли;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыИПроцедурыОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЗавершитьБизнесПроцессДосрочно(Команда)
	
	//Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
	//	
	//	Рез = ОткрытьФормуМодально("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения",,ЭтаФорма);
	//	
	//	Если НЕ Рез = Неопределено Тогда
	//		
	//		ПараметрыЗадачи = ПолучитьЗадачуПоБизнесПроцессу();
	//		
	//		Если ЗначениеЗаполнено(ПараметрыЗадачи) Тогда
	//			Рез.Вставить("Задача"					, ПараметрыЗадачи.Задача);
	//			Рез.Вставить("ЭтапДосрочногоЗавершения"	, ПараметрыЗадачи.ТочкаМаршрута);
	//		КонецЕсли;
	//		
	//		ДействияПриЗавершенномБизнесПроцессе(Рез, Ложь);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//ЭтаФорма.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	Если Элементы.Исполнители.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Задача = ПолучитьРеквизитыЗадачиНаСервере(ТекущаяЗадача);
	
	Если НЕ Задача.ПринятаКИсполнению Тогда
		CRM_БизнесПроцессыИЗадачиКлиент.ПринятьЗадачуКИсполнению(Задача, ТекущийПользователь);
	Иначе
		CRM_БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачиКИсполнению(Задача);
	КонецЕсли;
	
	Элементы.Исполнители.ТекущиеДанные.ЗадачаПринятаКИсполнению = Задача.ПринятаКИсполнению;
	
	Если ЗначениеЗаполнено(Задача.Ссылка) Тогда
		ОписаниеТочкиМаршрута = CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(Задача.Ссылка, Истина);
	КонецЕсли;
	
	ПриИзмененииСтатусаЗадачиНаСервере(Задача);
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииСтатусаЗадачиНаСервере(Задача);
	
	ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ЗадачаОбъект, Задача);
	ЗадачаОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПотенциалПоДокументамНажатие(Элемент)
	
	//Потенциал = ОткрытьФормуМодально("Документ.удалитьCRM_Сделка.Форма.РасчетПотенциала", Новый Структура("Ключ", Объект.БизнесПроцесс));
	//
	//Если ЗначениеЗаполнено(Потенциал) Тогда
	//	Объект.СуммаПотенциал = Потенциал;
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	КлиентПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	Объект.Договор = ПолучитьДанныеКлиентПриИзменении(Объект.Дата, Объект.Клиент, Объект.КонтактноеЛицо, Объект.Организация);
	
	ЭтаФорма.КаналПервичногоИнтереса = Неопределено;
	ЭтаФорма.ИсточникПервичногоИнтереса = Неопределено;
	СформироватьОписаниеКаналаИсточника();
	ДоступностьПервичногоИнтереса();
	
	СформироватьНадписиКонтактнойИнформацииКлиента();	
	
	СформироватьНадписиКонтактнойИнформацииКонтакта();	
	
	НастроитьВидимостьИДоступностьФормы(ЭтаФорма, Истина);
	
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		КлиентИзменен = Истина;
	КонецЕсли;
	
	// наложим отбор на список КЛ
	КонтактныеЛицаОтборПоКлиенту = КонтактныеЛица.Отбор.Элементы[0];
	КонтактныеЛицаОтборПоКлиенту.ПравоеЗначение = Объект.Клиент;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКлиентаВБизнесПроцессе()
	
	БизнесПроцессОбъект 				= Объект.БизнесПроцесс.ПолучитьОбъект();
	БизнесПроцессОбъект.Партнер 		= Объект.Клиент;
	БизнесПроцессОбъект.КонтактноеЛицо 	= Объект.КонтактноеЛицо;
	БизнесПроцессОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбщийЗадолженностиНажатие(Элемент)
	//Если ЗначениеЗаполнено(Объект.Клиент) Тогда
	//	
	//	ПараметрыФормы = Новый Структура("Отбор,КлючВарианта, СформироватьПриОткрытии",Новый Структура("Клиент", Объект.Клиент),"Ведомость", Истина);
	//	ОткрытьФорму("Отчет.CRM_ВедомостьВзаиморасчетыСКлиентами.Форма", ПараметрыФормы);
	//	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОплаченоОтгруженоПоСделкеНажатие(Элемент)
	
	//ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	//ПараметрыФормы.СформироватьПриОткрытии = Истина;
	//ПараметрыФормы.Отбор = Новый Структура("Сделка", ПолучитьСписокЗаказовПокупателейПоСделке(Объект.БизнесПроцесс));
	//ПараметрыФормы.КлючНазначенияИспользования = "Сделка";
	//ПараметрыФормы.КлючВарианта = "Ведомость";
	//ОткрытьФорму("Отчет.CRM_ВедомостьВзаиморасчетыСКлиентами.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗадачу(Команда)
	
	ПараметрыОткрытия = Новый Структура("Задача", ТекущаяЗадача);
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(ТекущаяЗадача);
	CRM_БизнесПроцессыИЗадачиКлиент.ПеренаправитьЗадачи(МассивЗадач, ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередвинутьЭтап(Команда)
	
	//ПараметрыФормы = Новый Структура("Ключ", Объект.БизнесПроцесс);
	//Рез = ОткрытьФормуМодально("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПеремещенияЭтапа",ПараметрыФормы,ЭтаФорма);
	//
	//ЗаполнитьТаблицуИсполнителейПоБизнесПроцессу();
	//
	//УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьПервичногоИнтереса()
	
	Актуальность = Ложь;
	ПредыдущийИсточник = Неопределено;
	Попытка
		ПредыдущийИсточник = ПервичныйИнтерес.Получить(0);
	Исключение КонецПопытки;
	Если ПредыдущийИсточник <> Неопределено Тогда
	
		Актуальность = ПредыдущийИсточник.Актуальность;
	
	КонецЕсли;
	
	пПартнер = Объект.Клиент;
	
	НаличиеУчастников = ?(ЗначениеЗаполнено(пПартнер),Истина,Ложь);
	
	Если НаличиеУчастников Тогда
		Элементы.КаналПервичногоИнтереса.Доступность = Истина;
		Элементы.КаналПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.КаналПервичногоИнтереса.Доступность = Ложь;
		Элементы.КаналПервичногоИнтереса.ТолькоПросмотр = Истина;
		Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
			И ТипПВХ(КаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.Доступность = Истина;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
		ЗаполнятьПервичныйИнтерес = Ложь;
	КонецЕсли;
	
	// Отметки незаполненного
	Если Актуальность = Истина И Не ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	ИначеЕсли Актуальность = Ложь 
		И Не ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		// Если объязательно заполнять кктуальный источник привлечения, тогда подсвечиваем канал первичного интереса.
		Если ЗаполнятьПервичныйИнтерес Тогда
		
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Истина;
		
		Иначе
		
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
		
		КонецЕсли;
		
	КонецЕсли;
	
	//Если Канал
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса)
		И Не ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
		Тогда
		
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Истина;
		
	КонецЕсли;
	//
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
				И ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЗаполнения(ПроверяемыеРеквизиты)
	
	пПартнер = Объект.Клиент;
	НаличиеУчастников = ?(ЗначениеЗаполнено(пПартнер),Истина,Ложь);
	
	Если Не ЗаполнятьПервичныйИнтерес Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"КаналПервичногоИнтереса");
	КонецЕсли;
	
	Если НаличиеУчастников Тогда
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
			Если ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
				УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
			КонецЕсли;
		Иначе
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
		КонецЕсли;
	Иначе
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
	КонецЕсли;
	
	Если Не Элементы.ГруппаПервичныйИнтерес.Видимость Или Не Элементы.КаналПервичногоИнтереса.Видимость Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"КаналПервичногоИнтереса");
	КонецЕсли;
	Если Не Элементы.ГруппаПервичныйИнтерес.Видимость Или Не Элементы.ИсточникПервичногоИнтереса.Видимость Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
	КонецЕсли;
	
	ТабПервичныйИнтерес = Неопределено;
	Попытка
		ТабПервичныйИнтерес = ПервичныйИнтерес.Получить(0);
	Исключение	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	ДоступностьПервичногоИнтереса();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И ТипПВХ(КаналПервичногоИнтереса)= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ИсточникПервичногоИнтереса);
		ПараметрыФормы.Вставить("СкрытьПодменюВид", Истина);
		
		ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтаФорма);
		
		ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
		ЭлементОтбора.ПравоеЗначение	= Истина;
		ЭлементОтбора.Использование		= Истина;
		
		ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
		ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
		ЭлементОтбора.Использование		= Истина;
		
		ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
		ЭлементОтбора.ПравоеЗначение	= НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
		ЭлементОтбора.Использование		= Истина;
		
		ФормаВыбора.Открыть();
	КонецЕсли;
	
	ДоступностьПервичногоИнтереса();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПроекта()
		
	Если НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.КартаМаршрута 			= Объект.Проект.CRM_КартаМаршрута;
	Объект.НомерВерсииКартыМаршрута = Объект.КартаМаршрута.НомерВерсии;
	
	ДинамическиРассчитыватьСрокиВыполненияЭтапов = Объект.КартаМаршрута.ДинамическиРассчитыватьСрокиВыполненияЭтапов;	
	
	Если ЗначениеЗаполнено(Объект.КартаМаршрута) Тогда
		
		Элементы.ФормаСтартоватьБизнесПроцесс.Видимость	= Истина;
		МожноУказыватьСрокВыполненияЭтапов				= Объект.КартаМаршрута.УказыватьСрокВыполненияЭтапов;
		РазрешитьПеремещатьТекущийЭтап					= Объект.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап;
		
		ЗаполнитьТаблицуИсполнителейПоКарте();
	Иначе
		Исполнители.Очистить();
		Элементы.ФормаСтартоватьБизнесПроцесс.Видимость	= Ложь;
		МожноУказыватьСрокВыполненияЭтапов				= Ложь;
		РазрешитьПеремещатьТекущийЭтап					= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуИсполнителей(Набор = Неопределено, НоваяДатаСтарта = Неопределено)
	
	Если Набор = Неопределено Тогда
		Если Объект.Ссылка.Пустая() Тогда
			Если ЗначениеЗаполнено(Объект.Проект) Тогда
				// Получение исполнителей по процессу.
				НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
				НаборИсполнителей.Отбор.Объект.Установить(Объект.Проект);
				НаборИсполнителей.Прочитать();
				
				// Если для процесса исполнители не определены, тогда берем их из карты.
				Если НаборИсполнителей.Количество() = 0 Тогда
					НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
					НаборИсполнителей.Отбор.Объект.Установить(Объект.Проект.CRM_КартаМаршрута);
					НаборИсполнителей.Прочитать();	
				КонецЕсли;
			Иначе
				НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
				НаборИсполнителей.Отбор.Объект.Установить(Объект.Проект.CRM_КартаМаршрута);
				НаборИсполнителей.Прочитать();	
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
			// Исполнители бизнес-процесса.
			НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборИсполнителей.Отбор.Объект.Установить(Объект.БизнесПроцесс);
			НаборИсполнителей.Прочитать();	
		КонецЕсли;
	Иначе
		НаборИсполнителей = Набор;
	КонецЕсли;
	
	ТочкаСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(Объект.Проект.CRM_КартаМаршрута)[0].Значение;
	
	Этапы_Значение = РеквизитФормыВЗначение("Этапы");
	Этапы_Значение.Очистить();
	
	Если МожноУказыватьСрокВыполненияЭтапов Тогда
		
		Если Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Объект.Проект.CRM_КартаМаршрута);
			НаборЭтапов.Прочитать();
			Для Каждого СтрокаНабора Из НаборЭтапов Цикл
				НоваяСтрокаЭтапов = Этапы_Значение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЭтапов,СтрокаНабора);
			КонецЦикла;
			Если НЕ ЗначениеЗаполнено(НоваяДатаСтарта) Тогда
				НачПериода	= ?(	НачалоДня(?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса())) = Объект.ДатаСтарта, ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()), Объект.ДатаСтарта);
			Иначе
				НачПериода = НоваяДатаСтарта;
			КонецЕсли;
			CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(Объект.Проект.CRM_КартаМаршрута.НомерВерсии, Объект.Организация, ТочкаСтарта, Этапы_Значение, НачПериода);
		Иначе
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Объект.БизнесПроцесс);
			НаборЭтапов.Прочитать();
			Этапы_Значение = НаборЭтапов.Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	//Исполнители.Очистить();
	Исполнители_Значение = РеквизитФормыВЗначение("Исполнители");
	Исполнители_Значение.Очистить();
	Исполнители.Очистить();
	
	Для Каждого СтрокаНабора Из НаборИсполнителей Цикл
		
		МассивСтрок = Исполнители_Значение.НайтиСтроки(Новый Структура("ТочкаМаршрута",СтрокаНабора.ТочкаМаршрута));
		Если НЕ МассивСтрок.Количество() = 0 Тогда
			СтрокаТаб = МассивСтрок[0];
		Иначе
			СтрокаТаб = Исполнители_Значение.Добавить();
			СтрокаТаб.ТочкаМаршрута	= СтрокаНабора.ТочкаМаршрута;
			СтрокаТаб.Групповая		= СтрокаНабора.ТочкаМаршрута.Групповая;
			СтрокаТаб.Порядок		= СтрокаНабора.ТочкаМаршрута.РеквизитДопУпорядочивания;
			Если СтрокаНабора.ТочкаМаршрута.Групповая Тогда
				СтрСписок = Новый СписокЗначений;
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
				МассивТипов.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
				МассивТипов.Добавить(Тип("СправочникСсылка.CRM_ТочкиМаршрутов"));
				МассивТипов.Добавить(Тип("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач"));
				СтрСписок.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				СтрокаТаб.Исполнитель = СтрСписок;
			КонецЕсли;
		КонецЕсли;
		
		Исполнитель = ?(СтрокаНабора.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор,Объект.Автор,СтрокаНабора.Исполнитель);
		
		Если СтрокаНабора.ТочкаМаршрута.Групповая Тогда
			СтрокаТаб.Исполнитель.Добавить(Исполнитель,,СтрокаНабора.Все);
		Иначе
			СтрокаТаб.Исполнитель = Исполнитель;
		КонецЕсли;
		
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Если НЕ СтрокаНабора.Все Тогда
				СтрокаИсполнителя = НСтр("ru = 'Роль """ + Строка(СтрокаТаб.Исполнитель) + """'");
			Иначе
				СтрокаИсполнителя = СокрЛП(Строка(СтрокаТаб.Исполнитель));
			КонецЕсли;
		ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов") Тогда
			СтрокаИсполнителя = НСтр("ru = 'Исполнитель этапа """ + Строка(СтрокаТаб.Исполнитель) + """'");
		Иначе
			СтрокаИсполнителя = СокрЛП(Строка(СтрокаТаб.Исполнитель));
		КонецЕсли;
		
		СтрокаТаб.ИсполнительПредставление = СтрокаИсполнителя;
		
		Если МожноУказыватьСрокВыполненияЭтапов Тогда
			СтрокаЭтапа = Этапы_Значение.Найти(СтрокаТаб.ТочкаМаршрута,"ТочкаМаршрута");
			Если НЕ СтрокаЭтапа = Неопределено Тогда
				
				СтрокаТаб.ВариантВыполнения	= СтрокаЭтапа.ВариантВыполнения;
				СтрокаТаб.ДлительностьДней	= СтрокаЭтапа.ДлительностьДней;
				СтрокаТаб.ДлительностьЧасов	= СтрокаЭтапа.ДлительностьЧасов;
				СтрокаТаб.ДлительностьМинут	= СтрокаЭтапа.ДлительностьМинут;
				СтрокаТаб.Шаблон			= СтрокаЭтапа.Шаблон;
				Попытка
				СтрокаТаб.ДатаНачала		= СтрокаЭтапа.ДатаНачала;
				СтрокаТаб.ДатаВыполнения	= СтрокаЭтапа.ДатаВыполнения;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Этапы_Значение, "Этапы");
	
	Исполнители_Значение.Сортировать("Порядок ВОЗР");
	ЗначениеВРеквизитФормы(Исполнители_Значение, "Исполнители");

КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчитатьДлительностьЭтапа(НачПериода, КонПериода, Организация)
	
	СтруктураПериода	= CRM_ОбщегоНазначенияСервер.ПолучитьТрудозатратыЗаПериод(НачПериода, КонПериода,, Организация);
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ДлительностьДней"	,ЦЕЛ(СтруктураПериода.ВЧасах/?(СтруктураПериода.ПродолжительностьРабочегоДняВЧасах = 0, 8, СтруктураПериода.ПродолжительностьРабочегоДняВЧасах)));
	СтруктураВозврата.Вставить("ДлительностьЧасов"	,ЦЕЛ(СтруктураПериода.ВЧасах - (СтруктураВозврата.ДлительностьДней*СтруктураПериода.ПродолжительностьРабочегоДняВЧасах)));
	СтруктураВозврата.Вставить("ДлительностьМинут"	,СтруктураПериода.ВМинутах - ((СтруктураВозврата.ДлительностьДней*СтруктураПериода.ПродолжительностьРабочегоДняВМинутах) + (СтруктураВозврата.ДлительностьЧасов*60)));
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ПересчитатьСрокиЭтапов(ТочкаМаршрута, НачПериода, ВариантВыполнения)
	
	Исполнители_Значение		= РеквизитФормыВЗначение("Исполнители");
	МассивСтрок					= Исполнители_Значение.НайтиСтроки(Новый Структура("ЭтоСтрокаНастройкиЭтапа",Истина));
	Исполнители_ЗначениеКопия	= Исполнители_Значение.Скопировать(МассивСтрок);
	
	СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТочкаМаршрута, Объект.НомерВерсииКартыМаршрута, ВариантВыполнения);
	
	CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(Объект.НомерВерсииКартыМаршрута, Объект.Организация, СтруктураТочки.ИсходящаяТочка, Исполнители_ЗначениеКопия, НачПериода, ВариантВыполнения);
	
	CRM_БизнесПроцессыСервер.СкорректироватьДлительностьЭтаповБизнесПроцесса(Объект.БизнесПроцесс, Исполнители_ЗначениеКопия);
	
	Для Каждого СтрокаТаб Из Исполнители_Значение Цикл
		Если НЕ СтрокаТаб.ЭтоСтрокаНастройкиЭтапа Тогда Продолжить; КонецЕсли;
		
		МассивСтрок = Исполнители_ЗначениеКопия.НайтиСтроки(Новый Структура("ТочкаМаршрута,ЭтоСтрокаНастройкиЭтапа",СтрокаТаб.ТочкаМаршрута,Истина));
		ЗаполнитьЗначенияСвойств(СтрокаТаб,МассивСтрок[0]);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Исполнители_Значение, "Исполнители");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияИсполнителейЭтапов();
	
	Этапы_Значение		= РеквизитФормыВЗначение("Исполнители");
	МассивСтрок			= Этапы_Значение.НайтиСтроки(Новый Структура("ЭтоСтрокаНастройкиЭтапа",Истина));
	Этапы_ЗначениеКопия	= Этапы_Значение.Скопировать(МассивСтрок);
	
	CRM_БизнесПроцессыСервер.ЗаполнитьИсполнителейЭтаповБизнесПроцесса(Объект.БизнесПроцесс, Ложь, Этапы_ЗначениеКопия);
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесПроцессНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(, Объект.БизнесПроцесс)
КонецПроцедуры

&НаСервере
Функция ПолучитьВозможныхИсполнителейПоРолиОпределитьДоступность(ИсполнительРоль)
	
	СписокИсполнителей = Новый списокЗначений;
	
	Если ТипЗнч(ИсполнительРоль) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("РольИсполнителя",ИсполнительРоль);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИсполнителиЗадач.Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
		
		Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
		
		СписокИсполнителей.ЗагрузитьЗначения(Массив);
	Иначе
		СписокИсполнителей = Новый списокЗначений;
		СписокИсполнителей.Добавить(ИсполнительРоль);
	КонецЕсли;
	СписокИсполнителей.Добавить(Объект.Ответственный);
	
	Возврат (НЕ СписокИсполнителей.НайтиПоЗначению(ТекущийПользователь) = Неопределено);
	
КонецФункции

&НаКлиенте
Процедура ИсполнителиПослеОжиданияПриАктивацииСтроки()
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ИсполнителиПослеОжиданияПриАктивацииСтроки",0.1 ,Истина);
	//Если НЕ Элемент.ТекущаяСтрока = Неопределено И Элемент.ТекущиеДанные.Порядок <> АктивизированаСтрока Тогда
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТочкиМаршрутаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		Если Найти(ДанныеСобытия.href,"e1cib") > 0 Тогда
			НавСсылка = Сред(ДанныеСобытия.href,Найти(ДанныеСобытия.href,"e1cib"));
			Попытка
				ПерейтиПоНавигационнойСсылке(НавСсылка);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если Исполнители.Количество() > 0 Тогда
		Исполнители[0].ДатаНачала = Объект.ДатаСтарта;
		ЗаполнитьТаблицуИсполнителей(,Объект.ДатаСтарта);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПоБизнесПроцессамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПоБизнесПроцессамПередУдалением(Элемент, Отказ)
	
	Если Элементы.Исполнители.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.Исполнители.ТекущиеДанные.ЗадачаПринятаКИсполнению Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Задача не принята к исполнению!'"));
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ОбъектыПоБизнесПроцессам.ТекущиеДанные;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("БизнесПроцесс",ТекДанные.БизнесПроцесс);
	СтруктураДанных.Вставить("Задача",ТекДанные.Задача);
	СтруктураДанных.Вставить("ТочкаМаршрута",ТекДанные.ТочкаМаршрута);
	СтруктураДанных.Вставить("Объект",ТекДанные.Объект);
	
	УдалитьЗаписьПоОбъекту(СтруктураДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияПриИзменении(Элемент)
	
	//ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	//Если ТекДанные = Неопределено Тогда
		Возврат;
	//КонецЕсли;
	//
	//Если ТекДанные.ДатаВыполнения < ТекДанные.ДатаНачала Тогда
	//	ТекДанные.ДатаВыполнения = ТекДанные.ДатаНачала;
	//	ВызватьИсключение(НСтр("ru = 'Срок выполнения задачи не может быть раньше даты начала!'"));
	//	Возврат;
	//КонецЕсли;
	//
	//Если ТекДанные.ЭтоТекущийЭтап Тогда
	//	ЗаписатьРеквизитТекущейЗадачи(ТекДанные.ЗадачаЭтапа, "СрокИсполнения", ТекДанные.ДатаВыполнения);
	//Иначе
	//	СтруктураПериода = РасчитатьДлительностьЭтапа(ТекДанные.ДатаНачала, ТекДанные.ДатаВыполнения, Объект.Организация);
	//	
	//	ТекДанные.ДлительностьДней	= СтруктураПериода.ДлительностьДней;
	//	ТекДанные.ДлительностьЧасов	= СтруктураПериода.ДлительностьЧасов;
	//	ТекДанные.ДлительностьМинут	= СтруктураПериода.ДлительностьМинут;
	//	
	//	Если ДинамическиРассчитыватьСрокиВыполненияЭтапов Тогда
	//		Ответ = Вопрос(НСтр("ru = 'Пересчитать сроки для следующих этапов?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	//		Если Ответ = КодВозвратаДиалога.Да Тогда
	//			ПересчитатьСрокиЭтапов(ТекДанные.ТочкаМаршрута, ТекДанные.ДатаВыполнения, ТекДанные.ВариантВыполнения);
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если Исполнители.Количество() > 0 Тогда
	//		Объект.ДатаЗавершения = Исполнители[Исполнители.Количество() - 1].ДатаВыполнения;
	//	КонецЕсли;
	//	
	//	ЭтаФорма.Модифицированность	= Истина;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьИмяДокументаПоТипу(Тип)
	
	Возврат Метаданные.НайтиПоТипу(Тип).Имя;
	
КонецФункции

&НаКлиенте
Процедура ИсполнителиПередНачаломИзменения(Элемент, Отказ)
	
	//Если Элементы.Исполнители.ТекущиеДанные = Неопределено Тогда
		Возврат;
	//КонецЕсли;
	//
	//Если Элемент.ТекущийЭлемент.Имя = "ИсполнителиВидыСоздаваемыхДокументовСтрокой" Тогда
	//	Если НЕ Элементы.Исполнители.ТекущиеДанные.ЭтотекущийЭтап
	//			ИЛИ НЕ Элементы.Исполнители.ТекущиеДанные.ЗадачаПринятаКИсполнению Тогда
	//		Возврат;
	//	ИначеЕсли ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
	//		Если Элементы.Исполнители.ТекущиеДанные.ВидыСоздаваемыхДокументов.Количество() = 1  Тогда
	//			ТипОбъектаЭтапа = Элемент.ТекущиеДанные.ВидыСоздаваемыхДокументов[0].Значение;
	//		ИначеЕсли Элементы.Исполнители.ТекущиеДанные.ВидыСоздаваемыхДокументов.Количество() > 0 Тогда	
	//			ЭлементСписка = Элементы.Исполнители.ТекущиеДанные.ВидыСоздаваемыхДокументов.ВыбратьЭлемент(НСтр("ru = 'Выберите вид создаваемого документа:'"));
	//			Если ЭлементСписка <> Неопределено Тогда
	//				ТипОбъектаЭтапа = ЭлементСписка.Значение;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		Если ТипОбъектаЭтапа = Неопределено Тогда
	//			Возврат;
	//		Иначе
	//			ИмяДокумента = ВернутьИмяДокументаПоТипу(ТипОбъектаЭтапа);
	//			ПараметрыФормы = ПроверитьНаличиеОснования(ИмяДокумента);
	//			// Создадим документ выбраного вида.
	//			Если ПараметрыФормы.СписокСсылок.Количество() > 0 Тогда
	//				
	//				ВыбЗнач = ОткрытьФормуМодально("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаВыбораОснования",ПараметрыФормы, ЭтаФорма);
	//				
	//				Если НЕ ВыбЗнач = Неопределено Тогда
	//					ПараметрыФормы = Новый Структура("Основание", ВыбЗнач);
	//				Иначе
	//					ПараметрыФормы = Новый Структура("Основание", Объект.БизнесПроцесс);
	//				КонецЕсли;
	//			Иначе
	//				ПараметрыФормы = Новый Структура("Основание", Объект.БизнесПроцесс);
	//			КонецЕсли;
	//			ПараметрыФормы.Вставить("СозданИзЭтапаСделки", Истина);
	//			ОткрытьФорму("Документ."+ИмяДокумента+".ФормаОбъекта",ПараметрыФормы,ЭтаФорма);
	//		КонецЕсли;
	//	КонецЕсли;
	//ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ИсполнителиДатаВыполнения" Тогда
	//	Если Элементы.Исполнители.ТекущиеДанные.ЭтотекущийЭтап
	//			И НЕ Элементы.Исполнители.ТекущиеДанные.ЗадачаПринятаКИсполнению Тогда
	//		Отказ = Истина;
	//	КонецЕсли;
	//ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ИсполнителиИсполнитель" Тогда
	//	Если Элементы.Исполнители.ТекущиеДанные.ЭтоТекущийЭтап Тогда
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКонтекстногоМенюКалендаряОбщая(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данные еще не записаны.
							|Необходимо вначале записать документ!'"));
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = Команда.Имя;
	
	ДатаСобытияНачало = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	ТекущийОтборПоПользователю = ТекущийПользователь;
	
	СтруктураДанныхСобытия = Новый Структура("ПериодНачало, Пользователь, ВидСобытия, ДокументОснование", ДатаСобытияНачало, ТекущийОтборПоПользователю);
	
	Если ИмяКоманды = "КомандаСоздатьКонтрольнуюТочку" Тогда
		ТипСобытия = "Документ.CRM_КонтрольнаяТочкаПроекта";
	Иначе
		ВызватьИсключение НСтр("ru = 'Для кнопки'") + " """ + ИмяКоманды + """ " + НСтр("ru = 'не определено действие!'");
	КонецЕсли;
	
	СтруктураЗначенияЗаполнения = Новый Структура("Дата", СтруктураДанныхСобытия.ПериодНачало);
	
	Если ЗначениеЗаполнено(СтруктураДанныхСобытия.ВидСобытия) Тогда
		СтруктураЗначенияЗаполнения.Вставить("ВидСобытия", СтруктураДанныхСобытия.ВидСобытия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанныхСобытия.ДокументОснование) Тогда
		СтруктураЗначенияЗаполнения.Вставить("ДокументОснование", СтруктураДанныхСобытия.ДокументОснование);
	КонецЕсли;
	
	СтруктураЗначенияЗаполнения.Вставить("Тема", Строка(Объект.Ссылка));
	СтруктураЗначенияЗаполнения.Вставить("Описание", Объект.Описание);
	СтруктураЗначенияЗаполнения.Вставить("Подразделение", Объект.Подразделение);
	СтруктураЗначенияЗаполнения.Вставить("Проект", Объект.Проект);
	СтруктураЗначенияЗаполнения.Вставить("Важность", Объект.Важность);
	СтруктураЗначенияЗаполнения.Вставить("Партнер", Объект.Клиент);
	СтруктураЗначенияЗаполнения.Вставить("Клиент", Объект.Клиент);
	СтруктураЗначенияЗаполнения.Вставить("КонтактноеЛицо", Объект.КонтактноеЛицо);
	
	Форма = ПолучитьФорму(ТипСобытия + ".ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураЗначенияЗаполнения), ЭтаФорма);
	
	Попытка Форма.АвтоВремя = РежимАвтоВремя.НеИспользовать;
	Исключение КонецПопытки;
	
	Если ТипСобытия = "Документ.CRM_КонтрольнаяТочкаПроекта" Тогда
		Форма.Объект.Дата = СтруктураДанныхСобытия.ПериодНачало;
	КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПоБизнесПроцессамПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Объект);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	//
	//Если Элементы.Исполнители.ТекущиеДанные = Неопределено Тогда
		Возврат;
	//КонецЕсли;
	//
	//Если Элементы.Исполнители.ТекущиеДанные.Групповая Тогда
	//	ПараметрыФормы = Новый Структура("СписокИсполнителей,КартаМаршрута,НомерВерсииКартыМаршрута",
	//									Элементы.Исполнители.ТекущиеДанные.Исполнитель,Объект.КартаМаршрута,Объект.НомерВерсииКартыМаршрута);
	//									
	//	Рез = ОткрытьФормуМодально("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаВводаИсполнителей",ПараметрыФормы,ЭтаФорма);
	//	Если НЕ Рез = Неопределено Тогда
	//		
	//		Для Каждого Исполнитель Из Рез Цикл
	//			Если Не ЗначениеЗаполнено(Исполнитель.Значение) Тогда
	//				Рез.Удалить(Исполнитель);
	//			КонецЕсли;	
	//		КонецЦикла;	
	//		
	//		Элементы.Исполнители.ТекущиеДанные.Исполнитель				= Рез;
	//		Элементы.Исполнители.ТекущиеДанные.ИсполнительПредставление	= Строка(Элементы.Исполнители.ТекущиеДанные.Исполнитель);
	//		ИзмененыИсполнители = Истина;
	//	КонецЕсли;
	//Иначе
	//	БылИсполнитель = Элементы.Исполнители.ТекущиеДанные.Исполнитель;
	//	
	//	ПараметрыФормыВыбора = Новый Структура;
	//	ПараметрыФормыВыбора.Вставить("РежимВыбора"				,Истина);
	//	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		,Истина);
	//	
	//	ДанныеВыбора = Новый СписокЗначений;
	//	
	//	СтруктураДанныхВыбора = Новый Структура;
	//	СтруктураДанныхВыбора.Вставить("РежимВыбора"				,Истина);
	//	СтруктураДанныхВыбора.Вставить("ВыборГруппПользователей"	,Ложь);
	//	СтруктураДанныхВыбора.Вставить("ИмяФормы"					,"Справочник.Пользователи.Форма.ФормаСписка");
	//	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	//	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Пользователи");
	//	
	//	СтруктураДанныхВыбора = Новый Структура;
	//	СтруктураДанныхВыбора.Вставить("РежимВыбора"				,Истина);
	//	СтруктураДанныхВыбора.Вставить("ИмяФормы"					,"Справочник.РолиИсполнителей.ФормаВыбора");
	//	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	//	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Роли исполнителей");
	//КонецЕсли;
	//
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	Если Элементы.Исполнители.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Исполнители.ТекущиеДанные.Групповая Тогда
		НовыйСписок = Новый СписокЗначений;
		НовыйСписок.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.НеУказан"),"Не указан");
		Элементы.Исполнители.ТекущиеДанные.Исполнитель = НовыйСписок;
	Иначе
		Элементы.Исполнители.ТекущиеДанные.Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.НеУказан");
	КонецЕсли;
	
	Элементы.Исполнители.ТекущиеДанные.ИсполнительПредставление	= "Не указан";
	//ИзмененыИсполнители			= Истина;
	ЭтаФорма.Модифицированность	= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//Если Элементы.Исполнители.ТекущиеДанные = Неопределено Тогда
		Возврат;
	//КонецЕсли;
	//
	//Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
	//	СтандартнаяОбработка = Ложь;
	//	
	//	ОткрытьФормуМодально(ВыбранноеЗначение.ИмяФормы,ВыбранноеЗначение.ПараметрыФормы,?(ВыбранноеЗначение.РежимВыбора,Элемент,ЭтаФорма));
	//	
	//ИначеЕсли ЗначениеЗаполнено(Объект.БизнесПроцесс) И НЕ ВыбранноеЗначение = Элементы.Исполнители.ТекущиеДанные.Исполнитель Тогда
	//	
	//	Элементы.Исполнители.ТекущиеДанные.Исполнитель				= ВыбранноеЗначение;
	//	Элементы.Исполнители.ТекущиеДанные.ИсполнительПредставление	= Строка(ВыбранноеЗначение);
	//	
	//	ЗаписатьИзмененияИсполнителейЭтапов();
	//		
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьСсылкуНаБизнесПроцессПоСделке(ДатаСтартаБП)
	
	Возврат CRM_БизнесПроцессыСервер.ВернутьСсылкуНаБизнесПроцессПоСделке(Объект.Ссылка, Истина, РеквизитФормыВЗначение("Исполнители"), МожноУказыватьСрокВыполненияЭтапов, ДатаСтартаБП);
	
КонецФункции

&НаКлиенте
Процедура СтартоватьБизнесПроцесс(Команда)
	
	//Если Объект.Ссылка.Пустая() Тогда 
	//	
	//	ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
	//		|Начать сделку возможно только после записи данных.
	//		|Данные будут записаны.'");
	//	Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	//	
	//	Если Результат <> КодВозвратаДиалога.ОК Тогда 
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Если Записать() Тогда
	//		ДатаСтартаБП = Неопределено;
	//		Объект.БизнесПроцесс = ВернутьСсылкуНаБизнесПроцессПоСделке(ДатаСтартаБП);
	//		Объект.ДатаСтарта = ДатаСтартаБП;
	//		
	//		Элементы.ФормаСтартоватьБизнесПроцесс.Видимость				= Ложь;
	//		Элементы.ФормаЗавершитьБизнесПроцессДосрочно.Видимость		= Истина;
	//		Элементы.ФормаПередвинутьЭтап.Видимость 					= Истина;
	//		Элементы.ДатаОкончания.ТолькоПросмотр						= Истина;
	//		Элементы.ДатаНачала.ТолькоПросмотр							= Истина;
	//		
	//		Записать();
	//		
	//		ЗаполнитьТаблицуИсполнителейПоБизнесПроцессу();
	//		
	//		СформироватьИЗаполнитьПанельАвтокнопок("ПанельАвтоКнопок");
	//		ПолучитьОбъектыЭтаповБизнесПроцесса();
	//		СформироватьИЗаполнитьПанельОбъектовПоБизнесПроцессу("ГруппаПанельОбъектов");
	//		
	//		УстановитьСвойстваЭлементовФормы();
	//		Элементы.ПанельСделки.ТекущаяСтраница = Элементы.СтраницаСледующееДействие;
	//	КонецЕсли;
	//	
	//Иначе
	//	ДатаСтартаБП = Неопределено;
	//	Объект.БизнесПроцесс = ВернутьСсылкуНаБизнесПроцессПоСделке(ДатаСтартаБП);
	//	Объект.ДатаСтарта = ДатаСтартаБП;
	//	
	//	Элементы.ФормаСтартоватьБизнесПроцесс.Видимость				= Ложь;
	//	Элементы.ФормаЗавершитьБизнесПроцессДосрочно.Видимость		= Истина;
	//	Элементы.ФормаПередвинутьЭтап.Видимость 					= Истина;
	//	Элементы.ДатаОкончания.ТолькоПросмотр						= Истина;
	//	Элементы.ДатаНачала.ТолькоПросмотр							= Истина;
	//	
	//	Записать();
	//	
	//	ЗаполнитьТаблицуИсполнителейПоБизнесПроцессу();
	//	
	//	СформироватьИЗаполнитьПанельАвтокнопок("ПанельАвтоКнопок");
	//	ПолучитьОбъектыЭтаповБизнесПроцесса();
	//	СформироватьИЗаполнитьПанельОбъектовПоБизнесПроцессу("ГруппаПанельОбъектов");
	//	
	//	УстановитьСвойстваЭлементовФормы();
	//	Элементы.ПанельСделки.ТекущаяСтраница = Элементы.СтраницаСледующееДействие;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПройденныеЭтапы(Команда)
	
	Элементы.ФормаПоказатьПройденныеЭтапы.Пометка = НЕ Элементы.ФормаПоказатьПройденныеЭтапы.Пометка;
	ФлагПоказатьВсеЭтапы = Элементы.ФормаПоказатьПройденныеЭтапы.Пометка;
	
	Если ФлагПоказатьВсеЭтапы Тогда
		Элементы.Исполнители.ОтборСтрок = Неопределено;
		ОтборСтрок = Новый ФиксированнаяСтруктура("ЭтоСкрытыйЭтап", Ложь);
		Элементы.Исполнители.ОтборСтрок = ОтборСтрок;
	Иначе
		Элементы.Исполнители.ОтборСтрок = Неопределено;
		ОтборСтрок = Новый ФиксированнаяСтруктура("Пройден, ЭтоСкрытыйЭтап", Ложь, Ложь);
		Элементы.Исполнители.ОтборСтрок = ОтборСтрок;
	КонецЕсли;
	
	Элементы.Исполнители.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["ФлагПоказатьВсеЭтапы"] = Неопределено Тогда
		ЭтаФорма.ФлагПоказатьВсеЭтапы	= Настройки["ФлагПоказатьВсеЭтапы"];
	Иначе
		ЭтаФорма.ФлагПоказатьВсеЭтапы	= Ложь;
	КонецЕсли;
	Элементы.ФормаПоказатьПройденныеЭтапы.Пометка	= ЭтаФорма.ФлагПоказатьВсеЭтапы;
	
	Если ЭтаФорма.ФлагПоказатьВсеЭтапы Тогда
		Элементы.Исполнители.ОтборСтрок = Неопределено;
		ОтборСтрок = Новый ФиксированнаяСтруктура("ЭтоСкрытыйЭтап", Ложь);
		Элементы.Исполнители.ОтборСтрок = ОтборСтрок;
	Иначе
		Элементы.Исполнители.ОтборСтрок = Неопределено;
		ОтборСтрок = Новый ФиксированнаяСтруктура("Пройден, ЭтоСкрытыйЭтап", Ложь, Ложь);
		Элементы.Исполнители.ОтборСтрок = ОтборСтрок;
	КонецЕсли;
	
	Элементы.Исполнители.Обновить();
	
КонецПроцедуры

// Открывает форму отправки письма для текущей контактной информации.
//
// Параметры:
//  ОбъектКонтактнойИнформации - Ссылка - владелец контактной информации.
//  КонтактнаяИнформация - ДанныеФормы - данные контактной информации.
//
&НаКлиенте
Процедура ОтправитьEmailИзСписка(ОбъектКонтактнойИнформации, КонтактнаяИнформация)
	
	Если ОбъектКонтактнойИнформации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтактнаяИнформация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтактнаяИнформация.Тип <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
		Возврат;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СокрЛП(КонтактнаяИнформация.Значение)) Тогда
		Возврат;	
	КонецЕсли;
	
	СписокАдресов = Новый СписокЗначений;
	
	СписокАдресов.Добавить(ОбъектКонтактнойИнформации, КонтактнаяИнформация.Значение);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокАдресов", СписокАдресов);
			
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
			
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьEmailКЛ(Команда)
	
	ОтправитьEmailИзСписка(Элементы.КонтактныеЛица.ТекущаяСтрока, Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМСКЛ(Команда)
	Если Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ (Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) Тогда
		Возврат;
	ИначеЕсли CRM_ОбщегоНазначенияКлиент.смсПроверитьДоступностьSMS4B() Тогда
		Структура = Новый Структура();
		Структура.Вставить("Ссылка", Элементы.КонтактныеЛица.ТекущаяСтрока);
		Структура.Вставить("Телефон", ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Значение));
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание", Структура);
		ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьКЛ(Команда)
	
	Если Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные = Неопределено Тогда
		Возврат;
	Иначе
		Тип = Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Тип;
		Если НЕ (Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// +СофтФон
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон() Тогда Возврат; КонецЕсли;
	сфпСофтФонПроКлиент.сфпПозвонить(Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Значение, Элементы.КонтактныеЛица.ТекущаяСтрока);
	// -СофтФон
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивАдресов(Партнер = Неопределено, КонтактноеЛицо  = Неопределено, Вид)
	
	ТаблицаАдресов = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Партнер, КонтактноеЛицо, Перечисления.ТипыКонтактнойИнформации.Адрес, Вид);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаАдресов);
	
КонецФункции	

&НаКлиенте
Процедура ОткрытьАдресКЛ()
	
	Если Элементы.КонтактныеЛица.ТекущаяСтрока = Неопределено Тогда Возврат; КонецЕсли;
	Если Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	Тип = Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Тип;
	Если НЕ (Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес")) Тогда Возврат; КонецЕсли;
	МассивАдресов = ПолучитьМассивАдресов(, Элементы.КонтактныеЛица.ТекущаяСтрока, Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные.Вид);
	Если МассивАдресов.Количество() = 0 Тогда Возврат; КонецЕсли;
	ВыбранныйАдрес		= МассивАдресов[0].ЗначенияПолей;
	ПредставлениеАдреса	= МассивАдресов[0].Представление;
	СписокПолей = CRM_ОбщегоНазначенияСервер.ПреобразоватьСтрокуВСписокПолей(ВыбранныйАдрес);
	СтруктураАдреса = Новый Структура;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		СтруктураАдреса.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;	
	СтруктураАдреса.Вставить("Представление", ПредставлениеАдреса);
	
	CRM_ОбщегоНазначенияКлиент.ПолучитьАдресПоказатьНаКарте(СтруктураАдреса, СайтИнтернетКарты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАдресКЛGIS(Команда)
	
	СайтИнтернетКарты = "GIS";
	ОткрытьАдресКЛ();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "Google".
//
Процедура ОткрытьАдресКЛGoogle(Команда)
	
	СайтИнтернетКарты = "Google";
	ОткрытьАдресКЛ();
	
КонецПроцедуры // Google()

&НаКлиенте
// Процедура - обработчик команды формы "Yandex".
//
Процедура ОткрытьАдресКЛYandex(Команда)
	
	СайтИнтернетКарты = "Yandex";
	ОткрытьАдресКЛ();
	
КонецПроцедуры // Yandex()

&НаСервере
Процедура ПоказатьКонтактнуюИнформациюКЛ(СтрокаСсылка)
	
	КонтактнаяИнформацияКЛ.Очистить();
	Если СтрокаСсылка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КИКонтактногоЛица = СтрокаСсылка.КонтактнаяИнформация;
	
	Для Каждого ОбъектКИ Из КИКонтактногоЛица Цикл
		
		НоваяКИ							= КонтактнаяИнформацияКЛ.Добавить();
		НоваяКИ.Вид						= ОбъектКИ.Вид;
		НоваяКИ.Значение				= ОбъектКИ.Представление;
		НоваяКИ.Тип						= ОбъектКИ.Тип;
		НоваяКИ.Порядок					= НоваяКИ.Вид.РеквизитДопУпорядочивания;
		НоваяКИ.CRM_ОсновнойДляСвязи	= ОбъектКИ.CRM_ОсновнойДляСвязи;
		
	КонецЦикла;	
	
	КонтактнаяИнформацияКЛ.Сортировать("Порядок");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияКонтактныеЛицаПриАктивизацииСтроки()
	Если Элементы.КонтактныеЛица.ТекущаяСтрока = Неопределено Тогда
		КонтактнаяИнформацияКЛ.Очистить();
		Возврат;
	КонецЕсли;
	
	ПоказатьКонтактнуюИнформациюКЛ(Элементы.КонтактныеЛица.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияКонтактныеЛицаПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Тема) Тогда
		Объект.Тема = ПолучитьТемуИзПроекта(Объект.Проект);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Клиент) Тогда
		Объект.Клиент = ПолучитьКлиентаИзПроекта(Объект.Проект);
		КлиентПриИзменении(Неопределено);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		КлиентПриИзменении(Неопределено);
	КонецЕсли;		
	
	ПриИзмененииПроекта();
	
	НастроитьВидимостьИДоступностьФормы(ЭтаФорма, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "Позвонить".
//
Процедура Позвонить(Команда)
	#Если Вебклиент Тогда
	Состояние(Нстр("ru = 'Работа СофтФона невозможна в web-клиенте!'"));
	#Иначе
	СписокОбъектов = ПолучитьСписокУчастников();
	Если СписокОбъектов.Количество() > 0 Тогда
		сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов);			
	КонецЕсли;	
	#КонецЕсли
КонецПроцедуры // Позвонить()

#КонецОбласти

#Область Надписиконтактнойинформации

&НаСервереБезКонтекста
// Функция возвращает строку с контактной информацией объекта.
//
// Параметры:
//	ОбъектКИ	- СправочникСсылка	- Объект, для которого получается контактная информация.
//
// Возвращаемое значение:
//	Строка	- Строка с контактной информацией объекта.
//
Функция СформироватьНадписьКонтактнойИнформации(ОбъектКИ)
	ТекстНадписи = "";
	Если ЗначениеЗаполнено(ОбъектКИ) Тогда
		Если ТипЗнч(ОбъектКИ) = Тип("СправочникСсылка.Партнеры") Тогда
			Для Каждого СтрокаКИ Из ОбъектКИ.КонтактнаяИнформация Цикл
				Если СтрокаКИ.CRM_ОсновнойДляСвязи И ((СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон) 
					ИЛИ (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) Тогда
					Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
						СтрПредставление = НСтр("ru='Тел.: '") + СтрокаКИ.Представление;
					ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
						СтрПредставление = НСтр("ru='e-mail: '") + СтрокаКИ.Представление;
					КонецЕсли;
					ТекстНадписи = ТекстНадписи + ?(НЕ ПустаяСтрока(ТекстНадписи), "; ", "") + СтрПредставление;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаКИ Из ОбъектКИ.КонтактнаяИнформация Цикл
				Если СтрокаКИ.CRM_ОсновнойДляСвязи И ((СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
				ИЛИ (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) Тогда
					ТекстНадписи = ТекстНадписи + ?(НЕ ПустаяСтрока(ТекстНадписи), "; ", "") + ?(СтрокаКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Телефон,НСтр("ru='Тел.: '"),НСтр("ru='e-mail: '")) + СтрокаКИ.Представление;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ПустаяСтрока(ТекстНадписи) Тогда
		ТекстНадписи = НСтр("ru='Нет избранной контактной информации'");
	КонецЕсли;
	Возврат ТекстНадписи;
КонецФункции // СформироватьНадписьКонтактнойИнформации()

&НаКлиенте
// Процедура формирует надпись с контактной информацией клиента.
//
// Параметры:
//	Нет.
//
Процедура СформироватьНадписиКонтактнойИнформацииКлиента()
	Элементы.ДекорацияПартнерТелефон.Заголовок = СформироватьНадписьКонтактнойИнформации(Объект.Клиент);
КонецПроцедуры // СформироватьНадписиКонтактнойИнформацииКлиента()	

&НаКлиенте
// Процедура формирует надпись с контактной информацией контакта.
//
// Параметры:
//	Нет.
//
Процедура СформироватьНадписиКонтактнойИнформацииКонтакта()
	Элементы.ДекорацияКонтактноеЛицоТелефон.Заголовок = СформироватьНадписьКонтактнойИнформации(Объект.КонтактноеЛицо);
КонецПроцедуры // СформироватьНадписиКонтактнойИнформацииКонтакта()	

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	СформироватьНадписиКонтактнойИнформацииКонтакта();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСкрыватьДопИнформацию(Команда)
	
	Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка = НЕ Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка;
	Элементы.ГруппаОписаниеПравая.Видимость = Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка;
	CRM_ХранилищеНастроек.Сохранить("ПоказыватьСкрыватьПанельИнформацииЗадачаБП",,Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка); 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
