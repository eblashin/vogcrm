&НаКлиенте
Перем КэшСвойстваДинамическогоСписка;

&НаКлиенте
Перем СписокОткрытыхФорм;

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриЧтенииНаСервере".
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	CRM_Теги.ПриЧтенииНаСервере(ЭтотОбъект, Элементы);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Оформление списка
	СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСервер();
	CRM_ОбщегоНазначенияСервер.ПользовательскиеНастройкиСпискаПриСозданииНаСервере(ЭтотОбъект, СвойстваДинамическогоСписка);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "КоманднаяПанельФормы");
		ДополнительныеПараметры.Вставить("Объект", Объект);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекПользователь = ТекущийПользователь;
		Если НЕ ЗначениеЗаполнено(Объект.СостояниеИнтереса) Тогда
			Объект.СостояниеИнтереса	= Справочники.CRM_СостоянияИнтересов.ПервичныйИнтерес;
			Объект.ВероятностьСделки	= Объект.СостояниеИнтереса.ВероятностьСделки;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
			Объект.Автор = ТекПользователь;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
			Объект.Подразделение	= Объект.Ответственный.Подразделение;
			Объект.Офис				= Объект.Подразделение.CRM_офис;
		КонецЕсли;	
		Элементы.КартинкаКонтроль.Доступность = Ложь;
		Если Параметры.Свойство("Партнер") Тогда
			Объект.Партнер = Параметры.Партнер;
		КонецЕсли;
		Если Параметры.Свойство("КонтактноеЛицо") Тогда
			Объект.КонтактноеЛицо = Параметры.КонтактноеЛицо;
		КонецЕсли;
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Элементы.Ответственный.КнопкаВыбора = Истина;
		Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Видимость = Ложь;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		Элементы.Ответственный.КнопкаВыбора = Ложь;
		Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Видимость = Истина;
	КонецЕсли;	
	РазрешатьСозданиеИнтересовПоОдномуТипуУслуги = Константы.CRM_РазрешатьСозданиеИнтересовПоОдномуТипуУслуги.Получить();
	ЗаполнитьПервичныйИнтерес(Параметры.Основание);
	ЗаполнятьПервичныйИнтерес = Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить();
	Если НЕ Объект.Ссылка.Пустая() Тогда
		НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
		Взаимодействия.Загрузить(CRM_ВзаимодействияСервер.ПолучитьВзаимодействия(Объект.Ссылка));
		ЗаполнитьДатуИВремяСервер();
		ПолучитьДатуПоследнегоВзаимодействияСервер(Справочники.CRM_СостоянияСобытий.Запланировано);
		ПолучитьДатуПоследнегоВзаимодействияСервер(Справочники.CRM_СостоянияСобытий.Завершено);
		
		МассивСтрок = Взаимодействия.НайтиСтроки(Новый Структура("СтатусВзаимодействия",Справочники.CRM_СостоянияСобытий.Запланировано));
		Для Каждого СтрокаВзаимодействия Из МассивСтрок Цикл
			Если ЗначениеЗаполнено(СтрокаВзаимодействия.Задача) Тогда
				ТекущаяЗадача = СтрокаВзаимодействия.Задача;
				БизнесПроцесс = СтрокаВзаимодействия.Задача.БизнесПроцесс;
				Элементы.ГруппаЭтапБП.Видимость = Истина;
				ТекущаяЗадачаПредставление = "Задача: "+ТекущаяЗадача.CRM_ТочкаМаршрута + ", срок: " + Формат(ТекущаяЗадача.ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'");
				ПолучитьТаблицуТипов();
				Прервать;
			КонецЕсли;
		КонецЦИкла;
		
		МассивСтрок = Взаимодействия.НайтиСтроки(Новый Структура("СтатусВзаимодействия",Справочники.CRM_СостоянияСобытий.Завершено));
		Для Каждого СтрокаВзаимодействия Из МассивСтрок Цикл
			Если ЗначениеЗаполнено(СтрокаВзаимодействия.Задача) Тогда
				БизнесПроцесс = СтрокаВзаимодействия.Задача.БизнесПроцесс;
				Прервать;
			КонецЕсли;
		КонецЦИкла;
	КонецЕсли;
	
	Элементы.ВзаимодействияКартаМаршрута.Видимость = ЗначениеЗаполнено(БизнесПроцесс);
	
	ПараметрИнтерес = Список.Параметры.Элементы.Найти("Интерес");
	Если ПараметрИнтерес <> Неопределено Тогда
		ПараметрИнтерес.Значение		= Объект.Ссылка;
		ПараметрИнтерес.Использование	= Истина;
	КонецЕсли;
	//// заполнить варианты БП
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	CRM_КартыМаршрутов.Наименование,
	//	|	CRM_КартыМаршрутов.Ссылка
	//	|ИЗ
	//	|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
	//	|ГДЕ
	//	|	CRM_КартыМаршрутов.ИспользоватьВИнтересах";
	//РезультатЗапроса = Запрос.Выполнить();
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//Сч = 1;
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	ИмяКоманды = "ЗапуститьБП_" + Сч;
	//	НоваяКоманда = Команды.Добавить(ИмяКоманды);
	//	НоваяКоманда.Действие = "Подключаемый_ЗапуститьБП";
	//	ЭлементКнопка = Элементы.Добавить("ЗапуститьБП_" + Сч, Тип("КнопкаФормы"), Элементы.ГруппаОсновныеВарианты);
	//	ЭлементКнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	//	ЭлементКнопка.Заголовок		= ВыборкаДетальныеЗаписи.Наименование;
	//	ЭлементКнопка.Отображение 	= ОтображениеКнопки.Текст;
	//	ЭлементКнопка.ИмяКоманды 	= ИмяКоманды;
	//	СписокБыстрыхКарт.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ИмяКоманды);
	//	Сч = Сч + 1;
	//КонецЦикла;
	ТекущаяДатаУсловногоОформления = НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	
	ОбновитьЗаголовокФормы();
	
	УстановитьВидимостьЭлементов();
	Если Параметры.Свойство("ПозиционироватьНаВзаимодействие") И ТипЗнч(Параметры.ПозиционироватьНаВзаимодействие) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		Элементы.Панель.ТекущаяСтраница = Элементы.стрВзаимодействия;
		
		Отбор = Новый Структура("Ссылка", Параметры.ПозиционироватьНаВзаимодействие);
		НайденныеСтроки = Взаимодействия.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 1 Тогда
			Элементы.Взаимодействия.ТекущаяСтрока = Взаимодействия.Индекс(НайденныеСтроки[0]);
			Если Параметры.Свойство("ВвестиРезультат") Тогда
				Элементы.Взаимодействия.ТекущийЭлемент = Элементы.ВзаимодействияРезультат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТекущийПользователь = Объект.Ответственный Тогда
		Элементы.Панель.ТекущаяСтраница = Элементы.стрВзаимодействия;
	КонецЕсли;
	
	CRM_Теги.УстановитьПараметрыВыбора(Элементы);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснование.Видимость = Ложь;
	КонецЕсли;		
	
	Если Параметры.Свойство("ОткрытиеИзТелемаркетинга") И Параметры.ОткрытиеИзТелемаркетинга Тогда 
		ОткрытиеИзТелемаркетинга = Истина;
		Если Параметры.Свойство("СозданиеИзСтрокиТелемаркетинга") И Параметры.СозданиеИзСтрокиТелемаркетинга Тогда
			СозданиеИзСтрокиТелемаркетинга = Истина;
		КонецЕсли;			
		// Значит создаём интерес из телемаркетинга.
		Если Параметры.Свойство("Содержание") Тогда
			КаналПервичногоИнтереса = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CRM_БезУказанияИсточника;
			СодержаниеВзаимодействия = Параметры.Содержание; 
		КонецЕсли;						
		Если Параметры.Свойство("Взаимодействие") Тогда
			ВидВзаимодействияИзТелемаркетинга = Параметры.Взаимодействие;
		КонецЕсли;			
	КонецЕсли;
	
	// +Софтфон
	Если Параметры.Свойство("сфпВыбранныйОбъект") Тогда
		Если Параметры.сфпВыбранныйОбъект.Свойство("ПотенциальныйКлиент") Тогда
			Объект.ПотенциальныйКлиент = Параметры.сфпВыбранныйОбъект.ПотенциальныйКлиент;
		Иначе
			Объект.Партнер = Параметры.сфпВыбранныйОбъект.Партнер;
			Объект.КонтактноеЛицо = Параметры.сфпВыбранныйОбъект.КонтактноеЛицо;
		КонецЕсли;			
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		КлючевоеФизЛицо = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьФизЛицо(Объект.КонтактноеЛицо);
		Если КлючевоеФизЛицо = Неопределено Тогда
			Если ЗначениеЗаполнено(Объект.Партнер) И Объект.Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
				МассивКЛ = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьКонтактныеЛица(Объект.Партнер);
				Если МассивКЛ.Количество() > 0 Тогда
					CRM_ФизЛицо = Объект.Партнер;
				КонецЕсли;					
			КонецЕсли;	
		Иначе
			CRM_ФизЛицо = КлючевоеФизЛицо;
		КонецЕсли;			
	КонецЕсли;		
	// -Софтфон
	
	Если Объект.Партнер.Пустая() Тогда
		КонтактныеЛица.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Справочники.Партнеры.ПолучитьСсылку();
	Иначе
		КонтактныеЛица.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Объект.Партнер;
	КонецЕсли;
	
	ОбновитьТаблицуНаКонтроле();	
	ОбновитьСтатусыДокумента();	
	СформироватьПредставлениеВложений();
	СформироватьОписаниеКаналаИсточника();
	
	ТекущееСостояние = Объект.СостояниеИнтереса;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРиски.ПриСозданииНаСервере(
		ЭтотОбъект,
		Неопределено,
		Объект.Партнер,
		ПараметрыПроцедуры);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы", "ЗаказКлиента") Тогда
			Элементы.ФормаСоздатьСчетНаОплату.Заголовок = "Заказ клиента";
		Иначе
			Элементы.ФормаСоздатьСчетНаОплату.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ПолучитьТаблицуТипов()
	
	СтруктураТипов = CRM_БизнесПроцессыСервер.ПолучитьСтруктуруТипов_Новая(ТекущаяЗадача);
	ТаблицаТипов.Очистить();
	Если СтруктураТипов.ТаблицаТипов.Количество() > 0 Тогда
		СписокОбязательныхТипов = СтруктураТипов.СписокОбязательныхТипов;
		Для Каждого СтрокаТаб Из СтруктураТипов.ТаблицаТипов Цикл
			НоваяСтрока = ТаблицаТипов.Добавить();
			НоваяСтрока.ВидОбъекта		= СтрокаТаб.ВидОбъекта;
			НоваяСтрока.ЭтапОснования	= СтрокаТаб.ЭтапОснования;
			НоваяСтрока.Обязательный	= СтрокаТаб.Обязательный;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)

	ДоступностьПотенциальногоКлиента();
	ДоступностьПервичногоИнтереса();
	СформироватьНадписиКонтактнойИнформацииКлиента();
	СформироватьНадписиКонтактнойИнформацииПотенциальногоКлиента();
	СформироватьНадписиКонтактнойИнформацииКонтакта();
	УстановитьДоступностьИнтереса(); 
	Элементы.ПоказыватьСкрыватьСписокДокументов.Пометка = СкрытьПоказатьСписокДокументов;
	Элементы.ГруппаСписокДокументов.Видимость	= СкрытьПоказатьСписокДокументов;	
	
	Если ОткрытиеИзТелемаркетинга Тогда
		СоздатьВзаимодействие(СодержаниеВзаимодействия, ВидВзаимодействияИзТелемаркетинга);
	КонецЕсли;			
	
	Если Элементы.Взаимодействия.ТекущийЭлемент = Элементы.ВзаимодействияРезультат Тогда
		Элементы.Взаимодействия.ИзменитьСтроку();
	КонецЕсли;
	
	// +Софтфон
	Если ЗначениеЗаполнено(CRM_ФизЛицо) Тогда
		Элементы.ПодобратьСвязанныйКлиент.Видимость = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(сфпНомерТелефона) 
	И (НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) И (НЕ ЗначениеЗаполнено(Объект.Партнер) И НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо)))
	Тогда
		Элементы.ФормасфпСоздатьКонтакт.Видимость = Истина;
	КонецЕсли;
	сфпУправлениеВидимостьюКнопокОткрытьВCoMagic();
	// -Софтфон	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Неопределено);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "НовоеКонтактноеЛицоЗаписано" Тогда
		Если Параметр = Объект.КонтактноеЛицо Тогда
			СформироватьНадписиКонтактнойИнформацииКонтакта();
		КонецЕсли;
		тДанные = Элементы.КонтактныеЛица.ТекущиеДанные;
		Если тДанные <> Неопределено И Элементы.КонтактныеЛица.ТекущиеДанные.Ссылка = Параметр Тогда
			Подключаемый_КонтактныеЛицаПриАктивизацииСтроки();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "НовыйПотенциальныйКлиентЗаписан" Тогда
		Если Параметр = Объект.ПотенциальныйКлиент Тогда
			СформироватьНадписиКонтактнойИнформацииПотенциальногоКлиента();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписьПартнера" И Параметр = Объект.Партнер Тогда
		
		СформироватьНадписиКонтактнойИнформацииКлиента();
		
	ИначеЕсли ИмяСобытия = "Создан новый партнер" Тогда
		Если ТипЗнч(Источник) = Тип("УправляемаяФорма") Тогда
			Попытка
				бФормаОткрытаИзФормыЭтогоСобытия = (Источник.ВладелецФормы = ЭтотОбъект);
			Исключение
				бФормаОткрытаИзФормыЭтогоСобытия = Ложь;
			КонецПопытки;
		Иначе
			бФормаОткрытаИзФормыЭтогоСобытия = Ложь;
		КонецЕсли;
		Если бФормаОткрытаИзФормыЭтогоСобытия Тогда
			Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
				Объект.Партнер = Параметр;
				ПартнерПриИзменении(Неопределено);
			ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Объект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
				ПартнерПриИзменении(Неопределено);
				Объект.КонтактноеЛицо	= Параметр;
				КонтактноеЛицоПриИзменении(Неопределено);
			КонецЕсли;
			ДоступностьПотенциальногоКлиента();
			Модифицированность = Истина;
			Записать();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаписатьИнтерес" Тогда
		Если Параметр = ЭтотОбъект.УникальныйИдентификатор Тогда
			Записать();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененОтветственныйПоИнтересу" И Источник = ЭтотОбъект Тогда
		ОтветственныйПриИзменении(Элементы.Ответственный);
	ИначеЕсли ИмяСобытия = "ОбновленыДанныеСобытия" 
		И (СтрНайти(Источник.ИмяФормы, "CRM_БизнесПроцесс") > 0 ИЛИ СтрНайти(Источник.ИмяФормы, "ЗадачаИсполнителя") > 0) Тогда
		ОбновитьСтатусыДокумента();
	ИначеЕсли ИмяСобытия = "СтартованНовыйНезависимыйБП" И Объект.Ссылка = Параметр Тогда
		ОбновитьСтатусыДокумента();
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ИнтересПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_ИнтересПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	// +Софтфон
	ИначеЕсли (ИмяСобытия = "СозданКонтактДляИнтереса") И Параметр.Свойство("сфпИнтерес") И Параметр.сфпИнтерес = Строка(ЭтотОбъект.УникальныйИдентификатор) Тогда
		Если Параметр.Свойство("Контакт") Тогда
			Если ТипЗнч(Параметр.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Объект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр.Контакт, "Владелец");
				ПартнерПриИзменении(Неопределено);
				Объект.КонтактноеЛицо	= Параметр.Контакт;
				КонтактноеЛицоПриИзменении(Неопределено);
			ИначеЕсли ТипЗнч(Параметр.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Объект.Партнер			= Параметр.Контакт;
				ПартнерПриИзменении(Неопределено);
			ИначеЕсли ТипЗнч(Параметр.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				Объект.ПотенциальныйКлиент = Параметр.Контакт;
				ДоступностьПотенциальногоКлиента();
				Элементы.ФормасфпСоздатьКонтакт.Видимость = Ложь;
			КонецЕсли;
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьПланировщик" Тогда
		Подключаемый_ВзаимодействияПриАктивизацииСтроки();
	// +-Софтфон
	КонецЕсли;
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ДобавитьЗаписьПоОбъекту(НовыйОбъект)
	
	НовыйОбъект_ВидОбъекта = ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.ПустаяСсылка();
	
	Для Каждого СтрокаТипа Из ТаблицаТипов Цикл
		Если СтрокаТипа.ВидОбъекта.ТипЗначения.СодержитТип(ТипЗнч(НовыйОбъект)) Тогда
			НовыйОбъект_ВидОбъекта = СтрокаТипа.ВидОбъекта;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
	Набор.Отбор.БизнесПроцесс.Установить(ТекущаяЗадача.БизнесПроцесс);
	Набор.Отбор.Объект.Установить(НовыйОбъект);
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
	
	ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.БизнесПроцесс	= ТекущаяЗадача.БизнесПроцесс;
	ЗаписьРегистра.Задача			= ТекущаяЗадача;
	ЗаписьРегистра.ТочкаМаршрута	= ТекущаяЗадача.CRM_ТочкаМаршрута;
	ЗаписьРегистра.Объект			= НовыйОбъект;
	ЗаписьРегистра.ДатаРегистрации	= ТекущаяДатаСеанса();
	ЗаписьРегистра.ВидОбъекта		= НовыйОбъект_ВидОбъекта;
	ЗаписьРегистра.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещенияЗаписиНовогоОбъекта(НовыйОбъект)
	
	Если НЕ Метаданные.ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Тип.Типы().Найти(ТипЗнч(НовыйОбъект)) = Неопределено Тогда
		
		ДобавитьЗаписьПоОбъекту(НовыйОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Элементы.Список.Обновить();
	Элементы.КонтактныеЛица.Обновить();
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		ОбработатьОповещенияЗаписиНовогоОбъекта(НовыйОбъект);
	КонецЕсли;
	
	ВзаимодействияТекущиеДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если Элементы.Панель.ТекущаяСтраница = Элементы.стрВзаимодействия И НЕ ВзаимодействияТекущиеДанные = Неопределено Тогда
		Если ВзаимодействияТекущиеДанные.ЕстьДокументы И ЗначениеЗаполнено(ВзаимодействияТекущиеДанные.Ссылка) Тогда
			ВзаимодействияТекущиеДанные.ЕстьДокументы = НЕ CRM_ВзаимодействияВызовСервера.ЕстьДокументыВзаимодействия(ВзаимодействияТекущиеДанные.Ссылка);
		КонецЕсли;
		Подключаемый_ВзаимодействияПриАктивизацииСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ДокументЗаписан = Ложь;
	Если Не Объект.Завершен Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) И CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Партнер, "ЮрФизЛицо") <> ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен контакт'"));
				Отказ = Истина;
			КонецЕсли;	
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен потенциальный клиент'"));
			Отказ = Истина;
		КонецЕсли;	
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ РазрешатьСозданиеИнтересовПоОдномуТипуУслуги И НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтереса(Объект) Тогда
				ПоказатьПредупреждение(, НСтр("ru='Обнаружен активный интерес клиента по выбранному типу услуги, запись документа отменена!'"));
				Отказ = Истина;
			КонецЕсли;	
		Иначе
			// С001031210
			//Если НЕ (Объект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ИнтересПотерян")) Тогда
			//	Если НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтересаПотенциальногоКлиента(Объект) Тогда
			//		ПоказатьПредупреждение(, НСтр("ru='Обнаружен активный интерес потенциального клиента, запись документа отменена!'"));
			//		Отказ = Истина;
			//	КонецЕсли;	
			//КонецЕсли;
		КонецЕсли;	
		Если НЕ ((Объект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПервичныйИнтерес"))
			ИЛИ (Объект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ВыявлениеПотребностей"))
			ИЛИ (Объект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ИнтересПотерян"))) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен клиент'"));
				Отказ = Истина;
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) И CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Партнер, "ЮрФизЛицо") <> ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено контактное лицо'"));
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;
		
		// Проверка взаимодействий. если интерес не завршен и нет запланнированного взаимодействия - не даем записать
		// документ.
		Результат = ПроверитьЗапланированныеВзаимодействия(); 
		
		// Проверка заполнения ожидаемой выручки.
		РезультатПоОжидаемойВыручке = ПроверитьВзаимодействияОжидаемаяВыручка();
		
		Если Не Отказ И (Результат ИЛИ РезультатПоОжидаемойВыручке) Тогда
			Отказ = Результат ИЛИ РезультатПоОжидаемойВыручке;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ПолучитьДатуПоследнегоВзаимодействияСервер(ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано"));
		Если Объект.Завершен Тогда
			Объект.ДатаЗакрытия = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	// защита для НН
	Если Не Отказ Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СтатусВзаимодействия", ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано"));
		НайденныеСтроки = Взаимодействия.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
				Если ТекВзаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.ВРаботе") ИЛИ
					(ТекВзаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено") И НЕ ЗначениеЗаполнено(ТекВзаимодействие.ДатаЗавершенияВзаимодействия)) Тогда
					// отменим взаимодействия
					ТекВзаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено");
					ТекВзаимодействие.ДатаЗавершенияВзаимодействия = ТекущаяДата();
					ТекВзаимодействие.ЗавершившийПользователь = ТекущийПользователь;
					ТекВзаимодействие.Изменено = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Проверяем, что поля подразделение и офис заполнены.
	Если Не ЗначениеЗаполнено(Объект.Подразделение)  Тогда
		ПодразделениеПользователя = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Ответственный, "Подразделение");
		Если ЗначениеЗаполнено(ПодразделениеПользователя) Тогда
			Объект.Подразделение	= ПодразделениеПользователя;
		Иначе
			ТекстСообщения = Нстр("ru = 'У текущего пользователя не заполнено подразделение!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ответственный);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Офис)  Тогда		
		ОфисПодразделения = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подразделение, "CRM_офис");			
		Если ЗначениеЗаполнено(ОфисПодразделения) Тогда
			Объект.Офис	= ОфисПодразделения;
		Иначе
			ТекстСообщения = Нстр("ru = 'У подразделения пользователя не заполнен офис!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Подразделение);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйИнтерес = Объект.Ссылка.Пустая();
	
КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Ссылка.Ответственный <> Объект.Ответственный Тогда
		
		CRM_ОповещенияСервер.УдалитьОповещения(Объект.Ссылка, Объект.Ответственный);			
		
		Объект.Описание = НСтр("ru ='Переадресовано от '") + Объект.Ответственный + " " + CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()
		+ НСтр("ru =' (предыдущее состояние ""'") + Объект.СостояниеИнтереса + """)" + Символы.ПС + Объект.Описание + Символы.ПС;
		МассивИнтересов = Новый Массив;
		МассивИнтересов.Добавить(Объект.Ссылка);
		CRM_ОбщегоНазначенияСервер.УстановитьНовогоОтветственногоВПодчиненныхВзаимодействиях(МассивИнтересов, Объект.Ответственный);
		Если Не Объект.Ответственный = ТекущийПользователь Тогда
			// Если объект перенаправил на себя текущий пользователь, то оповещять его об этом не надо.
			ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(Объект.Ответственный,Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах, Объект.Ссылка);
			Если НЕ (ПараметрыОповещения = Неопределено) Тогда
				CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БизнесПроцесс) Тогда
			МассивЗадач = Новый Массив;
			МассивЗадач.Добавить(БизнесПроцесс);
			CRM_БизнесПроцессыИЗадачиСервер.УстановитьНовогоОтветственного(МассивЗадач, Объект.Ответственный);
		КонецЕсли;
	КонецЕсли;
	ЗаписатьВзаимодействияСервер(ТекущийОбъект);
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПриЗаписиНаСервере".
//
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Если ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
		
		//Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда 
		//	Если НЕ ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		//		
		//		Если НЕ (Объект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПервичныйИнтерес")) 
		//			И НЕ ЗначениеЗаполнено(ЭтаФорма.ИсточникПервичногоИнтереса) Тогда
		//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено мероприятие'"));
		//			Отказ = Истина;
		//			Возврат;
		//		КонецЕсли;	
		//		
		//	КонецЕсли;
		//Иначе
		//	Если НЕ (Объект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПервичныйИнтерес")) 
		//		И НЕ ЗначениеЗаполнено(ЭтаФорма.ИсточникПервичногоИнтереса) Тогда
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено мероприятие'"));
		//		Отказ = Истина;
		//		Возврат;
		//	КонецЕсли;
		//КонецЕсли;
	//КонецЕсли;
	
	ЗаписатьПервичныйИнтерес(ТекущийОбъект);
	ОбновитьЗаголовокФормы();
	
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(ТекущийОбъект.ПотенциальныйКлиент) 
				И ЗначениеЗаполнено(ТекущийОбъект.Партнер)
				И НЕ ЗначениеЗаполнено(ТекущийОбъект.ПотенциальныйКлиент.Партнер) 
				Тогда
				
			ПотенциальныйКлиентОбъект = ТекущийОбъект.ПотенциальныйКлиент.ПолучитьОбъект();
			ПотенциальныйКлиентОбъект.Партнер = ТекущийОбъект.Партнер;
			ПотенциальныйКлиентОбъект.Записать();
			
			ПеревеситьДокументыНаПартнера(ТекущийОбъект.ПотенциальныйКлиент, ТекущийОбъект.Партнер);
			
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ Элементы.КартинкаКонтроль.Доступность Тогда
		Элементы.КартинкаКонтроль.Доступность = Истина;	
	КонецЕсли;			
	
	ОбновитьСтатусыДокумента();
КонецПроцедуры // ПриЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Интерес", Объект.Ссылка);
	Если ОбновленыДатыВзаимодействий Тогда
		Оповестить("ОбновитьПланировщик");
	КонецЕсли;
	Оповестить("ОбновитьАРМ");
	// +СофтФон
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		Если ЗначениеЗаполнено(Объект.ДокументОснование) 
			И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ТелефонныйЗвонок")) Тогда
			ОснованиеЗвонка = сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(Объект.ДокументОснование, "ВзаимодействиеОснование");
			Если ТипЗнч(ОснованиеЗвонка) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
				СтруктураОповещения = Новый Структура;
				СтруктураОповещения.Вставить("Основание",		ОснованиеЗвонка);
				СтруктураОповещения.Вставить("Звонок",			Объект.ДокументОснование);
				СтруктураОповещения.Вставить("Интерес",			Объект.Ссылка);
				СтруктураОповещения.Вставить("Партнер",			Объект.Партнер);
				СтруктураОповещения.Вставить("КонтактноеЛицо",	Объект.КонтактноеЛицо);
				Оповестить("СофтФон_ЗаписьИнтереса", СтруктураОповещения);
			КонецЕсли;
		КонецЕсли;
		Если сфпСофтФонПроСервер.сфпИспользоватьCoMagic() Тогда
			сфпCoMagicIDЗвонка = сфпПолучитьИдентификаторCoMagicУСвязанныхТелефонныхЗвонков(Объект.Ссылка);
			Если НЕ ПустаяСтрока(сфпCoMagicIDЗвонка) Тогда
				Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
					сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.КонтактноеЛицо, сфпCoMagicIDЗвонка);
				ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
					сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.Партнер, сфпCoMagicIDЗвонка);
				КонецЕсли;	
				сфпУправлениеВидимостьюКнопокОткрытьВCoMagic();
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	// -СофтФон
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") 
		И ПроверитьНаличиеРеквизитаУФормы(ВладелецФормы, "Объект")
		И ПроверитьНаличиеРеквизитаУФормы(ВладелецФормы.Объект, "Ссылка")
		И ((ТипЗнч(ВладелецФормы.Объект.Ссылка) = Тип("ДокументСсылка.CRM_Телемаркетинг")) 
		ИЛИ (ТипЗнч(ВладелецФормы.Объект.Ссылка) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем"))) Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Партнер",			Объект.Партнер);
			СтруктураОповещения.Вставить("КонтактноеЛицо",	Объект.КонтактноеЛицо);
			СтруктураОповещения.Вставить("Интерес",			Объект.Ссылка);
			СтруктураОповещения.Вставить("ПартнерСтрокой",	Объект.Описание);
			Оповестить("ОбновитьСтрокуВТелемаркетинге", СтруктураОповещения);
	КонецЕсли;
	
	ДокументЗаписан = Истина;
	
	Если НовыйИнтерес Тогда
		БылиИзменения = Ложь;
		ПроверитьНаличиеБизнесПроцессаОбновитьСостояниеИВзаимодействия(БылиИзменения);
		
		Если БылиИзменения Тогда
			Записать();
		КонецЕсли;
		
		НовыйИнтерес = Ложь;
		Элементы.Взаимодействия.Обновить();
	Иначе
		Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
			СкорретироватьРеквизитыБизнесПроцесса();
		КонецЕсли;
	КонецЕсли;
	
	ТекущееСостояние = Объект.СостояниеИнтереса;
	
КонецПроцедуры

&НаСервере
Процедура СкорретироватьРеквизитыБизнесПроцесса()
	
	Если НЕ ТекущаяЗадача.БизнесПроцесс.Наименование = Объект.Тема
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Партнер = Объект.Партнер
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.КонтактноеЛицо = Объект.КонтактноеЛицо
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Сумма = Объект.ОжидаемаяВыручка
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Организация = Объект.Организация
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Подразделение = Объект.Подразделение Тогда
		
		БизнесПроцессОбъект = ТекущаяЗадача.БизнесПроцесс.ПолучитьОбъект();
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Наименование = Объект.Тема Тогда
			БизнесПроцессОбъект.Наименование = Объект.Тема;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Партнер = Объект.Партнер Тогда
			БизнесПроцессОбъект.Партнер = Объект.Партнер;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.КонтактноеЛицо = Объект.КонтактноеЛицо Тогда
			БизнесПроцессОбъект.КонтактноеЛицо = Объект.КонтактноеЛицо;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Сумма = Объект.ОжидаемаяВыручка Тогда
			БизнесПроцессОбъект.Сумма = Объект.ОжидаемаяВыручка;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Организация = Объект.Организация Тогда
			БизнесПроцессОбъект.Организация = Объект.Организация;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Подразделение = Объект.Подразделение Тогда
			БизнесПроцессОбъект.Подразделение = Объект.Подразделение;
		КонецЕсли;
		
		БизнесПроцессОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеБизнесПроцессаОбновитьСостояниеИВзаимодействия(БылиИзменения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес",Объект.Ссылка);
	Запрос.УстановитьПараметр("CRM_СостояниеИнтереса",Объект.СостояниеИнтереса);
	Запрос.УстановитьПараметр("Исполнитель",Объект.Ответственный);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Задача,
	|	ЗадачаИсполнителя.CRM_СостояниеИнтереса КАК СостояниеИнтереса
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
	|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса = &CRM_СостояниеИнтереса
	|	И ЗадачаИсполнителя.Исполнитель = &Исполнитель
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И НЕ ЗадачаИсполнителя.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗапросПоВзаимодействиям = Новый Запрос;
		ЗапросПоВзаимодействиям.УстановитьПараметр("ДокументОснование",Объект.Ссылка);
		ЗапросПоВзаимодействиям.Текст = "ВЫБРАТЬ
		|	CRM_Взаимодействие.Ссылка
		|ИЗ
		|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
		|ГДЕ
		|	CRM_Взаимодействие.ДокументОснование = &ДокументОснование";
		
		ВыборкаПоВзаимодействиям = ЗапросПоВзаимодействиям.Выполнить().Выбрать();
		Пока ВыборкаПоВзаимодействиям.Следующий() Цикл
			ВзаимодействиеОбъект						= ВыборкаПоВзаимодействиям.Ссылка.ПолучитьОбъект();
			ВзаимодействиеОбъект.Задача					= Выборка.Задача;
			ВзаимодействиеОбъект.СостояниеИнтереса		= Выборка.СостояниеИнтереса;
			ВзаимодействиеОбъект.ОбменДанными.Загрузка	= Истина;
			ВзаимодействиеОбъект.Записать();
		КонецЦикла;
		
		Если НЕ Объект.СостояниеИнтереса = Выборка.СостояниеИнтереса Тогда
			БылиИзменения = Истина;
			Объект.СостояниеИнтереса = Выборка.СостояниеИнтереса;
		КонецЕсли;
		
		Для Каждого СтрокаВзаимодействия ИЗ Взаимодействия Цикл
			
			СтрокаВзаимодействия.Задача	=  Выборка.Задача;
			СтрокаВзаимодействия.Этап	=  Выборка.Задача.CRM_ТочкаМаршрута;
			
		КонецЦикла;
		ТекущаяЗадача = Выборка.Задача;
		ПолучитьТаблицуТипов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ОбработкаПроверкиЗаполненияНаСервере".
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ПроверкаЗаполнения(ПроверяемыеРеквизиты);
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	Если ОткрытиеИзТелемаркетинга И НЕ СозданиеИзСтрокиТелемаркетинга Тогда 
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Отказ							= Истина;
			ОткрытиеИзТелемаркетинга		= Ложь;
			СозданиеИзСтрокиТелемаркетинга	= Истина;
			Закрыть(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура СкопироватьУровеньДоступа()
	
	Если ЗначениеЗаполнено(Объект.Партнер) И ЗначениеЗаполнено(Объект.Ответственный["CRM_УровеньДоступа"])
		 И Объект.Партнер["CRM_УровниДоступа"].Найти(Объект.Ответственный["CRM_УровеньДоступа"],"УровеньДоступа") = Неопределено И Объект.Партнер["CRM_УровниДоступа"].Количество() > 0 Тогда
	
		ПартнерОбъект = Объект.Партнер.ПолучитьОбъект();
		НоваяСтрокаУровня = ПартнерОбъект["CRM_УровниДоступа"].Добавить();
		НоваяСтрокаУровня["УровеньДоступа"]= Объект.Ответственный["CRM_УровеньДоступа"];
		ПартнерОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		// Если выбрали ответственного в форме выбора по типу услуги
		Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") И ИсточникВыбора.ИмяФормы = Нстр("ru = 'ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги'") Тогда
			Если ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
				Если ВыбранноеЗначение <> Объект.Ответственный Тогда
					Объект.Ответственный = ВыбранноеЗначение;
					Объект.Подразделение = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Ответственный, "Подразделение");
					Объект.Офис	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подразделение, "CRM_офис");
					
					Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
						СкопироватьУровеньДоступа();
					КонецЕсли;
					
					Модифицированность = Истина;
					Записать();
					Закрыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ДокументОснованиеНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(, Объект.ДокументОснование);
КонецПроцедуры

&НаКлиенте
Процедура КартинкаВзаимодействиеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.CRM_ПроцессыИЗадачи", Новый Структура("Предмет", Объект.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКонтрольНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		ОповещениеКонтрольВопрос = Новый ОписаниеОповещения("КонтрольВопросЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеКонтрольВопрос, НСтр("ru = 'Для изменения параметров контроля необходимо произвести запись документа. Записать?'"), РежимДиалогаВопрос.ОКОтмена);
	Иначе
		КонтрольВопросЗавершение(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		ДокументЗаписан = Ложь;
		ЭтотОбъект.Записать();
		
		Если ДокументЗаписан Тогда
			КонтрольОписаниеОповещения = Новый ОписаниеОповещения("КонтрольЗавершение", ЭтотОбъект);
			ПараметрыФормы = Новый Структура("Интерес", Объект.Ссылка);
			ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаКонтроля", ПараметрыФормы, ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно, ,КонтрольОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольЗавершение(СтруктураНаКонтроле, ДополнительныеПараметры) Экспорт
	
	Если СтруктураНаКонтроле <> Неопределено Тогда
		
			Если СтруктураНаКонтроле.НаКонтроле Тогда
				
				CRM_ОбщегоНазначенияСервер.CRM_ЗаписатьНовоеСостояниеНаКонтролеДляТекущегоПользователя(Объект.Ссылка, 
				ТекущийПользователь, ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.НаКонтроле"), СтруктураНаКонтроле.Комментарий);
				
			Иначе
				
				НайтиСтроки = НаКонтроле.НайтиСтроки(Новый Структура("Пользователь", ТекущийПользователь));
				
				Если НайтиСтроки.Количество() > 0 Тогда
					ТекКомментарий = НайтиСтроки[0].Комментарий;
					CRM_ОбщегоНазначенияСервер.CRM_ЗаписатьНовоеСостояниеНаКонтролеДляТекущегоПользователя(Объект.Ссылка, 
					ТекущийПользователь, ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.СнятоСКонтроля"), ТекКомментарий);						
				Иначе
					CRM_ОбщегоНазначенияСервер.CRM_ЗаписатьНовоеСостояниеНаКонтролеДляТекущегоПользователя(Объект.Ссылка, 
					ТекущийПользователь, ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.СнятоСКонтроля"));		
				КонецЕсли;
				
			КонецЕсли;
			
			ОбновитьТаблицуНаКонтроле();
			ОбновитьСтатусыДокумента();
			
			Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
				ТекВзаимодействие.Изменено = Истина;
			КонецЦикла;
			ОбновитьЗаписатьВзаимодействия();
			Оповестить("ОбновитьАРМ");
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Ответственный".
//
Процедура ОтветственныйПриИзменении(Элемент)
	Объект.Подразделение = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Ответственный, "Подразделение");
	Объект.Офис	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подразделение, "CRM_офис");
	ПодразделениеПриИзменении(Элемент);		
КонецПроцедуры // ОтветственныйПриИзменении()

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги", Новый Структура("ТипУслуги", Объект.ТипУслуги),ЭтотОбъект);
	Иначе
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги",,ЭтотОбъект);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ТипУслуги".
//
Процедура ТипУслугиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			Если НЕ РазрешатьСозданиеИнтересовПоОдномуТипуУслуги И НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтереса(Объект) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен активный интерес клиента по выбранному типу услуги!'"));
			КонецЕсли;	
		ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			Если НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтересаПотенциальногоКлиента(Объект) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен активный интерес потенциального клиента!'"));
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // ТипУслугиПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ТипУслуги".
//
Процедура ТипУслугиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтандартнаяОбработка	= Ложь;
		ПараметрыФормы			= Новый Структура;
		МассивСвоихТиповУслуг	= CRM_ОбщегоНазначенияСервер.ПолучитьМассивДоступныхТиповУслугПодразделения(Объект.Подразделение);
		Если МассивСвоихТиповУслуг.Количество() > 0 Тогда
			// Если есть массив своих типов услуг, то накладываем фильтр.
			ПараметрыФормы.Вставить("МассивСвоихТиповУслуг", МассивСвоихТиповУслуг);
		КонецЕсли;	
		Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.ТипУслуги);
		КонецЕсли;	
		ОткрытьФорму("Справочник.CRM_ТипУслуги.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;	
КонецПроцедуры // ТипУслугиНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Подразделение".
//
Процедура ПодразделениеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
		// Если типа услуги нет в массиве своих услуг, то его очищаем.
		МассивСвоихТиповУслуг	= CRM_ОбщегоНазначенияСервер.ПолучитьМассивДоступныхТиповУслугПодразделения(Объект.Подразделение);
		Если (МассивСвоихТиповУслуг.Количество() > 0) И (МассивСвоихТиповУслуг.Найти(Объект.ТипУслуги) = Неопределено) Тогда
			Объект.ТипУслуги = ПредопределенноеЗначение("Справочник.CRM_ТипУслуги.ПустаяСсылка");
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // ПодразделениеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ПотенциальныйКлиент".
//
Процедура ПотенциальныйКлиентПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Если ЗначениеЗаполнено(Объект.ТипУслуги) 
			И НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтересаПотенциальногоКлиента(Объект) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен активный интерес потенциального клиента!'"));
		КонецЕсли;	
	КонецЕсли;
	КаналПервичногоИнтереса	= Неопределено;
	ИсточникПервичногоИнтереса	= Неопределено;
	СформироватьОписаниеКаналаИсточника();
	ДоступностьПервичногоИнтереса();
	СформироватьНадписиКонтактнойИнформацииПотенциальногоКлиента();
	ОбновленПартнерКонтакт = Истина;
КонецПроцедуры // ПотенциальныйКлиентПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Партнер".
//
Процедура ПартнерПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Если ЗначениеЗаполнено(Объект.ТипУслуги) 
			И НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтереса(Объект) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен активный интерес клиента по выбранному типу услуги!'"));
		КонецЕсли;	
	КонецЕсли;
	Если Элемент <> Неопределено Тогда
		Объект.КонтактноеЛицо	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Партнер, "CRM_ОсновноеКонтактноеЛицо");
		КонтактноеЛицоПриИзменении(Элемент);		
	КонецЕсли;		
	Объект.Ответственный	= ТекущийПользователь;
	//Объект.Ответственный	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Партнер, "ОсновнойМенеджер");
	ОтветственныйПриИзменении(Элемент);
	Если Элемент<>Неопределено Тогда
		КаналПервичногоИнтереса	= Неопределено;
		ИсточникПервичногоИнтереса	= Неопределено;
	КонецЕсли;
	
	Если Объект.Партнер.Пустая() Тогда
		КонтактныеЛица.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = ПредопределенноеЗначение("Справочник.Партнеры.Пустаяссылка");
	Иначе
		КонтактныеЛица.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Объект.Партнер;
	КонецЕсли;
	
	СформироватьОписаниеКаналаИсточника();
	ДоступностьПервичногоИнтереса();
	
	СформироватьНадписиКонтактнойИнформацииКлиента();
	ОбновитьЗаголовокФормы();
	ОбновленПартнерКонтакт = Истина;
	
	Если ЗначениеЗаполнено(Объект.Партнер) И Элементы.ФормасфпСоздатьКонтакт.Видимость Тогда
		Элементы.ФормасфпСоздатьКонтакт.Видимость = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		сфпУправлениеВидимостьюКнопокОткрытьВCoMagic();
	КонецЕсли;
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
КонецПроцедуры // ПартнерПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Создание" элемента формы "Партнер".
//
Процедура ПартнерСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		СоздатьПартнераПоНаименованию(Элемент.ТекстРедактирования);
	КонецЕсли;
КонецПроцедуры // ПартнерСоздание()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "КонтактноеЛицо".
//
Процедура КонтактноеЛицоПриИзменении(Элемент)
	СформироватьНадписиКонтактнойИнформацииКонтакта();
	ОбновленПартнерКонтакт = Истина;
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) И Элементы.ФормасфпСоздатьКонтакт.Видимость Тогда
		Элементы.ФормасфпСоздатьКонтакт.Видимость = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		сфпУправлениеВидимостьюКнопокОткрытьВCoMagic();
	КонецЕсли;
КонецПроцедуры // КонтактноеЛицоПриИзменении()

&НаКлиенте
// Процедура - обработчик выбора контактного лица.
//
Процедура КонтактноеЛицоОбработкаВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	Объект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(РезультатЗакрытия, "Владелец");
	ПартнерПриИзменении(Элементы.Партнер);
	Объект.КонтактноеЛицо	= РезультатЗакрытия;
	КонтактноеЛицоПриИзменении(Элементы.КонтактноеЛицо);
КонецПроцедуры // КонтактноеЛицоОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "КонтактноеЛицо".
//
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда Возврат; КонецЕсли;
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеВыбора		= Новый ОписаниеОповещения("КонтактноеЛицоОбработкаВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы			= Новый Структура;
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, Элемент, , , , ОповещениеВыбора);
КонецПроцедуры // КонтактноеЛицоНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Регулирование" элемента формы "ВероятностьСделки".
//
Процедура ВероятностьСделкиРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Если Направление = 1 Тогда
		Если Объект.ВероятностьСделки = 100 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;	
	Иначе
		Если Объект.ВероятностьСделки = 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // ВероятностьСделкиРегулирование()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "КаналПервичногоИнтереса".
//
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	ДоступностьПервичногоИнтереса();
	Если ИсточникПервичногоИнтереса = Неопределено ИЛИ ИсточникПервичногоИнтереса.Пустая() Тогда
		Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(КаналПервичногоИнтереса, "ТипЗначения"));
	КонецЕсли;	
КонецПроцедуры // КаналПервичногоИнтересаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "КаналПервичногоИнтереса".
//
Процедура КаналПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",		Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока",	КаналПервичногоИнтереса);
	ОткрытьФорму("ПланВидовХарактеристик.КаналыРекламныхВоздействий.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
КонецПроцедуры // КаналПервичногоИнтересаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ИсточникПервичногоИнтереса".
//
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Если ТипПВХ(КаналПервичногоИнтереса)= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
			ЭлементОтбора.ПравоеЗначение	= Истина;
			ЭлементОтбора.Использование		= Истина;
			// ПОДЛЕЖИТ ИСПРАВЛЕНИЮ FEDL: вопрос так и не решили, по какому бизнес региону фильтровать.
			//Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			//	БизнесРегионПартнера			= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Партнер, "БизнесРегион"); 
			//	Если ЗначениеЗаполнено(БизнесРегионПартнера) Тогда
			//		ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			//		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			//		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_Регион");
			//		ЭлементОтбора.ПравоеЗначение	= БизнесРегионПартнера;
			//		ЭлементОтбора.Использование		= Истина;
			//	КонецЕсли;
			//КонецЕсли;
			ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
			ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
			ЭлементОтбора.ПравоеЗначение	= НачалоДня(ТекущаяДата());
			ЭлементОтбора.Использование		= Истина;
			ФормаВыбора.Открыть();
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(ИсточникПервичногоИнтереса) И (ТипЗнч(ИсточникПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИсточникПервичногоИнтереса, "Владелец"));
			КонецЕсли;	
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеВыбораПартнера);
		КонецЕсли;	
	КонецЕсли;
	ДоступностьПервичногоИнтереса();
КонецПроцедуры // ИсточникПервичногоИнтересаНачалоВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВзаимодействия

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ ВЗАИМОДЕЙСТВИЯ

&НаСервере
Функция ПолучитьДанныеПоСрокуЗадачи()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес",				Объект.Ссылка);
	Запрос.УстановитьПараметр("CRM_СостояниеИнтереса",	ТекущееСостояние);
	Запрос.УстановитьПараметр("Исполнитель",			Объект.Ответственный);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка КАК Задача,
	               |	ЗадачаИсполнителя.СрокИсполнения
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
	               |	И ЗадачаИсполнителя.CRM_СостояниеИнтереса = &CRM_СостояниеИнтереса
	               |	И ЗадачаИсполнителя.Исполнитель = &Исполнитель
	               |	И НЕ ЗадачаИсполнителя.Выполнена
	               |	И НЕ ЗадачаИсполнителя.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("СрокИсполнения, Просрочена",Выборка.СрокИсполнения,(Выборка.СрокИсполнения<ТекущаяДатаСеанса()));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "ПлановаяДата" таблицы "Взаимодействия"
// вызывается у поля "ДатаНачала", событие "НачалоВыбора".
Процедура ВзаимодействияПлановаяДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.Взаимодействия.ТекущаяСтрока;
	СтруктураПараметров = Новый Структура();
	
	// Так как с таблицей значений есть проблемы при передаче с клиента на сервер и обратно,
	// создадим массив структур, который и передадим вместо таблицы.
	МассивСтрок = Новый Массив();
	РеквизитыТаблицы = ПолучитьРеквизитыТаблицыВзаимодействий();
	Для Каждого СтрокаТаблицы Из Взаимодействия Цикл
		// Текущую строку не передаем
		Если Взаимодействия.НайтиПоИдентификатору(ТекСтрока) = СтрокаТаблицы Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтроки = Новый Структура();
		
		Для Каждого ТекКолонка Из РеквизитыТаблицы Цикл
			СтруктураСтроки.Вставить(ТекКолонка.Ключ, СтрокаТаблицы[ТекКолонка.Ключ]);
		КонецЦикла;
		
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	СтруктураПараметров.Вставить("МассивСтрок", МассивСтрок);
	
	СтруктураПараметров.Вставить("Интерес", Объект.Ссылка);
	
	ДанныеСрокИсполнения = ПолучитьДанныеПоСрокуЗадачи();
	Если НЕ ДанныеСрокИсполнения = Неопределено Тогда
		СтруктураПараметров.Вставить("СрокИсполнения", ДанныеСрокИсполнения);
	КонецЕсли;
	
	ДатаВСтроке = Взаимодействия.НайтиПоИдентификатору(ТекСтрока).ПлановаяДата;
	Если ЗначениеЗаполнено(ДатаВСтроке) Тогда
		СтруктураПараметров.Вставить("ДатаПоУмолчанию", ДатаВСтроке);
	КонецЕсли;
	
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(Объект, Элемент, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик осбытия "ПриИзменении" поля "ПлановаяДата" таблицы "Взаимодействия"
// вызывается у поля "ДатаНачала", событие "ПриИзменении".
Процедура ВзаимодействияПлановаяДатаПриИзменении(Элемент)

	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("ТипУслуги", Объект.ТипУслуги);
	СтруктураПараметров.Вставить("ДатаПоУмолчанию", ТекДанные.ДатаНачала);
	СтруктураПараметров.Вставить("Автор", Объект.Автор);
	СтруктураПараметров.Вставить("Ответственный", Объект.Ответственный);
	
	Если ТекДанные = Неопределено ИЛИ ТекДанные.Партнер.Пустая() Тогда
		СтруктураПараметров.Вставить("Клиент", ?(ЗначениеЗаполнено(Объект.ПотенциальныйКлиент), Объект.ПотенциальныйКлиент, Объект.Партнер));
	Иначе
		СтруктураПараметров.Вставить("Клиент", ТекДанные.Партнер);
	КонецЕсли;
	
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияПриИзменении(Объект, Элемент, СтруктураПараметров);
	
	Если СтруктураПараметров.Свойство("Дата") Тогда
		// Сбрасываем дату
		ТекДанные.ДатаНачала = СтруктураПараметров.Дата;
	КонецЕсли;
	
	ТекДанные.ПлановаяДата = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ТекДанные.ДатаНачала, ТекДанные.ВремяС);
	Взаимодействия.Сортировать("ПлановаяДата Убыв");
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик осбытия "ОбработкаВыбора" поля "ПлановаяДата" таблицы "Взаимодействия"
// вызывается у поля "ДатаНачала", событие "ОбработкаВыбора".
Процедура ВзаимодействияПлановаяДатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура();
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияОбработкаВыбора(Объект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
// Процедура - Обработчик события "ПриОкончанииРедактирования" ТЧ Взаимодействия
//
Процедура ВзаимодействияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
		ТекДанные.Изменено = Истина;
		ЗаписатьДатуНачалаВзаимодействия(ТекДанные);
		Модифицированность = Истина;
		Взаимодействия.Сортировать("ПлановаяДата УБЫВ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" ТЧ Взаимодействия.
//
Процедура ВзаимодействияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Если у нас состояние интереса равно какому то с реквизитом завершен, то запретить ввод новых взаимодействий.
	Если ЗапретитьДобавлениеНовогоВзаимодействия() Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "Данный Интерес завершен. По нему нельзя планировать новое взаимодействие");
	Иначе
		Отказ = Истина;
		
		МассивСтрокАктивное			= Взаимодействия.НайтиСтроки(Новый Структура("АктивноеВзаимодействие", истина));
		МассивСтрокЗапланированных	= Взаимодействия.НайтиСтроки(Новый Структура("АктивноеВзаимодействие,СтатусВзаимодействия",
																				  Ложь,
																				  ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано")));
		
		Если МассивСтрокЗапланированных.Количество() = 0 Тогда
			Этап = ?(МассивСтрокАктивное.Количество()=0,ПредопределенноеЗначение("Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка"),МассивСтрокАктивное[0].Этап)
		Иначе
			Если МассивСтрокАктивное.Количество() = 0 Тогда
				Этап = ПредопределенноеЗначение("Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка");
			Иначе
				Если НЕ МассивСтрокАктивное[0].Этап = МассивСтрокЗапланированных[0].Этап Тогда
					Этап = МассивСтрокЗапланированных[0].Этап;
				Иначе
					Этап = МассивСтрокАктивное[0].Этап;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = Взаимодействия.Вставить(0);
		Элементы.Взаимодействия.ТекущийЭлемент = Элементы.ВзаимодействияКонтактноеЛицо; 
		НоваяСтрока.Автор = ТекущийПользователь;
		НоваяСтрока.СостояниеИнтереса = Объект.СостояниеИнтереса;
		НоваяСтрока.Этап = Этап;
		НоваяСтрока.ОжидаемаяВыручка  = Объект.ОжидаемаяВыручка;
		НоваяСтрока.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано");
		НоваяСтрока.КонтактноеЛицо = Объект.КонтактноеЛицо;
		НоваяСтрока.Партнер = Объект.Партнер;
		НоваяСтрока.ЕстьДокументы = 1;
		Модифицированность = Истина;
		Элементы.Взаимодействия.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Взаимодействия.ИзменитьСтроку();
		// Сразу открываем форму выбора взаимодействия.
		СтруктураДанных = Новый Структура("НоваяСтрока, ЗаполнятьСодержаниеИДату", НоваяСтрока, Ложь);		
		ОповещениеОВыбореВзаимодействия = Новый ОписаниеОповещения("ВыборВидаВзаимодействия", ЭтотОбъект, СтруктураДанных);
		//ОткрытьФорму("Справочник.bpmПричиныОтказов.ФормаВыбора",,,,,,ОповещениеОЗакрытии);
		ЗначениеОтбора = Новый Структура;
		ЗначениеОтбора.Вставить("Направление", ПредопределенноеЗначение("Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее"));
		ЗначениеОтбора.Вставить("ВидДела", ПредопределенноеЗначение("Справочник.CRM_ВидыДелВзаимодействий.Интерес"));
		ЗначениеОтбора.Вставить("СостояниеИнтереса", Объект.СостояниеИнтереса);
		ПараметрыВыбораВидаВзаимодействия = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФорму("Справочник.CRM_ВидыВзаимодействий.ФормаВыбора", ПараметрыВыбораВидаВзаимодействия,,,,,ОповещениеОВыбореВзаимодействия);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент.Имя = "ВзаимодействияРезультат" И Элемент.ТекущиеДанные.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для изменения результата нового взаимодействия необходимо записать интерес!'"), , ,, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента ВремяС ТЧ Взаимодействия.
//
Процедура ВзаимодействияВремяСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	
	СписокЧасов = ВыбратьВремяИзСписка(ТекДанные.ВремяС);
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("ТекДанные", ТекДанные);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	ПоказатьВыборИзСписка(Оп, СписокЧасов, Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента ВремяС ТЧ Взаимодействия.
//
Процедура ВзаимодействияВремяСПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	ЗаписатьДатуНачалаВзаимодействия(ТекДанные);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента "ВидВзаимодействия" ТЧ "Взаимодействия".
//
Процедура ВзаимодействияВидВзаимодействияПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	СтруктураНеобходимыхДанных = ПолучитьРеквизитыВзаимодействияСервер(ТекДанные.ВидВзаимодействия);
	
	ТекДанные.Баллы = СтруктураНеобходимыхДанных.Баллы;
	ТекДанные.ВидСобытияКартинка = СтруктураНеобходимыхДанных.ВидСобытияКартинка;
	ТекДанные.Содержание = СтруктураНеобходимыхДанных.Описание;
	ТекДанные.Изменено = Истина;
	ВзаимодействияВремяСПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента "Результат" ТЧ "Взаимодействия".
//
Процедура ВзаимодействияРезультатПриИзменении(Элемент)

	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если Не ПустаяСтрока(ТекДанные.Результат) Тогда
		Если ТекДанные.Ссылка.Пустая() Тогда
			ТекДанные.Результат = "";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для изменения результата нового взаимодействия необходимо записать интерес!'"));
			Возврат;
		КонецЕсли;
		ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено");
		ТекДанные.ДатаЗавершенияВзаимодействия = ТекущаяДата();
		ТекДанные.ЗавершившийПользователь = ТекущийПользователь;
		ОтменитьБолееРанниеВзаимодействия(ТекДанные.ПлановаяДата);
		ТекДанные.Изменено = Истина;
		ПолучитьДатуПоследнегоВзаимодействияСервер(ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено"));
	Иначе// Kudant 15.05.2015 если поле очищается, то событие не завершено
		ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано");
		ТекДанные.ДатаЗавершенияВзаимодействия = Дата('00010101');
		ТекДанные.Изменено = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента "СостояниеИнтереса" ТЧ "Взаимодействия".
//
Процедура ВзаимодействияСостояниеИнтересаПриИзменении(Элемент)

	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	бМожноМенятьСостояние = ПроверитьСтатусВзаимодействия(ТекДанные);
	Если Не бМожноМенятьСостояние Тогда
		ПоказатьПредупреждение(, "Состояние интереса можно менять только для завершенного взаимодействия.");
		ТекДанные.СостояниеИнтереса = ТекДанные.СостояниеИнтересаПредыдущее;
		ТекДанные.Этап = ТекДанные.ЭтапПредыдущий;
	Иначе
		// Проверка на значение Первичный интерес.
		// Если Состояния привязаны  к этапам бизсне-процесса, то эта проверка не нужна...
		Если НЕ ЗначениеЗаполнено(ТекДанные.Задача) И ТекДанные.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПервичныйИнтерес") 
			И Объект.СостояниеИнтереса <> ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПервичныйИнтерес") Тогда
				ПоказатьПредупреждение(,"Вернуть текущий интерес в состояние ""Первичный инетерес"" нельзя");
				ТекДанные.СостояниеИнтереса = ТекДанные.СостояниеИнтересаПредыдущее;
				ТекДанные.Этап = ТекДанные.ЭтапПредыдущий;
		Иначе
			Дополнительно = Новый Структура;
			Дополнительно.Вставить("ТекДанные", ТекДанные);
			
			КоличествоАктивныхВзаимодействий = ЭтотОбъект.Взаимодействия.НайтиСтроки(Новый Структура("Результат", "")).Количество();
			Если ТекДанные.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ИнтересПотерян") Тогда
				
				ТекДанные.Изменено = Истина;
				Дополнительно.Вставить("КоличествоАктивныхВзаимодействий", КоличествоАктивныхВзаимодействий);
				ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборПричиныОтказа", ЭтотОбъект, Дополнительно);
				ОткрытьФорму("Справочник.CRM_ПричиныОтказаПоИнтересам.ФормаВыбора",,,,,,ОповещениеОЗакрытии);
				
			ИначеЕсли ТекДанные.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ИнтересЗакрыт") Тогда
				
				Если Не ЗначениеЗаполнено(Объект.Партнер) И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
					ПоказатьПредупреждение(,НСтр("ru = 'Нельзя успешно завершать интерес потенциального клиента. Зарегистрируйте партнера.'"));
					ТекДанные.СостояниеИнтереса = ТекДанные.СостояниеИнтересаПредыдущее;
					ТекДанные.Этап = ТекДанные.ЭтапПредыдущий;
					Возврат;
				КонецЕсли;
				
				Если КоличествоАктивныхВзаимодействий > 0 Тогда
					ОповещениеОбработкиАктивныхВзаимодействий = Новый ОписаниеОповещения("ОбработкаЗакрытияАктивныхВзаимодействий", ЭтотОбъект, Дополнительно);
					ТекстВопроса = "Завершить все активные взаимодействия по данному интересу?";
					ПоказатьВопрос(ОповещениеОбработкиАктивныхВзаимодействий, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Иначе
					ОбработкаЗакрытияАктивныхВзаимодействий(КодВозвратаДиалога.Да, Дополнительно);
				КонецЕсли;
				
			ИначеЕсли ТекДанные.СостояниеИнтересаПредыдущее = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ИнтересЗакрыт")
			ИЛИ ТекДанные.СостояниеИнтересаПредыдущее = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ИнтересПотерян") Тогда
				//ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано");
				//ТекДанные.Результат = "";
				//ТекДанные.ДатаЗавершенияВзаимодействия = Дата('00010101');
				
				ТекДанные.Изменено = Истина;
				ПеревестиИнтересВСледующееСостояниеСервер(ТекДанные.СостояниеИнтереса);
			Иначе
				
				ПоменятьСостояниеИнтересаБолееПознихВзаимодействий(ТекДанные.ПлановаяДата, ТекДанные.СостояниеИнтереса, ТекДанные.Этап);
				
				ТекДанные.Изменено = Истина;
				ПеревестиИнтересВСледующееСостояниеСервер(ТекДанные.СостояниеИнтереса);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияСостояниеИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.Задача) И СписокОбязательныхТипов.Количество() > 0 Тогда
		МассивОшибок = CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(ТекущаяЗадача, СписокОбязательныхТипов, Истина);
		Если МассивОшибок.Количество() > 0 Тогда
			Для Индекс = 0 По МассивОшибок.ВГраница() Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивОшибок[Индекс]);
			КонецЦикла;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СписокСостояний = ПолучитьСписокСостоянийСервер(ТекДанные.Задача);
	Если СписокСостояний.Количество() = 1 И СписокСостояний[0].Значение = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СписокСостояний[0].Представление);
	Иначе
		Дополнительно = Новый Структура;
		Дополнительно.Вставить("Элемент", Элемент);
		Дополнительно.Вставить("ТекДанные", ТекДанные);
		ОП = Новый ОписаниеОповещения("ОбработкаВыбораСостоянияИнтереса", ЭтотОбъект, Дополнительно);
		ПоказатьВыборИзСписка(Оп, СписокСостояний, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента "ОжидаемаяВыручка" ТЧ "Взаимодействия".
//
Процедура ВзаимодействияОжидаемаяВыручкаПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	бМожноМенятьРеквизитОбъекта = ПроверитьСтатусВзаимодействия(ТекДанные);
	Если бМожноМенятьРеквизитОбъекта Тогда
		Объект.ОжидаемаяВыручка = ТекДанные.ОжидаемаяВыручка;
	Иначе
		ТекДанные.ОжидаемаяВыручка = ТекДанные.ОжидаемаяВыручкаПредыдущее;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" ТЧ "Взаимодействия".
//
Процедура ВзаимодействияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	
	ОповещениеВопросаОбОтменеВзаимодействия = Новый ОписаниеОповещения("ОбработкаОтменыВзаимодействия", ЭтотОбъект, ТекДанные);
	
	Если Не ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
		// Можно отменять и полностью удалять строку.
		ТекстВопроса = "Отменить запланированное взаимодействие?";
		ПоказатьВопрос(ОповещениеВопросаОбОтменеВзаимодействия, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено") Тогда
		ПоказатьПредупреждение(, "Нельзя отменять завершенное взаимодействие");
	ИначеЕсли Не ТекДанные.ЗапрещеноМенятьСостояние Тогда
		Если НЕ ТекДанные.ПервоначальнаяОтмена И ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
			ТекстВопроса = "Отменить запланированное взаимодействие?";
		Иначе
			ТекстВопроса = "Запланировать взаимодействие?";
		КонецЕсли;
		ПоказатьВопрос(ОповещениеВопросаОбОтменеВзаимодействия, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор"  элемента "ВидВзаимодействия" ТЧ "Взаимодействия".
// 
Процедура ВзаимодействияВидВзаимодействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Параметры.Отбор.Вставить("СостояниеИнтереса", Объект.СостояниеИнтереса);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора"  элемента "ВидВзаимодействия" ТЧ "Взаимодействия".
//
Процедура ВзаимодействияВидВзаимодействияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ПроверкаВыбора(ВыбранноеЗначение) Тогда
		ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.CRM_ВидыВзаимодействий.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

// события

&НаКлиенте
// Процедура обработчик события "СписокВыбор" таблицы "Список".
//
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "СписокЕстьПрисоединенныеФайлы" Тогда
		ПрисоединенныеФайлы(Неопределено);
	Иначе
		ОткрытьФормуТекущегоОбъекта();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "СписокПриАктивизацииСтроки" таблицы "Список".
//
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	ТекДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Элементы.СписокСоздатьНаОсновании.Доступность = Ложь;
	Иначе
		Элементы.СписокСоздатьНаОсновании.Доступность = Истина;
		Если ТекДанные <> Неопределено Тогда
			СписокВводаНаОсновании = СформироватьСписокВводаНаОсновании(ТекДанные.Объект);
		Иначе
			СписокВводаНаОсновании = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СписокСоздатьНаОсновании.Доступность = Элементы.СписокСоздатьНаОсновании.Доступность И (ТекДанные <> Неопределено) И (СписокВводаНаОсновании.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "СписокПередНачаломДобавления" таблицы "Список".
//
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "СписокПередНачаломИзменения" таблицы "Список".
//
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ОткрытьФормуТекущегоОбъекта();
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "СписокПередНачаломИзменения" таблицы "Список".
//
Процедура СписокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Попытка		ТекДанныеПометкаУдаления = ТекДанные.ПометкаУдаления;
	Исключение	ТекДанныеПометкаУдаления = Неопределено;
	КонецПопытки;
	Если ТекДанныеПометкаУдаления = Неопределено Тогда Возврат; КонецЕсли;
	
	Попытка		ТекДанныеОбъект = ТекДанные.Объект;
	Исключение	ТекДанныеОбъект = Неопределено;
	КонецПопытки;
	Если ТекДанныеОбъект = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТекДанныеПометкаУдаления Тогда
		ТекстВопроса = НСтр("ru = 'Снять с'") + " """ + Строка(ТекДанные.Объект) + """ " + НСтр("ru = 'пометку на удаление?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Пометить'") + " """ + Строка(ТекДанные.Объект) + """ " + НСтр("ru = 'на удаление?'");
	КонецЕсли;
	
	//Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	//
	//Если Ответ = КодВозвратаДиалога.Да Тогда
	//	ПометитьСнятьПометкуУдаленияНаСервере(ТекДанныеОбъект, Не ТекДанныеПометкаУдаления);
	//	
	//	ОбновитьСписок();
	//КонецЕсли;
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("ТекДанныеОбъект", ТекДанныеОбъект);
	Дополнительно.Вставить("ТекДанныеПометкаУдаления", Не ТекДанныеПометкаУдаления );
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияУдаленияЭлементаСписка", ЭтотОбъект, Дополнительно );
	ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзбранныйНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	Объект.Избранный		= НЕ Объект.Избранный;
	Модифицированность		= Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("СтатусВзаимодействия", ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано"));
	НайденныеСтроки = Взаимодействия.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
			ТекВзаимодействие.Изменено = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьНовогоКлиента".
//
Процедура СоздатьНовогоКлиента(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПотенциальныйКлиент", Объект.ПотенциальныйКлиент);
	CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, ПараметрыФормы);
КонецПроцедуры // СоздатьНовогоКлиента()

&НаКлиенте
// Процедура - обработчик команды формы "ЗапланироватьМероприятие".
//
Процедура ЗапланироватьМероприятие(Команда)
	
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для создания мероприятия требуется ВЫБРАТЬ взаимодействие.");
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.Ссылка = ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка") Тогда
		Если Не Записать() Тогда Возврат; КонецЕсли; 
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	Если НЕ (Элементы.Взаимодействия.ТекущиеДанные = Неопределено) Тогда
		ПараметрыФормы.Вставить("Взаимодействие", Элементы.Взаимодействия.ТекущиеДанные.Ссылка);
	КонецЕсли;	
	ДанныеВзаимодействия = Новый Структура;
	ДанныеВзаимодействия.Вставить("Тема", ТекДанные.Содержание);
	ДанныеВзаимодействия.Вставить("Автор", ТекДанные.Автор);
	ДанныеВзаимодействия.Вставить("Дата", ТекДанные.ПлановаяДата);
	ДанныеВзаимодействия.Вставить("Партнер", ТекДанные.Партнер);
	ДанныеВзаимодействия.Вставить("КонтактноеЛицо", ТекДанные.КонтактноеЛицо);
	
	ПараметрыФормы.Вставить("ДанныеВзаимодействия", ДанныеВзаимодействия);
	ОткрытьФорму("Документ.CRM_Мероприятие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ИзменитьИнтерес".
//
Процедура ИзменитьИнтерес(Команда)
	
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("ТекДанные", ТекДанные);
	ОП = Новый ОписаниеОповещения("ОбработкаИзмененияИнтереса", ЭтотОбъект, Дополнительно);
	
	ЗначениеОтбора = Новый Структура;
	ЗначениеОтбора.Вставить("Ответственный", Объект.Ответственный);
	ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);

	ОткрытьФорму("Документ.CRM_Интерес.ФормаВыбора",ПараметрыФормы,,,,,ОП,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьБП(Команда)
	
	Для Каждого ЭлементЗначение Из СписокБыстрыхКарт Цикл
		Если ЭлементЗначение.Представление = Команда.Имя Тогда
			КартаМаршрута = ЭлементЗначение.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(КартаМаршрута) Тогда
		ДанныеОснование = Новый Структура("Основание, КартаМаршрута", Объект.Ссылка, КартаМаршрута);
		ПараметрыФормы = Новый Структура("Основание", ДанныеОснование);
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ОтправитьEmailКлиент".
//
Процедура ОтправитьEmailКлиент(Команда)

	ПараметрыФормы = Новый Структура("Основание",Объект.Ссылка);
	ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если ТекДанные.Ссылка = ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка") Тогда
		Если Не Записать() Тогда Возврат; КонецЕсли; 
	КонецЕсли;
	Если НЕ (ТекДанные = Неопределено) Тогда
		ПараметрыФормы.Вставить("Взаимодействие", Элементы.Взаимодействия.ТекущиеДанные.Ссылка);
	КонецЕсли;	
	Если Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаКонтакты Тогда
		ТекСтрокаКИ = Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные;
		Если ТекСтрокаКИ <> Неопределено
			И ТекСтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			
			СписокАдресов = Новый СписокЗначений;
						
			ТекСтрокаКонтакт = Элементы.КонтактныеЛица.ТекущиеДанные;
			Если ТекСтрокаКонтакт = Неопределено Тогда
				ТекСсылка = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
			Иначе
				ТекСсылка = ТекСтрокаКонтакт.Ссылка; 
			КонецЕсли;				
			
			СписокАдресов.Добавить(ТекСсылка, ТекСтрокаКИ.Значение);
			ПараметрыФормы.Вставить("Кому", СписокАдресов);
			
		КонецЕсли;
	ИначеЕсли Элементы.Панель.ТекущаяСтраница = Элементы.стрВзаимодействия Тогда
		Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) 
				И НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			Возврат;
		КонецЕсли;
		СписокEmail	= Новый СписокЗначений;
		
		Контакт = ?(ЗначениеЗаполнено(Объект.КонтактноеЛицо), Объект.КонтактноеЛицо, Объект.ПотенциальныйКлиент);
				
		МассивEmail = ПолучитьМассивEmail(Контакт);

		Для Каждого ЭлементМассива Из МассивEmail Цикл
			СписокEmail.Добавить(ЭлементМассива.Контакт, ЭлементМассива.Значение);
		КонецЦикла;	
		Если СписокEmail.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан Email контактного лица или потенциального клиента'"));
		ИначеЕсли СписокEmail.Количество() = 1 Тогда
			ПараметрыФормы.Вставить("Кому", СписокEmail);
		Иначе
			ПараметрыФормы.Вставить("ТолькоКому", Истина);
			ОповещениеВыбораEmail	= Новый ОписаниеОповещения("ОбработкаВыбораEmail", ЭтотОбъект, ПараметрыФормы);
			ПоказатьВыборИзМеню(ОповещениеВыбораEmail, СписокEmail, Элементы.ВзаимодействияОтправитьEmailКлиент);
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ОтправитьСМС".
//
Процедура ОтправитьСМС(Команда)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если ТекДанные.Ссылка = ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка") Тогда
		Если Не Записать() Тогда Возврат; КонецЕсли; 
	КонецЕсли;
	Контакт = ?(ЗначениеЗаполнено(Объект.ПотенциальныйКлиент),Объект.ПотенциальныйКлиент,Объект.КонтактноеЛицо);
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Контакт = ?(ЗначениеЗаполнено(Объект.КонтактноеЛицо),Объект.КонтактноеЛицо,Объект.Партнер);
	Иначе
		Контакт = Объект.ПотенциальныйКлиент;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	КонецЕсли;
	СписокТелефонов = ПолучитьТелефон(Контакт);
	
	Для Каждого ЭлементСписка Из СписокТелефонов Цикл
		//КИ	= "+" + ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(ЭлементСписка.Значение);
		КИ	= ЭлементСписка.Значение;
		Прервать;
	КонецЦикла;
	
	Если КИ = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона'"));
		Возврат;
	ИначеЕсли НЕ ОтправкаSMSЧерезSMS4B.ИспользоватьSMS4B() Тогда
		CRM_ОбщегоНазначенияКлиент.ОткрытьФормуОшибкиПодключения("СМС");
		Возврат;
	ИначеЕсли НЕ ОтправкаSMSЧерезSMS4B.НастройкаОтправкиSMSВыполнена() Тогда
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОткрытияФормыНастроек", ЭтотОбъект);
		ПоказатьВопрос(ОП, "Отправка SMS невозможна так как не установлены параметры подключения.
						|Открыть форму настроек?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	Структура = Новый Структура();
	Структура.Вставить("Ссылка",	Контакт);
	Структура.Вставить("Телефон",	КИ);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", Структура);
	ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);	
	Если НЕ (Элементы.Взаимодействия.ТекущиеДанные = Неопределено) Тогда
		ПараметрыФормы.Вставить("Взаимодействие", Элементы.Взаимодействия.ТекущиеДанные.Ссылка);
	КонецЕсли;	
	ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры // ОтправитьСМС()

&НаКлиенте
// Процедура - обработчик команды формы "ОтправитьСМСКЛ".
//
Процедура ОтправитьСМСКЛ(Команда)
	ТДКЛ = Элементы.КонтактныеЛица.ТекущиеДанные;
	Если ТДКЛ = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТДКЛ.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	ТДКИ = Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные;
	Если ТДКИ = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ТДКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(ТДКИ.Значение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона'"));
		Возврат;
	ИначеЕсли НЕ ОтправкаSMSЧерезSMS4B.ИспользоватьSMS4B() Тогда
		CRM_ОбщегоНазначенияКлиент.ОткрытьФормуОшибкиПодключения("СМС");
		Возврат;
	ИначеЕсли НЕ ОтправкаSMSЧерезSMS4B.НастройкаОтправкиSMSВыполнена() Тогда
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОткрытияФормыНастроек", ЭтотОбъект);
		ПоказатьВопрос(ОП, "Отправка SMS невозможна так как не установлены параметры подключения.
						|Открыть форму настроек?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	Структура = Новый Структура();
	Структура.Вставить("Ссылка",	ТДКЛ.Ссылка);
	Структура.Вставить("Телефон",	ТДКИ.Значение);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", Структура);
	ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры // ОтправитьСМСКЛ()

&НаКлиенте
Процедура ПодобратьСвязанныйКонтакт(Команда)
	СписокОбъектов = Новый СписокЗначений;
	СписокОбъектов.Добавить(CRM_ФизЛицо);
	ПараметрыОповещения = Новый Структура();
	НовоеОповещение = Новый ОписаниеОповещения("ПодобратьСвязанныйКонтактПослеВыбора", ЭтотОбъект, ПараметрыОповещения);
	ПараметрыФормы = Новый Структура("СписокОбъектов, ПодборВИнтерес", СписокОбъектов, Истина);
	ОткрытьФорму("ОбщаяФорма.сфпФормаВыбораАбонента", ПараметрыФормы,,,ВариантОткрытияОкна.ОтдельноеОкно,,НовоеОповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСвязанныйКонтактПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) и ЗначениеЗаполнено(Результат) Тогда
		Если ТипЗнч(Результат) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ЭтоКонтакт = Истина;
		Иначе
			ЭтоКонтакт = Ложь;
		КонецЕсли;			
		Если ЭтоКонтакт Тогда
			Объект.КонтактноеЛицо = Результат;
			Объект.Партнер = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Объект.КонтактноеЛицо);
			ПартнерПриИзменении(Неопределено);
			Модифицированность = Истина;
		Иначе
			Объект.Партнер = Результат;
			ПартнерПриИзменении(Неопределено);
			Если НЕ (сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Объект.КонтактноеЛицо) = Объект.Партнер) Тогда
				Объект.КонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
			КонецЕсли;				
		КонецЕсли;			
	КонецЕсли;		
КонецПроцедуры	

// Функция получения адресов электронной почты контакта.
&НаСервереБезКонтекста
Функция ПолучитьМассивEmail(Контакт)
	МассивEmail = Новый Массив;
	Для Каждого ЭлементКИ Из Контакт.КонтактнаяИнформация Цикл
		Если ЭлементКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СтруктураКИ = Новый Структура;
			СтруктураКИ.Вставить("Значение",		ЭлементКИ.Представление); 
			СтруктураКИ.Вставить("Представление",	ЭлементКИ.Вид.Наименование + ": " + ЭлементКИ.Представление);
			СтруктураКИ.Вставить("Контакт", Контакт);
			Если ЭлементКИ.CRM_ОсновнойДляСвязи Тогда
				МассивEmail.Вставить(0, СтруктураКИ);
			Иначе
				МассивEmail.Добавить(СтруктураКИ);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	Возврат МассивEmail;
КонецФункции // ПолучитьМассивEmail().

// +СофтФон

#Область Софтфон

&НаСервереБезКонтекста
Функция сфпПолучитьМассивТелефонов(МассивКонтактов)
	МассивТелефонов = Новый Массив;
	Для Каждого ЭлементМассива Из МассивКонтактов Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Партнеры") Тогда
			ИмяОбъекта = Нстр("ru = 'Партнер'");
		ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ИмяОбъекта = Нстр("ru = 'Контактное лицо'");
		ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ИмяОбъекта = Нстр("ru = 'Потенциальный клиент'");			
		КонецЕсли;			
		Для Каждого ЭлементКИ Из ЭлементМассива.КонтактнаяИнформация Цикл
			Если ЭлементКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				СтруктураКИ = Новый Структура;
				СтруктураКИ.Вставить("Значение",		ЭлементКИ.Представление); 
				СтруктураКИ.Вставить("Представление",	ЭлементКИ.Вид.Наименование + ": " + ЭлементКИ.Представление + " (" + ЭлементМассива.Наименование + " <" + ИмяОбъекта +">" + ")");
				Если ЭлементКИ.CRM_ОсновнойДляСвязи Тогда
					МассивТелефонов.Вставить(0, СтруктураКИ);
				Иначе
					МассивТелефонов.Добавить(СтруктураКИ);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	Возврат МассивТелефонов;
КонецФункции // СфпПолучитьМассивТелефонов().

&НаКлиенте
Процедура ОбработкаВыбораТелефона(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	сфпСофтФонПроКлиент.сфпПозвонить(РезультатВыбора.Значение, Объект.КонтактноеЛицо, ДополнительныеПараметры);
КонецПроцедуры // ОбработкаВыбораТелефона()	

&НаКлиенте
Процедура ОбработкаВыбораEmail(РезультатВыбора, ПараметрыФормы) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	СписокАдресов = Новый СписокЗначений;
	СписокАдресов.Добавить(РезультатВыбора.Значение, РезультатВыбора.Представление);
	
	ПараметрыФормы.Вставить("Кому", СписокАдресов);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры // ОбработкаВыбораТелефона()	

&НаКлиенте
// Процедура - обработчик команды формы "ПозвонитьКЛ".
//
Процедура Позвонить(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) И НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Возврат;
	ИначеЕсли НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
		Возврат;
	КонецЕсли;
	СписокТелефонов	= Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		МассивКонтактов = Новый Массив;
		МассивКонтактов.Добавить(Объект.КонтактноеЛицо);
		МассивКонтактов.Добавить(Объект.Партнер);
		МассивТелефонов = сфпПолучитьМассивТелефонов(МассивКонтактов);		
	ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		МассивКонтактов = Новый Массив;
		МассивКонтактов.Добавить(Объект.ПотенциальныйКлиент);		
		МассивТелефонов = сфпПолучитьМассивТелефонов(МассивКонтактов);				
	КонецЕсли;		
	Для Каждого ЭлементМассива Из МассивТелефонов Цикл
		СписокТелефонов.Добавить(ЭлементМассива.Значение, ЭлементМассива.Представление);
	КонецЦикла;	
	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Основание",	Объект.Ссылка);	
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если ТекДанные.Ссылка = ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка") Тогда
		Если Не Записать() Тогда Возврат; КонецЕсли; 
	КонецЕсли;
	Если НЕ (ТекДанные = Неопределено) Тогда
		ДанныеЗаполнения.Вставить("Взаимодействие", Элементы.Взаимодействия.ТекущиеДанные.Ссылка);
	КонецЕсли;	
	Если СписокТелефонов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона'"));
	ИначеЕсли СписокТелефонов.Количество() = 1 Тогда
		ОбработкаВыбораТелефона(СписокТелефонов[0], ДанныеЗаполнения);
	Иначе
		ОповещениеВыбораТелефона	= Новый ОписаниеОповещения("ОбработкаВыбораТелефона", ЭтотОбъект, ДанныеЗаполнения);
		Если Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаДокументов Тогда
			ПоказатьВыборИзМеню(ОповещениеВыбораТелефона, СписокТелефонов, Элементы.СписокСоздатьНаОсновании);
		Иначе
			ПоказатьВыборИзМеню(ОповещениеВыбораТелефона, СписокТелефонов, Элементы.ВзаимодействияПозвонитьКЛ);
		КонецЕсли;			
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ПозвонитьКЛ".
//
Процедура ПозвонитьКЛ(Команда)
	ТДКЛ = Элементы.КонтактныеЛица.ТекущиеДанные;
	Если ТДКЛ = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТДКЛ.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	ТДКИ = Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные;
	Если ТДКИ = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ТДКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(ТДКИ.Значение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона'"));
		Возврат;
	КонецЕсли;
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Основание",	Объект.Ссылка);	
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеЗаполнения",	ДанныеЗаполнения);
	сфпСофтФонПроКлиент.сфпПозвонить(ТДКИ.Значение, ТДКЛ.Ссылка, ДополнительныеПараметры);
КонецПроцедуры


&НаКлиенте
Процедура сфпСоздатьКонтакт(Команда)
	
	НовоеОповещение = Новый ОписаниеОповещения("СоздатьПартнераПослеВыбораТипаКонтакта", ЭтотОбъект);
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка"), Нстр("ru = 'Контактное лицо партнера'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"), Нстр("ru = 'Партнер'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка"), Нстр("ru = 'Потенциальный клиент'"));	
	ПоказатьВыборИзСписка(НовоеОповещение, СписокВыбора, Элементы.Партнер, 1); 
	
КонецПроцедуры

&НаКлиенте
// Процедура, вызываемая после ответа пользователя по выбору создания типа контакта
// 
// Параметры:
//   Результат 					- ЭлементСпискаЗначений - Тип выбранного контакта для создания
//   ДополнительныеПараметры 	- Структура - Структура с передаваемыми доп. параметрами
//
Процедура СоздатьПартнераПослеВыбораТипаКонтакта(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(сфпНомерТелефона);;
	Если ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Телефон", сфпНомерТелефона);
		СтруктураПараметры.Вставить("Интерес", ЭтотОбъект.УникальныйИдентификатор);
		бИспользоватьПомощник = (CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьПомощникВводаНовогоКлиента") = Истина);		
		Если бИспользоватьПомощник Тогда
			CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, СтруктураПараметры);
		Иначе
			ПараметрыФормы = Новый Структура("Основание", СтруктураПараметры);		
			ФормаПартнера = ПолучитьФорму("Справочник.Партнеры.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
			ФормаПартнера.Открыть();
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда			
		НовоеОповещение = Новый ОписаниеОповещения("ВыборПартнераДляСозданияКонтактногоЛица", ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор",Ложь);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,НовоеОповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ИначеЕсли ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда	
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Телефон", сфпНомерТелефона);
		СтруктураПараметры.Вставить("Интерес", ЭтотОбъект.УникальныйИдентификатор);		
		ПараметрыФормы = Новый Структура("Основание", СтруктураПараметры);		
		ФормаКонтакта = ПолучитьФорму("Справочник.CRM_ПотенциальныеКлиенты.ФормаОбъекта", ПараметрыФормы,ЭтотОбъект);
		ФормаКонтакта.Открыть();		
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
// Процедура, вызываемая после ответа пользователя по выбору партнёра для создания КЛ
// 
// Параметры:
//   Результат 					- СправочникСсылка - Выбранный партнёр
//   ДополнительныеПараметры 	- Структура - Структура с передаваемыми доп. параметрами
//
Процедура ВыборПартнераДляСозданияКонтактногоЛица(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	Если ЗначениеЗаполнено(Результат) Тогда
		СтруктураОснования = Новый Структура("Интерес, НомерТелефона, Владелец", ЭтотОбъект.УникальныйИдентификатор, сфпНомерТелефона, Результат);
		ПараметрыФормы = Новый Структура("Основание", СтруктураОснования);
		ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода", ПараметрыФормы, ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "сфпОткрытьКарточкуВCoMagic"
//
Процедура сфпОткрытьКарточкуВCoMagic(Команда)
	СтруктураЗапроса = сфпОткрытьКарточкуВCoMagicНаСервере(Команда.Имя);		
	сфпОткрытьКлиентаВСистемеCoMagic(СтруктураЗапроса.Контакт, СтруктураЗапроса.CoMagicID);
КонецПроцедуры // сфпОткрытьКарточкуВCoMagic()

// -СофтФон

#КонецОбласти

&НаКлиенте
// Процедура - обработчик команды формы "ПрисоединенныеФайлы".
//
Процедура ПрисоединенныеФайлы(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	ТекДанные = Элементы.Список.ТекущиеДанные;

	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",  Элементы.Список.ТекущиеДанные.Объект);	
	
	ФормаСпискаФайлов = ПолучитьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",ПараметрыФормы,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаСпискаФайлов.Заголовок = (Строка(Элементы.Список.ТекущиеДанные.Объект) + НСтр("ru = ' (Присоединенные файлы)"));
	ФормаСпискаФайлов.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги", Новый Структура("ТипУслуги", Объект.ТипУслуги),ЭтотОбъект);
	Иначе
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги",,ЭтотОбъект);
	КонецЕсли;			
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВложениями_Интерес
			
&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Нет вложений...'");
		Возврат;
	КонецЕсли;		
	
	ВложенияПредставление = "";
	Вложения = ПолучитьВложенияИнтереса();
	Для Каждого ЭлементТаблицы Из Вложения Цикл
		РазмерВложения = Цел(ЭлементТаблицы.Размер/1024);
		РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(ЭлементТаблицы.Размер) + " байт");		
		ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + РазмерСтрокой + ")";
	КонецЦикла;
	Если ПустаяСтрока(ВложенияПредставление) Тогда
		ВложенияПредставление = НСтр("ru='Нет вложений...'");				
	Иначе
		ВложенияПредставление = Сред(ВложенияПредставление, 3);
	КонецЕсли;	
			
КонецПроцедуры // СформироватьПредставлениеВложений()			 

&НаСервере
Функция ПолучитьВложенияИнтереса()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ИнтересПрисоединенныеФайлы.Ссылка,
	|	CRM_ИнтересПрисоединенныеФайлы.Наименование КАК ИмяФайла,
	|	CRM_ИнтересПрисоединенныеФайлы.Размер
	|ИЗ
	|	Справочник.CRM_ИнтересПрисоединенныеФайлы КАК CRM_ИнтересПрисоединенныеФайлы
	|ГДЕ
	|	CRM_ИнтересПрисоединенныеФайлы.ВладелецФайла = &Интерес
	|	И НЕ CRM_ИнтересПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Интерес", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru = 'Интерес не записан. Добавление файлов невозможно!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);	
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтотОбъект,
	             Ложь,
	             Неопределено);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьНаОсновании".
//
Процедура СоздатьНаОсновании(Команда)

	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	ТекДанные = Элементы.Список.ТекущиеДанные;

	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;

	ОП = Новый ОписаниеОповещения("ОбработкаВыбораПодменю", ЭтотОбъект);
	СписокВводаНаОсновании = СформироватьСписокВводаНаОсновании(ТекДанные.Объект);

	ПоказатьВыборИзМеню(ОП, СписокВводаНаОсновании, Элементы.СписокСоздатьНаОсновании);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ОбработкаПервичногоИнтереса

&НаСервере
// Процедура получает предыдущий интерес партнера.
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру(ДатаАктуальности)
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	Интерес = Неопределено;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, , Объект.Партнер);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Интерес) И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, , Объект.ПотенциальныйКлиент);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Интерес) И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
		СтрокаПервичногоИнтереса = ПервичныйИнтерес.Вставить(0);
		ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса, Интерес);
		СтрокаПервичногоИнтереса.КаналПервичногоИнтереса	= Интерес.КаналПервичногоИнтереса;
		СтрокаПервичногоИнтереса.ИсточникПервичногоИнтереса	= Интерес.ИсточникПервичногоИнтереса;
		СтрокаПервичногоИнтереса.Актуальность = Истина;			
		Если ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) 
			И ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) 
					= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			Если ЗначениеЗаполнено(Интерес.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(Объект.Дата);
				ДатаАктуальности = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности;
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;
КонецПроцедуры // ПолучитьПредыдущийПервичныйИнтересПоПартнеру()

&НаСервере
// Процедура заполняет первичный интерес по документу - основанию.
//
// Параметры:
//	Основание	- ДокументСсылка	- Документ - основание.
//
Процедура ЗаполнитьПервичныйИнтерес(Основание)
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если ЗначениеЗаполнено(Основание) И (ТипЗнч(Основание) = Тип("ДокументСсылка.CRM_Интерес")) Тогда
				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Основание.Дата, Основание);
				КаналПервичногоИнтереса		= Интерес.КаналПервичногоИнтереса;
				ИсточникПервичногоИнтереса	= Интерес.ИсточникПервичногоИнтереса;
				Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ (ЗначениеЗаполнено(КаналПервичногоИнтереса) 
				И НЕ ТипПВХ(КаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"));
			КонецЕсли;
			// 
			Элементы.НадписьДатаСледующегоДействия.РастягиватьПоГоризонтали = Ложь;
		Иначе
			Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
			// растягиваем поле служебной надписи "Следующее взаимодействие"
			Элементы.НадписьДатаСледующегоДействия.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;
КонецПроцедуры // ЗаполнитьПервичныйИнтерес()

&НаСервере
// Процедура формирует описание канала источника.
//
// Параметры:
//	Нет.
//
Процедура СформироватьОписаниеКаналаИсточника()
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Элементы.РанееЗарегистрированныйИнтерес.Видимость = ЗначениеЗаполнено(Партнер);
		ПервичныйИнтерес.Очистить();
		ВыводитьНадпись = Ложь;
		Если ЗначениеЗаполнено(Объект.Партнер) ИЛИ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			АктуальноДо = '00010101';
			ПолучитьПредыдущийПервичныйИнтересПоПартнеру(АктуальноДо);
			Интерес = Неопределено;
			Попытка
				Интерес = ПервичныйИнтерес.Получить(0);
			Исключение
			КонецПопытки;
			РанееНеЗарегистровано = Ложь;
			//Если ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
			Если НЕ (Интерес = Неопределено) И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
				ВыводитьНадпись = Истина;
					Надпись = "";
					CRM_МаркетингСервер.СформироватьНадписьПервичногоИнтереса(Объект.Ссылка, Интерес, АктуальноДо, Надпись, ВыводитьНадпись);
					Элементы.РанееЗарегистрированныйИнтерес.Заголовок = Надпись;
			КонецЕсли;
			Элементы.РанееЗарегистрированныйИнтерес.Видимость = ВыводитьНадпись;
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // СформироватьОписаниеКаналаИсточника()

&НаСервере
// Процедура выполняет запись первичного интереса.
//
// Параметры:
//	ТекущийОбъект	- ДокументСсылка	- Текущий объект.
//
Процедура ЗаписатьПервичныйИнтерес(ТекущийОбъект)
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущийОбъект.Дата);
		НаборЗаписей.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписей.Записать();
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
			Если (НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				И ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))
				ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
				Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ИсточникиПервичногоИнтереса.Период КАК Период
				|ИЗ
				|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
				|ГДЕ
				|	ИсточникиПервичногоИнтереса.Сделка = &Сделка
				|	И ИсточникиПервичногоИнтереса.Партнер = &Партнер
				|");
				Запрос.УстановитьПараметр("Сделка", ТекущийОбъект.Ссылка);
				Если ЗначениеЗаполнено(Объект.Партнер) Тогда
					Запрос.УстановитьПараметр("Партнер", ТекущийОбъект.Партнер);
				Иначе
					Запрос.УстановитьПараметр("Партнер", ТекущийОбъект.ПотенциальныйКлиент);
				КонецЕсли;	
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Период = Выборка.Период;
					МенеджерЗаписи.Сделка = ТекущийОбъект.Ссылка;
					Если ЗначениеЗаполнено(Объект.Партнер) Тогда
						МенеджерЗаписи.Партнер = ТекущийОбъект.Партнер;
					Иначе
						МенеджерЗаписи.Партнер = ТекущийОбъект.ПотенциальныйКлиент;
					КонецЕсли;	
					МенеджерЗаписи.Удалить();
				КонецЦикла;
				Запись = НаборЗаписей.Добавить();
				Запись.Период						= ТекущийОбъект.Дата;
				Если ЗначениеЗаполнено(Объект.Партнер) Тогда
					Запись.Партнер					= ТекущийОбъект.Партнер;
				Иначе
					Запись.Партнер					= ТекущийОбъект.ПотенциальныйКлиент;
				КонецЕсли;	
				Запись.Сделка						= ТекущийОбъект.Ссылка;
				Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
				Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
			КонецЕсли;
		КонецЕсли;
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры // ЗаписатьПервичныйИнтерес()

&НаСервереБезКонтекста
// Функция возвращает тип значения элемента ПВХ.
//
// Параметры:
//	ПВХСсылкка	- ЛюбаяСсылка	- Ссылка на элемент ПВХ.
//
// Возвращаемое значение:
//	Тип	- Тип значения элемента ПВХ.
//
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции // ТипПВХ()

&НаКлиенте
// Процедура определяет доступность первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура ДоступностьПервичногоИнтереса()
	Попытка
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Исключение
		ПредыдущийИсточник	= Неопределено;
	КонецПопытки;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.Партнер), Истина, Ложь);
	Иначе
		НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.ПотенциальныйКлиент), Истина, Ложь);
	КонецЕсли;	
	Если НЕ ТолькоПросмотр Тогда
		Если НаличиеУчастников Тогда
			Элементы.КаналПервичногоИнтереса.Доступность	= Истина;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.КаналПервичногоИнтереса.Доступность		= Ложь;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр		= Истина;
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И НЕ (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Истина;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Истина;
		КонецЕсли;
	КонецЕсли;	
	// Отметки незаполненного
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	ИначеЕсли НЕ Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		// Если объязательно заполнять актуальный источник привлечения, тогда подсвечиваем канал первичного интереса.
		Если ЗаполнятьПервичныйИнтерес Тогда
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
		Иначе
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если Канал
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	КонецЕсли;
КонецПроцедуры // ДоступностьПервичногоИнтереса()

&НаКлиенте
// Функция проверяет наличие реквизиты у формы
//  Параметры:
//   Форма - УправляемаяФорма - Форма, у которой проверяем наличие реквизита
//   РеквизитПоиска - Строка - Реквизит формы
//
//  Возвращаемое значение:
//   Булево - Истина, если реквизит есть, Ложь - в противном случае
//
Функция ПроверитьНаличиеРеквизитаУФормы(Форма, РеквизитПоиска)
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(РеквизитПоиска, Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Форма);
	Если СтруктураПоиска[РеквизитПоиска]<> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции	

#КонецОбласти

#Область НадписиКонтактнойИнформации

&НаСервереБезКонтекста
// Функция возвращает строку с контактной информацией объекта.
//
// Параметры:
//	ОбъектКИ	- СправочникСсылка	- Объект, для которого получается контактная информация.
//
// Возвращаемое значение:
//	Строка	- Строка с контактной информацией объекта.
//
Функция СформироватьНадписьКонтактнойИнформации(ОбъектКИ)
	ТекстНадписи = "";
	Если ЗначениеЗаполнено(ОбъектКИ) Тогда
		Если ТипЗнч(ОбъектКИ) = Тип("СправочникСсылка.Партнеры") Тогда
			Для Каждого СтрокаКИ Из ОбъектКИ.КонтактнаяИнформация Цикл
				Если СтрокаКИ.CRM_ОсновнойДляСвязи И ((СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница)
				ИЛИ (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон) ИЛИ (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) Тогда
					Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
						СтрПредставление = НСтр("ru='Сайт: '") + СтрокаКИ.Представление;
					ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
						СтрПредставление = НСтр("ru='Тел.: '") + СтрокаКИ.Представление;
					ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
						СтрПредставление = НСтр("ru='e-mail: '") + СтрокаКИ.Представление;
					КонецЕсли;
					ТекстНадписи = ТекстНадписи + ?(НЕ ПустаяСтрока(ТекстНадписи), "; ", "") + СтрПредставление;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаКИ Из ОбъектКИ.КонтактнаяИнформация Цикл
				Если СтрокаКИ.CRM_ОсновнойДляСвязи И ((СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
				ИЛИ (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) Тогда
					ТекстНадписи = ТекстНадписи + ?(НЕ ПустаяСтрока(ТекстНадписи), "; ", "") + ?(СтрокаКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Телефон,НСтр("ru='Тел.: '"),НСтр("ru='e-mail: '")) + СтрокаКИ.Представление;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ПустаяСтрока(ТекстНадписи) Тогда
		ТекстНадписи = НСтр("ru='Нет избранной контактной информации'");
	КонецЕсли;
	Возврат ТекстНадписи;
КонецФункции // СформироватьНадписьКонтактнойИнформации()

&НаКлиенте
// Процедура формирует надпись с контактной информацией клиента.
//
// Параметры:
//	Нет.
//
Процедура СформироватьНадписиКонтактнойИнформацииКлиента()
	Элементы.ДекорацияПартнерТелефон.Заголовок = СформироватьНадписьКонтактнойИнформации(Объект.Партнер);
КонецПроцедуры // СформироватьНадписиКонтактнойИнформацииКлиента()	

&НаКлиенте
// Процедура формирует надпись с контактной информацией потенциального клиента.
//
// Параметры:
//	Нет.
//
Процедура СформироватьНадписиКонтактнойИнформацииПотенциальногоКлиента()
	Элементы.ДекорацияПотенциальныйКлиентТелефон.Заголовок = СформироватьНадписьКонтактнойИнформации(Объект.ПотенциальныйКлиент);
КонецПроцедуры // СформироватьНадписиКонтактнойИнформацииПотенциальногоКлиента()	

&НаКлиенте
// Процедура формирует надпись с контактной информацией контакта.
//
// Параметры:
//	Нет.
//
Процедура СформироватьНадписиКонтактнойИнформацииКонтакта()
	Элементы.ДекорацияКонтактноеЛицоТелефон.Заголовок = СформироватьНадписьКонтактнойИнформации(Объект.КонтактноеЛицо);
КонецПроцедуры // СформироватьНадписиКонтактнойИнформацииКонтакта()	

&НаСервере
Функция ПолучитьСписокОсновнойКИКонтактногоЛица()
	
	СписокКИ =Новый СписокЗначений();
	
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		Для Каждого СтрокаКИ Из Объект.КонтактноеЛицо.КонтактнаяИнформация Цикл
			Если СтрокаКИ.CRM_ОсновнойДляСвязи Тогда 
				Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					СписокКИ.Добавить(СтрокаКИ.Представление, "Позвонить (" + СтрокаКИ.Представление + ")",,БиблиотекаКартинок.CRM_ТелефонныйЗвонокИсходящий);
				ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					СписокКИ.Добавить(СтрокаКИ.Представление, "Отправить письмо (" + СтрокаКИ.Представление + ")",,БиблиотекаКартинок.CRM_ЭлектронноеПисьмоИсходящее);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат СписокКИ;
	
КонецФункции 

&НаКлиенте
Процедура ДекорацияКонтактноеЛицоТелефонНажатие(Элемент)
	Если Элементы.ДекорацияКонтактноеЛицоТелефон.Заголовок <> "Нет контактной информации" Тогда
		Оповещение 	= Новый ОписаниеОповещения("ОбработкаОповещенияПриВыбореКИ",ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, ПолучитьСписокОсновнойКИКонтактногоЛица(),Элемент);				
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияПриВыбореКИ(ВыбранноеЗначение, Параметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено И  СтрНайти(ВыбранноеЗначение.Представление, "Позвонить") > 0 Тогда
		Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон() Тогда Возврат; КонецЕсли;
		ДополнительныеПараметры	= Новый Структура;
		сфпСофтФонПроКлиент.сфпПозвонить(ВыбранноеЗначение.Значение, Объект.КонтактноеЛицо, ДополнительныеПараметры);
	ИначеЕсли ВыбранноеЗначение <> Неопределено И  СтрНайти(ВыбранноеЗначение.Представление, "Отправить письмо") > 0 Тогда	
	   	ПараметрыФормы = Новый Структура("Основание",Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
		ПараметрыФормы.Вставить("Кому", ВыбранноеЗначение.Значение);
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры
         
#КонецОбласти

#Область ОбработкаВзаимодействий

&НаСервере
// Функция возвращает перечень реквизитов таблицы Взаимодействия.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура - Перечень имен реквизитов.
//
Функция ПолучитьРеквизитыТаблицыВзаимодействий()
	РеквизитыТаблицы = ПолучитьРеквизиты("Взаимодействия");
	СтруктураРеквизитов = Новый Структура();
	Для Каждого Реквизит Из РеквизитыТаблицы Цикл
		СтруктураРеквизитов.Вставить(Реквизит.Имя);
	КонецЦикла;
	Возврат СтруктураРеквизитов;
КонецФункции

&НаСервере
// Процедура создания / изменения документов Взаимодействия, связанных с текущим документом Интерес.
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьВзаимодействияСервер(ТекущийОбъект)
	
	СсылкаНаЗадачу = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	ПроверитьНаличиеЗадач = Ложь;
	// В начале обработаем уже существующие Взаимодействия
	Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
		
		Если НЕ ТекВзаимодействие.Ссылка = Документы.CRM_Взаимодействие.ПустаяСсылка() Тогда
			ПроверитьНаличиеЗадач = Истина;
		КонецЕсли;
		
		Если ТекВзаимодействие.Изменено ИЛИ ОбновленПартнерКонтакт Тогда
			Если НЕ ТекВзаимодействие.Ссылка = Документы.CRM_Взаимодействие.ПустаяСсылка() Тогда
				
				ИзмененноеВзаимодействие = ТекВзаимодействие.Ссылка.ПолучитьОбъект();
				ВзаимодействиеЗавершеноРанее = (ИзмененноеВзаимодействие.СтатусВзаимодействия=Справочники.CRM_СостоянияСобытий.Завершено);
				
				Если ТекВзаимодействие.Изменено Тогда
					ВремяНаЗавершение = ?(ИзмененноеВзаимодействие.ПлановаяДатаЗавершение >= ИзмененноеВзаимодействие.ПлановаяДата,
						ИзмененноеВзаимодействие.ПлановаяДатаЗавершение - ИзмененноеВзаимодействие.ПлановаяДата, 60*15);
					ЗаполнитьЗначенияСвойств(ИзмененноеВзаимодействие, ТекВзаимодействие);
					ИзмененноеВзаимодействие.ПлановаяДатаЗавершение = ИзмененноеВзаимодействие.ПлановаяДата + ВремяНаЗавершение;
					Если НЕ ЗначениеЗаполнено(ИзмененноеВзаимодействие.Подразделение) Тогда
						ИзмененноеВзаимодействие.Подразделение  = ТекущийОбъект.Подразделение;
					КонецЕсли;
				КонецЕсли;
				ИзмененноеВзаимодействие.Организация 		= ТекущийОбъект.Организация; 
				Если ОбновленПартнерКонтакт Тогда
					ИзмененноеВзаимодействие.Партнер 			= ТекущийОбъект.Партнер; 
					ИзмененноеВзаимодействие.КонтактноеЛицо 	= ТекущийОбъект.КонтактноеЛицо; 
					ИзмененноеВзаимодействие.ПотенциальныйКлиент= ТекущийОбъект.ПотенциальныйКлиент; 
				КонецЕсли;
				Если ИзмененноеВзаимодействие.СтатусВзаимодействия <> Справочники.CRM_СостоянияСобытий.Завершено
					ИЛИ ИзмененноеВзаимодействие.СтатусВзаимодействия <> Справочники.CRM_СостоянияСобытий.Отменено Тогда
					ИзмененноеВзаимодействие.Ответственный 		= ТекущийОбъект.Ответственный; 
					ИзмененноеВзаимодействие.Подразделение 		= ТекущийОбъект.Подразделение; 
				КонецЕсли;
				ИзмененноеВзаимодействие.Записать();
				ТекВзаимодействие.Изменено = Ложь;
				
				Если ЗначениеЗаполнено(ТекВзаимодействие.Задача)
				И (ЗначениеЗаполнено(ТекВзаимодействие.Этап) ИЛИ (ТекВзаимодействие.СостояниеИнтереса = Справочники.CRM_СостоянияИнтересов.ИнтересПотерян))
				И ТекВзаимодействие.АктивноеВзаимодействие Тогда
					//Если этап меняли, то завершаем задачу по выбраннному варианту
					Если НЕ ТекВзаимодействие.Задача.CRM_ТочкаМаршрута = ТекВзаимодействие.Этап Тогда
						
						Если ТекВзаимодействие.ЭтоПереход Тогда
							ЗадачаОбъект								= ТекВзаимодействие.Задача.ПолучитьОбъект();
							ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ИзмененноеВзаимодействие.ДатаЗавершенияВзаимодействия);
							
							ПоследнееДействиеСтрокой = ДатаСтрокой+" "+НСтр("ru = 'Завершено взаимодействие"""+ТекВзаимодействие.ВидВзаимодействия+""" -> '") + Строка(ИзмененноеВзаимодействие.Ответственный);
							
							Если ПоследнееДействиеСтрокой = ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой Тогда
								СтрокаДляЗамены = ПоследнееДействиеСтрокой + Символы.ПС + ТекВзаимодействие.Результат + Символы.ПС;
								ЗадачаОбъект.РезультатВыполнения = СтрЗаменить(ЗадачаОбъект.РезультатВыполнения,ПоследнееДействиеСтрокой + Символы.ПС,СтрокаДляЗамены);
							Иначе
								ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой = ПоследнееДействиеСтрокой;
								
								ЗадачаОбъект.РезультатВыполнения = ПоследнееДействиеСтрокой + Символы.ПС + ТекВзаимодействие.Результат + ?(ПустаяСтрока(ЗадачаОбъект.РезультатВыполнения),"",Символы.ПС) + "
								|"+ЗадачаОбъект.РезультатВыполнения;
							КонецЕсли;
							ЗадачаОбъект.Записать();
							
							Если (ТекВзаимодействие.СостояниеИнтереса = Справочники.CRM_СостоянияИнтересов.ИнтересПотерян И ТекВзаимодействие.Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка())
							ИЛИ ТекВзаимодействие.Этап.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
								
								ПараметрыДосрочногоЗавершения = Новый Структура();
								ПараметрыДосрочногоЗавершения.Вставить("ЗавершенДосрочно"				,Истина);
								ПараметрыДосрочногоЗавершения.Вставить("ПричинаДосрочногоЗавершения"	,Справочники.CRM_ПричиныОтказов.ПустаяСсылка());
								ПараметрыДосрочногоЗавершения.Вставить("Задача"							,ЗадачаОбъект.Ссылка);
								
								Если ТекВзаимодействие.Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка() Тогда
									ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	,ЗадачаОбъект.CRM_ТочкаМаршрута);
									ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"			,Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
								Иначе
									ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	,ТекВзаимодействие.Этап);
									ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"			,ТекВзаимодействие.Этап.ВариантЗавершения);
								КонецЕсли;
								
								CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения);
							Иначе
								CRM_БизнесПроцессыСервер.ВыполнитьПереходБизнесПроцессаНаЭтап(ЗадачаОбъект.БизнесПроцесс, ТекВзаимодействие.Этап);
							КонецЕсли;
						Иначе
							ЗадачаОбъект								= ТекВзаимодействие.Задача.ПолучитьОбъект();
							ЗадачаОбъект.CRM_ВариантВыполнения			= ТекВзаимодействие.ВариантВыполнения;
							Попытка
								ЗадачаОбъект.CRM_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(ЗадачаОбъект.CRM_ТочкаМаршрута,
								ТекВзаимодействие.ВариантВыполнения,
								ЗадачаОбъект.БизнесПроцесс.НомерВерсииКартыМаршрута);
							Исключение
							КонецПопытки;
							ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ИзмененноеВзаимодействие.ДатаЗавершенияВзаимодействия);
							
							ПоследнееДействиеСтрокой = ДатаСтрокой+" "+НСтр("ru = 'Завершено взаимодействие"""+ТекВзаимодействие.ВидВзаимодействия+""" -> '") + Строка(ИзмененноеВзаимодействие.Ответственный);
							
							Если ПоследнееДействиеСтрокой = ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой Тогда
								СтрокаДляЗамены = ПоследнееДействиеСтрокой + Символы.ПС + ТекВзаимодействие.Результат + Символы.ПС;
								ЗадачаОбъект.РезультатВыполнения = СтрЗаменить(ЗадачаОбъект.РезультатВыполнения,ПоследнееДействиеСтрокой + Символы.ПС,СтрокаДляЗамены);
							Иначе
								ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой = ПоследнееДействиеСтрокой;
								
								ЗадачаОбъект.РезультатВыполнения = ПоследнееДействиеСтрокой + Символы.ПС + ТекВзаимодействие.Результат + ?(ПустаяСтрока(ЗадачаОбъект.РезультатВыполнения),"",Символы.ПС) + "
								|"+ЗадачаОбъект.РезультатВыполнения;
							КонецЕсли;
							ЗадачаОбъект.Записать();
							
							CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(ЗадачаОбъект.Ссылка,,Неопределено,,Новый Структура("Взаимодействие", ТекВзаимодействие.Ссылка));
						КонецЕсли;
						
						ТекВзаимодействие.ЗадачаВыполнена = Истина;
						
						Если НЕ ЗадачаОбъект.БизнесПроцесс.Завершен Тогда
							Запрос = Новый Запрос;
							Запрос.УстановитьПараметр("Интерес",ТекущийОбъект.Ссылка);
							Запрос.УстановитьПараметр("CRM_СостояниеИнтереса",ТекВзаимодействие.СостояниеИнтереса);
							Запрос.УстановитьПараметр("Исполнитель",ТекущийОбъект.Ответственный);
							Запрос.Текст = "ВЫБРАТЬ
							|	ЗадачаИсполнителя.Ссылка
							|ИЗ
							|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
							|ГДЕ
							|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
							|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса = &CRM_СостояниеИнтереса
							|	И ЗадачаИсполнителя.Исполнитель = &Исполнитель
							|	И НЕ ЗадачаИсполнителя.Выполнена";
							
							Выборка = Запрос.Выполнить().Выбрать();
							Если Выборка.Следующий() Тогда
								ТекущаяЗадача = Выборка.Ссылка;
								ТекущаяЗадачаПредставление = "Задача: "+ТекущаяЗадача.CRM_ТочкаМаршрута + ", срок: " + ТекущаяЗадача.ДатаНачала;
								СсылкаНаЗадачу = Выборка.Ссылка;
								ПолучитьТаблицуТипов();
							КонецЕсли;
						КонецЕсли;
					Иначе // Записываем результат выполнения взаимодействия в задачу
						ЗадачаОбъект = ТекВзаимодействие.Задача.ПолучитьОбъект();
						ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ИзмененноеВзаимодействие.ДатаЗавершенияВзаимодействия);
						
						ПоследнееДействиеСтрокой = ДатаСтрокой+" "+НСтр("ru = 'Завершено взаимодействие"""+ТекВзаимодействие.ВидВзаимодействия+""" -> '") + Строка(ИзмененноеВзаимодействие.Ответственный);
						
						Если ПоследнееДействиеСтрокой = ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой Тогда
							СтрокаДляЗамены = ПоследнееДействиеСтрокой + Символы.ПС + ТекВзаимодействие.Результат + Символы.ПС;
							ЗадачаОбъект.РезультатВыполнения = СтрЗаменить(ЗадачаОбъект.РезультатВыполнения,ПоследнееДействиеСтрокой + Символы.ПС,СтрокаДляЗамены);
						Иначе
							ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой = ПоследнееДействиеСтрокой;
							
							ЗадачаОбъект.РезультатВыполнения = ПоследнееДействиеСтрокой + Символы.ПС + ТекВзаимодействие.Результат + ?(ПустаяСтрока(ЗадачаОбъект.РезультатВыполнения),"",Символы.ПС) + "
							|"+ЗадачаОбъект.РезультатВыполнения;
						КонецЕсли;
						ЗадачаОбъект.Записать();
						СсылкаНаЗадачу = ЗадачаОбъект.Ссылка;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОбновленыДатыВзаимодействий = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СсылкаНаЗадачу = Задачи.ЗадачаИсполнителя.ПустаяСсылка() Тогда
		МассивСтрок = Взаимодействия.НайтиСтроки(Новый Структура("СостояниеИнтереса, СтатусВзаимодействия, АктивноеВзаимодействие",
																  СсылкаНаЗадачу.CRM_СостояниеИнтереса,
																  Справочники.CRM_СостоянияСобытий.Запланировано,
																  Ложь));
		Для Каждого СтрокаИзМассива ИЗ МассивСтрок Цикл
			Если НЕ СтрокаИзМассива.Ссылка = Документы.CRM_Взаимодействие.ПустаяСсылка() Тогда
				СтрокаИзМассива.Задача = СсылкаНаЗадачу;
				ИзмененноеВзаимодействие = СтрокаИзМассива.Ссылка.ПолучитьОбъект();
				ИзмененноеВзаимодействие.Задача = СсылкаНаЗадачу;
				ИзмененноеВзаимодействие.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СсылкаНаЗадачу = Задачи.ЗадачаИсполнителя.ПустаяСсылка() И ПроверитьНаличиеЗадач Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Интерес",ТекущийОбъект.Ссылка);
		Запрос.УстановитьПараметр("CRM_СостояниеИнтереса",ТекущийОбъект.СостояниеИнтереса);
		Запрос.УстановитьПараметр("Исполнитель",ТекущийОбъект.Ответственный);
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
		|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса = &CRM_СостояниеИнтереса
		|	И ЗадачаИсполнителя.Исполнитель = &Исполнитель
		|	И НЕ ЗадачаИсполнителя.Выполнена";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекущаяЗадача = Выборка.Ссылка;
			ТекущаяЗадачаПредставление = "Задача: "+ТекущаяЗадача.CRM_ТочкаМаршрута + ", срок: " + ТекущаяЗадача.ДатаНачала;
			СсылкаНаЗадачу = Выборка.Ссылка;
			ПолучитьТаблицуТипов();
		КонецЕсли;
	КонецЕсли;
	
	// Обрабатываем новые Взаимодействия
	Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
		Если ТекВзаимодействие.Изменено ИЛИ ОбновленПартнерКонтакт Тогда
			Если ТекВзаимодействие.Ссылка = Документы.CRM_Взаимодействие.ПустаяСсылка()
				ИЛИ ТекВзаимодействие.Ссылка.ПолучитьОбъект() = Неопределено Тогда
				НовоеВзаимодействие = Документы.CRM_Взаимодействие.СоздатьДокумент();
				Если ЗначениеЗаполнено(ТекВзаимодействие.Ссылка) Тогда
					НовоеВзаимодействие.УстановитьСсылкуНового(Документы.CRM_Взаимодействие.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекВзаимодействие.Ссылка.УникальныйИдентификатор())));
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НовоеВзаимодействие, ТекВзаимодействие);
				НовоеВзаимодействие.ДокументОснование		= ТекущийОбъект.Ссылка;
				Если Не ЗначениеЗаполнено(НовоеВзаимодействие.СтатусВзаимодействия) Тогда
					НовоеВзаимодействие.СтатусВзаимодействия	= Справочники.CRM_СостоянияСобытий.Запланировано;
				КонецЕсли;
				НовоеВзаимодействие.Партнер					= ТекущийОбъект.Партнер;
				НовоеВзаимодействие.КонтактноеЛицо			= ТекущийОбъект.КонтактноеЛицо;
				НовоеВзаимодействие.Подразделение			= ТекущийОбъект.Подразделение;
				НовоеВзаимодействие.Дата					= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
				НовоеВзаимодействие.Ответственный			= ТекущийОбъект.Ответственный;
				НовоеВзаимодействие.Организация				= ТекущийОбъект.Организация;
				НовоеВзаимодействие.ПотенциальныйКлиент		= ТекущийОбъект.ПотенциальныйКлиент;
				НовоеВзаимодействие.Задача					= СсылкаНаЗадачу;
				НовоеВзаимодействие.Записать();
				ТекВзаимодействие.Ссылка					= НовоеВзаимодействие.Ссылка;
				ТекВзаимодействие.Задача					= СсылкаНаЗадачу;
				ТекВзаимодействие.Изменено					= Ложь;
			КонецЕсли;
			ОбновленыДатыВзаимодействий = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Обновить первичное взаимодействие по интересу.
	ТекущееПервичное = Взаимодействия[Взаимодействия.Количество()-1].Ссылка;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	CRM_Взаимодействие.Ссылка
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|ГДЕ
	|	CRM_Взаимодействие.ДокументОснование = &Интерес
	|	И CRM_Взаимодействие.Первичное");
	Запрос.УстановитьПараметр("Интерес", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	//Если выборка пустая, то текущее и будет первичным
	Если Выборка.Количество() = 0 Тогда
		ОбъектНовое = ТекущееПервичное.ПолучитьОбъект();
		ОбъектНовое.Первичное = Истина;
		ОбъектНовое.Записать();
	Иначе
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка <> ТекущееПервичное Тогда
				ОбъектСтарое = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектСтарое.Первичное = Ложь;
				ОбъектСтарое.Записать();
				ОбъектНовое = ТекущееПервичное.ПолучитьОбъект();
				ОбъектНовое.Первичное = Истина;
				ОбъектНовое.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьВзаимодействияСервер()

&НаСервере
Процедура ОбновитьЗаписатьВзаимодействия()
	ЗаписатьВзаимодействияСервер(Объект.Ссылка);
КонецПроцедуры

&НаСервере
// Процедура заполняет дату и время взаимодействия, а так же вспомогательный реквизит СостояниеИнтересаПреддущее.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДатуИВремяСервер()
	Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
		ДатаИВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ТекВзаимодействие.ПлановаяДата);
		ТекВзаимодействие.ДатаНачала = ДатаИВремя.Дата;
		ТекВзаимодействие.ВремяС = ДатаИВремя.Время;
		ТекВзаимодействие.СостояниеИнтересаПредыдущее = ТекВзаимодействие.СостояниеИнтереса;
		ТекВзаимодействие.ЭтапПредыдущий = ТекВзаимодействие.Этап;
		Если ТекВзаимодействие.СтатусВзаимодействия <> ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
			ТекВзаимодействие.ЗапрещеноМенятьСостояние = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьДатуИВремяСервер()

&НаСервере
// Функция получает значение реквизита ПлановаяДата самого позднего взаимодействия.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
// Дата
Процедура ПолучитьДатуПоследнегоВзаимодействияСервер(СтатусВзаимодействия)
	Если Взаимодействия.Количество() = 0 Тогда
		// Если нет взаимодействий все равно выводить надпись.
		Элементы.НадписьДатаСледующегоДействия.ЦветТекста = Новый Цвет(46, 139, 87);
		Элементы.НадписьДатаСледующегоДействия.Заголовок = НСтр("ru='Нет запланированных действий'");
		Элементы.НадписьДатаСледующегоДействия.РастягиватьПоВертикали = Ложь;
	Иначе	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Таблица",				Взаимодействия.Выгрузить());
		Запрос.УстановитьПараметр("СтатусВзаимодействия",	СтатусВзаимодействия);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ
			|	Таблица.Содержание КАК Содержание,
			|	Таблица.ПлановаяДата КАК ПлановаяДата,
			|	Таблица.СтатусВзаимодействия КАК СтатусВзаимодействия,
			|	Таблица.Задача КАК Задача,
			|	Таблица.Ссылка
			|ПОМЕСТИТЬ ВремТаб
			|ИЗ
			|	&Таблица КАК Таблица
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВремТаб.Содержание,
			|	ВремТаб.ПлановаяДата КАК ПлановаяДата,
			|	ВремТаб.СтатусВзаимодействия,
			|	ВремТаб.Задача,
			|	ВремТаб.Ссылка
			|ИЗ
			|	ВремТаб КАК ВремТаб
			|ГДЕ
			|	ВремТаб.СтатусВзаимодействия = &СтатусВзаимодействия
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПлановаяДата";
		Выборка = Запрос.Выполнить().Выгрузить();
		// А дальше различается точкой вызова
		// для запланнированных - нам нужно поставить надпись на первой странице.
		Если СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Запланировано Тогда
			Если Выборка.Количество() = 0 Тогда
				Элементы.НадписьДатаСледующегоДействия.Заголовок = НСтр("ru='Нет запланированных действий'");
				Элементы.НадписьДатаСледующегоДействия.РастягиватьПоВертикали = Ложь;
			Иначе
				ДатаСВрем = Выборка[0].ПлановаяДата;
				Объект.ДатаСледующегоДействия = ДатаСВрем;
				Если НачалоДня(ДатаСВрем) < НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()) Тогда
					// красный - просрочено
					Элементы.НадписьДатаСледующегоДействия.ЦветТекста = Новый Цвет(255, 0, 0);
					СтатусДействия = "просрочено";
				Иначе
					// зеленый - не просрочено
					Элементы.НадписьДатаСледующегоДействия.ЦветТекста = Новый Цвет(46, 139, 87);
					СтатусДействия = "запланировано";
				КонецЕсли;
				Элементы.НадписьДатаСледующегоДействия.Заголовок = НСтр("ru='Следующее действие ('")+ СтатусДействия + "):" + Формат(ДатаСВрем,"ДФ=""dd.MM.yyyy Ч:мм""") + Символы.ПС + Выборка[0].Содержание;
				Элементы.НадписьДатаСледующегоДействия.РастягиватьПоВертикали = Истина;
			КонецЕсли;
		// Необходимо установить признак активного взаимодействия.
		ИначеЕсли СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено Тогда
			АктивнаяСтрока = Взаимодействия.НайтиСтроки(Новый Структура("АктивноеВзаимодействие", Истина));
			Для Каждого ТекСтрока Из АктивнаяСтрока Цикл
				ТекСтрока.АктивноеВзаимодействие = Ложь;
			КонецЦикла;
			Если Выборка.Количество() <> 0 Тогда
				НайденнаяСтрока = Взаимодействия.НайтиСтроки(Новый Структура("Ссылка", Выборка[Выборка.Количество() - 1].Ссылка));
				НайденнаяСтрока[0].АктивноеВзаимодействие = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Функция возвращает индекс картинки из коллекции CRM_КоллекцияВидыСобытий.
//
// Параметры:
// ВидВзаимодествия		- СправочникСсылка.CRM_ВидыВзаимодействий 
// 
// Возвращаемое значение:
// Число - индекс коллекции картинок CRM_КоллекцияВидыСобытий.
Функция УстановитьИконкуВидаСобытияСервер(ВидВзаимодествия)

	Если ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 1;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 2;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 3;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 4;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЭлектронноеПисьмо
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 5;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЭлектронноеПисьмо
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 6;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ПочтовоеПисьмо
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 7;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ПочтовоеПисьмо
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 8;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.Прочее
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 9;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.Прочее
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 10;
	КонецЕсли;

КонецФункции

&НаСервере
// Функция возвращает на клиент значения реквизитов из вида взаимодействия.
// 
// Параметры:
// ВидВзаимодествия		- СправочникСсылка.CRM_ВидыВзаимодействий 
// 
// Возвращаемое значение:
// Структура - значения реквизитов.
Функция ПолучитьРеквизитыВзаимодействияСервер(ВидВзаимодействия)
	СтруктураРезультата = Новый Структура;
	//СтруктураРезультата.Вставить("Баллы", ВидВзаимодействия.Баллы);
	СтруктураРезультата.Вставить("Баллы",ПолучитьБаллыДляВидаРабот(ВидВзаимодействия));
	СтруктураРезультата.Вставить("Описание", ВидВзаимодействия.Описание);
	СтруктураРезультата.Вставить("ВидСобытияКартинка", УстановитьИконкуВидаСобытияСервер(ВидВзаимодействия));
	Возврат СтруктураРезультата;
КонецФункции

&НаСервере
Функция ПолучитьБаллыДляВидаРабот(ВидВзаимодействия)
	ТзБаллы			= CRM_ОбщегоНазначенияСервер.ПолучитьТаблицуБаллов(Объект.Подразделение);	
	Поиск			= Новый Структура;
	Поиск.Вставить("ВидВзаимодействия", ВидВзаимодействия);
	НайденныеСтроки	= Неопределено;
	НайденныеСтроки	= ТзБаллы.НайтиСтроки(Поиск);
	Если НайденныеСтроки.Количество()>0 Тогда		
		Баллы = НайденныеСтроки[0].Балл;
	Иначе
		Баллы = ВидВзаимодействия.Баллы;
	КонецЕсли;	
	Возврат Баллы;
КонецФункции

&НаСервере
// Функция - возвращает на клиент значение флага Завершено для текущего состояния интереса.
//
// Параметры:
// нет
//
// Возвращаемое значение:
// Булево
Функция ЗапретитьДобавлениеНовогоВзаимодействия()
	Если Объект.СостояниеИнтереса.Завершено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
// Функция проверяет соответствует ли выбранное значение отбору.
//
Функция ПроверкаВыбора(ВыбранноеЗначение) 
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ВидыВзаимодействий") Тогда
		Результат = Истина;
		Если ВыбранноеЗначение.СостояниеИнтереса <> Объект.СостояниеИнтереса Тогда
			Результат = Ложь;
		КонецЕсли;
		Если ВыбранноеЗначение.Направление <> Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Результат = Ложь;
		КонецЕсли;
		Если ВыбранноеЗначение.ВидДела <> Справочники.CRM_ВидыДелВзаимодействий.Интерес Тогда
		Результат = Ложь;
		КонецЕсли;
		Возврат Результат;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
// Функция возвращает признак, завершено ли текущее взаимодействие.
//
// Параметры:
// ТекДанные - элементколлекции формы - строка табличной части.
//
// Возвращаемое значение:
// Истина - завершено
// Ложь - запланировано или отменено.
Функция ПроверитьСтатусВзаимодействия(ТекДанные)
	Если ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
// Процедура записывает в реквизит ПлановаяДата (состав Дата и Время) выбранные пользователемДатаНачала (состав Дата) и
// Время.
//
// Параметры:
// ТекДанные - элементколлекции формы - строка табличной части.
//
Процедура ЗаписатьДатуНачалаВзаимодействия(ТекДанные)
	ТекДанные.ПлановаяДата = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ТекДанные.ДатаНачала, ТекДанные.ВремяС);
КонецПроцедуры

&НаКлиенте
// Процедура отменяет запланированные взаимодействия, дата начала которых ранее переданного параметра.
//
// Параметры:
// ДатаНачалаВзаимодействия - Дата  - Дата завершенного взаимодействия.
Процедура ОтменитьБолееРанниеВзаимодействия(ДатаНачалаВзаимодействия)
	Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
		Если ЗначениеЗаполнено(ТекВзаимодействие.ПлановаяДата) И (ТекВзаимодействие.ПлановаяДата < ДатаНачалаВзаимодействия)
			И (ТекВзаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано")) Тогда
				ТекВзаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено");
				ТекВзаимодействие.Изменено = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
// Процедура отменяет запланированные взаимодействия, дата начала которых ранее переданного параметра.
//
// Параметры:
// ДатаНачалаВзаимодействия - Дата  - Дата завершенного взаимодействия.
Процедура ПоменятьСостояниеИнтересаБолееПознихВзаимодействий(ДатаНачалаВзаимодействия, СостояниеИнтересаВзаимодействия, Этап)
	
	Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
		Если (ТекВзаимодействие.ПлановаяДата > ДатаНачалаВзаимодействия)
			И НЕ ТекВзаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено")
			И НЕ ТекВзаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено") Тогда
				ТекВзаимодействие.СостояниеИнтереса = СостояниеИнтересаВзаимодействия;
				ТекВзаимодействие.Этап = Этап;
				ТекВзаимодействие.Изменено = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
// Функция возвращает признак можно ли записывать документ.
//
// Параметры:
// нет
//
// Возвращаемое значение
// Булево - Ложь - можно записать 
// Истина - нельзя.
Функция ПроверитьЗапланированныеВзаимодействия()
	Результат = Ложь;
	// Если у нас интерес закрыт или потерян, то даем записаться вне зависимости от состояний взаимодействий.
	Если ЗапретитьДобавлениеНовогоВзаимодействия() Тогда
		Возврат Результат;
	Иначе
		ЕстьЗапланированноеВзаимодействие = ПроверкаАктивныхВзаимодействий();
		Если ЕстьЗапланированноеВзаимодействие Тогда
			Результат = Ложь;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет запланированных взаимодействий по текущему интересу. Запись документа невозможна!'"));
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Результат Тогда
		Возврат Результат;
	Иначе
		Результат = ПроверитьЗаполнениеВзаимодействий();
		Возврат Результат;
	КонецЕсли;
КонецФункции

&НаКлиенте
// Функция возвращает признак можно ли записывать документ.
//
// Параметры:
// нет
//
// Возвращаемое значение
// Булево - Ложь - можно записать 
// Истина - нельзя.
Функция ПроверитьВзаимодействияОжидаемаяВыручка()
	Результат = Ложь;		
	Результат = ПроверитьЗаполнениеОжидаемойВыручки();
	Возврат Результат;	
КонецФункции // ПроверитьВзаимодействияОжидаемаяВыручка()

&НаКлиенте
// Функция проверяет, чтобы в таблице Взаимодействий ожидаемая выручка была заполнена там, где у состояния стоит
// признак обязательного её заполнения.
//
// Параметры:
// 	нет
//
// Возвращаемое значение:
//	Булево - Истина - есть пустые даты
//			 Ложь - нет пустых дат.
Функция ПроверитьЗаполнениеОжидаемойВыручки()
	НужныеСтроки = Взаимодействия.НайтиСтроки(Новый Структура("Изменено",Истина));
	Если НужныеСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Результат = Ложь;
		Для Каждого ТекСтрока Из НужныеСтроки Цикл
			УказыватьОжидаемуюВыручку = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекСтрока.СостояниеИнтереса, "УказаниеОжидаемойВыручки");
			Если УказыватьОжидаемуюВыручку И ТекСтрока.ОжидаемаяВыручка = 0 И ТекСтрока.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена ожидаемая выручка. Запись документа невозможна!'"), Объект.Ссылка,"Взаимодействия["+ Взаимодействия.Индекс(текСтрока) + "].ОжидаемаяВыручка",);
				Результат = Истина;
			КонецЕсли; 	
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
КонецФункции

&НаКлиенте
// Функция проверяет, чтобы в таблице Взаимодействий не было пустых дат.
//
// Параметры:
// 	нет
//
// Возвращаемое значение:
//	Булево - Истина - есть пустые даты
//			 Ложь - нет пустых дат.
Функция ПроверитьЗаполнениеВзаимодействий()
	НужныеСтроки = Взаимодействия.НайтиСтроки(Новый Структура("ДатаНачала",Дата("00010101")));
	Результат = Ложь;
	Если НужныеСтроки.Количество() = 0 Тогда
		// Нет пустых дат взаимодействий.
	Иначе
		Для Каждого ТекСтрока Из НужныеСтроки Цикл
			Если ТекСтрока.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена дата взаимодействия. Запись документа невозможна!'"), Объект.Ссылка,"Взаимодействия["+ Взаимодействия.Индекс(текСтрока) + "].ДатаНачала",);
				Результат = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	НужныеСтроки = Взаимодействия.НайтиСтроки(Новый Структура("ВидВзаимодействия", ПредопределенноеЗначение("Справочник.CRM_ВидыВзаимодействий.ПустаяСсылка")));
	Если НужныеСтроки.Количество() = 0 Тогда
		// Нет пустых видов взаимодействий.
	Иначе
		Для Каждого ТекСтрока Из НужныеСтроки Цикл
			Если ТекСтрока.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен вид взаимодействия. Запись документа невозможна!'"), Объект.Ссылка,"Взаимодействия["+ Взаимодействия.Индекс(текСтрока) + "].ВидВзаимодействия",);
				Результат = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	НужныеСтроки = Взаимодействия.НайтиСтроки(Новый Структура("Содержание", ""));
	Если НужныеСтроки.Количество() = 0 Тогда
		// Нет пустых видов взаимодействий.
	Иначе
		Для Каждого ТекСтрока Из НужныеСтроки Цикл
			Если ТекСтрока.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено содержание взаимодействия. Запись документа невозможна!'"), Объект.Ссылка,"Взаимодействия["+ Взаимодействия.Индекс(текСтрока) + "].Содержание",);
				Результат = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
// Функия проверяет есть ли запланнированные взаимодействия с учетом глубины планирвоания для подразделения текущего
// пользователя.
//
// Параметры:
// нет
// 
// Возвращаемое значение:
// Булево
Функция ПроверкаАктивныхВзаимодействий()
	НайденныеСтроки = Взаимодействия.НайтиСтроки(Новый Структура("СтатусВзаимодействия", ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано")));
	Для Каждого ТекВзаимодействие Из НайденныеСтроки Цикл
		Результат = CRM_ВзаимодействияСервер.ПроверитьВозможностьПланирования(ТекВзаимодействие.ПлановаяДата, ТекВзаимодействие.Автор,
			?(ЗначениеЗаполнено(Объект.ПотенциальныйКлиент), Объект.ПотенциальныйКлиент, Объект.Партнер), Объект.ТипУслуги); 
		Если Результат.МожноПланировать = Истина Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область СозданиеВзаимодействияИзТелемаркетинга

&НаКлиенте
Процедура СоздатьВзаимодействие(Содержание, ВидВзаимодействия)
	
	НоваяСтрока							= Взаимодействия.Вставить(0);
	НоваяСтрока.Автор					= ТекущийПользователь;
	НоваяСтрока.СостояниеИнтереса		= Объект.СостояниеИнтереса;
	НоваяСтрока.ОжидаемаяВыручка  		= Объект.ОжидаемаяВыручка;
	НоваяСтрока.СтатусВзаимодействия 	= ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано");
	НоваяСтрока.КонтактноеЛицо 			= Объект.КонтактноеЛицо;
	НоваяСтрока.Содержание 				= Содержание;	
	НоваяСтрока.ВидВзаимодействия 		= ВидВзаимодействия;
	СтруктураНеобходимыхДанных 			= ПолучитьРеквизитыВзаимодействияСервер(ВидВзаимодействия);	
	НоваяСтрока.Баллы  					= СтруктураНеобходимыхДанных.Баллы;
	НоваяСтрока.ВидСобытияКартинка  	= СтруктураНеобходимыхДанных.ВидСобытияКартинка;	
	НоваяСтрока.ДатаНачала 				= ТекущаяДата();
	НоваяСтрока.ВремяС	 				= ТекущаяДата();	
	ЗаписатьДатуНачалаВзаимодействия(НоваяСтрока);	
	НоваяСтрока.Изменено				= Истина;
	Модифицированность 					= Истина;
		
КонецПроцедуры	
	
#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
// Процедура - обработка выбора причины отказа пользователем.
//
// Параметры:
// Параметры - результат выбора пользователя
// дополнительно - текущая строка взаимодействий.
Процедура ВыборПричиныОтказа(Параметры, Дополнительно) Экспорт
	Если Параметры = Неопределено Тогда 
		
		Дополнительно.ТекДанные.СостояниеИнтереса	= Дополнительно.ТекДанные.СостояниеИнтересаПредыдущее;
		Дополнительно.ТекДанные.Этап				= Дополнительно.ТекДанные.ЭтапПредыдущий;
	Иначе
		
		Объект.ПричинаОтказа = Параметры;
	
		Дополнительно.Вставить("ПричинаОтказа", Параметры);
		
		Если Дополнительно.КоличествоАктивныхВзаимодействий > 0 Тогда
			ОповещениеОбработкиАктивныхВзаимодействий = Новый ОписаниеОповещения("ОбработкаЗакрытияАктивныхВзаимодействий", ЭтотОбъект, Дополнительно);
			ТекстВопроса = "Завершить все активные взаимодействия по данному интересу?";
			ПоказатьВопрос(ОповещениеОбработкиАктивныхВзаимодействий, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ОбработкаЗакрытияАктивныхВзаимодействий(КодВозвратаДиалога.Да, Дополнительно);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработка выбора Вида взаимодействия при добавлении строки.
//
Процедура ВыборВидаВзаимодействия(Парамеры, ДополнительныеПараметры) Экспорт
	Если Парамеры <> Неопределено Тогда
		Дополнительно = ДополнительныеПараметры.НоваяСтрока;
		Дополнительно.ВидВзаимодействия = Парамеры;
		СтруктураНеобходимыхДанных = ПолучитьРеквизитыВзаимодействияСервер(Парамеры);
		
		Дополнительно.Баллы = СтруктураНеобходимыхДанных.Баллы;
		Дополнительно.ВидСобытияКартинка = СтруктураНеобходимыхДанных.ВидСобытияКартинка;
		Если ДополнительныеПараметры.ЗаполнятьСодержаниеИДату Тогда
			Дополнительно.Содержание = СодержаниеВзаимодействия;
			Дополнительно.ДатаНачала = ТекущаяДата();
			Дополнительно.ВремяС	 = ТекущаяДата();
		Иначе			
			Дополнительно.Содержание = СтруктураНеобходимыхДанных.Описание;
		КонецЕсли;			
		Дополнительно.Изменено = Истина;
		
		ЗаписатьДатуНачалаВзаимодействия(Дополнительно);
		Элементы.Взаимодействия.ТекущийЭлемент = Элементы.ВзаимодействияСодержание;
		Элементы.Взаимодействия.ТекущийЭлемент = Элементы.ВзаимодействияКонтактноеЛицо;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура обработки ответа на вопрос - отменить все запланированные взаимодействия.
//
// Параметры:
// Параметры - КодВозвратаДиалога
// дополнительно - неопределно, не передаем.
Процедура ОбработкаЗакрытияАктивныхВзаимодействий(Параметры, Дополнительно) Экспорт

	Если Параметры = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
			Если ТекВзаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") ИЛИ 
				 ТекВзаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.ВРаботе") Тогда
				// отменим взаимодействия
				ТекВзаимодействие.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено");
				ТекВзаимодействие.ДатаЗавершенияВзаимодействия = ТекущаяДата();
				ТекВзаимодействие.ЗавершившийПользователь = ТекущийПользователь;
				ТекВзаимодействие.Изменено = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекВзаимодействие.ДатаЗавершенияВзаимодействия) Тогда
				ТекВзаимодействие.ДатаЗавершенияВзаимодействия = ТекущаяДата();
				ТекВзаимодействие.ЗавершившийПользователь = ТекущийПользователь;
				ТекВзаимодействие.Изменено = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекВзаимодействие.Результат) Тогда
				ТекВзаимодействие.Результат = "Интерес закрыт";
				ТекВзаимодействие.Изменено = Истина;
			КонецЕсли;
		КонецЦикла;
		ПеревестиИнтересВСледующееСостояниеСервер(Дополнительно.ТекДанные.СостояниеИнтереса);
	Иначе
		Если Дополнительно.Свойство("ПричинаОтказа") Тогда
			Объект.ПричинаОтказа = ПредопределенноеЗначение("Справочник.CRM_ПричиныОтказаПоИнтересам.ПустаяСсылка");
		КонецЕсли;
		Дополнительно.ТекДанные.СостояниеИнтереса	= Дополнительно.ТекДанные.СостояниеИнтересаПредыдущее;
		Дополнительно.ТекДанные.Этап				= Дополнительно.ТекДанные.ЭтапПредыдущий;
	КонецЕсли;
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
// Процедура обработки ответа на вопрос пользователя Отменить / Запланировать взаимодействие по нажатию del.
//
// Параметры:
// Параметры - КодВозвратаДиалога
// дополнительно - строка ТЧ, для которой обрабатываем нажатие.
Процедура ОбработкаОтменыВзаимодействия(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		Если Не ЗначениеЗаполнено(Дополнительно.Ссылка) Тогда
			Взаимодействия.Удалить(Дополнительно);		
			Возврат;
		КонецЕсли; 
		Если НЕ Дополнительно.ПервоначальнаяОтмена И Дополнительно.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
			Дополнительно.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено");
			Дополнительно.ПервоначальнаяОтмена = Истина;

		Иначе
			Дополнительно.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано");
			Дополнительно.ПервоначальнаяОтмена = Ложь;
		КонецЕсли;
		Дополнительно.Изменено = Истина;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура обработки выбора времени из списка.
//
Процедура ОбработкаОповещенияВыбранногоВремени(Параметры, Дополнительно) Экспорт
	Если Параметры <> Неопределено Тогда
		Дополнительно.ТекДанные.ВремяС = Параметры.Значение;
		ВзаимодействияВремяСПриИзменении(Дополнительно.Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик выбора партнера - владельца.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Владелец контактных лиц.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПартнераИсточника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	ПараметрыФормы	= Новый Структура("Отбор", Новый Структура("Владелец", РезультатЗакрытия));
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, ДополнительныеПараметры.Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // ОбработкаВыбораПартнераИсточника()

&НаКлиенте
Процедура ОбработкаВыбораСостоянияИнтереса(Параметры, Дополнительно) Экспорт
	Если Параметры <> Неопределено Тогда
		Если ТипЗнч(Параметры.Значение) = Тип("Структура") Тогда
			Дополнительно.ТекДанные.СостояниеИнтереса	= Параметры.Значение.Состояние;
			Дополнительно.ТекДанные.Этап				= Параметры.Значение.Этап;
			Дополнительно.ТекДанные.ВариантВыполнения	= Параметры.Значение.ВариантВыполнения;
			Дополнительно.ТекДанные.ЭтоПереход			= Параметры.Значение.ЭтоПереход;
		Иначе
			Дополнительно.ТекДанные.СостояниеИнтереса	= Параметры.Значение;
			Дополнительно.ТекДанные.Этап				= ПредопределенноеЗначение("Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка");
			Дополнительно.ТекДанные.ВариантВыполнения	= 0;
			Дополнительно.ТекДанные.ЭтоПереход			= Ложь;
		КонецЕсли;
		ВзаимодействияСостояниеИнтересаПриИзменении(Дополнительно.Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияУдаленияЭлементаСписка(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		ПометитьСнятьПометкуУдаленияНаСервере(Дополнительно.ТекДанныеОбъект, Дополнительно.ТекДанныеПометкаУдаления);
		ОбновитьСписок();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодменю(Параметры, Дополнительно) Экспорт

	Если Параметры <> Неопределено Тогда
		СтруктураПараметров = Новый Структура("Основание", Элементы.Список.ТекущиеДанные.Объект);
		
		Если Найти(Параметры.Значение, "ТелефонныйЗвонок") > 0 Тогда
			// Если это телефонный звонок, то пробуем звонить сразу.
			Позвонить(Неопределено);
		Иначе
			Попытка
				Форма = ПолучитьФорму(Параметры.Значение + ".ФормаОбъекта", СтруктураПараметров, Элементы.Список);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			
			Если Форма <> Неопределено Тогда
				Форма.Открыть();
				//Иначе
				//	СообщениеОтказПриПолученииФормы();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОткрытияФормыНастроек(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("ОбщаяФорма.sms4bФормаНастроек");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура обработки ответа на вопрос.
//
// Параметры:
// Параметры - КодВозвратаДиалога
// дополнительно - неопределно, не передаем.
Процедура ОповещениеОбработкаВопроса(Параметры, Дополнительно) Экспорт
	
	Если Параметры = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			
			ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
			
			ДанныеВзаимодействия = Новый Структура;
			ДанныеВзаимодействия.Вставить("Тема", Дополнительно.Содержание);
			ДанныеВзаимодействия.Вставить("Автор", Дополнительно.Автор);
			ДанныеВзаимодействия.Вставить("Дата", Дополнительно.ПлановаяДата);
			ДанныеВзаимодействия.Вставить("Партнер", Дополнительно.Партнер);
			ДанныеВзаимодействия.Вставить("КонтактноеЛицо", Дополнительно.КонтактноеЛицо);
				
			ПараметрыФормы.Вставить("ДанныеВзаимодействия", ДанныеВзаимодействия);
			
			ОткрытьФорму("Документ.CRM_Мероприятие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияИнтереса(Параметры, Дополнительно) Экспорт
	Если Параметры <> Неопределено Тогда
		ПеревеситьИнтересНаСервере(Дополнительно.ТекДанные.Ссылка, Параметры);
		ЭтотОбъект.Взаимодействия.Удалить(ЭтотОбъект.Взаимодействия.Индекс(Дополнительно.ТекДанные));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТегов

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Тег".
//
Процедура ТегПриИзменении(Элемент)
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Создание" элемента формы "Тег".
//
Процедура ТегСоздание(Элемент, СтандартнаяОбработка)
	CRM_ТегиКлиент.ТегСоздание(Элемент, СтандартнаяОбработка, ТекущееПодразделение);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаНавигационнойСсылки" элемента формы "Тег".
&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура Подключаемый_ОбновитьОблакоТегов()
	
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьСтатусыДокумента()
	// Группа состояния
	СтатусВзаимодействие = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка,
	|	ЗадачаИсполнителя.Выполнена,
	|	ЗадачаИсполнителя.СрокИсполнения
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|	И ЗадачаИсполнителя.БизнесПроцесс.Предмет = &Ссылка
	|И ВЫБОР
	|		КОГДА НЕ ЗадачаИсполнителя.CRM_СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка) И ЗадачаИсполнителя.Исполнитель = &Ответственный
	|			ТОГДА НЕ ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Ссылка
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	//|	И НЕ ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Ссылка
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	Запрос.УстановитьПараметр("Ответственный", Объект.Ответственный);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 1 Тогда
		Если РезультатЗапроса[0].СрокИсполнения < НачалоДня(ТекущаяДатаСеанса()) Тогда
			СтатусВзаимодействие = 1;
			КоличествоПросроченных = 1;
		ИначеЕсли РезультатЗапроса[0].СрокИсполнения >= НачалоДня(ТекущаяДатаСеанса()) Тогда
			СтатусВзаимодействие = 2;
			КоличествоПросроченных = 0;
		КонецЕсли;
	ИначеЕсли РезультатЗапроса.Количество() > 1 Тогда
		КоличествоПросроченных = 0;
		Для Каждого СтрокаТЗ Из РезультатЗапроса Цикл
			Если СтрокаТЗ.СрокИсполнения < НачалоДня(ТекущаяДатаСеанса()) Тогда
				КоличествоПросроченных = КоличествоПросроченных + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоПросроченных = 1 Тогда
			СтатусВзаимодействие = 3;
		ИначеЕсли КоличествоПросроченных = 0 Тогда
			СтатусВзаимодействие = 4;
		Иначе
			СтатусВзаимодействие = 5
		КонецЕсли;
	КонецЕсли;
	
	Если НаКонтроле.Количество() = 0 Тогда
		СтатусКонтроля = 5;
	Иначе
		СтатусКонтроля = 1;		
	КонецЕсли;
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		Элементы.КартинкаВзаимодействие.Подсказка = "Нет запланированных задач";
	ИначеЕсли КоличествоПросроченных = 1 Тогда
		Элементы.КартинкаВзаимодействие.Подсказка = "Есть одна просроченная задача";
	ИначеЕсли КоличествоПросроченных = 0 Тогда
		Элементы.КартинкаВзаимодействие.Подсказка = "Нет просроченных задач";
	ИначеЕсли КоличествоПросроченных > 1 Тогда
		Элементы.КартинкаВзаимодействие.Подсказка = "Есть несколько просроченных задач";
	КонецЕсли;
	
	Если НаКонтроле.Количество() = 0 Тогда
		Элементы.КартинкаКонтроль.Подсказка = "Не взято на контроль";
	ИначеЕсли НаКонтроле.Количество() = 1 Тогда	
		Элементы.КартинкаКонтроль.Подсказка = "Взято на контроль "+НаКонтроле[0].Пользователь;
	Иначе
		Элементы.КартинкаКонтроль.Подсказка = "Взято на контроль несколькими пользователями";
	КонецЕсли;	
КонецПроцедуры

&НаСервере
// Процедура выполняет чтение сохраненных значений первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	// Определяем канал и источник первичного интереса.
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
		 	Интерес = Неопределено;
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, Объект.Ссылка, Объект.Партнер);
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(Интерес) И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, Объект.Ссылка, Объект.ПотенциальныйКлиент);
			КонецЕсли;	
			Если ЗначениеЗаполнено(Интерес) Тогда
				//Если ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
					КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
					ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
				//КонецЕсли;
			КонецЕсли;	
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса);
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры // НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()

&НаСервере
// Процедура удаляет из массива проверяемых реквизитов реквизит с указанным именем.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//	ИмяРеквизита			- Строка	- Имя удаляемого реквизита.
//
Процедура УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, ИмяРеквизита)
	Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если НЕ (Индекс = Неопределено) Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры // УдалитьИзПроверяемыхРеквизитов()

&НаСервере
// Процедура убирает лишние реквизиты из массива реквизитов для проверки на заполнение.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//
Процедура ПроверкаЗаполнения(ПроверяемыеРеквизиты)
	Если ЗаполнятьПервичныйИнтерес Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.Партнер), Истина, Ложь);
		Иначе
			НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.ПотенциальныйКлиент), Истина, Ложь);
		КонецЕсли;	
		Если НаличиеУчастников Тогда
			Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
				Если ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
					УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
				КонецЕсли;
			КонецЕсли;
		Иначе
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
		КонецЕсли;
	Иначе	
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
	Попытка
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Исключение
		ПредыдущийИсточник	= Неопределено;
	КонецПопытки;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
КонецПроцедуры // ПроверяемыеРеквизиты()

&НаСервере
// Процедура присваивает Интересу следующее состояние и 
// заполняет сопутствующие реквизиты.
//
// Параметры:
// 	СостояниеИнтереса - СправочникСсылка.CRM_СостоянияИнтересов
// 
// Возвращаемое значение:
// 	Нет
Процедура ПеревестиИнтересВСледующееСостояниеСервер(СостояниеИнтереса)
	Объект.СостояниеИнтереса	 = СостояниеИнтереса;
	Объект.ВероятностьСделки	 = СостояниеИнтереса.ВероятностьСделки;
	Объект.Завершен				 = СостояниеИнтереса.Завершено;
КонецПроцедуры

&НаСервере
// Процедура устанавливает видимость реквизитов на форме.
//
// Параметры:
//	Нет.
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ПричинаОтказа.Видимость = ЗначениеЗаполнено(Объект.ПричинаОтказа);
	
КонецПроцедуры

&НаСервере
// Функция формирует список рабочих часов с учетом настроек пользователя от начала рабочего дня 
// до окончания с интервалом в полчаса.
//
// Параметры:
// 	Время - Дата
//
// Возвращаемое значение:
//	СписокЧасов - СписокЗначений
Функция ВыбратьВремяИзСписка(Знач СтароеЗначениеВСписке)

	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСписокРабочегоВремениПользователя(ТекущийПользователь);
	
КонецФункции

&НаСервере
// Процедура выводит на заголовок формы информацию о клиенте и контактном лице.
//
// Параметры:
//	нет
Процедура ОбновитьЗаголовокФормы()
	ТекПартнер = Объект.Партнер;
	ТекКонтакт = Объект.КонтактноеЛицо;
	ИмяКлиента = ?(ЗначениеЗаполнено(ТекПартнер), ТекПартнер.Наименование, Объект.ПотенциальныйКлиент.Наименование);
	ИмяКонтакта = ?(ЗначениеЗаполнено(ТекКонтакт), " (" + ТекКонтакт.Наименование + ")", "");
	ЭтотОбъект.Заголовок = НСтр("ru='Интерес клиента '") + ИмяКлиента + ИмяКонтакта + ": " + Объект.Тема;
КонецПроцедуры

&НаСервере
// Функция получает список состояний из справочника CRM_СостоянияИнтересов.
//
// Параметры:
//	нет
//
// Возвращаемое значение:
//	СписокСостояний - СписокЗначений
Функция ПолучитьСписокСостоянийСервер(Задача)
	
	СписокСостояний = Новый СписокЗначений;
	Если Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Задача) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_СостоянияИнтересов.Ссылка,
		|	CRM_СостоянияИнтересов.ВероятностьСделки КАК ВероятностьСделки,
		|	CRM_СостоянияИнтересов.Наименование
		|ИЗ
		|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
		|ГДЕ
		|	CRM_СостоянияИнтересов.ПометкаУдаления = ЛОЖЬ
		| 	И CRM_СостоянияИнтересов.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Интерес)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВероятностьСделки";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокСостояний.Добавить(Выборка.Ссылка, Выборка.Наименование + " (" + Выборка.ВероятностьСделки + "%)")
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(Задача) Тогда
		
		РазрешеноПеремещатьЭтап			= Задача.БизнесПроцесс.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап;
		РазрешеноДосрочноеЗавершение	= Задача.БизнесПроцесс.КартаМаршрута.РазрешеноДосрочноеЗавершение;
		
		НеФормируемЗадачи = Ложь;
		НеПройденоРазделение = Ложь;
		
		CRM_БизнесПроцессыСервер.ПроверитьВыполнениеГрупповойПереадресованнойЗадачи(Задача, НеФормируемЗадачи);
		
		СоответствиеЭтаповВариантам = Новый Соответствие;
		
		СписокЭтапов = Новый СписокЗначений;
		МассивЭтапов = Новый Массив;
		МассивЭтапов.Добавить(Задача.CRM_ТочкаМаршрута);
		
		МассивТочекЗавершения = Новый Массив;
		
		Если НЕ НеФормируемЗадачи ИЛИ РазрешеноПеремещатьЭтап Тогда
			
			СтруктураВариантовВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(Задача);
			
			Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 Тогда
				ВариантВыполнения = 0;
				МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута,,,ВариантВыполнения);
				
				Если МассивИсходящихТочек.Количество() = 1 И МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
					Если CRM_БизнесПроцессыСервер.ПроверитьТочкиПередСозданиемЗадач(МассивИсходящихТочек, Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута, Истина) Тогда
						МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, МассивИсходящихТочек[0].ИсходящаяТочка,,,ВариантВыполнения);
					Иначе
						НеПройденоРазделение = Истина;
						МассивИсходящихТочек.Очистить();
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого СтруктураИсхточки ИЗ МассивИсходящихТочек Цикл
					СоответствиеЭтаповВариантам.Вставить(СтруктураИсхточки.ИсходящаяТочка,ВариантВыполнения);
					МассивЭтапов.Добавить(СтруктураИсхточки.ИсходящаяТочка);
					Если СтруктураИсхточки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
						МассивТочекЗавершения.Добавить(СтруктураИсхточки.ИсходящаяТочка);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для Каждого ЭлементСписка ИЗ СтруктураВариантовВыполнения.СписокВариантов Цикл
					ВариантВыполнения = ЭлементСписка.Значение;
					МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута,,,ВариантВыполнения);
					
					Если МассивИсходящихТочек.Количество() = 1 И МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
						Если CRM_БизнесПроцессыСервер.ПроверитьТочкиПередСозданиемЗадач(МассивИсходящихТочек, Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута, Истина) Тогда
							МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, МассивИсходящихТочек[0].ИсходящаяТочка,,,ВариантВыполнения);
						Иначе
							НеПройденоРазделение = Истина;
							МассивИсходящихТочек.Очистить();
						КонецЕсли;
					КонецЕсли;
					
					Для Каждого СтруктураИсхточки ИЗ МассивИсходящихТочек Цикл
						СоответствиеЭтаповВариантам.Вставить(СтруктураИсхточки.ИсходящаяТочка,ВариантВыполнения);
						МассивЭтапов.Добавить(СтруктураИсхточки.ИсходящаяТочка);
						Если СтруктураИсхточки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
							МассивТочекЗавершения.Добавить(СтруктураИсхточки.ИсходящаяТочка);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		СписокЭтапов.ЗагрузитьЗначения(МассивЭтапов);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Интерес",Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивЭтапов",МассивЭтапов);
		ТекстЗапроса = "ВЫБРАТЬ
		|	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута КАК Этап,
		|	ЕСТЬNULL(CRM_НастройкиЭтаповБизнесПроцессов.Состояние, ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)) КАК Состояние
		|ПОМЕСТИТЬ НастройкиЭтапов
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
		|		ПО CRM_БизнесПроцесс.Ссылка = CRM_НастройкиЭтаповБизнесПроцессов.Объект
		|ГДЕ
		|	CRM_БизнесПроцесс.Интерес = &Интерес
		|	И НЕ CRM_БизнесПроцесс.ПометкаУдаления";
		Если НЕ РазрешеноПеремещатьЭтап Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута В(&МассивЭтапов)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CRM_СостоянияИнтересов.Ссылка,
		|	CRM_СостоянияИнтересов.ВероятностьСделки КАК ВероятностьСделки,
		|	CRM_СостоянияИнтересов.Наименование,
		|	ЕСТЬNULL(НастройкиЭтапов.Этап, ЗНАЧЕНИЕ(Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка)) КАК Этап
		|ИЗ
		|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
		|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиЭтапов КАК НастройкиЭтапов
		|		ПО CRM_СостоянияИнтересов.Ссылка = НастройкиЭтапов.Состояние
		|ГДЕ
		|	CRM_СостоянияИнтересов.ПометкаУдаления = ЛОЖЬ
		|	И CRM_СостоянияИнтересов.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Интерес)
		|	И НЕ НастройкиЭтапов.Этап ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВероятностьСделки";
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		СписокСостоянийТочки = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Этап) Тогда
				СписокСостоянийТочки.Добавить(Выборка.Этап);
				Если СписокЭтапов.НайтиПоЗначению(Выборка.Этап) = Неопределено Тогда
					ВариантВыполнения=Неопределено;
					СтруктураСостояния = Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Выборка.Ссылка,Выборка.Этап, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения),Истина);
					СписокСостояний.Добавить(СтруктураСостояния, Выборка.Наименование + " (" + Выборка.ВероятностьСделки + "%), "+ Выборка.Этап);
				Иначе
					ВариантВыполнения = СоответствиеЭтаповВариантам.Получить(Выборка.Этап);
					СтруктураСостояния = Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Выборка.Ссылка,Выборка.Этап, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения),(НеФормируемЗадачи И РазрешеноПеремещатьЭтап));
					СписокСостояний.Добавить(СтруктураСостояния, Выборка.Наименование + " (" + Выборка.ВероятностьСделки + "%), "+ Выборка.Этап);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЕстьНеудачныйВариант = Ложь;
		Для Каждого ТочкаЗавершения ИЗ МассивТочекЗавершения Цикл
			Если СписокСостоянийТочки.НайтиПоЗначению(ТочкаЗавершения)<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СписокСостоянийТочки.Добавить(ТочкаЗавершения);
			ВариантВыполнения	= СоответствиеЭтаповВариантам.Получить(ТочкаЗавершения);
			Состояние			= ?(ТочкаЗавершения.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно,
			Справочники.CRM_СостоянияИнтересов.ИнтересПотерян,
			Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт);
			СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние,ТочкаЗавершения, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения), (НеФормируемЗадачи И РазрешеноПеремещатьЭтап));
			СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%), "+ ТочкаЗавершения);
			Если НЕ ЕстьНеудачныйВариант Тогда
				ЕстьНеудачныйВариант = (ТочкаЗавершения.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
			КонецЕсли;
		КонецЦикла;
		
		Если РазрешеноПеремещатьЭтап Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Владелец",Задача.БизнесПроцесс.КартаМаршрута);
			Запрос.УстановитьПараметр("НомерВерсии",Задача.БизнесПроцесс.НомерВерсииКартыМаршрута);
			Запрос.УстановитьПараметр("МассивЭтапов",МассивТочекЗавершения);
			ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута
			|ИЗ
			|	Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
			|ГДЕ
			|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец
			|	И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии";
			Если МассивТочекЗавершения.Количество() > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И НЕ CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута В(&МассивЭтапов)";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|	И CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Завершение)";
			Запрос.Текст = ТекстЗапроса;
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если СписокСостоянийТочки.НайтиПоЗначению(Выборка.ТочкаМаршрута)<>Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ВариантВыполнения	=Неопределено;
				Состояние			= ?(Выборка.ТочкаМаршрута.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно,
				Справочники.CRM_СостоянияИнтересов.ИнтересПотерян,
				Справочники.CRM_СостоянияИнтересов.ИнтересЗакрыт);
				СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние,Выборка.ТочкаМаршрута, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения), Истина);
				СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%), "+ Выборка.ТочкаМаршрута);
				Если НЕ ЕстьНеудачныйВариант Тогда
					ЕстьНеудачныйВариант = (Выборка.ТочкаМаршрута.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЕстьНеудачныйВариант И РазрешеноДосрочноеЗавершение Тогда
			ВариантВыполнения	=Неопределено;
			Состояние			= Справочники.CRM_СостоянияИнтересов.ИнтересПотерян;
			СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние, Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка(), ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения), Истина);
			СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%), Досрочное завершение");
		КонецЕсли;
		Если (НеФормируемЗадачи ИЛИ НеПройденоРазделение) И НЕ РазрешеноПеремещатьЭтап Тогда
			СписокСостояний.Очистить();
			ПоедставлениеОшибки = НСтр("ru = 'Не все задачи выполнены. Смена состояния невозможна.'");
			СписокСостояний.Добавить("Ошибка",ПоедставлениеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	
	
	
	Возврат СписокСостояний;
	
КонецФункции

&НаСервере
Функция ПолучитьСвойстваДинамическогоСпискаСервер()
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСвойстваДинамическогоСписка(ЭтотОбъект, "Список",
		"Обработка.CRM_УниверсальныйЖурналДокументов", Неопределено, Неопределено, Неопределено, Неопределено,
		"ВидСпискаИдентификаторТекущейНастройки", "Подключаемый_КомандаВидСписка");
КонецФункции

&НаСервере
// Процедура установки (снятия) пометки удаления объекта в списке.
//
Процедура ПометитьСнятьПометкуУдаленияНаСервере(ОбъектСсылка, Пометить)
	ОбъектПоСсылке = ОбъектСсылка.ПолучитьОбъект();
	ОбъектПоСсылке.УстановитьПометкуУдаления(Пометить);
КонецПроцедуры

&НаСервере
Процедура ПеревеситьИнтересНаСервере(Взаимодействие, Интерес);
	ВзаимодействиеОбъект = Взаимодействие.ПолучитьОбъект();
	ВзаимодействиеОбъект.ДокументОснование = Интерес;
	ВзаимодействиеОбъект.Записать();
КонецПроцедуры

&НаСервере
// Функция формирует список объектов, которые могут быть введены на основании текущего объекта.
//
// Параметры:
//	тип объекта - Ссылка на текущий объект списка
//
// Возвращаемое значение:
//	СписокОбъектов - СписокЗначений
Функция СформироватьСписокВводаНаОсновании(ТипОбъекта)

	НужныйОбъект = ТипОбъекта.Метаданные();

	СписокОбъектов = Новый СписокЗначений;

	МассивВидов = Новый Массив();
	МассивВидов.Добавить("Справочники");
	МассивВидов.Добавить("Документы");
	МассивВидов.Добавить("ПланыВидовХарактеристик");
	МассивВидов.Добавить("ПланыСчетов");
	МассивВидов.Добавить("ПланыВидовРасчета");
	МассивВидов.Добавить("БизнесПроцессы");
	МассивВидов.Добавить("Задачи");
	МассивВидов.Добавить("ПланыОбмена");

	Для Каждого МетаданныеВид Из МассивВидов Цикл
		Для Каждого МетаданныеОбъект Из Метаданные[МетаданныеВид] Цикл
			Если МетаданныеОбъект.ВводитсяНаОсновании.Содержит(НужныйОбъект) Тогда
				СписокОбъектов.Добавить(МетаданныеОбъект.ПолноеИмя(), МетаданныеОбъект.Синоним);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	СписокОбъектов.СортироватьПоПредставлению();
	Возврат СписокОбъектов;

КонецФункции

&НаСервере
// Процедура перезаписывает ссылки в документах ЭлектронноеПисьмоВходящее и ЭлектронноеПисьмоИсходящее
// с потенциального клиента на партнера.
//
// Параметры:
//	ПотенциальныйКлиент - СправочникСсылка.CRM_ПотенциальныеКлиенты
//	Партнер				- СправочникСсылка.Партнеры
Процедура ПеревеситьДокументыНаПартнера(ПотенциальныйКлиент, Партнер);
	CRM_ОбщегоНазначенияСервер.ПереопределитьПисьмаСПотенциальногоКлиентаНаПартнера(ПотенциальныйКлиент, Партнер);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТелефон(Контакт)
	
	// Заполним список выбора
	СписокВозврата = Новый СписокЗначений;
	МассивТелефонов = ОтправкаSMSЧерезSMS4B.ПолучитьМассивТелефоновИФаксов(Контакт);
	Для Каждого Телефон Из МассивТелефонов Цикл
		НомерТелефона = ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Телефон.Представление);
		Если СтрДлина(НомерТелефона) > 9 Тогда
			Если Найти(Прав(НомерТелефона, 10), "9") = 1 Тогда
				СписокВозврата.Вставить(0, Телефон.Представление, СокрЛП(Телефон.Представление) + " (" + Телефон.Вид + ")");
			Иначе	
				СписокВозврата.Добавить(Телефон.Представление, СокрЛП(Телефон.Представление) + " (" + Телефон.Вид + ")");
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Возврат СписокВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляОткрытияФормыОбъектаПоСсылкеНаОбъект(ОбъектСсылка)
	Результат = Новый Структура("ПолноеИмяМетаданных");
	
	Результат.ПолноеИмяМетаданных = ОбъектСсылка.Метаданные().ПолноеИмя();
	
	Возврат Результат;
КонецФункции

&НаКлиенте
// Процедура открвает форму документа из списка документов.
//
// Параметры:
//	нет
Процедура ОткрытьФормуТекущегоОбъекта()
	СтандартнаяОбработка = Ложь;
	Если Элементы.Список.ТекущиеДанные <> Неопределено  Тогда
		Попытка		СсылкаНаТекущийОбъект = Элементы.Список.ТекущиеДанные.Объект;
		Исключение	СсылкаНаТекущийОбъект = Неопределено;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(СсылкаНаТекущийОбъект) Тогда Возврат; КонецЕсли;
		
		Если ТипЗнч(СписокОткрытыхФорм) <> Тип("СписокЗначений") Тогда
			СписокОткрытыхФорм = Новый СписокЗначений();
		КонецЕсли;
		
		ДанныеДляОткрытия = ПолучитьДанныеДляОткрытияФормыОбъектаПоСсылкеНаОбъект(Элементы.Список.ТекущиеДанные.Объект);
		ПараметрыОткрытия = Новый Структура("Ключ", Элементы.Список.ТекущиеДанные.Объект);
		
		Если ТипЗнч(СсылкаНаТекущийОбъект) = Тип("ДокументСсылка.Анкета") Тогда
			
			ПараметрыОткрытия.Вставить("ТолькоФормаЗаполнения",Истина);
			
			Если Элементы.Список.ТекущиеДанные.Проведен Тогда
				
				ПараметрыОткрытия.Вставить("ТолькоПросмотр",Истина);
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если Элементы.Список.ТолькоПросмотр И НЕ ПараметрыОткрытия.Свойство("ТолькоПросмотр") Тогда
			ПараметрыОткрытия.Вставить("ТолькоПросмотр",Истина);
		КонецЕсли;
		
		Форма = ПолучитьФорму(ДанныеДляОткрытия.ПолноеИмяМетаданных + ".ФормаОбъекта", ПараметрыОткрытия, Элементы.Список);
		Если Форма <> Неопределено Тогда
			
			Форма.Открыть();
			#Если НЕ ВебКлиент Тогда
			СписокОткрытыхФорм.Добавить(Форма);
			Попытка ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм");
			Исключение КонецПопытки;
			ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм", 1);
			#КонецЕсли
		Иначе
			СообщениеОтказПриПолученииФормы();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура создает нового партнера по его наименованию.
//
// Параметры:
//	НаименованиеСтр	- Строка	- Наименование нового партнера.
//
Процедура СоздатьПартнераПоНаименованию(Знач НаименованиеСтр)
	бИспользоватьПомощник = (CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьПомощникВводаНовогоКлиента") = Истина);
	СтруктураПараметрыНового = Новый Структура("Наименование,АдресПочты,Телефон", НаименованиеСтр, "", "");
	Если бИспользоватьПомощник Тогда
		CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, Новый Структура("ПараметрыНового", СтруктураПараметрыНового));
	Иначе
		ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("ПараметрыНового", СтруктураПараметрыНового), ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры // СоздатьПартнераПоНаименованию()

&НаКлиенте
// Процедура определяет доступность потенциального клиента.
//
// Параметры:
//	Нет.
//
Процедура ДоступностьПотенциальногоКлиента()
	ДоступностьКлиента	 									= ЗначениеЗаполнено(Объект.Партнер) ИЛИ НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент);
	Элементы.Партнер.Видимость								= ДоступностьКлиента;
	Элементы.ДекорацияПартнерТелефон.Видимость				= ДоступностьКлиента;
	Элементы.Партнер.АвтоОтметкаНезаполненного				= ДоступностьКлиента;
	Элементы.Партнер.ОтметкаНезаполненного					= ДоступностьКлиента;
	Элементы.ГруппаПотенциальныйКлиент.Видимость			= НЕ ДоступностьКлиента;
	Элементы.ПотенциальныйКлиент.Видимость					= НЕ ДоступностьКлиента;
	Элементы.ПотенциальныйКлиент.АвтоОтметкаНезаполненного	= НЕ ДоступностьКлиента;
	Элементы.ПотенциальныйКлиент.ОтметкаНезаполненного		= НЕ ДоступностьКлиента;
	Элементы.СоздатьНовогоКлиента.Видимость					= НЕ ДоступностьКлиента;
	Элементы.ДекорацияПотенциальныйКлиентТелефон.Видимость	= НЕ ДоступностьКлиента;
	Элементы.КонтактноеЛицо.Видимость						= ДоступностьКлиента;
	Элементы.КонтактноеЛицо.АвтоОтметкаНезаполненного		= ДоступностьКлиента И CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Партнер, "ЮрФизЛицо") <> ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо");
	Элементы.КонтактноеЛицо.ОтметкаНезаполненного			= Элементы.КонтактноеЛицо.АвтоОтметкаНезаполненного;
	Элементы.ДекорацияКонтактноеЛицоТелефон.Видимость		= ДоступностьКлиента;
	Элементы.СтраницаКонтакты.Видимость						= ДоступностьКлиента;
КонецПроцедуры // ДоступностьПотенциальногоКлиента()	

&НаКлиенте
// Процедура устанавливает доступность и видимость полей формы.
//
// Параметры:
//	Клиент	- СправочникСсылка	- Клиент
//	Контакт	- СправочникСсылка	- Контакт
//
Процедура УстановитьДоступностьИнтереса()
	
	Если Объект.Автор = ТекущийПользователь Тогда
		ЕстьДоступУровняАккаунтМенеджера			= Истина;
	ИначеЕсли Объект.Ответственный = ТекущийПользователь Тогда
		ЕстьДоступУровняАккаунтМенеджера			= Истина;
	ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
		ЕстьДоступУровняАккаунтМенеджера			= CRM_УправлениеДоступомВызовСервера.ЕстьДоступУровняАккаунтМенеджера(Объект.Партнер);
	Иначе
		ЕстьДоступУровняАккаунтМенеджера			= Истина;
	КонецЕсли;
	Элементы.ГруппаОбщиеСведения.ТолькоПросмотр	= НЕ ЕстьДоступУровняАккаунтМенеджера;
	Элементы.ГруппаИнтерес.ТолькоПросмотр		= НЕ ЕстьДоступУровняАккаунтМенеджера;
	Элементы.Взаимодействия.ТолькоПросмотр		= НЕ ЕстьДоступУровняАккаунтМенеджера;
	
	Для Каждого ПодчиненныйЭлемент Из Элементы.Взаимодействия.КоманднаяПанель.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = ЕстьДоступУровняАккаунтМенеджера;
	КонецЦикла;
	Для Каждого ПодчиненныйЭлемент Из Элементы.Взаимодействия.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = ЕстьДоступУровняАккаунтМенеджера;
	КонецЦикла;
	
	Элементы.Список.ТолькоПросмотр  							 = НЕ ЕстьДоступУровняАккаунтМенеджера;
	Элементы.ОблакоТегов.ТолькоПросмотр 						 = НЕ ЕстьДоступУровняАккаунтМенеджера;
	Элементы.ГруппаРеквизитыЛево.ТолькоПросмотр 					 = НЕ ЕстьДоступУровняАккаунтМенеджера;
	Элементы.ГруппаОбщиеСведенияИсточникСостояние.ТолькоПросмотр = Не ЕстьДоступУровняАккаунтМенеджера;
	Элементы.Описание.ТолькоПросмотр 							 = Не ЕстьДоступУровняАккаунтМенеджера;
	
	Для Каждого ПодчиненныйЭлемент Из КоманднаяПанель.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = ЕстьДоступУровняАккаунтМенеджера;
	КонецЦикла;
	Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность	= ЕстьДоступУровняАккаунтМенеджера;
	Если НЕ ЕстьДоступУровняАккаунтМенеджера Тогда
		Элементы.ДекорацияКонтактноеЛицоТелефон.Заголовок = "";	
	КонецЕсли;		
	
КонецПроцедуры // УстановитьДоступностьИнтереса()

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм()
	Если ТипЗнч(СписокОткрытыхФорм) = Тип("СписокЗначений") Тогда
		Если СписокОткрытыхФорм.Количество() = 0 Тогда
			Попытка ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм");
			Исключение КонецПопытки;
		Иначе
			бОбновлять = Ложь;
			нИндекс = 0;
			Пока нИндекс < СписокОткрытыхФорм.Количество() Цикл
				ЗначениеСписка = СписокОткрытыхФорм[нИндекс];
				
				Попытка		ФормаОткрыта = ЗначениеСписка.Значение.Открыта();
				Исключение	ФормаОткрыта = Ложь;
				КонецПопытки;
				
				Если Не ФормаОткрыта Тогда
					СписокОткрытыхФорм.Удалить(нИндекс);
					бОбновлять = Истина;
				Иначе
					нИндекс = нИндекс + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если бОбновлять Тогда
				ОбновитьСписок();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Попытка ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм");
	Исключение КонецПопытки;
	
	Если ТипЗнч(СписокОткрытыхФорм) = Тип("СписокЗначений") И СписокОткрытыхФорм.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм", 1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОтказПриПолученииФормы(ПараметрОбъект = Неопределено)
	ТекстСообщенияПоУмолчанию = НСтр("ru = 'Запрещено интерактивное создание данного объекта!'");
	Если ПараметрОбъект = Неопределено Тогда
		ТекстСообщения = ТекстСообщенияПоУмолчанию;
	Иначе
		ПараметрОбъектПредставление = Строка(ПараметрОбъект);
		Если ЗначениеЗаполнено(ПараметрОбъектПредставление) Тогда
			ТекстСообщения = НСтр("ru = 'Запрещено интерактивное создание'") + " """ + ПараметрОбъектПредставление + """!";
		Иначе
			ТекстСообщения = ТекстСообщенияПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения, 10);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок()
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПодчиненности(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	ТекДанные = Элементы.Список.ТекущиеДанные;

	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;

	ПараметрКоманды = ТекДанные.Объект;
	
	Если ЗначениеЗаполнено(ПараметрКоманды) Тогда
	
		ОткрытьФорму("ОбщаяФорма.CRM_СтруктураПодчиненности",Новый Структура("ОбъектОтбора", ПараметрКоманды),
				Элементы.Список,
				КлючУникальности);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_КонтактныеЛицаПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаПриАктивизацииСтроки()
	Если Элементы.КонтактныеЛица.ТекущаяСтрока = Неопределено Тогда
		КонтактнаяИнформацияКЛ.Очистить();
		Возврат;
	КонецЕсли;
	ПоказатьКонтактнуюИнформациюКЛ(Элементы.КонтактныеЛица.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПоказатьКонтактнуюИнформациюКЛ(СтрокаСсылка)
	
	КонтактнаяИнформацияКЛ.Очистить();
	Если СтрокаСсылка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	КИКонтактногоЛица = СтрокаСсылка.КонтактнаяИнформация;
	Для Каждого ОбъектКИ Из КИКонтактногоЛица Цикл
		НоваяКИ							= КонтактнаяИнформацияКЛ.Добавить();
		НоваяКИ.Вид						= ОбъектКИ.Вид;
		НоваяКИ.Значение				= ОбъектКИ.Представление;
		НоваяКИ.Тип						= ОбъектКИ.Тип;
		НоваяКИ.Порядок					= НоваяКИ.Вид.РеквизитДопУпорядочивания;
		НоваяКИ.CRM_ОсновнойДляСвязи	= ОбъектКИ.CRM_ОсновнойДляСвязи;
	КонецЦикла;	
	КонтактнаяИнформацияКЛ.Сортировать("Порядок");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияКЛПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_КонтактнаяИнформацияКЛПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияКЛПриАктивизацииСтроки()
	
	ТекСтрокаКИ = Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные;
	ДоступенМэйл = Ложь;
	ДоступенЗвонок = Ложь;
	Если ТекСтрокаКИ <> Неопределено Тогда
		Если ТекСтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда 
			ДоступенМэйл = Истина;
		ИначеЕсли ТекСтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда 
			ДоступенЗвонок = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.КонтактнаяИнформацияОтправитьEmailКлиент.Доступность	= ДоступенМэйл;
	Элементы.КонтактнаяИнформацияПозвонитьКЛ.Доступность			= ДоступенЗвонок;
	Элементы.КонтактнаяИнформацияОтправитьСМСКЛ.Доступность			= ДоступенЗвонок;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрокаКонтакт = Элементы.КонтактныеЛица.ТекущаяСтрока;
	Если ТекСтрокаКонтакт <> Неопределено Тогда
		ПоказатьЗначение(, ТекСтрокаКонтакт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриСменеСтраницы" элемента формы "Панель".
//
Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "стрВзаимодействия" Тогда
		ТекущаяСтрока = Неопределено;
		ТекущийИндекс = 0;	
		Для Каждого СтрокаТаблицы Из Взаимодействия Цикл
			Если НЕ (СтрокаТаблицы.ДатаЗавершенияВзаимодействия = Дата('00010101')) Тогда Прервать; КонецЕсли;
			ТекущаяСтрока = ТекущийИндекс;	
			ТекущийИндекс = ТекущийИндекс + 1;	
		КонецЦикла;	
		Если НЕ (ТекущаяСтрока = Неопределено) Тогда
			Элементы.Взаимодействия.ТекущаяСтрока = ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаТаблицаНаКонтроль

&НаСервере
// Процедура обновляет таблицу "На контроле" из регистра сведений.
//
Процедура ОбновитьТаблицуНаКонтроле()
	
	НаКонтроле.Очистить();
	
	Запрос = Новый запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Объект,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Пользователь,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.СтатусКонтроля КАК Статус,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Подразделение,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Комментарий
	|ИЗ
	|	РегистрСведений.CRM_ИнтересыНаКонтроле.СрезПоследних(&Период, ) КАК CRM_ИнтересыНаКонтролеСрезПоследних
	|ГДЕ
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Объект = &Интерес
	|	И CRM_ИнтересыНаКонтролеСрезПоследних.СтатусКонтроля = &Статус";
	
	Запрос.УстановитьПараметр("Интерес", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	Запрос.УстановитьПараметр("Статус", ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.НаКонтроле"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Для Каждого Выборка Из РезультатЗапроса Цикл
			НоваяСтрока = НаКонтроле.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;		
	
КонецПроцедуры	

#КонецОбласти

#Область СписокДокументовВзаимодействия

&НаКлиенте
// Подключаемый обработчик события "ПриАктивизацииСтроки" элемента формы "Взаимодействия".
//
Процедура Подключаемый_ВзаимодействияПриАктивизацииСтроки()
	ТД = Элементы.Взаимодействия.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		ВзаимодействиеЗакрыто = Истина;
	Иначе
		Если СкрытьПоказатьСписокДокументов Тогда
			Если ЗначениеЗаполнено(ТД.Задача) И НЕ ТД.ЗадачаВыполнена Тогда
				СписокДокументовВзаимодействия	= CRM_ВзаимодействияСервер.СписокДокументовВзаимодействия(ТД.Ссылка,ТД.Задача);
			Иначе
				СписокДокументовВзаимодействия	= CRM_ВзаимодействияСервер.СписокДокументовВзаимодействия(ТД.Ссылка);
			КонецЕсли;
		КонецЕсли;	
		ВзаимодействиеЗакрыто = НЕ (ТД.ДатаЗавершенияВзаимодействия = Дата('00010101'));
	КонецЕсли;
	Элементы.ВзаимодействияОтправитьEmailКлиент.Доступность		= НЕ ВзаимодействиеЗакрыто;
	Элементы.ВзаимодействияОтправитьСМСКЛ.Доступность			= НЕ ВзаимодействиеЗакрыто;
	Элементы.ВзаимодействияПозвонитьКЛ.Доступность				= НЕ ВзаимодействиеЗакрыто;
	Элементы.ВзаимодействияЗапланироватьМероприятие.Доступность	= НЕ ВзаимодействиеЗакрыто;
КонецПроцедуры // Подключаемый_ВзаимодействияПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы "Взаимодействия".
//
Процедура ВзаимодействияПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ВзаимодействияПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ПоказыватьСкрыватьСписокДокументов".
//
Процедура ПоказыватьСкрыватьСписокДокументов(Команда)
	Элементы.ПоказыватьСкрыватьСписокДокументов.Пометка	= НЕ Элементы.ПоказыватьСкрыватьСписокДокументов.Пометка;
	Элементы.ГруппаСписокДокументов.Видимость			= Элементы.ПоказыватьСкрыватьСписокДокументов.Пометка;
	СкрытьПоказатьСписокДокументов						= Элементы.ПоказыватьСкрыватьСписокДокументов.Пометка;
	Подключаемый_ВзаимодействияПриАктивизацииСтроки();
КонецПроцедуры // ПоказыватьСкрыватьСписокДокументов()

&НаКлиенте
// Процедура - обработчик события "ПриНажатии" элемента формы "СписокДокументовВзаимодействия".
//
Процедура СписокДокументовВзаимодействияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		ПозицияСсылки	= Найти(ДанныеСобытия.href, "e1cib");
		ТелоСсылки		= Сред(ДанныеСобытия.href, ПозицияСсылки);
		ПозицияКоманды	= Найти(ТелоСсылки, ":");
		СсылкаПерехода	= Лев(ТелоСсылки, ПозицияКоманды - 1);
		ИмяКоманды		= Сред(ТелоСсылки, ПозицияКоманды + 1);
		СсылкаНаОбъект	= CRM_ВзаимодействияСервер.ПолучитьСсылкуНаДокумент(СсылкаПерехода);
		Если ИмяКоманды = "Открыть" Тогда
			Попытка
				ПерейтиПоНавигационнойСсылке(СсылкаПерехода);
			Исключение
			КонецПопытки;
		ИначеЕсли ИмяКоманды = "ПрослушатьЗапись" Тогда
			МассивЗаписей	= CRM_ВзаимодействияСервер.ПолучитьМассивЗаписейЗвонка(СсылкаНаОбъект);
			Если МассивЗаписей.Количество() > 0 Тогда
				сфпСофтФонПроКлиент.сфпПолучитьФайлРазговора(МассивЗаписей[0]);	
			КонецЕсли;	
		ИначеЕсли ИмяКоманды = "ПрослушатьЗаписи" Тогда
			сфпСофтФонПроКлиент.сфпОткрытьИсториюРазговора(СсылкаНаОбъект);	
		ИначеЕсли ИмяКоманды = "ПозвонитьНаНомер" Тогда
			ДанныеЗаполнения	= Новый Структура;
			ДанныеЗаполнения.Вставить("Основание",	СсылкаНаОбъект);	
			Если НЕ (Элементы.Взаимодействия.ТекущиеДанные = Неопределено) Тогда
				ДанныеЗаполнения.Вставить("Взаимодействие", Элементы.Взаимодействия.ТекущиеДанные.Ссылка);
			КонецЕсли;	
			АбонентКакСвязаться	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "АбонентКакСвязаться");
			АбонентКонтакт		= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "АбонентКонтакт");
			Если НЕ ПустаяСтрока(АбонентКакСвязаться) Тогда
				сфпСофтФонПроКлиент.сфпПозвонить(АбонентКакСвязаться, АбонентКонтакт, ДанныеЗаполнения);	
			ИначеЕсли ЗначениеЗаполнено(АбонентКонтакт) Тогда
				СписокОбъектов	= Новый СписокЗначений;
				СписокОбъектов.Добавить(АбонентКонтакт);
				сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, ДанныеЗаполнения);
			КонецЕсли;	
		ИначеЕсли ИмяКоманды = "ОтветитьНаПисьмо" Тогда
			ОснованиеПисьма = Новый Структура;
			ОснованиеПисьма.Вставить("Основание",	СсылкаНаОбъект);
			ОснованиеПисьма.Вставить("Команда",		"Ответить");
			ПараметрыОткрытия = Новый Структура("Основание", ОснованиеПисьма);
			Если НЕ (Элементы.Взаимодействия.ТекущиеДанные = Неопределено) Тогда
				ПараметрыОткрытия.Вставить("Взаимодействие", Элементы.Взаимодействия.ТекущиеДанные.Ссылка);
			КонецЕсли;	
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОткрытия);
		ИначеЕсли ИмяКоманды = "ОткрытьВложение" Тогда
			МассивВложений	= CRM_ВзаимодействияСервер.ПолучитьМассивВложенийПисьма(СсылкаНаОбъект);
			Если МассивВложений.Количество() > 0 Тогда
				УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(МассивВложений[0], ЭтотОбъект);
			КонецЕсли;	
		ИначеЕсли ИмяКоманды = "ОткрытьВложения" Тогда
			ПараметрыОткрытия = Новый Структура("Ключ", СсылкаНаОбъект);
			ПараметрыОткрытия.Вставить("ВсегдаПоказыватьВложения", Истина);
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОткрытия);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // СписокДокументовВзаимодействияПриНажатии()

#КонецОбласти

#Область ОбработчикиКомандСофтфон

&НаСервере
// Функция возвращает необходимые параметры для открытия карточки клиента в CoMagic
//
// Параметры:
//  ИмяКоманды - Строка - Имя команды, которая вызывает эту функцию
//
// Возвращаемое значение:
//  СтруктураЗапроса - Структура - Содержит ссылку на объект и идентификатор в системе CoMagic
//
Функция сфпОткрытьКарточкуВCoMagicНаСервере(ИмяКоманды)
	СтруктураЗапроса = Новый Структура;
	Если ИмяКоманды = "сфпОткрытьПартнераВCoMagic" Тогда
		СтруктураЗапроса.Вставить("Контакт", Объект.Партнер);
		СтруктураЗапроса.Вставить("CoMagicID", Объект.Партнер.сфпCoMagicID);
	ИначеЕсли ИмяКоманды = "сфпОткрытьКонтактноеЛицоВCoMagic" Тогда
		СтруктураЗапроса.Вставить("Контакт", Объект.КонтактноеЛицо);
		СтруктураЗапроса.Вставить("CoMagicID", Объект.КонтактноеЛицо.сфпCoMagicID);
	КонецЕсли;		
	Возврат СтруктураЗапроса;
КонецФункции // сфпОткрытьКарточкуВCoMagic()

&НаКлиенте
// Процедура открывает карточку контакта в системе CoMagic
//
// Параметры:
//	Контакт		- СправочникСсылка	- Контакт
//  CoMagicID	- Строка			- Идентификатор контакта в системе CoMagic
//
Процедура сфпОткрытьКлиентаВСистемеCoMagic(Контакт, CoMagicID)
	Если ПустаяСтрока(CoMagicID) Тогда
		CoMagicID = сфпПолучитьИдентификаторCoMagicУСвязанныхТелефонныхЗвонков(Объект.Ссылка);
	КонецЕсли;	
	Если ПустаяСтрока(CoMagicID) Тогда Возврат; КонецЕсли;
	КлючСессии	= сфпСофтФонПроСервер.сфпПолучитьКлючСессииCoMagic();
	Если НЕ ЗначениеЗаполнено(КлючСессии) Тогда Возврат; КонецЕсли;
	Адрес	= "http://app.comagic.ru/analytics/auditory/cmvisitor/?session_key=" + КлючСессии + "&visitor_id=" + CoMagicID;
	ПерейтиПоНавигационнойСсылке(Адрес);
КонецПроцедуры // сфпОткрытьКлиентаВСистемеCoMagic()

&НаСервере
Функция сфпПолучитьИдентификаторCoMagicУСвязанныхТелефонныхЗвонков(ИнтересСсылка)
	
	Запрос = Новый Запрос; 
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	CRM_ЖурналДокументов.Объект.Ссылка КАК Звонок
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	|ГДЕ
	|	CRM_ЖурналДокументов.ГлавнаяЗапись
	|	И CRM_ЖурналДокументов.CRM_Интерес = &Интерес
	|	И ТИПЗНАЧЕНИЯ(CRM_ЖурналДокументов.Объект) = ТИП(Документ.ТелефонныйЗвонок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_ЖурналДокументов.Объект.Дата";
	
	Запрос.УстановитьПараметр("Интерес", ИнтересСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Звонок.сфпCoMagicID;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

&НаКлиенте
// Процедура - обработчик видимостью кнопок по открытию в CoMagic
//
Процедура сфпУправлениеВидимостьюКнопокОткрытьВCoMagic()
	Если сфпСофтФонПроСервер.сфпИспользоватьCoMagic() Тогда
		Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			Если ПустаяСтрока(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.КонтактноеЛицо, "сфпCoMagicID")) Тогда
				Элементы.КнопкаКонтактноеЛицоОткрытьCoMagic.Видимость	= НЕ ПустаяСтрока(сфпПолучитьИдентификаторCoMagicУСвязанныхТелефонныхЗвонков(Объект.Ссылка));
		    Иначе
				Элементы.КнопкаКонтактноеЛицоОткрытьCoMagic.Видимость	= Истина;
			КонецЕсли;
			Элементы.КнопкаПартнерОткрытьВCoMagic.Видимость	= НЕ ПустаяСтрока(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Партнер, "сфпCoMagicID"));
		ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
			Если ПустаяСтрока(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Партнер, "сфпCoMagicID")) Тогда
				Элементы.КнопкаПартнерОткрытьВCoMagic.Видимость	= НЕ ПустаяСтрока(сфпПолучитьИдентификаторCoMagicУСвязанныхТелефонныхЗвонков(Объект.Ссылка));
			Иначе
				Элементы.КнопкаПартнерОткрытьВCoMagic.Видимость	= Истина;
			КонецЕсли;
			Элементы.КнопкаКонтактноеЛицоОткрытьCoMagic.Видимость	= Ложь;
		Иначе
			Элементы.КнопкаПартнерОткрытьВCoMagic.Видимость			= НЕ ПустаяСтрока(сфпПолучитьИдентификаторCoMagicУСвязанныхТелефонныхЗвонков(Объект.Ссылка));
			Элементы.КнопкаКонтактноеЛицоОткрытьCoMagic.Видимость	= Ложь;
		КонецЕсли;
	Иначе
		Элементы.КнопкаПартнерОткрытьВCoMagic.Видимость			= Ложь;
		Элементы.КнопкаКонтактноеЛицоОткрытьCoMagic.Видимость	= Ложь;
	КонецЕсли;
КонецПроцедуры // УправлениеВидимостьюКнопокОткрытьВCoMagic()

#КонецОбласти

&НаСервере
Функция ВернутьЗаголовокКоманды(ИмяКоманды)
	
	Возврат Команды[ИмяКоманды].Заголовок;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаВопроса(Ответ, КомандаИмя) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Ответ <> КодВозвратаДиалога.ОК Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяДокумента = СтрЗаменить(КомандаИмя,"Создать","");
	
	Если ИмяДокумента = "CRM_СчетНаОплатуПокупателю" И CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы", "ЗаказКлиента") Тогда
		ИмяДокумента = "ЗаказКлиента";
	КонецЕсли;
	
	СсылкаНаВзаимодействие = ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка");
	
	Если Элементы.Панель.ТекущаяСтраница = Элементы.стрВзаимодействия Тогда
		ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
		
		Если НЕ ТекДанные = Неопределено Тогда
			ВзаимодействиеЗакрыто	= НЕ (ТекДанные.ДатаЗавершенияВзаимодействия = Дата('00010101'));
			СсылкаНаВзаимодействие	= ТекДанные.Ссылка;
		Иначе
			ВзаимодействиеЗакрыто = Истина;
		КонецЕсли;
	Иначе
		ВзаимодействиеЗакрыто = Истина;
	КонецЕсли;
	
	Если ВзаимодействиеЗакрыто Тогда
		Массив = Взаимодействия.НайтиСтроки(Новый Структура("АктивноеВзаимодействие",Истина));
		Если Массив.Количество() = 0 Тогда
			Массив = Взаимодействия.НайтиСтроки(Новый Структура("СтатусВзаимодействия",ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано")));
			Если НЕ Массив.Количество() = 0 Тогда
				Ном = Массив.Количество();
				Пока Ном > 0 Цикл
					Если ЗначениеЗаполнено(Массив[Ном-1].Ссылка) Тогда
						СсылкаНаВзаимодействие = Массив[Ном-1].Ссылка;
						Прервать;
					КонецЕсли;
					Ном = Ном-1;
				КонецЦикла;
			КонецЕсли;
		Иначе
			СсылкаНаВзаимодействие = Массив[0].Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание",Объект.Ссылка);
	//ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
	ПараметрыФормы.Вставить("Взаимодействие", СсылкаНаВзаимодействие);
	ОткрытьФорму("Документ."+ИмяДокумента+".ФормаОбъекта",ПараметрыФормы,ЭтотОбъект,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия """+ВернутьЗаголовокКоманды(Команда.Имя)+": создать на основании"" возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаВопроса", ЭтотОбъект, Команда.Имя);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ОбработкаРезультатаВопроса(Неопределено, Команда.Имя)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["СкрытьПоказатьСписокДокументов"] = Неопределено Тогда
		СкрытьПоказатьСписокДокументов = Настройки["СкрытьПоказатьСписокДокументов"];
	Иначе
		СкрытьПоказатьСписокДокументов	= Ложь;
	КонецЕсли;
	Элементы.ПоказыватьСкрыватьСписокДокументов.Пометка	= СкрытьПоказатьСписокДокументов;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура ДекорацияСПАРКПодробноНажатие(Элемент)
	
	СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ИндексыСПАРКРиски, ЭтотОбъект);
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()

	ОбновитьОтображениеИндексыСПАРК();

КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()

	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Неопределено,
		Объект.Партнер, // Искать по ссылке
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрута(Команда)
	
	ОткрытьФорму("Обработка.CRM_КартаМаршрутаБизнесПроцесса.Форма",Новый Структура("БизнесПроцесс", БизнесПроцесс), ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеЗадачи(Команда)
	ОткрытьФорму("ОбщаяФорма.CRM_ОписаниеЗадачи", Новый Структура("Задача", ТекущаяЗадача),ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//ПоказатьЗначение(, ЗначениеРеквизитаОбъекта(ТекущаяЗадача, "Описание"));
	////Элементы.ТекущаяЗадачаОписание.Видимость = НЕ Элементы.ТекущаяЗадачаОписание.Видимость;
КонецПроцедуры
