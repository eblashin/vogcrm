
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает таблицу-результат выполнения СКД для заполнения табличной части Планирование
// 	в документе План продаж
//
// Параметры:
//	СтруктураНастроек	- Структура - структура, которая должна содержать свойства "АдресСхемыКомпоновкиДанных",
// 	"АдресНастроекКомпоновкиДанных" и "НаправлениеДеятельности"
//
Функция ПолучитьРезультатВыполненияСКД(СтруктураНастроек) Экспорт
	
	СхемаКомпоновкиДанных 	= ПолучитьИзВременногоХранилища(СтруктураНастроек.АдресСхемыКомпоновкиДанных);
	НастройкиСКД 			= ПолучитьИзВременногоХранилища(СтруктураНастроек.АдресНастроекКомпоновкиДанных);
	// ++ VOG Солодов В.В. 25.10.2019 
	// До изменения
	//НаправлениеДеятельности = СтруктураНастроек.НаправлениеДеятельности;
	// -- VOG Солодов В.В. 25.10.2019
	
	ТаблицаРезультат 		= Новый ТаблицаЗначений;
	
	КомпоновщикНастроек 	= Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	
	// ++ VOG Солодов В.В. 25.10.2019
	УстановитьПараметрыСКД(СхемаКомпоновкиДанных, СтруктураНастроек);
	// До изменения
	//УстановитьПараметрыСКД(СхемаКомпоновкиДанных, НаправлениеДеятельности);
	// -- VOG Солодов В.В. 25.10.2019
	
	КомпоновщикМакета 		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, 
		НастройкиСКД,
		,
		,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицавогПланыПродаж(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПланыПродажПоТорговымТочкам(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПланыПродаж(Запрос, ТекстыЗапроса, Регистры);
	// +++ VOG Кулаков П.Л. 11.08.2020 CRM-526
	УстановитьПривилегированныйРежим(Истина);
	// --- VOG Кулаков П.Л.
	
	ТаблицыЗапроса = вогОбщегоНазначения.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,, Истина);
	
	// +++ VOG Кулаков П.Л. 11.08.2020 CRM-526
	УстановитьПривилегированныйРежим(Ложь);
	// --- VOG Кулаков П.Л.
	
	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл

		ИмяТаблицы = ТекстЗапроса.Представление;

		Если Не ПустаяСтрока(ИмяТаблицы) Тогда
		
			// Таблицы для проведения должны начинаться с "Таблица"
			Если Не СтрНачинаетсяС(ИмяТаблицы, "Таблица") Тогда
				ИмяТаблицы = "Таблица" + ИмяТаблицы;
			КонецЕсли;
			
			ДополнительныеСвойства.ТаблицыДляДвижений.Вставить(ИмяТаблицы, ТаблицыЗапроса[ТекстЗапроса.Представление]);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПланыПродаж(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПланыПродаж";
	
	// +++ Кулаков П.Л. CRM-526 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Данные.ПланПродаж КАК ПланПродаж,
	|	Данные.Период КАК Период,
	|	Данные.Партнер КАК Партнер,
	|	Данные.ТРТ КАК ТРТ,
	|	Данные.Бренд КАК Бренд,
	|	Данные.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Данные.Подразделение КАК Подразделение,
	|	Данные.ПериодПланирования КАК ПериодПланирования,
	|	Данные.КатегорияПартнера КАК КатегорияПартнера,
	|	СУММА(Данные.КоличествоSKUНаПолках053) КАК КоличествоSKUНаПолках053,
	|	СУММА(Данные.КоличествоSKUНаПолках106) КАК КоличествоSKUНаПолках106,
	|	Данные.НаличиеРулоновНаПолу КАК НаличиеРулоновНаПолу,
	|	СУММА(Данные.КоличествоНашихSKU053) КАК КоличествоНашихSKU053,
	|	СУММА(Данные.КоличествоНашихSKU106) КАК КоличествоНашихSKU106,
	|	СУММА(Данные.КоличествоПланшет) КАК КоличествоПланшет,
	|	СУММА(Данные.КоличествоШтучный) КАК КоличествоШтучный,
	|	СУММА(Данные.Доля) КАК Доля,
	|	СУММА(Данные.ДоляВОГ053) КАК ДоляВОГ053,
	|	СУММА(Данные.ДоляВОГ106) КАК ДоляВОГ106,
	|	СУММА(Данные.ЦельПоЭкспозиции) КАК ЦельПоЭкспозиции,
	|	СУММА(Данные.ЦельПрироста) КАК ЦельПрироста,
	|	СУММА(Данные.ЦельСледГод) КАК ЦельСледГод,
	|	Данные.СценарийПланирования КАК СценарийПланирования,
	|	Данные.ВерсияСценария КАК ВерсияСценария,
	|	СУММА(Данные.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПланирование.Ссылка КАК ПланПродаж,
	|		ТаблицаПланирование.Ссылка.ПериодПланирования.ДатаНачала КАК Период,
	|		ТаблицаПланирование.Партнер КАК Партнер,
	|		ТаблицаПланирование.ТРТ КАК ТРТ,
	|		ТаблицаПланирование.Бренд КАК Бренд,
	|		ТаблицаПланирование.Ссылка.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		&Подразделение КАК Подразделение,
	|		ТаблицаПланирование.Ссылка.ПериодПланирования КАК ПериодПланирования,
	|		ТаблицаПланирование.КатегорияПартнера КАК КатегорияПартнера,
	|		ТаблицаПланирование.КоличествоSKUНаПолках053 КАК КоличествоSKUНаПолках053,
	|		ТаблицаПланирование.КоличествоSKUНаПолках106 КАК КоличествоSKUНаПолках106,
	|		ТаблицаПланирование.НаличиеРулоновНаПолу КАК НаличиеРулоновНаПолу,
	|		ТаблицаПланирование.КоличествоНашихSKU053 КАК КоличествоНашихSKU053,
	|		ТаблицаПланирование.КоличествоНашихSKU106 КАК КоличествоНашихSKU106,
	|		ТаблицаПланирование.КоличествоПланшет КАК КоличествоПланшет,
	|		ТаблицаПланирование.КоличествоШтучный КАК КоличествоШтучный,
	|		ТаблицаПланирование.Доля КАК Доля,
	|		ТаблицаПланирование.ДоляВОГ053 КАК ДоляВОГ053,
	|		ТаблицаПланирование.ДоляВОГ106 КАК ДоляВОГ106,
	|		ТаблицаПланирование.ЦельПоЭкспозиции КАК ЦельПоЭкспозиции,
	|		ТаблицаПланирование.ЦельПрироста КАК ЦельПрироста,
	|		ТаблицаПланирование.ЦельСледГод КАК ЦельСледГод,
	|		ТаблицаПланирование.Ссылка.СценарийПланирования КАК СценарийПланирования,
	|		ТаблицаПланирование.Ссылка.ВерсияСценария КАК ВерсияСценария,
	|		ВЫБОР
	|			КОГДА ТаблицаПланирование.Ссылка.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Плитка)
	|				ТОГДА ТаблицаПланирование.ЦельПоЭкспозиции + ТаблицаПланирование.ЦельПрироста
	|			ИНАЧЕ ТаблицаПланирование.ЦельСледГод
	|		КОНЕЦ КАК Количество
	|	ИЗ
	|		Документ.вогПланПродаж.Планирование КАК ТаблицаПланирование
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогСценарииПланирования КАК вогСценарииПланирования
	|			ПО ТаблицаПланирование.Ссылка.СценарийПланирования = вогСценарииПланирования.Ссылка
	|	ГДЕ
	|		ТаблицаПланирование.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаПланирование.Ссылка,
	|		ТаблицаПланирование.Ссылка.ПериодПланирования.ДатаНачала,
	|		ТаблицаПланирование.Партнер,
	|		ТаблицаПланирование.ТРТ,
	|		ТаблицаПланирование.Бренд,
	|		ТаблицаПланирование.Ссылка.НаправлениеДеятельности,
	|		&Подразделение,
	|		ТаблицаПланирование.Ссылка.ПериодПланирования,
	|		ТаблицаПланирование.КатегорияПартнера,
	|		-ПланыПродажОбороты.КоличествоSKUНаПолках053Оборот,
	|		-ПланыПродажОбороты.КоличествоSKUНаПолках106Оборот,
	|		ТаблицаПланирование.НаличиеРулоновНаПолу,
	|		-ПланыПродажОбороты.КоличествоНашихSKU053Оборот,
	|		-ПланыПродажОбороты.КоличествоНашихSKU106Оборот,
	|		-ПланыПродажОбороты.КоличествоПланшетОборот,
	|		-ПланыПродажОбороты.КоличествоШтучныйОборот,
	|		-ПланыПродажОбороты.ДоляОборот,
	|		-ПланыПродажОбороты.ДоляВОГ053Оборот,
	|		-ПланыПродажОбороты.ДоляВОГ106Оборот,
	|		-ПланыПродажОбороты.ЦельПоЭкспозицииОборот,
	|		-ПланыПродажОбороты.ЦельПриростаОборот,
	|		-ПланыПродажОбороты.ЦельСледГодОборот,
	|		ПланыПродажОбороты.СценарийПланирования,
	|		ПланыПродажОбороты.ВерсияСценария,
	|		-ПланыПродажОбороты.КоличествоОборот
	|	ИЗ
	|		Документ.вогПланПродаж.Планирование КАК ТаблицаПланирование
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогСценарииПланирования КАК вогСценарииПланирования
	|			ПО ТаблицаПланирование.Ссылка.СценарийПланирования = вогСценарииПланирования.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПродаж.Обороты(, , Регистратор, ) КАК ПланыПродажОбороты
	|			ПО ТаблицаПланирование.Ссылка.СценарийПланирования = ПланыПродажОбороты.СценарийПланирования
	|				И ТаблицаПланирование.Ссылка.ВерсияСценария = ПланыПродажОбороты.ВерсияСценария
	|				И ТаблицаПланирование.Ссылка.НаправлениеДеятельности = ПланыПродажОбороты.НаправлениеДеятельности
	|				И ТаблицаПланирование.ТРТ = ПланыПродажОбороты.ТРТ
	|				И (ПланыПродажОбороты.Подразделение = &Подразделение)
	|				И ТаблицаПланирование.Бренд = ПланыПродажОбороты.Бренд
	|				И ТаблицаПланирование.Партнер = ПланыПродажОбороты.Партнер
	|				И ТаблицаПланирование.Ссылка.Дата >= ПланыПродажОбороты.Регистратор.Дата
	|	ГДЕ
	|		ТаблицаПланирование.Ссылка = &Ссылка
	|		И ПланыПродажОбороты.Регистратор <> &Ссылка) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.ПланПродаж,
	|	Данные.Подразделение,
	|	Данные.НаправлениеДеятельности,
	|	Данные.КатегорияПартнера,
	|	Данные.Период,
	|	Данные.НаличиеРулоновНаПолу,
	|	Данные.Партнер,
	|	Данные.ТРТ,
	|	Данные.ПериодПланирования,
	|	Данные.Бренд,
	|	Данные.СценарийПланирования,
	|	Данные.ВерсияСценария";
	// --- Кулаков П.Л.
	
	Запрос.УстановитьПараметр("Подразделение",вогОбщегоНазначения.ПолучитьФилиалПользователя(Запрос.Параметры.Ссылка.Ответственный));
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицавогПланыПродаж(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "вогПланыПродаж";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПланирование.Ссылка КАК ПланПродаж,
	|	ТаблицаПланирование.Ссылка.Дата КАК Период,
	|	ТаблицаПланирование.Партнер КАК Партнер,
	|	ТаблицаПланирование.ТРТ КАК ТРТ,
	|	ТаблицаПланирование.Бренд КАК Бренд,
	//START Кайдашов 27/02/20
	|	ТаблицаПланирование.Ссылка.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Пользователи.Подразделение КАК Подразделение,
	|	ТаблицаПланирование.Ссылка.ПериодПланирования КАК ПериодПланирования,
	//++ VOG Иванов С.А. 11.11.2019 ID заявки: 000000848
	//|	вогСценарииПланирования.НаправлениеДеятельности КАК НаправлениеДеятельности,
	//|	Пользователи.Подразделение КАК Подразделение,
	//|	вогСценарииПланирования.ПериодПланирования КАК ПериодПланирования,
	//-- VOG Иванов С.А. 11.11.2019 ID заявки: 000000848
	|	ТаблицаПланирование.КатегорияПартнера КАК КатегорияПартнера,
	|	ТаблицаПланирование.КоличествоSKUНаПолках053 КАК КоличествоSKUНаПолках053,
	|	ТаблицаПланирование.КоличествоSKUНаПолках106 КАК КоличествоSKUНаПолках106,
	|	ТаблицаПланирование.НаличиеРулоновНаПолу КАК НаличиеРулоновНаПолу,
	|	ТаблицаПланирование.КоличествоНашихSKU053 КАК КоличествоНашихSKU053,
	|	ТаблицаПланирование.КоличествоНашихSKU106 КАК КоличествоНашихSKU106,
	|	ТаблицаПланирование.КоличествоПланшет КАК КоличествоПланшет,
	|	ТаблицаПланирование.КоличествоШтучный КАК КоличествоШтучный,
	|	ТаблицаПланирование.Доля КАК Доля,
	|	ТаблицаПланирование.ДоляВОГ053 КАК ДоляВОГ053,
	|	ТаблицаПланирование.ДоляВОГ106 КАК ДоляВОГ106,
	|	ТаблицаПланирование.ЦельПоЭкспозиции КАК ЦельПоЭкспозиции,
	|	ТаблицаПланирование.ЦельПрироста КАК ЦельПрироста,
	|	ТаблицаПланирование.ЦельСледГод КАК ЦельСледГод
	|ИЗ
	//++ VOG Иванов С.А. 11.11.2019 ID заявки: 000000848
	|	Документ.вогПланПродаж.Планирование КАК ТаблицаПланирование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогСценарииПланирования КАК вогСценарииПланирования
	|		ПО ТаблицаПланирование.Ссылка.СценарийПланирования = вогСценарииПланирования.Ссылка
	//-- VOG Иванов С.А. 11.11.2019 ID заявки: 000000848
	//++ VOG Иванов С.А. 11.11.2019 ID заявки: 000000873
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ТаблицаПланирование.Ссылка.Ответственный = Пользователи.Ссылка
	//-- VOG Иванов С.А. 11.11.2019 ID заявки: 000000873
	|ГДЕ
	|	ТаблицаПланирование.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПланыПродажПоТорговымТочкам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "вогПланыПродажПоТорговымТочкам";
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПланирование.Ссылка.Дата КАК Период,
	|	ТаблицаПланирование.ТРТ КАК ТРТ,
	|	ТаблицаПланирование.Ссылка КАК ПланПродаж,
	|	Пользователи.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.вогПланПродаж.Планирование КАК ТаблицаПланирование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ТаблицаПланирование.Ссылка.Ответственный = Пользователи.Ссылка
	|ГДЕ
	|	ТаблицаПланирование.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполняет движения документа "План продаж" по регистру вогПланыПродаж
//
Процедура ОтразитьВогПланыПродаж(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицавогПланыПродаж;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.вогПланыПродаж.Записывать = Истина;
	Движения.вогПланыПродаж.Загрузить(Таблица);

КонецПроцедуры

//++ VOG Иванов С.А. 11.11.2019 ID заявки: 000000848 

// Заполняет движения документа "План продаж" по регистру ПланыПродаж
//
Процедура ОтразитьПланыПродаж(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланыПродаж;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ПланыПродаж.Записывать = Истина;
	
	Движения.ПланыПродаж.Загрузить(Таблица);

КонецПроцедуры
//-- VOG Иванов С.А. 11.11.2019 ID заявки: 000000848 

// Заполняет движения документа "План продаж" по регистру вогПланыПродажПоТорговымТочкам
//
Процедура ОтразитьПланыПродажПоТорговымТочкам(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицавогПланыПродажПоТорговымТочкам;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.вогПланыПродажПоТорговымТочкам.Записывать = Истина;
	Движения.вогПланыПродажПоТорговымТочкам.Загрузить(Таблица);

КонецПроцедуры

// Процедура записывает движения документа. Дополнительно происходит копирование параметров
//  в модули наборов записей для выполнения регистрации изменений в движениях.
//  Процедура вызывается из модуля документов при проведении.
//
// Параметры:
//  Объект	 - ДокументОбъект - объект, для которого нужно записать движения.
//
Процедура ЗаписатьНаборыЗаписей(Объект) Экспорт
	
	// Заполним общие дополнительные свойства всех движений
	Для Каждого НаборЗаписей Из Объект.Движения Цикл
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", 			Объект.ДополнительныеСвойства.ЭтоНовый);
		НаборЗаписей.ДополнительныеСвойства.Вставить("РежимЗаписи", 		Объект.ДополнительныеСвойства.РежимЗаписи);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ДатаРегистратора", 	Объект.Дата);
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", 
			Новый Структура("СтруктураВременныеТаблицы",
			// Структура для передачи данных в модули наборов записей.
			Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));
		
	КонецЦикла;
	
	Объект.Движения.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура УстановитьПараметрыСКД(СхемаКомпоновкиДанных, СтруктураНастроек)
	
	ПараметрыСКД = СхемаКомпоновкиДанных.Параметры;
	
	ПараметрНаправлениеДеятельности = ПараметрыСКД.Найти(Новый ПараметрКомпоновкиДанных("НаправлениеДеятельности"));
	
	Если ПараметрНаправлениеДеятельности <> Неопределено Тогда
		// ++ VOG Солодов В.В. 25.10.2019 
		ПараметрНаправлениеДеятельности.Значение = СтруктураНастроек.НаправлениеДеятельности;
		// До изменения
		//ПараметрНаправлениеДеятельности.Значение = НаправлениеДеятельности;
		// -- VOG Солодов В.В. 25.10.2019
	КонецЕсли;
	
	ПараметрПериодПланирования = ПараметрыСКД.Найти(Новый ПараметрКомпоновкиДанных("ПериодПланирования"));
	
	Если ПараметрПериодПланирования <> Неопределено Тогда
		ПараметрПериодПланирования.Значение = СтруктураНастроек.ПериодПланирования;
	КонецЕсли;
	
	ПараметрКоличествоМесяцев = ПараметрыСКД.Найти(Новый ПараметрКомпоновкиДанных("КоличествоМесяцев"));
	
	Если ПараметрКоличествоМесяцев <> Неопределено Тогда
		ПараметрКоличествоМесяцев.Значение = Месяц(ТекущаяДатаСеанса()) - 1;
	КонецЕсли;
	
	ПараметрТекущаяДата = ПараметрыСКД.Найти(Новый ПараметрКомпоновкиДанных("ТекущаяДата"));
	
	Если ПараметрТекущаяДата <> Неопределено Тогда
		ПараметрТекущаяДата.Значение = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПараметрКлассификатор = ПараметрыСКД.Найти(Новый ПараметрКомпоновкиДанных("Классификатор"));
	
	Если ПараметрКлассификатор <> Неопределено Тогда
		
		КлассификаторУИН 	= Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8");
		Классификатор 		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(КлассификаторУИН);
		ПараметрКлассификатор.Значение = Классификатор;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли