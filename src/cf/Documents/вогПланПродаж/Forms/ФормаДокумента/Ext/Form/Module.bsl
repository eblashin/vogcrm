
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ПодразделениеПользователя 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущийПользователь,
		"Подразделение",
		Истина);
		
	// +++ VOG Кулаков П.Л. 06.08.2020 CRM-526
	Объект.Ответственный = ТекущийПользователь;
	// --- VOG Кулаков П.Л.	
		
	Подразделение = Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(ПодразделениеПользователя);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//++ VOG Иванов С.А. 11.11.2019 ID заявки: 000000848 
		//Если Параметры.ЗначениеКопирования = Документы.вогПланПродаж.ПустаяСсылка() Тогда
		//	
		//	Объект.НаправлениеДеятельности = 
		//		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "CRM_НаправлениеДеятельности");
		//	
		//КонецЕсли;
		//-- VOG Иванов С.А. 11.11.2019 ID заявки: 000000848 
		Объект.ИдентификаторДокумента 	= Новый УникальныйИдентификатор();
		Объект.Статус 					= Справочники.вогШаблоныСтатусов.Зарегистрирован;
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	УстановитьДоступностьЭлементовФормы();
	ДозаполнитьТаблицуПланирования();
	ИнициализироватьСхемуКомпоновки();
	Если Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои тогда
		Элементы.ПланированиеСредниеПродажиЗаТекущийГод.Заголовок = "Сред. продажи за год, шт";
		Элементы.ПланированиеИтогоПланМ2.Видимость = Ложь;	
	ИначеЕсли Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.плитка тогда
		Элементы.ПланированиеСредниеПродажиЗаТекущийГод.Заголовок = "Сред. продажи за год, м2";
		Элементы.ПланированиеИтогоПланМ2.Видимость = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Для Каждого СтрокаПланирование Из Объект.Планирование Цикл
		
		ФлагОтказа = Ложь;
		
		Если СтрокаПланирование.КоличествоНашихSKU053 > СтрокаПланирование.КоличествоSKUНаПолках053 Тогда
			
			ФлагОтказа = Истина;
			
			ШаблонСообщения = НСтр("ru = 'В строке %1 количество наших SKU 0,53 превышает количество SKU на полках 0,53. 
				|Продолжение невозможно.'");
			
			ИмяРеквизита = "КоличествоНашихSKU053";
			
		КонецЕсли;
		
		Если СтрокаПланирование.КоличествоНашихSKU106 > СтрокаПланирование.КоличествоSKUНаПолках106 Тогда
			
			ФлагОтказа = Истина;
			
			ШаблонСообщения = НСтр("ru = 'В строке %1 количество наших SKU 1,06 превышает количество SKU на полках 1,06.
				|Продолжение невозможно.'");
			
			ИмяРеквизита = "КоличествоНашихSKU106";
			
		КонецЕсли;
		
		Если ФлагОтказа Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, СтрокаПланирование.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Объект.Планирование",
				СтрокаПланирование.НомерСтроки,
				ИмяРеквизита);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле,, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.Автор) Тогда
		Объект.Автор = ТекущийПользователь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	ТекущийОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 22.06.2020 CRM-526
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ДозаполнитьТаблицуПланирования();
	
КонецПроцедуры // --- VOG Кулаков П.Л. 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланирование

&НаКлиенте
Процедура ПланированиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если Поле.Имя = "ПланированиеПартнер" Тогда
			ПоказатьЗначение(Неопределено, ТекущиеДанные.Партнер);
		ИначеЕсли Поле.Имя = "ПланированиеТРТ" Тогда
			ПоказатьЗначение(Неопределено, ТекущиеДанные.ТРТ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеКоличествоSKUНаПолках053ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено И ТекущиеДанные.КоличествоSKUНаПолках053 > 0 Тогда
		ТекущиеДанные.ДоляВОГ053 = (ТекущиеДанные.КоличествоНашихSKU053 / ТекущиеДанные.КоличествоSKUНаПолках053) * 100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеКоличествоSKUНаПолках106ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено И ТекущиеДанные.КоличествоSKUНаПолках106 > 0 Тогда
		ТекущиеДанные.ДоляВОГ106 = (ТекущиеДанные.КоличествоНашихSKU106 / ТекущиеДанные.КоличествоSKUНаПолках106) * 100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеКоличествоНашихSKU053ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено И ТекущиеДанные.КоличествоSKUНаПолках053 > 0 Тогда
		ТекущиеДанные.ДоляВОГ053 = (ТекущиеДанные.КоличествоНашихSKU053 / ТекущиеДанные.КоличествоSKUНаПолках053) * 100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеКоличествоНашихSKU106ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено И ТекущиеДанные.КоличествоSKUНаПолках106 > 0 Тогда
		ТекущиеДанные.ДоляВОГ106 = (ТекущиеДанные.КоличествоНашихSKU106 / ТекущиеДанные.КоличествоSKUНаПолках106) * 100;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекНастройкиОтбор

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	
	КомпоновщикНастроекНастройкиОтборПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПереходСтраницы(Команда)
	
	ВыполнитьПереходСтраницы(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланирование(Команда)
	
	// +++  Кулаков П.Л. CRM-509
	//Если Объект.Планирование.Количество() = 0 Тогда
	//	
	//	ТекстСообщения = НСтр("ru = 'Не заполнена табличная часть Планирование. Продолжение невозможно.'");
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	// --- Кулаков П.Л.
	
	ЗаполнитьПланированиеНаСервере();
	
КонецПроцедуры

// ++ VOG Солодов В.В. 21.01.2020 CRM-100
&НаКлиенте
Процедура ЗаполнитьПоПредыдущему(Команда)
	
	ПараметрыФормыВыбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		ПараметрыФормыВыбора.Вставить("НаправлениеДеятельности", 	Объект.НаправлениеДеятельности);
	Иначе
		ПараметрыФормыВыбора.Вставить(
			"НаправлениеДеятельности",
			ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "CRM_НаправлениеДеятельности"));
	КонецЕсли;
	ПараметрыФормыВыбора.Вставить("СценарийПланирования", 			Объект.СценарийПланирования);
	ПараметрыФормыВыбора.Вставить("ВерсияСценария", 				Объект.ВерсияСценария);
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ЗаполнитьПоПредыдущемуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Документ.вогПланПродаж.Форма.ФормаВыбораСценарияВерсии",
		ПараметрыФормыВыбора,
		ЭтотОбъект,
		ЭтотОбъект,
		,
		,
		ОповещениеОВыборе,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПредыдущемуЗавершение(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоПредыдущемуНаСервере(СтруктураПараметров);
	
КонецПроцедуры
// -- VOG Солодов В.В. 21.01.2020

&НаКлиенте
Процедура ВыгрузитьПлан(Команда)
	
	Диалог 						= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок 			= "Сохранение в Excel";
	Диалог.МножественныйВыбор 	= Ложь;
	Диалог.ИндексФильтра 		= 0;
	Диалог.Фильтр 				= "Лист Excel (*.xlsx)|*.xlsx";
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Диалог", Диалог);
	
	Диалог.Показать(Новый ОписаниеОповещения("ВыгрузитьПланЗавершение", ЭтотОбъект, ПараметрыОповещения));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПланЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Состояние(
		НСтр("ru = 'Выполняется выгрузка данных в Excel. Пожалуйста подождите...'")
		,
		,
		,
		БиблиотекаКартинок.Информация32);
	
	ТабличныйДокумент = ВыгрузитьПланНаСервере();
	
	ВременныйФайл = ПолучитьИмяВременногоФайла(".xlsx");
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ПутьКФайлу", 		Диалог.ПолноеИмяФайла);
	ПараметрыОповещения.Вставить("ВременныйФайл", 	ВременныйФайл);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаписьФайлаЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ТабличныйДокумент.НачатьЗапись(ОповещениеОЗавершении, ВременныйФайл, ТипФайлаТабличногоДокумента.XLSX);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Приложение = ПолучитьПриложениеExcel();
	
	Если Приложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		
		Книга 		= Приложение.WorkBooks.Open(ДополнительныеПараметры.ВременныйФайл);
		Лист 		= Книга.WorkSheets(1);
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		УдалитьФайлы(ДополнительныеПараметры.ВременныйФайл);
		
		Возврат;
		
	КонецПопытки;
		
	КоличествоСтрок = ПолучитьКоличествоСтрокExcel(Приложение);
	
	// Скрытие служебных строк и колонок
	Лист.Rows(1).Hidden 						= True;
	Лист.Columns(20).Hidden 					= True;
	Лист.Columns(21).Hidden 					= True;
	Лист.Columns(22).Hidden 					= True;
	
	// Снятие защиты с колонок (которые разрешено редактировать)
	Лист.Columns(7).Locked 						= False;
	
	Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда
		
		Лист.Columns(19).Locked 					= False;
		
		Для НомерКолонки = 12 По 17 Цикл
			Лист.Columns(НомерКолонки).Locked 		= False;
		КонецЦикла;
		
	Иначе
		
		Лист.Columns(18).Locked 					= False;
		Лист.Columns(19).Locked 					= False;
		
		Для НомерКолонки = 13 По 16 Цикл
			Лист.Columns(НомерКолонки).Locked 		= False;
		КонецЦикла;
		
	КонецЕсли;
	
	Для НомерСтроки = 3 По КоличествоСтрок Цикл
		
		// Список выбора категории
		Лист.Cells(НомерСтроки, 7).Validation.Add(3, 1, 1, ("A - класс;B - класс;C - класс"));
		Лист.Cells(НомерСтроки, 7).Validation.IgnoreBlank 		= True;
		Лист.Cells(НомерСтроки, 7).Validation.InCellDropdown 	= True;
		Лист.Cells(НомерСтроки, 7).Validation.ShowInput 		= True;
		Лист.Cells(НомерСтроки, 7).Validation.ShowError 		= True;
		
		Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда
			// Список выбора наличия рулонов на полу
			Лист.Cells(НомерСтроки, 14).Validation.Add(3, 1, 1, ("Да;Нет"));
			Лист.Cells(НомерСтроки, 14).Validation.IgnoreBlank 		= True;
			Лист.Cells(НомерСтроки, 14).Validation.InCellDropdown 	= True;
			Лист.Cells(НомерСтроки, 14).Validation.ShowInput 		= True;
			Лист.Cells(НомерСтроки, 14).Validation.ShowError 		= True;
		КонецЕсли;
		
	КонецЦикла;
	
	// Фильтр
	Лист.Cells.Range(Лист.Cells(2, 1), Лист.Cells(2, 19)).AutoFilter();
	
	// Снятие защиты с шапки таблицы
	Лист.Rows(2).Locked 						= False;
	
	// Закрепление первой (видимой) строки
	Приложение.ActiveWindow.SplitRow 			= 1;
	Приложение.ActiveWindow.FreezePanes 		= True;
	
	// Установка защиты листа
	Лист.Protect("Data17012019", 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0);
	
	Приложение.Visible 							= False;
	Приложение.ActiveWindow.DisplayWorkbookTabs = True;
	Приложение.ActiveWindow.TabRatio 			= 0.6;
	Приложение.ActiveWorkbook.SaveAs(ДополнительныеПараметры.ПутьКФайлу, 51);
	Приложение.Application.Quit();
	
	// ++ VOG Солодов В.В. 10.04.2020 CRM-525
	// Добавлена попытка
	Попытка
		УдалитьФайлы(ДополнительныеПараметры.ВременныйФайл);
	Исключение
	КонецПопытки;
	// -- VOG Солодов В.В. 10.04.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПлан(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Загрузка из Excel";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ИндексФильтра = 0;
	Диалог.Фильтр = "Лист Excel (*.xlsx)|*.xlsx";
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Диалог", Диалог);
	
	Диалог.Показать(Новый ОписаниеОповещения("ЗагрузитьПланЗавершение", ЭтотОбъект, ПараметрыОповещения));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПланЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Состояние(
		НСтр("ru = 'Выполняется загрузка данных из Excel. Пожалуйста подождите...'")
		,
		,
		,
		БиблиотекаКартинок.Информация32);
	
	Приложение = ПолучитьПриложениеExcel();
	
	Если Приложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Книга 	= Приложение.Workbooks.Open(Диалог.ПолноеИмяФайла);
		Лист 	= Книга.WorkSheets(1);
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецПопытки;
	
	// Снятие защиты с листа
	Лист.Unprotect("Data17012019");
	
	// Проверка соответствия идентификатора загружаемого файла идентификатору документа
	Если Не Объект.ИдентификаторДокумента = Лист.Cells(1, 1).Value Тогда
		
		ТекстСообщения = НСтр("ru = 'Загружаемый файл не соответствует выгруженному.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = ПолучитьКоличествоСтрокExcel(Приложение);
	
	МассивСтрок = Новый Массив;
	
	// Формирование массива структур строк
	Для НомерСтроки = 3 По КоличествоСтрок Цикл
		
		СтруктураСтроки = Новый Структура;
		
		СтруктураСтроки.Вставить("Регион", 						Лист.Cells(НомерСтроки, 1).Value);
		СтруктураСтроки.Вставить("МуниципальныйРайон", 			Лист.Cells(НомерСтроки, 2).Value);
		СтруктураСтроки.Вставить("ГородскоеНаселениеРайона", 	Лист.Cells(НомерСтроки, 3).Value);
		СтруктураСтроки.Вставить("СельскоеНаселениеРайона", 	Лист.Cells(НомерСтроки, 4).Value);
		СтруктураСтроки.Вставить("НаселенныйПункт", 			Лист.Cells(НомерСтроки, 5).Value);
		СтруктураСтроки.Вставить("ГородскоеНаселение", 			Лист.Cells(НомерСтроки, 6).Value);
		СтруктураСтроки.Вставить("КатегорияПартнера", 			Лист.Cells(НомерСтроки, 7).Value);
		СтруктураСтроки.Вставить("Партнер", 					Лист.Cells(НомерСтроки, 8).Value);
		СтруктураСтроки.Вставить("ТРТ", 						Лист.Cells(НомерСтроки, 9).Value);
		СтруктураСтроки.Вставить("Вид", 						Лист.Cells(НомерСтроки, 10).Value);
		СтруктураСтроки.Вставить("ПартнерУИД", 					Лист.Cells(НомерСтроки, 20).Value);
		СтруктураСтроки.Вставить("ТРТУИД", 						Лист.Cells(НомерСтроки, 21).Value);
		СтруктураСтроки.Вставить("СтатусТТУИД", 				Лист.Cells(НомерСтроки, 22).Value);
		//Кайдашов 21/02/20
		//		НаправлениеДеятельности = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.СценарийПланирования, "НаправлениеДеятельности"); //+ VOG Иванов С.А. 11.11.2019 ID заявки: 000000848 
		// +++ Кулаков П.Л. CRM-709 11.06.2020
		Если Объект.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Обои") Тогда
		// --- Кулаков П.Л.
			
			СтруктураСтроки.Вставить("КоличествоSKUНаПолках053", 	СтрЗаменить(Лист.Cells(НомерСтроки, 12).Value," ",""));
			СтруктураСтроки.Вставить("КоличествоSKUНаПолках106", 	СтрЗаменить(Лист.Cells(НомерСтроки, 13).Value," ",""));
			СтруктураСтроки.Вставить("НаличиеРулоновНаПолу", 		СтрЗаменить(Лист.Cells(НомерСтроки, 14).Value," ",""));
			СтруктураСтроки.Вставить("КоличествоНашихSKU053", 		СтрЗаменить(Лист.Cells(НомерСтроки, 15).Value," ",""));
			СтруктураСтроки.Вставить("КоличествоНашихSKU106", 		СтрЗаменить(Лист.Cells(НомерСтроки, 16).Value," ",""));
			СтруктураСтроки.Вставить("Комментарий", 				СтрЗаменить(Лист.Cells(НомерСтроки, 17).Value," ",""));
			СтруктураСтроки.Вставить("СредняяЗаТекущийГод", 		СтрЗаменить(Лист.Cells(НомерСтроки, 18).Value," ",""));
			СтруктураСтроки.Вставить("ЦельСледГод", 				СтрЗаменить(Лист.Cells(НомерСтроки, 19).Value," ",""));
			
		// +++ Кулаков П.Л. CRM-709 11.06.2020
		ИначеЕсли Объект.НаправлениеДеятельности = 
		// --- Кулаков П.Л 
			ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Плитка") Тогда
			
			// +++ Кулаков П.Л. CRM-512
			//СтруктураСтроки.Вставить("Бренд", 					СтрЗаменить(Лист.Cells(НомерСтроки, 12).Value," ",""));
			СтруктураСтроки.Вставить("Бренд", 						СокрЛП(Лист.Cells(НомерСтроки, 12).Value));
			// --- Кулаков П.Л.
			СтруктураСтроки.Вставить("КоличествоПланшет", 			СтрЗаменить(Лист.Cells(НомерСтроки, 13).Value," ",""));
			СтруктураСтроки.Вставить("КоличествоШтучный", 			СтрЗаменить(Лист.Cells(НомерСтроки, 14).Value," ",""));
			СтруктураСтроки.Вставить("Доля", 						СтрЗаменить(Лист.Cells(НомерСтроки, 15).Value," ",""));
			СтруктураСтроки.Вставить("Комментарий", 				СтрЗаменить(Лист.Cells(НомерСтроки, 16).Value," ",""));
			СтруктураСтроки.Вставить("СредняяЗаТекущийГод", 		СтрЗаменить(Лист.Cells(НомерСтроки, 17).Value," ",""));
			СтруктураСтроки.Вставить("ЦельПоЭкспозиции", 			СтрЗаменить(Лист.Cells(НомерСтроки, 18).Value," ",""));
			СтруктураСтроки.Вставить("ЦельПрироста", 				СтрЗаменить(Лист.Cells(НомерСтроки, 19).Value," ",""));
			
		КонецЕсли;
		
		МассивСтрок.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Приложение.ActiveWorkbook.Close();
	
	ЗагрузитьПланированиеНаСервере(МассивСтрок);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьПереходСтраницы(ИмяКоманды)
	
	Попытка
		// Выделить кнопку перехода
		Для Каждого ЭлемКоманды Из Элементы.ГруппаКоманднаяПанельНавигация.ПодчиненныеЭлементы Цикл
			
			Если ИмяКоманды = ЭлемКоманды.ИмяКоманды Тогда
				ЭлемКоманды.ЦветТекста 		= Новый Цвет(128,0,128);
				ЭлемКоманды.Шрифт 			= Новый Шрифт(,10,Ложь,,Истина);
			Иначе
				ЭлемКоманды.ЦветТекста	 	= Новый Цвет(28,85,174);
				ЭлемКоманды.Шрифт		 	= Новый Шрифт(,10,Ложь,,Ложь);
			КонецЕсли;
			
		КонецЦикла;
		// Переход страницы
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[ИмяКоманды];
		
	Исключение
		ШаблонСообщения 	= НСтр("ru = 'Не удалось перейти на страницу %1'");
		ТекстСообщения 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяКоманды);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСхемуКомпоновки()
	
	СхемаКомпоновкиДанных 		= Документы.вогПланПродаж.ПолучитьМакет("СхемаЗаполнения");
	АдресСхемыКомпоновкиДанных 	= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	Для Каждого ПараметрСКД Из СхемаКомпоновкиДанных.Параметры Цикл
		ПараметрСКД.ВключатьВДоступныеПоля = Ложь;
	КонецЦикла;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	НастройкиКомпоновщика = Объект.Ссылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	Если Не ЗначениеЗаполнено(НастройкиКомпоновщика) Тогда
		
		НастройкиКомпоновщика = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
		СтатусТТ_УИН 	= Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8");
		СтатусТТ 		= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(СтатусТТ_УИН);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			НастройкиКомпоновщика.Отбор,
			"СтатусТТ",
			СтатусТТ,
			ВидСравненияКомпоновкиДанных.НеРавно,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); // ++ VOG Солодов В.В. 10.04.2020 CRM-549
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			НастройкиКомпоновщика.Отбор,
			"Подразделение",
			Подразделение,
			ВидСравненияКомпоновкиДанных.ВИерархии,
			,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); // ++ VOG Солодов В.В. 10.04.2020 CRM-549
		
		// ++ VOG Солодов В.В. 10.04.2020 CRM-549
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			НастройкиКомпоновщика.Отбор,
			"ТРТ.Розничный",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно,
			"Не розничный",
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		// -- VOG Солодов В.В. 10.04.2020
		
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 10.04.2020 CRM-549
	// Для совместимости со старыми документами
	Для Каждого ЭлементОтбора Из НастройкиКомпоновщика.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный Тогда
			
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(
				НастройкиКомпоновщика.Отбор,
				Строка(ЭлементОтбора.ЛевоеЗначение),
				,
				ЭлементОтбора.ПравоеЗначение,
				ЭлементОтбора.ВидСравнения, Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			
		КонецЕсли;
		
	КонецЦикла;
	// -- VOG Солодов В.В. 10.04.2020
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщика);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	НастройкиКомпоновкиДанных 		= КомпоновщикНастроек.ПолучитьНастройки();
	АдресНастроекКомпоновкиДанных 	= 
		ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланированиеБренд.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НаправленияДеятельности.Обои;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланированиеКоличествоSKUНаПолках053.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НаправленияДеятельности.Плитка;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланированиеКоличествоSKUНаПолках106.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НаправленияДеятельности.Плитка;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланированиеНаличиеРулоновНаПолу.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НаправленияДеятельности.Плитка;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланированиеКоличествоНашихSKU053.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НаправленияДеятельности.Плитка;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланированиеКоличествоНашихSKU106.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НаправленияДеятельности.Плитка;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланированиеКоличествоПланшет.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НаправленияДеятельности.Обои;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланированиеКоличествоШтучный.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НаправленияДеятельности.Обои;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланированиеДоля.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НаправленияДеятельности.Обои;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланированиеДоляВОГ053.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НаправленияДеятельности.Плитка;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланированиеДоляВОГ106.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НаправленияДеятельности.Плитка;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланированиеЦельПоЭкспозиции.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НаправленияДеятельности.Обои;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланированиеЦельПрироста.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НаправленияДеятельности.Обои;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланированиеЦельСрМесПродажи.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.НаправленияДеятельности.Плитка;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 21.01.2020 CRM-159
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(Объект.Автор);
	
	ЭтоДелегат = РегистрыСведений.вогИсполнителиРолейИДелегаты.ИсполнительЯвляетсяДелегатом(
		МассивПользователей, Пользователи.ТекущийПользователь(), "КлиентскаяБаза", Истина);
	
	Если Не РольДоступна("ПолныеПрава") И Не ТекущийПользователь = Объект.Автор И Не ЭтоДелегат Тогда
	// До изменения
	//Если Не РольДоступна("ПолныеПрава") И Не ТекущийПользователь = Объект.Автор Тогда
	// -- VOG Солодов В.В. 21.01.2020
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаШапка", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаНастройки", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПланированиеЗаполнитьПланирование",
			"Доступность",
			Ложь);
			
		Если Объект.Статус = Справочники.вогШаблоныСтатусов.Согласован Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"Планирование",
				"ТолькоПросмотр",
				Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ПланированиеВыгрузить",
				"Доступность",
				Ложь);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ПланированиеЗагрузить",
				"Доступность",
				Ложь);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ФормаУстановитьПометкуУдаления",
				"Доступность",
				Ложь);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ФормаОтменаПроведения",
				"Доступность",
				Ложь);
				
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПланированиеНаСервере()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("АдресСхемыКомпоновкиДанных", 		АдресСхемыКомпоновкиДанных);
	СтруктураНастроек.Вставить("АдресНастроекКомпоновкиДанных", 	АдресНастроекКомпоновкиДанных);
	//Кайдашов 27/02/20
	СтруктураНастроек.Вставить("НаправлениеДеятельности", 			Объект.НаправлениеДеятельности);
	СтруктураНастроек.Вставить("ПериодПланирования", 				Объект.ПериодПланирования);
	//++ VOG Иванов С.А. 11.11.2019 ID заявки: 000000848
	//СтруктураРекизитовСценария = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СценарийПланирования, "НаправлениеДеятельности, ПериодПланирования");
	//СтруктураНастроек.Вставить("НаправлениеДеятельности", 			СтруктураРекизитовСценария.НаправлениеДеятельности);
	//СтруктураНастроек.Вставить("ПериодПланирования", 				СтруктураРекизитовСценария.ПериодПланирования);
	//-- VOG Иванов С.А. 11.11.2019 ID заявки: 000000848
	ТаблицаРезультат = Документы.вогПланПродаж.ПолучитьРезультатВыполненияСКД(СтруктураНастроек);
	
	Объект.Планирование.Загрузить(ТаблицаРезультат);
	
	ДозаполнитьТаблицуПланирования();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьПланНаСервере()
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	СпрОбъект 		= РеквизитФормыВЗначение("Объект");
	//++ VOG Иванов С.А. 11.11.2019 ID заявки: 000000848 
	//Если Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои Тогда
	//	Макет 		= СпрОбъект.ПолучитьМакет("ШаблонЗаполненияОбои");
	//ИначеЕсли Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
	//	Макет 		= СпрОбъект.ПолучитьМакет("ШаблонЗаполненияПлитка");
	//КонецЕсли;
	НаправлениеДеятельности = Объект.НаправлениеДеятельности; //Кайдашов 587
	Если НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои Тогда
		Макет 		= СпрОбъект.ПолучитьМакет("ШаблонЗаполненияОбои");
	ИначеЕсли НаправлениеДеятельности = Справочники.НаправленияДеятельности.Плитка Тогда
		Макет 		= СпрОбъект.ПолучитьМакет("ШаблонЗаполненияПлитка");
	КонецЕсли;
	//-- VOG Иванов С.А. 11.11.2019 ID заявки: 000000848 
	ОбластьУИН 		= Макет.ПолучитьОбласть("ОбластьУИН");
	ОбластьШапка 	= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрока 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	ОбластьУИН.Параметры.УИН = Объект.ИдентификаторДокумента;
	
	ТабличныйДокумент.Вывести(ОбластьУИН);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Для Каждого СтрокаТЧ Из Объект.Планирование Цикл
		
		ОбластьСтрока.Параметры.Заполнить(СтрокаТЧ);
		ОбластьСтрока.Параметры.ПартнерУИД 	= СтрокаТЧ.Партнер.УникальныйИдентификатор();
		ОбластьСтрока.Параметры.ТРТУИД 		= СтрокаТЧ.ТРТ.УникальныйИдентификатор();
		ОбластьСтрока.Параметры.СтатусТТУИД = СтрокаТЧ.СтатусТТ.УникальныйИдентификатор();
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПланированиеНаСервере(МассивСтрок)
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Планирование.Очистить();
	
	Для Каждого СтруктураСтроки Из МассивСтрок Цикл
		
		НоваяСтрока = Объект.Планирование.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
		
		// Регион
		Если ЗначениеЗаполнено(СтруктураСтроки.Регион) Тогда
			
			НоваяСтрока.Регион 	= Справочники.вогНаселенныеПункты.НайтиПоНаименованию(СтруктураСтроки.Регион, Истина);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Регион) Тогда
				
				ШаблонСообщения = НСтр("ru = 'В строке %1 не найден регион с наименованием %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения,
					НоваяСтрока.НомерСтроки,
					СтруктураСтроки.Регион);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Муниципальный район
		Если ЗначениеЗаполнено(СтруктураСтроки.МуниципальныйРайон) Тогда
			
			НоваяСтрока.МуниципальныйРайон 	= Справочники.вогНаселенныеПункты.НайтиПоНаименованию(
				СтруктураСтроки.МуниципальныйРайон,
				Истина,
				НоваяСтрока.Регион);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.МуниципальныйРайон) Тогда
				
				ШаблонСообщения = НСтр("ru = 'В строке %1 не найден муниципальный район с наименованием %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения,
					НоваяСтрока.НомерСтроки,
					СтруктураСтроки.МуниципальныйРайон);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Населенный пункт
		Если ЗначениеЗаполнено(СтруктураСтроки.НаселенныйПункт) Тогда
			
			НоваяСтрока.НаселенныйПункт 	= Справочники.вогНаселенныеПункты.НайтиПоНаименованию(
				СтруктураСтроки.НаселенныйПункт,
				Истина,
				НоваяСтрока.МуниципальныйРайон);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.НаселенныйПункт) Тогда
				
				ШаблонСообщения = НСтр("ru = 'В строке %1 не найден населенный пункт с наименованием %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения,
					НоваяСтрока.НомерСтроки,
					СтруктураСтроки.НаселенныйПункт);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Партнер
		Если ЗначениеЗаполнено(СтруктураСтроки.ПартнерУИД) Тогда
			
			УИД 	= Новый УникальныйИдентификатор(СтруктураСтроки.ПартнерУИД);
			Партнер = Справочники.Партнеры.ПолучитьСсылку(УИД);
			
			Если ОбщегоНазначения.СсылкаСуществует(Партнер) Тогда
				НоваяСтрока.Партнер = Партнер;
			Иначе
				
				ШаблонСообщения = НСтр("ru = 'В строке %1 не найден партнер.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения,
					НоваяСтрока.НомерСтроки);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		Иначе
			
			ШаблонСообщения = НСтр("ru = 'В строке %1 не найден партнер.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				НоваяСтрока.НомерСтроки);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		// Торговая точка
		Если ЗначениеЗаполнено(СтруктураСтроки.ТРТУИД) Тогда
			
			УИД 			= Новый УникальныйИдентификатор(СтруктураСтроки.ТРТУИД);
			ТорговаяТочка 	= Справочники.вогТорговыеТочки.ПолучитьСсылку(УИД);
			
			Если ОбщегоНазначения.СсылкаСуществует(ТорговаяТочка) Тогда
				НоваяСтрока.ТРТ = ТорговаяТочка;
			Иначе
				
				ШаблонСообщения = НСтр("ru = 'В строке %1 не найдена торговая точка.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения,
					НоваяСтрока.НомерСтроки);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		Иначе
			
			ШаблонСообщения = НСтр("ru = 'В строке %1 не найдена торговая точка.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				НоваяСтрока.НомерСтроки);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		// Вид ТТ
		Если ЗначениеЗаполнено(СтруктураСтроки.Вид) Тогда
			
			НоваяСтрока.Вид = Справочники.вогВидыТорговыхТочек.НайтиПоНаименованию(СтруктураСтроки.Вид, Истина);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Вид) Тогда
				
				ШаблонСообщения = НСтр("ru = 'В строке %1 не найден вид торговой точки с наименованием %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения,
					НоваяСтрока.НомерСтроки,
					СтруктураСтроки.Вид);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Статус
		Если ЗначениеЗаполнено(СтруктураСтроки.СтатусТТУИД) Тогда
			
			УИД 		= Новый УникальныйИдентификатор(СтруктураСтроки.СтатусТТУИД);
			СтатусТТ 	= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(УИД);
			
			Если ОбщегоНазначения.СсылкаСуществует(СтатусТТ) Тогда
				НоваяСтрока.СтатусТТ = СтатусТТ;
			ИначеЕсли Не СтатусТТ = Справочники.CRM_ЗначенияКлассификаторов.ПустаяСсылка() Тогда
				
				ШаблонСообщения = НСтр("ru = 'В строке %1 не найден статус торговой точки.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения,
					НоваяСтрока.НомерСтроки);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Категория партнера
		Если ЗначениеЗаполнено(СтруктураСтроки.КатегорияПартнера) Тогда
			Если СтруктураСтроки.КатегорияПартнера = "A - класс" Тогда
				НоваяСтрока.КатегорияПартнера = Перечисления.ABCКлассификация.AКласс;
			ИначеЕсли СтруктураСтроки.КатегорияПартнера = "B - класс" Тогда
				НоваяСтрока.КатегорияПартнера = Перечисления.ABCКлассификация.BКласс;
			ИначеЕсли СтруктураСтроки.КатегорияПартнера = "C - класс" Тогда
				НоваяСтрока.КатегорияПартнера = Перечисления.ABCКлассификация.CКласс;
			КонецЕсли;
		КонецЕсли;
		
		// Бренд
		Если СтруктураСтроки.Свойство("Бренд") И ЗначениеЗаполнено(СтруктураСтроки.Бренд) Тогда
		//Кайдашов 587 +++
			Если  нрег(СтруктураСтроки.Бренд)="conceptgt" тогда
				СтруктураСтроки.Бренд = "CONCEPT GT";
			КонецЕсли;
			Если  нрег(СтруктураСтроки.Бренд)="intergres" тогда
				СтруктураСтроки.Бренд = "INTER GRES";
			КонецЕсли;
		//Кайдашов 587 ---
		
			НоваяСтрока.Бренд = Справочники.вогБренды.НайтиПоНаименованию(СтруктураСтроки.Бренд, Истина);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Бренд) Тогда
				
				ШаблонСообщения = НСтр("ru = 'В строке %1 не найден бренд с наименованием %2.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения,
					НоваяСтрока.НомерСтроки,
					СтруктураСтроки.Бренд);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Наличие рулонов на полу
		Если СтруктураСтроки.Свойство("НаличиеРулоновНаПолу") Тогда
			
			Если НРег(СтруктураСтроки.НаличиеРулоновНаПолу) = "да" Тогда
				НоваяСтрока.НаличиеРулоновНаПолу = Истина;
			Иначе
				НоваяСтрока.НаличиеРулоновНаПолу = Ложь;
			КонецЕсли;
				
		КонецЕсли;
		
		// Доля ВОГ
		Если СтруктураСтроки.Свойство("КоличествоНашихSKU053") Тогда
			
			Если Число(НоваяСтрока.КоличествоSKUНаПолках053) > 0 Тогда
				НоваяСтрока.ДоляВОГ053 = (Число(НоваяСтрока.КоличествоНашихSKU053) / Число(НоваяСтрока.КоличествоSKUНаПолках053)) * 100;
			КонецЕсли;
			
			Если Число(НоваяСтрока.КоличествоSKUНаПолках106) > 0 Тогда
				НоваяСтрока.ДоляВОГ106 = (Число(НоваяСтрока.КоличествоНашихSKU106) / Число(НоваяСтрока.КоличествоSKUНаПолках106)) * 100;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	ДозаполнитьТаблицуПланирования();	
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПриложениеExcel()
	
	Попытка
		
		Приложение = Новый COMОбъект("Excel.Application");
		Приложение.DisplayAlerts = False;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Приложение = Неопределено;
		
	КонецПопытки;
	
	Возврат Приложение;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКоличествоСтрокExcel(Приложение)
	
	ВерсияПриложения 	= Приложение.Version;
	Версия 				= Лев(ВерсияПриложения, Найти(ВерсияПриложения, ".") - 1);
	
	Если Версия = "8" Тогда
		КоличествоСтрок 	= Приложение.Cells.CurrentRegion.Rows.Count;
	Иначе
		КоличествоСтрок	= Приложение.Cells(1,1).SpecialCells(11).Row;
		КоличествоСтрок 	= Приложение.Cells.CurrentRegion.Rows.Count;
	Конецесли;
	
	Возврат КоличествоСтрок;
	
КонецФункции
// -- VOG Солодов В.В. 12.11.2019

&НаСервере
Процедура ОбновитьПланированиеНаСервере()
	
	тзБылоДоОбновления = Объект.Планирование.Выгрузить();
	ЗаполнитьПланированиеНаСервере();	
	Для каждого СтрокаТЧ из Объект.Планирование цикл
		
		структураПоиска = Новый Структура;
		структураПоиска.Вставить("Бренд",СтрокаТЧ.Бренд);
		структураПоиска.Вставить("ТРТ",СтрокаТЧ.ТРТ);
		НайденныеРанееЗаполненныеСтроки = тзБылоДоОбновления.НайтиСтроки(структураПоиска);
		Если НайденныеРанееЗаполненныеСтроки.Количество()>0 тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,НайденныеРанееЗаполненныеСтроки[0],,"Регион,МуниципальныйРайон,НаселенныйПункт,ГородскоеНаселениеРайона,СельскоеНаселениеРайона,ГородскоеНаселение,КатегорияПартнера,Вид");
		КонецЕсли;
		
	КонецЦикла;
	
	// +++ Кулаков П.Л. CRM-509
	ИтогоПланМ2 = Объект.Планирование.Итог("ИтогоПланМ2");
	// --- Кулаков П.Л.
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПланирование(Команда)
	ОбновитьПланированиеНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура РассчитатьПоСтрокеПланирования(ТекущиеДанныеСтроки)
	
	ТекущиеДанныеСтроки.ИтогоПланМ2 = ТекущиеДанныеСтроки.ЦельПрироста + ТекущиеДанныеСтроки.ЦельПоЭкспозиции;
	ИтогоПланМ2 = Объект.Планирование.Итог("ИтогоПланМ2");
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Планирование.ТекущиеДанные;
	РассчитатьПоСтрокеПланирования(ТекущиеДанные);	
	
КонецПроцедуры

// ++ VOG Солодов В.В. 12.11.2019 bugs851
&НаСервере
Процедура КомпоновщикНастроекНастройкиОтборПриИзмененииНаСервере()
	
	НастройкиКомпоновкиДанных 		= КомпоновщикНастроек.ПолучитьНастройки();
	АдресНастроекКомпоновкиДанных 	= 
		ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, Новый УникальныйИдентификатор());
		
	Объект.ИдентификаторДокумента 	= Новый УникальныйИдентификатор();
	
	Модифицированность = Истина;
	
КонецПроцедуры

//++ VOG Иванов С.А. 11.11.2019 ID заявки: 000000848 
&НаСервере
Процедура СценарийПланированияПриИзмененииНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	вогВерсииСценариевПланирования.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.вогВерсииСценариевПланирования КАК вогВерсииСценариевПланирования
	               |ГДЕ
	               |	вогВерсииСценариевПланирования.Владелец = &Владелец
	               |	И НЕ вогВерсииСценариевПланирования.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", Объект.СценарийПланирования);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Объект.ВерсияСценария = Выборка.Ссылка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СценарийПланированияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.СценарийПланирования) Тогда
		СценарийПланированияПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СценарийПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НаправлениеДеятельности = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "CRM_НаправлениеДеятельности");
	Если ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
		СтандартнаяОбработка = ложь;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НаправлениеДеятельности", НаправлениеДеятельности);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
		ОкончаниеВыбораСценария = Новый ОписаниеОповещения("ВыборСценарияЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.вогСценарииПланирования.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,ОкончаниеВыбораСценария);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ВыборСценарияЗавершение(ВыбЗначение,ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(ВыбЗначение) Тогда
		Объект.СценарийПланирования = ВыбЗначение;
	КонецЕсли;
КонецПроцедуры

// ++ VOG Солодов В.В. 21.01.2020 CRM-100
&НаСервере
Процедура ЗаполнитьПоПредыдущемуНаСервере(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	// +++ Кулаков П.Л. CRM-526
	тзБылоДоОбновления = Объект.Планирование.Выгрузить();
	//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	вогПланПродажПланирование.Партнер КАК Партнер,
		//|	вогПланПродажПланирование.ТРТ КАК ТРТ,
		//|	вогПланПродажПланирование.Бренд КАК Бренд
		//|ПОМЕСТИТЬ ВТ_ТекущийПлан
		//|ИЗ
		//|	&ТаблицаПланирования КАК вогПланПродажПланирование
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	вогПланПродажПланирование.Ссылка КАК Ссылка,
		//|	вогПланПродажПланирование.Партнер КАК Партнер,
		//|	вогПланПродажПланирование.ТРТ КАК ТРТ,
		//|	вогПланПродажПланирование.Бренд КАК Бренд,
		//|	вогПланПродажПланирование.Ссылка.Дата КАК Дата,
		//|	вогПланПродажПланирование.КатегорияПартнера КАК КатегорияПартнера,
		//|	вогПланПродажПланирование.КоличествоSKUНаПолках053 КАК КоличествоSKUНаПолках053,
		//|	вогПланПродажПланирование.КоличествоSKUНаПолках106 КАК КоличествоSKUНаПолках106,
		//|	вогПланПродажПланирование.НаличиеРулоновНаПолу КАК НаличиеРулоновНаПолу,
		//|	вогПланПродажПланирование.КоличествоНашихSKU053 КАК КоличествоНашихSKU053,
		//|	вогПланПродажПланирование.КоличествоНашихSKU106 КАК КоличествоНашихSKU106,
		//|	вогПланПродажПланирование.КоличествоПланшет КАК КоличествоПланшет,
		//|	вогПланПродажПланирование.КоличествоШтучный КАК КоличествоШтучный,
		//|	вогПланПродажПланирование.Доля КАК Доля,
		//|	вогПланПродажПланирование.Комментарий КАК Комментарий,
		//|	вогПланПродажПланирование.ЦельПоЭкспозиции КАК ЦельПоЭкспозиции,
		//|	вогПланПродажПланирование.ЦельПрироста КАК ЦельПрироста,
		//|	вогПланПродажПланирование.ЦельСледГод КАК ЦельСледГод
		//|ПОМЕСТИТЬ ВТ_ПредыдущиеПланы
		//|ИЗ
		//|	Документ.вогПланПродаж.Планирование КАК вогПланПродажПланирование
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТекущийПлан КАК ВТ_ТекущийПлан
		//|		ПО вогПланПродажПланирование.Партнер = ВТ_ТекущийПлан.Партнер
		//|			И вогПланПродажПланирование.ТРТ = ВТ_ТекущийПлан.ТРТ
		//|			И вогПланПродажПланирование.Бренд = ВТ_ТекущийПлан.Бренд
		//|			И (вогПланПродажПланирование.Ссылка.НаправлениеДеятельности = &НаправлениеДеятельности)
		//|			И (вогПланПродажПланирование.Ссылка.СценарийПланирования = &СценарийПланирования)
		//|			И (вогПланПродажПланирование.Ссылка.ВерсияСценария = &ВерсияСценария)
		//|			И (вогПланПродажПланирование.Ссылка.Статус = &Статус)
		//|			И (вогПланПродажПланирование.Ссылка.Ответственный = &Ответственный)
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	МАКСИМУМ(ВТ_ПредыдущиеПланы.Дата) КАК Дата
		//|ПОМЕСТИТЬ ВТ_МаксДаты
		//|ИЗ
		//|	ВТ_ПредыдущиеПланы КАК ВТ_ПредыдущиеПланы
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ВТ_ПредыдущиеПланы.Партнер КАК Партнер,
		//|	ВТ_ПредыдущиеПланы.ТРТ КАК ТРТ,
		//|	ВТ_ПредыдущиеПланы.Бренд КАК Бренд,
		//|	ВТ_ПредыдущиеПланы.КатегорияПартнера КАК КатегорияПартнера,
		//|	ВТ_ПредыдущиеПланы.КоличествоSKUНаПолках053 КАК КоличествоSKUНаПолках053,
		//|	ВТ_ПредыдущиеПланы.КоличествоSKUНаПолках106 КАК КоличествоSKUНаПолках106,
		//|	ВТ_ПредыдущиеПланы.НаличиеРулоновНаПолу КАК НаличиеРулоновНаПолу,
		//|	ВТ_ПредыдущиеПланы.КоличествоНашихSKU053 КАК КоличествоНашихSKU053,
		//|	ВТ_ПредыдущиеПланы.КоличествоНашихSKU106 КАК КоличествоНашихSKU106,
		//|	ВТ_ПредыдущиеПланы.КоличествоПланшет КАК КоличествоПланшет,
		//|	ВТ_ПредыдущиеПланы.КоличествоШтучный КАК КоличествоШтучный,
		//|	ВТ_ПредыдущиеПланы.Доля КАК Доля,
		//|	ВТ_ПредыдущиеПланы.Комментарий КАК Комментарий,
		//|	ВТ_ПредыдущиеПланы.ЦельПоЭкспозиции КАК ЦельПоЭкспозиции,
		//|	ВТ_ПредыдущиеПланы.ЦельПрироста КАК ЦельПрироста,
		//|	ВТ_ПредыдущиеПланы.ЦельСледГод КАК ЦельСледГод
		//|ИЗ
		//|	ВТ_ПредыдущиеПланы КАК ВТ_ПредыдущиеПланы
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксДаты КАК ВТ_МаксДаты
		//|		ПО ВТ_ПредыдущиеПланы.Дата = ВТ_МаксДаты.Дата";
		
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	вогПланПродажПланирование.Партнер КАК Партнер,
	//               |	вогПланПродажПланирование.ТРТ КАК ТРТ,
	//               |	вогПланПродажПланирование.Бренд КАК Бренд
	//               |ПОМЕСТИТЬ ВТ_ТекущийПлан
	//               |ИЗ
	//               |	&ТаблицаПланирования КАК вогПланПродажПланирование
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//               |	ВТ_ТекущийПлан.Партнер КАК Партнер,
	//               |	ВТ_ТекущийПлан.ТРТ КАК ТРТ,
	//               |	ВТ_ТекущийПлан.Бренд КАК Бренд,
	//               |	ЕСТЬNULL(ПланыПродажОбороты.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	//               |	ЕСТЬNULL(ПланыПродажОбороты.КатегорияПартнераОборот, 0) КАК КатегорияПартнера,
	//               |	ЕСТЬNULL(ПланыПродажОбороты.КоличествоSKUНаПолках053Оборот, 0) КАК КоличествоSKUНаПолках053,
	//               |	ЕСТЬNULL(ПланыПродажОбороты.КоличествоSKUНаПолках106Оборот, 0) КАК КоличествоSKUНаПолках106,
	//               |	ЕСТЬNULL(ПланыПродажОбороты.НаличиеРулоновНаПолуОборот, 0) КАК НаличиеРулоновНаПолу,
	//               |	ЕСТЬNULL(ПланыПродажОбороты.КоличествоНашихSKU053Оборот, 0) КАК КоличествоНашихSKU053,
	//               |	ЕСТЬNULL(ПланыПродажОбороты.КоличествоНашихSKU106Оборот, 0) КАК КоличествоНашихSKU106,
	//               |	ЕСТЬNULL(ПланыПродажОбороты.КоличествоПланшетОборот, 0) КАК КоличествоПланшет,
	//               |	ЕСТЬNULL(ПланыПродажОбороты.КоличествоШтучныйОборот, 0) КАК КоличествоШтучный,
	//               |	ЕСТЬNULL(ПланыПродажОбороты.ДоляОборот, 0) КАК Доля,
	//               |	ЕСТЬNULL(ПланыПродажОбороты.ЦельПоЭкспозицииОборот, 0) КАК ЦельПоЭкспозиции,
	//               |	ЕСТЬNULL(ПланыПродажОбороты.ЦельПриростаОборот, 0) КАК ЦельПрироста,
	//               |	ЕСТЬNULL(ПланыПродажОбороты.ЦельСледГодОборот, 0) КАК ЦельСледГод
	//               |ПОМЕСТИТЬ ВТ_ПредыдущиеПланы
	//               |ИЗ
	//               |	ВТ_ТекущийПлан КАК ВТ_ТекущийПлан
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПродаж.Обороты(
	//               |				&ДатаНачала,
	//               |				&ДатаОкончания,
	//               |				Регистратор,
	//               |				СценарийПланирования = &СценарийПланирования
	//               |					И ВерсияСценария = &ВерсияСценария
	//               |					И НаправлениеДеятельности = &НаправлениеДеятельности) КАК ПланыПродажОбороты
	//               |		ПО (ПланыПродажОбороты.Партнер = ВТ_ТекущийПлан.Партнер)
	//               |			И (ПланыПродажОбороты.ТРТ = ВТ_ТекущийПлан.ТРТ)
	//               |			И (ПланыПродажОбороты.Бренд = ВТ_ТекущийПлан.Бренд)
	//               |			И (ПланыПродажОбороты.Регистратор.Ответственный = &Ответственный)
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ВТ_ПредыдущиеПланы.Партнер КАК Партнер,
	//               |	ВТ_ПредыдущиеПланы.ТРТ КАК ТРТ,
	//               |	ВТ_ПредыдущиеПланы.Бренд КАК Бренд,
	//               |	МАКСИМУМ(ВТ_ПредыдущиеПланы.Дата) КАК Дата,
	//               |	СУММА(ВТ_ПредыдущиеПланы.КатегорияПартнера) КАК КатегорияПартнера,
	//               |	СУММА(ВТ_ПредыдущиеПланы.КоличествоSKUНаПолках053) КАК КоличествоSKUНаПолках053,
	//               |	СУММА(ВТ_ПредыдущиеПланы.КоличествоSKUНаПолках106) КАК КоличествоSKUНаПолках106,
	//               |	СУММА(ВТ_ПредыдущиеПланы.НаличиеРулоновНаПолу) КАК НаличиеРулоновНаПолу,
	//               |	СУММА(ВТ_ПредыдущиеПланы.КоличествоНашихSKU053) КАК КоличествоНашихSKU053,
	//               |	СУММА(ВТ_ПредыдущиеПланы.КоличествоНашихSKU106) КАК КоличествоНашихSKU106,
	//               |	СУММА(ВТ_ПредыдущиеПланы.КоличествоПланшет) КАК КоличествоПланшет,
	//               |	СУММА(ВТ_ПредыдущиеПланы.КоличествоШтучный) КАК КоличествоШтучный,
	//               |	СУММА(ВТ_ПредыдущиеПланы.Доля) КАК Доля,
	//               |	СУММА(ВТ_ПредыдущиеПланы.ЦельПоЭкспозиции) КАК ЦельПоЭкспозиции,
	//               |	СУММА(ВТ_ПредыдущиеПланы.ЦельПрироста) КАК ЦельПрироста,
	//               |	СУММА(ВТ_ПредыдущиеПланы.ЦельСледГод) КАК ЦельСледГод,
	//               |	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК СтатусТТ
	//               |ИЗ
	//               |	ВТ_ПредыдущиеПланы КАК ВТ_ПредыдущиеПланы
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	//               |		ПО ВТ_ПредыдущиеПланы.ТРТ = CRM_ОбъектыЗначенийКлассификаторов.Объект
	//               |			И (ВЫРАЗИТЬ(CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК Справочник.CRM_ЗначенияКлассификаторов).Владелец = &Классификатор)
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	ВТ_ПредыдущиеПланы.Бренд,
	//               |	ВТ_ПредыдущиеПланы.ТРТ,
	//               |	ВТ_ПредыдущиеПланы.Партнер,
	//               |	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора";
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПланыПродажОбороты.Партнер КАК Партнер,
	               |	ПланыПродажОбороты.ТРТ КАК ТРТ,
	               |	ПланыПродажОбороты.Бренд КАК Бренд,
	               |	ЕСТЬNULL(ПланыПродажОбороты.КатегорияПартнераОборот, 0) КАК КатегорияПартнера,
	               |	ЕСТЬNULL(ПланыПродажОбороты.КоличествоSKUНаПолках053Оборот, 0) КАК КоличествоSKUНаПолках053,
	               |	ЕСТЬNULL(ПланыПродажОбороты.КоличествоSKUНаПолках106Оборот, 0) КАК КоличествоSKUНаПолках106,
	               |	ЕСТЬNULL(ПланыПродажОбороты.НаличиеРулоновНаПолуОборот, 0) КАК НаличиеРулоновНаПолу,
	               |	ЕСТЬNULL(ПланыПродажОбороты.КоличествоНашихSKU053Оборот, 0) КАК КоличествоНашихSKU053,
	               |	ЕСТЬNULL(ПланыПродажОбороты.КоличествоНашихSKU106Оборот, 0) КАК КоличествоНашихSKU106,
	               |	ЕСТЬNULL(ПланыПродажОбороты.КоличествоПланшетОборот, 0) КАК КоличествоПланшет,
	               |	ЕСТЬNULL(ПланыПродажОбороты.КоличествоШтучныйОборот, 0) КАК КоличествоШтучный,
	               |	ЕСТЬNULL(ПланыПродажОбороты.ДоляОборот, 0) КАК Доля,
	               |	ЕСТЬNULL(ПланыПродажОбороты.ЦельПоЭкспозицииОборот, 0) КАК ЦельПоЭкспозиции,
	               |	ЕСТЬNULL(ПланыПродажОбороты.ЦельПриростаОборот, 0) КАК ЦельПрироста,
	               |	ЕСТЬNULL(ПланыПродажОбороты.ЦельСледГодОборот, 0) КАК ЦельСледГод,
	               |	ЕСТЬNULL(ВЫРАЗИТЬ(вогНаселенныеПункты.Родитель КАК Справочник.вогНаселенныеПункты).Родитель, ЗНАЧЕНИЕ(Справочник.вогНаселенныеПункты.ПустаяСсылка)) КАК Регион,
	               |	ЕСТЬNULL(вогНаселенныеПункты.Родитель, ЗНАЧЕНИЕ(Справочник.вогНаселенныеПункты.ПустаяСсылка)) КАК МуниципальныйРайон,
	               |	ЕСТЬNULL(вогНаселенныеПункты.Ссылка, ЗНАЧЕНИЕ(Справочник.вогНаселенныеПункты.ПустаяСсылка)) КАК НаселенныйПункт,
	               |	ПланыПродажОбороты.ТРТ.Вид КАК Вид
	               |ПОМЕСТИТЬ ВТ_ПредыдущиеПланы
	               |ИЗ
	               |	РегистрНакопления.ПланыПродаж.Обороты(
	               |			&ДатаНачала,
	               |			&ДатаОкончания,
	               |			Авто,
	               |			СценарийПланирования = &СценарийПланирования
	               |				И ВерсияСценария = &ВерсияСценария
	               |				И НаправлениеДеятельности = &НаправлениеДеятельности) КАК ПланыПродажОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНаселенныеПункты КАК вогНаселенныеПункты
	               |		ПО ПланыПродажОбороты.ТРТ.НаселенныйПункт = вогНаселенныеПункты.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПредыдущиеПланы.Партнер КАК Партнер,
	               |	ВТ_ПредыдущиеПланы.ТРТ КАК ТРТ,
	               |	ВТ_ПредыдущиеПланы.Бренд КАК Бренд,
	               |	СУММА(ВТ_ПредыдущиеПланы.КатегорияПартнера) КАК КатегорияПартнера,
	               |	СУММА(ВТ_ПредыдущиеПланы.КоличествоSKUНаПолках053) КАК КоличествоSKUНаПолках053,
	               |	СУММА(ВТ_ПредыдущиеПланы.КоличествоSKUНаПолках106) КАК КоличествоSKUНаПолках106,
	               |	СУММА(ВТ_ПредыдущиеПланы.НаличиеРулоновНаПолу) КАК НаличиеРулоновНаПолу,
	               |	СУММА(ВТ_ПредыдущиеПланы.КоличествоНашихSKU053) КАК КоличествоНашихSKU053,
	               |	СУММА(ВТ_ПредыдущиеПланы.КоличествоНашихSKU106) КАК КоличествоНашихSKU106,
	               |	СУММА(ВТ_ПредыдущиеПланы.КоличествоПланшет) КАК КоличествоПланшет,
	               |	СУММА(ВТ_ПредыдущиеПланы.КоличествоШтучный) КАК КоличествоШтучный,
	               |	СУММА(ВТ_ПредыдущиеПланы.Доля) КАК Доля,
	               |	СУММА(ВТ_ПредыдущиеПланы.ЦельПоЭкспозиции) КАК ЦельПоЭкспозиции,
	               |	СУММА(ВТ_ПредыдущиеПланы.ЦельПрироста) КАК ЦельПрироста,
	               |	СУММА(ВТ_ПредыдущиеПланы.ЦельСледГод) КАК ЦельСледГод,
	               |	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК СтатусТТ,
	               |	ВТ_ПредыдущиеПланы.МуниципальныйРайон КАК МуниципальныйРайон,
	               |	ВТ_ПредыдущиеПланы.Регион КАК Регион,
	               |	ВТ_ПредыдущиеПланы.НаселенныйПункт КАК НаселенныйПункт,
	               |	ВТ_ПредыдущиеПланы.Вид КАК Вид
	               |ИЗ
	               |	ВТ_ПредыдущиеПланы КАК ВТ_ПредыдущиеПланы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	               |		ПО ВТ_ПредыдущиеПланы.ТРТ = CRM_ОбъектыЗначенийКлассификаторов.Объект
	               |			И (ВЫРАЗИТЬ(CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК Справочник.CRM_ЗначенияКлассификаторов).Владелец = &Классификатор)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ПредыдущиеПланы.Бренд,
	               |	ВТ_ПредыдущиеПланы.ТРТ,
	               |	ВТ_ПредыдущиеПланы.Партнер,
	               |	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора,
	               |	ВТ_ПредыдущиеПланы.МуниципальныйРайон,
	               |	ВТ_ПредыдущиеПланы.Регион,
	               |	ВТ_ПредыдущиеПланы.НаселенныйПункт,
	               |	ВТ_ПредыдущиеПланы.Вид";
	// --- Кулаков П.Л.
	
	//Запрос.УстановитьПараметр("ТаблицаПланирования", 		Объект.Планирование.Выгрузить(, "Партнер, ТРТ, Бренд"));
	Запрос.УстановитьПараметр("ВерсияСценария", 			СтруктураПараметров.ВерсияСценария);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", 	Объект.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("Ответственный", 				Объект.Ответственный);
	Запрос.УстановитьПараметр("СценарийПланирования", 		СтруктураПараметров.СценарийПланирования);
	//Запрос.УстановитьПараметр("Статус", 					Справочники.вогШаблоныСтатусов.Согласован);
	КлассификаторУИН 	= Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8");
	Классификатор 		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(КлассификаторУИН);
	Запрос.УстановитьПараметр("Классификатор", 				Классификатор);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ДатаПланирования) Тогда
		Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(СтруктураПараметров.ДатаПланирования));
		Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(СтруктураПараметров.ДатаПланирования));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ДатаНачала","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ДатаОкончания","");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// +++ Кулаков П.Л. CRM-526
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Объект.Планирование.Очистить();
	Объект.Планирование.Загрузить(РезультатЗапроса.Выгрузить());
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	
	//	СтруктураОтбора = Новый Структура;
	//	СтруктураОтбора.Вставить("Партнер");
	//	СтруктураОтбора.Вставить("ТРТ");
	//	СтруктураОтбора.Вставить("Бренд");
	//	
	//	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ВыборкаДетальныеЗаписи);
	//	
	//	НайденныеСтроки = Объект.Планирование.НайтиСтроки(СтруктураОтбора);
	//	
	//	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
	//		
	//		ЗаполнитьЗначенияСвойств(НайденнаяСтрока, ВыборкаДетальныеЗаписи,, "Партнер, ТРТ, Бренд");
	//		
	//		Если НайденнаяСтрока.КоличествоSKUНаПолках053 > 0 Тогда
	//			НайденнаяСтрока.ДоляВОГ053
	//				= (НайденнаяСтрока.КоличествоНашихSKU053 / НайденнаяСтрока.КоличествоSKUНаПолках053) * 100;
	//		Иначе
	//			НайденнаяСтрока.ДоляВОГ053 = 0;
	//		КонецЕсли;
	//			
	//		Если НайденнаяСтрока.КоличествоSKUНаПолках106 > 0 Тогда
	//			НайденнаяСтрока.ДоляВОГ106
	//				= (НайденнаяСтрока.КоличествоНашихSKU106 / НайденнаяСтрока.КоличествоSKUНаПолках106) * 100;
	//		Иначе
	//			НайденнаяСтрока.ДоляВОГ106 = 0;
	//		КонецЕсли;
	//		
	//		НайденнаяСтрока.ИтогоПланМ2 = НайденнаяСтрока.ЦельПрироста + НайденнаяСтрока.ЦельПоЭкспозиции;
	//		
	//	КонецЦикла;
	//	
	//КонецЦикла;
	
	ДозаполнитьТаблицуПланирования();	
	Для каждого СтрокаТЧ из Объект.Планирование цикл
		
		структураПоиска = Новый Структура;
		структураПоиска.Вставить("Бренд",СтрокаТЧ.Бренд);
		структураПоиска.Вставить("ТРТ",СтрокаТЧ.ТРТ);
		НайденныеРанееЗаполненныеСтроки = тзБылоДоОбновления.НайтиСтроки(структураПоиска);
		Если НайденныеРанееЗаполненныеСтроки.Количество()>0 тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,НайденныеРанееЗаполненныеСтроки[0],"Регион,МуниципальныйРайон,НаселенныйПункт,ГородскоеНаселениеРайона,СельскоеНаселениеРайона,ГородскоеНаселение,КатегорияПартнера,Вид");
		КонецЕсли;
		
	КонецЦикла;
	// --- Кулаков П.Л.
	
	ИтогоПланМ2 = Объект.Планирование.Итог("ИтогоПланМ2");
	
КонецПроцедуры // -- VOG Солодов В.В. 21.01.2020

#КонецОбласти


&НаСервере
Процедура ДозаполнитьТаблицуПланирования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	вогПродажиОбороты.ТорговаяТочка КАК ТорговаяТочка,
	               |	вогПродажиОбороты.КоличествоОборот КАК ИтогоПродажи,
	               |	ВЫБОР
	               |		КОГДА &КоличествоМесяцев > 0
	               |			ТОГДА вогПродажиОбороты.КоличествоОборот / &КоличествоМесяцев
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК СредниеПродажи
	               |ИЗ
	               |	РегистрНакопления.вогПродажи.Обороты(НАЧАЛОПЕРИОДА(&ТекущаяДата, ГОД), КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -1), МЕСЯЦ), , ТорговаяТочка В (&ТорговыеТочки)) КАК вогПродажиОбороты";
	
	Запрос.УстановитьПараметр("ТорговыеТочки",Объект.Планирование.Выгрузить().ВыгрузитьКолонку("ТРТ"));
	Запрос.УстановитьПараметр("ТекущаяДата",Объект.Дата);
	Запрос.УстановитьПараметр("КоличествоМесяцев",Месяц(Объект.Дата) - 1);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СтруктураОтбораСтрок = Новый Структура("ТРТ",Выборка.ТорговаяТочка);
		НайденныеСтроки = Объект.Планирование.НайтиСтроки(СтруктураОтбораСтрок);	
		Если НайденныеСтроки.Количество()>0 тогда	
			НайденныеСтроки[0].СредниеПродажиЗаТекущийГод = Выборка.СредниеПродажи;
		КонецЕсли;	
	КонецЦикла;
	Для каждого Строка из Объект.Планирование цикл
		Строка.ИтогоПланМ2 = Строка.ЦельПрироста + Строка.ЦельПоЭкспозиции;
	КонецЦикла;
	ИтогоПланМ2 = Объект.Планирование.Итог("ИтогоПланМ2");
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеПриАктивизацииЯчейки(Элемент)
	
	ИтогоНаЭкране = 0;
	Для каждого Строка из Элементы.Планирование.ВыделенныеСтроки цикл
		СтрокаТЧ = Объект.Планирование.НайтиПоИдентификатору(Строка);			
		Попытка
		ИтогоНаЭкране = ИтогоНаЭкране + СтрокаТЧ[СтрЗаменить(Элемент.ТекущийЭлемент.Имя,"Планирование","")];	
		исключение
		Конецпопытки;
	КонецЦикла;
	
КонецПроцедуры
