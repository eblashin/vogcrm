//+++ Терпогосян Д.Б. [17.08.2021 11:53:20] № DEV-874
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ИдентификаторЗамера;

&НаКлиенте
Перем ИдентификаторЗамера1;

&НаКлиенте
Перем ФормаДлительнойОперации;
//--- Терпогосян Д.Б. [17.08.2021 11:53:22] № DEV-874 

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Схема = ПолучитьИзВременногоХранилища(АдресСхемы);
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	Настройки = Компоновщик.ПолучитьНастройки();	
	ТекущаяДата = ДобавитьМесяц(Объект.Дата,0);
	ОбъектКомпоновки = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.ПланированиеПродажОбои"));       
	МакетОформления = ОбъектКомпоновки.ПолучитьМакет("МакетОформления");
	ВариантыОпросов = Новый Массив;
	ВариантыОпросов.Добавить(ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("e6f9dcee-5153-11ea-87ff-005056bc3fe8")));
	ВариантыОпросов.Добавить(ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("00a82227-cd9b-11ea-8f2a-005056bcd3e3")));
	ВариантыОпросов.Добавить(ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("a060ef76-b28b-11e9-9b11-005056bcd3e3")));
	ВариантыОпросов.Добавить(ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("f5022f7e-b81e-11e8-a684-005056bc3fe8")));
	ВариантОпросаСписокSKU = ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("4305c4d7-c743-11ea-8f2a-005056bcd3e3"));
	
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий",Объект.СценарийПланирования);
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодПланирования",Объект.ПериодПланирования);
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Версия",Объект.ВерсияСценария);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаДокумента",Объект.Дата);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка",Объект.Ссылка);
	КлассификаторКоличествоСтендов = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("1714096b-b20e-11e9-9b11-005056bcd3e3"));
	КлассификаторФорматТРТ = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("47b0ee76-ada2-11e7-80ce-08606e7382bc"));
	КлассификаторСтатусТРТ = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8"));
	КлассифкаторКоличествоSKU = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("5af63fbb-d6c6-11e8-a684-005056bc3fe8"));	
	КлассифкаторКоличествоSKUВОГ = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("db18bcf8-c743-11ea-8f2a-005056bcd3e3"));	
	Значение053 = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("227ad8da-c744-11ea-8f2a-005056bcd3e3"));
	Значение106 = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("1346f0b9-c744-11ea-8f2a-005056bcd3e3"));
	Размер_106 = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("768685fc-d6c6-11e8-a684-005056bc3fe8"));
	Размер_053 = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("bfec323c-d6c6-11e8-a684-005056bc3fe8"));
	СтатусТТЗакрыта = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8"));
	СтатусТТЗакрыта = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8"));
	КатегорияТТ = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("ca87c1d0-75a5-11ea-87ff-005056bc3fe8")).Владелец;
	ПараметрМест = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("4767d0c1-b28c-11e9-9b11-005056bcd3e3"));
	ПараметрРазмер = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("2e0ee1db-b28c-11e9-9b11-005056bcd3e3"));
	ПараметрРоссия = Справочники.вогНаселенныеПункты.ПолучитьСсылку(Новый УникальныйИдентификатор("9f590895-f596-11e9-8661-005056bcd3e3"));
	СтатусАКБ = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("f84779ae-9a73-11e8-89fa-005056bc3fe8")); 
	СтатусНАКБ = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af2-9a74-11e8-89fa-005056bc3fe8")); 
	СтатусНовая = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("047f780f-8b44-11e9-9b11-005056bcd3e3")); 
	СтатусЗакрыт = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8")); 
	СписокDIY = Новый СписокЗначений;
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("4fc40649-ada2-11e7-80ce-08606e7382bc")));
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("64a60c68-06d3-11eb-8f2a-005056bcd3e3")));
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("6cac4f07-06d3-11eb-8f2a-005056bcd3e3")));
	
	ПараметрСпец = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("5d36cbb9-ada2-11e7-80ce-08606e7382bc"));
	ПараметрУнив = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("125c5f18-d29b-11e8-a684-005056bc3fe8"));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлассифкаторКоличествоSKU", КлассифкаторКоличествоSKU);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлассифкаторКоличествоSKU_ВОГ", КлассифкаторКоличествоSKUВОГ);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Значение053", Значение053);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Значение106", Значение106);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Размер_053", Размер_053);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Размер_106", Размер_106);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КатегорияТТклассификатор",КатегорияТТ);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлассификаторФорматТРТ", КлассификаторФорматТРТ);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлассификаторСтатусТТ", КлассификаторСтатусТРТ);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СтатусТТЗакрыта",СтатусТТЗакрыта );
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("DIY", СписокDIY);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Спец", ПараметрСпец);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Унив", ПараметрУнив);
	УстановитьПривилегированныйРежим(Истина);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Подчиненные",Новый Массив(ПараметрыСеанса.вогПодчиненныеСотрудники));
	УстановитьПривилегированныйРежим(Ложь);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПолныеПрава",РольДоступна("ПолныеПрава"));
	Если Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаКвартал тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СценарийГод",Справочники.вогСценарииПланирования.ПланНаГод); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВерсияСценарияГод",Справочники.вогВерсииСценариевПланирования.НайтиПоНаименованию("Основная",Истина,,Справочники.вогСценарииПланирования.ПланНаГод)); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СценарийКвартал",Объект.СценарийПланирования); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВерсияСценарияКвартал",Объект.ВерсияСценария); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодПланированияГод",НачалоГода(Объект.ПериодПланирования)); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодПланирования",Объект.ПериодПланирования); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Начало3Мес",ДобавитьМесяц(НачалоМесяца(Объект.Дата),-3)); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Начало6Мес",ДобавитьМесяц(НачалоМесяца(Объект.Дата),-6)); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоКварталаПрошлогоГода",НачалоКвартала(ДобавитьМесяц(Объект.ПериодПланирования,-12))); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецКварталаПрошлогоГода",КонецКвартала(ДобавитьМесяц(Объект.ПериодПланирования,-12))); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоТекущегоГода",НачалоГода(Объект.Дата));
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПрошлогоГода",НачалоГода(ДобавитьМесяц(Объект.Дата,-12)));
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПрошлогоГода",КонецКвартала(ДобавитьМесяц(Объект.ПериодПланирования,-12)));
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Конец3МесПолных",КонецМесяца(ДобавитьМесяц(Объект.Дата,-1))); 
		// +++ VOG Кулаков П.Л. 23.06.2021 DEV-678
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПродажТекущийГод",Объект.Дата); 
		// --- VOG Кулаков П.Л.
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецТекущегоГода",КонецМесяца(ДобавитьМесяц(Объект.Дата,-1))); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодПланаНамесяц",НачалоМесяца(Объект.Дата)); 
		//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодПланаНамесяц",НачалоГода(Объект.Дата)); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СценарийПланированияНаМесяц",Справочники.вогСценарииПланирования.ПланНаМесяцПоКлиентам); 
	Иначе
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецТекущегоГода",КонецМесяца(ДобавитьМесяц(ТекущаяДата,-1))); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПрошлогоГода",КонецГода(ДобавитьМесяц(ТекущаяДата,-12)));     
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Начало4МесяцаНазад",НачалоМесяца(ДобавитьМесяц(ТекущаяДата,-4))); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоТекущегоГода",НачалоГода(ДобавитьМесяц(ТекущаяДата,-1)));
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПрошлогоГода",НачалоГода(ДобавитьМесяц(ТекущаяДата,-12)));
		//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Россия", ПараметрРоссия);
	КонецЕсли;
	ТекущаяДата 						= Объект.Дата;
	ТекущийКвартал 						= Цел((Месяц(ТекущаяДата) - 1) / 3) + 1;
	Для каждого СтрокаНастройки из Настройки.Структура[0].Колонки цикл
		УстановитьЗаголовкиПолей(СтрокаНастройки, ТекущаяДата, ТекущийКвартал);
	КонецЦикла;
	ТабДок.Очистить();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(Схема,Настройки,ДанныеРасшифровки,МакетОформления,Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,ДанныеРасшифровки,Истина,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки,УникальныйИдентификатор);
	
	СохраненныеРасшифровкиЯчеек = Новый ТаблицаЗначений;
	СохраненныеРасшифровкиЯчеек.Колонки.Добавить("ИмяОбласти");
	СохраненныеРасшифровкиЯчеек.Колонки.Добавить("ИДРасшифровки");
	Для НомерСтроки = 1 по ТабДок.ВысотаТаблицы цикл
		Для НомерСтолбца = 1 по ТабДок.ШиринаТаблицы цикл
			ИмяОбласти = "R"+Формат(НомерСтроки,"ЧГ=0")+"C"+Формат(НомерСтолбца,"ЧГ=0");
			СтрокаД = СохраненныеРасшифровкиЯчеек.Добавить();
			СтрокаД.ИДРасшифровки = ТабДок.Область(ИмяОбласти).Расшифровка;
			СтрокаД.ИмяОбласти = ИмяОбласти;
		КонецЦикла;
	КонецЦикла;
	СохраненныеРасшифровкиЯчеек.Индексы.Добавить("ИмяОБласти");
	АдресСохраненныхРасшифровокЯчеек = ПоместитьВоВременноеХранилище(СохраненныеРасшифровкиЯчеек,УникальныйИдентификатор);
	
	Если Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаКвартал тогда
		ТабДок.ФиксацияСлева = 1;
		ТабДок.ФиксацияСверху = 2;
	Иначе
		ТабДок.ФиксацияСлева = 1;
		ТабДок.ФиксацияСверху = 4;
	КонецЕсли;
	
	// +++ VOG Кулаков П.Л. 26.05.2021 DEV-573
	// заполним таблицу цен, для пересчета стоимости распродажи
	ЗаполнитТаблицуЦенДляРаспродажи();
	ЗаполнитьТаблицуЗатратыНаРаспродажу();
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 26.05.2021 DEV-573
Процедура ЗаполнитТаблицуЦенДляРаспродажи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогТорговыеТочки.Ссылка КАК Ссылка,
		|	вогТорговыеТочки.Наименование КАК Наименование,
		|	вогТорговыеТочки.Вид КАК Вид,
		|	вогТорговыеТочки.Партнер КАК Клиент,
		|	вогТорговыеТочки.Розничный КАК Розничный,
		|	вогТорговыеТочки.НаименованиеПолное КАК НаименованиеПолное,
		|	вогТорговыеТочки.НаселенныйПункт КАК НаселенныйПункт,
		|	вогТорговыеТочки.НаселенныйПунктРегион КАК НаселенныйПунктРегион,
		|	вогТорговыеТочки.НаселенныйПунктРайон КАК НаселенныйПунктРайон,
		|	вогТорговыеТочки.ПометкаУдаления КАК ПометкаУдаления,
		|	вогТорговыеТочки.Код КАК Код,
		|	вогМенеджерыОбъектов.Менеджер КАК МенеджерОтчет,
		|	ЕСТЬNULL(вогТорговыеТочки.ПодразделениеОтчет, вогМенеджерыОбъектов.Подразделение) КАК ПодразделениеОтчет,
		|	вогТорговыеТочки.ЕстьБрендМенеджер КАК ЕстьБрендМенеджер,
		|	вогТорговыеТочки.БрендМенеджер КАК БрендМенеджер
		|ПОМЕСТИТЬ втТорговыеТочки
		|ИЗ
		|	(ВЫБРАТЬ
		|		вогТорговыеТочки.Ссылка КАК Ссылка,
		|		вогТорговыеТочки.Наименование КАК Наименование,
		|		вогТорговыеТочки.Вид КАК Вид,
		|		вогТорговыеТочки.Партнер КАК Партнер,
		|		вогТорговыеТочки.Розничный КАК Розничный,
		|		вогТорговыеТочки.НаименованиеПолное КАК НаименованиеПолное,
		|		вогТорговыеТочки.НаселенныйПункт КАК НаселенныйПункт,
		|		вогТорговыеТочки.НаселенныйПунктРегион КАК НаселенныйПунктРегион,
		|		вогТорговыеТочки.НаселенныйПунктРайон КАК НаселенныйПунктРайон,
		|		вогТорговыеТочки.ПометкаУдаления КАК ПометкаУдаления,
		|		вогТорговыеТочки.Код КАК Код,
		|		ПодразделенияТорговыхТочек.Подразделение КАК ПодразделениеОтчет,
		|		ЕСТЬNULL(ПодразделенияТорговыхТочек.ЕстьБрендМенеджер, ЛОЖЬ) КАК ЕстьБрендМенеджер,
		|		ЕСТЬNULL(ПодразделенияТорговыхТочек.БрендМенеджер, ЛОЖЬ) КАК БрендМенеджер
		|	ИЗ
		|		Справочник.вогТорговыеТочки КАК вогТорговыеТочки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияТорговыхТочек КАК ПодразделенияТорговыхТочек
		|			ПО вогТорговыеТочки.Ссылка = ПодразделенияТорговыхТочек.ТорговаяТочка
		|				И (ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои) = ПодразделенияТорговыхТочек.Направление)) КАК вогТорговыеТочки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
		|		ПО вогТорговыеТочки.Ссылка = вогМенеджерыОбъектов.Владелец
		|			И (ЗНАЧЕНИЕ(Справочник.РолиКонтактныхЛицПартнеров.Менеджер) = вогМенеджерыОбъектов.Роль)
		|			И (ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои) = вогМенеджерыОбъектов.НаправлениеДеятельности)
		|			И вогТорговыеТочки.ПодразделениеОтчет = вогМенеджерыОбъектов.Подразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК КлассификаторСтатусТТ
		|		ПО вогТорговыеТочки.Ссылка = КлассификаторСтатусТТ.Объект
		|			И (&КлассификаторСтатусТТ = КлассификаторСтатусТТ.ЗначениеКлассификатора.Владелец)
		|ГДЕ
		|	КлассификаторСтатусТТ.ЗначениеКлассификатора <> &СтатусТТЗакрыта
		|	И вогТорговыеТочки.Вид <> ЗНАЧЕНИЕ(Справочник.вогВидыТорговыхТочек.РазовыйПокупатель)
		|	И вогТорговыеТочки.Вид <> ЗНАЧЕНИЕ(Справочник.вогВидыТорговыхТочек.ТРТД)
		|	И НЕ вогТорговыеТочки.Розничный
		|	И НЕ вогТорговыеТочки.ПометкаУдаления
		|	И ЕСТЬNULL(вогТорговыеТочки.ПодразделениеОтчет, ЕСТЬNULL(вогМенеджерыОбъектов.Подразделение, НЕОПРЕДЕЛЕНО)) <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогПродажиОбороты.Подразделение КАК Подразделение,
		|	вогПродажиОбороты.СтоимостьОборот - вогПродажиОбороты.НДСОборот КАК Стоимость1,
		|	вогПродажиОбороты.КоличествоОборот КАК Количество1,
		|	0 КАК Стоимость05,
		|	0 КАК Количество05,
		|	вогПродажиОбороты.ТорговаяТочка КАК ТорговаяТочка,
		|	вогПродажиОбороты.Партнер КАК Партнер
		|ПОМЕСТИТЬ втПродажиЗаПоследнийГод
		|ИЗ
		|	РегистрНакопления.вогПродажи.Обороты(
		|			&ПрошлыйГод,
		|			&КонецПрошлогоМесяца,
		|			День,
		|			НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои)
		|				И ТорговаяТочка В
		|					(ВЫБРАТЬ
		|						втТорговыеТочки.Ссылка КАК Ссылка
		|					ИЗ
		|						втТорговыеТочки КАК втТорговыеТочки)
		|				И Номенклатура.НоменклатурнаяПозиция.Дизайн.ТипНоменклатуры.Ширина = 1.06) КАК вогПродажиОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вогПродажиОбороты.Подразделение,
		|	0,
		|	0,
		|	вогПродажиОбороты.СтоимостьОборот - вогПродажиОбороты.НДСОборот,
		|	вогПродажиОбороты.КоличествоОборот,
		|	вогПродажиОбороты.ТорговаяТочка,
		|	вогПродажиОбороты.Партнер
		|ИЗ
		|	РегистрНакопления.вогПродажи.Обороты(
		|			&ПрошлыйГод,
		|			&КонецПрошлогоМесяца,
		|			День,
		|			НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои)
		|				И ТорговаяТочка В
		|					(ВЫБРАТЬ
		|						втТорговыеТочки.Ссылка КАК Ссылка
		|					ИЗ
		|						втТорговыеТочки КАК втТорговыеТочки)
		|				И Номенклатура.НоменклатурнаяПозиция.Дизайн.ТипНоменклатуры.Ширина = 0.53) КАК вогПродажиОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втПродажиЗаПоследнийГод.Подразделение КАК Подразделение,
		|	СУММА(втПродажиЗаПоследнийГод.Стоимость1) КАК Стоимость1,
		|	СУММА(втПродажиЗаПоследнийГод.Количество1) КАК Количество1,
		|	СУММА(втПродажиЗаПоследнийГод.Стоимость05) КАК Стоимость05,
		|	СУММА(втПродажиЗаПоследнийГод.Количество05) КАК Количество05,
		|	втПродажиЗаПоследнийГод.ТорговаяТочка КАК ТорговаяТочка
		|ПОМЕСТИТЬ втСредниеПродажи
		|ИЗ
		|	втПродажиЗаПоследнийГод КАК втПродажиЗаПоследнийГод
		|
		|СГРУППИРОВАТЬ ПО
		|	втПродажиЗаПоследнийГод.Подразделение,
		|	втПродажиЗаПоследнийГод.ТорговаяТочка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втТорговыеТочки.ПодразделениеОтчет КАК Подразделение,
		|	втТорговыеТочки.Ссылка КАК ТорговаяТочка,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА втСредниеПродажи.Количество1 = 0
		|				ТОГДА 0
		|			ИНАЧЕ втСредниеПродажи.Стоимость1 / втСредниеПродажи.Количество1
		|		КОНЕЦ, 0) КАК СредняяЦена1,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА втСредниеПродажи.Количество05 = 0
		|				ТОГДА 0
		|			ИНАЧЕ втСредниеПродажи.Стоимость05 / втСредниеПродажи.Количество05
		|		КОНЕЦ, 0) КАК СредняяЦена05
		|ИЗ
		|	втТорговыеТочки КАК втТорговыеТочки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСредниеПродажи КАК втСредниеПродажи
		|		ПО втТорговыеТочки.ПодразделениеОтчет = втСредниеПродажи.Подразделение
		|			И втТорговыеТочки.Ссылка = втСредниеПродажи.ТорговаяТочка";
	
	КлассификаторСтатусТРТ = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8"));
	Запрос.УстановитьПараметр("КлассификаторСтатусТТ", КлассификаторСтатусТРТ);
	Запрос.УстановитьПараметр("КонецПрошлогоМесяца", КонецМесяца(ДобавитьМесяц(Объект.Дата,-1)));
	Запрос.УстановитьПараметр("ПрошлыйГод", НачалоМесяца(ДобавитьМесяц(Объект.Дата,-12)));
	СтатусТТЗакрыта = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8"));
	Запрос.УстановитьПараметр("СтатусТТЗакрыта", СтатусТТЗакрыта);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЦеныдляРаспродажи.Загрузить(РезультатЗапроса);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	вогПродажиОбороты.Подразделение КАК Подразделение,
	               |	вогПродажиОбороты.СтоимостьОборот - вогПродажиОбороты.НДСОборот КАК Стоимость1,
	               |	вогПродажиОбороты.КоличествоОборот КАК Количество1,
	               |	0 КАК Стоимость05,
	               |	0 КАК Количество05,
	               |	вогПродажиОбороты.Партнер КАК Партнер
	               |ПОМЕСТИТЬ втПродажиЗаПоследнийГод
	               |ИЗ
	               |	РегистрНакопления.вогПродажи.Обороты(
	               |			&ПрошлыйГод,
	               |			&КонецПрошлогоМесяца,
	               |			День,
	               |			НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои)
	               |				И Номенклатура.НоменклатурнаяПозиция.Дизайн.ТипНоменклатуры.Ширина = 1.06
	               |				И ТорговаяТочка.Вид <> ЗНАЧЕНИЕ(Справочник.вогВидыТорговыхТочек.РазовыйПокупатель)
	               |				И ТорговаяТочка.Вид <> ЗНАЧЕНИЕ(Справочник.вогВидыТорговыхТочек.ТРТД)
	               |				И НЕ ТорговаяТочка.Розничный
	               |				И НЕ ТорговаяТочка.ПометкаУдаления) КАК вогПродажиОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК КлассификаторСтатусТТ
	               |		ПО вогПродажиОбороты.ТорговаяТочка = КлассификаторСтатусТТ.Объект
	               |			И (&КлассификаторСтатусТТ = КлассификаторСтатусТТ.ЗначениеКлассификатора.Владелец)
	               |ГДЕ
	               |	КлассификаторСтатусТТ.ЗначениеКлассификатора <> &СтатусТТЗакрыта
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	вогПродажиОбороты.Подразделение,
	               |	0,
	               |	0,
	               |	вогПродажиОбороты.СтоимостьОборот - вогПродажиОбороты.НДСОборот,
	               |	вогПродажиОбороты.КоличествоОборот,
	               |	вогПродажиОбороты.Партнер
	               |ИЗ
	               |	РегистрНакопления.вогПродажи.Обороты(
	               |			&ПрошлыйГод,
	               |			&КонецПрошлогоМесяца,
	               |			День,
	               |			НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои)
	               |				И Номенклатура.НоменклатурнаяПозиция.Дизайн.ТипНоменклатуры.Ширина = 0.53
	               |				И ТорговаяТочка.Вид <> ЗНАЧЕНИЕ(Справочник.вогВидыТорговыхТочек.РазовыйПокупатель)
	               |				И ТорговаяТочка.Вид <> ЗНАЧЕНИЕ(Справочник.вогВидыТорговыхТочек.ТРТД)
	               |				И НЕ ТорговаяТочка.Розничный
	               |				И НЕ ТорговаяТочка.ПометкаУдаления) КАК вогПродажиОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК КлассификаторСтатусТТ
	               |		ПО вогПродажиОбороты.ТорговаяТочка = КлассификаторСтатусТТ.Объект
	               |			И (&КлассификаторСтатусТТ = КлассификаторСтатусТТ.ЗначениеКлассификатора.Владелец)
	               |ГДЕ
	               |	КлассификаторСтатусТТ.ЗначениеКлассификатора <> &СтатусТТЗакрыта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втПродажиЗаПоследнийГод.Подразделение КАК Подразделение,
	               |	СУММА(втПродажиЗаПоследнийГод.Стоимость1) КАК Стоимость1,
	               |	СУММА(втПродажиЗаПоследнийГод.Количество1) КАК Количество1,
	               |	СУММА(втПродажиЗаПоследнийГод.Стоимость05) КАК Стоимость05,
	               |	СУММА(втПродажиЗаПоследнийГод.Количество05) КАК Количество05,
	               |	втПродажиЗаПоследнийГод.Партнер КАК Партнер
	               |ПОМЕСТИТЬ втСредниеПродажиПоКлиенту
	               |ИЗ
	               |	втПродажиЗаПоследнийГод КАК втПродажиЗаПоследнийГод
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втПродажиЗаПоследнийГод.Подразделение,
	               |	втПродажиЗаПоследнийГод.Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(ВЫБОР
	               |			КОГДА втСредниеПродажиПоКлиенту.Количество1 = 0
	               |				ТОГДА 0
	               |			ИНАЧЕ втСредниеПродажиПоКлиенту.Стоимость1 / втСредниеПродажиПоКлиенту.Количество1
	               |		КОНЕЦ, 0) КАК СредняяЦена1,
	               |	ЕСТЬNULL(ВЫБОР
	               |			КОГДА втСредниеПродажиПоКлиенту.Количество05 = 0
	               |				ТОГДА 0
	               |			ИНАЧЕ втСредниеПродажиПоКлиенту.Стоимость05 / втСредниеПродажиПоКлиенту.Количество05
	               |		КОНЕЦ, 0) КАК СредняяЦена05,
	               |	втСредниеПродажиПоКлиенту.Подразделение КАК Подразделение,
	               |	втСредниеПродажиПоКлиенту.Партнер КАК Клиент
	               |ИЗ
	               |	втСредниеПродажиПоКлиенту КАК втСредниеПродажиПоКлиенту";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаЦеныДляРаспродажиКлиент.Загрузить(РезультатЗапроса);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	вогПродажиОбороты.Подразделение КАК Подразделение,
	               |	вогПродажиОбороты.СтоимостьОборот - вогПродажиОбороты.НДСОборот КАК Стоимость1,
	               |	вогПродажиОбороты.КоличествоОборот КАК Количество1,
	               |	0 КАК Стоимость05,
	               |	0 КАК Количество05
	               |ПОМЕСТИТЬ втПродажиЗаПоследнийГод
	               |ИЗ
	               |	РегистрНакопления.вогПродажи.Обороты(
	               |			&ПрошлыйГод,
	               |			&КонецПрошлогоМесяца,
	               |			День,
	               |			НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои)
	               |				И Номенклатура.НоменклатурнаяПозиция.Дизайн.ТипНоменклатуры.Ширина = 1.06
	               |				И ТорговаяТочка.Вид <> ЗНАЧЕНИЕ(Справочник.вогВидыТорговыхТочек.РазовыйПокупатель)
	               |				И ТорговаяТочка.Вид <> ЗНАЧЕНИЕ(Справочник.вогВидыТорговыхТочек.ТРТД)
	               |				И НЕ ТорговаяТочка.Розничный
	               |				И НЕ ТорговаяТочка.ПометкаУдаления) КАК вогПродажиОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК КлассификаторСтатусТТ
	               |		ПО вогПродажиОбороты.ТорговаяТочка = КлассификаторСтатусТТ.Объект
	               |			И (&КлассификаторСтатусТТ = КлассификаторСтатусТТ.ЗначениеКлассификатора.Владелец)
	               |ГДЕ
	               |	КлассификаторСтатусТТ.ЗначениеКлассификатора <> &СтатусТТЗакрыта
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	вогПродажиОбороты.Подразделение,
	               |	0,
	               |	0,
	               |	вогПродажиОбороты.СтоимостьОборот - вогПродажиОбороты.НДСОборот,
	               |	вогПродажиОбороты.КоличествоОборот
	               |ИЗ
	               |	РегистрНакопления.вогПродажи.Обороты(
	               |			&ПрошлыйГод,
	               |			&КонецПрошлогоМесяца,
	               |			День,
	               |			НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои)
	               |				И Номенклатура.НоменклатурнаяПозиция.Дизайн.ТипНоменклатуры.Ширина = 0.53
	               |				И ТорговаяТочка.Вид <> ЗНАЧЕНИЕ(Справочник.вогВидыТорговыхТочек.РазовыйПокупатель)
	               |				И ТорговаяТочка.Вид <> ЗНАЧЕНИЕ(Справочник.вогВидыТорговыхТочек.ТРТД)
	               |				И НЕ ТорговаяТочка.Розничный
	               |				И НЕ ТорговаяТочка.ПометкаУдаления) КАК вогПродажиОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК КлассификаторСтатусТТ
	               |		ПО вогПродажиОбороты.ТорговаяТочка = КлассификаторСтатусТТ.Объект
	               |			И (&КлассификаторСтатусТТ = КлассификаторСтатусТТ.ЗначениеКлассификатора.Владелец)
	               |ГДЕ
	               |	КлассификаторСтатусТТ.ЗначениеКлассификатора <> &СтатусТТЗакрыта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втПродажиЗаПоследнийГод.Подразделение КАК Подразделение,
	               |	СУММА(втПродажиЗаПоследнийГод.Стоимость1) КАК Стоимость1,
	               |	СУММА(втПродажиЗаПоследнийГод.Количество1) КАК Количество1,
	               |	СУММА(втПродажиЗаПоследнийГод.Стоимость05) КАК Стоимость05,
	               |	СУММА(втПродажиЗаПоследнийГод.Количество05) КАК Количество05
	               |ПОМЕСТИТЬ втСредниеПродажиПоКлиенту
	               |ИЗ
	               |	втПродажиЗаПоследнийГод КАК втПродажиЗаПоследнийГод
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втПродажиЗаПоследнийГод.Подразделение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(ВЫБОР
	               |			КОГДА втСредниеПродажиПоКлиенту.Количество1 = 0
	               |				ТОГДА 0
	               |			ИНАЧЕ втСредниеПродажиПоКлиенту.Стоимость1 / втСредниеПродажиПоКлиенту.Количество1
	               |		КОНЕЦ, 0) КАК СредняяЦена1,
	               |	ЕСТЬNULL(ВЫБОР
	               |			КОГДА втСредниеПродажиПоКлиенту.Количество05 = 0
	               |				ТОГДА 0
	               |			ИНАЧЕ втСредниеПродажиПоКлиенту.Стоимость05 / втСредниеПродажиПоКлиенту.Количество05
	               |		КОНЕЦ, 0) КАК СредняяЦена05,
	               |	втСредниеПродажиПоКлиенту.Подразделение КАК Подразделение
	               |ИЗ
	               |	втСредниеПродажиПоКлиенту КАК втСредниеПродажиПоКлиенту";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаЦеныДляРаспродажиФилиал.Загрузить(РезультатЗапроса);
	
	
КонецПроцедуры // --- VOG Кулаков П.Л.

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка = Документы.ПланированиеПродажОбои.ПустаяСсылка() тогда
		Объект.Автор = Пользователи.ТекущийПользователь();
		Если ЗначениеЗаполнено(Параметры.СценарийПланирования) тогда
			Объект.СценарийПланирования = Параметры.СценарийПланирования;
			Объект.ПериодПланирования = НачалоКвартала( ДобавитьМесяц(КонецКвартала(ТекущаяДата()),1));
			
		Иначе
			//Если Не РольДоступна("ПолныеПрава") тогда
			//	Отказ = истина;
			//	сообщить("Создание документов планирования на год запрещено");
			//КонецЕсли;
			Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаГод;
			// ++ VOG Солодов В.В. 14.10.2021 CRM-1246
			Объект.ПериодПланирования = вогОбщегоНазначенияКлиентСервер.ПолучитьГодПланирования(Истина);
			// До изменения
			//Объект.ПериодПланирования = Дата(Константы.ГодПланированияОбои.Получить(),1,1);
			// -- VOG Солодов В.В. 14.10.2021 CRM-1246
			
		КонецЕсли;
		Если Объект.Дата = НачалоДня(Объект.Дата) тогда
			Объект.Дата = ТекущаяДата();
		КонецЕсли;
		Объект.ВерсияСценария = Справочники.вогВерсииСценариевПланирования.НайтиПоНаименованию("Основная",Истина,,Объект.СценарийПланирования);	
		//+++ Терпогосян Д.Б. [06.08.2021 17:26:29] № DEV-743
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		РеквизитыПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(	ТекущийПользователь, "Подразделение", Истина);
		Объект.Подразделение  = Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(	РеквизитыПользователя.Подразделение);
		//--- Терпогосян Д.Б. [06.08.2021 17:26:35] № DEV-743 

	КонецЕсли;
	
	// ++ VOG Солодов В.В. 13.10.2021 CRM-1253
	Если Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаГод Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПериодПланирования",
			"Доступность",
			Ложь);
		
	КонецЕсли;
	// -- VOG Солодов В.В. 13.10.2021 CRM-1253
	
	ОбъектКомпоновки = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.ПланированиеПродажОбои"));
	//Схема = ОбъектКомпоновки.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхГод");
	Схема = ПолучитьСхемуКомпоновки();
	АдресСхемы = ПоместитьВоВременноеХранилище(Схема,УникальныйИдентификатор);
	НастройкиСКД= Схема.НастройкиПоУмолчанию;
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	Компоновщик.Инициализировать(Источник);
	Если Объект.Ссылка<>Документы.ПланированиеПродажОбои.ПустаяСсылка() тогда
		НастройкиСКД = Объект.Ссылка.Настройки.Получить();
	КонецЕсли;
	Компоновщик.ЗагрузитьНастройки(НастройкиСКД);
	ЭлементОтбора = Неопределено;
	
	
	Зпрс = Новый Запрос;
	Зпрс.Текст = "ВЫБРАТЬ
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель
	|	И ИсполнителиЗадач.РольИсполнителя = &Роль";
	Зпрс.УстановитьПараметр("Исполнитель",Пользователи.ТекущийПользователь());
	Зпрс.УстановитьПараметр("Роль",Справочники.РолиИсполнителей.НайтиПоКоду("000000032"));
	Результат = Зпрс.Выполнить();
	
	Если не Результат.Пустой() тогда
		Для каждого Элемент из Компоновщик.Настройки.Отбор.Элементы цикл
			Если ТипЗнч(Элемент)=Тип("ЭлементОтбораКомпоновкиДанных") тогда
				// +++ VOG Кулаков П.Л. 07.06.2021
				Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Менеджер") 
						ИЛИ Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МенеджерОтчет") тогда
				// --- VOG Кулаков П.Л.
					ЭлементОтбора = Элемент;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ЭлементОтбора=Неопределено тогда
			ЭлементОтбора = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Менеджер"+?(Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаКвартал,"Отчет",""));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ЭлементОтбора.ПравоеЗначение = Объект.Автор;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли;
	
	ПодразделениеТекущегопользователя = Справочники.СтруктураПредприятия.ПолучитьОбособленноеПодразделение(Пользователи.ТекущийПользователь().Подразделение);	
	Если ПодразделениеТекущегопользователя.Код<>"000000001" тогда
		
		Для каждого Элемент из Компоновщик.Настройки.Отбор.Элементы цикл
			Если ТипЗнч(Элемент)=Тип("ЭлементОтбораКомпоновкиДанных") тогда
				Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение"+?(Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаКвартал,"Отчет","")) тогда
					ЭлементОтбора = Элемент;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭлементОтбора=Неопределено тогда
			ЭлементОтбора = Компоновщик.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
		КонецЕсли;
		
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.ПравоеЗначение = ПодразделениеТекущегопользователя;
		ЭлементОтбора.Использование = Истина;
		
	КонецЕсли;
	
	Элементы.ДляПолныхПрав.Видимость = РольДоступна("ПолныеПрава");
	
	ВыполнятьЗамеры = Ложь; 
КонецПроцедуры

&НаКлиенте
Процедура ТабДокПриАктивизации(Элемент)
	
	Область = ТабДок.ТекущаяОбласть;
	Редактирование = Истина;
	Если Найти(Область.Имя,":")>0 тогда
		МассивОбластей = СтрРазделить(Область.Имя,":",Ложь);		
		ПерваяЯчейка= СтрРазделить(Сред(МассивОбластей[0],2),"C",Ложь);
		ПоследняяЧейка= СтрРазделить(Сред(МассивОбластей[1],2),"C",Ложь);
		Попытка
			Для  НомерСтроки = Число(ПерваяЯчейка[0]) по Число(ПоследняяЧейка[0]) цикл
				Для  НомерКолонки = Число(ПерваяЯчейка[1]) по Число(ПоследняяЧейка[1]) цикл
					ОбластьТабДок = ТабДок.Область("R"+Формат(НомерСтроки,"ЧГ=0")+"C"+Формат(НомерКолонки,"ЧГ=0"));
					Если НЕ ЕстьВозможностьРедактировать(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(ОбластьТабДок.Имя,АдресСохраненныхРасшифровокЯчеек)) тогда
						Редактирование = Ложь;
						Прервать;	
					КонецЕсли;
				КонецЦикла;
				Если Редактирование = Ложь тогда Прервать; КонецЕсли;	
			КонецЦикла;
		Исключение
		КонецПопытки;
	Иначе	
		Если НЕ ЕстьВозможностьРедактировать(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(Область.Имя,АдресСохраненныхРасшифровокЯчеек)) тогда
			Редактирование = Ложь;
		КонецЕсли;
	КонецЕсли;
	Элементы.ТабДок.Редактирование = Редактирование;
	
	СуммаИтого = 0;
	Для каждого Область из табДок.ВыделенныеОбласти цикл
		Если Найти(Область.Имя,":")>0 тогда
			МассивОбластей = СтрРазделить(Область.Имя,":",Ложь);		
			ПерваяЯчейка= СтрРазделить(Сред(МассивОбластей[0],2),"C",Ложь);
			ПоследняяЧейка= СтрРазделить(Сред(МассивОбластей[1],2),"C",Ложь);
			Попытка
				Для  НомерСтроки = Число(ПерваяЯчейка[0]) по Число(ПоследняяЧейка[0]) цикл
					Для  НомерКолонки = Число(ПерваяЯчейка[1]) по Число(ПоследняяЧейка[1]) цикл
						ОбластьТабДок = ТабДок.Область("R"+Формат(НомерСтроки,"ЧГ=0")+"C"+Формат(НомерКолонки,"ЧГ=0"));
						попытка
							// +++ VOG Кулаков П.Л. 03.06.2021 DEV-573
							//ЗначениеПоля = Число(СтрЗаменить(СтрЗаменить(ОбластьТабДок.Текст," ",""),",","."));
							ЗначениеПоля = Число(СтрЗаменить(СтрЗаменить(ОбластьТабДок.Текст," ",""),"%",""));
							// --- VOG Кулаков П.Л.
						Исключение
							ЗначениеПоля = 0;
						КонецПопытки;
						СуммаИтого = СуммаИтого+ ЗначениеПоля;	
					КонецЦикла;
				КонецЦикла;
			Исключение
			КонецПопытки;
		Иначе	
			попытка
				// +++ VOG Кулаков П.Л. 03.06.2021 DEV-573
				//ЗначениеПоля = Число(СтрЗаменить(СтрЗаменить(Область.Текст," ",""),",","."));
				ЗначениеПоля = Число(СтрЗаменить(СтрЗаменить(Область.Текст," ",""),"%",""));
				// --- VOG Кулаков П.Л.
			Исключение
				ЗначениеПоля = 0;
			КонецПопытки;
			СуммаИтого =СуммаИтого + ЗначениеПоля;	
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры


&НаСервере
Процедура УстановитьЗаголовкиПолей(СтрокаНастройки, ДатаДокумента, ТекущийКвартал)
	
	ЗаменаЗаголовковПолей(СтрокаНастройки.Выбор.Элементы,ДатаДокумента,ТекущийКвартал);
	
	Для каждого ЭлСтрук из СтрокаНастройки.Структура цикл
		УстановитьЗаголовкиПолей(ЭлСтрук,ДатаДокумента,ТекущийКвартал);	
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаменаЗаголовковПолей(Поля, ДатаДокумента, ТекущийКвартал)
	
	Для Каждого Поле Из Поля Цикл
		
		Если СтрНайти(Поле.Заголовок, "%Текущий год%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Текущий год%", Формат(ДатаДокумента, "ДФ=yyyy"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Прошлый год%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Прошлый год%", Формат(НачалоГода(ДатаДокумента) - 1, "ДФ=yyyy"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Следующий квартал%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Следующий квартал%", СтрШаблон("%1 кв", ТекущийКвартал + 1));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%квартал%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%квартал%", СтрШаблон("%1 кв", ТекущийКвартал + 1));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%Прошлый квартал%") > 0 Тогда
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%Прошлый квартал%", СтрШаблон("%1 кв", ТекущийКвартал));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%1 месяц%") > 0 Тогда
			ДатаМесяца = ДобавитьМесяц(НачалоГода(ДатаДокумента), ТекущийКвартал * 3);
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%1 месяц%", Формат(ДатаМесяца, "ДФ=MMMM"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%2 месяц%") > 0 Тогда
			ДатаМесяца = ДобавитьМесяц(НачалоГода(ДатаДокумента), ТекущийКвартал * 3 + 1);
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%2 месяц%", Формат(ДатаМесяца, "ДФ=MMMM"));
		КонецЕсли;
		
		Если СтрНайти(Поле.Заголовок, "%3 месяц%") > 0 Тогда
			ДатаМесяца = ДобавитьМесяц(НачалоГода(ДатаДокумента), ТекущийКвартал * 3 + 2);
			Поле.Заголовок = СтрЗаменить(Поле.Заголовок, "%3 месяц%", Формат(ДатаМесяца, "ДФ=MMMM"));
		КонецЕсли;
		Если  ТипЗнч(Поле) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") тогда
			ЗаменаЗаголовковПолей(Поле.Элементы,ДатаДокумента,ТекущийКвартал);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьВозможностьРедактировать(АдресРасшифровки,ИДРасшифровки)
	
	ДТН = Справочники.РолиИсполнителей.НайтиПоКоду("000000003");
	ГенДир  = Справочники.РолиИсполнителей.НайтиПоКоду("000000004");  
	РТН  = Справочники.РолиИсполнителей.НайтиПоКоду("000000015");
	РРО = Справочники.РолиИсполнителей.НайтиПоКоду("000000031");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Разрешенные
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель";
	Запрос.УстановитьПараметр("Исполнитель",Пользователи.ТекущийПользователь());
	Роли = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РольИсполнителя");
	Попытка
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки);
		ДанныеРасшифровкиОбласти = ДанныеРасшифровки.Элементы[ИДРасшифровки];
		ПоляРасшифровки = ДанныеРасшифровкиОбласти.ПолучитьПоля(); 
		КолВоПолей=0;
		Если ПоляРасшифровки.Найти("ВидПотенциальнойТорговойТочки")<>Неопределено тогда
			
			Если ПоляРасшифровки.Найти("План05")<>Неопределено или ПоляРасшифровки.Найти("План106")<>Неопределено тогда
				Возврат Ложь;
			КонецЕсли;
			Если ПоляРасшифровки.Найти("ТорговаяТочка")<>Неопределено   И ТипЗнч(ПоляРасшифровки.Найти("ТорговаяТочка").Значение) = Тип("Строка") тогда 
				Если ПоляРасшифровки.Найти("КорректировкаПланаДТН")=Неопределено и ПоляРасшифровки.Найти("КорректировкаПлана")=Неопределено и ПоляРасшифровки.Найти("Комментарий")=Неопределено тогда
					Возврат Ложь;	
				КонецЕсли;	
			КонецЕсли;	
			
			Если ПоляРасшифровки.Найти("ТорговаяТочка")<>Неопределено   И ЗначениеЗаполнено(ПоляРасшифровки.Найти("ВидПотенциальнойТорговойТочки").Значение) тогда 
				Если ПоляРасшифровки.Найти("КорректировкаПланаДТН")=Неопределено и ПоляРасшифровки.Найти("КорректировкаПлана")=Неопределено и ПоляРасшифровки.Найти("Комментарий")=Неопределено тогда
					Возврат Ложь;	
				КонецЕсли;	
			КонецЕсли;
			
			Если ПоляРасшифровки.Найти("КорректировкаПланаДТН")<>Неопределено тогда
				
				ЕстьДТН = Роли.Найти(ДТН);
				ЕстьГенДир = Роли.Найти(ГенДир);
				Если ЕстьГенДир<>Неопределено или ЕстьДТН<>Неопределено или РольДоступна("ПолныеПрава") тогда
					Возврат Истина;
				Иначе
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПоляРасшифровки.Найти("КорректировкаПлана")<>Неопределено  тогда
				//ЕстьРТН = Роли.Найти(РТН);
				//ЕстьРРО = Роли.Найти(РРо);
				//ЕстьДТН = Роли.Найти(ДТН);
				//ЕстьГенДир = Роли.Найти(ГенДир);
				//Если ЕстьРТН<>Неопределено или ЕстьРРО<>Неопределено или РольДоступна("ПолныеПрава") или ЕстьГенДир<>Неопределено или ЕстьДТН<>Неопределено  тогда
				Возврат Истина;
				//Иначе
				//	Возврат Ложь;
				//КонецЕсли;                                                                                                                           
			КонецЕсли;
		КонецЕсли;
		
		Если ПоляРасшифровки.Найти("ВидПотенциальнойТТ")<>Неопределено тогда
			Если ПоляРасшифровки.Найти("ВидПотенциальнойТТ").Значение <> Перечисления.ВидыПотенциальнойТорговойТочки.ПустаяСсылка() тогда 
				Если ПоляРасшифровки.Найти("ПланКоличествоПолок106")<>Неопределено или ПоляРасшифровки.Найти("ПланКоличествоПолок05")<>Неопределено
					или ПоляРасшифровки.Найти("ПланОборот106")<>Неопределено или ПоляРасшифровки.Найти("ПланОборот05")<>Неопределено
					или ПоляРасшифровки.Найти("ПланКоличествоSKUПереоценка106")<>Неопределено или ПоляРасшифровки.Найти("ПланКоличествоSKUПереоценка05")<>Неопределено
					или ПоляРасшифровки.Найти("ПланПереоценка106")<>Неопределено или ПоляРасшифровки.Найти("ПланПереоценка05")<>Неопределено
					или ПоляРасшифровки.Найти("Корректировка")<>Неопределено или ПоляРасшифровки.Найти("Распродажа")<>Неопределено Тогда
					// +++ VOG Кулаков П.Л. 17.03.2021 DEV-273
					//или ПоляРасшифровки.Найти("КомандировкаМесяц1")<>Неопределено или ПоляРасшифровки.Найти("КомандировкаМесяц2")<>Неопределено или ПоляРасшифровки.Найти("КомандировкаМесяц3")<>Неопределено или ПоляРасшифровки.Найти("ЗадачиПоДостижениюЦели")<>Неопределено		тогда
					// --- VOG Кулаков П.Л.
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ПолеР из ПоляРасшифровки цикл
			Если ПолеР.Поле = "ВозможноРедактирование" тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;	
	Исключение
		возврат Ложь;	
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОткрытьЗначение(АдресРасшифровки,ИДРасшифровки)
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки);
	Попытка
		ДанныеРасшифровкиОбласти = ДанныеРасшифровки.Элементы[ИДРасшифровки];
		ПоляРасшифровки = ДанныеРасшифровкиОбласти.ПолучитьПоля(); 
		КолВо=0;
		Значение = Неопределено;
		Для каждого ПолеР из ПоляРасшифровки цикл
			Если ТипЗнч(ПолеР.Значение) = Тип("СправочникСсылка.вогТорговыеТочки") тогда
				Значение = ПолеР.Значение;	
			КонецЕсли;
			КолВо=КолВо+1;	
		КонецЦикла;
		Если КолВо>1 тогда
			Значение = Неопределено;
		КонецЕслИ;
		Возврат Значение;	
	Исключение	
	КонецПопытки;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИДРасшифровки(ИмяОбласти,Адрес)
	Попытка
		ТЗ = ПолучитьИзВременногоХранилища(Адрес);
		Поиск = Новый Структура("ИмяОбласти",ИмяОбласти);
		СтрокиРасшифроки = ТЗ.НайтиСтроки(Поиск);
		Если СтрокиРасшифроки.Количество()>0 тогда
			Возврат СтрокиРасшифроки[0].ИдРасшифровки;		
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат 0;
КонецФункции

&НаСервере
Процедура ТабДокПриИзмененииСодержимогоОбластиНаСервере(Значение,ИДРасшифровки,ИмяОбласти,ТекстВЯчейке)
	
	Если Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаКвартал тогда
		ТабДокПриИзмененииСодержимогоОбластиНаСервереКвартал(Значение,ИДРасшифровки,ИмяОбласти,ТекстВЯчейке);	
		Возврат;	
	КонецЕсли;
	
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	Попытка
		ДанныеРасшифровкиОбласти = ДанныеРасшифровки.Элементы[ИДРасшифровки];
		ПоляРасшифровки = ДанныеРасшифровкиОбласти.ПолучитьПоля(); 
		ЗначениеПоля = 	Число(Значение);
	Исключение
		ЗначениеПоля = 0;
	КонецПопытки;
	
	ИмяРеквизита  = "";
	ТорговаяТочка = ПоляРасшифровки.Найти("ТорговаяТочка").Значение;
	ВидПотенциальнойТорговойТочки = ПоляРасшифровки.Найти("ВидПотенциальнойТорговойТочки").Значение;
	Если ПоляРасшифровки.Найти("Комментарий")=Неопределено тогда
		КолПолок106 = ПоляРасшифровки.Найти("КоличествоПолок106").Значение;
		КолПолок05 = ПоляРасшифровки.Найти("КоличествоПолок05").Значение;
		КолПолокВОГ106 = ПоляРасшифровки.Найти("КоличествоПолокВОГ106").Значение;
		КолПолокВОГ05 = ПоляРасшифровки.Найти("КоличествоПолокВОГ05").Значение;
	КонецЕсли;
	//Если ВидПотенциальнойТорговойТочки = Перечисления.ВидыПотенциальнойТорговойТочки.НоваяБрендЗонаВСуществующейТТ тогда
	Поиск = Новый Структура("ТорговаяТочка,ВидПотенциальнойТорговойТочки",ТорговаяТочка,ВидПотенциальнойТорговойТочки);
	//Иначе
	//	Поиск = Новый Структура("ТорговаяТочка",ТорговаяТочка);
	//КонецЕсли;
	Строки = Объект.ДанныеПланирования.НайтиСтроки(Поиск);	
	Если Строки.Количество()>0 тогда
		Строка = Строки[0];
	Иначе
		Строка = Объект.ДанныеПланирования.Добавить();
		Строка.ТорговаяТочка = ТорговаяТочка;
		Строка.ВидПотенциальнойТорговойТочки= ВидПотенциальнойТорговойТочки;
		//Подгрузим данные из регистра
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеПланированияПродажОбоиСрезПоследних.Период КАК Период,
		|	ДанныеПланированияПродажОбоиСрезПоследних.Регистратор КАК Регистратор,
		|	ДанныеПланированияПродажОбоиСрезПоследних.НомерСтроки КАК НомерСтроки,
		|	ДанныеПланированияПродажОбоиСрезПоследних.Активность КАК Активность,
		|	ДанныеПланированияПродажОбоиСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
		|	ДанныеПланированияПродажОбоиСрезПоследних.Сценарий КАК Сценарий,
		|	ДанныеПланированияПродажОбоиСрезПоследних.Версия КАК Версия,
		|	ДанныеПланированияПродажОбоиСрезПоследних.ПериодПланирования КАК ПериодПланирования,
		|	ДанныеПланированияПродажОбоиСрезПоследних.Город КАК Город,
		|	ДанныеПланированияПродажОбоиСрезПоследних.КоличествоПолок1 КАК КоличествоПолок1,
		|	ДанныеПланированияПродажОбоиСрезПоследних.КоличествоПолок05 КАК КоличествоПолок05,
		|	ДанныеПланированияПродажОбоиСрезПоследних.ОборотСПолки1 КАК ОборотСПолки1,
		|	ДанныеПланированияПродажОбоиСрезПоследних.ОборотСПолки05 КАК ОборотСПолки05,
		|	ДанныеПланированияПродажОбоиСрезПоследних.КорректировкаПлана1 КАК КорректировкаПлана1,
		|	ДанныеПланированияПродажОбоиСрезПоследних.КорректировкаПлана05 КАК КорректировкаПлана05,
		|	ДанныеПланированияПродажОбоиСрезПоследних.КорректировкаПланаДТН1 КАК КорректировкаПланаДТН1,
		|	ДанныеПланированияПродажОбоиСрезПоследних.КорректировкаПланаДТН05 КАК КорректировкаПланаДТН05,
		|	ДанныеПланированияПродажОбоиСрезПоследних.План1 КАК План1,
		|	ДанныеПланированияПродажОбоиСрезПоследних.План05 КАК План05,
		|	ДанныеПланированияПродажОбоиСрезПоследних.Автор КАК Автор,
		|	ДанныеПланированияПродажОбоиСрезПоследних.ДатаИзменения КАК ДатаИзменения,
		|	ДанныеПланированияПродажОбоиСрезПоследних.Комментарий КАК Комментарий,
		|	ДанныеПланированияПродажОбоиСрезПоследних.Месяц КАК Месяц
		|ИЗ
		|	РегистрСведений.ДанныеПланированияПродажОбои.СрезПоследних(&ДатаДокумента, ТорговаяТочка = &ТТ и ВидПотенциальнойТорговойТочки = &ВидПТ) КАК ДанныеПланированияПродажОбоиСрезПоследних";
		Запрос.УстановитьПараметр("ТТ",ТорговаяТочка);
		Если ЗначениеЗаполнено(ВидПотенциальнойТорговойТочки) тогда
			Запрос.УстановитьПараметр("ВидПТ",ВидПотенциальнойТорговойТочки);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"и ВидПотенциальнойТорговойТочки = &ВидПТ","");
		КонецЕсли;
		Запрос.УстановитьПараметр("ДатаДокумента",Объект.Дата);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() тогда
			ЗаполнитьЗначенияСвойств(Строка,Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	//Если ПоляРасшифровки.Найти("План05") тогда
	//	ИмяРеквизита = "План05";	
	//КонецЕсли;
	//Если ПоляРасшифровки.Найти("План106") тогда
	//	ИмяРеквизита = "План106";	
	//КонецЕсли;
	Если ПоляРасшифровки.Найти("ПланКоличествоПолок05")<>Неопределено тогда
		ИмяРеквизита = "КоличествоПолок05";	
		ИндексРеквизита = 1;
	КонецЕсли;
	Если ПоляРасшифровки.Найти("ПланКоличествоПолок106")<>Неопределено тогда
		ИмяРеквизита = "КоличествоПолок1";	
		ИндексРеквизита = 0;
	КонецЕсли;
	Если ПоляРасшифровки.Найти("ПланОборотСПолки05")<>Неопределено тогда
		ИмяРеквизита = "ОборотСПолки05";	
		ИндексРеквизита = 5;
	КонецЕсли;
	Если ПоляРасшифровки.Найти("ПланОборотСПолки106")<>Неопределено тогда
		ИмяРеквизита = "ОборотСПолки1";	
		ИндексРеквизита = 4;
	КонецЕсли;
	Если ПоляРасшифровки.Найти("КорректировкаПлана")<>Неопределено тогда
		ИмяРеквизита = "КорректировкаПлана1";	
		ИндексРеквизита = 6;
	КонецЕсли;
	Если ПоляРасшифровки.Найти("КорректировкаПланаДТН")<>Неопределено тогда
		ИмяРеквизита = "КорректировкаПланаДТН1";	
		ИндексРеквизита = 7;
	КонецЕсли;
	Если ПоляРасшифровки.Найти("Комментарий")<>Неопределено тогда
		ИмяРеквизита = "Комментарий";	
		ИндексРеквизита = 0;
		ЗначениеПоля = ТабДок.Область(ИмяОбласти).Текст;	
	КонецЕсли;
	Если ИмяРеквизита = "" тогда
		Возврат;	
	КонецЕсли;
	
	
	Строка[ИмяРеквизита] = ЗначениеПоля;
	ТабДок.Область(ИмяОбласти).Текст = Формат(ЗначениеПоля,"ЧГ=3,0");
	Если ПоляРасшифровки.Найти("Комментарий")<>Неопределено тогда
		Возврат;	
	КонецЕсли;
	
	
	НомерСтроки = Сред(ИмяОбласти,2,СтрНайти(ИмяОбласти,"C")-2);
	НомерКолонки = Сред(ИмяОбласти,СтрНайти(ИмяОбласти,"C")+1);
	
	ИмяОбластиДоля106 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+2),"ЧДЦ=0");
	ИмяОбластиДоля05 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+3),"ЧДЦ=0");
	ИмяОбластиПланКоличествоПолок106 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита),"ЧДЦ=0");
	ИмяОбластиПланКоличествоПолок05 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+1),"ЧДЦ=0");
	ИмяОбластиПлан106 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+7),"ЧДЦ=0");
	ИмяОбластиПланСред = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+8),"ЧДЦ=0");
	//ИмяОбластиПлан05 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+11),"ЧДЦ=0");
	Попытка
		КолВоПолок106 = Число(ТабДок.Область(ИмяОбластиПланКоличествоПолок106).Текст);
	Исключение
		КолВоПолок106 = 0;
	КонецПопытки;
	Попытка
		КолВоПолок05 = Число(ТабДок.Область(ИмяОбластиПланКоличествоПолок05).Текст);
	Исключение
		КолВоПолок05 = 0;
	КонецПопытки;
	Строка.КоличествоПолок1 = КолВоПолок106;
	Строка.КоличествоПолок05 = КолВоПолок05;
	Если ТипЗнч(Строка.ТорговаяТочка) = Тип("Строка") тогда
		
		Строка.КоличествоПолок1 = ПоляРасшифровки.найти("ПланКоличествоПолок106").Значение;
		Строка.ОборотСПолки1 = ПоляРасшифровки.найти("ПланОборотСполки106").Значение;
		Строка.План1 =  ПоляРасшифровки.найти("ПланКоличествоПолок106").Значение * ПоляРасшифровки.найти("ПланОборотСполки106").Значение*(13 - ПоляРасшифровки.Найти("Месяц").Значение)  + Строка.КорректировкаПлана1 + 
		Строка.КорректировкаПланаДТН1; 
		
	Иначе
		//Если Строка.КоличествоПолок1<>0 или Строка.КоличествоПолок05<>0 тогда 
		Строка.План1 = КолПолокВОГ106*Строка.ОборотСПолки1*5 + 7*Строка.КоличествоПолок1 * Строка.ОборотСПолки1 + Строка.КорректировкаПлана1 + 
		Строка.КорректировкаПланаДТН1+?(ЗначениеЗаполнено(КолПолокВОГ05),КолПолокВОГ05,0) * Строка.ОборотСПолки05*5 + 7*Строка.КоличествоПолок05 * Строка.ОборотСПолки05; 
		//Иначе
		//	Строка.План1 = 0;
		//КонецЕсли;
	КонецЕсли;
	//Строка.План05 = КолПолокВОГ05 * Строка.ОборотСПолки05 + 7*Строка.КоличествоПолок05 * Строка.ОборотСПолки05 + Строка.КорректировкаПлана05 + Строка.КорректировкаПланаДТН05; 
	Если ТипЗнч(Строка.ТорговаяТочка) <> Тип("Строка") тогда
		Доля106 = ?(КолПолок106<>0, Окр(Строка.КоличествоПолок1 / КолПолок106*100,2),0) ;
		Доля05  = ?(КолПолок05<>0,Окр(Строка.КоличествоПолок05 / КолПолок05*100,2),0);
		ТабДок.Область(ИмяОбластиДоля106).Текст = Доля106;
		ТабДок.Область(ИмяОбластиДоля05).Текст = Доля05;
	КонецЕсли;
	ТабДок.Область(ИмяОбластиПлан106).Текст = Строка.План1;
	
	Если ТипЗнч(Строка.ТорговаяТочка) <> Тип("Строка") тогда
		ТабДок.Область(ИмяОбластиПланСред).Текст = Окр(Строка.План1/12,0);
	Иначе
		ТабДок.Область(ИмяОбластиПланСред).Текст = Окр(Строка.План1/(13 - ПоляРасшифровки.Найти("Месяц").Значение),0);
	КонецЕсли;
	//ТабДок.Область(ИмяОбластиПлан05).Текст = Строка.План05;
	
	
	
КонецПроцедуры


&НаСервере
Процедура ТабДокПриИзмененииСодержимогоОбластиНаСервереКвартал(Значение,ИДРасшифровки,ИмяОбласти,ТекстВЯчейке)
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	Попытка
		ДанныеРасшифровкиОбласти = ДанныеРасшифровки.Элементы[ИДРасшифровки];
		ПоляРасшифровки = ДанныеРасшифровкиОбласти.ПолучитьПоля(); 
		ЗначениеПоля = 	Число(Значение);
	Исключение
		ЗначениеПоля = 0;
	КонецПопытки;
	
	ИмяРеквизита  = "";
	Попытка
		ТорговаяТочка = ПоляРасшифровки.Найти("ТорговаяТочка").Значение;
	Исключение
		ТорговаяТочка = Справочники.вогТорговыеТочки.ПустаяСсылка();
	КонецПопытки;
	Попытка
		Клиент = ПоляРасшифровки.Найти("Клиент").Значение;
	Исключение
		Клиент = Справочники.Партнеры.ПустаяСсылка();
	КонецПопытки;
	// +++ VOG Кулаков П.Л. 16.03.2021 DEV-273
	Попытка
		ВидПотенциальнойТТ = ПоляРасшифровки.Найти("ВидПотенциальнойТТ").Значение;
	Исключение
		ВидПотенциальнойТТ = Перечисления.ВидыПотенциальнойТорговойТочки.ПустаяСсылка();
	КонецПопытки;
	// --- VOG Кулаков П.Л.	
	Если ЗначениеЗаполнено(ТорговаяТочка) тогда
		Поиск = Новый Структура("ТорговаяТочка,ВидПотенциальнойТТ",ТорговаяТочка,ВидПотенциальнойТТ);
		Строки = Объект.ДанныеПланированияКвартал.НайтиСтроки(Поиск);	
		Если Строки.Количество()>0 тогда
			Строка = Строки[0];
		Иначе
			Строка = Объект.ДанныеПланированияКвартал.Добавить();
			Строка.ТорговаяТочка = ТорговаяТочка;
			// +++ VOG Кулаков П.Л. 03.06.2021 DEV-573
			Строка.Клиент = Клиент;
			// --- VOG Кулаков П.Л.
			Строка.ВидПотенциальнойТТ = ВидПотенциальнойТТ;
			Запрос = новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Период КАК Период,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Регистратор КАК Регистратор,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.НомерСтроки КАК НомерСтроки,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Активность КАК Активность,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Сценарий КАК Сценарий,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Версия КАК Версия,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.ПериодПланирования КАК ПериодПланирования,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Город КАК Город,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.КоличествоПолок1 КАК КоличествоПолок106,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.КоличествоПолок05 КАК КоличествоПолок05,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.ОборотСПолки1 КАК Оборот106,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.ОборотСПолки05 КАК Оборот05,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.КорректировкаПлана1 КАК Корректировка,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.План1 КАК План,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Распродажа КАК Распродажа,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.КоличествоSKUПереоценка1 КАК КоличествоSKUПереоценка106,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.КоличествоSKUПереоценка05 КАК КоличествоSKUПереоценка05,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Переоценка1 КАК Переоценка106,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Переоценка05 КАК Переоценка05,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.МаркетингIndoor КАК МаркетингIndoor,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.МаркетингOutdoor КАК МаркетингOutdoor,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Акции КАК Акции,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Образцы КАК Образцы,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Корзины КАК Корзины,
			               |	ВЫБОР
			               |		КОГДА ДанныеПланированияПродажОбоиСрезПоследних.ТорговаяТочка ССЫЛКА Справочник.вогТорговыеТочки
			               |				И ДанныеПланированияПродажОбоиСрезПоследних.ТорговаяТочка <> ЗНАЧЕНИЕ(Справочник.вогТорговыеТочки.)
			               |			ТОГДА ДанныеПланированияПродажОбоиСрезПоследних.ТорговаяТочка.Партнер
			               |		ИНАЧЕ ДанныеПланированияПродажОбоиСрезПоследних.Клиент
			               |	КОНЕЦ КАК Клиент,
						   // +++ VOG Кулаков П.Л. 26.05.2021 DEV-273
			               |	ДанныеПланированияПродажОбоиСрезПоследних.МаркетингIndoorСвыше100 КАК МаркетингIndoorСвыше100,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Представительские КАК Представительские,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.ПрочийМаркетинг КАК ПрочийМаркетинг,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.СтоимостьУценки1 КАК СтоимостьУценки1,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.СтоимостьУценки05 КАК СтоимостьУценки05,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Цена1 КАК Цена1,
			               |	ДанныеПланированияПродажОбоиСрезПоследних.Цена05 КАК Цена05
						   // --- VOG Кулаков П.Л.
			               |ИЗ
			               |	РегистрСведений.ДанныеПланированияПродажОбои.СрезПоследних(
			               |			&ДатаДокумента,
			               |			ТорговаяТочка = &ТТ
			               |				И Сценарий = &Сценарий
			               |				И Версия = &Версия
						   // +++ VOG Кулаков П.Л. 30.06.2021 DEV-
						   |				И ПериодПланирования = &ПериодПланирования
						   // --- VOG Кулаков П.Л.
			               |				И ВидПотенциальнойТорговойТочки = &ВидПотенциальнойТТ) КАК ДанныеПланированияПродажОбоиСрезПоследних";
			Запрос.УстановитьПараметр("ТТ",ТорговаяТочка);
			Запрос.УстановитьПараметр("ВидПотенциальнойТТ",ВидПотенциальнойТТ);
			Запрос.УстановитьПараметр("Сценарий",Объект.СценарийПланирования);
			Запрос.УстановитьПараметр("Версия",Объект.ВерсияСценария);
			// +++ VOG Кулаков П.Л. 30.06.2021 DEV-
			Запрос.УстановитьПараметр("ПериодПланирования",Объект.ПериодПланирования);
			// --- VOG Кулаков П.Л.
			Запрос.УстановитьПараметр("ДатаДокумента",Объект.Дата);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() тогда
				ЗаполнитьЗначенияСвойств(Строка,Выборка);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Поиск = Новый Структура("Владелец,ВидПотенциальнойТТ",?(ЗначениеЗаполнено(ТорговаяТочка),ТорговаяТочка,Клиент),ВидПотенциальнойТТ);
	СтрокиКомментариев = Объект.Комментарии.НайтиСтроки(Поиск);	
	Если СтрокиКомментариев.Количество()>0 тогда
		СтрокаКоммент = СтрокиКомментариев[0];	
	Иначе
		СтрокаКоммент = Объект.Комментарии.Добавить();
		СтрокаКоммент.Владелец = Поиск.Владелец;
		СтрокаКоммент.ВидПотенциальнойТТ = Поиск.ВидПотенциальнойТТ;
		// +++ VOG Кулаков П.Л. 17.03.2021 DEV-273
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КомментарииКПланированиюПродажПлиткаСрезПоследних.ТорговаяТочка КАК ТорговаяТочка,
		               |	КомментарииКПланированиюПродажПлиткаСрезПоследних.Комментарий КАК Комментарий,
		               |	КомментарииКПланированиюПродажПлиткаСрезПоследних.ВидПотенциальнойТТ КАК ВидПотенциальнойТТ
		               |ИЗ
		               |	РегистрСведений.КомментарииКПланированиюПродажПлитка.СрезПоследних(
		               |			&ДатаДокумента,
		               |			СценарийПланирования = &СценарийКвартал
		               |				И НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои)
		               |				И ТорговаяТочка = &ТорговаяТочка
		               |				И Клиент = &Клиент
		               |				И ВидПотенциальнойТТ = &ВидПотенциальнойТТ) КАК КомментарииКПланированиюПродажПлиткаСрезПоследних";
		
		Запрос.УстановитьПараметр("СценарийКвартал",Объект.СценарийПланирования);
		Запрос.УстановитьПараметр("ВидПотенциальнойТТ",ВидПотенциальнойТТ);
		Запрос.УстановитьПараметр("Клиент",Клиент);
		Запрос.УстановитьПараметр("ТорговаяТочка",ТорговаяТочка);
		Запрос.УстановитьПараметр("ДатаДокумента",Объект.Дата);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() тогда
			СтрокаКоммент.Комментарий = Выборка.Комментарий;
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		
		
		
	КонецЕсли;
	СтрокиКоммандировки = Объект.Командировки.НайтиСтроки(Поиск);	
	Если СтрокиКоммандировки.Количество()>0 тогда
		СтрокаКомандировка = СтрокиКоммандировки[0];	
	Иначе
		СтрокаКомандировка = Объект.Командировки.Добавить();
		СтрокаКомандировка.Владелец = Поиск.Владелец;
		// +++ VOG Кулаков П.Л. 18.03.2021 DEV-273
		//СтрокаКомандировка.ВидПотенциальнойТТ = ВидПотенциальнойТТ;
		// --- VOG Кулаков П.Л.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПланированиеПосещенийСрезПоследних.Количество1Месяц КАК КомандировкаМесяц1,
		               |	ПланированиеПосещенийСрезПоследних.Количество2Месяц КАК КомандировкаМесяц2,
		               |	ПланированиеПосещенийСрезПоследних.Количество3Месяц КАК КомандировкаМесяц3,
		               |	ПланированиеПосещенийСрезПоследних.ЗадачиПоДостижениюЦели КАК ЗадачиПоДостижениюЦели,
		               |	ПланированиеПосещенийСрезПоследних.ВидПотенциальнойТорговойТочки КАК ВидПотенциальнойТТ
		               |ИЗ
		               |	РегистрСведений.ПланированиеПосещений.СрезПоследних(
		               |			&ДатаДок,
		               |			СценарийПланирования = &СценарийПланирования
		               |				И ПериодПланирования = &ПериодПланирования
		               |				И НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои)
		               |				И (Партнер = &партнер
		               |					И ТорговаяТочка = &ТорговаяТочка)
		               |				И Версия = &Версия
		               |				И ВидПотенциальнойТорговойТочки = &ВидПотенциальнойТТ) КАК ПланированиеПосещенийСрезПоследних";
		
		Запрос.УстановитьПараметр("СценарийПланирования",Объект.СценарийПланирования);
		Запрос.УстановитьПараметр("ПериодПланирования",Объект.ПериодПланирования);
		Запрос.УстановитьПараметр("ВидПотенциальнойТТ",ВидПотенциальнойТТ);
		Запрос.УстановитьПараметр("Версия",Объект.ВерсияСценария);
		Запрос.УстановитьПараметр("Партнер",Клиент);
		Запрос.УстановитьПараметр("ТорговаяТочка",ТорговаяТочка);
		Запрос.УстановитьПараметр("ДатаДок",Объект.Дата);
		Выборка = Запрос.Выполнить().Выбрать();
		// +++ VOG Кулаков П.Л. 17.03.2021 DEV-273
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СтрокаКомандировка,Выборка);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаКомандировка.ВидПотенциальнойТТ) Тогда
			СтрокаКомандировка.ВидПотенциальнойТТ = ВидПотенциальнойТТ;
		КонецЕсли;
		// --- VOG Кулаков П.Л.
		
	КонецЕсли;
	
	
	ИндексРеквизита = -1;
	ФорматПоля = "ЧГ=3,0";
	Если ПоляРасшифровки.Найти("ПланКоличествоПолок05")<>Неопределено тогда
		ИмяРеквизита = "КоличествоПолок05";	
		// +++ VOG Кулаков П.Л. 02.06.2021 DEV-573
		ИндексРеквизита = 17;
		// --- VOG Кулаков П.Л.
	КонецЕсли;
	Если ПоляРасшифровки.Найти("ПланКоличествоПолок106")<>Неопределено тогда
		ИмяРеквизита = "КоличествоПолок106";	
		ИндексРеквизита = 1;
	КонецЕсли;
	Если ПоляРасшифровки.Найти("ПланОборот05")<>Неопределено тогда
		ИмяРеквизита = "Оборот05";	
		// +++ VOG Кулаков П.Л. 02.06.2021 DEV-573
		ИндексРеквизита = 23;
		// --- VOG Кулаков П.Л.
	КонецЕсли;
	Если ПоляРасшифровки.Найти("ПланОборот106")<>Неопределено тогда
		ИмяРеквизита = "Оборот106";	
		ИндексРеквизита = 7;
	КонецЕсли;
	
	Если ПоляРасшифровки.Найти("Комментарий")<>Неопределено тогда
		СтрокаКоммент.Комментарий = ТабДок.Область(ИмяОбласти).Текст;
		Возврат;
	КонецЕсли;
	
	Если ПоляРасшифровки.Найти("ПланКоличествоSKUПереоценка106")<>Неопределено тогда
		ИмяРеквизита = "КоличествоSKUПереоценка106";
		// +++ VOG Кулаков П.Л. 26.05.2021 DEV-573
		ИндексРеквизита = 10;
		// --- VOG Кулаков П.Л.
	КонецЕсли;
	Если ПоляРасшифровки.Найти("ПланПереоценка106")<>Неопределено тогда
		ИмяРеквизита = "Переоценка106";	
		ФорматПоля = "ЧГ=3,0%; ЧФ=Ч%";
		// +++ VOG Кулаков П.Л. 26.05.2021 DEV-573
		ИндексРеквизита = 11;
		// --- VOG Кулаков П.Л.
	КонецЕсли;
	Если ПоляРасшифровки.Найти("ПланКоличествоSKUПереоценка05")<>Неопределено тогда
		ИмяРеквизита = "КоличествоSKUПереоценка05";	
		// +++ VOG Кулаков П.Л. 26.05.2021 DEV-573
		ИндексРеквизита = 26;
		// --- VOG Кулаков П.Л.
	КонецЕсли;
	Если ПоляРасшифровки.Найти("ПланПереоценка05")<>Неопределено тогда
		ИмяРеквизита = "Переоценка05";	
		// +++ VOG Кулаков П.Л. 26.05.2021 DEV-573
		ИндексРеквизита = 27;
		// --- VOG Кулаков П.Л.
		ФорматПоля = "ЧГ=3,0%; ЧФ=Ч%";
	КонецЕсли;
	Если ПоляРасшифровки.Найти("Корректировка")<>Неопределено тогда
		ИмяРеквизита = "Корректировка";	
		ИндексРеквизита = 32;
	КонецЕсли;
	Если ПоляРасшифровки.Найти("Распродажа")<>Неопределено тогда
		ИмяРеквизита = "Распродажа";	
		ИндексРеквизита = 34;
	КонецЕсли;
	Если ПоляРасшифровки.Найти("КомандировкаМесяц1")<>Неопределено тогда
		СтрокаКомандировка.КомандировкаМесяц1 = ТабДок.Область(ИмяОбласти).Текст;
		Возврат;
	КонецЕсли;
	Если ПоляРасшифровки.Найти("КомандировкаМесяц2")<>Неопределено тогда
		СтрокаКомандировка.КомандировкаМесяц2 = ТабДок.Область(ИмяОбласти).Текст;
		Возврат;
	КонецЕсли;
	Если ПоляРасшифровки.Найти("КомандировкаМесяц3")<>Неопределено тогда
		СтрокаКомандировка.КомандировкаМесяц3 = ТабДок.Область(ИмяОбласти).Текст;
		Возврат;
	КонецЕсли;
	Если ПоляРасшифровки.Найти("ЗадачиПоДостижениюЦели")<>Неопределено тогда
		СтрокаКомандировка.ЗадачиПоДостижениюЦели = ТабДок.Область(ИмяОбласти).Текст;
		Возврат;
	КонецЕсли;
	Если ПоляРасшифровки.Найти("МаркетингOutdoor")<>Неопределено тогда
		ИмяРеквизита = "МаркетингOutdoor";	
	КонецЕсли;
	Если ПоляРасшифровки.Найти("МаркетингIndoor")<>Неопределено тогда
		ИмяРеквизита = "МаркетингIndoor";	
	КонецЕсли;
	Если ПоляРасшифровки.Найти("Акции")<>Неопределено тогда
		ИмяРеквизита = "Акции";	
	КонецЕсли;
	Если ПоляРасшифровки.Найти("Образцы")<>Неопределено тогда
		ИмяРеквизита = "Образцы";	
	КонецЕсли;
	Если ПоляРасшифровки.Найти("Корзины")<>Неопределено тогда                                
		ИмяРеквизита = "Корзины";	
	КонецЕсли;
	// +++ VOG Кулаков П.Л. 26.05.2021 DEV-573
	Если ПоляРасшифровки.Найти("МаркетингIndoorСвыше100")<>Неопределено тогда
		ИмяРеквизита = "МаркетингIndoorСвыше100";	
	КонецЕсли;
	Если ПоляРасшифровки.Найти("Представительские")<>Неопределено тогда
		ИмяРеквизита = "Представительские";	
	КонецЕсли;
	Если ПоляРасшифровки.Найти("ПрочийМаркетинг")<>Неопределено тогда
		ИмяРеквизита = "ПрочийМаркетинг";	
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	Если ИмяРеквизита = "" тогда
		Возврат;	
	КонецЕсли;
	
	
	Строка[ИмяРеквизита] = ЗначениеПоля;
	ТабДок.Область(ИмяОбласти).Текст = Формат(ЗначениеПоля,ФорматПоля);
	ТекстВЯчейке = ТабДок.Область(ИмяОбласти).Текст; 
	Если ИндексРеквизита<>-1 тогда
		КолВоФактПродаж = ПоляРасшифровки.Найти("КоличествоСНачалаТекущегоГода").Значение;
		
		ПланГод = ПоляРасшифровки.Найти("ПланГодПлан").Значение;
		
		НомерСтроки = Сред(ИмяОбласти,2,СтрНайти(ИмяОбласти,"C")-2);
		НомерКолонки = Сред(ИмяОбласти,СтрНайти(ИмяОбласти,"C")+1);
		
		ИмяОбластиДоля106 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+4),"ЧДЦ=0");
		ИмяОбластиДоля05 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+20),"ЧДЦ=0");
		
		ИмяОбластиОборот106 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+7),"ЧДЦ=0");
		ИмяОбластиОборот05 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+23),"ЧДЦ=0");
		
		ИмяОбластиФактКоличествоПолок106 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+0),"ЧДЦ=0");
		ИмяОбластиФактКоличествоПолок05 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+16),"ЧДЦ=0");
		
		ИмяОбластиФактКоличествоПолокВОГ106 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+3),"ЧДЦ=0");
		ИмяОбластиФактКоличествоПолокВОГ05 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+19),"ЧДЦ=0");
		
		ИмяОбластиКорректировкаПлана = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+32),"ЧДЦ=0");
		ИмяОбластиРаспродажа = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+34),"ЧДЦ=0");
		
		ИмяОбластиПлан = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+36),"ЧДЦ=0");
		ИмяОбластиПланПлюсФакт = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+38),"ЧДЦ=0");
		ИмяОбластиДоляКГодовомуПлану = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+39),"ЧДЦ=0");
		
		// +++ VOG Кулаков П.Л. 26.05.2021 DEV-573
		ИмяОбластиСтоимостьРаспродажи = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+35),"ЧДЦ=0");
		
		ИмяОбластиСтоимостьУценки106 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+12),"ЧДЦ=0");
		ИмяОбластиСтоимостьУценки05 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+28),"ЧДЦ=0");
		ИмяОбластиИтогоУценка = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+33),"ЧДЦ=0");
		ИмяОбластиКоличествоПереоценка106 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+10),"ЧДЦ=0");
		ИмяОбластиПереоценка106 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+11),"ЧДЦ=0");
		ИмяОбластиКоличествоПереоценка05 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+26),"ЧДЦ=0");
		ИмяОбластиПереоценка05 = "R"+Формат(НомерСтроки,"ЧДЦ=0") + "C" + Формат((НомерКолонки-ИндексРеквизита+27),"ЧДЦ=0");
		
		Попытка
			КоличествоПереоценка106 = Число(СтрЗаменить(СтрЗаменить(ТабДок.Область(ИмяОбластиКоличествоПереоценка106).Текст," ",""),"%",""));
		Исключение
			КоличествоПереоценка106 = 0;
		КонецПопытки;
		
		Попытка
			КоличествоПереоценка05 = Число(СтрЗаменить(СтрЗаменить(ТабДок.Область(ИмяОбластиКоличествоПереоценка05).Текст," ",""),"%",""));
		Исключение
			КоличествоПереоценка05 = 0;
		КонецПопытки;
		
		Попытка
			Переоценка106 = Число(СтрЗаменить(СтрЗаменить(ТабДок.Область(ИмяОбластиПереоценка106).Текст," ",""),"%",""));
		Исключение
			Переоценка106 = 0;
		КонецПопытки;
		
		Попытка
			Переоценка05 = Число(СтрЗаменить(СтрЗаменить(ТабДок.Область(ИмяОбластиПереоценка05).Текст," ",""),"%",""));
		Исключение
			Переоценка05 = 0;
		КонецПопытки;
		// --- VOG Кулаков П.Л.
		
		Попытка
			КолВоПолок106 = Число(СтрЗаменить(СтрЗаменить(ТабДок.Область(ИмяОбластиФактКоличествоПолок106).Текст," ",""),"%",""));
		Исключение
			КолВоПолок106 = 0;
		КонецПопытки;
		
		Попытка
			КолВоПолок05 = Число(СтрЗаменить(ТабДок.Область(ИмяОбластиФактКоличествоПолок05).Текст," ",""));
		Исключение
			КолВоПолок05 = 0;
		КонецПопытки;
		
		Попытка
			Оборот106 = Число(СтрЗаменить(ТабДок.Область(ИмяОбластиОборот106).Текст," ",""));
		Исключение
			Оборот106 = 0;
		КонецПопытки;
		
		Попытка
			Оборот05 = Число(СтрЗаменить(ТабДок.Область(ИмяОбластиОборот05).Текст," ",""));
		Исключение
			Оборот05 = 0;
		КонецПопытки;
		
		Попытка
			Корректировка = Число(СтрЗаменить(ТабДок.Область(ИмяОбластиКорректировкаПлана).Текст," ",""));
		Исключение
			Корректировка = 0;
		КонецПопытки;
		Попытка
			Распродажа = Число(СтрЗаменить(ТабДок.Область(ИмяОбластиРаспродажа).Текст," ",""));
		Исключение
			Распродажа = 0;
		КонецПопытки;
		
		Попытка
			КоличествоПолокВОГ106 = Число(СтрЗаменить(ТабДок.Область(ИмяОбластиФактКоличествоПолокВОГ106).Текст," ",""));
		Исключение
			КоличествоПолокВОГ106 = 0;
		КонецПопытки;
		
		Попытка
			КоличествоПолокВОГ05 = Число(СтрЗаменить(ТабДок.Область(ИмяОбластиФактКоличествоПолокВОГ05).Текст," ",""));
		Исключение
			КоличествоПолокВОГ05 = 0;
		КонецПопытки;
		
		Доля106 = ?(КолВоПолок106<>0, Окр(Строка.КоличествоПолок106 / КолВоПолок106*100,2),0) ;
		Доля05  = ?(КолВоПолок05<>0,Окр(Строка.КоличествоПолок05 / КолВоПолок05*100,2),0);
		ИтогоПлан = Окр(КоличествоПолокВОГ106*Оборот106*1.5 + КоличествоПолокВОГ05*Оборот05*1.5  + Строка.КоличествоПолок106*Оборот106*1.5 +  Строка.КоличествоПолок05*Оборот05*1.5 + Корректировка + Распродажа,0);
		Строка.План  = ИтогоПлан;
		ФактПлюсПлан = окр(ИтогоПлан + КолВоФактПродаж,0);
		ДоляКГодовомуПлану = Окр(?(ПланГод<>0,ФактПлюсПлан / ПланГод,0) * 100,2);
		
		// +++ VOG Кулаков П.Л. 26.05.2021 DEV-573
		СтоимостьУценки106 = 0;
		СтоимостьУценки05 = 0;
		ИтогоУценка = 0;
		ПодразделениеТорговойТочки = РегистрыСведений.ПодразделенияТорговыхТочек.ПолучитьПодразделениеТорговойТочки(ТорговаяТочка,Справочники.НаправленияДеятельности.Обои);
		Если ЗначениеЗаполнено(ПодразделениеТорговойТочки) Тогда
			СтрокаЦеныРаспродажи = ТаблицаЦеныДляРаспродажи.НайтиСтроки(Новый Структура("ТорговаяТочка, Подразделение",ТорговаяТочка, ПодразделениеТорговойТочки));	
			СтрокаЦеныРаспродажиКлиент = ТаблицаЦеныДляРаспродажиКлиент.НайтиСтроки(Новый Структура("Клиент,Подразделение",ТорговаяТочка.Партнер, ПодразделениеТорговойТочки));
		Иначе
			СтрокаЦеныРаспродажи = ТаблицаЦеныДляРаспродажи.НайтиСтроки(Новый Структура("ТорговаяТочка",ТорговаяТочка));
			СтрокаЦеныРаспродажиКлиент = ТаблицаЦеныДляРаспродажиКлиент.НайтиСтроки(Новый Структура("Клиент,Подразделение",ТорговаяТочка.Партнер));
		КонецЕсли;
		СтрокаЦеныРаспродажиФилиал = ТаблицаЦеныДляРаспродажиФилиал.НайтиСтроки(Новый Структура("Подразделение", ПодразделениеТорговойТочки));
		
		Если СтрокаЦеныРаспродажи.Количество() > 0 И СтрокаЦеныРаспродажи[0].СредняяЦена1 <> 0 Тогда
			СредняяЦена106 = СтрокаЦеныРаспродажи[0].СредняяЦена1;
		ИначеЕсли СтрокаЦеныРаспродажиКлиент.Количество() > 0 И СтрокаЦеныРаспродажиКлиент[0].СредняяЦена1 <> 0 Тогда
			СредняяЦена106 = СтрокаЦеныРаспродажиКлиент[0].СредняяЦена1;
		ИначеЕсли СтрокаЦеныРаспродажиФилиал.Количество() > 0 И СтрокаЦеныРаспродажиФилиал[0].СредняяЦена1 <> 0 Тогда
			СредняяЦена106 = СтрокаЦеныРаспродажиФилиал[0].СредняяЦена1;
		Иначе
			СредняяЦена106 = 0;
		КонецЕсли;
		СтоимостьУценки106 = КоличествоПереоценка106 * 6 * СредняяЦена106 * Переоценка106 / 100;
		
		Если СтрокаЦеныРаспродажи.Количество() > 0 И СтрокаЦеныРаспродажи[0].СредняяЦена05 <> 0 Тогда
			СредняяЦена05 = СтрокаЦеныРаспродажи[0].СредняяЦена05;
		ИначеЕсли СтрокаЦеныРаспродажиКлиент.Количество() > 0 И СтрокаЦеныРаспродажиКлиент[0].СредняяЦена05 <> 0 Тогда
			СредняяЦена05 = СтрокаЦеныРаспродажиКлиент[0].СредняяЦена05;
		ИначеЕсли СтрокаЦеныРаспродажиФилиал.Количество() > 0 И СтрокаЦеныРаспродажиФилиал[0].СредняяЦена05 <> 0 Тогда
			СредняяЦена05 = СтрокаЦеныРаспродажиФилиал[0].СредняяЦена05;
		Иначе
			СредняяЦена05 = 0;
		КонецЕсли;
		СтоимостьУценки05 = КоличествоПереоценка05 * 6 * СредняяЦена05 * Переоценка05 / 100;
		
		ИтогоУценка = СтоимостьУценки05 + СтоимостьУценки106;
		Строка.Цена1 = СредняяЦена106;
		Строка.Цена05 = СредняяЦена05;
		
		ТабДок.Область(ИмяОбластиСтоимостьУценки106).Текст = окр(СтоимостьУценки106,2);
		ТабДок.Область(ИмяОбластиСтоимостьУценки05).Текст = окр(СтоимостьУценки05,2);
		ТабДок.Область(ИмяОбластиИтогоУценка).Текст = окр(ИтогоУценка,2);
		Строка.СтоимостьУценки1 = СтоимостьУценки106;
		Строка.СтоимостьУценки05 = СтоимостьУценки05;
		
		Если Распродажа <> 0 Тогда
			ПодразделениеТорговойТочки = РегистрыСведений.ПодразделенияТорговыхТочек.ПолучитьПодразделениеТорговойТочки(ТорговаяТочка,Справочники.НаправленияДеятельности.Обои);
			// +++ VOG Кулаков П.Л. 01.07.2021 DEV-708
			ПодразделениеКМВ = Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("3000815c-66e6-11e3-9235-00155d66c603"));
			Если ПодразделениеТорговойТочки = ПодразделениеКМВ Тогда
				ПодразделениеРостов = Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("9f82aafb-3b61-11e9-b0ca-005056bcd3e3"));
				ПодразделениеТорговойТочки = ПодразделениеРостов;
			КонецЕсли;
			// --- VOG Кулаков П.Л.
			СтрокаЗатратыНаРаспродажу = ТаблицаЗатратыНаРаспродажу.НайтиСтроки(Новый Структура("Подразделение",ПодразделениеТорговойТочки));
			Если СтрокаЗатратыНаРаспродажу.Количество() > 0 Тогда
				ЗатратыНаРаспродажу = СтрокаЗатратыНаРаспродажу[0].ЗатратыНаРаспродажу;
			Иначе 
				ЗатратыНаРаспродажу = 0;
			КонецЕсли;
			СтоимостьРаспродажа = ЗатратыНаРаспродажу*Распродажа;
		Иначе
			СтоимостьРаспродажа = 0;
		КонецЕсли;
		ТабДок.Область(ИмяОбластиСтоимостьРаспродажи).Текст = окр(СтоимостьРаспродажа,2);
		Строка.СтоимостьРаспродажа = СтоимостьРаспродажа;
		// --- VOG Кулаков П.Л.
		
		ТабДок.Область(ИмяОбластиДоля106).Текст = окр(Доля106,2);
		ТабДок.Область(ИмяОбластиДоля05).Текст = окр(Доля05,2);
		ТабДок.Область(ИмяОбластиПлан).Текст = ИтогоПлан;
		ТабДок.Область(ИмяОбластиПланПлюсФакт).Текст = ФактПлюсПлан;
		ТабДок.Область(ИмяОбластиДоляКГодовомуПлану).Текст = ДоляКГодовомуПлану;
	КонецЕсли;
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 01.06.2021 DEV-573
&НаСервере
Функция ЗаполнитьТаблицуЗатратыНаРаспродажу()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(вогЗатратыНаРаспродажуОбороты.КоличествоОборот) КАК КоличествоОборот,
		|	СУММА(вогЗатратыНаРаспродажуОбороты.СтоимостьОборот) КАК СтоимостьОборот,
		|	ВЫБОР
		|		КОГДА вогЗатратыНаРаспродажуОбороты.Подразделение = &ПодразделениеКМВ
		|			ТОГДА &ПодразделениеРостов
		|		ИНАЧЕ вогЗатратыНаРаспродажуОбороты.Подразделение
		|	КОНЕЦ КАК Подразделение
		|ПОМЕСТИТЬ втЗатратыНаРаспродажу
		|ИЗ
		|	РегистрНакопления.вогЗатратыНаРаспродажу.Обороты(&Начало3Месяца, &Конец3Месяца, , НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.Обои)) КАК вогЗатратыНаРаспродажуОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА вогЗатратыНаРаспродажуОбороты.Подразделение = &ПодразделениеКМВ
		|			ТОГДА &ПодразделениеРостов
		|		ИНАЧЕ вогЗатратыНаРаспродажуОбороты.Подразделение
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА втЗатратыНаРаспродажу.КоличествоОборот = 0
		|			ТОГДА 0
		|		ИНАЧЕ втЗатратыНаРаспродажу.СтоимостьОборот / втЗатратыНаРаспродажу.КоличествоОборот
		|	КОНЕЦ КАК ЗатратыНаРаспродажу,
		|	втЗатратыНаРаспродажу.Подразделение КАК Подразделение
		|ИЗ
		|	втЗатратыНаРаспродажу КАК втЗатратыНаРаспродажу";
	
	Запрос.УстановитьПараметр("Конец3Месяца", КонецМесяца(ДобавитьМесяц(Объект.Дата,-1)));
	Запрос.УстановитьПараметр("Начало3Месяца", НачалоМесяца(ДобавитьМесяц(Объект.Дата,-3)));
	// +++ VOG Кулаков П.Л. 01.07.2021 DEV-708
	ПодразделениеКМВ = Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("3000815c-66e6-11e3-9235-00155d66c603"));
	ПодразделениеРостов = Справочники.СтруктураПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор("9f82aafb-3b61-11e9-b0ca-005056bcd3e3"));
	Запрос.УстановитьПараметр("ПодразделениеКМВ", ПодразделениеКМВ);
	Запрос.УстановитьПараметр("ПодразделениеРостов", ПодразделениеРостов);
	// --- VOG Кулаков П.Л.
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗатратыНаРаспродажу.Загрузить(РезультатЗапроса);
	
КонецФункции // --- VOG Кулаков П.Л.

&НаКлиенте
Процедура ТабДокПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Найти(Область.Имя,":")>0 тогда
		МассивОбластей = СтрРазделить(Область.Имя,":",Ложь);		
		ПерваяЯчейка= СтрРазделить(Сред(МассивОбластей[0],2),"C",Ложь);
		ПоследняяЧейка= СтрРазделить(Сред(МассивОбластей[1],2),"C",Ложь);
		Для  НомерСтроки = Число(ПерваяЯчейка[0]) по Число(ПоследняяЧейка[0]) цикл
			Для  НомерКолонки = Число(ПерваяЯчейка[1]) по Число(ПоследняяЧейка[1]) цикл
				ОбластьТабДок = ТабДок.Область("R"+Формат(НомерСтроки,"ЧГ=0")+"C"+Формат(НомерКолонки,"ЧГ=0"));
				Если ЕстьВозможностьРедактировать(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(ОбластьТабДок.Имя,АдресСохраненныхРасшифровокЯчеек)) тогда
					Текст = Область.Текст;	
					ТабДокПриИзмененииСодержимогоОбластиНаСервере(ОбластьТабДок.Текст,ПолучитьИДРасшифровки(ОбластьТабДок.Имя,АдресСохраненныхРасшифровокЯчеек),ОбластьТабДок.Имя,Текст);
					Область.Текст = Текст;	
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	Иначе	
		Если ЕстьВозможностьРедактировать(АдресДанныхРасшифровки,ПолучитьИДРасшифровки(Область.Имя,АдресСохраненныхРасшифровокЯчеек)) тогда
			Текст = Область.Текст;	
			ТабДокПриИзмененииСодержимогоОбластиНаСервере(Область.Текст,ПолучитьИДРасшифровки(Область.Имя,АдресСохраненныхРасшифровокЯчеек),Область.Имя,Текст);
			Область.Текст = Текст;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Автор) тогда
		ТекущийОбъект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	ТекущийОбъект.Настройки = Новый ХранилищеЗначения(Компоновщик.ПолучитьНастройки());
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ВерсияСценария) тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	вогВерсииСценариевПланирования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогВерсииСценариевПланирования КАК вогВерсииСценариевПланирования
		|ГДЕ
		|	вогВерсииСценариевПланирования.Владелец = &Владелец
		|	И вогВерсииСценариевПланирования.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Владелец",ТекущийОбъект.СценарийПланирования);
		Запрос.УстановитьПараметр("Наименование","Основная");
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ТекущийОбъект.ВерсияСценария = Выборка.Ссылка;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ПериодПланирования) тогда
		Если Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаКвартал тогда
			ТекущийОбъект.ПериодПланирования = НачалоКвартала(ДобавитьМесяц(КонецКвартала(ТекущаяДата()),1));
		Иначе
			// ++ VOG Солодов В.В. 14.10.2021 CRM-1246
			ТекущийОбъект.ПериодПланирования = вогОбщегоНазначенияКлиентСервер.ПолучитьГодПланирования(Истина);
			// До изменения
			//ТекущийОбъект.ПериодПланирования = Дата(Константы.ГодПланированияОбои.Получить(),1,1);
			// -- VOG Солодов В.В. 14.10.2021 CRM-1246
		КонецЕсли;
	КонецЕсли;
	
	// +++ VOG Кулаков П.Л. 22.03.2021 DEV-141
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ИдетЗакрытиеДокумента",Истина);
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// +++ VOG Кулаков П.Л. 22.03.2021 DEV-141
	Если ПараметрыЗаписи.Свойство("ИдетЗакрытиеДокумента") И ПараметрыЗаписи.ИдетЗакрытиеДокумента Тогда
	Иначе
		ЗаполнитьНаСервере();
	КонецЕсли;
	// --- VOG Кулаков П.Л.
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРасшифровкуДляОткрытия(АдресРасшифровки,ИДРасшифровки)
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки);
	ДанныеРасшифровкиОбласти = ДанныеРасшифровки.Элементы[ИДРасшифровки];
	ПоляРасшифровки = ДанныеРасшифровкиОбласти.ПолучитьПоля(); 
	//+++ Терпогосян Д.Б. [11.08.2021 11:19:29] № DEV-314
	Если ПоляРасшифровки.Найти("ТорговаяТочка")<>Неопределено и ПоляРасшифровки.Найти("ВозможноРедактирование")=Неопределено тогда
		Возврат ПоляРасшифровки.Найти("ТорговаяТочка").Значение;
	ИначеЕсли ПоляРасшифровки.Найти("Клиент")<>Неопределено и ПоляРасшифровки.Найти("ВозможноРедактирование")=Неопределено тогда
		Возврат ПоляРасшифровки.Найти("Клиент").Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	//--- Терпогосян Д.Б. [11.08.2021 11:19:40] № DEV-314 
КонецФункции

&НаКлиенте
Процедура ТабДокОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	Р = ПолучитьРасшифровкуДляОткрытия(АдресДанныхРасшифровки, Расшифровка);
	
	//+++ Терпогосян Д.Б. [11.08.2021 11:20:18] № DEV-314
	Если Р<>Неопределено и ТипЗнч(Р)<>Тип("Строка") тогда
		Если ТипЗнч(Р) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
			ОткрытьФорму("Справочник.вогТорговыеТочки.ФормаОбъекта",Новый Структура("Ключ",Р),ЭтаФорма);
		ИначеЕсли ТипЗнч(Р) = Тип("СправочникСсылка.Партнеры") Тогда 
			ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("Ключ", Р), ЭтаФорма); 
		КонецЕсли; 
	КонецЕсли;
	//--- Терпогосян Д.Б. [11.08.2021 11:20:20] № DEV-314 	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеНастройкиКомпоновки(Команда)
	
	СтандартныеНастройкиКомпоновкинаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СтандартныеНастройкиКомпоновкинаСервере()
	
	ОбъектКомпоновки = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.ПланированиеПродажОбои"));
	//Схема = ОбъектКомпоновки.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхГод");
	Схема = ПолучитьСхемуКомпоновки();
	АдресСхемы = ПоместитьВоВременноеХранилище(Схема,УникальныйИдентификатор);
	НастройкиСКД= Схема.НастройкиПоУмолчанию;
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	Компоновщик.Инициализировать(Источник);
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	ОбъектКомпоновки.Настройки = Новый ХранилищеЗначения(НастройкиСКД);
	Компоновщик.ЗагрузитьНастройки(НастройкиСКД);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере	
Функция ПолучитьСхемуКомпоновки()
	
	ОбъектКомпоновки = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.ПланированиеПродажОбои"));
	Если Объект.СценарийПланирования = ПредопределенноеЗначение("Справочник.вогСценарииПланирования.ПланНаГод") тогда
		Схема = ОбъектКомпоновки.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхГод");
	Иначе	
		Схема = ОбъектКомпоновки.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанныхКвартал");
	КонецЕсли;
	Возврат Схема;
	
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	//+++ Терпогосян Д.Б. [06.08.2021 16:52:01] № DEV-743
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//--- Терпогосян Д.Б. [06.08.2021 16:52:07] № DEV-743 
КонецПроцедуры


//+++ Терпогосян Д.Б. [12.08.2021 15:00:53] № DEV-874 

//выполнение длительной операции

&НаКлиенте
Процедура Заполнить(Команда)
	ОчиститьСообщения();
	ПередФормированиемНаКлиенте();
	ТребуетсяОбработчик = ФоновоеЗаданиеЗапустить(Истина, Ложь); //  Знач ФормированиеПриОткрытии, Непосредственно
	Если ТребуетсяОбработчик Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
	Иначе
		ПослеФормированияНаКлиенте();
	КонецЕсли;
	//ЗаполнитьНаСервере(); 
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыФормированияДанных()
	
	Схема = ПолучитьИзВременногоХранилища(АдресСхемы);
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	Настройки = Компоновщик.ПолучитьНастройки();	
	ТекущаяДата = ДобавитьМесяц(Объект.Дата,0);
	ОбъектКомпоновки = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.ПланированиеПродажОбои"));       
	МакетОформления = ОбъектКомпоновки.ПолучитьМакет("МакетОформления");
	ВариантыОпросов = Новый Массив;
	ВариантыОпросов.Добавить(ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("e6f9dcee-5153-11ea-87ff-005056bc3fe8")));
	ВариантыОпросов.Добавить(ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("00a82227-cd9b-11ea-8f2a-005056bcd3e3")));
	ВариантыОпросов.Добавить(ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("a060ef76-b28b-11e9-9b11-005056bcd3e3")));
	ВариантыОпросов.Добавить(ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("f5022f7e-b81e-11e8-a684-005056bc3fe8")));
	ВариантОпросаСписокSKU = ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("4305c4d7-c743-11ea-8f2a-005056bcd3e3"));
	
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий",Объект.СценарийПланирования);
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодПланирования",Объект.ПериодПланирования);
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Версия",Объект.ВерсияСценария);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаДокумента",Объект.Дата);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка",Объект.Ссылка);
	КлассификаторКоличествоСтендов = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("1714096b-b20e-11e9-9b11-005056bcd3e3"));
	КлассификаторФорматТРТ = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("47b0ee76-ada2-11e7-80ce-08606e7382bc"));
	КлассификаторСтатусТРТ = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8"));
	КлассифкаторКоличествоSKU = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("5af63fbb-d6c6-11e8-a684-005056bc3fe8"));	
	КлассифкаторКоличествоSKUВОГ = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("db18bcf8-c743-11ea-8f2a-005056bcd3e3"));	
	Значение053 = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("227ad8da-c744-11ea-8f2a-005056bcd3e3"));
	Значение106 = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("1346f0b9-c744-11ea-8f2a-005056bcd3e3"));
	Размер_106 = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("768685fc-d6c6-11e8-a684-005056bc3fe8"));
	Размер_053 = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("bfec323c-d6c6-11e8-a684-005056bc3fe8"));
	СтатусТТЗакрыта = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8"));
	СтатусТТЗакрыта = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8"));
	КатегорияТТ = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("ca87c1d0-75a5-11ea-87ff-005056bc3fe8")).Владелец;
	ПараметрМест = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("4767d0c1-b28c-11e9-9b11-005056bcd3e3"));
	ПараметрРазмер = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(Новый УникальныйИдентификатор("2e0ee1db-b28c-11e9-9b11-005056bcd3e3"));
	ПараметрРоссия = Справочники.вогНаселенныеПункты.ПолучитьСсылку(Новый УникальныйИдентификатор("9f590895-f596-11e9-8661-005056bcd3e3"));
	СтатусАКБ = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("f84779ae-9a73-11e8-89fa-005056bc3fe8")); 
	СтатусНАКБ = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af2-9a74-11e8-89fa-005056bc3fe8")); 
	СтатусНовая = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("047f780f-8b44-11e9-9b11-005056bcd3e3")); 
	СтатусЗакрыт = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8")); 
	СписокDIY = Новый СписокЗначений;
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("4fc40649-ada2-11e7-80ce-08606e7382bc")));
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("64a60c68-06d3-11eb-8f2a-005056bcd3e3")));
	СписокDIY.Добавить(Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("6cac4f07-06d3-11eb-8f2a-005056bcd3e3")));
	
	ПараметрСпец = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("5d36cbb9-ada2-11e7-80ce-08606e7382bc"));
	ПараметрУнив = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("125c5f18-d29b-11e8-a684-005056bc3fe8"));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлассифкаторКоличествоSKU", КлассифкаторКоличествоSKU);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлассифкаторКоличествоSKU_ВОГ", КлассифкаторКоличествоSKUВОГ);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Значение053", Значение053);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Значение106", Значение106);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Размер_053", Размер_053);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Размер_106", Размер_106);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КатегорияТТклассификатор",КатегорияТТ);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлассификаторФорматТРТ", КлассификаторФорматТРТ);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КлассификаторСтатусТТ", КлассификаторСтатусТРТ);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СтатусТТЗакрыта",СтатусТТЗакрыта );
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("DIY", СписокDIY);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Спец", ПараметрСпец);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Унив", ПараметрУнив);
	УстановитьПривилегированныйРежим(Истина);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Подчиненные",Новый Массив(ПараметрыСеанса.вогПодчиненныеСотрудники));
	УстановитьПривилегированныйРежим(Ложь);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПолныеПрава",РольДоступна("ПолныеПрава"));
	Если Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаКвартал тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СценарийГод",Справочники.вогСценарииПланирования.ПланНаГод); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВерсияСценарияГод",Справочники.вогВерсииСценариевПланирования.НайтиПоНаименованию("Основная",Истина,,Справочники.вогСценарииПланирования.ПланНаГод)); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СценарийКвартал",Объект.СценарийПланирования); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВерсияСценарияКвартал",Объект.ВерсияСценария); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодПланированияГод",НачалоГода(Объект.ПериодПланирования)); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодПланирования",Объект.ПериодПланирования); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Начало3Мес",ДобавитьМесяц(НачалоМесяца(Объект.Дата),-3)); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Начало6Мес",ДобавитьМесяц(НачалоМесяца(Объект.Дата),-6)); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоКварталаПрошлогоГода",НачалоКвартала(ДобавитьМесяц(Объект.ПериодПланирования,-12))); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецКварталаПрошлогоГода",КонецКвартала(ДобавитьМесяц(Объект.ПериодПланирования,-12))); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоТекущегоГода",НачалоГода(Объект.Дата));
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПрошлогоГода",НачалоГода(ДобавитьМесяц(Объект.Дата,-12)));
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПрошлогоГода",КонецКвартала(ДобавитьМесяц(Объект.ПериодПланирования,-12)));
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Конец3МесПолных",КонецМесяца(ДобавитьМесяц(Объект.Дата,-1))); 
		// +++ VOG Кулаков П.Л. 23.06.2021 DEV-678
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПродажТекущийГод",Объект.Дата); 
		// --- VOG Кулаков П.Л.
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецТекущегоГода",КонецМесяца(ДобавитьМесяц(Объект.Дата,-1))); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодПланаНамесяц",НачалоМесяца(Объект.Дата)); 
		//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодПланаНамесяц",НачалоГода(Объект.Дата)); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("СценарийПланированияНаМесяц",Справочники.вогСценарииПланирования.ПланНаМесяцПоКлиентам); 
	Иначе
		
		// ++ VOG Солодов В.В. 14.10.2021 CRM-1249
		Если Месяц(ТекущаяДата) 	= 1 Тогда
			НачалоТекущегоГода 	= НачалоМесяца(ТекущаяДата());
		Иначе
			НачалоТекущегоГода 	= НачалоГода(ДобавитьМесяц(ТекущаяДата, -1));
		КонецЕсли;
		
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоТекущегоГода", НачалоТекущегоГода);
		// До изменения
		//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоТекущегоГода",НачалоГода(ДобавитьМесяц(ТекущаяДата,-1)));
		// -- VOG Солодов В.В. 14.10.2021 CRM-1249
		
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецТекущегоГода",КонецМесяца(ДобавитьМесяц(ТекущаяДата,-1))); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПрошлогоГода",КонецГода(ДобавитьМесяц(ТекущаяДата,-12)));     
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Начало4МесяцаНазад",НачалоМесяца(ДобавитьМесяц(ТекущаяДата,-4))); 
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПрошлогоГода",НачалоГода(ДобавитьМесяц(ТекущаяДата,-12)));
		//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Россия", ПараметрРоссия);
		
		// ++ VOG Солодов В.В. 20.10.2021 CRM-1248
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодПланирования", Объект.ПериодПланирования);
		// -- VOG Солодов В.В. 20.10.2021 CRM-1248
		
	КонецЕсли;
	ТекущаяДата 						= Объект.Дата;
	ТекущийКвартал 						= Цел((Месяц(ТекущаяДата) - 1) / 3) + 1;
	Для каждого СтрокаНастройки из Настройки.Структура[0].Колонки цикл
		УстановитьЗаголовкиПолей(СтрокаНастройки, ТекущаяДата, ТекущийКвартал);
	КонецЦикла;
	
	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("Схема",   Схема);
	ПараметрыФормированияОтчета.Вставить("Настройки", Настройки);
	ПараметрыФормированияОтчета.Вставить("МакетОформления", МакетОформления);
	ПараметрыФормированияОтчета.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);

	Возврат ПараметрыФормированияОтчета
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеЗапустить(Знач ФормированиеПриОткрытии, Непосредственно)
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
	
	// Запуск фонового задания
	ТабДок.Очистить();
	ПараметрыФормированияДанных = ПолучитьПараметрыФормированияДанных(); 
	
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Объект.Номер, Истина, Истина);
	ДатаДокумента = Формат(Объект.Дата,"ДЛФ=D"); 
	ИмяОтчета = "Планирование продаж обои №" + НомерДокумента + " от " + ДатаДокумента;

	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Формирование данных: %1'"),
		ИмяОтчета);
	ПараметрыЗапуска.ОжидатьЗавершение = Ложь;
	ПараметрыЗапуска.ЗапуститьНеВФоне = Непосредственно;
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ПланированиеПродажОбои.ПодготовитьДанныеВФоне",
		ПараметрыФормированияДанных,
		ПараметрыЗапуска);
	
	Если РезультатФоновогоЗадания.Статус = "Ошибка" Тогда
		ПоказатьОшибкиФормирования(РезультатФоновогоЗадания.КраткоеПредставлениеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресРезультата;
	
	Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
		ФоновоеЗаданиеЗагрузитьРезультат();
		ЗаданиеЗапущено = Ложь;
	Иначе
		ОтображениеСостояния = Элементы.ТабДок.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
		ОтображениеСостояния.Текст                          = НСтр("ru = 'Данные планирования формируются...'");
		
		ЗаданиеЗапущено = Истина;
	КонецЕсли;
	Возврат ЗаданиеЗапущено
КонецФункции

&НаКлиенте
Процедура ПередФормированиемНаКлиенте()
	ОтчетСформирован = Ложь;
	Если ВыполнятьЗамеры Тогда
		Комментарий = "Документ ""Планирование продаж обои"" (формирование)";
		КлючЗамеров = "Документ.ПланированиеПродажОбои"; 
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		ИдентификаторЗамера = МодульОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь,	КлючЗамеров + ".Формирование");
		МодульОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(ИдентификаторЗамера, Комментарий);
	КонецЕсли;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПланирование; 
	// 2-е фоновое задание для расчета цен и затрат 
	Если ВыполнятьЗамеры Тогда
		Комментарий1 = "Документ ""Планирование продаж обои"" (формирование цен и затрат)";
		ИдентификаторЗамера1 = МодульОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, КлючЗамеров + ".ФормированиеЦенЗатрат");
		МодульОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(ИдентификаторЗамера1, Комментарий1);
	КонецЕсли;
	стФоновоеЗадание = ЗапуститьФоновоеЗаданиеРасчетаЦенИзатратНаСервере(); 
	
	Если стФоновоеЗадание = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если стФоновоеЗадание.Статус <> "Выполняется" Тогда 
		ФоновоеЗаданиеЗавершение(стФоновоеЗадание, Ложь);
		Возврат;
	КонецЕсли;

	Если НЕ стФоновоеЗадание.Статус = "Выполнено" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ПараметрыОжидания.Интервал = 2;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(стФоновоеЗадание, Новый ОписаниеОповещения("ФоновоеЗаданиеЗавершение", ЭтотОбъект, Истина), ПараметрыОжидания);
		
		//ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПересчета", 2, Истина);
		//ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		Элементы.ТабДок.ТолькоПросмотр = Истина; 
	Иначе
		//ПоказатьОповещениеПользователя(НСтр("ru = 'Данные по ценам распродажи и затратам получены ...'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеЗавершение(Результат, ЗагрузитьРезультат) Экспорт 
	Если Результат = Неопределено Тогда 
		ПоказатьОшибкиФормирования(НСтр("ru = 'Прервано администратором'"));
		ПоказатьОповещениеПользователя(НСтр("ru = 'Цены распродажи не получены'"),,);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда 
		Если ЗагрузитьРезультат Тогда
			ЗагрузитьРезультат();
		КонецЕсли;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Цены распродажи и затратам получены ...'"),, Заголовок);
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьОшибкиФормирования(Результат.КраткоеПредставлениеОшибки);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Цены распродажи не получены'"),, Заголовок);
	КонецЕсли;
	Элементы.ТабДок.ТолькоПросмотр = Ложь; 
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		МодульОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера1);
	КонецЕсли;
	
КонецПроцедуры


//&НаКлиенте
//Процедура Подключаемый_ПроверитьВыполнениеЗаданияПересчета()
//	
//	Попытка
//		Если ФормаДлительнойОперации.Открыта() 
//			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
//			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
//				ЗагрузитьРезультат();
//				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
//				ПоказатьОповещениеПользователя(НСтр("ru = 'Данные по ценам распродажи и затратам получены ...'"));
//			Иначе
//				ПодключитьОбработчикОжидания( "Подключаемый_ПроверитьВыполнениеЗаданияПересчета", 2, Истина);
//			КонецЕсли;
//		КонецЕсли;
//	Исключение
//		ВызватьИсключение;
//	КонецПопытки;
//	
//КонецПроцедуры


//&НаСервереБезКонтекста
//Функция ЗаданиеВыполнено(ИдентификаторЗадания)
//	
//	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
//	
//КонецФункции

&НаСервере
Функция ЗапуститьФоновоеЗаданиеРасчетаЦенИзатратНаСервере()
	НаименованиеЗадания = НСтр("ru = 'Запуск длительной операции расчета цен и затрат обои'");
    ВыполняемыйМетод = "вогОбщегоНазначения.ПолучитьДанныеЦенЗатратОбои";
	
    ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
    ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
    ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыПроцедуры = Новый Структура("ДатаДокумента", Объект.Дата); 
	СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыПроцедуры, ПараметрыВыполнения); 
	ИдентификаторЗадания = СтруктураФоновогоЗадания.ИдентификаторЗадания;
	АдресХранилища       = СтруктураФоновогоЗадания.АдресРезультата;

	Если СтруктураФоновогоЗадания.Статус = "Выполнено" Тогда
		ЗагрузитьРезультат();
	КонецЕсли;

    Возврат СтруктураФоновогоЗадания;
КонецФункции // ()

&НаСервере
Процедура ЗагрузитьРезультат()
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		ТаблицаЦеныдляРаспродажи.Загрузить(РезультатВыполнения.ТаблицаЦеныдляРаспродажи); 
		ТаблицаЦеныДляРаспродажиКлиент.Загрузить(РезультатВыполнения.ТаблицаЦеныДляРаспродажиКлиент); 
		ТаблицаЦеныДляРаспродажиФилиал.Загрузить(РезультатВыполнения.ТаблицаЦеныДляРаспродажиФилиал); 
		ТаблицаЗатратыНаРаспродажу.Загрузить(РезультатВыполнения.ТаблицаЗатратыНаРаспродажу); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеФормированияНаКлиенте()
	ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		МодульОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Задание = ФоновоеЗаданиеПроверитьНаСервере();
	Если Задание.Выполняется Тогда
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	Иначе
		Если ОтчетСформирован Тогда
			//ПоказатьОповещениеПользователя(НСтр("ru = 'Данные планирования подготовлены'"), , Заголовок);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru = 'Данные планирования еще не готовы'"), , Заголовок);
		КонецЕсли;
		ПослеФормированияНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеПроверитьНаСервере()
	Задание = НайтиЗаданиеСлужебный(ФоновоеЗаданиеИдентификатор);
	Если Не Задание.Выполняется Тогда
		Если Задание.Успех Тогда
			ФоновоеЗаданиеЗагрузитьРезультат();
		Иначе
			ПоказатьОшибкиФормирования(Задание.Ошибка);
		КонецЕсли;
	КонецЕсли;
	Задание.Удалить("Ошибка");
	Возврат Задание;
КонецФункции

&НаСервере
Функция НайтиЗаданиеСлужебный(Знач Идентификатор)
	// Считывает состояние фонового задания по переданному идентификатору.
	//
	// Параметры:
	//   Идентификатор - УникальныйИдентификатор - Идентификатор фонового задания.
	//
	// Возвращаемое значение:
	//   Неопределено - Задание не найдено.
	//   Структура - Сведения о задании.
	//       * Выполняется - Булево - Истина когда фоновое задание еще выполняется.
	//       * Успешно     - Булево - Истина когда сеанс фонового задания завершился без ошибок.
	//       * Ошибка      - Строка, ИнформацияОбОшибке, Неопределено - Описание ошибки.
	//
	Результат = Новый Структура("Выполняется, Успех, Ошибка", Ложь, Ложь, Неопределено);
	Если Идентификатор = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если Задание = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.Выполняется = Истина;
	Иначе
		Результат.Выполняется = Ложь;
		Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			Результат.Успех = Истина;
		Иначе
			Результат.Успех = Ложь;
			Результат.Ошибка = Задание.ИнформацияОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат()
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
	Успех = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатФормирования, "Успех");
	Если Успех <> Истина Тогда
		ПоказатьОшибкиФормирования(РезультатФормирования.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.ТабДок.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	ОтчетСформирован = Истина;
	
	ТабДок = РезультатФормирования.ТабличныйДокумент; 
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(РезультатФормирования.Расшифровка, УникальныйИдентификатор); 
	АдресСохраненныхРасшифровокЯчеек = ПоместитьВоВременноеХранилище(РезультатФормирования.Расшифровка1, УникальныйИдентификатор); 
	
	Если Объект.СценарийПланирования = Справочники.вогСценарииПланирования.ПланНаКвартал тогда
		ТабДок.ФиксацияСлева = 1;
		ТабДок.ФиксацияСверху = 2;
	Иначе
		ТабДок.ФиксацияСлева = 1;
		ТабДок.ФиксацияСверху = 4;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
	//	УдалитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
	//КонецЕсли;
	//ОтчетДанныеРасшифровки = ПоместитьВоВременноеХранилище(РезультатФормирования.Расшифровка, УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при формировании:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.ТабДок.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ОписаниеОшибки;
	
	Если Не ПустаяСтрока(ПодробноеПредставлениеОшибки) Тогда
		ЗаписьЖурналаРегистрации("ПланированиеПродаж.Обои", УровеньЖурналаРегистрации.Предупреждение,Объект.Метаданные,Объект.Ссылка,ПодробноеПредставлениеОшибки); 
	
	КонецЕсли;
КонецПроцедуры

//--- Терпогосян Д.Б. [12.08.2021 15:00:58] № DEV-874 
