///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ.

&НаСервере
// Процедура заполняет дерево состояний звонков.
//
// Параметры:
//	Нет.
//
Процедура сфпЗаполнитьСостоянияЗвонков()
    ДеревоСостояний	= СостоянияЗвонков.ПолучитьЭлементы();
    ДеревоСостояний.Очистить();
	НоваяСтрока	= ДеревоСостояний.Добавить();
	НоваяСтрока.Состояние		= "Все";
    НоваяСтрока.ИндексКартинки	= 3;
	НоваяСтрока.Входящий		= Ложь;
    Входящие	= ДеревоСостояний.Добавить();
	Входящие.Состояние		= "Входящие";
    Входящие.ИндексКартинки	= 0;
	НоваяСтрока.Входящий	= Истина;
    ВходящиеЭлементы	= Входящие.ПолучитьЭлементы();
	НоваяСтрока	= ВходящиеЭлементы.Добавить();
	НоваяСтрока.Состояние		= "Отвеченные";
    НоваяСтрока.ИндексКартинки	= 3;
	НоваяСтрока.Входящий		= Истина;
	НоваяСтрока = ВходящиеЭлементы.Добавить();
	НоваяСтрока.Состояние		= "Пропущенные";
    НоваяСтрока.ИндексКартинки	= 3;
	НоваяСтрока.Входящий		= Истина;
    Исходящие = ДеревоСостояний.Добавить();
	Исходящие.Состояние			= "Исходящие";
    Исходящие.ИндексКартинки	= 1;
	НоваяСтрока.Входящий		= Ложь;
    ИсходящиеЭлементы	= Исходящие.ПолучитьЭлементы();
	НоваяСтрока	= ИсходящиеЭлементы.Добавить();
	НоваяСтрока.Состояние		= "Отвеченные";
    НоваяСтрока.ИндексКартинки	= 3;
	НоваяСтрока.Входящий		= Ложь;
	НоваяСтрока	= ИсходящиеЭлементы.Добавить();
	НоваяСтрока.Состояние		= "Не дозвонились";
    НоваяСтрока.ИндексКартинки	= 3;
	НоваяСтрока.Входящий		= Ложь;
КонецПроцедуры // сфпЗаполнитьСостоянияЗвонков()

&НаКлиенте
// Процедура устанавливает текущие отборы.
//
// Параметры:
//	Нет.
//
Процедура сфпУстановитьТекущиеОтборы()
    ТД =  Элементы.СостоянияЗвонков.ТекущиеДанные;
	// Устанавливаем новые отборы.
	ЭлементыСпискаОтбора = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Для Каждого ТекущийОтбор Из ЭлементыСпискаОтбора Цикл
		Если ТекущийОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если ТекущийОтбор.Представление = "Входящие" Тогда
				Если ТД = Неопределено Тогда
					ТекущийОтбор.Использование	= Ложь;
			    ИначеЕсли ТД.Состояние = "Входящие"  Тогда
					ТекущийОтбор.Использование	= Истина;
			    ИначеЕсли ТД.Состояние = "Отвеченные" Тогда
					ТекущийОтбор.Использование	= ТД.Входящий;
				ИначеЕсли ТД.Состояние = "Пропущенные"  Тогда
					ТекущийОтбор.Использование	= Истина;
				Иначе
		            ТекущийОтбор.Использование	= Ложь;
				КонецЕсли;
			ИначеЕсли ТекущийОтбор.Представление = "Исходящие" Тогда
				Если ТД = Неопределено Тогда
					ТекущийОтбор.Использование	= Ложь;
			    ИначеЕсли ТД.Состояние = "Исходящие"  Тогда
					ТекущийОтбор.Использование	= Истина;
			    ИначеЕсли ТД.Состояние = "Отвеченные" Тогда
					ТекущийОтбор.Использование	= НЕ ТД.Входящий;
				ИначеЕсли ТД.Состояние = "Не дозвонились"  Тогда
					ТекущийОтбор.Использование	= Истина;
				Иначе
		            ТекущийОтбор.Использование	= Ложь;
				КонецЕсли;
			ИначеЕсли ТекущийОтбор.Представление = "Отвеченные" Тогда
				Если ТД = Неопределено Тогда
					ТекущийОтбор.Использование	= Ложь;
			    ИначеЕсли ТД.Состояние = "Отвеченные" Тогда
					ТекущийОтбор.Использование	= Истина;
				Иначе
		            ТекущийОтбор.Использование	= Ложь;
				КонецЕсли;
			ИначеЕсли ТекущийОтбор.Представление = "Пропущенные" Тогда
				Если ТД = Неопределено Тогда
					ТекущийОтбор.Использование	= Ложь;
			    ИначеЕсли ТД.Состояние = "Пропущенные" Тогда
					ТекущийОтбор.Использование	= Истина;
			    ИначеЕсли ТД.Состояние = "Не дозвонились" Тогда
					ТекущийОтбор.Использование	= Истина;
				Иначе
		            ТекущийОтбор.Использование	= Ложь;
				КонецЕсли;
			ИначеЕсли ТекущийОтбор.Представление = "ОтборПоКлиенту" Тогда
				Если ЗначениеЗаполнено(ОтборПоКлиенту) Тогда
					ТекущийОтбор.ПравоеЗначение	= ОтборПоКлиенту;
					ТекущийОтбор.Использование	= Истина;
				Иначе
		            ТекущийОтбор.Использование	= Ложь;
				КонецЕсли;	
			ИначеЕсли ТекущийОтбор.Представление = "ОтборПоВладельцу" Тогда
				Если ЗначениеЗаполнено(ОтборПоВладельцу) Тогда
					ТекущийОтбор.ПравоеЗначение	= ОтборПоВладельцу;
					ТекущийОтбор.Использование	= Истина;
				Иначе
		            ТекущийОтбор.Использование	= Ложь;
				КонецЕсли;	
			ИначеЕсли ТекущийОтбор.Представление = "ОтборПоОтветственному" Тогда
				Если ЗначениеЗаполнено(ОтборПоОтветственному) Тогда
					ТекущийОтбор.ПравоеЗначение	= ОтборПоОтветственному;
					ТекущийОтбор.Использование	= Истина;
				Иначе
		            ТекущийОтбор.Использование	= Ложь;
				КонецЕсли;	
			ИначеЕсли ТекущийОтбор.Представление = "ОтборПоАвтору" Тогда
				Если ЗначениеЗаполнено(ОтборПоАвтору) Тогда
					ТекущийОтбор.ПравоеЗначение	= ОтборПоАвтору;
					ТекущийОтбор.Использование	= Истина;
				Иначе
		            ТекущийОтбор.Использование	= Ложь;
				КонецЕсли;	
			ИначеЕсли ТекущийОтбор.Представление = "ОтборПоДлительности" Тогда
				Если ОтборПоДлительности > 0  Тогда
					ТекущийОтбор.ПравоеЗначение	= Дата('00010101') + ОтборПоДлительности;
					ТекущийОтбор.Использование	= Истина;
				Иначе
		            ТекущийОтбор.Использование	= Ложь;
				КонецЕсли;	
			ИначеЕсли ТекущийОтбор.Представление = "ОтборПоПользователям" Тогда
				Если ОтборПоПользователям.Количество() > 0 Тогда
					ТекущийОтбор.ПравоеЗначение	= ОтборПоПользователям;
					ТекущийОтбор.Использование	= Истина;
				Иначе
		            ТекущийОтбор.Использование	= Ложь;
				КонецЕсли;	
        	КонецЕсли;
        КонецЕсли;
    КонецЦикла;        
КонецПроцедуры // сфпУстановитьТекущиеОтборы()	

//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РЕКВИЗИТОВ ФОРМЫ.

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы "СостоянияЗвонков".
//
Процедура СостоянияЗвонковПриАктивизацииСтроки(Элемент)
	сфпУстановитьТекущиеОтборы();	
КонецПроцедуры // СостоянияЗвонковПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "Выбор" таблицы формы "Список".
//
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//ТД = Элементы.Список.ТекущиеДанные;
	//Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	//ПараметрыФормы = Новый Структура("Ключ", ТД.Ссылка);
	//ОткрытьФорму("Документ.ТелефонныйЗвонок.Форма.сфпФормаДокумента", ПараметрыФормы);
КонецПроцедуры // СписокВыбор()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "Список".
//
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // СписокПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы формы "Список".
//
Процедура СписокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // СписокПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборПоКлиенту".
//
Процедура ОтборПоКлиентуПриИзменении(Элемент)
	сфпУстановитьТекущиеОтборы();	
КонецПроцедуры // ОтборПоКлиентуПриИзменении()

&НаКлиенте
Процедура ОтборПоКлиентуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ОтборПоВладельцу) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор",Ложь);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", ОтборПоВладельцу));
		ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора",ПараметрыФормы, Элементы.ОтборПоКлиенту);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборПоОтветственному".
//
Процедура ОтборПоОтветственномуПриИзменении(Элемент)
	сфпУстановитьТекущиеОтборы();	
КонецПроцедуры // ОтборПоОтветственномуПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборПоАвтору".
//
Процедура ОтборПоАвторуПриИзменении(Элемент)
	сфпУстановитьТекущиеОтборы();	
КонецПроцедуры // ОтборПоАвторуПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборПоДлительности".
//
Процедура ОтборПоДлительностиПриИзменении(Элемент)
	сфпУстановитьТекущиеОтборы();	
КонецПроцедуры // ОтборПоДлительностиПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" элемента формы "ОтборПоДлительности".
//
Процедура ОтборПоДлительностиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	Попытка
		ВвведенноеЧисло	= Число(Текст);
	Исключение
		ВвведенноеЧисло	= ОтборПоДлительности;
	КонецПопытки;
	СписокВыбора = Элемент.СписокВыбора;
	Если Элемент.СписокВыбора.НайтиПоЗначению(ВвведенноеЧисло) = Неопределено Тогда
		НовыйЭлемент				= Элемент.СписокВыбора.Добавить();
		НовыйЭлемент.Значение		= ВвведенноеЧисло;
		НовыйЭлемент.Представление	= Текст;
		Элемент.СписокВыбора.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	КонецЕсли;	
	ОтборПоДлительности	= ВвведенноеЧисло;
	сфпУстановитьТекущиеОтборы();	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВладельцуПриИзменении(Элемент)
	сфпУстановитьТекущиеОтборы();
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Процедура - обработчик команды формы "сфпЗагрузитьИсториюЗвонков".
//
Процедура сфпЗагрузитьИсториюЗвонков(Команда)
	Если НЕ сфпСофтФонПроСервер.сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Недостаточно прав для загрузки истории звонков!'"));
		Возврат;
	КонецЕсли;
	сфпСофтФонПроСервер.сфпПолучитьИсториюЗвонков();
	Элементы.Список.Обновить();
КонецПроцедуры // сфпЗагрузитьИсториюЗвонков()

//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ.  

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	сфпЗаполнитьСостоянияЗвонков();
	
	CRM_МодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если сфпСофтФонПроСервер.сфпИспользоватьОграничениеПоказаТелефонныхЗвонков() Тогда
		// Прежде, чем показать весь список, мы должны выяснить, телефонные звонки каких пользователей нам доступны
		ТекПользователь 					= сфпСофтФонПроСервер.сфпТекущийПользователь();
		МассивПрослушиваемыхПользователей 	= сфпСофтФонПроСервер.сфпПолучитьМассивПрослушиваемыхПользователей(ТекПользователь);
		ОтборПоПользователям = сфпСофтФонПроСервер.сфпПреобразоватьМассивЗвонящихВСписокЗначений(МассивПрослушиваемыхПользователей);
	Иначе
		ОтборПоПользователям = Новый СписокЗначений;
	КонецЕсли;
	Если Параметры.Свойство("РежимВыбора") Тогда
		Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	КонецЕсли;
	
	//+вог
	//+Рабочий стол
	скРабочийСтолСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ);
	//-Рабочий стол
	//-вог
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	Если Элементы.ОтборПоДлительности.СписокВыбора.НайтиПоЗначению(ОтборПоДлительности) = Неопределено Тогда
		НовыйЭлемент				= Элементы.ОтборПоДлительности.СписокВыбора.Добавить();
		НовыйЭлемент.Значение		= ОтборПоДлительности;
		НовыйЭлемент.Представление	= Строка(ОтборПоДлительности);
		Элементы.ОтборПоДлительности.СписокВыбора.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	КонецЕсли;	
	сфпУстановитьТекущиеОтборы();	
КонецПроцедуры // ПриОткрытии()

//+Рабочий стол
#Область Подключаемый_РабочийСтол
	
&НаКлиенте
Процедура Подключаемый_скТумблерРабочегоСтолаПриИзменении(Элемент)
	скРабочийСтолКлиент.ТумблерРабочегоСтолаПриИзменении(ЭтаФорма, Элемент);
КонецПроцедуры // Подключаемый_скТумблерРабочегоСтолаПриИзменении()

&НаКлиенте
Процедура Подключаемый_ОбработкаГипперссылкиДействийНажатие(Элемент)
	скРабочийСтолКлиент.ОбработкаГипперссылкиДействийНажатие(ЭтаФорма, Элемент);	
КонецПроцедуры // Подключаемый_ИндикаторНапоминанийНажатие()

&НаКлиенте
Процедура Подключаемый_ОбновитьТаблицуНапоминаний(МассивНапоминаний = Неопределено) Экспорт
	скРабочийСтолКлиент.ОбновитьТаблицуНапоминаний(ЭтаФорма, МассивНапоминаний);
КонецПроцедуры // Подключаемый_ОбновитьТаблицуНапоминаний()

&НаКлиенте
Процедура Подключаемый_НапоминанияСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьНапоминания(ЭтаФорма);	
КонецПроцедуры // Подключаемый_НапоминанияСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLНапоминанийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLНапоминанийПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLНапоминанийПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПрекратитьВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПрекратитьВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_КомандаНапоминанийПеренестиВсе(Команда)
	скРабочийСтолКлиент.КомандаНапоминанийПеренестиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаНапоминанийПрекратитьВсе()

&НаКлиенте
Процедура Подключаемый_ЗаметкиСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьЗаметки(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ЗаметкиСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLЗаметокПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLЗаметокПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLЗаметокПриНажатии()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиВсе(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиВсе(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиВсе()

&НаКлиенте
Процедура Подключаемый_КомандаЗаметкиДобавить(Команда)
	скРабочийСтолКлиент.КомандаЗаметкиДобавить(ЭтаФорма, Команда);
КонецПроцедуры // Подключаемый_КомандаЗаметкиДобавить()

&НаКлиенте
Процедура Подключаемый_ИсторияРаботыСкрытьНажатие(Элемент)
	скРабочийСтолКлиент.СкрытьИсториюРаботы(ЭтаФорма);	
КонецПроцедуры // Подключаемый_ИсторияРаботыСкрытьНажатие()

&НаКлиенте
Процедура Подключаемый_ПолеHTMLИсторииРаботыПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	скРабочийСтолКлиент.ПолеHTMLИсторииРаботыПриНажатии(ЭтаФорма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры // Подключаемый_ПолеHTMLИсторииРаботыПриНажатии()

#КонецОбласти
//-Рабочий стол
