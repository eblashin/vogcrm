
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ.

&НаСервере
Процедура ЗаполнитьНаОснованииУчастника(ДанныеУчастника)
	
	Объект.АбонентКонтакт = ДанныеУчастника.Контакт;
	Если ПустаяСтрока(ДанныеУчастника.КакСвязаться) Тогда
		
		Объект.АбонентКакСвязаться = "";
		Взаимодействия.ДозаполнитьПоляКонтактов(Объект.АбонентКонтакт,
			Объект.АбонентПредставление,
			Объект.АбонентКакСвязаться,
			Перечисления.ТипыКонтактнойИнформации.Телефон);
		
	Иначе
		
		Объект.АбонентКакСвязаться = ДанныеУчастника.КакСвязаться;
		
	КонецЕсли;
	
	Объект.АбонентПредставление = ДанныеУчастника.Представление;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Взаимодействия.УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(ЭтотОбъект);
	Иначе
		ИзменилисьКонтакты = Истина;
	КонецЕсли;
	Элементы.РассмотретьПосле.Доступность = НЕ Рассмотрено;
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
КонецПроцедуры

&НаСервере
// Процедура пытается найти контакт по ID CoMagic и заполнить в Событии.
//
// Параметры:
//	Нет.
//
Процедура сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic()
	Контакт = сфпСофтФонПроСервер.сфпНайтиКонтактПоIDИзCoMagic(сфпСтруктураВнешнихДанных.comagic_context.visitor_id);
	Если ЗначениеЗаполнено(Контакт) Тогда
		Объект.АбонентКонтакт = Контакт.Ссылка;
	КонецЕсли;
КонецПроцедуры // сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic()	

&НаСервере
// Процедура заполняет таблицу истории звонка.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьИсториюЗвонка()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Звонок", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрСведенийсфпИсторияЗвонков.ДатаНачала КАК ДатаНачала,
	               |	РегистрСведенийсфпИсторияЗвонков.ДатаОтвета,
	               |	РегистрСведенийсфпИсторияЗвонков.ВнутреннийНомер,
	               |	ВЫБОР
	               |		КОГДА РегистрСведенийсфпИсторияЗвонков.ДатаОтвета = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РегистрСведенийсфпИсторияЗвонков.ДатаНачала, ДЕНЬ), СЕКУНДА, РАЗНОСТЬДАТ(РегистрСведенийсфпИсторияЗвонков.ДатаНачала, РегистрСведенийсфпИсторияЗвонков.ДатаОкончания, СЕКУНДА))
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(РегистрСведенийсфпИсторияЗвонков.ДатаНачала, ДЕНЬ), СЕКУНДА, РАЗНОСТЬДАТ(РегистрСведенийсфпИсторияЗвонков.ДатаОтвета, РегистрСведенийсфпИсторияЗвонков.ДатаОкончания, СЕКУНДА))
	               |	КОНЕЦ КАК Длительность,
	               |	РегистрСведенийсфпИсторияЗвонков.ИдентификаторЗаписи,
	               |	РегистрСведенийсфпИсторияЗвонков.Ответственный,
	               |	РегистрСведенийсфпИсторияЗвонков.Входящий,
	               |	РегистрСведенийсфпИсторияЗвонков.ДатаОкончания,
	               |	РегистрСведенийсфпИсторияЗвонков.НомерТелефона,
	               |	РегистрСведенийсфпИсторияЗвонков.Звонок,
	               |	РегистрСведенийсфпИсторияЗвонков.ИдентификаторЗвонка
	               |ИЗ
	               |	РегистрСведений.сфпИсторияЗвонков КАК РегистрСведенийсфпИсторияЗвонков
	               |ГДЕ
	               |	РегистрСведенийсфпИсторияЗвонков.Звонок = &Звонок
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаНачала";
	сфпИсторияЗвонка.Очистить();				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = сфпИсторияЗвонка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;	
	КоличествоЗвонковИстории = сфпИсторияЗвонка.Количество();
	Если КоличествоЗвонковИстории = 2 Тогда
		ТекЗвонок = сфпИсторияЗвонка[КоличествоЗвонковИстории-2].Звонок;
		Если ТекЗвонок.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Пропущенный Тогда
			ТекЗвонок = сфпИсторияЗвонка[КоличествоЗвонковИстории-1].Звонок;
			Если ТекЗвонок.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Пропущенный 
			И НЕ Объект.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Пропущенный Тогда
				Объект.сфпСостояниеЗвонка = Перечисления.сфпСостоянияЗвонков.Пропущенный;
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;		
КонецПроцедуры // ЗаполнитьИсториюЗвонка()

&НаКлиенте
// Процедура заполняет значения реквизитов истории звонка.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьРеквизитовЗвонка()
	Элементы.ПредыдущаяЗапись.Доступность	= Ложь;
	Элементы.СледущаяЗапись.Доступность		= Ложь;
	Элементы.ОписаниеЗвонка.Гиперссылка		= Ложь;
	КоличествоСтрок = сфпИсторияЗвонка.Количество();
	Если КоличествоСтрок > 0 Тогда
		Если КоличествоСтрок > 1 Тогда
			Элементы.ОписаниеЗвонка.Гиперссылка = Истина;
		КонецЕсли;	
		Если сфпНомерСтроки > 0 Тогда
			Элементы.ПредыдущаяЗапись.Доступность = Истина;
		КонецЕсли;
		Если сфпНомерСтроки < КоличествоСтрок - 1 Тогда
			Элементы.СледущаяЗапись.Доступность	= Истина;
		КонецЕсли;
		Элементы.ОписаниеЗвонка.Заголовок = Нстр("ru='Разговор ('") + Строка(сфпНомерСтроки + 1) + Нстр("ru=' из '") + Строка(КоличествоСтрок) + ") ";
		Если ПустаяСтрока(сфпИсторияЗвонка[сфпНомерСтроки].ИдентификаторЗаписи) Тогда
			Если сфпСофтФонПроСервер.сфпИспользоватьCLON() Тогда
				Элементы.ПрослушатьЗаписьРазговора.Видимость = Истина;
			Иначе	
				Элементы.ПрослушатьЗаписьРазговора.Видимость = Ложь;
			КонецЕсли;	
		Иначе
			Элементы.ПрослушатьЗаписьРазговора.Видимость = Истина;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры // УстановитьДоступностьРеквизитовЗвонка()

&НаКлиенте
// Процедура заполняет значения реквизитов истории звонка.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьЗначенияРеквизитовЗвонка()
	КоличествоСтрок = сфпИсторияЗвонка.Количество();
	Если (КоличествоСтрок > 0) И (сфпНомерСтроки < КоличествоСтрок) Тогда
		сфпОтветственный		= сфпИсторияЗвонка[сфпНомерСтроки].Ответственный;
		сфпЛиния				= сфпИсторияЗвонка[сфпНомерСтроки].ВнутреннийНомер;
		сфпДатаОтвета			= сфпИсторияЗвонка[сфпНомерСтроки].ДатаОтвета;
		сфпДлительностьЗвонка	= сфпИсторияЗвонка[сфпНомерСтроки].Длительность;
		Если (КоличествоСтрок = 1) И (сфпДлительностьЗвонка = Дата('00010101')) Тогда
			сфпДлительностьЗвонка	= сфпДлительность;
		КонецЕсли;			
	КонецЕсли;	
КонецПроцедуры // ЗаполнитьЗначенияРеквизитовЗвонка()

&НаКлиенте
// Процедура - обработчик выбора разговора из меню.
//
// Параметры:
//	ВыбранныйЭлемент		- ЭлементСпискаЗначений	- Выбранный разговор.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораРазговора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда Возврат; КонецЕсли;
	сфпНомерСтроки	= ВыбранныйЭлемент.Значение;	
	ЗаполнитьЗначенияРеквизитовЗвонка();
	УстановитьДоступностьРеквизитовЗвонка();
КонецПроцедуры // ОбработкаВыбораРазговора()	

&НаСервере
// Процедура обновляет элементы дополнительных реквизитов.
//
// Параметры:
//	Нет.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

&НаКлиенте
// Процедура проверяет доступность создания контакта.
//
// Параметры:
//	Нет.
//
Процедура ПроверитьДоступностьСозданияКонтакта()
	Элементы.СоздатьКонтакт.Доступность = (НЕ Объект.Ссылка.Пустая())  И (НЕ ЗначениеЗаполнено(Объект.АбонентКонтакт)) 
		И (НЕ ПустаяСтрока(Объект.АбонентПредставление));
КонецПроцедуры // ПроверитьДоступностьСозданияКонтакта()

&НаСервере
// Процедура вычисляет владельца контакта и отображает его в форме документа
//
Процедура сфпЗаполнитьВладельцаКонтакта()
	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) 
	И ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Элементы.ГруппаВладелецКонтакта.Видимость = Истина;
		УстановитьПривилегированныйРежим(Истина);
		сфпВладелец = Объект.АбонентКонтакт.Владелец;
		УстановитьПривилегированныйРежим(Ложь);		
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура управляет видимостью кнопок "Создать Партнера" и "Добавить телефон"
//
Процедура сфпУправлениюВидимостьюКнопокДобавления()
	Если НЕ ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
		Элементы.СоздатьПартнера.Видимость = Истина;
	Иначе
		Элементы.СоздатьПартнера.Видимость = Ложь;
	КонецЕсли;		
	Если ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.СтроковыеКонтактыВзаимодействий") Тогда
		Элементы.ДобавитьТелефон.Видимость = Ложь;
		Возврат;
	КонецЕсли;		
	Элементы.ДобавитьТелефон.Видимость = сфпСофтФонПроСервер.сфпПроверитьНаличиеНомераТелефонаУАбонента(Объект.АбонентКонтакт, Объект.АбонентКакСвязаться);
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура добавляет номер телефона из поля "Как связаться" в объект из поля "Контакт"
//
//   Параметры:
//    СсылкаКИ 		- СправочникСсылка 	- Объект, к которому добавляется телефон
//	  НомерТелефона - Строка			- Добавляемый номер телефона
//
Процедура ДобавитьТелефонНаСервер(СсылкаКИ, НомерТелефона)
	ОбъектКИ = СсылкаКИ.ПолучитьОбъект();
	НомерТелефона = СокрЛП(НомерТелефона);
	Если ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.Партнеры") Тогда
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Если ОбъектКИ.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			НоваяКИ.Вид	= Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		ИначеЕсли Найти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			НоваяКИ.Вид	= Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица;
		Иначе	
			НоваяКИ.Вид	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;	
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;		
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны),СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода + ") " + СтруктураНомера.НомерТелефона;
		Иначе	
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;	
		НоваяКИ.НомерТелефона = Телефон;		
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;		
		ОбъектКИ.Записать();
	ИначеЕсли ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда		
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);		
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);	
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Если Найти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица");
		Иначе	
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица");
		КонецЕсли;			
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;		
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны),СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода + ") " + СтруктураНомера.НомерТелефона;
		Иначе	
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;	
		НоваяКИ.НомерТелефона = Телефон;		
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;				
		ОбъектКИ.Записать();		
	ИначеЕсли ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда				
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);		
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);	
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента");
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;		
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны),СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода + ") " + СтруктураНомера.НомерТелефона;
		Иначе	
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;	
		НоваяКИ.НомерТелефона = Телефон;
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;				
		ОбъектКИ.Записать();		
	ИначеЕсли ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.ФизическиеЛица") Тогда						
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);		
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);	
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Если Найти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
		Иначе	
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица");
		КонецЕсли;			
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;		
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны),СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода + ") " + СтруктураНомера.НомерТелефона;
		Иначе	
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;	
		НоваяКИ.НомерТелефона = Телефон;		
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;				
		ОбъектКИ.Записать();		
	ИначеЕсли ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.Пользователи") Тогда								
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);		
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Если Найти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПользователя");
		Иначе	
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_ТелефонПользователяРабочий");
		КонецЕсли;		
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;		
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны),СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода + ") " + СтруктураНомера.НомерТелефона;
		Иначе	
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;	
		НоваяКИ.НомерТелефона = Телефон;		
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;				
		ОбъектКИ.Записать();		
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура сфпРазрешеныИзмененияВДокументе()
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Если ТекПользователь <> Объект.Ответственный И Не Пользователи.РолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") Тогда
		ТолькоПросмотр = Истина;
		Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "АбонентПредставление".
//
Процедура ПредставлениеКонтактаПриИзменении(Элемент)
	ПроверитьДоступностьСозданияКонтакта();
	ИзменилисьКонтакты = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОписаниеЗвонка".
//
Процедура ОписаниеЗвонкаНажатие(Элемент)
	СписокРазговоров = Новый СписокЗначений;
	текНомерСтроки = 0;
	Для Каждого СтрокаЗвонка Из сфпИсторияЗвонка Цикл
		ОписаниеРазговора = Строка(текНомерСтроки + 1) + ". " + Строка(СтрокаЗвонка.Ответственный) 
		+ " (" + Строка(СтрокаЗвонка.ВнутреннийНомер) + "): " 
		+ Формат(СтрокаЗвонка.Длительность, "ДЛФ=T; ДП=0:00:00");
		Если ПустаяСтрока(СтрокаЗвонка.ИдентификаторЗаписи) Тогда
			Если сфпСофтФонПроСервер.сфпИспользоватьCLON() Тогда
				СписокРазговоров.Добавить(текНомерСтроки, ОписаниеРазговора, , БиблиотекаКартинок.ЖурналРегистрации);
			Иначе	
				СписокРазговоров.Добавить(текНомерСтроки, ОписаниеРазговора);
			КонецЕсли;	
		Иначе
			СписокРазговоров.Добавить(текНомерСтроки, ОписаниеРазговора, , БиблиотекаКартинок.ЖурналРегистрации);
		КонецЕсли;	
	КонецЦикла;	
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеВыбораИзМеню	= Новый ОписаниеОповещения("ОбработкаВыбораРазговора", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокРазговоров, Элемент);
КонецПроцедуры // ОписаниеЗвонкаНажатие()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Рассмотрено".
//
Процедура РассмотреноПриИзменении(Элемент)
	Элементы.РассмотретьПосле.Доступность = НЕ Рассмотрено;
КонецПроцедуры // РассмотреноПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "РассмотретьПосле".
//
Процедура РассмотретьПослеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВзаимодействияКлиент.ОбработатьВыборВПолеРассмотретьПосле(РассмотретьПосле, ВыбранноеЗначение, СтандартнаяОбработка,
		Модифицированность);
КонецПроцедуры // РассмотретьПослеОбработкаВыбора()

#КонецОбласти

// +CRM

#Область ОбработчикиИнтереса

&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, , ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Клиент) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		СтруктураОтбора.Вставить("Партнер", ЭтотОбъект.Клиент);
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
		ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
		ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);		
		
		ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор);
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
		ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
		ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);		
		
		ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов[0].ВведенНаОсновании Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Удалить(0);
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияКлиент.Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка, ЭтотОбъект.CRM_ТаблицаИнтересов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(,Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало = Ложь)
	
	МассивСтрок = ЭтотОбъект.CRM_ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",ВыбранноеЗначение));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Если ВНачало Тогда
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
		Иначе
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	ИначеЕсли ВНачало Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Сдвинуть(ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]),-ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкрытьПоказатьИнтересы(Команда)
	
	Элементы.СкрытьПоказатьИнтересы.Пометка = НЕ Элементы.СкрытьПоказатьИнтересы.Пометка;
	Элементы.ГруппаCRM_ТаблицаИнтересов.Видимость = Элементы.СкрытьПоказатьИнтересы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		Отказ = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.ВведенНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПослеУдаления(Элемент)
	

	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Основной(Команда)
	
	ТекущиеДанные = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ДобавитьИнтересНаСервере(ТекущиеДанные.Ссылка, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура АбонентКонтактПриИзменении(Элемент)
	сфпЗаполнитьВладельцаКонтакта();
	сфпУправлениюВидимостьюКнопокДобавления();
	
	ОбновитьБизнесРегион();

КонецПроцедуры

&НаКлиенте
Процедура АбонентКонтактОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ГруппаВладелецКонтакта.Видимость = Ложь;
	сфпВладелец = Неопределено;
	сфпУправлениюВидимостьюКнопокДобавления();
КонецПроцедуры

#КонецОбласти

// -CRM

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ.

&НаКлиенте
// Процедура - обработчик команды формы "ПредыдущаяЗапись".
//
Процедура ПредыдущаяЗапись(Команда)
	Если сфпНомерСтроки > 0 Тогда
		сфпНомерСтроки = сфпНомерСтроки - 1;
		ЗаполнитьЗначенияРеквизитовЗвонка();
		УстановитьДоступностьРеквизитовЗвонка();
	КонецЕсли;
КонецПроцедуры // ПредыдущаяЗапись()

&НаКлиенте
// Процедура - обработчик команды формы "ПрослушатьЗаписьРазговора".
//
Процедура ПрослушатьЗаписьРазговора(Команда)
	ТД = сфпИсторияЗвонка[сфпНомерСтроки];
	// Прежде, чем искать запись мы должны выяснить, есть ли права на прослушку у данного пользователя
	ТекПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь();
	МассивПрослушиваемыхПользователей = сфпСофтФонПроСервер.сфпПолучитьМассивПрослушиваемыхПользователей(ТекПользователь);
	Если МассивПрослушиваемыхПользователей.Количество() > 0 Тогда
		Если МассивПрослушиваемыхПользователей.Найти(Объект.Ответственный) = Неопределено Тогда
			ТекстПредупреждения = Нстр("ru = 'У данного пользователя нет прав на прослушивание разговора пользователя '") + """" + Строка(Объект.Ответственный) + """" + ".";
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		КонецЕсли;					
	Иначе				
		ТекстПредупреждения = Нстр("ru = 'У данного пользователя нет прав на прослушивание разговора пользователя '") + """" + Строка(Объект.Ответственный) + """" + ".";
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	Если ПустаяСтрока(ТД.ИдентификаторЗаписи) Тогда
		Если сфпСофтФонПроСервер.сфпИспользоватьCLON() Тогда
			Если ТД.Входящий Тогда
				ТелефонА	= ТД.НомерТелефона;
				ТелефонБ	= ТД.ВнутреннийНомер;
			Иначе
				ТелефонА	= ТД.ВнутреннийНомер;
				ТелефонБ	= ТД.НомерТелефона;						
			КонецЕсли;
			// Выполняем поиск записи разговора
			НайденнаяЗапись = сфпСофтФонПроКлиент.сфпНайтиЗаписьРазговораCLON(ТелефонА, ТелефонБ,  ТД.ДатаНачала, ТД.ДатаОкончания, ТД.Входящий); 
			Если НЕ (НайденнаяЗапись = Неопределено) Тогда
				// Запускаем запись на прослушивание
				сфпСофтФонПроКлиент.сфпПолучитьФайлРазговора(НайденнаяЗапись.file);
				// Записываем в регистр идентификатор записи
				сфпСофтФонПроСервер.сфпЗаписатьИдентификаторЗаписиВРегистр(ТД.Звонок, ТД.ИдентификаторЗвонка, НайденнаяЗапись.file);
				// Обновляем историю звонка
				ЗаполнитьИсториюЗвонка();
				ЗаполнитьЗначенияРеквизитовЗвонка();
				УстановитьДоступностьРеквизитовЗвонка();
			КонецЕсли;
		КонецЕсли;	
	Иначе
		сфпСофтФонПроКлиент.сфпПолучитьФайлРазговора(ТД.ИдентификаторЗаписи)
	КонецЕсли;	
КонецПроцедуры // ПрослушатьЗаписьРазговора()

&НаКлиенте
// Процедура - обработчик команды формы "СледущаяЗапись".
//
Процедура СледущаяЗапись(Команда)
	КоличествоСтрок = сфпИсторияЗвонка.Количество() - 1;
	Если сфпНомерСтроки < КоличествоСтрок Тогда
		сфпНомерСтроки = сфпНомерСтроки + 1;
		ЗаполнитьЗначенияРеквизитовЗвонка();
		УстановитьДоступностьРеквизитовЗвонка();
	КонецЕсли;
КонецПроцедуры // СледущаяЗапись()

&НаКлиенте
Процедура сфпЗагрузитьИсториюЗвонков(Команда)
	Если НЕ сфпСофтФонПроСервер.сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") Тогда
		Сообщить(НСтр("ru='Недостаточно прав для загрузки истории звонков!'"));
		Возврат;
	КонецЕсли;
	сфпСофтФонПроСервер.сфпПолучитьИсториюЗвонков();
КонецПроцедуры

// Процедура - обработчик команды формы "СоздатьПартнера".
//
&НаКлиенте
Процедура СоздатьПартнера(Команда)
	
	НовоеОповещение = Новый ОписаниеОповещения("СоздатьПартнераПослеВыбораТипаКонтакта", ЭтотОбъект);
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка"), Нстр("ru = 'Контактное лицо клиента'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"), Нстр("ru = 'Клиент'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"), Нстр("ru = 'Физическое лицо'"));	
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"), Нстр("ru = 'Пользователь'"));		
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка"), Нстр("ru = 'Потенциальный клиент'"));	
	ПоказатьВыборИзСписка(НовоеОповещение, СписокВыбора, Элементы.АбонентКонтакт, 1); 
	
КонецПроцедуры

&НаКлиенте
// Процедура, вызываемая после ответа пользователя по выбору создания типа контакта
// 
// Параметры:
//   Результат 					- ЭлементСпискаЗначений - Тип выбранного контакта для создания
//   ДополнительныеПараметры 	- Структура - Структура с передаваемыми доп. параметрами
//
Процедура СоздатьПартнераПослеВыбораТипаКонтакта(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(Объект.АбонентКакСвязаться);;
	Если ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Телефон", Телефон);
		СтруктураПараметры.Вставить("Наименование", Объект.АбонентПредставление);
		СтруктураПараметры.Вставить("Звонок", Объект.Ссылка);
		бИспользоватьПомощник = (CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьПомощникВводаНовогоКлиента") = Истина);		
		Если бИспользоватьПомощник Тогда
			
			CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, СтруктураПараметры);
			
		Иначе
			ФормаПартнера = ПолучитьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураПараметры), ЭтотОбъект);
			Если СтруктураПараметры.Свойство("Наименование") Тогда
				Если Не ЗначениеЗаполнено(ФормаПартнера.Объект.Наименование) Тогда
					ФормаПартнера.Объект.Наименование = СтруктураПараметры.Наименование;
				КонецЕсли;
			КонецЕсли;
			ФормаПартнера.Открыть();
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ФормаКонтакта = ПолучитьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка),ЭтотОбъект);
		ФормаКонтакта.Открыть();
	ИначеЕсли ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.Пользователи") Тогда	
		ФормаКонтакта = ПолучитьФорму("Справочник.Пользователи.ФормаОбъекта",  Новый Структура("Основание", Объект.Ссылка), ЭтотОбъект);
		ФормаКонтакта.Открыть();
	ИначеЕсли ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда			
		НовоеОповещение = Новый ОписаниеОповещения("ВыборПартнераДляСозданияКонтактногоЛица", ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор",Ложь);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,НовоеОповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ИначеЕсли ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда					
		ФормаКонтакта = ПолучитьФорму("Справочник.CRM_ПотенциальныеКлиенты.ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка),ЭтотОбъект);
		ФормаКонтакта.Открыть();		
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
// Процедура, вызываемая после ответа пользователя по выбору партнёра для создания КЛ
// 
// Параметры:
//   Результат 					- СправочникСсылка - Выбранный партнёр
//   ДополнительныеПараметры 	- Структура - Структура с передаваемыми доп. параметрами
//
Процедура ВыборПартнераДляСозданияКонтактногоЛица(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	Если ЗначениеЗаполнено(Результат) Тогда
		ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", Новый Структура("Основание, Владелец", Объект.Ссылка, Результат), ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ДобавитьТелефон".
//
Процедура ДобавитьТелефон(Команда)
	ДобавитьТелефонНаСервер(Объект.АбонентКонтакт, Объект.АбонентКакСвязаться);
	Элементы.ДобавитьТелефон.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьКонтактВыполнить".
//
Процедура СоздатьКонтактВыполнить()
	ВзаимодействияКлиент.СоздатьКонтакт(Объект.АбонентПредставление, Объект.АбонентКакСвязаться, Объект.Ссылка,
		СписокИнтерактивноСоздаваемыхКонтактов);
КонецПроцедуры // СоздатьКонтактВыполнить()

&НаКлиенте
// Процедура - обработчик команды формы "СвязанныеВзаимодействияВыполнить".
//
Процедура СвязанныеВзаимодействияВыполнить()
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Предмет", Объект.Предмет);
	ОткрытьФорму("ЖурналДокументов.Взаимодействия.ФормаСписка", ПараметрыОтбора, ЭтотОбъект, , Окно);
КонецПроцедуры // СвязанныеВзаимодействияВыполнить()

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ.

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере"
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Автор			= сфпСофтФонПроСервер.сфпТекущийПользователь();
		Объект.Ответственный	= сфпСофтФонПроСервер.сфпТекущийПользователь();
		Объект.Дата				= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
		Объект.Важность			= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		Взаимодействия.УстановитьПредметПоДаннымЗаполнения(Параметры, Предмет);
	КонецЕсли;
	Если Параметры.Свойство("СпозиционироватьсяНаРеквизите") И ЗначениеЗаполнено(Параметры.СпозиционироватьсяНаРеквизите) Тогда
		СпозиционироватьсяНаРеквизите = Параметры.СпозиционироватьсяНаРеквизите;
	КонецЕсли;	
	Взаимодействия.ЗаполнитьСписокВыбораДляРассмотретьПосле(Элементы.РассмотретьПосле.СписокВыбора);
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Входящий = НЕ (Параметры.Свойство("Основание")
		И НЕ (Параметры.Основание = Ложь ИЛИ Параметры.Основание = Неопределено));
	КонецЕсли;
	Если Параметры.Свойство("АбонентКонтакт") И ЗначениеЗаполнено(Параметры.АбонентКонтакт) Тогда
		Объект.АбонентКонтакт = Параметры.АбонентКонтакт;
		Объект.АбонентПредставление = Строка(Объект.АбонентКонтакт);
		Модифицированность = Истина;				
	КонецЕсли;		
	// Определим типы контактов, которые можно создать.
	СписокИнтерактивноСоздаваемыхКонтактов = Взаимодействия.СоздатьСписокЗначенийИнтерактивноСоздаваемыхКонтактов();
	// +CRM Кнопку в CRM не используем
	//Элементы.СоздатьКонтакт.Видимость      = СписокИнтерактивноСоздаваемыхКонтактов.Количество() > 0;
	// -CRM
	// Подготовить оповещения взаимодействий.
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект,Параметры);
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	Если Параметры.Свойство("ДанныеУчастника") И Объект.АбонентКонтакт <> Параметры.ДанныеУчастника.Контакт Тогда
		ЗаполнитьНаОснованииУчастника(Параметры.ДанныеУчастника);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	ПриСозданииИПриЧтенииНаСервере();
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ТелефонныйЗвонок");
	// +CRM
	CRM_ОбщегоНазначенияСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, Объект, "ГруппаИнтерес", ТипЗнч(Объект.Ссылка));
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, Истина, , ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);
	
	CRM_МодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// -CRM
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, Объект.Ссылка, Объект.АбонентКонтакт);
			КаналПервичногоИнтереса = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
		КонецЕсли;
	КонецЕсли;
	Элементы.ГруппаПервичныйИнтерес.Видимость = ЗначениеЗаполнено(КаналПервичногоИнтереса) ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	сфпДлительность = Дата('00010101') + Объект.сфпДлительностьЗвонка;
	Заголовок = НСтр("ru='Звонок'");
	Если Объект.Входящий Тогда
		Если Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный") Тогда
			Заголовок = Заголовок + НСтр("ru=' входящий '") + "(" + НСтр("ru='пропущенный'") + ")";
			Элементы.ДекорацияСостояниеЗвонка.Заголовок = Нстр("ru = 'Состояние: пропущенный'");
			Элементы.ДекорацияСостояниеЗвонка.ЦветТекста = WebЦвета.Красный;
		Иначе	
			Заголовок = Заголовок + НСтр("ru=' входящий '") + "(" + НСтр("ru='отвеченный'") + ")";
			Элементы.ДекорацияСостояниеЗвонка.Заголовок = Нстр("ru = 'Состояние: отвеченный'");
			Элементы.ДекорацияСостояниеЗвонка.ЦветТекста = WebЦвета.Зеленый;			
		КонецЕсли;	
	Иначе
		Если Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный") Тогда
			Заголовок = Заголовок + НСтр("ru=' исходящий '") + "(" + НСтр("ru='не дозвонились'") + ")";
			Элементы.ДекорацияСостояниеЗвонка.Заголовок = Нстр("ru = 'Состояние: не дозвонились'");
			Элементы.ДекорацияСостояниеЗвонка.ЦветТекста = WebЦвета.Красный;
		Иначе	
			Заголовок = Заголовок + НСтр("ru=' исходящий '") + "(" + НСтр("ru='отвеченный'") + ")";
			Элементы.ДекорацияСостояниеЗвонка.Заголовок = Нстр("ru = 'Состояние: отвеченный'");
			Элементы.ДекорацияСостояниеЗвонка.ЦветТекста = WebЦвета.Зеленый;						
		КонецЕсли;	
	КонецЕсли;
	Заголовок = Заголовок + ", " + Объект.АбонентПредставление + ", " + Формат(Объект.Дата, "ДЛФ=D") + "/" 
		+ Формат(Объект.Дата, "ДЛФ=T; ДП=0:00:00") + "/" + Формат(Дата('00010101') + Объект.сфпДлительностьЗвонка, "ДЛФ=T; ДП=0:00:00");
	сфпНомерСтроки	= 0;	
	ЗаполнитьИсториюЗвонка();
	ЗаполнитьЗначенияРеквизитовЗвонка();
	УстановитьДоступностьРеквизитовЗвонка();
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ПроверитьДоступностьСозданияКонтакта();
	// +CRM
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваКоманднойПанелиИнтересовВФормеДокумента(ЭтотОбъект);
	Попытка
		Если ЗначениеЗаполнено(СпозиционироватьсяНаРеквизите) Тогда
			ТекущийЭлемент = Элементы[СпозиционироватьсяНаРеквизите];
		КонецЕсли;
	Исключение
	КонецПопытки;	
	сфпЗаполнитьВладельцаКонтакта();
	сфпУправлениюВидимостьюКнопокДобавления();
	сфпРазрешеныИзмененияВДокументе();
	// -CRM
	
	ОбновитьБизнесРегион();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если (ИмяСобытия = "СофтФон_КонецРазговора") И Параметр.Свойство("Звонок") Тогда
		Если (Параметр.Звонок = Объект.Ссылка) Тогда
			Объект.сфпДлительностьЗвонка = сфпСофтФонПроСервер.сфпТекущаяДата() - Объект.Дата;
			сфпДлительность		= Дата('00010101') + Объект.сфпДлительностьЗвонка;
			Объект.Описание		= сфпСофтФонПроСервер.сфпЗаполнитьОписаниеТелефонногоЗвонка(Объект.сфпДлительностьЗвонка);
			Если Параметр.Свойство("НовыйОтветственный") Тогда
				Объект.Ответственный = Параметр.НовыйОтветственный;
			КонецЕсли;
			Модифицированность	= Истина;
			ЗаполнитьИсториюЗвонка();
			ЗаполнитьЗначенияРеквизитовЗвонка();
			УстановитьДоступностьРеквизитовЗвонка();
		КонецЕсли;
		Возврат;
	ИначеЕсли (ИмяСобытия = "Софтфон_CoMagic") И Параметр.Свойство("Звонок") Тогда
		Если Параметр.Звонок = Объект.Ссылка Тогда
			Если (Объект.сфпДлительностьЗвонка = 0) И (сфпСтруктураВнешнихДанных = Неопределено) Тогда
				// Заполняем документ данными из CoMagic
				сфпСтруктураВнешнихДанных	= Параметр.СтруктураCoMagic;
				Объект.сфпCoMagicID			= сфпСтруктураВнешнихДанных.comagic_context.visitor_id;
				Объект.Комментарий = Объект.Комментарий + ?(ПустаяСтрока(Объект.Комментарий), "", Символы.ПС) 
					+ НСтр("ru='Кампания: '") + сфпСтруктураВнешнихДанных.comagic_context.campaign + Символы.ПС 
					+ НСтр("ru='Сайт: '") + сфпСтруктураВнешнихДанных.comagic_context.site + Символы.ПС
					+ НСтр("ru='Ключевые слова: '") + сфпСтруктураВнешнихДанных.comagic_context.search_query; 
				Если НЕ ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
					сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic();
				КонецЕсли;			
				Модифицированность	= Истина;
			КонецЕсли;	
		КонецЕсли;	
		Возврат;
	ИначеЕсли (ИмяСобытия = "ЗаполнитьКонтактВТелефонномЗвонке") И Параметр.Свойство("Звонок") Тогда
		Если Параметр.Звонок = Объект.Ссылка Тогда
			Объект.АбонентКонтакт 		= Параметр.Контакт;
			Объект.АбонентПредставление = Строка(Объект.АбонентКонтакт);
			Элементы.СоздатьПартнера.Видимость = Ложь;
			ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ТелефонныйЗвонок");
			Модифицированность	= Истина;			
		КонецЕсли;			
		Возврат;
	КонецЕсли;	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	ВзаимодействияКлиент.ОтработатьОповещение(ЭтотОбъект,ИмяСобытия, Параметр, Источник);
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ТелефонныйЗвонок");
	ПроверитьДоступностьСозданияКонтакта();
	
	ОбновитьБизнесРегион();
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
// Процедура - обработчик события формы "ПриЧтенииНаСервере".
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ПриСозданииИПриЧтенииНаСервере();
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
// Процедура - обработчик события формы "ПередЗаписьюНаСервере".
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, РежимЗаписи, РежимПроведения)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	Взаимодействия.ПередЗаписьюВзаимодействияИзФормы(ЭтотОбъект, ТекущийОбъект, ИзменилисьКонтакты);
	CRM_ТаблицаИнтересовЗнач = РеквизитФормыВЗначение("CRM_ТаблицаИнтересов",Тип("ТаблицаЗначений"));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",CRM_ТаблицаИнтересовЗнач);	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
// Процедура - обработчик события формы "ПриЗаписиНаСервере".
//
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);
КонецПроцедуры // ПриЗаписиНаСервере()

&НаСервере
// Процедура - обработчик события формы "ПослеЗаписиНаСервере".
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПослеЗаписи".
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "ТелефонныйЗвонок");
	ПроверитьДоступностьСозданияКонтакта();
	Если НЕ ПустаяСтрока(Объект.сфпCoMagicID) Тогда
		Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
			Если ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.АбонентКонтакт, Объект.сфпCoMagicID);
				Объект.сфпCoMagicID = "";
			ИначеЕсли ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
				сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.АбонентКонтакт, Объект.сфпCoMagicID);
				Объект.сфпCoMagicID = "";
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	Оповестить("ОбновленыДанныеТелефонногоЗвонка", Объект.Ссылка);	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
// Процедура - обработчик события формы "ОбработкаПроверкиЗаполненияНаСервере".
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

&НаКлиенте
Процедура ОбновитьБизнесРегион()
	
	//сфпБизнесРегион_GMT = "";
	//
	//Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
	//	ДанныеКонтакта = сфпСофтФонПроСервер.сфпБизнесРегионКонтакта(Объект.АбонентКонтакт);
	//	Если ЗначениеЗаполнено(ДанныеКонтакта.БизнесРегион) Тогда
	//		сфпБизнесРегион_GMT = "" + ДанныеКонтакта.БизнесРегион + " (GMT " + ?(ДанныеКонтакта.ВремяПоГринвичу > 0, "+ ", "") + Формат(ДанныеКонтакта.ВремяПоГринвичу, "ЧЦ=2; ЧДЦ=; ЧН=0; ЧО=2") + ")";
	//	КонецЕсли;	
	//КонецЕсли;

	//Элементы.сфпГруппаБизнесРегион_GMT.Видимость = НЕ ПустаяСтрока(сфпБизнесРегион_GMT);
	
КонецПроцедуры

#КонецОбласти
