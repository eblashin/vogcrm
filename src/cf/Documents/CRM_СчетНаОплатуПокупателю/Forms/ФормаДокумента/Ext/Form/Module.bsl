
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ДобавитьУдалитьКомандуСозданияБизнесПроцесса()
	
	Если ИспользоватьБизнесПроцессы И ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(Объект.Проект.CRM_КартаМаршрута) Тогда
		CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект, Элементы.ГруппаКнопокСоздать, Объект.Проект.CRM_КартаМаршрута, Ложь);
	Иначе
		CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект,,, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьДубликатБизнесПроцесса(Предмет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|ГДЕ
	|	НЕ CRM_БизнесПроцесс.ПометкаУдаления
	|	И НЕ CRM_БизнесПроцесс.Завершен
	|	И CRM_БизнесПроцесс.Предмет = &Предмет");
	Запрос.УстановитьПараметр("Предмет", Предмет);	
	
	Возврат НЕ Запрос.Выполнить().Пустой();	
	
КонецФункции

&НаСервере
Функция ВернутьЗаголовокКоманды(ИмяКоманды)
	
	Возврат Команды[ИмяКоманды].Заголовок;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСуммыДокумента()
	
	ЗапасыИтог					= Объект.Запасы.Итог("Всего");
	Объект.СуммаОстатокОтгрузка	= ЗапасыИтог - Объект.Отгрузка.Итог("Всего");
	Объект.СуммаОстатокОплата	= ЗапасыИтог - Объект.Оплата.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкаПриУдаленииСтроки(КлючСтроки, ДатаОтгрузки)
	
	Попытка
		ЗапасыСтрока = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки))[0];
	Исключение
		ЗапасыСтрока = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки+1))[0];
	КонецПопытки;
	
	ОтгрузкаСтрока = Объект.Отгрузка.НайтиСтроки(Новый Структура("ЗапасыКлючСтроки, ДатаОтгрузки", КлючСтроки, ДатаОтгрузки))[0];
	
	ЗапасыСтрока.Отгружено = ЗапасыСтрока.Отгружено - ОтгрузкаСтрока.Количество;
	ЗапасыСтрока.ОсталосьОтгрузить = ЗапасыСтрока.ОсталосьОтгрузить + ОтгрузкаСтрока.Количество;
	
	Объект.Отгрузка.Удалить(ОтгрузкаСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВОтгрузку(КлючСтроки, КоличествоКОтгрузке)
	
	ЗапасыСтрока = Объект.Запасы.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки))[0];
	
	МассивСтрокОтгрузки = Объект.Отгрузка.НайтиСтроки(Новый Структура("ЗапасыКлючСтроки, ДатаОтгрузки", КлючСтроки, ТекущаяДата()));
	
	ОтгружаемоеКоличество = Мин(ЗапасыСтрока.ОсталосьОтгрузить, КоличествоКОтгрузке);
	
	Если МассивСтрокОтгрузки.Количество() > 0 Тогда
		
		НоваяСтрока = МассивСтрокОтгрузки[0];
		
		НоваяСтрока.Количество  = НоваяСтрока.Количество + ОтгружаемоеКоличество; 
		
	Иначе
		
		НоваяСтрока = Объект.Отгрузка.Добавить();
		НоваяСтрока.ДатаОтгрузки 		 = ТекущаяДата();
		НоваяСтрока.Номенклатура		 = ЗапасыСтрока.Номенклатура;
		НоваяСтрока.Характеристика		 = ЗапасыСтрока.Характеристика;
		НоваяСтрока.Количество			 = ОтгружаемоеКоличество;
		НоваяСтрока.ЕдиницаИзмерения	 = ЗапасыСтрока.ЕдиницаИзмерения;
		НоваяСтрока.Цена				 = ЗапасыСтрока.Цена;
		НоваяСтрока.ПроцентРучнойСкидки = ЗапасыСтрока.ПроцентРучнойСкидки;
		НоваяСтрока.СтавкаНДС			 = ЗапасыСтрока.СтавкаНДС;
		НоваяСтрока.ВалютаДокумента 	 = Объект.Валюта;
		НоваяСтрока.ЗапасыКлючСтроки 	 = ЗапасыСтрока.КлючСтроки;
		
		КонецПериода = ?(ЗначениеЗаполнено(НоваяСтрока.ДатаОтгрузки), НоваяСтрока.ДатаОтгрузки, Объект.Дата);
		
		СтруктураДанные = ПолучитьДанныеДатаОплатыПриИзменении(КонецПериода, НоваяСтрока.ВалютаДокумента);
		
		НоваяСтрока.Курс		= ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
		НоваяСтрока.Кратность	=  ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
		
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока);
	
	ЗапасыСтрока.ОсталосьОтгрузить = ?(ЗапасыСтрока.ОсталосьОтгрузить < КоличествоКОтгрузке, 0, ЗапасыСтрока.ОсталосьОтгрузить - КоличествоКОтгрузке);
	ЗапасыСтрока.Отгружено = ЗапасыСтрока.Отгружено + ОтгружаемоеКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоОтгруженногоОстатка()
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.Количество < СтрокаТабличнойЧасти.Отгружено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Отгружено больше, чем указано в счете.'"));
	Иначе
		СтрокаТабличнойЧасти.ОсталосьОтгрузить = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.Отгружено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ОбработкаЗаполнения(Объект.ДокументОснование, );
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	Если CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(Документ.Организация) Тогда
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
	Иначе
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьПоДокументу()

// Процедура проверяет права на редактирование цен.
&НаСервере
Процедура УстановитьВозможностьРедактированияЦен()
	
	ПраваНаРедактированиеЦен = Пользователи.РолиДоступны("CRM_РедактированиеЦенИСкидокВДокументах, ПолныеПрава");
	Элементы.ЗапасыЦена.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	Элементы.ЗапасыПроцентСкидкиНаценки.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	Элементы.ЗапасыСумма.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	Элементы.ЗапасыЦена.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	Элементы.ЗапасыВсего.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	Элементы.ЗапасыСуммаНДС.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;

КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = CRM_ОбщегоНазначенияСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРасчетов));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера для процедуры ОрганизацияПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("БанковскийСчет", Объект.Организация.БанковскийСчетПоУмолчанию);
	СтруктураДанные.Вставить("БанковскийСчетВалютаДенежныхСредств", Объект.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств);
	
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеПартнерПриИзменении(Дата, ВалютаДокумента, Партнер, Организация, Проект)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ОсновноеКонтактноеЛицо",		Партнер.CRM_ОсновноеКонтактноеЛицо);
	мДоговор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(Партнер, Организация);
	СтруктураДанные.Вставить("Договор",						мДоговор);
	СтруктураДанные.Вставить("ВалютаРасчетов",				мДоговор.ВалютаРасчетов);
	СтруктураДанные.Вставить("ВалютаРасчетовКурсКратность",	
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", мДоговор.ВалютаРасчетов)));
	СтруктураДанные.Вставить("ВидСкидкиНаценки",			мДоговор.ВидСкидкиНаценки);
	СтруктураДанные.Вставить("ВидЦен",						мДоговор.ВидЦен);
	СтруктураДанные.Вставить("РасчетыВУсловныхЕдиницах",	мДоговор.РасчетыВУсловныхЕдиницах);
	СтруктураДанные.Вставить("ВидСкидкиНаценки",			мДоговор.ВидСкидкиНаценки);
	СтруктураДанные.Вставить("ЦенаВключаетНДС",			?(ЗначениеЗаполнено(мДоговор.ВидЦен), мДоговор.ВидЦен.ЦенаВключаетНДС, Неопределено));
	
	Если	Не ЗначениеЗаполнено(СтруктураДанные.ОсновноеКонтактноеЛицо)
		И	ЗначениеЗаполнено(Проект)
		И	ЗначениеЗаполнено(Проект.CRM_Партнер)
		И	Проект.CRM_Партнер = Партнер
		И	ЗначениеЗаполнено(Проект.CRM_КонтактноеЛицоПартнера) Тогда
		//
		СтруктураДанные.ОсновноеКонтактноеЛицо = Проект.CRM_КонтактноеЛицоПартнера;
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПартнерПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"ВидСкидкиНаценки",
		Договор.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		Договор.ВидЦен
	);

	СтруктураДанные.Вставить(
		"ЦенаВключаетНДС",
		?(ЗначениеЗаполнено(Договор.ВидЦен), Договор.ВидЦен.ЦенаВключаетНДС, Неопределено)
	);
		Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(Объект.Организация) Тогда
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.ЦенаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
	Иначе
		
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
		
		Если Объект.Организация.СтавкаНДСПоУмолчанию.НеОблагается Тогда
		    СтавкаНДСПоУмолчанию = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	СтруктураДанные.Вставить("Содержание", CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
																?(ЗначениеЗаполнено(СтруктураДанные.Номенклатура.НаименованиеПолное), 
																СтруктураДанные.Номенклатура.НаименованиеПолное, СтруктураДанные.Номенклатура.Наименование), 
																СтруктураДанные.Характеристика, СтруктураДанные.Номенклатура.Артикул));
	
	Если НЕ CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(СтруктураДанные.Организация) Тогда
		Если СтруктураДанные.Организация.СтавкаНДСПоУмолчанию.НеОблагается Тогда
			СтруктураДанные.Вставить("СтавкаНДС", CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;	
																
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	КонецЕсли;
			
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = CRM_ОбщегоНазначенияСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентРучнойСкидки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Содержание", CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
																?(ЗначениеЗаполнено(СтруктураДанные.Номенклатура.НаименованиеПолное), 
																СтруктураДанные.Номенклатура.НаименованиеПолное, СтруктураДанные.Номенклатура.Наименование), 
																СтруктураДанные.Характеристика, СтруктураДанные.Номенклатура.Артикул));
	
	Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Цена = CRM_ОбщегоНазначенияСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
	СтруктураДанные.Вставить("Цена", Цена);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияНачалоВыбораИзСписка.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(Номенклатура)
	
	СписокЕдиницаИзмерения = Новый СписокЗначений();
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("СписокЕдиницаИзмерения", СписокЕдиницаИзмерения);
	
	СписокЕдиницаИзмерения.Добавить(Номенклатура.ЕдиницаИзмерения, Номенклатура.ЕдиницаИзмерения.Наименование + " (ед. хранения)");
	
	МассивОтбора = Новый Массив();
	МассивОтбора.Добавить(Номенклатура);
	МассивОтбора.Добавить(Номенклатура.НоменклатурнаяГруппа);
	
	Родитель = Номенклатура.НоменклатурнаяГруппа.Родитель;
	
	Пока Истина Цикл
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			Прервать;
		Иначе
			МассивОтбора.Добавить(Родитель);
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец В(&Номенклатура)";	
	
	Запрос.УстановитьПараметр("Номенклатура", МассивОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЕдиницаИзмерения.Добавить(Выборка.ЕдиницаИзмерения);
	КонецЦикла;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ЗначениеЗаполнено(ТекущаяЕдиницаИзмерения) И ТипЗнч(ТекущаяЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) И ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", 1);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.ЦенаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
									  
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	Если СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 100 Тогда
		СтрокаТабличнойЧасти.Сумма = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентРучнойСкидки <> 0
		    И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентРучнойСкидки / 100);
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Процедура пересчитывает курс и кратность валюты расчетов при изменении
// даты документа.
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(КурсНовый) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		
		ТекстСообщения = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыРасчетовЗавершение", ЭтотОбъект, Новый Структура("КурсНовый, КратностьНовый", КурсНовый, КратностьНовый));
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, Режим, 0);
	    Возврат;
	КонецЕсли;	
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
	Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()	

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетовЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = ДополнительныеПараметры.КурсНовый;
		Объект.Кратность = ДополнительныеПараметры.КратностьНовый;
							
	КонецЕсли;		
		
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
	Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()	

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь, ОписаниеОповещенияОЗавершении)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("ВидЦен",				 Объект.ВидЦен);
	СтруктураПараметров.Вставить("Валюта",				 Объект.Валюта);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",		 Объект.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("Договор",				 Объект.Договор);
	СтруктураПараметров.Вставить("Курс",				 Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			 Объект.Кратность);
	СтруктураПараметров.Вставить("Организация",			 Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		 Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	 Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		 ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	
	СтруктураПараметров.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	
	// 2. Открываем форму "Цены и Валюта".
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, ОписаниеОповещенияОЗавершении", ВалютаРасчетовПередИзменением, ОписаниеОповещенияОЗавершении));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(СтруктураЦеныИВалюта, ДополнительныеПараметры) Экспорт
	
	// 3. Перезаполняем табличную часть "Затраты" если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		Если Объект.Валюта <> СтруктураЦеныИВалюта.Валюта Тогда
			Объект.БанковскийСчет = Неопределено;
		КонецЕсли;
		
		Объект.ВидЦен = СтруктураЦеныИВалюта.ВидЦен;
		Объект.ВидСкидкиНаценки = СтруктураЦеныИВалюта.ВидСкидки;
		Объект.Валюта = СтруктураЦеныИВалюта.Валюта;
		Объект.Курс = СтруктураЦеныИВалюта.КурсРасчетов;
		Объект.Кратность = СтруктураЦеныИВалюта.КратностьРасчетов;
		Объект.ЦенаВключаетНДС = СтруктураЦеныИВалюта.ЦенаВключаетНДС;
		
		// Пересчитываем цены по виду цен.
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены Тогда
			//CRM_ОбщегоНазначенияСервер.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтаФорма, "Запасы", Истина);
			//CRM_ОбщегоНазначенияСервер.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтаФорма, "Отгрузка", Истина);
			ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенСервер("Запасы", Истина);
			ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенСервер("Отгрузка", Истина);
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
			И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда
			//CRM_ОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ВалютаРасчетовПередИзменением, "Запасы");
			//CRM_ОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтаФорма, ВалютаРасчетовПередИзменением, "Отгрузка");
			ПересчитатьЦеныТабличнойЧастиПоВалютеСервер(ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Запасы");
			ПересчитатьЦеныТабличнойЧастиПоВалютеСервер(ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Отгрузка");
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если НЕ СтруктураЦеныИВалюта.ПерезаполнитьЦены
			И НЕ СтруктураЦеныИВалюта.ЦенаВключаетНДС = СтруктураЦеныИВалюта.ПредЦенаВключаетНДС Тогда
			//CRM_ОбщегоНазначенияСервер.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Запасы");
			//CRM_ОбщегоНазначенияСервер.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтаФорма, "Отгрузка");
			ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДССервер("Запасы");
			ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДССервер("Отгрузка");
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
	Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Неопределено);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаСервере
Процедура ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДССервер(ИмяТабличнойЧасти)
	CRM_ОбщегоНазначенияСервер.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, ИмяТабличнойЧасти);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалютеСервер(ВалютаРасчетовПередИзменением, ИмяТабличнойЧасти)
	CRM_ОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ВалютаРасчетовПередИзменением, ИмяТабличнойЧасти);
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенСервер(ИмяТабличнойЧасти, ПересчитатьСкидки)
	CRM_ОбщегоНазначенияСервер.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, ИмяТабличнойЧасти, ПересчитатьСкидки);
КонецПроцедуры

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.Валюта) Тогда
			ТекстНадписи = НСтр("ru = 'Валюта: %Валюта%, курс: %Курс%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.Валюта)));
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", ?((НЕ ЗначениеЗаполнено(СтруктураНадписи.ВалютаРасчетов)) ИЛИ СтруктураНадписи.Валюта = СтруктураНадписи.ВалютаРасчетов, СокрЛП(Строка(СтруктураНадписи.Курс)), СокрЛП(Строка(СтруктураНадписи.КурсНациональнаяВалюта))));
		Иначе
			ТекстНадписи = НСтр("ru = 'Валюта: <нет>'");
		КонецЕсли;
	КонецЕсли;
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = 'Вид цен: %ВидЦен%'");
		Иначе	
			ТекстНадписи = ТекстНадписи + НСтр("ru = '; Вид цен: %ВидЦен%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	КонецЕсли;
	
	// Вид скидки наценки.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидСкидки) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = 'Вид скидки: %ВидСкидкиНаценки%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = '; Вид скидки: %ВидСкидкиНаценки%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидСкидкиНаценки%", СокрЛП(Строка(СтруктураНадписи.ВидСкидки)));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.ЦенаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'Сумма включает НДС'");
		Иначе		
			ТекстНадписи = НСтр("ru = 'Сумма не включает НДС'");
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаОплатыПриИзменении(ДатаОплаты, ПараметрВалюта)
	
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаОплаты, Новый Структура("Валюта", ПараметрВалюта));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Функция КаналМаркетинговыеМероприятие()
	
	Возврат КаналПервичногоИнтереса.ТипЗначения.СодержитТип(Тип("СправочникСсылка.МаркетинговыеМероприятия"));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПервичныйИнтерес(Основание)

	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		
		Если ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			
			Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Основание.Дата, Основание);
			КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Не ЗначениеЗаполнено(КаналПервичногоИнтереса);
			
		КонецЕсли; 
		
	Иначе
		
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТипОснования()
	
	УчетнаяЗапись		= CRM_УправлениеЭлектроннойПочтой.ПолучитьУчетнуюЗаписьПоПисьму(Объект.ДокументОснование);
	ФормаПисьма = ПолучитьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",Новый Структура("Ключ",Объект.ДокументОснование));
	
	Если НЕ (ФормаПисьма = Неопределено) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьТипОснованияЗавершение", ЭтотОбъект, ФормаПисьма);
		CRM_УправлениеЭлектроннойПочтойКлиент.ВопросПеренестиПисьмоВПапкуОбработанные(УчетнаяЗапись, ФормаПисьма.Папка, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТипОснованияЗавершение(ПапкаОтработанные, ФормаПисьма) Экспорт
	
	Если ПапкаОтработанные = ПредопределенноеЗначение("Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка") Тогда
		Возврат;
	КонецЕсли;		
	CRM_УправлениеЭлектроннойПочтой.ПеренестиПисьмоВПапку(Объект.ДокументОснование, ПапкаОтработанные);
	Оповестить("CRM_УстановленФлагОбработано",, ФормаПисьма);
	Оповестить("ОбновитьАРМ");
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиПрисоединенныеФайлы(СчетСсылка)
	
	Если ЭтоНовый Тогда
		СписокОтбора = Новый СписокЗначений;
		Для Каждого ТекущиеДанные Из СписокФайловПисьма Цикл
			Если ТекущиеДанные.Пометка Тогда
				СписокОтбора.Добавить(ТекущиеДанные.Значение);
			КонецЕсли;
		КонецЦикла;
		Если СписокОтбора.Количество() > 0 Тогда
			CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(Объект.ДокументОснование, СчетСсылка, СписокОтбора);
		КонецЕсли;
	КонецЕсли;
	
	СписокФайловПисьма.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПечатьВнешнегоМакета(Команда)
	
	ИмяМакета = СтрЗаменить(Команда.Имя, "Печать_", "");
	
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.Добавить(Объект.Ссылка);
	
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайловДляКопирования(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		СписокФайловПисьма = Результат;
	Иначе
		СписокФайловПисьма.Очистить();
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПодсказкуОбАктивныхИнтересах()
	CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ПОДБОРОМ

// Процедура - обработчик события Действие команды Подбор.
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти  = "Запасы";
	ЕстьХарактеристики = Истина;
	ЕстьПартии		   = Ложь;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период",			  Объект.Дата);
	ПараметрыПодбора.Вставить("Организация",	  Объект.Организация);
	ПараметрыПодбора.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	ПараметрыПодбора.Вставить("ВидЦен",			  Объект.ВидЦен);
	ПараметрыПодбора.Вставить("Валюта",			  Объект.Валюта);
	ПараметрыПодбора.Вставить("ЦенаВключаетНДС",  Объект.ЦенаВключаетНДС);
	ПараметрыПодбора.Вставить("ОрганизацияДокумента", 	Объект.Организация);
	ПараметрыПодбора.Вставить("ИспользуетсяСодержание",Истина);
	
	Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
		АдресЗапасовВХранилище = ПоместитьЗапасыВХранилище(ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
		ПараметрыПодбора.Вставить("АдресЗапасовДокумента", АдресЗапасовВХранилище);
	КонецЕсли;
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект,
		Новый Структура("ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии", ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии));
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры // Подбор()

&НаКлиенте
Процедура ПодборЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		АдресЗапасовВХранилище = РезультатВыбора;
		Если ЗначениеЗаполнено(АдресЗапасовВХранилище) Тогда
			ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище,
				Параметры.ИмяТабличнойЧасти, Параметры.ЕстьХарактеристики, Параметры.ЕстьПартии);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // Подбор()

// Функция помещает список запасов во временное хранилище и возвращает адрес.
//
&НаСервере
Функция ПоместитьЗапасыВХранилище(ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии) 
	
	СписокКолонок = "Номенклатура, Количество, ЕдиницаИзмерения";
	Если ЕстьХарактеристики Тогда
		СписокКолонок = СписокКолонок + ", Характеристика";
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(, СписокКолонок), УникальныйИдентификатор);
	
КонецФункции // ПоместитьЗапасыВХранилище()

// Функция получает список товаров из временного хранилища.
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ОбработанныеСтроки	= Новый Соответствие();
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		Если ЕстьХарактеристики Тогда
			СтруктураОтбора.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		КонецЕсли;
		
		Строки = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
		
		// Удалим строки, изменения в которых уже перенесены.
		
		Если Строки.Количество() > 0 Тогда
			
			СчетчикСтрок	= 0;
			Пока СчетчикСтрок <= (Строки.Количество() - 1) Цикл
				
				СтрокаТабличнойЧасти = ОбработанныеСтроки.Получить(Строки[СчетчикСтрок]);
				
				Если СтрокаТабличнойЧасти = Неопределено Тогда
					
					СчетчикСтрок = СчетчикСтрок + 1;
					
				Иначе
					
					Строки.Удалить(СчетчикСтрок);
					
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЕсли;
		
		Если Строки.Количество() > 0 Тогда
			
			СтрокаТабличнойЧасти = Строки[0];
			СтрокаТабличнойЧасти.Количество = СтрокаЗагрузки.Количество;
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
			
			Если СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 100 Тогда
				СтрокаТабличнойЧасти.Сумма = 0;
			ИначеЕсли СтрокаТабличнойЧасти.ПроцентРучнойСкидки <> 0
					И СтрокаТабличнойЧасти.Количество <> 0 Тогда
				СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентРучнойСкидки / 100);
			КонецЕсли;
			
			СтавкаНДС = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС), СтрокаТабличнойЧасти.СтавкаНДС.Ставка, 0);
	
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.ЦенаВключаетНДС, 
											  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
											  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
			СтрокаТабличнойЧасти.ОсталосьОтгрузить = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.Отгружено;
			
			ОбработанныеСтроки.Вставить(СтрокаТабличнойЧасти, СтрокаЗагрузки);
			
		Иначе 
			НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
			НоваяСтрока.ОсталосьОтгрузить = НоваяСтрока.Количество;
			ЗапасыПоследнийКлючСтроки = ЗапасыПоследнийКлючСтроки + 1;
			НоваяСтрока.КлючСтроки = ЗапасыПоследнийКлючСтроки;
			
			ОбработанныеСтроки.Вставить(НоваяСтрока, СтрокаЗагрузки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Элементы.Ответственный.КнопкаВыбора = Истина;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		Элементы.Ответственный.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("СозданИзЭтапаСделки") Тогда
		_СозданИзЭтапаСделки = Параметры.СозданИзЭтапаСделки;
	Иначе
		_СозданИзЭтапаСделки = Ложь;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		 И ЗначениеЗаполнено(Объект.Партнер) Тогда
		 Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
			Объект.Договор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(Объект.Партнер, Объект.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			Объект.Валюта = Объект.Договор.ВалютаРасчетов;
			ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.Договор.ВалютаРасчетов));
			Объект.Курс      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
			Объект.ВидСкидкиНаценки = Объект.Договор.ВидСкидкиНаценки;
			Объект.ВидЦен = Объект.Договор.ВидЦен;
		КонецЕсли;
	КонецЕсли;
	
	// Инициализация реквизитов формы.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Организации.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
		|			ТОГДА Организации.БанковскийСчетПоУмолчанию
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК БанковскийСчет
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Организация");
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Объект.Валюта);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.БанковскийСчет = Выборка.БанковскийСчет;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Договор = Объект.Договор;
	ВалютаРасчетов = Объект.Договор.ВалютаРасчетов;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРегламентированногоУчета));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.Основание) 
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	ИначеЕсли CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(Объект.Организация) Тогда	
		Элементы.ЗапасыСтавкаНДС.Видимость = Истина;
		Элементы.ЗапасыСуммаНДС.Видимость = Истина;
		Элементы.ЗапасыВсего.Видимость = Истина;
	Иначе	
		Элементы.ЗапасыСтавкаНДС.Видимость = Ложь;
		Элементы.ЗапасыСуммаНДС.Видимость = Ложь;
		Элементы.ЗапасыВсего.Видимость = Ложь;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
	Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	CRM_ОбщегоНазначенияСервер.УстановитьКнопкиПечати(Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя(), ЭтотОбъект);
	
	// Запомним последний ключ строки табличной части "Запасы".
	Если Объект.Запасы.Количество() > 0 Тогда
		
		ТаблицаКлючей = Объект.Запасы.Выгрузить();
		
		ТаблицаКлючей.Сортировать("КлючСтроки Убыв");
		
		ЗапасыПоследнийКлючСтроки = ТаблицаКлючей[0].КлючСтроки;
		
		Если ЗапасыПоследнийКлючСтроки = 0 Тогда
			ЗапасыПоследнийКлючСтроки = -1;
			Для Каждого СтрокаЗапасов Из Объект.Запасы Цикл
				ЗапасыПоследнийКлючСтроки	= ЗапасыПоследнийКлючСтроки + 1;
				СтрокаЗапасов.КлючСтроки	= ЗапасыПоследнийКлючСтроки;
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Дата = ТекущаяДатаСеанса();
		ЗаполнитьПервичныйИнтерес(Параметры.Основание);
		
	КонецЕсли;
	
	СформироватьОписаниеКаналаИсточника();
	НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
	ИспользоватьБизнесПроцессы = Константы.CRM_ИспользоватьБизнесПроцессы.Получить();
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
	ЗаполнятьПервичныйИнтерес = Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить();
	УстановитьВозможностьРедактированияЦен();
	CRM_ШаблоныОбъектов.СформироватьДополнительныеЭлементыФормы(ЭтотОбъект);
		
	Если ЭтоНовый И ЗначениеЗаполнено(Объект.ДокументОснование) 
	И ((ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"))
	ИЛИ (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"))) Тогда
		
		МассивФайлов = РаботаСФайламиСлужебныйВызовСервера.ПолучитьВсеПодчиненныеФайлы(Объект.ДокументОснование);
		
		Если МассивФайлов.Количество() > 0 Тогда
			СписокФайловПисьма.ЗагрузитьЗначения(МассивФайлов);
		КонецЕсли;
	КонецЕсли;
	
	// +Софтфон
	Если Параметры.Свойство("сфпВыбранныйОбъект") Тогда
		Объект.Партнер						= Параметры.сфпВыбранныйОбъект.Партнер;
		Объект.КонтактноеЛицо 				= Параметры.сфпВыбранныйОбъект.КонтактноеЛицо;
		Модифицированность = Истина;
	КонецЕсли;			
	// -Софтфон				
	
	CRM_ОбщегоНазначенияСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, Объект, "ГруппаИнтерес", ТипЗнч(Объект.Ссылка));
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, Истина, , ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда//И ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОбменЧерезУниверсальныйФормат") Тогда
		Элементы.Оплата.Доступность					= Ложь;
		Элементы.ГруппаТовары.Доступность			= Ложь;
		Элементы.ГруппаКнопокОтгрузки.Доступность	= Ложь;
		Элементы.ГруппаОтгрузка.Доступность			= Ложь;
		Элементы.СтраницаОплата.Видимость			= Ложь;
		Элементы.СтраницаОтгрузка.Видимость			= Ложь;
		Элементы.СтраницаОплатаОтчет.Видимость		= Истина;
		Элементы.СтраницаОтгрузкаОтчет.Видимость	= Истина;
		Элементы.СтраницаОтгрузкаАвансы.Видимость	= Истина;
		
		Если НЕ ЭтоНовый Тогда
			
			ПолучитьВывестиДанныеПоОтгрузкам();
			ПолучитьВывестиДанныеПоОплате();
			ПолучитьВывестиДанныеПоАвансам();
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Взаимодействие") Тогда
		Взаимодействие	= Параметры.Взаимодействие;
	КонецЕсли;
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Процедура - обработчик события ПриЧтенииНаСервере.
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события "ПередЗаписьюНаСервере" формы.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПроверитьЗаполнение();
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	CRM_ТаблицаИнтересовЗнач = РеквизитФормыВЗначение("CRM_ТаблицаИнтересов",Тип("ТаблицаЗначений"));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",CRM_ТаблицаИнтересовЗнач);
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ДоступностьПервичногоИнтереса();
	Оповестить();
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
	И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		ПроверитьТипОснования();
		
	КонецЕсли;
	
	Элементы.Ответственный.ТолькоПросмотр = Истина;
	Элементы.Ответственный.КнопкаВыбора = Ложь;
	
	Если ЗначениеЗаполнено(Взаимодействие) Тогда
		CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
		ЗагрузитьИзШаблонаНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	ДоступностьПервичногоИнтереса();
	
	// Всегда размещать это условие в конце процедуры.
	Если СписокФайловПисьма.Количество() > 0 Тогда
		НовоеОповещение = Новый ОписаниеОповещения("ВыборФайловДляКопирования", ЭтотОбъект);
		ПараметрыФормы = Новый Структура ("СписокФайлов", СписокФайловПисьма);
		ОткрытьФорму("ОбщаяФорма.CRM_ФормаВыбораФайловДляКопирования", ПараметрыФормы,,,,,НовоеОповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
		Возврат;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьПервичныйИнтерес(ТекущийОбъект);
	
КонецПроцедуры

#Область ПроцедурыДействияКомандныхПанелейФормы

#КонецОбласти

#Область ПроцедурыДействияКомандФормы

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля.
//
&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.Валюта,, Неопределено);
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

// Процедура - обработчик нажатия на кнопку Заполнить.
//
&НаКлиенте
Процедура ЗаполнитьВыполнить()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Документ будет полностью перезаполнен по ""Основанию""! Продолжить выполнение операции?'"), РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры  // ЗаполнитьВыполнить()

&НаКлиенте
Процедура ЗаполнитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоДокументу();
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
		Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	КонецЕсли;
	
КонецПроцедуры  // ЗаполнитьВыполнить()

&НаКлиенте
Процедура ОтгрузкиДобавить(Команда)
	
	СтрокаТабличнойЧасти = Элементы.ТаблицаЗапасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Запасы Цикл
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ОсталосьОтгрузить = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоКОтгрузке = СтрокаТабличнойЧасти.ОсталосьОтгрузить;
	
	Если КоличествоКОтгрузке > 1 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтгрузкиДобавитьЗавершение", ЭтотОбъект, СтрокаТабличнойЧасти);
		ПоказатьВводЗначения(ОписаниеОповещения, КоличествоКОтгрузке, НСтр("ru = 'Введите отгружаемое количество'"), Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
		Возврат;
		
	КонецЕсли;
	
	ДобавитьВОтгрузку(СтрокаТабличнойЧасти.КлючСтроки, КоличествоКОтгрузке);
	ОбновитьСуммыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиДобавитьЗавершение(КоличествоКОтгрузке, СтрокаТабличнойЧасти) Экспорт
	
	Если КоличествоКОтгрузке = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВОтгрузку(СтрокаТабличнойЧасти.КлючСтроки, КоличествоКОтгрузке);
	ОбновитьСуммыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиДобавитьВсе(Команда)
	
	Для Каждого СтрокаЗапасов Из Объект.Запасы Цикл
		
		Если СтрокаЗапасов.ОсталосьОтгрузить > 0 Тогда
			
			КоличествоОтгрузки = СтрокаЗапасов.ОсталосьОтгрузить;
			
			ДобавитьВОтгрузку(СтрокаЗапасов.КлючСтроки, КоличествоОтгрузки);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ОбновитьСуммыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиУдалить(Команда)
	
	СтрокаТабличнойЧасти = Элементы.Отгрузка.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Отгрузка Цикл
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОтгрузкаПриУдаленииСтроки(СтрокаТабличнойЧасти.ЗапасыКлючСтроки, СтрокаТабличнойЧасти.ДатаОтгрузки);
	
	ОбновитьСуммыДокумента();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкиУдалитьВсе(Команда)
	
	Объект.Отгрузка.Очистить();
	
	Для Каждого СтрокаЗапасов Из Объект.Запасы Цикл
		
		СтрокаЗапасов.Отгружено			= 0;
		СтрокаЗапасов.ОсталосьОтгрузить = СтрокаЗапасов.Количество;
		
	КонецЦикла;	
	
	ОбновитьСуммыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКомандПодключаемыхОтчетовИОбработок

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовШапки

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов);
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные);
		КонецЕсли;	
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
		Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Если Объект.Валюта = СтруктураДанные.БанковскийСчетВалютаДенежныхСредств Тогда
		Объект.БанковскийСчет = СтруктураДанные.БанковскийСчет;
	КонецЕсли;
	Объект.Договор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(Объект.Партнер, Объект.Организация);
	ДоговорПриИзменении(Элементы.Договор);
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
	Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Партнер.
// Выполняет очистку договора и табличной части.
//
Процедура ПартнерПриИзменении(Элемент)
	
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	
	ПартнерПередИзменением = Партнер;
	Партнер = Объект.Партнер;
	
	ДополнительныеПараметры = Новый Структура("ПартнерПередИзменением", ПартнерПередИзменением);
	Если ПартнерПередИзменением <> Объект.Партнер Тогда
		
		СтруктураДанные = ПолучитьДанныеПартнерПриИзменении(Объект.Дата, Объект.Валюта, Объект.Партнер, Объект.Организация, Объект.Проект);
		
		Объект.Договор = СтруктураДанные.Договор;
		ДоговорПередИзменением = Договор;
		Договор = Объект.Договор;
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
		Если НЕ СтруктураДанные.ЦенаВключаетНДС = Неопределено Тогда
			Объект.ЦенаВключаетНДС = СтруктураДанные.ЦенаВключаетНДС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
		
		Объект.КонтактноеЛицо = СтруктураДанные.ОсновноеКонтактноеЛицо;
		
		ИзменилсяВидЦен = Объект.ВидЦен <> СтруктураДанные.ВидЦен И ЗначениеЗаполнено(СтруктураДанные.ВидЦен);
		ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> СтруктураДанные.ВидСкидкиНаценки И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки);
		ДополнительныеПараметры = Новый Структура("ПартнерПередИзменением, ИзменилсяВидЦен, ИзменилсяВидСкидки, ВалютаРасчетовПередИзменением, СтруктураДанные, ДоговорПередИзменением",
												ПартнерПередИзменением, ИзменилсяВидЦен, ИзменилсяВидСкидки, ВалютаРасчетовПередИзменением, СтруктураДанные, ДоговорПередИзменением);
		Если ЗначениеЗаполнено(Объект.Договор) И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки) Тогда
			
			Сообщение = НСтр("ru = 'Договор с партнером предусматривает условия цен и скидок, отличные от установленных в документе! 
			|Пересчитать документ в соответствии с договором?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПартнерПриИзмененииПродолжение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, Сообщение, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		ПартнерПриИзмененииПродолжение(Истина, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	ПартнерПриИзмененииПродолжение(Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзмененииПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ПартнерПередИзменением <> Объект.Партнер Тогда
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Если ДополнительныеПараметры.ИзменилсяВидЦен Тогда
				Объект.ВидЦен = ДополнительныеПараметры.СтруктураДанные.ВидЦен;
			КонецЕсли; 
			Если ДополнительныеПараметры.ИзменилсяВидСкидки Тогда
				Объект.ВидСкидкиНаценки = ДополнительныеПараметры.СтруктураДанные.ВидСкидкиНаценки;
			КонецЕсли; 
			СтруктураНадписи = Новый Структура("Валюта, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, ЦенаВключаетНДС, УчетВалютныхОпераций, ВидЦен, ВидСкидки", Объект.Валюта, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, Объект.ВидЦен, Объект.ВидСкидкиНаценки);
			Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
			
			// Пересчитываем цены по виду цен.
			Если Объект.Запасы.Количество() > 0 Тогда
				//CRM_ОбщегоНазначенияСервер.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтаФорма, "Запасы", Истина);
				ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенСервер("Запасы", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(Объект.Договор)
			И ЗначениеЗаполнено(ВалютаРасчетов)
			И Объект.Договор <> ДополнительныеПараметры.ДоговорПередИзменением
			И ДополнительныеПараметры.ВалютаРасчетовПередИзменением <> ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов)
			И Объект.Валюта <> ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов Тогда
			
			Если Объект.Валюта <> ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов Тогда
				Объект.БанковскийСчет = Неопределено;
			КонецЕсли;
			
			Объект.Валюта = ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов;
			ОписаниеОповещения = Новый ОписаниеОповещения("ПартнерПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьПредупреждение(ОписаниеОповещения, НСтр("ru = 'Изменилась валюта расчетов по договору с партнером! Необходимо проверить валюту документа!'"));
			Возврат;
		КонецЕсли;
		
		ВалютаРасчетов = ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов;
		
	КонецЕсли;
	
	СформироватьОписаниеКаналаИсточника();

	ДоступностьПервичногоИнтереса();
	
	ПерезаполнитьПодсказкуОбАктивныхИнтересах();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПартнерПриИзмененииЗавершениеКонец", ЭтотОбъект, ДополнительныеПараметры);
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(ДополнительныеПараметры.ВалютаРасчетовПередИзменением, Истина, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзмененииЗавершениеКонец(Результат, ДополнительныеПараметры) Экспорт
	
	ВалютаРасчетов = ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов;
	СформироватьОписаниеКаналаИсточника();
	ДоступностьПервичногоИнтереса();
	ПерезаполнитьПодсказкуОбАктивныхИнтересах();

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик выбора контактного лица.
//
Процедура КонтактноеЛицоОбработкаВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	Объект.Партнер	= CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(РезультатЗакрытия, "Владелец");
	ПартнерПриИзменении(Элементы.Партнер);
	Объект.КонтактноеЛицо	= РезультатЗакрытия;
КонецПроцедуры // КонтактноеЛицоОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "КонтактноеЛицо".
//
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда Возврат; КонецЕсли;
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеВыбора		= Новый ОписаниеОповещения("КонтактноеЛицоОбработкаВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы			= Новый Структура;
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, Элемент, , , , ОповещениеВыбора);
КонецПроцедуры // КонтактноеЛицоНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Договор.
// Заполняет реквизиты формы курс и кратность.
//
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.Валюта, Объект.Договор);
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
		Если НЕ СтруктураДанные.ЦенаВключаетНДС = Неопределено Тогда
			
			Объект.ЦенаВключаетНДС = СтруктураДанные.ЦенаВключаетНДС;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
		
		ИзменилсяВидЦен = Объект.ВидЦен <> СтруктураДанные.ВидЦен И ЗначениеЗаполнено(СтруктураДанные.ВидЦен);
		ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> СтруктураДанные.ВидСкидкиНаценки И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки);
		
		ДополнительныеПараметры = Новый Структура("ИзменилсяВидЦен, ИзменилсяВидСкидки, ВалютаРасчетовПередИзменением, СтруктураДанные", ИзменилсяВидЦен, ИзменилсяВидСкидки, ВалютаРасчетовПередИзменением, СтруктураДанные);
		Если ЗначениеЗаполнено(Объект.Договор) И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки) Тогда
			
			Сообщение = НСтр("ru = 'Договор с партнером предусматривает условия цен и скидок, отличные от установленных в документе! 
									|Пересчитать документ в соответствии с договором?'");
									
			ОписаниеОповещения = Новый ОписаниеОповещения("ДоговорПриИзмененииПродолжение", ЭтотОбъект, ДополнительныеПараметры);						
			ПоказатьВопрос(ОписаниеОповещения, Сообщение, РежимДиалогаВопрос.ДаНет);
			Возврат;	
		КонецЕсли;
		ДоговорПриИзмененииПродолжение(Неопределено, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры // ДоговорПриИзменении()

&НаКлиенте
Процедура ДоговорПриИзмененииПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если ДополнительныеПараметры.ИзменилсяВидЦен Тогда
			Объект.ВидЦен = ДополнительныеПараметры.СтруктураДанные.ВидЦен;
		КонецЕсли; 
		Если ДополнительныеПараметры.ИзменилсяВидСкидки Тогда
			Объект.ВидСкидкиНаценки = ДополнительныеПараметры.СтруктураДанные.ВидСкидкиНаценки;
		КонецЕсли; 
		СтруктураНадписи = Новый Структура("Валюта, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, ЦенаВключаетНДС, УчетВалютныхОпераций, ВидЦен, ВидСкидки", Объект.Валюта, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, Объект.ВидЦен, Объект.ВидСкидкиНаценки);
		Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		// Пересчитываем цены по виду цен.
		Если Объект.Запасы.Количество() > 0 Тогда
			//CRM_ОбщегоНазначенияСервер.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтаФорма, "Запасы", Истина);
			ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенСервер("Запасы", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.Договор)
		И ЗначениеЗаполнено(ВалютаРасчетов)
		И ДополнительныеПараметры.ВалютаРасчетовПередИзменением <> ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов)
		И Объект.Валюта <> ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов Тогда
		
		Если Объект.Валюта <> ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов Тогда
			Объект.БанковскийСчет = Неопределено;
		КонецЕсли;
		
		Объект.Валюта = ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов;
		ОписаниеОповещения = Новый ОписаниеОповещения("ДоговорПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(ОписаниеОповещения, НСтр("ru = 'Изменилась валюта расчетов по договору с партнером! Необходимо проверить валюту документа!'"));
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДоговорПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(ДополнительныеПараметры.ВалютаРасчетовПередИзменением, Истина, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	ДоступностьПервичногоИнтереса();
	Модифицированность = Истина;
	Если ИсточникПервичногоИнтереса = Неопределено ИЛИ ИсточникПервичногоИнтереса.Пустая() Тогда
		Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(КаналПервичногоИнтереса, "ТипЗначения"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И КаналМаркетинговыеМероприятие() Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ИсточникПервичногоИнтереса);
		ПараметрыФормы.Вставить("СкрытьПодменюВид", Истина);
		
		ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
		
		ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
		ЭлементОтбора.ПравоеЗначение	= Истина;
		ЭлементОтбора.Использование		= Истина;
		
		ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
		ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
		ЭлементОтбора.Использование		= Истина;
		
		ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
		ЭлементОтбора.ПравоеЗначение	= НачалоДня(ТекущаяДата());
		ЭлементОтбора.Использование		= Истина;
		
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовТабличнойЧасти

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("Организация", 	 Объект.Организация);
	СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
	СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
	СтруктураДанные.Вставить("Валюта",			Объект.Валюта);
	СтруктураДанные.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Коэффициент",		 1);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ПроцентРучнойСкидки = СтруктураДанные.ПроцентРучнойСкидки;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = СтруктураДанные.Содержание;
	
	УстановитьКоличествоОтгруженногоОстатка();
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
	СтруктураДанные.Вставить("ВидЦен",			 	Объект.ВидЦен);
	СтруктураДанные.Вставить("Валюта",	 			Объект.Валюта);
	СтруктураДанные.Вставить("ЦенаВключаетНДС", 	Объект.ЦенаВключаетНДС);
	
	СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
	СтруктураДанные.Вставить("Номенклатура",	 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ЕдиницаИзмерения", 	СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Содержание = СтруктураДанные.Содержание;
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыХарактеристикаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	УстановитьКоличествоОтгруженногоОстатка();
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыКоличествоПриИзменении()

// Процедура - обработчик события НачалоВыбораИзСписка поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
	
	Для каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияНачалоВыбораИзСписка()

// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
	 ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЕдиницаИзмеренияОбработкаВыбора()

// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыЦенаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ЗапасыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ЗапасыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Скидка.
	Если СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 100 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентРучнойСкидки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ((1 - СтрокаТабличнойЧасти.ПроцентРучнойСкидки / 100) * СтрокаТабличнойЧасти.Количество);
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСуммаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры  // ЗапасыСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ЗапасыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ЗапасыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ЗапасыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		
		ЗапасыПоследнийКлючСтроки = ЗапасыПоследнийКлючСтроки + 1;
		
		Элемент.ТекущиеДанные.КлючСтроки = ЗапасыПоследнийКлючСтроки;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	МассивОтгрузкаСтроки = Объект.Отгрузка.НайтиСтроки(Новый Структура("ЗапасыКлючСтроки", СтрокаТабличнойЧасти.КлючСтроки));
		
    Отказ = МассивОтгрузкаСтроки.Количество() > 0;
	
	Если Отказ Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Сначала необходимо удалить эту позицию из отгруженных.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Период",			  Объект.Дата);
	ПараметрыФормы.Вставить("ВидЦен",			  Объект.ВидЦен);
	ПараметрыФормы.Вставить("ТекущаяСтрока",	  Элементы.Запасы.ТекущиеДанные.Номенклатура);
	
	ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора",ПараметрыФормы,Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриИзменении(Элемент)
	ОбновитьСуммыДокумента();
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовТабличнойЧастиОплата

&НаКлиенте
Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ОплатаТекущиеДанные = Элемент.ТекущиеДанные;
		
		ОплатаТекущиеДанные.ВалютаДокумента = Объект.Валюта;
		ОплатаТекущиеДанные.Кратность 		= Объект.Кратность;
		ОплатаТекущиеДанные.Курс			= Объект.Курс;
		ОплатаТекущиеДанные.ДатаОплаты 		= ТекущаяДата();
		ОплатаТекущиеДанные.ЕстьИзменения	= Истина;
		
		ВсегоОтгружено	= Объект.Запасы.Итог("Всего");
		ВсегоОплачено	= Объект.Оплата.Итог("Сумма");
			
		Если ВсегоОтгружено > 0  И ВсегоОтгружено > ВсегоОплачено Тогда
			ОплатаТекущиеДанные.Сумма = ВсегоОтгружено - ВсегоОплачено;
		КонецЕсли;
		
		ОплатаПриИзменении(Элемент);
		
	ИначеЕсли НоваяСтрока Тогда
		ОплатаТекущиеДанные = Элемент.ТекущиеДанные;
		
		ОплатаТекущиеДанные.ВалютаДокумента				= Объект.Валюта;
		ОплатаТекущиеДанные.Кратность 					= Объект.Кратность;
		ОплатаТекущиеДанные.Курс						= Объект.Курс;
		ОплатаТекущиеДанные.ИдентификаторДокумента		= "";
		ОплатаТекущиеДанные.ИдентификаторКорДокумента	= "";
		ОплатаТекущиеДанные.ПредставлениеДокумента		= "";
		ОплатаТекущиеДанные.ЕстьИзменения				= Истина;
		
		ОбновитьСуммыДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСуммаПриИзменении(Элемент)
	
	ОплатаТекущиеДанные					= Элементы.Оплата.ТекущиеДанные;
	ОплатаТекущиеДанные.ЕстьИзменения	= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаДатаОплатыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Оплата.ТекущиеДанные;
	
	КонецПериода = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОплаты), СтрокаТабличнойЧасти.ДатаОплаты, Объект.Дата);
	
	СтруктураДанные = ПолучитьДанныеДатаОплатыПриИзменении(КонецПериода, СтрокаТабличнойЧасти.ВалютаДокумента);
	
	СтрокаТабличнойЧасти.Курс		= ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	СтрокаТабличнойЧасти.Кратность	=  ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПриИзменении(Элемент)
		
	ОбновитьСуммыДокумента();
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьЗаписиРегистраСведений(СтрокаОплатыИдентификаторДокумента, СтрокаОплатыИдентификаторКорДокумента)
	
	Если ЗначениеЗаполнено(СтрокаОплатыИдентификаторДокумента)
	И ЗначениеЗаполнено(СтрокаОплатыИдентификаторКорДокумента) Тогда
	//	Запрос = новый Запрос;
	//	Если СтрокаОплатыИдентификаторКорДокумента = "*" Тогда
	//		Запрос.Текст = "ВЫБРАТЬ
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторКорДокумента,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Организация,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Контрагент,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ДоговорКонтрагента,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВидыДвиженийПриходРасход,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Загружено,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Дата,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Номер,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.СуммаДокумента,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВалютаДокумента,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.КурсВзаиморасчетов,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.КратностьВзаиморасчетов,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ПредставлениеДокумента,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ПредставлениеКорДокумента,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.СделкаСКлиентом,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.АвансКЗачету
	//		|ИЗ
	//		|	РегистрСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам КАК CRM_ЗагруженныеОборотыПоВзаиморасчетам
	//		|ГДЕ
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента = &ИдентификаторДокумента
	//		|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторКорДокумента = &ИдентификаторКорДокумента
	//		|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.СделкаСКлиентом = &СделкаСКлиентом";
	//	
	//		Запрос.УстановитьПараметр("ИдентификаторДокумента"		,СтрокаОплатыИдентификаторДокумента);
	//		Запрос.УстановитьПараметр("ИдентификаторКорДокумента"	,СтрокаОплатыИдентификаторКорДокумента);
	//		Запрос.УстановитьПараметр("СделкаСКлиентом"				,Объект.Ссылка);
	//		
	//		Выборка = Запрос.Выполнить().Выбрать();
	//		Пока Выборка.Следующий() Цикл
	//			ЗаписьРегистра = РегистрыСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам.СоздатьМенеджерЗаписи();
	//			ЗаполнитьЗначенияСвойств(ЗаписьРегистра,Выборка);
	//			ЗаписьРегистра.Прочитать();
	//			Если ЗаписьРегистра.Выбран() Тогда
	//				ЗаписьРегистра.СделкаСКлиентом = Документы.CRM_Продажа.ПустаяСсылка();
	//				ЗаписьРегистра.Загружено = Ложь;
	//				ЗаписьРегистра.Записать();
	//			КонецЕсли;
	//		КонецЦикла;
	//	Иначе
	//		Запрос.Текст = "ВЫБРАТЬ
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторКорДокумента,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Организация,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Контрагент,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ДоговорКонтрагента,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВидыДвиженийПриходРасход,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Загружено,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Дата,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Номер,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.СуммаДокумента,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВалютаДокумента,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.КурсВзаиморасчетов,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.КратностьВзаиморасчетов,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ПредставлениеДокумента,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ПредставлениеКорДокумента,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.СделкаСКлиентом,
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.АвансКЗачету,
	//		|	ЕСТЬNULL(Авансы.СделкаСКлиентом, ЗНАЧЕНИЕ(Документ.CRM_Продажа.ПустаяСсылка)) КАК АвансСделкаСКлиентом,
	//		|	ЕСТЬNULL(Авансы.СуммаДокумента, 0) КАК АвансСуммаДокумента,
	//		|	ЕСТЬNULL(Авансы.Дата, &ПустаяДата) КАК АвансДата,
	//		|	ЕСТЬNULL(Авансы.Номер, """") КАК АвансНомер,
	//		|	ЕСТЬNULL(Авансы.ПредставлениеДокумента, """") КАК АвансПредставлениеДокумента
	//		|ИЗ
	//		|	РегистрСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам КАК CRM_ЗагруженныеОборотыПоВзаиморасчетам
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента КАК ИдентификаторДокумента,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторКорДокумента КАК ИдентификаторКорДокумента,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.Организация КАК Организация,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.Контрагент КАК Контрагент,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВидыДвиженийПриходРасход КАК ВидыДвиженийПриходРасход,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.Загружено КАК Загружено,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.Дата КАК Дата,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.Номер КАК Номер,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.СуммаДокумента КАК СуммаДокумента,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВалютаДокумента КАК ВалютаДокумента,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ПредставлениеДокумента КАК ПредставлениеДокумента,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ПредставлениеКорДокумента КАК ПредставлениеКорДокумента,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.СделкаСКлиентом КАК СделкаСКлиентом,
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.АвансКЗачету КАК АвансКЗачету
	//		|		ИЗ
	//		|			РегистрСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам КАК CRM_ЗагруженныеОборотыПоВзаиморасчетам
	//		|		ГДЕ
	//		|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.Загружено
	//		|			И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВидыДвиженийПриходРасход = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыДвиженийПриходРасход.Расход)
	//		|			И (НЕ CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента = ""*"")
	//		|			И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторКорДокумента = ""*"") КАК Авансы
	//		|		ПО CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента = Авансы.ИдентификаторДокумента
	//		|ГДЕ
	//		|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.СделкаСКлиентом = &СделкаСКлиентом
	//		|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента = &ИдентификаторДокумента
	//		|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторКорДокумента = &ИдентификаторКорДокумента";
	//		
	//		Запрос.УстановитьПараметр("ИдентификаторДокумента"		,СтрокаОплатыИдентификаторДокумента);
	//		Запрос.УстановитьПараметр("ИдентификаторКорДокумента"	,СтрокаОплатыИдентификаторКорДокумента);
	//		Запрос.УстановитьПараметр("ПустаяДата"					,Дата("00010101"));
	//		Запрос.УстановитьПараметр("СделкаСКлиентом"				,Объект.Ссылка);
	//		
	//		Выборка = Запрос.Выполнить().Выбрать();
	//		Пока Выборка.Следующий() Цикл
	//			ЗаписьРегистра = РегистрыСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам.СоздатьМенеджерЗаписи();
	//			ЗаполнитьЗначенияСвойств(ЗаписьРегистра,Выборка);
	//			ЗаписьРегистра.Прочитать();
	//			
	//			Если ЗначениеЗаполнено(Выборка.АвансСделкаСКлиентом) И (НЕ Выборка.АвансСделкаСКлиентом = Объект.Ссылка) Тогда
	//				АвансСделка = Выборка.АвансСделкаСКлиентом.ПолучитьОбъект();
	//				МассивСтрок = АвансСделка.Оплата.НайтиСтроки(Новый Структура("ИдентификаторДокумента, ИдентификаторКорДокумента",Выборка.ИдентификаторДокумента,"*"));
	//				Если МассивСтрок.Количество() > 0 Тогда
	//					МассивСтрок[0].Сумма = МассивСтрок[0].Сумма + Выборка.СуммаДокумента;
	//					Если МассивСтрок[0].Сумма > Выборка.АвансСуммаДокумента Тогда
	//						МассивСтрок[0].Сумма = Выборка.АвансСуммаДокумента;
	//					КонецЕсли;
	//				Иначе
	//					НоваяСтрока = АвансСделка.Оплата.Добавить();
	//					НоваяСтрока.ИдентификаторДокумента		= Выборка.ИдентификаторДокумента;
	//					НоваяСтрока.ИдентификаторКорДокумента	= "*";
	//					НоваяСтрока.ДатаОплаты					= Выборка.АвансДата;
	//					НоваяСтрока.НомерДокумента				= Выборка.АвансНомер;
	//					НоваяСтрока.ПредставлениеДокумента		= Выборка.АвансПредставлениеДокумента;
	//					НоваяСтрока.Сумма						= Выборка.СуммаДокумента;
	//					НоваяСтрока.Курс						= Выборка.КурсВзаиморасчетов;
	//					НоваяСтрока.Кратность					= Выборка.КратностьВзаиморасчетов;
	//				КонецЕсли;
	//				
	//				Попытка
	//					АвансСделка.Записать();
	//				Исключение
	//				КонецПопытки;
	//				
	//				Если ЗаписьРегистра.Выбран() Тогда
	//					ЗаписьРегистра.СделкаСКлиентом = Документы.CRM_Продажа.ПустаяСсылка();
	//					ЗаписьРегистра.Загружено = Ложь;
	//					ЗаписьРегистра.АвансКЗачету = ЗначениеЗаполнено(Выборка.АвансСделкаСКлиентом);
	//					ЗаписьРегистра.Записать();
	//				КонецЕсли;
	//			ИначеЕсли ЗначениеЗаполнено(Выборка.АвансСделкаСКлиентом) И (Выборка.АвансСделкаСКлиентом = Объект.Ссылка) Тогда
	//				
	//				МассивСтрок = Объект.Оплата.НайтиСтроки(Новый Структура("ИдентификаторДокумента, ИдентификаторКорДокумента",Выборка.ИдентификаторДокумента,"*"));
	//				
	//				Если МассивСтрок.Количество() > 0 Тогда
	//					МассивСтрок[0].Сумма = МассивСтрок[0].Сумма + Выборка.СуммаДокумента;
	//					Если МассивСтрок[0].Сумма > Выборка.АвансСуммаДокумента Тогда
	//						МассивСтрок[0].Сумма = Выборка.АвансСуммаДокумента;
	//					КонецЕсли;
	//				Иначе
	//					НоваяСтрока = Объект.Оплата.Добавить();
	//					НоваяСтрока.ИдентификаторДокумента		= Выборка.ИдентификаторДокумента;
	//					НоваяСтрока.ИдентификаторКорДокумента	= "*";
	//					НоваяСтрока.ДатаОплаты					= Выборка.АвансДата;
	//					НоваяСтрока.НомерДокумента				= Выборка.АвансНомер;
	//					НоваяСтрока.ПредставлениеДокумента		= Выборка.АвансПредставлениеДокумента;
	//					НоваяСтрока.Сумма						= Выборка.СуммаДокумента;
	//					НоваяСтрока.Курс						= Выборка.КурсВзаиморасчетов;
	//					НоваяСтрока.Кратность					= Выборка.КратностьВзаиморасчетов;
	//				КонецЕсли;
	//				
	//				Если ЗаписьРегистра.Выбран() Тогда
	//					ЗаписьРегистра.СделкаСКлиентом = Документы.CRM_Продажа.ПустаяСсылка();
	//					ЗаписьРегистра.Загружено = Ложь;
	//					ЗаписьРегистра.АвансКЗачету = ЗначениеЗаполнено(Выборка.АвансСделкаСКлиентом);
	//					ЗаписьРегистра.Записать();
	//				КонецЕсли;
	//			Иначе
	//				Если ЗаписьРегистра.Выбран() Тогда
	//					ЗаписьРегистра.СделкаСКлиентом = Документы.CRM_Продажа.ПустаяСсылка();
	//					ЗаписьРегистра.Загружено = Ложь;
	//					ЗаписьРегистра.АвансКЗачету = ЗначениеЗаполнено(Выборка.АвансСделкаСКлиентом);
	//					ЗаписьРегистра.Записать();
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	
КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПередУдалением(Элемент, Отказ)
	
	Для Каждого ЭлементМассива Из Элемент.ВыделенныеСтроки Цикл
		ДанныеСтрокиОплаты = Элементы.Оплата.ДанныеСтроки(ЭлементМассива);
		СкорректироватьЗаписиРегистраСведений(ДанныеСтрокиОплаты.ИдентификаторДокумента, ДанныеСтрокиОплаты.ИдентификаторКорДокумента);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовТабличнойЧастиОтгрузки

&НаКлиенте
Процедура ТаблицаЗапасыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ТаблицаЗапасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ОсталосьОтгрузить = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоКОтгрузке = СтрокаТабличнойЧасти.ОсталосьОтгрузить;
	ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаЗапасыЗавершениеВыбора", ЭтотОбъект, СтрокаТабличнойЧасти);
	ПоказатьВводЗначения(ОписаниеОповещения, КоличествоКОтгрузке, НСтр("ru = 'Введите отгружаемое количество'"), Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗапасыЗавершениеВыбора(КоличествоКОтгрузке, СтрокаТабличнойЧасти) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КоличествоКОтгрузке) Тогда Возврат; КонецЕсли;
	
	ДобавитьВОтгрузку(СтрокаТабличнойЧасти.КлючСтроки, КоличествоКОтгрузке);
		
	ОбновитьСуммыДокумента();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкаДатаОтгрузкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Отгрузка.ТекущиеДанные;
	
	КонецПериода = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОтгрузки), СтрокаТабличнойЧасти.ДатаОтгрузки, Объект.Дата);
	
	СтруктураДанные = ПолучитьДанныеДатаОплатыПриИзменении(КонецПериода, СтрокаТабличнойЧасти.ВалютаДокумента);
	
	СтрокаТабличнойЧасти.Курс		= ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	СтрокаТабличнойЧасти.Кратность	=  ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкаПриИзменении(Элемент)
	
	ОбновитьСуммыДокумента();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяТекущейКолонки = Элементы.Отгрузка.ТекущийЭлемент.Имя;
	
	Если Не Найти(ИмяТекущейКолонки, "ДатаОтгрузки") Тогда
	
		СтрокаТабличнойЧасти = Элементы.Отгрузка.ТекущиеДанные;
		
		ОтгрузкаПриУдаленииСтроки(СтрокаТабличнойЧасти.ЗапасыКлючСтроки, СтрокаТабличнойЧасти.ДатаОтгрузки);
				
		ОбновитьСуммыДокумента();
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузкаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Проведен Тогда
		
		СуммаДокументаВВалютеУчета = CRM_МетодыФормДокументовСервер.ПолучитьСуммуДокументаВВалютеУчета(ТекущийОбъект.СуммаДокумента,ТекущийОбъект.Валюта, ТекущийОбъект.Дата);
		
		ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(ТекущийОбъект.Ответственный,Справочники.CRM_ВидыОповещений.СчетСумма, ТекущийОбъект.Ссылка);
		Если (НЕ ПараметрыОповещения = Неопределено) И (СуммаДокументаВВалютеУчета >= ПараметрыОповещения[0].Сумма) Тогда
			//
			CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		ПеренестиПрисоединенныеФайлы(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	ЭтоНовый = Ложь;
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ПроверкаЗаполнения(ПроверяемыеРеквизиты);
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПартнерОчистка(Элемент, СтандартнаяОбработка)
	ДоступностьПервичногоИнтереса();
	ПерезаполнитьПодсказкуОбАктивныхИнтересах();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаОчистка(Элемент, СтандартнаяОбработка)
	ДоступностьПервичногоИнтереса();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПервичногоИнтересаПриИзменении(Элемент)
	ДоступностьПервичногоИнтереса();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПервичногоИнтересаОчистка(Элемент, СтандартнаяОбработка)
	ДоступностьПервичногоИнтереса();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	ЗаполнитьГруппуГиперссылок();
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПервичногоИнтереса

Процедура УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,ИмяРеквизита)
	Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если Индекс <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции

&НаСервере
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру(ДатаАктуальности)
	
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	пПартнер = Неопределено;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		пПартнер = Партнер;
	Иначе
		пПартнер = Объект.Партнер;
	КонецЕсли;
	Если ЗначениеЗаполнено(пПартнер) Тогда
		// Предыдушая регистрация по данному партнеру берется предидущим днем.
		// По задумке не может быть более одной регистрации ПИ в 1 день по данному партнеру.
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата,,пПартнер);
		Если ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
			
			СтрокаПервичногоИнтереса = ПервичныйИнтерес.Вставить(0);
			ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса,Интерес);
			СтрокаПервичногоИнтереса.Актуальность = Истина;
			
			Если ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("СправочникСсылка.МаркетинговыеМероприятия") 
			   И ЗначениеЗаполнено(Интерес.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(Объект.Дата);
				ДатаАктуальности = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеКаналаИсточника()
		
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		
		КаналПервичногоИнтереса = Неопределено;
		ИсточникПервичногоИнтереса = Неопределено;
		Элементы.РанееЗарегистрированныйИнтерес.Видимость = ЗначениеЗаполнено(Партнер);
		ПервичныйИнтерес.Очистить();
		ВыводитьНадпись = Ложь;
		пПартнер = Неопределено;
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			пПартнер = Партнер;
		Иначе
			пПартнер = Объект.Партнер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пПартнер) Тогда
			АктуальноДо = '00010101';
			ПолучитьПредыдущийПервичныйИнтересПоПартнеру(АктуальноДо);
			
			Интерес = Неопределено;
			Попытка
				
				Интерес = ПервичныйИнтерес.Получить(0);
				
			Исключение	КонецПопытки;
			
			РанееНеЗарегистровано = Ложь;
			Если Интерес <> Неопределено И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
				ВыводитьНадпись = Истина;
					Надпись = "";
					CRM_МаркетингСервер.СформироватьНадписьПервичногоИнтереса(Объект.Ссылка, Интерес, АктуальноДо, Надпись, ВыводитьНадпись);
					Элементы.РанееЗарегистрированныйИнтерес.Заголовок = Надпись;
			КонецЕсли;
			
			Элементы.РанееЗарегистрированныйИнтерес.Видимость = ВыводитьНадпись;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	
	// Определить канал и источник первичного интереса.
	пПартнер = Неопределено;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		пПартнер = Партнер;
	Иначе
		пПартнер = Объект.Партнер;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			
			Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата,Объект.Ссылка,пПартнер);
			
			КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса);
			
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПервичныйИнтерес(ТекущийОбъект)
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		
		Участники = Новый ТаблицаЗначений;
		Участники.Колонки.Добавить("Партнер");
		
		пПартнер = Объект.Партнер;
		
		Участник = Участники.Добавить();
		Участник.Партнер = пПартнер;
		Участники.Свернуть("Партнер");
		
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущийОбъект.Дата);
		НаборЗаписей.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
			Если (Не ЗначениеЗаполнено(ИсточникПервичногоИнтереса) 
				И ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) 
				= Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))
				ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				Тогда
				Для каждого Уч Из Участники Цикл
					
					Запрос = Новый Запрос("
					|ВЫБРАТЬ
					|	ИсточникиПервичногоИнтереса.Период КАК Период
					|ИЗ
					|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
					|ГДЕ
					|	ИсточникиПервичногоИнтереса.Сделка = &Сделка
					|	И ИсточникиПервичногоИнтереса.Партнер = &Партнер
					|");
					Запрос.УстановитьПараметр("Сделка", ТекущийОбъект.Ссылка);
					Запрос.УстановитьПараметр("Партнер", Уч.Партнер);
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Период = Выборка.Период;
						МенеджерЗаписи.Сделка = ТекущийОбъект.Ссылка;
						МенеджерЗаписи.Партнер = Уч.Партнер;
						МенеджерЗаписи.Удалить();
					КонецЦикла;
					
					Запись = НаборЗаписей.Добавить();
					Запись.Период						= ТекущийОбъект.Дата;
					Запись.Партнер						= Уч.Партнер;
					Запись.Сделка						= ТекущийОбъект.Ссылка;
					Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
					Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
				
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЕсли;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьПервичногоИнтереса()
	
	Актуальность = Ложь;
	ПредыдущийИсточник = Неопределено;
	Попытка
		ПредыдущийИсточник = ПервичныйИнтерес.Получить(0);
	Исключение КонецПопытки;
	Если ПредыдущийИсточник <> Неопределено Тогда
	
		Актуальность = ПредыдущийИсточник.Актуальность;
	
	КонецЕсли;
	пПартнер = Неопределено;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		пПартнер = Партнер;
	Иначе
		пПартнер = Объект.Партнер;
	КонецЕсли;
	
	НаличиеУчастников = ?(ЗначениеЗаполнено(пПартнер),Истина,Ложь);
	
	Если НаличиеУчастников Тогда
		Элементы.КаналПервичногоИнтереса.Доступность = Истина;
		Элементы.КаналПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.КаналПервичногоИнтереса.Доступность = Ложь;
		Элементы.КаналПервичногоИнтереса.ТолькоПросмотр = Истина;
		Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
				И ТипПВХ(КаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.Доступность = Истина;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Отметки незаполненного
		
	Если Актуальность = Истина 
		И Не ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	ИначеЕсли Актуальность = Ложь 
		И Не ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		// Если обязательно заполнять актуальный источник привлечения, тогда подсвечиваем канал актуального источника
		// привлечения.
		Если ЗаполнятьПервичныйИнтерес Тогда
		
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Истина;
		
		Иначе
		
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
		// И ЗаполнятьПервичныйИнтерес 
		И Не ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
				И ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Элементы.КаналПервичногоИнтереса.Доступность		= Ложь;
		Элементы.КаналПервичногоИнтереса.ТолькоПросмотр		= Истина;
		Элементы.ИсточникПервичногоИнтереса.Доступность		= Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаЗаполнения(ПроверяемыеРеквизиты)
	
	Входящее = Истина;
	Актуальность = Ложь;
	пПартнер = Объект.Партнер;
	
	НаличиеУчастников = ?(ЗначениеЗаполнено(пПартнер),Истина,Ложь);
	
	Попытка
		ПредыдущийИсточник = ПервичныйИнтерес.Получить(0);
	Исключение КонецПопытки;
	
	Если ПредыдущийИсточник <> Неопределено Тогда
	
		Актуальность = ПредыдущийИсточник.Актуальность;
	
	КонецЕсли;
	
	Если Не ЗаполнятьПервичныйИнтерес
		Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"КаналПервичногоИнтереса");
	КонецЕсли;
		
	Если НаличиеУчастников Тогда
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
			Если ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
				УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
			КонецЕсли;
		Иначе
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
		КонецЕсли;
	Иначе
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
	КонецЕсли;
	
	ТабПервичныйИнтерес = Неопределено;
	Попытка
		ТабПервичныйИнтерес = ПервичныйИнтерес.Получить(0);
	Исключение	КонецПопытки;
	
	Если Актуальность 
		И Не ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШаблонов

&НаСервере
Процедура ЗагрузитьИзШаблонаНаСервере(ШаблонОбъект)
	
	ОписаниеРеквизитов = ПолучитьРеквизиты("Объект");
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	CRM_ШаблоныОбъектов.ЗаполнитьПредставлениеОбъекта(ШаблонОбъект,ОбъектЗначение,ОписаниеРеквизитов);
	ЗначениеВДанныеФормы(ОбъектЗначение,Объект);
	Объект.Шаблон = ШаблонОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзШаблона(Команда)
	
	СсылкаНаОбъект = Объект.Ссылка;
	сПараметры = Новый Структура("Ссылка, Форма", СсылкаНаОбъект, ЭтотОбъект);
	CRM_ШаблоныОбъектовКлиент.ЗагрузитьИзШаблонаНаКлиенте(сПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляВыгрузки()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	ОбъектСтруктура = Новый Структура("ОбъектЗначение", ОбъектЗначение);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектСтруктура, УникальныйИдентификатор);
	
	Возврат Новый Структура("ЗначенияЗаполнения",Новый Структура("Объект,ТипФормы",АдресВХранилище,"ФормаДокумента"));
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыгрузитьВШаблон(Команда)
	
	ОткрытьФорму("Справочник.CRM_ШаблоныОбъектов.ФормаОбъекта",ПолучитьПараметрыДляВыгрузки(),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьИзШаблона(Команда)
	
	Подключаемый_ЗагрузитьИзШаблона(Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииБизнеспроцессов


// +ПанельБП

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцесс(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Начать "+ВернутьЗаголовокКоманды(Команда.Имя)+""" возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессПродолжение", ЭтотОбъект, Команда.Имя);	
		ПоказатьВопрос(, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		Подключаемый_КомандаНачатьБизнесПроцессПродолжение(Неопределено, Команда.Имя)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессПродолжение(Ответ, КомандаИмя) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Ответ <> КодВозвратаДиалога.ОК Тогда 
			Возврат;
		КонецЕсли;	
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПроверитьДубликатБизнесПроцесса(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Уже создан бизнес-процесс.
			|Создать новый?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессЗавершение", ЭтотОбъект, КомандаИмя);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Неопределено, КомандаИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Ответ, КомандаИмя) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	СтруктураОснования = ПолучитьСтруктуруОснованияБизнесПроцесса(КомандаИмя);
	ПараметрыФормы = Новый Структура("Основание",СтруктураОснования);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОснованияБизнесПроцесса(Знач ИмяКоманды = Неопределено)
	СтруктураРезультат = Новый Структура("Основание,КартаМаршрута,ИспользоватьВИнтересах", Объект.Ссылка, Объект.Проект.CRM_КартаМаршрута, Объект.Проект.CRM_КартаМаршрута.ИспользоватьВИнтересах);
	
	Если ИмяКоманды <> Неопределено Тогда
		Если Найти(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_") > 0 Тогда
			ИдентификаторСсылки = Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_", ""), "_", "-"));
			ТочкаМаршрутаСсылка = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(ИдентификаторСсылки);
			Если ЗначениеЗаполнено(ТочкаМаршрутаСсылка) Тогда
				СтруктураРезультат.Вставить("ТочкаСтарта", ТочкаМаршрутаСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаСервере
Процедура ЗаполнитьГруппуГиперссылок()
	
	ТекстКоманда = Команды.Найти("_ВыполнитьЗадачу");
	Если ТекстКоманда = Неопределено Тогда
		НоваяКомандаФормы = Команды.Добавить("_ВыполнитьЗадачу");
		НоваяКомандаФормы.Заголовок					= "Выполнить";
		НоваяКомандаФормы.Подсказка					= "Отметить задачу как выполненную";
		НоваяКомандаФормы.Действие					= "Подключаемый_ВыполнитьЗадачу";
		//НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
	КонецЕсли;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	
	Попытка
		ЭтотОбъект["_ЛичнаяЗадача"] = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
		ЭтотОбъект["_ЛичнаяЗадачаСтрокой"] = "";
	Исключение
		ОписаниеТиповЗадача = Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя");
		НовыйРеквизит = Новый РеквизитФормы("_ЛичнаяЗадача", ОписаниеТиповЗадача);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповЗадача = Новый ОписаниеТипов("Строка");
		НовыйРеквизит = Новый РеквизитФормы("_ЛичнаяЗадачаСтрокой", ОписаниеТиповЗадача);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	КонецПопытки;
	
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	0 КАК ВидСсылки
	|ПОМЕСТИТЬ ЛичныеЗадачи
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	(НЕ ЗадачаИсполнителя.ПометкаУдаления)
	|	И ЗадачаИсполнителя.CRM_Личная
	|	И (НЕ ЗадачаИсполнителя.Выполнена)
	|	И ЗадачаИсполнителя.Предмет = &Предмет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ЛичныеЗадачи.Ссылка,
	|	ЛичныеЗадачи.ВидСсылки
	|ИЗ
	|	ЛичныеЗадачи КАК ЛичныеЗадачи";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предмет",Объект.Ссылка);
	
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаб Из ТаблицаОбъектов Цикл
		Если СтрокаТаб.ВидСсылки = 0 Тогда
			ЭтотОбъект._ЛичнаяЗадача			= СтрокаТаб.Ссылка;
			ЭтотОбъект._ЛичнаяЗадачаСтрокой	= Строка(СтрокаТаб.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// Отрисуем гиперссылки
	// Гирепссылка на Задачу
	Если НЕ Элементы.Найти("_ЛичнаяЗадачаСтрокой") = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект._ЛичнаяЗадача) Тогда
			Элементы.Удалить(Элементы["_ЛичнаяЗадачаЗаголовок"]);
			Элементы.Удалить(Элементы["_ЛичнаяЗадачаСтрокой"]);
			Элементы.Удалить(Элементы["Кнопка_ВыполнитьЗадачу"]);
		КонецЕсли;
	Иначе
		
		Если ЗначениеЗаполнено(ЭтотОбъект._ЛичнаяЗадача) Тогда
			
			НовыйЭлемент = Элементы.Добавить("_ЛичнаяЗадачаЗаголовок", Тип("ДекорацияФормы"), Элементы.ГиперссылкаЗаголовок);
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Заголовок	= "Задача: ";
			
			НовыйЭлемент = Элементы.Добавить("_ЛичнаяЗадачаСтрокой", Тип("ДекорацияФормы"), Элементы.ЗначениеГиперСсылкиЗадача);
			НовыйЭлемент.Заголовок	= СокрЛП(ЭтотОбъект._ЛичнаяЗадача);
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Гиперссылка= Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ГиперссылкаНажатие");
			
			НовыйЭлемент = Элементы.Добавить("Кнопка_ВыполнитьЗадачу",Тип("КнопкаФормы"), Элементы.ЗначениеГиперСсылкиЗадача);
			НовыйЭлемент.ИмяКоманды			= "_ВыполнитьЗадачу";
			НовыйЭлемент.Заголовок			= "Выполнить";
			НовыйЭлемент.Картинка			= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйЭлемент.Отображение		= ОтображениеКнопки.КартинкаИТекст;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") ИЛИ ТипЗнч(НовыйОбъект) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		ЗаполнитьГруппуГиперссылок();
	КонецЕсли;
	
КонецПроцедуры

// -ПанельБП

// +ГруппаИнтерес

&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, , ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	СтруктураОтбора.Вставить("Партнер", Объект.Партнер);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);	
	
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов[0].ВведенНаОсновании Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Удалить(0);
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ПоказатьЗначение(,ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(,Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	СтруктураОтбора.Вставить("Партнер", Объект.Партнер);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало = Ложь)
	
	МассивСтрок = ЭтотОбъект.CRM_ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",ВыбранноеЗначение));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Если ВНачало Тогда
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
		Иначе
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	ИначеЕсли ВНачало Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Сдвинуть(ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]),-ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкрытьПоказатьИнтересы(Команда)
	
	Элементы.СкрытьПоказатьИнтересы.Пометка = НЕ Элементы.СкрытьПоказатьИнтересы.Пометка;
	Элементы.ГруппаCRM_ТаблицаИнтересов.Видимость = Элементы.СкрытьПоказатьИнтересы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		Отказ = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.ВведенНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПослеУдаления(Элемент)
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Основной(Команда)
	
	ТекущиеДанные = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ДобавитьИнтересНаСервере(ТекущиеДанные.Ссылка, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

// -ГруппаИнтерес

Процедура ПолучитьВывестиДанныеПоОтгрузкам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетыСПокупателями.Регистратор,
	|	РасчетыСПокупателями.Документ,
	|	РасчетыСПокупателями.Заказ КАК Счет
	|ПОМЕСТИТЬ ЗаписиПоСчету
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	РасчетыСПокупателями.Заказ = &Заказ
	|	И РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_ДокументРасчетовСКонтрагентомТовары.Номенклатура,
	|	"""" КАК Содержание,
	|	ВЫБОР
	|		КОГДА CRM_ДокументРасчетовСКонтрагентомТовары.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.ВозвратТоваровОтПокупателя)
	|			ТОГДА CRM_ДокументРасчетовСКонтрагентомТовары.Количество * -1
	|		ИНАЧЕ CRM_ДокументРасчетовСКонтрагентомТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	CRM_ДокументРасчетовСКонтрагентомТовары.Цена,
	|	ВЫБОР
	|		КОГДА CRM_ДокументРасчетовСКонтрагентомТовары.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.ВозвратТоваровОтПокупателя)
	|			ТОГДА CRM_ДокументРасчетовСКонтрагентомТовары.Сумма * -1
	|		ИНАЧЕ CRM_ДокументРасчетовСКонтрагентомТовары.Сумма
	|	КОНЕЦ КАК Сумма,
	|	CRM_ДокументРасчетовСКонтрагентомТовары.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА CRM_ДокументРасчетовСКонтрагентомТовары.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.ВозвратТоваровОтПокупателя)
	|			ТОГДА CRM_ДокументРасчетовСКонтрагентомТовары.СуммаНДС * -1
	|		ИНАЧЕ CRM_ДокументРасчетовСКонтрагентомТовары.СуммаНДС
	|	КОНЕЦ КАК СуммаНДС,
	|	CRM_ДокументРасчетовСКонтрагентомТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Реализация
	|ИЗ
	|	Документ.CRM_ДокументРасчетовСКонтрагентом.Товары КАК CRM_ДокументРасчетовСКонтрагентомТовары
	|ГДЕ
	|	НЕ CRM_ДокументРасчетовСКонтрагентомТовары.Ссылка.ПометкаУдаления
	|	И CRM_ДокументРасчетовСКонтрагентомТовары.Ссылка.Проведен
	|	И (CRM_ДокументРасчетовСКонтрагентомТовары.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.РеализацияТоваровИУслуг)
	|			ИЛИ CRM_ДокументРасчетовСКонтрагентомТовары.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.ВозвратТоваровОтПокупателя))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_ДокументРасчетовСКонтрагентомУслуги.Номенклатура,
	|	CRM_ДокументРасчетовСКонтрагентомУслуги.Содержание,
	|	ВЫБОР
	|		КОГДА CRM_ДокументРасчетовСКонтрагентомУслуги.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.ВозвратТоваровОтПокупателя)
	|			ТОГДА CRM_ДокументРасчетовСКонтрагентомУслуги.Количество * -1
	|		ИНАЧЕ CRM_ДокументРасчетовСКонтрагентомУслуги.Количество
	|	КОНЕЦ,
	|	CRM_ДокументРасчетовСКонтрагентомУслуги.Цена,
	|	ВЫБОР
	|		КОГДА CRM_ДокументРасчетовСКонтрагентомУслуги.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.ВозвратТоваровОтПокупателя)
	|			ТОГДА CRM_ДокументРасчетовСКонтрагентомУслуги.Сумма * -1
	|		ИНАЧЕ CRM_ДокументРасчетовСКонтрагентомУслуги.Сумма
	|	КОНЕЦ,
	|	CRM_ДокументРасчетовСКонтрагентомУслуги.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА CRM_ДокументРасчетовСКонтрагентомУслуги.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.ВозвратТоваровОтПокупателя)
	|			ТОГДА CRM_ДокументРасчетовСКонтрагентомУслуги.СуммаНДС * -1
	|		ИНАЧЕ CRM_ДокументРасчетовСКонтрагентомУслуги.СуммаНДС
	|	КОНЕЦ,
	|	CRM_ДокументРасчетовСКонтрагентомУслуги.Ссылка
	|ИЗ
	|	Документ.CRM_ДокументРасчетовСКонтрагентом.Услуги КАК CRM_ДокументРасчетовСКонтрагентомУслуги
	|ГДЕ
	|	НЕ CRM_ДокументРасчетовСКонтрагентомУслуги.Ссылка.ПометкаУдаления
	|	И CRM_ДокументРасчетовСКонтрагентомУслуги.Ссылка.Проведен
	|	И CRM_ДокументРасчетовСКонтрагентомУслуги.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.РеализацияТоваровИУслуг)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_ДокументРасчетовСКонтрагентомТовары.Номенклатура,
	|	"""" КАК Содержание,
	|	CRM_ДокументРасчетовСКонтрагентомТовары.Количество - CRM_ДокументРасчетовСКонтрагентомТовары.КоличествоДоИзменения КАК Количество,
	|	CRM_ДокументРасчетовСКонтрагентомТовары.Цена,
	|	CRM_ДокументРасчетовСКонтрагентомТовары.Сумма - CRM_ДокументРасчетовСКонтрагентомТовары.СуммаДоИзменения КАК Сумма,
	|	CRM_ДокументРасчетовСКонтрагентомТовары.СтавкаНДС,
	|	CRM_ДокументРасчетовСКонтрагентомТовары.СуммаНДС - CRM_ДокументРасчетовСКонтрагентомТовары.СуммаНДСДоИзменения КАК СуммаНДС,
	|	CRM_ДокументРасчетовСКонтрагентомТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РеализацияКорретировка
	|ИЗ
	|	Документ.CRM_ДокументРасчетовСКонтрагентом.Товары КАК CRM_ДокументРасчетовСКонтрагентомТовары
	|ГДЕ
	|	НЕ CRM_ДокументРасчетовСКонтрагентомТовары.Ссылка.ПометкаУдаления
	|	И CRM_ДокументРасчетовСКонтрагентомТовары.Ссылка.Проведен
	|	И CRM_ДокументРасчетовСКонтрагентомТовары.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.КорректировкаРеализацииТоваров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_ДокументРасчетовСКонтрагентомУслуги.Номенклатура,
	|	CRM_ДокументРасчетовСКонтрагентомУслуги.Содержание,
	|	CRM_ДокументРасчетовСКонтрагентомУслуги.Количество - CRM_ДокументРасчетовСКонтрагентомУслуги.КоличествоДоИзменения,
	|	CRM_ДокументРасчетовСКонтрагентомУслуги.Цена,
	|	CRM_ДокументРасчетовСКонтрагентомУслуги.Сумма - CRM_ДокументРасчетовСКонтрагентомУслуги.СуммаДоИзменения,
	|	CRM_ДокументРасчетовСКонтрагентомУслуги.СтавкаНДС,
	|	CRM_ДокументРасчетовСКонтрагентомУслуги.СуммаНДС - CRM_ДокументРасчетовСКонтрагентомУслуги.СуммаНДСДоИзменения,
	|	CRM_ДокументРасчетовСКонтрагентомУслуги.Ссылка
	|ИЗ
	|	Документ.CRM_ДокументРасчетовСКонтрагентом.Услуги КАК CRM_ДокументРасчетовСКонтрагентомУслуги
	|ГДЕ
	|	НЕ CRM_ДокументРасчетовСКонтрагентомУслуги.Ссылка.ПометкаУдаления
	|	И CRM_ДокументРасчетовСКонтрагентомУслуги.Ссылка.Проведен
	|	И CRM_ДокументРасчетовСКонтрагентомУслуги.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.КорректировкаРеализацииТоваров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиПоСчету.Счет,
	|	ЗаписиПоСчету.Регистратор КАК ДокументРасчетов,
	|	ЗаписиПоСчету.Регистратор.Дата КАК Дата,
	|	ЗаписиПоСчету.Регистратор.Номер КАК Номер,
	|	Реализация.Номенклатура,
	|	Реализация.Содержание,
	|	Реализация.Количество КАК Количество,
	|	Реализация.Цена,
	|	Реализация.Сумма КАК Сумма,
	|	Реализация.СтавкаНДС,
	|	Реализация.СуммаНДС КАК СуммаНДС,
	|	Реализация.Ссылка
	|ИЗ
	|	ЗаписиПоСчету КАК ЗаписиПоСчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реализация КАК Реализация
	|		ПО ЗаписиПоСчету.Регистратор = Реализация.Ссылка
	|ГДЕ
	|	НЕ Реализация.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаписиПоСчету.Счет,
	|	ЗаписиПоСчету.Регистратор,
	|	ЗаписиПоСчету.Регистратор.Дата,
	|	ЗаписиПоСчету.Регистратор.Номер,
	|	РеализацияКорретировка.Номенклатура,
	|	РеализацияКорретировка.Содержание,
	|	РеализацияКорретировка.Количество,
	|	РеализацияКорретировка.Цена,
	|	РеализацияКорретировка.Сумма,
	|	РеализацияКорретировка.СтавкаНДС,
	|	РеализацияКорретировка.СуммаНДС,
	|	РеализацияКорретировка.Ссылка
	|ИЗ
	|	ЗаписиПоСчету КАК ЗаписиПоСчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеализацияКорретировка КАК РеализацияКорретировка
	|		ПО ЗаписиПоСчету.Регистратор = РеализацияКорретировка.Ссылка
	|ГДЕ
	|	НЕ РеализацияКорретировка.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("Заказ",Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Макет = Документы.CRM_СчетНаОплатуПокупателю.ПолучитьМакет("МакетОтгрузка");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ТабличныйДокументОтгрузка.Очистить();
	
	ТабличныйДокументОтгрузка.Вывести(ОбластьШапка);
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(РезультатЗапроса);
		
		ОбластьСтрока.Параметры.Всего = ?(Объект.ЦенаВключаетНДС,РезультатЗапроса.Сумма,РезультатЗапроса.Сумма+РезультатЗапроса.СуммаНДС);
		//ОбластьСтрока.Параметры.ДокументРасчетовПредставление = РезультатЗапроса.ДокументРасчетов.ВидДокумента;
		ОбластьСтрока.Параметры.ДокументРасчетовПредставление = РезультатЗапроса.ДокументРасчетов;
		ТабличныйДокументОтгрузка.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьВывестиДанныеПоОплате()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасчетыСПокупателями.Регистратор,
	               |	РасчетыСПокупателями.Документ,
	               |	ВЫБОР
	               |		КОГДА РасчетыСПокупателями.Заказ = ЗНАЧЕНИЕ(Документ.CRM_СчетНаОплатуПокупателю.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА РасчетыСПокупателями.Документ ССЫЛКА Документ.CRM_СчетНаОплатуПокупателю
	               |						ТОГДА РасчетыСПокупателями.Документ
	               |					ИНАЧЕ РасчетыСПокупателями.Документ.Заказ
	               |				КОНЕЦ
	               |		ИНАЧЕ РасчетыСПокупателями.Заказ
	               |	КОНЕЦ КАК Счет
	               |ПОМЕСТИТЬ ЗаписиПоСчету
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА РасчетыСПокупателями.Заказ = ЗНАЧЕНИЕ(Документ.CRM_СчетНаОплатуПокупателю.ПустаяСсылка)
	               |				ТОГДА ВЫБОР
	               |						КОГДА РасчетыСПокупателями.Документ ССЫЛКА Документ.CRM_СчетНаОплатуПокупателю
	               |							ТОГДА РасчетыСПокупателями.Документ
	               |						ИНАЧЕ РасчетыСПокупателями.Документ.Заказ
	               |					КОНЕЦ
	               |			ИНАЧЕ РасчетыСПокупателями.Заказ
	               |		КОНЕЦ = &Заказ
	               |	И РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |	И РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
	               |	РасчетыСПокупателями.Документ,
	               |	РасчетыСПокупателями.Регистратор,
	               |	ВЫБОР
	               |		КОГДА РасчетыСПокупателями.Заказ = ЗНАЧЕНИЕ(Документ.CRM_СчетНаОплатуПокупателю.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА РасчетыСПокупателями.Документ ССЫЛКА Документ.CRM_СчетНаОплатуПокупателю
	               |						ТОГДА РасчетыСПокупателями.Документ
	               |					ИНАЧЕ РасчетыСПокупателями.Документ.Заказ
	               |				КОНЕЦ
	               |		ИНАЧЕ РасчетыСПокупателями.Заказ
	               |	КОНЕЦ КАК Счет
	               |ИЗ
	               |	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА РасчетыСПокупателями.Заказ = ЗНАЧЕНИЕ(Документ.CRM_СчетНаОплатуПокупателю.ПустаяСсылка)
	               |				ТОГДА ВЫБОР
	               |						КОГДА РасчетыСПокупателями.Документ ССЫЛКА Документ.CRM_СчетНаОплатуПокупателю
	               |							ТОГДА РасчетыСПокупателями.Документ
	               |						ИНАЧЕ РасчетыСПокупателями.Регистратор.Заказ
	               |					КОНЕЦ
	               |			ИНАЧЕ РасчетыСПокупателями.Заказ
	               |		КОНЕЦ = &Заказ
	               |	И РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |	И РасчетыСПокупателями.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.Ссылка,
				   |	CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.Сумма,
				   |	CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.СтавкаНДС,
				   |	CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.СуммаНДС,
				   |	CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.Заказ,
				   |	CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.СчетНаОплату
				   |ПОМЕСТИТЬ Оплата
				   |ИЗ
				   |	Документ.CRM_ДокументРасчетовСКонтрагентом.РасшифровкаПлатежа КАК CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа
				   |ГДЕ
				   |	НЕ CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.Ссылка.ПометкаУдаления
				   |	И CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.Ссылка.Проведен
				   |	И (CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.ПБДСРасчетыСКонтрагентами)
				   |			ИЛИ CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.ПКОРасчетыСКонтрагентами))
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	CRM_ДокументРасчетовСКонтрагентомДебитор.Ссылка,
				   |	CRM_ДокументРасчетовСКонтрагентомДебитор.СуммаРасчетов,
				   |	0,
				   |	0,
				   |	CRM_ДокументРасчетовСКонтрагентомДебитор.Документ,
				   |	CRM_ДокументРасчетовСКонтрагентомДебитор.СчетНаОплату
				   |ИЗ
				   |	Документ.CRM_ДокументРасчетовСКонтрагентом.Дебитор КАК CRM_ДокументРасчетовСКонтрагентомДебитор
				   |ГДЕ
				   |	НЕ CRM_ДокументРасчетовСКонтрагентомДебитор.Ссылка.ПометкаУдаления
				   |	И CRM_ДокументРасчетовСКонтрагентомДебитор.Ссылка.Проведен
				   |	И CRM_ДокументРасчетовСКонтрагентомДебитор.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.КорректировкаДолга)
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ЗаписиПоСчету.Регистратор КАК ДокументРасчетов,
				   |	ЗаписиПоСчету.Регистратор.Дата КАК Дата,
				   |	ЗаписиПоСчету.Регистратор.Номер КАК Номер,
				   |	Оплата.Сумма,
				   |	Оплата.СтавкаНДС,
				   |	Оплата.СуммаНДС,
				   |	Оплата.Ссылка
				   |ИЗ
				   |	ЗаписиПоСчету КАК ЗаписиПоСчету
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Оплата КАК Оплата
				   |		ПО ЗаписиПоСчету.Регистратор = Оплата.Ссылка
				   |ГДЕ
				   |	НЕ Оплата.Ссылка ЕСТЬ NULL
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Дата";
	
	Запрос.УстановитьПараметр("Заказ",Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Макет = Документы.CRM_СчетНаОплатуПокупателю.ПолучитьМакет("МакетОплата");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ТабличныйДокументОплата.Очистить();
	
	ТабличныйДокументОплата.Вывести(ОбластьШапка);
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(РезультатЗапроса);
		
		//ОбластьСтрока.Параметры.ДокументРасчетовПредставление = РезультатЗапроса.ДокументРасчетов.ВидДокумента;
		ОбластьСтрока.Параметры.ДокументРасчетовПредставление = РезультатЗапроса.ДокументРасчетов;
		
		ТабличныйДокументОплата.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьВывестиДанныеПоАвансам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетыСПокупателямиОстатки.Документ КАК Регистратор,
	|	РасчетыСПокупателямиОстатки.Документ КАК Документ,
	|	РасчетыСПокупателямиОстатки.Заказ КАК Счет
	|ПОМЕСТИТЬ ЗаписиПоСчету
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
	|				И Заказ = &Заказ) КАК РасчетыСПокупателямиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.Ссылка,
	|	CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.Сумма,
	|	CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.СтавкаНДС,
	|	CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.СуммаНДС,
	|	CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.Заказ,
	|	CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.СчетНаОплату
	|ПОМЕСТИТЬ Оплата
	|ИЗ
	|	Документ.CRM_ДокументРасчетовСКонтрагентом.РасшифровкаПлатежа КАК CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа
	|ГДЕ
	|	НЕ CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.Ссылка.ПометкаУдаления
	|	И CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.Ссылка.Проведен
	|	И (CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.ПБДСРасчетыСКонтрагентами)
	|			ИЛИ CRM_ДокументРасчетовСКонтрагентомРасшифровкаПлатежа.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.CRM_ВидДокументаРасчетов.ПКОРасчетыСКонтрагентами))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиПоСчету.Регистратор КАК ДокументРасчетов,
	|	ЗаписиПоСчету.Регистратор.Дата КАК Дата,
	|	ЗаписиПоСчету.Регистратор.Номер КАК Номер,
	|	Оплата.Сумма,
	|	Оплата.СтавкаНДС,
	|	Оплата.СуммаНДС,
	|	Оплата.Ссылка
	|ИЗ
	|	ЗаписиПоСчету КАК ЗаписиПоСчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ Оплата КАК Оплата
	|		ПО ЗаписиПоСчету.Регистратор = Оплата.Ссылка
	|ГДЕ
	|	НЕ Оплата.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
				   
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",Объект.Партнер);
	Запрос.УстановитьПараметр("Заказ",Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Макет = Документы.CRM_СчетНаОплатуПокупателю.ПолучитьМакет("МакетОплата");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ТабличныйДокументАвансы.Очистить();
	
	ТабличныйДокументАвансы.Вывести(ОбластьШапка);
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(РезультатЗапроса);
		
		//ОбластьСтрока.Параметры.ДокументРасчетовПредставление = РезультатЗапроса.ДокументРасчетов.ВидДокумента;
		ОбластьСтрока.Параметры.ДокументРасчетовПредставление = РезультатЗапроса.ДокументРасчетов;
		
		ТабличныйДокументАвансы.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти
