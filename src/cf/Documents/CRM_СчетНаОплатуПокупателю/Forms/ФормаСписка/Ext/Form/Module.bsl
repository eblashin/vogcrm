
#Область ПроцедурыИФункцииОбщегоНазначения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиентеНаСервереБезКонтекста
// Функция возвращает ограничения типов списка.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	ОписаниеТипов	- Ограничения типов списка.
//
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка()
	Возврат Новый ОписаниеТипов("ДокументСсылка.CRM_СчетНаОплатуПокупателю");
КонецФункции // НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка()

&НаСервере
// Процедура заполняет панель информации.
//
// Параметры:
//	Счет	- ДокументСсылка	- Счет.
//
Процедура ЗаполнитьПанельИнформации(Счет)
	Если Счет = Неопределено Тогда Возврат КонецЕсли;
	// Поле отображения содержания.
	Если ТипЗнч(Счет) = Тип("ДокументСсылка.CRM_СчетНаОплатуПокупателю") Тогда
		Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(Счет, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
		Если Содержание <> ПолеОтображениеСодержания Тогда
			ПолеОтображениеСодержания = Содержание;
		КонецЕсли;
	Иначе
		Содержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
		Если Содержание <> ПолеОтображениеСодержания Тогда
			ПолеОтображениеСодержания = Содержание;
		КонецЕсли;
	КонецЕсли;
	// +CRM
	ТекБанковскийСчет	= Счет.БанковскийСчет;
	ТекКонтрагент		= Счет.Партнер;
	// -CRM	
КонецПроцедуры // ЗаполнитьПанельИнформации()

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПриНажатии" поля ввода "ПолеСодержание".
//
Процедура ПолеСодержаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	// Поле отображения содержания.
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия,
		СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
КонецПроцедуры // ПолеСодержаниеПриНажатии()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "Список".
//
Процедура СписокПриАктивизацииСтроки(Элемент)
	ЗаполнитьПанельИнформации(Элементы.Список.ТекущаяСтрока);
КонецПроцедуры // СписокПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборКонтрагент".
//
Процедура ОтборКонтрагентПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер", ОтборКонтрагент, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер");
	КонецЕсли;
	ОтборПоОплате	= ?(ОтборОплата = "Все",	"",	ОтборОплата);
	ОтборПоОтгрузке	= ?(ОтборОтгрузка = "Все",	"",	ОтборОтгрузка);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборКонтрагент, ОтборПоОплате, ОтборПоОтгрузке, ОтборОтветственный);
КонецПроцедуры // ОтборКонтрагентПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборОплата".
//
Процедура ОтборОплатаПриИзменении(Элемент)
	Если ОтборОплата = "Оплаченные" Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОтгрузки", 0, Истина, ВидСравненияКомпоновкиДанных.Больше);
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОстатокОплата", 0, Истина);
	ИначеЕсли ОтборОплата = "Неоплаченные" Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОтгрузки", 0, Истина, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОстатокОплата", 0, Истина, ВидСравненияКомпоновкиДанных.Больше);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОтгрузки");
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОстатокОплата");	
	КонецЕсли;
	ОтборПоОплате	= ?(ОтборОплата = "Все",	"",	ОтборОплата);
	ОтборПоОтгрузке	= ?(ОтборОтгрузка = "Все",	"",	ОтборОтгрузка);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборКонтрагент, ОтборПоОплате, ОтборПоОтгрузке, ОтборОтветственный);
КонецПроцедуры // ОтборОплатаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Очистка" элемента формы "ОтборОплата".
//
Процедура ОтборОплатаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОтборОплата = "Все";	
	ОтборОплатаПриИзменении(Элемент);	
КонецПроцедуры // ОтборОплатаОчистка()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборОтгрузка".
//
Процедура ОтборОтгрузкаПриИзменении(Элемент)
	Если ОтборОтгрузка = "Отгруженные" Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОстатокОтгрузка", 0, Истина);
	ИначеЕсли ОтборОтгрузка = "Неотгруженные" Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОстатокОтгрузка", 0, Истина, ВидСравненияКомпоновкиДанных.Больше);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОстатокОтгрузка");
	КонецЕсли;
	ОтборПоОплате	= ?(ОтборОплата = "Все",	"",	ОтборОплата);
	ОтборПоОтгрузке	= ?(ОтборОтгрузка = "Все",	"",	ОтборОтгрузка);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборКонтрагент, ОтборПоОплате, ОтборПоОтгрузке, ОтборОтветственный);
КонецПроцедуры // ОтборОтгрузкаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Очистка" элемента формы "ОтборОтгрузка".
//
Процедура ОтборОтгрузкаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОтборОтгрузка = "Все";	
	ОтборОтгрузкаПриИзменении(Элемент);
КонецПроцедуры // ОтборОтгрузкаОчистка()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборОтветственный".
//
Процедура ОтборОтветственныйПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборОтветственный) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ответственный", ОтборОтветственный, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ответственный");			
	КонецЕсли;	
	ОтборПоОплате	= ?(ОтборОплата = "Все",	"",	ОтборОплата);
	ОтборПоОтгрузке	= ?(ОтборОтгрузка = "Все",	"",	ОтборОтгрузка);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборКонтрагент, ОтборПоОплате, ОтборПоОтгрузке, ОтборОтветственный);
КонецПроцедуры // ОтборОтветственныйПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыСегодня".
//
Процедура ОтборСозданыСегодняНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Сегодня", Элемент);
КонецПроцедуры // ОтборСозданыСегодняНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗа3Дня".
//
Процедура ОтборСозданыЗа3ДняНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "3 дня", Элемент);
КонецПроцедуры // ОтборСозданыЗа3ДняНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗаНеделю".
//
Процедура ОтборСозданыЗаНеделюНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Неделя", Элемент);
КонецПроцедуры // ОтборСозданыЗаНеделюНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗаМесяц".
//
Процедура ОтборСозданыЗаМесяцНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Месяц", Элемент);
КонецПроцедуры // ОтборСозданыЗаМесяцНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыПроизвольныйПериод".
//
Процедура ОтборСозданыПроизвольныйПериодПриИзменении(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "ПроизвольныйПериод", Элемент);
КонецПроцедуры // ОтборСозданыПроизвольныйПериодПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборПериодОчистить".
//
Процедура ОтборПериодОчиститьНажатие(Элемент)
	CRM_ТегиКлиент.ОчиститьОтборНажатие(ЭтотОбъект, "Список");
КонецПроцедуры // ОтборПериодОчиститьНажатие()

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ ДОКУМЕНТА

&НаКлиенте
// Процедура - обработчик команды "БыстрыеОтборы".
//
Процедура БыстрыеОтборы(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Истина;	
КонецПроцедуры // БыстрыеОтборы()

&НаКлиенте
// Процедура - обработчик команды "ОтборПериод".
//
Процедура ОтборПериод(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;	
КонецПроцедуры // ОтборПериод()

&НаКлиенте
// Процедура - обработчик команды "СкрытьДопИнформацию".
//
Процедура СкрытьДопИнформацию(Команда)
	Элементы.СписокСкрытьДопИнформацию.Пометка	= НЕ Элементы.СписокСкрытьДопИнформацию.Пометка;
	ПометкаПоказатьСкрытьДопИнформацию			= Элементы.СписокСкрытьДопИнформацию.Пометка;
	Элементы.ГруппаПанельИнформации.Видимость	= ПометкаПоказатьСкрытьДопИнформацию;
КонецПроцедуры // СкрытьДопИнформацию()

#КонецОбласти

#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	CRM_Теги.ОбновитьЗначенияОтбораПериодов(ЭтотОбъект);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	// Перейдем сразу на вкладку отборов "Быстрые отборы" и оставим ее в свернутом режиме.
	Элементы.ПанельЗначенийОтбора.Видимость			= Истина;
	Элементы.ПанельЗначенийОтбора.ТекущаяСтраница	= Элементы.ЗначенияОтбораБыстрыеОтборы;	
	БыстрыеОтборы(Элементы.БыстрыеОтборы);
	ОтборПоОплате	= ?(ОтборОплата = "Все",	"",	ОтборОплата);
	ОтборПоОтгрузке	= ?(ОтборОтгрузка = "Все",	"",	ОтборОтгрузка);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборКонтрагент, ОтборПоОплате, ОтборПоОтгрузке, ОтборОтветственный);
КонецПроцедуры // ПриОткрытии()

&НаСервере
// Процедура - обработчик события формы "ПриСохраненииДанныхВНастройкахНаСервере".
//
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	Настройки.Вставить("ПометкаПоказатьСкрытьДопИнформациюСчетНаОплатуПокупателю", ПометкаПоказатьСкрытьДопИнформацию);
КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

&НаСервере
// Процедура - обработчик события формы "ПриЗагрузкеДанныхИзНастроекНаСервере".
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ОтборКонтрагент = Настройки.Получить("ОтборКонтрагент");
	Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда		
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер", ОтборКонтрагент, Истина);		
	Иначе			
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер");		
	КонецЕсли;
	ОтборОплата = Настройки.Получить("ОтборОплата");
	Если ПустаяСтрока(ОтборОплата) Тогда
		ОтборОплата = "Все";
	КонецЕсли;
	Если ОтборОплата = "Оплаченные" Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОтгрузки", 0, Истина, ВидСравненияКомпоновкиДанных.Больше);
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОстатокОплата", 0, Истина);
	ИначеЕсли ОтборОплата = "Неоплаченные" Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОтгрузки", 0, Истина, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОстатокОплата", 0, Истина, ВидСравненияКомпоновкиДанных.Больше);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОтгрузки");
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОстатокОплата");	
	КонецЕсли;
	ОтборОтгрузка = Настройки.Получить("ОтборОтгрузка");
	Если ПустаяСтрока(ОтборОтгрузка) Тогда
		ОтборОтгрузка = "Все";	
	КонецЕсли;
	Если ОтборОтгрузка = "Отгруженные" Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОстатокОтгрузка", 0, Истина);
	ИначеЕсли ОтборОтгрузка = "Неотгруженные" Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОстатокОтгрузка", 0, Истина, ВидСравненияКомпоновкиДанных.Больше);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "СуммаОстатокОтгрузка");
	КонецЕсли;
	ОтборОтветственный = Настройки.Получить("ОтборОтветственный");
	Если ЗначениеЗаполнено(ОтборОтветственный) Тогда		
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ответственный", ОтборОтветственный, Истина);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ответственный");
	КонецЕсли;	
	// +CRM
	ПоказатьСкрытьДопИнформацию = Настройки.Получить("ПометкаПоказатьСкрытьДопИнформациюСчетНаОплатуПокупателю");
	Если НЕ ПоказатьСкрытьДопИнформацию = Неопределено Тогда
		ПометкаПоказатьСкрытьДопИнформацию	= Настройки["ПометкаПоказатьСкрытьДопИнформациюСчетНаОплатуПокупателю"];
	КонецЕсли;
	Элементы.СписокСкрытьДопИнформацию.Пометка		= ПометкаПоказатьСкрытьДопИнформацию;
	Элементы.ГруппаПанельИнформации.Видимость		= ПометкаПоказатьСкрытьДопИнформацию;
	// -CRM
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
