#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПродажи(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродажи.Период КАК Период,
	|	ТаблицаПродажи.Организация КАК Организация,
	|	ТаблицаПродажи.Подразделение КАК Подразделение,
	|	ТаблицаПродажи.Ответственный КАК Менеджер,
	|	ТаблицаПродажи.Партнер КАК Партнер,
	|	ТаблицаПродажи.Договор КАК ДоговорКонтрагента,
	|	ТаблицаПродажи.Номенклатура КАК Номенклатура,
	|	ТаблицаПродажи.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	ТаблицаПродажи.Проект КАК Проект,
	|	ТаблицаПродажи.Документ КАК ДокументПродажи,
	|	СУММА(ТаблицаПродажи.Количество) КАК Количество,
	|	СУММА(ТаблицаПродажи.СуммаНДСПродажи) КАК НДС,
	|	СУММА(ТаблицаПродажи.Сумма) КАК Стоимость,
	|	СУММА(ТаблицаПродажи.СуммаБезСкидок) КАК СтоимостьБезСкидок,
	|	СУММА(ТаблицаПродажи.ВесПозиции * ТаблицаПродажи.Количество) КАК ВесПозиции,
	|	0 КАК Себестоимость
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаПродажи
	|
	|ГДЕ
	|	ТаблицаПродажи.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродажи.Период,
	|	ТаблицаПродажи.Организация,
	|	ТаблицаПродажи.Подразделение,
	|	ТаблицаПродажи.Ответственный,
	|	ТаблицаПродажи.Партнер,
	|	ТаблицаПродажи.Договор,
	|	ТаблицаПродажи.Номенклатура,
	|	ТаблицаПродажи.ХарактеристикаНоменклатуры,
	|	ТаблицаПродажи.Проект,
	|	ТаблицаПродажи.Документ";
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПродажи", РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // СформироватьТаблицаПродажи()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасчетыСПокупателями(ДокументСсылкаРасходнаяНакладная, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаДокумента.ВидДвижения КАК ВидДвижения,
	|	ТаблицаДокумента.ТипРасчетов КАК ТипРасчетов,
	|	ТаблицаДокумента.Период КАК Период,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Партнер КАК Контрагент,
	|	ТаблицаДокумента.Документ КАК Документ,
	|	ТаблицаДокумента.Документ КАК Заказ,
	|	СУММА(ТаблицаДокумента.Сумма) КАК Сумма,
	|	СУММА(ТаблицаДокумента.СуммаВал) КАК СуммаВал
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ТипРасчетов,
	|	ТаблицаДокумента.ВидДвижения,
	|	ТаблицаДокумента.Период,
	|	ТаблицаДокумента.Документ,
	|	ТаблицаДокумента.Документ,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Партнер";
	
	ТабРез = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПокупателями", ТабРез);
	
КонецПроцедуры

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг) КАК ТипРасчетов,
	|	СчетНаОплатуОтгрузка.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуОтгрузка.Ссылка КАК Документ,
	|	СчетНаОплатуОтгрузка.Ссылка.Проект КАК Проект,
	|	СчетНаОплатуОтгрузка.Ссылка.Ответственный КАК Ответственный,
	|	СчетНаОплатуОтгрузка.Ссылка.Подразделение КАК Подразделение,
	|	СчетНаОплатуОтгрузка.Ссылка.Партнер КАК Партнер,
	|	СчетНаОплатуОтгрузка.Ссылка.Договор КАК Договор,
	|	СчетНаОплатуОтгрузка.ДатаОтгрузки КАК Период,
	|	&Организация КАК Организация,
	|	СчетНаОплатуОтгрузка.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(CRM_ВесаПозицийНоменклатуры.ВесПозиции, 0) КАК ВесПозиции,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СчетНаОплатуОтгрузка.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуОтгрузка.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СчетНаОплатуОтгрузка.Количество
	|		ИНАЧЕ СчетНаОплатуОтгрузка.Количество * СчетНаОплатуОтгрузка.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	СчетНаОплатуОтгрузка.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ВЫРАЗИТЬ(СчетНаОплатуОтгрузка.СуммаНДС * СчетНаОплатуОтгрузка.Курс * КурсыУпрВалюты.Кратность / КурсыУпрВалюты.Курс * СчетНаОплатуОтгрузка.Кратность КАК ЧИСЛО(15, 2)) КАК СуммаНДСПродажи,
	|	ВЫРАЗИТЬ(СчетНаОплатуОтгрузка.Всего * СчетНаОплатуОтгрузка.Курс * КурсыУпрВалюты.Кратность / КурсыУпрВалюты.Курс * СчетНаОплатуОтгрузка.Кратность КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ((СчетНаОплатуОтгрузка.Цена * ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(СчетНаОплатуОтгрузка.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА СчетНаОплатуОтгрузка.Количество
	|			ИНАЧЕ СчетНаОплатуОтгрузка.Количество * СчетНаОплатуОтгрузка.ЕдиницаИзмерения.Коэффициент
	|		КОНЕЦ + ВЫБОР
	|			КОГДА СчетНаОплатуОтгрузка.Ссылка.ЦенаВключаетНДС
	|				ТОГДА 0
	|			ИНАЧЕ СчетНаОплатуОтгрузка.СуммаНДС
	|		КОНЕЦ) * СчетНаОплатуОтгрузка.Курс * КурсыУпрВалюты.Кратность / КурсыУпрВалюты.Курс * СчетНаОплатуОтгрузка.Кратность КАК ЧИСЛО(15, 2)) КАК СуммаБезСкидок,
	|	0 КАК СуммаНДСВал,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА СчетНаОплатуОтгрузка.Ссылка.Валюта = &ВалютаРегламентированногоУчета
	|				ТОГДА СчетНаОплатуОтгрузка.Всего * КурсыРегВалюты.Курс * СчетНаОплатуОтгрузка.Кратность / (СчетНаОплатуОтгрузка.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ СчетНаОплатуОтгрузка.Всего
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВал,
	|	СчетНаОплатуОтгрузка.Всего КАК СуммаРасчетовОтгрузкаОплата,
	|	СчетНаОплатуОтгрузка.Ссылка.Договор.ВалютаРасчетов КАК ВалютаРасчетов
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	Документ.CRM_СчетНаОплатуПокупателю.Отгрузка КАК СчетНаОплатуОтгрузка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУправленческогоУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта = &ВалютаРегламентированногоУчета) КАК КурсыРегВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ВесаПозицийНоменклатуры.СрезПоследних(&МоментВремени) КАК CRM_ВесаПозицийНоменклатуры
	|		ПО	СчетНаОплатуОтгрузка.Номенклатура = CRM_ВесаПозицийНоменклатуры.Номенклатура
	|ГДЕ
	|	СчетНаОплатуОтгрузка.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг),
	|	СчетНаОплатуОплата.НомерСтроки,
	|	СчетНаОплатуОплата.Ссылка,
	|	СчетНаОплатуОплата.Ссылка.Проект,
	|	СчетНаОплатуОплата.Ссылка.Ответственный,
	|	СчетНаОплатуОплата.Ссылка.Подразделение,
	|	СчетНаОплатуОплата.Ссылка.Партнер,
	|	СчетНаОплатуОплата.Ссылка.Договор,
	|	СчетНаОплатуОплата.ДатаОплаты,
	|	&Организация,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ВЫРАЗИТЬ(СчетНаОплатуОплата.Сумма * СчетНаОплатуОплата.Курс * КурсыУпрВалюты.Кратность / КурсыУпрВалюты.Курс * СчетНаОплатуОплата.Кратность КАК ЧИСЛО(15, 2)),
	|	NULL,
	|	NULL,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА СчетНаОплатуОплата.Ссылка.Валюта = &ВалютаРегламентированногоУчета
	|				ТОГДА СчетНаОплатуОплата.Сумма * КурсыРегВалюты.Курс * СчетНаОплатуОплата.Кратность / (СчетНаОплатуОплата.Курс * КурсыРегВалюты.Кратность)
	|			ИНАЧЕ СчетНаОплатуОплата.Сумма
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	СчетНаОплатуОплата.Сумма,
	|	СчетНаОплатуОплата.Ссылка.Договор.ВалютаРасчетов
	|ИЗ
	|	Документ.CRM_СчетНаОплатуПокупателю.Оплата КАК СчетНаОплатуОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|				&МоментВремени,
	|				Валюта В
	|					(ВЫБРАТЬ
	|						Константы.ВалютаУправленческогоУчета
	|					ИЗ
	|						Константы КАК Константы)) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&МоментВремени, Валюта = &ВалютаРегламентированногоУчета) КАК КурсыРегВалюты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СчетНаОплатуОплата.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Организация", СтруктураДополнительныеСвойства.ДляПроведения.Организация);
	Запрос.УстановитьПараметр("МоментВремени", СтруктураДополнительныеСвойства.ДляПроведения.МоментВремени);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", СтруктураДополнительныеСвойства.УчетнаяПолитика.ИспользоватьХарактеристики);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.ВыполнитьПакет();
	
	СформироватьТаблицаПродажи(ДокументСсылка, СтруктураДополнительныеСвойства);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда//И ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОбменЧерезУниверсальныйФормат") Тогда
	Иначе
		СформироватьТаблицаРасчетыСПокупателями(ДокументСсылка, СтруктураДополнительныеСвойства);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

/////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПЕЧАТИ

// Процедура печати документа.
//
Функция ПечатьСчетаЗаказ(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИмяМакета = "ПФ_MXL_Счет";
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Ссылка,
	|	СчетНаОплату.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	СчетНаОплату.Валюта КАК ВалютаДокумента,
	|	СчетНаОплату.Дата КАК ДатаДокумента,
	|	СчетНаОплату.БанковскийСчет КАК БанковскийСчет,
	|	СчетНаОплату.Партнер КАК Партнер,
	|	СчетНаОплату.Организация КАК Организация,
	|	СчетНаОплату.Запасы.(
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА СчетНаОплату.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплату.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК Запас,
	|		Номенклатура.Артикул КАК Артикул,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СуммаНДС КАК СуммаНДС,
	|		Количество КАК Количество,
	|		Характеристика,
	|		Содержание,
	|		ПроцентРучнойСкидки
	|	)
	|ИЗ
	|	Документ.CRM_СчетНаОплатуПокупателю КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыборкаСтрокЗапасы = Шапка.Запасы.Выбрать();
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетНаОплату_СчетЗаказ";
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.CRM_СчетНаОплатуПокупателю.ПФ_MXL_Счет");
		
		СведенияОбОрганизации = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента, ,Шапка.БанковскийСчет);
		СведенияОбКонтрагенте = CRM_ОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Партнер, Шапка.ДатаДокумента, ,);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		Если ЗначениеЗаполнено(СведенияОбОрганизации.Банк) Тогда
			ОбластьМакета.Параметры.БанкПолучателяПредставление = СведенияОбОрганизации.Банк.Наименование;
		КонецЕсли; 
		ОбластьМакета.Параметры.ИНН = СведенияОбОрганизации.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОбОрганизации.КПП;
		ОбластьМакета.Параметры.ПредставлениеПоставщика = СведенияОбОрганизации.ПолноеНаименование;
		ОбластьМакета.Параметры.БИКБанкаПолучателя = СведенияОбОрганизации.БИК;
		ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = СведенияОбОрганизации.КоррСчет;
		ОбластьМакета.Параметры.СчетПолучателяПредставление = СведенияОбОрганизации.НомерСчета;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ФлагУдалитьПрефикс = Константы.CRM_ПечататьНомераДокументовБезПрефиксов.Получить();
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Ссылка.Номер, ФлагУдалитьПрефикс, ФлагУдалитьПрефикс);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                            						НСтр("ru = 'Счет на оплату №%1 от %2'"),
                            						НомерДокумента,
													Формат(Шапка.ДатаДокумента, "ДФ=""dd MMMM yyyy"""));
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = CRM_ОбщегоНазначенияСервер.ОписаниеОрганизации(СведенияОбКонтрагенте, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ФлагЕстьСкидки = Ложь;
		Пока ВыборкаСтрокЗапасы.Следующий() Цикл
			Если ВыборкаСтрокЗапасы.ПроцентРучнойСкидки <> 0 Тогда
				ФлагЕстьСкидки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ВыборкаСтрокЗапасы.Сбросить();
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы"+?(ФлагЕстьСкидки, "Скидки", ""));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Строка"+?(ФлагЕстьСкидки, "Скидки", ""));
		
		Сумма				= 0;
		СуммаНДС			= 0;
		Количество			= 0;
		ИтогСуммаСкидки		= 0;
		ИтогСуммаБезСкидки	= 0;
		
		Пока ВыборкаСтрокЗапасы.Следующий() Цикл
			
			Количество = Количество + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
			ОбластьМакета.Параметры.НомерСтроки = Количество;
			
			Если ФлагЕстьСкидки Тогда
				Если ВыборкаСтрокЗапасы.ПроцентРучнойСкидки = 0 Тогда
					СуммаСкидки = 0;
					СуммаБезСкидки = ВыборкаСтрокЗапасы.Сумма;
				Иначе
					СуммаБезСкидки = ВыборкаСтрокЗапасы.Цена * ВыборкаСтрокЗапасы.Количество;
					СуммаСкидки = СуммаБезСкидки - ВыборкаСтрокЗапасы.Сумма;
				КонецЕсли;
				ОбластьМакета.Параметры.СуммаСкидки = СуммаСкидки;
				ОбластьМакета.Параметры.СуммаБезСкидки = СуммаБезСкидки;
			    ИтогСуммаСкидки		= ИтогСуммаСкидки		+ СуммаСкидки;
				ИтогСуммаБезСкидки	= ИтогСуммаБезСкидки	+ СуммаБезСкидки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
				ОбластьМакета.Параметры.Запас = ВыборкаСтрокЗапасы.Содержание;
			Иначе
				ОбластьМакета.Параметры.Запас = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.Запас, 
																	ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул);
			КонецЕсли;
						
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма = Сумма + ВыборкаСтрокЗапасы.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокЗапасы.СуммаНДС;
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого"+?(ФлагЕстьСкидки, "Скидки", ""));
		ОбластьМакета.Параметры.Всего				= CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(Сумма);
		Если ФлагЕстьСкидки Тогда
			ОбластьМакета.Параметры.ИтогСуммаСкидки		= CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ИтогСуммаСкидки);
			ОбластьМакета.Параметры.ИтогСуммаБезСкидки	= CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(ИтогСуммаБезСкидки);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		Если СуммаНДС = 0 Тогда
			ОбластьМакета.Параметры.НДС = НСтр("ru = 'Без налога (НДС)'");
			ОбластьМакета.Параметры.ВсегоНДС = "-";
		Иначе
			ОбластьМакета.Параметры.НДС = ?(Шапка.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС:'"), НСтр("ru = 'Сумма НДС:'"));
			ОбластьМакета.Параметры.ВсегоНДС = CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаНДС);
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Попытка  // Для совместимости с пользовательскими шаблонами предыдущих версий.
			ОбластьМакета = Макет.ПолучитьОбласть("ВсегоКОплате");
			ОбластьМакета.Параметры.ВсегоКОплате = CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(Сумма + ?(Шапка.ЦенаВключаетНДС, 0, СуммаНДС));
			ТабличныйДокумент.Вывести(ОбластьМакета);
		Исключение
		КонецПопытки;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.ЦенаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
                            						НСтр("ru = 'Всего наименований %1, на сумму %2'"),
                            						Строка(Количество),
													CRM_ОбщегоНазначенияКлиентСервер.ФорматСумм(СуммаКПрописи,	Шапка.ВалютаДокумента));
																						
		ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи,
																								Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
		
		Руководители = CRM_ОбщегоНазначенияСервер.ОтветственныеЛицаОрганизационнойЕдиницы(Шапка.Организация, Шапка.ДатаДокумента);

		ОбластьМакета.Параметры.ФИОРуководителя = Руководители.ФИОРуководителя;
		ОбластьМакета.Параметры.ФИОБухгалтера   = Руководители.ФИОГлавногоБухгалтера;
	
		ТабличныйДокумент.Вывести(ОбластьМакета);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатнаяФорма()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, 
	КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетНаОплату") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетНаОплату", НСтр("ru = 'Счет на оплату'"), ПечатьСчетаЗаказ(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Результат = Новый Массив;
	Если ЗначениеЗаполнено(Ссылка.КонтактноеЛицо) Тогда
		Результат.Добавить(Ссылка.КонтактноеЛицо);
	ИначеЕсли ЗначениеЗаполнено(Ссылка.Партнер) Тогда
		Результат.Добавить(Ссылка.Партнер);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "CRM_УправлениеПечатьюКлиент.CRM_ПечатьСчетаНаОплату";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "СчетНаОплату";
	КомандаПечати.Представление = НСтр("ru = 'Счет на оплату'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры
