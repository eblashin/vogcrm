#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПолучитьКонтактноеЛицоКлиента(Клиент)
	
	Если ЗначениеЗаполнено(Клиент.CRM_ОсновноеКонтактноеЛицо) Тогда
		Возврат Клиент.CRM_ОсновноеКонтактноеЛицо;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтактныеЛицаПартнеров.Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец",Клиент);
		ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		Возврат ВыборкаИзРезультатаЗапроса.Ссылка;
	КонецЕсли;
	
КонецФункции

#Область ОбработчикиСобытий

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьШапкуДокумента(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ЗначениеЗаполнено(Проект) Тогда
		Если ЗначениеЗаполнено(Проект.CRM_Партнер) И Не ЗначениеЗаполнено(Партнер) Тогда
			Партнер = Проект.CRM_Партнер;
			КонтактноеЛицо = Проект.CRM_КонтактноеЛицоПартнера;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		
		ЗаполнитьПоКоммерческомуПредложениюКлиенту(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		
		ЗаполнитьПоИнтересу(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс")
	ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
	
		Если ТипЗнч(ДанныеЗаполнения) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
			CRM_ОбщегоНазначенияСервер.ЗаполнитьОбъектБизнесПроцесса(ЭтотОбъект, ДанныеЗаполнения);
		Иначе
			CRM_ОбщегоНазначенияСервер.ЗаполнитьОбъектБизнесПроцесса(ЭтотОбъект, ДанныеЗаполнения.БизнесПроцесс, ДанныеЗаполнения);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		
		ЗаполнитьПоИсходящемуПисьму(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		ЗаполнитьПоВходящемуПисьму(ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) И ЗначениеЗаполнено(Партнер) Тогда
		КонтактноеЛицо = ПолучитьКонтактноеЛицоКлиента(Партнер);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)

	// Заполним автора и ответственного.
	CRM_ОбщегоНазначенияСервер.ЗаполнитьАвтораИОтветственного(ЭтотОбъект);
	
	ДокументОснование = Неопределено;
	
	СуммаОплаты = 0;
	СуммаОстатокОплата = 0;
	СуммаОстатокОтгрузка = 0;
	СуммаОтгрузки = 0;
	
	Отгрузка.Очистить();
	Оплата.Очистить();
	
	Для Каждого СтрокаЗапасов Из Запасы Цикл
		СтрокаЗапасов.ОсталосьОтгрузить	= СтрокаЗапасов.Количество;
		СтрокаЗапасов.Отгружено			= 0;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	CRM_ОбщегоНазначенияСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.CRM_СчетНаОплатуПокупателю.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	CRM_ОбщегоНазначенияСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	CRM_ОбщегоНазначенияСервер.ОтразитьПродажи(ДополнительныеСвойства, Движения, Отказ);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда//И ПолучитьФункциональнуюОпцию("CRM_ИспользоватьОбменЧерезУниверсальныйФормат") Тогда
	Иначе
		CRM_ОбщегоНазначенияСервер.ОтразитьРасчетыСПокупателями(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	// Запись наборов записей.
	CRM_ОбщегоНазначенияСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа.
	CRM_ОбщегоНазначенияСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	CRM_ОбщегоНазначенияСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	CRM_ОбщегоНазначенияСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Ссылка.ПометкаУдаления<>ПометкаУдаления И ПометкаУдаления = Ложь Тогда
		РежимЗаписи =  РежимЗаписиДокумента.Проведение;
	ИначеЕсли Ссылка.ПометкаУдаления<>ПометкаУдаления И ПометкаУдаления = Истина Тогда
		// Тогда надо скорректировать записи регистра сведений CRM_ЗагруженныеОборотыПоВзаиморасчетам.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Отгрузка.ИдентификаторДокумента,
		               |	Отгрузка.ИдентификаторКорДокумента,
		               |	Отгрузка.Организация,
		               |	Отгрузка.Контрагент,
		               |	Отгрузка.ДоговорКонтрагента,
		               |	Отгрузка.ВидыДвиженийПриходРасход,
		               |	Отгрузка.Загружено,
		               |	Отгрузка.Дата,
		               |	Отгрузка.Номер,
		               |	Отгрузка.СуммаДокумента,
		               |	Отгрузка.ВалютаДокумента,
		               |	Отгрузка.КурсВзаиморасчетов,
		               |	Отгрузка.КратностьВзаиморасчетов,
		               |	Отгрузка.ПредставлениеДокумента,
		               |	Отгрузка.ПредставлениеКорДокумента,
		               |	Отгрузка.СделкаСКлиентом,
		               |	Отгрузка.АвансКЗачету,
		               |	ЗНАЧЕНИЕ(Документ.CRM_СчетНаОплатуПокупателю.ПустаяСсылка) КАК АвансСделкаСКлиентом,
		               |	0 КАК АвансСуммаДокумента,
		               |	&ПустаяДата КАК АвансДата,
		               |	"""" КАК АвансНомер,
		               |	"""" КАК АвансПредставлениеДокумента,
		               |	""Отгрузка"" КАК ВидДвижения
		               |ИЗ
		               |	РегистрСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам КАК Отгрузка
		               |ГДЕ
		               |	Отгрузка.СделкаСКлиентом = &СделкаСКлиентом
		               |	И Отгрузка.ВидыДвиженийПриходРасход = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыДвиженийПриходРасход.Приход)
		               |	И Отгрузка.Загружено
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	Авансы.ИдентификаторДокумента,
		               |	Авансы.ИдентификаторКорДокумента,
		               |	Авансы.Организация,
		               |	Авансы.Контрагент,
		               |	Авансы.ДоговорКонтрагента,
		               |	Авансы.ВидыДвиженийПриходРасход,
		               |	Авансы.Загружено,
		               |	Авансы.Дата,
		               |	Авансы.Номер,
		               |	Авансы.СуммаДокумента,
		               |	Авансы.ВалютаДокумента,
		               |	Авансы.КурсВзаиморасчетов,
		               |	Авансы.КратностьВзаиморасчетов,
		               |	Авансы.ПредставлениеДокумента,
		               |	Авансы.ПредставлениеКорДокумента,
		               |	Авансы.СделкаСКлиентом,
		               |	Авансы.АвансКЗачету,
		               |	ЗНАЧЕНИЕ(Документ.CRM_СчетНаОплатуПокупателю.ПустаяСсылка),
		               |	0,
		               |	&ПустаяДата,
		               |	"""",
		               |	"""",
		               |	""Аванс""
		               |ИЗ
		               |	РегистрСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам КАК Авансы
		               |ГДЕ
		               |	Авансы.СделкаСКлиентом = &СделкаСКлиентом
		               |	И Авансы.Загружено
		               |	И Авансы.ВидыДвиженийПриходРасход = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыДвиженийПриходРасход.Расход)
		               |	И НЕ Авансы.ИдентификаторДокумента = ""*""
		               |	И Авансы.ИдентификаторКорДокумента = ""*""
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	Оплата.ИдентификаторДокумента,
		               |	Оплата.ИдентификаторКорДокумента,
		               |	Оплата.Организация,
		               |	Оплата.Контрагент,
		               |	Оплата.ДоговорКонтрагента,
		               |	Оплата.ВидыДвиженийПриходРасход,
		               |	Оплата.Загружено,
		               |	Оплата.Дата,
		               |	Оплата.Номер,
		               |	Оплата.СуммаДокумента,
		               |	Оплата.ВалютаДокумента,
		               |	Оплата.КурсВзаиморасчетов,
		               |	Оплата.КратностьВзаиморасчетов,
		               |	Оплата.ПредставлениеДокумента,
		               |	Оплата.ПредставлениеКорДокумента,
		               |	Оплата.СделкаСКлиентом,
		               |	Оплата.АвансКЗачету,
		               |	ЕСТЬNULL(ВсеАвансы.СделкаСКлиентом, ЗНАЧЕНИЕ(Документ.CRM_СчетНаОплатуПокупателю.ПустаяСсылка)),
		               |	ЕСТЬNULL(ВсеАвансы.СуммаДокумента, 0),
		               |	ЕСТЬNULL(ВсеАвансы.Дата, &ПустаяДата),
		               |	ЕСТЬNULL(ВсеАвансы.Номер, """"),
		               |	ЕСТЬNULL(ВсеАвансы.ПредставлениеДокумента, """"),
		               |	""Оплата""
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента КАК ИдентификаторДокумента,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторКорДокумента КАК ИдентификаторКорДокумента,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.Организация КАК Организация,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.Контрагент КАК Контрагент,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.ДоговорКонтрагента КАК ДоговорКонтрагента,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВидыДвиженийПриходРасход КАК ВидыДвиженийПриходРасход,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.Загружено КАК Загружено,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.Дата КАК Дата,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.Номер КАК Номер,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.СуммаДокумента КАК СуммаДокумента,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВалютаДокумента КАК ВалютаДокумента,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.ПредставлениеДокумента КАК ПредставлениеДокумента,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.ПредставлениеКорДокумента КАК ПредставлениеКорДокумента,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.СделкаСКлиентом КАК СделкаСКлиентом,
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.АвансКЗачету КАК АвансКЗачету
		               |	ИЗ
		               |		РегистрСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам КАК CRM_ЗагруженныеОборотыПоВзаиморасчетам
		               |	ГДЕ
		               |		CRM_ЗагруженныеОборотыПоВзаиморасчетам.СделкаСКлиентом = &СделкаСКлиентом
		               |		И CRM_ЗагруженныеОборотыПоВзаиморасчетам.Загружено
		               |		И НЕ CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента = ""*""
		               |		И НЕ CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторКорДокумента = ""*""
		               |		И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВидыДвиженийПриходРасход = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыДвиженийПриходРасход.Расход)) КАК Оплата
		               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента КАК ИдентификаторДокумента,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторКорДокумента КАК ИдентификаторКорДокумента,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.Организация КАК Организация,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.Контрагент КАК Контрагент,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ДоговорКонтрагента КАК ДоговорКонтрагента,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВидыДвиженийПриходРасход КАК ВидыДвиженийПриходРасход,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.Загружено КАК Загружено,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.Дата КАК Дата,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.Номер КАК Номер,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.СуммаДокумента КАК СуммаДокумента,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВалютаДокумента КАК ВалютаДокумента,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ПредставлениеДокумента КАК ПредставлениеДокумента,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ПредставлениеКорДокумента КАК ПредставлениеКорДокумента,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.СделкаСКлиентом КАК СделкаСКлиентом,
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.АвансКЗачету КАК АвансКЗачету
		               |		ИЗ
		               |			РегистрСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам КАК CRM_ЗагруженныеОборотыПоВзаиморасчетам
		               |		ГДЕ
		               |			CRM_ЗагруженныеОборотыПоВзаиморасчетам.Загружено
		               |			И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВидыДвиженийПриходРасход = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыДвиженийПриходРасход.Расход)
		               |			И НЕ CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента = ""*""
		               |			И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторКорДокумента = ""*"") КАК ВсеАвансы
		               |		ПО Оплата.ИдентификаторДокумента = ВсеАвансы.ИдентификаторДокумента";
		
		Запрос.УстановитьПараметр("СделкаСКлиентом"	,Ссылка);
		Запрос.УстановитьПараметр("ПустаяДата"		,Дата("00010101"));
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаписьРегистра = РегистрыСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
			ЗаписьРегистра.Прочитать();
			
			Если Выборка.ВидДвижения = "Отгрузка" ИЛИ Выборка.ВидДвижения = "Аванс" Тогда
				Если ЗаписьРегистра.Выбран() Тогда
					ЗаписьРегистра.Загружено = Ложь;
					ЗаписьРегистра.СделкаСКлиентом = Документы.CRM_СчетНаОплатуПокупателю.ПустаяСсылка();
					ЗаписьРегистра.Записать();
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Выборка.АвансСделкаСКлиентом) И (НЕ Выборка.АвансСделкаСКлиентом = Ссылка) Тогда
					АвансСделка = Выборка.АвансСделкаСКлиентом.ПолучитьОбъект();
					
					МассивСтрок = АвансСделка.Оплата.НайтиСтроки(Новый Структура("ИдентификаторДокумента, ИдентификаторКорДокумента",Выборка.ИдентификаторДокумента,"*"));
					Если МассивСтрок.Количество() > 0 Тогда
						МассивСтрок[0].Сумма = МассивСтрок[0].Сумма + Выборка.СуммаДокумента;
						Если МассивСтрок[0].Сумма > Выборка.АвансСуммаДокумента Тогда
							МассивСтрок[0].Сумма = Выборка.АвансСуммаДокумента;
						КонецЕсли;
					Иначе
						НоваяСтрока = АвансСделка.Оплата.Добавить();
						НоваяСтрока.ИдентификаторДокумента		= Выборка.ИдентификаторДокумента;
						НоваяСтрока.ИдентификаторКорДокумента	= "*";
						НоваяСтрока.ДатаОплаты					= Выборка.АвансДата;
						НоваяСтрока.НомерДокумента				= Выборка.АвансНомер;
						НоваяСтрока.ПредставлениеДокумента		= Выборка.АвансПредставлениеДокумента;
						НоваяСтрока.Сумма						= Выборка.СуммаДокумента;
						НоваяСтрока.Курс						= Выборка.КурсВзаиморасчетов;
						НоваяСтрока.Кратность					= Выборка.КратностьВзаиморасчетов;
					КонецЕсли;
					
					Попытка
						АвансСделка.Записать();
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				Если ЗаписьРегистра.Выбран() Тогда
					ЗаписьРегистра.Загружено		= Ложь;
					ЗаписьРегистра.СделкаСКлиентом	= Документы.CRM_СчетНаОплатуПокупателю.ПустаяСсылка();
					ЗаписьРегистра.АвансКЗачету		= ЗначениеЗаполнено(Выборка.АвансСделкаСКлиентом);
					ЗаписьРегистра.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СуммаДокумента			= Запасы.Итог("Всего");
	СуммаОплаты				= Оплата.Итог("Сумма");
	СуммаОтгрузки			= Отгрузка.Итог("Всего");
	СуммаОстатокОтгрузка	= СуммаДокумента - СуммаОтгрузки;
	СуммаОстатокОплата		= СуммаДокумента - СуммаОплаты;
	
КонецПроцедуры

// Процедура - заполняет данные по документу "Событие".
//
Процедура ЗаполнитьПоИнтересу(ДанныеЗаполнения)
	
	ДокументОснование 	= ДанныеЗаполнения.Ссылка;
	КонтактноеЛицо		= ДанныеЗаполнения.КонтактноеЛицо;
	Организация 		= ДанныеЗаполнения.Организация;
	Подразделение		= ДанныеЗаполнения.Подразделение;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		БанковскийСчет 		= Организация.БанковскийСчетПоУмолчанию;
	КонецЕсли;	
	Ответственный 		= ДанныеЗаполнения.Ответственный;
	Партнер 			= ДанныеЗаполнения.Партнер;
	
КонецПроцедуры

Процедура ЗаполнитьПоИсходящемуПисьму(ДанныеЗаполнения)
	
	Важность 			= ДанныеЗаполнения.Важность;
	Ответственный 		= ДанныеЗаполнения.Ответственный;
	ДокументОснование 	= ДанныеЗаполнения;
	Проект				= ДанныеЗаполнения.CRM_Проект;
	
	// Если получатель один, то можно подставить его в документ.
	Если ДанныеЗаполнения.ПолучателиПисьма.Количество() = 1 Тогда
		Если ЗначениеЗаполнено(ДанныеЗаполнения.ПолучателиПисьма[0].Контакт) Тогда
			Если ТипЗнч(ДанныеЗаполнения.ПолучателиПисьма[0].Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Партнер			= ДанныеЗаполнения.ПолучателиПисьма[0].Контакт;
				КонтактноеЛицо	= ДанныеЗаполнения.ПолучателиПисьма[0].Контакт.CRM_ОсновноеКонтактноеЛицо;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ПолучателиПисьма[0].Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Партнер			= ДанныеЗаполнения.ПолучателиПисьма[0].Контакт.Владелец;
				КонтактноеЛицо	= ДанныеЗаполнения.ПолучателиПисьма[0].Контакт;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоВходящемуПисьму(ДанныеЗаполнения)
	
	Важность 			= ДанныеЗаполнения.Важность;
	Ответственный 		= ДанныеЗаполнения.Ответственный;
	ДокументОснование 	= ДанныеЗаполнения;
	Проект				= ДанныеЗаполнения.CRM_Проект;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ОтправительКонтакт) Тогда
		Если ТипЗнч(ДанныеЗаполнения.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
			Партнер			= ДанныеЗаполнения.ОтправительКонтакт;
			КонтактноеЛицо	= ДанныеЗаполнения.ОтправительКонтакт.CRM_ОсновноеКонтактноеЛицо;
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Партнер			= ДанныеЗаполнения.ОтправительКонтакт.Владелец;
			КонтактноеЛицо	= ДанныеЗаполнения.ОтправительКонтакт;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - заполняет данные по документу "КоммерческоеПредложениеКлиенту".
//
Процедура ЗаполнитьПоКоммерческомуПредложениюКлиенту(ДанныеЗаполнения)
	
	Валюта 	= ДанныеЗаполнения.Валюта;
	ВидСкидкиНаценки 	= ДанныеЗаполнения.ВидСкидкиНаценки;
	ВидЦен 				= ДанныеЗаполнения.ВидЦен;
	Договор 			= ДанныеЗаполнения.Договор;
	ДокументОснование 	= ДанныеЗаполнения.Ссылка;
	КонтактноеЛицо		= ДанныеЗаполнения.КонтактноеЛицо;
	Кратность 			= ДанныеЗаполнения.Кратность;
	Курс 				= ДанныеЗаполнения.Курс;
	Организация 		= ДанныеЗаполнения.Организация;
	Подразделение 		= ДанныеЗаполнения.CRM_Подразделение;
	Если ЗначениеЗаполнено(Организация) Тогда
		БанковскийСчет 		= Организация.БанковскийСчетПоУмолчанию;
	КонецЕсли;	
	Ответственный 		= ДанныеЗаполнения.Менеджер;
	Партнер 			= ДанныеЗаполнения.Партнер;
	ЦенаВключаетНДС 	= ДанныеЗаполнения.ЦенаВключаетНДС;
	Если ДанныеЗаполнения.Товары.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДокументЗапасы.Номенклатура,
		               |	ДокументЗапасы.Характеристика,
		               |	ДокументЗапасы.Количество,
		               |	ДокументЗапасы.ЕдиницаИзмерения,
		               |	ДокументЗапасы.Цена,
		               |	ДокументЗапасы.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		               |	ДокументЗапасы.Сумма,
		               |	ДокументЗапасы.СтавкаНДС,
		               |	ДокументЗапасы.СуммаНДС,
		               |	ДокументЗапасы.Всего,
		               |	ДокументЗапасы.Содержание,
		               |	ДокументЗапасы.Количество КАК ОсталосьОтгрузить
		               |ИЗ
		               |	Документ.КоммерческоеПредложениеКлиенту.Товары КАК ДокументЗапасы
		               |ГДЕ
		               |	ДокументЗапасы.CRM_Утвержден
		               |	И ДокументЗапасы.Ссылка = &Ссылка
		               |	И ДокументЗапасы.Номенклатура ССЫЛКА Справочник.Номенклатура";
		Запрос.УстановитьПараметр("Ссылка",ДанныеЗаполнения.Ссылка);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ЭтотОбъект.Запасы.Загрузить(Результат.Выгрузить());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли