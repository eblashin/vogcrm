&НаСервере
Функция ПолучитьСписокВариантовКоммерческогоПредложения(КоммерческоеПредложение)
	
	СписокВыбораВарианта = CRM_МетодыМодулейМенеджеровДокументов.КППолучитьВарианты(КоммерческоеПредложение);
	
	Если СписокВыбораВарианта.Количество() > 1 Тогда
		СписокВыбораВарианта.Вставить(0, 0, "Все варианты");
	КонецЕсли;
	
	Возврат СписокВыбораВарианта;
	
КонецФункции// ПолучитьСписокВариантовКоммерческогоПредложения(КоммерческоеПредложение)

&НаКлиенте
Процедура СформироватьДокумент(ДокументСсылка, МакетИДанныеОбъекта, ИмяМакета, ЛокальныйКаталогФайловПечати, МассивФайлов)
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов[ИмяМакета];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
	
	Попытка
		Макет		  = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета], ТипМакета, ИмяМакета);
		ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета);
		ИмяВременногоФайла = КаталогВременныхФайлов() + "Коммерческое предложение.doc";
		
		Если ПечатнаяФорма <> Неопределено И Макет <> Неопределено Тогда
			
			// Вывод колонтитулов документа.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
			
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
			
			// Вывод верхней части документа - обычная область с параметрами.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			
			// Выведем варианты
			ВыводитьСтрокуВарианта = (ДанныеОбъекта.Варианты.Количество() > 1);
			
			Для Каждого ДанныеВарианта Из ДанныеОбъекта.Варианты Цикл
				Если ВыводитьСтрокуВарианта Тогда
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОписаниеВарианта"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
				КонецЕсли;
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
				
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
					
				Попытка
					
					ОбластьРазделитель = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаРазделительТаблицаТовары"]);
					ОбластьИтогиПоРазделу = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаИтогиПоРазделуТаблицаТовары"]);				
					
					ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
					
				Исключение
					
					ТоварыЕстьРазделители = Ложь;
					
				КонецПопытки;				
				
				Если ТоварыЕстьРазделители Тогда
					
					// выдим построчно
					КоличествоНеВыведенныхСтрок = ДанныеВарианта.Товары.Количество();
					
					Для Каждого СтрокаТовары Из ДанныеВарианта.Товары Цикл
						
						МассивСтрокиТовары = Новый Массив;
						МассивСтрокиТовары.Добавить(СтрокаТовары);
						
						Если СтрокаТовары.ТипСтроки = "Разделитель" Тогда
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьРазделитель, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
							
						ИначеЕсли СтрокаТовары.ТипСтроки = "ИтогПоРазделу" Тогда
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьИтогиПоРазделу, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
							
						Иначе
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
							
						КонецЕсли;
						
						КоличествоНеВыведенныхСтрок = КоличествоНеВыведенныхСтрок - 1;
						
					КонецЦикла;
					
				Иначе
					
					УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеВарианта.Товары);
					
				КонецЕсли;
				
				Попытка // Для совместимости с предыдущей версией
					// вывод итогов табличной части.
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблицаТовары"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
				Исключение
				КонецПопытки;
					
			КонецЦикла;
			
			// Вывод нижней части документа - обычная область с параметрами.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			
			//УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
			COMСоединение = ПечатнаяФорма.COMСоединение;
			COMСоединение.Application.Visible = Ложь;
			//COMСоединение.ActiveDocument.Save();
			COMСоединение.ActiveDocument.SaveAs(ИмяВременногоФайла);
			COMСоединение.ActiveDocument.Close();
			COMСоединение.Quit();
			
			МассивФайлов.Добавить(Новый Структура("ИмяФайла,ДокументСсылка", ИмяВременногоФайла, ДокументСсылка));
			
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		Возврат;
	КонецПопытки;
	
	УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма,Ложь);
	УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументOpenOffice(ДокументСсылка, МакетИДанныеОбъекта, ИмяМакета, ЛокальныйКаталогФайловПечати, МассивФайлов)
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов[ИмяМакета];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
	
	Попытка
		Макет = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов[ИмяМакета], ТипМакета, ИмяМакета);
		ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета);
		
		ИмяВременногоФайла = КаталогВременныхФайлов() + "Коммерческое предложение.odt";
		
		Если Не ПечатнаяФорма = Неопределено И Не Макет = Неопределено Тогда
			
			// Вывод колонтитулов документа.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ВерхнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта);
			
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
			
			// Вывод верхней части документа - обычная область с параметрами.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["Заголовок"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			
			// Выведем варианты
			ВыводитьСтрокуВарианта = (ДанныеОбъекта.Варианты.Количество() > 1);
			
			Для Каждого ДанныеВарианта Из ДанныеОбъекта.Варианты Цикл
				Если ВыводитьСтрокуВарианта Тогда
					Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ОписаниеВарианта"]);
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
				КонецЕсли;
				
				// Вывод коллекции данных из информационной базы в виде таблицы.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ШапкаТаблицыТовары"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаТаблицаТовары"]);
				
				Попытка
					
					ОбластьРазделитель = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаРазделительТаблицаТовары"]);
					ОбластьИтогиПоРазделу = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["СтрокаИтогиПоРазделуТаблицаТовары"]);
					
					ТоварыЕстьРазделители = ДанныеВарианта.ЕстьРазделители;
					
				Исключение
					
					ТоварыЕстьРазделители = Ложь;
					
				КонецПопытки;
				
				Если ТоварыЕстьРазделители Тогда
					
					// выдим построчно
					КоличествоНеВыведенныхСтрок = ДанныеВарианта.Товары.Количество();
					
					Для Каждого СтрокаТовары Из ДанныеВарианта.Товары Цикл
						
						МассивСтрокиТовары = Новый Массив;
						МассивСтрокиТовары.Добавить(СтрокаТовары);
						
						Если СтрокаТовары.ТипСтроки = "Разделитель" Тогда
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьРазделитель, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
							
						ИначеЕсли СтрокаТовары.ТипСтроки = "ИтогПоРазделу" Тогда
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, ОбластьИтогиПоРазделу, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
							
						Иначе
							
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, МассивСтрокиТовары, КоличествоНеВыведенныхСтрок = 1);
							
						КонецЕсли;
						
						КоличествоНеВыведенныхСтрок = КоличествоНеВыведенныхСтрок - 1;
						
					КонецЦикла;
					
				Иначе
					
					УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, ДанныеВарианта.Товары);
					
				КонецЕсли;
				
				Попытка // Для совместимости с предыдущей версией
				// вывод итогов табличной части.
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["ИтогиТаблицаТовары"]);
				УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеВарианта, Ложь);
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
			// Вывод нижней части документа - обычная область с параметрами.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Области[ИмяМакета]["НижняяЧасть"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			
			Args = Новый COMSafeArray("VT_VARIANT",1);
			ПечатнаяФорма.Document.storeToURL(ПривестиФайлКУРЛ(ИмяВременногоФайла),Args);
			МассивФайлов.Добавить(Новый Структура("ИмяФайла,ДокументСсылка", ИмяВременногоФайла, ДокументСсылка));
			
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		Возврат;
	КонецПопытки;
	
	УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
	ПечатнаяФорма.Document.Close(0);
	ПечатнаяФорма.Desktop.terminate();
	ПечатнаяФорма.Document = Неопределено;
	ПечатнаяФорма.Desktop = Неопределено;
	ПечатнаяФорма.ServiceManager = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Функция ПривестиФайлКУРЛ(ЗНАЧ ПутьКФайлу = "")

	ПутьКФайлу = СтрЗаменить(ПутьКФайлу," ","%20");
	ПутьКФайлу = СтрЗаменить(ПутьКФайлу,"\","/");
	Возврат "file:/" + "/localhost/" + ПутьКФайлу;

КонецФункции 

&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	
	ТекущийДокумент = ПараметрКоманды;
	СписокВыбораВарианта = ПолучитьСписокВариантовКоммерческогоПредложения(ТекущийДокумент);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Варианты", СписокВыбораВарианта);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаКомандыПродолжение", ЭтотОбъект, Новый Структура("ПараметрыВыполненияКоманды, ТекущийДокумент",ПараметрыВыполненияКоманды, ТекущийДокумент));
	ОткрытьФорму("Документ.КоммерческоеПредложениеКлиенту.Форма.CRM_ФормаНастройкаПередОправкой", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыПродолжение(НастройкиСохранения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(НастройкиСохранения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.Добавить(ДополнительныеПараметры.ТекущийДокумент);
	
	МассивДокументов = Новый Массив();
	МассивДокументов.Добавить(ДополнительныеПараметры.ТекущийДокумент);
	
	СтруктураДокументыИВариант = Новый Структура("МассивДокументов", МассивДокументов);
	
	СписокИменФайлов = Новый СписокЗначений();
	
	МассивФайлов_ODT = Новый Массив();
	МассивФайлов_DOC = Новый Массив();
	
	Если НастройкиСохранения.ФорматODT Тогда
		
		СтруктураДокументыИВариант.Вставить("НомерВарианта", НастройкиСохранения.НомерВарианта);
		
		ТекстСообщения = НСтр("ru = 'Выполняется формирование документа...'");
			
		Состояние(ТекстСообщения);
		
		МакетOpenOffice = НастройкиСохранения.МакетOpenOffice;
		
		Если МакетOpenOffice	= "CRM_ПФ_ODT_КоммерческоеПредложение" Тогда
			МакетИДанныеОбъекта = CRM_ОбщегоНазначенияСервер.CRM_ПолучитьМакетыИДанныеОбъектов(МакетOpenOffice, ОбъектыНазначения, НастройкиСохранения.НомерВарианта);
		Иначе
			МакетИДанныеОбъекта = CRM_ОбщегоНазначенияСервер.CRM_ПолучитьВнешниеМакетыИДанныеОбъектов(МакетOpenOffice, ОбъектыНазначения, НастройкиСохранения.НомерВарианта);
		КонецЕсли;
		
		//МакетИДанныеОбъекта = УправлениеПечатьюВызовСервера.ПолучитьМакетыИДанныеОбъектов("Документ.КоммерческоеПредложениеКлиенту",
		// "КоммерческоеПредложение(ODT)",
		// СтруктураДокументыИВариант);
		
		//СформироватьДокументOpenOffice(ТекущийДокумент, МакетИДанныеОбъекта, "КоммерческоеПредложение(ODT)", МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати, МассивФайлов_ODT);
		СформироватьДокументOpenOffice(ДополнительныеПараметры.ТекущийДокумент, МакетИДанныеОбъекта, "CRM_ПФ_ODT_КоммерческоеПредложение", МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати, МассивФайлов_ODT);
		
		#Если Не ВебКлиент Тогда
		Если МассивФайлов_ODT.Количество() > 0 Тогда
			Для Каждого ИмяФайлаСтруктура Из МассивФайлов_ODT Цикл
				Если НастройкиСохранения.ЗапаковатьZIP Тогда
					СписокИменФайлов.Добавить(ИмяФайлаСтруктура.ИмяФайла);
				Иначе
					СписокИменФайлов.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаСтруктура.ИмяФайла),
						ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник.УникальныйИдентификатор), НСтр("ru = 'Коммерческое предложение'") + ".odt");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Для н = 0 По МассивФайлов.ВГраница() Цикл
		//	Попытка УдалитьФайлы(МассивФайлов[н].ИмяФайла);
		//	Исключение КонецПопытки;
		//КонецЦикла;
		#КонецЕсли
	КонецЕсли;
	
	Если НастройкиСохранения.ФорматDOC Тогда
		
		СтруктураДокументыИВариант.Вставить("НомерВарианта", НастройкиСохранения.НомерВарианта);
		
		ТекстСообщения = НСтр("ru = 'Выполняется формирование документа...'");
			
		Состояние(ТекстСообщения);
		
		МакетMS = НастройкиСохранения.МакетMS;
		
		Если МакетMS = "CRM_ПФ_DOC_КоммерческоеПредложение" Тогда
			МакетИДанныеОбъекта = CRM_ОбщегоНазначенияСервер.CRM_ПолучитьМакетыИДанныеОбъектов(МакетMS, ОбъектыНазначения, НастройкиСохранения.НомерВарианта);
		Иначе
			МакетИДанныеОбъекта = CRM_ОбщегоНазначенияСервер.CRM_ПолучитьВнешниеМакетыИДанныеОбъектов(МакетMS, ОбъектыНазначения, НастройкиСохранения.НомерВарианта);
		КонецЕсли;
		
		//МакетИДанныеОбъекта = УправлениеПечатьюВызовСервера.ПолучитьМакетыИДанныеОбъектов("Документ.КоммерческоеПредложениеКлиенту",
		// "КоммерческоеПредложение(MSWord)",
		// СтруктураДокументыИВариант);
		
		//СформироватьДокумент(ТекущийДокумент, МакетИДанныеОбъекта, "КоммерческоеПредложение(MSWord)", МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати, МассивФайлов_DOC);
		СформироватьДокумент(ДополнительныеПараметры.ТекущийДокумент, МакетИДанныеОбъекта, МакетMS, МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати, МассивФайлов_DOC);
		
		#Если Не ВебКлиент Тогда
		Если МассивФайлов_DOC.Количество() > 0 Тогда
			Для Каждого ИмяФайлаСтруктура Из МассивФайлов_DOC Цикл
				Если НастройкиСохранения.ЗапаковатьZIP Тогда
					СписокИменФайлов.Добавить(ИмяФайлаСтруктура.ИмяФайла);
				Иначе
					СписокИменФайлов.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаСтруктура.ИмяФайла),
						ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник.УникальныйИдентификатор), НСтр("ru = 'Коммерческое предложение'") + ".doc");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		#КонецЕсли
	КонецЕсли;
	
#Если Не ВебКлиент Тогда
	Если СписокИменФайлов.Количество() > 0 Тогда
		
		СписокФайловВложений = Новый СписокЗначений;
		ЗаписьZipФайла = Неопределено;
		ИмяАрхива = Неопределено;
		
		Если НастройкиСохранения.ЗапаковатьZIP Тогда
			СтруктураВложения = ПолучитьАрхив(СписокИменФайлов, ДополнительныеПараметры.ПараметрыВыполненияКоманды.Источник.УникальныйИдентификатор);
			СписокФайловВложений.Добавить(СтруктураВложения.ПутьВоВременномХранилище, НСтр("ru = 'Коммерческое предложение'") + ".zip");
		Иначе
			Для Каждого ЭлементСписка Из СписокИменФайлов Цикл
				СписокФайловВложений.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
			КонецЦикла;
		КонецЕсли;
			
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Основание",	ДополнительныеПараметры.ТекущийДокумент);
		ПараметрыФормы.Вставить("Вложения",		СписокФайловВложений);
		
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
	Для НомерСтроки = 0 По МассивФайлов_ODT.ВГраница() Цикл
		Попытка УдалитьФайлы(МассивФайлов_ODT[НомерСтроки].ИмяФайла);
		Исключение КонецПопытки;
	КонецЦикла;
	
	Для НомерСтроки = 0 По МассивФайлов_DOC.ВГраница() Цикл
		Попытка УдалитьФайлы(МассивФайлов_DOC[НомерСтроки].ИмяФайла);
		Исключение КонецПопытки;
	КонецЦикла;
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАрхив(СписокИменФайлов, ЗНАЧ Ид)
	
#Если Не ВебКлиент Тогда
	ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
	ЗаписьZipФайла = Новый ЗаписьZipФайла(ИмяАрхива);
	
	Для Каждого ЭлементСписка Из СписокИменФайлов Цикл
		ЗаписьZipФайла.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	ЗаписьZipФайла.Записать();
	ФайлАрхива = Новый Файл(ИмяАрхива);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяАрхива);
	
	ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Ид);
	
	Возврат Новый Структура("ПутьВоВременномХранилище, Имя", ПутьВоВременномХранилище, ФайлАрхива.Имя);
#КонецЕсли
	
КонецФункции

