&НаКлиенте
Перем НеПроверятьВарианты;

&НаКлиенте
Перем ЗакрыватьПослеЗаписи;

&НаКлиенте
Перем ОтказТемп;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомерСтрокиВарианта(Форма)
	СтруктураПоиска = Новый Структура("CRM_ИДВарианта", Форма.ИДВарианта);
	НайденныеСтроки = Форма.Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Счетчик = 1;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.CRM_ЭтоРазделитель Тогда
			НайденнаяСтрока.НомерСтрокиВарианта = 0;
			Счетчик = 1;
		Иначе
			НайденнаяСтрока.НомерСтрокиВарианта = Счетчик;
			Счетчик = Счетчик + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда 
		CRM_ОбработкиЗаполненияЗаписиКопированияОбъектов.ДокументОбработкаЗаполнения(Документ, Новый Структура("ДокументОснование, ИдВарианта", Объект.ДокументОснование, ИдВарианта), "", Ложь);
	Иначе
		CRM_ОбработкиЗаполненияЗаписиКопированияОбъектов.ДокументОбработкаЗаполнения(Документ, Объект.ДокументОснование, "", Ложь);
	КонецЕсли;
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	Если CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(Документ.Организация) Тогда
		Элементы.ТоварыСтавкаНДС.Видимость = Истина;
		Элементы.ТоварыСуммаНДС.Видимость = Истина;
		Элементы.ТоварыВсего.Видимость = Истина;
	Иначе
		Элементы.ТоварыСтавкаНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаНДС.Видимость = Ложь;
		Элементы.ТоварыВсего.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДокументу()

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов)
	
	РазностьДат = CRM_ОбщегоНазначенияСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРасчетов));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗаголовокФормы(Форма)
	Если ЗначениеЗаполнено(Форма.Объект.Партнер) Тогда
		СтрокаЗаголовок = Строка(Форма.Объект.Партнер);
		Если ЗначениеЗаполнено(Форма.Объект.CRM_Проект) Тогда
			СтрокаЗаголовок = СтрокаЗаголовок + ", " + Строка(Форма.Объект.CRM_Проект);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Форма.Объект.CRM_Проект) Тогда
		СтрокаЗаголовок = Строка(Форма.Объект.CRM_Проект);
	КонецЕсли;	
	Возврат СтрокаЗаголовок;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	
	// Командная панель атрибутов события.
	
	Форма.Заголовок = ПолучитьЗаголовокФормы(Форма);
			
	Если Форма.ТолькоПросмотр Тогда
		Форма.Элементы.ФормаОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность	= Ложь;
		Форма.Элементы.КомментарийВарианта.Доступность								= Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет права на редактирование цен.
&НаСервере
Процедура УстановитьВозможностьРедактированияЦен()
	
	ПраваНаРедактированиеЦен = Пользователи.РолиДоступны("CRM_РедактированиеЦенИСкидокВДокументах, ПолныеПрава");
	Элементы.ТоварыЦена.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	Элементы.ТоварыПроцентСкидкиНаценки.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	Элементы.ТоварыСумма.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	Элементы.ТоварыВсего.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	Элементы.ТоварыСуммаНДС.ТолькоПросмотр = Не ПраваНаРедактированиеЦен;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ОрганизацияПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("БанковскийСчет", Объект.Организация.БанковскийСчетПоУмолчанию);
	СтруктураДанные.Вставить("БанковскийСчетВалютаДенежныхСредств", Объект.Организация.БанковскийСчетПоУмолчанию.ВалютаДенежныхСредств);
	
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеПартнерПриИзменении(Дата, ВалютаДокумента, Партнер, Организация, Проект)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ОсновноеКонтактноеЛицо",		Партнер.CRM_ОсновноеКонтактноеЛицо);
	мДоговор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(Партнер, Организация);
	СтруктураДанные.Вставить("Договор",						мДоговор);
	СтруктураДанные.Вставить("ВалютаРасчетов",				мДоговор.ВалютаРасчетов);
	СтруктураДанные.Вставить("ВалютаРасчетовКурсКратность",	
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", мДоговор.ВалютаРасчетов)));
	СтруктураДанные.Вставить("ВидСкидкиНаценки",			мДоговор.ВидСкидкиНаценки);
	СтруктураДанные.Вставить("ВидЦен",						мДоговор.ВидЦен);
	СтруктураДанные.Вставить("РасчетыВУсловныхЕдиницах",	мДоговор.РасчетыВУсловныхЕдиницах);
	СтруктураДанные.Вставить("ВидСкидкиНаценки",			мДоговор.ВидСкидкиНаценки);
	СтруктураДанные.Вставить("ЦенаВключаетНДС",			?(ЗначениеЗаполнено(мДоговор.ВидЦен), мДоговор.ВидЦен.ЦенаВключаетНДС, Неопределено));
	
	Если	Не ЗначениеЗаполнено(СтруктураДанные.ОсновноеКонтактноеЛицо)
		И	ЗначениеЗаполнено(Проект)
		И	ЗначениеЗаполнено(Проект.CRM_Партнер)
		И	Проект.CRM_Партнер = Партнер
		И	ЗначениеЗаполнено(Проект.CRM_КонтактноеЛицоПартнера) Тогда
		//
		СтруктураДанные.ОсновноеКонтактноеЛицо = Проект.CRM_КонтактноеЛицоПартнера;
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПартнерПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Договор.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетовКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов))
	);
	
	СтруктураДанные.Вставить(
		"РасчетыВУсловныхЕдиницах",
		Договор.РасчетыВУсловныхЕдиницах
	);
	
	СтруктураДанные.Вставить(
		"ВидСкидкиНаценки",
		Договор.ВидСкидкиНаценки
	);
	
	СтруктураДанные.Вставить(
		"ВидЦен",
		Договор.ВидЦен
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()
 
// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(Объект.Организация) Тогда
		
		Элементы.ТоварыСтавкаНДС.Видимость = Истина;
		Элементы.ТоварыСуммаНДС.Видимость = Истина;
		Элементы.ТоварыВсего.Видимость = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			Если СтрокаТабличнойЧасти.CRM_ЭтоРазделитель Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = Объект.Организация.СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
			СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.ЦенаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЦикла;	
		
	Иначе
		
		Элементы.ТоварыСтавкаНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаНДС.Видимость = Ложь;
		Элементы.ТоварыВсего.Видимость = Ложь;
		
		Если Объект.Организация.СтавкаНДСПоУмолчанию.НеОблагается Тогда
			СтавкаНДСПоУмолчанию = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;	
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
			СтрокаТабличнойЧасти.СуммаНДС = 0;
			
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()	

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	СтруктураДанные.Вставить("Содержание", CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
																?(ЗначениеЗаполнено(СтруктураДанные.Номенклатура.НаименованиеПолное), 
																СтруктураДанные.Номенклатура.НаименованиеПолное, СтруктураДанные.Номенклатура.Наименование), 
																СтруктураДанные.Характеристика, СтруктураДанные.Номенклатура.Артикул));

	Если НЕ CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(СтруктураДанные.Организация) Тогда
		Если СтруктураДанные.Организация.СтавкаНДСПоУмолчанию.НеОблагается Тогда
			СтруктураДанные.Вставить("СтавкаНДС", CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;	
																
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	КонецЕсли;
			
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = CRM_ОбщегоНазначенияСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентРучнойСкидки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Получает набор данных с сервера для процедуры ХарактеристикаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("Содержание", CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
																?(ЗначениеЗаполнено(СтруктураДанные.Номенклатура.НаименованиеПолное), 
																СтруктураДанные.Номенклатура.НаименованиеПолное, СтруктураДанные.Номенклатура.Наименование), 
																СтруктураДанные.Характеристика, СтруктураДанные.Номенклатура.Артикул));
	
	Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Цена = CRM_ОбщегоНазначенияСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
	СтруктураДанные.Вставить("Цена", Цена);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеХарактеристикаПриИзменении()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияНачалоВыбораИзСписка.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(Номенклатура)
	
	СписокЕдиницаИзмерения = Новый СписокЗначений();
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("СписокЕдиницаИзмерения", СписокЕдиницаИзмерения);
	
	СписокЕдиницаИзмерения.Добавить(Номенклатура.ЕдиницаИзмерения, Номенклатура.ЕдиницаИзмерения.Наименование + " (ед. хранения)");
	
	МассивОтбора = Новый Массив();
	МассивОтбора.Добавить(Номенклатура);
	МассивОтбора.Добавить(Номенклатура.НоменклатурнаяГруппа);
	
	Родитель = Номенклатура.НоменклатурнаяГруппа.Родитель;
	
	Пока Истина Цикл
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			Прервать;
		Иначе
			МассивОтбора.Добавить(Родитель);
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец В(&Номенклатура)";	
	
	Запрос.УстановитьПараметр("Номенклатура", МассивОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЕдиницаИзмерения.Добавить(Выборка.ЕдиницаИзмерения);
	КонецЦикла;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка()

// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();	
	
	// +CRM изменены условия
	Если ЗначениеЗаполнено(ТекущаяЕдиницаИзмерения) И ТипЗнч(ТекущаяЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) И ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", 1);
	КонецЕсли;
	// -CRM
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.ЦенаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	Если СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 100 Тогда
		СтрокаТабличнойЧасти.Сумма = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентРучнойСкидки <> 0
		    И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентРучнойСкидки / 100);
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Процедура пересчитывает курс и кратность валюты расчетов при изменении
// даты документа.
//
&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные)
	
	КурсНовый = ?(СтруктураДанные.ВалютаКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаКурсКратность.Курс);
	КратностьНовый = ?(СтруктураДанные.ВалютаКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаКурсКратность.Кратность);
	
	Если Объект.Курс <> КурсНовый
		ИЛИ Объект.Кратность <> КратностьНовый Тогда
		
		КурсВалютыСтрокой = Строка(Объект.Кратность) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(Объект.Курс) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		КурсНовыйВалютыСтрокой = Строка(КратностьНовый) + " " + СокрЛП(ВалютаРасчетов) + " = " + Строка(КурсНовый) + " " + СокрЛП(ВалютаРегламентированногоУчета);
		
		ТекстСообщения = НСтр("ru = 'На дату документа у валюты расчетов (" + КурсВалютыСтрокой + ") был задан курс.
									|Установить курс расчетов (" + КурсНовыйВалютыСтрокой + ") в соответствии с курсом валюты?'");
		
		Режим = РежимДиалогаВопрос.ДаНет;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПересчитатьКурсКратностьВалютыРасчетовЗавершение", ЭтотОбъект, Новый Структура("КурсНовый, КратностьНовый", КурсНовый, КратностьНовый));
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, Режим, 0);
	    Возврат;
		
	КонецЕсли;	
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
	Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()	

&НаКлиенте
Процедура ПересчитатьКурсКратностьВалютыРасчетовЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.Курс = ДополнительныеПараметры.КурсНовый;
		Объект.Кратность = ДополнительныеПараметры.КратностьНовый;
							
	КонецЕсли;		
		
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
	Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры // ПересчитатьКурсКратностьВалютыРасчетов()	

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь, ОписаниеОповещенияОЗавершении = Неопределено)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("ВидЦен",				 Объект.ВидЦен);
	СтруктураПараметров.Вставить("Валюта",		 Объект.Валюта);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",		 Объект.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("Договор",				 Объект.Договор);
	СтруктураПараметров.Вставить("Курс",				 Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			 Объект.Кратность);
	СтруктураПараметров.Вставить("Организация",			 Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		 Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	 Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		 ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	
	СтруктураПараметров.Вставить("ВидСкидки", Объект.ВидСкидкиНаценки);
	
	// 2. Открвыаем форму "Цены и Валюта".
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, ОписаниеОповещенияОЗавершении", ВалютаРасчетовПередИзменением, ОписаниеОповещенияОЗавершении));
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(СтруктураЦеныИВалюта, ДополнительныеПараметры) Экспорт
	
	// 3. Перезаполняем табличную часть "Затраты" если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") И СтруктураЦеныИВалюта.БылиВнесеныИзменения Тогда
		
		Объект.ВидЦен = СтруктураЦеныИВалюта.ВидЦен;
		Объект.ВидСкидкиНаценки = СтруктураЦеныИВалюта.ВидСкидки;
		Объект.Валюта = СтруктураЦеныИВалюта.Валюта;
		Объект.Курс = СтруктураЦеныИВалюта.КурсРасчетов;
		Объект.Кратность = СтруктураЦеныИВалюта.КратностьРасчетов;
		Объект.ЦенаВключаетНДС = СтруктураЦеныИВалюта.ЦенаВключаетНДС;
		
		// Пересчитываем цены по виду цен.
		Если СтруктураЦеныИВалюта.ПерезаполнитьЦены Тогда
			//CRM_ОбщегоНазначенияСервер.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Товары", Истина);
			ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенСервер("Товары", Истина);
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если СтруктураЦеныИВалюта.ПересчитатьЦены Тогда
			//CRM_ОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ВалютаРасчетовПередИзменением, "Товары");
			ПересчитатьЦеныТабличнойЧастиПоВалютеСервер(ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Товары");
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если СтруктураЦеныИВалюта.ЦенаВключаетНДС <> СтруктураЦеныИВалюта.ПредЦенаВключаетНДС Тогда
			//CRM_ОбщегоНазначенияСервер.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, "Товары");		
			ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДССервер("Товары");
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
	Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		Если СтрокаТаблицы.CRM_ЭтоРазделитель Тогда
			СтрокаТаблицы.ПроцентРучнойСкидки = 0;
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Неопределено);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаСервере
Процедура ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДССервер(ИмяТабличнойЧасти)
	CRM_ОбщегоНазначенияСервер.ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ЭтотОбъект, ИмяТабличнойЧасти);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалютеСервер(ВалютаРасчетовПередИзменением, ИмяТабличнойЧасти)
	CRM_ОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(ЭтотОбъект, ВалютаРасчетовПередИзменением, ИмяТабличнойЧасти);
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенСервер(ИмяТабличнойЧасти, ПересчитатьСкидки)
	CRM_ОбщегоНазначенияСервер.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, ИмяТабличнойЧасти, ПересчитатьСкидки);
КонецПроцедуры

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если СтруктураНадписи.УчетВалютныхОпераций Тогда
		Если ЗначениеЗаполнено(СтруктураНадписи.Валюта) Тогда
			ТекстНадписи = НСтр("ru = '%Валюта%, курс: %Курс%'");
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.Валюта)));
			ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", ?((НЕ ЗначениеЗаполнено(СтруктураНадписи.ВалютаРасчетов)) ИЛИ СтруктураНадписи.Валюта = СтруктураНадписи.ВалютаРасчетов, СокрЛП(Строка(СтруктураНадписи.Курс)), СокрЛП(Строка(СтруктураНадписи.КурсНациональнаяВалюта))));
		Иначе
			ТекстНадписи = НСтр("ru = '<нет>'");
		КонецЕсли;
	КонецЕсли;	
	
	// Вид цен.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦен) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидЦен%'");
		Иначе	
			ТекстНадписи = ТекстНадписи + НСтр("ru = '; %ВидЦен%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидЦен%", СокрЛП(Строка(СтруктураНадписи.ВидЦен)));
	КонецЕсли;
	
	// Вид скидки наценки.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВидСкидки) Тогда
		Если ПустаяСтрока(ТекстНадписи) Тогда
			ТекстНадписи = ТекстНадписи + НСтр("ru = '%ВидСкидкиНаценки%'");
		Иначе
			ТекстНадписи = ТекстНадписи + НСтр("ru = '; %ВидСкидкиНаценки%'");
		КонецЕсли;	
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ВидСкидкиНаценки%", СокрЛП(Строка(СтруктураНадписи.ВидСкидки)));
	КонецЕсли;
	
	// Флаг сумма включает НДС.
	Если ПустаяСтрока(ТекстНадписи) Тогда	
		Если СтруктураНадписи.ЦенаВключаетНДС Тогда	
			ТекстНадписи = НСтр("ru = 'включая НДС'");
		Иначе		
			ТекстНадписи = НСтр("ru = 'не включая НДС'");
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()	

&НаСервере
Процедура РасчитатьИтогоПоВарианту()
	
	МассивСтрокВариантов = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", ИДВарианта));
	ИтогоПоВарианту = 0;
	Для Каждого СтрокаМассива Из МассивСтрокВариантов Цикл
		ИтогоПоВарианту = ИтогоПоВарианту + СтрокаМассива.Сумма;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроектПриИзмененииНаСервере()
	Если Не ЗначениеЗаполнено(Объект.Партнер) И ЗначениеЗаполнено(Объект.CRM_Проект.CRM_Партнер) Тогда
		Если Объект.Партнер <> Объект.CRM_Проект.CRM_Партнер Тогда
			Объект.Партнер			= Объект.CRM_Проект.CRM_Партнер;
			Объект.КонтактноеЛицо	= Объект.CRM_Проект.CRM_КонтактноеЛицоПартнера;
			
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПроверитьТипОснования()
	
	УчетнаяЗапись		= CRM_УправлениеЭлектроннойПочтой.ПолучитьУчетнуюЗаписьПоПисьму(Объект.ДокументОснование);
	ФормаПисьма = ПолучитьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",Новый Структура("Ключ",Объект.ДокументОснование));
	
	Если НЕ (ФормаПисьма = Неопределено) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьТипОснованияЗавершение", ЭтотОбъект, ФормаПисьма);
		CRM_УправлениеЭлектроннойПочтойКлиент.ВопросПеренестиПисьмоВПапкуОбработанные(УчетнаяЗапись, ФормаПисьма.Папка, ОписаниеОповещения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТипОснованияЗавершение(ПапкаОтработанные, ФормаПисьма) Экспорт
	
	Если ПапкаОтработанные = ПредопределенноеЗначение("Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка") Тогда
		Возврат;
	КонецЕсли;		
	CRM_УправлениеЭлектроннойПочтой.ПеренестиПисьмоВПапку(Объект.ДокументОснование, ПапкаОтработанные);
	Оповестить("CRM_УстановленФлагОбработано",, ФормаПисьма);
	Оповестить("ОбновитьАРМ");
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиПрисоединенныеФайлы(ПредложениеСсылка)
	
	Если ЭтоНовый Тогда
		СписокОтбора = Новый СписокЗначений;
		Для Каждого ТекущиеДанные Из СписокФайловПисьма Цикл
			Если ТекущиеДанные.Пометка Тогда
				СписокОтбора.Добавить(ТекущиеДанные.Значение);
			КонецЕсли;
		КонецЦикла;
		Если СписокОтбора.Количество() > 0 Тогда
			CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(Объект.ДокументОснование, ПредложениеСсылка, СписокОтбора);
		КонецЕсли;
	КонецЕсли;
	
	СписокФайловПисьма.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПечатьВнешнегоМакета(Команда)
	
	Если НЕ ПроверитьЗаполнение() Тогда Возврат; КонецЕсли;
	ВыбранныйВариант =Неопределено;
		
	Варианты = ПолучитьВарианты();
	Варианты.Добавить(0,"Все варианты");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПечатьВнешнегоМакетаЗавершение", ЭтотОбъект, Команда);
	Варианты.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вариант для печати'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПечатьВнешнегоМакетаЗавершение(РезультатВыбора, Команда) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	ВыбранныйВариант = РезультатВыбора.Значение;
		
	ИмяМакета = СтрЗаменить(Команда.Имя, "Печать_", "");
	
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.Добавить(Объект.Ссылка);
	
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения, ВыбранныйВариант);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайловДляКопирования(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		СписокФайловПисьма = Результат;
	Иначе
		СписокФайловПисьма.Очистить();
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПодсказкуОбАктивныхИнтересах()
	CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ПОДБОРОМ

// Процедура - обработчик события Действие команды Подбор.
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодборПродолжение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(, ОписаниеОповещения);

КонецПроцедуры // Подбор()

&НаКлиенте
Процедура ПодборПродолжение(РазрешеноИзменениеТоваров, ДополнительныеПараметры) Экспорт
	
	Если РазрешеноИзменениеТоваров Тогда
		
		ИмяТабличнойЧасти  = "Товары";
		ЕстьХарактеристики = Истина;
		ЕстьПартии		   = Истина;
		
		ПараметрыПодбора = Новый Структура;
		
		ПараметрыПодбора.Вставить("Период",			  Объект.Дата);
		ПараметрыПодбора.Вставить("Организация",	  Объект.Организация);
		ПараметрыПодбора.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
		ПараметрыПодбора.Вставить("ВидЦен",			  Объект.ВидЦен);
		ПараметрыПодбора.Вставить("Валюта",			  Объект.Валюта);
		ПараметрыПодбора.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		ПараметрыПодбора.Вставить("ОрганизацияДокумента", 	Объект.Организация);
		ПараметрыПодбора.Вставить("ИспользуетсяСодержание",Истина);
		
		Если Объект[ИмяТабличнойЧасти].Количество() > 0 Тогда
			АдресЗапасовВХранилище = ПоместитьТоварыВХранилище(ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии);
			Если НЕ АдресЗапасовВХранилище = Неопределено Тогда
				ПараметрыПодбора.Вставить("АдресЗапасовДокумента", АдресЗапасовВХранилище);
			КонецЕсли;
		КонецЕсли; 
		
		ТипНоменклатуры = Новый СписокЗначений;
		Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
			Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
				Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
					Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
						ТипНоменклатуры.Добавить(ЭлементФиксМассива);
					КонецЦикла; 
				Иначе
					ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект,
			Новый Структура("ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии", ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии));
		ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект,,,, ОписаниеОповещения);
		
	КонецЕсли;

КонецПроцедуры // Подбор()

&НаКлиенте
Процедура ПодборЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		АдресЗапасовВХранилище = РезультатВыбора;
		Если ЗначениеЗаполнено(АдресЗапасовВХранилище) Тогда
			ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище,
				Параметры.ИмяТабличнойЧасти, Параметры.ЕстьХарактеристики, Параметры.ЕстьПартии);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // Подбор()

// Функция помещает список запасов во временное хранилище и возвращает адрес.
//
&НаСервере
Функция ПоместитьТоварыВХранилище(ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии) 
	
	СписокКолонок = "Номенклатура, Количество, ЕдиницаИзмерения";
	Если ЕстьХарактеристики Тогда
		СписокКолонок = СписокКолонок + ", Характеристика";
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("CRM_ЭтоРазделитель", Ложь);
	Отбор.Вставить("CRM_ИДВарианта", ИДВарианта);
	
	НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда	
		Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(НайденныеСтроки, СписокКолонок), УникальныйИдентификатор);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПоместитьТоварыВХранилище()

// Функция получает список товаров из временного хранилища.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		Если ЕстьХарактеристики Тогда
			СтруктураОтбора.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		КонецЕсли;
		СтруктураОтбора.Вставить("CRM_ИДВарианта", ИДВарианта);
		
		Строки = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество() > 0 Тогда
			
			СтрокаТабличнойЧасти = Строки[0];
	        СтрокаТабличнойЧасти.Количество = СтрокаЗагрузки.Количество;
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
			
			Если СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 100 Тогда
				СтрокаТабличнойЧасти.Сумма = 0;
			ИначеЕсли СтрокаТабличнойЧасти.ПроцентРучнойСкидки <> 0
				    И СтрокаТабличнойЧасти.Количество <> 0 Тогда
				СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентРучнойСкидки / 100);
			КонецЕсли;
			
			СтавкаНДС = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС), СтрокаТабличнойЧасти.СтавкаНДС.Ставка, 0);
	
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.ЦенаВключаетНДС, 
											  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
											  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
						
		Иначе 
			НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
			НоваяСтрока.CRM_ИДВарианта = ИДВарианта;
			НоваяСтрока.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(ИДВарианта);
		КонецЕсли;
		
	КонецЦикла;
	
	РасчитатьИтогоПоВарианту();
	
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	
КонецПроцедуры // ПолучитьТоварыИзХранилища()

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы,
// - установка параметров функциональных опций формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	Если Параметры.Свойство("СозданИзЭтапаСделки") Тогда
		_СозданИзЭтапаСделки = Параметры.СозданИзЭтапаСделки;
	Иначе
		_СозданИзЭтапаСделки = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Элементы.Ответственный.КнопкаВыбора = Истина;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		Элементы.Ответственный.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		 И ЗначениеЗаполнено(Объект.Партнер) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
			Объект.Договор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(Объект.Партнер, Объект.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Договор) Тогда
			Если ЗначениеЗаполнено(Параметры.Основание) Тогда
				Попытка
					Объект.Валюта = Параметры.Основание.Валюта;
					ТекущаяВалюта = Параметры.Основание.Валюта;
				Исключение
				КонецПопытки
			ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И ЗначениеЗаполнено(Параметры.ЗначениеКопирования.Валюта) Тогда
				Объект.Валюта = Параметры.ЗначениеКопирования.Валюта;
				ТекущаяВалюта = Параметры.ЗначениеКопирования.Валюта;
			Иначе
				Объект.Валюта = Объект.Договор.ВалютаРасчетов;
				ТекущаяВалюта = Объект.Договор.ВалютаРасчетов;
			КонецЕсли;
			ВалютаРасчетовКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ТекущаяВалюта));
			Объект.Курс      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(ВалютаРасчетовКурсКратность.Кратность = 0, 1, ВалютаРасчетовКурсКратность.Кратность);
			Объект.ВидСкидкиНаценки = Объект.Договор.ВидСкидкиНаценки;
			Объект.ВидЦен = Объект.Договор.ВидЦен;
			Объект.ЦенаВключаетНДС = Объект.ВидЦен.ЦенаВключаетНДС;
		КонецЕсли;
	КонецЕсли;
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	КонецЕсли;
	
	Договор = Объект.Договор;
	ВалютаРасчетов = ТекущаяВалюта;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРегламентированногоУчета));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.Основание) 
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	ИначеЕсли CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(Объект.Организация) Тогда
		Элементы.ТоварыСтавкаНДС.Видимость = Истина;
		Элементы.ТоварыСуммаНДС.Видимость = Истина;
		Элементы.ТоварыВсего.Видимость = Истина;
	Иначе	
		Элементы.ТоварыСтавкаНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаНДС.Видимость = Ложь;
		Элементы.ТоварыВсего.Видимость = Ложь;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	УчетВалютныхОпераций = Константы.ФункциональнаяУчетВалютныхОпераций.Получить();
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
	Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	CRM_ОбщегоНазначенияСервер.УстановитьКнопкиПечати(Метаданные.НайтиПоТипу(ТипЗнч(Объект.Ссылка)).ПолноеИмя(), ЭтотОбъект);
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	// Выгрузим табличную часть КомментарииВариантов во временную таблицу значений
	// просто выгрузить ТЧ нельзя. поэтому цикл.
	Для Каждого СтрокаКомментарией Из Объект.CRM_КомментарииВариантов Цикл
		Стр = ТаблицаКомментариевВариантов.Добавить();
		Стр.ИДВарианта = СтрокаКомментарией.ИДВарианта;
		Стр.КомментарийВарианта = СтрокаКомментарией.КомментарийВарианта;
	КонецЦикла;
	
	// Работа с вариантами
	Если Объект.Товары.Количество() = 0 Тогда
		СписокИменВариантов.Добавить(1, "Вариант 1");
	КонецЕсли;	
	ИДИзменяемогоВарианта = 0;
	ИДВарианта = 1;
	СписокЗагруженПриСменеВарианта = Ложь;
	
	//Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) ИЛИ Объект.Товары.Количество() <> 0 Тогда
	//		СформироватьПанельВариантов();
	//	КонецЕсли;
	//Иначе
	СформироватьПанельВариантов();
	//КонецЕсли;
	УстановитьВозможностьРедактированияЦен();
	
	CRM_ШаблоныОбъектов.СформироватьДополнительныеЭлементыФормы(ЭтотОбъект);
	
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	
	// +CRM
	ИспользоватьБизнесПроцессы = Константы.CRM_ИспользоватьБизнесПроцессы.Получить();
	АвтоматическиУтверждатьЕдинственныйВариант = Константы.CRM_АвтоматическиУтверждатьЕдинственныйВариантКоммерческогоПредложения.Получить();
	ПриПроведениеПредлагатьУтверждениеВарианта = Константы.CRM_ПриПроведениеКоммерческогоПредложенияПредлагатьУтверждениеВарианта.Получить();
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
	// -CRM
	
	Если ЭтоНовый И ЗначениеЗаполнено(Объект.ДокументОснование) 
	И ((ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"))
	ИЛИ (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"))) Тогда
		
		МассивФайлов = РаботаСФайламиСлужебныйВызовСервера.ПолучитьВсеПодчиненныеФайлы(Объект.ДокументОснование);
		
		Если МассивФайлов.Количество() > 0 Тогда
			СписокФайловПисьма.ЗагрузитьЗначения(МассивФайлов);
		КонецЕсли;
	КонецЕсли;
	
	CRM_ОбщегоНазначенияСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, Объект, "ГруппаИнтерес", ТипЗнч(Объект.Ссылка));
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, Истина, , ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);
// +CRM
	Если Параметры.Свойство("Взаимодействие") Тогда
		Взаимодействие	= Параметры.Взаимодействие;
	КонецЕсли;
// -CRM
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// установим текущий вариант
	КомандаТекущегоВарианта = Команды["КомандаВариант" + ИДВарианта];
	ПанельВариантовВыбратьВариант(КомандаТекущегоВарианта, Ложь);
	
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
		
	// +ПричинаОтказа
	ПроверкаНаВидимостьПричинаОтказа();
	// -ПричинаОтказа	
	
	// Всегда размещать это условие в конце процедуры.
	Если СписокФайловПисьма.Количество() > 0 Тогда
		НовоеОповещение = Новый ОписаниеОповещения("ВыборФайловДляКопирования", ЭтотОбъект);
		ПараметрыФормы = Новый Структура ("СписокФайлов", СписокФайловПисьма);
		ОткрытьФорму("ОбщаяФорма.CRM_ФормаВыбораФайловДляКопирования", ПараметрыФормы,,,,,НовоеОповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Элементы.ГруппаКоманднаяПанельТовары.Доступность = НЕ ТолькоПросмотр;
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	
	Если ТекущийОбъект.Проведен Тогда
		ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(ТекущийОбъект.Менеджер,Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма, ТекущийОбъект.Ссылка);
		Если (НЕ ПараметрыОповещения = Неопределено) И (ТекущийОбъект.СуммаДокумента >= ПараметрыОповещения[0].Сумма) Тогда
			//
			CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
&НаКлиенте
Процедура ПослеЗаписи()
	
	Оповестить();
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
	И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		ПроверитьТипОснования();
		
	КонецЕсли;
	
	Элементы.Ответственный.ТолькоПросмотр = Истина;
	Элементы.Ответственный.КнопкаВыбора = Ложь;
	
	Если ЗакрыватьПослеЗаписи Тогда
		Закрыть();
	КонецЕсли;
// +CRM
	Если ЗначениеЗаполнено(Взаимодействие) Тогда
		CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие, Объект.Ссылка);
	КонецЕсли;
	НеПроверятьВарианты = Ложь;
// -CRM
	
КонецПроцедуры // ПослеЗаписи()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Проверим на наличие утвержденого варианта.
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И
		НЕ НеПроверятьВарианты И (Модифицированность Или (Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ДокументОснование)) И Объект.Товары.Количество() > 0) Тогда
		СтрокиУтвержденногоВарианта = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден",Истина));

		Если СтрокиУтвержденногоВарианта.Количество() = 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, ПараметрыЗаписи);
			Если СписокИменВариантов.Количество() = 1 И АвтоматическиУтверждатьЕдинственныйВариант Тогда
				СтрокиТекущегоВарианта =Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", ИДВарианта));
				Если СтрокиТекущегоВарианта.Количество() > 0 Тогда
					КомандаУтвердитьВариант(Неопределено);
				КонецЕсли;
			ИначеЕсли ПриПроведениеПредлагатьУтверждениеВарианта Тогда
					
					ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Отсутствует утвержденный вариант!
										|Утвердить текущий?'"), РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
					Отказ = Истина;
					Возврат;
					
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Запишем комментарии вариантов из временной таблицы в табличную часть.
	
	ЗаписатьКомментарийВарианта(ИДВарианта);
	
	Для каждого СтрокаТаблицыВариантов Из ТаблицаКомментариевВариантов Цикл
		
		НайденныеСтрокиТЧЗаказы = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", СтрокаТаблицыВариантов.ИДВарианта));
		
		Если НайденныеСтрокиТЧЗаказы.Количество() > 0 Тогда
			
			СтрокиТабличнойЧастиКомментарии = Объект.CRM_КомментарииВариантов.НайтиСтроки(Новый Структура("ИДВарианта", СтрокаТаблицыВариантов.ИДВарианта));
			
			Если СтрокиТабличнойЧастиКомментарии.Количество() > 0 Тогда
				СтрокаТабличнойЧастиКомментарии = СтрокиТабличнойЧастиКомментарии[0];
			Иначе
				СтрокаТабличнойЧастиКомментарии				= Объект.CRM_КомментарииВариантов.Добавить();
				СтрокаТабличнойЧастиКомментарии.ИДВарианта 	= СтрокаТаблицыВариантов.ИДВарианта;
			КонецЕсли;

			СтрокаТабличнойЧастиКомментарии.КомментарийВарианта = СтрокаТаблицыВариантов.КомментарийВарианта;

		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// Проверим, можно ли утвердить новый вариант.
		СтрокиТекущегоВарианта =Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", ИДВарианта));
		Если СтрокиТекущегоВарианта.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Текущий вариант не будет утвержден по причине: вариант не содержит строк.'"));
		Иначе
			КомандаУтвердитьВариант(Неопределено);
		КонецЕсли;
		НеПроверятьВарианты = Истина;
		Записать(ПараметрыЗаписи);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		НеПроверятьВарианты = Истина;
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	CRM_ТаблицаИнтересовЗнач = РеквизитФормыВЗначение("CRM_ТаблицаИнтересов",Тип("ТаблицаЗначений"));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",CRM_ТаблицаИнтересовЗнач);
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьСтартСделки(Сделка)
	
	Если Сделка.Основание = Объект.Ссылка Тогда
		_СписокВведенныхНаОсновании.Добавить(Сделка.БизнесПроцесс);
		_БизнесПроцесс							= Сделка.БизнесПроцесс;
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ПричиныОтказов") Тогда
		Объект.CRM_ПричинаОтказа = ВыбранноеЗначение;
		Элементы.ПричинаОтказа.ОтметкаНезаполненного = (Элементы.ПричинаОтказа.Видимость И НЕ ЗначениеЗаполнено(Объект.CRM_ПричинаОтказа));
	
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
		ОчиститьПанельВариантов();
		ЗагрузитьИзШаблонаНаСервере(ВыбранноеЗначение);
		СформироватьПанельВариантов();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ЗакрыватьПослеЗаписи = Истина;
КонецПроцедуры


#Область ПроцедурыДействияКомандныхПанелейФормы

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля.
//
&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(Новый Структура("ПроверитьВсеТовары", Истина), ОписаниеОповещения);
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(РазрешеноИзменениеТоваров, ДополнительныеПараметры) Экспорт
	
	Если РазрешеноИзменениеТоваров Тогда
	
		ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.Валюта);
		
	КонецЕсли;
	
КонецПроцедуры // РедактироватьЦеныИВалюту()

// Служебная процедура, вынесенная из процедуры ЗаполнитьВыполнить из-за невозможности полностью осуществить ее на
// клиенте.
//
&НаСервере
Процедура ЗаполнитьДокументВСлучаеОтказаПерезаполнитьУтвержденныйВариант()
	
	ТаблицаЗапасов = Объект.Товары.Выгрузить(); 
	ОчиститьТабличнуюЧастьТовары();
	ЗаполнитьПоДокументу();
	Объект.Товары.Загрузить(ТаблицаЗапасов);	
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку Заполнить.
//
&НаКлиенте
Процедура ЗаполнитьВыполнить()
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ основание не заполнен!'"), , "ДокументОснование", "Объект");
		Возврат;
	КонецЕсли;
	КолвоВариантов = СписокИменВариантов.Количество();
	Если КолвоВариантов = 1 Тогда
		УтвержденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден", Истина));	
		Если УтвержденныеСтроки.Количество() > 0 Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьВыполнитьЗавершение", ЭтотОбъект, Новый Структура("КолвоВариантов", КолвоВариантов));
			ПоказатьВопрос(ОписаниеОповещения, НСтр("RU = 'Перезаполнить утвержденный вариант?'"), РежимДиалогаВопрос.ДаНет, 0);
			Возврат;
		Иначе
			ОчиститьТабличнуюЧастьТовары();
			ЗаполнитьПоДокументу();
			СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
			Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		КонецЕсли;
		
	ИначеЕсли КолвоВариантов > 1 Тогда 
		
		МассивСтрокВариантов = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта, CRM_Утвержден", ИДВарианта, Истина));
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьВыполнитьЗавершение", ЭтотОбъект, Новый Структура("КолвоВариантов, МассивСтрокВариантов", КолвоВариантов, МассивСтрокВариантов));
		Если  МассивСтрокВариантов.Количество() > 0 Тогда
			
			Кнопки = Новый СписокЗначений();
			Кнопки.Добавить("Да", "Да, удалить");
			Кнопки.Добавить("Нет", "Нет, заменить только текущий");
			Кнопки.Добавить("Ничего", "Не изменять никакие варианты");
			
			ПоказатьВопрос(ОписаниеОповещения, НСТР("ru = 'В коммерческом предложении несколько вариантов. Будет перезаполнен текущий УТВЕРЖДЕННЫЙ вариант. Удалить остальные варианты? '"), Кнопки, 0, "Ничего"); 
			Возврат;
		Иначе	
			Кнопки = Новый СписокЗначений();
			Кнопки.Добавить("Да", "Да, удалить");
			Кнопки.Добавить("Нет", "Нет, заменить только текущий");
			ПоказатьВопрос(ОписаниеОповещения, НСТР("ru = 'В коммерческом предложении несколько вариантов. Будет перезаполнен текущий вариант. Удалить остальные варианты? '"), Кнопки, 0, "Да"); 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	
КонецПроцедуры  // ЗаполнитьВыполнить()

&НаКлиенте
Процедура ЗаполнитьВыполнитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.КолвоВариантов = 1 Тогда
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОчиститьТабличнуюЧастьТовары();
			ЗаполнитьПоДокументу();
			СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
			Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		Иначе
			ЗаполнитьДокументВСлучаеОтказаПерезаполнитьУтвержденныйВариант();
			СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
			Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры.КолвоВариантов > 1 Тогда 
		
		Если  ДополнительныеПараметры.МассивСтрокВариантов.Количество() > 0 Тогда
			
			Если Ответ = "Да" Тогда
				ОчиститьТабличнуюЧастьТовары();
				УдалитьВсеВариантыКромеТекущего();
				ЗаполнитьПоДокументу();
				СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
				Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
			ИначеЕсли Ответ = "Нет" Тогда
				СтрокиТоваров = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", ИДВарианта));
				Для каждого СтрокаТоваров Из СтрокиТоваров Цикл
					Объект.Товары.Удалить(СтрокаТоваров);
				КонецЦикла;
				ЗаполнитьПоДокументу();
				СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
				Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
			ИначеЕсли Ответ = "Ничего" Тогда
				ЗаполнитьПоДокументу();
				СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
				Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
			КонецЕсли;
			
		Иначе	
			Если Ответ = "Да" Тогда
				ОчиститьТабличнуюЧастьТовары();
				УдалитьВсеВариантыКромеТекущего();
				ЗаполнитьПоДокументу();
				СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
				Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
			ИначеЕсли Ответ =  "Нет" Тогда
				СтрокиТоваров = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", ИДВарианта));
				Для каждого СтрокаТоваров Из СтрокиТоваров Цикл
					Объект.Товары.Удалить(СтрокаТоваров);
				КонецЦикла;	
				ЗаполнитьПоДокументу();
				СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
				Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	
КонецПроцедуры  // ЗаполнитьВыполнить()

&НаСервере
Процедура ОчиститьТабличнуюЧастьТовары()
	
	Объект.Товары.Очистить();
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеВариантыКромеТекущего()
	УдаляемыеВарианты = Новый Массив;
	Для каждого Стр Из СписокИменВариантов Цикл
		Если Стр.Значение <> ИДВарианта Тогда
			КнопкиВариантов = Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы;
			УдаляемаяКнопка = Элементы["Вариант" + Стр.Значение];
			ИндексУдаляемойКнопки = КнопкиВариантов.Индекс(УдаляемаяКнопка);
			// Удалим имя кнопки из списка имен;
			УдаляемыеВарианты.Добавить(Стр);
			
			// удалим кнопку варианта
			УдалитьКнопкуВарианта("Вариант" + Стр.Значение);
			
			// Удалим комментарий варианта.
			МассивСтрокТаблицыКомментариев = ТаблицаКомментариевВариантов.НайтиСтроки(Новый Структура("ИДВарианта", Стр.Значение));
			
			Если МассивСтрокТаблицыКомментариев.Количество() > 0 Тогда
				
				СтрокаТаблицыКомментариев = МассивСтрокТаблицыКомментариев[0];
				ТаблицаКомментариевВариантов.Удалить(ТаблицаКомментариевВариантов.Индекс(СтрокаТаблицыКомментариев));
				
			КонецЕсли;
			
			МассивСтрокТаблицыКомментариев = Объект.CRM_КомментарииВариантов.НайтиСтроки(Новый Структура("ИДВарианта", Стр.Значение));
			
			Если МассивСтрокТаблицыКомментариев.Количество() > 0 Тогда
				
				СтрокаТаблицыКомментариев = МассивСтрокТаблицыКомментариев[0];
				Объект.CRM_КомментарииВариантов.Удалить(СтрокаТаблицыКомментариев);
				
			КонецЕсли;
			
			Если КнопкиВариантов.Количество() = 2 Тогда // Остался один вариант + кнопка добавления
				// сделаем активным единственный оставшийся вариант.
				КнопкаТекущегоВарианта = КнопкиВариантов[0];
				
			ИначеЕсли КнопкиВариантов.Количество() = ИндексУдаляемойКнопки + 1 Тогда // Посл. справа кнопка варианта.
				
				// Сделаем активным предыдущий вариант.
				КнопкаТекущегоВарианта = КнопкиВариантов[ИндексУдаляемойКнопки - 1];
				
			Иначе
				
				// Сделаем активным следующий вариант.
				КнопкаТекущегоВарианта = КнопкиВариантов[ИндексУдаляемойКнопки];
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдалитьВариант Из УдаляемыеВарианты Цикл
		СписокИменВариантов.Удалить(УдалитьВариант);
	КонецЦикла;
	
	// Если в КП только один вариант, то у него номер обязательно 1.
	Если СписокИменВариантов.Количество() = 1 Тогда	
		КнопкаТекущегоВарианта.Заголовок = "Вариант 1";
	КонецЕсли;
	ПанельВариантовВыбратьВариант(Команды["Команда" + КнопкаТекущегоВарианта.Имя], Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСдвинутьВверх(Команда)
	Попытка
		ИндексТекСтроки = Объект.Товары.Индекс(Элементы.Товары.ТекущиеДанные);
		Объект.Товары.Сдвинуть(ИндексТекСтроки, -1);
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", ИДВарианта);
		Модифицированность = Истина;
		
		ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	Исключение КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСдвинутьВниз(Команда)
	Попытка
		ИндексТекСтроки = Объект.Товары.Индекс(Элементы.Товары.ТекущиеДанные);
		Объект.Товары.Сдвинуть(ИндексТекСтроки, 1);
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", ИДВарианта);
		Модифицированность = Истина;
		
		ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	Исключение КонецПопытки;
КонецПроцедуры

// +CRM
&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти
// -CRM

#Область ВыполнениеКомандПодключаемыхОтчетовИОбработок

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если СтрНайти(Команда.Имя, "ПодменюПечать")>0 Тогда
		Если НЕ ПроверитьЗаполнение() Тогда Возврат; КонецЕсли;
		ВыбранныйВариант =Неопределено;
			
		Варианты = ПолучитьВарианты();
		ОписаниеКоманды = ПодключаемыеКомандыКлиентПовтИсп.ОписаниеКоманды(Команда.Имя, ЭтотОбъект["ПараметрыПодключаемыхКоманд"].АдресТаблицыКоманд);
		Если СтрНайти(ОписаниеКоманды.Идентификатор, "Договор") = 0 Тогда
			Варианты.Добавить(0,"Все варианты");
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ВыполнитьКомандуЗавершение", ЭтотОбъект, Команда);
		Варианты.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вариант для печати'"));
	Иначе	
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЗавершение(РезультатВыбора, Команда) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	Если РезультатВыбора.Значение <> Неопределено Тогда
		ВыбранныйВариант = РезультатВыбора.Значение;
		CRM_УправлениеПечатьюВызовСервера.ПоместитьВариантНаПечатьВХранилище(ВыбранныйВариант);
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовШапки

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением, ВалютаРасчетов);
		
		Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
			ПересчитатьКурсКратностьВалютыРасчетов(СтруктураДанные);
		КонецЕсли;	
		
		СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
		Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Объект.Договор = CRM_ОбщегоНазначенияСервер.ПолучитьДоговорПартнера(Объект.Партнер, Объект.Организация);
	ДоговорПриИзменении(Элементы.Договор);
	СтруктураНадписи = Новый Структура("ВидЦен, ВидСкидки, Валюта, ВалютаРасчетов, Курс, ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта", Объект.ВидЦен, Объект.ВидСкидкиНаценки, Объект.Валюта, ВалютаРасчетов, Объект.Курс, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, КурсНациональнаяВалюта);
	Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры // ОрганизацияПриИзменении()


&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Партнер.
// Выполняет очистку договора и табличной части.
//
Процедура ПартнерПриИзменении(Элемент)
	
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	
	ПартнерПередИзменением = Партнер;
	Партнер = Объект.Партнер;
	
	ДополнительныеПараметры = Новый Структура("ПартнерПередИзменением", ПартнерПередИзменением);
	Если ПартнерПередИзменением <> Объект.Партнер Тогда
		
		СтруктураДанные = ПолучитьДанныеПартнерПриИзменении(Объект.Дата, Объект.Валюта, Объект.Партнер, Объект.Организация, Объект.CRM_Проект);
		
		Объект.Договор = СтруктураДанные.Договор;
		ДоговорПередИзменением = Договор;
		Договор = Объект.Договор;
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
		Если НЕ СтруктураДанные.ЦенаВключаетНДС = Неопределено Тогда
			Объект.ЦенаВключаетНДС = СтруктураДанные.ЦенаВключаетНДС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
		Объект.КонтактноеЛицо = СтруктураДанные.ОсновноеКонтактноеЛицо;
		
		ИзменилсяВидЦен = Объект.ВидЦен <> СтруктураДанные.ВидЦен И ЗначениеЗаполнено(СтруктураДанные.ВидЦен);
		ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> СтруктураДанные.ВидСкидкиНаценки И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки);
		ДополнительныеПараметры = Новый Структура("ПартнерПередИзменением, ИзменилсяВидЦен, ИзменилсяВидСкидки, ВалютаРасчетовПередИзменением, СтруктураДанные, ДоговорПередИзменением",
												ПартнерПередИзменением, ИзменилсяВидЦен, ИзменилсяВидСкидки, ВалютаРасчетовПередИзменением, СтруктураДанные, ДоговорПередИзменением);
		Если ЗначениеЗаполнено(Объект.Договор) И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки) Тогда
						
			Сообщение = НСтр("ru = 'Договор с партнером предусматривает условия цен и скидок, отличные от установленных в документе! 
									|Пересчитать документ в соответствии с договором?'");
									
			ОписаниеОповещения = Новый ОписаниеОповещения("ДоговорПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);						
			ПоказатьВопрос(ОписаниеОповещения, Сообщение, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		ПартнерПриИзмененииПродолжение(Истина, ДополнительныеПараметры);
	КонецЕсли;
	ПерезаполнитьПодсказкуОбАктивныхИнтересах();	
		
КонецПроцедуры // ПартнерПриИзменении()

&НаКлиенте
Процедура ПартнерПриИзмененииПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ПартнерПередИзменением <> Объект.Партнер Тогда
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Если ДополнительныеПараметры.ИзменилсяВидЦен Тогда
				Объект.ВидЦен = ДополнительныеПараметры.СтруктураДанные.ВидЦен;
			КонецЕсли; 
			Если ДополнительныеПараметры.ИзменилсяВидСкидки Тогда
				Объект.ВидСкидкиНаценки = ДополнительныеПараметры.СтруктураДанные.ВидСкидкиНаценки;
			КонецЕсли; 
			СтруктураНадписи = Новый Структура("Валюта, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, ЦенаВключаетНДС, УчетВалютныхОпераций, ВидЦен, ВидСкидки", Объект.Валюта, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, Объект.ВидЦен, Объект.ВидСкидкиНаценки);
			Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
			
			// Пересчитываем цены по виду цен.
			Если Объект.Товары.Количество() > 0 Тогда
				//CRM_ОбщегоНазначенияСервер.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Товары", Истина);
				ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенСервер("Товары", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(Объект.Договор)
			И ЗначениеЗаполнено(ВалютаРасчетов)
			И Объект.Договор <> ДополнительныеПараметры.ДоговорПередИзменением
			И ДополнительныеПараметры.ВалютаРасчетовПередИзменением <> ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов)
			И Объект.Валюта <> ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов Тогда
			
			Объект.Валюта = ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов;
			ОписаниеОповещения = Новый ОписаниеОповещения("ПартнерПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьПредупреждение(ОписаниеОповещения, НСтр("ru = 'Изменилась валюта расчетов по договору с партнером! Необходимо проверить валюту документа!'"));
			Возврат;
		КонецЕсли;
		ВалютаРасчетов = ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов;
	КонецЕсли;
	ПерезаполнитьПодсказкуОбАктивныхИнтересах();	
	
КонецПроцедуры // ПартнерПриИзменении()

&НаКлиенте
Процедура ПартнерПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПартнерПриИзмененииЗавершениеКонец", ЭтотОбъект, ДополнительныеПараметры);
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(ДополнительныеПараметры.ВалютаРасчетовПередИзменением, Истина, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзмененииЗавершениеКонец(Результат, ДополнительныеПараметры) Экспорт
	
	ВалютаРасчетов = ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов;
	ПерезаполнитьПодсказкуОбАктивныхИнтересах();	

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик выбора контактного лица.
//
Процедура КонтактноеЛицоОбработкаВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	Объект.Партнер	= CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(РезультатЗакрытия, "Владелец");
	ПартнерПриИзменении(Элементы.Контрагент);
	Объект.КонтактноеЛицо	= РезультатЗакрытия;
КонецПроцедуры // КонтактноеЛицоОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "КонтактноеЛицо".
//
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда Возврат; КонецЕсли;
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеВыбора		= Новый ОписаниеОповещения("КонтактноеЛицоОбработкаВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы			= Новый Структура;
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, Элемент, , , , ОповещениеВыбора);
КонецПроцедуры // КонтактноеЛицоНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Договор.
// Заполняет реквизиты формы курс и кратность.
//
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.Договор;
	
	Если ДоговорПередИзменением <> Объект.Договор Тогда
		
		СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.Валюта, Объект.Договор);
		
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда 
			Объект.Курс      = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.Кратность = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1, СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
		
		ИзменилсяВидЦен = Объект.ВидЦен <> СтруктураДанные.ВидЦен И ЗначениеЗаполнено(СтруктураДанные.ВидЦен);
		ИзменилсяВидСкидки = Объект.ВидСкидкиНаценки <> СтруктураДанные.ВидСкидкиНаценки И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки);
		ДополнительныеПараметры = Новый Структура("ИзменилсяВидЦен, ИзменилсяВидСкидки, ВалютаРасчетовПередИзменением, СтруктураДанные", ИзменилсяВидЦен, ИзменилсяВидСкидки, ВалютаРасчетовПередИзменением, СтруктураДанные);
		Если ЗначениеЗаполнено(Объект.Договор) И (ИзменилсяВидЦен ИЛИ ИзменилсяВидСкидки) Тогда
			
			Сообщение = НСтр("ru = 'Договор с партнером предусматривает условия цен и скидок, отличные от установленных в документе! 
									|Пересчитать документ в соответствии с договором?'");
									
			ОписаниеОповещения = Новый ОписаниеОповещения("ДоговорПриИзмененииПродолжение", ЭтотОбъект, ДополнительныеПараметры);						
			ПоказатьВопрос(ОписаниеОповещения, Сообщение, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ДоговорПриИзмененииПродолжение(Неопределено, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры // ДоговорПриИзменении()

&НаКлиенте
Процедура ДоговорПриИзмененииПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если ДополнительныеПараметры.ИзменилсяВидЦен Тогда
			Объект.ВидЦен = ДополнительныеПараметры.СтруктураДанные.ВидЦен;
		КонецЕсли; 
		Если ДополнительныеПараметры.ИзменилсяВидСкидки Тогда
			Объект.ВидСкидкиНаценки = ДополнительныеПараметры.СтруктураДанные.ВидСкидкиНаценки;
		КонецЕсли; 
		СтруктураНадписи = Новый Структура("Валюта, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, ЦенаВключаетНДС, УчетВалютныхОпераций, ВидЦен, ВидСкидки", Объект.Валюта, ВалютаРасчетов, Объект.Курс, КурсНациональнаяВалюта, Объект.ЦенаВключаетНДС, УчетВалютныхОпераций, Объект.ВидЦен, Объект.ВидСкидкиНаценки);
		Элементы.РедактироватьЦеныИВалюту.Заголовок = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
		
		// Пересчитываем цены по виду цен.
		Если Объект.Товары.Количество() > 0 Тогда
			//CRM_ОбщегоНазначенияСервер.ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ЭтотОбъект, "Товары", Истина);
			ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенСервер("Товары", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.Договор)
		И ЗначениеЗаполнено(ВалютаРасчетов)
		И ДополнительныеПараметры.ВалютаРасчетовПередИзменением <> ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов)
		И Объект.Валюта <> ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов Тогда
		
		Объект.Валюта = ДополнительныеПараметры.СтруктураДанные.ВалютаРасчетов;
		ОписаниеОповещения = Новый ОписаниеОповещения("ДоговорПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьПредупреждение(ОписаниеОповещения, НСтр("ru = 'Изменилась валюта расчетов по договору с партнером! Необходимо проверить валюту документа!'"));
	КонецЕсли;
	
КонецПроцедуры // ДоговорПриИзменении()

&НаКлиенте
Процедура ДоговорПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(ДополнительныеПараметры.ВалютаРасчетовПередИзменением, Истина, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("КомментарийЗавершение", ЭтотОбъект);
	ПоказатьВводСтроки(ОписаниеОповещения, Объект.Комментарий, НСтр("ru = 'Введите комментарий к документу'"), , Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийЗавершение(ВведенныйКомментарий, ДополнительныеПараметры) Экспорт
	Если ВведенныйКомментарий<>Неопределено Тогда
		Объект.Комментарий =  ВведенныйКомментарий;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	ПроверкаНаВидимостьПричинаОтказа();	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовТабличнойЧасти

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.CRM_Разделители") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("Организация", 	 Объект.Организация);
	СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
	СтруктураДанные.Вставить("ВидЦен",			 Объект.ВидЦен);
	СтруктураДанные.Вставить("Валюта",	 Объект.Валюта);
	СтруктураДанные.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Коэффициент",		 1);
	СтруктураДанные.Вставить("ВидСкидкиНаценки", Объект.ВидСкидкиНаценки);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ПроцентРучнойСкидки = СтруктураДанные.ПроцентРучнойСкидки;
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.Содержание = СтруктураДанные.Содержание;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Характеристика.
//
&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("ДатаОбработки",	 	Объект.Дата);
	СтруктураДанные.Вставить("ВидЦен",			 	Объект.ВидЦен);
	СтруктураДанные.Вставить("Валюта",	 	Объект.Валюта);
	СтруктураДанные.Вставить("ЦенаВключаетНДС", 	Объект.ЦенаВключаетНДС);
	
	СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаТабличнойЧасти.СтавкаНДС);
	СтруктураДанные.Вставить("Номенклатура",	 	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	 	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ЕдиницаИзмерения", 	СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.Содержание = СтруктураДанные.Содержание;
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ТоварыХарактеристикаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Количество.
//
&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события НачалоВыбораИзСписка поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
	
	Для каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияНачалоВыбораИзСписка()

// Процедура - обработчик события ОбработкаВыбора поля ввода ЕдиницаИзмерения.
//
&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение 
	 ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);

	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ТоварыЕдиницаИзмеренияОбработкаВыбора()

// Процедура - обработчик события ПриИзменении поля ввода Цена.
//
&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ПроцентСкидкиНаценки.
//
&НаКлиенте
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ТоварыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Сумма.
//
&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	// Скидка.
	Если СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 100 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентРучнойСкидки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / ((1 - СтрокаТабличнойЧасти.ПроцентРучнойСкидки / 100) * СтрокаТабличнойЧасти.Количество);
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры  // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтавкаНДС.
//
&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // ТоварыСуммаНДСПриИзменении()

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Элемент.ТекущиеДанные.CRM_ИДВарианта  = ИДВарианта;
	Элемент.ТекущиеДанные.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(ИДВарианта);
	
	ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Элементы.ТоварыНоменклатура.ОграничениеТипа = ТипНоменклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РасчитатьИтогоПоВарианту();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	РасчитатьИтогоПоВарианту();
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДляРаботыСВариантами

&НаСервере
Функция ПолучитьВарианты()
	
	Возврат CRM_МетодыМодулейМенеджеровДокументов.КППолучитьВарианты(Объект.Ссылка);
	
КонецФункции

&НаКлиенте
Процедура ПанельВариантовВыбратьВариант(Команда, ЗаписыватьКомментарийВарианта = Неопределено)
	
	ИмяКоманды = Команда.Имя;
	ИмяКнопки = "Вариант" + СтрЗаменить(ИмяКоманды, "КомандаВариант", "");
	Кнопка = Элементы[ИмяКнопки];
	
	Если Кнопка.Пометка Тогда
		
		// Запустим механизм переименования кнопки.
		КомандаПереименоватьВариант(Команда);
		
	Иначе
		
		// Запустим механизм переключения варианта.
		ЗаписыватьКомментарий = ?(ЗаписыватьКомментарийВарианта = Неопределено, Истина, ЗаписыватьКомментарийВарианта);
	
		Если ЗаписыватьКомментарий Тогда
			
			// Запишем содержимое комментария варианта.
			ЗаписатьКомментарийВарианта(ИДВарианта);
		
		КонецЕсли;
		
		// Получим идентификатор выбранного варианта.
		ИДВарианта = ПолучитьИдентификаторВарианта(Кнопка);
		
		// Установим отбор номенклатуры по выбранному варианту.
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", ИДВарианта);
		
		МассивСтрокВариантов = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", ИДВарианта));
		
		Если МассивСтрокВариантов.Количество() = 0 Тогда
			Элементы.КнопкаУтвердитьВариант.Пометка = Ложь;
		Иначе
			Элементы.КнопкаУтвердитьВариант.Пометка = Найти(Кнопка.Заголовок, НСтр("ru = '(Утв.)'"));
		КонецЕсли;
		
		// Установим пометку у выбранного варианта.
		Для каждого КнопкаПанелиВариантов Из Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы Цикл
			КнопкаПанелиВариантов.Пометка = Ложь;
		КонецЦикла;
		
		Кнопка.Пометка = Истина;
		
		// Установим комментарий выбранного варианта.
		УстановитьКомментарийВарианта(ИДварианта);
		
		СписокЗагруженПриСменеВарианта = Истина;
		
		РасчитатьИтогоПоВарианту();
	КонецЕсли;
	
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
КонецПроцедуры

// Устанавливает значение комментария из табличной части в поле ввода.
//
// Параметры:
//  НомерВарианта – Число – номер варианта.
//
&НаКлиенте
Процедура УстановитьКомментарийВарианта(НомерВарианта)
	
	СтрокиКомментариев = ТаблицаКомментариевВариантов.НайтиСтроки(Новый Структура("ИДВарианта",НомерВарианта));
	
	Если СтрокиКомментариев.Количество() = 0 Тогда
		КомментарийВарианта =  "";
	Иначе
		КомментарийВарианта = СтрокиКомментариев[0].КомментарийВарианта;
	КонецЕсли;

КонецПроцедуры // УстановитьКомментарийВарианта()

&НаКлиенте
Процедура КомандаДобавитьВариант(Команда)
	
	// Получим номер нового варианта.
	НовыйНомерВарианта = ПолучитьИдентификаторВарианта();
	СписокИменВариантов.Добавить(НовыйНомерВарианта, "Вариант "+НовыйНомерВарианта);
	
	// Добавим кнопку нового варианта на панель вариантов.
	СоздатьКнопкуВарианта(НовыйНомерВарианта, СтрЗаменить(НСтр("ru = 'Вариант %Номер%'"), "%Номер%", НовыйНомерВарианта));
	ПанельВариантовВыбратьВариант(Команды["КомандаВариант" + НовыйНомерВарианта]);
	
КонецПроцедуры

// Возвращает номер Варианта
//
// Параметры:
//	Кнопка формф
//	Если кнопка указана, возвращается номер, иначе генерируется новый.
// Возвращаемое значение:
//   Число   
//
&НаКлиенте
Функция ПолучитьИдентификаторВарианта(Кнопка = Неопределено)
	
	Если Кнопка = Неопределено Тогда
		
		// Найдем идентификатор нового варианта.
		СписокНомеров = СписокИменВариантов.Скопировать();
		СписокНомеров.СортироватьПоЗначению(НаправлениеСортировки.Возр);

		НовыйИдентификатор = СписокНомеров[СписокНомеров.Количество()-1].Значение + 1;
		
		Возврат НовыйИдентификатор;
		
	Иначе
		
		// Найдем идентификатор варианта нажатой кнопки.
		ИндексКнопки = Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы.Индекс(Кнопка);
		Возврат СписокИменВариантов[ИндексКнопки].Значение;
		
	КонецЕсли;
КонецФункции // ПолучитьИдентификаторВарианта()

// Удаление элемента формы
//
&НаСервере
Процедура УдалитьКнопкуВарианта(ИмяУдаляемогоЭлемента)
	
	// удалим элемент (кнопку)
	УдаляемыйЭлемент = Элементы[ИмяУдаляемогоЭлемента];
	Элементы.Удалить(УдаляемыйЭлемент);
	
	// удалим команду кнопки
	УдаляемаяКоманда = Команды["Команда" + ИмяУдаляемогоЭлемента];
	Команды.Удалить(УдаляемаяКоманда);

КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьВариант(Команда)
	
	КнопкиВариантов = Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы;

	Если КнопкиВариантов.Количество() = 2 Тогда // Один вариант + кнопка добавления.
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя удалить единственный вариант!'"));
		Возврат;
	КонецЕсли;
	
	// Запросим подтверждение удаления варианта.
	ТекстВопроса = НСтр("ru = 'Удалить вариант?'");
	Если Элементы.КнопкаУтвердитьВариант.Пометка Тогда
		ТекстВопроса = НСтр("ru = 'Данный вариант утвержден!
					   |'") + ТекстВопроса; 
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаУдалитьВариантЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьВариантЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КнопкиВариантов = Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы;
	УдаляемаяКнопка = Элементы["Вариант" + ИдВарианта];
	ИндексУдаляемойКнопки = КнопкиВариантов.Индекс(УдаляемаяКнопка);
	
	// Удалим имя кнопки из списка имен;
	СписокИменВариантов.Удалить(ИндексУдаляемойКнопки);
	
	// Удалим номенклатуру варианта.
	СтрокиТоваров = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", ИДВарианта));
	Для каждого СтрокаТоваров Из СтрокиТоваров Цикл
		Объект.Товары.Удалить(СтрокаТоваров);
	КонецЦикла;
	
	// удалим кнопку варианта
	УдалитьКнопкуВарианта("Вариант" + ИдВарианта);
	
	// Удалим комментарий варианта.
	МассивСтрокТаблицыКомментариев = ТаблицаКомментариевВариантов.НайтиСтроки(Новый Структура("ИДВарианта", ИДВарианта));
	
	Если МассивСтрокТаблицыКомментариев.Количество() > 0 Тогда
		
		СтрокаТаблицыКомментариев = МассивСтрокТаблицыКомментариев[0];
		ТаблицаКомментариевВариантов.Удалить(ТаблицаКомментариевВариантов.Индекс(СтрокаТаблицыКомментариев));
	
	КонецЕсли;
	
	МассивСтрокТаблицыКомментариев = Объект.CRM_КомментарииВариантов.НайтиСтроки(Новый Структура("ИДВарианта", ИДВарианта));
	
	Если МассивСтрокТаблицыКомментариев.Количество() > 0 Тогда
		
		СтрокаТаблицыКомментариев = МассивСтрокТаблицыКомментариев[0];
		Объект.CRM_КомментарииВариантов.Удалить(СтрокаТаблицыКомментариев);
	
	КонецЕсли;
	
	Если КнопкиВариантов.Количество() = 2 Тогда // Остался один вариант + кнопка добавления
		// сделаем активным единственный оставшийся вариант.
		КнопкаТекущегоВарианта = КнопкиВариантов[0];
	
	ИначеЕсли КнопкиВариантов.Количество() = ИндексУдаляемойКнопки + 1 Тогда // Посл. справа кнопка варианта.
		
		// Сделаем активным предыдущий вариант.
		КнопкаТекущегоВарианта = КнопкиВариантов[ИндексУдаляемойКнопки - 1];
		
	Иначе
		
		// Сделаем активным следующий вариант.
		КнопкаТекущегоВарианта = КнопкиВариантов[ИндексУдаляемойКнопки];
		
	КонецЕсли;
	
	ПанельВариантовВыбратьВариант(Команды["Команда" + КнопкаТекущегоВарианта.Имя], Ложь);

КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьВариант(Команда)
	
	СтрокиТоваров = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", ИДВарианта));
	
	НовыйНомерВарианта = ПолучитьИдентификаторВарианта();
	СписокИменВариантов.Добавить(НовыйНомерВарианта, "Вариант "+НовыйНомерВарианта);
	
	Для каждого СтрокаТоваров Из СтрокиТоваров Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
		НоваяСтрока.CRM_ИДВарианта = НовыйНомерВарианта;
		НоваяСтрока.CRM_ИмяВарианта = "";
		НоваяСтрока.CRM_Утвержден = Ложь;
		
	КонецЦикла;
	
	// Скопируем комментарий варианта.
	
	СтрокаКомментарияНовогоВарианта = ТаблицаКомментариевВариантов.Добавить();
	СтрокаКомментарияНовогоВарианта.ИДВарианта = НовыйНомерВарианта;
	СтрокаКомментарияНовогоВарианта.КомментарийВарианта = КомментарийВарианта;
	
	// Добавим кнопку нового варианта на панель вариантов.
	СоздатьКнопкуВарианта(НовыйНомерВарианта, СтрЗаменить(НСтр("ru = 'Вариант %Номер%'"), "%Номер%", НовыйНомерВарианта));
	ПанельВариантовВыбратьВариант(Команды["КомандаВариант" + НовыйНомерВарианта]);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереименоватьВариант(Команда)
	
	ЭлементСпискаИменВариантов = СписокИменВариантов.НайтиПоЗначению(ИДВарианта);
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаПереименоватьВариантЗавершение", ЭтотОбъект, ЭлементСпискаИменВариантов);
	ПоказатьВводСтроки(ОписаниеОповещения, ЭлементСпискаИменВариантов.Представление, НСтр("ru = 'Введите новое имя варианта'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереименоватьВариантЗавершение(ИмяВарианта, ЭлементСпискаИменВариантов) Экспорт
	
	Если ИмяВарианта <> Неопределено Тогда
		
		ИмяВарианта = СокрЛП(ИмяВарианта);
		ИмяВарианта= ?(ИмяВарианта = "", "Вариант " + ИДВарианта, ИмяВарианта);
		СтароеИмяВарианта = ЭлементСпискаИменВариантов.Представление;
		ВариантУтвержден = Элементы.КнопкаУтвердитьВариант.Пометка;
		
		Если НЕ ИмяВарианта = СтароеИмяВарианта Тогда
			ЭлементСпискаИменВариантов.Представление = ИмяВарианта;
			
			СтрокиВариантов = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", ИДВарианта));
			
			Для каждого СтрокаВарианта Из СтрокиВариантов Цикл
				СтрокаВарианта.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(ИДВарианта);
			КонецЦикла;
			
			Элементы["Вариант" + ИДВарианта].Заголовок = ?(ВариантУтвержден, ИмяВарианта + НСтр("ru = ' (Утв.)'"), ИмяВарианта);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКнопкуПанелиВариантов(ИДВарианта)
	
	ИскомаяКоманда = Команды.Найти("КомандаВариант" + ИДВарианта);
	Если НЕ ИскомаяКоманда = Неопределено Тогда
		Команды.Удалить(ИскомаяКоманда);
	КонецЕсли;
	
	ИскомыйЭлемент = Элементы.Найти("Вариант" + ИДВарианта);
	Если НЕ ИскомыйЭлемент = Неопределено Тогда
		Элементы.Удалить(ИскомыйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все кнопки вариантов.
//
&НаСервере
Процедура ОчиститьПанельВариантов()
	
	Ном = 0;
	Для Каждого КомандаФормы Из Команды Цикл
		Если Найти(КомандаФормы.Имя, "КомандаВариант") > 0 Тогда
			Ном = Ном + 1;
		КонецЕсли;
	КонецЦикла;
	
	Пока Ном > 0 Цикл
		УдалитьКнопкуПанелиВариантов(Ном);
		Ном = Ном - 1;
	КонецЦикла;
	
КонецПроцедуры

// Создает команду и кнопку для варианта.
//
&НаСервере
Процедура СоздатьКнопкуВарианта(ИДНовогоВарианта, ЗаголовокКнопки)
	
	// создадим команду
	НоваяКоманда = Команды.Добавить("КомандаВариант" + ИДНовогоВарианта);
	НоваяКоманда.Заголовок = ЗаголовокКнопки;
	НоваяКоманда.Подсказка = НСтр("ru = 'Выбрать вариант'");
	НоваяКоманда.Действие  = "ПанельВариантовВыбратьВариант";
	
	// создадим кнопку
	НовыйЭлемент = Элементы.Добавить("Вариант" + ИДНовогоВарианта, Тип("КнопкаФормы"), Элементы.КоманднаяПанельВариантов);
	НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НовыйЭлемент.Заголовок = ЗаголовокКнопки;
	НовыйЭлемент.ИмяКоманды = НоваяКоманда.Имя;
	
	// Переместим в конец коллекции кнопку создания нового варианта.
	Элементы.Переместить(Элементы.КнопкаДобавитьВариант, Элементы.КоманднаяПанельВариантов);
КонецПроцедуры // СоздатьКнопкуВарианта()

// Формирует кнопки, "разделяющие" табличную часть товары по вариантам.
//
&НаСервере
Процедура СформироватьПанельВариантов()
	
	ТаблицаВариантов = Объект.Товары.Выгрузить();
	ТаблицаВариантов.Свернуть("CRM_ИДВарианта");
	ТаблицаВариантов.Сортировать("CRM_ИДВарианта");
	
	Если ТаблицаВариантов.Количество() = 0 Тогда // Создадим одну кнопку "по умолчанию"
		// создадим кнопку "по умолчанию".
		СоздатьКнопкуВарианта(1, НСтр("ru = 'Вариант 1'"));
		Возврат;
	Иначе
		СписокИменВариантов.Очистить();
	КонецЕсли;
		
	// Заполним список имен вариантов.
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		СписокИменВариантов.Добавить(СтрокаТаблицы.CRM_ИДВарианта, ПолучитьИмяВариантаПоНомеру(СтрокаТаблицы.CRM_ИДВарианта));
	КонецЦикла;	
		
	Для Сч = 0 По ТаблицаВариантов.Количество()-1 Цикл

		СоздатьКнопкуВарианта(ТаблицаВариантов[Сч].CRM_ИДВарианта, СписокИменВариантов.НайтиПоЗначению(ТаблицаВариантов[Сч].CRM_ИДВарианта).Представление);

	КонецЦикла;
	
	// Найдем утвержденный вариант.
	УтвержденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден",Истина));
	ТекИДВарианта = ?(УтвержденныеСтроки.Количество() = 0, 0, УтвержденныеСтроки[0].CRM_ИДВарианта);
	
	Если ТекИДВарианта > 0 Тогда
		
		Кнопка = Элементы["Вариант"+ТекИДВарианта];
		Кнопка.Заголовок = Кнопка.Заголовок + НСтр("ru = ' (Утв.)'");
		ИДВарианта = ТекИДВарианта;
		
	Иначе
		// Сделаем активным первый вариант.
		ИДВарианта = ТаблицаВариантов[0].CRM_ИДВарианта;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя вараинта по номеру.
//
// Параметры:
//  НомерВарианта - Число - номер варианта;
//
// Возвращаемое значение:
//  Строка - Имя варианта.
//	
&НаСервере
Функция ПолучитьИмяВариантаПоНомеру(НомерВарианта) Экспорт
	
	ИмяВарианта = "";
	МассивСтрокВарианта = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", НомерВарианта));
	Если МассивСтрокВарианта.Количество() > 0 Тогда
		
		СтрокаВарианта = МассивСтрокВарианта[0];
		
		Если ПустаяСтрока(СтрокаВарианта.CRM_ИмяВарианта) Тогда
			ИмяВарианта = "Вариант " + НомерВарианта;
		Иначе
			ИмяВарианта = СтрокаВарианта.CRM_ИмяВарианта;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ИмяВарианта;
		
КонецФункции// ПолучитьИмяВариантаПоНомеру(НомерВарианта)

// записывает значение комментария из поля ввода в табличную часть.
//
// Параметры:
//  НомерВарианта – Число – номер варианта.
//
&НаКлиенте
Процедура ЗаписатьКомментарийВарианта(НомерВарианта)
	
	СтрокиКомментариев = ТаблицаКомментариевВариантов.НайтиСтроки(Новый Структура("ИДВарианта",НомерВарианта));
	
	Если СтрокиКомментариев.Количество() = 0 Тогда
		СтрокаКомментария = ТаблицаКомментариевВариантов.Добавить();
		СтрокаКомментария.ИДВарианта = НомерВарианта;
	Иначе
		СтрокаКомментария = СтрокиКомментариев[0];
	КонецЕсли;
	
	СтрокаКомментария.КомментарийВарианта = КомментарийВарианта;

КонецПроцедуры // ЗаписатьКомментарийВарианта()

&НаКлиенте
Процедура КомандаУтвердитьВариант(Команда)
	
	МассивСтрокВариантов = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", ИДВарианта));
	Если МассивСтрокВариантов.Количество() = 0 Тогда
		Элементы.КнопкаУтвердитьВариант.Пометка = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя утвердить вариант с незаполненной табличной частью!'"));
		Возврат;
	КонецЕсли;
	
	Элементы.КнопкаУтвердитьВариант.Пометка = НЕ Элементы.КнопкаУтвердитьВариант.Пометка;
	
	// по любому очищаем старую
	Для каждого КнопкаПанелиВариантов Из Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы Цикл
		КнопкаПанелиВариантов.Заголовок = СтрЗаменить(КнопкаПанелиВариантов.Заголовок, НСтр("ru = ' (Утв.)'"), "");
	КонецЦикла;

	УтвержденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден", Истина));
	Для Каждого Строка Из УтвержденныеСтроки Цикл
		Строка.CRM_Утвержден = Ложь;
	КонецЦикла;

	// Если пометка, тогда утверждаем.
	Если Элементы.КнопкаУтвердитьВариант.Пометка Тогда
		УтвердитьВариант(ИдВарианта);
		КнопкаУтверждаемогоВарианта = Элементы["Вариант" + ИдВарианта];
		КнопкаУтверждаемогоВарианта.Заголовок = КнопкаУтверждаемогоВарианта.Заголовок + НСтр("ru = ' (Утв.)'");
	КонецЕсли;
	
КонецПроцедуры  // КомандаУтвердитьВариант()

// Процедура предназначена для утверждения варианта.
//
&НаКлиенте
Процедура УтвердитьВариант(ИдентификаторВарианта = 0) Экспорт
	//
	УтвержденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден", Истина));
	Для Каждого Строка Из УтвержденныеСтроки Цикл
		Строка.CRM_Утвержден = Ложь;
	КонецЦикла;
	
	СтрокиКУтверждению = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта", ИдентификаторВарианта));
	Для Каждого Строка Из СтрокиКУтверждению Цикл
		Строка.CRM_Утвержден = Истина;
	КонецЦикла;
	
КонецПроцедуры  // УтвердитьВариант()

&НаКлиенте
Процедура КомментарийВариантаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("КомментарийВариантаЗавершение", ЭтотОбъект);
	ПоказатьВводСтроки(ОписаниеОповещения, КомментарийВарианта, НСтр("ru = 'Введите описание'"), , Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВариантаЗавершение(ВведенныйКомментарий, ДополнительныеПараметры) Экспорт
	Если ВведенныйКомментарий<>Неопределено Тогда
		КомментарийВарианта =  ВведенныйКомментарий;
	КонецЕсли;
КонецПроцедуры


// Возвращает имя варианта для занесения в табличную часть Товары.
//
// Параметры:
//  НомерВарианта - Число - номер варианта;
//
// Возвращаемое значение:
//  Строка - если имя варианта стандартное, возвращает пустую строку, иначе - имя варианта.
//	
&НаСервере
Функция ИмяВариантаДляТабличнойЧасти(НомерВарианта)
	ИмяВарианта = СписокИменВариантов.НайтиПоЗначению(НомерВарианта).Представление;
	ИмяВарианта = ?(ИмяВарианта = "Вариант " + НомерВарианта, "", ИмяВарианта);
	Возврат ИмяВарианта;
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ТипЗнч(Элементы.Товары.ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.CRM_Разделители") Тогда
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.CRM_Разделители");
	Иначе
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Период",			  Объект.Дата);
		ПараметрыФормы.Вставить("ВидЦен",			  Объект.ВидЦен);
		ПараметрыФормы.Вставить("ТекущаяСтрока",	  Элементы.Товары.ТекущиеДанные.Номенклатура);
		
		ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора",ПараметрыФормы,Элемент);
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРазделитель(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьРазделительПродолжение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРазделительПродолжение(РазрешеноИзменениеТоваров, ДополнительныеПараметры) Экспорт
	
	Если РазрешеноИзменениеТоваров Тогда
		
		Модифицированность = Истина;
		Разделитель = ПредопределенноеЗначение("Справочник.CRM_Разделители.ПустаяСсылка");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьРазделительЗавершение", ЭтотОбъект);
		ПоказатьВводЗначения(ОписаниеОповещения, Разделитель, "Выберите разделитель");
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРазделительЗавершение(Разделитель, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Разделитель) Тогда
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура = Разделитель;
		НоваяСтрока.CRM_ИДВарианта = ИДВарианта;
		НоваяСтрока.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(ИДВарианта);
		НоваяСтрока.CRM_ЭтоРазделитель = Истина;
		
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", ИДВарианта);
		
		ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Проверяет, есть ли товары, относящиеся к утвержденному варианту.
//
// Параметры:
//  СтруктураПараметров - Структура - может содержать следующие элементы:

// ВозвращаемоеЗначение:
//  Булево - Истина, если изменение табличной части "Товары" разрешено.
//
Процедура РазрешеноИзменениеТоваров(СтруктураПараметров = Неопределено, ОписаниеОповещенияОЗавершении)
	
	Перем ТоварыТекущаяСтрока, ПроверитьВсеТовары;
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура("ПроверитьВсеТовары", Ложь);
	КонецЕсли;
	
	СтруктураПараметров.Свойство("ТоварыТекущаяСтрока", ТоварыТекущаяСтрока);
	Если Не СтруктураПараметров.Свойство("ПроверитьВсеТовары" , ПроверитьВсеТовары) Тогда
		ПроверитьВсеТовары = Ложь;
	КонецЕсли;
	
	ИДУтвержденногоВарианта = 0;
	Если ТоварыТекущаяСтрока = Неопределено Тогда
		
		Если ПроверитьВсеТовары Тогда
			
			ИндексСтроки = 0;
			ТоварыКоличествоСтрок = Объект.Товары.Количество();
			
			Пока ИндексСтроки < ТоварыКоличествоСтрок И ИДУтвержденногоВарианта = 0 Цикл
				
				СтрокаТовары = Объект.Товары[ИндексСтроки];
				
				Если СтрокаТовары.CRM_Утвержден Тогда
					ИДУтвержденногоВарианта = СтрокаТовары.CRM_ИДВарианта;
				КонецЕсли;
				
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЦикла;
		
		Иначе	
			
			// Проверим только текущий вариант.
			СтрокиТекущегоВарианта = Объект.Товары.НайтиСтроки(Новый Структура("CRM_ИДВарианта",ИДВарианта));
			Если СтрокиТекущегоВарианта.Количество() > 0 Тогда
				СтрокаТовары = СтрокиТекущегоВарианта[0];
				Если СтрокаТовары.CRM_Утвержден Тогда
					ИДУтвержденногоВарианта = СтрокаТовары.CRM_ИДВарианта;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТоварыТекущаяСтрока.CRM_Утвержден Тогда
		
		ИДУтвержденногоВарианта = ТоварыТекущаяСтрока.CRM_ИДВарианта;

	КонецЕсли;
	
	Если ИДУтвержденногоВарианта > 0 Тогда
		
		ИмяВарианта = СписокИменВариантов.НайтиПоЗначению(ИДУтвержденногоВарианта).Представление;
		
		ТекстВопроса =НСтр("ru = ' Вариант """ + ИмяВарианта + """ утвержден!
					   |При внесении изменений в таблицу товаров и услуг
					   |статус ""Утвержден"" будет снят. Продолжить?'");
					   
		ОписаниеОповещения = Новый ОписаниеОповещения("РазрешеноИзменениеТоваровЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);			   
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
        Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина); 
	
КонецПроцедуры// Функция РазрешеноИзменениеТоваров()

&НаКлиенте
Процедура РазрешеноИзменениеТоваровЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Для каждого КнопкаПанелиВариантов Из Элементы.КоманднаяПанельВариантов.ПодчиненныеЭлементы Цикл
			КнопкаПанелиВариантов.Заголовок = СтрЗаменить(КнопкаПанелиВариантов.Заголовок, НСтр("ru = ' (Утв.)'"), "");
		КонецЦикла;
		
		УтвержденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("CRM_Утвержден", Истина));
		Для Каждого Строка Из УтвержденныеСтроки Цикл
			Строка.CRM_Утвержден = Ложь;
		КонецЦикла;
		
		Элементы.КнопкаУтвердитьВариант.Пометка = Ложь;
		
		РазрешеноИзменение = Истина;
		
	Иначе
		
		РазрешеноИзменение = Ложь;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, РазрешеноИзменение); 
	
КонецПроцедуры// Функция РазрешеноИзменениеТоваров()

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыПередУдалениемЗавершение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(Новый Структура("ТоварыТекущаяСтрока", Элемент.ТекущиеДанные), ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалениемЗавершение(РазрешеноИзменениеТоваров, ДополнительныеПараметры) Экспорт
	
	Если РазрешеноИзменениеТоваров Тогда
		Объект.Товары.Удалить(Объект.Товары.Индекс(Элементы.Товары.ТекущиеДанные));
		Модифицированность = Истина;
		ТоварыПослеУдаления(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыПередНачаломДобавленияЗавершение", ЭтотОбъект, Копирование);
	РазрешеноИзменениеТоваров(Новый Структура("ТоварыТекущаяСтрока", Элемент.ТекущиеДанные), ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавленияЗавершение(РазрешеноИзменениеТоваров, Копирование) Экспорт
	
	Если НЕ РазрешеноИзменениеТоваров Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = Объект.Товары.Добавить();
	НоваяСтрока.CRM_ИДВарианта = ИДВарианта;
	НоваяСтрока.CRM_ИмяВарианта = ИмяВариантаДляТабличнойЧасти(ИДВарианта);
	
	Если Копирование И ТекСтрока <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока,, "НомерСтроки,НомерСтрокиВарианта");
	КонецЕсли;
	
	ЗаполнитьНомерСтрокиВарианта(ЭтотОбъект);
	
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИДВарианта", ИДВарианта);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)

	ОтказТемп = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыПередНачаломИзмененияЗавершение", ЭтотОбъект);
	РазрешеноИзменениеТоваров(Новый Структура("ТоварыТекущаяСтрока", Элемент.ТекущиеДанные), ОписаниеОповещения);
	Отказ = ОтказТемп;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзмененияЗавершение(РазрешеноИзменениеТоваров, ДополнительныеПараметры) Экспорт

	ОтказТемп = НЕ РазрешеноИзменениеТоваров;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ОрганизацияОблагаетсяНДС = CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(Объект.Организация);

	// Проверим табличную часть, исключая разделители.
	МассивПустыхКолонок = Новый Массив;
	Для Каждого Строка Из Объект.Товары Цикл
		
		МассивПустыхКолонок.Очистить();
		Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			МассивПустыхКолонок.Добавить("Номенклатура");
		КонецЕсли;
		
		Если НЕ (ЗначениеЗаполнено(Строка.Номенклатура) И ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.CRM_Разделители")) Тогда
		
			Если Строка.Количество = 0 Тогда
				МассивПустыхКолонок.Добавить("Количество");
			КонецЕсли;
			Если Строка.Цена = 0 Тогда
				МассивПустыхКолонок.Добавить("Цена");
			КонецЕсли;
			Если Строка.Сумма = 0 Тогда
				МассивПустыхКолонок.Добавить("Сумма");
			КонецЕсли;
			Если ОрганизацияОблагаетсяНДС И НЕ ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
				МассивПустыхКолонок.Добавить("СтавкаНДС");
			КонецЕсли;
		
		КонецЕсли;
		
		ИмяПроверяемогоВарианта = ПолучитьИмяВариантаПоНомеру(Строка.CRM_ИДВарианта);
		
		Для Каждого ЭлементМассива Из МассивПустыхКолонок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена колонка """ + ЭлементМассива + """ в строке " + Строка.НомерСтроки + " списка ""Товары"" (" + ИмяПроверяемогоВарианта +")'"),,
			 													"Объект.Товары[" + (Строка.НомерСтроки-1) + "][" + ЭлементМассива + "]");
			Отказ = Истина;
		КонецЦикла;
		
	КонецЦикла;		
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШаблонов

&НаСервере
Процедура ЗагрузитьИзШаблонаНаСервере(ШаблонОбъект)
	
	ОписаниеРеквизитов = ПолучитьРеквизиты("Объект");
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	CRM_ШаблоныОбъектов.ЗаполнитьПредставлениеОбъекта(ШаблонОбъект,ОбъектЗначение,ОписаниеРеквизитов);
	ЗначениеВДанныеФормы(ОбъектЗначение,Объект);
	Объект.Шаблон = ШаблонОбъект;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзШаблона(Команда)
	
	СсылкаНаОбъект = Объект.Ссылка;
	сПараметры = Новый Структура("Ссылка, Форма", СсылкаНаОбъект, ЭтотОбъект);
	CRM_ШаблоныОбъектовКлиент.ЗагрузитьИзШаблонаНаКлиенте(сПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляВыгрузки()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	ОбъектСтруктура = Новый Структура("ОбъектЗначение", ОбъектЗначение);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектСтруктура, УникальныйИдентификатор);
	
	Возврат Новый Структура("ЗначенияЗаполнения",Новый Структура("Объект,ТипФормы",АдресВХранилище,"ФормаДокумента"));
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыгрузитьВШаблон(Команда)
	
	ОткрытьФорму("Справочник.CRM_ШаблоныОбъектов.ФормаОбъекта",ПолучитьПараметрыДляВыгрузки(),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииБизнеспроцессов

// +ПанельБП

&НаСервереБезКонтекста
Функция ПроверитьДубликатБизнесПроцесса(Предмет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|ГДЕ
	|	НЕ CRM_БизнесПроцесс.ПометкаУдаления
	|	И НЕ CRM_БизнесПроцесс.Завершен
	|	И CRM_БизнесПроцесс.Предмет = &Предмет");
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция ВернутьЗаголовокКоманды(ИмяКоманды)
	
	Возврат Команды[ИмяКоманды].Заголовок;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОснованияБизнесПроцесса(Знач ИмяКоманды = Неопределено)
	СтруктураРезультат = Новый Структура("Основание,КартаМаршрута,ИспользоватьВИнтересах", Объект.Ссылка, Объект.CRM_Проект.CRM_КартаМаршрута, Объект.CRM_Проект.CRM_КартаМаршрута.ИспользоватьВИнтересах);
	
	Если ИмяКоманды <> Неопределено Тогда
		Если Найти(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_") > 0 Тогда
			ИдентификаторСсылки = Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_", ""), "_", "-"));
			ТочкаМаршрутаСсылка = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(ИдентификаторСсылки);
			Если ЗначениеЗаполнено(ТочкаМаршрутаСсылка) Тогда
				СтруктураРезультат.Вставить("ТочкаСтарта", ТочкаМаршрутаСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцесс(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Начать "+ВернутьЗаголовокКоманды(Команда.Имя)+""" возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессПродолжение", ЭтотОбъект, Команда.Имя);	
		ПоказатьВопрос(, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		Подключаемый_КомандаНачатьБизнесПроцессПродолжение(Неопределено, Команда.Имя)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессПродолжение(Ответ, КомандаИмя) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Ответ <> КодВозвратаДиалога.ОК Тогда 
			Возврат;
		КонецЕсли;	
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПроверитьДубликатБизнесПроцесса(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Уже создан бизнес-процесс.
			|Создать новый?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессЗавершение", ЭтотОбъект, КомандаИмя);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Неопределено, КомандаИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Ответ, КомандаИмя) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	СтруктураОснования = ПолучитьСтруктуруОснованияБизнесПроцесса(КомандаИмя);
	ПараметрыФормы = Новый Структура("Основание",СтруктураОснования);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьКомандуСозданияБизнесПроцесса()
	
	Если ИспользоватьБизнесПроцессы И ЗначениеЗаполнено(Объект.CRM_Проект) И ЗначениеЗаполнено(Объект.CRM_Проект.CRM_КартаМаршрута) Тогда
		CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект, Элементы.ГруппаКнопокСоздать, Объект.CRM_Проект.CRM_КартаМаршрута, Ложь);
	Иначе
		CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект,,, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПроектПриИзменении(Элемент)
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуГиперссылок()
	
	ТекстКоманда = Команды.Найти("_ВыполнитьЗадачу");
	Если ТекстКоманда = Неопределено Тогда
		НоваяКомандаФормы = Команды.Добавить("_ВыполнитьЗадачу");
		НоваяКомандаФормы.Заголовок					= "Выполнить";
		НоваяКомандаФормы.Подсказка					= "Отметить задачу как выполненную";
		НоваяКомандаФормы.Действие					= "Подключаемый_ВыполнитьЗадачу";
		//НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
	КонецЕсли;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	
	Попытка
		ЭтотОбъект["_ЛичнаяЗадача"] = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
		ЭтотОбъект["_ЛичнаяЗадачаСтрокой"] = "";
	Исключение
		ОписаниеТиповЗадача = Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя");
		НовыйРеквизит = Новый РеквизитФормы("_ЛичнаяЗадача", ОписаниеТиповЗадача);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповЗадача = Новый ОписаниеТипов("Строка");
		НовыйРеквизит = Новый РеквизитФормы("_ЛичнаяЗадачаСтрокой", ОписаниеТиповЗадача);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	КонецПопытки;
	
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	0 КАК ВидСсылки
	|ПОМЕСТИТЬ ЛичныеЗадачи
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	(НЕ ЗадачаИсполнителя.ПометкаУдаления)
	|	И ЗадачаИсполнителя.CRM_Личная
	|	И (НЕ ЗадачаИсполнителя.Выполнена)
	|	И ЗадачаИсполнителя.Предмет = &Предмет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ЛичныеЗадачи.Ссылка,
	|	ЛичныеЗадачи.ВидСсылки
	|ИЗ
	|	ЛичныеЗадачи КАК ЛичныеЗадачи";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предмет",Объект.Ссылка);
	
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаб Из ТаблицаОбъектов Цикл
		Если СтрокаТаб.ВидСсылки = 0 Тогда
			ЭтотОбъект._ЛичнаяЗадача			= СтрокаТаб.Ссылка;
			ЭтотОбъект._ЛичнаяЗадачаСтрокой	= Строка(СтрокаТаб.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// Отрисуем гиперссылки
	// Гирепссылка на Задачу
	Если НЕ Элементы.Найти("_ЛичнаяЗадачаСтрокой") = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект._ЛичнаяЗадача) Тогда
			Элементы.Удалить(Элементы["_ЛичнаяЗадачаЗаголовок"]);
			Элементы.Удалить(Элементы["_ЛичнаяЗадачаСтрокой"]);
			Элементы.Удалить(Элементы["Кнопка_ВыполнитьЗадачу"]);
		КонецЕсли;
	Иначе
		
		Если ЗначениеЗаполнено(ЭтотОбъект._ЛичнаяЗадача) Тогда
			
			НовыйЭлемент = Элементы.Добавить("_ЛичнаяЗадачаЗаголовок", Тип("ДекорацияФормы"), Элементы.ГиперссылкаЗаголовок);
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Заголовок	= "Задача: ";
			
			НовыйЭлемент = Элементы.Добавить("_ЛичнаяЗадачаСтрокой", Тип("ДекорацияФормы"), Элементы.ЗначениеГиперСсылкиЗадача);
			НовыйЭлемент.Заголовок	= СокрЛП(ЭтотОбъект._ЛичнаяЗадача);
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Гиперссылка= Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ГиперссылкаНажатие");
			
			НовыйЭлемент = Элементы.Добавить("Кнопка_ВыполнитьЗадачу",Тип("КнопкаФормы"), Элементы.ЗначениеГиперСсылкиЗадача);
			НовыйЭлемент.ИмяКоманды			= "_ВыполнитьЗадачу";
			НовыйЭлемент.Заголовок			= "Выполнить";
			НовыйЭлемент.Картинка			= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйЭлемент.Отображение		= ОтображениеКнопки.КартинкаИТекст;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаНаВидимостьПричинаОтказа()
	
	Если Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Отменено Тогда
		Элементы.ПричинаОтказа.Видимость = Истина;
	Иначе
		Объект.CRM_ПричинаОтказа = Справочники.CRM_ПричиныОтказов.ПустаяСсылка();
		Элементы.ПричинаОтказа.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДекорацияОтступПричинаОтказа.Видимость = НЕ Элементы.ПричинаОтказа.Видимость;
	Элементы.ПричинаОтказа.ОтметкаНезаполненного = (Элементы.ПричинаОтказа.Видимость И НЕ ЗначениеЗаполнено(Объект.CRM_ПричинаОтказа));
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаОтказаПриИзменении(Элемент)
	
	Элементы.ПричинаОтказа.ОтметкаНезаполненного = (Элементы.ПричинаОтказа.Видимость И НЕ ЗначениеЗаполнено(Объект.CRM_ПричинаОтказа));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") ИЛИ ТипЗнч(НовыйОбъект) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		ЗаполнитьГруппуГиперссылок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоНовый Тогда
		ПеренестиПрисоединенныеФайлы(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	ЭтоНовый = Ложь;
	
КонецПроцедуры

// -ПанельБП

// +ГруппаИнтерес

&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, , ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	СтруктураОтбора.Вставить("Партнер", Объект.Партнер);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);	
	
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов[0].ВведенНаОсновании Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Удалить(0);
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ПоказатьЗначение(,ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(,Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	СтруктураОтбора.Вставить("Партнер", Объект.Партнер);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало = Ложь)
	
	МассивСтрок = ЭтотОбъект.CRM_ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",ВыбранноеЗначение));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Если ВНачало Тогда
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
		Иначе
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	ИначеЕсли ВНачало Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Сдвинуть(ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]),-ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкрытьПоказатьИнтересы(Команда)
	
	Элементы.СкрытьПоказатьИнтересы.Пометка = НЕ Элементы.СкрытьПоказатьИнтересы.Пометка;
	Элементы.ГруппаCRM_ТаблицаИнтересов.Видимость = Элементы.СкрытьПоказатьИнтересы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		Отказ = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.ВведенНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПослеУдаления(Элемент)
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Основной(Команда)
	
	ТекущиеДанные = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ДобавитьИнтересНаСервере(ТекущиеДанные.Ссылка, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	ЗакрыватьПослеЗаписи = Истина;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
КонецПроцедуры

// -ГруппаИнтерес

#КонецОбласти

&НаСервере
Функция ПолучитьСписокВариантовКоммерческогоПредложения()
	
	Возврат CRM_МетодыМодулейМенеджеровДокументов.КППолучитьВарианты(Объект.Ссылка);
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

НеПроверятьВарианты = Ложь;
ЗакрыватьПослеЗаписи = Ложь;
