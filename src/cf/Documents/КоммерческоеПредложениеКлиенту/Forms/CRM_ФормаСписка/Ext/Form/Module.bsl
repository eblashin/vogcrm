
&НаКлиенте
Перем КэшСвойстваДинамическогоСписка;

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
// Функция возвращает структуру со свойствами динамического списка.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура	- Структура со свойствами динамического списка.
//
Функция ПолучитьСвойстваДинамическогоСпискаСервер()
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСвойстваДинамическогоСписка(	ЭтотОбъект, "Список",
		"Документ.КоммерческоеПредложение", Неопределено, Неопределено, Неопределено, "ПодменюВидСписка",
		"ВидСпискаИдентификаторТекущейНастройки", "Подключаемый_КомандаВидСписка");
КонецФункции // ПолучитьСвойстваДинамическогоСпискаСервер()

&НаКлиенте
// Функция возвращает структуру со свойствами динамического списка.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура	- Структура со свойствами динамического списка.
//
Функция ПолучитьСвойстваДинамическогоСпискаКлиент()
	Если ТипЗнч(КэшСвойстваДинамическогоСписка) <> Тип("Структура") Тогда
		КэшСвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСервер();
	КонецЕсли;
	Возврат КэшСвойстваДинамическогоСписка;
КонецФункции // ПолучитьСвойстваДинамическогоСпискаКлиент()

&НаСервереБезКонтекста
// Функция проверяет доступность группового изменения предложений.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Доступность группового изменения предложений.
//
Функция РазрешеноГрупповоеИзменениеПредложений()
  Возврат Пользователи.РолиДоступны("CRM_ВыставлениеCчетовИКоммерческихПредложений, ПолныеПрава");
КонецФункции // РазрешеноГрупповоеИзменениеПредложений()

&НаСервере
// Функция возвращает варианты коммерческого предложения.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений	- Варианты коммерческого предложения.
//
Функция ПолучитьВарианты()
	Возврат CRM_МетодыМодулейМенеджеровДокументов.КППолучитьВарианты(Элементы.Список.ТекущаяСтрока);
КонецФункции // ПолучитьВарианты()

&НаСервере
// Процедура обрабатывает команду выбора настройки пользовательского списка из меню.
//
// Параметры:
//  СвойстваДинамическогоСписка	- Структура	- Структура содержащая свойства динамического списка.
//  ПризнакИзмененыНастройки	- Булево	- Признак того, что были изменены настройки.
//
Процедура КомандаВидСпискаСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки)
	CRM_ОбщегоНазначенияКлиентСервер.ОбработкаКомандыПользовательскихНастроекДинамическогоСписка(ЭтотОбъект, СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
КонецПроцедуры // КомандаВидСпискаСервер()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ ДОКУМЕНТА

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборОтветственный".
//
Процедура ОтборОтветственныйПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборОтветственный) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Менеджер", ОтборОтветственный, Истина);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Менеджер");
	КонецЕсли;	
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборОтветственный, ОтборПартнер, ОтборСтатус);
КонецПроцедуры // ОтборОтветственныйПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборПартнер".
//
Процедура ОтборПартнерПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборПартнер) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер", ОтборПартнер, Истина);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер");
	КонецЕсли;
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборОтветственный, ОтборПартнер, ОтборСтатус);
КонецПроцедуры // ОтборПартнерПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборСостояние".
//
Процедура ОтборСостояниеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборСтатус) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Статус", ОтборСтатус, Истина);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Статус");
	КонецЕсли;	
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборОтветственный, ОтборПартнер, ОтборСтатус);
КонецПроцедуры // ОтборСостояниеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыСегодня".
//
Процедура ОтборСозданыСегодняНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Сегодня", Элемент);
КонецПроцедуры // ОтборСозданыСегодняНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗа3Дня".
//
Процедура ОтборСозданыЗа3ДняНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "3 дня", Элемент);
КонецПроцедуры // ОтборСозданыЗа3ДняНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗаНеделю".
//
Процедура ОтборСозданыЗаНеделюНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Неделя", Элемент);
КонецПроцедуры // ОтборСозданыЗаНеделюНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗаМесяц".
//
Процедура ОтборСозданыЗаМесяцНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Месяц", Элемент);
КонецПроцедуры // ОтборСозданыЗаМесяцНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыПроизвольныйПериод".
//
Процедура ОтборСозданыПроизвольныйПериодПриИзменении(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "ПроизвольныйПериод", Элемент);
КонецПроцедуры // ОтборСозданыПроизвольныйПериодПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборПериодОчистить".
//
Процедура ОтборПериодОчиститьНажатие(Элемент)
	CRM_ТегиКлиент.ОчиститьОтборНажатие(ЭтотОбъект, "Список");
КонецПроцедуры // ОтборПериодОчиститьНажатие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ ДОКУМЕНТА

&НаКлиенте
// Процедура - динамически подключаемый обработчик команды "КомандаВидСписка".
//
Процедура Подключаемый_КомандаВидСписка(Команда)
	СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаКлиент();
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаВидСпискаЗавершение", ЭтотОбъект, СвойстваДинамическогоСписка);
	CRM_ОбщегоНазначенияКлиент.ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки(ЭтотОбъект, СвойстваДинамическогоСписка, Команда, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидСпискаЗавершение(ПризнакИзмененыНастройки, СвойстваДинамическогоСписка) Экспорт
	КомандаВидСпискаСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
КонецПроцедуры

&НаКлиенте
// Процедура - динамически подключаемый обработчик команды "ПечатьВнешнегоМакета".
//
Процедура Подключаемый_ПечатьВнешнегоМакета(Команда)
	ВыбранныйВариант = Неопределено;
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
		Варианты = ПолучитьВарианты();
		Варианты.Добавить(0, "Все варианты");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПечатьВнешнегоМакетаЗавершение", ЭтотОбъект, Команда);
		Варианты.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вариант для печати'"));
		Возврат;
	КонецЕсли;
	ИмяМакета = СтрЗаменить(Команда.Имя, "Печать_", "");
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.ЗагрузитьЗначения(Элементы.Список.ВыделенныеСтроки);
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения, ВыбранныйВариант);
КонецПроцедуры // Подключаемый_ПечатьВнешнегоМакета()

&НаКлиенте
Процедура Подключаемый_ПечатьВнешнегоМакетаЗавершение(РезультатВыбора, Команда) экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	ВыбранныйВариант = РезультатВыбора.Значение;
	ИмяМакета = СтрЗаменить(Команда.Имя, "Печать_", "");
	ОбъектыНазначения = Новый СписокЗначений;
	ОбъектыНазначения.ЗагрузитьЗначения(Элементы.Список.ВыделенныеСтроки);
	CRM_УправлениеПечатьюКлиент.ПечатьВнешнегоМакета(ИмяМакета, ОбъектыНазначения, ВыбранныйВариант);
КонецПроцедуры // Подключаемый_ПечатьВнешнегоМакета()

&НаКлиенте
// Процедура - обработчик команды "БыстрыеОтборы".
//
Процедура БыстрыеОтборы(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Истина;	
КонецПроцедуры // БыстрыеОтборы()

&НаКлиенте
// Процедура - обработчик команды "ВосстанавливатьФормуПриОткрытии".
//
Процедура ВосстанавливатьФормуПриОткрытии(Команда)
	Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка	= НЕ Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ВосстанавливатьФормуПриОткрытии",
		Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка);
КонецПроцедуры // ВосстанавливатьФормуПриОткрытии()

&НаКлиенте
// Процедура - обработчик команды "ВосстанавливатьФормуПриОткрытии".
//
Процедура ИзменитьВыделенные(Команда)
	РазрешеноИзменениеПредложений = РазрешеноГрупповоеИзменениеПредложений();
	Если РазрешеноИзменениеПредложений Тогда
		ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);	
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Команда ""Изменить выделенное"" доступна только пользователям, '")
			+ НСтр("ru = 'у которых есть роль ""Полные права"" или ""Выставление cчетов и коммерческих предложений"".'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры // ИзменитьВыделенные()

&НаКлиенте
// Процедура - обработчик команды "ОтборПериод".
//
Процедура ОтборПериод(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;	
КонецПроцедуры // ОтборПериод()

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// +Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	Если НЕ CRM_РежимФормЗакладкиСервер.ВосстановлениеФормыПриЗапускеСеанса(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// -Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	
	CRM_Теги.ОбновитьЗначенияОтбораПериодов(ЭтотОбъект);
	
	// Оформление списка
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Установим кнопки печати
	CRM_ОбщегоНазначенияСервер.УстановитьКнопкиПечати(Список.ОсновнаяТаблица, ЭтотОбъект);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	// Перейдем сразу на вкладку отборов "Быстрые отборы" и оставим ее в свернутом режиме.
	Элементы.ПанельЗначенийОтбора.Видимость			= Истина;
	Элементы.ПанельЗначенийОтбора.ТекущаяСтраница	= Элементы.ЗначенияОтбораБыстрыеОтборы;	
	БыстрыеОтборы(Элементы.БыстрыеОтборы);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборОтветственный, ОтборПартнер, ОтборСтатус);
	// +Пользовательские настройки.
	ДобавитьПодменюПользовательскихНастроек();
	// -Пользовательские настройки.
КонецПроцедуры // ПриОткрытии()

&НаСервере
// Процедура - обработчик события формы "ПриЗагрузкеДанныхИзНастроекНаСервере".
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ОтборПартнер = Настройки.Получить("ОтборПартнер");
	Если ЗначениеЗаполнено(ОтборПартнер) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер", ОтборПартнер, Истина);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер");
	КонецЕсли;
	ОтборОтветственный = Настройки.Получить("ОтборОтветственный");
	Если ЗначениеЗаполнено(ОтборОтветственный) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Менеджер", ОтборОтветственный, Истина);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Менеджер");
	КонецЕсли;	
	ОтборСтатус = Настройки.Получить("ОтборСтатус");
	Если ЗначениеЗаполнено(ОтборСтатус) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Статус", ОтборСтатус, Истина);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Статус");
	КонецЕсли;	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	CRM_РежимФормЗакладкиСервер.ПриЗакрытииНаСервере(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКомандПодключаемыхОтчетовИОбработок

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если СтрНайти(Команда.Имя, "ПодменюПечать")>0 Тогда
		ВыбранныйВариант =Неопределено;
			
		Если Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
			Варианты = ПолучитьВарианты();
			ОписаниеКоманды = ПодключаемыеКомандыКлиентПовтИсп.ОписаниеКоманды(Команда.Имя, ЭтотОбъект["ПараметрыПодключаемыхКоманд"].АдресТаблицыКоманд);
			Если СтрНайти(ОписаниеКоманды.Идентификатор, "Договор") = 0 Тогда
				Варианты.Добавить(0,"Все варианты");
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ВыполнитьКомандуЗавершение", ЭтотОбъект, Команда);
			Варианты.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вариант для печати'"));
		Иначе
			Варианты = Новый СписокЗначений;
			Варианты.Добавить(Неопределено);
			Подключаемый_ВыполнитьКомандуЗавершение(Варианты[0], Команда)
		КонецЕсли;
	Иначе	
		ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЗавершение(РезультатВыбора, Команда) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	Если РезультатВыбора.Значение <> Неопределено Тогда
		ВыбранныйВариант = РезультатВыбора.Значение;
		CRM_УправлениеПечатьюВызовСервера.ПоместитьВариантНаПечатьВХранилище(ВыбранныйВариант);
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры
 
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


#КонецОбласти

#Область ПользовательскиеНастройки

&НаСервере
Процедура ДобавитьПодменюПользовательскихНастроек()
	CRM_ПользовательскиеНастройкиСервер.УстановитьПользовательскиеНастройки(Список, ИдентификаторПользовательскойНастройки, ИмяФормы+".Список");
	CRM_ПользовательскиеНастройкиСервер.ДобавитьПодменюПользовательскихНастроек(ЭтотОбъект, Список, ИмяФормы+".Список");
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборНастройкиНаСервере(НомерНастройки)
	CRM_ПользовательскиеНастройкиСервер.ОбработатьВыборНастройкиНаСервере(НомерНастройки, Список, ЭтотОбъект, ИмяФормы+".Список");	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьВыборНастройки(Команда)
	НомерНастройкиСтрока = СтрЗаменить(Команда.Имя, "ОбработатьВыборНастройки_", "");
	НомерНастройки = Число(НомерНастройкиСтрока);
	 ОбработатьВыборНастройкиНаСервере(НомерНастройки);	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущиеНастройкиНаСервере(ИмяНастройки, ДополнительныеПараметры) Экспорт
	Если НЕ ИмяНастройки = Неопределено Тогда
		CRM_ПользовательскиеНастройкиСервер.СохранитьТекущиеНастройкиНаСервере(ИмяНастройки, Список, ЭтотОбъект, ИмяФормы+".Список");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущиеНастройки(Команда)
	ПараметрыОповещения = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("СохранитьТекущиеНастройкиНаСервере", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВводСтроки(Оповещение, "", "Введите название настройки");		
КонецПроцедуры

&НаСервере
Процедура УдалитьНастройкуНаСервере()
	ПредставлениеНастройки = CRM_ПользовательскиеНастройкиСервер.ПолучитьПредставлениеНастройки(ИдентификаторПользовательскойНастройки, ИмяФормы+".Список");	
	ХранилищеПользовательскихНастроекДинамическихСписков.Удалить(ИмяФормы+".Список", ИдентификаторПользовательскойНастройки, ИмяПользователя()); 
	ИдентификаторПользовательскойНастройки = "Стандартные_Настройки";
	CRM_ПользовательскиеНастройкиСервер.УстановитьПользовательскиеНастройки(Список, ИдентификаторПользовательскойНастройки, ИмяФормы+".Список");
	CRM_ПользовательскиеНастройкиСервер.ДобавитьПодменюПользовательскихНастроек(ЭтотОбъект, Список, ИмяФормы+".Список");
		
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОтветаУдаление(ВариантОтвета, ДополнительныеПараметры) Экспорт
	Если ВариантОтвета = КодВозвратаДиалога.Да Тогда
		УдалитьНастройкуНаСервере();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТекущуюНастройку(Команда)
	Если ИдентификаторПользовательскойНастройки = "Стандартные_Настройки" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нельзя удалить стандартные настройки";
		Сообщение.Сообщить();
	Иначе
		ПараметрыОповещения = Новый Структура;
		Оповещение = Новый ОписаниеОповещения("ОбработкаОтветаУдаление", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(Оповещение, "Вы действительно хотите удалить настройку """+CRM_ПользовательскиеНастройкиСервер.ПолучитьПредставлениеНастройки(ИдентификаторПользовательскойНастройки, ИмяФормы+".Список")+""" ?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВариантовКоммерческогоПредложения()
	
	Возврат CRM_МетодыМодулейМенеджеровДокументов.КППолучитьВарианты(Элементы.Список.ТекущаяСтрока);
	
КонецФункции

#КонецОбласти

