&НаКлиенте
Перем ИдентификаторСтрокиПолучателя;

&НаКлиенте
Перем ИмяЭлемента;

&НаКлиенте
Перем ПроверкаСуществованияФайлов;

&НаКлиенте
Перем ТекущийНомерВложения;

&НаКлиенте
Перем ПолучаемыеФайлы;

&НаКлиенте
Перем ПолученныеФайлы;

&НаКлиенте
Перем КонтекстВыбора;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Служебная процедура механизма свойств.
//
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Перечитывает данные по ссылке в форму.
//
&НаСервере
Функция ОбновитьДанныеДокументаПоСсылке()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Попытка
			Если Объект.ВерсияДанных <> Объект.Ссылка.ВерсияДанных Тогда
				ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
				ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
// Функция получается индекс пиктограммы файла - индекс в картинке КоллекцияПиктограммФайлов.
Функция ПолучитьИндексПиктограммыФайла(Знач РасширениеФайла) Экспорт
	Возврат РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеФайла);	
КонецФункции // ПолучитьИндексПиктограммыФайла()

&НаСервере
// Функция загружает настройку из хранилища общих настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить().
//
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек = "", ЗначениеПоУмолчанию = Неопределено, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено)
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию, ОписаниеНастроек, ИмяПользователя);
КонецФункции // ХранилищеОбщихНастроекЗагрузить()

&НаСервере
// Процедура сохраняет настройку в хранилище общих настроек.
// 
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроекСохранить.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить().
// 
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек = "", Значение, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, НужноОбновитьПовторноИспользуемыеЗначения = Ложь)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Значение, ОписаниеНастроек, ИмяПользователя, НужноОбновитьПовторноИспользуемыеЗначения);
КонецПроцедуры // ХранилищеОбщихНастроекСохранить()

&НаСервере
Процедура ОбработатьНеобходимостьУведомленияОПрочтении()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УведомленияОПрочтении.Письмо
	|ИЗ
	|	РегистрСведений.УведомленияОПрочтении КАК УведомленияОПрочтении
	|ГДЕ
	|	УведомленияОПрочтении.Письмо = &Письмо
	|	И (НЕ УведомленияОПрочтении.ТребуетсяОтправка)";
	
	Запрос.УстановитьПараметр("Письмо",Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимоеДействие = Взаимодействия.ПолучитьПараметрыРаботыПользователяДляВходящегоЭлектронногоПисьма();
	
	Если НеобходимоеДействие = Перечисления.ПорядокОтветовНаЗапросыУведомленийОПрочтении.ВсегдаОтправлятьУведомление Тогда
		
		ТребуетсяУстановкаФлагаОтправкиУведомления = Истина;
		
	ИначеЕсли НеобходимоеДействие = 
		Перечисления.ПорядокОтветовНаЗапросыУведомленийОПрочтении.НикогдаНеОтправлятьУведомление Тогда
		
		УправлениеЭлектроннойПочтой.УстановитьПризнакОтправкиУведомления(Объект.Ссылка,Ложь);
		
	ИначеЕсли НеобходимоеДействие = 
		Перечисления.ПорядокОтветовНаЗапросыУведомленийОПрочтении.ЗапрашиватьПередТемКакОтправитьУведомление Тогда
		
		ТребуетсяЗапросУведомленияОПрочтении = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаВозможностьОтпавкиПисьма(УчетнаяЗаписьСсылка) 
	
	Если НЕ УчетнаяЗаписьСсылка.ИспользоватьДляОтправки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выполняет перекодировку текстов  электронного сообщения.
&НаСервере
Процедура ПреобразоватьКодировкуПисьма(ВыбраннаяКодировка)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла,Объект.Кодировка);
	ЗаписьТекста.Записать(?(Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML,Объект.ТекстHTML,Объект.Текст));
	ЗаписьТекста.Закрыть();
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла,ВыбраннаяКодировка);
	Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда	
		Объект.ТекстHTML = ЧтениеТекста.Прочитать();
		ТекстПисьма = Объект.ТекстHTML;
	Иначе
		Объект.Текст = ЧтениеТекста.Прочитать();
		ТекстПисьма = Объект.Текст;
	КонецЕсли;
	ЧтениеТекста.Закрыть();
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла,Объект.Кодировка);
	ЗаписьТекста.ЗаписатьСтроку(ОтправительПредставление);
	ЗаписьТекста.ЗаписатьСтроку(ПолучателиКопийПредставление);
	ЗаписьТекста.ЗаписатьСтроку(ПолучателиОтветаПредставление);
	ЗаписьТекста.ЗаписатьСтроку(ПолучателиПредставление);
	ЗаписьТекста.ЗаписатьСтроку(Объект.Тема);
	ЗаписьТекста.Закрыть();
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла,ВыбраннаяКодировка);
	ОтправительПредставление = ЧтениеТекста.ПрочитатьСтроку();
	ПолучателиКопийПредставление = ЧтениеТекста.ПрочитатьСтроку();
	ПолучателиОтветаПредставление = ЧтениеТекста.ПрочитатьСтроку();
	ПолучателиПредставление = ЧтениеТекста.ПрочитатьСтроку();
	Объект.Тема = ЧтениеТекста.ПрочитатьСтроку();
	ЧтениеТекста.Закрыть();
	
	Объект.Кодировка = ВыбраннаяКодировка;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставленияКонтактов() Экспорт
	
	// Сформируем представление отправителя.
	ОтправительПредставление = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеАдресата(Объект.ОтправительПредставление, Объект.ОтправительАдрес, Объект.ОтправительКонтакт);
	
	// Сформируем представление Кому и Копии.
	ПолучателиПредставление            = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма);
	ПолучателиКопийПредставление       = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиКопий);
	ПолучателиОтветаПредставление      = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиОтвета);
	
КонецПроцедуры

&НаСервере
Функция ВернутьЗаголовокКоманды(ИмяКоманды)
	
	Возврат Команды[ИмяКоманды].Заголовок;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОснованияБизнесПроцесса(Знач ИмяКоманды = Неопределено)
	СтруктураРезультат = Новый Структура("Основание,КартаМаршрута,ИспользоватьВИнтересах", Объект.Ссылка, Объект.CRM_Проект.CRM_КартаМаршрута, Объект.CRM_Проект.CRM_КартаМаршрута.ИспользоватьВИнтересах);
	
	Если ИмяКоманды <> Неопределено Тогда
		Если Найти(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_") > 0 Тогда
			ИдентификаторСсылки = Новый УникальныйИдентификатор(СтрЗаменить(СтрЗаменить(ИмяКоманды, "КомандаТочкаСтартаБизнесПроцесса_", ""), "_", "-"));
			ТочкаМаршрутаСсылка = Справочники.CRM_ТочкиМаршрутов.ПолучитьСсылку(ИдентификаторСсылки);
			Если ЗначениеЗаполнено(ТочкаМаршрутаСсылка) Тогда
				СтруктураРезультат.Вставить("ТочкаСтарта", ТочкаМаршрутаСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	
	Если Форма.ОткрытаФормаВложенногоПисьма Тогда
		
		Форма.ТолькоПросмотр = Истина;
		Форма.КоманднаяПанель.Доступность = Ложь;
		Форма.Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность = Ложь;
		Форма.Заголовок = НСтр("ru = 'Входящее электронное письмо (вложение)'");
		Форма.Элементы.КоманднаяПанельАтрибуты.Видимость 		= Ложь;
		Форма.Элементы.СтраницыСвойства.Видимость 				= Ложь;
		Форма.Элементы.ГруппаПервичныйИнтерес.Видимость 		= Ложь;
		Форма.Элементы.ДекорацияКопия.Видимость					= Ложь;
		Форма.Элементы.ПолучателиКопийПредставление.Видимость	= Ложь;
		Форма.Элементы.СкрытьПоказатьПолучателейКопии.Видимость	= Ложь;
		Форма.Элементы.ТабПолучатели.Видимость					= Ложь;
		Форма.Элементы.СкрытьПоказатьПолучателей.Видимость		= Ложь;
		Форма.Элементы.ТабПолучателиКопии.Видимость				= Ложь;
		Форма.Элементы.СкрытьПоказатьПолучателейКопии.Видимость	= Ложь;
		Форма.Элементы.Вложения.Видимость						= Ложь;
		Форма.Элементы.ОтправительКонтакт.Видимость				= Ложь;
	Иначе	

		Форма.Элементы.ФормаОбщаяКомандаCRM_СоздатьЛичнуюЗадачу.Доступность = НЕ ЗначениеЗаполнено(Форма._ЛичнаяЗадача);
		//Форма.Элементы.КаналПервичногоИнтереса.Доступность		= ОтображатьКаналИсточник;
		//Форма.Элементы.ИсточникПервичногоИнтереса.Доступность	= ОтображатьКаналИсточник;
		Форма.Элементы.ГруппаПервичныйИнтерес.Видимость = Форма.ОтображатьКаналИсточник;
		
		Форма.Элементы.ДекорацияКопия.Видимость					= ЗначениеЗаполнено(Форма.ПолучателиКопийПредставление);
		Форма.Элементы.ПолучателиКопийПредставление.Видимость	= ЗначениеЗаполнено(Форма.ПолучателиКопийПредставление);
		Форма.Элементы.СкрытьПоказатьПолучателейКопии.Видимость	= ЗначениеЗаполнено(Форма.ПолучателиКопийПредставление);
		Форма.Элементы.ТабПолучатели.Видимость					= Форма.Элементы.СкрытьПоказатьПолучателей.Пометка;
		Форма.Элементы.ТабПолучателиКопии.Видимость				= Форма.Элементы.СкрытьПоказатьПолучателейКопии.Пометка;
		Форма.Элементы.Вложения.Видимость						= Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВладельца(КонтактноеЛицо)
//START Кайдашов 09/07/19 433
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	вогСвязиКонтактныхЛицСрезПоследних.ОбъектСвязи КАК Объект
	               |ИЗ
	               |	РегистрСведений.вогСвязиКонтактныхЛиц.СрезПоследних(, КонтактноеЛицо = &Контакт) КАК вогСвязиКонтактныхЛицСрезПоследних
	               |ГДЕ
	               |	вогСвязиКонтактныхЛицСрезПоследних.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Работает)";
	Запрос.УстановитьПараметр("Контакт",КонтактноеЛицо);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() тогда
		Возврат Выборка.Объект;
	Иначе
		Возврат Справочники.Партнеры.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОсновноеКонтактноеЛицо(Клиент)
	
	Возврат Клиент.CRM_ОсновноеКонтактноеЛицо;
	
КонецФункции

&НаСервере
Процедура ПроставитьКонтактВходящимПисьмам() 
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.ОтправительАдрес = &ОтправительАдрес
	|	И ЭлектронноеПисьмоВходящее.Ссылка <> &Ссылка" ;
	
	Запрос.УстановитьПараметр("ОтправительАдрес", 	Объект.ОтправительАдрес);
	Запрос.УстановитьПараметр("Ссылка", 			Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ОтправительКонтакт = Объект.ОтправительКонтакт;
		
		Попытка
			ДокументОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидПапкиПисем(Папка)
	
	Возврат Папка.CRM_Вид;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТипКаналаПервичногоИнтереса(Канал)
	Возврат ТипЗнч(Канал.ТипЗначения.ПривестиЗначение());
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,ИмяРеквизита)
	Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если Индекс <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыПолучателей()
	
	Для Каждого СтрокаПолучателя Из Объект.ПолучателиПисьма Цикл
		НоваяСтрока = Получатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
	КонецЦикла;
	
	Для Каждого СтрокаПолучателя Из Объект.ПолучателиКопий Цикл
		НоваяСтрока = ПолучателиКопии.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСкорректироватьПолучателейПисьма()
	
	Если Получатели.Количество() > 0 Тогда
		Объект.ПолучателиПисьма.Очистить();
		Для Каждого СтрокаПолучателя Из Получатели Цикл
			НоваяСтрока = Объект.ПолучателиПисьма.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
		КонецЦикла;
	КонецЕсли;
	
	Если ПолучателиКопии.Количество() > 0 Тогда
		Объект.ПолучателиКопий.Очистить();
		Для Каждого СтрокаПолучателя Из ПолучателиКопии Цикл
			НоваяСтрока = Объект.ПолучателиКопий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучателя);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПоложениеТумблераСтатусПисьма()
	
	Если Объект.Удалить_Рассмотрено Тогда
		СтатусПисьма = "Обработано";
	Иначе		
		СтатусПисьма = "ВРаботе";
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПодсказкуОбАктивныхИнтересах()
//START Кайдашов 09/07/19 433	
	//CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);	

КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНовогоДокумента()
	
	НоваяСсылка = Документы.ЭлектронноеПисьмоВходящее.ПолучитьСсылку();
	
	Возврат НоваяСсылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	НетВложений = (Элементы.Вложения.ТекущиеДанные = Неопределено);
	Элементы.КоманднаяПанельВложенияОткрыть.Доступность			= НЕ НетВложений;
	Элементы.КоманднаяПанельВложенияСохранить.Доступность		= НЕ НетВложений;
	Элементы.КоманднаяПанельВложенияСохранитьВсе.Доступность	= НЕ НетВложений;
	Элементы.КонтекстноеМенюВложенияОткрыть.Доступность			= НЕ НетВложений;
	Элементы.КонтекстноеМенюВложенияСохранить.Доступность		= НЕ НетВложений;
	Элементы.КонтекстноеМенюВложенияСохранитьВсе.Доступность	= НЕ НетВложений;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущееВложение()
	Если ОткрытаФормаВложенногоПисьма Тогда
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
		ТекущееВложение = Элементы.Вложения.ТекущиеДанные;
		ВложениеДанные = ПолучитьИзВременногоХранилища(ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор);
		РасширениеВложения = ВзаимодействияКлиентСервер.РасширениеФайла(ТекущееВложение.ИмяФайла);
		Если ТипЗнч(ВложениеДанные) = Тип("ДвоичныеДанные") Тогда
			Если ВРег(РасширениеВложения) = "EML" Тогда Возврат; КонецЕсли;
			Если РасширениеПодключено Тогда
				#Если НЕ ВебКлиент Тогда
					Попытка
						ПутьКВременномуФайлу = КаталогВременныхФайлов() + ТекущееВложение.ИмяФайла;
						ВложениеДанные.Записать(ПутьКВременномуФайлу);
						НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер), ПутьКВременномуФайлу);
					Исключение
						Инфо = ИнформацияОбОшибке();
						ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Описание=""%1""'"),
						Инфо.Описание));
					КонецПопытки;
				#КонецЕсли
			Иначе
				// Веб-клиент
				ПолучитьФайл(ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор, ТекущееВложение.ИмяФайла, Истина);
			КонецЕсли;
		КонецЕсли;	
	Иначе
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(Элементы.Вложения.ТекущиеДанные.Ссылка, ЭтотОбъект);
	КонецЕсли;	
КонецПроцедуры // ОткрытьТекущееВложение()

&НаКлиенте
Процедура ОткрытьВложениеВыполнить(Команда)
	ОткрытьТекущееВложение();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложение()
	
	Если ОткрытаФормаВложенногоПисьма Тогда
		ТекущееВложение = Элементы.Вложения.ТекущиеДанные;
		РасширениеВложения = ВзаимодействияКлиентСервер.РасширениеФайла(ТекущееВложение.ИмяФайла);
		Если ВРег(РасширениеВложения) = "EML" Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Это вложение не может быть сохранено.'"));
			Возврат;
		КонецЕсли;
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
		РасширениеПодключеноКрипто = ПодключитьРасширениеРаботыСКриптографией();
		Если РасширениеПодключено Тогда
			ПутьВыбора = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
			Если (ПутьВыбора = Неопределено) ИЛИ (ПутьВыбора = "") Тогда
				ПутьВыбора = "";
				ПутьВыбора = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();
			КонецЕсли;
			ИмяСРасширением = ТекущееВложение.ИмяФайла;
			// Выбираем путь к файлу на диске.
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ВыборФайла.МножественныйВыбор = Ложь;
			ВыборФайла.ПолноеИмяФайла = ИмяСРасширением;
			Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все файлы (*.%1)|*.%1'"), РасширениеВложения, РасширениеВложения);
			ВыборФайла.Фильтр = Фильтр;
			ВыборФайла.Каталог = ПутьВыбора;
			Если ВыборФайла.Выбрать() Тогда
				РазмерВМб = ТекущееВложение.Размер / (1024 * 1024);
				ТекстПояснения =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
				|Пожалуйста, подождите.'"),
				ТекущееВложение.ИмяФайла, ?(РазмерВМб >= 1, Формат(РазмерВМб, "ЧДЦ=0"), Формат(РазмерВМб, "ЧДЦ=1; ЧН=0")));
				Состояние(ТекстПояснения);	
				Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
				Если Файл.Существует() Тогда
					Файл.УстановитьТолькоЧтение(Ложь);
					УдалитьФайлы(ВыборФайла.ПолноеИмяФайла);
				КонецЕсли;
				ПередаваемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор);
				ПередаваемыеФайлы.Добавить(Описание);
				ПутьКФайлу = Файл.Путь;
				Если Прав(ПутьКФайлу,1) <> "\" Тогда
					ПутьКФайлу = ПутьКФайлу + "\";
				КонецЕсли;
				// Сохраним Файл из БД на диск.
				ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
				Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ВыборФайла.ПолноеИмяФайла);
				ПутьВыбораПрежний = ПутьВыбора;
				Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
				ПутьВыбора = Файл.Путь;
				Если НЕ (ПутьВыбораПрежний = ПутьВыбора) Тогда
					ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак",  ПутьВыбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Веб-клиент
			РазмерВМб = ТекущееВложение.Размер / (1024 * 1024);
			ТекстПояснения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
			|Пожалуйста, подождите.'"),
			ТекущееВложение.ИмяФайла, ?(РазмерВМб >= 1, Формат(РазмерВМб, "ЧДЦ=0"), Формат(РазмерВМб, "ЧДЦ=1; ЧН=0")));
			Состояние(ТекстПояснения);	
			ПолучитьФайл(ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор, ТекущееВложение.ИмяФайла, Истина);
		КонецЕсли;	
	Иначе
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(Элементы.Вложения.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложения(ТолькоВыделенные = Ложь)
	ВыделенныеВложения = Элементы.Вложения.ВыделенныеСтроки;
	Если ТолькоВыделенные И (ВыделенныеВложения.Количество() = 1) Тогда
		СохранитьВложение();
		Возврат;
	КонецЕсли;	
	КоличествоВложений = Вложения.Количество();
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
	СтруктураДанных = Новый Структура("ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные", 
		ВыделенныеВложения, КоличествоВложений, ТолькоВыделенные);
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПодключеноРасширение", ЭтотОбъект, СтруктураДанных);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПодключеноРасширение(Подключено, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если Подключено Тогда
		КаталогСохранения = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
		Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
			КаталогСохранения = "";
			КаталогСохранения = РаботаСФайламиСлужебныйКлиент.КаталогВыгрузки();
		КонецЕсли;
		ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.МножественныйВыбор = Ложь;
		ВыборКаталога.Каталог = КаталогСохранения;
		ДополнительныеПараметры.Вставить("ВыборКаталога", ВыборКаталога);
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияПослеВыбораКаталога", ЭтотОбъект, ДополнительныеПараметры);
		ВыборКаталога.Показать(Оповещение);
        Возврат;
	Иначе
		#Если ВебКлиент Тогда
			Для НомерВложения = 0 По КоличествоВложений Цикл
				Если ТолькоВыделенные Тогда
					Если ВыделенныеВложения.Найти(НомерВложения) = Неопределено Тогда Продолжить; КонецЕсли;
				КонецЕсли;	
				ТекущееВложение = Вложения[НомерВложения];
				// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
				//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
				// 
				ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
				РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
				Если РасширениеВложения = "EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
					Продолжить;
				КонецЕсли;
				ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
			КонецЦикла;	
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборКаталога = ДополнительныеПараметры.ВыборКаталога;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
	ПроверкаСуществованияФайлов = ДополнительныеПараметры.ПроверкаСуществованияФайлов;
		
	Если НЕ (ВыбранныеФайлы <> Неопределено) Тогда Возврат; КонецЕсли;
	КаталогСохранения = ВыборКаталога.Каталог;
	Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда Возврат; КонецЕсли;
	Если НЕ (Прав(КаталогСохранения, 1) = "\") Тогда
		КаталогСохранения = КаталогСохранения + "\";
	КонецЕсли;
	
	Если ПроверкаСуществованияФайлов Тогда
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ТекущийНомерВложения", 0);
		ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;		
	
	ПерезаписатьВсе		= ?(ДополнительныеПараметры.Свойство("ПерезаписатьВсе"),ДополнительныеПараметры.ПерезаписатьВсе, Ложь);
	ПереименоватьВсе	= ?(ДополнительныеПараметры.Свойство("ПереименоватьВсе"),ДополнительныеПараметры.ПереименоватьВсе, Ложь);
	Если ДополнительныеПараметры.Свойство("ТекущийНомерВложения") Тогда
		ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения + 1;
	Иначе 
		ТекущийНомерВложения = 0;
	КонецЕсли;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		Если ТолькоВыделенные Тогда
			Если ВыделенныеВложения.Найти(ТекущийНомерВложения) = Неопределено Тогда Возврат; КонецЕсли;
		КонецЕсли;	
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 						
			// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
			//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
			// 
			Если ТекущееВложение.Расположение = 4 Тогда
				ДанныеФайла = ТекущееВложение.ИмяФайлаНаКомпьютере;
				Файл = Новый Файл(ТекущееВложение.ИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				Если РасширениеВложения = ".EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
					Возврат;
				КонецЕсли;
				ДополнительныеПараметры.Вставить("РазмерФайла", ТекущееВложение.Размер);
				ДополнительныеПараметры.Вставить("ДанныеФайла", ТекущееВложение.ИмяФайлаНаКомпьютере);												
			КонецЕсли;	
		Иначе
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
			РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
			Если РасширениеВложения = "EML" Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
				Возврат;
			КонецЕсли;	
			ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);							
		КонецЕсли;
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		
		// Проверяем файл на существование, и, если он существует, то выбираем дальнейшее действие.
		ДополнительныеПараметры.Вставить("КаталогСохранения", КаталогСохранения);
		ДополнительныеПараметры.Вставить("ПерезаписатьВсе",   ПерезаписатьВсе);
		ДополнительныеПараметры.Вставить("ПереименоватьВсе",  ПереименоватьВсе);
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);				
		Оповещение = Новый ОписаниеОповещения("ФайлПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеФайловНаДиске(ВыбранныеФайлы, ДополнительныеПараметры)
	
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТекущийНомерВложения = ДополнительныеПараметры.ТекущийНомерВложения;
	Если ТекущийНомерВложения <= КоличествоВложений - 1 Тогда			
		ТекущееВложение = Вложения[ТекущийНомерВложения];
		Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда 
			Если ТекущееВложение.Расположение = 4 Тогда 
				ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
				Файл = Новый Файл(ПолноеИмяФайла);				
				РасширениеВложения = ВРег(СокрЛП(Файл.Расширение));
				Если РасширениеВложения = ".EML" Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
					Возврат;
				КонецЕсли;
				ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);
				ДополнительныеПараметры.Вставить("ДанныеФайла",       ТекущееВложение.ИмяФайлаНаКомпьютере);								
				ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
				Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
				Файл = Новый Файл();
				Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);						
				Возврат;
			Иначе				
				Возврат; 
			КонецЕсли;				
		КонецЕсли;						
		// Если картинка из текста письма, то ее пропускаем.
		// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет.
		//Если НЕ (ТекущееВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#") Тогда Продолжить; КонецЕсли;
		// 			
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
		РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));		
		ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
		ДополнительныеПараметры.Вставить("ПолноеИмяФайла",    ПолноеИмяФайла);		
		ДополнительныеПараметры.Вставить("ДанныеФайла",       ДанныеФайла);				
		ДополнительныеПараметры.Вставить("ВыбранныеФайлы",    ВыбранныеФайлы);						
		Оповещение = Новый ОписаниеОповещения("ФайлПроверитьПослеИнициализации", ЭтотОбъект, ДополнительныеПараметры); 		
		Файл = Новый Файл();
		Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);		
	Иначе
		ПроверкаСуществованияФайлов = Ложь;
		ДополнительныеПараметры.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);		
		ДополнительныеПараметры.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ВыбранныеФайлы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлПроверитьПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	 ФайлПроверитьНаСуществование(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПроверитьНаСуществование(Файл, ПараметрыВложения)
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайлаДляВопроса", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);
КонецПроцедуры	

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайлаДляВопроса(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		СохранитьВложенияВопрос(ПараметрыВложения);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		Возврат;
	ИначеЕсли ПараметрыВложения.ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений Тогда
		ПроверкаСуществованияФайлов = Ложь;
		ПараметрыВложения.Вставить("ПроверкаСуществованияФайлов", ПроверкаСуществованияФайлов);
		ПараметрыВложения.Удалить("ТекущийНомерВложения");
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);
	Иначе		
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ПараметрыВложения.ТекущийНомерВложения + 1);
		ПроверитьНаличиеФайловНаДиске(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения)
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПослеИнициализации(Файл, ПараметрыВложения) Экспорт
	СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения);
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагмент(Файл, ПараметрыВложения)
	
	ПараметрыВложения.Вставить("Файл", Файл);				
	Оповещение = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайла", ЭтотОбъект, ПараметрыВложения);
	Файл.НачатьПроверкуСуществования(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайла(Существует, ПараметрыВложения) Экспорт
	
	Если Существует Тогда
		СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения);				
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияПослеВыбораКаталогаФрагментУсловие(ПараметрыВложения)
		
	Если ПараметрыВложения.ПерезаписатьВсе Тогда
		Оповещение = Новый ОписаниеОповещения("УстановкаТолькоЧтенияУФайла", ЭтотОбъект, ПараметрыВложения);
		Файл = ПараметрыВложения.Файл;
		Файл.НачатьУстановкуТолькоЧтения(Оповещение, Ложь);
	ИначеЕсли ПараметрыВложения.ПереименоватьВсе Тогда
		НомерПоПорядку		= "";
		ИмяБезРасширения	= ПараметрыВложения.Файл.ИмяБезРасширения;
		Расширение			= ПараметрыВложения.Файл.Расширение;
		ПараметрыВложения.Вставить("НомерПоПорядку", НомерПоПорядку);
		ПараметрыВложения.Вставить("Расширение", 	 Расширение);
		ПараметрыВложения.Вставить("ИмяБезРасширения", ИмяБезРасширения);		
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаТолькоЧтенияУФайла(ПараметрыВложения) Экспорт
	Оповещение = Новый ОписаниеОповещения("ПослеУдаленияПереименованияФайла", ЭтотОбъект, ПараметрыВложения);
	НачатьУдалениеФайлов(Оповещение, ПараметрыВложения.ПолноеИмяФайла);	
КонецПроцедуры	
	
&НаКлиенте
Процедура ПослеУдаленияПереименованияФайла(ПараметрыВложения) Экспорт
	
	ПолноеИмяФайла	= ПараметрыВложения.ПолноеИмяФайла;
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		СсылкаНаДвоичныеДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		ИмяФайла					= ПараметрыВложения.Файл.Имя;			
	Иначе	
		ДанныеФайла	= ПараметрыВложения.ДанныеФайла;
		СсылкаНаДвоичныеДанныеФайла = ПараметрыВложения.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		ИмяФайла	= ДанныеФайла.ИмяФайла;
	КонецЕсли;		
	
	Если ПараметрыВложения.Свойство("РазмерФайла") Тогда
		РазмерВМб = ПараметрыВложения.РазмерФайла;
		ПараметрыВложения.Удалить("РазмерФайла");
	Иначе		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	КонецЕсли;	
	ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб)
	|Пожалуйста, подождите...'"), ИмяФайла, 
	РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	Состояние(ТекстПояснения);
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, СсылкаНаДвоичныеДанныеФайла);
	ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	Если ТекущийНомерВложения = ПараметрыВложения.КоличествоВложений - 1 Тогда
		
		// Выполняем проверку на дубли и меняем дублям имена сохраняемых файлов.
		СписокИменФайлов = Новый СписокЗначений;
		Для Каждого ПолучаемыйФайл Из ПолучаемыеФайлы Цикл
			ЭлементСписка = СписокИменФайлов.НайтиПоЗначению(ПолучаемыйФайл.Имя);
			Если ЭлементСписка = Неопределено Тогда
				СписокИменФайлов.Добавить(ПолучаемыйФайл.Имя, "0");
			Иначе
				Файл = Новый Файл(ПолучаемыйФайл.Имя);
				ЭлементСписка.Представление = Строка(Число(ЭлементСписка.Представление) + 1);
				ПолучаемыйФайл.Имя = Файл.Путь + Файл.ИмяБезРасширения + "(" + ЭлементСписка.Представление + ")" + Файл.Расширение;
			КонецЕсли;
		КонецЦикла;
		// Выполняем сохранение файлов.
		Оповещение = Новый ОписаниеОповещения("СохранитьВложенияЗавершение", ЭтотОбъект, ПараметрыВложения);
		НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ПараметрыВложения.ВыборКаталога.Каталог, Ложь);
	Иначе
		ПараметрыВложения.Вставить("ТекущийНомерВложения", ТекущийНомерВложения);
		СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);	
	КонецЕсли;		
	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияФрагментУсловие(ПараметрыВложения)
	
	Если ПараметрыВложения.НомерПоПорядку = "" Тогда
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ ПараметрыВложения.Расширение;
	Иначе			
		ПолноеИмяФайла = ПараметрыВложения.КаталогСохранения + ПараметрыВложения.ИмяБезРасширения 
			+ "(" + Формат(ПараметрыВложения.НомерПоПорядку, "ЧРГ=") + ")" + ПараметрыВложения.Расширение;			
		КонецЕсли;
	ПараметрыВложения.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);	
	Оповещение = Новый ОписаниеОповещения("ФайлПерезаписиПослеИнициализации", ЭтотОбъект, ПараметрыВложения);
	Файл = Новый Файл();
	Файл.НачатьИнициализацию(Оповещение,ПолноеИмяФайла);

КонецПроцедуры

&НаКлиенте
Процедура ФайлПерезаписиПослеИнициализации (Файл, ПараметрыВложения) Экспорт
	ПараметрыВложения.Вставить("Файл",       Файл);				
	СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения);	
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияУсловиеЗавершениеЦикла(ПараметрыВложения)
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьНаСуществованиеФайлаПередСохранением", ЭтотОбъект, ПараметрыВложения);
	Файл = ПараметрыВложения.Файл;
	Файл.НачатьПроверкуСуществования(Оповещение);	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаСуществованиеФайлаПередСохранением(Существует, ПараметрыВложения) Экспорт
	Если Существует Тогда
		НомерПоПорядку = ПараметрыВложения.НомерПоПорядку;
		ПараметрыВложения.Вставить("НомерПоПорядку", ?(НЕ ЗначениеЗаполнено(НомерПоПорядку),1,НомерПоПорядку + 1));
		СохранитьВложенияФрагментУсловие(ПараметрыВложения);
	Иначе
		ПослеУдаленияПереименованияФайла(ПараметрыВложения);
	КонецЕсли;			
КонецПроцедуры	

&НаКлиенте
Процедура СохранитьВложенияЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыделенныеВложения = ДополнительныеПараметры.ВыделенныеВложения;
	КаталогСохранения = ДополнительныеПараметры.КаталогСохранения;
	КоличествоВложений = ДополнительныеПараметры.КоличествоВложений;
	ТолькоВыделенные = ДополнительныеПараметры.ТолькоВыделенные;
		
	Если ПолученныеФайлы.Количество() > 0  Тогда
		ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак",  КаталогСохранения);
		Состояние(НСтр("ru = 'Файлы успешно сохранены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопрос(ПараметрыВложения)
	
	Перем ОтветНаВопрос, СписокКнопок, ТекстВопроса;
	
	ТекстВопроса	= НСтр("ru='Файл " + ПараметрыВложения.ПолноеИмяФайла + " уже существует." + Символы.ПС + "Выберите действие для всех существующих файлов:'");
	СписокКнопок	= Новый СписокЗначений;
	СписокКнопок.Добавить("Перезаписать",	НСтр("ru='Перезаписать'"));
	СписокКнопок.Добавить("Переименовать",	НСтр("ru='Переименовать'"));
	СписокКнопок.Добавить("Отмена",			НСтр("ru='Отмена'"));
	Оповещение = Новый ОписаниеОповещения("СохранитьВложенияВопросЗавершение", ЭтотОбъект, ПараметрыВложения);
	ПоказатьВопрос(Оповещение, ТекстВопроса, СписокКнопок, , "Отмена");

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложенияВопросЗавершение(РезультатВопроса, ПараметрыВложения) Экспорт
	
	ТолькоВыделенные = ПараметрыВложения.ТолькоВыделенные;
	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = "Перезаписать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Истина);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);
	ИначеЕсли ОтветНаВопрос = "Переименовать" Тогда
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Истина);
	Иначе
		ПараметрыВложения.Вставить("ПерезаписатьВсе", Ложь);
		ПараметрыВложения.Вставить("ПереименоватьВсе", Ложь);		
		Возврат;
	КонецЕсли;
	СохранитьВложенияПослеВыбораКаталога(ПараметрыВложения.ВыбранныеФайлы, ПараметрыВложения);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеВыполнить(Команда)
	ВыделенныеВложения = Элементы.Вложения.ВыделенныеСтроки;
	Если (ВыделенныеВложения.Количество() = 1) Тогда
		СохранитьВложение();
		Возврат;
	КонецЕсли;	
	ПолучаемыеФайлы = Новый Массив;
	ПолученныеФайлы = Новый Массив;		
	ПроверкаСуществованияФайлов = Истина;
	СохранитьВложения(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеВложенияВыполнить(Команда)
	ПолучаемыеФайлы = Новый Массив;
	ПолученныеФайлы = Новый Массив;	
	ПроверкаСуществованияФайлов = Истина;
	СохранитьВложения(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьТекущееВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияСкрытьПанель(Команда)
	ВложенияПредставлениеНажатие(Неопределено, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	Если Не ПроверитьНаВозможностьОтпавкиПисьма(Объект.УчетнаяЗапись) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Учетная запись не предназначена для отправки писем'"));
		Возврат;
		
	КонецЕсли;
	
	Записать();
	
	Основание = Новый Структура("Основание, Команда", Объект.Ссылка, "Ответить");
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	Если Не ПроверитьНаВозможностьОтпавкиПисьма(Объект.УчетнаяЗапись) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Учетная запись не предназначена для отправки писем'"));
		Возврат;
		
	КонецЕсли;
	
	Основание = Новый Структура("Основание, Команда", Объект.Ссылка, "ОтветитьВсем");
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	Если Не ПроверитьНаВозможностьОтпавкиПисьма(Объект.УчетнаяЗапись) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Учетная запись не предназначена для отправки писем'"));
		Возврат;
		
	КонецЕсли;
	
	Основание = Новый Структура("Основание, Команда", Объект.Ссылка, "Переслать");
	ПараметрыОткрытия = Новый Структура("Основание, Ключ", Основание,ПолучитьСсылкуНовогоДокумента());
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредмет(Команда)
	
	Элементы.ПредметПредставление.Видимость = Ложь;
	Элементы.ПредметИзменение.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметИзменениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПредметНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметИзменениеОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ПредметИзменение.ВыбиратьТип = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КодировкаПриИзменении(Элемент)
	ПреобразоватьКодировкуПисьма(Объект.Кодировка);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКодировку(Команда)
	
	СписокКодировок = ВзаимодействияКлиентСервер.СписокКодировок();
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьКодировкуЗавершение", ЭтотОбъект);
	СписокКодировок.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите кодировку",СписокКодировок.НайтиПоЗначению(НРег(Объект.Кодировка)));
	
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьКодировкуЗавершение(ВыбраннаяКодировка, ДопПараметры) Экспорт
	
	Если ВыбраннаяКодировка <> Неопределено Тогда
		ПреобразоватьКодировкуПисьма(ВыбраннаяКодировка.Значение);	
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПредметПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	// откроем форму предмета
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", 
			Новый Структура("Ключ, ОткрытиеИзФормы", Предмет, Истина),,,,,,РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда			
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента", 
			Новый Структура("Ключ, ОткрытиеИзФормы", Предмет, Истина),,,,,,РежимОткрытияОкнаФормы.Независимый);		

	Иначе			
		ПоказатьЗначение(, Предмет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачу(Команда)
	
	CRM_БизнесПроцессыИЗадачиВызовСервера.Выполнить_Задачу(ЭтотОбъект._ЛичнаяЗадача, Истина);
	ПоказатьОповещениеПользователя(
	НСтр("ru = 'Задача выполнена'"),
	ПолучитьНавигационнуюСсылку(ЭтотОбъект._ЛичнаяЗадача),
	Строка(ЭтотОбъект._ЛичнаяЗадача));	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ВыполнитьЗадачуЗавершение", ЭтотОбъект);
	CRM_УправлениеЭлектроннойПочтойКлиент.ВопросПеренестиПисьмоВПапкуОбработанные(Объект.УчетнаяЗапись, Папка, ОписаниеОповещения);		
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуЗавершение(ПапкаОтработанные, ДополнительныеПараметры) Экспорт
	
	Объект.Удалить_Рассмотрено = Истина;
	УстановитьПоложениеТумблераСтатусПисьма();	
	Модифицированность = Истина;
	Если НЕ ПапкаОтработанные = ПредопределенноеЗначение("Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка") Тогда
		Папка = ПапкаОтработанные;
		Попытка
			Записать();
			ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(Объект.Ссылка, Папка, Ложь);
			Оповестить("CRM_УстановленФлагОбработано");
			Закрыть();
			Возврат;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось перенести письмо'"));
		КонецПопытки;
	КонецЕсли;
	
	ЗаполнитьГруппуГиперссылок();
		
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	Оповестить("ЗадачаВыполнена");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГиперссылкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.Имя = "_ЛичнаяЗадачаСтрокой" Тогда
		ПоказатьЗначение(, ЭтотОбъект._ЛичнаяЗадача);
	ИначеЕсли Элемент.Имя = "_ПоручениеСтрокой" Тогда
		ПоказатьЗначение(, ЭтотОбъект._Поручение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительВладелецНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ОтправительВладелец);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметИзменениеПриИзменении(Элемент)
	
	ПредметПредставление = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеПредметаДокумента(Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПапкаПриИзменении(Элемент)
	
	ПапкаВид = ПолучитьВидПапкиПисем(Папка);
	
	Если ЗначениеЗаполнено(Папка) И ПапкаВид = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Обработанные") Тогда
		Рассмотрено = Истина;
		УстановитьПоложениеТумблераСтатусПисьма();			
		НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	КонецЕсли;
	
	Если ПапкаВид = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Входящие") Тогда
		
		Элементы.ЗаписатьИЗакрыть.Видимость = Ложь;
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Ложь;	
		Элементы.ДокументЭлектронноеПисьмоВходящееОбработано.Видимость = Истина;
		Элементы.ДокументЭлектронноеПисьмоВходящееОбработано.КнопкаПоУмолчанию = Истина;	
	
	Иначе	
		
		Элементы.ДокументЭлектронноеПисьмоВходящееОбработано.Видимость = Ложь;
		Элементы.ДокументЭлектронноеПисьмоВходящееОбработано.КнопкаПоУмолчанию = Ложь;	
		Элементы.ЗаписатьИЗакрыть.Видимость = Истина;
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;	
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	
	ИсточникПервичногоИнтереса = Неопределено;
	ДоступностьПервичногоИнтереса();
	Если ИсточникПервичногоИнтереса = Неопределено ИЛИ ИсточникПервичногоИнтереса.Пустая() Тогда
		Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(КаналПервичногоИнтереса, "ТипЗначения"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
		И ТипКаналаПервичногоИнтереса(КаналПервичногоИнтереса)= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ИсточникПервичногоИнтереса);
		ПараметрыФормы.Вставить("СкрытьПодменюВид", Истина);
		
		ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
		
		ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
		ЭлементОтбора.ПравоеЗначение	= Истина;
		ЭлементОтбора.Использование		= Истина;
		
		ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
		ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
		ЭлементОтбора.Использование		= Истина;
		
		ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
		ЭлементОтбора.ПравоеЗначение	= НачалоДня(ТекущаяДата());
		ЭлементОтбора.Использование		= Истина;
		
		ФормаВыбора.Открыть();
	КонецЕсли;
	
	ДоступностьПервичногоИнтереса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПисьма(Команда)
	
	ТекстЗаголовкиИнтернета = Новый ТекстовыйДокумент;
	ТекстЗаголовкиИнтернета.ДобавитьСтроку(Объект.ВнутреннийЗаголовок);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Создано", Объект.Дата);
	СтруктураПараметры.Вставить("Получено", Объект.ДатаПолучения);
	СтруктураПараметры.Вставить("УведомитьОДоставке", Объект.УведомитьОДоставке);
	СтруктураПараметры.Вставить("УведомитьОПрочтении", Объект.УведомитьОПрочтении);
	СтруктураПараметры.Вставить("ЗаголовкиИнтернета", ТекстЗаголовкиИнтернета);
	СтруктураПараметры.Вставить("Письмо", Объект.Ссылка);
	СтруктураПараметры.Вставить("ТипПисьма", "ЭлектронноеПисьмоВходящее");
	СтруктураПараметры.Вставить("Кодировка", Объект.Кодировка);
	СтруктураПараметры.Вставить("ВнутреннийНомер", Объект.Номер);
	СтруктураПараметры.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
	СтруктураПараметры.Вставить("Папка", Папка);	
	
	ОткрытьФорму("Обработка.CRM_МенеджерПочты.Форма.ПараметрыЭлектронногоПисьма",
		СтруктураПараметры, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// +CRM

////////////////////////////////////////////////////////////////////////////////
// Выполнение команд подключаемых отчетов и обработок.

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
 
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// -CRM

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["ВсеВложенияПометка"] = Неопределено Тогда
		ВсеВложенияПометка	= Настройки["ВсеВложенияПометка"];
	Иначе
		ВсеВложенияПометка	= Ложь;
	КонецЕсли;
	Элементы.ФормаВсеВложения.Пометка	= ВсеВложенияПометка;
	
	Если НЕ Настройки["ВсегдаПоказыватьВложения"] = Неопределено Тогда
		ВсегдаПоказыватьВложения	= Настройки["ВсегдаПоказыватьВложения"];
	Иначе
		ВсегдаПоказыватьВложения	= Ложь;
	КонецЕсли;
	Элементы.ФормаВсегдаПоказыватьВложения.Пометка	= ВсегдаПоказыватьВложения;	
	Элементы.КонтекстноеМенюВложенияСкрытьПанель.Видимость = НЕ ВсегдаПоказыватьВложения;		
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СозданИзЭтапаСделки") Тогда
		_СозданИзЭтапаСделки = Параметры.СозданИзЭтапаСделки;
	Иначе
		_СозданИзЭтапаСделки = Ложь;
	КонецЕсли;
	
	// открываем из eml-файла
	Если Параметры.Свойство("СтруктураВложенногоПисьма") Тогда
		
		ОткрытаФормаВложенногоПисьма = Истина;
		
		СтруктураВложенногоПисьма = Параметры.СтруктураВложенногоПисьма;
		
		АдресВложенногоПисьма = СтруктураВложенногоПисьма.АдресВложенногоПисьма;
		
		ПочтовоеСообщение = ПолучитьИзВременногоХранилища(АдресВложенногоПисьма);
		
		ОбъектЗначение = РеквизитФормыВЗначение("Объект");
		
		CRM_УправлениеЭлектроннойПочтой.ЗаполнитьДокументЭлектронноеПисьмо(ОбъектЗначение, ПочтовоеСообщение, Ложь);
		
		ЗначениеВРеквизитФормы(ОбъектЗначение, "Объект");
		
		// заполним вложения
		
		Для Каждого ПочтовоеСообщениеВложение Из ПочтовоеСообщение.Вложения Цикл
			
			АдресВложения = ПоместитьВоВременноеХранилище(ПочтовоеСообщениеВложение.Данные, УникальныйИдентификатор);
			
			ВложенияНоваяСтрока = Вложения.Добавить();
			
			// Вместо  ПочтовоеСообщениеВложение.ИмяФайла корректнее использовать ПочтовоеСообщениеВложение.Имя.
			ВложенияНоваяСтрока.ИмяФайла		= ПочтовоеСообщениеВложение.Имя;
			ВложенияНоваяСтрока.Размер 		  	= ПочтовоеСообщениеВложение.Данные.Размер();
			РазмерВложения						= Цел(ВложенияНоваяСтрока.Размер/1024);
			ВложенияНоваяСтрока.РазмерСтрокой   = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(ВложенияНоваяСтрока.Размер) + " байт");
			ВложенияНоваяСтрока.ИДФайлаЭлектронногоПисьмаОтбор = АдресВложения;
			
			Расширение = ВзаимодействияКлиентСервер.РасширениеФайла(ПочтовоеСообщениеВложение.Имя);
			
			// Выполним установку индекса пиктограммы при записи объекта.
			ВложенияНоваяСтрока.ИндексКартинки = ПолучитьИндексПиктограммыФайла(Расширение);
			
		КонецЦикла;
		
		Вложения.Сортировать("ИДФайлаЭлектронногоПисьмаОтбор");
		
		УдалитьИзВременногоХранилища(АдресВложенногоПисьма);
		
	КонецЕсли;
	
	// Запретим создание новых
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ОткрытаФормаВложенногоПисьма Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Запретим изменение документа пользователям, которых нет в учетной записи.
	ВключитьТолькоПросмотр = Ложь;
	
	Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда // Если нет учетной записи, то открываем вложение типа EML.
		
		// Ответственному разрешено открывать письмо независимо от прочих проверок.
		Если НЕ Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь() Тогда
			
			// Проверим наличие доступа в учетной записи.
			Если НЕ CRM_ОбщегоНазначенияСервер.НайтиПользователяВУчетнойЗаписи(Объект.УчетнаяЗапись, Пользователи.ТекущийПользователь()) Тогда
				
				Если НЕ Объект.УчетнаяЗапись.CRM_РазрешитьПросмотрПисемВсемПользователям Тогда
					
					// Проверяем, открывается ли письмо из другого документа, задачи, БП и пр., если да, то письмо ставим в режим
					// "Только чтение".
					Если Параметры.Свойство("ОткрытиеИзФормы") И Параметры.ОткрытиеИзФормы Тогда
						ВключитьТолькоПросмотр = Истина;
					
					Иначе
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Недостаточно прав для работы с письмами данной учетной записи!
											|Текущий пользователь должен быть добавлен в список пользователей учетной записи либо
											|являться Ответственным данного письма либо
											|в учетной записи должен стоять флаг ""Разрешить просмотр писем всем пользователям системы""
											|'"));
						Отказ = Истина;
						Возврат;
					КонецЕсли;		
				
				Иначе	
					ВключитьТолькоПросмотр = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВключитьТолькоПросмотр Тогда
		ТолькоПросмотр = Истина;
		Элементы.КоманднаяПанельАтрибуты.Доступность = Ложь;
		Элементы.ГруппаИнтерес.Доступность = Ложь;
		Элементы.Документ_ЭлектронноеПисьмоВходящее_Команда_Ответить.Доступность = Ложь;
		Элементы.ДокументЭлектронноеПисьмоВходящееОтветитьВсем.Доступность = Ложь;
		Элементы.ДокументЭлектронноеПисьмоВходящееПереслать.Доступность = Ложь;
		Элементы.ДокументЭлектронноеПисьмоВходящееОбработано.Доступность = Ложь;
		Элементы.СтатусДокумента.Доступность = Ложь;
	КонецЕсли;
	
	// Установим текст и вид текста.
	Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
		
		ТекстПисьма = Объект.ТекстHTML;
		Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеHTMLДокумента;
		
	Иначе
		
		ТекстПисьма = Объект.Текст;
		Элементы.ТекстПисьма.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
		
	КонецЕсли;
	
	// Сформируем представление отправителя.
	ОтправительПредставление = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеАдресата(Объект.ОтправительПредставление, Объект.ОтправительАдрес, Объект.ОтправительКонтакт);
	
	// Сформируем представление Кому и Копии.
	ПолучателиПредставление            = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиПисьма);
	ПолучателиКопийПредставление       = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиКопий);
	ПолучателиОтветаПредставление      = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеСпискаАдресатов(Объект.ПолучателиОтвета);
	
	ДополнительнаяИнформацияОПисьме = НСтр("ru = 'Создано:'") + "   " + Объект.Дата + НСтр("ru = '
	|Получено:'") + "  " + Объект.ДатаПолучения + НСтр("ru = '
	|Важность:'") + "  " + Объект.Важность + НСтр("ru = '
	|Кодировка:'") + " " + Объект.Кодировка;
	
	// Заполним вложения
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Вложения.Очистить();
		
		табВложения = CRM_УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка);
		
		Для Каждого Стр Из табВложения Цикл
			новСтр 										= Вложения.Добавить();
			новСтр.Ссылка         						= Стр.Ссылка;
			новСтр.ИмяФайла       						= Стр.ИмяФайла;
			новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
			новСтр.Размер        						= Стр.Размер;
			РазмерВложения								= Цел(Стр.Размер/1024);
			новСтр.РазмерСтрокой   						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(Стр.Размер) + " байт");
			новСтр.ИДФайлаЭлектронногоПисьмаОтбор = ?(Стр.ИДФайлаЭлектронногоПисьма = "", "###", Стр.ИДФайлаЭлектронногоПисьма);
		КонецЦикла;
		
		Для Каждого УдаленноеВложение Из Объект.НепринятыеВложения Цикл
			
			НовоеВложение = Вложения.Добавить();
			НовоеВложение.ИмяФайла = УдаленноеВложение.ИмяВложение;
			НовоеВложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(".msg") + 1;
			НовоеВложение.ИДФайлаЭлектронногоПисьмаОтбор = "#";
			
		КонецЦикла;
		
		Вложения.Сортировать("ИДФайлаЭлектронногоПисьмаОтбор");
		
		//ЗначениеВРеквизитФормы(табВложения, "Вложения");
		
	КонецЕсли;
	
	ПредставлениеУчетнойЗаписи = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеАдресата(Объект.УчетнаяЗапись.ИмяПользователя, Объект.УчетнаяЗапись.АдресЭлектроннойПочты, "");
	Заголовок = CRM_ОбщегоНазначенияСервер.ПолучитьЗаголовокФормыДокумента(Объект.Ссылка, ПредставлениеУчетнойЗаписи);
	
	Если ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		
		Если ЗначениеЗаполнено(Объект.ОтправительКонтакт) Тогда
			
			Связи = вогУправлениеСвязями.РолиДолжностиКонтактногоЛица(Объект.ОтправительКонтакт);
			Если Связи.Количество()>0 тогда
				ОтправительВладелец = Связи[0].Объект;
			КонецЕсли;
			Элементы.ОтправительВладелец.Видимость = Истина;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ОтправительКонтакт) Тогда
		
		Объект.ОтправительКонтакт = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		
	КонецЕсли;
	
	// -CRM
	
	Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML 
		ИЛИ Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		
		Объект_ТекстHTML = Объект.ТекстHTML;
		
		Для Каждого СтрокаВложения Из Вложения Цикл
			Если ЗначениеЗаполнено(СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор)
			   И СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор <> "#" Тогда
				
				Если ЗначениеЗаполнено(СтрокаВложения.Ссылка) Тогда
					// +CRM
					ДвоичныеДанныеКартинки = РаботаСФайлами.ДвоичныеДанныеФайла(СтрокаВложения.Ссылка);
					Если ДвоичныеДанныеКартинки = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					// -CRM
					АдресКартинки = ПоместитьВоВременноеХранилище(Новый Картинка(ДвоичныеДанныеКартинки),УникальныйИдентификатор);
					
				Иначе
					
					АдресКартинки = СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор;
					
				КонецЕсли; 	
				
				Если Найти(Объект_ТекстHTML, "cid:"+СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор) > 0 Тогда
					Объект_ТекстHTML = СтрЗаменить(Объект_ТекстHTML, "cid:"+СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор, АдресКартинки);
				Иначе
					Объект_ТекстHTML = СтрЗаменить(Объект_ТекстHTML, СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор, АдресКартинки);
				КонецЕсли;
				
				Если СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор = "###" Тогда
					СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор = "#";
				КонецЕсли;
				// +CRM показывать будем только файлы-вложения, изображения из текста во вложениях не показываем.
			Иначе
				
				СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор = "#";
				
				// -CRM	
			КонецЕсли;	
		КонецЦикла;
		
		// У некоторых писем отсутсвует заголовок.
		
		Если  Найти(Объект_ТекстHTML,"<head>") = 0 Тогда
			
			Начало = "
			|<html>
			|<head>  
			|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
			|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
			|<body scroll=""auto"">";
			
			Конец = "
			|</body>
			|</html>";
			
			Объект_ТекстHTML = Начало + Объект_ТекстHTML + Конец;
		КонецЕсли;	
		
		ТекстПисьма = Объект_ТекстHTML;
	Иначе	
		Для Каждого СтрокаВложения Из Вложения Цикл
			СтрокаВложения.ИДФайлаЭлектронногоПисьмаОтбор = "#";
		КонецЦикла;	
	КонецЕсли;
	
	ТекущийПользователь  = Пользователи.АвторизованныйПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	CRM_Теги.УстановитьПараметрыВыбора(Элементы);
	
	// +CRM показывать будем только файлы-вложения, изображения из текста во вложениях не показываем.
	Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор","#");
	// -CRM	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ИспользоватьБизнесПроцессы = Константы.CRM_ИспользоватьБизнесПроцессы.Получить();
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
	ПредметПредставление = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеПредметаДокумента(Предмет);
	
	Элементы.ПредметПредставление.Видимость = ЗначениеЗаполнено(ПредметПредставление);
	Элементы.ИзменитьПредмет.Видимость = Истина;
	Элементы.ПредметИзменение.Видимость = Ложь;
	
	// { VOG RMV 2019-03-19
	// Всё, что касается интереса не используется
	//CRM_ОбщегоНазначенияСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, Объект, "ГруппаИнтерес", ТипЗнч(Объект.Ссылка));
	//CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, Истина, , ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	//CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);
	// } VOG RMV 2019-03-19
	
	Если НЕ ОткрытаФормаВложенногоПисьма Тогда
				
		Если ЗначениеЗаполнено(Объект.ОтправительКонтакт) И
			(ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") ИЛИ ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
			ОтображатьКаналИсточник = Истина;
			Партнер = ?(ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры"),Объект.ОтправительКонтакт,Объект.ОтправительКонтакт.Владелец);
		КонецЕсли;
		
		// +ПанельБП
		ЗаполнитьГруппуГиперссылок();
		// -ПанельБП
		
		СформироватьОписаниеКаналаИсточника();
		
		НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
		
		// { VOG RMV 2019-03-04
		//ЗаполнятьПервичныйИнтерес = Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить();
		ЗаполнятьПервичныйИнтерес = Ложь;
		// } VOG RMV 2019-03-04
		
		Если НЕ Объект.Ссылка.Пустая() Тогда
			Элементы.РанееЗарегистрированныйИнтерес.Видимость = Ложь;
		КонецЕсли;
		
		ЗаполнитьТаблицыПолучателей();
		
	КонецЕсли;
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	ОткрытоИзФормыНапоминаний = Ложь;
	Параметры.Свойство("ОткрытоИзФормыНапоминаний", ОткрытоИзФормыНапоминаний); 
	
	Элементы.Вложения.Видимость = Ложь;
	
	Если Папка.CRM_Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие Тогда
		
		Элементы.ЗаписатьИЗакрыть.Видимость = Ложь;
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Ложь;	
		Элементы.ДокументЭлектронноеПисьмоВходящееОбработано.Видимость = Истина;
		Элементы.ДокументЭлектронноеПисьмоВходящееОбработано.КнопкаПоУмолчанию = Истина;	
	
	КонецЕсли;
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();	
	УстановитьПоложениеТумблераСтатусПисьма();		
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект);
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Лиды
	Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Объект.Ссылка) Тогда
		СтруктураСостоянияЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Объект.Ссылка);
		Если СтруктураСостоянияЛида = Неопределено Тогда
			Элементы.ГруппаСостояниеЛида.Видимость = Ложь;
		Иначе
			СостояниеЛида = СтруктураСостоянияЛида.Состояние;
			Если СостояниеЛида = Справочники.CRM_СостоянияЛидов.Отклонен Тогда
				ПричинаОтклоненияЛида = СтруктураСостоянияЛида.ПричинаОтклонения;
				КомментарийСостоянияЛида = СтруктураСостоянияЛида.Комментарий;
			Иначе
				Элементы.ПричинаОтклонения.Видимость = Ложь;
				Элементы.КомментарийСостоянияЛида.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСостояниеЛида.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СтруктураРеквизитов = Взаимодействия.СтруктураРеквизитовВзаимодействия(Объект.Ссылка);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРеквизитов, "Предмет, Рассмотрено, РассмотретьПосле, Папка");
	ОбработатьНеобходимостьУведомленияОПрочтении();
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// +CRM в БСП 2.2 это уже есть!
	// Установим текст и вид текста.
	Если Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда
		Элементы.ТекстПисьма.ТолькоПросмотр = Ложь;
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Партнеры") ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
		ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Если НЕ ИмяЭлемента = "" Тогда
			Если ИмяЭлемента = "ОтправительКонтакт" Тогда
				Объект[ИмяЭлемента] = НовыйОбъект;
				ОбработкаВыбораКонтактаОтправителя();
			Иначе
				ТекДанные			= ЭтотОбъект[ИмяЭлемента].НайтиПоИдентификатору(ИдентификаторСтрокиПолучателя);
				ТекДанные.Контакт	= НовыйОбъект;
			КонецЕсли;
			ИмяЭлемента			= "";
			ТекущееДействие		= Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если ИмяСобытия = "Создан новый партнер из письма" Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			КонтактноеЛицо	= Параметр;
			Клиент			= CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
		Иначе	
			Клиент			= Параметр;
			КонтактноеЛицо	= ПолучитьОсновноеКонтактноеЛицо(Клиент);
		КонецЕсли;	
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			Объект.ОтправительКонтакт = КонтактноеЛицо;
			ОтправительВладелец = Клиент;
			ОтправительПредставление = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеАдресата(Объект.ОтправительПредставление, Объект.ОтправительАдрес, Объект.ОтправительКонтакт);
			Элементы.ОтправительВладелец.Видимость = Истина;
		Иначе
			Объект.ОтправительКонтакт = Клиент;
			ОтправительПредставление = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеАдресата(Объект.ОтправительПредставление, Объект.ОтправительАдрес, Объект.ОтправительКонтакт);
			Элементы.ОтправительВладелец.Видимость = Ложь;
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru ='Связать с контактом все письма от данного email?'"),РежимДиалогаВопрос.ДаНет,60);
		
		// +ПанельБП
	ИначеЕсли ИмяСобытия = "ЗадачаВыполнена" ИЛИ ИмяСобытия = "Запись_ЗадачаИсполнителя" ИЛИ ИмяСобытия = "СохраненаЛичнаяЗадача" Тогда
		Если ИмяСобытия = "СохраненаЛичнаяЗадача" Тогда
			Если ОбновитьДанныеДокументаПоСсылке() Тогда
				ОбновитьОтображениеДанных();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьГруппуГиперссылок();
		НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
		УстановитьПоложениеТумблераСтатусПисьма();	
		
		// -ПанельБП
		
	ИначеЕсли ИмяСобытия = "Создан новый партнер" ИЛИ  ИмяСобытия = "Создано новое контактное лицо" ИЛИ  ИмяСобытия = "НовыйПотенциальныйКлиентЗаписан" Тогда
		
		Если НЕ ИмяЭлемента = "" Тогда
			Если ((ИмяСобытия = "Создан новый партнер" ИЛИ ИмяСобытия = "НовыйПотенциальныйКлиентЗаписан") И ТекущееДействие = 0) ИЛИ (ИмяСобытия = "Создано новое контактное лицо" И ТекущееДействие = 1) Тогда
				Если ИмяЭлемента = "ОтправительКонтакт" Тогда
					Объект[ИмяЭлемента] = Параметр;
					ОбработкаВыбораКонтактаОтправителя();
				Иначе
					ТекДанные			= ЭтотОбъект[ИмяЭлемента].НайтиПоИдентификатору(ИдентификаторСтрокиПолучателя);
					ТекДанные.Контакт	= Параметр;
				КонецЕсли;
				ИмяЭлемента			= "";
				ТекущееДействие		= Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "CRM_УстановленФлагОбработано" И Источник = ЭтотОбъект Тогда
		
		Если ЭтотОбъект.Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбработаноОбращениеПоПисьму" Тогда
		
		// { VOG RMV 2019-03-19
		// Всё, что касается интереса не используется
		//Попытка
		//	CRM_ДобавитьИнтересНаСервере(Параметр, Истина);
		//	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(Параметр);
		//	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
		//	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
		//	Записать();
		//Исключение
		//КонецПопытки;
		// } VOG RMV 2019-03-19		
		
	КонецЕсли;
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПроставитьКонтактВходящимПисьмам();	
	КонецЕсли;
	Записать();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	НаличиеУчастников = ?(ЗначениеЗаполнено(Партнер), Истина,Ложь);
	Если ЗаполнятьПервичныйИнтерес Тогда
		
		Если НаличиеУчастников Тогда
			Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
				Если ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
					УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
				КонецЕсли;
			Иначе
				УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
			КонецЕсли;
		Иначе
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"КаналПервичногоИнтереса");
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
		КонецЕсли;
		
	Иначе
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
	КонецЕсли;
	
	ТабПервичныйИнтерес = Неопределено;
	Попытка
		ТабПервичныйИнтерес = ПервичныйИнтерес.Получить(0);
	Исключение	КонецПопытки;
	Если ТабПервичныйИнтерес <> Неопределено 
		И ЗначениеЗаполнено(ТабПервичныйИнтерес.КаналПервичногоИнтереса) 
		И ТабПервичныйИнтерес.Актуальность = Истина Тогда 
		
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,"ИсточникПервичногоИнтереса");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Удалить_Рассмотрено И ТребуетсяЗапросУведомленияОПрочтении Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Отправитель запросил уведомление о прочтении. Отправить?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Да,
			НСтр("ru='Запрос уведомления'"));
		
	КонецЕсли;
	
	ПроверитьСкорректироватьПолучателейПисьма();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		CRM_УправлениеЭлектроннойПочтой.УстановитьПризнакОтправкиУведомления(Объект.Ссылка, Истина);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		CRM_УправлениеЭлектроннойПочтой.УстановитьПризнакОтправкиУведомления(Объект.Ссылка, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Взаимодействия.ПередЗаписьюВзаимодействияИзФормы(ЭтотОбъект, ТекущийОбъект, ИзменилисьКонтакты);
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если Объект.Удалить_Рассмотрено И ТребуетсяУстановкаФлагаОтправкиУведомления Тогда
		УправлениеЭлектроннойПочтой.УстановитьПризнакОтправкиУведомления(Объект.Ссылка, Истина);
	КонецЕсли;
	// { VOG RMV 2019-03-19
	// Всё, что касается интереса не используется
	//CRM_ТаблицаИнтересовЗнач = РеквизитФормыВЗначение("CRM_ТаблицаИнтересов",Тип("ТаблицаЗначений"));
	//ТекущийОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",CRM_ТаблицаИнтересовЗнач);
	// } VOG RMV 2019-03-19	
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		// Зафиксировать актуальный источник привлечения.
		НаборРегистра = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		НаборРегистра.Прочитать();
		НаборРегистра.Очистить();
		
		Если ЗначениеЗаполнено(Партнер) И (ЗначениеЗаполнено(КаналПервичногоИнтереса) ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)) Тогда
			Запись								= НаборРегистра.Добавить();
			Запись.Период						= ?(ЗначениеЗаполнено(ТекущийОбъект.ДатаПолучения), ТекущийОбъект.ДатаПолучения, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
			Запись.Партнер						= Партнер;
			Запись.Сделка						= ТекущийОбъект.Ссылка;
			Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
			Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
		КонецЕсли;
		
		НаборРегистра.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОткрытоИзФормыНапоминаний Тогда
		//Оповестить("ПисьмоУспешноОткрытоИзНапоминания",Новый Структура("Ссылка", Объект.Ссылка));
		Оповестить("ПисьмоУспешноОткрытоИзНапоминания",Новый Структура("Ссылка, Пользователь", Объект.Ссылка, ТекущийПользователь));
	КонецЕсли; 
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор","#");
	КонецЕсли;
	СформироватьПредставлениеВложений(ВсеВложенияПометка);
	
	ДоступностьПервичногоИнтереса();
	
	// { VOG RMV 2019-03-19
	// Всё, что касается интереса не используется
	//CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	//CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваКоманднойПанелиИнтересовВФормеДокумента(ЭтотОбъект);		
	// } VOG RMV 2019-03-19
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если CRM_НапоминанияСервер.CRM_ПроверитьНапоминанияОПисьме(Объект.Ссылка) Тогда
	
		Оповестить("ОбновитьНапоминания", Новый Структура("ОбновитьНапоминанияОВходящихПисьмах", Истина));
	
	КонецЕсли; 
	
	УстановитьПометкуОПрочтении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОбновленыДанныеЭлектронногоПисьмаВходящего", Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.УточнениеКонтактов") Тогда
		
		//Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		//	Возврат;
		//КонецЕсли;
		//
		//ЗаполнитьУточненныеКонтакты(ВыбранноеЗначение);
		//ИзменилисьКонтакты = Истина;
		//Модифицированность = Истина;
		
	Иначе
		
		ВзаимодействияКлиент.ФормаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, КонтекстВыбора);
		
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕРВИЧНОГО ИНТЕРЕСА

&НаСервереБезКонтекста
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции

&НаСервере
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру(ДатаАктуальности)
	
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	пПартнер = Неопределено;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		пПартнер = Партнер;
	Иначе
		пПартнер = Объект.Партнер;
	КонецЕсли;
	Если ЗначениеЗаполнено(пПартнер) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата,,пПартнер);
		Если ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
			
			СтрокаПервичногоИнтереса = ПервичныйИнтерес.Вставить(0);
			ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса,Интерес);
			СтрокаПервичногоИнтереса.Актуальность = Истина;
			
			Если ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("СправочникСсылка.МаркетинговыеМероприятия") 
			   И ЗначениеЗаполнено(Интерес.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(Объект.Дата);
				ДатаАктуальности = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеКаналаИсточника()
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		
		КаналПервичногоИнтереса = Неопределено;
		ИсточникПервичногоИнтереса = Неопределено;
		Элементы.РанееЗарегистрированныйИнтерес.Видимость = ЗначениеЗаполнено(Партнер);
		ПервичныйИнтерес.Очистить();
		ВыводитьНадпись = Ложь;
		пПартнер = Неопределено;
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			пПартнер = Партнер;
		Иначе
			пПартнер = Объект.Партнер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пПартнер) Тогда
			
			АктуальноДо = '00010101';
			ПолучитьПредыдущийПервичныйИнтересПоПартнеру(АктуальноДо);
			
			Интерес = Неопределено;
			Попытка
				
				Интерес = ПервичныйИнтерес.Получить(0);
				
			Исключение	КонецПопытки;
			
			РанееНеЗарегистровано = Ложь;
			Если Интерес <> Неопределено И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
				ВыводитьНадпись = Истина;
					Надпись = "";
					CRM_МаркетингСервер.СформироватьНадписьПервичногоИнтереса(Объект.Ссылка, Интерес, АктуальноДо, Надпись, ВыводитьНадпись);
					Элементы.РанееЗарегистрированныйИнтерес.Заголовок = Надпись;
			КонецЕсли;
			
			Элементы.РанееЗарегистрированныйИнтерес.Видимость = ВыводитьНадпись;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	
	// Определить канал и источник первичного интереса.
	пПартнер = Неопределено;
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		пПартнер = Партнер;
	Иначе
		пПартнер = Объект.Партнер;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			
			Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата,Объект.Ссылка,пПартнер);
			
			КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса);
			
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьПервичногоИнтереса()
	
	Актуальность = Ложь;
	ПредыдущийИсточник = Неопределено;
	Попытка
		ПредыдущийИсточник = ПервичныйИнтерес.Получить(0);
	Исключение КонецПопытки;
	Если ПредыдущийИсточник <> Неопределено Тогда
		
		Актуальность = ПредыдущийИсточник.Актуальность;
		
	КонецЕсли;
	пПартнер = Партнер;
	
	НаличиеУчастников = ?(ЗначениеЗаполнено(пПартнер),Истина,Ложь);
	
	Если НаличиеУчастников Тогда
		Элементы.КаналПервичногоИнтереса.Доступность = Истина;
		Элементы.КаналПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.КаналПервичногоИнтереса.Доступность = Ложь;
		Элементы.КаналПервичногоИнтереса.ТолькоПросмотр = Истина;
		Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
		И ТипПВХ(КаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.Доступность = Истина;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Отметки незаполненного
	Если Актуальность = Истина И Не ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	ИначеЕсли Актуальность = Ложь 
		И Не ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		// Если обязательно заполнять актуальный источник привлечения, тогда подсвечиваем канал актуального источника
		// привлечения.
		Если ЗаполнятьПервичныйИнтерес Тогда
			
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Истина;
			
		Иначе
			
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ИсточникПервичногоИнтереса.Доступность = Истина 
		// И ЗаполнятьПервичныйИнтерес 
		И Не ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
		И ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// *******************************************************************************************

&НаКлиенте
Процедура ОтправительКонтактПриИзменении(Элемент)
	
	ОбработкаВыбораКонтактаОтправителя();
//	ПерезаполнитьПодсказкуОбАктивныхИнтересах();		
	
КонецПроцедуры

&НаСервере
// Функция добавляет адрес электронной почты выбранному контакту.
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//	EMail	- Строка			- Адрес электронной почты.
//
// Возвращаемое значение:
//	Булево	- Результат добавления.
//
Функция ДобавитьEMailКонтакту(Контакт, EMail)
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат Ложь;
	ИначеЕсли ПустаяСтрока(Контакт) Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EmailПартнера;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВидКИ	= Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	АдресСуществует = Ложь;
	Для Каждого СтрокаКИ Из Контакт.КонтактнаяИнформация Цикл
		Если НЕ (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты) Тогда
			Продолжить;
		ИначеЕсли СтрокаКИ.Представление = EMail Тогда	
			АдресСуществует = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если АдресСуществует Тогда
		Возврат Истина;
	КонецЕсли;
	КонтактОбъект = Контакт.ПолучитьОбъект();
	НоваяСтрока = КонтактОбъект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Вид	= ВидКИ;
	НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	НоваяСтрока.Представление	= EMail;
	НоваяСтрока.АдресЭП			= EMail;
	Поз = Найти(EMail, "@");
	Если Поз < 0 Тогда
		НоваяСтрока.ДоменноеИмяСервера = Сред(EMail, Поз + 1);
	КонецЕсли;
	АдресЗаписан = Истина;
	Попытка
		КонтактОбъект.Записать();
	Исключение
		АдресЗаписан = Ложь;
	КонецПопытки;	
	Возврат АдресЗаписан;
КонецФункции // ДобавитьEMailКонтакту()

&НаКлиенте
Процедура ОбработкаВыбораКонтактаОтправителя()
	
	Если ЗначениеЗаполнено(Объект.ОтправительКонтакт) И НЕ ТипЗнч(Объект.ОтправительКонтакт) = Тип("Тип") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораКонтактаОтправителяЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru ='Связать с контактом все письма от данного email?'"),РежимДиалогаВопрос.ДаНет,60);
		Возврат;
	Иначе
		ОтправительВладелец = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Элементы.ОтправительВладелец.Видимость = Ложь;
		Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		ОтображатьКаналИсточник = Ложь;
	КонецЕсли;
	
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	// { VOG RMV 2019-03-19
	// Всё, что касается интереса не используется
	//CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	// } VOG RMV 2019-03-19
		
	СформироватьОписаниеКаналаИсточника();
	ДоступностьПервичногоИнтереса();
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКонтактаОтправителяЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПроставитьКонтактВходящимПисьмам();
		Если НЕ ДобавитьEMailКонтакту(Объект.ОтправительКонтакт, Объект.ОтправительАдрес) Тогда
			Сообщение = НСтр("ru ='Для автоматического связывания новых писем с данным контактом укажите текущий email в его карточке'");
		КонецЕсли;	
		ПоказатьОповещениеПользователя("", ПолучитьНавигационнуюСсылку(Объект.ОтправительКонтакт), Сообщение);
	КонецЕсли;
	
	Если ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ОтправительВладелец = ПолучитьВладельца(Объект.ОтправительКонтакт);
		ОтправительПредставление = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеАдресата(Объект.ОтправительПредставление, Объект.ОтправительАдрес, Объект.ОтправительКонтакт);
		Элементы.ОтправительВладелец.Видимость = Истина;
	Иначе
		ОтправительВладелец = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		Элементы.ОтправительВладелец.Видимость = Ложь;
	КонецЕсли;
	
	Если (ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") ИЛИ ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры")) Тогда
		Партнер = ?(ТипЗнч(Объект.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры"),Объект.ОтправительКонтакт,ПолучитьВладельца(Объект.ОтправительКонтакт));
		ОтображатьКаналИсточник = Истина;
	Иначе
		Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		ОтображатьКаналИсточник = Ложь;
	КонецЕсли;
	
	//ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	// { VOG RMV 2019-03-19
	// Всё, что касается интереса не используется
	//CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	// } VOG RMV 2019-03-19
//START Кайдашов 09/07/19		433
//	СформироватьОписаниеКаналаИсточника();
//	ДоступностьПервичногоИнтереса();
//END Кайдашов
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.Свойство("ТекущееДействие") Тогда
			ТекущееДействие = ВыбранноеЗначение.ТекущееДействие;
		Иначе
			ТекущееДействие = Неопределено;
		КонецЕсли;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы,ВыбранноеЗначение.ПараметрыФормы,?(ВыбранноеЗначение.РежимВыбора,Элемент,ЭтотОбъект),,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	,Объект.ОтправительАдрес);
	ПараметрыНового.Вставить("Наименование"	,Объект.ОтправительПредставление);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				,Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		,Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	,ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.CRM_ПотенциальныеКлиенты.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Потенциальные клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Контактные лица");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Пользователи.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Пользователи");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.ФизическиеЛица.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Физические лица");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправительКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
//START Кайдашов 09/07/19 433   убрал возможность создать новый элемент справочника

	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	,Объект.ОтправительАдрес);
	ПараметрыНового.Вставить("Наименование"	,Объект.ОтправительПредставление);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				,Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		,Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	,ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.CRM_ПотенциальныеКлиенты.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Потенциальные клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Контактные лица");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Пользователи.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Пользователи");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.ФизическиеЛица.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Физические лица");


	//СтандартнаяОбработка = Ложь;
	//
	//ИмяЭлемента						= "ОтправительКонтакт";
	//ИдентификаторСтрокиПолучателя	= "";
	//ТекДанные = Элементы.Получатели.ТекущиеДанные;
	//
	//ПараметрыНового = Новый Структура();
	//ПараметрыНового.Вставить("АдресПочты"	,Объект.ОтправительАдрес);
	//ПараметрыНового.Вставить("Наименование"	,Объект.ОтправительПредставление);
	//
	//ПараметрыФормы = Новый Структура();
	//ПараметрыФормы.Вставить("ПараметрыНового",ПараметрыНового);
	//
	//ДанныеВыбора = Новый СписокЗначений();
	//
	//СтруктураДанныхВыбора = Новый Структура;
	//СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	//СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Партнеры.ФормаОбъекта");
	//СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	//СтруктураДанныхВыбора.Вставить("ТекущееДействие",0);
	//ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Клиента'");
	//
	//СтруктураДанныхВыбора = Новый Структура;
	//СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	//СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.CRM_ПотенциальныеКлиенты.ФормаОбъекта");
	//СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	//СтруктураДанныхВыбора.Вставить("ТекущееДействие",0);
	//ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Потенциального клиента'");
	//
	//СтруктураДанныхВыбора = Новый Структура;
	//СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	//СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода");
	//СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	//СтруктураДанныхВыбора.Вставить("ТекущееДействие",1);
	//ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Контактное лицо'");
	//
	//СтруктураДанныхВыбора = Новый Структура;
	//СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	//СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Пользователи.ФормаОбъекта");
	//СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	//СтруктураДанныхВыбора.Вставить("ТекущееДействие",2);
	//ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Пользователя'");
	//
	//СтруктураДанныхВыбора = Новый Структура;
	//СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	//СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.ФизическиеЛица.ФормаОбъекта");
	//СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	//СтруктураДанныхВыбора.Вставить("ТекущееДействие",3);
	//ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Физическое лицо'");
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПолучателей(Команда)
	
	Элементы.СкрытьПоказатьПолучателей.Пометка = НЕ Элементы.СкрытьПоказатьПолучателей.Пометка;
	Элементы.ТабПолучатели.Видимость = Элементы.СкрытьПоказатьПолучателей.Пометка;
	Если Элементы.ТабПолучатели.Видимость = Истина Тогда
		Для каждого Элемент Из Получатели Цикл
			Если НЕ ЗначениеЗаполнено(Элемент.Контакт) Тогда
				Элемент.Контакт = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПолучателейКопии(Команда)
	
	Элементы.СкрытьПоказатьПолучателейКопии.Пометка = НЕ Элементы.СкрытьПоказатьПолучателейКопии.Пометка;
	Элементы.ТабПолучателиКопии.Видимость = Элементы.СкрытьПоказатьПолучателейКопии.Пометка;
	Если Элементы.ТабПолучатели.Видимость = Истина Тогда
		Для каждого Элемент Из ПолучателиКопии Цикл
			Если НЕ ЗначениеЗаполнено(Элемент.Контакт) Тогда
				Элемент.Контакт = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабПолучателиКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.Свойство("ТекущееДействие") Тогда
			ТекущееДействие = ВыбранноеЗначение.ТекущееДействие;
		Иначе
			ТекущееДействие = Неопределено;
		КонецЕсли;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы,ВыбранноеЗначение.ПараметрыФормы,?(ВыбранноеЗначение.РежимВыбора,Элемент,ЭтотОбъект),,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКопииКонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.Свойство("ТекущееДействие") Тогда
			ТекущееДействие = ВыбранноеЗначение.ТекущееДействие;
		Иначе
			ТекущееДействие = Неопределено;
		КонецЕсли;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы,ВыбранноеЗначение.ПараметрыФормы,?(ВыбранноеЗначение.РежимВыбора,Элемент,ЭтотОбъект),,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабПолучателиКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	,ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	,ТекДанные.Представление);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				,Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		,Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	,ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Контактные лица");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Пользователи.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Пользователи");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.ФизическиеЛица.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Физические лица");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабПолучателиКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ИмяЭлемента						= "Получатели";
	ИдентификаторСтрокиПолучателя	= Элементы.Получатели.ТекущаяСтрока;
	
	Элемент.СписокВыбора.Очистить();
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	,ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	,ТекДанные.Представление);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового",ПараметрыНового);
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Партнеры.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие",0);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Клиента'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие",1);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Контактное лицо'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Пользователи.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие",2);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Пользователя'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.ФизическиеЛица.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие",3);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Физическое лицо'");
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКопииКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПолучателиКопии.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	,ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	,ТекДанные.Представление);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				,Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		,Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	,ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Контактные лица");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Пользователи.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Пользователи");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.ФизическиеЛица.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Физические лица");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКопииКонтактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ИмяЭлемента						= "ПолучателиКопии";
	ИдентификаторСтрокиПолучателя	= Элементы.ПолучателиКопии.ТекущаяСтрока;
	
	Элемент.СписокВыбора.Очистить();
	
	ТекДанные = Элементы.ПолучателиКопии.ТекущиеДанные;
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("АдресПочты"	,ТекДанные.Адрес);
	ПараметрыНового.Вставить("Наименование"	,ТекДанные.Представление);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ПараметрыНового",ПараметрыНового);
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Партнеры.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие",0);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Клиента'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие",1);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Контактное лицо'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Пользователи.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие",2);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Пользователя'");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Ложь);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.ФизическиеЛица.ФормаОбъекта");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормы);
	СтруктураДанныхВыбора.Вставить("ТекущееДействие",3);
	Элемент.СписокВыбора.Добавить(СтруктураДанныхВыбора,"Создать 'Физическое лицо'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Функция РазрешитьПоказПанелиСоСписковФайлов()
	
	Если Вложения.Количество() = 0 Тогда 
		Возврат Ложь; 
	КонецЕсли;
	
	Если Вложения.Количество() > 0 Тогда
		Если ВсеВложенияПометка Тогда 
			Возврат Истина; 
		КонецЕсли;	
		НайтиСтроки = Вложения.НайтиСтроки(Новый Структура("ИДФайлаЭлектронногоПисьмаОтбор", "#"));
		Если НайтиСтроки.Количество() > 0 Тогда
			Возврат Истина; 
		Иначе
			Возврат Ложь;
		КонецЕсли;			
	КонецЕсли;		
	
КонецФункции	

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений(ИзмененОтбор = Ложь)
	
	Если ВсегдаПоказыватьВложения И РазрешитьПоказПанелиСоСписковФайлов() Тогда
		Элементы.ВложенияПредставление.Видимость = Ложь;
		Если НЕ Элементы.Вложения.Видимость Тогда
			Элементы.Вложения.Видимость = Истина;
		КонецЕсли;			
		Возврат;
	ИначеЕсли ВсегдаПоказыватьВложения Тогда
		Элементы.КонтекстноеМенюВложенияСкрытьПанель.Видимость = Истина;
	КонецЕсли;		
	
	Если ИзмененОтбор Тогда
		ВложенияПредставление = "";
		Для Каждого ЭлементТаблицы Из Вложения Цикл
			Если НЕ ВсеВложенияПометка И ЭлементТаблицы.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			ИначеЕсли ВсеВложенияПометка Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			КонецЕсли;
		КонецЦикла;
		Если ПустаяСтрока(ВложенияПредставление) Тогда
			Элементы.ГруппаВложения.Видимость = Ложь;
			Элементы.ВложенияПредставление.Видимость = Ложь;
		Иначе
			Элементы.ГруппаВложения.Видимость = Истина;
			Если Элементы.Вложения.Видимость Тогда
				ВложенияПредставление	= НСтр("ru='свернуть вложения'");
				Элементы.ВложенияПредставление.Видимость = Ложь;
			Иначе
				ВложенияПредставление = Сред(ВложенияПредставление, 3);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.Вложения.Видимость Тогда
		ВложенияПредставление	= НСтр("ru='свернуть вложения'");
		Элементы.ВложенияПредставление.Видимость = Ложь;
	Иначе	
		ВложенияПредставление = "";
		Для Каждого ЭлементТаблицы Из Вложения Цикл
			Если НЕ ВсеВложенияПометка И ЭлементТаблицы.ИДФайлаЭлектронногоПисьмаОтбор = "#" Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			ИначеЕсли ВсеВложенияПометка Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			КонецЕсли;
		КонецЦикла;
		Если ПустаяСтрока(ВложенияПредставление) Тогда
			ВложенияПредставление = "";
			Элементы.ВложенияПредставление.Видимость = Ложь;
		Иначе
			ВложенияПредставление = Сред(ВложенияПредставление, 3);
			Элементы.ВложенияПредставление.Видимость = Истина;			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // СформироватьПредставлениеВложений()	

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" надписи "Вложения".
//
Процедура ВложенияПриИзменении(Элемент)
	СформироватьПредставлениеВложений();
КонецПроцедуры // ВложенияПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" надписи "Вложения".
//
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.Вложения.Видимость = НЕ Элементы.Вложения.Видимость;
	СформироватьПредставлениеВложений();
КонецПроцедуры // ВложенияПредставлениеНажатие()

// +ПанельБП

&НаСервереБезКонтекста
Функция ПроверитьДубликатБизнесПроцесса(Предмет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	CRM_БизнесПроцесс.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|ГДЕ
	|	НЕ CRM_БизнесПроцесс.ПометкаУдаления
	|	И НЕ CRM_БизнесПроцесс.Завершен
	|	И CRM_БизнесПроцесс.Предмет = &Предмет");
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцесс(Команда)
	
	Если ПроверитьДубликатБизнесПроцесса(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Уже создан бизнес-процесс.
			|Создать новый?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаНачатьБизнесПроцессЗавершение", ЭтотОбъект, Команда.Имя);	
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Неопределено, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаНачатьБизнесПроцессЗавершение(Ответ, КомандаИмя) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	СтруктураОснования = ПолучитьСтруктуруОснованияБизнесПроцесса(КомандаИмя);
	ПараметрыФормы = Новый Структура("Основание",СтруктураОснования);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьКомандуСозданияБизнесПроцесса()
	
	Если ИспользоватьБизнесПроцессы И ЗначениеЗаполнено(Объект.CRM_Проект) И ЗначениеЗаполнено(Объект.CRM_Проект.CRM_КартаМаршрута) Тогда
		CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект, Элементы.ГруппаКнопокСоздать, Объект.CRM_Проект.CRM_КартаМаршрута, Ложь);
	Иначе
		CRM_БизнесПроцессыСервер.ДобавитьУдалитьКомандуСозданияБизнесПроцессаНаКоманднуюПанель(ЭтотОбъект,,, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПроектПриИзменении(Элемент)
	ДобавитьУдалитьКомандуСозданияБизнесПроцесса();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуГиперссылок()
	
	ТекстКоманда = Команды.Найти("_ВыполнитьЗадачу");
	Если ТекстКоманда = Неопределено Тогда
		НоваяКомандаФормы 			= Команды.Добавить("_ВыполнитьЗадачу");
		НоваяКомандаФормы.Заголовок	= "Выполнить";
		НоваяКомандаФормы.Подсказка	= "Отметить задачу как выполненную";
		НоваяКомандаФормы.Действие	= "Подключаемый_ВыполнитьЗадачу";
	КонецЕсли;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	
	Попытка
		ЭтотОбъект["_ЛичнаяЗадача"] 	   = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
		ЭтотОбъект["_ЛичнаяЗадачаСтрокой"] = "";
	Исключение
		ОписаниеТиповЗадача = Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя");
		НовыйРеквизит 		= Новый РеквизитФормы("_ЛичнаяЗадача", ОписаниеТиповЗадача);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповЗадача = Новый ОписаниеТипов("Строка");
		НовыйРеквизит 		= Новый РеквизитФормы("_ЛичнаяЗадачаСтрокой", ОписаниеТиповЗадача);
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	КонецПопытки;
	
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
	|	0 КАК ВидСсылки
	|ПОМЕСТИТЬ ЛичныеЗадачи
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	(НЕ ЗадачаИсполнителя.ПометкаУдаления)
	|	И ЗадачаИсполнителя.CRM_Личная
	|	И (НЕ ЗадачаИсполнителя.Выполнена)
	|	И ЗадачаИсполнителя.Предмет = &Предмет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ЛичныеЗадачи.Ссылка,
	|	ЛичныеЗадачи.ВидСсылки
	|ИЗ
	|	ЛичныеЗадачи КАК ЛичныеЗадачи";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предмет",Объект.Ссылка);
	
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаб Из ТаблицаОбъектов Цикл
		Если СтрокаТаб.ВидСсылки = 0 Тогда
			ЭтотОбъект._ЛичнаяЗадача = СтрокаТаб.Ссылка;
			ЭтотОбъект._ЛичнаяЗадачаСтрокой	= Строка(СтрокаТаб.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// Отрисуем гиперссылки
	// Гиперссылка на Задачу
	Если НЕ Элементы.Найти("_ЛичнаяЗадачаСтрокой") = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект._ЛичнаяЗадача) Тогда
			Элементы.Удалить(Элементы["_ЛичнаяЗадачаЗаголовок"]);
			Элементы.Удалить(Элементы["_ЛичнаяЗадачаСтрокой"]);
			Элементы.Удалить(Элементы["Кнопка_ВыполнитьЗадачу"]);
		КонецЕсли;
	Иначе
		
		Если ЗначениеЗаполнено(ЭтотОбъект._ЛичнаяЗадача) Тогда
			
			НовыйЭлемент = Элементы.Добавить("_ЛичнаяЗадачаЗаголовок", Тип("ДекорацияФормы"), Элементы.ГиперссылкаЗаголовок);
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Заголовок	= "Задача: ";
			
			НовыйЭлемент = Элементы.Добавить("_ЛичнаяЗадачаСтрокой", Тип("ДекорацияФормы"), Элементы.ЗначениеГиперСсылкиЗадача);
			НовыйЭлемент.Заголовок	= СокрЛП(ЭтотОбъект._ЛичнаяЗадача);
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Гиперссылка= Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ГиперссылкаНажатие");
			
			НовыйЭлемент = Элементы.Добавить("Кнопка_ВыполнитьЗадачу",Тип("КнопкаФормы"), Элементы.ЗначениеГиперСсылкиЗадача);
			НовыйЭлемент.ИмяКоманды			= "_ВыполнитьЗадачу";
			НовыйЭлемент.Заголовок			= "Выполнить";
			НовыйЭлемент.Картинка			= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйЭлемент.Отображение		= ОтображениеКнопки.КартинкаИТекст;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// -ПанельБП

&НаКлиенте
Процедура ТекстПисьмаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	CRM_ОбщегоНазначенияКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Объект.Ссылка, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеВложения(Команда)
	
	Элементы.ФормаВсеВложения.Пометка	= НЕ Элементы.ФормаВсеВложения.Пометка;
	ВсеВложенияПометка				= Элементы.ФормаВсеВложения.Пометка;
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьмаОтбор","#");
	КонецЕсли;
	
	СформироватьПредставлениеВложений(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсегдаПоказыватьВложения(Команда)
	
	Элементы.ФормаВсегдаПоказыватьВложения.Пометка = НЕ Элементы.ФормаВсегдаПоказыватьВложения.Пометка;
	ВсегдаПоказыватьВложения = Элементы.ФормаВсегдаПоказыватьВложения.Пометка;
	Элементы.КонтекстноеМенюВложенияСкрытьПанель.Видимость = НЕ ВсегдаПоказыватьВложения;
	
	СформироватьПредставлениеВложений();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИЗакрыть(Команда)
	
	Объект.Удалить_Рассмотрено = Истина;
	Объект.CRM_СкрытьВАРМ = Истина;
	УстановитьПоложениеТумблераСтатусПисьма();		
	
	Папка = CRM_УправлениеЭлектроннойПочтой.ПолучитьПапкуЭлектронногоПисьма(Объект.УчетнаяЗапись, ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Обработанные"));
	
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
	
		Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	
	КонецЕсли;
	
	Если Записать() Тогда
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(Объект.Ссылка, Папка, Ложь);
		Оповестить("CRM_УстановленФлагОбработано");
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
	
КонецПроцедуры

// +CRM
&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, , ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	СтруктураОтбора.Вставить("Партнер", ЭтотОбъект.Клиент);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);	
	
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтересОбработкаВыбора(ВыбранноеЗначение, Результат) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		СтандартнаяОбработка		= Ложь;
		
		//CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение, Истина);
		ЗаменитьОсновное = (ТекущийЭлемент.Имя = "CRM_ИнтересСтрокой");
		CRM_ЗаменитьИнтересНаСервере(ВыбранноеЗначение, ЗаменитьОсновное, Истина);
		
		ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда Возврат; КонецЕсли;
	//CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение, Истина);
	ЗаменитьОсновное = (ТекущийЭлемент.Имя = "CRM_ИнтересСтрокой");
	CRM_ЗаменитьИнтересНаСервере(ВыбранноеЗначение, ЗаменитьОсновное, Истина);
	
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов[0].ВведенНаОсновании Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Удалить(0);
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка)
	
	// { VOG RMV 2019-03-19
	// Всё, что касается интереса не используется	
	//CRM_ОбщегоНазначенияКлиент.Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка, ЭтотОбъект.CRM_ТаблицаИнтересов);
	// } VOG RMV 2019-03-19
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(,Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало = Ложь)
	
	МассивСтрок = ЭтотОбъект.CRM_ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",ВыбранноеЗначение));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Если ВНачало Тогда
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
		Иначе
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	ИначеЕсли ВНачало Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Сдвинуть(ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]),-ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкрытьПоказатьИнтересы(Команда)
	
	Элементы.СкрытьПоказатьИнтересы.Пометка = НЕ Элементы.СкрытьПоказатьИнтересы.Пометка;
	Элементы.ГруппаCRM_ТаблицаИнтересов.Видимость = Элементы.СкрытьПоказатьИнтересы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		Отказ = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.ВведенНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПослеУдаления(Элемент)
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Основной(Команда)
	
	ТекущиеДанные = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ДобавитьИнтересНаСервере(ТекущиеДанные.Ссылка, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ЗаменитьИнтересНаСервере(ВыбранноеЗначение,ЗаменитьОсновное = Истина, ВНачало = Ложь)
	Если ВыбранноеЗначение <> Неопределено Тогда		
		Если ЗаменитьОсновное И ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
			СтрокаДляУдаления = ЭтотОбъект.CRM_ТаблицаИнтересов[0];
			ЭтотОбъект.CRM_ТаблицаИнтересов.Удалить(СтрокаДляУдаления);
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
		Иначе
			CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращение(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПисьмоВходящее", Объект.Ссылка);
	МассивСсылок = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ОтправительКонтакт) Тогда
		МассивСсылок.Добавить(Объект.ОтправительКонтакт);
	КонецЕсли;
	Для Каждого СтрокаДанных Из ЭтотОбъект.CRM_ТаблицаИнтересов Цикл
		МассивСсылок.Добавить(СтрокаДанных.Ссылка);
	КонецЦикла;
	ПараметрыФормы.Вставить("МассивСсылок", МассивСсылок);
	ПараметрыФормы.Вставить("АдресЭП", Объект.ОтправительАдрес);
	ПараметрыФормы.Вставить("ТемаПисьма", Объект.Тема);
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект, Объект.ОтправительАдрес);
КонецПроцедуры

&НаКлиенте
Процедура СтатусДокументаПриИзменении(Элемент)
		
	Если СтатусПисьма = "Обработано" Тогда
		Объект.Удалить_Рассмотрено = Истина
	Иначе		
		Объект.Удалить_Рассмотрено = Ложь;
	КонецЕсли;	
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТегов

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Тег".
//
Процедура ТегПриИзменении(Элемент)
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Создание" элемента формы "Тег".
//
Процедура ТегСоздание(Элемент, СтандартнаяОбработка)
	CRM_ТегиКлиент.ТегСоздание(Элемент, СтандартнаяОбработка, ТекущееПодразделение);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаНавигационнойСсылки" элемента формы "Тег".
&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура Подключаемый_ОбновитьОблакоТегов()
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуОПрочтении()
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Объект.Ссылка);
	CRM_УправлениеЭлектроннойПочтой.УстановитьСнятьПометкуОПрочтении(МассивСсылок, Истина);
КонецПроцедуры
// -CRM