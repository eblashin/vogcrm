&НаКлиенте
Перем ЗакрыватьПослеЗаписи;

&НаКлиенте
Перем НеПроверятьОповещения;
///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
// Функция возвращает текущего пользователя.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Текущий пользователь.
//
Функция ТекущийПользователь()
	Возврат Пользователи.ТекущийПользователь();
КонецФункции // ТекущийПользователь()

&НаСервере
Процедура ЗаполнитьДанныеФормыСервер()
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ДатаНачала);
	ДатаНачало	= ДатаВремя.Дата;
	ВремяНачало	= ДатаВремя.Время;
	
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.СрокИсполнения);
	ДатаОкончание	= ДатаВремя.Дата;
	ВремяОкончание	= ДатаВремя.Время;
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьКатегорииНаФорме()
	ПрефиксРеквизита = "ПолеВводаКатегория";
	МассивУдаляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	Пока Истина Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		Попытка
			ТестовыйРеквизит = ЭтотОбъект[ИмяРеквизита];
			МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизита);
			нИндекс = нИндекс + 1;
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	МассивКатегорий = Новый Массив();
	Если ЗначениеЗаполнено(Объект.CRM_ОсновнаяКатегория) Тогда
		МассивКатегорий.Добавить(Объект.CRM_ОсновнаяКатегория);
	КонецЕсли;
	Для Каждого СтрокаКатегория Из Объект.CRM_Категории Цикл
		Если ЗначениеЗаполнено(СтрокаКатегория.Категория) И МассивКатегорий.Найти(СтрокаКатегория.Категория) = Неопределено Тогда
			МассивКатегорий.Добавить(СтрокаКатегория.Категория);
		КонецЕсли;
	КонецЦикла;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.CRM_КатегорииПользователей");
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		РеквизитКатегория = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТиповКатегория);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитКатегория);
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхРеквизитов Цикл
		Попытка Элементы.Удалить(Элементы[УдаляемыйЭлемент]);
		Исключение КонецПопытки;
	КонецЦикла;
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	нИндекс = 1;
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		ЭтотОбъект[ИмяРеквизита] = ДобавляемаяКатегория;
		
		ЭлементКатегория = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаКатегории);
		ЭлементКатегория.Вид					= ВидПоляФормы.ПолеВвода;
		ЭлементКатегория.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементКатегория.ПутьКДанным			= ИмяРеквизита;
		ЭлементКатегория.РедактированиеТекста	= Ложь;
		ЭлементКатегория.КнопкаСпискаВыбора		= Ложь;
		ЭлементКатегория.КнопкаВыбора			= Ложь;
		ЭлементКатегория.КнопкаОчистки			= Ложь;
		ЭлементКатегория.КнопкаРегулирования	= Ложь;
		ЭлементКатегория.КнопкаОткрытия			= Ложь;
		ЭлементКатегория.КнопкаВыпадающегоСписка= Ложь;
		
		ЦветКатегории = Новый Цвет(ДобавляемаяКатегория.ЦветКрасный, ДобавляемаяКатегория.ЦветЗеленый, ДобавляемаяКатегория.ЦветСиний);
		ЭлементКатегория.ЦветФона = ЦветКатегории;
		ЭлементКатегория.ЦветТекста = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветКатегории);
		
		Если нИндекс = 1 Тогда
			ЭлементКатегория.Шрифт = Новый Шрифт(ЭлементКатегория.Шрифт,,, Истина);
		КонецЕсли;
		
		ЭлементКатегория.УстановитьДействие("НачалоВыбора",	"Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора");
		ЭлементКатегория.УстановитьДействие("Очистка",		"Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка");
		ЭлементКатегория.УстановитьДействие("Открытие",		"Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие");
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаКорректность()
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата начала должна быть заполнена!'"),, "ДатаНачало");
		Возврат Ложь;
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Срок должен быть заполнен!'"),, "ДатаОкончание");
	//	Возврат Ложь;
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) И (Объект.СрокИсполнения < Объект.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Срок должен быть больше даты начала!'"),, "ДатаОкончание");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура СкорректироватьДатыЗадачи()
	
	Объект.ДатаНачала		= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	Объект.СрокИсполнения	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементов()
	Если Объект.Выполнена Тогда
		Элементы.Выполнить.Заголовок = НСтр("ru = 'Отменить выполнение'");
	Иначе
		Элементы.Выполнить.Заголовок = НСтр("ru = 'Готово'");
	КонецЕсли;
	
	Если Элементы.CRM_Проект.Видимость Тогда
		Если ЗначениеЗаполнено(Объект.CRM_Проект) И Объект.CRM_Проект.CRM_ЭтоПроект Тогда
			Элементы.CRM_Этап.Видимость = Истина;
		Иначе
			Элементы.CRM_Этап.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ГруппаПериодДаты.ТолькоПросмотр = ПризнакЕстьПодчиненныеЗадачи;
	Элементы.ГруппаПериодВремя.ТолькоПросмотр = ПризнакЕстьПодчиненныеЗадачи;
	Элементы.CRM_ПроцентВыполненияЗадачи.ТолькоПросмотр = ПризнакЕстьПодчиненныеЗадачи;
	Элементы.ФормаВыполнить.Доступность = Не ПризнакЕстьПодчиненныеЗадачи;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьМаркетинговоеМероприятие()
	
	МероприятиеОбъект = Объект.Предмет.ПолучитьОбъект();
	МероприятиеОбъект.Завершено = Истина;	
	
	Попытка
		МероприятиеОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось изменить маркетинговое мероприятие, вероятно оно заблокировано'"));	
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСобытияЗадачи()
	Возврат CRM_БизнесПроцессыИЗадачиВызовСервера.ПолучитьСобытияЗадачи(Объект.Ссылка);
КонецФункции

&НаСервере
Функция ЗавершитьЗадачуССобытиями(СобытияЗадачи, ВариантЗавершенияСобытий, ДатаПереноса)
	СтруктураЗаписи = Новый Структура("ВыполнитьЗадачу", Истина);
	Записать(СтруктураЗаписи);
	
	РезультатВыполнения = Объект.Выполнена;
	
	Если РезультатВыполнения И СобытияЗадачи.Количество() > 0 И ВариантЗавершенияСобытий <> Неопределено Тогда
		РезультатВыполнения = CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренестиСобытияЗадачи(СобытияЗадачи, Объект.ДатаНачала, ВариантЗавершенияСобытий, ДатаПереноса);
	КонецЕсли;
	
	УстановитьСвойстваЭлементов();
	
	Возврат РезультатВыполнения;
КонецФункции

&НаСервере
Функция ПеренестиЗадачу(ВариантПереноса, Знач ДатаПереноса = Неопределено, БылиПеренесеныСобытия = Ложь)
	РезультатВыполнения = CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренестиЗадачу(ЭтотОбъект, ВариантПереноса, ДатаПереноса, Истина, Истина, БылиПеренесеныСобытия, Ложь);
	
	ЗаполнитьДанныеФормыСервер();
	
	Возврат РезультатВыполнения;
КонецФункции

&НаКлиенте
Процедура ПеренестиЗадачуНаКлиенте(ВариантПереноса, Знач ДатаПереноса = Неопределено)
	БылиПеренесеныСобытия = Ложь;
	Если ПеренестиЗадачу(ВариантПереноса, ДатаПереноса, БылиПеренесеныСобытия) Тогда
		Записать();
		
		ОповеститьОбИзменении(Объект.Ссылка);
		
		Если БылиПеренесеныСобытия Тогда
			// Нужно чтобы обновился календарь.
			Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Неопределено, Параметры.ОбновлятьКалендарь), ЭтотОбъект);
		КонецЕсли;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр(	"ru = 'Данные еще не записаны.
								|Добавление события возможно только после записи данных.
								|Данные будут записаны.'"), РежимДиалогаВопрос.ОКОтмена);
		//
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтактныеЛицаПартнера(Партнер)
	
	// + Тищенко В.В.
	// Временная заглушка
	КонтактныеЛица = Новый СписокЗначений;
	КонтактныеЛица.Добавить(Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
	
	Возврат КонтактныеЛица;
		
	 // Оригинал
	 //КонтактныеЛица = Новый СписокЗначений;
	
////	 Запрос = Новый Запрос;
	 //Запрос.Текст = "ВЫБРАТЬ
	 //               |	КонтактныеЛицаПартнеров.Ссылка
	 //               |ИЗ
	 //               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	 //               |ГДЕ
	 //               |	КонтактныеЛицаПартнеров.Владелец = &Владелец
	 //               |	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления";
	 //
	 //Запрос.УстановитьПараметр("Владелец",Партнер);
	 //
	 //Результат = Запрос.Выполнить();
	 //Выборка = Результат.Выбрать();
	 //
	 //Пока Выборка.Следующий() Цикл
	 //
	 //	 КонтактныеЛица.Добавить(Выборка.Ссылка);
	 //   	 
	 //КонецЦикла;
	 //
	 //Возврат КонтактныеЛица;
	 
	 // - Тищенко В.В.
	
 КонецФункции
 
&НаСервереБезКонтекста
Функция ВернутьКонтактноеЛицо(Партнер)
	
	КонтактноеЛицо = Партнер.CRM_ОсновноеКонтактноеЛицо;
	
	Если КонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка") Тогда
		Возврат Неопределено;
	Иначе
		Возврат КонтактноеЛицо;
	КонецЕсли;		
	
КонецФункции

&НаКлиенте
// Функция возвращает список участников.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений	- Список участников.
//
Функция ПолучитьСписокУчастников()
	СписокУчастников = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.CRM_Партнер) Тогда
		СписокУчастников.Добавить(Объект.CRM_Партнер);
		КонтактноеЛицо = ВернутьКонтактноеЛицо(Объект.CRM_Партнер);
	Иначе
		КонтактноеЛицо = Неопределено;
	КонецЕсли;		
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		СписокУчастников.Добавить(КонтактноеЛицо);
	Иначе
		Если ЗначениеЗаполнено(Объект.CRM_Партнер) Тогда
			Для Каждого КонтактноеЛицо Из ПолучитьКонтактныеЛицаПартнера(Объект.CRM_Партнер) Цикл
				СписокУчастников.Добавить(КонтактноеЛицо.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат СписокУчастников;
КонецФункции // ПолучитьСписокУчастников()

// Оповещения
&НаСервере
Процедура ЗаполнитьТаблицуОповещений()
	
	Запрос = Новый Запрос;
	//Если НЕ Объект.Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("Пользователь",	ТекущийПользователь());
		Запрос.УстановитьПараметр("Предмет",		Объект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 5
		|	ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание) КАК Канал,
		|	CRM_Напоминания.СрокОповещения,
		|	CRM_Напоминания.Периодичность,
		|	0 КАК ПолеСортировки
		|ИЗ
		|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
		|ГДЕ
		|	CRM_Напоминания.Пользователь = &Пользователь
		|	И CRM_Напоминания.Предмет = &Предмет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_Оповещения.Канал,
		|	CRM_Оповещения.СрокОповещения,
		|	CRM_Оповещения.Периодичность,
		|	1
		|ИЗ
		|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
		|ГДЕ
		|	CRM_Оповещения.Получатель = &Пользователь
		|	И CRM_Оповещения.Предмет = &Предмет
		|	И CRM_Оповещения.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеСортировки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если (Выборка.Канал = Перечисления.CRM_КаналыОповещений.Напоминание И НЕ ИспользоватьНапоминания)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.СМС И НЕ ИспользоватьОповещенияСМС)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта И НЕ ИспользоватьОповещенияЭлектроннаяПочта) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТаб = _ТаблицаОповещений.Добавить();
		НоваяСтрокаТаб.Канал			= Выборка.Канал;
		НоваяСтрокаТаб.СрокОповещения	= Выборка.СрокОповещения;
		НоваяСтрокаТаб.Периодичность	= Выборка.Периодичность;
		
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Новый Структура("Организация,Дата",Неопределено,Объект.ДатаНачала));
		СтруктураОповещения.Вставить("ВидОповещения",	Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		СтруктураОповещения.Вставить("СрокОповещения",	НоваяСтрокаТаб.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	НоваяСтрокаТаб.Периодичность);
		СтруктураОповещения.Вставить("Получатель",		ТекущийПользователь());
		СтруктураОповещения.Вставить("ВпередПоКалендарю", Истина);
		НоваяСтрокаТаб.ДатаОповещения = CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуОповещений()
	
	ИспользоватьНапоминания					= Константы.CRM_ИспользоватьНапоминания.Получить();
	ИспользоватьОповещенияСМС				= Константы.CRM_ИспользоватьОповещенияСМС.Получить();
	ИспользоватьОповещенияЭлектроннаяПочта	= Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить();
	
	ЗаполнитьТаблицуОповещений();
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	// Всего предполагается 5 полей оповещений, по аналогии с гуглом.
	Ид = 0;
	Пока НЕ Ид =5 Цикл
		Ид = Ид + 1;
		
		ОписаниеТиповКанал = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_КаналыОповещений");
		НовыйРеквизит = Новый РеквизитФормы("_КаналОповещения"+Строка(Ид), ОписаниеТиповКанал);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповСрок = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
		НовыйРеквизит = Новый РеквизитФормы("_СрокОповещения"+Строка(Ид), ОписаниеТиповСрок);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповПериод = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_ПериодичностьОповещений");
		НовыйРеквизит = Новый РеквизитФормы("_ПериодОповещения"+Строка(Ид), ОписаниеТиповПериод);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповСрок = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		НовыйРеквизит = Новый РеквизитФормы("_ДатаОповещения"+Строка(Ид), ОписаниеТиповСрок);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		НоваяКомандаФормы = Команды.Добавить("УдалитьОповещение_"+Строка(Ид));
		НоваяКомандаФормы.Заголовок					= "Удалить";
		НоваяКомандаФормы.Подсказка					= "Удалить оповещение";
		НоваяКомандаФормы.Действие					= "Подключаемый_УдалитьОповещение";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
		
	КонецЦикла;
	
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		
		СтрокаТаб.ИмяПоля = "ПолеКанала_"+Строка(Ид);
		
		Элемент = Элементы.Добавить("ПолеКанала_"+Строка(Ид),Тип("ПолеФормы"),Элементы.КаналыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок					= Строка(Ид)+ ". ";
		//Элемент.Заголовок					= "Оповещение №"+Строка(Ид);
		//Элемент.ПоложениеЗаголовка			=ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					="_КаналОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = СтрокаТаб.Канал;
		
		Элемент = Элементы.Добавить("ПолеСрокаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.СрокиОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_СрокОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.КнопкаРегулирования			= Истина;
		//Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_СрокОповещения"+Строка(Ид)] = СтрокаТаб.СрокОповещения;
		
		Элемент = Элементы.Добавить("ПолеПериодаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ПериодыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ПериодОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.Ширина						= 5;
		//Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_ПериодОповещения"+Строка(Ид)] = СтрокаТаб.Периодичность;
		
		Элемент = Элементы.Добавить("ПолеДатыОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ДатыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ДатаОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.ТолькоПросмотр				= Истина;
		Элемент.Подсказка					= НСтр("ru = 'Планируемая дата оповещения'");
		
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = СтрокаТаб.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > ТекущаяДатаСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
		
		НовыйЭлемент = Элементы.Добавить("Кнопка_УдалитьОповещение_"+Строка(Ид),Тип("КнопкаФормы"), Элементы.УдалениеОповещений);
		НовыйЭлемент.ИмяКоманды			= "УдалитьОповещение_"+Строка(Ид);
		НовыйЭлемент.Заголовок			= "Удалить";
		НовыйЭлемент.Картинка			= БиблиотекаКартинок.Удалить;
		НовыйЭлемент.Отображение		= ОтображениеКнопки.Картинка;
		
	КонецЦикла;
	
	Если Ид < 5 Тогда
		НовыйЭлемент = Элементы.Добавить("_ДобавитьОповещение", Тип("ДекорацияФормы"), Элементы.КаналыОповещений);
		НовыйЭлемент.Заголовок	= "Добавить оповещение";
		НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Гиперссылка= Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ДобавитьОповещение");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОповещение()
	
	Ид = 0;
	Пока Ид < 5 Цикл
		Ид = Ид + 1;
		
		Если НЕ Элементы.Найти("ПолеКанала_"+Строка(Ид)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = _ТаблицаОповещений.Добавить();
		НоваяСтрока.Канал			= Перечисления.CRM_КаналыОповещений.Напоминание;
		НоваяСтрока.СрокОповещения	= 10;
		НоваяСтрока.Периодичность	= Перечисления.CRM_ПериодичностьОповещений.Минута;
		НоваяСтрока.ИмяПоля			= "ПолеКанала_"+Строка(Ид);
		НоваяСтрока.ДатаОповещения	= "ПолеКанала_"+Строка(Ид);
		Если ЗначениеЗаполнено(ДатаОкончание) Тогда
			ДатаОповещения = ДатаОкончание;
			ВремяОповещения = ВремяОкончание;
			СрокОповещения = - НоваяСтрока.СрокОповещения;
		Иначе
			ДатаОповещения = ДатаНачало;
			ВремяОповещения = ВремяНачало;
			СрокОповещения = НоваяСтрока.СрокОповещения;
		КонецЕсли;	
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Новый Структура("Организация,Дата",Неопределено,CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОповещения, ВремяОповещения)));
		СтруктураОповещения.Вставить("ВидОповещения",	ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	НоваяСтрока.Периодичность);
		СтруктураОповещения.Вставить("Получатель",		ТекущийПользователь());
		СтруктураОповещения.Вставить("ВпередПоКалендарю", Истина);
		НоваяСтрока.ДатаОповещения	= CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		
		Элемент = Элементы.Вставить("ПолеКанала_"+Строка(Ид),Тип("ПолеФормы"),Элементы.КаналыОповещений, Элементы._ДобавитьОповещение);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок					= Строка(Ид)+ ". ";
		//Элемент.Заголовок					= "Оповещение №"+Строка(Ид);
		//Элемент.ПоложениеЗаголовка			=ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					="_КаналОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		Если ИспользоватьНапоминания Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.Напоминание;
		ИначеЕсли ИспользоватьОповещенияЭлектроннаяПочта Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта;
		ИначеЕсли ИспользоватьОповещенияЭлектроннаяПочта Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.СМС;
		КонецЕсли;
		
		Элемент = Элементы.Добавить("ПолеСрокаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.СрокиОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_СрокОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.КнопкаРегулирования			= Истина;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_СрокОповещения"+Строка(Ид)] = 10;
		
		Элемент = Элементы.Добавить("ПолеПериодаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ПериодыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ПериодОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.Ширина						= 5;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_ПериодОповещения"+Строка(Ид)] = Перечисления.CRM_ПериодичностьОповещений.Минута;
		
		НовыйЭлемент = Элементы.Добавить("Кнопка_УдалитьОповещение_"+Строка(Ид),Тип("КнопкаФормы"), Элементы.УдалениеОповещений);
		НовыйЭлемент.ИмяКоманды			= "УдалитьОповещение_"+Строка(Ид);
		НовыйЭлемент.Заголовок			= "Удалить";
		НовыйЭлемент.Картинка			= БиблиотекаКартинок.Удалить;
		НовыйЭлемент.Отображение		= ОтображениеКнопки.Картинка;
		
		Элемент = Элементы.Добавить("ПолеДатыОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ДатыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ДатаОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.ТолькоПросмотр				= Истина;
		Элемент.Подсказка					= НСтр("ru = 'Планируемая дата оповещения'");
		
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = НоваяСтрока.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > ТекущаяДатаСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
		Прервать;
	КонецЦикла;
	
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		ЭлементФормы = Элементы.Найти(СтрокаТаб.ИмяПоля);
		ЭлементФормы.Заголовок = Строка(Ид)+ ". ";
		//ЭлементФормы.Заголовок = "Оповещение №"+Строка(Ид);
	КонецЦикла;
	
	Если _ТаблицаОповещений.Количество() = 5 Тогда
		Если НЕ Элементы.Найти("_ДобавитьОповещение") = Неопределено Тогда
			Элементы.Удалить(Элементы["_ДобавитьОповещение"]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОповещение(ИмяКоманды)
	
	ИдПолей = СтрЗаменить(ИмяКоманды, "УдалитьОповещение_","");
	
	Если НЕ Элементы.Найти("ПолеКанала_"+ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеКанала_"+ИдПолей]);
	КонецЕсли;
	
	Если НЕ Элементы.Найти("ПолеСрокаОповещения_"+ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеСрокаОповещения_"+ИдПолей]);
	КонецЕсли;
	
	Если НЕ Элементы.Найти("ПолеПериодаОповещения_"+ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеПериодаОповещения_"+ИдПолей]);
	КонецЕсли;
	
	Если НЕ Элементы.Найти("Кнопка_УдалитьОповещение_"+ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["Кнопка_УдалитьОповещение_"+ИдПолей]);
	КонецЕсли;
	
	Если НЕ Элементы.Найти("ПолеДатыОповещения_"+ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеДатыОповещения_"+ИдПолей]);
	КонецЕсли;
	
	МассивСтрок = _ТаблицаОповещений.НайтиСтроки(Новый Структура("ИмяПоля","ПолеКанала_"+ИдПолей));
	
	Если МассивСтрок.Количество() > 0 Тогда
		_ТаблицаОповещений.Удалить(_ТаблицаОповещений.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		ЭлементФормы = Элементы.Найти(СтрокаТаб.ИмяПоля);
		ЭлементФормы.Заголовок = Строка(Ид)+ ". ";
		//ЭлементФормы.Заголовок = "Оповещение №"+Строка(Ид);
	КонецЦикла;
	
	Если Ид < 5 Тогда
		Если Элементы.Найти("_ДобавитьОповещение") = Неопределено Тогда
			НовыйЭлемент = Элементы.Добавить("_ДобавитьОповещение", Тип("ДекорацияФормы"), Элементы.КаналыОповещений);
			НовыйЭлемент.Заголовок	= "Добавить оповещение";
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Гиперссылка= Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ДобавитьОповещение");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОповещения(Ид)
	
	МассивСтрок = _ТаблицаОповещений.НайтиСтроки(Новый Структура("ИмяПоля","ПолеКанала_"+Ид));
	Если МассивСтрок.Количество() > 0 Тогда
		МассивСтрок[0].Канал			= ЭтотОбъект["_КаналОповещения"+Ид];
		МассивСтрок[0].СрокОповещения	= ЭтотОбъект["_СрокОповещения"+Ид];
		МассивСтрок[0].Периодичность	= ЭтотОбъект["_ПериодОповещения"+Ид];
		МассивСтрок[0].ДатаОповещения	= ЭтотОбъект["_ДатаОповещения"+Строка(Ид)];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДатыОповещений()
	
		Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		Если ЗначениеЗаполнено(ДатаОкончание) Тогда
			ДатаОповещения = ДатаОкончание;
			ВремяОповещения = ВремяОкончание;
			СрокОповещения = - СтрокаТаб.СрокОповещения;
		Иначе
			ДатаОповещения = ДатаНачало;
			ВремяОповещения = ВремяНачало;
			СрокОповещения = СтрокаТаб.СрокОповещения;
		КонецЕсли;
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Новый Структура("Организация,Дата",Неопределено,CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОповещения, ВремяОповещения)));
		СтруктураОповещения.Вставить("ВидОповещения",	ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	СтрокаТаб.Периодичность);
		СтруктураОповещения.Вставить("Получатель",		ТекущийПользователь());
		СтруктураОповещения.Вставить("ВпередПоКалендарю", Истина);
		СтрокаТаб.ДатаОповещения	= CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = СтрокаТаб.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(СтрокаТаб.ДатаОповещения > ТекущаяДатаСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДобавитьОповещение(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьОповещение();
	
	ПризнакИзмененыОповещения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьОповещение(Команда)
	
	УдалитьОповещение(Команда.Имя);
	
	ПризнакИзмененыОповещения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Если ИспользоватьНапоминания Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.Напоминание"));
	КонецЕсли;
	
	Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта"));
	КонецЕсли;
	
	Если ИспользоватьОповещенияСМС Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.СМС"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОповещениеПриИзменении(Элемент)
	
	Если Найти(Элемент.Имя, "ПолеКанала_") > 0 Тогда
		
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеКанала_","");
		
	ИначеЕсли Найти(Элемент.Имя, "ПолеСрокаОповещения_") > 0 Тогда
		
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеСрокаОповещения_","");
		
	ИначеЕсли Найти(Элемент.Имя, "ПолеПериодаОповещения_") > 0 Тогда
		
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеПериодаОповещения_","");
		
	КонецЕсли;
	
	Если (Найти(Элемент.Имя, "ПолеСрокаОповещения_") > 0)
	ИЛИ (Найти(Элемент.Имя, "ПолеПериодаОповещения_") > 0) Тогда
	    Если ЗначениеЗаполнено(ДатаОкончание) Тогда
			ДатаОповещения = ДатаОкончание;
			ВремяОповещения = ВремяОкончание;
			СрокОповещения = - ЭтотОбъект["_СрокОповещения" + Строка(ИдПолей)];
		Иначе
			ДатаОповещения = ДатаНачало;
			ВремяОповещения = ВремяНачало;
			СрокОповещения = ЭтотОбъект["_СрокОповещения" + Строка(ИдПолей)];
		КонецЕсли;
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Новый Структура("Организация,Дата", Неопределено, CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОповещения, ВремяОповещения)));
		СтруктураОповещения.Вставить("ВидОповещения",	ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	ЭтотОбъект["_ПериодОповещения" + Строка(ИдПолей)]);
		СтруктураОповещения.Вставить("Получатель",		ТекущийПользователь());
		СтруктураОповещения.Вставить("ВпередПоКалендарю", Истина);

		ЭтотОбъект["_ДатаОповещения"+Строка(ИдПолей)] = CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		Элементы["ПолеДатыОповещения_"+Строка(ИдПолей)].ЦветТекста = ?(ЭтотОбъект["_ДатаОповещения"+Строка(ИдПолей)] > ТекущаяДата(), Новый Цвет(25,85,174), Новый Цвет(255,0,0));
		
	КонецЕсли;
	ПриИзмененииОповещения(ИдПолей);
	
	ПризнакИзмененыОповещения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДатыОповещений(ОписаниеОповещенияОЗавершении)
	
	ТекстВопроса = "";
	
	ИД = 1;
	Всего = 0;
	Для Каждого СтрокаОповещения Из _ТаблицаОповещений Цикл
		Если СтрокаОповещения.ДатаОповещения < ТекущаяДата() Тогда
			Если НЕ ТекстВопроса = "" Тогда
				ТекстВопроса = ТекстВопроса + Символы.ПС;
			КонецЕсли;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Срок оповещения №'") + Строка(ИД) + НСтр("ru = ' меньше текущей даты.'");
			Всего = Всего + 1;
		КонецЕсли;
		ИД = ИД + 1;
	КонецЦикла;
	
	Если НЕ ТекстВопроса = "" Тогда
		ТекстВопроса = ТекстВопроса + Символы.ПС + ?(Всего=1,НСтр("ru = 'Это оповещение не будет создано.'"),НСтр("ru = 'Эти оповещения не будут созданы.'")) + " " + НСтр("ru = 'Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьДатыОповещенийЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДатыОповещенийЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПроектаНаСервере()
	Если ЗначениеЗаполнено(Объект.CRM_Проект) Тогда 
		Если ЗначениеЗаполнено(Объект.CRM_Проект.CRM_Партнер) Тогда
			Объект.CRM_Партнер = Объект.CRM_Проект.CRM_Партнер;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.CRM_Проект.CRM_КонтактноеЛицоПартнера) Тогда
			Объект.CRM_КонтактноеЛицо = Объект.CRM_Проект.CRM_КонтактноеЛицоПартнера;
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура УстановитьВидимостьЭлементов()
	Элементы.CRM_Партнер.Видимость = ЗначениеЗаполнено(Объект.CRM_Партнер);
	Элементы.CRM_Проект.Видимость = ЗначениеЗаполнено(Объект.CRM_Проект);
	Элементы.CRM_КонтактноеЛицо.Видимость = ЗначениеЗаполнено(Объект.CRM_КонтактноеЛицо);
	Элементы.CRM_Этап.Видимость = ЗначениеЗаполнено(Объект.CRM_Этап);
	Элементы.ДатаИсполнения.Видимость = ЗначениеЗаполнено(Объект.ДатаИсполнения);
	Элементы.ПредметСтрокой.Видимость = ЗначениеЗаполнено(Объект.ПредметСтрокой) И Объект.ПредметСтрокой <> "не задан";
	//Элементы.Автор.Видимость = Объект.CRM_ПоказатьАвтора;
	//Элементы.ДатаНачала.Видимость = Объект.CRM_ПоказатьДатуНачала;
	//Элементы.ВзаимодействияОтправитьEmailКлиент.Видимость =  ЗначениеЗаполнено(Объект.CRM_КонтактноеЛицо);
	//Элементы.ВзаимодействияОтправитьСМСКЛ.Видимость =  ЗначениеЗаполнено(Объект.CRM_КонтактноеЛицо);
КонецПроцедуры	


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = ТекущаяДатаСеанса();
		Объект.Автор = ТекущийПользователь();
		Объект.Исполнитель = ТекущийПользователь();
		Объект.CRM_Личная = Истина;
	КонецЕсли;
	 
	Заголовок = Объект.Наименование + " от " +Формат(Объект.Дата, "ДФ='d MMMM yyyy'; ДЛФ=DD") + ", " + Формат(Объект.Дата, "ДФ=HH:mm; ДЛФ=T");
	
	ПризнакЕстьПодчиненныеЗадачи = CRM_БизнесПроцессыИЗадачиВызовСервера.ЕстьПодчиненныеЗадачи(Объект.Ссылка);
	
	Если Параметры.Свойство("Начало") Тогда
		Объект.ДатаНачала = Параметры.Начало;
	КонецЕсли;
	Если Параметры.Свойство("Окончание") Тогда
		Объект.СрокИсполнения = Параметры.Окончание;
	КонецЕсли;
	Если Параметры.Свойство("Наименование") Тогда
		Объект.Наименование = Параметры.Наименование;
	КонецЕсли;
	
	ЗаполнитьДанныеФормыСервер();
	НачальныйПризнакВыполнения = Объект.Выполнена;
	
	ТолькоПросмотр = (НЕ Объект.Автор = ТекущийПользователь());
	Если Объект.Предмет <> Неопределено И НЕ Объект.Предмет.Пустая() Тогда
		Элементы.ПредметСтрокой.Гиперссылка = Истина;
	Иначе
		Элементы.ПредметСтрокой.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач	= ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	//Элементы.ВремяНачало.Видимость		= ИспользоватьДатуИВремяВСрокахЗадач;
	//Элементы.ВремяОкончание.Видимость	= ИспользоватьДатуИВремяВСрокахЗадач;
	
	ОтрисоватьКатегорииНаФорме();
	
	ЗаполнитьГруппуОповещений();
	
	УстановитьСвойстваЭлементов();
	
	//Если  ЗначениеЗаполнено(Объект.CRM_Проект) Или
	//	  ЗначениеЗаполнено(Объект.CRM_Этап)   Или	
	//	  ЗначениеЗаполнено(Объект.CRM_Партнер) Тогда
	//	  
	//	Элементы.ГруппаСвязатьСРеквизиты.Видимость = Истина;
	//	Элементы.ДекорацияСвязатьС.Видимость = Ложь;
	//Иначе
	//	Элементы.ГруппаСвязатьСРеквизиты.Видимость = Ложь;
	//	Элементы.ДекорацияСвязатьС.Видимость = Истина;
	//КонецЕсли;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Взаимодействия.Загрузить(CRM_ВзаимодействияСервер.ПолучитьВзаимодействия(Объект.Ссылка));
		ЗаполнитьДатуИВремяСервер();
		Элементы.Исполнитель.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	//Элементы.ФормаПозвонить.Видимость = сфпСофтФонПроСервер.сфпИспользоватьСофтФон();		
	Элементы.ГруппаПанельГиперссылок.Видимость			= Ложь;
	Элементы.Перенаправить.Доступность = НЕ Объект.Ссылка.Пустая();
	УстановитьВидимостьЭлементов();
	ВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.Вручную;
	
	Если Параметры.Свойство("ПозиционироватьНаВзаимодействие") И ТипЗнч(Параметры.ПозиционироватьНаВзаимодействие) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		Отбор = Новый Структура("Ссылка", Параметры.ПозиционироватьНаВзаимодействие);
		НайденныеСтроки = Взаимодействия.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 1 Тогда
			Элементы.Взаимодействия.ТекущаяСтрока = Взаимодействия.Индекс(НайденныеСтроки[0]);
			Если Параметры.Свойство("ВвестиРезультат") Тогда
				Элементы.Взаимодействия.ТекущийЭлемент = Элементы.ВзаимодействияРезультат;
			КонецЕсли;
		КонецЕсли;
	Иначе	
		Элементы.ГруппаВзаимодействия.Видимость	= Ложь;
		Элементы.ВзаимодействияКнопкаДобавить.Видимость = Ложь;
		Элементы.ВзаимодействияКнопкаУдалить.Видимость = Ложь;
		Элементы._СкрытьОбъекты.Видимость	= Ложь;
		Элементы._ПоказатьОбъекты.Видимость	= Истина;
	КонецЕсли;
	
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСрокОповещенияПоВарианту()

	ТекущаяДатадляСрока = ТекущаяДатаСеанса();
	
	Если ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.Сейчас Тогда
		
		Объект.СрокИсполнения	= ТекущаяДатадляСрока;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.Через15Минут Тогда	
		
		Объект.СрокИсполнения	= ТекущаяДатадляСрока + 900;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.ЧерезЧас Тогда	
		
		Объект.СрокИсполнения	= ТекущаяДатадляСрока + 3600;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.Через4Часа Тогда	
		
		Объект.СрокИсполнения	= ТекущаяДатадляСрока + 14400;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.Через8Часов Тогда	
		
		Объект.СрокИсполнения	= ТекущаяДатадляСрока + 28800;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень Тогда	
		
		Объект.СрокИсполнения	= ТекущаяДатадляСрока + 86400;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриДня Тогда	
		
		Объект.СрокИсполнения	= ТекущаяДатадляСрока + 259200;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.ЧерезНеделю Тогда	
		
		Объект.СрокИсполнения	= ТекущаяДатадляСрока + 604800;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДвеНедели Тогда	
		
		Объект.СрокИсполнения	= ТекущаяДатадляСрока + 1209600;
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.ЧерезМесяц Тогда	
		
		Объект.СрокИсполнения	= ДобавитьМесяц(ТекущаяДатадляСрока,1);
		
	ИначеЕсли ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.ЧерезТриМесяца Тогда	
		
		Объект.СрокИсполнения	= ДобавитьМесяц(ТекущаяДатадляСрока,3);
		
	Иначе //Если Объект.ВариантСрока=Перечисления.CRM_ВариантыУстановкиДаты.Вручную Тогда	
		
		Если Объект.СрокИсполнения=Дата(1,1,1) Тогда
		
			Объект.СрокИсполнения	= ТекущаяДатадляСрока;	
		
		КонецЕсли; 
		
	КонецЕсли;	
	
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.СрокИсполнения);
	ДатаОкончание	= ДатаВремя.Дата;
	ВремяОкончание	= ДатаВремя.Время;
	
	
КонецПроцедуры // ПолучитьСрокОповещенияПоВарианту()


&НаСервере
// Процедура заполняет дату и время взаимодействия, а так же вспомогательный реквизит СостояниеИнтересаПреддущее.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДатуИВремяСервер()
	Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
		ДатаИВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ТекВзаимодействие.ПлановаяДата);
		ТекВзаимодействие.ДатаНачала = ДатаИВремя.Дата;
		ТекВзаимодействие.ВремяС = ДатаИВремя.Время;
		
		ДатаИВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ТекВзаимодействие.ПлановаяДатаЗавершение);
		ТекВзаимодействие.ВремяПо = ДатаИВремя.Время;
		
		ТекВзаимодействие.СостояниеИнтересаПредыдущее = ТекВзаимодействие.СостояниеИнтереса;
		ТекВзаимодействие.ЭтапПредыдущий = ТекВзаимодействие.Этап;
		Если ТекВзаимодействие.СтатусВзаимодействия <> ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
			ТекВзаимодействие.ЗапрещеноМенятьСостояние = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ПроверитьНаКорректность() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	
	Если НЕ НеПроверятьОповещения Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
		ПроверитьДатыОповещений(ОписаниеОповещения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Ошибки, ДополнительныеПараметры) Экспорт
	Если НЕ Ошибки Тогда
		НеПроверятьОповещения = Истина;
		Если ВыполнитьЗадачу Тогда
			Записать(Новый Структура("ВыполнитьЗадачу", Истина));
			Закрыть();
		Иначе
			Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПризнакНовойЗадачи = ТекущийОбъект.Ссылка.Пустая();
	
	Если НЕ ПризнакНовойЗадачи Тогда
		Если НЕ ПроверитьЗаполнение() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если НЕ ТекущийОбъект.ДатаНачала = ТекущийОбъект.Ссылка.ДатаНачала Тогда
			ПризнакИзмененаДата = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаНастроекОповещений = ДанныеФормыВЗначение(ЭтотОбъект._ТаблицаОповещений, Тип("ТаблицаЗначений"));
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаНастроекОповещений"				,ТаблицаНастроекОповещений);
	СтруктураДанных.Вставить("ЭтоНоваяЗадача"							,ПризнакНовойЗадачи);
	СтруктураДанных.Вставить("Пользователь"								,ТекущийОбъект.Исполнитель);
	
	АдресНастроек = ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
	ЗаписатьВзаимодействияСервер(ТекущийОбъект);
	
	Если ПризнакИзмененыОповещения ИЛИ ПризнакИзмененаДата Тогда
		// Тут надо формировать записи оповещений.
		CRM_ОповещенияСервер.СформироватьОповещенияПоЗадаче(ТекущийОбъект.Ссылка, АдресНастроек);
		
		ПризнакИзмененаДата		= Ложь;
		ПризнакИзмененыОповещения	= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьСвойстваЭлементов();
	
	Если (ЗначениеЗаполнено(Объект.Предмет) И ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")) И Объект.Выполнена Тогда
		
		УчетнаяЗапись = CRM_УправлениеЭлектроннойПочтой.ПолучитьУчетнуюЗаписьПоПисьму(Объект.Предмет);			
		ФормаПисьма = ПолучитьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",Новый Структура("Ключ",Объект.Предмет)); 
		
		Если НЕ (ФормаПисьма = Неопределено) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиПереносВПапку", ЭтотОбъект, ФормаПисьма);
			CRM_УправлениеЭлектроннойПочтойКлиент.ВопросПеренестиПисьмоВПапкуОбработанные(УчетнаяЗапись, ФормаПисьма.Папка, ОписаниеОповещения);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли (ЗначениеЗаполнено(Объект.Предмет) И ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.МаркетинговыеМероприятия")) И Объект.Выполнена Тогда
		
		ФормаСправочника = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаОбъекта",Новый Структура("Ключ",Объект.Предмет)); 
		Если ФормаСправочника.Открыта() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтотОбъект, ФормаСправочника);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Завершить связанное мероприятие?'"),РежимДиалогаВопрос.ДаНет);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Завершить связанное мероприятие?'"),РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	Оповестить("СохраненаЛичнаяЗадача",Объект.Предмет);
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
		Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Неопределено, Параметры.ОбновлятьКалендарь), ЭтотОбъект);
	КонецЕсли;
	
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	
	Оповестить("ОбновитьПланировщик");
	
	Оповестить("ОбновитьАРМ");
	
	Если ЗакрыватьПослеЗаписи Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиПереносВПапку(ПапкаОтработанные, ФормаПисьма) Экспорт
	
	Если НЕ (ПапкаОтработанные = ПредопределенноеЗначение("Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка")) Тогда
		CRM_УправлениеЭлектроннойПочтой.ПеренестиПисьмоВПапку(Объект.Предмет, ПапкаОтработанные);
		Оповестить("CRM_УстановленФлагОбработано",, ФормаПисьма);
		//Если ФормаПисьма.Открыта() Тогда
		//	Если НЕ ПапкаОтработанные = ПредопределенноеЗначение("Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка") Тогда
		//		ФормаПисьма.Папка = ПапкаОтработанные;
		//	КонецЕсли;
		//	ФормаПисьма.Объект.Удалить_Рассмотрено = Истина;
		//	ФормаПисьма.Модифицированность = Истина;
		//Иначе
		//	CRM_УправлениеЭлектроннойПочтой.ПеренестиПисьмоВПапку(Объект.Предмет, ПапкаОтработанные);
		//	Оповестить("CRM_УстановленФлагОбработано");
		//КонецЕсли;
	КонецЕсли;
	Оповестить("СохраненаЛичнаяЗадача",Объект.Предмет);
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
		Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Неопределено, Параметры.ОбновлятьКалендарь), ЭтотОбъект);
	КонецЕсли;
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	Оповестить("ОбновитьПланировщик");
	Оповестить("ОбновитьАРМ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиЗавершение(Ответ, ФормаСправочника) Экспорт
	
	Если ФормаСправочника = Неопределено Тогда
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ИзменитьМаркетинговоеМероприятие();	
		КонецЕсли;
	Иначе
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ФормаСправочника.Объект.Завершено = Истина;
			Попытка
				ФормаСправочника.Записать();
				ФормаСправочника.Закрыть();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось изменить маркетинговое мероприятие, вероятно оно заблокировано'"));	
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Оповестить("СохраненаЛичнаяЗадача",Объект.Предмет);
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
		Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Неопределено, Параметры.ОбновлятьКалендарь), ЭтотОбъект);
	КонецЕсли;
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	Оповестить("ОбновитьПланировщик");
	Оповестить("ОбновитьАРМ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.ЗадачаИсполнителяПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.ЗадачаИсполнителяПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ЗакрыватьПослеЗаписи = Истина;
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("СтатусВзаимодействия", ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано"));
	НайденныеСтроки = Взаимодействия.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
			ТекВзаимодействие.Изменено = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("Данные", "ВремяНачало");
	Дополнительно.Вставить("Обработчик", "ДатаВремяНачалаПриИзменении");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяНачало, Элемент,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("Данные", "ВремяОкончание");
	Дополнительно.Вставить("Обработчик", "ДатаВремяОкончанияПриИзменении");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	Если НачалоДня(ДатаНачало) = НачалоДня(ДатаОкончание) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент, ВремяНачало, Истина, ОписаниеОповещения);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент,,, ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура обработки выбора времени из списка.
//
Процедура ОбработкаОповещенияВыбранногоВремениВзаимодействия(Параметры, Дополнительно) Экспорт
	Если Параметры <> Неопределено Тогда
		Если Дополнительно.Имя = "ВзаимодействияВремяС" Тогда
			Дополнительно.ТекДанные.ВремяС = Параметры.Значение;
			ВзаимодействияВремяСПриИзменении(Дополнительно.Элемент);
			Если НЕ ЗначениеЗаполнено(Дополнительно.ТекДанные.ВремяПо) Тогда
				Дополнительно.ТекДанные.ВремяПо = Параметры.Значение+15*60;	
			КонецЕсли;	
		Иначе
			Дополнительно.ТекДанные.ВремяПо = Параметры.Значение;
			ВзаимодействияВремяПоПриИзменении(Дополнительно.Элемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры       

&НаКлиенте
// Процедура обработки выбора времени из списка.
//
Процедура ОбработкаОповещенияВыбранногоВремени(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ЭтотОбъект[Дополнительно.Данные] = ВыбранноеВремя.Значение;
		Если Дополнительно.Обработчик = "ДатаВремяОкончанияПриИзменении" Тогда
			ДатаВремяОкончанияПриИзменении(Дополнительно.Элемент);
		КонецЕсли;	
		Если Дополнительно.Обработчик = "ДатаВремяНачалаПриИзменении" Тогда
			ДатаВремяНачалаПриИзменении(Дополнительно.Элемент);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПредметСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", 
		Новый Структура("Ключ, ОткрытиеИзФормы", Объект.Предмет, Истина),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда		
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента", 
		Новый Структура("Ключ, ОткрытиеИзФормы", Объект.Предмет, Истина),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.Независимый);		
	Иначе			
		ПоказатьЗначение(, Объект.Предмет);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ДатаОкончание) Тогда
		Если ДатаНачало > ДатаОкончание Тогда
			ДатаОкончание = ДатаНачало;
			ВремяОкончание = ВремяНачало;
		ИначеЕсли (ДатаОкончание = ДатаНачало) И (ВремяОкончание < ВремяНачало) Тогда
			ВремяОкончание = ВремяНачало;
		КонецЕсли;
	КонецЕсли;
	
	СкорректироватьДатыЗадачи();
	ПересчитатьДатыОповещений();
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончанияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ДатаОкончание) Тогда
		Если ДатаОкончание < ДатаНачало Тогда
			ДатаНачало = ДатаОкончание;
			ВремяНачало = ВремяОкончание;
		ИначеЕсли (ДатаОкончание = ДатаНачало) И (ВремяОкончание < ВремяНачало) Тогда
			ВремяОкончание = ВремяНачало;
		КонецЕсли;
	КонецЕсли;
	
	СкорректироватьДатыЗадачи();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатие(Элемент)
	МассивКатегорий = Новый Массив();
	Для Каждого КатегорияСтрока Из Объект.CRM_Категории Цикл
		МассивКатегорий.Добавить(КатегорияСтрока.Категория);
	КонецЦикла;
	
	СтруктураОписаниеКатегорий = Новый Структура("МассивКатегорий,ОсновнаяКатегория,Владелец", МассивКатегорий, Объект.CRM_ОсновнаяКатегория, Объект.Автор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияВыбратьГруппуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыборКатегорий", Новый Структура("ОписаниеКатегорий", СтруктураОписаниеКатегорий), ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		Модифицированность = Истина;
		
		Объект.CRM_Категории.Очистить();
		Для Каждого СтрокаКатегория Из Результат.СписокВыбранныеКатегории Цикл
			НоваяСтрока = Объект.CRM_Категории.Добавить();
			НоваяСтрока.Категория = СтрокаКатегория.Значение;
		КонецЦикла;
		Объект.CRM_ОсновнаяКатегория = Результат.ОсновнаяКатегория;
		
		ОтрисоватьКатегорииНаФорме();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПартнерПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.CRM_КонтактноеЛицо) Тогда
		Объект.CRM_КонтактноеЛицо = ВернутьКонтактноеЛицо(Объект.CRM_Партнер);
	КонецЕсли;	
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	ЗакрыватьПослеЗаписи = Истина;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗавершение(ВыбранныйПользователь, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйПользователь) И ТипЗнч(ВыбранныйПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		Объект.Исполнитель = ВыбранныйПользователь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИЗакрыть(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если Не Объект.Выполнена Тогда
		ВыполнитьЗадачу = Истина;
		МассивВзаимодействий = новый Массив;
		Для Каждого СтрокаВзаимодействия ИЗ Взаимодействия Цикл
			Если СтрокаВзаимодействия.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано")
				ИЛИ СтрокаВзаимодействия.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.ВРаботе") Тогда
				МассивВзаимодействий.Добавить(СтрокаВзаимодействия.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивВзаимодействий.Количество() > 0 Тогда
			
			Дополнительно = Новый Структура("Взаимодействия", МассивВзаимодействий);
			
			ОповещениеОбработкиАктивныхВзаимодействий = Новый ОписаниеОповещения("ОбработкаЗакрытияАктивныхВзаимодействийПоЗадаче", ЭтотОбъект, Дополнительно);
			ТекстВопроса = "Завершить все активные взаимодействия по данной задаче?";
			ПоказатьВопрос(ОповещениеОбработкиАктивныхВзаимодействий, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ОбработкаЗакрытияАктивныхВзаимодействийПоЗадаче(Неопределено, Неопределено);
		КонецЕсли;
	Иначе
		Объект.Выполнена = Ложь;
		ЗакрыватьПослеЗаписи = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияАктивныхВзаимодействийПоЗадаче(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		CRM_БизнесПроцессыИЗадачиСервер.ЗавершитьВзавимодействияПоЗадаче(ДополнительныеПараметры.Взаимодействия);
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.ЗаписатьИЗакрытьВыполнить(ЭтотОбъект, Истина);
	
	ВыполнитьЗадачу = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПроцентВыполненияЗадачиПриИзменении(Элемент)
	Если Объект.CRM_ПроцентВыполненияЗадачи < 0 Тогда
		Объект.CRM_ПроцентВыполненияЗадачи = 0;
	ИначеЕсли Объект.CRM_ПроцентВыполненияЗадачи > 100 Тогда
		Объект.CRM_ПроцентВыполненияЗадачи = 100;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМероприятие(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьМероприятиеЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМероприятиеЗавершение(Продолжать, ДополнительныеПараметры) Экспорт
	
	Если Продолжать Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Начало", Объект.ДатаНачала);
		ПараметрыФормы.Вставить("Окончание", Объект.СрокИсполнения);
		ПараметрыФормы.Вставить("Наименование", Объект.Наименование);
		ПараметрыФормы.Вставить("Начало", Объект.ДатаНачала);
		ОткрытьФорму("Документ.CRM_Мероприятие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачу(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗадачуНачало", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуНачало(Продолжать, ДополнительныеПараметры) Экспорт
	
	Если Продолжать Тогда
		Если Не Объект.Выполнена Тогда
			
			СобытияЗадачи = ПолучитьСобытияЗадачи();
			
			ВариантЗавершенияСобытий = Неопределено;
			ДатаПереноса = Неопределено;
			ДополнительныеПараметы = Новый Структура("СобытияЗадачи, ВариантЗавершенияСобытий", СобытияЗадачи, ВариантЗавершенияСобытий);
			Если СобытияЗадачи.Количество() > 0 Тогда
				Список = Новый СписокЗначений();
				Список.Добавить("ЗавершатьСобытия",		НСтр("ru = 'Завершать события'"));
				Список.Добавить("ПеренестиНаСегодня",	НСтр("ru = 'Перенести на сегодня'"));
				Список.Добавить("ПеренестиНаЗавтра",	НСтр("ru = 'Перенести на завтра'"));
				Список.Добавить("ПеренестиНа3Дня",		НСтр("ru = 'Перенести на 3 дня'"));
				Список.Добавить("ПеренестиНаНеделю",	НСтр("ru = 'Перенести на неделю'"));
				Список.Добавить("ПеренестиНаДату",		НСтр("ru = 'Перенести на дату...'"));
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗадачуПродлжение", ЭтотОбъект, ДополнительныеПараметы);
				ПоказатьВыборИзМеню(ОписаниеОповещения, Список, Элементы.ФормаВыполнить);
			Иначе	
				ЗавершитьЗадачуЗавершение(Дата(1,1,1), ДополнительныеПараметы);
			КонецЕсли;
			
		Иначе
			Объект.Выполнена = Ложь;
			Если Записать() Тогда
				УстановитьСвойстваЭлементов();
				Оповестить("СохраненаЛичнаяЗадача",Объект.Предмет);
				Закрыть();
			КонецЕсли;
			Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
			Оповестить("ОбновитьАРМ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуПродлжение(ВыбранноеЗначение, ДополнительныеПараметы) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВариантЗавершенияСобытий = ВыбранноеЗначение.Значение;
	ДополнительныеПараметы.ВариантЗавершенияСобытий = ВариантЗавершенияСобытий;
	Если ВариантЗавершенияСобытий = "ПеренестиНаДату" Тогда
		ДатаПереноса = ТекущаяДата();
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗадачуЗавершение", ЭтотОбъект, ДополнительныеПараметы);
		ПоказатьВводДаты(ОписаниеОповещения, ДатаПереноса, НСтр("ru = 'Перенести на дату'"), ЧастиДаты.Дата);
	Иначе
		ЗавершитьЗадачуЗавершение(Дата(1,1,1), ДополнительныеПараметы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуЗавершение(ДатаПереноса, ДополнительныеПараметы) Экспорт
	Если ДатаПереноса = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗавершитьЗадачуССобытиями(ДополнительныеПараметы.СобытияЗадачи, ДополнительныеПараметы.ВариантЗавершенияСобытий, ДатаПереноса) Тогда
		Если ДополнительныеПараметы.СобытияЗадачи.Количество() > 0 Тогда
			// Нужно чтобы обновился календарь.
			Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Неопределено, Параметры.ОбновлятьКалендарь), ЭтотОбъект);
		КонецЕсли;
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("СохраненаЛичнаяЗадача",Объект.Предмет);
		
		Если (ЗначениеЗаполнено(Объект.Предмет) И ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")) И Объект.Выполнена Тогда
			
			УчетнаяЗапись = CRM_УправлениеЭлектроннойПочтой.ПолучитьУчетнуюЗаписьПоПисьму(Объект.Предмет);				
			ФормаПисьма = ПолучитьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента",Новый Структура("Ключ",Объект.Предмет)); 
			
			Если НЕ (ФормаПисьма = Неопределено) Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьЗадачуЗавершениеПереносВПапку", ЭтотОбъект, ФормаПисьма);
				CRM_УправлениеЭлектроннойПочтойКлиент.ВопросПеренестиПисьмоВПапкуОбработанные(УчетнаяЗапись, ФормаПисьма.Папка, ОписаниеОповещения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Закрыть();
	КонецЕсли;
	
	
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	
	Оповестить("ОбновитьАРМ");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуЗавершениеПереносВПапку(ПапкаОтработанные, ФормаПисьма) Экспорт
	
	Если НЕ (ПапкаОтработанные = ПредопределенноеЗначение("Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка")) Тогда
		CRM_УправлениеЭлектроннойПочтой.ПеренестиПисьмоВПапку(Объект.Предмет, ПапкаОтработанные);
		Оповестить("CRM_УстановленФлагОбработано",, ФормаПисьма);
		//Если ФормаПисьма.Открыта() Тогда
		//	Если НЕ ПапкаОтработанные = ПредопределенноеЗначение("Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка") Тогда
		//		ФормаПисьма.Папка = ПапкаОтработанные;
		//	КонецЕсли;
		//	ФормаПисьма.Объект.Удалить_Рассмотрено = Истина;
		//	ФормаПисьма.Модифицированность = Истина;
		//Иначе
		//	CRM_УправлениеЭлектроннойПочтой.ПеренестиПисьмоВПапку(Объект.Предмет, ПапкаОтработанные);
		//	Оповестить("CRM_УстановленФлагОбработано");
		//КонецЕсли;
	КонецЕсли;
	
	Закрыть();
	
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	Оповестить("ОбновитьАРМ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаСегодня(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНа", ЭтотОбъект, "ПеренестиНаСегодня");
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНа(Продолжать, ПеренестиНа) Экспорт
	Если Продолжать Тогда
		ПеренестиЗадачуНаКлиенте(ПеренестиНа);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаЗавтра(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНа", ЭтотОбъект, "ПеренестиНаЗавтра");
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНа3Дня(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНа", ЭтотОбъект, "ПеренестиНа3Дня");
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаНеделю(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНа", ЭтотОбъект, "ПеренестиНаНеделю");
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаДату(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНаДатуПродолжение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаДатуПродолжение(Продолжать, ДополнительныеПараметры) Экспорт
	Если Продолжать Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНаДатуЗавершение", ЭтотОбъект);
		ПоказатьВводДаты(ОписаниеОповещения, ТекущаяДата(), НСтр("ru = 'Перенести на дату'"), ЧастиДаты.Дата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаДатуЗавершение(ДатаПереноса, ДополнительныеПараметры) Экспорт
	Если ДатаПереноса <> Неопределено Тогда
		ПеренестиЗадачуНаКлиенте("ПеренестиНаДату", ДатаПереноса);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвязатьСНажатие(Элемент)
	
	Элементы.ГруппаСвязатьСРеквизиты.Видимость = Истина;
	Элементы.ДекорацияСвязатьС.Видимость = Ложь;
	
	УстановитьСвойстваЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПроектПриИзменении(Элемент)
	
	ПриИзмененииПроектаНаСервере();
	УстановитьСвойстваЭлементов();
	УстановитьВидимостьЭлементов();	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоручение(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВводПорученияИзЗадачи");
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", СтруктураПараметров);
	
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "Позвонить".
//
Процедура Позвонить(Команда)
	#Если Вебклиент Тогда
		Состояние(Нстр("ru = 'Работа СофтФона невозможна в web-клиенте!'"));
	#Иначе
		Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
			Возврат;
		КонецЕсли;			
		СписокОбъектов = ПолучитьСписокУчастников();
		Если СписокОбъектов.Количество() > 0 Тогда
			сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов);			
		КонецЕсли;	
	#КонецЕсли
КонецПроцедуры // Позвонить()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы "Взаимодействия".
//
Процедура ВзаимодействияПриАктивизацииСтроки(Элемент)
	//ПодключитьОбработчикОжидания("Подключаемый_ВзаимодействияПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
// Процедура - обработка выбора Вида взаимодействия при добавлении строки.
//
Процедура ВыборВидаВзаимодействия(Парамеры, ДополнительныеПараметры) Экспорт
	Если Парамеры <> Неопределено Тогда
		Дополнительно = ДополнительныеПараметры.НоваяСтрока;
		Дополнительно.ВидВзаимодействия = Парамеры;
		СтруктураНеобходимыхДанных = ПолучитьРеквизитыВзаимодействияСервер(Парамеры);
		
		Дополнительно.Баллы = СтруктураНеобходимыхДанных.Баллы;
		Дополнительно.ВидСобытияКартинка = СтруктураНеобходимыхДанных.ВидСобытияКартинка;
		Если ДополнительныеПараметры.ЗаполнятьСодержаниеИДату Тогда
			Дополнительно.Содержание = "";
			Дополнительно.ДатаНачала = ТекущаяДата();
			Дополнительно.ВремяС	 = ТекущаяДата();
			Дополнительно.ВремяПо	 = ТекущаяДата()+60*15;
		Иначе			
			Дополнительно.Содержание = СтруктураНеобходимыхДанных.Описание;
		КонецЕсли;			
		Дополнительно.Изменено = Истина;
		
		ЗаписатьДатуНачалаВзаимодействия(Дополнительно);
		Элементы.Взаимодействия.ТекущийЭлемент = Элементы.ВзаимодействияСодержание;
		Элементы.Взаимодействия.ТекущийЭлемент = Элементы.ВзаимодействияКонтактноеЛицо;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьВидВзаимодействия()
	Возврат Справочники.CRM_ВидыВзаимодействий.ЛичнаяЗадача;
КонецФункции	

&НаСервере
Функция ПолучитьСтруктуруЗаполненияВзаимодействия()
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Автор", Объект.Исполнитель);
	СтруктураЗаполнения.Вставить("КонтактноеЛицо", Объект.CRM_КонтактноеЛицо);
	СтруктураЗаполнения.Вставить("Партнер", Объект.CRM_Партнер);
	СтруктураЗаполнения.Вставить("Подразделение", Объект.Исполнитель.Подразделение);
	СтруктураЗаполнения.Вставить("Содержание", "");
	СтруктураЗаполнения.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураЗаполнения.Вставить("ВремяС", ТекущаяДатаСеанса());
	СтруктураЗаполнения.Вставить("ВремяПо", ТекущаяДатаСеанса()+60*15);
	БаллыМакс = Объект.Исполнитель.Подразделение.CRM_МаксимальноеКоличествоБалловВДень;
	Баллы = Цел(БаллыМакс/28800*(60*15));
	СтруктураЗаполнения.Вставить("Баллы", Баллы);
	Возврат СтруктураЗаполнения;
КонецФункции	

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" ТЧ Взаимодействия.
//
Процедура ВзаимодействияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Если у нас состояние интереса равно какому то с реквизитом завершен, то запретить ввод новых взаимодействий.
	//Если ЗапретитьДобавлениеНовогоВзаимодействия() Тогда
	//	Отказ = Истина;
	//	ПоказатьПредупреждение(, "Данный Интерес завершен. По нему нельзя планировать новое взаимодействие");
	//Иначе
		Отказ = Истина;
		СтруктураЗаполнения = ПолучитьСтруктуруЗаполненияВзаимодействия();
		МассивСтрок = Взаимодействия.НайтиСтроки(Новый Структура("АктивноеВзаимодействие", истина));
		
		НоваяСтрока = Взаимодействия.Вставить(0);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения);
		НоваяСтрока.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано");
		Модифицированность = Истина;
		Элементы.Взаимодействия.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.Взаимодействия.ИзменитьСтроку();
		// Сразу открываем форму выбора взаимодействия.
		СтруктураДанных = Новый Структура("НоваяСтрока, ЗаполнятьСодержаниеИДату", НоваяСтрока, Ложь);		
		ОповещениеОВыбореВзаимодействия = Новый ОписаниеОповещения("ВыборВидаВзаимодействия", ЭтотОбъект, СтруктураДанных);
		//ОткрытьФорму("Справочник.bpmПричиныОтказов.ФормаВыбора",,,,,,ОповещениеОЗакрытии);
		//ЗначениеОтбора = Новый Структура;
		//ЗначениеОтбора.Вставить("Направление", ПредопределенноеЗначение("Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее"));
		//ЗначениеОтбора.Вставить("ВидДела", ПредопределенноеЗначение("Справочник.CRM_ВидыДелВзаимодействий.ЛичнаяЗадача"));
		//////ЗначениеОтбора.Вставить("СостояниеИнтереса", Объект.СостояниеИнтереса);
		//ПараметрыВыбораВидаВзаимодействия = Новый Структура("Отбор", ЗначениеОтбора);
		//ОткрытьФорму("Справочник.CRM_ВидыВзаимодействий.ФормаВыбора", ПараметрыВыбораВидаВзаимодействия,,,,,ОповещениеОВыбореВзаимодействия);
		ВидВзаимодействия = ПолучитьВидВзаимодействия();
		НоваяСтрока.ВидВзаимодействия = ВидВзаимодействия;
		СтруктураНеобходимыхДанных = ПолучитьРеквизитыВзаимодействияСервер(ВидВзаимодействия);
		
				НоваяСтрока.ВидСобытияКартинка = СтруктураНеобходимыхДанных.ВидСобытияКартинка;
		//Если ДополнительныеПараметры.ЗаполнятьСодержаниеИДату Тогда

		//Иначе			
		//	Дополнительно.Содержание = СтруктураНеобходимыхДанных.Описание;
		//КонецЕсли;			
		НоваяСтрока.Изменено = Истина;
		
		ЗаписатьДатуНачалаВзаимодействия(НоваяСтрока);
		Элементы.Взаимодействия.ТекущийЭлемент = Элементы.ВзаимодействияСодержание;
		Элементы.Взаимодействия.ТекущийЭлемент = Элементы.ВзаимодействияКонтактноеЛицо;

	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура обработки ответа на вопрос пользователя Отменить / Запланировать взаимодействие по нажатию del.
//
// Параметры:
// Параметры - КодВозвратаДиалога
// дополнительно - строка ТЧ, для которой обрабатываем нажатие.
Процедура ОбработкаОтменыВзаимодействия(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		Если Не ЗначениеЗаполнено(Дополнительно.Ссылка) Тогда
			Взаимодействия.Удалить(Дополнительно);		
			Возврат;
		КонецЕсли; 
		Если НЕ Дополнительно.ПервоначальнаяОтмена И Дополнительно.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
			Дополнительно.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено");
			Дополнительно.ПервоначальнаяОтмена = Истина;

		Иначе
			Дополнительно.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано");
			Дополнительно.ПервоначальнаяОтмена = Ложь;
		КонецЕсли;
		Дополнительно.Изменено = Истина;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" ТЧ "Взаимодействия".
//
Процедура ВзаимодействияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	
	ОповещениеВопросаОбОтменеВзаимодействия = Новый ОписаниеОповещения("ОбработкаОтменыВзаимодействия", ЭтотОбъект, ТекДанные);
	
	Если Не ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
		// Можно отменять и полностью удалять строку.
		ТекстВопроса = "Отменить запланированное взаимодействие?";
		ПоказатьВопрос(ОповещениеВопросаОбОтменеВзаимодействия, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено") Тогда
		ПоказатьПредупреждение(, "Нельзя отменять завершенное взаимодействие");
	Иначе
		Если НЕ ТекДанные.ПервоначальнаяОтмена И ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
			ТекстВопроса = "Отменить запланированное взаимодействие?";
		Иначе
			ТекстВопроса = "Запланировать взаимодействие?";
		КонецЕсли;
		ПоказатьВопрос(ОповещениеВопросаОбОтменеВзаимодействия, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура _СкрытьОбъекты(Команда)
	
	Элементы.ГруппаВзаимодействия.Видимость			= Ложь;
	Элементы.ГруппаПанельГиперссылок.Видимость			= Ложь;
	Элементы._СкрытьОбъекты.Видимость					= Ложь;
	Элементы._ПоказатьОбъекты.Видимость					= Истина;
	Элементы.ВзаимодействияКнопкаДобавить.Видимость = Ложь;
	Элементы.ВзаимодействияКнопкаУдалить.Видимость = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура _ПоказатьОбъекты(Команда)
	
	Элементы.ГруппаВзаимодействия.Видимость			= Истина;
	Элементы.ГруппаПанельГиперссылок.Видимость			= Истина;
	Элементы._СкрытьОбъекты.Видимость					= Истина;
	Элементы._ПоказатьОбъекты.Видимость					= Ложь;
	Элементы.ВзаимодействияКнопкаДобавить.Видимость = Истина;
	Элементы.ВзаимодействияКнопкаУдалить.Видимость = Истина;

	
КонецПроцедуры

&НаКлиенте
// Процедура записывает в реквизит ПлановаяДата (состав Дата и Время) выбранные пользователемДатаНачала (состав Дата) и
// Время.
//
// Параметры:
// ТекДанные - элементколлекции формы - строка табличной части.
//
Процедура ЗаписатьДатуНачалаВзаимодействия(ТекДанные)
	ТекДанные.ПлановаяДата = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ТекДанные.ДатаНачала, ТекДанные.ВремяС);
	Если ТекДанные.ВремяС > ТекДанные.ВремяПо Тогда
		ТекДанные.ВремяПо = ТекДанные.ВремяС;	
	КонецЕсли;	
	ПересчитатьБаллы(ТекДанные);
	ТекДанные.Изменено = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура записывает в реквизит ПлановаяДата (состав Дата и Время) выбранные пользователемДатаНачала (состав Дата) и
// Время.
//
// Параметры:
// ТекДанные - элементколлекции формы - строка табличной части.
//
Процедура ЗаписатьПлановуюДатуОкончанияВзаимодействия(ТекДанные)
	ТекДанные.ПлановаяДатаЗавершение = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ТекДанные.ДатаНачала, ТекДанные.ВремяПо);
	Если ТекДанные.ВремяС > ТекДанные.ВремяПо Тогда
		ТекДанные.ВремяС = ТекДанные.ВремяПо;	
	КонецЕсли;	
	ПересчитатьБаллы(ТекДанные);
	ТекДанные.Изменено = Истина;
КонецПроцедуры



&НаКлиенте
// Процедура - Обработчик события "ПриОкончанииРедактирования" ТЧ Взаимодействия
//
Процедура ВзаимодействияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
		ТекДанные.Изменено = Истина;
		ЗаписатьДатуНачалаВзаимодействия(ТекДанные);
		Модифицированность = Истина;
		ЗаписатьПлановуюДатуОкончанияВзаимодействия(ТекДанные);
		Модифицированность = Истина;
		Взаимодействия.Сортировать("ПлановаяДата УБЫВ");
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура создания / изменения документов Взаимодействия, связанных с текущим документом Интерес.
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьВзаимодействияСервер(ТекущийОбъект)
	
	СсылкаНаЗадачу = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	
	// В начале обработаем уже существующие Взаимодействия
	Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
		Если ТекВзаимодействие.Изменено Тогда
			Если НЕ ТекВзаимодействие.Ссылка = Документы.CRM_Взаимодействие.ПустаяСсылка() Тогда
				
				ИзмененноеВзаимодействие = ТекВзаимодействие.Ссылка.ПолучитьОбъект();
				Если ТекВзаимодействие.Изменено Тогда
					//ВремяНаЗавершение = ?(ИзмененноеВзаимодействие.ПлановаяДатаЗавершение >= ИзмененноеВзаимодействие.ПлановаяДата,
					//	ИзмененноеВзаимодействие.ПлановаяДатаЗавершение - ИзмененноеВзаимодействие.ПлановаяДата, 60*15);
					ЗаполнитьЗначенияСвойств(ИзмененноеВзаимодействие, ТекВзаимодействие);
					//ИзмененноеВзаимодействие.ПлановаяДатаЗавершение = ИзмененноеВзаимодействие.ПлановаяДата + ВремяНаЗавершение;
				КонецЕсли;
				ИзмененноеВзаимодействие.Записать();
				ТекВзаимодействие.Изменено = Ложь;
				
			КонецЕсли;
			ОбновленыДатыВзаимодействий = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Обрабатываем новые Взаимодействия
	Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
		Если ТекВзаимодействие.Изменено Тогда
			Если ТекВзаимодействие.Ссылка = Документы.CRM_Взаимодействие.ПустаяСсылка()
				ИЛИ ТекВзаимодействие.Ссылка.ПолучитьОбъект() = Неопределено Тогда
				НовоеВзаимодействие = Документы.CRM_Взаимодействие.СоздатьДокумент();
				Если ЗначениеЗаполнено(ТекВзаимодействие.Ссылка) Тогда
					НовоеВзаимодействие.УстановитьСсылкуНового(Документы.CRM_Взаимодействие.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекВзаимодействие.Ссылка.УникальныйИдентификатор())));
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НовоеВзаимодействие, ТекВзаимодействие);
				НовоеВзаимодействие.ДокументОснование		= ТекущийОбъект.Ссылка;
				Если Не ЗначениеЗаполнено(НовоеВзаимодействие.СтатусВзаимодействия) Тогда
					НовоеВзаимодействие.СтатусВзаимодействия	= Справочники.CRM_СостоянияСобытий.Запланировано;
				КонецЕсли;
				НовоеВзаимодействие.Партнер					= ТекущийОбъект.CRM_Партнер;
				НовоеВзаимодействие.КонтактноеЛицо			= ТекущийОбъект.CRM_КонтактноеЛицо;
				НовоеВзаимодействие.Дата					= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
				НовоеВзаимодействие.Ответственный			= ТекущийОбъект.Исполнитель;
				НовоеВзаимодействие.Записать();
				ТекВзаимодействие.Ссылка					= НовоеВзаимодействие.Ссылка;
				ТекВзаимодействие.Изменено					= Ложь;
			КонецЕсли;
			ОбновленыДатыВзаимодействий = Истина;
		КонецЕсли;
	КонецЦикла;
	
	//// Обновить первичное взаимодействие по интересу.
	//ТекущееПервичное = Взаимодействия[Взаимодействия.Количество()-1].Ссылка;
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//|	CRM_Взаимодействие.Ссылка
	//|ИЗ
	//|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	//|ГДЕ
	//|	CRM_Взаимодействие.ДокументОснование = &Интерес
	//|	И CRM_Взаимодействие.Первичное");
	//Запрос.УстановитьПараметр("Интерес", Объект.Ссылка);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	////Если выборка пустая, то текущее и будет первичным
	//Если Выборка.Количество() = 0 Тогда
	//	ОбъектНовое = ТекущееПервичное.ПолучитьОбъект();
	//	ОбъектНовое.Первичное = Истина;
	//	ОбъектНовое.Записать();
	//Иначе
	//	Пока Выборка.Следующий() Цикл
	//		Если Выборка.Ссылка <> ТекущееПервичное Тогда
	//			ОбъектСтарое = Выборка.Ссылка.ПолучитьОбъект();
	//			ОбъектСтарое.Первичное = Ложь;
	//			ОбъектСтарое.Записать();
	//			ОбъектНовое = ТекущееПервичное.ПолучитьОбъект();
	//			ОбъектНовое.Первичное = Истина;
	//			ОбъектНовое.Записать();
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры // ЗаписатьВзаимодействияСервер()


&НаСервере
// Функция возвращает индекс картинки из коллекции CRM_КоллекцияВидыСобытий.
//
// Параметры:
// ВидВзаимодествия		- СправочникСсылка.CRM_ВидыВзаимодействий 
// 
// Возвращаемое значение:
// Число - индекс коллекции картинок CRM_КоллекцияВидыСобытий.
Функция УстановитьИконкуВидаСобытияСервер(ВидВзаимодествия)

	Если ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 1;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 2;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 3;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 4;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЭлектронноеПисьмо
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 5;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЭлектронноеПисьмо
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 6;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ПочтовоеПисьмо
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 7;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ПочтовоеПисьмо
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 8;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.Прочее
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Входящее Тогда
			Возврат 9;
	ИначеЕсли ВидВзаимодествия.ВидСобытия = Перечисления.CRM_ВидыСобытий.Прочее
		И ВидВзаимодествия.Направление = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее Тогда
			Возврат 10;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПолучитьБаллыДляВидаРабот(ВидВзаимодействия)
	ТзБаллы			= CRM_ОбщегоНазначенияСервер.ПолучитьТаблицуБаллов(Объект.Исполнитель.Подразделение);	
	Поиск			= Новый Структура;
	Поиск.Вставить("ВидВзаимодействия", ВидВзаимодействия);
	НайденныеСтроки	= Неопределено;
	НайденныеСтроки	= ТзБаллы.НайтиСтроки(Поиск);
	Если НайденныеСтроки.Количество()>0 Тогда		
		Баллы = НайденныеСтроки[0].Балл;
	Иначе
		Баллы = ВидВзаимодействия.Баллы;
	КонецЕсли;	
	Возврат Баллы;
КонецФункции


&НаСервере
// Функция возвращает на клиент значения реквизитов из вида взаимодействия.
// 
// Параметры:
// ВидВзаимодествия		- СправочникСсылка.CRM_ВидыВзаимодействий 
// 
// Возвращаемое значение:
// Структура - значения реквизитов.
Функция ПолучитьРеквизитыВзаимодействияСервер(ВидВзаимодействия)
	СтруктураРезультата = Новый Структура;
	//СтруктураРезультата.Вставить("Баллы", ВидВзаимодействия.Баллы);
	СтруктураРезультата.Вставить("Баллы",ПолучитьБаллыДляВидаРабот(ВидВзаимодействия));
	СтруктураРезультата.Вставить("Описание", ВидВзаимодействия.Описание);
	СтруктураРезультата.Вставить("ВидСобытияКартинка", УстановитьИконкуВидаСобытияСервер(ВидВзаимодействия));
	Возврат СтруктураРезультата;
КонецФункции


&НаКлиенте
Процедура ВзаимодействияВидВзаимодействияПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	СтруктураНеобходимыхДанных = ПолучитьРеквизитыВзаимодействияСервер(ТекДанные.ВидВзаимодействия);
	
	ТекДанные.Баллы = СтруктураНеобходимыхДанных.Баллы;
	ТекДанные.ВидСобытияКартинка = СтруктураНеобходимыхДанных.ВидСобытияКартинка;
	ТекДанные.Содержание = СтруктураНеобходимыхДанных.Описание;
	ТекДанные.Изменено = Истина;
	ВзаимодействияВремяСПриИзменении(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияДатаНачалаПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	
	//СтруктураПараметров = Новый Структура();
	//
	//СтруктураПараметров.Вставить("ДатаПоУмолчанию", ТекДанные.ДатаНачала);
	//СтруктураПараметров.Вставить("Автор", Объект.Исполнитель);
	//СтруктураПараметров.Вставить("Ответственный", Объект.Исполнитель);
	//
	//
	//CRM_ВзаимодействияКлиент.ДатаВзаимодействияПриИзменении(Объект, Элемент, СтруктураПараметров);
	//
	//Если СтруктураПараметров.Свойство("Дата") Тогда
	//	// Сбрасываем дату
	//	ТекДанные.ДатаНачала = СтруктураПараметров.Дата;
	//КонецЕсли;
	
	ТекДанные.ПлановаяДата = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ТекДанные.ДатаНачала, ТекДанные.ВремяС);
	Взаимодействия.Сортировать("ПлановаяДата Убыв");

КонецПроцедуры

&НаСервере
// Функция возвращает перечень реквизитов таблицы Взаимодействия.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура - Перечень имен реквизитов.
//
Функция ПолучитьРеквизитыТаблицыВзаимодействий()
	РеквизитыТаблицы = ПолучитьРеквизиты("Взаимодействия");
	СтруктураРеквизитов = Новый Структура();
	Для Каждого Реквизит Из РеквизитыТаблицы Цикл
		СтруктураРеквизитов.Вставить(Реквизит.Имя);
	КонецЦикла;
	Возврат СтруктураРеквизитов;
КонецФункции

&НаКлиенте
Процедура ВзаимодействияДатаНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.Взаимодействия.ТекущаяСтрока;
	СтруктураПараметров = Новый Структура();
	
	// Так как с таблицей значений есть проблемы при передаче с клиента на сервер и обратно,
	// создадим массив структур, который и передадим вместо таблицы.
	МассивСтрок = Новый Массив();
	РеквизитыТаблицы = ПолучитьРеквизитыТаблицыВзаимодействий();
	Для Каждого СтрокаТаблицы Из Взаимодействия Цикл
		// Текущую строку не передаем
		Если Взаимодействия.НайтиПоИдентификатору(ТекСтрока) = СтрокаТаблицы Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтроки = Новый Структура();
		
		Для Каждого ТекКолонка Из РеквизитыТаблицы Цикл
			СтруктураСтроки.Вставить(ТекКолонка.Ключ, СтрокаТаблицы[ТекКолонка.Ключ]);
		КонецЦикла;
		
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	СтруктураПараметров.Вставить("МассивСтрок", МассивСтрок);
	
	СтруктураПараметров.Вставить("Интерес", Объект.Ссылка);
	
	ДатаВСтроке = Взаимодействия.НайтиПоИдентификатору(ТекСтрока).ПлановаяДата;
	Если ЗначениеЗаполнено(ДатаВСтроке) Тогда
		СтруктураПараметров.Вставить("ДатаПоУмолчанию", ДатаВСтроке);
	КонецЕсли;
	
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(Объект, Элемент, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияДатаНачалаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура();
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияОбработкаВыбора(Объект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияВремяСПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	ЗаписатьДатуНачалаВзаимодействия(ТекДанные);

КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияВремяПоПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	ЗаписатьПлановуюДатуОкончанияВзаимодействия(ТекДанные);

КонецПроцедуры

&НаСервере
// Функция формирует список рабочих часов с учетом настроек пользователя от начала рабочего дня 
// до окончания с интервалом в полчаса.
//
// Параметры:
// 	Время - Дата
//
// Возвращаемое значение:
//	СписокЧасов - СписокЗначений
Функция ВыбратьВремяИзСписка(Знач СтароеЗначениеВСписке)
	
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСписокРабочегоВремениПользователя(Объект.Исполнитель);
	
КонецФункции

&НаСервере
Функция ПолучитьБаллыПодразделения()
	Возврат Объект.Исполнитель.Подразделение.CRM_МаксимальноеКоличествоБалловВДень
КонецФункции	

&НаКлиенте
Процедура ПересчитатьБаллы(ТекДанные)
	БаллыМакс = ПолучитьБаллыПодразделения();
	ТекДанные.Баллы = Мин(БаллыМакс, Цел(БаллыМакс/28800*(ТекДанные.ВремяПо - ТекДанные.ВремяС)));
КонецПроцедуры	

&НаКлиенте
Процедура ВзаимодействияВремяСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если Элемент.Имя = "ВзаимодействияВремяС" Тогда
		СписокЧасов = ВыбратьВремяИзСписка(ТекДанные.ВремяС);
	Иначе
		СписокЧасов = ВыбратьВремяИзСписка(ТекДанные.ВремяПо);
	КонецЕсли;	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("ТекДанные", ТекДанные);
	Дополнительно.Вставить("Имя", Элемент.Имя);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремениВзаимодействия", ЭтотОбъект, Дополнительно);
	ПоказатьВыборИзСписка(Оп, СписокЧасов, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияРезультатПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если Не ПустаяСтрока(ТекДанные.Результат) Тогда
		ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено");
		ТекДанные.ДатаЗавершенияВзаимодействия = ТекущаяДата();
		ТекДанные.ЗавершившийПользователь = ТекущийПользователь();
		ТекДанные.Изменено = Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияПередНачаломИзменения(Элемент, Отказ)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено") И НЕ ТекДанные.Изменено Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантВыбораПериодаПриИзменении(Элемент)
	ПолучитьСрокОповещенияПоВарианту();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияРеквизиты(ПараметрыВозврата, Дополнительно) Экспорт
	Если ТипЗнч(ПараметрыВозврата) = Тип("Структура") Тогда
		Объект.CRM_КонтактноеЛицо = ПараметрыВозврата.КонтактноеЛицо;
		Объект.CRM_Партнер = ПараметрыВозврата.Партнер;
		Объект.CRM_Проект = ПараметрыВозврата.Проект;
		Объект.CRM_Этап = ПараметрыВозврата.Этап;
		Объект.CRM_ПоказатьАвтора = ПараметрыВозврата.ПоказатьАвтора;
		Объект.CRM_ПоказатьДатуНачала = ПараметрыВозврата.ПоказатьДатуНачала;
		
		УстановитьВидимостьЭлементов();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФормуРеквизитов(Команда)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Партнер", Объект.CRM_Партнер);
	СтруктураПараметров.Вставить("КонтактноеЛицо", Объект.CRM_КонтактноеЛицо);
	СтруктураПараметров.Вставить("Проект", Объект.CRM_Проект);
	СтруктураПараметров.Вставить("Этап", Объект.CRM_Этап);
	СтруктураПараметров.Вставить("ПоказатьАвтора", Объект.CRM_ПоказатьАвтора);
	СтруктураПараметров.Вставить("ПоказатьДатуНачала", Объект.CRM_ПоказатьДатуНачала);
	
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияРеквизиты", ЭтотОбъект);
	
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаРеквизитовЗадачи", СтруктураПараметров, ЭтотОбъект,, ,, ОП, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура CRM_КонтактноеЛицоПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура CRM_ЭтапПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивEmail(Контакт)
	МассивEmail = Новый Массив;
	Для Каждого ЭлементКИ Из Контакт.КонтактнаяИнформация Цикл
		Если ЭлементКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СтруктураКИ = Новый Структура;
			СтруктураКИ.Вставить("Значение",		ЭлементКИ.Представление); 
			СтруктураКИ.Вставить("Представление",	ЭлементКИ.Вид.Наименование + ": " + ЭлементКИ.Представление);
			СтруктураКИ.Вставить("Контакт", Контакт);
			Если ЭлементКИ.CRM_ОсновнойДляСвязи Тогда
				МассивEmail.Очистить();
				МассивEmail.Вставить(0, СтруктураКИ);
				Прервать;
			Иначе
				МассивEmail.Добавить(СтруктураКИ);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	Возврат МассивEmail;
КонецФункции // ПолучитьМассивEmail().


&НаКлиенте
Процедура ОбработкаВыбораEmail(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	СписокАдресов = Новый СписокЗначений;
	СписокАдресов.Добавить(РезультатВыбора.Значение, РезультатВыбора.Представление);
	
	ПараметрыФормы	= Новый Структура;
	ПараметрыФормы.Вставить("Основание",		Объект.Ссылка);
	ПараметрыФормы.Вставить("ДанныеЗаполнения",	Объект.Ссылка);
	ПараметрыФормы.Вставить("Кому",				СписокАдресов);
	ПараметрыФормы.Вставить("ТолькоКому",		Истина);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры // ОбработкаВыбораТелефона()	

&НаКлиенте
// Процедура - обработчик команды формы "ОтправитьEmailКлиент".
//
Процедура ОтправитьEmailКлиент(Команда)

	ПараметрыФормы = Новый Структура("Основание",Объект.Ссылка);
	ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
	Если НЕ (Элементы.Взаимодействия.ТекущиеДанные = Неопределено) Тогда
		ПараметрыФормы.Вставить("Взаимодействие", Элементы.Взаимодействия.ТекущиеДанные.Ссылка);
	КонецЕсли;	
	СписокEmail	= Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.CRM_КонтактноеЛицо)  Тогда
		Контакт = Объект.CRM_КонтактноеЛицо;
	ИначеЕсли ЗначениеЗаполнено(Объект.CRM_Партнер)  Тогда	
		Контакт = Объект.CRM_Партнер;
	Иначе
		Контакт = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	КонецЕсли;
	
	
	
	
	МассивEmail = ПолучитьМассивEmail(Контакт);
	
	Для Каждого ЭлементМассива Из МассивEmail Цикл
		СписокEmail.Добавить(ЭлементМассива.Контакт, ЭлементМассива.Значение);
	КонецЦикла;	
	ДополнительныеПараметры	= Новый Структура;
	Если СписокEmail.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан Email контактного лица или потенциального клиента'"));
	ИначеЕсли СписокEmail.Количество() = 1 Тогда
		ПараметрыФормы.Вставить("Кому", СписокEmail);
	//Иначе
	//	ОповещениеВыбораEmail	= Новый ОписаниеОповещения("ОбработкаВыбораEmail", ЭтотОбъект, ДополнительныеПараметры);
	//	ПоказатьВыборИзМеню(ОповещениеВыбораEmail, СписокEmail, Элементы.ВзаимодействияОтправитьEmailКлиент);
	//	Возврат;
	КонецЕсли;
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОткрытияФормыНастроек(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("ОбщаяФорма.sms4bФормаНастроек");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТелефон(КонтактноеЛицо)
	
	Если Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ТекВид Из КонтактноеЛицо.КонтактнаяИнформация Цикл
		Если ТекВид.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			Возврат ТекВид.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


&НаКлиенте
// Процедура - обработчик команды формы "ОтправитьСМС".
//
Процедура ОтправитьСМС(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.CRM_КонтактноеЛицо) Тогда
		Возврат;
	КонецЕсли;
	КИ = ПолучитьТелефон(Объект.CRM_КонтактноеЛицо);
	Если КИ = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона'"));
		Возврат;
	ИначеЕсли НЕ ОтправкаSMSЧерезSMS4B.ИспользоватьSMS4B() Тогда
		CRM_ОбщегоНазначенияКлиент.ОткрытьФормуОшибкиПодключения("СМС");
		Возврат;
	ИначеЕсли НЕ ОтправкаSMSЧерезSMS4B.НастройкаОтправкиSMSВыполнена() Тогда
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОткрытияФормыНастроек", ЭтотОбъект);
		ПоказатьВопрос(ОП, "Отправка SMS невозможна так как не установлены параметры подключения.
						|Открыть форму настроек?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	Структура = Новый Структура();
	Структура.Вставить("Ссылка",	Объект.CRM_КонтактноеЛицо);
	Структура.Вставить("Телефон",	ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(КИ));
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", Структура);
	ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);	
	Если НЕ (Элементы.Взаимодействия.ТекущиеДанные = Неопределено) Тогда
		ПараметрыФормы.Вставить("Взаимодействие", Элементы.Взаимодействия.ТекущиеДанные.Ссылка);
	КонецЕсли;	
	ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры // ОтправитьСМС()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//Убираем личную задачу, если есть взаимодействия
	Если Объект.CRM_Личная Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_Взаимодействие.Ссылка
		|ИЗ
		|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
		|ГДЕ
		|	CRM_Взаимодействие.ДокументОснование = &ДокументОснование
		|	И CRM_Взаимодействие.СтатусВзаимодействия = &СтатусВзаимодействия";
		Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
		Запрос.УстановитьПараметр("СтатусВзаимодействия", Справочники.CRM_СостоянияСобытий.Запланировано);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
			НаборРегистра.Отбор.Объект.Установить(Объект.Ссылка);
			НаборРегистра.Очистить();
			НаборРегистра.Записать();
			
		КонецЕсли;
		Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") И НЕ Объект.Предмет.CRM_СкрытьВАРМ Тогда
			Если ЗначениеЗаполнено(Объект.Предмет) И РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Объект.Предмет) Тогда
				РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Объект.Предмет, Справочники.CRM_СостоянияЛидов.Сконвертирован);
			КонецЕсли;
			ПредметОбъект = Объект.Предмет.ПолучитьОбъект();
			ПредметОбъект.CRM_СкрытьВАРМ = Истина;
			ПредметОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	Элементы.Перенаправить.Доступность = НЕ Объект.Ссылка.Пустая();
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеВложений()
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru = 'Задача не записана. Добавление файлов невозможно!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);	
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтотОбъект,
	             Ложь,
	             Неопределено);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

НеПроверятьОповещения = Ложь;
ЗакрыватьПослеЗаписи = Ложь;
