
// +CRM

&НаКлиенте
Перем КэшСвойстваДинамическогоСписка;
&НаКлиенте
Перем ТекущаяЗадачаСсылка;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ПолучитьСвойстваДинамическогоСпискаСервер()
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСвойстваДинамическогоСписка(	ЭтотОбъект,
																			"Список",
																			"Задача.ЗадачаИсполнителя",
																			Неопределено,
																			Неопределено,
																			Неопределено,
																			"ПодменюВидСписка",
																			"ВидСпискаИдентификаторТекущейНастройки",
																			"Подключаемый_КомандаВидСписка");
	//
КонецФункции

&НаКлиенте
Функция ПолучитьСвойстваДинамическогоСпискаКлиент()
	Если ТипЗнч(КэшСвойстваДинамическогоСписка) <> Тип("Структура") Тогда
		КэшСвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСервер();
	КонецЕсли;
	Возврат КэшСвойстваДинамическогоСписка;
КонецФункции

// -CRM

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем ТекстЗаголовкаФормы;
	Если Параметры.Свойство("ЗаголовокФормы", ТекстЗаголовкаФормы) И НЕ ПустаяСтрока(ТекстЗаголовкаФормы) Тогда
		Заголовок = ТекстЗаголовкаФормы;
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("БизнесПроцесс") Тогда
		СтрокаБизнесПроцесса = Параметры.БизнесПроцесс;
		СтрокаЗадачи = Параметры.Задача;
		Элементы.ГруппаЗаголовок.Видимость = Истина;
	КонецЕсли;
		
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.ДатаНачала.Формат		= ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ=dd.MM.yyyy HH:mm", "ДФ=dd.MM.yyyy");
	Элементы.СрокИсполнения.Формат	= ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ=dd.MM.yyyy HH:mm", "ДФ=dd.MM.yyyy");
	Элементы.ДатаИсполнения.Формат	= ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ=dd.MM.yyyy HH:mm", "ДФ=dd.MM.yyyy");
	
	Список.Параметры.УстановитьЗначениеПараметра("Исполнитель", Пользователи.ТекущийПользователь());
	Список.Параметры.УстановитьЗначениеПараметра("ПарамТекущаяДата", КонецДня(ТекущаяДатаСеанса()));
	Список.Параметры.УстановитьЗначениеПараметра("ПарамПустаяДата", Дата("00010101"));
	
	// Оформление списка
	//СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСервер();
	//CRM_ОбщегоНазначенияСервер.ПользовательскиеНастройкиСпискаПриСозданииНаСервере(ЭтаФорма, СвойстваДинамическогоСписка);
	
	CRM_БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(Список.УсловноеОформление);
	
	Если Параметры.Свойство("ЗначениеОтбора") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "БизнесПроцесс", Параметры.ЗначениеОтбора);
	КонецЕсли;
	
	ПоказыватьЗадачиСписокВыбора.Добавить(2, НСтр("ru = 'Не выполненные'"));
	ПоказыватьЗадачиСписокВыбора.Добавить(1, НСтр("ru = 'Выполненные'"));
	ПоказыватьЗадачиСписокВыбора.Добавить(0, НСтр("ru = 'Все'"));
	ПоказыватьЗадачи	= 2;
	ПоИсполнителю		= Справочники.Пользователи.ПустаяСсылка();
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// +CRM
	//Если ИмяСобытия = "Запись_ЗадачаИсполнителя" Тогда
	Если ИмяСобытия = "ЗадачаВыполнена" ИЛИ ИмяСобытия = "ЗадачаИзменена" Тогда
	// -CRM
		Элементы.Список.Обновить();
 	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПоказыватьЗадачи	= Настройки.Получить("ПоказыватьЗадачи");
	ПоИсполнителю		= Настройки.Получить("ПоИсполнителю");
	ПоАвтору			= Настройки.Получить("ПоАвтору");
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ИмяНастройкиОтборов = ?(Элементы.ГруппаЗаголовок.Видимость, "ФормаСпискаБП", "ФормаСписка");
	СохранитьНастройкиНаСервере(ИмяНастройкиОтборов);
КонецПроцедуры

#Область ПроцедурыОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПоИсполнителюПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ПоАвторуПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗадачиПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ПринятьЗадачиКИсполнению(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачКИсполнению(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, 
		Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	CRM_БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	CRM_БизнесПроцессыИЗадачиКлиент.СписокЗадачПередНачаломИзменения(Элемент, Отказ);
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтбор()
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("ПоАвтору", ПоАвтору);
	ПараметрыОтбора.Вставить("ПоИсполнителю", ПоИсполнителю);
	ПараметрыОтбора.Вставить("ПоказыватьЗадачи", ПоказыватьЗадачи);
	
	УстановитьОтборСписка(Список, ПараметрыОтбора);
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура УстановитьОтборСписка(Список, ПараметрыОтбора)
	
	Если ПараметрыОтбора["ПоАвтору"].Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Автор");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.Отбор, "Автор", ПараметрыОтбора["ПоАвтору"]);
	КонецЕсли;
	
	Если ПараметрыОтбора["ПоИсполнителю"].Пустая() Тогда
		Список.Параметры.УстановитьЗначениеПараметра("Исполнитель", NULL);
	Иначе	
		Список.Параметры.УстановитьЗначениеПараметра("Исполнитель", ПараметрыОтбора["ПоИсполнителю"]);
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Выполнена");
	Если ПараметрыОтбора["ПоказыватьЗадачи"] <> 0 Тогда 
		
		Если ПараметрыОтбора["ПоказыватьЗадачи"] = 1 Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				Список.Отбор, "Выполнена", Истина);
		КонецЕсли;
		
		Если ПараметрыОтбора["ПоказыватьЗадачи"] = 2 Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				Список.Отбор, "Выполнена", Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере(ИмяНастроек)
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("ПоАвтору", ПоАвтору);
	ПараметрыОтбора.Вставить("ПоИсполнителю", ПоИсполнителю);
	ПараметрыОтбора.Вставить("ПоказыватьЗадачи", ПоказыватьЗадачи);
	ХранилищеСистемныхНастроек.Сохранить("Задачи.ЗадачаИсполнителя.Формы.CRM_ЗадачиПоБизнесПроцессу", ИмяНастроек, ПараметрыОтбора);
КонецПроцедуры

// +CRM

&НаСервере
Функция СформироватьОписаниеБизнесПроцесса(Задача)
	
	СписокРеквизитов = Новый СписокЗначений;
	//СписокРеквизитов.Добавить("Проект"					,НСтр("ru = 'Процесс:'"));
	СписокРеквизитов.Добавить("Важность"					,НСтр("ru = 'Важность:'"));
	СписокРеквизитов.Добавить("ДатаСтарта"					,НСтр("ru = 'Дата старта:'"));
	СписокРеквизитов.Добавить("Организация"					,НСтр("ru = 'Организация:'"));
	СписокРеквизитов.Добавить("Партнер"						,НСтр("ru = 'Партнер:'"));
	СписокРеквизитов.Добавить("КонтактноеЛицо"				,НСтр("ru = 'Контактное лицо:'"));
	СписокРеквизитов.Добавить("Предмет"						,НСтр("ru = 'Предмет:'"));
	
	СписокРеквизитов_1 = Новый СписокЗначений;
	СписокРеквизитов_1.Добавить("Автор"						,НСтр("ru = 'Автор:'"));
	СписокРеквизитов_1.Добавить("Дата"						,НСтр("ru = 'Дата создания:'"));
	СписокРеквизитов_1.Добавить("ПланируемаяДатаЗавершения"	,НСтр("ru = 'Планируемая дата завершения:'"));
	СписокРеквизитов_1.Добавить("Подразделение"				,НСтр("ru = 'Подразделение:'"));
	СписокРеквизитов_1.Добавить("Проект"					,НСтр("ru = 'Проект:'"));
	//СписокРеквизитов_1.Добавить("Ответственный"				,НСтр("ru = 'Ответственный:'"));
	СписокРеквизитов_1.Добавить("Сумма"						,НСтр("ru = 'Сумма:'"));
		
	ТаблицаРеквизитов = "
	|<TABLE border=0 cellSpacing=1 cellPadding=1 width=""100%"">
	|<TBODY>
	|<TR>
	|<TD vAlign=top>
	|<TABLE border=1 cellSpacing=1 cellPadding=1 width=""100%"">
	|<TBODY>";
	
	Для Каждого ЭлементСписка Из СписокРеквизитов Цикл
		Если НЕ ЗначениеЗаполнено(Задача.БизнесПроцесс[ЭлементСписка.Значение]) Тогда Продолжить; КонецЕсли;
		
		Если ТипЗнч(Задача.БизнесПроцесс[ЭлементСписка.Значение]) = Тип("Дата") Тогда
			ЗначениеСтрокой = Формат(Задача.БизнесПроцесс[ЭлементСписка.Значение],"ДФ='дд.ММ.гггг ЧЧ:мм'");
		ИначеЕсли ТипЗнч(Задача.БизнесПроцесс[ЭлементСписка.Значение]) = Тип("Число") Тогда
			ЗначениеСтрокой = Формат(Задача.БизнесПроцесс[ЭлементСписка.Значение],"ЧЦ=15; ЧДЦ=2; ЧН=00");
		Иначе
			Попытка
				Если (Найти(Задача.БизнесПроцесс[ЭлементСписка.Значение].Метаданные().ПолноеИмя(),"Справочник.") > 0)
				ИЛИ (Найти(Задача.БизнесПроцесс[ЭлементСписка.Значение].Метаданные().ПолноеИмя(),"Документ.") > 0) Тогда
					
					ПредставлениеОбъекта = Строка(Задача.БизнесПроцесс[ЭлементСписка.Значение]);
					НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Задача.БизнесПроцесс[ЭлементСписка.Значение]);
					ЗначениеСтрокой = "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта+"</a>";
					
				Иначе
					ЗначениеСтрокой = СокрЛП(Строка(Задача.БизнесПроцесс[ЭлементСписка.Значение]));
				КонецЕсли;
			Исключение
				ЗначениеСтрокой = СокрЛП(Строка(Задача.БизнесПроцесс[ЭлементСписка.Значение]));
			КонецПопытки;
		КонецЕсли;
		
		ТаблицаРеквизитов = ТаблицаРеквизитов + "
		|<TR>
		|<TD><span style='font-size: 10pt;'><STRONG>" + ЭлементСписка.Представление+"</STRONG></span></TD>
		|<TD><span style='font-size: 10pt;'>" + ЗначениеСтрокой + "</span></TD></TR>";
	КонецЦикла;
	
	ТаблицаРеквизитов = ТаблицаРеквизитов + "
	|</TBODY></TABLE>
	|<TD vAlign=top>
	|<TABLE border=1 cellSpacing=1 cellPadding=1 width=""100%"">
	|<TBODY>";
	
	Для Каждого ЭлементСписка Из СписокРеквизитов_1 Цикл
		Если НЕ ЗначениеЗаполнено(Задача.БизнесПроцесс[ЭлементСписка.Значение]) Тогда Продолжить; КонецЕсли;
		
		Если ТипЗнч(Задача.БизнесПроцесс[ЭлементСписка.Значение]) = Тип("Дата") Тогда
			ЗначениеСтрокой = Формат(Задача.БизнесПроцесс[ЭлементСписка.Значение],"ДФ='дд.ММ.гггг ЧЧ:мм'");
		ИначеЕсли ТипЗнч(Задача.БизнесПроцесс[ЭлементСписка.Значение]) = Тип("Число") Тогда
			ЗначениеСтрокой = Формат(Задача.БизнесПроцесс[ЭлементСписка.Значение],"ЧЦ=15; ЧДЦ=2; ЧН=00");
		Иначе
			Попытка
				Если (Найти(Задача.БизнесПроцесс[ЭлементСписка.Значение].Метаданные().ПолноеИмя(),"Справочник.") > 0)
				ИЛИ (Найти(Задача.БизнесПроцесс[ЭлементСписка.Значение].Метаданные().ПолноеИмя(),"Документ.") > 0) Тогда
					
					ПредставлениеОбъекта = Строка(Задача.БизнесПроцесс[ЭлементСписка.Значение]);
					НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Задача.БизнесПроцесс[ЭлементСписка.Значение]);
					ЗначениеСтрокой = "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта+"</a>";
					
				Иначе
					ЗначениеСтрокой = СокрЛП(Строка(Задача.БизнесПроцесс[ЭлементСписка.Значение]));
				КонецЕсли;
			Исключение
				ЗначениеСтрокой = СокрЛП(Строка(Задача.БизнесПроцесс[ЭлементСписка.Значение]));
			КонецПопытки;
		КонецЕсли;
		
		ТаблицаРеквизитов = ТаблицаРеквизитов + "
		|<TR>
		|<TD><span style='font-size: 10pt;'><STRONG>" + ЭлементСписка.Представление+"</STRONG></span></TD>
		|<TD><span style='font-size: 10pt;'>" + ЗначениеСтрокой + "</span></TD></TR>";
	КонецЦикла;
	
	ТаблицаРеквизитов = ТаблицаРеквизитов + "
	|</TBODY></TABLE>
	|</TD></TR>
	|</TBODY></TABLE>";
	
	ОписаниеБизнесПроцесса = "
	|<P><span style='font-size: 10pt;'>" + Задача.БизнесПроцесс.Описание + "</span></P>";
	
	Возврат ТаблицаРеквизитов + ОписаниеБизнесПроцесса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОбъектыПоЗадаче(Задача)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОбъектыПоБизнесПроцессам.Объект,
	|	CRM_ОбъектыПоБизнесПроцессам.ДатаРегистрации КАК ДатаРегистрации
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыПоБизнесПроцессам КАК CRM_ОбъектыПоБизнесПроцессам
	|ГДЕ
	|	CRM_ОбъектыПоБизнесПроцессам.БизнесПроцесс = &БизнесПроцесс
	|	И CRM_ОбъектыПоБизнесПроцессам.Задача = &Задача
	|	И CRM_ОбъектыПоБизнесПроцессам.ТочкаМаршрута = &ТочкаМаршрута
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистрации";
	Запрос.УстановитьПараметр("БизнесПроцесс"	,Задача.БизнесПроцесс);
	Запрос.УстановитьПараметр("Задача"			,Задача);
	Запрос.УстановитьПараметр("ТочкаМаршрута"	,Задача.CRM_ТочкаМаршрута);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция СформироватьИсториюБизнесПроцесса(Задача)
	
	ИсторияВыполнения = "
	|<P><span style='font-size: 10pt;'><span style='font-size: 10pt;'><EM><STRONG>" + НСтр("ru = 'История выполнения'")+"</STRONG></EM></span></P>";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка,
	               |	ВЫБОР
	               |		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА (НЕ ЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка))
	               |						ТОГДА ЗадачаИсполнителя.РольИсполнителя
	               |					ИНАЧЕ ЗадачаИсполнителя.Исполнитель
	               |				КОНЕЦ
	               |		ИНАЧЕ ЗадачаИсполнителя.Исполнитель
	               |	КОНЕЦ КАК Исполнитель,
	               |	ЗадачаИсполнителя.РезультатВыполнения,
	               |	ЗадачаИсполнителя.Дата КАК Дата,
	               |	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
	               |	ЗадачаИсполнителя.CRM_ТочкаМаршрута КАК CRM_ТочкаМаршрута,
	               |	ЗадачаИсполнителя.CRM_Переадресована,
	               |	ЗадачаИсполнителя.CRM_ВариантВыполненияСтрокой,
	               |	ЗадачаИсполнителя.Выполнена,
	               |	ЗадачаИсполнителя.CRM_СостояниеСтрокой,
	               |	ЗадачаИсполнителя.Описание,
	               |	ВЫБОР
	               |		КОГДА ЗадачаИсполнителя.Выполнена
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Флаг,
	               |	ЗадачаИсполнителя.CRM_Итерация КАК CRM_Итерация,
	               |	ЗадачаИсполнителя.CRM_ТочкаМаршрута.РеквизитДопУпорядочивания КАК CRM_ТочкаМаршрутаРеквизитДопУпорядочивания
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_Итерация,
	               |	CRM_ТочкаМаршрутаРеквизитДопУпорядочивания,
	               |	CRM_ТочкаМаршрута,
	               |	Флаг,
	               |	ДатаИсполнения";
	
	Запрос.УстановитьПараметр("БизнесПроцесс",Задача.БизнесПроцесс);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТабОбъектов = ПолучитьОбъектыПоЗадаче(Выборка.Ссылка);
		СтрокаОбъектовПоЗадаче = "";
		Если ТабОбъектов.Количество() > 0 Тогда
			СтрокаОбъектовПоЗадаче = "
			|<P><span style='font-size: 10pt;'><EM>&nbsp&nbsp&nbsp" + НСтр("ru = 'Введенные на этапе объекты:'")+"</EM></span></P>";
		КонецЕсли;
		
		Для Каждого СтрокаТаб Из ТабОбъектов Цикл
			Попытка
				Если (Найти(СтрокаТаб.Объект.Метаданные().ПолноеИмя(),"Справочник.") > 0)
				ИЛИ (Найти(СтрокаТаб.Объект.Метаданные().ПолноеИмя(),"Документ.") > 0) Тогда
					
					ПредставлениеОбъекта = Строка(СтрокаТаб.Объект);
					НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СтрокаТаб.Объект);
					ЗначениеСтрокой = "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта+"</a>";
					
				Иначе
					ЗначениеСтрокой = СокрЛП(Строка(СтрокаТаб.Объект));
				КонецЕсли;
			Исключение
				ЗначениеСтрокой = СокрЛП(Строка(СтрокаТаб.Объект));
			КонецПопытки;
			
			СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
			|<P><span style='font-size: 10pt;'>&nbsp&nbsp" + ЗначениеСтрокой + "</P>";
			
		КонецЦикла;
		
		Если Выборка.Выполнена Тогда
			ИсторияВыполнения = ИсторияВыполнения + "
			|<P><span style='font-size: 10pt;'>" + Формат(Выборка.ДатаИсполнения,"ДФ='дд.ММ.гггг ЧЧ:мм'") + " / <STRONG>" + Выборка.CRM_ТочкаМаршрута + "</STRONG> / " + Выборка.Исполнитель + " / " + СокрЛП(Выборка.CRM_СостояниеСтрокой) + "</span></P>";
			Если НЕ СтрокаОбъектовПоЗадаче = "" Тогда
				ИсторияВыполнения = ИсторияВыполнения + СтрокаОбъектовПоЗадаче;
			КонецЕсли;
			ИсторияВыполнения = ИсторияВыполнения + "
			|<P><span style='font-size: 10pt;'>" + СокрЛП(Выборка.РезультатВыполнения) + "</P>";
		Иначе
			ИсторияВыполнения = ИсторияВыполнения + "
			|<P><span style='font-size: 10pt;'>" + Формат(Выборка.Дата,"ДФ='дд.ММ.гггг ЧЧ:мм'") + " / <STRONG>" + Выборка.CRM_ТочкаМаршрута + "</STRONG> / " + ?(ТипЗнч(Выборка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей"),БизнесПроцессыИЗадачиСервер.РольСтрокой(Выборка.Исполнитель),Выборка.Исполнитель) + " / " + СокрЛП(Выборка.CRM_СостояниеСтрокой) + "</span></P>";
			Если НЕ СтрокаОбъектовПоЗадаче = "" Тогда
				ИсторияВыполнения = ИсторияВыполнения + СтрокаОбъектовПоЗадаче;
			КонецЕсли;
			ИсторияВыполнения = ИсторияВыполнения + "
			|<P><span style='color: #1955ae; font-size: 10pt;'"">" + СокрЛП(Выборка.Описание) + "</span></P>";
		КонецЕсли;
	КонецЦикла;
	
	//ИсторияВыполнения = ИсторияВыполнения + ?(ИсторияВыполнения = "","","
	//|<P>
	//|<HR>
	//|<P></P>");
	
	Возврат ИсторияВыполнения;
	
КонецФункции

&НаСервере
Функция СформироватьОписаниеЗадачи(Задача)
	
	Тип = ТипЗнч(Задача);
	ТипСтрокой = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой(Тип);
	Если ТипСтрокой = Неопределено Тогда
		
		Описание =
		"<html>
		|<head>
		|<meta http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8"">
		|<title></title>
		|</head>
		|<body>
		|</body>
		|</html>";
		Возврат Описание;
		
	КонецЕсли;
	
	Стр = СокрЛП(Задача.Описание);
	Стр = СтрЗаменить(Стр, Символы.ПС, "</BR>");
	Стр = СтрЗаменить(Стр, Символы.Таб, "&nbsp;&nbsp;&nbsp;");
	
	Если НЕ Задача.CRM_Личная Тогда
		ОписаниеБизнесПроцесса = ?(Задача.БизнесПроцесс.КартаМаршрута.ОписаниеБизнесПроцессаВСодержаниеЗадачи,СформироватьОписаниеБизнесПроцесса(Задача),"");
		ИсторияБизнесПроцесса = ?(Задача.БизнесПроцесс.КартаМаршрута.ИсторияБизнесПроцессаВСодержаниеЗадачи,СформироватьИсториюБизнесПроцесса(Задача),"");
	Иначе
		ОписаниеБизнесПроцесса = "";
		ИсторияБизнесПроцесса = "";
	КонецЕсли;
	
	ОписаниеТочкиМаршрута = "
	|<html>
	|<head>
	|<meta http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8"">
	|<title></title>
	|</head>
	|<body>
	|" + ОписаниеБизнесПроцесса + ИсторияБизнесПроцесса;
	
	ИтоговаяСтрока = ОписаниеТочкиМаршрута;
	
	ИтоговаяСтрока = ИтоговаяСтрока + "
	|</FONT>
	|</body>
	|</html>";
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

&НаСервере
Процедура СписокПриАктивизацииСтрокиНаСервере(ТекущаяСтрокаСписка)
	
	Если ТипЗнч(ТекущаяСтрокаСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Элементы.ПринятьКИсполнению.Доступность											= Ложь;
		Элементы.СписокКонтекстноеМенюПринятьКИсполнению.Доступность					= Ложь;
		Элементы.СписокКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность			= Ложь;
		
		ПолеОтображениеСодержания = "";
	Иначе
		Если НЕ Пользователи.РолиДоступны("ПолныеПрава") Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрокаСписка.РольИсполнителя) И НЕ ЗначениеЗаполнено(ТекущаяСтрокаСписка.Исполнитель) Тогда
				СписокВозможныхИсполнителей														= CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРолиСАдресацией(ТекущаяСтрокаСписка.РольИсполнителя,Неопределено);
				Элементы.ПринятьКИсполнению.Доступность											= (СписокВозможныхИсполнителей.НайтиПоЗначению(Пользователи.ТекущийПользователь()) <> Неопределено);
				Элементы.СписокКонтекстноеМенюПринятьКИсполнению.Доступность					= (СписокВозможныхИсполнителей.НайтиПоЗначению(Пользователи.ТекущийПользователь()) <> Неопределено);
				Элементы.СписокКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность			= (СписокВозможныхИсполнителей.НайтиПоЗначению(Пользователи.ТекущийПользователь()) <> Неопределено);
			Иначе
				Элементы.ПринятьКИсполнению.Доступность											= (ТекущаяСтрокаСписка.Исполнитель = Пользователи.ТекущийПользователь());
				Элементы.СписокКонтекстноеМенюПринятьКИсполнению.Доступность					= (ТекущаяСтрокаСписка.Исполнитель = Пользователи.ТекущийПользователь());
				Элементы.СписокКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность			= (ТекущаяСтрокаСписка.Исполнитель = Пользователи.ТекущийПользователь());
			КонецЕсли;
		Иначе
			Элементы.ПринятьКИсполнению.Доступность											= Истина;
			Элементы.СписокКонтекстноеМенюПринятьКИсполнению.Доступность					= Истина;
			Элементы.СписокКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность			= Истина;
		КонецЕсли;
		
		Попытка
			ПолеОтображениеСодержания = CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(ТекущаяСтрокаСписка);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПриАктивизацииСтроки()
	
	СписокПриАктивизацииСтрокиНаСервере(Элементы.Список.ТекущаяСтрока);
	
	ДоступностьНовая = (Элементы.Список.ВыделенныеСтроки.Количество() = 1);
	Если ДоступностьНовая <> Элементы.ФормаЗадачаЗадачаИсполнителяВыполнено.Доступность Тогда
		Элементы.ФормаЗадачаЗадачаИсполнителяВыполнено.Доступность = ДоступностьНовая;
	КонецЕсли;
	
	Если ТекущаяЗадачаСсылка <> Элементы.Список.ТекущаяСтрока Тогда
		ТекущаяЗадачаСсылка = Элементы.Список.ТекущаяСтрока;
		ПолеОтображениеСодержания = СформироватьОписаниеЗадачи(Элементы.Список.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Список.ТекущаяСтрока) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СписокПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДействияКомандныхПанелейФормы

&НаСервере
Процедура КомандаВидСпискаСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки)
	CRM_ОбщегоНазначенияКлиентСервер.ОбработкаКомандыПользовательскихНастроекДинамическогоСписка(ЭтотОбъект, СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
	
	CRM_БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(Список.УсловноеОформление);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидСписка(Команда)
	СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаКлиент();
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаВидСпискаЗавершение", ЭтотОбъект, СвойстваДинамическогоСписка);
	CRM_ОбщегоНазначенияКлиент.ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки(ЭтотОбъект, СвойстваДинамическогоСписка, Команда, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидСпискаЗавершение(ПризнакИзмененыНастройки, СвойстваДинамическогоСписка) Экспорт
	КомандаВидСпискаСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
КонецПроцедуры

&НаКлиенте
Процедура ПолеОтображениеСодержанияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		Если Найти(ДанныеСобытия.href,"e1cib") > 0 Тогда
			НавСсылка = Сред(ДанныеСобытия.href,Найти(ДанныеСобытия.href,"e1cib"));
			Попытка
				ПерейтиПоНавигационнойСсылке(НавСсылка);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// +Пользовательские настройки.
	ДобавитьПодменюПользовательскихНастроек();
	// -Пользовательские настройки.
КонецПроцедуры

// +CRM

#КонецОбласти

#КонецОбласти

#Область ПользовательскиеНастройки

&НаСервере
Процедура ДобавитьПодменюПользовательскихНастроек()
	CRM_ПользовательскиеНастройкиСервер.УстановитьПользовательскиеНастройки(Список, ИдентификаторПользовательскойНастройки, ИмяФормы+".Список");
	CRM_ПользовательскиеНастройкиСервер.ДобавитьПодменюПользовательскихНастроек(ЭтотОбъект, Список, ИмяФормы+".Список");
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборНастройкиНаСервере(НомерНастройки)
	CRM_ПользовательскиеНастройкиСервер.ОбработатьВыборНастройкиНаСервере(НомерНастройки, Список, ЭтотОбъект, ИмяФормы+".Список");	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьВыборНастройки(Команда)
	НомерНастройкиСтрока = СтрЗаменить(Команда.Имя, "ОбработатьВыборНастройки_", "");
	НомерНастройки = Число(НомерНастройкиСтрока);
	 ОбработатьВыборНастройкиНаСервере(НомерНастройки);	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущиеНастройкиНаСервере(ИмяНастройки, ДополнительныеПараметры) Экспорт
	Если НЕ ИмяНастройки = Неопределено Тогда
		CRM_ПользовательскиеНастройкиСервер.СохранитьТекущиеНастройкиНаСервере(ИмяНастройки, Список, ЭтотОбъект, ИмяФормы+".Список");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущиеНастройки(Команда)
	ПараметрыОповещения = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("СохранитьТекущиеНастройкиНаСервере", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВводСтроки(Оповещение, "", "Введите название настройки");		
КонецПроцедуры

&НаСервере
Процедура УдалитьНастройкуНаСервере()
	ПредставлениеНастройки = CRM_ПользовательскиеНастройкиСервер.ПолучитьПредставлениеНастройки(ИдентификаторПользовательскойНастройки, ИмяФормы+".Список");	
	ХранилищеПользовательскихНастроекДинамическихСписков.Удалить(ИмяФормы+".Список", ИдентификаторПользовательскойНастройки, ИмяПользователя()); 
	ИдентификаторПользовательскойНастройки = "Стандартные_Настройки";
	CRM_ПользовательскиеНастройкиСервер.УстановитьПользовательскиеНастройки(Список, ИдентификаторПользовательскойНастройки, ИмяФормы+".Список");
	CRM_ПользовательскиеНастройкиСервер.ДобавитьПодменюПользовательскихНастроек(ЭтотОбъект, Список, ИмяФормы+".Список");
		
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОтветаУдаление(ВариантОтвета, ДополнительныеПараметры) Экспорт
	Если ВариантОтвета = КодВозвратаДиалога.Да Тогда
		УдалитьНастройкуНаСервере();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТекущуюНастройку(Команда)
	Если ИдентификаторПользовательскойНастройки = "Стандартные_Настройки" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нельзя удалить стандартные настройки";
		Сообщение.Сообщить();
	Иначе
		ПараметрыОповещения = Новый Структура;
		Оповещение = Новый ОписаниеОповещения("ОбработкаОтветаУдаление", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(Оповещение, "Вы действительно хотите удалить настройку """+CRM_ПользовательскиеНастройкиСервер.ПолучитьПредставлениеНастройки(ИдентификаторПользовательскойНастройки, ИмяФормы+".Список")+""" ?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти


