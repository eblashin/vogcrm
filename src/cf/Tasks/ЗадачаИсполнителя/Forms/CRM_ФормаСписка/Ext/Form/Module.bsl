
&НаКлиенте
Перем КэшСвойстваДинамическогоСписка;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
Функция ПолучитьСвойстваДинамическогоСпискаСервер()
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСвойстваДинамическогоСписка(	ЭтотОбъект, "Список",
		"Задача.ЗадачаИсполнителя", Неопределено, Неопределено, Неопределено, "ПодменюВидСписка",
		"ВидСпискаИдентификаторТекущейНастройки", "Подключаемый_КомандаВидСписка");
КонецФункции

&НаКлиенте
Функция ПолучитьСвойстваДинамическогоСпискаКлиент()
	Если ТипЗнч(КэшСвойстваДинамическогоСписка) <> Тип("Структура") Тогда
		КэшСвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСервер();
	КонецЕсли;
	Возврат КэшСвойстваДинамическогоСписка;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем ТекстЗаголовкаФормы;
	
	// +Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	Если НЕ CRM_РежимФормЗакладкиСервер.ВосстановлениеФормыПриЗапускеСеанса(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// -Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	
	Если Параметры.Свойство("ЗаголовокФормы", ТекстЗаголовкаФормы) И
		НЕ ПустаяСтрока(ТекстЗаголовкаФормы) Тогда
		Заголовок = ТекстЗаголовкаФормы;
		АвтоЗаголовок = Ложь;
				
	КонецЕсли;
	
	Если Параметры.Свойство("БизнесПроцесс") Тогда
		СтрокаБизнесПроцесса = Параметры.БизнесПроцесс;
		СтрокаЗадачи = Параметры.Задача;
		Элементы.ГруппаЗаголовок.Видимость = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("БлокировкаОкнаВладельца") Тогда
		РежимОткрытияОкна = Параметры.БлокировкаОкнаВладельца;
	КонецЕсли;	
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.ДатаНачала.Формат		= ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ=dd.MM.yyyy HH:mm", "ДФ=dd.MM.yyyy");
	Элементы.СрокИсполнения.Формат	= ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ=dd.MM.yyyy HH:mm", "ДФ=dd.MM.yyyy");
	Элементы.ДатаИсполнения.Формат	= ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ=dd.MM.yyyy HH:mm", "ДФ=dd.MM.yyyy");
	
	Список.Параметры.УстановитьЗначениеПараметра("Исполнитель", Пользователи.ТекущийПользователь());
	Список.Параметры.УстановитьЗначениеПараметра("ПарамТекущаяДата", КонецДня(ТекущаяДатаСеанса()));
	Список.Параметры.УстановитьЗначениеПараметра("ПарамПустаяДата", Дата("00010101"));
	
	// Оформление списка
	//СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСервер();
	//CRM_ОбщегоНазначенияСервер.ПользовательскиеНастройкиСпискаПриСозданииНаСервере(ЭтотОбъект, СвойстваДинамическогоСписка);
	
	CRM_БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(Список.УсловноеОформление);
	
	// Поле отображения содержания.
	CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПриСозданииФормыСпискаНаСервере(ЭтотОбъект);
	
	// Доступ к задачам других пользователей.
	Если НЕ Пользователи.РолиДоступны("ПолныеПрава, CRM_ПросмотрЗадачДругихПользователейВКалендаре") Тогда
		ОтборИсполнитель							= Пользователи.ТекущийПользователь();
		Элементы.ОтборИсполнитель.ТолькоПросмотр	= Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(ОтборИсполнитель) Тогда	
		ОтборИсполнитель							= Пользователи.ТекущийПользователь();
	КонецЕсли;
	CRM_Теги.ОбновитьЗначенияОтбораПериодов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	// Перейдем сразу на вкладку отборов "Быстрые отборы" и оставим ее в свернутом режиме.
	Элементы.ПанельЗначенийОтбора.Видимость			= Истина;
	Элементы.ПанельЗначенийОтбора.ТекущаяСтраница	= Элементы.ЗначенияОтбораБыстрыеОтборы;	
	БыстрыеОтборы(Элементы.БыстрыеОтборы);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборЗадача, ОтборИсполнитель, ОтборПроект);
	// +Пользовательские настройки.
	ДобавитьПодменюПользовательскихНастроек();
	// -Пользовательские настройки.
	ОтборИсполнительПриИзменении(Неопределено);
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗадачаВыполнена" ИЛИ ИмяСобытия = "ЗадачаИзменена" Тогда
		Элементы.Список.Обновить();
 	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПриЗагрузкеДанныхИзНастроекНаСервере".
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ОтборЗадача	= Настройки.Получить("ОтборЗадача");
	Если ОтборЗадача = 1 Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Выполнена", Истина, Истина);
	ИначеЕсли ОтборЗадача = 2 Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Выполнена", Ложь, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Выполнена");
	КонецЕсли;
	ОтборИсполнитель = Настройки.Получить("ОтборИсполнитель");
	Если НЕ ЗначениеЗаполнено(ОтборИсполнитель) Тогда
		ОтборИсполнитель = Пользователи.ТекущийПользователь();
	КонецЕсли;
	//CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Исполнитель", ОтборИсполнитель, Истина);
	ОтборПроект = Настройки.Получить("ОтборПроект");
	Если ЗначениеЗаполнено(ОтборПроект) Тогда		
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Проект", ОтборПроект, Истина);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Проект");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();	
КонецПроцедуры

&НаСервере
// Процедура вызывается из обработчика <ПриЗакрытии> один раз, чтобы не было множественных переключений клиент/сервер
// при сохранении настроек.
//
Процедура ПриЗакрытииНаСервере()
	
	CRM_РежимФормЗакладкиСервер.ПриЗакрытииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#Область ПроцедурыОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ПринятьЗадачиКИсполнению(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачКИсполнению(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БизнесПроцессыИЗадачиКлиент.СписокЗадачПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, 
		Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	CRM_БизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	CRM_БизнесПроцессыИЗадачиКлиент.СписокЗадачПередНачаломИзменения(Элемент, Отказ);
КонецПроцедуры

&НаСервере
Процедура СписокПриАктивизацииСтрокиНаСервере(ТекущаяСтрокаСписка)
	
	Если ТекущаяСтрокаСписка = Неопределено Тогда Возврат КонецЕсли;	
	
	Если ТипЗнч(ТекущаяСтрокаСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Элементы.ПринятьКИсполнению.Доступность											= Ложь;
		Элементы.СписокКонтекстноеМенюПринятьКИсполнению.Доступность					= Ложь;
		Элементы.СписокКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность			= Ложь;
		Элементы.СписокКонтекстноеМенюЗадачаЗадачаИсполнителяВыполнено.Доступность		= Ложь;
		Элементы.СписокКонтекстноеМенюЗадачаЗадачаИсполнителяПеренаправить.Доступность	= Ложь;
		Элементы.СписокКонтекстноеМенюУстановитьПометкуУдаления.Доступность				= Ложь;
		
		ПолеОтображениеСодержания = "";
	Иначе
		Если НЕ Пользователи.РолиДоступны("ПолныеПрава") Тогда
			тПользователь = Пользователи.ТекущийПользователь();
			Если ЗначениеЗаполнено(ТекущаяСтрокаСписка.РольИсполнителя) И НЕ ЗначениеЗаполнено(ТекущаяСтрокаСписка.Исполнитель) Тогда
				СписокВозможныхИсполнителей														= CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРолиСАдресацией(ТекущаяСтрокаСписка.РольИсполнителя,Неопределено);
				Элементы.ПринятьКИсполнению.Доступность											= (СписокВозможныхИсполнителей.НайтиПоЗначению(тПользователь) <> Неопределено);
				Элементы.СписокКонтекстноеМенюПринятьКИсполнению.Доступность					= (СписокВозможныхИсполнителей.НайтиПоЗначению(тПользователь) <> Неопределено);
				Элементы.СписокКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность			= (СписокВозможныхИсполнителей.НайтиПоЗначению(тПользователь) <> Неопределено);
				Элементы.СписокКонтекстноеМенюЗадачаЗадачаИсполнителяВыполнено.Доступность		= (СписокВозможныхИсполнителей.НайтиПоЗначению(тПользователь) <> Неопределено);
				Элементы.СписокКонтекстноеМенюЗадачаЗадачаИсполнителяПеренаправить.Доступность	= (СписокВозможныхИсполнителей.НайтиПоЗначению(тПользователь) <> Неопределено);
			Иначе
				Элементы.ПринятьКИсполнению.Доступность											= (ТекущаяСтрокаСписка.Исполнитель = тПользователь);
				Элементы.СписокКонтекстноеМенюПринятьКИсполнению.Доступность					= (ТекущаяСтрокаСписка.Исполнитель = тПользователь);
				Элементы.СписокКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность			= (ТекущаяСтрокаСписка.Исполнитель = тПользователь);
				Элементы.СписокКонтекстноеМенюЗадачаЗадачаИсполнителяВыполнено.Доступность		= (ТекущаяСтрокаСписка.Исполнитель = тПользователь);
				Элементы.СписокКонтекстноеМенюЗадачаЗадачаИсполнителяПеренаправить.Доступность	= (ТекущаяСтрокаСписка.Исполнитель = тПользователь);
			КонецЕсли;
		Иначе
			Элементы.ПринятьКИсполнению.Доступность											= Истина;
			Элементы.СписокКонтекстноеМенюПринятьКИсполнению.Доступность					= Истина;
			Элементы.СписокКонтекстноеМенюОтменитьПринятиеКИсполнению.Доступность			= Истина;
			Элементы.СписокКонтекстноеМенюЗадачаЗадачаИсполнителяВыполнено.Доступность		= Истина;
			Элементы.СписокКонтекстноеМенюЗадачаЗадачаИсполнителяПеренаправить.Доступность	= Истина;
		КонецЕсли;
		
		Элементы.СписокКонтекстноеМенюУстановитьПометкуУдаления.Доступность = (ТекущаяСтрокаСписка.CRM_Личная И (Элементы.Список.ВыделенныеСтроки.Количество() = 1));
		
		Попытка
			ПолеОтображениеСодержания = CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(ТекущаяСтрокаСписка);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПриАктивизацииСтроки()
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	СписокПриАктивизацииСтрокиНаСервере(Элементы.Список.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборЗадача".
//
Процедура ОтборЗадачаПриИзменении(Элемент)
	Если ОтборЗадача = 1 Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Выполнена", Истина, Истина);
	ИначеЕсли ОтборЗадача = 2 Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Выполнена", Ложь, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Выполнена");
	КонецЕсли;
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборЗадача, ОтборИсполнитель, ОтборПроект);
КонецПроцедуры // ОтборПодразделениеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборКлиент".
//
Процедура ОтборИсполнительПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборИсполнитель) Тогда
		Список.Параметры.УстановитьЗначениеПараметра("Исполнитель", ОтборИсполнитель);
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("Исполнитель", CRM_УправлениеДоступомПовтИсп.ПолучитьПользователейПодразделения(ОтборПодразделение));
	КонецЕсли;

	//Если ЗначениеЗаполнено(ОтборИсполнитель) Тогда
	//	CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Исполнитель", ОтборИсполнитель, Истина);
	//Иначе	
	//	CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Исполнитель");
	//КонецЕсли;
	//CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборЗадача, ОтборИсполнитель, ОтборПроект);
КонецПроцедуры // ОтборИсполнительПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборПроект".
//
Процедура ОтборПроектПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборПроект) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Проект", ОтборПроект, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Проект");
	КонецЕсли;
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборЗадача, ОтборИсполнитель, ОтборПроект);
КонецПроцедуры // ОтборПроектПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыСегодня".
//
Процедура ОтборСозданыСегодняНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Сегодня", Элемент);
КонецПроцедуры // ОтборСозданыСегодняНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗа3Дня".
//
Процедура ОтборСозданыЗа3ДняНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "3 дня", Элемент);
КонецПроцедуры // ОтборСозданыЗа3ДняНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗаНеделю".
//
Процедура ОтборСозданыЗаНеделюНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Неделя", Элемент);
КонецПроцедуры // ОтборСозданыЗаНеделюНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗаМесяц".
//
Процедура ОтборСозданыЗаМесяцНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Месяц", Элемент);
КонецПроцедуры // ОтборСозданыЗаМесяцНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыПроизвольныйПериод".
//
Процедура ОтборСозданыПроизвольныйПериодПриИзменении(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "ПроизвольныйПериод", Элемент);
КонецПроцедуры // ОтборСозданыПроизвольныйПериодПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборПериодОчистить".
//
Процедура ОтборПериодОчиститьНажатие(Элемент)
	CRM_ТегиКлиент.ОчиститьОтборНажатие(ЭтотОбъект, "Список");
КонецПроцедуры // ОтборПериодОчиститьНажатие()

#КонецОбласти

#Область ПроцедурыДействияКомандныхПанелейФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ ДОКУМЕНТА

&НаКлиенте
// Процедура - обработчик команды "БыстрыеОтборы".
//
Процедура БыстрыеОтборы(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Истина;	
КонецПроцедуры // БыстрыеОтборы()

&НаКлиенте
// Процедура - обработчик команды "ОтборПериод".
//
Процедура ОтборПериод(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;	
КонецПроцедуры // ОтборПериод()

&НаКлиенте
Процедура КомандаПоказатьСкрытьПолеОтображенияСодержания(Команда)
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПоказатьСкрытьПолеОтображенияСодержания(ЭтотОбъект);
	Если Команда <> Неопределено Тогда
		СохранитьНастройкиПолейОтображенияСодержания();
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьНастройкиПолейОтображенияСодержания()
	CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПриЗакрытииФормыСписка(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура КомандаВидСпискаСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки)
	CRM_ОбщегоНазначенияКлиентСервер.ОбработкаКомандыПользовательскихНастроекДинамическогоСписка(ЭтотОбъект, СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
	CRM_БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(Список.УсловноеОформление);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидСписка(Команда)
	СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаКлиент();
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаВидСпискаЗавершение", ЭтотОбъект, СвойстваДинамическогоСписка);
	CRM_ОбщегоНазначенияКлиент.ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки(ЭтотОбъект, СвойстваДинамическогоСписка, Команда, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидСпискаЗавершение(ПризнакИзмененыНастройки, СвойстваДинамическогоСписка) Экспорт
	КомандаВидСпискаСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
КонецПроцедуры

&НаКлиенте
Процедура ПолеОтображениеСодержанияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		Если Найти(ДанныеСобытия.href,"e1cib") > 0 Тогда
			НавСсылка = Сред(ДанныеСобытия.href,Найти(ДанныеСобытия.href,"e1cib"));
			Попытка
				ПерейтиПоНавигационнойСсылке(НавСсылка);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЗадачСоздатьЗадачу(Команда)
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Дата",ТекущаяДата());
	СтруктураДанных.Вставить("ДатаНачала",ТекущаяДата());
	ПараметрыФормы = Новый Структура("Основание",СтруктураДанных);
	CRM_БизнесПроцессыИЗадачиКлиент.СоздатьЛичнуюЗадачу(ЭтотОбъект,ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЗадачСоздатьПоручение(Команда)
	
	ПараметрыФормы = Новый Структура("Основание", ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуНаСервере(Задача, Флаг)
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.УстановитьПометкуУдаления(Флаг);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаления(Команда)
	
	Если НЕ Элементы.Список.ТекущиеДанные = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПометкуУдаленияОтвет", ЭтотОбъект, Новый Структура("ТекущаяСтрока, ПометкаУдаления", Элементы.Список.ТекущаяСтрока, Элементы.Список.ТекущиеДанные.ПометкаУдаления));
		Если Элементы.Список.ТекущиеДанные.ПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Снять с ""'") + Строка(Элементы.Список.ТекущаяСтрока) + НСтр("ru = '"" пометку на удаление?'");
			
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить ""'") + Строка(Элементы.Список.ТекущаяСтрока) + НСтр("ru = '"" на удаление?'");
			
		КонецЕсли;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияОтвет(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьПометкуНаСервере(ДополнительныеПараметры.ТекущаяСтрока, НЕ ДополнительныеПараметры.ПометкаУдаления);
	КонецЕсли;
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстанавливатьФормуПриОткрытии(Команда)
	Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка = НЕ Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ВосстанавливатьФормуПриОткрытии", Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПользовательскиеНастройки

&НаСервере
Процедура ДобавитьПодменюПользовательскихНастроек()
	CRM_ПользовательскиеНастройкиСервер.УстановитьПользовательскиеНастройки(Список, ИдентификаторПользовательскойНастройки, ИмяФормы+".Список");
	CRM_ПользовательскиеНастройкиСервер.ДобавитьПодменюПользовательскихНастроек(ЭтотОбъект, Список, ИмяФормы+".Список");
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборНастройкиНаСервере(НомерНастройки)
	CRM_ПользовательскиеНастройкиСервер.ОбработатьВыборНастройкиНаСервере(НомерНастройки, Список, ЭтотОбъект, ИмяФормы+".Список");	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьВыборНастройки(Команда)
	НомерНастройкиСтрока = СтрЗаменить(Команда.Имя, "ОбработатьВыборНастройки_", "");
	НомерНастройки = Число(НомерНастройкиСтрока);
	 ОбработатьВыборНастройкиНаСервере(НомерНастройки);	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущиеНастройкиНаСервере(ИмяНастройки, ДополнительныеПараметры) Экспорт
	Если НЕ ИмяНастройки = Неопределено Тогда
		CRM_ПользовательскиеНастройкиСервер.СохранитьТекущиеНастройкиНаСервере(ИмяНастройки, Список, ЭтотОбъект, ИмяФормы+".Список");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущиеНастройки(Команда)
	ПараметрыОповещения = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("СохранитьТекущиеНастройкиНаСервере", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВводСтроки(Оповещение, "", "Введите название настройки");		
КонецПроцедуры

&НаСервере
Процедура УдалитьНастройкуНаСервере()
	ПредставлениеНастройки = CRM_ПользовательскиеНастройкиСервер.ПолучитьПредставлениеНастройки(ИдентификаторПользовательскойНастройки, ИмяФормы+".Список");	
	ХранилищеПользовательскихНастроекДинамическихСписков.Удалить(ИмяФормы+".Список", ИдентификаторПользовательскойНастройки, ИмяПользователя()); 
	ИдентификаторПользовательскойНастройки = "Стандартные_Настройки";
	CRM_ПользовательскиеНастройкиСервер.УстановитьПользовательскиеНастройки(Список, ИдентификаторПользовательскойНастройки, ИмяФормы+".Список");
	CRM_ПользовательскиеНастройкиСервер.ДобавитьПодменюПользовательскихНастроек(ЭтотОбъект, Список, ИмяФормы+".Список");
		
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОтветаУдаление(ВариантОтвета, ДополнительныеПараметры) Экспорт
	Если ВариантОтвета = КодВозвратаДиалога.Да Тогда
		УдалитьНастройкуНаСервере();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТекущуюНастройку(Команда)
	Если ИдентификаторПользовательскойНастройки = "Стандартные_Настройки" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нельзя удалить стандартные настройки";
		Сообщение.Сообщить();
	Иначе
		ПараметрыОповещения = Новый Структура;
		Оповещение = Новый ОписаниеОповещения("ОбработкаОтветаУдаление", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(Оповещение, "Вы действительно хотите удалить настройку """+CRM_ПользовательскиеНастройкиСервер.ПолучитьПредставлениеНастройки(ИдентификаторПользовательскойНастройки, ИмяФормы+".Список")+""" ?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсполнительОчистка(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ОтборПодразделение) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Обязательно должно быть заполненно одно из полей отбора ""Исполнитель"" или ""Подразделение""!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ОтборИсполнитель) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Обязательно должно быть заполненно одно из полей отбора ""Исполнитель"" или ""Подразделение""!'"));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


