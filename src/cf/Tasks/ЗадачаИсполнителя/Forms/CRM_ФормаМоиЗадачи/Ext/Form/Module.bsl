&НаСервере
Процедура УстановитьОформлениеЗадач(УсловноеОформление) Экспорт
	
	// Установка оформления для просроченных задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОсталосьДней");
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просрочена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = 0;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение;   
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для важных задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Важность");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.ВариантыВажностиЗадачи.Высокая;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.НеПринятыеКИсполнениюЗадачи.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для принятых задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение =  Новый Цвет(255,252,218);
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Новый Цвет(105,72,47);
	ЭлементЦветаОформления.Использование = Истина;
	
	// Установка оформления для выполненных задач.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветФона");
	ЭлементЦветаОформления.Значение =  Новый Цвет(245,251,247);
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Новый Цвет(104,144,87);
	ЭлементЦветаОформления.Использование = Истина;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем ТекстЗаголовкаФормы;
	
	// +Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	Если НЕ CRM_РежимФормЗакладкиСервер.ВосстановлениеФормыПриЗапускеСеанса(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// -Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	
	Если Параметры.Свойство("ЗаголовокФормы", ТекстЗаголовкаФормы) И
		НЕ ПустаяСтрока(ТекстЗаголовкаФормы) Тогда
		Заголовок = ТекстЗаголовкаФормы;
		АвтоЗаголовок = Ложь;
				
	КонецЕсли;
	
	Если Параметры.Свойство("БлокировкаОкнаВладельца") Тогда
		РежимОткрытияОкна = Параметры.БлокировкаОкнаВладельца;
	КонецЕсли;	
	
	// Оформление списка
	//CRM_БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(Список.КомпоновщикНастроек.Настройки.УсловноеОформление);
	УстановитьОформлениеЗадач(Список.КомпоновщикНастроек.Настройки.УсловноеОформление);
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.ДатаНачала.Формат		= ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	Элементы.СрокИсполнения.Формат	= ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	
	МоиПодразделения = CRM_УправлениеДоступомПовтИсп.ПолучитьПодразделенияВКоторыхРуководитель(ТекущийПользователь);
	Если МоиПодразделения.Количество() = 0 Тогда
		Элементы.ОтборПринадлежность.СписокВыбора.Удалить(Элементы.ОтборПринадлежность.СписокВыбора.НайтиПоЗначению("МоегоПодразделения"));
	КонецЕсли;
	Список.Параметры.УстановитьЗначениеПараметра("Исполнитель", ТекущийПользователь);
	Список.Параметры.УстановитьЗначениеПараметра("Подразделения", МоиПодразделения);
	Список.Параметры.УстановитьЗначениеПараметра("ПарамТекущаяДата", КонецДня(ТекущаяДатаСеанса()));
	Список.Параметры.УстановитьЗначениеПараметра("ПарамПустаяДата", Дата("00010101"));
	
	СписокСегодня.Параметры.УстановитьЗначениеПараметра("Исполнитель", ТекущийПользователь);
	СписокСегодня.Параметры.УстановитьЗначениеПараметра("ПарамТекущаяДата", КонецДня(ТекущаяДатаСеанса()));
	СписокСегодня.Параметры.УстановитьЗначениеПараметра("ПарамПустаяДата", Дата("00010101"));
	
	// Отборы
	Если НЕ ЗначениеЗаполнено(ОтборПринадлежность) Тогда
		ОтборПринадлежность = "Мои";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОтборСтатус) Тогда
		ОтборСтатус = "Все";
	КонецЕсли;
	
	// Поле отображения содержания.
	CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПриСозданииФормыСпискаНаСервере(ЭтотОбъект, , "ГруппаПолеОтображенияСодержания", "КнопкаПоказатьСкрытьПолеОтображенияСодержания");
	CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПриСозданииФормыСпискаНаСервере(ЭтотОбъект, , "ГруппаПолеОтображенияСодержанияСегодня", "СписокСегодняПоказатьСкрытьПолеОтображенияСодержанияСегодня");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОтборПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗадачаВыполнена" ИЛИ ИмяСобытия = "ЗадачаИзменена" Тогда
		Элементы.Список.Обновить();
		Элементы.СписокСегодня.Обновить();
 	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	CRM_РежимФормЗакладкиСервер.ПриЗакрытииНаСервере(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПолеОтображениеСодержанияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка,Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя"));		

КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииСтроки(Элемент)
	
	ИмяСписка = Элемент.Имя;
	Если Элементы[ИмяСписка].ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	ИмяПоля = "ПолеОтображениеСодержания" + СтрЗаменить(ИмяСписка, "Список", "");
	Если Элементы["ГруппаПолеОтображенияСодержания" + СтрЗаменить(ИмяСписка, "Список", "")].Видимость Тогда
		// Поле отображения содержания.
		Если ИмяСписка = "СписокСегодня" ИЛИ (ИмяСписка = "Список" И Элементы[ИмяСписка].ТекущиеДанные.Личная) Тогда
			CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПриАктивизацииСтроки(ЭтотОбъект, Элементы[ИмяСписка].ТекущаяСтрока, Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя"), , ИмяПоля);
		Иначе
			Попытка
				ЭтотОбъект[ИмяПоля] = CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(Элементы[ИмяСписка].ТекущаяСтрока);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если НеобходимоДобавитьОбработчики И НЕ ОбработчикиДобавлены Тогда
		ДобавитьОбработчикиЭлементовГруппыБыстрыхНастроек(Неопределено);
	Иначе
		НеобходимоДобавитьОбработчики = Ложь;
		ОбработчикиДобавлены = Ложь;
	КонецЕсли;
	
	Элементы[ИмяСписка+"КонтекстноеМенюУстановитьПометкуУдаления"].Доступность	= Элементы[ИмяСписка].ТекущиеДанные.Личная;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриИзменении(Элемент)
	Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	ОбновитьОтборыНаСервере(Список, ОтборПринадлежность, ОтборСтатус, ТекущийПользователь, ТекущееПодразделение);
	ТекущийЭлемент = Элементы.Список;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтборыНаСервере(Список, ОтборПринадлежность, ОтборСтатус, ТекущийПользователь, ТекущееПодразделение)
	тНастройки = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого ЭлементНастроек Из тНастройки Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ОтборКомпоновкиДанных") Тогда
			тОтбор = ЭлементНастроек.Элементы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВыбранИсполнитель = Ложь;
	ВыбранАвтор = Ложь;
	ВыбранТекущееПодразделение = Ложь;
	ВыбранСрокИсполнения = Ложь;
	ВыбранВыполнена = Ложь;
	ВыбранПринятаКИсполнению = Ложь;
	
	Для Каждого ЭлементОтбора Из тОтбор Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсполнительПотенциальный") И ЭлементОтбора.Использование Тогда
				ВыбранИсполнитель = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Автор") И ЭлементОтбора.Использование Тогда
				ВыбранАвтор = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсполнительПотенциальный.ТекущееПодразделение") И ЭлементОтбора.Использование Тогда
				ВыбранТекущееПодразделение = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения") И ЭлементОтбора.Использование Тогда
				ВыбранСрокИсполнения = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена") И ЭлементОтбора.Использование Тогда
				ВыбранВыполнена = Истина;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПринятаКИсполнению") И ЭлементОтбора.Использование Тогда
				ВыбранПринятаКИсполнению = Истина;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Если ОтборПринадлежность = "Мои" И НЕ ВыбранИсполнитель Тогда
		CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ИсполнительПотенциальный", ТекущийПользователь); 
	ИначеЕсли ОтборПринадлежность = "Созданные" И НЕ ВыбранАвтор Тогда
		CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Автор", ТекущийПользователь); 
	ИначеЕсли ОтборПринадлежность = "МоегоПодразделения" И НЕ ВыбранТекущееПодразделение Тогда
		CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ИсполнительПотенциальный", ИСТИНА); 
	КонецЕсли;
	
	Если ОтборСтатус = "Просроченные" Тогда
		Если НЕ ВыбранСрокИсполнения Тогда
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СрокИсполнения", '00010101', ВидСравненияКомпоновкиДанных.НеРавно); 
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СрокИсполнения", НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()), ВидСравненияКомпоновкиДанных.Меньше); 
		КонецЕсли;
		Если НЕ ВыбранВыполнена Тогда
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Выполнена", Ложь); 
		КонецЕсли;
	ИначеЕсли ОтборСтатус = "ВРаботе" Тогда
		// +Старый алгоритм формирования отбора по статусу, временно оставлен на случай возврата к нему.
		//Если НЕ ВыбранПринятаКИсполнению Тогда
		//	CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ПринятаКИсполнению", Истина); 
		//КонецЕсли;
		//Если НЕ ВыбранВыполнена Тогда
		//	CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Выполнена", Ложь); 
		//КонецЕсли;
		// -	
		
	    // Отбор составной, поэтому разные условия распределяем по группам отбора.
		ОбщаяГруппаОтбора	= CRM_ОбщегоНазначенияКлиентСервер.УстановитьГруппуОтбораСписка(Список, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ГруппаИ1			= CRM_ОбщегоНазначенияКлиентСервер.УстановитьГруппуОтбораСписка(Список, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ,ОбщаяГруппаОтбора); 
		ГруппаИ2			= CRM_ОбщегоНазначенияКлиентСервер.УстановитьГруппуОтбораСписка(Список, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ,ОбщаяГруппаОтбора); 		
		Если НЕ ВыбранПринятаКИсполнению Тогда
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ПринятаКИсполнению", Истина, , ГруппаИ1); 
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "ПринятаКИсполнению", Ложь, , ГруппаИ2); 			
		КонецЕсли;
		Если НЕ ВыбранВыполнена Тогда
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Выполнена", Ложь,,ГруппаИ1); 
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Выполнена", Ложь,,ГруппаИ2); 			
		КонецЕсли;
		Если НЕ ВыбранСрокИсполнения Тогда
	    	CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СрокИсполнения", НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()), ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ГруппаИ2); 
			CRM_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораСписка(Список, "СрокИсполнения", '00010101', ВидСравненияКомпоновкиДанных.НеРавно, ГруппаИ2); 			
	    КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьПолеОтображенияСодержания(Команда)
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПоказатьСкрытьПолеОтображенияСодержания(ЭтотОбъект, "ГруппаПолеОтображенияСодержания", "КнопкаПоказатьСкрытьПолеОтображенияСодержания");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьПолеОтображенияСодержанияСегодня(Команда)
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПоказатьСкрытьПолеОтображенияСодержания(ЭтотОбъект, "ГруппаПолеОтображенияСодержанияСегодня", "СписокСегодняПоказатьСкрытьПолеОтображенияСодержанияСегодня");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛичнуюЗадачу(Команда)
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаЛичнойЗадачи");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоручение(Команда)
	
	// Не связываем новое поручение с задачами.
	//Если НЕ Элементы.Список.ТекущиеДанные = Неопределено Тогда
	//	СтруктураОснования = Новый Структура("Основание,КартаМаршрута",Элементы.Список.ТекущиеДанные.Ссылка,ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
	//	ДанныеЗаполнения = Новый Структура("Основание",СтруктураОснования);
	//Иначе
		ДанныеЗаполнения = Новый Структура("Основание",ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
	//КонецЕсли;
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ДанныеЗаполнения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБизнесПроцесс(Команда)
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаВыборИзДерева", , ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры

&НаКлиенте
Процедура ВосстанавливатьФормуПриОткрытии(Команда)
	Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка = НЕ Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ВосстанавливатьФормуПриОткрытии", Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка);
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Очистить();
	ОбновитьОтборыНаСервере(Список, ОтборПринадлежность, ОтборСтатус, ТекущийПользователь, ТекущееПодразделение);
	НеобходимоДобавитьОбработчики = Истина;
	ОбработчикиДобавлены = Ложь;
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбработчикиЭлементовГруппыБыстрыхНастроек(Элемент)
	Если Элемент = Неопределено Тогда 
		Элемент = Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки;
	КонецЕсли;
	Для Каждого тЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(тЭлемент) = Тип("ГруппаФормы") Тогда
			ДобавитьОбработчикиЭлементовГруппыБыстрыхНастроек(тЭлемент);
		Иначе
			тЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаГруппыБыстрыхНастроек"); 
		КонецЕсли;
	КонецЦикла;
	ОбработчикиДобавлены = Истина;
	Если Элемент = Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки Тогда
		Элемент = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииЭлементаГруппыБыстрыхНастроек(Элемент)
	ОтборПриИзменении(Неопределено);
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуНаСервере(Задача, Флаг)
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.УстановитьПометкуУдаления(Флаг);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаления(Команда)
	
	Если НЕ ТекущийЭлемент.ТекущиеДанные = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПометкуУдаленияОтвет", ЭтотОбъект, Новый Структура("ТекущаяСтрока, ПометкаУдаления", ТекущийЭлемент.ТекущаяСтрока, Элементы.Список.ТекущиеДанные.ПометкаУдаления));
		Если ТекущийЭлемент.ТекущиеДанные.ПометкаУдаления Тогда
			ТекстВопроса = НСтр("ru = 'Снять с ""'") + Строка(ТекущийЭлемент.ТекущаяСтрока) + НСтр("ru = '"" пометку на удаление?'");
			
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить ""'") + Строка(ТекущийЭлемент.ТекущаяСтрока) + НСтр("ru = '"" на удаление?'");
			
		КонецЕсли;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияОтвет(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьПометкуНаСервере(ДополнительныеПараметры.ТекущаяСтрока, НЕ ДополнительныеПараметры.ПометкаУдаления);
	КонецЕсли;
	Элементы.Список.Обновить();
	Элементы.СписокСегодня.Обновить();
	
КонецПроцедуры
