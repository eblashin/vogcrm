
&НаСервере
Функция ПрочитатьМаршрутБизнесПроцесса()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Процесс", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Маршрут.ТочкаМаршрута,
	               |	Маршрут.ВариантВыполнения,
	               |	Маршрут.Используется,
	               |	Маршрут.Шаблон КАК ПроцессШаблон,
	               |	Маршрут.Порядок,
	               |	Маршрут.ТочкаМаршрута.Имя КАК ИмяТочки
	               |ИЗ
	               |	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК Маршрут
	               |ГДЕ
	               |	Маршрут.Объект = &Процесс";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьСтрокуИсполнителей(ТочкаМаршрута, ТипДействия)
	
	Запрос = Новый Запрос;
	
	Если ТипДействия = 2 Тогда // Данные берем из регистра сведений исполнители.
		ТекстЗапроса ="ВЫБРАТЬ
		|	CRM_ИсполнителиЭтаповБизнесПроцессов.Исполнитель,
		|	"""" КАК РольИсполнителя
		|ИЗ
		|	РегистрСведений.CRM_ИсполнителиЭтаповБизнесПроцессов КАК CRM_ИсполнителиЭтаповБизнесПроцессов
		|ГДЕ
		|	CRM_ИсполнителиЭтаповБизнесПроцессов.Объект = &БизнесПроцесс
		|	И CRM_ИсполнителиЭтаповБизнесПроцессов.ТочкаМаршрута = &CRM_ТочкаМаршрута";
	Иначе
		ТекстЗапроса ="ВЫБРАТЬ
		|	ЗадачаИсполнителя.Исполнитель,
		|	ЗадачаИсполнителя.РольИсполнителя
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.CRM_ТочкаМаршрута = &CRM_ТочкаМаршрута";
		Если ТипДействия = 0 Тогда
			ТекстЗапроса = ТекстЗапроса +"
			|	И НЕ ЗадачаИсполнителя.Выполнена";
		Иначе
			ТекстЗапроса = ТекстЗапроса +"
			|	И ЗадачаИсполнителя.Выполнена";
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("БизнесПроцесс"		,Объект.Ссылка);
	Запрос.УстановитьПараметр("CRM_ТочкаМаршрута"	,ТочкаМаршрута);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СтрокаИсполнителей = "";
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			СтрокаИсполнителей = СтрокаИсполнителей + ?(СтрокаИсполнителей ="","",";") + Строка(Выборка.Исполнитель);
		Иначе
			СтрокаИсполнителей = СтрокаИсполнителей + ?(СтрокаИсполнителей ="","",";") + Строка(Выборка.РольИсполнителя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаИсполнителей;
	
КонецФункции

&НаСервере
Функция ПроверитьНаПринадлежностьРазделениюПолучитьТочкуРазделения(БизнесПроцесс,ТочкаМаршрута)
	
	МассивСтрок = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		ТочкаСлияния = МассивСтрок[0].ТочкаМаршрута;
		
		МассивСтрок = ТочкаСлияния.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Разделение));
		ТочкаРазделения = МассивСтрок[0].ТочкаМаршрута;
		Возврат ТочкаРазделения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьКартуМаршрутаЗаполнитьТаблицу()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтрокаСхемыМаршрута = Объект.Ссылка.КартаМаршрута.ВерсииКартыМаршрута.Найти(Объект.Ссылка.НомерВерсииКартыМаршрута, "НомерВерсии");
		КартаМаршрута = СтрокаСхемыМаршрута.КартаМаршрута.Получить();
	Иначе
		КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПустаяСсылка();
	КонецЕсли;
	
	//Маршрут = Неопределено;
	//CRM_БизнесПроцессыЭкспортныеМетоды.ПрочитатьМаршрутБизнесПроцесса(Объект.Ссылка, Маршрут);
	
	Маршрут = ПрочитатьМаршрутБизнесПроцесса();
	
	СтруктураРазделений = Новый Структура;
	
	табМаршрут_Значение = РеквизитФормыВЗначение("табМаршрут_");
	табМаршрут_Значение.Очистить();
	Для Каждого СтрокаМаршрута Из Маршрут Цикл		
		НоваяСтрока = табМаршрут_Значение.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМаршрута);
		НоваяСтрока.ИмяТочки	= СтрокаМаршрута.ТочкаМаршрута.Имя;
		НоваяСтрока.Вид			= СтрокаМаршрута.ТочкаМаршрута.Вид;
		
		ТочкаРазделения = ПроверитьНаПринадлежностьРазделениюПолучитьТочкуРазделения(Объект.Ссылка,СтрокаМаршрута.ТочкаМаршрута);
		Если НЕ ТочкаРазделения = Неопределено Тогда
			Если НЕ СтруктураРазделений.Свойство(ТочкаРазделения.Имя) Тогда
				СтруктураРазделений.Вставить(ТочкаРазделения.Имя, ТочкаРазделения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СтруктураРазделений Цикл
		НоваяСтрока = табМаршрут_Значение.Добавить();
		НоваяСтрока.ТочкаМаршрута	= КлючИЗначение.Значение;
		НоваяСтрока.Порядок			= КлючИЗначение.Значение.РеквизитДопУпорядочивания;
		НоваяСтрока.ИмяТочки		= КлючИЗначение.Значение.Имя;
		НоваяСтрока.Текущая			= Ложь;
		НоваяСтрока.Вид				= КлючИЗначение.Значение.Вид;
	КонецЦикла;
		
	табМаршрут_Значение.Сортировать("Порядок Возр");
	
	МассивВидов = Новый Массив;
	МассивВидов.Добавить(Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс);
	МассивВидов.Добавить(Перечисления.CRM_ВидыТочекМаршрута.Действие);
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос.УстановитьПараметр("Владелец",	Объект.Ссылка.КартаМаршрута);
		Запрос.УстановитьПараметр("НомерВерсии",Объект.Ссылка.НомерВерсииКартыМаршрута);
	Иначе
		Запрос.УстановитьПараметр("Владелец",	Справочники.CRM_КартыМаршрутов.ПустаяСсылка());
		Запрос.УстановитьПараметр("НомерВерсии",0);
	КонецЕсли;	
	Запрос.УстановитьПараметр("БизнесПроцесс",	Объект.Ссылка);
	Запрос.УстановитьПараметр("МассивВидов",	МассивВидов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка,
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Имя
	|ПОМЕСТИТЬ Точки
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
	|ГДЕ
	|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец
	|	И CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Вид В(&МассивВидов)
	|	И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_ТочкиМаршрутовВходящиеТочки.Ссылка,
	|	CRM_ТочкиМаршрутовВходящиеТочки.Ссылка.Имя
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов.ВходящиеТочки КАК CRM_ТочкиМаршрутовВходящиеТочки
	|ГДЕ
	|	CRM_ТочкиМаршрутовВходящиеТочки.Ссылка.Владелец = &Владелец
	|	И CRM_ТочкиМаршрутовВходящиеТочки.Ссылка.Вид В(&МассивВидов)
	|	И CRM_ТочкиМаршрутовВходящиеТочки.НомерВерсии = &НомерВерсии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Точки.Ссылка КАК Точка,
	|	Точки.Имя,
	|	ЕСТЬNULL(ВыполненныеЗадачи.Количество, 0) КАК ВыполненоКоличество,
	|	ЕСТЬNULL(НеВыполненныеЗадачи.Количество, 0) КАК НеВыполненоКоличество,
	|	ВложенныйЗапрос.Используется
	|ИЗ
	|	Точки КАК Точки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачаИсполнителя.Ссылка) КАК Количество,
	|			ЗадачаИсполнителя.CRM_ТочкаМаршрута КАК ТочкаМаршрута
	|		ИЗ
	|			Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ГДЕ
	|			ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|			И ЗадачаИсполнителя.Выполнена
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗадачаИсполнителя.CRM_ТочкаМаршрута) КАК ВыполненныеЗадачи
	|		ПО Точки.Ссылка = ВыполненныеЗадачи.ТочкаМаршрута
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачаИсполнителя.Ссылка) КАК Количество,
	|			ЗадачаИсполнителя.CRM_ТочкаМаршрута КАК ТочкаМаршрута
	|		ИЗ
	|			Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ГДЕ
	|			ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|			И (НЕ ЗадачаИсполнителя.Выполнена)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗадачаИсполнителя.CRM_ТочкаМаршрута) КАК НеВыполненныеЗадачи
	|		ПО Точки.Ссылка = НеВыполненныеЗадачи.ТочкаМаршрута
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			CRM_МаршрутыПроцессов.ТочкаМаршрута КАК ТочкаМаршрута,
	|			CRM_МаршрутыПроцессов.Используется КАК Используется
	|		ИЗ
	|			РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_МаршрутыПроцессов
	|		ГДЕ
	|			CRM_МаршрутыПроцессов.Объект = &БизнесПроцесс) КАК ВложенныйЗапрос
	|		ПО Точки.Ссылка = ВложенныйЗапрос.ТочкаМаршрута
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлементСхемы = КартаМаршрута.ЭлементыГрафическойСхемы.Найти(Выборка.Имя);
		Если ЭлементСхемы = Неопределено Тогда Продолжить; КонецЕсли;
		
		Если Выборка.НеВыполненоКоличество > 0 Тогда
			ЭлементСхемы.ЦветРамки	= Новый Цвет(255, 0, 0); // красный
			ЭлементСхемы.рамка		= Новый Линия(ТипСоединительнойЛинии.Пунктир);
			
			СтрокаТаблицы = табМаршрут_Значение.Найти(Выборка.Имя, "ИмяТочки");
			Если НЕ СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы.Текущая = Истина;
			КонецЕсли;
		ИначеЕсли Выборка.ВыполненоКоличество > 0 Тогда
			ЭлементСхемы.ЦветФона = Новый Цвет(192, 192, 192); // дымчато-белый
		ИначеЕсли Выборка.ВыполненоКоличество = 0 И Выборка.НеВыполненоКоличество = 0 Тогда
			ЭлементСхемы.ЦветФона = Новый Цвет(255, 255, 255);
		КонецЕсли;
		
		ЭлементСхемы.ПрозрачныйФон = НЕ Выборка.Используется;
		
		Если Выборка.Точка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие Тогда
			Если Выборка.НеВыполненоКоличество > 0 Тогда
				ЭлементСхемы.Пояснение = ПолучитьСтрокуИсполнителей(Выборка.Точка, 0);
			ИначеЕсли Выборка.ВыполненоКоличество > 0 Тогда
				ЭлементСхемы.Пояснение = ПолучитьСтрокуИсполнителей(Выборка.Точка, 1);
			ИначеЕсли Выборка.ВыполненоКоличество = 0 Тогда
				ЭлементСхемы.Пояснение = ПолучитьСтрокуИсполнителей(Выборка.Точка, 2);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(табМаршрут_Значение, "табМаршрут_");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть форму перемещения этапа. Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если CRM_ЛицензированиеСервер.ВариантПоставкиСТАРТ() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Функция не доступна для варианта поставки ""СТАРТ""!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ОбновитьКартуМаршрутаЗаполнитьТаблицу();
	
	Элементы.ГруппаСтраниц.ТекущаяСтраница	= Элементы.СтраницаКартаМаршрута;
	Элементы.СписокДействий.Пометка			= Ложь;
	Элементы.СхемаПроцесса.Пометка			= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСпискуЭтапов(Команда)
	
	Элементы.ГруппаСтраниц.ТекущаяСтраница	= Элементы.СтраницаТаблицаМаршрута;
	Элементы.СписокДействий.Пометка			= Истина;
	Элементы.СхемаПроцесса.Пометка			= Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрута(Команда)
	
	Элементы.ГруппаСтраниц.ТекущаяСтраница	= Элементы.СтраницаКартаМаршрута;
	Элементы.СписокДействий.Пометка			= Ложь;
	Элементы.СхемаПроцесса.Пометка			= Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНаПринадлежностьРазделениюПолучитьИсключаемыеТочки(БизнесПроцесс,ТочкаМаршрута, МассивИсключаемыхТочек = Неопределено)
	
	Если МассивИсключаемыхТочек = Неопределено Тогда
		МассивИсключаемыхТочек = Новый Массив;
	КонецЕсли;
	
	// Если точка маршрута является разделением, то получим связанную с ней точку слияния и
	// проверим, не принадлежит ли она другому разделению.
	Если ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
		МассивСтрок = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
		
		СвязаннаяСРазделениемТочкаСлияния = МассивСтрок[0].ТочкаМаршрута;
		
		МассивСтрок = СвязаннаяСРазделениемТочкаСлияния.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
	Иначе
		МассивСтрок = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
	КонецЕсли;
	
	// Если нашли, значит точка находится в одной из веток разделения.
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		
		ТочкаСлияния	= МассивСтрок[0].ТочкаМаршрута;
		Ветка			= МассивСтрок[0].НомерВетки;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец"	 ,БизнесПроцесс.КартаМаршрута);
		Запрос.УстановитьПараметр("ТочкаМаршрута",ТочкаСлияния);
		Запрос.УстановитьПараметр("Вид"			 ,ТочкаСлияния.Вид);
		Запрос.УстановитьПараметр("НомерВерсии"	 ,БизнесПроцесс.НомерВерсииКартыМаршрута);
		Запрос.УстановитьПараметр("НомерВетки"	 ,Ветка);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ТочкиМаршрутовТочкиРазделенияСлияния.Ссылка
		|ИЗ
		|	Справочник.CRM_ТочкиМаршрутов.ТочкиРазделенияСлияния КАК CRM_ТочкиМаршрутовТочкиРазделенияСлияния
		|ГДЕ
		|	CRM_ТочкиМаршрутовТочкиРазделенияСлияния.Ссылка.Владелец = &Владелец
		|	И CRM_ТочкиМаршрутовТочкиРазделенияСлияния.Вид = &Вид
		|	И CRM_ТочкиМаршрутовТочкиРазделенияСлияния.НомерВерсии = &НомерВерсии
		|	И НЕ CRM_ТочкиМаршрутовТочкиРазделенияСлияния.НомерВетки = &НомерВетки
		|	И CRM_ТочкиМаршрутовТочкиРазделенияСлияния.ТочкаМаршрута = &ТочкаМаршрута";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Действие
			ИЛИ Выборка.Ссылка.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
				МассивИсключаемыхТочек.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		// Проверим, не ходит ли точка слияния в ветку другого разделения.
		МассивСтрок			= ТочкаСлияния.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
		
		// Если нашли, значит точка находится в одной из веток разделения.
		Если НЕ МассивСтрок.Количество() = 0 Тогда
			ПроверитьНаПринадлежностьРазделениюПолучитьИсключаемыеТочки(БизнесПроцесс,ТочкаСлияния, МассивИсключаемыхТочек);
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат МассивИсключаемыхТочек;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗавершитьВсеЗадачиБизнесПроцесса(БизнесПроцесс, МассивИсключаемыхТочек, ТочкаМаршрута = Неопределено)
	
	// 1. Завершим все задачи и вложенные бизнес-процессы.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачаИсполнителя.Ссылка
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |ГДЕ
	               |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	               |	И НЕ ЗадачаИсполнителя.Выполнена
	               |	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	               |	И НЕ ЗадачаИсполнителя.CRM_ТочкаМаршрута В (&МассивИсключаемыхТочек)";
	Запрос.УстановитьПараметр("БизнесПроцесс"		  ,БизнесПроцесс);
	Запрос.УстановитьПараметр("МассивИсключаемыхТочек",МассивИсключаемыхТочек);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Завершаем вложенный бизнес-процесс.
		Если Выборка.Ссылка.CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	CRM_БизнесПроцесс.Ссылка
			|ИЗ
			|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
			|ГДЕ
			|	(НЕ CRM_БизнесПроцесс.Завершен)
			|	И CRM_БизнесПроцесс.ВедущаяЗадача = &ВедущаяЗадача";
			Запрос.УстановитьПараметр("ВедущаяЗадача",Выборка.Ссылка);
			Выборка_1 = Запрос.Выполнить().Выбрать();
			Если Выборка_1.Следующий() Тогда
				
				ПараметрыДосрочногоЗавершения = Новый Структура();
				ПараметрыДосрочногоЗавершения.Вставить("ЗавершенДосрочно"				,Истина);
				ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"				,Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
				ПараметрыДосрочногоЗавершения.Вставить("ПричинаДосрочногоЗавершения"	,Справочники.CRM_ПричиныОтказов.ОткатБизнесПроцесса);
				ПараметрыДосрочногоЗавершения.Вставить("Задача"							,Новый Структура("БизнесПроцесс",Выборка_1.Ссылка));
				ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"		,Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка());
				
				CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения);
			КонецЕсли;
		КонецЕсли;
		
		// Завершаем задачу
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.ДатаИсполнения					= ТекущаяДатаСеанса();
			ЗадачаОбъект.Выполнена						= Истина;
			ЗадачаОбъект.CRM_ВариантВыполненияСтрокой	= "Завершена автоматически";
			ЗадачаОбъект.РезультатВыполнения			= "Завершена автоматически";
			ЗадачаОбъект.ОбменДанными.Загрузка			= Истина;
			ЗадачаОбъект.Записать();
			CRM_БизнесПроцессыСервер.ПриВыполненииЗадачиИсполнителя(ЗадачаОбъект, Ложь, ТочкаМаршрута, Истина);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьЗадачуВТочкеОтката(БизнесПроцесс, ТочкаМаршрута)
	
	МассивЗадач = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	//|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка,
	|	ЗадачаИсполнителя.Дата КАК Дата,
	|	ЗадачаИсполнителя.CRM_Итерация КАК CRM_Итерация
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.CRM_ТочкаМаршрута = &ТочкаМаршрута
	|	И ЗадачаИсполнителя.Выполнена
	|	И (НЕ ЗадачаИсполнителя.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_Итерация УБЫВ,
	|	Дата УБЫВ";
	Запрос.УстановитьПараметр("БизнесПроцесс",БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута",ТочкаМаршрута);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
							
			// Не устанавливаем объектную блокировку на задачу Задача для того, чтобы 
			// позволить выполнять перенаправление по команде из формы этой задачи.
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			НоваяЗадача.Заполнить(ЗадачаОбъект);
			
			МассивЗадач.Добавить(НоваяЗадача);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	CRM_НастройкиЭтаповБизнесПроцессов.Объект,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполнения,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполненияСтрокой,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьДней,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьЧасов,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДлительностьМинут,
			|	CRM_НастройкиЭтаповБизнесПроцессов.Используется,
			|	CRM_НастройкиЭтаповБизнесПроцессов.Задание,
			|	CRM_НастройкиЭтаповБизнесПроцессов.Порядок,
			|	CRM_НастройкиЭтаповБизнесПроцессов.Шаблон,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ИсполнительСтрокой,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаНачала,
			|	CRM_НастройкиЭтаповБизнесПроцессов.ДатаВыполнения
			|ИЗ
			|	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
			|ГДЕ
			|	CRM_НастройкиЭтаповБизнесПроцессов.Объект = &Объект";
			
			Запрос.УстановитьПараметр("Объект",БизнесПроцесс);
			ТаблицаЭтапов = Запрос.Выполнить().Выгрузить();
				
			CRM_БизнесПроцессыСервер.ЗаписатьЗадачи(МассивЗадач, ТаблицаЭтапов);
			ЗафиксироватьТранзакцию();
			
			CRM_БизнесПроцессыСервер.СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(БизнесПроцесс);
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
	Иначе
		
		Отказ = Ложь;
		МассивИсходящихТочек = Новый Массив;
		МассивИсходящихТочек.Добавить(Новый Структура("ИсходящаяТочка",ТочкаМаршрута));
		
		ТаблицаЭтапов = Неопределено;
		CRM_БизнесПроцессыСервер.СформироватьМассивЗадач(БизнесПроцесс, БизнесПроцессы.CRM_БизнесПроцесс.ТочкиМаршрута.ЗадачаБизнесПроцесса, МассивИсходящихТочек, МассивЗадач,, ТаблицаЭтапов, Отказ);
		Если НЕ Отказ Тогда
			НачатьТранзакцию();
			Попытка
				CRM_БизнесПроцессыСервер.ЗаписатьЗадачи(МассивЗадач,ТаблицаЭтапов);
				ЗафиксироватьТранзакцию();
				
				CRM_БизнесПроцессыСервер.СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(БизнесПроцесс);
			Исключение
				ОтменитьТранзакцию();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьТочкуНаПринадлежностьРазделению(БизнесПроцесс, ТочкаМаршрута)
	
	// Если точка принадлежит ветке разделения.
	Если ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
		МассивСтрок = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
		
		СвязаннаяСРазделениемТочкаСлияния = МассивСтрок[0].ТочкаМаршрута;
		
		НаборЗаписей = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		НаборЗаписей.Отбор.ТочкаСлияния.Установить(СвязаннаяСРазделениемТочкаСлияния);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
		
		МассивСтрок = СвязаннаяСРазделениемТочкаСлияния.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии, Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
	Иначе
		МассивСтрок = ТочкаМаршрута.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии,Вид",БизнесПроцесс.НомерВерсииКартыМаршрута,Перечисления.CRM_ВидыТочекМаршрута.Слияние));
	КонецЕсли;
	
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		ТочкаСлияния	= МассивСтрок[0].ТочкаМаршрута;
		НомерВетки		= МассивСтрок[0].НомерВетки;
		
		МассивВходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВходящиеТочки(ТочкаСлияния, БизнесПроцесс.НомерВерсииКартыМаршрута);
		
		// Проверим, есть ли записи в регистре результатов слияния, если есть, значит БП
		// еще не дошел до точки слияния и удаляем запись только для ветки, в которой выбрали 
		// точку маршрута. Иначе БП прошел точку слияния(или вообще еще не заходил в это разделение), тогда
		// для всех веток разделения, кроме той, в которой мы выбрали точку для смены этапа, создаем запись в регистре,
		// якобы эти ветки уже пройдены.
		Набор = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьНаборЗаписей();
		Набор.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		Набор.Отбор.ТочкаСлияния.Установить(ТочкаСлияния);
		Набор.Прочитать();
		
		СоздаемЗаписиПоВеткам = (Набор.Количество() = 0);
		
		Для Каждого СтруктураТочки Из МассивВходящихТочек Цикл
			
			ВходящаяТочка	= СтруктураТочки.ВходящаяТочка;
			МассивСтрок		= ВходящаяТочка.ТочкиРазделенияСлияния.НайтиСтроки(Новый Структура("НомерВерсии,ТочкаМаршрута",БизнесПроцесс.НомерВерсииКартыМаршрута,ТочкаСлияния));
			
			Если МассивСтрок[0].НомерВетки = НомерВетки Тогда
				
				НаборЗаписей = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
				НаборЗаписей.Отбор.ТочкаСлияния.Установить(ТочкаСлияния);
				НаборЗаписей.Отбор.ВходящаяТочка.Установить(ВходящаяТочка);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					НаборЗаписей.Очистить();
					НаборЗаписей.Записать();
				КонецЕсли;
				
			ИначеЕсли СоздаемЗаписиПоВеткам Тогда
				
				ЗаписьРегистра = РегистрыСведений.CRM_РезультатыСлиянияМаршрутов.СоздатьМенеджерЗаписи();
				ЗаписьРегистра.БизнесПроцесс	= БизнесПроцесс;
				ЗаписьРегистра.ТочкаСлияния		= ТочкаСлияния;
				ЗаписьРегистра.ВходящаяТочка	= ВходящаяТочка;
				ЗаписьРегистра.Записать();
				
			КонецЕсли;
		КонецЦикла;
		
		// Проверим, не принадлежит ли точка слияния ветке другого разделения.
		// Если принадлежит, то надо скорректировать записи регистра сведений
		// для этого разделения.
		ПроверитьТочкуНаПринадлежностьРазделению(БизнесПроцесс, ТочкаСлияния);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИсходящиеТочкиРазделения(БизнесПроцесс, ТочкаМаршрута, МассивТочек = Неопределено)
	
	Если МассивТочек = Неопределено Тогда
		МассивТочек = Новый Массив;
	КонецЕсли;
	
	МассивСтруктурТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящиеТочки(ТочкаМаршрута, БизнесПроцесс.НомерВерсииКартыМаршрута);
	
	Для Каждого РазделениеСтруктураТочки Из МассивСтруктурТочек Цикл
		Если РазделениеСтруктураТочки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Разделение Тогда
			ПолучитьИсходящиеТочкиРазделения(БизнесПроцесс, РазделениеСтруктураТочки.ИсходящаяТочка, МассивТочек);
		Иначе
			МассивТочек.Добавить(РазделениеСтруктураТочки.ИсходящаяТочка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивТочек;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеСледующегоИсполнителяУЭтапов(МассивПроверяемыхЭтапов)
	
	ОбъектЗнач = РеквизитФормыВзначение("Объект");
	
	Возврат CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителяУЭтапов(ОбъектЗнач.Ссылка, МассивПроверяемыхЭтапов);
	
КонецФункции

&НаСервере
Функция ВернутьСсылкуНаБизнесПроцесс()
	
	ОбъектЗнач = РеквизитФормыВзначение("Объект");
	Возврат ОбъектЗнач.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура КартаМаршрутаВыбор(Элемент)
	
	Если (ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыДействие"))
		ИЛИ (ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс"))
		ИЛИ (ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыРазделение")) Тогда
		
		МассивСтрок = табМаршрут_.НайтиСтроки(Новый Структура("ИмяТочки",Элемент.ТекущийЭлемент.Имя));
		ТекДанные = МассивСтрок[0];
		
		Если МассивСтрок[0].Текущая Тогда
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'Установить'") + " """+ТекДанные.ТочкаМаршрута + """" + НСтр("ru = ' как текущий этап бизнес-процесса?'") + "
		|Задачи текущих этапов будут выполнены автоматически.";
		ОписаниеОповещения = Новый ОписаниеОповещения("КартаМаршрутаВыборПродолжение", ЭтотОбъект, Новый Структура("Элемент, МассивСтрок", Элемент, МассивСтрок));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрутаВыборПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипЗнч(ДополнительныеПараметры.Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыДействие"))
	ИЛИ (ТипЗнч(ДополнительныеПараметры.Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс")) Тогда
		
		// Определим, принадлежит ли точка какой-либо ветке разделения, если да, то надо исключить
		// задачи других веток, т.к. их не откатываем.
		МассивИсключаемыхТочек = ПроверитьНаПринадлежностьРазделениюПолучитьИсключаемыеТочки(Объект.Ссылка, ДополнительныеПараметры.МассивСтрок[0].ТочкаМаршрута);
		
		МассивИсключаемыхТочек.Добавить(ДополнительныеПараметры.МассивСтрок[0].ТочкаМаршрута);
		
		// Проверим, указан ли исполнитель выбранного этапа. Если нет, то попросим указать.
		МассивПроверяемыхЭтапов = Новый Массив;
		МассивПроверяемыхЭтапов.Добавить(ДополнительныеПараметры.МассивСтрок[0].ТочкаМаршрута);
		
		СписокТочекМаршрута = ПроверитьНаличиеСледующегоИсполнителяУЭтапов(МассивПроверяемыхЭтапов);
		
		ДополнительныеПараметры.Вставить("МассивИсключаемыхТочек", МассивИсключаемыхТочек);
		
		Если СписокТочекМаршрута.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута", ВернутьСсылкуНаБизнесПроцесс(), СписокТочекМаршрута);
			ОписаниеОповещения = Новый ОписаниеОповещения("КартаМаршрутаВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя",ПараметрыФормы,ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		Иначе
			КартаМаршрутаВыборЗавершение(Истина, ДополнительныеПараметры);
		КонецЕсли;
		
	ИначеЕсли (ТипЗнч(ДополнительныеПараметры.Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыРазделение")) Тогда
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		МассивИсключаемыхТочек = ПроверитьНаПринадлежностьРазделениюПолучитьИсключаемыеТочки(Объект.Ссылка, ДополнительныеПараметры.МассивСтрок[0].ТочкаМаршрута);
		
		МассивИсходящихТочек = ПолучитьИсходящиеТочкиРазделения(Объект.Ссылка, ДополнительныеПараметры.МассивСтрок[0].ТочкаМаршрута);
		
		// Проверим, указан ли исполнитель выбранного этапа. Если нет, то попросим указать.
		СписокТочекМаршрута = ПроверитьНаличиеСледующегоИсполнителяУЭтапов(МассивИсходящихТочек);
		
		Если СписокТочекМаршрута.Количество() = 1 Тогда
			ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута", ВернутьСсылкуНаБизнесПроцесс(), СписокТочекМаршрута);
			ДополнительныеПараметры.Вставить("МассивИсключаемыхТочек", МассивИсключаемыхТочек);
			ДополнительныеПараметры.Вставить("МассивИсходящихТочек", МассивИсходящихТочек);
			ОписаниеОповещения = Новый ОписаниеОповещения("КартаМаршрутаВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		ИначеЕсли СписокТочекМаршрута.Количество() > 1 Тогда
			
			ТекстСообщения = НСтр("ru = 'Для этапов: '");
			Для Каждого ЭлементСписка Из СписокТочекМаршрута Цикл
				ТекстСообщения = ТекстСообщения + Строка(ЭлементСписка.Значение) + ";"
			КонецЦикла;
			ТекстСообщения = ТекстСообщения + НСтр("ru = ' не указаны исполнители.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрутаВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипЗнч(ДополнительныеПараметры.Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыДействие"))
	ИЛИ (ТипЗнч(ДополнительныеПараметры.Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс")) Тогда
		
		
		ЗавершитьВсеЗадачиБизнесПроцесса(Объект.Ссылка, ДополнительныеПараметры.МассивИсключаемыхТочек, ДополнительныеПараметры.МассивСтрок[0].ТочкаМаршрута);
		
		СоздатьЗадачуВТочкеОтката(Объект.Ссылка, ДополнительныеПараметры.МассивСтрок[0].ТочкаМаршрута);
		
		// Если точка отката принадлежит какой-либо ветке разделения, то надо для остальных веток
		// проверить наличие записей в регистре "CRM_РезультатыСлиянияМаршрутов", если их не, то добавить
		// для ветки в которой находится точка эту запись в регистре надо убить.
		ПроверитьТочкуНаПринадлежностьРазделению(Объект.Ссылка, ДополнительныеПараметры.МассивСтрок[0].ТочкаМаршрута);
		
		ОбновитьКартуМаршрутаЗаполнитьТаблицу();
		
		Оповестить("ВыполненаСменаЭтапаБизнесПроцесса",Объект.Ссылка);
		
	ИначеЕсли (ТипЗнч(ДополнительныеПараметры.Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыРазделение")) Тогда
		
		
		ЗавершитьВсеЗадачиБизнесПроцесса(Объект.Ссылка, ДополнительныеПараметры.МассивИсключаемыхТочек);
		
		Для Каждого ЗначениеМассива Из ДополнительныеПараметры.МассивИсходящихТочек Цикл
			
			СоздатьЗадачуВТочкеОтката(Объект.Ссылка, ЗначениеМассива);
			
		КонецЦикла;
		
		// Если точка отката принадлежит какой-либо ветке разделения, то надо для остальных веток
		// проверить наличие записей в регистре "CRM_РезультатыСлиянияМаршрутов", если их не, то добавить
		// для ветки в которой находится точка эту запись в регистре надо убить.
		ПроверитьТочкуНаПринадлежностьРазделению(Объект.Ссылка, ДополнительныеПараметры.МассивСтрок[0].ТочкаМаршрута);
		
		ОбновитьКартуМаршрутаЗаполнитьТаблицу();
		
		Оповестить("ВыполненаСменаЭтапаБизнесПроцесса",Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрутаПриАктивизации(Элемент)
	
	Если (ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыДействие"))
	ИЛИ (ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс")) Тогда
		МассивСтрок = табМаршрут_.НайтиСтроки(Новый Структура("ИмяТочки",Элемент.ТекущийЭлемент.Имя));
		Элементы.табМаршрут_.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	Иначе
		Элементы.табМаршрут_.ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура табМаршрут_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.табМаршрут_.ТекущиеДанные;
	
	ТекстВопроса = НСтр("ru = 'Установить'") + " """+ТекДанные.ТочкаМаршрута + """" + НСтр("ru = ' как текущий этап бизнес-процесса?'") + "
	|Задачи текущих этапов будут выполнены автоматически.";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("табМаршрут_ВыборЗавершение", ЭтотОбъект, ТекДанные);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура табМаршрут_ВыборЗавершение(Ответ, ТекДанные) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.Вид = ПредопределенноеЗначение("Перечисление.CRM_ВидыТочекМаршрута.Действие")
	ИЛИ ТекДанные.Вид = ПредопределенноеЗначение("Перечисление.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс") Тогда
	
		// Определим, принадлежит ли точка какой-либо ветке разделения, если да, то надо исключить
		// задачи других веток, т.к. их не откатываем.
		МассивИсключаемыхТочек = ПроверитьНаПринадлежностьРазделениюПолучитьИсключаемыеТочки(Объект.Ссылка,ТекДанные.ТочкаМаршрута);
		
		МассивИсключаемыхТочек.Добавить(ТекДанные.ТочкаМаршрута);
		
		ЗавершитьВсеЗадачиБизнесПроцесса(Объект.Ссылка, МассивИсключаемыхТочек, ТекДанные.ТочкаМаршрута);
		
		СоздатьЗадачуВТочкеОтката(Объект.Ссылка, ТекДанные.ТочкаМаршрута);
		
		// Если точка отката принадлежит какой-либо ветке разделения, то надо для остальных веток
		// проверить наличие записей в регистре "CRM_РезультатыСлиянияМаршрутов", если их не, то добавить
		// для ветки в которой находится точка эту запись в регистре надо убить.
		ПроверитьТочкуНаПринадлежностьРазделению(Объект.Ссылка, ТекДанные.ТочкаМаршрута);
		
		ОбновитьКартуМаршрутаЗаполнитьТаблицу();
		
	ИначеЕсли ТекДанные.Вид = ПредопределенноеЗначение("Перечисление.CRM_ВидыТочекМаршрута.Разделение") Тогда
		
		МассивИсключаемыхТочек = ПроверитьНаПринадлежностьРазделениюПолучитьИсключаемыеТочки(Объект.Ссылка,ТекДанные.ТочкаМаршрута);
		
		ЗавершитьВсеЗадачиБизнесПроцесса(Объект.Ссылка, МассивИсключаемыхТочек);
		
		МассивИсходящихТочек = ПолучитьИсходящиеТочкиРазделения(Объект.Ссылка, ТекДанные.ТочкаМаршрута);
		
		Для Каждого ЗначениеМассива Из МассивИсходящихТочек Цикл
			
			СоздатьЗадачуВТочкеОтката(Объект.Ссылка, ЗначениеМассива);
			
		КонецЦикла;
		
		// Если точка отката принадлежит какой-либо ветке разделения, то надо для остальных веток
		// проверить наличие записей в регистре "CRM_РезультатыСлиянияМаршрутов", если их не, то добавить
		// для ветки в которой находится точка эту запись в регистре надо убить.
		ПроверитьТочкуНаПринадлежностьРазделению(Объект.Ссылка, ТекДанные.ТочкаМаршрута);
		
		ОбновитьКартуМаршрутаЗаполнитьТаблицу();
		
	КонецЕсли;
	
КонецПроцедуры
