
&НаКлиенте
Перем КэшированныеЗначения, ПризнакВыполнения, ВыполняетсяОбработкаРасшифровки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФормироватьМакет = Истина;
	
	УстановитьУсловноеОформление();
	
	ЭтотОбъект.Заголовок 			= Объект.Наименование;
	Важность 						= Формат(Объект.Важность, "");
	НачальныйПризнакВыполнения 		= Объект.Выполнена;
	ТекущийПользователь 			= Пользователи.ТекущийПользователь();
	Если Не ЗначениеЗаполнено(Объект.вогНаправлениеДеятельности) Тогда
		Объект.вогНаправлениеДеятельности 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущийПользователь, "CRM_НаправлениеДеятельности");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		НомерВерсииКартыМаршрута = Объект.БизнесПроцесс.НомерВерсииКартыМаршрута;
	КонецЕсли;
	
	ДобавлениеКнопокНаПанель();
	
	ЗаполнитьТаблицыЗадач();
	вогБизнесПроцессыИЗадачиСервер.ЗаполнитьПредметы(ЭтотОбъект, Объект.Ссылка, "ТаблицаПунктыЗадач");
	
	ЗаполнитьТаблицуФайлов(Объект.БизнесПроцесс);
	ЗаполнитьТаблицуФайлов(Объект.Ссылка);
	
	РассчитатьИсполнение();
	
	СформироватьСоответствиеЭлементов();
	
	Если Не ФормироватьМакет Тогда
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаПунктыЗадач Цикл
			СоздатьЭлементыЗадач(СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;
	
	НастроитьЗаголовкиЭлементовФормы();
	
	ЗаполнитьСписокИсполнителей();
	ОпределитьРольТекущегоПользователя();
	НастроитьЗаголовкиЭлементовФормы();
	
	Если Не ФормироватьМакет Тогда
		УстановитьУсловноеОформлениеТаблицыРезультат();
	КонецЕсли;
	
	СписокВозможныхИсполнителей = ПолучитьСписокВозможныхИсполнителей();
	
	ДоступноПользователю = (Не СписокВозможныхИсполнителей.НайтиПоЗначению(ТекущийПользователь) = Неопределено);
	
	УстановитьВидимостьДоступностьЭлементовФормы(ДоступноПользователю);
	
	// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		Исполнитель = Объект.Исполнитель;
	Иначе
		Исполнитель = Объект.ОсновнойОбъектАдресации;
	КонецЕсли;
	// -- VOG Солодов В.В. 03.12.2020 CRM-1099
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПризнакВыполнения = Ложь;
	// ++ VOG Солодов В.В. 09.12.2020 CRM-1113
	ВыполняетсяОбработкаРасшифровки = Ложь;
	// -- VOG Солодов В.В. 09.12.2020 CRM-1113
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ПроверитьНаКорректность()
		Или ПризнакВыполнения Тогда
		
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	вогБизнесПроцессыИЗадачиСервер.ЗаписатьПредметы(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохранение предметных пунктов
	НаборЗаписейРезультатыВыполнения = РегистрыСведений.вогРезультатыВыполненияЗадачПоручений.СоздатьНаборЗаписей();
	НаборЗаписейРезультатыВыполнения.Отбор.Объект.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписейРезультатыВыполнения.Прочитать();
	НаборЗаписейРезультатыВыполнения.Очистить();
	
	Если ТекущийОбъект.ПринятаКИсполнению Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаПунктыЗадач Цикл
			
			ИмяТаблицыРезультат = ПолучитьИмяТаблицыРезультат(СтрокаТабличнойЧасти.ИдентификаторЗадачи);
			ТаблицаРезультат 	= ЭтотОбъект[ИмяТаблицыРезультат].Выгрузить();
			
			ИдентификаторЗадачи = Новый УникальныйИдентификатор(СтрЗаменить(СтрокаТабличнойЧасти.ИдентификаторЗадачи, "_", "-"));
			
			НоваяЗапись 	= НаборЗаписейРезультатыВыполнения.Добавить();
			НоваяЗапись.Объект 				= ТекущийОбъект.Ссылка;
			Если Не ПустаяСтрока(СтрокаТабличнойЧасти.Идентификатор) Тогда
				Идентификатор 				= Новый УникальныйИдентификатор(СтрЗаменить(СтрокаТабличнойЧасти.Идентификатор, "_", "-"));
				НоваяЗапись.Идентификатор 	= Идентификатор;
			КонецЕсли;
			НоваяЗапись.ИдентификаторЗадачи = ИдентификаторЗадачи;
			НоваяЗапись.Порядок 			= СтрокаТабличнойЧасти.НомерСтроки;
			НоваяЗапись.Пункт 				= СтрокаТабличнойЧасти.Пункт;
			НоваяЗапись.Комментарий 		= Новый ХранилищеЗначения(СтрокаТабличнойЧасти.КомментарийИсполнитель);
			НоваяЗапись.Результат 			= Новый ХранилищеЗначения(ТаблицаРезультат);
			НоваяЗапись.Предмет 			= СтрокаТабличнойЧасти.Предмет;
			НоваяЗапись.НаборЗадач 			= СтрокаТабличнойЧасти.НаборЗадач;
			НоваяЗапись.ТиповаяЗадача 		= СтрокаТабличнойЧасти.ТиповаяЗадача;
			НоваяЗапись.ПринятоКонтролером 	= СтрокаТабличнойЧасти.Принято;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписейРезультатыВыполнения.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ЕстьИзменения = Ложь;
	
	Если (ИмяСобытия = "Документ.вогАнкета.Запись"
			Или ИмяСобытия = "Документ.CRM_Мероприятие.Запись"
			Или ИмяСобытия = "Документ.вогКомандировка.Запись")
		И (Параметр.ДокументОснование = Объект.Ссылка
			Или Параметр.ДокументОснование = Объект.БизнесПроцесс) Тогда
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Предмет", Параметр.Предмет);
		
		НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			
			ИмяТаблицыРезультат = ПолучитьИмяТаблицыРезультат(СтрокаТабличнойЧасти.ИдентификаторЗадачи);
			
			Для Каждого СтрокаЗначение Из ЭтотОбъект[ИмяТаблицыРезультат] Цикл
				
				Если ТипЗнч(Источник) = Тип("ДокументСсылка.вогАнкета") Тогда
					ПроверяемыйТип 		= ТипЗнч(Параметр.ВариантОпроса);
					ПроверяемоеЗначение = Параметр.ВариантОпроса;
				Иначе
					ПроверяемыйТип 		= ТипЗнч(Источник);
					ПроверяемоеЗначение = Неопределено;
				КонецЕсли;
				
				Если ТипЗнч(СтрокаЗначение.ЗначениеИсполнитель) = ПроверяемыйТип
					И (ПроверяемоеЗначение = Неопределено Или СтрокаЗначение.ЗначениеИсполнитель = ПроверяемоеЗначение) Тогда
					
					ЕстьИзменения = Истина;
					
					СтрокаЗначение.ЗначениеИсполнитель 	= Источник;
					УстановитьВыполнениеПриложенияЗадачи(ЭтотОбъект, СтрокаЗначение, ИмяТаблицыРезультат);
					РассчитатьИсполнение();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "Запись_Файл"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Событие")
		И Параметр.Свойство("ВладелецФайла")
		И Параметр.ВладелецФайла = Объект.Ссылка Тогда
		
		ЕстьИзменения = Истина;
		
		ФайлРедактировался = (Параметр.Событие = "ЗаконченоРедактирование");
		ЗаполнитьТаблицуФайлов(Объект.Ссылка, Истина, Истина, ФайлРедактировался, Источник);
		
	КонецЕсли;
	
	Если ЕстьИзменения И ФормироватьМакет Тогда
		
		ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
		
		Если Не ТекущиеДанные = Неопределено Тогда
			МакетЗадачи = СформироватьМакетЗадачи(Элементы.Предметы.ТекущиеДанные.Предмет);
			Элементы.МакетЗадачи.ТекущаяОбласть = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив")
		И ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		// ++ VOG Солодов В.В. 24.11.2020 CRM-1010
		И ИсточникВыбора.ВладелецФормы = ЭтотОбъект Тогда
		// До изменения
		//И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.вогПодборКлиентскаяБаза" Тогда
		// -- VOG Солодов В.В. 24.11.2020 CRM-1010
		
		ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ДополнительноеЗначение = ДеревоПредметы.ПолучитьЭлементы()[0];
		Иначе
			ДополнительноеЗначение = ТекущиеДанные;
		КонецЕсли;
		
		ПредметыПередНачаломДобавленияЗавершение(ВыбранноеЗначение, ДополнительноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПризнакВыполнения Тогда
		Отказ 				= Истина;
		ПризнакВыполнения 	= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередВыполнением(Отказ)
	
	ПризнакВыполнения = Истина;
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Выполнено", Ложь);
	
	НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		//ПризнакВыполнения = Ложь;
		Отказ = Истина;
		
		ТекстДополнения = "";
		
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			
			Предмет = СтрокаТабличнойЧасти.Предмет;
			
			ИмяТаблицыРезультат = ПолучитьИмяТаблицыРезультат(СтрокаТабличнойЧасти.ИдентификаторЗадачи);
			
			МассивСтрок = Новый Массив;
			Для Каждого СтрокаРезультат Из ЭтотОбъект[ИмяТаблицыРезультат] Цикл
				
				Если Не СтрокаРезультат.Пометка Тогда
					МассивСтрок.Добавить(СтрШаблон(НСтр("ru = '%1: %2'"), Предмет, СтрокаРезультат.ЗначениеАвтор));
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПустаяСтрока(ТекстДополнения) Тогда
				Разделитель = Символы.ПС;
			Иначе
				Разделитель = ";" + Символы.ПС;
			КонецЕсли;
			
			ТекстДополнения = ТекстДополнения + Разделитель + СтрСоединить(МассивСтрок, ";" + Символы.ПС);
			
		КонецЦикла;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВопросаОВыполнении", ЭтотОбъект);
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Есть невыполненные пункты задачи. %1%2%2Выполнить задачу?'"), ТекстДополнения, Символы.ПС);
		
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПризнакВыполнения = Ложь;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОВыполнении(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПризнакВыполнения = Ложь;
	Объект.Выполнена = Истина;
	
	Объект.Исполнитель 		= ТекущийПользователь;
	Объект.ДатаИсполнения 	= ТекущаяДата();
	ДатаСтрокой 			= CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(Объект.ДатаИсполнения);
	
	Объект.CRM_ПоследнееДействиеСтрокой = СтрШаблон(НСтр("ru = '%1 Выполнена -> %2'"), ДатаСтрокой, Объект.Исполнитель);
	
	Объект.РезультатВыполнения = СтрШаблон(
		НСтр("ru = '%1 Выполнена -> %2'"),
		ДатаСтрокой,
		Объект.Исполнитель);
	
	ЗафиксироватьВыполнениеНаСервере();
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СотрудникНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросНаИзменениеИсполнителяПриИзменении(Элемент)
	
	Если Не ЗапросНаИзменениеИсполнителя Тогда
		НовыйИсполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НовыйИсполнитель",
		"Доступность",
		ЗапросНаИзменениеИсполнителя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИзменитьИсполнителя",
		"Доступность",
		ЗапросНаИзменениеИсполнителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросНаИзменениеКрайнегоСрокаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КрайнийСрок",
		"Доступность",
		ЗапросНаИзменениеКрайнегоСрока);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СогласоватьИзменениеКрайнегоСрока",
		"Доступность",
		ЗапросНаИзменениеКрайнегоСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КрайнийСрокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаОтсчета", 		ТекущаяДата());
	ПараметрыФормы.Вставить("СрокИсполнения", 	КрайнийСрок);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыборКрайнегоСрокаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.ВыборСрокаИсполнения",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКрайнегоСрокаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КрайнийСрок = Результат;
	
КонецПроцедуры

#Область ОбработчикиСобытийПоляМакетЗадачи

&НаКлиенте
Процедура МакетЗадачиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МакетЗадачиПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИдентификаторЗадачи = Область.Расшифровка.Идентификатор;
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ИдентификаторЗадачи", ИдентификаторЗадачи);
	
	НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		
		Если ПустаяСтрока(Область.Текст) Тогда
			
			ТекстСообщения = НСтр("ru = 'Вы не ввели наименование задачи. Восстановлено предыдущее значение.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			Область.Значение = СтрокаТабличнойЧасти.Пункт;
			
		Иначе
			СтрокаТабличнойЧасти.Пункт = Область.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураКэширования = Новый Структура;
	СтруктураКэширования.Вставить("ИмяОбласти", Область.Имя);
	СтруктураКэширования.Вставить("Обновлять", 	Ложь);
	
	КэшированныеЗначения = СтруктураКэширования;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МакетЗадачиПриАктивизации(Элемент)
	
	Если ТипЗнч(Элемент.ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		
		Если Не ТолькоПросмотр
			И Не Элемент.ТекущаяОбласть.Расшифровка = Неопределено Тогда
			ВыполнитьКомандуМакета(Элемент.ТекущаяОбласть.Расшифровка);
		КонецЕсли;
		
		КэшированныеЗначения = Неопределено;
		ОчиститьВыделенныеОбласти();
		
	Иначе
		
		ВыполнятьОбработку = Истина;
		
		ИмяОбласти 			= Элемент.ТекущаяОбласть.Имя;
		
		Если СтрНайти(ИмяОбласти, "C") = 0 Тогда
			ОчиститьВыделенныеОбласти();
			Возврат;
		КонецЕсли;
		
		МассивИменОбластей 	= СтрРазделить(ИмяОбласти, ":", Истина);
		
		Если ТипЗнч(КэшированныеЗначения) = Тип("Структура")
			И КэшированныеЗначения.ИмяОбласти = ИмяОбласти
			И Не КэшированныеЗначения.Обновлять Тогда
			ВыполнятьОбработку = Ложь;
		КонецЕсли;
		
		СтруктураКэширования = Новый Структура;
		СтруктураКэширования.Вставить("ИмяОбласти", ИмяОбласти);
		СтруктураКэширования.Вставить("Обновлять", 	Ложь);
		
		Если МассивИменОбластей.Количество() > 0 Тогда
			
			ПерваяОбласть 		= МакетЗадачи.Область(МассивИменОбластей[0]);
			ИмяПервойОбласти 	= ПерваяОбласть.Имя;
			
			Если Не ПерваяОбласть.Расшифровка = Неопределено
				И (СтрНайти(ИмяПервойОбласти, "C11") > 0
					Или СтрНайти(ИмяПервойОбласти, "C2") > 0) Тогда
				
				Если СтрНайти(ИмяПервойОбласти, "C11") > 0 Тогда
					НомерПервойКолонки 		= "2";
					НомерПоследнейКолонки 	= "9";
				ИначеЕсли СтрНайти(ИмяПервойОбласти, "C2") > 0 Тогда
					НомерПервойКолонки 		= "11";
					НомерПоследнейКолонки 	= "18";
				КонецЕсли;
				
				МассивИменДиапазона = Новый Массив;
				МассивИменДиапазона.Добавить(СтрШаблон("R%1C%2", ПерваяОбласть.Верх, НомерПервойКолонки));
				МассивИменДиапазона.Добавить(СтрШаблон("R%1C%2", ПерваяОбласть.Верх, НомерПоследнейКолонки));
				
				ИмяДиапазонаОбластей = СтрСоединить(МассивИменДиапазона, ":");
				
				НоваяВыделяемаяОбласть = МакетЗадачи.Область(ИмяДиапазонаОбластей);
				
				ВыделенныеОбласти = Элементы.МакетЗадачи.ПолучитьВыделенныеОбласти();
				
				ОбластьВыделена = Ложь;
				Для Каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
					Если ВыделеннаяОбласть.Имя = ИмяДиапазонаОбластей Тогда
						ОбластьВыделена = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ОбластьВыделена Тогда
					
					ВыделенныеОбласти.Добавить(НоваяВыделяемаяОбласть);
					
					// ++ VOG Солодов В.В. 21.05.2021 DEV-518
					// Добавлено условие
					Если Не ТипЗнч(ПерваяОбласть.Расшифровка) = Тип("СправочникСсылка.ЗадачаИсполнителяПрисоединенныеФайлы")
						И Не ТипЗнч(ПерваяОбласть.Расшифровка) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы") Тогда
						// -- VOG Солодов В.В. 21.05.2021 DEV-518
						
						Если СтрНайти(ИмяПервойОбласти, "C11") > 0
							//И Не ТолькоПросмотр //VOG Солодов В.В. 24.11.2020 CRM-1054 // Закомментировал
							И Не ВыполняетсяОбработкаРасшифровки // VOG Солодов В.В. 09.12.2020 CRM-1113
							И ВыполнятьОбработку Тогда
							МакетЗадачиОбработатьРасшифровку(ПерваяОбласть.Расшифровка);
						КонецЕсли;
						
					КонецЕсли;
					
					Элементы.МакетЗадачи.УстановитьВыделенныеОбласти(ВыделенныеОбласти);
					
				КонецЕсли;
				
				СтруктураКэширования.Обновлять = Истина;
				КэшированныеЗначения = СтруктураКэширования;
				
			ИначеЕсли СтрЗаканчиваетсяНа(ИмяПервойОбласти, "C3") Тогда
				// это поле пункт
				
				Если ТипЗнч(ПерваяОбласть.Расшифровка) = Тип("Структура")
					И ПерваяОбласть.ЭлементУправления = Неопределено Тогда
					
					Если ВыполнятьОбработку Тогда
						// ++ VOG Солодов В.В. 17.12.2020 DEV-20
						ПерваяОбласть.Защита = Не ПерваяОбласть.Расшифровка.Редактирование;
						// До изменения
						//ПерваяОбласть.Защита = Не (ПерваяОбласть.Расшифровка.ДобавленИзЗадачи И Не ТолькоПросмотр);
						// -- VOG Солодов В.В. 17.12.2020 DEV-20
					КонецЕсли;
					
					СтруктураКэширования.Обновлять = Истина;
					КэшированныеЗначения = СтруктураКэширования;
					
				Иначе
					ОчиститьВыделенныеОбласти();
				КонецЕсли;
				
			ИначеЕсли СтрЗаканчиваетсяНа(ИмяПервойОбласти, "C1")
				И ПерваяОбласть.Расшифровка = Элементы.Предметы.ТекущиеДанные.Предмет Тогда
				// это поле предмет
				
				Если Не ТипЗнч(ПерваяОбласть.Расшифровка) = Тип("Строка")
					И ВыполнятьОбработку Тогда
					//ПоказатьЗначение(Неопределено, Элементы.Предметы.ТекущиеДанные.Предмет);
				КонецЕсли;
				
				СтруктураКэширования.Обновлять = Истина;
				КэшированныеЗначения = СтруктураКэширования;
				
			ИначеЕсли Не ИмяПервойОбласти = "R1C1" Тогда
				
				ОчиститьВыделенныеОбласти();
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 21.05.2021 DEV-518
&НаКлиенте
Процедура МакетЗадачиВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.ТекущаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента")
		И ЗначениеЗаполнено(Элемент.ТекущаяОбласть.Расшифровка) Тогда
		
		Расшифровка = Элемент.ТекущаяОбласть.Расшифровка;
		
		Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")
			Или ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ЗадачаИсполнителяПрисоединенныеФайлы") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(Расшифровка, УникальныйИдентификатор);
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // -- VOG Солодов В.В. 21.05.2021 DEV-518

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПредметы

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если Не ТекущиеДанные = Неопределено Тогда
			Отказ = Элемент.ТекущиеДанные.Группа;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Отказ = Истина;
	
	СписокВыбора = вогБизнесПроцессыИЗадачиВызовСервера.ПолучитьСписокТиповПредметов();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПредметыПередНачаломДобавленияФрагмент",
		ЭтотОбъект,
		Элемент.ТекущиеДанные);
	
	ПоказатьВыборИзСписка(ОповещениеОЗавершении, СписокВыбора, Элементы.Предметы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавленияФрагмент(ВыбранныйТип, ДополнительноеЗначение) Экспорт
	
	вогБизнесПроцессыИЗадачиКлиент.ПредметыПередНачаломДобавленияФрагмент(
		ЭтотОбъект,
		ВыбранныйТип,
		ДополнительноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавленияЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыДерева = ДополнительныеПараметры.ПолучитьЭлементы();
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		МассивВыбранных = ВыбранноеЗначение;
	Иначе
		МассивВыбранных = Новый Массив;
		МассивВыбранных.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВыбранных Цикл
		НоваяСтрока = ЭлементыДерева.Добавить();
		НоваяСтрока.Предмет = ЭлементМассива;
	КонецЦикла;
	
	Модифицированность = Истина;
	
	НастроитьЗаголовкиЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПредметНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	вогБизнесПроцессыИЗадачиКлиент.ПредметыПредметНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПредметНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	ТекущиеДанные.Предмет = ВыбранноеЗначение;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриИзменении(Элемент)
	
	НастроитьЗаголовкиЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	
	ВидимостьГруппыДобавления = Не(ТекущиеДанные = Неопределено);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаДобавлениеЧекЛиста",
		"Видимость",
		ВидимостьГруппыДобавления);
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ФормироватьМакет Тогда
			
			МакетЗадачи = СформироватьМакетЗадачи(ТекущиеДанные.Предмет);
			
			Элементы.МакетЗадачи.ТекущаяОбласть = Неопределено;
			
		Иначе
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Предмет", ТекущиеДанные.Предмет);
			
			НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
				
				Если ТипЗнч(СтрокаТабличнойЧасти.Предмет) = Тип("Строка") Тогда
					ИмяСтраницы = "Страница_ОбщиеЗадачи";
				Иначе
					
					ИдентификаторПредмета 	= СтрокаТабличнойЧасти.Предмет.УникальныйИдентификатор();
					ИмяСтраницы = СтрШаблон(
						"Страница_%1", вогБизнесПроцессыИЗадачиКлиент.СформироватьУникальныйИдентификатор(ИдентификаторПредмета));
					
				КонецЕсли;
				
				СтраницаЭлементов = Элементы.Найти(ИмяСтраницы);
				
				Прервать;
				
			КонецЦикла;
			
			Если СтраницаЭлементов = Неопределено Тогда
				СтраницаЭлементов = Элементы.СтраницаПустая;
			КонецЕсли;
			
			Элементы.СтраницыЧекЛиста.ТекущаяСтраница = СтраницаЭлементов;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ТекущиеДанные.ПредметБП И Не РежимРедактирования Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Отказ = Элемент.ТекущиеДанные.Группа;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	вогБизнесПроцессыИЗадачиКлиент.ПредметыПеретаскивание(
		ЭтотОбъект,
		Элемент,
		ПараметрыПеретаскивания,
		СтандартнаяОбработка,
		Строка,
		Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	вогБизнесПроцессыИЗадачиКлиент.ПредметыПроверкаПеретаскивания(
		ЭтотОбъект,
		Элемент,
		ПараметрыПеретаскивания,
		СтандартнаяОбработка,
		Строка,
		Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	НастроитьЗаголовкиЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	
	Если Не ТипЗнч(ТекущиеДанные.Предмет) = Тип("Строка") Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Предмет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыЗадачи

&НаКлиенте
Процедура ЗадачаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ЧекЛистПункт) Тогда
		
		ТекстСообщения = НСтр("ru = 'Укажите, что нужно сделать.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ЧекЛистПункт");
		
		Возврат;
		
	КонецЕсли;
	
	ВыполняетсяДобавлениеТиповогоПункта = Ложь;
	ПодключитьОбработчикОжидания("ОбработчикДобавленияПунктаЧекЛиста", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗадачаПриИзменении(Элемент)
	
	ИдентификаторЭлемента 	= СтрЗаменить(Элемент.Имя, "Пункт_", "");
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ИдентификаторЗадачи", ИдентификаторЭлемента);
	
	НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		СтрокаТабличнойЧасти.Пункт = ЭтотОбъект[Элемент.Имя];
	КонецЦикла;
	
	Модифицированность = Истина;
	
	УстановитьВидимостьДоступностьЭлементовЧекЛиста(ИдентификаторЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы[Элемент.Имя].ТекущиеДанные;
	
	Если СтрНайти(Элемент.Имя, "РезультатИсполнитель_") > 0 Тогда
		
		ИдентификаторЭлемента 	= СтрЗаменить(Элемент.Имя, "РезультатИсполнитель_", "");
		
		Если ТипЗнч(ТекущиеДанные.ЗначениеИсполнитель) = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
			
			СтруктураЗначений 		= ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(ИдентификаторЭлемента, "Предмет");
			
			Респондент 				= СтруктураЗначений.Предмет;
			ВариантОпроса 			= ТекущиеДанные.ЗначениеИсполнитель;
			
			СтруктураФормирования 	= ПолучитьСтруктуруФормированияАнкеты(ВариантОпроса, Респондент);
			
			Если СтруктураФормирования = Неопределено Тогда
				
				ЗначенияЗаполнения = Новый Структура;
				ЗначенияЗаполнения.Вставить("ВариантОпроса", 		ВариантОпроса);
				ЗначенияЗаполнения.Вставить("Респондент", 			Респондент);
				ЗначенияЗаполнения.Вставить("ДокументОснование", 	Объект.Ссылка);
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
				
				ОткрытьФорму("Документ.вогАнкета.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
				
			Иначе
				
				Если Не СтруктураФормирования.УсловияВыполнены Тогда
					
					ШаблонСообщения = НСтр("ru = '%1 не соответствует условиям для создания данной анкеты.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Респондент);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					
				Иначе
					
					Параметр1 = СтруктураФормирования.Параметр1;
					Параметр2 = СтруктураФормирования.Параметр2;
					Параметр3 = СтруктураФормирования.Параметр3;
					Параметр4 = СтруктураФормирования.Параметр4;
					Параметр5 = СтруктураФормирования.Параметр5;
					
					ОбработчикФормирования = СформироватьОбработчикСозданияАнкеты(СтруктураФормирования.Обработчик);
					
					Попытка
						Выполнить(ОбработчикФормирования);
					Исключение
						
						ШаблонСообщения = НСтр("ru = 'Не удалось выполнить команду. Причина: %1'");
						ТекстСообщения 	= СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
						
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущиеДанные.ЗначениеИсполнитель) = Тип("ДокументСсылка.CRM_Мероприятие") Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ЗначениеИсполнитель) Тогда
				
				ПоказатьЗначение(Неопределено, ТекущиеДанные.ЗначениеИсполнитель);
				
			Иначе
				
				СтруктураЗначений = ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(
					ИдентификаторЭлемента, "Пункт");
				
				Предмет = СтруктураЗначений.Предмет;
				
				ЗначенияЗаполнения = Новый Структура;
				ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
				
				ВидВзаимодействия = ОпределитьВидВзаимодействияМероприятия(Предмет);
				
				Если Не ВидВзаимодействия = Неопределено Тогда
					ЗначенияЗаполнения.Вставить("ВидВзаимодействия", 	ВидВзаимодействия);
				КонецЕсли;
				
				Если ТипЗнч(Предмет) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
					ЗначенияЗаполнения.Вставить("ТорговаяТочка", 		Предмет);
				ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Партнеры") Тогда
					ЗначенияЗаполнения.Вставить("Партнер", 				Предмет);
				КонецЕсли;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ЗначенияЗаполнения", 	ЗначенияЗаполнения);
				
				ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборРезультатаЗавершение", ЭтотОбъект);
				
				ОткрытьФорму(
					"Документ.CRM_Мероприятие.Форма.ФормаДокумента",
					ПараметрыФормы,
					ЭтотОбъект,
					,
					,
					,
					ОписаниеОповещенияОЗакрытии);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущиеДанные.ЗначениеИсполнитель) = Тип("ДокументСсылка.вогКомандировка") Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ЗначениеИсполнитель) Тогда
				
				ПоказатьЗначение(Неопределено, ТекущиеДанные.ЗначениеИсполнитель);
				
			Иначе
				
				ЗначенияЗаполнения = Новый Структура;
				ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
				
				ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборРезультатаЗавершение", ЭтотОбъект);
				
				ОткрытьФорму(
					"Документ.вогКомандировка.Форма.ФормаДокумента",
					ПараметрыФормы,
					ЭтотОбъект,
					,
					,
					,
					ОписаниеОповещенияОЗакрытии);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущиеДанные.ЗначениеИсполнитель) = Тип("Строка") Тогда
			
			ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
				"ВыборРезультатаЗавершение", ЭтотОбъект, ИдентификаторЭлемента);
			
			ПоказатьВводСтроки(
				ОписаниеОповещенияОЗакрытии,
				ТекущиеДанные.ЗначениеИсполнитель,
				НСтр("ru = 'Введите результат выполнения'"),
				,
				Истина);
			
		ИначеЕсли ТипЗнч(ТекущиеДанные.ЗначениеИсполнитель) = Тип("ДокументСсылка.вогАнкета") Тогда
			
			ПоказатьЗначение(Неопределено, ТекущиеДанные.ЗначениеИсполнитель);
			
		ИначеЕсли ТипЗнч(ТекущиеДанные.ЗначениеИсполнитель) = Тип("СправочникСсылка.вогВидыПрисоединенныхФайлов") Тогда
			
			СтруктураЗначений = ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(
				ИдентификаторЭлемента, "Пункт");
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Идентификатор", 		ИдентификаторЭлемента);
			ДополнительныеПараметры.Вставить("НаименованиеЗадачи", 	СтруктураЗначений.Пункт);
			ДополнительныеПараметры.Вставить("ВидФайла", 			ТекущиеДанные.ЗначениеИсполнитель);
			
			вогБизнесПроцессыИЗадачиКлиент.ОткрытьФормуПрисоединенныхФайловЗавершение(
				ЭтотОбъект,
				Объект.Ссылка,
				ДополнительныеПараметры);
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(Элемент.Имя, "ФайлыИсполнитель_") > 0
		Или СтрНайти(Элемент.Имя, "ФайлыАвтор_") > 0 Тогда
		
		Если СтрНайти(Элемент.Имя, "ФайлыИсполнитель_") > 0 Тогда
			РежимРедактированияФайла 	= Истина;
		ИначеЕсли СтрНайти(Элемент.Имя, "ФайлыАвтор_") > 0 Тогда
			РежимРедактированияФайла 	= Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ТекущиеДанные.Значение) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")
			Или ТипЗнч(ТекущиеДанные.Значение) = Тип("СправочникСсылка.ЗадачаИсполнителяПрисоединенныеФайлы") Тогда
			
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущиеДанные.Значение,,, РежимРедактированияФайла);
			
			Если РежимРедактированияФайла Тогда
				РежимРедактированияФайла = РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла);
			КонецЕсли;
			
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, РежимРедактированияФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОписаниеОповещенияДополнительнойКомандыСервер(Значение, ДополнительноеЗначение) Экспорт
	
	вогУправлениеИнтерфейсомСервер.ВыполнитьКодКомандыНаСервере(
		Значение,
		ДополнительноеЗначение,
		ЭтотОбъект,
		ЭтотОбъект,
		Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборРезультатаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполняетсяОбработкаРасшифровки = Ложь; // VOG Солодов В.В. 09.12.2020 CRM-1113
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда // VOG Солодов В.В. 07.12.2020 CRM-1054 // Добавлено условие
		Возврат;
	КонецЕсли;
	
	Если ФормироватьМакет Тогда
		
		ИдентификаторЭлемента = ДополнительныеПараметры.Идентификатор;
		
		ИмяТаблицыРезультат = ПолучитьИмяТаблицыРезультат(ИдентификаторЭлемента);
		ТекущиеДанные = ЭтотОбъект[ИмяТаблицыРезультат].Получить(ДополнительныеПараметры.ИндексСтроки);
		ТекущиеДанные.ЗначениеИсполнитель = Результат;
		
	Иначе
		
		ИдентификаторЭлемента = ДополнительныеПараметры;
		
		ТекущиеДанные = Элементы["РезультатИсполнитель_" + ИдентификаторЭлемента].ТекущиеДанные;
		
		Если ТипЗнч(Результат) = Тип("Строка") Тогда
			ТекущиеДанные.ЗначениеИсполнитель = Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяТаблицыРезультат = ПолучитьИмяТаблицыРезультат(ИдентификаторЭлемента);
	УстановитьВыполнениеПриложенияЗадачи(ЭтотОбъект, ТекущиеДанные, ИмяТаблицыРезультат);
	РассчитатьИсполнение();
	
	Если ФормироватьМакет Тогда
		
		МакетЗадачи = СформироватьМакетЗадачи(Элементы.Предметы.ТекущиеДанные.Предмет);
		
		//ИмяОбласти 		= СтрШаблон("R%1C%2", Число(Элементы.МакетЗадачи.ТекущаяОбласть.Верх) - 6, 3);
		//ОбластьПункт 	= МакетЗадачи.Область(ИмяОбласти);
		
		Элементы.МакетЗадачи.ТекущаяОбласть = Неопределено;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаЗадачиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные 			= Элементы[Элемент.Имя].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЭлемента 	= СтрЗаменить(Элемент.Имя, "РезультатИсполнитель_", "");
	ИмяТаблицыРезультат 	= ПолучитьИмяТаблицыРезультат( ИдентификаторЭлемента);
	
	//Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяТаблицыРезультат) Тогда
		
		ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
		
		МассивИменТаблиц = Новый Массив;
		МассивИменТаблиц.Добавить(СтрЗаменить(Элемент.Имя, "Исполнитель", "Автор"));
		МассивИменТаблиц.Добавить(СтрЗаменить(Элемент.Имя, "Исполнитель", "Выполнения"));
		
		Для Каждого ИмяЭлемента Из МассивИменТаблиц Цикл
			
			ЭлементТаблица = Элементы.Найти(ИмяЭлемента);
			
			Если Не ЭлементТаблица = Неопределено Тогда
				
				ЭлементТаблица.ВыделенныеСтроки.Очистить();
				ЭлементТаблица.ВыделенныеСтроки.Добавить(ИдентификаторСтроки);
				
				ЭлементТаблица.ТекущаяСтрока = ИдентификаторСтроки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Редактировать(Команда)
	
	РедактироватьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиГруппа(Команда)
	
	ИмяГруппы = СтрЗаменить(Команда.Имя, "Перейти", "Группа");
	
	ЭлементГруппа = Элементы.Найти(ИмяГруппы);
	
	Если Не ЭлементГруппа = Неопределено Тогда
		
		ВидимостьЭлемента = Элементы[ИмяГруппы].Видимость;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			ИмяГруппы,
			"Видимость",
			Не ВидимостьЭлемента);
			
	ИначеЕсли ИмяГруппы = "ГруппаФайлы" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		Если ТолькоПросмотр Тогда
			ДополнительныеПараметры.Вставить("ТолькоПросмотр", Истина);
		КонецЕсли;
		
		вогБизнесПроцессыИЗадачиКлиент.ОткрытьФормуПрисоединенныхФайловЗавершение(
			ЭтотОбъект,
			Объект.Ссылка,
			ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПрименить(Команда)
	
	Если Не ЗначениеЗаполнено(ЧекЛистПункт) Тогда
		
		ОчиститьСообщения();
		
		ТекстСообщения = НСтр("ru = 'Заполните что нужно сделать.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ЧекЛистПункт");
		
		Возврат;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикДобавленияПунктаЧекЛиста", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистДобавить(Команда)
	
	Элементы.ГруппаЧекЛистРедактированиеПредмет.Видимость 	= Истина;
	Элементы.ДобавитьПунктПредмет.Видимость 				= Ложь;
	Элементы.ДобавитьТиповуюЗадачу.Видимость 				= Ложь;
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.ПунктЧекЛистаПредмет;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистОтменить(Команда)
	
	ЧекЛистПункт = "";
	
	Элементы.ГруппаЧекЛистРедактированиеПредмет.Видимость 	= Ложь;
	Элементы.ДобавитьПунктПредмет.Видимость 				= Истина;
	Элементы.ДобавитьТиповуюЗадачу.Видимость 				= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТиповуюЗадачу(Команда)
	
	ТекущийПредмет 	= Неопределено;
	ТекущиеДанные 	= Элементы.Предметы.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущийПредмет = ТекущиеДанные.Предмет;
	КонецЕсли;
	
	вогБизнесПроцессыИЗадачиКлиент.ДобавитьТиповуюЗадачу(ЭтотОбъект, ТипЗнч(ТекущийПредмет));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТиповуюЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполняетсяДобавлениеТиповогоПункта = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаЧекЛистРедактированиеПредмет.Видимость 	= Ложь;
	Элементы.ДобавитьПунктПредмет.Видимость 				= Истина;
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	
	Отказ = Ложь;
	ДобавитьТиповуюЗадачуНаСервере(Результат, ТекущиеДанные.Предмет, Отказ);
	
	Если Не Отказ Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_РедактироватьПунктЧекЛиста(Команда)
	
	ИмяЭлемента 			= СтрЗаменить(Команда.Имя, "Редактировать", "Пункт");
	ИдентификаторЭлемента 	= СтрЗаменить(Команда.Имя, "Редактировать_", "");
	
	СтруктураЗначений = ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(
		ИдентификаторЭлемента, "Пункт");
		
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить(ИмяЭлемента, СтруктураЗначений.Пункт);
	
	УстановитьВидимостьДоступностьЭлементовЧекЛиста(ИдентификаторЭлемента, Ложь);
	
	ЭтотОбъект.ТекущийЭлемент = Элементы[ИмяЭлемента];
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПрименитьРедактированиеПунктаЧекЛиста(Команда)
	
	ИдентификаторЭлемента 	= СтрЗаменить(Команда.Имя, "Применить_", "");
	УстановитьВидимостьДоступностьЭлементовЧекЛиста(ИдентификаторЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтменитьРедактированиеПунктаЧекЛиста(Команда)
	
	ИмяЭлемента 			= СтрЗаменить(Команда.Имя, "Отменить", "Пункт");
	ИдентификаторЭлемента 	= СтрЗаменить(Команда.Имя, "Отменить_", "");
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ИдентификаторЗадачи", ИдентификаторЭлемента);
	
	НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		СтрокаТабличнойЧасти.Пункт = КэшированныеЗначения[ИмяЭлемента];
	КонецЦикла;
	
	УстановитьВидимостьДоступностьЭлементовЧекЛиста(ИдентификаторЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПрикрепитьПриложениеЧекЛиста(Команда)
	
	ИдентификаторЭлемента = СтрЗаменить(Команда.Имя, "Прикрепить_", "");
	
	СтруктураЗначений = ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(
		ИдентификаторЭлемента, "Предмет");
	
	ДополнительныеПараметрыОповещения = Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
	ДополнительныеПараметрыОповещения.Вставить("Предмет", 				СтруктураЗначений.Предмет);
	
	ОповещениеОЗавершенимм = Новый ОписаниеОповещения(
		"Подключаемый_ПрикрепитьПриложениеЧекЛистаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметрыОповещения);
	
	ПараметрыПриложений = Новый Структура;
	ПараметрыПриложений.Вставить("АдресПриложений", 		ПолучитьАдресТаблицыВыполнения(ИдентификаторЭлемента));
	ПараметрыПриложений.Вставить("Ссылка", 					Объект.Ссылка);
	ПараметрыПриложений.Вставить("Предмет", 				СтруктураЗначений.Предмет);
	ПараметрыПриложений.Вставить("НаправлениеДеятельности", Объект.вогНаправлениеДеятельности);
	
	ОткрытьФорму(
		"БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПриложенийЗадачПоручения",
		ПараметрыПриложений,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗавершенимм,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПрикрепитьПриложениеЧекЛистаЗавершение(АдресТаблицы, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресТаблицы) Тогда
		
		ПриложениеЗадачиЗавершениеНаСервере(АдресТаблицы, ДополнительныеПараметры);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьЗадачу(Команда)
	
	ИдентификаторЭлемента 	= СтрЗаменить(Команда.Имя, "Удалить_", "");
	
	СтруктураЗначений = ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(
		ИдентификаторЭлемента, "Пункт, Предмет");
	
	ДополнительныеПараметрыОповещения = Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
	ДополнительныеПараметрыОповещения.Вставить("Предмет", 				СтруктураЗначений.Предмет);
	
	ШаблонВопроса = НСтр("ru = 'Пункт ""%1"" будет удален. Продолжить?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, СтруктураЗначений.Пункт);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_УдалитьЗадачуЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметрыОповещения);
	
	ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТипРезультата = ТипЗнч(Результат);
	
	Если ТипРезультата = Тип("КодВозвратаДиалога") Тогда
		
		Если Не Результат = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипРезультата = Тип("Структура")
		И Результат.Свойство("Значение") Тогда
		
		Если Не Результат.Значение = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	УдалитьЗадачуНаСервере(ДополнительныеПараметры.Идентификатор);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьНаборЗадачЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТипРезультата = ТипЗнч(Результат);
	
	Если ТипРезультата = Тип("КодВозвратаДиалога") Тогда
		
		Если Не Результат = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипРезультата = Тип("Структура")
		И Результат.Свойство("Значение") Тогда
		
		Если Не Результат.Значение = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	УдалитьНаборЗадачНаСервере(ДополнительныеПараметры.НаборЗадач, ДополнительныеПараметры.Предмет);
	
	Модифицированность = Истина
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийПунктЧекЛиста(Команда)
	
	ИдентификаторЭлемента = СтрЗаменить(Команда.Имя, "РедактироватьКомментарий_", "");
	
	СтруктураЗначений = ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(
		ИдентификаторЭлемента, "КомментарийИсполнитель");
	
	ОповещениеОЗавершенимм = Новый ОписаниеОповещения(
		"Подключаемый_КомментарийЗавершениеВвода",
		ЭтотОбъект,
		ИдентификаторЭлемента);
	
	ПоказатьВводСтроки(
		ОповещениеОЗавершенимм,
		СтруктураЗначений.КомментарийИсполнитель,
		НСтр("ru = 'Введите комментарий'"),
		,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийЗавершениеВвода(Результат, ИдентификаторЭлемента) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ИдентификаторЗадачи", ИдентификаторЭлемента);
	
	НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		СтрокаТабличнойЧасти.КомментарийИсполнитель = Результат;
		Если ФормироватьМакет Тогда
			МакетЗадачи = СформироватьМакетЗадачи(СтрокаТабличнойЧасти.Предмет);
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПрикрепитьФайлЗадачи(Команда)
	
	ИдентификаторЭлемента = СтрЗаменить(Команда.Имя, "ПрикрепитьФайлПункта_", "");
	
	СтруктураЗначений = ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(
		ИдентификаторЭлемента, "Пункт, ИдентификаторЗадачи");
	
	Если СтруктураЗначений.ИдентификаторЗадачи = "00000000_0000_0000_0000_000000000000" Тогда
		ИдентификаторЗадачи = ИдентификаторЭлемента;
	Иначе
		ИдентификаторЗадачи = СтруктураЗначений.ИдентификаторЗадачи;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Идентификатор", 		ИдентификаторЗадачи);
	ДополнительныеПараметры.Вставить("НаименованиеЗадачи", 	СтруктураЗначений.Пункт);
	
	вогБизнесПроцессыИЗадачиКлиент.ОткрытьФормуПрисоединенныхФайловЗавершение(
		ЭтотОбъект,
		Объект.Ссылка,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеЗадачиПоУсловию(Кнопка)
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Выполнено", Ложь);
	
	НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТекстДополнения = "";
		
		Если НайденныеСтроки.Количество() <= 3 Тогда
			
			Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
				
				Предмет = СтрокаТабличнойЧасти.Предмет;
				
				ИмяТаблицыРезультат = ПолучитьИмяТаблицыРезультат(СтрокаТабличнойЧасти.ИдентификаторЗадачи);
				
				МассивСтрок = Новый Массив;
				Для Каждого СтрокаРезультат Из ЭтотОбъект[ИмяТаблицыРезультат] Цикл
					
					Если Не СтрокаРезультат.Пометка Тогда
						МассивСтрок.Добавить(СтрШаблон(НСтр("ru = '%1: %2'"), Предмет, СтрокаРезультат.ЗначениеАвтор));
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПустаяСтрока(ТекстДополнения) Тогда
					Разделитель = Символы.ПС;
				Иначе
					Разделитель = ";" + Символы.ПС;
				КонецЕсли;
				
				ТекстДополнения = ТекстДополнения + Разделитель + СтрСоединить(МассивСтрок, ";" + Символы.ПС);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнениеЗадачиПоУсловиюПродолжение", ЭтотОбъект, Кнопка.Имя);
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Есть невыполненные пункты задачи.%1%2%2Выполнить задачу?'"),
			ТекстДополнения,
			Символы.ПС);
		
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнениеЗадачиПоУсловиюПродолжение(Истина, Кнопка.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеЗадачиПоУсловиюПродолжение(Результат, КнопкаИмя) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Отказ 			= Ложь;
	ВариантПоКнопке = СтрЗаменить(КнопкаИмя, "Команда_", "");
	
	Объект.CRM_ВариантВыполнения		= Число(ВариантПоКнопке);
	Объект.CRM_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(
		Объект.CRM_ТочкаМаршрута,
		Число(ВариантПоКнопке),
		НомерВерсииКартыМаршрута);
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		ОчиститьСообщения();
		Отказ = Не Записать();
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(Объект.Ссылка);
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВыполнениеЗадачиПоУсловиюЗавершение", ЭтотОбъект);
	
	Если СписокТочекМаршрута.Количество() > 0 Тогда
		
		ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута", Объект.БизнесПроцесс, СписокТочекМаршрута);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыполнитьЗадачуПродолжение",
			ЭтотОбъект,
			ОписаниеОповещенияЗавершение);
		
		ОткрытьФорму(
			"Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя",
			ПараметрыФормы,
			ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьЗадачуПродолжение(Истина, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуПродолжение(Результат, ОписаниеОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если бизнес-процесс далее завершается неудачно, то возможно надо указать причину.
	Если CRM_БизнесПроцессыСервер.ПриведетКНеудачномуЗавершению(
		Объект.БизнесПроцесс,
		Объект.CRM_ТочкаМаршрута,
		Объект.CRM_ВариантВыполнения) Тогда
		
		ФормаДосрочногоЗавершения = ПолучитьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения",, ЭтотОбъект);
		ФормаДосрочногоЗавершения.Заголовок = НСтр("ru = 'Неудачное завершение бизнес-процесса'");
		ФормаДосрочногоЗавершения.Элементы.ПричинаНеудачногоЗавершения.Заголовок = НСтр("ru = 'Причина неудачного завершения'");
		ФормаДосрочногоЗавершения.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаДосрочногоЗавершения.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаДосрочногоЗавершения.Открыть();
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнениеЗадачиПоУсловиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЭтапДосрочногоЗавершения = ПредопределенноеЗначение("Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка");
		
		Результат.ЗавершенДосрочно = Ложь;
		Результат.Вставить("Задача", 					Объект.Ссылка);
		Результат.Вставить("ЭтапДосрочногоЗавершения", 	ЭтапДосрочногоЗавершения);
		
		CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(Результат);
		
	КонецЕсли;
	
	ПродолжитьВыполнение = Истина;
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		
		ТекстОшибки = "";
		//Проверим не работате ли кто-то с ведущей задачей если она есть
		Результат = CRM_БизнесПроцессыИЗадачиВызовСервера.ЗаблокироватьДанныеДляРедактированияВедущейЗадачи(Объект.БизнесПроцесс, ПродолжитьВыполнение);
		
		Если Не ПродолжитьВыполнение Тогда
			
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Невозможно выполнить, так как задача: %1 редактируется %2'"),
				Результат.ПредставлениеЗадачи,
				Результат.ТекстОшибки);
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПродолжитьВыполнение Тогда
		
		Объект.Выполнена 		= Истина;
		Объект.ДатаИсполнения 	= ТекущаяДата();
		ДатаСтрокой 			= CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(Объект.ДатаИсполнения);
		
		Объект.CRM_ПоследнееДействиеСтрокой = СтрШаблон(НСтр("ru = '%1 Выполнена -> %2'"), ДатаСтрокой, Объект.Исполнитель);
		
		Объект.РезультатВыполнения = СтрШаблон(
			НСтр("ru = '%1 Выполнена -> %2 %3 %4'"),
			ДатаСтрокой,
			Объект.Исполнитель,
			"",
			Объект.РезультатВыполнения);
		
		ЗафиксироватьВыполнениеНаСервере();
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("СсылкаНаОбъект", 		Объект.Ссылка);
		ПараметрОповещения.Вставить("ОбновлятьКалендарь", 	Параметры.ОбновлятьКалендарь);
		
		Оповестить("ЗадачаВыполнена", ПараметрОповещения);
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	Если Не Объект.ПринятаКИсполнению Тогда
		
		ПринятьЗадачуКИсполнению();
		ПринятьКИсполнениюЗавершение(Неопределено, Неопределено);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПринятьКИсполнениюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Задача уже принята к исполнению. Введенные результаты будут очищены. Отменить?'"),
			РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнениюЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		
		CRM_БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачиКИсполнению(ЭтотОбъект);
		
		// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
		Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
			Исполнитель = Объект.Исполнитель;
		Иначе
			Исполнитель = Объект.ОсновнойОбъектАдресации;
		КонецЕсли;
		// -- VOG Солодов В.В. 03.12.2020 CRM-1099
		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементовФормы(Истина);
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("СсылкаНаОбъект", 		Объект.Ссылка);
	ПараметрОповещения.Вставить("ОбновлятьКалендарь", 	Параметры.ОбновлятьКалендарь);
	
	Оповестить("ЗадачаПринятаКИсполнению", ПараметрОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьИзменениеКрайнегоСрока(Команда)
	
	// ++ VOG Солодов В.В. 25.12.2020 DEV-47
	Если РазрешитьИзменениеКрайнегоСрока Тогда
		
		Если Не ЗначениеЗаполнено(КрайнийСрок) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не указан крайний срок.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "КрайнийСрок");
			
			Возврат;
			
		КонецЕсли;
		
		Объект.СрокИсполнения = КрайнийСрок;
		Отказ = Ложь;
		
		Попытка
			Записать();
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецПопытки;
		
		Если Не Отказ Тогда
			
			КрайнийСрок 					= Дата(1,1,1);
			ЗапросНаИзменениеКрайнегоСрока 	= Ложь;
			
			Элементы.КрайнийСрок.Доступность = Ложь;
			Элементы.СогласоватьИзменениеКрайнегоСрока.Доступность = Ложь;
			
			ТекстОповещения = НСтр("ru = 'Изменение крайнего срока'");
			
			ШаблонПояснения = НСтр("ru = 'Крайний срок изменен на %1'");
			ТекстПояснения = СтрШаблон(ШаблонПояснения, Объект.СрокИсполнения);
			ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения,, СтатусОповещенияПользователя.Информация);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 25.12.2020 DEV-47
	ДатаВремя 	= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ДатаНачала);
	ДатаНачало 	= ДатаВремя.Дата;
	ВремяНачало = ДатаВремя.Время;
	
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(КрайнийСрок);
	ДатаОкончание	= ДатаВремя.Дата;
	ВремяОкончание	= ДатаВремя.Время;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаОкончание", 						ДатаОкончание);
	ПараметрыФормы.Вставить("ВремяОкончание", 						ВремяОкончание);
	ПараметрыФормы.Вставить("ИспользоватьДатуИВремяВСрокахЗадач", 	Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиСрокЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПереносаСрокаЗадачи",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСрокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		Объект.CRM_ПеренестиСрокИсполненияНа = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(
			Результат.ДатаОкончание, Результат.ВремяОкончание);
			
		ТекстПричиныПереноса = СтрШаблон(
			НСтр("ru = '%1 отправлен запрос на перенос срока исполнения задачи на %2.%3Причина переноса: %4.'"),
			Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ='дд.ММ.гг ЧЧ:мм'"),
			Формат(Объект.CRM_ПеренестиСрокИсполненияНа, "ДФ='дд.ММ.гг ЧЧ:мм'"),
			Символы.ПС,
			Результат.Причина);
		
		Объект.РезультатВыполнения = Объект.РезультатВыполнения + Символы.ПС + ТекстПричиныПереноса;
		
		Попытка
			Записать();
			ОтправитьЗапросНаПереносСрокаИсполнения(ТекстПричиныПереноса);
			// ++ VOG Солодов В.В. 25.12.2020 DEV-47
			Закрыть();
			// -- VOG Солодов В.В. 25.12.2020 DEV-47
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИсполнителя(Команда)
	
	Если Не ЗначениеЗаполнено(НовыйИсполнитель)
		Или НовыйИсполнитель = Объект.Исполнитель Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран новый исполнитель.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НовыйИсполнитель");
		
		Возврат;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Если ИзменитьИсполнителяНаСервере() Тогда
		
		ОповеститьОбИзменении(Объект.Ссылка);
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("СсылкаНаОбъект", 		Объект.Ссылка);
		ПараметрОповещения.Вставить("ОбновлятьКалендарь", 	Ложь);
		
		Оповестить("ЗадачаВыполнена", ПараметрОповещения);
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаСервере
Процедура СформироватьОбсуждение()
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БизнесПроцесс, "Автор, Ответственный");
	
	МассивПолучателей = Новый Массив;
	Для Каждого КлючИЗначение Из РеквизитыПроцесса Цикл
		
		ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			КлючИЗначение.Значение, "ИдентификаторПользователяИБ");
		
		Если Не ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторПользователя 	= СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ИдентификаторПользователяИБ);
		
		Если МассивПолучателей.Найти(ИдентификаторПользователя) = Неопределено Тогда
			МассивПолучателей.Добавить(ИдентификаторПользователя);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивПолучателей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСообщения = НСтр("ru = 'Исполнитель задачи изменен.'");
	КлючОбсуждения = вогСистемаВзаимодействийСервер.СоздатьНовоеОбсуждениеПоОбъекту(Объект.Ссылка);
	
	ОбъектСообщение = СистемаВзаимодействия.СоздатьСообщение(КлючОбсуждения);
	ОбъектСообщение.Текст = ТекстСообщения;
	Для Каждого ИдентификаторПользователя Из МассивПолучателей Цикл
		ОбъектСообщение.Получатели.Добавить(ИдентификаторПользователя);
	КонецЦикла;
	ОбъектСообщение.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(ИдентификаторЭлемента, ИменаКолонок)
	
	СтруктураЗначений = Новый Структура;
	
	МассивИменКолонок = СтрРазделить(ИменаКолонок, ",", Ложь);
	
	Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
		СтруктураЗначений.Вставить(ИмяКолонки);
	КонецЦикла;
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ИдентификаторЗадачи", ИдентификаторЭлемента);
	
	НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(СтруктураЗначений, СтрокаТабличнойЧасти);
		Прервать;
	КонецЦикла;
	
	Возврат СтруктураЗначений;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицыЗадач()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогЗадачиПоручений.Идентификатор КАК Идентификатор,
	|	вогЗадачиПоручений.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	вогЗадачиПоручений.Порядок КАК НомерСтроки,
	|	вогЗадачиПоручений.Пункт КАК Пункт,
	|	вогЗадачиПоручений.Предмет КАК Предмет,
	|	вогЗадачиПоручений.Комментарий КАК Комментарий,
	|	вогЗадачиПоручений.Результат КАК Результат,
	|	вогЗадачиПоручений.Трудоемкость КАК Трудоемкость,
	|	вогЗадачиПоручений.НаборЗадач КАК НаборЗадач,
	|	вогЗадачиПоручений.ТиповаяЗадача КАК ТиповаяЗадача
	|ПОМЕСТИТЬ ВТ_ЗадачиПоручений
	|ИЗ
	|	РегистрСведений.вогЗадачиПоручений КАК вогЗадачиПоручений
	|ГДЕ
	|	вогЗадачиПоручений.Объект = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогРезультатыВыполненияЗадачПоручений.Идентификатор КАК Идентификатор,
	|	вогРезультатыВыполненияЗадачПоручений.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	вогРезультатыВыполненияЗадачПоручений.Порядок КАК НомерСтроки,
	|	вогРезультатыВыполненияЗадачПоручений.Пункт КАК Пункт,
	|	вогРезультатыВыполненияЗадачПоручений.Предмет КАК Предмет,
	|	вогРезультатыВыполненияЗадачПоручений.Комментарий КАК Комментарий,
	|	вогРезультатыВыполненияЗадачПоручений.Результат КАК Результат,
	|	вогРезультатыВыполненияЗадачПоручений.НаборЗадач КАК НаборЗадач,
	|	вогРезультатыВыполненияЗадачПоручений.ТиповаяЗадача КАК ТиповаяЗадача,
	|	вогРезультатыВыполненияЗадачПоручений.ПринятоКонтролером КАК ПринятоКонтролером
	|ПОМЕСТИТЬ ВТ_Выполнение
	|ИЗ
	|	РегистрСведений.вогРезультатыВыполненияЗадачПоручений КАК вогРезультатыВыполненияЗадачПоручений
	|ГДЕ
	|	вогРезультатыВыполненияЗадачПоручений.Объект = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ВТ_ЗадачиПоручений.НомерСтроки, ВТ_Выполнение.НомерСтроки) КАК НомерСтроки,
	|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Идентификатор, ВТ_Выполнение.Идентификатор) КАК Идентификатор,
	|	ЕСТЬNULL(ВТ_ЗадачиПоручений.ИдентификаторЗадачи, ВТ_Выполнение.ИдентификаторЗадачи) КАК ИдентификаторЗадачи,
	|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Пункт, ВТ_Выполнение.Пункт) КАК Пункт,
	|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Предмет, ВТ_Выполнение.Предмет) КАК Предмет,
	|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Комментарий, НЕОПРЕДЕЛЕНО) КАК Комментарий,
	|	ЕСТЬNULL(ВТ_Выполнение.Комментарий, НЕОПРЕДЕЛЕНО) КАК КомментарийИсполнитель,
	|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Результат, НЕОПРЕДЕЛЕНО) КАК Результат,
	|	ЕСТЬNULL(ВТ_Выполнение.Результат, НЕОПРЕДЕЛЕНО) КАК РезультатИсполнитель,
	|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Трудоемкость, ДАТАВРЕМЯ(1, 1, 1)) КАК Трудоемкость,
	|	ЕСТЬNULL(ВТ_ЗадачиПоручений.НаборЗадач, ВТ_Выполнение.НаборЗадач) КАК НаборЗадач,
	|	ЕСТЬNULL(ВТ_ЗадачиПоручений.НаборЗадач.ПлановоеВремя, ВТ_Выполнение.НаборЗадач.ПлановоеВремя) КАК ТрудоемкостьНабора,
	|	ЕСТЬNULL(ВТ_ЗадачиПоручений.ТиповаяЗадача, ВТ_Выполнение.ТиповаяЗадача) КАК ТиповаяЗадача,
	|	ЕСТЬNULL(ВТ_ЗадачиПоручений.ТиповаяЗадача.ПринадлежностьОбъекту, ВТ_Выполнение.ТиповаяЗадача.ПринадлежностьОбъекту) КАК ПринадлежностьОбъекту,
	|	ЕСТЬNULL(ВТ_Выполнение.ПринятоКонтролером, ЛОЖЬ) КАК Принято,
	|	ВЫБОР
	|		КОГДА ВТ_ЗадачиПоручений.НомерСтроки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДобавленИзЗадачи
	|ИЗ
	|	ВТ_ЗадачиПоручений КАК ВТ_ЗадачиПоручений
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Выполнение КАК ВТ_Выполнение
	|		ПО ВТ_ЗадачиПоручений.Идентификатор = ВТ_Выполнение.Идентификатор
	|			И ВТ_ЗадачиПоручений.ИдентификаторЗадачи = ВТ_Выполнение.ИдентификаторЗадачи
	|			И ВТ_ЗадачиПоручений.Предмет = ВТ_Выполнение.Предмет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(ТрудоемкостьНабора)
	|ПО
	|	НаборЗадач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_МероприятиеСторонниеЛица.Ссылка КАК ДокументСсылка,
	|	ТИПЗНАЧЕНИЯ(CRM_МероприятиеСторонниеЛица.Ссылка) КАК ТипДокумента,
	|	CRM_МероприятиеСторонниеЛица.Партнер КАК Предмет,
	|	НЕОПРЕДЕЛЕНО КАК ДополнительноеУсловие,
	|	1 КАК Приоритет
	|ИЗ
	|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
	|ГДЕ
	|	CRM_МероприятиеСторонниеЛица.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И CRM_МероприятиеСторонниеЛица.Ссылка.ДокументОснование = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_МероприятиеСторонниеЛица.Ссылка,
	|	ТИПЗНАЧЕНИЯ(CRM_МероприятиеСторонниеЛица.Ссылка),
	|	CRM_МероприятиеСторонниеЛица.вогТорговаяТочка,
	|	НЕОПРЕДЕЛЕНО,
	|	1
	|ИЗ
	|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
	|ГДЕ
	|	CRM_МероприятиеСторонниеЛица.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И CRM_МероприятиеСторонниеЛица.Ссылка.ДокументОснование = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Анкета,
	|	ВложенныйЗапрос.ТипДокумента,
	|	ВложенныйЗапрос.Респондент,
	|	ВложенныйЗапрос.ВариантОпроса,
	|	ВложенныйЗапрос.Приоритет
	|ИЗ
	|	(ВЫБРАТЬ
	|		вогАнкета.Ссылка КАК Анкета,
	|		ТИПЗНАЧЕНИЯ(вогАнкета.ВариантОпроса) КАК ТипДокумента,
	|		вогАнкета.Респондент КАК Респондент,
	|		вогАнкета.ВариантОпроса КАК ВариантОпроса,
	|		1 КАК Приоритет
	|	ИЗ
	|		Документ.вогАнкета КАК вогАнкета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
	|			ПО (Задачи.Ссылка = &Объект)
	|				И вогАнкета.ДокументОснование = Задачи.БизнесПроцесс
	|	ГДЕ
	|		вогАнкета.ПометкаУдаления = ЛОЖЬ
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДокументыАнкета.Ссылка,
	|		ТИПЗНАЧЕНИЯ(ДокументыАнкета.ВариантОпроса),
	|		ДокументыАнкета.Респондент,
	|		ДокументыАнкета.ВариантОпроса,
	|		2
	|	ИЗ
	|		Документ.вогАнкета КАК ДокументыАнкета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_ЗадачиПоручений.Предмет КАК Предмет
	|			ИЗ
	|				ВТ_ЗадачиПоручений КАК ВТ_ЗадачиПоручений
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_Выполнение.Предмет
	|			ИЗ
	|				ВТ_Выполнение КАК ВТ_Выполнение) КАК ВложенныйЗапрос
	|			ПО ДокументыАнкета.Респондент = ВложенныйЗапрос.Предмет
	|				И (НЕ ДокументыАнкета.Респондент = НЕОПРЕДЕЛЕНО)
	// ++ VOG Солодов В.В. 17.11.2020 CRM-1052
	|			ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|			ПО ДокументыАнкета.Ссылка = CRM_БизнесПроцесс.вогАнкета
	|				И (CRM_БизнесПроцесс.Завершен = ЛОЖЬ)
	|				И (CRM_БизнесПроцесс.ПометкаУдаления = ИСТИНА)
	|				И (НЕ ДокументыАнкета.ДокументОснование = CRM_БизнесПроцесс.Ссылка)
	|	ГДЕ
	|		ДокументыАнкета.ПометкаУдаления = ЛОЖЬ
	|		И ВЫБОР
	|			КОГДА CRM_БизнесПроцесс.Ссылка ЕСТЬ NULL
	|				ТОГДА ДокументыАнкета.Статус = ЗНАЧЕНИЕ(Справочник.вогШаблоныСтатусов.Зарегистрирован)
	|			КОГДА НЕ CRM_БизнесПроцесс.Ссылка ЕСТЬ NULL
	|				ТОГДА ДокументыАнкета.Статус = ЗНАЧЕНИЕ(Справочник.вогШаблоныСтатусов.НаСогласовании)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВложенныйЗапрос
	// До изменения
	//|	ГДЕ
	//|		ДокументыАнкета.ПометкаУдаления = ЛОЖЬ
	//|		И (ДокументыАнкета.Статус = ЗНАЧЕНИЕ(Справочник.вогШаблоныСтатусов.Зарегистрирован)) КАК ВложенныйЗапрос
	// -- VOG Солодов В.В. 17.11.2020 CRM-1052
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогКомандировка.Ссылка,
	|	ТИПЗНАЧЕНИЯ(вогКомандировка.Ссылка),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	1
	|ИЗ
	|	Документ.вогКомандировка КАК вогКомандировка
	|ГДЕ
	|	вогКомандировка.ПометкаУдаления = ЛОЖЬ
	|	И вогКомандировка.ДокументОснование = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка,
	|	ТИПЗНАЧЕНИЯ(ЗадачаИсполнителя.Ссылка),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	1
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
	|	И ЗадачаИсполнителя.Предмет = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаДокументовВыполнения = РезультатЗапроса[3].Выгрузить();
	
	ВыборкаНаборы = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаборы.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаНаборы.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрока = ТаблицаПунктыЗадач.Добавить();
			НоваяСтрока.НомерСтроки 			= ВыборкаДетальныеЗаписи.НомерСтроки;
			НоваяСтрока.Пункт 					= ВыборкаДетальныеЗаписи.Пункт;
			НоваяСтрока.Трудоемкость 			= ВыборкаДетальныеЗаписи.Трудоемкость;
			НоваяСтрока.ДобавленИзЗадачи 		= ВыборкаДетальныеЗаписи.ДобавленИзЗадачи;
			НоваяСтрока.НаборЗадач 				= ВыборкаДетальныеЗаписи.НаборЗадач;
			НоваяСтрока.Принято 				= ВыборкаДетальныеЗаписи.Принято;
			
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НаборЗадач) Тогда
				ИдентификаторНабора = "";
			Иначе
				ИдентификаторНабора = вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(
					XMLСтрока(ВыборкаДетальныеЗаписи.НаборЗадач));
			КонецЕсли;
			
			НоваяСтрока.ИдентификаторНабора 	= ИдентификаторНабора;
			НоваяСтрока.ТрудоемкостьНабора 		= ВыборкаДетальныеЗаписи.ТрудоемкостьНабора;
			НоваяСтрока.ТиповаяЗадача 			= ВыборкаДетальныеЗаписи.ТиповаяЗадача;
			НоваяСтрока.ПринадлежностьОбъекту 	= ВыборкаДетальныеЗаписи.ПринадлежностьОбъекту;
			
			Если ВыборкаДетальныеЗаписи.Предмет = Неопределено Тогда
				НоваяСтрока.Предмет 			= "Предметы";
			Иначе
				НоваяСтрока.Предмет 			= ВыборкаДетальныеЗаписи.Предмет;
			КонецЕсли;
			
			НоваяСтрока.Идентификатор 			
				= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(ВыборкаДетальныеЗаписи.Идентификатор);
			НоваяСтрока.ИдентификаторЗадачи 	
				= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(ВыборкаДетальныеЗаписи.ИдентификаторЗадачи);
			
			Если Не ВыборкаДетальныеЗаписи.Комментарий = Неопределено Тогда
				НоваяСтрока.Комментарий 		= ВыборкаДетальныеЗаписи.Комментарий.Получить();
			КонецЕсли;
			
			Если Не ВыборкаДетальныеЗаписи.КомментарийИсполнитель = Неопределено Тогда
				НоваяСтрока.КомментарийИсполнитель 	= ВыборкаДетальныеЗаписи.КомментарийИсполнитель.Получить();
			КонецЕсли;
			
			ИмяТаблицыРезультат = ПолучитьИмяТаблицыРезультат(НоваяСтрока.ИдентификаторЗадачи);
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Предмет", НоваяСтрока.Предмет);
			
			НайденныеСтроки = ТаблицаДокументовВыполнения.НайтиСтроки(ПараметрыОтбораСтрок);
			
			СоздатьТаблицуВыполнения(ИмяТаблицыРезультат);
			ЗаполнитьТаблицуВыполнения(ВыборкаДетальныеЗаписи, ИмяТаблицыРезультат, НайденныеСтроки);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.НаборЗадач)
				И Не НоваяСтрока.Трудоемкость = Дата(1,1,1) Тогда
				ОбщаяТрудоемкость = ОбщаяТрудоемкость + (НоваяСтрока.Трудоемкость - Дата(1,1,1));
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НоваяСтрока.НаборЗадач)
			И Не НоваяСтрока.ТрудоемкостьНабора = Дата(1,1,1) Тогда
			ОбщаяТрудоемкость = ОбщаяТрудоемкость + (НоваяСтрока.ТрудоемкостьНабора - Дата(1,1,1));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИсполнение()
	
	СтрокаИсполнения = НСтр("ru = 'У вас %1 %2;%3%4 %5;%6Текущее исполнение %7'");
	
	СчетчикСтрокОжидание 	= 0;
	СчетчикСтрокВыполнено 	= 0;
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ДобавленИзЗадачи", Ложь);
	
	НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	ВсегоЗадач 		= НайденныеСтроки.Количество();
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		
		ИмяТаблицыРезультат = ПолучитьИмяТаблицыРезультат(СтрокаТабличнойЧасти.ИдентификаторЗадачи);
		
		Для Каждого СтрокаРезультат Из ЭтотОбъект[ИмяТаблицыРезультат] Цикл
			
			СчетчикСтрокОжидание = СчетчикСтрокОжидание + 1;
			
			Если СтрокаРезультат.Пометка Тогда
				СчетчикСтрокВыполнено = СчетчикСтрокВыполнено + 1;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
	Если СчетчикСтрокОжидание > 0 Тогда
		ИсполнениеПроцент = СчетчикСтрокВыполнено / СчетчикСтрокОжидание * 100;
	КонецЕсли;
	
	ПредставлениеЗадач = СтроковыеФункцииКлиентСервер.ФормаМножественногоЧисла("задача", "задачи", "задач", ВсегоЗадач);
	
	ПредставлениеОжидаемых = СтроковыеФункцииКлиентСервер.ФормаМножественногоЧисла(
		"ожидаемый результат",
		"ожидаемых результата",
		"ожидаемых результатов",
	СчетчикСтрокОжидание);
	
	Исполнение = СтрШаблон(
		СтрокаИсполнения,
		ВсегоЗадач,
		ПредставлениеЗадач,
		Символы.ПС,
		СчетчикСтрокОжидание,
		ПредставлениеОжидаемых,
		Символы.ПС,
		СчетчикСтрокВыполнено);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВыполнения(Знач ДанныеЗаполнения, ИмяТаблицыРезультат, СтрокиДокументовВыполнения = Неопределено)
	
	Если ТипЗнч(ИмяТаблицыРезультат) = Тип("ТаблицаЗначений") Тогда
		ТаблицаРезультат = ИмяТаблицыРезультат;
	Иначе
		ТаблицаРезультат = ЭтотОбъект[ИмяТаблицыРезультат];
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ИдентификаторЗадачи") Тогда
		ИдентификаторЗадачи = ДанныеЗаполнения.ИдентификаторЗадачи;
	Иначе
		ИдентификаторЗадачи = Неопределено;
	КонецЕсли;
	
	Предмет 				= ДанныеЗаполнения.Предмет;
	тРезультат 				= ДанныеЗаполнения.Результат;
	тРезультатИсполнитель 	= ДанныеЗаполнения.РезультатИсполнитель;
	ДобавленИзЗадачи 		= ДанныеЗаполнения.ДобавленИзЗадачи;
	
	// Ожидаемый результат
	Если тРезультатИсполнитель = Неопределено
		И Не тРезультат = Неопределено Тогда
		
		Если ТипЗнч(тРезультат) = Тип("ХранилищеЗначения") Тогда
			Результат = тРезультат.Получить();
		Иначе
			Результат = тРезультат;
		КонецЕсли;
		
		Если ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
			СписокРезультат = Результат;
		Иначе
			
			СписокРезультат = Новый СписокЗначений;
			
			Если Не Результат = Неопределено Тогда
				
				Для Каждого СтрокаТабличнойЧасти Из Результат Цикл
					СписокРезультат.Добавить(СтрокаТабличнойЧасти.Приложение, СтрокаТабличнойЧасти.ТипПриложения);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатАвтор = СформироватьСписокРезультат(Предмет, СписокРезультат, Ложь, Ложь);
		
		Для Каждого СтрокаСписка Из РезультатАвтор Цикл
			
			НоваяСтрока = ТаблицаРезультат.Добавить();
			Если ЗначениеЗаполнено(СтрокаСписка.Представление) Тогда
				НоваяСтрока.ЗначениеАвтор = СтрокаСписка.Представление;
			Иначе
				НоваяСтрока.ЗначениеАвтор = СтрокаСписка.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Выполнение
	Если тРезультатИсполнитель = Неопределено
		Или ТипЗнч(тРезультатИсполнитель) = Тип("СписокЗначений") Тогда
		
		Если тРезультатИсполнитель = Неопределено Тогда
			
			СписокРезультат = Новый СписокЗначений;
			Если Не Результат = Неопределено Тогда
				СписокРезультат.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("Приложение"));
			КонецЕсли;
			
			РезультатИсполнитель = СформироватьСписокРезультат(Предмет, СписокРезультат, Истина, Истина);
			
		Иначе
			РезультатИсполнитель = тРезультатИсполнитель;
		КонецЕсли;
		
		Для Каждого СтрокаСписка Из РезультатИсполнитель Цикл
			
			Если Не ДобавленИзЗадачи Тогда
				
				ИндексСтрокиСписка = РезультатИсполнитель.Индекс(СтрокаСписка);
				
				Если ИндексСтрокиСписка > ТаблицаРезультат.Количество() - 1 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаРезультат = ТаблицаРезультат.Получить(ИндексСтрокиСписка);
				
			Иначе
				
				// ++ VOG Солодов В.В. 07.12.2020 CRM-1108
				// До изменения
				//ПараметрыОтбораСтрок = Новый Структура;
				//ПараметрыОтбораСтрок.Вставить("ЗначениеИсполнитель", СтрокаСписка.Значение);
				//
				//НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(ПараметрыОтбораСтрок);
				//
				//Если НайденныеСтроки.Количество() = 0 Тогда
				// -- VOG Солодов В.В. 07.12.2020 CRM-1108
					
					Если ТаблицаРезультат.Количество() > 0 Тогда
						
						ИндексСтрокиСписка = РезультатИсполнитель.Индекс(СтрокаСписка);
						
						Если ИндексСтрокиСписка > ТаблицаРезультат.Количество() - 1 Тогда
							СтрокаРезультат = ТаблицаРезультат.Добавить();
						Иначе
							СтрокаРезультат = ТаблицаРезультат[ИндексСтрокиСписка];
						КонецЕсли;
						
					Иначе
						СтрокаРезультат = ТаблицаРезультат.Добавить();
					КонецЕсли;
				// ++ VOG Солодов В.В. 07.12.2020 CRM-1108
				// До изменения
				//Иначе
				//	СтрокаРезультат = НайденныеСтроки[0];
				//КонецЕсли;
				// -- VOG Солодов В.В. 07.12.2020 CRM-1108
				
			КонецЕсли;
			
			СтрокаРезультат.ЗначениеИсполнитель = СтрокаСписка.Значение;
			
			Если Не СтрокиДокументовВыполнения = Неопределено Тогда
				ЗаполнитьРезультатПоДокументам(СтрокаРезультат, СтрокиДокументовВыполнения);
			КонецЕсли;
			
			УстановитьВыполнениеПриложенияЗадачи(ЭтотОбъект, СтрокаРезультат, ИмяТаблицыРезультат, ИдентификаторЗадачи);
			
		КонецЦикла;
		
	Иначе
		
		СписокРезультат = тРезультатИсполнитель.Получить();
		ТаблицаРезультат.Загрузить(СписокРезультат);
			
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаРезультат Цикл
			
			Если Не СтрокаТабличнойЧасти.Пометка
				И Не СтрокиДокументовВыполнения = Неопределено
				И СтрокиДокументовВыполнения.Количество() > 0 Тогда
				
				ЗаполнитьРезультатПоДокументам(СтрокаТабличнойЧасти, СтрокиДокументовВыполнения);
				
			КонецЕсли;
			
			УстановитьВыполнениеПриложенияЗадачи(ЭтотОбъект, СтрокаТабличнойЧасти, ИмяТаблицыРезультат, ИдентификаторЗадачи);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатПоДокументам(СтрокаРезультат, СтрокиДокументовВыполнения)
	
	Для Каждого СтрокаДокумент Из СтрокиДокументовВыполнения Цикл
		
		Если СтрокаДокумент.ТипДокумента = ТипЗнч(СтрокаРезультат.ЗначениеИсполнитель) Тогда
			
			Если СтрокаДокумент.ДополнительноеУсловие = Неопределено Тогда
				СтрокаРезультат.ЗначениеИсполнитель 	= СтрокаДокумент.ДокументСсылка;
			ИначеЕсли СтрокаРезультат.ЗначениеИсполнитель = СтрокаДокумент.ДополнительноеУсловие Тогда
				СтрокаРезультат.ЗначениеИсполнитель 	= СтрокаДокумент.ДокументСсылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуВыполнения(Знач ИмяВременнойТаблицы)
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	МассивТиповБулево = Новый Массив;
	МассивТиповБулево.Добавить(Тип("Булево"));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВременнойТаблицы, Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗначениеАвтор", Новый ОписаниеТипов(), ИмяВременнойТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗначениеИсполнитель", Новый ОписаниеТипов(), ИмяВременнойТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Пометка", Новый ОписаниеТипов(МассивТиповБулево), ИмяВременнойТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Картинка", ОбщегоНазначения.ОписаниеТипаСтрока(1000), ИмяВременнойТаблицы));
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

КонецПроцедуры

&НаСервере
Функция СформироватьСписокРезультат(Предмет, Результат, Исполнитель = Ложь, ЭтоОжидаемыйРезультат)
	
	СписокРезультат = Новый СписокЗначений;
	
	Для Каждого СтрокаСписка Из Результат Цикл
		
		Если ТипЗнч(СтрокаСписка.Значение) = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
			
			Если Исполнитель Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	вогАнкета.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.вогАнкета КАК вогАнкета
				|ГДЕ
				|	вогАнкета.ПометкаУдаления = ЛОЖЬ
				|	И вогАнкета.Респондент В(&Респондент)
				|	И вогАнкета.ВариантОпроса = &ВариантОпроса
				|	И вогАнкета.ДокументОснование = &ДокументОснование";
				
				Запрос.УстановитьПараметр("ВариантОпроса", 		СтрокаСписка.Значение);
				Запрос.УстановитьПараметр("Респондент", 		Предмет);
				Запрос.УстановитьПараметр("ДокументОснование", 	Объект.Ссылка);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если Не РезультатЗапроса.Пустой() Тогда
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						СписокРезультат.Добавить(ВыборкаДетальныеЗаписи.Ссылка,, Истина);
					КонецЕсли;
					
				ИначеЕсли СтрокаСписка.Значение.ТипЗначения.СодержитТип(ТипЗнч(Предмет)) Тогда
					
					ПредставлениеРезультата = СтрШаблон(НСтр("ru = 'Создайте анкету %1'"), СтрокаСписка.Представление);
					СписокРезультат.Добавить(СтрокаСписка.Значение, ПредставлениеРезультата);
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСписка.Значение.ТипЗначения.СодержитТип(ТипЗнч(Предмет)) Тогда
				
				СписокРезультат.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаСписка.Значение) = Тип("Строка") Тогда
			
			Если Исполнитель Тогда
				
				Если Не ПустаяСтрока(СтрокаСписка.Значение)
					И Не ЭтоОжидаемыйРезультат Тогда
					СписокРезультат.Добавить(СтрокаСписка.Значение,, Истина);
				Иначе
					СписокРезультат.Добавить("", НСтр("ru = 'Введите результат выполнения'"));
				КонецЕсли;
				
			Иначе
				СписокРезультат.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаСписка.Значение) = Тип("ДокументСсылка.CRM_Мероприятие") Тогда
			
			Если Исполнитель Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	CRM_МероприятиеСторонниеЛица.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
				|ГДЕ
				|	CRM_МероприятиеСторонниеЛица.Ссылка.ПометкаУдаления = ЛОЖЬ
				|	И CRM_МероприятиеСторонниеЛица.Ссылка.ДокументОснование = &ДокументОснование
				|	И ВЫБОР
				|			КОГДА &ИспользоватьКлиенты
				|				ТОГДА CRM_МероприятиеСторонниеЛица.Партнер = &Предмет
				|			КОГДА &ИспользоватьТорговыеТочки
				|				ТОГДА CRM_МероприятиеСторонниеЛица.вогТорговаяТочка = &Предмет
				|			ИНАЧЕ ЛОЖЬ
				|		КОНЕЦ";
				
				Запрос.УстановитьПараметр("ИспользоватьКлиенты", 		ТипЗнч(Предмет) = Тип("СправочникСсылка.Партнеры"));
				Запрос.УстановитьПараметр("ИспользоватьТорговыеТочки", 	ТипЗнч(Предмет) = Тип("СправочникСсылка.вогТорговыеТочки"));
				Запрос.УстановитьПараметр("Предмет", 					Предмет);
				Запрос.УстановитьПараметр("ДокументОснование", 			Объект.Ссылка);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если Не РезультатЗапроса.Пустой() Тогда
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						СписокРезультат.Добавить(ВыборкаДетальныеЗаписи.Ссылка,, Истина);
					КонецЕсли;
					
				Иначе
					СписокРезультат.Добавить(СтрокаСписка.Значение, НСтр("ru = 'Создайте мероприятие'"));
				КонецЕсли;
				
			Иначе
				СписокРезультат.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаСписка.Значение) = Тип("ДокументСсылка.вогКомандировка") Тогда
			
			Если Исполнитель Тогда
				СписокРезультат.Добавить(СтрокаСписка.Значение, НСтр("ru = 'Создайте командировку'"));
			Иначе
				СписокРезультат.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаСписка.Значение) = Тип("СправочникСсылка.вогВидыПрисоединенныхФайлов") Тогда
			
			Если Исполнитель Тогда
				ПредставлениеРезультата = СтрШаблон(НСтр("ru = 'Добавьте фото типа %1'"), СтрокаСписка.Значение);
				СписокРезультат.Добавить(СтрокаСписка.Значение, ПредставлениеРезультата);
			Иначе
				СписокРезультат.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
			КонецЕсли;
			
		Иначе
			
			СписокРезультат.Добавить(СтрокаСписка.Значение, СтрокаСписка.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокРезультат
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокИсполнителей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	вогСписокИсполнителейПоручения.Исполнитель КАК Исполнитель,
	|	вогСписокИсполнителейПоручения.Контролер КАК Контролер,
	|	вогСписокИсполнителейПоручения.Соисполнитель КАК Соисполнитель,
	|	вогСписокИсполнителейПоручения.Наблюдатель КАК Наблюдатель,
	|	вогСписокИсполнителейПоручения.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.вогСписокИсполнителейПоручения КАК вогСписокИсполнителейПоручения
	|ГДЕ
	|	вогСписокИсполнителейПоручения.БизнесПроцесс = &БизнесПроцесс
	|
	|УПОРЯДОЧИТЬ ПО
	|	вогСписокИсполнителейПоручения.Приоритет";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаИсполнители = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаИсполнители.Следующий() Цикл
		
		ИдентификаторЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор();
		
		НоваяСтрока = ТаблицаИсполнители.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаИсполнители);
		НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
		
		ИндексСтроки = ТаблицаИсполнители.Индекс(НоваяСтрока);
		ИмяНастройки = ПолучитьИмяНастройкиПоСтрокеТабличнойЧасти(НоваяСтрока);
		
		Если Не ИмяНастройки = Неопределено Тогда
			ДобавитьПоляПоНастройкеНаСервере(ИмяНастройки, ИдентификаторЭлемента, ИндексСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаКорректность()
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата начала должна быть заполнена!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область Оформление

&НаСервере
Процедура НастроитьЗаголовкиЭлементовФормы()
	
	// Файлы
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ФайлЗадачи", Истина);
	
	Количество 			= ТаблицаПрисоединенныеФайлы.НайтиСтроки(ПараметрыОтбораСтрок).Количество();
	ЗаголовокКоманды 	= Новый ФорматированнаяСтрока(НСтр("ru = 'Файлы'") + " (" + Количество + ")");
	
	Элементы.ПерейтиФайлы.Заголовок = ЗаголовокКоманды;
	
	// Задачи
	Количество 			= ТаблицаПунктыЗадач.Количество();
	ЗаголовокКоманды 	= Новый ФорматированнаяСтрока(НСтр("ru = 'Задачи'") + " (" + Количество + ")");
	
	Элементы.ПерейтиЧекЛист.Заголовок = ЗаголовокКоманды;
	
	// Объекты
	КорневыеЭлементы = ДеревоПредметы.ПолучитьЭлементы();
	
	Для Каждого ЭлементКорень Из КорневыеЭлементы Цикл
		
		Количество 			= ЭлементКорень.ПолучитьЭлементы().Количество();
		ЗаголовокКоманды 	= Новый ФорматированнаяСтрока(НСтр("ru = 'Объекты'") + " (" + Количество + ")");
		
	КонецЦикла;
	
	Элементы.ПерейтиПредметЗадачи.Заголовок = ЗаголовокКоманды;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредметыПредмет.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПредметы.Группа");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", 	Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 		ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", 			НСтр("ru = 'Объекты'"));
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредметыПредмет.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПредметы.ПредметБП");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", 	Истина);
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредметыПредмет.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПредметы.Группа");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", 	Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 		ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТаблицыРезультат(ИдентификаторЭлемента = Неопределено)
	
	Если ИдентификаторЭлемента = Неопределено Тогда
		
		СписокЗадач = ТаблицаПунктыЗадач;
		
	Иначе
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("ИдентификаторЗадачи", ИдентификаторЭлемента);
		
		СписокЗадач = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
		
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из СписокЗадач Цикл
		
		ИмяТаблицы = ПолучитьИмяТаблицыРезультат(СтрокаТабличнойЧасти.ИдентификаторЗадачи);
		
		ИмяЭлемента = СтрШаблон("РезультатИсполнитель_%1", СтрокаТабличнойЧасти.ИдентификаторЗадачи);
		ИмяПоля 	= СтрШаблон("%1.ЗначениеИсполнитель", ИмяТаблицы);
		
		//
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяЭлемента].Имя);
		
		ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ИмяПоля);
		ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение 	= Документы.вогКомандировка.ПустаяСсылка();
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Создайте командировку'"));
		
		//
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяЭлемента].Имя);
		
		ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ИмяПоля);
		ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение 	= Документы.CRM_Мероприятие.ПустаяСсылка();
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Создайте мероприятие'"));
		
		//
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяЭлемента].Имя);
		
		ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ИмяПоля);
		ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение 	= "";
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Введите результат выполнения'"));
		
		//
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяЭлемента].Имя);
		
		ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ИмяПоля);
		ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение 	= Задачи.ЗадачаИсполнителя.ПустаяСсылка();
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Создайте задачу'"));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы(ДоступноПользователю)
	
	ТолькоПросмотр = (Не Объект.ПринятаКИсполнению Или Не ЗначениеЗаполнено(Объект.Исполнитель) Или Объект.Выполнена
		Или (ЗначениеЗаполнено(Объект.Исполнитель) И Не ДоступноПользователю));
	
	Элементы.ПринятьКИсполнению.Доступность 	= Не Объект.Выполнена И ДоступноПользователю;
	Элементы.ПринятьКИсполнению.Пометка			= Объект.ПринятаКИсполнению;
	
	Элементы.ПанельАвтоКнопок.Доступность 		= Не Объект.Выполнена И Объект.ПринятаКИсполнению;
	Элементы.ГруппаДобавитьЗадачи.Доступность 	= Не ТолькоПросмотр И Объект.ПринятаКИсполнению;
	
	Если ЭтоНаблюдатель Тогда
		Элементы.Предметы.ИзменятьСоставСтрок 		= Ложь;
		Элементы.Предметы.ИзменятьПорядокСтрок 		= Ложь;
		Элементы.ПредметыКоманднаяПанель.Видимость 	= Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПунктыЗадач Цикл
		
		ИдентификаторЭлемента = СтрокаТабличнойЧасти.ИдентификаторЗадачи;
		
		ИмяГруппы = СтрШаблон("Группа_%1", ИдентификаторЭлемента);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			ИмяГруппы,
			"Доступность",
			Не ТолькоПросмотр);
		
	КонецЦикла;
	
	Элементы.ГруппаЗапросыНаИзменение.Доступность 	= ДоступноПользователю;
	Элементы.ГруппаОписание.Видимость 				= Не ПустаяСтрока(Объект.Описание);
	Элементы.МакетЗадачи.Видимость 					= ФормироватьМакет;
	
	// ++ VOG Солодов В.В. 25.12.2020 DEV-47
	ОтветственныеЗаПроцесс = ПолучитьОтветственныхЗаПроцесс();
	
	Если ЭтоСоисполнитель Тогда
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Контролер", Ложь);
		ПараметрыОтбораСтрок.Вставить("Наблюдатель", Ложь);
		ПараметрыОтбораСтрок.Вставить("Соисполнитель", Ложь);
		
		НайденныеСтроки = ТаблицаИсполнители.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если Не ОтветственныеЗаПроцесс.Найти(НайденнаяСтрока.Исполнитель) = Неопределено Тогда
				РазрешитьИзменениеКрайнегоСрока = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЭтоПостановщик
		Или Не ОтветственныеЗаПроцесс.Найти(ТекущийПользователь) = Неопределено Тогда
		РазрешитьИзменениеКрайнегоСрока = Истина;
	КонецЕсли;
	
	Если РазрешитьИзменениеКрайнегоСрока Тогда
		Элементы.ЗапросНаИзменениеКрайнегоСрока.Заголовок 		= НСтр("ru = 'Изменить крайний срок'");
		Элементы.СогласоватьИзменениеКрайнегоСрока.Заголовок 	= НСтр("ru = 'Изменить'");
	КонецЕсли;
	// -- VOG Солодов В.В. 25.12.2020 DEV-47
	
КонецПроцедуры

// ++ VOG Солодов В.В. 25.12.2020 DEV-47
&НаСервере
Функция ПолучитьОтветственныхЗаПроцесс()
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.БизнесПроцесс,
		"Автор, Ответственный",
		Истина);
	
	ОтветственныеЗаПроцесс = Новый Массив;
	ОтветственныеЗаПроцесс.Добавить(РеквизитыБизнесПроцесса.Автор);
	ОтветственныеЗаПроцесс.Добавить(РеквизитыБизнесПроцесса.Ответственный);
	
	ПодчиненныеСотрудники = вогБизнесПроцессыИЗадачиСервер.ПолучитьПодчиненныхСотрудников(
		ТекущийПользователь);
	
	Если Не ПодчиненныеСотрудники.Найти(РеквизитыБизнесПроцесса.Автор) = Неопределено
		Или Не ПодчиненныеСотрудники.Найти(РеквизитыБизнесПроцесса.Ответственный) = Неопределено Тогда
		ОтветственныеЗаПроцесс.Добавить(ТекущийПользователь);
	КонецЕсли;
	
	ДелегатыАвтора = вогНастраиваемоеДелегированиеПрав.ПолучитьМассивДелегатовПользователя(
		"ПроцессыИЗадачи",
		РеквизитыБизнесПроцесса.Автор,
		Истина);
	ДелегатыОтветственного = вогНастраиваемоеДелегированиеПрав.ПолучитьМассивДелегатовПользователя(
		"ПроцессыИЗадачи",
		РеквизитыБизнесПроцесса.Ответственный,
		Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтветственныеЗаПроцесс, ДелегатыАвтора, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтветственныеЗаПроцесс, ДелегатыОтветственного, Истина);
	
	Возврат ОтветственныеЗаПроцесс;
	
КонецФункции
// -- VOG Солодов В.В. 25.12.2020 DEV-47

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементовЧекЛиста(ИдентификаторЭлемента, ЗначениеВидимостиДоступности)
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПунктыЗадач Цикл
		
		//Если СтрокаТабличнойЧасти.ДобавленИзЗадачи Тогда
			
			ИдентификаторСтроки = СтрокаТабличнойЧасти.ИдентификаторЗадачи;
			
			Если ИдентификаторСтроки = ИдентификаторЭлемента Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					СтрШаблон("Редактировать_%1", ИдентификаторСтроки),
					"Видимость",
					ЗначениеВидимостиДоступности);
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					СтрШаблон("Удалить_%1", ИдентификаторСтроки),
					"Видимость",
					ЗначениеВидимостиДоступности);
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					СтрШаблон("Применить_%1", ИдентификаторСтроки),
					"Видимость",
					Не ЗначениеВидимостиДоступности);
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					СтрШаблон("Отменить_%1", ИдентификаторСтроки),
					"Видимость",
					Не ЗначениеВидимостиДоступности);
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					СтрШаблон("Редактировать_%1", ИдентификаторСтроки),
					"Доступность",
					ЗначениеВидимостиДоступности);
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					СтрШаблон("Удалить_%1", ИдентификаторСтроки),
					"Доступность",
					ЗначениеВидимостиДоступности);
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				СтрШаблон("Прикрепить_%1", ИдентификаторСтроки),
				"Доступность",
				ЗначениеВидимостиДоступности);
			
		//Иначе
		//	
		//	ИдентификаторСтроки = СтрокаТабличнойЧасти.Идентификатор;
		//	
		//КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			СтрШаблон("ПрикрепитьФайлПункта_%1", ИдентификаторСтроки),
			"Доступность",
			ЗначениеВидимостиДоступности);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			СтрШаблон("РедактироватьКомментарий_%1", ИдентификаторСтроки),
			"Доступность",
			ЗначениеВидимостиДоступности);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		СтрШаблон("Пункт_%1", ИдентификаторСтроки),
		"ТолькоПросмотр",
		ЗначениеВидимостиДоступности);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		СтрШаблон("Трудоемкость_%1", ИдентификаторСтроки),
		"ТолькоПросмотр",
		ЗначениеВидимостиДоступности);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаЧекЛистРедактирование",
		"Доступность",
		ЗначениеВидимостиДоступности);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Добавить",
		"Доступность",
		ЗначениеВидимостиДоступности);
	
	ИзменитьВидЭлемента(ИдентификаторЭлемента, Не ЗначениеВидимостиДоступности);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидЭлемента(ИдентификаторЭлемента, Редактирование)
	
	Элемент = Элементы.Найти(СтрШаблон("Пункт_%1", ИдентификаторЭлемента));
	
	Если Не Элемент = Неопределено Тогда
		
		Если Редактирование Тогда
			Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
			Элемент.МногострочныйРежим 			= Истина;
			Элемент.РастягиватьПоГоризонтали 	= Истина;
			Элемент.АвтоМаксимальнаяШирина 		= Ложь;
		Иначе
			Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
			Элемент.АвтоМаксимальнаяВысота 		= Ложь;
			Элемент.АвтоМаксимальнаяШирина 		= Ложь;
			Элемент.РастягиватьПоВертикали 		= Истина;
			Элемент.РастягиватьПоГоризонтали 	= Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементами

&НаСервере
// Процедура анализирует наличие варианта или условия и отрисовывает кнопки по вариантам выполнения задачи.
//
Процедура ДобавлениеКнопокНаПанель()
	
	СтруктураВариантовВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(Объект.Ссылка);
	
	Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 Тогда
		
		НоваяКомандаФормы = Команды.Добавить("Команда_0");
		НоваяКомандаФормы.Заголовок 				= "Выполнить";
		НоваяКомандаФормы.Действие 					= "ВыполнитьЗадачуБезУсловия";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		
		НовыйПунктМеню = Элементы.Вставить("Кнопка_0",Тип("КнопкаФормы"), Элементы.ПанельАвтоКнопок);
		НовыйПунктМеню.ИмяКоманды 					= "Команда_0";
		НовыйПунктМеню.Заголовок 					= "       Выполнить       ";
		НовыйПунктМеню.Отображение 					= ОтображениеКнопки.Текст;
		НовыйПунктМеню.ТолькоВоВсехДействиях 		= Ложь;
		
	КонецЕсли;
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(Объект.БизнесПроцесс.Ссылка);
	НаборЭтапов.Прочитать();
	
	// Если это задача БП Поручение и этап "Выполнить", то кнопка будет одна.
	Если Объект.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПоручениеНовое
		И НаборЭтапов[1].ТочкаМаршрута = Объект.CRM_ТочкаМаршрута Тогда
		
		НоваяКомандаФормы = Команды.Добавить("Команда_"+?(НаборЭтапов[2].Используется, "1", "0"));
		НоваяКомандаФормы.Заголовок 				= "Выполнить";
		НоваяКомандаФормы.Действие 					= "ВыполнениеЗадачиПоУсловию";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		
		НовыйПунктМеню = Элементы.Вставить("Кнопка_0",Тип("КнопкаФормы"), Элементы.ПанельАвтоКнопок);
		НовыйПунктМеню.ИмяКоманды 					= "Команда_" + ?(НаборЭтапов[2].Используется, "1", "0");
		НовыйПунктМеню.Заголовок 					= "       Выполнить       ";
		НовыйПунктМеню.Отображение 					= ОтображениеКнопки.Текст;
		НовыйПунктМеню.ТолькоВоВсехДействиях 		= Ложь;
		НовыйПунктМеню.КнопкаПоУмолчанию 			= Истина;
		
	Иначе
		
		ПодменюКоманд = Элементы.Вставить("ПодменюАвтоКоманд", Тип("ГруппаФормы"), Элементы.ПанельАвтоКнопок);
		ПодменюКоманд.Вид = ВидГруппыФормы.Подменю;
		ПодменюКоманд.Заголовок = "   "+СтруктураВариантовВыполнения.ПредставлениеТочкиЗаголовок+"   ";
		ПодменюКоманд.ЦветФона = Новый Цвет(255, 225, 0);
		
		Для Каждого ЭлементСписка Из СтруктураВариантовВыполнения.СписокВариантов Цикл
			
			НоваяКомандаФормы = Команды.Добавить("Команда_"+СокрЛП(Строка(ЭлементСписка.Значение)));
			НоваяКомандаФормы.Заголовок 				= ЭлементСписка.Представление;
			НоваяКомандаФормы.Действие 					= "ВыполнениеЗадачиПоУсловию";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			
			НовыйПунктМеню = Элементы.Вставить("Кнопка_"+СокрЛП(Строка(ЭлементСписка.Значение)), Тип("КнопкаФормы"), ПодменюКоманд);
			НовыйПунктМеню.ИмяКоманды 					= "Команда_"+СокрЛП(Строка(ЭлементСписка.Значение));
			НовыйПунктМеню.Заголовок 					= ЭлементСписка.Представление;
			НовыйПунктМеню.Отображение 					= ОтображениеКнопки.Текст;
			КнопкаПоУмолчанию 							= ЭлементСписка.Пометка;
			НовыйПунктМеню.Пометка 						= ЭлементСписка.Пометка;
			НовыйПунктМеню.ТолькоВоВсехДействиях 		= Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ПанельАвтоКнопок.Доступность = Не Объект.Выполнена И Объект.ПринятаКИсполнению;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоответствиеЭлементов()
	
	#Область Задачи
	
	#Область ЗадачиКоманды
	
	МассивКоманд = Новый Массив;
	
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 			= "Прикрепить";
	СтруктураКоманды.Действие 		= "Подключаемый_ПрикрепитьПриложениеЧекЛиста";
	СтруктураКоманды.Картинка 		= БиблиотекаКартинок.ПриложитьФайл;
	СтруктураКоманды.Подсказка 		= НСтр("ru = 'Указать результат задачи'");
	СтруктураКоманды.ОпределятьДоступность 	= Истина;
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 			= "Редактировать";
	СтруктураКоманды.Действие 		= "Подключаемый_РедактироватьПунктЧекЛиста";
	СтруктураКоманды.Картинка 		= БиблиотекаКартинок.РедактироватьАдресСайта;
	СтруктураКоманды.Подсказка 		= НСтр("ru = 'Редактировать'");
	СтруктураКоманды.ОпределятьДоступность 	= Истина;
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 			= "Применить";
	СтруктураКоманды.Действие 		= "Подключаемый_ПрименитьРедактированиеПунктаЧекЛиста";
	СтруктураКоманды.Картинка 		= БиблиотекаКартинок.CRM_ВиджетЦельВыполнена;
	СтруктураКоманды.Подсказка 		= НСтр("ru = 'Применить редактирование'");
	СтруктураКоманды.Видимость 		= Ложь;
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 			= "Удалить";
	СтруктураКоманды.Действие 		= "Подключаемый_УдалитьЗадачу";
	СтруктураКоманды.Картинка 		= БиблиотекаКартинок.CRM_ВиджетЦельНеДостигнута;
	СтруктураКоманды.Подсказка 		= НСтр("ru = 'Удалить пункт'");
	СтруктураКоманды.ОпределятьДоступность 	= Истина;
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 			= "Отменить";
	СтруктураКоманды.Действие 		= "Подключаемый_ОтменитьРедактированиеПунктаЧекЛиста";
	СтруктураКоманды.Картинка 		= БиблиотекаКартинок.Очистить;
	СтруктураКоманды.Подсказка 		= НСтр("ru = 'Отменить редактирование'");
	СтруктураКоманды.Видимость 		= Ложь;
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 			= "РедактироватьКомментарий";
	СтруктураКоманды.Действие 		= "Подключаемый_КомментарийПунктЧекЛиста";
	СтруктураКоманды.Картинка 		= БиблиотекаКартинок.Комментарий;
	СтруктураКоманды.Подсказка 		= НСтр("ru = 'Комментарий'");
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 			= "ПрикрепитьФайлПункта";
	СтруктураКоманды.Действие 		= "Подключаемый_ПрикрепитьФайлЗадачи";
	СтруктураКоманды.Картинка 		= БиблиотекаКартинок.CRM_ВложенияКПисьму18;
	СтруктураКоманды.Подсказка 		= НСтр("ru = 'Прикрепить файл'");
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	#КонецОбласти
	
	#Область ЗадачиЭлементы
	
	// Группа Пункт Выполнено
	МассивЭлементов = Новый Массив;
	
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "ГруппаПунктВыполнено_%1";
	СтруктураЭлемента.Тип 						= Тип("ГруппаФормы");
	СтруктураЭлемента.ГруппировкаПодчиненных 	= "ГоризонтальнаяВсегда";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Флажок Выполнено
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "Выполнено_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаПунктВыполнено_%1";
	СтруктураЭлемента.Вид 						= "ПолеФлажка";
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].Выполнено";
	СтруктураЭлемента.ТолькоПросмотр 			= Истина;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Пункт
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "Пункт_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаПунктВыполнено_%1";
	СтруктураЭлемента.Вид 						= "ПолеНадписи";
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].Пункт";
	СтруктураЭлемента.АвтоМаксимальнаяШирина	= Ложь;
	СтруктураЭлемента.АвтоМаксимальнаяВысота	= Ложь;
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Истина;
	СтруктураЭлемента.РастягиватьПоВертикали 	= Истина;
	СтруктураЭлемента.ТолькоПросмотр 			= Истина;
	СтруктураЭлемента.Шрифт 					= Новый Шрифт(, 12, Истина);
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Группа Результат
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "ГруппаРезультат_%1";
	СтруктураЭлемента.Тип 						= Тип("ГруппаФормы");
	СтруктураЭлемента.ГруппировкаПодчиненных 	= "ГоризонтальнаяВсегда";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Таблица Результат Автор
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "РезультатАвтор_%1";
	СтруктураЭлемента.Тип 						= Тип("ТаблицаФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаРезультат_%1";
	СтруктураЭлемента.Заголовок 				= НСтр("ru = 'Ожидаемый результат'");
	СтруктураЭлемента.ТолькоПросмотр 			= Истина;
	СтруктураЭлемента.ПутьКДанным 				= "ТаблицаРезультаты_%1";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Значение таблицы Результат Автор
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "РезультатАвторЗначение_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.Вид 						= "ПолеНадписи";
	СтруктураЭлемента.ЭтоРеквизитТаблицы 		= Истина;
	СтруктураЭлемента.ИмяРодителя 				= "РезультатАвтор_%1";
	СтруктураЭлемента.ПутьКДанным 				= "ТаблицаРезультаты_%1.ЗначениеАвтор";
	СтруктураЭлемента.Доступность 				= Ложь;
	СтруктураЭлемента.Гиперссылка 				= Ложь;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Разделитель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "РазделительРезультат_%1";
	СтруктураЭлемента.Тип 						= Тип("ДекорацияФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаРезультат_%1";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Таблица Результат выполнения
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "РезультатВыполнения_%1";
	СтруктураЭлемента.Тип 						= Тип("ТаблицаФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаРезультат_%1";
	СтруктураЭлемента.Заголовок 				= " ";
	СтруктураЭлемента.ПутьКДанным 				= "ТаблицаРезультаты_%1";
	СтруктураЭлемента.УстановитьРазмерыТаблицы 	= Истина;
	СтруктураЭлемента.АвтоМаксимальнаяШирина 	= Ложь;
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Ложь;
	СтруктураЭлемента.Ширина 					= 3;
	СтруктураЭлемента.МаксимальнаяШирина 		= 3;
	СтруктураЭлемента.Подсказка 				= "Результат достигнут";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Пометка Таблицы Результат выполнения
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "РезультатВыполнения_Пометка_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.ЭтоРеквизитТаблицы 		= Истина;
	СтруктураЭлемента.Вид 						= "ПолеКартинки";
	СтруктураЭлемента.ИмяРодителя 				= "РезультатВыполнения_%1";
	СтруктураЭлемента.ПутьКДанным 				= "ТаблицаРезультаты_%1.Картинка";
	СтруктураЭлемента.Доступность 				= Ложь;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Разделитель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "РазделительРезультатВыполнения_%1";
	СтруктураЭлемента.Тип 						= Тип("ДекорацияФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаРезультат_%1";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Таблица Результат Исполнитель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "РезультатИсполнитель_%1";
	СтруктураЭлемента.Тип 						= Тип("ТаблицаФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаРезультат_%1";
	СтруктураЭлемента.Заголовок 				= НСтр("ru = 'Результат исполнителя'");
	СтруктураЭлемента.ТолькоПросмотр 			= Истина;
	СтруктураЭлемента.ПутьКДанным 				= "ТаблицаРезультаты_%1";
	
	СоответствиеДействий = Новый Соответствие;
	СоответствиеДействий.Вставить("Выбор", 					"Подключаемый_ТаблицаЗадачиВыбор");
	СоответствиеДействий.Вставить("ПриАктивизацииСтроки", 	"Подключаемый_ТаблицаЗадачиПриАктивизацииСтроки");
	
	СтруктураЭлемента.Действия.Добавить(СоответствиеДействий);
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Значение Таблицы Результат Исполнитель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "РезультатИсполнительЗначение_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.Вид 						= "ПолеНадписи";
	СтруктураЭлемента.ЭтоРеквизитТаблицы 		= Истина;
	СтруктураЭлемента.ИмяРодителя 				= "РезультатИсполнитель_%1";
	СтруктураЭлемента.ПутьКДанным 				= "ТаблицаРезультаты_%1.ЗначениеИсполнитель";
	//СтруктураЭлемента.ПутьКДанным 				= "%1[%2].РезультатИсполнитель.Значение";
	СтруктураЭлемента.Доступность 				= Истина;
	СтруктураЭлемента.Гиперссылка 				= Истина;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Группа Комментарий
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "ГруппаКомментарий_%1";
	СтруктураЭлемента.Тип 						= Тип("ГруппаФормы");
	СтруктураЭлемента.ГруппировкаПодчиненных 	= "ГоризонтальнаяВсегда";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Комментарий Автор
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "КомментарийАвтор_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаКомментарий_%1";
	СтруктураЭлемента.Вид 						= "ПолеНадписи";
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].Комментарий";
	СтруктураЭлемента.АвтоМаксимальнаяШирина	= Ложь;
	СтруктураЭлемента.АвтоМаксимальнаяВысота	= Ложь;
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Истина;
	СтруктураЭлемента.РастягиватьПоВертикали 	= Истина;
	СтруктураЭлемента.ПоложениеЗаголовка 		= "Лево";
	СтруктураЭлемента.Заголовок 				= НСтр("ru = 'Комментарий'");
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Разделитель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "РазделительКомментарий_%1";
	СтруктураЭлемента.Тип 						= Тип("ДекорацияФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаКомментарий_%1";
	СтруктураЭлемента.Ширина 					= 6;
	СтруктураЭлемента.МаксимальнаяШирина 		= 6;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Комментарий Исполнитель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "КомментарийИсполнитель_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаКомментарий_%1";
	СтруктураЭлемента.Вид 						= "ПолеНадписи";
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].КомментарийИсполнитель";
	СтруктураЭлемента.АвтоМаксимальнаяШирина	= Ложь;
	СтруктураЭлемента.АвтоМаксимальнаяВысота	= Ложь;
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Истина;
	СтруктураЭлемента.РастягиватьПоВертикали 	= Истина;
	СтруктураЭлемента.ПоложениеЗаголовка 		= "Лево";
	СтруктураЭлемента.Заголовок 				= НСтр("ru = 'Комментарий'");
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Группа Файлы
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "ГруппаФайлы_%1";
	СтруктураЭлемента.Тип 						= Тип("ГруппаФормы");
	СтруктураЭлемента.ГруппировкаПодчиненных 	= "ГоризонтальнаяВсегда";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Таблица Файлы Автор
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "ФайлыАвтор_%1";
	СтруктураЭлемента.Тип 						= Тип("ТаблицаФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаФайлы_%1";
	СтруктураЭлемента.Заголовок 				= НСтр("ru = 'Файлы'");
	СтруктураЭлемента.ТолькоПросмотр 			= Истина;
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].ФайлыАвтор";
	
	СоответствиеДействий = Новый Соответствие;
	СоответствиеДействий.Вставить("Выбор", "Подключаемый_ТаблицаЗадачиВыбор");
	СтруктураЭлемента.Действия.Добавить(СоответствиеДействий);
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Значение Таблицы Файлы Автор
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "ФайлыАвторЗначение_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.Вид 						= "ПолеНадписи";
	СтруктураЭлемента.ЭтоРеквизитТаблицы 		= Истина;
	СтруктураЭлемента.ИмяРодителя 				= "ФайлыАвтор_%1";
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].ФайлыАвтор.Значение";
	СтруктураЭлемента.Доступность 				= Истина;
	СтруктураЭлемента.Гиперссылка 				= Истина;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Разделитель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "РазделительФайлы_%1";
	СтруктураЭлемента.Тип 						= Тип("ДекорацияФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаФайлы_%1";
	СтруктураЭлемента.Ширина 					= 6;
	СтруктураЭлемента.МаксимальнаяШирина 		= 6;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Таблица Файлы Исполнитель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "ФайлыИсполнитель_%1";
	СтруктураЭлемента.Тип 						= Тип("ТаблицаФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаФайлы_%1";
	СтруктураЭлемента.Заголовок 				= НСтр("ru = 'Файлы'");
	СтруктураЭлемента.ТолькоПросмотр 			= Истина;
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].ФайлыИсполнитель";
	
	СоответствиеДействий = Новый Соответствие;
	СоответствиеДействий.Вставить("Выбор", "Подключаемый_ТаблицаЗадачиВыбор");
	СтруктураЭлемента.Действия.Добавить(СоответствиеДействий);
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Значение Таблицы Файлы Исполнитель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина);
	СтруктураЭлемента.Имя 						= "ФайлыИсполнительЗначение_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.Вид 						= "ПолеНадписи";
	СтруктураЭлемента.ЭтоРеквизитТаблицы 		= Истина;
	СтруктураЭлемента.ИмяРодителя 				= "ФайлыИсполнитель_%1";
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].ФайлыИсполнитель.Значение";
	СтруктураЭлемента.Доступность 				= Истина;
	СтруктураЭлемента.Гиперссылка 				= Истина;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	СтруктураЧекЛист = Новый Структура;
	СтруктураЧекЛист.Вставить("ИмяТаблицы", 	"ТаблицаПунктыЗадач");
	СтруктураЧекЛист.Вставить("ИмяГруппы", 		"");
	СтруктураЧекЛист.Вставить("Команды", 		МассивКоманд);
	СтруктураЧекЛист.Вставить("Элементы", 		МассивЭлементов);
	
	#КонецОбласти
	
	#КонецОбласти
	
	////////////////////////////////////////////////////////////////////////////////////
	СтруктураНастроекЭлементов = Новый Структура;
	СтруктураНастроекЭлементов.Вставить("Задачи", СтруктураЧекЛист);
	
	НастройкаЭлементов = СтруктураНастроекЭлементов;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикДобавленияПунктаЧекЛиста() Экспорт
	
	Если ВыполняетсяДобавлениеТиповогоПункта Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ЧекЛистПункт) Тогда
		ДобавитьЗадачу(ТекущиеДанные.Предмет);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаЧекЛистРедактированиеПредмет",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДобавитьПунктПредмет",
		"Видимость",
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДобавитьТиповуюЗадачу",
		"Видимость",
		Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТиповуюЗадачуНаСервере(Результат, Предмет, Отказ)
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		Для Каждого ТиповаяЗадача Из Результат Цикл
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("ТиповаяЗадача", 	ТиповаяЗадача);
			ПараметрыОтбораСтрок.Вставить("Предмет", 		Предмет); // VOG Солодов В.В. 19.11.2020 CRM-1057
			
			НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
				
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаборЗадач) Тогда
					
					ШаблонСообщения = НСтр("ru = 'Типовая задача %1 уже добавлена вместе с набором %2.'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ТиповаяЗадача, СтрокаТабличнойЧасти.НаборЗадач); // VOG Солодов В.В. 19.11.2020 CRM-1057
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не Отказ Тогда
				ДобавитьЗадачу(Предмет, ТиповаяЗадача,, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение Из Результат Цикл
			
			НаборЗадач = КлючИЗначение.Ключ;
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("НаборЗадач", НаборЗадач);
			ПараметрыОтбораСтрок.Вставить("Предмет", 	Предмет); // VOG Солодов В.В. 07.12.2020 CRM-1108
			
			НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ШаблонСообщения = НСтр("ru = 'Набор задач %1 уже добавлен.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, НаборЗадач);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				
			КонецЕсли;
			
			Если Не Отказ Тогда
				
				Для Каждого ТиповаяЗадача Из КлючИЗначение.Значение Цикл
					ДобавитьЗадачу(Предмет, ТиповаяЗадача, НаборЗадач, Отказ);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗадачу(Предмет, ТиповаяЗадача = Неопределено, НаборЗадач = Неопределено, Отказ = Ложь)
	
	ИдентификаторЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор();
	
	Если ТиповаяЗадача = Неопределено Тогда
		
		Задача 					= ЧекЛистПункт;
		Результат 				= Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("Приложение", Новый ОписаниеТипов);
		
		ПринадлежностьОбъекту 	= Неопределено;
		Трудоемкость 			= Дата(1,1,1);
		
	Иначе
		
		СтруктураРеквизитов 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ТиповаяЗадача, "ОписаниеЗадачи, ПлановоеВремя, Приложения, ПринадлежностьОбъекту");
		
		Задача 					= СтруктураРеквизитов.ОписаниеЗадачи;
		Результат 				= СтруктураРеквизитов.Приложения.Выгрузить();
		ПринадлежностьОбъекту 	= СтруктураРеквизитов.ПринадлежностьОбъекту;
		Трудоемкость 			= СтруктураРеквизитов.ПлановоеВремя;
		
	КонецЕсли;
	
	Если НаборЗадач = Неопределено Тогда
		НаборЗадач= Справочники.вогНаборыТиповыхЗадач.ПустаяСсылка();
		ИдентификаторНабора = "";
		ТрудоемкостьНабора 	= Дата(1,1,1);
	Иначе
		ИдентификаторНабора = вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(XMLСтрока(НаборЗадач));
		ТрудоемкостьНабора 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборЗадач, "ПлановоеВремя");
	КонецЕсли;
	
	ИмяТаблицыРезультат 	= ПолучитьИмяТаблицыРезультат(ИдентификаторЭлемента);
	СоздатьТаблицуВыполнения(ИмяТаблицыРезультат);
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Предмет", 				Предмет);
	СтруктураЗаполнения.Вставить("РезультатИсполнитель", 	Неопределено);
	СтруктураЗаполнения.Вставить("Результат", 				Результат);
	СтруктураЗаполнения.Вставить("ДобавленИзЗадачи", 		Истина);
	
	ЗаполнитьТаблицуВыполнения(СтруктураЗаполнения, ИмяТаблицыРезультат);
	
	НоваяСтрока = ТаблицаПунктыЗадач.Добавить();
	НоваяСтрока.Пункт 					= Задача;
	НоваяСтрока.ИдентификаторЗадачи 	= ИдентификаторЭлемента;
	НоваяСтрока.ДобавленИзЗадачи 		= Истина;
	НоваяСтрока.Предмет 				= Предмет;
	НоваяСтрока.Трудоемкость 			= Трудоемкость;
	НоваяСтрока.ТиповаяЗадача 			= ТиповаяЗадача;
	НоваяСтрока.НаборЗадач 				= НаборЗадач;
	НоваяСтрока.ТрудоемкостьНабора 		= ТрудоемкостьНабора;
	НоваяСтрока.ИдентификаторНабора 	= ИдентификаторНабора;
	НоваяСтрока.ПринадлежностьОбъекту 	= ПринадлежностьОбъекту;
	НоваяСтрока.НомерСтроки 			= ТаблицаПунктыЗадач.НайтиСтроки(Новый Структура("Предмет", Предмет)).Количество();
	
	Если Не ВыполняетсяДобавлениеТиповогоПункта Тогда
		ЧекЛистПункт = "";
	КонецЕсли;
	
	Если ФормироватьМакет Тогда
		
		МакетЗадачи 	= СформироватьМакетЗадачи(Предмет);
		ИмяОбласти 		= СтрШаблон("R%1C%2", МакетЗадачи.ВысотаТаблицы - 6, 3);
		ОбластьПункт 	= МакетЗадачи.Область(ИмяОбласти);
		
		Элементы.МакетЗадачи.ТекущаяОбласть = ОбластьПункт;
		
	Иначе
		СоздатьЭлементыЗадач(НоваяСтрока);
		УстановитьУсловноеОформлениеТаблицыРезультат(ИдентификаторЭлемента);
	КонецЕсли;
	
	НастроитьЗаголовкиЭлементовФормы();
	Модифицированность = Истина;
	
	Если Не ФормироватьМакет Тогда
		ИмяТекущегоЭлемента = СтрШаблон("Выполнено_%1", ИдентификаторЭлемента);
		ТекЭлемент = Элементы.Найти(ИмяТекущегоЭлемента);
		Если Не ТекЭлемент = Неопределено Тогда
			ТекущийЭлемент = ТекЭлемент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьГруппуЭлементовПоля(ИмяГруппы, ГруппаРодитель, СледующийЭлемент = Неопределено, Группировка)
	
	ГруппаЭлементов = Элементы.Найти(ИмяГруппы);
	
	Если ГруппаЭлементов = Неопределено Тогда
		
		Если СледующийЭлемент = Неопределено Тогда
			ГруппаЭлементов = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаРодитель);
		Иначе
			ГруппаЭлементов = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаРодитель, СледующийЭлемент);
		КонецЕсли;
		
		ГруппаЭлементов.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементов.ОтображатьЗаголовок 		= Ложь;
		ГруппаЭлементов.Отображение 				= ОтображениеОбычнойГруппы.Нет;
		ГруппаЭлементов.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы[Группировка];
		ГруппаЭлементов.РастягиватьПоГоризонтали 	= Истина;
		ГруппаЭлементов.РастягиватьПоВертикали 		= Ложь;
		ГруппаЭлементов.ЦветФона 					= ЦветаСтиля.ЦветФонаФормы;
		
	КонецЕсли;
	
	Возврат ГруппаЭлементов;
	
КонецФункции

&НаСервере
Процедура СоздатьПолеФормы(Знач ИмяЭлемента, Знач НастройкаЭлемента, Знач ПутьКДанным, Знач ЭлементРодитель)
	
	Элемент = Элементы.Добавить(ИмяЭлемента, НастройкаЭлемента.Тип, ЭлементРодитель);
	Элемент.Вид 						= ВидПоляФормы[НастройкаЭлемента.Вид];
	Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы[НастройкаЭлемента.ПоложениеЗаголовка];
	Элемент.ПутьКДанным 				= ПутьКДанным;
	Элемент.ТолькоПросмотр 				= НастройкаЭлемента.ТолькоПросмотр;
	
	Если Не НастройкаЭлемента.Шрифт = Неопределено Тогда
		Элемент.Шрифт = НастройкаЭлемента.Шрифт;
	КонецЕсли;
	
	Если Не ВидПоляФормы[НастройкаЭлемента.Вид] = ВидПоляФормы.ПолеФлажка Тогда
		
		Элемент.АвтоМаксимальнаяШирина 		= НастройкаЭлемента.АвтоМаксимальнаяШирина;
		Элемент.АвтоМаксимальнаяВысота 		= НастройкаЭлемента.АвтоМаксимальнаяВысота;
		Элемент.РастягиватьПоГоризонтали 	= НастройкаЭлемента.РастягиватьПоГоризонтали;
		Элемент.РастягиватьПоВертикали 		= НастройкаЭлемента.РастягиватьПоВертикали;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПоляПоНастройкеНаСервере(ИмяНастройки, ИдентификаторЭлемента, ИндексСтроки)
	
	ИмяГруппы = СтрШаблон("Группа%1", ИмяНастройки);
	ГруппаЭлементов = Элементы.Найти(ИмяГруппы);
	
	Если Не ГруппаЭлементов = Неопределено Тогда
		ДобавитьЭлементыПоНастройке(ИдентификаторЭлемента, ГруппаЭлементов, ИмяНастройки, ИндексСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандыПоНастройке(ИдентификаторЭлемента, ГруппаРодитель, ИмяНастройки, ИндексСтроки)
	
	МассивНастроекКоманд = НастройкаЭлементов[ИмяНастройки].Команды;
	
	Для Каждого СтруктураКоманды Из МассивНастроекКоманд Цикл
		
		ИмяКоманды = СтрШаблон("%1_%2", СтруктураКоманды.Имя, ИдентификаторЭлемента);
		
		// Добавление команды
		Если Команды.Найти(ИмяКоманды) = Неопределено Тогда
			
			Команда 				= Команды.Добавить(ИмяКоманды);
			Команда.Действие		= СтруктураКоманды.Действие;
			Команда.Картинка 		= СтруктураКоманды.Картинка;
			Команда.Отображение 	= ОтображениеКнопки.Картинка;
			Команда.Подсказка 		= СтруктураКоманды.Подсказка;
			
		КонецЕсли;
		
		// Добавление элемента формы
		Кнопка 						= Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаРодитель);
		Кнопка.ИмяКоманды 			= ИмяКоманды;
		Кнопка.ОтображениеФигуры 	= ОтображениеФигурыКнопки.Нет;
		Кнопка.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		Кнопка.Видимость 			= СтруктураКоманды.Видимость;
		
		Если СтруктураКоманды.ОпределятьДоступность Тогда
			Кнопка.Доступность 		= ТаблицаПунктыЗадач[ИндексСтроки].ДобавленИзЗадачи;
		КонецЕсли;
		
		НоваяСтрока = СозданныеЭлементы.Добавить();
		НоваяСтрока.ИмяЭлемента 	= ИмяКоманды;
		НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыПоНастройке(ИдентификаторЭлемента, ГруппаРодитель, ИмяНастройки, ИндексСтроки)
	
	Если ИмяНастройки = "Задачи" Тогда
		
		СтруктураНастроек 	= НастройкаЭлементов[ИмяНастройки];
		ИмяТаблицы 			= СтруктураНастроек.ИмяТаблицы;
		
		Для Каждого НастройкаЭлемента Из СтруктураНастроек.Элементы Цикл
			
			ИмяЭлемента = СтрШаблон(НастройкаЭлемента.Имя, ИдентификаторЭлемента);
			
			Если ЗначениеЗаполнено(НастройкаЭлемента.ИмяРодителя) Тогда
				ИмяРодителя 	= СтрШаблон(НастройкаЭлемента.ИмяРодителя, ИдентификаторЭлемента);
				ЭлементРодитель = Элементы.Найти(ИмяРодителя);
			Иначе
				ЭлементРодитель = ГруппаРодитель;
			КонецЕсли;
			
			Если НастройкаЭлемента.Тип = Тип("ГруппаФормы") Тогда
				
				СоздатьГруппуЭлементовПоля(ИмяЭлемента, ЭлементРодитель,, НастройкаЭлемента.ГруппировкаПодчиненных);
				
			ИначеЕсли НастройкаЭлемента.Тип = Тип("ПолеФормы")
				И Не НастройкаЭлемента.ЭтоРеквизитТаблицы Тогда
				
				ПутьКДанным = СтрШаблон(НастройкаЭлемента.ПутьКДанным, ИмяТаблицы, ИндексСтроки);
				СоздатьПолеФормы(ИмяЭлемента, НастройкаЭлемента, ПутьКДанным, ЭлементРодитель);
				
			ИначеЕсли НастройкаЭлемента.Тип = Тип("ТаблицаФормы") Тогда
				
				Если СтрЧислоВхождений(НастройкаЭлемента.ПутьКДанным, "%") = 1 Тогда
					ПутьКДанным = СтрШаблон(НастройкаЭлемента.ПутьКДанным, ИдентификаторЭлемента);
				Иначе
					ПутьКДанным = СтрШаблон(НастройкаЭлемента.ПутьКДанным, ИмяТаблицы, ИндексСтроки);
				КонецЕсли;
				
				Если Не ПустаяСтрока(НастройкаЭлемента.ПутьКДаннымКартинкиСтроки) Тогда
					НастройкаЭлемента.ПутьКДаннымКартинкиСтроки = СтрШаблон(НастройкаЭлемента.ПутьКДаннымКартинкиСтроки, ИдентификаторЭлемента);
				КонецЕсли;
				
				вогБизнесПроцессыИЗадачиСервер.СоздатьТаблицуФормы(
					ЭтотОбъект,
					ИмяЭлемента,
					ЭлементРодитель,
					НастройкаЭлемента,
					ПутьКДанным);
				
			ИначеЕсли НастройкаЭлемента.Тип = Тип("ПолеФормы") Тогда
				
				Если СтрЧислоВхождений(НастройкаЭлемента.ПутьКДанным, "%") = 1 Тогда
					ПутьКДанным = СтрШаблон(НастройкаЭлемента.ПутьКДанным, ИдентификаторЭлемента);
				Иначе
					ПутьКДанным = СтрШаблон(НастройкаЭлемента.ПутьКДанным, ИмяТаблицы, ИндексСтроки);
				КонецЕсли;
				
				вогБизнесПроцессыИЗадачиСервер.СоздатьПолеТаблицы(
					ЭтотОбъект,
					ИмяЭлемента,
					ЭлементРодитель,
					НастройкаЭлемента,
					ПутьКДанным);
				
			ИначеЕсли НастройкаЭлемента.Тип = Тип("ДекорацияФормы") Тогда
				
				вогБизнесПроцессыИЗадачиСервер.СоздатьРазделитель(ЭтотОбъект, ИмяЭлемента, ЭлементРодитель, НастройкаЭлемента);
				
			КонецЕсли;
			
			НоваяСтрока = СозданныеЭлементы.Добавить();
			НоваяСтрока.ИмяЭлемента 	= ИмяЭлемента;
			НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
			
		КонецЦикла;
		
	Иначе
		
		ИмяЭлемента 	= СтрШаблон("%1_%2", "ТаблицаИсполнители", ИдентификаторЭлемента);
		ИмяДекорации 	= СтрШаблон("Декорация%1", ИмяНастройки);
		
		ЭлементДекорация = Элементы.Найти(ИмяДекорации);
		ЭлементДекорация.Видимость = Истина;
		
		Элемент = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаРодитель, ЭлементДекорация);
		Элемент.Вид 				= ВидПоляФормы.ПолеНадписи;
		Элемент.Гиперссылка 		= Истина;
		Элемент.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным 		= СтрШаблон("ТаблицаИсполнители[%1].Исполнитель", ИндексСтроки);
		
		Элемент.УстановитьДействие("Нажатие", "СотрудникНажатие");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыЗадач(СтрокаТабличнойЧасти)
	
	ИдентификаторЭлемента 	= СтрокаТабличнойЧасти.ИдентификаторЗадачи;
	ИндексСтроки 			= ТаблицаПунктыЗадач.Индекс(СтрокаТабличнойЧасти);
	
	Если ИндексСтроки < 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Предмет) = Тип("Строка") Тогда
		ИдентификаторСтраницы 	= "ОбщиеЗадачи";
	Иначе
		ИдентификаторСтраницы 	= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(
			СтрокаТабличнойЧасти.Предмет.УникальныйИдентификатор());
	КонецЕсли;
	РодительОбщейГруппы 	= вогБизнесПроцессыИЗадачиСервер.СоздатьСтраницуФормы(
		ЭтотОбъект,
		ИдентификаторСтраницы,
		Элементы.СтраницыЧекЛиста);
	
	Если РодительОбщейГруппы.ПодчиненныеЭлементы.Количество() > 0 Тогда
		
		ИмяРазделителя = СтрШаблон("Разделитель_%1", ИдентификаторЭлемента);
		вогБизнесПроцессыИЗадачиСервер.СоздатьРазделитель(
			ЭтотОбъект,
			ИмяРазделителя,
			РодительОбщейГруппы,
			Новый Структура("ДобавитьРамку", Истина));
		
		НоваяСтрока = СозданныеЭлементы.Добавить();
		НоваяСтрока.ИмяЭлемента 	= ИмяРазделителя;
		НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
		
	КонецЕсли;
	
	ИмяГруппы = "Группа_" + ИдентификаторЭлемента;
	ОбщаяГруппа = СоздатьГруппуЭлементовПоля(ИмяГруппы, РодительОбщейГруппы,, "ГоризонтальнаяВсегда");
	
	НоваяСтрока = СозданныеЭлементы.Добавить();
	НоваяСтрока.ИмяЭлемента 	= ИмяГруппы;
	НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
	
	ИмяГруппы = "ГруппаЭлементов_" + ИдентификаторЭлемента;
	ГруппаЭлементов = СоздатьГруппуЭлементовПоля(ИмяГруппы, ОбщаяГруппа,, "Вертикальная");
	
	ДобавитьЭлементыПоНастройке(ИдентификаторЭлемента, ГруппаЭлементов, "Задачи", ИндексСтроки);
	
	ИмяГруппы = "ГруппаКоманды_" + ИдентификаторЭлемента;
	ГруппаКоманды = СоздатьГруппуЭлементовПоля(ИмяГруппы, ОбщаяГруппа,, "Вертикальная");
	ДобавитьКомандыПоНастройке(ИдентификаторЭлемента, ГруппаКоманды, "Задачи", ИндексСтроки);
	
	// Установка высоты таблицы
	МассивИменКолонок = Новый Массив;
	МассивИменКолонок.Добавить("Результат");
	МассивИменКолонок.Добавить("Файлы");
	
	Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
		УстановитьВысотуТаблицы(ИмяКолонки, ИндексСтроки, ИдентификаторЭлемента);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьНаборЗадачНаСервере(НаборЗадач, Предмет)
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("НаборЗадач", НаборЗадач);
	ПараметрыОтбораСтрок.Вставить("Предмет", 	Предмет);
	
	НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	
	МассивИдентификаторов = ТаблицаПунктыЗадач.Выгрузить(НайденныеСтроки).ВыгрузитьКолонку("ИдентификаторЗадачи");
	
	Для Каждого ИдентификаторЗадачи Из МассивИдентификаторов Цикл
		УдалитьЗадачуНаСервере(ИдентификаторЗадачи, Ложь);
	КонецЦикла;
	
	// Обновление табличного документа
	МакетЗадачи = СформироватьМакетЗадачи(Предмет);
	
	// Установка текущей области
	ВерхОбласти = МакетЗадачи.ВысотаТаблицы - 6;
	
	Если ВерхОбласти > 0 Тогда
		ИмяОбласти = СтрШаблон("R%1C%2", ВерхОбласти, 3);
	Иначе
		ИмяОбласти = "R1C1";
	КонецЕсли;
	
	Элементы.МакетЗадачи.ТекущаяОбласть = МакетЗадачи.Область(ИмяОбласти);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗадачуНаСервере(ИдентификаторЭлемента, ОбновитьМакет = Истина)
	
	ИндексСтроки 	= Неопределено;
	Предмет 		= Неопределено;
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ИдентификаторЗадачи", ИдентификаторЭлемента);
	
	НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		ИндексСтроки 	= ТаблицаПунктыЗадач.Индекс(СтрокаТабличнойЧасти);
		Предмет 		= СтрокаТабличнойЧасти.Предмет;
	КонецЦикла;
	
	Если ИндексСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПунктыЗадач.Удалить(ИндексСтроки);
	УдалитьЭлементыЗадачи(ИдентификаторЭлемента);
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты.Добавить(ПолучитьИмяТаблицыРезультат(ИдентификаторЭлемента));
	
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
	Если ФормироватьМакет Тогда
		
		Если ОбновитьМакет Тогда
			
			МакетЗадачи = СформироватьМакетЗадачи(Предмет);
			
			ВерхОбласти = МакетЗадачи.ВысотаТаблицы - 6;
			
			Если ВерхОбласти > 0 Тогда
				ИмяОбласти = СтрШаблон("R%1C%2", ВерхОбласти, 3);
			Иначе
				ИмяОбласти = "R1C1";
			КонецЕсли;
			
			Элементы.МакетЗадачи.ТекущаяОбласть = МакетЗадачи.Область(ИмяОбласти);
			
		КонецЕсли;
		
	Иначе
		
		Для Индекс = ИндексСтроки По ТаблицаПунктыЗадач.Количество() - 1 Цикл
			СтрокаТабличнойЧасти = ТаблицаПунктыЗадач.Получить(Индекс);
			УдалитьЭлементыЗадачи(СтрокаТабличнойЧасти.ИдентификаторЗадачи);
			СоздатьЭлементыЗадач(СтрокаТабличнойЧасти);
		КонецЦикла;
		
	КонецЕсли;
	
	НастроитьЗаголовкиЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыЗадачи(ИдентификаторЭлемента)
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Идентификатор", ИдентификаторЭлемента);
	
	НайденныеСтроки = СозданныеЭлементы.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		
		Элемент = Элементы.Найти(СтрокаТабличнойЧасти.ИмяЭлемента);
		
		Если Не Элемент = Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВысотуТаблицы(ИмяКолонки, ИндексСтроки, ИдентификаторЭлемента)
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Автор");
	ИменаТаблиц.Добавить("Исполнитель");
	ИменаТаблиц.Добавить("Выполнения");
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		
		ИмяЭлемента = СтрШаблон("%1%2_%3", ИмяКолонки, ИмяТаблицы, ИдентификаторЭлемента);
		Элемент 	= Элементы.Найти(ИмяЭлемента);
		
		Если Не Элемент = Неопределено Тогда
			
			Если ИмяТаблицы = "Выполнения" Тогда
				КолонкаИмя = СтрШаблон("%1%2", ИмяКолонки, "Исполнитель");
			Иначе
				КолонкаИмя = СтрШаблон("%1%2", ИмяКолонки, ИмяТаблицы);
			КонецЕсли;
			
			Если ИмяКолонки = "Результат" Тогда
				
				ИмяТаблицыВыполнение = ПолучитьИмяТаблицыРезультат(ИдентификаторЭлемента);
				КоличествоСтрок = ЭтотОбъект[ИмяТаблицыВыполнение].Количество();
				
			Иначе
				КоличествоСтрок = ТаблицаПунктыЗадач[ИндексСтроки][КолонкаИмя].Количество();
			КонецЕсли;
			
			Элемент.ВысотаВСтрокахТаблицы = ?(КоличествоСтрок = 0, 1, КоличествоСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ПолучитьИмяНастройкиПоСтрокеТабличнойЧасти(СтрокаТабличнойЧасти)
	
	ИмяНастройки = Неопределено;
	
	Если СтрокаТабличнойЧасти.Контролер Тогда
		ИмяНастройки = "Контролеры";
	ИначеЕсли СтрокаТабличнойЧасти.Соисполнитель Тогда
		ИмяНастройки = "Соисполнители";
	ИначеЕсли СтрокаТабличнойЧасти.Наблюдатель Тогда
		ИмяНастройки = "Наблюдатели";
	КонецЕсли;
	
	Возврат ИмяНастройки;
	
КонецФункции

&НаСервере
Процедура РедактироватьНаСервере()
	
	РежимРедактирования = Не РежимРедактирования;
	
	Если РежимРедактирования Тогда
		ВидПоляЭлемента = ВидПоляФормы.ПолеВвода;
		ЗаголовокКоманды = НСтр("ru = 'Закончить редактирование'");
	Иначе
		ВидПоляЭлемента = ВидПоляФормы.ПолеНадписи;
		ЗаголовокКоманды = НСтр("ru = 'Редактировать'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Описание",
		"ТолькоПросмотр",
		Не РежимРедактирования);
	
	Элементы.ФормаРедактировать.Заголовок = ЗаголовокКоманды;
	
	МассивНастроек = Новый Массив;
	МассивНастроек.Добавить("Контролеры");
	МассивНастроек.Добавить("Соисполнители");
	МассивНастроек.Добавить("Наблюдатели");
	
	Для Каждого ИмяНастройки Из МассивНастроек Цикл
		
		Для Каждого СтрокаИсполнитель Из ТаблицаИсполнители Цикл
			
			ИмяЭлемента = СтрШаблон("%1_%2", "ТаблицаИсполнители", СтрокаИсполнитель.Идентификатор);
			
			ЭлементФормы = Элементы.Найти(ИмяЭлемента);
			
			Если Не ЭлементФормы = Неопределено Тогда
				ЭлементФормы.Вид = ВидПоляЭлемента;
				Если ВидПоляЭлемента = ВидПоляФормы.ПолеНадписи Тогда
					ЭлементФормы.Гиперссылка = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьВидВзаимодействияМероприятия(Предмет)
	
	ВидВзаимодействия = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_ВидыВзаимодействий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ВидыВзаимодействий КАК CRM_ВидыВзаимодействий
		|ГДЕ
		|	CRM_ВидыВзаимодействий.ПометкаУдаления = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА &ИспользоватьКлиенты
		|				ТОГДА CRM_ВидыВзаимодействий.вогИспользоватьКлиенты = ИСТИНА
		|			КОГДА &ИспользоватьТорговыеТочки
		|				ТОГДА CRM_ВидыВзаимодействий.вогИспользоватьТорговыеТочки = ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ИспользоватьКлиенты", 		ТипЗнч(Предмет) = Тип("СправочникСсылка.Партнеры"));
	Запрос.УстановитьПараметр("ИспользоватьТорговыеТочки", 	ТипЗнч(Предмет) = Тип("СправочникСсылка.вогТорговыеТочки"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВидВзаимодействия = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат ВидВзаимодействия;
	
КонецФункции

&НаСервере
Процедура ОпределитьРольТекущегоПользователя()
	
	// ++ VOG Солодов В.В. 14.01.2021 DEV-54
	Постановщик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БизнесПроцесс, "Ответственный", Истина);
	Если ТекущийПользователь = Постановщик Тогда
	// До изменения
	//Если ТекущийПользователь = Объект.Автор Тогда
	// -- VOG Солодов В.В. 14.01.2021 DEV-54
		ЭтоПостановщик = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Исполнитель", ТекущийПользователь);
	
	НайденныеСтроки = ТаблицаИсполнители.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаИсполнитель Из НайденныеСтроки Цикл
		
		Если СтрокаИсполнитель.Соисполнитель Тогда
			ЭтоСоисполнитель = Истина;
			Прервать;
		ИначеЕсли СтрокаИсполнитель.Наблюдатель Тогда
			ЭтоНаблюдатель = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяТаблицыРезультат(ИдентификаторОбъекта)
	
	Возврат СтрШаблон("ТаблицаРезультаты_%1", ИдентификаторОбъекта);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСсылка(ПроверяемыйТип)
	
	Возврат ОбщегоНазначения.ЭтоСсылка(ПроверяемыйТип);
	
КонецФункции

#КонецОбласти

#Область ТабличныйДокумент

&НаСервере
Функция СформироватьМакетЗадачи(Предмет)
	
	Возврат вогБизнесПроцессыИЗадачиСервер.СформироватьМакетЗадачиИсполнителя(ЭтотОбъект, Предмет);
	
КонецФункции

&НаКлиенте
Процедура МакетЗадачиОбработатьРасшифровку(Расшифровка)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		ТекущийПредмет 			= Элементы.Предметы.ТекущиеДанные.Предмет;
		ИдентификаторЭлемента 	= Расшифровка.Идентификатор;
		
		Если Расшифровка.Свойство("ДобавленИзЗадачи") Тогда
			// это пункт. ничего не делаем
		ИначеЕсли ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
			
			Если Не ТолькоПросмотр Тогда // VOG Солодов В.В. 27.11.2020 CRM-1054 // Добавлено условие ТолькоПросмотр
				
				ВариантОпроса = Расшифровка.ЗначениеИсполнитель;
				
				СтруктураФормирования = ПолучитьСтруктуруФормированияАнкеты(ВариантОпроса, ТекущийПредмет);
				
				Если СтруктураФормирования = Неопределено Тогда
					
					ЗначенияЗаполнения = Новый Структура;
					ЗначенияЗаполнения.Вставить("ВариантОпроса", 		ВариантОпроса);
					ЗначенияЗаполнения.Вставить("Респондент", 			ТекущийПредмет);
					ЗначенияЗаполнения.Вставить("ДокументОснование", 	Объект.БизнесПроцесс);
					
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
					
					ОткрытьФорму("Документ.вогАнкета.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
					
				Иначе
					
					Если Не СтруктураФормирования.УсловияВыполнены Тогда
						
						ШаблонСообщения = НСтр("ru = '%1 не соответствует условиям для создания данной анкеты.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекущийПредмет);
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
						
					Иначе
						
						Респондент = ТекущийПредмет;
						
						Параметр1 = СтруктураФормирования.Параметр1;
						Параметр2 = СтруктураФормирования.Параметр2;
						Параметр3 = СтруктураФормирования.Параметр3;
						Параметр4 = СтруктураФормирования.Параметр4;
						Параметр5 = СтруктураФормирования.Параметр5;
						
						ОбработчикФормирования = СформироватьОбработчикСозданияАнкеты(СтруктураФормирования.Обработчик);
						
						Попытка
							Выполнить(ОбработчикФормирования);
						Исключение
							
							ШаблонСообщения = НСтр("ru = 'Не удалось выполнить команду. Причина: %1'");
							ТекстСообщения 	= СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
							
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("ДокументСсылка.CRM_Мероприятие") Тогда
			
			Если ЗначениеЗаполнено(Расшифровка.ЗначениеИсполнитель) Тогда
				
				ПоказатьЗначение(Неопределено, Расшифровка.ЗначениеИсполнитель);
				
			ИначеЕсли Не ТолькоПросмотр Тогда // VOG Солодов В.В. 27.11.2020 CRM-1054 // Добавлено условие ТолькоПросмотр
				
				ЗначенияЗаполнения = Новый Структура;
				ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
				
				ВидВзаимодействия = ОпределитьВидВзаимодействияМероприятия(ТекущийПредмет);
				
				Если Не ВидВзаимодействия = Неопределено Тогда
					ЗначенияЗаполнения.Вставить("ВидВзаимодействия", 	ВидВзаимодействия);
				КонецЕсли;
				
				Если ТипЗнч(ТекущийПредмет) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
					ЗначенияЗаполнения.Вставить("ТорговаяТочка", 		ТекущийПредмет);
				ИначеЕсли ТипЗнч(ТекущийПредмет) = Тип("СправочникСсылка.Партнеры") Тогда
					ЗначенияЗаполнения.Вставить("Партнер", 				ТекущийПредмет);
				КонецЕсли;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ЗначенияЗаполнения", 	ЗначенияЗаполнения);
				
				ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборРезультатаЗавершение", ЭтотОбъект);
				
				ОткрытьФорму(
					"Документ.CRM_Мероприятие.Форма.ФормаДокумента",
					ПараметрыФормы,
					ЭтотОбъект,
					,
					,
					,
					ОписаниеОповещенияОЗакрытии);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("ДокументСсылка.вогКомандировка") Тогда
			
			Если ЗначениеЗаполнено(Расшифровка.ЗначениеИсполнитель) Тогда
				
				ПоказатьЗначение(Неопределено, Расшифровка.ЗначениеИсполнитель);
				
			ИначеЕсли Не ТолькоПросмотр Тогда // VOG Солодов В.В. 27.11.2020 CRM-1054 // Добавлено условие ТолькоПросмотр
				
				ЗначенияЗаполнения = Новый Структура;
				ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
				
				ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборРезультатаЗавершение", ЭтотОбъект);
				
				ОткрытьФорму(
					"Документ.вогКомандировка.Форма.ФормаДокумента",
					ПараметрыФормы,
					ЭтотОбъект,
					,
					,
					,
					ОписаниеОповещенияОЗакрытии);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("Строка") Тогда
			//И Не ТолькоПросмотр Тогда // VOG Солодов В.В. 27.11.2020 CRM-1054 // Добавлено условие ТолькоПросмотр
			
			ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
				"ВыборРезультатаЗавершение", ЭтотОбъект, Расшифровка);
			
			// ++ VOG Солодов В.В. 07.12.2020 CRM-1054
			ВыполняетсяОбработкаРасшифровки = Истина;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТекстРедактирования", 	Расшифровка.ЗначениеИсполнитель);
			ПараметрыФормы.Вставить("Заголовок", 			НСтр("ru = 'Введите результат выполнения'"));
			ПараметрыФормы.Вставить("ТолькоПросмотр", 		ТолькоПросмотр);
			
			ОткрытьФорму(
				"ОбщаяФорма.вогФормаВводаТекста",
				ПараметрыФормы,
				ЭтотОбъект,
				ЭтотОбъект,
				,
				,
				ОписаниеОповещенияОЗакрытии,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			// До изменения
			//ПоказатьВводСтроки(
			//	ОписаниеОповещенияОЗакрытии,
			//	Расшифровка.ЗначениеИсполнитель,
			//	НСтр("ru = 'Введите результат выполнения'"),
			//	,
			//	Истина);
			// -- VOG Солодов В.В. 07.12.2020 CRM-1054
			
		ИначеЕсли ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("ДокументСсылка.вогАнкета") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", 				Расшифровка.ЗначениеИсполнитель);
			ПараметрыФормы.Вставить("ВозможноСогласование", Ложь);
			
			Если Не ТолькоПросмотр Тогда // VOG Солодов В.В. 27.11.2020 CRM-1054 // Добавлено условие ТолькоПросмотр
				
				ОснованиеАнкеты = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(
					Расшифровка.ЗначениеИсполнитель, "ДокументОснование");
				
				Если Не ЗначениеЗаполнено(ОснованиеАнкеты) Тогда
					ПараметрыФормы.Вставить("ДокументОснование", Объект.БизнесПроцесс);
				КонецЕсли;
				
			КонецЕсли;
			
			ОткрытьФорму("Документ.вогАнкета.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
			
		ИначеЕсли ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("СправочникСсылка.вогВидыПрисоединенныхФайлов") Тогда
			
			СтруктураЗначений = ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(
				ИдентификаторЭлемента, "Пункт");
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Идентификатор", 		ИдентификаторЭлемента);
			ДополнительныеПараметры.Вставить("НаименованиеЗадачи", 	СтруктураЗначений.Пункт);
			ДополнительныеПараметры.Вставить("ВидФайла", 			Расшифровка.ЗначениеИсполнитель);
			ДополнительныеПараметры.Вставить("ТолькоПросмотр", 		ТолькоПросмотр); // VOG Солодов В.В. 27.11.2020 CRM-1054 // Добавлено ТолькоПросмотр
			
			вогБизнесПроцессыИЗадачиКлиент.ОткрытьФормуПрисоединенныхФайловЗавершение(
				ЭтотОбъект,
				Объект.Ссылка,
				ДополнительныеПараметры);
			
		ИначеЕсли ЭтоСсылка(ТипЗнч(Расшифровка.ЗначениеИсполнитель)) Тогда
			
			ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
				"ВыборРезультатаЗавершение", ЭтотОбъект, Расшифровка);
			
			Если ЗначениеЗаполнено(Расшифровка.ЗначениеИсполнитель) Тогда
				Если ТолькоПросмотр Тогда // VOG Солодов В.В. 27.11.2020 CRM-1054 // Добавлено условие ТолькоПросмотр
					ПоказатьЗначение(Неопределено, Расшифровка.ЗначениеИсполнитель);
				Иначе
					ПоказатьВводЗначения(ОписаниеОповещенияОЗакрытии, Расшифровка.ЗначениеИсполнитель);
				КонецЕсли;
			ИначеЕсли Не ТолькоПросмотр Тогда // VOG Солодов В.В. 27.11.2020 CRM-1054 // Добавлено условие ТолькоПросмотр
				
				ПараметрыФормы = Новый Структура;
				
				Если ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
					И Не ТекущийПредмет = Неопределено Тогда
					
					ПараметрыФормы.Вставить("ОбъектСвязи", ТекущийПредмет);
					ФормаИмя = "Справочник.КонтактныеЛицаПартнеров.Форма.вогФормаПодбораКонтактногоЛица";
					
				Иначе
					
					ПолноеИмяОбъектаМетаданных = СтандартныеПодсистемыВызовСервера.ПолноеИмяОбъектаМетаданных(
						ТипЗнч(Расшифровка.ЗначениеИсполнитель));
					ФормаИмя = СтрШаблон("%1.ФормаВыбора", ПолноеИмяОбъектаМетаданных);
					
				КонецЕсли;
				
				ОткрытьФорму(
					ФормаИмя,
					ПараметрыФормы,
					,
					,
					,
					,
					ОписаниеОповещенияОЗакрытии,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Расшифровка) И ЭтоПредметПоручения(ТипЗнч(Расшифровка)) Тогда
		
		ПоказатьЗначение(Неопределено, Расшифровка);
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ЗадачаИсполнителяПрисоединенныеФайлы")
		Или ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы") Тогда
		
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(Расшифровка, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПредметПоручения(ТипЗначения)
	
	Возврат Метаданные.ОпределяемыеТипы.вогТипыПредметовПоручений.Тип.СодержитТип(ТипЗначения);
	
КонецФункции

&НаКлиенте
Процедура ОчиститьВыделенныеОбласти(ВосстановитьКэшированную = Истина)
	
	ЕстьКэшированнаяОбласть = (ТипЗнч(КэшированныеЗначения) = Тип("Структура"));
	
	Если ЕстьКэшированнаяОбласть Тогда
		КэшированныеЗначения.Обновлять = Ложь;
	КонецЕсли;
	
	Если ЕстьКэшированнаяОбласть Тогда
		Элементы.МакетЗадачи.ТекущаяОбласть = МакетЗадачи.Область(КэшированныеЗначения.ИмяОбласти);
	Иначе
		Элементы.МакетЗадачи.ТекущаяОбласть = МакетЗадачи.Область("R1C1");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуМакета(Расшифровка)
	
	Если Расшифровка.Свойство("Действие") Тогда
		
		Если Расшифровка.Свойство("Доступность")
			И Не Расшифровка.Доступность Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ИдентификаторЭлемента = Расшифровка.Идентификатор;
		
		Если Расшифровка.Действие = "Приложение" Тогда
			
			СтруктураЗначений = ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(
				ИдентификаторЭлемента, "Предмет, ПриложенияИсполнитель");
			
			ДополнительныеПараметрыОповещения = Новый Структура;
			ДополнительныеПараметрыОповещения.Вставить("ИдентификаторЭлемента", ИдентификаторЭлемента);
			ДополнительныеПараметрыОповещения.Вставить("Предмет", 				СтруктураЗначений.Предмет);
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения(
				"Подключаемый_ПрикрепитьПриложениеЧекЛистаЗавершение",
				ЭтотОбъект,
				ДополнительныеПараметрыОповещения);
			
			ПараметрыПриложений = Новый Структура;
			ПараметрыПриложений.Вставить(
				"АдресПриложений",
				ПолучитьАдресТаблицыВыполнения(ИдентификаторЭлемента, СтруктураЗначений.ПриложенияИсполнитель));
			ПараметрыПриложений.Вставить("Ссылка", 					Объект.Ссылка);
			ПараметрыПриложений.Вставить("Предмет", 				СтруктураЗначений.Предмет);
			ПараметрыПриложений.Вставить("НаправлениеДеятельности", Объект.вогНаправлениеДеятельности);
			
			ОткрытьФорму(
				"БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПриложенийЗадачПоручения",
				ПараметрыПриложений,
				ЭтотОбъект,
				,
				,
				,
				ОповещениеОЗавершении,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли Расшифровка.Действие = "Удалить" Тогда
			
			СтруктураЗначений = ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(
			Расшифровка.Идентификатор, "Пункт");
			
			ШаблонВопроса = НСтр("ru = 'Пункт ""%1"" будет удален. Продолжить?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, СтруктураЗначений.Пункт);
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения(
				"Подключаемый_УдалитьЗадачуЗавершение",
				ЭтотОбъект,
				Расшифровка);
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить("КодВозвратаДиалога.Да", НСтр("ru = 'Да'"));
			СписокКнопок.Добавить("КодВозвратаДиалога.Нет", НСтр("ru = 'Нет'"));
			
			вогБизнесПроцессыИЗадачиКлиент.ПоказатьФормуВопроса(ЭтотОбъект, ОповещениеОЗавершении, ТекстВопроса, СписокКнопок);
			
		ИначеЕсли Расшифровка.Действие = "УдалитьНабор" Тогда
			
			СтруктураЗначений = ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(
				Расшифровка.Идентификатор, "НаборЗадач, Предмет");
			
			ШаблонВопроса = НСтр("ru = 'Набор задач ""%1"" будет удален. Продолжить?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, СтруктураЗначений.НаборЗадач);
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения(
				"Подключаемый_УдалитьНаборЗадачЗавершение",
				ЭтотОбъект,
				СтруктураЗначений);
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить("КодВозвратаДиалога.Да", НСтр("ru = 'Да'"));
			СписокКнопок.Добавить("КодВозвратаДиалога.Нет", НСтр("ru = 'Нет'"));
			
			вогБизнесПроцессыИЗадачиКлиент.ПоказатьФормуВопроса(ЭтотОбъект, ОповещениеОЗавершении, ТекстВопроса, СписокКнопок);
			
		ИначеЕсли Расшифровка.Действие = "Комментарий" Тогда
			
			СтруктураЗначений = ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(
				Расшифровка.Идентификатор, "КомментарийИсполнитель");
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения(
				"Подключаемый_КомментарийЗавершениеВвода",
				ЭтотОбъект,
				Расшифровка.Идентификатор);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТекстРедактирования", 	СтруктураЗначений.КомментарийИсполнитель);
			ПараметрыФормы.Вставить("Заголовок", 			НСтр("ru = 'Введите комментарий'"));
			
			ОткрытьФорму(
				"ОбщаяФорма.вогФормаВводаТекста",
				ПараметрыФормы,
				ЭтотОбъект,
				ЭтотОбъект,
				,
				,
				ОповещениеОЗавершении,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли Расшифровка.Действие = "Файлы" Тогда
			
			СтруктураЗначений = ПолучитьСтруктуруЗначенийСтрокиЗадачПоИдентификатору(
			Расшифровка.Идентификатор, "Пункт");
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Идентификатор", 		Расшифровка.Идентификатор);
			ДополнительныеПараметры.Вставить("НаименованиеЗадачи", 	СтруктураЗначений.Пункт);
			
			вогБизнесПроцессыИЗадачиКлиент.ОткрытьФормуПрисоединенныхФайловЗавершение(
				ЭтотОбъект,
				Объект.Ссылка,
				ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриложениеЗадачиЗавершениеНаСервере(АдресТаблицы, ДополнительныеПараметры)
	
	ТаблицаПриложений = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Если ДополнительныеПараметры.Свойство("ИдентификаторЭлемента")
		И ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторЭлемента) Тогда
		
		СписокРезультат = Новый СписокЗначений;
		
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаПриложений Цикл
			СписокРезультат.Добавить(СтрокаТабличнойЧасти.Приложение, СтрокаТабличнойЧасти.ТипПриложения);
		КонецЦикла;
		
		РезультатИсполнитель = СформироватьСписокРезультат(ДополнительныеПараметры.Предмет, СписокРезультат, Истина, Ложь);
		
		ИмяТаблицыРезультат = ПолучитьИмяТаблицыРезультат(ДополнительныеПараметры.ИдентификаторЭлемента);
		
		СписокРезультат = Новый СписокЗначений;
		СписокРезультат.ЗагрузитьЗначения(ЭтотОбъект[ИмяТаблицыРезультат].Выгрузить().ВыгрузитьКолонку("ЗначениеАвтор"));
		
		ЭтотОбъект[ИмяТаблицыРезультат].Очистить();
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Предмет", 				ДополнительныеПараметры.Предмет);
		СтруктураЗаполнения.Вставить("РезультатИсполнитель", 	РезультатИсполнитель);
		СтруктураЗаполнения.Вставить("Результат", 				СписокРезультат);
		СтруктураЗаполнения.Вставить("ДобавленИзЗадачи", 		Истина);
		
		ЗаполнитьТаблицуВыполнения(СтруктураЗаполнения, ИмяТаблицыРезультат);
		РассчитатьИсполнение();
		
		Если ФормироватьМакет Тогда
			МакетЗадачи = СформироватьМакетЗадачи(ДополнительныеПараметры.Предмет);
		Иначе
			
			УстановитьВысотуТаблицы(
				"Результат",
				Неопределено,
				ДополнительныеПараметры.ИдентификаторЭлемента);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВыполнениеПриложенияЗадачи(Форма, СтрокаТабличнойЧасти, ИмяТаблицыРезультат, Знач ИдентификаторЭлемента = Неопределено)
	
	Если ИдентификаторЭлемента = Неопределено Тогда
		ИдентификаторЭлемента= СтрЗаменить(ИмяТаблицыРезультат, "ТаблицаРезультаты_", "");
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.ЗначениеИсполнитель) = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
		СтрокаТабличнойЧасти.Пометка = Ложь;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.ЗначениеИсполнитель) = Тип("Строка") Тогда
		
		СтрокаПроверки 	= "";
		ТекущаяСтрока 	= СокрЛП(СтрокаТабличнойЧасти.ЗначениеИсполнитель);
		
		Для Индекс = 1 По СтрДлина(ТекущаяСтрока) Цикл
			
			ТекущийСимвол 	= Сред(ТекущаяСтрока, Индекс, 1);
			КодСимвола 		= КодСимвола(ТекущийСимвол);
			
			Если Не ТекущийСимвол = "_" И Не СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
				СтрокаПроверки = СтрокаПроверки + ТекущийСимвол;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаТабличнойЧасти.Пометка = (СтрДлина(СтрокаПроверки) > 6);
		
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.ЗначениеИсполнитель) = Тип("СправочникСсылка.вогВидыПрисоединенныхФайлов") Тогда
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Идентификатор", 	ИдентификаторЭлемента);
		ПараметрыОтбораСтрок.Вставить("ВидФайла", 		СтрокаТабличнойЧасти.ЗначениеИсполнитель);
		
		НайденныеСтроки = Форма.ТаблицаПрисоединенныеФайлы.НайтиСтроки(ПараметрыОтбораСтрок);
		
		СтрокаТабличнойЧасти.Пометка = (НайденныеСтроки.Количество() > 0);
		
	Иначе
		СтрокаТабличнойЧасти.Пометка = ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗначениеИсполнитель);
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Пометка Тогда
		Картинка = БиблиотекаКартинок.CRM_ВиджетЦельВыполнена;
	Иначе
		Картинка = БиблиотекаКартинок.CRM_ВиджетЦельНеДостигнута;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Картинка = ПоместитьВоВременноеХранилище(Картинка, Новый УникальныйИдентификатор());
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Пометка", Ложь);
	
	НайденныеСтроки = Форма[ИмяТаблицыРезультат].НайтиСтроки(ПараметрыОтбораСтрок);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("ИдентификаторЗадачи", ИдентификаторЭлемента);
		
		НайденныеСтроки = Форма.ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			СтрокаТабличнойЧасти.Выполнено = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресТаблицыВыполнения(ИдентификаторЭлемента, АдресТаблицыПриложений = Неопределено)
	
	ИмяТаблицыРезультат = ПолучитьИмяТаблицыРезультат(ИдентификаторЭлемента);
	ТаблицаПриложений 	= ЭтотОбъект[ИмяТаблицыРезультат].Выгрузить();
	
	Если Не ТаблицаПриложений = Неопределено Тогда
		МассивРезультат = ТаблицаПриложений.ВыгрузитьКолонку("ЗначениеИсполнитель");
	Иначе
		МассивРезультат = Новый Массив;
	КонецЕсли;
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("Приложение", Новый ОписаниеТипов());
	ТаблицаРезультат.Колонки.Добавить("ТипПриложения", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	
	Для Каждого ЭлементРезультат Из МассивРезультат Цикл
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		НоваяСтрока.Приложение = ЭлементРезультат;
		
		ТипПриложения = Неопределено;
		
		Если ТипЗнч(НоваяСтрока.Приложение) = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
			ТипПриложения = Строка(ЭлементРезультат);
		ИначеЕсли ТипЗнч(НоваяСтрока.Приложение) = Тип("ДокументСсылка.CRM_Мероприятие") Тогда
			ТипПриложения = НСтр("ru = 'Мероприятие'");
		ИначеЕсли ТипЗнч(НоваяСтрока.Приложение) = Тип("ДокументСсылка.вогКомандировка") Тогда
			ТипПриложения = НСтр("ru = Командировка'");
		ИначеЕсли ТипЗнч(НоваяСтрока.Приложение) = Тип("ДокументСсылка.вогАнкета") Тогда
			ТипПриложения = Строка(ЭлементРезультат);
		ИначеЕсли ТипЗнч(НоваяСтрока.Приложение) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ТипПриложения = НСтр("ru = 'Задача'");
		ИначеЕсли ТипЗнч(НоваяСтрока.Приложение) = Тип("Строка") Тогда
			ТипПриложения = НСтр("ru = 'Текстовое описание'");
		ИначеЕсли ТипЗнч(НоваяСтрока.Приложение) = Тип("СправочникСсылка.вогВидыПрисоединенныхФайлов") Тогда
			ТипПриложения = СтрШаблон(НСтр("ru = 'Фото вида %1'"), НоваяСтрока.Приложение);
		ИначеЕсли ТипЗнч(НоваяСтрока.Приложение) = Тип("СправочникСсылка.Номенклатура") Тогда
			ТипПриложения = НСтр("ru = 'Выберите номенклатуру'");
		ИначеЕсли ТипЗнч(НоваяСтрока.Приложение) = Тип("СправочникСсылка.вогБренды") Тогда
			ТипПриложения = НСтр("ru = 'Выберите бренд'");
		ИначеЕсли ТипЗнч(НоваяСтрока.Приложение) = Тип("СправочникСсылка.вогДизайныНоменклатуры") Тогда
			ТипПриложения = НСтр("ru = 'Выберите дизайн'");
		ИначеЕсли ТипЗнч(НоваяСтрока.Приложение) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ТипПриложения = НСтр("ru = 'Выберите контактное лицо'");
		ИначеЕсли ТипЗнч(НоваяСтрока.Приложение) = Тип("СправочникСсылка.Пользователи") Тогда
			ТипПриложения = НСтр("ru = 'Выберите пользователя'");
		ИначеЕсли ТипЗнч(НоваяСтрока.Приложение) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ТипПриложения = НСтр("ru = 'Выберите договор'");
		КонецЕсли;
		
		НоваяСтрока.ТипПриложения = ТипПриложения;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаРезультат, Новый УникальныйИдентификатор());
	
КонецФункции

&НаСервере
Процедура ЗафиксироватьВыполнениеНаСервере()
	
	ЗадачаОбъект = Объект.Ссылка.ПолучитьОбъект();
	ЗадачаОбъект.ВыполнитьЗадачу();
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БизнесПроцесс, "Завершен, ВариантЗавершения");
	
	Если СтруктураРеквизитов.Завершен
		И Не СтруктураРеквизитов.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно Тогда
		
		вогБизнесПроцессыИЗадачиСервер.ПеренестиПрисоединенныеФайлы(Объект.БизнесПроцесс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВозможныхИсполнителей()
	
	СписокВозможныхИсполнителей = Новый СписокЗначений;
	// ++ VOG Солодов В.В. 17.11.2020 CRM-992
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Контролер", 		Ложь);
	ПараметрыОтбораСтрок.Вставить("Наблюдатель", 	Ложь);
	ПараметрыОтбораСтрок.Вставить("Исполнитель", 	ТекущийПользователь);
	
	НайденныеСтроки = ТаблицаИсполнители.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		СписокВозможныхИсполнителей.Добавить(ТекущийПользователь);
		Возврат СписокВозможныхИсполнителей;
	КонецЕсли;
	// До изменения
	//СписокВозможныхИсполнителей.Добавить(Объект.Исполнитель);
	// -- VOG Солодов В.В. 17.11.2020 CRM-992
	
	ПодчиненныеСотрудники = вогОбщегоНазначенияПовтИсп.ПолучитьПодчиненныхСотрудников();
	
	Если Не ПодчиненныеСотрудники.Найти(Объект.Исполнитель) = Неопределено Тогда
		СписокВозможныхИсполнителей.Добавить(ТекущийПользователь);
	Иначе
		
		ДелегированныеСотрудники = вогНастраиваемоеДелегированиеПрав.ПолучитьМассивДелегатовПользователя(
			"ПроцессыИЗадачи",
			Объект.Исполнитель,
			Истина);
		
		Если Не ДелегированныеСотрудники.Найти(ТекущийПользователь) = Неопределено Тогда
			СписокВозможныхИсполнителей.Добавить(ТекущийПользователь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Объект.ПринятаКИсполнению Тогда
		СписокВозможныхИсполнителей.Добавить(Объект.БизнесПроцесс.Ответственный);
		СписокВозможныхИсполнителей.Добавить(Объект.БизнесПроцесс.Автор);
	КонецЕсли;
	
	Если ЭтоСоисполнитель Тогда
		СписокВозможныхИсполнителей.Добавить(ТекущийПользователь);
	КонецЕсли;
	
	Если СписокВозможныхИсполнителей.НайтиПоЗначению(ТекущийПользователь) = Неопределено Тогда
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Соисполнитель", Истина);
		
		НайденныеСтроки = ТаблицаИсполнители.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Для Каждого СтрокаИсполнитель Из НайденныеСтроки Цикл
			
			ДелегированныеСотрудники = вогНастраиваемоеДелегированиеПрав.ПолучитьМассивДелегатовПользователя(
				"ПроцессыИЗадачи",
				СтрокаИсполнитель.Исполнитель,
				Истина);
			
			Если Не ДелегированныеСотрудники.Найти(ТекущийПользователь) = Неопределено Тогда
				СписокВозможныхИсполнителей.Добавить(ТекущийПользователь);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
	Если Не ЗначениеЗаполнено(Объект.Исполнитель)
		И СписокВозможныхИсполнителей.НайтиПоЗначению(ТекущийПользователь) = Неопределено Тогда
		
		ПодразделениеПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение", Истина);
		
		Если Объект.ОсновнойОбъектАдресации = ПодразделениеПользователя Тогда
			СписокВозможныхИсполнителей.Добавить(ТекущийПользователь);
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 03.12.2020 CRM-1099
	
	Возврат СписокВозможныхИсполнителей;
	
КонецФункции

&НаКлиенте
Процедура ПринятьЗадачуКИсполнению()
	
	// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		мИсполнитель = Объект.Исполнитель;
	Иначе
		мИсполнитель = Объект.ОсновнойОбъектАдресации;
	КонецЕсли;
	// До изменения
	//мИсполнитель = Объект.Исполнитель;
	// -- VOG Солодов В.В. 03.12.2020 CRM-1099
	
	Объект.ПринятаКИсполнению 		= Истина;
	Объект.ДатаПринятияКИсполнению 	= ТекущаяДата();
	Объект.Исполнитель 				= ТекущийПользователь;
	ОчиститьСообщения();
	Записать();
	
	Если Не мИсполнитель = ТекущийПользователь Тогда
		ЗафиксироватьИсполнителяЭтапаПоручения(мИсполнитель);
	КонецЕсли;
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
	// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
	Исполнитель = ТекущийПользователь;
	// -- VOG Солодов В.В. 03.12.2020 CRM-1099
	
КонецПроцедуры

&НаСервере
Функция ИзменитьИсполнителяНаСервере()
	
	ИсполнительИзменен = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	
	мИсполнитель 		= Объект.Исполнитель;
	Объект.Исполнитель 	= НовыйИсполнитель;
	
	НаборЗаписей = РегистрыСведений.вогСписокИсполнителейПоручения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БизнесПроцесс.Установить(Объект.БизнесПроцесс);
	НаборЗаписей.Отбор.Исполнитель.Установить(мИсполнитель);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.вогСписокИсполнителейПоручения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БизнесПроцесс.Установить(Объект.БизнесПроцесс);
	НаборЗаписей.Отбор.Исполнитель.Установить(НовыйИсполнитель);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.БизнесПроцесс 	= Объект.БизнесПроцесс;
	НоваяЗапись.Исполнитель 	= НовыйИсполнитель;
	НоваяЗапись.СрокИсполнения 	= Объект.СрокИсполнения;
	
	НаборЗаписей.Записать();
	
	Попытка
		
		Записать();
		ЗафиксироватьИсполнителяЭтапаПоручения(мИсполнитель, Истина);
		СформироватьОбсуждение();
		ИсполнительИзменен = Истина;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
	Возврат ИсполнительИзменен;
	
КонецФункции

&НаСервере
Процедура ЗафиксироватьИсполнителяЭтапаПоручения(ПредыдущийИсполнитель, ИзменениеИсполнителя = Ложь) Экспорт
	
	Если ИзменениеИсполнителя Тогда
		ТекущийИсполнитель = НовыйИсполнитель;
	Иначе
		ТекущийИсполнитель = ТекущийПользователь;
	КонецЕсли;
	
	НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборИсполнителей.Отбор.Объект.Установить(Объект.БизнесПроцесс);
	НаборИсполнителей.Отбор.ТочкаМаршрута.Установить(Объект.CRM_ТочкаМаршрута);
	НаборИсполнителей.Отбор.Исполнитель.Установить(ПредыдущийИсполнитель);
	НаборИсполнителей.Прочитать();
	НаборИсполнителей.Очистить();
	НаборИсполнителей.Записать();
	
	НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборИсполнителей.Отбор.Объект.Установить(Объект.БизнесПроцесс);
	НаборИсполнителей.Отбор.ТочкаМаршрута.Установить(Объект.CRM_ТочкаМаршрута);
	НаборИсполнителей.Отбор.Исполнитель.Установить(ТекущийИсполнитель);
	
	НоваяЗапись 				= НаборИсполнителей.Добавить();
	НоваяЗапись.Объект 			= Объект.БизнесПроцесс;
	НоваяЗапись.ТочкаМаршрута 	= Объект.CRM_ТочкаМаршрута;
	НоваяЗапись.Исполнитель 	= ТекущийИсполнитель;
	
	НаборИсполнителей.Записать();
	
	CRM_БизнесПроцессыИЗадачиСервер.ПринятьЗапланированныеВзаимодействияПоЗадаче(Объект.Ссылка, ТекущийИсполнитель);
	
	//Если ИзменениеИсполнителя Тогда
	//	
	//	УстановитьПривилегированныйРежим(Истина);
	//	
	//	
	//	
	//	Отказ = Ложь;
	//	CRM_РаботаАРМСервер.CRM_ЗаполнениеАРММоиДела(Объект.Ссылка, Отказ);
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьЗапросНаПереносСрокаИсполнения(ТекстПричиныПереноса)
	
	// ++ VOG Солодов В.В. 20.01.2021 DEV-57
	ПараметрыПроцесса = Новый Структура;
	ПараметрыПроцесса.Вставить("Автор", ТекущийПользователь);
	CRM_БизнесПроцессыСервер.ОтправитьЗапросНаПереносСрокаИсполнения(Объект.Ссылка, ТекстПричиныПереноса, ПараметрыПроцесса);
	// До изменения
	//CRM_БизнесПроцессыСервер.ОтправитьЗапросНаПереносСрокаИсполнения(Объект.Ссылка, ТекстПричиныПереноса);
	// -- VOG Солодов В.В. 20.01.2021 DEV-57
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруФормированияАнкеты(ВариантОпроса, Респондент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогДополнительныеКоманды.Ссылка КАК Ссылка,
	|	вогДополнительныеКоманды.ТекстЗапроса КАК ТекстЗапроса,
	|	вогДополнительныеКоманды.ХранилищеПараметровЗапроса КАК ХранилищеПараметровЗапроса,
	|	вогДополнительныеКоманды.Параметр1 КАК Параметр1,
	|	вогДополнительныеКоманды.Параметр2 КАК Параметр2,
	|	вогДополнительныеКоманды.Параметр3 КАК Параметр3,
	|	вогДополнительныеКоманды.Параметр4 КАК Параметр4,
	|	вогДополнительныеКоманды.Параметр5 КАК Параметр5,
	|	вогДополнительныеКоманды.Обработчик КАК Обработчик
	|ПОМЕСТИТЬ ВТ_Команды
	|ИЗ
	|	Справочник.вогДополнительныеКоманды КАК вогДополнительныеКоманды
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(вогДополнительныеКоманды.Источник) = &Тип
	|	И вогДополнительныеКоманды.ПометкаУдаления = ЛОЖЬ
	|	И вогДополнительныеКоманды.ЭтоГруппа = ЛОЖЬ
	|	И вогДополнительныеКоманды.Параметр1 = &ВариантОпроса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогДополнительныеКоманды.Ссылка,
	|	вогДополнительныеКоманды.ТекстЗапроса,
	|	вогДополнительныеКоманды.ХранилищеПараметровЗапроса,
	|	вогДополнительныеКоманды.Параметр1,
	|	вогДополнительныеКоманды.Параметр2,
	|	вогДополнительныеКоманды.Параметр3,
	|	вогДополнительныеКоманды.Параметр4,
	|	вогДополнительныеКоманды.Параметр5,
	|	вогДополнительныеКоманды.Обработчик
	|ИЗ
	|	Справочник.вогДополнительныеКоманды КАК вогДополнительныеКоманды
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(вогДополнительныеКоманды.Источник) = &Тип
	|	И вогДополнительныеКоманды.ПометкаУдаления = ЛОЖЬ
	|	И вогДополнительныеКоманды.ЭтоГруппа = ЛОЖЬ
	|	И вогДополнительныеКоманды.Параметр2 = &ВариантОпроса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогДополнительныеКоманды.Ссылка,
	|	вогДополнительныеКоманды.ТекстЗапроса,
	|	вогДополнительныеКоманды.ХранилищеПараметровЗапроса,
	|	вогДополнительныеКоманды.Параметр1,
	|	вогДополнительныеКоманды.Параметр2,
	|	вогДополнительныеКоманды.Параметр3,
	|	вогДополнительныеКоманды.Параметр4,
	|	вогДополнительныеКоманды.Параметр5,
	|	вогДополнительныеКоманды.Обработчик
	|ИЗ
	|	Справочник.вогДополнительныеКоманды КАК вогДополнительныеКоманды
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(вогДополнительныеКоманды.Источник) = &Тип
	|	И вогДополнительныеКоманды.ПометкаУдаления = ЛОЖЬ
	|	И вогДополнительныеКоманды.ЭтоГруппа = ЛОЖЬ
	|	И вогДополнительныеКоманды.Параметр3 = &ВариантОпроса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогДополнительныеКоманды.Ссылка,
	|	вогДополнительныеКоманды.ТекстЗапроса,
	|	вогДополнительныеКоманды.ХранилищеПараметровЗапроса,
	|	вогДополнительныеКоманды.Параметр1,
	|	вогДополнительныеКоманды.Параметр2,
	|	вогДополнительныеКоманды.Параметр3,
	|	вогДополнительныеКоманды.Параметр4,
	|	вогДополнительныеКоманды.Параметр5,
	|	вогДополнительныеКоманды.Обработчик
	|ИЗ
	|	Справочник.вогДополнительныеКоманды КАК вогДополнительныеКоманды
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(вогДополнительныеКоманды.Источник) = &Тип
	|	И вогДополнительныеКоманды.ПометкаУдаления = ЛОЖЬ
	|	И вогДополнительныеКоманды.ЭтоГруппа = ЛОЖЬ
	|	И вогДополнительныеКоманды.Параметр4 = &ВариантОпроса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогДополнительныеКоманды.Ссылка,
	|	вогДополнительныеКоманды.ТекстЗапроса,
	|	вогДополнительныеКоманды.ХранилищеПараметровЗапроса,
	|	вогДополнительныеКоманды.Параметр1,
	|	вогДополнительныеКоманды.Параметр2,
	|	вогДополнительныеКоманды.Параметр3,
	|	вогДополнительныеКоманды.Параметр4,
	|	вогДополнительныеКоманды.Параметр5,
	|	вогДополнительныеКоманды.Обработчик
	|ИЗ
	|	Справочник.вогДополнительныеКоманды КАК вогДополнительныеКоманды
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(вогДополнительныеКоманды.Источник) = &Тип
	|	И вогДополнительныеКоманды.ПометкаУдаления = ЛОЖЬ
	|	И вогДополнительныеКоманды.ЭтоГруппа = ЛОЖЬ
	|	И вогДополнительныеКоманды.Параметр5 = &ВариантОпроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Команды.Ссылка КАК Ссылка,
	|	ВТ_Команды.ТекстЗапроса КАК ТекстЗапроса,
	|	ВТ_Команды.ХранилищеПараметровЗапроса КАК ХранилищеПараметровЗапроса,
	|	ВТ_Команды.Параметр1 КАК Параметр1,
	|	ВТ_Команды.Параметр2 КАК Параметр2,
	|	ВТ_Команды.Параметр3 КАК Параметр3,
	|	ВТ_Команды.Параметр4 КАК Параметр4,
	|	ВТ_Команды.Параметр5 КАК Параметр5,
	|	ВТ_Команды.Обработчик КАК Обработчик
	|ИЗ
	|	ВТ_Команды КАК ВТ_Команды";
	
	Запрос.УстановитьПараметр("Тип", 			ТипЗнч(Респондент));
	Запрос.УстановитьПараметр("ВариантОпроса", 	ВариантОпроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		СтруктураКоманды = Новый Структура;
		СтруктураКоманды.Вставить("Параметр1");
		СтруктураКоманды.Вставить("Параметр2");
		СтруктураКоманды.Вставить("Параметр3");
		СтруктураКоманды.Вставить("Параметр4");
		СтруктураКоманды.Вставить("Параметр5");
		СтруктураКоманды.Вставить("Обработчик");
		СтруктураКоманды.Вставить("УсловияВыполнены", Ложь);
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если Справочники.вогДополнительныеКоманды.ПроверитьУсловияКоманды(
				ВыборкаДетальныеЗаписи.Ссылка,
				Респондент,
				ВыборкаДетальныеЗаписи.ТекстЗапроса,
				ВыборкаДетальныеЗаписи.ХранилищеПараметровЗапроса) Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураКоманды, ВыборкаДетальныеЗаписи);
				
				СтруктураКоманды.УсловияВыполнены = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат СтруктураКоманды;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СформироватьОбработчикСозданияАнкеты(Знач Обработчик)
	
	ОбработчикФормирования = СтрЗаменить(Обработчик, "ЭтаФорма.Объект.Ссылка", "Респондент");
	ОбработчикФормирования = СтрЗаменить(ОбработчикФормирования, "Объект.Ссылка", "Респондент");
	ОбработчикФормирования = СтрЗаменить(ОбработчикФормирования, "ЭтаФорма.Объект", "Респондент");
	
	МассивСтрокОбработчика = СтрРазделить(ОбработчикФормирования, Символы.ПС);
	
	ЗаменяемыйТекст = "";
	
	Для Каждого СтрокаОбработчика Из МассивСтрокОбработчика Цикл
		Если СтрНачинаетсяС(СокрЛ(СтрокаОбработчика), "ЗначенияЗаполнения") Тогда
			
			Если ПустаяСтрока(ЗаменяемыйТекст) Тогда
				ЗаменяемыйТекст = СокрЛП(СтрокаОбработчика);
			Иначе
				ЗаменяемыйТекст = ЗаменяемыйТекст + Символы.ПС + СокрЛП(СтрокаОбработчика);
			КонецЕсли;
			
			ОбработчикФормирования = СтрЗаменить(ОбработчикФормирования, СтрокаОбработчика, "");
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ЗаменяемыйТекст) Тогда
		
		ДобавочныйТекст 		= "ЗначенияЗаполнения.Вставить(""ДокументОснование"", Объект.БизнесПроцесс);";
		ОбработчикФормирования 	= ЗаменяемыйТекст + Символы.ПС + ДобавочныйТекст + Символы.ПС + СокрЛП(ОбработчикФормирования);
		
	КонецЕсли;
	
	Возврат ОбработчикФормирования;

КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуФайлов(ВладелецФайлов, УстановитьВысотуТаблицы = Ложь, НастроитьЗаголовки = Ложь, ФайлРедактировался = Ложь, МассивФайлов = Неопределено)
	
	Если ТипЗнч(ВладелецФайлов) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		ИмяСписка 		= "ФайлыАвтор";
		ИмяПоляПоиска 	= "Идентификатор";
		ФайлЗадачи 		= Ложь;
	Иначе
		ИмяСписка 		= "ФайлыИсполнитель";
		ИмяПоляПоиска 	= "ИдентификаторЗадачи";
		ФайлЗадачи 		= Истина;
	КонецЕсли;
	
	Если МассивФайлов = Неопределено Тогда
		МассивФайлов = Новый Массив;
		РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВладелецФайлов, МассивФайлов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	// ++ VOG Солодов В.В. 21.05.2021 DEV-518
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(вогПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла, НЕОПРЕДЕЛЕНО) КАК ВидФайла,
	|	ЗадачаИсполнителяПрисоединенныеФайлы.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗадачаИсполнителяПрисоединенныеФайлы.Родитель КАК Родитель,
	|	ЗадачаИсполнителяПрисоединенныеФайлы.Родитель.Родитель КАК ОсновнойРодитель,
	|	ЗадачаИсполнителяПрисоединенныеФайлы.Наименование КАК Наименование,
	|	ЗадачаИсполнителяПрисоединенныеФайлы.Расширение КАК Расширение
	|ИЗ
	|	Справочник.ЗадачаИсполнителяПрисоединенныеФайлы КАК ЗадачаИсполнителяПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК вогПрисоедниненныеФайлыОбъектовПоВидам
	|		ПО ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка = вогПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл
	|ГДЕ
	|	ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка В(&МассивФайлов)
	|	И ЗадачаИсполнителяПрисоединенныеФайлы.ЭтоГруппа = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_БизнесПроцессПрисоединенныеФайлы.Ссылка,
	|	ЕСТЬNULL(вогПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла, НЕОПРЕДЕЛЕНО),
	|	CRM_БизнесПроцессПрисоединенныеФайлы.ПометкаУдаления,
	|	CRM_БизнесПроцессПрисоединенныеФайлы.Родитель,
	|	CRM_БизнесПроцессПрисоединенныеФайлы.Родитель.Родитель,
	|	CRM_БизнесПроцессПрисоединенныеФайлы.Наименование,
	|	CRM_БизнесПроцессПрисоединенныеФайлы.Расширение
	|ИЗ
	|	Справочник.CRM_БизнесПроцессПрисоединенныеФайлы КАК CRM_БизнесПроцессПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК вогПрисоедниненныеФайлыОбъектовПоВидам
	|		ПО CRM_БизнесПроцессПрисоединенныеФайлы.Ссылка = вогПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл
	|ГДЕ
	|	CRM_БизнесПроцессПрисоединенныеФайлы.Ссылка В(&МассивФайлов)
	|	И CRM_БизнесПроцессПрисоединенныеФайлы.ЭтоГруппа = ЛОЖЬ";
	// До изменения
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка КАК Ссылка,
	//	|	ЕСТЬNULL(вогПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла, НЕОПРЕДЕЛЕНО) КАК ВидФайла,
	//	|	ЗадачаИсполнителяПрисоединенныеФайлы.ПометкаУдаления КАК ПометкаУдаления,
	//	|	ЗадачаИсполнителяПрисоединенныеФайлы.Родитель КАК Родитель,
	//	|	ЗадачаИсполнителяПрисоединенныеФайлы.Родитель.Родитель КАК ОсновнойРодитель,
	//	|	ЗадачаИсполнителяПрисоединенныеФайлы.Наименование КАК Наименование,
	//	|	ЗадачаИсполнителяПрисоединенныеФайлы.Расширение КАК Расширение
	//	|ИЗ
	//	|	Справочник.ЗадачаИсполнителяПрисоединенныеФайлы КАК ЗадачаИсполнителяПрисоединенныеФайлы
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК вогПрисоедниненныеФайлыОбъектовПоВидам
	//	|		ПО ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка = вогПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл
	//	|ГДЕ
	//	|	ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка В(&МассивФайлов)
	//	|	И ЗадачаИсполнителяПрисоединенныеФайлы.ЭтоГруппа = ЛОЖЬ";
	// -- VOG Солодов В.В. 21.05.2021 DEV-518
	
	Запрос.УстановитьПараметр("МассивФайлов", МассивФайлов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
		ЭлементФайл = ВыборкаДетальныеЗаписи.Ссылка;
		
		ДобавитьФайл 	= Истина;
		УдалитьФайл 	= Ложь;
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("ДанныеФайла", ЭлементФайл);
		
		НайденныеСтроки = ТаблицаПрисоединенныеФайлы.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Если ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
				
				ДобавитьФайл 	= Ложь;
				УдалитьФайл 	= Истина;
				
			Иначе
				
				ДобавитьФайл 	= Ложь;
				УдалитьФайл 	= Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВидФайла)
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОсновнойРодитель) Тогда
			
			ГруппаФайла 			= ВыборкаДетальныеЗаписи.ОсновнойРодитель;
			ИдентификаторЭлемента 	= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(XMLСтрока(ГруппаФайла));
			
		Иначе
			
			ГруппаФайла 			= ВыборкаДетальныеЗаписи.Родитель;
			ИдентификаторЭлемента 	= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(XMLСтрока(ГруппаФайла));
			
		КонецЕсли;
		
		Если ДобавитьФайл Тогда
			
			ПредставлениеФайла = СтрШаблон("%1.%2", ВыборкаДетальныеЗаписи.Наименование, ВыборкаДетальныеЗаписи.Расширение);
			
			НоваяСтрока = ТаблицаПрисоединенныеФайлы.Добавить();
			НоваяСтрока.ДанныеФайла 	= ЭлементФайл;
			НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
			НоваяСтрока.Представление 	= ПредставлениеФайла;
			НоваяСтрока.Расширение 		= СтрЗаменить(ВыборкаДетальныеЗаписи.Расширение, ".", "");
			НоваяСтрока.ФайлЗадачи 		= ФайлЗадачи;
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВидФайла) Тогда
				НоваяСтрока.ВидФайла 	= ВыборкаДетальныеЗаписи.ВидФайла;
			КонецЕсли;
			
		ИначеЕсли УдалитьФайл Тогда
			
			ИндексСтроки = ТаблицаПрисоединенныеФайлы.Индекс(НайденныеСтроки[0]);
			ТаблицаПрисоединенныеФайлы.Удалить(ИндексСтроки);
			
		ИначеЕсли ФайлРедактировался Тогда
			
			НайденныеСтроки[0].ДанныеФайла = ЭлементФайл;
			
		КонецЕсли;
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить(ИмяПоляПоиска, ИдентификаторЭлемента);
		
		НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВидФайла) Тогда
				
				Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
					
					ИмяТаблицыРезультат = ПолучитьИмяТаблицыРезультат(СтрокаТабличнойЧасти.ИдентификаторЗадачи);
					
					Для Каждого СтрокаВыполнение Из ЭтотОбъект[ИмяТаблицыРезультат] Цикл
						УстановитьВыполнениеПриложенияЗадачи(ЭтотОбъект, СтрокаВыполнение, ИмяТаблицыРезультат);
					КонецЦикла;
					
				КонецЦикла;
				
			Иначе
				
				Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
					
					Если ДобавитьФайл Тогда
						СтрокаТабличнойЧасти[ИмяСписка].Добавить(ЭлементФайл, НоваяСтрока.Представление);
					ИначеЕсли УдалитьФайл Тогда
						
						СтрокаСписка = СтрокаТабличнойЧасти[ИмяСписка].НайтиПоЗначению(ЭлементФайл);
						
						Если Не СтрокаСписка = Неопределено Тогда
							СтрокаТабличнойЧасти[ИмяСписка].Удалить(СтрокаСписка);
						КонецЕсли;
						
					ИначеЕсли ФайлРедактировался Тогда
						
						СтрокаСписка = СтрокаТабличнойЧасти[ИмяСписка].НайтиПоЗначению(ЭлементФайл);
						
						Если Не СтрокаСписка = Неопределено Тогда
							СтрокаСписка.Значение = ЭлементФайл;
						КонецЕсли;
						
					КонецЕсли;
					
					ИндексСтроки = ТаблицаПунктыЗадач.Индекс(СтрокаТабличнойЧасти);
					ИдентификаторЭлемента = СтрокаТабличнойЧасти.ИдентификаторЗадачи;
					
				КонецЦикла;
				
				Если Не ФормироватьМакет
					И УстановитьВысотуТаблицы Тогда
					УстановитьВысотуТаблицы("Файлы", ИндексСтроки, ИдентификаторЭлемента);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НастроитьЗаголовки Тогда
		НастроитьЗаголовкиЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
