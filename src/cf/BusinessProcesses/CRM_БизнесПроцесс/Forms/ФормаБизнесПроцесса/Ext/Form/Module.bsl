
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция СформироватьСтрокуСостоянияБизнесПроцесса()
	
	СтрокаСостояния = "";
	Элементы.НадписьСостояниеБизнесПроцесса.Высота = 1;
	
	Если   Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен Тогда
		СтрокаАктивности = "(Активен)";
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда 
		СтрокаАктивности = "(Остановлен)";
	Иначе
		СтрокаАктивности = "";
	КонецЕсли;
	
	Если НЕ Объект.Стартован Тогда
		
		СтрокаСостояния = СтрокаСостояния + "Не стартован ";
		СтрокаСостояния = СтрокаСостояния + СтрокаАктивности;
		
	Иначе
		Если НЕ Объект.Завершен Тогда
			
			СтрокаСостояния = СтрокаСостояния + "Стартован ";
			СтрокаСостояния = СтрокаСостояния + СтрокаАктивности;
			
		ИначеЕсли Объект.ЗавершенДосрочно Тогда
			
			СтрокаСостояния = СтрокаСостояния + "Завершен досрочно " + "("+Объект.ВариантЗавершения+") по причине: " + Строка(Объект.ПричинаДосрочногоЗавершения);
			Элементы.НадписьСостояниеБизнесПроцесса.Высота = 2;
			
		Иначе
			
			СтрокаСостояния = СтрокаСостояния + "Завершен " + "("+Объект.ВариантЗавершения+")";
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаСостояния;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеЗаписать(ИмяКоманды, ОписаниеОповещенияОЗавершении) Экспорт
	
	Попытка
		Если ПроверитьЗаполнение() Тогда
			
			Если ИмяКоманды = "СтартоватьИЗакрыть" ИЛИ ИмяКоманды = "Старт" Тогда
				
				Записать();
				
			КонецЕсли;
			
			Если (ИмяКоманды = "ЗаписатьИЗакрыть") ИЛИ (ИмяКоманды = "Записать") Тогда
				Записать();
			ИначеЕсли ИмяКоманды = "СтартоватьИЗакрыть" ИЛИ ИмяКоманды = "Старт" Тогда
				
				СтруктураОбъекта = Новый Структура;
				СтруктураОбъекта.Вставить("БизнесПроцесс"			,Объект.Ссылка);
				СтруктураОбъекта.Вставить("CRM_ТочкаМаршрута"		,Объект.ТочкаСтарта);
				СтруктураОбъекта.Вставить("CRM_ВариантВыполнения"	,0);
				СтруктураОбъекта.Вставить("Исполнитель"				,ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
				СтруктураОбъекта.Вставить("РольИсполнителя"			,ПредопределенноеЗначение("Справочник.РолиИсполнителей.ПустаяСсылка"));
				
				СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(СтруктураОбъекта);
				ДополнительныеПараметры = Новый Структура("ИмяКоманды, ОписаниеОповещенияОЗавершении", ИмяКоманды, ОписаниеОповещенияОЗавершении);
				Если СписокТочекМаршрута.Количество() > 0 Тогда
					ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута", Объект.Ссылка, СписокТочекМаршрута);
					ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьЗаполнениеЗаписатьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					Возврат;
				КонецЕсли;
				ПроверитьЗаполнениеЗаписатьЗавершение(Истина, ДополнительныеПараметры);
				Возврат;
			КонецЕсли;
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		Если СтрНайти(Ошибка, НСтр("ru = 'Данные были изменены или удалены другим пользователем'"))>0 Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно записать бизнес-процесс, данные были изменены другим пользователем.'"));
		Иначе 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
		КонецЕсли;
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеЗаписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
		Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Ложь);
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеПараметры.ИмяКоманды = "СтартоватьИЗакрыть" Тогда
			ПараметрыЗаписи = Новый Структура("Старт",(ОбщегоНазначенияКлиент.ДатаСеанса() >= Объект.ДатаСтарта));
			Записать(ПараметрыЗаписи);
		ИначеЕсли ДополнительныеПараметры.ИмяКоманды = "Старт" Тогда
			ПараметрыЗаписи = Новый Структура("Старт",(ОбщегоНазначенияКлиент.ДатаСеанса() >= Объект.ДатаСтарта));
			Записать(ПараметрыЗаписи);
			Элементы.НадписьСостояниеБизнесПроцесса.Заголовок = СформироватьСтрокуСостоянияБизнесПроцесса();
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТочкиСтарта(ПерезаполнятьТочкуСтартаОбъекта = Истина)
		
	СписокТочекСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(Объект.КартаМаршрута);
	
	Элементы.ТочкаСтарта.СписокВыбора.Очистить();
	
	Для Каждого ЭлементСписка Из СписокТочекСтарта Цикл
		Элементы.ТочкаСтарта.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Если ПерезаполнятьТочкуСтартаОбъекта Или Не ЗначениеЗаполнено(Объект.ТочкаСтарта) Тогда
		Объект.ТочкаСтарта = СписокТочекСтарта[0].Значение;
	КонецЕсли;
	
	Элементы.ТочкаСтарта.Видимость =  (СписокТочекСтарта.Количество() > 1);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуИсполнителей(Набор = Неопределено)
	
	Если Набор = Неопределено Тогда
		Если Объект.Ссылка.Пустая() Тогда
			Если ЗначениеЗаполнено(Объект.Проект) Тогда		
				// Получение исполнителей по процессу.
				НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
				НаборИсполнителей.Отбор.Объект.Установить(Объект.Проект);
				НаборИсполнителей.Прочитать();
				
				// Если для процесса исполнители не определены, тогда берем их из карты.
				Если НаборИсполнителей.Количество() = 0 Тогда
					НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
					НаборИсполнителей.Отбор.Объект.Установить(Объект.КартаМаршрута);
					НаборИсполнителей.Прочитать();	
				КонецЕсли;
			Иначе
				НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
				НаборИсполнителей.Отбор.Объект.Установить(Объект.КартаМаршрута);
				НаборИсполнителей.Прочитать();	
			КонецЕсли;
		Иначе
			// Исполнители бизнес-процесса.
			НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборИсполнителей.Отбор.Объект.Установить(Объект.Ссылка);
			НаборИсполнителей.Прочитать();	
		КонецЕсли;
	Иначе
		НаборИсполнителей = Набор;
	КонецЕсли;
	
	Этапы_Значение = РеквизитФормыВЗначение("Этапы");
	Этапы_Значение.Очистить();
	
	Если МожноУказыватьСрокВыполненияЭтапов Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Объект.КартаМаршрута);
			НаборЭтапов.Прочитать();
			Для Каждого СтрокаНабора Из НаборЭтапов Цикл
				НоваяСтрокаЭтапов = Этапы_Значение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЭтапов,СтрокаНабора);
			КонецЦикла;
			НачПериода	= ?(?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДатаСеанса()) = Объект.ДатаСтарта, ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДатаСеанса()), Объект.ДатаСтарта);
			CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(Объект.НомерВерсииКартыМаршрута, Объект.Организация, Объект.ТочкаСтарта, Этапы_Значение, НачПериода);
		Иначе
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Объект.Ссылка);
			НаборЭтапов.Прочитать();
			Этапы_Значение = НаборЭтапов.Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	//Исполнители.Очистить();
	Исполнители_Значение = РеквизитФормыВЗначение("Исполнители");
	Исполнители_Значение.Очистить();
	Исполнители.Очистить();
	
	Для Каждого СтрокаНабора Из НаборИсполнителей Цикл
		
		МассивСтрок = Исполнители_Значение.НайтиСтроки(Новый Структура("ТочкаМаршрута",СтрокаНабора.ТочкаМаршрута));
		Если НЕ МассивСтрок.Количество() = 0 Тогда
			СтрокаТаб = МассивСтрок[0];
		Иначе
			СтрокаТаб = Исполнители_Значение.Добавить();
			СтрокаТаб.ТочкаМаршрута	= СтрокаНабора.ТочкаМаршрута;
			СтрокаТаб.Групповая		= СтрокаНабора.ТочкаМаршрута.Групповая;
			СтрокаТаб.Порядок		= СтрокаНабора.ТочкаМаршрута.РеквизитДопУпорядочивания;
			Если СтрокаНабора.ТочкаМаршрута.Групповая Тогда
				СтрСписок = Новый СписокЗначений;
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
				МассивТипов.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
				МассивТипов.Добавить(Тип("СправочникСсылка.CRM_ТочкиМаршрутов"));
				МассивТипов.Добавить(Тип("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач"));
				СтрСписок.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				СтрокаТаб.Исполнитель = СтрСписок;
			КонецЕсли;
		КонецЕсли;
		
		Исполнитель = ?(СтрокаНабора.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор,Объект.Автор,СтрокаНабора.Исполнитель);
		
		Если СтрокаНабора.ТочкаМаршрута.Групповая Тогда
			СтрокаТаб.Исполнитель.Добавить(Исполнитель,,СтрокаНабора.Все);
		Иначе
			СтрокаТаб.Исполнитель = Исполнитель;
		КонецЕсли;
		
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Если НЕ СтрокаНабора.Все Тогда
				СтрокаИсполнителя = НСтр("ru = 'Роль """ + Строка(СтрокаТаб.Исполнитель) + """'");
			Иначе
				СтрокаИсполнителя = СокрЛП(Строка(СтрокаТаб.Исполнитель));
			КонецЕсли;
		ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов") Тогда
			СтрокаИсполнителя = НСтр("ru = 'Исполнитель этапа """ + Строка(СтрокаТаб.Исполнитель) + """'");
		Иначе
			СтрокаИсполнителя = СокрЛП(Строка(СтрокаТаб.Исполнитель));
		КонецЕсли;
		
		СтрокаТаб.ИсполнительПредставление = СтрокаИсполнителя;
		
		Если МожноУказыватьСрокВыполненияЭтапов Тогда
			СтрокаЭтапа = Этапы_Значение.Найти(СтрокаТаб.ТочкаМаршрута,"ТочкаМаршрута");
			Если НЕ СтрокаЭтапа = Неопределено Тогда
				
				СтрокаТаб.ВариантВыполнения			= СтрокаЭтапа.ВариантВыполнения;
				СтрокаТаб.ДлительностьДней			= СтрокаЭтапа.ДлительностьДней;
				СтрокаТаб.ДлительностьЧасов			= СтрокаЭтапа.ДлительностьЧасов;
				СтрокаТаб.ДлительностьМинут			= СтрокаЭтапа.ДлительностьМинут;
				СтрокаТаб.ОтложитьНачалоЭтапаДней	= СтрокаЭтапа.ОтложитьНачалоЭтапаДней;
				СтрокаТаб.ОтложитьНачалоЭтапаЧасов	= СтрокаЭтапа.ОтложитьНачалоЭтапаЧасов;
				СтрокаТаб.ОтложитьНачалоЭтапаМинут	= СтрокаЭтапа.ОтложитьНачалоЭтапаМинут;
				СтрокаТаб.Шаблон					= СтрокаЭтапа.Шаблон;
				Попытка
					СтрокаТаб.ДатаНачала		= СтрокаЭтапа.ДатаНачала;
					СтрокаТаб.ДатаВыполнения	= СтрокаЭтапа.ДатаВыполнения;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Этапы_Значение, "Этапы");
	
	Исполнители_Значение.Сортировать("Порядок ВОЗР");
	ЗначениеВРеквизитФормы(Исполнители_Значение, "Исполнители");
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСрокиИсполнения()
	
	Исполнители_Значение = РеквизитФормыВЗначение("Исполнители");
	Этапы_Значение = РеквизитФормыВЗначение("Этапы");
	
	Если ЗначениеЗаполнено(Объект.ДатаСтарта) И Объект.ДатаСтарта > ТекущаяДатаСеанса() Тогда
		НачПериода = Объект.ДатаСтарта;
	Иначе
		НачПериода = ТекущаяДатаСеанса();
	КонецЕсли;
	//НачПериода	= ?(НачалоДня(Объект.Дата) = Объект.ДатаСтарта, Объект.Дата, Объект.ДатаСтарта);
	CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(Объект.НомерВерсииКартыМаршрута, Объект.Организация, Объект.ТочкаСтарта, Этапы_Значение, НачПериода);
	
	Исполнители_Значение.ЗаполнитьЗначения(Дата("00010101"), "ДатаНачала,ДатаВыполнения");
	Для Каждого СтрокаТаб Из Исполнители_Значение Цикл
		СтрокаЭтапа = Этапы_Значение.Найти(СтрокаТаб.ТочкаМаршрута,"ТочкаМаршрута");
		Если НЕ СтрокаЭтапа = Неопределено Тогда
			
			СтрокаТаб.ВариантВыполнения			= СтрокаЭтапа.ВариантВыполнения;
			СтрокаТаб.ДлительностьДней			= СтрокаЭтапа.ДлительностьДней;
			СтрокаТаб.ДлительностьЧасов			= СтрокаЭтапа.ДлительностьЧасов;
			СтрокаТаб.ДлительностьМинут			= СтрокаЭтапа.ДлительностьМинут;
			СтрокаТаб.ОтложитьНачалоЭтапаДней	= СтрокаЭтапа.ОтложитьНачалоЭтапаДней;
			СтрокаТаб.ОтложитьНачалоЭтапаЧасов	= СтрокаЭтапа.ОтложитьНачалоЭтапаЧасов;
			СтрокаТаб.ОтложитьНачалоЭтапаМинут	= СтрокаЭтапа.ОтложитьНачалоЭтапаМинут;
			СтрокаТаб.Шаблон					= СтрокаЭтапа.Шаблон;
			Попытка
				СтрокаТаб.ДатаНачала		= СтрокаЭтапа.ДатаНачала;
				СтрокаТаб.ДатаВыполнения	= СтрокаЭтапа.ДатаВыполнения;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Этапы_Значение, "Этапы");
	ЗначениеВРеквизитФормы(Исполнители_Значение, "Исполнители");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПроцесса()
	
	Проект = Объект.Проект;
	
	Если НЕ ЗначениеЗаполнено(Проект) Тогда
		Возврат
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Проект.CRM_КартаМаршрута) Тогда
		
		МожноУказыватьСрокВыполненияЭтапов	= Объект.КартаМаршрута.УказыватьСрокВыполненияЭтапов;
		РазрешитьПеремещатьТекущийЭтап		= Объект.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап;
		
		Объект.КартаМаршрута				= Проект.CRM_КартаМаршрута;
		Объект.НомерВерсииКартыМаршрута		= Объект.КартаМаршрута.НомерВерсии;
		Объект.Наименование 				= Объект.КартаМаршрута.Наименование;
		
		ПолучитьТочкиСтарта();
		
		ЗаполнитьТаблицуИсполнителей();
		
		ИзмененыИсполнители		= Истина;
		ИзмененаКартаМаршрута	= Истина;
		ИзмененаДлительность	= Ложь;
		Проект_КартаМаршрута	=  Проект.CRM_КартаМаршрута;		
		ЗаполнитьПланируемуюДатуЗавершенияПроцесса(НЕ МожноУказыватьСрокВыполненияЭтапов);				
		
	КонецЕсли;
		
	CRM_БизнесПроцессыПереопределяемый.ЗаполнитьБизнесПроцессПоПроекту(Объект,Проект);
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКартыМаршрута()
	
	МожноУказыватьСрокВыполненияЭтапов	= Объект.КартаМаршрута.УказыватьСрокВыполненияЭтапов;
	РазрешитьПеремещатьТекущийЭтап		= Объект.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап;
	РазрешеноДосрочноеЗавершение		= Объект.КартаМаршрута.РазрешеноДосрочноеЗавершение;
	
	Объект.Наименование = Объект.КартаМаршрута.Наименование;	
	Объект.НомерВерсииКартыМаршрута = ?(ЗначениеЗаполнено(Объект.КартаМаршрута),Объект.КартаМаршрута.НомерВерсии,0);
	
	НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
	НаборИсполнителей.Отбор.Объект.Установить(Объект.КартаМаршрута);
	НаборИсполнителей.Прочитать();	
			
	ПолучитьТочкиСтарта();
	
	ЗаполнитьТаблицуИсполнителей(НаборИсполнителей);
	
	ИзмененыИсполнители		= Истина;
	ИзмененаКартаМаршрута	= Истина;
	ИзмененаДлительность	= Ложь;
	
	ЗаполнитьПланируемуюДатуЗавершенияПроцесса(НЕ МожноУказыватьСрокВыполненияЭтапов);

КонецПроцедуры

&НаКлиенте
// Процедура устанавливает доступность реквизитов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьДоступностьРеквизитов()
		
	// Установим видимость и доступность реквизитов  формы.
	Элементы.ДатаСтарта.ТолькоПросмотр		= Объект.Стартован;
	Элементы.Дата.ТолькоПросмотр			= Объект.Стартован;
	Элементы.Проект.ТолькоПросмотр			= Объект.Стартован;
	Элементы.ТочкаСтарта.ТолькоПросмотр		= Объект.Стартован;
	
	//Элементы.КартаМаршрута.ТолькоПросмотр	= ((ЗначениеЗаполнено(Объект.Проект) И Проект_КартаМаршрута = Объект.КартаМаршрута) ИЛИ Объект.Стартован)
	Элементы.КартаМаршрута.ТолькоПросмотр	= Объект.Стартован;
	
	Элементы.ИсполнителиДатаНачала.Видимость					= МожноУказыватьСрокВыполненияЭтапов;
	Элементы.ИсполнителиДатаВыполнения.Видимость				= МожноУказыватьСрокВыполненияЭтапов;
	Элементы.ФормаПередвинутьЭтап.Видимость						= РазрешитьПеремещатьТекущийЭтап;
	Элементы.ФормаПередвинутьЭтап.Доступность					= (Объект.Стартован И НЕ Объект.Завершен);
	Элементы.ФормаЗавершитьБизнесПроцессДосрочно.Видимость		= (РазрешеноДосрочноеЗавершение И Объект.Стартован И НЕ Объект.Завершен);
	Элементы.ФормаЗавершитьБизнесПроцессДосрочно.Доступность	= (РазрешеноДосрочноеЗавершение И Объект.Стартован И НЕ Объект.Завершен);
	
	Элементы.ПричинаДосрочногоЗавершения.Видимость				= Объект.ЗавершенДосрочно;
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьЗадачуПоБизнесПроцессу()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.Ссылка,
	|	ЗадачаИсполнителя.CRM_ТочкаМаршрута.РеквизитДопУпорядочивания КАК CRM_ТочкаМаршрутаРеквизитДопУпорядочивания
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	(НЕ ЗадачаИсполнителя.Выполнена)
	|	И (НЕ ЗадачаИсполнителя.ПометкаУдаления)
	|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_ТочкаМаршрутаРеквизитДопУпорядочивания";
	Запрос.УстановитьПараметр("БизнесПроцесс", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.CRM_ЗавершенДосрочно	= Истина;
		ЗадачаОбъект.CRM_Неудача			= Истина;
		ЗадачаОбъект.ДатаИсполнения			= ТекущаяДатаСеанса();
		ЗадачаОбъект.ОбменДанными.Загрузка	= Истина;
		ЗадачаОбъект.Записать();
		
		CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(ЗадачаОбъект.Ссылка);
		
		Возврат Новый Структура("Задача, ТочкаМаршрута",ЗадачаОбъект.Ссылка,ЗадачаОбъект.CRM_ТочкаМаршрута);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗавершитьБизнесПроцесс(ПараметрыДосрочногоЗавершения)
	
	CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения);
	
КонецПроцедуры

&НаСервере
Функция ВернутьОсновноеКонтактноеЛицо(ВыбранныйПартнер)
	
	Возврат ВыбранныйПартнер.CRM_ОсновноеКонтактноеЛицо;
	
КонецФункции

&НаСервере
Процедура УстановитьСвойстваКнопкиФормаСтартИЗакрыть()
		
	Если (ЗначениеЗаполнено(Объект.Дата) И (ТекущаяДатаСеанса() < Объект.ДатаСтарта)) ИЛИ Объект.Стартован Тогда
		Элементы.ФормаСтартИЗакрыть.ИмяКоманды = "ЗаписатьИЗакрыть";
	Иначе
		Элементы.ФормаСтартИЗакрыть.ИмяКоманды = "СтартоватьИЗакрыть";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДеньВключенВГрафик(ВыбранноеЗначение)
	
	Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КалендарныеГрафики.ДеньВключенВГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.Год = &Год
	|	И КалендарныеГрафики.ДатаГрафика = &ДатаГрафика";
	
	Запрос.УстановитьПараметр("Календарь"	,Календарь);
	Запрос.УстановитьПараметр("Год"			,Год(ВыбранноеЗначение));
	Запрос.УстановитьПараметр("ДатаГрафика"	,НачалоДня(ВыбранноеЗначение));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДеньВключенВГрафик;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьДлительностьЭтапа(НачПериода, КонПериода, Организация)
	
	СтруктураПериода	= CRM_ОбщегоНазначенияСервер.ПолучитьТрудозатратыЗаПериод(НачПериода, КонПериода,, Организация);
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ДлительностьДней"	,ЦЕЛ(СтруктураПериода.ВЧасах/СтруктураПериода.ПродолжительностьРабочегоДняВЧасах));
	СтруктураВозврата.Вставить("ДлительностьЧасов"	,ЦЕЛ(СтруктураПериода.ВЧасах - (СтруктураВозврата.ДлительностьДней*СтруктураПериода.ПродолжительностьРабочегоДняВЧасах)));
	СтруктураВозврата.Вставить("ДлительностьМинут"	,СтруктураПериода.ВМинутах - ((СтруктураВозврата.ДлительностьДней*СтруктураПериода.ПродолжительностьРабочегоДняВМинутах) + (СтруктураВозврата.ДлительностьЧасов*60)));
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ПересчитатьСрокиЭтапов(ТочкаМаршрута, НачПериода, ВариантВыполнения)
	
	Исполнители_Значение = РеквизитФормыВЗначение("Исполнители");
	
	СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТочкаМаршрута, Объект.НомерВерсииКартыМаршрута, ВариантВыполнения);
	
	CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(Объект.НомерВерсииКартыМаршрута, Объект.Организация, СтруктураТочки.ИсходящаяТочка, Исполнители_Значение, НачПериода, ВариантВыполнения);
	
	ЗначениеВРеквизитФормы(Исполнители_Значение, "Исполнители");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗадачаПринадлежитБизнесПроцессу(Задача, БизнесПроцесс)
	
	Возврат (БизнесПроцесс = Задача.СсылкаНаОбъект.БизнесПроцесс);
	
КонецФункции

&НаСервереБезКонтекста
Функция БизнесПроцессПринадлежитБизнесПроцессу(ВложенныйБизнесПроцесс, БизнесПроцесс)
	
	Возврат (БизнесПроцесс = ВложенныйБизнесПроцесс.ВедущаяЗадача.БизнесПроцесс);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПланируемуюДатуЗавершенияПроцесса(ОчищатьДату = Ложь)
	Если ОчищатьДату Тогда
		Объект.ПланируемаяДатаЗавершения = Дата("00010101");
		Возврат;
	КонецЕсли;				
	Если МожноУказыватьСрокВыполненияЭтапов И Исполнители.Количество() > 0 Тогда
		Объект.ПланируемаяДатаЗавершения = 
		CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьМаксимальнуюДатуИзКолонкиСрокБизнесПроцесса(Исполнители);
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ПолучитьЗадачуБПДляИстории()
	
	Если Не Объект.Завершен Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	(НЕ ЗадачаИсполнителя.Выполнена)
		|	И (НЕ ЗадачаИсполнителя.ПометкаУдаления)
		|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если РезультатЗапроса.Количество() > 0 Тогда
			ЗадачаБП				= РезультатЗапроса[0].Ссылка;
			ОписаниеТочкиМаршрута	= CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(ЗадачаБП, Истина);
		КонецЕсли;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗадачаИсполнителя.Ссылка КАК Ссылка
		               |ИЗ
		               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		               |ГДЕ
		               |	НЕ ЗадачаИсполнителя.ПометкаУдаления
		               |	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ЗадачаИсполнителя.ДатаИсполнения УБЫВ";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если РезультатЗапроса.Количество() > 0 Тогда
			ЗадачаБП				= РезультатЗапроса[0].Ссылка;
			ОписаниеТочкиМаршрута	= CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(ЗадачаБП, Истина);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьЕслиЗаписан", ЭтотОбъект);
	ПроверитьЗаполнениеЗаписать(Команда.Имя, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтартоватьИЗакрыть(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьЕслиЗаписан", ЭтотОбъект);
	ПроверитьЗаполнениеЗаписать(Команда.Имя, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЕслиЗаписан(Записан, ДополнительныеПараметры) Экспорт
	
	Если Записан Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Старт(Команда)
	
	ПроверитьЗаполнениеЗаписать(Команда.Имя, Неопределено);
	УстановитьДоступностьРеквизитов();
	УстановитьСвойстваКнопкиФормаСтартИЗакрыть();
	ПолучитьЗадачуБПДляИстории();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьБизнесПроцесс(Команда)
	
	ПроверитьЗаполнениеЗаписать(Команда.Имя, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ОстановитьБизнесПроцессИзФормыОбъекта(ЭтотОбъект);
	Элементы.НадписьСостояниеБизнесПроцесса.Заголовок = СформироватьСтрокуСостоянияБизнесПроцесса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ПродолжитьБизнесПроцессИзФормыОбъекта(ЭтотОбъект);
	Элементы.НадписьСостояниеБизнесПроцесса.Заголовок = СформироватьСтрокуСостоянияБизнесПроцесса();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД

&НаКлиенте
Процедура ПроцессПриИзменении(Элемент)
	
	ПриИзмененииПроцесса();
	УстановитьДоступностьРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрутаПриИзменении(Элемент)
	
	ПриИзмененииКартыМаршрута();
	УстановитьДоступностьРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСтартаПриИзменении(Элемент)
	
	Если НЕ ДатаСтарта_ = Объект.ДатаСтарта Тогда
		ДатаСтарта_ = Объект.ДатаСтарта;
		
		УстановитьСвойстваКнопкиФормаСтартИЗакрыть();
		
	КонецЕсли;
	
	Если МожноУказыватьСрокВыполненияЭтапов Тогда
		ПересчитатьСрокиИсполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкаСтартаПриИзменении(Элемент)
	
	Если МожноУказыватьСрокВыполненияЭтапов Тогда
		ПересчитатьСрокиИсполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	Если Элементы.Исполнители.ТекущиеДанные.Групповая Тогда
		ПараметрыФормы = Новый Структура("СписокИсполнителей,КартаМаршрута,НомерВерсииКартыМаршрута",
										Элементы.Исполнители.ТекущиеДанные.Исполнитель,Объект.КартаМаршрута,Объект.НомерВерсииКартыМаршрута);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиИсполнительПредставлениеНачалоВыбораЗавершени", ЭтотОбъект);								
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаВводаИсполнителей",ПараметрыФормы,ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		БылИсполнитель = Элементы.Исполнители.ТекущиеДанные.Исполнитель;
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"				,Истина);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		,Истина);
		
		ДанныеВыбора = Новый СписокЗначений;
		
		СтруктураДанныхВыбора = Новый Структура;
		СтруктураДанныхВыбора.Вставить("РежимВыбора"				,Истина);
		//Если ТипЗнч(БылИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		//	СтруктураДанныхВыбора.Вставить("ТекущаяСтрока"			,БылИсполнитель);
		//КонецЕсли;
		СтруктураДанныхВыбора.Вставить("ВыборГруппПользователей"	,Ложь);
		СтруктураДанныхВыбора.Вставить("ИмяФормы"					,"Справочник.Пользователи.Форма.ФормаСписка");
		СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
		ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Пользователи");
		
		СтруктураДанныхВыбора = Новый Структура;
		СтруктураДанныхВыбора.Вставить("РежимВыбора"				,Истина);
		//Если ТипЗнч(БылИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		//	СтруктураДанныхВыбора.Вставить("ТекущаяСтрока"			,БылИсполнитель);
		//КонецЕсли;
		СтруктураДанныхВыбора.Вставить("ИмяФормы"					,"Справочник.РолиИсполнителей.ФормаВыбора");
		СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
		ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Роли исполнителей");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеНачалоВыбораЗавершени(Результат, СтандартнаяОбработка)
	Если НЕ Результат = Неопределено Тогда
		
		Для Каждого Исполнитель Из Результат Цикл
			Если Не ЗначениеЗаполнено(Исполнитель.Значение) Тогда
				Результат.Удалить(Исполнитель);
			КонецЕсли;	
		КонецЦикла;	
		
		Элементы.Исполнители.ТекущиеДанные.Исполнитель				= Результат;
		Элементы.Исполнители.ТекущиеДанные.ИсполнительПредставление	= Строка(Элементы.Исполнители.ТекущиеДанные.Исполнитель);
		ИзмененыИсполнители = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы,ВыбранноеЗначение.ПараметрыФормы,?(ВыбранноеЗначение.РежимВыбора,Элемент,ЭтотОбъект),,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли НЕ ВыбранноеЗначение = Элементы.Исполнители.ТекущиеДанные.Исполнитель Тогда
		
		Элементы.Исполнители.ТекущиеДанные.Исполнитель				= ВыбранноеЗначение;
		Элементы.Исполнители.ТекущиеДанные.ИсполнительПредставление	= Строка(ВыбранноеЗначение);
		
		ИзмененыИсполнители			= Истина;
		Модифицированность	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	Если Элементы.Исполнители.ТекущиеДанные.Групповая Тогда
		НовыйСписок = Новый СписокЗначений;
		НовыйСписок.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.НеУказан"),"Не указан");
		Элементы.Исполнители.ТекущиеДанные.Исполнитель = НовыйСписок;
	Иначе
		Элементы.Исполнители.ТекущиеДанные.Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.НеУказан");
	КонецЕсли;
	
	Элементы.Исполнители.ТекущиеДанные.ИсполнительПредставление	= "Не указан";
	ИзмененыИсполнители			= Истина;
	Модифицированность	= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьБизнесПроцессДосрочно(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьБизнесПроцессДосрочноЗавершение", ЭтотОбъект);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения",,ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьБизнесПроцессДосрочноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		Если Модифицированность Тогда
			Записать();
		КонецЕсли;
		
		ПараметрыЗадачи = ПолучитьЗадачуПоБизнесПроцессу();
		
		Результат.Вставить("Задача"					,ПараметрыЗадачи.Задача);
		Результат.Вставить("ЭтапДосрочногоЗавершения"	,ПараметрыЗадачи.ТочкаМаршрута);
		
		ЗавершитьБизнесПроцесс(Результат);
		
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередвинутьЭтап(Команда)
	
	ПараметрыФормы = Новый Структура("Ключ", Объект.Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередвинутьЭтапЗавершения", ЭтотОбъект);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПеремещенияЭтапа",ПараметрыФормы,ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередвинутьЭтапЗавершения(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТаблицуИсполнителей();
	ПолучитьЗадачуБПДляИстории();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСкрыватьДопИнформацию(Команда)
	
	Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка = НЕ Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка;
	Элементы.ГруппаИстория.Видимость = Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка;
	
	СкрытьПоказатьПанельИнформации = Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка;
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть форму бизнес-процесса. Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если CRM_ЛицензированиеСервер.ВариантПоставкиСТАРТ() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Бизнес-процессы не доступны для варианта поставки ""СТАРТ""!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "ГруппаМенюЕще");
	ДополнительныеПараметры.Вставить("Объект", Объект);
	CRM_УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	ДинамическиРассчитыватьСрокиВыполненияЭтапов = Объект.КартаМаршрута.ДинамическиРассчитыватьСрокиВыполненияЭтапов;
	
	ЭтоНовыйОбъект = Объект.Ссылка.Пустая();
	
	Если ЗначениеЗаполнено(Объект.КартаМаршрута) Тогда
		
		МожноУказыватьСрокВыполненияЭтапов	= Объект.КартаМаршрута.УказыватьСрокВыполненияЭтапов;
		РазрешитьПеремещатьТекущийЭтап		= Объект.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап;
		РазрешеноДосрочноеЗавершение		= Объект.КартаМаршрута.РазрешеноДосрочноеЗавершение;
		
		ПолучитьТочкиСтарта(Ложь);
		
		ЗаполнитьТаблицуИсполнителей();
		
	Иначе
		МожноУказыватьСрокВыполненияЭтапов = Ложь;
		Элементы.ТочкаСтарта.Видимость = Ложь;
	КонецЕсли;
	
	ДатаСтарта_				= Объект.ДатаСтарта;
	Проект_КартаМаршрута	= Объект.Проект.CRM_КартаМаршрута;
	ПредметПредставление 	= CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеПредметаДокумента(Объект.Предмет);
	Элементы.ПредметПредставление.Видимость = ЗначениеЗаполнено(Объект.Предмет);
	
	УстановитьСвойстваКнопкиФормаСтартИЗакрыть();
	
	Элементы.НадписьСостояниеБизнесПроцесса.Заголовок = СформироватьСтрокуСостоянияБизнесПроцесса();
	
	ВалютаДокумента = Строка(Константы.ВалютаУправленческогоУчета.Получить());

	Если ЭтоНовыйОбъект Тогда
		Если	Параметры.Свойство("Основание")
			И	ТипЗнч(Параметры.Основание) = Тип("Структура")
			И	Параметры.Основание.Свойство("Основание")
			И	ЗначениеЗаполнено(Параметры.Основание.Основание) Тогда
			
			СозданИзСделки = Ложь;
			//Если ТипЗнч(Параметры.Основание.Основание) = Тип("ДокументСсылка.удалитьCRM_Сделка") Тогда
			//	СозданИзСделки = Истина;
			//	Если Параметры.Основание.Свойство("ЭтапыСделки") Тогда
			//		ДанныеТЧ = Параметры.Основание.ЭтапыСделки.Выгрузить();
			//	Иначе
			//		ДанныеТЧ = Новый ТаблицаЗначений;
			//	КонецЕсли;					
			//	ТаблицаИсполнителей = Исполнители.Выгрузить();
			//	НоваяТаблицаИсполнителей = Новый ТаблицаЗначений;
			//	Исполнители.Очистить();
			//	Для Каждого СтрокаТЧ Из ДанныеТЧ Цикл
			//		ОтборПоЭтапу = Новый Структура("ТочкаМаршрута", СтрокаТЧ.ТочкаМаршрута);
			//		СтрокаИсполнители = ТаблицаИсполнителей.НайтиСтроки(ОтборПоЭтапу);
			//		Если СтрокаИсполнители.Количество() > 0 Тогда
			//			ИндексСтроки = ТаблицаИсполнителей.Индекс(СтрокаИсполнители[0]);
			//			ТаблицаИсполнителей[ИндексСтроки].Исполнитель 				= ?(ЗначениеЗаполнено(СтрокаТЧ.Исполнитель), СтрокаТЧ.Исполнитель, ТаблицаИсполнителей[ИндексСтроки].Исполнитель);
			//			ТаблицаИсполнителей[ИндексСтроки].ИсполнительПредставление 	= Строка(ТаблицаИсполнителей[ИндексСтроки].Исполнитель);
			//			ТаблицаИсполнителей[ИндексСтроки].ДатаНачала 				= СтрокаТЧ.ДатаНачала;
			//			ТаблицаИсполнителей[ИндексСтроки].ДатаВыполнения 			= СтрокаТЧ.ДатаВыполнения;
			//		КонецЕсли;
			//	КонецЦикла;  
			//	Исполнители.Загрузить(ТаблицаИсполнителей);
			//	ИзмененыИсполнители 	= Истина;
			//	ИзмененаДлительность 	= Истина;
			//КонецЕсли;
			
			Если Параметры.Основание.Свойство("КартаМаршрута")
				И	ЗначениеЗаполнено(Параметры.Основание.КартаМаршрута)
				И	ЗначениеЗаполнено(Объект.КартаМаршрута)
				И	(Объект.КартаМаршрута.СтартоватьВФоновомРежимеИзДокументов ИЛИ СозданИзСделки) Тогда
				//
				Если Параметры.Свойство("ПроизвольныйБП") И Параметры.ПроизвольныйБП Тогда
					бСтартовать = Ложь;
				Иначе
					Если СозданИзСделки Тогда
						бСтартовать = ПроверитьЗаполнение();
					Иначе
						бСтартовать = (Объект.Дата = Объект.ДатаСтарта) И ПроверитьЗаполнение();
					КонецЕсли;
				КонецЕсли;
				
				Если бСтартовать Тогда
					ПараметрыЗаписи = Новый Структура("Старт", Истина);
					ПризнакОтказыватьсяОтОткрытияФормыСОповещениемОЗаписиНового = Истина;
					Записать(ПараметрыЗаписи);
				КонецЕсли;
				Если ПризнакОтказыватьсяОтОткрытияФормыСОповещениемОЗаписиНового И (Не ЗначениеЗаполнено(Объект.Ссылка) Или Не Объект.Стартован) Тогда
					ПризнакОтказыватьсяОтОткрытияФормыСОповещениемОЗаписиНового = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Элементы.Ответственный.КнопкаВыбора = Истина;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		Элементы.Ответственный.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	//Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.удалитьCRM_Сделка") 
	//	И ЗначениеЗаполнено(Объект.Предмет)
	//	И Объект.Предмет.БизнесПроцесс = Объект.Ссылка Тогда
	//	Элементы.Сумма.ТолькоПросмотр = Истина;
	//Иначе
		Элементы.Сумма.ТолькоПросмотр = Ложь;
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ГлавнаяЗадача) Тогда
		ОписаниеТочкиМаршрута	= CRM_БизнесПроцессыПереопределяемый.СформироватьИсториюБизнесПроцесса(Объект.ГлавнаяЗадача, Истина);
	Иначе
		Если НЕ ЭтоНовыйОбъект Тогда
			ПолучитьЗадачуБПДляИстории(); 
		КонецЕсли;			
	КонецЕсли;
	
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
	
	Элементы.ФормаСтартИЗакрыть.Видимость = Не Объект.Стартован;
	
	ПервыйВызов = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.вогДолжностнаяПозиция) Тогда
		Объект.вогДолжностнаяПозиция = Объект.Автор.CRM_ДолжностнаяПозиция;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ПризнакОтказыватьсяОтОткрытияФормыСОповещениемОЗаписиНового Тогда
		Если ВладелецФормы <> Неопределено И ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ОповеститьОЗаписиНового(Объект.Ссылка);
		КонецЕсли;
		//+вог
		Оповестить("Запись_БизнесПрцесса", Новый Структура("БизнесПрцесс, Предмет", Объект.Ссылка, Объект.Предмет));
		//-вог
		Отказ = Истина;
		Попытка Закрыть(); // Нужно, чтобы разблокировать объект, связанный с формой.
		Исключение КонецПопытки;
		Возврат;
	КонецЕсли;
		
	УстановитьДоступностьРеквизитов();
	Если ПервыйВызов Тогда
		СкрытьПоказатьПанельИнформации = Истина;
	КонецЕсли;		
	Элементы.ГруппаИстория.Видимость = СкрытьПоказатьПанельИнформации;	
	
	// Если это новый объект, то однозначно необходимо рассчитать ДатуПланируемогоЗавершения,
	// при этом, конечно, колонка "срок" должна быть видна, а также таблица исполнителей заполнена.
	Если ЭтоНовыйОбъект Тогда
		ЗаполнитьПланируемуюДатуЗавершенияПроцесса();		
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИзмененыИсполнители Тогда
		ТекущийОбъект.мИсполнители = РеквизитФормыВзначение("Исполнители");
		ТекущийОбъект.мТребуетсяСохранитьИсполнителейЭтапов = Истина;
	КонецЕсли;
	
	Если ИзмененаКартаМаршрута Тогда
		ТекущийОбъект.мТребуетсяСохранитьНастройкиЭтапов = Истина;
	КонецЕсли;
	
	Если ИзмененаДлительность Тогда
		ТекущийОбъект.мИсполнители = РеквизитФормыВзначение("Исполнители");
		ТекущийОбъект.мТребуетсяСкорректироватьДлительностьЭтапов = Истина;
	КонецЕсли;
	
	ИзмененаПричина = НЕ (Объект.Ссылка.ПричинаДосрочногоЗавершения = ТекущийОбъект.ПричинаДосрочногоЗавершения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(Объект.КартаМаршрута) Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйИсполнитель = Неопределено;
	Если Исполнители.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(Объект.ТочкаСтарта) И ЗначениеЗаполнено(Объект.Проект) Тогда
			Попытка		МассивИсходящихТочек = CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПолучитьСледующиеТочкиМаршрута(Объект.Проект, Объект.ТочкаСтарта);
			Исключение	МассивИсходящихТочек = Неопределено;
			КонецПопытки;
			Если ТипЗнч(МассивИсходящихТочек) = Тип("Массив") И МассивИсходящихТочек.Количество() > 0 Тогда
				Для Каждого СтрокаТаблицы Из Исполнители Цикл
					Если СтрокаТаблицы.ТочкаМаршрута = МассивИсходящихТочек[0].ИсходящаяТочка Тогда
						ПервыйИсполнитель = СтрокаТаблицы.Исполнитель;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ПервыйИсполнитель = Исполнители[0].Исполнитель;
			КонецЕсли;
		Иначе
			ПервыйИсполнитель = Исполнители[0].Исполнитель;
		КонецЕсли;
	КонецЕсли;
	
	Если ПервыйИсполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан  ИЛИ 
		(ПервыйИсполнитель = Новый СписокЗначений) ИЛИ
		(ПервыйИсполнитель = Неопределено) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Необходимо указать исполнителя первого этапа бизнес-процесса'"),,,"Исполнители", Отказ);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоНовыйОбъект ИЛИ ИзмененаКартаМаршрута ИЛИ ИзмененаДлительность ИЛИ ИзмененыИсполнители Тогда
		ЗаполнитьТаблицуИсполнителей();
		ПолучитьЗадачуБПДляИстории(); 		
	КонецЕсли;
	
	Если ИзмененаПричина Тогда
		ЗаписьРегистра = РегистрыСведений.CRM_ТекущиеЭтапыБизнесПроцессов.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Объект = ТекущийОбъект.Ссылка;
		ЗаписьРегистра.Прочитать();
		Если ЗаписьРегистра.Выбран() Тогда
			
			ВариантЗавершенияСтрокой = ?(ЗначениеЗаполнено(ТекущийОбъект.ВариантЗавершения),"("+ Строка(ТекущийОбъект.ВариантЗавершения) +")","");
			
			ПредставлениеЭтапа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершен досрочно %1; по причине: %2; на этапе : %3'"),
																						 ВариантЗавершенияСтрокой,
																						 Строка(ТекущийОбъект.ПричинаДосрочногоЗавершения),
																						 Строка(ТекущийОбъект.ЭтапДосрочногоЗавершения));
			
			ЗаписьРегистра.ТекущийЭтап	= ПредставлениеЭтапа;
			ЗаписьРегистра.Записать();
		КонецЕсли;
		ИзмененаПричина = Ложь;
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	CRM_УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	CRM_БизнесПроцессыСервер.ЗаписатьИсториюРеквизитовБизнесПроцесса(ТекущийОбъект.Ссылка, Новый Структура("БизнесПроцесс"),Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
 	Если ЭтоНовыйОбъект ИЛИ ИзмененаКартаМаршрута ИЛИ ИзмененаДлительность ИЛИ ИзмененыИсполнители Тогда
		
		Если ЗначениеЗаполнено(Объект.ВедущаяЗадача) И (ИзмененаКартаМаршрута ИЛИ ИзмененаДлительность) Тогда
			Оповестить("СохраненыНастройкиЭтаповВложенногоБизнесПроцесса", Объект.Ссылка);
		КонецЕсли;
		
		ЭтоНовыйОбъект			= Ложь;
		ИзмененаКартаМаршрута	= Ложь;
		ИзмененаДлительность	= Ложь;
		ИзмененыИсполнители		= Ложь;
		
	КонецЕсли;
	
	Если Объект.Стартован Тогда
		Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Неопределено, Параметры.ОбновлятьКалендарь), ЭтотОбъект);
	КонецЕсли;
	
	Элементы.Ответственный.ТолькоПросмотр = Истина;
	Элементы.Ответственный.КнопкаВыбора = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ПланируемаяДатаЗавершения) Тогда
		ЗаполнитьПланируемуюДатуЗавершенияПроцесса();		
	КонецЕсли;		
	
	Оповестить("ПроверитьИзменениеПланируемойДатыЗавершенияБП", Объект.Ссылка);	
	
	Оповестить("ОбновитьАРМ");
	//+вог
	Оповестить("Запись_БизнесПрцесса", Новый Структура("БизнесПрцесс, Предмет", Объект.Ссылка, Объект.Предмет));
	//-вог
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	CRM_УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если CRM_УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗадачаВыполнена" Тогда
		Если Параметр.Свойство("СсылкаНаОбъект") И ТипЗнч(Параметр.СсылкаНаОбъект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И ЗадачаПринадлежитБизнесПроцессу(Параметр, Объект.Ссылка) Тогда
			ЗаполнитьТаблицуИсполнителей();
			ПолучитьЗадачуБПДляИстории(); 			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "СохраненыНастройкиЭтаповВложенногоБизнесПроцесса" Тогда
		Если ТипЗнч(Параметр) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") И БизнесПроцессПринадлежитБизнесПроцессу(Параметр, Объект.Ссылка) Тогда
			ЗаполнитьТаблицуИсполнителей();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "СкорректированыСрокиИсполнения" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьТаблицуИсполнителей();
	ИначеЕсли ИмяСобытия = "ОбновитьСуммаПотенциал" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		Если Параметр.БизнесПроцесс = Объект.Ссылка Тогда
			Объект.Сумма = Параметр.Потенциал;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "СкорректированаПланируемаяДатаЗавершенияБП" И Параметр = Объект.Ссылка Тогда
		Прочитать();	
		ЗаполнитьТаблицуИсполнителей();
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["СкрытьПоказатьПанельИнформации"] = Неопределено Тогда
		СкрытьПоказатьПанельИнформации = Настройки["СкрытьПоказатьПанельИнформации"];
	Иначе
		СкрытьПоказатьПанельИнформации = Истина;
	КонецЕсли;
	Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка = СкрытьПоказатьПанельИнформации;
	
	ПервыйВызов = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
	
КонецПроцедуры

#Область ПроцедурыОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КартаМаршрутаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Редактируется", Ложь);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Справочник.CRM_КартыМаршрутов.ФормаВыбора",ПараметрыФормы,Элемент,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.КонтактноеЛицо = ВернутьОсновноеКонтактноеЛицо(Объект.Партнер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", 
			Новый Структура("Ключ, ОткрытиеИзФормы", Объект.Предмет, Истина),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда		
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента", 
			Новый Структура("Ключ, ОткрытиеИзФормы", Объект.Предмет, Истина),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.Независимый);		
	Иначе			
		ПоказатьЗначение(, Объект.Предмет);			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	
	Если НЕ ДеньВключенВГрафик(ВыбранноеЗначение) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ВыбранноеЗначение,"ДФ=dd.MM.yyyy") + 
					НСтр("ru = ' не рабочий день.'"));
		
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ВыбранноеЗначение < ТекДанные.ДатаНачала Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Срок этапа не может быть меньше Даты начала.'"));
					
		СтандартнаяОбработка = Ложь;
	Иначе
		ТекДанные.ДатаВыполнения	= ВыбранноеЗначение;
		ИсполнителиДатаВыполненияПриИзменении(Элементы.ИсполнителиДатаВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекДанные.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Дата начала этапа не заполнена!.'"));
		Возврат;					
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Время_"	,ТекДанные.ДатаВыполнения);
	ПараметрыФормы.Вставить("Дата_"		,ТекДанные.ДатаВыполнения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиДатаВыполненияНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.CRM_ВыборДатыВремени",ПараметрыФормы, Элемент,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ИсполнителиДатаВыполненияОбработкаВыбора(Элементы.ИсполнителиДатаВыполнения, Результат, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияПриИзменении(Элемент)
	
	ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекДанные.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Дата начала этапа не заполнена!.'"));
		ТекДанные.ДатаВыполнения = Дата("00010101");
		Возврат;
	КонецЕсли;
	
	СтруктураПериода = РассчитатьДлительностьЭтапа(ТекДанные.ДатаНачала, ТекДанные.ДатаВыполнения, Объект.Организация);
	
	ТекДанные.ДлительностьДней	= СтруктураПериода.ДлительностьДней;
	ТекДанные.ДлительностьЧасов	= СтруктураПериода.ДлительностьЧасов;
	ТекДанные.ДлительностьМинут	= СтруктураПериода.ДлительностьМинут;
	
	Если ДинамическиРассчитыватьСрокиВыполненияЭтапов Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиДатаВыполненияПриИзмененииЗавершение", ЭтотОбъект, ТекДанные);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Пересчитать сроки для следующих этапов?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ИзмененаДлительность		= Истина;
	Модифицированность	= Истина;
	ЗаполнитьПланируемуюДатуЗавершенияПроцесса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияПриИзмененииЗавершение(Ответ, ТекДанные) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПересчитатьСрокиЭтапов(ТекДанные.ТочкаМаршрута, ТекДанные.ДатаВыполнения, ТекДанные.ВариантВыполнения);
	КонецЕсли;
	
	ИзмененаДлительность		= Истина;
	Модифицированность	= Истина;
	ЗаполнитьПланируемуюДатуЗавершенияПроцесса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТочкиМаршрутаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		Если Найти(ДанныеСобытия.href,"e1cib") > 0 Тогда
			НавСсылка = Сред(ДанныеСобытия.href,Найти(ДанныеСобытия.href,"e1cib"));
			Попытка
				ПерейтиПоНавигационнойСсылке(НавСсылка);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемаяДатаЗавершенияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ПланируемаяДатаЗавершения) Тогда
		Если НачалоДня(Объект.ПланируемаяДатаЗавершения) < НачалоДня(Объект.ДатаСтарта) Тогда
			СтрокаСообщения = Нстр("ru = 'Планируемая дата завершения не может быть меньше даты старты, она будет скорректирована.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,,"Объект.ПланируемаяДатаЗавершения");
			Объект.ПланируемаяДатаЗавершения = Объект.ДатаСтарта;
		КонецЕсли;			
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	CRM_УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеВложений()
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru = 'Бизнес-процесс не записан. Добавление файлов невозможно!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);	
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтотОбъект,
	             Ложь,
	             Неопределено);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
