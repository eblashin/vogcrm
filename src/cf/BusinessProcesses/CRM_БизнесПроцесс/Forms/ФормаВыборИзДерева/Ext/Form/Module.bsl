
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если CRM_ЛицензированиеСервер.ВариантПоставкиСТАРТ() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Бизнес-процессы не доступны для варианта поставки ""СТАРТ""!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоВернутьЭлемент") Тогда
		ТолькоВернутьЭлемент = Параметры.ТолькоВернутьЭлемент;
	КонецЕсли;
	
	Если Параметры.Свойство("ПредметОснование") Тогда
		ПредметОснование = Параметры.ПредметОснование;
	КонецЕсли;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	
	Если ЗначениеЗаполнено(ТекущееПодразделение) Тогда
		Элементы.ОтборПодразделение.СписокВыбора.Добавить(ТекущееПодразделение, ТекущееПодразделение);
		ОтборПодразделение = ТекущееПодразделение;
	Иначе
		Элементы.ОтборПодразделение.СписокВыбора.Добавить("Подразделение не выбрано", НСтр("ru = 'Подразделение не выбрано'"));
		ОтборПодразделение = "Подразделение не выбрано";
	КонецЕсли;
	
	Если Параметры.Свойство("ВыводитьВсеКарты") Тогда
		ВыводитьВсеКарты = Параметры.ВыводитьВсеКарты;
	КонецЕсли;
	
	ОбновитьДеревоНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьДерево()
	
	ОбновитьДеревоНаСервере();
	Развернуть(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоНаСервере()
	Дерево.ПолучитьЭлементы().Очистить();
	
	ПроцессыИКарты = CRM_БизнесПроцессыСервер.ВернутьСпискиДоступныхПроцессовИКарт();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокПроцессов",ПроцессыИКарты.Процессы);
	Запрос.УстановитьПараметр("СписокКарт",ПроцессыИКарты.Карты);
	Запрос.Текст = "ВЫБРАТЬ
	|	Проекты.Ссылка КАК Проект,
	|	Проекты.CRM_КартаМаршрута КАК КартаМаршрута
	|ПОМЕСТИТЬ ПроцессыИКарты
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Ссылка В(&СписокПроцессов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка),
	|	CRM_КартыМаршрутов.Ссылка
	|ИЗ
	|	Справочник.CRM_КартыМаршрутов КАК CRM_КартыМаршрутов
	|ГДЕ
	|	CRM_КартыМаршрутов.Ссылка В(&СписокКарт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроцессыИКарты.Проект КАК Проект,
	|	ПроцессыИКарты.КартаМаршрута КАК Карта
	|ИЗ
	|	ПроцессыИКарты КАК ПроцессыИКарты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроцессыИКарты.КартаМаршрута.Наименование
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Проект)
	|ПО
	|	КартаМаршрута";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		НовыйЭлемент = Дерево.ПолучитьЭлементы().Добавить();
		НовыйЭлемент.КартаПроект = Выборка.Карта;
		НовыйЭлемент.СтандартнаяКартинка = БиблиотекаКартинок.БизнесПроцесс;
		ВыборкаПодчиненный = Выборка.Выбрать();
		Пока ВыборкаПодчиненный.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаПодчиненный.Проект) Тогда
				ПодчиненныйЭлемент = НовыйЭлемент.ПолучитьЭлементы().Добавить();
				ПодчиненныйЭлемент.КартаПроект = ВыборкаПодчиненный.Проект;
				ПодчиненныйЭлемент.СтандартнаяКартинка = БиблиотекаКартинок.Справочник;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПодразделенияЗавершение (Подразделение, ДопПараметры) Экспорт
	Если Подразделение <> Неопределено Тогда
		Элементы.ОтборПодразделение.СписокВыбора.Добавить(Подразделение, Подразделение);
		ОтборПодразделение = Подразделение;
		ОбновитьДерево();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьОписаниеHTML(Ссылка)
	
	ОписаниеПроцесса = Ссылка.Наименование + Символы.ПС + Символы.ПС + Ссылка.Комментарий;
	
	HTMLТекст = "<html>
		|<head>
		|<style type=""text/css"">
		|	body {
		|		overflow:    auto;
		|		margin-top:  2px;
		|		margin-left: 2px;
		|		font-family: Arial;
		|		font-size:   10pt;}
		|	table {
		|		width:       100%;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solid;}
		|	td {vertical-align: top;}
		| 	a:link {
		|		color: #006699; text-decoration: none;}
		|	a:visited {
		|		color: #006699; text-decoration: none;}
		|	a:hover {
		|		color: #006699; text-decoration: underline;}
		|	p {
		|		margin-top: 15px;}
		|	table.frame {
		|		border-collapse: collapse;
		|		border: 1px solid #C8C8C8;}
		|	td.frame {
		|		border: 1px solid #C8C8C8;}
		|</style>
		|<body>";
		
	HTMLТекст = HTMLТекст + "<table>";
	
	HTMLТекст = HTMLТекст + "<tr>";
	HTMLТекст = HTMLТекст + "<td>";
	
	ОписаниеПроцесса = СтрЗаменить(ОписаниеПроцесса, Символы.ПС, "<br>");
	HTMLТекст = HTMLТекст + ОписаниеПроцесса;
	
	HTMLТекст = HTMLТекст + "</td>";
	HTMLТекст = HTMLТекст + "</tr>";
	
	HTMLТекст = HTMLТекст + "</table>";
	
	HTMLТекст = HTMLТекст + "</body></html>";
	CRM_РаботаСHTML.УдалитьВредоносныйКодИзТекста(HTMLТекст);
	
	Возврат HTMLТекст;
	
КонецФункции

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ВыводитьВсеКарты(Команда)
	//ВыводитьВсеКарты = Не ВыводитьВсеКарты;
	//Элементы.ФормаВыводитьВсеКарты.Пометка = ВыводитьВсеКарты;
	//Элементы.Отборы.Доступность = НЕ ВыводитьВсеКарты;
	//Элементы.ФормаВключатьЗавершенныеПроекты.Доступность = НЕ ВыводитьВсеКарты;
	//ОбновитьДерево();
	//CRM_ХранилищеНастроек.Сохранить(ИмяФормы, "ВыводитьВсеКарты", Элементы.ФормаВыводитьВсеКарты.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	Если Элементы.Дерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПоказатьЗначение(, Элементы.Дерево.ТекущиеДанные.КартаПроект);
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	Для Каждого тЭлемент Из ЭлементыДерева Цикл
		ИдентификаторСтроки = тЭлемент.ПолучитьИдентификатор();
		Элементы.Дерево.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	Для Каждого тЭлемент Из ЭлементыДерева Цикл
		ИдентификаторСтроки = тЭлемент.ПолучитьИдентификатор();
		Элементы.Дерево.Свернуть(ИдентификаторСтроки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	ДеревоВыбор(Неопределено, Неопределено, Неопределено, Ложь);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Описание = СформироватьОписаниеHTML(ТекущиеДанные.КартаПроект);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	Изменить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоВернутьЭлемент Тогда
		Основание = Новый Структура("КартаМаршрута, Основание", ТекДанные.КартаПроект, ПредметОснование); 
		ПараметрыФормы = Новый Структура("Основание", Основание);
		Если CRM_БизнесПроцессыИЗадачиСервер.ЭтоПоручение(ТекДанные.КартаПроект) Тогда
			ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыФормы);
		ИначеЕсли CRM_БизнесПроцессыИЗадачиСервер.ЭтоНезависимыйПроцесс(ТекДанные.КартаПроект) Тогда
			ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаСтартаНезависимого", ПараметрыФормы);
		Иначе
			ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
		
		Закрыть();
	Иначе
		Закрыть(Элементы.Дерево.ТекущиеДанные.КартаПроект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.ОтборПодразделение.СписокВыбора.Очистить();
	Если ВыбранноеЗначение = "ВыбратьИзСписка" Тогда
		ВыборПодразделенияЗавершение = Новый ОписаниеОповещения("ВыборПодразделенияЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", , ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно, , ВыборПодразделенияЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Элементы.ОтборПодразделение.СписокВыбора.Добавить(ВыбранноеЗначение, ?(ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"), "Все подразделения", ВыбранноеЗначение));
		Элементы.ОтборПодразделение.СписокВыбора.Добавить(?(ЗначениеЗаполнено(ТекущееПодразделение), ТекущееПодразделение, "Подразделение не выбрано"), 
			?(ЗначениеЗаполнено(ТекущееПодразделение), НСтр("ru = 'Мое подразделение ('") + ТекущееПодразделение + ")", НСтр("ru = 'Подразделение не выбрано'")));
		ОтборПодразделение = ВыбранноеЗначение;
		ОбновитьДерево();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Элементы.ОтборПодразделение.СписокВыбора.Очистить();
	Элементы.ОтборПодразделение.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"), НСтр("ru = 'Все подразделения'"));
	Элементы.ОтборПодразделение.СписокВыбора.Добавить(?(ЗначениеЗаполнено(ТекущееПодразделение), ТекущееПодразделение, "Подразделение не выбрано"), 
			?(ЗначениеЗаполнено(ТекущееПодразделение), НСтр("ru = 'Мое подразделение ('") + ТекущееПодразделение + ")", НСтр("ru = 'Подразделение не выбрано'")));
	Элементы.ОтборПодразделение.СписокВыбора.Добавить("ВыбратьИзСписка", НСтр("ru = 'Выбрать из списка...'"));
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	Модифицированность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	Элементы.ОтборПодразделение.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"), "Все подразделения");
	ОтборПодразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	ОбновитьДерево();
КонецПроцедуры

#КонецОбласти



