
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если CRM_ЛицензированиеСервер.ВариантПоставкиСТАРТ() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Задача бизнес-процесса не доступна для варианта поставки  ""СТАРТ""!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Заголовок = Объект.Наименование + " от " +Формат(Объект.Дата, "ДФ='d MMMM yyyy'; ДЛФ=DD") + ", " + Формат(Объект.Дата, "ДФ=HH:mm; ДЛФ=T");
	
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		НомерВерсииКартыМаршрута = Объект.БизнесПроцесс.НомерВерсииКартыМаршрута;	
	КонецЕсли;
	
	ДобавлениеКнопокНаПанель();
	ДобавлениеКнопокНаПанельОбъектов();
	
	Если Элементы.ГруппаОбъекты.Видимость Тогда
		Элементы.ОбъектыПоБизнесПроцессам.Видимость			= Ложь;
		Элементы.ГруппаПанельГиперссылок.Видимость	= Ложь;
		Элементы._СкрытьОбъекты.Видимость					= Ложь;
		Элементы._ПоказатьОбъекты.Видимость					= Истина;
	КонецЕсли;
	
	Если НЕ Объект.Выполнена Тогда
		УсловияВыполнены	= CRM_БизнесПроцессыСервер.ПолучитьУсловиеЭтапаПроверитьПрименимость(Объект.Ссылка, Объект.ПринятаКИсполнению);
		//ОпсаниеУсловий		= CRM_БизнесПроцессыСервер.ПолучитьУсловиеЭтапаСформироватьОписание(Объект.Ссылка, Объект.ПринятаКИсполнению);
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Взаимодействия.Загрузить(CRM_ВзаимодействияСервер.ПолучитьВзаимодействия(Объект.Ссылка));
		ЗаполнитьДатуИВремяСервер();
	КонецЕсли;
	Если Взаимодействия.Количество() > 0 Тогда
		флПоказатьВзаимодействия = Истина;
	Иначе	
		флПоказатьВзаимодействия = Ложь;
	КонецЕсли;
	Элементы.Взаимодействия.Видимость			= флПоказатьВзаимодействия;
	Элементы.ВзаимодействияКнопкаДобавить.Видимость = флПоказатьВзаимодействия;
	Элементы.ВзаимодействияКнопкаУдалить.Видимость = флПоказатьВзаимодействия;
	Элементы._СкрытьВзаимодействия.Видимость					= флПоказатьВзаимодействия;
	Элементы._ПоказатьВзаимодействия.Видимость					= НЕ флПоказатьВзаимодействия;
	
	Если Объект.Выполнена Тогда
		Элементы.Взаимодействия.Доступность = Ложь;	
	КонецЕсли;	
	
	Если Параметры.Свойство("ПозиционироватьНаВзаимодействие") И ТипЗнч(Параметры.ПозиционироватьНаВзаимодействие) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		Отбор = Новый Структура("Ссылка", Параметры.ПозиционироватьНаВзаимодействие);
		НайденныеСтроки = Взаимодействия.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 1 Тогда
			Элементы.Взаимодействия.ТекущаяСтрока = Взаимодействия.Индекс(НайденныеСтроки[0]);
			Если Параметры.Свойство("ВвестиРезультат") Тогда
				Элементы.Взаимодействия.ТекущийЭлемент = Элементы.ВзаимодействияРезультат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Избранный = ?(Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая, Истина, Ложь);
	
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.БизнесПроцесс);
	
	ЗаполнитьДанныеФормыСервер();
	
	ИспользоватьДатуИВремяВСрокахЗадач	= ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		ЭтоПоручение				= (Объект.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение И НЕ Объект.Исполнитель = Объект.БизнесПроцесс.Автор);
		ЭтоЗапросНаИзменениеСроков	= (Объект.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков);
		
		РедактироватьСрокВыполненияЗадач = Объект.БизнесПроцесс.КартаМаршрута.РедактироватьСрокВыполненияЗадач;
		// Управление видимостью и доступностью поля дата исполнения.
		БизнесПроцессСтрокой = Объект.БизнесПроцесс.Наименование;
	Иначе
		ЭтоПоручение = Ложь;
		РедактироватьСрокВыполненияЗадач = Ложь;
	КонецЕсли;	
	Элементы.ПеренестиСрок.Видимость = ЭтоПоручение И НЕ ЗначениеЗаполнено(Объект.CRM_ПеренестиСрокИсполненияНа);
	Элементы.ДекорацияЗапросНаПереадресацию.Видимость = ЭтоПоручение;
	Если ЭтоПоручение Тогда
		СформироватьНадписьЗапросаНаИзменениеСрокаИсполнения();
	КонецЕсли;
	
	// ++ Харченко Д.И. №  - 01.11.2018 / 
	CRM_БизнесПроцессыСервер.ПодключитьКомандыТочкиМаршрута(ЭтаФорма, Элементы.ПодменюКнопкиДействияПоЗадаче);
	// -- Харченко Д.И. №  - 01.11.2018
	
	
	//START Кайдашов 24/03/20 CRM-468
		ВывестиРеквизитыПоТочкеМаршрута();	
	//END Кайдашов CRM-468
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ПолучитьСписокОбъектовПоБизнесПроцессу();
	
	СтрТекстHTMLЗадачи		= "";
	СтрТекстHTMLЗадачи		= ПолучитьТекстHTMLЗадачи(ТекущийОбъект.Ссылка,УникальныйИдентификатор);
	
	//Элементы.ГруппаКомнды.ТекущаяСтраница = ?(ТекущийОбъект.ПринятаКИсполнению,Элементы.ГруппаВыполнить,Элементы.ГруппаПринять);
	ДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанНовыйЗвонок" И ТипЗнч(Параметр) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И Параметр = Объект.Ссылка Тогда
		
		ОбработатьОповещенияЗаписиНовогоОбъекта(Источник);
		
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.БизнесПроцесс = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "ИзменениеПартнераВБизнесПроцессе" И Объект.БизнесПроцесс = Параметр Тогда
		Прочитать();
	ИначеЕсли ИмяСобытия = "ВыполненаСменаЭтапаБизнесПроцесса" И Объект.БизнесПроцесс = Параметр Тогда
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ОбработатьОповещенияЗаписиНовогоОбъекта(НовыйОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Результат = ПроверитьЗаполнениеВзаимодействий();
	
	Если Не Отказ И Результат Тогда
		Отказ = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЗаписатьВзаимодействияСервер(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_Взаимодействие.Ссылка
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|ГДЕ
	|	CRM_Взаимодействие.ДокументОснование = &ДокументОснование
	|	И CRM_Взаимодействие.СтатусВзаимодействия = &СтатусВзаимодействия";
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	Запрос.УстановитьПараметр("СтатусВзаимодействия", Справочники.CRM_СостоянияСобытий.Запланировано);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НаборРегистра = РегистрыСведений.CRM_ЗадачиПользователей.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.Объект.Установить(Объект.Ссылка);
		НаборРегистра.Очистить();
		НаборРегистра.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьОтображениеДанных();
	//START Кайдашов 09/08/19 500
	//Оповестить("ОбновитьПланировщик");
	//END Кайдашов	
КонецПроцедуры

// ++ VOG Солодов В.В. 31.03.2020 CRM-468
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПринятаКИсполнению = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ПринятаКИсполнению");
	
	Если Не ПринятаКИсполнению
		Или ПринятаКИсполнению И Не Объект.ПринятаКИсполнению Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Обязательный", Истина);
	
	НайденныеСтроки = ТаблицаРеквизитовТочкиМаршрута.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаРеквизит Из НайденныеСтроки Цикл
		
		Если Не ЗначениеЗаполнено(ЭтотОбъект[СтрокаРеквизит.ИмяРеквизитаФормы]) Тогда
			
			ИмяЭлемента = СтрЗаменить(СтрокаРеквизит.ИмяРеквизитаФормы, "Реквизит", "Элемент");
			Элемент 	= Элементы.Найти(ИмяЭлемента);
			
			Если Элемент = Неопределено Тогда
				ЗаголовокРеквизита = СтрокаРеквизит.ИмяРеквизитаФормы;
			Иначе
				ЗаголовокРеквизита = Элемент.Заголовок;
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru = 'Поле ""%1"" не заполнено.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЗаголовокРеквизита);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, СтрокаРеквизит.ИмяРеквизитаФормы,, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // -- VOG Солодов В.В. 31.03.2020

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтрТекстHTMLЗадачиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	
	Если ТипЗнч(ДанныеСобытия)<>Тип("ФиксированнаяСтруктура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрНавигационнаяСсылка	= Неопределено;
	ДанныеСобытия.Свойство("href",СтрНавигационнаяСсылка);	
	
	Если Не ЗначениеЗаполнено(СтрНавигационнаяСсылка) Тогда
		
		Попытка
			
			СтрНавигационнаяСсылка	= ДанныеСобытия.Event.srcElement.href;	
			
		Исключение
			
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(СтрНавигационнаяСсылка) Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	// Убираем базовую ссылку на CEOboard, если была задана
	ДлинаБазовойСсылки	= 0;
	ДлинаБазовойСсылки	= СтрДлина("v8config://CEOboard/");
	
	Если Лев(СтрНавигационнаяСсылка,ДлинаБазовойСсылки)="v8config://CEOboard/" Тогда
		
		СтрНавигационнаяСсылка	= Сред(СтрНавигационнаяСсылка,ДлинаБазовойСсылки+1);	
		
	КонецЕсли;
	
	// убираем базовую ссылку на страницу, если была задана
	ДлинаБазовойСсылки	= 0;
	ДлинаБазовойСсылки	= СтрДлина("about:");
	
	Если Лев(СтрНавигационнаяСсылка,ДлинаБазовойСсылки)="about:" Тогда
		
		СтрНавигационнаяСсылка	= Сред(СтрНавигационнаяСсылка,ДлинаБазовойСсылки+1);	
		
	КонецЕсли;
	
	// если прямая ссылка объект информационной базы
	ПозицияНачала	= 0;
	ПозицияНачала	= Найти(СтрНавигационнаяСсылка,"e1cib/");
	
	Если ПозицияНачала>0 Тогда
		
		СтрНавигационнаяСсылка	= Сред(СтрНавигационнаяСсылка,ПозицияНачала);	
		ПерейтиПоНавигационнойСсылке(СтрНавигационнаяСсылка);	
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГиперссылкаВвестиНажатие()
	
	Оп = Новый ОписаниеОповещения("ГиперссылкаВвестиВыполнитьПослеВыбора", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оп, СписокТипов, Элементы.ГиперссылкаВвести);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаВвестиВыполнитьПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ВвестиОбъект(Результат.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГиперссылкаВыбратьНажатие()
	
	Оп = Новый ОписаниеОповещения("ГиперссылкаВыбратьПослеВыбора", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оп, СписокТипов, Элементы.ГиперссылкаВыбрать);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаВыбратьПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ВыбратьОбъект(Результат.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеЗадачиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	
	Если ТипЗнч(ДанныеСобытия)<>Тип("ФиксированнаяСтруктура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрНавигационнаяСсылка	= Неопределено;
	ДанныеСобытия.Свойство("href",СтрНавигационнаяСсылка);	
	
	Если Не ЗначениеЗаполнено(СтрНавигационнаяСсылка) Тогда
		
		Попытка
			
			СтрНавигационнаяСсылка	= ДанныеСобытия.Event.srcElement.href;	
			
		Исключение
			
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(СтрНавигационнаяСсылка) Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// убираем базовую ссылку на страницу, если была задана
	ДлинаБазовойСсылки	= 0;
	ДлинаБазовойСсылки	= СтрДлина("about:");
	
	Если Лев(СтрНавигационнаяСсылка,ДлинаБазовойСсылки)="about:" Тогда
		
		СтрНавигационнаяСсылка	= Сред(СтрНавигационнаяСсылка,ДлинаБазовойСсылки+1);	
		
	КонецЕсли;
	
	// если прямая ссылка объект информационной базы
	ПозицияНачала	= 0;
	ПозицияНачала	= Найти(СтрНавигационнаяСсылка,"e1cib/");
	
	Если ПозицияНачала>0 Тогда
		
		СтрНавигационнаяСсылка	= Сред(СтрНавигационнаяСсылка,ПозицияНачала);	
		ПерейтиПоНавигационнойСсылке(СтрНавигационнаяСсылка);	
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияВыполненыНажатие(Элемент, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("СтатусВзаимодействия", ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано"));
	НайденныеСтроки = Взаимодействия.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
			ТекВзаимодействие.Изменено = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзбранныйНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	Если ТолькоПросмотр ИЛИ Элемент.ТолькоПросмотр Тогда Возврат; КонецЕсли;
	
	Избранный = НЕ Избранный;
	Объект.Важность	= ?(Избранный, ПредопределенноеЗначение("Перечисление.ВариантыВажностиЗадачи.Высокая"), ПредопределенноеЗначение("Перечисление.ВариантыВажностиЗадачи.Обычная"));
	Модифицированность		= Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("СтатусВзаимодействия", ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано"));
	НайденныеСтроки = Взаимодействия.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
			ТекВзаимодействие.Изменено = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.БизнесПроцесс);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр ИЛИ НЕ Элементы.ГруппаКнопокЛево.Доступность);	
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
	ПараметрыФормы,
	ЭтотОбъект,
	Ложь,
	Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВзаимодействия

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы "Взаимодействия".
//
Процедура ВзаимодействияПриАктивизацииСтроки(Элемент)
	//ПодключитьОбработчикОжидания("Подключаемый_ВзаимодействияПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" ТЧ Взаимодействия.
//
Процедура ВзаимодействияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если НЕ Объект.ПринятаКИсполнению Тогда
		Возврат;
	КонецЕсли;	
	СтруктураЗаполнения = ПолучитьСтруктуруЗаполненияВзаимодействия();
	МассивСтрок = Взаимодействия.НайтиСтроки(Новый Структура("АктивноеВзаимодействие", истина));
	
	НоваяСтрока = Взаимодействия.Вставить(0);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения);
	НоваяСтрока.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано");
	Модифицированность = Истина;
	Элементы.Взаимодействия.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.Взаимодействия.ИзменитьСтроку();
	
	ВидВзаимодействия = ПолучитьВидВзаимодействия();
	НоваяСтрока.ВидВзаимодействия = ВидВзаимодействия;
	НоваяСтрока.Изменено = Истина;
	
	ЗаписатьДатуНачалаВзаимодействия(НоваяСтрока);
	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" ТЧ "Взаимодействия".
//
Процедура ВзаимодействияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	
	ОповещениеВопросаОбОтменеВзаимодействия = Новый ОписаниеОповещения("ОбработкаОтменыВзаимодействия", ЭтотОбъект, ТекДанные);
	
	Если Не ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
		// Можно отменять и полностью удалять строку.
		ТекстВопроса = "Отменить запланированное взаимодействие?";
		ПоказатьВопрос(ОповещениеВопросаОбОтменеВзаимодействия, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено") Тогда
		ПоказатьПредупреждение(, "Нельзя отменять завершенное взаимодействие");
	Иначе
		Если НЕ ТекДанные.ПервоначальнаяОтмена И ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
			ТекстВопроса = "Отменить запланированное взаимодействие?";
		Иначе
			ТекстВопроса = "Запланировать взаимодействие?";
		КонецЕсли;
		ПоказатьВопрос(ОповещениеВопросаОбОтменеВзаимодействия, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - Обработчик события "ПриОкончанииРедактирования" ТЧ Взаимодействия
//
Процедура ВзаимодействияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
		ТекДанные.Изменено = Истина;
		ЗаписатьДатуНачалаВзаимодействия(ТекДанные);
		Модифицированность = Истина;
		ЗаписатьПлановуюДатуОкончанияВзаимодействия(ТекДанные);
		Модифицированность = Истина;
		Взаимодействия.Сортировать("ПлановаяДата УБЫВ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияПередНачаломИзменения(Элемент, Отказ)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено") И НЕ ТекДанные.Изменено Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияДатаНачалаПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	
	ТекДанные.ПлановаяДата = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ТекДанные.ДатаНачала, ТекДанные.ВремяС);
	Взаимодействия.Сортировать("ПлановаяДата Убыв");
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияДатаНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.Взаимодействия.ТекущаяСтрока;
	СтруктураПараметров = Новый Структура();
	
	// Так как с таблицей значений есть проблемы при передаче с клиента на сервер и обратно,
	// создадим массив структур, который и передадим вместо таблицы.
	МассивСтрок = Новый Массив();
	РеквизитыТаблицы = ПолучитьРеквизитыТаблицыВзаимодействий();
	Для Каждого СтрокаТаблицы Из Взаимодействия Цикл
		// Текущую строку не передаем
		Если Взаимодействия.НайтиПоИдентификатору(ТекСтрока) = СтрокаТаблицы Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтроки = Новый Структура();
		
		Для Каждого ТекКолонка Из РеквизитыТаблицы Цикл
			СтруктураСтроки.Вставить(ТекКолонка.Ключ, СтрокаТаблицы[ТекКолонка.Ключ]);
		КонецЦикла;
		
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	СтруктураПараметров.Вставить("МассивСтрок", МассивСтрок);
	
	СтруктураПараметров.Вставить("Интерес", Объект.Ссылка);
	
	ДатаВСтроке = Взаимодействия.НайтиПоИдентификатору(ТекСтрока).ПлановаяДата;
	Если ЗначениеЗаполнено(ДатаВСтроке) Тогда
		СтруктураПараметров.Вставить("ДатаПоУмолчанию", ДатаВСтроке);
	КонецЕсли;
	
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(Объект, Элемент, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияДатаНачалаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура();
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияОбработкаВыбора(Объект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияВремяСПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	ЗаписатьДатуНачалаВзаимодействия(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработки выбора времени из списка.
//
Процедура ОбработкаОповещенияВыбранногоВремениВзаимодействия(Параметры, Дополнительно) Экспорт
	Если Параметры <> Неопределено Тогда
		Если Дополнительно.Имя = "ВзаимодействияВремяС" Тогда
			Дополнительно.ТекДанные.ВремяС = Параметры.Значение;
			ВзаимодействияВремяСПриИзменении(Дополнительно.Элемент);
			Если НЕ ЗначениеЗаполнено(Дополнительно.ТекДанные.ВремяПо) Тогда
				Дополнительно.ТекДанные.ВремяПо = Параметры.Значение+15*60;	
			КонецЕсли;	
		Иначе
			Дополнительно.ТекДанные.ВремяПо = Параметры.Значение;
			ВзаимодействияВремяПоПриИзменении(Дополнительно.Элемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры  

&НаКлиенте
Процедура ВзаимодействияВремяСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если Элемент.Имя = "ВзаимодействияВремяС" Тогда
		СписокЧасов = ВыбратьВремяИзСписка(ТекДанные.ВремяС);
	Иначе
		СписокЧасов = ВыбратьВремяИзСписка(ТекДанные.ВремяПо);
	КонецЕсли;	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("ТекДанные", ТекДанные);
	Дополнительно.Вставить("Имя", Элемент.Имя);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремениВзаимодействия", ЭтотОбъект, Дополнительно);
	ПоказатьВыборИзСписка(Оп, СписокЧасов, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияВремяПоПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	ЗаписатьПлановуюДатуОкончанияВзаимодействия(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияВремяПоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если Элемент.Имя = "ВзаимодействияВремяС" Тогда
		СписокЧасов = ВыбратьВремяИзСписка(ТекДанные.ВремяС);
	Иначе
		СписокЧасов = ВыбратьВремяИзСписка(ТекДанные.ВремяПо);
	КонецЕсли;	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("ТекДанные", ТекДанные);
	Дополнительно.Вставить("Имя", Элемент.Имя);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремениВзаимодействия", ЭтотОбъект, Дополнительно);
	ПоказатьВыборИзСписка(Оп, СписокЧасов, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияРезультатПриИзменении(Элемент)
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	Если Не ПустаяСтрока(ТекДанные.Результат) Тогда
		ТекДанные.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Завершено");
		ТекДанные.ДатаЗавершенияВзаимодействия = ТекущаяДата();
		ТекДанные.ЗавершившийПользователь = ТекущийПользователь;
		ТекДанные.Изменено = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыПоБизнесПроцессамя

&НаКлиенте
Процедура ОбъектыПоБизнесПроцессамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПоБизнесПроцессамПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ОбъектыПоБизнесПроцессам.ТекущиеДанные;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("БизнесПроцесс",ТекДанные.БизнесПроцесс);
	СтруктураДанных.Вставить("Задача",ТекДанные.Задача);
	СтруктураДанных.Вставить("ТочкаМаршрута",ТекДанные.ТочкаМаршрута);
	СтруктураДанных.Вставить("Объект",ТекДанные.Объект);
	
	УдалитьЗаписьПоОбъекту(СтруктураДанных);
	// Обновляем описание БП в поле "История".
	СтрТекстHTMLЗадачи		= "";
	СтрТекстHTMLЗадачи		= ПолучитьТекстHTMLЗадачи(Объект.Ссылка,УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиСрок(Команда)
	
	ПараметрыФормы = Новый Структура("ДатаОкончание, ВремяОкончание, ИспользоватьДатуИВремяВСрокахЗадач",ДатаОкончание,ВремяОкончание,ИспользоватьДатуИВремяВСрокахЗадач);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиСрокЗавершение", ЭтотОбъект);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПереносаСрокаЗадачи",ПараметрыФормы,ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСрокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Объект.CRM_ПеренестиСрокИсполненияНа = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(Результат.ДатаОкончание, Результат.ВремяОкончание);
		
		ТекстПричиныПереноса = Символы.ПС + Символы.ПС + Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ='дд.ММ.гг ЧЧ:мм'") + НСтр("ru = ' отправлен запрос на перенос срока исполнения задачи на %ДатаСрока%Причина переноса: %Причина%'");
		ТекстПричиныПереноса = СтрЗаменить(ТекстПричиныПереноса, "%ДатаСрока%", Формат(Объект.CRM_ПеренестиСрокИсполненияНа,?(ИспользоватьДатуИВремяВСрокахЗадач,"ДФ='дд.ММ.гг ЧЧ:мм'","ДФ='дд.ММ.гг'")) + Символы.ПС);
		ТекстПричиныПереноса = СтрЗаменить(ТекстПричиныПереноса, "%Причина%", Результат.Причина);
		
		Объект.РезультатВыполнения = Объект.РезультатВыполнения + Символы.ПС + ТекстПричиныПереноса;
		
		Попытка
			Записать();
			
			ОтправитьЗапросНаПереносСрокаИсполнения(ТекстПричиныПереноса);
			СформироватьНадписьЗапросаНаИзменениеСрокаИсполнения();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопИнфо(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.БизнесПроцесс, "КартаМаршрута") = ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение") Тогда
		ПараметрыФормы = Новый Структура("Ключ", Объект.БизнесПроцесс);
		ИмяФормыБП = "БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения";
		ЭтоПоручение = Истина;
	Иначе
		ПараметрыФормы = ПодготовитьСтруктуруДанных();
		ИмяФормыБП = "БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаРеквизитовНезависимогоПроцесса";
		ЭтоПоручение = Ложь;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытиеДопФормыЗавершение", ЭтотОбъект, Новый Структура("ЭтоПоручение", ЭтоПоручение));
	ОткрытьФорму(ИмяФормыБП, ПараметрыФормы,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачаПеренаправитьЗавершение", ЭтотОбъект);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачаПеренаправить",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПеренаправитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Объект.Ссылка);
		
		ПричинаПеренаправления = Результат.ПричинаПеренаправления;
		Если НЕ ЗначениеЗаполнено(ПричинаПеренаправления) Тогда
			ПричинаПеренаправления = НСтр("ru = 'Без указания причины.'")
		КонецЕсли;
		
		ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ВернутьДату());
		
		//Объект.CRM_ПоследнееДействиеСтрокой = Формат(ВернутьДату(), "ДФ='d MMMM yyyy'; ДЛФ=DD") + ", " + Формат(ВернутьДату(), "ДФ=HH.mm; ДЛФ=T") + " " +НСтр("ru = 'Перенаправлена -> '") + Строка(?(Результат.Исполнитель = Неопределено,Результат.Роль,Результат.Исполнитель));
		Объект.CRM_ПоследнееДействиеСтрокой = ДатаСтрокой + " " +НСтр("ru = 'Перенаправлена -> '") + Строка(?(Результат.Исполнитель = Неопределено,Результат.Роль,Результат.Исполнитель));
		
		Объект.РезультатВыполнения = "
		//|"+ Формат(ВернутьДату(), "ДФ='d MMMM yyyy'; ДЛФ=DD") + ", " + Формат(ВернутьДату(), "ДФ=HH.mm; ДЛФ=T") + " " +НСтр("ru = 'Перенаправлена -> '") + Строка(?(Результат.Исполнитель = Неопределено,Результат.Роль,Результат.Исполнитель)) + "
		|"+ ДатаСтрокой + " " +НСтр("ru = 'Перенаправлена -> '") + Строка(?(Результат.Исполнитель = Неопределено,Результат.Роль,Результат.Исполнитель)) + "
		|"+ПричинаПеренаправления + "
		|
		|" + Объект.РезультатВыполнения;
		Записать();
		
		CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренаправитьЗадачи(МассивЗадач,?(Результат.Исполнитель = Неопределено,Результат.Роль,Результат.Исполнитель), Ложь,);
		
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	Если НЕ Объект.ПринятаКИсполнению Тогда
		
		Если УсловияВыполнены = 3 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выполнены все условия для принятия задачи к исполнению!'"));
			Возврат;
		КонецЕсли;
		
		CRM_БизнесПроцессыИЗадачиКлиент.ПринятьЗадачуКИсполнению(ЭтотОбъект, ТекущийПользователь);
		ПринятьКИсполнениюЗавершение(Неопределено, Неопределено);
		
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПринятьКИсполнениюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Задача уже принята к исполнению. Отменить?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнениюЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		CRM_БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачиКИсполнению(ЭтотОбъект);
	КонецЕсли;
	
	СтрТекстHTMLЗадачи		= "";
	СтрТекстHTMLЗадачи		= ПолучитьТекстHTMLЗадачи(Объект.Ссылка,УникальныйИдентификатор);
	
	//Элементы.ГруппаКомнды.ТекущаяСтраница = ?(Объект.ПринятаКИсполнению,Элементы.ГруппаВыполнить,Элементы.ГруппаПринять);
	
	ДоступностьЭлементов();
	
	УсловияВыполнены = CRM_БизнесПроцессыСервер.ПолучитьУсловиеЭтапаПроверитьПрименимость(Объект.Ссылка, Объект.ПринятаКИсполнению);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ОтправитьEmailКлиент".
//
Процедура ОтправитьEmailКлиент(Команда)
	
	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ОтправитьСМСКЛ".
//
Процедура ОтправитьСМСКЛ(Команда)
	
	Партнер			= ВернутьПартнера(Объект.БизнесПроцесс);
	КонтактноеЛицо	= ВернутьКонтактноеЛицо(Объект.БизнесПроцесс);
	
	Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) И НЕ ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска	= Новый Структура;
	СтруктураПоиска.Вставить("Партнер",			Партнер); 
	СтруктураПоиска.Вставить("КонтактноеЛицо",	КонтактноеЛицо); 
	СписокТелефонов	= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	Если СписокТелефонов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона'"));
		Возврат;
	ИначеЕсли НЕ ОтправкаSMSЧерезSMS4B.ИспользоватьSMS4B() Тогда
		CRM_ОбщегоНазначенияКлиент.ОткрытьФормуОшибкиПодключения("СМС");
		Возврат;
	ИначеЕсли НЕ ОтправкаSMSЧерезSMS4B.НастройкаОтправкиSMSВыполнена() Тогда
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОткрытияФормыНастроек", ЭтотОбъект);
		ПоказатьВопрос(ОП, "Отправка SMS невозможна так как не установлены параметры подключения.
		|Открыть форму настроек?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	Если СписокТелефонов.Количество() = 1 Тогда
		ОтправитьСМСКЛЗавершение(СписокТелефонов[0].Значение, КонтактноеЛицо);
	Иначе	
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьСМСКЛЗавершение", ЭтотОбъект, КонтактноеЛицо);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокТелефонов, Элементы.ОтправитьСМСКЛ);
	КонецЕсли;
КонецПроцедуры // ОтправитьСМСКЛ()

&НаКлиенте
Процедура ОтправитьСМСКЛЗавершение(Телефон, КонтактноеЛицо) Экспорт
	
	Если Телефон = Неопределено Тогда Возврат; КонецЕсли;
	
	Структура = Новый Структура();
	Структура.Вставить("Ссылка", Телефон.Значение.Объект);
	Структура.Вставить("Телефон",	ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Телефон.Значение.НомерТелефона));
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", Структура);
	ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры // ОтправитьСМСКЛ()

&НаКлиенте
// Процедура - обработчик команды формы "ПозвонитьКЛ".
//
Процедура Позвонить(Команда)
	
	#Если Вебклиент Тогда
		Состояние(Нстр("ru = 'Работа СофтФона невозможна в web-клиенте!'"));
	#Иначе
		Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
			Возврат;
		КонецЕсли;	
		СписокОбъектов = ПолучитьСписокУчастников();
		Если СписокОбъектов.Количество() > 0 Тогда
			сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, Новый Структура("Основание", Объект.Ссылка));
		КонецЕсли;	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ЗапланироватьМероприятие".
//
Процедура ЗапланироватьМероприятие(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
	ДанныеВзаимодействия = Новый Структура;
	ДанныеВзаимодействия.Вставить("Описание", Объект.Описание);
	ДанныеВзаимодействия.Вставить("Автор", ТекущийПользователь);
	ДанныеВзаимодействия.Вставить("Дата", Объект.СрокИсполнения);
	Если ЗначениеЗаполнено(Объект.CRM_Партнер) Тогда
		ДанныеВзаимодействия.Вставить("Партнер", Объект.CRM_Партнер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.CRM_КонтактноеЛицо) Тогда
		ДанныеВзаимодействия.Вставить("КонтактноеЛицо", Объект.CRM_КонтактноеЛицо);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ДанныеВзаимодействия", ДанныеВзаимодействия);
	ОткрытьФорму("Документ.CRM_Мероприятие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуБезУсловия(Команда)
	
	Если УсловияВыполнены = 3 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выполнены все условия для выполнения задачи!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.CRM_ВариантВыполнения = ВариантВыполнения Тогда
		Объект.CRM_ВариантВыполнения		= ВариантВыполнения;
		Объект.CRM_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(Объект.CRM_ТочкаМаршрута, ВариантВыполнения, НомерВерсииКартыМаршрута);
	КонецЕсли;
	
	Отказ = Ложь; // VOG Солодов В.В. 07.04.2020 CRM-468
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		// ++ VOG Солодов В.В. 07.04.2020 CRM-468
		ОчиститьСообщения();
		Отказ = Не Записать();
		// До изменения
		//Записать();
		// -- VOG Солодов В.В. 07.04.2020
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 07.04.2020 CRM-468
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// -- VOG Солодов В.В. 07.04.2020
	
	СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(Объект.Ссылка);
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВыполнитьЗадачуБезУсловияЗавершение", ЭтотОбъект);
	Если СписокТочекМаршрута.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута", Объект.БизнесПроцесс, СписокТочекМаршрута);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗадачуПродолжение", ЭтотОбъект, ОписаниеОповещенияЗавершение);
		ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	ВыполнитьЗадачуПродолжение(Истина, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуБезУсловияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат.ЗавершенДосрочно = Ложь;
		Результат.Вставить("Задача"					,Объект.Ссылка);
		Результат.Вставить("ЭтапДосрочногоЗавершения"	,ПредопределенноеЗначение("Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка"));
		CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(Результат);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Задача, ПредставлениеВариантаВыполнения, ОтложитьНаДату", Объект.Ссылка, Объект.CRM_ВариантВыполненияСтрокой, ОтложитьНаДату);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводРезультатаВыполненияПродолжение", ЭтотОбъект);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиРезультатВыполнения", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеЗадачиПоУсловию(Кнопка)
	
	Если УсловияВыполнены = 3 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выполнены все условия для выполнения задачи!'"));
		Возврат;
	КонецЕсли;
	
	ВариантПоКнопке = СтрЗаменить(Кнопка.Имя, "Команда_", "");
	Объект.CRM_ВариантВыполнения		= Число(ВариантПоКнопке);
	Объект.CRM_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(Объект.CRM_ТочкаМаршрута, Число(ВариантПоКнопке), НомерВерсииКартыМаршрута);
	
	Отказ = Ложь; // VOG Солодов В.В. 07.04.2020 CRM-468
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		// ++ VOG Солодов В.В. 07.04.2020 CRM-468
		ОчиститьСообщения();
		Отказ = Не Записать();
		// До изменения
		//Записать();
		// -- VOG Солодов В.В. 07.04.2020
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 07.04.2020 CRM-468
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// -- VOG Солодов В.В. 07.04.2020
	
	СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(Объект.Ссылка);
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВыполнениеЗадачиПоУсловиюЗавершение", ЭтотОбъект);
	
	Если СписокТочекМаршрута.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута", Объект.БизнесПроцесс, СписокТочекМаршрута);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗадачуПродолжение", ЭтотОбъект, ОписаниеОповещенияЗавершение);
		ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	ВыполнитьЗадачуПродолжение(Истина, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуПродолжение(Результат, ОписаниеОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокОбязательныхТипов.Количество() > 0 Тогда
		МассивОшибок = CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(Объект.Ссылка, СписокОбязательныхТипов);
		Если МассивОшибок.Количество() > 0 Тогда
			Для Индекс = 0 По МассивОшибок.ВГраница() Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивОшибок[Индекс]);
			КонецЦикла;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Если бизнес-процесс далее завершается неудачно, то возможно надо указать причину.
	Если CRM_БизнесПроцессыСервер.ПриведетКНеудачномуЗавершению(Объект.БизнесПроцесс, Объект.CRM_ТочкаМаршрута, Объект.CRM_ВариантВыполнения) Тогда
		
		ФормаДосрочногоЗавершения = ПолучитьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения",,ЭтотОбъект);
		ФормаДосрочногоЗавершения.Заголовок = НСтр("ru = 'Неудачное завершение бизнес-процесса'");
		ФормаДосрочногоЗавершения.Элементы.ПричинаНеудачногоЗавершения.Заголовок = НСтр("ru = 'Причина неудачного завершения'");
		ФормаДосрочногоЗавершения.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаДосрочногоЗавершения.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаДосрочногоЗавершения.Открыть();
		Возврат;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнениеЗадачиПоУсловиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат.ЗавершенДосрочно = Ложь;
		Результат.Вставить("Задача"					,Объект.Ссылка);
		Результат.Вставить("ЭтапДосрочногоЗавершения"	,ПредопределенноеЗначение("Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка"));
		CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(Результат);
	КонецЕсли;
	
	ПродолжитьВыполнение = Истина;
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		
		ТекстОшибки = "";
		//Проверим не работате ли кто-то с ведущей задачей если она есть
		Результат = CRM_БизнесПроцессыИЗадачиВызовСервера.ЗаблокироватьДанныеДляРедактированияВедущейЗадачи(Объект.БизнесПроцесс, ПродолжитьВыполнение);
		Если НЕ ПродолжитьВыполнение Тогда
			ТекстПредупреждения = НСтр("ru = 'Невозможно выполнить, так как задача: '") + Результат.ПредставлениеЗадачи + НСтр("ru = ' редактируется '") + Результат.ТекстОшибки;
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
	Если ПродолжитьВыполнение Тогда
		
		ПараметрыФормы = Новый Структура("Задача, ПредставлениеВариантаВыполнения, ОтложитьНаДату", Объект.Ссылка, Объект.CRM_ВариантВыполненияСтрокой, ОтложитьНаДату);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводРезультатаВыполненияПродолжение", ЭтотОбъект);
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиРезультатВыполнения", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнениеЗадачиПоУсловию()

&НаКлиенте
Процедура ВводРезультатаВыполненияПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено И НЕ Результат.Отказ Тогда
		//Если НЕ ПустаяСтрока(Результат.РезультатВыполнения) Тогда
		//	Объект.РезультатВыполнения = Объект.РезультатВыполнения + "
		//	|
		//	|"+ Результат.РезультатВыполнения;
		//КонецЕсли;
		
		ОтложитьНаДату = Результат.ОтложитьНаДату;
		Объект.ДатаИсполнения = Результат.ДатаИсполнения;
		ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(Объект.ДатаИсполнения);
		
		//Объект.CRM_ПоследнееДействиеСтрокой = Формат(ВернутьДату(), "ДФ='d MMMM yyyy'; ДЛФ=DD") + ", " + Формат(ВернутьДату(), "ДФ=HH.mm; ДЛФ=T")+" "+НСтр("ru = 'Выполнена -> '") + Строка(Объект.Исполнитель);
		Объект.CRM_ПоследнееДействиеСтрокой = ДатаСтрокой+" "+НСтр("ru = 'Выполнена -> '") + Строка(Объект.Исполнитель);
		
		// ++ VOG Солодов В.В. 07.05.2020 CRM-601
		ТекущийРезультатВыполнения = Объект.РезультатВыполнения;
		// -- VOG Солодов В.В. 07.05.2020
		
		Объект.РезультатВыполнения = "
		//|"+Формат(ВернутьДату(), "ДФ='d MMMM yyyy'; ДЛФ=DD") + ", " + Формат(ВернутьДату(), "ДФ=HH.mm; ДЛФ=T")+" "+НСтр("ru = 'Выполнена -> '") + Строка(Объект.Исполнитель)+"
		|"+ДатаСтрокой+" "+НСтр("ru = 'Выполнена -> '") + Строка(Объект.Исполнитель)+"
		|"+?(НЕ ПустаяСтрока(Результат.РезультатВыполнения),Результат.РезультатВыполнения,"")+"
		|
		|" +  Объект.РезультатВыполнения;
		
		// ++ VOG Солодов В.В. 30.04.2020 CRM-601
		// До изменения
		//Записать();
		// -- VOG Солодов В.В. 30.04.2020
		
		// ++ VOG Солодов В.В. 01.04.2020 CRM-468
		Отказ = Ложь;
		Если Не CRM_БизнесПроцессыСервер.ПриведетКНеудачномуЗавершению(Объект.БизнесПроцесс, Объект.CRM_ТочкаМаршрута, Объект.CRM_ВариантВыполнения) Тогда
			
			ЗаписатьРеквизитыПоТочкеМаршрута(Отказ);
			
			Если Отказ Тогда
				Объект.РезультатВыполнения = ТекущийРезультатВыполнения;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		// -- VOG Солодов В.В. 01.04.2020
		
		// ++ VOG Солодов В.В. 30.04.2020 CRM-601
		Записать();
		// -- VOG Солодов В.В. 30.04.2020
		
		МассивВзаимодействий = новый Массив;
		Для Каждого СтрокаВзаимодействия ИЗ Взаимодействия Цикл
			Если СтрокаВзаимодействия.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано")
				ИЛИ СтрокаВзаимодействия.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.ВРаботе") Тогда
				МассивВзаимодействий.Добавить(СтрокаВзаимодействия.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивВзаимодействий.Количество() > 0 Тогда
			
			Дополнительно = Новый Структура("Взаимодействия", МассивВзаимодействий);
			
			ОповещениеОбработкиАктивныхВзаимодействий = Новый ОписаниеОповещения("ОбработкаЗакрытияАктивныхВзаимодействийПоЗадаче", ЭтотОбъект, Дополнительно);
			ТекстВопроса = "Завершить все активные взаимодействия по данной задаче?";
			ПоказатьВопрос(ОповещениеОбработкиАктивныхВзаимодействий, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ОбработкаЗакрытияАктивныхВзаимодействийПоЗадаче(Неопределено, Неопределено);
		КонецЕсли;
		
		//CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Объект.Ссылка,,?(ЗначениеЗаполнено(ОтложитьНаДату),ОтложитьНаДату,Неопределено));
		//
		//// Если был отправлен запрос на перенос срока исполнения,
		//// то надо автоматически завершить задачу по запросу. т.к. она стала  неактуальной.
		//Если ЗначениеЗаполнено(Объект.CRM_ПеренестиСрокИсполненияНа) Тогда
		//	CRM_БизнесПроцессыСервер.ПолучитьЗадачиПоЗапросуВыполнить(Объект.Ссылка);
		//Конецесли;
		//
		//ПоказатьОповещениеПользователя(
		//НСтр("ru = 'Задача выполнена'"),
		//ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		//Строка(Объект.Ссылка));
		//
		//Оповестить("ЗадачаВыполнена", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Объект.Ссылка, Параметры.ОбновлятьКалендарь));
		//
		//Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
		//
		//СписокНеСтартованныхБП = CRM_БизнесПроцессыСервер.ПолучитьРезультатВыполнения(Объект.Ссылка);
		//
		//Для Каждого ЭлементСписка Из СписокНеСтартованныхБП Цикл
		//	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта", 
		//	Новый Структура("Ключ", ЭлементСписка.Значение));
		//КонецЦикла;
		//
		//Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияАктивныхВзаимодействийПоЗадаче(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		CRM_БизнесПроцессыИЗадачиСервер.ЗавершитьВзавимодействияПоЗадаче(ДополнительныеПараметры.Взаимодействия);
	КонецЕсли;
	
	CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Объект.Ссылка,,?(ЗначениеЗаполнено(ОтложитьНаДату),ОтложитьНаДату,Неопределено));
	
	// Если был отправлен запрос на перенос срока исполнения,
	// то надо автоматически завершить задачу по запросу. т.к. она стала  неактуальной.
	Если ЗначениеЗаполнено(Объект.CRM_ПеренестиСрокИсполненияНа) Тогда
		CRM_БизнесПроцессыСервер.ПолучитьЗадачиПоЗапросуВыполнить(Объект.Ссылка);
	Конецесли;
	
	ПоказатьОповещениеПользователя(
	НСтр("ru = 'Задача выполнена'"),
	ПолучитьНавигационнуюСсылку(Объект.Ссылка),
	Строка(Объект.Ссылка));
	
	Оповестить("ЗадачаВыполнена", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Объект.Ссылка, Параметры.ОбновлятьКалендарь));
	
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	
	СписокНеСтартованныхБП = CRM_БизнесПроцессыСервер.ПолучитьРезультатВыполнения(Объект.Ссылка);
	
	Для Каждого ЭлементСписка Из СписокНеСтартованныхБП Цикл
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта", 
		Новый Структура("Ключ", ЭлементСписка.Значение));
	КонецЦикла;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура _СкрытьОбъекты(Команда)
	
	Элементы.ОбъектыПоБизнесПроцессам.Видимость			= Ложь;
	Элементы.ГруппаПанельГиперссылок.Видимость			= Ложь;
	Элементы._СкрытьОбъекты.Видимость					= Ложь;
	Элементы._ПоказатьОбъекты.Видимость					= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура _ПоказатьОбъекты(Команда)
	
	Элементы.ОбъектыПоБизнесПроцессам.Видимость			= Истина;
	Элементы.ГруппаПанельГиперссылок.Видимость			= Истина;
	Элементы._СкрытьОбъекты.Видимость					= Истина;
	Элементы._ПоказатьОбъекты.Видимость					= Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКомментарий(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачаКомментарийЗавершение", ЭтотОбъект);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиКомментарий",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаКомментарийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено И НЕ ПустаяСтрока(Результат.Коментарий) Тогда
		
		ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ВернутьДату());
		
		ПоследнееДействиеСтрокой = ДатаСтрокой+" "+НСтр("ru = '-> '") + Строка(ТекущийПользователь);
		
		Если ПоследнееДействиеСтрокой = Объект.CRM_ПоследнееДействиеСтрокой Тогда
			СтрокаДляЗамены = ПоследнееДействиеСтрокой + Символы.ПС + Результат.Коментарий + Символы.ПС;
			Объект.РезультатВыполнения = СтрЗаменить(Объект.РезультатВыполнения,ПоследнееДействиеСтрокой + Символы.ПС,СтрокаДляЗамены);
		Иначе
			Объект.CRM_ПоследнееДействиеСтрокой = ПоследнееДействиеСтрокой;
			
			Объект.РезультатВыполнения = ПоследнееДействиеСтрокой + Символы.ПС + Результат.Коментарий + ?(ПустаяСтрока(Объект.РезультатВыполнения),"",Символы.ПС) + "
			|"+Объект.РезультатВыполнения;
		КонецЕсли;
		
		//Объект.РезультатВыполнения = Результат.Коментарий + "
		//|"+Объект.РезультатВыполнения;
		
		Записать();
		
		СтрТекстHTMLЗадачи		= "";
		СтрТекстHTMLЗадачи		= ПолучитьТекстHTMLЗадачи(Объект.Ссылка,УникальныйИдентификатор);
		
		//Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура _СкрытьВзаимодействия(Команда)
	Элементы.Взаимодействия.Видимость			= Ложь;
	Элементы.ВзаимодействияКнопкаДобавить.Видимость = Ложь;
	Элементы.ВзаимодействияКнопкаУдалить.Видимость = Ложь;
	Элементы._СкрытьВзаимодействия.Видимость					= Ложь;
	Элементы._ПоказатьВзаимодействия.Видимость					= Истина;
КонецПроцедуры

&НаКлиенте
Процедура _ПоказатьВзаимодействия(Команда)
	Элементы.Взаимодействия.Видимость			= Истина;
	Элементы.ВзаимодействияКнопкаДобавить.Видимость = Истина;
	Элементы.ВзаимодействияКнопкаУдалить.Видимость = Истина;
	Элементы._СкрытьВзаимодействия.Видимость					= Истина;
	Элементы._ПоказатьВзаимодействия.Видимость					= Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать();
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьСтилиCSSМеню()
	//
	//ДвоичныеДанныеКартинки = БиблиотекаКартинок.CRM_Минус.ПолучитьДвоичныеДанные();
	//Base64ДанныеКартинки = Base64Строка(ДвоичныеДанныеКартинки);
	//КартинкаМинус = "data:image/" + БиблиотекаКартинок.CRM_Минус.Формат() + ";base64," + Base64ДанныеКартинки;
	//
	//ДвоичныеДанныеКартинки = БиблиотекаКартинок.CRM_Плюс.ПолучитьДвоичныеДанные();
	//Base64ДанныеКартинки = Base64Строка(ДвоичныеДанныеКартинки);
	//КартинкаПлюс = "data:image/" + БиблиотекаКартинок.CRM_Плюс.Формат() + ";base64," + Base64ДанныеКартинки;
	
	сСтили		= "
	|<STYLE>
	|BODY, TABLE {
	|	FONT-SIZE: 9.5pt; 
	|	FONT-FAMILY: Helvetica, Geneva, Arial, sans-serif;
	|}
	|a:link {
	|	COLOR: #3366FF;
	|	text-decoration: none;
	|}
	|a:visited {
	|	COLOR: #3366FF;
	|	text-decoration: none;
	|}
	|td.title {
	|	vertical-align: top;
	|}
	|.title_header {
	|	FONT-SIZE: 9.5pt; 
	|	FONT-WEIGHT: normal; 
	|	COLOR: #5D5D5D;
	|}
	|}
	|.title_header_1 {
	|	FONT-SIZE: 9.5pt; 
	|	FONT-WEIGHT: bolder; 
	|	COLOR: #5D5D5D;
	|}
	|.title_text {
	|	FONT-SIZE: 9.5pt; 
	|	FONT-WEIGHT: bolder; 
	|	COLOR: #000000; 
	|}
	|td.title_theme {
	|	PADDING-TOP: 5px;
	|	PADDING-BOTTOM: 5px; 
	|	PADDING-LEFT: 0px; 
	|	PADDING-RIGHT: 0px;
	|	BORDER-TOP: #c9c9c9 1px solid;
	|	BORDER-BOTTOM: #c9c9c9 1px solid;
	|}	
	|td.title_theme_alert {
	|	PADDING-TOP: 3px;
	|	PADDING-BOTTOM: 0px; 
	|	PADDING-LEFT: 15px; 
	|	PADDING-RIGHT: 0px;
	|	BORDER-TOP: #c9c9c9 1px solid;
	|	BORDER-BOTTOM: #c9c9c9 1px solid;
	|}	
	|span.title_theme_txt_1 {
	|	FONT-SIZE: 11pt; 
	|	FONT-WEIGHT: bolder; 
	|	COLOR: #000000; 
	|}	
	|span.title_theme_txt_2 {
	|	FONT-SIZE: 9.5pt; 
	|	FONT-WEIGHT: normal; 
	|	COLOR: #5D5D5D; 
	|}	
	|a.title_theme_txt_2:link, a.title_theme_txt_2:visited {
	|	FONT-SIZE: 9.5pt; 
	|	FONT-WEIGHT: normal; 
	|	COLOR: #3366FF; 
	|}	
	|.file_list {
	|	margin-left: 15px;}	
	|td.icon {
	|	PADDING-TOP: 7px; 
	|	PADDING-BOTTOM: 7px; 
	|	PADDING-LEFT: 0px; 
	|	PADDING-RIGHT: 15px
	|}
	|td.menu_header {
	|	PADDING-TOP: 0px; 
	|	PADDING-BOTTOM: 0px; 
	|	PADDING-LEFT: 0px; 
	|	PADDING-RIGHT: 15px;
	|	BORDER-TOP: #c9c9c9 1px solid;
	|}
	|td.menu_header_last {
	|	PADDING-TOP: 0px; 
	|	PADDING-BOTTOM: 0px; 
	|	PADDING-LEFT: 0px; 
	|	PADDING-RIGHT: 15px;
	|	BORDER-TOP: #c9c9c9 1px solid;
	|	BORDER-BOTTOM: #c9c9c9 1px solid;
	|}
	|td.menu_text {
	|	PADDING-TOP: 0px; 
	|	PADDING-BOTTOM: 5px; 
	|	PADDING-LEFT: 0px; 
	|	PADDING-RIGHT: 15px;
	|}
	|span.menu_header_txt_1 {
	|	FONT-SIZE: 10pt; 
	|	FONT-WEIGHT: bolder; 
	|	COLOR: #000000; 
	|}
	|span.menu_header_txt_2 {
	|	FONT-SIZE: 9pt; 
	|	FONT-WEIGHT: normal; 
	|	COLOR: #5D5D5D;
	|}
	|a.menu_header_txt_1, a.menu_header_txt_1:visited {
	|	COLOR: #000000;
	|}	
	|a.menu_header_txt_2, a.menu_header_txt_2:visited {
	|	COLOR: #5D5D5D;
	|}
	
	|td.file_list {
	|	PADDING-TOP: 0px; 
	|	PADDING-BOTTOM: 5px; 
	|	PADDING-LEFT: 0px; 
	|	PADDING-RIGHT: 15px;
	|}
	|</STYLE>
	|
	|<STYLE type=text/css>
	|
	|.CommentContainer {
	|	padding: 0;
	|	margin: 0;
	|}
	|
	|.CommentContainer li {
	|	list-style-type: none;
	|}
	|
	|.Node {
	|	background-image : url('');
	|	background-position : top left;
	|	background-repeat : repeat-y;
	|	zoom: 1;
	|}
	|
	|.IsRoot {
	|	margin-left: 0;
	|}
	|.ExpandOpen .Expand {
	//|	background-image: url('"+КартинкаМинус+"');
	|}
	|
	|.ExpandClosed .Expand {
	//|	background-image: url('"+КартинкаПлюс+"');
	|	background-repeat : no-repeat;
	|}
	|
	|.ExpandLeaf .Expand {
	|	background-image: url('');
	|}
	|
	|.Content {
	|min-height: 18px;
	|margin-left:18px;
	|}
	|
	|* html .Content {
	|height: 18px;
	|}
	|
	|.Expand {
	|	width: 18px;
	|	height: 18px;
	|	float: left;
	//|	FONT-SIZE: 9.5pt;
	|	FONT-SIZE: 10.5pt;
	|	FONT-WEIGHT: bolder; 
	|}
	|
	|.ExpandOpen .CommentContainer {
	|   display: block;
	|}
	|
	|.ExpandClosed .CommentContainer {
	|   display: none;
	|}
	|
	|.ExpandOpen .Expand, .ExpandClosed .Expand {
	|   cursor: pointer;
	|}
	|
	|.ExpandLeaf .Expand {
	|	cursor: auto;
	|}
	|
	|</STYLE>";
	
	Возврат сСтили;
	
КонецФункции // ПолучитьСтилиCSSМеню()

&НаСервереБезКонтекста
Функция _GetHTMLLinkText(sLabel, sLink, sClass="")
	
	sText	= "";
	sText 	= "<a href="""+sLink+""""
	+ ?(IsBlankString(sClass),""," class="""+sClass+"""")
	+ ">" + sLabel + "</a>";
	
	Возврат sText;
	
КонецФункции  // _GetHTMLLinkText()

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеДаты(ДатаИстории,Простое=Ложь)
	
	сДата		= "";
	СтрокаЯзык  = ТекущийКодЛокализации();
	Язык2Символа = Лев(СтрокаЯзык,2);
	
	Если ТипЗнч(ДатаИстории)<>Тип("Дата") Тогда
		
		Возврат ДатаИстории;	
		
	КонецЕсли; 
	
	сДата			= "";
	Если Простое=Истина Тогда
		
		сДата		= Формат(ДатаИстории, "Л="+СтрокаЯзык+"; ДЛФ=DT");
		
	Иначе
		
		сДата		= Формат(ДатаИстории, "Л="+СтрокаЯзык+"; ДЛФ=DDT");
		
	КонецЕсли; 
	
	сВремяПолное  = Формат(ДатаИстории, "Л="+СтрокаЯзык+"; ДЛФ=T");
	сВремяКраткое = сВремяПолное;
	
	//Поставим запятую перед временем
	ПозицияВремени = СтрНайти(сДата, сВремяПолное);
	Если ПозицияВремени > 9 И Сред(сДата, ПозицияВремени-1, 1) = " " Тогда //1/1/0001
		СимволРазделителя = ",";
		Если Язык2Символа="ru" И Простое Тогда
			СимволРазделителя = "г.,";
		КонецЕсли;
		сДата = Лев(сДата, ПозицияВремени-2) + СимволРазделителя  + Сред(сДата, ПозицияВремени-1);
	Иначе
		//На довольном редком языке Урду получается такая дата: 19, مئ 2016 2:28:28 PM
		//На нём запятая ставится неправильно, т.к. Сред(сДата,13) = "2:28:28 PM". Откуда это?
	КонецЕсли;
	
	//Уберем у времени символы секунд.
	//Это не просто, т.к. могут быть разные разделители и разное начертание цифр
	СимволРазделителя = ":";
	Если Язык2Символа="mr" Тогда
		СимволРазделителя = "-";
	ИначеЕсли Язык2Символа="be" ИЛИ Язык2Символа="da" ИЛИ Язык2Символа="fi" ИЛИ Язык2Символа="sq"
		ИЛИ (Язык2Символа="sr" И НЕ СтрокаЯзык="sr_BA" И НЕ СтрокаЯзык="sr_Cyrl_BA") Тогда
		СимволРазделителя = ".";
	КонецЕсли;
	
	Если Язык2Символа="et" Тогда
		
		//В эстонском два разделителя 12:16.49
		//Просто найдём первую точку
		Позиция2Разделителя = СтрНайти(сВремяПолное, ".",,, 1);
		
	Иначе
		
		ПозицияПробела = СтрНайти(сВремяПолное, " ");
		Если ПозицияПробела = 0 Тогда
			
			Позиция2Разделителя = СтрНайти(сВремяПолное, СимволРазделителя,,, 2);
			
		Иначе
			
			//Выделим только время, т.к. в формате DT слова внутри времени могут иметь другой порядок
			сВремяЛев = Лев(сВремяПолное, ПозицияПробела-1);
			сВремяПрав = Сред(сВремяПолное, ПозицияПробела+1);
			
			Позиция2Разделителя = СтрНайти(сВремяЛев, СимволРазделителя,,, 2);
			Если Позиция2Разделителя > 0 Тогда
				
				сВремяКраткое = сВремяЛев;
				
			Иначе
				
				Позиция2Разделителя = СтрНайти(сВремяПрав, СимволРазделителя,,, 2);
				Если Позиция2Разделителя > 0 Тогда
					
					сВремяКраткое = сВремяПрав;
					Позиция2Разделителя = Позиция2Разделителя + СтрДлина(сВремяЛев) + 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Позиция2Разделителя > 0 Тогда
		сВремяКраткое = Лев(сВремяПолное, Позиция2Разделителя-1) + Сред(сВремяПолное, Позиция2Разделителя+3);
	КонецЕсли;
	
	сДата = СтрЗаменить(сДата, сВремяПолное, сВремяКраткое);
	
	Возврат сДата;
	
КонецФункции // ПолучитьПредставлениеДаты()

&НаСервереБезКонтекста
Функция ПолучитьТекстHTMLДляСсылки(СтрНадпись, Адрес, Класс="")
	
	СтрТекст	= "";
	СтрТекст 	= "<a href='"+Адрес+"'"
	+ ?(ПустаяСтрока(Класс),"","class='"+Класс+"'")
	+ ">" + СтрНадпись + "</a>";
	
	Возврат СтрТекст;
	
КонецФункции  // ПолучитьТекстHTMLДляСсылки()

&НаСервереБезКонтекста
Функция ПолучитьHTMLКодДляТекста(сТекст)
	
	
	Если ПустаяСтрока(сТекст) Тогда
		
		Возврат ""; 	
		
	КонецЕсли;
	
	сРезультатТекст= СокрЛП(сТекст);
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"&","&amp;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"<","&lt;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,">","&gt;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"≠","&ne;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"≤","&le;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"≥","&ge;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,Символы.ПС,"<br>");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,Символы.НПП,"&nbsp;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,Символы.Таб,"&nbsp;&nbsp;&nbsp;&nbsp;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"""","&quot;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"«","&laquo;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"»","&raquo;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"'","&#39;");
	
	Возврат сРезультатТекст;
	
КонецФункции // ПолучитьHTMLКодСтроки()

&НаСервереБезКонтекста
Функция ПолучитьТекстHTMLДляСворачиваемогоТекста(ТекстЗаголовка, Текст, Свернута = Ложь, Вложенный = Ложь, ЕстьОтступ = Ложь)
	
	idName = Строка(Новый УникальныйИдентификатор());
	
	Если Вложенный Тогда
		СворачиваемыйТест = "
		|"+ ?(Свернута, "<LI class=""Node ExpandClosed"""+?(ЕстьОтступ,"style=""padding-left: 15px;""","")+">", "<LI class=""Node ExpandOpen"""+?(ЕстьОтступ,"style=""padding-left: 15px;""","")+">") + "
		|	<DIV onclick=""showHide('"+idName+"_sv', '"+idName+"')"" id="+idName+" class=Expand>"+?(Свернута,"+","-")+"</DIV>
		|	<DIV class=Content>
		|		<P>
		|			<span class=""title_header_1"">
		|				"+ ТекстЗаголовка +"
		|			</span>
		|		</P>
		|	</DIV>
		|	<UL class=CommentContainer id="+idName+"_sv style='display:"+ ?(Свернута,"none","block")+";'>
		|		<LI class=""Node ExpandLeaf IsLast"">
		|			<DIV class=Expand>
		|			</DIV>
		|			<DIV class=Content>
		|				"+ Текст +"
		|			</DIV>
		|		</LI>
		|	</UL>
		|</LI>";
	Иначе
		СворачиваемыйТест = "
		|<DIV  class=Content>
		|	<UL class=CommentContainer>
		|		"+ ?(Свернута, "<LI class=""Node ExpandClosed"""+?(ЕстьОтступ,"style=""padding-left: 15px;""","")+">", "<LI class=""Node ExpandOpen"""+?(ЕстьОтступ,"style=""padding-left: 15px;""","")+">") + "
		|			<DIV onclick=""showHide('"+idName+"_sv', '"+idName+"')"" id="+idName+" class=Expand>"+?(Свернута,"+","-")+"</DIV>
		|			<DIV class=Content>
		|				<P>
		|					<span class=""title_header_1"">
		|						"+ ТекстЗаголовка +"
		|					</span>
		|				</P>
		|			</DIV>
		|			<UL class=CommentContainer id="+idName+"_sv style='display:"+ ?(Свернута,"none","block")+";'>
		|				<LI class=""Node ExpandLeaf IsLast"">
		|					<DIV class=Expand>
		|					</DIV>
		|					<DIV class=Content>
		|						"+ Текст +"
		|					</DIV>
		|				</LI>
		|			</UL>
		|		</LI>
		|	</UL>
		|</DIV>";
	КонецЕсли;
	
	Возврат СворачиваемыйТест;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстHTMLЗадачи(ЗадачаСсылка, сGUIDФормы)
	
	сАнимация	= 
	" onmouseout=""this.style.background='#FFFFFF'"""
	+ " onmouseover=""this.style.background='#EEEEEE'""";
	
	сТекст		= "";
	
	сЗаголовок1	= "";
	сСтили		= "";
	сЗаголовок2	= "";
	сШапка		= "";
	сТело		= "";
	сПодвал		= "";
	
	сЗаголовок1	= "
	|<!DOCTYPE html>
	|<HTML>
	|<HEAD>
	|
	|<script type=""text/javascript"">
	|
	|function showHide(element_id, parent_id) {
	|	
	|
	|	if (document.getElementById(element_id)) { 
	|           var obj = document.getElementById(element_id); 
	|	var parentobj = document.getElementById(parent_id);
	|	   
	| 
	|            if (obj.style.display != ""block"") { 
	|              obj.style.display = ""block""; //Показываем элемент
	|	     parentobj.innerHTML = ""-"";
	|              }
	|              else {obj.style.display = ""none""; //Скрываем элемент
	|		parentobj.innerHTML = ""+"";}
	|              }
	|         
	|         }   
	|</script>
	|
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type></META>
	//|<LINK rel=stylesheet type=text/css href=""__STYLE__""></LINK>
	//Compatible = 'IE=Edge' - убираем режим совместимости ИЕ, иначе как минимум будет неправильно определяться размер страницы
	|<meta http-equiv='X-UA-Compatible' content='IE=Edge'>
	|<META name=GENERATOR content=""MSHTML 11.00.9600.17924""></META>
	|<BASE href="""+сGUIDФормы+"""></BASE>";
	
	сСтили		= "";
	сСтили		= ПолучитьСтилиCSSМеню();
	
	бРазрешитьПрокрутку	= Истина;
	
	сЗаголовок2	= "
	|</HEAD>
	//|<BODY"+?(бРазрешитьПрокрутку,"","scroll=no")+" width=""100%"" height=""100%""
	|<BODY style='overflow-x:hidden;' width=""100%"" height=""100%""
	|		leftmargin=""15"" 
	|		rightmargin=""15"" 
	|		topmargin=""15"" 
	|		bottommargin=""15"">";
	
	Если Не ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		
		сПодвал		= "
		|&nbsp;
		|</BODY>
		|</HTML>";	
		
		сТекст		= сЗаголовок1 + сСтили + сЗаголовок2 
		+ сШапка + сТело + сПодвал;
		
		Возврат сТекст;
		
	КонецЕсли; 
	
	// левая колонка
	сАвтор			= "";
	сОтветственный	= "";
	сПодразделение	= "";
	сКлиент			= "";
	сПотенциальныйКлиент= "";
	сКонтакт		= "";
	сИсполнитель	= "";
	сБизнесРегион	= "";
	сВремяПоГривинчу= "";
	
	сАвтор				= Строка(ЗадачаСсылка.БизнесПроцесс.Автор);
	сАвтор				= _GetHTMLLinkText(сАвтор, GetURL(ЗадачаСсылка.БизнесПроцесс.Автор));
	сОтветственный		= Строка(ЗадачаСсылка.БизнесПроцесс.Ответственный);
	сОтветственный		= _GetHTMLLinkText(сОтветственный, GetURL(ЗадачаСсылка.БизнесПроцесс.Ответственный));
	сПодразделение		= Строка(ЗадачаСсылка.БизнесПроцесс.Подразделение);
	сПодразделение		= _GetHTMLLinkText(сПодразделение, GetURL(ЗадачаСсылка.БизнесПроцесс.Подразделение));
	сИсполнитель		= Строка(?(ЗначениеЗаполнено(ЗадачаСсылка.Исполнитель),ЗадачаСсылка.Исполнитель,ЗадачаСсылка.РольИсполнителя));
	сИсполнитель		= _GetHTMLLinkText(сИсполнитель, GetURL(?(ЗначениеЗаполнено(ЗадачаСсылка.Исполнитель),ЗадачаСсылка.Исполнитель,ЗадачаСсылка.РольИсполнителя)));
	
	//++ VOG Иванов С.А. 20.11.2019 ID заявки: 000000899 
	БизнесПроцесс_Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаСсылка, "БизнесПроцесс.Предмет");
	//-- VOG Иванов С.А. 20.11.2019 ID заявки: 000000899 
	
	Если ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.Партнер) Тогда
		сКлиент = Строка(ЗадачаСсылка.БизнесПроцесс.Партнер);
		сКлиент = _GetHTMLLinkText(сКлиент, GetURL(ЗадачаСсылка.БизнесПроцесс.Партнер));
		
		Если ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.Партнер.БизнесРегион) Тогда
			сБизнесРегион = Строка(ЗадачаСсылка.БизнесПроцесс.Партнер.БизнесРегион) + НСтр("ru = ' (GMT '") + ?(ЗадачаСсылка.БизнесПроцесс.Партнер.БизнесРегион.CRM_ВремяПоГринвичу_GMT>0,"+ ","") + Формат(ЗадачаСсылка.БизнесПроцесс.Партнер.БизнесРегион.CRM_ВремяПоГринвичу_GMT,"ЧЦ=2; ЧДЦ=; ЧН=0; ЧО=2")+")";
			сБизнесРегион = _GetHTMLLinkText(сБизнесРегион, GetURL(ЗадачаСсылка.БизнесПроцесс.Партнер.БизнесРегион));
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.ПотенциальныйКлиент) Тогда
		сПотенциальныйКлиент = Строка(ЗадачаСсылка.БизнесПроцесс.ПотенциальныйКлиент);
		сПотенциальныйКлиент = _GetHTMLLinkText(сПотенциальныйКлиент, GetURL(ЗадачаСсылка.БизнесПроцесс.ПотенциальныйКлиент));
		
		// ++ Тищенко В.В.
		//ИначеЕсли ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.вогАнкета) Тогда
		//	
		//	сКлиент = Строка(ЗадачаСсылка.БизнесПроцесс.вогАнкета);
		//	сКлиент = _GetHTMLLinkText(сКлиент, GetURL(ЗадачаСсылка.БизнесПроцесс.вогАнкета));
		
	ИначеЕсли ТипЗнч(БизнесПроцесс_Предмет) = Тип("СправочникСсылка.вогТорговыеТочки") 
		ИЛИ ТипЗнч(БизнесПроцесс_Предмет) = Тип("СправочникСсылка.вогЮридическиеЛица")
		Или ТипЗнч(БизнесПроцесс_Предмет) = Тип("СправочникСсылка.вогРаспределительныеЦентры") Тогда // ++ VOG Солодов В.В. 01.07.2019 task 440
		
		сКлиент = Строка(БизнесПроцесс_Предмет);
		сКлиент = _GetHTMLLinkText(сКлиент, GetURL(БизнесПроцесс_Предмет));
		
		// -- Тищенко В.В.
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.КонтактноеЛицо) Тогда
		сКонтакт = Строка(ЗадачаСсылка.БизнесПроцесс.КонтактноеЛицо);
		сКонтакт = _GetHTMLLinkText(сКонтакт, GetURL(ЗадачаСсылка.БизнесПроцесс.КонтактноеЛицо));
	КонецЕсли;
	
	// правая колонка
	сЗадачаКСрокуДата	= "";
	сЗадачаДата			= "";
	сЗадачаНомер		= "";
	
	сЗадачаКСрокуДата = ПолучитьПредставлениеДаты(ЗадачаСсылка.СрокИсполнения,Истина);
	сЗадачаДата			= ПолучитьПредставлениеДаты(ЗадачаСсылка.Дата,Истина);
	сЗадачаНомер		= СокрЛП(ЗадачаСсылка.Номер);
	
	// заполняем тему, если есть основание
	сТема				= "";
	Если Не ПустаяСтрока(ЗадачаСсылка.Описание) Тогда
		сТема = СокрЛП(ЗадачаСсылка.Наименование);
	Иначе
		//сТема				= ""+СокрЛП(ЗадачаСсылка.Наименование);
		сТема				= ""+СокрЛП(ЗадачаСсылка.CRM_ТочкаМаршрута);
		сТема				= ?(ПустаяСтрока(сТема),"<Не указана тема>",сТема);
	КонецЕсли;
	
	// ++ Тищенко В.В.
	
	Имяобъекта = "Объект";
	
	Если ТипЗнч(БизнесПроцесс_Предмет) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда//И НЕ ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.вогАнкета) Тогда
		Имяобъекта = "Торговая точка";
		сКлиент = Строка(БизнесПроцесс_Предмет);
		сКлиент = _GetHTMLLinkText(сКлиент, GetURL(БизнесПроцесс_Предмет));
	ИначеЕсли ТипЗнч(БизнесПроцесс_Предмет) = Тип("СправочникСсылка.Партнеры") Тогда//И НЕ ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.вогАнкета) Тогда	
		Имяобъекта = "Клиент";
		сКлиент = Строка(БизнесПроцесс_Предмет);
		сКлиент = _GetHTMLLinkText(сКлиент, GetURL(БизнесПроцесс_Предмет));
	ИначеЕсли ТипЗнч(БизнесПроцесс_Предмет) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда//И НЕ ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.вогАнкета) Тогда
		Имяобъекта = "Юр-лицо";
		сКлиент = Строка(БизнесПроцесс_Предмет);
		сКлиент = _GetHTMLLinkText(сКлиент, GetURL(БизнесПроцесс_Предмет));
		// ++ VOG Солодов В.В. 02.07.2019 task 440
	ИначеЕсли ТипЗнч(БизнесПроцесс_Предмет) = Тип("СправочникСсылка.вогРаспределительныеЦентры") Тогда
		//И НЕ ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.вогАнкета) Тогда
		Имяобъекта = "РЦ";
		сКлиент = Строка(БизнесПроцесс_Предмет);
		сКлиент = _GetHTMLLinkText(сКлиент, GetURL(БизнесПроцесс_Предмет));
		//// -- VOG Солодов В.В. 02.07.2019	
		//ИначеЕсли  ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.вогАнкета) Тогда
		//	Имяобъекта = "Анкета";
		//++ VOG Иванов С.А. 19.11.2019 ID заявки: 000000899
	ИначеЕсли ТипЗнч(БизнесПроцесс_Предмет) = Тип("ДокументСсылка.вогАнкета")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс_Предмет, "ВариантОпроса") =
		ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("a6f5621e-d3c1-11e9-b656-005056bc3fe8")) Тогда
		Клиент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс_Предмет, "Респондент");
		Имяобъекта = "Клиент";
		сКлиент = Строка(Клиент);
		сКлиент = _GetHTMLLinkText(сКлиент, GetURL(Клиент));
		//-- VOG Иванов С.А. 19.11.2019 ID заявки: 000000899	
	ИначеЕсли ТипЗнч(БизнесПроцесс_Предмет) = Тип("ДокументСсылка.вогАнкета")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс_Предмет, "ВариантОпроса") =
		ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("a6f5621e-d3c1-11e9-b656-005056bc3fe8")) Тогда
		Клиент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс_Предмет, "Респондент");
		Имяобъекта = "Клиент";
		сКлиент = Строка(Клиент);
		сКлиент = _GetHTMLLinkText(сКлиент, GetURL(Клиент));
		//-- VOG Иванов С.А. 19.11.2019 ID заявки: 000000899
	//++ VOG Ульянов И.В. 12.03.2020 CRM-410
	ИначеЕсли ТипЗнч(БизнесПроцесс_Предмет) = Тип("ДокументСсылка.вогАнкета") Тогда
		Клиент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс_Предмет, "Респондент");
		ИмяОбъекта = "Респондент";
		сКлиент = Строка(Клиент);
		Если сКлиент <> "" тогда // VOG Ульянов И.В. 23.03.2020 CRM-446
			сКлиент = _GetHTMLLinkText(сКлиент, GetURL(Клиент));
		КонецЕсли;	
	//-- VOG Ульянов И.В. 12.03.2020 CRM-410
	// +++ Кулаков П.Л. 25.02.2020
	ИначеЕсли ТипЗнч(БизнесПроцесс_Предмет) = Тип("ДокументСсылка.вогПланПродаж") Тогда
		Имяобъекта = "Документ";
		сКлиент = Строка(БизнесПроцесс_Предмет);
		сКлиент = _GetHTMLLinkText(сКлиент, GetURL(БизнесПроцесс_Предмет));
	// --- Кулаков П.Л.
	ИначеЕсли ТипЗнч(БизнесПроцесс_Предмет) = Тип("ДокументСсылка.вогКомандировка") тогда
		Имяобъекта = "Документ";
		сКлиент = Строка(БизнесПроцесс_Предмет);
		сКлиент = _GetHTMLLinkText(сКлиент, GetURL(БизнесПроцесс_Предмет));
		// +++ VOG Кулаков П.Л. 08.09.2020 CRM-866
		Если БизнесПроцесс_Предмет.НаДоработкуОтГДУК Тогда
			ТекстЗаголовка = ". Возвращено на доработку  ГД УК";
		ИначеЕсли БизнесПроцесс_Предмет.ИзмененБюджет Тогда
			ТекстЗаголовка = ". Изменены расходы";
		ИначеЕсли БизнесПроцесс_Предмет.ИзмененПериод Тогда
			ТекстЗаголовка = ". Изменен период";
		ИначеЕсли БизнесПроцесс_Предмет.ИзмененСоставЗадач Тогда
			ТекстЗаголовка = ". Изменены задачи";
		Иначе
			ТекстЗаголовка = "";
		КонецЕсли;
		
		сТема = сТема + ТекстЗаголовка;
		// --- VOG Кулаков П.Л.
	КонецЕсли;
	
	//++ Бей - помимо предмета выводить анкету, если есть
	сАнкета="";
	Если  ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.вогАнкета) Тогда
		сАнкета = Строка(ЗадачаСсылка.БизнесПроцесс.вогАнкета);
		сАнкета = _GetHTMLLinkText(сАнкета, GetURL(ЗадачаСсылка.БизнесПроцесс.вогАнкета));
	КонецЕсли;
	//--
	
	// -- Тищенко В.В.
	
	// выводим поля шапки
	сШапка	= сШапка + "
	|<TABLE width=""100%"">
	|<TBODY>
	|	<TR>
	|		<TD class=""title"" width=""100%"">
	|			<span class=""title_header"">От кого:</span>&nbsp;
	|			<span class=""title_text"">"+сАвтор+"</span>  
	|		</TD>
	|		<TD  class=""title"" width=""180"" nowrap>
	|			<span class=""title_header"">К сроку:</span>&nbsp;
	|			<span class=""title_text"">"+сЗадачаКСрокуДата+"</span>
	|		</TD>
	|	</TR>
	|	<TR>
	|		<TD class=""title"">
	// ++ Тищенко В.В. 11.01.2019
	//|			<span class=""title_header"">" + ?(сКлиент="",?(сПотенциальныйКлиент="","","Потенциальный клиент:"),"Клиент:") + "</span>&nbsp;
	|			<span class=""title_header"">" + Имяобъекта + "</span>&nbsp;
	// -- Тищенко В.В.
	|			<span class=""title_text"">" + ?(сКлиент="",?(сПотенциальныйКлиент="","", сПотенциальныйКлиент),сКлиент) + "</span>
	|		</TD>
	|		<TD class=""title"" nowrap>
	|			<span class=""title_header"">От:</span>&nbsp;
	|			<span class=""title_text"">"+сЗадачаДата+"</span>
	|		</TD>
	|	</TR>
	//++ Бей - помимо предмета выводить анкету, если есть
	|" + ?(ЗначениеЗаполнено(сАнкета),"
	|	<TR>
	|		<TD class=""title"">
	|			<span class=""title_header"">Анкета</span>&nbsp;
	|			<span class=""title_text"">" + сАнкета + "</span>
	|		</TD>
	|	</TR>","") + "
	//--
	|	<TR>
	|		<TD class=""title"">
	|			<span class=""title_header"">" + ?(сКонтакт="","","Контакт:") + "</span>&nbsp;
	|			<span class=""title_text"">" + ?(сКонтакт="","",сКонтакт) + "</span>
	|		</TD>
	|		<TD class=""title"" nowrap>
	|			<span class=""title_header"">N:</span>&nbsp;
	|			<span class=""title_text"">"+сЗадачаНомер+"</span>
	|		</TD>
	|	</TR>
	|</TBODY>
	|</TABLE>";
	
	Если НЕ ПустаяСтрока(сБизнесРегион) Тогда
		сШапка	= сШапка + "
		|<TABLE width=""100%"">
		|<TBODY>
		|	<TR>
		|		<TD class=""title"">
		|			<span class=""title_header"">Бизнес-регион:</span>&nbsp;
		|			<span class=""title_text"">"+сБизнесРегион+"</span>
		|		</TD>
		|	</TR>
		|</TBODY>
		|</TABLE>";
	КонецЕсли;
	
	//Если Не ЗадачаСсылка.Выполнена Тогда
	сШапка	= сШапка + "
	|<TABLE width=""100%"">
	|<TBODY>
	|	<TR>
	|		<TD class=""title"">
	|			<span class=""title_header"">Исполнение:</span>&nbsp;
	|			<span class=""title_text"">"+сИсполнитель+"</span>
	|		</TD>
	|	</TR>
	|</TBODY>
	|</TABLE>";
	//КонецЕсли; 
	
	сШапка	= сШапка + "
	|<div style=""padding-top: 5px; padding-bottom: 5px;"">
	|<TABLE cellSpacing=""0"" cellPadding=""0"" width=""100%"" border=""0"">
	|<TBODY>
	|	<TR>";
	
	// собственно тема, если есть
	сШапка	= сШапка + "
	//|		<TD class=""title_theme"" width=""100%"">
	|		<TD width=""100%"">
	|			<span class=""title_theme_txt_1"">"+сТема+"</span>
	|		</TD>";
	
	сШапка	= сШапка + "
	|	</TR>
	|</TBODY>
	|</TABLE>
	|</div>";
	
	
	//сНавСсылка	= "";
	//сНавСсылка	= ПолучитьНавигационнуюСсылку(ЗадачаСсылка.БизнесПроцесс);
	//
	//БезГода = (НачалоГода(ТекущаяДатаСеанса()) = НачалоГода(ЗадачаСсылка.БизнесПроцесс.Дата));
	//ПредставлениеБизнесПроцесса = Строка(ЗадачаСсылка.БизнесПроцесс.КартаМаршрута) + " от " + Формат(ЗадачаСсылка.БизнесПроцесс.Дата, ?(БезГода,"ДФ='d MMMM'; ДЛФ=DD","ДФ='d MMMM yyyy'; ДЛФ=DD")) + ", " + Формат(ЗадачаСсылка.БизнесПроцесс.Дата, "ДФ=HH:mm; ДЛФ=T");
	//сНавСсылка	= ПолучитьТекстHTMLДляСсылки(Строка(ПредставлениеБизнесПроцесса), сНавСсылка, "");
	//
	//сОснование	= "";
	//сОснование	= сНавСсылка;// "см.: " + сНавСсылка;
	//
	//сШапка	= сШапка + "
	//|			<div style=""padding-top: 0px; padding-bottom: 0px;"">
	//|				<span class=""title_theme_txt_2"">"+сОснование+"</span>
	//|			</div>";
	
	//сУсловия = "
	//|<TABLE width=""33%"">
	//|<TBODY>
	//|	<TR>
	//|		<TD class=""title"">
	//|			<span class=""title_text"">Важность</span>&nbsp;
	//|		</TD>
	//|		<TD  class=""title"">
	//|			<span class=""title_text"">Равно</span>
	//|		</TD>
	//|		<TD  class=""title"">
	//|			<span class=""title_text"">Высокая</span>
	//|		</TD>
	//|	</TR>
	//|	<TR>
	//|		<TD class=""title"">
	//|			<span class=""title_text"">Клиент</span>&nbsp;
	//|		</TD>
	//|		<TD  class=""title"">
	//|			<span class=""title_text"">Равно</span>
	//|		</TD>
	//|		<TD  class=""title"">
	//|			<span class=""title_text"">Алхимов А.А.</span>
	//|		</TD>
	//|	</TR>
	//|	<TR>
	//|		<TD class=""title"">
	//|			<span class=""title_text"">Бизнес-регион</span>&nbsp;
	//|		</TD>
	//|		<TD  class=""title"">
	//|			<span class=""title_text"">Равно</span>
	//|		</TD>
	//|		<TD  class=""title"">
	//|			<span class=""title_text"">Москва</span>
	//|		</TD>
	//|	</TR>
	//|</TBODY>
	//|</TABLE>";
	//
	//сУсловия = "
	//|<div style=""padding-top: 5px; padding-bottom: 5px;"">
	//|	"+сУсловия+"
	//|</div>";
	//
	//сШапка = сШапка + ПолучитьТекстHTMLДляСворачиваемогоТекста(НСтр("ru = 'Условия этапа:'"), сУсловия, Истина);
	
	сОписаниеЗадачи	= "";
	
	Если Не ПустаяСтрока(ЗадачаСсылка.Описание) Тогда
		сОписаниеЗадачи		= ПолучитьHTMLКодДляТекста(ЗадачаСсылка.Описание);
	КонецЕсли;
	
	// выводим в html описание задачи/результат выполнения
	Если Не ПустаяСтрока(сОписаниеЗадачи) Тогда
		сОписаниеЗадачи = "
		|<div style=""padding-top: 5px; padding-bottom: 5px;"">
		|	"+сОписаниеЗадачи+"
		|</div>";
		
		сШапка = сШапка + ПолучитьТекстHTMLДляСворачиваемогоТекста(НСтр("ru = 'Описание:'"), сОписаниеЗадачи, Ложь)+"<br>";
	КонецЕсли;
	
	сРезультатВыполнения = "";
	Если ЗначениеЗаполнено(ЗадачаСсылка.CRM_НачалоПереадресации) Тогда
		
		МассивЗадач = ПолучитьЦепочкуПереадресаций(ЗадачаСсылка.CRM_НачалоПереадресации, ЗадачаСсылка);
		
		Для Каждого ЗадачаЦепочки ИЗ МассивЗадач Цикл
			Если Не ПустаяСтрока(ЗадачаЦепочки.РезультатВыполнения) Тогда
				
				Если Не ПустаяСтрока(ЗадачаСсылка.CRM_ПоследнееДействиеСтрокой) И ЗадачаЦепочки = ЗадачаСсылка Тогда
					ЗадачаЦепочки_РезультатВыполнения = СтрЗаменить(ЗадачаЦепочки.РезультатВыполнения,ЗадачаСсылка.CRM_ПоследнееДействиеСтрокой,"");
					Если Не ПустаяСтрока(ЗадачаЦепочки_РезультатВыполнения) Тогда
						сРезультатВыполнения = сРезультатВыполнения + "
						|"+ПолучитьHTMLКодДляТекста(ЗадачаЦепочки_РезультатВыполнения);
					КонецЕсли;
				Иначе
					сРезультатВыполнения = сРезультатВыполнения + "
					|"+ПолучитьHTMLКодДляТекста(ЗадачаЦепочки.РезультатВыполнения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Не ПустаяСтрока(ЗадачаСсылка.РезультатВыполнения) Тогда
			Если Не ПустаяСтрока(ЗадачаСсылка.CRM_ПоследнееДействиеСтрокой) Тогда
				ЗадачаЦепочки_РезультатВыполнения = СтрЗаменить(ЗадачаСсылка.РезультатВыполнения,ЗадачаСсылка.CRM_ПоследнееДействиеСтрокой,"");
				Если Не ПустаяСтрока(ЗадачаЦепочки_РезультатВыполнения) Тогда
					сРезультатВыполнения = ПолучитьHTMLКодДляТекста(ЗадачаЦепочки_РезультатВыполнения);
					//Иначе
					//	сРезультатВыполнения = ПолучитьHTMLКодДляТекста(ЗадачаСсылка.РезультатВыполнения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// выводим в html описание задачи/результат выполнения
	Если Не ПустаяСтрока(сРезультатВыполнения) Тогда
		сРезультатВыполнения = "
		|<div style=""padding-top: 5px; padding-bottom: 5px;"">
		|	"+сРезультатВыполнения+"
		|</div>";
		
		сШапка = сШапка + ПолучитьТекстHTMLДляСворачиваемогоТекста(?(Не ПустаяСтрока(ЗадачаСсылка.CRM_ПоследнееДействиеСтрокой),?(СтрНайти(ЗадачаСсылка.CRM_ПоследнееДействиеСтрокой,"Выполнена")>0,
			СтрЗаменить(ЗадачаСсылка.CRM_ПоследнееДействиеСтрокой,"Выполнена","Выполнена ("+СокрЛП(ЗадачаСсылка.CRM_ВариантВыполненияСтрокой)+")"),ЗадачаСсылка.CRM_ПоследнееДействиеСтрокой),НСтр("ru = 'Результат:'")), сРезультатВыполнения, Ложь);
		
	ИначеЕсли Не ПустаяСтрока(ЗадачаСсылка.CRM_ПоследнееДействиеСтрокой) Тогда
		сРезультатВыполнения = ПолучитьHTMLКодДляТекста(?(СтрНайти(ЗадачаСсылка.CRM_ПоследнееДействиеСтрокой,"Выполнена")>0,
			СтрЗаменить(ЗадачаСсылка.CRM_ПоследнееДействиеСтрокой,"Выполнена","Выполнена ("+СокрЛП(ЗадачаСсылка.CRM_ВариантВыполненияСтрокой)+")"),ЗадачаСсылка.CRM_ПоследнееДействиеСтрокой));
		сРезультатВыполнения = "
		|<div style=""padding-top: 5px; padding-bottom: 5px;"">
		|	"+сРезультатВыполнения+"
		|</div>";
		
		сШапка = сШапка + ПолучитьТекстHTMLДляСворачиваемогоТекста(НСтр("ru = 'Результат:'"), сРезультатВыполнения, Ложь)+"<br>";
		//сШапка = сШапка + сРезультатВыполнения;
	КонецЕсли;
	
	СтрокаОбъектовПоЗадаче = "";
	Если ЗначениеЗаполнено(ЗадачаСсылка.CRM_НачалоПереадресации) Тогда
		
		МассивЗадач = ПолучитьЦепочкуПереадресаций(ЗадачаСсылка.CRM_НачалоПереадресации, ЗадачаСсылка);
		
		Для Каждого ЗадачаЦепочки ИЗ МассивЗадач Цикл
			
			ТабОбъектов = ПолучитьОбъектыПоЗадаче(ЗадачаЦепочки);
			Если ТабОбъектов.Количество() > 0 Тогда
				
				Для Каждого СтрокаТаб Из ТабОбъектов Цикл
					Попытка
						Если (Найти(СтрокаТаб.Объект.Метаданные().ПолноеИмя(),"Справочник.") > 0)
							ИЛИ (Найти(СтрокаТаб.Объект.Метаданные().ПолноеИмя(),"Документ.") > 0) Тогда
							
							Если Найти(СтрокаТаб.Объект.Метаданные().ПолноеИмя(),"Документ.") > 0 Тогда
								ПредставлениеОбъекта = СтруктураПодчиненностиПереопределяемый.ПредставлениеОбъектаДляВыводаВОтчет(Новый Структура("Ссылка",СтрокаТаб.Объект));
								Если ПредставлениеОбъекта = Неопределено Тогда
									ПредставлениеОбъекта = Строка(СтрокаТаб.Объект);
								КонецЕсли;
							Иначе
								ПредставлениеОбъекта = Строка(СтрокаТаб.Объект);
							КонецЕсли;
							
							НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СтрокаТаб.Объект);
							ЗначениеСтрокой = "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта+"</a>";
						КонецЕсли;
					Исключение
						ЗначениеСтрокой = СокрЛП(Строка(СтрокаТаб.Объект));
					КонецПопытки;
					
					СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
					|<P><span style='font-size: 10pt;'>&nbsp;&nbsp;" + ЗначениеСтрокой + "</P>";
					
					// Если Это взаимодействие то выводим для него ниже Описание события и результат.
					Если ТипЗнч(СтрокаТаб.Объект) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
						Попытка
							ОписаниеСобытия		= СтрокаТаб.Объект.Содержание;
						Исключение
							ОписаниеСобытия		= "";
						КонецПопытки;	
						Попытка
							РезультатСобытия	= СтрокаТаб.Объект.Результат;
						Исключение
							РезультатСобытия		= "";						
						КонецПопытки;						
						
						Если ЗначениеЗаполнено(ОписаниеСобытия) Тогда
							МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеСобытия,Символы.ПС);
							Если МассивСтрок.Количество() > 3 Тогда
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
								|<P><B>" + "Описание: " + "</B>";
								
								Ном = 0;
								Для Каждого СтрокаИзМассива Из МассивСтрок Цикл
									Если Ном = 3 Тогда Прервать; КонецЕсли;
									Ном = Ном + 1;
									СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + СтрокаИзМассива + "<br>";
								КонецЦикла;
								
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "............</P>";
							Иначе
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
								|<P><B>" + "Описание: " + "</B>" + СокрЛП(СтрЗаменить(ОписаниеСобытия,Символы.ПС,"<br>")) + "</P>";
							КонецЕсли;
						КонецЕсли;
						Если ЗначениеЗаполнено(РезультатСобытия) Тогда					
							МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РезультатСобытия,Символы.ПС);
							Если МассивСтрок.Количество() > 3 Тогда
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
								|<P><B>" + "Результат: " + "</B>";
								
								Ном = 0;
								Для Каждого СтрокаИзМассива Из МассивСтрок Цикл
									Если Ном = 3 Тогда Прервать; КонецЕсли;
									Ном = Ном + 1;
									СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + СтрокаИзМассива + "<br>";
								КонецЦикла;
								
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "............</P>";
							Иначе
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
								|<P><B>" + "Результат: " + "</B>" + СокрЛП(СтрЗаменить(РезультатСобытия,Символы.ПС,"<br>")) + "</P>";
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТабОбъектов = ПолучитьОбъектыПоЗадаче(ЗадачаСсылка);
		Если ТабОбъектов.Количество() > 0 Тогда
			
			Для Каждого СтрокаТаб Из ТабОбъектов Цикл
				Попытка
					Если (Найти(СтрокаТаб.Объект.Метаданные().ПолноеИмя(),"Справочник.") > 0)
						ИЛИ (Найти(СтрокаТаб.Объект.Метаданные().ПолноеИмя(),"Документ.") > 0) Тогда
						
						Если Найти(СтрокаТаб.Объект.Метаданные().ПолноеИмя(),"Документ.") > 0 Тогда
							ПредставлениеОбъекта = СтруктураПодчиненностиПереопределяемый.ПредставлениеОбъектаДляВыводаВОтчет(Новый Структура("Ссылка",СтрокаТаб.Объект));
							Если ПредставлениеОбъекта = Неопределено Тогда
								ПредставлениеОбъекта = Строка(СтрокаТаб.Объект);
							КонецЕсли;
						Иначе
							// ++ VOG Ульянов И.В. 10.03.2020 task CRM-389
							Если ТипЗнч(СтрокаТаб.Объект) = Тип("СправочникСсылка.вогКоммерческиеСоглашения") тогда
								ПредставлениеОбъекта = СокрЛП(Строка(СтрокаТаб.Объект))+" "+СокрЛП(СтрокаТаб.Объект.ЮридическоеЛицо);
								Если СтрокаТаб.Объект.ОтгрузкаПоСкануДоговораДо <> '00010101' тогда
									ПредставлениеОбъекта = ПредставлениеОбъекта + "; Отгрузка по скану договора до: "+Формат(СтрокаТаб.Объект.ОтгрузкаПоСкануДоговораДо,"ДФ=dd.MM.yyyy");
								КонецЕсли;	
							// +++ VOG Кулаков П.Л. 16.03.2020 CRM-445
							ИначеЕсли  ТипЗнч(СтрокаТаб.Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
								ТекстНаименования = НСтр("ru = '№ %НомерДоговора% от %ДатаДоговора%'");
								ТекстНаименования = СтрЗаменить(ТекстНаименования, "%НомерДоговора%", СокрЛП(СтрокаТаб.Объект.НомерДоговора));
								ТекстНаименования = СтрЗаменить(ТекстНаименования, "%ДатаДоговора%", СокрЛП(Строка(Формат(СтрокаТаб.Объект.вогДатаНачалаДействия, "ДФ=dd.MM.yyyy"))));
								Если ЗначениеЗаполнено(СтрокаТаб.Объект.Владелец) тогда
									ТекстНаименования = ТекстНаименования + " юр.лицо "+СокрЛП(СтрокаТаб.Объект.Владелец)+" ("+СокрЛП(СтрокаТаб.Объект.Владелец.Партнер)+")";
								КонецЕсли;
								// ++ VOG Ульянов И.В. 30.03.2020 task CRM-503
								Если СтрокаТаб.Объект.вогОтгрузкаПоСкануДоговораДо <> '00010101' тогда
									ТекстНаименования = ТекстНаименования + "; Отгрузка по скану договора до: "+Формат(СтрокаТаб.Объект.вогОтгрузкаПоСкануДоговораДо,"ДФ=dd.MM.yyyy");
								КонецЕсли;
								// -- VOG Ульянов И.В. 30.03.2020 task CRM-503								
								ПредставлениеОбъекта = ТекстНаименования;
							// --- VOG Кулаков П.Л.
							Иначе	
								ПредставлениеОбъекта = СокрЛП(Строка(СтрокаТаб.Объект));
							КонецЕсли;	
							//ПредставлениеОбъекта = СокрЛП(Строка(СтрокаТаб.Объект));
							// -- VOG Ульянов И.В. 10.03.2020 task CRM-389														
						КонецЕсли;
						
						НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СтрокаТаб.Объект);
						ЗначениеСтрокой = "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта+"</a>";
					КонецЕсли;
				Исключение
					ЗначениеСтрокой = СокрЛП(Строка(СтрокаТаб.Объект));
				КонецПопытки;
				
				СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
				|<P><span style='font-size: 10pt;'>&nbsp;&nbsp;" + ЗначениеСтрокой + "</P>";
				
				// Если Это взаимодействие то выводим для него ниже Описание события и результат.
				Если ТипЗнч(СтрокаТаб.Объект) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
					Попытка
						ОписаниеСобытия		= СтрокаТаб.Объект.Содержание;
					Исключение
						ОписаниеСобытия		= "";
					КонецПопытки;	
					Попытка
						РезультатСобытия	= СтрокаТаб.Объект.Результат;
					Исключение
						РезультатСобытия		= "";						
					КонецПопытки;						
					
					Если ЗначениеЗаполнено(ОписаниеСобытия) Тогда
						МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеСобытия,Символы.ПС);
						Если МассивСтрок.Количество() > 3 Тогда
							СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
							|<P><B>" + "Описание: " + "</B>";
							
							Ном = 0;
							Для Каждого СтрокаИзМассива Из МассивСтрок Цикл
								Если Ном = 3 Тогда Прервать; КонецЕсли;
								Ном = Ном + 1;
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + СтрокаИзМассива + "<br>";
							КонецЦикла;
							
							СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "............</P>";
						Иначе
							СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
							|<P><B>" + "Описание: " + "</B>" + СокрЛП(СтрЗаменить(ОписаниеСобытия,Символы.ПС,"<br>")) + "</P>";
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(РезультатСобытия) Тогда					
						МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РезультатСобытия,Символы.ПС);
						Если МассивСтрок.Количество() > 3 Тогда
							СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
							|<P><B>" + "Результат: " + "</B>";
							
							Ном = 0;
							Для Каждого СтрокаИзМассива Из МассивСтрок Цикл
								Если Ном = 3 Тогда Прервать; КонецЕсли;
								Ном = Ном + 1;
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + СтрокаИзМассива + "<br>";
							КонецЦикла;
							
							СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "............</P>";
						Иначе
							СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
							|<P><B>" + "Результат: " + "</B>" + СокрЛП(СтрЗаменить(РезультатСобытия,Символы.ПС,"<br>")) + "</P>";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// выводим в html описание задачи/результат выполнения
	Если Не ПустаяСтрока(СтрокаОбъектовПоЗадаче) Тогда
		СтрокаОбъектовПоЗадаче = "
		|<div style=""padding-top: 5px; padding-bottom: 5px;"">
		|	"+СтрокаОбъектовПоЗадаче+"
		|</div>";
		
		сШапка = сШапка + ПолучитьТекстHTMLДляСворачиваемогоТекста(НСтр("ru = 'Введенные на этапе объекты:'"), СтрокаОбъектовПоЗадаче, Ложь)+"<br>";
	КонецЕсли;
	
	МассивЗадач = Неопределено;
	Если ЗначениеЗаполнено(ЗадачаСсылка.CRM_НачалоПереадресации) Тогда
		МассивЗадач = ПолучитьЦепочкуПереадресаций(ЗадачаСсылка.CRM_НачалоПереадресации, ЗадачаСсылка);
		// ++ Тищенко В.В. 11.04.2019
		// Добавлена история задач по вогВедущийБизнесПроцесс
	ИначеЕсли ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.вогВедущийБизнесПроцесс) Тогда
		МассивЗадач = ПолучитьЦепочкуЗадачВедущегоБизнесПроцесса(ЗадачаСсылка.БизнесПроцесс.вогВедущийБизнесПроцесс);
	ИначеЕсли ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.ВедущаяЗадача) Тогда
		МассивЗадач = ПолучитьЦепочкуЗадачВедущегоБизнесПроцесса(ЗадачаСсылка.БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс);
		// -- Тищенко В.В. 
	КонецЕсли;
	
	сИстория = "";
	
	// ++ Тищенко В.В. 16.05.2019
	// Проблема чтения истории БП.Нет права
	УстановитьПривилегированныйРежим(Истина);
	
	// -- Тищенко В.В. 
	
	Если ЗадачаСсылка.БизнесПроцесс.КартаМаршрута.ИсторияБизнесПроцессаВСодержаниеЗадачи Тогда
		
		Запрос = Новый Запрос;
		
		// ++ Тищенко В.В. 11.04.2019
		Если ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.вогВедущийБизнесПроцесс) ИЛИ ЗначениеЗаполнено(ЗадачаСсылка.БизнесПроцесс.ВедущаяЗадача) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
			|	ВЫБОР
			|		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|			ТОГДА ВЫБОР
			|					КОГДА НЕ ЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
			|						ТОГДА ЗадачаИсполнителя.РольИсполнителя
			|					ИНАЧЕ ЗадачаИсполнителя.Исполнитель
			|				КОНЕЦ
			|		ИНАЧЕ ЗадачаИсполнителя.Исполнитель
			|	КОНЕЦ КАК Исполнитель,
			|	ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
			|	ЗадачаИсполнителя.Дата КАК Дата,
			|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
			|	ЗадачаИсполнителя.CRM_ТочкаМаршрута КАК CRM_ТочкаМаршрута,
			|	ЗадачаИсполнителя.CRM_Переадресована КАК CRM_Переадресована,
			|	ЗадачаИсполнителя.CRM_ВариантВыполненияСтрокой КАК CRM_ВариантВыполненияСтрокой,
			|	ЗадачаИсполнителя.Выполнена КАК Выполнена,
			|	ЗадачаИсполнителя.CRM_СостояниеСтрокой КАК CRM_СостояниеСтрокой,
			|	ЗадачаИсполнителя.CRM_ПоследнееДействиеСтрокой КАК CRM_ПоследнееДействиеСтрокой,
			|	ЗадачаИсполнителя.Описание КАК Описание,
			|	ВЫБОР
			|		КОГДА ЗадачаИсполнителя.Выполнена
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Флаг,
			|	ЗадачаИсполнителя.CRM_Итерация КАК CRM_Итерация,
			|	ЗадачаИсполнителя.CRM_ТочкаМаршрута.РеквизитДопУпорядочивания КАК CRM_ТочкаМаршрутаРеквизитДопУпорядочивания
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.Ссылка В(&МассивЗадач)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Флаг УБЫВ,
			|	ДатаИсполнения УБЫВ";	
			
		Иначе
			// -- Тищенко В.В. 
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
			|	ВЫБОР
			|		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			|			ТОГДА ВЫБОР
			|					КОГДА НЕ ЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
			|						ТОГДА ЗадачаИсполнителя.РольИсполнителя
			|					ИНАЧЕ ЗадачаИсполнителя.Исполнитель
			|				КОНЕЦ
			|		ИНАЧЕ ЗадачаИсполнителя.Исполнитель
			|	КОНЕЦ КАК Исполнитель,
			|	ЗадачаИсполнителя.РезультатВыполнения КАК РезультатВыполнения,
			|	ЗадачаИсполнителя.Дата КАК Дата,
			|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
			|	ЗадачаИсполнителя.CRM_ТочкаМаршрута КАК CRM_ТочкаМаршрута,
			|	ЗадачаИсполнителя.CRM_Переадресована КАК CRM_Переадресована,
			|	ЗадачаИсполнителя.CRM_ВариантВыполненияСтрокой КАК CRM_ВариантВыполненияСтрокой,
			|	ЗадачаИсполнителя.Выполнена КАК Выполнена,
			|	ЗадачаИсполнителя.CRM_СостояниеСтрокой КАК CRM_СостояниеСтрокой,
			|	ЗадачаИсполнителя.CRM_ПоследнееДействиеСтрокой КАК CRM_ПоследнееДействиеСтрокой,
			|	ЗадачаИсполнителя.Описание КАК Описание,
			|	ВЫБОР
			|		КОГДА ЗадачаИсполнителя.Выполнена
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК Флаг,
			|	ЗадачаИсполнителя.CRM_Итерация КАК CRM_Итерация,
			|	ЗадачаИсполнителя.CRM_ТочкаМаршрута.РеквизитДопУпорядочивания КАК CRM_ТочкаМаршрутаРеквизитДопУпорядочивания
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			|	"+?(МассивЗадач = Неопределено,"И НЕ ЗадачаИсполнителя.Ссылка = &Ссылка","И НЕ ЗадачаИсполнителя.Ссылка В (&МассивЗадач)")+"
			|	И ЗадачаИсполнителя.Дата <= &Дата
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	NULL,
			|	NULL,
			|	вогСведенияОВетвленияхБизнесПроцесса.Результат,
			|	вогСведенияОВетвленияхБизнесПроцесса.ДатаВыполнения,
			|	вогСведенияОВетвленияхБизнесПроцесса.ДатаВыполнения,
			|	вогСведенияОВетвленияхБизнесПроцесса.Условие,
			|	NULL,
			|	вогСведенияОВетвленияхБизнесПроцесса.Результат,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	1,
			|	NULL,
			|	NULL
			|ИЗ
			|	РегистрСведений.вогСведенияОВетвленияхБизнесПроцесса КАК вогСведенияОВетвленияхБизнесПроцесса
			|  ГДЕ  вогСведенияОВетвленияхБизнесПроцесса.БизнесПроцесс = &БизнесПроцесс
			|УПОРЯДОЧИТЬ ПО
			|	Флаг УБЫВ,
			|	ДатаИсполнения УБЫВ"
			//Запрос.Текст = "ВЫБРАТЬ Разрешенные
			//|	ЗадачаИсполнителя.Ссылка,
			//|	ВЫБОР
			//|		КОГДА ЗадачаИсполнителя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
			//|			ТОГДА ВЫБОР
			//|					КОГДА НЕ ЗадачаИсполнителя.РольИсполнителя = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
			//|						ТОГДА ЗадачаИсполнителя.РольИсполнителя
			//|					ИНАЧЕ ЗадачаИсполнителя.Исполнитель
			//|				КОНЕЦ
			//|		ИНАЧЕ ЗадачаИсполнителя.Исполнитель
			//|	КОНЕЦ КАК Исполнитель,
			//|	ЗадачаИсполнителя.РезультатВыполнения,
			//|	ЗадачаИсполнителя.Дата КАК Дата,
			//|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения,
			//|	ЗадачаИсполнителя.CRM_ТочкаМаршрута КАК CRM_ТочкаМаршрута,
			//|	ЗадачаИсполнителя.CRM_Переадресована,
			//|	ЗадачаИсполнителя.CRM_ВариантВыполненияСтрокой,
			//|	ЗадачаИсполнителя.Выполнена,
			//|	ЗадачаИсполнителя.CRM_СостояниеСтрокой,
			//|	ЗадачаИсполнителя.CRM_ПоследнееДействиеСтрокой,
			//|	ЗадачаИсполнителя.Описание,
			//|	ВЫБОР
			//|		КОГДА ЗадачаИсполнителя.Выполнена
			//|			ТОГДА 0
			//|		ИНАЧЕ 1
			//|	КОНЕЦ КАК Флаг,
			//|	ЗадачаИсполнителя.CRM_Итерация КАК CRM_Итерация,
			//|	ЗадачаИсполнителя.CRM_ТочкаМаршрута.РеквизитДопУпорядочивания КАК CRM_ТочкаМаршрутаРеквизитДопУпорядочивания
			//|ИЗ
			//|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			//|ГДЕ
			//|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			//|	"+?(МассивЗадач = Неопределено,"И НЕ ЗадачаИсполнителя.Ссылка = &Ссылка","И НЕ ЗадачаИсполнителя.Ссылка В (&МассивЗадач)")+"
			//|	И ЗадачаИсполнителя.Дата <= &Дата
			//|
			//|УПОРЯДОЧИТЬ ПО
			//|	Флаг УБЫВ,
			//|	ДатаИсполнения УБЫВ";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("БизнесПроцесс",ЗадачаСсылка.БизнесПроцесс);
		Запрос.УстановитьПараметр("МассивЗадач",МассивЗадач);
		Запрос.УстановитьПараметр("Ссылка",ЗадачаСсылка);
		Запрос.УстановитьПараметр("Дата",ЗадачаСсылка.Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ИсторияВыполнения = "";
		
		Пока Выборка.Следующий() Цикл
			
			ТекстЭтапа				= "";
			ЗаголовокЭтапа			= "";
			ОписаниеЭтапа			= "";
			РезультатЭтапа			= "";
			СтрокаОбъектовПоЗадаче	= "";
			Попытка
				ТабОбъектов = ПолучитьОбъектыПоЗадаче(Выборка.Ссылка);
				
				Для Каждого СтрокаТаб Из ТабОбъектов Цикл
					Попытка
						Если (Найти(СтрокаТаб.Объект.Метаданные().ПолноеИмя(),"Справочник.") > 0)
							ИЛИ (Найти(СтрокаТаб.Объект.Метаданные().ПолноеИмя(),"Документ.") > 0) Тогда
							
							Если Найти(СтрокаТаб.Объект.Метаданные().ПолноеИмя(),"Документ.") > 0 Тогда
								ПредставлениеОбъекта = СтруктураПодчиненностиПереопределяемый.ПредставлениеОбъектаДляВыводаВОтчет(Новый Структура("Ссылка",СтрокаТаб.Объект));
								Если ПредставлениеОбъекта = Неопределено Тогда
									ПредставлениеОбъекта = Строка(СтрокаТаб.Объект);
								КонецЕсли;
							Иначе
								// ++ VOG Ульянов И.В. 10.03.2020 task CRM-389
								Если ТипЗнч(СтрокаТаб.Объект) = Тип("СправочникСсылка.вогКоммерческиеСоглашения") тогда
									ПредставлениеОбъекта = СокрЛП(Строка(СтрокаТаб.Объект))+" "+СокрЛП(СтрокаТаб.Объект.ЮридическоеЛицо);
									Если СтрокаТаб.Объект.ОтгрузкаПоСкануДоговораДо <> '00010101' тогда
										ПредставлениеОбъекта = ПредставлениеОбъекта + "; Отгрузка по скану договора до: "+Формат(СтрокаТаб.Объект.ОтгрузкаПоСкануДоговораДо,"ДФ=dd.MM.yyyy");
									КонецЕсли;
								// +++ VOG Кулаков П.Л. 16.03.2020 CRM-445
								ИначеЕсли  ТипЗнч(СтрокаТаб.Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
									ТекстНаименования = НСтр("ru = '№ %НомерДоговора% от %ДатаДоговора%'");
									ТекстНаименования = СтрЗаменить(ТекстНаименования, "%НомерДоговора%", СокрЛП(СтрокаТаб.Объект.НомерДоговора));
									ТекстНаименования = СтрЗаменить(ТекстНаименования, "%ДатаДоговора%", СокрЛП(Строка(Формат(СтрокаТаб.Объект.вогДатаНачалаДействия, "ДФ=dd.MM.yyyy"))));
									Если ЗначениеЗаполнено(СтрокаТаб.Объект.Владелец) тогда
										ТекстНаименования = ТекстНаименования + " юр.лицо "+СокрЛП(СтрокаТаб.Объект.Владелец)+" ("+СокрЛП(СтрокаТаб.Объект.Владелец.Партнер)+")";
									КонецЕсли;
									// ++ VOG Ульянов И.В. 30.03.2020 task CRM-503
									Если СтрокаТаб.Объект.вогОтгрузкаПоСкануДоговораДо <> '00010101' тогда
										ТекстНаименования = ТекстНаименования + "; Отгрузка по скану договора до: "+Формат(СтрокаТаб.Объект.вогОтгрузкаПоСкануДоговораДо,"ДФ=dd.MM.yyyy");
									КонецЕсли;
									// -- VOG Ульянов И.В. 30.03.2020 task CRM-503									
									ПредставлениеОбъекта = ТекстНаименования;
									// --- VOG Кулаков П.Л.
								Иначе	
									ПредставлениеОбъекта = СокрЛП(Строка(СтрокаТаб.Объект));
								КонецЕсли;	
								//ПредставлениеОбъекта = СокрЛП(Строка(СтрокаТаб.Объект));
								// -- VOG Ульянов И.В. 10.03.2020 task CRM-389
							КонецЕсли;
							
							НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СтрокаТаб.Объект);
							ЗначениеСтрокой = "<a href=" + НавигационнаяСсылка + ">" + ПредставлениеОбъекта+"</a>";
						Иначе
							// ++ VOG Ульянов И.В. 10.03.2020 task CRM-389
							Если ТипЗнч(СтрокаТаб.Объект) = Тип("СправочникСсылка.вогКоммерческиеСоглашения") тогда
								ЗначениеСтрокой = СокрЛП(Строка(СтрокаТаб.Объект))+" "+СокрЛП(СтрокаТаб.Объект.ЮридическоеЛицо);
								Если СтрокаТаб.Объект.ОтгрузкаПоСкануДоговораДо <> '00010101' тогда
									ЗначениеСтрокой = ЗначениеСтрокой + "; Отгрузка по скану договора до: "+Формат(СтрокаТаб.Объект.ОтгрузкаПоСкануДоговораДо,"ДФ=dd.MM.yyyy");
								КонецЕсли;
							// +++ VOG Кулаков П.Л. 16.03.2020 CRM-445
							ИначеЕсли  ТипЗнч(СтрокаТаб.Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
								ТекстНаименования = НСтр("ru = '№ %НомерДоговора% от %ДатаДоговора%'");
								ТекстНаименования = СтрЗаменить(ТекстНаименования, "%НомерДоговора%", СокрЛП(СтрокаТаб.Объект.НомерДоговора));
								ТекстНаименования = СтрЗаменить(ТекстНаименования, "%ДатаДоговора%", СокрЛП(Строка(Формат(СтрокаТаб.Объект.вогДатаНачалаДействия, "ДФ=dd.MM.yyyy"))));
								Если ЗначениеЗаполнено(СтрокаТаб.Объект.Владелец) тогда
									ТекстНаименования = ТекстНаименования + " юр.лицо "+СокрЛП(СтрокаТаб.Объект.Владелец)+" ("+СокрЛП(СтрокаТаб.Объект.Владелец.Партнер)+")";
								КонецЕсли;
								// ++ VOG Ульянов И.В. 30.03.2020 task CRM-503
								Если СтрокаТаб.Объект.вогОтгрузкаПоСкануДоговораДо <> '00010101' тогда
									ТекстНаименования = ТекстНаименования + "; Отгрузка по скану договора до: "+Формат(СтрокаТаб.Объект.вогОтгрузкаПоСкануДоговораДо,"ДФ=dd.MM.yyyy");
								КонецЕсли;
								// -- VOG Ульянов И.В. 30.03.2020 task CRM-503
								ЗначениеСтрокой = ТекстНаименования;
								// --- VOG Кулаков П.Л.
							Иначе	
								ЗначениеСтрокой = СокрЛП(Строка(СтрокаТаб.Объект));
							КонецЕсли;	
							//ЗначениеСтрокой = СокрЛП(Строка(СтрокаТаб.Объект));
							// -- VOG Ульянов И.В. 10.03.2020 task CRM-389
						КонецЕсли;
					Исключение
						ЗначениеСтрокой = СокрЛП(Строка(СтрокаТаб.Объект));
					КонецПопытки;
					
					СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
					|<P><span style='font-size: 10pt;'>&nbsp;&nbsp;" + ЗначениеСтрокой + "</P>";
					
					// Если Это взаимодействие то выводим для него ниже Описание события и результат.
					Если ТипЗнч(СтрокаТаб.Объект) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
						Попытка
							ОписаниеСобытия		= СтрокаТаб.Объект.Содержание;
						Исключение
							ОписаниеСобытия		= "";
						КонецПопытки;	
						Попытка
							РезультатСобытия	= СтрокаТаб.Объект.Результат;
						Исключение
							РезультатСобытия		= "";						
						КонецПопытки;						
						
						Если ЗначениеЗаполнено(ОписаниеСобытия) Тогда
							МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеСобытия,Символы.ПС);
							Если МассивСтрок.Количество() > 3 Тогда
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
								|<P><B>" + "Описание: " + "</B>";
								
								Ном = 0;
								Для Каждого СтрокаИзМассива Из МассивСтрок Цикл
									Если Ном = 3 Тогда Прервать; КонецЕсли;
									Ном = Ном + 1;
									СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + СтрокаИзМассива + "<br>";
								КонецЦикла;
								
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "............</P>";
							Иначе
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
								|<P><B>" + "Описание: " + "</B>" + СокрЛП(СтрЗаменить(ОписаниеСобытия,Символы.ПС,"<br>")) + "</P>";
							КонецЕсли;
						КонецЕсли;
						Если ЗначениеЗаполнено(РезультатСобытия) Тогда					
							МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РезультатСобытия,Символы.ПС);
							Если МассивСтрок.Количество() > 3 Тогда
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
								|<P><B>" + "Результат: " + "</B>";
								
								Ном = 0;
								Для Каждого СтрокаИзМассива Из МассивСтрок Цикл
									Если Ном = 3 Тогда Прервать; КонецЕсли;
									Ном = Ном + 1;
									СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + СтрокаИзМассива + "<br>";
								КонецЦикла;
								
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "............</P>";
							Иначе
								СтрокаОбъектовПоЗадаче = СтрокаОбъектовПоЗадаче + "
								|<P><B>" + "Результат: " + "</B>" + СокрЛП(СтрЗаменить(РезультатСобытия,Символы.ПС,"<br>")) + "</P>";
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			Исключение
			КонецПопытки;
			ЗаголовокЭтапа = "<span style='font-size: 10pt;'>" + Формат(Выборка.Дата,"ДФ='дд.ММ.гггг ЧЧ:мм'") + " / <STRONG>" + Выборка.CRM_ТочкаМаршрута + "</STRONG> / " + ?(ТипЗнч(Выборка.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей"),БизнесПроцессыИЗадачиСервер.РольСтрокой(Выборка.Исполнитель),Выборка.Исполнитель) + " / " +СокрЛП(Выборка.CRM_ВариантВыполненияСтрокой)+ " / " + СокрЛП(Выборка.CRM_СостояниеСтрокой) + "</span>";
			Попытка
				ЛинкНаЗадачу = _GetHTMLLinkText(ЗаголовокЭтапа, GetURL(Выборка.Ссылка));
			Исключение
				ЛинкНаЗадачу = ЗаголовокЭтапа;
			КонецПопытки;
			Если Не ПустаяСтрока(Выборка.Описание) Тогда
				ОписаниеЭтапа		= ПолучитьHTMLКодДляТекста(Выборка.Описание);
			КонецЕсли;
			
			// выводим в html описание задачи/результат выполнения
			Если Не ПустаяСтрока(ОписаниеЭтапа) Тогда
				ОписаниеЭтапа = "
				|<div style=""padding-top: 5px; padding-bottom: 5px;"">
				|	"+ОписаниеЭтапа+"
				|</div>";
				
				ТекстЭтапа = ТекстЭтапа + ПолучитьТекстHTMLДляСворачиваемогоТекста(НСтр("ru = 'Описание:'"), ОписаниеЭтапа, Ложь, Истина,Истина);
			КонецЕсли;
			
			Если Не ПустаяСтрока(Выборка.РезультатВыполнения) Тогда
				Если Не ПустаяСтрока(Выборка.CRM_ПоследнееДействиеСтрокой) Тогда
					РезультатЭтапа = СтрЗаменить(Выборка.РезультатВыполнения,Выборка.CRM_ПоследнееДействиеСтрокой,"");
					
					Если Не ПустаяСтрока(РезультатЭтапа) Тогда
						РезультатЭтапа = ПолучитьHTMLКодДляТекста(РезультатЭтапа);
						//Иначе
						//	РезультатЭтапа = ПолучитьHTMLКодДляТекста(Выборка.РезультатВыполнения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// выводим в html описание задачи/результат выполнения
			Если Не ПустаяСтрока(РезультатЭтапа) Тогда
				РезультатЭтапа = "
				|<div style=""padding-top: 5px; padding-bottom: 5px;"">
				|	"+РезультатЭтапа+"
				|</div>";
				
				ТекстЭтапа = ТекстЭтапа + ПолучитьТекстHTMLДляСворачиваемогоТекста(?(Не ПустаяСтрока(Выборка.CRM_ПоследнееДействиеСтрокой),?(СтрНайти(Выборка.CRM_ПоследнееДействиеСтрокой,"Выполнена")>0,СтрЗаменить(Выборка.CRM_ПоследнееДействиеСтрокой,"Выполнена","Выполнена ("+СокрЛП(Выборка.CRM_ВариантВыполненияСтрокой)+")"),Выборка.CRM_ПоследнееДействиеСтрокой),НСтр("ru = 'Результат:'")), РезультатЭтапа, Ложь, Истина, Истина);
				
			ИначеЕсли Не ПустаяСтрока(Выборка.CRM_ПоследнееДействиеСтрокой) Тогда
				РезультатЭтапа = ПолучитьHTMLКодДляТекста(?(СтрНайти(Выборка.CRM_ПоследнееДействиеСтрокой,"Выполнена")>0,СтрЗаменить(Выборка.CRM_ПоследнееДействиеСтрокой,"Выполнена","Выполнена ("+СокрЛП(Выборка.CRM_ВариантВыполненияСтрокой)+")"),Выборка.CRM_ПоследнееДействиеСтрокой));
				РезультатЭтапа = "
				|<div style=""padding-top: 5px; padding-bottom: 5px;"">
				|	"+РезультатЭтапа+"
				|</div>";
				
				ТекстЭтапа = ТекстЭтапа + РезультатЭтапа;
			КонецЕсли;
			
			// выводим в html описание задачи/результат выполнения
			Если Не ПустаяСтрока(СтрокаОбъектовПоЗадаче) Тогда
				СтрокаОбъектовПоЗадаче = "
				|<div style=""padding-top: 5px; padding-bottom: 5px;"">
				|	"+СтрокаОбъектовПоЗадаче+"
				|</div>";
				
				ТекстЭтапа = ТекстЭтапа + ПолучитьТекстHTMLДляСворачиваемогоТекста(НСтр("ru = 'Введенные на этапе объекты:'"), СтрокаОбъектовПоЗадаче, Ложь, Истина,Истина);
			КонецЕсли;
			
			ИсторияВыполнения = ИсторияВыполнения + ПолучитьТекстHTMLДляСворачиваемогоТекста(ЛинкНаЗадачу, ТекстЭтапа,Ложь);
			
		КонецЦикла;
		
		Если Не ПустаяСтрока(ИсторияВыполнения) Тогда
			
			сИстория	= сИстория + "
			|<div style=""padding-top: 5px; padding-bottom: 5px;"">
			|<BR>
			|<TABLE cellSpacing=""0"" cellPadding=""0"" width=""100%"" border=""0"">
			|<TBODY>
			|	<TR>";
			
			// собственно тема, если есть
			сИстория	= сИстория + "
			//|		<TD class=""title_theme"" width=""100%"">
			|		<TD width=""100%"">
			|			<span class=""title_text"">История выполнения:</span>
			|		</TD>";
			
			сИстория	= сИстория + "
			|	</TR>
			|</TBODY>
			|</TABLE>
			|</div>";
			
		КонецЕсли;
		сИстория = сИстория + ИсторияВыполнения;
	КонецЕсли;
	
	сОписаниеБП = ?(ЗадачаСсылка.БизнесПроцесс.КартаМаршрута.ОписаниеБизнесПроцессаВСодержаниеЗадачи, ?(Не ПустаяСтрока(ЗадачаСсылка.БизнесПроцесс.Описание), ПолучитьHTMLКодДляТекста(ЗадачаСсылка.БизнесПроцесс.Описание),""), "");
	Если Не ПустаяСтрока(сОписаниеБП) Тогда
		
		сОписаниеБП	= "
		|<div style=""padding-top: 5px; padding-bottom: 5px;"">
		|<BR>
		|<TABLE cellSpacing=""0"" cellPadding=""0"" width=""100%"" border=""0"">
		|<TBODY>
		|	<TR>
		|		<TD width=""100%"">
		|			<span class=""title_header_1"">Описание процесса:</span>
		|		</TD>
		|	</TR>
		|</TBODY>
		|</TABLE>
		|</div>"+сОписаниеБП;
		
	КонецЕсли;
	
	сПодвал		= "
	|&nbsp;
	|</BODY>
	|</HTML>";
	
	
	сТекст		= сЗаголовок1 + сСтили + сЗаголовок2 
	+ сШапка + сОписаниеБП + сИстория + сТело + сПодвал;
	
	Возврат сТекст;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦепочкуПереадресаций(НачальнаяЗадача, ТекущаяЗадача)
	
	Массив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("CRM_НачалоПереадресации",НачальнаяЗадача);
	Запрос.УстановитьПараметр("Дата",ТекущаяЗадача.Дата);
	Запрос.Текст = 
	
	//++ #373 Бей добавил 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.CRM_НачалоПереадресации = &CRM_НачалоПереадресации
	|	И ЗадачаИсполнителя.Дата <= &Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Ссылка = &CRM_НачалоПереадресации
	|	И ЗадачаИсполнителя.Дата <= &Дата";
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	//Пока Выборка.Следующий() Цикл
	//	Массив.Добавить(Выборка.Ссылка);
	//КонецЦикла;
	//Массив.Добавить(НачальнаяЗадача);
	
	//--
	
	Возврат Массив;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦепочкуЗадачВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) // ++ Тищенко В.В.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Массив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс"	, ВедущийБизнесПроцесс);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	 ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачаИсполнителя.Выполнена,
	|	ЗадачаИсполнителя.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Массив.Добавить(Выборка.Ссылка);
	КонецЦикла;
	//Массив.Добавить(НачальнаяЗадача);
	
	Возврат Массив;
	
КонецФункции //-- Тищенко В.В.

&НаСервереБезКонтекста
Функция ПолучитьОбъектыПоЗадаче(Задача)
	
	// ++ Тищенко В.В. 07.02.2019
	// Добавлены дополнительные объекты для отображения к задаче
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс",	Задача.БизнесПроцесс);
	Запрос.УстановитьПараметр("Задача",			Задача);
	Запрос.УстановитьПараметр("ТочкаМаршрута",	Задача.CRM_ТочкаМаршрута);
	
	// Оригинал запроса
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//               |	CRM_ОбъектыПоБизнесПроцессам.Объект,
	//               |	CRM_ОбъектыПоБизнесПроцессам.ДатаРегистрации КАК ДатаРегистрации,
	//               |	ВЫБОР
	//               |		КОГДА CRM_ОбъектыПоБизнесПроцессам.Объект ССЫЛКА Справочник.МаркетинговыеМероприятия
	//               |			ТОГДА CRM_ОбъектыПоБизнесПроцессам.Объект.ДатаНачала
	//               |		ИНАЧЕ ЕСТЬNULL(CRM_ОбъектыПоБизнесПроцессам.Объект.Дата, CRM_ОбъектыПоБизнесПроцессам.ДатаРегистрации)
	//               |	КОНЕЦ КАК ДатаСортировки
	//               |ИЗ
	//               |	РегистрСведений.CRM_ОбъектыПоБизнесПроцессам КАК CRM_ОбъектыПоБизнесПроцессам
	//               |ГДЕ
	//               |	CRM_ОбъектыПоБизнесПроцессам.БизнесПроцесс = &БизнесПроцесс
	//               |	И CRM_ОбъектыПоБизнесПроцессам.Задача = &Задача
	//               |	И CRM_ОбъектыПоБизнесПроцессам.ТочкаМаршрута = &ТочкаМаршрута
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	ДатаСортировки";
	
	// Новый запрос
	Запрос.Текст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_ОбъектыПоБизнесПроцессам.Объект КАК Объект,
	|	CRM_ОбъектыПоБизнесПроцессам.ДатаРегистрации КАК ДатаРегистрации,
	|	ВЫБОР
	|		КОГДА CRM_ОбъектыПоБизнесПроцессам.Объект ССЫЛКА Справочник.МаркетинговыеМероприятия
	|			ТОГДА CRM_ОбъектыПоБизнесПроцессам.Объект.ДатаНачала
	|		ИНАЧЕ ЕСТЬNULL(CRM_ОбъектыПоБизнесПроцессам.Объект.Дата, CRM_ОбъектыПоБизнесПроцессам.ДатаРегистрации)
	|	КОНЕЦ КАК ДатаСортировки
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыПоБизнесПроцессам КАК CRM_ОбъектыПоБизнесПроцессам
	|ГДЕ
	|	CRM_ОбъектыПоБизнесПроцессам.БизнесПроцесс = &БизнесПроцесс
	|	И CRM_ОбъектыПоБизнесПроцессам.Задача = &Задача
	|	И CRM_ОбъектыПоБизнесПроцессам.ТочкаМаршрута = &ТочкаМаршрута
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогОбъектыДляПроцесса.Объект,
	|	вогОбъектыДляПроцесса.Процесс.Дата,
	|	вогОбъектыДляПроцесса.Процесс.Дата
	|ИЗ
	|	РегистрСведений.вогОбъектыДляПроцесса КАК вогОбъектыДляПроцесса
	|ГДЕ
	|	вогОбъектыДляПроцесса.Процесс = &БизнесПроцесс
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСортировки";
	
	// -- Тищенко В.В. 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ПолучитьСписокОбъектовПоБизнесПроцессу()
	
	ОбъектыЗначение = РеквизитФормыВЗначение("ОбъектыПоБизнесПроцессам");
	
	РегНабор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
	РегНабор.Отбор.БизнесПроцесс.Установить(Объект.БизнесПроцесс);
	РегНабор.Отбор.Задача.Установить(Объект.Ссылка);
	РегНабор.Прочитать();
	
	ОбъектыЗначение = РегНабор.Выгрузить();
	
	ЗначениеВРеквизитФормы(ОбъектыЗначение, "ОбъектыПоБизнесПроцессам");
	КоличествоОбъектов = РегНабор.Количество();
	
КонецПроцедуры

&НаСервере
// Процедура заполняет дату и время взаимодействия, а так же вспомогательный реквизит СостояниеИнтересаПреддущее.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДатуИВремяСервер()
	Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
		ДатаИВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ТекВзаимодействие.ПлановаяДата);
		ТекВзаимодействие.ДатаНачала = ДатаИВремя.Дата;
		ТекВзаимодействие.ВремяС = ДатаИВремя.Время;
		
		ДатаИВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ТекВзаимодействие.ПлановаяДатаЗавершение);
		ТекВзаимодействие.ВремяПо = ДатаИВремя.Время;
		
		ТекВзаимодействие.СостояниеИнтересаПредыдущее = ТекВзаимодействие.СостояниеИнтереса;
		ТекВзаимодействие.ЭтапПредыдущий = ТекВзаимодействие.Этап;
		Если ТекВзаимодействие.СтатусВзаимодействия <> ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
			ТекВзаимодействие.ЗапрещеноМенятьСостояние = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

&НаСервере
// Процедура анализирует наличие варианта или условия и отрисовывает кнопки по вариантам выполнения задачи.
//
Процедура ДобавлениеКнопокНаПанель()
	
	СтруктураВариантовВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(Объект.Ссылка);
	
	Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 Тогда
		НоваяКомандаФормы = Команды.Добавить("Команда_0");
		НоваяКомандаФормы.Заголовок                 = "Выполнить";
		НоваяКомандаФормы.Действие                  = "ВыполнитьЗадачуБезУсловия";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		
		НовыйПунктМеню = Элементы.Вставить("Кнопка_0",Тип("КнопкаФормы"), Элементы.ПанельАвтоКнопок);
		НовыйПунктМеню.ИмяКоманды			= "Команда_0";
		НовыйПунктМеню.Заголовок			= "       Выполнить       ";
		//НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
		НовыйПунктМеню.Отображение			= ОтображениеКнопки.Текст;
		НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
	КонецЕсли;
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(Объект.БизнесПроцесс.Ссылка);
	НаборЭтапов.Прочитать();
	
	// Если это задача БП Поручение и этап "Выполнить", то кнопка будет одна.
	Если Объект.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
		И НаборЭтапов[0].ТочкаМаршрута = Объект.CRM_ТочкаМаршрута Тогда
		
		НоваяКомандаФормы = Команды.Добавить("Команда_"+?(НаборЭтапов[1].Используется,"1","0"));
		НоваяКомандаФормы.Заголовок                 = "Выполнить";
		НоваяКомандаФормы.Действие                  = "ВыполнениеЗадачиПоУсловию";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		
		НовыйПунктМеню = Элементы.Вставить("Кнопка_0",Тип("КнопкаФормы"), Элементы.ПанельАвтоКнопок);
		НовыйПунктМеню.ИмяКоманды			= "Команда_"+?(НаборЭтапов[1].Используется,"1","0");
		НовыйПунктМеню.Заголовок			= "       Выполнить       ";
		//НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
		НовыйПунктМеню.Отображение			= ОтображениеКнопки.Текст;
		НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
	Иначе
		
		ПодменюКоманд = Элементы.Вставить("ПодменюАвтоКоманд", Тип("ГруппаФормы"), Элементы.ПанельАвтоКнопок);
		ПодменюКоманд.Вид = ВидГруппыФормы.Подменю;
		ПодменюКоманд.Заголовок = "   "+СтруктураВариантовВыполнения.ПредставлениеТочкиЗаголовок+"   ";
		ПодменюКоманд.ЦветФона = Новый Цвет(255, 225, 0);
		//ПодменюКоманд.Ширина = 15;
		
		Для Каждого ЭлементСписка Из СтруктураВариантовВыполнения.СписокВариантов Цикл
			НоваяКомандаФормы = Команды.Добавить("Команда_"+СокрЛП(Строка(ЭлементСписка.Значение)));
			НоваяКомандаФормы.Заголовок                 = ЭлементСписка.Представление;
			НоваяКомандаФормы.Действие                  = "ВыполнениеЗадачиПоУсловию";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			
			НовыйПунктМеню = Элементы.Вставить("Кнопка_"+СокрЛП(Строка(ЭлементСписка.Значение)), Тип("КнопкаФормы"), ПодменюКоманд);
			НовыйПунктМеню.ИмяКоманды			= "Команда_"+СокрЛП(Строка(ЭлементСписка.Значение));
			НовыйПунктМеню.Заголовок			= ЭлементСписка.Представление;
			//НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.Текст;
			КнопкаПоУмолчанию					= ЭлементСписка.Пометка;
			НовыйПунктМеню.Пометка				= ЭлементСписка.Пометка;
			НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеОснования(ИмяДокумента)
	
	СинонимДокумента	= Метаданные.НайтиПоТипу(Тип("ДокументСсылка."+ИмяДокумента)).Синоним;
	
	СписокОснований = Новый СписокЗначений;
	
	Для Каждого СтрокаТаб Из ТаблицаТипов Цикл
		Если СтрокаТаб.ВидОбъекта.ТипЗначения.СодержитТип(Тип("ДокументСсылка."+ИмяДокумента)) Тогда
			Если ЗначениеЗаполнено(СтрокаТаб.ЭтапОснования) Тогда
				
				Если СтрокаТаб.ЭтапОснования.Вид = Перечисления.CRM_ВидыТочекМаршрута.Старт Тогда
					
					МассивСсылок = Новый Массив;
					
					//Если ЗначениеЗаполнено(Объект.БизнесПроцесс.Предмет) И НЕ ТипЗнч(Объект.БизнесПроцесс.Предмет) = Тип("ДокументСсылка.удалитьCRM_Сделка") Тогда
					Если ЗначениеЗаполнено(Объект.БизнесПроцесс.Предмет) Тогда
						МассивСсылок.Добавить(Объект.БизнесПроцесс.Предмет);
					Иначе
						МассивСсылок.Добавить(Объект.БизнесПроцесс.Ссылка);
					КонецЕсли;
					СписокОснований.Добавить(МассивСсылок,"Основание бизнес-процесса");
				Иначе
					Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
					Набор.Отбор.БизнесПроцесс.Установить(Объект.БизнесПроцесс);
					Набор.Отбор.ТочкаМаршрута.Установить(СтрокаТаб.ЭтапОснования);
					Набор.Прочитать();
					
					Если Набор.Количество() > 0 Тогда
						МассивСсылок = Набор.ВыгрузитьКолонку("Объект");
						СписокОснований.Добавить(МассивСсылок,НСтр("ru = 'Документы этапа: '") + СтрокаТаб.ЭтапОснования.Наименование);
					КонецЕсли;
				КонецЕсли;
			Иначе
				//Если ЗначениеЗаполнено(Объект.БизнесПроцесс.Предмет) И НЕ ТипЗнч(Объект.БизнесПроцесс.Предмет) = Тип("ДокументСсылка.удалитьCRM_Сделка") Тогда
				Если ЗначениеЗаполнено(Объект.БизнесПроцесс.Предмет) Тогда
					МассивСсылок = Новый Массив;
					МассивСсылок.Добавить(Объект.БизнесПроцесс.Предмет);
					
					СписокОснований.Добавить(МассивСсылок,"Основание бизнес-процесса");
				КонецЕсли;
				
				Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
				Набор.Отбор.БизнесПроцесс.Установить(Объект.БизнесПроцесс);
				Набор.Прочитать();
				
				ОписаниеТипаЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный));
				ТабНабора = Набор.Выгрузить();
				ТабНабора.Колонки.Добавить("Порядок",ОписаниеТипаЧисло);
				
				Для Каждого СтрокаТаб Из ТабНабора Цикл
					СтрокаТаб.Порядок = СтрокаТаб.ТочкаМаршрута.РеквизитДопУпорядочивания;
				КонецЦикла;
				ТабНабора.Сортировать("Порядок Возр");
				
				ТекущийЭтап = Неопределено;
				МассивСсылок = Новый Массив;
				Для Каждого СтрокаТаб Из ТабНабора Цикл
					
					Если НЕ ТекущийЭтап = СтрокаТаб.ТочкаМаршрута Тогда
						Если МассивСсылок.Количество() > 0 Тогда
							СписокОснований.Добавить(МассивСсылок,ТекущийЭтап.Наименование);
							МассивСсылок = Новый Массив;
						КонецЕсли;
						
						ТекущийЭтап = СтрокаТаб.ТочкаМаршрута;
					КонецЕсли;
					
					МассивСсылок.Добавить(СтрокаТаб.Объект);
				КонецЦикла;
				
				Если МассивСсылок.Количество() > 0 Тогда
					СписокОснований.Добавить(МассивСсылок,НСтр("ru = 'Документы этапа: '") + ТекущийЭтап.Наименование);
				КонецЕсли;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("СписокСсылок,ИмяДокумента",СписокОснований,СинонимДокумента);
	
КонецФункции

&НаСервере
Функция ИмяМетаданных(ВидДанных, Данные)
	Возврат Метаданные[ВидДанных][Данные].ПолноеИмя();
КонецФункции

&НаКлиенте
Процедура ВвестиОбъект(ПолноеИмяОбъекта)
	
	Если СтрНайти(ПолноеИмяОбъекта,"Документ.") > 0 Тогда
		
		Если СтрНайти(ПолноеИмяОбъекта,".ЭлектронноеПисьмоВходящее") > 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Создание Входящих писем запрещено. Воспользуйтесь кнопкой ""Выбрать документ""'"));
			Возврат;
		КонецЕсли;
		
		ИмяДокумента = СтрЗаменить(ПолноеИмяОбъекта, "Документ.", "");
		Если ИмяДокумента = "ТелефонныйЗвонок" Тогда
			#Если Вебклиент Тогда
				Состояние(Нстр("ru = 'Работа СофтФона невозможна в web-клиенте!'"));
			#Иначе
				Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
					Возврат;
				КонецЕсли;	
				СписокОбъектов = ПолучитьСписокУчастников();
				Если СписокОбъектов.Количество() > 0 Тогда
					сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, Новый Структура("Основание", Объект.Ссылка));
				КонецЕсли;	
			#КонецЕсли
		Иначе
			ПараметрыФормы = ПроверитьНаличиеОснования(ИмяДокумента);
			Если ПараметрыФормы.СписокСсылок.Количество() > 0 Тогда
				
				Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
					ПараметрыФормы.Вставить("БизнесПроцесс", Объект.БизнесПроцесс);
				КонецЕсли;							
				ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиОбъектЗавершение", ЭтотОбъект, ИмяДокумента);
				ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаВыбораОснования", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
				ОткрытьФорму(ПолноеИмяОбъекта + ".ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(ПолноеИмяОбъекта,"Справочник.") > 0 Тогда
		
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму(ПолноеИмяОбъекта + ".ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОбъектЗавершение(ВыбЗнач, ИмяДокумента) Экспорт
	
	Если НЕ ВыбЗнач = Неопределено Тогда
		ПараметрыФормы = Новый Структура("Основание", ВыбЗнач);
		ПараметрыФормы.Вставить("СозданИзЭтапаСделки", Истина);
		ОткрытьФорму("Документ."+ИмяДокумента+".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьРеквизитПартнера(ИмяДокумента)
	
	МетаданныеДокумента = Метаданные.Документы[ИмяДокумента];
	
	Возврат CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Партнер", МетаданныеДокумента);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьПартнера(БизнесПроцесс)
	
	Если ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда
		Возврат БизнесПроцесс.Партнер;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокОбъектов()
	
	Возврат ОбъектыПоБизнесПроцессам.Выгрузить(,"Объект").ВыгрузитьКолонку("Объект");
	
КонецФункции

&НаКлиенте
Процедура ВыбратьОбъект(ПолноеИмяОбъекта)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьОбъектЗавершение", ЭтотОбъект);
	
	Если СтрНайти(ПолноеИмяОбъекта,"Документ.") > 0 Тогда
		
		ИмяДокумента = СтрЗаменить(ПолноеИмяОбъекта, "Документ.", "");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		Если Найти(ИмяДокумента, "Событие") > 0 Тогда
			Партнер = ВернутьПартнера(Объект.БизнесПроцесс);
			ПараметрыФормы.Вставить("ПартнерБП", Партнер);
		КонецЕсли;					
		
		ФормаВыбора = ПолучитьФорму("Документ."+ИмяДокумента+".ФормаВыбора",ПараметрыФормы,ЭтотОбъект);
		
		Если ОбъектыПоБизнесПроцессам.Количество() > 0 Тогда
			СписокОтбора = Новый СписокЗначений();
			СписокОтбора.ЗагрузитьЗначения(ПолучитьСписокОбъектов());
			
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеВСписке;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбора.ПравоеЗначение	= СписокОтбора;
			ЭлементОтбора.Использование		= Истина;
			
		КонецЕсли;
		
		Если ЕстьРеквизитПартнера(ИмяДокумента) Тогда
			Партнер = ВернутьПартнера(Объект.БизнесПроцесс);
			Если НЕ Партнер = Неопределено Тогда
				ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Партнер");
				ЭлементОтбора.ПравоеЗначение	= Партнер;
				ЭлементОтбора.Использование		= Истина;
			КонецЕсли;
		КонецЕсли;
		
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
	Если СтрНайти(ПолноеИмяОбъекта,"Справочник.") > 0 Тогда
		
		ИмяСправочника = СтрЗаменить(ПолноеИмяОбъекта, "Справочник.", "");
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		Если ОбъектыПоБизнесПроцессам.Количество() > 0 Тогда
			СписокОтбора = Новый СписокЗначений();
			СписокОтбора.ЗагрузитьЗначения(ПолучитьСписокОбъектов());
			
			ФормаВыбора = ПолучитьФорму("Справочник."+ИмяСправочника+".ФормаВыбора",ПараметрыФормы,ЭтотОбъект);
			
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеВСписке;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбора.ПравоеЗначение	= СписокОтбора;
			ЭлементОтбора.Использование		= Истина;
			
			ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
			ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВыбора.Открыть();
		Иначе
			ОткрытьФорму("Справочник."+ИмяСправочника+".ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОбъектЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		ДобавитьЗаписьПоОбъекту(Результат);
		// Обновляем описание БП в поле "История".
		СтрТекстHTMLЗадачи		= "";
		СтрТекстHTMLЗадачи		= ПолучитьТекстHTMLЗадачи(Объект.Ссылка,УникальныйИдентификатор);
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавлениеКнопокНаПанельОбъектов()
	
	СтруктураТипов = CRM_БизнесПроцессыСервер.ПолучитьСтруктуруТипов_Новая(Объект.Ссылка);
	
	Если СтруктураТипов.ТаблицаТипов.Количество() > 0 Тогда
		СписокОбязательныхТипов = СтруктураТипов.СписокОбязательныхТипов;
		Для Каждого СтрокаТаб Из СтруктураТипов.ТаблицаТипов Цикл
			НоваяСтрока = ТаблицаТипов.Добавить();
			НоваяСтрока.ВидОбъекта		= СтрокаТаб.ВидОбъекта;
			НоваяСтрока.ЭтапОснования	= СтрокаТаб.ЭтапОснования;
			НоваяСтрока.Обязательный	= СтрокаТаб.Обязательный;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаТипов.Количество() > 0 Тогда
		
		ГиперссылкаВвести = Элементы.Добавить("ГиперссылкаВвести",Тип("ДекорацияФормы"), Элементы.ГруппаПанельГиперссылок);
		ГиперссылкаВвести.Заголовок = НСтр("ru = 'Создать документ'");
		ГиперссылкаВвести.Вид = ВидДекорацииФормы.Надпись;
		ГиперссылкаВвести.Гиперссылка = Истина;
		ГиперссылкаВвести.УстановитьДействие("Нажатие", "Подключаемый_ГиперссылкаВвестиНажатие");
		
		ГиперссылкаВыбрать = Элементы.Добавить("ГиперссылкаВыбрать",Тип("ДекорацияФормы"), Элементы.ГруппаПанельГиперссылок);
		ГиперссылкаВыбрать.Заголовок = НСтр("ru = 'Выбрать документ'");
		ГиперссылкаВыбрать.Вид = ВидДекорацииФормы.Надпись;
		ГиперссылкаВыбрать.Гиперссылка = Истина;
		ГиперссылкаВыбрать.УстановитьДействие("Нажатие", "Подключаемый_ГиперссылкаВыбратьНажатие");
		
		Для Каждого СтрокаТаб Из ТаблицаТипов Цикл
			МассивТипов = СтрокаТаб.ВидОбъекта.ТипЗначения.Типы();
			
			МетаданныеДок	= Метаданные.НайтиПоТипу(МассивТипов[0]);
			
			СписокТипов.Добавить(МетаданныеДок.ПолноеИмя(),МетаданныеДок.Синоним);
		КонецЦикла;
	Иначе
		Элементы.ГруппаОбъекты.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьЗапросНаПереносСрокаИсполнения(ТекстПричиныПереноса)
	
	CRM_БизнесПроцессыСервер.ОтправитьЗапросНаПереносСрокаИсполнения(Объект.Ссылка, ТекстПричиныПереноса);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьЗапросаНаИзменениеСрокаИсполнения()
	
	Если ЗначениеЗаполнено(Объект.CRM_ПеренестиСрокИсполненияНа) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВедущаяЗадача",Объект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_БизнесПроцесс.Ссылка КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.Ссылка КАК Задача
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО CRM_БизнесПроцесс.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
		|ГДЕ
		|	НЕ CRM_БизнесПроцесс.Завершен
		|	И CRM_БизнесПроцесс.ВедущаяЗадача = &ВедущаяЗадача
		|	И НЕ ЗадачаИсполнителя.Выполнена";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Элементы.ДекорацияЗапросНаПереадресацию.Заголовок = НСтр("ru = 'Отправлен запрос на перенос срока исполнения. Новый срок: '") + 
			Формат(Объект.CRM_ПеренестиСрокИсполненияНа,"ДФ='дд.ММ.гг ЧЧ:мм'") +
			НСтр("ru = '. Ответственный: '") + Строка(Выборка.Задача.Исполнитель);
			Элементы.ДекорацияЗапросНаПереадресацию.Видимость = Истина;
		Иначе
			Элементы.ДекорацияЗапросНаПереадресацию.Заголовок = "";
			Элементы.ДекорацияЗапросНаПереадресацию.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ДекорацияЗапросНаПереадресацию.Заголовок = "";
		Элементы.ДекорацияЗапросНаПереадресацию.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьСтруктуруДанных()
	
	МассивКатегорий = Новый Массив();
	Для Каждого КатегорияСтрока Из Объект.CRM_Категории Цикл
		МассивКатегорий.Добавить(КатегорияСтрока.Категория);
	КонецЦикла;
	
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("БизнесПроцессСсылка", Объект.БизнесПроцесс);
	СтруктураДанных.Вставить("Автор", Объект.БизнесПроцесс.Автор);
	СтруктураДанных.Вставить("Важность", Объект.БизнесПроцесс.Важность);
	СтруктураДанных.Вставить("Дата", Объект.БизнесПроцесс.Дата);
	СтруктураДанных.Вставить("ДатаЗавершения", Объект.БизнесПроцесс.ДатаЗавершения);
	СтруктураДанных.Вставить("КартаМаршрута", Объект.БизнесПроцесс.КартаМаршрута);
	СтруктураДанных.Вставить("КонтактноеЛицо", Объект.БизнесПроцесс.КонтактноеЛицо);
	СтруктураДанных.Вставить("Наименование", Объект.БизнесПроцесс.Наименование);
	СтруктураДанных.Вставить("Номер", Объект.БизнесПроцесс.Номер);
	СтруктураДанных.Вставить("Описание", Объект.БизнесПроцесс.Описание);
	СтруктураДанных.Вставить("Организация", Объект.БизнесПроцесс.Организация);
	СтруктураДанных.Вставить("Ответственный", Объект.БизнесПроцесс.Ответственный);
	СтруктураДанных.Вставить("Партнер", Объект.БизнесПроцесс.Партнер);
	СтруктураДанных.Вставить("ПланируемаяДатаЗавершения", Объект.БизнесПроцесс.ПланируемаяДатаЗавершения);
	СтруктураДанных.Вставить("Подразделение", Объект.БизнесПроцесс.Подразделение);
	СтруктураДанных.Вставить("Проект", Объект.БизнесПроцесс.Проект);
	СтруктураДанных.Вставить("Сумма", Объект.БизнесПроцесс.Сумма);
	СтруктураДанных.Вставить("Предмет", Объект.БизнесПроцесс.предмет);
	СтруктураДанных.Вставить("СостояниеБизнесПроцесса", СформироватьСтрокуСостоянияБизнесПроцесса());
	
	
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ДатаНачала);
	ДатаНачало	= ДатаВремя.Дата;
	ВремяНачало	= ДатаВремя.Время;
	
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.СрокИсполнения);
	ДатаОкончание	= ДатаВремя.Дата;
	ВремяОкончание	= ДатаВремя.Время;
	
	СтруктураДанных.Вставить("ЗадачаВремяОкончание", ВремяОкончание);
	СтруктураДанных.Вставить("ЗадачаДатаОкончание", ДатаОкончание);
	СтруктураДанных.Вставить("МассивКатегорий", МассивКатегорий);
	СтруктураДанных.Вставить("CRM_ОсновнаяКатегория", Объект.CRM_ОсновнаяКатегория);
	СтруктураДанных.Вставить("Исполнитель", Объект.Исполнитель);
	
	СтруктураДанных.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Функция СформироватьСтрокуСостоянияБизнесПроцесса()
	
	СтрокаСостояния = "";
	мВысота = 1;
	
	Если   Объект.БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен Тогда
		СтрокаАктивности = "(Активен)";
	ИначеЕсли Объект.БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда 
		СтрокаАктивности = "(Остановлен)";
	Иначе
		СтрокаАктивности = "";
	КонецЕсли;
	
	Если НЕ Объект.БизнесПроцесс.Стартован Тогда
		СтрокаСостояния = СтрокаСостояния + "Не стартован ";
		СтрокаСостояния = СтрокаСостояния + СтрокаАктивности;
	Иначе
		Если НЕ Объект.БизнесПроцесс.Завершен Тогда
			СтрокаСостояния = СтрокаСостояния + "Стартован ";
			СтрокаСостояния = СтрокаСостояния + СтрокаАктивности;
		ИначеЕсли Объект.БизнесПроцесс.ЗавершенДосрочно Тогда
			СтрокаСостояния = СтрокаСостояния + "Завершен досрочно " + "("+Объект.БизнесПроцесс.ВариантЗавершения+") по причине: " + Строка(Объект.БизнесПроцесс.ПричинаДосрочногоЗавершения);
			мВысота = 2;
		Иначе
			СтрокаСостояния = СтрокаСостояния + "Завершен " + "("+Объект.БизнесПроцесс.ВариантЗавершения+")";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("СтрокаСостояния,Высота",СтрокаСостояния,мВысота);
	
КонецФункции

&НаСервере
Процедура ЗаписатьИзмененияБизнесПроцесса(СтруктураДанных)
	
	БизнесПроцессОбъект = Объект.БизнесПроцесс.ПолучитьОбъект();
	БизнесПроцессОбъект.Важность = СтруктураДанных.Важность;
	БизнесПроцессОбъект.КонтактноеЛицо = СтруктураДанных.КонтактноеЛицо;
	БизнесПроцессОбъект.Наименование = СтруктураДанных.Наименование;
	БизнесПроцессОбъект.Описание = СтруктураДанных.Описание;
	БизнесПроцессОбъект.Организация = СтруктураДанных.Организация;
	БизнесПроцессОбъект.Партнер = СтруктураДанных.Партнер;
	БизнесПроцессОбъект.ПланируемаяДатаЗавершения = СтруктураДанных.ПланируемаяДатаЗавершения;
	БизнесПроцессОбъект.Подразделение = СтруктураДанных.Подразделение;
	БизнесПроцессОбъект.Сумма = СтруктураДанных.Сумма;
	БизнесПроцессОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗафискироватьИзмененияЗадачи(СтруктураДанных)
	
	
	Объект.СрокИсполнения = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(СтруктураДанных.ДатаОкончание, СтруктураДанных.ВремяОкончание);
	Объект.CRM_ОсновнаяКатегория = СтруктураДанных.CRM_ОсновнаяКатегория;
	
	Объект.CRM_Категории.Очистить();
	Для Каждого Категория Из СтруктураДанных.МассивКатегорий Цикл
		НоваяСтрока = Объект.CRM_Категории.Добавить();
		НоваяСтрока.Категория = Категория;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеДопФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("ИзмененБизнесПроцесс") Тогда
			Если Результат.ИзмененБизнесПроцесс Тогда
				ЗаписатьИзмененияБизнесПроцесса(Результат);
				Прочитать();
				ОбновитьОтображениеДанных();
				
				Если НЕ Объект.CRM_Партнер = Результат.Партнер Тогда
					Объект.CRM_Партнер = Результат.Партнер;
					Модифицированность =Истина;
				КонецЕсли;
				
				Если НЕ Объект.CRM_КонтактноеЛицо = Результат.КонтактноеЛицо Тогда
					Объект.CRM_КонтактноеЛицо = Результат.КонтактноеЛицо;
					Модифицированность =Истина;
				КонецЕсли;
			КонецЕслИ;
		КонецЕслИ;
		
		Если Результат.Свойство("ИзмененаЗадача") Тогда
			Если Результат.ИзмененаЗадача Тогда
				ЗафискироватьИзмененияЗадачи(Результат);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.Свойство("ПараметрыДосрочногоЗавершения") Тогда
			ЗавершитьДосрочно(Результат.ПараметрыДосрочногоЗавершения);
		КонецЕсли;
	КонецЕсли;
	Прочитать();
	ОбновитьНаименование();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименование()
	
	Если Объект.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
		Если Объект.CRM_ТочкаМаршрута.Имя = "Действие1" Тогда
			Наименование			= Объект.БизнесПроцесс.Наименование;
		ИначеЕсли Объект.CRM_ТочкаМаршрута.Имя = "Действие2" Тогда
			Наименование			= "Проверить: """+Объект.БизнесПроцесс.Наименование+"""";
		Иначе
			Наименование			= Объект.CRM_ТочкаМаршрута.Наименование;
		КонецЕсли;
	Иначе
		Наименование = Объект.Наименование + " ("+Объект.CRM_ТочкаМаршрута.Наименование+")";
	КонецЕсли;
	Если Объект.Наименование <> Наименование Тогда
		СтрТекстHTMLЗадачи = СтрЗаменить(СтрТекстHTMLЗадачи, Объект.Наименование, Наименование);
		Объект.Наименование = Наименование;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДосрочно(ПараметрыДосрочногоЗавершения)
	
	Объект.CRM_ЗавершенДосрочно	= истина;
	Объект.CRM_Неудача			= истина;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Объект.Ссылка);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Задача выполнена'"),
	ПолучитьНавигационнуюСсылку(Объект.Ссылка), Строка(Объект.Ссылка));
	
	Оповестить("ЗадачаВыполнена", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Объект.Ссылка, 2));
	
	ПараметрыДосрочногоЗавершения.Вставить("Задача"					,Объект.Ссылка);
	ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	,Объект.CRM_ТочкаМаршрута);
	CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения);
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьДату()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаСервере
Функция ПолучитьИсполнителя()
	
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		
		Возврат Объект.Исполнитель;
		
	Иначе
		
		Возврат  Объект.РольИсполнителя;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьКонтактныеЛицаПартнера(Партнер)
	
	КонтактныеЛица = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактныеЛицаПартнеров.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец = &Владелец
	|	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец",Партнер);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КонтактныеЛица.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат КонтактныеЛица;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьКонтактноеЛицо(БизнесПроцесс)
	
	Если ЗначениеЗаполнено(БизнесПроцесс.КонтактноеЛицо) Тогда
		Возврат БизнесПроцесс.КонтактноеЛицо;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
// Функция возвращает список участников.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений	- Список участников.
//
Функция ПолучитьСписокУчастников()
	СписокУчастников = Новый СписокЗначений;
	Партнер = ВернутьПартнера(Объект.БизнесПроцесс);
	Если ЗначениеЗаполнено(Партнер) Тогда
		СписокУчастников.Добавить(Партнер);
	КонецЕсли;	
	КонтактноеЛицо = ВернутьКонтактноеЛицо(Объект.БизнесПроцесс);
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		СписокУчастников.Добавить(КонтактноеЛицо);
	Иначе
		Для Каждого КонтактноеЛицо Из ПолучитьКонтактныеЛицаПартнера(Партнер) Цикл
			СписокУчастников.Добавить(КонтактноеЛицо.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат СписокУчастников;
КонецФункции // ПолучитьСписокУчастников()

&НаСервере
Процедура ДоступностьЭлементов()
	
	ДоступноПользователю = CRM_БизнесПроцессыСервер.ЗадачаДоступнаДляПринятияКИсполнению(Объект.Ссылка);
	
	ТолькоПросмотр = Объект.Выполнена ИЛИ НЕ ДоступноПользователю;
	
	Если Не ДоступноПользователю Тогда //Павелко, CRM-69, 18.12.2019
		ТекущийПользовательЯвляетсяДелегатом(ДоступноПользователю);
	КонецЕсли;	
	
	ДоступностьЭлементов = (Объект.ПринятаКИсполнению И Не Объект.Выполнена И Объект.Исполнитель = ТекущийПользователь);
	Элементы.ГруппаКнопокЛево.Доступность = ДоступностьЭлементов;
	Элементы.ГруппаВыполнить.Доступность = ДоступностьЭлементов;
	Элементы.ГруппаВзаимодействияОбщая.Доступность = ДоступностьЭлементов;
	Элементы.ПеренестиСрок.Доступность = ДоступностьЭлементов;
	Элементы.ВвестиКомментарий.Доступность = ДоступностьЭлементов;
	Элементы.Избранный.ТолькоПросмотр = НЕ ДоступностьЭлементов;
	Элементы.ПринятьКИсполнению.Доступность = ДоступностьЭлементов ИЛИ (Не Объект.ПринятаКИсполнению И ДоступноПользователю);
	Элементы.Перенаправить.Доступность = Не Объект.Выполнена И ДоступноПользователю;
	Элементы.ПринятьКИсполнению.Пометка	= Объект.ПринятаКИсполнению;
	
	// ++ VOG Солодов В.В. 01.04.2020 CRM-468
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаРеквизитыТочкиМаршрута",
		"Доступность",
		(Объект.ПринятаКИсполнению И Не Объект.Выполнена));
	// -- VOG Солодов В.В. 01.04.2020
	
КонецПроцедуры

&НаСервере
Процедура ТекущийПользовательЯвляетсяДелегатом(ДоступноПользователю) //Павелко, CRM-69, 18.12.2019
	
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(Объект.БизнесПроцесс.Автор);
	МассивПользователей.Добавить(Объект.БизнесПроцесс.Ответственный);
	МассивПользователей.Добавить(Объект.Исполнитель);
	
	ЭтоДелегат = РегистрыСведений.вогИсполнителиРолейИДелегаты.ИсполнительЯвляетсяДелегатом(
		МассивПользователей, ТекущийПользователь, "ПроцессыИЗадачи");
		
	Если ЭтоДелегат Тогда
		ДоступноПользователю = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьПоОбъекту(НовыйОбъект)
	
	НоваяСтрока					= ОбъектыПоБизнесПроцессам.Добавить();
	НоваяСтрока.БизнесПроцесс	= Объект.БизнесПроцесс;;
	НоваяСтрока.Задача			= Объект.Ссылка;
	НоваяСтрока.ТочкаМаршрута	= Объект.CRM_ТочкаМаршрута;
	НоваяСтрока.Объект			= НовыйОбъект;
	НоваяСтрока.ДатаРегистрации	= ТекущаяДатаСеанса();
	
	Для Каждого СтрокаТипа Из ТаблицаТипов Цикл
		Если СтрокаТипа.ВидОбъекта.ТипЗначения.СодержитТип(ТипЗнч(НовыйОбъект)) Тогда
			НоваяСтрока.ВидОбъекта = СтрокаТипа.ВидОбъекта;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
	Набор.Отбор.БизнесПроцесс.Установить(НоваяСтрока.БизнесПроцесс);
	Набор.Отбор.Объект.Установить(НоваяСтрока.Объект);
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
	
	ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.БизнесПроцесс	= НоваяСтрока.БизнесПроцесс;
	ЗаписьРегистра.Задача			= НоваяСтрока.Задача;
	ЗаписьРегистра.ТочкаМаршрута	= НоваяСтрока.ТочкаМаршрута;
	ЗаписьРегистра.Объект			= НоваяСтрока.Объект;
	ЗаписьРегистра.ДатаРегистрации	= НоваяСтрока.ДатаРегистрации;
	ЗаписьРегистра.ВидОбъекта		= НоваяСтрока.ВидОбъекта;
	ЗаписьРегистра.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещенияЗаписиНовогоОбъекта(НовыйОбъект)
	
	Если НЕ Метаданные.ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Тип.Типы().Найти(ТипЗнч(НовыйОбъект)) = Неопределено Тогда
		
		ДобавитьЗаписьПоОбъекту(НовыйОбъект);
		
		СтрТекстHTMLЗадачи		= "";
		СтрТекстHTMLЗадачи		= ПолучитьТекстHTMLЗадачи(Объект.Ссылка,УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписьПоОбъекту(ТекДанные)
	
	ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.БизнесПроцесс	= ТекДанные.БизнесПроцесс;
	ЗаписьРегистра.Задача			= ТекДанные.Задача;
	ЗаписьРегистра.ТочкаМаршрута	= ТекДанные.ТочкаМаршрута;
	ЗаписьРегистра.Объект			= ТекДанные.Объект;
	ЗаписьРегистра.Прочитать();
	Если ЗаписьРегистра.Выбран() Тогда
		ЗаписьРегистра.Удалить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидВзаимодействия()
	Возврат Справочники.CRM_ВидыВзаимодействий.ЛичнаяЗадача;
КонецФункции	

&НаСервере
Функция ПолучитьСтруктуруЗаполненияВзаимодействия()
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Автор", Объект.Исполнитель);
	СтруктураЗаполнения.Вставить("КонтактноеЛицо", Объект.CRM_КонтактноеЛицо);
	СтруктураЗаполнения.Вставить("Партнер", Объект.CRM_Партнер);
	СтруктураЗаполнения.Вставить("Подразделение", Объект.Исполнитель.Подразделение);
	СтруктураЗаполнения.Вставить("Содержание", "");
	СтруктураЗаполнения.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	СтруктураЗаполнения.Вставить("ВремяС", ТекущаяДатаСеанса());
	СтруктураЗаполнения.Вставить("ВремяПо", ТекущаяДатаСеанса()+60*15);
	БаллыМакс = Объект.Исполнитель.Подразделение.CRM_МаксимальноеКоличествоБалловВДень;
	Баллы = Цел(БаллыМакс/28800*(60*15));
	СтруктураЗаполнения.Вставить("Баллы", Баллы);
	Возврат СтруктураЗаполнения;
КонецФункции	

&НаСервере
// Функция формирует список рабочих часов с учетом настроек пользователя от начала рабочего дня 
// до окончания с интервалом в полчаса.
//
// Параметры:
// 	Время - Дата
//
// Возвращаемое значение:
//	СписокЧасов - СписокЗначений
Функция ВыбратьВремяИзСписка(Знач СтароеЗначениеВСписке)
	
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСписокРабочегоВремениПользователя(Объект.Исполнитель);
	
КонецФункции

&НаСервере
Функция ПолучитьБаллыПодразделения()
	Возврат Объект.Исполнитель.Подразделение.CRM_МаксимальноеКоличествоБалловВДень
КонецФункции	

&НаКлиенте
Процедура ПересчитатьБаллы(ТекДанные)
	БаллыМакс = ПолучитьБаллыПодразделения();
	ТекДанные.Баллы = Мин(БаллыМакс, Цел(БаллыМакс/28800*(ТекДанные.ВремяПо - ТекДанные.ВремяС)));
КонецПроцедуры	

&НаКлиенте
// Процедура обработки ответа на вопрос пользователя Отменить / Запланировать взаимодействие по нажатию del.
//
// Параметры:
// Параметры - КодВозвратаДиалога
// дополнительно - строка ТЧ, для которой обрабатываем нажатие.
Процедура ОбработкаОтменыВзаимодействия(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		Если Не ЗначениеЗаполнено(Дополнительно.Ссылка) Тогда
			Взаимодействия.Удалить(Дополнительно);		
			Возврат;
		КонецЕсли; 
		Если НЕ Дополнительно.ПервоначальнаяОтмена И Дополнительно.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
			Дополнительно.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Отменено");
			Дополнительно.ПервоначальнаяОтмена = Истина;
			
		Иначе
			Дополнительно.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано");
			Дополнительно.ПервоначальнаяОтмена = Ложь;
		КонецЕсли;
		Дополнительно.Изменено = Истина;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура записывает в реквизит ПлановаяДата (состав Дата и Время) выбранные пользователемДатаНачала (состав Дата) и
// Время.
//
// Параметры:
// ТекДанные - элементколлекции формы - строка табличной части.
//
Процедура ЗаписатьДатуНачалаВзаимодействия(ТекДанные)
	ТекДанные.ПлановаяДата = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ТекДанные.ДатаНачала, ТекДанные.ВремяС);
	Если ТекДанные.ВремяС+60*15 > ТекДанные.ВремяПо Тогда
		ТекДанные.ВремяПо = ТекДанные.ВремяС+60*15;	
	КонецЕсли;	
	ПересчитатьБаллы(ТекДанные);
	ТекДанные.Изменено = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура записывает в реквизит ПлановаяДата (состав Дата и Время) выбранные пользователемДатаНачала (состав Дата) и
// Время.
//
// Параметры:
// ТекДанные - элементколлекции формы - строка табличной части.
//
Процедура ЗаписатьПлановуюДатуОкончанияВзаимодействия(ТекДанные)
	ТекДанные.ПлановаяДатаЗавершение = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ТекДанные.ДатаНачала, ТекДанные.ВремяПо);
	Если ТекДанные.ВремяС > ТекДанные.ВремяПо Тогда
		ТекДанные.ВремяС = ТекДанные.ВремяПо;	
	КонецЕсли;	
	ПересчитатьБаллы(ТекДанные);
	ТекДанные.Изменено = Истина;
КонецПроцедуры

&НаСервере
// Процедура создания / изменения документов Взаимодействия, связанных с текущим документом Интерес.
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьВзаимодействияСервер(ТекущийОбъект)
	
	СсылкаНаЗадачу = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	
	// В начале обработаем уже существующие Взаимодействия
	Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
		Если ТекВзаимодействие.Изменено Тогда
			Если НЕ ТекВзаимодействие.Ссылка = Документы.CRM_Взаимодействие.ПустаяСсылка() Тогда
				
				ИзмененноеВзаимодействие = ТекВзаимодействие.Ссылка.ПолучитьОбъект();
				Если ТекВзаимодействие.Изменено Тогда
					//ВремяНаЗавершение = ?(ИзмененноеВзаимодействие.ПлановаяДатаЗавершение >= ИзмененноеВзаимодействие.ПлановаяДата,
					//	ИзмененноеВзаимодействие.ПлановаяДатаЗавершение - ИзмененноеВзаимодействие.ПлановаяДата, 60*15);
					ЗаполнитьЗначенияСвойств(ИзмененноеВзаимодействие, ТекВзаимодействие);
					//ИзмененноеВзаимодействие.ПлановаяДатаЗавершение = ИзмененноеВзаимодействие.ПлановаяДата + ВремяНаЗавершение;
				КонецЕсли;
				ИзмененноеВзаимодействие.Записать();
				ТекВзаимодействие.Изменено = Ложь;
				
			КонецЕсли;
			ОбновленыДатыВзаимодействий = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Обрабатываем новые Взаимодействия
	Для Каждого ТекВзаимодействие Из Взаимодействия Цикл
		Если ТекВзаимодействие.Изменено Тогда
			Если ТекВзаимодействие.Ссылка = Документы.CRM_Взаимодействие.ПустаяСсылка()
				ИЛИ ТекВзаимодействие.Ссылка.ПолучитьОбъект() = Неопределено Тогда
				НовоеВзаимодействие = Документы.CRM_Взаимодействие.СоздатьДокумент();
				Если ЗначениеЗаполнено(ТекВзаимодействие.Ссылка) Тогда
					НовоеВзаимодействие.УстановитьСсылкуНового(Документы.CRM_Взаимодействие.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекВзаимодействие.Ссылка.УникальныйИдентификатор())));
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НовоеВзаимодействие, ТекВзаимодействие);
				НовоеВзаимодействие.ДокументОснование		= ТекущийОбъект.Ссылка;
				Если Не ЗначениеЗаполнено(НовоеВзаимодействие.СтатусВзаимодействия) Тогда
					НовоеВзаимодействие.СтатусВзаимодействия	= Справочники.CRM_СостоянияСобытий.Запланировано;
				КонецЕсли;
				НовоеВзаимодействие.Партнер					= ТекущийОбъект.CRM_Партнер;
				НовоеВзаимодействие.КонтактноеЛицо			= ТекущийОбъект.CRM_КонтактноеЛицо;
				НовоеВзаимодействие.Дата					= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
				НовоеВзаимодействие.Ответственный			= ТекущийОбъект.Исполнитель;
				НовоеВзаимодействие.Записать();
				ТекВзаимодействие.Ссылка					= НовоеВзаимодействие.Ссылка;
				ТекВзаимодействие.Изменено					= Ложь;
			КонецЕсли;
			ОбновленыДатыВзаимодействий = Истина;
		КонецЕсли;
	КонецЦикла;
	
	//// Обновить первичное взаимодействие по интересу.
	//ТекущееПервичное = Взаимодействия[Взаимодействия.Количество()-1].Ссылка;
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//|	CRM_Взаимодействие.Ссылка
	//|ИЗ
	//|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	//|ГДЕ
	//|	CRM_Взаимодействие.ДокументОснование = &Интерес
	//|	И CRM_Взаимодействие.Первичное");
	//Запрос.УстановитьПараметр("Интерес", Объект.Ссылка);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	////Если выборка пустая, то текущее и будет первичным
	//Если Выборка.Количество() = 0 Тогда
	//	ОбъектНовое = ТекущееПервичное.ПолучитьОбъект();
	//	ОбъектНовое.Первичное = Истина;
	//	ОбъектНовое.Записать();
	//Иначе
	//	Пока Выборка.Следующий() Цикл
	//		Если Выборка.Ссылка <> ТекущееПервичное Тогда
	//			ОбъектСтарое = Выборка.Ссылка.ПолучитьОбъект();
	//			ОбъектСтарое.Первичное = Ложь;
	//			ОбъектСтарое.Записать();
	//			ОбъектНовое = ТекущееПервичное.ПолучитьОбъект();
	//			ОбъектНовое.Первичное = Истина;
	//			ОбъектНовое.Записать();
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры // ЗаписатьВзаимодействияСервер()

&НаСервере
// Функция возвращает перечень реквизитов таблицы Взаимодействия.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура - Перечень имен реквизитов.
//
Функция ПолучитьРеквизитыТаблицыВзаимодействий()
	РеквизитыТаблицы = ПолучитьРеквизиты("Взаимодействия");
	СтруктураРеквизитов = Новый Структура();
	Для Каждого Реквизит Из РеквизитыТаблицы Цикл
		СтруктураРеквизитов.Вставить(Реквизит.Имя);
	КонецЦикла;
	Возврат СтруктураРеквизитов;
КонецФункции

&НаКлиенте
// Функция проверяет, чтобы в таблице Взаимодействий не было пустых дат.
//
// Параметры:
// 	нет
//
// Возвращаемое значение:
//	Булево - Истина - есть пустые даты
//			 Ложь - нет пустых дат.
Функция ПроверитьЗаполнениеВзаимодействий()
	
	Результат = Ложь;
	
	НужныеСтроки = Взаимодействия.НайтиСтроки(Новый Структура("ДатаНачала",Дата("00010101")));
	Если НужныеСтроки.Количество() = 0 Тогда
		// Нет пустых дат взаимодействий.
	Иначе
		Для Каждого ТекСтрока Из НужныеСтроки Цикл
			Если ТекСтрока.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена дата взаимодействия. Запись задачи невозможна!'"), Объект.Ссылка,"Взаимодействия["+ Взаимодействия.Индекс(текСтрока) + "].ДатаНачала",);
				Результат = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НужныеСтроки = Взаимодействия.НайтиСтроки(Новый Структура("ВидВзаимодействия", ПредопределенноеЗначение("Справочник.CRM_ВидыВзаимодействий.ПустаяСсылка")));
	Если НужныеСтроки.Количество() = 0 Тогда
		// Нет пустых видов взаимодействий.
	Иначе
		Для Каждого ТекСтрока Из НужныеСтроки Цикл
			Если ТекСтрока.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен вид взаимодействия. Запись задачи невозможна!'"), Объект.Ссылка,);
				Результат = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НужныеСтроки = Взаимодействия.НайтиСтроки(Новый Структура("Содержание", ""));
	Если НужныеСтроки.Количество() = 0 Тогда
		// Нет пустых видов взаимодействий.
	Иначе
		Для Каждого ТекСтрока Из НужныеСтроки Цикл
			Если ТекСтрока.СтатусВзаимодействия = ПредопределенноеЗначение("Справочник.CRM_СостоянияСобытий.Запланировано") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено содержание взаимодействия. Запись задачи невозможна!'"), Объект.Ссылка,"Взаимодействия["+ Взаимодействия.Индекс(текСтрока) + "].Содержание",);
				Результат = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыСервер()
	//ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ДатаНачала);
	//ДатаНачало	= ДатаВремя.Дата;
	//ВремяНачало	= ДатаВремя.Время;
	
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.СрокИсполнения);
	ДатаОкончание	= ДатаВремя.Дата;
	ВремяОкончание	= ДатаВремя.Время;
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеВложений()
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.БизнесПроцесс);
КонецПроцедуры

// ++ Харченко Д.И. №  - 01.11.2018 / 
&НаКлиенте
Процедура Подключаемый_ОбработчикКоманды(Команда) Экспорт 
	
	СтрокаКоманды = CRM_БизнесПроцессыИЗадачиКлиент.НайтиСтрокуКоманды(ЭтотОбъект, Команда.Имя);
	
	Если СтрокаКоманды = Неопределено ИЛИ  Не ЗначениеЗаполнено(СтрокаКоманды.Обработчик) Тогда
		Возврат;
	КонецЕсли;
	
	Параметр1			 = СтрокаКоманды.Параметр1;
	Параметр2			 = СтрокаКоманды.Параметр2;
	Параметр3			 = СтрокаКоманды.Параметр3;
	Параметр4			 = СтрокаКоманды.Параметр4;
	Параметр5			 = СтрокаКоманды.Параметр5;
	
	Попытка
		Выполнить(СтрокаКоманды.Обработчик);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить команду. Причина: '") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОписаниеОповещения(Значение, ДополнительноеЗначение) Экспорт 
	
	Если ТипЗнч(ДополнительноеЗначение) = Тип("Структура") Тогда
		
		Если ДополнительноеЗначение.Свойство("КодВыполнения") 
			И ЗначениеЗаполнено(ДополнительноеЗначение.КодВыполнения) Тогда
			
			Если ДополнительноеЗначение.Свойство("НаСервере") Тогда
				
				Подключаемый_ОписаниеОповещенияСервер(Значение, ДополнительноеЗначение);
				
			Иначе 
				
				Если ДополнительноеЗначение.Свойство("Параметр1") Тогда
					Параметр1 = ДополнительноеЗначение.Параметр1;
				КонецЕсли;
				Если ДополнительноеЗначение.Свойство("Параметр2") Тогда
					Параметр2 = ДополнительноеЗначение.Параметр2;
				КонецЕсли;
				Если ДополнительноеЗначение.Свойство("Параметр3") Тогда
					Параметр3 = ДополнительноеЗначение.Параметр3;
				КонецЕсли;
				Если ДополнительноеЗначение.Свойство("Параметр4") Тогда
					Параметр4 = ДополнительноеЗначение.Параметр4;
				КонецЕсли;
				Если ДополнительноеЗначение.Свойство("Параметр5") Тогда
					Параметр5 = ДополнительноеЗначение.Параметр5;
				КонецЕсли;
				
				Попытка
					
					Выполнить(ДополнительноеЗначение.КодВыполнения);
					
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика опиания оповещения'") + ОписаниеОшибки();
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецПопытки;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_ОписаниеОповещенияСервер(Значение, ДополнительноеЗначение) Экспорт 
	
	Если ДополнительноеЗначение.Свойство("Параметр1") Тогда
		Параметр1 = ДополнительноеЗначение.Параметр1;
	КонецЕсли;
	Если ДополнительноеЗначение.Свойство("Параметр2") Тогда
		Параметр2 = ДополнительноеЗначение.Параметр2;
	КонецЕсли;
	Если ДополнительноеЗначение.Свойство("Параметр3") Тогда
		Параметр3 = ДополнительноеЗначение.Параметр3;
	КонецЕсли;
	Если ДополнительноеЗначение.Свойство("Параметр4") Тогда
		Параметр4 = ДополнительноеЗначение.Параметр4;
	КонецЕсли;
	Если ДополнительноеЗначение.Свойство("Параметр5") Тогда
		Параметр5 = ДополнительноеЗначение.Параметр5;
	КонецЕсли;
	
	Попытка
		
		Выполнить(ДополнительноеЗначение.КодВыполнения);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения обработчика опиания оповещения'") + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры
// -- Харченко Д.И. №  - 01.11.2018

//START Кайдашов 24/03/20 crm-468
&НаСервере
Процедура ВывестиРеквизитыПоТочкеМаршрута()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредметБП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БизнесПроцесс, "Предмет");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	вогОбъектыДляПроцесса.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.вогОбъектыДляПроцесса КАК вогОбъектыДляПроцесса
	|ГДЕ
	|	вогОбъектыДляПроцесса.Процесс = &Процесс";
	
	Запрос.УстановитьПараметр("Процесс", Объект.БизнесПроцесс);
	
	тзОбъектыДляПроцесса = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ТочкиМаршрутовРедактируемыеРеквизиты.Ссылка КАК Ссылка,
	|	CRM_ТочкиМаршрутовРедактируемыеРеквизиты.НомерСтроки КАК НомерСтроки,
	|	CRM_ТочкиМаршрутовРедактируемыеРеквизиты.ПутьКОбъекту КАК ПутьКОбъекту,
	|	CRM_ТочкиМаршрутовРедактируемыеРеквизиты.ПутьКРеквизиту КАК ПутьКРеквизиту,
	|	CRM_ТочкиМаршрутовРедактируемыеРеквизиты.ЭтоТабличнаяЧасть КАК ЭтоТабличнаяЧасть,
	|	CRM_ТочкиМаршрутовРедактируемыеРеквизиты.ЗаписыватьВРежимеОбменДанными КАК ЗаписыватьВРежимеОбменДанными,
	|	CRM_ТочкиМаршрутовРедактируемыеРеквизиты.Заголовок КАК Заголовок,
	|	CRM_ТочкиМаршрутовРедактируемыеРеквизиты.Обязательный КАК Обязательный,
	// ++ VOG Солодов В.В. 30.04.2020 CRM-601
	|	CRM_ТочкиМаршрутовРедактируемыеРеквизиты.ОбработчикПриЗаполнении КАК ОбработчикПриЗаполнении
	// -- VOG Солодов В.В. 30.04.2020 CRM-601
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов.РедактируемыеРеквизиты КАК CRM_ТочкиМаршрутовРедактируемыеРеквизиты
	|ГДЕ
	|	CRM_ТочкиМаршрутовРедактируемыеРеквизиты.Ссылка = &ТочкаМаршрута
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", Объект.CRM_ТочкаМаршрута);
	
	тзРеквизиты = Запрос.Выполнить().Выгрузить();
	
	Если тзРеквизиты.Количество() = 0 тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ;
	КонецЕсли;
	
	тзИсточникиРеквизитов = тзРеквизиты.Скопировать();
	
	тзЭлементыФормы = Новый ТаблицаЗначений;
	тзЭлементыФормы.Колонки.Добавить("ИмяЭлемента");
	тзЭлементыФормы.Колонки.Добавить("ПутьКДанным");
	тзЭлементыФормы.Колонки.Добавить("Заголовок");
	тзЭлементыФормы.Колонки.Добавить("ИмяГруппы");
	тзЭлементыФормы.Колонки.Добавить("Обязательный");
	тзЭлементыФормы.Колонки.Добавить("ОбработчикПриЗаполнении");
	
	//Сначала создадим элементы для одиночных реквизитов
	
	МассивНовыхРеквизитов 	= Новый Массив;
	МассивНовыхЭлементов 	= Новый Массив;
	
	Для Каждого строкаИсточникиРеквизитов Из тзИсточникиРеквизитов Цикл
		
		ОпределениеИсточника 		= "";
		ОпределениеТипа 			= "";
		ПозицияТочки 				= Найти(строкаИсточникиРеквизитов.ПутьКОбъекту, ".");
		
		Если ПозицияТочки > 0 Тогда
			ОпределениеИсточника 	= СокрЛП(Лев(строкаИсточникиРеквизитов.ПутьКОбъекту, ПозицияТочки));
			ОпределениеТипа 		= СокрЛП(Прав(строкаИсточникиРеквизитов.ПутьКОбъекту, СтрДлина(строкаИсточникиРеквизитов.ПутьКОбъекту) - ПозицияТочки));
		Иначе
			ОпределениеИсточника = СокрЛП(строкаИсточникиРеквизитов.ПутьКОбъекту);
		КонецЕсли;
		
		ОпределениеИсточника = СтрЗаменить(ОпределениеИсточника, ".", "");
		
		Если Не ЗначениеЗаполнено(строкаИсточникиРеквизитов.ПутьКРеквизиту)
			Или Не ЗначениеЗаполнено(ОпределениеТипа) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ТипОбъекта = Тип(ОпределениеТипа);
		Исключение
		КонецПопытки;
			
		Если ТипОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаРеквизитов = СоздатьГруппуПоТочкеМаршрута(
			ТипОбъекта,
			строкаИсточникиРеквизитов);
			
		Если НРег(ОпределениеИсточника) = НРег("ОбъектыДляПроцесса") тогда
			
			Для Каждого СтрокаОбъектыДляПроцесса Из тзОбъектыДляПроцесса Цикл
				
				Если ТипЗнч(СтрокаОбъектыДляПроцесса.Объект) <> ТипОбъекта Тогда
					Продолжить;
				КонецЕсли;
				
				СоздатьРеквизитыПоТочкеМаршрута(
					СтрокаОбъектыДляПроцесса.Объект,
					строкаИсточникиРеквизитов,
					МассивНовыхРеквизитов,
					тзЭлементыФормы,
					ГруппаРеквизитов);
				
			КонецЦикла;
			
		ИначеЕсли НРег(ОпределениеИсточника) = НРег("Предмет") Тогда
			
			Если ТипЗнч(ПредметБП) <> ТипОбъекта Тогда
				Продолжить;
			КонецЕсли;
			
			СоздатьРеквизитыПоТочкеМаршрута(
				ПредметБП,
				строкаИсточникиРеквизитов,
				МассивНовыхРеквизитов,
				тзЭлементыФормы,
				ГруппаРеквизитов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивНовыхРеквизитов);
	ЗаполнитьЗначенияРеквизитовПоТочкеМаршрута();
	
	//Создаем таблицы для табличных частей
	//Нужно ещё сделать
	
	//Создание элементов формы
	Для Каждого СтрокаЭлемент Из тзЭлементыФормы Цикл
		
		ГруппаФормы = Элементы.Найти(СтрокаЭлемент.ИмяГруппы);
		
		НовыйЭлемент 							= Элементы.Добавить(СтрокаЭлемент.ИмяЭлемента, Тип("ПолеФормы"), ГруппаФормы);
		НовыйЭлемент.Заголовок 					= СтрокаЭлемент.Заголовок;
		НовыйЭлемент.ПутьКДанным 				= СтрокаЭлемент.ПутьКДанным;
		
		Если ТипЗнч(ЭтотОбъект[СтрокаЭлемент.ПутьКДанным]) = Тип("Булево") Тогда
			НовыйЭлемент.Вид 						= ВидПоляФормы.ПолеФлажка;
		Иначе
			НовыйЭлемент.Вид 						= ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.АвтоОтметкаНезаполненного 	= СтрокаЭлемент.Обязательный;
		КонецЕсли;
		
		Декорация = Элементы.Добавить("Декорация_" + СтрокаЭлемент.ИмяЭлемента, Тип("ДекорацияФормы"), ГруппаФормы);
		Декорация.Вид 							= ВидДекорацииФормы.Надпись;
		Декорация.АвтоМаксимальнаяШирина 		= Ложь;
		Декорация.РастягиватьПоГоризонтали 		= Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 07.04.2020 CRM-468
Функция СоздатьГруппуПоТочкеМаршрута(ТипОбъекта, Знач строкаИсточникиРеквизитов)
	
	ПутьКРеквизиту = СокрЛП(строкаИсточникиРеквизитов.ПутьКРеквизиту);
	
	ИмяГруппыОбъекта = "ГруппаОбъекта_" + СокрЛП(ПутьКРеквизиту);
	ГруппаРеквизитов = Элементы.Найти(ИмяГруппыОбъекта);
	
	Если ГруппаРеквизитов = Неопределено Тогда
		
		ПредставлениеГруппы = "";
		
		Если ЗначениеЗаполнено(строкаИсточникиРеквизитов.Заголовок) Тогда
			ПредставлениеГруппы = строкаИсточникиРеквизитов.Заголовок;
		Иначе
			
			ПолноеИмяМетаданных 	= Метаданные.НайтиПоТипу(ТипОбъекта).ПолноеИмя();
			МенеджерОбъекта 		= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяМетаданных);
			СсылкаНаОбъект 			= МенеджерОбъекта.ПустаяСсылка();
			ОбъектМетаданных 		= СсылкаНаОбъект.Метаданные();
			РеквизитОбъекта 		= ОбъектМетаданных.Реквизиты.Найти(ПутьКРеквизиту);
			
			Если Не РеквизитОбъекта = Неопределено Тогда
				ПредставлениеГруппы 	= РеквизитОбъекта.Синоним;
			КонецЕсли;
				
		КонецЕсли;
		
		ГруппаРеквизитов = Элементы.Добавить(ИмяГруппыОбъекта, Тип("ГруппаФормы"), Элементы.ГруппаРеквизитыТочкиМаршрута);
		ГруппаРеквизитов.Заголовок 					= ПредставлениеГруппы;
		ГруппаРеквизитов.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаРеквизитов.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаРеквизитов.ЦветТекстаЗаголовка 		= ЦветаСтиля.ЦветТекстаФормы;
		ГруппаРеквизитов.ШрифтЗаголовка 			= Новый Шрифт(, 12, Истина);
		ГруппаРеквизитов.РастягиватьПоГоризонтали 	= Истина;
		ГруппаРеквизитов.ВертикальныйИнтервал 		= ИнтервалМеждуЭлементамиФормы.Полуторный;
		ГруппаРеквизитов.Поведение 					= ПоведениеОбычнойГруппы.Свертываемая;
		ГруппаРеквизитов.ОтображениеУправления 		= ОтображениеУправленияОбычнойГруппы.Картинка;
		
	КонецЕсли;
	
	Возврат ГруппаРеквизитов;
	
КонецФункции // -- VOG Солодов В.В. 07.04.2020

// ++ VOG Солодов В.В. 31.03.2020 CRM-468
&НаСервере
Процедура СоздатьРеквизитыПоТочкеМаршрута(Знач СсылкаНаОбъект, Знач строкаИсточникиРеквизитов, МассивРеквизитов, тзЭлементыФормы, ГруппаРеквизитов)
	
	ПутьКРеквизиту = СокрЛП(строкаИсточникиРеквизитов.ПутьКРеквизиту);
	
	Если Не ЗначениеЗаполнено(ПутьКРеквизиту) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных 		= СсылкаНаОбъект.Метаданные();
	РеквизитОбъекта 		= ОбъектМетаданных.Реквизиты.Найти(ПутьКРеквизиту);
	
	Если РеквизитОбъекта = Неопределено
		И Не НРег(ПутьКРеквизиту) = НРег("СогласоватьДоговор") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОбъекта 	= СсылкаНаОбъект.УникальныйИдентификатор();
	
	// Создание отдельной группы реквизита для объекта
	ШаблонИмениГруппы 		= НСтр("ru = 'ГруппаОбъекта_%1_%2'");
	ИмяГруппыОбъекта 		= СтрШаблон(ШаблонИмениГруппы, СтрЗаменить(ИдентификаторОбъекта, "-", "_"), СокрЛП(ПутьКРеквизиту));
	ГруппаОбъекта 			= Элементы.Найти(ИмяГруппыОбъекта);
	
	Если ГруппаОбъекта = Неопределено Тогда
		
		ГруппаОбъекта 						= Элементы.Добавить(ИмяГруппыОбъекта, Тип("ГруппаФормы"), ГруппаРеквизитов);
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.вогКоммерческиеСоглашения") тогда
			
			СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СсылкаНаОбъект,
				"ЮридическоеЛицо, ОтгрузкаПоСкануДоговораДо",
				Истина);
			
			ШаблонПредставления 	= НСтр("ru = '%1 %2'");
			ПредставлениеОбъекта 	= СтрШаблон(
				ШаблонПредставления,
				СокрЛП(Строка(СсылкаНаОбъект)),
				СокрЛП(СтруктураРеквизитов.ЮридическоеЛицо));
			
			Если СтруктураРеквизитов.ОтгрузкаПоСкануДоговораДо <> '00010101' Тогда
				
				ОтгрузкаПоСкануДоговораДо 	= Формат(СтруктураРеквизитов.ОтгрузкаПоСкануДоговораДо, "ДФ=dd.MM.yyyy");
				ШаблонПредставления 		= НСтр("ru = '%1; Отгрузка по скану договора до: %2'");
				ПредставлениеОбъекта 		= СтрШаблон(ШаблонПредставления, ПредставлениеОбъекта, ОтгрузкаПоСкануДоговораДо);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СсылкаНаОбъект,
				"НомерДоговора, вогДатаНачалаДействия, Владелец, вогОтгрузкаПоСкануДоговораДо",
				Истина);
				
			ДатаДоговора 			= СокрЛП(Строка(Формат(СтруктураРеквизитов.вогДатаНачалаДействия, "ДФ=dd.MM.yyyy")));
			ШаблонНаименования 		= НСтр("ru = '№ %1 от %2'");
			ПредставлениеОбъекта 	= СтрШаблон(ШаблонНаименования, СокрЛП(СтруктураРеквизитов.НомерДоговора), ДатаДоговора);
			
			Если ЗначениеЗаполнено(СтруктураРеквизитов.Владелец) Тогда
				
				ШаблонНаименования 		= НСтр("ru = '%1 юр.лицо %2 (%3)'");
				Партнер 				= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРеквизитов.Владелец, "Партнер", Истина);
				ПредставлениеОбъекта 	= СтрШаблон(
					ШаблонНаименования,
					ПредставлениеОбъекта,
					СокрЛП(СтруктураРеквизитов.Владелец),
					Партнер);
				
			КонецЕсли;
			
			Если СтруктураРеквизитов.вогОтгрузкаПоСкануДоговораДо <> '00010101' Тогда
				
				ШаблонНаименования 		= НСтр("ru = '%1; Отгрузка по скану договора до: %2'");
				ПредставлениеОбъекта 	= СтрШаблон(
					ШаблонНаименования,
					ПредставлениеОбъекта,
					Формат(СтруктураРеквизитов.вогОтгрузкаПоСкануДоговораДо, "ДФ=dd.MM.yyyy"));
				
			КонецЕсли;
			
		Иначе
			
			ШаблонПредставления 	= НСтр("ru = '%1 %2'");
			ПредставлениеОбъекта 	= СтрШаблон(
				ШаблонПредставления,
				ОбщегоНазначения.ПредставлениеОбъекта(ОбъектМетаданных),
				Строка(СсылкаНаОбъект));
			
		КонецЕсли;
		
		ГруппаОбъекта.Заголовок 				= ПредставлениеОбъекта;
		ГруппаОбъекта.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаОбъекта.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
		ГруппаОбъекта.ЦветТекстаЗаголовка 		= ЦветаСтиля.ГиперссылкаЦвет;
		ГруппаОбъекта.ШрифтЗаголовка 			= Новый Шрифт(, 10);
		ГруппаОбъекта.РастягиватьПоГоризонтали 	= Истина;
		
	КонецЕсли;
	
	// Создание реквизита формы
	Если НРег(ПутьКРеквизиту) = НРег("СогласоватьДоговор") Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Булево"));
		
		ТипРеквизита = Новый ОписаниеТипов(МассивТипов);
		
	Иначе
		
		ТипРеквизита = РеквизитОбъекта.Тип;
		
	КонецЕсли;
	
	ИдНовогоРеквизита 		= Новый УникальныйИдентификатор();
	ИмяНовогоРеквизита 		= "Реквизит_" + СтрЗаменить(Строка(ИдНовогоРеквизита), "-", "_");
	НовыйРеквизит 			= Новый РеквизитФормы(ИмяНовогоРеквизита, ТипРеквизита);
	
	МассивРеквизитов.Добавить(НовыйРеквизит);
	
	// Заполнение служебных таблиц
	ИмяЭлемента 									= "Элемент_" + СтрЗаменить(Строка(ИдНовогоРеквизита), "-", "_");
	новыйЭлементФорма 								= тзЭлементыФормы.Добавить();
	новыйЭлементФорма.ИмяЭлемента 					= ИмяЭлемента;
	новыйЭлементФорма.ПутьКДанным 					= ИмяНовогоРеквизита;
	Если НРег(ПутьКРеквизиту) = НРег("СогласоватьДоговор") Тогда
		новыйЭлементФорма.Заголовок 				= "Согласовать договор";
	Иначе
		новыйЭлементФорма.Заголовок 				= РеквизитОбъекта.Синоним;
	КонецЕсли;
	новыйЭлементФорма.ИмяГруппы 					= ИмяГруппыОбъекта;
	новыйЭлементФорма.Обязательный 					= строкаИсточникиРеквизитов.Обязательный;
	
	строкаТаблицыРеквизитов 						= ТаблицаРеквизитовТочкиМаршрута.Добавить();
	строкаТаблицыРеквизитов.Объект 					= СсылкаНаОбъект;
	строкаТаблицыРеквизитов.ИмяРеквизита 			= ПутьКРеквизиту;
	строкаТаблицыРеквизитов.ИмяРеквизитаФормы 		= ИмяНовогоРеквизита;
	строкаТаблицыРеквизитов.ЗаписыватьВТихомРежиме 	= строкаИсточникиРеквизитов.ЗаписыватьВРежимеОбменДанными;
	строкаТаблицыРеквизитов.Обязательный 			= строкаИсточникиРеквизитов.Обязательный;
	строкаТаблицыРеквизитов.Заголовок 				= строкаИсточникиРеквизитов.Заголовок;
	// ++ VOG Солодов В.В. 30.04.2020 CRM-601
	строкаТаблицыРеквизитов.ОбработчикПриЗаполнении = строкаИсточникиРеквизитов.ОбработчикПриЗаполнении;
	// -- VOG Солодов В.В. 30.04.2020 CRM-601
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияРеквизитовПоТочкеМаршрута() Экспорт
	
	// Заполнение реквизитов
	Для Каждого СтрокаРеквизит Из ТаблицаРеквизитовТочкиМаршрута Цикл
		
		Если НРег(СтрокаРеквизит.ИмяРеквизита) = НРег("СогласоватьДоговор") Тогда
			
			Если ТипЗнч(СтрокаРеквизит.Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				
				ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаРеквизит.Объект, "вогСтатус");
				
				ЭтотОбъект[СтрокаРеквизит.ИмяРеквизитаФормы] = 
					Не (ЗначениеРеквизита = Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтрокаРеквизит.Объект, СокрЛП(СтрокаРеквизит.ИмяРеквизита));
		
		ЭтотОбъект[СтрокаРеквизит.ИмяРеквизитаФормы] = ЗначениеРеквизита;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизитыПоТочкеМаршрута(Отказ)
	
	// ++ VOG Солодов В.В. 30.04.2020 CRM-601
	Если ТаблицаРеквизитовТочкиМаршрута.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// -- VOG Солодов В.В. 30.04.2020
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтатусДоговора = Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.Согласован;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	вогСтатусыДоговоровКоммерческихСоглашений.Ссылка КАК Статус
	|ИЗ
	|	Справочник.CRM_ТочкиМаршрутов.ПараметрыТочки КАК CRM_ТочкиМаршрутовПараметрыТочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.вогСтатусыДоговоровКоммерческихСоглашений КАК вогСтатусыДоговоровКоммерческихСоглашений
	|		ПО CRM_ТочкиМаршрутовПараметрыТочки.Параметр = вогСтатусыДоговоровКоммерческихСоглашений.Ссылка
	|ГДЕ
	|	CRM_ТочкиМаршрутовПараметрыТочки.Ссылка = &ТочкаМаршрута";
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", Объект.CRM_ТочкаМаршрута);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтатусДоговора = ВыборкаДетальныеЗаписи.Статус;
	КонецЦикла;
	
	// ++ VOG Солодов В.В. 30.04.2020 CRM-601
	НачатьТранзакцию();
	// -- VOG Солодов В.В. 30.04.2020
	
	Для Каждого СтрокаРеквизит Из ТаблицаРеквизитовТочкиМаршрута Цикл
		
		СсылкаНаОбъект = СтрокаРеквизит.Объект;
		
		Если НРег(СтрокаРеквизит.ИмяРеквизита) = НРег("СогласоватьДоговор")
			И ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			Если ЭтотОбъект[СтрокаРеквизит.ИмяРеквизитаФормы] = Ложь Тогда
			
				ИмяРеквизита 	= "вогСтатус";
				НовоеЗначение 	= Перечисления.вогСтатусыДоговоровКоммерческихСоглашений.НеСогласован;
			
			Иначе
				
				ИмяРеквизита 	= "вогСтатус";
				НовоеЗначение 	= СтатусДоговора;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаРеквизит.ИмяРеквизита) Тогда
			
			ИмяРеквизита 	= СтрокаРеквизит.ИмяРеквизита;
			НовоеЗначение 	= ЭтотОбъект[СтрокаРеквизит.ИмяРеквизитаФормы];
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
		
		// ++ VOG Солодов В.В. 30.04.2020 CRM-601
		Если ЗначениеЗаполнено(СтрокаРеквизит.ОбработчикПриЗаполнении) Тогда
			
			Попытка
				Выполнить(СтрокаРеквизит.ОбработчикПриЗаполнении);
			Исключение
				
				ШаблонСообщения = НСтр("ru = 'Ошибка выполнения обработчика заполнения. %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОписаниеОшибки());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				
				Прервать;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		// -- VOG Солодов В.В. 30.04.2020
		
		Если ЗначениеРеквизита = НовоеЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		ИзменяемыйОбъект = СсылкаНаОбъект.ПолучитьОбъект();
		ИзменяемыйОбъект[ИмяРеквизита] = НовоеЗначение;
		
		Если СтрокаРеквизит.ЗаписыватьВТихомРежиме = Истина Тогда
			ИзменяемыйОбъект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Попытка
			ИзменяемыйОбъект.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СсылкаНаОбъект);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект);
		КонецПопытки;
		
	КонецЦикла;
	
	// ++ VOG Солодов В.В. 30.04.2020 CRM-601
	Если Не Отказ Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	// -- VOG Солодов В.В. 30.04.2020 CRM-601
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
// -- VOG Солодов В.В. 31.03.2020

// +++ VOG Кулаков П.Л. 27.10.2020 CRM-999
&НаСервере
Функция ПроверитьВозможностьОткрытияПредмета(Отказ)
	
	СтруктураВозврата = Новый Структура;
	
	Если Параметры.Свойство("НеОткрыватьПредмет") И Параметры.НеОткрыватьПредмет Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	//Если Объект.Выполнена Тогда
	//	Возврат СтруктураВозврата;
	//КонецЕсли;
	
	СписокОбъектовБизнесПроцесса = ПолучитьОбъектыБизнесПроцесса(Объект.БизнесПроцесс);
	
	Если СписокОбъектовБизнесПроцесса.Количество() > 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Предмет) Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Предмет) <> Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	//Если СписокОбъектовБизнесПроцесса.Количество() = 0 Тогда
		Если ТипЗнч(Объект.Предмет.Предмет) <> Тип("ДокументСсылка.вогАнкета") 
					И ТипЗнч(Объект.Предмет.Предмет) <> Тип("ДокументСсылка.вогКомандировка") 
					И ТипЗнч(Объект.Предмет.Предмет) <> Тип("СправочникСсылка.вогТорговыеТочки")
					И ТипЗнч(Объект.Предмет.Предмет) <> Тип("СправочникСсылка.Партнеры")
					И ТипЗнч(Объект.Предмет.Предмет) <> Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
			Возврат СтруктураВозврата;
		Иначе
			Предмет = Объект.Предмет.Предмет;
		КонецЕсли;
	//Иначе
	//	Если ТипЗнч(СписокОбъектовБизнесПроцесса[0]) <> Тип("ДокументСсылка.вогАнкета") 
	//			И ТипЗнч(СписокОбъектовБизнесПроцесса[0]) <> Тип("ДокументСсылка.вогКомандировка") 
	//			И ТипЗнч(СписокОбъектовБизнесПроцесса[0]) <> Тип("СправочникСсылка.вогТорговыеТочки")
	//			И ТипЗнч(СписокОбъектовБизнесПроцесса[0]) <> Тип("СправочникСсылка.Партнеры")
	//			И ТипЗнч(СписокОбъектовБизнесПроцесса[0]) <> Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
	//		Возврат СтруктураВозврата;
	//	Иначе
	//		Предмет = СписокОбъектовБизнесПроцесса[0];
	//	КонецЕсли;
	//КонецЕсли;
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.вогАнкета") Тогда
		СогласованиеДоговораФормаВОГ = ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("a6f5621e-d3c1-11e9-b656-005056bc3fe8"));
		СогласованиеДоговораФормаКлиента = ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("ea3b5014-1021-11ea-8d81-005056bc3fe8"));
		Если Предмет.ВариантОпроса = СогласованиеДоговораФормаВОГ ИЛИ Предмет.ВариантОпроса = СогласованиеДоговораФормаКлиента Тогда
			Возврат СтруктураВозврата;
		КонецЕсли;
		// +++ удалить
		ЗаявкаНаПроектирование = ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("8916f686-087f-11eb-8314-005056bc3fe8"));
		Если Предмет.ВариантОпроса = ЗаявкаНаПроектирование Тогда
			Возврат СтруктураВозврата;
		КонецЕсли;
		//---
	КонецЕсли;
	
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ПараметрыСеанса.ТекущийПользователь);
	МассивПользователей = вогНастраиваемоеДелегированиеПрав.ПолучитьМассивПользователейДелегата("ПроцессыИЗадачи",Истина);
	Если МассивПользователей.Найти(Объект.Исполнитель) = Неопределено Тогда
		Если РолиПользователя.НайтиПоЗначению(Объект.РольИсполнителя) = Неопределено Тогда
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ОткрытьПредмет",Истина);
	СтруктураВозврата.Вставить("Предмет",Предмет);
	Возврат СтруктураВозврата;
	
КонецФункции // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 11.11.2020 CRM-999
Функция ПолучитьОбъектыБизнесПроцесса(БизнесПроцесс)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	CRM_ОбъектыПоБизнесПроцессам.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.CRM_ОбъектыПоБизнесПроцессам КАК CRM_ОбъектыПоБизнесПроцессам
		|ГДЕ
		|	CRM_ОбъектыПоБизнесПроцессам.БизнесПроцесс = &БизнесПроцесс";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("Объект");
	
КонецФункции // --- VOG Кулаков П.Л.

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// +++ VOG Кулаков П.Л. 27.10.2020 CRM-999
	ПараметрыПроверки = ПроверитьВозможностьОткрытияПредмета(Отказ);
	Если ПараметрыПроверки.Свойство("ОткрытьПредмет") И ПараметрыПроверки.ОткрытьПредмет Тогда
		Отказ = Истина;
		Если Объект.Выполнена Тогда
			ПараметрыФормы = Новый Структура("ВыполненнаяЗадача,Ключ",Объект.Ссылка,ПараметрыПроверки.Предмет);
			ОткрытьФорму(вогОбщегоНазначенияВызовСервера.ПолучитьИмяФормыПоСсылке(ПараметрыПроверки.Предмет),
					ПараметрыФормы,
					ЭтаФорма);
		Иначе
			ПоказатьЗначение(,ПараметрыПроверки.Предмет);
		КонецЕсли;
	КонецЕсли;
	// --- VOG Кулаков П.Л.
КонецПроцедуры

#КонецОбласти
