
&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый 							= Объект.Ссылка.Пустая();
	ТекущийПользователь 				= Пользователи.ТекущийПользователь();
	НаправлениеДеятельностиПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущийПользователь, "CRM_НаправлениеДеятельности");
	
	Если ЭтоНовый Тогда
		ЭтотОбъект.Заголовок 			= НСтр("ru = 'Поручение (создание)'");
		Объект.КартаМаршрута 			= Справочники.CRM_КартыМаршрутов.ПоручениеНовое;
		Объект.НомерВерсииКартыМаршрута = Объект.КартаМаршрута.НомерВерсии;
		Объект.вогНаправлениеДеятельности = НаправлениеДеятельностиПользователя;
	Иначе
		ЭтотОбъект.Заголовок 			= Объект.Наименование;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КартаМаршрута) Тогда
		ПолучитьТочкиСтарта();
	КонецЕсли;
	
	СформироватьСоответствиеЭлементов();
	вогБизнесПроцессыИЗадачиСервер.ЗаполнитьПредметы(ЭтотОбъект, Объект.Ссылка, "");
	ЗаполнитьТаблицыЗадач();
	НачальноеЗаполнениеДанных();
	ЗаполнитьТаблицуФайлов();
	
	Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() = 1
		И Не ТипЗнч(КомпоновщикНастроек.Настройки.Отбор.Элементы[0]) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
		И КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		
		ОтборПоОдномуИсполнителю = Истина;
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	УстановитьВидимостьЭлементовФормы();
	УстановитьДоступностьЭлементовФормы();
	НастроитьЗаголовкиЭлементовФормы();
	
	Элементы.НаправлениеДеятельности.Видимость = Не ЗначениеЗаполнено(НаправлениеДеятельностиПользователя);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//Описание = ТекущийОбъект.вогОписание.Получить();
	
	// Отборы исполнителей
	Результат = ТекущийОбъект.вогХранилищеНастроекКомпоновкиДанных.Получить();
	
	ИсполнительПоОтборуЗавершениеНаСервере(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЭтоНовый Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПредметЗадачи",
			"Видимость",
			Истина);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаЗадачи",
			"Видимость",
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ВыполненСтарт Тогда
		
		Если ТаблицаЧекЛист.Количество() = 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'Не добавлено ни одной задачи. Продолжение невозможно.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
			ВыполненСтарт = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	вогБизнесПроцессыИЗадачиСервер.ЗаписатьПредметы(ЭтотОбъект, ТекущийОбъект);
	
	ВыводитьСообщениеОбОшибке = (ВыполненСтарт Или ТекущийОбъект.Стартован);
	
	Если ВыводитьСообщениеОбОшибке Тогда
		ПодготовитьПредварительнуюТаблицуЗадач(Отказ, ТекущийОбъект);
		Если ВыполненСтарт Тогда
			СкорректироватьТаблицуКонтролеров(Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		
		ВыполненСтарт = Ложь;
		АдресТаблицыПредметовПоИсполнителям = "";
		
		ТекстСообщения = НСтр("ru = 'Невозможно записать задачу.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	// Общий срок
	Если ТаблицаИсполнители.Количество() > 1 Тогда
		ТекущийОбъект.вогОбщийСрок = ТаблицаИсполнители[0].Срок;
	КонецЕсли;
	
	// Сохранение отборов исполнителей
	ТекущийОбъект.вогХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(СформироватьСтруктуруОтборов());
	
	// Таблица исполнителей
	Если ВыполненСтарт Тогда
		
		ТекущийОбъект.мИсполнители = СформироватьТаблицуИсполнителейЗадач();
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ТребуетсяСохранитьНастройкиЭтапов", 		Истина);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ТребуетсяСохранитьИсполнителейЭтапов", 	Истина);
		
		ВыполненСтарт = Ложь;
		
	Иначе
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ТребуетсяСохранитьНастройкиЭтапов", 		Ложь);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ТребуетсяСохранитьИсполнителейЭтапов", 	Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьНаборыЭтаповИсполнителей(ТекущийОбъект);
	СохранитьСписокСотрудников(ТекущийОбъект);
	СохранитьСписокЗадач(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.Стартован Тогда
		СоздатьНапоминания(ТекущийОбъект);
		ЗавершитьПересекающиесяБизнесПроцессы(); // VOG Солодов В.В. 16.11.2020 CRM-1052
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЭтотОбъект.Заголовок = Объект.Наименование;
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("СсылкаНаОбъект", Объект.Ссылка);
	
	Оповестить("БизнесПроцессЗаписан", ПараметрОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТаблицаИсполнители.Количество() = 1 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбраны исполнители задачи'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередСтартом(Отказ)
	
	ВыполненСтарт = Истина;
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Событие")
		И Параметр.Свойство("ВладелецФайла")
		И Параметр.ВладелецФайла = Объект.Ссылка Тогда
		
		ФайлРедактировался = (Параметр.Событие = "ЗаконченоРедактирование");
		
		ЗаполнитьТаблицуФайлов(Истина, ФайлРедактировался, Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив")
		И ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		// ++ VOG Солодов В.В. 24.11.2020 CRM-1010
		И ИсточникВыбора.ВладелецФормы = ЭтотОбъект Тогда
		// До изменения
		//И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.вогПодборКлиентскаяБаза" Тогда
		// -- VOG Солодов В.В. 24.11.2020 CRM-1010
		
		ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ДополнительноеЗначение = ДеревоПредметы.ПолучитьЭлементы()[0];
		Иначе
			ДополнительноеЗначение = ТекущиеДанные;
		КонецЕсли;
		
		ПредметыПередНачаломДобавленияЗавершение(ВыбранноеЗначение, ДополнительноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_ГруппаЗадачи

// Добавление пункта чек-листа
//	при изменении поля ввода
&НаКлиенте
Процедура ЗадачаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ЧекЛистПункт) Тогда
		
		ОчиститьСообщения();
		
		ТекстСообщения = НСтр("ru = 'Заполните что нужно сделать.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ЧекЛистПункт");
		
		Возврат;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикДобавленияПунктаЧекЛиста", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗадачаПриИзменении(Элемент)
	
	ИдентификаторЭлемента 	= СтрЗаменить(Элемент.Имя, "Пункт_", "");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идентификатор", ИдентификаторЭлемента);
	
	НайденныеСтроки = ТаблицаЧекЛист.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		СтрокаТЧ.Пункт = ЭтотОбъект[Элемент.Имя];
	КонецЦикла;
	
	Модифицированность = Истина;
	
	УстановитьВидимостьДоступностьЭлементовЧекЛиста(ИдентификаторЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗадачиВыбор(Элемент, Поле)
	
	ТекущиеДанные = Элементы[Элемент.Имя].ТекущиеДанные;
	
	Если СтрНайти(Элемент.Имя, "Результат") > 0 Тогда
		
		ИдентификаторЭлемента 	= СтрЗаменить(Элемент.Имя, "Результат_", "");
		ПрикрепитьПриложениеЗадачи(ИдентификаторЭлемента);
		
	ИначеЕсли СтрНайти(Элемент.Имя, "Файлы") > 0 Тогда
		
		Если ТипЗнч(ТекущиеДанные.Значение) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы") Тогда
			
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущиеДанные.Значение,,, Истина);
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаписьФайла(ДополнительныеПараметры) Экспорт
	
	ОповещениеОЗакрытииФайла = Новый ОписаниеОповещения(
		"Подключаемый_ЗакрытиеФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	НачатьЗапускПриложения(ОповещениеОЗакрытииФайла, ДополнительныеПараметры.ИмяФайла,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытиеФайла(КодВозврата, ДополнительныеПараметры) Экспорт
	
	// добавить возможность сохранить отредактированный файл
	
	Попытка
		НачатьУдалениеФайлов(Неопределено, ДополнительныеПараметры.ИмяФайла);
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьНаборЗадачНажатие(Элемент)
	
	ИдентификаторыЗадач 	= Новый Массив; // VOG Солодов В.В. 30.06.2021 DEV-646
	ИдентификаторЭлемента 	= СтрЗаменить(Элемент.Имя, "Картинка_", "");
	
	ПараметрыОтбораСтрок 	= Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ИдентификаторНабора", ИдентификаторЭлемента);
	
	НайденныеСтроки = ТаблицаЧекЛист.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		НаборЗадач = СтрокаТабличнойЧасти.Набор;
		ИдентификаторыЗадач.Добавить(СтрокаТабличнойЧасти.Идентификатор); // VOG Солодов В.В. 30.06.2021 DEV-646
	КонецЦикла;
	
	// ++ VOG Солодов В.В. 30.06.2021 DEV-646
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Стартован Тогда
		
		ОчиститьСообщения();
		Отказ = Ложь;
		ОпределитьСвязанныеКомандировки(ИдентификаторыЗадач, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 30.06.2021 DEV-646
	
	ШаблонВопроса = НСтр("ru = 'НаборЗадач ""%1"" будет удален. Продолжить?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, НаборЗадач);
	
	ДополнительныеПараметрыОповещения = Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("Идентификатор", ИдентификаторЭлемента);
	ДополнительныеПараметрыОповещения.Вставить("НаборЗадач", 	НаборЗадач);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_УдалитьНаборЗадачНажатиеЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметрыОповещения);
	
	ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьНаборЗадачНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	ДополнительныеПараметры.Вставить("Предмет", ТекущийПредмет);
	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	УдалитьНаборЗадач(ДополнительныеПараметры);
	
	ВидимостьЭлемента = (ТаблицаЧекЛист.Количество() = 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаЧекЛистРедактирование",
		"Видимость",
		ВидимостьЭлемента);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Добавить",
		"Видимость",
		Не ВидимостьЭлемента);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗадачаПометкаПриИзменении(Элемент)
	
	ИдентификаторЭлемента 	= СтрЗаменить(Элемент.Имя, "ПометкаПункта_", "");
	
	ЭлементыКорня = ДеревоПредметы.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыКорня Цикл
		ЗаполнитьПунктыПредметовРекурсивно(ЭлементДерева, ИдентификаторЭлемента, ЭтотОбъект[Элемент.Имя], ТекущийПредмет);
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 26.11.2020 CRM-1071
&НаКлиенте
Процедура Подключаемый_АдресНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	АдресТаблицыАдресов = ПолучитьСписокАдресовНаСервере(ТекущиеДанные.Предмет, ТекущийПользователь, Объект.Дата);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", 			Истина);
	ПараметрыФормы.Вставить("АдресТаблицыАдресов", 	АдресТаблицыАдресов);
	ПараметрыФормы.Вставить("Адрес", 				ЭтотОбъект[Элемент.Имя]);
	
	ИдентификаторПункта = СтрЗаменить(Элемент.Имя, "Адрес_", "");
	
	ОповещениеОВыбореАдреса = Новый ОписаниеОповещения(
		"Подключаемый_АдресНажатиеЗавершение",
		ЭтотОбъект,
		ИдентификаторПункта);
	
	ОткрытьФорму(
		"Обработка.вогГеокодирование.Форма.Форма",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОВыбореАдреса,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АдресНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	ЗаполнитьУточненныйАдресПункта(ЭтотОбъект, ДополнительныеПараметры, Результат.Адрес, ТекущиеДанные.Предмет);
	Модифицированность = Истина;
	
КонецПроцедуры
// -- VOG Солодов В.В. 26.11.2020 CRM-1071

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПредметы

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если Не ТекущиеДанные = Неопределено Тогда
			Отказ = Элемент.ТекущиеДанные.Группа;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Отказ = Истина;
	
	СписокВыбора = вогБизнесПроцессыИЗадачиВызовСервера.ПолучитьСписокТиповПредметов();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПредметыПередНачаломДобавленияФрагмент",
		ЭтотОбъект,
		Элемент.ТекущиеДанные);
	
	ПоказатьВыборИзСписка(ОповещениеОЗавершении, СписокВыбора, Элементы.Предметы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавленияФрагмент(ВыбранныйТип, ДополнительноеЗначение) Экспорт
	
	вогБизнесПроцессыИЗадачиКлиент.ПредметыПередНачаломДобавленияФрагмент(
		ЭтотОбъект,
		ВыбранныйТип,
		ДополнительноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавленияЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыДерева = ДополнительныеПараметры.ПолучитьЭлементы();
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		МассивВыбранных = ВыбранноеЗначение;
	Иначе
		МассивВыбранных = Новый Массив;
		МассивВыбранных.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Для Каждого ЭлементМассива Из МассивВыбранных Цикл
		
		// ++ VOG Солодов В.В. 28.10.2020 CRM-1001
		// Проверка дублирования предмета
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Предмет", ЭлементМассива);
		
		НайденнаяСтрока = вогБизнесПроцессыИЗадачиКлиент.НайтиСтрокуДереваРекурсивно(ДеревоПредметы, ПараметрыОтбораСтрок);
		
		Если Не НайденнаяСтрока = Неопределено Тогда
			
			ШаблонСообщения = НСтр("ru = '%1 уже есть в списке объектов.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЭлементМассива);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
			
		КонецЕсли;
		
		// Добавление предмета
		НоваяСтрока = ЭлементыДерева.Добавить();
		НоваяСтрока.Предмет = ЭлементМассива;
		НоваяСтрока.Пометка = Истина;
		
		// Добавление текущих пунктов задач в предмет
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаЧекЛист Цикл
			
			Пометка = Истина;
			
			Если Не вогБизнесПроцессыИЗадачиКлиент.ПредметСоответствуетПринадлежностиОбъекта(
				ЭлементМассива, СтрокаТабличнойЧасти.ПринадлежностьОбъекту) Тогда
				Пометка = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Набор) Тогда
				ИдентификаторПункта = СтрокаТабличнойЧасти.ИдентификаторНабора;
			Иначе
				ИдентификаторПункта = СтрокаТабличнойЧасти.Идентификатор;
			КонецЕсли;
			
			Если НоваяСтрока.Пункты.НайтиПоЗначению(ИдентификаторПункта) = Неопределено Тогда
				НоваяСтрока.Пункты.Добавить(ИдентификаторПункта,, Пометка);
			КонецЕсли;
			
		КонецЦикла;
		// -- VOG Солодов В.В. 28.10.2020 CRM-1001
		
	КонецЦикла;
	
	// Если настройка отбора исполнителей зависит от выбранных предметов, нужно перезаполнить список исполнителей
	Если ОпределитьЗависимостьНастройкиОтПредметовПроцесса() Тогда
		ВидИсполнителяПриИзменении(Неопределено);
	КонецЕсли;
	
	Модифицированность = Истина;
	НастроитьЗаголовкиЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПредметНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	вогБизнесПроцессыИЗадачиКлиент.ПредметыПредметНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПредметНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка дублирования предмета
	ОчиститьСообщения();
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Предмет", ВыбранноеЗначение);
	
	НайденнаяСтрока = вогБизнесПроцессыИЗадачиКлиент.НайтиСтрокуДереваРекурсивно(ДеревоПредметы, ПараметрыОтбораСтрок);
	
	Если Не НайденнаяСтрока = Неопределено Тогда
		
		ШаблонСообщения = НСтр("ru = '%1 уже есть в списке предметы.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ВыбранноеЗначение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	// Изменение предмета
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	ТекущиеДанные.Предмет = ВыбранноеЗначение;
	
	// Если настройка отбора исполнителей зависит от выбранных предметов, нужно перезаполнить список исполнителей
	Если ОпределитьЗависимостьНастройкиОтПредметовПроцесса() Тогда
		ВидИсполнителяПриИзменении(Неопределено);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриИзменении(Элемент)
	
	// Если настройка отбора исполнителей зависит от выбранных предметов, нужно перезаполнить список исполнителей
	Если ОпределитьЗависимостьНастройкиОтПредметовПроцесса() Тогда
		ВидИсполнителяПриИзменении(Неопределено);
	КонецЕсли;
	
	НастроитьЗаголовкиЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		Отказ = Элемент.ТекущиеДанные.Группа;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Предмет", ТекущиеДанные.Предмет);
		
		НайденныеСтроки = ТаблицаАдресов.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			ИндексСтроки = ТаблицаАдресов.Индекс(СтрокаТабличнойЧасти);
			ТаблицаАдресов.Удалить(ИндексСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	вогБизнесПроцессыИЗадачиКлиент.ПредметыПеретаскивание(
		ЭтотОбъект,
		Элемент,
		ПараметрыПеретаскивания,
		СтандартнаяОбработка,
		Строка,
		Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	вогБизнесПроцессыИЗадачиКлиент.ПредметыПроверкаПеретаскивания(
		ЭтотОбъект,
		Элемент,
		ПараметрыПеретаскивания,
		СтандартнаяОбработка,
		Строка,
		Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	НастроитьЗаголовкиЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПредметыПункты"
		И ТаблицаЧекЛист.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыборЗадачПредметаЗавершение", ЭтотОбъект, ТекущиеДанные.Предмет);
		ТекущиеДанные.Пункты.ПоказатьОтметкуЭлементов(
			ОповещениеОЗавершении,
			СтрШаблон(НСтр("ru = 'Выбор задач для предмета %1'"), ТекущиеДанные.Предмет));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗадачПредметаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПредмет 	= ТекущиеДанные.Предмет;
	ЭтоПредмет 		= (Не ТекущийПредмет = "Предметы");
	
	МассивИменЭлементов = Новый Массив;
	// ++ VOG Солодов В.В. 07.12.2020 CRM-1100
	// До изменения
	//МассивСтрок 		= Новый Массив;
	// -- VOG Солодов В.В. 07.12.2020 CRM-1100
	
	Если ЭтоПредмет Тогда
		
		Для Каждого СтрокаСписка Из ТекущиеДанные.Пункты Цикл
			
			ИмяРеквизита = СтрШаблон("ПометкаПункта_%1", СтрокаСписка.Значение);
			ЭтотОбъект[ИмяРеквизита] = СтрокаСписка.Пометка;
			МассивИменЭлементов.Добавить(ИмяРеквизита);
			
			// ++ VOG Солодов В.В. 26.11.2020 CRM-1071
			//Если Не СтрокаСписка.Пометка Тогда
			//	Продолжить;
			//КонецЕсли;
			
			ИмяРеквизитаАдрес 	= СтрШаблон("Адрес_%1", СтрокаСписка.Значение);
			ИмяЗаголовкаАдрес 	= СтрШаблон("АдресЗаголовок_%1", СтрокаСписка.Значение);
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Идентификатор", 	СтрокаСписка.Значение);
			ПараметрыОтбораСтрок.Вставить("Предмет", 		ТекущийПредмет);
			
			НайденныеСтроки = ТаблицаАдресов.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Если СтрокаСписка.Пометка
				И НайденныеСтроки.Количество() > 0
				И Не ПустаяСтрока(НайденныеСтроки[0].Адрес) Тогда
				
				ЭтотОбъект[ИмяРеквизитаАдрес] = НайденныеСтроки[0].Адрес;
				Элементы[ИмяРеквизитаАдрес].Видимость = Истина;
				Элементы[ИмяЗаголовкаАдрес].Видимость = Истина;
				
			Иначе
				
				Элементы[ИмяРеквизитаАдрес].Видимость = Ложь;
				Элементы[ИмяЗаголовкаАдрес].Видимость = Ложь;
				
			КонецЕсли;
			// -- VOG Солодов В.В. 26.11.2020 CRM-1071
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаЧекЛист Цикл
			
			// ++ VOG Солодов В.В. 07.12.2020 CRM-1100
			МассивСтрок = Новый Массив;
			// -- VOG Солодов В.В. 07.12.2020 CRM-1100
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Набор) Тогда
				ИдентификаторЭлемента = СтрокаТабличнойЧасти.ИдентификаторНабора;
			Иначе
				ИдентификаторЭлемента = СтрокаТабличнойЧасти.Идентификатор;
			КонецЕсли;
			
			НайтиСтрокиПредметовПоИдентификаторуРекурсивно(ДеревоПредметы, ИдентификаторЭлемента, МассивСтрок);
			
			ИмяРеквизита = СтрШаблон("ПометкаПункта_%1", ИдентификаторЭлемента);
			// ++ VOG Солодов В.В. 07.12.2020 CRM-1100
			ЭтотОбъект[ИмяРеквизита] = (МассивСтрок.Количество() = 0);
			// -- VOG Солодов В.В. 07.12.2020 CRM-1100
			МассивИменЭлементов.Добавить(ИмяРеквизита);
			
			// ++ VOG Солодов В.В. 26.11.2020 CRM-1071
			ИмяРеквизитаАдрес = СтрШаблон("Адрес_%1", 			ИдентификаторЭлемента);
			ИмяЗаголовкаАдрес = СтрШаблон("АдресЗаголовок_%1", 	ИдентификаторЭлемента);
			
			ЭтотОбъект[ИмяРеквизитаАдрес] = "";
			Элементы[ИмяРеквизитаАдрес].Видимость = Ложь;
			//Элементы[ИмяЗаголовкаАдрес].Видимость = Ложь;
			// -- VOG Солодов В.В. 26.11.2020 CRM-1071
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ИмяРеквизита Из МассивИменЭлементов Цикл
		
		// ++ VOG Солодов В.В. 07.12.2020 CRM-1100
		// До изменения
		//Если Не ЭтоПредмет Тогда
		//	ЭтотОбъект[ИмяРеквизита] = (МассивСтрок.Количество() = 0);
		//КонецЕсли;
		// -- VOG Солодов В.В. 07.12.2020 CRM-1100
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			ИмяРеквизита,
			"Доступность",
			ЭтоПредмет);
		
	КонецЦикла;
	
	// ++ VOG Солодов В.В. 26.11.2020 CRM-1071
	УстановитьДоступностьКомандУточненияАдреса(ТекущиеДанные);
	// -- VOG Солодов В.В. 26.11.2020 CRM-1071
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_ГруппаСотрудники

&НаКлиенте
Процедура КонтролироватьВыполнениеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаДекорацияКонтролеры",
		"Видимость",
		КонтролироватьВыполнение);
	
	Если КонтролироватьВыполнение Тогда
		
		ИдентификаторЭлемента 		= вогБизнесПроцессыИЗадачиКлиент.СформироватьУникальныйИдентификатор();
		
		НоваяСтрока 				= ТаблицаКонтролеры.Добавить();
		НоваяСтрока.Контролер 		= ТекущийПользователь;
		НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
		НоваяСтрока.Приоритет 		= ТаблицаКонтролеры.Количество();
		
		ДобавитьПоляПоНастройкеНаСервере("Контролеры", ИдентификаторЭлемента);
		УстановитьДоступностьКомандИзмененияПриоритета();
		
	Иначе
		// Удалить всех контролеров
		КонтролироватьВыполнениеПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииСотрудника(Элемент)
	
	// Проверка дублирования
	Отказ = Ложь;
	
	ИмяРеквизита 			= Лев(Элемент.Имя, СтрНайти(Элемент.Имя, "_"));
	ИдентификаторЭлемента 	= СтрЗаменить(Элемент.Имя, ИмяРеквизита, "");
	ИмяРеквизита 			= СтрЗаменить(ИмяРеквизита, "_", "");
	
	Если ИмяРеквизита = "Контролер" Тогда
		ИмяНастройки 		= "Контролеры";
	ИначеЕсли ИмяРеквизита = "Соисполнитель" Тогда
		ИмяНастройки 		= "Соисполнители";
	ИначеЕсли ИмяРеквизита = "Наблюдатель" Тогда
		ИмяНастройки 		= "Наблюдатели";
	КонецЕсли;
	
	ИмяТаблицы 				= СтрШаблон("Таблица%1", ИмяНастройки);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Идентификатор", ИдентификаторЭлемента);
	
	ТаблицаЭлементов = ЭтотОбъект[ИмяТаблицы];
	
	НайденныеСтроки = ТаблицаЭлементов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		// Текущая таблица
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(ИмяРеквизита, НайденнаяСтрока[ИмяРеквизита]);
		
		ДублирующиесяСтроки = ТаблицаЭлементов.НайтиСтроки(ПараметрыОтбора);
		
		Если ДублирующиесяСтроки.Количество() > 1 Тогда
			
			ОчиститьСообщения();
			
			ШаблонСообщения = НСтр("ru = '%1 есть в списке %2. Добавление невозможно.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, НайденнаяСтрока[ИмяРеквизита], НРег(ИмяНастройки));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
			НайденнаяСтрока[ИмяРеквизита] = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
			
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		// Таблица Исполнители
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Исполнитель", НайденнаяСтрока[ИмяРеквизита]);
		
		ДублирующиесяСтроки = ТаблицаИсполнители.НайтиСтроки(ПараметрыОтбора);
		
		Если ДублирующиесяСтроки.Количество() > 0 Тогда
			
			ОчиститьСообщения();
			
			ШаблонСообщения = НСтр("ru = '%1 есть в списке исполнителей. Добавление в список %2 невозможно.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, НайденнаяСтрока[ИмяРеквизита], ИмяНастройки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
			НайденнаяСтрока[ИмяРеквизита] = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбораСрока(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяТаблицы = Лев(Элемент.Имя, СтрНайти(Элемент.Имя, "Срок") - 1);
	
	Если ИмяТаблицы = "ТаблицаИсполнители" Тогда
		ИндексСтроки = ТаблицаИсполнители.Индекс(Элементы.ТаблицаИсполнители.ТекущиеДанные);
	Иначе
		
		ИдентификаторЭлемента = СтрЗаменить(Элемент.Имя, ИмяТаблицы + "Срок_", "");
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Идентификатор", ИдентификаторЭлемента);
		
		НайденныеСтроки = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ИндексСтроки = ЭтотОбъект[ИмяТаблицы].Индекс(НайденныеСтроки[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	ВыборСрока(ИндексСтроки, СтандартнаяОбработка, ИмяТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсполнителиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТаблицаИсполнители.ТекущиеДанные;
	
	Если ТекущиеДанные.Исполнитель = "Общий срок" Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсполнителиПослеУдаления(Элемент)
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсполнителиСрокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаИсполнители.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = ТаблицаИсполнители[0];
	КонецЕсли;
		
	Если ТекущиеДанные.Исполнитель = "Общий срок" Тогда
		
		Для Каждого СтрокаТЧ Из ТаблицаИсполнители Цикл
			СтрокаТЧ.Срок = ТекущиеДанные.Срок;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборСрока(0, СтандартнаяОбработка, "ТаблицаИсполнители");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИсполнителяПриИзменении(Элемент)
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Настройка", ВидИсполнителя);
	
	СтрокиВозможныхИсполнителей = ТаблицаВозможныхИсполнителей.НайтиСтроки(ПараметрыОтбораСтрок);
	
	ДеревоОтборов.ПолучитьЭлементы().Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из СтрокиВозможныхИсполнителей Цикл
		
		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Настройка");
		СтруктураНастройки.Вставить("АдресСхемыКомпоновкиДанных");
		СтруктураНастройки.Вставить("АдресНастроекКомпоновкиДанных");
		
		ЗаполнитьЗначенияСвойств(СтруктураНастройки, СтрокаТабличнойЧасти);
		
		ИдентификаторЭлемента = ДобавитьЭлементыПредопределенногоОтбора(СтруктураНастройки);
		
		Если Не ИдентификаторЭлемента = Неопределено Тогда
			Элементы.ДеревоОтборов.Развернуть(ИдентификаторЭлемента, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСписокИсполнителейПоОтборуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИсполнителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидИсполнителяНачалоВыбораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИсполнителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТаблицаИсполнители.Количество() > 2 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстВопроса = НСтр("ru = 'Список исполнителей будет очищен. Продолжить?'");
		ОповещениеОЗавершении = Новый ОписаниеОповещения(
			"ВидИсполнителяОбработкаВыбораЗавершение",
			ЭтотОбъект,
			ВыбранноеЗначение);
		
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИсполнителяОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВидИсполнителя = ДополнительныеПараметры;
	ВидИсполнителяПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсполнителяПриИзменении(Элемент)
	
	ЭлементыКорня = ДеревоОтборов.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыКорня Цикл
		
		Если ЗначениеЗаполнено(ЭлементДерева.ПравоеЗначение) Тогда
			ЭлементДерева.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСписокИсполнителейПоОтборуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсполнителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	вогБизнесПроцессыИЗадачиКлиент.ДеревоОтборовПравоеЗначениеПодбор(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_ГруппаНапоминания

&НаКлиенте
Процедура Подключаемый_НачалоВыбораАдресатаНапоминания(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивАдресатовНапоминания = Новый Массив;
	МассивАдресатовНапоминания.Добавить("Исполнителю/Соисполнителю");
	МассивАдресатовНапоминания.Добавить("Постановщику");
	
	Если ТаблицаКонтролеры.Количество() > 0 Тогда
		МассивАдресатовНапоминания.Добавить("Принимающему результат");
	КонецЕсли;
	
	Если ТаблицаНаблюдатели.Количество() > 0
		И ЗначениеЗаполнено(ТаблицаНаблюдатели[0].Наблюдатель) Тогда
		МассивАдресатовНапоминания.Добавить("Наблюдателю");
	КонецЕсли;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(МассивАдресатовНапоминания);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДеревоОтборов

&НаКлиенте
Процедура ДеревоОтборовПравоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение) Тогда
		ТекущиеДанные.Использование = Истина;
	КонецЕсли;
	
	ЗаполнитьСписокИсполнителейПоОтборуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриАктивизацииЯчейки(Элемент)
	
	вогБизнесПроцессыИЗадачиКлиент.ДеревоОтборовПриАктивизацииЯчейки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	вогБизнесПроцессыИЗадачиКлиент.ДеревоОтборовПравоеЗначениеПодбор(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПравоеЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	вогБизнесПроцессыИЗадачиКлиент.ДеревоОтборовПравоеЗначениеПодбор(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПравоеЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	вогБизнесПроцессыИЗадачиКлиент.ДеревоОтборовПравоеЗначениеПодбор(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовВидСравненияПриИзменении(Элемент)
	
	вогБизнесПроцессыИЗадачиКлиент.ДеревоОтборовВидСравненияПриИзменении(ЭтотОбъект, Элемент);
	
	ЗаполнитьСписокИсполнителейПоОтборуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовТипГруппыПриИзменении(Элемент)
	
	ЗаполнитьСписокИсполнителейПоОтборуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовИспользованиеПриИзменении(Элемент)
	
	ЗаполнитьСписокИсполнителейПоОтборуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;
	
	ТекущиеДанные 	= Элементы.ДеревоОтборов.ТекущиеДанные;
	ДанныеВыбора 	= ТекущиеДанные.ДоступныеВидыСравнения;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиГруппа(Команда)
	
	ИмяГруппы = СтрЗаменить(Команда.Имя, "Перейти", "Группа");
	
	ЭлементГруппа = Элементы.Найти(ИмяГруппы);
	
	Если Не ЭлементГруппа = Неопределено Тогда
		
		ВидимостьЭлемента = Элементы[ИмяГруппы].Видимость;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			ИмяГруппы,
			"Видимость",
			Не ВидимостьЭлемента);
			
		Если Не ВидимостьЭлемента
			И (ИмяГруппы = "ГруппаСоисполнители"
				Или ИмяГруппы = "ГруппаНаблюдатели") Тогда
				
			МассивИменНастроек = Новый Массив;
			МассивИменНастроек.Добавить("Соисполнители");
			МассивИменНастроек.Добавить("Наблюдатели");
			
			Для Каждого ИмяНастройки Из МассивИменНастроек Цикл
				
				ИмяТаблицы 				= СтрШаблон("Таблица%1", ИмяНастройки);
				
				Если ЭтотОбъект[ИмяТаблицы].Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИдентификаторЭлемента 	= вогБизнесПроцессыИЗадачиКлиент.СформироватьУникальныйИдентификатор();
				
				НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
				НоваяСтрока.Идентификатор = ИдентификаторЭлемента;
				
				ДобавитьПоляПоНастройкеНаСервере(ИмяНастройки, ИдентификаторЭлемента);
				
			КонецЦикла;
			
		ИначеЕсли Не ВидимостьЭлемента
			И ИмяГруппы = "ГруппаЗадачи"
			И Элементы.ГруппаЧекЛистРедактирование.Видимость Тогда
			
			ЭтотОбъект.ТекущийЭлемент = Элементы.ПунктЧекЛиста;
			Элементы.Добавить.Видимость = Ложь;
			
		КонецЕсли;
		
		Если Не ВидимостьЭлемента Тогда
			
			// Сортировка групп
			МассивИменСортируемыхГрупп = Новый Массив;
			МассивИменСортируемыхГрупп.Добавить("ГруппаПредметЗадачи");
			МассивИменСортируемыхГрупп.Добавить("ГруппаЗадачи");
			МассивИменСортируемыхГрупп.Добавить("ГруппаСотрудники");
			МассивИменСортируемыхГрупп.Добавить("ГруппаДополнительно");
			
			ТекущийИндекс 		= ЭтотОбъект.ПодчиненныеЭлементы.Индекс(ЭлементГруппа);
			МинимальныйИндекс 	= ТекущийИндекс;
			
			Для Каждого ИмяСортируемойГруппы Из МассивИменСортируемыхГрупп Цикл
				
				СортируемаяГруппа 	= Элементы.Найти(ИмяСортируемойГруппы);
				ИндексГруппы 		= ЭтотОбъект.ПодчиненныеЭлементы.Индекс(СортируемаяГруппа);
				
				Если МинимальныйИндекс > ИндексГруппы Тогда
					МинимальныйИндекс = ИндексГруппы;
				КонецЕсли;
				
			КонецЦикла;
			
			Если МинимальныйИндекс < ТекущийИндекс Тогда
				ПереместитьГруппуНаСервере(ЭлементГруппа.Имя, МинимальныйИндекс);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяГруппы = "ГруппаФайлы" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТолькоПросмотр", Истина);
		
		ОткрытьФормуПрисоединенныхФайлов(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиОбщаяГруппа(Команда)
	
	ИмяГруппы = СтрЗаменить(Команда.Имя, "Декорация", "ГруппаДекорация");
	
	ЭлементГруппа = Элементы.Найти(ИмяГруппы);
	
	Если Не ЭлементГруппа = Неопределено Тогда
		
		ВидимостьЭлемента = Не Элементы[ИмяГруппы].Видимость;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			ИмяГруппы,
			"Видимость",
			ВидимостьЭлемента);
		
		Если ВидимостьЭлемента
			И ((ИмяГруппы = "ГруппаДекорацияСоисполнители" И ТаблицаСоисполнители.Количество() = 0)
				Или (ИмяГруппы = "ГруппаДекорацияНаблюдатели" И ТаблицаНаблюдатели.Количество() = 0)) Тогда
			
			ИмяТаблицы 		= СтрЗаменить(ИмяГруппы, "ГруппаДекорация", "Таблица");
			ИмяНастройки 	= СтрЗаменить(ИмяГруппы, "ГруппаДекорация", "");
			
			ИдентификаторЭлемента = вогБизнесПроцессыИЗадачиКлиент.СформироватьУникальныйИдентификатор();
			
			НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
			НоваяСтрока.Идентификатор = ИдентификаторЭлемента;
			
			ДобавитьПоляПоНастройкеНаСервере(ИмяНастройки, ИдентификаторЭлемента);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПрименить(Команда)
	
	Если Не ЗначениеЗаполнено(ЧекЛистПункт) Тогда
		
		ТекстСообщения = НСтр("ru = 'Укажите, что нужно сделать.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ЧекЛистПункт");
		
		Возврат;
		
	КонецЕсли;
	
	ДобавитьПунктЧекЛиста();
	
	ЧекЛистИдентификатор 	= "";
	ЧекЛистПриложения 		= "";
	ЧекЛистПункт 			= "";
	ЧекЛистРезультат 		= "";
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаЧекЛистРедактирование",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Добавить",
		"Видимость",
		Истина);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистДобавить(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаЧекЛистРедактирование",
		"Видимость",
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Добавить",
		"Видимость",
		Ложь);
		
	ЭтотОбъект.ТекущийЭлемент = Элементы.ПунктЧекЛиста;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТиповуюЗадачу(Команда)
	
	вогБизнесПроцессыИЗадачиКлиент.ДобавитьТиповуюЗадачу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТиповуюЗадачуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаЧекЛистРедактирование",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Добавить",
		"Видимость",
		Истина);
	
	ДобавитьТиповуюЗадачуНаСервере(Результат, Отказ);
	
	ВыполняетсяДобавлениеТиповогоПункта = Ложь;
	
	Если Не Отказ Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистОчистить(Команда)
	
	// ++ VOG Солодов В.В. 30.06.2021 DEV-646
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Стартован
		И ТаблицаЧекЛист.Количество() > 0 Тогда
		
		ОчиститьСообщения();
		
		Отказ 				= Ложь;
		ИдентификаторыЗадач = Новый Массив;
		
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаЧекЛист Цикл
			ИдентификаторыЗадач.Добавить(СтрокаТабличнойЧасти.Идентификатор);
		КонецЦикла;
		
		ОпределитьСвязанныеКомандировки(ИдентификаторыЗадач, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 30.06.2021 DEV-646
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ЧекЛистОчиститьЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(
		ОписаниеОповещенияОЗавершении,
		НСтр("ru = 'Все задачи будут удалены. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистОчиститьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьПредметыЧекЛист(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистОтменить(Команда)
	
	ЧекЛистИдентификатор 	= "";
	ЧекЛистПриложения 		= "";
	ЧекЛистПункт 			= "";
	ЧекЛистРезультат 		= "";
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаЧекЛистРедактирование",
		"Видимость",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Добавить",
		"Видимость",
		Истина);
	
КонецПроцедуры

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_РедактироватьПунктЧекЛиста(Команда)
	
	ИмяЭлемента 			= СтрЗаменить(Команда.Имя, "Редактировать", "Пункт");
	ИдентификаторЭлемента 	= СтрЗаменить(Команда.Имя, "Редактировать_", "");
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить(ИмяЭлемента, ЭтотОбъект[ИмяЭлемента]);
	
	УстановитьВидимостьДоступностьЭлементовЧекЛиста(ИдентификаторЭлемента, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПрименитьРедактированиеПунктаЧекЛиста(Команда)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("Пункт");
	МассивИменЭлементов.Добавить("Трудоемкость");
	
	Для Каждого НаименованиеЭлемента Из МассивИменЭлементов Цикл
		
		ИмяЭлемента 			= СтрЗаменить(Команда.Имя, "Применить", НаименованиеЭлемента);
		ИдентификаторЭлемента 	= СтрЗаменить(Команда.Имя, "Применить_", "");
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Идентификатор", ИдентификаторЭлемента);
		
		НайденныеСтроки = ТаблицаЧекЛист.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			СтрокаТЧ[НаименованиеЭлемента] = ЭтотОбъект[ИмяЭлемента];
		КонецЦикла;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
	УстановитьВидимостьДоступностьЭлементовЧекЛиста(ИдентификаторЭлемента, Истина);
	НастроитьЗаголовкиЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтменитьРедактированиеПунктаЧекЛиста(Команда)
	
	ИмяЭлемента 			= СтрЗаменить(Команда.Имя, "Отменить", "Пункт");
	ИдентификаторЭлемента 	= СтрЗаменить(Команда.Имя, "Отменить_", "");
	
	Если ТипЗнч(КэшированныеЗначения) = Тип("Структура")
		И КэшированныеЗначения.Свойство(ИмяЭлемента) Тогда
		
		ЭтотОбъект[ИмяЭлемента] = КэшированныеЗначения[ИмяЭлемента];
		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементовЧекЛиста(ИдентификаторЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПрикрепитьПриложениеЧекЛиста(Команда)
	
	ИдентификаторЭлемента = СтрЗаменить(Команда.Имя, "Прикрепить_", "");
	ПрикрепитьПриложениеЗадачи(ИдентификаторЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьПриложениеЗадачи(ИдентификаторЭлемента)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идентификатор", ИдентификаторЭлемента);
	
	НайденныеСтроки = ТаблицаЧекЛист.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаЧекЛист Из НайденныеСтроки Цикл
		АдресПриложений = СтрокаЧекЛист.Приложения;
	КонецЦикла;
	
	ОповещениеОЗавершенимм = Новый ОписаниеОповещения(
		"Подключаемый_ПрикрепитьПриложениеЧекЛистаЗавершение",
		ЭтотОбъект,
		ИдентификаторЭлемента);
	
	ПараметрыПриложений = Новый Структура;
	ПараметрыПриложений.Вставить("АдресПриложений", 		АдресПриложений);
	ПараметрыПриложений.Вставить("Ссылка", 					Объект.Ссылка);
	ПараметрыПриложений.Вставить("НаправлениеДеятельности", Объект.вогНаправлениеДеятельности);
	
	ОткрытьФорму(
		"БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПриложенийЗадачПоручения",
		ПараметрыПриложений,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗавершенимм,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПрикрепитьПриложениеЧекЛистаЗавершение(АдресТаблицы, ИдентификаторЭлемента) Экспорт
	
	Если АдресТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресТаблицы) Тогда
		
		ЧекЛистПриложитьЗавершениеНаСервере(АдресТаблицы, ИдентификаторЭлемента);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьПунктЧекЛиста(Команда)
	
	ИдентификаторЭлемента = СтрЗаменить(Команда.Имя, "Удалить_", "");
	
	// ++ VOG Солодов В.В. 30.06.2021 DEV-646
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Стартован Тогда
		
		ОчиститьСообщения();
		Отказ = Ложь;
		ОпределитьСвязанныеКомандировки(ИдентификаторЭлемента, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 30.06.2021 DEV-646
	
	ИмяРеквизита = "Пункт_" + ИдентификаторЭлемента;
	
	Пункт = ЭтотОбъект[ИмяРеквизита];
	
	ШаблонВопроса = НСтр("ru = 'Пункт ""%1"" будет удален. Продолжить?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, Пункт);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_УдалитьПунктЧекЛистаЗавершение",
		ЭтотОбъект,
		ИдентификаторЭлемента);
	
	ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьПунктЧекЛистаЗавершение(Результат, ИдентификаторЭлемента) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьРеквизитыЧекЛиста(ИдентификаторЭлемента);
	
	ВидимостьЭлемента = (ТаблицаЧекЛист.Количество() = 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаЧекЛистРедактирование",
		"Видимость",
		ВидимостьЭлемента);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Добавить",
		"Видимость",
		Не ВидимостьЭлемента);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийПунктЧекЛиста(Команда)
	
	ИдентификаторЭлемента = СтрЗаменить(Команда.Имя, "РедактироватьКомментарий_", "");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идентификатор", ИдентификаторЭлемента);
	
	НайденныеСтроки = ТаблицаЧекЛист.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаЧекЛист Из НайденныеСтроки Цикл
		СтрокаКомментарий = СтрокаЧекЛист.Комментарий;
	КонецЦикла;
	
	ОповещениеОЗавершенимм = Новый ОписаниеОповещения(
		"Подключаемый_КомментарийЗавершениеВвода",
		ЭтотОбъект,
		ИдентификаторЭлемента);
	
	ПоказатьВводСтроки(ОповещениеОЗавершенимм, СтрокаКомментарий, НСтр("ru = 'Введите комментарий'"),, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийЗавершениеВвода(Результат, ИдентификаторЭлемента) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идентификатор", ИдентификаторЭлемента);
	
	НайденныеСтроки = ТаблицаЧекЛист.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаЧекЛист Из НайденныеСтроки Цикл
		СтрокаЧекЛист.Комментарий = Результат;
	КонецЦикла;
	
	ЭтотОбъект["Комментарий_" + ИдентификаторЭлемента] = Результат;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НадписьКомментарий_" + ИдентификаторЭлемента,
		"Видимость",
		Не ПустаяСтрока(Результат));
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПрикрепитьФайлЧекЛиста(Команда)
	
	ИдентификаторЭлемента 	= СтрЗаменить(Команда.Имя, "ПрикрепитьФайлПункта_", "");
	
	ПараметрыОтбораСтрок 	= Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Идентификатор", ИдентификаторЭлемента);
	
	НайденныеСтроки 		= ТаблицаЧекЛист.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		НаименованиеЗадачи 	= СтрокаТабличнойЧасти.Пункт;
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Идентификатор", 		ИдентификаторЭлемента);
	ДополнительныеПараметры.Вставить("НаименованиеЗадачи", 	НаименованиеЗадачи);
	
	ОткрытьФормуПрисоединенныхФайлов(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьПолеПоНастройке(Команда)
	
	ИмяКоманды 				= СтрЗаменить(Команда.Имя, "Удалить", "");
	ИмяНастройки 			= Лев(ИмяКоманды, СтрНайти(ИмяКоманды, "_") - 1);
	ИдентификаторЭлемента 	= СтрЗаменить(ИмяКоманды, ИмяНастройки + "_", "");
	ИмяТаблицы 				= СтрШаблон("Таблица%1", ИмяНастройки);
	ИмяРеквизита 			= "";
	ЗначениеРеквизита 		= Неопределено;
	
	Если ИмяНастройки = "Контролеры" Тогда
		ИмяРеквизита = "Контролер";
	ИначеЕсли ИмяНастройки = "Соисполнители" Тогда
		ИмяРеквизита = "Соисполнитель";
	ИначеЕсли ИмяНастройки = "Наблюдатели" Тогда
		ИмяРеквизита = "Наблюдатель";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Идентификатор", ИдентификаторЭлемента);
		
		ТаблицаЭлементов = ЭтотОбъект[ИмяТаблицы];
		
		НайденныеСтроки = ТаблицаЭлементов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаЭлемента Из НайденныеСтроки Цикл
			ЗначениеРеквизита = СтрокаЭлемента[ИмяРеквизита];
		КонецЦикла;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторЭлемента", 	ИдентификаторЭлемента);
	ДополнительныеПараметры.Вставить("Настройка", 				ИмяНастройки);
	
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		ШаблонВопроса = НСтр("ru = '%1 %2 будет удален. Продолжить?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, ИмяРеквизита, ЗначениеРеквизита);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_УдалитьПолеПоНастройкеЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Подключаемый_УдалитьПолеПоНастройкеЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьПолеПоНастройкеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Настройка = "Контролеры"
		И ТаблицаКонтролеры.Количество() = 1 Тогда
		
		Для Каждого СтрокаТЧ Из ТаблицаКонтролеры Цикл
			
			СтрокаТЧ.Контролер 	= ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
			СтрокаТЧ.Срок 		= Дата(1,1,1);
			
		КонецЦикла;
		
	ИначеЕсли ДополнительныеПараметры.Настройка = "Соисполнители"
		И ТаблицаСоисполнители.Количество() = 1 Тогда
		
		Для Каждого СтрокаТЧ Из ТаблицаСоисполнители Цикл
			СтрокаТЧ.Соисполнитель 	= ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		КонецЦикла;
		
	ИначеЕсли ДополнительныеПараметры.Настройка = "Наблюдатели"
		И ТаблицаНаблюдатели.Количество() = 1 Тогда
		
		Для Каждого СтрокаТЧ Из ТаблицаНаблюдатели Цикл
			СтрокаТЧ.Наблюдатель 	= ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		КонецЦикла;
		
	Иначе
		УдалитьРеквизитыПоНастройке(ДополнительныеПараметры.ИдентификаторЭлемента, ДополнительныеПараметры.Настройка);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Настройка = "Контролеры" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"КонтролерДобавить",
			"Видимость",
			Не ТаблицаКонтролеры.Количество() >= 3);
			
		Для Каждого СтрокаТЧ Из ТаблицаКонтролеры Цикл
			СтрокаТЧ.Приоритет = ТаблицаКонтролеры.Индекс(СтрокаТЧ) + 1;
		КонецЦикла;
		
		УстановитьДоступностьКомандИзмененияПриоритета();
		
	ИначеЕсли ДополнительныеПараметры.Настройка = "Напоминания"
		И ТаблицаНапоминания.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДекорацияНапоминания",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДекорацияНапоминанияПустая",
			"Видимость",
			Истина);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПовыситьПриоритет(Команда)
	
	ИдентификаторЭлемента = СтрЗаменить(Команда.Имя, "ПовыситьПриоритет_", "");
	ИзменитьПриоритетКонтролеров(ИдентификаторЭлемента, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПонизитьПриоритет(Команда)
	
	ИдентификаторЭлемента = СтрЗаменить(Команда.Имя, "ПонизитьПриоритет_", "");
	ИзменитьПриоритетКонтролеров(ИдентификаторЭлемента, 1);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НапоминаниеДобавить(Команда)
	
	ДобавитьСтрокуТаблицыПоИмениКоманды(Команда.Имя);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияНапоминания",
		"Видимость",
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияНапоминанияПустая",
		"Видимость",
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерДобавить(Команда)
	
	ДобавитьСтрокуТаблицыПоИмениКоманды(Команда.Имя);
	
	УстановитьДоступностьКомандИзмененияПриоритета();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КонтролерДобавить",
		"Видимость",
		Не ТаблицаКонтролеры.Количество() >= 3);
	
КонецПроцедуры

&НаКлиенте
Процедура СоисполнительДобавить(Команда)
	
	ДобавитьСтрокуТаблицыПоИмениКоманды(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НаблюдательДобавить(Команда)
	
	ДобавитьСтрокуТаблицыПоИмениКоманды(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПоОтбору(Команда)
	
	АдресОтбораКомпоновки = ПоместитьВоВременноеХранилище(СформироватьСтруктуруОтборов(), Новый УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресОтбораКомпоновки", 	АдресОтбораКомпоновки);
	ПараметрыФормы.Вставить("Идентификатор", 			УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ДоступныеНастройки", 		ПодготовитьСписокВозможныхИсполнителей());
	ПараметрыФормы.Вставить("Предметы", 				ПолучитьМассивПредметов());
	ПараметрыФормы.Вставить("НаправлениеДеятельности", 	Объект.вогНаправлениеДеятельности);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ИсполнительПоОтборуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"Обработка.вогПодборИсполнителей.Форма.ФормаПодбораИсполнителей",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПоОтборуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресОтбораКомпоновки = ПоместитьВоВременноеХранилище(Результат.СоответствиеОтборов, Новый УникальныйИдентификатор);
	
	Срок = ПолучитьОбщийСрок(ЭтотОбъект);
	ТаблицаИсполнители.Очистить();
	
	СтрокаОбщийСрок = ТаблицаИсполнители.Добавить();
	СтрокаОбщийСрок.Исполнитель = "Общий срок";
	СтрокаОбщийСрок.Срок 		= Срок;
	
	Для Каждого ЭлементИсполнитель Из Результат.МассивИсполнителей Цикл
		
		СтрокаИсполнитель = ТаблицаИсполнители.Добавить();
		СтрокаИсполнитель.Исполнитель 	= ЭлементИсполнитель;
		СтрокаИсполнитель.Срок 			= Срок;
		
	КонецЦикла;
	
	ИсполнительПоОтборуЗавершениеНаСервере(Результат);
	
	ЭлементыДерева = ДеревоОтборов.ПолучитьЭлементы();
	
	Для Каждого ЭлементКорня Из ЭлементыДерева Цикл
		
		ИдентификаторСтроки = ЭлементКорня.ПолучитьИдентификатор();
		Элементы.ДеревоОтборов.Развернуть(ИдентификаторСтроки, Истина);
		
	КонецЦикла;
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьСписокИсполнителей(Команда)
	
	ЗаполнитьСписокИсполнителейПоОтборуНаСервере();
	
КонецПроцедуры

// ++ VOG Солодов В.В. 26.11.2020 CRM-1071
&НаКлиенте
Процедура УточнитьАдрес(Команда)
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресТаблицыАдресов = ПолучитьСписокАдресовНаСервере(ТекущиеДанные.Предмет, ТекущийПользователь, Объект.Дата);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", 			Истина);
	ПараметрыФормы.Вставить("АдресТаблицыАдресов", 	АдресТаблицыАдресов);
	ПараметрыФормы.Вставить("Адрес", 				ТекущиеДанные.Адрес);
	
	ОповещениеОВыбореАдреса = Новый ОписаниеОповещения("УточнитьАдресЗавершение", ЭтотОбъект, ТекущиеДанные.Предмет);
	
	ОткрытьФорму(
		"Обработка.вогГеокодирование.Форма.Форма",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОВыбореАдреса,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьАдресЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Адрес = Результат.Адрес;
	
	Для Каждого СтрокаСписка Из ТекущиеДанные.Пункты Цикл
		
		Если СтрокаСписка.Пометка Тогда
			ЗаполнитьУточненныйАдресПункта(ЭтотОбъект, СтрокаСписка.Значение, Результат.Адрес, ТекущиеДанные.Предмет);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьДоступностьКомандУточненияАдреса(ТекущиеДанные);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАдрес(Команда)
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Адрес = "";
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Предмет", ТекущиеДанные.Предмет);
	
	НайденныеСтроки = ТаблицаАдресов.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		ИндексСтроки = ТаблицаАдресов.Индекс(СтрокаТабличнойЧасти);
		ТаблицаАдресов.Удалить(ИндексСтроки);
	КонецЦикла;
	
	Для Каждого СтрокаСписка Из ТекущиеДанные.Пункты Цикл
		
		Если Не СтрокаСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = СтрШаблон("Адрес_%1", СтрокаСписка.Значение);
		ИмяЗаголовка = СтрШаблон("АдресЗаголовок_%1", СтрокаСписка.Значение);
		ЭтотОбъект[ИмяРеквизита] = "";
		Элементы[ИмяРеквизита].Видимость = Ложь;
		Элементы[ИмяЗаголовка].Видимость = Ложь;
		
	КонецЦикла;
	
	УстановитьДоступностьКомандУточненияАдреса(ТекущиеДанные);
	Модифицированность = Истина;
	
КонецПроцедуры
// -- VOG Солодов В.В. 26.11.2020 CRM-1071

#КонецОбласти

#Область СлужебныеПроцедурыФункции

#Область БизнесПроцесс

&НаСервере
Процедура ПолучитьТочкиСтарта()
		
	СписокТочекСтарта 	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(Объект.КартаМаршрута);
	Объект.ТочкаСтарта 	= СписокТочекСтарта[0].Значение;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущуюЗадачу(Исполнитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.Исполнитель = &Исполнитель";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", 	Объект.Ссылка);
	Запрос.УстановитьПараметр("Исполнитель", 	Исполнитель);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуИсполнителейЗадач()
	
	ТаблицаНаборИсполнители = Новый ТаблицаЗначений;
	ТаблицаНаборИсполнители.Колонки.Добавить("Исполнитель");
	ТаблицаНаборИсполнители.Колонки.Добавить("ТочкаМаршрута");
	ТаблицаНаборИсполнители.Колонки.Добавить("ДатаВыполнения");
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(Объект.КартаМаршрута);
	НаборЭтапов.Прочитать();
	
	Для Индекс = 1 По ТаблицаИсполнители.Количество() - 1 Цикл
		
		СтрокаТабличнойЧасти = ТаблицаИсполнители.Получить(Индекс);
		
		НоваяСтрока 				= ТаблицаНаборИсполнители.Добавить();
		НоваяСтрока.Исполнитель 	= СтрокаТабличнойЧасти.Исполнитель;
		НоваяСтрока.ТочкаМаршрута 	= НаборЭтапов[1].ТочкаМаршрута;
		НоваяСтрока.ДатаВыполнения 	= СтрокаТабличнойЧасти.Срок;
		
	КонецЦикла;
	
	ИндексТочки = 2;
	
	времТаблицаКонтролеры = ТаблицаКонтролеры.Выгрузить();
	времТаблицаКонтролеры.Сортировать("Приоритет");
	
	Для Индекс = 0 По времТаблицаКонтролеры.Количество() - 1 Цикл
		
		СтрокаТабличнойЧасти = времТаблицаКонтролеры.Получить(Индекс);
		
		НоваяСтрока 				= ТаблицаНаборИсполнители.Добавить();
		НоваяСтрока.Исполнитель 	= СтрокаТабличнойЧасти.Контролер;
		НоваяСтрока.ТочкаМаршрута 	= НаборЭтапов[ИндексТочки].ТочкаМаршрута;
		НоваяСтрока.ДатаВыполнения 	= СтрокаТабличнойЧасти.Срок;
		
		ИндексТочки = ИндексТочки + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаНаборИсполнители;
	
КонецФункции

&НаСервере
Процедура ЗаписатьНаборыЭтаповИсполнителей(Знач ТекущийОбъект)
	
	ТЗ_Исполнители = ТаблицаИсполнители.Выгрузить();
	
	ТЗ_Контролеры = ТаблицаКонтролеры.Выгрузить();
	ТЗ_Контролеры.Сортировать("Приоритет");
	
	Для Каждого СтрокаТабличнойЧасти Из ТЗ_Контролеры Цикл
		
		НоваяСтрока = ТЗ_Исполнители.Добавить();
		НоваяСтрока.Исполнитель = СтрокаТабличнойЧасти.Контролер;
		НоваяСтрока.Срок = СтрокаТабличнойЧасти.Срок;
		
	КонецЦикла;
	
	// Этапы бизнес-процесса
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(ТекущийОбъект.Ссылка);
	НаборЭтапов.Прочитать();
	
	// Сначала отключим все этапы проверки
	Если НаборЭтапов.Количество() > 0 Тогда
		
		Для Индекс = 2 По 4 Цикл
			
			Если Индекс <= НаборЭтапов.Количество() - 1 Тогда
				
				СтрокаЭтапа = НаборЭтапов[Индекс];
				СтрокаЭтапа.Используется = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ТЗ_Исполнители Цикл
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Исполнитель) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		// Исполнители бизнес-процесса.
		НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборИсполнителей.Отбор.Объект.Установить(ТекущийОбъект.Ссылка);
		НаборИсполнителей.Отбор.Исполнитель.Установить(СтрокаТабличнойЧасти.Исполнитель);
		НаборИсполнителей.Прочитать();
		
		ТекущаяЗадача 	= ПолучитьТекущуюЗадачу(СтрокаТабличнойЧасти.Исполнитель);
		НоваяДатаЗадачи = Неопределено;
		
		Для Каждого СтрокаНабора Из НаборИсполнителей Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Исполнитель) Тогда
				Исполнитель = СтрокаТабличнойЧасти.Исполнитель;
			Иначе
				Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан;
			КонецЕсли;
			
			Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда		// точка действия "Выполнить"
				
				СтрокаНабора.Исполнитель 				= Исполнитель;
				
				НаборЭтапов[1].ДатаВыполнения 			= СтрокаТабличнойЧасти.Срок;
				НаборЭтапов[1].ВариантВыполнения 		= ТЗ_Контролеры.Количество() > 0;
				НаборЭтапов[1].ВариантВыполненияСтрокой = CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(
					НаборЭтапов[1].ТочкаМаршрута,
					НаборЭтапов[1].ВариантВыполнения,
					Объект.НомерВерсииКартыМаршрута);
				
				Если ЗначениеЗаполнено(ТекущаяЗадача) И ТекущаяЗадача.CRM_ТочкаМаршрута = СтрокаНабора.ТочкаМаршрута Тогда
					НоваяДатаЗадачи = СтрокаТабличнойЧасти.Срок;
				КонецЕсли;
				
			ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[2].ТочкаМаршрута Тогда	// точка действия "Проверить 1"
				
				СтрокаНабора.Исполнитель 				= Исполнитель;
				
				НаборЭтапов[2].ДатаВыполнения 			= СтрокаТабличнойЧасти.Срок;
				НаборЭтапов[2].Используется				= ТЗ_Контролеры.Количество() > 0;
				
				Если ЗначениеЗаполнено(ТекущаяЗадача) И ТекущаяЗадача.CRM_ТочкаМаршрута = СтрокаНабора.ТочкаМаршрута Тогда
					НоваяДатаЗадачи = СтрокаТабличнойЧасти.Срок;
				КонецЕсли;
				
			ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[3].ТочкаМаршрута Тогда	// точка действия "Проверить 2"
				
				СтрокаНабора.Исполнитель 				= Исполнитель;
				
				НаборЭтапов[3].ДатаВыполнения 			= СтрокаТабличнойЧасти.Срок;
				НаборЭтапов[3].Используется				= ТЗ_Контролеры.Количество() > 1;
				
				Если ЗначениеЗаполнено(ТекущаяЗадача) И ТекущаяЗадача.CRM_ТочкаМаршрута = СтрокаНабора.ТочкаМаршрута Тогда
					НоваяДатаЗадачи = СтрокаТабличнойЧасти.Срок;
				КонецЕсли;
				
			ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[4].ТочкаМаршрута Тогда	// точка действия "Проверить 3"
				
				СтрокаНабора.Исполнитель 				= Исполнитель;
				
				НаборЭтапов[4].ДатаВыполнения 			= СтрокаТабличнойЧасти.Срок;
				НаборЭтапов[4].Используется				= ТЗ_Контролеры.Количество() > 2;
				
				Если ЗначениеЗаполнено(ТекущаяЗадача) И ТекущаяЗадача.CRM_ТочкаМаршрута = СтрокаНабора.ТочкаМаршрута Тогда
					НоваяДатаЗадачи = СтрокаТабличнойЧасти.Срок;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекущаяЗадача) И ЗначениеЗаполнено(НоваяДатаЗадачи) И ТекущаяЗадача.СрокИсполнения <> НоваяДатаЗадачи Тогда
			ЗадачаОбъект = ТекущаяЗадача.ПолучитьОбъект();
			ЗадачаОбъект.СрокИсполнения = НоваяДатаЗадачи;
			ЗадачаОбъект.Записать();
		КонецЕсли;
		
		НаборИсполнителей.Записать();
		
	КонецЦикла;
	
	НаборЭтапов.Записать();

КонецПроцедуры

&НаСервере
Процедура ПодготовитьПредварительнуюТаблицуЗадач(Отказ, ТекущийОбъект)
	
	ОбщийСписокЗадач = Ложь;
	ВременнаяТаблицаПредметы = ТекущийОбъект.вогПредметы.Выгрузить(, "Предмет");
	
	Если ВременнаяТаблицаПредметы.Количество() = 0 Тогда
		ОбщийСписокЗадач = Истина;
	КонецЕсли;
	
	СоответствиеИсполнителейПредметам = Новый Соответствие;
	
	Для Каждого СтрокаИсполнение Из ТаблицаИсполнители Цикл
		
		Если ТипЗнч(СтрокаИсполнение.Исполнитель) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДоступныхПредметов = Новый Массив;
		
		Если ОбщийСписокЗадач Тогда
			МассивДоступныхПредметов.Добавить(Неопределено);
		Иначе
			
			СоответствиеТипов = Новый Соответствие;
			
			Для Каждого СтрокаПредмет Из ВременнаяТаблицаПредметы Цикл
				
				ТипПредмета = ТипЗнч(СтрокаПредмет.Предмет);
				ЭлементСоответствия = СоответствиеТипов.Получить(ТипПредмета);
				
				Если ЭлементСоответствия = Неопределено Тогда
					
					МассивПредметов = Новый Массив;
					МассивПредметов.Добавить(СтрокаПредмет.Предмет);
					
					СоответствиеТипов.Вставить(ТипПредмета, МассивПредметов);
					
				Иначе
					ЭлементСоответствия.Добавить(СтрокаПредмет.Предмет);
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого КлючИЗначение Из СоответствиеТипов Цикл
				
				// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
				Если ТипЗнч(СтрокаИсполнение.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
					ДоступныеПредметы = вогБизнесПроцессыИЗадачиСервер.ОбъектыДоступныеПользователю(
						СтрокаИсполнение.Исполнитель, КлючИЗначение.Значение);
				Иначе
					ДоступныеПредметы = КлючИЗначение.Значение;
				КонецЕсли;
				// -- VOG Солодов В.В. 03.12.2020 CRM-1099
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДоступныхПредметов, ДоступныеПредметы, Истина);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не ОбщийСписокЗадач И МассивДоступныхПредметов.Количество() = 0 Тогда
			
			ШаблонСообщения = НСтр("ru = 'Для исполнителя %1 не доступно ни одного предмета.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаИсполнение.Исполнитель);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
			Прервать;
			
		КонецЕсли;
		
		СоответствиеИсполнителейПредметам.Вставить(СтрокаИсполнение.Исполнитель, МассивДоступныхПредметов);
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВременнаяТаблицаЗадачи = Новый ТаблицаЗначений;
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Идентификатор", 		вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаИдентификатор());
	ВременнаяТаблицаЗадачи.Колонки.Добавить("ИдентификаторЗадачи", 	вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаИдентификатор());
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Порядок", 				ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Пункт", 				ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Результат", 			вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаХранилище());
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Комментарий", 			вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаХранилище());
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Трудоемкость", 		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Время));
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Предмет", 				вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаПредмет());
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Исполнитель", 			вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаИсполнитель());
	ВременнаяТаблицаЗадачи.Колонки.Добавить("ТиповаяЗадача", 		ОбщегоНазначения.ОписаниеТипаВсеСсылки());
	ВременнаяТаблицаЗадачи.Колонки.Добавить("НаборЗадач", 			ОбщегоНазначения.ОписаниеТипаВсеСсылки());
	ВременнаяТаблицаЗадачи.Колонки.Добавить("ПустойПредмет", 		вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаБулево());
	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Адрес", 				ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ВременнаяТаблицаЗадачи.Колонки.Добавить("Город", 				вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаНаселенныйПункт());
	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	
	// ++ VOG Солодов В.В. 16.11.2020 CRM-1052
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов"));
	
	ТаблицаВариантыОпросовПоПредметам = Новый ТаблицаЗначений;
	ТаблицаВариантыОпросовПоПредметам.Колонки.Добавить("Предмет", 				вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаПредмет());
	ТаблицаВариантыОпросовПоПредметам.Колонки.Добавить("ВариантОпроса", 		Новый ОписаниеТипов(МассивТипов));
	// -- VOG Солодов В.В. 16.11.2020 CRM-1052
	
	ОбщиеПункты = Новый Массив;
	
	Для Каждого КлючИЗначение Из СоответствиеИсполнителейПредметам Цикл
		
		Исполнитель = КлючИЗначение.Ключ;
		
		Для Каждого Предмет Из КлючИЗначение.Значение Цикл
			
			ТипПредмета = ТипЗнч(Предмет);
			
			Для Каждого СтрокаТабличнойЧасти Из ТаблицаЧекЛист Цикл
				
				ПустойПредмет 	= Ложь;
				АдресПриложений = СтрокаТабличнойЧасти.Приложения;
				
				Если Не Предмет = Неопределено
					И Не СтрокаТабличнойЧасти.ПринадлежностьОбъекту = Неопределено
					И Не ТипЗнч(СтрокаТабличнойЧасти.ПринадлежностьОбъекту) = ТипПредмета Тогда
					
					ПустойПредмет = Истина;
					
				ИначеЕсли Не Предмет = Неопределено
					И СтрокаТабличнойЧасти.ПринадлежностьОбъекту = Неопределено Тогда
					
					СкорректироватьСписокПриложенийПоТипуПредмета(Предмет, АдресПриложений, ПустойПредмет);
					
				КонецЕсли;
				
				// ++ VOG Солодов В.В. 28.10.2020 CRM-1001
				Если Не Предмет = Неопределено
					И Не ПустойПредмет Тогда
					
					ПараметрыОтбораСтрок = Новый Структура;
					ПараметрыОтбораСтрок.Вставить("Предмет", Предмет);
					
					СтрокаПредметы = вогБизнесПроцессыИЗадачиСервер.НайтиСтрокуДереваРекурсивно(ДеревоПредметы, ПараметрыОтбораСтрок);
					
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Набор) Тогда
						СтрокаСписка = СтрокаПредметы.Пункты.НайтиПоЗначению(СтрокаТабличнойЧасти.ИдентификаторНабора);
					Иначе
						СтрокаСписка = СтрокаПредметы.Пункты.НайтиПоЗначению(СтрокаТабличнойЧасти.Идентификатор);
					КонецЕсли;
					
					Если СтрокаСписка = Неопределено
						Или Не СтрокаСписка.Пометка Тогда
						ПустойПредмет = Истина;
					КонецЕсли;
					
				КонецЕсли;
				// -- VOG Солодов В.В. 28.10.2020 CRM-1001
				
				Если Не ПустойПредмет Тогда
					СкорректироватьСписокПриложенийПоТипуПредмета(Предмет, АдресПриложений, ПустойПредмет);
				КонецЕсли;
				
				// VOG Солодов В.В. 09.12.2020 CRM-1100
				Идентификатор 	= Новый УникальныйИдентификатор(СтрЗаменить(СтрокаТабличнойЧасти.Идентификатор, "_", "-"));
				
				СтруктураПункта = Новый Структура;
				СтруктураПункта.Вставить("ПустойПредмет", 		ПустойПредмет);
				СтруктураПункта.Вставить("Предмет", 			Предмет);
				СтруктураПункта.Вставить("Исполнитель", 		Исполнитель);
				СтруктураПункта.Вставить("Идентификатор", 		Идентификатор);
				СтруктураПункта.Вставить("ИдентификаторЗадачи", Новый УникальныйИдентификатор());
				СтруктураПункта.Вставить("Пункт", 				СтрокаТабличнойЧасти.Пункт);
				
				СтруктураПункта.Вставить("Комментарий", 		Новый ХранилищеЗначения(СтрокаТабличнойЧасти.Комментарий));
				СтруктураПункта.Вставить("Трудоемкость", 		СтрокаТабличнойЧасти.Трудоемкость);
				СтруктураПункта.Вставить("ТиповаяЗадача", 		СтрокаТабличнойЧасти.ТиповаяЗадача);
				СтруктураПункта.Вставить("НаборЗадач", 			СтрокаТабличнойЧасти.Набор);
				
				Если ЭтоАдресВременногоХранилища(АдресПриложений) Тогда
					
					Результат = ПолучитьИзВременногоХранилища(АдресПриложений);
					
					Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
						
						СтруктураПункта.Вставить("Результат", Новый ХранилищеЗначения(Результат));
						
						Для Каждого СтрокаРезультат Из Результат Цикл
							
							Если ТипЗнч(СтрокаРезультат.Приложение) = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
								НоваяСтрокаОпросов = ТаблицаВариантыОпросовПоПредметам.Добавить();
								НоваяСтрокаОпросов.Предмет 			= Предмет;
								НоваяСтрокаОпросов.ВариантОпроса 	= СтрокаРезультат.Приложение;
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ПараметрыОтбораСтрок = Новый Структура;
				ПараметрыОтбораСтрок.Вставить("Предмет", 		Предмет);
				ПараметрыОтбораСтрок.Вставить("Исполнитель", 	Исполнитель);
				ПараметрыОтбораСтрок.Вставить("ПустойПредмет", 	Ложь);
				
				НайденныеСтроки = ВременнаяТаблицаЗадачи.НайтиСтроки(ПараметрыОтбораСтрок);
				СтруктураПункта.Вставить("Порядок", 			НайденныеСтроки.Количество() + 1);
				
				Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Партнеры") Тогда
					
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Набор) Тогда
						ИдентификаторАдреса = СтрокаТабличнойЧасти.ИдентификаторНабора;
					Иначе
						ИдентификаторАдреса = СтрокаТабличнойЧасти.Идентификатор;
					КонецЕсли;
					
					ПараметрыОтбораСтрок = Новый Структура;
					ПараметрыОтбораСтрок.Вставить("Предмет", 		Предмет);
					ПараметрыОтбораСтрок.Вставить("Идентификатор", 	ИдентификаторАдреса);
					
					НайденныеСтроки = ТаблицаАдресов.НайтиСтроки(ПараметрыОтбораСтрок);
					
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						СтруктураПункта.Вставить("Адрес", НайденнаяСтрока.Адрес);
						СтруктураПункта.Вставить("Город", НайденнаяСтрока.Город);
					КонецЦикла;
					
				КонецЕсли;
				
				Если ПустойПредмет Тогда
					ОбщиеПункты.Добавить(СтруктураПункта);
				Иначе
					НоваяСтрока = ВременнаяТаблицаЗадачи.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПункта);
				КонецЕсли;
				// До изменения
				//	НоваяСтрока = ВременнаяТаблицаЗадачи.Добавить();
				//	НоваяСтрока.ПустойПредмет 	= ПустойПредмет;
				//	
				//	Если Не ПустойПредмет Тогда
				//		
				//		Идентификатор 	= Новый УникальныйИдентификатор(СтрЗаменить(СтрокаТабличнойЧасти.Идентификатор, "_", "-"));
				//		
				//		НоваяСтрока.Идентификатор 		= Идентификатор;
				//		НоваяСтрока.ИдентификаторЗадачи = Новый УникальныйИдентификатор();
				//		НоваяСтрока.Пункт 				= СтрокаТабличнойЧасти.Пункт;
				//		
				//		Если ЭтоАдресВременногоХранилища(АдресПриложений) Тогда
				//			
				//			Результат 		= ПолучитьИзВременногоХранилища(АдресПриложений);
				//			
				//			// ++ VOG Солодов В.В. 16.11.2020 CRM-1052
				//			Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда // VOG Солодов В.В. 24.11.2020 // Добавил проверку
				//				
				//				НоваяСтрока.Результат = Новый ХранилищеЗначения(Результат);
				//				
				//				Для Каждого СтрокаРезультат Из Результат Цикл
				//					
				//					Если ТипЗнч(СтрокаРезультат.Приложение) = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
				//						НоваяСтрокаОпросов = ТаблицаВариантыОпросовПоПредметам.Добавить();
				//						НоваяСтрокаОпросов.Предмет 			= Предмет;
				//						НоваяСтрокаОпросов.ВариантОпроса 	= СтрокаРезультат.Приложение;
				//					КонецЕсли;
				//					
				//				КонецЦикла;
				//				
				//			КонецЕсли;
				//			// -- VOG Солодов В.В. 16.11.2020 CRM-1052
				//			
				//		КонецЕсли;
				//		
				//		НоваяСтрока.Комментарий 		= Новый ХранилищеЗначения(СтрокаТабличнойЧасти.Комментарий);
				//		НоваяСтрока.Трудоемкость 		= СтрокаТабличнойЧасти.Трудоемкость;
				//		НоваяСтрока.ТиповаяЗадача 		= СтрокаТабличнойЧасти.ТиповаяЗадача;
				//		НоваяСтрока.НаборЗадач 			= СтрокаТабличнойЧасти.Набор;
				//		
				//		ПараметрыОтбораСтрок = Новый Структура;
				//		ПараметрыОтбораСтрок.Вставить("Предмет", 		Предмет);
				//		ПараметрыОтбораСтрок.Вставить("Исполнитель", 	Исполнитель);
				//		ПараметрыОтбораСтрок.Вставить("ПустойПредмет", 	Ложь);
				//		
				//		НайденныеСтроки = ВременнаяТаблицаЗадачи.НайтиСтроки(ПараметрыОтбораСтрок);
				//		НоваяСтрока.Порядок 			= НайденныеСтроки.Количество() + 1;
				//		
				//		// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
				//		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Партнеры") Тогда
				//			
				//			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Набор) Тогда
				//				ИдентификаторАдреса = СтрокаТабличнойЧасти.ИдентификаторНабора;
				//			Иначе
				//				ИдентификаторАдреса = СтрокаТабличнойЧасти.Идентификатор;
				//			КонецЕсли;
				//			
				//			ПараметрыОтбораСтрок = Новый Структура;
				//			ПараметрыОтбораСтрок.Вставить("Предмет", 		Предмет);
				//			ПараметрыОтбораСтрок.Вставить("Идентификатор", 	ИдентификаторАдреса);
				//			
				//			НайденныеСтроки = ТаблицаАдресов.НайтиСтроки(ПараметрыОтбораСтрок);
				//			
				//			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				//				НоваяСтрока.Адрес = НайденнаяСтрока.Адрес;
				//				НоваяСтрока.Город = НайденнаяСтрока.Город;
				//			КонецЦикла;
				//			
				//		КонецЕсли;
				//		// -- VOG Солодов В.В. 30.11.2020 CRM-1071
				//		
				//	КонецЕсли;
				//
				//	НоваяСтрока.Предмет 		= Предмет;
				//	НоваяСтрока.Исполнитель 	= Исполнитель;
				// -- VOG Солодов В.В. 09.12.2020 CRM-1100
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// ++ VOG Солодов В.В. 09.12.2020 CRM-1100
	Для Каждого СтруктураПункта Из ОбщиеПункты Цикл
		
		// если пункт не выбран ни для одного предмета, необходимо добавить его как общий пункт
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Идентификатор", СтруктураПункта.Идентификатор);
		ПараметрыОтбораСтрок.Вставить("Исполнитель", СтруктураПункта.Исполнитель);
		
		НайденныеСтроки = ВременнаяТаблицаЗадачи.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = ВременнаяТаблицаЗадачи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПункта);
			НоваяСтрока.Предмет = Неопределено;
			
		КонецЕсли;
		
		// если не добавлено ни одной задачи по текущему предмету, необходимо добавить предмет в задачи
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Предмет", 		СтруктураПункта.Предмет);
		ПараметрыОтбораСтрок.Вставить("Исполнитель", 	СтруктураПункта.Исполнитель);
		
		НайденныеСтроки = ВременнаяТаблицаЗадачи.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ВременнаяТаблицаЗадачи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПункта, "ПустойПредмет, Предмет, Исполнитель");
		КонецЕсли;
		
	КонецЦикла;
	// -- VOG Солодов В.В. 09.12.2020 CRM-1100
	
	Если ВременнаяТаблицаЗадачи.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Указанные задачи не соответствуют предметам.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
		Возврат;
		
	КонецЕсли;
	
	АдресТаблицыПредметовПоИсполнителям = ПоместитьВоВременноеХранилище(ВременнаяТаблицаЗадачи, Новый УникальныйИдентификатор);
	// ++ VOG Солодов В.В. 16.11.2020 CRM-1052
	АдресТаблицыВариантовОпросовПоПредметам = ПоместитьВоВременноеХранилище(
		ТаблицаВариантыОпросовПоПредметам, Новый УникальныйИдентификатор);
	// -- VOG Солодов В.В. 16.11.2020 CRM-1052
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьТаблицуКонтролеров(Отказ)
	
	Если Отказ Или ТаблицаИсполнители.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыОпросов = Новый Массив;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаЧекЛист Цикл
		
		Если Не ЭтоАдресВременногоХранилища(СтрокаТабличнойЧасти.Приложения) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаПриложения = ПолучитьИзВременногоХранилища(СтрокаТабличнойЧасти.Приложения);
		//+++ Терпогосян Д.Б. [29.09.2021 17:09:06] № CRM-1166
		Если ТаблицаПриложения = Неопределено Тогда 
			Продолжить
		КонецЕсли; 
		//--- Терпогосян Д.Б. [29.09.2021 17:09:14] № CRM-1166 
		Для Каждого СтрокаПриложение Из ТаблицаПриложения Цикл
			
			Если ТипЗнч(СтрокаПриложение.Приложение) = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
				ВариантыОпросов.Добавить(СтрокаПриложение.Приложение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВариантыОпросов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	времТаблицаИсполнители = ТаблицаИсполнители.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	вогРолиИсполнителейПоВариантамОпроса.РольИсполнителя КАК РольИсполнителя,
	|	Пользователи.Ссылка КАК Исполнитель,
	|	Пользователи.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.вогРолиИсполнителейПоВариантамОпроса КАК вогРолиИсполнителейПоВариантамОпроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка В (&Исполнители))
	|ГДЕ
	|	вогРолиИсполнителейПоВариантамОпроса.ВариантОпроса В(&ВариантыОпросов)
	|	И вогРолиИсполнителейПоВариантамОпроса.Статус = &Статус";
	
	Запрос.УстановитьПараметр("ВариантыОпросов", 	ВариантыОпросов);
	Запрос.УстановитьПараметр("Статус", 			Справочники.вогШаблоныСтатусов.НаСогласовании);
	Запрос.УстановитьПараметр("Исполнители", 		времТаблицаИсполнители.ВыгрузитьКолонку("Исполнитель"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		МассивКонтролеров = Новый Массив;
		
		времТаблицаИсполнители.Сортировать("Срок Убыв");
		СрокКонтроля = времТаблицаИсполнители[0].Срок + 86400;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтруктураАдресации = Новый Структура;
			СтруктураАдресации.Вставить("Подразделение", ВыборкаДетальныеЗаписи.Подразделение);
			
			СписокИсполнителей = CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРолиСАдресацией(
				ВыборкаДетальныеЗаписи.РольИсполнителя, СтруктураАдресации);
			
			Для Каждого СтрокаСписка Из СписокИсполнителей Цикл
				МассивКонтролеров.Добавить(СтрокаСписка.Значение);
			КонецЦикла;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеКонтролеры.Контролер КАК Контролер
		|ПОМЕСТИТЬ ВТ_ТекущиеКонтролеры
		|ИЗ
		|	&ТекущиеКонтролеры КАК ТекущиеКонтролеры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Контролер,
		|	Пользователи.CRM_ДолжностнаяПозиция КАК ДолжностнаяПозиция
		|ПОМЕСТИТЬ ВТ_ВсеКонтролеры
		|ИЗ
		|	ВТ_ТекущиеКонтролеры КАК ВТ_ТекущиеКонтролеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ВТ_ТекущиеКонтролеры.Контролер = Пользователи.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пользователи.Ссылка,
		|	Пользователи.CRM_ДолжностнаяПозиция
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Ссылка В(&МассивКонтролеров)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеКонтролеры.Контролер КАК Контролер,
		|	ВТ_ВсеКонтролеры.ДолжностнаяПозиция КАК ДолжностнаяПозиция,
		|	ВЫБОР
		|		КОГДА ВТ_ТекущиеКонтролеры.Контролер ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Текущий,
		|	0 КАК Уровень
		|ИЗ
		|	ВТ_ВсеКонтролеры КАК ВТ_ВсеКонтролеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеКонтролеры КАК ВТ_ТекущиеКонтролеры
		|		ПО (ВТ_ВсеКонтролеры.Контролер = ВТ_ТекущиеКонтролеры.Контролер)";
		
		Запрос.УстановитьПараметр("ТекущиеКонтролеры", ТаблицаКонтролеры.Выгрузить(, "Контролер"));
		Запрос.УстановитьПараметр("МассивКонтролеров", МассивКонтролеров);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		времТаблицаКонтролеры = РезультатЗапроса.Выгрузить();
		
		Для Каждого СтрокаТабличнойЧасти Из времТаблицаКонтролеры Цикл
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДолжностнаяПозиция) Тогда
				СтрокаТабличнойЧасти.Уровень = СтрокаТабличнойЧасти.ДолжностнаяПозиция.Уровень();
			Иначе
				СтрокаТабличнойЧасти.Уровень = 99;
			КонецЕсли;
			
		КонецЦикла;
		
		времТаблицаКонтролеры.Сортировать("Уровень Возр");
		
		СтрокаДобавлена = Ложь;
		
		Для Каждого СтрокаТабличнойЧасти Из времТаблицаКонтролеры Цикл
			
			Если СтрокаДобавлена Или СтрокаТабличнойЧасти.Текущий Тогда
				Прервать;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаКонтролеры.Добавить();
			НоваяСтрока.Контролер 		= СтрокаТабличнойЧасти.Контролер;
			НоваяСтрока.Срок 			= СрокКонтроля;
			
			СтрокаДобавлена 			= Истина;
			КонтролироватьВыполнение 	= Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаКонтролеры.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбраны контролеры. Продолжение невозможно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьСписокПриложенийПоТипуПредмета(Предмет, АдресПриложений, ПустойПредмет)
	
	Если ЭтоАдресВременногоХранилища(АдресПриложений) Тогда
		
		ТипПредмета 		= ТипЗнч(Предмет);
		ТаблицаПриложений 	= ПолучитьИзВременногоХранилища(АдресПриложений);
		
		Если ТипЗнч(ТаблицаПриложений) = Тип("ТаблицаЗначений") Тогда
			
			ТаблицаРезультат 	= ТаблицаПриложений.СкопироватьКолонки();
			
			Для Каждого СтрокаТабличнойЧасти Из ТаблицаПриложений Цикл
				
				ДобавитьСтроку 	= Истина;
				ТипПриложения 	= ТипЗнч(СтрокаТабличнойЧасти.Приложение);
				
				Если ТипПриложения = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
					
					Если Метаданные.ПланыВидовХарактеристик.вогВариантыОпросов.Тип.СодержитТип(ТипПредмета)
						И вогБизнесПроцессыИЗадачиСервер.ПредметуДоступныВариантыОпроса(Предмет) Тогда
						
						ПолноеИмяОбъектаМетаданных = СтандартныеПодсистемыВызовСервера.ПолноеИмяОбъектаМетаданных(ТипПредмета);
						РезультатЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Приложение, "ТипыРеспондента");
						
						ТипыРеспондента = РезультатЗапроса.Выгрузить();
						
						ПараметрыОтбораСтрок = Новый Структура;
						ПараметрыОтбораСтрок.Вставить("ТипРеспондента", ПолноеИмяОбъектаМетаданных);
						
						ДобавитьСтроку = (ТипыРеспондента.НайтиСтроки(ПараметрыОтбораСтрок).Количество() > 0);
						
					Иначе
						ДобавитьСтроку = Ложь;
					КонецЕсли;
					
				ИначеЕсли ТипПриложения = Тип("ДокументСсылка.CRM_Мероприятие") Тогда
					
					Если Не ТипПредмета = Тип("СправочникСсылка.Партнеры")
						И Не ТипПредмета = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
						ДобавитьСтроку 	= Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ДобавитьСтроку Тогда
					НоваяСтрока = ТаблицаРезультат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаРезультат.Количество() = 0 Тогда
				ПустойПредмет = Истина;
			КонецЕсли;
			
			АдресПриложений = ПоместитьВоВременноеХранилище(ТаблицаРезультат, Новый УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 16.11.2020 CRM-1052
&НаСервере
Процедура ЗавершитьПересекающиесяБизнесПроцессы()
	
	Если ЭтоАдресВременногоХранилища(АдресТаблицыВариантовОпросовПоПредметам) Тогда
		
		ТаблицаВариантовОпросовПоПредметам = ПолучитьИзВременногоХранилища(АдресТаблицыВариантовОпросовПоПредметам);
		
		Если ТаблицаВариантовОпросовПоПредметам.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаВариантовОпросов.Предмет КАК Предмет,
		|	ТаблицаВариантовОпросов.ВариантОпроса КАК ВариантОпроса
		|ПОМЕСТИТЬ ВТ_ВариантыОпросов
		|ИЗ
		|	&ТаблицаВариантовОпросов КАК ТаблицаВариантовОпросов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_БизнесПроцесс.Ссылка КАК БизнесПроцесс,
		|	ДокументыАнкета.Ссылка КАК Анкета
		|ИЗ
		|	ВТ_ВариантыОпросов КАК ВТ_ВариантыОпросов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вогАнкета КАК ДокументыАнкета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|				ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|				ПО CRM_БизнесПроцесс.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
		|			ПО ДокументыАнкета.Ссылка = CRM_БизнесПроцесс.вогАнкета
		|				И (CRM_БизнесПроцесс.Завершен = ЛОЖЬ)
		|				И (CRM_БизнесПроцесс.ПометкаУдаления = ЛОЖЬ)
		|				И (НЕ ДокументыАнкета.ДокументОснование = CRM_БизнесПроцесс.Ссылка)
		|		ПО ВТ_ВариантыОпросов.Предмет = ДокументыАнкета.Респондент
		|			И ВТ_ВариантыОпросов.ВариантОпроса = ДокументыАнкета.ВариантОпроса
		|			И (ДокументыАнкета.ПометкаУдаления = ЛОЖЬ)
		|			И (ДокументыАнкета.Статус = &Статус)
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_БизнесПроцесс.Ссылка,
		|	ДокументыАнкета.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачаИсполнителя.Ссылка) = 1";
		
		Запрос.УстановитьПараметр("ТаблицаВариантовОпросов", 	ТаблицаВариантовОпросовПоПредметам);
		Запрос.УстановитьПараметр("Статус", 					Справочники.вогШаблоныСтатусов.НаСогласовании);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ТранзакцияУспешна = Истина;
			НачатьТранзакцию();
			
			БизнесПроцессОбъект = ВыборкаДетальныеЗаписи.БизнесПроцесс.ПолучитьОбъект();
			БизнесПроцессОбъект.УстановитьПометкуУдаления(Истина);
			
			АнкетаОбъект = ВыборкаДетальныеЗаписи.Анкета.ПолучитьОбъект();
			АнкетаОбъект.ДокументОснование = Объект.Ссылка;
			
			Попытка
				АнкетаОбъект.Записать();
			Исключение
				ТранзакцияУспешна = Ложь;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			
			Если ТранзакцияУспешна Тогда
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // -- VOG Солодов В.В. 16.11.2020 CRM-1052

&НаСервере
Процедура СохранитьСписокЗадач(Знач ТекущийОбъект)
	
	// ++ VOG Солодов В.В. 28.10.2020 CRM-1001
	ТекущаяТаблицаПредметы 		= ТекущийОбъект.вогПредметы.Выгрузить(, "Предмет");
	ВременнаяТаблицаПредметы 	= ТекущаяТаблицаПредметы.СкопироватьКолонки();
	ВременнаяТаблицаПредметы.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	
	Для Каждого СтрокаТабличнойЧасти Из ТекущаяТаблицаПредметы Цикл
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Предмет", СтрокаТабличнойЧасти.Предмет);
		
		СтрокаПредметы = вогБизнесПроцессыИЗадачиСервер.НайтиСтрокуДереваРекурсивно(ДеревоПредметы, ПараметрыОтбораСтрок);
		
		Для Каждого СтрокаСписка Из СтрокаПредметы.Пункты Цикл
			Если СтрокаСписка.Пометка Тогда
				НоваяСтрока = ВременнаяТаблицаПредметы.Добавить();
				НоваяСтрока.Предмет 		= СтрокаТабличнойЧасти.Предмет;
				НоваяСтрока.Идентификатор 	= СтрокаСписка.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	НоваяСтрока = ВременнаяТаблицаПредметы.Добавить();
	НоваяСтрока.Предмет = Неопределено;
	
	НаборЗаписейЗадачиПоручений = РегистрыСведений.вогЗадачиПоручений.СоздатьНаборЗаписей();
	НаборЗаписейЗадачиПоручений.Отбор.Объект.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписейЗадачиПоручений.Прочитать();
	НаборЗаписейЗадачиПоручений.Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из ВременнаяТаблицаПредметы Цикл
		
		ЭтоПредмет = Истина;
		
		Если СтрокаТабличнойЧасти.Предмет = Неопределено Тогда
			СтрокиПоручений = ТаблицаЧекЛист;
			ЭтоПредмет 		= Ложь;
		Иначе
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Идентификатор", СтрокаТабличнойЧасти.Идентификатор);
			
			СтрокиПоручений = ТаблицаЧекЛист.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Если СтрокиПоручений.Количество() = 0 Тогда
				
				ПараметрыОтбораСтрок = Новый Структура;
				ПараметрыОтбораСтрок.Вставить("ИдентификаторНабора", СтрокаТабличнойЧасти.Идентификатор);
				
				СтрокиПоручений = ТаблицаЧекЛист.НайтиСтроки(ПараметрыОтбораСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого СтрокаПоручение Из СтрокиПоручений Цикл
			
			Если Не ЭтоПредмет Тогда
				
				ПараметрыОтбораСтрок = Новый Структура;
				Если ЗначениеЗаполнено(СтрокаПоручение.Набор) Тогда
					ПараметрыОтбораСтрок.Вставить("Идентификатор", СтрокаПоручение.ИдентификаторНабора);
				Иначе
					ПараметрыОтбораСтрок.Вставить("Идентификатор", СтрокаПоручение.Идентификатор);
				КонецЕсли;
				
				НайденныеСтроки = ВременнаяТаблицаПредметы.НайтиСтроки(ПараметрыОтбораСтрок);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяЗапись = НаборЗаписейЗадачиПоручений.Добавить();
			НоваяЗапись.Объект 			= ТекущийОбъект.Ссылка;
			НоваяЗапись.Идентификатор 	= Новый УникальныйИдентификатор(СтрЗаменить(СтрокаПоручение.Идентификатор, "_", "-"));
			НоваяЗапись.Предмет 		= СтрокаТабличнойЧасти.Предмет;
			НоваяЗапись.Порядок 		= СтрокаПоручение.НомерСтроки;
			НоваяЗапись.Пункт 			= СтрокаПоручение.Пункт;
			Если ЭтоАдресВременногоХранилища(СтрокаПоручение.Приложения) Тогда
				НоваяЗапись.Результат 	= Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаПоручение.Приложения));
			КонецЕсли;
			НоваяЗапись.Комментарий 	= Новый ХранилищеЗначения(СтрокаПоручение.Комментарий);
			НоваяЗапись.Трудоемкость 	= СтрокаПоручение.Трудоемкость;
			НоваяЗапись.НаборЗадач 		= СтрокаПоручение.Набор;
			НоваяЗапись.ТиповаяЗадача 	= СтрокаПоручение.ТиповаяЗадача;
			// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Предмет", 		СтрокаТабличнойЧасти.Предмет);
			ПараметрыОтбораСтрок.Вставить("Идентификатор", 	СтрокаПоручение.Идентификатор);
			
			НайденныеСтроки = ТаблицаАдресов.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НоваяЗапись.Адрес 		= НайденнаяСтрока.Адрес;
			КонецЦикла;
			// -- VOG Солодов В.В. 30.11.2020 CRM-1071
			
		КонецЦикла;
	КонецЦикла;
	// До изменения
	//НаборЗаписейЗадачиПоручений = РегистрыСведений.вогЗадачиПоручений.СоздатьНаборЗаписей();
	//НаборЗаписейЗадачиПоручений.Отбор.Объект.Установить(ТекущийОбъект.Ссылка);
	//НаборЗаписейЗадачиПоручений.Прочитать();
	//НаборЗаписейЗадачиПоручений.Очистить();
	//
	//Для Каждого СтрокаТабличнойЧасти Из ТаблицаЧекЛист Цикл
	//	
	//	НоваяЗапись = НаборЗаписейЗадачиПоручений.Добавить();
	//	НоваяЗапись.Объект 			= ТекущийОбъект.Ссылка;
	//	НоваяЗапись.Идентификатор 	= Новый УникальныйИдентификатор(СтрЗаменить(СтрокаТабличнойЧасти.Идентификатор, "_", "-"));
	//	НоваяЗапись.Порядок 		= СтрокаТабличнойЧасти.НомерСтроки;
	//	НоваяЗапись.Пункт 			= СтрокаТабличнойЧасти.Пункт;
	//	Если ЭтоАдресВременногоХранилища(СтрокаТабличнойЧасти.Приложения) Тогда
	//		НоваяЗапись.Результат 		= Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаТабличнойЧасти.Приложения));
	//	КонецЕсли;
	//	НоваяЗапись.Комментарий 	= Новый ХранилищеЗначения(СтрокаТабличнойЧасти.Комментарий);
	//	НоваяЗапись.Трудоемкость 	= СтрокаТабличнойЧасти.Трудоемкость;
	//	НоваяЗапись.НаборЗадач 		= СтрокаТабличнойЧасти.Набор;
	//	НоваяЗапись.ТиповаяЗадача 	= СтрокаТабличнойЧасти.ТиповаяЗадача;
	//	
	//КонецЦикла;
	// -- VOG Солодов В.В. 28.10.2020 CRM-1001
	
	НаборЗаписейЗадачиПоручений.Записать();
	
	Если Не ЭтоАдресВременногоХранилища(АдресТаблицыПредметовПоИсполнителям) Тогда
		Возврат;
	КонецЕсли;
	
	ВременнаяТаблицаЗадачи = ПолучитьИзВременногоХранилища(АдресТаблицыПредметовПоИсполнителям);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаЗадачи.Идентификатор КАК Идентификатор,
	|	ВременнаяТаблицаЗадачи.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ВременнаяТаблицаЗадачи.Порядок КАК Порядок,
	|	ВременнаяТаблицаЗадачи.Пункт КАК Пункт,
	|	ВременнаяТаблицаЗадачи.Результат КАК Результат,
	|	ВременнаяТаблицаЗадачи.Комментарий КАК Комментарий,
	|	ВременнаяТаблицаЗадачи.Трудоемкость КАК Трудоемкость,
	|	ВременнаяТаблицаЗадачи.Предмет КАК Предмет,
	|	ВременнаяТаблицаЗадачи.Исполнитель КАК Исполнитель,
	|	ВременнаяТаблицаЗадачи.ТиповаяЗадача КАК ТиповаяЗадача,
	|	ВременнаяТаблицаЗадачи.НаборЗадач КАК НаборЗадач,
	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	|	ВременнаяТаблицаЗадачи.Адрес КАК Адрес,
	|	ВременнаяТаблицаЗадачи.Город КАК Город
	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	|ПОМЕСТИТЬ ВТ_ЗадачиПоПредметам
	|ИЗ
	|	&ВременнаяТаблицаЗадачи КАК ВременнаяТаблицаЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК Объект,
	|	ВТ_ЗадачиПоПредметам.Идентификатор КАК Идентификатор,
	|	ВТ_ЗадачиПоПредметам.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ВТ_ЗадачиПоПредметам.Порядок КАК Порядок,
	|	ВТ_ЗадачиПоПредметам.Пункт КАК Пункт,
	|	ВТ_ЗадачиПоПредметам.Результат КАК Результат,
	|	ВТ_ЗадачиПоПредметам.Комментарий КАК Комментарий,
	|	ВТ_ЗадачиПоПредметам.Трудоемкость КАК Трудоемкость,
	|	ВТ_ЗадачиПоПредметам.Предмет КАК Предмет,
	|	ВТ_ЗадачиПоПредметам.ТиповаяЗадача КАК ТиповаяЗадача,
	|	ВТ_ЗадачиПоПредметам.НаборЗадач КАК НаборЗадач,
	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	|	ЕСТЬNULL(ВТ_ЗадачиПоПредметам.Адрес, """") КАК Адрес,
	|	ЕСТЬNULL(ВТ_ЗадачиПоПредметам.Город, ЗНАЧЕНИЕ(Справочник.вогНаселенныеПункты.ПустаяСсылка)) КАК Город
	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	|ПОМЕСТИТЬ ВТ_ЗадачиПроцесса
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК СпрПользователи
	|		ПО ЗадачаИсполнителя.Исполнитель = СпрПользователи.Ссылка
	// -- VOG Солодов В.В. 03.12.2020 CRM-1099
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗадачиПоПредметам КАК ВТ_ЗадачиПоПредметам
	|		ПО ЗадачаИсполнителя.Исполнитель = ВТ_ЗадачиПоПредметам.Исполнитель
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
	// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Объект,
	|	ВТ_ЗадачиПоПредметам.Идентификатор КАК Идентификатор,
	|	ВТ_ЗадачиПоПредметам.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ВТ_ЗадачиПоПредметам.Порядок КАК Порядок,
	|	ВТ_ЗадачиПоПредметам.Пункт КАК Пункт,
	|	ВТ_ЗадачиПоПредметам.Результат КАК Результат,
	|	ВТ_ЗадачиПоПредметам.Комментарий КАК Комментарий,
	|	ВТ_ЗадачиПоПредметам.Трудоемкость КАК Трудоемкость,
	|	ВТ_ЗадачиПоПредметам.Предмет КАК Предмет,
	|	ВТ_ЗадачиПоПредметам.ТиповаяЗадача КАК ТиповаяЗадача,
	|	ВТ_ЗадачиПоПредметам.НаборЗадач КАК НаборЗадач,
	|	ЕСТЬNULL(ВТ_ЗадачиПоПредметам.Адрес, """") КАК Адрес,
	|	ЕСТЬNULL(ВТ_ЗадачиПоПредметам.Город, ЗНАЧЕНИЕ(Справочник.вогНаселенныеПункты.ПустаяСсылка)) КАК Город
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СпрСтруктураПредприятия
	|		ПО ЗадачаИсполнителя.ОсновнойОбъектАдресации = СпрСтруктураПредприятия.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗадачиПоПредметам КАК ВТ_ЗадачиПоПредметам
	|		ПО ЗадачаИсполнителя.ОсновнойОбъектАдресации = ВТ_ЗадачиПоПредметам.Исполнитель
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Объект,
	|	ВТ_ЗадачиПоПредметам.Идентификатор КАК Идентификатор,
	|	ВТ_ЗадачиПоПредметам.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ВТ_ЗадачиПоПредметам.Порядок КАК Порядок,
	|	ВТ_ЗадачиПоПредметам.Пункт КАК Пункт,
	|	ВТ_ЗадачиПоПредметам.Результат КАК Результат,
	|	ВТ_ЗадачиПоПредметам.Комментарий КАК Комментарий,
	|	ВТ_ЗадачиПоПредметам.Трудоемкость КАК Трудоемкость,
	|	ВТ_ЗадачиПоПредметам.Предмет КАК Предмет,
	|	ВТ_ЗадачиПоПредметам.ТиповаяЗадача КАК ТиповаяЗадача,
	|	ВТ_ЗадачиПоПредметам.НаборЗадач КАК НаборЗадач,
	|	ЕСТЬNULL(ВТ_ЗадачиПоПредметам.Адрес, """") КАК Адрес,
	|	ЕСТЬNULL(ВТ_ЗадачиПоПредметам.Город, ЗНАЧЕНИЕ(Справочник.вогНаселенныеПункты.ПустаяСсылка)) КАК Город
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиИсполнителей КАК СпрРолиИсполнителей
	|		ПО ЗадачаИсполнителя.Исполнитель = СпрРолиИсполнителей.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗадачиПоПредметам КАК ВТ_ЗадачиПоПредметам
	|		ПО ЗадачаИсполнителя.Исполнитель = ВТ_ЗадачиПоПредметам.Исполнитель
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
	// -- VOG Солодов В.В. 03.12.2020 CRM-1099
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ЗадачиПроцесса.Объект КАК Объект,
	|	ВТ_ЗадачиПроцесса.Идентификатор КАК Идентификатор,
	|	ЕСТЬNULL(вогЗадачиПоручений.ИдентификаторЗадачи, ВТ_ЗадачиПроцесса.ИдентификаторЗадачи) КАК ИдентификаторЗадачи,
	|	ВТ_ЗадачиПроцесса.Порядок КАК Порядок,
	|	ВТ_ЗадачиПроцесса.Пункт КАК Пункт,
	|	ВТ_ЗадачиПроцесса.Результат КАК Результат,
	|	ВТ_ЗадачиПроцесса.Комментарий КАК Комментарий,
	|	ВТ_ЗадачиПроцесса.Трудоемкость КАК Трудоемкость,
	|	ВТ_ЗадачиПроцесса.Предмет КАК Предмет,
	|	ВТ_ЗадачиПроцесса.ТиповаяЗадача КАК ТиповаяЗадача,
	|	ВТ_ЗадачиПроцесса.НаборЗадач КАК НаборЗадач,
	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	|	ВТ_ЗадачиПроцесса.Адрес КАК Адрес,
	|	ВТ_ЗадачиПроцесса.Город КАК Город
	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	|ПОМЕСТИТЬ ВТ_ЗадачиПоручений
	|ИЗ
	|	ВТ_ЗадачиПроцесса КАК ВТ_ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК вогЗадачиПоручений
	|		ПО ВТ_ЗадачиПроцесса.Объект = вогЗадачиПоручений.Объект
	|			И ВТ_ЗадачиПроцесса.Идентификатор = вогЗадачиПоручений.Идентификатор
	|			И ВТ_ЗадачиПроцесса.Предмет = вогЗадачиПоручений.Предмет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗадачиПоручений.Объект КАК Объект,
	|	ЕСТЬNULL(вогРезультатыВыполненияЗадачПоручений.Идентификатор, ВТ_ЗадачиПоручений.Идентификатор) КАК Идентификатор,
	|	ЕСТЬNULL(вогРезультатыВыполненияЗадачПоручений.ИдентификаторЗадачи, ВТ_ЗадачиПоручений.ИдентификаторЗадачи) КАК ИдентификаторЗадачи,
	|	ВТ_ЗадачиПоручений.Порядок КАК Порядок,
	|	ВТ_ЗадачиПоручений.Пункт КАК Пункт,
	|	ВТ_ЗадачиПоручений.Результат КАК Результат,
	|	ВТ_ЗадачиПоручений.Комментарий КАК Комментарий,
	|	ВТ_ЗадачиПоручений.Трудоемкость КАК Трудоемкость,
	|	ВТ_ЗадачиПоручений.Предмет КАК Предмет,
	|	ВТ_ЗадачиПоручений.ТиповаяЗадача КАК ТиповаяЗадача,
	|	ВТ_ЗадачиПоручений.НаборЗадач КАК НаборЗадач,
	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	|	ВТ_ЗадачиПоручений.Адрес КАК Адрес,
	|	ВТ_ЗадачиПоручений.Город КАК Город
	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	|ИЗ
	|	ВТ_ЗадачиПоручений КАК ВТ_ЗадачиПоручений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогРезультатыВыполненияЗадачПоручений КАК вогРезультатыВыполненияЗадачПоручений
	|		ПО ВТ_ЗадачиПоручений.Объект = вогРезультатыВыполненияЗадачПоручений.Объект
	|			И ВТ_ЗадачиПоручений.Идентификатор = вогРезультатыВыполненияЗадачПоручений.Идентификатор
	|			И ВТ_ЗадачиПоручений.Предмет = вогРезультатыВыполненияЗадачПоручений.Предмет
	|ИТОГИ ПО
	|	Объект,
	|	Предмет";
	
	Запрос.УстановитьПараметр("ВременнаяТаблицаЗадачи", ВременнаяТаблицаЗадачи);
	Запрос.УстановитьПараметр("БизнесПроцесс", 			ТекущийОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОбъект = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	СоответствиеАдресов = Новый Соответствие;
	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	
	Пока ВыборкаОбъект.Следующий() Цикл
		
		ЗадачаОбъект = ВыборкаОбъект.Объект.ПолучитьОбъект();
		ЗадачаОбъект.вогПредметы.Очистить();
		
		// Запись пунктов задачи
		НаборЗаписейЗадачиПоручения = РегистрыСведений.вогЗадачиПоручений.СоздатьНаборЗаписей();
		НаборЗаписейЗадачиПоручения.Отбор.Объект.Установить(ВыборкаОбъект.Объект);
		НаборЗаписейЗадачиПоручения.Прочитать();
		НаборЗаписейЗадачиПоручения.Очистить();
		
		ВыборкаПредмет = ВыборкаОбъект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПредмет.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаПредмет.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Идентификатор)
					И Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИдентификаторЗадачи) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяЗапись = НаборЗаписейЗадачиПоручения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
				
				// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Город) Тогда
					СоответствиеАдресов.Вставить(ВыборкаДетальныеЗаписи.Адрес, ВыборкаДетальныеЗаписи.Город);
				ИначеЕсли Не ПустаяСтрока(ВыборкаДетальныеЗаписи.Адрес) Тогда
					
					НаселенныйПункт = СоответствиеАдресов.Получить(ВыборкаДетальныеЗаписи.Адрес);
					
					Если НаселенныйПункт = Неопределено Тогда
						Попытка
							НаселенныйПункт = Справочники.вогНаселенныеПункты.СформироватьИерархиюАдресаПоПредставлению(
								ВыборкаДетальныеЗаписи.Адрес);
						Исключение
							///////////////
						КонецПопытки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НаселенныйПункт) Тогда
						НоваяЗапись.Город = НаселенныйПункт;
						СоответствиеАдресов.Вставить(ВыборкаДетальныеЗаписи.Адрес, НаселенныйПункт);
					КонецЕсли;
					
				КонецЕсли;
				// -- VOG Солодов В.В. 30.11.2020 CRM-1071
				
			КонецЦикла;
			
			// Добавление предмета в задачу
			Если Не ЗначениеЗаполнено(ВыборкаПредмет.Предмет) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПредмет = ЗадачаОбъект.вогПредметы.Добавить();
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Предмет", ВыборкаПредмет.Предмет);
			
			НайденныеСтроки = ТекущийОбъект.вогПредметы.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(СтрокаПредмет, СтрокаТабличнойЧасти,, "НомерСтроки");
			КонецЦикла;
			
		КонецЦикла;
		
		НаборЗаписейЗадачиПоручения.Записать();
		ЗадачаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСписокСотрудников(Знач ТекущийОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписейИсполнителиПоручения = РегистрыСведений.вогСписокИсполнителейПоручения.СоздатьНаборЗаписей();
	НаборЗаписейИсполнителиПоручения.Отбор.БизнесПроцесс.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписейИсполнителиПоручения.Прочитать();
	НаборЗаписейИсполнителиПоручения.Очистить();
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаИсполнители Цикл
		
		// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
		Если ТипЗнч(СтрокаТабличнойЧасти.Исполнитель) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		// До изменения
		//Если Не ТипЗнч(СтрокаТабличнойЧасти.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		//	Продолжить;
		//КонецЕсли;
		// -- VOG Солодов В.В. 03.12.2020 CRM-1099
		
		НоваяЗапись 				= НаборЗаписейИсполнителиПоручения.Добавить();
		НоваяЗапись.БизнесПроцесс 	= ТекущийОбъект.Ссылка;
		НоваяЗапись.Исполнитель		= СтрокаТабличнойЧасти.Исполнитель;
		
		НоваяЗапись.СрокИсполнения	= СтрокаТабличнойЧасти.Срок;
		
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаКонтролеры Цикл
		
		НоваяЗапись 				= НаборЗаписейИсполнителиПоручения.Добавить();
		НоваяЗапись.БизнесПроцесс 	= ТекущийОбъект.Ссылка;
		НоваяЗапись.Исполнитель		= СтрокаТабличнойЧасти.Контролер;
		НоваяЗапись.СрокИсполнения	= СтрокаТабличнойЧасти.Срок;
		НоваяЗапись.Приоритет		= СтрокаТабличнойЧасти.Приоритет;
		НоваяЗапись.Контролер 		= Истина;
		
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаСоисполнители Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Соисполнитель) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись 				= НаборЗаписейИсполнителиПоручения.Добавить();
		НоваяЗапись.БизнесПроцесс 	= ТекущийОбъект.Ссылка;
		НоваяЗапись.Исполнитель		= СтрокаТабличнойЧасти.Соисполнитель;
		НоваяЗапись.Соисполнитель 	= Истина;
		
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаНаблюдатели Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Наблюдатель) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись 				= НаборЗаписейИсполнителиПоручения.Добавить();
		НоваяЗапись.БизнесПроцесс 	= ТекущийОбъект.Ссылка;
		НоваяЗапись.Исполнитель		= СтрокаТабличнойЧасти.Наблюдатель;
		НоваяЗапись.Наблюдатель 	= Истина;
		
	КонецЦикла;
	
	НаборЗаписейИсполнителиПоручения.Записать();

КонецПроцедуры

#КонецОбласти

#Область Оформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредметыПредмет.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПредметы.Группа");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", 	Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 		ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", 			НСтр("ru = 'Объекты'"));
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредметыПометка.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПредметы.Группа");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", 	Истина);
	
	//
	
	//ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	//
	//ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредметыПункты.Имя);
	//
	//ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПредметы.Пункты");
	//ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	//
	//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'укажите пункты'"));
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаИсполнителиИсполнитель.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТаблицаИсполнители.Исполнитель");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= "Общий срок";
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", 	Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", 		WebЦвета.ДымчатоБелый);
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаИсполнителиСрок.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТаблицаИсполнители.Исполнитель");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= "Общий срок";
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ДымчатоБелый);
	
	// Дерево отборов
	// Поле Правое значение
	
	СписокВидовСравнений = Новый СписокЗначений;
	СписокВидовСравнений.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
	СписокВидовСравнений.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПравоеЗначение.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ВидСравнения");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение 	= СписокВидовСравнений;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПравоеЗначение.Имя);
	
	ГруппаИли = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоНастройка");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Поле Левое значение
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовЛевоеЗначение.Имя);
	
	ГруппаИли = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоНастройка");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Поле Вид сравнения
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовВидСравнения.Имя);
	
	ГруппаИли = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоНастройка");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Поле Тип группы
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовТипГруппы.Имя);
	
	ГруппаИли = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоГруппа");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Ложь;
	
	ОтборЭлемента = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоНастройка");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Поле Настройка
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовНастройка.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоНастройка");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", 	Ложь);
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовНастройка.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Элементы.ДеревоОтборов.ТекущиеДанные.ЭтоНастройка");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", 	WebЦвета.ДымчатоБелый);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	// Исполнители
	ОдинИсполнитель = ТаблицаИсполнители.Количество() <= 2;
	
	Элементы.ГруппаИсполнитель.Видимость 			= (ОдинИсполнитель И Не ОтборПоОдномуИсполнителю);
	Элементы.ГруппаИсполнители.Видимость 			= Не ОдинИсполнитель;
	Элементы.ГруппаОтборы.Видимость 				= Ложь;
	Элементы.ГруппаОтборИсполнителя.Видимость 		= ОтборПоОдномуИсполнителю;
	Элементы.ГруппаОтборИсполнительСрок.Видимость 	= (ОтборПоОдномуИсполнителю И ОдинИсполнитель);
	Элементы.ИсполнительПоОтбору2.Видимость 		= ПользователюДоступныЭлементыОтбора();
	
	УстановитьВысотуТаблицы("ТаблицаИсполнители");
	
КонецПроцедуры

&НаСервере
Функция ПользователюДоступныЭлементыОтбора()
	
	ЭлементыОтбораДоступны = Ложь;
	
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда
			ЭлементыОтбораДоступны = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЭлементыОтбораДоступны;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если Не Объект.Стартован Тогда
		Возврат;
	КонецЕсли;
	
	// Если текущий пользователь является постановщиком бизнес-процесса,
	// то форма блокирует только, если есть принятые к исполнению задачи.
	Если Объект.Ответственный = ТекущийПользователь
		Или Объект.Автор = ТекущийПользователь Тогда // VOG Солодов В.В. 19.01.2021 DEV-54
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ПринятаКИсполнению = ИСТИНА";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТолькоПросмотр = Не РезультатЗапроса.Пустой();
		
	Иначе
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ФормаСтартИЗакрыть.Видимость 				= Ложь;
	Элементы.ГруппаИсполнительДополнительно.Видимость 	= Ложь;
	
	Элементы.ГруппаЗадачи.Доступность 					= Не ТолькоПросмотр;
	Элементы.ГруппаВыборИсполнителя.Доступность 		= Ложь;
	Элементы.ГруппаОтборы.Доступность 					= Ложь;
	Элементы.ГруппаИсполнитель.Доступность 				= Ложь;
	Элементы.ГруппаИсполнители.Доступность 				= Ложь;
	Элементы.ГруппаДекорацияКонтролеры.Доступность 		= Ложь;
	Элементы.КонтролироватьВыполнение.Доступность 		= Ложь;
	Элементы.ОбщаяГруппаПостановщик.Доступность 		= Ложь;
	Элементы.СоисполнительДобавить.Доступность 			= Ложь;
	Элементы.НаблюдателиДобавить.Доступность 			= Ложь;
	Элементы.НапоминаниеДобавить.Доступность 			= Ложь;
	
	// ++ VOG Солодов В.В. 23.12.2020 DEV-31
	// Если хотя бы одна задача БП есть в командировке и по командировке запущен БП, соисполнителей добавлять нельзя
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вогКомандировка.Задачи КАК вогКомандировкаЗадачи
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|			ПО вогКомандировкаЗадачи.Ссылка = CRM_БизнесПроцесс.Предмет
	|		ПО ЗадачаИсполнителя.Ссылка = вогКомандировкаЗадачи.Задача
	|			И (вогКомандировкаЗадачи.Ссылка.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьАктивныйБППоКомандировке = Не РезультатЗапроса.Пустой();
	
	Элементы.ОбщаяГруппаСоисполнители.Доступность = Не ЕстьАктивныйБППоКомандировке;
	// -- VOG Солодов В.В. 23.12.2020 DEV-31
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандИзмененияПриоритета()
	
	Если ТаблицаКонтролеры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Индекс = 0 По (ТаблицаКонтролеры.Количество() - 1) Цикл
		
		СтрокаТабличнойЧасти 	= ТаблицаКонтролеры.Получить(Индекс);
		ИдентификаторСтроки 	= СтрокаТабличнойЧасти.Идентификатор;
		
		Если Индекс = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				СтрШаблон("ПовыситьПриоритет_%1", ИдентификаторСтроки),
				"Доступность",
				Ложь);
			
			Если Индекс = 0 И ТаблицаКонтролеры.Количество() = 1 Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					СтрШаблон("ПонизитьПриоритет_%1", ИдентификаторСтроки),
					"Доступность",
					Ложь);
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					СтрШаблон("ПонизитьПриоритет_%1", ИдентификаторСтроки),
					"Доступность",
					Истина);
				
			КонецЕсли;
			
		ИначеЕсли Индекс = (ТаблицаКонтролеры.Количество() - 1) Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				СтрШаблон("ПовыситьПриоритет_%1", ИдентификаторСтроки),
				"Доступность",
				Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				СтрШаблон("ПонизитьПриоритет_%1", ИдентификаторСтроки),
				"Доступность",
				Ложь);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				СтрШаблон("ПовыситьПриоритет_%1", ИдентификаторСтроки),
				"Доступность",
				Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				СтрШаблон("ПонизитьПриоритет_%1", ИдентификаторСтроки),
				"Доступность",
				Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьЭлементовЧекЛиста(ИдентификаторЭлемента, ЗначениеВидимостиДоступности)
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаЧекЛист Цикл
		
		Если СтрокаТабличнойЧасти.Идентификатор = ИдентификаторЭлемента Тогда
		
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				СтрШаблон("Редактировать_%1", СтрокаТабличнойЧасти.Идентификатор),
				"Видимость",
				ЗначениеВидимостиДоступности);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				СтрШаблон("Удалить_%1", СтрокаТабличнойЧасти.Идентификатор),
				"Видимость",
				ЗначениеВидимостиДоступности);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				СтрШаблон("Применить_%1", СтрокаТабличнойЧасти.Идентификатор),
				"Видимость",
				Не ЗначениеВидимостиДоступности);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				СтрШаблон("Отменить_%1", СтрокаТабличнойЧасти.Идентификатор),
				"Видимость",
				Не ЗначениеВидимостиДоступности);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				СтрШаблон("Редактировать_%1", СтрокаТабличнойЧасти.Идентификатор),
				"Доступность",
				ЗначениеВидимостиДоступности);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				СтрШаблон("Удалить_%1", СтрокаТабличнойЧасти.Идентификатор),
				"Доступность",
				ЗначениеВидимостиДоступности);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			СтрШаблон("Прикрепить_%1", СтрокаТабличнойЧасти.Идентификатор),
			"Доступность",
			ЗначениеВидимостиДоступности);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			СтрШаблон("ПрикрепитьФайлПункта_%1", СтрокаТабличнойЧасти.Идентификатор),
			"Доступность",
			ЗначениеВидимостиДоступности);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			СтрШаблон("РедактироватьКомментарий_%1", СтрокаТабличнойЧасти.Идентификатор),
			"Доступность",
			ЗначениеВидимостиДоступности);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		СтрШаблон("Пункт_%1", ИдентификаторЭлемента),
		"ТолькоПросмотр",
		ЗначениеВидимостиДоступности);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		СтрШаблон("Трудоемкость_%1", ИдентификаторЭлемента),
		"ТолькоПросмотр",
		ЗначениеВидимостиДоступности);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаЧекЛистРедактирование",
		"Доступность",
		ЗначениеВидимостиДоступности);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Добавить",
		"Доступность",
		ЗначениеВидимостиДоступности);
	
	ИзменитьВидЭлемента(ИдентификаторЭлемента, Не ЗначениеВидимостиДоступности);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗаголовкиЭлементовФормы()
	
	// Файлы
	Количество 			= ТаблицаПрисоединенныеФайлы.Количество();
	ЗаголовокКоманды 	= Новый ФорматированнаяСтрока(НСтр("ru = 'Файлы'") + " (" + Количество + ")");
	
	Элементы.ПерейтиФайлы.Заголовок = ЗаголовокКоманды;
	
	// Чек-лист
	Количество 			= ТаблицаЧекЛист.Количество();
	ЗаголовокКоманды 	= Новый ФорматированнаяСтрока(НСтр("ru = 'Задачи'") + " (" + Количество + ")");
	
	Элементы.ПерейтиЧекЛист.Заголовок = ЗаголовокКоманды;
	
	// Общая трудоемкость
	тОбщаяТрудоемкость = Дата(1,1,1);
	
	тНабор = Неопределено;
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаЧекЛист Цикл
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Набор) Тогда
			тОбщаяТрудоемкость 	= тОбщаяТрудоемкость + (СтрокаТабличнойЧасти.Трудоемкость - Дата(1,1,1));
		ИначеЕсли Не СтрокаТабличнойЧасти.Набор = тНабор Тогда
			тНабор = СтрокаТабличнойЧасти.Набор;
			тОбщаяТрудоемкость 	= тОбщаяТрудоемкость + (СтрокаТабличнойЧасти.ТрудоемкостьНабора - Дата(1,1,1));
		КонецЕсли;
	КонецЦикла;
	
	ОбщаяТрудоемкость = тОбщаяТрудоемкость;
	
	// Предмет задачи
	КорневыеЭлементы = ДеревоПредметы.ПолучитьЭлементы();
	
	Для Каждого ЭлементКорень Из КорневыеЭлементы Цикл
		
		Количество 			= ЭлементКорень.ПолучитьЭлементы().Количество();
		ЗаголовокКоманды 	= Новый ФорматированнаяСтрока(НСтр("ru = 'Объекты'") + " (" + Количество + ")");
		
	КонецЦикла;
	
	Элементы.ПерейтиПредметЗадачи.Заголовок = ЗаголовокКоманды;

КонецПроцедуры

&НаСервере
Процедура ИзменитьВидЭлемента(ИдентификаторЭлемента, Редактирование)
	
	Элемент = Элементы.Найти(СтрШаблон("Пункт_%1", ИдентификаторЭлемента));
	
	Если Не Элемент = Неопределено Тогда
		
		Если Редактирование Тогда
			Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
			Элемент.МногострочныйРежим 			= Истина;
			Элемент.РастягиватьПоГоризонтали 	= Истина;
			Элемент.АвтоМаксимальнаяШирина 		= Ложь;
		Иначе
			Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
			Элемент.АвтоМаксимальнаяВысота 		= Ложь;
			Элемент.РастягиватьПоВертикали 		= Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВысотуТаблицы(ИмяЭлемента)
	
	Элемент = Элементы.Найти(ИмяЭлемента);
	
	Если Не Элемент = Неопределено Тогда
		
		КоличествоСтрок = ЭтотОбъект[ИмяЭлемента].Количество();
		
		Если КоличествоСтрок <= 2 Тогда
			КоличествоСтрок = 3;
		КонецЕсли;
		
		Элемент.ВысотаВСтрокахТаблицы = ?(КоличествоСтрок = 0, 1, КоличествоСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементами

&НаСервере
Функция СоздатьГруппуЭлементовПоля(ИдентификаторЭлемента, ГруппаРодитель, СледующийЭлемент = Неопределено)
	
	ИмяГруппы = "Группа_" + ИдентификаторЭлемента;
	
	ГруппаЭлементов = Элементы.Найти(ИмяГруппы);
	
	Если ГруппаЭлементов = Неопределено Тогда
		
		Если СледующийЭлемент = Неопределено Тогда
			ГруппаЭлементов = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаРодитель);
		Иначе
			ГруппаЭлементов = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаРодитель, СледующийЭлемент);
		КонецЕсли;
		
		ГруппаЭлементов.Вид 						= ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлементов.ОтображатьЗаголовок 		= Ложь;
		ГруппаЭлементов.Отображение 				= ОтображениеОбычнойГруппы.Нет;
		ГруппаЭлементов.Группировка 				= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЭлементов.РастягиватьПоГоризонтали 	= Истина;
		ГруппаЭлементов.РастягиватьПоВертикали 		= Ложь;
		
	КонецЕсли;
	
	Возврат ГруппаЭлементов;
	
КонецФункции

#Область Задачи

&НаКлиенте
Процедура ОбработчикДобавленияПунктаЧекЛиста() Экспорт
	
	Если ВыполняетсяДобавлениеТиповогоПункта Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧекЛистПункт) Тогда
		ДобавитьПунктЧекЛиста();
	КонецЕсли;
	
	Элементы.ГруппаЧекЛистРедактирование.Видимость 	= Ложь;
	Элементы.Добавить.Видимость 					= Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТиповуюЗадачуНаСервере(Результат, Отказ)
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		Для Каждого ТиповаяЗадача Из Результат Цикл
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("ТиповаяЗадача", ТиповаяЗадача);
			
			НайденныеСтроки = ТаблицаЧекЛист.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
				
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Набор) Тогда
					
					ШаблонСообщения = НСтр("ru = 'Типовая задача %1 уже добавлена в поручение вместе с набором %2.'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ТиповаяЗадача, СтрокаТабличнойЧасти.Набор);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не Отказ Тогда
				ДобавитьПунктЧекЛиста(ТиповаяЗадача);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Соответствие") Тогда
		
		Для Каждого КлючИЗначение Из Результат Цикл
			
			НаборЗадач = КлючИЗначение.Ключ;
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Набор", НаборЗадач);
			
			НайденныеСтроки = ТаблицаЧекЛист.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ШаблонСообщения = НСтр("ru = 'Набор задач %1 уже добавлен в поручение.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, НаборЗадач);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				
			КонецЕсли;
			
			Если Не Отказ Тогда
				
				Для Каждого ТиповаяЗадача Из КлючИЗначение.Значение Цикл
					ДобавитьПунктЧекЛиста(ТиповаяЗадача, НаборЗадач);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПунктЧекЛиста(ТиповаяЗадачаСсылка = Неопределено, Знач НаборЗадач = Неопределено)
	
	ИдентификаторЭлемента 	= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор();
	
	Если ТиповаяЗадачаСсылка = Неопределено Тогда
		
		
		Пункт 					= ЧекЛистПункт;
		Результат 				= ЧекЛистРезультат;
		Приложения 				= ЧекЛистПриложения;
		Трудоемкость 			= Дата(1,1,1);
		ТиповаяЗадача 			= Справочники.ПунктыЧекЛистовЗадач.ПустаяСсылка();
		ПринадлежностьОбъекту 	= Неопределено;
		
	Иначе
		
		СтруктураРеквизитов 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ТиповаяЗадачаСсылка, "ОписаниеЗадачи, ПлановоеВремя, Приложения, ПринадлежностьОбъекту");
		
		ТаблицаПриложений 		= СтруктураРеквизитов.Приложения.Выгрузить();
		
		Пункт 					= СтруктураРеквизитов.ОписаниеЗадачи;
		Результат 				= СформироватьПредставлениеРезультата(ТаблицаПриложений);
		Приложения 				= ПоместитьВоВременноеХранилище(ТаблицаПриложений, Новый УникальныйИдентификатор);
		Трудоемкость 			= СтруктураРеквизитов.ПлановоеВремя;
		ТиповаяЗадача 			= ТиповаяЗадачаСсылка;
		ПринадлежностьОбъекту 	= СтруктураРеквизитов.ПринадлежностьОбъекту;
		
	КонецЕсли;
	
	Если НаборЗадач = Неопределено Тогда
		НаборЗадач= Справочники.вогНаборыТиповыхЗадач.ПустаяСсылка();
		ИдентификаторНабора = "";
		ТрудоемкостьНабора 	= Дата(1,1,1);
	Иначе
		ИдентификаторНабора = вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(XMLСтрока(НаборЗадач));
		ТрудоемкостьНабора 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборЗадач, "ПлановоеВремя");
	КонецЕсли;
	
	СтрокаЧекЛист = ТаблицаЧекЛист.Добавить();
	СтрокаЧекЛист.Пункт 				= Пункт;
	СтрокаЧекЛист.НомерСтроки 			= ТаблицаЧекЛист.Количество();
	СтрокаЧекЛист.Результат 			= Результат;
	СтрокаЧекЛист.Приложения 			= Приложения;
	СтрокаЧекЛист.Идентификатор 		= ИдентификаторЭлемента;
	СтрокаЧекЛист.Трудоемкость 			= Трудоемкость;
	СтрокаЧекЛист.ТиповаяЗадача 		= ТиповаяЗадача;
	СтрокаЧекЛист.Набор 				= НаборЗадач;
	СтрокаЧекЛист.ТрудоемкостьНабора 	= ТрудоемкостьНабора;
	СтрокаЧекЛист.ИдентификаторНабора 	= ИдентификаторНабора;
	СтрокаЧекЛист.ПринадлежностьОбъекту = ПринадлежностьОбъекту;
	
	// ++ VOG Солодов В.В. 02.12.2020
	// Рефакторинг
	СоздатьЭлементыЧекЛиста(СтрокаЧекЛист, Истина);
	// -- VOG Солодов В.В. 02.12.2020
	
	Если Не ВыполняетсяДобавлениеТиповогоПункта Тогда
		
		ЧекЛистПункт 		= "";
		ЧекЛистПриложения 	= "";
		ЧекЛистРезультат 	= "";
		
	КонецЕсли;
	
	НастроитьЗаголовкиЭлементовФормы();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыЧекЛиста(СтрокаЗадач, ДобавитьПунктыВПредметы)
	
	// СозданиеЭлементов
	Если ЗначениеЗаполнено(СтрокаЗадач.Набор) Тогда
		// если это набор типовых задач, то добавляем группу, реквизиты, элементы и команды набора
		ДобавитьЭлементыНабораЗадач(СтрокаЗадач.ИдентификаторНабора, СтрокаЗадач.Идентификатор, СтрокаЗадач.Набор);
	Иначе
		
		// если предыдущий пункт это набор, то нужно добавить жирный разделитель
		ТолщинаРамки = 1;
		
		Если ТаблицаЧекЛист.Количество() > 1 Тогда
			
			ПоследнийПункт = ТаблицаЧекЛист[ТаблицаЧекЛист.Количество() - 2];
			
			Если ЗначениеЗаполнено(ПоследнийПункт.Набор) Тогда
				ТолщинаРамки = 2;
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьРазделительЧекЛиста(СтрокаЗадач.Идентификатор, ТолщинаРамки);
		
	КонецЕсли;
	
	ГруппаЭлементов = СоздатьГруппуЭлементовПоля(СтрокаЗадач.Идентификатор, Элементы.ГруппаПунктыЧекЛиста);
	
	ДобавитьРеквизитыПоНастройке(СтрокаЗадач.Идентификатор, "ЧекЛист");
	// ++ VOG Солодов В.В. 28.10.2020 CRM-1001
	// Добавление задачи в пункты предметов
	Если ЗначениеЗаполнено(СтрокаЗадач.Набор) Тогда
		
		ИдентификаторПредметаПункта = СтрокаЗадач.ИдентификаторНабора;
		ДобавитьРазделительФлажкаЧекЛиста(СтрокаЗадач.Идентификатор, ГруппаЭлементов);
		
	Иначе
		ИдентификаторПредметаПункта = СтрокаЗадач.Идентификатор;
		ДобавитьФлажокЧекЛиста(СтрокаЗадач.Идентификатор, ГруппаЭлементов);
	КонецЕсли;
	// -- VOG Солодов В.В. 28.10.2020 CRM-1001
	
	ЗаполнитьРеквизитыЧекЛиста(ЭтотОбъект, СтрокаЗадач);
	ДобавитьЭлементыЧекЛиста(СтрокаЗадач.Идентификатор, ГруппаЭлементов, СтрокаЗадач.Набор);
	
	Если ДобавитьПунктыВПредметы Тогда
		
		Для Каждого ЭлементКорня Из ДеревоПредметы.ПолучитьЭлементы() Цикл
			
			ЭлементыДерева = ЭлементКорня.ПолучитьЭлементы();
			
			Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
				ДобавитьПунктыПредметовРекурсивно(ЭлементДерева, ИдентификаторПредметаПункта,, СтрокаЗадач.ПринадлежностьОбъекту);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	вогБизнесПроцессыИЗадачиСервер.ДобавитьКомандыПоНастройке(
		ЭтотОбъект,
		СтрокаЗадач.Идентификатор,
		ГруппаЭлементов,
		"ЧекЛист",
		Истина);
	
	// Установка высоты таблиц
	МассивИменТаблиц = Новый Массив;
	МассивИменТаблиц.Добавить("Результат_%1");
	МассивИменТаблиц.Добавить("Файлы_%1");
	
	Для Каждого ИмяТаблицы Из МассивИменТаблиц Цикл
		
		ИмяЭлемента = СтрШаблон(ИмяТаблицы, СтрокаЗадач.Идентификатор);
		УстановитьВысотуТаблицы(ИмяЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПунктыПредметовРекурсивно(СтрокаДерева, ИдентификаторЭлемента, Пометка, ИзменяемыйПредмет = Неопределено)
	
	Если ИзменяемыйПредмет = Неопределено
		Или СтрокаДерева.Предмет = ИзменяемыйПредмет Тогда
		
		СтрокаСписка = СтрокаДерева.Пункты.НайтиПоЗначению(ИдентификаторЭлемента);
		
		Если СтрокаСписка = Неопределено Тогда
			Если Не ИзменяемыйПредмет = Неопределено Тогда
				Возврат;
			КонецЕсли;
			СтрокаСписка = СтрокаДерева.Пункты.Добавить(ИдентификаторЭлемента,, Пометка);
		Иначе
			СтрокаСписка.Пометка = Пометка;
		КонецЕсли;
		
		Если Не ИзменяемыйПредмет = Неопределено Тогда
			
			// ++ VOG Солодов В.В. 26.11.2020 CRM-1071
			Если Пометка Тогда
				Адрес = СтрокаДерева.Адрес;
			Иначе
				Адрес = "";
			КонецЕсли;
			
			ЗаполнитьУточненныйАдресПункта(ЭтотОбъект, ИдентификаторЭлемента, Адрес, ИзменяемыйПредмет);
			// -- VOG Солодов В.В. 26.11.2020 CRM-1071
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		ЗаполнитьПунктыПредметовРекурсивно(ЭлементДерева, ИдентификаторЭлемента, Пометка, ИзменяемыйПредмет);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПунктыПредметовРекурсивно(СтрокаДерева, ИдентификаторЭлемента, МассивПредметов = Неопределено, ПринадлежностьОбъекту = Ложь)
	
	Если Не СтрокаДерева.Предмет = "Предметы" Тогда
		
		Пометка = Ложь;
		
		Если ПринадлежностьОбъекту = Ложь
			И Не МассивПредметов = Неопределено Тогда
			Пометка = (Не МассивПредметов.Найти(СтрокаДерева.Предмет) = Неопределено);
		ИначеЕсли Не ПринадлежностьОбъекту = Ложь Тогда
			Пометка = вогБизнесПроцессыИЗадачиСервер.ПредметСоответствуетПринадлежностиОбъекта(СтрокаДерева.Предмет, ПринадлежностьОбъекту);
		КонецЕсли;
		
		Если СтрокаДерева.Пункты.НайтиПоЗначению(ИдентификаторЭлемента) = Неопределено Тогда
			СтрокаДерева.Пункты.Добавить(ИдентификаторЭлемента,, Пометка);
		КонецЕсли;
		
		// ++ VOG Солодов В.В. 26.11.2020 CRM-1071
		Если Пометка Тогда
			
			Адрес = СтрокаДерева.Адрес;
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Предмет", СтрокаДерева.Предмет);
			ПараметрыОтбораСтрок.Вставить("Идентификатор", ИдентификаторЭлемента);
			
			НайденныеСтроки = ТаблицаАдресов.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Адрес = НайденнаяСтрока.Адрес;
			КонецЦикла;
			
			ЗаполнитьУточненныйАдресПункта(ЭтотОбъект, ИдентификаторЭлемента, Адрес, СтрокаДерева.Предмет);
		КонецЕсли;
		// -- VOG Солодов В.В. 26.11.2020 CRM-1071
		
	КонецЕсли;
	
	ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		ДобавитьПунктыПредметовРекурсивно(ЭлементДерева, ИдентификаторЭлемента, МассивПредметов, ПринадлежностьОбъекту);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПунктыПредметовРекурсивно(СтрокаДерева, ИдентификаторЭлемента)
	
	СтрокаСписка = СтрокаДерева.Пункты.НайтиПоЗначению(ИдентификаторЭлемента);
	
	Если Не СтрокаСписка = Неопределено Тогда
		СтрокаДерева.Пункты.Удалить(СтрокаСписка);
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	// Удаление адреса
	ЗаполнитьУточненныйАдресПункта(ЭтотОбъект, ИдентификаторЭлемента, "", СтрокаДерева.Предмет);
	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	
	ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		УдалитьПунктыПредметовРекурсивно(ЭлементДерева, ИдентификаторЭлемента);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРазделительЧекЛиста(Знач ИдентификаторЭлемента, ТолщинаРамки = 1)
	
	ДекорацияРазделитель = Элементы.Добавить(
		"Разделитель_" + ИдентификаторЭлемента,
		Тип("ДекорацияФормы"),
		Элементы.ГруппаПунктыЧекЛиста);
	
	ДекорацияРазделитель.Вид 						= ВидДекорацииФормы.Надпись;
	ДекорацияРазделитель.Шрифт 						= Новый Шрифт(, 4);
	ДекорацияРазделитель.Рамка 						= Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание, ТолщинаРамки);
	ДекорацияРазделитель.АвтоМаксимальнаяШирина		= Ложь;
	ДекорацияРазделитель.РастягиватьПоГоризонтали 	= Истина;

КонецПроцедуры

&НаСервере
Процедура ДобавитьФлажокЧекЛиста(ИдентификаторЭлемента, ГруппаРодитель)
	
	ИмяРеквизита = СтрШаблон("ПометкаПункта_%1", ИдентификаторЭлемента);
	
	Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), ГруппаРодитель);
	Элемент.Вид 					= ВидПоляФормы.ПолеФлажка;
	Элемент.ПоложениеЗаголовка 		= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.ПутьКДанным 			= ИмяРеквизита;
	
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ЗадачаПометкаПриИзменении");
	
	ЭтотОбъект[ИмяРеквизита] = (Не ТекущийПредмет = "Предметы" И Не ТекущийПредмет = Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРазделительФлажкаЧекЛиста(ИдентификаторЭлемента, ГруппаРодитель)
	
	ДекорацияРазделитель = Элементы.Добавить(
		"РазделительПометка_" + ИдентификаторЭлемента,
		Тип("ДекорацияФормы"),
		ГруппаРодитель);
	
	ДекорацияРазделитель.Вид 						= ВидДекорацииФормы.Картинка;
	ДекорацияРазделитель.Рамка 						= Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ДекорацияРазделитель.АвтоМаксимальнаяШирина		= Ложь;
	ДекорацияРазделитель.МаксимальнаяШирина			= 2;
	ДекорацияРазделитель.Ширина 					= 2;
	ДекорацияРазделитель.РастягиватьПоГоризонтали 	= Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНаборЗадач(ПараметрыНабора)
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить(СтрШаблон("Группа_%1", ПараметрыНабора.Идентификатор));
	МассивИменЭлементов.Добавить(СтрШаблон("Разделитель_%1", ПараметрыНабора.Идентификатор));
	МассивИменЭлементов.Добавить(СтрШаблон("Картинка_%1", ПараметрыНабора.Идентификатор));
	МассивИменЭлементов.Добавить(СтрШаблон("ПометкаПункта_%1", ПараметрыНабора.Идентификатор));
	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	МассивИменЭлементов.Добавить(СтрШаблон("Адрес_%1", ПараметрыНабора.Идентификатор));
	МассивИменЭлементов.Добавить(СтрШаблон("АдресЗаголовок_%1", ПараметрыНабора.Идентификатор));
	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	
	Для Каждого ИмяЭлемента Из МассивИменЭлементов Цикл
		
		Элемент = Элементы.Найти(ИмяЭлемента);
		
		Если Не Элемент = Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты.Добавить(СтрШаблон("ПометкаПункта_%1", ПараметрыНабора.Идентификатор));
	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	УдаляемыеРеквизиты.Добавить(СтрШаблон("Адрес_%1", ПараметрыНабора.Идентификатор));
	УдаляемыеРеквизиты.Добавить(СтрШаблон("АдресЗаголовок_%1", ПараметрыНабора.Идентификатор));
	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Набор", ПараметрыНабора.НаборЗадач);
	
	НайденныеСтроки = ТаблицаЧекЛист.НайтиСтроки(ПараметрыОтбораСтрок);
	
	МассивИдентификаторов = ТаблицаЧекЛист.Выгрузить(НайденныеСтроки).ВыгрузитьКолонку("Идентификатор");
	
	Для Каждого ИдентификаторЭлемента Из МассивИдентификаторов Цикл
		УдалитьРеквизитыЧекЛиста(ИдентификаторЭлемента);
	КонецЦикла;
	
	// Удаление связанных пунктов в предметах
	ЭлементыКорня = ДеревоПредметы.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыКорня Цикл
		УдалитьПунктыПредметовРекурсивно(ЭлементДерева, ПараметрыНабора.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРеквизитыЧекЛиста(ИдентификаторЭлемента)
	
	СтруктураНастроек = НастройкаЭлементов["ЧекЛист"];
	
	// Удаление реквизитов
	УдаляемыеРеквизиты = Новый Массив;
	
	Для Каждого СтруктураРеквизита Из СтруктураНастроек.Реквизиты Цикл
		УдаляемыеРеквизиты.Добавить(СтрШаблон("%1_%2", СтруктураРеквизита.Имя, ИдентификаторЭлемента));
	КонецЦикла;
	
	//Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ПометкаПункта_" + ИдентификаторЭлемента) Тогда
	//	УдаляемыеРеквизиты.Добавить("ПометкаПункта_" + ИдентификаторЭлемента);
	//КонецЕсли;
	
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
	//Удаление элементов
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("Группа_" + ИдентификаторЭлемента);
	МассивИменЭлементов.Добавить("Пункт_" + ИдентификаторЭлемента);
	МассивИменЭлементов.Добавить("Результат_" + ИдентификаторЭлемента);
	МассивИменЭлементов.Добавить("Редактировать_" + ИдентификаторЭлемента);
	МассивИменЭлементов.Добавить("Прикрепить_" + ИдентификаторЭлемента);
	МассивИменЭлементов.Добавить("Удалить_" + ИдентификаторЭлемента);
	МассивИменЭлементов.Добавить("Разделитель_" + ИдентификаторЭлемента);
	МассивИменЭлементов.Добавить("ПометкаПункта_" + ИдентификаторЭлемента);
	
	Для Каждого ИмяЭлемента Из МассивИменЭлементов Цикл
		
		Элемент = Элементы.Найти(ИмяЭлемента);
		
		Если Не Элемент = Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление команд и кнопок
	Для Каждого СтруктураКоманды Из СтруктураНастроек.Команды Цикл
		
		Команда = Команды.Найти(СтрШаблон("%1_%2", СтруктураКоманды.Имя, ИдентификаторЭлемента));
		
		Если Не Команда = Неопределено Тогда
			Команды.Удалить(Команда);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление строки таблицы
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идентификатор", ИдентификаторЭлемента);
	
	НайденныеСтроки = ТаблицаЧекЛист.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаЧекЛист Из НайденныеСтроки Цикл
		ТаблицаЧекЛист.Удалить(ТаблицаЧекЛист.Индекс(СтрокаЧекЛист));
	КонецЦикла;
	
	// Удаление связанных пунктов в предметах
	ЭлементыКорня = ДеревоПредметы.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыКорня Цикл
		УдалитьПунктыПредметовРекурсивно(ЭлементДерева, ИдентификаторЭлемента);
	КонецЦикла;
	
	НастроитьЗаголовкиЭлементовФормы();
	
	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	// Удаление адреса
	ЗаполнитьУточненныйАдресПункта(ЭтотОбъект, ИдентификаторЭлемента, "", ТекущийПредмет);
	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыЧекЛиста(Форма, СтрокаТаблицы)
	
	ИдентификаторЭлемента = СтрокаТаблицы.Идентификатор;
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("Выполнен_" + ИдентификаторЭлемента);
	МассивИменРеквизитов.Добавить("Пункт_" + ИдентификаторЭлемента);
	МассивИменРеквизитов.Добавить("Результат_" + ИдентификаторЭлемента);
	МассивИменРеквизитов.Добавить("Приложения_" + ИдентификаторЭлемента);
	МассивИменРеквизитов.Добавить("Комментарий_" + ИдентификаторЭлемента);
	МассивИменРеквизитов.Добавить("КомментарийЗаголовок_" + ИдентификаторЭлемента);
	МассивИменРеквизитов.Добавить("Трудоемкость_" + ИдентификаторЭлемента);
	// ++ VOG Солодов В.В. 26.11.2020 CRM-1071
	//МассивИменРеквизитов.Добавить("Адрес_" + ИдентификаторЭлемента);
	МассивИменРеквизитов.Добавить("АдресЗаголовок_" + ИдентификаторЭлемента);
	// -- VOG Солодов В.В. 26.11.2020 CRM-1071
	
	// Заполнение реквизитов
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		
		Если СтрНайти(ИмяРеквизита, "Пункт_") > 0 Тогда
			Форма[ИмяРеквизита] = СтрокаТаблицы.Пункт;
		// ++ VOG Солодов В.В. 26.11.2020 CRM-1071
		ИначеЕсли СтрНайти(ИмяРеквизита, "АдресЗаголовок_") > 0 Тогда
			Форма[ИмяРеквизита] = НСтр("ru = 'Уточненный адрес:'");
		// -- VOG Солодов В.В. 26.11.2020 CRM-1071
		ИначеЕсли СтрНайти(ИмяРеквизита, "Приложения_") > 0 Тогда
			Форма[ИмяРеквизита] = СтрокаТаблицы.Приложения;
		ИначеЕсли СтрНайти(ИмяРеквизита, "Комментарий_") > 0 Тогда
			Форма[ИмяРеквизита] = СтрокаТаблицы.Комментарий;
		ИначеЕсли СтрНайти(ИмяРеквизита, "Трудоемкость_") > 0 Тогда
			Форма[ИмяРеквизита] = СтрокаТаблицы.Трудоемкость;
		ИначеЕсли СтрНайти(ИмяРеквизита, "КомментарийЗаголовок_") > 0 Тогда
			Форма[ИмяРеквизита] = НСтр("ru = 'Комментарий:'");
		ИначеЕсли СтрНайти(ИмяРеквизита, "Результат_") > 0 Тогда
			
			Форма[ИмяРеквизита].Очистить();
			
			МассивЗначений = СтрРазделить(СтрокаТаблицы.Результат, ";", Ложь);
			
			Для Каждого ЭлементРезультат Из МассивЗначений Цикл
				
				НоваяСтрока = Форма[ИмяРеквизита].Добавить();
				НоваяСтрока.Значение = ЭлементРезультат;
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыЧекЛиста(ИдентификаторЭлемента, ГруппаРодитель, НаборЗадач)
	
	ИмяГруппы = "ГруппаПунктКомментарий_" + ИдентификаторЭлемента;
	
	ГруппаПунктКомментарий = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаРодитель);
	
	ГруппаПунктКомментарий.Вид 								= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПунктКомментарий.ОтображатьЗаголовок 				= Ложь;
	ГруппаПунктКомментарий.Отображение 						= ОтображениеОбычнойГруппы.Нет;
	ГруппаПунктКомментарий.Группировка 						= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПунктКомментарий.РастягиватьПоГоризонтали 		= Истина;
	ГруппаПунктКомментарий.РастягиватьПоВертикали 			= Истина;
	ГруппаПунктКомментарий.ЦветФона 						= WebЦвета.ДымчатоБелый;
	
	// Поле Пункт
	Элемент = Элементы.Добавить("Пункт_" + ИдентификаторЭлемента, Тип("ПолеФормы"), ГруппаПунктКомментарий);
	Элемент.Вид 											= ВидПоляФормы.ПолеНадписи;
	Элемент.ПоложениеЗаголовка 								= ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	Элемент.ПутьКДанным 									= "Пункт_" + ИдентификаторЭлемента;
	Элемент.АвтоМаксимальнаяШирина							= Ложь;
	Элемент.АвтоМаксимальнаяВысота							= Ложь;
	Элемент.РастягиватьПоГоризонтали 						= Истина;
	Элемент.РастягиватьПоВертикали 							= Истина;
	
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ЗадачаПриИзменении");
	
	// ++ VOG Солодов В.В. 26.11.2020 CRM-1071
	// Поле Заголовок адреса
	ИмяГруппы = "ГруппаАдрес_" + ИдентификаторЭлемента;
	
	ГруппаАдрес = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаПунктКомментарий);
	
	ГруппаАдрес.Вид 										= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаАдрес.ОтображатьЗаголовок 						= Ложь;
	ГруппаАдрес.Отображение 								= ОтображениеОбычнойГруппы.Нет;
	ГруппаАдрес.Группировка 								= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаАдрес.РастягиватьПоГоризонтали 					= Истина;
	ГруппаАдрес.РастягиватьПоВертикали 						= Истина;
	
	Элемент = Элементы.Добавить("АдресЗаголовок_" + ИдентификаторЭлемента, Тип("ПолеФормы"), ГруппаАдрес);
	Элемент.Вид 											= ВидПоляФормы.ПолеНадписи;
	Элемент.ПутьКДанным 									= "АдресЗаголовок_" + ИдентификаторЭлемента;
	Элемент.ПоложениеЗаголовка 								= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.РастягиватьПоГоризонтали 						= Истина;
	Элемент.РастягиватьПоВертикали 							= Истина;
	Элемент.АвтоМаксимальнаяШирина							= Ложь;
	Элемент.АвтоМаксимальнаяВысота							= Ложь;
	Элемент.Ширина 											= 15;
	Элемент.МаксимальнаяШирина 								= 15;
	Элемент.ГоризонтальноеПоложение 						= ГоризонтальноеПоложениеЭлемента.Лево;
	//Элемент.ВертикальноеПоложение 							= ВертикальноеПоложениеЭлемента.Верх;
	Элемент.Видимость 										= Не ПустаяСтрока(ЭтотОбъект["Адрес_" + ИдентификаторЭлемента]);
	
	// Поле Адрес
	Элемент = Элементы.Добавить("Адрес_" + ИдентификаторЭлемента, Тип("ПолеФормы"), ГруппаАдрес);
	Элемент.Вид 											= ВидПоляФормы.ПолеНадписи;
	Элемент.ПоложениеЗаголовка 								= ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	Элемент.ПутьКДанным 									= "Адрес_" + ИдентификаторЭлемента;
	Элемент.АвтоМаксимальнаяШирина							= Ложь;
	Элемент.АвтоМаксимальнаяВысота							= Ложь;
	Элемент.РастягиватьПоГоризонтали 						= Истина;
	Элемент.РастягиватьПоВертикали 							= Истина;
	Элемент.Гиперссылка 									= Истина;
	Элемент.Видимость 										= Не ПустаяСтрока(ЭтотОбъект["Адрес_" + ИдентификаторЭлемента]);
	
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_АдресНажатие");
	// -- VOG Солодов В.В. 26.11.2020 CRM-1071
	
	// Поле Заголовок комментария
	ИмяГруппы = "ГруппаКомментарий_" + ИдентификаторЭлемента;
	
	ГруппаКомментарий = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаПунктКомментарий);
	
	ГруппаКомментарий.Вид 									= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКомментарий.ОтображатьЗаголовок 					= Ложь;
	ГруппаКомментарий.Отображение 							= ОтображениеОбычнойГруппы.Нет;
	ГруппаКомментарий.Группировка 							= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаКомментарий.РастягиватьПоГоризонтали 				= Истина;
	ГруппаКомментарий.РастягиватьПоВертикали 				= Истина;
	
	Элемент = Элементы.Добавить("НадписьКомментарий_" + ИдентификаторЭлемента, Тип("ПолеФормы"), ГруппаКомментарий);
	Элемент.Вид 											= ВидПоляФормы.ПолеНадписи;
	Элемент.ПутьКДанным 									= "КомментарийЗаголовок_" + ИдентификаторЭлемента;
	Элемент.ПоложениеЗаголовка 								= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.РастягиватьПоГоризонтали 						= Истина;
	Элемент.РастягиватьПоВертикали 							= Истина;
	Элемент.АвтоМаксимальнаяШирина							= Ложь;
	Элемент.АвтоМаксимальнаяВысота							= Ложь;
	Элемент.Ширина 											= 9;
	Элемент.МаксимальнаяШирина 								= 9;
	Элемент.ГоризонтальноеПоложение 						= ГоризонтальноеПоложениеЭлемента.Лево;
	Элемент.ВертикальноеПоложение 							= ВертикальноеПоложениеЭлемента.Верх;
	
	Если Не ПустаяСтрока(ЭтотОбъект["Комментарий_" + ИдентификаторЭлемента]) Тогда
		ВидимостьЭлемента = Истина;
	Иначе
		ВидимостьЭлемента = Ложь;
	КонецЕсли;
	
	Элемент.Видимость = ВидимостьЭлемента;
	
	// Поле Комментарий
	Элемент = Элементы.Добавить("Комментарий_" + ИдентификаторЭлемента, Тип("ПолеФормы"), ГруппаКомментарий);
	Элемент.Вид 											= ВидПоляФормы.ПолеНадписи;
	Элемент.ПоложениеЗаголовка 								= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.ПутьКДанным 									= "Комментарий_" + ИдентификаторЭлемента;
	Элемент.АвтоМаксимальнаяШирина							= Ложь;
	Элемент.АвтоМаксимальнаяВысота							= Ложь;
	Элемент.РастягиватьПоГоризонтали 						= Истина;
	Элемент.РастягиватьПоВертикали 							= Истина;
	Элемент.ВертикальноеПоложение 							= ВертикальноеПоложениеЭлемента.Верх;
	
	// Таблица Результат
	ИмяГруппы = "ГруппаРезультат_" + ИдентификаторЭлемента;
	
	ГруппаРезультат = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаРодитель);
	
	ГруппаРезультат.Вид 									= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаРезультат.ОтображатьЗаголовок 					= Истина;
	ГруппаРезультат.Отображение 							= ОтображениеОбычнойГруппы.Нет;
	ГруппаРезультат.Группировка 							= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаРезультат.РастягиватьПоГоризонтали 				= Ложь;
	ГруппаРезультат.РастягиватьПоВертикали 					= Истина;
	ГруппаРезультат.Заголовок 								= НСтр("ru = 'Результаты'");
	ГруппаРезультат.ЦветТекстаЗаголовка 					= ЦветаСтиля.ЦветТекстаФормы;
	
	ЭлементТаблица = Элементы.Добавить("Результат_" + ИдентификаторЭлемента, Тип("ТаблицаФормы"), ГруппаРезультат);
	ЭлементТаблица.ПоложениеКоманднойПанели 				= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементТаблица.ПоложениеЗаголовка 						= ПоложениеЗаголовкаЭлементаФормы.Нет;
	//ЭлементТаблица.Заголовок 								= НСтр("ru = 'Результаты'");
	ЭлементТаблица.ПутьКДанным 								= "Результат_" + ИдентификаторЭлемента;
	ЭлементТаблица.РастягиватьПоВертикали 					= Ложь;
	ЭлементТаблица.РастягиватьПоГоризонтали 				= Ложь;
	ЭлементТаблица.ТолькоПросмотр 							= Истина;
	ЭлементТаблица.ЦветФона									= WebЦвета.ДымчатоБелый;
	ЭлементТаблица.ЦветРамки								= WebЦвета.ДымчатоБелый;
	ЭлементТаблица.АвтоМаксимальнаяВысота					= Ложь;
	ЭлементТаблица.АвтоМаксимальнаяВысотаВСтрокахТаблицы 	= Ложь;
	ЭлементТаблица.ВариантУправленияВысотой 				= ВариантУправленияВысотойТаблицы.ВСтрокахТаблицы;
	ЭлементТаблица.УстановитьДействие("Выбор", "Подключаемый_ЗадачиВыбор");
	
	// Колонка Результат Значение
	Элемент = Элементы.Добавить("РезультатЗначение_" + ИдентификаторЭлемента, Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид 											= ВидПоляФормы.ПолеВвода;
	Элемент.ПоложениеЗаголовка 								= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.ПутьКДанным 									= "Результат_" + ИдентификаторЭлемента + ".Значение";
	
	// Поле Трудоемкость
	ИмяГруппы = "ГруппаТрудоемкость_" + ИдентификаторЭлемента;
	
	ГруппаТрудоемкость = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаРодитель);
	
	ГруппаТрудоемкость.Вид 									= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаТрудоемкость.ОтображатьЗаголовок 					= Не ЗначениеЗаполнено(НаборЗадач);
	ГруппаТрудоемкость.Отображение 							= ОтображениеОбычнойГруппы.Нет;
	ГруппаТрудоемкость.Группировка 							= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаТрудоемкость.РастягиватьПоГоризонтали 			= Ложь;
	ГруппаТрудоемкость.РастягиватьПоВертикали 				= Истина;
	ГруппаТрудоемкость.Заголовок 							= НСтр("ru = 'Плановое время, час'");
	ГруппаТрудоемкость.ЦветТекстаЗаголовка 					= ЦветаСтиля.ЦветТекстаФормы;
	ГруппаТрудоемкость.Ширина 								= 13;
	
	Если Не ЗначениеЗаполнено(НаборЗадач) Тогда
		
		Элемент = Элементы.Добавить("Трудоемкость_" + ИдентификаторЭлемента, Тип("ПолеФормы"), ГруппаТрудоемкость);
		Элемент.Вид 										= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 							= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным 								= "Трудоемкость_" + ИдентификаторЭлемента;
		Элемент.АвтоМаксимальнаяШирина						= Истина;
		Элемент.АвтоМаксимальнаяВысота						= Истина;
		Элемент.РастягиватьПоГоризонтали 					= Ложь;
		Элемент.РастягиватьПоВертикали 						= Ложь;
		Элемент.ТолькоПросмотр 								= Истина;
		Элемент.ГоризонтальноеПоложение 					= ГоризонтальноеПоложениеЭлемента.Право;
		Элемент.ГоризонтальноеПоложениеВГруппе 				= ГоризонтальноеПоложениеЭлемента.Право;
		Элемент.ФорматРедактирования 						= "ДФ=HH:mm; ДП=00:00";
		Элемент.КнопкаРегулирования 						= Истина;
		Элемент.КнопкаВыбора 								= Ложь;
		
	Иначе
		
		Элемент = Элементы.Добавить("Трудоемкость_" + ИдентификаторЭлемента, Тип("ДекорацияФормы"), ГруппаТрудоемкость);
		Элемент.Вид 										= ВидДекорацииФормы.Надпись;
		Элемент.АвтоМаксимальнаяШирина						= Ложь;
		Элемент.РастягиватьПоГоризонтали 					= Истина;
		
	КонецЕсли;
	
	// Таблица Файлы
	ИмяГруппы = "ГруппаФайлы_" + ИдентификаторЭлемента;
	
	ГруппаФайлы = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаРодитель);
	
	ГруппаФайлы.Вид 										= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФайлы.ОтображатьЗаголовок 						= Истина;
	ГруппаФайлы.Отображение 								= ОтображениеОбычнойГруппы.Нет;
	ГруппаФайлы.Группировка 								= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаФайлы.РастягиватьПоГоризонтали 					= Ложь;
	ГруппаФайлы.РастягиватьПоВертикали 						= Истина;
	ГруппаФайлы.Заголовок 									= НСтр("ru = 'Файлы'");
	ГруппаФайлы.ЦветТекстаЗаголовка 						= ЦветаСтиля.ЦветТекстаФормы;
	ГруппаФайлы.Ширина 										= 20;
	
	ЭлементТаблица = Элементы.Добавить("Файлы_" + ИдентификаторЭлемента, Тип("ТаблицаФормы"), ГруппаФайлы);
	ЭлементТаблица.ПоложениеКоманднойПанели 				= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементТаблица.ПоложениеЗаголовка 						= ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементТаблица.ПутьКДанным 								= "Файлы_" + ИдентификаторЭлемента;
	ЭлементТаблица.РастягиватьПоВертикали 					= Ложь;
	ЭлементТаблица.РастягиватьПоГоризонтали 				= Ложь;
	ЭлементТаблица.ТолькоПросмотр 							= Истина;
	ЭлементТаблица.ЦветФона									= WebЦвета.ДымчатоБелый;
	ЭлементТаблица.ЦветРамки								= WebЦвета.ДымчатоБелый;
	ЭлементТаблица.АвтоМаксимальнаяВысота					= Ложь;
	ЭлементТаблица.АвтоМаксимальнаяВысотаВСтрокахТаблицы 	= Ложь;
	ЭлементТаблица.ВариантУправленияВысотой 				= ВариантУправленияВысотойТаблицы.ВСтрокахТаблицы;
	ЭлементТаблица.УстановитьДействие("Выбор", "Подключаемый_ЗадачиВыбор");
	
	ЭлементТаблица.АвтоМаксимальнаяШирина					= Истина;
	
	// Колонка Файлы Значение
	Элемент = Элементы.Добавить("ФайлыЗначение_" + ИдентификаторЭлемента, Тип("ПолеФормы"), ЭлементТаблица);
	Элемент.Вид 											= ВидПоляФормы.ПолеВвода;
	Элемент.ПоложениеЗаголовка 								= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.ПутьКДанным 									= "Файлы_" + ИдентификаторЭлемента + ".Значение";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыНабораЗадач(Знач ИдентификаторНабора, Знач ИдентификаторЭлемента, НаборЗадач)
	
	ГруппаНаборЗадач = Элементы.Найти("Группа_" + ИдентификаторНабора);
	
	Если ГруппаНаборЗадач = Неопределено Тогда
		
		РеквизитыНабора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НаборЗадач, "Наименование, ПлановоеВремя");
		
		ПредставлениеНабора = СтрШаблон(
			НСтр("ru = '%1 (плановое время %2 ч.)'"),
			РеквизитыНабора.Наименование,
			Формат(РеквизитыНабора.ПлановоеВремя, "ДФ=HH:mm; ДП=00:00"));
		
		ГруппаНаборЗадач = СоздатьГруппуЭлементовПоля(ИдентификаторНабора, Элементы.ГруппаПунктыЧекЛиста);
		
		// ++ VOG Солодов В.В. 27.11.2020 CRM-1071
		ДобавитьРеквизитыПоНастройке(ИдентификаторНабора, "НаборЗадач");
		ЭтотОбъект["АдресЗаголовок_" + ИдентификаторНабора] = НСтр("ru = 'Уточненный адрес'");
		
		// ++ VOG Солодов В.В. 28.10.2020 CRM-1001
		ДобавитьФлажокЧекЛиста(ИдентификаторНабора, ГруппаНаборЗадач);
		// -- VOG Солодов В.В. 28.10.2020 CRM-1001
		
		// Группа Наименование набора + Уточнение адреса
		ИмяГруппы = "ГруппаАдресНабор_" + ИдентификаторНабора;
		ГруппаАдресНабор = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаНаборЗадач);
		
		ГруппаАдресНабор.Вид 										= ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаАдресНабор.ОтображатьЗаголовок 						= Ложь;
		ГруппаАдресНабор.Отображение 								= ОтображениеОбычнойГруппы.Нет;
		ГруппаАдресНабор.Группировка 								= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаАдресНабор.РастягиватьПоГоризонтали 					= Истина;
		ГруппаАдресНабор.РастягиватьПоВертикали 					= Истина;
		
		//
		ДекорацияРазделитель = Элементы.Добавить(
			"Разделитель_" + ИдентификаторНабора,
			Тип("ДекорацияФормы"),
			ГруппаАдресНабор);
	
		ДекорацияРазделитель.Вид 									= ВидДекорацииФормы.Надпись;
		ДекорацияРазделитель.Заголовок 								= ПредставлениеНабора;
		ДекорацияРазделитель.Шрифт 									= Новый Шрифт(,, Истина);
		ДекорацияРазделитель.Рамка 									= Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху, 2);
		ДекорацияРазделитель.АвтоМаксимальнаяШирина					= Ложь;
		ДекорацияРазделитель.РастягиватьПоГоризонтали 				= Истина;
		
		// Группа элементов Заголовок адреса и Адрес
		ИмяГруппы = "ГруппаАдрес_" + ИдентификаторНабора;
		
		ГруппаАдрес = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаАдресНабор);
		
		ГруппаАдрес.Вид 											= ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаАдрес.ОтображатьЗаголовок 							= Ложь;
		ГруппаАдрес.Отображение 									= ОтображениеОбычнойГруппы.Нет;
		ГруппаАдрес.Группировка 									= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаАдрес.РастягиватьПоГоризонтали 						= Истина;
		ГруппаАдрес.РастягиватьПоВертикали 							= Истина;
		
		// Заголовок адреса
		Элемент = Элементы.Добавить("АдресЗаголовок_" + ИдентификаторНабора, Тип("ПолеФормы"), ГруппаАдрес);
		Элемент.Вид 												= ВидПоляФормы.ПолеНадписи;
		Элемент.ПутьКДанным 										= "АдресЗаголовок_" + ИдентификаторНабора;
		Элемент.ПоложениеЗаголовка 									= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.РастягиватьПоГоризонтали 							= Истина;
		Элемент.РастягиватьПоВертикали 								= Истина;
		Элемент.АвтоМаксимальнаяШирина								= Ложь;
		Элемент.АвтоМаксимальнаяВысота								= Ложь;
		Элемент.Ширина 												= 15;
		Элемент.МаксимальнаяШирина 									= 15;
		Элемент.ГоризонтальноеПоложение 							= ГоризонтальноеПоложениеЭлемента.Лево;
		Элемент.ВертикальноеПоложение 								= ВертикальноеПоложениеЭлемента.Верх;
		Элемент.Видимость 											= Не ПустаяСтрока(ЭтотОбъект["Адрес_" + ИдентификаторНабора]);
		
		// Поле Адрес
		Элемент = Элементы.Добавить("Адрес_" + ИдентификаторНабора, Тип("ПолеФормы"), ГруппаАдрес);
		Элемент.Вид 												= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 									= ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		Элемент.ПутьКДанным 										= "Адрес_" + ИдентификаторНабора;
		Элемент.АвтоМаксимальнаяШирина								= Ложь;
		Элемент.АвтоМаксимальнаяВысота								= Ложь;
		Элемент.РастягиватьПоГоризонтали 							= Истина;
		Элемент.РастягиватьПоВертикали 								= Истина;
		Элемент.Гиперссылка 										= Истина;
		Элемент.Видимость 											= Не ПустаяСтрока(ЭтотОбъект["Адрес_" + ИдентификаторНабора]);
		
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_АдресНажатие");
		// До изменения
		//ДекорацияРазделитель = Элементы.Добавить(
		//	"Разделитель_" + ИдентификаторНабора,
		//	Тип("ДекорацияФормы"),
		//	ГруппаНаборЗадач);
		//
		//ДекорацияРазделитель.Вид 						= ВидДекорацииФормы.Надпись;
		//ДекорацияРазделитель.Заголовок 					= ПредставлениеНабора;
		//ДекорацияРазделитель.Шрифт 						= Новый Шрифт(,, Истина);
		//ДекорацияРазделитель.Рамка 						= Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху, 2);
		//ДекорацияРазделитель.АвтоМаксимальнаяШирина		= Ложь;
		//ДекорацияРазделитель.РастягиватьПоГоризонтали 	= Истина;
		// -- VOG Солодов В.В. 27.11.2020 CRM-1071
		ДекорацияУдалить = Элементы.Добавить(
			"Картинка_" + ИдентификаторНабора,
			Тип("ДекорацияФормы"),
			ГруппаНаборЗадач);
		
		ДекорацияУдалить.Вид 										= ВидДекорацииФормы.Картинка;
		ДекорацияУдалить.Картинка 									= БиблиотекаКартинок.Корзина;
		ДекорацияУдалить.Ширина 									= 2;
		ДекорацияУдалить.Высота 									= 1;
		ДекорацияУдалить.Гиперссылка 								= Истина;
		ДекорацияУдалить.Подсказка 									= НСтр("ru = 'Удалить набор задач'");
		
		ДекорацияУдалить.УстановитьДействие("Нажатие", "Подключаемый_УдалитьНаборЗадачНажатие");
		
	Иначе
		
		ДобавитьРазделительЧекЛиста(ИдентификаторЭлемента);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ДобавитьПоляПоНастройкеНаСервере(ИмяНастройки, ИдентификаторЭлемента)
	
	СтруктураНастроек = НастройкаЭлементов[ИмяНастройки];
	
	ГруппаЭлементов = СоздатьГруппуЭлементовПоля(
		ИдентификаторЭлемента,
		Элементы[СтруктураНастроек.ИмяГруппы],
		Элементы[СтруктураНастроек.ИмяСледующегоЭлемента]);
	
	ДобавитьРеквизитыПоНастройке(ИдентификаторЭлемента, ИмяНастройки);
	ДобавитьЭлементыПоНастройке(ИдентификаторЭлемента, ГруппаЭлементов, ИмяНастройки);
	
	вогБизнесПроцессыИЗадачиСервер.ДобавитьКомандыПоНастройке(
		ЭтотОбъект,
		ИдентификаторЭлемента,
		ГруппаЭлементов,
		ИмяНастройки,
		Истина);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыПоНастройке(ИдентификаторЭлемента, ИмяНастройки)
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	МассивНастроекРеквизитов = НастройкаЭлементов[ИмяНастройки].Реквизиты;
	
	Для Каждого СтруктураРеквизита Из МассивНастроекРеквизитов Цикл
		ИмяРеквизита = СтрШаблон("%1_%2", СтруктураРеквизита.Имя, ИдентификаторЭлемента);
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, СтруктураРеквизита.Тип,, СтруктураРеквизита.Заголовок));
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыПоНастройке(ИдентификаторЭлемента, ГруппаРодитель, ИмяНастройки, ИндексСтроки = Неопределено)
	
	МассивНастроекЭлементов = НастройкаЭлементов[ИмяНастройки].Элементы;
	
	Для Каждого СтруктураЭлемента Из МассивНастроекЭлементов Цикл
		
		ИмяЭлемента = СтрШаблон("%1_%2", СтруктураЭлемента.Имя, ИдентификаторЭлемента);
		
		Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаРодитель);
		Элемент.Вид 								= ВидПоляФормы[СтруктураЭлемента.Вид];
		Элемент.ПоложениеЗаголовка 					= ПоложениеЗаголовкаЭлементаФормы[СтруктураЭлемента.ПоложениеЗаголовка];
		
		Если СтруктураЭлемента.ПутьКДанным = "ИмяЭлемента" Тогда
			Элемент.ПутьКДанным 					= ИмяЭлемента;
		ИначеЕсли СтруктураЭлемента.ЭтоРеквизитТаблицы 	Тогда
			
			Если ИндексСтроки = Неопределено Тогда
				
				ПозицияСимвола 						= СтрНайти(СтруктураЭлемента.ПутьКДанным, "[");
				ИмяТаблицы 							= Лев(СтруктураЭлемента.ПутьКДанным, ПозицияСимвола - 1);
				Элемент.ПутьКДанным 				= СтрШаблон(СтруктураЭлемента.ПутьКДанным, ЭтотОбъект[ИмяТаблицы].Количество() - 1);
				
			Иначе
				Элемент.ПутьКДанным 				= СтрШаблон(СтруктураЭлемента.ПутьКДанным, ИндексСтроки);
			КонецЕсли;
			
		Иначе
			//
		КонецЕсли;
		
		Если Элемент.Вид = ВидПоляФормы.ПолеПереключателя Тогда
			Элемент.ВидПереключателя 				= ВидПереключателя[СтруктураЭлемента.ВидПереключателя];
		ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			
			Элемент.ПодсказкаВвода 					= СтруктураЭлемента.ПодсказкаВвода;
			Элемент.КнопкаОткрытия 					= СтруктураЭлемента.КнопкаОткрытия;
			Элемент.КнопкаРегулирования 			= СтруктураЭлемента.КнопкаРегулирования;
			Элемент.РежимВыбораИзСписка 			= СтруктураЭлемента.РежимВыбораИзСписка;
			Элемент.КнопкаСоздания 					= Ложь;
			Элемент.ТолькоПросмотр 					= СтруктураЭлемента.ТолькоПросмотр;
			
			Если Не СтруктураЭлемента.АвтоОтметкаНезаполненного = Неопределено Тогда
				Элемент.АвтоОтметкаНезаполненного 	= СтруктураЭлемента.АвтоОтметкаНезаполненного;
			КонецЕсли;
			
			Если Не СтруктураЭлемента.РастягиватьПоГоризонтали = Неопределено Тогда
				Элемент.РастягиватьПоГоризонтали 	= СтруктураЭлемента.РастягиватьПоГоризонтали;
			КонецЕсли;
			
			Если ТипЗнч(СтруктураЭлемента.ПараметрыВыбора) = Тип("Структура")
				И СтруктураЭлемента.ПараметрыВыбора.Количество() > 0 Тогда
				
				МассивПараметров = Новый Массив;
				
				Для Каждого КлючИЗначение Из СтруктураЭлемента.ПараметрыВыбора Цикл
					МассивПараметров.Добавить(Новый ПараметрВыбора(КлючИЗначение.Ключ, КлючИЗначение.Значение));
				КонецЦикла;
				
				НовыеПараметры = Новый ФиксированныйМассив(МассивПараметров);
				Элемент.ПараметрыВыбора = НовыеПараметры;
				
			КонецЕсли;
			
			Элемент.Ширина 							= СтруктураЭлемента.Ширина;
			Элемент.АвтоМаксимальнаяШирина 			= СтруктураЭлемента.АвтоМаксимальнаяШирина;
			
		КонецЕсли;
		
		Если Не СтруктураЭлемента.КартинкаКнопкиВыбора = Неопределено Тогда
			Элемент.КартинкаКнопкиВыбора 			= СтруктураЭлемента.КартинкаКнопкиВыбора;
		КонецЕсли;
		
		Если СтруктураЭлемента.РежимВыбораИзСписка 
			Или Элемент.Вид = ВидПоляФормы.ПолеПереключателя Тогда
			
			Элемент.СписокВыбора.ЗагрузитьЗначения(СтруктураЭлемента.СписокВыбора);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураЭлемента.ДействиеПриИзменении) Тогда
			Элемент.УстановитьДействие("ПриИзменении", СтруктураЭлемента.ДействиеПриИзменении);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураЭлемента.ДействиеНачалоВыбора) Тогда
			Элемент.УстановитьДействие("НачалоВыбора", СтруктураЭлемента.ДействиеНачалоВыбора);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРеквизитыПоНастройке(ИдентификаторЭлемента, ИмяНастройки)
	
	СтруктураНастроек = НастройкаЭлементов[ИмяНастройки];
	
	// Удаление элементов таблицы
	ТаблицаЭлементов = ЭтотОбъект[СтруктураНастроек.ИмяТаблицы];
	
	Для Каждого СтрокаЭлемента Из ТаблицаЭлементов Цикл
		
		// Удаление группы вместе с подчиненными элементами
		ИмяГруппы 		= СтрШаблон("Группа_%1", СтрокаЭлемента.Идентификатор);
		ЭлементГруппа 	= Элементы.Найти(ИмяГруппы);
		
		Если Не ЭлементГруппа = Неопределено Тогда
			Элементы.Удалить(ЭлементГруппа);
		КонецЕсли;
		
		// Удаление команд
		Для Каждого СтруктураКоманды Из СтруктураНастроек.Команды Цикл
			
			ИмяКоманды = СтрШаблон("%1_%2", СтруктураКоманды.Имя, СтрокаЭлемента.Идентификатор);
			
			Команда = Команды.Найти(ИмяКоманды);
			
			Если Не Команда = Неопределено Тогда
				Команды.Удалить(Команда);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Удаление требуемой строки
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идентификатор", ИдентификаторЭлемента);
	
	ТаблицаЭлементов = ЭтотОбъект[СтруктураНастроек.ИмяТаблицы];
	
	НайденныеСтроки = ТаблицаЭлементов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаЭлемента Из НайденныеСтроки Цикл
		ИндексЭлемента = ТаблицаЭлементов.Индекс(СтрокаЭлемента);
		ТаблицаЭлементов.Удалить(ИндексЭлемента);
	КонецЦикла;
	
	// Пересоздание элементов таблицы
	Для Каждого СтрокаЭлемента Из ТаблицаЭлементов Цикл
		
		ИндексСтроки = ТаблицаЭлементов.Индекс(СтрокаЭлемента);
		
		ГруппаЭлементов = СоздатьГруппуЭлементовПоля(
			СтрокаЭлемента.Идентификатор,
			Элементы[СтруктураНастроек.ИмяГруппы],
			Элементы[СтруктураНастроек.ИмяСледующегоЭлемента]);
		
		ДобавитьЭлементыПоНастройке(СтрокаЭлемента.Идентификатор, ГруппаЭлементов, ИмяНастройки, ИндексСтроки);
		
		вогБизнесПроцессыИЗадачиСервер.ДобавитьКомандыПоНастройке(
			ЭтотОбъект,
			ИдентификаторЭлемента,
			ГруппаЭлементов,
			ИмяНастройки,
			Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоответствиеЭлементов()
	
	ОписаниеТипаСтроки 			= ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ОписаниеТипаСтроки100 		= ОбщегоНазначения.ОписаниеТипаСтрока(100);
	ОписаниеТипаСтроки250 		= ОбщегоНазначения.ОписаниеТипаСтрока(250);
	ОписаниеТипаСписок 			= Новый ОписаниеТипов("СписокЗначений");
	ОписаниеТипаЧисло3_2 		= ОбщегоНазначения.ОписаниеТипаЧисло(3, 2, ДопустимыйЗнак.Неотрицательный);
	ОписаниеТипаПользователи 	= вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаПользователи();
	ОписаниеТипаБулево 			= вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаБулево();
	
	#Область Соисполнители
	
	МассивРеквизитов 	= Новый Массив;
	МассивЭлементов 	= Новый Массив;
	МассивКоманд 		= Новый Массив;
	
	// Поле Соисполнитель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента();
	СтруктураЭлемента.Имя 						= "Соисполнитель";
	СтруктураЭлемента.Вид 						= "ПолеВвода";
	СтруктураЭлемента.ПодсказкаВвода 			= НСтр("ru = 'укажите соисполнителя'");
	СтруктураЭлемента.ПутьКДанным 				= "ТаблицаСоисполнители[%1].Соисполнитель";
	СтруктураЭлемента.ЭтоРеквизитТаблицы 		= Истина;
	СтруктураЭлемента.АвтоОтметкаНезаполненного = Ложь;
	СтруктураЭлемента.ДействиеПриИзменении 		= "Подключаемый_ПриИзмененииСотрудника";
	СтруктураЭлемента.ПараметрыВыбора 			= Новый Структура("ПодразделенияФилиала", Истина);
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Команда Удалить соисполнителя
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 		= "УдалитьСоисполнители";
	СтруктураКоманды.Действие 	= "Подключаемый_УдалитьПолеПоНастройке";
	СтруктураКоманды.Картинка 	= БиблиотекаКартинок.CRM_ВиджетЦельНеДостигнута;
	СтруктураКоманды.Подсказка 	= НСтр("ru = 'Удалить'");
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураСоисполнители = Новый Структура;
	СтруктураСоисполнители.Вставить("ИмяТаблицы", 				"ТаблицаСоисполнители");
	СтруктураСоисполнители.Вставить("ИмяГруппы", 				"ГруппаСоисполнители");
	СтруктураСоисполнители.Вставить("ИмяСледующегоЭлемента", 	"СоисполнительДобавить");
	СтруктураСоисполнители.Вставить("Реквизиты", 				МассивРеквизитов);
	СтруктураСоисполнители.Вставить("Элементы", 				МассивЭлементов);
	СтруктураСоисполнители.Вставить("Команды", 					МассивКоманд);
	
	#КонецОбласти
	
	#Область Наблюдатели
	
	МассивРеквизитов 	= Новый Массив;
	МассивЭлементов 	= Новый Массив;
	МассивКоманд 		= Новый Массив;
	
	// Поле Наблюдатель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента();
	СтруктураЭлемента.Имя 						= "Наблюдатель";
	СтруктураЭлемента.Вид 						= "ПолеВвода";
	СтруктураЭлемента.ПодсказкаВвода 			= НСтр("ru = 'укажите наблюдателя'");
	СтруктураЭлемента.ПутьКДанным 				= "ТаблицаНаблюдатели[%1].Наблюдатель";
	СтруктураЭлемента.ЭтоРеквизитТаблицы 		= Истина;
	СтруктураЭлемента.АвтоОтметкаНезаполненного = Ложь;
	СтруктураЭлемента.ДействиеПриИзменении 		= "Подключаемый_ПриИзмененииСотрудника";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Команда Удалить наблюдателя
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 		= "УдалитьНаблюдатели";
	СтруктураКоманды.Действие 	= "Подключаемый_УдалитьПолеПоНастройке";
	СтруктураКоманды.Картинка 	= БиблиотекаКартинок.CRM_ВиджетЦельНеДостигнута;
	СтруктураКоманды.Подсказка 	= НСтр("ru = 'Удалить'");
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураНаблюдателии = Новый Структура;
	СтруктураНаблюдателии.Вставить("ИмяТаблицы", 				"ТаблицаНаблюдатели");
	СтруктураНаблюдателии.Вставить("ИмяГруппы", 				"ГруппаНаблюдатели");
	СтруктураНаблюдателии.Вставить("ИмяСледующегоЭлемента", 	"НаблюдателиДобавить");
	СтруктураНаблюдателии.Вставить("Реквизиты", 				МассивРеквизитов);
	СтруктураНаблюдателии.Вставить("Элементы", 					МассивЭлементов);
	СтруктураНаблюдателии.Вставить("Команды", 					МассивКоманд);
	
	#КонецОбласти
	
	#Область Контролеры
	
	МассивРеквизитов 	= Новый Массив;
	МассивЭлементов 	= Новый Массив;
	МассивКоманд 		= Новый Массив;
	
	// Поле Контролер
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента();
	СтруктураЭлемента.Имя 					= "Контролер";
	СтруктураЭлемента.Вид 					= "ПолеВвода";
	СтруктураЭлемента.ПодсказкаВвода 		= НСтр("ru = 'укажите кто примет результат'");
	СтруктураЭлемента.ПутьКДанным 			= "ТаблицаКонтролеры[%1].Контролер";
	СтруктураЭлемента.ЭтоРеквизитТаблицы 	= Истина;
	СтруктураЭлемента.ДействиеПриИзменении 	= "Подключаемый_ПриИзмененииСотрудника";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Крайний срок
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента();
	СтруктураЭлемента.Имя 					= "ТаблицаКонтролерыСрок";
	СтруктураЭлемента.Вид 					= "ПолеВвода";
	СтруктураЭлемента.ПоложениеЗаголовка 	= "Лево";
	СтруктураЭлемента.ПутьКДанным 			= "ТаблицаКонтролеры[%1].Срок";
	СтруктураЭлемента.ЭтоРеквизитТаблицы 	= Истина;
	СтруктураЭлемента.КартинкаКнопкиВыбора 	= БиблиотекаКартинок.CRM_КалендарьОтображениеМесяц;
	СтруктураЭлемента.ДействиеНачалоВыбора 	= "Подключаемый_НачалоВыбораСрока";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле приоритет
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента();
	СтруктураЭлемента.Имя 						= "Приоритет";
	СтруктураЭлемента.Вид 						= "ПолеВвода";
	СтруктураЭлемента.ПутьКДанным 				= "ТаблицаКонтролеры[%1].Приоритет";
	СтруктураЭлемента.ЭтоРеквизитТаблицы 		= Истина;
	СтруктураЭлемента.ТолькоПросмотр 			= Истина;
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Ложь;
	СтруктураЭлемента.Ширина 					= 2;
	СтруктураЭлемента.АвтоМаксимальнаяШирина 	= Ложь;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Команда повышения приоритета
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 		= "ПовыситьПриоритет";
	СтруктураКоманды.Действие 	= "Подключаемый_ПовыситьПриоритет";
	СтруктураКоманды.Картинка 	= БиблиотекаКартинок.вогСтрелкаВверхЗеленая;
	СтруктураКоманды.Подсказка 	= НСтр("ru = 'Повысить приоритет'");
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	// Команда понижения приоритета
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 		= "ПонизитьПриоритет";
	СтруктураКоманды.Действие 	= "Подключаемый_ПонизитьПриоритет";
	СтруктураКоманды.Картинка 	= БиблиотекаКартинок.CRM_СтрелкаВнизЗеленая;
	СтруктураКоманды.Подсказка 	= НСтр("ru = 'Понизить приоритет'");
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	// Команда удаления контролера
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 		= "УдалитьКонтролеры";
	СтруктураКоманды.Действие 	= "Подключаемый_УдалитьПолеПоНастройке";
	СтруктураКоманды.Картинка 	= БиблиотекаКартинок.CRM_ВиджетЦельНеДостигнута;
	СтруктураКоманды.Подсказка 	= НСтр("ru = 'Удалить'");
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	// заполнение реквизитов при добавлении новой строки
	МассивЗаполнения = Новый Массив;
	
	СтруктураЗаполнения 					= СформироватьСтруктуруЗаполненияРеквизита();
	СтруктураЗаполнения.ИмяРеквизита 		= "Приоритет";
	СтруктураЗаполнения.Обработчик 			= "НоваяСтрока[СтруктураЗаполнения.ИмяРеквизита] = ТаблицаКонтролеры.Количество()";
	
	МассивЗаполнения.Добавить(СтруктураЗаполнения);
	
	СтруктураКонтролеры = Новый Структура;
	СтруктураКонтролеры.Вставить("ИмяТаблицы", 					"ТаблицаКонтролеры");
	СтруктураКонтролеры.Вставить("ИмяГруппы", 					"ГруппаКонтролеры");
	СтруктураКонтролеры.Вставить("ИмяСледующегоЭлемента", 		"КонтролерДобавить");
	СтруктураКонтролеры.Вставить("Реквизиты", 					МассивРеквизитов);
	СтруктураКонтролеры.Вставить("Элементы", 					МассивЭлементов);
	СтруктураКонтролеры.Вставить("Команды", 					МассивКоманд);
	СтруктураКонтролеры.Вставить("ДанныеЗаполнения", 			МассивЗаполнения);
	
	#КонецОбласти
	
	#Область Напоминания
	
	МассивРеквизитов 	= Новый Массив;
	МассивЭлементов 	= Новый Массив;
	МассивКоманд 		= Новый Массив;
	
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента();
	СтруктураЭлемента.Имя 					= "Кому";
	СтруктураЭлемента.Вид 					= "ПолеВвода";
	СтруктураЭлемента.ПодсказкаВвода 		= НСтр("ru = укажите кому будет отправлено напоминание'");
	СтруктураЭлемента.РежимВыбораИзСписка 	= Истина;
	СтруктураЭлемента.ПутьКДанным 			= "ТаблицаНапоминания[%1].Адресат";
	СтруктураЭлемента.ЭтоРеквизитТаблицы 	= Истина;
	СтруктураЭлемента.ДействиеНачалоВыбора 	= "Подключаемый_НачалоВыбораАдресатаНапоминания";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Срок
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента();
	СтруктураЭлемента.Имя 					= "ТаблицаНапоминанияСрок";
	СтруктураЭлемента.Вид 					= "ПолеВвода";
	СтруктураЭлемента.ПоложениеЗаголовка 	= "Лево";
	СтруктураЭлемента.ПутьКДанным 			= "ТаблицаНапоминания[%1].Срок";
	СтруктураЭлемента.ЭтоРеквизитТаблицы 	= Истина;
	СтруктураЭлемента.КартинкаКнопкиВыбора 	= БиблиотекаКартинок.CRM_КалендарьОтображениеМесяц;
	СтруктураЭлемента.ДействиеНачалоВыбора 	= "Подключаемый_НачалоВыбораСрока";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Вид напоминания 1С
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента();
	СтруктураЭлемента.Имя 					= "ВидНапоминания1С";
	СтруктураЭлемента.Вид 					= "ПолеФлажка";
	СтруктураЭлемента.ПоложениеЗаголовка 	= "Право";
	СтруктураЭлемента.ПутьКДанным 			= "ТаблицаНапоминания[%1].ВидНапоминания1С";
	СтруктураЭлемента.ЭтоРеквизитТаблицы 	= Истина;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Вид напоминания эл. почта
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента();
	СтруктураЭлемента.Имя 					= "ВидНапоминанияЭлПочта";
	СтруктураЭлемента.Вид 					= "ПолеФлажка";
	СтруктураЭлемента.ПоложениеЗаголовка 	= "Право";
	СтруктураЭлемента.ПутьКДанным 			= "ТаблицаНапоминания[%1].ВидНапоминанияЭлПочта";
	СтруктураЭлемента.ЭтоРеквизитТаблицы 	= Истина;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Команда удаления напоминания
	СтруктураКоманды 						= вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 					= "УдалитьНапоминания";
	СтруктураКоманды.Действие 				= "Подключаемый_УдалитьПолеПоНастройке";
	СтруктураКоманды.Картинка 				= БиблиотекаКартинок.CRM_ВиджетЦельНеДостигнута;
	СтруктураКоманды.Подсказка 				= НСтр("ru = 'Удалить'");
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	// заполнение реквизитов при добавлении новой строки
	МассивЗаполнения = Новый Массив;
	
	СтруктураЗаполнения 					= СформироватьСтруктуруЗаполненияРеквизита();
	СтруктураЗаполнения.ИмяРеквизита 		= "ВидНапоминания1С";
	СтруктураЗаполнения.ЗначениеЗаполнения 	= Истина;
	
	МассивЗаполнения.Добавить(СтруктураЗаполнения);
	
	СтруктураНапоминания = Новый Структура;
	СтруктураНапоминания.Вставить("ИмяТаблицы", 				"ТаблицаНапоминания");
	СтруктураНапоминания.Вставить("ИмяГруппы", 					"ГруппаНапоминания");
	СтруктураНапоминания.Вставить("ИмяСледующегоЭлемента", 		"НапоминаниеДобавить");
	СтруктураНапоминания.Вставить("Реквизиты", 					МассивРеквизитов);
	СтруктураНапоминания.Вставить("Элементы", 					МассивЭлементов);
	СтруктураНапоминания.Вставить("Команды", 					МассивКоманд);
	СтруктураНапоминания.Вставить("ДанныеЗаполнения", 			МассивЗаполнения);
	
	#КонецОбласти
	
	#Область ЧекЛист
	
	МассивРеквизитов = Новый Массив;
	
	СтруктураРеквизита = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруРеквизита();
	СтруктураРеквизита.Имя = "Пункт";
	СтруктураРеквизита.Тип = ОписаниеТипаСтроки250;
	
	МассивРеквизитов.Добавить(СтруктураРеквизита);
	
	// ++ VOG Солодов В.В. 26.11.2020 
	СтруктураРеквизита = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруРеквизита();
	СтруктураРеквизита.Имя = "Адрес";
	СтруктураРеквизита.Тип = ОписаниеТипаСтроки;
	
	МассивРеквизитов.Добавить(СтруктураРеквизита);
	
	СтруктураРеквизита = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруРеквизита();
	СтруктураРеквизита.Имя = "АдресЗаголовок";
	СтруктураРеквизита.Тип = ОписаниеТипаСтроки;
	
	МассивРеквизитов.Добавить(СтруктураРеквизита);
	// -- VOG Солодов В.В. 26.11.2020 
	
	СтруктураРеквизита = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруРеквизита();
	СтруктураРеквизита.Имя = "Результат";
	СтруктураРеквизита.Тип = ОписаниеТипаСписок;
	
	МассивРеквизитов.Добавить(СтруктураРеквизита);
	
	СтруктураРеквизита = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруРеквизита();
	СтруктураРеквизита.Имя = "Приложения";
	СтруктураРеквизита.Тип = ОписаниеТипаСтроки250;
	
	МассивРеквизитов.Добавить(СтруктураРеквизита);
	
	СтруктураРеквизита = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруРеквизита();
	СтруктураРеквизита.Имя = "Комментарий";
	СтруктураРеквизита.Тип = ОписаниеТипаСтроки;
	
	МассивРеквизитов.Добавить(СтруктураРеквизита);
	
	СтруктураРеквизита = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруРеквизита();
	СтруктураРеквизита.Имя = "Файлы";
	СтруктураРеквизита.Тип = ОписаниеТипаСписок;
	
	МассивРеквизитов.Добавить(СтруктураРеквизита);
	
	СтруктураРеквизита = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруРеквизита();
	СтруктураРеквизита.Имя = "Трудоемкость";
	СтруктураРеквизита.Тип = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Время);
	
	МассивРеквизитов.Добавить(СтруктураРеквизита);
	
	СтруктураРеквизита = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруРеквизита();
	СтруктураРеквизита.Имя = "КомментарийЗаголовок";
	СтруктураРеквизита.Тип = ОписаниеТипаСтроки;
	
	МассивРеквизитов.Добавить(СтруктураРеквизита);
	
	СтруктураРеквизита = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруРеквизита();
	СтруктураРеквизита.Имя = "ПометкаПункта";
	СтруктураРеквизита.Тип = ОписаниеТипаБулево;
	
	МассивРеквизитов.Добавить(СтруктураРеквизита);
	//
	
	МассивКоманд = Новый Массив;
	
	ТекстОбработчикаДоступности =
	"ПараметрыОтбораСтрок = Новый Структура;
	|ПараметрыОтбораСтрок.Вставить(""Идентификатор"", 	ИдентификаторЭлемента);
	|ПараметрыОтбораСтрок.Вставить(""Набор"", 			Справочники.вогНаборыТиповыхЗадач.ПустаяСсылка());
	|ПараметрыОтбораСтрок.Вставить(""ТиповаяЗадача"", 	Справочники.ПунктыЧекЛистовЗадач.ПустаяСсылка());
	|
	|Кнопка.Доступность = Форма[ИмяТаблицы].НайтиСтроки(ПараметрыОтбораСтрок).Количество() > 0;";
	
	ТекстОбработчикаДоступностиУдалить =
	"ПараметрыОтбораСтрок = Новый Структура;
	|ПараметрыОтбораСтрок.Вставить(""Идентификатор"", 	ИдентификаторЭлемента);
	|ПараметрыОтбораСтрок.Вставить(""Набор"", 			Справочники.вогНаборыТиповыхЗадач.ПустаяСсылка());
	|
	|Кнопка.Доступность = Форма[ИмяТаблицы].НайтиСтроки(ПараметрыОтбораСтрок).Количество() > 0;";
	
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 		= "Прикрепить";
	СтруктураКоманды.Действие 	= "Подключаемый_ПрикрепитьПриложениеЧекЛиста";
	СтруктураКоманды.Картинка 	= БиблиотекаКартинок.ПриложитьФайл;
	СтруктураКоманды.Подсказка 	= НСтр("ru = 'Указать результат задачи'");
	СтруктураКоманды.ОбработчикОпределенияДоступности = ТекстОбработчикаДоступности;
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 		= "Редактировать";
	СтруктураКоманды.Действие 	= "Подключаемый_РедактироватьПунктЧекЛиста";
	СтруктураКоманды.Картинка 	= БиблиотекаКартинок.РедактироватьАдресСайта;
	СтруктураКоманды.Подсказка 	= НСтр("ru = 'Редактировать'");
	СтруктураКоманды.ОбработчикОпределенияДоступности = ТекстОбработчикаДоступности;
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 		= "Применить";
	СтруктураКоманды.Действие 	= "Подключаемый_ПрименитьРедактированиеПунктаЧекЛиста";
	СтруктураКоманды.Картинка 	= БиблиотекаКартинок.CRM_ВиджетЦельВыполнена;
	СтруктураКоманды.Подсказка 	= НСтр("ru = 'Применить редактирование'");
	СтруктураКоманды.Видимость 	= Ложь;
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 		= "Удалить";
	СтруктураКоманды.Действие 	= "Подключаемый_УдалитьПунктЧекЛиста";
	СтруктураКоманды.Картинка 	= БиблиотекаКартинок.Корзина;
	СтруктураКоманды.Подсказка 	= НСтр("ru = 'Удалить пункт'");
	СтруктураКоманды.ОбработчикОпределенияДоступности = ТекстОбработчикаДоступностиУдалить;
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 		= "Отменить";
	СтруктураКоманды.Действие 	= "Подключаемый_ОтменитьРедактированиеПунктаЧекЛиста";
	СтруктураКоманды.Картинка 	= БиблиотекаКартинок.Очистить;
	СтруктураКоманды.Подсказка 	= НСтр("ru = 'Отменить редактирование'");
	СтруктураКоманды.Видимость 	= Ложь;
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 		= "РедактироватьКомментарий";
	СтруктураКоманды.Действие 	= "Подключаемый_КомментарийПунктЧекЛиста";
	СтруктураКоманды.Картинка 	= БиблиотекаКартинок.Комментарий;
	СтруктураКоманды.Подсказка 	= НСтр("ru = 'Комментарий'");
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураКоманды = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруКоманды();
	СтруктураКоманды.Имя 		= "ПрикрепитьФайлПункта";
	СтруктураКоманды.Действие 	= "Подключаемый_ПрикрепитьФайлЧекЛиста";
	СтруктураКоманды.Картинка 	= БиблиотекаКартинок.CRM_ВложенияКПисьму18;
	СтруктураКоманды.Подсказка 	= НСтр("ru = 'Прикрепить файл'");
	
	МассивКоманд.Добавить(СтруктураКоманды);
	
	СтруктураЧекЛист = Новый Структура;
	СтруктураЧекЛист.Вставить("ИмяТаблицы", 	"ТаблицаЧекЛист");
	СтруктураЧекЛист.Вставить("ИмяГруппы", 		"ГруппаПунктыЧекЛиста");
	СтруктураЧекЛист.Вставить("Реквизиты", 		МассивРеквизитов);
	СтруктураЧекЛист.Вставить("Команды", 		МассивКоманд);
	
	#КонецОбласти
	
	#Область НаборЗадач
	
	// ++ VOG Солодов В.В. 26.11.2020
	МассивРеквизитов = Новый Массив;
	
	СтруктураРеквизита = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруРеквизита();
	СтруктураРеквизита.Имя = "Адрес";
	СтруктураРеквизита.Тип = ОписаниеТипаСтроки;
	
	МассивРеквизитов.Добавить(СтруктураРеквизита);
	
	СтруктураРеквизита = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруРеквизита();
	СтруктураРеквизита.Имя = "АдресЗаголовок";
	СтруктураРеквизита.Тип = ОписаниеТипаСтроки;
	
	МассивРеквизитов.Добавить(СтруктураРеквизита);
	
	СтруктураРеквизита = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруРеквизита();
	СтруктураРеквизита.Имя = "ПометкаПункта";
	СтруктураРеквизита.Тип = ОписаниеТипаБулево;
	
	МассивРеквизитов.Добавить(СтруктураРеквизита);
	
	СтруктураНаборЗадач = Новый Структура;
	СтруктураНаборЗадач.Вставить("Реквизиты", МассивРеквизитов);
	// -- VOG Солодов В.В. 26.11.2020
	
	#КонецОбласти
	
	СтруктураНастроекЭлементов = Новый Структура;
	СтруктураНастроекЭлементов.Вставить("Соисполнители", 		СтруктураСоисполнители);
	СтруктураНастроекЭлементов.Вставить("Наблюдатели", 			СтруктураНаблюдателии);
	СтруктураНастроекЭлементов.Вставить("Контролеры", 			СтруктураКонтролеры);
	СтруктураНастроекЭлементов.Вставить("Напоминания", 			СтруктураНапоминания);
	СтруктураНастроекЭлементов.Вставить("ЧекЛист", 				СтруктураЧекЛист);
	СтруктураНастроекЭлементов.Вставить("НаборЗадач", 			СтруктураНаборЗадач); //  VOG Солодов В.В. 26.11.2020
	
	НастройкаЭлементов = СтруктураНастроекЭлементов;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруЗаполненияРеквизита()
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("ИмяРеквизита");
	СтруктураЗаполнения.Вставить("ЗначениеЗаполнения");
	СтруктураЗаполнения.Вставить("Обработчик");
	
	Возврат СтруктураЗаполнения;
	
КонецФункции

&НаСервере
Процедура ПереместитьГруппуНаСервере(ИмяГруппы, МинимальныйИндекс)
	
	ЭлементГруппа = Элементы.Найти(ИмяГруппы);
	
	Если Не ЭлементГруппа = Неопределено Тогда
		
		СледующаяГруппа = ЭтотОбъект.ПодчиненныеЭлементы.Получить(МинимальныйИндекс);
		Элементы.Переместить(ЭлементГруппа, ЭтотОбъект, СледующаяГруппа);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Исполнители

&НаКлиенте
Функция ОпределитьЗависимостьНастройкиОтПредметовПроцесса()
	
	ЕстьЗависимость = Ложь;
	
	Если Не КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры = Неопределено Тогда
		ПараметрПредметы = КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы.Найти("Предметы");
		ЕстьЗависимость = (Не ПараметрПредметы = Неопределено);
	КонецЕсли;
	
	Возврат ЕстьЗависимость;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивПредметов()
	
	//ТипыВладельцевМенеджеров = Метаданные.ОпределяемыеТипы.вогВладелецМенеджеров.Тип.Типы();
	
	ТаблицаПредметы = Новый ТаблицаЗначений;
	ТаблицаПредметы.Колонки.Добавить("Предмет");
	ТаблицаПредметы.Колонки.Добавить("ТребуетсяЗаполнениеЧекЛиста");
	ТаблицаПредметы.Колонки.Добавить("ИдентификаторСтроки");
	ТаблицаПредметы.Колонки.Добавить("ИдентификаторРодителя");
	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	ТаблицаПредметы.Колонки.Добавить("Адрес");
	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	
	СтруктураПредметов = Новый Структура;
	СтруктураПредметов.Вставить("вогПредметы", ТаблицаПредметы);
	
	Для Каждого КореньДерева Из ДеревоПредметы.ПолучитьЭлементы() Цикл
		вогБизнесПроцессыИЗадачиСервер.ЗаписатьДеревоПредметовРекурсивно(КореньДерева, СтруктураПредметов);
	КонецЦикла;
	
	Возврат ТаблицаПредметы.ВыгрузитьКолонку("Предмет");
	
КонецФункции

&НаСервере
Процедура ВидИсполнителяНачалоВыбораНаСервере()
	
	Элементы.ВидИсполнителя.СписокВыбора.Очистить();
	ПодготовитьСписокВозможныхИсполнителей(Элементы.ВидИсполнителя.СписокВыбора);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьСписокВозможныхИсполнителей(СписокВозможныхИсполнителей = Неопределено)
	
	Если СписокВозможныхИсполнителей = Неопределено Тогда
		СписокВозможныхИсполнителей = Новый СписокЗначений;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаВозможныхИсполнителей Цикл
		
		Если СтрокаТабличнойЧасти.ИмеетУсловиеОтображения Тогда
			
			СписокПредметов = Новый СписокЗначений;
			СписокПредметов.ЗагрузитьЗначения(ПолучитьМассивПредметов());
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Предметы", СписокПредметов);
			
			Если Не Справочники.вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.ПроверитьУсловияОтображенияНастройки(
				СтрокаТабличнойЧасти.Настройка, СтруктураПараметров) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
			
		СписокВозможныхИсполнителей.Добавить(СтрокаТабличнойЧасти.Настройка, СтрокаТабличнойЧасти.Наименование);
		
	КонецЦикла;
	
	Возврат СписокВозможныхИсполнителей;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек(АдресСхемыКомпоновкиДанных, АдресНастроекКомпоновкиДанных)
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	Если ЭтоАдресВременногоХранилища(АдресНастроекКомпоновкиДанных) Тогда
		НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных);
	Иначе
		НастройкиКомпоновкиДанных = АдресНастроекКомпоновкиДанных;
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЭлементыПредопределенногоОтбора(СтруктураНастройки)
	
	ИдентификаторЭлемента 		= Неопределено;
	ОтборПоОдномуИсполнителю 	= Ложь;
	
	ИнициализироватьКомпоновщикНастроек(
		СтруктураНастройки.АдресСхемыКомпоновкиДанных, СтруктураНастройки.АдресНастроекКомпоновкиДанных);
		
	Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() > 0 Тогда
		
		Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() = 1
			И Не ТипЗнч(КомпоновщикНастроек.Настройки.Отбор.Элементы[0]) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			И КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			
			ОтборПоОдномуИсполнителю = Истина;
			ДобавитьОтборПоОдномуИсполнителю(КомпоновщикНастроек.Настройки.Отбор, СтруктураНастройки.Настройка);
			
		Иначе
			
			ИдентификаторЭлемента = Обработки.вогПодборИсполнителей.ДобавитьЭлементыОтбораРекурсивно(
				ЭтотОбъект,
				КомпоновщикНастроек.Настройки.Отбор,
				СтруктураНастройки.Настройка,
				,
				КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторЭлемента;
	
КонецФункции

&НаСервере
Процедура ДобавитьОтборПоОдномуИсполнителю(ОтборКомпоновкиДанных, Настройка)
	
	ЗаголовокПоля = Неопределено;
	
	ПолеОтбора = ОтборКомпоновкиДанных.Элементы[0];
	
	ЭлементыКорня = ДеревоОтборов.ПолучитьЭлементы();
	НоваяСтрока 			= ЭлементыКорня.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПолеОтбора);
	НоваяСтрока.Настройка 	= Настройка;
	
	Если Не ОтборКомпоновкиДанных.ДоступныеПоляОтбора = Неопределено Тогда
		
		ПолеКомпоновки = ОтборКомпоновкиДанных.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора.ЛевоеЗначение);
		
		Если Не ПолеКомпоновки = Неопределено Тогда
			
			НоваяСтрока.ДоступныеВидыСравнения 	= ПолеКомпоновки.ДоступныеВидыСравнения;
			НоваяСтрока.ОписаниеТипа 			= ПолеКомпоновки.Тип;
			НоваяСтрока.ДоступныеЗначения 		= ПолеКомпоновки.ДоступныеЗначения;
			
			Обработки.вогПодборИсполнителей.ДеревоОтборовВидСравненияПриИзменении(НоваяСтрока);
			
			ЗаголовокПоля = ПолеКомпоновки.Заголовок;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаголовокПоля = Неопределено Тогда
		ЗаголовокПоля = Строка(ПолеОтбора.ЛевоеЗначение);
	КонецЕсли;
	
	Элементы.ДекорацияОтборИсполнителя.Заголовок = ЗаголовокПоля;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруОтборов()
	
	МассивИсполнителей = Новый Массив;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаИсполнители Цикл
		Если СтрокаТабличнойЧасти.Исполнитель = "Общий срок" Тогда
			Продолжить;
		КонецЕсли;
		МассивИсполнителей.Добавить(СтрокаТабличнойЧасти.Исполнитель);
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("МассивИсполнителей", МассивИсполнителей);
	
	ЭлементыКорня = ДеревоОтборов.ПолучитьЭлементы();
	
	СоответствиеОтборов 	= Новый Соответствие;
	
	Если ЭлементыКорня.Количество() > 0 Тогда
		
		Для Каждого СтрокаЭлемента Из ЭлементыКорня Цикл
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Настройка", 		СтрокаЭлемента.Настройка);
			СтруктураДанных.Вставить("Использование", 	СтрокаЭлемента.Использование);
			
			ПодготовитьОтборКомпоновкиДляРедактирования(СтрокаЭлемента.Настройка, СтруктураДанных);
			
			СоответствиеОтборов.Вставить(Новый УникальныйИдентификатор, СтруктураДанных);
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ВидИсполнителя) Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Настройка", 				ВидИсполнителя);
		СтруктураДанных.Вставить("Использование", 			Истина);
		СтруктураДанных.Вставить("ОтборКомпоновкиДанных", 	Новый ОтборКомпоновкиДанных);
		
		СоответствиеОтборов.Вставить(Новый УникальныйИдентификатор, СтруктураДанных);
		
	КонецЕсли;
	
	СтруктураВозврата.Вставить("СоответствиеОтборов", СоответствиеОтборов);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ПодготовитьОтборКомпоновкиДляРедактирования(Настройка, СтруктураДанных)
	
	ЭлементыКорня = ДеревоОтборов.ПолучитьЭлементы();
	
	Если ЭлементыКорня.Количество() > 0 Тогда
		
		ОтборКомпоновкиДанных 	= Новый ОтборКомпоновкиДанных;
		
		ПараметрыЗаполненияОтбора = Новый Структура;
		ПараметрыЗаполненияОтбора.Вставить("Настройка", Настройка);
		
		ЗаполнитьОтборКомпоновкиРекурсивно(ДеревоОтборов, ОтборКомпоновкиДанных, ПараметрыЗаполненияОтбора);
		
		СтруктураДанных.Вставить("ОтборКомпоновкиДанных", ОтборКомпоновкиДанных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборКомпоновкиРекурсивно(Знач ЭлементДерева, ОтборКомпоновкиДанных, ПараметрыЗаполнения)
	
	ТолькоИспользуемые 	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "ТолькоИспользуемые", Ложь);
	Настройка 			= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаполнения, "Настройка");
	
	ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
	
	Для Каждого СтрокаЭлемента Из ЭлементыДерева Цикл
		
		Если Не СтрокаЭлемента.Настройка = Настройка
			Или (ТолькоИспользуемые И Не СтрокаЭлемента.Использование) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаЭлемента.ЭтоГруппа Тогда
			ЭлементОтбора = ОтборКомпоновкиДанных.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ИначеЕсли СтрокаЭлемента.ЭтоНастройка Тогда
			ЭлементОтбора = ОтборКомпоновкиДанных;
		Иначе
			ЭлементОтбора = ОтборКомпоновкиДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементОтбора, СтрокаЭлемента);
		
		Если СтрокаЭлемента.ЭтоГруппа Или СтрокаЭлемента.ЭтоНастройка Тогда
			ЗаполнитьОтборКомпоновкиРекурсивно(СтрокаЭлемента, ЭлементОтбора, ПараметрыЗаполнения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОбщийСрок(Форма)
	
	Срок = Дата(1,1,1);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Исполнитель", "Общий срок");
	
	НайденныеСтроки = Форма.ТаблицаИсполнители.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Срок = НайденнаяСтрока.Срок;
	КонецЦикла;
	
	Возврат Срок;
	
КонецФункции

&НаСервере
Процедура ИсполнительПоОтборуЗавершениеНаСервере(Результат)
	
	МассивНастроек = Новый Массив;
	
	ДеревоОтборов.ПолучитьЭлементы().Очистить();
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеОтборов") Тогда
		
		Для Каждого ЭлементСоответствия Из Результат.СоответствиеОтборов Цикл
			
			СтруктураОтбора = ЭлементСоответствия.Значение;
			МассивНастроек.Добавить(СтруктураОтбора.Настройка);
			
			Если Результат.СоответствиеОтборов.Количество() = 1
				И СтруктураОтбора.ОтборКомпоновкиДанных.Элементы.Количество() = 1
				И Не ТипЗнч(СтруктураОтбора.ОтборКомпоновкиДанных.Элементы[0]) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
				И СтруктураОтбора.ОтборКомпоновкиДанных.Элементы[0].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				
				ОтборПоОдномуИсполнителю = Истина;
				ДобавитьОтборПоОдномуИсполнителю(СтруктураОтбора.ОтборКомпоновкиДанных, СтруктураОтбора.Настройка);
				
			Иначе
				
				ОтборПоОдномуИсполнителю = Ложь;
				Обработки.вогПодборИсполнителей.ДобавитьЭлементыОтбораРекурсивно(
					ЭтотОбъект,
					СтруктураОтбора,
					СтруктураОтбора.Настройка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивНастроек.Количество() = 1 Тогда
		ВидИсполнителя = МассивНастроек[0];
	Иначе
		ВидИсполнителя = Справочники.вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокИсполнителейПоОтборуНаСервере()
	
	ВременнаяТаблицаИсполнители = ТаблицаИсполнители.Выгрузить();
	
	Срок = ПолучитьОбщийСрок(ЭтотОбъект);
	ТаблицаИсполнители.Очистить();
	
	СтрокаОбщийСрок = ТаблицаИсполнители.Добавить();
	СтрокаОбщийСрок.Исполнитель = "Общий срок";
	СтрокаОбщийСрок.Срок 		= Срок;
	
	МассивИсполнителей 	= Новый Массив;
	МассивНастроек 		= Новый Массив;
	ЭлементыДерева 		= ДеревоОтборов.ПолучитьЭлементы();
	
	Для Каждого СтрокаЭлемента Из ЭлементыДерева Цикл
		
		Если Не СтрокаЭлемента.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		МассивНастроек.Добавить(СтрокаЭлемента.Настройка);
		
	КонецЦикла;
	
	Если МассивНастроек.Количество() = 0 И ЗначениеЗаполнено(ВидИсполнителя) Тогда
		МассивНастроек.Добавить(ВидИсполнителя);
	КонецЕсли;
	
	МассивНастроек = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНастроек);
	
	Для Каждого Настройка Из МассивНастроек Цикл
		
		ИмяМакета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка, "СхемаКомпоновкиДанных");
		
		СхемаИНастройки = Справочники.вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(
			Настройка, ИмяМакета);
		
		СхемаКомпоновкиДанных 	= СхемаИНастройки.СхемаКомпоновкиДанных;
		НастройкиСКД 			= СхемаИНастройки.НастройкиКомпоновкиДанных;
		
		АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
		ИнициализироватьКомпоновщикНастроек(АдресСхемыКомпоновкиДанных, НастройкиСКД);
		
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
		НастройкиКомпоновкиДанных = КомпоновщикНастроек.Настройки;
		
		// Параметры
		ДоступныеПараметры = КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы;
		
		УстанавливаемыеПараметры = Новый Соответствие;
		Если Не ДоступныеПараметры.Найти("Предметы") = Неопределено Тогда
			УстанавливаемыеПараметры.Вставить("Предметы", ПолучитьМассивПредметов());
		КонецЕсли;
		Если Не ДоступныеПараметры.Найти("Ссылка") = Неопределено Тогда
			УстанавливаемыеПараметры.Вставить("Ссылка", Объект.Ссылка);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.вогНаправлениеДеятельности)
			И Не ДоступныеПараметры.Найти("НаправлениеДеятельности") = Неопределено Тогда
			УстанавливаемыеПараметры.Вставить("НаправлениеДеятельности", Объект.вогНаправлениеДеятельности);
		КонецЕсли;
		Если Не ДоступныеПараметры.Найти("вогПодчиненныеСотрудники") = Неопределено Тогда
			УстанавливаемыеПараметры.Вставить(
				"вогПодчиненныеСотрудники", вогОбщегоНазначенияПовтИсп.ПолучитьПодчиненныхСотрудников());
		КонецЕсли;
		
		КомпоновкаДанныхКлиентСервер.УстановитьКоллекциюПараметров(КомпоновщикНастроек, УстанавливаемыеПараметры);
		
		ДетальнаяГруппировка = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ДетальнаяГруппировка.Использование = Истина;
		
		ВыбранноеАвтоПоле = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеАвтоПоле.Использование = Истина;
		
		ИмяКолонки = "";
		
		Для Каждого ВыбранноеПоле Из НастройкиКомпоновкиДанных.Выбор.Элементы Цикл
			ИмяКолонки = Строка(ВыбранноеПоле.Поле);
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ИмяКолонки) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементыКорня = ДеревоОтборов.ПолучитьЭлементы();
		
		Если ЭлементыКорня.Количество() > 0 Тогда
			
			ПараметрыЗаполненияОтбора = Новый Структура;
			ПараметрыЗаполненияОтбора.Вставить("Настройка", 			Настройка);
			ПараметрыЗаполненияОтбора.Вставить("ТолькоИспользуемые", 	Истина);
			
			НастройкиКомпоновкиДанных.Отбор.Элементы.Очистить();
			
			ЗаполнитьОтборКомпоновкиРекурсивно(ДеревоОтборов, НастройкиКомпоновкиДанных.Отбор, ПараметрыЗаполненияОтбора);
			
		КонецЕсли;
		
		вогБизнесПроцессыИЗадачиСервер.ДополнитьОтборКомпоновкиНаправлениемДеятельности(
			НастройкиКомпоновкиДанных.Отбор, Объект.вогНаправлениеДеятельности);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
			СхемаКомпоновкиДанных,
			НастройкиКомпоновкиДанных,
			,
			,
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,,Истина);
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИсполнителей, ТаблицаРезультат.ВыгрузитьКолонку(ИмяКолонки));
		
	КонецЦикла;
	
	МассивИсполнителей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИсполнителей);
	
	Для Каждого Исполнитель Из МассивИсполнителей Цикл
		
		НоваяСтрока 			= ТаблицаИсполнители.Добавить();
		НоваяСтрока.Исполнитель = Исполнитель;
		
		// Если таблица исполнителей перезаполняется, тогда восстановим сроки, установленные пользователем
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Исполнитель", Исполнитель);
		
		НайденныеСтроки = ВременнаяТаблицаИсполнители.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока.Срок 	= НайденныеСтроки[0].Срок;
		Иначе
			НоваяСтрока.Срок 	= Срок;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВозможныхИсполнителей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.Ссылка КАК Ссылка,
		|	вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных,
		|	вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
		|	вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных,
		|	вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.ТекстЗапроса КАК СТРОКА(100))) = """"
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИмеетУсловиеОтображения
		|ИЗ
		|	Справочник.вогНастройкиДоступныхПолейОтбораИсполнителейЗадач КАК вогНастройкиДоступныхПолейОтбораИсполнителейЗадач
		|ГДЕ
		|	вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.Порядок";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВидыИсполнителей = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаВидыИсполнителей.Следующий() Цикл
		
		НастройкаСсылка 		= ВыборкаВидыИсполнителей.Ссылка;
		ИмяМакета 				= ВыборкаВидыИсполнителей.СхемаКомпоновкиДанных;
		ИмеетУсловиеОтображения = Ложь;
		
		Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
			
			СхемаКомпоновкиДанных 	= ВыборкаВидыИсполнителей.ХранилищеСхемыКомпоновкиДанных.Получить();
			
		Иначе
			
			Макет = Метаданные.НайтиПоТипу(ТипЗнч(НастройкаСсылка)).Макеты.Найти(ИмяМакета);
			
			Если Макет = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СхемаКомпоновкиДанных 	= Справочники.вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.ПолучитьМакет(ИмяМакета);
			
		КонецЕсли;
		
		НастройкиКомпоновкиДанных 	= ВыборкаВидыИсполнителей.ХранилищеНастроекКомпоновкиДанных.Получить();
		
		СтрокаТабличнойЧасти = ТаблицаВозможныхИсполнителей.Добавить();
		СтрокаТабличнойЧасти.Настройка 						= ВыборкаВидыИсполнителей.Ссылка;
		СтрокаТабличнойЧасти.Наименование 					= ВыборкаВидыИсполнителей.Наименование;
		СтрокаТабличнойЧасти.ИмеетУсловиеОтображения 		= ВыборкаВидыИсполнителей.ИмеетУсловиеОтображения;
		
		СтрокаТабличнойЧасти.АдресСхемыКомпоновкиДанных 	= ПоместитьВоВременноеХранилище(
			СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
		СтрокаТабличнойЧасти.АдресНастроекКомпоновкиДанных 	= ПоместитьВоВременноеХранилище(
			НастройкиКомпоновкиДанных, Новый УникальныйИдентификатор);
			
		Элементы.ВидИсполнителя.СписокВыбора.Добавить(СтрокаТабличнойЧасти.Настройка, СтрокаТабличнойЧасти.Наименование);
		
	КонецЦикла;
	
	Если ЭтоНовый Или ТаблицаИсполнители.Количество() = 0 Тогда
		
		ВидИсполнителя = Справочники.вогНастройкиДоступныхПолейОтбораИсполнителейЗадач.Автору;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокИсполнителей()
	
	НоваяСтрока = ТаблицаИсполнители.Добавить();
	НоваяСтрока.Исполнитель = НСтр("ru = 'Общий срок'");
	НоваяСтрока.Срок 		= Объект.вогОбщийСрок;
				
	Если Не ЭтоНовый Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогСписокИсполнителейПоручения.Исполнитель КАК Исполнитель,
		|	вогСписокИсполнителейПоручения.СрокИсполнения КАК СрокИсполнения,
		|	вогСписокИсполнителейПоручения.Контролер КАК Контролер,
		|	вогСписокИсполнителейПоручения.Соисполнитель КАК Соисполнитель,
		|	вогСписокИсполнителейПоручения.Наблюдатель КАК Наблюдатель,
		|	вогСписокИсполнителейПоручения.Приоритет КАК Приоритет
		|ИЗ
		|	РегистрСведений.вогСписокИсполнителейПоручения КАК вогСписокИсполнителейПоручения
		|ГДЕ
		|	вогСписокИсполнителейПоручения.БизнесПроцесс = &БизнесПроцесс
		|
		|УПОРЯДОЧИТЬ ПО
		|	вогСписокИсполнителейПоручения.Приоритет";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.Ссылка);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ВыборкаИсполнители = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаИсполнители.Следующий() Цикл
			
			ИдентификаторЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор();
			
			Если ВыборкаИсполнители.Контролер Тогда
				
				НоваяСтрока 				= ТаблицаКонтролеры.Добавить();
				НоваяСтрока.Контролер 		= ВыборкаИсполнители.Исполнитель;
				НоваяСтрока.Срок 			= ВыборкаИсполнители.СрокИсполнения;
				НоваяСтрока.Приоритет 		= ВыборкаИсполнители.Приоритет;
				НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
				
				ДобавитьПоляПоНастройкеНаСервере("Контролеры", ИдентификаторЭлемента);
				
			ИначеЕсли ВыборкаИсполнители.Соисполнитель Тогда
				
				НоваяСтрока 				= ТаблицаСоисполнители.Добавить();
				НоваяСтрока.Соисполнитель 	= ВыборкаИсполнители.Исполнитель;
				НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
				
				ДобавитьПоляПоНастройкеНаСервере("Соисполнители", ИдентификаторЭлемента);
				
			ИначеЕсли ВыборкаИсполнители.Наблюдатель Тогда
				
				НоваяСтрока 				= ТаблицаНаблюдатели.Добавить();
				НоваяСтрока.Наблюдатель 	= ВыборкаИсполнители.Исполнитель;
				НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
				
				ДобавитьПоляПоНастройкеНаСервере("Наблюдатели", ИдентификаторЭлемента);
				
			Иначе
				
				НоваяСтрока 			= ТаблицаИсполнители.Добавить();
				НоваяСтрока.Исполнитель = ВыборкаИсполнители.Исполнитель;
				НоваяСтрока.Срок 		= ВыборкаИсполнители.СрокИсполнения;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЭтоНовый Или ТаблицаИсполнители.Количество() = 0 Тогда
		
		НоваяСтрока 				= ТаблицаИсполнители.Добавить();
		НоваяСтрока.Исполнитель 	= ТекущийПользователь;
		
	КонецЕсли;
	
	Если ЭтоНовый Или ТаблицаСоисполнители.Количество() = 0 Тогда
		
		ИдентификаторЭлемента 		= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор();
		
		НоваяСтрока 				= ТаблицаСоисполнители.Добавить();
		НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
		
		ДобавитьПоляПоНастройкеНаСервере("Соисполнители", ИдентификаторЭлемента);
		
	КонецЕсли;
	
	Если ЭтоНовый Или ТаблицаНаблюдатели.Количество() = 0 Тогда
		
		ИдентификаторЭлемента 		= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор();
		
		НоваяСтрока 				= ТаблицаНаблюдатели.Добавить();
		НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
		
		ДобавитьПоляПоНастройкеНаСервере("Наблюдатели", ИдентификаторЭлемента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСрока(ИндексСтроки, СтандартнаяОбработка, ИмяТаблицы)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаОтсчета", 		ТекущаяДата());
	ПараметрыФормы.Вставить("СрокИсполнения", 	ЭтотОбъект[ИмяТаблицы][ИндексСтроки].Срок);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИмяТаблицы", 		ИмяТаблицы);
	ПараметрыОповещения.Вставить("ИндексСтроки", 	ИндексСтроки);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыборСрокаЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму(
		"ОбщаяФорма.ВыборСрокаИсполнения",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСрокаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы 		= ДополнительныеПараметры.ИмяТаблицы;
	ИндексСтроки 	= ДополнительныеПараметры.ИндексСтроки;
	
	ЭтотОбъект[ИмяТаблицы][ИндексСтроки].Срок = Результат;
	
	Если ИмяТаблицы = "ТаблицаИсполнители"
		И ИндексСтроки = 0 Тогда
		ТаблицаИсполнителиСрокПриИзменении(Неопределено);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Файлы

&НаСервере
Процедура ЗаполнитьТаблицуФайлов(НастроитьЗаголовки = Ложь, ФайлРедактировался = Ложь, МассивФайлов = Неопределено)
	
	Если МассивФайлов = Неопределено Тогда
		МассивФайлов = Новый Массив;
		РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.Ссылка, МассивФайлов);
	КонецЕсли;
	
	Для Каждого ЭлементФайл Из МассивФайлов Цикл
		
		СтруктураРеквизитовФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЭлементФайл,
			"ЭтоГруппа, ПометкаУдаления, Родитель, Наименование, Расширение",
			Истина);
		
		Если СтруктураРеквизитовФайла.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьФайл 	= Истина;
		УдалитьФайл 	= Ложь;
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("ДанныеФайла", ЭлементФайл);
		
		НайденныеСтроки = ТаблицаПрисоединенныеФайлы.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Если СтруктураРеквизитовФайла.ПометкаУдаления Тогда
				
				ДобавитьФайл 	= Ложь;
				УдалитьФайл 	= Истина;
				
			Иначе
				
				ДобавитьФайл 	= Ложь;
				УдалитьФайл 	= Ложь;
				
			КонецЕсли;
			
		ИначеЕсли СтруктураРеквизитовФайла.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаФайла 			= СтруктураРеквизитовФайла.Родитель;
		ИдентификаторЭлемента 	= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(XMLСтрока(ГруппаФайла));
		
		Если ДобавитьФайл Тогда
			
			ПредставлениеФайла = СтрШаблон("%1.%2", СтруктураРеквизитовФайла.Наименование, СтруктураРеквизитовФайла.Расширение);
			
			НоваяСтрока = ТаблицаПрисоединенныеФайлы.Добавить();
			НоваяСтрока.ДанныеФайла 	= ЭлементФайл;
			НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
			НоваяСтрока.Представление 	= ПредставлениеФайла;
			НоваяСтрока.Расширение 		= СтрЗаменить(СтруктураРеквизитовФайла.Расширение, ".", "");
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "Файлы_" + ИдентификаторЭлемента) Тогда
				ЭтотОбъект["Файлы_" + ИдентификаторЭлемента].Добавить(ЭлементФайл, НоваяСтрока.Представление);
			КонецЕсли;
			
		ИначеЕсли УдалитьФайл Тогда
			
			ИндексСтроки = ТаблицаПрисоединенныеФайлы.Индекс(НайденныеСтроки[0]);
			ТаблицаПрисоединенныеФайлы.Удалить(ИндексСтроки);
			
			СтрокаСписка = ЭтотОбъект["Файлы_" + ИдентификаторЭлемента].НайтиПоЗначению(ЭлементФайл);
			Если Не СтрокаСписка = Неопределено Тогда
				ЭтотОбъект["Файлы_" + ИдентификаторЭлемента].Удалить(СтрокаСписка);
			КонецЕсли;
			
		ИначеЕсли ФайлРедактировался Тогда
			
			НайденныеСтроки[0].ДанныеФайла = ЭлементФайл;
			СтрокаСписка = ЭтотОбъект["Файлы_" + ИдентификаторЭлемента].НайтиПоЗначению(ЭлементФайл);
			Если Не СтрокаСписка = Неопределено Тогда
				СтрокаСписка.Значение = ЭлементФайл;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьВысотуТаблицы("Файлы_" + ИдентификаторЭлемента);
		
	КонецЦикла;
	
	Если НастроитьЗаголовки Тогда
		НастроитьЗаголовкиЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПрисоединенныхФайлов(ДополнительныеПараметры = Неопределено)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информции возможен только после записи элемента.
		|Записать элемент?'");
		
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
			"ОткрытьФормуПрисоединенныхФайловВопросЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	вогБизнесПроцессыИЗадачиКлиент.ОткрытьФормуПрисоединенныхФайловЗавершение(
		ЭтотОбъект,
		Объект.Ссылка,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПрисоединенныхФайловВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	вогБизнесПроцессыИЗадачиКлиент.ОткрытьФормуПрисоединенныхФайловЗавершение(
		ЭтотОбъект,
		Объект.Ссылка,
		ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьТаблицыЗадач()
	
	// ++ VOG Солодов В.В. 28.10.2020 CRM-1001
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогЗадачиПоручений.Идентификатор КАК Идентификатор,
	|	вогЗадачиПоручений.Предмет КАК Предмет,
	|	вогЗадачиПоручений.Порядок КАК НомерСтроки,
	|	вогЗадачиПоручений.Пункт КАК Пункт,
	|	вогЗадачиПоручений.Трудоемкость КАК Трудоемкость,
	|	вогЗадачиПоручений.НаборЗадач КАК НаборЗадач,
	|	вогЗадачиПоручений.ТиповаяЗадача КАК ТиповаяЗадача,
	|	ЕСТЬNULL(вогНаборыТиповыхЗадач.ПлановоеВремя, ДАТАВРЕМЯ(1, 1, 1)) КАК ТрудоемкостьНабора,
	|	вогЗадачиПоручений.ТиповаяЗадача.ПринадлежностьОбъекту КАК ПринадлежностьОбъекту,
	|	вогЗадачиПоручений.Результат КАК Результат,
	|	вогЗадачиПоручений.Комментарий КАК Комментарий,
	// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
	|	вогЗадачиПоручений.Адрес КАК Адрес,
	|	вогЗадачиПоручений.Город КАК Город
	// -- VOG Солодов В.В. 30.11.2020 CRM-1071
	|ИЗ
	|	РегистрСведений.вогЗадачиПоручений КАК вогЗадачиПоручений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНаборыТиповыхЗадач КАК вогНаборыТиповыхЗадач
	|		ПО вогЗадачиПоручений.НаборЗадач = вогНаборыТиповыхЗадач.Ссылка
	|ГДЕ
	|	вогЗадачиПоручений.Объект = &БизнесПроцесс
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(НомерСтроки),
	|	МАКСИМУМ(Пункт),
	|	МАКСИМУМ(Трудоемкость),
	|	МАКСИМУМ(НаборЗадач),
	|	МАКСИМУМ(ТиповаяЗадача),
	|	МАКСИМУМ(ТрудоемкостьНабора),
	|	МАКСИМУМ(ПринадлежностьОбъекту)
	|ПО
	|	Идентификатор";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СоответствиеЗадачПредметам = Новый Соответствие;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИдентификаторы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		МассивИменТаблиц = Новый Массив;
		МассивИменТаблиц.Добавить("Результат_%1");
		МассивИменТаблиц.Добавить("Файлы_%1");
		
		Пока ВыборкаИдентификаторы.Следующий() Цикл
			
			ИдентификаторЭлемента 		= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(
				Строка(ВыборкаИдентификаторы.Идентификатор));
			
			НоваяСтрока 						= ТаблицаЧекЛист.Добавить();
			НоваяСтрока.НомерСтроки 			= ВыборкаИдентификаторы.НомерСтроки;
			НоваяСтрока.Пункт 					= ВыборкаИдентификаторы.Пункт;
			НоваяСтрока.Идентификатор 			= ИдентификаторЭлемента;
			НоваяСтрока.Трудоемкость 			= ВыборкаИдентификаторы.Трудоемкость;
			НоваяСтрока.Набор 					= ВыборкаИдентификаторы.НаборЗадач;
			НоваяСтрока.ТрудоемкостьНабора 		= ВыборкаИдентификаторы.ТрудоемкостьНабора;
			НоваяСтрока.ТиповаяЗадача 			= ВыборкаИдентификаторы.ТиповаяЗадача;
			НоваяСтрока.ПринадлежностьОбъекту 	= ВыборкаИдентификаторы.ПринадлежностьОбъекту;
			
			Если Не ЗначениеЗаполнено(ВыборкаИдентификаторы.НаборЗадач) Тогда
				ИдентификаторНабора 			= "";
				ИдентификаторПунктаПредмета 	= ИдентификаторЭлемента;
			Иначе
				ИдентификаторНабора = вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(
					XMLСтрока(ВыборкаИдентификаторы.НаборЗадач));
				ИдентификаторПунктаПредмета 	= ИдентификаторНабора;
			КонецЕсли;
			
			НоваяСтрока.ИдентификаторНабора = ИдентификаторНабора;
			
			//
			Комментарий = "";
			Приложения 	= Неопределено;
			
			ВыборкаДетальныеЗаписи = ВыборкаИдентификаторы.Выбрать();
			
			МассивПредметов = Новый Массив;
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Комментарий = ВыборкаДетальныеЗаписи.Комментарий.Получить();
				Приложения 	= ВыборкаДетальныеЗаписи.Результат.Получить();
				
				МассивПредметов.Добавить(ВыборкаДетальныеЗаписи.Предмет);
				
				// ++ VOG Солодов В.В. 30.11.2020 CRM-1071
				Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Город)
					Или Не ПустаяСтрока(ВыборкаДетальныеЗаписи.Адрес) Тогда
					
					НоваяСтрокаАдрес = ТаблицаАдресов.Добавить();
					НоваяСтрокаАдрес.Предмет 		= ВыборкаДетальныеЗаписи.Предмет;
					НоваяСтрокаАдрес.Адрес 			= ВыборкаДетальныеЗаписи.Адрес;
					НоваяСтрокаАдрес.Город 			= ВыборкаДетальныеЗаписи.Город;
					
					Если ЗначениеЗаполнено(ВыборкаИдентификаторы.НаборЗадач) Тогда
						НоваяСтрокаАдрес.Идентификатор 	= ИдентификаторНабора;
					Иначе
						НоваяСтрокаАдрес.Идентификатор 	= ИдентификаторЭлемента;
					КонецЕсли;
					
				КонецЕсли;
				// -- VOG Солодов В.В. 30.11.2020 CRM-1071
				
			КонецЦикла;
			
			СоответствиеЗадачПредметам.Вставить(ИдентификаторПунктаПредмета, МассивПредметов);
			
			НоваяСтрока.Комментарий 			= Комментарий;
			НоваяСтрока.Приложения 				= ПоместитьВоВременноеХранилище(Приложения, Новый УникальныйИдентификатор);
			НоваяСтрока.Результат 				= СформироватьПредставлениеРезультата(Приложения);
			
			// ++ VOG Солодов В.В. 02.12.2020
			// Рефакторинг
			СоздатьЭлементыЧекЛиста(НоваяСтрока, Ложь);
			// -- VOG Солодов В.В. 02.12.2020
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаЧекЛист Цикл
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Набор) Тогда
			ИдентификаторПунктаПредмета 	= СтрокаТабличнойЧасти.ИдентификаторНабора;
		Иначе
			ИдентификаторПунктаПредмета 	= СтрокаТабличнойЧасти.Идентификатор;
		КонецЕсли;
		
		МассивПредметов = СоответствиеЗадачПредметам.Получить(ИдентификаторПунктаПредмета);
		ЭлементыКорня 	= ДеревоПредметы.ПолучитьЭлементы();
		
		Для Каждого ЭлементКорня Из ЭлементыКорня Цикл
			ДобавитьПунктыПредметовРекурсивно(ЭлементКорня, ИдентификаторПунктаПредмета, МассивПредметов);
		КонецЦикла;
		
	КонецЦикла;
	// До изменения
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	вогЗадачиПоручений.Идентификатор КАК Идентификатор,
	//|	вогЗадачиПоручений.Порядок КАК НомерСтроки,
	//|	вогЗадачиПоручений.Пункт КАК Пункт,
	//|	вогЗадачиПоручений.Результат КАК Результат,
	//|	вогЗадачиПоручений.Комментарий КАК Комментарий,
	//|	вогЗадачиПоручений.Трудоемкость КАК Трудоемкость,
	//|	вогЗадачиПоручений.НаборЗадач КАК НаборЗадач,
	//|	вогЗадачиПоручений.ТиповаяЗадача КАК ТиповаяЗадача,
	//|	ЕСТЬNULL(вогНаборыТиповыхЗадач.ПлановоеВремя, ДАТАВРЕМЯ(1, 1, 1)) КАК ТрудоемкостьНабора,
	//|	вогЗадачиПоручений.ТиповаяЗадача.ПринадлежностьОбъекту КАК ПринадлежностьОбъекту
	//|ИЗ
	//|	РегистрСведений.вогЗадачиПоручений КАК вогЗадачиПоручений
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.вогНаборыТиповыхЗадач КАК вогНаборыТиповыхЗадач
	//|		ПО вогЗадачиПоручений.НаборЗадач = вогНаборыТиповыхЗадач.Ссылка
	//|ГДЕ
	//|	вогЗадачиПоручений.Объект = &БизнесПроцесс
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	НомерСтроки";
	//
	//Запрос.УстановитьПараметр("БизнесПроцесс", Объект.Ссылка);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если Не РезультатЗапроса.Пустой() Тогда
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	
	//	МассивИменТаблиц = Новый Массив;
	//	МассивИменТаблиц.Добавить("Результат_%1");
	//	МассивИменТаблиц.Добавить("Файлы_%1");
	//	
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		
	//		ИдентификаторЭлемента 		= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(
	//			Строка(ВыборкаДетальныеЗаписи.Идентификатор));
	//		
	//		НоваяСтрока 						= ТаблицаЧекЛист.Добавить();
	//		НоваяСтрока.НомерСтроки 			= ВыборкаДетальныеЗаписи.НомерСтроки;
	//		НоваяСтрока.Пункт 					= ВыборкаДетальныеЗаписи.Пункт;
	//		НоваяСтрока.Идентификатор 			= ИдентификаторЭлемента;
	//		НоваяСтрока.Комментарий 			= ВыборкаДетальныеЗаписи.Комментарий.Получить();
	//		НоваяСтрока.Трудоемкость 			= ВыборкаДетальныеЗаписи.Трудоемкость;
	//		НоваяСтрока.Набор 					= ВыборкаДетальныеЗаписи.НаборЗадач;
	//		НоваяСтрока.ТрудоемкостьНабора 		= ВыборкаДетальныеЗаписи.ТрудоемкостьНабора;
	//		НоваяСтрока.ТиповаяЗадача 			= ВыборкаДетальныеЗаписи.ТиповаяЗадача;
	//		НоваяСтрока.ПринадлежностьОбъекту 	= ВыборкаДетальныеЗаписи.ПринадлежностьОбъекту;
	//		
	//		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НаборЗадач) Тогда
	//			ИдентификаторНабора = "";
	//		Иначе
	//			ИдентификаторНабора = вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(
	//				XMLСтрока(ВыборкаДетальныеЗаписи.НаборЗадач));
	//		КонецЕсли;
	//		
	//		НоваяСтрока.ИдентификаторНабора = ИдентификаторНабора;
	//		
	//		Приложения 						= ВыборкаДетальныеЗаписи.Результат.Получить();
	//		НоваяСтрока.Приложения 			= ПоместитьВоВременноеХранилище(Приложения, Новый УникальныйИдентификатор);
	//		НоваяСтрока.Результат 			= СформироватьПредставлениеРезультата(Приложения);
	//		
	//		Если ЗначениеЗаполнено(НоваяСтрока.Набор) Тогда
	//			ДобавитьЭлементыНабораЗадач(ИдентификаторНабора, ИдентификаторЭлемента, НоваяСтрока.Набор);
	//		Иначе
	//			
	//			ТолщинаРамки = 1;
	//			
	//			Если ТаблицаЧекЛист.Количество() > 1 Тогда
	//				
	//				ПоследнийПункт = ТаблицаЧекЛист[ТаблицаЧекЛист.Количество() - 2];
	//				
	//				Если ЗначениеЗаполнено(ПоследнийПункт.Набор) Тогда
	//					ТолщинаРамки = 2;
	//				КонецЕсли;
	//				
	//			КонецЕсли;
	//			
	//			ДобавитьРазделительЧекЛиста(ИдентификаторЭлемента, ТолщинаРамки);
	//			
	//		КонецЕсли;
	//		
	//		ГруппаЭлементов = СоздатьГруппуЭлементовПоля(ИдентификаторЭлемента, Элементы.ГруппаПунктыЧекЛиста);
	//		// ++ VOG Солодов В.В. 28.10.2020 CRM-1001
	//		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НаборЗадач) Тогда
	//			
	//			ДобавитьФлажокЧекЛиста(ИдентификаторЭлемента, ГруппаЭлементов);
	//			
	//			Для Каждого ЭлементКорня Из ДеревоПредметы.ПолучитьЭлементы() Цикл
	//				
	//				ЭлементыДерева = ЭлементКорня.ПолучитьЭлементы();
	//				
	//				Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
	//					ЗаполнитьПунктыПредметовРекурсивно(ЭлементДерева, ИдентификаторЭлемента, Истина);
	//				КонецЦикла;
	//				
	//			КонецЦикла;
	//			
	//		КонецЕсли;
	//		// -- VOG Солодов В.В. 28.10.2020 CRM-1001
	//		ДобавитьРеквизитыПоНастройке(ИдентификаторЭлемента, "ЧекЛист");
	//		ЗаполнитьРеквизитыЧекЛиста(ЭтотОбъект, НоваяСтрока);
	//		ДобавитьЭлементыЧекЛиста(ИдентификаторЭлемента, ГруппаЭлементов, НоваяСтрока.Набор);
	//		
	//		вогБизнесПроцессыИЗадачиСервер.ДобавитьКомандыПоНастройке(
	//			ЭтотОбъект,
	//			ИдентификаторЭлемента,
	//			ГруппаЭлементов,
	//			"ЧекЛист",
	//			Истина);
	//		
	//		// Установка высоты таблицы
	//		Для Каждого ИмяТаблицы Из МассивИменТаблиц Цикл
	//			
	//			ИмяЭлемента = СтрШаблон(ИмяТаблицы, ИдентификаторЭлемента);
	//			УстановитьВысотуТаблицы(ИмяЭлемента);
	//			
	//		КонецЦикла;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	// -- VOG Солодов В.В. 28.10.2020 CRM-1001
	
КонецПроцедуры

&НаСервере
Процедура НачальноеЗаполнениеДанных()
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаЧекЛистРедактирование",
		"Видимость",
		ТаблицаЧекЛист.Количество() = 0);
	
	РазрешитьРедактирование = (ЭтоНовый Или ТекущийПользователь = Объект.Автор);
	
	// Исполнители
	ЗаполнитьСписокИсполнителей();
	
	// Виды исполнителей
	ЗаполнитьСписокВозможныхИсполнителей();
	
	КонтролироватьВыполнение = ТаблицаКонтролеры.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаДекорацияКонтролеры",
		"Видимость",
		КонтролироватьВыполнение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КонтролерДобавить",
		"Видимость",
		Не ТаблицаКонтролеры.Количество() >= 3);
		
	УстановитьДоступностьКомандИзмененияПриоритета();
	
	// Постановщик
	Если ЭтоНовый Или Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = ТекущийПользователь;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЧекЛистПриложитьЗавершениеНаСервере(АдресТаблицы, ИдентификаторЭлемента = "")
	
	ТаблицаПриложений = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Результат = СформироватьПредставлениеРезультата(ТаблицаПриложений);
	
	Если ЗначениеЗаполнено(ИдентификаторЭлемента) Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Идентификатор", ИдентификаторЭлемента);
		
		НайденныеСтроки = ТаблицаЧекЛист.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			
			СтрокаТабличнойЧасти.Приложения 	= АдресТаблицы;
			СтрокаТабличнойЧасти.Результат 		= Результат;
			
			ЗаполнитьРеквизитыЧекЛиста(ЭтотОбъект, СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
	Иначе
		
		ЧекЛистПриложения 	= АдресТаблицы;
		ЧекЛистРезультат 	= Результат;
		
	КонецЕсли;
	
	УстановитьВысотуТаблицы("Результат_" + ИдентификаторЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПредметыЧекЛист(ОчищатьПредметы)
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаЧекЛист Цикл
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторНабора) Тогда
			
			ПараметрыНабора = Новый Структура;
			ПараметрыНабора.Вставить("Идентификатор", 	СтрокаТабличнойЧасти.ИдентификаторНабора);
			ПараметрыНабора.Вставить("НаборЗадач", 		СтрокаТабличнойЧасти.Набор);
			
			УдалитьНаборЗадач(ПараметрыНабора);
			
		Иначе
			УдалитьРеквизитыЧекЛиста(СтрокаТабличнойЧасти.Идентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОчищатьПредметы Тогда
		
		ЭлементыКорня = ДеревоПредметы.ПолучитьЭлементы();
		
		Для Каждого ЭлементДерева Из ЭлементыКорня Цикл
			
			ПредметыЭлемента = ЭлементДерева.ПолучитьЭлементы();
			
			МассивУдаления = Новый Массив;
			
			Для Каждого ПредметЭлемента Из ПредметыЭлемента Цикл
				МассивУдаления.Добавить(ПредметЭлемента);
			КонецЦикла;
			
			Для Каждого СтрокаДерева Из МассивУдаления Цикл
				
				ИндексЭлемента = ПредметыЭлемента.Индекс(СтрокаДерева);
				ПредметыЭлемента.Удалить(ИндексЭлемента);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСтрокиПредметовПоИдентификаторуРекурсивно(ДеревоЗначений, ИдентификаторЭлемента, МассивСтрок)
	
	ЭлементыДерева 	= ДеревоЗначений.ПолучитьЭлементы();
	
 	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		СтрокаСписка = ЭлементДерева.Пункты.НайтиПоЗначению(ИдентификаторЭлемента);
		
		Если Не СтрокаСписка = Неопределено
			И СтрокаСписка.Пометка Тогда
			
			МассивСтрок.Добавить(ЭлементДерева);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		НайтиСтрокиПредметовПоИдентификаторуРекурсивно(ЭлементДерева, ИдентификаторЭлемента, МассивСтрок);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьПредставлениеРезультата(Знач Приложения)
	
	Результат = "";
	
	Если Приложения = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого СтрокаПриложение Из Приложения Цикл
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = Результат + ";";
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПриложение.Приложение) = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
			ПредставлениеПриложения = СтрокаПриложение.Приложение;
		Иначе
			ПредставлениеПриложения = СтрокаПриложение.ТипПриложения;
		КонецЕсли;
		
		Результат = Результат + ПредставлениеПриложения;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ШаблонРезультата 	= НСтр("ru = '%1'");
		Результат 			= СтрШаблон(ШаблонРезультата, Результат);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура КонтролироватьВыполнениеПриИзмененииНаСервере()
	
	МассивИдентификаторов = Новый Массив;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаКонтролеры Цикл
		МассивИдентификаторов.Добавить(СтрокаТабличнойЧасти.Идентификатор);
	КонецЦикла;
	
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		УдалитьРеквизитыПоНастройке(Идентификатор, "Контролеры");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПриоритетКонтролеров(ИдентификаторЭлемента, ЗначениеИзменения)
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Идентификатор", ИдентификаторЭлемента);
	
	НайденныеСтроки = ТаблицаКонтролеры.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		
		ИндексСтроки 						= ТаблицаКонтролеры.Индекс(СтрокаТабличнойЧасти);
		СледующаяСтрока 					= ТаблицаКонтролеры.Получить(ИндексСтроки + ЗначениеИзменения);
		
		ТекущийПриоритет 					= СледующаяСтрока.Приоритет;
		ТекущийИдентификатор 				= СледующаяСтрока.Идентификатор;
		ТекущийСрок 						= СледующаяСтрока.Срок;
		
		СледующаяСтрока.Приоритет 			= СтрокаТабличнойЧасти.Приоритет;
		СледующаяСтрока.Идентификатор 		= СтрокаТабличнойЧасти.Идентификатор;
		СледующаяСтрока.Срок 				= СтрокаТабличнойЧасти.Срок;
		
		СтрокаТабличнойЧасти.Приоритет 		= ТекущийПриоритет;
		СтрокаТабличнойЧасти.Идентификатор 	= ТекущийИдентификатор;
		СтрокаТабличнойЧасти.Срок 			= ТекущийСрок;
		
		ТаблицаКонтролеры.Сдвинуть(ИндексСтроки, ЗначениеИзменения);
		
	КонецЦикла;
	
	УстановитьДоступностьКомандИзмененияПриоритета();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуТаблицыПоИмениКоманды(ИмяКоманды)
	
	ИмяНастройки 			= СтрЗаменить(ИмяКоманды, "Добавить", "");
	
	Если Не НастройкаЭлементов.Свойство(ИмяНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек 		= НастройкаЭлементов[ИмяНастройки];
	ИмяТаблицы 				= СтруктураНастроек.ИмяТаблицы;
	
	ИдентификаторЭлемента 	= вогБизнесПроцессыИЗадачиКлиент.СформироватьУникальныйИдентификатор();
	
	ДанныеЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		СтруктураНастроек,
		"ДанныеЗаполнения",
		Новый Массив);
	
	НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
	НоваяСтрока.Идентификатор = ИдентификаторЭлемента;
	
	Для Каждого СтруктураЗаполнения Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(СтруктураЗаполнения.Обработчик) Тогда
			
			Попытка
				Выполнить(СтруктураЗаполнения.Обработчик);
			Исключение
				
			КонецПопытки;
			
		Иначе
			НоваяСтрока[СтруктураЗаполнения.ИмяРеквизита] = СтруктураЗаполнения.ЗначениеЗаполнения;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьПоляПоНастройкеНаСервере(ИмяНастройки, ИдентификаторЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНапоминания(ТекущийОбъект)
	
	//НаборЗаписей = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Предмет.Установить(ТекущийОбъект.Ссылка);
	//НаборЗаписей.Прочитать();
	//НаборЗаписей.Очистить();
	//НаборЗаписей.Записать();
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ТаблицаНапоминания.Адресат КАК Адресат,
	//|	ТаблицаНапоминания.Срок КАК Срок,
	//|	ТаблицаНапоминания.ВидНапоминания1С КАК ВидНапоминания1С,
	//|	ТаблицаНапоминания.ВидНапоминанияЭлПочта КАК ВидНапоминанияЭлПочта
	//|ПОМЕСТИТЬ ВТ_Напоминания
	//|ИЗ
	//|	&ТаблицаНапоминания КАК ТаблицаНапоминания
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	вогСписокИсполнителейПоручения.Исполнитель КАК Пользователь,
	//|	вогСписокИсполнителейПоручения.Контролер КАК Контролер,
	//|	вогСписокИсполнителейПоручения.Соисполнитель КАК Соисполнитель,
	//|	вогСписокИсполнителейПоручения.Наблюдатель КАК Наблюдатель,
	//|	ЛОЖЬ КАК Постановщик
	//|ПОМЕСТИТЬ ВТ_Пользователи
	//|ИЗ
	//|	РегистрСведений.вогСписокИсполнителейПоручения КАК вогСписокИсполнителейПоручения
	//|ГДЕ
	//|	вогСписокИсполнителейПоручения.БизнесПроцесс = &БизнесПроцесс
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	CRM_БизнесПроцесс.Ответственный,
	//|	ЛОЖЬ,
	//|	ЛОЖЬ,
	//|	ЛОЖЬ,
	//|	ИСТИНА
	//|ИЗ
	//|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	//|ГДЕ
	//|	CRM_БизнесПроцесс.Ссылка = &БизнесПроцесс
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_Пользователи.Пользователь КАК Пользователь,
	//|	ВТ_Пользователи.Контролер КАК Контролер,
	//|	ВТ_Пользователи.Соисполнитель КАК Соисполнитель,
	//|	ВТ_Пользователи.Наблюдатель КАК Наблюдатель,
	//|	ВТ_Пользователи.Постановщик КАК Постановщик,
	//|	ВЫБОР
	//|		КОГДА НЕ ВТ_Пользователи.Контролер
	//|				И НЕ ВТ_Пользователи.Соисполнитель
	//|				И НЕ ВТ_Пользователи.Наблюдатель
	//|				И НЕ ВТ_Пользователи.Постановщик
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК Исполнитель
	//|ПОМЕСТИТЬ ВТ_Исполнители
	//|ИЗ
	//|	ВТ_Пользователи КАК ВТ_Пользователи
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_Исполнители.Пользователь КАК Пользователь,
	//|	ВТ_Напоминания.Срок КАК ДатаОповещения,
	//|	ВТ_Напоминания.ВидНапоминания1С КАК ВидНапоминания1С,
	//|	ВТ_Напоминания.ВидНапоминанияЭлПочта КАК ВидНапоминанияЭлПочта
	//|ИЗ
	//|	ВТ_Исполнители КАК ВТ_Исполнители
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Напоминания КАК ВТ_Напоминания
	//|		ПО (ВЫБОР
	//|				КОГДА ВТ_Исполнители.Соисполнитель
	//|						ИЛИ ВТ_Исполнители.Исполнитель
	//|					ТОГДА ВТ_Напоминания.Адресат = ""Исполнителю/Соисполнителю""
	//|				КОГДА ВТ_Исполнители.Постановщик
	//|					ТОГДА ВТ_Напоминания.Адресат = ""Постановщику""
	//|				КОГДА ВТ_Исполнители.Контролер
	//|					ТОГДА ВТ_Напоминания.Адресат = ""Принимающему результат""
	//|				КОГДА ВТ_Исполнители.Наблюдатель
	//|					ТОГДА ВТ_Напоминания.Адресат = ""Наблюдателю""
	//|				ИНАЧЕ ЛОЖЬ
	//|			КОНЕЦ)";
	//
	//Запрос.УстановитьПараметр("ТаблицаНапоминания", ТаблицаНапоминания.Выгрузить());
	//Запрос.УстановитьПараметр("БизнесПроцесс", 		ТекущийОбъект.Ссылка);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//ДатаНачалаНапоминания = ТекущаяДатаСеанса();
	//
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	
	//	Если ВыборкаДетальныеЗаписи.ВидНапоминания1С Тогда
	//		
	//		НаборЗаписей = РегистрыСведений.CRM_Напоминания.СоздатьНаборЗаписей();
	//		НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаДетальныеЗаписи.Пользователь);
	//		НаборЗаписей.Отбор.Предмет.Установить(ТекущийОбъект.Ссылка);
	//		НаборЗаписей.Отбор.ДатаНачала.Установить(ДатаНачалаНапоминания);
	//		НаборЗаписей.Отбор.ДатаОповещения.Установить(ВыборкаДетальныеЗаписи.ДатаОповещения);
	//		
	//		НоваяЗапись = НаборЗаписей.Добавить();
	//		НоваяЗапись.Пользователь 	= ВыборкаДетальныеЗаписи.Пользователь;
	//		НоваяЗапись.Предмет 		= ТекущийОбъект.Ссылка;
	//		НоваяЗапись.ДатаНачала 		= ДатаНачалаНапоминания;
	//		НоваяЗапись.ДатаОповещения 	= ВыборкаДетальныеЗаписи.ДатаОповещения;
	//		НоваяЗапись.Содержание 		= НСтр("ru = 'Напоминание о задаче.'");
	//		НоваяЗапись.Важность 		= ТекущийОбъект.Важность;
	//		
	//		НаборЗаписей.Записать();
	//		
	//	ИначеЕсли ВыборкаДетальныеЗаписи.ВидНапоминанияЭлПочта Тогда
	//		// Создание напоминания на эл.почту
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

// ++ VOG Солодов В.В. 26.11.2020 CRM-1071
&НаКлиенте
Процедура УстановитьДоступностьКомандУточненияАдреса(Знач ТекущиеДанные)
	
	ДоступностьУточненияАдреса = (ТипЗнч(ТекущиеДанные.Предмет) = Тип("СправочникСсылка.Партнеры"));
	Элементы.ПредметыУточнитьАдрес.Доступность = ДоступностьУточненияАдреса;
	Элементы.ПредметыОчиститьАдрес.Доступность = (ДоступностьУточненияАдреса И Не ПустаяСтрока(ТекущиеДанные.Адрес));

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокАдресовНаСервере(Знач ПартнерСсылка, Знач ТекущийПользователь, Знач ДатаПоручения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрПартнеры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Партнеры
	|ИЗ
	|	Справочник.Партнеры КАК СпрПартнеры
	|ГДЕ
	|	СпрПартнеры.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Партнеры.Ссылка КАК Наименование,
	|	ПартнерыКонтактнаяИнформация.Представление КАК Адрес,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ ВТ_Адреса
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|		ПО ВТ_Партнеры.Ссылка = ПартнерыКонтактнаяИнформация.Ссылка
	|			И (ПартнерыКонтактнаяИнформация.Вид = &ВидКИПартнер)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка,
	|	вогТорговыеТочкиКонтактнаяИнформация.Представление,
	|	0
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|			ПО вогТорговыеТочкиКонтактнаяИнформация.Ссылка = CRM_ОбъектыЗначенийКлассификаторов.Объект
	|				И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора = &ЗначениеКлассификатораЗакрыта)
	|		ПО ВТ_Партнеры.Ссылка = вогТорговыеТочкиКонтактнаяИнформация.Ссылка.Партнер
	|			И (вогТорговыеТочкиКонтактнаяИнформация.Вид = &ВидКИТорговаяТочка)
	|			И (вогТорговыеТочкиКонтактнаяИнформация.Ссылка.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Адреса.Наименование КАК Наименование,
	|	ВТ_Адреса.Адрес КАК Адрес,
	|	ВТ_Адреса.Порядок КАК Порядок
	|ИЗ
	|	ВТ_Адреса КАК ВТ_Адреса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""Адрес по поручению"",
	|	ВложенныйЗапрос.Адрес,
	|	2
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 5
	|		вогЗадачиПоручений.Адрес КАК Адрес
	|	ИЗ
	|		РегистрСведений.вогЗадачиПоручений КАК вогЗадачиПоручений
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Адреса КАК ВТ_Адреса
	|			ПО вогЗадачиПоручений.Адрес = ВТ_Адреса.Адрес
	|	ГДЕ
	|		вогЗадачиПоручений.Объект ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|		И вогЗадачиПоручений.Объект.Дата < &ДатаПоручения
	|		И вогЗадачиПоручений.Объект.Автор = &ТекущийПользователь
	|		И вогЗадачиПоручений.Предмет = &Ссылка
	|		И НЕ вогЗадачиПоручений.Адрес = """"
	|		И ВТ_Адреса.Наименование ЕСТЬ NULL
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		вогЗадачиПоручений.Объект.Дата УБЫВ) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Адреса.Порядок";
	
	ЗначениеКлассификатораЗакрыта_УИД 	= Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8");
	ЗначениеКлассификатораЗакрыта 		= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(ЗначениеКлассификатораЗакрыта_УИД);
	
	Запрос.УстановитьПараметр("ВидКИПартнер", 					Справочники.ВидыКонтактнойИнформации.МесторасположениеОфисаКлиента);
	Запрос.УстановитьПараметр("ВидКИТорговаяТочка", 			Справочники.ВидыКонтактнойИнформации.Месторасположение);
	Запрос.УстановитьПараметр("ЗначениеКлассификатораЗакрыта", 	ЗначениеКлассификатораЗакрыта);
	Запрос.УстановитьПараметр("Ссылка", 						ПартнерСсылка);
	Запрос.УстановитьПараметр("ТекущийПользователь", 			ТекущийПользователь);
	Запрос.УстановитьПараметр("ДатаПоручения", 					ДатаПоручения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаАдресов = РезультатЗапроса.Выгрузить();
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаАдресов, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьУточненныйАдресПункта(Форма, ИдентификаторПункта, Адрес, Предмет)
	
	АдресУдален 	= ПустаяСтрока(Адрес);
	ИмяРеквизита 	= СтрШаблон("Адрес_%1", ИдентификаторПункта);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита) Тогда
		
		ИмяЗаголовка = СтрШаблон("АдресЗаголовок_%1", ИдентификаторПункта);
		
		Форма[ИмяРеквизита] = Адрес;
		Форма.Элементы[ИмяРеквизита].Видимость = Не АдресУдален;
		Форма.Элементы[ИмяЗаголовка].Видимость = Не АдресУдален;
		
	КонецЕсли;
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Идентификатор", 	ИдентификаторПункта);
	ПараметрыОтбораСтрок.Вставить("Предмет", 		Предмет);
	
	НайденныеСтроки = Форма.ТаблицаАдресов.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Если АдресУдален Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			ИндексСтроки = Форма.ТаблицаАдресов.Индекс(СтрокаТабличнойЧасти);
			Форма.ТаблицаАдресов.Удалить(ИндексСтроки);
		КонецЦикла;
		
	Иначе
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НоваяСтрока = НайденныеСтроки[0];
			
			Если Не НайденныеСтроки[0].Адрес = Адрес Тогда
				НоваяСтрока.Город = ПредопределенноеЗначение("Справочник.вогНаселенныеПункты.ПустаяСсылка");
			КонецЕсли;
			
		Иначе
			НоваяСтрока = Форма.ТаблицаАдресов.Добавить();
			НоваяСтрока.Идентификатор 	= ИдентификаторПункта;
			НоваяСтрока.Предмет 		= Предмет;
		КонецЕсли;
		
		НоваяСтрока.Адрес = Адрес;
		
	КонецЕсли;
	
КонецПроцедуры // -- VOG Солодов В.В. 26.11.2020 CRM-1071

// ++ VOG Солодов В.В. 30.06.2021 DEV-646
&НаКлиенте
Процедура ОпределитьСвязанныеКомандировки(ИдентификаторыЗадач, Отказ)
	
	МассивИдентификаторов 	= Новый Массив;
	
	Если ТипЗнч(ИдентификаторыЗадач) = Тип("Массив") Тогда
		
		Для Каждого ИдентификаторЗадачи Из ИдентификаторыЗадач Цикл
			МассивИдентификаторов.Добавить(Новый УникальныйИдентификатор(СтрЗаменить(ИдентификаторЗадачи, "_", "-")));
		КонецЦикла;
		
	Иначе
		МассивИдентификаторов.Добавить(Новый УникальныйИдентификатор(СтрЗаменить(ИдентификаторыЗадач, "_", "-")));
	КонецЕсли;
	
	ТекстСообщения = ОпределитьСвязанныеКомандировкиНаСервере(Объект.Ссылка, МассивИдентификаторов, Отказ);
	
	Если Отказ И ЗначениеЗаполнено(ТекстСообщения) Тогда
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьСвязанныеКомандировкиНаСервере(БизнесПроцессСсылка, ИдентификаторыЗадач, Отказ)
	
	Перем ТекстСообщения;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаЗадачиПоручений.Объект КАК Задача,
	|	ТаблицаЗадачиПоручений.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
	|	ТаблицаЗадачиПоручений.НаборЗадач КАК НаборЗадач
	|ПОМЕСТИТЬ ВТ_ИдентификаторыЗадач
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ТаблицаЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогЗадачиПоручений КАК ТаблицаЗадачиПоручений
	|		ПО ТаблицаЗадачи.Ссылка = ТаблицаЗадачиПоручений.Объект
	|			И (ТаблицаЗадачиПоручений.Идентификатор В (&Идентификаторы))
	|ГДЕ
	|	ТаблицаЗадачи.БизнесПроцесс = &БизнесПроцесс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаЗадачиКомандировок.Ссылка КАК Командировка,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаЗадачиКомандировок.Ссылка) КАК ПредставлениеДокумента,
	|	ЛОЖЬ КАК Набор
	|ИЗ
	|	ВТ_ИдентификаторыЗадач КАК ВТ_ИдентификаторыЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вогКомандировка.Задачи КАК ТаблицаЗадачиКомандировок
	|		ПО ВТ_ИдентификаторыЗадач.Задача = ТаблицаЗадачиКомандировок.Задача
	|			И ВТ_ИдентификаторыЗадач.ИдентификаторЗадачи = ТаблицаЗадачиКомандировок.ИдентификаторЗадачи
	|			И (ТаблицаЗадачиКомандировок.Ссылка.ПометкаУдаления = ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЗадачиКомандировок.Ссылка,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаЗадачиКомандировок.Ссылка),
	|	ИСТИНА
	|ИЗ
	|	ВТ_ИдентификаторыЗадач КАК ВТ_ИдентификаторыЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.вогКомандировка.Задачи КАК ТаблицаЗадачиКомандировок
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.вогНаборыТиповыхЗадач КАК ТаблицаНаборы
	|			ПО ТаблицаЗадачиКомандировок.НаборЗадач = ТаблицаНаборы.Ссылка
	|		ПО ВТ_ИдентификаторыЗадач.Задача = ТаблицаЗадачиКомандировок.Задача
	|			И ВТ_ИдентификаторыЗадач.НаборЗадач = ТаблицаЗадачиКомандировок.НаборЗадач
	|			И (ТаблицаЗадачиКомандировок.Ссылка.ПометкаУдаления = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", 	БизнесПроцессСсылка);
	Запрос.УстановитьПараметр("Идентификаторы", ИдентификаторыЗадач);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Отказ 					= Истина;
		ЭтоЗадача 				= Ложь;
		ЭтоНабор 				= Ложь;
		ДокументСсылка 			= Документы.вогКомандировка.ПустаяСсылка();
		ПредставлениеДокумента 	= "";
		
		ТекстыСообщения 		= Новый Массив;
		
		Выборка 				= РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДокументСсылка 			= Выборка.Командировка;
			ПредставлениеДокумента 	= Выборка.ПредставлениеДокумента;
			
			Если Выборка.Набор Тогда
				ЭтоНабор = Истина;
			Иначе
				ЭтоЗадача = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтоЗадача И ЭтоНабор Тогда
			ТекстыСообщения.Добавить(НСтр("ru = 'Задачи и наборы поручения добавлены в документ '"));
		ИначеЕсли ЭтоНабор Тогда
			ТекстыСообщения.Добавить(НСтр("ru = 'Данный набор добавлен в документ '"));
		Иначе
			ТекстыСообщения.Добавить(НСтр("ru = 'Данная задача добавлена в документ '"));
		КонецЕсли;
		
		ТекстыСообщения.Добавить(Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = '%1.'"), ПредставлениеДокумента),
			,
			,
			,
			ПолучитьНавигационнуюСсылку(ДокументСсылка)));
		
		ТекстыСообщения.Добавить(Символы.ПС);
		
		Если ЭтоЗадача И ЭтоНабор Тогда
			ТекстыСообщения.Добавить(НСтр("ru = 'Для очистки необходимо предварительно удалить их из командировки.'"));
		ИначеЕсли ЭтоНабор Тогда
			ТекстыСообщения.Добавить(
			НСтр("ru = 'Для удаления набора необходимо предварительно удалить его из командировки.'"));
		Иначе
			ТекстыСообщения.Добавить(НСтр("ru = 'Для удаления задачи необходимо предварительно удалить её из командировки.'"));
		КонецЕсли;
		
		ТекстСообщения 	= Новый ФорматированнаяСтрока(ТекстыСообщения);
		
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции
// -- VOG Солодов В.В. 30.06.2021 DEV-646

#КонецОбласти

#КонецОбласти
