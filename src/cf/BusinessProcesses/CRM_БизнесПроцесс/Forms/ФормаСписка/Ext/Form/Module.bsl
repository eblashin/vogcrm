
&НаКлиенте
Перем КэшСвойстваДинамическогоСписка;

&НаКлиенте
Перем КэшОграничениеТипов;

#Область ПроцедурыИФункцииОбщегоНазначения

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСпискаСервер()
	Возврат CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьОписаниеТиповДляСписка(Список.ОсновнаяТаблица);
КонецФункции

&НаКлиенте
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка()
	Если ТипЗнч(КэшОграничениеТипов) <> Тип("ОписаниеТипов") Тогда
		КэшОграничениеТипов = НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСпискаСервер();
	КонецЕсли;
	Возврат КэшОграничениеТипов;
КонецФункции

&НаСервере
Функция ПолучитьСвойстваДинамическогоСпискаСервер()
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСвойстваДинамическогоСписка(	ЭтотОбъект,
																			"Список",
																			"БизнесПроцесс.CRM_БизнесПроцесс",
																			Неопределено,
																			Неопределено,
																			Неопределено,
																			"ПодменюВидСписка",
																			"ВидСпискаИдентификаторТекущейНастройки",
																			"Подключаемый_КомандаВидСписка");
	//
КонецФункции

&НаКлиенте
Функция ПолучитьСвойстваДинамическогоСпискаКлиент()
	Если ТипЗнч(КэшСвойстваДинамическогоСписка) <> Тип("Структура") Тогда
		КэшСвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСервер();
	КонецЕсли;
	Возврат КэшСвойстваДинамическогоСписка;
КонецФункции

&НаКлиенте
// Заполнить строку основания включения партнера в список.
Процедура ЗаполнитьСтрокуОснования()

	Основание = Основания.НайтиСтроки(Новый Структура("БизнесПроцесс",Элементы.Список.ТекущаяСтрока));
	Если Основание.Количество() = 0 Тогда
		ОснованиеВыбора = "";
	Иначе
		ОснованиеВыбора = Основание[0].Основание;
	КонецЕсли;

	Элементы.ОснованиеВыбора.Видимость = ЗначениеЗаполнено(ОснованиеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияСписокПриАктивизацииСтроки()
	// Поле отображения содержания.
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПриАктивизацииСтроки(ЭтотОбъект, Элементы.Список.ТекущаяСтрока, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
	Если РасширенныйПоиск Тогда
		ЗаполнитьСтрокуОснования();
	Иначе
		ОснованиеВыбора = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура вызывается из обработчика <ПриЗакрытии> один раз, чтобы не было множественных переключений клиент/сервер
// при сохранении настроек.
//
Процедура ПриЗакрытииНаСервере()
	
	CRM_РежимФормЗакладкиСервер.ПриЗакрытииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитов

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ ДОКУМЕНТА

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// Поле отображения содержания.
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияСписокПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = НЕ Копирование И Истина;
	Если Отказ Тогда
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаВыборИзДерева", , ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеВыбораНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Основание = Основания.НайтиСтроки(Новый Структура("БизнесПроцесс",Элементы.Список.ТекущаяСтрока));
	Если Основание.Количество() > 0 Тогда
		ПоказатьЗначение(, Основание[0].Ссылка);
	КонецЕсли;
	
КонецПроцедуры

 &НаКлиенте
Процедура ПолеСодержаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	// Поле отображения содержания.
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		тОбъект = Элементы.Список.ТекущиеДанные.Ссылка;
	Иначе
		тОбъект = Неопределено;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолеСодержаниеПриНажатииЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка(), тОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСодержаниеПриНажатииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Подключаемый_ОбработчикОжиданияСписокПриАктивизацииСтроки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборКартаМаршрутаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборКартаМаршрута) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "КартаМаршрута", ОтборКартаМаршрута, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "КартаМаршрута");
	КонецЕсли;
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборКартаМаршрута, ОтборПроект, ОтборКлиент, ОтборОтветственный, ОтборПодразделение);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборПроект".
//
Процедура ОтборПроектПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборПроект) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Проект", ОтборПроект, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Проект");
	КонецЕсли;
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборКартаМаршрута, ОтборПроект, ОтборКлиент, ОтборОтветственный, ОтборПодразделение);
КонецПроцедуры // ОтборПроектПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборОтветственный".
//
Процедура ОтборОтветственныйПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборОтветственный) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ответственный", ОтборОтветственный, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ответственный");
	КонецЕсли;
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборКартаМаршрута, ОтборПроект, ОтборКлиент, ОтборОтветственный, ОтборПодразделение);
КонецПроцедуры // ОтборОтветственныйПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборКлиент".
//
Процедура ОтборКлиентПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборКлиент) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер", ОтборКлиент, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер");
	КонецЕсли;
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборКартаМаршрута, ОтборПроект, ОтборКлиент, ОтборОтветственный, ОтборПодразделение);
КонецПроцедуры // ОтборКлиентПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборПодразделение".
//
Процедура ОтборПодразделениеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Подразделение", ОтборПодразделение, Истина);
	Иначе	
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Подразделение");
	КонецЕсли;
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборКартаМаршрута, ОтборПроект, ОтборКлиент, ОтборОтветственный, ОтборПодразделение);
КонецПроцедуры // ОтборПодразделениеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыСегодня".
//
Процедура ОтборСозданыСегодняНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Сегодня", Элемент);
КонецПроцедуры // ОтборСозданыСегодняНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗа3Дня".
//
Процедура ОтборСозданыЗа3ДняНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "3 дня", Элемент);
КонецПроцедуры // ОтборСозданыЗа3ДняНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗаНеделю".
//
Процедура ОтборСозданыЗаНеделюНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Неделя", Элемент);
КонецПроцедуры // ОтборСозданыЗаНеделюНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыЗаМесяц".
//
Процедура ОтборСозданыЗаМесяцНажатие(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "Месяц", Элемент);
КонецПроцедуры // ОтборСозданыЗаМесяцНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборСозданыПроизвольныйПериод".
//
Процедура ОтборСозданыПроизвольныйПериодПриИзменении(Элемент)
	CRM_ТегиКлиент.СозданыОтборНажатие(ЭтотОбъект, "Список", "ПроизвольныйПериод", Элемент);
КонецПроцедуры // ОтборСозданыПроизвольныйПериодПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОтборПериодОчистить".
//
Процедура ОтборПериодОчиститьНажатие(Элемент)
	CRM_ТегиКлиент.ОчиститьОтборНажатие(ЭтотОбъект, "Список");
КонецПроцедуры // ОтборПериодОчиститьНажатие()

#КонецОбласти

#Область ПроцедурыДействияКомандныхПанелейФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ ДОКУМЕНТА

&НаКлиенте
// Процедура - обработчик команды "БыстрыеОтборы".
//
Процедура БыстрыеОтборы(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Истина;	
КонецПроцедуры // БыстрыеОтборы()

&НаКлиенте
// Процедура - обработчик команды "ОтборПериод".
//
Процедура ОтборПериод(Команда)
	CRM_ТегиКлиент.ВыборВариантаОтбора(ЭтотОбъект, Команда);
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = Ложь;	
КонецПроцедуры // ОтборПериод()

&НаКлиенте
Процедура КомандаПоказатьСкрытьПолеОтображенияСодержания(Команда)
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПоказатьСкрытьПолеОтображенияСодержания(ЭтотОбъект);
	Если Команда <> Неопределено Тогда
		СохранитьНастройкиПолейОтображенияСодержания();
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьНастройкиПолейОтображенияСодержания()
	CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПриЗакрытииФормыСписка(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура КомандаВидСпискаСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки)
	CRM_ОбщегоНазначенияКлиентСервер.ОбработкаКомандыПользовательскихНастроекДинамическогоСписка(ЭтотОбъект, СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидСписка(Команда)
	СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаКлиент();
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаВидСпискаЗавершение", ЭтотОбъект, СвойстваДинамическогоСписка);
	CRM_ОбщегоНазначенияКлиент.ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки(ЭтотОбъект, СвойстваДинамическогоСписка, Команда, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидСпискаЗавершение(ПризнакИзмененыНастройки, СвойстваДинамическогоСписка) Экспорт
	КомандаВидСпискаСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	
	БизнесПроцессыИЗадачиКлиент.Остановить(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	БизнесПроцессыИЗадачиКлиент.СделатьАктивным(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстанавливатьФормуПриОткрытии(Команда)
	Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка = НЕ Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ВосстанавливатьФормуПриОткрытии", Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ ДОКУМЕНТА

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// +Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	Если НЕ CRM_РежимФормЗакладкиСервер.ВосстановлениеФормыПриЗапускеСеанса(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// -Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	
	Если Параметры.Свойство("РежимВыбора") Тогда
		Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	КонецЕсли;
	
	// Поле отображения содержания.
	CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПриСозданииФормыСпискаНаСервере(ЭтотОбъект);
	
	Если Параметры.Свойство("СкрытьПодменюВидСписка") Тогда
		Элементы.ПодменюВидСписка.Видимость = Ложь;
	Иначе
		// Оформление списка
		//СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСервер();
		//CRM_ОбщегоНазначенияСервер.ПользовательскиеНастройкиСпискаПриСозданииНаСервере(ЭтаФорма, СвойстваДинамическогоСписка);
	КонецЕсли;
	
	Если Параметры.Свойство("СкрытьПоказКартыМаршрута") Тогда
		Элементы.СписокОбработкаCRM_КартаМаршрутаБизнесПроцессаКартаМаршрута.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") И ЗначениеЗаполнено(Параметры.Отбор) Тогда
		Если Параметры.Отбор.Свойство("Проект") Тогда
			ОтборПроект = Параметры.Отбор.Проект;
		КонецЕсли;
		Если Параметры.Отбор.Свойство("Партнер") Тогда
			ОтборКлиент = Параметры.Отбор.Партнер;
		КонецЕсли;
		Если Параметры.Отбор.Свойство("Ответственный") Тогда
			ОтборОтветственный = Параметры.Отбор.Ответственный;
		КонецЕсли;
		Если Параметры.Отбор.Свойство("Подразделение") Тогда
			ОтборПодразделение = Параметры.Отбор.Подразделение;
		КонецЕсли;
	КонецЕсли;
		
	CRM_Теги.ОбновитьЗначенияОтбораПериодов(ЭтотОбъект);
	ОтборОтветственный = Пользователи.АвторизованныйПользователь();
	CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ответственный", ОтборОтветственный, Истина);
	//CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборПроект, ОтборКлиент, ОтборОтветственный, ОтборПодразделение);
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	Список.Параметры.УстановитьЗначениеПараметра("ПустаяДата",  Дата("00010101"));
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	// Перейдем сразу на вкладку отборов "Быстрые отборы" и оставим ее в свернутом режиме.
	Элементы.ПанельЗначенийОтбора.Видимость			= Истина;
	Элементы.ПанельЗначенийОтбора.ТекущаяСтраница	= Элементы.ЗначенияОтбораБыстрыеОтборы;	
	БыстрыеОтборы(Элементы.БыстрыеОтборы);
	CRM_ТегиКлиент.БыстрыйОтборИзменение(ЭтотОбъект, ОтборПроект, ОтборКлиент, ОтборОтветственный, ОтборПодразделение);
	// +Пользовательские настройки.
	ДобавитьПодменюПользовательскихНастроек();
	// -Пользовательские настройки.
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
КонецПроцедуры // ПриЗакрытии()

&НаСервере
// Процедура - обработчик события формы "ПриЗагрузкеДанныхИзНастроекНаСервере".
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ОтборПроект = Настройки.Получить("ОтборПроект");
	Если ЗначениеЗаполнено(ОтборПроект) Тогда		
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Проект", ОтборПроект, Истина);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Проект");
	КонецЕсли;	
	ОтборКлиент = Настройки.Получить("ОтборКлиент");
	Если ЗначениеЗаполнено(ОтборКлиент) Тогда		
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер", ОтборКлиент, Истина);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Партнер");
	КонецЕсли;	
	ОтборОтветственный = Настройки.Получить("ОтборОтветственный");
	Если ЗначениеЗаполнено(ОтборОтветственный) Тогда		
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ответственный", ОтборОтветственный, Истина);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ответственный");
	КонецЕсли;	
	ОтборПодразделение = Настройки.Получить("ОтборПодразделение");
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда		
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Подразделение", ОтборПодразделение, Истина);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Подразделение");
	КонецЕсли;	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗадачаВыполнена" ИЛИ ИмяСобытия = "ЗадачаИзменена" Тогда
		Элементы.Список.Обновить();
 	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ПользовательскиеНастройки

&НаСервере
Процедура ДобавитьПодменюПользовательскихНастроек()
	CRM_ПользовательскиеНастройкиСервер.УстановитьПользовательскиеНастройки(Список, ИдентификаторПользовательскойНастройки, ИмяФормы+".Список");
	CRM_ПользовательскиеНастройкиСервер.ДобавитьПодменюПользовательскихНастроек(ЭтотОбъект, Список, ИмяФормы+".Список");
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборНастройкиНаСервере(НомерНастройки)
	CRM_ПользовательскиеНастройкиСервер.ОбработатьВыборНастройкиНаСервере(НомерНастройки, Список, ЭтотОбъект, ИмяФормы+".Список");	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьВыборНастройки(Команда)
	НомерНастройкиСтрока = СтрЗаменить(Команда.Имя, "ОбработатьВыборНастройки_", "");
	НомерНастройки = Число(НомерНастройкиСтрока);
	 ОбработатьВыборНастройкиНаСервере(НомерНастройки);	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущиеНастройкиНаСервере(ИмяНастройки, ДополнительныеПараметры) Экспорт
	Если НЕ ИмяНастройки = Неопределено Тогда
		CRM_ПользовательскиеНастройкиСервер.СохранитьТекущиеНастройкиНаСервере(ИмяНастройки, Список, ЭтотОбъект, ИмяФормы+".Список");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущиеНастройки(Команда)
	ПараметрыОповещения = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("СохранитьТекущиеНастройкиНаСервере", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВводСтроки(Оповещение, "", "Введите название настройки");		
КонецПроцедуры

&НаСервере
Процедура УдалитьНастройкуНаСервере()
	ПредставлениеНастройки = CRM_ПользовательскиеНастройкиСервер.ПолучитьПредставлениеНастройки(ИдентификаторПользовательскойНастройки, ИмяФормы+".Список");	
	ХранилищеПользовательскихНастроекДинамическихСписков.Удалить(ИмяФормы+".Список", ИдентификаторПользовательскойНастройки, ИмяПользователя()); 
	ИдентификаторПользовательскойНастройки = "Стандартные_Настройки";
	CRM_ПользовательскиеНастройкиСервер.УстановитьПользовательскиеНастройки(Список, ИдентификаторПользовательскойНастройки, ИмяФормы+".Список");
	CRM_ПользовательскиеНастройкиСервер.ДобавитьПодменюПользовательскихНастроек(ЭтотОбъект, Список, ИмяФормы+".Список");
		
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОтветаУдаление(ВариантОтвета, ДополнительныеПараметры) Экспорт
	Если ВариантОтвета = КодВозвратаДиалога.Да Тогда
		УдалитьНастройкуНаСервере();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТекущуюНастройку(Команда)
	Если ИдентификаторПользовательскойНастройки = "Стандартные_Настройки" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нельзя удалить стандартные настройки";
		Сообщение.Сообщить();
	Иначе
		ПараметрыОповещения = Новый Структура;
		Оповещение = Новый ОписаниеОповещения("ОбработкаОтветаУдаление", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(Оповещение, "Вы действительно хотите удалить настройку """+CRM_ПользовательскиеНастройкиСервер.ПолучитьПредставлениеНастройки(ИдентификаторПользовательскойНастройки, ИмяФормы+".Список")+""" ?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОчистка(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ОтборПодразделение) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Обязательно должно быть заполненно одно из полей отбора ""Ответственный"" или ""Подразделение""!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ОтборОтветственный) Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Обязательно должно быть заполненно одно из полей отбора ""Ответственный"" или ""Подразделение""!'"));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


