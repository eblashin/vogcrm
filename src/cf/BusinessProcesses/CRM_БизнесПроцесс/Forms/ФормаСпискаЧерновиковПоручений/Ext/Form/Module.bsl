
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ТекущийПользователь")
		И ЗначениеЗаполнено(Параметры.ТекущийПользователь) Тогда
		ТекущийПользователь = Параметры.ТекущийПользователь;
	Иначе
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ГруппаИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы, "ОтборПользователь", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаИли,
		"Автор",
		ТекущийПользователь,
		ВидСравненияКомпоновкиДанных.Равно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаИли,
		"Ответственный",
		ТекущийПользователь,
		ВидСравненияКомпоновкиДанных.Равно);
	
	Поля = Новый Массив;
	Поля.Добавить("Исполнители");
	Поля.Добавить("Соисполнители");
	Поля.Добавить("Объекты");
	
	Список.УстановитьОграниченияИспользованияВГруппировке(Поля);
	Список.УстановитьОграниченияИспользованияВОтборе(Поля);
	Список.УстановитьОграниченияИспользованияВПорядке(Поля);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // VOG Солодов В.В. 25.01.2021 DEV-106
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вогСписокИсполнителейПоручения.БизнесПроцесс КАК БизнесПроцесс,
	|	вогСписокИсполнителейПоручения.Исполнитель КАК ОбъектВывода,
	|	ЛОЖЬ КАК Соисполнитель,
	|	ЛОЖЬ КАК Предмет
	|ИЗ
	|	РегистрСведений.вогСписокИсполнителейПоручения КАК вогСписокИсполнителейПоручения
	|ГДЕ
	|	вогСписокИсполнителейПоручения.БизнесПроцесс В(&БизнесПроцессы)
	|	И НЕ вогСписокИсполнителейПоручения.Контролер
	|	И НЕ вогСписокИсполнителейПоручения.Наблюдатель
	|	И НЕ вогСписокИсполнителейПоручения.Соисполнитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вогСписокИсполнителейПоручения.БизнесПроцесс,
	|	вогСписокИсполнителейПоручения.Исполнитель,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.вогСписокИсполнителейПоручения КАК вогСписокИсполнителейПоручения
	|ГДЕ
	|	вогСписокИсполнителейПоручения.БизнесПроцесс В(&БизнесПроцессы)
	|	И вогСписокИсполнителейПоручения.Соисполнитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	CRM_БизнесПроцессвогПредметы.Ссылка,
	|	CRM_БизнесПроцессвогПредметы.Предмет,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	БизнесПроцесс.CRM_БизнесПроцесс.вогПредметы КАК CRM_БизнесПроцессвогПредметы
	|ГДЕ
	|	CRM_БизнесПроцессвогПредметы.Ссылка В(&БизнесПроцессы)
	|ИТОГИ ПО
	|	БизнесПроцесс";
	
	Запрос.УстановитьПараметр("БизнесПроцессы", Строки.ПолучитьКлючи());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаБизнесПроцессы = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаБизнесПроцессы.Следующий() Цикл
		
		СтрокаСписка = Строки[ВыборкаБизнесПроцессы.БизнесПроцесс];
		
		МассивИсполнителей 		= Новый Массив;
		МассивСоисполнителей 	= Новый Массив;
		МассивПредметов 		= Новый Массив;
		
		ВыборкаИсполнители = ВыборкаБизнесПроцессы.Выбрать();
		
		Пока ВыборкаИсполнители.Следующий() Цикл
			
			Если ВыборкаИсполнители.Соисполнитель Тогда
				МассивСоисполнителей.Добавить(ВыборкаИсполнители.ОбъектВывода);
			ИначеЕсли ВыборкаИсполнители.Предмет Тогда
				МассивПредметов.Добавить(ВыборкаИсполнители.ОбъектВывода);
			Иначе
				МассивИсполнителей.Добавить(ВыборкаИсполнители.ОбъектВывода);
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаСписка.Данные.Исполнители 	= СтрСоединить(МассивИсполнителей, ";" + Символы.ПС);
		СтрокаСписка.Данные.Соисполнители 	= СтрСоединить(МассивСоисполнителей, ";" + Символы.ПС);
		СтрокаСписка.Данные.Объекты 		= СтрСоединить(МассивПредметов, ";" + Символы.ПС);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
