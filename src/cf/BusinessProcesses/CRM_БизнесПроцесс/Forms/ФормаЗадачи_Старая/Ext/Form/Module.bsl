////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Функция ПолучитьИсполнителя()
	
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		
		Возврат Объект.Исполнитель;
		
	Иначе
		
		Возврат  Объект.РольИсполнителя;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьВозможныхИсполнителейПоРоли(Роль)
	
	// + Тищенко В.В.
	// Оригинал
	//СписокИсполнителей = Новый списокЗначений;
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("РольИсполнителя",Роль);
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ИсполнителиЗадач.Исполнитель
	//|ИЗ
	//|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	//|ГДЕ
	//|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
	//
	//Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
	//
	//СписокИсполнителей.ЗагрузитьЗначения(Массив);
	//
	//Возврат СписокИсполнителей;
	// - Тищенко В.В.
	// ++ VOG Солодов В.В. 23.08.2019 task 477
	Если Роль = Справочники.РолиИсполнителей.вогЗадачиПодразделения Тогда
		
		СписокИсполнителей = Новый СписокЗначений;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Исполнитель
		|ИЗ
		|	РегистрСведений.CRM_ИсполнителиЭтаповБизнесПроцессов КАК CRM_ИсполнителиЭтаповБизнесПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО CRM_ИсполнителиЭтаповБизнесПроцессов.Исполнитель = Пользователи.Подразделение
		|			И (CRM_ИсполнителиЭтаповБизнесПроцессов.Объект = &БизнесПроцесс)";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		МассивИсполнителей = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Исполнитель");
		
		СписокИсполнителей.ЗагрузитьЗначения(МассивИсполнителей);
		
		Возврат СписокИсполнителей;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 23.08.2019
	
	Возврат CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРолиСАдресацией(Роль,Неопределено);
	
КонецФункции

&НаСервере
Процедура ПолучитьСписокОбъектовПоБизнесПроцессу()
	
	ОбъектыЗначение = РеквизитФормыВЗначение("ОбъектыПоБизнесПроцессам");
	
	РегНабор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
	РегНабор.Отбор.БизнесПроцесс.Установить(Объект.БизнесПроцесс);
	РегНабор.Отбор.Задача.Установить(Объект.Ссылка);
	РегНабор.Прочитать();
	
	ОбъектыЗначение = РегНабор.Выгрузить();
	
	ЗначениеВРеквизитФормы(ОбъектыЗначение, "ОбъектыПоБизнесПроцессам");
	КоличествоОбъектов = РегНабор.Количество();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписьПоОбъекту(ТекДанные)
	
	ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.БизнесПроцесс	= ТекДанные.БизнесПроцесс;
	ЗаписьРегистра.Задача			= ТекДанные.Задача;
	ЗаписьРегистра.ТочкаМаршрута	= ТекДанные.ТочкаМаршрута;
	ЗаписьРегистра.Объект			= ТекДанные.Объект;
	ЗаписьРегистра.Прочитать();
	Если ЗаписьРегистра.Выбран() Тогда
		ЗаписьРегистра.Удалить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьПоОбъекту(НовыйОбъект)
	
	НоваяСтрока					= ОбъектыПоБизнесПроцессам.Добавить();
	НоваяСтрока.БизнесПроцесс	= Объект.БизнесПроцесс;;
	НоваяСтрока.Задача			= Объект.Ссылка;
	НоваяСтрока.ТочкаМаршрута	= Объект.CRM_ТочкаМаршрута;
	НоваяСтрока.Объект			= НовыйОбъект;
	НоваяСтрока.ДатаРегистрации	= ТекущаяДатаСеанса();
	
	Для Каждого СтрокаТипа Из ТаблицаТипов Цикл
		Если СтрокаТипа.ВидОбъекта.ТипЗначения.СодержитТип(ТипЗнч(НовыйОбъект)) Тогда
			НоваяСтрока.ВидОбъекта = СтрокаТипа.ВидОбъекта;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
	Набор.Отбор.БизнесПроцесс.Установить(НоваяСтрока.БизнесПроцесс);
	Набор.Отбор.Объект.Установить(НоваяСтрока.Объект);
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
	
	ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.БизнесПроцесс	= НоваяСтрока.БизнесПроцесс;
	ЗаписьРегистра.Задача			= НоваяСтрока.Задача;
	ЗаписьРегистра.ТочкаМаршрута	= НоваяСтрока.ТочкаМаршрута;
	ЗаписьРегистра.Объект			= НоваяСтрока.Объект;
	ЗаписьРегистра.ДатаРегистрации	= НоваяСтрока.ДатаРегистрации;
	ЗаписьРегистра.ВидОбъекта		= НоваяСтрока.ВидОбъекта;
	ЗаписьРегистра.Записать();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокОбъектов()
	
	Возврат ОбъектыПоБизнесПроцессам.Выгрузить(,"Объект").ВыгрузитьКолонку("Объект");
	
КонецФункции

&НаСервере
Процедура ОбработатьОповещенияЗаписиНовогоОбъекта(НовыйОбъект)
	
	Если НЕ Метаданные.ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Тип.Типы().Найти(ТипЗнч(НовыйОбъект)) = Неопределено Тогда
		
		ДобавитьЗаписьПоОбъекту(НовыйОбъект);
		// Обновляем описание БП в поле "История".
	Если Элементы.ГруппаИстория.Видимость тогда
		ОписаниеТочкиМаршрута	= CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(Объект.Ссылка);
	КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеОснования(ИмяДокумента)
	
	СинонимДокумента	= Метаданные.НайтиПоТипу(Тип("ДокументСсылка."+ИмяДокумента)).Синоним;
	
	СписокОснований = Новый СписокЗначений;
	
	Для Каждого СтрокаТаб Из ТаблицаТипов Цикл
		Если СтрокаТаб.ВидОбъекта.ТипЗначения.СодержитТип(Тип("ДокументСсылка."+ИмяДокумента)) Тогда
			Если ЗначениеЗаполнено(СтрокаТаб.ЭтапОснования) Тогда
				
				Если СтрокаТаб.ЭтапОснования.Вид = Перечисления.CRM_ВидыТочекМаршрута.Старт Тогда
					
					МассивСсылок = Новый Массив;
					
					//Если ЗначениеЗаполнено(Объект.БизнесПроцесс.Предмет) И НЕ ТипЗнч(Объект.БизнесПроцесс.Предмет) = Тип("ДокументСсылка.удалитьCRM_Сделка") Тогда
					Если ЗначениеЗаполнено(Объект.БизнесПроцесс.Предмет) Тогда
						МассивСсылок.Добавить(Объект.БизнесПроцесс.Предмет);
					Иначе
						МассивСсылок.Добавить(Объект.БизнесПроцесс.Ссылка);
					КонецЕсли;
					СписокОснований.Добавить(МассивСсылок,"Основание бизнес-процесса");
				Иначе
					Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
					Набор.Отбор.БизнесПроцесс.Установить(Объект.БизнесПроцесс);
					Набор.Отбор.ТочкаМаршрута.Установить(СтрокаТаб.ЭтапОснования);
					Набор.Прочитать();
					
					Если Набор.Количество() > 0 Тогда
						МассивСсылок = Набор.ВыгрузитьКолонку("Объект");
						СписокОснований.Добавить(МассивСсылок,НСтр("ru = 'Документы этапа: '") + СтрокаТаб.ЭтапОснования.Наименование);
					КонецЕсли;
				КонецЕсли;
			Иначе
				//Если ЗначениеЗаполнено(Объект.БизнесПроцесс.Предмет) И НЕ ТипЗнч(Объект.БизнесПроцесс.Предмет) = Тип("ДокументСсылка.удалитьCRM_Сделка") Тогда
				Если ЗначениеЗаполнено(Объект.БизнесПроцесс.Предмет) Тогда
					МассивСсылок = Новый Массив;
					МассивСсылок.Добавить(Объект.БизнесПроцесс.Предмет);
					
					СписокОснований.Добавить(МассивСсылок,"Основание бизнес-процесса");
				КонецЕсли;
				
				Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
				Набор.Отбор.БизнесПроцесс.Установить(Объект.БизнесПроцесс);
				Набор.Прочитать();
				
				ОписаниеТипаЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный));
				ТабНабора = Набор.Выгрузить();
				ТабНабора.Колонки.Добавить("Порядок",ОписаниеТипаЧисло);
				
				Для Каждого СтрокаТаб Из ТабНабора Цикл
					СтрокаТаб.Порядок = СтрокаТаб.ТочкаМаршрута.РеквизитДопУпорядочивания;
				КонецЦикла;
				ТабНабора.Сортировать("Порядок Возр");
				
				ТекущийЭтап = Неопределено;
				МассивСсылок = Новый Массив;
				Для Каждого СтрокаТаб Из ТабНабора Цикл
					
					Если НЕ ТекущийЭтап = СтрокаТаб.ТочкаМаршрута Тогда
						Если МассивСсылок.Количество() > 0 Тогда
							СписокОснований.Добавить(МассивСсылок,ТекущийЭтап.Наименование);
							МассивСсылок = Новый Массив;
						КонецЕсли;
						
						ТекущийЭтап = СтрокаТаб.ТочкаМаршрута;
					КонецЕсли;
					
					МассивСсылок.Добавить(СтрокаТаб.Объект);
				КонецЦикла;
				
				Если МассивСсылок.Количество() > 0 Тогда
					СписокОснований.Добавить(МассивСсылок,НСтр("ru = 'Документы этапа: '") + ТекущийЭтап.Наименование);
				КонецЕсли;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("СписокСсылок,ИмяДокумента",СписокОснований,СинонимДокумента);
	
КонецФункции

&НаСервере
Процедура СкорректироватьДатыЗадачи(ПриоритетДатыНачала)
	
	Если ДатаНачало > ДатаОкончание И РедактироватьСрокВыполненияЗадач Тогда
		Если ПриоритетДатыНачала Тогда
			ДатаОкончание = ДатаНачало;
		Иначе
			ДатаНачало = ДатаОкончание;
		КонецЕсли;
	КонецЕсли;
	Если НачалоДня(ДатаНачало) = НачалоДня(ДатаОкончание) И ВремяНачало > ВремяОкончание 
			И РедактироватьСрокВыполненияЗадач Тогда
		Если ПриоритетДатыНачала Тогда
			ВремяОкончание = ВремяНачало;
		Иначе
			ВремяНачало = ВремяОкончание;
		КонецЕсли;
	КонецЕсли;
	
	Объект.ДатаНачала		= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	Объект.СрокИсполнения	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);	
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаКорректность()
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата начала должна быть заполнена!'"),, "ДатаНачало");
		Возврат Ложь;
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Срок должен быть заполнен!'"),, "ДатаОкончание");
	//	Возврат Ложь;
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) И (Объект.СрокИсполнения < Объект.ДатаНачала) Тогда
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Срок должен быть больше даты начала!'"),, "ДатаОкончание");
		//Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыСервер()
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ДатаНачала);
	ДатаНачало	= ДатаВремя.Дата;
	ВремяНачало	= ДатаВремя.Время;
	
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.СрокИсполнения);
	ДатаОкончание	= ДатаВремя.Дата;
	ВремяОкончание	= ДатаВремя.Время;
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьКатегорииНаФорме()
	ПрефиксРеквизита = "ПолеВводаКатегория";
	МассивУдаляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	Пока Истина Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		Попытка
			ТестовыйРеквизит = ЭтотОбъект[ИмяРеквизита];
			МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизита);
			нИндекс = нИндекс + 1;
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	МассивКатегорий = Новый Массив();
	Если ЗначениеЗаполнено(Объект.CRM_ОсновнаяКатегория) Тогда
		МассивКатегорий.Добавить(Объект.CRM_ОсновнаяКатегория);
	КонецЕсли;
	Для Каждого СтрокаКатегория Из Объект.CRM_Категории Цикл
		Если ЗначениеЗаполнено(СтрокаКатегория.Категория) И МассивКатегорий.Найти(СтрокаКатегория.Категория) = Неопределено Тогда
			МассивКатегорий.Добавить(СтрокаКатегория.Категория);
		КонецЕсли;
	КонецЦикла;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.CRM_КатегорииПользователей");
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		РеквизитКатегория = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТиповКатегория);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитКатегория);
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхРеквизитов Цикл
		Попытка Элементы.Удалить(Элементы[УдаляемыйЭлемент]);
		Исключение КонецПопытки;
	КонецЦикла;
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	нИндекс = 1;
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		ЭтотОбъект[ИмяРеквизита] = ДобавляемаяКатегория;
		
		ЭлементКатегория = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаКатегории);
		ЭлементКатегория.Вид					= ВидПоляФормы.ПолеВвода;
		ЭлементКатегория.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементКатегория.ПутьКДанным			= ИмяРеквизита;
		ЭлементКатегория.РедактированиеТекста	= Ложь;
		ЭлементКатегория.КнопкаСпискаВыбора		= Ложь;
		ЭлементКатегория.КнопкаВыбора			= Ложь;
		ЭлементКатегория.КнопкаОчистки			= Ложь;
		ЭлементКатегория.КнопкаРегулирования	= Ложь;
		ЭлементКатегория.КнопкаОткрытия			= Ложь;
		ЭлементКатегория.КнопкаВыпадающегоСписка= Ложь;
		
		ЦветКатегории = Новый Цвет(ДобавляемаяКатегория.ЦветКрасный, ДобавляемаяКатегория.ЦветЗеленый, ДобавляемаяКатегория.ЦветСиний);
		ЭлементКатегория.ЦветФона = ЦветКатегории;
		ЭлементКатегория.ЦветТекста = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветКатегории);
		
		Если нИндекс = 1 Тогда
			ЭлементКатегория.Шрифт = Новый Шрифт(ЭлементКатегория.Шрифт,,, Истина);
		КонецЕсли;
		
		ЭлементКатегория.УстановитьДействие("НачалоВыбора",	"Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора");
		ЭлементКатегория.УстановитьДействие("Очистка",		"Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка");
		ЭлементКатегория.УстановитьДействие("Открытие",		"Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие");
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСрокиИсполнения()
	
	ТаблицаЭтапов = CRM_БизнесПроцессыСервер.ПересчитатьСрокиИсполненияЗадачБизнесПроцесса(Объект.Ссылка, Объект.СрокИсполнения);
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(Объект.БизнесПроцесс);
	НаборЭтапов.Прочитать();
	НаборЭтапов.Загрузить(ТаблицаЭтапов);
	НаборЭтапов.Записать();
	
	// Пересчитаем для ведущего  БП.
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс.ВедущаяЗадача) Тогда
		ТаблицаЭтапов.Сортировать("ДатаВыполнения УБЫВ");
		
		ТаблицаЭтаповВложенного = CRM_БизнесПроцессыСервер.ПересчитатьСрокиИсполненияЗадачБизнесПроцесса(Объект.БизнесПроцесс.ВедущаяЗадача, ТаблицаЭтапов[0].ДатаВыполнения);
		
		НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		НаборЭтапов.Отбор.Объект.Установить(Объект.БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс);
		НаборЭтапов.Прочитать();
		НаборЭтапов.Загрузить(ТаблицаЭтаповВложенного);
		НаборЭтапов.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПеренестиЗадачу(ВариантПереноса, Знач ДатаПереноса = Неопределено, БылиПеренесеныСобытия = Ложь)
	РезультатВыполнения = CRM_БизнесПроцессыИЗадачиВызовСервера.ПеренестиЗадачу(ЭтотОбъект, ВариантПереноса, ДатаПереноса, Истина, Истина, БылиПеренесеныСобытия, Ложь);
	
	ЗаполнитьДанныеФормыСервер();
	
	Возврат РезультатВыполнения;
КонецФункции

&НаКлиенте
Процедура ПеренестиЗадачуНаКлиенте(ВариантПереноса, Знач ДатаПереноса = Неопределено)
	БылиПеренесеныСобытия = Ложь;
	Если ПеренестиЗадачу(ВариантПереноса, ДатаПереноса, БылиПеренесеныСобытия) Тогда
		Записать();
		
		ОповеститьОбИзменении(Объект.Ссылка);
		
		Если БылиПеренесеныСобытия Тогда
			// Нужно чтобы обновился календарь.
			Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Неопределено, Параметры.ОбновлятьКалендарь), ЭтотОбъект);
		КонецЕсли;
		
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр(	"ru = 'Данные еще не записаны.
								|Добавление события возможно только после записи данных.
								|Данные будут записаны.'"), РежимДиалогаВопрос.ОКОтмена);
		//
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьАвтораБизнесПроцесса(БизнесПроцесс)
	
	Возврат БизнесПроцесс.Автор;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоКлиенты()
	Дерево = РеквизитФормыВЗначение("ДеревоКлиенты");
	Дерево.Строки.Очистить();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.БизнесПроцесс КАК БизнесПроцесс,
	|	Таблица.Партнер КАК Партнер,
	|	Таблица.Реквизит КАК Реквизит,
	|	Таблица.Завершено КАК Завершено
	|	
	|ИЗ
	|	
	|	РегистрСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазыРеквизиты КАК Таблица
	|	
	|ГДЕ
	|	
	|	Таблица.БизнесПроцесс = &БизнесПроцесс
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Партнер, Реквизит
	|");
	Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	
	Если ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы = Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.ДублированиеКлиентов Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.БизнесПроцесс КАК БизнесПроцесс,
		|	Таблица.Исполнитель КАК Исполнитель,
		|	Таблица.Контролер КАК Контролер,
		|	Таблица.Партнер КАК Партнер,
		|	Таблица.Проект КАК Проект,
		|	Таблица.ПартнерРодитель КАК ПартнерРодитель,
		|	Таблица.Завершено КАК Завершено
		|ИЗ
		|	РегистрСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы КАК Таблица
		|ГДЕ
		|	Таблица.БизнесПроцесс = &БизнесПроцесс
		|	И Таблица.ПартнерРодитель <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.Партнер.Наименование
		|ИТОГИ ПО
		|	Таблица.ПартнерРодитель
		|");
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаПартнеры = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПартнеры.Следующий() Цикл
			
			СтрокаПартнер = Дерево.Строки.Добавить();
			СтрокаПартнер.Партнер = ВыборкаПартнеры.ПартнерРодитель;
			СтрокаПартнер.ТипСтроки = 1;
			
			ДетальныеЗаписи = ВыборкаПартнеры.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока ДетальныеЗаписи.Следующий() Цикл
				Если ДетальныеЗаписи.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
					ЗаполнитьЗначенияСвойств(СтрокаПартнер, ДетальныеЗаписи,, "Партнер");
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ВыборкаПартнерыДубли = ВыборкаПартнеры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПартнерыДубли.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаПартнерыДубли.Партнер) Тогда
					СтрокаПартнерДубль = СтрокаПартнер.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПартнерДубль, ВыборкаПартнерыДубли,, "Партнер");
					СтрокаПартнерДубль.Партнер = ВыборкаПартнерыДубли.Партнер;
					СтрокаПартнерДубль.ТипСтроки = 2;
					
					НайденныеСтроки = ТаблицаРеквизиты.НайтиСтроки(Новый Структура("Партнер", СтрокаПартнерДубль.Партнер));
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						СтрокаРеквизит = СтрокаПартнерДубль.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаРеквизит, СтрокаПартнерДубль);
						СтрокаРеквизит.Партнер = НайденнаяСтрока.Реквизит;
						СтрокаРеквизит.Реквизит = НайденнаяСтрока.Реквизит;
						СтрокаРеквизит.Завершено = НайденнаяСтрока.Завершено;
						СтрокаРеквизит.ТипСтроки = 3;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Подзапрос.БизнесПроцесс КАК БизнесПроцесс,
		|	Подзапрос.Исполнитель КАК Исполнитель,
		|	Подзапрос.Контролер КАК Контролер,
		|	Подзапрос.Партнер КАК Партнер,
		|	Подзапрос.Проект КАК Проект,
		|	Подзапрос.КонтактноеЛицо КАК КонтактноеЛицо,
		|	Подзапрос.Завершено КАК Завершено,
		|	Подзапрос.Тема КАК Тема,
		|	Подзапрос.АдресОтправителя КАК АдресОтправителя,
		|	Подзапрос.Контакт КАК Контакт
		|	
		|ИЗ
		|	
		|	(ВЫБРАТЬ
		|		Таблица.БизнесПроцесс КАК БизнесПроцесс,
		|		Таблица.Исполнитель КАК Исполнитель,
		|		Таблица.Контролер КАК Контролер,
		|		Таблица.Партнер КАК Партнер,
		|		ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка) КАК КонтактноеЛицо,
		|		Таблица.Проект КАК Проект,
		|		Таблица.Завершено КАК Завершено,
		|		ВЫБОР
		|			КОГДА 
		|				Таблица.Партнер ССЫЛКА Документ.ЭлектронноеПисьмоВходящее ИЛИ Таблица.Партнер ССЫЛКА Документ.ТелефонныйЗвонок
		|			ТОГДА
		|				Таблица.Партнер.Тема
		|			ИНАЧЕ
		|				""""
		|		КОНЕЦ КАК Тема,
		|		ВЫБОР
		|			КОГДА 
		|				Таблица.Партнер ССЫЛКА Документ.ЭлектронноеПисьмоВходящее
		|			ТОГДА
		|				Таблица.Партнер.ОтправительАдрес
		|			ИНАЧЕ
		|				""""
		|		КОНЕЦ КАК АдресОтправителя,
		|		ВЫБОР
		|			КОГДА 
		|				Таблица.Партнер ССЫЛКА Документ.ЭлектронноеПисьмоВходящее
		|			ТОГДА
		|				Таблица.Партнер.ОтправительКонтакт
		|			КОГДА 
		|				Таблица.Партнер ССЫЛКА Документ.ТелефонныйЗвонок
		|			ТОГДА
		|				Таблица.Партнер.АбонентКонтакт
		|			ИНАЧЕ
		|				НЕОПРЕДЕЛЕНО
		|		КОНЕЦ КАК Контакт
		|		
		|	ИЗ
		|		РегистрСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы КАК Таблица
		|	ГДЕ
		|		Таблица.БизнесПроцесс = &БизнесПроцесс
		|		И (Таблица.Партнер ССЫЛКА Справочник.Партнеры ИЛИ Таблица.Партнер ССЫЛКА Документ.ТелефонныйЗвонок ИЛИ Таблица.Партнер ССЫЛКА Документ.ЭлектронноеПисьмоВходящее)
		|		
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|		
		|		
		|	ВЫБРАТЬ
		|		
		|		Таблица.БизнесПроцесс,
		|		Таблица.Исполнитель,
		|		Таблица.Контролер,
		|		Таблица.Партнер.Владелец,
		|		Таблица.Партнер,
		|		Таблица.Проект,
		|		Таблица.Завершено,
		|		"""",
		|		"""",
		|		НЕОПРЕДЕЛЕНО
		|	ИЗ
		|		РегистрСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы КАК Таблица
		|	ГДЕ
		|		Таблица.БизнесПроцесс = &БизнесПроцесс
		|		И Таблица.Партнер ССЫЛКА Справочник.КонтактныеЛицаПартнеров
		|	) КАК Подзапрос
		|	
		|	
		|УПОРЯДОЧИТЬ ПО
		|	Подзапрос.Партнер.Наименование, Подзапрос.КонтактноеЛицо.Наименование
		|	
		|ИТОГИ ПО
		|	Подзапрос.Партнер,
		|	Подзапрос.КонтактноеЛицо
		|	
		|");
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаПартнеры = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПартнеры.Следующий() Цикл
			
			СтрокаПартнер = Дерево.Строки.Добавить();
			СтрокаПартнер.Партнер = ВыборкаПартнеры.Партнер;
			СтрокаПартнер.ТипСтроки = 1;
			
			ДетальныеЗаписи = ВыборкаПартнеры.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока ДетальныеЗаписи.Следующий() Цикл
				Если ДетальныеЗаписи.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
					ЗаполнитьЗначенияСвойств(СтрокаПартнер, ДетальныеЗаписи,, "Партнер");
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			НайденныеСтроки = ТаблицаРеквизиты.НайтиСтроки(Новый Структура("Партнер", СтрокаПартнер.Партнер));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				СтрокаРеквизит = СтрокаПартнер.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРеквизит, СтрокаПартнер);
				Если ТипЗнч(НайденнаяСтрока.Реквизит) = Тип("Строка") Тогда
					РеквизитМд = Метаданные.Справочники.Партнеры.Реквизиты.Найти(НайденнаяСтрока.Реквизит);
					Если РеквизитМд = Неопределено Тогда
						СтрокаРеквизит.Партнер = НайденнаяСтрока.Реквизит;
					Иначе
						СтрокаРеквизит.Партнер = РеквизитМд.Представление();
					КонецЕсли;
				Иначе
					СтрокаРеквизит.Партнер = НайденнаяСтрока.Реквизит;
				КонецЕсли;
				СтрокаРеквизит.Реквизит = НайденнаяСтрока.Реквизит;
				СтрокаРеквизит.Завершено = НайденнаяСтрока.Завершено;
				СтрокаРеквизит.ТипСтроки = 3;
			КонецЦикла;
			
			ВыборкаКонтактныеЛица = ВыборкаПартнеры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаКонтактныеЛица.Следующий() Цикл
				Если ЗначениеЗаполнено(ВыборкаКонтактныеЛица.КонтактноеЛицо) Тогда
					СтрокаКЛ = СтрокаПартнер.Строки.Добавить();
					СтрокаКЛ.Партнер = ВыборкаКонтактныеЛица.КонтактноеЛицо;
					СтрокаКЛ.ТипСтроки = 2;
					
					ДетальныеЗаписи = ВыборкаКонтактныеЛица.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока ДетальныеЗаписи.Следующий() Цикл
						Если ДетальныеЗаписи.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
							ЗаполнитьЗначенияСвойств(СтрокаКЛ, ДетальныеЗаписи,, "Партнер");
							СтрокаКЛ.Партнер = ДетальныеЗаписи.КонтактноеЛицо;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					НайденныеСтроки = ТаблицаРеквизиты.НайтиСтроки(Новый Структура("Партнер", СтрокаКЛ.Партнер));
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						СтрокаРеквизит = СтрокаКЛ.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаРеквизит, СтрокаКЛ);
						Если ТипЗнч(НайденнаяСтрока.Реквизит) = Тип("Строка") Тогда
							РеквизитМд = Метаданные.Справочники.КонтактныеЛицаПартнеров.Реквизиты.Найти(НайденнаяСтрока.Реквизит);
							Если РеквизитМд = Неопределено Тогда
								СтрокаРеквизит.Партнер = НайденнаяСтрока.Реквизит;
							Иначе
								СтрокаРеквизит.Партнер = РеквизитМд.Представление();
							КонецЕсли;
						Иначе
							СтрокаРеквизит.Партнер = НайденнаяСтрока.Реквизит;
						КонецЕсли;
						СтрокаРеквизит.Реквизит = НайденнаяСтрока.Реквизит;
						СтрокаРеквизит.Завершено = НайденнаяСтрока.Завершено;
						СтрокаРеквизит.ТипСтроки = 3;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоКлиенты");
	
КонецПроцедуры

&НаСервере
Функция ДеревоКлиентовЗавершеноПриИзмененииНаСервере(СтруктураКлюч, Знач ФлагЗавершено)
	Попытка
		НачатьТранзакцию();
		
		Если ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы = Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.ДублированиеКлиентов Тогда
			Дерево = РеквизитФормыВЗначение("ДеревоКлиенты");
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Партнер", СтруктураКлюч.Партнер));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаПартнер = НайденныеСтроки[0];
				
				МенеджерЗаписи = РегистрыСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураКлюч);
				МенеджерЗаписи.Прочитать();
				Если Не МенеджерЗаписи.Выбран() Тогда
					ВызватьИсключение НСтр("ru = 'Не найден ключ записи'");
				КонецЕсли;
				МенеджерЗаписи.Завершено = ФлагЗавершено;
				МенеджерЗаписи.Записать();
				
				Для Каждого СтрокаПартнерДубль Из СтрокаПартнер.Строки Цикл
					МенеджерЗаписи = РегистрыСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаПартнерДубль);
					МенеджерЗаписи.Прочитать();
					Если Не МенеджерЗаписи.Выбран() Тогда
						ВызватьИсключение НСтр("ru = 'Не найден ключ записи'");
					КонецЕсли;
					МенеджерЗаписи.Завершено = ФлагЗавершено;
					МенеджерЗаписи.Записать();
					
					Для Каждого СтрокаРеквизит Из СтрокаПартнерДубль.Строки Цикл
						МенеджерЗаписи = РегистрыСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазыРеквизиты.СоздатьМенеджерЗаписи();
						ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаРеквизит);
						МенеджерЗаписи.Партнер = СтрокаПартнерДубль.Партнер;
						//Если Не МенеджерЗаписи.Выбран() Тогда
						//	ВызватьИсключение НСтр("ru = 'Не найден ключ записи'");
						//КонецЕсли;
						МенеджерЗаписи.Завершено = ФлагЗавершено;
						МенеджерЗаписи.Записать();
						
					КонецЦикла;
					
				КонецЦикла;
			Иначе
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			Если СтруктураКлюч.Свойство("Реквизит") Тогда
				МенеджерЗаписи = РегистрыСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазыРеквизиты.СоздатьМенеджерЗаписи();
			Иначе
				МенеджерЗаписи = РегистрыСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы.СоздатьМенеджерЗаписи();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураКлюч);
			МенеджерЗаписи.Прочитать();
			Если Не МенеджерЗаписи.Выбран() Тогда
				ВызватьИсключение НСтр("ru = 'Не найден ключ записи'");
			КонецЕсли;
			
			МенеджерЗаписи.Завершено = ФлагЗавершено;
			МенеджерЗаписи.Записать();
			
			УстановитьЗаголовокСтраницыПартнеры();
		
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
	Исключение
		СтрОшибка = ОписаниеОшибки();
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрОшибка);
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаСервере
Процедура ЗаписатьЗаполненностьРеквизитовВРегистр(ЭлементПартнерКЛ, ПартнерИлиКЛ)
	ЭлементыРеквизиты = ЭлементПартнерКЛ.ПолучитьЭлементы();
	
	Если	ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы = Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольПотенциалаКлиентов
		И	ТипЗнч(ПартнерИлиКЛ) = Тип("СправочникСсылка.Партнеры") Тогда
		//
		бВсеРеквизитыЗаполнены = ЗначениеЗаполнено(ПартнерИлиКЛ.CRM_Потенциал);
	ИначеЕсли	ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы = Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольРегистрацииКлиентов
		И	(ТипЗнч(ПартнерИлиКЛ) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
		ИЛИ ТипЗнч(ПартнерИлиКЛ) = Тип("ДокументСсылка.ТелефонныйЗвонок")) Тогда
		//
		Если ТипЗнч(ПартнерИлиКЛ) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			бВсеРеквизитыЗаполнены = (ЗначениеЗаполнено(ПартнерИлиКЛ.ОтправительКонтакт) И ТипЗнч(ПартнерИлиКЛ.ОтправительКонтакт) <> Тип("Строка"));
		ИначеЕсли ТипЗнч(ПартнерИлиКЛ) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда			
			бВсеРеквизитыЗаполнены = ЗначениеЗаполнено(ПартнерИлиКЛ.АбонентКонтакт);
		КонецЕсли;
		Если бВсеРеквизитыЗаполнены Тогда
			Если ТипЗнч(ПартнерИлиКЛ) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				ЭлементПартнерКЛ.Контакт = ПартнерИлиКЛ.ОтправительКонтакт;
			ИначеЕсли ТипЗнч(ПартнерИлиКЛ) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
				ЭлементПартнерКЛ.Контакт = ПартнерИлиКЛ.АбонентКонтакт;
			КонецЕсли;				
		КонецЕсли;
		
	Иначе
		бВсеРеквизитыЗаполнены = Истина;
		Для Каждого ЭлементРеквизит Из ЭлементыРеквизиты Цикл
			Если	ТипЗнч(ЭлементРеквизит.Партнер) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")
				Или	ТипЗнч(ЭлементРеквизит.Партнер) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения")
				Или	ТипЗнч(ЭлементРеквизит.Партнер) = Тип("ПланВидовХарактеристикСсылка.CRM_ДополнительнаяИнформация")
				Или	ТипЗнч(ЭлементРеквизит.Партнер) = Тип("Строка") И ЗначениеЗаполнено(ЭлементРеквизит.Реквизит) Тогда
				//
				Если ТипЗнч(ЭлементРеквизит.Партнер) = Тип("Строка") Тогда
					РеквизитЗаполнен = CRM_ОбщегоНазначенияСервер.ПроверитьЗаполнениеРеквизитаОбъектаКлиентскойБазы(ПартнерИлиКЛ, ЭлементРеквизит.Реквизит);
				Иначе
					РеквизитЗаполнен = CRM_ОбщегоНазначенияСервер.ПроверитьЗаполнениеРеквизитаОбъектаКлиентскойБазы(ПартнерИлиКЛ, ЭлементРеквизит.Партнер);
				КонецЕсли;
				Если бВсеРеквизитыЗаполнены И Не РеквизитЗаполнен Тогда
					бВсеРеквизитыЗаполнены = Ложь;
				КонецЕсли;
				
				Менеджер = РегистрыСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазыРеквизиты.СоздатьМенеджерЗаписи();
				Менеджер.БизнесПроцесс = Объект.БизнесПроцесс;
				Менеджер.Партнер = ПартнерИлиКЛ;
				Если ТипЗнч(ЭлементРеквизит.Партнер) = Тип("Строка") Тогда
					Менеджер.Реквизит = ЭлементРеквизит.Реквизит;
				Иначе
					Менеджер.Реквизит = ЭлементРеквизит.Партнер;
				КонецЕсли;
				Менеджер.Прочитать();
				Если Не Менеджер.Выбран() Тогда Продолжить; КонецЕсли;
				
				Если Менеджер.Завершено <> РеквизитЗаполнен Тогда
					Менеджер.Завершено = РеквизитЗаполнен;
					Менеджер.Записать();
				КонецЕсли;
				
				ЭлементРеквизит.Завершено = РеквизитЗаполнен;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Набор = РегистрыСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы.СоздатьНаборЗаписей();
	Набор.Отбор.БизнесПроцесс.Установить(Объект.БизнесПроцесс);
	Набор.Отбор.Партнер.Установить(ПартнерИлиКЛ);
	Набор.Прочитать();
	Если Набор.Количество() > 0 Тогда
		бЗаписать = Ложь;
		Для Каждого СтрокаНабора Из Набор Цикл
			Если СтрокаНабора.Завершено <> бВсеРеквизитыЗаполнены Тогда
				СтрокаНабора.Завершено = бВсеРеквизитыЗаполнены;
				бЗаписать = Истина;
			КонецЕсли;
		КонецЦикла;
		Если бЗаписать Тогда
			Набор.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ЭлементПартнерКЛ.Завершено = бВсеРеквизитыЗаполнены;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоКлиенты(ПартнерИлиКЛ, ОбновитьВсе = Ложь)
	Если ПартнерИлиКЛ = Неопределено Или ТипЗнч(ПартнерИлиКЛ) = Тип("СправочникСсылка.Партнеры") 
	Или ТипЗнч(ПартнерИлиКЛ) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
	Или ТипЗнч(ПартнерИлиКЛ) = Тип("ДокументСсылка.ТелефонныйЗвонок")  Тогда
		бЭтоПартнер = Истина;
	ИначеЕсли ТипЗнч(ПартнерИлиКЛ) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		бЭтоПартнер = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
		
	ЭлементыПартнеры = ДеревоКлиенты.ПолучитьЭлементы();
	
	бПрервать = Ложь;
	Для Каждого ЭлементПартнер Из ЭлементыПартнеры Цикл
		Если бЭтоПартнер Тогда
			Если ОбновитьВсе Тогда
				Если ТипЗнч(ЭлементПартнер.Партнер) <> Тип("Строка") И ЗначениеЗаполнено(ЭлементПартнер.Партнер) Тогда
					ЗаписатьЗаполненностьРеквизитовВРегистр(ЭлементПартнер, ЭлементПартнер.Партнер);
				КонецЕсли;
			Иначе
				Если ЭлементПартнер.Партнер = ПартнерИлиКЛ Тогда
					ЗаписатьЗаполненностьРеквизитовВРегистр(ЭлементПартнер, ПартнерИлиКЛ);
					бПрервать = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЭлементыКЛ = ЭлементПартнер.ПолучитьЭлементы();
			Для Каждого ЭлементКЛ Из ЭлементыКЛ Цикл
				Если ОбновитьВсе Тогда
					Если ТипЗнч(ЭлементКЛ.Партнер) <> Тип("Строка") И ЗначениеЗаполнено(ЭлементКЛ.Партнер) Тогда
						ЗаписатьЗаполненностьРеквизитовВРегистр(ЭлементКЛ, ЭлементКЛ.Партнер);
					КонецЕсли;
				Иначе
					Если ЭлементКЛ.Партнер = ПартнерИлиКЛ Тогда
						ЗаписатьЗаполненностьРеквизитовВРегистр(ЭлементКЛ, ПартнерИлиКЛ);
						бПрервать = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если бПрервать Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьЗаголовокСтраницыПартнеры();
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСтраницыПартнеры()
	СтрЗаголовок = Строка(ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы);
	
	Дерево = РеквизитФормыВЗначение("ДеревоКлиенты");
	
	Если	ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы = Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольПотенциалаКлиентов
		Или	ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы = Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольРегистрацииКлиентов Тогда
		//
		НайденныеСтрокиЗавершенные = Дерево.Строки.НайтиСтроки(Новый Структура("Завершено,ТипСтроки", Истина, 1), Истина);
		НайденныеСтрокиВсе = Дерево.Строки.НайтиСтроки(Новый Структура("ТипСтроки", 1));
	Иначе
		НайденныеСтрокиЗавершенные = Дерево.Строки.НайтиСтроки(Новый Структура("Завершено,ТипСтроки", Истина, 3), Истина);
		Дерево.Колонки.Добавить("_ДляПоиска", Новый ОписаниеТипов("Булево"));
		НайденныеСтрокиВсе = Дерево.Строки.НайтиСтроки(Новый Структура("_ДляПоиска,ТипСтроки", Ложь, 3), Истина);
	КонецЕсли;
	
	Если НайденныеСтрокиВсе.Количество() = 0 Тогда
		ПроцентВыполнения = 0;
	Иначе
		ПроцентВыполнения = Окр(НайденныеСтрокиЗавершенные.Количество() / НайденныеСтрокиВсе.Количество() * 100, 0);
	КонецЕсли;
	
	СтрЗаголовок = СтрЗаголовок + " "
		+ "(" + НСтр("ru = 'выполнено'")
		+ " " + Формат(ПроцентВыполнения, "ЧН=0; ЧГ=") + "%)";
	//
	
	Элементы.СтраницаПартнеры.Заголовок = СтрЗаголовок;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ
&НаСервере
Функция ИмяМетаданных(ВидДанных, Данные)
	Возврат Метаданные[ВидДанных][Данные].ПолноеИмя();
КонецФункции

&НаКлиенте
Процедура ВвестиОбъект(Команда)
	
	Если Найти(Команда.Имя, "Команда_Ввести_Документ_") > 0 Тогда
		
		ИмяДокумента = СтрЗаменить(Команда.Имя, "Команда_Ввести_", "");
		
		Если ИмяДокумента = СтрЗаменить(ИмяМетаданных("Документы", "ЭлектронноеПисьмоВходящее"),".","_") Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Создание Входящих писем запрещено. Воспользуйтесь кнопкой ""Выбрать...""'"));
			Возврат;
		КонецЕсли;
		
		ИмяДокумента = СтрЗаменить(Команда.Имя, "Команда_Ввести_Документ_", "");
		Если ИмяДокумента = "ТелефонныйЗвонок" Тогда
			#Если Вебклиент Тогда
				Состояние(Нстр("ru = 'Работа СофтФона невозможна в web-клиенте!'"));
			#Иначе
				Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
					Возврат;
				КонецЕсли;	
				СписокОбъектов = ПолучитьСписокУчастников();
				Если СписокОбъектов.Количество() > 0 Тогда
					сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, Новый Структура("Основание", Объект.Ссылка));
				КонецЕсли;	
			#КонецЕсли
		Иначе
			ПараметрыФормы = ПроверитьНаличиеОснования(ИмяДокумента);
			Если ПараметрыФормы.СписокСсылок.Количество() > 0 Тогда
				
				Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
					ПараметрыФормы.Вставить("БизнесПроцесс", Объект.БизнесПроцесс);
				КонецЕсли;							
				ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиОбъектЗавершение", ЭтотОбъект, ИмяДокумента);
				ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаВыбораОснования", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
				ПараметрыФормы.Вставить("СозданИзЭтапаСделки", Истина);
				ОткрытьФорму("Документ."+ИмяДокумента+".ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(Команда.Имя, "Команда_Ввести_Справочник_") > 0 Тогда
		
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ИмяСправочника = СтрЗаменить(Команда.Имя, "Команда_Ввести_Справочник_", "");
		ОткрытьФорму("Справочник."+ИмяСправочника+".ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
		
	ИначеЕсли Найти(Команда.Имя, "Команда_Добавить_Документ_") > 0 Тогда
		
		ИмяДокумента = СтрЗаменить(Команда.Имя, "Команда_Добавить_", "");
		Если ИмяДокумента = СтрЗаменить(ИмяМетаданных("Документы", "ЭлектронноеПисьмоВходящее"),".","_") Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Создание Входящих писем запрещено. Воспользуйтесь кнопкой ""Выбрать...""'"));
			Возврат;
		КонецЕсли;
		
		ИмяДокумента = СтрЗаменить(Команда.Имя, "Команда_Добавить_Документ_", "");
		Если ИмяДокумента = "ТелефонныйЗвонок" Тогда
			#Если Вебклиент Тогда
				Состояние(Нстр("ru = 'Работа СофтФона невозможна в web-клиенте!'"));
			#Иначе
				Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
					Возврат;
				КонецЕсли;	
				СписокОбъектов = ПолучитьСписокУчастников();
				Если СписокОбъектов.Количество() > 0 Тогда
					сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, Новый Структура("Основание", Объект.Ссылка));
				КонецЕсли;
			#КонецЕсли
		Иначе
			ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
			ПараметрыФормы.Вставить("СозданИзЭтапаСделки", Истина);
			ОткрытьФорму("Документ."+ИмяДокумента+".ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли Найти(Команда.Имя, "Команда_Добавить_Справочник_") > 0 Тогда
		
		ИмяСправочника = СтрЗаменить(Команда.Имя, "Команда_Ввести_Справочник_", "");
		ОткрытьФорму("Справочник."+ИмяСправочника+".ФормаОбъекта",,ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОбъектЗавершение(ВыбЗнач, ИмяДокумента) Экспорт
	
	Если НЕ ВыбЗнач = Неопределено Тогда
		ПараметрыФормы = Новый Структура("Основание", ВыбЗнач);
		ПараметрыФормы.Вставить("СозданИзЭтапаСделки", Истина);
		ОткрытьФорму("Документ."+ИмяДокумента+".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьРеквизитПартнера(ИмяДокумента)
	
	МетаданныеДокумента = Метаданные.Документы[ИмяДокумента];
	
	Возврат CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("Партнер", МетаданныеДокумента);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьПартнера(БизнесПроцесс)
	
	Если ЗначениеЗаполнено(БизнесПроцесс.Партнер) Тогда
		Возврат БизнесПроцесс.Партнер;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
	
&НаКлиенте
Процедура ВыбратьОбъект(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьОбъектЗавершение", ЭтотОбъект);
	Если Найти(Команда.Имя, "Команда_Выбрать_Документ_") > 0 Тогда
		
		ИмяДокумента = СтрЗаменить(Команда.Имя, "Команда_Выбрать_Документ_", "");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		Если Найти(ИмяДокумента, "Событие") > 0 Тогда
			Партнер = ВернутьПартнера(Объект.БизнесПроцесс);
			ПараметрыФормы.Вставить("ПартнерБП", Партнер);
		КонецЕсли;					
		
		ФормаВыбора = ПолучитьФорму("Документ."+ИмяДокумента+".ФормаВыбора",ПараметрыФормы,ЭтотОбъект);
		
		Если ОбъектыПоБизнесПроцессам.Количество() > 0 Тогда
			СписокОтбора = Новый СписокЗначений();
			СписокОтбора.ЗагрузитьЗначения(ПолучитьСписокОбъектов());
			
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеВСписке;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбора.ПравоеЗначение	= СписокОтбора;
			ЭлементОтбора.Использование		= Истина;
			
		КонецЕсли;
		
		Если ЕстьРеквизитПартнера(ИмяДокумента) Тогда
			Партнер = ВернутьПартнера(Объект.БизнесПроцесс);
			Если НЕ Партнер = Неопределено Тогда
				ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Партнер");
				ЭлементОтбора.ПравоеЗначение	= Партнер;
				ЭлементОтбора.Использование		= Истина;
			КонецЕсли;
		КонецЕсли;
		
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
	ИначеЕсли Найти(Команда.Имя, "Команда_Выбрать_Справочник_") > 0 Тогда
		
		ИмяСправочника = СтрЗаменить(Команда.Имя, "Команда_Выбрать_Справочник_", "");
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		Если ОбъектыПоБизнесПроцессам.Количество() > 0 Тогда
			СписокОтбора = Новый СписокЗначений();
			СписокОтбора.ЗагрузитьЗначения(ПолучитьСписокОбъектов());
			
			ФормаВыбора = ПолучитьФорму("Справочник."+ИмяСправочника+".ФормаВыбора",ПараметрыФормы,ЭтотОбъект);
			
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеВСписке;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбора.ПравоеЗначение	= СписокОтбора;
			ЭлементОтбора.Использование		= Истина;
			
			ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
			ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВыбора.Открыть();
		Иначе
			ОткрытьФорму("Справочник."+ИмяСправочника+".ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОбъектЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		ДобавитьЗаписьПоОбъекту(Результат);
		// Обновляем описание БП в поле "История".
	Если Элементы.ГруппаИстория.Видимость тогда
		ОписаниеТочкиМаршрута	= CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(Объект.Ссылка);
	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавлениеКнопокНаПанельОбъектов()
	
	СтруктураТипов = CRM_БизнесПроцессыСервер.ПолучитьСтруктуруТипов_Новая(Объект.Ссылка);
	
	Если СтруктураТипов.ТаблицаТипов.Количество() > 0 Тогда
		СписокОбязательныхТипов = СтруктураТипов.СписокОбязательныхТипов;
		Для Каждого СтрокаТаб Из СтруктураТипов.ТаблицаТипов Цикл
			НоваяСтрока = ТаблицаТипов.Добавить();
			НоваяСтрока.ВидОбъекта		= СтрокаТаб.ВидОбъекта;
			НоваяСтрока.ЭтапОснования	= СтрокаТаб.ЭтапОснования;
			НоваяСтрока.Обязательный	= СтрокаТаб.Обязательный;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаТипов.Количество() > 0 Тогда
		
		НоваяКомандаФормы = Команды.Добавить("Команда_Ввести");
		НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Создать документ'");
		НоваяКомандаФормы.Действие                  = "ВвестиОбъект";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Создать новый документ на основании документа этапа'");		
		
		НоваяКомандаФормы = Команды.Добавить("Команда_Выбрать");
		НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Выбрать'");
		НоваяКомандаФормы.Действие                  = "ВыбратьОбъект";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Выбрать существующий документ'");
		
		НоваяКомандаФормы = Команды.Добавить("Команда_Добавить");
		НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'На основании задачи'");
		НоваяКомандаФормы.Действие                  = "ВвестиОбъект";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Создать новый документ на основании текущей задачи'");				
		
	КонецЕсли;
	
	Если ТаблицаТипов.Количество() = 1 Тогда
		
		МассивТипов = ТаблицаТипов[0].ВидОбъекта.ТипЗначения.Типы();
		
		МетаданныеДок	= Метаданные.НайтиПоТипу(МассивТипов[0]);
		ПолноеИмя		= МетаданныеДок.ПолноеИмя();
		Синоним			= МетаданныеДок.Синоним;
		
		ИмяКнопкиДобавить	= "Добавить_"+СтрЗаменить(ПолноеИмя, ".", "_");
		ИмяКнопкиВвести		= "Ввести_"+СтрЗаменить(ПолноеИмя, ".", "_");
		ИмяКнопкиВыбрать	= "Выбрать_"+СтрЗаменить(ПолноеИмя, ".", "_");
		
		// Ввести объект на основании
		НоваяКомандаФормы = Команды.Добавить("Команда_Ввести_"+СтрЗаменить(ПолноеИмя, ".", "_"));
		НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Создать документ'");
		НоваяКомандаФормы.Действие                  = "ВвестиОбъект";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Создать документ %Синоним% на основании документа этапа'");
		НоваяКомандаФормы.Подсказка					= СтрЗаменить(НоваяКомандаФормы.Подсказка, "%Синоним%", Синоним);		
		
		НовыйПунктМеню = Элементы.Вставить(ИмяКнопкиВвести, Тип("КнопкаФормы"), Элементы.ОбъектыПоБизнесПроцессам.КоманднаяПанель, Элементы.ОбъектыПоБизнесПроцессамУдалить);
		НовыйПунктМеню.ИмяКоманды			= "Команда_Ввести_"+СтрЗаменить(ПолноеИмя, ".", "_");
		НовыйПунктМеню.Заголовок			= НСтр("ru = 'Создать ""%Синоним%""'");
		НовыйПунктМеню.Заголовок			= СтрЗаменить(НовыйПунктМеню.Заголовок, "%Синоним%", Синоним);						
		НовыйПунктМеню.Картинка				= БиблиотекаКартинок.СоздатьЭлементСписка;
		НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
		
		//Выбрать объект
		НоваяКомандаФормы = Команды.Добавить("Команда_Выбрать_"+СтрЗаменить(ПолноеИмя, ".", "_"));
		НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Добавить'");
		НоваяКомандаФормы.Действие                  = "ВыбратьОбъект";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Выбрать документ %Синоним%'");
		НоваяКомандаФормы.Подсказка					= СтрЗаменить(НоваяКомандаФормы.Подсказка, "%Синоним%", Синоним);
		
		НовыйПунктМеню = Элементы.Вставить(ИмяКнопкиВыбрать, Тип("КнопкаФормы"), Элементы.ОбъектыПоБизнесПроцессам.КоманднаяПанель, Элементы.ОбъектыПоБизнесПроцессамУдалить);
		НовыйПунктМеню.ИмяКоманды			= "Команда_Выбрать_"+СтрЗаменить(ПолноеИмя, ".", "_");
		НовыйПунктМеню.Заголовок			= НСтр("ru = 'Выбрать ""%Синоним%""'");
		НовыйПунктМеню.Заголовок			= СтрЗаменить(НовыйПунктМеню.Заголовок, "%Синоним%", Синоним);								
		//НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ДокументОбъект;
		НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
		
		// Ввести объект без основания.
		НоваяКомандаФормы = Команды.Добавить("Команда_Добавить_"+СтрЗаменить(ПолноеИмя, ".", "_"));
		НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'На основании задачи'");
		НоваяКомандаФормы.Действие                  = "ВвестиОбъект";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Создать новый документ %Синоним% на основании текущей задачи'");
		НоваяКомандаФормы.Подсказка = СтрЗаменить(НоваяКомандаФормы.Подсказка, "%Синоним%", Синоним);		
		
		НовыйПунктМеню = Элементы.Вставить(ИмяКнопкиДобавить, Тип("КнопкаФормы"), Элементы.ОбъектыПоБизнесПроцессам.КоманднаяПанель, Элементы.ОбъектыПоБизнесПроцессамУдалить);
		НовыйПунктМеню.ИмяКоманды			= "Команда_Добавить_"+СтрЗаменить(ПолноеИмя, ".", "_");
		НовыйПунктМеню.Заголовок			= НСтр("ru = 'На основании задачи'");
		НовыйПунктМеню.Картинка				= БиблиотекаКартинок.СоздатьЭлементСписка;
		НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;								
		
	ИначеЕсли ТаблицаТипов.Количество() > 1 Тогда
				
		ПунктМенюВвести		= Элементы.Вставить("Кнопка_Ввести",Тип("ГруппаФормы"), Элементы.ОбъектыПоБизнесПроцессам.КоманднаяПанель, Элементы.ОбъектыПоБизнесПроцессамУдалить);
		ПунктМенюВвести.Заголовок	= НСтр("ru = 'Создать документ'");
		ПунктМенюВвести.Картинка	= БиблиотекаКартинок.СоздатьЭлементСписка;
		ПунктМенюВвести.Отображение	= ОтображениеКнопки.КартинкаИТекст;
		
		ПунктМенюВыбрать	= Элементы.Вставить("Кнопка_Выбрать",Тип("ГруппаФормы"), Элементы.ОбъектыПоБизнесПроцессам.КоманднаяПанель, Элементы.ОбъектыПоБизнесПроцессамУдалить);
		ПунктМенюВыбрать.Заголовок = НСтр("ru = 'Выбрать документ'");
		
		ПунктМенюДобавить = Элементы.Вставить("Кнопка_Добавить",Тип("ГруппаФормы"), Элементы.ОбъектыПоБизнесПроцессам.КоманднаяПанель, Элементы.ОбъектыПоБизнесПроцессамУдалить);
		ПунктМенюДобавить.Заголовок	= НСтр("ru = 'На основании задачи'");
		ПунктМенюДобавить.Картинка	= БиблиотекаКартинок.СоздатьЭлементСписка;
		ПунктМенюДобавить.Отображение	= ОтображениеКнопки.КартинкаИТекст;				
		
		Для Каждого СтрокаТаб Из ТаблицаТипов Цикл
			
			МассивТипов = СтрокаТаб.ВидОбъекта.ТипЗначения.Типы();
			
			МетаданныеДок	= Метаданные.НайтиПоТипу(МассивТипов[0]);
			ПолноеИмя		= МетаданныеДок.ПолноеИмя();
			Синоним			= МетаданныеДок.Синоним;
			
			ИмяКнопкиДобавить	= "Добавить_"+СтрЗаменить(ПолноеИмя, ".", "_");
			ИмяКнопкиВвести		= "Ввести_"+СтрЗаменить(ПолноеИмя, ".", "_");
			ИмяКнопкиВыбрать	= "Выбрать_"+СтрЗаменить(ПолноеИмя, ".", "_");
			
			// Ввести объект на основании
			НоваяКомандаФормы = Команды.Добавить("Команда_Ввести_"+СтрЗаменить(ПолноеИмя, ".", "_"));
			НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Создать документ'");
			НоваяКомандаФормы.Действие                  = "ВвестиОбъект";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Создать документ %Синоним% на основании документа этапа'");
			НоваяКомандаФормы.Подсказка = СтрЗаменить(НоваяКомандаФормы.Подсказка, "%Синоним%", Синоним);			
			
			НовыйПунктМеню = Элементы.Вставить(ИмяКнопкиВвести, Тип("КнопкаФормы"), ПунктМенюВвести);
			НовыйПунктМеню.ИмяКоманды			= "Команда_Ввести_"+СтрЗаменить(ПолноеИмя, ".", "_");
			НовыйПунктМеню.Заголовок			= Синоним;
			//НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ДокументОбъект;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
			
			//Выбрать объект
			НоваяКомандаФормы = Команды.Добавить("Команда_Выбрать_"+СтрЗаменить(ПолноеИмя, ".", "_"));
			НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'Добавить'");
			НоваяКомандаФормы.Действие                  = "ВыбратьОбъект";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Выбрать документ %Синоним%'");
			НоваяКомандаФормы.Подсказка = СтрЗаменить(НоваяКомандаФормы.Подсказка, "%Синоним%", Синоним);
			
			НовыйПунктМеню = Элементы.Вставить(ИмяКнопкиВыбрать, Тип("КнопкаФормы"), ПунктМенюВыбрать);
			НовыйПунктМеню.ИмяКоманды			= "Команда_Выбрать_"+СтрЗаменить(ПолноеИмя, ".", "_");
			НовыйПунктМеню.Заголовок			= Синоним;
			//НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ДокументОбъект;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
						
			// Ввести объект без основания.
			НоваяКомандаФормы = Команды.Добавить("Команда_Добавить_"+СтрЗаменить(ПолноеИмя, ".", "_"));
			НоваяКомандаФормы.Заголовок                 = НСтр("ru = 'На основании задачи'");
			НоваяКомандаФормы.Действие                  = "ВвестиОбъект";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			НоваяКомандаФормы.Подсказка					= НСтр("ru = 'Создать новый документ %Синоним% на основании текущей задачи'");
			НоваяКомандаФормы.Подсказка = СтрЗаменить(НоваяКомандаФормы.Подсказка, "%Синоним%", Синоним);			
			
			НовыйПунктМеню = Элементы.Вставить(ИмяКнопкиДобавить, Тип("КнопкаФормы"), ПунктМенюДобавить);
			НовыйПунктМеню.ИмяКоманды			= "Команда_Добавить_"+СтрЗаменить(ПолноеИмя, ".", "_");
			НовыйПунктМеню.Заголовок			= Синоним;
			//НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ДокументОбъект;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;						
			
		КонецЦикла;
	Иначе
		Элементы.ГруппаДействия.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура анализирует наличие варианта или условия и отрисовывает кнопки по вариантам выполнения задачи.
//
Процедура ДобавлениеКнопокНаПанель()
	
	СтруктураВариантовВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(Объект.Ссылка);
	
	//Элементы.АвтоКнопки.Заголовок = СтруктураВариантовВыполнения.ПредставлениеТочкиЗаголовок;
	
	Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 Тогда
		НоваяКомандаФормы = Команды.Добавить("Команда_0");
		НоваяКомандаФормы.Заголовок                 = "Выполнить";
		НоваяКомандаФормы.Действие                  = "ВыполнитьЗадачуБезУсловия";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		
		НовыйПунктМеню = Элементы.Вставить("Кнопка_0",Тип("КнопкаФормы"), Элементы.АвтоКнопки);
		НовыйПунктМеню.ИмяКоманды			= "Команда_0";
		НовыйПунктМеню.Заголовок			= "Выполнить";
		НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
		НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
		//НовыйПунктМеню.КнопкаПоУмолчанию	= Истина;
	КонецЕсли;
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(Объект.БизнесПроцесс.Ссылка);
	НаборЭтапов.Прочитать();
	
	// Если это задача БП Поручение и этап "Выполнить", то кнопка будет одна.
	Если (Объект.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
		Или Объект.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПоручениеГрупповое) // ++ VOG Солодов В.В. 21.08.2019 task 477 // Добавил условие
		И НаборЭтапов[0].ТочкаМаршрута = Объект.CRM_ТочкаМаршрута Тогда
		
		//Элементы.АвтоКнопки.Заголовок ="";
		
		НоваяКомандаФормы = Команды.Добавить("Команда_"+?(НаборЭтапов[1].Используется,"1","0"));
		НоваяКомандаФормы.Заголовок                 = "Выполнить";
		НоваяКомандаФормы.Действие                  = "ВыполнениеЗадачиПоУсловию";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
		
		НовыйПунктМеню = Элементы.Вставить("Кнопка_0",Тип("КнопкаФормы"), Элементы.АвтоКнопки);
		НовыйПунктМеню.ИмяКоманды			= "Команда_"+?(НаборЭтапов[1].Используется,"1","0");
		НовыйПунктМеню.Заголовок			= "Выполнить";
		НовыйПунктМеню.Картинка				= БиблиотекаКартинок.ВыполнитьЗадачу;
		НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
		НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
		
	Иначе
		
		ПодменюКоманд = Элементы.Вставить("ПодменюАвтоКоманд", Тип("ГруппаФормы"), Элементы.ПанельАвтоКнопок);
		ПодменюКоманд.Вид = ВидГруппыФормы.Подменю;
		//ПодменюКоманд.Заголовок = НСтр("ru = '       Выполнить       '");
		ПодменюКоманд.Заголовок = "   "+СтруктураВариантовВыполнения.ПредставлениеТочкиЗаголовок+"   ";
		ПодменюКоманд.ЦветФона = Новый Цвет(255, 225, 0);
		//ПодменюКоманд.Ширина = 15;
		
		Для Каждого ЭлементСписка Из СтруктураВариантовВыполнения.СписокВариантов Цикл
			НоваяКомандаФормы = Команды.Добавить("Команда_"+СокрЛП(Строка(ЭлементСписка.Значение)));
			НоваяКомандаФормы.Заголовок                 = ЭлементСписка.Представление;
			НоваяКомандаФормы.Действие                  = "ВыполнениеЗадачиПоУсловию";
			НоваяКомандаФормы.ИзменяетСохраняемыеДанные = Истина;
			
			НовыйПунктМеню = Элементы.Вставить("Кнопка_"+СокрЛП(Строка(ЭлементСписка.Значение)), Тип("КнопкаФормы"), ПодменюКоманд);
			НовыйПунктМеню.ИмяКоманды			= "Команда_"+СокрЛП(Строка(ЭлементСписка.Значение));
			НовыйПунктМеню.Заголовок			= ЭлементСписка.Представление;
			НовыйПунктМеню.Отображение			= ОтображениеКнопки.КартинкаИТекст;
			// { VOG RMV 2019-03-14 bugs 213
			//КнопкаПоУмолчанию					= ЭлементСписка.Пометка;
			//НовыйПунктМеню.КнопкаПоУмолчанию	= КнопкаПоУмолчанию;
			//НовыйПунктМеню.ТолькоВоВсехДействиях= Ложь;
			// } VOG RMV 2019-03-14 bugs 213
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтактныеЛицаПартнера(Партнер)
	
	 КонтактныеЛица = Новый СписокЗначений;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	КонтактныеЛицаПартнеров.Ссылка
	                |ИЗ
	                |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	                |ГДЕ
	                |	КонтактныеЛицаПартнеров.Владелец = &Владелец
	                |	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления";
	 
	 Запрос.УстановитьПараметр("Владелец",Партнер);
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
	 	 КонтактныеЛица.Добавить(Выборка.Ссылка);
			 
	 КонецЦикла;
	 
	 Возврат КонтактныеЛица;
	
 КонецФункции
 
&НаСервереБезКонтекста
Функция ВернутьКонтактноеЛицо(БизнесПроцесс)
	
	Если ЗначениеЗаполнено(БизнесПроцесс.КонтактноеЛицо) Тогда
		Возврат БизнесПроцесс.КонтактноеЛицо;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
// Функция возвращает список участников.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений	- Список участников.
//
Функция ПолучитьСписокУчастников()
	СписокУчастников = Новый СписокЗначений;
	Партнер = ВернутьПартнера(Объект.БизнесПроцесс);
	Если ЗначениеЗаполнено(Партнер) Тогда
		СписокУчастников.Добавить(Партнер);
	КонецЕсли;	
	КонтактноеЛицо = ВернутьКонтактноеЛицо(Объект.БизнесПроцесс);
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		СписокУчастников.Добавить(КонтактноеЛицо);
	Иначе
		Для Каждого КонтактноеЛицо Из ПолучитьКонтактныеЛицаПартнера(Партнер) Цикл
			СписокУчастников.Добавить(КонтактноеЛицо.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат СписокУчастников;
КонецФункции // ПолучитьСписокУчастников()

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если CRM_ЛицензированиеСервер.ВариантПоставкиСТАРТ() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Задача бизнес-процесса не доступна для варианта поставки  ""СТАРТ""!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Найти(Строка(Объект.БизнесПроцесс), НСтр("ru = '<Объект не найден>'")) > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'У пользователя нет доступа к этой задаче!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы = РегистрыСведений.CRM_ЗадачиПоИсправлениюКлиентскойБазы.ЭтоЗадачаПоИсправлениюКлиентскойБазы(Объект.Ссылка);
		Если ЗначениеЗаполнено(ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы) Тогда
			ЗаполнитьДеревоКлиенты();
			УстановитьЗаголовокСтраницыПартнеры();
			
			Элементы.Переместить(Элементы.ГруппаОписаниеРезультат, Элементы.СтраницаЗадача);
			Элементы.ПанельОсновная.Видимость = Истина;
			
			Если	ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы = Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.ДублированиеКлиентов
				Или	ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы = Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольПотенциалаКлиентов
				Или	ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы = Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольРегистрацииКлиентов Тогда
				//
				Элементы.ДеревоКлиентыЗавершено.Видимость = Истина;
			КонецЕсли;
			Если ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы = Перечисления.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольРегистрацииКлиентов Тогда
				Элементы.ДеревоКлиентыПартнер.Заголовок = НСтр("ru = 'События и электронные письма'");
				Элементы.ДеревоКлиентыТема.Видимость = Истина;
				Элементы.ДеревоКлиентыАдресОтправителя.Видимость = Истина;
				Элементы.ДеревоКлиентыКонтакт.Видимость = Истина;
				Элементы.ДеревоКлиентыКомандаОбновитьДеревоКлиентов.Видимость = Истина;
			Иначе
				Элементы.ДеревоКлиентыТема.Видимость = Ложь;
				Элементы.ДеревоКлиентыАдресОтправителя.Видимость = Ложь;
				Элементы.ДеревоКлиентыКонтакт.Видимость = Ложь;
				Элементы.ДеревоКлиентыКомандаОбновитьДеревоКлиентов.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ПанельОсновная.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ВариантВыполнения = Объект.CRM_ВариантВыполнения;
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		ДинамическиРассчитыватьСрокиВыполненияЭтапов = Объект.БизнесПроцесс.КартаМаршрута.ДинамическиРассчитыватьСрокиВыполненияЭтапов;
	КонецЕсли;
	ДобавлениеКнопокНаПанель();
	
	ДобавлениеКнопокНаПанельОбъектов();
	
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		НомерВерсииКартыМаршрута = Объект.БизнесПроцесс.НомерВерсииКартыМаршрута;
		НаселенныйПункт = Объект.БизнесПроцесс.НаселенныйПункт; //Павелко, CRM-298, 10.02.2020
	КонецЕсли;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	//ОписаниеТочкиМаршрута	= CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(Объект.Ссылка);
	ОписаниеБизнесПроцесса.Очистить();	
	
	Исполнитель = ПолучитьИсполнителя();
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		СписокВозможныхИсполнителей = ПолучитьВозможныхИсполнителейПоРоли(Исполнитель);
	Иначе
		СписокВозможныхИсполнителей = Новый списокЗначений;
		СписокВозможныхИсполнителей.Добавить(Исполнитель);
	КонецЕсли;
	
	СписокВозможныхИсполнителей.Добавить(Объект.БизнесПроцесс.Ответственный);
	// ++ VOG Солодов В.В. 19.08.2019 task 574
	СписокВозможныхИсполнителей.Добавить(Объект.БизнесПроцесс.Автор);
	// -- VOG Солодов В.В. 19.08.2019
	ДоступноПользователю = (НЕ СписокВозможныхИсполнителей.НайтиПоЗначению(ТекущийПользователь) = Неопределено);
	
	ТолькоПросмотр = (НЕ Объект.ПринятаКИсполнению ИЛИ НЕ ЗначениеЗаполнено(Объект.Исполнитель) ИЛИ Объект.Выполнена
								ИЛИ (ЗначениеЗаполнено(Объект.Исполнитель) И НЕ ДоступноПользователю));
	//
	// ++ VOG Солодов В.В. 15.08.2019 task 463
	ЗадачаОткрытаАссистентом(ДоступноПользователю);
	// -- VOG Солодов В.В. 15.08.2019
	
	// ++ VOG Солодов В.В. 05.09.2019 task 605
	ТекущийПользовательЯвляетсяДелегатом(ДоступноПользователю);
	// -- VOG Солодов В.В. 05.09.2019
	
	Если Элементы.ПанельОсновная.Видимость И ТолькоПросмотр Тогда
		Элементы.ДеревоКлиентыЗавершено.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ПринятьКИсполнению.Доступность = НЕ Объект.Выполнена И ДоступноПользователю;
	Если НЕ Объект.Выполнена ИЛИ ТекущийПользователь = Объект.БизнесПроцесс.Ответственный Тогда
		Элементы.Перенаправить.Доступность = Истина;
	КонецЕсли;
	
	Элементы.CRM_Итерация.Видимость				= (Объект.CRM_Итерация > 1);
	Элементы.ПринятьКИсполнению.Пометка	= Объект.ПринятаКИсполнению;
	
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		ЭтоПоручение				= (Объект.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение
			ИЛИ Объект.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПоручениеГрупповое // ++ VOG Солодов В.В. 21.08.2019 task 477 // Добавил условие
			И НЕ Объект.Исполнитель = Объект.БизнесПроцесс.Автор);
		ЭтоЗапросНаИзменениеСроков	= (Объект.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ЗапросНаИзменениеСроков);
		
		РедактироватьСрокВыполненияЗадач = Объект.БизнесПроцесс.КартаМаршрута.РедактироватьСрокВыполненияЗадач;
		Элементы.ФормаЗавершитьБизнесПроцессДосрочно.Видимость = Объект.БизнесПроцесс.КартаМаршрута.РазрешеноДосрочноеЗавершение;
		// Управление видимостью и доступностью поля дата исполнения.
		Элементы.ДатаИсполнения.ТолькоПросмотр	= НЕ Объект.БизнесПроцесс.КартаМаршрута.РедактироватьДатуВыполненияЗадач;
		Если Объект.БизнесПроцесс.КартаМаршрута.РедактироватьДатуВыполненияЗадач ИЛИ Объект.Выполнена Тогда
			Элементы.ДатаИсполнения.Видимость = Истина;
		Иначе
			Элементы.ДатаИсполнения.Видимость = Ложь;
		КонецЕсли;			
		БизнесПроцессСтрокой = Объект.БизнесПроцесс.Наименование;
	Иначе
		ЭтоПоручение = Ложь;
		РедактироватьСрокВыполненияЗадач = Ложь;
		Элементы.ДатаИсполнения.Видимость = Объект.Выполнена;
	КонецЕсли;	
		
	Элементы.ДатаОкончание.ТолькоПросмотр	= ЭтоПоручение ИЛИ НЕ РедактироватьСрокВыполненияЗадач;
	Элементы.ВремяОкончание.ТолькоПросмотр	= ЭтоПоручение ИЛИ НЕ РедактироватьСрокВыполненияЗадач;
	Элементы.ПеренестиСрок.Видимость		= ЭтоПоручение И РедактироватьСрокВыполненияЗадач И НЕ ЗначениеЗаполнено(Объект.CRM_ПеренестиСрокИсполненияНа);
	Элементы.ГруппаОтложитьЭтапДатаВыполнения.Видимость = НЕ ЭтоЗапросНаИзменениеСроков;
	Элементы.ДекорацияЗапросНаПереадресацию.Видимость = ЭтоПоручение;
	Если ЭтоПоручение Тогда
		СформироватьНадписьЗапросаНаИзменениеСрокаИсполнения();
	КонецЕсли;
	
	Элементы.ГруппаОтложить.Видимость					= ОпределитьВидимостьГруппыОтложить();
	Элементы.ГруппаОтложитьЭтапДатаВыполнения.Видимость	= (Элементы.ДатаИсполнения.Видимость ИЛИ Элементы.ГруппаОтложить.Видимость);
	
	Если Элементы.ДатаИсполнения.Видимость И НЕ Элементы.ГруппаОтложить.Видимость Тогда
		Элементы.ГруппаОтложитьЭтапДатаВыполнения.Заголовок = "Фактическая дата выполнения задачи";
		Элементы.ГруппаОтложитьЭтапДатаВыполнения.ЗаголовокСвернутогоОтображения = "Фактическая дата выполнения задачи";
	КонецЕсли;
	
	Если Объект.CRM_ТочкаМаршрута.Вид = Перечисления.CRM_ВидыТочекМаршрута.ВложенныйБизнесПроцесс Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_БизнесПроцесс.Ссылка
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|ГДЕ
		|	CRM_БизнесПроцесс.ВедущаяЗадача = &ВедущаяЗадача";
		Запрос.УстановитьПараметр("ВедущаяЗадача",Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ВложенныйБизнесПроцесс =  Выборка.Ссылка;
		Иначе
			ВложенныйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.ПустаяСсылка();
		КонецЕсли;
		
		ТолькоПросмотр = ЗначениеЗаполнено(ВложенныйБизнесПроцесс);
		Элементы.ИнформацияПоВложенномуБизнесПроцессу.Видимость	= ЗначениеЗаполнено(ВложенныйБизнесПроцесс);
		Элементы.Перенаправить.Доступность = НЕ ЗначениеЗаполнено(ВложенныйБизнесПроцесс);
		Если Объект.БизнесПроцесс.Ответственный = ТекущийПользователь Тогда
			Элементы.Перенаправить.Доступность = Истина;	
		КонецЕсли;
		//Элементы.ОтложитьДней.Доступность						= НЕ ЗначениеЗаполнено(ВложенныйБизнесПроцесс);
		//Элементы.ОтложитьЧасов.Доступность						= НЕ ЗначениеЗаполнено(ВложенныйБизнесПроцесс);
		//Элементы.ОтложитьМинут.Доступность						= НЕ ЗначениеЗаполнено(ВложенныйБизнесПроцесс);
	Иначе
		Элементы.ИнформацияПоВложенномуБизнесПроцессу.Видимость = ложь;
	КонецЕсли;
		
	ПолучитьСписокОбъектовПоБизнесПроцессу();
	
	ЗаполнитьДанныеФормыСервер();
	
	ОтрисоватьКатегорииНаФорме();
	
	ИспользоватьДатуИВремяВСрокахЗадач	= ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.ВремяНачало.Видимость		= ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.ВремяОкончание.Видимость	= ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.ДекорацияВыбратьГруппу.Доступность = Объект.ПринятаКИсполнению;
	
	ПоказатьПанельИнформации = CRM_ХранилищеНастроек.Загрузить("ПоказыватьСкрыватьПанельИнформацииЗадачаБП"); 
	Если НЕ ЗначениеЗаполнено(ПоказатьПанельИнформации) Тогда
		ПоказатьПанельИнформации = Истина;
	КонецЕсли;		
	Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка = ПоказатьПанельИнформации;
	Элементы.ГруппаИстория.Видимость		= ПоказатьПанельИнформации;
	Если ПоказатьПанельИнформации тогда
		ОписаниеТочкиМаршрута	= CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(Объект.Ссылка);
	КонецЕсли;
	
	Элементы.ФормаПозвонить.Видимость = сфпСофтФонПроСервер.сфпИспользоватьСофтФон();	
		
	//ВОГ ++
	Элементы.вогГруппаРаспределениеЗадач.Доступность = НЕ ТолькоПросмотр;
	//ВОГ --
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("Объект", Объект);
	CRM_УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	//+вог
	СформироватьПредставлениеПовестки();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПолучитьПараметрыНастройкиБизнесПроцессов();
	КонецЕсли;
	//+вог
	
	#Область ВОГ_0000117
	//При распределении задач.
	//Если в Головном поручении есть связанные клиенты, номенклатура, коллекцци, то светить их и в распределенных поручениях
	
	//Возможно у пользователя нет прав на головную задачу и ее бизнес-процесс
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыБП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БизнесПроцесс,
		Новый Структура ("Предмет,ГлавнаяЗадача,ГлавныйБП","Предмет","ГлавнаяЗадача","ГлавнаяЗадача.БизнесПроцесс"));
		Если ТипЗнч(РеквизитыБП.Предмет) = Тип("ДокументСсылка.вогРаспределениеЗадач") Тогда 
		//Нет дин. списков
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокКлиентов,    "Процесс", РеквизитыБП.ГлавныйБП);
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокНоменклатуры,"Процесс", РеквизитыБП.ГлавныйБП);
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокКоллекций,   "Процесс", РеквизитыБП.ГлавныйБП);
		//Элементы.СписокКлиентов.ТолькоПросмотр = Истина;
		//Элементы.СписокКлиентов.ТолькоПросмотр = Истина;
		//Элементы.СписокКлиентов.ТолькоПросмотр = Истина;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	#КонецОбласти 	
	//-вог

	// Данная строка должна быть в самом конце процедуры.
	Элементы.Перенаправить.Доступность = НЕ ТолькоПросмотр;
	Если Элементы.Найти("РедактироватьСоставДополнительныхРеквизитов")<>Неопределено Тогда
		Элементы.РедактироватьСоставДополнительныхРеквизитов.Видимость = Ложь;
	КонецЕсли;
	
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.БизнесПроцесс);
	
	//Кайдашов 14/06/19 добавил вывод Предмета из БП
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) тогда
		ПредметБизнесПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БизнесПроцесс,"Предмет",Истина);
		Попытка
			ПредметБизнесПроцесса.ПолучитьОбъект();
		Исключение
			ПредметБизнесПроцесса = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ЗаблокироватьРедактированиеРеквизитов(); //VOG Ульянов И.В. 03.02.2020 CRM-264
	
КонецПроцедуры

Функция ОпределитьВидимостьГруппыОтложить()
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(Объект.БизнесПроцесс.Ссылка);
	НаборЭтапов.Отбор.ТочкаМаршрута.Установить(Объект.CRM_ТочкаМаршрута);
	НаборЭтапов.Прочитать();
	
	Возврат НЕ НаборЭтапов[0].ОтложитьНачалоЭтапаДоступно;
	
КонецФункции

&НаСервере
Процедура СформироватьНадписьЗапросаНаИзменениеСрокаИсполнения()
	
	Если ЗначениеЗаполнено(Объект.CRM_ПеренестиСрокИсполненияНа) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВедущаяЗадача",Объект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_БизнесПроцесс.Ссылка КАК БизнесПроцесс,
		|	ЗадачаИсполнителя.Ссылка КАК Задача
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО CRM_БизнесПроцесс.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
		|ГДЕ
		|	НЕ CRM_БизнесПроцесс.Завершен
		|	И CRM_БизнесПроцесс.ВедущаяЗадача = &ВедущаяЗадача
		|	И НЕ ЗадачаИсполнителя.Выполнена";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Элементы.ДекорацияЗапросНаПереадресацию.Заголовок = НСтр("ru = 'Отправлен запрос на перенос срока исполнения. Новый срок: '") + 
																Формат(Объект.CRM_ПеренестиСрокИсполненияНа,"ДФ='дд.ММ.гг ЧЧ:мм'") +
																НСтр("ru = '. Ответственный: '") + Строка(Выборка.Задача.Исполнитель);
		Иначе
			Элементы.ДекорацияЗапросНаПереадресацию.Заголовок = "";
		КонецЕсли;
	Иначе
		Элементы.ДекорацияЗапросНаПереадресацию.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если CRM_УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	БизнесПроцессыИЗадачиКлиент.ФормаЗадачиОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	СсылкаНаОбъект = Неопределено;
	Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
		СсылкаНаОбъект = Параметр;
	ИначеЕсли ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("СсылкаНаОбъект") Тогда	
		СсылкаНаОбъект = Параметр.СсылкаНаОбъект;
	КонецЕсли; 
	
	Если ИмяСобытия = "ОбновленыДанныеЭлектронногоПисьмаВходящего" Или ИмяСобытия = "ОбновленыДанныеТелефонногоЗвонка" Тогда
		СсылкаНаОбъект = Параметр;
	КонецЕсли;		

	Если Элементы.ПанельОсновная.Видимость Тогда
		Если	(ИмяСобытия = "ЗаписьПартнера" Или ИмяСобытия = "НовоеКонтактноеЛицоЗаписано"
				Или ((ИмяСобытия = "ОбновленыДанныеСобытия" Или ИмяСобытия = "ОбновленыДанныеЭлектронногоПисьмаВходящего" Или ИмяСобытия = "ОбновленыДанныеТелефонногоЗвонка") 
				И ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольРегистрацииКлиентов")))
			И	ЗначениеЗаполнено(СсылкаНаОбъект)
			И	ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы <> ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПроверкиКлиентскойБазы.ДублированиеКлиентов") Тогда
			//
			Если ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПроверкиКлиентскойБазы.КонтрольРегистрацииКлиентов") Тогда
				ОбновитьДеревоКлиенты(СсылкаНаОбъект, Истина);
			Иначе
				ОбновитьДеревоКлиенты(СсылкаНаОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗадачаПеренаправлена" И ТипЗнч(Параметр.МассивЗадач) = Тип("Массив") И (НЕ Параметр.МассивЗадач.Найти(Объект.Ссылка) = Неопределено) Тогда
		Закрыть();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписанНовыйЗвонок" И ТипЗнч(Параметр) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И Параметр = Объект.Ссылка Тогда
		
		ОбработатьОповещенияЗаписиНовогоОбъекта(Источник);
		
	КонецЕсли;
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.БизнесПроцесс = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередВыполнением(Отказ)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Не ПроверитьНаКорректность() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Если ЭтотОбъект.Модифицированность Тогда
	//	CRM_ОповещенияСервер.УдалитьОповещения(ТекущийОбъект.Ссылка);
	//	ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(ТекущийОбъект.Исполнитель, Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи, ТекущийОбъект.Ссылка);
	//	
	//	Если Не ПараметрыОповещения = Неопределено Тогда
	//	
	//		CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);	
	//	
	//	КонецЕсли; 
	//	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		
	Если ИзмененСрокИсполнения Тогда
		
		ПересчитатьСрокиИсполнения();
		ИзмененСрокИсполнения = Ложь;
		
		Оповестить("СкорректированыСрокиИсполнения", Объект.БизнесПроцесс);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
		Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Неопределено, Параметры.ОбновлятьКалендарь), ЭтотОбъект);
	КонецЕсли;
	
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	
	Оповестить("ОбновитьПланировщик");
	
	Оповестить("ЗаписаныДопРеквизитыИзЗадачи",Объект.БизнесПроцесс,Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ОбработатьОповещенияЗаписиНовогоОбъекта(НовыйОбъект);
	
КонецПроцедуры

#Область ПроцедурыДействияКомандныхПанелейФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Записать();
	Закрыть();
КонецПроцедуры

// Обработчик нажатия генерируемых кнопок вариантов завершения задачи.

&НаКлиенте
Процедура ВыполнениеЗадачиПоУсловию(Кнопка)
	
	ВариантПоКнопке = СтрЗаменить(Кнопка.Имя, "Команда_", "");
	Объект.CRM_ВариантВыполнения		= Число(ВариантПоКнопке);
	Объект.CRM_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(Объект.CRM_ТочкаМаршрута, Число(ВариантПоКнопке), НомерВерсииКартыМаршрута);
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(Объект.Ссылка);
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВыполнениеЗадачиПоУсловиюЗавершение", ЭтотОбъект);
	Если СписокТочекМаршрута.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута", Объект.БизнесПроцесс, СписокТочекМаршрута);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗадачуПродолжение", ЭтотОбъект, ОписаниеОповещенияЗавершение);
		ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	ВыполнитьЗадачуПродолжение(Истина, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры // ВыполнениеЗадачиПоУсловию()

&НаКлиенте
Процедура ВыполнениеЗадачиПоУсловиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат.ЗавершенДосрочно = Ложь;
		Результат.Вставить("Задача"					,Объект.Ссылка);
		Результат.Вставить("ЭтапДосрочногоЗавершения"	,ПредопределенноеЗначение("Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка"));
		CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(Результат);
	КонецЕсли;
	
	ПродолжитьВыполнение = Истина;
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		
		ТекстОшибки = "";
		//Проверим не работате ли кто-то с ведущей задачей если она есть
		Результат = CRM_БизнесПроцессыИЗадачиВызовСервера.ЗаблокироватьДанныеДляРедактированияВедущейЗадачи(Объект.БизнесПроцесс, ПродолжитьВыполнение);
		Если НЕ ПродолжитьВыполнение Тогда
			ТекстПредупреждения = НСтр("ru = 'Невозможно выполнить, так как задача: '") + Результат.ПредставлениеЗадачи + НСтр("ru = ' редактируется '") + Результат.ТекстОшибки;
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
	Если ПродолжитьВыполнение Тогда
		CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Объект.Ссылка,,?(ЗначениеЗаполнено(ОтложитьНаДату),ОтложитьНаДату,Неопределено));
		
		// Если был отправлен запрос на перенос срока исполнения,
		// то надо автоматически завершить задачу по запросу. т.к. она стала  неактуальной.
		Если ЗначениеЗаполнено(Объект.CRM_ПеренестиСрокИсполненияНа) Тогда
			CRM_БизнесПроцессыСервер.ПолучитьЗадачиПоЗапросуВыполнить(Объект.Ссылка);
		Конецесли;
		
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Задача выполнена'"),
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка));
		
		Оповестить("ЗадачаВыполнена", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Объект.Ссылка, Параметры.ОбновлятьКалендарь));
		
		Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
		
		СписокНеСтартованныхБП = CRM_БизнесПроцессыСервер.ПолучитьРезультатВыполнения(Объект.Ссылка);
		
		Для Каждого ЭлементСписка Из СписокНеСтартованныхБП Цикл
			ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта", 
				Новый Структура("Ключ", ЭлементСписка.Значение));
		КонецЦикла;
		
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ВыполнениеЗадачиПоУсловию()

&НаКлиенте
Процедура ВыполнитьЗадачуБезУсловия(Команда)
	
	Если НЕ Объект.CRM_ВариантВыполнения = ВариантВыполнения Тогда
		Объект.CRM_ВариантВыполнения		= ВариантВыполнения;
		Объект.CRM_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(Объект.CRM_ТочкаМаршрута, ВариантВыполнения, НомерВерсииКартыМаршрута);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(Объект.Ссылка);
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВыполнитьЗадачуБезУсловияЗавершение", ЭтотОбъект);
	Если СписокТочекМаршрута.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута", Объект.БизнесПроцесс, СписокТочекМаршрута);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗадачуПродолжение", ЭтотОбъект, ОписаниеОповещенияЗавершение);
		ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	ВыполнитьЗадачуПродолжение(Истина, ОписаниеОповещенияЗавершение);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьЗадачуПродолжение(Результат, ОписаниеОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокОбязательныхТипов.Количество() > 0 Тогда
		МассивОшибок = CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(Объект.Ссылка, СписокОбязательныхТипов);
		Если МассивОшибок.Количество() > 0 Тогда
			Для Индекс = 0 По МассивОшибок.ВГраница() Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивОшибок[Индекс]);
			КонецЦикла;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Если бизнес-процесс далее завершается неудачно, то возможно надо указать причину.
	Если CRM_БизнесПроцессыСервер.ПриведетКНеудачномуЗавершению(Объект.БизнесПроцесс, Объект.CRM_ТочкаМаршрута, Объект.CRM_ВариантВыполнения) Тогда
		
		ФормаДосрочногоЗавершения = ПолучитьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения",,ЭтотОбъект);
		ФормаДосрочногоЗавершения.Заголовок = НСтр("ru = 'Неудачное завершение бизнес-процесса'");
		ФормаДосрочногоЗавершения.Элементы.ПричинаНеудачногоЗавершения.Заголовок = НСтр("ru = 'Причина неудачного завершения'");
		ФормаДосрочногоЗавершения.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаДосрочногоЗавершения.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаДосрочногоЗавершения.Открыть();
		Возврат;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);

КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьЗадачуБезУсловияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат.ЗавершенДосрочно = Ложь;
		Результат.Вставить("Задача"					,Объект.Ссылка);
		Результат.Вставить("ЭтапДосрочногоЗавершения"	,ПредопределенноеЗначение("Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка"));
		CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(Результат);
	КонецЕсли;
	
	CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Объект.Ссылка,,?(ЗначениеЗаполнено(ОтложитьНаДату),ОтложитьНаДату,Неопределено));
	ПоказатьОповещениеПользователя(
	НСтр("ru = 'Задача выполнена'"),
	ПолучитьНавигационнуюСсылку(Объект.Ссылка),
	Строка(Объект.Ссылка));
	
	Оповестить("ЗадачаВыполнена", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Объект.Ссылка, Параметры.ОбновлятьКалендарь));
	
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	
	СписокНеСтартованныхБП = CRM_БизнесПроцессыСервер.ПолучитьРезультатВыполнения(Объект.Ссылка);
	
	Для Каждого ЭлементСписка Из СписокНеСтартованныхБП Цикл
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта", 
			Новый Структура("Ключ", ЭлементСписка.Значение));
	КонецЦикла;
	
	Закрыть();
	
КонецПроцедуры	

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	Если НЕ Объект.ПринятаКИсполнению Тогда
		
		CRM_БизнесПроцессыИЗадачиКлиент.ПринятьЗадачуКИсполнению(ЭтотОбъект, ТекущийПользователь);
		ПринятьКИсполнениюЗавершение(Неопределено, Неопределено);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПринятьКИсполнениюЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Задача уже принята к исполнению. Отменить?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнениюЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		CRM_БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачиКИсполнению(ЭтотОбъект);
	КонецЕсли;
	
	Элементы.ПринятьКИсполнению.Пометка = Объект.ПринятаКИсполнению;
	
	Исполнитель				= ПолучитьИсполнителя();
	Если Элементы.ГруппаИстория.Видимость тогда
		ОписаниеТочкиМаршрута	= CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(Объект.Ссылка);
	КонецЕсли;
	
	бТолькоПросмотр = (НЕ Объект.ПринятаКИсполнению ИЛИ НЕ ЗначениеЗаполнено(Объект.Исполнитель) ИЛИ ЗначениеЗаполнено(ВложенныйБизнесПроцесс));
	
	Элементы.ДекорацияВыбратьГруппу.Доступность = Не бТолькоПросмотр;
	
	ТолькоПросмотр				= бТолькоПросмотр;
	
	Если Элементы.ПанельОсновная.Видимость Тогда
		Элементы.ДеревоКлиентыЗавершено.ТолькоПросмотр = бТолькоПросмотр;
	КонецЕсли;
	
	Элементы.Перенаправить.Доступность	= НЕ бТолькоПросмотр;	
	
	//ВОГ ++
	Элементы.вогГруппаРаспределениеЗадач.Доступность = НЕ бТолькоПросмотр;
	//ВОГ --
	
	ЗаблокироватьРедактированиеРеквизитов(); //VOG Ульянов И.В. 03.02.2020 CRM-264
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
	//Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьЗапросНаПереносСрокаИсполнения(ТекстПричиныПереноса)
	
	CRM_БизнесПроцессыСервер.ОтправитьЗапросНаПереносСрокаИсполнения(Объект.Ссылка, ТекстПричиныПереноса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСрок(Команда)
	
	ПараметрыФормы = Новый Структура("ДатаОкончание, ВремяОкончание, ИспользоватьДатуИВремяВСрокахЗадач",ДатаОкончание,ВремяОкончание,ИспользоватьДатуИВремяВСрокахЗадач);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиСрокЗавершение", ЭтотОбъект);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПереносаСрокаЗадачи",ПараметрыФормы,ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСрокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Объект.CRM_ПеренестиСрокИсполненияНа = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(Результат.ДатаОкончание, Результат.ВремяОкончание);
		
		ТекстПричиныПереноса = Символы.ПС + Символы.ПС + Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ='дд.ММ.гг ЧЧ:мм'") + НСтр("ru = ' отправлен запрос на перенос срока исполнения задачи на %ДатаСрока%Причина переноса: %Причина%'");
		ТекстПричиныПереноса = СтрЗаменить(ТекстПричиныПереноса, "%ДатаСрока%", Формат(Объект.CRM_ПеренестиСрокИсполненияНа,?(ИспользоватьДатуИВремяВСрокахЗадач,"ДФ='дд.ММ.гг ЧЧ:мм'","ДФ='дд.ММ.гг'")) + Символы.ПС);
		ТекстПричиныПереноса = СтрЗаменить(ТекстПричиныПереноса, "%Причина%", Результат.Причина);
		
		Объект.РезультатВыполнения = Объект.РезультатВыполнения + Символы.ПС + ТекстПричиныПереноса;
		
		Попытка
			Записать();
			
			ОтправитьЗапросНаПереносСрокаИсполнения(ТекстПричиныПереноса);
			СформироватьНадписьЗапросаНаИзменениеСрокаИсполнения();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьБизнесПроцессДосрочно(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьБизнесПроцессДосрочноЗавершение", ЭтотОбъект);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения",,ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьБизнесПроцессДосрочноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		Объект.CRM_ЗавершенДосрочно	= истина;
		Объект.CRM_Неудача			= истина;
		
		Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
			Записать();
		КонецЕсли;
		
		CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Объект.Ссылка);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Задача выполнена'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка), Строка(Объект.Ссылка));
		
		Оповестить("ЗадачаВыполнена", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Объект.Ссылка, 2));
		
		Результат.Вставить("Задача"					,Объект.Ссылка);
		Результат.Вставить("ЭтапДосрочногоЗавершения"	,Объект.CRM_ТочкаМаршрута);
		CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(Результат);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДеревоКлиентов(Команда)
	ОбновитьДеревоКлиенты(Неопределено, Истина);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "Позвонить".
//
Процедура Позвонить(Команда)
	#Если Вебклиент Тогда
	Состояние(Нстр("ru = 'Работа СофтФона невозможна в web-клиенте!'"));
	#Иначе
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
		Возврат;
	КонецЕсли;	
	СписокОбъектов = ПолучитьСписокУчастников();
	Если СписокОбъектов.Количество() > 0 Тогда
		сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов);			
	КонецЕсли;	
	#КонецЕсли
КонецПроцедуры // Позвонить()

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НадписьБизнесПроцессОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", Объект.БизнесПроцесс);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТочкиМаршрутаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		Если Найти(ДанныеСобытия.href,"e1cib") > 0 Тогда
			НавСсылка = Сред(ДанныеСобытия.href,Найти(ДанныеСобытия.href,"e1cib"));
			Попытка
				ПерейтиПоНавигационнойСсылке(НавСсылка);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОткрытьФормуБизнесПроцессаНажатие(Элемент)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", ВложенныйБизнесПроцесс);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПоБизнесПроцессамПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ОбъектыПоБизнесПроцессам.ТекущиеДанные;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("БизнесПроцесс",ТекДанные.БизнесПроцесс);
	СтруктураДанных.Вставить("Задача",ТекДанные.Задача);
	СтруктураДанных.Вставить("ТочкаМаршрута",ТекДанные.ТочкаМаршрута);
	СтруктураДанных.Вставить("Объект",ТекДанные.Объект);
	
	УдалитьЗаписьПоОбъекту(СтруктураДанных);
	// Обновляем описание БП в поле "История".
	Если Элементы.ГруппаИстория.Видимость тогда
		ОписаниеТочкиМаршрута	= CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПоБизнесПроцессамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалаПриИзменении(Элемент)
	СкорректироватьДатыЗадачи(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончанияПриИзменении(Элемент)
	
	СкорректироватьДатыЗадачи(Ложь);
	Если ДинамическиРассчитыватьСрокиВыполненияЭтапов Тогда
		ИзмененСрокИсполнения = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("Данные", "ВремяОкончание");
	Дополнительно.Вставить("ПриоритетДатыНачала", Ложь);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяНачало, Элемент,,, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("Данные", "ВремяНачало");
	Дополнительно.Вставить("ПриоритетДатыНачала", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	Если НачалоДня(ДатаНачало) = НачалоДня(ДатаОкончание) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент, ВремяНачало, Истина, ОписаниеОповещения);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент,,, ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура обработки выбора времени из списка.
//
Процедура ОбработкаОповещенияВыбранногоВремени(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ЭтотОбъект[Дополнительно.Данные] = ВыбранноеВремя.Значение;
		СкорректироватьДатыЗадачи(Дополнительно.ПриоритетДатыНачала);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатие(Элемент)
	
	МассивКатегорий = Новый Массив();
	Для Каждого КатегорияСтрока Из Объект.CRM_Категории Цикл
		МассивКатегорий.Добавить(КатегорияСтрока.Категория);
	КонецЦикла;
	
	СтруктураОписаниеКатегорий = Новый Структура("МассивКатегорий,ОсновнаяКатегория,Владелец", МассивКатегорий, Объект.CRM_ОсновнаяКатегория, Объект.Исполнитель);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияВыбратьГруппуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыборКатегорий", Новый Структура("ОписаниеКатегорий", СтруктураОписаниеКатегорий),
		ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Модифицированность = Истина;
		
		Объект.CRM_Категории.Очистить();
		Для Каждого СтрокаКатегория Из Результат.СписокВыбранныеКатегории Цикл
			НоваяСтрока = Объект.CRM_Категории.Добавить();
			НоваяСтрока.Категория = СтрокаКатегория.Значение;
		КонецЦикла;
		Объект.CRM_ОсновнаяКатегория = Результат.ОсновнаяКатегория;
		
		ОтрисоватьКатегорииНаФорме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаСегодня(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНа", ЭтотОбъект, "ПеренестиНаСегодня");
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНа(Продолжать, ПеренестиНа) Экспорт
	Если Продолжать Тогда
		ПеренестиЗадачуНаКлиенте(ПеренестиНа);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаЗавтра(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНа", ЭтотОбъект, "ПеренестиНаЗавтра");
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНа3Дня(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНа", ЭтотОбъект, "ПеренестиНа3Дня");
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаНеделю(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНа", ЭтотОбъект, "ПеренестиНаНеделю");
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаДату(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНаДатуПродолжение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаДатуПродолжение(Продолжать, ДополнительныеПараметры) Экспорт
	Если Продолжать Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиНаДатуЗавершение", ЭтотОбъект);
		ПоказатьВводДаты(ОписаниеОповещения, ТекущаяДата(), НСтр("ru = 'Перенести на дату'"), ЧастиДаты.Дата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаДатуЗавершение(ДатаПереноса, ДополнительныеПараметры) Экспорт
	Если ДатаПереноса <> Неопределено Тогда
		ПеренестиЗадачуНаКлиенте("ПеренестиНаДату", ДатаПереноса);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКлиентыЗавершеноПриИзменении(Элемент)
	ТекДанные = Элементы.ДеревоКлиенты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	СтруктураКлюч = Новый Структура("БизнесПроцесс,Исполнитель,Контролер,Партнер,Завершено");
	ЗаполнитьЗначенияСвойств(СтруктураКлюч, ТекДанные);
	Если ЗначениеЗаполнено(ТекДанные.Реквизит) Тогда
		СтруктураКлюч.Вставить("Реквизит", ТекДанные.Реквизит);
		СтруктураКлюч.Партнер = ТекДанные.ПолучитьРодителя().Партнер;
	КонецЕсли;
	
	Если Не ДеревоКлиентовЗавершеноПриИзмененииНаСервере(СтруктураКлюч, ТекДанные.Завершено) Тогда
		ТекДанные.Завершено = Не ТекДанные.Завершено;
	Иначе
		Если ВидКонтроляЗадачиПоИсправлениюКлиентскойБазы = ПредопределенноеЗначение("Перечисление.CRM_ВидыМастераПроверкиКлиентскойБазы.ДублированиеКлиентов") Тогда
			СтрокиПартнерыДубли = ТекДанные.ПолучитьЭлементы();
			Для Каждого СтрокаПартнерДубль Из СтрокиПартнерыДубли Цикл
				СтрокаПартнерДубль.Завершено = ТекДанные.Завершено;
				СтрокиРеквизиты = СтрокаПартнерДубль.ПолучитьЭлементы();
				Для Каждого СтрокаРеквизит Из СтрокиРеквизиты Цикл
					СтрокаРеквизит.Завершено = ТекДанные.Завершено;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		УстановитьЗаголовокСтраницыПартнеры();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКлиентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ДеревоКлиенты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекДанные.Партнер) Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
		ПараметрыСтруктура = Новый Структура("Ключ", ТекДанные.Партнер);
		ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", ПараметрыСтруктура, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ТекДанные.Партнер) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ПараметрыСтруктура = Новый Структура("Ключ", ТекДанные.Партнер);
		ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", ПараметрыСтруктура, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ТекДанные.Партнер) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		ПараметрыСтруктура = Новый Структура("Ключ,СпозиционироватьсяНаРеквизите", ТекДанные.Партнер, "АбонентКонтакт");
		ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", ПараметрыСтруктура, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ТекДанные.Партнер) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ПараметрыСтруктура = Новый Структура("Ключ", ТекДанные.Партнер);
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.ФормаОбъекта", ПараметрыСтруктура, ЭтотОбъект);
	Иначе
		ТекРодитель = ТекДанные.ПолучитьРодителя();
		Если ТекРодитель <> Неопределено Тогда
			ПараметрыСтруктура = Новый Структура("Ключ", ТекРодитель.Партнер);
			Если ТипЗнч(ТекДанные.Партнер) = Тип("Строка") И ЗначениеЗаполнено(ТекДанные.Реквизит) Тогда
				ПараметрыСтруктура.Вставить("СпозиционироватьсяНаРеквизите", ТекДанные.Реквизит);
			Иначе
				ПараметрыСтруктура.Вставить("СпозиционироватьсяНаРеквизите", ТекДанные.Партнер);
			КонецЕсли;
			Если ТипЗнч(ТекРодитель.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
				ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", ПараметрыСтруктура, ЭтотОбъект);
			ИначеЕсли ТипЗнч(ТекРодитель.Партнер) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", ПараметрыСтруктура, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоручение(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьПоручениеЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоручениеЗавершение(Продолжать, ДополнительныеПараметры) Экспорт
	
	Если Продолжать Тогда
		СтруктураОснования = Новый Структура("Основание,КартаМаршрута",Объект.Ссылка,ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
		ДанныеЗаполнения = Новый Структура("Основание",СтруктураОснования);
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ДанныеЗаполнения, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСкрыватьДопИнформацию(Команда)
	Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка = НЕ Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка;
	Элементы.ГруппаИстория.Видимость = Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка;
	Если Элементы.ГруппаИстория.Видимость тогда
		ОписаниеТочкиМаршрута	= CRM_БизнесПроцессыПереопределяемый.СформироватьОписаниеЗадачи(Объект.Ссылка);
	КонецЕсли;
	CRM_ХранилищеНастроек.Сохранить("ПоказыватьСкрыватьПанельИнформацииЗадачаБП",,Элементы.ПоказыватьСкрыватьПанельИнформации.Пометка); 
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьНачалоЭтапаПриИзменении(Элемент)
	
	Если ОтложитьНачалоЭтапаДней = 0 И ОтложитьНачалоЭтапаЧасов = 0 И ОтложитьНачалоЭтапаМинут = 0 Тогда
		ОтложитьНаДату = Дата("00010101");
	Иначе
		ОтложитьНаДату = НачалоДня(ТекущаяДата()) + (ОтложитьНачалоЭтапаДней*86400) + (ОтложитьНачалоЭтапаЧасов*3600) + (ОтложитьНачалоЭтапаМинут*60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьНачалоЭтапаДнейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтотОбъект, );
		ПоказатьВводДаты(Оповещение, ?(ЗначениеЗаполнено(ОтложитьНаДату),ОтложитьНаДату,ТекущаяДата()), "Укажите дату", ЧастиДаты.Дата);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораДаты(ВыбраннаяДата, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		Если ВыбраннаяДата < ТекущаяДата() Тогда
			ТекстСообщения = НСтр("ru = 'Укажите дату больше или равную текущей!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ОтложитьНаДату			= ВыбраннаяДата + (ОтложитьНачалоЭтапаЧасов*3600) + (ОтложитьНачалоЭтапаМинут*60);
			ОтложитьНачалоЭтапаДней	= (ДеньГода(ВыбраннаяДата) - ДеньГода(ТекущаяДата()));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьНаДатуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораДаты", ЭтотОбъект, );
	ПоказатьВводДаты(Оповещение, ?(ЗначениеЗаполнено(ОтложитьНаДату),ОтложитьНаДату,ТекущаяДата()), "Укажите дату", ЧастиДаты.Дата);
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	CRM_УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	//+вог
	ПолучитьПараметрыНастройкиБизнесПроцессов();
	
	//>>Бей(27.05.2019 12:45:05):#176
	
	// ++ VOG Солодов В.В. 23.08.2019 task 477
	Если ТекущийОбъект.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПоручениеГрупповое Тогда
		вогОбъектыДляПроцессаСервер.ПрочитатьСвязанныеДанные(ЭтаФорма, ТекущийОбъект.БизнесПроцесс);
	Иначе
		вогОбъектыДляПроцессаСервер.ПрочитатьСвязанныеДанные(ЭтаФорма, ТекущийОбъект.Ссылка);
	КонецЕсли;
	// До изменения
	//вогОбъектыДляПроцессаСервер.ПрочитатьСвязанныеДанные(ЭтаФорма, ТекущийОбъект.Ссылка);
	// -- VOG Солодов В.В. 23.08.2019
	
	//Описание
	//Если Не ПараметрыНастройкиБизнесПроцессов.Повестка Тогда
		Описание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.БизнесПроцесс, "Описание");		
	//КонецЕсли;	
	//-вог	
	//<<Бей(28.05.2019 9:21:28):#176
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	CRM_УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	//>>Бей(28.05.2019 16:07:40):#176
	
	вогОбъектыДляПроцессаСервер.ЗаписатьСвязанныеДанные(ТекущийОбъект.БизнесПроцесс, ЭтаФорма);

	//<<Бей(28.05.2019 16:07:45):#176
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	CRM_УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеВложений()
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.БизнесПроцесс);
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.БизнесПроцесс);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);	
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтотОбъект,
	             Ложь,
	             Неопределено);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ОтправитьEmailКлиент".
//
Процедура ОтправитьEmailКлиент(Команда)
	
	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ОтправитьСМСКЛ".
//
Процедура ОтправитьСМСКЛ(Команда)
	
	Партнер			= ВернутьПартнера(Объект.БизнесПроцесс);
	КонтактноеЛицо	= ВернутьКонтактноеЛицо(Объект.БизнесПроцесс);
	
	Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) И НЕ ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска	= Новый Структура;
	СтруктураПоиска.Вставить("Партнер",			Партнер); 
	СтруктураПоиска.Вставить("КонтактноеЛицо",	КонтактноеЛицо); 
	СписокТелефонов	= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	
	Если СписокТелефонов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона'"));
		Возврат;
	ИначеЕсли НЕ ОтправкаSMSЧерезSMS4B.ИспользоватьSMS4B() Тогда
		CRM_ОбщегоНазначенияКлиент.ОткрытьФормуОшибкиПодключения("СМС");
		Возврат;
	ИначеЕсли НЕ ОтправкаSMSЧерезSMS4B.НастройкаОтправкиSMSВыполнена() Тогда
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОткрытияФормыНастроек", ЭтотОбъект);
		ПоказатьВопрос(ОП, "Отправка SMS невозможна так как не установлены параметры подключения.
						|Открыть форму настроек?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	Если СписокТелефонов.Количество() = 1 Тогда
		ОтправитьСМСКЛЗавершение(СписокТелефонов[0].Значение, КонтактноеЛицо);
	Иначе	
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьСМСКЛЗавершение", ЭтотОбъект, КонтактноеЛицо);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокТелефонов, Элементы.ОтправитьСМСКЛ);
	КонецЕсли;
	
КонецПроцедуры // ОтправитьСМСКЛ()

&НаКлиенте
Процедура ОтправитьСМСКЛЗавершение(Телефон, КонтактноеЛицо) Экспорт
	
	Если Телефон = Неопределено Тогда Возврат; КонецЕсли;
	
	Структура = Новый Структура();
	Структура.Вставить("Ссылка", Телефон.Значение.Объект);
	Структура.Вставить("Телефон",	ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Телефон.Значение.НомерТелефона));
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", Структура);
	ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры // ОтправитьСМСКЛ()

#КонецОбласти

#КонецОбласти

//+вог
#Область Повестка

&НаСервере
Процедура СформироватьПредставлениеПовестки()
	
	Повестка = Объект.БизнесПроцесс.вогПовестка;
	Если Повестка.Количество() = 0 Тогда
		ПовесткаПредставление = НСтр("ru = 'Нет пунктов...'");
		Возврат;
	КонецЕсли;		
	
	ПовесткаПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 пункт(ов).'"), Повестка.Количество());
			
КонецПроцедуры // СформироватьПредставлениеПовестки()			 

&НаКлиенте
Процедура ПовесткаПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	Оповещение = Новый ОписаниеОповещения("ПослеРедактированияПовестки", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументСсылка"	   , Объект.БизнесПроцесс);
	ПараметрыФормы.Вставить("ТекущийСоставПовестки", СформироватьТекущийСоставПовестки());
	ПараметрыФормы.Вставить("РежимВвода"		   , "ТолькоОтветы");
	
	ОткрытьФорму("ОбщаяФорма.вогФормаРедактированияПовестки",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияПовестки(РезультатРедактирования, Контекст) Экспорт
	
	Если РезультатРедактирования = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;
	
	ПослеРедактированияПовесткиСервер(РезультатРедактирования);	
	
КонецПроцедуры // ПослеРедактированияПовестки()

&НаСервере
Процедура ПослеРедактированияПовесткиСервер(РезультатРедактирования)
	
	НачатьТранзакцию();
	
	БизнесПроцессОбъект = Объект.БизнесПроцесс.ПолучитьОбъект();
	БизнесПроцессОбъект.Заблокировать();
	
	БизнесПроцессОбъект.вогПовестка.Очистить();
	БизнесПроцессОбъект.вогПовесткаПрисоединенныеФайлы.Очистить();
	Для каждого СтрокаРезультата Из РезультатРедактирования Цикл
		НоваяСтрокаПовестки = БизнесПроцессОбъект.вогПовестка.Добавить(); 	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПовестки, СтрокаРезультата);
		
		Для каждого ПрисоединенныйФайл Из СтрокаРезультата.ПрисоединенныеФайлы Цикл
			НоваяСтрокаФайла = БизнесПроцессОбъект.вогПовесткаПрисоединенныеФайлы.Добавить(); 	
			НоваяСтрокаФайла.ПрисоединенныйФайл  = ПрисоединенныйФайл;
			НоваяСтрокаФайла.ИдентификаторСтроки = НоваяСтрокаПовестки.ИдентификаторСтроки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	БизнесПроцессОбъект.Записать();
	
	Если ПараметрыНастройкиБизнесПроцессов.ПравилоРасчетаПроцентаВыполненияЗадач = "Повестка" Тогда
		вогСобытия.РассчитатьЗаписатьВыполнениеЗадачи("Повестка", Объект.Ссылка, БизнесПроцессОбъект.Ссылка);	
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	СформироватьПредставлениеПовестки();

КонецПроцедуры // ПослеРедактированияПовесткиСервер()

&НаСервере
Функция СформироватьТекущийСоставПовестки()

	Повестка = Объект.БизнесПроцесс.вогПовестка;
	
	МассивСоставаПовестки = Новый Массив;
	Для каждого СтрокаТЧ Из Повестка Цикл
		МассивСоставаПовестки.Добавить(
			Новый Структура("Вопрос, Ответ, ПрисоединенныеФайлы, ИдентификаторСтроки", 
				СтрокаТЧ.Вопрос, СтрокаТЧ.Ответ, МассивПрисоединенныхФайловСтрокиПовестки(СтрокаТЧ.ИдентификаторСтроки), СтрокаТЧ.ИдентификаторСтроки)
		);
		
	КонецЦикла;
	
	Возврат МассивСоставаПовестки;
	
КонецФункции // СформироватьТекущийСоставПовестки()

&НаСервере
Функция МассивПрисоединенныхФайловСтрокиПовестки(ИдентификаторСтроки)

	ПовесткаПрисоединенныеФайлы = Объект.БизнесПроцесс.вогПовесткаПрисоединенныеФайлы;
	
	МассивФайлов = Новый Массив;
	
	СтрокиФайлов = ПовесткаПрисоединенныеФайлы.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки)); 	
	Для каждого СтрокаФайла Из СтрокиФайлов Цикл
		МассивФайлов.Добавить(СтрокаФайла.ПрисоединенныйФайл);	
	
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции // МассивПрисоединенныхФайловСтрокиПовестки()

#КонецОбласти                                 

&НаСервере
Процедура ПолучитьПараметрыНастройкиБизнесПроцессов()
	
	ПараметрыНастройкиБизнесПроцессов = Справочники.вогНастройкиБизнесПроцессов.ПараметрыНастройки(Объект.БизнесПроцесс.вогНастройка);
	
	//>>Бей(28.05.2019 14:50:23):#176  	
	
	ВариантЗаполненияДанных = Перечисления.вогВариантыЗаполненияДанныхПроцессов.ПриВыполненииЗадач;	
	
	вогОбъектыДляПроцессаСервер.НастроитьЭлементыФормы(ЭтотОбъект, Истина);
	
	Элементы.ГруппаОбъектыПоПроцессу.ТолькоПросмотр = Объект.Выполнена;
	
	//<<Бей(28.05.2019 14:50:28):#176
	
КонецПроцедуры // ПолучитьПараметрыНастройкиБизнесПроцессов()

&НаКлиенте
Процедура ПредметИзБизнесПроцессаНажатие(Элемент, СтандартнаяОбработка)
	
	ПоказатьЗначение(,ПредметБизнесПроцесса);
	
КонецПроцедуры

// ++ VOG Солодов В.В. 15.08.2019 task 463
&НаСервере
Процедура ЗадачаОткрытаАссистентом(ДоступноПользователю)
	
	Если Не ДоступноПользователю
		Или Объект.вогТипЗадачиИсполнителя <> Перечисления.вогТипЗадачиИсполнителя.Поручение Тогда
		Возврат;
	КонецЕсли;
	
	РуководительПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "вогРуководитель");
	
	Если Не ЗначениеЗаполнено(РуководительПользователя) Тогда
		Возврат;
	КонецЕсли;
	
	БизнесПроцесс = Объект.БизнесПроцесс;
	
	Если БизнесПроцесс.Автор = РуководительПользователя
		И БизнесПроцесс.Ответственный = ТекущийПользователь
		И Объект.Исполнитель <> ТекущийПользователь Тогда
		
		ДоступноПользователю = Ложь;
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 15.08.2019

// ++ VOG Солодов В.В. 05.09.2019 task 605
&НаСервере
Процедура ТекущийПользовательЯвляетсяДелегатом(ДоступноПользователю)
	
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(Объект.БизнесПроцесс.Автор);
	МассивПользователей.Добавить(Объект.БизнесПроцесс.Ответственный);
	МассивПользователей.Добавить(Объект.Исполнитель);
	
	ЭтоДелегат = РегистрыСведений.вогИсполнителиРолейИДелегаты.ИсполнительЯвляетсяДелегатом(
		МассивПользователей, ТекущийПользователь, "ПроцессыИЗадачи");
		
	Если ЭтоДелегат Тогда
		ДоступноПользователю = Истина;
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 05.09.2019

&НаСервере 
Процедура ЗаблокироватьРедактированиеРеквизитов() //VOG Ульянов И.В. 03.02.2020 CRM-264
	
	ЕстьПринятыеЗадачи = ПроверитьНаличиеПринятыхЗадач(Объект.БизнесПроцесс); 
	
	Если Объект.Ссылка.Автор = Пользователи.ТекущийПользователь() И НЕ ЕстьПринятыеЗадачи тогда
		ЭтаФорма.Элементы.РедактироватьПостановкуПоручения.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.РедактироватьПостановкуПоручения.Видимость = Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	вогКомандировкаЗадачи.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.вогКомандировка.Задачи КАК вогКомандировкаЗадачи
		|ГДЕ
		|	вогКомандировкаЗадачи.Задача = &Задача
		|	И вогКомандировкаЗадачи.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Элементы.ТаблицаТорговыхТочекОбъект.КнопкаВыпадающегоСписка = Ложь;
		Элементы.ТаблицаТорговыхТочекОбъект.БыстрыйВыбор = Ложь;
		Элементы.ТаблицаТорговыхТочекОбъект.КнопкаВыбора = Ложь;
		Элементы.ТаблицаТорговыхТочекОбъект.РедактированиеТекста = Ложь;
		Элементы.ТаблицаТорговыхТочекОбъект.РежимРедактирования = РежимРедактированияКолонки.Вход;
		Элементы.ТаблицаКлиентовОбъект.КнопкаВыпадающегоСписка = Ложь;
		Элементы.ТаблицаКлиентовОбъект.БыстрыйВыбор = Ложь;
		Элементы.ТаблицаКлиентовОбъект.РедактированиеТекста = Ложь;
		ЭтаФорма.Элементы.ТаблицаКлиентов.ИзменятьСоставСтрок = Ложь;
		ЭтаФорма.Элементы.ТаблицаТорговыхТочек.ИзменятьСоставСтрок = Ложь;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПроверитьНаличиеПринятыхЗадач(БизнесПроцесс) //VOG Ульянов И.В. 13.02.2020 CRM-334

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ПринятаКИсполнению = ИСТИНА
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура РедактироватьПостановкуПоручения(Команда) //VOG Ульянов И.В. 13.02.2020 CRM-334
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Описание", Описание); 
	ПараметрыОткрытияФормы.Вставить("БизнесПроцесс", Объект.БизнесПроцесс); 
			
	ОписаниеОповещенияРедактироватьПостановкуПоручения = Новый ОписаниеОповещения("ОповещениеОписаниеОповещенияРедактироватьПостановкуПоручения", ЭтотОбъект);
			
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаРедактированияПостановкиПоручения", ПараметрыОткрытияФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,, ОписаниеОповещенияРедактироватьПостановкуПоручения);

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОписаниеОповещенияРедактироватьПостановкуПоручения(Значение, Доп) Экспорт //VOG Ульянов И.В. 13.02.2020 CRM-334
	
	Если Значение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Значение;
	
КонецПроцедуры

