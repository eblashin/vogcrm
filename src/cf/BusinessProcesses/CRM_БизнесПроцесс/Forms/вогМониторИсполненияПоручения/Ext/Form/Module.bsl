
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// ++ VOG Солодов В.В. 14.01.2021 DEV-54
	РеквизитыБП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.БизнесПроцесс,
		"Наименование, НомерВерсииКартыМаршрута, Ответственный",
		Истина);
	
	ЭтотОбъект.Заголовок 		= РеквизитыБП.Наименование;
	НомерВерсииКартыМаршрута 	= РеквизитыБП.НомерВерсииКартыМаршрута;
	Постановщик 				= РеквизитыБП.Ответственный;
	// До изменения
	//ЭтотОбъект.Заголовок = Объект.БизнесПроцесс.Наименование;
	//
	//Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
	//	НомерВерсииКартыМаршрута = Объект.БизнесПроцесс.НомерВерсииКартыМаршрута;
	//КонецЕсли;
	// -- VOG Солодов В.В. 14.01.2021 DEV-54
	НачальныйПризнакВыполнения = Объект.Выполнена;
	
	СформироватьСоответствиеЭлементов();
	ЗаполнитьТаблицуЗадач();
	УстановитьВидимостьДоступностьЭлементовФормы();
	УстановитьВидимостьДоступностьКомандФормы();
	
	//ЭтотОбъект.ОтображениеОбсуждений = ОтображениеОбсужденийФормы.НеОтображать;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗадачаВыполнена"
		Или ИмяСобытия = "ЗадачаПринятаКИсполнению"
		Или ИмяСобытия = "БизнесПроцессЗаписан" Тогда
		
		Если ИмяСобытия = "БизнесПроцессЗаписан" Тогда
			
			Если Не Параметр.СсылкаНаОбъект = Объект.БизнесПроцесс Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Задача", Параметр.СсылкаНаОбъект);
			
			НайденныеСтроки = ТаблицаЗадачи.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ПерезаполнитьТаблицуЗадач();
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗадача
			И (Параметр.СсылкаНаОбъект = ТекущаяЗадача
				Или Параметр.СсылкаНаОбъект = Объект.БизнесПроцесс) Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСписокЗадач;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Документ.вогАнкета.Запись"
		И Параметр.ДокументОснование = Объект.БизнесПроцесс
		И Параметр.Свойство("Статус") Тогда
		//И Параметр.Статус = ПредопределенноеЗначение("Справочник.вогШаблоныСтатусов.Согласован") Тогда
		
		ЕстьИзменения = Ложь;
		ОбработатьОповещениеЗаписьАнкетыНаСервере(ЕстьИзменения, Источник, Параметр);
		
		Если ЕстьИзменения Тогда
			МакетЗадачи = СформироватьМакетЗадачи(Параметр.Предмет);
		КонецЕсли;
		
		УстановитьДоступностьКнопокВыполнения();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АвторНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Начать обсуждение
	//НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекущаяЗадача);
	//КонтекстОбсуждения = Новый КонтекстОбсужденияСистемыВзаимодействия(НавигационнаяСсылка);
	//МенеджерВзаимодействия = Новый МенеджерСистемыВзаимодействия;
	//
	//Отбор = Новый ОтборОбсужденийСистемыВзаимодействия;
	//Отбор.КонтекстноеОбсуждение = Истина;
	//Отбор.ТекущийПользовательЯвляетсяУчастником = Истина;
	//Отбор.КонтекстОбсуждения = КонтекстОбсуждения;
	//Обсуждение = МенеджерВзаимодействия.ПолучитьОбсуждения(Отбор);
	//
	//Если Обсуждение.Количество() = 0 Тогда
	//	Обсуждение = МенеджерВзаимодействия.СоздатьОбсуждение();
	//	Обсуждение.КонтекстОбсуждения = КонтекстОбсуждения;
	//	Обсуждение.Ключ = Строка(ТекущаяЗадача.УникальныйИдентификатор());
	//	Обсуждение.Записать();
	//Иначе
	//	Обсуждение = Обсуждение[0];
	//КонецЕсли;
	//
	//Обсуждение.Участники.Добавить(ПолучитьИДПользователя(Объект.Автор));
	//Обсуждение.Участники.Добавить(ПолучитьИДПользователя(ТекущийПользователь));
	//
	//СообщениеДляОбсуждения = МенеджерВзаимодействия.СоздатьСообщение(Обсуждение.Идентификатор);
	//СообщениеДляОбсуждения.Дата = ТекущаяДата();
	//СообщениеДляОбсуждения.Автор = ПолучитьИДПользователя(ПользователиКлиентСервер.ТекущийПользователь());
	//СообщениеДляОбсуждения.Получатели.Добавить(Объект.Автор);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторЭлемента = СтрЗаменить(Элемент.Имя, "Исполнитель_", "");
	ИдентификаторЭлемента = СтрЗаменить(ИдентификаторЭлемента, "Автор_", "");
	ИдентификаторЭлемента = СтрЗаменить(ИдентификаторЭлемента, "ФотоИсполнителя_", "");
	
	Если Не ИдентификаторЭлемента = ТекущийИдентификатор Тогда
		
		ТекущийИдентификатор = ИдентификаторЭлемента;
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("ИдентификаторЗадачи", ИдентификаторЭлемента);
		
		НайденныеСтроки = ТаблицаЗадачи.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			
			ТекущаяЗадача = СтрокаТабличнойЧасти.Задача;
			
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("КоличествоОжидаемыхРезультатов");
			СтруктураСтроки.Вставить("КоличествоВыполненныхРезультатов");
			СтруктураСтроки.Вставить("ПроцентВыполнения");
			СтруктураСтроки.Вставить("Трудоемкость");
			
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабличнойЧасти);
			ЗаполнитьРеквизитыЗадачи(СтруктураСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимостьКнопокВыполнения();
	УстановитьДоступностьКнопокВыполнения();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗадача;
	
	КореньДерева = ДеревоПредметы.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из КореньДерева Цикл
		Элементы.Предметы.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	//ОповещениеОЗавершении = Новый ОписаниеОповещения("НачатьПолучениеОбсужденияЗавершение", ЭтотОбъект);
	//ЭтотОбъект.НачатьПолучениеОбсуждения(ОповещениеОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеОбсужденияЗавершение(ИдентификаторОбсуждения, ДополнительныеПараметры) Экспорт
	
	ЭтотОбъект.ОтображениеОбсуждений = ОтображениеОбсужденийФормы.Отображать;
	
КонецПроцедуры

&НаКлиенте
Процедура МакетЗадачиВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ТипЗнч(Область.Расшифровка) = Тип("Структура")
		И Область.Расшифровка.Свойство("ЗначениеИсполнитель")
		И ТипЗнч(Область.Расшифровка.ЗначениеИсполнитель) = Тип("ПланВидовХарактеристикСсылка.вогВариантыОпросов") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ТекущийСтатусЗадачи = "НаКонтроле"
		Или Область.Картинка = Неопределено 
		Или Не (ТипЗнч(Область.Расшифровка) = Тип("Структура") И Область.Расшифровка.Свойство("Пометка")) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРасшифровки = Область.Расшифровка;
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("ИдентификаторЗадачи", 	СтруктураРасшифровки.ИдентификаторЗадачи);
	ПараметрыОтбораСтрок.Вставить("Предмет", 				СтруктураРасшифровки.Предмет);
	
	НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Запрет пометки для пункта с результатом вида Анкета
	//Если СтруктураРасшифровки.Пометка Тогда
		
	РезультатыВыполнения = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		Если ЭтоАдресВременногоХранилища(СтрокаТабличнойЧасти.РезультатВыполнения) Тогда
			РезультатыВыполнения.Добавить(СтрокаТабличнойЧасти.РезультатВыполнения);
		КонецЕсли;
	КонецЦикла;
	
	Если РезультатыВыполнения.Количество() > 0 Тогда
		
		Отказ = Ложь;
		МакетЗадачиВыборНаСервере(РезультатыВыполнения, Отказ, Не СтруктураРасшифровки.Пометка);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	//КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если СтруктураРасшифровки.Пометка Тогда
		Область.Картинка = БиблиотекаКартинок.вог_СнятьФлажки_16;
	Иначе
		Область.Картинка = БиблиотекаКартинок.вог_УстановитьФлажки_16;
	КонецЕсли;
	
	Область.Расшифровка.Пометка = Не СтруктураРасшифровки.Пометка;
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		СтрокаТабличнойЧасти.Принято = СтруктураРасшифровки.Пометка;
	КонецЦикла;
	
	УстановитьДоступностьКнопокВыполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура МакетЗадачиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура")
		И Расшифровка.Свойство("ЗначениеИсполнитель") Тогда
		
		Если ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("СправочникСсылка.вогВидыПрисоединенныхФайлов") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВладелецФайла", 		Расшифровка.Задача);
			ПараметрыФормы.Вставить("ТолькоПросмотр", 		Истина);
			ПараметрыФормы.Вставить("ИдентификаторГруппы", 	Расшифровка.Идентификатор);
			ПараметрыФормы.Вставить("ВидФайла", 			Расшифровка.ЗначениеИсполнитель);
			
			ОткрытьФорму(
				"Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("СправочникСсылка.ЗадачаИсполнителяПрисоединенныеФайлы")
			Или ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы") Тогда
		
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(Расшифровка.ЗначениеИсполнитель, УникальныйИдентификатор);
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
		ИначеЕсли ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("ДокументСсылка.CRM_Мероприятие")
			Или ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("ДокументСсылка.вогАнкета")
			Или ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("ДокументСсылка.вогКомандировка")Тогда
			
			Если ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("ДокументСсылка.вогАнкета")
				И ЭтоКонтролер Тогда
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Ключ", 				Расшифровка.ЗначениеИсполнитель);
				ПараметрыФормы.Вставить("ВозможноСогласование", Истина);
				
				ОткрытьФорму("Документ.вогАнкета.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
				
			Иначе
				ПоказатьЗначение(Неопределено, Расшифровка.ЗначениеИсполнитель);
			КонецЕсли;
			
		// ++ VOG Солодов В.В. 27.11.2020 CRM-1054
		ИначеЕсли ЭтоСсылка(ТипЗнч(Расшифровка.ЗначениеИсполнитель))
			И ЗначениеЗаполнено(Расшифровка.ЗначениеИсполнитель) Тогда
			
			ПоказатьЗначение(Неопределено, Расшифровка.ЗначениеИсполнитель);
			
		ИначеЕсли ТипЗнч(Расшифровка.ЗначениеИсполнитель) = Тип("Строка") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТекстРедактирования", 	Расшифровка.ЗначениеИсполнитель);
			ПараметрыФормы.Вставить("Заголовок", 			НСтр("ru = 'Результат выполнения'"));
			ПараметрыФормы.Вставить("ТолькоПросмотр", 		Истина);
			
			ОткрытьФорму(
				"ОбщаяФорма.вогФормаВводаТекста",
				ПараметрыФормы,
				ЭтотОбъект,
				ЭтотОбъект,
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		// -- VOG Солодов В.В. 27.11.2020 CRM-1054
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СправочникСсылка.ЗадачаИсполнителяПрисоединенныеФайлы")
		Или ТипЗнч(Расшифровка) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы") Тогда
		
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(Расшифровка, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	ИначеЕсли ЗначениеЗаполнено(Расшифровка) И ЭтоСсылка(ТипЗнч(Расшифровка)) Тогда
		
		ПоказатьЗначение(Неопределено, Расшифровка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПредметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	
	Если Не ТипЗнч(ТекущиеДанные.Предмет) = Тип("Строка") Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Предмет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Предметы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или ТекущийПредмет = ТекущиеДанные.Предмет Тогда
		Возврат;
	КонецЕсли;
	
	//ТекущийПредмет = ТекущиеДанные.Предмет;
	
	МакетЗадачи = СформироватьМакетЗадачи(ТекущиеДанные.Предмет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиСписокЗадача(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСписокЗадач;
	//ЭтотОбъект.ОтображениеОбсуждений = ОтображениеОбсужденийФормы.НеОтображать;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБизнесПроцесс(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Объект.БизнесПроцесс);
	
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущаяЗадача);
	
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьТекущуюЗадачу(Команда)
	
	ВыполнениеЗадачиПоУсловию(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьТекущуюЗадачуИсполнителю(Команда)
	
	ВыполнениеЗадачиПоУсловию(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеЗадачиПоУсловию(ВариантВыполнения)
	
	Отказ = Ложь;
	ОчиститьСообщения();
	РеквизитыЗадачи = ВыполнениеЗадачиПоУсловиюНаСервере(ТекущаяЗадача, ВариантВыполнения, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВыполнениеЗадачиПоУсловиюЗавершение", ЭтотОбъект, РеквизитыЗадачи);
	
	ДополнительныеПараметрыОповещения = Новый Структура;
	ДополнительныеПараметрыОповещения.Вставить("РеквизитыЗадачи", 		РеквизитыЗадачи);
	ДополнительныеПараметрыОповещения.Вставить("ОписаниеОповещения", 	ОписаниеОповещенияЗавершение);
	
	Если РеквизитыЗадачи.СписокТочекМаршрута.Количество() > 0 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("БизнесПроцесс", 		РеквизитыЗадачи.БизнесПроцесс);
		ПараметрыФормы.Вставить("СписокТочекМаршрута", 	РеквизитыЗадачи.СписокТочекМаршрута);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыполнитьЗадачуПродолжение",
			ЭтотОбъект,
			ДополнительныеПараметрыОповещения);
		
		ОткрытьФорму(
			"Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя",
			ПараметрыФормы,
			ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьЗадачуПродолжение(Истина, ДополнительныеПараметрыОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения 	= ДополнительныеПараметры.ОписаниеОповещения;
	РеквизитыЗадачи 	= ДополнительныеПараметры.РеквизитыЗадачи;
	
	// Если бизнес-процесс далее завершается неудачно, то возможно надо указать причину.
	Если CRM_БизнесПроцессыСервер.ПриведетКНеудачномуЗавершению(
		РеквизитыЗадачи.БизнесПроцесс,
		РеквизитыЗадачи.CRM_ТочкаМаршрута,
		РеквизитыЗадачи.CRM_ВариантВыполнения) Тогда
		
		ФормаДосрочногоЗавершения = ПолучитьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения",, ЭтотОбъект);
		ФормаДосрочногоЗавершения.Заголовок 										= НСтр("ru = 'Неудачное завершение бизнес-процесса'");
		ФормаДосрочногоЗавершения.Элементы.ПричинаНеудачногоЗавершения.Заголовок 	= НСтр("ru = 'Причина неудачного завершения'");
		ФормаДосрочногоЗавершения.ОписаниеОповещенияОЗакрытии 						= ОписаниеОповещения;
		ФормаДосрочногоЗавершения.РежимОткрытияОкна 								= РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаДосрочногоЗавершения.Открыть();
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнениеЗадачиПоУсловиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЭтапДосрочногоЗавершения = ПредопределенноеЗначение("Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка");
		
		Результат.ЗавершенДосрочно = Ложь;
		Результат.Вставить("Задача", 					ТекущаяЗадача);
		Результат.Вставить("ЭтапДосрочногоЗавершения", 	ЭтапДосрочногоЗавершения);
		
		CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(Результат);
		
	КонецЕсли;
	
	ПродолжитьВыполнение = Истина;
	Если ЗначениеЗаполнено(ДополнительныеПараметры.БизнесПроцесс) Тогда
		
		ТекстОшибки = "";
		//Проверим не работате ли кто-то с ведущей задачей если она есть
		Результат = CRM_БизнесПроцессыИЗадачиВызовСервера.ЗаблокироватьДанныеДляРедактированияВедущейЗадачи(ДополнительныеПараметры.БизнесПроцесс, ПродолжитьВыполнение);
		
		Если Не ПродолжитьВыполнение Тогда
			
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Невозможно выполнить, так как задача: %1 редактируется %2'"),
				Результат.ПредставлениеЗадачи,
				Результат.ТекстОшибки);
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПродолжитьВыполнение Тогда
		
		Если ДополнительныеПараметры.CRM_ВариантВыполнения = 1 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Задача", ТекущаяЗадача);
			ПараметрыФормы.Вставить("ПредставлениеВариантаВыполнения", ДополнительныеПараметры.CRM_ВариантВыполненияСтрокой);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВводРезультатаВыполненияПродолжение", ЭтотОбъект);
			
			ОткрытьФорму(
				"БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаЗадачиРезультатВыполнения",
				ПараметрыФормы,
				ЭтотОбъект,
				,
				,
				,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			Результат = Новый Структура;
			Результат.Вставить("РезультатВыполнения", 	"");
			Результат.Вставить("ДатаИсполнения", 		ТекущаяДата());
			Результат.Вставить("Отказ", 				Ложь);
			
			ВводРезультатаВыполненияПродолжение(Результат, Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводРезультатаВыполненияПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат.Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗафиксироватьВыполнениеНаСервере(ТекущаяЗадача, Результат);
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("СсылкаНаОбъект", 		ТекущаяЗадача);
	ПараметрОповещения.Вставить("ОбновлятьКалендарь", 	Параметры.ОбновлятьКалендарь);
	
	Оповестить("ЗадачаВыполнена", ПараметрОповещения);
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСписокЗадач;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьТекущуюЗадачу(Команда)
	ЗаписатьПринятыйРезультат();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаСервере
Функция ВыполнениеЗадачиПоУсловиюНаСервере(ТекущаяЗадача, ВариантВыполнения, Отказ)
	
	ЗадачаОбъект = ТекущаяЗадача.ПолучитьОбъект();
	
	НомерВерсииКартыМаршрута = ЗадачаОбъект.БизнесПроцесс.НомерВерсииКартыМаршрута;
	
	ЗадачаОбъект.CRM_ВариантВыполнения			= ВариантВыполнения;
	ЗадачаОбъект.CRM_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(
		ЗадачаОбъект.CRM_ТочкаМаршрута,
		ВариантВыполнения,
		НомерВерсииКартыМаршрута);
		
	Попытка
		ЗадачаОбъект.Записать();
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаписатьПринятыйРезультат(ВариантВыполнения);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("БизнесПроцесс");
	СтруктураВозврата.Вставить("CRM_ТочкаМаршрута");
	СтруктураВозврата.Вставить("CRM_ВариантВыполнения");
	СтруктураВозврата.Вставить("CRM_ВариантВыполненияСтрокой");
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, ЗадачаОбъект);
	
	СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(ТекущаяЗадача);
	СтруктураВозврата.Вставить("СписокТочекМаршрута", СписокТочекМаршрута);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ЗафиксироватьВыполнениеНаСервере(ТекущаяЗадача, Результат)
	
	ЗадачаОбъект = ТекущаяЗадача.ПолучитьОбъект();
	ЗадачаОбъект.Описание 				= Результат.РезультатВыполнения;
	
	Попытка
		ЗадачаОбъект.Записать();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	//ЗаписатьПринятыйРезультат();
	
	ЗадачаОбъект.ДатаИсполнения 		= Результат.ДатаИсполнения;
	ДатаСтрокой 						= CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(Результат.ДатаИсполнения);
	
	ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой = СтрШаблон(НСтр("ru = '%1 Выполнена -> %2'"), ДатаСтрокой, ЗадачаОбъект.Исполнитель);
	
	ЗадачаОбъект.РезультатВыполнения = СтрШаблон(
		НСтр("ru = '%1 Выполнена -> %2 %3 %4'"),
		ДатаСтрокой,
		ЗадачаОбъект.Исполнитель,
		Результат.РезультатВыполнения,
		ЗадачаОбъект.РезультатВыполнения);
		
	Попытка
		ЗадачаОбъект.ВыполнитьЗадачу();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
	ПерезаполнитьТаблицуЗадач();
	
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаОбъект.БизнесПроцесс, "Завершен, ВариантЗавершения");
	
	Если РеквизитыБизнесПроцесса.Завершен
		И Не РеквизитыБизнесПроцесса.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно Тогда
		
		вогБизнесПроцессыИЗадачиСервер.ПеренестиПрисоединенныеФайлы(ЗадачаОбъект.БизнесПроцесс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПринятыйРезультат(ВариантВыполнения = Неопределено)
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Задача", ТекущаяЗадача);
	
	НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		
		Если СтрокаТабличнойЧасти.Принято Тогда
			
			Идентификатор 		= Новый УникальныйИдентификатор(СтрЗаменить(СтрокаТабличнойЧасти.Идентификатор, "_", "-"));
			ИдентификаторЗадачи = Новый УникальныйИдентификатор(СтрЗаменить(СтрокаТабличнойЧасти.ИдентификаторЗадачи, "_", "-"));
			
			НаборЗаписей = РегистрыСведений.вогРезультатыВыполненияЗадачПоручений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(СтрокаТабличнойЧасти.Задача);
			НаборЗаписей.Отбор.Идентификатор.Установить(Идентификатор);
			НаборЗаписей.Отбор.ИдентификаторЗадачи.Установить(ИдентификаторЗадачи);
			НаборЗаписей.Отбор.Предмет.Установить(СтрокаТабличнойЧасти.Предмет);
			
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.ПринятоКонтролером = Истина;
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		Если Не ВариантВыполнения = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Согласование анкет
		Если ЭтоАдресВременногоХранилища(СтрокаТабличнойЧасти.РезультатВыполнения) Тогда
			
			РезультатВыполнения = ПолучитьИзВременногоХранилища(СтрокаТабличнойЧасти.РезультатВыполнения);
			
			Для Каждого СтрокаВыполнение Из РезультатВыполнения Цикл
				
				Если ТипЗнч(СтрокаВыполнение.ЗначениеИсполнитель) = Тип("ДокументСсылка.вогАнкета") Тогда
					
					Если СтрокаТабличнойЧасти.Принято Тогда
						НовыйСтатусАнкеты = Справочники.вогШаблоныСтатусов.Согласован;
					Иначе
						НовыйСтатусАнкеты = Справочники.вогШаблоныСтатусов.НеСогласован;
					КонецЕсли;
					
					СтатусАнкеты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						СтрокаВыполнение.ЗначениеИсполнитель,
						"Статус",
						Истина);
					
					Если СтатусАнкеты = Справочники.вогШаблоныСтатусов.Зарегистрирован Тогда
						
						АнкетаОбъект = СтрокаВыполнение.ЗначениеИсполнитель.ПолучитьОбъект();
						АнкетаОбъект.Статус = НовыйСтатусАнкеты;
						
						Если СтрокаТабличнойЧасти.Принято Тогда
							АнкетаОбъект.ДополнительныеСвойства.Вставить("Проводить", Истина);
						КонецЕсли;
						
						Попытка
							АнкетаОбъект.Записать(РежимЗаписиДокумента.Проведение);
						Исключение
							ТекстОшибки = ОписаниеОшибки();
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
						КонецПопытки;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЗадач()
	
	ТаблицаЗадачи.Очистить();
	ТаблицаПунктыЗадач.Очистить();
	ТаблицаПрисоединенныеФайлы.Очистить();
	
	ФотоСотрудника 		= БизнесПроцессы.CRM_БизнесПроцесс.ПолучитьМакет("ФотоСотрудника");
	КартинкаСрокИстек 	= БиблиотекаКартинок.вогСрокИстек;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_НастройкиЭтаповБизнесПроцессов.Объект КАК Объект,
		|	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута КАК ТочкаМаршрута,
		|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполнения КАК ВариантВыполнения,
		|	CRM_НастройкиЭтаповБизнесПроцессов.ВариантВыполненияСтрокой КАК ВариантВыполненияСтрокой,
		|	CRM_НастройкиЭтаповБизнесПроцессов.Используется КАК Используется,
		|	CRM_НастройкиЭтаповБизнесПроцессов.Порядок КАК Порядок
		|ПОМЕСТИТЬ ВТ_НастройкиЭтапов
		|ИЗ
		|	РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
		|ГДЕ
		|	CRM_НастройкиЭтаповБизнесПроцессов.Объект = &БизнесПроцесс
		|	И НЕ CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута.Вид = &Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.CRM_Итерация КАК CRM_Итерация,
		// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
		|ВЫБОР
		|	КОГДА ЗадачаИсполнителя.ОсновнойОбъектАдресации = НЕОПРЕДЕЛЕНО
		|		ТОГДА ЗадачаИсполнителя.Исполнитель
		|	ИНАЧЕ ЗадачаИсполнителя.ОсновнойОбъектАдресации
		|КОНЕЦ КАК Исполнитель,
		// До изменения
		//|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
		// -- VOG Солодов В.В. 03.12.2020 CRM-1099
		|	ЗадачаИсполнителя.Автор КАК Автор,
		|	ЗадачаИсполнителя.Выполнена КАК Выполнена,
		|	ЗадачаИсполнителя.ПринятаКИсполнению КАК ПринятаКИсполнению,
		|	ЗадачаИсполнителя.СрокИсполнения КАК СрокИсполнения,
		|	ЗадачаИсполнителя.вогИсходнаяЗадача КАК вогИсходнаяЗадача,
		|	ЗадачаИсполнителя.CRM_ТочкаМаршрута КАК CRM_ТочкаМаршрута,
		|	ВТ_НастройкиЭтапов.Используется КАК Используется,
		|	ВТ_НастройкиЭтапов.Порядок КАК Порядок
		|ПОМЕСТИТЬ ВТ_ВсеЗадачи
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиЭтапов КАК ВТ_НастройкиЭтапов
		|		ПО (ВТ_НастройкиЭтапов.ТочкаМаршрута = ЗадачаИсполнителя.CRM_ТочкаМаршрута)
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеЗадачи.вогИсходнаяЗадача КАК ИсходнаяЗадача,
		|	МАКСИМУМ(ВТ_ВсеЗадачи.CRM_Итерация) КАК Итерация
		|ПОМЕСТИТЬ ВТ_Итерации
		|ИЗ
		|	ВТ_ВсеЗадачи КАК ВТ_ВсеЗадачи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсеЗадачи.вогИсходнаяЗадача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеЗадачи.Ссылка КАК Ссылка,
		|	ВТ_ВсеЗадачи.Исполнитель КАК Исполнитель,
		|	ВТ_ВсеЗадачи.Автор КАК Автор,
		|	ВТ_ВсеЗадачи.вогИсходнаяЗадача КАК вогИсходнаяЗадача,
		|	ВТ_ВсеЗадачи.Выполнена КАК Выполнена,
		|	ВТ_ВсеЗадачи.CRM_ТочкаМаршрута КАК CRM_ТочкаМаршрута,
		|	ВТ_ВсеЗадачи.CRM_Итерация КАК CRM_Итерация,
		|	ВТ_ВсеЗадачи.Порядок КАК Порядок
		|ПОМЕСТИТЬ ВТ_ВсеЗадачиПроверки
		|ИЗ
		|	ВТ_ВсеЗадачи КАК ВТ_ВсеЗадачи
		|ГДЕ
		|	ВТ_ВсеЗадачи.CRM_ТочкаМаршрута.Имя = ""Действие2""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ВсеЗадачи.Ссылка,
		|	ВТ_ВсеЗадачи.Исполнитель,
		|	ВТ_ВсеЗадачи.Автор,
		|	ВТ_ВсеЗадачи.вогИсходнаяЗадача,
		|	ВТ_ВсеЗадачи.Выполнена,
		|	ВТ_ВсеЗадачи.CRM_ТочкаМаршрута,
		|	ВТ_ВсеЗадачи.CRM_Итерация,
		|	ВТ_ВсеЗадачи.Порядок
		|ИЗ
		|	ВТ_ВсеЗадачи КАК ВТ_ВсеЗадачи
		|ГДЕ
		|	ВТ_ВсеЗадачи.CRM_ТочкаМаршрута.Имя = ""Действие3""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ВсеЗадачи.Ссылка,
		|	ВТ_ВсеЗадачи.Исполнитель,
		|	ВТ_ВсеЗадачи.Автор,
		|	ВТ_ВсеЗадачи.вогИсходнаяЗадача,
		|	ВТ_ВсеЗадачи.Выполнена,
		|	ВТ_ВсеЗадачи.CRM_ТочкаМаршрута,
		|	ВТ_ВсеЗадачи.CRM_Итерация,
		|	ВТ_ВсеЗадачи.Порядок
		|ИЗ
		|	ВТ_ВсеЗадачи КАК ВТ_ВсеЗадачи
		|ГДЕ
		|	ВТ_ВсеЗадачи.CRM_ТочкаМаршрута.Имя = ""Действие4""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеЗадачиПроверки.вогИсходнаяЗадача КАК вогИсходнаяЗадача,
		|	МАКСИМУМ(ВТ_НастройкиЭтапов.Порядок) КАК Порядок
		|ПОМЕСТИТЬ ВТ_ЗадачиПроверки
		|ИЗ
		|	ВТ_ВсеЗадачиПроверки КАК ВТ_ВсеЗадачиПроверки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиЭтапов КАК ВТ_НастройкиЭтапов
		|		ПО ВТ_ВсеЗадачиПроверки.CRM_ТочкаМаршрута = ВТ_НастройкиЭтапов.ТочкаМаршрута
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсеЗадачиПроверки.вогИсходнаяЗадача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ВсеЗадачиПроверки.Ссылка КАК Задача,
		|	ВТ_ВсеЗадачиПроверки.вогИсходнаяЗадача КАК ИсходнаяЗадача,
		|	ВТ_ВсеЗадачиПроверки.CRM_Итерация КАК CRM_Итерация,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_ВсеЗадачиПроверки.Ссылка ЕСТЬ NULL
		|				И НЕ ВТ_ВсеЗадачиПроверки.Выполнена
		|			ТОГДА ВТ_ВсеЗадачиПроверки.Исполнитель
		|		ИНАЧЕ ВТ_ВсеЗадачи.Исполнитель
		|	КОНЕЦ КАК Исполнитель,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_ВсеЗадачиПроверки.Ссылка ЕСТЬ NULL
		|				И НЕ ВТ_ВсеЗадачиПроверки.Выполнена
		|			ТОГДА ВТ_ВсеЗадачиПроверки.Автор
		|		ИНАЧЕ ВТ_ВсеЗадачи.Автор
		|	КОНЕЦ КАК Автор,
		|	ИСТИНА КАК НаПроверке,
		|	ВТ_ВсеЗадачиПроверки.Ссылка.ПринятаКИсполнению КАК ПринятаКИсполнению,
		|	ВТ_ВсеЗадачиПроверки.Ссылка.СрокИсполнения КАК СрокИсполнения,
		|	ВТ_ВсеЗадачиПроверки.Порядок КАК Порядок,
		|	ВТ_ВсеЗадачиПроверки.Выполнена КАК Выполнена
		|ПОМЕСТИТЬ ВТ_ЗадачиРаспределенные
		|ИЗ
		|	ВТ_ВсеЗадачи КАК ВТ_ВсеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВсеЗадачиПроверки КАК ВТ_ВсеЗадачиПроверки
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗадачиПроверки КАК ВТ_ЗадачиПроверки
		|			ПО ВТ_ВсеЗадачиПроверки.вогИсходнаяЗадача = ВТ_ЗадачиПроверки.вогИсходнаяЗадача
		|				И (ВТ_ЗадачиПроверки.Порядок = ВТ_ВсеЗадачиПроверки.Порядок)
		|		ПО ВТ_ВсеЗадачи.Ссылка = ВТ_ВсеЗадачиПроверки.вогИсходнаяЗадача
		|ГДЕ
		|	ВТ_ВсеЗадачи.CRM_ТочкаМаршрута.Имя = ""Действие1""
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ВсеЗадачи.Ссылка,
		|	ВТ_ВсеЗадачи.вогИсходнаяЗадача,
		|	ВТ_ВсеЗадачи.CRM_Итерация,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_ВсеЗадачиПроверки.Ссылка ЕСТЬ NULL
		|			ТОГДА ВТ_ВсеЗадачиПроверки.Исполнитель
		|		ИНАЧЕ ВТ_ВсеЗадачи.Исполнитель
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_ВсеЗадачиПроверки.Ссылка ЕСТЬ NULL
		|			ТОГДА ВТ_ВсеЗадачиПроверки.Автор
		|		ИНАЧЕ ВТ_ВсеЗадачи.Автор
		|	КОНЕЦ,
		|	ЛОЖЬ,
		|	ВТ_ВсеЗадачи.ПринятаКИсполнению,
		|	ВТ_ВсеЗадачи.СрокИсполнения,
		|	ВТ_ВсеЗадачи.Порядок,
		|	ВТ_ВсеЗадачи.Выполнена
		|ИЗ
		|	ВТ_ВсеЗадачи КАК ВТ_ВсеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВсеЗадачиПроверки КАК ВТ_ВсеЗадачиПроверки
		|		ПО ВТ_ВсеЗадачи.Ссылка = ВТ_ВсеЗадачиПроверки.вогИсходнаяЗадача
		|ГДЕ
		|	ВТ_ВсеЗадачи.CRM_ТочкаМаршрута.Имя = ""Действие1""
		|	И ВТ_ВсеЗадачиПроверки.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ЗадачиРаспределенные.Задача КАК Задача,
		|	ВТ_ЗадачиРаспределенные.CRM_Итерация КАК CRM_Итерация,
		|	ВТ_ЗадачиРаспределенные.Исполнитель КАК Исполнитель,
		|	ВТ_ЗадачиРаспределенные.Автор КАК Автор,
		|	ВТ_ЗадачиРаспределенные.НаПроверке КАК НаПроверке,
		|	ВТ_ЗадачиРаспределенные.Выполнена КАК Выполнена,
		|	ВТ_ЗадачиРаспределенные.ПринятаКИсполнению КАК ПринятаКИсполнению,
		|	ВЫБОР
		|		КОГДА ВТ_ЗадачиРаспределенные.Исполнитель ССЫЛКА Справочник.Пользователи
		|			ТОГДА Пользователи.CRM_ДолжностнаяПозиция
		// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.CRM_ДолжностныеПозиции.ПустаяСсылка)
		// -- VOG Солодов В.В. 03.12.2020 CRM-1099
		|	КОНЕЦ КАК ДолжностнаяПозиция,
		|	ВЫБОР
		|		КОГДА ВТ_ЗадачиРаспределенные.Исполнитель ССЫЛКА Справочник.Пользователи
		|			ТОГДА Пользователи.CRM_Фотография
		// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПользователиПрисоединенныеФайлы.ПустаяСсылка)
		// -- VOG Солодов В.В. 03.12.2020 CRM-1099
		|	КОНЕЦ КАК CRM_Фотография,
		|	ВТ_ЗадачиРаспределенные.СрокИсполнения КАК СрокИсполнения,
		|	ВТ_ЗадачиРаспределенные.ИсходнаяЗадача КАК ИсходнаяЗадача
		|ПОМЕСТИТЬ ВТ_Задачи
		|ИЗ
		|	ВТ_ЗадачиРаспределенные КАК ВТ_ЗадачиРаспределенные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Итерации КАК ВТ_Итерации
		|		ПО ВТ_ЗадачиРаспределенные.ИсходнаяЗадача = ВТ_Итерации.ИсходнаяЗадача
		|			И ВТ_ЗадачиРаспределенные.CRM_Итерация = ВТ_Итерации.Итерация
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (ВЫБОР
		|				КОГДА ВТ_ЗадачиРаспределенные.НаПроверке И НЕ ВТ_ЗадачиРаспределенные.Выполнена
		|					ТОГДА ВТ_ЗадачиРаспределенные.Автор = Пользователи.Ссылка
		|				ИНАЧЕ ВТ_ЗадачиРаспределенные.Исполнитель = Пользователи.Ссылка
		|			КОНЕЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Задачи.Задача КАК Задача,
		|	ВТ_Задачи.Исполнитель КАК Исполнитель,
		|	ВТ_Задачи.ПринятаКИсполнению КАК ПринятаКИсполнению,
		|	ВТ_Задачи.НаПроверке КАК НаПроверке,
		|	ВТ_Задачи.Выполнена КАК Выполнена,
		|	ВТ_Задачи.ДолжностнаяПозиция КАК ДолжностнаяПозиция,
		|	ВТ_Задачи.CRM_Фотография КАК CRM_Фотография,
		|	ВТ_Задачи.СрокИсполнения КАК СрокИсполнения,
		|	вогЗадачиПоручений.Идентификатор КАК Идентификатор,
		|	вогЗадачиПоручений.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
		|	вогЗадачиПоручений.Порядок КАК НомерСтроки,
		|	вогЗадачиПоручений.Пункт КАК Пункт,
		|	вогЗадачиПоручений.Предмет КАК Предмет,
		|	вогЗадачиПоручений.Комментарий КАК Комментарий,
		|	вогЗадачиПоручений.Результат КАК Результат,
		|	вогЗадачиПоручений.Трудоемкость КАК Трудоемкость,
		|	вогЗадачиПоручений.НаборЗадач КАК НаборЗадач,
		|	вогЗадачиПоручений.ТиповаяЗадача КАК ТиповаяЗадача,
		|	ВТ_Задачи.Автор КАК Автор
		|ПОМЕСТИТЬ ВТ_ЗадачиПоручений
		|ИЗ
		|	РегистрСведений.вогЗадачиПоручений КАК вогЗадачиПоручений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
		|		ПО вогЗадачиПоручений.Объект = ВТ_Задачи.Задача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Задачи.Задача КАК Задача,
		|	ВТ_Задачи.Исполнитель КАК Исполнитель,
		|	ВТ_Задачи.ПринятаКИсполнению КАК ПринятаКИсполнению,
		|	ВТ_Задачи.НаПроверке КАК НаПроверке,
		|	ВТ_Задачи.Выполнена КАК Выполнена,
		|	ВТ_Задачи.ДолжностнаяПозиция КАК ДолжностнаяПозиция,
		|	ВТ_Задачи.CRM_Фотография КАК CRM_Фотография,
		|	ВТ_Задачи.СрокИсполнения КАК СрокИсполнения,
		|	вогРезультатыВыполненияЗадачПоручений.Идентификатор КАК Идентификатор,
		|	вогРезультатыВыполненияЗадачПоручений.ИдентификаторЗадачи КАК ИдентификаторЗадачи,
		|	вогРезультатыВыполненияЗадачПоручений.Порядок КАК НомерСтроки,
		|	вогРезультатыВыполненияЗадачПоручений.Пункт КАК Пункт,
		|	вогРезультатыВыполненияЗадачПоручений.Предмет КАК Предмет,
		|	вогРезультатыВыполненияЗадачПоручений.Комментарий КАК Комментарий,
		|	вогРезультатыВыполненияЗадачПоручений.Результат КАК Результат,
		|	вогРезультатыВыполненияЗадачПоручений.НаборЗадач КАК НаборЗадач,
		|	вогРезультатыВыполненияЗадачПоручений.ТиповаяЗадача КАК ТиповаяЗадача,
		|	вогРезультатыВыполненияЗадачПоручений.ПринятоКонтролером КАК ПринятоКонтролером,
		|	ВТ_Задачи.Автор КАК Автор
		|ПОМЕСТИТЬ ВТ_Выполнение
		|ИЗ
		|	РегистрСведений.вогРезультатыВыполненияЗадачПоручений КАК вогРезультатыВыполненияЗадачПоручений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
		|		ПО вогРезультатыВыполненияЗадачПоручений.Объект = ВТ_Задачи.Задача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Задача, ВТ_Выполнение.Задача) КАК Задача,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Исполнитель, ВТ_Выполнение.Исполнитель) КАК Исполнитель,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Автор, ВТ_Выполнение.Автор) КАК Автор,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.ПринятаКИсполнению, ВТ_Выполнение.ПринятаКИсполнению) КАК ПринятаКИсполнению,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.НаПроверке, ВТ_Выполнение.НаПроверке) КАК НаКонтроле,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Выполнена, ВТ_Выполнение.Выполнена) КАК Выполнена,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.ДолжностнаяПозиция, ВТ_Выполнение.ДолжностнаяПозиция) КАК ДолжностнаяПозиция,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.CRM_Фотография, ВТ_Выполнение.CRM_Фотография) КАК CRM_Фотография,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.СрокИсполнения, ВТ_Выполнение.СрокИсполнения) КАК СрокИсполнения,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.НомерСтроки, ВТ_Выполнение.НомерСтроки) КАК НомерСтроки,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Идентификатор, ВТ_Выполнение.Идентификатор) КАК Идентификатор,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.ИдентификаторЗадачи, ВТ_Выполнение.ИдентификаторЗадачи) КАК ИдентификаторЗадачи,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Пункт, ВТ_Выполнение.Пункт) КАК Пункт,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Предмет, ВТ_Выполнение.Предмет) КАК Предмет,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Комментарий, НЕОПРЕДЕЛЕНО) КАК Комментарий,
		|	ЕСТЬNULL(ВТ_Выполнение.Комментарий, НЕОПРЕДЕЛЕНО) КАК КомментарийИсполнитель,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Результат, НЕОПРЕДЕЛЕНО) КАК ОжидаемыйРезультат,
		|	ЕСТЬNULL(ВТ_Выполнение.Результат, НЕОПРЕДЕЛЕНО) КАК РезультатВыполнения,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.Трудоемкость, ДАТАВРЕМЯ(1, 1, 1)) КАК Трудоемкость,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.НаборЗадач, ВТ_Выполнение.НаборЗадач) КАК НаборЗадач,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.НаборЗадач.ПлановоеВремя, ВТ_Выполнение.НаборЗадач.ПлановоеВремя) КАК ТрудоемкостьНабора,
		|	ЕСТЬNULL(ВТ_ЗадачиПоручений.ТиповаяЗадача, ВТ_Выполнение.ТиповаяЗадача) КАК ТиповаяЗадача,
		|	ЕСТЬNULL(ВТ_Выполнение.ПринятоКонтролером, ЛОЖЬ) КАК Принято,
		|	ВЫБОР
		|		КОГДА ВТ_ЗадачиПоручений.НомерСтроки ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДобавленИзЗадачи
		|ИЗ
		|	ВТ_ЗадачиПоручений КАК ВТ_ЗадачиПоручений
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Выполнение КАК ВТ_Выполнение
		|		ПО ВТ_ЗадачиПоручений.Задача = ВТ_Выполнение.Задача
		|			И ВТ_ЗадачиПоручений.Идентификатор = ВТ_Выполнение.Идентификатор
		|			И ВТ_ЗадачиПоручений.ИдентификаторЗадачи = ВТ_Выполнение.ИдентификаторЗадачи
		|			И ВТ_ЗадачиПоручений.Предмет = ВТ_Выполнение.Предмет
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ
		|	МИНИМУМ(Исполнитель),
		|	МИНИМУМ(Автор),
		|	МИНИМУМ(ПринятаКИсполнению),
		|	МИНИМУМ(НаКонтроле),
		|	МИНИМУМ(Выполнена),
		|	МИНИМУМ(ДолжностнаяПозиция),
		|	МИНИМУМ(CRM_Фотография),
		|	МИНИМУМ(СрокИсполнения),
		|	МАКСИМУМ(ТрудоемкостьНабора)
		|ПО
		|	Задача,
		|	НаборЗадач
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_МероприятиеСторонниеЛица.Ссылка КАК ДокументСсылка,
		|	ТИПЗНАЧЕНИЯ(CRM_МероприятиеСторонниеЛица.Ссылка) КАК ТипДокумента,
		|	CRM_МероприятиеСторонниеЛица.Партнер КАК Предмет,
		|	НЕОПРЕДЕЛЕНО КАК ДополнительноеУсловие
		|ИЗ
		|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
		|		ПО (ВТ_Задачи.Задача = CRM_МероприятиеСторонниеЛица.Ссылка.ДокументОснование)
		|			И (CRM_МероприятиеСторонниеЛица.Ссылка.ПометкаУдаления = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_МероприятиеСторонниеЛица.Ссылка,
		|	ТИПЗНАЧЕНИЯ(CRM_МероприятиеСторонниеЛица.Ссылка),
		|	CRM_МероприятиеСторонниеЛица.вогТорговаяТочка,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Документ.CRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
		|		ПО (ВТ_Задачи.Задача = CRM_МероприятиеСторонниеЛица.Ссылка.ДокументОснование)
		|			И (CRM_МероприятиеСторонниеЛица.Ссылка.ПометкаУдаления = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вогАнкета.Ссылка,
		|	ТИПЗНАЧЕНИЯ(вогАнкета.ВариантОпроса),
		|	вогАнкета.Респондент,
		|	вогАнкета.ВариантОпроса
		|ИЗ
		|	Документ.вогАнкета КАК вогАнкета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
		|		ПО (ВТ_Задачи.Задача.БизнесПроцесс = вогАнкета.ДокументОснование)
		|			И (вогАнкета.ПометкаУдаления = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вогКомандировка.Ссылка,
		|	ТИПЗНАЧЕНИЯ(вогКомандировка.Ссылка),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Документ.вогКомандировка КАК вогКомандировка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
		|		ПО (ВТ_Задачи.Задача = вогКомандировка.ДокументОснование)
		|			И (вогКомандировка.ПометкаУдаления = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка,
		|	ТИПЗНАЧЕНИЯ(ЗадачаИсполнителя.Ссылка),
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
		|		ПО (ВТ_Задачи.Задача = ЗадачаИсполнителя.Предмет)
		|			И (ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка КАК ДанныеФайла,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|	ЕСТЬNULL(вогПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла, НЕОПРЕДЕЛЕНО) КАК ВидФайла,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Родитель КАК Родитель,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Родитель.Родитель КАК ОсновнойРодитель,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Наименование КАК Наименование,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Расширение КАК Расширение
		|ИЗ
		|	Справочник.ЗадачаИсполнителяПрисоединенныеФайлы КАК ЗадачаИсполнителяПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
		|		ПО ЗадачаИсполнителяПрисоединенныеФайлы.ВладелецФайла = ВТ_Задачи.Задача
		|			И (ЗадачаИсполнителяПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ)
		|			И (ЗадачаИсполнителяПрисоединенныеФайлы.ЭтоГруппа = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК вогПрисоедниненныеФайлыОбъектовПоВидам
		|		ПО ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка = вогПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_БизнесПроцессПрисоединенныеФайлы.Ссылка,
		|	CRM_БизнесПроцессПрисоединенныеФайлы.ВладелецФайла,
		|	НЕОПРЕДЕЛЕНО,
		|	CRM_БизнесПроцессПрисоединенныеФайлы.Родитель,
		|	НЕОПРЕДЕЛЕНО,
		|	CRM_БизнесПроцессПрисоединенныеФайлы.Наименование,
		|	CRM_БизнесПроцессПрисоединенныеФайлы.Расширение
		|ИЗ
		|	Справочник.CRM_БизнесПроцессПрисоединенныеФайлы КАК CRM_БизнесПроцессПрисоединенныеФайлы
		|ГДЕ
		|	CRM_БизнесПроцессПрисоединенныеФайлы.ВладелецФайла = &БизнесПроцесс
		|	И CRM_БизнесПроцессПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
		|	И (CRM_БизнесПроцессПрисоединенныеФайлы.ЭтоГруппа = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", 	Объект.БизнесПроцесс);
	Запрос.УстановитьПараметр("Вид", 			Перечисления.CRM_ВидыТочекМаршрута.Завершение);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаЗадачи = РезультатЗапроса[9].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаДокументовВыполнения = РезультатЗапроса[10].Выгрузить();
	ТаблицаФайлов = РезультатЗапроса[11].Выгрузить();
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаФайлов Цикл
		
		НоваяСтрокаФайл = ТаблицаПрисоединенныеФайлы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаФайл, СтрокаТабличнойЧасти);
		
		НоваяСтрокаФайл.ИдентификаторГруппы = вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(
			СтрокаТабличнойЧасти.Родитель.УникальныйИдентификатор());
		НоваяСтрокаФайл.Представление 		= СтрШаблон(НСтр("ru = '%1.%2'"), СтрокаТабличнойЧасти.Наименование, СтрокаТабличнойЧасти.Расширение);
		
	КонецЦикла;
	
	СчетчикВыполнено 				= 0;
	СчетчикПереданоНаКонтроль 		= 0;
	СчетчикПринятоКИсполнению 		= 0;
	СчетчикОбщий 					= 0;
	
	СчетчикГруппВыполнено 			= 1;
	СчетчикГруппПереданоНаКонтроль 	= 1;
	СчетчикГруппПринятоКИсполнению 	= 1;
	СчетчикГруппОбщий 				= 1;
	
	КоличествоЭлементовВГруппе 		= 3;
	
	ИндексСтроки 					= 0;
	
	ВсегоОжидаемыхРезультатов 		= 0;
	ВсегоВыполненныхРезультатов 	= 0;
	ВсегоТрудоемкость 				= Дата(1,1,1);
	
	Пока ВыборкаЗадачи.Следующий() Цикл
		
		НоваяСтрокаЗадача = ТаблицаЗадачи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗадача, ВыборкаЗадачи);
		
		Если ВыборкаЗадачи.Выполнена
			Или Не ВыборкаЗадачи.НаКонтроле Тогда
			
			НоваяСтрокаЗадача.Автор = "";
			
		Иначе
			НоваяСтрокаЗадача.Автор = СтрШаблон(НСтр("ru = 'от %1'"), ВыборкаЗадачи.Автор);
		КонецЕсли;
		
		ИдентификаторЗадачи = вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор();
		
		НоваяСтрокаЗадача.ИдентификаторЗадачи = ИдентификаторЗадачи;
		
		Если ЗначениеЗаполнено(ВыборкаЗадачи.CRM_Фотография) Тогда
			НоваяСтрокаЗадача.Картинка = НавигационнаяСсылкаКартинки(ВыборкаЗадачи.CRM_Фотография, Новый УникальныйИдентификатор());
		Иначе
			НоваяСтрокаЗадача.Картинка = ПоместитьВоВременноеХранилище(ФотоСотрудника, Новый УникальныйИдентификатор());
		КонецЕсли;
		
		Если Не ВыборкаЗадачи.Выполнена И ВыборкаЗадачи.СрокИсполнения < ТекущаяДата() Тогда
			НоваяСтрокаЗадача.КартинкаСрок = ПоместитьВоВременноеХранилище(КартинкаСрокИстек, Новый УникальныйИдентификатор());
		КонецЕсли;
		
		//
		КоличествоОжидаемыхРезультатов 		= 0;
		КоличествоВыполненныхРезультатов 	= 0;
		ТрудоемкостьЗадачи 					= Дата(1,1,1);
		
		ВыборкаНаборы = ВыборкаЗадачи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНаборы.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаНаборы.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ТекущееОжидание 	= 0;
				ТекущееВыполнение 	= 0;
				ОжидаемыйРезультат 	= Неопределено;
				РезультатВыполнения = Неопределено;
				
				НоваяСтрока = ТаблицаПунктыЗадач.Добавить();
				НоваяСтрока.Задача 					= ВыборкаЗадачи.Задача;
				НоваяСтрока.НомерСтроки 			= ВыборкаДетальныеЗаписи.НомерСтроки;
				НоваяСтрока.Пункт 					= ВыборкаДетальныеЗаписи.Пункт;
				НоваяСтрока.Трудоемкость 			= ВыборкаДетальныеЗаписи.Трудоемкость;
				НоваяСтрока.НаборЗадач 				= ВыборкаДетальныеЗаписи.НаборЗадач;
				НоваяСтрока.Принято 				= ВыборкаДетальныеЗаписи.Принято;
				
				Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.НаборЗадач) Тогда
					ИдентификаторНабора = "";
				Иначе
					ИдентификаторНабора = вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(
						XMLСтрока(ВыборкаДетальныеЗаписи.НаборЗадач));
				КонецЕсли;
				
				НоваяСтрока.ИдентификаторНабора 	= ИдентификаторНабора;
				НоваяСтрока.ТрудоемкостьНабора 		= ВыборкаДетальныеЗаписи.ТрудоемкостьНабора;
				НоваяСтрока.ТиповаяЗадача 			= ВыборкаДетальныеЗаписи.ТиповаяЗадача;
				
				Если Не ЗначениеЗаполнено(НоваяСтрока.НаборЗадач) Тогда
					ТрудоемкостьЗадачи 	= ТрудоемкостьЗадачи + (ВыборкаДетальныеЗаписи.Трудоемкость - Дата(1,1,1));
					ВсегоТрудоемкость 	= ВсегоТрудоемкость + (ВыборкаДетальныеЗаписи.Трудоемкость - Дата(1,1,1));
				КонецЕсли;
				
				Если ВыборкаДетальныеЗаписи.Предмет = Неопределено Тогда
					НоваяСтрока.Предмет 			= "Предметы";
				Иначе
					НоваяСтрока.Предмет 			= ВыборкаДетальныеЗаписи.Предмет;
				КонецЕсли;
				
				НоваяСтрока.Идентификатор 			= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(
					ВыборкаДетальныеЗаписи.Идентификатор);
				НоваяСтрока.ИдентификаторЗадачи 	= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(
					ВыборкаДетальныеЗаписи.ИдентификаторЗадачи);
				
				Если Не ВыборкаДетальныеЗаписи.Комментарий = Неопределено Тогда
					НоваяСтрока.Комментарий 		= ВыборкаДетальныеЗаписи.Комментарий.Получить();
				КонецЕсли;
				
				Если Не ВыборкаДетальныеЗаписи.КомментарийИсполнитель = Неопределено Тогда
					НоваяСтрока.КомментарийИсполнитель 	= ВыборкаДетальныеЗаписи.КомментарийИсполнитель.Получить();
				КонецЕсли;
				
				Если Не ВыборкаДетальныеЗаписи.ОжидаемыйРезультат = Неопределено Тогда
					
					ОжидаемыйРезультат = ВыборкаДетальныеЗаписи.ОжидаемыйРезультат.Получить();
					
					Если Не ОжидаемыйРезультат = Неопределено Тогда
						
						ТекущееОжидание 				= ОжидаемыйРезультат.Количество();
						КоличествоОжидаемыхРезультатов 	= КоличествоОжидаемыхРезультатов + ТекущееОжидание;
						
						НоваяСтрока.ОжидаемыйРезультат = ПоместитьВоВременноеХранилище(ОжидаемыйРезультат, Новый УникальныйИдентификатор());
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ВыборкаДетальныеЗаписи.РезультатВыполнения = Неопределено
					И Не ОжидаемыйРезультат = Неопределено
					И ТаблицаДокументовВыполнения.Количество() > 0 Тогда
					
					РезультатВыполнения = Новый ТаблицаЗначений;
					РезультатВыполнения.Колонки.Добавить("ЗначениеИсполнитель", Новый ОписаниеТипов());
					РезультатВыполнения.Колонки.Добавить("Пометка", 			вогБизнесПроцессыИЗадачиПовтИсп.ОписаниеТипаБулево());
					
					ПараметрыОтбораСтрок = Новый Структура;
					ПараметрыОтбораСтрок.Вставить("Предмет", НоваяСтрока.Предмет);
					
					СтрокиДокументовВыполнения = ТаблицаДокументовВыполнения.НайтиСтроки(ПараметрыОтбораСтрок);
					
					Если СтрокиДокументовВыполнения.Количество() > 0 Тогда
						
						Для Каждого СтрокаОжидаемогоРезультата Из ОжидаемыйРезультат Цикл
							
							СтрокаТабличнойЧасти = РезультатВыполнения.Добавить();
							
							Для Каждого СтрокаДокумент Из СтрокиДокументовВыполнения Цикл
								Если СтрокаДокумент.ТипДокумента = ТипЗнч(СтрокаОжидаемогоРезультата.Приложение) Тогда
									
									Если СтрокаДокумент.ДополнительноеУсловие = Неопределено Тогда
										СтрокаТабличнойЧасти.ЗначениеИсполнитель 	= СтрокаОжидаемогоРезультата.Приложение;
										
									ИначеЕсли СтрокаОжидаемогоРезультата.Приложение = СтрокаДокумент.ДополнительноеУсловие Тогда
										СтрокаТабличнойЧасти.ЗначениеИсполнитель 	= СтрокаОжидаемогоРезультата.Приложение;
									КонецЕсли;
									
								КонецЕсли;
							КонецЦикла;
							
						КонецЦикла;
						
					КонецЕсли;
					
				ИначеЕсли Не ВыборкаДетальныеЗаписи.РезультатВыполнения = Неопределено Тогда
					
					РезультатВыполнения = ВыборкаДетальныеЗаписи.РезультатВыполнения.Получить();
					
				КонецЕсли;
				
				Если Не РезультатВыполнения = Неопределено Тогда
					
					ПараметрыОтбораСтрок = Новый Структура;
					ПараметрыОтбораСтрок.Вставить("Пометка", Ложь);
					
					НайденныеСтроки = РезультатВыполнения.НайтиСтроки(ПараметрыОтбораСтрок);
					
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						// Документы
						ПараметрыОтбораСтрок = Новый Структура;
						ПараметрыОтбораСтрок.Вставить("Предмет", НоваяСтрока.Предмет);
						
						СтрокиДокументовВыполнения = ТаблицаДокументовВыполнения.НайтиСтроки(ПараметрыОтбораСтрок);
						
						Если СтрокиДокументовВыполнения.Количество() > 0 Тогда
							
							Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
								
								Пометка = Ложь;
								
								Для Каждого СтрокаДокумент Из СтрокиДокументовВыполнения Цикл
									
									Если СтрокаДокумент.ТипДокумента = ТипЗнч(СтрокаТабличнойЧасти.ЗначениеИсполнитель) Тогда
										
										Если СтрокаДокумент.ДополнительноеУсловие = Неопределено Тогда
											СтрокаТабличнойЧасти.ЗначениеИсполнитель 	= СтрокаДокумент.ДокументСсылка;
											Пометка = Истина;
										ИначеЕсли СтрокаТабличнойЧасти.ЗначениеИсполнитель = СтрокаДокумент.ДополнительноеУсловие Тогда
											СтрокаТабличнойЧасти.ЗначениеИсполнитель 	= СтрокаДокумент.ДокументСсылка;
											Пометка = Истина;
										КонецЕсли;
										
									КонецЕсли;
									
								КонецЦикла;
								
								СтрокаТабличнойЧасти.Пометка = Пометка;
								
							КонецЦикла;
							
						КонецЕсли;
						
						// Файлы
						Для Каждого СтрокаВыполнение Из НайденныеСтроки Цикл
							
							Если Не ТипЗнч(СтрокаВыполнение.ЗначениеИсполнитель) = Тип("СправочникСсылка.вогВидыПрисоединенныхФайлов") Тогда
								Продолжить;
							КонецЕсли;
							
							ПараметрыОтбораСтрок = Новый Структура;
							ПараметрыОтбораСтрок.Вставить("ВидФайла", СтрокаВыполнение.ЗначениеИсполнитель);
							
							СтрокиФайлов = ТаблицаФайлов.НайтиСтроки(ПараметрыОтбораСтрок);
							
							Для Каждого СтрокаФайл Из СтрокиФайлов Цикл
								
								ИдентификаторГруппыФайлов = СтрокаФайл.ОсновнойРодитель.УникальныйИдентификатор();
								
								Если ИдентификаторГруппыФайлов = ВыборкаДетальныеЗаписи.ИдентификаторЗадачи Тогда
									СтрокаВыполнение.ЗначениеИсполнитель 	= СтрокаФайл.ДанныеФайла;
									СтрокаВыполнение.Пометка 				= Истина;
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЦикла;
						
					КонецЕсли;
					
					ПараметрыОтбораСтрок = Новый Структура;
					ПараметрыОтбораСтрок.Вставить("Пометка", Истина);
					
					НайденныеСтроки 					= РезультатВыполнения.НайтиСтроки(ПараметрыОтбораСтрок);
					ТекущееВыполнение 					= НайденныеСтроки.Количество();
					
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Идентификатор) Тогда
						КоличествоВыполненныхРезультатов 	= КоличествоВыполненныхРезультатов + ТекущееВыполнение;
					КонецЕсли;
					
					НоваяСтрока.РезультатВыполнения = ПоместитьВоВременноеХранилище(РезультатВыполнения, Новый УникальныйИдентификатор());
					
				КонецЕсли;
				
				НоваяСтрока.Выполнено = (ТекущееВыполнение >= ТекущееОжидание);
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ВыборкаНаборы.НаборЗадач)
				И Не ВыборкаНаборы.ТрудоемкостьНабора = Дата(1,1,1) Тогда
				ТрудоемкостьЗадачи 	= ТрудоемкостьЗадачи + (ВыборкаНаборы.ТрудоемкостьНабора - Дата(1,1,1));
				ВсегоТрудоемкость 	= ВсегоТрудоемкость + (ВыборкаНаборы.ТрудоемкостьНабора - Дата(1,1,1));
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрокаЗадача.Трудоемкость 						= ТрудоемкостьЗадачи;
		НоваяСтрокаЗадача.КоличествоОжидаемыхРезультатов 	= КоличествоОжидаемыхРезультатов;
		НоваяСтрокаЗадача.КоличествоВыполненныхРезультатов 	= КоличествоВыполненныхРезультатов;
		
		Если КоличествоОжидаемыхРезультатов > 0 Тогда
			НоваяСтрокаЗадача.ПроцентВыполнения = КоличествоВыполненныхРезультатов / КоличествоОжидаемыхРезультатов * 100;
		КонецЕсли;
		
		НоваяСтрокаЗадача.Исполнение = СтрШаблон(
		НСтр("ru = 'Ожидаемых результатов - %1 Выполнено - %2'"),
		КоличествоОжидаемыхРезультатов,
		КоличествоВыполненныхРезультатов);
		
		//////////////////////////////////////////
		Если ВыборкаЗадачи.Выполнена Тогда
			
			СчетчикВыполнено = СчетчикВыполнено + 1;
			
			ИмяГруппыРодителя 	= "ГруппаЗадачиВыполнено";
			ИмяОбщейГруппы 		= СтрШаблон("ОбщаяГруппа_Выполнено_%1", СчетчикГруппВыполнено);
			
			Если СчетчикВыполнено = КоличествоЭлементовВГруппе Тогда
				СчетчикГруппВыполнено = СчетчикГруппВыполнено + 1;
			КонецЕсли;
			
			Если (СчетчикВыполнено / КоличествоЭлементовВГруппе) = 1 Тогда
				СчетчикВыполнено = 0;
			КонецЕсли;
			
			
		ИначеЕсли ВыборкаЗадачи.НаКонтроле Тогда
			
			СчетчикПереданоНаКонтроль = СчетчикПереданоНаКонтроль + 1;
			
			ИмяГруппыРодителя 	= "ГруппаЗадачиПереданоНаКонтроль";
			ИмяОбщейГруппы 		= СтрШаблон("ОбщаяГруппа_ПереданоНаКонтроль_%1", СчетчикГруппПереданоНаКонтроль);
			
			Если СчетчикПереданоНаКонтроль = КоличествоЭлементовВГруппе Тогда
				СчетчикГруппПереданоНаКонтроль = СчетчикГруппПереданоНаКонтроль + 1;
			КонецЕсли;
			
			Если (СчетчикПереданоНаКонтроль / КоличествоЭлементовВГруппе) = 1 Тогда
				СчетчикПереданоНаКонтроль = 0;
			КонецЕсли;
			
		ИначеЕсли ВыборкаЗадачи.ПринятаКИсполнению Тогда
			
			СчетчикПринятоКИсполнению = СчетчикПринятоКИсполнению + 1;
			
			ИмяГруппыРодителя 	= "ГруппаЗадачиПринятоКИсполнению";
			ИмяОбщейГруппы 		= СтрШаблон("ОбщаяГруппа_ПринятоКИсполнению_%1", СчетчикГруппПринятоКИсполнению);
			
			Если СчетчикПринятоКИсполнению = КоличествоЭлементовВГруппе Тогда
				СчетчикГруппПринятоКИсполнению = СчетчикГруппПринятоКИсполнению + 1;
			КонецЕсли;
			
			Если (СчетчикПринятоКИсполнению / КоличествоЭлементовВГруппе) = 1 Тогда
				СчетчикПринятоКИсполнению = 0;
			КонецЕсли;
			
		Иначе
			
			СчетчикОбщий = СчетчикОбщий + 1;
			
			ИмяГруппыРодителя 	= "ГруппаЗадачиПоставлена";
			ИмяОбщейГруппы 		= СтрШаблон("ОбщаяГруппа_ВсеЗадачи_%1", СчетчикГруппОбщий);
			
			Если СчетчикОбщий = КоличествоЭлементовВГруппе Тогда
				СчетчикГруппОбщий = СчетчикГруппОбщий + 1;
			КонецЕсли;
			
			Если (СчетчикОбщий / КоличествоЭлементовВГруппе) = 1 Тогда
				СчетчикОбщий = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		НастройкаЭлемента = Новый Структура;
		НастройкаЭлемента.Вставить("ГруппировкаПодчиненных", 	"ГоризонтальнаяВсегда");
		НастройкаЭлемента.Вставить("РастягиватьПоВертикали", 	Ложь);
		НастройкаЭлемента.Вставить("РастягиватьПоГоризонтали", 	Ложь);
		НастройкаЭлемента.Вставить("Ширина", 					124);
		
		ОбщаяГруппа = вогБизнесПроцессыИЗадачиСервер.СоздатьГруппуЭлементовПоля(
			ЭтотОбъект,
			ИмяОбщейГруппы,
			Элементы[ИмяГруппыРодителя],
			,
			НастройкаЭлемента);
		
		НоваяСтрока = СозданныеЭлементы.Добавить();
		НоваяСтрока.ИмяЭлемента 	= ИмяОбщейГруппы;
		НоваяСтрока.Идентификатор 	= ИдентификаторЗадачи;
		
		НастройкаЭлемента.ГруппировкаПодчиненных 				= "Вертикальная";
		НастройкаЭлемента.РастягиватьПоГоризонтали 				= "Ложь";
		НастройкаЭлемента.Ширина 								= 40;
		НастройкаЭлемента.Вставить("ЦветФона", 					Новый Цвет(248, 248, 248));
		
		ИмяГруппы 		= СтрШаблон("ГруппаКарточка_%1", ИдентификаторЗадачи);
		ГруппаКарточка 	= вогБизнесПроцессыИЗадачиСервер.СоздатьГруппуЭлементовПоля(
			ЭтотОбъект,
			ИмяГруппы,
			ОбщаяГруппа,
			,
			НастройкаЭлемента);
		
		вогБизнесПроцессыИЗадачиСервер.ДобавитьЭлементыПоНастройке(
			ЭтотОбъект,
			ИдентификаторЗадачи,
			ГруппаКарточка,
			"СписокЗадач",
			ИндексСтроки);
		
		ИндексСтроки = ИндексСтроки + 1;
		
		ВсегоОжидаемыхРезультатов 	= ВсегоОжидаемыхРезультатов + КоличествоОжидаемыхРезультатов;
		ВсегоВыполненныхРезультатов = ВсегоВыполненныхРезультатов + КоличествоВыполненныхРезультатов;
		
	КонецЦикла;
	
	ВыполненныеРезультаты 	= СтрШаблон(НСтр("ru = '%1 из %2'"), ВсегоВыполненныхРезультатов, ВсегоОжидаемыхРезультатов);
	Если ВсегоОжидаемыхРезультатов <> 0 Тогда
		ОбщееВыполнение 	= ВсегоВыполненныхРезультатов / ВсегоОжидаемыхРезультатов * 100;
	Иначе
		ОбщееВыполнение 	= ВсегоВыполненныхРезультатов * 100;
	КонецЕсли;
	
	КоличествоЗадач = ТаблицаЗадачи.Количество();
	
	Если КоличествоЗадач <> 0 Тогда
		СреднееКоличествоЗадач 	= ВсегоОжидаемыхРезультатов / КоличествоЗадач;
		СредняяТрудоемкость 	= (ВсегоТрудоемкость - Дата(1,1,1)) / 60 / 60 / КоличествоЗадач;
	Иначе
		СреднееКоличествоЗадач 	= 0;
		СредняяТрудоемкость 	= 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьТаблицуЗадач()
	
	Для Каждого СтрокаТабличнойЧасти Из СозданныеЭлементы Цикл
		
		Элемент = Элементы.Найти(СтрокаТабличнойЧасти.ИмяЭлемента);
		
		Если Не Элемент = Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	СозданныеЭлементы.Очистить();
	
	ЗаполнитьТаблицуЗадач();
	УстановитьВидимостьДоступностьЭлементовФормы();
	УстановитьВидимостьДоступностьКомандФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуФайлов(ВладелецФайлов)
	
	Если ТипЗнч(ВладелецФайлов) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
		ИмяСписка 		= "ФайлыАвтор";
		ИмяПоляПоиска 	= "Идентификатор";
		ФайлЗадачи 		= Ложь;
	Иначе
		ИмяСписка 		= "ФайлыИсполнитель";
		ИмяПоляПоиска 	= "ИдентификаторЗадачи";
		ФайлЗадачи 		= Истина;
	КонецЕсли;
	
	//Если МассивФайлов = Неопределено Тогда
		МассивФайлов = Новый Массив;
		РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВладелецФайлов, МассивФайлов);
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(вогПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла, НЕОПРЕДЕЛЕНО) КАК ВидФайла,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.ПометкаУдаления КАК ПометкаУдаления,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Родитель КАК Родитель,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Родитель.Родитель КАК ОсновнойРодитель,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Наименование КАК Наименование,
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Расширение КАК Расширение
		|ИЗ
		|	Справочник.ЗадачаИсполнителяПрисоединенныеФайлы КАК ЗадачаИсполнителяПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК вогПрисоедниненныеФайлыОбъектовПоВидам
		|		ПО ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка = вогПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл
		|ГДЕ
		|	ЗадачаИсполнителяПрисоединенныеФайлы.Ссылка В(&МассивФайлов)
		|	И ЗадачаИсполнителяПрисоединенныеФайлы.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("МассивФайлов", МассивФайлов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
		ЭлементФайл = ВыборкаДетальныеЗаписи.Ссылка;
		
		ДобавитьФайл 	= Истина;
		УдалитьФайл 	= Ложь;
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("ДанныеФайла", ЭлементФайл);
		
		НайденныеСтроки = ТаблицаПрисоединенныеФайлы.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Если ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
				
				ДобавитьФайл 	= Ложь;
				УдалитьФайл 	= Истина;
				
			Иначе
				
				ДобавитьФайл 	= Ложь;
				УдалитьФайл 	= Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ВыборкаДетальныеЗаписи.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВидФайла)
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОсновнойРодитель) Тогда
			
			ГруппаФайла 			= ВыборкаДетальныеЗаписи.ОсновнойРодитель;
			ИдентификаторЭлемента 	= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(XMLСтрока(ГруппаФайла));
			
		Иначе
			
			ГруппаФайла 			= ВыборкаДетальныеЗаписи.Родитель;
			ИдентификаторЭлемента 	= вогБизнесПроцессыИЗадачиСервер.СформироватьУникальныйИдентификатор(XMLСтрока(ГруппаФайла));
			
		КонецЕсли;
		
		Если ДобавитьФайл Тогда
			
			ПредставлениеФайла = СтрШаблон("%1.%2", ВыборкаДетальныеЗаписи.Наименование, ВыборкаДетальныеЗаписи.Расширение);
			
			НоваяСтрока = ТаблицаПрисоединенныеФайлы.Добавить();
			НоваяСтрока.ДанныеФайла 	= ЭлементФайл;
			НоваяСтрока.Идентификатор 	= ИдентификаторЭлемента;
			НоваяСтрока.Представление 	= ПредставлениеФайла;
			НоваяСтрока.Расширение 		= СтрЗаменить(ВыборкаДетальныеЗаписи.Расширение, ".", "");
			НоваяСтрока.ФайлЗадачи 		= ФайлЗадачи;
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВидФайла) Тогда
				НоваяСтрока.ВидФайла 	= ВыборкаДетальныеЗаписи.ВидФайла;
			КонецЕсли;
			
		ИначеЕсли УдалитьФайл Тогда
			
			ИндексСтроки = ТаблицаПрисоединенныеФайлы.Индекс(НайденныеСтроки[0]);
			ТаблицаПрисоединенныеФайлы.Удалить(ИндексСтроки);
			
		КонецЕсли;
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить(ИмяПоляПоиска, ИдентификаторЭлемента);
		
		НайденныеСтроки = ТаблицаЗадачи.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВидФайла) Тогда
				
				Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
					
					ИмяТаблицыРезультат = СтрШаблон("ТаблицаРезультаты_%1", СтрокаТабличнойЧасти.ИдентификаторЗадачи);
					
					Для Каждого СтрокаВыполнение Из ЭтотОбъект[ИмяТаблицыРезультат] Цикл
						//УстановитьВыполнениеПриложенияЗадачи(ЭтотОбъект, СтрокаВыполнение, ИмяТаблицыРезультат);
					КонецЦикла;
					
				КонецЦикла;
				
			Иначе
				
				Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
					
					Если ДобавитьФайл Тогда
						СтрокаТабличнойЧасти[ИмяСписка].Добавить(ЭлементФайл, НоваяСтрока.Представление);
					ИначеЕсли УдалитьФайл Тогда
						
						СтрокаСписка = СтрокаТабличнойЧасти[ИмяСписка].НайтиПоЗначению(ЭлементФайл);
						
						Если Не СтрокаСписка = Неопределено Тогда
							СтрокаТабличнойЧасти[ИмяСписка].Удалить(СтрокаСписка);
						КонецЕсли;
						
					КонецЕсли;
					
					ИндексСтроки = ТаблицаЗадачи.Индекс(СтрокаТабличнойЧасти);
					ИдентификаторЭлемента = СтрокаТабличнойЧасти.ИдентификаторЗадачи; ////////////////////////////////////
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыЗадачи(СтруктураСтроки)
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Задача", ТекущаяЗадача);
	
	НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	
	ТекущееКоличествоЗадач 		= НайденныеСтроки.Количество();
	ТекущийПроцентВыполнения 	= СтрШаблон(НСтр("ru = '%1 %2'"), СтруктураСтроки.ПроцентВыполнения, "%");
	ТекущееИсполнение 			= СтрШаблон(
		"%1 из %2",
		СтруктураСтроки.КоличествоВыполненныхРезультатов,
		СтруктураСтроки.КоличествоОжидаемыхРезультатов);
		
	ОбщаяТрудоемкость = СтруктураСтроки.Трудоемкость;
	
	вогБизнесПроцессыИЗадачиСервер.ЗаполнитьПредметы(ЭтотОбъект, ТекущаяЗадача, "ТаблицаПунктыЗадач");
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Задача", ТекущаяЗадача);
	
	НайденныеСтроки = ТаблицаЗадачи.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		
		Если СтрокаТабличнойЧасти.Выполнена Тогда
			ТекущийСтатусЗадачи = "Выполнена";
		ИначеЕсли СтрокаТабличнойЧасти.НаКонтроле Тогда
			ТекущийСтатусЗадачи = "НаКонтроле";
		ИначеЕсли СтрокаТабличнойЧасти.ПринятаКИсполнению Тогда
			ТекущийСтатусЗадачи = "ПринятаКИсполнению";
		Иначе
			ТекущийСтатусЗадачи = "НаИсполнении";
		КонецЕсли;
		
	КонецЦикла;
	
	// ++ VOG Солодов В.В. 03.12.2020 CRM-1099
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ТекущаяЗадача,
		"Исполнитель, ДатаНачала, СрокИсполнения, Важность, ОсновнойОбъектАдресации",
		Истина);
		
	Если ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель) Тогда
		ТекущийИсполнитель 	= РеквизитыЗадачи.Исполнитель;
	Иначе
		ТекущийИсполнитель 	= РеквизитыЗадачи.ОсновнойОбъектАдресации;
	КонецЕсли;
	// До изменения
	//РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	//	ТекущаяЗадача,
	//	"Исполнитель, ДатаНачала, СрокИсполнения, Важность",
	//	Истина);
	//	
	//ТекущийИсполнитель 	= РеквизитыЗадачи.Исполнитель;
	// -- VOG Солодов В.В. 03.12.2020 CRM-1099
	ТекущаяДатаНачала 	= РеквизитыЗадачи.ДатаНачала;
	ТекущийСрок 		= РеквизитыЗадачи.СрокИсполнения;
	ТекущаяВажность 	= РеквизитыЗадачи.Важность;
	
	МакетЗадачи = СформироватьМакетЗадачи("Предметы");
	
	// Обсуждения
	//КонтекстОбсуждения = Новый КонтекстОбсужденияСистемыВзаимодействия(ПолучитьНавигационнуюСсылку(ТекущаяЗадача));
	//
	//ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия;
	//ОтборОбсуждений.КонтекстноеОбсуждение 	= Истина;
	//ОтборОбсуждений.КонтекстОбсуждения 		= КонтекстОбсуждения;
	//
	//Обсуждения = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
	//
	//Для Каждого Обсуждение Из Обсуждения Цикл
	//	Обсуждение.
		//СистемаВзаимодействия.УстановитьОтображениеОповещенийОбсуждения(Обсуждение.Идентификатор, ОтображениеОповещенийСистемыВзаимодействия.Обычное);
	//КонецЦикла;
	//
	//ЭтотОбъект.ОтображениеОбсуждений = ОтображениеОбсужденийФормы.Отображать; 
	//
	//ТекущаяЗадачаОбъект = ТекущаяЗадача.ПолучитьОбъект();
	//ЗначениеВРеквизитФормы(ТекущаяЗадачаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Функция СформироватьМакетЗадачи(Предмет)
	
	Возврат вогБизнесПроцессыИЗадачиСервер.СформироватьМакетЗадачиИсполнителя(ЭтотОбъект, Предмет, Истина);
	
КонецФункции

&НаСервереБезКонтекста
Процедура МакетЗадачиВыборНаСервере(РезультатыВыполнения, Отказ, УстанавливаемаяПометка)
	
	Для Каждого ЭлементРезультат Из РезультатыВыполнения Цикл
		
		РезультатВыполнения = ПолучитьИзВременногоХранилища(ЭлементРезультат);
		
		Если Не ТипЗнч(РезультатВыполнения) = Тип("ТаблицаЗначений")
			Или РезультатВыполнения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из РезультатВыполнения Цикл
			
			Если Не ТипЗнч(СтрокаТабличнойЧасти.ЗначениеИсполнитель) = Тип("ДокументСсылка.вогАнкета") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗначениеИсполнитель) Тогда
				
				СтатусАнкеты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаТабличнойЧасти.ЗначениеИсполнитель,
					"Статус",
					Истина);
				
				Если (СтатусАнкеты = Справочники.вогШаблоныСтатусов.НеСогласован И УстанавливаемаяПометка = Истина)
					Или (СтатусАнкеты = Справочники.вогШаблоныСтатусов.Согласован И УстанавливаемаяПометка = Ложь) Тогда
					Отказ = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещениеЗаписьАнкетыНаСервере(ЕстьИзменения, Знач Источник, Знач Параметр)
	
	Пометка = (Параметр.Статус = Справочники.вогШаблоныСтатусов.Согласован);
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Предмет", Параметр.Предмет);
	
	НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
		
		ТаблицаРезультат = ПолучитьИзВременногоХранилища(СтрокаТабличнойЧасти.РезультатВыполнения);
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("ЗначениеИсполнитель", Источник);
		
		СтрокиРезультат = ТаблицаРезультат.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Для Каждого СтрокаРезультат Из СтрокиРезультат Цикл
			
			Если Не СтрокаРезультат.Пометка Тогда
				СтрокаРезультат.Пометка = Пометка;
			КонецЕсли;
			
			ЕстьИзменения = Истина;
			
		КонецЦикла;
		
		Если СтрокиРезультат.Количество() > 0 Тогда
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Пометка", Ложь);
			
			Если ТаблицаРезультат.НайтиСтроки(ПараметрыОтбораСтрок).Количество() = 0 Тогда
				//СтрокаТабличнойЧасти.Выполнено 	= Истина;
				СтрокаТабличнойЧасти.Принято = (Источник.Статус = Справочники.вогШаблоныСтатусов.Согласован);
			КонецЕсли;
			
			СтрокаТабличнойЧасти.РезультатВыполнения = ПоместитьВоВременноеХранилище(
				ТаблицаРезультат, Новый УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредметыПредмет.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПредметы.Группа");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", 	Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 		ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", 			НСтр("ru = 'Объекты'"));
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредметыПредмет.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПредметы.ПредметБП");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", 	Истина);
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредметыПредмет.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоПредметы.Группа");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", 	Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 		ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

#Область УправлениеЭлементами

&НаСервере
Процедура УстановитьВидимостьКнопокВыполнения()
	
	ВидимостьКнопок = Ложь;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяЗадача, "БизнесПроцесс, CRM_ТочкаМаршрута, Выполнена", Истина);
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(РеквизитыЗадачи.БизнесПроцесс);
	НаборЭтапов.Прочитать();
	
	Если РеквизитыЗадачи.БизнесПроцесс.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПоручениеНовое
		И Не РеквизитыЗадачи.Выполнена
		И (НаборЭтапов[2].ТочкаМаршрута = РеквизитыЗадачи.CRM_ТочкаМаршрута
			Или НаборЭтапов[3].ТочкаМаршрута = РеквизитыЗадачи.CRM_ТочкаМаршрута
			Или НаборЭтапов[4].ТочкаМаршрута = РеквизитыЗадачи.CRM_ТочкаМаршрута) Тогда
			
		//НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
		//НаборИсполнителей.Отбор.Объект.Установить(РеквизитыЗадачи.БизнесПроцесс);
		//НаборИсполнителей.Отбор.Исполнитель.Установить(ТекущийПользователь);
		//НаборИсполнителей.Прочитать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		// ++ VOG Солодов В.В. 02.06.2021 DEV-608
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	CRM_ИсполнителиЭтаповБизнесПроцессов.Объект КАК Объект,
		|	ЕСТЬNULL(ТаблицаТочкиПроверки.Исполнитель, НЕОПРЕДЕЛЕНО) КАК Контролер
		|ИЗ
		|	РегистрСведений.CRM_ИсполнителиЭтаповБизнесПроцессов КАК CRM_ИсполнителиЭтаповБизнесПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ИсполнителиЭтаповБизнесПроцессов КАК ТаблицаТочкиПроверки
		|		ПО (CRM_ИсполнителиЭтаповБизнесПроцессов.Объект = ТаблицаТочкиПроверки.Объект)
		|			И (ТаблицаТочкиПроверки.ТочкаМаршрута В (&ТочкиКонтроля))
		|ГДЕ
		|	CRM_ИсполнителиЭтаповБизнесПроцессов.Объект = &Объект
		|	И CRM_ИсполнителиЭтаповБизнесПроцессов.Исполнитель В(&ПодчиненныеСотрудники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	CRM_ИсполнителиЭтаповБизнесПроцессов.Объект,
		|	ЕСТЬNULL(ТаблицаТочкиПроверки.Исполнитель, НЕОПРЕДЕЛЕНО)
		|ИЗ
		|	РегистрСведений.CRM_ИсполнителиЭтаповБизнесПроцессов КАК CRM_ИсполнителиЭтаповБизнесПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
		|		ПО CRM_ИсполнителиЭтаповБизнесПроцессов.Исполнитель = вогИсполнителиРолейИДелегаты.РольПользователь
		|			И (CRM_ИсполнителиЭтаповБизнесПроцессов.Объект = &Объект)
		|			И (вогИсполнителиРолейИДелегаты.ИсполнительДелегат В (&ПодчиненныеСотрудники))
		|			И (вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования = ""ПроцессыИЗадачи""
		|				ИЛИ вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования = """")
		|			И (вогИсполнителиРолейИДелегаты.Запись = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ИсполнителиЭтаповБизнесПроцессов КАК ТаблицаТочкиПроверки
		|		ПО CRM_ИсполнителиЭтаповБизнесПроцессов.Объект = ТаблицаТочкиПроверки.Объект
		|			И (ТаблицаТочкиПроверки.ТочкаМаршрута В (&ТочкиКонтроля))";
		
		ТочкиКонтроля = Новый Массив;
		ТочкиКонтроля.Добавить(НаборЭтапов[2].ТочкаМаршрута);
		ТочкиКонтроля.Добавить(НаборЭтапов[3].ТочкаМаршрута);
		ТочкиКонтроля.Добавить(НаборЭтапов[4].ТочкаМаршрута);
		
		ПодчиненныеСотрудники = вогОбщегоНазначенияПовтИсп.ПолучитьПодчиненныхСотрудников();
		
		Запрос.УстановитьПараметр("ТочкиКонтроля", 			ТочкиКонтроля);
		Запрос.УстановитьПараметр("Объект", 				РеквизитыЗадачи.БизнесПроцесс);
		Запрос.УстановитьПараметр("ПодчиненныеСотрудники", 	ПодчиненныеСотрудники);
		// До изменения
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		//|	CRM_ИсполнителиЭтаповБизнесПроцессов.Объект КАК Объект
		//|ИЗ
		//|	РегистрСведений.CRM_ИсполнителиЭтаповБизнесПроцессов КАК CRM_ИсполнителиЭтаповБизнесПроцессов
		//|ГДЕ
		//|	CRM_ИсполнителиЭтаповБизнесПроцессов.Объект = &Объект
		//|	И CRM_ИсполнителиЭтаповБизнесПроцессов.Исполнитель В(&ПодчиненныеСотрудники)
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	CRM_ИсполнителиЭтаповБизнесПроцессов.Объект
		//|ИЗ
		//|	РегистрСведений.CRM_ИсполнителиЭтаповБизнесПроцессов КАК CRM_ИсполнителиЭтаповБизнесПроцессов
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
		//|		ПО CRM_ИсполнителиЭтаповБизнесПроцессов.Исполнитель = вогИсполнителиРолейИДелегаты.РольПользователь
		//|			И (CRM_ИсполнителиЭтаповБизнесПроцессов.Объект = &Объект)
		//|			И (вогИсполнителиРолейИДелегаты.ИсполнительДелегат В (&ПодчиненныеСотрудники))
		//|			И (вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования = ""ПроцессыИЗадачи""
		//|				ИЛИ вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования = """")
		//|			И (вогИсполнителиРолейИДелегаты.Запись = ИСТИНА)";
		//
		//Запрос.УстановитьПараметр("Объект", 				РеквизитыЗадачи.БизнесПроцесс);
		//Запрос.УстановитьПараметр("ПодчиненныеСотрудники", 	вогОбщегоНазначенияПовтИсп.ПолучитьПодчиненныхСотрудников());
		// -- VOG Солодов В.В. 02.06.2021 DEV-608
		
		РезультатЗапроса 	= Запрос.Выполнить();
		
		// ++ VOG Солодов В.В. 02.06.2021 DEV-608
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Контролер) Тогда
				
				Если Не ПодчиненныеСотрудники.Найти(ВыборкаДетальныеЗаписи.Контролер) = Неопределено Тогда
					
					ЭтоКонтролер 	= Истина;
					ВидимостьКнопок = Истина;
					
					Прервать;
					
				КонецЕсли;
				
			Иначе
				
				ЭтоКонтролер 	= Истина;
				ВидимостьКнопок = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		// До изменения
		//ЭтоКонтролер 		= Не РезультатЗапроса.Пустой();
		//ВидимостьКнопок 	= Не РезультатЗапроса.Пустой();
		// -- VOG Солодов В.В. 02.06.2021 DEV-608
		
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Согласовать");
	МассивЭлементов.Добавить("ВернутьИсполнителю");
	МассивЭлементов.Добавить("ЗаписатьТекущуюЗадачу");
	
	Для Каждого ИмяЭлемента Из МассивЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			ИмяЭлемента,
			"Видимость",
			ВидимостьКнопок);
	КонецЦикла;
	
	Элементы.ОткрытьЗадачу.Видимость
		= (ТекущийСтатусЗадачи = "НаИсполнении" Или ТекущийСтатусЗадачи = "ПринятаКИсполнению");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокВыполнения()
	
	СоответствиеКнопок = Новый Соответствие;
	СоответствиеКнопок.Вставить("Согласовать", Истина);
	СоответствиеКнопок.Вставить("ВернутьИсполнителю", Ложь);
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Задача", 	ТекущаяЗадача);
	ПараметрыОтбораСтрок.Вставить("Принято", 	Истина);
	
	Для Каждого КлючИЗначение Из СоответствиеКнопок Цикл
		
		ПараметрыОтбораСтрок.Принято = КлючИЗначение.Значение;
		НайденныеСтроки = ТаблицаПунктыЗадач.НайтиСтроки(ПараметрыОтбораСтрок);
		Элементы[КлючИЗначение.Ключ].Доступность = НайденныеСтроки.Количество() > 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаЗадачи Цикл
		
		Если СтрокаТабличнойЧасти.Выполнена
			Или Не СтрокаТабличнойЧасти.НаКонтроле Тогда
			
			ИмяЭлемента = СтрШаблон("Автор_%1", СтрокаТабличнойЧасти.ИдентификаторЗадачи);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИменГрупп = Новый Массив;
	МассивИменГрупп.Добавить("ГруппаЗадачиПринятоКИсполнению");
	МассивИменГрупп.Добавить("ГруппаЗадачиПереданоНаКонтроль");
	МассивИменГрупп.Добавить("ГруппаЗадачиВыполнено");
	МассивИменГрупп.Добавить("ГруппаЗадачиПоставлена");
	
	Для Каждого ИмяГруппы Из МассивИменГрупп Цикл
		
		ГруппаЭлементов = Элементы.Найти(ИмяГруппы);
		
		Если Не ГруппаЭлементов = Неопределено Тогда
			ИмяДекорации = СтрЗаменить(ИмяГруппы, "ГруппаЗадачи", "Декорация");
			Декорация = Элементы.Найти(ИмяДекорации);
			Декорация.Видимость = (ГруппаЭлементов.ПодчиненныеЭлементы.Количество() > 0);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьКомандФормы()
	
	// Команда Открыть БП
	РеквизитыБизнесПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.БизнесПроцесс,
		"Ответственный, Автор",
		Истина);
	
	МассивОтветственных = Новый Массив;
	МассивОтветственных.Добавить(РеквизитыБизнесПроцесса.Ответственный);
	МассивОтветственных.Добавить(РеквизитыБизнесПроцесса.Автор);
	
	ПользовательЯвляетсяДелегатом = РегистрыСведений.вогИсполнителиРолейИДелегаты.ИсполнительЯвляетсяДелегатом(
		МассивОтветственных,
		ТекущийПользователь,
		"ПроцессыИЗадачи",
		Истина);
	
	Если Не МассивОтветственных.Найти(ТекущийПользователь) = Неопределено
		Или ПользовательЯвляетсяДелегатом Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ПринятаКИсполнению = ИСТИНА";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Элементы.ОткрытьБизнесПроцесс.Видимость = РезультатЗапроса.Пустой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоответствиеЭлементов()
	
	#Область СписокЗадач
	
	МассивЭлементов = Новый Массив;
	
	// Группа ФотоДанныеИсполнителя
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);
	СтруктураЭлемента.Имя 						= "ГруппаФотоДанныеИсполнителя_%1";
	СтруктураЭлемента.Тип 						= Тип("ГруппаФормы");
	СтруктураЭлемента.ГруппировкаПодчиненных 	= "ГоризонтальнаяВсегда";
	СтруктураЭлемента.РастягиватьПоВертикали 	= Ложь;
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Ложь;
	СтруктураЭлемента.Ширина 					= 40;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле ФотоИсполнителя
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);;
	СтруктураЭлемента.Имя 						= "ФотоИсполнителя_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.Вид 						= "ПолеКартинки";
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаФотоДанныеИсполнителя_%1";
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].Картинка";
	СтруктураЭлемента.РазмерКартинки 			= "Пропорционально";
	СтруктураЭлемента.ДобавитьРамку 			= Истина;
	СтруктураЭлемента.РастягиватьПоВертикали 	= Ложь;
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Ложь;
	СтруктураЭлемента.Гиперссылка 				= Истина;
	
	СоответствиеДействий = Новый Соответствие;
	СоответствиеДействий.Вставить("Нажатие", 	"Подключаемый_Нажатие");
	
	СтруктураЭлемента.Действия.Добавить(СоответствиеДействий);
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Разделитель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);;
	СтруктураЭлемента.Имя 						= "РазделительФото_%1";
	СтруктураЭлемента.Тип 						= Тип("ДекорацияФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаФотоДанныеИсполнителя_%1";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Группа ИсполнительДолжность
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);;
	СтруктураЭлемента.Имя 									= "ГруппаИсполнительДолжность_%1";
	СтруктураЭлемента.Тип 									= Тип("ГруппаФормы");
	СтруктураЭлемента.ИмяРодителя 							= "ГруппаФотоДанныеИсполнителя_%1";
	СтруктураЭлемента.ГруппировкаПодчиненных 				= "Вертикальная";
	СтруктураЭлемента.РастягиватьПоВертикали 				= Истина;
	СтруктураЭлемента.РастягиватьПоГоризонтали 				= Истина;
	СтруктураЭлемента.ВертикальноеПоложениеПодчиненных 		= "Верх";
	СтруктураЭлемента.ГоризонтальноеПоложениеПодчиненных 	= "Право";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Исполнитель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);;
	СтруктураЭлемента.Имя 						= "Исполнитель_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаИсполнительДолжность_%1";
	СтруктураЭлемента.Вид 						= "ПолеНадписи";
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].Исполнитель";
	СтруктураЭлемента.РастягиватьПоВертикали 	= Истина;
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Истина;
	СтруктураЭлемента.АвтоМаксимальнаяШирина	= Ложь;
	СтруктураЭлемента.Гиперссылка 				= Истина;
	
	СоответствиеДействий = Новый Соответствие;
	СоответствиеДействий.Вставить("Нажатие", 	"Подключаемый_Нажатие");
	
	СтруктураЭлемента.Действия.Добавить(СоответствиеДействий);
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Автор
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);;
	СтруктураЭлемента.Имя 						= "Автор_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаИсполнительДолжность_%1";
	СтруктураЭлемента.Вид 						= "ПолеНадписи";
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].Автор";
	СтруктураЭлемента.РастягиватьПоВертикали 	= Истина;
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Истина;
	СтруктураЭлемента.АвтоМаксимальнаяШирина	= Ложь;
	СтруктураЭлемента.Гиперссылка 				= Истина;
	
	СоответствиеДействий = Новый Соответствие;
	СоответствиеДействий.Вставить("Нажатие", 	"Подключаемый_Нажатие");
	
	СтруктураЭлемента.Действия.Добавить(СоответствиеДействий);
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле Должность
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);;
	СтруктураЭлемента.Имя 						= "Должность_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаИсполнительДолжность_%1";
	СтруктураЭлемента.Вид 						= "ПолеНадписи";
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].ДолжностнаяПозиция";
	СтруктураЭлемента.АвтоМаксимальнаяВысота	= Ложь;
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Истина;
	СтруктураЭлемента.РастягиватьПоВертикали 	= Истина;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Разделитель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);;
	СтруктураЭлемента.Имя 						= "РазделительСрок_%1";
	СтруктураЭлемента.Тип 						= Тип("ДекорацияФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаФотоДанныеИсполнителя_%1";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Группа ПроцентСрок
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);;
	СтруктураЭлемента.Имя 									= "ГруппаПроцентСрок_%1";
	СтруктураЭлемента.Тип 									= Тип("ГруппаФормы");
	СтруктураЭлемента.ИмяРодителя 							= "ГруппаФотоДанныеИсполнителя_%1";
	СтруктураЭлемента.ГруппировкаПодчиненных 				= "Вертикальная";
	СтруктураЭлемента.ВертикальноеПоложениеПодчиненных 		= "Верх";
	СтруктураЭлемента.ГоризонтальноеПоложениеПодчиненных 	= "Право";
	СтруктураЭлемента.РастягиватьПоГоризонтали 				= Ложь;
	СтруктураЭлемента.Ширина 								= 3;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле ПроцентВыполнения
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);;
	СтруктураЭлемента.Имя 						= "ПроцентВыполнения_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаПроцентСрок_%1";
	СтруктураЭлемента.Вид 						= "ПолеНадписи";
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].ПроцентВыполнения";
	СтруктураЭлемента.Ширина 					= 3;
	СтруктураЭлемента.МаксимальнаяШирина 		= 3;
	СтруктураЭлемента.АвтоМаксимальнаяШирина 	= Ложь;
	СтруктураЭлемента.Высота 					= 2;
	СтруктураЭлемента.МаксимальнаяВысота 		= 2;
	СтруктураЭлемента.АвтоМаксимальнаяВысота 	= Ложь;
	СтруктураЭлемента.РастягиватьПоВертикали 	= Ложь;
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Ложь;
	СтруктураЭлемента.ПоложениеЗаголовка 		= "Право";
	СтруктураЭлемента.Формат 					= "ЧН=0";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле КартинкаСрок
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);;
	СтруктураЭлемента.Имя 						= "КартинкаСрок_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.Вид 						= "ПолеКартинки";
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаПроцентСрок_%1";
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].КартинкаСрок";
	СтруктураЭлемента.Ширина 					= 3;
	СтруктураЭлемента.МаксимальнаяШирина 		= 3;
	СтруктураЭлемента.АвтоМаксимальнаяШирина 	= Ложь;
	СтруктураЭлемента.Высота 					= 2;
	СтруктураЭлемента.МаксимальнаяВысота 		= 2;
	СтруктураЭлемента.АвтоМаксимальнаяВысота 	= Ложь;
	СтруктураЭлемента.РастягиватьПоВертикали 	= Ложь;
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Ложь;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Группа Результаты
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);;
	СтруктураЭлемента.Имя 						= "ГруппаРезультаты_%1";
	СтруктураЭлемента.Тип 						= Тип("ГруппаФормы");
	СтруктураЭлемента.ГруппировкаПодчиненных 	= "ГоризонтальнаяВсегда";
	СтруктураЭлемента.Ширина 					= 40;
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Ложь;
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле КоличествоОжидаемыхРезультатов
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);;
	СтруктураЭлемента.Имя 						= "КоличествоОжидаемыхРезультатов_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаРезультаты_%1";
	СтруктураЭлемента.Вид 						= "ПолеНадписи";
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].КоличествоОжидаемыхРезультатов";
	СтруктураЭлемента.ПоложениеЗаголовка 		= "Лево";
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Истина;
	СтруктураЭлемента.ГоризонтальноеПоложение 	= "Лево";
	СтруктураЭлемента.Формат 					= "ЧН=0";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Разделитель
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);;
	СтруктураЭлемента.Имя 						= "РазделительРезультаты_%1";
	СтруктураЭлемента.Тип 						= Тип("ДекорацияФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаРезультаты_%1";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	// Поле КоличествоВыполненныхРезультатов
	СтруктураЭлемента = вогБизнесПроцессыИЗадачиСервер.СформироватьСтруктуруЭлемента(Истина, Истина);;
	СтруктураЭлемента.Имя 						= "КоличествоВыполненныхРезультатов_%1";
	СтруктураЭлемента.Тип 						= Тип("ПолеФормы");
	СтруктураЭлемента.ИмяРодителя 				= "ГруппаРезультаты_%1";
	СтруктураЭлемента.Вид 						= "ПолеНадписи";
	СтруктураЭлемента.ПутьКДанным 				= "%1[%2].КоличествоВыполненныхРезультатов";
	СтруктураЭлемента.ПоложениеЗаголовка 		= "Лево";
	СтруктураЭлемента.РастягиватьПоГоризонтали 	= Ложь;
	СтруктураЭлемента.РастягиватьПоВертикали 	= Ложь;
	СтруктураЭлемента.ГоризонтальноеПоложение 	= "Право";
	СтруктураЭлемента.Формат 					= "ЧН=0";
	
	МассивЭлементов.Добавить(СтруктураЭлемента);
	
	СтруктураСпискаЗадач = Новый Структура;
	СтруктураСпискаЗадач.Вставить("ИмяТаблицы", "ТаблицаЗадачи");
	СтруктураСпискаЗадач.Вставить("Элементы", 	МассивЭлементов);
	
	#КонецОбласти
	
	СтруктураНастроекЭлементов = Новый Структура;
	СтруктураНастроекЭлементов.Вставить("СписокЗадач", 	СтруктураСпискаЗадач);
	
	НастройкаЭлементов = СтруктураНастроекЭлементов;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервере
Функция ПолучитьИДПользователя(Сотрудник)
	
	ИдентификаторИБ = Сотрудник.ИдентификаторПользователяИБ;
	Возврат СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ИдентификаторИБ);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСсылка(ПроверяемыйТип)
	
	Возврат ОбщегоНазначения.ЭтоСсылка(ПроверяемыйТип);
	
КонецФункции


#КонецОбласти

#КонецОбласти
