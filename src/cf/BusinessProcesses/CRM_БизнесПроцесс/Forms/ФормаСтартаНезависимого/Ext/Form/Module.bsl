
&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеЗаписать(ИмяКоманды, ОписаниеОповещенияОЗавершении) Экспорт
	
	Попытка
		Если ПроверитьЗаполнение() Тогда
			
			Если ИмяКоманды = "Отправить" Тогда
				
				Записать();
				
			КонецЕсли;
			
			Если ИмяКоманды = "Отправить"Тогда
				
				СтруктураОбъекта = Новый Структура;
				СтруктураОбъекта.Вставить("БизнесПроцесс"			,Объект.Ссылка);
				СтруктураОбъекта.Вставить("CRM_ТочкаМаршрута"		,Объект.ТочкаСтарта);
				СтруктураОбъекта.Вставить("CRM_ВариантВыполнения"	,0);
				СтруктураОбъекта.Вставить("Исполнитель"				,ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
				СтруктураОбъекта.Вставить("РольИсполнителя"			,ПредопределенноеЗначение("Справочник.РолиИсполнителей.ПустаяСсылка"));
				
				СписокТочекМаршрута = CRM_БизнесПроцессыСервер.ПроверитьНаличиеСледующегоИсполнителя(СтруктураОбъекта);
				ДополнительныеПараметры = Новый Структура("ИмяКоманды, ОписаниеОповещенияОЗавершении", ИмяКоманды, ОписаниеОповещенияОЗавершении);
				Если СписокТочекМаршрута.Количество() > 0 Тогда
					ПараметрыФормы = Новый Структура("БизнесПроцесс, СписокТочекМаршрута", Объект.Ссылка, СписокТочекМаршрута);
					ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьЗаполнениеЗаписатьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.CRM_ФормаВыбораИсполнителя", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					Возврат;
				КонецЕсли;
				ПроверитьЗаполнениеЗаписатьЗавершение(Истина, ДополнительныеПараметры);
				Возврат;
			КонецЕсли;
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		Если СтрНайти(Ошибка, НСтр("ru = 'Данные были изменены или удалены другим пользователем'"))>0 Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно записать бизнес-процесс, данные были изменены другим пользователем.'"));
		КонецЕсли;
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеЗаписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Ложь);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИмяКоманды = "Отправить" Тогда
		ПараметрыЗаписи = Новый Структура("Старт",(ОбщегоНазначенияКлиент.ДатаСеанса() >= Объект.ДатаСтарта));
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
	Оповестить("СтартованНовыйНезависимыйБП", Объект.Предмет);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьЕслиЗаписан", ЭтотОбъект);
	ПроверитьЗаполнениеЗаписать(Команда.Имя, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЕслиЗаписан(Записан, ДополнительныеПараметры) Экспорт
	
	Если Записан Тогда
		Закрыть(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть форму бизнес-процесса. Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если CRM_ЛицензированиеСервер.ВариантПоставкиСТАРТ() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Бизнес-процессы не доступны для варианта поставки ""СТАРТ""!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(Объект.КартаМаршрута)
	И (Объект.Проект.CRM_КартаМаршрута = Объект.КартаМаршрута) Тогда
		Шаблон = Объект.Проект;
	ИначеЕсли ЗначениеЗаполнено(Объект.КартаМаршрута) Тогда
		Шаблон = Объект.КартаМаршрута;
	КонецЕсли;
	
	ВалютаДокумента = Строка(Константы.ВалютаУправленческогоУчета.Получить());
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Элементы.ГруппаСвязатьСРеквизиты.Видимость = Истина;
		Элементы.ДекорацияСвязатьС.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСвязатьСРеквизиты.Видимость = Ложь;
		Элементы.ДекорацияСвязатьС.Видимость = Истина;
	КонецЕсли;
	ПриИзмененииШаблона(Истина);
	
	Если ЗначениеЗаполнено(Объект.КартаМаршрута) Тогда
		
		МожноУказыватьСрокВыполненияЭтапов	= Объект.КартаМаршрута.УказыватьСрокВыполненияЭтапов;
		ДинамическиРассчитыватьСрокиВыполненияЭтапов = Объект.КартаМаршрута.ДинамическиРассчитыватьСрокиВыполненияЭтапов;
		
		ПолучитьТочкиСтарта(Ложь);
		
		ЗаполнитьТаблицуИсполнителей();
		
	Иначе
		МожноУказыватьСрокВыполненияЭтапов = Ложь;
		Элементы.ТочкаСтарта.Видимость = Ложь;
	КонецЕсли;
	
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("Объект", Объект);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("CRM_УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьТочкиСтарта(ПерезаполнятьТочкуСтартаОбъекта = Истина)
	
	СписокТочекСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(Объект.КартаМаршрута);
	Объект.ТочкаСтарта = СписокТочекСтарта[0].Значение;
	Элементы.ТочкаСтарта.СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из СписокТочекСтарта Цикл
		Элементы.ТочкаСтарта.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Если ПерезаполнятьТочкуСтартаОбъекта Или Не ЗначениеЗаполнено(Объект.ТочкаСтарта) Тогда
		Объект.ТочкаСтарта = СписокТочекСтарта[0].Значение;
	КонецЕсли;
	Элементы.ТочкаСтарта.Видимость = (СписокТочекСтарта.Количество() <> 1);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииШаблона(ПриСоздании=Ложь)
	
	Если ЗначениеЗаполнено(Шаблон) Тогда
		Заголовок = Шаблон.Наименование;
		Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
			Объект.Проект					= Справочники.Проекты.ПустаяСсылка();
			Объект.КартаМаршрута			= Шаблон;
		ИначеЕсли ТипЗнч(Шаблон) = Тип("СправочникСсылка.Проекты") Тогда
			Объект.Проект					= Шаблон;
			Объект.КартаМаршрута			= Шаблон.CRM_КартаМаршрута;
		КонецЕсли;
		
		Если НЕ ПриСоздании ИЛИ НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			Объект.Наименование				= Объект.КартаМаршрута.Наименование;
		КонецЕсли;
		Объект.НомерВерсииКартыМаршрута	= Объект.КартаМаршрута.НомерВерсии;
		ДинамическиРассчитыватьСрокиВыполненияЭтапов = Объект.КартаМаршрута.ДинамическиРассчитыватьСрокиВыполненияЭтапов;
		МожноУказыватьСрокВыполненияЭтапов	= Объект.КартаМаршрута.УказыватьСрокВыполненияЭтапов;
		
		ПолучитьТочкиСтарта();
		Элементы.ГруппаИсполнители.Видимость = Объект.КартаМаршрута.РедактироватьИсполнителейЭтапов
	Иначе
		Заголовок = "";
		Объект.Проект					= Справочники.Проекты.ПустаяСсылка();
		Объект.КартаМаршрута			= Справочники.CRM_КартыМаршрутов.ПустаяСсылка();
		Объект.НомерВерсииКартыМаршрута = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПриИзменении(Элемент)
	
	ПриИзмененииШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ШаблонНачалоВыбораЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ТолькоВернутьЭлемент", Истина);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаВыборИзДерева", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Шаблон = Результат;
		ПриИзмененииШаблона();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьОсновноеКонтактноеЛицо(ВыбранныйПартнер)
	
	Возврат ВыбранныйПартнер.CRM_ОсновноеКонтактноеЛицо;
	
КонецФункции

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.КонтактноеЛицо = ВернутьОсновноеКонтактноеЛицо(Объект.Партнер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвязатьСНажатие(Элемент)
	
	Элементы.ГруппаСвязатьСРеквизиты.Видимость = Истина;
	Элементы.ДекорацияСвязатьС.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеВложений()
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru = 'Бизнес-процесс не записан. Добавление файлов невозможно!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);	
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтотОбъект,
	             Ложь,
	             Неопределено);
КонецПроцедуры


// Указание исполнителей этапов
&НаСервере
Процедура ЗаполнитьТаблицуИсполнителей(Набор = Неопределено)
	
	Если Набор = Неопределено Тогда
		Если Объект.Ссылка.Пустая() Тогда
			Если ЗначениеЗаполнено(Объект.Проект) Тогда		
				// Получение исполнителей по процессу.
				НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
				НаборИсполнителей.Отбор.Объект.Установить(Объект.Проект);
				НаборИсполнителей.Прочитать();
				
				// Если для процесса исполнители не определены, тогда берем их из карты.
				Если НаборИсполнителей.Количество() = 0 Тогда
					НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
					НаборИсполнителей.Отбор.Объект.Установить(Объект.КартаМаршрута);
					НаборИсполнителей.Прочитать();	
				КонецЕсли;
			Иначе
				НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
				НаборИсполнителей.Отбор.Объект.Установить(Объект.КартаМаршрута);
				НаборИсполнителей.Прочитать();	
			КонецЕсли;
		Иначе
			// Исполнители бизнес-процесса.
			НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборИсполнителей.Отбор.Объект.Установить(Объект.Ссылка);
			НаборИсполнителей.Прочитать();	
		КонецЕсли;
	Иначе
		НаборИсполнителей = Набор;
	КонецЕсли;
	
	Этапы_Значение = РеквизитФормыВЗначение("Этапы");
	Этапы_Значение.Очистить();
	
	Если МожноУказыватьСрокВыполненияЭтапов Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Объект.КартаМаршрута);
			НаборЭтапов.Прочитать();
			Для Каждого СтрокаНабора Из НаборЭтапов Цикл
				НоваяСтрокаЭтапов = Этапы_Значение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЭтапов,СтрокаНабора);
			КонецЦикла;
			НачПериода	= ?(?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДатаСеанса()) = Объект.ДатаСтарта, ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДатаСеанса()), Объект.ДатаСтарта);
			CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(Объект.НомерВерсииКартыМаршрута, Объект.Организация, Объект.ТочкаСтарта, Этапы_Значение, НачПериода);
		Иначе
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Объект.Ссылка);
			НаборЭтапов.Прочитать();
			Этапы_Значение = НаборЭтапов.Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	//Исполнители.Очистить();
	Исполнители_Значение = РеквизитФормыВЗначение("Исполнители");
	Исполнители_Значение.Очистить();
	Исполнители.Очистить();
	
	Для Каждого СтрокаНабора Из НаборИсполнителей Цикл
		
		МассивСтрок = Исполнители_Значение.НайтиСтроки(Новый Структура("ТочкаМаршрута",СтрокаНабора.ТочкаМаршрута));
		Если НЕ МассивСтрок.Количество() = 0 Тогда
			СтрокаТаб = МассивСтрок[0];
		Иначе
			СтрокаТаб = Исполнители_Значение.Добавить();
			СтрокаТаб.ТочкаМаршрута	= СтрокаНабора.ТочкаМаршрута;
			СтрокаТаб.Групповая		= СтрокаНабора.ТочкаМаршрута.Групповая;
			СтрокаТаб.Порядок		= СтрокаНабора.ТочкаМаршрута.РеквизитДопУпорядочивания;
			Если СтрокаНабора.ТочкаМаршрута.Групповая Тогда
				СтрСписок = Новый СписокЗначений;
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
				МассивТипов.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
				МассивТипов.Добавить(Тип("СправочникСсылка.CRM_ТочкиМаршрутов"));
				МассивТипов.Добавить(Тип("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач"));
				СтрСписок.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				СтрокаТаб.Исполнитель = СтрСписок;
			КонецЕсли;
		КонецЕсли;
		
		Исполнитель = ?(СтрокаНабора.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор,Объект.Автор,СтрокаНабора.Исполнитель);
		
		Если СтрокаНабора.ТочкаМаршрута.Групповая Тогда
			СтрокаТаб.Исполнитель.Добавить(Исполнитель,,СтрокаНабора.Все);
		Иначе
			СтрокаТаб.Исполнитель = Исполнитель;
		КонецЕсли;
		
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
			Если НЕ СтрокаНабора.Все Тогда
				СтрокаИсполнителя = НСтр("ru = 'Роль """ + Строка(СтрокаТаб.Исполнитель) + """'");
			Иначе
				СтрокаИсполнителя = СокрЛП(Строка(СтрокаТаб.Исполнитель));
			КонецЕсли;
		ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.CRM_ТочкиМаршрутов") Тогда
			СтрокаИсполнителя = НСтр("ru = 'Исполнитель этапа """ + Строка(СтрокаТаб.Исполнитель) + """'");
		Иначе
			СтрокаИсполнителя = СокрЛП(Строка(СтрокаТаб.Исполнитель));
		КонецЕсли;
		
		СтрокаТаб.ИсполнительПредставление = СтрокаИсполнителя;
		
		Если МожноУказыватьСрокВыполненияЭтапов Тогда
			СтрокаЭтапа = Этапы_Значение.Найти(СтрокаТаб.ТочкаМаршрута,"ТочкаМаршрута");
			Если НЕ СтрокаЭтапа = Неопределено Тогда
				
				СтрокаТаб.ВариантВыполнения			= СтрокаЭтапа.ВариантВыполнения;
				СтрокаТаб.ДлительностьДней			= СтрокаЭтапа.ДлительностьДней;
				СтрокаТаб.ДлительностьЧасов			= СтрокаЭтапа.ДлительностьЧасов;
				СтрокаТаб.ДлительностьМинут			= СтрокаЭтапа.ДлительностьМинут;
				СтрокаТаб.ОтложитьНачалоЭтапаДней	= СтрокаЭтапа.ОтложитьНачалоЭтапаДней;
				СтрокаТаб.ОтложитьНачалоЭтапаЧасов	= СтрокаЭтапа.ОтложитьНачалоЭтапаЧасов;
				СтрокаТаб.ОтложитьНачалоЭтапаМинут	= СтрокаЭтапа.ОтложитьНачалоЭтапаМинут;
				СтрокаТаб.Шаблон					= СтрокаЭтапа.Шаблон;
				Попытка
					СтрокаТаб.ДатаНачала		= СтрокаЭтапа.ДатаНачала;
					СтрокаТаб.ДатаВыполнения	= СтрокаЭтапа.ДатаВыполнения;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Этапы_Значение, "Этапы");
	
	Исполнители_Значение.Сортировать("Порядок ВОЗР");
	ЗначениеВРеквизитФормы(Исполнители_Значение, "Исполнители");
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСрокиИсполнения()
	
	Исполнители_Значение = РеквизитФормыВЗначение("Исполнители");
	Этапы_Значение = РеквизитФормыВЗначение("Этапы");
	
	Если ЗначениеЗаполнено(Объект.ДатаСтарта) И Объект.ДатаСтарта > ТекущаяДатаСеанса() Тогда
		НачПериода = Объект.ДатаСтарта;
	Иначе
		НачПериода = ТекущаяДатаСеанса();
	КонецЕсли;
	//НачПериода	= ?(НачалоДня(Объект.Дата) = Объект.ДатаСтарта, Объект.Дата, Объект.ДатаСтарта);
	CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(Объект.НомерВерсииКартыМаршрута, Объект.Организация, Объект.ТочкаСтарта, Этапы_Значение, НачПериода);
	
	Исполнители_Значение.ЗаполнитьЗначения(Дата("00010101"), "ДатаНачала,ДатаВыполнения");
	Для Каждого СтрокаТаб Из Исполнители_Значение Цикл
		СтрокаЭтапа = Этапы_Значение.Найти(СтрокаТаб.ТочкаМаршрута,"ТочкаМаршрута");
		Если НЕ СтрокаЭтапа = Неопределено Тогда
			
			СтрокаТаб.ВариантВыполнения			= СтрокаЭтапа.ВариантВыполнения;
			СтрокаТаб.ДлительностьДней			= СтрокаЭтапа.ДлительностьДней;
			СтрокаТаб.ДлительностьЧасов			= СтрокаЭтапа.ДлительностьЧасов;
			СтрокаТаб.ДлительностьМинут			= СтрокаЭтапа.ДлительностьМинут;
			СтрокаТаб.ОтложитьНачалоЭтапаДней	= СтрокаЭтапа.ОтложитьНачалоЭтапаДней;
			СтрокаТаб.ОтложитьНачалоЭтапаЧасов	= СтрокаЭтапа.ОтложитьНачалоЭтапаЧасов;
			СтрокаТаб.ОтложитьНачалоЭтапаМинут	= СтрокаЭтапа.ОтложитьНачалоЭтапаМинут;
			СтрокаТаб.Шаблон					= СтрокаЭтапа.Шаблон;
			Попытка
				СтрокаТаб.ДатаНачала		= СтрокаЭтапа.ДатаНачала;
				СтрокаТаб.ДатаВыполнения	= СтрокаЭтапа.ДатаВыполнения;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Этапы_Значение, "Этапы");
	ЗначениеВРеквизитФормы(Исполнители_Значение, "Исполнители");
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкаСтартаПриИзменении(Элемент)
	
	Если МожноУказыватьСрокВыполненияЭтапов Тогда
		ПересчитатьСрокиИсполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	Если Элементы.Исполнители.ТекущиеДанные.Групповая Тогда
		ПараметрыФормы = Новый Структура("СписокИсполнителей,КартаМаршрута,НомерВерсииКартыМаршрута",
										Элементы.Исполнители.ТекущиеДанные.Исполнитель,Объект.КартаМаршрута,Объект.НомерВерсииКартыМаршрута);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиИсполнительПредставлениеНачалоВыбораЗавершени", ЭтотОбъект);								
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаВводаИсполнителей",ПараметрыФормы,ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		БылИсполнитель = Элементы.Исполнители.ТекущиеДанные.Исполнитель;
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"				,Истина);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		,Истина);
		
		ДанныеВыбора = Новый СписокЗначений;
		
		СтруктураДанныхВыбора = Новый Структура;
		СтруктураДанныхВыбора.Вставить("РежимВыбора"				,Истина);
		//Если ТипЗнч(БылИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		//	СтруктураДанныхВыбора.Вставить("ТекущаяСтрока"			,БылИсполнитель);
		//КонецЕсли;
		СтруктураДанныхВыбора.Вставить("ВыборГруппПользователей"	,Ложь);
		СтруктураДанныхВыбора.Вставить("ИмяФормы"					,"Справочник.Пользователи.Форма.ФормаСписка");
		СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
		ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Пользователи");
		
		СтруктураДанныхВыбора = Новый Структура;
		СтруктураДанныхВыбора.Вставить("РежимВыбора"				,Истина);
		//Если ТипЗнч(БылИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		//	СтруктураДанныхВыбора.Вставить("ТекущаяСтрока"			,БылИсполнитель);
		//КонецЕсли;
		СтруктураДанныхВыбора.Вставить("ИмяФормы"					,"Справочник.РолиИсполнителей.ФормаВыбора");
		СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
		ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Роли исполнителей");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеНачалоВыбораЗавершени(Результат, СтандартнаяОбработка)
	Если НЕ Результат = Неопределено Тогда
		
		Для Каждого Исполнитель Из Результат Цикл
			Если Не ЗначениеЗаполнено(Исполнитель.Значение) Тогда
				Результат.Удалить(Исполнитель);
			КонецЕсли;	
		КонецЦикла;	
		
		Элементы.Исполнители.ТекущиеДанные.Исполнитель				= Результат;
		Элементы.Исполнители.ТекущиеДанные.ИсполнительПредставление	= Строка(Элементы.Исполнители.ТекущиеДанные.Исполнитель);
		ИзмененыИсполнители = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы,ВыбранноеЗначение.ПараметрыФормы,?(ВыбранноеЗначение.РежимВыбора,Элемент,ЭтотОбъект),,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли НЕ ВыбранноеЗначение = Элементы.Исполнители.ТекущиеДанные.Исполнитель Тогда
		
		Элементы.Исполнители.ТекущиеДанные.Исполнитель				= ВыбранноеЗначение;
		Элементы.Исполнители.ТекущиеДанные.ИсполнительПредставление	= Строка(ВыбранноеЗначение);
		
		ИзмененыИсполнители			= Истина;
		Модифицированность	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполнительПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	Если Элементы.Исполнители.ТекущиеДанные.Групповая Тогда
		НовыйСписок = Новый СписокЗначений;
		НовыйСписок.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.НеУказан"),"Не указан");
		Элементы.Исполнители.ТекущиеДанные.Исполнитель = НовыйСписок;
	Иначе
		Элементы.Исполнители.ТекущиеДанные.Исполнитель = ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.НеУказан");
	КонецЕсли;
	
	Элементы.Исполнители.ТекущиеДанные.ИсполнительПредставление	= "Не указан";
	ИзмененыИсполнители			= Истина;
	Модифицированность	= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	
	Если НЕ ДеньВключенВГрафик(ВыбранноеЗначение) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Формат(ВыбранноеЗначение,"ДФ=dd.MM.yyyy") + 
					НСтр("ru = ' не рабочий день.'"));
		
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Элемент.Имя = "ИсполнителиДатаВыполнения" И ВыбранноеЗначение < ТекДанные.ДатаНачала Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Срок этапа не может быть меньше Даты начала.'"));
					
		СтандартнаяОбработка = Ложь;
	Иначе
		ТекДанные[СтрЗаменить(Элемент.Имя, "Исполнители", "")] = ВыбранноеЗначение;
		ИсполнителиДатаВыполненияПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекДанные.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Дата начала этапа не заполнена!.'"));
		Возврат;					
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Время_"	,ТекДанные.ДатаВыполнения);
	ПараметрыФормы.Вставить("Дата_"		,ТекДанные.ДатаВыполнения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиДатаВыполненияНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.CRM_ВыборДатыВремени",ПараметрыФормы, Элемент,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ИсполнителиДатаВыполненияОбработкаВыбора(Элементы.ИсполнителиДатаВыполнения, Результат, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияПриИзменении(Элемент)
	
	ТекДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекДанные.ДатаНачала) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Дата начала этапа не заполнена!.'"));
		ТекДанные.ДатаВыполнения = Дата("00010101");
		Возврат;
	КонецЕсли;
	
	СтруктураПериода = РассчитатьДлительностьЭтапа(ТекДанные.ДатаНачала, ТекДанные.ДатаВыполнения, Объект.Организация);
	
	ТекДанные.ДлительностьДней	= СтруктураПериода.ДлительностьДней;
	ТекДанные.ДлительностьЧасов	= СтруктураПериода.ДлительностьЧасов;
	ТекДанные.ДлительностьМинут	= СтруктураПериода.ДлительностьМинут;
	
	Если ДинамическиРассчитыватьСрокиВыполненияЭтапов Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнителиДатаВыполненияПриИзмененииЗавершение", ЭтотОбъект, ТекДанные);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Пересчитать сроки для следующих этапов?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ИзмененаДлительность		= Истина;
	Модифицированность	= Истина;
	ЗаполнитьПланируемуюДатуЗавершенияПроцесса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиДатаВыполненияПриИзмененииЗавершение(Ответ, ТекДанные) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПересчитатьСрокиЭтапов(ТекДанные.ТочкаМаршрута, ТекДанные.ДатаВыполнения, ТекДанные.ВариантВыполнения);
	КонецЕсли;
	
	ИзмененаДлительность		= Истина;
	Модифицированность	= Истина;
	ЗаполнитьПланируемуюДатуЗавершенияПроцесса();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСрокиЭтапов(ТочкаМаршрута, НачПериода, ВариантВыполнения)
	
	Исполнители_Значение = РеквизитФормыВЗначение("Исполнители");
	
	СтруктураТочки	= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьИсходящуюТочку(ТочкаМаршрута, Объект.НомерВерсииКартыМаршрута, ВариантВыполнения);
	
	CRM_БизнесПроцессыСервер.РассчитатьДатыВыполненияЭтаповПоМаршруту(Объект.НомерВерсииКартыМаршрута, Объект.Организация, СтруктураТочки.ИсходящаяТочка, Исполнители_Значение, НачПериода, ВариантВыполнения);
	
	ЗначениеВРеквизитФормы(Исполнители_Значение, "Исполнители");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьДлительностьЭтапа(НачПериода, КонПериода, Организация)
	
	СтруктураПериода	= CRM_ОбщегоНазначенияСервер.ПолучитьТрудозатратыЗаПериод(НачПериода, КонПериода,, Организация);
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ДлительностьДней"	,ЦЕЛ(СтруктураПериода.ВЧасах/СтруктураПериода.ПродолжительностьРабочегоДняВЧасах));
	СтруктураВозврата.Вставить("ДлительностьЧасов"	,ЦЕЛ(СтруктураПериода.ВЧасах - (СтруктураВозврата.ДлительностьДней*СтруктураПериода.ПродолжительностьРабочегоДняВЧасах)));
	СтруктураВозврата.Вставить("ДлительностьМинут"	,СтруктураПериода.ВМинутах - ((СтруктураВозврата.ДлительностьДней*СтруктураПериода.ПродолжительностьРабочегоДняВМинутах) + (СтруктураВозврата.ДлительностьЧасов*60)));
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПланируемуюДатуЗавершенияПроцесса(ОчищатьДату = Ложь)
	Если ОчищатьДату Тогда
		Объект.ПланируемаяДатаЗавершения = Дата("00010101");
		Возврат;
	КонецЕсли;				
	Если МожноУказыватьСрокВыполненияЭтапов И Исполнители.Количество() > 0 Тогда
		Объект.ПланируемаяДатаЗавершения = 
		CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьМаксимальнуюДатуИзКолонкиСрокБизнесПроцесса(Исполнители);
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Функция ДеньВключенВГрафик(ВыбранноеЗначение)
	
	Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КалендарныеГрафики.ДеньВключенВГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.Год = &Год
	|	И КалендарныеГрафики.ДатаГрафика = &ДатаГрафика";
	
	Запрос.УстановитьПараметр("Календарь"	,Календарь);
	Запрос.УстановитьПараметр("Год"			,Год(ВыбранноеЗначение));
	Запрос.УстановитьПараметр("ДатаГрафика"	,НачалоДня(ВыбранноеЗначение));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДеньВключенВГрафик;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	CRM_УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	CRM_УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ИзмененыИсполнители Тогда
		ТекущийОбъект.мИсполнители = РеквизитФормыВзначение("Исполнители");
		ТекущийОбъект.мТребуетсяСохранитьИсполнителейЭтапов = Истина;
	КонецЕсли;
	
	Если ИзмененаДлительность Тогда
		ТекущийОбъект.мИсполнители = РеквизитФормыВзначение("Исполнители");
		ТекущийОбъект.мТребуетсяСкорректироватьДлительностьЭтапов = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Обработчик механизма "Свойства"
	CRM_УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
КонецПроцедуры

