 

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ПолучитьТочкиСтарта()
		
	СписокТочекСтарта = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(Объект.КартаМаршрута);
	Объект.ТочкаСтарта = СписокТочекСтарта[0].Значение;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ТолькоПросмотр = ?(Объект.Стартован, НЕ Объект.Автор = ПараметрыСеанса.ТекущийПользователь, Ложь);
	Элементы.Контролер.Доступность					= КонтролироватьВыполнение;
	Элементы.СрокКонтроля.Доступность				= КонтролироватьВыполнение;
	Элементы.Контролер.АвтоОтметкаНезаполненного	= КонтролироватьВыполнение;
	Элементы.СрокКонтроля.АвтоОтметкаНезаполненного	= КонтролироватьВыполнение;
	
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(СрокИсполнения);
	ДатаИсполнения	= ДатаВремя.Дата;
	ВремяИсполнения	= ДатаВремя.Время;
	
	ДатаВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(СрокКонтроля);
	ДатаКонтроля	= ДатаВремя.Дата;
	ВремяКонтроля	= ДатаВремя.Время;
	
	ИспользоватьДатуИВремяВСрокахЗадач = Константы.ИспользоватьДатуИВремяВСрокахЗадач.Получить();
	
	Элементы.ВремяИсполнения.Видимость	= ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.ВремяКонтроля.Видимость	= ИспользоватьДатуИВремяВСрокахЗадач;
	
	Если Элементы.CRM_Проект.Видимость Тогда
		Если ЗначениеЗаполнено(Объект.Проект) И Объект.Проект.CRM_ЭтоПроект Тогда
			Элементы.CRM_Этап.Видимость = Истина;
		Иначе
			Элементы.CRM_Этап.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ВернутьВремяКонцаРабочегоДня()
	
	КонецРабочегоДняЧас = Час(CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ВремяОкончанияРабочегоДня"));
	Если КонецРабочегоДняЧас = 0 Тогда
		КонецРабочегоДняЧас = 18;
	КонецЕсли;
	
	Возврат КонецРабочегоДняЧас;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииПроектаНаСервере()
	Если ЗначениеЗаполнено(Объект.Проект) И ЗначениеЗаполнено(Объект.Проект.CRM_Партнер) Тогда
		Объект.Партнер = Объект.Проект.CRM_Партнер;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПеренестиПрисоединенныеФайлы(ПоручениеСсылка)
	
	Если ЭтоНовый Тогда
		СписокОтбора = Новый СписокЗначений;
		Для Каждого ТекущиеДанные Из СписокФайловПисьма Цикл
			Если ТекущиеДанные.Пометка Тогда
				СписокОтбора.Добавить(ТекущиеДанные.Значение);
			КонецЕсли;
		КонецЦикла;
		Если СписокОтбора.Количество() > 0 Тогда
			CRM_ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(Объект.Предмет, ПоручениеСсылка, СписокОтбора);
		КонецЕсли;
	КонецЕсли;
	
	СписокФайловПисьма.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайловДляКопирования(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		СписокФайловПисьма = Результат;
	Иначе
		СписокФайловПисьма.Очистить();
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура СкорректироватьДатыЗадачи(ПриоритетДатыНачала)
	
	Если ДатаИсполнения > ДатаКонтроля Тогда
		Если ПриоритетДатыНачала Тогда
			ДатаКонтроля = ДатаИсполнения;
		Иначе
			ДатаИсполнения = ДатаКонтроля;
		КонецЕсли;
	КонецЕсли;
	Если НачалоДня(ДатаИсполнения) = НачалоДня(ДатаКонтроля) И ВремяИсполнения > ВремяКонтроля Тогда
		Если ПриоритетДатыНачала Тогда
			ВремяКонтроля = ВремяИсполнения;
		Иначе
			ВремяИсполнения = ВремяКонтроля;
		КонецЕсли;
	КонецЕсли;
	
	СрокИсполнения	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаИсполнения, ВремяИсполнения);
	СрокКонтроля	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаКонтроля, ВремяКонтроля);
	
КонецПроцедуры

Функция ПолучитьТекущуюЗадачу()
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЗадачаИсполнителя.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	                      |ГДЕ
	                      |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	                      |	И НЕ ЗадачаИсполнителя.Выполнена");
	Запрос.УстановитьПараметр("БизнесПроцесс", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	//Павелко, Таск 000000793, 05.11.2019+++
	Если ЭтоНовый И Параметры.Свойство("Шаблон") Тогда		
		ЗаполнитьПоШаблону(Параметры.Шаблон);
	КонецЕсли;	
	//Павелко, Таск 000000793, 05.11.2019---
	
	Если ЗначениеЗаполнено(Объект.КартаМаршрута) Тогда
		
		ПолучитьТочкиСтарта();
		
		Если Объект.Ссылка.Пустая() Тогда
			
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтапов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Объект.КартаМаршрута);
			НаборЭтапов.Прочитать();
			
			Если ЗначениеЗаполнено(Объект.Проект) Тогда		
				// Получение исполнителей по процессу.
				НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
				НаборИсполнителей.Отбор.Объект.Установить(Объект.Проект);
				НаборИсполнителей.Прочитать();
				
				// Если для процесса исполнители не определены, тогда берем их из карты.
				Если НаборИсполнителей.Количество() = 0 Тогда
					НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
					НаборИсполнителей.Отбор.Объект.Установить(Объект.КартаМаршрута);
					НаборИсполнителей.Прочитать();
				КонецЕсли;
			Иначе
				НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтапов.СоздатьНаборЗаписей();
				НаборИсполнителей.Отбор.Объект.Установить(Объект.КартаМаршрута);
				НаборИсполнителей.Прочитать();	
			КонецЕсли;
		Иначе
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(Объект.Ссылка);
			НаборЭтапов.Прочитать();
			
			// Исполнители бизнес-процесса.
			НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборИсполнителей.Отбор.Объект.Установить(Объект.Ссылка);
			НаборИсполнителей.Прочитать();	
		КонецЕсли;
			
		Для Каждого СтрокаНабора Из НаборИсполнителей Цикл
			Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[0].ТочкаМаршрута Тогда		// точка действия "Выполнить"
				Если СтрокаНабора.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор Тогда
					Исполнитель		= Объект.Автор;
				ИначеЕсли ТипЗнч(СтрокаНабора.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
					Исполнитель		= СтрокаНабора.Исполнитель;
				ИначеЕсли ТипЗнч(СтрокаНабора.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					Исполнитель		= СтрокаНабора.Исполнитель;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СрокИсполнения) Тогда  //Павелко, Таск 000000793, 05.11.2019
					Попытка
						СрокИсполнения	= НаборЭтапов[0].ДатаВыполнения;
					Исключение
						СрокИсполнения = НачалоДня(ТекущаяДатаСеанса())+ ВернутьВремяКонцаРабочегоДня()*60*60;
					КонецПопытки;
				КонецЕсли;	
				
				ТочкаИсполнения	= НаборЭтапов[0].ТочкаМаршрута;
				
			ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда	// точка действия "Проверить"
				КонтролироватьВыполнение	= НаборЭтапов[1].Используется;
				Если СтрокаНабора.Исполнитель = Перечисления.CRM_ВидыИсполнителейЗадач.Автор Тогда
					Контролер		= Объект.Автор;
				ИначеЕсли ТипЗнч(СтрокаНабора.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
					Контролер		= СтрокаНабора.Исполнитель;
				ИначеЕсли ТипЗнч(СтрокаНабора.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
					Контролер		= СтрокаНабора.Исполнитель;
				КонецЕсли;
				
				Если СрокКонтроля = '00010101' Тогда  //Павелко, Таск 000000793, 05.11.2019
					Попытка
						СрокКонтроля	= НаборЭтапов[1].ДатаВыполнения;
					Исключение
						ИспользуемыйКалендарь = Константы.ОсновнойКалендарьПредприятия.Получить();
						Попытка
							СледующийДень = CRM_КалендарныеГрафики.ПолучитьДатуПоКалендарю(ИспользуемыйКалендарь, ТекущаяДатаСеанса(), 1);
						Исключение
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен календарный график!
												|Расчет без учета календаря!'"));
							//
							СекундВДне = 24 * 60 * 60;
							СледующийДень = ТекущаяДатаСеанса() + СекундВДне;
							Пока ДеньНедели(СледующийДень) = 6 Или ДеньНедели(СледующийДень) = 7 Цикл
								СледующийДень = СледующийДень + СекундВДне;
							КонецЦикла;
						КонецПопытки;
						СрокКонтроля = НачалоДня(СледующийДень) + ВернутьВремяКонцаРабочегоДня()*60*60;
						
					КонецПопытки;
				КонецЕсли;
				
				ТочкаКонтроля = НаборЭтапов[1].ТочкаМаршрута;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(Объект.Проект) Или
		  ЗначениеЗаполнено(Объект.Этап)   Или	
		  ЗначениеЗаполнено(Объект.Партнер) 
		//+вог
		  Или ЗначениеЗаполнено(Объект.вогТорговаяТочка) Тогда
		//-вог	  
		  
		Элементы.ГруппаСвязатьСРеквизиты.Видимость = Истина;
			
		Элементы.ДекорацияСвязатьС.Видимость = Ложь;
	Иначе
		
		Элементы.ГруппаСвязатьСРеквизиты.Видимость = Ложь;
		//>>Бей(29.05.2019 15:57:43):#335 пока отключаем функционал
		//Элементы.ДекорацияСвязатьС.Видимость = Истина;
		//<<Бей(29.05.2019 15:57:46):#335
	КонецЕсли;
	
	УстановитьСвойстваЭлементовФормы();
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		ПредметПредставление = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеПредметаДокумента(Объект.Предмет);
	Иначе
		Элементы.ПредметПредставление.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоНовый И ЗначениеЗаполнено(Объект.Предмет) 
	И ((ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"))
	ИЛИ (ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"))) Тогда
		
		МассивФайлов = РаботаСФайламиСлужебныйВызовСервера.ПолучитьВсеПодчиненныеФайлы(Объект.Предмет);
		
		Если МассивФайлов.Количество() > 0 Тогда
			СписокФайловПисьма.ЗагрузитьЗначения(МассивФайлов);
		КонецЕсли;

		// В случае поручения в описание не переносим текст писем, только тему и инфомрацию, что
		// поручение введено на основании такого-то письма.
		Объект.Описание = "Тема: " + Объект.Предмет.Тема + "
						   |Введено на основании: " + Объект.Предмет;
	КонецЕсли;

	Если Параметры.Свойство("Исполнитель") И ЗначениеЗаполнено(Параметры.Исполнитель) Тогда
		Исполнитель = Параметры.Исполнитель;
	КонецЕсли;		
	
	//+вог	
	СформироватьПредставлениеПовестки(ЭтотОбъект);
			
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		//>>Бей(30.05.2019 17:35:58):#334
		// Создание поручений по списку клиентов
				
		Если Параметры.Свойство("МассивКлиентов") Тогда
			
			ВывестиМассивКлиентовВСвязанныеТаблицы(Параметры.МассивКлиентов);
			
		КонецЕсли;
		
				
		ПолучитьПараметрыНастройкиБизнесПроцессов();
		
		//Если Параметры.Свойство("МассивНоменклатурыКоллекции") Тогда
		//	Для каждого НоменклатураКоллекции Из Параметры.МассивНоменклатурыКоллекции Цикл
		//		СтрокаТЧ = ТаблицаНоменклатура.Добавить();	
		//		Если ТипЗнч(НоменклатураКоллекции) = Тип("СправочникСсылка.Номенклатура") Тогда
		//			ИмяПоля = "Номенклатура";	
		//		Иначе	
		//			ИмяПоля = "Коллекция";	
		//		КонецЕсли;
		//		
		//		СтрокаТЧ[ИмяПоля] = НоменклатураКоллекции;
		//		
		//	КонецЦикла;
		//	
		//КонецЕсли;
		
		//Если Параметры.Свойство("МассивКлиентов") Тогда
		//	
		//	Для каждого Клиент Из Параметры.МассивКлиентов Цикл
		//		СтрокаТЧ = ТаблицаКлиентов.Добавить();
		//		Если ТипЗнч(Клиент) = Тип("СправочникСсылка.Партнеры") Тогда
		//			СтрокаТЧ.Партнер = Клиент;
		//		ИначеЕсли ТипЗнч(Клиент) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
		//			СтрокаТЧ.ТорговаяТочка = Клиент;
		//			СтрокаТЧ.Партнер 	   = Клиент.Партнер;
		//		ИначеЕсли ТипЗнч(Клиент) = Тип("Структура") Тогда
		//			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Клиент);
		//		КонецЕсли;
		//		
		//	КонецЦикла;	
		//
		//КонецЕсли;
		
		//<<Бей(30.05.2019 17:36:23):#334

		
	КонецЕсли;
	//>>Бей(28.05.2019 15:32:33):#176
	//НастроитьЭлементыФормы(ЭтотОбъект);
	//<<Бей(28.05.2019 15:32:40):#176
	//-вог
	
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
	
	Элементы.ФормаСтарт.Видимость = Не Объект.Стартован;
	
	Элементы.ЗавершитьБизнесПроцессДосрочно.Видимость = (Не ЭтоНовый И Объект.КартаМаршрута.РазрешеноДосрочноеЗавершение И (Пользователи.ЭтоПолноправныйПользователь() ИЛИ Объект.Автор = Пользователи.ТекущийПользователь()));

	// ++ VOG Солодов В.В. 02.08.2019 task 463
	ТекущийПользователь 		= Пользователи.ТекущийПользователь();
	РуководительПользователя 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "вогРуководитель", Истина);
	
	Если ЗначениеЗаполнено(РуководительПользователя) Тогда
		АвторПоручения 	= "ОтРуководителя";
		Объект.Автор 	= РуководительПользователя;
		Контролер 		= РуководительПользователя;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияГрупповая", "Ширина", 7);
	Иначе
		АвторПоручения 	= "ОтСебя";
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АвторПоручения", "Видимость", Ложь);
	КонецЕсли;
	// -- VOG Солодов В.В. 02.08.2019
	
	// ++ VOG Ульянов И.В. 20.04.2020 CRM-176
	// -- VOG Ульянов И.В. 20.04.2020 CRM-176
	
	// ++ VOG Солодов В.В. 23.06.2020 CRM-724
	УстановитьНастройкиСобственника(ТекущийПользователь);
	// -- VOG Солодов В.В. 23.06.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СрокИсполнения = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаИсполнения, ВремяИсполнения);
	СрокКонтроля = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаКонтроля, ВремяКонтроля);
	
	//Павелко, Таск 000000944, 27.11.2019+++
	УдалитьПустыеЗначенияИзТаблицы(ТаблицаКлиентов, ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	Если Элементы.ГруппаКлиенты.Видимость Тогда 
		Если ТаблицаКлиентов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните таблицу клиентов.", , , , Отказ);
		КонецЕсли;	
	КонецЕсли;
	
	УдалитьПустыеЗначенияИзТаблицы(ТаблицаТорговыхТочек, ПредопределенноеЗначение("Справочник.вогТорговыеТочки.ПустаяСсылка"));
	Если Элементы.ГруппаТорговыеТочки.Видимость Тогда
		Если ТаблицаТорговыхТочек.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните таблицу торговых точек.", , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Исправлено VOG Ульянов И.В. 03.02.2020 CRM-264
	Если Элементы.НаселенныйПункт.Видимость И Объект.НаселенныйПункт.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните населенный пункт.", , "НаселенныйПункт", , Отказ);
	КонецЕсли;
	//Павелко, Таск 000000944, 27.11.2019---
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("СохраненоПоручение", Объект.Предмет);
	Если ЗначениеЗаполнено(СрокИсполнения) Тогда
		Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Неопределено, Параметры.ОбновлятьКалендарь), ЭтотОбъект);
	КонецЕсли;
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	Оповестить("ОбновитьАРМ");
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(ТекущийОбъект.Ссылка);
	НаборЭтапов.Прочитать();
	
	// Исполнители бизнес-процесса.
	НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборИсполнителей.Отбор.Объект.Установить(ТекущийОбъект.Ссылка);
	НаборИсполнителей.Прочитать();	
	
	ТекущаяЗадача = ПолучитьТекущуюЗадачу(); 
	НоваяДатаЗадачи = Неопределено;
	Для Каждого СтрокаНабора Из НаборИсполнителей Цикл
		Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[0].ТочкаМаршрута Тогда		// точка действия "Выполнить"
			СтрокаНабора.Исполнитель = ?(ЗначениеЗаполнено(Исполнитель),Исполнитель,Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан);
			НаборЭтапов[0].ДатаВыполнения = СрокИсполнения;
			НаборЭтапов[0].ВариантВыполнения = ?(КонтролироватьВыполнение,1,0);
			НаборЭтапов[0].ВариантВыполненияСтрокой = CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(НаборЭтапов[0].ТочкаМаршрута, НаборЭтапов[0].ВариантВыполнения, Объект.НомерВерсииКартыМаршрута);
			Если ЗначениеЗаполнено(ТекущаяЗадача) И ТекущаяЗадача.CRM_ТочкаМаршрута = СтрокаНабора.ТочкаМаршрута Тогда
				НоваяДатаЗадачи = СрокИсполнения;
			КонецЕсли;
		ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда	// точка действия "Проверить"
			НаборЭтапов[1].ДатаВыполнения = СрокКонтроля;
			НаборЭтапов[1].Используется	= КонтролироватьВыполнение;
			СтрокаНабора.Исполнитель = ?(ЗначениеЗаполнено(Контролер),Контролер,Перечисления.CRM_ВидыИсполнителейЗадач.НеУказан);
			Если ЗначениеЗаполнено(ТекущаяЗадача) И ТекущаяЗадача.CRM_ТочкаМаршрута = СтрокаНабора.ТочкаМаршрута Тогда
				НоваяДатаЗадачи = СрокКонтроля;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) И ЗначениеЗаполнено(НоваяДатаЗадачи) И ТекущаяЗадача.СрокИсполнения <>НоваяДатаЗадачи Тогда
		ЗадачаОбъект = ТекущаяЗадача.ПолучитьОбъект();
		ЗадачаОбъект.СрокИсполнения = НоваяДатаЗадачи;
		ЗадачаОбъект.Записать();
	КонецЕсли;
	НаборЭтапов.Записать();
	НаборИсполнителей.Записать();
	
	Если ЭтоНовый Тогда
		ПеренестиПрисоединенныеФайлы(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	ЭтоНовый = Ложь;
	
	// ++ Тищенко В.В. 28.01.2019
	// Список исполнителей поручения
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписейИсполнителиПоручения = РегистрыСведений.вогСписокИсполнителейПоручения.СоздатьНаборЗаписей();
	НаборЗаписейИсполнителиПоручения.Отбор.БизнесПроцесс.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписейИсполнителиПоручения.Прочитать();
	НаборЗаписейИсполнителиПоручения.Очистить();
	
	Для каждого Стр Из СписокИсполнителей Цикл
		Если Стр.Пометка Тогда
			СтрокаНабораИсполнительПоручения 					= НаборЗаписейИсполнителиПоручения.Добавить();
			СтрокаНабораИсполнительПоручения.БизнесПроцесс 		= ТекущийОбъект.Ссылка;
			СтрокаНабораИсполнительПоручения.РольИсполнителя 	= Исполнитель;
			СтрокаНабораИсполнительПоручения.Исполнитель		= Стр.Значение;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписейИсполнителиПоручения.Записать();
	
	// -- Тищенко В.В.
	
КонецПроцедуры

&НаКлиенте
Процедура ПередСтартом(Отказ)
	
	// ++ Тищенко В.В. 28.01.2019
	// Изменен механизм замещения
	 
	// ++ Харченко Д.И. № 000002778 - 19.09.2018 / 
	//Если НЕ МожноСтартоватьБП() Тогда
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	// -- Харченко Д.И. № 000002778 - 19.09.2018
	// -- Тищенко В.В.
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// ++ Тищенко В.В. 29.01.2019
	// При закрытии окна происходило падение платформы
	//Закрыть(Объект.Ссылка);
	// -- Тищенко В.В.
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ КонтролироватьВыполнение Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Контролер"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СрокКонтроля"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если СписокФайловПисьма.Количество() > 0 Тогда
		НовоеОповещение = Новый ОписаниеОповещения("ВыборФайловДляКопирования", ЭтотОбъект);
		ПараметрыФормы = Новый Структура ("СписокФайлов", СписокФайловПисьма);
		ОткрытьФорму("ОбщаяФорма.CRM_ФормаВыбораФайловДляКопирования", ПараметрыФормы,,,,,НовоеОповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.БизнесПроцесс = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_БизнесПроцессПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
	
КонецПроцедуры

#Область ПроцедурыОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КонтролироватьВыполнениеПриИзменении(Элемент)
	
	Элементы.Контролер.Доступность					= КонтролироватьВыполнение;
	Элементы.СрокКонтроля.Доступность				= КонтролироватьВыполнение;
	Элементы.Контролер.АвтоОтметкаНезаполненного	= КонтролироватьВыполнение;
	Элементы.СрокКонтроля.АвтоОтметкаНезаполненного	= КонтролироватьВыполнение;
	Элементы.ВремяКонтроля.Доступность				= КонтролироватьВыполнение;
	Элементы.ВремяКонтроля.АвтоОтметкаНезаполненного= КонтролироватьВыполнение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", 
			Новый Структура("Ключ, ОткрытиеИзФормы", Объект.Предмет, Истина),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда		
		ОткрытьФорму("Документ.ЭлектронноеПисьмоВходящее.Форма.CRM_ФормаДокумента", 
			Новый Структура("Ключ, ОткрытиеИзФормы", Объект.Предмет, Истина),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.Независимый);		
	Иначе			
		ПоказатьЗначение(, Объект.Предмет);			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалаПриИзменении(Элемент)
	СкорректироватьДатыЗадачи(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончанияПриИзменении(Элемент)	
	СкорректироватьДатыЗадачи(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВремяИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяИсполненияНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяИсполнения, Элемент,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяИсполненияНачалоВыбораЗавершение(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяИсполнения = ВыбранноеВремя.Значение;		
		СрокИсполнения = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаИсполнения, ВремяИсполнения);
		СкорректироватьДатыЗадачи(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВремяКонтроляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяКонтроляНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяКонтроля, Элемент,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяКонтроляНачалоВыбораЗавершение(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяКонтроля = ВыбранноеВремя.Значение;
		СрокКонтроля = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаКонтроля, ВремяКонтроля);
		СкорректироватьДатыЗадачи(Ложь);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвязатьСНажатие(Элемент)
	Элементы.ГруппаСвязатьСРеквизиты.Видимость = Истина;
	Элементы.ДекорацияСвязатьС.Видимость = Ложь;
	
	УстановитьСвойстваЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПроектПриИзменении(Элемент)
	ПриИзмененииПроектаНаСервере();
	УстановитьСвойстваЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.КонтактноеЛицо = ВернутьОсновноеКонтактноеЛицо(Объект.Партнер);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьОсновноеКонтактноеЛицо(ВыбранныйПартнер)
	
	Возврат ВыбранныйПартнер.CRM_ОсновноеКонтактноеЛицо;
	
КонецФункции

&НаСервере
Процедура СформироватьПредставлениеВложений()
	CRM_ПрисоединенныеФайлы.СформироватьПредставлениеВложений(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru = 'Бизнес-процесс не записан. Добавление файлов невозможно!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);	
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтотОбъект,
	             Ложь,
	             Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьБизнесПроцессДосрочно(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьБизнесПроцессДосрочноЗавершение", ЭтотОбъект);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаДосрочногоЗавершения",,ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьБизнесПроцессДосрочноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ПараметрыДосрочногоЗавершения", Результат);
		Закрыть(СтруктураДанных);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//+вог
#Область Повестка

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПовестки(Форма)
	
	Если Форма.Объект.вогПовестка.Количество() = 0 Тогда
		Форма.ПовесткаПредставление = НСтр("ru = 'Нет пунктов...'");
		Возврат;
	КонецЕсли;		
	
	Форма.ПовесткаПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 пункт(ов).'"), Форма.Объект.вогПовестка.Количество());
			
КонецПроцедуры // СформироватьПредставлениеПовестки()			 

&НаКлиенте
Процедура ПовесткаПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru = 'Бизнес-процесс не записан. Редактирование повестки невозможно!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеРедактированияПовестки", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументСсылка"	   , Объект.Ссылка);
	ПараметрыФормы.Вставить("ТекущийСоставПовестки", СформироватьТекущийСоставПовестки());
	ПараметрыФормы.Вставить("РежимВвода"		   , "ТолькоВопросы");
	
	ОткрытьФорму("ОбщаяФорма.вогФормаРедактированияПовестки",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияПовестки(РезультатРедактирования, Контекст) Экспорт
	
	Если РезультатРедактирования = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;
	
	Объект.вогПовестка.Очистить();
	Объект.вогПовесткаПрисоединенныеФайлы.Очистить();
	Для каждого СтрокаРезультата Из РезультатРедактирования Цикл
		НоваяСтрокаПовестки = Объект.вогПовестка.Добавить(); 	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПовестки, СтрокаРезультата);
		
		Для каждого ПрисоединенныйФайл Из СтрокаРезультата.ПрисоединенныеФайлы Цикл
			НоваяСтрокаФайла = Объект.вогПовесткаПрисоединенныеФайлы.Добавить(); 	
			НоваяСтрокаФайла.ПрисоединенныйФайл  = ПрисоединенныйФайл;
			НоваяСтрокаФайла.ИдентификаторСтроки = НоваяСтрокаПовестки.ИдентификаторСтроки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	СформироватьПредставлениеПовестки(ЭтотОбъект);
	
КонецПроцедуры // ПослеРедактированияПовестки()

&НаКлиенте
Функция СформироватьТекущийСоставПовестки()

	МассивСоставаПовестки = Новый Массив;
	Для каждого СтрокаТЧ Из Объект.вогПовестка Цикл
		МассивСоставаПовестки.Добавить(
			Новый Структура("Вопрос, Ответ, ПрисоединенныеФайлы, ИдентификаторСтроки", 
				СтрокаТЧ.Вопрос, СтрокаТЧ.Ответ, МассивПрисоединенныхФайловСтрокиПовестки(СтрокаТЧ.ИдентификаторСтроки), СтрокаТЧ.ИдентификаторСтроки)
		);
		
	КонецЦикла;
	
	Возврат МассивСоставаПовестки;
	
КонецФункции // СформироватьТекущийСоставПовестки()

&НаКлиенте
Функция МассивПрисоединенныхФайловСтрокиПовестки(ИдентификаторСтроки)

	МассивФайлов = Новый Массив;
	
	СтрокиФайлов = Объект.вогПовесткаПрисоединенныеФайлы.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки)); 	
	Для каждого СтрокаФайла Из СтрокиФайлов Цикл
		МассивФайлов.Добавить(СтрокаФайла.ПрисоединенныйФайл);	
	
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции // МассивПрисоединенныхФайловСтрокиПовестки()

#КонецОбласти    

#Область ЗаполнениеКлассификаторы

&НаКлиенте
Процедура ЗаполнитьПоКлассификацииТаблицаКлиентов(Команда)
	
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить("ФормаПартнеров"    , НСтр("ru = 'Классификация клиентов'"));	
	//СписокВариантов.Добавить("ФормаТорговыхТочек", НСтр("ru = 'Классификация торговых точек'"));	
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоКлассификацииЗавершение", ЭтотОбъект, Элементы.ТаблицаКлиентов);
	Если СписокВариантов.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(Оповещение, СписокВариантов[0]); 
	Иначе	
		ПоказатьВыборИзМеню(Оповещение, СписокВариантов, Элементы.ТаблицаКлиентовЗаполнитьПоКлассификации);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКлассификацииТаблицаНоменклатураКоллекции(Команда)
	
	СписокВариантов = Новый СписокЗначений;
	
	НоменклатураВидимость = ПараметрыНастройкиБизнесПроцессов.Номенклатура 
		И ПараметрыНастройкиБизнесПроцессов.ВариантЗаполненияДанныхНоменклатураКоллекции = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач");	
	Если НоменклатураВидимость Тогда
		СписокВариантов.Добавить("ФормаНоменклатура", НСтр("ru = 'Классификация номенклатуры'"))	
	КонецЕсли;	
	
	КоллекцииВидимость = ПараметрыНастройкиБизнесПроцессов.Коллекции 
		И ПараметрыНастройкиБизнесПроцессов.ВариантЗаполненияДанныхНоменклатураКоллекции = ПредопределенноеЗначение("Перечисление.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач");	
	Если КоллекцииВидимость Тогда
		СписокВариантов.Добавить("ФормаКоллекцииНоменклатуры", НСтр("ru = 'Классификация коллекций'"))	
	КонецЕсли;	
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоКлассификацииЗавершение", ЭтотОбъект, Элементы.ТаблицаНоменклатура);
	Если СписокВариантов.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(Оповещение, СписокВариантов[0]); 
	Иначе	
		ПоказатьВыборИзМеню(Оповещение, СписокВариантов, Элементы.ТаблицаНоменклатураКоллекцииЗаполнитьПоКлассификации);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКлассификацииЗавершение(ЭлементСписка, Элемент) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	CRM_КлассификаторыКлиент.ОткрытьПодборПоКлассификации(ЭлементСписка.Значение, Элемент);	
	
КонецПроцедуры // ЗаполнитьПоКлассификацииЗавершение()

#КонецОбласти

#Область ПараметрыВидаВзаимодейтсвия

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПолучитьПараметрыНастройкиБизнесПроцессов();
	
	//>>Бей(27.05.2019 12:45:05):#176
	
	вогОбъектыДляПроцессаСервер.ПрочитатьСвязанныеДанные(ЭтаФорма, ТекущийОбъект.Ссылка);
	
	//<<Бей(27.05.2019 12:45:15):#176
	
	// ++ Тищенко В.В. 28.01.2019	
	УстановитьДополнительныеСвойстваФормы(ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей"));
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		ЗаполнитьСписокИсполнителейПриОткрытииОбъекта();
	КонецЕсли;
	// -- Тищенко В.В. 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//>>Бей(27.05.2019 13:00:46):#176	
		
	вогОбъектыДляПроцессаСервер.ЗаписатьСвязанныеДанные(Объект.Ссылка,ЭтаФорма);
	
	//<<Бей(27.05.2019 13:00:51):#176
			
КонецПроцедуры
 
&НаКлиенте
Процедура вогТорговаяТочкаПриИзменении(Элемент)
	Объект.Партнер = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура вогНастройкаПриИзменении(Элемент)
	
	СтандартнаяОбработка = Истина;
	
	ПолучитьПараметрыНастройкиБизнесПроцессов();
	
	ИсполнительОчистка(Элемент, СтандартнаяОбработка);
	
	// Исправлено VOG Ульянов И.В. 03.02.2020 CRM-264
	Если Не Элементы.НаселенныйПункт.Видимость Тогда //Павелко, Таск 000000944, 27.11.2019
		Объект.НаселенныйПункт = Неопределено;
	КонецЕсли;	
	
	//++ VOG Ульянов И.В. 21.04.2020 CRM-586
	Если СоздаватьПоручениеСамомуСебе тогда
		Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;	
	//-- VOG Ульянов И.В. 21.04.2020 CRM-586
	
КонецПроцедуры

&НаКлиенте
Процедура вогПерейтиВКалендарь(Команда)
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Пользователь", Исполнитель);
		
		ОткрытьФорму("Обработка.CRM_КалендарьМенеджера.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			УникальныйИдентификатор);
		
	Иначе	
		ПоказатьПредупреждение(, НСтр("ru = 'Команда доступна только для конкретного исполнителя. '"));	
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьПараметрыНастройкиБизнесПроцессов()
	
	ПараметрыНастройкиБизнесПроцессов = Справочники.вогНастройкиБизнесПроцессов.ПараметрыНастройки(Объект.вогНастройка);
	//>>Бей(28.05.2019 15:01:40):#176	
	ВариантЗаполненияДанных = Перечисления.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач;	
	
	вогОбъектыДляПроцессаСервер.НастроитьЭлементыФормы(ЭтотОбъект);
	//<<Бей(28.05.2019 15:01:43):#176
	
КонецПроцедуры // ПолучитьПараметрыНастройкиБизнесПроцессов()

//+скца
&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если Не ЗначениеЗаполнено(Объект.Наименование) тогда
		
		 Объект.Наименование = Объект.Описание;
		
	КонецЕсли;
	
КонецПроцедуры
//-скца

#КонецОбласти

//-вог

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы



&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	// ++ Тищенко В.В. 28.01.2019
	ОпределитьТипАдресации();
	// -- Тищенко В.В.
	
	// ++ VOG Солодов В.В. 21.08.2019 task 477
	Групповая = Ложь;
	Если ЗначениеЗаполнено(Исполнитель) И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Ложь);
	КонецЕсли;
	// -- VOG Солодов В.В. 21.08.2019
	
	Если ЗначениеЗаполнено(Исполнитель) тогда 
		Если Не ПроверитьДоступностьВыдачиПорученияНаИсполнителяНаСервере(Исполнитель) тогда
			Сообщить("У вас нет прав на выдачу поручений для " + Исполнитель);
			Исполнитель = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

// ++ VOG Солодов В.В. 02.08.2019 task 463
&НаКлиенте
Процедура АвторПорученияПриИзменении(Элемент)
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если АвторПоручения = "ОтСебя" Тогда
		Объект.Автор 	= ТекущийПользователь;
		Контролер 		= ТекущийПользователь;
	ИначеЕсли АвторПоручения = "ОтРуководителя" Тогда
		Объект.Автор 	= РуководительПользователя;
		Контролер 		= РуководительПользователя;
	КонецЕсли;
	
	Исполнитель 		= Неопределено;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Исполнитель", "ВыбиратьТип", Истина);
	
	ОпределитьТипАдресации();
	
КонецПроцедуры // -- VOG Солодов В.В. 02.08.2019

#КонецОбласти 

#Область ОбработчикиКомандыФормы

// ++ Тищенко В.В.
&НаКлиенте
Процедура вогСписокИсполнителей(Команда)
	Элементы.вогСписокИсполнителей.Пометка = НЕ Элементы.вогСписокИсполнителей.Пометка;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаИсполнители"		,"Видимость",Элементы.вогСписокИсполнителей.Пометка);
КонецПроцедуры // -- Тищенко В.В.

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_Предметы

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
				
	Если Элементы.Исполнитель.ВыбиратьТип = Ложь Тогда
//START Кайдашов 23/08/19 590
		парам1 = Новый ПараметрВыбора("ТолькоДоступные", 			Истина);
		парам2 = Новый ПараметрВыбора("ВсеПользователи", 			Истина);
		парам3 = Новый ПараметрВыбора("СДополнительными", 			Истина);
		парам4 = Новый ПараметрВыбора("ОбластьДелегированияПрав", 	"ПроцессыИЗадачи"); //Павелко, CRM-69, 18.12.2019
		М = Новый Массив;
		М.Добавить(Парам1);
		М.Добавить(Парам2);
		М.Добавить(Парам3);
		М.Добавить(парам4); //Павелко, CRM-69, 18.12.2019
		Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(М);
//END Кайдашов		
		// ++ VOG Солодов В.В. 02.08.2019 task 463
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") тогда
			
			Если АвторПоручения = "ОтРуководителя" Или Собственник Тогда // ++ VOG Солодов В.В. 23.06.2020 CRM-724 / Добавлено условие Собственник
				
				СтандартнаяОбработка = Ложь;
				
				ПараметрыОткрытия = Новый Структура;
				ПараметрыОткрытия.Вставить("РежимВыбора", 				Истина);
				// ++ VOG Солодов В.В. 23.06.2020 CRM-724
				Если Собственник Тогда
					ПараметрыОткрытия.Вставить("ВсеПользователи", Истина)
				Иначе
				// -- VOG Солодов В.В. 23.06.2020 CRM-724
					ПараметрыОткрытия.Вставить("РуководительПользователя", 	РуководительПользователя);
				КонецЕсли;
				
				ОповещениеОВыборе = Новый ОписаниеОповещения("ИсполнительВыборЗавершение", ЭтотОбъект);
				
				ОткрытьФорму("Справочник.Пользователи.Форма.CRM_ФормаСписка",
				ПараметрыОткрытия,
				ЭтотОбъект,
				ЭтотОбъект,
				,
				,
				ОповещениеОВыборе,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
			
		КонецЕсли;
		// -- VOG Солодов В.В. 02.08.2019
		
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СписокТиповИсполнителей = ПолучитьСписокТиповИсполнителей();
	
	ОписаниеОповещенияОВыбореТипаИсполнителя = НОвый ОписаниеОповещения("ВыборТипаИсполнителяЗавершение",ЭтаФорма);
	
	СписокТиповИсполнителей.ПоказатьВыборЭлемента(ОписаниеОповещенияОВыбореТипаИсполнителя,"Выберите вариант определения исполнителя",Элемент);
	
КонецПроцедуры

// ++ VOG Солодов В.В. 02.08.2019 task 463
&НаКлиенте
Процедура ИсполнительВыборЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Исполнитель = ВыбранноеЗначение;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 21.08.2019 task 477
	Групповая = Ложь;
	Если ЗначениеЗаполнено(Исполнитель) И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Ложь);
	КонецЕсли;;
	// -- VOG Солодов В.В. 21.08.2019
	
	ОпределитьТипАдресации();
	
КонецПроцедуры // -- VOG Солодов В.В. 02.08.2019

Функция  ПолучитьСписокТиповИсполнителей()
		
	СписокТиповИсполнителей = Новый СписокЗначений;
	 ТипПоручения = Объект.вогНастройка;
	 Если ТипПоручения.ЗадачаНаКаждыйПредмет 
		 и (ТипПоручения.Клиенты или ТипПоручения.ТорговыеТочки) Тогда
		 СписокТиповИсполнителей.Добавить("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач","По ответственному за объект");
	 Иначе
		 СписокТиповИсполнителей.Добавить("СправочникСсылка.СтруктураПредприятия","По подразделению");
		 СписокТиповИсполнителей.Добавить("СправочникСсылка.Пользователи","По пользователю");
		 СписокТиповИсполнителей.Добавить("СправочникСсылка.РолиИсполнителей","По роли исполнителя");
		 
	 КонецЕсли;
	 
	Возврат СписокТиповИсполнителей;
	
КонецФункции  

&НаКлиенте
Процедура ВыборТипаИсполнителяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	Элементы.Исполнитель.ОграничениеТипа = Новый ОписаниеТипов(Результат.Значение);
	Элементы.Исполнитель.СписокВыбора.Очистить();
	
	// ++ VOG Солодов В.В. 21.08.2019 task 477
	ОткрыватьФорму 		= Ложь;
	ПараметрыОткрытия 	= Новый Структура;
	ОповещениеОВыборе 	= Новый ОписаниеОповещения("ИсполнительВыборЗавершение", ЭтотОбъект);
	// -- VOG Солодов В.В. 21.08.2019
	
	Если Результат.Значение= "ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач" Тогда
		
		СписокВидовИсполнителейЗадач = Элементы.Исполнитель.СписокВыбора;
		СписокВидовИсполнителейЗадач.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.ОсновнойМенеджер"));
		СписокВидовИсполнителейЗадач.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ВидыИсполнителейЗадач.ОсновнойКоординатор"));
		Элементы.Исполнитель.РежимВыбораИзСписка = Истина;
	// ++ VOG Солодов В.В. 21.08.2019 task 477
	ИначеЕсли Результат.Значение= "СправочникСсылка.СтруктураПредприятия" Тогда
		
		ОткрыватьФорму 		= Истина;
//START Кайдашов 23/08/19		590
		ПараметрыОткрытия.Вставить("ТолькоДоступные", 	Истина);
		ПараметрыОткрытия.Вставить("СДополнительными", 	Истина);
//END Кайдашов		
		ИмяОткрываемойФормы = "Справочник.СтруктураПредприятия.Форма.CRM_ФормаВыбора";
				
	ИначеЕсли Результат.Значение= "СправочникСсылка.Пользователи" Тогда
		
		ПараметрыОткрытия.Вставить("ОбластьДелегированияПрав", 	"ПроцессыИЗадачи"); //Павелко, CRM-69, 18.12.2019
		
		Если ЗначениеЗаполнено(РуководительПользователя) Тогда
			ПараметрыОткрытия.Вставить("РуководительПользователя", 	РуководительПользователя);
		КонецЕсли;
//START Кайдашов 23/08/19		590
		ПараметрыОткрытия.Вставить("ТолькоДоступные", 	Истина);
		ПараметрыОткрытия.Вставить("ВсеПользователи", 	Истина);
		ПараметрыОткрытия.Вставить("СДополнительными", 	Истина);
//END Кайдашов		
		ОткрыватьФорму 		= Истина;
		
		// ++ VOG Ульянов И.В. 03.02.2020 CRM-264
		//ИмяОткрываемойФормы = "Справочник.Пользователи.Форма.CRM_ФормаСписка";
		ИмяОткрываемойФормы = "Справочник.Пользователи.Форма.вогФормаВыбора";
		// -- VOG Ульянов И.В. 03.02.2020 CRM-264
		
	ИначеЕсли Результат.Значение= "СправочникСсылка.РолиИсполнителей" Тогда
		
		ОткрыватьФорму 		= Истина;
		ИмяОткрываемойФормы = "Справочник.РолиИсполнителей.Форма.ФормаВыбора";
				
	// -- VOG Солодов В.В. 21.08.2019	
	Иначе
		Элементы.Исполнитель.РежимВыбораИзСписка = Ложь;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 21.08.2019 task 477
	Если ОткрыватьФорму И ЗначениеЗаполнено(ИмяОткрываемойФормы) Тогда
		
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		ОткрытьФорму(ИмяОткрываемойФормы,
			ПараметрыОткрытия,
			ЭтотОбъект,
			ЭтотОбъект,
			,
			,
			ОповещениеОВыборе,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	// -- VOG Солодов В.В. 21.08.2019
	
	Элементы.Исполнитель.ВыбиратьТип = Ложь;

КонецПроцедуры

Процедура ВывестиМассивКлиентовВСвязанныеТаблицы(МассивКлиентов) //>>Бей(30.05.2019 17:54:43):#334																			 
																			 
	Для Каждого КлиентСписка Из МассивКлиентов Цикл
		
		Если ТипЗнч(КлиентСписка) = Тип("СправочникСсылка.Партнеры") Тогда
			СтрТаблицыКлиентов = ТаблицаКлиентов.Добавить();
			СтрТаблицыКлиентов.Объект = КлиентСписка;
		ИначеЕсли ТипЗнч(КлиентСписка) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
			СтрТаблицыКлиентов = ТаблицаТорговыхТочек.Добавить();
			СтрТаблицыКлиентов.Объект = КлиентСписка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчистка(Элемент, СтандартнаяОбработка) //>>Бей(30.05.2019 17:54:43):#334
	
	// ++ VOG Солодов В.В. 24.06.2020 CRM-724
	Если Собственник Тогда
		Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	// -- VOG Солодов В.В. 24.06.2020 CRM-724
	Иначе
		Исполнитель = Неопределено;
		Элементы.Исполнитель.ВыбиратьТип = Истина;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 21.08.2019 task 477
	Групповая = Ложь;
	Если ЗначениеЗаполнено(Исполнитель) И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаГрупповая", "Видимость", Ложь);
	КонецЕсли;;
	// -- VOG Солодов В.В. 21.08.2019
	
	// ++ VOG Ульянов И.В. 21.11.2019 bugs 689
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"вогСписокИсполнителей"	,"Видимость",Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаИсполнители"		,"Видимость",Ложь);	
	СписокИсполнителей.Очистить();
	// -- VOG Ульянов И.В. 21.11.2019 bugs 689
	
КонецПроцедуры
 
&НаКлиенте
Процедура ТаблицаКлиентовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДопПараметры = Новый Структура("ИмяТч", "ТаблицаКлиентов");
	
	ОписаниеОповещенияОкончаниеПодбораПредметов = Новый ОписаниеОповещения("ОкончаниеПодбораПредметов",ЭтаФорма, ДопПараметры);
	
	ФПараметры = Новый Структура("МножественныйВыбор",Истина);
	
	ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ФПараметры, Элемент,,,,ОписаниеОповещенияОкончаниеПодбораПредметов);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТорговыхТочекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДопПараметры = Новый Структура("ИмяТч", "ТаблицаТорговыхТочек");
	
	ОписаниеОповещенияОкончаниеПодбораПредметов = Новый ОписаниеОповещения("ОкончаниеПодбораПредметов",ЭтаФорма, ДопПараметры);
	
	ФПараметры = Новый Структура("МножественныйВыбор",Истина);
	
	ОткрытьФорму("Справочник.вогТорговыеТочки.ФормаВыбора", ФПараметры, Элемент,,,,ОписаниеОповещенияОкончаниеПодбораПредметов);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДопПараметры = Новый Структура("ИмяТч", "ТаблицаНоменклатура");
	
	ОписаниеОповещенияОкончаниеПодбораПредметов = Новый ОписаниеОповещения("ОкончаниеПодбораПредметов",ЭтаФорма, ДопПараметры);
	
	ФПараметры = Новый Структура("МножественныйВыбор",Истина);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ФПараметры, Элемент,,,,ОписаниеОповещенияОкончаниеПодбораПредметов);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКоллекцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДопПараметры = Новый Структура("ИмяТч", "ТаблицаКоллекции");
	
	ФПараметры = Новый Структура("МножественныйВыбор",Истина);
	
	ОписаниеОповещенияОкончаниеПодбораПредметов = Новый ОписаниеОповещения("ОкончаниеПодбораПредметов",ЭтаФорма, ДопПараметры);
	
	ОткрытьФорму("Справочник.вогКоллекцииНоменклатуры.ФормаВыбора", ФПараметры, Элемент,,,,ОписаниеОповещенияОкончаниеПодбораПредметов);
		
КонецПроцедуры

Процедура ОкончаниеПодбораПредметов(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Для Каждого ВыбранноеЗначение Из Результат Цикл
			
			СтрокаТч = ЭтаФорма[ДополнительныеПараметры.ИмяТч].Добавить();
			СтрокаТч.Объект = ВыбранноеЗначение;
			
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ++ Тищенко В.В.
&НаСервере
Процедура ОпределитьТипАдресации()

	СписокИсполнителей.Очистить();
	
	Если ТипЗнч(Исполнитель) 				= Тип("СправочникСсылка.РолиИсполнителей") Тогда
		УстановитьДополнительныеСвойстваФормы(Истина);
		// ++ VOG Солодов В.В. 02.08.2019 task 463
		Если АвторПоручения = "ОтРуководителя" Тогда
			ТекущиеПодразделение 			= РуководительПользователя.Подразделение;
			ПодчиненныеСотрудники 
				= РегистрыСведений.вогИсполнителиРолейИДелегаты.ПолучитьПодчиненныхПользователей(РуководительПользователя);
		Иначе
			ТекущиеПодразделение 			= Пользователи.ТекущийПользователь().Подразделение;
			ПодчиненныеСотрудники 			= ПараметрыСеанса.вогПодчиненныеСотрудники;
		КонецЕсли;
		// До изменения
		//ТекущиеПодразделение 				= Пользователи.ТекущийПользователь().Подразделение;
		// -- VOG Солодов В.В. 02.08.2019
		ДополнительныеПараметрыАдресации 	= Новый Структура("Подразделение",ТекущиеПодразделение);
		//>>Бей(31.05.2019 16:49:43):#334
		// ++ VOG Солодов В.В. 02.08.2019 task 463
		// До изменения
		//ПодчиненныеСотрудники = ПараметрыСеанса.вогПодчиненныеСотрудники;
		// -- VOG Солодов В.В. 02.08.2019
		ДополнительныеПараметрыАдресации.Вставить("ПодчиненныеСотрудники",ПодчиненныеСотрудники);
		//<<Бей(31.05.2019 16:49:47):#334		
		ТаблицаИсполнителей 				= CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРолиДляПоручения(Исполнитель,ДополнительныеПараметрыАдресации);
		Для каждого Стр Из ТаблицаИсполнителей Цикл
			Если Стр.Значение <> Объект.Автор Тогда
				СтрокаДобавления = СписокИсполнителей.Добавить(Стр.Значение, ,Истина);
			КонецЕсли;
		КонецЦикла;
	//>>Бей(31.05.2019 17:33:58):#334
	ИначеЕсли ТипЗнч(Исполнитель) = Тип("ПеречислениеСсылка.CRM_ВидыИсполнителейЗадач") Тогда
		
		// ++ VOG Солодов В.В. 02.08.2019 task 463
		Если АвторПоручения = "ОтРуководителя" Тогда
			
			ПодчиненныеСотрудники 
				= РегистрыСведений.вогИсполнителиРолейИДелегаты.ПолучитьПодчиненныхПользователей(РуководительПользователя);
				
			ТаблицаИсполнителей = Новый СписокЗначений;
			ТаблицаИсполнителей.ЗагрузитьЗначения(ПодчиненныеСотрудники);
			
		Иначе
			ТаблицаИсполнителей 			= CRM_БизнесПроцессыСервер.ПолучитьПодчиненныхИсполнителей();
		КонецЕсли;
		// До изменения
		//ТаблицаИсполнителей 				= CRM_БизнесПроцессыСервер.ПолучитьПодчиненныхИсполнителей();
		// -- VOG Солодов В.В. 02.08.2019
		//START Кайдашов 15/01/20 CRM-174
		Для каждого Стр Из ТаблицаИсполнителей Цикл
			Если Стр.Значение = Объект.Автор и не СоздаватьПоручениеСамомуСебе Тогда
				Продолжить;	
			КонецЕсли;
			СтрокаДобавления = СписокИсполнителей.Добавить(Стр.Значение, ,Истина);
		КонецЦикла;

	//<<Бей(31.05.2019 17:34:01):#334
	Иначе
		УстановитьДополнительныеСвойстваФормы(Ложь);
	КонецЕсли;
	
КонецПроцедуры // -- Тищенко В.В.

// ++ Тищенко В.В.
&НаСервере
Процедура УстановитьДополнительныеСвойстваФормы(Значение = Ложь)
	
	Элементы.вогСписокИсполнителей.Пометка = Ложь;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"вогСписокИсполнителей"	,"Видимость",Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаИсполнители"		,"Видимость",Ложь);
	// ++ VOG Солодов В.В. 24.06.2020 CRM-724
	Если Собственник Тогда
		ЗначениеСвойства = Ложь;
	Иначе
		ЗначениеСвойства = Не Значение;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"вогПерейтиВКалендарь",
		"Видимость",
		ЗначениеСвойства);
	// До изменения
	//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"вогПерейтиВКалендарь"		,"Видимость",не Значение);
	// -- VOG Солодов В.В. 24.06.2020 CRM-724
	
КонецПроцедуры // -- Тищенко В.В.

// ++ Харченко Д.И. № 000002778 - 19.09.2018 / Проверка другого исполнителя на выходной день
Функция МожноСтартоватьБП()
	 // ++ Тищенко В.В. 28.01.2019
	 // Изменен механизм замещения
	  
	//Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь) 
	//	И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи")
	//	И НЕ Исполнитель = ПараметрыСеанса.ТекущийПользователь
	//	И НЕ РольДоступна("вогРазрешитьЗадачиНаВыходнойДругому") Тогда
	//	
	//	ДанныеДня = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСоответствиеКалендарныхГрафиков(ДатаИсполнения);
	//	
	//	Если НЕ ДанныеДня.Получить(НачалоДня(ДатаИсполнения)).ДеньРабочийПоПроизводственномуКалендарю Тогда
	//		
	//		ТекстСообщения = "У Вас нет прав назначать задачу другому пользователю на выходной день";
	//		
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//		
	//		Возврат Ложь;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;	
	//
	//Возврат Истина;
	//
	// -- Тищенко В.В.
	
КонецФункции

// ++ Тищенко В.В.
&НаСервере
Функция ЗаполнитьСписокИсполнителейПриОткрытииОбъекта()

	ДополнительныеПараметрыАдресации = Новый Структура;
	ДополнительныеПараметрыАдресации.Вставить("Подразделение",Пользователи.ТекущийПользователь().Подразделение);
	
	ТаблицаВыбранныхИсполнителей 	= CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРолиДляПоручения(Исполнитель,ДополнительныеПараметрыАдресации,Объект.Ссылка);
	ТаблицаИсполнителей				= CRM_БизнесПроцессыСервер.ПолучитьВозможныхИсполнителейПоРолиДляПоручения(Исполнитель,ДополнительныеПараметрыАдресации);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Исполнитель
	|ПОМЕСТИТЬ ВТ_ВыбранныеИсполнители
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&ВыбранныеИсполнители)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Исполнитель
	|ПОМЕСТИТЬ ВТ_Исполнители
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&Исполнители)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Исполнители.Исполнитель КАК Исполнитель
	|ПОМЕСТИТЬ ВТ_СписокИсполнителей
	|ИЗ
	|	ВТ_ВыбранныеИсполнители КАК ВТ_ВыбранныеИсполнители,
	|	ВТ_Исполнители КАК ВТ_Исполнители
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Исполнители.Исполнитель
	|ИЗ
	|	ВТ_Исполнители КАК ВТ_Исполнители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокИсполнителей.Исполнитель КАК Исполнитель,
	|	ВЫБОР
	|		КОГДА ВТ_СписокИсполнителей.Исполнитель = ВТ_ВыбранныеИсполнители.Исполнитель
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Пометка
	|ИЗ
	|	ВТ_СписокИсполнителей КАК ВТ_СписокИсполнителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыбранныеИсполнители КАК ВТ_ВыбранныеИсполнители
	|		ПО ВТ_СписокИсполнителей.Исполнитель = ВТ_ВыбранныеИсполнители.Исполнитель");
	Запрос.УстановитьПараметр("ВыбранныеИсполнители",ТаблицаВыбранныхИсполнителей.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Исполнители"			,ТаблицаИсполнителей.ВыгрузитьЗначения());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаИсполнители = РезультатЗапроса.Выбрать();
		Пока ВыборкаИсполнители.Следующий() Цикл
			Если ВыборкаИсполнители.Исполнитель <> Объект.Автор Тогда
				СтрокаДобавления = СписокИсполнителей.Добавить(ВыборкаИсполнители.Исполнитель, ,ВыборкаИсполнители.Пометка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // -- Тищенко В.В.

&НаСервере
Процедура ЗаполнитьПоШаблону(Шаблон) //Павелко, Таск 000000793, 05.11.2019
		
	Объект.Наименование = Шаблон.Тема;
	Объект.вогНастройка = Шаблон.Тип;
	Объект.вогСложность = Шаблон.Сложность;
	Объект.Важность 	= Шаблон.Важность;
	Объект.Описание		= Шаблон.Описание;
	
	АвторПоручения 	= Шаблон.АвторПоручения;
	Исполнитель 	= Шаблон.Кому;
	Групповая 		= Шаблон.Групповая;
	
	Если Шаблон.ДополнительноеВремя.Пустая() Тогда
		СрокИсполнения = Шаблон.ДатаИсполнения;
	Иначе        
		СрокИсполнения = CRM_БизнесПроцессыИЗадачиСервер.ПолучитьСрокИсполненияПоВариантуУстановкиДаты(Шаблон.ДополнительноеВремя, Шаблон.ДатаИсполнения);
	КонецЕсли;	
	
	Если Не СрокИсполнения = '00010101' Тогда
		СрокКонтроля = НачалоДня(СрокИсполнения + 86400) + ВернутьВремяКонцаРабочегоДня()*60*60;
	КонецЕсли;	
	
	СписокИсполнителей.ЗагрузитьЗначения(Шаблон.Исполнители.ВыгрузитьКолонку("Исполнитель"));
	СписокИсполнителей.ЗаполнитьПометки(Истина);	
	
	ТаблицаКлиентов.Загрузить(Шаблон.Клиенты.Выгрузить());
	ТаблицаТорговыхТочек.Загрузить(Шаблон.ТорговыеТочки.Выгрузить());
	ТаблицаНоменклатура.Загрузить(Шаблон.Товары.Выгрузить());
	ТаблицаКоллекции.Загрузить(Шаблон.Коллекции.Выгрузить());
	
	Если Групповая Тогда
		Объект.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПоручениеГрупповое;
	Иначе
		Объект.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение;
	КонецЕсли;
	
	УстановитьДополнительныеСвойстваФормы(ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей"));
		
КонецПроцедуры	

// ++ VOG Солодов В.В. 23.06.2020 CRM-724
&НаСервере
Процедура УстановитьНастройкиСобственника(Пользователь)
	
	Собственник = вогОбщегоНазначенияКлиентСерверПовтИсп.ПользовательЯвляетсяСобственником(Пользователь);
	
	Если Собственник Тогда
		
		Элементы.Исполнитель.ВыбиратьТип = Ложь;
		Элементы.Исполнитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		Элементы.Исполнитель.СписокВыбора.Очистить();
		Элементы.Исполнитель.КнопкаОчистки = Ложь;
		
		Если Не ЗначениеЗаполнено(Исполнитель) Тогда
			Исполнитель = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"СоздаватьПоручениеСамомуСебе",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаСложностьВажность",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"вогПерейтиВКалендарь",
			"Видимость",
			Ложь);
		
		// Параметры выбора типа поручения
		НовыйПараметрВыбора = Новый ПараметрВыбора("Отбор.ДоступнаДляСобственника", Истина);
		
		МассивПараметровВыбора = Новый Массив();
		МассивПараметровВыбора.Добавить(НовыйПараметрВыбора);
		
		Элементы.вогНастройка.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 23.06.2020 CRM-724

#КонецОбласти

// ++ VOG Солодов В.В. 20.08.2019 task 477
&НаСервере
Процедура ГрупповаяПриИзмененииНаСервере()
	
	Если Групповая Тогда
		Объект.КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПоручениеГрупповое;
	Иначе
		Объект.КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение;
	КонецЕсли;
	
	ПолучитьТочкиСтарта();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповаяПриИзменении(Элемент)
	ГрупповаяПриИзмененииНаСервере();
КонецПроцедуры


// -- VOG Солодов В.В. 20.08.2019

&НаКлиенте
Процедура УдалитьПустыеЗначенияИзТаблицы(Таблица, ПустоеЗначение) //Павелко, Таск 000000944, 27.11.2019
	
	НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("Объект", ПустоеЗначение));
	Для Каждого Строка Из НайденныеСтроки Цикл
		Таблица.Удалить(Строка);		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПроверитьДоступностьВыдачиПорученияНаИсполнителяНаСервере(Исполнитель)	
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	СписокДоступныхПользователей = CRM_УправлениеДоступомКПользователям.ПолучитьСписокДоступныхПользователей();
	Для каждого Стр из ТекущийПользователь.вогПользователиДляПорученияДоп цикл	
		СписокДоступныхПользователей.Добавить(Стр.Пользователь);	
	КонецЦикла;
	СписокДоступныхПодразделений = CRM_УправлениеДоступомКПользователям.ПолучитьСписокДоступныхПодразделений();
	Для каждого Стр из ТекущийПользователь.вогПодразделенияДляПорученийДоп цикл	
		СписокДоступныхПодразделений.Добавить(Стр.Подразделение);	
	КонецЦикла;
	
	ОтчетыКлиентСервер.ДополнитьСписок(СписокДоступныхПользователей, вогНастраиваемоеДелегированиеПрав.ПолучитьСписокПодчиненныхСотрудниковДелегата(ТекущийПользователь, "ПроцессыИЗадачи")); //Павелко, CRM-69, 18.12.2019
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") тогда
		Если СписокДоступныхПользователей.НайтиПоЗначению(Исполнитель)<>Неопределено тогда
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") тогда
		Если СписокДоступныхПодразделений.НайтиПоЗначению(Исполнитель)<>Неопределено тогда
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции


&НаКлиенте
Процедура СоздаватьПоручениеСамомуСебеПриИзменении(Элемент) // VOG Ульянов И.В. 21.04.2020 CRM-586
	Элементы.вогГруппаИсполнитель.Видимость = НЕ СоздаватьПоручениеСамомуСебе;
	Если СоздаватьПоручениеСамомуСебе тогда
		Исполнитель = ПользователиКлиентСервер.ТекущийПользователь();
	//Иначе
	//	Исполнитель = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;	
КонецПроцедуры

