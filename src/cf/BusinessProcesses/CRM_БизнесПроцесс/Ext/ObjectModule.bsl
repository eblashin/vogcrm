#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мТребуетсяСохранитьНастройкиЭтапов Экспорт; // Бизнес-процесс либо новый, либо в форме БП изменена карта маршрута
Перем мТребуетсяСохранитьИсполнителейЭтапов Экспорт; // бизнес-процесс либо новый, либо в форме БП изменены исполнители
													 // этапов.
Перем мТребуетсяСкорректироватьДлительностьЭтапов Экспорт; // В форме бизнес-процесса изменили срок исполнения этапа.
Перем мИсполнители Экспорт; // таблица исполнителей
Перем мКорректироватьДлительностьВедущего;
Перем мСоздатьОповещениеОЗавершении;
Перем мПараметрыПериодическогоСтарта Экспорт; // Параметры периодического старта.
Перем мНеСтартовать;

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	ТекстСообщения = "";
	CRM_БизнесПроцессыПереопределяемый.ТочкаСтартаПередСтартом(ЭтотОбъект.ТочкаСтарта, ЭтотОбъект.Ссылка, мНеСтартовать, ТекстСообщения);
	Если мНеСтартовать Тогда
		Если ТекстСообщения = "" Тогда
			ТекстСообщения = НСтр("ru = 'Бизнес-процесс не удалось стартовать.'")
		КонецЕсли;
		
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

//Процедура ЗадачаБизнесПроцессаПриСозданииЗадач
// может быть вызвана только при случае, когда первая точка является вложенным БП.
//
Процедура ЗадачаБизнесПроцессаПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	ФормируемыеЗадачи.Очистить();
	
	ФормируемыеЗадачи_CRM = Новый Массив;
	
	Если мПараметрыПериодическогоСтарта = Неопределено Тогда
		МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(ЭтотОбъект.Ссылка, ЭтотОбъект.ТочкаСтарта);
	Иначе
		МассивИсходящихТочек = мПараметрыПериодическогоСтарта.МассивИсходящихТочек;
	КонецЕсли;
	
	ТаблицаЭтапов = Неопределено;
	CRM_БизнесПроцессыСервер.СформироватьМассивЗадач(ЭтотОбъект.Ссылка, ТочкаМаршрутаБизнесПроцесса, МассивИсходящихТочек, ФормируемыеЗадачи_CRM,, ТаблицаЭтапов, Отказ);
	
	Если НЕ Отказ Тогда
		CRM_БизнесПроцессыПереопределяемый.ТочкаСтартаПриСтарте(ЭтотОбъект.ТочкаСтарта, ЭтотОбъект.Ссылка, ФормируемыеЗадачи_CRM);
		
		CRM_БизнесПроцессыСервер.ЗаписатьЗадачи(ФормируемыеЗадачи_CRM,ТаблицаЭтапов,мПараметрыПериодическогоСтарта);
		
		CRM_БизнесПроцессыСервер.СформироватьЗаписьОТекущемЭтапеБизнесПроцесса(ЭтотОбъект.Ссылка);
		
		CRM_БизнесПроцессыПереопределяемый.ТочкаСтартаПослеСтарта(ЭтотОбъект.ТочкаСтарта, ЭтотОбъект.Ссылка, ФормируемыеЗадачи_CRM);
		
    КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;  
	КонецЕсли;
	
	CRM_КлиентыСервер.ПередЗаписьюОбъектаОбщегоЖурнала(ЭтотОбъект, Отказ, Неопределено, Неопределено);
	
	Если ЭтоНовый() И ЗначениеЗаполнено(КартаМаршрута) И НЕ ОбменДанными.Загрузка Тогда
		мТребуетсяСохранитьНастройкиЭтапов		= Истина;
		мТребуетсяСохранитьИсполнителейЭтапов	= Истина;
		мКорректироватьДлительностьВедущего		= Ложь;
		ПланируемаяДатаЗавершения = CRM_БизнесПроцессыСервер.РассчитатьПлановуюДатуЗавершенияБП(НомерВерсииКартыМаршрута, Организация, ТочкаСтарта, Проект, КартаМаршрута, ДатаСтарта);
	ИначеЕсли ОбменДанными.Загрузка Тогда
		мТребуетсяСохранитьНастройкиЭтапов		= Ложь;
		мТребуетсяСохранитьИсполнителейЭтапов	= Ложь;
		мКорректироватьДлительностьВедущего		= Ложь;
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 23.07.2020 CRM-576
	Если ДополнительныеСвойства.Свойство("ТребуетсяСохранитьНастройкиЭтапов") Тогда
		
		мТребуетсяСохранитьНастройкиЭтапов 		= ДополнительныеСвойства.ТребуетсяСохранитьНастройкиЭтапов;
		мКорректироватьДлительностьВедущего		= Ложь;
		
		Если мТребуетсяСохранитьНастройкиЭтапов Тогда
			
			ПланируемаяДатаЗавершения = CRM_БизнесПроцессыСервер.РассчитатьПлановуюДатуЗавершенияБП(
				НомерВерсииКартыМаршрута,
				Организация,
				ТочкаСтарта,
				Проект,
				КартаМаршрута,
				ДатаСтарта);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ТребуетсяСохранитьИсполнителейЭтапов") Тогда
		мТребуетсяСохранитьИсполнителейЭтапов 	= ДополнительныеСвойства.ТребуетсяСохранитьИсполнителейЭтапов;
	КонецЕсли;
	// -- VOG Солодов В.В. 23.07.2020 CRM-576
	
	мСоздатьОповещениеОЗавершении = (ЭтотОбъект.Завершен И (НЕ ЭтотОбъект.Ссылка.Завершен) И (НЕ ЭтотОбъект.Ответственный = CRM_ОбщегоНазначенияСервер.ТекущийПользователь()));
	
	// Эмуляция подписки на событие "УстановитьПометкуУдаленияПрисоединенныхФайловДокументов".
	CRM_ПрисоединенныеФайлыСобытия.УстановитьПометкуУдаленияПрисоединенныхФайловДокументов(ЭтотОбъект, Ложь, РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;  
	КонецЕсли;
	
	Если мТребуетсяСохранитьНастройкиЭтапов Тогда
		
		Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
			мКорректироватьДлительностьВедущего = ВедущаяЗадача.БизнесПроцесс.КартаМаршрута.ДинамическиРассчитыватьСрокиВыполненияЭтапов;
		КонецЕсли;
		
		CRM_БизнесПроцессыСервер.ЗаполнитьНастройкиЭтаповБизнесПроцесса(Ссылка, Отказ, мКорректироватьДлительностьВедущего, мПараметрыПериодическогоСтарта);
		
		//CRM_БизнесПроцессыСервер.ЗаполнитьНастройкиОбъектовПоЭтапамБизнесПроцесса(Ссылка, Отказ);
		
		CRM_БизнесПроцессыСервер.ЗаполнитьНастройкиОбъектовПоЭтапамБизнесПроцесса_Новая(Ссылка, Отказ);
		
		CRM_БизнесПроцессыСервер.ЗаполнитьУсловияМаршрутизации(Ссылка, Отказ);
		
		мТребуетсяСохранитьНастройкиЭтапов = Отказ;
		
	КонецЕсли;
	
	Если НЕ Отказ  И мТребуетсяСохранитьИсполнителейЭтапов Тогда
		
		// ++ VOG Солодов В.В. 20.08.2019 task 583
		вогCRM_БизнесПроцессыОбщегоНазначения.ЗаполнитьТаблицуИсполнителейПоВариантуОпроса(ЭтотОбъект, мИсполнители);
		// -- VOG Солодов В.В. 20.08.2019
		
		CRM_БизнесПроцессыСервер.ЗаполнитьИсполнителейЭтаповБизнесПроцесса(Ссылка, Отказ, мИсполнители);
		мТребуетсяСохранитьИсполнителейЭтапов  = Отказ;
	КонецЕсли;
	
	Если мТребуетсяСкорректироватьДлительностьЭтапов Тогда
		CRM_БизнесПроцессыСервер.СкорректироватьДлительностьЭтаповБизнесПроцесса(Ссылка, мИсполнители);
		мТребуетсяСкорректироватьДлительностьЭтапов = Ложь;
	КонецЕсли;
	
	Если НЕ Отказ И мСоздатьОповещениеОЗавершении Тогда
		ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(ЭтотОбъект.Ответственный,Справочники.CRM_ВидыОповещений.ЗавершениеБизнесПроцесса, ЭтотОбъект.Ссылка);
		
		Если НЕ ПараметрыОповещения = Неопределено Тогда
			CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗадаче(Основание)
	
	Если ЗначениеЗаполнено(Основание.БизнесПроцесс) И ЗначениеЗаполнено(Основание.БизнесПроцесс.Предмет) Тогда
		Если ТипЗнч(Основание.БизнесПроцесс.Предмет) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ЗаполнитьПоИнтересу(Основание.БизнесПроцесс.Предмет);
		ИначеЕсли ТипЗнч(Основание.БизнесПроцесс.Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
			ЗаполнитьПоРассылке(Основание.БизнесПроцесс.Предмет);
		ИначеЕсли ТипЗнч(Основание.БизнесПроцесс.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ЗаполнитьПоВходящемуПисьму(Основание.БизнесПроцесс.Предмет);
		ИначеЕсли ТипЗнч(Основание.БизнесПроцесс.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			ЗаполнитьПоИсходящемуПисьму(Основание.БизнесПроцесс.Предмет);
		ИначеЕсли CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И ТипЗнч(Основание.БизнесПроцесс.Предмет) = Тип("ДокументСсылка." + "CRM_СчетНаОплатуПокупателю") Тогда
			ЗаполнитьПоСчетуНаОплатуПокупателю(Основание.БизнесПроцесс.Предмет);
		ИначеЕсли ТипЗнч(Основание.БизнесПроцесс.Предмет) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
			ЗаполнитьПоКоммерческомуПредложение(Основание.БизнесПроцесс.Предмет);
		ИначеЕсли ТипЗнч(Основание.БизнесПроцесс.Предмет) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			ЗаполнитьПоМаркетинговомуМероприятию(Основание.БизнесПроцесс.Предмет);
		КонецЕсли;
	Иначе	
		Дата			= ТекущаяДатаСеанса();
		Автор			= Пользователи.ТекущийПользователь();
		Наименование	= Основание.Наименование;
		Важность		= Основание.Важность;
		
		Тема 			= Основание.Наименование;
		Проект			= Основание.CRM_Проект;
		
		Партнер			= Основание.CRM_Партнер;
		
		Если ЗначениеЗаполнено(Основание.БизнесПроцесс) И ТипЗнч(Основание.БизнесПроцесс) = Тип("БизнесПроцессСсылка.CRM_БизнесПроцесс") Тогда
			
			Организация		= Основание.БизнесПроцесс.Организация;
			Подразделение	= Основание.БизнесПроцесс.Подразделение;
			КонтактноеЛицо	= Основание.БизнесПроцесс.КонтактноеЛицо;
			
			Запрос = Новый Запрос;
//START Кайдашов 24/10/19 			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	ЗадачаИсполнителя.Ссылка КАК Ссылка
			               |ИЗ
			               |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			               |ГДЕ
			               |	НЕ ЗадачаИсполнителя.Выполнена
			               |	И НЕ ЗадачаИсполнителя.ПометкаУдаления
			               |	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
			
			Запрос.УстановитьПараметр("БизнесПроцесс", Основание.БизнесПроцесс);
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();
			
			Если РезультатЗапроса.Количество() > 0 Тогда
				ЗадачаБП = РезультатЗапроса[0].Ссылка;
				Описание = CRM_БизнесПроцессыПереопределяемый.СформироватьИсториюБизнесПроцесса(ЗадачаБП, Истина);
			КонецЕсли;
		Иначе
			Описание		= Основание.Описание;
		КонецЕсли;
	КонецЕсли;		

КонецПроцедуры

Процедура ЗаполнитьПоИнтересу(Основание)
	
	Дата			= ТекущаяДатаСеанса();
	Наименование	= Основание.Тема;
	Описание		= Основание.Описание;
	
	Организация		= Основание.Организация;
	Подразделение	= Основание.Подразделение;
	Партнер			= Основание.Партнер;
	КонтактноеЛицо	= Основание.КонтактноеЛицо;
	
	Предмет			= Основание.Ссылка;
	Сумма			= Основание.ОжидаемаяВыручка;
	
КонецПроцедуры

Процедура ЗаполнитьПоРассылке(Основание)
	
	Дата			= ТекущаяДатаСеанса();
	Наименование	= Основание.Тема;
	Важность		= Основание.Важность;
	
	Проект			= Основание.Проект;
	Подразделение	= Основание.Подразделение;
	
КонецПроцедуры

Процедура ЗаполнитьПоВходящемуПисьму(Основание)
	
	Дата			= ТекущаяДатаСеанса();
	Наименование	= Основание.Тема;
	Важность		= Основание.Важность;
	
	Описание 		= "Тема: " + Основание.Тема + "
					  |Содержание: " + Основание.Текст;
	
	Проект			= Основание.CRM_Проект;
	Если ТипЗнч(Основание.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
		Партнер			= Основание.ОтправительКонтакт;
		КонтактноеЛицо	= Основание.ОтправительКонтакт.CRM_ОсновноеКонтактноеЛицо;
	ИначеЕсли ТипЗнч(Основание.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Партнер			= Основание.ОтправительКонтакт.Владелец;
		КонтактноеЛицо	= Основание.ОтправительКонтакт;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоИсходящемуПисьму(Основание)
	
	Дата			= ТекущаяДатаСеанса();
	Наименование	= Основание.Тема;
	Важность		= Основание.Важность;
	Проект			= Основание.CRM_Проект;
	Для Каждого СтрокаПолучателя Из Основание.ПолучателиПисьма Цикл
		Если ТипЗнч(СтрокаПолучателя.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
			Партнер			= СтрокаПолучателя.Контакт;
			КонтактноеЛицо	= СтрокаПолучателя.Контакт.CRM_ОсновноеКонтактноеЛицо;
			Прервать;
		ИначеЕсли ТипЗнч(СтрокаПолучателя.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Партнер			= СтрокаПолучателя.Контакт.Владелец;
			КонтактноеЛицо	= СтрокаПолучателя.Контакт;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоСчетуНаОплатуПокупателю(Основание)
	
	Дата			= ТекущаяДатаСеанса();
	Наименование	= Строка(Основание);
	Описание		= Основание.Комментарий;
	Важность		= Основание.Важность;
	
	Организация		= Основание.Организация;
	Проект			= Основание.Проект;
	Подразделение	= Основание.Подразделение;
	Партнер			= Основание.Партнер;
	КонтактноеЛицо	= Основание.КонтактноеЛицо;
	
	ВалютаУправленческогоУчета = Константы["ВалютаУправленческогоУчета"].Получить();
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Основание.Валюта, Основание.Дата);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУправленческогоУчета, Основание.Дата);
	Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Основание.СуммаДокумента, Основание.Валюта, ВалютаУправленческогоУчета, СтруктураКурсовСтаройВалюты.Курс,
																	   СтруктураКурсовНовойВалюты.Курс, СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
	
КонецПроцедуры

Процедура ЗаполнитьПоКоммерческомуПредложение(Основание)
	
	Дата			= ТекущаяДатаСеанса();
	Наименование	= Строка(Основание);
	Описание		= Основание.Комментарий;
	
	Организация		= Основание.Организация;
	Проект			= Основание.CRM_Проект;
	Подразделение	= Основание.CRM_Подразделение;
	Партнер			= Основание.Партнер;
	КонтактноеЛицо	= Основание.КонтактноеЛицо;
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Основание.Валюта, Основание.Дата);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУправленческогоУчета, Основание.Дата);
	Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Основание.СуммаДокумента,Основание.Валюта, ВалютаУправленческогоУчета, СтруктураКурсовСтаройВалюты.Курс,СтруктураКурсовНовойВалюты.Курс
																,СтруктураКурсовСтаройВалюты.Кратность,СтруктураКурсовНовойВалюты.Кратность);
	
КонецПроцедуры

Процедура ЗаполнитьПоМаркетинговомуМероприятию(Основание)
	
	Дата			= ТекущаяДатаСеанса();
	Наименование	= Основание.Наименование;
	Описание		= Основание.Комментарий;
	Важность		= Основание.CRM_Важность;
	
	Проект			= Основание.CRM_Проект;
	Подразделение	= Основание.CRM_Подразделение;
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Основание.CRM_Валюта, Основание.ДатаНачала);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУправленческогоУчета, Основание.ДатаНачала);
	Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Основание.CRM_ПлановаяСуммаПродаж,Основание.CRM_Валюта, ВалютаУправленческогоУчета, СтруктураКурсовСтаройВалюты.Курс,СтруктураКурсовНовойВалюты.Курс
																,СтруктураКурсовСтаройВалюты.Кратность,СтруктураКурсовНовойВалюты.Кратность);
	
КонецПроцедуры

Функция ПолучитьКонтактноеЛицоКлиента(Клиент)
	
	Если ЗначениеЗаполнено(Клиент.CRM_ОсновноеКонтактноеЛицо) Тогда
		Возврат Клиент.CRM_ОсновноеКонтактноеЛицо;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтактныеЛицаПартнеров.Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец",Клиент);
		ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		Возврат ВыборкаИзРезультатаЗапроса.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
		
	ПодставлятьОсновнойПроектВПоручения = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ПодставлятьОсновнойПроектВПоручения");
	ЗаполнитьБизнесПроцессПоПроекту = Истина; // Заполнять, если указан или заполнился из параметров заполнения.
	
	ОсновнойПроект = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект");
	Если ЗначениеЗаполнено(ОсновнойПроект) Тогда
		Проект = ОсновнойПроект;
		Если ЗначениеЗаполнено(Проект.CRM_КартаМаршрута) Тогда
			КартаМаршрута				= Проект.CRM_КартаМаршрута;
			НомерВерсииКартыМаршрута	= Проект.CRM_КартаМаршрута.НомерВерсии;
			Наименование				= Проект.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеНастройки = CRM_ОбщегоНазначенияСервер.ТекущийПользователь().Подразделение;
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		Подразделение = ЗначениеНастройки;
	КонецЕсли;
		
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
		
		КартаМаршрута				= ДанныеЗаполнения;
		НомерВерсииКартыМаршрута	= ДанныеЗаполнения.НомерВерсии;
		Наименование				= ДанныеЗаполнения.Наименование;
		
		Если КартаМаршрута = Справочники.CRM_КартыМаршрутов.Поручение Тогда
			Партнер = Справочники.Партнеры.ПустаяСсылка();
			
			Если ПодставлятьОсновнойПроектВПоручения Тогда
				Проект = ОсновнойПроект;
			Иначе	
				Проект = Справочники.Проекты.ПустаяСсылка();
			КонецЕсли;
			ЗаполнитьБизнесПроцессПоПроекту = Ложь;
		КонецЕсли;
		
	ИначеЕсли   ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Проекты")  Тогда
		
		Проект						= ДанныеЗаполнения;
		КартаМаршрута				= ДанныеЗаполнения.CRM_КартаМаршрута;
		НомерВерсииКартыМаршрута	= ДанныеЗаполнения.CRM_КартаМаршрута.НомерВерсии;
		Наименование				= Проект.Наименование;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Основание") И ДанныеЗаполнения.Свойство("КартаМаршрута") Тогда
			
			// Тут надо вставить заполнение БП на основании.
			Предмет						= ДанныеЗаполнения.Основание;
			
			Если ТипЗнч(ДанныеЗаполнения.КартаМаршрута) = Тип("СправочникСсылка.CRM_КартыМаршрутов") Тогда
				КартаМаршрута				= ДанныеЗаполнения.КартаМаршрута;
				НомерВерсииКартыМаршрута	= ДанныеЗаполнения.КартаМаршрута.НомерВерсии;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.КартаМаршрута) = Тип("СправочникСсылка.Проекты") Тогда
				Проект						= ДанныеЗаполнения.КартаМаршрута;
				КартаМаршрута				= ДанныеЗаполнения.КартаМаршрута.CRM_КартаМаршрута;
				НомерВерсииКартыМаршрута	= ДанныеЗаполнения.КартаМаршрута.CRM_КартаМаршрута.НомерВерсии;
			КонецЕсли;
			
			Если ТипЗнч(ДанныеЗаполнения.Основание) = Тип("СправочникСсылка.Проекты") Тогда
				
				Проект = ДанныеЗаполнения.Основание;
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.CRM_Интерес") Тогда
				
				ЗаполнитьПоИнтересу(ДанныеЗаполнения.Основание);
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем") Тогда
				
				ЗаполнитьПоРассылке(ДанныеЗаполнения.Основание);
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				
				ЗаполнитьПоВходящемуПисьму(ДанныеЗаполнения.Основание);
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				
				ЗаполнитьПоИсходящемуПисьму(ДанныеЗаполнения.Основание);
				
			ИначеЕсли CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка." + "CRM_СчетНаОплатуПокупателю") Тогда
				ЗаполнитьПоСчетуНаОплатуПокупателю(ДанныеЗаполнения.Основание);
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				
				ЗаполнитьПоЗадаче(ДанныеЗаполнения.Основание);
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
				
				ЗаполнитьПоКоммерческомуПредложение(ДанныеЗаполнения.Основание);
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание) = Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
				
				ЗаполнитьПоМаркетинговомуМероприятию(ДанныеЗаполнения.Основание);
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание) = Тип("СправочникСсылка.Партнеры") Тогда
				
				Партнер = ДанныеЗаполнения.Основание;
				КонтактноеЛицо = ПолучитьКонтактноеЛицоКлиента(Партнер);
				Если ПодставлятьОсновнойПроектВПоручения Тогда
					Проект = ОсновнойПроект;
				Иначе	
					Проект = Справочники.Проекты.ПустаяСсылка();
				КонецЕсли;
				
				ЗаполнитьБизнесПроцессПоПроекту = Ложь;
				
			//+вог
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				КонтактноеЛицо = ДанныеЗаполнения.Основание;
				Если ПодставлятьОсновнойПроектВПоручения Тогда
					Проект = ОсновнойПроект;
				Иначе	
					Проект = Справочники.Проекты.ПустаяСсылка();
				КонецЕсли;
				
				Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо, "Владелец");
				
				ЗаполнитьБизнесПроцессПоПроекту = Ложь;
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
				вогТорговаяТочка = ДанныеЗаполнения.Основание;
				Если ПодставлятьОсновнойПроектВПоручения Тогда
					Проект = ОсновнойПроект;
				Иначе	
					Проект = Справочники.Проекты.ПустаяСсылка();
				КонецЕсли;
				
				Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(вогТорговаяТочка, "Партнер");
				
				ЗаполнитьБизнесПроцессПоПроекту = Ложь;
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Основание) = Тип("Структура") Тогда
				ЗначенияЗаполнения = ДанныеЗаполнения.Основание;
				Если ЗначенияЗаполнения.Свойство("Партнер") Тогда
					Партнер = ЗначенияЗаполнения.Партнер;
					КонтактноеЛицо = ПолучитьКонтактноеЛицоКлиента(Партнер);
					
			   	КонецЕсли;
				
				Если ЗначенияЗаполнения.Свойство("ТорговаяТочка") Тогда
					вогТорговаяТочка = ЗначенияЗаполнения.ТорговаяТочка;
					Если Не ЗначениеЗаполнено(вогТорговаяТочка.Партнер) Тогда
						Партнер = ЗначенияЗаполнения.Партнер;
						КонтактноеЛицо = ПолучитьКонтактноеЛицоКлиента(Партнер);
						
					КонецЕсли;
					
			   	КонецЕсли;
				
			//-вог	
				
			КонецЕсли;
			
			Если ТипЗнч(ДанныеЗаполнения.КартаМаршрута) = Тип("СправочникСсылка.Проекты") Тогда
				Проект						= ДанныеЗаполнения.КартаМаршрута;
			КонецЕсли;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("КартаМаршрута") Тогда
			
			КартаМаршрута				= ДанныеЗаполнения.КартаМаршрута;
			НомерВерсииКартыМаршрута	= ДанныеЗаполнения.КартаМаршрута.НомерВерсии;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("ВводПорученияИзСпискаКлиентов") Тогда
			// Ввод поручения из списка клиентов.
			КартаМаршрута				= Справочники.CRM_КартыМаршрутов.Поручение;
			НомерВерсииКартыМаршрута	= КартаМаршрута.НомерВерсии;
			Наименование				= "";
			
			Партнер = ДанныеЗаполнения.Партнер;
			Предмет	= Партнер;
			
			Если ПодставлятьОсновнойПроектВПоручения Тогда
				Проект = ОсновнойПроект;
			Иначе	
				Проект = Справочники.Проекты.ПустаяСсылка();
			КонецЕсли;
			
			ЗаполнитьБизнесПроцессПоПроекту = Ложь;
	
		ИначеЕсли ДанныеЗаполнения.Свойство("ВводПорученияИзКалендаря") ИЛИ 
				  ДанныеЗаполнения.Свойство("ВводПорученияИзЗадачи") Тогда
			// Ввод поручения из АРМ "Календарь"
			// или
			// ввод поручения из личной задачи или задачи по БП.
			КартаМаршрута				= Справочники.CRM_КартыМаршрутов.Поручение;
			НомерВерсииКартыМаршрута	= КартаМаршрута.НомерВерсии;
			Наименование				= "";
			
			Если ПодставлятьОсновнойПроектВПоручения Тогда
				Проект = ОсновнойПроект;
			Иначе	
				Проект = Справочники.Проекты.ПустаяСсылка();
			КонецЕсли;
			
			ЗаполнитьБизнесПроцессПоПроекту = Ложь;
			
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Партнер") Тогда
			
			Партнер = ДанныеЗаполнения.Партнер;
			Если ДанныеЗаполнения.Свойство("Контакт") Тогда
				 КонтактноеЛицо = ДанныеЗаполнения.Контакт;
			Иначе
				КонтактноеЛицо = ПолучитьКонтактноеЛицоКлиента(Партнер);
			КонецЕсли;
			
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Тема") Тогда
			
			Наименование = ДанныеЗаполнения.Тема;
			
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Описание") Тогда
			
			Описание = ДанныеЗаполнения.Описание;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проект) И ЗаполнитьБизнесПроцессПоПроекту Тогда
		CRM_БизнесПроцессыПереопределяемый.ЗаполнитьБизнесПроцессПоПроекту(ЭтотОбъект,Проект);
	КонецЕсли;
	
	Если	ЗначениеЗаполнено(КартаМаршрута)
		И	ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И	ДанныеЗаполнения.Свойство("ТочкаСтарта")
		И	ЗначениеЗаполнено(ДанныеЗаполнения.ТочкаСтарта)
		И	ДанныеЗаполнения.ТочкаСтарта.Владелец = КартаМаршрута Тогда
		//
		ТочкаСтарта = ДанныеЗаполнения.ТочкаСтарта;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КартаМаршрута) И Не ЗначениеЗаполнено(ТочкаСтарта) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
		|ГДЕ
		|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец
		|	И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии
		|	И CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Старт)
		|
		|СГРУППИРОВАТЬ ПО
		|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка";
		
		Запрос.УстановитьПараметр("Владелец"	,КартаМаршрута);
		Запрос.УстановитьПараметр("НомерВерсии"	,КартаМаршрута.НомерВерсии);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТочкаСтарта = ВыборкаДетальныеЗаписи.Ссылка;
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Важность) Тогда
		Важность		= Перечисления.ВариантыВажностиВзаимодействия.Обычная;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Если Организация <> ЗначениеНастройки Тогда
				Организация = ЗначениеНастройки;
			КонецЕсли;
		Иначе
			Организация = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Подразделение = CRM_ОбщегоНазначенияСервер.ТекущийПользователь().Подразделение;
	КонецЕсли;
	
	Автор			= CRM_ОбщегоНазначенияСервер.ТекущийПользователь();
	Ответственный	= Автор;
	ДатаСтарта		= ТекущаяДатаСеанса();
	Состояние		= Перечисления.СостоянияБизнесПроцессов.Активен;
	
	//+вог
	Если НЕ ЗначениеЗаполнено(вогДолжностнаяПозиция) Тогда
		вогДолжностнаяПозиция = Автор.CRM_ДолжностнаяПозиция;
	КонецЕсли;
	
	Дата = ТекущаяДатаСеанса();
	//>>Бей(29.05.2019 17:45:42):#334
	//Если Не ЗначениеЗаполнено(Наименование) Тогда
	//	Наименование = КартаМаршрута.Наименование + ?(ЗначениеЗаполнено(Предмет), " (" + Предмет + ")", "");	
	//КонецЕсли;	
	//<<Бей(29.05.2019 17:45:46):#334
	//-вог	
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Важность					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;	
	Автор						= CRM_ОбщегоНазначенияСервер.ТекущийПользователь();
	ДатаСтарта					= ТекущаяДатаСеанса();
	Состояние					= Перечисления.СостоянияБизнесПроцессов.Активен;
	ДатаЗавершения				= Неопределено;
	ЗавершенДосрочно			= Ложь;
	ПричинаДосрочногоЗавершения = Неопределено;
	ЭтапДосрочногоЗавершения	= Неопределено;
	ВариантЗавершения			= Неопределено;
	Интерес						= Неопределено;
	Предмет						= Неопределено;
	ВидОбъектаСтрокой			= "";
	РеквизитОбъектаСтрокой		= "";
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	
	Если НЕ ЭтотОбъект.Стартован И ЭтотОбъект.ДатаСтарта < ТекущаяДатаСеанса() И ЭтотОбъект.ДатаСтарта <> Дата('00010101')И (НачалоДня(ЭтотОбъект.ДатаСтарта) <> НачалоДня(ЭтотОбъект.Дата)) Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата старта не может быть меньше текущей даты.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДатаСтарта",,Отказ);
		
		Отказ = Истина;
		
	КонецЕсли;
	
	
КонецПроцедуры

мТребуетсяСохранитьНастройкиЭтапов			= Ложь;
мТребуетсяСохранитьИсполнителейЭтапов		= Ложь;
мТребуетсяСкорректироватьДлительностьЭтапов	= Ложь;
мКорректироватьДлительностьВедущего			= Истина;
мСоздатьОповещениеОЗавершении				= Ложь;
мПараметрыПериодическогоСтарта				= Неопределено;
мНеСтартовать								= Ложь;
#КонецЕсли
