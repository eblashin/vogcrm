


&НаСервере
Процедура ОбновитьДанные(ПересоздатьКолонки = Ложь)
	
	Если ТекущийВариантСписка = "ОсновнойВариант" + ИмяСписка Тогда
		СхемаИНастройки = Справочники.вогВариантыСписковУправленияКлассификацией.ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(Справочники.вогВариантыСписковУправленияКлассификацией.ПустаяСсылка(), "НаборДанных" + ИмяСписка);
	Иначе	
		ВариантСсылка = СсылкаВариантаСписка(ТекущийВариантСписка);
		СхемаИНастройки = Справочники.вогВариантыСписковУправленияКлассификацией.ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(ВариантСсылка, ВариантСсылка.СхемаКомпоновкиДанных);
	КонецЕсли;	
	
	// ++ VOG Ульянов И.В. 26.09.2019 task 702
	Если Параметры.Свойство("ОтборКомпоновкиДанных") тогда
		Если ТипЗнч(Параметры.ОтборКомпоновкиДанных) = Тип("ОтборКомпоновкиДанных") тогда
			Для каждого ЭлементОтбора из Параметры.ОтборКомпоновкиДанных.Элементы цикл
				НовыйЭлементОтбора = СхемаИНастройки.НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора,ЭлементОтбора);
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	// -- VOG Ульянов И.В. 26.09.2019 task 702	
	
	// ++ VOG Солодов В.В. 12.09.2019 task 615
	Если ИмяСписка = "СписокПартнеры"
		И ТипЗнч(ОтборТаблицы) = Тип("Структура")
		И ОтборТаблицы.Свойство("ТипОтношений") Тогда
		
		// ++ VOG Солодов В.В. 19.12.2019 CRM-65
		ТекстЗапроса = СтрЗаменить(
			СхемаИНастройки.СхемаКомпоновкиДанных.НаборыДанных[0].Запрос,
			"И НЕ СправочникПартнеры.Поставщик",
			"");
		
		СхемаИНастройки.СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапроса;
		// -- VOG Солодов В.В. 19.12.2019
		
		МассивТипОтношений = ОтборТаблицы.ТипОтношений;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			СхемаИНастройки.НастройкиКомпоновкиДанных.Отбор,
			"Ссылка.вогТипыОтношений.ТипОтношений",
			МассивТипОтношений,
			ВидСравненияКомпоновкиДанных.ВСписке);
			
	КонецЕсли;
	// -- VOG Солодов В.В. 12.09.2019
	
	// ++ VOG Солодов В.В. 07.04.2020 CRM-545
	Если Не Параметры.Свойство("Отбор")
		Или Параметры.Отбор = Неопределено
		Или Не Параметры.Отбор.Свойство("Розничный") Тогда
			
			Если ИмяСписка = "СписокПартнеры" Тогда
				ИмяПоля = "Ссылка.вогРозничный";
			Иначе
				ИмяПоля = "Ссылка.Розничный";
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				СхемаИНастройки.НастройкиКомпоновкиДанных.Отбор,
				ИмяПоля,
				Ложь,
				ВидСравненияКомпоновкиДанных.Равно);
			
	КонецЕсли;
	// -- VOG Солодов В.В. 07.04.202
	
	СхемаИНастройки.СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
	|	ИСТИНА КАК ИспользуетсяОтборПоКлассификатору,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора) КАК КоличествоЗначенийКлассификатора
	|ПОМЕСТИТЬ ОтборПоКлассификатору
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|ГДЕ
	|	НЕ CRM_ОбъектыЗначенийКлассификаторов.ДатаВключения ЕСТЬ NULL
	|{ГДЕ
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.* КАК ЗначениеКлассификатора,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита.* КАК ЗначениеРеквизита}
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	ИспользуетсяОтборПоКлассификатору,
	|	КоличествоЗначенийКлассификатора
	|;
	|" + СхемаИНастройки.СхемаКомпоновкиДанных.НаборыДанных[0].Запрос + " 
	|{ГДЕ
	|(Ссылка В
	|		(ВЫБРАТЬ
	|			ОтборПоКлассификатору.Объект
	|		ИЗ
	|			ОтборПоКлассификатору КАК ОтборПоКлассификатору
	|		ГДЕ
	|			ОтборПоКлассификатору.ИспользуетсяОтборПоКлассификатору = &ИспользуетсяОтборПоКлассификатору
	|			И ВЫБОР
	|				КОГДА &ЛогическоеВыражение = ""ИЛИ""
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ОтборПоКлассификатору.КоличествоЗначенийКлассификатора = &КоличествоЗначенийКлассификатора
	|			КОНЕЦ))}
	|";
	СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Если ПересоздатьКолонки тогда
		URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
		Компоновщик.Инициализировать(ИсточникНастроек);
		Компоновщик.ЗагрузитьНастройки(СхемаИНастройки.НастройкиКомпоновкиДанных);
	КонецЕсли;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Компоновщик.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаДанных = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаДанных);
	
	// ++ VOG Солодов В.В. 04.09.2020 CRM-572
	Если Не Параметры.Свойство("ОтключитьПривилегированныйРежим") Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	// До изменения
	//УстановитьПривилегированныйРежим(Истина);
	// -- VOG Солодов В.В. 04.09.2020 CRM-572
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивКолонокСсылок = Новый Массив;
	Для каждого Колонка из ТаблицаДанных.Колонки цикл
		Если НРег(Колонка.Имя) = "ссылка" тогда
			продолжить;
		КонецЕсли;
		Если Колонка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Партнеры")) или	
			Колонка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.вогТорговыеТочки")) или
			Колонка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.вогЮридическиеЛица")) тогда
			МассивКолонокСсылок.Добавить(Колонка);	
		КонецЕсли;	
	КонецЦикла;
	
	Если МассивКолонокСсылок.Количество()>0 тогда
		Для каждого Колонка из МассивКолонокСсылок цикл
			ТаблицаДанных.Колонки.Вставить(ТаблицаДанных.Колонки.Индекс(Колонка),Колонка.Имя+"_",Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(100)),Колонка.Заголовок);
		КонецЦикла;
		Для каждого	строкаТЗ из ТаблицаДанных цикл
			Для каждого Колонка из МассивКолонокСсылок цикл
				СтрокаТЗ[Колонка.Имя+"_"] = Строка(СтрокаТЗ[Колонка.Имя]);	
			КонецЦикла;
		КонецЦикла;
		Для каждого Колонка из МассивКолонокСсылок цикл
			ТаблицаДанных.Колонки.Удалить(ТаблицаДанных.Колонки.Индекс(Колонка));	
		КонецЦикла;
	КонецЕсли;
	
	
	Если ТаблицаДанных.Колонки.Найти("Наименование")<>Неопределено тогда
		ТаблицаДанных.Сортировать("Наименование");	
	КонецЕсли;
	Если ПересоздатьКолонки тогда
		  ОбновитьКолонкиТаблицы(ТаблицаДанных.Колонки);
	КонецЕсли;	
	ЗначениеВДанныеФормы(ТаблицаДанных,ТаблицаКлиентскаяБаза);
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьКолонкиТаблицы(КолонкиТаблицыДанных)
	
	МассивРеквизитовДляДобавления = Новый Массив;
	МассивДляУдаления = новый Массив;
	Для каждого Колонка из КолонкиТаблицыДанных цикл
		Реквизит = Новый РеквизитФормы(Колонка.Имя,Новый ОписаниеТипов(Колонка.ТипЗначения,,"NULL"),"ТаблицаКлиентскаяБаза",Колонка.Заголовок);	
		МассивРеквизитовДляДобавления.Добавить(Реквизит);
	КонецЦикла;
	
	Для каждого СтарыйРеквизит из ПолучитьРеквизиты("ТаблицаКлиентскаяБаза") цикл
		МассивДляУдаления.Добавить(""+СтарыйРеквизит.Путь+"."+СтарыйРеквизит.Имя);
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитовДляДобавления,МассивДляУдаления);
	
	ЭлементыДляУдаления = Новый СписокЗначений;
	Для каждого ЭлементФ из Элементы.ТаблицаКлиентскаяБаза.ПодчиненныеЭлементы цикл
		Если СтрНайти(ЭлементФ.Имя,"ТаблицаКлиентскаяБазаКолонка")>0 тогда
			ЭлементыДляУдаления.Добавить(ЭлементФ);
		КонецЕсли;
	КонецЦикла;
	Для каждого Эл из ЭлементыДляУдаления цикл
		Элементы.Удалить(Эл.Значение);	
	КонецЦикла;
	
	Для каждого Колонка из  КолонкиТаблицыДанных цикл
		НовоеПоле = Элементы.Добавить("ТаблицаКлиентскаяБазаКолонка"+Колонка.Имя,тип("ПолеФормы"),Элементы.ТаблицаКлиентскаяБаза);
		НовоеПоле.ПутьКДанным = "ТаблицаКлиентскаяБаза."+Колонка.Имя;
		НовоеПоле.Вид = ВидПоляФормы.ПолеВвода;
		Если Колонка.Имя = "Ссылка" или Колонка.Имя ="ЗаполненностьИнформации"тогда
			НовоеПоле.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.ВариантКлассификации = "вогЮридическиеЛица" тогда
		ИмяСписка = "СписокЮридическиеЛица";	
	ИначеЕсли Параметры.ВариантКлассификации = "вогТорговыеТочки" тогда
		ИмяСписка = "СписокТорговыеТочки";	
	ИначеЕсли Параметры.ВариантКлассификации = "КонтактныеЛицаПартнеров" тогда
		ИмяСписка = "СписокКонтактныеЛицаПартнеров";	
	ИначеЕсли Параметры.ВариантКлассификации = "Партнеры" тогда
		ИмяСписка = "СписокПартнеры";	
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ИмяСписка = "СписокЮридическиеЛица" Тогда
		ОсновнаяТаблица = "Справочник.вогЮридическиеЛица";
	ИначеЕсли ИмяСписка = "СписокКонтактныеЛицаПартнеров" Тогда
		ОсновнаяТаблица = "Справочник.КонтактныеЛицаПартнеров";
	ИначеЕсли ИмяСписка = "СписокПартнеры" Тогда
		ОсновнаяТаблица =  "Справочник.Партнеры";	
	Иначе
		ОсновнаяТаблица = "Справочник.вогТорговыеТочки";
	КонецЕсли;
	
	
	ТекущийВариантСписка = "ОсновнойВариант"+ИмяСписка;
	//Формирование элементов управления
	//Основной вариант
	Команда = СоздатьНайтиКоманду(
	ЭтаФорма,
	"ОсновнойВариант" + ИмяСписка,
	"Подключаемый_ВариантСпискаПриИзменении",
	);
	Кнопка = СоздатьНайтиКнопку(
	ЭтаФорма,
	Команда.Имя,
	Команда.Имя,
	НСтр("ru = 'Основной'"),
	Элементы.ГруппаКнопокСписка
	);
	//Пользовательские варианты 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяСписка", 	ИмяСписка);
	Запрос.УстановитьПараметр("Автор", 		ПараметрыСеанса.ТекущийПользователь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыСписковУправленияКлассификацией.Ссылка КАК Ссылка,
	|	ВариантыСписковУправленияКлассификацией.Представление КАК Представление
	|ИЗ
	|	Справочник.вогВариантыСписковУправленияКлассификацией КАК ВариантыСписковУправленияКлассификацией
	|ГДЕ
	|	ВариантыСписковУправленияКлассификацией.ИмяСписка = &ИмяСписка
	|	И (ВариантыСписковУправленияКлассификацией.Автор = &Автор
	|			ИЛИ ВариантыСписковУправленияКлассификацией.ТолькоДляАвтора = ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Команда = СоздатьНайтиКоманду(
		ЭтаФорма,
		"ВариантСписка__" + ИдентификаторЭлемента(Выборка.Ссылка),
		"Подключаемый_ВариантСпискаПриИзменении"
		);
		
		Кнопка = СоздатьНайтиКнопку(
		ЭтаФорма,
		Команда.Имя,
		Команда.Имя,
		Выборка.Представление,
		Элементы.ГруппаКнопокСписка,
		);
		
	КонецЦикла;
	
	// ++ VOG Солодов В.В. 12.09.2019 task 615
	Параметры.Свойство("Отбор", ОтборТаблицы);
	// -- VOG Солодов В.В. 12.09.2019
	
	ОбновитьДанные(Истина);
	Если ЗначениеЗаполнено(Параметры.СтруктураЗначенийКлассификаторов) тогда 
		ЛогическоеВыражениеОтбораКлассификаторов = Параметры.СтруктураЗначенийКлассификаторов.ЛогическоеВыражение;
		УстановитьОтборПоКлассификаторам(Параметры.СтруктураЗначенийКлассификаторов.ЗначенияКлассификаторов, Параметры.СтруктураЗначенийКлассификаторов.ЗначенияРеквизитов);
		ОбновитьДанные();
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 16.04.2020 CRM-516
	Если Параметры.Свойство("МножественныйВыбор", МножественныйВыбор)
		И Параметры.МножественныйВыбор = Истина Тогда
		
		Элементы.ТаблицаКлиентскаяБаза.РежимВыделения = РежимВыделенияТаблицы.Множественный;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 16.04.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКлиентскаяБазаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбранныйЭлемент = ЭлементВыборНаСервере(ВыбраннаяСтрока);
	
	ОповеститьОВыборе(ВыбранныйЭлемент[0]);
	
КонецПроцедуры

&НаСервере
Функция  ЭлементВыборНаСервере(Знач ВыбранныеСтроки)
	
	МассивСсылок = Новый Массив();
	
	Если ТипЗнч(ВыбранныеСтроки) = тип("Массив") Тогда
		
		Для Каждого ИдентификаторСтроки из ВыбранныеСтроки Цикл
			                                
			Элемент = ТаблицаКлиентскаяБаза.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			МассивСсылок.Добавить(Элемент.Ссылка);
			
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ВыбранныеСтроки) = тип("Число") Тогда	
		
		Элемент = ТаблицаКлиентскаяБаза.НайтиПоИдентификатору(ВыбранныеСтроки);
		
		МассивСсылок.Добавить(Элемент.Ссылка);
		
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаКлиентскаяБазаВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ВыбранныйЭлемент = ЭлементВыборНаСервере(Значение);
	
	// ++ VOG Солодов В.В. 16.04.2020 CRM-516
	Если МножественныйВыбор Тогда
		ОповеститьОВыборе(ВыбранныйЭлемент);
	Иначе
		ОповеститьОВыборе(ВыбранныйЭлемент[0]);
	КонецЕсли;
	// До изменения
	//ОповеститьОВыборе(ВыбранныйЭлемент[0]);
	// -- VOG Солодов В.В. 16.04.2020
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ИдентификаторЭлемента(Ссылка)
	
	Возврат СтрЗаменить(Ссылка.УникальныйИдентификатор(), "-", "_");	
	
КонецФункции // ИдентификаторЭлемента()


&НаСервереБезКонтекста
Процедура ДинамСписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьНайтиКоманду(Форма,
	ИмяКоманды, 
	Действие,
	ОтображениеКнопки = Неопределено,
	Картинка = Неопределено,
	Подсказка = Неопределено)
	
	Команда = Форма.Команды.Найти(ИмяКоманды);						
	Если Команда = Неопределено Тогда
		Команда 			= Форма.Команды.Добавить(ИмяКоманды);
		Команда.Действие	= Действие;
		
		Если ОтображениеКнопки <> Неопределено Тогда
			Команда.Отображение	= ОтображениеКнопки;
		КонецЕсли;
		
		Если Картинка <> Неопределено Тогда
			Команда.Картинка = Картинка;
		КонецЕсли;
		
		Если НЕ Подсказка = Неопределено Тогда
			Команда.Подсказка = Подсказка;
		КонецЕсли;
		
	КонецЕсли;			
	
	Возврат Команда;
	
КонецФункции // СоздатьНайтиКоманду()
&НаСервереБезКонтекста
Функция СоздатьНайтиКнопку(Форма,
	ИмяКнопки, 
	ИмяКоманды,
	Заголовок = "",
	Родитель = Неопределено,
	Ширина = 0, 
	Высота = 0);  
	
	Элементы = Форма.Элементы;	
	
	Кнопка = Элементы.Найти(ИмяКнопки);
	Если Кнопка = Неопределено Тогда
		Кнопка 			  = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ?(Родитель = Неопределено, Форма, Родитель));
		Кнопка.Заголовок  = Заголовок;
		Кнопка.ИмяКоманды = ИмяКоманды;
		Кнопка.Ширина 	  = Ширина;
		Кнопка.Высота 	  = Высота;
		
	КонецЕсли;
	
	Возврат Кнопка;
	
КонецФункции // СоздатьНайтиКнопку()



&НаКлиенте
Процедура НастроитьОтборПоКлассификаторам(Команда)
	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Принадлежность"	 	  , ОсновнаяТаблица);
	ПараметрыФормы.Вставить("МассивЗначений"	 	  , ОтборСписокЗначенийКлассификаторов.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("МассивЗначенийРеквизитов", ОтборСписокЗначенийРеквизитовКлассификаторов.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("ЛогическоеВыражение"	  , ЛогическоеВыражениеОтбораКлассификаторов);
	
	Оповещение = Новый ОписаниеОповещения("НастроитьОтборПоКлассификаторамЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.CRM_ФормаПодбораЗначенийКлассификаторов", 
	ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборПоКлассификаторамЗавершение(СтруктураЗначенийКлассификаторов, ДополнительныеПараметры) Экспорт
	
	Если СтруктураЗначенийКлассификаторов = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЛогическоеВыражениеОтбораКлассификаторов = СтруктураЗначенийКлассификаторов.ЛогическоеВыражение;
	УстановитьОтборПоКлассификаторам(СтруктураЗначенийКлассификаторов.ЗначенияКлассификаторов, СтруктураЗначенийКлассификаторов.ЗначенияРеквизитов);
	ОбновитьДанные();
	
	
КонецПроцедуры // НастроитьОтборПоКлассификаторамЗавершение()


&НаСервере
Процедура УстановитьОтборПоКлассификаторам(Знач ЗначенияКлассификаторов = Неопределено, Знач ЗначенияРеквизитов = Неопределено)
	
	//Значения
	Если ЗначенияКлассификаторов = Неопределено Тогда
		ЗначенияКлассификаторов = ОтборСписокЗначенийКлассификаторов.ВыгрузитьЗначения();
	Иначе
		ОтборСписокЗначенийКлассификаторов.ЗагрузитьЗначения(ЗначенияКлассификаторов);
	КонецЕсли;
	
	//Реквизиты
	Если ЗначенияРеквизитов = Неопределено Тогда
		ЗначенияРеквизитов = ОтборСписокЗначенийРеквизитовКлассификаторов.ВыгрузитьЗначения();
	Иначе
		ОтборСписокЗначенийРеквизитовКлассификаторов.ЗагрузитьЗначения(ЗначенияРеквизитов);
	КонецЕсли;	
	
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Компоновщик.Настройки.Отбор.Элементы, "ГруппаИЛИЗначенийИРеквизитовКлассификатора", 
	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);	
	Если ЗначенияКлассификаторов.Количество() > 0 Тогда
		КоличествоЭлементовОтбора = ЗначенияКлассификаторов.Количество();
		Для Сч = 0 По КоличествоЭлементовОтбора - 1 Цикл
			ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИ.Элементы, "ГруппаИЗначенийИРеквизитовКлассификатора" + Формат(Сч, "ЧГ="), 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);	
			
			ЭлементЗначенияКлассификаторов 			= ЗначенияКлассификаторов[Сч];	
			ЭлементЗначенияРеквизитаКлассификаторов = ЗначенияРеквизитов[Сч];	
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ, 
			"ЗначениеКлассификатора", ЭлементЗначенияКлассификаторов, ВидСравненияКомпоновкиДанных.Равно);
			
			Если ТипЗнч(ЭлементЗначенияРеквизитаКлассификаторов) = Тип("Число") Тогда
				ВидСравненияСписка = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;	
			Иначе	
				ВидСравненияСписка = ВидСравненияКомпоновкиДанных.Равно;	
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ, 
			"ЗначениеРеквизита", ЭлементЗначенияРеквизитаКлассификаторов, ВидСравненияСписка);
		КонецЦикла;
	КонецЕсли;
	
	ИспользуетсяОтборПоКлассификатору = ЗначенияКлассификаторов.Количество() > 0;
	Если ИспользуетсяОтборПоКлассификатору тогда
		Элементы.ФормаОтключитьОтбор.Видимость = Истина;
	Иначе
		Элементы.ФормаОтключитьОтбор.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьПараметрНастройки(Компоновщик.Настройки.ПараметрыДанных, 
	"ЛогическоеВыражение", ЛогическоеВыражениеОтбораКлассификаторов, ИспользуетсяОтборПоКлассификатору);	
	УстановитьПараметрНастройки(Компоновщик.Настройки.ПараметрыДанных, 
	"КоличествоЗначенийКлассификатора", ЗначенияКлассификаторов.Количество(), ИспользуетсяОтборПоКлассификатору);	
	УстановитьПараметрНастройки(Компоновщик.Настройки.ПараметрыДанных, 
	"ИспользуетсяОтборПоКлассификатору", Истина, ИспользуетсяОтборПоКлассификатору);	
	
КонецПроцедуры // УстановитьОтборПоКлассификаторам()

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураТекущегоРаздела(Форма, Знач ТекущийРаздел = Неопределено)
	
	Если ТекущийРаздел = Неопределено Тогда
		ТекущийРаздел = Форма.ПереключательРазделов;
		
	КонецЕсли;
	
	Возврат Форма.ДанныеРазделов[ТекущийРаздел];
	
КонецФункции // СтруктураТекущегоРаздела()


&НаСервереБезКонтекста
Функция СсылкаВариантаСписка(ИмяЭлемента)
	
	МассивИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЭлемента, "__");	
	
	Возврат Справочники.вогВариантыСписковУправленияКлассификацией.ПолучитьСсылку(
	Новый УникальныйИдентификатор(СтрЗаменить(МассивИмени[1], "_", "-"))
	);
	
КонецФункции // СсылкаВариантаСписка()



&НаСервере
Процедура УстановитьПараметрНастройки(Параметры, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметраКомпоновкиДанных = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		Если Использование И ЗначениеПараметраКомпоновкиДанных.Значение <> Значение Тогда
			ЗначениеПараметраКомпоновкиДанных.Значение = Значение;
		КонецЕсли;
		Если ЗначениеПараметраКомпоновкиДанных.Использование <> Использование Тогда
			ЗначениеПараметраКомпоновкиДанных.Использование = Использование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВариантСпискаПриИзменении(Команда)
	
	ОтборСписокЗначенийКлассификаторов.Очистить();
	ОтборСписокЗначенийРеквизитовКлассификаторов.Очистить();
	ЛогическоеВыражениеОтбораКлассификаторов = "";
	ИспользуетсяОтборПоКлассификатору = Ложь;
	
	ТекущийВариантСписка = Команда.Имя; 
	ОбновитьДанные(Истина);
	
КонецПроцедуры // Подключаемый_ВариантСпискаПриИзменении()

&НаКлиенте
Процедура ОтключитьОтбор(Команда)
	
	ОтборСписокЗначенийКлассификаторов.Очистить();
	ОтборСписокЗначенийРеквизитовКлассификаторов.Очистить();
	ЛогическоеВыражениеОтбораКлассификаторов = "";
	УстановитьОтборПоКлассификаторам();
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	

КонецПроцедуры


