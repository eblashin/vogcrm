
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  Ссылка       - Ссылка на объект	- Элемент справочника, документ, ...
//  ИмяРеквизита - Строка			- Например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - Зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
КонецФункции // ЗначениеРеквизитаОбъекта()

&НаСервереБезКонтекста
// Функция возвращает массив структур имен и сининимов справочников, имеющих табличную часть "КонтактнаяИнформация"
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив имен справочников
//
Функция ПолучитьМассивСтруктурСправочников()
	МассивСтруктурСправочников = Новый Массив;
	УстановитьПривилегированныйРежим(Истина); 	
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.КонтактВзаимодействия.Тип.Типы() Цикл
		ТекущийСправочник = Новый(Тип);
		Если ТекущийСправочник.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") = Неопределено Тогда Продолжить; КонецЕсли;
		СтруктураСправочника = Новый Структура;
		СтруктураСправочника.Вставить("Имя",		ТекущийСправочник.Метаданные().Имя);
		СтруктураСправочника.Вставить("Синоним",	ТекущийСправочник.Метаданные().Синоним);
		МассивСтруктурСправочников.Добавить(СтруктураСправочника);	
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь); 	
	Возврат МассивСтруктурСправочников;
КонецФункции // ПолучитьМассивСтруктурСправочников()

&НаСервереБезКонтекста
// Функция возвращает массив элементов переданного справочника
//
// Параметры:
//	Справочник	- Строка	- Имя справочника в конфигурации
//
// Возвращаемое значение:
//	Массив	- Массив элементов справочника
//
Функция ПолучитьМассивКонтактов(Справочник, ТекущийВладелец = Неопределено)
	МассивКонтактов = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", ТекущийВладелец);
	Запрос.Текст = "";
 	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Получатели.Ссылка
	               |ИЗ
	               |	Справочник." + Справочник + " КАК Получатели
	               |ГДЕ
	               |	НЕ Получатели.ПометкаУдаления";
	УстановитьПривилегированныйРежим(Истина); 	
	Если ЗначениеЗаполнено(ТекущийВладелец) И (Метаданные.Справочники[Справочник].Владельцы.Количество() > 0) Тогда
		Запрос.Текст = Запрос.Текст + "
				   |	И Получатели.Владелец = &Владелец";
	КонецЕсли;	
	УстановитьПривилегированныйРежим(Ложь); 	
	Запрос.Текст = Запрос.Текст + "
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Получатели.Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Ссылка.ЭтоГруппа Тогда
			МассивКонтактов.Добавить(Выборка.Ссылка);
		КонецЕсли;	
	КонецЦикла;	
	Возврат МассивКонтактов;
КонецФункции // ПолучитьМассивКонтактов()

&НаСервереБезКонтекста
// Функция возвращает наличие владельца у контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	Булево	- Наличие владельца
//
Функция ЕстьВладелец(Контакт)
	Возврат НЕ (Контакт.Владелец = Неопределено);
КонецФункции // ЕстьВладелец()	

&НаСервереБезКонтекста
// Функция возвращает имя владельца контакта
//
// Параметры:
//	Контакт	- СправочникСсылка	- Контакт
//
// Возвращаемое значение:
//	Строка	- Имя справочника владельца
//
Функция ИмяВладельца(Контакт)
	Возврат Контакт.Владелец.Метаданные().Имя;
КонецФункции // ИмяВладельца()	

&НаКлиенте
// Процедура заполняет таблицу телефонов для объекта
//
// Параметры:
//	Ссылка	- Произвольный	- ссылка на владельца телефонов
//
Процедура ЗаполнитьТаблицуТелефонов(Ссылка)
	СписокТелефонов.Очистить();
	МассивТелефонов = ОтправкаSMSЧерезSMS4B.ПолучитьМассивТелефоновИФаксов(Ссылка);
	Для Каждого Телефон Из МассивТелефонов Цикл
		НомерТелефона = ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Телефон.Представление);
		Если СтрДлина(НомерТелефона) > 9 Тогда
			Если Найти(Прав(НомерТелефона, 10), "9") = 1 Тогда
				НоваяСтрока	= СписокТелефонов.Вставить(0);
			Иначе	
				НоваяСтрока	= СписокТелефонов.Добавить();
			КонецЕсли;	
		Иначе
			НоваяСтрока	= СписокТелефонов.Добавить();
		КонецЕсли;	
		НоваяСтрока.Вид 			= Телефон.Вид;
		НоваяСтрока.Представление	= Телефон.Представление;
		НоваяСтрока.Ссылка 			= Ссылка;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьТаблицуТелефонов()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "Контакты"
//
// Параметры:
//	Нет.
//
Процедура ОбработчикКонтактыПриАктивизацииСтроки()
	ТД = Элементы.Контакты.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущийКонтакт = ТД.Ссылка Тогда
		Возврат;
	КонецЕсли;
	ТекущийКонтакт = ТД.Ссылка;
	ЗаполнитьТаблицуТелефонов(ТД.Ссылка);
КонецПроцедуры // ОбработчикКонтактыПриАктивизацииСтроки()

&НаКлиенте
// Функция формирует текстовую строку по шаблону
//
// Параметры:
//	ШаблонТекст	- Строка			- Текст шаблона
//	Контрагент	- СправочникСсылка	- Контрагент для заполнения
//
// Возвращаемое значение:
//	Строка	- Сформированная текстовая строка
//
Функция СформироватьСообщениеПоШаблону(ТаблицаАвтотекста, Знач ШаблонТекст, Контрагент, ОтправлятьВТранслите)
	РедактируемыйТекст = ШаблонТекст;
	Для Каждого СтрокаАвтотекста Из ТаблицаАвтотекста Цикл
		Если Найти(РедактируемыйТекст, СтрокаАвтотекста.Тэг) > 0 Тогда
			СтруктураАвтотекста = Новый Структура;
			СтруктураАвтотекста.Вставить("Тэг",			СтрокаАвтотекста.Тэг);
			СтруктураАвтотекста.Вставить("Действие",	СтрокаАвтотекста.Действие);
			ЗначениеТэга = CRM_АвтотекстПереопределяемый.ПолучитьЗначениеТэгаСМС(СтруктураАвтотекста, Контрагент);
			РедактируемыйТекст = СтрЗаменить(РедактируемыйТекст, СтрокаАвтотекста.Тэг, ЗначениеТэга);
		КонецЕсли;
	КонецЦикла;
	Если ОтправлятьВТранслите Тогда
		РедактируемыйТекст = ОтправкаSMSЧерезSMS4B.Транслитерация(РедактируемыйТекст);
	КонецЕсли; 
	Возврат РедактируемыйТекст;
КонецФункции // СформироватьСообщениеПоШаблону()

&НаКлиенте
// Процедура выполняет действия после выбора номера телефона
//
// Параметры:
//	ВыбраннаяСтрока	- СтрокаТабличнойЧасти	- Выбранная строка
//
Процедура ВыбратьКонтакт(ВыбраннаяСтрока)
	ТД = Элементы.Контакты.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ТаблицаАдресатов = ВладелецФормы.Объект.Адресаты;
	НоваяСтрока = ТаблицаАдресатов.Добавить();
	НоваяСтрока.Контакт					= ТД.Ссылка;
 	НоваяСтрока.ПредставлениеКонтакта	= ЗначениеРеквизитаОбъекта(ТД.Ссылка, "Наименование");
	Если ВыбраннаяСтрока = Неопределено Тогда
		// У контакта нет телефонов
		НоваяСтрока.КакСвязаться		= "";
		НоваяСтрока.НомерДляОтправки	= ""; 
	Иначе	
		НоваяСтрока.КакСвязаться		= ВыбраннаяСтрока.Представление;
		НоваяСтрока.НомерДляОтправки	= "+" + ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(ВыбраннаяСтрока.Представление);
	КонецЕсли;
	НоваяСтрока.СостояниеСообщения	= ПредопределенноеЗначение("Перечисление.СостоянияСообщенияSMS.Черновик");
	Если ВладелецФормы.Объект.sms4bАвтотекстБулево Тогда
		НоваяСтрока.sms4bТекстСообщения = СформироватьСообщениеПоШаблону(ВладелецФормы.ТаблицаАвтотекста,
			ВладелецФормы.Объект.ТекстСообщения, НоваяСтрока.Контакт, ВладелецФормы.Объект.ОтправлятьВТранслите);
	КонецЕсли;
КонецПроцедуры // ВыбратьКонтакт()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ДЕЙСТВИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "ТекущийСправочник"
//
Процедура ТекущийСправочникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущийВладелец = Неопределено;
	Контакт			= ПредопределенноеЗначение("Справочник." + ВыбранноеЗначение + ".ПустаяСсылка");
	ЕстьВладелец	= ЕстьВладелец(Контакт);
	Если ЕстьВладелец Тогда
		ИмяВладельца	= ИмяВладельца(Контакт);
		Элементы.ТекущийВладелец.Видимость = Истина;
		Элементы.ТекущийВладелец.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + ИмяВладельца);
	Иначе
		Элементы.ТекущийВладелец.Видимость = Ложь;
	КонецЕсли;
	ТекущийСправочник = ВыбранноеЗначение;
	ТекущийВладелецПриИзменении(Элемент);	
КонецПроцедуры // ТекущийСправочникОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ТекущийВладелец"
//
Процедура ТекущийВладелецПриИзменении(Элемент)
	Контакты.Очистить();
	СписокТелефонов.Очистить();
	МассивКонтактов = ПолучитьМассивКонтактов(ТекущийСправочник, ТекущийВладелец);
	Для Каждого ЭлементМассива Из МассивКонтактов Цикл
		НоваяСтрока			= Контакты.Добавить();
		НоваяСтрока.Ссылка	= ЭлементМассива;
	КонецЦикла;	
	ТекущийКонтакт = Неопределено;
КонецПроцедуры // ТекущийВладелецПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "ТекущийВладелец"
//
Процедура ТекущийВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь);
	Если ЗначениеЗаполнено(ТекущийВладелец) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока",	ТекущийВладелец);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);	
	ОткрытьФорму("Справочник." + ИмяВладельца + ".ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // ТекущийВладелецНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Очистка" элемента формы "ТекущийВладелец"
//
Процедура ТекущийВладелецОчистка(Элемент, СтандартнаяОбработка)
	Владелец = Неопределено;
	ТекущийВладелецПриИзменении(Элемент);
КонецПроцедуры // ТекущийВладелецОчистка()

&НаКлиенте
// Процедура - обработчик события "Выбор" таблицы формы "Контакты"
//
Процедура КонтактыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СписокТелефонов.ТекущиеДанные;
	Если (ТД = Неопределено) И (СписокТелефонов.Количество() > 0) Тогда
		ТД = СписокТелефонов[0];
	КонецЕсли;	
	ВыбратьКонтакт(ТД);
КонецПроцедуры // КонтактыВыбор()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "Контакты"
//
Процедура КонтактыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикКонтактыПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры // КонтактыПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "Контакты"
//
Процедура КонтактыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // КонтактыПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы формы "Контакты"
//
Процедура КонтактыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // КонтактыПередУдалением()

&НаКлиенте
// Процедура - обработчики события "Выбор" элемента формы "СписокТелефонов"
//
Процедура СписокТелефоновВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СписокТелефонов.ТекущиеДанные;
	ВыбратьКонтакт(ТД);
КонецПроцедуры // СписокТелефоновВыбор()

&НаКлиенте
// Процедура - обработчики события "ПередНачаломДобавления" элемента формы "СписокТелефонов"
//
Процедура СписокТелефоновПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // СписокТелефоновПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчики события "ПередУдалением" элемента формы "СписокТелефонов"
//
Процедура СписокТелефоновПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // СписокТелефоновПередУдалением()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере"
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ТекущийСправочник") Тогда
		ТекущийСправочник = Параметры.ТекущийСправочник;
	КонецЕсли;	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии"
//
Процедура ПриОткрытии(Отказ)
	МассивСтруктурСправочников = ПолучитьМассивСтруктурСправочников();
	Если МассивСтруктурСправочников.Количество() = 0 Тогда
		Отказ = Истина;
	Иначе
		Элементы.ТекущийСправочник.СписокВыбора.Очистить();
		Для Каждого ЭлементМассива Из МассивСтруктурСправочников Цикл
			Элементы.ТекущийСправочник.СписокВыбора.Добавить(ЭлементМассива.Имя, ЭлементМассива.Синоним);
		КонецЦикла;	
		Элементы.ТекущийСправочник.СписокВыбора.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		Если ПустаяСтрока(ТекущийСправочник) Тогда
			ТекущийСправочник = Элементы.ТекущийСправочник.СписокВыбора[0].Значение;
		ИначеЕсли Элементы.ТекущийСправочник.СписокВыбора.НайтиПоЗначению(ТекущийСправочник) = Неопределено Тогда			
			ТекущийСправочник = Элементы.ТекущийСправочник.СписокВыбора[0].Значение;
		КонецЕсли;	
		ТекущийСправочникОбработкаВыбора(Неопределено, ТекущийСправочник, Истина);
	КонецЕсли;
КонецПроцедуры // ПриОткрытии()
