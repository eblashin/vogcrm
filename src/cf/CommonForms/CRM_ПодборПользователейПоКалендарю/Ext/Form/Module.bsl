////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	Если Форма.Элементы.ПанельВыбранныеПользователиСПериодом.Видимость <> Форма.ПризнакПоказыватьТаблицуПериодов Тогда
		Форма.Элементы.ПанельВыбранныеПользователиСПериодом.Видимость = Форма.ПризнакПоказыватьТаблицуПериодов;
	КонецЕсли;
	Если Форма.Элементы.КалендарьТабличныйДокументКонтекстноеМенюКомандаДобавитьПользователяСПериодом.Видимость <> Форма.ПризнакВыбиратьПериоды Тогда
		Форма.Элементы.КалендарьТабличныйДокументКонтекстноеМенюКомандаДобавитьПользователяСПериодом.Видимость = Форма.ПризнакВыбиратьПериоды;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьПериод(ПриоритетДатыНачала)
	Если ПериодНачало > ПериодОкончание Тогда
		Если ПриоритетДатыНачала Тогда
			ПериодОкончание = ПериодНачало;
		Иначе
			ПериодНачало = ПериодОкончание;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСодержимоеФормыПриИзмененииГруппы()
	
	Если НЕ ИспользоватьГруппы
	 ИЛИ Элементы.ГруппыПользователей.ТекущаяСтрока = ГруппаПользователейВсеПользователи Тогда
		//
		Элементы.ГруппаПоказыватьПользователейДочернихГрупп.ТекущаяСтраница = Элементы.ГруппаНельзяУстановитьСвойство;
		ОбновитьЗначениеПараметраКомпоновкиДанных(ПользователиСписок, "ВыбиратьИерархически", Истина);
		ОбновитьЗначениеПараметраКомпоновкиДанных(ПользователиСписок, "ГруппаПользователей", ГруппаПользователейВсеПользователи);
	Иначе
		Элементы.ГруппаПоказыватьПользователейДочернихГрупп.ТекущаяСтраница = Элементы.ГруппаУстановитьСвойство;
		ОбновитьЗначениеПараметраКомпоновкиДанных(ПользователиСписок, "ВыбиратьИерархически", ВыбиратьИерархически);
		ОбновитьЗначениеПараметраКомпоновкиДанных(ПользователиСписок, "ГруппаПользователей", Элементы.ГруппыПользователей.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначениеПараметраКомпоновкиДанных(Знач ВладелецПараметров, Знач ИмяПараметра, Знач ЗначениеПараметра)
	
	Для каждого Параметр Из ВладелецПараметров.Параметры.Элементы Цикл
		Если Строка(Параметр.Параметр) = ИмяПараметра Тогда
			Если Параметр.Использование И Параметр.Значение = ЗначениеПараметра Тогда
				Возврат;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВладелецПараметров.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьКалендарьТабличныйДокумент()
	КалендарьТабличныйДокумент.Очистить();
	КалендарьТабличныйДокумент.ФиксацияСверху = 0;
	КалендарьТабличныйДокумент.ФиксацияСлева= 0;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНастройкиОтображенияПоУмолчанию()
	СтруктураНастройки = Новый Структура();
	
	// Настройки отображения
	СтруктураНастройкиОтображения = Новый Структура(
	"НачалоДняКалендаряЧас,
	|КонецДняКалендаряЧас,
	|НачалоРабочегоДняЧас,
	|КонецРабочегоДняЧас,
	|КалендарьЦветФонаСобытияПоУмолчанию,
	|КалендарьЦветФонаКонтрольнойТочкиПроектаПоУмолчанию,
	|КалендарьЦветФонаРабочегоВремени,
	|КалендарьЦветФонаНеРабочегоВремени,
	|КалендарьЦветШкалыВремениРабочегоВремени,
	|КалендарьЦветШкалыВремениНеРабочегоВремени,
	|КалендарьЦветФонаЗаголовкаДень,
	|КалендарьЦветФонаЗаголовкаРесурс,
	|КалендарьШрифтЗаголовкаДень,
	|КалендарьЦветШрифтаЗаголовкаДень,
	|КалендарьШрифтЗаголовкаРесурс,
	|КалендарьЦветШрифтаЗаголовкаРесурс,
	|КалендарьЦветФонаСобытияНаВесьДень,
	|КалендарьЦветФонаТекущееВремяРабочееВремя,
	|КалендарьЦветФонаТекущееВремяНеРабочееВремя,
	|КалендарьЦветИндикатораТекущегоВремени,
	|КалендарьОтображатьПиктограммы,
	|КалендарьКоличествоДнейВНеделе,
	|СписокПредставлениеСобытияВКалендаре,
	|КалендарьМасштабШириныОбластиДень,
	|КалендарьЦветФонаРабочегоВремениТекущийДень,
	|КалендарьЦветФонаНеРабочегоВремениТекущийДень,
	|КалендарьЦветФонаСобытияНаВесьДеньТекущийДень,
	|КалендарьЦветФонаЗаголовкаДеньТекущийДень,
	|КалендарьЦветФонаЗаголовкаРесурсТекущийДень,
	|МесяцЦветФонаЗаголовкаДень,
	|МесяцЦветФонаЗаголовкаДеньТекущийДень,
	|МесяцЦветФонаДень,
	|МесяцЦветФонаДеньТекущийДень,
	|МесяцКоличествоОтображаемыхСобытийВДне,
	|МесяцШиринаДняВЯчейкахБазовая,
	|РасписаниеИнтервалШкалыВремени,
	|РасписаниеВысотаОбластиРесурса,
	|РасписаниеЦветИндикатора,
	|ИспользоватьСобытияНаВесьДень,
	|ЕстьОбеденныйПерерыв,
	|НачалоОбеденногоПерерываЧас,
	|КонецОбеденногоПерерываЧас,
	|СворачиватьОбластьСобытийНаВесьДень,
	|ОбластьСобытийНаВесьДеньСвернутаПоУмолчанию,
	|КалендарьШрифтЗаголовковДнейВМесяце,
	|КалендарьЦветШрифтаЗаголовковДнейВМесяце,
	|КалендарьШрифтЗаголовковДнейНеделиВМесяце,
	|КалендарьЦветШрифтаЗаголовковДнейНеделиВМесяце,
	|КалендарьЦветШрифтаЗаголовкаНерабочегоДня,
	|КалендарьЦветШрифтаЗаголовкаНерабочегоДняМесяц,
	|КалендарьШрифтТекстаСобытия,
	|КалендарьШрифтТекстаЗавершенногоСобытия,
	|КалендарьЦветТекстаСобытияВажностьВысокая,
	|КалендарьЦветТекстаСобытияВажностьНизкая");
	
	СтруктураНастройкиОтображения.НачалоДняКалендаряЧас	= 8;
	СтруктураНастройкиОтображения.КонецДняКалендаряЧас	= 19;
	
	СтруктураНастройкиОтображения.НачалоРабочегоДняЧас	= 0;
	СтруктураНастройкиОтображения.КонецРабочегоДняЧас	= 23;
	
	СтруктураНастройкиОтображения.ЕстьОбеденныйПерерыв	= Ложь;
	СтруктураНастройкиОтображения.НачалоОбеденногоПерерываЧас	= 0;
	СтруктураНастройкиОтображения.КонецОбеденногоПерерываЧас	= 0;
	
	СтруктураНастройкиОтображения.КалендарьЦветФонаРабочегоВремени					= Новый Цвет(255, 255, 255);
	СтруктураНастройкиОтображения.КалендарьЦветФонаНеРабочегоВремени				= Новый Цвет(238, 232, 170);
	
	СтруктураНастройкиОтображения.КалендарьЦветФонаРабочегоВремениТекущийДень		= Новый Цвет(255, 236, 139);
	СтруктураНастройкиОтображения.КалендарьЦветФонаНеРабочегоВремениТекущийДень		= Новый Цвет(240, 230, 140);
	
	СтруктураНастройкиОтображения.КалендарьЦветШкалыВремениРабочегоВремени			= Новый Цвет(255, 255, 255);
	СтруктураНастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени		= Новый Цвет(238, 232, 170);
	
	СтруктураНастройкиОтображения.КалендарьЦветФонаЗаголовкаДень					= Новый Цвет(255, 255, 255);
	СтруктураНастройкиОтображения.КалендарьЦветФонаЗаголовкаДеньТекущийДень			= Новый Цвет(255, 236, 139);
	СтруктураНастройкиОтображения.КалендарьЦветФонаЗаголовкаРесурс					= Новый Цвет(255, 255, 255);
	СтруктураНастройкиОтображения.КалендарьЦветФонаЗаголовкаРесурсТекущийДень		= Новый Цвет(255, 236, 139);
	
	СтруктураНастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДень				= Новый Цвет(255, 255, 255);
	СтруктураНастройкиОтображения.КалендарьЦветФонаСобытияНаВесьДеньТекущийДень		= Новый Цвет(255, 255, 255);
	
	СтруктураНастройкиОтображения.КалендарьЦветФонаТекущееВремяРабочееВремя			= Новый Цвет(255, 160, 122);
	СтруктураНастройкиОтображения.КалендарьЦветФонаТекущееВремяНеРабочееВремя		= Новый Цвет(255, 160, 122);
	
	СтруктураНастройкиОтображения.КалендарьЦветИндикатораТекущегоВремени			= Новый Цвет(255, 127, 80);
	
	СтруктураНастройкиОтображения.МесяцЦветФонаЗаголовкаДень						= Новый Цвет(238, 232, 170);
	СтруктураНастройкиОтображения.МесяцЦветФонаЗаголовкаДеньТекущийДень				= Новый Цвет(255, 204, 0);
	СтруктураНастройкиОтображения.МесяцЦветФонаДень									= Новый Цвет(255, 255, 255);
	СтруктураНастройкиОтображения.МесяцЦветФонаДеньТекущийДень						= Новый Цвет(255, 255, 153);
	
	СтруктураНастройкиОтображения.РасписаниеЦветИндикатора							= Новый Цвет(100, 149, 237);
	
	СтруктураНастройкиОтображения.КалендарьЦветФонаСобытияПоУмолчанию					= Новый Цвет(255, 255, 200);
	СтруктураНастройкиОтображения.КалендарьЦветФонаКонтрольнойТочкиПроектаПоУмолчанию	= Новый Цвет(242, 234, 193);
	
	СтруктураНастройкиОтображения.КалендарьЦветШрифтаЗаголовковДнейВМесяце				= Новый Цвет(134, 96, 0);
	СтруктураНастройкиОтображения.КалендарьЦветШрифтаЗаголовковДнейНеделиВМесяце		= Новый Цвет(179, 128, 0);
	СтруктураНастройкиОтображения.КалендарьЦветШрифтаЗаголовкаДень						= Новый Цвет(179, 128, 0);
	СтруктураНастройкиОтображения.КалендарьЦветШрифтаЗаголовкаРесурс					= Новый Цвет(179, 128, 0);
	
	СтруктураНастройкиОтображения.КалендарьЦветШрифтаЗаголовкаНерабочегоДня				= Новый Цвет(250, 101, 55);
	СтруктураНастройкиОтображения.КалендарьЦветШрифтаЗаголовкаНерабочегоДняМесяц		= Новый Цвет(235, 63, 35);
	
	СтруктураНастройкиОтображения.КалендарьЦветТекстаСобытияВажностьВысокая				= Новый Цвет(255, 0, 0);
	СтруктураНастройкиОтображения.КалендарьЦветТекстаСобытияВажностьНизкая				= Новый Цвет(128, 128, 128);
	
	СтруктураНастройкиОтображения.КалендарьШрифтЗаголовкаДень		= Новый Шрифт("Arial", 9, Истина);
	СтруктураНастройкиОтображения.КалендарьШрифтЗаголовкаРесурс		= Новый Шрифт("Arial", 9, Ложь);
	
	СтруктураНастройкиОтображения.КалендарьШрифтЗаголовковДнейВМесяце		= Новый Шрифт("Arial", 12, Истина);
	СтруктураНастройкиОтображения.КалендарьШрифтЗаголовковДнейНеделиВМесяце	= Новый Шрифт("Arial", 10, Истина);
	
	СтруктураНастройкиОтображения.КалендарьШрифтТекстаСобытия				= Новый Шрифт("Arial", 8, Ложь);
	СтруктураНастройкиОтображения.КалендарьШрифтТекстаЗавершенногоСобытия	= Новый Шрифт("Arial", 8, Ложь, Ложь, Ложь, Истина);
	
	СтруктураНастройкиОтображения.КалендарьОтображатьПиктограммы = Истина;
	
	СтруктураНастройкиОтображения.КалендарьКоличествоДнейВНеделе = 7;
	
	СписокПредставлениеСобытияВКалендаре = Новый СписокЗначений();
	СписокПредставлениеСобытияВКалендаре.Добавить("Тема", НСтр("ru = 'Тема'"), Истина);
	СписокПредставлениеСобытияВКалендаре.Добавить("Время", НСтр("ru = 'Время'"), Истина);
	СписокПредставлениеСобытияВКалендаре.Добавить("Пользователь", НСтр("ru = 'Пользователь'"), Ложь);
	
	СтруктураНастройкиОтображения.СписокПредставлениеСобытияВКалендаре = СписокПредставлениеСобытияВКалендаре;
	
	СтруктураНастройкиОтображения.КалендарьМасштабШириныОбластиДень = 100;
	
	СтруктураНастройкиОтображения.МесяцКоличествоОтображаемыхСобытийВДне = 5;
	СтруктураНастройкиОтображения.МесяцШиринаДняВЯчейкахБазовая = 7;
	
	СтруктураНастройкиОтображения.РасписаниеИнтервалШкалыВремени = 15;
	
	СтруктураНастройкиОтображения.РасписаниеВысотаОбластиРесурса = 2;
	
	СтруктураНастройкиОтображения.ИспользоватьСобытияНаВесьДень = Истина;
	
	СтруктураНастройкиОтображения.СворачиватьОбластьСобытийНаВесьДень = Истина;
	СтруктураНастройкиОтображения.ОбластьСобытийНаВесьДеньСвернутаПоУмолчанию = Ложь;
	
	СтруктураНастройки.Вставить("НастройкиОтображения", СтруктураНастройкиОтображения);
	
	// Общие настройки
	СтруктураОбщиеНастройки = Новый Структура(
	"КалендарьИспользоватьКалендарныеГрафики,
	|ОтображатьСписокЗадач,
	|ОтображатьПолеСодержаниеСпискаЗадач,
	|ОтображатьПолеСодержанияКалендаря");
	
	// Полное имя объекта по-умолчанию.
	СтруктураОбщиеНастройки.ОтображатьСписокЗадач = Истина;
	
	СтруктураОбщиеНастройки.ОтображатьПолеСодержаниеСпискаЗадач = Истина;
	СтруктураОбщиеНастройки.ОтображатьПолеСодержанияКалендаря = Истина;
	
	СтруктураОбщиеНастройки.КалендарьИспользоватьКалендарныеГрафики = Истина;
	
	СтруктураНастройки.Вставить("ОбщиеНастройки", СтруктураОбщиеНастройки);
	
	Возврат СтруктураНастройки;
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиКалендаря()
	СтруктураНастройкиОтображения = ПолучитьНастройкиОтображенияПоУмолчанию();
	
	СохраненныеНастройки = CRM_ХранилищеНастроек.Загрузить("Обработка_CRM_Календарь_Настройки", "СтруктураНастроек");
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		Если СохраненныеНастройки.Свойство("НастройкиОтображения") Тогда
			ЗаполнитьЗначенияСвойств(СтруктураНастройкиОтображения.НастройкиОтображения, СохраненныеНастройки.НастройкиОтображения);
		КонецЕсли;
		
		Если СохраненныеНастройки.Свойство("ОбщиеНастройки") Тогда
			ЗаполнитьЗначенияСвойств(СтруктураНастройкиОтображения.ОбщиеНастройки, СохраненныеНастройки.ОбщиеНастройки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПризнакПоказыватьПериодДокумента И ЗначениеЗаполнено(ПериодДокументаНачало) И ЗначениеЗаполнено(ПериодДокументаОкончание) Тогда
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоДняКалендаряЧас = Мин(Час(ПериодДокументаНачало), СтруктураНастройкиОтображения.НастройкиОтображения.НачалоДняКалендаряЧас);
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецДняКалендаряЧас = Макс(Час(ПериодДокументаОкончание), СтруктураНастройкиОтображения.НастройкиОтображения.КонецДняКалендаряЧас);
	КонецЕсли;
	
	// Настройки пользователя
	НастройкиРабочееВремяПользователя = CRM_ОбщегоНазначенияСервер.ПолучитьСтруктуруРабочихВременПользователя(ТекущийПользовательСеанса);
	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяНачалаРабочегоДня) Тогда
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоРабочегоДняЧас = Час(НастройкиРабочееВремяПользователя.ВремяНачалаРабочегоДня);
	Иначе
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоРабочегоДняЧас = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяОкончанияРабочегоДня) Тогда
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецРабочегоДняЧас = Час(НастройкиРабочееВремяПользователя.ВремяОкончанияРабочегоДня);
	Иначе
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецРабочегоДняЧас = 23;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва) И ЗначениеЗаполнено(НастройкиРабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва) Тогда
		СтруктураНастройкиОтображения.НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина;
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоОбеденногоПерерываЧас = Час(НастройкиРабочееВремяПользователя.ВремяНачалаОбеденногоПерерыва);
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецОбеденногоПерерываЧас = Час(НастройкиРабочееВремяПользователя.ВремяОкончанияОбеденногоПерерыва);
	Иначе
		СтруктураНастройкиОтображения.НастройкиОтображения.ЕстьОбеденныйПерерыв = Ложь;
		СтруктураНастройкиОтображения.НастройкиОтображения.НачалоОбеденногоПерерываЧас = 0;
		СтруктураНастройкиОтображения.НастройкиОтображения.КонецОбеденногоПерерываЧас = 23;
	КонецЕсли;
	
	СтруктураНастройкиОтображения.НастройкиОтображения.РасписаниеИнтервалШкалыВремени = ИнтервалШкалыВремени;
	
	КэшНастроекОтображения = СтруктураНастройкиОтображения;
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиОтображения()
	Если ТипЗнч(КэшНастроекОтображения) <> Тип("Структура") Тогда
		ЗагрузитьНастройкиКалендаря();
	КонецЕсли;
	Возврат КэшНастроекОтображения.НастройкиОтображения;
КонецФункции

&НаКлиенте
Функция ПолучитьНастройкиОтображенияКлиент()
	Если ТипЗнч(КэшНастроекОтображения) <> Тип("Структура") Тогда
		ЗагрузитьНастройкиКалендаря();
	КонецЕсли;
	Возврат КэшНастроекОтображения.НастройкиОтображения;
КонецФункции

&НаСервере
Функция ПолучитьНастройкиОбщие()
	Если ТипЗнч(КэшНастроекОтображения) <> Тип("Структура") Тогда
		ЗагрузитьНастройкиКалендаря();
	КонецЕсли;
	Возврат КэшНастроекОтображения.ОбщиеНастройки;
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДанныхЗапроса()
	СтруктураРезультат = Новый Структура("ТекстЗапроса,Параметры,ПоляОтбора,Отборы");
	
	// текст запроса
	СтруктураРезультат.ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобытияКалендаряПользователя.Объект						КАК Событие,
	|	СобытияКалендаряПользователя.Пользователь				КАК Пользователь,
	|	СобытияКалендаряПользователя.ПериодНачало				КАК ПериодНачало,
	|	ВЫБОР
	|		КОГДА СобытияКалендаряПользователя.ПериодОкончание = ДАТАВРЕМЯ(1,1,1) ТОГДА СобытияКалендаряПользователя.ПериодНачало
	|		ИНАЧЕ СобытияКалендаряПользователя.ПериодОкончание
	|	КОНЕЦ													КАК ПериодОкончание,
	|	
	|	СобытияКалендаряПользователя.Тема						КАК Тема,
	|	СобытияКалендаряПользователя.НаВесьДень					КАК СобытиеНаВесьДень,
	|	СобытияКалендаряПользователя.ПомещениеСобытия			КАК Помещение,
	|	СобытияКалендаряПользователя.ВидСобытия					КАК ВидСобытия,
	|	СобытияКалендаряПользователя.ВходящееИсходящееСобытие	КАК ВходящееИсходящееСобытие,
	|	СобытияКалендаряПользователя.СостояниеСобытия			КАК СостояниеСобытия,
	|	СобытияКалендаряПользователя.ОсновнаяКатегорияСобытия	КАК ОсновнаяКатегорияСобытия,
	|	СобытияКалендаряПользователя.Проект						КАК Проект,
	|	СобытияКалендаряПользователя.Подразделение				КАК Подразделение,
	|	СобытияКалендаряПользователя.Важность					КАК Важность,
	|	СобытияКалендаряПользователя.Завершено					КАК Завершено,
	|	СобытияКалендаряПользователя.Партнер					КАК Партнер,
	|	СобытияКалендаряПользователя.Объект.Описание			КАК Описание
	|	
	|ИЗ
	|	РегистрСведений.CRM_СобытияКалендаря КАК СобытияКалендаряПользователя
	|	
	|ГДЕ
	|	// Фильтр по заведомо некорректным записям
	|	( СобытияКалендаряПользователя.ПериодОкончание >= СобытияКалендаряПользователя.ПериодНачало ИЛИ (СобытияКалендаряПользователя.ПериодОкончание = ДАТАВРЕМЯ(1,1,1) И СобытияКалендаряПользователя.ПериодНачало <> ДАТАВРЕМЯ(1,1,1)) )
	|	// Фильтр на дату
	|	И (ВЫБОР КОГДА СобытияКалендаряПользователя.ПериодОкончание = ДАТАВРЕМЯ(1,1,1) ТОГДА СобытияКалендаряПользователя.ПериодНачало ИНАЧЕ СобытияКалендаряПользователя.ПериодОкончание КОНЕЦ) >= &ПериодНачало И СобытияКалендаряПользователя.ПериодНачало <= &ПериодОкончание
	|	
	|	//%УСЛОВИЕ_ТИПЫ_ОБЪЕКТОВ%
	|	
	|";
	
	// Обязательные параметры запроса.
	СтруктураРезультат.Параметры = Новый Структура();
	СтруктураРезультат.Отборы = Новый Соответствие();
	
	ТаблицаВыбранныеРесурсы = ПолучитьТаблицуВыбранныхРесурсов();
	Если ПризнакВыбиратьПомещения Тогда
		ИмяПоляОтбора = "Помещение";
	Иначе
		ИмяПоляОтбора = "Пользователь";
	КонецЕсли;
	
	ГруппаИли = Новый Соответствие();
	ОтборЗначениеСписок = Новый СписокЗначений();
	
	Для Каждого СтрокаТаблицы Из ТаблицаВыбранныеРесурсы Цикл
		ОтборЗначениеСписок.Добавить(СтрокаТаблицы.Значение);
	КонецЦикла;
	ГруппаИли.Вставить(ИмяПоляОтбора, Новый Соответствие());
	
	ГруппаИли[ИмяПоляОтбора].Вставить("ВидСравнения",		ВидСравненияКомпоновкиДанных.ВСписке);
	ГруппаИли[ИмяПоляОтбора].Вставить("Значение",			ОтборЗначениеСписок);
	ГруппаИли[ИмяПоляОтбора].Вставить("Использование",	Истина);
	
	СтруктураРезультат.Отборы.Вставить("ГруппаОтбораПоВыбраннымРесурсам", Новый Соответствие());
	СтруктураРезультат.Отборы["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("ВидСравнения",	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	СтруктураРезультат.Отборы["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("Значение",		ГруппаИли);
	СтруктураРезультат.Отборы["ГруппаОтбораПоВыбраннымРесурсам"].Вставить("Использование",	Истина);
	
	СтруктураРезультат.Отборы.Вставить("Завершено", Новый Соответствие());
	СтруктураРезультат.Отборы["Завершено"].Вставить("ВидСравнения",		ВидСравненияКомпоновкиДанных.Равно);
	СтруктураРезультат.Отборы["Завершено"].Вставить("Значение",			Ложь);
	СтруктураРезультат.Отборы["Завершено"].Вставить("Использование",	Истина);
	
	Возврат СтруктураРезультат;
КонецФункции

&НаСервере
Процедура СоздатьОтборПоОписанию(ЭлементыОтбора, ОписанияЭлементовОтбора, ДоступныеПоля = Неопределено, ЭтоОтборДляДанныхИзКэша = Ложь)
	Для Каждого ОписаниеЭлементаОтбораКлючЗначение Из ОписанияЭлементовОтбора Цикл
		ОписаниеЭлементаОтбора = ОписаниеЭлементаОтбораКлючЗначение.Значение;
		
		Если ТипЗнч(ОписаниеЭлементаОтбора["Значение"]) = Тип("Соответствие") Тогда
			НоваяГруппаОтбора				= ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			НоваяГруппаОтбора.ТипГруппы		= ОписаниеЭлементаОтбора["ВидСравнения"];
			НоваяГруппаОтбора.Использование	= ОписаниеЭлементаОтбора["Использование"];
			
			СоздатьОтборПоОписанию(НоваяГруппаОтбора.Элементы, ОписаниеЭлементаОтбора["Значение"], ДоступныеПоля);
			
		Иначе
			Если ДоступныеПоля <> Неопределено Тогда
				Если ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(ОписаниеЭлементаОтбораКлючЗначение.Ключ)) = Неопределено Тогда Продолжить; КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных(ОписаниеЭлементаОтбораКлючЗначение.Ключ);
			НовыйЭлементОтбора.ВидСравнения		= ОписаниеЭлементаОтбора["ВидСравнения"];
			
			НовыйЭлементОтбора.ПравоеЗначение = ОписаниеЭлементаОтбора["Значение"];
			
			НовыйЭлементОтбора.Использование	= ОписаниеЭлементаОтбора["Использование"];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиПолеВОтборе(ЭлементыОтбора, Поле)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НайденныйЭлемент = НайтиПолеВОтборе(ЭлементОтбора.Элементы, Поле);
			Если НайденныйЭлемент <> Неопределено Тогда
				Возврат НайденныйЭлемент;
			КонецЕсли;
		Иначе
			Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
				Возврат ЭлементОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура УстановитьЗначениеВОтборе(Отбор, Имя, ВидСравнения, Значение, Использование, ДоступныеПоля = Неопределено)
	Если ДоступныеПоля <> Неопределено Тогда
		Если ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(Имя)) = Неопределено Тогда Возврат; КонецЕсли;
	КонецЕсли;
	ПолеОтбораЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя);
	ЭлементОтбора = НайтиПолеВОтборе(Отбор.Элементы, ПолеОтбораЛевоеЗначение);
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = ПолеОтбораЛевоеЗначение;
	Иначе
		Возврат;
	КонецЕсли;
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.Использование = Использование;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСобытийЗаПериодПоДням(СтруктураДанныхКлиент, НастройкиОтображения, МаксимальныйИндексСобытияНаВесьДень = -1, ПериодНачало = Неопределено, ПериодОкончание = Неопределено)
	ЗаписанноеСобытиеНеВходитВТекущийОтбор = Ложь;
	
	бИспользоватьСобытияНаВесьДень = НастройкиОтображения.ИспользоватьСобытияНаВесьДень;
	
	// Создание и настройка схемы компоновки данных.
	СКДДанныеКалендаря = Новый СхемаКомпоновкиДанных();
	
	ИсточникДанных = СКДДанныеКалендаря.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанныхСобытия";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	СтруктураДанныхЗапроса = ПолучитьСтруктуруДанныхЗапроса();
	
	ТекстЗапроса = СтруктураДанныхЗапроса.ТекстЗапроса;
	
	НаборДанных = СКДДанныеКалендаря.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанныхСобытия";
	НаборДанных.ИсточникДанных = "ИсточникДанныхСобытия";
	НаборДанных.Запрос = ТекстЗапроса;
	
	Настройки = СКДДанныеКалендаря.НастройкиПоУмолчанию;
	
	ДетальнаяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = Настройки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКДДанныеКалендаря));
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Для Каждого ПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		// Пропускаем системные поля
		Если Лев(Строка(ПолеВыбора.Поле), 13) = "СистемныеПоля" Или Лев(Строка(ПолеВыбора.Поле), 12) = "SystemFields" Тогда Продолжить; КонецЕсли;
		Если Лев(Строка(ПолеВыбора.Поле), 15) = "ПараметрыДанных" Или Лев(Строка(ПолеВыбора.Поле), 14) = "DataParameters" Тогда Продолжить; КонецЕсли;
		
		ВыбранныеПоляДетальнаяГруппировка = ДетальнаяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоляДетальнаяГруппировка.Поле  = Новый ПолеКомпоновкиДанных(ПолеВыбора.Поле);
	КонецЦикла;
	
	Настройки.ПараметрыДанных.Элементы.Очистить();
	
	// Установка обязательных параметров запроса.
	Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ПериодНачало");
	Параметр.Значение = ПериодНачало;
	Параметр.Использование = Истина;
	
	Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ПериодОкончание");
	Параметр.Значение = ПериодОкончание;
	Параметр.Использование = Истина;
	
	// Установка переданных параметров запроса.
	Если ТипЗнч(СтруктураДанныхЗапроса.Параметры) = Тип("Структура") Тогда
		Для Каждого ПараметрКлючЗначение Из СтруктураДанныхЗапроса.Параметры Цикл
			Параметр = Настройки.ПараметрыДанных.Элементы.Добавить();
			Параметр.Параметр = Новый ПараметрКомпоновкиДанных(ПараметрКлючЗначение.Ключ);
			Параметр.Значение = ПараметрКлючЗначение.Значение;
			Параметр.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Настройки.Отбор.Элементы.Очистить();
	
	// Установка переданных отборов.
	Если ТипЗнч(СтруктураДанныхЗапроса.Отборы) = Тип("Соответствие") Тогда
		СоздатьОтборПоОписанию(Настройки.Отбор.Элементы, СтруктураДанныхЗапроса.Отборы, КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора);
	КонецЕсли;
	                                                                                                                                                                         
	//УстановитьЗначениеВОтборе(Настройки.Отбор, "СобытиеНаВесьДень", ВидСравненияКомпоновкиДанных.Равно, Ложь, Истина, КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора); //++ VOG Иванов С.А. 14.10.2019 bugs: 724  
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКДДанныеКалендаря, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	РезультатТаблица = Новый ТаблицаЗначений();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатТаблица);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
	Если РезультатТаблица.Колонки.Найти("СобытиеНаВесьДень") = Неопределено Тогда
		РезультатТаблица.Колонки.Добавить("СобытиеНаВесьДень", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	РезультатТаблица.Сортировать("ПериодНачало ВОЗР, Событие ВОЗР"); // Сортировка важна для отрисовки !
	
	Возврат РезультатТаблица;
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруРасшифровкиЯчейкиБланк()
	Возврат ТаблицаРасшифровок.Добавить();
КонецФункции

&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)
	Возврат Обработки.CRM_Календарь.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКалендарныйГрафик(	ДатаИлиМассивДат,
									ПроизводственныйКалендарь = Неопределено,
									Пользователь = Неопределено,
									Помещение = Неопределено)
	//
	
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСоответствиеКалендарныхГрафиков(ДатаИлиМассивДат, ПроизводственныйКалендарь, Пользователь);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДополнительногоОписанияИндексаВремени(СтруктураОписаниеКалендарногоДня, ВремяИндексаНачало, ВремяИндексаКонец)
	Если СтруктураОписаниеКалендарногоДня = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураОписаниеИндекса = Неопределено;
	
	бИндексРабочий = Неопределено;
	бИндексНеРабочий = Неопределено;
	
	бРабочийДеньПоПроизводственномуКалендарю = Неопределено;
	бРабочийДеньДляРесурса = Неопределено;
	Если СтруктураОписаниеКалендарногоДня.ДеньРабочийДляРесурса <> Неопределено Тогда
		Если СтруктураОписаниеКалендарногоДня.ДеньРабочийДляРесурса = Истина Тогда
			бРабочийДеньДляРесурса = Истина;
		Иначе
			бРабочийДеньДляРесурса = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОписаниеКалендарногоДня.ДеньРабочийПоПроизводственномуКалендарю <> Неопределено Тогда
		Если СтруктураОписаниеКалендарногоДня.ДеньРабочийПоПроизводственномуКалендарю = Истина Тогда
			бРабочийДеньПоПроизводственномуКалендарю = Истина;
		Иначе
			бРабочийДеньПоПроизводственномуКалендарю = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если бРабочийДеньДляРесурса = Истина Тогда
		Если СтруктураОписаниеКалендарногоДня.МассивПериодов = Неопределено Или СтруктураОписаниеКалендарногоДня.МассивПериодов.Количество() = 0 Тогда
			// отклонений нет
		Иначе
			// TODO:
		КонецЕсли;
		
	ИначеЕсли бРабочийДеньДляРесурса = Ложь Тогда
		бИндексНеРабочий = Истина;
		
	ИначеЕсли бРабочийДеньПоПроизводственномуКалендарю = Истина Тогда
		// отклонений нет
		
	ИначеЕсли бРабочийДеньПоПроизводственномуКалендарю = Ложь Тогда
		бИндексНеРабочий = Истина;
		
	КонецЕсли;
	
	Если бИндексНеРабочий <> Неопределено Тогда
		СтруктураОписаниеИндекса = Новый Структура("ИндексНеРабочий,ИндексРабочий", бИндексНеРабочий, бИндексРабочий);
	КонецЕсли;
	
	Возврат СтруктураОписаниеИндекса;
КонецФункции

&НаСервере
Функция ПолучитьТаблицуВыбранныхРесурсов()
	Если ПризнакВыбиратьПомещения Тогда
		Возврат РеквизитФормыВЗначение("ТаблицаВыбранныеПомещения");
	Иначе
		Возврат РеквизитФормыВЗначение("ТаблицаВыбранныеПользователи");
	КонецЕсли;
КонецФункции

&НаСервере
Процедура СвернутьТаблицуДанныхПоПериодуПоРесурсам(ТаблицаДанные, СтруктураОтбораПоРесурсу = Неопределено, бСворачиватьПоРесурсам = Неопределено)
	бСоздаватьИдентификаторСобытия = Ложь;
	Если ТаблицаДанные.Колонки.Найти("ИдентификаторСобытия") = Неопределено Тогда
		ТаблицаДанные.Колонки.Добавить("ИдентификаторСобытия", Новый ОписаниеТипов("Строка"));
		бСоздаватьИдентификаторСобытия = Истина;
	КонецЕсли;
	
	бИспользуютсяВыбранныеРесурсы = Истина;
	
	Если ТаблицаДанные.Колонки.Найти("МассивПользователей") = Неопределено Тогда
		ТаблицаДанные.Колонки.Добавить("МассивПользователей");
	КонецЕсли;
	Если ТаблицаДанные.Колонки.Найти("МассивПомещений") = Неопределено Тогда
		ТаблицаДанные.Колонки.Добавить("МассивПомещений");
	КонецЕсли;
	
	Если СтруктураОтбораПоРесурсу = Неопределено Тогда
		РесурсИмя = Неопределено;
	Иначе
		Для Каждого СтруктураОтбораПоРесурсуКлючЗначение Из СтруктураОтбораПоРесурсу Цикл
			РесурсИмя = СтруктураОтбораПоРесурсуКлючЗначение.Ключ;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Если бИспользуютсяВыбранныеРесурсы И РесурсИмя = "Пользователь" Тогда
		СоответствиеОбработанныеСтроки = Новый Соответствие();
		Для Каждого СтрокаСобытие Из ТаблицаДанные Цикл;
			Если СоответствиеОбработанныеСтроки[СтрокаСобытие] <> Неопределено Тогда Продолжить; КонецЕсли;
			
			НайденныеСтроки = ТаблицаДанные.НайтиСтроки(Новый Структура("Событие", СтрокаСобытие.Событие));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.МассивПользователей = Новый Массив();
				НайденнаяСтрока.МассивПомещений = Новый Массив();
				
				Для номер = 0 По НайденныеСтроки.ВГраница() Цикл
					ТекущаяСтрока = НайденныеСтроки[номер];
					
					Если НайденнаяСтрока.МассивПользователей.Найти(ТекущаяСтрока.Пользователь) = Неопределено Тогда
						НайденнаяСтрока.МассивПользователей.Добавить(ТекущаяСтрока.Пользователь);
					КонецЕсли;
					Если НайденнаяСтрока.МассивПомещений.Найти(ТекущаяСтрока.Помещение) = Неопределено Тогда
						НайденнаяСтрока.МассивПомещений.Добавить(ТекущаяСтрока.Помещение);
					КонецЕсли;
				КонецЦикла;
				
				Если бСоздаватьИдентификаторСобытия Тогда
					НайденнаяСтрока.ИдентификаторСобытия = Строка(Новый УникальныйИдентификатор());
				КонецЕсли;
				
				СоответствиеОбработанныеСтроки.Вставить(НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		нИндекс = 0;
		Пока нИндекс < ТаблицаДанные.Количество() Цикл
			СтрокаСобытие = ТаблицаДанные[нИндекс];
			СтрокаСобытие.МассивПользователей = Новый Массив();
			СтрокаСобытие.МассивПомещений = Новый Массив();
			
			НайденныеСтроки = ТаблицаДанные.НайтиСтроки(Новый Структура("Событие", СтрокаСобытие.Событие));
			Для номер = 0 По НайденныеСтроки.ВГраница() Цикл
				НайденнаяСтрока = НайденныеСтроки[номер];
				
				Если СтрокаСобытие.МассивПользователей.Найти(НайденнаяСтрока.Пользователь) = Неопределено Тогда
					СтрокаСобытие.МассивПользователей.Добавить(НайденнаяСтрока.Пользователь);
				КонецЕсли;
				Если СтрокаСобытие.МассивПомещений.Найти(НайденнаяСтрока.Помещение) = Неопределено Тогда
					СтрокаСобытие.МассивПомещений.Добавить(НайденнаяСтрока.Помещение);
				КонецЕсли;
				
				Если бСоздаватьИдентификаторСобытия Тогда
					СтрокаСобытие.ИдентификаторСобытия = Строка(Новый УникальныйИдентификатор());
				КонецЕсли;
				
				Если НайденнаяСтрока = СтрокаСобытие Тогда
					нИндекс = нИндекс + 1;
				Иначе
					Индекс = ТаблицаДанные.Индекс(НайденнаяСтрока);
					НайденныеСтроки[номер] = Неопределено;
					ТаблицаДанные.Удалить(Индекс);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция РасположитьКартинкуВНачалеОбласти(ТабДокумент, Область, Картинка)
	Если ТипЗнч(Картинка) <> Тип("Картинка") Или Картинка.Вид = ВидКартинки.Пустая Тогда
		Возврат Ложь;
	Иначе
		Пиктограмма = ТабДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Пиктограмма.Расположить(Область);
		Пиктограмма.Ширина = 3.6;
		Пиктограмма.Высота = 3.6;
		Пиктограмма.Верх = Пиктограмма.Верх + 0.15;
		Пиктограмма.Лево = Пиктограмма.Лево + 0.1;
		Пиктограмма.Картинка = Картинка;
		Пиктограмма.ГраницаСверху = Ложь;
		Пиктограмма.ГраницаСнизу = Ложь;
		Пиктограмма.ГраницаСправа = Ложь;
		Пиктограмма.ГраницаСлева = Ложь;
		Пиктограмма.Узор = ТипУзораТабличногоДокумента.БезУзора;
		Пиктограмма.ЦветФона = Новый Цвет();
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбъектИмеетСвойство(ПроверяемыйОбъект, ПроверяемойСвойство)
	Попытка
		ТестоваяПеременная = ПроверяемыйОбъект[ПроверяемойСвойство];
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеСобытия(Событие, ОписаниеСобытия, НастройкиОтображения, ВысотаОбластиСобытия = 1)
	СписокПредставлениеСобытияВКалендаре = НастройкиОтображения.СписокПредставлениеСобытияВКалендаре;
	
	ПредставлениеПериод = Формат(ОписаниеСобытия.ПериодНачало, "ДФ=ЧЧ:мм") + " - " + Формат(ОписаниеСобытия.ПериодОкончание, "ДФ=ЧЧ:мм");
	
	бЗаголовок = Истина;
	СтрТекущая = "";
	СтрЗаголовок = "";
	СтрОбластьСобытия = "";
	бСкобка = Истина;
	Для Каждого СтрСписка Из СписокПредставлениеСобытияВКалендаре Цикл
		Если Не СтрСписка.Пометка Тогда Продолжить; КонецЕсли;
		Если СтрСписка.Значение = "Время" И ОбъектИмеетСвойство(ОписаниеСобытия, "СобытиеНаВесьДень") И ОписаниеСобытия.СобытиеНаВесьДень Тогда
			Продолжить;
		КонецЕсли;
		
		СтрТекущая = ?(бЗаголовок, СтрЗаголовок, СтрОбластьСобытия);
		
		Если СтрСписка.Значение = "Время" Тогда
			Если Не ПустаяСтрока(ПредставлениеПериод) Тогда
				Если Не бСкобка Тогда
					СтрТекущая = СтрТекущая + ") ";
					бСкобка = Истина;
				ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
					СтрТекущая = СтрТекущая + " ";
				КонецЕсли;
				СтрТекущая = СтрТекущая + ПредставлениеПериод;
			КонецЕсли;
		ИначеЕсли СтрСписка.Значение = "Тема" Тогда
			Если Не ПустаяСтрока(ОписаниеСобытия.Тема) Тогда
				Если Не ПустаяСтрока(СтрТекущая) Тогда
					Если Не бСкобка Тогда
						СтрТекущая = СтрТекущая + ") ";
						бСкобка = Истина;
					ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
						СтрТекущая = СтрТекущая + " ";
					КонецЕсли;
				КонецЕсли;
				СтрТекущая = СтрТекущая + ОписаниеСобытия.Тема;
			КонецЕсли;
		Иначе
			Попытка
				Попытка
					Если СтрСписка.Значение = "Пользователь" Тогда
						МассивДобавитьКОписанию = ОписаниеСобытия.МассивПользователей;
					ИначеЕсли СтрСписка.Значение = "Помещение" Тогда
						МассивДобавитьКОписанию = ОписаниеСобытия.МассивПомещений;
					Иначе
						МассивДобавитьКОписанию = Новый Массив();
						МассивДобавитьКОписанию.Добавить(ОписаниеСобытия[СтрСписка.Значение]);
					КонецЕсли;
				Исключение
					МассивДобавитьКОписанию = Новый Массив();
					МассивДобавитьКОписанию.Добавить(ОписаниеСобытия[СтрСписка.Значение]);
				КонецПопытки;
				Для Каждого СтрДобавитьКОписанию Из МассивДобавитьКОписанию Цикл
					СтрДобавить = Строка(СтрДобавитьКОписанию);
					Если Не ПустаяСтрока(СтрДобавить) Тогда
						Если бСкобка Тогда
							Если Не ПустаяСтрока(СтрТекущая) Тогда СтрТекущая = СтрТекущая + " "; КонецЕсли;
							СтрТекущая = СтрТекущая + "(";
							бСкобка = Ложь;
						ИначеЕсли Не ПустаяСтрока(СтрТекущая) Тогда
							СтрТекущая = СтрТекущая + ", ";
						КонецЕсли;
						СтрТекущая = СтрТекущая + СтрДобавить;
					КонецЕсли;
				КонецЦикла;
			Исключение КонецПопытки;
		КонецЕсли;
		
		Если бЗаголовок Тогда
			СтрЗаголовок = СтрТекущая;
		Иначе
			СтрОбластьСобытия = СтрТекущая;
		КонецЕсли;
		
		Если бЗаголовок И ВысотаОбластиСобытия > 1 Тогда
			Если Не бСкобка Тогда СтрЗаголовок = СтрЗаголовок + ")"; КонецЕсли;
			бЗаголовок = Ложь;
			бСкобка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не бСкобка И Не ПустаяСтрока(СтрТекущая) Тогда
		СтрТекущая = СтрТекущая + ")";
		Если бЗаголовок Тогда
			СтрЗаголовок = СтрТекущая;
		Иначе
			СтрОбластьСобытия = СтрТекущая;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаголовок) Тогда
		Возврат СтрОбластьСобытия;
	ИначеЕсли ПустаяСтрока(СтрОбластьСобытия) Тогда
		Возврат СтрЗаголовок;
	Иначе
		Возврат СтрЗаголовок + Символы.ПС + СтрОбластьСобытия;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьМассивВыбранныхДат()
	Массив = Новый Массив();
	
	ТекДата = НачалоДня(ПериодНачало);
	Пока ТекДата <= НачалоДня(ПериодОкончание) Цикл
		Массив.Добавить(ТекДата);
		ТекДата = ТекДата + 24 * 60 * 60;
	КонецЦикла;
	
	Возврат Массив;
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДанныхДляФормирования()
	СтруктураДанных = Новый Структура();
	
	СтруктураДанных.Вставить("МассивВыбранныхДат", ПолучитьМассивВыбранныхДат());
	СтруктураДанных.Вставить("ТекущаяДата", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	
	МинимальнаяДата = НачалоДня(СтруктураДанных.МассивВыбранныхДат[0]);
	МаксимальнаяДата = НачалоДня(СтруктураДанных.МассивВыбранныхДат[СтруктураДанных.МассивВыбранныхДат.ВГраница()]);
	
	СтруктураДанных.Вставить("МинимальнаяДата", МинимальнаяДата);
	СтруктураДанных.Вставить("МаксимальнаяДата", МаксимальнаяДата);
	
	#Если ВебКлиент Тогда
	СтруктураДанных.Вставить("ВебКлиент");
	#КонецЕсли
	
	Возврат СтруктураДанных;
КонецФункции

&НаСервере
Процедура СформироватьРасписаниеНаСервере(СтруктураДанныхКлиент);
	ОчиститьКалендарьТабличныйДокумент();
	
	бВебКлиент = СтруктураДанныхКлиент.Свойство("ВебКлиент");
	
	МинимальнаяДата = СтруктураДанныхКлиент.МинимальнаяДата;
	МаксимальнаяДата = СтруктураДанныхКлиент.МаксимальнаяДата;
	
	Если СтруктураДанныхКлиент.Свойство("ТекущаяДата") И ЗначениеЗаполнено(СтруктураДанныхКлиент.ТекущаяДата) Тогда
		ТекущаяДатаВремя = СтруктураДанныхКлиент.ТекущаяДата;
	Иначе
		ТекущаяДатаВремя = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПустаяДата = Дата("00010101");
	
	ТекущееВремя = ПустаяДата + (ТекущаяДатаВремя - НачалоДня(ТекущаяДатаВремя));
	
	НастройкиОтображения = ПолучитьНастройкиОтображения();
	НастройкиОбщие = ПолучитьНастройкиОбщие();
	
	МакетОформление = ПолучитьМакетНаСервере("КалендарьОформление");
	МакетЯчейки = ПолучитьМакетНаСервере("КалендарьЯчейки");
	
	ЦветФонаВыбранныйПериодПользователя = Новый Цвет(255, 255, 200);
	
	КоличествоСекундВДне = 24 * 60 * 60;
	
	бИспользоватьКалендарныеГрафики = (НастройкиОбщие.КалендарьИспользоватьКалендарныеГрафики = Истина);
	КалендарныйГрафик = Неопределено;
	Если бИспользоватьКалендарныеГрафики Тогда
		КалендарныйГрафик = ПолучитьКалендарныйГрафик(СтруктураДанныхКлиент.МассивВыбранныхДат);
		Если КалендарныйГрафик = Неопределено Тогда
			бИспользоватьКалендарныеГрафики = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ШиринаОбластиРесурсовВЯчейках = 10;
	ВысотаОбластиРесурсовВЯчейках = НастройкиОтображения.РасписаниеВысотаОбластиРесурса;
	
	ЛинияСобытие = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЛинияГраница = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	ЛинияГраницаЖирная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияНетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	ЛинияПериодДокумента = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	
	ТаблицаРесурсов = ПолучитьТаблицуВыбранныхРесурсов();
	
	ИндексЧасНачало = НастройкиОтображения.НачалоДняКалендаряЧас;
	ИндексЧасОкончание =  НастройкиОтображения.КонецДняКалендаряЧас;
	ИндексЧасНачалоРабочегоВремени = НастройкиОтображения.НачалоРабочегоДняЧас;
	ИндексЧасКонецРабочегоВремени = НастройкиОтображения.КонецРабочегоДняЧас;
	
	ИнтервалШкалыВремени = НастройкиОтображения.РасписаниеИнтервалШкалыВремени;
	ИнтервалШкалыВремениВСекундах = ИнтервалШкалыВремени * 60;
	КоличествоИнтерваловШкалыВремениВЧасе = Цел(60 / ИнтервалШкалыВремени);
	КоличествоИнтерваловШкалыВремениВДне = КоличествоИнтерваловШкалыВремениВЧасе * (ИндексЧасОкончание - ИндексЧасНачало + 1);
	КоличествоИнтерваловШкалыВремениВПериоде = ((НачалоДня(МаксимальнаяДата) - НачалоДня(МинимальнаяДата)) / КоличествоСекундВДне + 1) * КоличествоИнтерваловШкалыВремениВДне;
	
	МинимальнаяДатаВремяНаШкале = НачалоДня(МинимальнаяДата) + ИндексЧасНачало * 60 * 60;
	МаксимальнаяДатаВремяНаШкале = НачалоДня(МаксимальнаяДата) + ИндексЧасОкончание * 60 * 60 + ИнтервалШкалыВремениВСекундах * (КоличествоИнтерваловШкалыВремениВЧасе - 1);
	
	ДанныеЗаПериод = ПолучитьДанныеСобытийЗаПериодПоДням(СтруктураДанныхКлиент, НастройкиОтображения,, МинимальнаяДатаВремяНаШкале, МаксимальнаяДатаВремяНаШкале);
	
	КоличествоДнейВИнтервале = (НачалоДня(МаксимальнаяДата) - НачалоДня(МинимальнаяДата)) / КоличествоСекундВДне + 1;
	
	КоличестоЯчеекВИнтервале = 2;
	
	ВысотаШкалыВремени = 2;
	НомерСтрокиИндикатора = 4;
	
	ВремяНачалоШкалыВремени = ПустаяДата + ИндексЧасНачало * 60 * 60;
	ВремяОкончаниеШкалыВремени = ПустаяДата + ИндексЧасОкончание * 60 * 60 + КоличествоИнтерваловШкалыВремениВЧасе * ИнтервалШкалыВремени * 60 - 1;
	
	СоответствиеИндексовВремени = Новый Соответствие();
	СоответствиеНомеровДней = Новый Соответствие();
	
	ТабДокументЯчейкаОбластиОтрисовки = МакетЯчейки.ПолучитьОбласть(1, 1, 1, КоличестоЯчеекВИнтервале);
	ОбластьОтрисовка = ТабДокументЯчейкаОбластиОтрисовки.Область(1, 1, ТабДокументЯчейкаОбластиОтрисовки.ВысотаТаблицы, ТабДокументЯчейкаОбластиОтрисовки.ШиринаТаблицы);
	ОбластьОтрисовка.Объединить();
	ОбластьОтрисовкаЛево = ТабДокументЯчейкаОбластиОтрисовки.Область(1, 1, 1, 1);
	ОбластьОтрисовкаПраво = ТабДокументЯчейкаОбластиОтрисовки.Область(1, КоличестоЯчеекВИнтервале, 1, КоличестоЯчеекВИнтервале);
	
	ТабДокументЧас = МакетОформление.ПолучитьОбласть("РасписаниеЧас|РасписаниеВертикальнаяСекцияЧас");
	ТабДокументИнтервал = МакетОформление.ПолучитьОбласть("РасписаниеЧас|РасписаниеВертикальнаяСекцияИнтервал");
	ОбластьЧас = ТабДокументЧас.Область(1, 1, ТабДокументЧас.ВысотаТаблицы, ТабДокументЧас.ШиринаТаблицы);
	ОбластьЧасПраваяЧасть = ТабДокументЧас.Область(1, КоличестоЯчеекВИнтервале, ТабДокументЧас.ВысотаТаблицы, ТабДокументЧас.ШиринаТаблицы);
	ОбластьЧасПраваяЧастьИндикатор = ТабДокументЧас.Область(НомерСтрокиИндикатора, 1, НомерСтрокиИндикатора, ТабДокументЧас.ШиринаТаблицы);
	ОбластьИнтервал = ТабДокументИнтервал.Область(1, 1, ТабДокументИнтервал.ВысотаТаблицы, ТабДокументИнтервал.ШиринаТаблицы);
	ОбластьИнтервалВерх = ТабДокументИнтервал.Область(1, 1, 1, ТабДокументИнтервал.ШиринаТаблицы);
	ОбластьИнтервалНиз = ТабДокументИнтервал.Область(2, 1, ТабДокументИнтервал.ВысотаТаблицы, ТабДокументИнтервал.ШиринаТаблицы);
	
	ТекущееВремяОкругленное = ПустаяДата + Цел((ТекущееВремя - ПустаяДата) / ИнтервалШкалыВремениВСекундах) * ИнтервалШкалыВремениВСекундах;
	
	// Построение шкалы времени и служебной области.
	ТабДокументШкалаВремениВсеДни = Новый ТабличныйДокумент();
	ТабДокументШкалаВремени = Новый ТабличныйДокумент();
	
	ТабДокументСлужебнаяОбластьСнизу = Новый ТабличныйДокумент();
	ТабДокументСлужебнаяОбластьИнтервал = МакетЯчейки.ПолучитьОбласть(1, 1, 1, КоличестоЯчеекВИнтервале);
	СлужебнаяОбластьИнтервал = ТабДокументСлужебнаяОбластьИнтервал.Область(1, 1, ТабДокументСлужебнаяОбластьИнтервал.ВысотаТаблицы, ТабДокументСлужебнаяОбластьИнтервал.ШиринаТаблицы);
	
	МаксимальныйИндексВремениНаШкале = Неопределено;
	ШиринаОбластиДняВЯчейках = Неопределено;
	
	бВыделятьПериодДокумента = (ПризнакПоказыватьПериодДокумента И ЗначениеЗаполнено(ПериодДокументаНачало) И ЗначениеЗаполнено(ПериодДокументаОкончание));
	НачалоОбластиВыделенияПериодаДокумента = Неопределено;
	КонецОбластиВыделенияПериодаДокумента = Неопределено;
	Если бВыделятьПериодДокумента Тогда
		// Вычисление округленных по градации шкалы времени значений начала и окончания события.
		
		ВремяДокументаНачалоВСекундах = ПериодДокументаНачало - НачалоДня(ПериодДокументаНачало);
		ВремяДокументаОкончаниеВСекундах = ПериодДокументаОкончание - НачалоДня(ПериодДокументаОкончание);
		
		ПериодДокументаНачалоОкругленный = НачалоДня(ПериодДокументаНачало) + Цел(ВремяДокументаНачалоВСекундах / ИнтервалШкалыВремениВСекундах) * ИнтервалШкалыВремениВСекундах;
		Если Цел(ВремяДокументаОкончаниеВСекундах / ИнтервалШкалыВремениВСекундах) = ВремяДокументаОкончаниеВСекундах / ИнтервалШкалыВремениВСекундах Тогда
			ПериодДокументаОкончаниеОкругленный = НачалоДня(ПериодДокументаОкончание) + Цел(ВремяДокументаОкончаниеВСекундах / ИнтервалШкалыВремениВСекундах) * ИнтервалШкалыВремениВСекундах;
		Иначе
			ПериодДокументаОкончаниеОкругленный = НачалоДня(ПериодДокументаОкончание) + Цел(ВремяДокументаОкончаниеВСекундах / ИнтервалШкалыВремениВСекундах) * ИнтервалШкалыВремениВСекундах + ИнтервалШкалыВремениВСекундах;
		КонецЕсли;
		
		Если ПериодДокументаНачалоОкругленный = ПериодДокументаОкончаниеОкругленный Тогда
			бВыделятьПериодДокумента = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийНомерДня = 0;
	
	ТекДата = НачалоДня(МинимальнаяДата);
	МассивДат = Новый Массив();
	Пока ТекДата <= НачалоДня(МаксимальнаяДата) Цикл
		МассивДат.Добавить(НачалоДня(ТекДата));
		
		ТабДокументШкалаВремениДень = Новый ТабличныйДокумент();
		СоответствиеНомеровДней.Вставить(НачалоДня(ТекДата), ТекущийНомерДня);
		
		ТекущийИндексВремени = 0;
		Для ИндексЧас = ИндексЧасНачало По ИндексЧасОкончание Цикл
			ВремяВИндексе = ПустаяДата + ИндексЧас * 60 * 60;
			ДатаВремяВИндексе = НачалоДня(ТекДата) + (ВремяВИндексе - ПустаяДата);
			бТекущееВремя = (НачалоДня(ТекДата) = НачалоДня(ТекущаяДатаВремя) И ТекущееВремяОкругленное = ВремяВИндексе);
			
			Если	(ИндексЧас < НастройкиОтображения.НачалоРабочегоДняЧас Или ИндексЧас > НастройкиОтображения.КонецРабочегоДняЧас)
				Или	(НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина И (ИндексЧас >= НастройкиОтображения.НачалоОбеденногоПерерываЧас И ИндексЧас < НастройкиОтображения.КонецОбеденногоПерерываЧас)) Тогда
				//
				ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяНеРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени);
			Иначе
				ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениРабочегоВремени);
			КонецЕсли;
			
			ОбластьЧас.ЦветФона = ТекущийЦветФона;
			
			Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
			Расшифровка.ТипЯчейки = "РасписаниеШкалаВремени";
			Расшифровка.Дата = ДатаВремяВИндексе;
			ОбластьЧас.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
			
			Если ИндексЧас = ИндексЧасОкончание И КоличествоИнтерваловШкалыВремениВЧасе = 1 Тогда
				ОбластьЧасПраваяЧасть.ГраницаСправа = ЛинияГраницаЖирная;
				ОбластьЧасПраваяЧастьИндикатор.ГраницаСправа = ЛинияГраницаЖирная;
			Иначе
				ОбластьЧасПраваяЧасть.ГраницаСправа = ЛинияНетЛинии;
				ОбластьЧасПраваяЧастьИндикатор.ГраницаСправа = ЛинияНетЛинии;
			КонецЕсли;
			
			ТабДокументЧас.Параметры.Час = Формат(ИндексЧас, "ЧН=0; ЧГ=");
			
			ТабДокументШкалаВремениДень.Присоединить(ТабДокументЧас);
			
			Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
			Расшифровка.ТипЯчейки = "СлужебнаяОбласть";
			Расшифровка.Дата = ДатаВремяВИндексе;
			СлужебнаяОбластьИнтервал.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
			СлужебнаяОбластьИнтервал.Текст = " ";
			ТабДокументСлужебнаяОбластьСнизу.Присоединить(ТабДокументСлужебнаяОбластьИнтервал);
			
			Если бВыделятьПериодДокумента Тогда
				Если ДатаВремяВИндексе = ПериодДокументаНачалоОкругленный Тогда
					НачалоОбластиВыделенияПериодаДокумента = Новый Структура("НомерДня,ИндексВремени", ТекущийНомерДня, ТекущийИндексВремени);
				КонецЕсли;
				Если ДатаВремяВИндексе = ПериодДокументаОкончаниеОкругленный Тогда
					КонецОбластиВыделенияПериодаДокумента = Новый Структура("НомерДня,ИндексВремени", ТекущийНомерДня, ТекущийИндексВремени - 1);
				КонецЕсли;
			КонецЕсли;
			
			СоответствиеИндексовВремени.Вставить(ВремяВИндексе, ТекущийИндексВремени);
			
			ТекущийИндексВремени = ТекущийИндексВремени + 1;
			
			Для ИндексИнтервал = 1 По КоличествоИнтерваловШкалыВремениВЧасе - 1 Цикл
				ВремяВИндексе = ПустаяДата + ИндексЧас * 60 * 60 + ИндексИнтервал * ИнтервалШкалыВремени * 60;
				ДатаВремяВИндексе = НачалоДня(ТекДата) + (ВремяВИндексе - ПустаяДата);
				бТекущееВремя = (НачалоДня(ТекДата) = НачалоДня(ТекущаяДатаВремя) И ТекущееВремяОкругленное = ВремяВИндексе);
				
				Если	(ИндексЧас < НастройкиОтображения.НачалоРабочегоДняЧас Или ИндексЧас > НастройкиОтображения.КонецРабочегоДняЧас)
					Или	(НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина И (ИндексЧас >= НастройкиОтображения.НачалоОбеденногоПерерываЧас И ИндексЧас < НастройкиОтображения.КонецОбеденногоПерерываЧас)) Тогда
					//
					ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяНеРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени);
				Иначе
					ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениРабочегоВремени);
				КонецЕсли;
				
				ОбластьИнтервал.ЦветФона = ТекущийЦветФона;
				
				Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
				Расшифровка.ТипЯчейки = "РасписаниеШкалаВремени";
				Расшифровка.Дата = ДатаВремяВИндексе;
				ОбластьИнтервал.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
				
				Если ИндексЧас = ИндексЧасОкончание И ИндексИнтервал = КоличествоИнтерваловШкалыВремениВЧасе - 1 Тогда
					ОбластьИнтервалВерх.ГраницаСправа = ЛинияГраницаЖирная;
					ОбластьИнтервалНиз.ГраницаСправа = ЛинияГраницаЖирная;
				Иначе
					ОбластьИнтервалВерх.ГраницаСправа = ЛинияНетЛинии;
					ОбластьИнтервалНиз.ГраницаСправа = ЛинияГраница;
				КонецЕсли;
				ТабДокументШкалаВремениДень.Присоединить(ТабДокументИнтервал);
				
				Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
				Расшифровка.ТипЯчейки = "СлужебнаяОбласть";
				Расшифровка.Дата = ДатаВремяВИндексе;
				СлужебнаяОбластьИнтервал.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
				СлужебнаяОбластьИнтервал.Текст = " ";
				ТабДокументСлужебнаяОбластьСнизу.Присоединить(ТабДокументСлужебнаяОбластьИнтервал);
				
				Если бВыделятьПериодДокумента Тогда
					Если ДатаВремяВИндексе = ПериодДокументаНачалоОкругленный Тогда
						НачалоОбластиВыделенияПериодаДокумента = Новый Структура("НомерДня,ИндексВремени", ТекущийНомерДня, ТекущийИндексВремени);
					КонецЕсли;
					Если ДатаВремяВИндексе = ПериодДокументаОкончаниеОкругленный Тогда
						КонецОбластиВыделенияПериодаДокумента = Новый Структура("НомерДня,ИндексВремени", ТекущийНомерДня, ТекущийИндексВремени - 1);
					КонецЕсли;
				КонецЕсли;
				
				СоответствиеИндексовВремени.Вставить(ВремяВИндексе, ТекущийИндексВремени);
				
				ТекущийИндексВремени = ТекущийИндексВремени + 1;
			КонецЦикла;
		КонецЦикла;
		
		Если МаксимальныйИндексВремениНаШкале = Неопределено Тогда МаксимальныйИндексВремениНаШкале = ТекущийИндексВремени - 1; КонецЕсли;
		Если ШиринаОбластиДняВЯчейках = Неопределено Тогда ШиринаОбластиДняВЯчейках = ТабДокументШкалаВремениДень.ШиринаТаблицы; КонецЕсли;
		
		ОбластьЛинияСнизу = ТабДокументШкалаВремениДень.Область(ВысотаШкалыВремени + 1, 1, ВысотаШкалыВремени + 1, ТабДокументШкалаВремениДень.ШиринаТаблицы);
		ОбластьЛинияСнизу.Объединить();
		ОбластьЛинияСнизу.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраницаЖирная, ЛинияГраница);
		Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		Расшифровка.ТипЯчейки = "РасписаниеЗаголовокДня";
		ОбластьЛинияСнизу.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
		
		Если бИспользоватьКалендарныеГрафики Тогда // Цвет заголовка дня в зависимости от календарного графика.
			СтруктураОписаниеКалендарногоДня = КалендарныйГрафик[НачалоДня(ТекДата)];
			Если СтруктураОписаниеКалендарногоДня = Неопределено Или СтруктураОписаниеКалендарногоДня.ДеньРабочийПоПроизводственномуКалендарю = Истина Тогда
				// цвет остается по умолчанию
			Иначе
				ОбластьЛинияСнизу.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовкаНерабочегоДня;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьЛинияСнизу.Текст = Формат(ТекДата, "ДФ='дд ММММ гггг'") + НСтр("ru = 'г'");
		
		ТабДокументШкалаВремениВсеДни.Присоединить(ТабДокументШкалаВремениДень);
		
		ТекДата = ТекДата + КоличествоСекундВДне;
		ТекущийНомерДня = ТекущийНомерДня + 1;
	КонецЦикла;
	
	Если НачалоОбластиВыделенияПериодаДокумента <> Неопределено И КонецОбластиВыделенияПериодаДокумента <> Неопределено Тогда
		ИндексОбластиНачало = НачалоОбластиВыделенияПериодаДокумента.НомерДня * (МаксимальныйИндексВремениНаШкале + 1) + НачалоОбластиВыделенияПериодаДокумента.ИндексВремени;
		ИндексОбластиКонец = КонецОбластиВыделенияПериодаДокумента.НомерДня * (МаксимальныйИндексВремениНаШкале + 1) + КонецОбластиВыделенияПериодаДокумента.ИндексВремени;
		
		ШиринаИнтервалаВЯчейках = ТабДокументЧас.ШиринаТаблицы;
		ВысотаИнтервалаВЯчейках = 2;
		
		ИндексОбластиНачало = ИндексОбластиНачало * ШиринаИнтервалаВЯчейках + 1;
		ИндексОбластиКонец = ИндексОбластиКонец * ШиринаИнтервалаВЯчейках + ШиринаИнтервалаВЯчейках;
		
		Если ИндексОбластиНачало <= ИндексОбластиКонец Тогда
			Область = ТабДокументШкалаВремениВсеДни.Область(1, ИндексОбластиНачало, ВысотаИнтервалаВЯчейках, ИндексОбластиКонец);
			Область.ЦветРамки = Новый Цвет(255, 0, 0);
			Область.Обвести(ЛинияПериодДокумента, ЛинияПериодДокумента, ЛинияПериодДокумента, ЛинияПериодДокумента);
		КонецЕсли;
	КонецЕсли;
	
	МаксимальныйНомерДня = ТекущийНомерДня - 1;
	
	ТабДокументСвободнаяОбластьСлева = МакетЯчейки.ПолучитьОбласть(1, 1, ТабДокументШкалаВремениДень.ВысотаТаблицы, ШиринаОбластиРесурсовВЯчейках);
	Область = ТабДокументСвободнаяОбластьСлева.Область(1, 1, ТабДокументСвободнаяОбластьСлева.ВысотаТаблицы, ТабДокументСвободнаяОбластьСлева.ШиринаТаблицы);
	Область.Объединить();
	Область.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияГраница);
	Область.ЦветФона = НастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени;
	Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
	Расшифровка.ТипЯчейки = "РасписаниеСвободнаяОбластьПередШкалойВремени";
	Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
	
	ТабДокументШкалаВремени.Присоединить(ТабДокументСвободнаяОбластьСлева);
	ТабДокументШкалаВремени.Присоединить(ТабДокументШкалаВремениВсеДни);
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
	ТаблицаЗанятыеИндексыПоРесурсуБланк = Новый ТаблицаЗначений();
	Для нИндекс = 0 По КоличествоИнтерваловШкалыВремениВПериоде - 1 Цикл
		ТаблицаЗанятыеИндексыПоРесурсуБланк.Колонки.Добавить("ИндексИнтервала" + Формат(нИндекс, "ЧН=0; ЧГ="), ОписаниеТиповЧисло);
	КонецЦикла;
	Для нИндекс = 1 По ДанныеЗаПериод.Количество() Цикл
		ТаблицаЗанятыеИндексыПоРесурсуБланк.Добавить();
	КонецЦикла;
	
	МассивИндикаторЗанятостиВремени = Новый Массив(КоличествоИнтерваловШкалыВремениВПериоде);
	СоответствиеОписанияСобытий = Новый Соответствие();
	
	ТаблицаОбластиВыводаСобытий = Новый ТаблицаЗначений();
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("Событие");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("ОписаниеСобытия");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("НачалоОбластиСтрока");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("НачалоОбластиКолонка");
	ТаблицаОбластиВыводаСобытий.Колонки.Добавить("КонецОбластиКолонка");
	
	ТабДокументСобытия = Новый ТабличныйДокумент();
	Для Каждого Ресурс Из ТаблицаРесурсов Цикл
		Если Ресурс.Имя = "Пользователь" И ЗначениеЗаполнено(Ресурс.Значение) Тогда
			ТекущийПользователь = Ресурс.Значение;
		Иначе
			ТекущийПользователь = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
			НайденныеСтроки = ТаблицаВыбранныеПользователиСПериодами.НайтиСтроки(Новый Структура("Значение", ТекущийПользователь));
			Если НайденныеСтроки.Количество() = 0 Тогда
				МассивВыбранныеПериодыПользователя = Неопределено;
			Иначе
				МассивВыбранныеПериодыПользователя = Новый Массив();
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					МассивВыбранныеПериодыПользователя.Добавить(Новый Структура("НачалоПериода,ОкончаниеПериода", НайденнаяСтрока.НачалоПериода, НайденнаяСтрока.ОкончаниеПериода));
				КонецЦикла;
			КонецЕсли;
		Иначе
			МассивВыбранныеПериодыПользователя = Неопределено;
		КонецЕсли;
		
		бИспользоватьКалендарныеГрафики = (НастройкиОбщие.КалендарьИспользоватьКалендарныеГрафики = Истина);
		КалендарныйГрафик = Неопределено;
		Если бИспользоватьКалендарныеГрафики Тогда
			Если Ресурс.Имя = "Пользователь" И ЗначениеЗаполнено(Ресурс.Значение) Тогда
				ПараметрКалендарногоГрафикаПользователь = Ресурс.Значение;
			Иначе
				ПараметрКалендарногоГрафикаПользователь = Неопределено;
			КонецЕсли;
			Если Ресурс.Имя = "Помещение" И ЗначениеЗаполнено(Ресурс.Значение) Тогда
				ПараметрКалендарногоГрафикаПомещение = Ресурс.Значение;
			Иначе
				ПараметрКалендарногоГрафикаПомещение = Неопределено;
			КонецЕсли;
			
			КалендарныйГрафик = ПолучитьКалендарныйГрафик(МассивДат,, ПараметрКалендарногоГрафикаПользователь, ПараметрКалендарногоГрафикаПомещение);
			Если КалендарныйГрафик = Неопределено Тогда
				бИспользоватьКалендарныеГрафики = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Построение строки фона отрисовки.
		ТабДокументСтрокаФонаОтрисовки = Новый ТабличныйДокумент();
		
		ТекДата = НачалоДня(МинимальнаяДата);
		Пока ТекДата <= НачалоДня(МаксимальнаяДата) Цикл
			СтруктураОписаниеКалендарногоДня = Неопределено;
			Если бИспользоватьКалендарныеГрафики Тогда
				СтруктураОписаниеКалендарногоДня = КалендарныйГрафик[НачалоДня(ТекДата)];
			КонецЕсли;
			
			ТабДокументСтрокаФонаОтрисовкиДень = Новый ТабличныйДокумент();
			
			ТекущийИндексВремени = 0;
			Для ИндексЧас = ИндексЧасНачало По ИндексЧасОкончание Цикл
				ВремяВИндексе = ПустаяДата + ИндексЧас * 60 * 60;
				ДатаВремяВИндексе = НачалоДня(ТекДата) + (ВремяВИндексе - ПустаяДата);
				бТекущееВремя = (НачалоДня(ТекДата) = НачалоДня(ТекущаяДатаВремя) И ТекущееВремяОкругленное = ВремяВИндексе);
				
				ДопСтруктураОписаниеИндекса = Неопределено;
				Если СтруктураОписаниеКалендарногоДня <> Неопределено Тогда
					ДопСтруктураОписаниеИндекса = ПолучитьСтруктуруДополнительногоОписанияИндексаВремени(СтруктураОписаниеКалендарногоДня, ВремяВИндексе, ВремяВИндексе + ИнтервалШкалыВремени * 60);
				КонецЕсли;
				
				Если	(ИндексЧас < НастройкиОтображения.НачалоРабочегоДняЧас Или ИндексЧас > НастройкиОтображения.КонецРабочегоДняЧас)
					Или	(НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина И (ИндексЧас >= НастройкиОтображения.НачалоОбеденногоПерерываЧас И ИндексЧас < НастройкиОтображения.КонецОбеденногоПерерываЧас))
					Или (ДопСтруктураОписаниеИндекса <> Неопределено И ДопСтруктураОписаниеИндекса.ИндексНеРабочий = Истина) Тогда
					//
					ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяНеРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени);
				Иначе
					ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениРабочегоВремени);
				КонецЕсли;
				
				Если МассивВыбранныеПериодыПользователя <> Неопределено Тогда
					Для Каждого ВыбранныйПериодПользователя Из МассивВыбранныеПериодыПользователя Цикл
						Если ДатаВремяВИндексе >= ВыбранныйПериодПользователя.НачалоПериода И ДатаВремяВИндексе < ВыбранныйПериодПользователя.ОкончаниеПериода Тогда
							ТекущийЦветФона = ЦветФонаВыбранныйПериодПользователя;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ОбластьОтрисовка.ЦветФона = ТекущийЦветФона;
				
				Если ИндексЧас = ИндексЧасОкончание И КоличествоИнтерваловШкалыВремениВЧасе = 1 Тогда
					ОбластьОтрисовка.ГраницаСправа = ЛинияГраницаЖирная;
				Иначе
					ОбластьОтрисовка.ГраницаСправа = ЛинияГраница;
				КонецЕсли;
				
				Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
				Расшифровка.ТипЯчейки = "РасписаниеСвободнаяОбласть";
				Расшифровка.Дата = ДатаВремяВИндексе;
				ОбластьОтрисовка.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
				ТабДокументСтрокаФонаОтрисовкиДень.Присоединить(ТабДокументЯчейкаОбластиОтрисовки);
				
				ТекущийИндексВремени = ТекущийИндексВремени + 1;
				
				Для ИндексИнтервал = 1 По КоличествоИнтерваловШкалыВремениВЧасе - 1 Цикл
					ВремяВИндексе = ПустаяДата + ИндексЧас * 60 * 60 + ИндексИнтервал * ИнтервалШкалыВремени * 60;
					ДатаВремяВИндексе = НачалоДня(ТекДата) + (ВремяВИндексе - ПустаяДата);
					бТекущееВремя = (НачалоДня(ТекДата) = НачалоДня(ТекущаяДатаВремя) И ТекущееВремяОкругленное = ВремяВИндексе);
					
					ДопСтруктураОписаниеИндекса = Неопределено;
					Если СтруктураОписаниеКалендарногоДня <> Неопределено Тогда
						ДопСтруктураОписаниеИндекса = ПолучитьСтруктуруДополнительногоОписанияИндексаВремени(СтруктураОписаниеКалендарногоДня, ВремяВИндексе, ВремяВИндексе + ИнтервалШкалыВремени * 60);
					КонецЕсли;
					
					Если	(ИндексЧас < НастройкиОтображения.НачалоРабочегоДняЧас Или ИндексЧас > НастройкиОтображения.КонецРабочегоДняЧас)
						Или	(НастройкиОтображения.ЕстьОбеденныйПерерыв = Истина И (ИндексЧас >= НастройкиОтображения.НачалоОбеденногоПерерываЧас И ИндексЧас < НастройкиОтображения.КонецОбеденногоПерерываЧас))
						Или (ДопСтруктураОписаниеИндекса <> Неопределено И ДопСтруктураОписаниеИндекса.ИндексНеРабочий = Истина) Тогда
						//
						ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяНеРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениНеРабочегоВремени);
					Иначе
						ТекущийЦветФона = ?(бТекущееВремя, НастройкиОтображения.КалендарьЦветФонаТекущееВремяРабочееВремя, НастройкиОтображения.КалендарьЦветШкалыВремениРабочегоВремени);
					КонецЕсли;
					
					Если МассивВыбранныеПериодыПользователя <> Неопределено Тогда
						Для Каждого ВыбранныйПериодПользователя Из МассивВыбранныеПериодыПользователя Цикл
							Если ДатаВремяВИндексе >= ВыбранныйПериодПользователя.НачалоПериода И ДатаВремяВИндексе < ВыбранныйПериодПользователя.ОкончаниеПериода Тогда
								ТекущийЦветФона = ЦветФонаВыбранныйПериодПользователя;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					ОбластьОтрисовка.ЦветФона = ТекущийЦветФона;
					
					Если ИндексЧас = ИндексЧасОкончание И ИндексИнтервал = КоличествоИнтерваловШкалыВремениВЧасе - 1 Тогда
						ОбластьОтрисовка.ГраницаСправа = ЛинияГраницаЖирная;
					Иначе
						ОбластьОтрисовка.ГраницаСправа = ЛинияГраница;
					КонецЕсли;
					
					Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
					Расшифровка.ТипЯчейки = "РасписаниеСвободнаяОбласть";
					Расшифровка.Дата = ДатаВремяВИндексе;
					ОбластьОтрисовка.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
					ТабДокументСтрокаФонаОтрисовкиДень.Присоединить(ТабДокументЯчейкаОбластиОтрисовки);
					
					ТекущийИндексВремени = ТекущийИндексВремени + 1;
				КонецЦикла;
			КонецЦикла;
			
			ТабДокументСтрокаФонаОтрисовки.Присоединить(ТабДокументСтрокаФонаОтрисовкиДень);
			
			ТекДата = ТекДата + КоличествоСекундВДне;
		КонецЦикла;
		
		ТаблицаЗанятыеГоризонтальныеИндексыПоРесурсу = ТаблицаЗанятыеИндексыПоРесурсуБланк.Скопировать();
		
		ТаблицаОбластиВыводаСобытий.Очистить();
		
		ДанныеЗаПериодПоРесурсу = ДанныеЗаПериод.Скопировать();
		
		СтруктураОтбораПоРесурсу = Новый Структура(Ресурс.Имя, Ресурс.Значение);
		СвернутьТаблицуДанныхПоПериодуПоРесурсам(ДанныеЗаПериодПоРесурсу, СтруктураОтбораПоРесурсу);
		
		СтрокиСобытия = ДанныеЗаПериодПоРесурсу.НайтиСтроки(СтруктураОтбораПоРесурсу);
		ТаблицаСобытия = ДанныеЗаПериодПоРесурсу.Скопировать(СтрокиСобытия);
		
		МаксимальныйГоризонтальныйИндексСобытия = 0;
		Для Каждого СтрокаСобытие Из ТаблицаСобытия Цикл
			ОписаниеСобытия = СоответствиеОписанияСобытий[СтрокаСобытие.ИдентификаторСобытия];
			Если ОписаниеСобытия = Неопределено Тогда
				ОписаниеСобытия = Обработки.CRM_Календарь.ПолучитьСтруктуруОписаниеСобытияБланк();
				ЗаполнитьЗначенияСвойств(ОписаниеСобытия, СтрокаСобытие);
				
				// Вычисление индексов начала и окончания события на шкале времени.
				НачалоСобытияВСекундах = ОписаниеСобытия.ПериодНачало - НачалоДня(ОписаниеСобытия.ПериодНачало);
				ОкончаниеСобытияВСекундах = ОписаниеСобытия.ПериодОкончание - НачалоДня(ОписаниеСобытия.ПериодОкончание);
				ВремяНачалоСобытия = ПустаяДата + НачалоСобытияВСекундах;
				ВремяОкончаниеСобытия = ПустаяДата + ОкончаниеСобытияВСекундах;
				
				Если Цел(НачалоСобытияВСекундах / ИнтервалШкалыВремениВСекундах) = НачалоСобытияВСекундах / ИнтервалШкалыВремениВСекундах Тогда
					Если ВремяНачалоСобытия <= ВремяНачалоШкалыВремени Тогда
						// Если событие начинается за началом видимой шкалы времени считаем что оно началось в самом начале дня.
						ПериодНачалоСобытияОкругленный = НачалоДня(ОписаниеСобытия.ПериодНачало);
					Иначе
						ПериодНачалоСобытияОкругленный = ОписаниеСобытия.ПериодНачало;
					КонецЕсли;
				Иначе
					Если ВремяНачалоСобытия <= ВремяНачалоШкалыВремени Тогда
						// Если событие начинается за началом видимой шкалы времени считаем что оно началось в самом начале дня.
						ПериодНачалоСобытияОкругленный = НачалоДня(ОписаниеСобытия.ПериодНачало);
					Иначе
						// Округляем время начала в МЕНЬШУЮ сторону по границе интервала шкалы времени.
						ПериодНачалоСобытияОкругленный = НачалоДня(ОписаниеСобытия.ПериодНачало) + Цел(НачалоСобытияВСекундах / ИнтервалШкалыВремениВСекундах) * ИнтервалШкалыВремениВСекундах;
					КонецЕсли;
				КонецЕсли;
				
				бУменьшитьИндексВремениОкончаниеСобытияНаЕдиницу = Истина;
				Если Цел(ОкончаниеСобытияВСекундах / ИнтервалШкалыВремениВСекундах) = ОкончаниеСобытияВСекундах / ИнтервалШкалыВремениВСекундах Тогда
					Если ВремяОкончаниеСобытия <= ВремяНачалоШкалыВремени Тогда
						// Если событие заканчивается за началом видимой шкалы времени считаем что оно закончилось в самом начале дня.
						ПериодОкончанияСобытияОкругленный = НачалоДня(ОписаниеСобытия.ПериодОкончание);
					Иначе
						ПериодОкончанияСобытияОкругленный = ОписаниеСобытия.ПериодОкончание;
					КонецЕсли;
				Иначе
					Если ВремяОкончаниеСобытия <= ВремяНачалоШкалыВремени Тогда
						// Если событие заканчивается за началом видимой шкалы времени считаем что оно закончилось в самом начале дня.
						ПериодОкончанияСобытияОкругленный = НачалоДня(ОписаниеСобытия.ПериодОкончание);
					Иначе
						// Округляем время окончания в БОЛЬШУЮ сторону по границе интервала шкалы времени.
						ПериодОкончанияСобытияОкругленный = НачалоДня(ОписаниеСобытия.ПериодОкончание) + Цел(ОкончаниеСобытияВСекундах / ИнтервалШкалыВремениВСекундах) * ИнтервалШкалыВремениВСекундах + ИнтервалШкалыВремениВСекундах;
					КонецЕсли;
					
					Если НачалоДня(ПериодОкончанияСобытияОкругленный) <> НачалоДня(ОписаниеСобытия.ПериодОкончание) Тогда
						// Если округление продлило событие до 00:00:00 следующего дня.
						ПериодОкончанияСобытияОкругленный = ПериодОкончанияСобытияОкругленный - ИнтервалШкалыВремениВСекундах;
						бУменьшитьИндексВремениОкончаниеСобытияНаЕдиницу = Ложь;
					КонецЕсли;
				КонецЕсли;
				ВремяНачалоСобытияОкругленное = ПустаяДата + (ПериодНачалоСобытияОкругленный - НачалоДня(ПериодНачалоСобытияОкругленный));
				ВремяОкончанияСобытияОкругленное = ПустаяДата + (ПериодОкончанияСобытияОкругленный - НачалоДня(ПериодОкончанияСобытияОкругленный));
				
				НомерДняВИнтервалеНачалоСобытия = СоответствиеНомеровДней[НачалоДня(ПериодНачалоСобытияОкругленный)];
				Если НомерДняВИнтервалеНачалоСобытия = Неопределено Тогда НомерДняВИнтервалеНачалоСобытия = 0; КонецЕсли;
				НомерДняВИнтервалеОкончаниеСобытия = СоответствиеНомеровДней[НачалоДня(ПериодОкончанияСобытияОкругленный)];
				Если НомерДняВИнтервалеОкончаниеСобытия = Неопределено Тогда НомерДняВИнтервалеОкончаниеСобытия = МаксимальныйНомерДня; КонецЕсли;
				
				Если ПериодНачалоСобытияОкругленный < МинимальнаяДатаВремяНаШкале Тогда
					ИндексВремениНачалоСобытия = 0;
				Иначе
					ИндексВремениНачалоСобытия = СоответствиеИндексовВремени[ВремяНачалоСобытияОкругленное];
				КонецЕсли;
				Если ПериодОкончанияСобытияОкругленный > МаксимальнаяДатаВремяНаШкале Тогда
					ИндексВремениОкончаниеСобытия = МаксимальныйИндексВремениНаШкале;
				Иначе
					ИндексВремениОкончаниеСобытия = СоответствиеИндексовВремени[ВремяОкончанияСобытияОкругленное];
					Если ИндексВремениОкончаниеСобытия <> Неопределено И бУменьшитьИндексВремениОкончаниеСобытияНаЕдиницу Тогда
						ИндексВремениОкончаниеСобытия = ИндексВремениОкончаниеСобытия - 1;
					КонецЕсли;
				КонецЕсли;
				
				Если ИндексВремениНачалоСобытия = Неопределено И ИндексВремениОкончаниеСобытия = Неопределено И НачалоДня(ПериодНачалоСобытияОкругленный) = НачалоДня(ПериодОкончанияСобытияОкругленный) Тогда
					// Событие полностью попадает на скрытую часть шкалы времени, игнорируем его.
					Продолжить;
				КонецЕсли;
				Если ИндексВремениНачалоСобытия = Неопределено Тогда
					Если ВремяНачалоСобытияОкругленное >= ВремяНачалоШкалыВремени Тогда
						// Событие начинается в конце дня за скрытой шкалой времени.
						НомерДняВИнтервалеНачалоСобытия = НомерДняВИнтервалеНачалоСобытия + 1;
						Если НомерДняВИнтервалеНачалоСобытия > МаксимальныйНомерДня Тогда
							// События не будет отображено, игнорируем его.
							Продолжить;
						КонецЕсли;
						ИндексВремениНачалоСобытия = 0;
					Иначе
						// Событие начинается в начале дня за скрытой шкалой времени.
						ИндексВремениНачалоСобытия = 0;
					КонецЕсли;
				КонецЕсли;
				Если ИндексВремениОкончаниеСобытия = Неопределено Тогда
					Если ВремяОкончанияСобытияОкругленное >= ВремяНачалоШкалыВремени Тогда
						// Событие заканчивается в конце дня за скрытой шкалой времени.
						ИндексВремениОкончаниеСобытия = МаксимальныйИндексВремениНаШкале;
					Иначе
						// Событие заканчивается в начале дня за скрытой шкалой времени.
						НомерДняВИнтервалеОкончаниеСобытия = НомерДняВИнтервалеОкончаниеСобытия - 1;
						Если НомерДняВИнтервалеОкончаниеСобытия < 0 Тогда
							// События не будет отображено, игнорируем его.
							Продолжить;
						КонецЕсли;
						ИндексВремениОкончаниеСобытия = МаксимальныйИндексВремениНаШкале;
					КонецЕсли;
				КонецЕсли;
				Если НомерДняВИнтервалеОкончаниеСобытия < НомерДняВИнтервалеНачалоСобытия Тогда
					НомерДняВИнтервалеОкончаниеСобытия = НомерДняВИнтервалеНачалоСобытия;
				КонецЕсли;
				
				ОписаниеСобытия.ИндексНачало = НомерДняВИнтервалеНачалоСобытия * КоличествоИнтерваловШкалыВремениВДне + ИндексВремениНачалоСобытия;
				ОписаниеСобытия.ИндексКонец = НомерДняВИнтервалеОкончаниеСобытия * КоличествоИнтерваловШкалыВремениВДне + ИндексВремениОкончаниеСобытия;
				Если ОписаниеСобытия.ИндексКонец < ОписаниеСобытия.ИндексНачало Тогда
					ОписаниеСобытия.ИндексКонец = ОписаниеСобытия.ИндексНачало;
				КонецЕсли;
				
				Обработки.CRM_Календарь.ЗаполнитьДополнительныеСвойстваСобытия(ОписаниеСобытия, НастройкиОтображения);
				
				СоответствиеОписанияСобытий.Вставить(СтрокаСобытие.ИдентификаторСобытия, ОписаниеСобытия);
			КонецЕсли;
			
			// Вычисление горизонтального индекса события для отрисовки.
			СтруктураПоискаГоризонтальногоИндекса = Новый Структура();
			Для нИндексСобытия = ОписаниеСобытия.ИндексНачало По ОписаниеСобытия.ИндексКонец Цикл
				СтруктураПоискаГоризонтальногоИндекса.Вставить("ИндексИнтервала" + Формат(нИндексСобытия, "ЧН=0; ЧГ="), 0);
			КонецЦикла;
			НайденныеСтроки = ТаблицаЗанятыеГоризонтальныеИндексыПоРесурсу.НайтиСтроки(СтруктураПоискаГоризонтальногоИндекса);
			ГоризонтальныйИндексСобытия = ТаблицаЗанятыеГоризонтальныеИндексыПоРесурсу.Индекс(НайденныеСтроки[0]);
			СтрокаЗанятыйГоризонтальныйИндекс = НайденныеСтроки[0];
			Для нИндексСобытия = ОписаниеСобытия.ИндексНачало По ОписаниеСобытия.ИндексКонец Цикл
				СтрокаЗанятыйГоризонтальныйИндекс["ИндексИнтервала" + Формат(нИндексСобытия, "ЧН=0; ЧГ=")] = 1;
				МассивИндикаторЗанятостиВремени[нИндексСобытия] = 1;
			КонецЦикла;
			МаксимальныйГоризонтальныйИндексСобытия = Макс(МаксимальныйГоризонтальныйИндексСобытия, ГоризонтальныйИндексСобытия);
			
			НоваяСтрока = ТаблицаОбластиВыводаСобытий.Добавить();
			НоваяСтрока.Событие					= СтрокаСобытие.Событие;
			НоваяСтрока.ОписаниеСобытия			= ОписаниеСобытия;
			НоваяСтрока.НачалоОбластиСтрока		= ГоризонтальныйИндексСобытия + 1;
			НоваяСтрока.НачалоОбластиКолонка	= (ОписаниеСобытия.ИндексНачало * КоличестоЯчеекВИнтервале) + 1;
			НоваяСтрока.КонецОбластиКолонка		= (ОписаниеСобытия.ИндексКонец * КоличестоЯчеекВИнтервале) + КоличестоЯчеекВИнтервале;
		КонецЦикла;
		
		// Оформление табличного документа по ресурсу с областями событий + одна строчка свободной области.
		ВысотаОбластиПоРесурсу = Макс(МаксимальныйГоризонтальныйИндексСобытия + 1, ВысотаОбластиРесурсовВЯчейках) + ?(МаксимальныйГоризонтальныйИндексСобытия = 0, 0, 1);
		
		ТабДокументСобытияПоРесурсу = Новый ТабличныйДокумент();
		Для номер = 1 По ВысотаОбластиПоРесурсу Цикл
			Если номер = ВысотаОбластиПоРесурсу Тогда
				ТабДокументСтрокаФонаОтрисовки.Область(1, 1, 1, ТабДокументСтрокаФонаОтрисовки.ШиринаТаблицы).ГраницаСнизу = ЛинияГраницаЖирная;
			КонецЕсли;
			ТабДокументСобытияПоРесурсу.Вывести(ТабДокументСтрокаФонаОтрисовки);
			
			КолонкаСлужебнаяОбластьСправа = ТабДокументСтрокаФонаОтрисовки.ШиринаТаблицы + 1;
			СлужебнаяОбластьСправа = ТабДокументСобытияПоРесурсу.Область(номер, КолонкаСлужебнаяОбластьСправа, номер, КолонкаСлужебнаяОбластьСправа);
			Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
			Расшифровка.ТипЯчейки = "СлужебнаяОбласть";
			Попытка Расшифровка[Ресурс.Имя + "Отбор"] = Ресурс.Значение;
			Исключение КонецПопытки;
			СлужебнаяОбластьСправа.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
			СлужебнаяОбластьСправа.Текст = " ";
		КонецЦикла;
		ТабДокументСтрокаФонаОтрисовки.Область(1, 1, 1, ТабДокументСтрокаФонаОтрисовки.ШиринаТаблицы).ГраницаСнизу = ЛинияНетЛинии;
		
		// Оформление и вывод областей событий.
		Для Каждого СтрокаОбласть Из ТаблицаОбластиВыводаСобытий Цикл
			ОбластьСобытие = ТабДокументСобытияПоРесурсу.Область(СтрокаОбласть.НачалоОбластиСтрока, СтрокаОбласть.НачалоОбластиКолонка, СтрокаОбласть.НачалоОбластиСтрока, СтрокаОбласть.КонецОбластиКолонка);
			ОбластьСобытие.Объединить();
			ОбластьСобытие.Обвести(	ЛинияСобытие,
									ЛинияСобытие,
									?(СтрокаОбласть.КонецОбластиКолонка = ШиринаОбластиДняВЯчейках Или СтрокаОбласть.КонецОбластиКолонка = ТабДокументСобытияПоРесурсу.ШиринаТаблицы - 1, ЛинияГраницаЖирная, ЛинияСобытие),
									ЛинияСобытие);
			//
			ОбластьСобытие.ЦветФона = СтрокаОбласть.ОписаниеСобытия.ЦветФона;
			ОбластьСобытие.ЦветТекста = СтрокаОбласть.ОписаниеСобытия.ЦветТекста;
			
			Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
			ЗаполнитьЗначенияСвойств(Расшифровка, СтрокаОбласть.ОписаниеСобытия);
			Расшифровка.ТипЯчейки = "Событие";
			Расшифровка.Пользователь = СтрокаОбласть.ОписаниеСобытия.Пользователь;
			Расшифровка.Помещение = СтрокаОбласть.ОписаниеСобытия.Помещение;
			Расшифровка.Дата = СтрокаОбласть.ОписаниеСобытия.ПериодНачало;
			Расшифровка.ИндексВремени = СтрокаОбласть.ОписаниеСобытия.ИндексНачало;
			Попытка Расшифровка[Ресурс.Имя + "Отбор"] = Ресурс.Значение;
			Исключение КонецПопытки;
			ОбластьСобытие.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
			Если НастройкиОтображения.КалендарьОтображатьПиктограммы Тогда
				ОбластьСобытие.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			Иначе
				ОбластьСобытие.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			КонецЕсли;
			ОбластьСобытие.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
			ОбластьСобытие.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			
			ОбластьСобытие.Шрифт = СтрокаОбласть.ОписаниеСобытия.Шрифт;
			
			СтрДобавитьКПараметру = "";
			Если НастройкиОтображения.КалендарьОтображатьПиктограммы И Не бВебКлиент Тогда
				Если РасположитьКартинкуВНачалеОбласти(ТабДокументСобытияПоРесурсу, ОбластьСобытие, СтрокаОбласть.ОписаниеСобытия.Пиктограмма) Тогда
					СтрДобавитьКПараметру = "     ";
				КонецЕсли;
			КонецЕсли;
			ОбластьСобытие.Текст = СтрДобавитьКПараметру + ПолучитьПредставлениеСобытия(СтрокаОбласть.ОписаниеСобытия.Событие, СтрокаОбласть.ОписаниеСобытия, НастройкиОтображения, 1);
		КонецЦикла;
		
		// Оформление области заголовка ресурса.
		ТабДокументСобытияПоРесурсуЗаголовок = МакетЯчейки.ПолучитьОбласть(1, 1, ВысотаОбластиПоРесурсу, ШиринаОбластиРесурсовВЯчейках);
		
		Область = ТабДокументСобытияПоРесурсуЗаголовок.Область(1, 1, ВысотаОбластиПоРесурсу, ШиринаОбластиРесурсовВЯчейках);
		Область.Объединить();
		Область.Обвести(ЛинияГраница, ЛинияГраница, ЛинияГраница, ЛинияГраницаЖирная);
		// TODO: если нужно отображать ресурсы разными цветами, это нужно сделать здесь.
		Область.ЦветФона = НастройкиОтображения.КалендарьЦветФонаЗаголовкаРесурс;
		Область.Шрифт = НастройкиОтображения.КалендарьШрифтЗаголовкаРесурс;
		Область.ЦветТекста = НастройкиОтображения.КалендарьЦветШрифтаЗаголовкаРесурс;
		Расшифровка = ПолучитьСтруктуруРасшифровкиЯчейкиБланк();
		Расшифровка.ТипЯчейки = "ЗаголовокРесурс";
		Если ТипЗнч(Ресурс.Значение) = Тип("СправочникСсылка.Пользователи") Тогда
			Расшифровка.Пользователь = Ресурс.Значение;
		ИначеЕсли ТипЗнч(Ресурс.Значение) = Тип("СправочникСсылка.CRM_Помещения") Тогда
			Расшифровка.Помещение = Ресурс.Значение;
		КонецЕсли;
		Попытка Расшифровка[Ресурс.Имя + "Отбор"] = Ресурс.Значение;
		Исключение КонецПопытки;
		Область.Расшифровка = ТаблицаРасшифровок.Индекс(Расшифровка);
		
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		
		Область.Текст = Ресурс.Описание;
		
		ТабДокументСобытияПоРесурсуСЗаголовком = Новый ТабличныйДокумент();
		ТабДокументСобытияПоРесурсуСЗаголовком.Присоединить(ТабДокументСобытияПоРесурсуЗаголовок);
		ТабДокументСобытияПоРесурсуСЗаголовком.Присоединить(ТабДокументСобытияПоРесурсу);
		
		ТабДокументСобытия.Вывести(ТабДокументСобытияПоРесурсуСЗаголовком);
		
	КонецЦикла;
	
	// Отрисовка индикатора занятого времени.
	Для нИндекс = 0 По МассивИндикаторЗанятостиВремени.ВГраница() Цикл
		Если МассивИндикаторЗанятостиВремени[нИндекс] <> Неопределено Тогда
			Область = ТабДокументШкалаВремени.Область(НомерСтрокиИндикатора, ШиринаОбластиРесурсовВЯчейках + нИндекс * КоличестоЯчеекВИнтервале + 1, НомерСтрокиИндикатора, ШиринаОбластиРесурсовВЯчейках + нИндекс * КоличестоЯчеекВИнтервале + КоличестоЯчеекВИнтервале);
			Область.ЦветФона = НастройкиОтображения.РасписаниеЦветИндикатора;
		КонецЕсли;
	КонецЦикла;
	
	ТабДокументСлужебнаяОбластьСнизуСЗаголовком = Новый ТабличныйДокумент();
	ТабДокументСлужебнаяОбластьСнизуСЗаголовком.Присоединить(МакетЯчейки.ПолучитьОбласть(1, 1, 1, ШиринаОбластиРесурсовВЯчейках));
	ТабДокументСлужебнаяОбластьСнизуСЗаголовком.Присоединить(ТабДокументСлужебнаяОбластьСнизу);
	
	КалендарьТабличныйДокумент.Вывести(ТабДокументШкалаВремени);
	КалендарьТабличныйДокумент.Вывести(ТабДокументСобытия);
	КалендарьТабличныйДокумент.Вывести(ТабДокументСлужебнаяОбластьСнизуСЗаголовком);
	
	КалендарьТабличныйДокумент.ФиксацияСверху = НомерСтрокиИндикатора;
	КалендарьТабличныйДокумент.ФиксацияСлева = ШиринаОбластиРесурсовВЯчейках;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКалендарь()
	СтруктураДанныхКлиент = ПолучитьСтруктуруДанныхДляФормирования();
	СформироватьРасписаниеНаСервере(СтруктураДанныхКлиент);
КонецПроцедуры

&НаКлиенте
Процедура КалендарьТабличныйДокументПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		МассивЗначений = ПараметрыПеретаскивания.Значение;
	Иначе
		МассивЗначений = Новый Массив();
		МассивЗначений.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	бБылиДобавленыЗначения = Ложь;
	Для Каждого ЗначениеПеретаскивания Из МассивЗначений Цикл
		Если ЗначениеЗаполнено(ЗначениеПеретаскивания) И (ТипЗнч(ЗначениеПеретаскивания) = Тип("СправочникСсылка.Пользователи") 
			Или ТипЗнч(ЗначениеПеретаскивания) = Тип("СправочникСсылка.ГруппыПользователей") 
			Или ТипЗнч(ЗначениеПеретаскивания) = Тип("СправочникСсылка.CRM_Помещения") 
			Или ТипЗнч(ЗначениеПеретаскивания) = Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
			ДобавитьПользователяИлиГруппуИлиПомещение(ПараметрыПеретаскивания.Значение);
			бБылиДобавленыЗначения = Истина;
		КонецЕсли;
		Если  (НЕ (ЗначениеЗаполнено(ЗначениеПеретаскивания))) 
			И (ТипЗнч(ЗначениеПеретаскивания) = Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
			ДобавитьПользователяИлиГруппуИлиПомещение(ПараметрыПеретаскивания.Значение);
			бБылиДобавленыЗначения = Истина;
		КонецЕсли;				
	КонецЦикла;
	
	Если бБылиДобавленыЗначения Тогда
		ОбновитьКалендарь();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПользователя(ПользовательСсылка)
	Если ТаблицаВыбранныеПользователи.НайтиСтроки(Новый Структура("Значение", ПользовательСсылка)).Количество() = 0 Тогда
		НоваяСтрока = ТаблицаВыбранныеПользователи.Добавить();
		НоваяСтрока.Имя = "Пользователь";
		НоваяСтрока.Значение = ПользовательСсылка;
		НоваяСтрока.Описание = Строка(НоваяСтрока.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПомещение(ПомещениеСсылка)
	Если ТаблицаВыбранныеПомещения.НайтиСтроки(Новый Структура("Значение", ПомещениеСсылка)).Количество() = 0 Тогда
		НоваяСтрока = ТаблицаВыбранныеПомещения.Добавить();
		НоваяСтрока.Имя = "Помещение";
		НоваяСтрока.Значение = ПомещениеСсылка;
		НоваяСтрока.Описание = Строка(НоваяСтрока.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
	Процедура ДобавитьПользователяИлиГруппуИлиПомещение(ПользовательГруппаПользователейИлиПомещениеИлиМассив)
	Если ТипЗнч(ПользовательГруппаПользователейИлиПомещениеИлиМассив) = Тип("Массив") Тогда
		МассивРесурсов = ПользовательГруппаПользователейИлиПомещениеИлиМассив;
	Иначе
		МассивРесурсов = Новый Массив();
		МассивРесурсов.Добавить(ПользовательГруппаПользователейИлиПомещениеИлиМассив);
	КонецЕсли;
	
	Для Каждого РесурсСсылка Из МассивРесурсов Цикл
		Если ТипЗнч(РесурсСсылка) = Тип("СправочникСсылка.Пользователи") Тогда
			ДобавитьПользователя(РесурсСсылка);
		ИначеЕсли ТипЗнч(РесурсСсылка) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			МассивПользователиГруппы = CRM_ОбщегоНазначенияСервер.ПолучитьПользователейГруппы(РесурсСсылка, ВыбиратьИерархически);
			Для Каждого ПользовательСсылка Из МассивПользователиГруппы Цикл
				ДобавитьПользователя(ПользовательСсылка);
			КонецЦикла;
		ИначеЕсли ТипЗнч(РесурсСсылка) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			Если НЕ ЗначениеЗаполнено(РесурсСсылка) Тогда
				МассивПользователиГруппы = ПолучитьПользователейПодразделения(РесурсСсылка, Истина);				
			Иначе				
				МассивПользователиГруппы = ПолучитьПользователейПодразделения(РесурсСсылка);				
			КонецЕсли;				
			Для Каждого ПользовательСсылка Из МассивПользователиГруппы Цикл
				ДобавитьПользователя(ПользовательСсылка);
			КонецЦикла;
		ИначеЕсли ТипЗнч(РесурсСсылка) = Тип("СправочникСсылка.CRM_Помещения") Тогда
			ДобавитьПомещение(РесурсСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияКалендарьТабличныйДокументОтменитьРежимРедактирования()
	Элементы.КалендарьТабличныйДокумент.Редактирование = Ложь;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СортироватьМассивПоВозрастанию(Массив)
	Для номер = 0 По Массив.ВГраница() - 1 Цикл
		Для мномер = 0 По Массив.ВГраница() - 1 Цикл
			Если Массив[мномер] > Массив[мномер + 1] Тогда
				СтароеЗначение = Массив[мномер];
				Массив[мномер] = Массив[мномер + 1];
				Массив[мномер + 1] = СтароеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСводнуюИнформациюОВыделеннойОбласти()
	ВыделеннаяОбласть = Элементы.КалендарьТабличныйДокумент.ТекущаяОбласть;
	Если ВыделеннаяОбласть = Неопределено Или ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРезультат = Новый Структура(
	"ИндексВремениНачало,
	|ИндексВремениОкончание,
	|МассивДат,
	|МассивПользователей,
	|МассивПомещений,
	|МассивРасшифровокСобытий,
	|СобытиеНаВесьДень",
	Неопределено,
	Неопределено,
	Новый Массив(),
	Новый Массив(),
	Новый Массив(),
	Новый Массив(),
	Ложь);
	
	ИндексСтрокаНачало = ВыделеннаяОбласть.Верх;
	ИндексСтрокаКонец = ВыделеннаяОбласть.Низ;
	
	ИндексКолонкаНачало = ВыделеннаяОбласть.Лево;
	ИндексКолонкаКонец = ВыделеннаяОбласть.Право;
	
	ВысотаТабличногоДокумента = КалендарьТабличныйДокумент.ВысотаТаблицы;
	ШиринаТабличногоДокумента = КалендарьТабличныйДокумент.ШиринаТаблицы;
	
	МассивНайденныйСобытий = Новый Массив();
	Для нИндексСтрока = ИндексСтрокаНачало По ИндексСтрокаКонец Цикл
		Для нИндексКолонка = ИндексКолонкаНачало По ИндексКолонкаКонец Цикл
			Область = КалендарьТабличныйДокумент.Область(нИндексСтрока, нИндексКолонка, нИндексСтрока, нИндексКолонка);
			Если ТипЗнч(Область.Расшифровка) = Тип("Число") Тогда
				Попытка		Расшифровка = ТаблицаРасшифровок[Область.Расшифровка];
				Исключение	Расшифровка = Неопределено;
				КонецПопытки;
			Иначе
				Расшифровка = Неопределено;
			КонецЕсли;
			Если Расшифровка <> Неопределено Тогда
				Если ЗначениеЗаполнено(Расшифровка.Событие) И Расшифровка.ТипЯчейки = "Событие" Тогда
					Если СтруктураРезультат.ИндексВремениНачало = Неопределено Тогда
						СтруктураРезультат.ИндексВремениНачало = Расшифровка.ИндексНачало;
					Иначе
						СтруктураРезультат.ИндексВремениНачало = Мин(СтруктураРезультат.ИндексВремениНачало, Расшифровка.ИндексНачало);
					КонецЕсли;
					Если СтруктураРезультат.ИндексВремениНачало = Неопределено Тогда
						СтруктураРезультат.ИндексВремениОкончание = Расшифровка.ИндексКонец;
					Иначе
						СтруктураРезультат.ИндексВремениОкончание = Макс(СтруктураРезультат.ИндексВремениНачало, Расшифровка.ИндексКонец);
					КонецЕсли;
				Иначе
					Если СтруктураРезультат.ИндексВремениНачало = Неопределено Тогда
						СтруктураРезультат.ИндексВремениНачало = Расшифровка.ИндексВремени;
					Иначе
						СтруктураРезультат.ИндексВремениНачало = Мин(СтруктураРезультат.ИндексВремениНачало, Расшифровка.ИндексВремени);
					КонецЕсли;
					Если СтруктураРезультат.ИндексВремениНачало = Неопределено Тогда
						СтруктураРезультат.ИндексВремениОкончание = Расшифровка.ИндексВремени;
					Иначе
						СтруктураРезультат.ИндексВремениОкончание = Макс(СтруктураРезультат.ИндексВремениНачало, Расшифровка.ИндексВремени);
					КонецЕсли;
					Если Расшифровка.ТипЯчейки = "СобытиеНаВесьДеньСвободнаяОбласть" Тогда
						СтруктураРезультат.СобытиеНаВесьДень = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Расшифровка.ТипЯчейки = "Событие" Или Расшифровка.ТипЯчейки = "СобытиеНаВесьДень" Тогда
					Если МассивНайденныйСобытий.Найти(Расшифровка.Событие) = Неопределено Тогда
						МассивНайденныйСобытий.Добавить(Расшифровка.Событие);
						СтруктураРезультат.МассивРасшифровокСобытий.Добавить(Область.Расшифровка);
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Расшифровка.ПользовательОтбор) И СтруктураРезультат.МассивПользователей.Найти(Расшифровка.ПользовательОтбор) = Неопределено Тогда
					СтруктураРезультат.МассивПользователей.Добавить(Расшифровка.ПользовательОтбор);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Расшифровка.Пользователь) И СтруктураРезультат.МассивПользователей.Найти(Расшифровка.Пользователь) = Неопределено Тогда
					СтруктураРезультат.МассивПользователей.Добавить(Расшифровка.Пользователь);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Расшифровка.ПомещениеОтбор) И СтруктураРезультат.МассивПомещений.Найти(Расшифровка.ПомещениеОтбор) = Неопределено Тогда
					СтруктураРезультат.МассивПомещений.Добавить(Расшифровка.ПомещениеОтбор);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Расшифровка.Дата) И СтруктураРезультат.МассивДат.Найти(Расшифровка.Дата) = Неопределено Тогда
					СтруктураРезультат.МассивДат.Добавить(Расшифровка.Дата);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		// Данные по ресурсам находатся в служебной области.
		СлужебнаяОбласть = КалендарьТабличныйДокумент.Область(нИндексСтрока, ШиринаТабличногоДокумента, нИндексСтрока, ШиринаТабличногоДокумента);
		Если ТипЗнч(СлужебнаяОбласть.Расшифровка) = Тип("Число") Тогда
			Попытка		Расшифровка = ТаблицаРасшифровок[СлужебнаяОбласть.Расшифровка];
			Исключение	Расшифровка = Неопределено;
			КонецПопытки;
		Иначе
			Расшифровка = Неопределено;
		КонецЕсли;
		Если Расшифровка <> Неопределено Тогда
			Если ЗначениеЗаполнено(Расшифровка.ПользовательОтбор) И СтруктураРезультат.МассивПользователей.Найти(Расшифровка.ПользовательОтбор) = Неопределено Тогда
				СтруктураРезультат.МассивПользователей.Добавить(Расшифровка.ПользовательОтбор);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Расшифровка.Пользователь) И СтруктураРезультат.МассивПользователей.Найти(Расшифровка.Пользователь) = Неопределено Тогда
				СтруктураРезультат.МассивПользователей.Добавить(Расшифровка.Пользователь);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Расшифровка.ПомещениеОтбор) И СтруктураРезультат.МассивПомещений.Найти(Расшифровка.ПомещениеОтбор) = Неопределено Тогда
				СтруктураРезультат.МассивПомещений.Добавить(Расшифровка.ПомещениеОтбор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураРезультат.МассивДат.Количество() > 0 Тогда
		СортироватьМассивПоВозрастанию(СтруктураРезультат.МассивДат);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
КонецФункции

&НаКлиенте
Процедура ДобавитьПользователяСПериодом(ПользовательИлиМассив, НачПериода, КонПериода)
	// Используется и для пользователей и для помещений.
	
	Если Не ЗначениеЗаполнено(НачПериода) Или Не ЗначениеЗаполнено(КонПериода) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПользовательИлиМассив) = Тип("Массив") Тогда
		МассивПользователей = ПользовательИлиМассив;
	Иначе
		МассивПользователей = Новый Массив();
		МассивПользователей.Добавить(ПользовательИлиМассив);
	КонецЕсли;
	
	Для Каждого ПользовательЗначение Из МассивПользователей Цикл
		НайденныеСтроки = ТаблицаВыбранныеПользователиСПериодами.НайтиСтроки(
			Новый Структура("Значение,НачалоПериода,ОкончаниеПериода", ПользовательЗначение, НачПериода, КонПериода));
		//
		Если НайденныеСтроки.Количество() > 0 Тогда Продолжить; КонецЕсли;
		
		НоваяСтрока = ТаблицаВыбранныеПользователиСПериодами.Добавить();
		НоваяСтрока.Значение			= ПользовательЗначение;
		НоваяСтрока.НачалоПериода		= НачПериода;
		НоваяСтрока.ОкончаниеПериода	= КонПериода;
	КонецЦикла;
	
	Если ПризнакЗакрыватьФормуПослеВыбораПериодов И ТаблицаВыбранныеПользователиСПериодами.Количество() > 0 Тогда
		КомандаОК(Неопределено);
	Иначе
		ОбновитьКалендарь();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПользователяСПериодом()
	ВыделенныеДанные = Элементы.ТаблицаВыбранныеПользователиСПериодами.ВыделенныеСтроки;
	Если ВыделенныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;;
	
	Для Каждого ТекДанные Из ВыделенныеДанные Цикл
		НайденнаяСтрока = ТаблицаВыбранныеПользователиСПериодами.НайтиПоИдентификатору(ТекДанные);
		Если НайденнаяСтрока <> Неопределено Тогда
			ТаблицаВыбранныеПользователиСПериодами.Удалить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейУстановитьОтбор()
	
	Подразделение = Элементы.СтруктураПредприятия.ВыделенныеСтроки;
	Если Подразделение = Неопределено Тогда
		Подразделение = Новый Массив;
		Подразделение.Добавить(ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение[0]) Тогда
		Элементы.ГруппаПоказыватьПользователейДочернихГрупп.ТекущаяСтраница = Элементы.ГруппаУстановитьСвойство;
	Иначе	
		// это корень дерева, значит в списке пользователей должен виден весь их список
		Элементы.ГруппаПоказыватьПользователейДочернихГрупп.ТекущаяСтраница = Элементы.ГруппаНельзяУстановитьСвойство;
	КонецЕсли;
	
	СписокПользователейВидСравнения = ?(ВыбиратьИерархически, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, ВидСравненияКомпоновкиДанных.ВСписке);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПользователей, "Подразделение", Подразделение, СписокПользователейВидСравнения,,ЗначениеЗаполнено(Подразделение[0]));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПользователейПодразделения(Знач ТекПодразделение, ВсеПодразделения = Ложь)
	Запрос = Новый Запрос;
	ТекстЗапроса = ("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|	И Пользователи.Подразделение В ИЕРАРХИИ(&ТекПодразделение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование
	|");
	
	Если ВсеПодразделения Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Пользователи.Подразделение В ИЕРАРХИИ(&ТекПодразделение)","");
	КонецЕсли;		
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекПодразделение", ТекПодразделение);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции	

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	РежимПодбора = "1";
	Если Параметры.Свойство("ТекущаяСтрока") И ТипЗнч(Параметры.ТекущаяСтрока) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		Если ИспользоватьГруппы Тогда
			Элементы.ГруппыПользователей.ТекущаяСтрока = Параметры.ТекущаяСтрока;
		Иначе
			Параметры.ТекущаяСтрока = Неопределено;
		КонецЕсли;
	Иначе
		ТекущийЭлемент = Элементы.ПользователиСписок;
		Элементы.ГруппыПользователей.ТекущаяСтрока = Справочники.ГруппыПользователей.ВсеПользователи;
		ОбновитьЗначениеПараметраКомпоновкиДанных(ПользователиСписок, "ГруппаПользователей", Справочники.ГруппыПользователей.ВсеПользователи);
		ОбновитьЗначениеПараметраКомпоновкиДанных(ПользователиСписок, "ВыбиратьИерархически", Истина);
	КонецЕсли;
	
	Если НЕ ИспользоватьГруппы Тогда
		Параметры.ВыборГруппПользователей = Ложь;
		Элементы.ГруппаПоказыватьПользователейДочернихГрупп.Видимость = Ложь;
		Элементы.РежимПодбора.Видимость = Ложь;
	КонецЕсли;
	
	// Настройка постоянных данных для списка пользователей.
	ОбновитьЗначениеПараметраКомпоновкиДанных(ПользователиСписок, "ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	ГруппаПользователейВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи;
	
	ТекДата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	
	Если Параметры.Свойство("ПериодНачало") Тогда
		ПериодНачало = НачалоДня(Параметры.ПериодНачало);
		ПериодДокументаНачало = Параметры.ПериодНачало;
	Иначе
		ПериодНачало = НачалоДня(ТекДата);
	КонецЕсли;
	Если Параметры.Свойство("ПериодОкончание") Тогда
		ПериодОкончание = НачалоДня(Параметры.ПериодОкончание);
		ПериодДокументаОкончание = Параметры.ПериодОкончание;
	Иначе
		ПериодОкончание = КонецДня(ПериодНачало);
	КонецЕсли;
	
	Если ПериодНачало > ПериодОкончание Тогда
		ПериодОкончание = КонецДня(ПериодНачало);
	КонецЕсли;
	
	// С очень большим периодом форма может очень долго открываться - страховка на этот случай.
	Если ПериодОкончание - ПериодНачало > (24 * 60 * 60 * 7) Тогда
		ПериодОкончание = КонецДня(ПериодНачало + (24 * 60 * 60 * 7) - 1);
	КонецЕсли;
	
	Если Параметры.Свойство("Пользователи") И ТипЗнч(Параметры.Пользователи) = Тип("Массив") Тогда
		Заголовок = НСтр("ru = 'Пользователи'");
		
		Элементы.ГруппаПодразделенияГруппыПользователей.Видимость = Истина;
		Элементы.ГруппаПомещения.Видимость = Ложь;
		
		Для Каждого Пользователь Из Параметры.Пользователи Цикл
			Если ТипЗнч(Пользователь) = Тип("Структура") Тогда
				Если ТаблицаВыбранныеПользователи.НайтиСтроки(Новый Структура("Значение", Пользователь.Пользователь)).Количество() = 0 Тогда
					НоваяСтрока = ТаблицаВыбранныеПользователи.Добавить();
					НоваяСтрока.Имя = "Пользователь";
					НоваяСтрока.Значение = Пользователь.Пользователь;
					НоваяСтрока.Описание = Строка(Пользователь.Пользователь);
				КонецЕсли;
				
				СтруктураПоиска = Новый Структура("Значение,НачалоПериода,ОкончаниеПериода", Пользователь.Пользователь, Пользователь.НачалоПериода, Пользователь.ОкончаниеПериода);
				НайденныеСтроки = ТаблицаВыбранныеПользователиСПериодами.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = ТаблицаВыбранныеПользователиСПериодами.Добавить();
					НоваяСтрока.Значение = Пользователь.Пользователь;
					НоваяСтрока.НачалоПериода = Пользователь.НачалоПериода;
					НоваяСтрока.ОкончаниеПериода = Пользователь.ОкончаниеПериода;
				КонецЕсли;
			Иначе
				Если ТаблицаВыбранныеПользователи.НайтиСтроки(Новый Структура("Значение", Пользователь)).Количество() = 0 Тогда
					НоваяСтрока = ТаблицаВыбранныеПользователи.Добавить();
					НоваяСтрока.Имя = "Пользователь";
					НоваяСтрока.Значение = Пользователь;
					НоваяСтрока.Описание = Строка(НоваяСтрока.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Параметры.Свойство("Место") Тогда
		Заголовок = НСтр("ru = 'Помещения'");
		
		ПризнакВыбиратьПомещения = Истина;
		
		Элементы.ГруппаПомещения.Видимость = Истина;
		Элементы.ГруппаПодразделенияГруппыПользователей.Видимость = Ложь;
		
		Если ТипЗнч(Параметры.Место) = Тип("Массив") Тогда
			МассивПомещений = Параметры.Место;
		Иначе
			МассивПомещений = Новый Массив();
			Если ТипЗнч(Параметры.Место) = Тип("СправочникСсылка.CRM_Помещения") И ЗначениеЗаполнено(Параметры.Место) Тогда
				МассивПомещений.Добавить(Параметры.Место);
			КонецЕсли;
		КонецЕсли;
		Для Каждого МестоСсылка Из МассивПомещений Цикл
			Если ТипЗнч(МестоСсылка) = Тип("СправочникСсылка.CRM_Помещения") И ЗначениеЗаполнено(МестоСсылка) Тогда
				Если ТаблицаВыбранныеПомещения.НайтиСтроки(Новый Структура("Значение", МестоСсылка)).Количество() = 0 Тогда
					НоваяСтрока = ТаблицаВыбранныеПомещения.Добавить();
					НоваяСтрока.Имя = "Помещение";
					НоваяСтрока.Значение = МестоСсылка;
					НоваяСтрока.Описание = Строка(МестоСсылка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ВыбиратьПериоды") Тогда
		ПризнакВыбиратьПериоды = Истина;
	КонецЕсли;
	Если Параметры.Свойство("ПоказыватьТаблицуПериодов") Тогда
		ПризнакПоказыватьТаблицуПериодов = Истина;
	КонецЕсли;
	Если Параметры.Свойство("ПоказыватьПериодДокумента") Тогда
		ПризнакПоказыватьПериодДокумента = Истина;
	КонецЕсли;
	Если Параметры.Свойство("ЗакрыватьФормуПослеВыбораПериодов") Тогда
		ПризнакЗакрыватьФормуПослеВыбораПериодов = Истина;
		Элементы.КалендарьТабличныйДокументКонтекстноеМенюКомандаДобавитьПользователяСПериодом.Заголовок = НСтр("ru = 'Выбрать период'");
	КонецЕсли;
	
	Если Параметры.Свойство("ИнтервалШкалыВремени") И ТипЗнч(Параметры.ИнтервалШкалыВремени) = Тип("Число") Тогда
		ИнтервалШкалыВремени = Параметры.ИнтервалШкалыВремени;
	Иначе
		Если ПризнакВыбиратьПериоды Тогда
			ИнтервалШкалыВремени = 60;
		Иначе
			ИнтервалШкалыВремени = 30;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийПользовательСеанса = Пользователи.ТекущийПользователь();
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСодержимоеФормыПриИзмененииГруппы();
	РежимПодбораПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСоставГруппыПользователей" Тогда
		Если Параметр = Элементы.ГруппыПользователей.ТекущаяСтрока Тогда
			Элементы.ПользователиСписок.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки[ВыбиратьИерархически] = Неопределено Тогда
		ВыбиратьИерархически = Истина;
	КонецЕсли;
	
	Если Настройки["РежимПодбора"] = Неопределено ИЛИ (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей") И Настройки["РежимПодбора"]<>"1") Тогда
		Настройки["РежимПодбора"] = "1";
	КонецЕсли;

КонецПроцедуры

#Область ОбработчикиСобытийКомандИЭлементовФормы

&НаКлиенте
Процедура КомандаДобавитьПользователяСПериодом(Команда)
	// Используется и для пользователей и для помещений.
	
	ТекущиеДанные = ПолучитьСводнуюИнформациюОВыделеннойОбласти();
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.МассивДат) <> Тип("Массив") Или ТекущиеДанные.МассивДат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПризнакВыбиратьПомещения Тогда
		МассивРесурсы = ТекущиеДанные.МассивПомещений;
	Иначе
		МассивРесурсы = ТекущиеДанные.МассивПользователей;
	КонецЕсли;
	
	Если ТипЗнч(МассивРесурсы) <> Тип("Массив") Или МассивРесурсы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОтображения = ПолучитьНастройкиОтображенияКлиент();
	
	НачПериода = ТекущиеДанные.МассивДат[0];
	КонПериода = ТекущиеДанные.МассивДат[ТекущиеДанные.МассивДат.ВГраница()] + НастройкиОтображения.РасписаниеИнтервалШкалыВремени * 60;
	ДобавитьПользователяСПериодом(МассивРесурсы, НачПериода, КонПериода);
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьПользователяСПериодом(Команда)
	УдалитьПользователяСПериодом();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьПользователя(Команда)
	// Используется и для пользователей и для помещений.
	
	ТекущиеДанные = ПолучитьСводнуюИнформациюОВыделеннойОбласти();
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ПризнакВыбиратьПомещения Тогда
		ТаблицаРесурсы = ТаблицаВыбранныеПомещения;
		МассивРесурсы = ТекущиеДанные.МассивПомещений;
	Иначе
		ТаблицаРесурсы = ТаблицаВыбранныеПользователи;
		МассивРесурсы = ТекущиеДанные.МассивПользователей;
	КонецЕсли;
	
	Если ТипЗнч(МассивРесурсы) <> Тип("Массив") Или МассивРесурсы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПользовательДляУдаления Из МассивРесурсы Цикл
		Если Не ЗначениеЗаполнено(ПользовательДляУдаления) Тогда Продолжить; КонецЕсли;
		
		НайденныеСтроки = ТаблицаРесурсы.НайтиСтроки(Новый Структура("Значение", ПользовательДляУдаления));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТаблицаРесурсы.Удалить(НайденнаяСтрока);
		КонецЦикла;
		НайденныеСтроки = ТаблицаВыбранныеПользователиСПериодами.НайтиСтроки(Новый Структура("Значение", ПользовательДляУдаления));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТаблицаВыбранныеПользователиСПериодами.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьКалендарь();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОК(Команда)
	Массив = Новый Массив();
	Если ПризнакВыбиратьПомещения Тогда
		ТаблицаРесурсы = ТаблицаВыбранныеПомещения;
	Иначе
		ТаблицаРесурсы = ТаблицаВыбранныеПользователи;
	КонецЕсли;
	
	Если ПризнакВыбиратьПериоды Тогда
		Если ПризнакЗакрыватьФормуПослеВыбораПериодов И ТаблицаВыбранныеПользователиСПериодами.Количество() = 0 Тогда
			КомандаДобавитьПользователяСПериодом(Неопределено);
		КонецЕсли;
		Если ПризнакЗакрыватьФормуПослеВыбораПериодов И ТаблицаВыбранныеПользователиСПериодами.Количество() = 0 Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаРесурсы Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.Значение) И Массив.Найти(СтрокаТаблицы.Значение) = Неопределено Тогда
					Массив.Добавить(Новый Структура(?(ПризнакВыбиратьПомещения, "Помещение", "Пользователь") + ",НачалоПериода,ОкончаниеПериода", СтрокаТаблицы.Значение, ПериодДокументаНачало, ПериодДокументаОкончание));
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТаблицы Из ТаблицаВыбранныеПользователиСПериодами Цикл
				Массив.Добавить(Новый Структура(?(ПризнакВыбиратьПомещения, "Помещение", "Пользователь") + ",НачалоПериода,ОкончаниеПериода", СтрокаТаблицы.Значение, СтрокаТаблицы.НачалоПериода, СтрокаТаблицы.ОкончаниеПериода));
			КонецЦикла;
		КонецЕсли;
	Иначе
		Для Каждого СтрокаТаблицы Из ТаблицаРесурсы Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Значение) И Массив.Найти(СтрокаТаблицы.Значение) = Неопределено Тогда
				Массив.Добавить(СтрокаТаблицы.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Открыта() Тогда
		Закрыть(Массив);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Закрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДобавитьПользователяИлиГруппуИлиПомещение(ВыбраннаяСтрока);
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейПриАктивизацииСтроки(Элемент)
	
	ОбновитьСодержимоеФормыПриИзмененииГруппы();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповеститьОВыборе(Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыФормы = Новый Структура;
		
		Если ЗначениеЗаполнено(Элементы.ГруппыПользователей.ТекущаяСтрока) Тогда
			
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Родитель", Элементы.ГруппыПользователей.ТекущаяСтрока));
		КонецЕсли;
		
		ОткрытьФорму("Справочник.ГруппыПользователей.ФормаОбъекта", ПараметрыФормы, Элементы.ГруппыПользователей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если ПараметрыПеретаскивания.Значение = ПредопределенноеЗначение("Справочник.ГруппыПользователей.ВсеПользователи") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.КалендарьТабличныйДокумент.Редактирование = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияКалендарьТабличныйДокументОтменитьРежимРедактирования", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПользователиСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДобавитьПользователяИлиГруппуИлиПомещение(ВыбраннаяСтрока);
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ПользователиСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ГруппаНовогоПользователя", Элементы.ГруппыПользователей.ТекущаяСтрока);
	
	Если Копирование И Элемент.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элемент.ТекущаяСтрока);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", ПараметрыФормы, Элементы.ПользователиСписок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиСписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Элементы.КалендарьТабличныйДокумент.Редактирование = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияКалендарьТабличныйДокументОтменитьРежимРедактирования", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВыбиратьИерархическиПриИзменении(Элемент)
	
	Если РежимПодбора = "0" Тогда
		ОбновитьСодержимоеФормыПриИзмененииГруппы();
	Иначе	
		СписокПользователейУстановитьОтбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДобавитьПользователяИлиГруппуИлиПомещение(ВыбраннаяСтрока);
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ПомещенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Элементы.КалендарьТабличныйДокумент.Редактирование = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияКалендарьТабличныйДокументОтменитьРежимРедактирования", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КалендарьОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Попытка		ЗначениеРасшифровки = ТаблицаРасшифровок[Расшифровка];
	Исключение	ЗначениеРасшифровки = Неопределено;
	КонецПопытки;
	
	Если ЗначениеРасшифровки <> Неопределено Тогда
		Если ЗначениеРасшифровки.ТипЯчейки = "Событие" Тогда
			Если ЗначениеЗаполнено(ЗначениеРасшифровки.Событие) Тогда
				Попытка ПоказатьЗначение(, ЗначениеРасшифровки.Событие);
				Исключение КонецПопытки;
			КонецЕсли;
		ИначеЕсли ЗначениеРасшифровки.ТипЯчейки = "ЗаголовокРесурс" Тогда
			Если ЗначениеЗаполнено(ЗначениеРасшифровки.Пользователь) Тогда
				НайденныеСтроки = ТаблицаВыбранныеПользователи.НайтиСтроки(Новый Структура("Значение", ЗначениеРасшифровки.Пользователь));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ТаблицаВыбранныеПользователи.Удалить(НайденнаяСтрока);
				КонецЦикла;
				НайденныеСтроки = ТаблицаВыбранныеПользователиСПериодами.НайтиСтроки(Новый Структура("Значение", ЗначениеРасшифровки.Пользователь));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ТаблицаВыбранныеПользователиСПериодами.Удалить(НайденнаяСтрока);
				КонецЦикла;
				
				ОбновитьКалендарь();
				
			ИначеЕсли ЗначениеЗаполнено(ЗначениеРасшифровки.Помещение) Тогда
				
				НайденныеСтроки = ТаблицаВыбранныеПомещения.НайтиСтроки(Новый Структура("Значение", ЗначениеРасшифровки.Помещение));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ТаблицаВыбранныеПомещения.Удалить(НайденнаяСтрока);
				КонецЦикла;
				
				ОбновитьКалендарь();
				
			КонецЕсли;
		Иначе
			Если ПризнакВыбиратьПериоды Тогда
				КомандаДобавитьПользователяСПериодом(Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоПриИзменении(Элемент)
	СкорректироватьПериод(Истина);
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ПериодОкончаниеПриИзменении(Элемент)
	СкорректироватьПериод(Ложь);
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалШкалыВремениНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(5);
	Элемент.СписокВыбора.Добавить(6);
	Элемент.СписокВыбора.Добавить(10);
	Элемент.СписокВыбора.Добавить(15);
	Элемент.СписокВыбора.Добавить(30);
	Элемент.СписокВыбора.Добавить(60);
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалШкалыВремениПриИзменении(Элемент)
	Если ТипЗнч(КэшНастроекОтображения) = Тип("Структура") Тогда
		КэшНастроекОтображения.НастройкиОтображения.РасписаниеИнтервалШкалыВремени = ИнтервалШкалыВремени;
	КонецЕсли;
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныеПользователиСПериодамиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьПользователяСПериодом();
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияПриАктивизацииСтроки(Элемент)
	СписокПользователейУстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДобавитьПользователяИлиГруппуИлиПомещение(ВыбраннаяСтрока);
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура РежимПодбораПриИзменении(Элемент)

	Если РежимПодбора = "0" Тогда
		Элементы.ГруппаГруппыПользователей.Видимость			  = Истина;
		Элементы.ГруппаПользователиСписок.Видимость				  = Истина;
		
		Элементы.ГруппаСтруктураПредприятия.Видимость			  = Ложь;
		Элементы.ГруппаСписокПользователейПодразделений.Видимость = Ложь;
	Иначе
		Элементы.ГруппаГруппыПользователей.Видимость			  = Ложь;
		Элементы.ГруппаПользователиСписок.Видимость				  = Ложь;
		
		Элементы.ГруппаСтруктураПредприятия.Видимость			  = Истина;		
		Элементы.ГруппаСписокПользователейПодразделений.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДобавитьПользователяИлиГруппуИлиПомещение(ВыбраннаяСтрока);
	ОбновитьКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыФормы = Новый Структура;
		
		Если ЗначениеЗаполнено(Элементы.ГруппыПользователей.ТекущаяСтрока) Тогда
			
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Родитель", Элементы.СтруктураПредприятия.ТекущаяСтрока));
		КонецЕсли;
		
		ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаОбъекта", ПараметрыФормы, Элементы.СтруктураПредприятия);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповеститьОВыборе(Значение);
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Элементы.КалендарьТабличныйДокумент.Редактирование = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияКалендарьТабличныйДокументОтменитьРежимРедактирования", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	
	Если Копирование И Элемент.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элемент.ТекущаяСтрока);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", ПараметрыФормы, Элементы.СписокПользователей);

КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Элементы.КалендарьТабличныйДокумент.Редактирование = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияКалендарьТабличныйДокументОтменитьРежимРедактирования", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
