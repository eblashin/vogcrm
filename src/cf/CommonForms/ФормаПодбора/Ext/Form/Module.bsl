
//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
// Функция помещает результаты подбора в хранилище.
Функция ЗаписатьПодборВХранилище() 
		
	Для каждого СтрокаЗагрузки Из ОтобранныеЗапасы Цикл
		Если СтрокаЗагрузки.ЭтоГруппа Тогда
			СтрокаЗагрузки.Содержание = Строка(СтрокаЗагрузки.Номенклатура);
			Продолжить;
		КонецЕсли;
		
		Если ИспользуетсяНДС Тогда
									
			Если НЕ CRM_ОбщегоНазначенияСервер.ОрганизацияОблагаетсяНДС(ОрганизацияДокумента) Тогда
		
				Если ОрганизацияДокумента.СтавкаНДСПоУмолчанию.НеОблагается Тогда
					СтрокаЗагрузки.СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСБезНДС();
				Иначе
					СтрокаЗагрузки.СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
				КонецЕсли;	
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура.СтавкаНДС) Тогда
				СтрокаЗагрузки.СтавкаНДС = СтрокаЗагрузки.Номенклатура.СтавкаНДС;
			Иначе
				СтрокаЗагрузки.СтавкаНДС = ОрганизацияДокумента.СтавкаНДСПоУмолчанию;
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ИспользуютсяЦены ИЛИ ИспользуютсяСкидкиНаценки Тогда			
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("ДатаОбработки", 		Период);
			СтруктураДанные.Вставить("ВидЦен", 				ВидЦен);
			СтруктураДанные.Вставить("Валюта",			 	Валюта);
			СтруктураДанные.Вставить("ЦенаВключаетНДС", 	СуммаВключаетНДС);
			
			СтруктураДанные.Вставить("Номенклатура", 		СтрокаЗагрузки.Номенклатура);
			СтруктураДанные.Вставить("Характеристика", 		СтрокаЗагрузки.Характеристика);
			СтруктураДанные.Вставить("Коэффициент", 		?(ТипЗнч(СтрокаЗагрузки.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения"), СтрокаЗагрузки.ЕдиницаИзмерения.Коэффициент, 1));
			СтруктураДанные.Вставить("ЕдиницаИзмерения", 	СтрокаЗагрузки.ЕдиницаИзмерения);	
			
			СтруктураДанные.Вставить("СтавкаНДС", 			СтрокаЗагрузки.СтавкаНДС);			
			Если ИспользуютсяСкидкиНаценки Тогда
				СтруктураДанные.Вставить("Организация", 	Организация);
				СтруктураДанные.Вставить("ВидСкидкиНаценки",ВидСкидкиНаценки);
				СтруктураДанные.Вставить("СуммаДокумента", 	ОтобранныеЗапасы.Итог("Всего"));
				СтруктураДанные.Вставить("Количество", 		1);
				СтрокаЗагрузки.ПроцентРучнойСкидки = ВидСкидкиНаценки.Процент;	
			КонецЕсли;	
			
			СтрокаЗагрузки.Цена 				= CRM_ОбщегоНазначенияСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
			
			СтрокаЗагрузки.Сумма 				= СтрокаЗагрузки.Количество * СтрокаЗагрузки.Цена;	
			
			Если СтрокаЗагрузки.ПроцентРучнойСкидки = 100 Тогда
				СтрокаЗагрузки.Сумма = 0;
			ИначеЕсли СтрокаЗагрузки.ПроцентРучнойСкидки <> 0 И СтрокаЗагрузки.Количество <> 0 Тогда
				СтрокаЗагрузки.Сумма = СтрокаЗагрузки.Сумма * (1 - СтрокаЗагрузки.ПроцентРучнойСкидки / 100);
			КонецЕсли;
							
			Если НЕ ИспользуетсяНДС Тогда
				Если ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура.СтавкаНДС) Тогда
					СтрокаЗагрузки.СтавкаНДС 			= СтрокаЗагрузки.Номенклатура.СтавкаНДС;
				Иначе
					СтрокаЗагрузки.СтавкаНДС 			= ОрганизацияДокумента.СтавкаНДСПоУмолчанию;
				КонецЕсли;			
			КонецЕсли;
			РассчитатьСуммуНДС(СтрокаЗагрузки);
			СтрокаЗагрузки.Всего 				= СтрокаЗагрузки.Сумма + ?(СуммаВключаетНДС, 0, СтрокаЗагрузки.СуммаНДС);
			
		КонецЕсли;
		
		СтрокаЗагрузки.ДоляСтоимости 		= 1;        
		
		Если ИспользуетсяСодержание Тогда			
			СтрокаЗагрузки.Содержание = CRM_ОбщегоНазначенияСервер.ПолучитьПредставлениеНоменклатурыДляПечати(
																?(ЗначениеЗаполнено(СтрокаЗагрузки.Номенклатура.НаименованиеПолное), 
																СтрокаЗагрузки.Номенклатура.НаименованиеПолное, СтрокаЗагрузки.Номенклатура.Наименование), 
																СтрокаЗагрузки.Характеристика, СтрокаЗагрузки.Номенклатура.Артикул);        
		КонецЕсли;
		
	КонецЦикла; 
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Группа", Группа);
	СтруктураНастроек.Вставить("ЗапоминатьВыбраннуюГруппу", ЗапоминатьВыбраннуюГруппу);
	СтруктураНастроек.Вставить("ОтборПоГруппе", ОтборПоГруппе);
	СтруктураНастроек.Вставить("ЗапасыИерархияРежимПросмотра", Элементы.ЗапасыИерархия.Отображение);
	CRM_ХранилищеНастроек.Сохранить("Подбор", "СтруктураНастроек", СтруктураНастроек);
	
	Если ЗапоминатьВыбраннуюГруппу Тогда
		Элементы.СписокЗапасов.ВосстанавливатьТекущуюСтроку = Истина;
	Иначе	
	    Элементы.СписокЗапасов.ВосстанавливатьТекущуюСтроку = Ложь;
	КонецЕсли; 
	
	Возврат ПоместитьВоВременноеХранилище(ОтобранныеЗапасы.Выгрузить());
	
КонецФункции

&НаСервере
// Рассчитывается сумма НДС в строке табличной части.
//
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // ПересчитатьСуммыДокумента()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
Функция ПолучитьДанныеНоменклатуры(Номенклатура)
	
	Возврат Новый Структура("ЕдиницаИзмерения,ЭтоГруппа", Номенклатура.ЕдиницаИзмерения, Номенклатура.ЭтоГруппа);
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияНачалоВыбораИзСписка.
//
Функция ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(Номенклатура)
	
	СписокЕдиницаИзмерения = Новый СписокЗначений;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("СписокЕдиницаИзмерения", СписокЕдиницаИзмерения);
		
	СписокЕдиницаИзмерения.Добавить(Номенклатура.ЕдиницаИзмерения, Номенклатура.ЕдиницаИзмерения.Наименование + " (ед. хранения)");
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(Номенклатура);
	МассивОтбора.Добавить(Номенклатура.НоменклатурнаяГруппа);
	
	Родитель = Номенклатура.НоменклатурнаяГруппа.Родитель;
		
	Пока Истина Цикл
		
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			Прервать;
		Иначе
			МассивОтбора.Добавить(Родитель);
		КонецЕсли;
		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец В(&Номенклатура)";	
	
	Запрос.УстановитьПараметр("Номенклатура", МассивОтбора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЕдиницаИзмерения.Добавить(Выборка.ЕдиницаИзмерения);
	КонецЦикла;
		
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка()

&НаКлиенте
// Процедура обновляет дерево номенклатуры.
//
Процедура ОбновитьСписокНоменклатуры()
	
	СписокЗапасов.Параметры.УстановитьЗначениеПараметра("Группа", Группа);
	СписокЗапасов.Параметры.УстановитьЗначениеПараметра("ОтборПоГруппе", ОтборПоГруппе);
	
КонецПроцедуры	

#Область ОбработчикиСобытий

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Период 						= Параметры.Период;
	Организация 				= Параметры.Организация;
	
	Если Параметры.Свойство("АдресЗапасовДокумента") Тогда
		ТаблицаЗапасов = ПолучитьИзВременногоХранилища(Параметры.АдресЗапасовДокумента);
		
		Для каждого СтрокаТЧ Из ТаблицаЗапасов Цикл
			НоваяСтрока = ОтобранныеЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		КонецЦикла;
	КонецЕсли; 
	
	Если Параметры.Свойство("ВидЦен") Тогда
		Если ЗначениеЗаполнено(Параметры.ВидЦен)  Тогда
			ИспользуютсяЦены = Истина;
			ВидЦен = Параметры.ВидЦен;
			Если Параметры.Свойство("Валюта") Тогда
				Валюта = Параметры.Валюта;
			Иначе
				Валюта = Константы.ВалютаУправленческогоУчета.Получить();
			КонецЕсли;
			Если Параметры.Свойство("ЦенаВключаетНДС") Тогда
				СуммаВключаетНДС = Параметры.ЦенаВключаетНДС;
			КонецЕсли;
			Элементы.ВидЦен.Видимость = Истина;
			ОрганизацияДокумента = Параметры.ОрганизацияДокумента;
		Иначе		
			Элементы.ВидЦен.Видимость 	= Ложь;
			Элементы.СписокЗапасовЦенаПоКлассификатору.Видимость = Ложь;
			Элементы.СписокЗапасовЦена.Видимость = Ложь;
			ИспользуютсяЦены 			= Ложь;
		КонецЕсли;
	Иначе		
		Элементы.ВидЦен.Видимость 	= Ложь;
		Элементы.СписокЗапасовЦенаПоКлассификатору.Видимость = Ложь;
		Элементы.СписокЗапасовЦена.Видимость = Ложь;
		ИспользуютсяЦены 			= Ложь;
	КонецЕсли;
            
	Если Параметры.Свойство("ВидСкидкиНаценки") Тогда
		Если ЗначениеЗаполнено(Параметры.ВидСкидкиНаценки)  Тогда
			ИспользуютсяСкидкиНаценки 	= Истина;
			ВидСкидкиНаценки 			= Параметры.ВидСкидкиНаценки;
		Иначе		
			ИспользуютсяСкидкиНаценки 	= Ложь;
		КонецЕсли;
	Иначе		
		ИспользуютсяСкидкиНаценки 	= Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ЦенаВключаетНДС") Тогда
		ИспользуетсяНДС 		= Истина;
		ОрганизацияДокумента    = Параметры.ОрганизацияДокумента;
	Иначе
		ИспользуетсяНДС 		= Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ИспользуетсяСодержание") Тогда
		ИспользуетсяСодержание 			= Истина;
	Иначе
		ИспользуетсяСодержание 			= Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ТипНоменклатуры") Тогда
		Если ЗначениеЗаполнено(Параметры.ТипНоменклатуры)  Тогда			
			ТипНоменклатуры = Параметры.ТипНоменклатуры;
			
			МассивТипНоменклатуры = Новый Массив();
			Для каждого ЭлементТипНоменклатуры Из ТипНоменклатуры Цикл
				МассивТипНоменклатуры.Добавить(ЭлементТипНоменклатуры.Значение);
			КонецЦикла; 
			
			МассивОграниченияТипНоменклатуры = Новый ФиксированныйМассив(МассивТипНоменклатуры);
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивОграниченияТипНоменклатуры);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.ОтобранныеЗапасыНоменклатура.ПараметрыВыбора = НовыеПараметры;			
		Иначе		
			ТипНоменклатуры = Неопределено;
		КонецЕсли;
	Иначе		
		ТипНоменклатуры = Неопределено;
	КонецЕсли;
	
	Если Параметры.Свойство("ВыбиратьГруппу") И Параметры.ВыбиратьГруппу = Истина Тогда
		ВыборГруппы = Истина;
		Элементы.ЗапасыИерархия.РазрешитьНачалоПеретаскивания = Истина;
	Иначе
		ВыборГруппы = Ложь;
	КонецЕсли;
	
	СтруктураНастроек = CRM_ХранилищеНастроек.Загрузить("Подбор", "СтруктураНастроек");	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		ЗапоминатьВыбраннуюГруппу = СтруктураНастроек.ЗапоминатьВыбраннуюГруппу;
		Если ЗапоминатьВыбраннуюГруппу Тогда
			Группа = СтруктураНастроек.Группа;
			Элементы.СписокЗапасов.ВосстанавливатьТекущуюСтроку = Истина;
			ОтборПоГруппе = СтруктураНастроек.ОтборПоГруппе;
			Элементы.ЗапасыИерархия.Отображение = СтруктураНастроек.ЗапасыИерархияРежимПросмотра;
		Иначе
			Группа = Справочники.Номенклатура.ПустаяСсылка();
			ОтборПоГруппе = Истина;
		КонецЕсли;			
	Иначе
		Группа = Справочники.Номенклатура.ПустаяСсылка();
		ОтборПоГруппе = Истина;
	КонецЕсли;
	ТолькоЧтоОткрыт = Истина;
	
	Элементы.СписокЗапасовКонтекстноеМенюОтборПоГруппе.Пометка = ОтборПоГруппе;
	Элементы.СписокЗапасовКонтекстноеМенюБезОтбораПоГруппе.Пометка = НЕ ОтборПоГруппе;
	
	ИспользуютсяХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
	
	СписокЗапасов.Параметры.УстановитьЗначениеПараметра("ВидЦен", ВидЦен);
	СписокЗапасов.Параметры.УстановитьЗначениеПараметра("НаДату", Период);
	СписокЗапасов.Параметры.УстановитьЗначениеПараметра("Группа", Группа);	
	СписокЗапасов.Параметры.УстановитьЗначениеПараметра("ОтборПоГруппе", ОтборПоГруппе);
	Если ЗначениеЗаполнено(ТипНоменклатуры) Тогда
		СписокЗапасов.Параметры.УстановитьЗначениеПараметра("ТипНоменклатуры", МассивТипНоменклатуры);
		СписокЗапасов.Параметры.УстановитьЗначениеПараметра("НетТипаНоменклатуры", Ложь);
	Иначе	
	     СписокЗапасов.Параметры.УстановитьЗначениеПараметра("ТипНоменклатуры", Новый Массив);
		СписокЗапасов.Параметры.УстановитьЗначениеПараметра("НетТипаНоменклатуры", Истина);
	КонецЕсли;
	
	Если НЕ Константы.ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения.Получить() Тогда
		Элементы.СписокЗапасовЕдиницаИзмерения.Видимость = Ложь;
		Элементы.СписокЗапасовЦена.Видимость = Ложь;
	Иначе	
		Элементы.СписокЗапасовЦенаПоКлассификатору.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии(Отказ)
	Элементы.ЗапасыИерархия.ТекущаяСтрока = Группа;	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик оповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьПодбор" Тогда
		ОбновитьСписокНоменклатуры();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик нажатия кнопки ОК.
//
Процедура ОК(Команда)
	
	Закрыть(ЗаписатьПодборВХранилище());
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик нажатия кнопки Обновить.
//
Процедура Обновить(Команда)
	ОбновитьСписокНоменклатуры();
КонецПроцедуры

// Процедура - обработчик нажатия кнопки ОтборПоГруппе.
//
&НаКлиенте
Процедура ОтборПоГруппе(Команда)
	
	Если НЕ ОтборПоГруппе Тогда
		
		ОтборПоГруппе = Истина;
		
		Элементы.СписокЗапасовКонтекстноеМенюОтборПоГруппе.Пометка = ОтборПоГруппе;
		Элементы.СписокЗапасовКонтекстноеМенюБезОтбораПоГруппе.Пометка = НЕ ОтборПоГруппе;
		
		ОбновитьСписокНоменклатуры();		
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки БезОтбораПоГруппе.
//
&НаКлиенте
Процедура БезОтбораПоГруппе(Команда)
	
	Если ОтборПоГруппе Тогда
		
		ОтборПоГруппе = Ложь;
		
		Элементы.СписокЗапасовКонтекстноеМенюОтборПоГруппе.Пометка = ОтборПоГруппе;
		Элементы.СписокЗапасовКонтекстноеМенюБезОтбораПоГруппе.Пометка = НЕ ОтборПоГруппе;
		
		ОбновитьСписокНоменклатуры();		
	
	КонецЕсли;
	
КонецПроцедуры

// +CRM

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЗапасыИерархияПриАктивизацииСтроки()
	
	Группа = Элементы.ЗапасыИерархия.ТекущаяСтрока;
	ОбновитьСписокНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИерархияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияЗапасыИерархияПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

// -CRM

&НаКлиенте
// Процедура - обработчик события ВыборЗначения ТЧ ЗапасыИерархия.
//
Процедура ЗапасыИерархияВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
// +CRM
	СтандартнаяОбработка = Ложь;
	//Группа = Значение;
	//ОбновитьСписокНоменклатуры();
// -CRM
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПередРазворачиванием ТЧ ЗапасыИерархия.
//
Процедура ЗапасыИерархияПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если ТолькоЧтоОткрыт Тогда
		ТолькоЧтоОткрыт = Ложь;
	Иначе
		Группа = Строка;
		ОбновитьСписокНоменклатуры();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПередСворачиванием ТЧ ЗапасыИерархия.
//
Процедура ЗапасыИерархияПередСворачиванием(Элемент, Строка, Отказ)
	
	Группа = Строка;
	ОбновитьСписокНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ОбработкаВыбора ТЧ ЗапасыИерархия.
//
Процедура ЗапасыИерархияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Группа = ВыбранноеЗначение;
	ОбновитьСписокНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриСменеТекущегоРодителя ТЧ ЗапасыИерархия.
//
Процедура ЗапасыИерархияПриСменеТекущегоРодителя(Элемент)
	
	Если ТолькоЧтоОткрыт Тогда
		ТолькоЧтоОткрыт = Ложь;
	Иначе
		Группа = Элемент.ТекущийРодитель;
		ОбновитьСписокНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыИерархияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	Структура.Вставить("Характеристика", Неопределено);
	Структура.Вставить("ЕдиницаИзмерения", Неопределено);
	Структура.Вставить("ЭтоГруппа");
	
	ПараметрыПеретаскивания.Значение = Структура;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Выбор списка товаров.
//
Процедура СписокТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элемент.ТекущиеДанные;
	
	Попытка		бЭтоГруппа = (ТекущаяСтрока.ЭтоГруппа = Истина);
	Исключение	бЭтоГруппа = Ложь;
	КонецПопытки;
	
	Количество = 1;
	Если ЗапрашиватьКоличество И Не бЭтоГруппа Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СписокТоваровВыборЗавершение", ЭтотОбъект, ТекущаяСтрока);
		ПоказатьВводЧисла(ОписаниеОповещения, Количество, НСтр("ru = 'Введите количество'"), , );
	Иначе
		СписокТоваровВыборЗавершение(Количество, ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТоваровВыборЗавершение(Количество, ТекущаяСтрока) Экспорт
	
	Если Количество = Неопределено Тогда Возврат; КонецЕсли;
	
	Попытка		бЭтоГруппа = (ТекущаяСтрока.ЭтоГруппа = Истина);
	Исключение	бЭтоГруппа = Ложь;
	КонецПопытки;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", 	ТекущаяСтрока.Номенклатура);
	Если ИспользуютсяХарактеристики Тогда
		СтруктураОтбора.Вставить("Характеристика", 	ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Строки = ОтобранныеЗапасы.НайтиСтроки(СтруктураОтбора);
	
	Если Строки.Количество() > 0 Тогда
		Если Не бЭтоГруппа Тогда
			Строки[0].Количество 			= Строки[0].Количество + Количество;
		КонецЕсли;
		Элементы.ОтобранныеЗапасы.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
	Иначе 
		НоваяСтрока 					= ОтобранныеЗапасы.Добавить();
		НоваяСтрока.Номенклатура 		= ТекущаяСтрока.Номенклатура;
		Если бЭтоГруппа Тогда
			НоваяСтрока.ЕдиницаИзмерения 	= Неопределено;
			НоваяСтрока.Количество 			= 0;
		Иначе
			НоваяСтрока.ЕдиницаИзмерения 	= ТекущаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Количество 			= Количество;
		КонецЕсли;
		Если ИспользуютсяХарактеристики Тогда
			НоваяСтрока.Характеристика 	= ТекущаяСтрока.Характеристика;
		КонецЕсли;
		НоваяСтрока.ЭтоГруппа			= бЭтоГруппа;
		Элементы.ОтобранныеЗапасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля Номенклатура табличной части ОтобранныеЗапасы.
Процедура ОтобранныеЗапасыНоменклатураПриИзменении(Элемент)
	ДанныеНоменклатуры = ПолучитьДанныеНоменклатуры(Элементы.ОтобранныеЗапасы.ТекущиеДанные.Номенклатура);
	
	Элементы.ОтобранныеЗапасы.ТекущиеДанные.ЭтоГруппа = ДанныеНоменклатуры.ЭтоГруппа;
	Если ДанныеНоменклатуры.ЭтоГруппа Тогда
		Элементы.ОтобранныеЗапасы.ТекущиеДанные.ЭтоГруппа = Истина;
		Элементы.ОтобранныеЗапасы.ТекущиеДанные.Количество = 0;
		Элементы.ОтобранныеЗапасы.ТекущиеДанные.ЕдиницаИзмерения = Неопределено;
		Элементы.ОтобранныеЗапасы.ТекущиеДанные.Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	Иначе
		Элементы.ОтобранныеЗапасы.ТекущиеДанные.ЭтоГруппа = Ложь;
		Элементы.ОтобранныеЗапасы.ТекущиеДанные.ЕдиницаИзмерения = ДанныеНоменклатуры.ЕдиницаИзмерения;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события НачалоВыбораИзСписка поля ввода ЕдиницаИзмерения.
//
Процедура ОтобранныеЗапасыЕдиницаИзмеренияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ОтобранныеЗапасы.ТекущиеДанные;
		
	Элемент.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияНачалоВыбораИзСписка(СтрокаТабличнойЧасти.Номенклатура);
		
	Для каждого ЭлСписка Из СтруктураДанные.СписокЕдиницаИзмерения Цикл
		Элемент.СписокВыбора.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды ЗапрашиватьКоличество.
//
Процедура ЗапрашиватьКоличество(Команда)
	
	ЗапрашиватьКоличество = НЕ ЗапрашиватьКоличество;
	Элементы.СписокЗапасовЗапрашиватьКоличество.Пометка = ЗапрашиватьКоличество;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события НачалоПеретаскивания ТЧ СписокЗапасов.
//
Процедура СписокЗапасовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Структура = Новый Структура;
	Структура.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	Структура.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	Структура.Вставить("ЕдиницаИзмерения", ТекущиеДанные.ЕдиницаИзмерения);
	
	ПараметрыПеретаскивания.Значение = Структура;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события Перетаскивание ТЧ ОтобранныеЗапасы.
//
Процедура ОтобранныеЗапасыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыСтруктура = ПараметрыПеретаскивания.Значение;
	
	бЭтоГруппа = ПараметрыСтруктура.Свойство("ЭтоГруппа");
	
	Количество = 1;
	Если Не бЭтоГруппа И ЗапрашиватьКоличество Тогда	
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтобранныеЗапасыПеретаскиваниеЗавершение", ЭтотОбъект, ПараметрыСтруктура);
		ПоказатьВводЧисла(ОписаниеОповещения, Количество, "Введите количество", , );
	Иначе
		ОтобранныеЗапасыПеретаскиваниеЗавершение(Количество, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобранныеЗапасыПеретаскиваниеЗавершение(Количество, ПараметрыСтруктура) Экспорт
	
	Если Количество = Неопределено Тогда Возврат; КонецЕсли;
	бЭтоГруппа = ПараметрыСтруктура.Свойство("ЭтоГруппа");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", 	ПараметрыСтруктура.Номенклатура);
	Если ИспользуютсяХарактеристики И Не бЭтоГруппа Тогда
		СтруктураОтбора.Вставить("Характеристика", 	ПараметрыСтруктура.Характеристика);
	КонецЕсли;
	Строки = ОтобранныеЗапасы.НайтиСтроки(СтруктураОтбора);
	
	Если Строки.Количество() > 0 Тогда
		Если Не бЭтоГруппа Тогда
			Строки[0].Количество 			= Строки[0].Количество + Количество;
		КонецЕсли;
	Иначе 
		НоваяСтрока 						= ОтобранныеЗапасы.Добавить();
		НоваяСтрока.Номенклатура 			= ПараметрыСтруктура.Номенклатура;
		НоваяСтрока.ЭтоГруппа				= бЭтоГруппа;
		
		Если Не бЭтоГруппа Тогда
			НоваяСтрока.ЕдиницаИзмерения 	= ПараметрыСтруктура.ЕдиницаИзмерения;
			НоваяСтрока.Количество 			= Количество;
			Если ИспользуютсяХарактеристики Тогда
				НоваяСтрока.Характеристика 	= ПараметрыСтруктура.Характеристика;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПроверкаПеретаскивания ТЧ ОтобранныеЗапасы.
//
Процедура ОтобранныеЗапасыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды Создать.
//
Процедура Создать(Команда)
	ЗначениеЗаполнения = Новый Структура;
	ЗначениеЗаполнения.Вставить("Родитель", Группа);
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения, ЭтоГруппа", ЗначениеЗаполнения, Ложь), ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды Изменить.
//
Процедура Изменить(Команда)
	
	СтруктураОткрытия = Новый Структура("Ключ", Элементы.СписокЗапасов.ТекущиеДанные.Номенклатура);
	Если Элементы.СписокЗапасов.ТекущиеДанные.ЭтоГруппа Тогда
		ОткрытьФорму("Справочник.Номенклатура.ФормаГруппы", СтруктураОткрытия, ЭтотОбъект);
	Иначе
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", СтруктураОткрытия, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
