
&НаСервере
// Найти клиентов по заданным условиям.
//
Функция НайтиКлиентов(ОбновитьИндекс = Ложь)

	// обновить индекс ППД
	Если ОбновитьИндекс Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			ПолнотекстовыйПоиск.ОбновитьИндекс();
			ИндексППДАктуален = Истина;
		Исключение
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;

	ТаблицаОснований = РеквизитФормыВЗначение("Основания");

	// получить результаты поиска
	СтрокаПоискаКлиентов = СтрокаПоиска;

	ТекстОшибки = CRM_МетодыМодулейОбъектовСправочников.НайтиПартнеров(СтрокаПоискаКлиентов, ТаблицаОснований);
	
	Если ТекстОшибки = Неопределено Тогда

		// вернуть таблицу оснований
		ЗначениеВРеквизитФормы(ТаблицаОснований, "Основания");
		
		Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.Список;
		Элементы.СписокОтображатьВВидеДерева.Пометка = Ложь;
		
		// Установить отбор по списку найденных партнеров.
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(
			СписокКлиентов, "Ссылка", ТаблицаОснований.ВыгрузитьКолонку("Партнер"), Истина,
			ВидСравненияКомпоновкиДанных.ВСписке);

	КонецЕсли;

	Возврат ТекстОшибки;

КонецФункции

&НаКлиенте
Процедура ОтображатьВВидеДерева(Команда)
	
	РежимОтображенияДерево = Не РежимОтображенияДерево;
	Если РежимОтображенияДерево Тогда
		Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.Дерево;
	Иначе	
		Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	Элементы.СписокОтображатьВВидеДерева.Пометка =  РежимОтображенияДерево;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокКлиентовПриАктивизацииСтроки()
	
	ТекДанные = Элементы.СписокКлиентов.ТекущаяСтрока;
	УстановитьОтборКонтактныхЛицПоКлиенту(ТекДанные);
	ПолучитьАдресаКлиента(ТекДанные);
	
	Если ЗначениеЗаполнено(УстановитьТекущуюСтрокуВКонтактныхЛицах) Тогда
		Попытка Элементы.СписокКонтактныхЛиц.ТекущаяСтрока = УстановитьТекущуюСтрокуВКонтактныхЛицах;
		Исключение КонецПопытки;
		УстановитьТекущуюСтрокуВКонтактныхЛицах = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокКонтактныхЛицПриАктивизацииСтроки()
	
	ТекДанные = Элементы.СписокКонтактныхЛиц.ТекущаяСтрока;
	ПолучитьАдресаКонтактногоЛица(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПользователейПриАктивизацииСтроки()
	
	ТекДанные = Элементы.СписокПользователей.ТекущаяСтрока;
	ПолучитьАдресаПользователей(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокФизЛицПриАктивизацииСтроки()
	
	ТекДанные = Элементы.СписокФизЛиц.ТекущаяСтрока;
	ПолучитьАдресаФизЛиц(ТекДанные);
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПолучитьАдресаКлиента(Ссылка)
	//++ VOG Иванов С.А. 08.11.2019 ID заявки: 000000698
	АдресаКлиентов.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаКонтактовКонтактнаяИнформация.Представление, """") КАК CRM_Email,
	|	ТаблицаКонтактовКонтактнаяИнформация.Вид КАК ВидКИ,
	|	ТаблицаКонтактовКонтактнаяИнформация.Ссылка
	|ИЗ
	|	//ТаблицаКонтактов КАК ТаблицаКонтактовКонтактнаяИнформация
	|ГДЕ
	|	ТаблицаКонтактовКонтактнаяИнформация.Ссылка = &Ссылка
	|	И ТаблицаКонтактовКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.вогТорговыеТочки") Тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст, "//ТаблицаКонтактов"," Справочник.вогТорговыеТочки.КонтактнаяИнформация");	
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.вогЮридическиеЛица") Тогда
		Запрос.Текст = стрЗаменить(Запрос.Текст, "//ТаблицаКонтактов"," Справочник.вогЮридическиеЛица.КонтактнаяИнформация");
	Иначе
		Запрос.Текст = стрЗаменить(Запрос.Текст, "//ТаблицаКонтактов"," Справочник.Партнеры.КонтактнаяИнформация");
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = АдресаКлиентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
	КонецЦикла;
	//-- VOG Иванов С.А. 08.11.2019 ID заявки: 000000698
КонецПроцедуры

&НаСервере
Процедура ПолучитьАдресаКонтактногоЛица(Ссылка)
	
	АдресаКонтактныхЛиц.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление, """") КАК CRM_Email,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид КАК ВидКИ,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = АдресаКонтактныхЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАдресаПользователей(Ссылка)
	
	АдресаПользвателей.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(ПользователиКонтактнаяИнформация.Представление, """") КАК CRM_Email,
	|	ПользователиКонтактнаяИнформация.Вид КАК ВидКИ,
	|	ПользователиКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|ГДЕ
	|	ПользователиКонтактнаяИнформация.Ссылка = &Ссылка
	|	И ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = АдресаПользвателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАдресаФизЛиц(Ссылка)
	
	АдресаФизЛиц.Очистить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(ФизЛицаКонтактнаяИнформация.Представление, """") КАК CRM_Email,
	|	ФизЛицаКонтактнаяИнформация.Вид КАК ВидКИ,
	|	ФизЛицаКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизЛицаКонтактнаяИнформация.Ссылка = &Ссылка
	|	И ФизЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = АдресаФизЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборКонтактныхЛицПоКлиенту(Ссылка)
	
	КонтактныеЛицаОтборПоКлиенту = СписокКонтактныхЛиц.Отбор.Элементы[0];
	КонтактныеЛицаОтборПоКлиенту.ПравоеЗначение = Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполним переданную таблицу получателей.
	ЗаполнитьТаблицуПолучателей();
	
	ТекущийКонтакт = Неопределено;
	Попытка
		Если Параметры.Свойство("СписокВыбранных") И ТипЗнч(Параметры.СписокВыбранных) = Тип("СписокЗначений") Тогда
			Для Каждого ЗначениеСписка Из Параметры.СписокВыбранных Цикл
				Если ЗначениеСписка.Представление = "Кому" Или ЗначениеСписка.Представление = "Копии" Тогда
					Если ТипЗнч(ЗначениеСписка.Значение) = Тип("Массив") Тогда
						Для Каждого СтруктураАдрес Из ЗначениеСписка.Значение Цикл
							Если ЗначениеЗаполнено(СтруктураАдрес.Контакт) Тогда
								ТекущийКонтакт = СтруктураАдрес.Контакт;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение КонецПопытки;
	Если ТекущийКонтакт <> Неопределено Тогда
		Если ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
			Элементы.СписокКлиентов.ТекущаяСтрока = ТекущийКонтакт;
		ИначеЕсли ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Элементы.СписокКлиентов.ТекущаяСтрока = ТекущийКонтакт.Владелец;
			УстановитьТекущуюСтрокуВКонтактныхЛицах = ТекущийКонтакт;
		ИначеЕсли ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.Пользователи") Тогда
			Элементы.СписокПользователей.ТекущаяСтрока = ТекущийКонтакт;
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПользователей;
		ИначеЕсли ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Элементы.СписокФизЛиц.ТекущаяСтрока = ТекущийКонтакт;
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаФизЛица;			
		КонецЕсли;
	КонецЕсли;
	
	КонтактныеЛицаОтборПоКлиенту = СписокКонтактныхЛиц.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	КонтактныеЛицаОтборПоКлиенту.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Владелец");
	КонтактныеЛицаОтборПоКлиенту.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	КонтактныеЛицаОтборПоКлиенту.Использование  = Истина;
	КонтактныеЛицаОтборПоКлиенту.ПравоеЗначение = Справочники.Партнеры.ПустаяСсылка();
	
	// Настроить видимость элементов.
	
	ЗначениеРежимаПолнотекстовогоПоиска = ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска();
	
	Если ЗначениеРежимаПолнотекстовогоПоиска = РежимПолнотекстовогоПоиска.Разрешить Тогда
		
		ИндексППДАктуален = ПолнотекстовыйПоиск.ИндексАктуален();
		
	Иначе
		
		Элементы.СтрокаПоиска.Видимость = Ложь;
		Элементы.Найти.Видимость		= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РежимОтображенияДерево = Настройки.Получить("РежимОтображенияДерево");
	
	Если РежимОтображенияДерево Тогда
		
		Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.Дерево;
		
	КонецЕсли;
	
	Элементы.СписокОтображатьВВидеДерева.Пометка = РежимОтображенияДерево;
		
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)

	Если СтрокаПоиска <> "" Тогда
		
		Если ИндексППДАктуален Тогда
			
			ОбновитьИндексПоиска = Ложь;
			
		Иначе
			
			ТекстВопроса = НСтр("ru='Индекс полнотекстового поиска неактуален. Обновить индекс?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("СтрокаПоискаПриИзмененииЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
		ТекстОшибки = НайтиКлиентов(ОбновитьИндексПоиска);
		
		Если ТекстОшибки <> Неопределено Тогда
			
			ПоказатьОповещениеПользователя(ТекстОшибки);
			
		КонецЕсли;
		
	Иначе
		
		Если РежимОтображенияДерево  И Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.Список Тогда
			Элементы.СписокКлиентов.Отображение =  ОтображениеТаблицы.Дерево;
			Элементы.СписокОтображатьВВидеДерева.Пометка = Истина;
		КонецЕсли;
		
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(СписокКлиентов, "Ссылка");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) экспорт
	
	ОбновитьИндексПоиска = Результат = КодВозвратаДиалога.Да;
	Если ОбновитьИндексПоиска Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Обновление индекса полнотекстового поиска.'"));
	КонецЕсли;
	ТекстОшибки = НайтиКлиентов(ОбновитьИндексПоиска);
		
	Если ТекстОшибки <> Неопределено Тогда
		
		ПоказатьОповещениеПользователя(ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры


#Область КомандыФормы

&НаКлиенте
// Передает владельцу в качестве результата работы формы массив структур содержащих 
// адреса выбранных получателей и закрывает форму. 
//
Процедура КомандаОКВыполнить()
	
	Результат = Новый Массив;
	
	ЭлементыДереваПервыйУровень = ПолучателиПисьма.ПолучитьЭлементы();
	
	Для Каждого ЭлементДереваПервыйУровень Из ЭлементыДереваПервыйУровень Цикл
		
		Группа = ЭлементДереваПервыйУровень.Адрес;
		
		ЭлементыДереваВторойУровень = ЭлементДереваПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого ЭлементДереваВторойУровень Из ЭлементыДереваВторойУровень Цикл
			
			ТекАдрес         = ЭлементДереваВторойУровень.Адрес;
			ТекПредставление = ЭлементДереваВторойУровень.Представление;
			ТекКонтакт       = ЭлементДереваВторойУровень.Контакт;
			
			Результат.Добавить(Новый Структура("Адрес, Представление, Контакт, Группа", 
												ТекАдрес, ТекПредставление, ТекКонтакт, Группа));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
// Универсальный обработчик выбора из динамических списков различных типов справочников - контактов.
Процедура СписокСправочникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если (Элемент.Имя = "СписокКлиентов" ИЛИ Элемент.Имя = "СписокКонтактныхЛиц" ИЛИ Элемент.Имя = "СписокПользователей" ИЛИ Элемент.Имя = "СписокФизЛиц")
	И Не ЗначениеЗаполнено(ВыбраннаяСтрока) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураТекущейГруппы = Новый Структура("Адрес, Контакт");
	
	Если Не Элементы.ПолучателиПисьма.ТекущиеДанные = Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураТекущейГруппы, Элементы.ПолучателиПисьма.ТекущиеДанные);
		
	КонецЕсли;
	
	ДобавитьПолучателей(Элемент.Имя, СтруктураТекущейГруппы);
	
	ЭлементыВерхнегоУровня = ПолучателиПисьма.ПолучитьЭлементы();
	
	Для каждого ЭлементВерхнегоУровня Из ЭлементыВерхнегоУровня Цикл
		
		Элементы.ПолучателиПисьма.Развернуть(ЭлементВерхнегоУровня.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПолучателей(ИмяСписка, СтруктураТекущейГруппы)
	
	РеквизитКонтакта = "Ссылка";
	РеквизитАдреса   = "CRM_Email";
	
	Если ИмяСписка = "СписокПользователей" Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ПользователиКонтактнаяИнформация.Ссылка,
		|	ПользователиКонтактнаяИнформация.Представление КАК CRM_Email
		|ИЗ
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Ссылка В(&МассивПользователей)
		|	И ПользователиКонтактнаяИнформация.Тип = &Тип";
		
		Запрос.УстановитьПараметр("МассивПользователей",Элементы[ИмяСписка].ВыделенныеСтроки);
		Запрос.УстановитьПараметр("Тип" 			   ,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		СтрокиАдресов = Запрос.Выполнить().Выгрузить();
		//++ ВОГ Иванов С.А. 08.11.2019 ID заявки:	
	ИначеЕсли ИмяСписка = "СписокКлиентов" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
		|	ПартнерыКонтактнаяИнформация.Представление КАК CRM_Email
		|ИЗ
		|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		|ГДЕ
		|	ПартнерыКонтактнаяИнформация.Ссылка В(&МассивПользователей)
		|	И ПартнерыКонтактнаяИнформация.Тип = &Тип
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка,
		|	вогТорговыеТочкиКонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
		|ГДЕ
		|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка В (&МассивПользователей)
		|	И вогТорговыеТочкиКонтактнаяИнформация.Тип = &Тип
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	вогЮридическиеЛицаКонтактнаяИнформация.Ссылка,
		|	вогЮридическиеЛицаКонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.вогЮридическиеЛица.КонтактнаяИнформация КАК вогЮридическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	вогЮридическиеЛицаКонтактнаяИнформация.Ссылка В (&МассивПользователей)
		|	И вогЮридическиеЛицаКонтактнаяИнформация.Тип = &Тип";	
		Запрос.УстановитьПараметр("МассивПользователей",Элементы[ИмяСписка].ВыделенныеСтроки);
		Запрос.УстановитьПараметр("Тип" 			   ,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		СтрокиАдресов = Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли ИмяСписка = "СписокКонтактныхЛиц" Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Ссылка,
		|	КонтактнаяИнформация.Представление КАК CRM_Email
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка В(&МассивПользователей)
		|	И КонтактнаяИнформация.Тип = &Тип";
		
		Запрос.УстановитьПараметр("МассивПользователей",Элементы[ИмяСписка].ВыделенныеСтроки);
		Запрос.УстановитьПараметр("Тип" 			   ,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		СтрокиАдресов = Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли ИмяСписка = "СписокФизЛиц" Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФизЛицаКонтактнаяИнформация.Ссылка,
		               |	ФизЛицаКонтактнаяИнформация.Представление КАК CRM_Email
		               |ИЗ
		               |	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизЛицаКонтактнаяИнформация
		               |ГДЕ
		               |	ФизЛицаКонтактнаяИнформация.Ссылка В(&МассивПользователей)
		               |	И ФизЛицаКонтактнаяИнформация.Тип = &Тип";
					   
		Запрос.УстановитьПараметр("МассивПользователей",Элементы[ИмяСписка].ВыделенныеСтроки);
		Запрос.УстановитьПараметр("Тип" 			   ,Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		СтрокиАдресов = Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли ИмяСписка = "АдресаКлиентов" Или ИмяСписка = "АдресаКонтактныхЛиц" Или ИмяСписка = "АдресаПользвателей" 
		Или ИмяСписка = "АдресаФизЛиц" Тогда
		МассивСсылок	= Новый Массив;
		МассивАдресов	= Новый Массив;
		
		Для Каждого ЭлементМассива Из Элементы[ИмяСписка].ВыделенныеСтроки Цикл
			ДанныеСтроки = ЭтотОбъект[ИмяСписка].НайтиПоИдентификатору(ЭлементМассива);
			МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
			МассивАдресов.Добавить(ДанныеСтроки.CRM_Email);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивСсылок" ,МассивСсылок);
		Запрос.УстановитьПараметр("МассивАдресов",МассивАдресов);
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Ссылка,
		|	КонтактнаяИнформация.Представление КАК CRM_Email
		|ИЗ";
		Если ИмяСписка = "АдресаКлиентов" Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка В(&МассивСсылок)
			|	И КонтактнаяИнформация.Представление В(&МассивАдресов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	вогЮридическиеЛицаКонтактнаяИнформация.Ссылка,
			|	вогЮридическиеЛицаКонтактнаяИнформация.Представление
			|ИЗ
			|	Справочник.вогЮридическиеЛица.КонтактнаяИнформация КАК вогЮридическиеЛицаКонтактнаяИнформация
			|ГДЕ
			|	вогЮридическиеЛицаКонтактнаяИнформация.Ссылка В(&МассивСсылок)
			|	И вогЮридическиеЛицаКонтактнаяИнформация.Представление В(&МассивАдресов)
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка,
			|	вогТорговыеТочкиКонтактнаяИнформация.Представление
			|ИЗ
			|	Справочник.вогТорговыеТочки.КонтактнаяИнформация КАК вогТорговыеТочкиКонтактнаяИнформация
			|	ГДЕ
			|	вогТорговыеТочкиКонтактнаяИнформация.Ссылка В(&МассивСсылок)
			|	И вогТорговыеТочкиКонтактнаяИнформация.Представление В(&МассивАдресов)";
		ИначеЕсли ИмяСписка = "АдресаКонтактныхЛиц" Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактнаяИнформация";
				
		ИначеЕсли ИмяСписка = "АдресаПользвателей" Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация";
			
		ИначеЕсли ИмяСписка = "АдресаФизЛиц" Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация";			
			
		КонецЕсли;
		Если ИмяСписка <> "АдресаКлиентов" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка В(&МассивСсылок)
		|	И КонтактнаяИнформация.Представление В(&МассивАдресов)
		|	СГРУППИРОВАТЬ ПО
		|	КонтактнаяИнформация.Ссылка,
		|	КонтактнаяИнформация.Представление";
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		
		СтрокиАдресов = Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли ИмяСписка = "ПолучателиПисьма" Тогда
		
		СтрокиАдресов = Новый ТаблицаЗначений;
		СтрокиАдресов.Колонки.Добавить("Ссылка");
		СтрокиАдресов.Колонки.Добавить("CRM_Email");
		Для Каждого ЭлементМассива Из Элементы[ИмяСписка].ВыделенныеСтроки Цикл
			ДанныеСтроки = ЭтотОбъект[ИмяСписка].НайтиПоИдентификатору(ЭлементМассива);
			
			НоваяСтрокаАдреса = СтрокиАдресов.Добавить();
			НоваяСтрокаАдреса.Ссылка	= ДанныеСтроки.Контакт;
			НоваяСтрокаАдреса.CRM_Email	= ДанныеСтроки.Адрес;
			
			Родитель = ДанныеСтроки.ПолучитьРодителя();
			СтрокиПолучателей = Родитель.ПолучитьЭлементы();
			СтрокиПолучателей.Удалить(СтрокиПолучателей.Индекс(ДанныеСтроки));
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	// Найдем строку, куда надо добавить адреса.
	
	ЭлементыДереваПервыйУровень = ПолучателиПисьма.ПолучитьЭлементы();
	
	СтрокаГруппыАдресов = ЭлементыДереваПервыйУровень[0].ПолучитьЭлементы();
	
	Для Каждого ЭлементДереваПервыйУровень Из ЭлементыДереваПервыйУровень Цикл
		
		Если ЭлементДереваПервыйУровень.Адрес = СтруктураТекущейГруппы.Адрес
			 И ЭлементДереваПервыйУровень.Контакт = СтруктураТекущейГруппы.Контакт Тогда
	
			СтрокаГруппыАдресов = ЭлементДереваПервыйУровень.ПолучитьЭлементы();
			
			Прервать;
		
		КонецЕсли;
		
		ЭлементыДереваВторойУровень = ЭлементДереваПервыйУровень.ПолучитьЭлементы();
		
		СтрокаГруппыНайдена = Ложь;
		
		Для Каждого ЭлементДереваВторойУровень Из ЭлементыДереваВторойУровень Цикл
			
			Если ЭлементДереваВторойУровень.Адрес 	= СтруктураТекущейГруппы.Адрес
				 И ЭлементДереваВторойУровень.Контакт = СтруктураТекущейГруппы.Контакт Тогда
			
				СтрокаГруппыАдресов = ЭлементыДереваВторойУровень;
				
				СтрокаГруппыНайдена = Истина;
				
				Прервать;
			
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаГруппыНайдена Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоПолучатели = РеквизитФормыВЗначение("ПолучателиПисьма");
	
	Для Каждого СтрокаАдресов Из СтрокиАдресов Цикл
		
		Если ПустаяСтрока(СтрокаАдресов.CRM_Email) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураНовогоАдреса = Новый Структура("Адрес, Контакт");
		
		СтруктураНовогоАдреса.Адрес   = СтрокаАдресов.CRM_Email;
		СтруктураНовогоАдреса.Контакт = СтрокаАдресов.Ссылка;
		
		СтрокиСуществующихАдресов = ДеревоПолучатели.Строки.НайтиСтроки(СтруктураНовогоАдреса, Истина);
		
		Если СтрокиСуществующихАдресов.Количество() = 0 Тогда
		
			НовыйАдрес = СтрокаГруппыАдресов.Добавить();
			
			НовыйАдрес.Адрес         = СтруктураНовогоАдреса.Адрес;
			НовыйАдрес.Представление = СтруктураНовогоАдреса.Контакт.Наименование;
			НовыйАдрес.Контакт       = СтруктураНовогоАдреса.Контакт;
			
			НомерПоследнейСтроки = НомерПоследнейСтроки + 1;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Элементы.ПолучателиПисьма.Обновить();
	
КонецПроцедуры// ДобавитьПолучателей(Элемент)	

#КонецОбласти

#Область ПроцедурыИФункцииОсуществленияПоиска

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	РежимОтображенияДерево = (Элементы.СписокКлиентов.Отображение = ОтображениеТаблицы.Дерево);
КонецПроцедуры // ПередЗакрытием()

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура ЗаполнитьТаблицуПолучателей()
	
	ДеревоПолучатели = РеквизитФормыВЗначение("ПолучателиПисьма");
	
	// Заполним первый уровен дерева (папки).
	
	СтрокаКому = ДеревоПолучатели.Строки.Добавить();
	СтрокаКому.Адрес = "Кому";
	
	СтрокаКопии = ДеревоПолучатели.Строки.Добавить();
	СтрокаКопии.Адрес = "Копии";
	
	СтрокаСкрытые = ДеревоПолучатели.Строки.Добавить();
	СтрокаСкрытые.Адрес = "Скрытые";
	
	НомерПоследнейСтроки = 2;
	
	КоличествоКому = 0;
	
	КоличествоКопии = 0;
	
	Если Параметры.Свойство("СписокВыбранных") Тогда
		Для Каждого ГруппаВыбранных Из Параметры.СписокВыбранных Цикл
			
			Если ГруппаВыбранных.Значение <> Неопределено Тогда
				
				ТекущаяСтрокаДерева = ДеревоПолучатели.Строки.Найти(ГруппаВыбранных.Представление, "Адрес");
				
				Если Не ТекущаяСтрокаДерева = Неопределено Тогда
					
					Если ГруппаВыбранных.Представление = "Кому" Тогда
						
						КоличествоКому = ГруппаВыбранных.Значение.Количество();
						
					ИначеЕсли ГруппаВыбранных.Представление = "Копии" Тогда
						
						КоличествоКопии = ГруппаВыбранных.Значение.Количество();
						
					КонецЕсли;
					
					Для Каждого Элемент Из ГруппаВыбранных.Значение Цикл
						
						НоваяСтрокаДерева = ТекущаяСтрокаДерева.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, Элемент);
						
						НомерПоследнейСтроки = НомерПоследнейСтроки + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоПолучатели, "ПолучателиПисьма");
	
	Если Параметры.Свойство("ГруппаАдресов") Тогда
		Если Параметры.ГруппаАдресов = "Копии" Тогда
			
			Элементы.ПолучателиПисьма.ТекущаяСтрока = КоличествоКому + 1;
			
		ИначеЕсли Параметры.ГруппаАдресов = "Скрытые" Тогда
			
			Элементы.ПолучателиПисьма.ТекущаяСтрока = КоличествоКому + 1 + КоличествоКопии + 1;
			
		Иначе
			
			Элементы.ПолучателиПисьма.ТекущаяСтрока = 0;
			
		КонецЕсли;
	Иначе
		Элементы.ПолучателиПисьма.ТекущаяСтрока = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКлиентовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокКлиентовПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтактныхЛицПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокКонтактныхЛицПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокПользователейПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФизЛицПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_СписокФизЛицПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПередНачаломИзменения(Элемент, Отказ)
	
	ТекущийПолучатель = Элементы.ПолучателиПисьма.ТекущиеДанные;
	
	Если ТекущийПолучатель.Контакт = Неопределено
		 И Найти(",Кому,Копии,Скрытые," , "," + ТекущийПолучатель.Адрес + ",") Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПередУдалением(Элемент, Отказ)
	
	ТекущийПолучатель = Элементы.ПолучателиПисьма.ТекущиеДанные;
	
	Если ТекущийПолучатель.Контакт = Неопределено
		 И Найти(",Кому,Копии,Скрытые,", "," + ТекущийПолучатель.Адрес + ",") Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОчистить(Команда)
	
	ЭлементыДереваПервыйУровень = ПолучателиПисьма.ПолучитьЭлементы();
	
	Для Каждого ЭлементДереваПервыйУровень Из ЭлементыДереваПервыйУровень Цикл
		
		ЭлементыДереваВторойУровень = ЭлементДереваПервыйУровень.ПолучитьЭлементы();
		
		ЭлементыДереваВторойУровень.Очистить();
		
	КонецЦикла;
	
	Элементы.ПолучателиПисьма.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппу(ИмяГруппы)
	
	// определим текущую группу
	
	ТекущийПолучатель = Элементы.ПолучателиПисьма.ТекущиеДанные;
	
	Если ТекущийПолучатель.Контакт = Неопределено
		 И Найти(",Кому,Копии,Скрытые,", "," + ТекущийПолучатель.Адрес + ",") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Переносить = Истина;
	
	ЭлементНайден = Ложь;
	
	СтруктураПереносимогоЭлемента = Новый Структура("Адрес, Представление, Контакт");
	
	ЗаполнитьЗначенияСвойств(СтруктураПереносимогоЭлемента, ТекущийПолучатель);
	
	ЭлементыДереваПервыйУровень = ПолучателиПисьма.ПолучитьЭлементы();
	
	Для Каждого ЭлементДереваПервыйУровень Из ЭлементыДереваПервыйУровень Цикл
		
		ЭлементыДереваВторойУровень = ЭлементДереваПервыйУровень.ПолучитьЭлементы();
		
		Если Не ЭлементНайден Тогда
			
			ИндексТекущегоЭлемента = 0;
			
			КоличествоЭлементовУровня = ЭлементыДереваВторойУровень.Количество();
		
			Пока ИндексТекущегоЭлемента < КоличествоЭлементовУровня Цикл
				
				ЭлементДереваВторойУровень = ЭлементыДереваВторойУровень[ИндексТекущегоЭлемента];
				
				Если ЭлементДереваВторойУровень.Адрес   = СтруктураПереносимогоЭлемента.Адрес 
					 И ЭлементДереваВторойУровень.Контакт = СтруктураПереносимогоЭлемента.Контакт Тогда
					
					// Проверим, в какой папке находится получатель.
					
					Если ЭлементДереваПервыйУровень.Адрес = ИмяГруппы Тогда
						
						Переносить = Ложь;
						
					Иначе
						
						ЭлементНайден = Истина;
						
						ЭлементыДереваВторойУровень.Удалить(ИндексТекущегоЭлемента);
						
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
				
				ИндексТекущегоЭлемента = ИндексТекущегоЭлемента + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Переносить Тогда
			
			Прервать;
			
		ИначеЕсли ЭлементДереваПервыйУровень.Адрес = ИмяГруппы Тогда
			
			// Добавим элемент в новую группу.
			
			НовыйЭлемент = ЭлементыДереваВторойУровень.Добавить();
			
			НомерПоследнейСтроки = НомерПоследнейСтроки + 1;
			
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтруктураПереносимогоЭлемента);
			
		КонецЕсли;
		
		Элементы.ПолучателиПисьма.Развернуть(ЭлементДереваПервыйУровень.ПолучитьИдентификатор());
			
	КонецЦикла;
	
	Если Переносить Тогда
	
		Элементы.ПолучателиПисьма.Обновить();
		
		Элементы.ПолучателиПисьма.ТекущаяСтрока = НомерПоследнейСтроки;
		
	КонецЕсли;
	
КонецПроцедуры// ПереместитьВГруппу(ИмяГруппы)	

&НаКлиенте
Процедура ПереместитьВГруппуКому(Команда)
	
	ПереместитьВГруппу("Кому");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппуКопии(Команда)
	
	ПереместитьВГруппу("Копии");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппуСкрытые(Команда)
	
	ПереместитьВГруппу("Скрытые");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда Возврат; КонецЕсли;
	
	СтрокиПолучателей = ПолучателиПисьма.ПолучитьЭлементы();
	
	КоличествоПолучателей = СтрокиПолучателей.Количество();
	Если КоличествоПолучателей = Строка Тогда Возврат; КонецЕсли;
	СтруктураТекущейГруппы = Новый Структура;
	ДанныеСтроки = ЭтотОбъект[Элемент.Имя].НайтиПоИдентификатору(Строка);

	СтруктураТекущейГруппы.Вставить("Адрес",	ДанныеСтроки.Адрес);
	СтруктураТекущейГруппы.Вставить("Контакт",	ДанныеСтроки.Контакт);
	
	Если ИсточникПеретаскивания = "ПолучателиПисьма" Тогда
		ЗначениеПеретаскивания = ЭтотОбъект[ИсточникПеретаскивания].НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	Иначе
		ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсточникПеретаскивания) Тогда
		ИмяСписка = ИсточникПеретаскивания;
		ИсточникПеретаскивания = "";
	Иначе
		Возврат;
	КонецЕсли;
	ДобавитьПолучателей(ИмяСписка, СтруктураТекущейГруппы);
	ЭлементыВерхнегоУровня = ПолучателиПисьма.ПолучитьЭлементы();
	Для Каждого ЭлементВерхнегоУровня Из ЭлементыВерхнегоУровня Цикл
		Элементы.ПолучателиПисьма.Развернуть(ЭлементВерхнегоУровня.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элемент.Имя = "ПолучателиПисьма" Тогда
		Для Каждого ЭлементМассива Из Элементы.ПолучателиПисьма.ВыделенныеСтроки Цикл
			ЗначениеПеретаскивания = ПолучателиПисьма.НайтиПоИдентификатору(ЭлементМассива);
			Если ЗначениеПеретаскивания.ПолучитьРодителя() = Неопределено Тогда
				Выполнение = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Выполнение Тогда
		ИсточникПеретаскивания = Элемент.Имя;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПисьмаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
