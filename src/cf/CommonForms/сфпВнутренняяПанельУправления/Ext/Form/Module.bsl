
//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Процедура оповещает внешнюю панель о работе в скрытом режиме
//
// Параметры:
//	Нет.
//
Процедура УстановитьСкрытыйРежим()
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	сфпПанельУправления.SetHideMode(1, 2000);
КонецПроцедуры // УстановитьСкрытыйРежим()	
	
&НаСервереБезКонтекста
// Функция получает структуру доступных действия со звонка
//
// Параметры:
//	AvailableActions	- Число	- Доступные действия звонка
//
// Возвращаемое значение:
//	Структура	- Структура доступных действий
//
Функция ПолучитьСтруктуруДоступныхДействий(AvailableActions)
	СписокДоступныхДействий = Новый СписокЗначений;
	СписокДоступныхДействий.Добавить("Drop");
	СписокДоступныхДействий.Добавить("Answer");
	СписокДоступныхДействий.Добавить("Hold");
	СписокДоступныхДействий.Добавить("UnHold");
	СписокДоступныхДействий.Добавить("Redirect");
	СписокДоступныхДействий.Добавить("Transfer");
	СписокДоступныхДействий.Добавить("CompleteTransfer");
	СписокДоступныхДействий.Добавить("CancelTransfer");
	// Заполняем структуру по умолчанию
	СтруктураДоступныхДействий = Новый Структура;
	Для Каждого ЭлементСписка Из СписокДоступныхДействий Цикл
		СтруктураДоступныхДействий.Вставить(ЭлементСписка.Значение, Ложь);
	КонецЦикла;
	НомерЭлементаСписка = 0;
	ДелимоеЧисло = AvailableActions;
	Пока ДелимоеЧисло > 0 Цикл
		РезультатДеления = Цел(ДелимоеЧисло /2);
		ОстатокДеления = ДелимоеЧисло - (РезультатДеления * 2);
		Если ОстатокДеления = 1 Тогда
			СтруктураДоступныхДействий[СписокДоступныхДействий[НомерЭлементаСписка].Значение] = Истина;
		КонецЕсли;
		ДелимоеЧисло = РезультатДеления;
		НомерЭлементаСписка = НомерЭлементаСписка + 1;
	КонецЦикла;
	Возврат СтруктураДоступныхДействий;
КонецФункции // ПолучитьСтруктуруДоступныхДействий()

&НаСервере
// Процедура снимает доступность кнопок панели
//
// Параметры:
//	Нет.
//
Процедура СнятьДоступностьКнопок()
	// Снимаем доступность кнопок
	Элементы.Ответить.Доступность 		= Ложь;
	Элементы.HoldUnHold.Доступность	= Ложь;
	Элементы.Передать.Доступность		= Ложь;
	Элементы.Переключить.Доступность	= Ложь;
	Элементы.Отбой.Доступность 		= Ложь;
	Элементы.Подтвердить.Доступность	= Ложь;
КонецПроцедуры // СнятьДоступностьКнопок()

&НаКлиенте
// Процедура изменяет доступность кнопок панели для текущего звонка
//
// Параметры:
//	Нет
//
Процедура ИзменитьДоступностьКнопок()
	// Снимаем доступность кнопок
	СнятьДоступностьКнопок();
	// Определяем текущий звонок
	ТекущийЗвонок = ОпределитьТекущийЗвонок();
	Если ТекущийЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	// Кнопка "Отбой" всегда доступна
	Элементы.Отбой.Доступность 				= Истина;
	// Обычный звонок
	Если ИдентификаторПереводимогоЗвонка = 0 Тогда
		СтруктураДоступныхДействий			= ПолучитьСтруктуруДоступныхДействий(ТекущийЗвонок.AvailableActions);
		Элементы.Ответить.Доступность 		= СтруктураДоступныхДействий.Answer;
		Элементы.HoldUnHold.Доступность		= СтруктураДоступныхДействий.Hold ИЛИ СтруктураДоступныхДействий.UnHold;
		Если ТекущийЗвонок.State = 5 Тогда
			Элементы.Передать.Доступность	= Истина;
		КонецЕсли;
		Элементы.Переключить.Доступность	= СтруктураДоступныхДействий.Transfer;
		Элементы.Подтвердить.Доступность	= СтруктураДоступныхДействий.CompleteTransfer;
	// Отвечено на переведенный звонок
	ИначеЕсли ТекущийЗвонок.State = 8 Тогда
		Элементы.Подтвердить.Доступность	= Истина;
	КонецЕсли;	
	// Изменяем надпись и картинку на кнопке "HoldUnHold"
	Если ТекущийЗвонок.State = 10 Тогда 
		Элементы.HoldUnHold.Заголовок	= "UnHold";
		Элементы.HoldUnHold.Картинка	= БиблиотекаКартинок.сфпОтветить;
	Иначе
		Элементы.HoldUnHold.Заголовок	= "Hold";
		Элементы.HoldUnHold.Картинка	= БиблиотекаКартинок.сфпHold;
	КонецЕсли;	
КонецПроцедуры // ИзменитьДоступностьКнопок()

&НаСервере
// Процедура удаляет звонок
//
// Параметры:
//	hCall	- Число	- Идентификатор звонка
//
Процедура УдалитьЗвонок(hCall)
	ОбъектЗвонки = РеквизитФормыВЗначение("Звонки");
	СтрокаЗвонка = ОбъектЗвонки.Найти(hCall, "hCall");
	Если НЕ (СтрокаЗвонка = Неопределено) Тогда
		ОбъектЗвонки.Удалить(СтрокаЗвонка);
		ЗначениеВРеквизитФормы(ОбъектЗвонки, "Звонки");
	КонецЕсли;
КонецПроцедуры // УдалитьЗвонок()

&НаСервере
// Процедура удаляет пропущенный звонок
//
// Параметры:
//	hCall	- Число	- Идентификатор звонка
//
Процедура УдалитьПропущенныйЗвонок(hCall)
	ОбъектПропущенныеЗвонки = РеквизитФормыВЗначение("ПропущенныеЗвонки");
	СтрокаЗвонка = ОбъектПропущенныеЗвонки.Найти(hCall, "hCall");
	Если НЕ (СтрокаЗвонка = Неопределено) Тогда
		ОбъектПропущенныеЗвонки.Удалить(СтрокаЗвонка);
	КонецЕсли;	
	ЗначениеВРеквизитФормы(ОбъектПропущенныеЗвонки, "ПропущенныеЗвонки");
КонецПроцедуры // УдалитьПропущенныйЗвонок()

&НаСервере
// Процедура добавляет или обновляет информацию о звонке на форме
//
// Параметры:
//	СтруктураЗвонка	- Структура	- Структура, содержащая данные звонка
//
Процедура ДобавитьОбновитьЗвонок(СтруктураЗвонка)
	// Звонки
	Если СтруктураЗвонка.hCall = 0 Тогда Возврат; КонецЕсли;
	ОбъектЗвонки = РеквизитФормыВЗначение("Звонки");
	СтрокаЗвонка = ОбъектЗвонки.Найти(СтруктураЗвонка.hCall, "hCall");
	// Добавляем звонок
	Если СтрокаЗвонка = Неопределено Тогда
		СтрокаЗвонка							= ОбъектЗвонки.Добавить();
		СтрокаЗвонка.hCall						= СтруктураЗвонка.hCall;
		СтрокаЗвонка.LineName					= СтруктураЗвонка.LineName;
		СтрокаЗвонка.ЗаголовокВидЗвонка			= НСтр("ru='Вх./Исх. звонок:'");	
		СтрокаЗвонка.ЗаголовокНомерТелефона		= НСтр("ru='Номер телефона:'");	
		СтрокаЗвонка.ЗаголовокКлиент			= НСтр("ru='Клиент:'");	
		СтрокаЗвонка.ЗаголовокКонтактноеЛицо	= НСтр("ru='Контактное лицо:'");
	КонецЕсли;
	// Обновляем информацию о звонке
	СтрокаЗвонка.State				= СтруктураЗвонка.State;
	СтрокаЗвонка.AvailableActions	= СтруктураЗвонка.AvailableActions;
	СтрокаЗвонка.НомерТелефона		= СтруктураЗвонка.НомерТелефона;	
	Если СтруктураЗвонка.ВходящийЗвонок Тогда
		Если СтруктураЗвонка.ВнешнийЗвонок Тогда
			СтрокаЗвонка.ВидЗвонка	= "Внешний входящий";
		Иначе
			СтрокаЗвонка.ВидЗвонка	= "Внутренний входящий";
		КонецЕсли;	
	Иначе
		Если СтруктураЗвонка.ВнешнийЗвонок Тогда
			СтрокаЗвонка.ВидЗвонка	= "Внешний исходящий";
		Иначе
			СтрокаЗвонка.ВидЗвонка	= "Внутренний исходящий";
		КонецЕсли;	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		Если ЗначениеЗаполнено(СтруктураЗвонка.ContactID) Тогда
			СтруктураЗвонка.Контакт = сфпСофтФонПроСервер.сфпНайтиКонтактПоGUID(СтруктураЗвонка.ContactID);
		ИначеЕсли ЗначениеЗаполнено(СтруктураЗвонка.МассивЗвонящих) И (СтруктураЗвонка.МассивЗвонящих.Количество() = 1) Тогда
			СтруктураЗвонка.Контакт = СтруктураЗвонка.МассивЗвонящих[0];
		КонецЕсли;	
	КонецЕсли;	
	Если ЗначениеЗаполнено(СтруктураЗвонка.Контакт) Тогда
		ВладелецКонтакта = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(СтруктураЗвонка.Контакт);
		Если ЗначениеЗаполнено(ВладелецКонтакта) Тогда
			СтрокаЗвонка.Клиент				= ВладелецКонтакта;
			СтрокаЗвонка.КонтактноеЛицо		= СтруктураЗвонка.Контакт;
		Иначе	
			СтрокаЗвонка.Клиент				= СтруктураЗвонка.Контакт;
			СтрокаЗвонка.КонтактноеЛицо		= "";
		КонецЕсли;	
	ИначеЕсли ЗначениеЗаполнено(СтруктураЗвонка.МассивЗвонящих) И (СтруктураЗвонка.МассивЗвонящих.Количество() > 1) Тогда
		СтрокаЗвонка.Клиент				= НСтр("ru='Несколько совпадений номера'");
		СтрокаЗвонка.КонтактноеЛицо		= "";
	Иначе	
		СтрокаЗвонка.Клиент				= "";
		СтрокаЗвонка.КонтактноеЛицо		= "";
	КонецЕсли;	
	// Обновляем звонки на форме
	ЗначениеВРеквизитФормы(ОбъектЗвонки, "Звонки");
	// Пропущенные звонки
	Если СтруктураЗвонка.ВходящийЗвонок Тогда
		ОбъектПропущенныеЗвонки = РеквизитФормыВЗначение("ПропущенныеЗвонки");
		СтрокаПропущенногоЗвонка = ОбъектПропущенныеЗвонки.Найти(СтрокаЗвонка.hCall, "hCall");
		// Добавляем звонок в пропущенные
		Если СтрокаПропущенногоЗвонка = Неопределено Тогда
			СтрокаПропущенногоЗвонка							= ОбъектПропущенныеЗвонки.Добавить();
			СтрокаПропущенногоЗвонка.hCall						= СтрокаЗвонка.hCall;
			СтрокаПропущенногоЗвонка.ВремяЗвонка				= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
			СтрокаПропущенногоЗвонка.Количество					= 1;
			СтрокаПропущенногоЗвонка.ЗаголовокВремяЗвонка		= НСтр("ru='Дата/время'");	
			СтрокаПропущенногоЗвонка.ЗаголовокНомерТелефона		= НСтр("ru='Номер телефона:'");	
			СтрокаПропущенногоЗвонка.ЗаголовокКлиент			= НСтр("ru='Клиент:'");	
			СтрокаПропущенногоЗвонка.ЗаголовокКонтактноеЛицо	= НСтр("ru='Контактное лицо:'");
		КонецЕсли;
		// Обновляем информацию о пропущенном звонке
		СтрокаПропущенногоЗвонка.НомерТелефона	= СтрокаЗвонка.НомерТелефона;
		СтрокаПропущенногоЗвонка.Клиент			= СтрокаЗвонка.Клиент;
		СтрокаПропущенногоЗвонка.КонтактноеЛицо	= СтрокаЗвонка.КонтактноеЛицо;
		Если ЗначениеЗаполнено(СтрокаЗвонка.НомерТелефона) Тогда
			// Ищем пропущенные звонки по данному номеру телефона
			МассивПропущенныхЗвонков = ОбъектПропущенныеЗвонки.Найти(СтрокаЗвонка.НомерТелефона, "НомерТелефона");
			ОтборЗвонков = Новый Структура();
			ОтборЗвонков.Вставить("НомерТелефона", СтрокаЗвонка.НомерТелефона);
			МассивЗвонков = ОбъектПропущенныеЗвонки.НайтиСтроки(ОтборЗвонков);
			КоличествоЗвонков = МассивЗвонков.Количество();
			// Удаляем все пропущенные звонки по данному телефонному номеру
			Если КоличествоЗвонков > 1 Тогда
				Для Каждого ЭлементМассива Из МассивЗвонков Цикл
					Если ЭлементМассива.hCall = СтрокаЗвонка.hCall Тогда
						ЭлементМассива.Количество = КоличествоЗвонков;
					Иначе
						ОбъектПропущенныеЗвонки.Удалить(ЭлементМассива);
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
		// Если установлено соединение, то удаляем пропущенный звонок
		Если СтрокаЗвонка.State = 8 Тогда
			СтрокаПропущенногоЗвонка = ОбъектПропущенныеЗвонки.Найти(СтрокаЗвонка.hCall, "hCall");
			Если НЕ (СтрокаПропущенногоЗвонка = Неопределено) Тогда
				ОбъектПропущенныеЗвонки.Удалить(СтрокаПропущенногоЗвонка);
			КонецЕсли;	
		КонецЕсли;	
		ЗначениеВРеквизитФормы(ОбъектПропущенныеЗвонки, "ПропущенныеЗвонки");
	КонецЕсли;	
КонецПроцедуры // ДобавитьОбновитьЗвонок() 

&НаКлиенте
// Функция возвращает текущий звонок
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений	- Текущий звонок
//
Функция ОпределитьТекущийЗвонок()
	ТекущийЗвонок = Элементы.Звонки.ТекущиеДанные;
	Если (ТекущийЗвонок = Неопределено) И Звонки.Количество() > 0 Тогда
		ТекущийЗвонок =	Звонки[0];
	КонецЕсли;
	Возврат ТекущийЗвонок;
КонецФункции // ОпределитьТекущийЗвонок()

&НаКлиенте
// Процедура - обработчик оповещения выбора из адресной книги
//
// Параметры:
//	РезультатВыбора			- СправочникСсылка	- Выбранный владелец
//  ДополнительныеПараметры	- Структура			- Структура дополнительных параметров
//
Процедура ВыбратьАдреснаяКнига(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	ПолеВводаНомера = РезультатВыбора.НомерТелефона;
	сфпСофтФонПроКлиент.сфпПозвонить(ПолеВводаНомера, РезультатВыбора.Контакт);	
КонецПроцедуры // ВыбратьАдреснаяКнига()

&НаКлиенте
// Процедура - обработчик оповещения передачи звонка
//
// Параметры:
//	СтруктураКонтакта		- Структура	- Структура, содержащая данные звонка
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
Процедура ВыполнитьПередатьЗвонок(СтруктураКонтакта, ДополнительныеПараметры) Экспорт
	Если СтруктураКонтакта = Неопределено Тогда Возврат; КонецЕсли;
	ТекЗвонок = ДополнительныеПараметры.ТекущийЗвонок;
	ПолеВводаНомера = СтруктураКонтакта.НомерТелефона;
	сфпПанельУправления.RedirectCall(ТекЗвонок.LineName, ТекЗвонок.hCall, ПолеВводаНомера, "");
	УдалитьПропущенныйЗвонок(ТекЗвонок.hCall);
КонецПроцедуры // ВыполнитьПередатьЗвонок()

&НаКлиенте
// Процедура - обработчик оповещения переключения звонка
//
// Параметры:
//	СтруктураКонтакта		- Структура	- Структура, содержащая данные звонка
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
Процедура ВыполнитьПереключитьЗвонок(СтруктураКонтакта, ДополнительныеПараметры) Экспорт
	Если СтруктураКонтакта = Неопределено Тогда Возврат; КонецЕсли;
	ТекЗвонок = ДополнительныеПараметры.ТекущийЗвонок;
	ПолеВводаНомера = СтруктураКонтакта.НомерТелефона;
	ИдентификаторПереводимогоЗвонка = ТекЗвонок.hCall;
	сфпПанельУправления.StartTransferCall(ТекЗвонок.LineName, ТекЗвонок.hCall, ПолеВводаНомера, "");
КонецПроцедуры // ВыполнитьПереключитьЗвонок()
	
&НаКлиенте
// Процедура открывает форму адресной книги для выбора контакта
//
// Параметры:
//	ПереводЗвонка			- Булево	- Признак перевода звонка
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
// Возвращаемое значение:
//	Структура	- Структура выбранного контакта
//
Функция ВыбратьКонтактИзАдреснойКниги(ПереводЗвонка, ДополнительныеПараметры)
	ПараметрыФормы = Новый Структура;
	Если ПереводЗвонка Тогда
		ПараметрыФормы.Вставить("ТекущийСправочник", "Пользователи");
	КонецЕсли;	
	ОповещениеВыбора = Новый ОписаниеОповещения(ДополнительныеПараметры.ИмяОповещения, ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.сфпАдреснаяКнига", ПараметрыФормы, ЭтотОбъект, , ВариантОткрытияОкна.ОтдельноеОкно, , ОповещениеВыбора);
КонецФункции // ВыбратьКонтактИзАдреснойКниги()

&НаКлиенте
// Процедура управляет видимостью звонков
//
// Параметры:
//	Нет.
//
Процедура ОбновитьОтображениеЗвонков()
	Если Звонки.Количество() = 0 Тогда
		Элементы.ГруппаСтраницыЗвонков.ТекущаяСтраница = Элементы.ГруппаСтраницыЗвонков.ПодчиненныеЭлементы.ГруппаПропущенныеЗвонки;
		Элементы.ПропущенныеЗвонки.Обновить();
	Иначе	
		Элементы.ГруппаСтраницыЗвонков.ТекущаяСтраница = Элементы.ГруппаСтраницыЗвонков.ПодчиненныеЭлементы.ГруппаЗвонки;
		Элементы.Звонки.Обновить();
	КонецЕсли;	
КонецПроцедуры // ОбновитьОтображениеЗвонков()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "Звонки"
//
Процедура ЗвонкиПриАктивизацииСтроки(Элемент)
	ИзменитьДоступностьКнопок();
КонецПроцедуры // ЗвонкиПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "Выбор" табличной части "ПропущенныеЗвонки"
//
Процедура ПропущенныеЗвонкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	Контакт			= ТД.Клиент;
	НомерТелефона	= ТД.НомерТелефона;
	hCall			= ТД.hCall;
	Если ТипЗнч(Контакт) = Тип("Строка") Тогда
		Контакт = Неопределено;
	КонецЕсли;	
	сфпСофтФонПроКлиент.сфпПозвонить(НомерТелефона, Контакт);
	УдалитьПропущенныйЗвонок(hCall);
КонецПроцедуры // ПропущенныеЗвонкиВыбор()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличной части "Звонки"
//
Процедура ЗвонкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // ЗвонкиПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличной части "Звонки"
//
Процедура ЗвонкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // ЗвонкиПередУдалением()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
// Процедура - обработчик команды формы "АдреснаяКнига"
//
Процедура АдреснаяКнига(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяОповещения", "ВыбратьАдреснаяКнига");
	ВыбратьКонтактИзАдреснойКниги(Ложь, ДополнительныеПараметры);
КонецПроцедуры // АдреснаяКнига()

&НаКлиенте       
// Процедура - обработчик команды формы Hold"
//
Процедура HoldUnHold(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	ТекЗвонок = ОпределитьТекущийЗвонок();
	Если ТекЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	Если ТекЗвонок.State = 10 Тогда 
		Элементы.HoldUnHold.Заголовок	= "Hold";
		Элементы.HoldUnHold.Картинка	= БиблиотекаКартинок.сфпHold;
		сфпПанельУправления.UnHoldCall(ТекЗвонок.LineName, ТекЗвонок.hCall);
	Иначе	
		Элементы.HoldUnHold.Заголовок	= "UnHold";
		Элементы.HoldUnHold.Картинка	= БиблиотекаКартинок.сфпОтветить;
		сфпПанельУправления.HoldCall(ТекЗвонок.LineName, ТекЗвонок.hCall);
	КонецЕсли;	
КонецПроцедуры // HoldUnHold()

&НаКлиенте
// Процедура - обработчик команды формы "ПозвонитьПоНомеру"
//
Процедура ПозвонитьПоНомеру(Команда)
	Если сфпПанельУправления = Неопределено Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(ПолеВводаНомера) Тогда
		Возврат;
	ИначеЕсли ПолеВводаНомера = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер() Тогда
		Возврат;
	КонецЕсли;
	НомерНаЗвонок = ПолеВводаНомера;
	сфпСофтФонПроКлиент.сфпПозвонить(НомерНаЗвонок);
КонецПроцедуры // ПозвонитьПоНомеру()

&НаКлиенте
// Процедура - обработчик команды формы "ОтветитьНаЗвонок"
//
Процедура ОтветитьНаЗвонок(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	ТекЗвонок = ОпределитьТекущийЗвонок();
	Если ТекЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	сфпПанельУправления.AnswerCall(ТекЗвонок.LineName, ТекЗвонок.hCall);
КонецПроцедуры // ОтветитьНаЗвонок()

&НаКлиенте
// Процедура - обработчик команды формы "ОтветитьНаЗвонок"
//
Процедура ЗавершитьЗвонок(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	ТекЗвонок = ОпределитьТекущийЗвонок();
	Если ТекЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	Если ИдентификаторПереводимогоЗвонка = 0 Тогда
		// Завершаем звонок
		сфпПанельУправления.DropCall(ТекЗвонок.LineName, ТекЗвонок.hCall);
	Иначе
		// Отменяем перевод звонка
		сфпПанельУправления.CancelTransferCall(ТекЗвонок.LineName, ИдентификаторПереводимогоЗвонка, "");
	КонецЕсли;	
	ИдентификаторПереводимогоЗвонка = 0;
КонецПроцедуры // ЗавершитьЗвонок()

&НаКлиенте
// Процедура - обработчик команды формы "ПередатьЗвонок"
//
Процедура ПередатьЗвонок(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	ТекЗвонок = ОпределитьТекущийЗвонок();
	Если ТекЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	Если ПустаяСтрока(ПолеВводаНомера) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущийЗвонок", ТекЗвонок);
		ДополнительныеПараметры.Вставить("ИмяОповещения", "ВыполнитьПередатьЗвонок");
		ВыбратьКонтактИзАдреснойКниги(Истина, ДополнительныеПараметры);
	Иначе
		СтруктураКонтакта = Новый Структура;
		СтруктураКонтакта.Вставить("НомерТелефона", ПолеВводаНомера);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущийЗвонок", ТекЗвонок);
		ВыполнитьПередатьЗвонок(СтруктураКонтакта, ДополнительныеПараметры);	
	КонецЕсли;	
КонецПроцедуры // ПередатьЗвонок()

&НаКлиенте
// Процедура - обработчик команды формы "ПереключитьЗвонок"
//
Процедура ПереключитьЗвонок(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	ТекЗвонок = ОпределитьТекущийЗвонок();
	Если ТекЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	Если ПустаяСтрока(ПолеВводаНомера) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущийЗвонок", ТекЗвонок);
		ДополнительныеПараметры.Вставить("ИмяОповещения", "ВыполнитьПереключитьЗвонок");
		ВыбратьКонтактИзАдреснойКниги(Истина, ДополнительныеПараметры);
	Иначе
		СтруктураКонтакта = Новый Структура;
		СтруктураКонтакта.Вставить("НомерТелефона", ПолеВводаНомера);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущийЗвонок", ТекЗвонок);
		ВыполнитьПереключитьЗвонок(СтруктураКонтакта, ДополнительныеПараметры);		
	КонецЕсли;	
КонецПроцедуры // ПереключитьЗвонок()

&НаКлиенте
// Процедура - обработчик команды формы "ПодтвердитьПереводЗвонка"
//
Процедура ПодтвердитьПереводЗвонка(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	ТекЗвонок = ОпределитьТекущийЗвонок();
	Если ТекЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	Если ИдентификаторПереводимогоЗвонка > 0 Тогда
		// Подтверждаем перевод звонка
		сфпПанельУправления.FinishTransferCall(ТекЗвонок.LineName, ИдентификаторПереводимогоЗвонка, "");
		ИдентификаторПереводимогоЗвонка = 0;
	КонецЕсли;
КонецПроцедуры // ПодтвердитьПереводЗвонка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии"
//
Процедура ПриОткрытии(Отказ)
	Элементы.НадписьЛинияПодключения.Заголовок				= НСтр("ru='Линия не выбрана'");
	Элементы.НадписьСостояниеПодключения.Заголовок			= НСтр("ru='Не подключен'");
	Элементы.КартинкаКлиентСостояниеПодключения.Картинка	= БиблиотекаКартинок.сфпКлиентОтключен;
	#Если ВебКлиент Тогда
	Отказ = Истина;
	Возврат;
	#Иначе
	Если сфпПанельУправления = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	// Сворачиваем внешнюю панель
	сфпПанельУправления.PanelHide();
	// Оповещаем внешнюю панель о работе в скрытом режиме
	УстановитьСкрытыйРежим();
	// Устанавливаем видимость панели пропущенных звонков
	ОбновитьОтображениеЗвонков();
	LocalPhoneNum = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер();
	Если ЗначениеЗаполнено(LocalPhoneNum) Тогда
		Элементы.НадписьЛинияПодключения.Заголовок				= НСтр("ru='Внутренний номер: '") + LocalPhoneNum;
		Элементы.НадписьСостояниеПодключения.Заголовок			= НСтр("ru='Готов к работе'");
		Элементы.КартинкаКлиентСостояниеПодключения.Картинка	= БиблиотекаКартинок.сфпКлиентПодключен;
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения"
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "СофтФон_ЗакрытьВнутреннююПанель" Тогда
		Закрыть();
	ИначеЕсли ИмяСобытия = "СофтФон_ОбновитьЗвонок" Тогда
		// Оповещаем внешнюю панель о работе в скрытом режиме
		УстановитьСкрытыйРежим();
		// Обновляем или создаем звонок на панели
		ДобавитьОбновитьЗвонок(Параметр);
		ИзменитьДоступностьКнопок();
		ОбновитьОтображениеЗвонков();		
	ИначеЕсли ИмяСобытия = "СофтФон_УдалитьЗвонок" Тогда
		// Оповещаем внешнюю панель о работе в скрытом режиме
		УстановитьСкрытыйРежим();
		// Удаляем звонок
		УдалитьЗвонок(Параметр); 
		ИзменитьДоступностьКнопок();
		ОбновитьОтображениеЗвонков();		
	КонецЕсли;	
КонецПроцедуры // ОбработкаОповещения()
