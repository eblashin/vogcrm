
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.ВариантКлассификации = "вогЮридическиеЛица" Тогда
		ИмяСписка 		= "СписокЮридическиеЛица";
		ОсновнаяТаблица = "Справочник.вогЮридическиеЛица";
	ИначеЕсли Параметры.ВариантКлассификации = "вогТорговыеТочки" Тогда
		ИмяСписка 		= "СписокТорговыеТочки";
		ОсновнаяТаблица = "Справочник.вогТорговыеТочки";
	ИначеЕсли Параметры.ВариантКлассификации = "КонтактныеЛицаПартнеров" Тогда
		ИмяСписка 		= "СписокКонтактныеЛицаПартнеров";
		ОсновнаяТаблица = "Справочник.КонтактныеЛицаПартнеров";
	ИначеЕсли Параметры.ВариантКлассификации = "Партнеры" Тогда
		ИмяСписка 		= "СписокПартнеры";
		ОсновнаяТаблица = "Справочник.Партнеры";
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущийВариантСписка = "ОсновнойВариант" + ИмяСписка;
	СформироватьЭлементыУправленияСписком();
	
	Параметры.Свойство("ОтборКомпоновкиДанных", ОтборКомпоновкиДанных);
	
	ОбновитьДанные(Истина);
	Если ЗначениеЗаполнено(Параметры.СтруктураЗначенийКлассификаторов) Тогда
		
		ЛогическоеВыражениеОтбораКлассификаторов = Параметры.СтруктураЗначенийКлассификаторов.ЛогическоеВыражение;
		УстановитьОтборПоКлассификаторам(
			Параметры.СтруктураЗначенийКлассификаторов.ЗначенияКлассификаторов,
			Параметры.СтруктураЗначенийКлассификаторов.ЗначенияРеквизитов);
		
		ОбновитьДанные();
		
	КонецЕсли;
	
	Если Параметры.Свойство("МножественныйВыбор", МножественныйВыбор)
		И Параметры.МножественныйВыбор = Истина Тогда
		
		Элементы.Список.РежимВыделения 		= РежимВыделенияТаблицы.Множественный;
		Элементы.Список.МножественныйВыбор 	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы_Список

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОповеститьОВыборе(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ОповеститьОВыборе(Значение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьОтборПоКлассификаторам(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Принадлежность", 			ОсновнаяТаблица);
	ПараметрыФормы.Вставить("МассивЗначений", 			ОтборСписокЗначенийКлассификаторов.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("МассивЗначенийРеквизитов", ОтборСписокЗначенийРеквизитовКлассификаторов.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("ЛогическоеВыражение", 		ЛогическоеВыражениеОтбораКлассификаторов);
	
	Оповещение = Новый ОписаниеОповещения("НастроитьОтборПоКлассификаторамЗавершение", ЭтотОбъект);
	ОткрытьФорму(
		"ОбщаяФорма.CRM_ФормаПодбораЗначенийКлассификаторов",
		ПараметрыФормы,
		ЭтотОбъект, УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборПоКлассификаторамЗавершение(СтруктураЗначенийКлассификаторов, ДополнительныеПараметры) Экспорт
	
	Если СтруктураЗначенийКлассификаторов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЛогическоеВыражениеОтбораКлассификаторов = СтруктураЗначенийКлассификаторов.ЛогическоеВыражение;
	УстановитьОтборПоКлассификаторам(
		СтруктураЗначенийКлассификаторов.ЗначенияКлассификаторов, СтруктураЗначенийКлассификаторов.ЗначенияРеквизитов);
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтбор(Команда)
	
	ОтборСписокЗначенийКлассификаторов.Очистить();
	ОтборСписокЗначенийРеквизитовКлассификаторов.Очистить();
	ЛогическоеВыражениеОтбораКлассификаторов = "";
	УстановитьОтборПоКлассификаторам();
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВариантСпискаПриИзменении(Команда)
	
	ОтборСписокЗначенийКлассификаторов.Очистить();
	ОтборСписокЗначенийРеквизитовКлассификаторов.Очистить();
	ЛогическоеВыражениеОтбораКлассификаторов = "";
	ИспользуетсяОтборПоКлассификатору = Ложь;
	
	ТекущийВариантСписка = Команда.Имя;
	УстановитьТекущийВариантСписка(ЭтотОбъект, ТекущийВариантСписка);
	ОбновитьДанные(Истина);
	
КонецПроцедуры

// ++ VOG Солодов В.В. 08.06.2021 DEV-239
&НаКлиенте
Процедура НастроитьСписок(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСКДВоВременномХранилище", URLСхемы);
	ПараметрыФормы.Вставить("ВозвращатьСтруктуруСДанными", 	Истина);
	ПараметрыФормы.Вставить("ОтборКомпоновкиДанных", 		Компоновщик.Настройки.Отбор);
	
	ОповещениеОЗавершении 	= Новый ОписаниеОповещения("НастроитьСписокЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.CRM_ОтборКомпоновкиДанных",
		ПараметрыФормы,
		,
		,
		,
		,
		ОповещениеОЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСписокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Отбор") Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Компоновщик.Настройки.Отбор, Результат.Отбор);
	Иначе
		Компоновщик.Настройки.Отбор.Элементы.Очистить();
	КонецЕсли;
	УстановитьСлужебныеНастройкиСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	УстановитьСлужебныеНастройкиСписка();
	
КонецПроцедуры
// -- VOG Солодов В.В. 08.06.2021 DEV-239

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьДанные(ПересоздатьКолонки = Ложь)
	
	Если ТекущийВариантСписка = "ОсновнойВариант" + ИмяСписка Тогда
		ВариантСсылка 	= Справочники.вогВариантыСписковУправленияКлассификацией.ПустаяСсылка();
		ИмяМакета 		= "НаборДанных" + ИмяСписка;
	Иначе
		ВариантСсылка 	= СсылкаВариантаСписка(ТекущийВариантСписка);
		ИмяМакета 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантСсылка, "СхемаКомпоновкиДанных", Истина);
	КонецЕсли;
	
	СхемаИНастройки =
		Справочники.вогВариантыСписковУправленияКлассификацией.ОписаниеИСхемаКомпоновкиДанныхНастройкиПоИмениМакета(
			ВариантСсылка, ИмяМакета);
	
	Если ТипЗнч(ОтборКомпоновкиДанных) = Тип("ОтборКомпоновкиДанных") Тогда
		
		Для Каждого ЭлементОтбора Из ОтборКомпоновкиДанных.Элементы Цикл
			
			НовыйЭлементОтбора = СхемаИНастройки.НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(
				Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора,, "ЛевоеЗначение");
			
			Если ИмяСписка = "СписокПартнеры"
				И НРег(Строка(ЭлементОтбора.ЛевоеЗначение)) = НРег("ТипОтношений") Тогда
				
				ТекстЗапроса = СтрЗаменить(
					СхемаИНастройки.СхемаКомпоновкиДанных.НаборыДанных[0].Запрос,
					"И НЕ СправочникПартнеры.Поставщик",
					"");
				
				СхемаИНастройки.СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапроса;
				НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка.вогТипыОтношений.ТипОтношений");
				
			Иначе
				НовыйЭлементОтбора.ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяСписка = "СписокПартнеры" Тогда
		ИмяПоля = "Ссылка.вогРозничный";
	Иначе
		ИмяПоля = "Ссылка.Розничный";
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 08.06.2021 DEV-239
	// До изменения
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
	//	СхемаИНастройки.НастройкиКомпоновкиДанных.Отбор,
	//	ИмяПоля,
	//	Ложь,
	//	ВидСравненияКомпоновкиДанных.Равно);
	// -- VOG Солодов В.В. 08.06.2021 DEV-239
	
	ТекстЗапроса = СфорироватьЗапросСписка(СхемаИНастройки.СхемаКомпоновкиДанных.НаборыДанных[0].Запрос);
	СхемаИНастройки.СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапроса;
	
	Если ПересоздатьКолонки тогда
		URLСхемы = ПоместитьВоВременноеХранилище(СхемаИНастройки.СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
		Компоновщик.Инициализировать(ИсточникНастроек);
		Компоновщик.ЗагрузитьНастройки(СхемаИНастройки.НастройкиКомпоновкиДанных);
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 08.06.2021 DEV-239
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Компоновщик.ФиксированныеНастройки.Отбор,
		ИмяПоля,
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно);
	// -- VOG Солодов В.В. 08.06.2021 DEV-239
	
	Если ПересоздатьКолонки Тогда
		
		ЭлементыДляУдаления = Новый СписокЗначений;
		Для Каждого ЭлементКолонка Из Элементы.Список.ПодчиненныеЭлементы Цикл
			// ++ VOG Солодов В.В. 04.12.2020 CRM-1096
			Если ЭлементКолонка.Имя = "СписокСсылка" Тогда
				Если Не ИмяСписка = "СписокЮридическиеЛица" Тогда
					ЭлементКолонка.Видимость = Ложь;
				КонецЕсли;
			Иначе
				ЭлементыДляУдаления.Добавить(ЭлементКолонка);
			КонецЕсли;
			// До изменения
			//ЭлементыДляУдаления.Добавить(ЭлементКолонка);
			// -- VOG Солодов В.В. 04.12.2020 CRM-1096
		КонецЦикла;
		
		Для Каждого УдаляемыйЭлемент Из ЭлементыДляУдаления Цикл
			Элементы.Удалить(УдаляемыйЭлемент.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса 				= ТекстЗапроса;
	СвойстваСписка.ОсновнаяТаблица 				= ОсновнаяТаблица;
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
	Список.КомпоновщикНастроек.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
	
	// ++ VOG Солодов В.В. 04.12.2020 CRM-1096
	ИсключаемыеПоля = Новый Массив;
	ИсключаемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Ссылка"));
	ИсключаемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("ЭтоГруппа"));
	ИсключаемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("ЗаполненностьИнформации"));
	// -- VOG Солодов В.В. 04.12.2020 CRM-1096
	
	Если ПересоздатьКолонки Тогда
		
		Счетчик = 0; // VOG Солодов В.В. 09.12.2020 CRM-1096
		
		Для Каждого ВыбранноеПоле Из СхемаИНастройки.НастройкиКомпоновкиДанных.Выбор.Элементы Цикл
			
			// ++ VOG Солодов В.В. 04.12.2020 CRM-1096
			Если Не ИсключаемыеПоля.Найти(ВыбранноеПоле.Поле) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			// -- VOG Солодов В.В. 04.12.2020 CRM-1096
			
			Если ВыбранноеПоле.Использование Тогда
				
				// ++ VOG Солодов В.В. 09.12.2020 CRM-1096
				Счетчик 	= Счетчик + 1;
				ИмяКолонки 	= СтрШаблон("Поле_%1%2", ИмяСписка, Формат(Счетчик, "ЧГ="));
				
				НоваяКолонкаТаблицы = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), Элементы.Список);
				НоваяКолонкаТаблицы.Вид 		= ВидПоляФормы.ПолеНадписи;
				НоваяКолонкаТаблицы.Заголовок 	= ВыбранноеПоле.Заголовок;
				НоваяКолонкаТаблицы.ПутьКДанным = СтрШаблон("Список.%1", ВыбранноеПоле.Поле);
				// До изменения
				//ИмяКолонки = Строка(ВыбранноеПоле.Поле);
				//НоваяКолонкаТаблицы = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), Элементы.Список);
				//НоваяКолонкаТаблицы.ПутьКДанным = "Список." + ИмяКолонки;
				// -- VOG Солодов В.В. 09.12.2020 CRM-1096
				
				// ++ VOG Солодов В.В. 04.12.2020 CRM-1096
				// До изменения
				//Если ИмяКолонки = "Ссылка" Или ИмяКолонки = "ЗаполненностьИнформации" Тогда
				//	НоваяКолонкаТаблицы.Видимость = Ложь;
				//КонецЕсли;
				// -- VOG Солодов В.В. 04.12.2020 CRM-1096
				
			КонецЕсли;
		КонецЦикла;
		
		// ++ VOG Солодов В.В. 04.12.2020 CRM-1096
		Если ТекущийВариантСписка = "ОсновнойВариант" + ИмяСписка Тогда
			ДобавитьКолонкиХарактеристик(ОсновнаяТаблица);
		КонецЕсли;
		// -- VOG Солодов В.В. 04.12.2020 CRM-1096
		
	КонецЕсли;
	
	// ++ VOG Солодов В.В. 08.06.2021 DEV-327
	Список.Порядок.ИдентификаторПользовательскойНастройки = Формат(Новый УникальныйИдентификатор);
	// -- VOG Солодов В.В. 08.06.2021 DEV-327
	
КонецПроцедуры

// ++ VOG Солодов В.В. 04.12.2020 CRM-1096
&НаСервере
Процедура ДобавитьКолонкиХарактеристик(ОсновнаяТаблица)
	
	ТаблицаКлассификаторов = ПолучитьТаблицуВыводимыхХарактеристик(ОсновнаяТаблица);
	
	ПолеСсылка = Список.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы.Найти("Ссылка");
	
	Если ПолеСсылка = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для Индекс = 0 По ТаблицаКлассификаторов.Количество() - 1 Цикл
		
		ИмяКолонки = ТаблицаКлассификаторов[Индекс].ИмяКолонки;
		
		Если ПолеСсылка.Элементы.Найти(ИмяКолонки) <> Неопределено Тогда
			
			ИмяРеквизита = СтрШаблон("Список_Классификатор_%1", Строка(Индекс + 1));
			
			Если Элементы.Найти(ИмяРеквизита) = Неопределено Тогда
				
				НоваяКолонкаТаблицы = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.Список);
				НоваяКолонкаТаблицы.Заголовок = ТаблицаКлассификаторов[Индекс].Заголовок; 
				
				НоваяКолонкаТаблицы.ПутьКДанным = СтрШаблон("Список.%1", ИмяКолонки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуВыводимыхХарактеристик(ИмяТаблицыПринадлежность)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	CRM_КлассификаторыПринадлежность.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_КлассификаторыОдиночное
		|ИЗ
		|	ПланВидовХарактеристик.CRM_Классификаторы.Принадлежность КАК CRM_КлассификаторыПринадлежность
		|ГДЕ
		|	CRM_КлассификаторыПринадлежность.ИмяТаблицы = &ИмяТаблицы
		|	И CRM_КлассификаторыПринадлежность.Ссылка.ВыводитьВФормеСписка = ИСТИНА
		|	И CRM_КлассификаторыПринадлежность.Ссылка.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	CRM_КлассификаторыПринадлежность.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_КлассификаторыДругое
		|ИЗ
		|	ПланВидовХарактеристик.CRM_Классификаторы.Принадлежность КАК CRM_КлассификаторыПринадлежность
		|ГДЕ
		|	CRM_КлассификаторыПринадлежность.ИмяТаблицы = &ИмяТаблицы
		|	И CRM_КлассификаторыПринадлежность.Ссылка.ВыводитьВФормеСписка = ИСТИНА
		|	И НЕ CRM_КлассификаторыПринадлежность.Ссылка.ВидОтображения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыОтображенияКлассификаторов.ОдиночноеЗначение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""Ссылка.["" + ВТ_КлассификаторыОдиночное.Ссылка.Наименование + ""]"" КАК ИмяКолонки,
		|	ВТ_КлассификаторыОдиночное.Ссылка.Наименование КАК Заголовок
		|ИЗ
		|	ВТ_КлассификаторыОдиночное КАК ВТ_КлассификаторыОдиночное
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Ссылка.["" + ВЫРАЗИТЬ(CRM_ЗначенияКлассификаторов.Владелец КАК ПланВидовХарактеристик.CRM_Классификаторы).Наименование + "" "" + CRM_ЗначенияКлассификаторов.Наименование + ""]"",
		|	CRM_ЗначенияКлассификаторов.Наименование
		|ИЗ
		|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлассификаторыДругое КАК ВТ_КлассификаторыДругое
		|		ПО CRM_ЗначенияКлассификаторов.Владелец = ВТ_КлассификаторыДругое.Ссылка";
	
	Если ИмяТаблицыПринадлежность = "Справочник.вогТорговыеТочки" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Ссылка.КИ_"" + ВидыКонтактнойИнформации.Наименование,
		|	ВидыКонтактнойИнформации.Наименование
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Родитель.ИмяПредопределенныхДанных = &ВладелецИмя
		|	И ВидыКонтактнойИнформации.ИмяПредопределенныхДанных = ""Месторасположение""";
		
		Запрос.УстановитьПараметр("ВладелецИмя", СтрЗаменить(ИмяТаблицыПринадлежность, ".", ""));	
		
	КонецЕсли;	
		
	Запрос.Текст = ТекстЗапроса;	
		
	Запрос.УстановитьПараметр("ИмяТаблицы", ИмяТаблицыПринадлежность);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
// -- VOG Солодов В.В. 04.12.2020 CRM-1096

&НаСервере
Функция СфорироватьЗапросСписка(Знач ИсходныйТекстЗапроса)
	
	// ++ VOG Солодов В.В. 08.06.2021 DEV-239
	ОбработатьИсходныйТекстЗапроса(ИсходныйТекстЗапроса);
	// -- VOG Солодов В.В. 08.06.2021 DEV-239
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК Объект,
	|	ИСТИНА КАК ИспользуетсяОтборПоКлассификатору,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора) КАК КоличествоЗначенийКлассификатора
	|ПОМЕСТИТЬ ОтборПоКлассификатору
	|ИЗ
	|	РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	|ГДЕ
	|	НЕ CRM_ОбъектыЗначенийКлассификаторов.ДатаВключения ЕСТЬ NULL
	|{ГДЕ
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.* КАК ЗначениеКлассификатора,
	|	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеРеквизита.* КАК ЗначениеРеквизита}
	|
	|СГРУППИРОВАТЬ ПО
	|	CRM_ОбъектыЗначенийКлассификаторов.Объект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	ИспользуетсяОтборПоКлассификатору,
	|	КоличествоЗначенийКлассификатора
	|;
	|");
	ТекстыЗапроса.Добавить(ИсходныйТекстЗапроса);
	ТекстыЗапроса.Добавить(
	"{ГДЕ
	|(Ссылка В
	|		(ВЫБРАТЬ
	|			ОтборПоКлассификатору.Объект
	|		ИЗ
	|			ОтборПоКлассификатору КАК ОтборПоКлассификатору
	|		ГДЕ
	|			ОтборПоКлассификатору.ИспользуетсяОтборПоКлассификатору = &ИспользуетсяОтборПоКлассификатору
	|			И ВЫБОР
	|				КОГДА &ЛогическоеВыражение = ""ИЛИ""
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ОтборПоКлассификатору.КоличествоЗначенийКлассификатора = &КоличествоЗначенийКлассификатора
	|			КОНЕЦ))}
	|");
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, Символы.ПС);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// ++ VOG Солодов В.В. 08.06.2021 DEV-239
&НаСервере
Процедура УстановитьСлужебныеНастройкиСписка()
	
	Если ИмяСписка = "СписокПартнеры" Тогда
		ИмяПоля = "Ссылка.вогРозничный";
	Иначе
		ИмяПоля = "Ссылка.Розничный";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Компоновщик.Настройки.Отбор, ИмяПоля);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Компоновщик.ФиксированныеНастройки.Отбор,
		ИмяПоля,
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно);
	
	Список.КомпоновщикНастроек.ЗагрузитьНастройки(Компоновщик.ПолучитьНастройки());
	Список.Порядок.ИдентификаторПользовательскойНастройки = Формат(Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Если это список партнеров, торговых точек или юридических лиц,
// дополним основной текст запроса соединением с РС вогМенеджерыОбъектов
// для возможности отбора по менеджерам
&НаСервереБезКонтекста
Процедура ОбработатьИсходныйТекстЗапроса(ИсходныйТекстЗапроса)
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(ИсходныйТекстЗапроса);
	
	КолонкаСсылка = Схема.ПакетЗапросов[0].Колонки.Найти("Ссылка");
	
	Если ТипЗнч(КолонкаСсылка) = Тип("КолонкаСхемыЗапроса") Тогда
		
		УсловиеСоединения 		= "";
		ЭтоСложноеСоединение 	= Ложь;
		
		Если КолонкаСсылка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.вогТорговыеТочки")) Тогда
			УсловиеСоединения 		= "СправочникТорговыеТочки.Ссылка = ТаблицаМенеджеры.Владелец";
		ИначеЕсли  КолонкаСсылка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.вогЮридическиеЛица")) Тогда
			УсловиеСоединения 		= "СправочниквогЮридическиеЛица.Ссылка = ТаблицаМенеджеры.Владелец";
		ИначеЕсли  КолонкаСсылка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Партнеры")) Тогда
			ЭтоСложноеСоединение 	= Истина;
		КонецЕсли;
		
		Если Не ПустаяСтрока(УсловиеСоединения) Или ЭтоСложноеСоединение Тогда
			
			Оператор = Схема.ПакетЗапросов[0].Операторы[0];
			Оператор.ВыбиратьРазличные = Истина;
			
			ОсновнойИсточник = Оператор.Источники[0];
			
			Если Не ПустаяСтрока(УсловиеСоединения) Тогда
				
				ДополнительныйИсточник = Оператор.Источники.Добавить("РегистрСведений.вогМенеджерыОбъектов", "ТаблицаМенеджеры");
				
			ИначеЕсли ЭтоСложноеСоединение Тогда
				
				ДополнительныйИсточник = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "ВложенныйЗапрос");
				
				ДоступныеТаблицы = Новый Соответствие;
				ДоступныеТаблицы.Вставить("ТаблицаТорговыеТочки", "Справочник.вогТорговыеТочки");
				ДоступныеТаблицы.Вставить("ТаблицаЮридическиеЛица", "Справочник.вогЮридическиеЛица");
				
				ПервыйПроход = Истина;
				
				Для Каждого КлючИЗначение Из ДоступныеТаблицы Цикл
					
					Если ПервыйПроход Тогда
						
						ПервыйПроход = Ложь;
						
						ОператорВложенногоЗапроса = ДополнительныйИсточник.Источник.Запрос.Операторы[0];
						ОператорВложенногоЗапроса.ВыбиратьРазличные = Истина;
						
					Иначе
						ОператорВложенногоЗапроса = ДополнительныйИсточник.Источник.Запрос.Операторы.Добавить();
					КонецЕсли;
					
					ОператорВложенногоЗапроса.ТипОбъединения = ТипОбъединенияСхемыЗапроса.Объединить;
					
					Псевдоним 			= КлючИЗначение.Ключ;
					ИмяДоступнойТаблицы = КлючИЗначение.Значение;
					
					УсловиеСоединения 	= СтрШаблон("%1.Ссылка = ТаблицаМенеджеры.Владелец", Псевдоним);
					
					ПерваяТаблица 	= ОператорВложенногоЗапроса.Источники.Добавить(ИмяДоступнойТаблицы, Псевдоним);
					ВтораяТаблица 	= ОператорВложенногоЗапроса.Источники.Добавить(
						"РегистрСведений.вогМенеджерыОбъектов", "ТаблицаМенеджеры");
					ПерваяТаблица.Соединения.Добавить(ВтораяТаблица, УсловиеСоединения);
					
					ОператорВложенногоЗапроса.ВыбираемыеПоля.Добавить(СтрШаблон("%1.Партнер", Псевдоним));
					ОператорВложенногоЗапроса.ВыбираемыеПоля.Добавить("ТаблицаМенеджеры.Менеджер");
					
				КонецЦикла;
				
				УсловиеСоединения = "СправочникПартнеры.Ссылка = ВложенныйЗапрос.Партнер";
				
			КонецЕсли;
			
			ОсновнойИсточник.Соединения.Добавить(ДополнительныйИсточник, УсловиеСоединения);
			
			ПолеМенеджер = ДополнительныйИсточник.Источник.ДоступныеПоля.Найти("Менеджер");
			Оператор.ВыраженияОтбораКомпоновкиДанных.Добавить(ПолеМенеджер);
			
			// Т.к. в запрос добавлено выражение "РАЗЛИЧНЫЕ", необходимо все поля
			// запроса с типом Строка неограниченной длины привести к ограниченной длине
			ОписаниеСтроки = ОбщегоНазначения.ОписаниеТипаСтрока(0);
			
			Для Каждого ВыбранноеПоле Из Оператор.ВыбираемыеПоля Цикл
				
				Если ВыбранноеПоле.ТипЗначения() = ОписаниеСтроки Тогда
					
					ШаблонВыражения = "ВЫРАЗИТЬ(%1 КАК СТРОКА(1000))";
					ТекстВыражения 	= СтрШаблон(ШаблонВыражения, ВыбранноеПоле);
					
					ИндексПоля 		= Оператор.ВыбираемыеПоля.Индекс(ВыбранноеПоле);
					Оператор.ВыбираемыеПоля.Установить(ИндексПоля, Новый ВыражениеСхемыЗапроса(ТекстВыражения));
					
				КонецЕсли;
				
			КонецЦикла;
			
			ИсходныйТекстЗапроса = Схема.ПолучитьТекстЗапроса();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// -- VOG Солодов В.В. 08.06.2021 DEV-239

&НаСервереБезКонтекста
Функция ИдентификаторЭлемента(Ссылка)
	
	Возврат СтрЗаменить(Ссылка.УникальныйИдентификатор(), "-", "_");	
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНайтиКоманду(Форма,
	ИмяКоманды, 
	Действие,
	ОтображениеКнопки = Неопределено,
	Картинка = Неопределено,
	Подсказка = Неопределено)
	
	Команда = Форма.Команды.Найти(ИмяКоманды);
	Если Команда = Неопределено Тогда
		Команда 			= Форма.Команды.Добавить(ИмяКоманды);
		Команда.Действие	= Действие;
		
		Если ОтображениеКнопки <> Неопределено Тогда
			Команда.Отображение	= ОтображениеКнопки;
		КонецЕсли;
		
		Если Картинка <> Неопределено Тогда
			Команда.Картинка = Картинка;
		КонецЕсли;
		
		Если НЕ Подсказка = Неопределено Тогда
			Команда.Подсказка = Подсказка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Команда;
	
КонецФункции // СоздатьНайтиКоманду()

&НаСервереБезКонтекста
Функция СоздатьНайтиКнопку(Форма,
	ИмяКнопки, 
	ИмяКоманды,
	Заголовок = "",
	Родитель = Неопределено,
	Ширина = 0, 
	Высота = 0);  
	
	Элементы = Форма.Элементы;	
	
	Кнопка = Элементы.Найти(ИмяКнопки);
	Если Кнопка = Неопределено Тогда
		Кнопка 			  = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ?(Родитель = Неопределено, Форма, Родитель));
		Кнопка.Заголовок  = Заголовок;
		Кнопка.ИмяКоманды = ИмяКоманды;
		Кнопка.Ширина 	  = Ширина;
		Кнопка.Высота 	  = Высота;
		
	КонецЕсли;
	
	Возврат Кнопка;
	
КонецФункции // СоздатьНайтиКнопку()

&НаСервере
Процедура УстановитьОтборПоКлассификаторам(Знач ЗначенияКлассификаторов = Неопределено, Знач ЗначенияРеквизитов = Неопределено)
	
	//Значения
	Если ЗначенияКлассификаторов = Неопределено Тогда
		ЗначенияКлассификаторов = ОтборСписокЗначенийКлассификаторов.ВыгрузитьЗначения();
	Иначе
		ОтборСписокЗначенийКлассификаторов.ЗагрузитьЗначения(ЗначенияКлассификаторов);
	КонецЕсли;
	
	//Реквизиты
	Если ЗначенияРеквизитов = Неопределено Тогда
		ЗначенияРеквизитов = ОтборСписокЗначенийРеквизитовКлассификаторов.ВыгрузитьЗначения();
	Иначе
		ОтборСписокЗначенийРеквизитовКлассификаторов.ЗагрузитьЗначения(ЗначенияРеквизитов);
	КонецЕсли;	
	
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Компоновщик.Настройки.Отбор.Элементы, "ГруппаИЛИЗначенийИРеквизитовКлассификатора", 
	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);	
	Если ЗначенияКлассификаторов.Количество() > 0 Тогда
		КоличествоЭлементовОтбора = ЗначенияКлассификаторов.Количество();
		Для Сч = 0 По КоличествоЭлементовОтбора - 1 Цикл
			ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИ.Элементы, "ГруппаИЗначенийИРеквизитовКлассификатора" + Формат(Сч, "ЧГ="), 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);	
			
			ЭлементЗначенияКлассификаторов 			= ЗначенияКлассификаторов[Сч];	
			ЭлементЗначенияРеквизитаКлассификаторов = ЗначенияРеквизитов[Сч];	
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ, 
			"ЗначениеКлассификатора", ЭлементЗначенияКлассификаторов, ВидСравненияКомпоновкиДанных.Равно);
			
			Если ТипЗнч(ЭлементЗначенияРеквизитаКлассификаторов) = Тип("Число") Тогда
				ВидСравненияСписка = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;	
			Иначе	
				ВидСравненияСписка = ВидСравненияКомпоновкиДанных.Равно;	
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаИ, 
			"ЗначениеРеквизита", ЭлементЗначенияРеквизитаКлассификаторов, ВидСравненияСписка);
		КонецЦикла;
	КонецЕсли;
	
	ИспользуетсяОтборПоКлассификатору = ЗначенияКлассификаторов.Количество() > 0;
	Если ИспользуетсяОтборПоКлассификатору тогда
		Элементы.ФормаОтключитьОтбор.Видимость = Истина;
	Иначе
		Элементы.ФормаОтключитьОтбор.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьПараметрНастройки(
		Компоновщик.Настройки.ПараметрыДанных,
		"ЛогическоеВыражение",
		ЛогическоеВыражениеОтбораКлассификаторов,
		ИспользуетсяОтборПоКлассификатору);
	УстановитьПараметрНастройки(
		Компоновщик.Настройки.ПараметрыДанных,
		"КоличествоЗначенийКлассификатора",
		ЗначенияКлассификаторов.Количество(),
		ИспользуетсяОтборПоКлассификатору);
	УстановитьПараметрНастройки(
		Компоновщик.Настройки.ПараметрыДанных,
		"ИспользуетсяОтборПоКлассификатору",
		Истина,
		ИспользуетсяОтборПоКлассификатору);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СсылкаВариантаСписка(ИмяЭлемента)
	
	МассивИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЭлемента, "__");
	ИдентификаторВарианта 	= Новый УникальныйИдентификатор(СтрЗаменить(МассивИмени[1], "_", "-"));
	
	Возврат Справочники.вогВариантыСписковУправленияКлассификацией.ПолучитьСсылку(ИдентификаторВарианта);
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрНастройки(Параметры, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметраКомпоновкиДанных = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ЗначениеПараметраКомпоновкиДанных <> Неопределено Тогда
		Если Использование И ЗначениеПараметраКомпоновкиДанных.Значение <> Значение Тогда
			ЗначениеПараметраКомпоновкиДанных.Значение = Значение;
		КонецЕсли;
		Если ЗначениеПараметраКомпоновкиДанных.Использование <> Использование Тогда
			ЗначениеПараметраКомпоновкиДанных.Использование = Использование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЭлементыУправленияСписком()
	
	//Основной вариант
	Команда = СоздатьНайтиКоманду(
		ЭтотОбъект,
		"ОсновнойВариант" + ИмяСписка,
		"Подключаемый_ВариантСпискаПриИзменении");
	
	Кнопка = СоздатьНайтиКнопку(
		ЭтотОбъект,
		Команда.Имя,
		Команда.Имя,
		НСтр("ru = 'Основной'"),
		Элементы.ГруппаКнопокСписка);
	
	//Пользовательские варианты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяСписка", 	ИмяСписка);
	Запрос.УстановитьПараметр("Автор", 		Пользователи.ТекущийПользователь());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыСписковУправленияКлассификацией.Ссылка КАК Ссылка,
	|	ВариантыСписковУправленияКлассификацией.Представление КАК Представление
	|ИЗ
	|	Справочник.вогВариантыСписковУправленияКлассификацией КАК ВариантыСписковУправленияКлассификацией
	|ГДЕ
	|	ВариантыСписковУправленияКлассификацией.ИмяСписка = &ИмяСписка
	|	И (ВариантыСписковУправленияКлассификацией.Автор = &Автор
	|			ИЛИ ВариантыСписковУправленияКлассификацией.ТолькоДляАвтора = ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Команда = СоздатьНайтиКоманду(
			ЭтотОбъект,
			"ВариантСписка__" + ИдентификаторЭлемента(Выборка.Ссылка),
			"Подключаемый_ВариантСпискаПриИзменении");
		
		Кнопка = СоздатьНайтиКнопку(
			ЭтотОбъект,
			Команда.Имя,
			Команда.Имя,
			Выборка.Представление,
			Элементы.ГруппаКнопокСписка);
		
	КонецЦикла;
	
	УстановитьТекущийВариантСписка(ЭтотОбъект, ТекущийВариантСписка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущийВариантСписка(Форма, Знач ТекущийВариантСписка)
	
	Для Каждого Элемент Из Форма.Элементы.ГруппаКнопокСписка.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Элемент = Форма.Элементы[ТекущийВариантСписка] Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент.Пометка = Ложь;
		
	КонецЦикла;
	
	Форма.Элементы[ТекущийВариантСписка].Пометка = Истина;
	Форма.Элементы.ГруппаКнопокСписка.Заголовок = Форма.Элементы[ТекущийВариантСписка].Заголовок;
	
КонецПроцедуры

#КонецОбласти
