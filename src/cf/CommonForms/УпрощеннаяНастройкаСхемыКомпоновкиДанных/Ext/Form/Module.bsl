
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Переданный в параметре адрес сохраняется в качестве адреса исходной схемы.
	АдресИсходнойСхемыКомпоновкиДанных = Параметры.АдресСхемыКомпоновкиДанных;
	УникальныйИдентификаторВладельца = Параметры.УникальныйИдентификатор;
	
	// Заголовок формы
	Заголовок = Параметры.Заголовок;
	
	ИмяТекущегоШаблонаСКД           = Параметры.ИмяШаблонаСКД;
	ВозвращатьИмяТекущегоШаблонаСКД = Параметры.ВозвращатьИмяТекущегоШаблонаСКД;
	
	// Заполнение списка шаблонов
	Если НЕ Параметры.ИсточникШаблонов = Неопределено Тогда
		
		ПолноеИмяИсточникаШаблонов = ОбщегоНазначения.ИмяТаблицыПоСсылке(Параметры.ИсточникШаблонов);
		МенеджерИсточникаШаблонов = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Параметры.ИсточникШаблонов);
		
		Для каждого МакетШаблона Из МенеджерИсточникаШаблонов.ШаблоныСхемыКомпоновкиДанных() Цикл
			
			СписокШаблонов.Добавить(МакетШаблона.Синоним, МакетШаблона.Имя);
			Элементы.ТекущийШаблонСхемыКомпоновкиДанных.СписокВыбора.Добавить(МакетШаблона.Имя, МакетШаблона.Синоним);
			
		КонецЦикла;
		
		Если ПустаяСтрока(ИмяТекущегоШаблонаСКД) Тогда
			
			Элементы.ТекущийШаблонСхемыКомпоновкиДанных.СписокВыбора.Добавить("", НСтр("ru = 'Произвольная'"));
			
		КонецЕсли;
		
		ТекущийШаблонСхемыКомпоновкиДанных = ИмяТекущегоШаблонаСКД;
		Элементы.ТекущийШаблонСхемыКомпоновкиДанных.Видимость = Истина;
		
	Иначе
		
		Элементы.ТекущийШаблонСхемыКомпоновкиДанных.Видимость = Ложь;
		
	КонецЕсли;
	
	// Исходная схема компоновки данных копируется в редактируемую схему компоновки данных.
	СкопироватьСхемуКомпоновкиДанных(АдресРедактируемойСхемыКомпоновкиДанных, АдресИсходнойСхемыКомпоновкиДанных);
	
	// Компоновщик настроек инициализируется редактируемой схемой компоновки данных.
	ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, АдресРедактируемойСхемыКомпоновкиДанных, Параметры.АдресНастроекКомпоновкиДанных);
	
	Элементы.РедактироватьСхемуКомпоновки.Видимость = Не Параметры.НеРедактироватьСхемуКомпоновкиДанных;
	Элементы.ГруппаОтбор.Видимость                  = Не Параметры.НеНастраиватьОтбор;
	Элементы.ГруппаПараметры.Видимость              = Не Параметры.НеНастраиватьПараметры;
	Элементы.ГруппаПорядок.Видимость                = Не Параметры.НеНастраиватьПорядок;
	Элементы.ГруппаУсловноеОформление.Видимость     = Не Параметры.НеНастраиватьУсловноеОформление;
	Элементы.ГруппаПоля.Видимость                   = Не Параметры.НеНастраиватьВыбор;
	//++ Бей #335
	Элементы.ГруппаПользовательскиеПоля.Видимость   = Не Параметры.НеНастраиватьПользовательскиеПоля;
	//--	
	НеПомещатьНастройкиВСхемуКомпоновкиДанных = Параметры.НеПомещатьНастройкиВСхемуКомпоновкиДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		// Получена схема из конструктора схемы компоновки данных.
		Модифицированность = Истина;
		РедактируемаяСхемаКомпоновкиДанныхМодифицированность = Истина;
		
		// Редактируемая схема компоновки данных замещается схемой, полученной из конструктора.
		БылиИзменения = Ложь;
		УстановитьСхемуКомпоновкиДанных(АдресРедактируемойСхемыКомпоновкиДанных, ВыбранноеЗначение, Истина,БылиИзменения);
		
		Если БылиИзменения Тогда
			
			Если Элементы.ТекущийШаблонСхемыКомпоновкиДанных.СписокВыбора.НайтиПоЗначению("") = Неопределено Тогда
				Элементы.ТекущийШаблонСхемыКомпоновкиДанных.СписокВыбора.Добавить("", НСтр("ru = 'Произвольная'"));
			КонецЕсли;
			
			ИмяТекущегоШаблонаСКД = "";
			ТекущийШаблонСхемыКомпоновкиДанных = ИмяТекущегоШаблонаСКД;
			
		КонецЕсли;
		
		// Компоновщик настроек инициализируется редактируемой схемой.
		ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, АдресРедактируемойСхемыКомпоновкиДанных);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруВозврата()
	
	СтруктураВозврата = Новый Структура("АдресХранилищаНастройкиКомпоновщика, ИмяТекущегоШаблонаСКД");
	СтруктураВозврата.АдресХранилищаНастройкиКомпоновщика =  ПолучитьНастрокиКомпоновщика(КомпоновщикНастроек, УникальныйИдентификаторВладельца);
	СтруктураВозврата.ИмяТекущегоШаблонаСКД = ИмяТекущегоШаблонаСКД;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	Если РедактируемаяСхемаКомпоновкиДанныхМодифицированность Тогда
		
		Если Не НеПомещатьНастройкиВСхемуКомпоновкиДанных Тогда
			
			// Настройки компоновщика настроек помещаются в редактируемую схему.
			ПоместитьНастройкиВСхемуКомпоновкиДанных(КомпоновщикНастроек, АдресРедактируемойСхемыКомпоновкиДанных);
			
		КонецЕсли;
		
		// Исходная схема замещается редактируемой схемой.
		УстановитьСхемуКомпоновкиДанных(АдресИсходнойСхемыКомпоновкиДанных, АдресРедактируемойСхемыКомпоновкиДанных);
		
	Иначе
		
		// Настройки компоновщика настроек помещаются в исходную схему.
		Если Не НеПомещатьНастройкиВСхемуКомпоновкиДанных Тогда
			
			ПоместитьНастройкиВСхемуКомпоновкиДанных(КомпоновщикНастроек, АдресИсходнойСхемыКомпоновкиДанных);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВозвращатьИмяТекущегоШаблонаСКД И ЗначениеЗаполнено(УникальныйИдентификаторВладельца) Тогда
		
		Закрыть(СформироватьСтруктуруВозврата());
		
	ИначеЕсли ЗначениеЗаполнено(УникальныйИдентификаторВладельца) Тогда
		
		Закрыть(ПолучитьНастрокиКомпоновщика(КомпоновщикНастроек, УникальныйИдентификаторВладельца));
		
	Иначе
		
		Закрыть(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхемуКомпоновки(Команда)
	
	ОткрытьКонструкторСхемыКомпоновкиДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийШаблонСхемыКомпоновкиДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено И ВыбранноеЗначение <> ИмяТекущегоШаблонаСКД Тогда
		ТекстВопроса = НСтр("ru='Текущие настройки будут потеряны. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ТекущийШаблонСхемыКомпоновкиДанныхОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийШаблонСхемыКомпоновкиДанныхОбработкаВыбораЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗагрузитьИзМакета(ПолноеИмяИсточникаШаблонов, ВыбранноеЗначение, КомпоновщикНастроек, АдресРедактируемойСхемыКомпоновкиДанных);
		Модифицированность = Истина;
		РедактируемаяСхемаКомпоновкиДанныхМодифицированность = Истина;
		ИмяТекущегоШаблонаСКД = ВыбранноеЗначение;
		
		ПустойЭлемент =  Элементы.ТекущийШаблонСхемыКомпоновкиДанных.СписокВыбора.НайтиПоЗначению("");
		Если ПустойЭлемент <> Неопределено Тогда
			Элементы.ТекущийШаблонСхемыКомпоновкиДанных.СписокВыбора.Удалить(ПустойЭлемент);
		КонецЕсли;
	Иначе
		ТекущийШаблонСхемыКомпоновкиДанных = ИмяТекущегоШаблонаСКД;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСхемуИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗагрузитьСхемуИзФайлаРасширениеПодключено",
		ЭтотОбъект);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
Процедура ОткрытьКонструкторСхемыКомпоновкиДанных()
	
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		// Настройки компоновщика настроек помещаются в редактируемую схему.
		Если Не НеПомещатьНастройкиВСхемуКомпоновкиДанных Тогда
			ПоместитьНастройкиВСхемуКомпоновкиДанных(КомпоновщикНастроек, АдресРедактируемойСхемыКомпоновкиДанных);
		КонецЕсли;
		
		// Создается копия редактируемой схемы.
		СхемаКомпоновкиДанных = СериализаторXDTO.ПрочитатьXDTO(СериализаторXDTO.ЗаписатьXDTO(ПолучитьИзВременногоХранилища(АдресРедактируемойСхемыКомпоновкиДанных)));
		
		// Копия редактируемой схемы открывается в конструкторе.
		Конструктор = Новый КонструкторСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);
		Конструктор.Редактировать(ЭтотОбъект);
		
	#Иначе
		
		ПоказатьПредупреждение(, НСтр("ru='Для того, чтобы редактировать схему компоновки, необходимо запустить конфигурацию в режиме толстого клиента.'"));
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСхемуКомпоновкиДанных(АдресПриемник, АдресСхемаИсточник, ПроверятьНаИзменение = Ложь, БылиИзменения = Ложь)
	
	Если ЭтоАдресВременногоХранилища(АдресСхемаИсточник) Тогда
		
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемаИсточник);
		
	Иначе
		
		СхемаКомпоновкиДанных = АдресСхемаИсточник;
		
	КонецЕсли;
	
	Если ПроверятьНаИзменение Тогда
		
		БылиИзменения = Ложь;
		
		Если ЭтоАдресВременногоХранилища(АдресПриемник) Тогда
			
			ТекущаяСКД = ПолучитьИзВременногоХранилища(АдресПриемник);
			Если ТипЗнч(ТекущаяСКД) = Тип("СхемаКомпоновкиДанных") Тогда
				
				Если СегментыСервер.ПолучитьXML(СхемаКомпоновкиДанных) <> СегментыСервер.ПолучитьXML(ТекущаяСКД) Тогда
					
					БылиИзменения = Истина;
					
				КонецЕсли
				
			Иначе
				
				БылиИзменения = Истина;
				
			КонецЕсли;
			
		Иначе
			
			БылиИзменения = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресПриемник) Тогда
		
		ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, АдресПриемник);
		
	Иначе
		
		АдресПриемник = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСхемуКомпоновкиДанных(АдресПриемник, АдресИсточник)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресИсточник);
	
	Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		
		СхемаКомпоновкиДанных = СериализаторXDTO.ПрочитатьXDTO(СериализаторXDTO.ЗаписатьXDTO(СхемаКомпоновкиДанных));
		
	Иначе
		
		СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресПриемник) Тогда
		
		ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, АдресПриемник);
		
	Иначе
		
		АдресПриемник = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, АдресСхемыКомпоновкиДанных, АдресНастроекКомпоновкиДанных = Неопределено)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	Если ЗначениеЗаполнено(АдресНастроекКомпоновкиДанных) Тогда
		НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных);
	КонецЕсли;
	
	Попытка
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	Исключение
	КонецПопытки;
	
	Если ЗначениеЗаполнено(АдресНастроекКомпоновкиДанных) Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	КомпоновщикНастроек.Восстановить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоместитьНастройкиВСхемуКомпоновкиДанных(КомпоновщикНастроек, АдресСхемыКомпоновкиДанных)
	
	КомпоновщикНастроек.Восстановить();
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	// +CRM
	CRM_СегментыСервер.ОчиститьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	CRM_СегментыСервер.СкопироватьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных.НастройкиПоУмолчанию, КомпоновщикНастроек.ПолучитьНастройки());
	// -CRM
	ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, АдресСхемыКомпоновкиДанных);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастрокиКомпоновщика(КомпоновщикНастроек, УникальныйИдентификатор)
	
	КомпоновщикНастроек.Восстановить();
	
	Возврат ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗагрузитьИзМакета(ПолноеИмяИсточникаШаблонов, ИмяМакета, КомпоновщикНастроек, АдресСхемыКомпоновкиДанных)
	
	ПоместитьВоВременноеХранилище(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяИсточникаШаблонов).ПолучитьМакет(ИмяМакета), АдресСхемыКомпоновкиДанных);
	ИнициализироватьКомпоновщикНастроек(КомпоновщикНастроек, АдресСхемыКомпоновкиДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСхемуИзФайлаРасширениеПодключено(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.ПолноеИмяФайла = "";
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор схемы компоновки данных'");
		ВыборФайла.Фильтр = НСтр("ru = 'Схема компоновки данных (*.xml)|*.xml'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗагрузитьСхемуИзФайлаВыборФайла",
			ЭтотОбъект);
		
		ВыборФайла.Показать(ОписаниеОповещения);
		
	Иначе
		
		#Если ВебКлиент Тогда
			
			АдресФайлаВоВременномХранилище = "";
			ИмяФайла = "";
			НачатьПомещениеФайла(
				Новый ОписаниеОповещения(
					"ЗагрузитьСхемуИзФайлаЗавершение",
					ЭтотОбъект,
					Новый Структура("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище)),
				АдресФайлаВоВременномХранилище,
				ИмяФайла,
				Истина,
				УникальныйИдентификатор);
			
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСхемуИзФайлаВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ВыбранныеФайлы[0], КодировкаТекста.UTF8);
	Текст = ТекстовыйДокумент.ПолучитьТекст();
	
	ЗагрузитьСхемуИзФайлаНаСервере(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСхемуИзФайлаЗавершение(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	АдресФайлаВоВременномХранилище = ДополнительныеПараметры.АдресФайлаВоВременномХранилище;
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСхемуИзФайлаНаСервереВеб(АдресФайлаВоВременномХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСхемуИзФайлаНаСервере(ТекстXML)
	
	Попытка
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(ТекстXML);
		СхемаКомпоновкиДанных = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		ИзмененаСхемаКомпоновкиДанных(ЭтаФорма, СхемаКомпоновкиДанных);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзмененаСхемаКомпоновкиДанных(Форма, СхемаКомпоновкиДанных)
	
	// Получена схема из конструктора схемы компоновки данных
	Форма.Модифицированность = Истина;
	Форма.РедактируемаяСхемаКомпоновкиДанныхМодифицированность = Истина;
	
	// Редактируемая схема компоновки данных замещается схемой, полученной из конструктора
	БылиИзменения = Ложь;
	УстановитьСхемуКомпоновкиДанных(Форма.АдресРедактируемойСхемыКомпоновкиДанных, СхемаКомпоновкиДанных, Истина, БылиИзменения);
	
	Если БылиИзменения Тогда
		
		Если Форма.Элементы.ТекущийШаблонСхемыКомпоновкиДанных.СписокВыбора.НайтиПоЗначению("") = Неопределено Тогда
			Форма.Элементы.ТекущийШаблонСхемыКомпоновкиДанных.СписокВыбора.Добавить("", НСтр("ru = 'Произвольная'"));
		КонецЕсли;
		
		Форма.ИмяТекущегоШаблонаСКД = "";
		Форма.ТекущийШаблонСхемыКомпоновкиДанных = Форма.ИмяТекущегоШаблонаСКД;
		
	КонецЕсли;
	
	// Компоновщик настроек инициализируется редактируемой схемой
	ИнициализироватьКомпоновщикНастроек(Форма.КомпоновщикНастроек, Форма.АдресРедактируемойСхемыКомпоновкиДанных);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСхемуИзФайлаНаСервереВеб(АдресФайлаВоВременномХранилище)
	
	Попытка
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВременногоФайла, КодировкаТекста.UTF8);
		ТекстXML = ТекстовыйДокумент.ПолучитьТекст();
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(ТекстXML);
		
		СхемаКомпоновкиДанных = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
		ИзмененаСхемаКомпоновкиДанных(ЭтаФорма, СхемаКомпоновкиДанных);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	Исключение		
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 	
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
