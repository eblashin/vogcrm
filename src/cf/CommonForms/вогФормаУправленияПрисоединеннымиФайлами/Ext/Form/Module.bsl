
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	//Кайдашов 762
	Если Параметры.Свойство("ГруппаФайлов") тогда
		ГруппаФайлов = Параметры.ГруппаФайлов;
		
	КонецЕсли;
	
	ВладелецФайла = Параметры.ВладелецФайла;
	Если Параметры.ВладелецФайла = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Список присоединенных файлов можно посмотреть
		                             |только в форме объекта-владельца.'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(Параметры.ЗаголовокФормы) Тогда
		Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПараметрыОтправки) Тогда
		ПараметрыОтправки = Параметры.ПараметрыОтправки;
	Иначе
		ПараметрыОтправки = РаботаСФайламиСлужебный.ПодготовитьСтруктуруПараметровОтправки();
	КонецЕсли;
	
	времНастройки = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "Настройки");
	Настройки = ?(времНастройки = Неопределено, ПолучитьНастройкиПоУмолчанию(), времНастройки);
	
	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Элементы.ВариантПросмотраПлиткой.Пометка = Настройки.ВариантПросмотраПлиткой;
	
	Если Параметры.Свойство("ВариантПросмотраПлиткой") тогда
		Элементы.ВариантПросмотраПлиткой.Пометка = Параметры.ВариантПросмотраПлиткой;
		Настройки.ВариантПросмотраПлиткой = Параметры.ВариантПросмотраПлиткой;	
	КонецЕсли;
	
	Если Параметры.Свойство("ТипыФайлов")
	  И Параметры.ТипыФайлов.Количество() > 0 Тогда
		ТипыФайлов.ЗагрузитьЗначения(Параметры.ТипыФайлов);	
		
		Элементы.ВариантПросмотраПлиткой.Видимость = (ТипыФайлов.НайтиПоЗначению(Перечисления.вогТипыПрисоединенныхФайлов.Изображение) <> Неопределено);
		
	КонецЕсли;
	
	ИмяСправочникаХранилищаФайлов = Неопределено;
	НастроитьСписок(ИмяСправочникаХранилищаФайлов, Истина);
		
	ТипСправочникаСФайлами = Тип("СправочникСсылка." + ИмяСправочникаХранилищаФайлов);
	МетаданныеСправочникаСФайлами = Метаданные.НайтиПоТипу(ТипСправочникаСФайлами);
	
	ЕстьПравоДобавления = Истина;
	
	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", МетаданныеСправочникаСФайлами) Тогда
		ЕстьПравоДобавления = Ложь;
	КонецЕсли;
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		ТолькоПросмотр = Не ПравоДоступа("Редактирование", МетаданныеСправочникаСФайлами);
	Иначе	
		ТолькоПросмотр = Параметры.ТолькоПросмотр Или НЕ ПравоДоступа("Редактирование", МетаданныеСправочникаСФайлами)
			Или НЕ ПравоДоступа("Редактирование", Параметры.ВладелецФайла.Метаданные());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаФайлов)  тогда
		ТолькоПросмотр = истина;
	КонецЕсли;		
	
	Если ТолькоПросмотр Тогда
		// ++ VOG Солодов В.В. 23.01.2020 CRM-141
		Если Параметры.Свойство("СкрытьКнопкиИзменения") или ЗначениеЗаполнено(ГруппаФайлов) Тогда
			СкрытьКнопкиИзменения();
		КонецЕсли;
		// -- VOG Солодов В.В. 23.01.2020
		ЕстьПравоДобавления = Ложь;
	КонецЕсли;
		
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	Если МетаданныеСправочникаСФайлами.Иерархический и Не ТолькоПросмотр тогда
		Элементы.ДобавитьПапку.Видимость = Истина;	
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнициализироватьПлиткиПрисоединенныхФайлов();
	Если ЕстьПравоДобавления Тогда
		
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ГруппаФайлов) тогда
	//	ЭлементыДерева = ДеревоПрисоединенныеФайлы.ПолучитьЭлементы();
	//	Для каждого Элемент из ЭлементыДерева цикл
	//		Если Элемент.Группировка = ГруппаФайлов тогда
	//			Элементы.ДеревоПрисоединенныеФайлы.ТекущаяСтрока = Элемент;
	//			Прервать;	
	//		КонецЕсли;
	//		Для каждого Элемент2 из Элемент.ПолучитьЭлементы() цикл	
	//			Если Элемент2.Группировка = ГруппаФайлов тогда
	//				Элементы.ДеревоПрисоединенныеФайлы.ТекущаяСтрока = Элемент2;
	//				Прервать;	
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВидПрисоединенныйФайл" Тогда
		НастроитьСписок();
		РазвернутьСтрокиДерева(Элементы.ДеревоПрисоединенныеФайлы, "ДеревоПрисоединенныеФайлы");
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		// ++ Тищенко В.В. 13.02.2019
		// Не работает метод ВводДоступен()
		
		//Если ВводДоступен()
		//  И Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый
		//  И Элементы.ДеревоПрисоединенныеФайлы.ТекущиеДанные <> Неопределено Тогда
		//	вогУправлениеПрисоединеннымиФайламиСервер.ВыполнитьДобавлениеВидаФайла(Элементы.ДеревоПрисоединенныеФайлы.ТекущиеДанные.ВидФайла, Источник)			
		//КонецЕсли;	
		
		Если ЭтаФорма.Открыта()
		  И Параметр.Свойство("ЭтоНовый") И Параметр.ЭтоНовый
		  И Элементы.ДеревоПрисоединенныеФайлы.ТекущиеДанные <> Неопределено Тогда
			вогУправлениеПрисоединеннымиФайламиСервер.ВыполнитьДобавлениеВидаФайла(Элементы.ДеревоПрисоединенныеФайлы.ТекущиеДанные.ВидФайла, Источник)			
		КонецЕсли;	
		
		// -- Тищенко В.В.
		
		НастроитьСписок();
		РазвернутьСтрокиДерева(Элементы.ДеревоПрисоединенныеФайлы, "ДеревоПрисоединенныеФайлы");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;	
	СохранитьНастройки();
КонецПроцедуры

// ++ VOG Солодов В.В. 03.07.2019
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЭлементыДерева = ДеревоПрисоединенныеФайлы.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЗначениеЗаполнено(ЭлементДерева.ПрисоединенныйФайл) Тогда
			Продолжить;
		КонецЕсли;
		
		ДочерниеЭлементы = ЭлементДерева.ПолучитьЭлементы();
		
		Для Каждого ДочернийЭлемент Из ДочерниеЭлементы Цикл
			Если ЗначениеЗаполнено(ДочернийЭлемент.ПрисоединенныйФайл)
				И ДочернийЭлемент.ФайлРедактируется
				И ДочернийЭлемент.ФайлРедактируетТекущийПользователь Тогда
				
				ШаблонСообщения = НСтр("ru = 'Файл ""%1"" редактируется. Закройте файл и нажмите кнопку 
					|""Освободить и закрыть"".'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения,
					ДочернийЭлемент.Наименование);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // -- VOG Солодов В.В. 03.07.2019

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Команда)
	
	ОткрытьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоПрисоединенныеФайлы.ТекущиеДанные;
	Если ТекущиеДанные.Зашифрован Или ТекущиеДанные.ПодписанЭП Или ТекущиеДанные.ФайлРедактируется Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = ДанныеФайла(ТекущиеДанные.ПрисоединенныйФайл, , Ложь);
	Если ДанныеФайла.Зашифрован Или ДанныеФайла.ПодписанЭП Или ДанныеФайла.ФайлРедактируется Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.ПрисоединенныйФайл);
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйВызовСервера.ОбновитьПрисоединенныйФайл(ТекущиеДанные.ПрисоединенныйФайл, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)

	ВыделенныеСтроки = МассивВыделенныхФайлов();
	РаботаСФайламиСлужебныйКлиент.ОтправитьФайлыПоПочте(
		ВыделенныеСтроки, УникальныйИдентификатор, ПараметрыОтправки);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
		И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
			Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = МассивВыделенныхФайлов();
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		ПрисоединенныеФайлыКлиент.НапечататьФайлы(ВыделенныеСтроки, ЭтотОбъект.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияПлиткой(Команда)

	Настройки.ВариантПросмотраПлиткой = Не Элементы.ВариантПросмотраПлиткой.Пометка;
	Элементы.ВариантПросмотраПлиткой.Пометка = Настройки.ВариантПросмотраПлиткой;
	
	НастроитьСписок();
	
КонецПроцедуры

// ++ VOG Солодов В.В. 03.07.2019
&НаКлиенте
Процедура ОсвободитьИЗакрыть(Команда)
	
	Отказ 			= Ложь;
	ЭлементыДерева 	= ДеревоПрисоединенныеФайлы.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЗначениеЗаполнено(ЭлементДерева.ПрисоединенныйФайл) Тогда
			Продолжить;
		КонецЕсли;
		
		ДочерниеЭлементы = ЭлементДерева.ПолучитьЭлементы();
		
		Для Каждого ДочернийЭлемент Из ДочерниеЭлементы Цикл
			
			Если ЗначениеЗаполнено(ДочернийЭлемент.ПрисоединенныйФайл)
				И ДочернийЭлемент.ФайлРедактируется
				И ДочернийЭлемент.ФайлРедактируетТекущийПользователь Тогда
				
				ОсвободитьФайл(ДочернийЭлемент, Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НастроитьСписок();
	РазвернутьСтрокиДерева(Элементы.ДеревоПрисоединенныеФайлы, "ДеревоПрисоединенныеФайлы");
	
	Если Не Отказ Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры // -- VOG Солодов В.В. 03.07.2019

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ДеревоПрисоединенныеФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;	
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока; 
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ТекущаяСтрока);
	ВыполнитьДействиеПрисоединенныеФайлыКлиент(
		Новый Структура("ТолькоПросмотр, ПрисоединенныйФайл, ТипФайла", Ложь,ДанныеСтроки.ПрисоединенныйФайл, ДанныеСтроки.ТипФайла)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПрисоединенныеФайлыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;	
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока; 
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ВыполнитьДействиеПрисоединенныеФайлыКлиент(Элемент.ДанныеСтроки(ТекущаяСтрока));		
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПрисоединенныеФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;	 
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока; 
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ТекущаяСтрока);
	Если ДанныеСтроки.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	ВыполнитьУдалениеВидаФайлаСервер(ДанныеСтроки.ВидФайла, ДанныеСтроки.ПрисоединенныйФайл);	
	РазвернутьСтрокиДерева(Элементы.ДеревоПрисоединенныеФайлы, "ДеревоПрисоединенныеФайлы");	
	
КонецПроцедуры



&НаКлиенте
Процедура ДеревоПрисоединенныеФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	// ++ VOG Ульянов И.В. 21.11.2019 bugs 757
	//ВыполнитьДействиеПрисоединенныеФайлыКлиент(Элемент.ДанныеСтроки(ВыбраннаяСтрока));		
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ЗначениеЗаполнено(ДанныеСтроки.ПрисоединенныйФайл) тогда
		Попытка
			ЭтоГруппа = вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ПрисоединенныйФайл,"ЭтоГруппа");
			Если ЭтоГруппа тогда
				Возврат;
			КонецЕсли;
		Исключение
		КонецПопытки;
		ДанныеФайла = ДанныеФайла(ДанныеСтроки.ПрисоединенныйФайл, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	Иначе	
		ВыполнитьДействиеПрисоединенныеФайлыКлиент(Элемент.ДанныеСтроки(ВыбраннаяСтрока));		
	КонецЕсли;	
	// -- VOG Ульянов И.В. 21.11.2019 bugs 757
		
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайлами

&НаКлиенте
Процедура ВыполнитьДействиеПрисоединенныеФайлыКлиент(ДанныеСтроки)

	Если ДанныеСтроки.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	ЭтоГруппа = Ложь;
	Если ЗначениеЗаполнено(ДанныеСтроки.ПрисоединенныйФайл) Тогда
		Попытка
			ЭтоГруппа = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ДанныеСтроки.ПрисоединенныйФайл,"ЭтоГруппа");
		Исключение
			ЭтоГруппа = Ложь;
		КонецПопытки;
		Если Не ЭтоГруппа тогда
			РаботаСФайламиСлужебныйКлиент.РедактироватьСОповещением(Неопределено, ДанныеСтроки.ПрисоединенныйФайл);
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	Фильтр = Неопределено;
	Если ДанныеСтроки.ТипФайла = ПредопределенноеЗначение("Перечисление.вогТипыПрисоединенныхФайлов.Изображение") Тогда
		Фильтр = РасширенияИзображений();
	КонецЕсли;
	
	РаботаСФайламиКлиент.ДобавитьФайлы(ВладелецФайла, УникальныйИдентификатор, Фильтр,?(ЭтоГруппа,ДанныеСтроки.ПрисоединенныйФайл,Неопределено));
	

КонецПроцедуры // ВыполнитьДействиеПрисоединенныеФайлыКлиент()

&НаСервере
Процедура ВыполнитьУдалениеВидаФайлаСервер(ВидФайла, Файл)

	НачатьТранзакцию();
	
	ФайлОбъект = Файл.ПолучитьОбъект();
	Попытка
		ФайлОбъект.Заблокировать();	
	Исключение
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось заблокировать объект';"
           + " en = 'Can't lock the object'") 
           + " '" + ФайлОбъект + "'!
           |"+ ОписаниеОшибки());
		   
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		
		КонецЕсли; 
		
		НастроитьСписок();
		Возврат;
		
	КонецПопытки; 
	
	ФайлОбъект.УстановитьПометкуУдаления(Истина);
	
	Менеджер = РегистрыСведений.вогПрисоедниненныеФайлыОбъектовПоВидам.СоздатьМенеджерЗаписи();
	Менеджер.ВидФайла			= ВидФайла;
	Менеджер.ПрисоединенныйФайл = Файл;
	
	Менеджер.Прочитать();
	Если Менеджер.Выбран() Тогда
		Менеджер.Удалить();
		
	КонецЕсли;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
		
	КонецЕсли; 
	
	НастроитьСписок();
	
КонецПроцедуры // ВыполнитьУдалениеВидаФайлаСервер()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьФайлДляРедактирования(Команда) // ++ VOG Ульянов И.В. 21.11.2019 bugs 757
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоПрисоединенныеФайлы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПрисоединенныйФайл) Тогда
		РаботаСФайламиСлужебныйКлиент.РедактироватьСОповещением(Неопределено, ТекущиеДанные.ПрисоединенныйФайл);
	КонецЕсли;			
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл()
	
	Если НЕ ПроверитьДействиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоПрисоединенныеФайлы.ТекущиеДанные;
	
	Если ТекущиеДанные.Зашифрован Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрещенныеРасширения.НайтиПоЗначению(ТекущиеДанные.Расширение) <> Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		Оповещение = Новый ОписаниеОповещения("ОткрытьФайлПослеПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
		ПараметрыФормы.Вставить("ИмяФайла",
			ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ТекущиеДанные.Наименование, ТекущиеДанные.Расширение));
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
		Возврат;
	КонецЕсли;
	
	ФайлРедактируется = ТекущиеДанные.ФайлРедактируется И ТекущиеДанные.ФайлРедактируетТекущийПользователь;
	
	ДанныеФайла = ДанныеФайла(ТекущиеДанные.ПрисоединенныйФайл, УникальныйИдентификатор);
	
	Если ДанныеФайла.Зашифрован Тогда
		// Файл может быть изменен в другом сеансе.
		ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
		ФайлРедактируется = ТекущиеДанные.ФайлРедактируется И ТекущиеДанные.ФайлРедактируетТекущийПользователь;
		
		ДанныеФайла = ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
		
		Если ДанныеФайла.Зашифрован Тогда
			// Файл может быть изменен в другом сеансе.
			ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
			Возврат;
		КонецЕсли;
		
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДействиеРазрешено(Знач ТекущееДействие = "")
	
	ТекущиеДанные = Элементы.ДеревоПрисоединенныеФайлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТипЗнч(ТекущиеДанные.ПрисоединенныйФайл) = ТипСправочникаСФайлами;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеФайла(Знач ПрисоединенныйФайл, Знач ИдентификаторФормы = Неопределено, 
	Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

&НаСервере
Процедура НастроитьСписок(ИмяСправочникаХранилищаФайлов = Неопределено, ПервоначальнаяИнициализация = Ложь)
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при настройке списка присоединенных файлов.'");
	ОкончаниеОшибки = НСтр("ru = 'В этом случае настройка списка невозможна.'");
	
	ИмяСправочникаХранилищаФайлов = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
		Параметры.ВладелецФайла, "", ЗаголовокОшибки, ОкончаниеОшибки);
	
	ПолноеИмяСправочника = "Справочник." + ИмяСправочникаХранилищаФайлов;
	
	ЭлементыДерева = ДеревоПрисоединенныеФайлы.ПолучитьЭлементы();	
	ЭлементыДерева.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыПрисоединенныхФайлов.Ссылка КАК ВидФайла
		|ПОМЕСТИТЬ ВТ_ВидыПрисоединенныхФайловВсе
		|ИЗ
		|	Справочник.вогВидыПрисоединенныхФайлов КАК ВидыПрисоединенныхФайлов
		|ГДЕ
		|	ВидыПрисоединенныхФайлов.Принадлежность = &Принадлежность
		|	И НЕ ВидыПрисоединенныхФайлов.ПометкаУдаления
		|	И (ВидыПрисоединенныхФайлов.ТипФайла В (&ТипыФайла)
		|			ИЛИ &ТипыФайла ЕСТЬ NULL) 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.вогВидыПрисоединенныхФайлов.ПустаяСсылка)
		|ГДЕ
		|	&ТипыФайла ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрисоедниненныеФайлыПоВидам.ВидФайла КАК ВидФайла,
		|	ПрисоедниненныеФайлыПоВидам.ПрисоединенныйФайл КАК ПрисоединенныйФайл,
		|	ПрисоедниненныеФайлыПоВидам.ПрисоединенныйФайл.Наименование КАК Наименование,
		|	ПрисоедниненныеФайлыПоВидам.ПрисоединенныйФайл.Зашифрован КАК Зашифрован,
		|	ПрисоедниненныеФайлыПоВидам.ПрисоединенныйФайл.Расширение КАК Расширение,
		|	ПрисоедниненныеФайлыПоВидам.ПрисоединенныйФайл.Редактирует КАК Редактирует,
		|	ПрисоедниненныеФайлыПоВидам.ПрисоединенныйФайл.Изменил КАК Изменил,
		|	ПрисоедниненныеФайлыПоВидам.ПрисоединенныйФайл.ПодписанЭП КАК ПодписанЭП,
		|	ВЫБОР
		|		КОГДА ПрисоедниненныеФайлыПоВидам.ПрисоединенныйФайл.ПометкаУдаления = ИСТИНА
		|			ТОГДА ПрисоедниненныеФайлыПоВидам.ПрисоединенныйФайл.ИндексКартинки + 1
		|		ИНАЧЕ ПрисоедниненныеФайлыПоВидам.ПрисоединенныйФайл.ИндексКартинки
		|	КОНЕЦ КАК ИндексКартинки
		|ПОМЕСТИТЬ ВТ_ВидыПрисоединенныхФайловОбъекта
		|ИЗ
		|	РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК ПрисоедниненныеФайлыПоВидам
		|ГДЕ
		|	(ПрисоедниненныеФайлыПоВидам.ВидФайла.Принадлежность = &Принадлежность
		|			ИЛИ ПрисоедниненныеФайлыПоВидам.ВидФайла = ЗНАЧЕНИЕ(Справочник.вогВидыПрисоединенныхФайлов.ПустаяСсылка))
		|	И Выразить(ПрисоедниненныеФайлыПоВидам.ПрисоединенныйФайл как &ТипСправочникаФайлов).ВладелецФайла = &ВладелецФайла  %УсловиеГруппа%
//		|	И ПрисоедниненныеФайлыПоВидам.ПрисоединенныйФайл.ВладелецФайла = &ВладелецФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВидыПрисоединенныхФайловВсе.ВидФайла КАК ВидФайла,
		|	ВТ_ВидыПрисоединенныхФайловОбъекта.ПрисоединенныйФайл КАК ПрисоединенныйФайл,
		|	ВТ_ВидыПрисоединенныхФайловОбъекта.Наименование КАК Наименование,
		|	ВТ_ВидыПрисоединенныхФайловОбъекта.Зашифрован КАК Зашифрован,
		|	ВТ_ВидыПрисоединенныхФайловОбъекта.Расширение КАК Расширение,
		|	ВТ_ВидыПрисоединенныхФайловОбъекта.ПодписанЭП КАК ПодписанЭП,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_ВидыПрисоединенныхФайловОбъекта.Редактирует В (&ПустыеПользователи)
		|				ИЛИ СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись <> НЕОПРЕДЕЛЕНО
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ФайлРедактируется,
		|	ВЫБОР
		|		КОГДА ВТ_ВидыПрисоединенныхФайловОбъекта.Редактирует = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ФайлРедактируетТекущийПользователь,
		|	ВЫБОР
		|		КОГДА (НЕ ВТ_ВидыПрисоединенныхФайловОбъекта.Редактирует В (&ПустыеПользователи)
		|				ИЛИ СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись <> НЕОПРЕДЕЛЕНО)
		|				И ВТ_ВидыПрисоединенныхФайловОбъекта.Редактирует <> &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ФайлРедактируетДругойПользователь,
		|	ВЫБОР
		|		КОГДА СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись <> НЕОПРЕДЕЛЕНО
		|				И ВТ_ВидыПрисоединенныхФайловОбъекта.Редактирует = НЕОПРЕДЕЛЕНО
		|			ТОГДА СтатусыСинхронизацииФайловСОблачнымСервисом.УчетнаяЗапись
		|		ИНАЧЕ ВТ_ВидыПрисоединенныхФайловОбъекта.Редактирует
		|	КОНЕЦ КАК Редактирует,
		|	ВТ_ВидыПрисоединенныхФайловОбъекта.ИндексКартинки КАК ИндексКартинки,
		|	ВЫБОР
		|		КОГДА ВТ_ВидыПрисоединенныхФайловВсе.ВидФайла = ЗНАЧЕНИЕ(Справочник.вогВидыПрисоединенныхФайлов.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок,
		|	ЕСТЬNULL(ВТ_ВидыПрисоединенныхФайловВсе.ВидФайла.ТипФайла, ЗНАЧЕНИЕ(Перечисление.вогТипыПрисоединенныхФайлов.ПрочиеФайлы)) КАК ТипФайла
		|ИЗ
		|	ВТ_ВидыПрисоединенныхФайловВсе КАК ВТ_ВидыПрисоединенныхФайловВсе
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВидыПрисоединенныхФайловОбъекта КАК ВТ_ВидыПрисоединенныхФайловОбъекта
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыСинхронизацииФайловСОблачнымСервисом КАК СтатусыСинхронизацииФайловСОблачнымСервисом
		|			ПО ВТ_ВидыПрисоединенныхФайловОбъекта.ПрисоединенныйФайл = СтатусыСинхронизацииФайловСОблачнымСервисом.Файл
		|		ПО ВТ_ВидыПрисоединенныхФайловВсе.ВидФайла = ВТ_ВидыПрисоединенныхФайловОбъекта.ВидФайла
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	ВидФайла,
		|	ПрисоединенныйФайл
		|ИТОГИ ПО
		|	ВидФайла
		|АВТОУПОРЯДОЧИВАНИЕ";

	Если НЕ ЗначениеЗаполнено(ГруппаФайлов) тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%УсловиеГруппа%","");
			
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"%УсловиеГруппа%","И Выразить(ПрисоедниненныеФайлыПоВидам.ПрисоединенныйФайл как &ТипСправочникаФайлов).Родитель = &ГруппаФайлов");
		Запрос.УстановитьПараметр("ГруппаФайлов",ГруппаФайлов);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&ТипСправочникаФайлов",ПолноеИмяСправочника);
	Если ТипыФайлов.Количество() > 0 
	  И ТипыФайлов.НайтиПоЗначению(Перечисления.вогТипыПрисоединенныхФайлов.Изображение) <> Неопределено Тогда
		ЕстьИзображения = Истина;	
	КонецЕсли;

	Запрос.УстановитьПараметр("ВладелецФайла" , ВладелецФайла);
	Запрос.УстановитьПараметр("ТипыФайла"	  , ?(ЕстьИзображения, ТипыФайлов.ВыгрузитьЗначения(), Null));
	Запрос.УстановитьПараметр("Принадлежность", ПолноеИмяСправочника);
	
	ПустыеПользователи = Новый Массив;
	ПустыеПользователи.Добавить(Неопределено);
	ПустыеПользователи.Добавить(Справочники.Пользователи.ПустаяСсылка());
	ПустыеПользователи.Добавить(Справочники.ВнешниеПользователи.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПустыеПользователи" , ПустыеПользователи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВидФайла = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидФайла.Следующий() Цикл
		
		СтрокаВидФайла = ЭлементыДерева.Добавить();	
		ЗаполнитьЗначенияСвойств(СтрокаВидФайла, ВыборкаВидФайла);
		
		СтрокаВидФайла.Группировка    = ВыборкаВидФайла.ВидФайла;
		СтрокаВидФайла.ИндексКартинки = 2;
		СтрокаВидФайла.ТолькоПросмотр = Истина;
		
		ВыборкаЗаписи = ВыборкаВидФайла.Выбрать();
		
		// +++ VOG Кулаков П.Л. 23.04.2021 DEV-448
		Пока ВыборкаЗаписи.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ВыборкаЗаписи.ПрисоединенныйФайл) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ВыборкаЗаписи.ПрисоединенныйФайл.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			СтрокаФайла = СтрокаВидФайла.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаФайла, ВыборкаЗаписи);
			СтрокаФайла.Группировка = ВыборкаЗаписи.ПрисоединенныйФайл;
		КонецЦикла;
		ВыборкаЗаписи.Сбросить();
		// --- VOG Кулаков П.Л.
		
		Пока ВыборкаЗаписи.Следующий() Цикл
			СтрокаФайла = Неопределено;
			Если Не ЗначениеЗаполнено(ВыборкаЗаписи.ПрисоединенныйФайл) Тогда
				Продолжить;
			КонецЕсли;
			
			// +++ VOG Кулаков П.Л. 23.04.2021 DEV-448
			Если ВыборкаЗаписи.ПрисоединенныйФайл.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			// --- VOG Кулаков П.Л.
			
			Если ЗначениеЗаполнено(ВыборкаЗаписи.ПрисоединенныйФайл.Родитель) тогда
				ЭлДерева = СтрокаВидФайла.ПолучитьЭлементы();	
				Для каждого ЭлементДерева из ЭлДерева цикл
					Если ЭлементДерева.Группировка = ВыборкаЗаписи.ПрисоединенныйФайл.Родитель тогда
						СтрокаФайла = ЭлементДерева.ПолучитьЭлементы().Добавить();	
					КонецЕсли;
				КонецЦикла;
				Если СтрокаФайла = Неопределено тогда
					СтрокаФайла = СтрокаВидФайла.ПолучитьЭлементы().Добавить();	
				КонецЕсли;
			Иначе	
				СтрокаФайла = СтрокаВидФайла.ПолучитьЭлементы().Добавить();	
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаФайла, ВыборкаЗаписи);
			
			СтрокаФайла.Группировка = ВыборкаЗаписи.ПрисоединенныйФайл;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	Если Не ПервоначальнаяИнициализация Тогда
		ИнициализироватьПлиткиПрисоединенныхФайлов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПлиткиПрисоединенныхФайлов()

	Ключ = "Плитки";
	Если ТаблицаОписания.Количество() > 0 Тогда
		ВыполнитьОбработкуДанныхФормы(Ключ);	
	КонецЕсли;
	
	Если Настройки.ВариантПросмотраПлиткой Тогда
		СформироватьПлиткиПрисоединенныхФайлов(Ключ);
		
	КонецЕсли;
		
КонецПроцедуры // ОтборПродажиСуммаВидСравнения()

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ЭлементДерево, ИмяРеквизитаФормы, Развернуть = Истина)
	СтрокиДерева = ЭтотОбъект[ИмяРеквизитаФормы].ПолучитьЭлементы();
	Для Каждого Строка Из СтрокиДерева Цикл
		Если Развернуть Тогда
			ЭлементДерево.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		Иначе
			ЭлементДерево.Свернуть(Строка.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЦикла;
				
КонецПроцедуры

&НаКлиенте
Функция МассивВыделенныхФайлов()

	ВыделенныеСтроки = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.ДеревоПрисоединенныеФайлы.ВыделенныеСтроки Цикл
		ДанныеСтроки = ДеревоПрисоединенныеФайлы.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДанныеСтроки <> Неопределено
		  И ЗначениеЗаполнено(ДанныеСтроки.ПрисоединенныйФайл) Тогда
			ВыделенныеСтроки.Добавить(ДанныеСтроки.ПрисоединенныйФайл);		
		
		КонецЕсли;
	
	КонецЦикла;

	Возврат ВыделенныеСтроки;
	
КонецФункции // МассивВыделенныхФайлов()

#Область ПлиткиПрисоединенныхФайлов

&НаСервере
Процедура СформироватьПлиткиПрисоединенныхФайлов(Ключ)

	Для каждого ЭлементДерева Из ДеревоПрисоединенныеФайлы.ПолучитьЭлементы() Цикл
		ИдентификаторЭлемента = "ВидФайла__" + ИдентификаторЭлемента(ЭлементДерева.ВидФайла);
		Группа = СоздатьНайтиОбычнуюГруппу(ИдентификаторЭлемента, 
			Элементы.СтраницаПлитки,,
			ОтображениеОбычнойГруппы.СлабоеВыделение,,,
			?(ЗначениеЗаполнено(ЭлементДерева.ВидФайла), Строка(ЭлементДерева.ВидФайла), НСтр("ru = 'Прочее'")));
			
		ДобавитьОписание(Группа.Имя,,, ЭлементДерева.ВидФайла, ЭлементДерева.ПолучитьИдентификатор(), Ключ);	
		
		СформироватьПлиткиПрисоединенныхФайловВидаФайла(ЭлементДерева.ПолучитьЭлементы(), Группа, Ключ);	
			
	КонецЦикла;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПлитки;
	
КонецПроцедуры // СформироватьПлиткиПрисоединенныхФайлов()

&НаСервере
Процедура СформироватьПлиткиПрисоединенныхФайловВидаФайла(ЭлементыВидаФайла, Родитель, Ключ)

	МассивДанныхФайлов = Новый Массив;
	
	//Создание реквизитов
	МассивДобавляемыхРеквизитов = Новый Массив;
	Для каждого ЭлементВидаФайла Из ЭлементыВидаФайла Цикл
		Попытка
			ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементВидаФайла.ПрисоединенныйФайл,"ЭтоГруппа");
		Исключение
			ЭтоГруппа = ложь;
		КонецПопытки;
			//Если ЭтоГруппа тогда продолжить КонецЕсли;
		Если НЕ ЭтоГруппа тогда
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭлементВидаФайла.ПрисоединенныйФайл, УникальныйИдентификатор);
			Если ЭтоФайлИзображения(ДанныеФайла) Тогда
				ИдентификаторЭлемента =  "Группа_"+ИдентификаторЭлемента(ЭлементВидаФайла.ВидФайла)+"_ПрисоединенныйФайл__" + ИдентификаторЭлемента(ЭлементВидаФайла.ПрисоединенныйФайл); 
				
				МассивДобавляемыхРеквизитов.Добавить(
				Новый РеквизитФормы(ИдентификаторЭлемента, Новый ОписаниеТипов("Строка")));	
				
				
				ДанныеФайла.Вставить("ПрисоединенныйФайл"		, ЭлементВидаФайла.ПрисоединенныйФайл);
				ДанныеФайла.Вставить("ИдентификаторСтрокиДерева", ЭлементВидаФайла.ПолучитьИдентификатор());
				МассивДанныхФайлов.Добавить(ДанныеФайла);
				
			КонецЕсли;
		Иначе
			Для каждого Элемент Из ЭлементВидаФайла.ПолучитьЭлементы()  Цикл
				ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Элемент.ПрисоединенныйФайл, УникальныйИдентификатор);
				Если ЭтоФайлИзображения(ДанныеФайла) Тогда
					ИдентификаторЭлемента =  "Группа_"+ИдентификаторЭлемента(Элемент.ВидФайла)+"_ПрисоединенныйФайл__" + ИдентификаторЭлемента(Элемент.ПрисоединенныйФайл);
					МассивДобавляемыхРеквизитов.Добавить(
					Новый РеквизитФормы(ИдентификаторЭлемента, Новый ОписаниеТипов("Строка")));	
					ДанныеФайла.Вставить("ПрисоединенныйФайл"		, Элемент.ПрисоединенныйФайл);
					ДанныеФайла.Вставить("ИдентификаторСтрокиДерева", Элемент.ПолучитьИдентификатор());
					МассивДанныхФайлов.Добавить(ДанныеФайла);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	//Создание элементов
	Сч = 0;
	Для каждого ДанныеФайла Из МассивДанныхФайлов Цикл
		ИдентификаторЭлемента =  ИдентификаторЭлемента(ДанныеФайла.ПрисоединенныйФайл);
		Если Сч = 0 
		  ИЛИ Сч % Настройки.ЭлементовПоГоризонтали = 0 Тогда
			Группа = СоздатьНайтиОбычнуюГруппу("ГруппаПрисоединенныйФайл__" + ИдентификаторЭлемента + Формат(Сч, "ЧН=; ЧГ="), 
				Родитель,
				ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
				
			ДобавитьОписание(Группа.Имя,,, ЭлементВидаФайла.ПрисоединенныйФайл, ДанныеФайла.ИдентификаторСтрокиДерева, Ключ);	
				
		КонецЕсли;
		
		//Элемент 						 = Элементы.Добавить("ПрисоединенныйФайл__" + ИдентификаторЭлемента, Тип("ПолеФормы"), Группа); 
		Элемент 						 = Элементы.Добавить("Группа_"+ИдентификаторЭлемента(ЭлементВидаФайла.ВидФайла)+"_ПрисоединенныйФайл__" + ИдентификаторЭлемента, Тип("ПолеФормы"), Группа); // ++ VOG Ульянов И.В. 21.11.2019 bugs 837
		Элемент.Вид				 		 = ВидПоляФормы.ПолеКартинки;
		//Элемент.ПутьКДанным 	 		 = "ПрисоединенныйФайл__" + ИдентификаторЭлемента;
		Элемент.ПутьКДанным 	 		 = "Группа_"+ИдентификаторЭлемента(ЭлементВидаФайла.ВидФайла)+"_ПрисоединенныйФайл__" + ИдентификаторЭлемента; // ++ VOG Ульянов И.В. 21.11.2019 bugs 837
		Элемент.ПоложениеЗаголовка 		 = ПоложениеЗаголовкаЭлементаФормы.Низ;
		Элемент.Заголовок				 = ДанныеФайла.ИмяФайла;
		Элемент.РазмерКартинки	         = РазмерКартинки.Пропорционально;
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.РастягиватьПоВертикали   = Ложь;
		Элемент.Гиперссылка				 = Истина;
 		Элемент.Ширина	  			     = 23;
		Элемент.Высота					 = 5;
		
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_ПлиткаНажатие");
		ДобавитьОписание(Элемент.Имя, Элемент.ПутьКДанным,, ЭлементВидаФайла.ПрисоединенныйФайл, ДанныеФайла.ИдентификаторСтрокиДерева, Ключ);	
		
		Кнопка = СоздатьНайтиКнопку("ОткрытьФайлДляПросмотра__" + ИдентификаторЭлемента,
			"ОткрытьФайлДляПросмотра",
		    Элемент.КонтекстноеМеню);
		ДобавитьОписание(Кнопка.Имя,,,,, Ключ);	
		
		Кнопка = СоздатьНайтиКнопку("Печать__" + ИдентификаторЭлемента,
			"Печать",
		    Элемент.КонтекстноеМеню);
		ДобавитьОписание(Кнопка.Имя,,,,, Ключ);	
			
		Кнопка = СоздатьНайтиКнопку("Отправить__" + ИдентификаторЭлемента,
			"Отправить",
		    Элемент.КонтекстноеМеню);
		ДобавитьОписание(Кнопка.Имя,,,,, Ключ);	
			
		Если ЭтоАдресВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла) Тогда
			//ЭтотОбъект["ПрисоединенныйФайл__" + ИдентификаторЭлемента] = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
			ЭтотОбъект["Группа_"+ИдентификаторЭлемента(ЭлементВидаФайла.ВидФайла)+"_ПрисоединенныйФайл__" + ИдентификаторЭлемента] = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла; // ++ VOG Ульянов И.В. 21.11.2019 bugs 837
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьПлиткиПрисоединенныхФайловВидаФайла()

&НаСервереБезКонтекста
Функция ЭтоФайлИзображения(ДанныеФайлы)
	Возврат СтрНайти(РасширенияИзображений(), ДанныеФайлы.Расширение) > 0;
КонецФункции // ЭтоФайлИзображения()

&НаКлиентеНаСервереБезКонтекста
Функция РасширенияИзображений()
	Возврат вогУправлениеОпросамиКлиентСервер.РасширенияИзображений();	
КонецФункции // РасширенияИзображений()

&НаКлиенте
Процедура Подключаемый_ПлиткаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаОписания = НайтиСтрокуОписания(ЭтотОбъект, Элемент.Имя);
	Если СтрокаОписания = Неопределено Тогда
		Возврат;
	
	КонецЕсли;
	
	Элементы.ДеревоПрисоединенныеФайлы.ТекущаяСтрока = СтрокаОписания.ИдентификаторСтрокиДерева;
	ОткрытьФайл();
	
КонецПроцедуры // Подключаемый_ПлиткаНажатие()

#КонецОбласти

#Область Настройки
	
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНастройкиПоУмолчанию()

	Настройки = Новый Структура;
	Настройки.Вставить("ВариантПросмотраПлиткой", Ложь);
	Настройки.Вставить("ЭлементовПоГоризонтали" , 5);
	
	Возврат Настройки;

КонецФункции // ПолучитьНастройкиПоУмолчанию()

&НаСервере
Процедура СохранитьНастройки()
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "Настройки", Настройки);	
КонецПроцедуры // СохранитьНастройки()

#КонецОбласти

#Область ОписаниеЭлементов
	
&НаСервере
Процедура ВыполнитьОбработкуДанныхФормы(Ключ)
	
	МассивСтрок 			  = Новый Массив;
	МассивУдаляемыхРеквизитов = Новый Массив;
	СтрокиОписания = ТаблицаОписания.НайтиСтроки(
		Новый Структура("Ключ", Ключ));
	
	Для каждого СтрокаОписания Из СтрокиОписания Цикл
		Элемент = Элементы.Найти(СтрокаОписания.ИмяЭлемента);		
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОписания.ПутьКДанным) Тогда
			МассивУдаляемыхРеквизитов.Добавить(СтрокаОписания.ПутьКДанным);	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОписания.ИмяКоманды) Тогда
			Команда = Команды.Найти(СтрокаОписания.ИмяКоманды);
			Если Команда <> Неопределено Тогда
				Команды.Удалить(Команда);
			
			КонецЕсли;
		
		КонецЕсли;
		
		МассивСтрок.Добавить(СтрокаОписания);
		
	КонецЦикла;
	
	//Удалим реквизиты
	Если МассивУдаляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(,МассивУдаляемыхРеквизитов);	
	КонецЕсли;
	
	СтрокиОписания = ТаблицаОписания.НайтиСтроки(
		Новый Структура("Ключ", Ключ));
	Для каждого СтрокаОписания Из СтрокиОписания Цикл
		ТаблицаОписания.Удалить(СтрокаОписания);	
	КонецЦикла;

КонецПроцедуры // ВыполнитьОбработкуДанныхФормы()

&НаСервере
Процедура ДобавитьОписание(ИмяЭлемента, 
						   ПутьКДанным = "", 
						   ИмяКоманды = "", 
						   Ссылка = Неопределено, 
						   ИдентификаторСтрокиДерева = 0,
						   Ключ = "")

	НоваяСтрока = ТаблицаОписания.Добавить();	
	НоваяСтрока.ИмяЭлемента 			  = ИмяЭлемента;
	НоваяСтрока.ПутьКДанным				  = ПутьКДанным;
	НоваяСтрока.ИмяКоманды  			  = ИмяКоманды;
	НоваяСтрока.Ссылка      			  = Ссылка;
	НоваяСтрока.ИдентификаторСтрокиДерева = ИдентификаторСтрокиДерева;
	НоваяСтрока.Ключ	    			  = Ключ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуОписания(Форма, ИмяЭлемента)

	Строки = Форма.ТаблицаОписания.НайтиСтроки(Новый Структура("ИмяЭлемента", ИмяЭлемента));	
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0]
	Иначе	
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции // НайтиСтрокуОписания()

&НаСервере
Функция СоздатьНайтиКоманду(ИмяКоманды, 
							Действие,
							Заголовок = "",
							ОтображениеКнопки = Неопределено,
							Картинка = Неопределено)
							
	Команда = Команды.Найти(ИмяКоманды);						
	Если Команда = Неопределено Тогда
		Команда 			= Команды.Добавить(ИмяКоманды);
		Команда.Действие	= Действие;
		Команда.Заголовок	= Заголовок;
		
		Если ОтображениеКнопки <> Неопределено Тогда
			Команда.Отображение	= ОтображениеКнопки;
		КонецЕсли;
		
		Если Картинка <> Неопределено Тогда
			Команда.Картинка = Картинка;
		КонецЕсли;
		
	КонецЕсли;			
	
	Возврат Команда;
	
КонецФункции // СоздатьНайтиКоманду()

&НаСервере
Функция СоздатьНайтиКнопку(ИмяКнопки, 
						   ИмяКоманды,
						   Родитель = Неопределено,
						   Ширина = Неопределено, 
						   Высота = Неопределено);  
						   
	Кнопка = Элементы.Найти(ИмяКнопки);
	Если Кнопка = Неопределено Тогда
		Кнопка 			  = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ?(Родитель = Неопределено, ЭтаФорма, Родитель));
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		Если Ширина <> Неопределено Тогда
			Кнопка.Ширина = Ширина;
		КонецЕсли;
		
		Если Высота <> Неопределено Тогда
			Кнопка.Высота = Высота;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Кнопка;
	
КонецФункции // СоздатьНайтиКнопку()

&НаСервере
Функция СоздатьНайтиОбычнуюГруппу(ИмяГруппы,
						   		Родитель = Неопределено,
						   		Группировка = Неопределено,
						   		Отображение = Неопределено, 
						   		РастягиватьПоГоризонтали = Неопределено,
						   		РастягиватьПоВертикали = Неопределено,
						   		ЗаголовокГруппы = "")
						   	
	Группа = Элементы.Найти(ИмяГруппы);
	Если Группа = Неопределено Тогда
		Группа   		   		  		= Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ?(Родитель = Неопределено, ЭтаФорма, Родитель));	
		Группа.Вид		   		  		= ВидГруппыФормы.ОбычнаяГруппа;	
		Группа.Группировка 		  		= ?(Группировка = Неопределено, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, Группировка);
		Группа.Отображение 		   		= ?(Отображение = Неопределено, ОтображениеОбычнойГруппы.Нет, Отображение);
		Группа.ОтображатьЗаголовок 		= ЗначениеЗаполнено(ЗаголовокГруппы);	
		Группа.Заголовок 				= ЗаголовокГруппы;
		Группа.РастягиватьПоГоризонтали = РастягиватьПоГоризонтали;
		Группа.РастягиватьПоВертикали   = РастягиватьПоВертикали;
		
	КонецЕсли;
	
	Возврат Группа;	
	
КонецФункции // СоздатьНайтиГруппу()

&НаСервереБезКонтекста
Функция ИдентификаторЭлемента(Ссылка)

	Возврат СтрЗаменить(Ссылка.УникальныйИдентификатор(), "-", "_");	
	
КонецФункции // ИдентификаторЭлемента()

// ++ VOG Солодов В.В. 03.07.2019
&НаКлиенте
Процедура ОсвободитьФайл(Знач СтрокаДерева, Отказ)
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(
		СтрокаДерева.ПрисоединенныйФайл,
		Неопределено,
		Неопределено,
		"");
		
	РасширениеПодключено = РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	Если РасширениеПодключено Тогда
		
		ПерсональныеНастройкиРаботыСФайлами =
		РаботаСФайламиСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
		
		ТекстовыеФайлыСпособОткрытия = ПерсональныеНастройкиРаботыСФайлами.ТекстовыеФайлыСпособОткрытия;
		Если ТекстовыеФайлыСпособОткрытия 
			= ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
			
			ТекстовыеФайлыРасширение = ПерсональныеНастройкиРаботыСФайлами.ТекстовыеФайлыРасширение;
			Если РаботаСФайламиСлужебныйКлиентСервер.РасширениеФайлаВСписке(ТекстовыеФайлыРасширение, ДанныеФайла.Расширение) Тогда
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Файл", ДанныеФайла.Ссылка);
				ПараметрыФормы.Вставить("ДанныеФайла", ДанныеФайла);
				ПараметрыФормы.Вставить("ИмяОткрываемогоФайла", ДанныеФайла.Наименование);
				
				Форма = ПолучитьФорму(
					"Обработка.РаботаСФайлами.Форма.РедактированиеТекстовогоФайла",
					ПараметрыФормы,
					,
					ДанныеФайла.Ссылка);
					
				Если Форма <> Неопределено
					И Форма.Открыта() Тогда
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Попытка
			ЗаписьФайла = Новый ЗаписьТекста(ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге,,, Истина);
			ЗаписьФайла.Закрыть();
		Исключение
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Если Отказ Тогда
		ШаблонСообщения = НСтр("ru = 'Открыт файл ""%1"". Закройте файл и повторите попытку.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаДерева.Наименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		РаботаСФайламиСлужебныйВызовСервера.ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры // -- VOG Солодов В.В. 03.07.2019

#КонецОбласти

// ++ VOG Солодов В.В. 23.01.2020 CRM-141
&НаСервере
Процедура СкрытьКнопкиИзменения()
	
	Элементы.ФормаДобавить.Видимость 				= Ложь;
	Элементы.ОткрытьФайлДляРедактирования.Видимость = Ложь;
	Элементы.ФормаОбновитьИзФайлаНаДиске.Видимость 	= Ложь;
	Элементы.ДобавитьПапку.Видимость				= Ложь;
	Для Каждого ЭлементКонтекстногоМеню Из Элементы.ДеревоПрисоединенныеФайлыКонтекстноеМеню.ПодчиненныеЭлементы Цикл
		
		Если ЭлементКонтекстногоМеню.Имя = "ДеревоПрисоединенныеФайлыКонтекстноеМенюДобавить"
			Или ЭлементКонтекстногоМеню.Имя = "ДеревоПрисоединенныеФайлыКонтекстноеМенюИзменить"
			Или ЭлементКонтекстногоМеню.Имя = "ДеревоПрисоединенныеФайлыКонтекстноеМенюУдалить"Тогда
			
			ЭлементКонтекстногоМеню.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // -- VOG Солодов В.В. 23.01.2020

//Кайдашов 
// +++ VOG Кулаков П.Л. 22.04.2021 DEV-448
&НаСервере
Функция ДобавитьПапкуНаСервере(ВидФайла)
	
	МетаданныеСправочникаСФайлами = Метаданные.НайтиПоТипу(ТипСправочникаСФайлами);
	НаименованиеГруппы = Формат(ТекущаяДата(),"ДЛФ=D");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникПрисоединенныхФайлов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + МетаданныеСправочникаСФайлами.Имя + " КАК СправочникПрисоединенныхФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.вогПрисоедниненныеФайлыОбъектовПоВидам КАК вогПрисоедниненныеФайлыОбъектовПоВидам
		|		ПО СправочникПрисоединенныхФайлов.Ссылка = вогПрисоедниненныеФайлыОбъектовПоВидам.ПрисоединенныйФайл
		|			И (вогПрисоедниненныеФайлыОбъектовПоВидам.ВидФайла = &ВидФайла)
		|ГДЕ
		|	СправочникПрисоединенныхФайлов.ВладелецФайла = &ВладелецФайла
		|	И СправочникПрисоединенныхФайлов.ЭтоГруппа
		|	И СправочникПрисоединенныхФайлов.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Запрос.УстановитьПараметр("ВидФайла", ВидФайла);
	Запрос.УстановитьПараметр("Наименование", НаименованиеГруппы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Сообщить("Папка """ + НаименованиеГруппы + """ уже существует");
		Возврат Ложь;
	КонецЕсли;
	
	НоваяГруппа = Справочники[МетаданныеСправочникаСФайлами.Имя].СоздатьГруппу();
	НоваяГруппа.Наименование = НаименованиеГруппы;
	НоваяГруппа.ВладелецФайла = ВладелецФайла;
	НоваяГруппа.автор = ПараметрыСеанса.ТекущийПользователь;
	НоваяГруппа.Записать();
	МЗ = РегистрыСведений.вогПрисоедниненныеФайлыОбъектовПоВидам.СоздатьМенеджерЗаписи();
	МЗ.ВидФайла = ВидФайла;
	МЗ.ПрисоединенныйФайл = НоваяГруппа.Ссылка;
	МЗ.Записать();
	
	Возврат Истина;
	
КонецФункции // --- VOG Кулаков П.Л.

&НаКлиенте
Процедура ДобавитьПапку(Команда)
	
	Если  Элементы.ДеревоПрисоединенныеФайлы.ТекущиеДанные<>Неопределено тогда
		// +++ VOG Кулаков П.Л. 22.04.2021 DEV-448
		ПапкаСоздана = ДобавитьПапкуНаСервере(Элементы.ДеревоПрисоединенныеФайлы.ТекущиеДанные.ВидФайла);
		Если ПапкаСоздана Тогда
			НастроитьСписок();
			РазвернутьСтрокиДерева(Элементы.ДеревоПрисоединенныеФайлы, "ДеревоПрисоединенныеФайлы");
		КонецЕсли;
		// --- VOG Кулаков П.Л.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПрисоединенныеФайлыПриАктивизацииСтроки(Элемент)
	а=1;
КонецПроцедуры

#КонецОбласти
