////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область Общие_Процедуры_И_Функции

&НаКлиенте
Процедура ОбновитьСодержимоеФормыПриИзмененииГруппы()
	
	Если НЕ ИспользоватьГруппы
	 ИЛИ Элементы.ГруппыПользователей.ТекущаяСтрока = ГруппаПользователейВсеПользователи Тогда
		//
		Элементы.ГруппаПоказыватьПользователейДочернихГрупп.ТекущаяСтраница = Элементы.ГруппаНельзяУстановитьСвойство;
		ОбновитьЗначениеПараметраКомпоновкиДанных(ПользователиСписок, "ВыбиратьИерархически", Истина);
		ОбновитьЗначениеПараметраКомпоновкиДанных(ПользователиСписок, "ГруппаПользователей", ГруппаПользователейВсеПользователи);
	Иначе
		//Элементы.ГруппаПоказыватьПользователейДочернихГрупп.ТекущаяСтраница = Элементы.ГруппаУстановитьСвойство;
		ОбновитьЗначениеПараметраКомпоновкиДанных(ПользователиСписок, "ВыбиратьИерархически", ВыбиратьИерархически);
		ОбновитьЗначениеПараметраКомпоновкиДанных(ПользователиСписок, "ГруппаПользователей", Элементы.ГруппыПользователей.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначениеПараметраКомпоновкиДанных(Знач ВладелецПараметров, Знач ИмяПараметра, Знач ЗначениеПараметра)
	
	Для каждого Параметр Из ВладелецПараметров.Параметры.Элементы Цикл
		Если Строка(Параметр.Параметр) = ИмяПараметра Тогда
			Если Параметр.Использование И Параметр.Значение = ЗначениеПараметра Тогда
				Возврат;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВладелецПараметров.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОтборПоОписанию(ЭлементыОтбора, ОписанияЭлементовОтбора, ДоступныеПоля = Неопределено, ЭтоОтборДляДанныхИзКэша = Ложь)
	Для Каждого ОписаниеЭлементаОтбораКлючЗначение Из ОписанияЭлементовОтбора Цикл
		ОписаниеЭлементаОтбора = ОписаниеЭлементаОтбораКлючЗначение.Значение;
		
		Если ТипЗнч(ОписаниеЭлементаОтбора["Значение"]) = Тип("Соответствие") Тогда
			НоваяГруппаОтбора				= ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			НоваяГруппаОтбора.ТипГруппы		= ОписаниеЭлементаОтбора["ВидСравнения"];
			НоваяГруппаОтбора.Использование	= ОписаниеЭлементаОтбора["Использование"];
			
			СоздатьОтборПоОписанию(НоваяГруппаОтбора.Элементы, ОписаниеЭлементаОтбора["Значение"], ДоступныеПоля);
			
		Иначе
			Если ДоступныеПоля <> Неопределено Тогда
				Если ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(ОписаниеЭлементаОтбораКлючЗначение.Ключ)) = Неопределено Тогда Продолжить; КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных(ОписаниеЭлементаОтбораКлючЗначение.Ключ);
			НовыйЭлементОтбора.ВидСравнения		= ОписаниеЭлементаОтбора["ВидСравнения"];
			
			НовыйЭлементОтбора.ПравоеЗначение = ОписаниеЭлементаОтбора["Значение"];
			
			НовыйЭлементОтбора.Использование	= ОписаниеЭлементаОтбора["Использование"];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиПолеВОтборе(ЭлементыОтбора, Поле)
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НайденныйЭлемент = НайтиПолеВОтборе(ЭлементОтбора.Элементы, Поле);
			Если НайденныйЭлемент <> Неопределено Тогда
				Возврат НайденныйЭлемент;
			КонецЕсли;
		Иначе
			Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
				Возврат ЭлементОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура УстановитьЗначениеВОтборе(Отбор, Имя, ВидСравнения, Значение, Использование, ДоступныеПоля = Неопределено)
	Если ДоступныеПоля <> Неопределено Тогда
		Если ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(Имя)) = Неопределено Тогда Возврат; КонецЕсли;
	КонецЕсли;
	ПолеОтбораЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя);
	ЭлементОтбора = НайтиПолеВОтборе(Отбор.Элементы, ПолеОтбораЛевоеЗначение);
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = ПолеОтбораЛевоеЗначение;
	Иначе
		Возврат;
	КонецЕсли;
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.Использование = Использование;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбъектИмеетСвойство(ПроверяемыйОбъект, ПроверяемойСвойство)
	Попытка
		ТестоваяПеременная = ПроверяемыйОбъект[ПроверяемойСвойство];
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СортироватьМассивПоВозрастанию(Массив)
	Для номер = 0 По Массив.ВГраница() - 1 Цикл
		Для мномер = 0 По Массив.ВГраница() - 1 Цикл
			Если Массив[мномер] > Массив[мномер + 1] Тогда
				СтароеЗначение = Массив[мномер];
				Массив[мномер] = Массив[мномер + 1];
				Массив[мномер + 1] = СтароеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейУстановитьОтбор()
	
	Если НЕ НастройкаПоТипуУслуги Тогда
		
		// Рассматриваем 2 варианта: софтфон доступен и не доступен
		
		Если НЕ сфпИспользоватьСофтфон Тогда
			// 1 Вариант (не доступен):
			ТекущееПодразделение = Элементы.СтруктураПредприятия.ВыделенныеСтроки;
			Если ТекущееПодразделение = Неопределено Тогда
				ТекущееПодразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
			КонецЕсли;	
			
			Элементы.СписокПользователей.Видимость = Истина;
			Элементы.ТаблицаПользователей.Видимость = Ложь;
			Элементы.СтруктураПредприятия.Видимость = Истина;
			Элементы.Подразделения.Видимость = Ложь;
			
			Если ТекущееПодразделение.Количество() > 0 И НЕ (ТекущееПодразделение = Неопределено) И НЕ ЗначениеЗаполнено(ТекущееПодразделение[0]) Тогда
				// Это корень дерева, значит в списке пользователей должен виден весь их список.
				ЭлементОтбора = СписокПользователей.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[0].Элементы[0];
				ЭлементОтбора.ПравоеЗначение = ТекущееПодразделение;								
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				
				ЭлементОтбора2 = СписокПользователей.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[0].Элементы[1];
				ЭлементОтбора2.Использование = Истина;
			ИначеЕсли ТекущееПодразделение.Количество() > 0 Тогда
				ЭлементОтбора = СписокПользователей.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[0].Элементы[0];
				ЭлементОтбора.ПравоеЗначение = ТекущееПодразделение;								
				ЭлементОтбора.ВидСравнения = ?(ВыбиратьИерархически, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, ВидСравненияКомпоновкиДанных.ВСписке);
				
				ЭлементОтбора2 = СписокПользователей.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[0].Элементы[0].Элементы[1];
				ЭлементОтбора2.Использование = Ложь;
			КонецЕсли;		
			
		Иначе
			// 2 Вариант (доступен):
			
			ТекущееПодразделение = Элементы.СтруктураПредприятия.ВыделенныеСтроки;
			Если ТекущееПодразделение = Неопределено Тогда
				ТекущееПодразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
			КонецЕсли;	
			
			Элементы.СписокПользователей.Видимость = Ложь;
			Элементы.ТаблицаПользователей.Видимость = Истина;
			Элементы.СтруктураПредприятия.Видимость = Истина;
			Элементы.Подразделения.Видимость = Ложь;
			
			Элементы.ТаблицаПользователейВнутреннийНомер.Видимость 	= Истина;
			Если сфпВиднаКолонкаСтатусов и сфпПоказыватьСтатус Тогда
				Элементы.ТаблицаПользователейСтатус.Видимость			= Истина;
			Иначе
				Элементы.ТаблицаПользователейСтатус.Видимость			= Ложь;
			КонецЕсли;				
			Элементы.ТаблицаПользователей.Шапка 					= Истина;			
			ТаблицаПользователей.Очистить();			
			
			Если ТекущееПодразделение.Количество() > 0 И НЕ (ТекущееПодразделение = Неопределено) И НЕ ЗначениеЗаполнено(ТекущееПодразделение[0]) Тогда
				// это корень дерева
				ВыбранноеПодразделение = ТекущееПодразделение[0];
				МассивПользователей = ПолучитьПользователейПодразделения(ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"), Истина);
				ПоказыватьСтатус = сфпСофтФонПроКлиент.сфпИспользуетсяОбработчикOnLinesStatus();
				Для Каждого ЭлементМассива Из МассивПользователей Цикл
					НоваяСтрока = ТаблицаПользователей.Добавить();
					НоваяСтрока.Статус = 2;
					НоваяСтрока.Ссылка = ЭлементМассива;
					НоваяСтрока.Картинка = 1;
					НоваяСтрока.Наименование = Строка(НоваяСтрока.Ссылка);
					НоваяСтрока.ВнутреннийНомер = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(НоваяСтрока.Ссылка, Истина);
					Если сфпВиднаКолонкаСтатусов и ПоказыватьСтатус И ЗначениеЗаполнено(НоваяСтрока.ВнутреннийНомер) Тогда
						СтатусЛинииПоНомеру = сфпСоответствиеЛинийИСтатусов.Получить(НоваяСтрока.ВнутреннийНомер);
						Если СтатусЛинииПоНомеру <> Неопределено Тогда
							НоваяСтрока.Статус = СтатусЛинииПоНомеру;
						КонецЕсли;							
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТекущееПодразделение.Количество() > 0 Тогда
				ВыбранноеПодразделение = ТекущееПодразделение[0];				
				МассивПользователей = ПолучитьПользователейПодразделения(ВыбранноеПодразделение, Ложь);
				ПоказыватьСтатус = сфпСофтФонПроКлиент.сфпИспользуетсяОбработчикOnLinesStatus();
				Для Каждого ЭлементМассива Из МассивПользователей Цикл
					НоваяСтрока = ТаблицаПользователей.Добавить();
					НоваяСтрока.Статус = 2;
					НоваяСтрока.Ссылка = ЭлементМассива;
					НоваяСтрока.Картинка = 1;
					НоваяСтрока.Наименование = Строка(НоваяСтрока.Ссылка);
					НоваяСтрока.ВнутреннийНомер = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(НоваяСтрока.Ссылка, Истина);
					Если сфпВиднаКолонкаСтатусов И сфпПоказыватьСтатус И ЗначениеЗаполнено(НоваяСтрока.ВнутреннийНомер)Тогда
						СтатусЛинииПоНомеру = сфпСоответствиеЛинийИСтатусов.Получить(НоваяСтрока.ВнутреннийНомер);
						Если СтатусЛинииПоНомеру <> Неопределено Тогда
							НоваяСтрока.Статус = СтатусЛинииПоНомеру;
						КонецЕсли;							
					КонецЕсли;						
				КонецЦикла;
			КонецЕсли;				
			
		КонецЕсли;
		
	Иначе
		
		Подразделение = Элементы.Подразделения.ВыделенныеСтроки;
		Если Подразделение.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;		
		
		ТекущееПодразделение = Подразделения.НайтиПоИдентификатору(Подразделение[0]).Ссылка;		
		
		Элементы.СписокПользователей.Видимость 	= Ложь;
		Элементы.ТаблицаПользователей.Видимость = Истина;		
		Если сфпИспользоватьСофтфон Тогда
			Элементы.ТаблицаПользователейВнутреннийНомер.Видимость 	= Истина;
			Если сфпВиднаКолонкаСтатусов и сфпПоказыватьСтатус Тогда
				Элементы.ТаблицаПользователейСтатус.Видимость			= Истина;
			Иначе
				Элементы.ТаблицаПользователейСтатус.Видимость			= Ложь;
			КонецЕсли;				
			Элементы.ТаблицаПользователей.Шапка 					= Истина;
		Иначе
			Элементы.ТаблицаПользователейВнутреннийНомер.Видимость 	= Ложь;
			Элементы.ТаблицаПользователейСтатус.Видимость 			= Ложь;			
			Элементы.ТаблицаПользователей.Шапка 					= Ложь;
		КонецЕсли;			
		Элементы.СтруктураПредприятия.Видимость = Ложь;
		Элементы.Подразделения.Видимость = Истина;		
		ТаблицаПользователей.Очистить();
		
		Если ТекущееПодразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка") Тогда
			// Это корень дерева, значит показывать необходимо весь список отобранных пользователей
			Для Каждого ЭлементМассива Из МассивПользователейПоТипуУслуги Цикл
				НоваяСтрока = ТаблицаПользователей.Добавить();
				НоваяСтрока.Статус = 2;
				НоваяСтрока.Ссылка = ЭлементМассива.Значение;
				НоваяСтрока.Картинка = 1;
				НоваяСтрока.Наименование = Строка(НоваяСтрока.Ссылка);
				Если сфпИспользоватьСофтфон Тогда
					НоваяСтрока.ВнутреннийНомер = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(НоваяСтрока.Ссылка, Истина);
					Если сфпВиднаКолонкаСтатусов И сфпПоказыватьСтатус И ЗначениеЗаполнено(НоваяСтрока.ВнутреннийНомер) Тогда
						СтатусЛинииПоНомеру = сфпСоответствиеЛинийИСтатусов.Получить(НоваяСтрока.ВнутреннийНомер);
						Если СтатусЛинииПоНомеру <> Неопределено Тогда
							НоваяСтрока.Статус = СтатусЛинииПоНомеру;
						КонецЕсли;							
					КонецЕсли;						
				КонецЕсли;					
			КонецЦикла;				
		Иначе
			СписокПользователейУстановитьОтборНаСервере(ТекущееПодразделение);
			Если сфпИспользоватьСофтфон Тогда
				Для Каждого ЭлементТаблицы Из ТаблицаПользователей Цикл
					ЭлементТаблицы.ВнутреннийНомер = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ЭлементТаблицы.Ссылка, Истина);					
					Если сфпВиднаКолонкаСтатусов И сфпПоказыватьСтатус И ЗначениеЗаполнено(ЭлементТаблицы.ВнутреннийНомер) Тогда
						СтатусЛинииПоНомеру = сфпСоответствиеЛинийИСтатусов.Получить(ЭлементТаблицы.ВнутреннийНомер);
						Если СтатусЛинииПоНомеру <> Неопределено Тогда
							ЭлементТаблицы.Статус = СтатусЛинииПоНомеру;
						КонецЕсли;							
					КонецЕсли;					
				КонецЦикла;				
			КонецЕсли;
		КонецЕсли;	
			
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура СписокПользователейУстановитьОтборНаСервере(Подразделение)
	
	ДобавитьРуководителя = Истина;
			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Подразделение В ИЕРАРХИИ(&ТекущееПодразделение)
	|	И Пользователи.Ссылка В(&МассивПользователей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование";
	
	Запрос.УстановитьПараметр("ТекущееПодразделение", Подразделение);
	Запрос.УстановитьПараметр("МассивПользователей", ПреобразоватьСписокЗначенийВМассив(МассивПользователейПоТипуУслуги));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПользователей.Добавить();
		НоваяСтрока.Статус = 2;		
		НоваяСтрока.Ссылка = Выборка.Пользователь;
		НоваяСтрока.Картинка = 1;	
		Если ЗначениеЗаполнено(Подразделение.ТекущийРуководитель) И (Выборка.Пользователь = Подразделение.ТекущийРуководитель) Тогда
			НоваяСтрока.Наименование = Строка(НоваяСтрока.Ссылка) + Нстр("ru = ' (руководитель)'");					
			ДобавитьРуководителя = Ложь;
			Если ТаблицаПользователей.Количество() > 1 Тогда
				// значит уже есть добавленные пользователи, руководителя надо сдвинуть наверх
				ТекИндекс = ТаблицаПользователей.Индекс(НоваяСтрока);
				ТаблицаПользователей.Сдвинуть(ТекИндекс, -ТекИндекс); 
			КонецЕсли;				
		Иначе
			НоваяСтрока.Наименование = Строка(НоваяСтрока.Ссылка);					
		КонецЕсли;			
	КонецЦикла;		
	
	Если ТаблицаПользователей.Количество() > 0 И ДобавитьРуководителя Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Пользователи.Ссылка КАК Пользователь
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Подразделение = &ТекущееПодразделение
		|	И Пользователи.Ссылка В(&МассивПользователей)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.Наименование";
		Запрос.УстановитьПараметр("ТекущееПодразделение", Подразделение);
		Запрос.УстановитьПараметр("МассивПользователей", ПреобразоватьСписокЗначенийВМассив(МассивПользователейПоТипуУслуги));
		Результат = Запрос.Выполнить().Пустой();
		Если НЕ Результат Тогда
			Если ЗначениеЗаполнено(Подразделение.ТекущийРуководитель) Тогда
				НоваяСтрока = ТаблицаПользователей.Вставить(0);
				НоваяСтрока.Статус = 2;				
				НоваяСтрока.Ссылка = Подразделение.ТекущийРуководитель;
				НоваяСтрока.Картинка = 1;	
				НоваяСтрока.Наименование = Строка(НоваяСтрока.Ссылка) + Нстр("ru = ' (руководитель)'");									
				Если ТаблицаПользователей.Количество() > 1 Тогда
					// значит уже есть добавленные пользователи, руководителя надо сдвинуть наверх
					ТекИндекс = ТаблицаПользователей.Индекс(НоваяСтрока);
					ТаблицаПользователей.Сдвинуть(ТекИндекс, -ТекИндекс); 
				КонецЕсли;								
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПользователейПодразделения(Знач ТекПодразделение, ВсеПодразделения = Ложь)
	Запрос = Новый Запрос;
	ТекстЗапроса = ("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|	И Пользователи.Подразделение В ИЕРАРХИИ(&ТекПодразделение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование
	|");
	
	Если ВсеПодразделения Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Пользователи.Подразделение В ИЕРАРХИИ(&ТекПодразделение)","");
	Иначе
		Запрос.УстановитьПараметр("ТекПодразделение", ТекПодразделение);		
	КонецЕсли;		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции	

&НаСервере
Процедура СформироватьТаблицуПодразделений(ТипУслуги = Неопределено)
	
	Подразделения.ПолучитьЭлементы().Очистить();;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =   "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураПредприятия.Ссылка КАК Ссылка,
	|	СтруктураПредприятия.Наименование КАК Наименование,
	|	2 КАК Картинка,
	|	Ложь КАК НеОтображать
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос.Текст = ТекстЗапроса;
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоФормы = РеквизитФормыВЗначение("Подразделения");
	ДеревоФормы = ДЗ;
	ЗначениеВДанныеФормы(ДеревоФормы, Подразделения);
	
	КореньДерева = Подразделения.ПолучитьЭлементы().Вставить(0);
	КореньДерева.Ссылка = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	КореньДерева.Наименование = Нстр("ru = 'Подразделения предприятия'");
	КореньДерева.Картинка = 2;
	КореньДерева.НеОтображать = Ложь;
	ЭлементыДерева = Подразделения.ПолучитьЭлементы();
	
КонецПроцедуры	

&НаКлиенте
Процедура ФильтроватьДеревоПоТипуУслуги(ЭлементыДерева)
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.Ссылка = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка") Тогда
			ЭлементДерева.НеОтображать = Ложь;
		Иначе	
			ЭлементДерева.НеОтображать = НЕ УПодразделенияЕстьВыбранныйТипУслуги(ЭлементДерева.Ссылка);
		КонецЕсли;			
		
		Попытка		ТекЭлементРодитель = ЭлементДерева.ПолучитьРодителя();
		Исключение	ТекЭлементРодитель = Неопределено;
		КонецПопытки;
		
		Пока ТекЭлементРодитель <> Неопределено Цикл
			ТекЭлементРодитель.НеОтображать = Ложь;
			
			Попытка		ТекЭлементРодитель = ТекЭлементРодитель.ПолучитьРодителя();
			Исключение	ТекЭлементРодитель = Неопределено;
			КонецПопытки;
		КонецЦикла;
		
		ФильтроватьДеревоПоТипуУслуги(ЭлементДерева.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры	

&НаСервере
Функция УПодразделенияЕстьВыбранныйТипУслуги(ПодразделениеСсылка)
	Если ПодразделениеСсылка.CRM_ТипУслуги.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;		
	МассивСтрок = ПодразделениеСсылка.CRM_ТипУслуги.НайтиСтроки(Новый Структура("ТипУслуги", ТипУслуги));
	Если МассивСтрок.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;		
КонецФункции

&НаСервере
Процедура ЗаполнитьМассивПользователейПоТипуУслуги()
	
	МассивПользователейПоТипуУслуги = Новый СписокЗначений;
	Если НЕ ЗначениеЗаполнено(ТипУслуги) Тогда Возврат; КонецЕсли;
	
	МассивСсылок = Новый Массив();
	МассивСсылок.Добавить(ТипУслуги);
	
	Запрос = Новый Запрос;
	ТекстЗапроса ="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СтруктураПредприятияCRM_ТипУслуги.Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия.CRM_ТипУслуги КАК СтруктураПредприятияCRM_ТипУслуги
	|ГДЕ
	|	СтруктураПредприятияCRM_ТипУслуги.ТипУслуги В(&МассивСсылок)
	|	И НЕ СтруктураПредприятияCRM_ТипУслуги.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = ТекстЗапроса;
	МассивПодразделений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
	Запрос.Текст =   "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Подразделение В(&МассивПодразделений)
	|	И НЕ Пользователи.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивПользователейПоТипуУслуги.Добавить(Выборка.Пользователь);
	КонецЦикла;		
	
КонецПроцедуры	

&НаСервере
Функция ПреобразоватьСписокЗначенийВМассив(СписокЗнач)
	МассивВозврата = Новый Массив;
	Для Каждого ЭлементСписка Из СписокЗнач Цикл
		МассивВозврата.Добавить(ЭлементСписка.Значение);
	КонецЦикла;		
	Возврат МассивВозврата;
КонецФункции	

&НаКлиенте
Процедура ПерезаполнитьСтатусыЛинийВТаблицаПользователей()
	Для Каждого ЭлементТаблицы Из ТаблицаПользователей Цикл
		Если сфпВиднаКолонкаСтатусов И сфпПоказыватьСтатус И ЗначениеЗаполнено(ЭлементТаблицы.ВнутреннийНомер) Тогда
			СтатусЛинииПоНомеру = сфпСоответствиеЛинийИСтатусов.Получить(ЭлементТаблицы.ВнутреннийНомер);
			Если СтатусЛинииПоНомеру <> Неопределено Тогда
				ЭлементТаблицы.Статус = СтатусЛинииПоНомеру;
			КонецЕсли;							
		КонецЕсли;					
	КонецЦикла;					
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	РежимПодбора = "0";
	
	Если Параметры.Свойство("ТекущаяСтрока") И ТипЗнч(Параметры.ТекущаяСтрока) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
		Если ИспользоватьГруппы Тогда
			Элементы.ГруппыПользователей.ТекущаяСтрока = Параметры.ТекущаяСтрока;
		Иначе
			Параметры.ТекущаяСтрока = Неопределено;
		КонецЕсли;
	Иначе
		ТекущийЭлемент = Элементы.ПользователиСписок;
		Элементы.ГруппыПользователей.ТекущаяСтрока = Справочники.ГруппыПользователей.ВсеПользователи;
		ОбновитьЗначениеПараметраКомпоновкиДанных(ПользователиСписок, "ГруппаПользователей", Справочники.ГруппыПользователей.ВсеПользователи);
		ОбновитьЗначениеПараметраКомпоновкиДанных(ПользователиСписок, "ВыбиратьИерархически", Истина);
	КонецЕсли;
	
	Если НЕ ИспользоватьГруппы Тогда
		Параметры.ВыборГруппПользователей = Ложь;
		Элементы.ГруппаПоказыватьПользователейДочернихГрупп.Видимость = Ложь;
		Элементы.ГруппыПользователей.Видимость = Ложь;
	КонецЕсли;
	
	// Настройка постоянных данных для списка пользователей.
	ОбновитьЗначениеПараметраКомпоновкиДанных(ПользователиСписок, "ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	ГруппаПользователейВсеПользователи = Справочники.ГруппыПользователей.ВсеПользователи;
	
	ТекущийПользовательСеанса = Пользователи.ТекущийПользователь();
		
	Если Параметры.Свойство("ТипУслуги") Тогда
		ТипУслуги = Параметры.ТипУслуги;
		НастройкаПоТипуУслуги = Истина;
		ЗаполнитьМассивПользователейПоТипуУслуги();
	КонецЕсли;		
	Если Параметры.Свойство("сфпВиднаКолонкаСтатусов") Тогда
		сфпВиднаКолонкаСтатусов = Параметры.сфпВиднаКолонкаСтатусов;
	КонецЕсли;		
	
	СформироватьТаблицуПодразделений();
	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// +Софтфон
	Если сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Ложь) Тогда
		сфпИспользоватьСофтфон = Истина;
		сфпСофтФонПроКлиент.сфпПолучитьСостоянияЛиний();
		сфпПоказыватьСтатус = сфпСофтФонПроКлиент.сфпИспользуетсяОбработчикOnLinesStatus()
	КонецЕсли;	
	// +Софтфон
	
	ОбновитьСодержимоеФормыПриИзмененииГруппы();
	РежимПодбораПриИзменении(Неопределено);
	
	Если ЗначениеЗаполнено(ТипУслуги) Тогда
		ФильтроватьДеревоПоТипуУслуги(Подразделения.ПолучитьЭлементы());
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененСоставГруппыПользователей" Тогда
		Если Параметр = Элементы.ГруппыПользователей.ТекущаяСтрока Тогда
			Элементы.ПользователиСписок.Обновить();
		КонецЕсли;
	КонецЕсли;	
	
	// +Софтфон
	Если ИмяСобытия = "сфпПерезаполнитьСтатусыЛиний" Тогда
		ПерезаполнитьСтатусыЛинийВТаблицаПользователей();
	КонецЕсли;		
	// +Софтфон	
	
	Если ИмяСобытия = "Запись_Пользователи" и Элементы.ТаблицаПользователей.Видимость Тогда
		СписокПользователейУстановитьОтбор();
	ИначеЕсли ИмяСобытия = "Запись_СтруктураПредприятия" и Элементы.Подразделения.Видимость Тогда
		СформироватьТаблицуПодразделений();
		Если ЗначениеЗаполнено(ТипУслуги) Тогда
			ФильтроватьДеревоПоТипуУслуги(Подразделения.ПолучитьЭлементы());
		КонецЕсли;				
		СписокПользователейУстановитьОтбор();
	КонецЕсли;		
		
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки[ВыбиратьИерархически] = Неопределено Тогда
		ВыбиратьИерархически = Истина;
	КонецЕсли;
	
	Если Настройки[РежимПодбора] = Неопределено Тогда
		РежимПодбора = "0";
	КонецЕсли;

КонецПроцедуры

#Область ОбработчикиСобытийКомандИЭлементовФормы

&НаКлиенте
Процедура ГруппыПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейПриАктивизацииСтроки(Элемент)
	
	ОбновитьСодержимоеФормыПриИзмененииГруппы();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповеститьОВыборе(Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыФормы = Новый Структура;
		
		Если ЗначениеЗаполнено(Элементы.ГруппыПользователей.ТекущаяСтрока) Тогда
			
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Родитель", Элементы.ГруппыПользователей.ТекущаяСтрока));
		КонецЕсли;
		
		ОткрытьФорму("Справочник.ГруппыПользователей.ФормаОбъекта", ПараметрыФормы, Элементы.ГруппыПользователей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ПользователиСписок.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	ОповеститьОВыборе(ТекДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПользователиСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ГруппаНовогоПользователя", Элементы.ГруппыПользователей.ТекущаяСтрока);
	
	Если Копирование И Элемент.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элемент.ТекущаяСтрока);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", ПараметрыФормы, Элементы.ПользователиСписок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбиратьИерархическиПриИзменении(Элемент)
	
	Если РежимПодбора = "0" Тогда
		ОбновитьСодержимоеФормыПриИзмененииГруппы();
	Иначе	
		СписокПользователейУстановитьОтбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияПриАктивизацииСтроки(Элемент)
	СписокПользователейУстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РежимПодбораПриИзменении(Элемент)

	Если РежимПодбора = "0" Тогда
		Элементы.ГруппаГруппыПользователей.Видимость			  = Истина;
		Элементы.ГруппаПользователиСписок.Видимость				  = Истина;
		
		Элементы.ГруппаСтруктураПредприятия.Видимость			  = Ложь;
		Элементы.ГруппаСписокПользователейПодразделений.Видимость = Ложь;
		Элементы.НастройкаПоТипуУслуги.Видимость = Ложь;
	Иначе
		Элементы.ГруппаГруппыПользователей.Видимость			  = Ложь;
		Элементы.ГруппаПользователиСписок.Видимость				  = Ложь;
		
		Элементы.ГруппаСтруктураПредприятия.Видимость			  = Истина;		
		Элементы.ГруппаСписокПользователейПодразделений.Видимость = Истина;
		Если НастройкаПоТипуУслуги Тогда
			Элементы.НастройкаПоТипуУслуги.Видимость = Истина;
			Элементы.НастройкаПоТипуУслуги.Заголовок = Нстр("ru = 'Использовать отбор подразделений по типу услуг '") + Строка(ТипУслуги);
		КонецЕсли;					
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.СписокПользователей.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	ОповеститьОВыборе(ТекДанные.Ссылка);	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыФормы = Новый Структура;
		
		Если ЗначениеЗаполнено(Элементы.ГруппыПользователей.ТекущаяСтрока) Тогда
			
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Родитель", Элементы.СтруктураПредприятия.ТекущаяСтрока));
		КонецЕсли;
		
		ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаОбъекта", ПараметрыФормы, Элементы.СтруктураПредприятия);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтруктураПредприятияВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповеститьОВыборе(Значение);
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	
	Если Копирование И Элемент.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элемент.ТекущаяСтрока);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", ПараметрыФормы, Элементы.СписокПользователей);

КонецПроцедуры

&НаКлиенте
Процедура СписокПользователейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Элементы.КалендарьТабличныйДокумент.Редактирование = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияКалендарьТабличныйДокументОтменитьРежимРедактирования", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияПриАктивизацииСтроки(Элемент)
	СписокПользователейУстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ТаблицаПользователей.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	ОповеститьОВыборе(ТекДанные.Ссылка);	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПоТипуУслугиПриИзменении(Элемент)
	СписокПользователейУстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекущегоПользователя(Команда)
	ТекДанные = Элементы.ТаблицаПользователей.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	Открытьформу("Справочник.Пользователи.ФормаОбъекта", Новый Структура("Ключ", ТекДанные.Ссылка), ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекущееПодразделение(Команда)
	ТекДанные = Элементы.Подразделения.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;	
	Открытьформу("Справочник.СтруктураПредприятия.ФормаОбъекта", Новый Структура("Ключ", ТекДанные.Ссылка), ЭтотОбъект);	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
