
///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

&НаКлиенте
Перем КэшСвойстваДинамическогоСпискаРешений;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаСервере
// Процедура устанавливает отборы решений.
//
// Параметры:
//	Нет.
//
Процедура УстановитьОтборыРешений()
	ГруппаОтбораПоАвтору			= Неопределено;
	ЭлементОтбораПоСсылке			= Неопределено;
	ЭлементОтбораПоПодразделению	= Неопределено;
	ЭлементОтбораПоСостоянию		= Неопределено;
	ЭлементОтбораПоПроекту			= Неопределено;
	Для Каждого ЭлементОтбора Из СписокРешений.Отбор.Элементы Цикл
		Если ЭлементОтбора.Представление = "ГруппаПоАвтору" Тогда
			ГруппаОтбораПоАвтору = ЭлементОтбора;
		ИначеЕсли ЭлементОтбора.Представление = "ОтборПоСсылке" Тогда
			ЭлементОтбораПоСсылке = ЭлементОтбора;
		ИначеЕсли ЭлементОтбора.Представление = "ОтборПоПодразделению" Тогда
			ЭлементОтбораПоПодразделению = ЭлементОтбора;
		ИначеЕсли ЭлементОтбора.Представление = "ОтборПоСостоянию" Тогда
			ЭлементОтбораПоСостоянию = ЭлементОтбора;
		ИначеЕсли ЭлементОтбора.Представление = "ОтборПоПроекту" Тогда
			ЭлементОтбораПоПроекту = ЭлементОтбора;
		КонецЕсли;
	КонецЦикла;	
	// Отбор по автору
	Если ГруппаОтбораПоАвтору = Неопределено Тогда		
		ГруппаОтбораПоАвтору = СписокРешений.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораПоАвтору.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаОтбораПоАвтору.Представление		= "ГруппаПоАвтору";
		ГруппаОтбораПоАвтору.РежимОтображения   = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
		ЭлементОтбора = ГруппаОтбораПоАвтору.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Автор");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
		ЭлементОтбора.ПравоеЗначение	= Пользователи.АвторизованныйПользователь();
		ЭлементОтбора.Представление		= "ОтборПоАвтору";
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора = ГруппаОтбораПоАвтору.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СтатусРешения");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
		ЭлементОтбора.ПравоеЗначение	= Перечисления.CRM_СтатусыРешений.Личное;
		ЭлементОтбора.Представление		= "ОтборПоЛичное";
		ЭлементОтбора.Использование		= Истина;
	КонецЕсли;	
	// Отбор по решениях
	Если бзРешения.Количество() > 0 Тогда
		бзРешенияОбъект = РеквизитФормыВЗначение("бзРешения");
		бзСписокРешений = Новый СписокЗначений;
		бзСписокРешений.ЗагрузитьЗначения(бзРешенияОбъект.ВыгрузитьКолонку("Решение"));
		Если ЭлементОтбораПоСсылке = Неопределено Тогда		
			ЭлементОтбораПоСсылке = СписокРешений.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораПоСсылке.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбораПоСсылке.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбораПоСсылке.Представление		= "ОтборПоСсылке";
			ЭлементОтбораПоСсылке.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
		КонецЕсли;	
		ЭлементОтбораПоСсылке.ПравоеЗначение	= бзСписокРешений;
		ЭлементОтбораПоСсылке.Использование		= Истина;
	ИначеЕсли НЕ (ЭлементОтбораПоСсылке = Неопределено) Тогда		
		ЭлементОтбораПоСсылке.Использование		= Ложь;
	КонецЕсли;	
	// Отбор по подразделению
	Если ЗначениеЗаполнено(бзПодразделение) Тогда
		Если ЭлементОтбораПоПодразделению = Неопределено Тогда		
			ЭлементОтбораПоПодразделению = СписокРешений.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораПоПодразделению.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Подразделение");
			ЭлементОтбораПоПодразделению.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбораПоПодразделению.Представление		= "ОтборПоПодразделению";
			ЭлементОтбораПоПодразделению.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
		КонецЕсли;	
		ЭлементОтбораПоПодразделению.ПравоеЗначение	= бзПодразделение;
		ЭлементОтбораПоПодразделению.Использование	= Истина;
	ИначеЕсли НЕ (ЭлементОтбораПоПодразделению = Неопределено) Тогда		
		ЭлементОтбораПоПодразделению.Использование	= Ложь;
	КонецЕсли;
	// Отбор по состоянию
	Если ЗначениеЗаполнено(бзСостояние) Тогда
		Если ЭлементОтбораПоСостоянию = Неопределено Тогда		
			ЭлементОтбораПоСостоянию = СписокРешений.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораПоСостоянию.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СтатусРешения");
			ЭлементОтбораПоСостоянию.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбораПоСостоянию.Представление		= "ОтборПоСостоянию";
			ЭлементОтбораПоСостоянию.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
		КонецЕсли;	
		ЭлементОтбораПоСостоянию.ПравоеЗначение	= бзСостояние;
		ЭлементОтбораПоСостоянию.Использование	= Истина;
	ИначеЕсли НЕ (ЭлементОтбораПоСостоянию = Неопределено) Тогда		
		ЭлементОтбораПоСостоянию.Использование	= Ложь;
	КонецЕсли;
	// Отбор по проекту
	СписокПроектов = ПолучитьСписокПроектов();
	Если СписокПроектов.Количество() > 0 Тогда
		Если ЭлементОтбораПоПроекту = Неопределено Тогда		
			ЭлементОтбораПоПроекту = СписокРешений.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбораПоПроекту.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("Проект");
			ЭлементОтбораПоПроекту.ВидСравнения		= ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбораПоПроекту.Представление	= "ОтборПоПроекту";
			ЭлементОтбораПоПроекту.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
		КонецЕсли;	
		ЭлементОтбораПоПроекту.ПравоеЗначение	= СписокПроектов;
		ЭлементОтбораПоПроекту.Использование	= Истина;
	ИначеЕсли НЕ (ЭлементОтбораПоПроекту = Неопределено) Тогда		
		ЭлементОтбораПоПроекту.Использование	= Ложь;
	КонецЕсли;	
КонецПроцедуры // УстановитьОтборыРешений()	

&НаСервере
// Функция возвращает структуру со свойствами динамического списка.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура	- Структура со свойствами динамического списка.
//
Функция ПолучитьСвойстваДинамическогоСпискаРешенийСервер()
	СтруктураСвойства =  CRM_ОбщегоНазначенияСервер.ПолучитьСвойстваДинамическогоСписка(ЭтотОбъект, "СписокРешений",
		"Справочник.CRM_Решения", Неопределено, Неопределено, Неопределено, "ПодменюВидРешений",
		"ПользовательскиеНастройкиСпискаТекущаяНастройкаРешений", "Подключаемый_КомандаВидРешений");
	СтруктураСвойства.Вставить("СкрытьУсловноеОформлениеВНастройках");
	Возврат СтруктураСвойства;
КонецФункции // ПолучитьСвойстваДинамическогоСпискаРешенийСервер()

&НаКлиенте
// Функция возвращает структуру со свойствами динамического списка.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура	- Структура со свойствами динамического списка.
//
Функция ПолучитьСвойстваДинамическогоСпискаРешенийКлиент()
	Если НЕ (ТипЗнч(КэшСвойстваДинамическогоСпискаРешений) = Тип("Структура")) Тогда
		КэшСвойстваДинамическогоСпискаРешений = ПолучитьСвойстваДинамическогоСпискаРешенийСервер();
	КонецЕсли;
	Возврат КэшСвойстваДинамическогоСпискаРешений;
КонецФункции // ПолучитьСвойстваДинамическогоСпискаРешенийКлиент()

&НаСервере
// Функция добавляет решение в таблицу используемых решений.
//
// Параметры:
//	Решение	- СправочникСсылка	- Добавляемое решение.
//
// Возвращаемое значение:
//	Число	- Индекс добавленной строки.
//
Функция бзДобавитьИспользуемоеРешение(Решение)
	ТаблицаРешений = РеквизитФормыВЗначение("бзРешения");
	СтрокаТаблицы = ТаблицаРешений.Найти(Решение, "Решение");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ТаблицаРешений.Добавить();
		СтрокаТаблицы.Использовать 	= Ложь;
		СтрокаТаблицы.Решение		= Решение;
		СтрокаТаблицы.Наименование	= Решение.Наименование;
		СтрокаТаблицы.Состояние		= Решение.СтатусРешения;
	КонецЕсли;	
	ИндексСтроки = ТаблицаРешений.Индекс(СтрокаТаблицы);
	ЗначениеВРеквизитФормы(ТаблицаРешений, "бзРешения");
	Возврат ИндексСтроки;
КонецФункции // БзДобавитьИспользуемоеРешение().

&НаСервере
// Функция возвращает список проектов.
//
// Параметры:
//	Нет.
//
Функция ПолучитьСписокПроектов()
	ТекущийПроект = Элементы["бзПроекты"].ТекущаяСтрока;
	СписокПроектов = Новый СписокЗначений;
	Если  ЗначениеЗаполнено(ТекущийПроект) Тогда
		Если ТекущийПроект.ЭтоГруппа Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Родитель", ТекущийПроект);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	Проекты.Ссылка КАК Проект
			               |ИЗ
			               |	Справочник.Проекты КАК Проекты
			               |ГДЕ
			               |	НЕ Проекты.ПометкаУдаления
			               |	И НЕ Проекты.ЭтоГруппа
			               |	И Проекты.Родитель В ИЕРАРХИИ(&Родитель)";
			СписокПроектов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Проект"));
		Иначе
			СписокПроектов.Добавить(ТекущийПроект);
		КонецЕсли;
	КонецЕсли;	
	Возврат СписокПроектов;
КонецФункции // ПолучитьСписокПроектов()

&НаСервере
// Функция возвращает текущий проект.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Проект
//
Функция бзПолучитьПроект()
	ТекущийПроект = Элементы["бзПроекты"].ТекущаяСтрока;
	Если ЗначениеЗаполнено(ТекущийПроект) Тогда
		Если ТекущийПроект.ЭтоГруппа Тогда
			Возврат Справочники.Проекты.ПустаяСсылка();
		Иначе
			Возврат ТекущийПроект;
		КонецЕсли;	
	Иначе
		Возврат Справочники.Проекты.ПустаяСсылка();
	КонецЕсли;	
КонецФункции // бзПолучитьПроект()

&НаСервере
// Функция создает новое решение, добавляет его в таблицу решений и возвращает его ссылку.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Ссылка на созданное решение.
//
Функция бзСоздатьНовоеРешение()
	// Создаем новое решение
	НовоеРешение = Справочники.CRM_Решения.СоздатьЭлемент();
	НовоеРешение.Наименование		= ЭтотОбъект["бзСтрокаПоиска"];
	НовоеРешение.ТекстВопроса		= ЭтотОбъект["бзСтрокаПоиска"];
	НовоеРешение.ТекстВопросаHTML	= ЭтотОбъект["бзСтрокаПоиска"];
	НовоеРешение.Проект				= бзПолучитьПроект(); 
	Если ЗначениеЗаполнено(НовоеРешение.Проект) Тогда
		НовоеРешение.Подразделение	= НовоеРешение.Проект.CRM_Подразделение;	
	Иначе
		НовоеРешение.Подразделение	= ЭтотОбъект["бзПодразделение"];	
	КонецЕсли;	
	НовоеРешение.Автор				= Пользователи.АвторизованныйПользователь();
	НовоеРешение.СтатусРешения 		= Перечисления.CRM_СтатусыРешений.Личное;
	РешениеЗаписано = Ложь;
	Попытка
		НовоеРешение.Записать();
		РешениеЗаписано = Истина;
	Исключение
	КонецПопытки;
	// Добавляем созданное решение в таблицу.
	Если РешениеЗаписано Тогда
		ТаблицаРешений = РеквизитФормыВЗначение("бзРешения");
		НоваяСтрока = ТаблицаРешений.Добавить();
		НоваяСтрока.Использовать 	= Ложь;
		НоваяСтрока.Решение			= НовоеРешение;
		НоваяСтрока.Наименование	= НовоеРешение.Наименование;
		НоваяСтрока.Состояние		= НовоеРешение.СтатусРешения;
		ЗначениеВРеквизитФормы(ТаблицаРешений, "бзРешения");
		Элементы["бзДекорацияИндексППНеактуален"].Заголовок = "";
		Элементы["бзСтрокаПоиска"].ЦветФона = ЦветаСтиля.ЦветФонаПоля;
	КонецЕсли;
	Возврат НовоеРешение.Ссылка;
КонецФункции // бзСоздатьНовоеРешение()	
	
//////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛНОТЕКСТОВОГО ПОИСКА

&НаКлиенте
Процедура Поиск_Найти(Команда)
	бзСтрокаПоискаПриИзменении(Элементы.бзСтрокаПоиска);
КонецПроцедуры

&НаКлиенте
Процедура Поиск_Отмена(Команда)
	бзСтрокаПоиска = "";
	бзСтрокаПоискаПриИзменении(Элементы.бзСтрокаПоиска);
КонецПроцедуры

&НаСервереБезКонтекста
// Выполняет обновление индекса полнотекстового поиска.
//
// Параметры:
//	Нет.
//
Процедура бзОбновитьИндексППД()
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ПолнотекстовыйПоиск.ОбновитьИндекс();
	Исключение
	КонецПопытки;	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // ОбновитьИндексППД()

&НаКлиенте
// Функция возвращает структуру отбора для полнотекстового поиска.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура	- Структура параметров отбора.
//
Функция бзСоздатьСтруктуруОтбора()
	Возврат Неопределено;
КонецФункции // БзСоздатьСтруктуруОтбора().

&НаСервере
// Процедура выполняет полнотекстовый поиск.
//
// Параметры:
//	СтруктураОтбора	- СтруктураОтбора	- Структура отбора.
//
Функция бзНайтиРешенияПолнотекстовыйПоиск(СтруктураОтбора)
	ЭтотОбъект["бзИндексППДАктуален"] = ПолнотекстовыйПоиск.ИндексАктуален();
	Возврат CRM_БазаЗнанийСервер.бзНайтиРешенияПолнотекстовыйПоиск(ЭтотОбъект, СтруктураОтбора);
КонецФункции // БзНайтиРешенияПолнотекстовыйПоиск().

&НаКлиенте
// Процедура проверяет актуальность индекса и, в случае необходимости, актуализирует его.
//
// Параметры:
//	Нет.
//
Процедура бзПроверитьИндексППД()
	СтруктураОтбора = бзСоздатьСтруктуруОтбора();
 	ТекстОшибки = бзНайтиРешенияПолнотекстовыйПоиск(СтруктураОтбора);
	Если ЭтотОбъект["бзИндексППДАктуален"] Тогда
		Если ТекстОшибки = Неопределено Тогда
			Элементы["бзДекорацияИндексППНеактуален"].Заголовок = "";
		Иначе
			Элементы["бзДекорацияИндексППНеактуален"].Заголовок = ТекстОшибки;
		КонецЕсли;
	Иначе	
		Элементы["бзДекорацияИндексППНеактуален"].Заголовок = НСтр("ru='Индекс полнотекстового поиска неактуален'");
	КонецЕсли;	
	УстановитьОтборыРешений();
КонецПроцедуры // бзПроверитьИндексППД()

&НаКлиенте
// Процедура выполняет полнотекстовый поиск.
//
// Параметры:
//	Нет.
//
Процедура бзВыполнитьПП()
	Элементы["бзДекорацияИндексППНеактуален"].Заголовок = "";
	Если Не ПустаяСтрока(ЭтотОбъект["бзСтрокаПоиска"]) Тогда
		бзПроверитьИндексППД();
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ИзменитьЭлементОтбораСписка(СписокРешений, "Ссылка");
	КонецЕсли; 	
КонецПроцедуры // бзВыполнитьПП()

&НаКлиенте
// Процедура выполняет обновление индекса полнотекстового поиска.
//
// Параметры:
//	Нет.
//
Процедура бзОбновлениеИндексаПДД()
	Если НЕ ЭтотОбъект["бзИндексППДАктуален"] Тогда
		Состояние(НСтр("ru='Идет обновление индекса полнотекстового поиска ...'"));
		бзОбновитьИндексППД();
		ЭтотОбъект["бзИндексППДАктуален"] = Истина;
		Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено...'")); 
		бзВыполнитьПП();
	ИначеЕсли Элементы.бзДекорацияИндексППНеактуален.Заголовок = НСтр("ru = 'Ничего не найдено. Создать новое решение?'") Тогда
		// Создаем новое решение
		НовоеРешение = бзСоздатьНовоеРешение();
		// Переходим на новое решение
		Элементы["бзРешения"].ТекущаяСтрока = НовоеРешение;
		// Если новое решение не отображается из-за установленного отбора, переходим на последнее отображаемое.
		Если Элементы["бзРешения"].ТекущаяСтрока = Неопределено Тогда
			Если НЕ (Элементы["бзРешения"].ТекущиеДанные = Неопределено) Тогда
				Элементы["бзРешения"].ТекущаяСтрока = Элементы["бзРешения"].ТекущиеДанные.Ссылка;
			КонецЕсли;	
		КонецЕсли;	
		// Открываем созданное решение.
		ПараметрыФормы = Новый Структура("Ключ", НовоеРешение);
		ОткрытьФорму("Справочник.CRM_Решения.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры // бзОбновлениеИндексаПДД()

//////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМАТИРОВАННОГО ТЕКСТА


&НаСервере
// Процедура заполняет поле формы "ТекстВопросаHTML".
//
// Параметры:
//	Решение	- СправочникСсылка	- Текущее решение.
//
Процедура бзЗаполнитьТекстВопросаHTML(Решение)
	
	ЭтотОбъект["бзТекстВопросаHTML"].Удалить();
	
	СтрокаПоиска	= "";
	ПозицияНачала	= Найти(Решение.ТекстВопросаHTML, "<body>") + 6;
	ТекстНачала		= Лев(Решение.ТекстВопросаHTML, ПозицияНачала);
	ПозицияКонца	= Найти(Решение.ТекстВопросаHTML, "</body>");
	ТекстКонца		= Сред(Решение.ТекстВопросаHTML, ПозицияКонца);
	ТекстВопроса	= Сред(Решение.ТекстВопросаHTML, ПозицияНачала, ПозицияКонца - ПозицияНачала - 1);
	ТекстВопроса	= СокрЛП(ТекстВопроса);
	ТекстВопроса	= СтрЗаменить(ТекстВопроса, Символы.ПС, "");
	ТекстВопроса	= СтрЗаменить(ТекстВопроса, "</p><p></p><p>", "</p><p>");
	
	ВложенияТекстаВопроса = Новый Структура;
	ТекстВопроса = Справочники.CRM_Решения.ОбработатьТекстHTMLДляФорматированногоДокумента(
		Решение.Ссылка, ТекстВопроса,ВложенияТекстаВопроса);
	
	// Добавляем текст вопроса
	ТекстПоляHTML = ТекстНачала + "<p><u><b>" + Нстр("ru='Вопрос: '") + "</b>" 
	+ CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(Решение.Наименование, СтрокаПоиска) + "</u></p><p><b>"; 
	Если ЗначениеЗаполнено(Решение.ОсновнаяКатегория) Тогда
		ТекстПоляHTML	= ТекстПоляHTML + Нстр("ru='Основная категория: '") + "</b>" 
			+ CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(Решение.ОсновнаяКатегория.Наименование, СтрокаПоиска) + "</p><p><b>";
	Иначе
		ТекстПоляHTML	= ТекстПоляHTML + Нстр("ru='Основная категория: '") + "</b>" + НСтр("ru='[не задана]'") + "</p><p><b>";
	КонецЕсли;	
	Если ЗначениеЗаполнено(Решение.Проект) Тогда
		ТекстПоляHTML	= ТекстПоляHTML + Нстр("ru='Проект: '") + "</b>" 
			+ CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(Решение.Проект.Наименование, СтрокаПоиска) + "</p><p><b>"; 
	Иначе
		ТекстПоляHTML	= ТекстПоляHTML + Нстр("ru='Проект: '") + "</b>" + НСтр("ru='[не задан]'") + "</p><p><b>"; 
	КонецЕсли;	
	Если ЗначениеЗаполнено(Решение.Автор) Тогда
		ТекстПоляHTML	= ТекстПоляHTML + Нстр("ru='Автор: '") + "</b>" 
			+ CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(Решение.Автор.Наименование, СтрокаПоиска) + "</p>";
	Иначе
		ТекстПоляHTML	= ТекстПоляHTML + Нстр("ru='Автор: '") + "</b>" + НСтр("ru='[не задан]'") + "</p>";
	КонецЕсли;	
	ТекстПоляHTML	= ТекстПоляHTML + CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(ТекстВопроса, СтрокаПоиска);
	
	Если (Решение.СтатусРешения = Перечисления.CRM_СтатусыРешений.Личное) И НЕ (Решение.Автор = Пользователи.АвторизованныйПользователь()) Тогда
		ТекстПоляHTML = ТекстПоляHTML + ТекстКонца;
	ИначеЕсли Решение.СтатусРешения = Перечисления.CRM_СтатусыРешений.НаРассмотрении Тогда
		ТекстПоляHTML = ТекстПоляHTML + ТекстКонца;
	Иначе
		
		// Заполняем тексты всех ответов и сортируем их.
		НомерОтвета = 0;
		Для Каждого ТекОтвет Из Решение.Ответы Цикл
			НомерОтвета = НомерОтвета + 1;
			
			ПозицияНачала	= Найти(ТекОтвет.ВариантОтветаHTML, "<body>") + 6;
			ПозицияКонца	= Найти(ТекОтвет.ВариантОтветаHTML, "</body>");
			ТекстОтвета		= Сред(ТекОтвет.ВариантОтветаHTML, ПозицияНачала, ПозицияКонца - ПозицияНачала - 1);
			ТекстОтвета		= СокрЛП(ТекстОтвета);
			ТекстОтвета		= СтрЗаменить(ТекстОтвета, Символы.ПС, "");
			ТекстОтвета		= СтрЗаменить(ТекстОтвета, "</p><p></p><p>", "</p><p>");
			
			ТекстОтвета = Справочники.CRM_Решения.ОбработатьТекстHTMLДляФорматированногоДокумента(
			Решение.Ссылка, ТекстОтвета,ВложенияТекстаВопроса);
			
			// Добавляем текст ответа
			ТекстПоляОтветаHTML = "<p></p><p><u><b>" + Нстр("ru='Ответ №:'") + Строка(НомерОтвета) + " ";
			Если ТекОтвет.СтатусОтвета = Перечисления.CRM_СтатусыРешений.Устарело Тогда
				ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + Нстр("ru='(устаревший)'") + " ";
			КонецЕсли;
			ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + "</b>" 
			+ CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(ТекОтвет.НаименованиеОтвета, СтрокаПоиска) + "</u></p><p><b>"; 
			АвторИзменения = ТекОтвет.АвторИзменения;
			Если ЗначениеЗаполнено(АвторИзменения) Тогда
				ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + НСтр("ru='Автор: '") + "</b>" 
				+ CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(АвторИзменения.Наименование, СтрокаПоиска) + "</p>";
			Иначе
				ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + НСтр("ru='Автор: '") + "</b>" + НСтр("ru='[не задан]'") + "</p>";
			КонецЕсли;	
			ТекстПоляОтветаHTML = ТекстПоляОтветаHTML + CRM_БазаЗнанийСервер.бзВыделитьВхожденияСтрокиПоиска(ТекстОтвета, СтрокаПоиска);
			ТекстПоляHTML	= ТекстПоляHTML + ТекстПоляОтветаHTML;
		КонецЦикла;
		ТекстПоляHTML = ТекстПоляHTML + ТекстКонца;
	КонецЕсли;
	
	ЭтотОбъект["бзТекстВопросаHTML"].УстановитьHTML(ТекстПоляHTML, ВложенияТекстаВопроса);
	
КонецПроцедуры // БзЗаполнитьТекстВопросаHTML().

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "Решения".
//
// Параметры:
//	Нет.
//
Процедура бзОбработчикРешенияПриАктивизацииСтроки()
	ТекущееРешение = Элементы["бзРешения"].ТекущаяСтрока;
	Если ТекущееРешение = Неопределено Тогда
		бзТекстВопросаHTML.Удалить();
		Возврат;
	ИначеЕсли ТипЗнч(ТекущееРешение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		бзТекстВопросаHTML.Удалить();
		Возврат;
	ИначеЕсли ЭтотОбъект["бзТекущийВопрос"] = ТекущееРешение Тогда
		Возврат;
	ИначеЕсли ПолучитьЗначениеРеквизита(ТекущееРешение, "ЭтоГруппа") Тогда
		бзТекстВопросаHTML.Удалить();
		Возврат;
	КонецЕсли;
	ЭтотОбъект["бзТекущийВопрос"] = ТекущееРешение;
	бзЗаполнитьТекстВопросаHTML(ЭтотОбъект["бзТекущийВопрос"]);
КонецПроцедуры // БзОбработчикРешенияПриАктивизацииСтроки().

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "Проекты".
//
// Параметры:
//	Нет.
//
Процедура бзОбработчикПроектыПриАктивизацииСтроки()
	ТекущийПроект = Элементы["бзПроекты"].ТекущаяСтрока;
	Если ТекущийПроект = Неопределено Тогда
		Возврат;
	ИначеЕсли ЭтотОбъект["бзТекущийПроект"] = ТекущийПроект Тогда
		Возврат;
	КонецЕсли;
	ЭтотОбъект["бзТекущийПроект"] = ТекущийПроект;
	УстановитьОтборыРешений();
КонецПроцедуры // БзОбработчикПроектыПриАктивизацииСтроки().

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Подразделение".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура бзПодразделениеПриИзменении(Элемент)
	УстановитьОтборыРешений();
КонецПроцедуры // БзПодразделениеПриИзменении().

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Состояние".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура бзСостояниеПриИзменении(Элемент)
	УстановитьОтборыРешений();
КонецПроцедуры // бзСостояниеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "Проекты".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура бзПроектыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("бзОбработчикПроектыПриАктивизацииСтроки", 0.2, Истина);
КонецПроцедуры // БзПроектыПриАктивизацииСтроки().

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "СтрокаПоиска".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура бзСтрокаПоискаПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(бзСтрокаПоиска) Тогда
		бзСтрокаПоиска = "";
	КонецЕсли;
	Если ЗначениеЗаполнено(бзСтрокаПоиска) Тогда
		Элементы.ГруппаКнопок_Поиск_Полнотекстовый.Видимость	= Истина;
		Элементы.ГруппаКнопок_Поиск_Стандартный.Видимость		= Ложь;
	Иначе
		Элементы.ГруппаКнопок_Поиск_Стандартный.Видимость		= Истина;
		Элементы.ГруппаКнопок_Поиск_Полнотекстовый.Видимость	= Ложь;
	КонецЕсли;
	Элементы.КнопкаПоиск_ПолнотекстовыйОтмена.Доступность = ЗначениеЗаполнено(бзСтрокаПоиска);
	бзВыполнитьПП();
КонецПроцедуры // БзСтрокаПоискаПриИзменении().

&НаКлиенте
Процедура бзСтрокаПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокДляВыбора = Новый СписокЗначений();
	СписокДляВыбора.Добавить("[ПоискПоПолномуНазванию]", НСтр("ru = '[Поиск по полному названию]'"));
	СписокДляВыбора.Добавить("[ПоискПоПодстроке]", НСтр("ru = '[Поиск по подстроке]'"));
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("бзСтрокаПоискаЗавершениеВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокДляВыбора, Элемент, ?(бзПоискПоПодстроке, СписокДляВыбора[1], СписокДляВыбора[0]));
КонецПроцедуры

&НаКлиенте
Процедура бзСтрокаПоискаЗавершениеВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение = Неопределено Тогда Возврат; КонецЕсли;
	Элементы.бзСтрокаПоиска.ПодсказкаВвода = ВыбранноеЗначение.Представление;
	Элементы.бзСтрокаПоиска.Подсказка = ВыбранноеЗначение.Представление;
	Если ВыбранноеЗначение.Значение = "[ПоискПоПодстроке]" Тогда
		бзПоискПоПодстроке = Истина;
	Иначе
		бзПоискПоПодстроке = Ложь;
	КонецЕсли;
	бзСтрокаПоискаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" поля ввода "СтрокаПоиска".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура бзСтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	КоличествоНайденных = 0;
	Для Каждого ЭлементСписка Из бзСтрокаПоискаСписокВыбора Цикл
		Если ВРег(Лев(ЭлементСписка, 6)) = "[ПОИСК" Тогда
			Продолжить;
		КонецЕсли;
		Если ЛЕВ(ВРег(ЭлементСписка.Значение), СтрДлина(СокрЛП(Текст))) = ВРег(СокрЛП(Текст)) Тогда
			 ДанныеВыбора.Добавить(ЭлементСписка.Значение);
			 КоличествоНайденных = КоличествоНайденных + 1;
			 Если КоличествоНайденных > 7 Тогда
				 Прервать;
			 КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ДанныеВыбора.Количество() = 0 Тогда
		ДанныеВыбора = Неопределено;
		СтандартнаяОбработка = Истина;
	КонецЕсли;
КонецПроцедуры // бзСтрокаПоискаАвтоПодбор()

&НаКлиенте
// Процедура - обработчик события "Нажатие" надписи "ДекорацияИндексППНеактуален".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура бзДекорацияИндексППНеактуаленНажатие(Элемент)
	ПодключитьОбработчикОжидания("бзОбновлениеИндексаПДД", 0.2, Истина);
КонецПроцедуры // БзДекорацияИндексППНеактуаленНажатие().

&НаКлиенте
// Процедура - обработчик события "Выбор" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура бзРешенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы["бзРешения"].ТекущаяСтрока;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ПоказатьЗначение(, ТД);
КонецПроцедуры // бзРешенияВыбор()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура бзРешенияПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("бзОбработчикРешенияПриАктивизацииСтроки", 0.5, Истина);
КонецПроцедуры // БзРешенияПриАктивизацииСтроки().

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура бзРешенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("бзРешенияПередНачаломДобавленияЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.CRM_Решения.ФормаСписка", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);	
КонецПроцедуры

&НаКлиенте
Процедура бзРешенияПередНачаломДобавленияЗавершение(ВыбранноеРешение, ДополнительныеПараметры) Экспорт
	
	Перем ИндексСтроки, СтрокаРешения;
	
	Если ВыбранноеРешение = Неопределено Тогда Возврат; КонецЕсли;
	ИндексСтроки = бзДобавитьИспользуемоеРешение(ВыбранноеРешение);	
	СтрокаРешения = ЭтотОбъект["бзРешения"][ИндексСтроки].ПолучитьИдентификатор();
	Элементы["бзРешения"].ТекущаяСтрока = СтрокаРешения;

КонецПроцедуры // БзРешенияПередНачаломДобавления().

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура бзРешенияПередНачаломИзменения(Элемент, Отказ)
	ТД = Элементы["бзРешения"].ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "бзРешенияИспользовать" Тогда
		Возврат;
	КонецЕсли;
	Отказ = Истина;
	ПоказатьЗначение(, ТД.Решение);
КонецПроцедуры // БзРешенияПередНачаломИзменения().

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы формы "Решения".
// Отсутствие ссылок на процедуру не является ошибкой!
//
Процедура бзРешенияПередУдалением(Элемент, Отказ)
	Если ЭтотОбъект["бзРешения"].Количество() = 1 Тогда
		ЭтотОбъект["бзТекстВопросаHTML"].Удалить();
		ЭтотОбъект["бзТекущийВопрос"] = ПредопределенноеЗначение("Справочник.CRM_Решения.ПустаяСсылка");
	КонецЕсли;	
КонецПроцедуры // бзРешенияПередУдалением()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ КОМАНД ФОРМЫ

&НаСервере
Процедура КомандаВидРешенийСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки)
	CRM_ОбщегоНазначенияКлиентСервер.ОбработкаКомандыПользовательскихНастроекДинамическогоСписка(ЭтотОбъект, СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
	УстановитьОтборыРешений();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидРешений(Команда)
	СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаРешенийКлиент();
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_КомандаВидРешенийЗавершение", ЭтотОбъект, СвойстваДинамическогоСписка);
	CRM_ОбщегоНазначенияКлиент.ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки(ЭтотОбъект, СвойстваДинамическогоСписка, Команда, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидРешенийЗавершение(ПризнакИзмененыНастройки, СвойстваДинамическогоСписка) Экспорт
	КомандаВидРешенийСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	// Устанавливаем область поиска по умолчанию.
	Если ПустаяСтрока(бзОбластьПоиска) Тогда
		бзОбластьПоиска = Элементы.бзОбластьПоиска.СписокВыбора[0].Значение;
	КонецЕсли;	
	
	// +Пользовательские настройки.
	ДобавитьПодменюПользовательскихНастроек();
	// -Пользовательские настройки.
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПриЗакрытииНаСервере()
	ХранилищеОбщихНастроек.Сохранить("БазаЗнанийПоискПоПодстроке",, бзПоискПоПодстроке);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ Пользователи.РолиДоступны("CRM_АдминистрированиеБазыЗнаний, ПолныеПрава") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// Проверим доступность полнотекстового поиска.
	CRM_БазаЗнанийСервер.бзДоступностьПолнотекстовыйПоискСписокРешений(ЭтотОбъект);
	ПоискПоПодстрокеСохр = ХранилищеОбщихНастроек.Загрузить("БазаЗнанийПоискПоПодстроке");
	Если ТипЗнч(ПоискПоПодстрокеСохр) = Тип("Булево") Тогда
		бзПоискПоПодстроке = ПоискПоПодстрокеСохр;
	КонецЕсли;
	Если бзПоискПоПодстроке Тогда
		Элементы.бзСтрокаПоиска.ПодсказкаВвода = НСтр("ru = '[Поиск по подстроке]'");
	Иначе
		Элементы.бзСтрокаПоиска.ПодсказкаВвода = НСтр("ru = '[Поиск по полному названию]'");
	КонецЕсли;
	Элементы.бзСтрокаПоиска.Подсказка = Элементы.бзСтрокаПоиска.ПодсказкаВвода;
	
	// Пользовательские настройки решений.
	//СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаРешенийСервер();
	//CRM_ОбщегоНазначенияСервер.ПользовательскиеНастройкиСпискаПриСозданииНаСервере(ЭтотОбъект, СвойстваДинамическогоСписка);
	// Установим отборы по значениям элементов отбора формы.
	УстановитьОтборыРешений();
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если (ИмяСобытия = "CRM_РешенияОбновлениеСправочника") И (Параметр = ЭтотОбъект["бзТекущийВопрос"]) Тогда
		// Перезаполняем текст текущего решения.
		бзЗаполнитьТекстВопросаHTML(Параметр);
	КонецЕсли;	
КонецПроцедуры // ОбработкаОповещения()



#Область ПользовательскиеНастройки

&НаСервере
Процедура ДобавитьПодменюПользовательскихНастроек()
	CRM_ПользовательскиеНастройкиСервер.УстановитьПользовательскиеНастройки(СписокРешений, ИдентификаторПользовательскойНастройки, ЭтотОбъект.ИмяФормы+".СписокРешений");
	CRM_ПользовательскиеНастройкиСервер.ДобавитьПодменюПользовательскихНастроек(ЭтотОбъект, СписокРешений, ЭтотОбъект.ИмяФормы+".СписокРешений");
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборНастройкиНаСервере(НомерНастройки)
	CRM_ПользовательскиеНастройкиСервер.ОбработатьВыборНастройкиНаСервере(НомерНастройки, СписокРешений, ЭтотОбъект, ЭтотОбъект.ИмяФормы+".СписокРешений");	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьВыборНастройки(Команда)
	НомерНастройкиСтрока = СтрЗаменить(Команда.Имя, "ОбработатьВыборНастройки_", "");
	НомерНастройки = Число(НомерНастройкиСтрока);
	 ОбработатьВыборНастройкиНаСервере(НомерНастройки);	
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущиеНастройкиНаСервере(ИмяНастройки, ДополнительныеПараметры) Экспорт
	Если НЕ ИмяНастройки = Неопределено Тогда
		CRM_ПользовательскиеНастройкиСервер.СохранитьТекущиеНастройкиНаСервере(ИмяНастройки, СписокРешений, ЭтотОбъект, ЭтотОбъект.ИмяФормы+".СписокРешений");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущиеНастройки(Команда)
	ПараметрыОповещения = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("СохранитьТекущиеНастройкиНаСервере", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВводСтроки(Оповещение, "", "Введите название настройки");		
КонецПроцедуры

&НаСервере
Процедура УдалитьНастройкуНаСервере()
	ПредставлениеНастройки = CRM_ПользовательскиеНастройкиСервер.ПолучитьПредставлениеНастройки(ИдентификаторПользовательскойНастройки, ЭтотОбъект.ИмяФормы+".СписокРешений");	
	ХранилищеПользовательскихНастроекДинамическихСписков.Удалить(ЭтотОбъект.ИмяФормы+".Список", ИдентификаторПользовательскойНастройки, ИмяПользователя()); 
	ИдентификаторПользовательскойНастройки = "Стандартные_Настройки";
	CRM_ПользовательскиеНастройкиСервер.УстановитьПользовательскиеНастройки(СписокРешений, ИдентификаторПользовательскойНастройки, ЭтотОбъект.ИмяФормы+".СписокРешений");
	CRM_ПользовательскиеНастройкиСервер.ДобавитьПодменюПользовательскихНастроек(ЭтотОбъект, СписокРешений, ЭтотОбъект.ИмяФормы+".СписокРешений");
		
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОтветаУдаление(ВариантОтвета, ДополнительныеПараметры) Экспорт
	Если ВариантОтвета = КодВозвратаДиалога.Да Тогда
		УдалитьНастройкуНаСервере();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТекущуюНастройку(Команда)
	Если ИдентификаторПользовательскойНастройки = "Стандартные_Настройки" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нельзя удалить стандартные настройки";
		Сообщение.Сообщить();
	Иначе
		ПараметрыОповещения = Новый Структура;
		Оповещение = Новый ОписаниеОповещения("ОбработкаОтветаУдаление", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(Оповещение, "Вы действительно хотите удалить настройку """+CRM_ПользовательскиеНастройкиСервер.ПолучитьПредставлениеНастройки(ИдентификаторПользовательскойНастройки, ЭтотОбъект.ИмяФормы+".СписокРешений")+""" ?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

