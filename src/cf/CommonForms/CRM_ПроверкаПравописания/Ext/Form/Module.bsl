
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Процедура устанавливает доступность кнопок.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопок()
	Элементы.Изменить.Доступность			= Истина;	
	Элементы.ПредыдущееСлово.Доступность	= Истина;
	Элементы.СледующееСлово.Доступность		= Истина;	
	Элементы.Пропустить.Доступность			= Истина;		
	Элементы.ПропуститьВсе.Доступность		= Истина;		
	Если НомерОшибки = 0 Тогда
		Элементы.ПредыдущееСлово.Доступность	= Ложь;
	КонецЕсли;	
	Если НомерОшибки = (СписокОшибок.Количество() - 1) Тогда
		Элементы.СледующееСлово.Доступность		= Ложь;	
	КонецЕсли;
	Если ВариантыЗамены.Количество() = 0 Тогда
		Элементы.Заменить.Доступность		= Ложь;		
		Элементы.ЗаменитьВсе.Доступность	= Ложь;
	Иначе
		Элементы.Заменить.Доступность		= Истина;		
		Элементы.ЗаменитьВсе.Доступность	= Истина;		
	КонецЕсли;	
КонецПроцедуры // УстановитьДоступностьКнопок() 	

&НаКлиенте
// Процедура заполняет данные текущей ошибки.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДанныеОшибки()
	ПроверяемоеСлово = "";
	ВариантыЗамены.ЗагрузитьЗначения(СписокОшибок[НомерОшибки].Значение.s);	
	УстановитьДоступностьКнопок();
	ВыделитьСловоВТексте();
КонецПроцедуры // ЗаполнитьДанныеОшибки()	

&НаКлиенте
// Процедура устанавливает текущий элемент формы.
//
// Параметры:
//	Нет.
//
Процедура УстановитьТекущийЭлемент()
	Если ВариантыЗамены.Количество() = 0 Тогда
		ТекущийЭлемент = Элементы.ПроверяемоеСлово;
	Иначе
		ТекущийЭлемент = Элементы.ВариантыЗамены;
	КонецЕсли;	
КонецПроцедуры // УстановитьТекущийЭлемент()

&НаКлиенте
// Процедура выполняет переход на предыдущее слово.
//
// Параметры:
//	Нет.
//
Процедура ПерейтиНаПредыдущееСлово()
	Если НомерОшибки = 0 Тогда
		Сдвиг = 0;
	Иначе	
	 	НомерОшибки = НомерОшибки - 1;
		Сдвиг = СписокОшибок[НомерОшибки].Значение.shift;
		Если СписокОшибок[НомерОшибки].Пометка Тогда
			ПерейтиНаПредыдущееСлово();
		Иначе	
			ЗаполнитьДанныеОшибки();		
			УстановитьТекущийЭлемент();
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // ПредыдущееСлово()

&НаКлиенте
// Процедура выполняет переход на следующее слово.
//
// Параметры:
//	ВыводитьПредупреждение	- Булево	- Признак вывода предупреждения при окончании списка.
//
Процедура ПерейтиНаСледующееСлово(ВыводитьПредупреждение)
	Если НомерОшибки = (СписокОшибок.Количество() - 1) Тогда
		ЗакладкаНачала = РедактируемыйТекст.ПолучитьЗакладкуНачала();
		Элементы.РедактируемыйТекст.УстановитьГраницыВыделения(ЗакладкаНачала, ЗакладкаНачала);
	 	НомерОшибки			= 0;
		ПроверяемоеСлово	= "";
		ВариантыЗамены.Очистить();
		УстановитьДоступностьКнопок();			
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение(, НСтр("ru='Проверка правописания завершена!'"));
		КонецЕсли;	
	Иначе	
		Сдвиг = Сдвиг + СписокОшибок[НомерОшибки].Значение.offset;	
	 	НомерОшибки = НомерОшибки + 1;
		СписокОшибок[НомерОшибки].Значение.shift = Сдвиг;
		Если СписокОшибок[НомерОшибки].Пометка Тогда 
			ПерейтиНаСледующееСлово(ВыводитьПредупреждение);
		Иначе
			ЗаполнитьДанныеОшибки();
			УстановитьТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры // ПерейтиНаСледующееСлово()

&НаКлиенте
// Процедура выделяет в тексте слово с ошибкой.
//
// Параметры:
//	Нет.
//
Процедура ВыделитьСловоВТексте()
	// Определяем проверяемое слово и выделяем его в тексте.
	ПозицияНачала	= СписокОшибок[НомерОшибки].Значение.pos + СписокОшибок[НомерОшибки].Значение.shift;
	ПозицияКонца	= ПозицияНачала + СписокОшибок[НомерОшибки].Значение.len + СписокОшибок[НомерОшибки].Значение.offset;
	ЗакладкаНачала	= РедактируемыйТекст.ПолучитьЗакладкуПоПозиции(ПозицияНачала);
	ЗакладкаКонца	= РедактируемыйТекст.ПолучитьЗакладкуПоПозиции(ПозицияКонца);
	Элементы.РедактируемыйТекст.УстановитьГраницыВыделения(ЗакладкаНачала, ЗакладкаКонца);
КонецПроцедуры // ВыделитьСловоВТексте()

&НаКлиенте
// Процедура изменяет выделенное слово.
//
// Параметры:
//	ВыводитьПредупреждение	- Булево	- Признак вывода предупреждения при окончании списка.
//
Процедура ИзменитьВыделенноеСлово(ВыводитьПредупреждение)
	ЗаменяемоеСлово = СокрЛП(ПроверяемоеСлово);
	Если НЕ ПустаяСтрока(ЗаменяемоеСлово) Тогда
		СписокОшибок[НомерОшибки].Значение.offset	= СтрДлина(ЗаменяемоеСлово) - СписокОшибок[НомерОшибки].Значение.len;
		СписокОшибок[НомерОшибки].Представление		= ЗаменяемоеСлово;
		СписокОшибок[НомерОшибки].Пометка			= Истина;
		ЗакладкаНачала	= Неопределено;
		ЗакладкаКонца	= Неопределено;
		Элементы.РедактируемыйТекст.ПолучитьГраницыВыделения(ЗакладкаНачала, ЗакладкаКонца);
		РедактируемыйТекст.Вставить(ЗакладкаКонца, ЗаменяемоеСлово, ТипЭлементаФорматированногоДокумента.Текст); 
		РедактируемыйТекст.Удалить(ЗакладкаНачала, ЗакладкаКонца);
		ТекстИзменен = Истина;
	КонецЕсли;	
	ПерейтиНаСледующееСлово(ВыводитьПредупреждение);
КонецПроцедуры // ИзменитьВыделенноеСлово()

&НаКлиенте
// Процедура оповещает владельца текста об его изменении.
//
// Параметры:
//	Нет.
//
Процедура ЗаписатьИзмененияТекста()
	Вложения	= Новый Структура;
	Если ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовЭлектронныхПисем.HTML") Тогда
		ТекстHTML	= "";
		РедактируемыйТекст.ПолучитьHTML(ТекстHTML, Вложения);
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ИмяРеквизита",	ИмяРеквизита);
		СтруктураВозврата.Вставить("Текст",			ТекстHTML);
		СтруктураВозврата.Вставить("Вложения",		Вложения);
		Оповестить("ПроверкаПравописания_ИзмененТекст", СтруктураВозврата, ВладелецФормы);	
	Иначе	
		ТекстHTML	= РедактируемыйТекст.ПолучитьТекст();
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ИмяРеквизита",	ИмяРеквизита);
		СтруктураВозврата.Вставить("Текст",			ТекстHTML);
		СтруктураВозврата.Вставить("Вложения",		Вложения);
		Оповестить("ПроверкаПравописания_ИзмененТекст", СтруктураВозврата, ВладелецФормы);	
	КонецЕсли;
	ТекстИзменен = Ложь;	
КонецПроцедуры // ЗаписатьИзмененияТекста()
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "Нажатия" элемента формы "ДекорацияYandexSpeller".
//
Процедура ДекорацияYandexSpellerНажатие(Элемент)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапускПриложенияНажатие", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения, "http://api.yandex.ru/speller");
КонецПроцедуры // ДекорацияYandexSpellerНажатие()

&НаКлиенте
Процедура ЗапускПриложенияНажатие(КодВозврата, ДополнительныеПараметры) Экспорт
	// Действие не требуется	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ПроверяемоеСлово".
//
Процедура ПроверяемоеСловоПриИзменении(Элемент)
	ИзменитьВыделенноеСлово(Истина);
КонецПроцедуры // ПроверяемоеСловоПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Выбор" таблицы формы "ВариантыЗамены".
//
Процедура ВариантыЗаменыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ИзменитьВыделенноеСлово(Истина);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииЯчейки" таблицы формы "ВариантыЗамены".
//
Процедура ВариантыЗаменыПриАктивизацииЯчейки(Элемент)
	ТД = Элемент.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		ПроверяемоеСлово = "";
	Иначе		
		ПроверяемоеСлово = Элемент.ТекущиеДанные.Значение;
	КонецЕсли;	
КонецПроцедуры // ВариантыЗаменыПриАктивизацииЯчейки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ КОМАНД ФОРМЫ

&НаКлиенте
// Процедура - обработчик команды формы "ЗакрытьФорму".
//
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры // ЗакрытьФорму()

&НаКлиенте
// Процедура - обработчик команды формы "ЗаписатьИЗакрытьФорму".
//
Процедура ЗаписатьИЗакрытьФорму(Команда)
	ЗаписатьИзмененияТекста();
	Закрыть();
КонецПроцедуры // ЗаписатьИЗакрытьФорму()

&НаКлиенте
// Процедура - обработчик команды формы "Заменить".
//
Процедура Заменить(Команда)
	ИзменитьВыделенноеСлово(Истина);
КонецПроцедуры // Заменить()

&НаКлиенте
// Процедура - обработчик команды формы "ЗаменитьВсе".
//
Процедура ЗаменитьВсе(Команда)
	ЗаменяемоеСлово 	= СокрЛП(ПроверяемоеСлово);
	ИсправляемоеСлово	= Элементы.РедактируемыйТекст.ВыделенныйТекст;
	врНомерОшибки		= НомерОшибки;
	Пока Истина Цикл
		ВрНомер = НомерОшибки;
		Если СписокОшибок[НомерОшибки].Значение.word = ИсправляемоеСлово Тогда
			ПроверяемоеСлово = ЗаменяемоеСлово;
			ИзменитьВыделенноеСлово(Ложь);
		Иначе
			ПерейтиНаСледующееСлово(Ложь);
		КонецЕсли;	
		Если ВрНомер = (СписокОшибок.Количество() - 1) Тогда Прервать; КонецЕсли;
	КонецЦикла;
	НомерОшибки = врНомерОшибки; 
	Сдвиг		= СписокОшибок[НомерОшибки].Значение.shift; 
	ПерейтиНаСледующееСлово(Истина);
КонецПроцедуры // ЗаменитьВсе()

&НаКлиенте
// Процедура - обработчик команды формы "Изменить".
//
Процедура Изменить(Команда)
	ИзменитьВыделенноеСлово(Истина);
КонецПроцедуры // Изменить()

&НаКлиенте
// Процедура - обработчик команды формы "ПредыдущееСлово".
//
Процедура ПредыдущееСлово(Команда)
	ПерейтиНаПредыдущееСлово();
КонецПроцедуры // ПредыдущееСлово()

&НаКлиенте
// Процедура - обработчик команды формы "Пропустить".
//
Процедура Пропустить(Команда)
	ПерейтиНаСледующееСлово(Истина);
КонецПроцедуры // Пропустить()

&НаКлиенте
// Процедура - обработчик команды формы "ПропуститьВсе".
//
Процедура ПропуститьВсе(Команда)
	Пока Истина Цикл
		ВрНомер = НомерОшибки;
		ПерейтиНаСледующееСлово(Истина);
		Если ВрНомер = (СписокОшибок.Количество() - 1) Тогда Прервать; КонецЕсли;
	КонецЦикла;	
КонецПроцедуры // ПропуститьВсе()

&НаКлиенте
// Процедура - обработчик команды формы "СледующееСлово".
//
Процедура СледующееСлово(Команда)
	ПерейтиНаСледующееСлово(Истина);
КонецПроцедуры // СледующееСлово()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМЫ

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ Параметры.Свойство("ПроверяемыйТекст") Тогда
		Отказ = Истина;
		Возврат;
	ИначеЕсли ПустаяСтрока(Параметры.ПроверяемыйТекст) Тогда
		Отказ = Истина;
		Возврат;
	ИначеЕсли НЕ Параметры.Свойство("ИмяРеквизита") Тогда
		Отказ = Истина;
		Возврат;
	ИначеЕсли ПустаяСтрока(Параметры.ИмяРеквизита) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	ОшибкаПодключения = Ложь;
	Попытка
		ВебСервис = WSСсылки.YandexSpeller.СоздатьWSПрокси("http://speller.yandex.net/services/spellservice", "SpellService", "SpellServiceSoap12");
	Исключение
		ВебСервис = Неопределено;
	КонецПопытки;	
	Если ВебСервис = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Ошибка подключения к Яндекс.Спеллер!'");
		ОшибкаПодключения = Истина;
		Возврат;
	КонецЕсли;
	ИмяРеквизита	= Параметры.ИмяРеквизита;
	ПроверяемыйТекст		= Параметры.ПроверяемыйТекст;
	Если Найти(ПроверяемыйТекст, "<html>") = 1 Тогда
		ТипТекста	= Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
	Иначе	
		ТипТекста	= Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
	КонецЕсли;	
	Если Параметры.Свойство("Вложения") Тогда
		Вложения	= Параметры.Вложения;
	Иначе	
		Вложения = Новый Структура;
	КонецЕсли;
	РедактируемыйТекст.УстановитьHTML(ПроверяемыйТекст, Вложения);
	ТекстДляПроверки = РедактируемыйТекст.ПолучитьТекст();
	Попытка
		РезультатПроверки = ВебСервис.checkText(ТекстДляПроверки);
	Исключение
		РезультатПроверки = Неопределено;
	КонецПопытки;	
	Если РезультатПроверки = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Ошибка проверки правописания в Яндекс.Спеллер!'");
		ОшибкаПодключения = Истина;
		Возврат;
	КонецЕсли;
	// Заполняем список ошибок
	СписокОшибок.Очистить();
	Для Каждого СтрокаОшибки Из РезультатПроверки.error Цикл
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("code",	СтрокаОшибки.code);
		СтруктураОшибки.Вставить("col",		СтрокаОшибки.col);
		СтруктураОшибки.Вставить("len",		СтрокаОшибки.len);
		СтруктураОшибки.Вставить("pos",		СтрокаОшибки.pos);
		СтруктураОшибки.Вставить("row",		СтрокаОшибки.pos);
		СтруктураОшибки.Вставить("word",	СтрокаОшибки.word);
		СтруктураОшибки.Вставить("shift",	0);
		СтруктураОшибки.Вставить("offset",	0);
		МассивВариантов = Новый Массив;
		Для Каждого ВариантЗамены Из СтрокаОшибки.s Цикл
			МассивВариантов.Добавить(ВариантЗамены);
		КонецЦикла;	
		СтруктураОшибки.Вставить("s",		МассивВариантов);
		СписокОшибок.Добавить(СтруктураОшибки, СтрокаОшибки.word);
	КонецЦикла;	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	Если ОшибкаПодключения Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + Нстр("ru='Если для интернет-соединения используется прокси-сервер,'")
		+ Символы.ПС + Нстр("ru='то заполните его параметры и создайте файл настроек прокси'");
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекстОшибки", ТекстОшибки);
		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаПроксиЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.CRM_ФормаНастроекПроксиСервера", ПараметрыФормы,,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли СписокОшибок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Проверка правописания завершена.'") + Символы.ПС + НСтр("ru='Ошибок не найдено!'"));
		Отказ = Истина;
	Иначе
		НомерОшибки 		= 0;
		Сдвиг				= 0;
		ПроверяемоеСлово	= "";
		ТекстИзменен		= Ложь;
		ПодключитьОбработчикОжидания("ЗаполнитьДанныеОшибки", 0.5, Истина);
		УстановитьТекущийЭлемент();
	КонецЕсли;	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура НастройкаПроксиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	Если ТекстИзменен Тогда
		Отказ = Истина;
		ОбратныйВызов = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбратныйВызов, НСтр("ru = 'Сохранить изменения текста?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
// Процедура - обработчик ответа на вопрос перед закрытием формы.
//
// Параметры:
//	Результат				- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИзмененияТекста();
    КонецЕсли;
	ТекстИзменен	= Ложь;
	Закрыть();
КонецПроцедуры // ПередЗакрытиемЗавершение()
