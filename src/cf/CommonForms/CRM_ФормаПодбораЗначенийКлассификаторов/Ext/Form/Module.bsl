
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ЛогическоеВыражение") Тогда
		ЛогическоеВыражение = Параметры.ЛогическоеВыражение;		
	КонецЕсли;
	
	ЛогическоеВыражение = ?(ЗначениеЗаполнено(ЛогическоеВыражение), ЛогическоеВыражение, "И");
	
	// + Тищенко В.В.
	Если Параметры.Свойство("ВыбранныеГруппы") Тогда
		ВыбранныеГруппы.ЗагрузитьЗначения(Параметры.ВыбранныеГруппы);
	КонецЕсли;
	// - Тищенко В.В.
	
	ЗаполнитьДеревоКлассификаторов(Параметры.Принадлежность, Параметры.МассивЗначений, Параметры.МассивЗначенийРеквизитов, Отказ);
	УстановитьВидимостьДоступность(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыбрать(Команда)
	
	СоответствиеЗначений			  = Новый Соответствие;
	МассивВыбранныхЗначений 		  = Новый Массив;
	МассивВыбранныхЗначенийРеквизитов = Новый Массив;
	// + Тищенко В.В.
	МассивВыбранныхГрупп			  = Новый Массив;
	// - Тищенко В.В.
	Для каждого СтрокаКлассификатора Из ДеревоКлассификаторов.ПолучитьЭлементы() Цикл
		// + Тищенко В.В.
		Если СтрокаКлассификатора.Пометка Тогда
			МассивВыбранныхГрупп.Добавить(СтрокаКлассификатора.Классификатор_Значение);
		КонецЕсли;
		// - Тищенко В.В.
		Для каждого СтрокаЗначения Из СтрокаКлассификатора.ПолучитьЭлементы() Цикл
			Если СтрокаЗначения.Пометка Тогда
				МассивВыбранныхЗначений.Добавить(СтрокаЗначения.Классификатор_Значение);
				МассивВыбранныхЗначенийРеквизитов.Добавить(СтрокаЗначения.ЗначениеРеквизита);
				
				СоответствиеЗначений.Вставить(СтрокаЗначения.Классификатор_Значение, СтрокаЗначения.ЗначениеРеквизита);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ЛогическоеВыражение"	, ЛогическоеВыражение);
	Результат.Вставить("ЗначенияКлассификаторов", МассивВыбранныхЗначений);
	Результат.Вставить("ЗначенияРеквизитов"     , МассивВыбранныхЗначенийРеквизитов);
	Результат.Вставить("СоответствиеЗначений"   , СоответствиеЗначений);
	// + Тищенко В.В.
	Результат.Вставить("ЗначениеГрупп"   		,МассивВыбранныхГрупп);
	// - тищенко В.В.
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	РазвернутьСтрокиДерева(Элементы.ДеревоКлассификаторов, "ДеревоКлассификаторов");	
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	РазвернутьСтрокиДерева(Элементы.ДеревоКлассификаторов, "ДеревоКлассификаторов", Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура Информация(Команда)

	Элементы.ДеревоКлассификаторовИнформация.Пометка = Не Элементы.ДеревоКлассификаторовИнформация.Пометка;	
	УстановитьВидимостьДоступность(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоКлассификаторовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКлассификаторовПередУдалением(Элемент, Отказ)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКлассификаторовПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоКлассификаторов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;
	
	ЗаполнитьПометкиРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКлассификаторовЗначениеРеквизитаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоКлассификаторов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;
	
	ТекущиеДанные.Пометка = ЗначениеЗаполнено(ТекущиеДанные.ЗначениеРеквизита);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаСервере
Процедура ЗаполнитьДеревоКлассификаторов(Принадлежность, МассивЗначений, МассивЗначенийРеквизитов, Отказ)
	
	ЭлементыДерева = ДеревоКлассификаторов.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	CRM_ЗначенияКлассификаторов.Владелец КАК Классификатор,
		|	CRM_ЗначенияКлассификаторов.Ссылка КАК Значение,
		|	CRM_ЗначенияКлассификаторов.Владелец.ВидОтображения КАК ВидОтображения,
		|	CRM_ЗначенияКлассификаторов.Владелец.СпособФормирования КАК СпособФормирования,
		|	CRM_ЗначенияКлассификаторов.ДополнительныйРеквизит КАК ДополнительныйРеквизит,
		|	CRM_ЗначенияКлассификаторов.Описание КАК Описание
		|ИЗ
		|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|ГДЕ
//START Кайдашов 08/07/19 353		
		|	НЕ CRM_ЗначенияКлассификаторов.ПометкаУдаления
//END Кайдашов
		|	%%УсловиеПринадлежность%%
		|
		|УПОРЯДОЧИТЬ ПО
		|	CRM_ЗначенияКлассификаторов.Владелец.РеквизитДопУпорядочивания,
		|	CRM_ЗначенияКлассификаторов.РеквизитДопУпорядочивания
		|ИТОГИ ПО
		|	Классификатор";
	
	
	ТекстУсловия = "";		
	Если Принадлежность <> Неопределено Тогда
		ТекстУсловия = "И CRM_ЗначенияКлассификаторов.Владелец В
			|(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	CRM_КлассификаторыПринадлежность.Ссылка
			|ИЗ
			|	ПланВидовХарактеристик.CRM_Классификаторы.Принадлежность КАК CRM_КлассификаторыПринадлежность
			|ГДЕ
//START Кайдашов 08/07/19 353			
			|	CRM_КлассификаторыПринадлежность.ИмяТаблицы В (&Принадлежность) И НЕ CRM_КлассификаторыПринадлежность.Ссылка.ПометкаУдаления)";
//END Кайдашов		
		Запрос.УстановитьПараметр("Принадлежность", Принадлежность);
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%%УсловиеПринадлежность%%", ТекстУсловия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Список значений классификаторов пуст. '"),,,, Отказ);	
		Возврат;
		
	КонецЕсли;
	
	ВыборкаКлассификатор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКлассификатор.Следующий() Цикл
		
		СтрокаКлассификатор = ЭлементыДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКлассификатор, ВыборкаКлассификатор);
		
		СтрокаКлассификатор.Классификатор_Значение = ВыборкаКлассификатор.Классификатор;
		СтрокаКлассификатор.ИндексКартинки = 1;
		
		// + Тищенко В.В.
		Если ВыбранныеГруппы.Количество() <> 0 Тогда
			Если ВыбранныеГруппы.НайтиПоЗначению(ВыборкаКлассификатор.Классификатор) <> Неопределено Тогда
				СтрокаКлассификатор.Пометка = Истина;
			КонецЕсли;
		КонецЕсли;
		// - Тищенко В.В.
		
		ВыборкаЗаписи = ВыборкаКлассификатор.Выбрать();
		Пока ВыборкаЗаписи.Следующий() Цикл
			СтрокаЗначение = СтрокаКлассификатор.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗначение, ВыборкаЗаписи);
			
			СтрокаЗначение.Классификатор_Значение = ВыборкаЗаписи.Значение;
			СтрокаЗначение.ИндексКартинки = 2;
			
			Если МассивЗначений <> Неопределено Тогда
				ИндексЭлементаМассиваЗначений = МассивЗначений.Найти(ВыборкаЗаписи.Значение);
				Если ИндексЭлементаМассиваЗначений <> Неопределено Тогда
					СтрокаЗначение.Пометка 			 = Истина;	
					СтрокаЗначение.ЗначениеРеквизита = МассивЗначенийРеквизитов[ИндексЭлементаМассиваЗначений];
					
				КонецЕсли;
				// + Тищенко В.В.
			Иначе
				СтрокаЗначение.Пометка = СтрокаКлассификатор.Пометка;
				// - Тищенко В.В.
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьДеревоКлассификаторов()

&НаКлиенте
Процедура ЗаполнитьПометкиРекурсивно(ЭлементыДерева, Пометка)

	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		СтрокаДерева.Пометка = Пометка;		
		ЗаполнитьПометкиРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Пометка);
	
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьПометкиРекурсивно()

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ЭлементДерево, ИмяРеквизитаФормы, Развернуть = Истина)
	
	СтрокиДерева = ЭтотОбъект[ИмяРеквизитаФормы].ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Развернуть Тогда
			ЭлементДерево.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		Иначе
			ЭлементДерево.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
							
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)

	ПометкаВидимости = Форма.Элементы.ДеревоКлассификаторовИнформация.Пометка;
	Форма.Элементы.ПраваяКолонка.Видимость = ПометкаВидимости;	

КонецПроцедуры // УстановитьВидимостьДоступность()

#КонецОбласти
