
#Область ОбработчикиСобытийФормы

&НаКлиенте
// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии(Отказ)
	ЗначениеОтложенногоВремени = 300;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
// Процедура обновляет таблицу напоминаний.
//
// Параметры:
//  СтруктураНовыеНапоминания - структура, содержащая массив ключей новых напоминаний,
//								а так же имена видов напоминаний;
//  	Ключи структуры:
//			МассивНапоминаний - массив новых напоминаний;
//			НапоминанияОВходящихПисьмах - если ключ есть, но в массиве присутствуют напоминания о входящих письмах;
//			ПрочиеНапоминания - если ключ есть, но в массиве присутствуют напоминания всех остальных видов;
//  ОчиститьТаблицу - Булево - признак необходимости полной перезаписи таблицы.
//
Процедура ОбновитьТаблицуНапоминаний(СтруктураНовыеНапоминания, ОткрыватьАктивизироватьФорму = Истина) Экспорт
	
	НовыеНапоминания = СтруктураНовыеНапоминания.МассивНапоминаний;
	НапоминанияОВходящихПисьмах = СтруктураНовыеНапоминания.Свойство("НапоминанияОВходящихПисьмах");
	ПрочиеНапоминания = СтруктураНовыеНапоминания.Свойство("ПрочиеНапоминания");
	
	КоличествоСтрокСмещения = ТаблицаНапоминаний.Количество();
	Смещение = Смещение + КоличествоСтрокСмещения;
	мВыделенныеСтроки = Новый Массив();
	Для Каждого ВыделеннаяСтрока Из Элементы.Напоминания.ВыделенныеСтроки Цикл
		мВыделенныеСтроки.Добавить(ВыделеннаяСтрока + КоличествоСтрокСмещения); 
	КонецЦикла;
	Если НЕ (Элементы.Напоминания.ТекущиеДанные = Неопределено)
		И НЕ (Элементы.Напоминания.ТекущаяСтрока = Неопределено) Тогда 
		мТекущаяСтрока = Элементы.Напоминания.ТекущаяСтрока + КоличествоСтрокСмещения;
	КонецЕсли;
	НовыеНапоминанияСписокЗначений	= Новый СписокЗначений;
	СтарыеНапоминанияСписокЗначений	= Новый СписокЗначений;
	Если НЕ (НовыеНапоминания = Неопределено) И НовыеНапоминания.Количество() > 0 Тогда
		Для Каждого Строка Из НовыеНапоминания Цикл
			КлючЗаписи = CRM_НапоминанияКлиент.СформироватьКлючЗаписиПоСтроке(Строка);
			Строки = ТаблицаНапоминаний.НайтиСтроки(КлючЗаписи);
			Если Строки.Количество() = 0 Тогда
				НовыеНапоминанияСписокЗначений.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НапоминанияОВходящихПисьмах И ПрочиеНапоминания Тогда
		
		ТаблицаНапоминаний.Очистить();
		
	Иначе		
		
		ВидОповещенияОповещатьОНовыхВходящихПисьмах = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах");
		
		ТаблицаНапоминанийИндексЭлемента = 0;
		
		Пока ТаблицаНапоминанийИндексЭлемента < ТаблицаНапоминаний.Количество() Цикл
			
			ТекущаяСтрокаНапоминаний = ТаблицаНапоминаний[ТаблицаНапоминанийИндексЭлемента];
			
			ТекущееОповещениеОВходящихПисьмах = ТекущаяСтрокаНапоминаний.ВидОповещения = ВидОповещенияОповещатьОНовыхВходящихПисьмах;
			
			Если (НапоминанияОВходящихПисьмах И ТекущееОповещениеОВходящихПисьмах)
				ИЛИ (ПрочиеНапоминания И НЕ ТекущееОповещениеОВходящихПисьмах) Тогда
				
				ТаблицаНапоминаний.Удалить(ТаблицаНапоминанийИндексЭлемента);				
				
			Иначе
				
				ТаблицаНапоминанийИндексЭлемента = ТаблицаНапоминанийИндексЭлемента + 1;
				
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ (НовыеНапоминания = Неопределено) И НовыеНапоминания.Количество() > 0 Тогда
		Для Каждого Строка Из НовыеНапоминания Цикл
			СтрокаНапоминания = ТаблицаНапоминаний.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНапоминания, Строка);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаНапоминаний.Сортировать("ДатаОповещения Убыв");
	
	НапоминанияНеДобавились = (НовыеНапоминанияСписокЗначений.Количество() = 0);
	Если НЕ (мТекущаяСтрока = Неопределено) Тогда
		Элементы.Напоминания.ТекущаяСтрока = мТекущаяСтрока;
	КонецЕсли;
	Элементы.Напоминания.ВыделенныеСтроки.Очистить();
	Для Индекс = 0 По мВыделенныеСтроки.ВГраница() Цикл
		Элементы.Напоминания.ВыделенныеСтроки.Добавить(мВыделенныеСтроки[Индекс]);
	КонецЦикла; 		
	Заголовок =  НСтр("ru = 'Напоминаний:'");	
	Заголовок = Заголовок + " " + Строка(ТаблицаНапоминаний.Количество());
	Если ТаблицаНапоминаний.Количество() = 0 Тогда
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	Иначе
		Если НЕ НапоминанияНеДобавились Тогда
			ОбновитьРеквизитыФормы();
			Если ОткрыватьАктивизироватьФорму Тогда
				Если Открыта() Тогда
					Активизировать();
				Иначе
					Открыть();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если НЕ Открыта() И ОткрыватьАктивизироватьФорму Тогда
				Открыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
// Процедура перезаполняет значения реквизитов формы.
//
Процедура ОбновитьРеквизитыФормы()
	СтрокаТаблицы = Элементы.Напоминания.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Если ТаблицаНапоминаний.Количество() = 0 Тогда
			Возврат;
		Иначе		
			СтрокаТаблицы = ТаблицаНапоминаний[0];
		КонецЕсли;	
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТаблицы.Предмет) Тогда
		Предмет = СтрокаТаблицы.Предмет;
	Иначе
		Предмет = Неопределено;
	КонецЕсли;
	ДатаНапоминания = СтрокаТаблицы.ДатаНачала;
	ТекстНапоминания = СтрокаТаблицы.Содержание;
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьНапоминания" Тогда
		
		СтруктураНовыхНапоминаний = Новый Структура("ПрочиеНапоминания");
		
		МассивНапоминаний = CRM_НапоминанияСервер.ПолучитьНапоминания(, Истина); //+ VOG Иванов С.А. 15.10.2019 bugs: 752 				
		
		ОткрыватьАктивизироватьФорму = Истина;
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Если Параметр.Свойство("ОбновитьНапоминанияОВходящихПисьмах") И Параметр.ОбновитьНапоминанияОВходящихПисьмах Тогда
				
				СтруктураНовыхНапоминаний.Вставить("НапоминанияОВходящихПисьмах"); 
				
				МассивНапоминанийОВходящихПисьмах = CRM_НапоминанияСервер.ПолучитьНапоминания(Истина);
				
				Если (НЕ МассивНапоминанийОВходящихПисьмах = Неопределено) Тогда
					
					Для каждого НапоминаниеОВходящихПисьмах Из МассивНапоминанийОВходящихПисьмах Цикл
					
						МассивНапоминаний.Добавить(НапоминаниеОВходящихПисьмах);	
					
					КонецЦикла;
				
				КонецЕсли;
				
			КонецЕсли;
			
			Если Параметр.Свойство("ОткрыватьАктивизироватьФормуНапоминаний") Тогда
				ОткрыватьАктивизироватьФорму = Параметр.ОткрыватьАктивизироватьФормуНапоминаний;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураНовыхНапоминаний.Вставить("МассивНапоминаний", МассивНапоминаний);
		
		ОбновитьТаблицуНапоминаний(СтруктураНовыхНапоминаний, ОткрыватьАктивизироватьФорму);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция КнопкаОтложитьНажатиеНаСервере(ВыделеннаяСтрока, а)
	НоваяДатаНапоминания = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, ВыделеннаяСтрока);
	РегистрСведенийМенеджерЗаписи.Прочитать();
	СтруктураНапоминания = Новый Структура();
	СтруктураНапоминания.Вставить("Выбран",			РегистрСведенийМенеджерЗаписи.Выбран());
	Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
		
		СтруктураНапоминания.Вставить("ЭтоНапоминаниеОВходящихПисьмах", РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
		
		РегистрСведенийМенеджерЗаписи.ДатаОповещения = НоваяДатаНапоминания + ЗначениеОтложенногоВремени + а;
		РегистрСведенийМенеджерЗаписи.Счетчик = РегистрСведенийМенеджерЗаписи.Счетчик + 1;
		РегистрСведенийМенеджерЗаписи.Записать(Истина);
		
	ИначеЕсли ТипЗнч(ВыделеннаяСтрока.Предмет) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			
		МассивКлючейНапоминаний = CRM_НапоминанияСервер.ПолучитьКлючиНапоминанийОВходящихЭлектронныхПисьмахУчетнойЗаписиПользователя(ВыделеннаяСтрока.Предмет, ВыделеннаяСтрока.Пользователь);
		
		Для каждого КлючНапоминанияУчетнойЗаписи Из МассивКлючейНапоминаний Цикл
			
			РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, КлючНапоминанияУчетнойЗаписи);
			РегистрСведенийМенеджерЗаписи.Прочитать();
			СтруктураНапоминания.Вставить("Выбран",	РегистрСведенийМенеджерЗаписи.Выбран());
			Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
			
				Если РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах Тогда
							
					РегистрСведенийМенеджерЗаписи.ДатаОповещения = НоваяДатаНапоминания + ЗначениеОтложенногоВремени + а;
					РегистрСведенийМенеджерЗаписи.Счетчик = РегистрСведенийМенеджерЗаписи.Счетчик + 1;
					РегистрСведенийМенеджерЗаписи.Записать(Истина);
							
				КонецЕсли; 
			
			КонецЕсли;	
			
		КонецЦикла; 
		
		СтруктураНапоминания.Вставить("ЭтоНапоминаниеОВходящихПисьмах", Истина);
		
	КонецЕсли;
	Возврат СтруктураНапоминания;
КонецФункции

&НаСервере
// Функция возвращает структуру записи регистра сведений CRM_Напоминания
// по строке таблицы напоминаний.
//
// Параметры:
//  ВыделеннаяСтрока - строка таблицы напоминаний.
//  а  - индекс.
//
// Возвращаемое значение:
//  СтруктураНапоминания - структура записи регистра сведений CRM_Напоминания.
//
Функция КнопкаПрекратитьНажатиеНаСервере(ВыделеннаяСтрока)
	РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, ВыделеннаяСтрока);
	РегистрСведенийМенеджерЗаписи.Прочитать();
	СтруктураНапоминания = Новый Структура();
	СтруктураНапоминания.Вставить("Выбран",	РегистрСведенийМенеджерЗаписи.Выбран());
	Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
		
		СтруктураНапоминания.Вставить("ЭтоНапоминаниеОВходящихПисьмах", РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах);
		
		Если	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеНеЗавершенныеСобытияЗадачи
			Или	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки
			Или	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам
			Или	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам 
			Или	РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОбОкончанииСрокаЗадач Тогда
			РегистрСведенийМенеджерЗаписи.ДатаАктуальности = (CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()-1);
			РегистрСведенийМенеджерЗаписи.Записать();
			
		ИначеЕсли РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещенияОДняхРождения Тогда
			
			СтруктураДлительности = Новый Структура();
			СтруктураДлительности.Вставить("Дней"	,0);
			СтруктураДлительности.Вставить("Часов"	,0);
			СтруктураДлительности.Вставить("Минут"	,0);
			СтруктураДлительности.Вставить("ВпередПоКалендарю"	,Ложь);
			СтруктураДлительности.Вставить("ВидОповещения"		,РегистрСведенийМенеджерЗаписи.ВидОповещения);
			
			Если РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Минута Тогда
				
				СтруктураДлительности.Минут = РегистрСведенийМенеджерЗаписи.СрокОповещения;
				
			ИначеЕсли РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Час Тогда
				
				СтруктураДлительности.Часов = РегистрСведенийМенеджерЗаписи.СрокОповещения;
				
			ИначеЕсли РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.День Тогда
				
				СтруктураДлительности.Дней = РегистрСведенийМенеджерЗаписи.СрокОповещения;
				
			ИначеЕсли РегистрСведенийМенеджерЗаписи.Периодичность = Перечисления.CRM_ПериодичностьОповещений.Неделя Тогда
				
				СтруктураДлительности.Дней = РегистрСведенийМенеджерЗаписи.СрокОповещения*7;
				
			КонецЕсли;
			
			ДатаНачала = CRM_ОбщегоНазначенияСервер.ПолучитьДатуПоКалендарю(НачалоДня(ДобавитьМесяц(РегистрСведенийМенеджерЗаписи.ДатаНачала,12)),СтруктураДлительности,,Неопределено);
			
			РегистрСведенийМенеджерЗаписи.ДатаНачала		= ДатаНачала;
			РегистрСведенийМенеджерЗаписи.ДатаОповещения	= ДатаНачала;
			РегистрСведенийМенеджерЗаписи.ДатаАктуальности	= ДатаНачала + (60*60*24*7);
			РегистрСведенийМенеджерЗаписи.Записать();
			
		ИначеЕсли ТипЗнч(РегистрСведенийМенеджерЗаписи.Предмет) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			
			РегистрСведенийМенеджерЗаписи.ДатаАктуальности = (CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()-60*60*24);
			РегистрСведенийМенеджерЗаписи.Записать();
			
		Иначе
			РегистрСведенийМенеджерЗаписи.Удалить();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыделеннаяСтрока.Предмет) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			
		МассивКлючейНапоминаний = CRM_НапоминанияСервер.ПолучитьКлючиНапоминанийОВходящихЭлектронныхПисьмахУчетнойЗаписиПользователя(ВыделеннаяСтрока.Предмет, ВыделеннаяСтрока.Пользователь);
		
		Для каждого КлючНапоминанияУчетнойЗаписи Из МассивКлючейНапоминаний Цикл
			
			РегистрСведенийМенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, КлючНапоминанияУчетнойЗаписи);
			РегистрСведенийМенеджерЗаписи.Прочитать();
			СтруктураНапоминания.Вставить("Выбран",	РегистрСведенийМенеджерЗаписи.Выбран());
			Если РегистрСведенийМенеджерЗаписи.Выбран() Тогда
			
				Если РегистрСведенийМенеджерЗаписи.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах Тогда
				
					РегистрСведенийМенеджерЗаписи.Удалить();
				
				КонецЕсли; 
			
			КонецЕсли;	
			
		КонецЦикла; 
		
		СтруктураНапоминания.Вставить("ЭтоНапоминаниеОВходящихПисьмах", Истина);
		
	КонецЕсли;
	Возврат СтруктураНапоминания;
КонецФункции

// Функция возвращает полное имя объекта метаданных.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на объект конфигурации.
//
// Возвращаемое значение:
//  ИмяОбъекта - Строка -  полное имя объекта метаданных.
//
&НаСервере
Функция ПолучитьИмяОбъектаМетаданныхДляОткрытияФормы(СсылкаНаОбъект)
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект)).ПолноеИмя();
КонецФункции

// Функция возвращает имя основной формы объекта метеданных.
//
// Параметры:
//  СсылкаНаОбъект - ссылка на объект конфигурации.
//
// Возвращаемое значение:
//  ИмяФормы - Строка -  имя формы объекта конфигурации.
//
&НаСервере
Функция ПолучитьИмяОсновнойФормыОбъектаМетаданных(СсылкаНаОбъект)
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект)).ОсновнаяФормаОбъекта.Имя;
КонецФункции	

// Функция проверяет является ли задача личной.
//
// Параметры:
//  ЗадачаСсылка - ссылка на объект (задача).
//
// Возвращаемое значение:
//  Булево - Истина, если это личная задача и ложь - в противном случае.
//
&НаСервере
Функция ЭтоЛичнаяЗадача(ЗадачаСсылка)
	Возврат ЗадачаСсылка.CRM_Личная;	
КонецФункции

&НаСервере
Функция ЭтоНезависимыйПроцесс(ЗадачаСсылка)
	
	Возврат (ЗадачаСсылка.БизнесПроцесс.КартаМаршрута.ТипПроцесса = Перечисления.bpmТипыПроцессов.НезависимыйПроцесс);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьФормуОткрытьПредмет(ТекущийПредмет)
	
	ПоказатьЗначение(, ТекущийПредмет); 
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КнопкаПрекратитьВсеНажатие(Команда)
	
	БылиИзмененыОповещенияОВходящихПисьмах = Ложь;
	
	Для Каждого Строка Из ТаблицаНапоминаний Цикл
		СтруктураСтроки = CRM_НапоминанияКлиент.СформироватьКлючЗаписиПоСтроке(Строка);
		СтруктураНапоминания = КнопкаПрекратитьНажатиеНаСервере(СтруктураСтроки);
		Если НЕ СтруктураНапоминания.Выбран Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Напоминание удалено или модифицировано!'"));
			Продолжить;
		КонецЕсли;
		Если СтруктураНапоминания.ЭтоНапоминаниеОВходящихПисьмах Тогда
			БылиИзмененыОповещенияОВходящихПисьмах = Истина;
		КонецЕсли; 
	КонецЦикла;
	Оповестить("ОбновитьНапоминания", Новый Структура("ОбновитьНапоминанияОВходящихПисьмах", БылиИзмененыОповещенияОВходящихПисьмах));
	Если ТаблицаНапоминаний.Количество() = 0 И Открыта() Тогда
		Закрыть();
	КонецЕсли;
	ОбновитьРеквизитыФормы();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаРедактироватьНажатие(Команда)
	
	ПоследняяУчетнаяЗапись = Неопределено;
	ПерейтиКЧерновикам		= Ложь;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Напоминания.ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = Элементы.Напоминания.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТипЗнч(ВыделеннаяСтрока.Предмет) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			
			ПоследняяУчетнаяЗапись = ВыделеннаяСтрока.Предмет;
			ПерейтиКЧерновикам = (Найти(ВыделеннаяСтрока.Содержание,"Письма перенесены в ""Черновики""") > 0);
		Иначе
			
			ПолучитьФормуОткрытьПредмет(ВыделеннаяСтрока.Предмет);
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПоследняяУчетнаяЗапись = Неопределено Тогда
	
		ОткрытьМенеджерПочты(ПоследняяУчетнаяЗапись, ПерейтиКЧерновикам);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события Нажатие элемента формы КнопкаПрекратить.
//
Процедура КнопкаПрекратитьНажатие(Команда)
	
	БылиИзмененыОповещенияОВходящихПисьмах = Ложь;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Напоминания.ВыделенныеСтроки Цикл
		ВыдСтрока = Элементы.Напоминания.ДанныеСтроки(ВыделеннаяСтрока); 
		Если ВыдСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураСтроки = CRM_НапоминанияКлиент.СформироватьКлючЗаписиПоСтроке(ВыдСтрока);
		СтруктураНапоминания = КнопкаПрекратитьНажатиеНаСервере(СтруктураСтроки);
		Если НЕ СтруктураНапоминания.Выбран Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Напоминание удалено или модифицировано!'"));
			Продолжить;
		КонецЕсли;
		Если СтруктураНапоминания.ЭтоНапоминаниеОВходящихПисьмах Тогда
			БылиИзмененыОповещенияОВходящихПисьмах = Истина;
		КонецЕсли; 
	КонецЦикла;	
	Оповестить("ОбновитьНапоминания", Новый Структура("ОбновитьНапоминанияОВходящихПисьмах", БылиИзмененыОповещенияОВходящихПисьмах));
	Если ТаблицаНапоминаний.Количество() = 0 И Открыта() Тогда
		Закрыть();
	КонецЕсли;
	ОбновитьРеквизитыФормы();
КонецПроцедуры

&НаКлиенте
// Обработчик события Нажатие элемента формы КнопкаОтложить.
//
Процедура КнопкаОтложитьНажатие(Команда)
	аэлемент = 0;
	
	БылиИзмененыОповещенияОВходящихПисьмах = Ложь;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Напоминания.ВыделенныеСтроки Цикл
		ТекущаяСтрока = Элементы.Напоминания.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущаяСтрока = Неопределено Тогда
			Продолжить;	
		КонецЕсли;	
		СтруктураСтроки = CRM_НапоминанияКлиент.СформироватьКлючЗаписиПоСтроке(ТекущаяСтрока);
		СтруктураНапоминания = КнопкаОтложитьНажатиеНаСервере(СтруктураСтроки, аэлемент);
		Если НЕ СтруктураНапоминания.Выбран Тогда
			аэлемент = аэлемент + 1; 
			ПоказатьПредупреждение(, НСтр("ru = 'Напоминание удалено или модифицировано!'"));
			Продолжить;
		КонецЕсли;
		Если СтруктураНапоминания.ЭтоНапоминаниеОВходящихПисьмах Тогда
			БылиИзмененыОповещенияОВходящихПисьмах = Истина;
		КонецЕсли; 
		аэлемент = аэлемент + 1;
	КонецЦикла;
	Оповестить("ОбновитьНапоминания", Новый Структура("ОбновитьНапоминанияОВходящихПисьмах", БылиИзмененыОповещенияОВходящихПисьмах));
	Если ТаблицаНапоминаний.Количество() = 0 И Открыта() Тогда
		Закрыть();
	КонецЕсли;
	ОбновитьРеквизитыФормы();
КонецПроцедуры

&НаКлиенте
// Обработчик события ПриАктивизацииСтроки элемента формы ТаблицаНапоминаний.
//
Процедура ТаблицаНапоминанийПриАктивизацииСтроки(Элемент)
	ОбновитьРеквизитыФормы();
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаНапоминанийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаНапоминанийПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	Для Каждого ВыделеннаяСтрока Из Элементы.Напоминания.ВыделенныеСтроки Цикл
		СтрокаВыделения = Элементы.Напоминания.ДанныеСтроки(ВыделеннаяСтрока); 
		СтруктураСтроки = CRM_НапоминанияКлиент.СформироватьКлючЗаписиПоСтроке(СтрокаВыделения);
		СтруктураНапоминания = КнопкаПрекратитьНажатиеНаСервере(СтруктураСтроки);
		Если НЕ СтруктураНапоминания.Выбран Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Напоминание удалено или модифицировано!'"));
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Оповестить("ОбновитьНапоминания");
	Если ТаблицаНапоминаний.Количество() = 0 И Открыта() Тогда
		Закрыть();
	КонецЕсли;
	ОбновитьРеквизитыФормы();	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНапоминанийПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	
	ПоследняяУчетнаяЗапись	= Неопределено;
	ПерейтиКЧерновикам		= Ложь;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Напоминания.ВыделенныеСтроки Цикл
		ВыделеннаяСтрока = Элементы.Напоминания.ДанныеСтроки(ВыделеннаяСтрока);
		Если ВыделеннаяСтрока = Неопределено Тогда Продолжить; КонецЕсли;
		
		Если ТипЗнч(ВыделеннаяСтрока.Предмет) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			
			ПоследняяУчетнаяЗапись = ВыделеннаяСтрока.Предмет;
			ПерейтиКЧерновикам = (Найти(ВыделеннаяСтрока.Содержание,"Письма перенесены в ""Черновики""") > 0);
		Иначе
			
			ПолучитьФормуОткрытьПредмет(ВыделеннаяСтрока.Предмет);
			
		КонецЕсли 
		
	КонецЦикла;
	
	Если Не ПоследняяУчетнаяЗапись = Неопределено Тогда
	
		ОткрытьМенеджерПочты(ПоследняяУчетнаяЗапись,ПерейтиКЧерновикам);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПерейтиКЧерновикам = (Найти(Элементы.Напоминания.ТекущиеДанные.Содержание,"Письма перенесены в ""Черновики""") > 0);
		ОткрытьМенеджерПочты(Предмет, ПерейтиКЧерновикам);
	Иначе
		СтандартнаяОбработка = Ложь;
		
		ПолучитьФормуОткрытьПредмет(Предмет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенеджерПочты(УчетнаяЗапись,ПерейтиКЧерновикам)

	ФормаПочтовогоМенеджера = ПолучитьФорму("Обработка.CRM_МенеджерПочты.Форма");
	
	ВидПапки = ?(ПерейтиКЧерновикам,ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики"),ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Входящие"));
	
	Если ФормаПочтовогоМенеджера.Открыта() Тогда
		ФормаПочтовогоМенеджера.УстановитьПапкуВходящиеУчетнойЗаписи(УчетнаяЗапись, ВидПапки);
		ФормаПочтовогоМенеджера.Активизировать();
	Иначе
		ФормаПочтовогоМенеджера.УчетнаяЗаписьВыбранная	= УчетнаяЗапись;
		ФормаПочтовогоМенеджера.ВидПапкиВыбранный		= ВидПапки;
		ФормаПочтовогоМенеджера.Открыть();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
