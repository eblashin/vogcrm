
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	ИспользоватьКлассификаторы					 = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьКлассификаторы");
	
	ИнциализироватьПараметрыКонтроляРеквизитов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	СохранитьПараметрыКонтроля();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	СохранитьПараметрыКонтроля();	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПередУдалением(Элемент, Отказ)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыКонтроляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыКонтроляПередУдалением(Элемент, Отказ)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ДеревоОбъектовПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыКонтроляПометкаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.РеквизитыКонтроля.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;
	
	ЗаполнитьПометкиРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Пометка, "Пометка");
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыКонтроляПометкаПроцессаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыКонтроля.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
		
	КонецЕсли;
	
	ЗаполнитьПометкиРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.ПометкаПроцесса, "ПометкаПроцесса");
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыКонтроляПометкаОбменаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыКонтроля.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.СсылкаРеквизита) = Тип("ПланВидовХарактеристикСсылка.CRM_Классификаторы") Тогда
		
		Если Не ПроверитьЕстьЗначенияКлассификатора(ТекущиеДанные.СсылкаРеквизита) Тогда
			
			ТекущиеДанные.ПометкаОбмена = ТекущиеДанные.ПометкаОбмена;
			Возврат;
			
		Иначе 
			ТекущиеДанные.ПометкаОбмена = Не ТекущиеДанные.ПометкаОбмена;			
		КонецЕсли;
		
		СтруктураРеквизита = Новый Структура;	
		СтруктураРеквизита.Вставить("ТипРеквизита");
		СтруктураРеквизита.Вставить("СсылкаРеквизита");
		СтруктураРеквизита.Вставить("Представление");
		СтруктураРеквизита.Вставить("ПометкаОбмена");
		СтруктураРеквизита.Вставить("ПараметрыКонтроляЗначений");
		
		ЗаполнитьЗначенияСвойств(СтруктураРеквизита, ТекущиеДанные);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЗначенийКлассификаторовЗавершение", ЭтотОбъект, ТекущиеДанные);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрыКонтроля", СтруктураРеквизита);
		
		ОткрытьФорму("Справочник.CRM_ЗначенияКлассификаторов.Форма.ФормаВыбораЗначений", 
			ПараметрыФормы,
			,
			,
			,
			,
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенийКлассификаторовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ПараметрыКонтроляЗначений = ДополнительныеПараметры.ПараметрыКонтроляЗначений;
		
		Если Результат.Количество() > 0 Тогда
			СохранитьПараметрыКонтроляЗначенийКлассификаторов(ПараметрыКонтроляЗначений, Результат);
		Иначе
			ПараметрыКонтроляЗначений = "";	
		КонецЕсли;
		
		ДополнительныеПараметры.ПараметрыКонтроляЗначений 	= ПараметрыКонтроляЗначений;
		ДополнительныеПараметры.ПометкаОбмена 				= ПараметрыКонтроляЗначений <> "";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

&НаКлиенте
Процедура Подключаемый_ДеревоОбъектовПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	
	КонецЕсли;
	
	РазвернутьСтрокиДерева(ТекущиеДанные, "РеквизитыКонтроля");	
	
КонецПроцедуры // Подключаемый_ДеревоОбъектовПриАктивизацииСтроки()

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаСервере
Процедура ИнциализироватьПараметрыКонтроляРеквизитов()

	ПараметрыКонтроля = Константы.вогПараметрыКонтроляЗаполненностиРеквизитовОбъектов.Получить().Получить();
	Если ПараметрыКонтроля = Неопределено Тогда
		ПараметрыКонтроляРеквизитов = Новый Соответствие;
		ПараметрыКонтроляПроцесса   = Новый Соответствие;
		ПараметрыКонтроляОбмена   	= Новый Соответствие; // Солодов
	//+Костыль
	ИначеЕсли ТипЗнч(ПараметрыКонтроля) = Тип("Соответствие") Тогда
		ПараметрыКонтроляРеквизитов = ПараметрыКонтроля;
		ПараметрыКонтроляПроцесса   = Новый Соответствие;
		ПараметрыКонтроляОбмена   	= Новый Соответствие; // Солодов
	//-Костыль
	Иначе
		ПараметрыКонтроляРеквизитов = ПараметрыКонтроля.ПараметрыКонтроляРеквизитов;
		ПараметрыКонтроляПроцесса   = ПараметрыКонтроля.ПараметрыКонтроляПроцесса;
		
		Если ПараметрыКонтроля.Свойство("ПараметрыКонтроляОбмена") Тогда
			ПараметрыКонтроляОбмена   	= ПараметрыКонтроля.ПараметрыКонтроляОбмена; // Солодов
		Иначе
			ПараметрыКонтроляОбмена   	= Новый Соответствие;
		КонецЕсли;
		
		Если ПараметрыКонтроля.Свойство("ПараметрыКонтроляЗначенийКлассификаторов") Тогда
			ПараметрыКонтроляЗначенийКлассификаторов = ПараметрыКонтроля.ПараметрыКонтроляЗначенийКлассификаторов; // Солодов
		Иначе
			ПараметрыКонтроляЗначенийКлассификаторов = Новый Соответствие;
		КонецЕсли;
		
	КонецЕсли;
	
	//Таблица объектов
	ЭлементыДерева = ДеревоОбъектов.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	//Справочники
	ЗаполнитьОбъектыМетаданных(ПараметрыКонтроляРеквизитов, 
		ПараметрыКонтроляПроцесса, 
		ПараметрыКонтроляОбмена, 
		ПараметрыКонтроляЗначенийКлассификаторов, 
		ЭлементыДерева, 
		"Справочники", 
		БиблиотекаКартинок.Справочник);	
	
КонецПроцедуры // ИнциализироватьПараметрыКонтроляРеквизитов()

&НаСервереБезКонтекста
Процедура ЗаполнитьОбъектыМетаданных(ПараметрыКонтроляРеквизитов, 
								ПараметрыКонтроляПроцесса, 
								ПараметрыКонтроляОбмена, 
								ПараметрыКонтроляЗначенийКлассификаторов, 
								ЭлементыДерева, 
								ТипОбъекта, 
								Картинка)

	СтрокаДерева = ЭлементыДерева.Добавить();
	
	СтрокаДерева.ТипОбъекта		  = ТипОбъекта;
	СтрокаДерева.ПолноеИмяОбъекта = ТипОбъекта;
	СтрокаДерева.Синоним		  = ТипОбъекта;
	СтрокаДерева.Картинка		  = Картинка;
	
	МассивИсключаемыхСтрок = Новый Массив;
	Для каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		
		ЗаполнитьСтрокуОбъектаМетаданных(ПараметрыКонтроляРеквизитов, 
										ПараметрыКонтроляПроцесса, 
										ПараметрыКонтроляОбмена, 
										ПараметрыКонтроляЗначенийКлассификаторов, 
										СтрокаДерева.ПолучитьЭлементы(), 
										ТипОбъекта, 
										ОбъектМетаданных, 
										МассивИсключаемыхСтрок, 
										Картинка);
										
	КонецЦикла;
	
	Для каждого ИсключаемаяСтрока Из МассивИсключаемыхСтрок Цикл
		СтрокаДерева.ПолучитьЭлементы().Удалить(ИсключаемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОбъектыМетаданных()

&НаСервереБезКонтекста
Процедура ЗаполнитьСтрокуОбъектаМетаданных(ПараметрыКонтроляРеквизитов, 
										ПараметрыКонтроляПроцесса, 
										ПараметрыКонтроляОбмена, 
										ПараметрыКонтроляЗначенийКлассификаторов, 
										ЭлементыДерева, 
										ТипОбъекта, 
										ОбъектМетаданных, 
										МассивИсключаемыхСтрок, 
										Картинка)

	СтрокаДерева = ЭлементыДерева.Добавить();
	
	ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	
	СтрокаДерева.ТипОбъекта		  = ТипОбъекта;
	СтрокаДерева.ПолноеИмяОбъекта = ПолноеИмяОбъекта;
	СтрокаДерева.Синоним		  = ОбъектМетаданных.Синоним;
	СтрокаДерева.Картинка		  = Картинка;
	
	//Контроль реквизитов
	ПараметрыКонтроляОбъекта = ПараметрыКонтроляРеквизитов.Получить(ПолноеИмяОбъекта);
	Если ПараметрыКонтроляОбъекта <> Неопределено Тогда
		СтрокаДерева.РассчетПриЗаписи = ПараметрыКонтроляОбъекта.РассчетПриЗаписи;
		
	КонецЕсли;
	
	//Контроль запуска процесса
	ПараметрыКонтроляПроцессаОбъекта = ПараметрыКонтроляПроцесса.Получить(ПолноеИмяОбъекта);
	Если ПараметрыКонтроляПроцессаОбъекта <> Неопределено Тогда
		СтрокаДерева.РассчетПриЗаписи = ПараметрыКонтроляПроцессаОбъекта.РассчетПриЗаписи;
		
	КонецЕсли;
	
	//Контроль реквизитов при обмене
	ПараметрыКонтроляОбменаОбъекта = ПараметрыКонтроляОбмена.Получить(ПолноеИмяОбъекта);
	
	//Контроль значений классификаторов при обмене
	ПараметрыКонтроляЗначенийКлассификаторовОбъекта = ПараметрыКонтроляЗначенийКлассификаторов.Получить(ПолноеИмяОбъекта);
	
	ЗаполнитьРеквизитыКонтроляОбъекта(ПараметрыКонтроляОбъекта, 
									ПараметрыКонтроляПроцессаОбъекта, 
									ПараметрыКонтроляОбменаОбъекта, 
									ПараметрыКонтроляЗначенийКлассификаторовОбъекта, 
									СтрокаДерева.РеквизитыКонтроля, 
									ОбъектМетаданных);
									
	Если СтрокаДерева.РеквизитыКонтроля.ПолучитьЭлементы().Количество() = 0 Тогда
		МассивИсключаемыхСтрок.Добавить(СтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуОбъектаМетаданных()

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыКонтроляОбъекта(ПараметрыКонтроляОбъекта, 
										ПараметрыКонтроляПроцессаОбъекта, 
										ПараметрыКонтроляОбменаОбъекта, 
										ПараметрыКонтроляЗначенийКлассификаторовОбъекта, 
										РеквизитыКонтроля, 
										ОбъектМетаданных)
	
	ЭлементыРеквизитыКонтроля = РеквизитыКонтроля.ПолучитьЭлементы();
	
	//Реквизиты
	Если ОбъектМетаданных.Реквизиты.Количество() > 0 Тогда
		СтрокаТипаРеквизита = ЭлементыРеквизитыКонтроля.Добавить();
		
		ТипРеквизита = "РеквизитОбъекта";
		СтруктураРеквизита = Новый Структура;	
		СтруктураРеквизита.Вставить("ТипРеквизита"   , ТипРеквизита);
		СтруктураРеквизита.Вставить("СсылкаРеквизита", ТипРеквизита);
		СтруктураРеквизита.Вставить("Представление"  , "Реквизиты");
		СтруктураРеквизита.Вставить("Пометка"		 , Ложь);
		ЗаполнитьЗначенияСвойств(СтрокаТипаРеквизита, СтруктураРеквизита);
		
		ТекущиеПараметрыКонтроля 		 = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляОбъекта        , ТипРеквизита);
		ТекущиеПараметрыКонтроляПроцесса = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляПроцессаОбъекта, ТипРеквизита);
		ТекущиеПараметрыКонтроляОбмена   = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляОбменаОбъекта	, ТипРеквизита); // Солодов
		Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			СтруктураРеквизита = Новый Структура;	
			СтруктураРеквизита.Вставить("ТипРеквизита"   , ТипРеквизита);
			СтруктураРеквизита.Вставить("СсылкаРеквизита", Реквизит.Имя);
			СтруктураРеквизита.Вставить("Представление"  , Реквизит.Синоним);
			СтруктураРеквизита.Вставить("ИндексКартинки" , 22);
			СтруктураРеквизита.Вставить("Пометка"		 , ТекущиеПараметрыКонтроля.Найти(Реквизит.Имя) <> Неопределено);
			СтруктураРеквизита.Вставить("ПометкаПроцесса", ТекущиеПараметрыКонтроляПроцесса.Найти(Реквизит.Имя) <> Неопределено);
			СтруктураРеквизита.Вставить("ПометкаОбмена"	 , ТекущиеПараметрыКонтроляОбмена.Найти(Реквизит.Имя) <> Неопределено); // Солодов
			ЗаполнитьЗначенияСвойств(СтрокаТипаРеквизита.ПолучитьЭлементы().Добавить(), СтруктураРеквизита);
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Табличные части
	Если ОбъектМетаданных.ТабличныеЧасти.Количество() > 0 Тогда	
		МассивТабличныйЧастей = Новый Массив;
		
		Исключения = Новый Соответствие;
		Исключения.Вставить("КонтактнаяИнформация"   , Истина);
		Исключения.Вставить("ДополнительныеРеквизиты", Истина);
		Для каждого Реквизит Из ОбъектМетаданных.ТабличныеЧасти Цикл
			Если Исключения.Получить(Реквизит.Имя) = Истина Тогда
				Продолжить;
				
			КонецЕсли;
			
			МассивТабличныйЧастей.Добавить(Реквизит);
			
		КонецЦикла;
		
		Если МассивТабличныйЧастей.Количество() > 0 Тогда
			СтрокаТипаРеквизита = ЭлементыРеквизитыКонтроля.Добавить();
			
			ТипРеквизита = "ТабличнаяЧастьОбъекта";
			СтруктураРеквизита = Новый Структура;	
			СтруктураРеквизита.Вставить("ТипРеквизита"   , ТипРеквизита);
			СтруктураРеквизита.Вставить("СсылкаРеквизита", ТипРеквизита);
			СтруктураРеквизита.Вставить("Представление"  , "Табличные части");
			СтруктураРеквизита.Вставить("Пометка"		 , Ложь);
			ЗаполнитьЗначенияСвойств(СтрокаТипаРеквизита, СтруктураРеквизита);
			
			ТекущиеПараметрыКонтроля 		 = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляОбъекта		, ТипРеквизита);
			ТекущиеПараметрыКонтроляПроцесса = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляПроцессаОбъекта, ТипРеквизита);
			ТекущиеПараметрыКонтроляОбмена 	 = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляОбменаОбъекта	, ТипРеквизита); // Солодов
			Для каждого Реквизит Из МассивТабличныйЧастей Цикл
				СтруктураРеквизита = Новый Структура;	
				СтруктураРеквизита.Вставить("ТипРеквизита"   , ТипРеквизита);
				СтруктураРеквизита.Вставить("СсылкаРеквизита", Реквизит.Имя);
				СтруктураРеквизита.Вставить("Представление"  , Реквизит.Синоним);
				СтруктураРеквизита.Вставить("ИндексКартинки" , 23);
				СтруктураРеквизита.Вставить("Пометка"		 , ТекущиеПараметрыКонтроля.Найти(Реквизит.Имя) <> Неопределено);
				СтруктураРеквизита.Вставить("ПометкаПроцесса", ТекущиеПараметрыКонтроляПроцесса.Найти(Реквизит.Имя) <> Неопределено);
				СтруктураРеквизита.Вставить("ПометкаОбмена"	 , ТекущиеПараметрыКонтроляОбмена.Найти(Реквизит.Имя) <> Неопределено); // Солодов
				ЗаполнитьЗначенияСвойств(СтрокаТипаРеквизита.ПолучитьЭлементы().Добавить(), СтруктураРеквизита);
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	//Доп. реквизиты 
	Если ИспользоватьДопРеквизиты(ОбъектМетаданных) Тогда
		ОписаниеОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя()).ПустаяСсылка();
		НаборыСвойствОбъекта = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ОписаниеОбъекта);
		Если НаборыСвойствОбъекта.Количество() > 0 Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НаборыСвойств", НаборыСвойствОбъекта.ВыгрузитьКолонку("Набор"));
			
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДополнительныеРеквизиты.Свойство,
				|	ДополнительныеРеквизиты.Свойство.Представление КАК Представление
				|ИЗ
				|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
				|ГДЕ
				|	ДополнительныеРеквизиты.Ссылка В (&НаборыСвойств)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДополнительныеРеквизиты.НомерСтроки";
					
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				СтрокаТипаРеквизита = ЭлементыРеквизитыКонтроля.Добавить();
				
				ТипРеквизита = "ДополнительныйРеквизитОбъекта";
				СтруктураРеквизита = Новый Структура;	
				СтруктураРеквизита.Вставить("ТипРеквизита"   , ТипРеквизита);
				СтруктураРеквизита.Вставить("СсылкаРеквизита", ТипРеквизита);
				СтруктураРеквизита.Вставить("Представление"  , "Доп. реквизиты");
				СтруктураРеквизита.Вставить("Пометка"		 , Ложь);
				СтруктураРеквизита.Вставить("ПометкаПроцесса", Ложь);
				СтруктураРеквизита.Вставить("ПометкаОбмена"	 , Ложь); // Солодов
				ЗаполнитьЗначенияСвойств(СтрокаТипаРеквизита, СтруктураРеквизита);
				
				ТекущиеПараметрыКонтроля 		 = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляОбъекта		, ТипРеквизита);
				ТекущиеПараметрыКонтроляПроцесса = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляПроцессаОбъекта, ТипРеквизита);
				ТекущиеПараметрыКонтроляОбмена 	 = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляОбменаОбъекта	, ТипРеквизита); // Солодов
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтруктураРеквизита = Новый Структура;	
					СтруктураРеквизита.Вставить("ТипРеквизита"   , ТипРеквизита);
					СтруктураРеквизита.Вставить("СсылкаРеквизита", Выборка.Свойство);
					СтруктураРеквизита.Вставить("Представление"  , Выборка.Представление);
					СтруктураРеквизита.Вставить("ИндексКартинки" , 24);
					СтруктураРеквизита.Вставить("Пометка"		 , ТекущиеПараметрыКонтроля.Найти(Выборка.Свойство) <> Неопределено);
					СтруктураРеквизита.Вставить("ПометкаПроцесса", ТекущиеПараметрыКонтроляПроцесса.Найти(Выборка.Свойство) <> Неопределено);
					СтруктураРеквизита.Вставить("ПометкаОбмена"	 , ТекущиеПараметрыКонтроляОбмена.Найти(Выборка.Свойство) <> Неопределено); // Солодов
					ЗаполнитьЗначенияСвойств(СтрокаТипаРеквизита.ПолучитьЭлементы().Добавить(), СтруктураРеквизита);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЕсли;
	
	//Виды КИ
	Если ИспользоватьКИ(ОбъектМетаданных) Тогда
		ГруппаВидовКИ = вогОбщегоНазначения.ГруппаВидовКИОбъекта(ОбъектМетаданных);
		Если ГруппаВидовКИ <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
			
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СправочникВидыКонтактнойИнформации.Ссылка КАК ВидКИ,
				|	ВЫБОР
				|		КОГДА СправочникВидыКонтактнойИнформации.ЭтоГруппа
				|			ТОГДА ВЫБОР
				|					КОГДА СправочникВидыКонтактнойИнформации.ПометкаУдаления
				|						ТОГДА 1
				|					КОГДА СправочникВидыКонтактнойИнформации.Предопределенный
				|						ТОГДА 2
				|					ИНАЧЕ 0
				|				КОНЕЦ
				|		КОГДА СправочникВидыКонтактнойИнформации.ПометкаУдаления
				|			ТОГДА 4
				|		КОГДА СправочникВидыКонтактнойИнформации.Предопределенный
				|			ТОГДА ВЫБОР СправочникВидыКонтактнойИнформации.Тип
				|					КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
				|						ТОГДА 14
				|					КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
				|						ТОГДА 15
				|					КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница)
				|						ТОГДА 16
				|					КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс)
				|						ТОГДА 17
				|					КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое)
				|						ТОГДА 18
				|					КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
				|						ТОГДА 19
				|					КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Skype)
				|						ТОГДА 21
				|					ИНАЧЕ 3
				|				КОНЕЦ
				|		ИНАЧЕ ВЫБОР СправочникВидыКонтактнойИнформации.Тип
				|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
				|					ТОГДА 7
				|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
				|					ТОГДА 8
				|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ВебСтраница)
				|					ТОГДА 9
				|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс)
				|					ТОГДА 10
				|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Другое)
				|					ТОГДА 11
				|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
				|					ТОГДА 12
				|				КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Skype)
				|					ТОГДА 20
				|				ИНАЧЕ 3
				|			КОНЕЦ
				|	КОНЕЦ КАК ИндексКартинки,
				|	СправочникВидыКонтактнойИнформации.Представление
				|ИЗ
				|	Справочник.ВидыКонтактнойИнформации КАК СправочникВидыКонтактнойИнформации
				|ГДЕ
				|	НЕ СправочникВидыКонтактнойИнформации.ПометкаУдаления
				|	И СправочникВидыКонтактнойИнформации.Используется
				|	И ЕСТЬNULL(СправочникВидыКонтактнойИнформации.Родитель.Используется, ИСТИНА)
				|	И СправочникВидыКонтактнойИнформации.Родитель В(&ГруппаВидовКИ)";
			
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				СтрокаТипаРеквизита = ЭлементыРеквизитыКонтроля.Добавить();
				
				ТипРеквизита = "ВидКонтактнойИнформацииОбъекта";
				СтруктураРеквизита = Новый Структура;	
				СтруктураРеквизита.Вставить("ТипРеквизита"   , ТипРеквизита);
				СтруктураРеквизита.Вставить("СсылкаРеквизита", ТипРеквизита);
				СтруктураРеквизита.Вставить("Представление"  , "Виды контактной информации");
				СтруктураРеквизита.Вставить("Пометка"		 , Ложь);
				СтруктураРеквизита.Вставить("ПометкаПроцесса", Ложь);
				СтруктураРеквизита.Вставить("ПометкаОбмена"	 , Ложь); // Солодов
				ЗаполнитьЗначенияСвойств(СтрокаТипаРеквизита, СтруктураРеквизита);
				
				ТекущиеПараметрыКонтроля 		 = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляОбъекта		, ТипРеквизита);
				ТекущиеПараметрыКонтроляПроцесса = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляПроцессаОбъекта, ТипРеквизита);
				ТекущиеПараметрыКонтроляОбмена 	 = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляОбменаОбъекта	, ТипРеквизита); // Солодов
				
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтруктураРеквизита = Новый Структура;	
					СтруктураРеквизита.Вставить("ТипРеквизита"   , ТипРеквизита);
					СтруктураРеквизита.Вставить("СсылкаРеквизита", Выборка.ВидКИ);
					СтруктураРеквизита.Вставить("Представление"  , Выборка.Представление);
					СтруктураРеквизита.Вставить("ИндексКартинки" , Выборка.ИндексКартинки);
					СтруктураРеквизита.Вставить("Пометка"		 , ТекущиеПараметрыКонтроля.Найти(Выборка.ВидКИ) <> Неопределено);
					СтруктураРеквизита.Вставить("ПометкаПроцесса", ТекущиеПараметрыКонтроляПроцесса.Найти(Выборка.ВидКИ) <> Неопределено);
					СтруктураРеквизита.Вставить("ПометкаОбмена"	 , ТекущиеПараметрыКонтроляОбмена.Найти(Выборка.ВидКИ) <> Неопределено); // Солодов
					ЗаполнитьЗначенияСвойств(СтрокаТипаРеквизита.ПолучитьЭлементы().Добавить(), СтруктураРеквизита);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Описание
	ОписаниеОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя()).ПустаяСсылка();
	
	//Классификаторы
	Если ИспользоватьКлассификаторы(ОписаниеОбъекта) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИмяТаблицы", ОбъектМетаданных.ПолноеИмя());
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	CRM_КлассификаторыПринадлежность.Ссылка КАК Классификатор,
			|	CRM_КлассификаторыПринадлежность.Ссылка.Представление
			|ИЗ
			|	ПланВидовХарактеристик.CRM_Классификаторы.Принадлежность КАК CRM_КлассификаторыПринадлежность
			|ГДЕ
			|	CRM_КлассификаторыПринадлежность.ИмяТаблицы = &ИмяТаблицы";
			//|	И CRM_КлассификаторыПринадлежность.Ссылка.ИспользуемаяАналитика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_АналитикаКлассификаторов.ПустаяСсылка)"; // Солодов
		
		РезультатЗапроса = Запрос.Выполнить();                                      
		Если Не РезультатЗапроса.Пустой() Тогда
			СтрокаТипаРеквизита = ЭлементыРеквизитыКонтроля.Добавить();
			
			ТипРеквизита = "КлассификаторОбъекта";
			СтруктураРеквизита = Новый Структура;	
			СтруктураРеквизита.Вставить("ТипРеквизита"   , ТипРеквизита);
			СтруктураРеквизита.Вставить("СсылкаРеквизита", ТипРеквизита);
			СтруктураРеквизита.Вставить("Представление"  , "Классификаторы");
			СтруктураРеквизита.Вставить("Пометка"		 , Ложь);
			СтруктураРеквизита.Вставить("ПометкаПроцесса", Ложь);
			СтруктураРеквизита.Вставить("ПометкаОбмена"	 , Ложь); // Солодов
			ЗаполнитьЗначенияСвойств(СтрокаТипаРеквизита, СтруктураРеквизита);
			
			ТекущиеПараметрыКонтроля 						= ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляОбъекта			, ТипРеквизита);
			ТекущиеПараметрыКонтроляПроцесса 				= ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляПроцессаОбъекта	, ТипРеквизита);
			ТекущиеПараметрыКонтроляОбмена 					= ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляОбменаОбъекта	, ТипРеквизита); // Солодов
			ТекущиеПараметрыКонтроляЗначенийКлассификаторов 
				= ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляЗначенийКлассификаторовОбъекта, ТипРеквизита); // Солодов
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтруктураРеквизита = Новый Структура;	
				СтруктураРеквизита.Вставить("ТипРеквизита"   , ТипРеквизита);
				СтруктураРеквизита.Вставить("СсылкаРеквизита", Выборка.Классификатор);
				СтруктураРеквизита.Вставить("Представление"  , Выборка.Представление);
				СтруктураРеквизита.Вставить("ИндексКартинки" , 25);
				СтруктураРеквизита.Вставить("Пометка"		 , ТекущиеПараметрыКонтроля.Найти(Выборка.Классификатор) <> Неопределено);
				СтруктураРеквизита.Вставить("ПометкаПроцесса", 
					ТекущиеПараметрыКонтроляПроцесса.Найти(Выборка.Классификатор) <> Неопределено);
				СтруктураРеквизита.Вставить("ПометкаОбмена"  , 
					ТекущиеПараметрыКонтроляОбмена.Найти(Выборка.Классификатор) <> Неопределено); // Солодов
				
				// Солодов
				СтруктураРеквизита.Вставить("ПараметрыКонтроляЗначений", "");
				Для Каждого ЭлементМассива Из ТекущиеПараметрыКонтроляЗначенийКлассификаторов Цикл
					
					ЗначенияКлассификаторов = ЭлементМассива.Получить(Выборка.Классификатор);
					
					Если ЗначенияКлассификаторов <> Неопределено Тогда
						СтруктураРеквизита.ПараметрыКонтроляЗначений = ЗначенияКлассификаторов;
					КонецЕсли;
					
				КонецЦикла;
				//
				
				ЗаполнитьЗначенияСвойств(СтрокаТипаРеквизита.ПолучитьЭлементы().Добавить(), СтруктураРеквизита);
				
			КонецЦикла;
						
		КонецЕсли;
	
	КонецЕсли;
	
	//Виды присоединенных файлов
	Если вогУправлениеПрисоединеннымиФайламиКлиентСерверПовтИсп.ИспользоватьРедактированиеПрисоединенныхФайловПоВидам(ОписаниеОбъекта) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИмяТаблицы", "Справочник." + РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ОписаниеОбъекта));
			
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВидыПрисоединенныхФайлов.Ссылка КАК ВидФайла,
			|	ВидыПрисоединенныхФайлов.Представление
			|ИЗ
			|	Справочник.вогВидыПрисоединенныхФайлов КАК ВидыПрисоединенныхФайлов
			|ГДЕ
			|	ВидыПрисоединенныхФайлов.Принадлежность = &ИмяТаблицы
			|	И НЕ ВидыПрисоединенныхФайлов.ПометкаУдаления";
				
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			СтрокаТипаРеквизита = ЭлементыРеквизитыКонтроля.Добавить();
			
			ТипРеквизита = "ВидыПрисоединенныхФайловОбъекта";
			СтруктураРеквизита = Новый Структура;	
			СтруктураРеквизита.Вставить("ТипРеквизита"   , ТипРеквизита);
			СтруктураРеквизита.Вставить("СсылкаРеквизита", ТипРеквизита);
			СтруктураРеквизита.Вставить("Представление"  , "Виды присоединенных файлов");
			СтруктураРеквизита.Вставить("Пометка"		 , Ложь);
			СтруктураРеквизита.Вставить("ПометкаПроцесса", Ложь);
			СтруктураРеквизита.Вставить("ПометкаОбмена"	 , Ложь); // Солодов
			ЗаполнитьЗначенияСвойств(СтрокаТипаРеквизита, СтруктураРеквизита);
			
			ТекущиеПараметрыКонтроля 		 = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляОбъекта		, ТипРеквизита);
			ТекущиеПараметрыКонтроляПроцесса = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляПроцессаОбъекта, ТипРеквизита);
			ТекущиеПараметрыКонтроляОбмена 	 = ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляОбменаОбъекта	, ТипРеквизита); // Солодов
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтруктураРеквизита = Новый Структура;	
				СтруктураРеквизита.Вставить("ТипРеквизита"   , ТипРеквизита);
				СтруктураРеквизита.Вставить("СсылкаРеквизита", Выборка.ВидФайла);
				СтруктураРеквизита.Вставить("Представление"  , Выборка.Представление);
				СтруктураРеквизита.Вставить("ИндексКартинки" , 2);
				СтруктураРеквизита.Вставить("Пометка"		 , ТекущиеПараметрыКонтроля.Найти(Выборка.ВидФайла) <> Неопределено);
				СтруктураРеквизита.Вставить("ПометкаПроцесса", ТекущиеПараметрыКонтроляПроцесса.Найти(Выборка.ВидФайла) <> Неопределено);
				СтруктураРеквизита.Вставить("ПометкаОбмена"	 , ТекущиеПараметрыКонтроляОбмена.Найти(Выборка.ВидФайла) <> Неопределено); // Солодов
				ЗаполнитьЗначенияСвойств(СтрокаТипаРеквизита.ПолучитьЭлементы().Добавить(), СтруктураРеквизита);
				
			КонецЦикла;
						
		КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьРеквизитыКонтроляОбъекта()

&НаСервереБезКонтекста
Функция ПолучитьТекущиеПараметрыКонтроля(ПараметрыКонтроляОбъекта, ТипРеквизита)
	
	Если ПараметрыКонтроляОбъекта <> Неопределено
	  И ПараметрыКонтроляОбъекта.Свойство(ТипРеквизита) Тогда
		Результат = ПараметрыКонтроляОбъекта[ТипРеквизита];	
		
	Иначе
		Результат = Новый Массив;
		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции // ПолучитьТекущиеПараметрыКонтроля()

&НаСервере
Процедура СохранитьПараметрыКонтроля()
	
	ПараметрыКонтроляРеквизитов = Новый Соответствие;
	ПараметрыКонтроляПроцесса   = Новый Соответствие;
	ПараметрыКонтроляОбмена   	= Новый Соответствие; // Солодов
	ПараметрыКонтроляЗначенийКлассификаторов = Новый Соответствие; // Солодов
	
	ЭлементыДерева = ДеревоОбъектов.ПолучитьЭлементы();
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		СохранитьСтрокиРеквизитовОбъекта(
			ПараметрыКонтроляРеквизитов, 
			ПараметрыКонтроляПроцесса, 
			ПараметрыКонтроляОбмена, 
			ПараметрыКонтроляЗначенийКлассификаторов, 
			СтрокаДерева.ПолучитьЭлементы());				
	КонецЦикла;
	
	Если ПараметрыКонтроляРеквизитов.Количество() > 0
	  ИЛИ ПараметрыКонтроляПроцесса.Количество() > 0 
	  Или ПараметрыКонтроляОбмена.Количество() > 0 Тогда // Солодов
	  
	  	Результат = Новый Структура;
	  	Результат.Вставить("ПараметрыКонтроляРеквизитов"				, ПараметрыКонтроляРеквизитов);
	  	Результат.Вставить("ПараметрыКонтроляПроцесса"  				, ПараметрыКонтроляПроцесса);
		Результат.Вставить("ПараметрыКонтроляОбмена"  					, ПараметрыКонтроляОбмена); // Солодов
		Результат.Вставить("ПараметрыКонтроляЗначенийКлассификаторов"  	, ПараметрыКонтроляЗначенийКлассификаторов); // Солодов
		
		Константы.вогПараметрыКонтроляЗаполненностиРеквизитовОбъектов.Установить(
			Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9))
		);
		
	КонецЕсли;
	
	//Запуск рассчета заполненности
	ФоновыеЗадания.Выполнить("вогКонтрольЗаполненностиРеквизитовОбъектов.ВыполнитьРассчет",,, НСтр("ru = 'Рассчет заполненности реквизитов объектов.'"));
	
КонецПроцедуры // СохранитьПараметрыКонтроля()

&НаСервереБезКонтекста
Процедура СохранитьСтрокиРеквизитовОбъекта(ПараметрыКонтроляРеквизитов, 
										ПараметрыКонтроляПроцесса, 
										ПараметрыКонтроляОбмена, 
										ПараметрыКонтроляЗначенийКлассификаторов, 
										ЭлементыДерева)
	
	Для каждого СтрокаОбъекта Из ЭлементыДерева Цикл
		СохранитьРеквизитыКонтроляОбъекта(ПараметрыКонтроляРеквизитов, 
										ПараметрыКонтроляПроцесса, 
										ПараметрыКонтроляОбмена, 
										ПараметрыКонтроляЗначенийКлассификаторов, 
										СтрокаОбъекта, 
										СтрокаОбъекта.РеквизитыКонтроля.ПолучитьЭлементы());		
	КонецЦикла;
	
КонецПроцедуры // СохранитьСтрокиРеквизитовОбъекта()

&НаСервереБезКонтекста
Процедура СохранитьРеквизитыКонтроляОбъекта(ПараметрыКонтроляРеквизитов, 
										ПараметрыКонтроляПроцесса, 
										ПараметрыКонтроляОбмена, 
										ПараметрыКонтроляЗначенийКлассификаторов, 
										СтрокаОбъекта, 
										ЭлементыРеквизитыКонтроля)
	
	СтруктураТиповРеквизитов		 = Новый Структура;
	СтруктураТиповРеквизитовПроцесса = Новый Структура;
	СтруктураТиповРеквизитовОбмена   = Новый Структура; // Солодов
	СтруктураТиповРеквизитовЗначений = Новый Структура; // Солодов
	Для каждого СтрокаТипаРеквизита Из ЭлементыРеквизитыКонтроля Цикл		
		СтруктураТиповРеквизитов.Вставить(СтрокаТипаРеквизита.ТипРеквизита		  , Новый Массив);
		СтруктураТиповРеквизитовПроцесса.Вставить(СтрокаТипаРеквизита.ТипРеквизита, Новый Массив);
		СтруктураТиповРеквизитовОбмена.Вставить(СтрокаТипаРеквизита.ТипРеквизита  , Новый Массив); // Солодов
		СтруктураТиповРеквизитовЗначений.Вставить(СтрокаТипаРеквизита.ТипРеквизита, Новый Массив); // Солодов
		Для каждого СтрокаДерева Из СтрокаТипаРеквизита.ПолучитьЭлементы() Цикл
			Если СтрокаДерева.Пометка Тогда
				СтруктураТиповРеквизитов[СтрокаТипаРеквизита.ТипРеквизита].Добавить(СтрокаДерева.СсылкаРеквизита);
			
			КонецЕсли;	
			
			Если СтрокаДерева.ПометкаПроцесса Тогда
				СтруктураТиповРеквизитовПроцесса[СтрокаТипаРеквизита.ТипРеквизита].Добавить(СтрокаДерева.СсылкаРеквизита);
			
			КонецЕсли;
			
			// Солодов
			Если СтрокаДерева.ПометкаОбмена Тогда 				
				СтруктураТиповРеквизитовОбмена[СтрокаТипаРеквизита.ТипРеквизита].Добавить(СтрокаДерева.СсылкаРеквизита);
			
			КонецЕсли;
			
			Если СтрокаДерева.ПараметрыКонтроляЗначений <> "" Тогда
				
				СоответствиеКонтроляЗначений = Новый Соответствие;
				СоответствиеКонтроляЗначений.Вставить(СтрокаДерева.СсылкаРеквизита, СтрокаДерева.ПараметрыКонтроляЗначений);
				
				СтруктураТиповРеквизитовЗначений[СтрокаТипаРеквизита.ТипРеквизита].Добавить(СоответствиеКонтроляЗначений);
				
			КонецЕсли;
			// Солодов
			
		КонецЦикла;
				
		Если СтруктураТиповРеквизитов[СтрокаТипаРеквизита.ТипРеквизита].Количество() = 0 Тогда
			СтруктураТиповРеквизитов.Удалить(СтрокаТипаРеквизита.ТипРеквизита);		
		КонецЕсли;		
		
		Если СтруктураТиповРеквизитовПроцесса[СтрокаТипаРеквизита.ТипРеквизита].Количество() = 0 Тогда
			СтруктураТиповРеквизитовПроцесса.Удалить(СтрокаТипаРеквизита.ТипРеквизита);		
		КонецЕсли;
		
		// Солодов
		Если СтруктураТиповРеквизитовОбмена[СтрокаТипаРеквизита.ТипРеквизита].Количество() = 0 Тогда  
			СтруктураТиповРеквизитовОбмена.Удалить(СтрокаТипаРеквизита.ТипРеквизита);		
		КонецЕсли;
		
		Если СтруктураТиповРеквизитовЗначений[СтрокаТипаРеквизита.ТипРеквизита].Количество() = 0 Тогда
			СтруктураТиповРеквизитовЗначений.Удалить(СтрокаТипаРеквизита.ТипРеквизита);		
		КонецЕсли;
		// Солодов
		
	КонецЦикла;
	
	Если СтруктураТиповРеквизитов.Количество() > 0 Тогда
		СтруктураТиповРеквизитов.Вставить("РассчетПриЗаписи", СтрокаОбъекта.РассчетПриЗаписи);	
		ПараметрыКонтроляРеквизитов.Вставить(СтрокаОбъекта.ПолноеИмяОбъекта, СтруктураТиповРеквизитов);
	
	КонецЕсли;

	Если СтруктураТиповРеквизитовПроцесса.Количество() > 0 Тогда
		СтруктураТиповРеквизитовПроцесса.Вставить("РассчетПриЗаписи", СтрокаОбъекта.РассчетПриЗаписи);	
		ПараметрыКонтроляПроцесса.Вставить(СтрокаОбъекта.ПолноеИмяОбъекта, СтруктураТиповРеквизитовПроцесса);
	
	КонецЕсли;
	
	Если СтруктураТиповРеквизитовОбмена.Количество() > 0 Тогда // Солодов
		ПараметрыКонтроляОбмена.Вставить(СтрокаОбъекта.ПолноеИмяОбъекта, СтруктураТиповРеквизитовОбмена);
	
	КонецЕсли;
	
	Если СтруктураТиповРеквизитовЗначений.Количество() > 0 Тогда // Солодов
		ПараметрыКонтроляЗначенийКлассификаторов.Вставить(СтрокаОбъекта.ПолноеИмяОбъекта, СтруктураТиповРеквизитовЗначений);
	
	КонецЕсли;
	
КонецПроцедуры // СохранитьРеквизитыКонтроляОбъекта()

&НаСервереБезКонтекста
Процедура СохранитьПараметрыКонтроляЗначенийКлассификаторов(ПараметрыКонтроляЗначений, Результат)
	
	ПараметрыКонтроляЗначений = ЗначениеВСтрокуВнутр(Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9)));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЕстьЗначенияКлассификатора(Классификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	CRM_ЗначенияКлассификаторов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.CRM_ЗначенияКлассификаторов КАК CRM_ЗначенияКлассификаторов
		|ГДЕ
		|	CRM_ЗначенияКлассификаторов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Классификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#Область Прочее

&НаСервереБезКонтекста
Функция ИспользоватьДопРеквизиты(МетаданныеВладельца) Экспорт
	
	Возврат МетаданныеВладельца.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено
	      И МетаданныеВладельца <> Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений;
	
	  КонецФункции
	  
&НаСервереБезКонтекста
Функция ИспользоватьКИ(МетаданныеВладельца) Экспорт
	
	Возврат МетаданныеВладельца.ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользоватьКлассификаторы(ОписаниеОбъекта) Экспорт
	Возврат Метаданные.ПланыВидовХарактеристик.CRM_Классификаторы.Тип.СодержитТип(ТипЗнч(ОписаниеОбъекта));
КонецФункции

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ТекущиеДанные, ИмяРеквизита, Развернуть = Истина)
	
	СтрокиДерева = ТекущиеДанные[ИмяРеквизита].ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Развернуть Тогда
			Элементы[ИмяРеквизита].Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		Иначе
			Элементы[ИмяРеквизита].Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
							
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПометкиРекурсивно(ЭлементыДерева, Пометка, ИмяРеквизита)

	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		СтрокаДерева[ИмяРеквизита] = Пометка;		
		ЗаполнитьПометкиРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Пометка, ИмяРеквизита);
	
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьПометкиРекурсивно()

#КонецОбласти

#КонецОбласти
