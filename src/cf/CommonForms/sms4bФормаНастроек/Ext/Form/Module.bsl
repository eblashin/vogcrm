
//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура заполняет список номеров отправителя.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьСписокНомеровОтправителя()
	НомераОтправителя = Константы.sms4bНомераОтправителя.Получить();
	Элементы.ИмяОтправителя.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(НомераОтправителя) Тогда
		МассивНомеров = ОтправкаSMSЧерезSMS4B.ПолучитьМассивНомеровИзСтроки(НомераОтправителя);
		Для Каждого Номер Из МассивНомеров Цикл
			Если НЕ ПустаяСтрока(Номер) Тогда
				Элементы.ИмяОтправителя.СписокВыбора.Добавить(Номер);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	Если Элементы.ИмяОтправителя.СписокВыбора.Количество() = 0 Тогда
		ИмяОтправителя = "";
	ИначеЕсли ПустаяСтрока(ИмяОтправителя) Тогда
		ИмяОтправителя = Элементы.ИмяОтправителя.СписокВыбора[0].Значение;
	ИначеЕсли Элементы.ИмяОтправителя.СписокВыбора.НайтиПоЗначению(ИмяОтправителя) = Неопределено Тогда
		ИмяОтправителя = Элементы.ИмяОтправителя.СписокВыбора[0].Значение;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьСписокНомеровОтправителя()

 &НаКлиенте
 // Процедура очищает имя отправителя.
 //
 // Параметры:
 //	Нет.
 //
Процедура ОчиститьИмяОтправителя()
	Элементы.ИмяОтправителя.СписокВыбора.Очистить();
КонецПроцедуры // ОчиститьИмяОтправителя()

&НаКлиенте
// Процедура - обработчик выбора даты получения входящих сообщений.
//
// Параметры:
//	Ответ					- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ДатаВходящегоСообщенияОбработкаОтвета(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НаборКонстант.sms4bДатаПолученияСМС = ДополнительныеПараметры.ВыбранноеЗначение;
	КонецЕсли;
КонецПроцедуры // ДатаВходящегоСообщенияОбработкаОтвета()

//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО НАСТРОЙКАМИ ПРОКСИ-СЕРВЕРА

&НаСервереБезКонтекста
// Функция возвращает путь к каталогу программы.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Путь к каталогу программы.
//
Функция ПолучитьКаталогПрограммы()
	Возврат КаталогПрограммы();
КонецФункции // ПолучитьКаталогПрограммы()

&НаКлиенте
// Функция проверяет, есть ли в каталоге программы файл настроек прокси.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Наличие файла.
//
Функция ЕстьФайлНастроекПрокси()
	Путь = ПолучитьКаталогПрограммы() + "conf\inetcfg.xml";
	ФайлНастроек = Новый Файл(Путь);
    Возврат ФайлНастроек.Существует();
КонецФункции // ЕстьФайлНастроекПрокси()

&НаКлиенте
// Процедура - обработчик чтения файла настроек.
//
// Параметры:
//	Ответ					- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ПрочитатьФайлНастроекПрокси(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Путь		= ПолучитьКаталогПрограммы() + "conf\inetcfg.xml";
		ОбъектXML	= Новый ЧтениеXML;
		Попытка
			ОбъектXML.ОткрытьФайл(Путь);
		Исключение
			ОбъектXML.Закрыть();
			Возврат;
		КонецПопытки;
		Пока ОбъектXML.Прочитать() Цикл
			Если ОбъектXML.КоличествоАтрибутов() > 0 Тогда
				Пока ОбъектXML.ПрочитатьАтрибут() Цикл
					Если ОбъектXML.Имя = "protocols" Тогда 
						НаборКонстант.sms4bПроксиСервер	= Лев(ОбъектXML.Значение, Найти(ОбъектXML.Значение, ":") - 1);
						НаборКонстант.sms4bПроксиПорт		= Сред(ОбъектXML.Значение, Найти(ОбъектXML.Значение, ":") + 1, 10);
					ИначеЕсли ОбъектXML.Имя = "user" Тогда
						НаборКонстант.sms4bПроксиПользователь	= ОбъектXML.Значение;
					ИначеЕсли ОбъектXML.Имя = "password" Тогда
						НаборКонстант.sms4bПроксиПароль	= ОбъектXML.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Настройки не прочитаны!'"), СтатусСообщения.Внимание, , Истина);
	КонецЕсли;
КонецПроцедуры // ПрочитатьФайлНастроекПрокси()

&НаКлиенте
// Функция создает файл inetcfg.xml для работы с прокси-сервером.
//
// Параметры:
//  Адрес	- Строка	- Адрес прокси сервера.
//  Порт	- Строка	- Порт прокси сервера.
//  Имя		- Строка	- Имя пользователя.
//  Пароль	- Строка	- Пароль пользователя.
//	Каталог	- Строка	- Каталог файла.
//
// Возвращаемое значение:
//	Булево	- Результат создания файла.
//
Процедура СоздатьФайлНастроекПрокси(Адрес, Порт, Имя, Пароль, Каталог = "", ОписаниеОповещенияОЗавершении = Неопределено)
	ДополнительныеПараметры = Новый Структура("Адрес, Порт, Имя, Пароль, Каталог, ОписаниеОповещенияОЗавершении",
												Адрес, Порт, Имя, Пароль, Каталог, ОписаниеОповещенияОЗавершении);
	Если ПустаяСтрока(Каталог) Тогда
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите каталог:'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьФайлНастроекПроксиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДиалогОткрытияФайла.Показать(ОписаниеОповещения);
	Иначе
		Путь = Каталог + "conf\inetcfg.xml";
		СоздатьФайлНастроекПроксиЗавершение(Путь, ДополнительныеПараметры);
	КонецЕсли;	
КонецПроцедуры // СоздатьФайлНастроекПрокси()

&НаКлиенте
// Процедура - обработчик завершения создания файла настроек.
//
// Параметры:
//	ВыбранныеФайлы			- Строка	- Выбранные файлы.
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров.
//
Процедура СоздатьФайлНастроекПроксиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Строка") Тогда
		Путь = ВыбранныеФайлы;
	Иначе
		Путь = СтрЗаменить(ВыбранныеФайлы[0] + "\inetcfg.xml", "\\", "\");
	КонецЕсли;
	Попытка
		ЗаписьХМЛ = Новый ЗаписьXML;
		ЗаписьХМЛ.ОткрытьФайл(Путь);
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("InternetProxy");
			ЗаписьХМЛ.ЗаписатьАтрибут("protocols",		Строка(ДополнительныеПараметры.Адрес) + ":" + Строка(ДополнительныеПараметры.Порт));
			ЗаписьХМЛ.ЗаписатьАтрибут("user",			Строка(ДополнительныеПараметры.Имя));
			ЗаписьХМЛ.ЗаписатьАтрибут("password",		Строка(ДополнительныеПараметры.Пароль));
			ЗаписьХМЛ.ЗаписатьАтрибут("bypassOnLocal",	"true");
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		ЗаписьХМЛ.Закрыть();
	Исключение
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Ложь);
		Возврат;
	КонецПопытки;
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Истина);
КонецПроцедуры // СоздатьФайлНастроекПрокси()

&НаКлиенте
// Процедура - обработчик сохранения файла настроек.
//
// Параметры:
//	Ответ					- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура СохранитьФайлНастроекПрокси(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьФайлНастроекПроксиЗавершение", ЭтотОбъект);
		СоздатьФайлНастроекПрокси(НаборКонстант.sms4bПроксиСервер, НаборКонстант.sms4bПроксиПорт, НаборКонстант.sms4bПроксиПользователь, НаборКонстант.sms4bПроксиПароль, , ОписаниеОповещения);
		Возврат;
	Иначе	
		ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Настройки прокси-сервера не сохранены. Возможны проблемы при работе с сервером SMS4B!'"), СтатусСообщения.Внимание, , , Истина);		
	КонецЕсли;
КонецПроцедуры // СохранитьФайлНастроекПрокси()

&НаКлиенте
// Процедура - обработчик сохранения файла настроек.
//
// Параметры:
//	Ответ					- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура СохранитьФайлНастроекПроксиЗавершение(УдалосьЗаписать, ДополнительныеПараметры) Экспорт
	Если УдалосьЗаписать Тогда	
		ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Файл настроек прокси-сервера успешно записан.'"), СтатусСообщения.Информация, , ,Истина);	
	Иначе
		ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Настройки прокси-сервера не сохранены. Возможны проблемы при работе с сервером SMS4B!'"), СтатусСообщения.Внимание, , , Истина);		
	КонецЕсли;
КонецПроцедуры // СохранитьФайлНастроекПрокси()

&НаКлиенте
// Процедура - обработчик перезаписи файла настроек.
//
// Параметры:
//	Ответ					- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ПерезаписатьФайлНастроек(Ответ, ДополнительныеПараметры) Экспорт
	Если НЕ (Ответ = КодВозвратаДиалога.Да) Тогда
		ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Настройки прокси-сервера не сохранены. Возможны проблемы при работе с сервером SMS4B!'"), СтатусСообщения.Внимание, , , Истина);		
		Возврат;
	КонецЕсли;
	Каталог = ПолучитьКаталогПрограммы();
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерезаписатьФайлНастроекЗавершение", ЭтотОбъект);
	СоздатьФайлНастроекПрокси(НаборКонстант.sms4bПроксиСервер, НаборКонстант.sms4bПроксиПорт,
		НаборКонстант.sms4bПроксиПользователь, НаборКонстант.sms4bПроксиПароль, Каталог, ОписаниеОповещения);
КонецПроцедуры // ПерезаписатьФайлНастроек()

&НаКлиенте
// Процедура - обработчик перезаписи файла настроек.
//
// Параметры:
//	Ответ					- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ПерезаписатьФайлНастроекЗавершение(УдалосьЗаписать, ДополнительныеПараметры) Экспорт
	Если УдалосьЗаписать Тогда
		ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Файл настроек прокси-сервера успешно записан.'"), СтатусСообщения.Информация, , , Истина);	
	Иначе	
		ТекстВопроса = НСтр("ru = 'Не удалось записать файл настроек (вероятно, нет прав доступа в каталог программы).
			|Вы можете сохранить файл локально на диск и вручную скопировать его (см. справку).
			|Сохранить файл на диск?'");
		ДополнительныеПараметры = Новый Структура;
		ОповещениеОтвета = Новый ОписаниеОповещения("СохранитьФайлНастроекПрокси", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОповещениеОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
	КонецЕсли; 
КонецПроцедуры // ПерезаписатьФайлНастроек()

&НаКлиенте
// Процедура - обработчик удаления файла настроек.
//
// Параметры:
//	Ответ					- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура УдалитьФайлНастроек(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Путь = ПолучитьКаталогПрограммы() + "conf\inetcfg.xml";
		Попытка
			УдалитьФайлы(Путь);
			НаборКонстант.sms4bПроксиСервер		= "";
			НаборКонстант.sms4bПроксиПорт			= "";
			НаборКонстант.sms4bПроксиПользователь	= "";
			НаборКонстант.sms4bПроксиПароль		= "";
			ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Файл настроек прокси-сервера удален.'"), СтатусСообщения.Информация, , , Истина);
		Исключение
			ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Не удалось удалить файл настроек прокси-сервера (вероятно, нет прав доступа в каталог программы). 
				|Необходимо удалить файл вручную. Обратитесь к администратору.'"), СтатусСообщения.Внимание, , , Истина);
		КонецПопытки; 
	Иначе
		ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Не удалось удалить файл настроек прокси-сервера. 
			|Необходимо удалить файл вручную. Обратитесь к администратору.'"), СтатусСообщения.Внимание, , , Истина);
	КонецЕсли;
КонецПроцедуры // УдалитьФайлНастроек()

&НаКлиенте
// Процедура управляет доступностью элементов формы настроек прокси.
//
// Параметры:
//	Нет.
//
Процедура ДоступностьНастроекПрокси(Доступность)
	Элементы.ПроксиСервер.Доступность		= Доступность;
	Элементы.ПроксиПорт.Доступность			= Доступность;
	Элементы.ПроксиПользователь.Доступность	= Доступность;
	Элементы.ПроксиПароль.Доступность		= Доступность;
	Элементы.СоздатьФайлНастроек.Доступность	= Доступность;
КонецПроцедуры // ДоступностьНастроекПрокси()

//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РАСПИСАНИЕМ РЕГЛАМЕНТНОГО ЗАДАНИЯ

&НаСервереБезКонтекста
// Функция возвращает использование регламентного задания.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Использование регламентного задания.
//
Функция ПолучитьИспользованиеЗадания()
	УстановитьПривилегированныйРежим(Истина); 
	ИспользованиеЗадания	= Ложь;
	Попытка
		Задание	= РегламентныеЗадания.НайтиПредопределенное("ОтправкаSMS");
		ИспользованиеЗадания	= Задание.Использование;
	Исключение
	КонецПопытки;	
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат	ИспользованиеЗадания;
КонецФункции // ПолучитьИспользованиеЗадания()	

&НаСервереБезКонтекста
// Функция возвращает пользователя регламентного задания.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Пользователь регламентного задания.
//
Функция ПолучитьПользователяЗадания()
	УстановитьПривилегированныйРежим(Истина); 
	ПользовательЗадания	= Справочники.Пользователи.ПустаяСсылка();
	Попытка
		Задание	= РегламентныеЗадания.НайтиПредопределенное("ОтправкаSMS");
		ПользовательЗадания	= Пользователи.НайтиПоИмени(Задание.ИмяПользователя);
	Исключение
	КонецПопытки;	
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат	ПользовательЗадания;
КонецФункции // ПолучитьПользователяЗадания()

&НаСервереБезКонтекста
// Функция возвращает расписание регламентного задания.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	РасписаниеРегламентногоЗадания	- Расписание регламентного задания.
//
Функция ПолучитьРасписаниеРегламентноеЗадание()
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Задание		= РегламентныеЗадания.НайтиПредопределенное("ОтправкаSMS");
		Расписание	= Задание.Расписание;
	Исключение
		Расписание	= Неопределено;
	КонецПопытки;	
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат Расписание;
КонецФункции // ПолучитьРасписаниеРегламентноеЗадание();

&НаСервереБезКонтекста
// Процедура устанавливает расписание регламентного задания.
//
// Параметры:
//	Расписание	- РасписаниеРегламентногоЗадания	- Расписание регламентного задания.
//
Процедура УстановитьРасписаниеРегламентногоЗадания(Знач Расписание)
	УстановитьПривилегированныйРежим(Истина); 
	Попытка
		Задание	= РегламентныеЗадания.НайтиПредопределенное("ОтправкаSMS");
		Задание.Расписание = Расписание;
		Задание.Записать();
	Исключение
		ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Не удалось записать расписание регламентного задания '")
			+ Задание.Наименование, СтатусСообщения.Важное, "Запись регламентного задания",
			УровеньЖурналаРегистрации.Предупреждение);
	КонецПопытки;	
	УстановитьПривилегированныйРежим(Ложь); 
КонецПроцедуры // УстановитьРасписаниеРегламентногоЗадания()

&НаКлиенте
// Процедура - обработчик выбора расписания регламентного задания.
//
// Параметры:
//	Расписание				- РасписаниеРегламентногоЗадания	- Расписание регламентного задания.
//	ДополнительныеПараметры	- Структура							- Структура дополнительных параметров.
//
Процедура ОбработатьРасписаниеРегламентногоЗадания(Расписание, ДополнительныеПараметры) Экспорт
	Если Расписание = Неопределено Тогда Возврат; КонецЕсли;
	УстановитьРасписаниеРегламентногоЗадания(Расписание);
КонецПроцедуры // ОбработатьРасписаниеРегламентногоЗадания()	

&НаКлиенте
// Процедура устанавливает доступность настроек регламентного задания.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьЗадания()
	Элементы.РоботРегламентныхЗаданий.Доступность	= ИспользоватьЗадание;
	Элементы.НастройкаРасписания.Доступность		= ИспользоватьЗадание;
КонецПроцедуры // УстановитьДоступностьЗадания()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ПровайдерSMS".
//
// Параметры:
//	Элемент	- ЭлементФормы	- Элемент формы.
//
Процедура ПровайдерSMSПриИзменении(Элемент)
	
	Если НаборКонстант.ПровайдерSMS = ПредопределенноеЗначение("Перечисление.ПровайдерыSMS.SMS4B") Тогда
		Элементы.ИмяОтправителя.РежимВыбораИзСписка	= Истина;
		Элементы.НастройкаSMS4B.Видимость	= Истина;
		ИспользоватьЗадание	= ПолучитьИспользованиеЗадания();
		ПользовательЗадания	= ПолучитьПользователяЗадания();
		Если НЕ (НаборКонстант.sms4bРоботРегламентныхЗаданий = ПользовательЗадания) Тогда
			НаборКонстант.sms4bРоботРегламентныхЗаданий	= ПользовательЗадания;
		КонецЕсли;
		УстановитьДоступностьЗадания();
		НеОтправлятьSMSПриИзменении(Неопределено);
		ЗаполнитьСписокНомеровОтправителя();
		Если ЕстьФайлНастроекПрокси() Тогда
			ВклВыклПрокси = Истина;
			ДоступностьНастроекПрокси(ВклВыклПрокси);
			ТекстВопроса = НСтр("ru = 'Обнаружен ранее созданный файл настроек conf\inetcfg.xml в каталоге программы!
				|Прочитать из него настройки?'");
			ДополнительныеПараметры = Новый Структура;
			ОповещениеОтвета = Новый ОписаниеОповещения("ПрочитатьФайлНастроекПрокси", ЭтотОбъект, ДополнительныеПараметры);
		КонецЕсли;
		ДоступностьНастроекПрокси(ВклВыклПрокси);
		Модифицированность = Ложь;
	Иначе
		Элементы.ИмяОтправителя.РежимВыбораИзСписка	= Ложь;
		Элементы.НастройкаSMS4B.Видимость	= Ложь;
		ОчиститьИмяОтправителя();
	КонецЕсли;
	
	Если НаборКонстант.ПровайдерSMS = ПредопределенноеЗначение("Перечисление.ПровайдерыSMS.GSMINFORM") Тогда
		Элементы.ЛогинДляОтправкиSMS.Заголовок = НСтр("ru = 'ID кабинета'");
		Элементы.ПарольДляОтправкиSMS.Заголовок = НСтр("ru = 'API-ключ'");
	Иначе
		Элементы.ЛогинДляОтправкиSMS.Заголовок = НСтр("ru = 'Логин'");
		Элементы.ПарольДляОтправкиSMS.Заголовок = НСтр("ru = 'Пароль'");
	КонецЕсли;
	
КонецПроцедуры // ПровайдерSMSПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "ОписаниеУслуги".
//
// Параметры:
//	Элемент	- ЭлементФормы	- Элемент формы.
//
Процедура ОписаниеУслугиНажатие(Элемент)
	Если НаборКонстант.ПровайдерSMS = ПредопределенноеЗначение("Перечисление.ПровайдерыSMS.Билайн") Тогда
		ПерейтиПоНавигационнойСсылке("http://b2b.beeline.ru/msk/sb/mobile/services/index.wbp?id=3a15308a-7b14-4f8e-acda-0841dd6c750e");
	ИначеЕсли НаборКонстант.ПровайдерSMS = ПредопределенноеЗначение("Перечисление.ПровайдерыSMS.МТС") Тогда
		ПерейтиПоНавигационнойСсылке("http://www.mtscommunicator.ru/service/");
	ИначеЕсли НаборКонстант.ПровайдерSMS = ПредопределенноеЗначение("Перечисление.ПровайдерыSMS.SMSRU") Тогда
		ПерейтиПоНавигационнойСсылке("http://sms.ru");
	ИначеЕсли НаборКонстант.ПровайдерSMS = ПредопределенноеЗначение("Перечисление.ПровайдерыSMS.SMSЦЕНТР") Тогда
		ПерейтиПоНавигационнойСсылке("http://smsc.ru");
	ИначеЕсли НаборКонстант.ПровайдерSMS = ПредопределенноеЗначение("Перечисление.ПровайдерыSMS.СМСУслуги") Тогда
		ПерейтиПоНавигационнойСсылке("http://sms-uslugi.ru");
	ИначеЕсли НаборКонстант.ПровайдерSMS = ПредопределенноеЗначение("Перечисление.ПровайдерыSMS.GSMINFORM") Тогда
		ПерейтиПоНавигационнойСсылке("http://gsm-inform.ru");
	ИначеЕсли НаборКонстант.ПровайдерSMS = ПредопределенноеЗначение("Перечисление.ПровайдерыSMS.SMS4B") Тогда
		ПерейтиПоНавигационнойСсылке("http://www.sms4b.ru");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ЛогинДляОтправкиSMS".
//
Процедура ЛогинДляОтправкиSMSПриИзменении(Элемент)
	ОчиститьИмяОтправителя();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ПарольДляОтправкиSMS".
//
Процедура ПарольДляОтправкиSMSПриИзменении(Элемент)
	ОчиститьИмяОтправителя();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "НеОтправлятьSMS".
//
Процедура НеОтправлятьSMSПриИзменении(Элемент)
	ДоступностьДат = НаборКонстант.sms4bНеОтправлятьSMS;
	Элементы.НачалоПериодаЗапрета.Доступность = ДоступностьДат;
	Элементы.КонецПериодаЗапрета.Доступность	 = ДоступностьДат;
КонецПроцедуры // НеОтправлятьSMSПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "НачалоПериодаЗапрета".
//
Процедура НачалоПериодаЗапретаПриИзменении(Элемент)
	НаборКонстант.sms4bНачалоПериодаЗапрета = НачалоЧаса(НаборКонстант.sms4bНачалоПериодаЗапрета);
КонецПроцедуры // НачалоПериодаЗапретаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Регулирование" элемента формы "НачалоПериодаЗапрета".
//
Процедура НачалоПериодаЗапретаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НаборКонстант.sms4bНачалоПериодаЗапрета = Дата('00010101') И (Направление = -1) Тогда
		НаборКонстант.sms4bНачалоПериодаЗапрета = НаборКонстант.sms4bНачалоПериодаЗапрета + 82800;
	Иначе	
		НаборКонстант.sms4bНачалоПериодаЗапрета = НаборКонстант.sms4bНачалоПериодаЗапрета + 3600 * Направление;
	КонецЕсли;	
КонецПроцедуры // НачалоПериодаЗапретаРегулирование()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "КонецПериодаЗапрета".
//
Процедура КонецПериодаЗапретаПриИзменении(Элемент)
	НаборКонстант.sms4bКонецПериодаЗапрета = НачалоЧаса(НаборКонстант.sms4bКонецПериодаЗапрета);
КонецПроцедуры // КонецПериодаЗапретаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Регулирование" элемента формы "КонецПериодаЗапрета".
//
Процедура КонецПериодаЗапретаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НаборКонстант.sms4bКонецПериодаЗапрета = Дата('00010101') И (Направление = -1) Тогда
		НаборКонстант.sms4bКонецПериодаЗапрета = НаборКонстант.sms4bКонецПериодаЗапрета + 82800;
	Иначе	
		НаборКонстант.sms4bКонецПериодаЗапрета = НаборКонстант.sms4bКонецПериодаЗапрета + 3600 * Направление;
	КонецЕсли;	
КонецПроцедуры // КонецПериодаЗапретаРегулирование()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "ДатаВходящегоСообщения".
//
Процедура ДатаВходящегоСообщенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбранноеЗначение",	ВыбранноеЗначение);
	Если ВыбранноеЗначение < НаборКонстант.sms4bДатаПолученияСМС Тогда
		ОповещениеОтвета = Новый ОписаниеОповещения("ДатаВходящегоСообщенияОбработкаОтвета", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'При изменении даты входящего сообщения возможна перезапись ранее 
		| полученных частичных сообщений!!! Продолжить?'");
		ПоказатьВопрос(ОповещениеОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		НаборКонстант.sms4bДатаПолученияСМС = ВыбранноеЗначение;
	КонецЕсли;	
КонецПроцедуры // ДатаВходящегоСообщенияОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "НастройкаРасписания".
//
Процедура НастройкаРасписанияНажатие(Элемент)
	Расписание	= ПолучитьРасписаниеРегламентноеЗадание();
	Если Расписание = Неопределено Тогда Возврат; КонецЕсли;
	Диалог					= Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеРасписания	= Новый Описаниеоповещения("ОбработатьРасписаниеРегламентногоЗадания", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОповещениеРасписания); 
КонецПроцедуры // НастройкаРасписанияНажатие()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ВклВыклПрокси".
//
Процедура ВклВыклПроксиПриИзменении(Элемент)
	ДоступностьНастроекПрокси(ВклВыклПрокси);
	Если ЕстьФайлНастроекПрокси() Тогда
		ДополнительныеПараметры = Новый Структура;
		Если ВклВыклПрокси Тогда
			ТекстВопроса = НСтр("ru = 'Обнаружен ранее созданный файл настроек conf\inetcfg.xml в каталоге программы!
				|Прочитать из него настройки?'");
			ОповещениеОтвета = Новый ОписаниеОповещения("ПрочитатьФайлНастроекПрокси", ЭтотОбъект, ДополнительныеПараметры);
		Иначе			
			ТекстВопроса = НСтр("ru = 'Рекомендуется удалить ранее созданный файл настроек прокси-сервера conf\inetcfg.xml в каталоге программы!
				|Удалить его сейчас?'");
			ОповещениеОтвета = Новый ОписаниеОповещения("УдалитьФайлНастроек", ЭтотОбъект, ДополнительныеПараметры);
		КонецЕсли;
		ПоказатьВопрос(ОповещениеОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
	КонецЕсли;	
КонецПроцедуры // ВклВыклПроксиПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ИспользоватьРегламентноеЗадание".
//
Процедура ИспользоватьЗаданиеПриИзменении(Элемент)
	УстановитьДоступностьЗадания();		
	ЗаданиеИзменено = Истина;
КонецПроцедуры // ИспользоватьЗаданиеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "РоботРегламентныхЗаданий".
//
Процедура РоботРегламентныхЗаданийПриИзменении(Элемент)
	ЗаданиеИзменено = Истина;
КонецПроцедуры // РоботРегламентныхЗаданийПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "РоботРегламентныхЗаданий".
//
Процедура РоботРегламентныхЗаданийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ПараметрыФормы			= Новый Структура;
	ПараметрыФормы.Вставить("СкрытьПользователейБезПользователяИБ",	Истина);
	ПараметрыФормы.Вставить("РежимВыбора",							Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", 						НаборКонстант.sms4bРоботРегламентныхЗаданий);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры // РоботРегламентныхЗаданийНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ КОМАНД ФОРМЫ

&НаКлиенте
// Процедура - обработчик команды формы "Подключится".
//
Процедура Подключится(Команда)
	Записать();
	Элементы.ИмяОтправителя.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(ЛогинДляОтправкиSMS) И ЗначениеЗаполнено(ПарольДляОтправкиSMS) Тогда
		КодОшибки = ОтправкаSMSЧерезSMS4B.Подключиться();
		Если КодОшибки > 0 Тогда 
			ПараметрыСессии = Новый Структура;
			КодОшибки = ОтправкаSMSЧерезSMS4B.ПолучитьПараметрыСессии(ПараметрыСессии);
			Если КодОшибки > 0 Тогда
				ЗаполнитьСписокНомеровОтправителя();
				ПоказатьПредупреждение(, НСтр("ru = 'Вы успешно подключились к сервису SMS4B!'"));
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	Модифицированность = Ложь;
КонецПроцедуры // Подключится()

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьФайлНастроек".
//
Процедура СоздатьФайлНастроек(Команда)
	ВсеОК = Истина;
	Если ПустаяСтрока(НаборКонстант.sms4bПроксиСервер) Тогда 
		ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Не указан прокси-сервер!'"), СтатусСообщения.Внимание, , , Истина);
		ВсеОК = Ложь;
	КонецЕсли;	
	Если ПустаяСтрока(НаборКонстант.sms4bПроксиПорт) Тогда 
		ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Не указан порт прокси-сервера!'"), СтатусСообщения.Внимание, , , Истина);
		ВсеОК = Ложь;
	КонецЕсли;	
	Если НЕ ВсеОК Тогда Возврат; КонецЕсли;
	// Проверим, нет ли уже созданного файла настроек
	ДополнительныеПараметры = Новый Структура;
	Если ЕстьФайлНастроекПрокси() Тогда
		ТекстВопроса = НСтр("ru = 'Обнаружен ранее созданный файл настроек conf\inetcfg.xml в каталоге программы!
			|Перезаписать его?'");
		ОповещениеОтвета = Новый ОписаниеОповещения("ПерезаписатьФайлНастроек", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОповещениеОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
	Иначе	
		ПерезаписатьФайлНастроек(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры // СоздатьФайлНастроек()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ПровайдерSMS");
	УстановитьПривилегированныйРежим(Истина);
	НастройкиПровайдера = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "Пароль, Логин, ИмяОтправителя");
	УстановитьПривилегированныйРежим(Ложь);
	ЛогинДляОтправкиSMS = НастройкиПровайдера.Логин;
	ИмяОтправителя = НастройкиПровайдера.ИмяОтправителя;
	ПарольДляОтправкиSMS = ?(ЗначениеЗаполнено(НастройкиПровайдера.Пароль), ЭтотОбъект.УникальныйИдентификатор, "");
	
	Если НаборКонстант.ПровайдерSMS = Перечисления.ПровайдерыSMS.GSMINFORM Тогда
		Элементы.ЛогинДляОтправкиSMS.Заголовок = НСтр("ru = 'ID кабинета'");
		Элементы.ПарольДляОтправкиSMS.Заголовок = НСтр("ru = 'API-ключ'");
	Иначе
		Элементы.ЛогинДляОтправкиSMS.Заголовок = НСтр("ru = 'Логин'");
		Элементы.ПарольДляОтправкиSMS.Заголовок = НСтр("ru = 'Пароль'");
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	Если НЕ ОтправкаSMSЧерезSMS4B.РолиДоступны("ОтправкаSMS, ПолныеПрава") Тогда
		ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Недостаточно прав для настройки работы с SMS сообщениями!'"), СтатусСообщения.Внимание, , , Истина);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ПровайдерSMSПриИзменении(Элементы.ПровайдерSMS);	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НаборКонстант.ПровайдерSMS = ПредопределенноеЗначение("Перечисление.ПровайдерыSMS.SMS4B") Тогда
		Если НЕ ИспользоватьЗадание Тогда
			НаборКонстант.sms4bРоботРегламентныхЗаданий = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");	
		ИначеЕсли НЕ ЗначениеЗаполнено(НаборКонстант.sms4bРоботРегламентныхЗаданий) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан пользователь для регламентного задания!'"), , "НаборКонстант.sms4bРоботРегламентныхЗаданий");
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // ПередЗаписью()

&НаСервере
// Процедура - обработчик события формы "ПриЗаписиНаСервере".
//
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УстановитьПривилегированныйРежим(Истина);
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ПровайдерSMS");
	Если НЕ (ПарольДляОтправкиSMS = Строка(ЭтотОбъект.УникальныйИдентификатор)) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ПарольДляОтправкиSMS);
	КонецЕсли;
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ЛогинДляОтправкиSMS, "Логин");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ИмяОтправителя, "ИмяОтправителя");
	Если ЗаданиеИзменено Тогда
		Попытка
			Задание	= РегламентныеЗадания.НайтиПредопределенное("ОтправкаSMS");
			Задание.Использование	= ИспользоватьЗадание;
			Если ИспользоватьЗадание Тогда
				ПользовательИБ	= ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(НаборКонстант.sms4bРоботРегламентныхЗаданий.ИдентификаторПользователяИБ);			
				Задание.ИмяПользователя	= ПользовательИБ.Имя;
			КонецЕсли; 
			Задание.Записать();
		Исключение
			ОтправкаSMSЧерезSMS4B.ВывестиСообщение(НСтр("ru = 'Не удалось записать регламентное задание '")
				+ Задание.Наименование, СтатусСообщения.Важное, "Запись регламентного задания", УровеньЖурналаРегистрации.Предупреждение);
		КонецПопытки; 
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь); 
КонецПроцедуры // ПриЗаписиНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПослеЗаписи".
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьПовторноИспользуемыеЗначения();
	Оповестить("Запись_НастройкиОтправкиSMS", ПараметрыЗаписи, ЭтотОбъект);
	
КонецПроцедуры // ПослеЗаписи()
