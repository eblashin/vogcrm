
#Область ПеременныеФормы

&НаКлиенте
Перем мТекущийОбъект;
&НаКлиенте
Перем мПредыдущийТекущийОбъект;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ОграничениеТипов") И ТипЗнч(Параметры.ОграничениеТипов) = Тип("ОписаниеТипов") Тогда
		ОграничениеТипов = Параметры.ОграничениеТипов;
		ПризнакВключенОтбор = Истина;
	Иначе
		ОграничениеТипов = Неопределено;
		Элементы.КнопкаОтключитьОтбор.Видимость = Ложь;
	КонецЕсли;
	
	ШиринаЛевойКолонкиАбсолютная	= Ложь;
	ШиринаПравойКолонкиАбсолютная	= Ложь;
	ШиринаЛевойКолонки				= 75;
	ШиринаПравойКолонки				= 25;
	СинхронизироватьНастройкиШириныКолонок(ЭтотОбъект);
	
	ЗаполнитьДеревоОбъекты(ОграничениеТипов);
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	// Если в дереве объектов только один объект то он устанавливается как текущий.
	Если ДеревоОбъекты.ПолучитьЭлементы().Количество() = 1 Тогда
		ЭлементыВторогоУровня = ДеревоОбъекты.ПолучитьЭлементы()[0].ПолучитьЭлементы();
		Если ЭлементыВторогоУровня.Количество() = 1 Тогда
			Элементы.ДеревоОбъекты.ТекущаяСтрока = ЭлементыВторогоУровня[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗаполнитьПоУмолчанию") И Параметры.ЗаполнитьПоУмолчанию Тогда
		ЗаполнитьПоУмолчаниюТипСтрокой = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой(ТипЗнч(Параметры.Объект));
	КонецЕсли;
	
	Элементы.ДеревоОбъектывогИспользоватьДляВсех.Пометка 	= Ложь;
	Элементы.ДеревоОбъектыДоступныеКлассификаторы.Пометка 	= Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ЗаполнитьПоУмолчаниюТипСтрокой) Тогда
		НайденныеСтроки = CRM_ОбщегоНазначенияКлиентСервер.НайтиВЭлементахДерева(ДеревоОбъекты.ПолучитьЭлементы(), Новый Структура("Объект", ЗаполнитьПоУмолчаниюТипСтрокой), Истина);
		Если НайденныеСтроки <> Неопределено И НайденныеСтроки.Количество() > 0 Тогда
			Элементы.ДеревоОбъекты.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		Иначе
			Элементы.ДеревоОбъекты.ТекущаяСтрока = 1;
		КонецЕсли;
		КомандаОтключитьОтбор(Неопределено);
		КомандаЗаполнитьПоУмолчанию(Неопределено);
	КонецЕсли;
	
	// + Тищенко В.В.
	// Добавление функционала Классификаторы
	Если Элементы.СписокДоступныхКлассификаторов.Видимость Тогда
		Если Элементы.ДеревоОбъекты.ТекущиеДанные <> Неопределено Тогда
			ИмяТаблицы = СтрЗаменить(Элементы.ДеревоОбъекты.ТекущиеДанные.Объект,"Ссылка","");
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокДоступныхКлассификаторов,"ИмяТаблицы",ИмяТаблицы,Истина);		
		КонецЕсли;	
	КонецЕсли;
	// - Тищенко В.В.
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	Если Модифицированность Тогда
		Отказ = Истина;
		ОбратныйВызов = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбратныйВызов, НСтр("ru = 'Данные были изменены. Сохранить данные?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
// Процедура - обработчик ответа на вопрос перед закрытием формы.
//
// Параметры:
//	Результат				- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьСохранить() Тогда
			Модифицированность	= Ложь;
			Закрыть(Истина);
		КонецЕсли;
	Иначе
		Модифицированность	= Ложь;
		Закрыть(Неопределено);
	КонецЕсли;
КонецПроцедуры // ПередЗакрытиемЗавершение()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОбъекты

&НаКлиенте
Процедура ДеревоОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ЭтоЗаголовок Или ТекущиеДанные.ЭтоОбъект Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		КомандаДобавитьРеквизит(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	КореньОбъекта = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	
	Если КореньОбъекта = Неопределено Тогда
		ТекущийОбъектВДереве = Неопределено;
		Элементы.ДеревоОтображаемыеРеквизитыКнопкаЗаполнитьПоУмолчанию.Доступность = Ложь;
	Иначе
		ТекущийОбъектВДереве = КореньОбъекта.Объект;
		Элементы.ДеревоОтображаемыеРеквизитыКнопкаЗаполнитьПоУмолчанию.Доступность = Истина;
		// + Тищенко В.В.
		// Подключение классфикиторов
		Если Элементы.СписокДоступныхКлассификаторов.Видимость Тогда
			ИмяТаблицы = СтрЗаменить(ТекущийОбъектВДереве,"Ссылка","");
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокДоступныхКлассификаторов,"ИмяТаблицы",ИмяТаблицы,Истина);
		КонецЕсли;
		// - Тищенко В.В.
	КонецЕсли;
	
	Если ТекущийОбъектВДереве <> мПредыдущийТекущийОбъект Тогда
		ПриСменеТекущегоОбъекта(ТекущийОбъектВДереве, мПредыдущийТекущийОбъект);
		
		мПредыдущийТекущийОбъект = ТекущийОбъектВДереве;
	Иначе
		мПредыдущийТекущийОбъект = ТекущийОбъектВДереве;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОтображаемыеРеквизиты

&НаКлиенте
Процедура ДеревоОтображаемыеРеквизитыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Если Копирование = Истина Тогда Возврат; КонецЕсли;
	
	КомандаДеревоОтображаемыеРеквизитыДобавитьРазделитель(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтображаемыеРеквизитыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	КомандаУдалитьРеквизит(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтображаемыеРеквизитыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
		
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияРеквизитаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДеревоОтображаемыеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	Если Не ТекущиеДанные.ЭтоСсылка Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.ТипЗначенияРеквизита = "Строка";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШрифтОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоОтображаемыеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Шрифт = ПолучитьШрифтПоУмолчанию(ТекущиеДанные.ЭтоСсылка);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЦветТекстаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоОтображаемыеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦветТекстаНачалоВыбораЗавершение", ЭтотОбъект, ТекущиеДанные);
	ВыбратьЦвет(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЦветТекстаНачалоВыбораЗавершение(РезультатВыбора, ТекущиеДанные) Экспорт
	Если ТипЗнч(РезультатВыбора) = Тип("Цвет") Тогда
		ТекущиеДанные.ЦветТекста = РезультатВыбора;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЦветФонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоОтображаемыеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦветФонаНачалоВыбораЗавершение", ЭтотОбъект, ТекущиеДанные);
	ВыбратьЦвет(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЦветФонаНачалоВыбораЗавершение(РезультатВыбора, ТекущиеДанные) Экспорт
	Если ТипЗнч(РезультатВыбора) = Тип("Цвет") Тогда
		ТекущиеДанные.ЦветФона = РезультатВыбора;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЦветФонаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоОтображаемыеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЦветФона = Новый Цвет(255, 255, 255);
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультат

&НаКлиенте
Процедура РезультатПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаШириныКолонокПриИзменении(Элемент)
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	КореньОбъекта = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если КореньОбъекта = Неопределено Тогда Возврат; КонецЕсли;
	
	СинхронизироватьНастройкиШириныКолонок(ЭтотОбъект, Ложь);
	
	КореньОбъекта.ШиринаЛевойКолонкиАбсолютная	= ШиринаЛевойКолонкиАбсолютная;
	КореньОбъекта.ШиринаПравойКолонкиАбсолютная	= ШиринаПравойКолонкиАбсолютная;
	КореньОбъекта.ШиринаЛевойКолонки			= ШиринаЛевойКолонки;
	КореньОбъекта.ШиринаПравойКолонки			= ШиринаПравойКолонки;
	
	Модифицированность = Истина;
	
	ОбработкаОбновленияДереваОтображаемыхРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура ШиринаКолонкиВПикселахПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	КореньОбъекта = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если КореньОбъекта = Неопределено Тогда Возврат; КонецЕсли;
	
	СинхронизироватьНастройкиШириныКолонок(ЭтотОбъект, Ложь);
	
	КореньОбъекта.ШиринаЛевойКолонкиАбсолютная	= ШиринаЛевойКолонкиАбсолютная;
	КореньОбъекта.ШиринаПравойКолонкиАбсолютная	= ШиринаПравойКолонкиАбсолютная;
	КореньОбъекта.ШиринаЛевойКолонки			= ШиринаЛевойКолонки;
	КореньОбъекта.ШиринаПравойКолонки			= ШиринаПравойКолонки;
	
	Модифицированность = Истина;
	
	ОбработкаОбновленияДереваОтображаемыхРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтносительнаяШиринаКолонокВПроцентахПриИзменении()
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	КореньОбъекта = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если КореньОбъекта = Неопределено Тогда Возврат; КонецЕсли;
	
	СинхронизироватьНастройкиШириныКолонок(ЭтотОбъект, Ложь);
	
	КореньОбъекта.ШиринаЛевойКолонкиАбсолютная	= ШиринаЛевойКолонкиАбсолютная;
	КореньОбъекта.ШиринаПравойКолонкиАбсолютная	= ШиринаПравойКолонкиАбсолютная;
	КореньОбъекта.ШиринаЛевойКолонки			= ШиринаЛевойКолонки;
	КореньОбъекта.ШиринаПравойКолонки			= ШиринаПравойКолонки;
	
	Модифицированность = Истина;
	
	ОбработкаОбновленияДереваОтображаемыхРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура ОтносительнаяШиринаКолонокВПроцентахПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ОтносительнаяШиринаКолонокВПроцентахПриИзменении", 0.1, Истина);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	Если ПроверитьСохранить() Тогда
		ДанныеБылиМодифицированны = Модифицированность;
		Модифицированность = Ложь;
		Закрыть(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Закрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьРеквизит(Команда)
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ЭтоЗаголовок И Не ТекущиеДанные.ЭтоОбъект Тогда
		ДобавитьРеквизитВДеревоОтображаемыхРеквизитов(ТекущиеДанные);
		
		Модифицированность = Истина;
		
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьРеквизит(Команда)
	ТекущиеДанные = Элементы.ДеревоОтображаемыеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УдалитьРеквизитИзДереваОтображаемыхРеквизитов(ТекущиеДанные);
		
		Модифицированность = Истина;
		
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоОтображаемыеРеквизитыДобавитьРазделитель(Команда)
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДобавитьРазделительВДеревоОтображаемыхРеквизитов(ТекущиеДанные);
		
		Модифицированность = Истина;
		
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьВФайл(Команда)
	Если ПризнакВключенОтбор Тогда Возврат; КонецЕсли;
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаСохранитьВФайлЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные должны быть записаны. Записать данные?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, НСтр("ru = 'Сохранение настроек в файл'"));
	Иначе
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияСохранитьВФайл();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьВФайлЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда Возврат; КонецЕсли;
		
	ПроверитьПеренестиНастройкиВДеревоОбъектов();
	
	Если Не ПроверитьСохранить() Тогда Возврат; КонецЕсли;
	
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияСохранитьВФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьИзФайла(Команда)
	Если ПризнакВключенОтбор Тогда Возврат; КонецЕсли;
	
	АдресТаблицы = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияЗагрузитьИзФайла(АдресТаблицы, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьИзФайлаЗавершение(Результат, АдресТаблицы) Экспорт
	
	Если Результат Тогда
		мТекущийОбъект = Неопределено;
		мПредыдущийТекущийОбъект = Неопределено;
		ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Очистить();
		
		ЗаполнитьДеревоОбъекты(, Истина, АдресТаблицы);
		ДеревоОбъектыЭлементы = ДеревоОбъекты.ПолучитьЭлементы();
		Для Каждого ДеревоОбъектыЭлемент Из ДеревоОбъектыЭлементы Цикл
			Элементы.ДеревоОбъекты.Развернуть(ДеревоОбъектыЭлемент.ПолучитьИдентификатор(), Ложь);
		КонецЦикла;
		
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтключитьОтбор(Команда)
	ПроверитьПеренестиНастройкиВДеревоОбъектов();
	
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	ТекущийОбъектВДереве = Неопределено;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанныеКорень = ПолучитьКореньТекущихДанных(ТекущиеДанные);
		Если ТекущиеДанныеКорень <> Неопределено Тогда
			ТекущийОбъектВДереве = ТекущиеДанныеКорень.Объект;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДеревоОбъекты(, Ложь);
	
	ПризнакВключенОтбор = Ложь;
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	
	Если ТекущийОбъектВДереве <> Неопределено Тогда
		НайденныеСтроки = CRM_ОбщегоНазначенияКлиентСервер.НайтиВЭлементахДерева(ДеревоОбъекты.ПолучитьЭлементы(), Новый Структура("Объект", ТекущийОбъектВДереве), Истина);
		Если НайденныеСтроки <> Неопределено Тогда
			Попытка Элементы.ДеревоОбъекты.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			Исключение КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьВверх(Команда)
	ТекущиеДанные = Элементы.ДеревоОтображаемыеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ДеревоОтображаемыеРеквизиты;
	КонецЕсли;
	ТекущийРодительЭлементы = ТекущийРодитель.ПолучитьЭлементы();
	ТекущийИндекс = ТекущийРодительЭлементы.Индекс(ТекущиеДанные);
	Если ТекущийИндекс > 0 Тогда
		ТекущийРодительЭлементы.Сдвинуть(ТекущийИндекс, -1);
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПереместитьВниз(Команда)
	ТекущиеДанные = Элементы.ДеревоОтображаемыеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ДеревоОтображаемыеРеквизиты;
	КонецЕсли;
	ТекущийРодительЭлементы = ТекущийРодитель.ПолучитьЭлементы();
	ТекущийИндекс = ТекущийРодительЭлементы.Индекс(ТекущиеДанные);
	Если ТекущийИндекс <> -1 И ТекущийИндекс < ТекущийРодительЭлементы.Количество() - 1 Тогда
		ТекущийРодительЭлементы.Сдвинуть(ТекущийИндекс, 1);
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьПоУмолчанию(Команда)
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекущиеДанныеКорень = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если ТекущиеДанныеКорень = Неопределено Тогда Возврат; КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗаполнитьПоУмолчаниюЗавершение", ЭтотОбъект, ТекущиеДанныеКорень);
	Если ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Количество() > 0 Тогда
		ПоказатьВопрос(ОписаниеОповещения, НСтр(
			"ru = 'Текущие настройки будут заменены настройками по умолчанию.
			|Продолжить?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеКлассификаторы(Команда)
	
	Элементы.ДеревоОбъектыДоступныеКлассификаторы.Пометка 	= НЕ Элементы.ДеревоОбъектыДоступныеКлассификаторы.Пометка;
	ВидимостьЭлементов 										= Элементы.ДеревоОбъектыДоступныеКлассификаторы.Пометка;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СписокДоступныхКлассификаторов"	,"Видимость",ВидимостьЭлементов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаКомандыКлассификаторы"		,"Видимость",ВидимостьЭлементов);
	
КонецПроцедуры

&НаКлиенте
Процедура вогИспользоватьДляВсех(Команда)
	
	Элементы.ДеревоОбъектывогИспользоватьДляВсех.Пометка = НЕ Элементы.ДеревоОбъектывогИспользоватьДляВсех.Пометка;
	ИспользоватьДляВсех = Элементы.ДеревоОбъектывогИспользоватьДляВсех.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьКлассификатор(Команда)
	
	ТекущиеДанные = Элементы.СписокДоступныхКлассификаторов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДобавитьРеквизитВДеревоОтображаемыхКлассификаторов(ТекущиеДанные);
		Модифицированность = Истина;
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьКлассификатор(Команда)
	
	ТекущиеДанные = Элементы.ДеревоОтображаемыеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УдалитьКлассификаторИзДереваОтображаемыхРеквизитов(ТекущиеДанные);
		Модифицированность = Истина;
		ОбработкаОбновленияДереваОтображаемыхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура ПроверитьПеренестиНастройкиВДеревоОбъектов()
	ТекущиеДанные = Элементы.ДеревоОбъекты.ТекущиеДанные;
	КореньОбъекта = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если КореньОбъекта <> Неопределено Тогда
		бСохранитьТаблицуВТекущиеДанныеДерева = Истина;
		ДеревоОтображаемыеРеквизитыЭлементы = ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ДеревоОтображаемыеРеквизитыЭлементы Цикл
			Если ЗначениеЗаполнено(ЭлементДерева.Объект) Тогда
				Если ЭлементДерева.Объект <> КореньОбъекта.Объект Тогда
					бСохранитьТаблицуВТекущиеДанныеДерева = Ложь;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если бСохранитьТаблицуВТекущиеДанныеДерева Тогда
			СинхронизироватьНастройкиШириныКолонок(ЭтотОбъект, Ложь);
			
			КореньОбъекта.ШиринаЛевойКолонкиАбсолютная	= ШиринаЛевойКолонкиАбсолютная;
			КореньОбъекта.ШиринаПравойКолонкиАбсолютная	= ШиринаПравойКолонкиАбсолютная;
			КореньОбъекта.ШиринаЛевойКолонки			= ШиринаЛевойКолонки;
			КореньОбъекта.ШиринаПравойКолонки			= ШиринаПравойКолонки;
			
			СкопироватьДеревоВВетку(ДеревоОтображаемыеРеквизитыЭлементы, КореньОбъекта.ДеревоНастроек.ПолучитьЭлементы());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьСохранить()
	ПроверитьПеренестиНастройкиВДеревоОбъектов();
	
	РезультатСохранения = ПроверитьСохранитьНаСервере();
	
	Если РезультатСохранения Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	Возврат РезультатСохранения
КонецФункции

&НаКлиенте
Процедура СкопироватьДеревоВВетку(ЭлементыИсточник, ЭлементыПриемник, ПервыйВызов = Истина)
	Если ПервыйВызов Тогда
		ЭлементыПриемник.Очистить();
	КонецЕсли;
	
	Для Каждого ЭлементИсточник Из ЭлементыИсточник Цикл
		НоваяСтрока = ЭлементыПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементИсточник);
		
		ПодчиненныеСтроки = ЭлементИсточник.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			СкопироватьДеревоВВетку(ПодчиненныеСтроки, НоваяСтрока.ПолучитьЭлементы(), Ложь)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОбновленияДереваОтображаемыхРеквизитов()
	ОбработкаОбновленияДереваОтображаемыхРеквизитовСервер();
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКореньТекущихДанных(ТекущиеДанные)
	Если ТекущиеДанные.ЭтоОбъект Тогда
		Возврат ТекущиеДанные;
	КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Пока ТекущийРодитель <> Неопределено И Не ТекущийРодитель.ЭтоОбъект Цикл
		ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Если ТекущийРодитель <> Неопределено И ТекущийРодитель.ЭтоОбъект Тогда
		Возврат ТекущийРодитель;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНовуюСтрокуРеквизитаПоУмолчанию(СтрокаРеквизита)
	СтрокаРеквизита.ТипЗначенияРеквизита = ?(СтрокаРеквизита.ЭтоСсылка, "Гиперссылка", "Строка");
	СтрокаРеквизита.Положение	= ?(СтрокаРеквизита.ЭтоРеквизитТабличнойЧасти, "ВТойЖеСтроке", "НоваяСтрока");
	СтрокаРеквизита.Размещение	= "ЛеваяКолонка";
	СтрокаРеквизита.Шрифт		= ПолучитьШрифтПоУмолчанию(СтрокаРеквизита.ЭтоСсылка);
	СтрокаРеквизита.ЦветФона	= Новый Цвет(255, 255, 255);
	СтрокаРеквизита.ЦветТекста	= Новый Цвет(52,103,184); // Темно-синий, см. CRM_ОбщегоНазначенияКлиентСервер.ПолучитьСписокЦветов()
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуТабличнойЧастиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, ЭлементыДерева)
	Если КореньТекущихДанных = Неопределено Или ТекущиеДанные = Неопределено Или ЭлементыДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоТабличнаяЧасть Тогда
		КореньТЧ = ТекущиеДанные;
	Иначе
		КореньТЧ = ТекущиеДанные.ПолучитьРодителя();
		Если КореньТЧ = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	КонецЕсли;
	
	НайденныеСтроки = CRM_ОбщегоНазначенияКлиентСервер.НайтиВЭлементахДерева(ЭлементыДерева, Новый Структура("Реквизит,ЭтоТабличнаяЧасть", КореньТЧ.Объект, Истина));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = ЭлементыДерева.Добавить();
		НоваяСтрока.Объект								= КореньТекущихДанных.Объект;
		НоваяСтрока.ЭтоТабличнаяЧасть					= Истина;
		НоваяСтрока.Реквизит							= КореньТЧ.Объект;
		НоваяСтрока.ПредставлениеРеквизита				= КореньТЧ.Представление;
		НоваяСтрока.ОригинальноеПредставлениеРеквизита	= КореньТЧ.Представление;
		НоваяСтрока.Положение							= "НоваяСтрока";
		НоваяСтрока.Размещение							= "ЛеваяКолонка";
		НоваяСтрока.ЦветФона							= Новый Цвет(255, 255, 255);
		НоваяСтрока.ЦветТекста							= Новый Цвет(0, 0, 0);
		
		СтрокаТабличнаяЧасть = НоваяСтрока;
	Иначе
		СтрокаТабличнаяЧасть = НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат СтрокаТабличнаяЧасть;
КонецФункции

&НаКлиенте
Процедура ДобавитьСтрокиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, ЭлементыДляДобавления, ДобавляемыеДанные, ЭтоРеквизитТабличнойЧасти)
	Если КореньТекущихДанных = Неопределено Или ТекущиеДанные = Неопределено Или ЭлементыДляДобавления = Неопределено Или ДобавляемыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	МассивДанных = Новый Массив();
	Попытка
		КоличествоТест = ДобавляемыеДанные.Количество();
		бДобавляемыеДанныеЭтоКоллекция = Истина;
	Исключение
		бДобавляемыеДанныеЭтоКоллекция = Ложь;
	КонецПопытки;
	
	Если бДобавляемыеДанныеЭтоКоллекция Тогда
		Для Каждого СтрокаДанных Из ДобавляемыеДанные Цикл
			МассивДанных.Добавить(СтрокаДанных);
		КонецЦикла;
	Иначе
		МассивДанных.Добавить(ДобавляемыеДанные);
	КонецЕсли;
	
	Для нИндекс = 0 По МассивДанных.ВГраница() Цикл
		ДобавляемыйЭлемент = МассивДанных[нИндекс];
		
		НоваяСтрока = ЭлементыДляДобавления.Добавить();
		НоваяСтрока.Объект									= КореньТекущихДанных.Объект;
		НоваяСтрока.Реквизит								= ДобавляемыйЭлемент.Объект;
		НоваяСтрока.ПредставлениеРеквизита					= ДобавляемыйЭлемент.Представление;
		НоваяСтрока.ОригинальноеПредставлениеРеквизита		= ДобавляемыйЭлемент.Представление;
		НоваяСтрока.ЭтоСсылка								= ДобавляемыйЭлемент.ЭтоСсылка;
		Если ЭтоРеквизитТабличнойЧасти Тогда
			НоваяСтрока.ЭтоРеквизитТабличнойЧасти	= Истина;
		КонецЕсли;
		
		ЗаполнитьНовуюСтрокуРеквизитаПоУмолчанию(НоваяСтрока);
		
		МассивДанных[нИндекс] = Неопределено;
		Если ДобавляемыйЭлемент = ТекущиеДанные Тогда
			ТекущиеДанные = Неопределено;
		КонецЕсли;
		ДобавляемыйЭлемент.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ДобавляемыйЭлемент);
	КонецЦикла;
	
	Если ЭтоРеквизитТабличнойЧасти Тогда
		КореньТЧ = ?(ТекущиеДанные <> Неопределено И ТекущиеДанные.ЭтоТабличнаяЧасть, ТекущиеДанные, ТекущиеДанныеРодитель);
		КореньТЧЭлементы = КореньТЧ.ПолучитьЭлементы();
		Если КореньТЧЭлементы.Количество() = 0 Тогда
			КореньТЧ.ПолучитьРодителя().ПолучитьЭлементы().Удалить(КореньТЧ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРеквизитВДеревоОтображаемыхРеквизитов(ТекущиеДанные)
	Если ТекущиеДанные.ЭтоЗаголовок Или ТекущиеДанные.ЭтоОбъект Тогда Возврат; КонецЕсли;
	
	КореньТекущихДанных = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если КореньТекущихДанных = Неопределено Тогда Возврат; КонецЕсли;
	
	бЭтоПоследнийЭлемент = Ложь;
	КореньТекущихДанныхЭлементы = КореньТекущихДанных.ПолучитьЭлементы();
	
	Если КореньТекущихДанныхЭлементы.Количество() > 0 Тогда
		ПоследнийЭлемент = КореньТекущихДанныхЭлементы[КореньТекущихДанныхЭлементы.Количество() - 1];
		Если ПоследнийЭлемент = ТекущиеДанные Тогда
			бЭтоПоследнийЭлемент = Истина;
		ИначеЕсли ПоследнийЭлемент.ЭтоТабличнаяЧасть И ТекущиеДанные.ЭтоРеквизитТабличнойЧасти И ТекущиеДанные.ПолучитьРодителя() = ПоследнийЭлемент Тогда
			ПоследнийЭлементЭлементы = ПоследнийЭлемент.ПолучитьЭлементы();
			Если ПоследнийЭлементЭлементы.Количество() > 0 И ТекущиеДанные = ПоследнийЭлементЭлементы[ПоследнийЭлементЭлементы.Количество() - 1] Тогда
				бЭтоПоследнийЭлемент = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыДерева = ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы();
	
	Если ТекущиеДанные.ЭтоТабличнаяЧасть Тогда
		СтрокаТабличнаяЧасть = ПолучитьСтрокуТабличнойЧастиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, ЭлементыДерева);
		Если СтрокаТабличнаяЧасть = Неопределено Тогда Возврат; КонецЕсли;
		
		ДобавитьСтрокиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, СтрокаТабличнаяЧасть.ПолучитьЭлементы(), ТекущиеДанные.ПолучитьЭлементы(), Истина);
		
	ИначеЕсли ТекущиеДанные.ЭтоРеквизитТабличнойЧасти Тогда
		СтрокаТабличнаяЧасть = ПолучитьСтрокуТабличнойЧастиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, ЭлементыДерева);
		Если СтрокаТабличнаяЧасть = Неопределено Тогда Возврат; КонецЕсли;
		
		ДобавитьСтрокиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, СтрокаТабличнаяЧасть.ПолучитьЭлементы(), ТекущиеДанные, Истина);
		
	Иначе
		ДобавитьСтрокиВОтображаемыхРеквизитах(КореньТекущихДанных, ТекущиеДанные, ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы(), ТекущиеДанные, Ложь);
		
	КонецЕсли;
	
	Если бЭтоПоследнийЭлемент Тогда
		Если КореньТекущихДанныхЭлементы.Количество() > 0 Тогда
			УстановитьТекущуюСтроку = КореньТекущихДанныхЭлементы[КореньТекущихДанныхЭлементы.Количество() - 1];
			Попытка
				Если УстановитьТекущуюСтроку.ЭтоТабличнаяЧасть И Элементы.ДеревоОбъекты.Развернут(УстановитьТекущуюСтроку.ПолучитьИдентификатор()) Тогда
					УстановитьТекущуюСтрокуЭлементы = УстановитьТекущуюСтроку.ПолучитьЭлементы();
					Если УстановитьТекущуюСтрокуЭлементы.Количество() > 0 Тогда
						УстановитьТекущуюСтроку = УстановитьТекущуюСтрокуЭлементы[УстановитьТекущуюСтрокуЭлементы.Количество() - 1];
					КонецЕсли;
				КонецЕсли;
			Исключение КонецПопытки;
		Иначе
			УстановитьТекущуюСтроку = КореньТекущихДанных;
		КонецЕсли;
		
		Попытка Элементы.ДеревоОбъекты.ТекущаяСтрока = УстановитьТекущуюСтроку.ПолучитьИдентификатор();
		Исключение КонецПопытки;
	КонецЕсли;
	
	КореньТекущихДанных.ПризнакЕстьНастройки = (ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Количество() > 0);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРеквизитВДеревоОтображаемыхКлассификаторов(ТекущиеДанные)

	КореньТекущихДанных = ПолучитьКореньТекущихДанных(Элементы.ДеревоОбъекты.ТекущиеДанные);
	ДобавляемыеДаные 	= ТекущиеДанные.ИмяКлассификатора;
	
	Если КореньТекущихДанных 	= Неопределено Тогда Возврат; КонецЕсли;
	
	ДеревоОтображаемыеЭлементы 	= ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы();
	
	Для каждого СтрокаДерева Из ДеревоОтображаемыеЭлементы Цикл
		Если СтрокаДерева.Классификатор = ДобавляемыеДаные Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьСтрокиВОтображаемыхРеквизитахКлассификатор(КореньТекущихДанных, ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы(), ДобавляемыеДаные);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокиВОтображаемыхРеквизитахКлассификатор(КореньТекущихДанных,ЭлементыДляДобавления, ДобавляемыеДанные)
		
		НоваяСтрока 										= ЭлементыДляДобавления.Добавить();
		НоваяСтрока.Объект									= КореньТекущихДанных.Объект;
		НоваяСтрока.Реквизит								= "";
		НоваяСтрока.ПредставлениеРеквизита					= вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ДобавляемыеДанные,"Наименование",Истина);
		НоваяСтрока.ОригинальноеПредставлениеРеквизита		= вогОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ДобавляемыеДанные,"Наименование",Истина);
		НоваяСтрока.ЭтоСсылка								= Ложь;
		НоваяСтрока.Классификатор							= ДобавляемыеДанные;
		НоваяСтрока.ЭтоКлассификатор						= Истина;
		ЗаполнитьНовуюСтрокуРеквизитаПоУмолчанию(НоваяСтрока);
		НоваяСтрока.ТипЗначенияРеквизита					= "Классификатор";

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРазделительВДеревоОтображаемыхРеквизитов(ТекущиеДанные)
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	КореньТекущихДанных = ПолучитьКореньТекущихДанных(ТекущиеДанные);
	Если КореньТекущихДанных = Неопределено Тогда Возврат; КонецЕсли;
	
	ЭлементыДляДобавления = ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы();
	
	НоваяСтрока = ЭлементыДляДобавления.Добавить();
	НоваяСтрока.Объект			= КореньТекущихДанных.Объект;
	НоваяСтрока.ЭтоРазделитель	= Истина;
	ЗаполнитьНовуюСтрокуРеквизитаПоУмолчанию(НоваяСтрока);
	НоваяСтрока.ПредставлениеРеквизита				= "";
	НоваяСтрока.ОригинальноеПредставлениеРеквизита	= НСтр("ru = '[Разделитель]'");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуТабличнойЧастиВДеревеОбъектов(КореньОбъекта, ТекущиеДанные)
	Если КореньОбъекта = Неопределено Или ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоТабличнаяЧасть Тогда
		КореньТЧ = ТекущиеДанные;
	Иначе
		КореньТЧ = ТекущиеДанные.ПолучитьРодителя();
		Если КореньТЧ = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	КонецЕсли;
	
	ЭлементыДерева = КореньОбъекта.ПолучитьЭлементы();
	
	НайденныеСтроки = CRM_ОбщегоНазначенияКлиентСервер.НайтиВЭлементахДерева(ЭлементыДерева, Новый Структура("Объект,ЭтоТабличнаяЧасть", КореньТЧ.Реквизит, Истина));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = ЭлементыДерева.Добавить();
		НоваяСтрока.Объект				= КореньТЧ.Реквизит;
		НоваяСтрока.ЭтоТабличнаяЧасть	= Истина;
		НоваяСтрока.Представление		= ?(ЗначениеЗаполнено(КореньТЧ.ОригинальноеПредставлениеРеквизита), КореньТЧ.ОригинальноеПредставлениеРеквизита, КореньТЧ.ПредставлениеРеквизита);
		
		СтрокаТабличнаяЧасть = НоваяСтрока;
	Иначе
		СтрокаТабличнаяЧасть = НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат СтрокаТабличнаяЧасть;
КонецФункции

&НаКлиенте
Процедура ДобавитьСтрокиВДеревоОбъектов(КореньОбъекта, ТекущиеДанные, ЭлементыДляДобавления, ДобавляемыеДанные, ЭтоРеквизитТабличнойЧасти)
	Если КореньОбъекта = Неопределено Или ТекущиеДанные = Неопределено Или ЭлементыДляДобавления = Неопределено Или ДобавляемыеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	МассивДанных = Новый Массив();
	Попытка
		КоличествоТест = ДобавляемыеДанные.Количество();
		бДобавляемыеДанныеЭтоКоллекция = Истина;
	Исключение
		бДобавляемыеДанныеЭтоКоллекция = Ложь;
	КонецПопытки;
	
	Если бДобавляемыеДанныеЭтоКоллекция Тогда
		Для Каждого СтрокаДанных Из ДобавляемыеДанные Цикл
			МассивДанных.Добавить(СтрокаДанных);
		КонецЦикла;
	Иначе
		МассивДанных.Добавить(ДобавляемыеДанные);
	КонецЕсли;
	
	Для нИндекс = 0 По МассивДанных.ВГраница() Цикл
		ДобавляемыйЭлемент = МассивДанных[нИндекс];
		
		НоваяСтрока = ЭлементыДляДобавления.Добавить();
		НоваяСтрока.Объект			= ДобавляемыйЭлемент.Реквизит;
		НоваяСтрока.Представление	= ?(ЗначениеЗаполнено(ДобавляемыйЭлемент.ОригинальноеПредставлениеРеквизита), ДобавляемыйЭлемент.ОригинальноеПредставлениеРеквизита, ДобавляемыйЭлемент.ПредставлениеРеквизита);
		НоваяСтрока.ЭтоСсылка		= ДобавляемыйЭлемент.ЭтоСсылка;
		Если ЭтоРеквизитТабличнойЧасти Тогда
			НоваяСтрока.ЭтоРеквизитТабличнойЧасти	= Истина;
		КонецЕсли;
		
		ДобавляемыйЭлементРодитель = ДобавляемыйЭлемент.ПолучитьРодителя();
		
		МассивДанных[нИндекс] = Неопределено;
		Если ДобавляемыйЭлемент = ТекущиеДанные Тогда
			ТекущиеДанные = Неопределено;
		КонецЕсли;
		ЭлементыДляУдаления = ?(ДобавляемыйЭлементРодитель = Неопределено, ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы(), ДобавляемыйЭлементРодитель.ПолучитьЭлементы());
		ЭлементыДляУдаления.Удалить(ДобавляемыйЭлемент);
	КонецЦикла;
	
	Если ЭтоРеквизитТабличнойЧасти Тогда
		КореньТЧ = ?(ТекущиеДанные <> Неопределено И ТекущиеДанные.ЭтоТабличнаяЧасть, ТекущиеДанные, ТекущиеДанныеРодитель);
		КореньТЧЭлементы = КореньТЧ.ПолучитьЭлементы();
		Если КореньТЧЭлементы.Количество() = 0 Тогда
			ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Удалить(КореньТЧ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРеквизитИзДереваОтображаемыхРеквизитов(ТекущиеДанные)
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	НайденныеСтроки = CRM_ОбщегоНазначенияКлиентСервер.НайтиВЭлементахДерева(ДеревоОбъекты.ПолучитьЭлементы(), Новый Структура("Объект,ЭтоОбъект", ТекущиеДанные.Объект, Истина), Истина);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Если все хорошо, сюда попасть нельзя, страховка на случай битых данных.
		ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанныеРодитель = Неопределено Тогда
			ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Удалить(ТекущиеДанные);
		Иначе
			ТекущиеДанныеРодитель.ПолучитьЭлементы().Удалить(ТекущиеДанные);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	КореньОбъекта = НайденныеСтроки[0];
	
	Если ТекущиеДанные.ЭтоРазделитель Тогда
		ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Удалить(ТекущиеДанные);
	Иначе
		Если ТекущиеДанные.ЭтоТабличнаяЧасть Тогда
			СтрокаТабличнаяЧасть = ПолучитьСтрокуТабличнойЧастиВДеревеОбъектов(КореньОбъекта, ТекущиеДанные);
			Если СтрокаТабличнаяЧасть = Неопределено Тогда Возврат; КонецЕсли;
			
			ДобавитьСтрокиВДеревоОбъектов(КореньОбъекта, ТекущиеДанные, СтрокаТабличнаяЧасть.ПолучитьЭлементы(), ТекущиеДанные.ПолучитьЭлементы(), Истина);
			
		ИначеЕсли ТекущиеДанные.ЭтоРеквизитТабличнойЧасти Тогда
			СтрокаТабличнаяЧасть = ПолучитьСтрокуТабличнойЧастиВДеревеОбъектов(КореньОбъекта, ТекущиеДанные);
			Если СтрокаТабличнаяЧасть = Неопределено Тогда Возврат; КонецЕсли;
			
			ДобавитьСтрокиВДеревоОбъектов(КореньОбъекта, ТекущиеДанные, СтрокаТабличнаяЧасть.ПолучитьЭлементы(), ТекущиеДанные, Истина);
			
		Иначе
			ДобавитьСтрокиВДеревоОбъектов(КореньОбъекта, ТекущиеДанные, КореньОбъекта.ПолучитьЭлементы(), ТекущиеДанные, Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
	КореньОбъекта.ПризнакЕстьНастройки = (ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Количество() > 0);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКлассификаторИзДереваОтображаемыхРеквизитов(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТекущиеДанные.ЭтоКлассификатор Тогда
		СтрокиДерева = ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы();
		СтрокиДерева.Удалить(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеТекущегоОбъекта(Знач НовыйТекущийОбъект, Знач ПредыдущийТекущийОбъект)
	Если НовыйТекущийОбъект = Неопределено Тогда
		НовыйТекущийОбъектКорень = Неопределено;
	Иначе
		НайденныеСтроки = CRM_ОбщегоНазначенияКлиентСервер.НайтиВЭлементахДерева(ДеревоОбъекты.ПолучитьЭлементы(), Новый Структура("Объект", НовыйТекущийОбъект), Истина);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НовыйТекущийОбъектКорень = ПолучитьКореньТекущихДанных(НайденныеСтроки[0]);
		Иначе
			НовыйТекущийОбъектКорень = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ПредыдущийТекущийОбъект = Неопределено Тогда
		ПредыдущийТекущийОбъектКорень = Неопределено;
	Иначе
		НайденныеСтроки = CRM_ОбщегоНазначенияКлиентСервер.НайтиВЭлементахДерева(ДеревоОбъекты.ПолучитьЭлементы(), Новый Структура("Объект", ПредыдущийТекущийОбъект), Истина);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПредыдущийТекущийОбъектКорень = ПолучитьКореньТекущихДанных(НайденныеСтроки[0]);
		Иначе
			ПредыдущийТекущийОбъектКорень = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ПредыдущийТекущийОбъектКорень <> Неопределено Тогда
		СинхронизироватьНастройкиШириныКолонок(ЭтотОбъект, Ложь);
		
		ПредыдущийТекущийОбъектКорень.ШиринаЛевойКолонкиАбсолютная	= ШиринаЛевойКолонкиАбсолютная;
		ПредыдущийТекущийОбъектКорень.ШиринаПравойКолонкиАбсолютная	= ШиринаПравойКолонкиАбсолютная;
		ПредыдущийТекущийОбъектКорень.ШиринаЛевойКолонки			= ШиринаЛевойКолонки;
		ПредыдущийТекущийОбъектКорень.ШиринаПравойКолонки			= ШиринаПравойКолонки;
		
		СкопироватьДеревоВВетку(ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы(), ПредыдущийТекущийОбъектКорень.ДеревоНастроек.ПолучитьЭлементы());
	КонецЕсли;
	
	Если НовыйТекущийОбъектКорень <> Неопределено Тогда
		ДеревоНастроекЭлементы = НовыйТекущийОбъектКорень.ДеревоНастроек.ПолучитьЭлементы();
		Если ДеревоНастроекЭлементы.Количество() = 0 Тогда
			ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Очистить();
			
			ШиринаЛевойКолонкиАбсолютная	= Ложь;
			ШиринаПравойКолонкиАбсолютная	= Ложь;
			ШиринаЛевойКолонки				= 75;
			ШиринаПравойКолонки				= 25;
		Иначе
			ШиринаЛевойКолонкиАбсолютная	= НовыйТекущийОбъектКорень.ШиринаЛевойКолонкиАбсолютная;
			ШиринаПравойКолонкиАбсолютная	= НовыйТекущийОбъектКорень.ШиринаПравойКолонкиАбсолютная;
			ШиринаЛевойКолонки				= ?(НовыйТекущийОбъектКорень.ШиринаЛевойКолонки = 0, 75, НовыйТекущийОбъектКорень.ШиринаЛевойКолонки);
			ШиринаПравойКолонки				= ?(НовыйТекущийОбъектКорень.ШиринаПравойКолонки = 0, 25, НовыйТекущийОбъектКорень.ШиринаПравойКолонки);
			
			СкопироватьДеревоВВетку(ДеревоНастроекЭлементы, ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы());
		КонецЕсли;
		
		СинхронизироватьНастройкиШириныКолонок(ЭтотОбъект);
		НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	КонецЕсли;
	
	ОбработкаОбновленияДереваОтображаемыхРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЦвет(ОписаниеОповещенияЗавершение)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьЦветЗавершение", ЭтотОбъект, ОписаниеОповещенияЗавершение);
	ОткрытьФорму("Справочник.CRM_Категории.Форма.ФормаВыбораЦвета", Новый Структура("ТекущийЦвет", 0), ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЦветЗавершение(РезультатВыбора, ОписаниеОповещения) Экспорт
	Если ТипЗнч(РезультатВыбора) = Тип("Массив") И РезультатВыбора.Количество() > 0 Тогда
		Цвет = Новый Цвет(РезультатВыбора[0].Красный, РезультатВыбора[0].Зеленый, РезультатВыбора[0].Синий);
	Иначе
		Цвет = Неопределено;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Цвет);
КонецПроцедуры

#КонецОбласти 

#Область Сервер

&НаСервере
Функция ПроверитьСохранитьНаСервере()
	Дерево = РеквизитФормыВЗначение("ДеревоОбъекты");
	CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияСохранитьНастройки(Дерево, Не ПризнакВключенОтбор,ИспользоватьДляВсех);
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьСписокОбъектов(ОграничениеТипов = Неопределено)
	Список = Новый СписокЗначений();
	
	Если ОграничениеТипов = Неопределено Тогда
		Для Каждого МдОбъект Из Метаданные.Документы Цикл
			Если Не ПравоДоступа("Чтение", МдОбъект) Тогда Продолжить; КонецЕсли;
			Список.Добавить("ДокументСсылка." + МдОбъект.Имя, МдОбъект.Представление());
		КонецЦикла;
		Для Каждого МдОбъект Из Метаданные.Задачи Цикл
			Если Не ПравоДоступа("Чтение", МдОбъект) Тогда Продолжить; КонецЕсли;
			Список.Добавить("ЗадачаСсылка." + МдОбъект.Имя, МдОбъект.Представление());
		КонецЦикла;
		Для Каждого МдОбъект Из Метаданные.БизнесПроцессы Цикл
			Если Не ПравоДоступа("Чтение", МдОбъект) Тогда Продолжить; КонецЕсли;
			Список.Добавить("БизнесПроцессСсылка." + МдОбъект.Имя, МдОбъект.Представление());
		КонецЦикла;
		
		ДобавляемыеСправочники = Новый Массив();
		ДобавляемыеСправочники.Добавить("СправочникСсылка.Партнеры");
		ДобавляемыеСправочники.Добавить("СправочникСсылка.КонтактныеЛицаПартнеров");
		ДобавляемыеСправочники.Добавить("СправочникСсылка.Пользователи");
		ДобавляемыеСправочники.Добавить("СправочникСсылка.Проекты");
		ДобавляемыеСправочники.Добавить("СправочникСсылка.вогТорговыеТочки");
		ДобавляемыеСправочники.Добавить("СправочникСсылка.вогЮридическиеЛица");
		Для Каждого ДобавляемыйСправочник Из ДобавляемыеСправочники Цикл
			Если Не ПравоДоступа("Чтение", МдОбъект) Тогда Продолжить; КонецЕсли;
			Список.Добавить(ДобавляемыйСправочник, Метаданные.НайтиПоТипу(Тип(ДобавляемыйСправочник)).Представление());
		КонецЦикла;
		
	Иначе
		Для Каждого Тип Из ОграничениеТипов.Типы() Цикл
			Если Не CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияРеквизитЭтоСсылка(Тип) Тогда
				Продолжить;
			КонецЕсли;
			Попытка		МдОбъект = Метаданные.НайтиПоТипу(Тип);
			Исключение	МдОбъект = Неопределено;
			КонецПопытки;
			Если МдОбъект = Неопределено Тогда Продолжить; КонецЕсли;
			
			Если Не ПравоДоступа("Чтение", МдОбъект) Тогда Продолжить; КонецЕсли;
			
			Список.Добавить(CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияСсылочныйТипСтрокой(Тип), МдОбъект.Представление());
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Список;
КонецФункции

&НаСервере
Функция ДобавитьОбъектВДерево(Корень, ТипОбъектаСтрокой, Представление = Неопределено, СохраненноеТекущееДеревоНастроек = Неопределено)
	Попытка		МетаданныеОбъекта = Метаданные.НайтиПоТипу(Тип(ТипОбъектаСтрокой));
	Исключение	МетаданныеОбъекта = Неопределено;
	КонецПопытки;
	
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Представление = МетаданныеОбъекта.Представление();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Представление = ТипОбъектаСтрокой;
	КонецЕсли;
	
	НоваяСтрока = Корень.Строки.Добавить();
	НоваяСтрока.Объект			= ТипОбъектаСтрокой;
	НоваяСтрока.Представление	= Представление;
	НоваяСтрока.ЭтоОбъект		= Истина;
	
	КореньОбъекта = НоваяСтрока;
	
	ПропуститьРеквизиты = ",ПометкаУдаления,Проведен,Предопределенный,";
	
	Если СохраненноеТекущееДеревоНастроек = Неопределено Тогда
		ДобавленныеРеквизиты = Неопределено;
	Иначе
		ДобавленныеРеквизиты = Новый Массив();
		Для Каждого СтрокаДерева Из СохраненноеТекущееДеревоНастроек.Строки Цикл
			Если СтрокаДерева.ЭтоТабличнаяЧасть <> Истина И СтрокаДерева.ЭтоРазделитель <> Истина Тогда
				ДобавленныеРеквизиты.Добавить(СтрокаДерева.Реквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Попытка		СтандартныеРеквизиты = МетаданныеОбъекта.СтандартныеРеквизиты
	Исключение	СтандартныеРеквизиты = Неопределено;
	КонецПопытки;
	Если СтандартныеРеквизиты <> Неопределено Тогда
		Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
			Если Найти(ПропуститьРеквизиты, "," + Реквизит.Имя + ",") > 0 Тогда Продолжить; КонецЕсли;
			
			Если ДобавленныеРеквизиты <> Неопределено И ДобавленныеРеквизиты.Найти(Реквизит.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = КореньОбъекта.Строки.Добавить();
			
			НоваяСтрока.Объект				= Реквизит.Имя;
			НоваяСтрока.Представление		= ?(ЗначениеЗаполнено(Реквизит.Представление()), Реквизит.Представление(), Реквизит.Имя);
			НоваяСтрока.ЭтоСсылка			= CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияРеквизитЭтоСсылка(Реквизит);
		КонецЦикла;
	КонецЕсли;
	
	Попытка		РеквизитыАдресации = МетаданныеОбъекта.РеквизитыАдресации;
	Исключение	РеквизитыАдресации = Неопределено;
	КонецПопытки;
	Если РеквизитыАдресации <> Неопределено Тогда
		Для Каждого Реквизит Из РеквизитыАдресации Цикл
			Если Найти(ПропуститьРеквизиты, "," + Реквизит.Имя + ",") > 0 Тогда Продолжить; КонецЕсли;
			
			Если ДобавленныеРеквизиты <> Неопределено И ДобавленныеРеквизиты.Найти(Реквизит.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = КореньОбъекта.Строки.Добавить();
			
			НоваяСтрока.Объект				= Реквизит.Имя;
			НоваяСтрока.Представление		= ?(ЗначениеЗаполнено(Реквизит.Представление()), Реквизит.Представление(), Реквизит.Имя);
			НоваяСтрока.ЭтоСсылка			= CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияРеквизитЭтоСсылка(Реквизит);
		КонецЦикла;
	КонецЕсли;
	
	бЕстьРеквизитПартнер = (МетаданныеОбъекта = Метаданные.Справочники.Партнеры);
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Найти(ПропуститьРеквизиты, "," + Реквизит.Имя + ",") > 0 Тогда Продолжить; КонецЕсли;
		
		Если Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.Партнеры")) Тогда
			бЕстьРеквизитПартнер = Истина;
		КонецЕсли;
		
		Если ДобавленныеРеквизиты <> Неопределено И ДобавленныеРеквизиты.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		НоваяСтрока = КореньОбъекта.Строки.Добавить();
		
		НоваяСтрока.Объект				= Реквизит.Имя;
		НоваяСтрока.Представление		= ?(ЗначениеЗаполнено(Реквизит.Представление()), Реквизит.Представление(), Реквизит.Имя);
		НоваяСтрока.ЭтоСсылка			= CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияРеквизитЭтоСсылка(Реквизит);
	КонецЦикла;
	
	// Для справочника Партнеры как исключение добавляем дополнительные поля.
	Если бЕстьРеквизитПартнер Тогда
		Если ДобавленныеРеквизиты = Неопределено Или ДобавленныеРеквизиты.Найти("Партнеры_СегментКлиентов") = Неопределено Тогда
			НоваяСтрока = КореньОбъекта.Строки.Добавить();
			НоваяСтрока.Объект			= "Партнеры_СегментКлиентов";
			НоваяСтрока.Представление	= НСтр("ru = 'Сегмент клиентов'");
			НоваяСтрока.ЭтоСсылка		= Истина;
		КонецЕсли;
		
		Если ДобавленныеРеквизиты = Неопределено Или ДобавленныеРеквизиты.Найти("Партнеры_ABCКласс") = Неопределено Тогда
			НоваяСтрока = КореньОбъекта.Строки.Добавить();		
			НоваяСтрока.Объект			= "Партнеры_ABCКласс";
			НоваяСтрока.Представление	= НСтр("ru = 'ABC класс'");
			НоваяСтрока.ЭтоСсылка		= Ложь;
		КонецЕсли;
		
		Если ДобавленныеРеквизиты = Неопределено Или ДобавленныеРеквизиты.Найти("Партнеры_XYZКласс") = Неопределено Тогда
			НоваяСтрока = КореньОбъекта.Строки.Добавить();
			НоваяСтрока.Объект			= "Партнеры_XYZКласс";
			НоваяСтрока.Представление	= НСтр("ru = 'XYZ класс'");
			НоваяСтрока.ЭтоСсылка		= Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТабЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		НоваяСтрока = КореньОбъекта.Строки.Добавить();
		НоваяСтрока.Объект				= ТабЧасть.Имя;
		НоваяСтрока.ЭтоТабличнаяЧасть	= Истина;
		НоваяСтрока.Представление		= ТабЧасть.Представление();
		
		КореньТабЧасти = НоваяСтрока;
		
		Если СохраненноеТекущееДеревоНастроек = Неопределено Тогда
			ДобавленнаяСтрокаТЧ = Неопределено;
		Иначе
			ДобавленнаяСтрокаТЧ = СохраненноеТекущееДеревоНастроек.Строки.Найти(ТабЧасть.Имя, "Реквизит");
			Если ДобавленнаяСтрокаТЧ <> Неопределено И ДобавленнаяСтрокаТЧ.ЭтоТабличнаяЧасть <> Истина Тогда
				ДобавленнаяСтрокаТЧ = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Попытка		СтандартныеРеквизиты = ТабЧасть.СтандартныеРеквизиты
		Исключение	СтандартныеРеквизиты = Неопределено;
		КонецПопытки;
		Если СтандартныеРеквизиты <> Неопределено Тогда
			Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
				Если ДобавленнаяСтрокаТЧ <> Неопределено И ДобавленнаяСтрокаТЧ.Строки.Найти(Реквизит.Имя, "Реквизит") <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = КореньТабЧасти.Строки.Добавить();
				НоваяСтрока.Объект						= Реквизит.Имя;
				НоваяСтрока.ЭтоРеквизитТабличнойЧасти	= Истина;
				НоваяСтрока.Представление				= ?(ЗначениеЗаполнено(Реквизит.Представление()), Реквизит.Представление(), Реквизит.Имя);
				НоваяСтрока.ЭтоСсылка					= CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияРеквизитЭтоСсылка(Реквизит);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Реквизит Из ТабЧасть.Реквизиты Цикл
			Если ДобавленнаяСтрокаТЧ <> Неопределено И ДобавленнаяСтрокаТЧ.Строки.Найти(Реквизит.Имя, "Реквизит") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = КореньТабЧасти.Строки.Добавить();
			НоваяСтрока.Объект						= Реквизит.Имя;
			НоваяСтрока.ЭтоРеквизитТабличнойЧасти	= Истина;
			НоваяСтрока.Представление				= ?(ЗначениеЗаполнено(Реквизит.Представление()), Реквизит.Представление(), Реквизит.Имя);
			НоваяСтрока.ЭтоСсылка					= CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияРеквизитЭтоСсылка(Реквизит);
		КонецЦикла;
		
		Если КореньТабЧасти.Строки.Количество() = 0 Тогда
			КореньТабЧасти.Родитель.Строки.Удалить(КореньТабЧасти);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КореньОбъекта;
КонецФункции

&НаСервере
Процедура СкопироватьДерево(СтрокиПриемник, СтрокиИсточник, УстановитьОбъектВСтроках = Неопределено)
	Для Каждого СтрокаИсточник Из СтрокиИсточник Цикл
		НоваяСтрока = СтрокиПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
		Если УстановитьОбъектВСтроках <> Неопределено Тогда
			НоваяСтрока.Объект = УстановитьОбъектВСтроках;
		КонецЕсли;
		Если СтрокаИсточник.Строки.Количество() > 0 Тогда
			СкопироватьДерево(НоваяСтрока.Строки, СтрокаИсточник.Строки, УстановитьОбъектВСтроках);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОбъекты(ОграничениеТипов = Неопределено, ОчищатьДерево = Истина, ПолучитьТаблицуНастроекИзВременногоХранилищаПоАдресу = Неопределено)
	ДеревоОбъектыЭлементы = ДеревоОбъекты.ПолучитьЭлементы();
	Если ДеревоОбъектыЭлементы.Количество() > 0 Тогда
		Дерево = РеквизитФормыВЗначение("ДеревоОбъекты");
		ДеревоНастроекБланк = Дерево.Строки[0].ДеревоНастроек.Скопировать();
		Дерево = Неопределено;
	Иначе
		СтрокаБланк = ДеревоОбъектыЭлементы.Добавить();
		Дерево = РеквизитФормыВЗначение("ДеревоОбъекты");
		ДеревоНастроекБланк = Дерево.Строки[0].ДеревоНастроек.Скопировать();
		ДеревоОбъектыЭлементы.Удалить(СтрокаБланк);
		Дерево = Неопределено;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ДеревоОбъекты");
	Если ОчищатьДерево Тогда
		Дерево.Строки.Очистить();
	КонецЕсли;
	
	ОбъектыВерхнийУровень = Новый СписокЗначений();
	ОбъектыВерхнийУровень.Добавить("ДокументСсылка",		НСтр("ru = 'Документы'"),,			БиблиотекаКартинок.Документ);
	ОбъектыВерхнийУровень.Добавить("ЗадачаСсылка",			НСтр("ru = 'Задачи'"),,				БиблиотекаКартинок.Задача);
	ОбъектыВерхнийУровень.Добавить("БизнесПроцессСсылка",	НСтр("ru = 'Бизнес-процессы'"),,	БиблиотекаКартинок.БизнесПроцесс);
	ОбъектыВерхнийУровень.Добавить("СправочникСсылка",		НСтр("ru = 'Справочники'"),,		БиблиотекаКартинок.Справочник);
	
	Если ПолучитьТаблицуНастроекИзВременногоХранилищаПоАдресу = Неопределено Тогда
		ТаблицаНастройки = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьНастройки();
	Иначе
		ТаблицаНастройки = ПолучитьИзВременногоХранилища(ПолучитьТаблицуНастроекИзВременногоХранилищаПоАдресу);
		УдалитьИзВременногоХранилища(ПолучитьТаблицуНастроекИзВременногоХранилищаПоАдресу);
	КонецЕсли;
	
	Для Каждого ОбъектВерхнегоУровня Из ОбъектыВерхнийУровень Цикл
		Если Не ОчищатьДерево Тогда
			СтрокаПроверка = Дерево.Строки.Найти(ОбъектВерхнегоУровня.Значение, "Объект");
			Если СтрокаПроверка <> Неопределено Тогда Продолжить; КонецЕсли;
		КонецЕсли;
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Объект			= ОбъектВерхнегоУровня.Значение;
		НоваяСтрока.Представление	= ОбъектВерхнегоУровня.Представление;
		НоваяСтрока.ЭтоЗаголовок	= Истина;
		НоваяСтрока.Картинка		= ОбъектВерхнегоУровня.Картинка;
	КонецЦикла;
	
	ДобавляемыеОбъекты = ПолучитьСписокОбъектов(ОграничениеТипов);
	
	Для Каждого ДобавляемыйОбъект Из ДобавляемыеОбъекты Цикл
		НайденнаяСтрока = Неопределено;
		Для Каждого СтрокаДерева Из Дерево.Строки Цикл
			Если Найти(ДобавляемыйОбъект.Значение, СтрокаДерева.Объект + ".") > 0 Тогда
				НайденнаяСтрока = СтрокаДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НайденнаяСтрока = Неопределено Тогда Продолжить; КонецЕсли;
		
		Если Не ОчищатьДерево Тогда
			СтрокаПроверка = НайденнаяСтрока.Строки.Найти(ДобавляемыйОбъект.Значение, "Объект");
			Если СтрокаПроверка <> Неопределено Тогда Продолжить; КонецЕсли;
		КонецЕсли;
		
		СтрокаНастройки = ТаблицаНастройки.Найти(ДобавляемыйОбъект.Значение, "Объект");
		Если СтрокаНастройки <> Неопределено И ТипЗнч(СтрокаНастройки.ДеревоНастроек) = Тип("ДеревоЗначений") И СтрокаНастройки.ДеревоНастроек.Строки.Количество() > 0 Тогда
			СохраненноеТекущееДеревоНастроек = СтрокаНастройки.ДеревоНастроек;
		Иначе
			СохраненноеТекущееДеревоНастроек = Неопределено;
		КонецЕсли;
		
		КореньОбъекта = ДобавитьОбъектВДерево(НайденнаяСтрока, ДобавляемыйОбъект.Значение, ДобавляемыйОбъект.Представление, СохраненноеТекущееДеревоНастроек);
		Если КореньОбъекта <> Неопределено Тогда
			Если СохраненноеТекущееДеревоНастроек <> Неопределено Тогда
				КореньОбъекта.ДеревоНастроек = ДеревоНастроекБланк.Скопировать();
				СкопироватьДерево(КореньОбъекта.ДеревоНастроек.Строки, СохраненноеТекущееДеревоНастроек.Строки);
				КореньОбъекта.ПризнакЕстьНастройки = Истина;
			КонецЕсли;
			
			Если СтрокаНастройки <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(КореньОбъекта, СтрокаНастройки,, "Объект,ДеревоНастроек");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление пустых верхних уровней.
	нИндекс = 0;
	Пока нИндекс < Дерево.Строки.Количество() Цикл
		Если Дерево.Строки[нИндекс].Строки.Количество() = 0 Тогда
			Дерево.Строки.Удалить(Дерево.Строки[нИндекс]);
		Иначе
			нИндекс = нИндекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОбъекты");
КонецПроцедуры

&НаСервере
Функция ПроверитьСуществованиеЭлементаОформленияЦвета(ПроверяемыйЦвет, ИмяЭлементаОформления, ИмяОформляемогоПоля, ИмяПоляЭлемнтаОтбора)
	бЭлементОформленияНайден = Ложь;
	
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		
		Если ЭлементУсловногоОформления.Использование И ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		
			Для Каждого ЭлементОформления Из ЭлементУсловногоОформления.Оформление.Элементы Цикл
				
				Если ЭлементОформления.Использование И ЭлементОформления.Параметр = Новый ПараметрКомпоновкиДанных(ИмяЭлементаОформления) И ЭлементОформления.Значение = ПроверяемыйЦвет Тогда
					
					Для Каждого ОформляемоеПоле Из ЭлементУсловногоОформления.Поля.Элементы Цикл
						
						Если ОформляемоеПоле.Использование И ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоПоля) Тогда
							
							Для Каждого ЭлементОтбора Из ЭлементУсловногоОформления.Отбор.Элементы Цикл
								
								Если		ЭлементОтбора.Использование
										И	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
										И	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты." + ИмяПоляЭлемнтаОтбора)
										И	ЭлементОтбора.ПравоеЗначение = ПроверяемыйЦвет Тогда
									//
									
									бЭлементОформленияНайден = Истина;
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
						Если бЭлементОформленияНайден Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если бЭлементОформленияНайден Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если бЭлементОформленияНайден Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат бЭлементОформленияНайден;
КонецФункции

&НаСервере
Процедура ОбработкаОбновленияДереваОтображаемыхРеквизитовСервер()
	Дерево = РеквизитФормыВЗначение("ДеревоОтображаемыеРеквизиты");
	
	ДополнительныеПараметры = Новый Структура("ШиринаЛевойКолонки,ШиринаЛевойКолонкиАбсолютная,ШиринаПравойКолонки,ШиринаПравойКолонкиАбсолютная",
		ШиринаЛевойКолонки, ШиринаЛевойКолонкиАбсолютная, ШиринаПравойКолонки, ШиринаПравойКолонкиАбсолютная);
	//
	Результат = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(Дерево,, ДополнительныеПараметры);
	
	// Настройка условного оформления формы для отображения выбранного цвета в колонках ЦветФона, ЦветТекста.
	Дерево.Колонки.Добавить("_КолонкаДляПоиска");
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("_КолонкаДляПоиска", Неопределено), Истина);
	Дерево.Колонки.Удалить(Дерево.Колонки._КолонкаДляПоиска);
	ТаблицаРазныхЦветов = Новый ТаблицаЗначений();
	ТаблицаРазныхЦветов.Колонки.Добавить("Цвет");
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НоваяСтрока = ТаблицаРазныхЦветов.Добавить();
		НоваяСтрока.Цвет = НайденнаяСтрока.ЦветТекста;
		НоваяСтрока = ТаблицаРазныхЦветов.Добавить();
		НоваяСтрока.Цвет = НайденнаяСтрока.ЦветФона;
	КонецЦикла;
	ТаблицаРазныхЦветов.Свернуть("Цвет");
	
	Для Каждого СтрокаТаблицы Из ТаблицаРазныхЦветов Цикл
		ЦветОформления = СтрокаТаблицы.Цвет;
		
		Если ЦветОформления.Красный = 0 И ЦветОформления.Зеленый = 0 И ЦветОформления.Синий = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ЦветОформления.Красный = 255 И ЦветОформления.Зеленый = 255 И ЦветОформления.Синий = 255 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПроверитьСуществованиеЭлементаОформленияЦвета(ЦветОформления, "ЦветФона", "ЦветФона", "ЦветФона") Тогда
			НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
			НовыйЭлемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			
			Для Каждого ОформлениеЭлемента Из НовыйЭлемент.Оформление.Элементы Цикл
				Если ОформлениеЭлемента.Параметр = Новый ПараметрКомпоновкиДанных("ЦветФона") Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ОформлениеЭлемента.Значение = ЦветОформления;
			ОформлениеЭлемента.Использование = Истина;
			
			ОформляемоеПоле = НовыйЭлемент.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЦветФона");
			ОформляемоеПоле.Использование = Истина;
			
			ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.ЦветФона");
			ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ПолеОтбора.ПравоеЗначение = ЦветОформления;
			ПолеОтбора.Использование = Истина;
			
			НовыйЭлемент.Использование = Истина;
		КонецЕсли;
		
		Если Не ПроверитьСуществованиеЭлементаОформленияЦвета(ЦветОформления, "ЦветФона", "ЦветТекста", "ЦветТекста") Тогда
			НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
			НовыйЭлемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			
			Для Каждого ОформлениеЭлемента Из НовыйЭлемент.Оформление.Элементы Цикл
				Если ОформлениеЭлемента.Параметр = Новый ПараметрКомпоновкиДанных("ЦветФона") Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ОформлениеЭлемента.Значение = ЦветОформления;
			ОформлениеЭлемента.Использование = Истина;
			
			ОформляемоеПоле = НовыйЭлемент.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЦветТекста");
			ОформляемоеПоле.Использование = Истина;
			
			ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтображаемыеРеквизиты.ЦветТекста");
			ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ПолеОтбора.ПравоеЗначение = ЦветОформления;
			ПолеОтбора.Использование = Истина;
			
			НовыйЭлемент.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПоУмолчанию(ЗаполнитьДляОбъекта)
	Если Не ЗначениеЗаполнено(ЗаполнитьДляОбъекта) Тогда Возврат; КонецЕсли;
	
	ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Очистить();
	
	Дерево = РеквизитФормыВЗначение("ДеревоОтображаемыеРеквизиты");
	
	ТаблицаНастройки = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьНастройки(ЗаполнитьДляОбъекта, Истина);
	Если ТаблицаНастройки = Неопределено Тогда Возврат; КонецЕсли;
	
	НайденнаяСтрока = ТаблицаНастройки.Найти(ЗаполнитьДляОбъекта, "Объект");
	Если НайденнаяСтрока = Неопределено Тогда Возврат; КонецЕсли;
	
	ДеревоНастройкиПоУмолчанию = НайденнаяСтрока.ДеревоНастроек;
	Если ТипЗнч(ДеревоНастройкиПоУмолчанию) <> Тип("ДеревоЗначений") Тогда Возврат; КонецЕсли;
	
	СкопироватьДерево(Дерево.Строки, ДеревоНастройкиПоУмолчанию.Строки, ЗаполнитьДляОбъекта);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОтображаемыеРеквизиты");
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	Форма.Элементы.ГруппаСохранитьЗагрузить.Доступность = Не Форма.ПризнакВключенОтбор;
	Форма.Элементы.КнопкаОтключитьОтбор.Доступность = Форма.ПризнакВключенОтбор;
	
	Форма.Элементы.ШиринаКолонкиВПикселах.Видимость = (Форма.НастройкаШириныКолонок <> 0);
	Форма.Элементы.ОтносительнаяШиринаКолонокВПроцентах.Видимость = (Форма.НастройкаШириныКолонок = 0);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СинхронизироватьНастройкиШириныКолонок(Форма, ПриоритетФормы = Истина)
	Если Форма.ШиринаЛевойКолонкиАбсолютная И Форма.ШиринаПравойКолонкиАбсолютная Тогда
		Форма.ШиринаПравойКолонкиАбсолютная = Ложь;
	КонецЕсли;
	
	Если ПриоритетФормы Тогда
		Если Форма.ШиринаЛевойКолонкиАбсолютная И Не Форма.ШиринаПравойКолонкиАбсолютная Тогда
			Форма.НастройкаШириныКолонок = 1;
			
			Форма.ШиринаКолонкиВПикселах = Форма.ШиринаЛевойКолонки;
			Форма.ШиринаПравойКолонки = 100;
			
		ИначеЕсли Не Форма.ШиринаЛевойКолонкиАбсолютная И Форма.ШиринаПравойКолонкиАбсолютная Тогда
			Форма.НастройкаШириныКолонок = 2;
			
			Форма.ШиринаКолонкиВПикселах = Форма.ШиринаПравойКолонки;
			Форма.ШиринаЛевойКолонки = 100;
			
		Иначе
			Форма.НастройкаШириныКолонок = 0;
			
			Если Форма.ШиринаЛевойКолонки > 100 Тогда
				Форма.ШиринаЛевойКолонки = 75;
			КонецЕсли;
			Форма.ОтносительнаяШиринаКолонокВПроцентах = Форма.ШиринаЛевойКолонки;
			Форма.ШиринаПравойКолонки = 100 - Форма.ШиринаЛевойКолонки;
			
			Форма.ШиринаКолонкиВПикселах = Форма.ШиринаЛевойКолонки;
			
		КонецЕсли;
		
	Иначе
		
		Если Форма.НастройкаШириныКолонок = 1 Тогда
			Если Форма.ШиринаКолонкиВПикселах = 0 Тогда
				Форма.ШиринаКолонкиВПикселах = Форма.ШиринаЛевойКолонки;
			КонецЕсли;
			
			Форма.ШиринаЛевойКолонкиАбсолютная = Истина;
			Форма.ШиринаПравойКолонкиАбсолютная = Ложь;
			Форма.ШиринаЛевойКолонки = Форма.ШиринаКолонкиВПикселах;
			Форма.ШиринаПравойКолонки = 100;
			
		ИначеЕсли Форма.НастройкаШириныКолонок = 2 Тогда
			Если Форма.ШиринаКолонкиВПикселах = 0 Тогда
				Форма.ШиринаКолонкиВПикселах = Форма.ШиринаПравойКолонки;
			КонецЕсли;
			
			Форма.ШиринаЛевойКолонкиАбсолютная = Ложь;
			Форма.ШиринаПравойКолонкиАбсолютная = Истина;
			Форма.ШиринаЛевойКолонки = 100;
			Форма.ШиринаПравойКолонки = Форма.ШиринаКолонкиВПикселах;
			
		Иначе
			Форма.ШиринаЛевойКолонкиАбсолютная = Ложь;
			Форма.ШиринаПравойКолонкиАбсолютная = Ложь;
			Форма.ШиринаЛевойКолонки = Форма.ОтносительнаяШиринаКолонокВПроцентах;
			Форма.ШиринаПравойКолонки = 100 - Форма.ШиринаЛевойКолонки;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШрифтПоУмолчанию(ЭтоСсылка = Ложь)
	//Возврат Новый Шрифт("MS Sans Serif", 12, Истина, Ложь, ЭтоСсылка, Ложь);
	Возврат Новый Шрифт("MS Sans Serif", 14, Ложь, Ложь, Ложь, Ложь);
КонецФункции

&НаКлиенте
Процедура КомандаЗаполнитьПоУмолчаниюЗавершение(Ответ, ТекущиеДанныеКорень) экспорт
	Если Ответ = КодВозвратаДиалога.Нет Тогда Возврат; КонецЕсли;
	
	ЗаполнитьНастройкиПоУмолчанию(ТекущиеДанныеКорень.Объект);
	ТекущиеДанныеКорень.ПризнакЕстьНастройки = (ДеревоОтображаемыеРеквизиты.ПолучитьЭлементы().Количество() > 0);
	
	ОбработкаОбновленияДереваОтображаемыхРеквизитов();
	
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти
	
#КонецОбласти









