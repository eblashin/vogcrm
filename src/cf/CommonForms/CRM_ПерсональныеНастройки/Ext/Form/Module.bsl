//////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура сохраняет массив пользовательских настроек МассивСтруктур. 
// Может применяться для случаев вызова с клиента.
// 
// Параметры:
//    МассивСтруктур - Массив - массив структур с полями "Объект", "Настройка", "Значение".
//    НужноОбновитьПовторноИспользуемыеЗначения - Булево - требуется обновить повторно используемые значения.
//
Процедура ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур, НужноОбновитьПовторноИспользуемыеЗначения = Ложь)
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийПользователь.ИдентификаторПользователяИБ);
	Если ПользовательИБ <> Неопределено Тогда
		ИмяПользователяИБ = ПользовательИБ.Имя;
		Для Каждого Элемент Из МассивСтруктур Цикл
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Элемент.Объект, Элемент.Настройка, Элемент.Значение,, ИмяПользователяИБ, НужноОбновитьПовторноИспользуемыеЗначения);
		КонецЦикла;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для выбранного пользователя не сопоставлен пользователь информационной базы. Настройки не были сохранены.'"));
	КонецЕсли;
КонецПроцедуры // ХранилищеОбщихНастроекСохранитьМассив()

&НаСервере
Процедура ЗаполнитьДеревоНастроекОповещений()
	
	НастройкиЭлементы = ДеревоНастроекОповещений.ПолучитьЭлементы();
	НастройкиЭлементы.Очистить();
	СписокИсключаемыхВидов = Новый СписокЗначений;
	ОсновнойВариантПоставки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользуемыйВариантПоставки");
	Если Не ЗначениеЗаполнено(ОсновнойВариантПоставки) Тогда
		ОсновнойВариантПоставки = CRM_ЛицензированиеСервер.ПолучитьОсновнойВариантПоставки();
	КонецЕсли;
	
	Если ОсновнойВариантПоставки <> Перечисления.CRM_ВариантыПоставки.КОРП Тогда
		СписокИсключаемыхВидов.Добавить(Справочники.CRM_ВидыОповещений.ПросроченныеКонтрольныеТочки);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь"	, ТекущийПользователь);
	Запрос.УстановитьПараметр("Исключения"		, СписокИсключаемыхВидов);
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения,
	|	CRM_ОповещенияПользовательскиеНастройки.Пользователь,
	|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
	|	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
	|	CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта,
	|	CRM_ОповещенияПользовательскиеНастройки.СМС,
	|	CRM_ОповещенияПользовательскиеНастройки.Напоминание,
	|	CRM_ОповещенияПользовательскиеНастройки.Сумма,
	|	CRM_ОповещенияПользовательскиеНастройки.Хранилище
	|ПОМЕСТИТЬ ПользовательскиеНастройки
	|ИЗ
	|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
	|ГДЕ
	|	CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	CRM_ВидыОповещений.Ссылка КАК ВидОповещения,
	|	CRM_ВидыОповещений.Код КАК Код,
	|	CRM_ВидыОповещений.Родитель КАК Родитель,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Пользователь, &Пользователь) КАК Пользователь,
	|	ЕСТЬNULL(ПользовательскиеНастройки.СрокОповещения, 0) КАК СрокОповещения,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Периодичность, ЗНАЧЕНИЕ(Перечисление.CRM_ПериодичностьОповещений.ПустаяСсылка)) КАК Периодичность,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Напоминание, ЛОЖЬ) КАК Напоминание,
	|	ЕСТЬNULL(ПользовательскиеНастройки.СМС, ЛОЖЬ) КАК SMS,
	|	ЕСТЬNULL(ПользовательскиеНастройки.ЭлектроннаяПочта, ЛОЖЬ) КАК Email,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ПользовательскиеНастройки.Хранилище, НЕОПРЕДЕЛЕНО) КАК Хранилище
	|ИЗ
	|	Справочник.CRM_ВидыОповещений КАК CRM_ВидыОповещений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПользовательскиеНастройки КАК ПользовательскиеНастройки
	|		ПО CRM_ВидыОповещений.Ссылка = ПользовательскиеНастройки.ВидОповещения
	|ГДЕ
	|	НЕ CRM_ВидыОповещений.ЭтоГруппа
	|	И НЕ CRM_ВидыОповещений.ПометкаУдаления
	|	И НЕ CRM_ВидыОповещений.Ссылка В (&Исключения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код
	|
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидОповещения)
	|ПО
	|	Родитель";
	
	ВыборкаГрупп = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаГрупп.Следующий() Цикл
		СтрокаГруппы = НастройкиЭлементы;
		СтрокаНастройкиРодитель = СтрокаГруппы.Добавить();
		СтрокаНастройкиРодитель.ВидОповещения = ВыборкаГрупп.Родитель;
		СтрокаГруппыЭлементы = СтрокаНастройкиРодитель.ПолучитьЭлементы();
		
		Выборка = ВыборкаГрупп.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Родитель = Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия Тогда
				//Если (Выборка.Напоминание И НЕ ИспользоватьНапоминания) ИЛИ (Выборка.SMS И НЕ ИспользоватьОповещенияСМС)
				//ИЛИ (Выборка.Email И НЕ ИспользоватьОповещенияЭлектроннаяПочта) Тогда
				//	Продолжить;
				//КонецЕсли;
			КонецЕсли;
			Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() И Выборка.Родитель = Справочники.CRM_ВидыОповещений.ЗначимыеСобытия Тогда
				Если Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.ПоступлениеОплаты Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СтрокаНастройки = СтрокаГруппыЭлементы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНастройки,Выборка);
			СтрокаНастройки.НомерКартинки = Истина;
			
			Если Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма
			ИЛИ Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.СчетСумма Тогда
				СтрокаНастройки.Отбор = Выборка.Сумма;
			КонецЕсли;
			
			Если Выборка.Хранилище <> Неопределено Тогда
				ЗначениеИзХранилища = Выборка.Хранилище.Получить();
				Если ЗначениеИзХранилища <> Неопределено Тогда
					СтрокаНастройки.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ЗначениеИзХранилища, УникальныйИдентификатор);
					Если	СтрокаНастройки.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПроектам
						Или	СтрокаНастройки.ВидОповещения = Справочники.CRM_ВидыОповещений.ДействияПоПартнерам Тогда
						//
						СтрокаНастройки.Отбор = Строка(ЗначениеИзХранилища);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Сохраним старые значения настроек оповещения о входящих  письмах.
			
			Если Выборка.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах Тогда
				
				ОповещенияОВходящихПисьмахНапоминание    = Выборка.Напоминание;
				ОповещенияОВходящихПисьмахСрокОповещения = Выборка.СрокОповещения;
				ОповещенияОВходящихПисьмахПериодичность  = Выборка.Периодичность;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура определяет доступность изменения значения настройки софтфона.
//
// Параметры:
//	Настройка - ПланВидовХарактеристикСсылка	- Настройка софтфона.
//
// Возвращаемое значение:
//	Булево	- Доступность изменения значения.
//
Функция ОпределитьДоступностьНастройки(Настройка)
	Попытка
		КодНастройки = Число(Настройка.Код);
	Исключение
		КодНастройки = 0;
	КонецПопытки;
	Если (КодНастройки > 90001) И (КодНастройки < 90013) Тогда
		НастройкиЭлементы = ДеревоНастроек.ПолучитьЭлементы();
		ГруппаСофтФон = НайтиНастройкуВДереве(ДеревоНастроек.ПолучитьЭлементы(), ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпНастройкиСофтФон);
		Если ГруппаСофтФон = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		ЭлементыГруппыСофтФон = ГруппаСофтФон.ПолучитьЭлементы();
		НастройкаИспользоватьСофтФон = Ложь;
		НайденныеСтрокиДерева = НайтиНастройкуВДереве(ЭлементыГруппыСофтФон, ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпИспользоватьСофтФон, Ложь);
		Если НЕ (НайденныеСтрокиДерева = Неопределено) Тогда
			НастройкаИспользоватьСофтФон = НайденныеСтрокиДерева.Значение;
		КонецЕсли;
		Если НЕ НастройкаИспользоватьСофтФон Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции // ОпределитьДоступностьНастройки()

&НаСервере
// Процедура выполняет рекурсивный поиск настройки в дереве настроек.
//
// Параметры:
//	СтрокиДерева	- КоллекцияСтрокДереваЗначений	- Строки дерева, в которых выполняется поиск.
//	Настройка		- ПланВидовХарактеристикСсылка	- Настройка для поиска.
//	ТолькоГруппы	- Булево						- Признак поиска только групп.
//
// Возвращаемое значение:
//	СтрокаДереваЗначений	- Строка настройки.
//
Функция НайтиНастройкуВДереве(СтрокиДерева, Настройка, ТолькоГруппы = Истина)
	НайденныйЭлемент = Неопределено;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если ТолькоГруппы И НЕ СтрокаДерева.ЭтоГруппа Тогда Продолжить; КонецЕсли;
		Если СтрокаДерева.Настройка = Настройка Тогда
			НайденныйЭлемент = СтрокаДерева;
		Иначе
			ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
			НайденныйЭлемент = НайтиНастройкуВДереве(ПодчиненныеСтрокиДерева, Настройка, ТолькоГруппы);
		КонецЕсли;			
		Если НЕ (НайденныйЭлемент = Неопределено) Тогда Прервать; КонецЕсли; 
	КонецЦикла;	
	Возврат НайденныйЭлемент;
КонецФункции // НайтиНастройкуВДереве()	

&НаСервере
// Процедура обновляет информацию в таблице настроек.
//
Процедура ЗаполнитьДерево()
	
	НастройкиЭлементы = ДеревоНастроек.ПолучитьЭлементы();
	НастройкиЭлементы.Очистить();
	
	// +Google
	СинхронизироватьКалендарьСGoogle = ПолучитьФункциональнуюОпцию("CRM_СинхронизироватьКалендарьСКалендаремGoogle");
	// -Google
	
	// +СофтФон
	сфпИспользоватьСофтФон = ПолучитьФункциональнуюОпцию("сфпИспользоватьСофтФон");
	// -СофтФон
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ
	|	Настройки.Код,
	|	Настройки.Родитель,
	|	Настройки.Ссылка,
	|	Настройки.ЭтоГруппа КАК ЭтоГруппа,
	|	НЕ Настройки.ЭтоГруппа КАК НомерКартинки,
	|	Настройки.ИмяПредопределенныхДанных,
	|	Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям,
	|	ЗначениеНастроек.Значение
	|ИЗ
	|	ПланВидовХарактеристик.CRM_НастройкиПользователей КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НастройкиПользователей КАК ЗначениеНастроек
	|		ПО (ЗначениеНастроек.Настройка = Настройки.Ссылка)
	|			И (ЗначениеНастроек.Пользователь = &Пользователь),
	|	Константы КАК Константы
	|ГДЕ
	|	НЕ Настройки.ПометкаУдаления
	// +Google 
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ОсновнаяОрганизация)
	|					И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.RefreshTokenGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.КалендарьGoogle)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.IDКаналаGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ВремяЖизниКаналаGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ИдКалендаряКанала)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ЧасовойПоясКалендаряGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.AccessTokenGApi)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА Настройки.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.CRM_НастройкиПользователей.ВремяЖизниТокенаAPI)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	// -Google 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа ИЕРАРХИЯ УБЫВ,
	|	Настройки.Код";
	
	Если НЕ CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Константы", "ФункциональнаяОпцияУчетПоНесколькимОрганизациям") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Константы.ФункциональнаяОпцияУчетПоНесколькимОрганизациям", "ИСТИНА");
		
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			КодНастройки = Число(Выборка.Код);
		Исключение	
			КодНастройки = 0;
		КонецПопытки;
		
		Если СтрНайти(Выборка.ИмяПредопределенныхДанных, "Удалить_") = 1 Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		Если Выборка.ЭтоГруппа Тогда
			
			// +Google 
			Если НЕ СинхронизироватьКалендарьСGoogle Тогда
				Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.Google ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.НастройкиКалендаряGoogle 
				Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// -Google
			
			// +СофтФон
			Если НЕ сфпИспользоватьСофтФон Тогда
				Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпНастройкиСофтФон ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействияПриЗвонке ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпАвторизацияНаСерверСофтфона
				Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// -СофтФон
			
			СтрокаГруппы = НастройкиЭлементы;
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
				НайденныйРодитель = НайтиНастройкуВДереве(СтрокаГруппы, Выборка.Родитель);
				Если НЕ (НайденныйРодитель = Неопределено) Тогда
					СтрокаГруппы = НайденныйРодитель.ПолучитьЭлементы();
				КонецЕсли;
			КонецЕсли;
			
			СтрокаНастройки = СтрокаГруппы.Добавить();
			СтрокаНастройки.Настройка = Выборка.Ссылка;
			СтрокаНастройки.ЭтоГруппа = Выборка.ЭтоГруппа;
			СтрокаНастройки.НомерКартинки = Выборка.НомерКартинки;
			// +СофтФон
			Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпАвторизацияНаСерверСофтфона Тогда
				СтрокаНастройки.СкрыватьКолонку = НЕ сфпПривязкаНомера;
			Иначе
				СтрокаНастройки.СкрыватьКолонку = Ложь;
			КонецЕсли;
			// -СофтФон
			СтрокаГруппыЭлементы = СтрокаНастройки.ПолучитьЭлементы();
		Иначе
			
			// +Google 
			Если НЕ СинхронизироватьКалендарьСGoogle Тогда
				Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.СинхронизироватьКалендарьGoogle ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.КалендарьGoogleПредставление 
				Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// -Google
			
			// +СофтФон
			Если НЕ сфпИспользоватьСофтФон Тогда
				Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриВходящемЗвонке ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриИсходящемЗвонке ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпЗакрыватьПанельПриЗавершенииРаботы ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпИспользоватьВнутреннююПанель ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпИспользоватьСофтФон ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпТекущийВнутреннийНомер ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпЛогинНаСерверСофтФон ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпПарольНаСерверСофтФон ИЛИ
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпПривязатьВнутреннийНомер
				Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			// -СофтФон
			
			// Особеннности объединенных решений
			ИмяКонфигурации = Метаданные.Имя;
			
			Если ИмяКонфигурации = "CRM" Тогда
				Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ИспользоватьCRM ИЛИ 
					 Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ИспользоватьТиповуюФормуРегистрацииНовогоПартнера 
				Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе // Объединенные решения
				Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ПодставлятьОсновнойПроектВПоручения Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаНастройки = СтрокаГруппыЭлементы.Добавить();
			СтрокаНастройки.Настройка = Выборка.Ссылка;
			// +СофтФон
			Если СтрокаНастройки.Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриВходящемЗвонке Тогда
				ЭлементСписка = сфпСписокАвтоматическихДействий.НайтиПоЗначению(Выборка.Значение);
				Если ЭлементСписка = Неопределено Тогда
					ЭлементСписка = сфпСписокАвтоматическихДействий[0];
				КонецЕсли;	
				СтрокаНастройки.Значение  = ЭлементСписка.Значение;
			ИначеЕсли СтрокаНастройки.Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриИсходящемЗвонке Тогда
				ЭлементСписка = сфпСписокАвтоматическихДействий.НайтиПоЗначению(Выборка.Значение);
				Если ЭлементСписка = Неопределено Тогда
					ЭлементСписка = сфпСписокАвтоматическихДействий[0];
				КонецЕсли;	
				СтрокаНастройки.Значение  = ЭлементСписка.Значение;
			Иначе	
				СтрокаНастройки.Значение  = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
			КонецЕсли;	
			// -СофтФон
			СтрокаНастройки.ЭтоГруппа = Выборка.ЭтоГруппа;
			СтрокаНастройки.НомерКартинки = Выборка.НомерКартинки;
			
			// +СофтФон
			Если Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпЛогинНаСерверСофтФон 
			ИЛИ Выборка.Ссылка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.сфпПарольНаСерверСофтФон Тогда
				СтрокаНастройки.СкрыватьКолонку = НЕ сфпПривязкаНомера;
			Иначе
				СтрокаНастройки.СкрыватьКолонку = Ложь;
			КонецЕсли;
			// -СофтФон
			
			// +Лицензирование
			Если СтрокаНастройки.Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ИспользоватьCRM Тогда
				ИспользоватьCRMПредыдущий = ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), Истина, СтрокаНастройки.Значение);
			КонецЕсли;
			Если СтрокаНастройки.Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.ИспользуемыйВариантПоставки Тогда
				ИспользуемыйВариантПоставкиПредыдущий = СтрокаНастройки.Значение;
			КонецЕсли;
			// -Лицензирование
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДерево()

&НаСервере
// Процедура обновляет информацию в таблице учетных записей.
//
Процедура ЗаполнитьТаблицуУчетныхЗаписей()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись,
	|	CRM_ПодписиУчетныхЗаписей.ПодписьИсходящегоПисьма,
	|	CRM_ПодписиУчетныхЗаписей.ПодписьПересылаемогоПисьма
	|ИЗ
	|	РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ПодписиУчетныхЗаписей КАК CRM_ПодписиУчетныхЗаписей
	|		ПО CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = CRM_ПодписиУчетныхЗаписей.УчетнаяЗапись
	|			И CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = CRM_ПодписиУчетныхЗаписей.Пользователь
	|ГДЕ
	|	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = &Пользователь";
	
	ТабЗнач = Запрос.Выполнить().Выгрузить();
    ЗначениеВРеквизитФормы(ТабЗнач, "ТаблицаНастроекПочты");
	
КонецПроцедуры // ЗаполнитьТаблицуУчетныхЗаписей()

&НаСервере
Процедура ОбновитьПодписиУчетныхЗаписей()
	
	НаборЗаписей = РегистрыСведений.CRM_ПодписиУчетныхЗаписей.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.Пользователь.Использование = Истина;
	НаборЗаписей.Отбор.Пользователь.Значение      = ТекущийПользователь;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Для Каждого СтрокаТаблицыНастроек Из ТаблицаНастроекПочты Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыНастроек.ПодписьИсходящегоПисьма) ИЛИ ЗначениеЗаполнено(СтрокаТаблицыНастроек.ПодписьПересылаемогоПисьма) Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.УчетнаяЗапись				= СтрокаТаблицыНастроек.УчетнаяЗапись; 
			НоваяЗапись.Пользователь				= ТекущийПользователь; 
			НоваяЗапись.ПодписьИсходящегоПисьма		= СтрокаТаблицыНастроек.ПодписьИсходящегоПисьма; 
			НоваяЗапись.ПодписьПересылаемогоПисьма	= СтрокаТаблицыНастроек.ПодписьПересылаемогоПисьма;
		КонецЕсли;	
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры 

&НаСервере
// Процедура добавляет записи в регистр настроек пользователей.
//
// Параметры:
//	НастройкиЭлементы	- КоллекцияСтрокДереваЗначений	- Строки настроек.
//
Процедура ДобавитьПодчиненныеНастройки(НастройкиЭлементы)
	Для Каждого СтрокаНастроек Из НастройкиЭлементы Цикл
		Если СтрокаНастроек.ЭтоГруппа Тогда
			ДобавитьПодчиненныеНастройки(СтрокаНастроек.ПолучитьЭлементы());
		Иначе	
			ЗаписьРегистра = РегистрыСведений.CRM_НастройкиПользователей.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Пользователь	= ТекущийПользователь;
			// +GOOGLE
			Если ПолучитьФункциональнуюОпцию("CRM_СинхронизироватьКалендарьСКалендаремGoogle") Тогда
				Если СтрокаНастроек.Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.КалендарьGoogleПредставление Тогда
					ИдКанала = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("IDКаналаGApi");
					Если ЗначениеЗаполнено(СтрокаНастроек.Значение) И CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("КалендарьGoogleПредставление") <> СтрокаНастроек.Настройка.ТипЗначения.ПривестиЗначение(СтрокаНастроек.Значение) 
						ИЛИ Не ЗначениеЗаполнено(ИдКанала)  Тогда  
				    		НастроитьКаналСинхронизацииGApi = Истина;
							ЗаполнитьGoogleКалендарь(СтрокаНастроек.Значение);
					КонецЕсли;
				ИначеЕсли СтрокаНастроек.Настройка = ПланыВидовХарактеристик.CRM_НастройкиПользователей.СинхронизироватьКалендарьGoogle Тогда
					Если НЕ СтрокаНастроек.Значение  Тогда  
						CRM_GoogleИнтеграция.ОтключитьКаналСинхронизации();
						СинхронизизацияКалендаряСGoogleОтключена = Истина;
					Иначе
						ТокенДоступа = ПолучитьТокенДоступаGoogleApiНаСервере();
						Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
							СтрокаНастроек.Значение = Ложь;	
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// -GOOGLE
			ЗаписьРегистра.Настройка	= СтрокаНастроек.Настройка;
			ЗаписьРегистра.Значение	= СтрокаНастроек.Настройка.ТипЗначения.ПривестиЗначение(СтрокаНастроек.Значение);
			ЗаписьРегистра.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	

&НаСервере
// Процедура выполняет запись значений настроек в регистр сведений.
//
Процедура ОбновитьНастройки()

	ДобавитьПодчиненныеНастройки(ДеревоНастроек.ПолучитьЭлементы());

	// +GOOGLE
	Если НастроитьКаналСинхронизацииGApi И НЕ СинхронизизацияКалендаряСGoogleОтключена Тогда
		 CRM_GoogleИнтеграция.НастроитьКаналСинхронизации();
	КонецЕсли;
	// -GOOGLE
КонецПроцедуры // ОбновитьНастройки()

&НаСервере
//
//
Функция ОбновитьНастройкиОповещений()
	
	РезультатОбновленияНастроекОповещений = Новый Структура;
	
	НаборЗаписей = РегистрыСведений.CRM_ОповещенияПользовательскиеНастройки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НастройкиГруппы = ДеревоНастроекОповещений.ПолучитьЭлементы();
	
	Для Каждого ГруппаНастроек Из НастройкиГруппы Цикл
		
		НастройкиЭлементы = ГруппаНастроек.ПолучитьЭлементы();
		
		Для Каждого СтрокаНастроек Из НастройкиЭлементы Цикл
			
			Запись = НаборЗаписей.Добавить();
			
			Запись.Пользователь		= ТекущийПользователь;
			Запись.ВидОповещения	= СтрокаНастроек.ВидОповещения;
			Запись.СрокОповещения	= СтрокаНастроек.СрокОповещения;
			Запись.Периодичность	= СтрокаНастроек.Периодичность;
			Запись.Напоминание		= СтрокаНастроек.Напоминание;
			Запись.СМС				= СтрокаНастроек.SMS;
			Запись.ЭлектроннаяПочта	= СтрокаНастроек.Email;
			Если СтрокаНастроек.ВидОповещения = Справочники.CRM_ВидыОповещений.КоммерческоеПредложениеСумма
			ИЛИ СтрокаНастроек.ВидОповещения = Справочники.CRM_ВидыОповещений.СчетСумма Тогда
				Запись.Сумма = СтрокаНастроек.Отбор;
				
			ИначеЕсли СтрокаНастроек.ВидОповещения = Справочники.CRM_ВидыОповещений.ОповещатьОНовыхВходящихПисьмах Тогда
				
				ПодключитьОбработчик = Ложь;
				
				Если (СтрокаНастроек.Напоминание <> ОповещенияОВходящихПисьмахНапоминание)  Тогда
					
					Если ОповещенияОВходящихПисьмахНапоминание Тогда
						
						РезультатОбновленияНастроекОповещений.Вставить("ОтключитьОбработчикОповещенияОВходящихПисьмах", Истина);
						
					Иначе	
					
						РезультатОбновленияНастроекОповещений.Вставить("ПодключитьОбработчикОповещенияОВходящихПисьмах", Истина);
						
					КонецЕсли;
					
				ИначеЕсли СтрокаНастроек.СрокОповещения <> ОповещенияОВходящихПисьмахСрокОповещения
					  ИЛИ СтрокаНастроек.Периодичность <> ОповещенияОВходящихПисьмахПериодичность Тогда
					
					РезультатОбновленияНастроекОповещений.Вставить("ПодключитьОбработчикОповещенияОВходящихПисьмах", Истина);
				
				КонецЕсли;
				
			Иначе
				Если ЭтоАдресВременногоХранилища(СтрокаНастроек.АдресВоВременномХранилище) Тогда
					Запись.Хранилище = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаНастроек.АдресВоВременномХранилище), Новый СжатиеДанных(9));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	НаборЗаписей.Записать();
	
	Возврат РезультатОбновленияНастроекОповещений;
	
КонецФункции // ОбновитьНастройкиОповещений()

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	Элементы.Оповещения.Видимость = (ИспользоватьНапоминания ИЛИ ИспользоватьОповещенияСМС ИЛИ ИспользоватьОповещенияЭлектроннаяПочта);
	
	Элементы.Напоминание.Видимость	= ИспользоватьНапоминания;
	Элементы.SMS.Видимость			= ИспользоватьОповещенияСМС;
	Элементы.Email.Видимость		= ИспользоватьОповещенияЭлектроннаяПочта;
	
КонецПроцедуры

&НаСервере
Процедура ПереформироватьОповещенияОДР()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновнойМенеджер",ТекущийПользователь);
	Запрос.Текст = "ВЫБРАТЬ
	|	Партнеры.Ссылка
	|ПОМЕСТИТЬ Партнеры
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.ОсновнойМенеджер = &ОсновнойМенеджер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактныеЛицаПартнеров.Владелец.Ссылка
	|ПОМЕСТИТЬ ПартнерыПоКЛ
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец.ОсновнойМенеджер = &ОсновнойМенеджер
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтактныеЛицаПартнеров.Владелец.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка
	|ИЗ
	|	Партнеры КАК Партнеры
	|
	|СГРУППИРОВАТЬ ПО
	|	Партнеры.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПартнерыПоКЛ.ВладелецСсылка
	|ИЗ
	|	ПартнерыПоКЛ КАК ПартнерыПоКЛ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		CRM_ОповещенияСервер.СформироватьУдалитьНапоминанияОДняхРождения(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляОтправки(УчетнаяЗапись)
	Возврат УчетнаяЗапись.ИспользоватьДляОтправки;
КонецФункции

// Вынесенная процедура сохранения изменений формы настроек.
//
&НаКлиенте
Процедура ВыполнитьСохранениеНастроекПередЗакрытием()
	
	МассивСтруктур = Новый Массив;
	
	// работа с файлами
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиОткрытияФайлов");
	Элемент.Вставить("Настройка", "ДействиеПоДвойномуЩелчкуМыши");
	Элемент.Вставить("Значение", ДействиеПоДвойномуЩелчкуМыши);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиОткрытияФайлов");
	Элемент.Вставить("Настройка", "СпрашиватьРежимРедактированияПриОткрытииФайла");
	Элемент.Вставить("Значение", СпрашиватьРежимРедактированияПриОткрытииФайла);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиПрограммы");
	Элемент.Вставить("Настройка", "ПоказыватьПодсказкиПриРедактированииФайлов");
	Элемент.Вставить("Значение", ПоказыватьПодсказкиПриРедактированииФайлов);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиПрограммы");
	Элемент.Вставить("Настройка", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы");
	Элемент.Вставить("Значение", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиСравненияФайлов");
	Элемент.Вставить("Настройка", "СпособСравненияВерсийФайлов");
	Элемент.Вставить("Значение", СпособСравненияВерсийФайлов);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиПрограммы");
	Элемент.Вставить("Настройка", "ПоказыватьКолонкуРазмер");
	Элемент.Вставить("Значение", ПоказыватьКолонкуРазмер);
	МассивСтруктур.Добавить(Элемент);
	
	// БазоваяФункциональность
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ОбщиеНастройкиПользователя");
	Элемент.Вставить("Настройка", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");
	Элемент.Вставить("Значение", ЗапрашиватьПодтверждениеПриЗавершенииПрограммы);
	
	МассивСтруктур.Добавить(Элемент);
	// Конец БазоваяФункциональность
	
	// Основная учетная запись
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ОсновнаяУчетнаяЗапись");
	Элемент.Вставить("Настройка", "ОсновнаяУчетнаяЗапись");
	Элемент.Вставить("Значение", ОсновнаяУчетнаяЗапись);
	МассивСтруктур.Добавить(Элемент);
	
	ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	
	ОбновитьНастройки();
	
	РезультатыОбновленияНастроекОповещений = ОбновитьНастройкиОповещений();
	
	ОбновитьПодписиУчетныхЗаписей();
	
	Модифицированность = Ложь;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	// Если были изменены настройки оповещений о ДР, то надо переформировать.
	Если КорректироватьНапоминания Тогда
		
		ПереформироватьОповещенияОДР();
		
		КорректироватьНапоминания = Ложь;
	КонецЕсли;
	
	// +СофтФон
	Если сфпПереподключитьСофтФон Тогда
		Если НЕ сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
			сфпСофтФонПроКлиент.сфпОтключитьСофтФон();
		ИначеЕсли НЕ сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда
			сфпСофтФонПроКлиент.сфпОтключитьСофтФон();
		Иначе	
			Оповестить("СофтФон_ЗакрытьВнутреннююПанель");
			сфпСофтФонПроКлиент.сфпПодключитьСофтФон();
		КонецЕсли;	
	КонецЕсли;
	ПараметрыПриложения["сфпЗакрыватьПанельПриЗавершенииРаботы"]
		= сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпЗакрыватьПанельПриЗавершенииРаботы");
	// -СофтФон
	
	// +Лицензирование
	Если ТекущийПользователь = ПользователиКлиентСервер.АвторизованныйПользователь() Тогда
		
		НастройкаИспользоватьCRM = ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), Истина, CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьCRM"));
		ТекВариантПоставкиПользователя = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользуемыйВариантПоставки");
		
		ЛицензиюОсвободили = Ложь;
		Если ИспользуемыйВариантПоставкиПредыдущий <> ТекВариантПоставкиПользователя Тогда
			CRM_ЛицензированиеСервер.ОсвободитьТекущуюЛицензию();
			ЛицензиюОсвободили = Истина;
		КонецЕсли;
		
		Если ИспользоватьCRMПредыдущий <> НастройкаИспользоватьCRM Тогда
			CRM_ЛицензированиеСервер.УстановитьИспользованиеCRM(НастройкаИспользоватьCRM);
			Если НЕ НастройкаИспользоватьCRM И НЕ ЛицензиюОсвободили Тогда
				CRM_ЛицензированиеСервер.ОсвободитьТекущуюЛицензию();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// -Лицензирование
	
	Если РезультатыОбновленияНастроекОповещений.Свойство("ОтключитьОбработчикОповещенияОВходящихПисьмах") Тогда
		
		CRM_НапоминанияКлиент.ОтключитьОбработчикОповещенияВходящиеПисьма();
		
	ИначеЕсли РезультатыОбновленияНастроекОповещений.Свойство("ПодключитьОбработчикОповещенияОВходящихПисьмах") Тогда
		
		CRM_НапоминанияКлиент.ПодключитьОбработчикОповещенияВходящиеПисьма();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура снимает оформление изменённых ячеек на закладке "Настройки".
//
&НаСервере
Процедура СнятьВыделениеЦветомИШрифтомСЯчеек()
	КоличествоЭлементов = УсловноеОформление.Элементы.Количество();
	Сч = 0;
	Пока Сч <= КоличествоЭлементов - 1 Цикл
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Получить(Сч);
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "CRM" Тогда
			УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
			КоличествоЭлементов = КоличествоЭлементов - 1;
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Установка условного оформления изменённой настройки (цвет и шрифт).
//
//  Параметры 
//   ИмяНастройки - ПланВидовХарактеристик.CRM_НастройкиПользователей - Ссылка на настройку.
//
&НаСервере
Процедура УстановитьУсловноеОформлениеПоля(ИмяНастройки);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных					= ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных("ДеревоНастроек.Настройка");
	ЭлементОтбораДанных.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.Использование	= Истина;
	ЭлементОтбораДанных.ПравоеЗначение	= ИмяНастройки;
	
	ПолеОформления					= ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование	= Истина;
	ПолеОформления.Поле				= Новый ПолеКомпоновкиДанных("ДеревоНастроекЗначение");
	
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "CRM";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста",	Новый Цвет(0,170,0));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", 		Новый Шрифт(,,Истина));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик выбора активного действия.
//
// Параметры:
//	ВыбранныйЭлемент		- ЭлементСпискаЗначений	- Выбранное действие.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура сфпОбработкаВыбораАктивногоДействия(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда Возврат; КонецЕсли;
	ТД = Элементы.ДеревоНастроек.ТекущиеДанные;
	ТД.Значение = ВыбранныйЭлемент.Значение;
	УстановитьУсловноеОформлениеПоля(ТД.Настройка);
	Модифицированность = Истина;
КонецПроцедуры // СфпОбработкаВыбораАктивногоДействия().

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// работа с пользователями
	Если Параметры.Свойство("Пользователь") Тогда
		ТекущийПользователь = Параметры.Пользователь;
		Если ТекущийПользователь <> Пользователи.ТекущийПользователь() Тогда
			Элементы.НастройкаРабочегоКаталога.Видимость = Ложь;
			Элементы.НастройкаРабочегоКаталога.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли; 
	
	ИмяПользователяИБ = Неопределено;
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийПользователь.ИдентификаторПользователяИБ);
	Если ПользовательИБ <> Неопределено Тогда
		ИмяПользователяИБ = ПользовательИБ.Имя;
	КонецЕсли;
	
	Если ТекущийПользователь <> Пользователи.ТекущийПользователь() И ИмяПользователяИБ = Неопределено Тогда
		// Если пользователю не сопоставлен пользователь ИБ, то эти настройки только для текущего и отображать их нет смысла.
		Элементы.РаботаСФайлами.Доступность				= Ложь;
		Элементы.РаботаСФайлами.Видимость				= Ложь;
		Элементы.Прочие.Доступность						= Ложь;
		Элементы.Прочие.Видимость						= Ложь;
		Элементы.ОсновнаяУчетнаяЗапись.ТолькоПросмотр	= Истина;
		Элементы.ОсновнаяУчетнаяЗапись.Видимость		= Ложь;
	КонецЕсли;
	
	// БазоваяФункциональность
	ЗапрашиватьПодтверждениеПриЗавершенииПрограммы = ХранилищеОбщихНастроек.Загрузить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",, ИмяПользователяИБ);
	Если ЗапрашиватьПодтверждениеПриЗавершенииПрограммы = Неопределено Тогда
		ЗапрашиватьПодтверждениеПриЗавершенииПрограммы = Истина;
		ХранилищеОбщихНастроек.Сохранить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", ЗапрашиватьПодтверждениеПриЗавершенииПрограммы,, ИмяПользователяИБ);
	КонецЕсли;
	// Конец БазоваяФункциональность 
	
	// работа с файлами
	СпрашиватьРежимРедактированияПриОткрытииФайла = 
		ХранилищеОбщихНастроек.Загрузить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла",, ИмяПользователяИБ);
	Если СпрашиватьРежимРедактированияПриОткрытииФайла = Неопределено Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайла = Истина;
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла,, ИмяПользователяИБ);
	КонецЕсли;
	
	ДействиеПоДвойномуЩелчкуМыши = ХранилищеОбщихНастроек.Загрузить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши",, ИмяПользователяИБ);
	Если ДействиеПоДвойномуЩелчкуМыши = Неопределено Тогда
		ДействиеПоДвойномуЩелчкуМыши = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл;
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", ДействиеПоДвойномуЩелчкуМыши,, ИмяПользователяИБ);
	КонецЕсли;
	
	СпособСравненияВерсийФайлов = ХранилищеОбщихНастроек.Загрузить("НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов",, ИмяПользователяИБ);
	ПоказыватьПодсказкиПриРедактированииФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов",,, ИмяПользователяИБ);
	
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы",,, ИмяПользователяИБ);
	Если ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Неопределено Тогда 
		ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Истина;
		ХранилищеОбщихНастроек.Сохранить("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы,, ИмяПользователяИБ);
	КонецЕсли;
	
	ПоказыватьКолонкуРазмер = ХранилищеОбщихНастроек.Загрузить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер",, ИмяПользователяИБ);
	Если ПоказыватьКолонкуРазмер = Неопределено Тогда
		ПоказыватьКолонкуРазмер = Ложь;
		ХранилищеОбщихНастроек.Сохранить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер", ПоказыватьКолонкуРазмер,, ИмяПользователяИБ);
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоВебКлиент") Тогда 
		Если Не Параметры.ЭтоВебКлиент Тогда
			Элементы.УстановитьРасширениеРаботыСФайламиНаКлиенте.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Избранные получатели (Софтфон).
	СписокПолучателей.Параметры.Элементы[0].Значение = ТекущийПользователь;
	СписокПолучателей.Параметры.Элементы[0].Использование = Истина;
	
	// Цветовые категории личных задач.
	ЦветовыеКатегорииЗадач.Параметры.Элементы[0].Значение = ТекущийПользователь;
	ЦветовыеКатегорииЗадач.Параметры.Элементы[0].Использование = Истина;
	
	// Основная учетная запись
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПользовательИБ <> Неопределено И ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
	
		ОсновнаяУчетнаяЗапись = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись", "ОсновнаяУчетнаяЗапись",, ИмяПользователяИБ);
		Если ОсновнаяУчетнаяЗапись = Неопределено Тогда
			ОсновнаяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
		КонецЕсли;
		Если ЗначениеЗаполнено(ОсновнаяУчетнаяЗапись) Тогда
			 ОсновнаяУчетнаяЗаписьПредставление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ОсновнаяУчетнаяЗапись.ИмяПользователя, ОсновнаяУчетнаяЗапись.АдресЭлектроннойПочты,"");
		КонецЕсли;
	 
		// Заполнение списка выбора для выбора учётной записи
		CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(Элементы.ОсновнаяУчетнаяЗапись.СписокВыбора,,ТекущийПользователь);
	
	Иначе
		Элементы.ЭлектроннаяПочта.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// +СофтФон
	сфпМассивАвтоматическихДействий = сфпСофтФонПроСерверПереопределяемый.сфпПолучитьМассивДоступныхДействий();
	Для Каждого ЭлементМассива Из сфпМассивАвтоматическихДействий Цикл
		сфпСписокАвтоматическихДействий.Добавить(ЭлементМассива.Наименование);
	КонецЦикла;
	сфпПривязкаНомера = сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпПривязатьВнутреннийНомер");
	// -СофтФон
	// Настройки пользователей
	ЗаполнитьДерево();
	
	// Оповещения
	ИспользоватьНапоминания					= Константы.CRM_ИспользоватьНапоминания.Получить();
	ИспользоватьОповещенияСМС				= Константы.CRM_ИспользоватьОповещенияСМС.Получить();
	ИспользоватьОповещенияЭлектроннаяПочта	= Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить();
	
	ЗаполнитьДеревоНастроекОповещений();
	
	ЗаполнитьТаблицуУчетныхЗаписей();
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Персональные настройки пользователя %1'"),
					Строка(ТекущийПользователь));
	
	УстановитьСвойстваЭлементовФормы();
	
	ИспользоватьГруппыПользователей = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	
	СпрашиватьПроИзмененныеДанные = Истина;
	
	// +GOOGLE
	ПолучитьСписокКалендарей();
	// -GOOGLE
	
	Если Параметры.Свойство("ТекущаяСтраница") Тогда
		Элементы.Группа.ТекущаяСтраница = Элементы[Параметры.ТекущаяСтраница];
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Если ЗавершениеРаботы Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru='При завершении работы в форме ""'") + Заголовок + НСтр("ru='"" все изменения будут утеряны.'");
			Возврат;
		КонецЕсли;
		Если СпрашиватьПроИзмененныеДанные Тогда
			Отказ = Истина;
			ОбратныйВызов = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОбратныйВызов, НСтр("ru = 'Настройки были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ВыполнитьСохранениеНастроекПередЗакрытием();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик ответа на вопрос перед закрытием формы.
//
// Параметры:
//	Результат				- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьСохранениеНастроекПередЗакрытием();
    КонецЕсли;
	Модифицированность	= Ложь;
	Закрыть();
КонецПроцедуры // ПередЗакрытиемЗавершение()

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоНастроекПередНачаломИзменения(Элемент, Отказ)
	
	Если (Элемент.ТекущиеДанные = Неопределено)
		 ИЛИ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ОпределитьДоступностьНастройки(Элемент.ТекущиеДанные.Настройка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	// +СофтФон
	Если Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпИспользоватьСофтФон") Тогда
		Если ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь() Тогда
			сфпПереподключитьСофтФон = Истина;
		КонецЕсли;
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпИспользоватьВнутреннююПанель") Тогда
		Если ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь() Тогда
			сфпПереподключитьСофтФон = Истина;
		КонецЕсли;
	КонецЕсли;
	Если Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпТекущийВнутреннийНомер") Тогда
		Если ТекущийПользователь = сфпСофтФонПроСервер.сфпТекущийПользователь() И Не сфпПривязкаНомера Тогда
			Отказ = Истина;
		ИначеЕсли НЕ сфпСофтФонПроСервер.сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") И Не сфпПривязкаНомера Тогда
			Отказ = Истина;
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ДеревоНастроекЗначение" Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТекущийНомер", Элемент.ТекущиеДанные.Значение);
			ОткрытьФорму("ОбщаяФорма.сфпСписокВнутреннихНомеров", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриВходящемЗвонке") Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ДеревоНастроекЗначение" Тогда
			ВыбранныйЭлемент		= сфпСписокАвтоматическихДействий.НайтиПоЗначению(Элемент.ТекущиеДанные.Значение);
			ДополнительныеПараметры	= Новый Структура;
			ОповещениеВыбора		= Новый ОписаниеОповещения("сфпОбработкаВыбораАктивногоДействия", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВыборИзСписка(ОповещениеВыбора, сфпСписокАвтоматическихДействий, Элементы.ДеревоНастроекЗначение, ВыбранныйЭлемент);
		КонецЕсли;
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпДействиеПриИсходящемЗвонке") Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ДеревоНастроекЗначение" Тогда
			ВыбранныйЭлемент		= сфпСписокАвтоматическихДействий.НайтиПоЗначению(Элемент.ТекущиеДанные.Значение);
			ДополнительныеПараметры	= Новый Структура;
			ОповещениеВыбора		= Новый ОписаниеОповещения("сфпОбработкаВыбораАктивногоДействия", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВыборИзСписка(ОповещениеВыбора, сфпСписокАвтоматическихДействий, Элементы.ДеревоНастроекЗначение, ВыбранныйЭлемент);
		КонецЕсли;
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпЛогинНаСерверСофтФон") Тогда
		Если НЕ сфпПривязкаНомера Тогда
			Отказ = Истина;
		КонецЕсли;
		сфпПереподключитьСофтФон = Истина;
	ИначеЕсли Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпПарольНаСерверСофтФон") Тогда
		Если НЕ сфпПривязкаНомера Тогда
			Отказ = Истина;
		КонецЕсли;
		сфпПереподключитьСофтФон = Истина;
	КонецЕсли;
	// -СофтФон
	Если Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.ВремяНачалаРабочегоДня")
		ИЛИ	Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.ВремяОкончанияРабочегоДня")
		ИЛИ	Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.ВремяНачалаОбеденногоПерерыва")
		ИЛИ	Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.ВремяОкончанияОбеденногоПерерыва") Тогда
		Элементы.ДеревоНастроекЗначение.ФорматРедактирования = "ДФ=HH:mm; ДП=00:00";
	Иначе
		Элементы.ДеревоНастроекЗначение.ФорматРедактирования = "";
	КонецЕсли;
	
	// Настройки типа "Булево" меняем без входа в режим редактирования.
	Если ТипЗнч(Элемент.ТекущиеДанные.Значение) = Тип("Булево") Тогда
		Элемент.ТекущиеДанные.Значение = НЕ Элемент.ТекущиеДанные.Значение;
		УстановитьУсловноеОформлениеПоля(Элемент.ТекущиеДанные.Настройка);
		Модифицированность = Истина;
		Отказ = Истина;
		ДеревоНастроекПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Владелец", ТекущийПользователь));
	ОткрытьФорму("Справочник.CRM_Подписи.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКанала(Элемент)
	
	ТекДанные = Элементы.ДеревоНастроекОповещений.ТекущиеДанные;
	Корень = ТекДанные.ПолучитьРодителя();
	
	ЗапланированноеСобытие = Ложь;
	Если НЕ Корень = Неопределено И Корень.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия") Тогда
		ЗапланированноеСобытие = Истина;
	КонецЕсли;

	Если Элемент.Имя = "SMS" Тогда
		ТекДанные.SMS			= ТекДанные.SMS;
		Если ТекДанные[Элемент.Имя] И ЗапланированноеСобытие Тогда
			ТекДанные.Email			= Ложь;
			ТекДанные.Напоминание	= Ложь;
		КонецЕсли;
	ИначеЕсли Элемент.Имя = "Email" Тогда
		ТекДанные.Email			= ТекДанные.Email;
		Если ТекДанные[Элемент.Имя] И ЗапланированноеСобытие Тогда
			ТекДанные.SMS			= Ложь;
			ТекДанные.Напоминание	= Ложь;
		КонецЕсли;
	ИначеЕсли Элемент.Имя = "Напоминание" Тогда
		ТекДанные.Напоминание	= ТекДанные.Напоминание;
		Если ТекДанные[Элемент.Имя] И ЗапланированноеСобытие Тогда
			ТекДанные.SMS			= Ложь;
			ТекДанные.Email			= Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ДеревоНастроекОповещений.ТекущиеДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ОповещенияОДняхРождения") Тогда
		КорректироватьНапоминания = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.ДеревоНастроекОповещений.ТекущиеДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ОповещенияОДняхРождения") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокДоступных = Новый СписокЗначений;
		СписокДоступных.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ПериодичностьОповещений.День"));
		СписокДоступных.Добавить(ПредопределенноеЗначение("Перечисление.CRM_ПериодичностьОповещений.Неделя"));
		
		ДанныеВыбора = СписокДоступных;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	Если Элементы.ДеревоНастроекОповещений.ТекущиеДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ОповещенияОДняхРождения") Тогда
		КорректироватьНапоминания = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОповещенияПриИзменении(Элемент)
	
	Если Элементы.ДеревоНастроекОповещений.ТекущиеДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ОповещенияОДняхРождения") Тогда
		КорректироватьНапоминания = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекОповещенийОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДеревоНастроекОповещений.ТекущиеДанные;
		
	Если НЕ ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.КоммерческоеПредложениеСумма")
	И НЕ ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.СчетСумма") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ДействияПоПроектам") Тогда
			ПараметрыСтруктура = Новый Структура();
			ПараметрыСтруктура.Вставить("ТекстЗапроса", "ВЫБРАТЬ РАЗРЕШЕННЫЕ Проекты.Ссылка КАК Проект ИЗ Справочник.Проекты КАК Проекты");
			ПараметрыСтруктура.Вставить("Заголовок", НСтр("ru = 'Настройка отбора по проектам'"));
			Если ЭтоАдресВременногоХранилища(ТекДанные.АдресВоВременномХранилище) Тогда
				ПараметрыСтруктура.Вставить("ОтборКомпоновкиДанных", ПолучитьИзВременногоХранилища(ТекДанные.АдресВоВременномХранилище));
			КонецЕсли;
		ИначеЕсли ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ДействияПоПартнерам") Тогда
			ПараметрыСтруктура = Новый Структура();
			ПараметрыСтруктура.Вставить("ТекстЗапроса", "ВЫБРАТЬ Партнеры.Ссылка КАК Клиент ИЗ Справочник.Партнеры КАК Партнеры");
			ПараметрыСтруктура.Вставить("Заголовок", НСтр("ru = 'Настройка отбора по клиентам'"));
			Если ЭтоАдресВременногоХранилища(ТекДанные.АдресВоВременномХранилище) Тогда
				ПараметрыСтруктура.Вставить("ОтборКомпоновкиДанных", ПолучитьИзВременногоХранилища(ТекДанные.АдресВоВременномХранилище));
			КонецЕсли;
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоНастроекОповещенийОтборНачалоВыбораЗавершение", ЭтотОбъект, ТекДанные);
		ОткрытьФорму("ОбщаяФорма.CRM_ОтборКомпоновкиДанных", ПараметрыСтруктура, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекОповещенийОтборНачалоВыбораЗавершение(НастроенныйОтбор, ТекДанные) Экспорт
	
	Если НастроенныйОтбор <> Неопределено Тогда
		Если ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ДействияПоПроектам") Тогда
			Если ЭтоАдресВременногоХранилища(ТекДанные.АдресВоВременномХранилище) Тогда
				Попытка УдалитьИзВременногоХранилища(ТекДанные.АдресВоВременномХранилище);
				Исключение КонецПопытки;
			КонецЕсли;
			
			Если НастроенныйОтбор.Элементы.Количество() = 0 Тогда
				ТекДанные.АдресВоВременномХранилище = "";
				ТекДанные.Отбор = "";
			Иначе
				ТекДанные.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(НастроенныйОтбор, УникальныйИдентификатор);
				ТекДанные.Отбор = Строка(НастроенныйОтбор);
			КонецЕсли;
			Модифицированность = Истина;
		ИначеЕсли ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ДействияПоПартнерам") Тогда
			Если ЭтоАдресВременногоХранилища(ТекДанные.АдресВоВременномХранилище) Тогда
				Попытка УдалитьИзВременногоХранилища(ТекДанные.АдресВоВременномХранилище);
				Исключение КонецПопытки;
			КонецЕсли;
			
			Если НастроенныйОтбор.Элементы.Количество() = 0 Тогда
				ТекДанные.АдресВоВременномХранилище = "";
				ТекДанные.Отбор = "";
			Иначе
				ТекДанные.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(НастроенныйОтбор, УникальныйИдентификатор);
				ТекДанные.Отбор = Строка(НастроенныйОтбор);
			КонецЕсли;
			Модифицированность = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекОповещенийОтборОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ДеревоНастроекОповещений.ТекущиеДанные;
	Если НЕ ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.КоммерческоеПредложениеСумма")
	И НЕ ТекДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.СчетСумма") Тогда
		Если ЭтоАдресВременногоХранилища(ТекДанные.АдресВоВременномХранилище) Тогда
			Попытка УдалитьИзВременногоХранилища(ТекДанные.АдресВоВременномХранилище);
			Исключение КонецПопытки;
		КонецЕсли;
		ТекДанные.АдресВоВременномХранилище = "";
		ТекДанные.Отбор = "";
	Иначе
		ТекДанные.Отбор = 0;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекОповещенийОтборОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ДействияКоманд

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Команда.Имя = "ЗаписатьИЗакрыть" Тогда
		СпрашиватьПроИзмененныеДанные = Ложь;
		Закрыть();
	ИначеЕсли Команда.Имя = "Закрыть" Тогда
		СпрашиватьПроИзмененныеДанные = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ВыполнитьСохранениеНастроекПередЗакрытием();
	СнятьВыделениеЦветомИШрифтомСЯчеек();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРабочегоКаталога(Команда)
	ПараметрыФормы = Новый Структура("Пользователь", ТекущийПользователь);
	ОткрытьФорму("ОбщаяФорма.НастройкаОсновногоРабочегоКаталога", ПараметрыФормы,,,,,,);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРаботыСПочтой(Команда)
	ОткрытьФорму("Обработка.CRM_МенеджерПочты.Форма.НастройкиРаботыСПочтой", , ЭтотОбъект);
КонецПроцедуры


&НаКлиенте
Процедура ОтменаИзменений(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширениеРаботыСФайламиНаКлиенте(Команда)
	НачатьУстановкуРасширенияРаботыСФайлами();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяУчетнаяЗаписьОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ОсновнаяУчетнаяЗапись) Тогда
		ПоказатьЗначение(,ОсновнаяУчетнаяЗапись);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяУчетнаяЗаписьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляОтправки(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'В данной учётной записи отключена отправка писем!'"));
		СтандартнаяОбработка = Ложь;				
		Возврат;
	КонецЕсли;
	
	ОсновнаяУчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЭлементСписка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ОсновнаяУчетнаяЗаписьПредставление = ЭлементСписка.Представление;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяУчетнаяЗаписьОчистка(Элемент, СтандартнаяОбработка)
	
	ОсновнаяУчетнаяЗапись = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура CRM_КатегорииПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Копирование Тогда Возврат; КонецЕсли;
	Отказ = Истина;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Владелец", ТекущийПользователь));
	ФормаЗаписи = ПолучитьФорму("Справочник.CRM_КатегорииПользователей.ФормаОбъекта", ПараметрыФормы);
	ФормаЗаписи.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекОповещенийПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастроекОповещений.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Если ТекущиеДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.КоммерческоеПредложениеСумма")
		ИЛИ ТекущиеДанные.ВидОповещения = ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.СчетСумма") Тогда
			Элементы.ДеревоНастроекОповещенийОтбор.РедактированиеТекста = Истина;
		Иначе
			Элементы.ДеревоНастроекОповещенийОтбор.РедактированиеТекста = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция добавляет получателя.
//
// Параметры:
//	ПараметрПользователь	- СправочникСсылка	- Текущий пользователь.
//	Получатель				- СправочникСсылка	- Новый получатель.
//	ЭтоГруппа				- Булево			- Признак добавления группы.
//
Функция ДобавитьПолучателя(ПараметрПользователь, Получатель, ЭтоГруппа)
	Если ПараметрПользователь = Получатель Тогда Возврат Ложь; КонецЕсли;
	Если ЭтоГруппа Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь",	ПараметрПользователь);
		Если Получатель = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	Пользователи.Ссылка КАК Получатель
			               |ИЗ
			               |	Справочник.Пользователи КАК Пользователи
			               |ГДЕ
			               |	НЕ Пользователи.Ссылка = &Пользователь
			               |	И НЕ Пользователи.ПометкаУдаления";
		Иначе	
			СписокГрупп = Новый СписокЗначений;
			СписокГрупп.Добавить(Получатель);
			Запрос.УстановитьПараметр("СписокГрупп",	СписокГрупп);
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ГруппыПользователейСостав.Пользователь КАК Получатель
			               |ИЗ
			               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			               |ГДЕ
			               |	ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ(&СписокГрупп)";
		КонецЕсли;	
		Выборка = Запрос.Выполнить().Выбрать();
		ЗаписьДобавлена = Ложь;
		Пока Выборка.Следующий() Цикл
			Если ДобавитьПолучателя(ПараметрПользователь, Выборка.Получатель, Ложь) Тогда
				ЗаписьДобавлена = Истина;
			КонецЕсли;	
		КонецЦикла;
	Иначе	
		НоваяЗапись = РегистрыСведений.CRM_ИзбранныеПолучатели.СоздатьМенеджерЗаписи();
		НоваяЗапись.Пользователь	= ПараметрПользователь;
		НоваяЗапись.Получатель		= Получатель;
		Попытка
			НоваяЗапись.Записать(Истина);
			ЗаписьДобавлена = Истина;
		Исключение
			ЗаписьДобавлена = Ложь;
		КонецПопытки;
	КонецЕсли;	
	Возврат ЗаписьДобавлена;
КонецФункции

&НаСервереБезКонтекста
// Процедура изменяет текущего получателя.
//
// Параметры:
//	ПараметрПользователь	- СправочникСсылка	- Текущий пользователь.
//	НовыйПолучатель			- СправочникСсылка	- Новый получатель.
//	СтарыйПолучатель		- СправочникСсылка	- Старый получатель.
//
Процедура ИзменитьПолучателя(ПараметрПользователь, НовыйПолучатель, СтарыйПолучатель)
	Если ПараметрПользователь = НовыйПолучатель Тогда Возврат; КонецЕсли;
	НоваяЗапись = РегистрыСведений.CRM_ИзбранныеПолучатели.СоздатьМенеджерЗаписи();
	НоваяЗапись.Пользователь	= ПараметрПользователь;
	НоваяЗапись.Получатель		= НовыйПолучатель;
	НоваяЗапись.Прочитать();
	Если НоваяЗапись.Выбран() Тогда Возврат; КонецЕсли;
	НоваяЗапись = РегистрыСведений.CRM_ИзбранныеПолучатели.СоздатьМенеджерЗаписи();
	НоваяЗапись.Пользователь	= ПараметрПользователь;
	НоваяЗапись.Получатель		= СтарыйПолучатель;
	НоваяЗапись.Прочитать();
	НоваяЗапись.Пользователь	= ПараметрПользователь;
	НоваяЗапись.Получатель		= НовыйПолучатель;
	Попытка
		НоваяЗапись.Записать(Истина);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
// Процедура позиционируется в списке получателей на указанного получателя.
//
// Параметры:
//	ПараметрПользователь	- СправочникСсылка	- Текущий пользователь.
//	Получатель				- СправочникСсылка	- Текущий получатель.
//
Процедура УстановитьТекущуюЗапись(ПараметрПользователь, Получатель)
	Элементы.СписокПолучателей.Обновить();
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Пользователь", ПараметрПользователь);
	СтруктураОтбора.Вставить("Получатель",  Получатель);
	КлючЗаписи = РегистрыСведений.CRM_ИзбранныеПолучатели.СоздатьКлючЗаписи(СтруктураОтбора);
	Элементы.СписокПолучателей.ТекущаяСтрока = КлючЗаписи;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик выбора пользователя.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Выбранный пользователь.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПользователя(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	ТД = ДополнительныеПараметры.ТекущиеДанные;
	ИзменитьПолучателя(ТекущийПользователь, РезультатЗакрытия, ТД.Получатель);
	УстановитьТекущуюЗапись(ТекущийПользователь, РезультатЗакрытия);
КонецПроцедуры // ОбработкаВыбораПользователя()

&НаКлиенте
// Процедура - обработчик выбора типа пользователя.
//
// Параметры:
//	ВыбранныйЭлемент		- ЭлементСпискаЗначений	- Выбранный тип пользователя.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораТипаПользователя(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда Возврат; КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",	Ложь);
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов",	ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	НЕ ДополнительныеПараметры.РежимПодбора);
	Если НЕ ДополнительныеПараметры.ИспользоватьГруппыПользователей Тогда
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", "СписокПолучателей");
	КонецЕсли;
	Если ВыбранныйЭлемент.Значение Тогда
		ОткрытьФорму("Справочник.ГруппыПользователей.ФормаВыбора", ПараметрыФормы, Элементы.СписокПолучателей, , ВариантОткрытияОкна.ОтдельноеОкно);
	Иначе
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ?(ДополнительныеПараметры.ИспользоватьГруппыПользователей, Элементы.СписокПолучателей, ЭтотОбъект), , ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;	
КонецПроцедуры // ОбработкаВыбораТипаПользователя()

&НаКлиенте
// Процеура выполняет выбор типа получателя из списка.
//
// Параметры:
//	РежимПодбора	- Булево	- Признак подбора получателя.
//
Процедура ВыбратьТипПолучателяИзСписка(РежимПодбора = Ложь)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимПодбора",					РежимПодбора);
	ДополнительныеПараметры.Вставить("ИспользоватьГруппыПользователей",	ИспользоватьГруппыПользователей);
	Если ИспользоватьГруппыПользователей Тогда
		СписокВыбораТипа = Новый СписокЗначений;
		СписокВыбораТипа.Добавить(Истина,	"Группа пользователей");
		СписокВыбораТипа.Добавить(Ложь,		"Пользователь");
		ОписаниеВыбораТипа = Новый ОписаниеОповещения("ОбработкаВыбораТипаПользователя", ЭтотОбъект, ДополнительныеПараметры);
		Если РежимПодбора Тогда
			ПоказатьВыборИзМеню(ОписаниеВыбораТипа, СписокВыбораТипа, Элементы.СписокПолучателейПодборИзбранныхПолучателей);
		Иначе
			ПоказатьВыборИзМеню(ОписаниеВыбораТипа, СписокВыбораТипа, Элементы.СписокПолучателейКнопкаСоздать);
		КонецЕсли;
	Иначе
		ОбработкаВыбораТипаПользователя(Новый Структура("Значение", Ложь), ДополнительныеПараметры); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура обработчик именения текущего получателя.
//
// Параметры:
//	Нет.
//
Процедура ИзменитьТекущегоПолучателя()
	ТД = Элементы.СписокПолучателей.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",			Ложь);
	ПараметрыФормы.Вставить("ТекущаяСтрока",		ТД.Получатель);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТД);
	ОписаниеВыбораПользователя = Новый ОписаниеОповещения("ОбработкаВыбораПользователя", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.СписокПолучателей, , , , ОписаниеВыбораПользователя);
КонецПроцедуры // ИзменитьТекущегоПолучателя()

&НаКлиенте
// Процедура - обработчик команды формы "ПодборИзбранныхПолучателей".
Процедура ПодборИзбранныхПолучателей(Команда)
	ВыбратьТипПолучателяИзСписка(Истина);
КонецПроцедуры // ПодборИзбранныхПолучателей()

&НаКлиенте
// Процедура - обработчик события "Выбор" элемента формы "СписокПолучателей".
//
Процедура СписокПолучателейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИзменитьТекущегоПолучателя();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" элемента формы "СписокПолучателей".
//
Процедура СписокПолучателейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ВыбратьТипПолучателяИзСписка(Ложь);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" элемента формы "СписокПолучателей".
//
Процедура СписокПолучателейПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ИзменитьТекущегоПолучателя();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "СписокПолучателей".
//
Процедура СписокПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	ИначеЕсли ИспользоватьГруппыПользователей Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
			Если ДобавитьПолучателя(ТекущийПользователь, ВыбранноеЗначение, Ложь) Тогда
				УстановитьТекущуюЗапись(ТекущийПользователь, ВыбранноеЗначение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			Если ДобавитьПолучателя(ТекущийПользователь, ВыбранноеЗначение, Истина) Тогда
				УстановитьТекущуюЗапись(ТекущийПользователь, ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		Если ДобавитьПолучателя(ТекущийПользователь, ВыбранноеЗначение, Ложь) Тогда
			УстановитьТекущуюЗапись(ТекущийПользователь, ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СведенияОПользователе(Команда)
	
	ПоказатьЗначение(,ТекущийПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПриИзменении(Элемент)
	
	// +GOOGLE
	Если Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.СинхронизироватьКалендарьGoogle") Тогда
		Если Элемент.ТекущиеДанные.Значение  Тогда
			Если ПолучитьФункциональнуюОпциюСИнхронизацияСКалендаремGoogle() Тогда
				ТокенДоступаGoogleApi = ПолучитьТокенДоступаGoogleApiНаСервере();
				Если НЕ ЗначениеЗаполнено(ТокенДоступаGoogleApi) Тогда
					ТекстВопроса = НСтр("ru = 'Для текущего пользователя в системе не зарегистрирован
					|доступ к календарю Google.
					|Получить доступ?'"); 
					
					ОписаниеОповещения = Новый ОписаниеОповещения("ВопросДоступККалендарюЗавершение", ЭтотОбъект, Элемент.ТекущиеДанные);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
				КонецЕсли;
			Иначе
				Элемент.ТекущиеДанные.Значение = Ложь;
				CRM_ОбщегоНазначенияКлиент.ОткрытьФормуОшибкиПодключения("Google");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// -GOOGLE
	
	// Установка оформления небулевой настройки.
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ ТекДанные.ЭтоГруппа И НЕ (ТипЗнч(ТекДанные.Значение) = Тип("Булево")) Тогда
		УстановитьУсловноеОформлениеПоля(ТекДанные.Настройка);
		Модифицированность = Истина;
	КонецЕсли;
	
	// +Софтфон
	Если Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпПривязатьВнутреннийНомер")Тогда
		сфпПривязкаНомера = Элемент.ТекущиеДанные.Значение;
		сфпПереподключитьСофтФон = Истина;
		ЭлементыДерева = ДеревоНастроек.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если ЭлементДерева.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпНастройкиСофтФон") Тогда
				ЭлементыДереваСофтфон = ЭлементДерева.ПолучитьЭлементы();
				Для Каждого ЭлементДереваСофтфон Из ЭлементыДереваСофтфон Цикл
					Если ЭлементДереваСофтфон.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.сфпАвторизацияНаСерверСофтфона") Тогда
						ЭлементДереваСофтфон.СкрыватьКолонку = НЕ сфпПривязкаНомера;
						ЭлементыДереваАвторизация = ЭлементДереваСофтфон.ПолучитьЭлементы();
						Для Каждого ЭлементДереваАвторизация Из ЭлементыДереваАвторизация Цикл
							ЭлементДереваАвторизация.СкрыватьКолонку = НЕ сфпПривязкаНомера;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// -Софтфон
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДоступККалендарюЗавершение(Ответ, ТекущиеДанные) экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый  Структура;
		ОткрытьФорму("ОбщаяФорма.CRM_ФормаПолученияТокенаGoogleCalendar",ПараметрыФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("СохранитьТокеныЗавершение",ЭтотОбъект));					
	Иначе
		ТекущиеДанные.Значение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТокеныЗавершение(Токен, ТекущиеДанные) экспорт
	
	CRM_GoogleИнтеграция.СохранитьТокены(Токен);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.Параметры.КлючНазначенияИспользования = "СписокПолучателей" Тогда
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		ИначеЕсли ИспользоватьГруппыПользователей Тогда
			Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
				Если ДобавитьПолучателя(ТекущийПользователь, ВыбранноеЗначение, Ложь) Тогда
					УстановитьТекущуюЗапись(ТекущийПользователь, ВыбранноеЗначение);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				Если ДобавитьПолучателя(ТекущийПользователь, ВыбранноеЗначение, Истина) Тогда
					УстановитьТекущуюЗапись(ТекущийПользователь, ВыбранноеЗначение);
				КонецЕсли;
			КонецЕсли;	
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
			Если ДобавитьПолучателя(ТекущийПользователь, ВыбранноеЗначение, Ложь) Тогда
				УстановитьТекущуюЗапись(ТекущийПользователь, ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// +GOOGLE
&НаСервере
Функция ПолучитьТокенДоступаGoogleApiНаСервере()
	
	Возврат CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("RefreshTokenGApi");
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкуСинхронизацииНаСервере()
	
	ДеревоТекущихНастроек = РеквизитФормыВЗначение("ДеревоНастроек");
	СтрокаНастройки = ДеревоТекущихНастроек.Строки.Найти(ПланыВидовХарактеристик.CRM_НастройкиПользователей.СинхронизироватьКалендарьGoogle,"Настройка",Истина);
	Возврат СтрокаНастройки.Значение;
	//Возврат  CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("СинхронизироватьКалендарьGoogle");
	
КонецФункции

&НаСервере
Функция ПолучитьФункциональнуюОпциюСИнхронизацияСКалендаремGoogle()
	Возврат ПолучитьФункциональнуюОпцию("CRM_СинхронизироватьКалендарьСКалендаремGoogle");
КонецФункции

&НаСервере
Процедура ЗаполнитьGoogleКалендарь(НаименованиеКалендаря)
	
	Для Сч = 0 По ТаблицаКалендарей.Количество()-1 Цикл
		Если ТаблицаКалендарей[Сч].Календарь = НаименованиеКалендаря Тогда
			CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(ТаблицаКалендарей[Сч].ИдКалендаря, "КалендарьGoogle", ТекущийПользователь);
			CRM_ОбщегоНазначенияСервер.УстановитьНастройкуПользователя(ТаблицаКалендарей[Сч].ЧасовойПояс, "ЧасовойПоясКалендаряGApi", ТекущийПользователь);

			Прервать;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокКалендарей()
	
	Если ТаблицаКалендарей.Количество()= 0 Тогда
		ТокенДоступаGoogleApi = ПолучитьТокенДоступаGoogleApiНаСервере();
		Если ЗначениеЗаполнено(ТокенДоступаGoogleApi) Тогда
			ТабКалендарей =  CRM_GoogleИнтеграция.ПолучитьТаблицуКалендарей();
			ЗначениеВРеквизитФормы(ТабКалендарей, "ТаблицаКалендарей");
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Элемент.ТекущиеДанные.Настройка = ПредопределенноеЗначение("ПланВидовХарактеристик.CRM_НастройкиПользователей.КалендарьGoogleПредставление") Тогда
		Если Элемент.ТекущийЭлемент.СписокВыбора.Количество() = 0 Тогда
			Если НЕ (ПолучитьНастройкуСинхронизацииНаСервере()) Тогда
				Текст = НСтр("ru = 'Для текущего пользователя в системе не установлена
				|настройка ""Синхронизировать календарь с Google""."+"'"); 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Текст;
				Сообщение.Поле = "ДеревоНастроек.Значение";
				Сообщение.УстановитьДанные(ЭтотОбъект);
				Сообщение.Сообщить();
			Иначе
				ПолучитьСписокКалендарей();
				Для Сч = 0 По ТаблицаКалендарей.Количество()-1 Цикл
					Элемент.ТекущийЭлемент.СписокВыбора.Добавить(ТаблицаКалендарей[Сч].Календарь);
				КонецЦикла;
				Элемент.ТекущийЭлемент.РежимВыбораИзСписка = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элемент.ТекущийЭлемент.РежимВыбораИзСписка = Ложь;
		Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
	КонецЕсли;
КонецПроцедуры

// -GOOGLE

// +СофтФон
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "сфпВыбранТелефонныйНомерПользователя" Тогда
		ТД = Элементы.ДеревоНастроек.ТекущиеДанные;
		Если ТД = Неопределено Тогда Возврат; КонецЕсли;
		Если НЕ (ТД.Значение = Параметр) Тогда
			// Если изменился текущий внутренний номер пользователя.
			ТД.Значение	= Параметр;
			УстановитьУсловноеОформлениеПоля(ТД.Настройка);		
			// Запишем внутренний номер для текущего пользователя.
			МассивПользователей = сфпСофтФонПроСервер.сфпЗаписатьНомерПользователю(Параметр, ТекущийПользователь);
			Если сфпСофтФонПроСервер.сфпИспользоватьМаршрутизацию() Тогда
				// Изменим маршрутизацию в АТС.
				СтарыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ТекущийПользователь);
				Для Каждого ПользовательМассива Из МассивПользователей Цикл
					НаборПользователя	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ПользовательМассива);
					Для Каждого СтрокаНабора Из НаборПользователя Цикл
						СтарыйНабор.Добавить(СтрокаНабора);
					КонецЦикла;	
				КонецЦикла;	
				НовыйНабор	= сфпСофтФонПроСервер.сфпПолучитьТаблицуМаршрутизации(, ТекущийПользователь);
				// Изменяем внутренний номер на новый.
				Для Каждого СтрокаНабора Из НовыйНабор Цикл
					СтрокаНабора.ВнутреннийНомер = Параметр;
				КонецЦикла;	
				СписокМаршрутизации = сфпСофтФонПроСервер.сфпСформироватьСписокМаршрутизации(СтарыйНабор, НовыйНабор);
				сфпСофтФонПроСервер.сфпИзменитьМаршрутизациюВАТС(СписокМаршрутизации);
			КонецЕсли;
			Модифицированность = Истина;
			сфпПереподключитьСофтФон = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// -СофтФон

#КонецОбласти

#КонецОбласти
