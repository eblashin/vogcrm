
#Область НастройкиПодсистемыСофтФон
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
// Процедура сохраняет настройки подключения к системе CLON
//
// Параметры:
//	Нет.
//
Процедура сфпЗаписатьНастройкиCLON()
	Константы.сфпCLONServerIP.Установить(НаборКонстант.сфпCLONServerIP);
	Константы.сфпCLONServerPort.Установить(НаборКонстант.сфпCLONServerPort);
	Константы.сфпCLONType.Установить(НаборКонстант.сфпCLONType);
	Константы.сфпCLONServerLogin.Установить(НаборКонстант.сфпCLONServerLogin);
	Константы.сфпCLONServerPassword.Установить(НаборКонстант.сфпCLONServerPassword);
КонецПроцедуры // сфпЗаписатьНастройкиCLON()

&НаСервереБезКонтекста
// Функция проверяет наличие записей в регистре поиска по номеру теефона
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево	- Признак наличия записей в регистре
//
Функция сфпРегистрПоискаПустой()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	сфпНомераТелефоновДляПоиска.Представление
	               |ИЗ
	               |	РегистрСведений.сфпНомераТелефоновДляПоиска КАК сфпНомераТелефоновДляПоиска";
	Возврат Запрос.Выполнить().Пустой();
КонецФункции // сфпРегистрПоискаПустой()

&НаСервереБезКонтекста
// Функция возвращает регламентное задание
//
// Параметры:
//	ИмяЗадания	- Строка	- Имя регламентного задания
//
// Возвращаемое значение:
//	РегламентноеЗадание	- Регламентное задание
//
Функция сфпПолучитьРегламентноеЗадание(ИмяЗадания)
    Возврат РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания);
КонецФункции // сфпПолучитьРегламентноеЗадание()

&НаСервереБезКонтекста
// Функция возвращает регламентное задание
//
// Параметры:
//	ИмяЗадания	- Строка	- Имя регламентного задания
//
// Возвращаемое значение:
//	РегламентноеЗадание	- Регламентное задание
//
Функция сфпПолучитьРасписаниеРегламентногоЗадания(ИмяЗадания)
	сфпЗадание = сфпПолучитьРегламентноеЗадание(ИмяЗадания);
	Если сфпЗадание = Неопределено Тогда
		Возврат Неопределено;
	Иначе	
	    Возврат сфпЗадание.Расписание;
	КонецЕсли;
КонецФункции // сфпПолучитьРегламентноеЗадание()

&НаСервереБезКонтекста
// Процедура устанавливает расписание регламентного задания
//
// Параметры:
//	РасписаниеЗадания	- РасписаниеРегламентногоЗадания	- Расписание регламентного задания
//	ИмяЗадания			- Строка							- Имя регламентного задания
//
Процедура сфпУстановитьРасписаниеРегламентногоЗадания(РасписаниеЗадания, ИмяЗадания)
	сфпЗадание = сфпПолучитьРегламентноеЗадание(ИмяЗадания);
	Если сфпЗадание = Неопределено Тогда Возврат; КонецЕсли;
	Попытка
		сфпЗадание.Расписание = РасписаниеЗадания;
		сфпЗадание.Записать();
	Исключение
	КонецПопытки;	
КонецПроцедуры // УстановитьРасписаниеРегламентногоЗадания()

&НаСервере
// Процедура устанавливает использование регламентных заданий
//
// Параметры:
//	Нет.
//
Процедура сфпУстановитьИспользованиеРегламентныхЗаданий()
	сфпЗадание = сфпПолучитьРегламентноеЗадание("сфпПолучитьИсториюЗвонков");
	Если НЕ (сфпЗадание = Неопределено) Тогда
		Попытка
			сфпЗадание.Использование = (НаборКонстант.сфпИспользоватьИсториюЗвонков
				И НаборКонстант.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков);
			сфпЗадание.Записать();
		Исключение
		КонецПопытки;	
	КонецЕсли;	
	сфпЗадание = сфпПолучитьРегламентноеЗадание("сфпОбновлениеТелефонныхКниг");
	Если НЕ (сфпЗадание = Неопределено) Тогда
		Попытка
			сфпЗадание.Использование = НаборКонстант.сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг;
			сфпЗадание.Записать();
		Исключение
		КонецПопытки;	
	КонецЕсли;	
КонецПроцедуры // сфпУстановитьИспользованиеРегламентногоЗадания()

&НаКлиенте
// Процедура - обработчик выбора расписания регламентного задания
//
// Параметры:
//	РасписаниеЗадания		- РасписаниеРегламентногоЗадания	- Расписание регламентного задания
//	ДополнительныеПараметры	- Структура							- Структура дополнительных параметров
//
Процедура сфпОбработатьРасписаниеРегламентногоЗадания(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	Если РасписаниеЗадания = Неопределено Тогда Возврат; КонецЕсли;
	сфпУстановитьРасписаниеРегламентногоЗадания(РасписаниеЗадания, ДополнительныеПараметры.ИмяЗадания);
КонецПроцедуры // ОбработатьРасписаниеРегламентногоЗадания()	

&НаКлиенте
// Процедура - обработчик открытия телефонных книг
//
// Параметры:
//	Ответ					- КодВозвратаДиалога	- Ответ на вопрос
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров
//
Процедура сфпОткрытьТелефонныеКниги(Ответ, ДополнительныеПараметры) Экспорт
	ИспользоватьСофтФон = Ложь;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Попытка
			Записать();
			ИспользоватьСофтФон = Истина;
		Исключение
		    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать настройки'"));
		КонецПопытки;
	КонецЕсли; 
	Если НЕ ИспользоватьСофтФон Тогда Возврат; КонецЕсли;
	ОткрытьФорму("Справочник.сфпТелефонныеКниги.ФормаСписка");	
КонецПроцедуры // сфпОткрытьТелефонныеКниги()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "сфпИспользоватьСофтФон"
//
Процедура сфпИспользоватьСофтФонПриИзменении(Элемент)
	#Если Вебклиент Тогда
		ИспользоватьСофтФон = Ложь;
	#Иначе
		ИспользоватьСофтФон = НаборКонстант.сфпИспользоватьСофтФон;
	#КонецЕсли
	Элементы.сфпГруппаСофтФонПодключение.ТолькоПросмотр						= НЕ ИспользоватьСофтФон;
	Элементы.сфпДекорацияМастерНастройкиAgatUX.Доступность					= ИспользоватьСофтФон;
	Элементы.сфпДекорацияТелефонныеКнигиСофтФон.Доступность					= ИспользоватьСофтФон;
	Элементы.сфпДекорацияПерезаполнитьРегистрПоискаПоНомерам.Доступность	= ИспользоватьСофтФон;	
	Если НЕ ИспользоватьСофтФон Тогда
		НаборКонстант.сфпИспользоватьCLON								= ИспользоватьСофтФон;
		НаборКонстант.сфпИспользоватьCoMagic							= ИспользоватьСофтФон;
		НаборКонстант.сфпИспользоватьSMS								= ИспользоватьСофтФон;
		НаборКонстант.сфпИспользоватьЗаписьПереговоров					= ИспользоватьСофтФон;
		НаборКонстант.сфпИспользоватьИсториюЗвонков						= ИспользоватьСофтФон;
		НаборКонстант.сфпИспользоватьМаршрутизацию						= ИспользоватьСофтФон;
		НаборКонстант.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков	= ИспользоватьСофтФон;
		НаборКонстант.сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг	= ИспользоватьСофтФон;
		НаборКонстант.сфпИспользоватьСпрут7								= ИспользоватьСофтФон;
	КонецЕсли;	
	сфпИспользоватьСпрут7ПриИзменении(Элемент);
	сфпИспользоватьCLONПриИзменении(Элемент);
	сфпИспользоватьМаршрутизациюПриИзменении(Элемент);	
	сфпИспользоватьРегламентноеЗаданиеИсторииЗвонковПриИзменении(Элемент);	
	сфпИспользоватьРегламентноеЗаданиеТелефонныхКнигПриИзменении(Элемент);	
	сфпИспользоватьCoMagicПриИзменении(Элемент);
	сфпПланНумерацииАвтоопределениеБизнесРегионаПриИзменении(Элемент);
КонецПроцедуры // сфпИспользоватьСофтФонПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "сфпДекорацияПерезаполнитьРегистрПоискаПоНомерам"
//
Процедура сфпДекорацияПерезаполнитьРегистрПоискаПоНомерамНажатие(Элемент)
	сфпСофтФонПроКлиент.сфпПерезаполнитьРегистрПоискаПоНомерам();
КонецПроцедуры // сфпДекорацияПерезаполнитьРегистрПоискаПоНомерамНажатие()

&НаКлиенте
Процедура сфпИспользоватьСпрут7ПриИзменении(Элемент)
	НаборКонстант.сфпИспользоватьЗаписьПереговоров	= (НаборКонстант.сфпИспользоватьCLON ИЛИ НаборКонстант.сфпИспользоватьСпрут7);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "сфпИспользоватьCLON"
//
Процедура сфпИспользоватьCLONПриИзменении(Элемент)
	ИспользоватьCLON								= НаборКонстант.сфпИспользоватьCLON;
	Элементы.сфпПодключитьCLON.Видимость			= ИспользоватьCLON;
	Элементы.сфпГруппаНастроекCLON.Видимость		= ИспользоватьCLON;
	НаборКонстант.сфпИспользоватьЗаписьПереговоров	= (НаборКонстант.сфпИспользоватьCLON ИЛИ НаборКонстант.сфпИспользоватьСпрут7);
КонецПроцедуры // сфпИспользоватьCLONПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "сфпИспользоватьМаршрутизацию"
//
Процедура сфпИспользоватьМаршрутизациюПриИзменении(Элемент)
	Элементы.сфпДекорацияИспользованиеМаршрутизации.Видимость		= НЕ НаборКонстант.сфпИспользоватьМаршрутизацию;	
	Элементы.сфпКоличествоВзаимодействийДляМаршрутизации.Видимость	= НаборКонстант.сфпИспользоватьМаршрутизацию;
	Элементы.сфпПолеПереключателяМаршрутизация.Видимость 			= НаборКонстант.сфпИспользоватьМаршрутизацию;		
КонецПроцедуры // сфпИспользоватьМаршрутизациюПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "сфпДекорацияМастерНастройкиAgatUX"
//
Процедура сфпДекорацияМастерНастройкиAgatUXНажатие(Элемент)
	сфпСофтФонПроКлиент.сфпЗапуститьМастерНастройкиAgatUX()
КонецПроцедуры // сфпДекорацияМастерНастройкиAgatUXНажатие()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг"
//
Процедура сфпИспользоватьРегламентноеЗаданиеТелефонныхКнигПриИзменении(Элемент)
	Элементы.сфпНастройкаРасписанияТелефонныхКниг.Видимость = НаборКонстант.сфпИспользоватьРегламентноеЗаданиеТелефонныхКниг;	
КонецПроцедуры // сфпИспользоватьРегламентноеЗаданиеТелефонныхКнигПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "сфпДекорацияТелефонныеКнигиСофтФон"
//
Процедура сфпДекорацияТелефонныеКнигиСофтФонНажатие(Элемент)
	ИспользоватьСофтФон = сфпСофтФонПроСервер.сфпИспользоватьСофтФон();
	Если ИспользоватьСофтФон Тогда
		ОткрытьФорму("Справочник.сфпТелефонныеКниги.ФормаСписка");	
	ИначеЕсли НаборКонстант.сфпИспользоватьСофтФон Тогда
		ДополнительныеПараметры = Новый Структура;
		ОповещениеОтвета = Новый ОписаниеОповещения("сфпОткрытьТелефонныеКниги", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Перед открытием телефонных книг необходимо записать настройки. Записать?'");
		ПоказатьВопрос(ОповещениеОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Внимание!");
	КонецЕсли; 
КонецПроцедуры // сфпДекорацияТелефонныеКнигиСофтФонНажатие()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "сфпНастройкаРасписанияТелефонныхКниг"
//
Процедура сфпНастройкаРасписанияТелефонныхКнигНажатие(Элемент)
	ИмяЗадания				= "сфпОбновлениеТелефонныхКниг";
	сфпРасписание			= сфпПолучитьРасписаниеРегламентногоЗадания(ИмяЗадания);
	сфпДиалог				= Новый ДиалогРасписанияРегламентногоЗадания(сфпРасписание);
	ДополнительныеПараметры	= Новый Структура("ИмяЗадания", ИмяЗадания);
	сфпОповещениеРасписания	= Новый Описаниеоповещения("сфпОбработатьРасписаниеРегламентногоЗадания", ЭтотОбъект, ДополнительныеПараметры);
	сфпДиалог.Показать(сфпОповещениеРасписания); 
КонецПроцедуры // сфпНастройкаРасписанияТелефонныхКнигНажатие()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков"
//
Процедура сфпИспользоватьРегламентноеЗаданиеИсторииЗвонковПриИзменении(Элемент)
	
	Элементы.ДекорацияДатаПоследнейЗагрузки.Видимость			  = НаборКонстант.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков;
	Элементы.сфпДатаИстории.Видимость							  = НаборКонстант.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков;
	Элементы.сфпВремяИстории.Видимость							  = НаборКонстант.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков;
	Элементы.сфпНастройкаРасписанияИсторииЗвонков.Видимость		  = НаборКонстант.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков;
	Элементы.сфпОповещатьОПропущенныхЗвонках.Видимость			  = НаборКонстант.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков;
	Элементы.сфпПользовательДляОповещений.Видимость				  = НаборКонстант.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков;
	Элементы.сфпДействиеПриОшибкеЗагрузкиИсторииЗвонков.Видимость = НаборКонстант.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков;
	
	сфпДатаИсторииЗвонков = сфпСофтФонПроСервер.сфпСформироватьДатуИзДатыИВремени(сфпДатаИстории, сфпВремяИстории);
	Если сфпДатаИсторииЗвонков = Дата('00010101') Тогда
		НаборКонстант.сфпДатаИсторииЗвонков = НачалоДня(сфпСофтФонПроСервер.сфпТекущаяДата());
	КонецЕсли;	
	Если НЕ НаборКонстант.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков Тогда
		НаборКонстант.сфпОповещатьОПропущенныхЗвонках = Ложь;
	КонецЕсли;
	Если НЕ НаборКонстант.сфпИспользоватьРегламентноеЗаданиеИсторииЗвонков Тогда
		НаборКонстант.сфпДействиеПриОшибкеЗагрузкиИсторииЗвонков = ПредопределенноеЗначение("Перечисление.сфпДействияПриОшибкеЗагрузкиИсторииЗвонков.ПродолжитьВыполнение");
	КонецЕсли;
	
	сфпОповещатьОПропущенныхЗвонкахПриИзменении(Элемент);

КонецПроцедуры // сфпИспользоватьРегламентноеЗаданиеИсторииЗвонковПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "сфпНастройкаРасписанияИсторииЗвонков"
//
Процедура сфпНастройкаРасписанияИсторииЗвонковНажатие(Элемент)
	ИмяЗадания				= "сфпПолучитьИсториюЗвонков";
	сфпРасписание			= сфпПолучитьРасписаниеРегламентногоЗадания(ИмяЗадания);
	сфпДиалог				= Новый ДиалогРасписанияРегламентногоЗадания(сфпРасписание);
	ДополнительныеПараметры	= Новый Структура("ИмяЗадания", ИмяЗадания);
	сфпОповещениеРасписания	= Новый Описаниеоповещения("сфпОбработатьРасписаниеРегламентногоЗадания", ЭтотОбъект, ДополнительныеПараметры);
	сфпДиалог.Показать(сфпОповещениеРасписания); 
КонецПроцедуры // сфпНастройкаРасписанияИсторииЗвонковНажатие()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "сфпОповещатьОПропущенныхЗвонках"
//
Процедура сфпОповещатьОПропущенныхЗвонкахПриИзменении(Элемент)
	Элементы.сфпПользовательДляОповещений.Доступность = НаборКонстант.сфпОповещатьОПропущенныхЗвонках;
КонецПроцедуры // сфпОповещатьОПропущенныхЗвонкахПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "сфпИспользоватьCoMagic"
//
Процедура сфпИспользоватьCoMagicПриИзменении(Элемент)
	Элементы.ГруппаНастройкаПараметровCoMagic.Видимость = НаборКонстант.сфпИспользоватьCoMagic;
КонецПроцедуры  // сфпИспользоватьCoMagicПриИзменении()

&НаКлиенте
Процедура сфпПолеПереключателяМаршрутизацияПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура сфпПланНумерацииАвтоопределениеБизнесРегионаПриИзменении(Элемент)
	
	Элементы.сфпПланНумерацииАдресРеестра.Видимость = НаборКонстант.сфпПланНумерацииАвтоопределениеБизнесРегиона;
	Элементы.сфпПланНумерацииФайлыРеестра.Видимость = НаборКонстант.сфпПланНумерацииАвтоопределениеБизнесРегиона;
	Элементы.сфпПланНумерацииАдресДетализацииНомера.Видимость = НаборКонстант.сфпПланНумерацииАвтоопределениеБизнесРегиона;

КонецПроцедуры

#КонецОбласти //НастройкиПодсистемыСофтФон 

#Область ПРОЦЕДУРЫ_И_ОБРАБОТЧИКИ_КОМАНД_ФОРМЫ

&НаКлиенте
// Процедура - обработчик команды формы "сфпКомандаОписаниеСофтФон"
//
Процедура сфпКомандаОписаниеСофтФон(Команда)
	ПараметрыФормы = Новый Структура("Макет, Заголовок", "Интеграции_СофтФон", НСтр("ru = 'Подсистема_СофтФон'"));
	ОткрытьФорму("Обработка.CRM_БыстроеОсвоение.Форма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
КонецПроцедуры // сфпКомандаОписаниеCoMagic()

&НаКлиенте
// Процедура - обработчик команды формы "ПодключитьCLON"
//
Процедура сфпПодключитьCLON(Команда)
	сфпЗаписатьНастройкиCLON();
	сфпСофтФонПроКлиент.сфпПодключитьCLON();
	Если НЕ (сфпObjCLON = Неопределено) Тогда
		Состояние("Вы успешно подключились к системе записи разговоров CLON");
	КонецЕсли;	
КонецПроцедуры // сфпПодключитьCLON()

&НаКлиенте
Процедура сфпКомандаОписаниеCoMagic(Команда)
	ПараметрыФормы = Новый Структура("Макет, Заголовок", "Интеграции_Comagic", НСтр("ru = 'Сервис Comagic'"));
	ОткрытьФорму("Обработка.CRM_БыстроеОсвоение.Форма", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
КонецПроцедуры // сфпКомандаОписаниеCoMagic()

#КонецОбласти

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере"
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ сфпСофтФонПроСервер.сфпРолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Недостаточно прав для настройки СофтФон!'"));
		СтандартнаяОбработка	= Ложь;
		Отказ					= Истина;
	КонецЕсли;
	сфпПолеПереключателяМаршрутизация = ?(Константы.сфпИспользоватьВнутреннийНомерИзКИПользователя.Получить(), "Альтернатива", "ПоУмолчанию");
	Если ЗначениеЗаполнено(НаборКонстант.сфпДатаИсторииЗвонков) Тогда
		СтруктураДатыИстории = сфпСофтФонПроСервер.сфпРазделитьДатаНаДатуИВремя(НаборКонстант.сфпДатаИсторииЗвонков);
		сфпДатаИстории 	= СтруктураДатыИстории.Дата; 
		сфпВремяИстории = СтруктураДатыИстории.Время;
	КонецЕсли;
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии"
//
Процедура ПриОткрытии(Отказ)
	сфпИспользоватьСофтФонПриИзменении(Неопределено);
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ (НаборКонстант.сфпИспользоватьСпрут7 ИЛИ НаборКонстант.сфпИспользоватьCLON) Тогда
		НаборКонстант.сфпИспользоватьЗаписьПереговоров = Ложь;
	КонецЕсли;	
	сфпДатаИсторииЗвонков = сфпСофтФонПроСервер.сфпСформироватьДатуИзДатыИВремени(сфпДатаИстории, сфпВремяИстории);
	Если сфпДатаИсторииЗвонков = Дата('00010101') Тогда
		НаборКонстант.сфпДатаИсторииЗвонков = НачалоДня(сфпСофтФонПроСервер.сфпТекущаяДата());
	Иначе
		НаборКонстант.сфпДатаИсторииЗвонков = сфпДатаИсторииЗвонков;
	КонецЕсли;	
	сфпУстановитьИспользованиеРегламентныхЗаданий();
КонецПроцедуры // ПередЗаписью()

&НаКлиенте
// Процедура - обработчик события формы "ПослеЗаписи"
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если НЕ НаборКонстант.сфпИспользоватьСофтФон Тогда
		сфпСофтФонПроКлиент.сфпОтключитьСофтФон();
	ИначеЕсли НЕ сфпСофтФонПроСервер.сфпПолучитьЗначениеНастройкиПользователя("сфпИспользоватьСофтФон") Тогда
		сфпСофтФонПроКлиент.сфпОтключитьСофтФон();
	ИначеЕсли сфпПанельУправления = Неопределено Тогда
		сфпСофтФонПроКлиент.сфпПодключитьСофтФон();
	КонецЕсли;	
	Если НаборКонстант.сфпИспользоватьСофтФон Тогда
		Если НаборКонстант.сфпИспользоватьCLON И (сфпObjCLON = Неопределено) Тогда
			сфпСофтФонПроКлиент.сфпПодключитьCLON();
		КонецЕсли;
		Если сфпРегистрПоискаПустой() Тогда
			сфпСофтФонПроКлиент.сфпПерезаполнитьРегистрПоискаПоНомерам();
		КонецЕсли;	
	КонецЕсли;	
	ОбновитьИнтерфейс();
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если сфпПолеПереключателяМаршрутизация = "ПоУмолчанию" Тогда
		Константы.сфпИспользоватьВнутреннийНомерИзКИПользователя.Установить(Ложь);
	Иначе
		Константы.сфпИспользоватьВнутреннийНомерИзКИПользователя.Установить(Истина);
	КонецЕсли;		
КонецПроцедуры

#КонецОбласти
