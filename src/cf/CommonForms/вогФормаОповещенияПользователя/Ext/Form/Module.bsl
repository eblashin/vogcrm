
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПоказатьВсе") И Параметры.ПоказатьВсе Тогда
		ПоказатьВсе = Истина;
	КонецЕсли;
	
	ОбновитьТаблицуОповещений();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуОповещений()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	CRM_Напоминания.ДатаНачала КАК ДатаНачала,
	|	CRM_Напоминания.ДатаОповещения КАК ДатаОповещения,
	|	CRM_Напоминания.Содержание КАК Описание,
	|	CRM_Напоминания.Предмет КАК Предмет
	|ИЗ
	|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
	|ГДЕ
	|	CRM_Напоминания.Пользователь = &Пользователь
	|	И НачалоПериода(CRM_Напоминания.ДатаОповещения,МИНУТА) <= &ТекущаяДата
	|	И CRM_Напоминания.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.вогОповещениеПользователя)
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_Напоминания.ДатаОповещения";
	
	Если ПоказатьВсе Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И НачалоПериода(CRM_Напоминания.ДатаОповещения,МИНУТА) <= &ТекущаяДата","");
	Иначе
		Запрос.УстановитьПараметр("ТекущаяДата", НачалоМинуты(ТекущаяДатаСеанса()));
	КонецЕсли;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаОповещений.Загрузить(РезультатЗапроса);
	
	Для Каждого Строка Из ТаблицаОповещений Цикл
		РазницаВоВремени = Строка.ДатаОповещения - ТекущаяДатаСеанса();
		ДобавочныйТекст = "";
		Если РазницаВоВремени < 0 Тогда
			РазницаВоВремени = РазницаВоВремени * (-1);
			ДобавочныйТекст = " просрочено";
		КонецЕсли;
		СрокОповещения = НапоминанияПользователяКлиентСервер.ПредставлениеВремени(РазницаВоВремени,Ложь,Ложь);
		Строка.СрокТекст = СрокОповещения + ДобавочныйТекст;
	КонецЦикла;
	
	Если ТаблицаОповещений.Количество() > 0 Тогда 
		Элементы.ТаблицаОповещений.ТекущаяСтрока  = ТаблицаОповещений[0].ПолучитьИдентификатор();
		ЭтаФорма.Заголовок = "Напоминаний: " + ТаблицаОповещений.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПовторногоОповещенияПриИзменении(Элемент)
	СрокПовторногоОповещения = НапоминанияПользователяКлиентСервер.ОформитьВремя(СрокПовторногоОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Отложить(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаОповещений.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтервалВремени = НапоминанияПользователяКлиентСервер.ПолучитьИнтервалВремениИзСтроки(СрокПовторногоОповещения);
	ОтложитьОповещениеНаСервере(ТекущиеДанные.ПолучитьИдентификатор(),ИнтервалВремени);
	Если ТаблицаОповещений.Количество() = 0 Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтложитьОповещениеНаСервере(Индентификатор,ИнтервалВремени)
	
	СтрокаОповещения = ТаблицаОповещений.НайтиПоИдентификатору(Индентификатор);
	МенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаОповещения);
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ДатаОповещения = ТекущаяДатаСеанса() + ИнтервалВремени;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	ОбновитьТаблицуОповещений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СрокПовторногоОповещения = НСтр("ru = '15м'");
	СрокПовторногоОповещения = НапоминанияПользователяКлиентСервер.ОформитьВремя(СрокПовторногоОповещения);
	ЗаполнитьСрокиПовторногоОповещения()
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСрокиПовторногоОповещения()
	
	Элементы.СрокПовторногоОповещения.СписокВыбора.Очистить();
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '5 минут'; en = '5 minutes'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '10 минут'; en = '10 minutes'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '15 минут'; en = '15 minutes'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '20 минут'; en = '20 minutes'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '30 минут'; en = '30 minutes'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '45 минут'; en = '45 minutes'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '1 час'; en = '1 hour'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '2 часа'; en = '2 hours'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '3 часа'; en = '3 hours'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '6 часов'; en = '6 hours'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '12 часов'; en = '12 hours'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '1 день'; en = '1 day'"));
	Элементы.СрокПовторногоОповещения.СписокВыбора.Добавить(НСтр("ru = '3 дня'; en = '3 days'"));
	
	Если Элементы.СрокПовторногоОповещения.СписокВыбора.НайтиПоЗначению(СрокПовторногоОповещения) = Неопределено Тогда
		Элементы.СрокПовторногоОповещения.СписокВыбора.Вставить(0, СрокПовторногоОповещения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОповещенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаОповещений.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	СтруктураЗаписи = Новый Структура("Пользователь, Предмет, ДатаНачала, ДатаОповещения");
	СтруктураЗаписи.Пользователь = Пользователь;
	ЗаполнитьЗначенияСвойств(СтруктураЗаписи,ТекущиеДанные); 
	
	МассивКлюча = Новый Массив;
	МассивКлюча.Добавить(СтруктураЗаписи);
	КлючЗаписи = Новый ("РегистрСведенийКлючЗаписи.CRM_Напоминания", МассивКлюча);  
	Параметрыформы = Новый Структура("Ключ", КлючЗаписи);
	ОткрытьФорму("РегистрСведений.CRM_Напоминания.ФормаЗаписи", Параметрыформы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьВсе(Команда)	
	ПрекратитьВсеНаСервере();
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ПрекратитьВсеНаСервере()
	
	Если ПоказатьВсе Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОповещения Из ТаблицаОповещений Цикл
		МенеджерЗаписи = РегистрыСведений.CRM_Напоминания.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаОповещения);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОповещенийПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОповещений.ТекущиеДанные; 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СодержаниеОповещения = ПолучитьТекстСодержанияОповещения(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстСодержанияОповещения(СтрокаОповещения)
	
	ЗаголовокHTML	= "
	|<!DOCTYPE html>
	|<HTML>
	|<BODY>
	|<HEAD>
	|	<style>
   			|html { overflow:  hidden; }
			|.longtext {
				|text-overflow: ellipsis;
				|white-space: nowrap;
    			|overflow: hidden;
			|}	
		|</style>
	|</HEAD>";
	
	ПодвалHTML		= "
		|&nbsp;
		|</BODY>
		|</HTML>";
	
	ОсновнойТекст = ЗаголовокHTML + "<table>
				|<tr>
				|<td>";
	
	СтрокаКартинкиСоздатьНапоминание = Base64Строка(БиблиотекаКартинок.CRM_СоздатьНапоминание32.ПолучитьДвоичныеДанные());
	ТекстКартинкиСоздатьНапоминание = "<img src='data:image/png;base64," + СтрокаКартинкиСоздатьНапоминание + "'/>"; 
	
	ОсновнойТекст = ОсновнойТекст + ТекстКартинкиСоздатьНапоминание;
	
	ОсновнойТекст = ОсновнойТекст + "
			|</td>
			|<td>";
	
	ОсновнойТекст = ОсновнойТекст + "<div style=""text-overflow: ellipsis; white-space: nowrap; overflow: hidden;""><b>" +  ПолучитьHTMLКодДляТекста(СтрокаОповещения.Описание) + "</b></div>" + "</td>";
	ОсновнойТекст = ОсновнойТекст + "
				|<tr>
				|<td></td>
				|<td>";
	ОсновнойТекст = ОсновнойТекст + Формат(СтрокаОповещения.ДатаОповещения,"ДФ=HH:mm") + " " + Формат(СтрокаОповещения.ДатаОповещения,"ДЛФ=DD");
	ОсновнойТекст = ОсновнойТекст + "
			|</td>
			|</tr>
			|</table>";
	ОсновнойТекст = ОсновнойТекст + ПодвалHTML;
	
	Возврат ОсновнойТекст;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьHTMLКодДляТекста(сТекст)
	
	
	Если ПустаяСтрока(сТекст) Тогда
		
		Возврат ""; 	
		
	КонецЕсли;
	
	сРезультатТекст= СокрЛП(сТекст);
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"&","&amp;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"<","&lt;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,">","&gt;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"≠","&ne;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"≤","&le;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"≥","&ge;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,Символы.ПС,"&nbsp;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,Символы.НПП,"&nbsp;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,Символы.Таб,"&nbsp;&nbsp;&nbsp;&nbsp;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"""","&quot;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"«","&laquo;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"»","&raquo;");
	сРезультатТекст= СтрЗаменить(сРезультатТекст,"'","&#39;");
	
	Возврат сРезультатТекст;
	
КонецФункции // ПолучитьHTMLКодСтроки()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ПрекратитьВсеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		Оповестить("ИзменениеНапоминаний");
	КонецЕсли;
	
КонецПроцедуры
