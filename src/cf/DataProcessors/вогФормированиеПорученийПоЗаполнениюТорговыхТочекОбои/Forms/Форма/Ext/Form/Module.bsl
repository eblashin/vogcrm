
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Подразделение 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущийПользователь,
		"Подразделение",
		Истина);
	
	ИнициализироватьСхемуКомпоновки();
	
	НаправлениеДеятельности 		= Справочники.НаправленияДеятельности.Обои;
	РольОтветственного 				= Справочники.РолиКонтактныхЛицПартнеров.Менеджер;
	
	// Вариант опроса "Заполнение кол-во SKU по ТТ списком (обои)"
	Идентификатор_ВариантаОпроса 	= Новый УникальныйИдентификатор("4305c4d7-c743-11ea-8f2a-005056bcd3e3");
	ВариантОпроса 					= ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Идентификатор_ВариантаОпроса);
	
	// Значения классификатора Статус ТТ
	Идентификатор_СтатусТТ_Новая 	= Новый УникальныйИдентификатор("047f780f-8b44-11e9-9b11-005056bcd3e3");
	СтатусТТ_Новая 					= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Идентификатор_СтатусТТ_Новая);
	
	Идентификатор_СтатусТТ_АКБ 		= Новый УникальныйИдентификатор("f84779ae-9a73-11e8-89fa-005056bc3fe8");
	СтатусТТ_АКБ 					= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Идентификатор_СтатусТТ_АКБ);
	
	Идентификатор_СтатусТТ_НАКБ 	= Новый УникальныйИдентификатор("005e9af2-9a74-11e8-89fa-005056bc3fe8");
	СтатусТТ_НАКБ 					= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Идентификатор_СтатусТТ_НАКБ);
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(СтатусТТ_Новая);
	МассивСтатусов.Добавить(СтатусТТ_АКБ);
	МассивСтатусов.Добавить(СтатусТТ_НАКБ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		"СтатусТТ",
		МассивСтатусов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	МассивВидовТТ = Новый Массив;
	МассивВидовТТ.Добавить(Справочники.вогВидыТорговыхТочек.ТРТД);
	МассивВидовТТ.Добавить(Справочники.вогВидыТорговыхТочек.ТорговаяТочка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		"ТорговаяТочка.Вид",
		МассивВидовТТ,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпоновщикНастроек.Настройки.Отбор,
		"Подразделение",
		Подразделение,
		ВидСравненияКомпоновкиДанных.ВИерархии,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПоручения(Команда)
	
	Отказ 			= Ложь;
	ТекстСообщения 	= Неопределено;
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(НаправлениеДеятельности) тогда
		
		ТекстСообщения 	= НСтр("ru = 'Не указано направление деятельности.'");
		Поле 			= "НаправлениеДеятельности";
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РольОтветственного) Тогда
		
		ТекстСообщения 	= НСтр("ru = 'Не указана роль ответственного.'");
		Поле 			= "РольОтветственного";
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВариантОпроса) Тогда
		
		ТекстСообщения 	= НСтр("ru = 'Не указан вариант опроса.'");
		Поле 			= "ВариантОпроса";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
	КонецЕсли;
	
	Если Не Отказ тогда
		СоздатьПорученияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаСервере
Процедура ИнициализироватьСхемуКомпоновки()
	
	СхемаКомпоновкиДанных 		= Обработки.вогФормированиеПорученийПоЗаполнениюТорговыхТочекОбои.ПолучитьМакет("СхемаЗаполнения");
	АдресСхемыКомпоновкиДанных 	= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	НастройкиСКД 				= СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруПараметров(Отказ)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураИдентификаторов = Новый Структура;
	СтруктураИдентификаторов.Вставить("КлассификаторКоличествоSKUВОГ", 	"db18bcf8-c743-11ea-8f2a-005056bcd3e3");
	СтруктураИдентификаторов.Вставить("КлассификаторКоличествоSKU", 	"5af63fbb-d6c6-11e8-a684-005056bc3fe8");
	СтруктураИдентификаторов.Вставить("СтатусТТКлассификатор", 			"dcdbe20f-9a73-11e8-89fa-005056bc3fe8");
	
	Для Каждого КлючИЗначение Из СтруктураИдентификаторов Цикл
		
		ИдентификаторКлассификатора = Новый УникальныйИдентификатор(КлючИЗначение.Значение);
		КлассификаторСсылка = ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(ИдентификаторКлассификатора);
		
		Если Не ОбщегоНазначения.СсылкаСуществует(КлассификаторСсылка) Тогда
			
			ИмяКлассификатора = СформироватьСиноним(СтрЗаменить(КлючИЗначение.Ключ, "Классификатор", ""));
			
			ШаблонСообщения = НСтр("ru = 'Не найден классификатор %1 с идентификатором %2.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ИмяКлассификатора, КлючИЗначение.Значение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураПараметров.Вставить(КлючИЗначение.Ключ, КлассификаторСсылка);
		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция СформироватьСиноним(ИмяРеквизита)
	
	Синоним 	= ВРег(Сред(ИмяРеквизита, 1, 1));
	ДлинаСтроки = СтрДлина(ИмяРеквизита);
	
	Для ПозицияСимвола = 2 По ДлинаСтроки Цикл
		
		Символ 			= Сред(ИмяРеквизита, ПозицияСимвола, 1);
		ПредСимвол 		= Сред(ИмяРеквизита, ПозицияСимвола - 1, 1);
		СледСимвол 		= Сред(ИмяРеквизита, ПозицияСимвола + 1, 1);
		Прописная 		= Символ = ВРег(Символ);
		ПредПрописная 	= (ПредСимвол = ВРег(ПредСимвол));
		СледПрописная 	= (СледСимвол = ВРег(СледСимвол));
		
		Если Не ПредПрописная И Прописная Тогда
			Синоним = СтрШаблон("%1 %2",Синоним, Символ);
		ИначеЕсли Прописная И НЕ СледПрописная Тогда
			Синоним = СтрШаблон("%1 %2",Синоним, Символ);
		Иначе
			Синоним = СтрШаблон("%1%2",Синоним, Символ)
		Конецесли;
		
	КонецЦикла;
	
	Возврат Синоним;
	
КонецФункции

&НаСервере
Функция СформироватьСоответствиеЗначенийКлассификаторов(Отказ)
	
	СоответствиеДопИнформации = Новый Соответствие;
	
	СтруктураИдентификаторов = Новый Структура;
	СтруктураИдентификаторов.Вставить("СвойствоКоличествоSKU106", 		"9aa662d7-c743-11ea-8f2a-005056bcd3e3");
	СтруктураИдентификаторов.Вставить("СвойствоКоличествоSKU053", 		"d7481c9b-c752-11ea-8f2a-005056bcd3e3");
	СтруктураИдентификаторов.Вставить("СвойствоКоличествоSKU07", 		"e16131db-c752-11ea-8f2a-005056bcd3e3");
	СтруктураИдентификаторов.Вставить("СвойствоКоличествоSKUВОГ106", 	"a8c62b77-c743-11ea-8f2a-005056bcd3e3");
	СтруктураИдентификаторов.Вставить("СвойствоКоличествоSKUВОГ053", 	"f43ef7bb-c752-11ea-8f2a-005056bcd3e3");
	
	Для Каждого КлючИЗначение Из СтруктураИдентификаторов Цикл
		
		ИдентификаторДопИнформации 	= Новый УникальныйИдентификатор(КлючИЗначение.Значение);
		ДопИнформацияСсылка 		= ПланыВидовХарактеристик.вогДополнительнаяИнформацияАнкета.ПолучитьСсылку(
			ИдентификаторДопИнформации);
		
		Если Не ОбщегоНазначения.СсылкаСуществует(ДопИнформацияСсылка) Тогда
			
			ИмяСвойства = СформироватьСиноним(СтрЗаменить(КлючИЗначение.Ключ, "Свойство", ""));
			
			ШаблонСообщения = НСтр("ru = 'Не найдена дополнительная информация вопроса %1 с идентификатором %2.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ИмяСвойства, КлючИЗначение.Значение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
			Продолжить;
			
		КонецЕсли;
		
		СоответствиеДопИнформации.Вставить(КлючИЗначение.Ключ, ДопИнформацияСсылка);
		
	КонецЦикла;
	
	СоответствиеЗначенийКлассификаторов = Новый Соответствие;
	
	СтруктураИдентификаторов = Новый Соответствие;
	СтруктураИдентификаторов.Вставить("СвойствоКоличествоSKU106", 		"768685fc-d6c6-11e8-a684-005056bc3fe8");
	СтруктураИдентификаторов.Вставить("СвойствоКоличествоSKU053", 		"bfec323c-d6c6-11e8-a684-005056bc3fe8");
	СтруктураИдентификаторов.Вставить("СвойствоКоличествоSKU07", 		"abf347fc-d6c6-11e8-a684-005056bc3fe8");
	СтруктураИдентификаторов.Вставить("СвойствоКоличествоSKUВОГ106", 	"1346f0b9-c744-11ea-8f2a-005056bcd3e3");
	СтруктураИдентификаторов.Вставить("СвойствоКоличествоSKUВОГ053", 	"227ad8da-c744-11ea-8f2a-005056bcd3e3");
	
	Для Каждого КлючИЗначение Из СтруктураИдентификаторов Цикл
		
		ИдентификаторДопИнформации 		= Новый УникальныйИдентификатор(КлючИЗначение.Значение);
		ЗначениеКлассификатораСсылка 	= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(
			ИдентификаторДопИнформации);
		
		Если Не ОбщегоНазначения.СсылкаСуществует(ЗначениеКлассификатораСсылка) Тогда
			
			ИмяСвойства = СформироватьСиноним(СтрЗаменить(КлючИЗначение.Ключ, "Свойство", ""));
			
			ШаблонСообщения = НСтр("ru = 'Не найдена дополнительная информация вопроса %1 с идентификатором %2.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ИмяСвойства, КлючИЗначение.Значение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
			Продолжить;
			
		КонецЕсли;
		
		ДопИнформацияСсылка = СоответствиеДопИнформации.Получить(КлючИЗначение.Ключ);
		СоответствиеЗначенийКлассификаторов.Вставить(ЗначениеКлассификатораСсылка, ДопИнформацияСсылка);
		
	КонецЦикла;
	
	Возврат СоответствиеЗначенийКлассификаторов;
	
КонецФункции

&НаСервере
Процедура СоздатьПорученияНаСервере()
	
	Отказ = Ложь;
	
	СтруктураПараметров = СформироватьСтруктуруПараметров(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных 		= ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	НастройкиКомпоновкиДанных 	= КомпоновщикНастроек.ПолучитьНастройки();
	
	ТаблицаРезультат 			= Новый ТаблицаЗначений;
	
	МассивКлассификаторов = Новый Массив;
	МассивКлассификаторов.Добавить(СтруктураПараметров.КлассификаторКоличествоSKU);
	МассивКлассификаторов.Добавить(СтруктураПараметров.КлассификаторКоличествоSKUВОГ);
	
	НастройкиКомпоновкиДанных.ПараметрыДанных.УстановитьЗначениеПараметра("Классификаторы", 		МассивКлассификаторов);
	НастройкиКомпоновкиДанных.ПараметрыДанных.УстановитьЗначениеПараметра("СтатусТТКлассификатор", 	СтруктураПараметров.СтатусТТКлассификатор);
	
	НастройкиКомпоновкиДанных.ПараметрыДанных.УстановитьЗначениеПараметра("Роль", 						РольОтветственного);
	НастройкиКомпоновкиДанных.ПараметрыДанных.УстановитьЗначениеПараметра("НаправлениеДеятельности", 	НаправлениеДеятельности);
	
	КомпоновщикМакета 		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		НастройкиКомпоновкиДанных,
		,
		,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивМенеджеров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаРезультат.ВыгрузитьКолонку("Менеджер"));
	
	Если МассивМенеджеров.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Все торговые точки заполнены.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	// Вопрос анкеты
	ИдентификаторВопроса 			= Новый УникальныйИдентификатор("7d08e777-c743-11ea-8f2a-005056bcd3e3");
	ВопросАнкеты 					= Справочники.вогВопросы.ПолучитьСсылку(ИдентификаторВопроса);
	
	СоответствиеЗначенийКлассификаторов 	= СформироватьСоответствиеЗначенийКлассификаторов(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементМенеджер Из МассивМенеджеров Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			УстановитьПривилегированныйРежим(Истина);
			РезультатОбработки = Ложь;
			
			ТаблицаРезультатПоМенеджеру = ТаблицаРезультат.Скопировать(Новый Структура("Менеджер", ЭлементМенеджер));
			
			ПараметрыАнкеты = Новый Структура;
			ПараметрыАнкеты.Вставить("ВариантОпроса", 						ВариантОпроса);
			ПараметрыАнкеты.Вставить("Менеджер", 							ЭлементМенеджер);
			ПараметрыАнкеты.Вставить("НаправлениеДеятельности", 			НаправлениеДеятельности);
			ПараметрыАнкеты.Вставить("ТаблицаДанных", 						ТаблицаРезультатПоМенеджеру);
			ПараметрыАнкеты.Вставить("Вопрос", 								ВопросАнкеты);
			ПараметрыАнкеты.Вставить("СоответствиеЗначенийКлассификаторов", СоответствиеЗначенийКлассификаторов);
			
			Анкета = СоздатьАнкетуНаСервере(ПараметрыАнкеты);
			
			КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("5a982d6d-c767-11ea-b7d5-005056bc3fe8"));
			
			// Создание задач
			СписокТочекСтарта 								= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(КартаМаршрута);
			Автор 											= Пользователи.ТекущийПользователь();
			
			БизнесПроцессОбъект 							= БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			БизнесПроцессОбъект.Автор 						= Автор;
			БизнесПроцессОбъект.Дата 						= ТекущаяДата();
			БизнесПроцессОбъект.Важность 					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			БизнесПроцессОбъект.Предмет 					= Анкета;
			БизнесПроцессОбъект.вогАнкета 					= Анкета;
			БизнесПроцессОбъект.Ответственный 				= Автор;
			БизнесПроцессОбъект.Подразделение 				= Подразделение;
			БизнесПроцессОбъект.КартаМаршрута 				= КартаМаршрута;
			БизнесПроцессОбъект.ТочкаСтарта 				= СписокТочекСтарта[0].Значение;
			БизнесПроцессОбъект.ДатаСтарта 					= ТекущаяДата();
			БизнесПроцессОбъект.Наименование 				= СтрШаблон("%1 (%2)", КартаМаршрута, БизнесПроцессОбъект.Предмет);
			БизнесПроцессОбъект.вогДолжностнаяПозиция 		= Автор.CRM_ДолжностнаяПозиция;
			БизнесПроцессОбъект.НомерВерсииКартыМаршрута	= КартаМаршрута.НомерВерсии;
			БизнесПроцессОбъект.Описание 					= НСтр("ru = 'Необходимо заполнить и провести Анкету '" + ВариантОпроса);
			
			БизнесПроцессОбъект.Записать();
			
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(БизнесПроцессОбъект.Ссылка);
			НаборЭтапов.Прочитать();
			
			НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборИсполнителей.Отбор.Объект.Установить(БизнесПроцессОбъект.Ссылка);
			НаборИсполнителей.Прочитать();
			
			Для Каждого СтрокаНабора ИЗ НаборИсполнителей Цикл
				
				Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда		// точка действия "Выполнить"
					СтрокаНабора.Исполнитель 				= ЭлементМенеджер;
					НаборЭтапов[1].ДатаВыполнения 			= ТекущаяДата() + 432000; // 5 дней
					НаборЭтапов[1].ВариантВыполненияСтрокой = "Заполнить " + Анкета;
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЭтапов.Записать();
			НаборИсполнителей.Записать();
			
			БизнесПроцессОбъект.Старт();
			
			ЗафиксироватьТранзакцию();
			
			ШаблонСообщения = НСтр("ru = 'Выдано поручение ""Заполнение Анкеты "" для пользователя %1'");
			ТекстСообщения 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЭлементМенеджер);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбновитьНумерациюОбъектов();
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьАнкетуНаСервере(ПараметрыАнкеты)
	
	СоответствиеЗначенийКлассификаторов = ПараметрыАнкеты.СоответствиеЗначенийКлассификаторов;
	
	АнкетаОбъект = Документы.вогАнкета.СоздатьДокумент();
	АнкетаОбъект.Дата 			= ТекущаяДата();
	АнкетаОбъект.Автор 			= Пользователи.ТекущийПользователь();
	АнкетаОбъект.ВариантОпроса 	= ПараметрыАнкеты.ВариантОпроса;
	АнкетаОбъект.Респондент 	= ПараметрыАнкеты.Менеджер;
	АнкетаОбъект.Статус 		= Справочники.вогШаблоныСтатусов.НаСогласовании;
	
	Таблица = АнкетаОбъект.СоставОпроса;
	
	Для Каждого Строка Из ПараметрыАнкеты.ТаблицаДанных Цикл
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("ОбъектОпроса", Строка.ТорговаяТочка);
		
		НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ИдентификаторСтроки  = Новый УникальныйИдентификатор;
			
			СтрокаТаблицы = Таблица.Добавить();
			СтрокаТаблицы.Вопрос 				= ПараметрыАнкеты.Вопрос;
			СтрокаТаблицы.ИдентификаторСтроки 	= ИдентификаторСтроки;
			СтрокаТаблицы.ОбъектОпроса 			= Строка.ТорговаяТочка;
			
		Иначе
			
			СтрокаТаблицы 		= НайденныеСтроки[0];
			ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
			
		КонецЕсли;
		
		СтрокаДопИнфо = АнкетаОбъект.ДополнительнаяИнформацияВопросов.Добавить();
		СтрокаДопИнфо.Вопрос 				= ПараметрыАнкеты.Вопрос;
		СтрокаДопИнфо.ИдентификаторСтроки 	= ИдентификаторСтроки;
		
		Свойство = СоответствиеЗначенийКлассификаторов.Получить(Строка.ЗначениеКлассификатора);
		
		СтрокаДопИнфо.Свойство 				= Свойство;
		СтрокаДопИнфо.Значение 				= Строка.ЗначениеРеквизита;
		
	КонецЦикла;
	
	АнкетаОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат АнкетаОбъект.Ссылка;
	
КонецФункции

#КонецОбласти
