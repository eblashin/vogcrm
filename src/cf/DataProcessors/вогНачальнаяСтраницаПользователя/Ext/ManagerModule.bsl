
Процедура ПолучитьТаблицуМоиЗадачи(Форма = Неопределено, АдресРезультата = "") Экспорт 
	
	//Виджет = Справочники.вогВиджетыРабочегоСтола.МоиЗадачи;
	//НастройкиВиджета = Виджет.НастройкиВиджета.Получить();
	//ТекстВыводаВиджетов = НастройкиВиджета.КодЭлемента;
	//Если Не ПустаяСтрока(НастройкиВиджета.КодФормирования) Тогда
	//	Выполнить(НастройкиВиджета.КодФормирования);	
	//КонецЕсли;
	//
	//СтрокаКартинкиНастройки = Base64Строка(БиблиотекаКартинок.sms4bНастройка.ПолучитьДвоичныеДанные());
	//ТекстВыводаВиджетов = СтрЗаменить(ТекстВыводаВиджетов, "<!--КартинкаНастройки-->", СтрокаКартинкиНастройки);
	//
	//Возврат ТекстВыводаВиджетов;
	
	Запрос = Новый Запрос;
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	РолиПользователя = CRM_БизнесПроцессыСервер.ПолучитьРолиПоПользователю(ТекущийПользователь);
	ОбъектыАдресации = CRM_МетодыМодулейМенеджеровСправочников.ПолучитьВсеПодразделенияРодители(ТекущийПользователь.Подразделение,Истина);
	
	Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", ОбъектыАдресации);
	Запрос.УстановитьПараметр("ПериодПросроченных", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("РолиПользователя", РолиПользователя);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЗадачаИсполнителя.Автор КАК Исполнитель,
			|	CRM_ОбъектыАРМ.Объект КАК Объект,
			|	ВЫБОР
			|		КОГДА CRM_ОбъектыАРМ.КрайнийСрок < &ПериодПросроченных
			|				И CRM_ОбъектыАРМ.КрайнийСрок > &ПустаяДата
			|				И CRM_ОбъектыАРМ.ИзмерениеАРМ <> ""Завершенные""
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Просрочено,
			|	CRM_ОбъектыАРМ.КрайнийСрок КАК Срок,
			|	ЗадачаИсполнителя.Важность КАК Важность,
			|	ЗадачаИсполнителя.ПринятаКИсполнению КАК ПринятаКИсполнению,
			|	CRM_ОбъектыАРМ.ИзмерениеАРМ КАК ИзмерениеАРМ
			|ИЗ
			|	РегистрСведений.CRM_ОбъектыАРМ КАК CRM_ОбъектыАРМ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогИсполнителиРолейИДелегаты КАК вогИсполнителиРолейИДелегаты
			|		ПО CRM_ОбъектыАРМ.Пользователь = вогИсполнителиРолейИДелегаты.РольПользователь
			|			И (вогИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""ПроцессыИЗадачи""))
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ПО CRM_ОбъектыАРМ.Объект = ЗадачаИсполнителя.Ссылка
			|			И (ЗадачаИсполнителя.вогТипЗадачиИсполнителя = ЗНАЧЕНИЕ(Перечисление.вогТипЗадачиИсполнителя.Личная)
			|				ИЛИ ЗадачаИсполнителя.вогТипЗадачиИсполнителя = ЗНАЧЕНИЕ(Перечисление.вогТипЗадачиИсполнителя.Поручение))
			|ГДЕ
			|	(CRM_ОбъектыАРМ.Пользователь В (&Пользователь)
			|			ИЛИ CRM_ОбъектыАРМ.Пользователь В (&РолиПользователя)
			|			ИЛИ вогИсполнителиРолейИДелегаты.ИсполнительДелегат В (&Пользователь))
			|	И CRM_ОбъектыАРМ.НаименованиеАРМ = ""МоиДела""
			|	И ВЫБОР
			|			КОГДА CRM_ОбъектыАРМ.Пользователь ССЫЛКА Справочник.РолиИсполнителей
			|					И CRM_ОбъектыАРМ.Объект.ОсновнойОбъектАдресации ССЫЛКА Справочник.СтруктураПредприятия
			|				ТОГДА CRM_ОбъектыАРМ.Объект.ОсновнойОбъектАдресации В (&ОсновнойОбъектАдресации)
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Срок УБЫВ";

		РезультатЗапроса = Запрос.Выполнить();
	
		ТаблицаЗадач = РезультатЗапроса.Выгрузить();
		
		ПоместитьВоВременноеХранилище(ТаблицаЗадач,АдресРезультата);
		
КонецПроцедуры
	
Процедура ЗаполнитьПриветственнуюИнформацию(ТаблицаПараметров = Неопределено, АдресРезультата = "") Экспорт
	
	ВходящиеСогласования = ТаблицаПараметров.ВходящиеСогласования.Скопировать();
	ДействияВиджетов = ТаблицаПараметров.ДействияВиджетов.Скопировать();
	ЗадачиМне = ТаблицаПараметров.ЗадачиМне.Скопировать();
	История = ТаблицаПараметров.История.Скопировать();
	ИсходящиеПоручения = ТаблицаПараметров.ИсходящиеПоручения.Скопировать();
	ИсходящиеСогласования = ТаблицаПараметров.ИсходящиеСогласования.Скопировать();
	Командировки = ТаблицаПараметров.Командировки.Скопировать();
	Напоминания = ТаблицаПараметров.Напоминания.Скопировать();
	ПланируемыеПоездки = ТаблицаПараметров.ПланируемыеПоездки.Скопировать();
	Почта = ТаблицаПараметров.Почта.Скопировать();
	ПредстоящиеСобытия = ТаблицаПараметров.ПредстоящиеСобытия.Скопировать();
	// +++ VOG Кулаков П.Л. 28.05.2021 DEV-578
	ВыбранныйРейтинг = ТаблицаПараметров.ВыбранныйРейтинг;
	// --- VOG Кулаков П.Л.
			
	ИспользуемыеВиджеты = ИспользуемыеВиджеты();
	
	СтруктураРезультата = Новый Структура;
	
	ДействияВиджетов = ИспользуемыеВиджеты[1].Выгрузить().Скопировать();
	СтруктураРезультата.Вставить("ДействияВиджетов",ДействияВиджетов);
	
	СтруктураРезультата.Вставить("ИсходящиеСогласования",ИсходящиеСогласования);
	СтруктураРезультата.Вставить("Напоминания",Напоминания);
	СтруктураРезультата.Вставить("ПланируемыеПоездки",ПланируемыеПоездки);
	
	Виджет = Справочники.вогВиджетыРабочегоСтола.ВходящиеСогласования;
	НастройкиВиджета = Виджет.НастройкиВиджета.Получить();
	ТекстВыводаВиджетов = НастройкиВиджета.КодЭлемента;
	Если Не ПустаяСтрока(НастройкиВиджета.КодФормирования) Тогда
		Выполнить(НастройкиВиджета.КодФормирования);	
	КонецЕсли;
	
	СтрокаКартинкиНастройки = Base64Строка(БиблиотекаКартинок.sms4bНастройка.ПолучитьДвоичныеДанные());
	ТекстВыводаВиджетов = СтрЗаменить(ТекстВыводаВиджетов, "<!--КартинкаНастройки-->", СтрокаКартинкиНастройки);
	СтруктураРезультата.Вставить("ВходящиеСогласования",Новый Структура("Таблица,ТекстHTML",ВходящиеСогласования,ТекстВыводаВиджетов));
	
	Виджет = Справочники.вогВиджетыРабочегоСтола.МоиЗадачи;
	НастройкиВиджета = Виджет.НастройкиВиджета.Получить();
	ТекстВыводаВиджетов = НастройкиВиджета.КодЭлемента;
	Если Не ПустаяСтрока(НастройкиВиджета.КодФормирования) Тогда
		Выполнить(НастройкиВиджета.КодФормирования);	
	КонецЕсли;
	
	ТекстВыводаВиджетов = СтрЗаменить(ТекстВыводаВиджетов, "<!--КартинкаНастройки-->", СтрокаКартинкиНастройки);
	СтруктураРезультата.Вставить("ЗадачиМне",Новый Структура("Таблица,ТекстHTML",ЗадачиМне,ТекстВыводаВиджетов));
	
	Виджет = Справочники.вогВиджетыРабочегоСтола.История;
	НастройкиВиджета = Виджет.НастройкиВиджета.Получить();
	ТекстВыводаВиджетов = НастройкиВиджета.КодЭлемента;
	Если Не ПустаяСтрока(НастройкиВиджета.КодФормирования) Тогда
		Выполнить(НастройкиВиджета.КодФормирования);	
	КонецЕсли;
	
	ТекстВыводаВиджетов = СтрЗаменить(ТекстВыводаВиджетов, "<!--КартинкаНастройки-->", СтрокаКартинкиНастройки);
	СтруктураРезультата.Вставить("История",Новый Структура("Таблица,ТекстHTML",История,ТекстВыводаВиджетов));
	
	Виджет = Справочники.вогВиджетыРабочегоСтола.ИсходящиеПоручения;
	НастройкиВиджета = Виджет.НастройкиВиджета.Получить();
	ТекстВыводаВиджетов = НастройкиВиджета.КодЭлемента;
	Если Не ПустаяСтрока(НастройкиВиджета.КодФормирования) Тогда
		Выполнить(НастройкиВиджета.КодФормирования);	
	КонецЕсли;
	
	ТекстВыводаВиджетов = СтрЗаменить(ТекстВыводаВиджетов, "<!--КартинкаНастройки-->", СтрокаКартинкиНастройки);
	СтруктураРезультата.Вставить("ИсходящиеПоручения",Новый Структура("Таблица,ТекстHTML",ИсходящиеПоручения,ТекстВыводаВиджетов));
	
	Виджет = Справочники.вогВиджетыРабочегоСтола.Командировки;
	НастройкиВиджета = Виджет.НастройкиВиджета.Получить();
	ТекстВыводаВиджетов = НастройкиВиджета.КодЭлемента;
	Если Не ПустаяСтрока(НастройкиВиджета.КодФормирования) Тогда
		Выполнить(НастройкиВиджета.КодФормирования);	
	КонецЕсли;
	
	ТекстВыводаВиджетов = СтрЗаменить(ТекстВыводаВиджетов, "<!--КартинкаНастройки-->", СтрокаКартинкиНастройки);
	СтруктураРезультата.Вставить("Командировки",Новый Структура("Таблица,ТекстHTML",Командировки,ТекстВыводаВиджетов));
	
	Виджет = Справочники.вогВиджетыРабочегоСтола.Почта;
	НастройкиВиджета = Виджет.НастройкиВиджета.Получить();
	ТекстВыводаВиджетов = НастройкиВиджета.КодЭлемента;
	Если Не ПустаяСтрока(НастройкиВиджета.КодФормирования) Тогда
		Выполнить(НастройкиВиджета.КодФормирования);	
	КонецЕсли;
	
	ТекстВыводаВиджетов = СтрЗаменить(ТекстВыводаВиджетов, "<!--КартинкаНастройки-->", СтрокаКартинкиНастройки);
	СтруктураРезультата.Вставить("Почта",Новый Структура("Таблица,ТекстHTML",Почта,ТекстВыводаВиджетов));
	
	Виджет = Справочники.вогВиджетыРабочегоСтола.ПредстоящиеСобытия;
	НастройкиВиджета = Виджет.НастройкиВиджета.Получить();
	ТекстВыводаВиджетов = НастройкиВиджета.КодЭлемента;
	Если Не ПустаяСтрока(НастройкиВиджета.КодФормирования) Тогда
		Выполнить(НастройкиВиджета.КодФормирования);	
	КонецЕсли;
	
	ТекстВыводаВиджетов = СтрЗаменить(ТекстВыводаВиджетов, "<!--КартинкаНастройки-->", СтрокаКартинкиНастройки);
	СтруктураРезультата.Вставить("ПредстоящиеСобытия",Новый Структура("Таблица,ТекстHTML",ПредстоящиеСобытия,ТекстВыводаВиджетов));
	
	// +++ VOG Кулаков П.Л. 28.05.2021 DEV-578
	Виджет = Справочники.вогВиджетыРабочегоСтола.Рейтинги;
	НастройкиВиджета = Виджет.НастройкиВиджета.Получить();
	ТекстВыводаВиджетов = НастройкиВиджета.КодЭлемента;
	Если Не ПустаяСтрока(НастройкиВиджета.КодФормирования) Тогда
		Выполнить(НастройкиВиджета.КодФормирования);	
	КонецЕсли;
	
	ТекстВыводаВиджетов = СтрЗаменить(ТекстВыводаВиджетов, "<!--КартинкаНастройки-->", СтрокаКартинкиНастройки);
	СтруктураРезультата.Вставить("Рейтинги",Новый Структура("Таблица,ТекстHTML",Неопределено,ТекстВыводаВиджетов));
	// --- VOG Кулаков П.Л.
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата,АдресРезультата);
	
КонецПроцедуры

Функция ОтображаемыеВиджеты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогВиджетыРабочегоСтола.Наименование КАК Наименование,
		|	вогВиджетыРабочегоСтола.Ссылка КАК Виджет,
		|	ЕСТЬNULL(вогНастройкиНачальнойСтраницы.Порядок, вогВиджетыРабочегоСтола.Порядок) КАК Порядок,
		|	ЕСТЬNULL(вогНастройкиНачальнойСтраницы.Отображать, ИСТИНА) КАК Отображать
		|ИЗ
		|	Справочник.вогВиджетыРабочегоСтола КАК вогВиджетыРабочегоСтола
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогНастройкиНачальнойСтраницы КАК вогНастройкиНачальнойСтраницы
		|		ПО (вогНастройкиНачальнойСтраницы.Виджет = вогВиджетыРабочегоСтола.Ссылка)
		|			И (вогНастройкиНачальнойСтраницы.Пользователь = &Пользователь)
		|ГДЕ
		|	НЕ вогВиджетыРабочегоСтола.Отключен
		|	И НЕ вогВиджетыРабочегоСтола.ПометкаУдаления
		|	И вогВиджетыРабочегоСтола.Предопределенный
		|	И ЕСТЬNULL(вогНастройкиНачальнойСтраницы.Отображать, ИСТИНА)
		// +++ VOG Кулаков П.Л. 18.02.2021 DEV-177
		|	И ВЫБОР
		|			КОГДА &ВыводитьВиджетПродажи
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ вогВиджетыРабочегоСтола.Ссылка <> ЗНАЧЕНИЕ(Справочник.вогВиджетыРабочегоСтола.МоиПродажи) 
		|					И вогВиджетыРабочегоСтола.Ссылка <> ЗНАЧЕНИЕ(Справочник.вогВиджетыРабочегоСтола.МоиПродажиКвартал)
		|		КОНЕЦ
		// --- VOG Кулаков П.Л.
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	
	Запрос.УстановитьПараметр("Пользователь",Пользователи.ТекущийПользователь());
	// +++ VOG Кулаков П.Л. 18.02.2021 DEV-177
	Запрос.УстановитьПараметр("ВыводитьВиджетПродажи",ВыводитьВиджетПродажи());
	// --- VOG Кулаков П.Л.
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ИспользуемыеВиджеты() Экспорт	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогВиджетыРабочегоСтола.Ссылка КАК Виджет,
		|	вогВиджетыРабочегоСтола.НастройкиВиджета КАК НастройкиВиджета,
		|	ЕСТЬNULL(вогНастройкиНачальнойСтраницы.Отображать, ИСТИНА) КАК Отображать,
		|	ЕСТЬNULL(вогНастройкиНачальнойСтраницы.Порядок, вогВиджетыРабочегоСтола.Порядок) КАК Порядок
		|ИЗ
		|	Справочник.вогВиджетыРабочегоСтола КАК вогВиджетыРабочегоСтола
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.вогНастройкиНачальнойСтраницы КАК вогНастройкиНачальнойСтраницы
		|		ПО (вогНастройкиНачальнойСтраницы.Виджет = вогВиджетыРабочегоСтола.Ссылка)
		|			И (вогНастройкиНачальнойСтраницы.Пользователь = &Пользователь)
		|ГДЕ
		|	вогВиджетыРабочегоСтола.Отключен = ЛОЖЬ
		|	И вогВиджетыРабочегоСтола.ПометкаУдаления = ЛОЖЬ
		// +++ VOG Кулаков П.Л. 18.02.2021 DEV-177
		|	И ВЫБОР
		|			КОГДА &ВыводитьВиджетПродажи
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ вогВиджетыРабочегоСтола.Ссылка <> ЗНАЧЕНИЕ(Справочник.вогВиджетыРабочегоСтола.МоиПродажи)
		|					И вогВиджетыРабочегоСтола.Ссылка <> ЗНАЧЕНИЕ(Справочник.вогВиджетыРабочегоСтола.МоиПродажиКвартал)		
		|		КОНЕЦ
		// --- VOG Кулаков П.Л.
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вогВиджетыРабочегоСтолаДействия.Ссылка КАК Виджет,
		|	вогВиджетыРабочегоСтолаДействия.Действие КАК Действие,
		|	вогВиджетыРабочегоСтолаДействия.ВыполняемыйКод КАК ВыполняемыйКод
		|ИЗ
		|	Справочник.вогВиджетыРабочегоСтола.Действия КАК вогВиджетыРабочегоСтолаДействия
		|ГДЕ
		|	вогВиджетыРабочегоСтолаДействия.Ссылка.Отключен = ЛОЖЬ
		|	И вогВиджетыРабочегоСтолаДействия.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	вогВиджетыРабочегоСтолаДействия.Ссылка.Порядок";
	Запрос.УстановитьПараметр("Пользователь",Пользователи.ТекущийПользователь());
	// +++ VOG Кулаков П.Л. 18.02.2021 DEV-177
	Запрос.УстановитьПараметр("ВыводитьВиджетПродажи",ВыводитьВиджетПродажи());
	// --- VOG Кулаков П.Л.
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// +++ VOG Кулаков П.Л. 18.02.2021 DEV-177
Функция ВыводитьВиджетПродажи() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ВыводитьВиджетПродажи = Ложь;
	Если Пользователи.РолиДоступны("вогСобственник",Пользователи.ТекущийПользователь(),Ложь) Тогда
		ВыводитьВиджетПродажи = Истина;
	Иначе
		МассивРолейДляПроверки = ПолучитьМассивРолейДляОтображенияВиджетаПродажи();
		Для Каждого РольПользователя Из ПараметрыСеанса.вогРолиИсполнителя Цикл
			Если МассивРолейДляПроверки.Найти(РольПользователя) <> Неопределено Тогда
				ВыводитьВиджетПродажи = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВыводитьВиджетПродажи;
	
КонецФункции // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 18.02.2021 DEV-177
Функция ПолучитьМассивРолейДляОтображенияВиджетаПродажи()
	
	МассивРолей = Новый Массив;
	МассивРолей.Добавить(Справочники.РолиИсполнителей.ПолучитьСсылку(Новый УникальныйИдентификатор("2599db5e-1ba3-11e8-92c3-005056bcf152")));// Генеральный директор ГК ВОГ 
	МассивРолей.Добавить(Справочники.РолиИсполнителей.ПолучитьСсылку(Новый УникальныйИдентификатор("35c09687-1ba3-11e8-92c3-005056bcf152")));//Служба безопасности
	МассивРолей.Добавить(Справочники.РолиИсполнителей.ПолучитьСсылку(Новый УникальныйИдентификатор("bd6a05b7-cb8c-11e8-a684-005056bc3fe8")));//Зам. ГД по безопасности и юридическому сопровождению
	МассивРолей.Добавить(Справочники.РолиИсполнителей.ПолучитьСсылку(Новый УникальныйИдентификатор("3c962c06-1ba3-11e8-92c3-005056bcf152")));//Финансовый директор
	МассивРолей.Добавить(Справочники.РолиИсполнителей.ПолучитьСсылку(Новый УникальныйИдентификатор("81fc683a-cb9a-11e8-a684-005056bc3fe8")));//Руководитель отдела финансового контроля
	МассивРолей.Добавить(Справочники.РолиИсполнителей.ПолучитьСсылку(Новый УникальныйИдентификатор("35c09688-1ba3-11e8-92c3-005056bcf152")));//Финансовый контролер
	МассивРолей.Добавить(Справочники.РолиИсполнителей.ПолучитьСсылку(Новый УникальныйИдентификатор("a75b59f5-1ba2-11e8-92c3-005056bcf152")));//Директор по развитию товарного направления
	МассивРолей.Добавить(Справочники.РолиИсполнителей.ПолучитьСсылку(Новый УникальныйИдентификатор("06a26271-2d0b-11e8-bf89-005056bcf152")));//Генеральный директор (Филиал/Подразделение)
	МассивРолей.Добавить(Справочники.РолиИсполнителей.ПолучитьСсылку(Новый УникальныйИдентификатор("3e8e86d6-2e78-11e8-bb16-005056bcf152")));//Руководитель товарного направления
	МассивРолей.Добавить(Справочники.РолиИсполнителей.ПолучитьСсылку(Новый УникальныйИдентификатор("cb2cd964-cad8-11e8-a684-005056bc3fe8")));//Руководитель регионального отдела
	МассивРолей.Добавить(Справочники.РолиИсполнителей.ПолучитьСсылку(Новый УникальныйИдентификатор("2403e82e-cad9-11e8-a684-005056bc3fe8")));//Менеджер по продажам
	МассивРолей.Добавить(Справочники.РолиИсполнителей.ПолучитьСсылку(Новый УникальныйИдентификатор("21bee87e-caef-11e8-a684-005056bc3fe8")));//Координатор отдела продаж
	
	Возврат МассивРолей;
	
КонецФункции // --- VOG Кулаков П.Л.

