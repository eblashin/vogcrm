&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.CRM_ОтправкаРассылокЭлектронныхПисем);
	ПериодОтправкиПисемЭлектроннойРассылки = Задание.Расписание.ПериодПовтораВТечениеДня;
	
	УстановитьДоступность();
	
	Если НЕ НаборКонстант.ИспользоватьХарактеристикиНоменклатуры Тогда
		Элементы.ИспользоватьХарактеристикиНоменклатуры.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Иначе
		Элементы.ИспользоватьХарактеристикиНоменклатуры.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
	// Видимость команд
	Если Метаданные.Имя <> "CRM" Тогда
		Элементы.ГруппаСправочникиГруппыТоваров.Видимость = Ложь;
		Элементы.ГруппаСправочникиСкидкиНаценки.Видимость = Ложь;
		Элементы.ГруппаКонстантыВеденияПродаж.Видимость   = Ложь;
	КонецЕсли;
	
	Элементы.КомандаОписаниеUniSender.Видимость = (НаборКонстант.CRM_СпособОтправкиРассылок = ПредопределенноеЗначение("Перечисление.CRM_СпособыОтправкиРассылок.UniSender"));
	
	ИмяФОИспользуетсяСегментацияНоменклатуры = ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), "CRM_ИспользоватьСегментацию", "ИспользоватьСегментыНоменклатуры");
	Элементы.ОткрытьСегментыНоменклатуры.Видимость = ПолучитьФункциональнуюОпцию(ИмяФОИспользуетсяСегментацияНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
// Параметры:
//	ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//	Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//	Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // Такие событие не обрабатываются.
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти // Клиент

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

#КонецОбласти // ВызовСервера

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьABCXYZКлассификациюПартнеровПоВыручке" 
	ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж"
	ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ГруппаПлановаяЧастотаКонтактовСКлиентами.Доступность = (НаборКонстант.ИспользоватьABCXYZКлассификациюПартнеровПоВыручке
			ИЛИ НаборКонстант.ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж);
	КонецЕсли;
	Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.CRM_ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисем;
		
		Элементы.CRM_КоличествоПисемЭлектроннойРассылкиВОтправляемомПакете.Доступность 					= ЗначениеКонстанты;
		Элементы.ПериодОтправкиПисемЭлектроннойРассылки.Доступность 									= ЗначениеКонстанты;
	КонецЕсли;
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьАнкетирование" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.CRM_АдресWebДоступа.Видимость = НаборКонстант.ИспользоватьАнкетирование;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти // Сервер

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область Классификация

&НаКлиенте
Процедура CRM_ИспользоватьСегментациюПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗначенияКлассификаторов(Команда)
	ОткрытьФорму("Справочник.CRM_ЗначенияКлассификаторов.ФормаСписка",,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСегментыКлиентов(Команда)
	ОткрытьФорму("Справочник.СегментыПартнеров.ФормаСписка",,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСегментыНоменклатуры(Команда)
	ОткрытьФорму("Справочник.СегментыНоменклатуры.ФормаСписка",,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьABCXYZКлассификациюПартнеровПоВыручкеПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродажПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПлановаяЧастотаКонтактовAПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПлановаяЧастотаКонтактовBПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПлановаяЧастотаКонтактовCПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПлановаяЧастотаКонтактовНеКлассифицированыхПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИспользоватьКлассификаторыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти // Классификация

#Область Рассылки

&НаКлиенте
Процедура ОткрытьСпискиРассылок(Команда)
	ОткрытьФорму("Справочник.CRM_СпискиРассылок.ФормаСписка",,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныРассылок(Команда)
	ОткрытьФорму("Справочник.CRM_ШаблоныРассылки.ФормаСписка",,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИспользоватьРегламентноеЗаданиеОтправкиРассылокЭлектронныхПисемПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_КоличествоПисемЭлектроннойРассылкиВОтправляемомПакетеПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПериодОтправкиПисемЭлектроннойРассылкиПриИзменении(Элемент)
	ПериодОтправкиПисемЭлектроннойРассылкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПериодОтправкиПисемЭлектроннойРассылкиПриИзмененииНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.CRM_ОтправкаРассылокЭлектронныхПисем);
	Задание.Расписание.ПериодПовтораВТечениеДня = ПериодОтправкиПисемЭлектроннойРассылки;
	Задание.Записать();
КонецПроцедуры

#КонецОбласти // Рассылки

#Область Анкетирование

&НаКлиенте
Процедура ИспользоватьАнкетированиеПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_АдресWebДоступаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВопросыДляАнкетирования(Команда)
	ОткрытьФорму("ПланВидовХарактеристик.ВопросыДляАнкетирования.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

#КонецОбласти // Анкетирование

#Область Маркетинг

&НаКлиенте
Процедура ОткрытьМаркетинговыеМероприятия(Команда)
	ОткрытьФорму("Справочник.МаркетинговыеМероприятия.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыМаркетинговыхМероприятий(Команда)
	ОткрытьФорму("Справочник.CRM_ВидыМаркетинговыхКампаний.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНаправленияДеятельности(Команда)
	ОткрытьФорму("Справочник.НаправленияДеятельности.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаналыРекламныхВоздействий(Команда)
	ОткрытьФорму("ПланВидовХарактеристик.КаналыРекламныхВоздействий.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ОтказСнятьФункциональнаяОпцияИспользоватьСкидкиНаценки() 
	
	Отказ = Ложь;
	
	ВыборкаВидыСкидокНаценок = Справочники["ВидыСкидокНаценок"].Выбрать();
	Пока ВыборкаВидыСкидокНаценок.Следующий() Цикл
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ВыборкаВидыСкидокНаценок.Ссылка);
		ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
		
		Если ТаблицаСсылок.Количество() > 0 Тогда
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'В базе используются виды скидок, наценок! Снятие опции запрещено!'");	
			Сообщение.Поле = "НаборКонстант.ФункциональнаяОпцияИспользоватьСкидкиНаценки";
			Сообщение.Сообщить();
			
			Отказ = Истина;
			Прервать;
		
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат Отказ;
	
КонецФункции  

&НаСервере
Функция МожноОтключитьКонстантуИспользоватьСкидкиНаценки()
	
	// Если есть ссылки на виды скидок в документах, то нельзя снять флаг ФункциональнаяОпцияИспользоватьСкидкиНаценки.
	Если Константы["ФункциональнаяОпцияИспользоватьСкидкиНаценки"].Получить() <> НаборКонстант.ФункциональнаяОпцияИспользоватьСкидкиНаценки 
		И (НЕ НаборКонстант.ФункциональнаяОпцияИспользоватьСкидкиНаценки) И ОтказСнятьФункциональнаяОпцияИспользоватьСкидкиНаценки() Тогда
		НаборКонстант.ФункциональнаяОпцияИспользоватьСкидкиНаценки = Истина;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ФункциональнаяОпцияИспользоватьСкидкиНаценкиПриИзменении(Элемент)
	Если МожноОтключитьКонстантуИспользоватьСкидкиНаценки() Тогда
		Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыСкидокНаценок(Команда)
	СтрокаИмяФормы = "Справочник.ВидыСкидокНаценок.ФормаСписка";
	ОткрытьФорму(СтрокаИмяФормы, , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыЦен(Команда)
	ОткрытьФорму("Справочник.ВидыЦен.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЦеновыеГруппы(Команда)
	ОткрытьФорму("Справочник.ЦеновыеГруппы.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНоменклатурныеГруппы(Команда)
	СтрокаИмяФормы = "Справочник.НоменклатурныеГруппы.ФормаСписка";
	ОткрытьФорму(СтрокаИмяФормы, , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтавкиНДС(Команда)
	СтрокаИмяФормы = "Справочник.СтавкиНДС.ФормаСписка";
	ОткрытьФорму(СтрокаИмяФормы, , ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция ОтказСнятьФункциональнаяОпцияИспользоватьХарактеристики() 
	
	ЕстьДвижения = Ложь;
	СписокРегистров = Новый СписокЗначений;
	СписокРегистров.Добавить("CRM_Продажи");
	СписокРегистров.Добавить("CRM_Предложения");
	СчетчикРегистровНакопления = 0;
	Запрос = Новый Запрос;
	Для каждого РегистрНакопления Из СписокРегистров Цикл
		Запрос.Текст = Запрос.Текст + 
			?(Запрос.Текст = "",
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1", 
				" 
				|
				|ОБЪЕДИНИТЬ ВСЕ 
				|
				|ВЫБРАТЬ ПЕРВЫЕ 1 ") + "
				|
				|	РегистрНакопления" + РегистрНакопления.Значение + ".ХарактеристикаНоменклатуры
				|ИЗ
				|	РегистрНакопления." + РегистрНакопления.Значение + " КАК РегистрНакопления" + РегистрНакопления.Значение + "
			    |ГДЕ
			    |	РегистрНакопления" + РегистрНакопления.Значение + ".ХарактеристикаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
		
		СчетчикРегистровНакопления = СчетчикРегистровНакопления + 1;
		
		Если СчетчикРегистровНакопления > 3 Тогда
		    СчетчикРегистровНакопления = 0;
			Попытка
				РезультатЗапроса = Запрос.Выполнить();
				ЕстьДвижения = НЕ РезультатЗапроса.Пустой();
			Исключение
				
			КонецПопытки;
			
			Если ЕстьДвижения Тогда
				Прервать;
			КонецЕсли; 
			Запрос.Текст = "";
		КонецЕсли;
	КонецЦикла;
	
	Если СчетчикРегистровНакопления > 0 Тогда
		Попытка
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ЕстьДвижения = Истина;
			КонецЕсли;
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	
	Если ЕстьДвижения Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'В базе есть движения по характеристикам! Снятие флага запрещено!'");	
		Сообщение.Поле = "НаборКонстант.ИспользоватьХарактеристикиНоменклатуры";
		Сообщение.Сообщить(); 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции  

&НаСервере
Функция МожноОтключитьКонстантуИспользоватьХарактеристики()
	
	// Если характетистики уже используются в движениях документов, то нельзя снять флаг
	// ИспользоватьХарактеристикиНоменклатуры.
	Если Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() <> НаборКонстант.ИспользоватьХарактеристикиНоменклатуры 
		И (НЕ НаборКонстант.ИспользоватьХарактеристикиНоменклатуры) И ОтказСнятьФункциональнаяОпцияИспользоватьХарактеристики() Тогда
		НаборКонстант.ИспользоватьХарактеристикиНоменклатуры = Истина;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ФункциональнаяОпцияИспользоватьХарактеристикиПриИзменении(Элемент)
	
	Если МожноОтключитьКонстантуИспользоватьХарактеристики() Тогда
		Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонецЕсли;	
	
	Если НЕ НаборКонстант.ИспользоватьХарактеристикиНоменклатуры Тогда
		Элементы.ИспользоватьХарактеристикиНоменклатуры.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Иначе
		Элементы.ИспользоватьХарактеристикиНоменклатуры.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмеренияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ЗаполнятьПервичныйИнтересПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастроекПервичногоИнтереса()

	Если НаборКонстант.ФиксироватьПервичныйИнтерес Тогда
	
		Элементы.CRM_ЗаполнятьПервичныйИнтерес.Доступность = Истина;
		
	Иначе
		
		Элементы.CRM_ЗаполнятьПервичныйИнтерес.Доступность = Ложь;
		НаборКонстант.CRM_ЗаполнятьПервичныйИнтерес = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФиксироватьПервичныйИнтересПриИзменении(Элемент)
	ПриИзмененииНастроекПервичногоИнтереса();
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныАнкет(Команда)
	ОткрытьФорму("Справочник.ШаблоныАнкет.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура CRM_СпособОтправкиРассылокПриИзменении(Элемент)
	Элементы.КомандаОписаниеUniSender.Видимость = (НаборКонстант.CRM_СпособОтправкиРассылок = ПредопределенноеЗначение("Перечисление.CRM_СпособыОтправкиРассылок.UniSender"));
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОписаниеUniSender(Команда)
	
	Если НаборКонстант.CRM_СпособОтправкиРассылок = ПредопределенноеЗначение("Перечисление.CRM_СпособыОтправкиРассылок.UniSender") Тогда
		ПараметрыФормы = Новый Структура("Макет, Заголовок", "Интеграции_UniSender", НСтр("ru = 'UniSender'"));
		ОткрытьФорму("Обработка.CRM_БыстроеОсвоение.Форма",ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Маркетинг

//+вог

&НаКлиенте
Процедура ОткрытьВариантыСписковУправленияКлассификацией(Команда)
	ОткрытьФорму("Справочник.вогВариантыСписковУправленияКлассификацией.ФормаСписка",,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура вогИспользоватьНастройкиЗанятостиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура вогНастройкаЗанятостиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьТорговыеМарки(Команда)
	ОткрытьФорму("Справочник.вогТорговыеМарки.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьДержателиТорговыхМарок(Команда)
	ОткрытьФорму("Справочник.вогДержателиТорговыхМарок.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры
//-вог
