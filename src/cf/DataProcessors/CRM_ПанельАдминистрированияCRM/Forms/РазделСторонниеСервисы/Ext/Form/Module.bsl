
&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти // Клиент

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

#КонецОбласти // ВызовСервера

#Область Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		//// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		//// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
		//Если РеквизитПутьКДанным = "ВключитьВерсионированиеУстановкиЦенНоменклатуры" Тогда
		//	НаборКонстант.ИспользоватьВерсионированиеОбъектов = Истина;
		//	КонстантаИмя = "ИспользоватьВерсионированиеОбъектов";
		//КонецЕсли;
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		//Если ОбщегоНазначенияУТПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение) Тогда
		//	Прочитать();
		//КонецЕсли;
		
		//СтандартныеПодсистемыКлиентСервер.РезультатВыполненияДобавитьОповещениеОткрытыхФорм(Результат,
		//	"Запись_НаборКонстант", ОбщегоНазначенияУТПовтИсп.ПолучитьСтруктуруПодчиненныхКонстант(КонстантаИмя), КонстантаИмя);
		//// СтандартныеПодсистемы.ВариантыОтчетов
		//ВариантыОтчетов.ДобавитьОповещениеПриИзмененииЗначенияКонстанты(Результат, КонстантаМенеджер);
		//// Конец СтандартныеПодсистемы.ВариантыОтчетов
	КонецЕсли;
	
	//Если РеквизитПутьКДанным = "ВключитьВерсионированиеУстановкиЦенНоменклатуры" Тогда
	//	
	//	ОбъектыДляВерсионирования = Новый Соответствие;
	//	ОбъектыДляВерсионирования.Вставить("Документ.УстановкаЦенНоменклатуры", "ВерсионироватьПриЗаписи");
	//	
	//	Результат.Вставить("ВерсионированиеВключено",
	//		ОбщегоНазначенияУТ.ВключитьВерсионированиеОбъектов(ОбъектыДляВерсионирования));
	//
	//КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	// +Google
	Если РеквизитПутьКДанным = "НаборКонстант.CRM_СинхронизироватьКалендарьСКалендаремGoogle" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ГруппаКалендарьКалендарьGoogle.Доступность = НаборКонстант.CRM_СинхронизироватьКалендарьСКалендаремGoogle; 
	КонецЕсли;
	// -Google
	
	Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьОбменСMSExchange" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ГруппаЭлементыНастроекОбменаСMSExchange.Доступность = НаборКонстант.CRM_ИспользоватьОбменСMSExchange;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьИнтеграциюQlikSense" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ГруппаQlikДоступ.Видимость = НаборКонстант.CRM_ИспользоватьИнтеграциюQlikSense И Элементы.CRM_ИспользоватьИнтеграциюQlikSense.Доступность;
		Если Элементы.ГруппаQlikДоступ.Видимость Тогда
			QlikСоздатьНового = Истина;
			ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
			Для Каждого тПользователь Из ПользователиИБ Цикл
				Если тПользователь.Роли.Содержит(Метаданные.Роли.CRM_ИнтеграцияQlikSense) Тогда
					QlikЛогин = тПользователь.Имя;
					QlikПароль = "**********";
					Элементы.QlikСоздатьПользователяИБ.Доступность = Ложь;
					QlikСоздатьНового = Ложь;
					тПользователь.АутентификацияСтандартная = Истина;
					тПользователь.Записать();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
			Для Каждого тПользователь Из ПользователиИБ Цикл
				Если тПользователь.Роли.Содержит(Метаданные.Роли.CRM_ИнтеграцияQlikSense) Тогда
					тПользователь.АутентификацияСтандартная = Ложь;
					тПользователь.Записать();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НЕ QlikСоздатьНового Тогда
			Элементы.QlikСоздатьПользователяИБ.Заголовок = НСтр("ru = 'Обновить пользователя Qlik Sense'");
			Элементы.QlikСоздатьПользователяИБ.Доступность = Ложь;
		Иначе
			Элементы.QlikСоздатьПользователяИБ.Заголовок = НСтр("ru = 'Создать пользователя Qlik Sense'");
			Элементы.QlikСоздатьПользователяИБ.Доступность = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(QlikЛогин) Тогда
			QlikЛогин = "ODATA";
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.CRM_ИспользоватьИнтеграциюСМессенджерами" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ДекорацияУчетныеЗаписиМессенджеров.Доступность = НаборКонстант.CRM_ИспользоватьИнтеграциюСМессенджерами;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляПолучения(УчетнаяЗапись)
	Возврат УчетнаяЗапись.ИспользоватьДляПолучения;
КонецФункции

#КонецОбласти // Сервер

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть форму настройки. Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.CRM_ИспользоватьИнтеграциюQlikSense.Доступность = CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().Обработка_CRM_QlikSense_ПриСозданииНаСервере();
		
	ЭтоКОРППоставка = CRM_ЛицензированиеСервер.ВариантПоставкиКОРП();
	Элементы.CRM_ИспользоватьОбменСOutlook.Доступность			 = ЭтоКОРППоставка;
	Элементы.CRM_ИспользоватьОбменСMSExchange.Доступность		 = ЭтоКОРППоставка;
	Элементы.ГруппаЭлементыНастроекОбменаСMSExchange.Доступность = ЭтоКОРППоставка;
	
	// + UniSender
	ДанныеДоступаКUniSender = CRM_ИнтеграцияСUniSenderСервер.ДанныеДоступаКUniSender();
	CRM_КлючДоступаКUniSender = ДанныеДоступаКUniSender.КлючДоступа;
	Если ЗначениеЗаполнено(CRM_КлючДоступаКUniSender) Тогда
		Элементы.ЗарегистрироватьПользователяUniSender.Видимость = Ложь;
		СпискиКонтактов = CRM_ИнтеграцияСUniSenderКлиентСервер.СпискиКонтактовUniSender(CRM_КлючДоступаКUniSender);
		Элементы.CRM_СписокКонтактовUniSenderДляОповещений.СписокВыбора.Очистить();
		Элементы.CRM_СписокКонтактовUniSenderДляРассылок.СписокВыбора.Очистить();
		Для каждого Список из СпискиКонтактов Цикл
			Элементы.CRM_СписокКонтактовUniSenderДляОповещений.СписокВыбора.Добавить(Список.Значение, Список.Представление);
			Элементы.CRM_СписокКонтактовUniSenderДляРассылок.СписокВыбора.Добавить(Список.Значение, Список.Представление);
		КонецЦикла;
	КонецЕсли;
	CRM_СписокКонтактовUniSenderДляОповещений = ДанныеДоступаКUniSender.СписокДляОповещений;
	CRM_СписокКонтактовUniSenderДляРассылок = ДанныеДоступаКUniSender.СписокДляРассылок;
	// - UniSender
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ДействияПриЗакрытииНаСервере();
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
// Параметры:
//	ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//	Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//	Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // Такие событие не обрабатываются.
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Серверный обработчик события формы "ПриЗакрытии".
//
Процедура ДействияПриЗакрытииНаСервере()
	// Если отключен обмен с MS Exchange - проверяем, используется ли регламентное задание, если да - отключаем его.
	Если Не Константы.CRM_ИспользоватьОбменСMSExchange.Получить() Тогда
		Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.CRM_ОбменДаннымиСMSExchange);
		Если Задание.Использование Тогда
			Задание.Использование = Ложь;
			Задание.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область НастройкиОбменаСOutlook

&НаКлиенте
Процедура CRM_ИспользоватьОбменСOutlookПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти // НастройкиОбменаСOutlook

#Область НастройкиОбменаСMSExchange

//
&НаКлиенте
Процедура CRM_ИспользоватьОбменСMSExchangeПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСерверыMSExchangeНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_СерверыMSExchange.ФормаСписка",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУчетныеЗаписиMSExchangeНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_УчетныеЗаписиПользователейMSExchange.ФормаСписка",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодключенияКMSExchangeНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_ПодключенияКMSExchange.ФормаСписка",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиОбменаСMSExchangeНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_НастройкиОбменаСMSExchange.ФормаСписка",, ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторРегламентногоЗаданияCRM_ОбменДаннымиСMSExchange()
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.CRM_ОбменДаннымиСMSExchange);
	Возврат Задание.УникальныйИдентификатор;
КонецФункции

&НаКлиенте
Процедура ДекорацияНастройкаРегламентногоЗаданияОбменаСMSExchangeНажатие(Элемент)
	ИдентификаторРегламентногоЗадания = ПолучитьИдентификаторРегламентногоЗаданияCRM_ОбменДаннымиСMSExchange();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор",	ИдентификаторРегламентногоЗадания);
	ПараметрыФормы.Вставить("Действие",			"Изменить");
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти // НастройкиОбменаСMSExchange

#Область НастройкиРаботыСGoogle

&НаКлиенте
Процедура ДекорацияСсылкаУзнатьБольшеНажатие(Элемент)
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер), "http://daclouds.ru/#order_subscribe");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПолучитьПлатныйАккаунтНажатие(Элемент)
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ОбработчикОповещенияБезДействия", CRM_ОбщегоНазначенияКлиентСервер), "http://daclouds.ru/?ConnectApps=yes#Order_apps");
КонецПроцедуры

&НаКлиенте
Процедура CRM_СинхронизироватьКалендарьСКалендаремGoogleПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура CRM_УчетнаяЗаписьПолученияОповещенийGAPIПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОписаниеGoogle(Команда)
	
	ПараметрыФормы = Новый Структура("Макет, Заголовок", "Интеграции_Google_Calendar", НСтр("ru = 'Синхронизация с календарями Google'"));
	ОткрытьФорму("Обработка.CRM_БыстроеОсвоение.Форма",ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти //НастройкиРаботыСGoogle

#Область НастройкиРаботыСQlikSense

&НаКлиенте
Процедура CRM_ИспользоватьИнтеграциюQlikSenseПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	УстановитьПараметрыQlikSense();
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыQlikSense()
	
	Если НЕ НаборКонстант.CRM_ИспользоватьИнтеграциюQlikSense Тогда
		Массив = Новый Массив;
		УстановитьСоставСтандартногоИнтерфейсаOData(Массив);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОписаниеQlikSense(Команда)

	ПараметрыФормы = Новый Структура("Макет, Заголовок", "Интеграции_QlikSense", НСтр("ru = 'Qlik Sense'"));
	ОткрытьФорму("Обработка.CRM_БыстроеОсвоение.Форма",ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура QlikСоздатьПользователяИБ(Команда)
	Если НЕ ЗначениеЗаполнено(QlikПароль) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Необходимо указать пароль!'");
		Сообщение.ПутьКДанным = "QlikПароль";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	СоздатьПользователяQlikНаСервере(QlikЛогин, QlikПароль, QlikСоздатьНового);
	Если НЕ QlikСоздатьНового Тогда
		Элементы.QlikСоздатьПользователяИБ.Заголовок = НСтр("ru = 'Обновить пользователя Qlik Sense'");
		Элементы.QlikСоздатьПользователяИБ.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьПользователяQlikНаСервере(Логин, Пароль, НовыйПользователь)
	
	Если НовыйПользователь Тогда
		// Добавить нового
		НовыйПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		НовыйПользовательИБ.Роли.Добавить(Метаданные.Роли.CRM_ИнтеграцияQlikSense);
	Иначе
		// Найти старого
		ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для Каждого тПользователь Из ПользователиИБ Цикл
			Если тПользователь.Роли.Содержит(Метаданные.Роли.CRM_ИнтеграцияQlikSense) Тогда
				НовыйПользовательИБ = тПользователь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НовыйПользовательИБ.Имя = Логин;
	НовыйПользовательИБ.Пароль = Пароль;
	НовыйПользовательИБ.АутентификацияСтандартная = Истина;
	НовыйПользовательИБ.АутентификацияОС = Ложь;
	НовыйПользовательИБ.АутентификацияOpenID = Ложь;
	НовыйПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
	НовыйПользовательИБ.ЗапрещеноИзменятьПароль = Истина;
	НовыйПользовательИБ.Записать();
	
	НовыйПользователь = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура QlikЛогинПриИзменении(Элемент)
	Если QlikСоздатьНового Тогда
		Возврат;
	Иначе
		Элементы.QlikСоздатьПользователяИБ.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура QlikПарольПриИзменении(Элемент)
	Если QlikСоздатьНового Тогда
		Возврат;
	Иначе
		Элементы.QlikСоздатьПользователяИБ.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставODATA(Команда)
	ОткрытьФорму("ОбщаяФорма.CRM_ДоступODATA");
КонецПроцедуры

#КонецОбласти //НастройкиИнРаботыСQlikSense

#Область ИнтеграцияСUniSender

&НаСервере
Процедура CRM_КлючДоступаКUniSenderПриИзмененииНаСервере()
	Элементы.CRM_СписокКонтактовUniSenderДляОповещений.СписокВыбора.Очистить();
	Элементы.CRM_СписокКонтактовUniSenderДляРассылок.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(CRM_КлючДоступаКUniSender) Тогда
		СпискиКонтактов = CRM_ИнтеграцияСUniSenderКлиентСервер.СпискиКонтактовUniSender(CRM_КлючДоступаКUniSender);
		Для каждого Список из СпискиКонтактов Цикл
			Элементы.CRM_СписокКонтактовUniSenderДляОповещений.СписокВыбора.Добавить(Список.Значение, Список.Представление);
			Элементы.CRM_СписокКонтактовUniSenderДляРассылок.СписокВыбора.Добавить(Список.Значение, Список.Представление);
		КонецЦикла;
	Иначе	
		СпискиКонтактов = Новый СписокЗначений;
	КонецЕсли;
	Если СпискиКонтактов.Количество()>0 Тогда
		CRM_СписокКонтактовUniSenderДляОповещений = СпискиКонтактов[0].Значение;
	Иначе
		CRM_СписокКонтактовUniSenderДляОповещений = "";
	КонецЕсли;
	Если СпискиКонтактов.Количество()>0 Тогда
		CRM_СписокКонтактовUniSenderДляРассылок = СпискиКонтактов[0].Значение;
	Иначе
		CRM_СписокКонтактовUniSenderДляОповещений = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_КлючДоступаКUniSenderПриИзменении(Элемент)
	
	CRM_КлючДоступаКUniSenderПриИзмененииНаСервере();
	СохранитьДанныеДоступа(Неопределено);
	//Элементы.ЗарегистрироватьПользователяUniSender.Видимость = НЕ ЗначениеЗаполнено(CRM_КлючДоступаКUniSender);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеДоступа(Элемент)
	CRM_ИнтеграцияСUniSenderСервер.ЗаписатьДанныеДоступаКUniSender(CRM_КлючДоступаКUniSender, CRM_СписокКонтактовUniSenderДляРассылок, CRM_СписокКонтактовUniSenderДляОповещений);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСписокДляРассылок(Команда)
	ДобавитьСписокUniSender(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСписокДляОповещений(Команда)
	ДобавитьСписокUniSender(Команда);
КонецПроцедуры

&НаСервере
Функция ДобавитьСписокUniSenderСервер(Наименование)
	Возврат CRM_ИнтеграцияСUniSenderКлиентСервер.СоздатьСписокКонтактовUniSender(CRM_КлючДоступаКUniSender, Наименование);
КонецФункции

&НаКлиенте
Процедура ДобавитьСписокUniSender(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьСписокUniSenderЗавершение", ЭтотОбъект, Команда.Имя);
	ПоказатьВводСтроки(ОписаниеОповещения,, НСтр("ru = 'Введите имя нового списка'")); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСписокUniSenderЗавершение(Результат, ИмяКоманды) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Значение = ДобавитьСписокUniSenderСервер(Результат);
		Если ЗначениеЗаполнено(Значение) Тогда
			Элементы.CRM_СписокКонтактовUniSenderДляОповещений.СписокВыбора.Добавить(Значение, Результат);
			Элементы.CRM_СписокКонтактовUniSenderДляРассылок.СписокВыбора.Добавить(Значение, Результат);
			Если ИмяКоманды = "ДобавитьСписокДляРассылок" Тогда
				CRM_СписокКонтактовUniSenderДляРассылок = Значение;
			Иначе
				CRM_СписокКонтактовUniSenderДляОповещений = Значение;
			КонецЕсли;
			СохранитьДанныеДоступа(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьПользователяUniSenderНаСервере()
	CRM_КлючДоступаКUniSender = CRM_ИнтеграцияСUniSenderКлиентСервер.РегистрацияНовогоПользователяUniSender(ИмяНовогоПользователяUniSender,
						EmailПользователяUniSender, ПарольПользователяUniSender);
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПользователяUniSender(Команда)
	
	Элементы.РегистрацияНовогоПользователяUniSender.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегистрацию(Команда)
	
	Если ПустаяСтрока(ИмяНовогоПользователяUniSender) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен Login!'"));
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(EmailПользователяUniSender) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен Email!'"));
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьПользователяUniSenderНаСервере();
	Элементы.РегистрацияНовогоПользователяUniSender.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеКUniSenderНаСервере()
	СпискиКонтактов = CRM_ИнтеграцияСUniSenderКлиентСервер.СпискиКонтактовUniSender(CRM_КлючДоступаКUniSender);
	Если СпискиКонтактов.Количество()>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Подключение к UniSender прошло успешно.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеКUniSender(Команда)
	ПроверитьПодключениеКUniSenderНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОписаниеUniSender(Команда)
	
	ПараметрыФормы = Новый Структура("Макет, Заголовок", "Интеграции_UniSender", НСтр("ru = 'UniSender'"));
	ОткрытьФорму("Обработка.CRM_БыстроеОсвоение.Форма",ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьАвтотекстЭлектронногоПисьмаВUniSenderНаСервере()
	CRM_ИнтеграцияСUniSenderКлиентСервер.ВыгрузитьАвтотекстВUniSender();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьАвтотекстЭлектронногоПисьмаВUniSender(Команда)
	ВыгрузитьАвтотекстЭлектронногоПисьмаВUniSenderНаСервере();
КонецПроцедуры

#КонецОбласти //ИнтеграцияСUniSender

#Область ИнтеграцияСUniSender

&НаКлиенте
Процедура ДекорацияУчетныеЗаписиМессенджеровНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_УчетныеЗаписиМессенджеров.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура CRM_ИспользоватьИнтеграциюСМессенджерамиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ДекорацияИсточникиЗаявокНажатие(Элемент)
	ОткрытьФорму("Справочник.CRM_ИсточникиПолученияЛидов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура КомандаОписаниеexchange(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект);
	НачатьЗапускПриложения (Оповещение, "https://rarus-cloud.ru/1c-crm-start/articles/sinkhronizatsiya-s-ms-exchange/");

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаПриложения(Результат, ДопПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцияСМессенджерами(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект);
	НачатьЗапускПриложения (Оповещение, "https://rarus-cloud.ru/1c-crm-start/articles/dialogi-integratsiya-s-vkontakte/");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаЗаявокИзВнешнихИсточников(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект);
	НачатьЗапускПриложения (Оповещение, "https://rarus-cloud.ru/1c-crm-start/articles/nastroyka-zagruzki-lidov-iz-razlichnykh-istochnikov/");

КонецПроцедуры

&НаКлиенте
Процедура скИспользоватьОбменПочтовымиСообщениямиСMSExchangeПриИзменении(Элемент)
		Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
