
///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ
&НаКлиенте
Перем MAPINameSpace;
&НаКлиенте
Перем OutlookObj;
&НаКлиенте
Перем FolderDelete;
&НаКлиенте
Перем FolderCalendar; // Календарь
&НаКлиенте
Перем FolderTasks; // Задачи
&НаКлиенте
Перем FolderContacts; // Контакты
// Соответствие для дерева папок Outlook Индекс-Папкаoutlook.
&НаКлиенте
Перем ПапкиOutlookСоотв; 

&НаКлиенте
Перем ТаблицаПапокOutlook;

// Папки электронной почты
&НаКлиенте
Перем FolderOutbox; // Исходящие

&НаКлиенте
Перем FolderSentMail; // Отправленные

&НаКлиенте
Перем FolderInbox; // Входящие
// МассивыСтруктур
&НаКлиенте
Перем ТаблицаПисемOutlook;
&НаКлиенте
Перем ТаблицаСобытийOutlook;
&НаКлиенте
Перем ТаблицаКонтактовOutlook;
&НаКлиенте
Перем СОМОбъектыКонтактов;
&НаКлиенте
Перем СОМОбъектыСобытий;
&НаКлиенте
Перем СОМОбъектыПисем;

&НаКлиенте
Перем НеЗадаватьВопросПриЗакрытииФормы;

&НаКлиенте
Перем ФормаИнициализирована;

&НаКлиенте
Перем ОтказТемп;

// Раньше было защищенным 
&НаКлиенте
Функция ПолучитьРеквизитОбъектаOutlook(OutlookОбъект, Реквизит, ОписаниеОшибки = "") Экспорт
	
	Результат = Неопределено;
	
	Если Реквизит = "Частное" Тогда
		РеквизитOutlook = "Sensitivity";
	ИначеЕсли Реквизит = "ДатаИзменения" Тогда
		РеквизитOutlook = "LastModificationTime";
	ИначеЕсли  Реквизит = "Имя" Тогда
		РеквизитOutlook = "FirstName"
	ИначеЕсли  Реквизит = "Фамилия" Тогда
		РеквизитOutlook = "LastName"
	ИначеЕсли  Реквизит = "Отчество" Тогда
		РеквизитOutlook = "MiddleName"  
	ИначеЕсли  Реквизит = "Организация" Тогда
		РеквизитOutlook = "CompanyName" 
	ИначеЕсли  Реквизит = "ДатаРождения" Тогда
		РеквизитOutlook = "Birthday"    
	ИначеЕсли  Реквизит = "Повторяющееся" Тогда
		РеквизитOutlook = "IsRecurring"         
	ИначеЕсли  Реквизит = "ОписаниеСобытия" Тогда
		РеквизитOutlook = "Subject"             
	ИначеЕсли  Реквизит = "СодержаниеСобытия" Тогда
		РеквизитOutlook = "Body"                
	ИначеЕсли  Реквизит = "НачалоСобытия" Тогда
		РеквизитOutlook = "Start"               
	ИначеЕсли  Реквизит = "ОкончаниеСобытия" Тогда
		РеквизитOutlook = "End" 
	ИначеЕсли Реквизит = "Напоминание"       Тогда
		РеквизитOutlook = "ReminderSet"
	ИначеЕсли Реквизит = "СобытиеНаЦелыйДень" Тогда
		РеквизитOutlook = "AllDayEvent"
	ИначеЕсли Реквизит = "Должность" Тогда
		РеквизитOutlook = "JobTitle"
	ИначеЕсли Реквизит = "Место" Тогда
		РеквизитOutlook = "Location"    
	Иначе
		РеквизитOutlook = Реквизит;
	КонецЕсли;
	
	Попытка                                         
		Результат =  OutlookОбъект[РеквизитOutlook];
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции    

&НаКлиенте
Процедура УстановитьРеквизитОбъектаOutlook(OutlookОбъект, Реквизит, Значение, ОписаниеОшибки = "") Экспорт
	
	Если Реквизит = "Частное" Тогда
		РеквизитOutlook = "Sensitivity";
	ИначеЕсли  Реквизит = "Имя" Тогда
		РеквизитOutlook = "FirstName";
	ИначеЕсли  Реквизит = "Фамилия" Тогда
		РеквизитOutlook = "LastName";
	ИначеЕсли  Реквизит = "Отчество" Тогда
		РеквизитOutlook = "MiddleName";         
	ИначеЕсли  Реквизит = "Организация" Тогда
		РеквизитOutlook = "CompanyName" 
	ИначеЕсли  Реквизит = "ДатаРождения" Тогда
		РеквизитOutlook = "Birthday"    
	ИначеЕсли  Реквизит = "ОписаниеСобытия" Тогда
		РеквизитOutlook = "Subject"             
	ИначеЕсли  Реквизит = "СодержаниеСобытия" Тогда
		РеквизитOutlook = "Body"                
	ИначеЕсли  Реквизит = "НачалоСобытия" Тогда
		РеквизитOutlook = "Start"               
	ИначеЕсли  Реквизит = "ОкончаниеСобытия" Тогда
		РеквизитOutlook = "End" 
	ИначеЕсли Реквизит = "Напоминание"       Тогда
		РеквизитOutlook = "ReminderSet"
	ИначеЕсли Реквизит = "СобытиеНаЦелыйДень" Тогда
		РеквизитOutlook = "AllDayEvent"
	ИначеЕсли Реквизит = "Должность" Тогда
		РеквизитOutlook = "JobTitle"
	ИначеЕсли Реквизит = "Место" Тогда
		РеквизитOutlook = "Location"
	Иначе
		РеквизитOutlook =  Реквизит;
	КонецЕсли;
	
	Попытка
		OutlookОбъект[РеквизитOutlook]= Значение;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры  

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
// Получим объект СКД заполненный по умолчанию.
Процедура УправлениеВидимостьюДоступностьюЭлементов()
	
	Элементы.ГруппаПанельСинхронизацияРеквизитов.Доступность 
		= НЕ Объект.ИспользоватьОбщиеНастройкиСинхронизацииРеквизитов;
	Элементы.ПанельСинхронизацииОбъектов.Доступность 
		= НЕ Объект.ИспользоватьОбщиеНастройкиСинхронизацииОбъектов;
		
	//
	
	бНаправлениеOutlook	= (Объект.Направление = "1СOutlook" Или Объект.Направление = "Outlook");
	бНаправление1С		= (Объект.Направление = "1СOutlook" Или Объект.Направление = "1C");
	
	Элементы.ДеревоПапокOutlookЗагрузкаИз1С.Видимость = бНаправлениеOutlook;
	
	бДоступныСобытия	= Объект.СинхронизироватьСобытия;
	бДоступныКонтакты	= Объект.СинхронизироватьКонтакты;
	бДоступныПисьма		= Объект.СинхронизироватьПисьма;
	
	Элементы.СтраницаСинхронизацияРеквизитовКонтакты.Видимость	= бДоступныКонтакты;
	Элементы.СтраницаСинхронизацияРеквизитовСобытия.Видимость	= бДоступныСобытия;
	Если OutlookObj = Неопределено Тогда
		Элементы.СинхронизироватьКонтактыСобытияOutlook.Видимость	= Ложь;
	Иначе	
		Элементы.СинхронизироватьКонтактыСобытияOutlook.Видимость	= CRM_ОбменСMSOutlookКлиент.OutlookМеньше2013(OutlookObj.Application.Version);
	КонецЕсли;	
	Элементы.СтраницаСинхронизацияРеквизитовПисьма.Видимость	= бДоступныПисьма;
	
	Элементы.СинхронизироватьКонтактыПоПолям.Доступность	= бДоступныКонтакты;
	Элементы.Декорация11.Доступность						= бДоступныКонтакты;
	
	Элементы.СтраницаОтборСобытий.Видимость		= бДоступныСобытия;
	Элементы.СтраницаОтборКонтактов.Видимость	= бДоступныКонтакты;
	Элементы.СтраницаОтборПисем.Видимость		= бДоступныПисьма;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСКД(ТекстЗапроса)
	// Создание и настройка схемы компоновки данных.
	СКДДанные = Новый СхемаКомпоновкиДанных();
	
	ИсточникДанных = СКДДанные.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКДДанные.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = ТекстЗапроса;
	
	Настройки = СКДДанные.НастройкиПоУмолчанию;
	
	ДетальнаяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальнаяГруппировка.Использование = Истина;
	
	ВыбранноеАвтоПоле = Настройки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеАвтоПоле.Использование = Истина;
	Возврат  СКДДанные;

КонецФункции

&НаСервере
// Инициализирует реквизиты НастройкиКонтактов И НастройкиСобытий.
Функция СохранитьВХранилищеСоответствиеКонтактнойИнформации()
	
	Возврат Новый ХранилищеЗначения(Объект.СоответствиеКонтактнойИнформации.Выгрузить());	
	
КонецФункции

&НаСервере
Процедура ИнициализироватьРеквизитыНастроек()
	
	ТекстЗапросаКонтактов = СформироватьТекстЗапросаКонтакты();
	ТекстЗапросаСобытий = СформироватьТекстЗапросаСобытия();
	
	СКДКонтактов = ПолучитьСКД(ТекстЗапросаКонтактов);
	СКДСобытий = ПолучитьСКД(ТекстЗапросаСобытий);
	АдресВоВременномХранилищеСКДКонтакты = ПоместитьВоВременноеХранилище(СКДКонтактов,Новый УникальныйИдентификатор);
	АдресВоВременномХранилищеСКДСобытия = ПоместитьВоВременноеХранилище(СКДСобытий,Новый УникальныйИдентификатор);
	Объект.НастройкиКонтактов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилищеСКДКонтакты));
	Объект.НастройкиСобытий.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилищеСКДСобытия));
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьТаблицыНаКлиенте()
	
	ТаблицаПапокOutlook = Новый Массив;
	ТаблицаПисемOutlook = Новый Массив;
	ТаблицаСобытийOutlook = Новый Массив;
	ТаблицаКонтактовOutlook = Новый Массив;
	СОМОбъектыКонтактов = Новый Массив;
	СОМОбъектыСобытий = Новый Массив; 
	СОМОбъектыПисем = Новый Массив;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИдентификаторПапки(ПапкаOutlook)
	
	Возврат ПапкаOutlook.EntryID;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзментьИмяКомпьютера(ПрограммаMSOutlook, ИмяКомпьютера)
	ОбъектПрограммы = ПрограммаMSOutlook.ПолучитьОбъект();
	ОбъектПрограммы.Компьютер = ИмяКомпьютера;
	ОбъектПрограммы.Записать()
КонецФункции

&НаСервере
Функция ПолучитьПервые10ОбъектовСинхронизации(ПрограммаOutlook)
	// Проверим первые 10 объектов синхронизации.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 10
	|	CRM_СоответствиеОбъектовOutlook.ПрограммаOutlook,
	|	CRM_СоответствиеОбъектовOutlook.СобственнаяСсылка,
	|	CRM_СоответствиеОбъектовOutlook.СсылкаВOutlook
	|ИЗ
	|	РегистрСведений.CRM_СоответствиеОбъектовOutlook КАК CRM_СоответствиеОбъектовOutlook
	|ГДЕ
	|	CRM_СоответствиеОбъектовOutlook.ПрограммаOutlook = &ПрограммаOutlook";
	
	Запрос.УстановитьПараметр("ПрограммаOutlook",ПрограммаOutlook);
	
	Результат = Запрос.Выполнить().Выгрузить();
	мРезультат = Результат.ВыгрузитьКолонку("СсылкаВOutlook");
	Возврат мРезультат;
КонецФункции

&НаСервере
Функция ПолучитьТаблицуСоответствияOutlook(ПрограммаOutlook)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_СоответствиеОбъектовOutlook.ПрограммаOutlook,
	|	CRM_СоответствиеОбъектовOutlook.СобственнаяСсылка,
	|	CRM_СоответствиеОбъектовOutlook.СсылкаВOutlook
	|ИЗ
	|	РегистрСведений.CRM_СоответствиеОбъектовOutlook КАК CRM_СоответствиеОбъектовOutlook
	|ГДЕ
	|	CRM_СоответствиеОбъектовOutlook.ПрограммаOutlook = &ПрограммаOutlook";
	
	Запрос.УстановитьПараметр("ПрограммаOutlook",ПрограммаOutlook);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);

КонецФункции

&НаСервере
Функция УдалитьСсылкиИзБазы(мПрограммаOutlook, мУдаляемых)
	Если мУдаляемых = Неопределено
		ИЛИ мПрограммаOutlook = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Для Каждого СобственнаяСсылка Из мУдаляемых Цикл
		МенеджерЗаписи = РегистрыСведений.CRM_СоответствиеОбъектовOutlook.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПрограммаOutlook = мПрограммаOutlook;
		МенеджерЗаписи.СобственнаяСсылка = СобственнаяСсылка;
		МенеджерЗаписи.Удалить();				 						
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция УдалитьИзБазыУдаленныеMSOutlook(ПрограммаOutlook)
	
	мРезультат = ПолучитьТаблицуСоответствияOutlook(ПрограммаOutlook);
	мУдалить = Новый Массив;
	Количество =  мРезультат.Количество();
	Сч = 0;
	Для Каждого стрСоотв Из мРезультат Цикл
		
		EntryID   = стрСоотв.СсылкаВOutlook;
		Попытка  
			ОбъектOutlook = OutlookObj.Session.GetItemFromID(EntryID);
		Исключение  	
			мУдалить.Добавить(стрСоотв.СобственнаяСсылка);
		КонецПопытки;
		
		Сч = Сч + 1;
		Состояние("Обработано " + Сч + " из " + Количество);
		
	КонецЦикла;
	УдалитьСсылкиИзБазы(ПрограммаOutlook,мУдалить);
КонецФункции

&НаСервере
Функция ЗаполнитьУчетнуюЗаписьПочтыДляСинхронизации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.CRM_НастройкаСинхронизацииСВнешнимПриложением = &CRM_НастройкаСинхронизацииСOutlook";
	
	Запрос.УстановитьПараметр("CRM_НастройкаСинхронизацииСOutlook", Объект.ПрограммаOutlook);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда // Создать новую учетную запись для данной синхронизации.
		НаименованиеПрограммы = Объект.ПрограммаOutlook.Компьютер + " | " + Объект.ПрограммаOutlook.Пользователь;
		УчетнаяЗаписьОбъект = Справочники.УчетныеЗаписиЭлектроннойПочты.СоздатьЭлемент();
		УчетнаяЗаписьОбъект.CRM_НастройкаСинхронизацииСВнешнимПриложением = Объект.ПрограммаOutlook;
		УчетнаяЗаписьОбъект.Наименование = НСтр("ru = 'MS Outlook ('") + ?(СтрДлина(НаименованиеПрограммы) > 37, Лев(НаименованиеПрограммы, 34), НаименованиеПрограммы) + "...)";
		УчетнаяЗаписьОбъект.АдресЭлектроннойПочты = "sync@msoutlook.1c";
		УчетнаяЗаписьОбъект.СерверИсходящейПочты = "sync.msoutlook.1c";
		УчетнаяЗаписьОбъект.СерверВходящейПочты = "sync.msoutlook.1c";
		УчетнаяЗаписьОбъект.ПротоколВходящейПочты = "POP";
		УчетнаяЗаписьОбъект.Пользователь = "syncmsoutlook";
		УчетнаяЗаписьОбъект.ВремяОжидания = "syncmsoutlook";
		
		УчетнаяЗаписьОбъект.ОбменДанными.Загрузка = Истина;
		УчетнаяЗаписьОбъект.Записать();
		УчетнаяЗаписьСсылка = УчетнаяЗаписьОбъект.Ссылка;
	Иначе // Выбрать имеющуюся учетную запись для данной синхронизации.
		УчетнаяЗаписьСсылка = РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.CRM_УчетныеЗаписиЭлектроннойПочты.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗапись 		= УчетнаяЗаписьСсылка;
	МенеджерЗаписи.Пользователь			= ТекущийПользователь;
	МенеджерЗаписи.Запись				= Истина;
	МенеджерЗаписи.Администрирование	= Истина;
	МенеджерЗаписи.Основная 			= Ложь;
	МенеджерЗаписи.Записать();
	
	Возврат УчетнаяЗаписьСсылка;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции для работы с массивами структур как с таблицами.

// +Структуры Таблиц

&НаКлиенте
Функция ПолучитьСтруктуруТаблицыСобытийOutlook()
	Возврат Новый Структура("Частное,ДатаИзменения,FolderName,ОбъектOutlook,ОбъектOutlookID");
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктураТаблицыПапокOutlook()
	Возврат Новый Структура("Папка,FolderPath,olFolder,Folder,ЗагрузкаИз1С,StoreID");	
КонецФункции

 &НаКлиенте
Функция ПолучитьСтруктуруТаблицыПисемOutlook()
	 
	 Возврат Новый Структура("Представление_Outlook,ДатаИзменения,FolderName,ОбъектOutlook,ОбъектOutlookID");
	 
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруТаблицыCOMОбъектовПисем()
	
	Возврат Новый Структура("СтрокаТЧ,ОбъектOutlook,ОбъектOutlookID");
	
КонецФункции

// -Структуры Таблиц

&НаКлиентеНаСервереБезКонтекста
Функция СкопироватьСтруктуру(элСтруктура)
	
	СтрокаПолей = "";
	Для Каждого элСтр Из элСтруктура Цикл
		СтокаПолей = СтрокаПолей+элСтр.Ключ+",";
	КонецЦикла;
	
	Возврат Новый Структура(СтрокаПолей);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтроки(мТаблица, СтрПоиска = Неопределено, Ошибка = "")
	
	Ошибка = "";
	мНайденных = Новый Массив;
	Если ТипЗнч(мТаблица) <> Тип("Массив") Тогда 
		Возврат мНайденных;	
	КонецЕсли;
	
	Если СтрПоиска = Неопределено Тогда
		Для Каждого эл  Из мТаблица Цикл
			мНайденных.Добавить(эл);
		КонецЦикла;
		Возврат мНайденных;
	КонецЕсли;
	
	Если мТаблица.Количество()= 0
		ИЛИ СтрПоиска.Количество() = 0
		Тогда 
		Возврат Новый Массив;	
	КонецЕсли;
	
	Для Каждого элОтбора Из СтрПоиска Цикл
		Если Не мТаблица[0].Свойство(элОтбора.Ключ) Тогда
			ТекстОшибки = "ru='"+"Поля "+ элОтбора.Ключ + " не существует"+"'";
			Ошибка = НСтр(ТекстОшибки);
			Возврат Новый Массив;
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого элТаб Из мТаблица Цикл
		
		бКопировать = Истина;
		Для Каждого поле Из СтрПоиска Цикл
			
			Если элТаб[поле.Ключ] <> поле.Значение Тогда 
				бКопировать = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Если бКопировать Тогда
			мНайденных.Добавить(элТаб);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат мНайденных;	
		
КонецФункции 

&НаКлиенте
Функция СкопироватьКолонки(мТаблица, СтрОтбора = Неопределено, Ошибка = "")
	мТабРез = Новый Массив;
	Для Каждого элТаб Из мТаблица Цикл
		
		НовСтр = СкопироватьСтруктуру(СтрОтбора);
		ЗаполнитьЗначенияСвойств(НовСтр,элТаб);
		мТабРез.Добавить(НовСтр);
		
	КонецЦикла;
	Возврат мТабРез;
	
КонецФункции

&НаСервере
Функция ПолучитьТекущиеНастройки()
	
	// ++
	СтруктураРеквизитов = Новый Структура;
	мОбъект = Обработки.CRM_ОбменСMSOutlook.Создать();
	МетаОбъект = мОбъект.Метаданные();
	РеквизитыОбработки = МетаОбъект.Реквизиты;
	
	Для	каждого Реквизит Из РеквизитыОбработки Цикл
		
		СтруктураРеквизитов.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
		
	КонецЦикла;
	
	ТЗ = Объект.СоответствиеКонтактнойИнформации.Выгрузить();
	СоответствиеКонтактнойИнформации = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ);
	
	СтруктураРеквизитов.Вставить("СоответствиеКонтактнойИнформации", 
				СоответствиеКонтактнойИнформации);
				
	// ++
	СтруктураРеквизитов.Вставить("НастройкиКонтактов" , Объект.НастройкиКонтактов.ПолучитьНастройки());
	СтруктураРеквизитов.Вставить("НастройкиСобытий" , Объект.НастройкиСобытий.ПолучитьНастройки());
	
	//// Исключим не сохраняемые реквизиты.
	СтруктураРеквизитов.Удалить("Пользователь");  
	
	Возврат СтруктураРеквизитов;	

КонецФункции

&НаКлиенте
Функция ПолучитьКонфигурациюОбмена()
	
	СтруктураСвойств = CRM_ОбменСMSOutlookКлиент.ПолучитьСтруктуруСвойств();
	ОбновитьТаблицуПапокOutlook(ДеревоПапокOutlook);
	Настройка = ПолучитьТекущиеНастройки();
	Настройка.Вставить("ТаблицаПапокOutlook",ТаблицаПапокOutlook);
	Ошибка = "";
	#Если Не ВебКлиент Тогда
	Настройка.Вставить("ИмяКомпьютера", ИмяКомпьютера());
	#КонецЕсли
	Если Не CRM_ОбменСMSOutlookКлиент.ПолучитьOutlookObj(СтруктураСвойств,Настройка,Ошибка) Тогда
		Если ЗначениеЗаполнено(Ошибка) Тогда
			ПоказатьПредупреждение(, Ошибка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("СтруктураСвойств,Настройка",СтруктураСвойств,Настройка);
	
КонецФункции

// +МодульОбъекта

// Проверим, что синхронизация осуществляется с MSOutlook на том же компьютере.

&НаКлиенте
Функция ПроверкаПрограммыMSOutlook(ПрограммаOutlook)
	// Проверим первые 10 объектов синхронизации.
	мРезультат = ПолучитьПервые10ОбъектовСинхронизации(ПрограммаOutlook);
	ОбъектНайден = Ложь;
	Для Каждого СсылкаВOutlook Из мРезультат Цикл
	
		EntryID   = СсылкаВOutlook;
		Попытка  
			ОбъектOutlook = OutlookObj.Session.GetItemFromID(EntryID);
			ОбъектНайден = Истина;
		Исключение
			 
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат   (мРезультат.Количество()>0 И НЕ ОбъектНайден);
	
КонецФункции

&НаКлиенте
// Подключение к Outlook.
Процедура ПолучитьOutlookObj(ТекстОшибки, ОписаниеОповещенияОЗавершении) Экспорт
	
	#Если НЕ ВебКлиент Тогда
	// проверка компьютера
	Если ВРег(ИмяКомпьютера()) <> ВРег(ИмяКомпьютераОбъекта) Тогда
		ТекстВопроса = "Имя текущего компьютера отличается  от имени компьютера, на котором установлена программа MS Outlook. 
						|Изменилось  расположение программы MS Outlook или 1С:Предприятие запущено в терминале?";
		//
		СписокКнопки = Новый СписокЗначений();
		СписокКнопки.Добавить("ИзменилосьРасположение", НСтр("ru = 'Изменилось расположение MS Outlook'"));
		СписокКнопки.Добавить("1СПредприятиеЗапущеноВТерминале", НСтр("ru = '1С:Предприятие запущено в терминале'"));
		СписокКнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьOutlookObjОтветКомп", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопки,, "Отмена");
		ОтказТемп = Истина;
		Возврат;
		
	КонецЕсли;
	#КонецЕсли
	ПолучитьOutlookObjОтветКомп(Неопределено, ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьOutlookObjОтветКомп(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = "ИзменилосьРасположение" Тогда
		#Если НЕ ВебКлиент Тогда
			ИзментьИмяКомпьютера(Объект.ПрограммаOutlook, ИмяКомпьютера());
			ИмяКомпьютераОбъекта = ИмяКомпьютера();
		#КонецЕсли
	ИначеЕсли Ответ = "1СПредприятиеЗапущеноВТерминале" Тогда
			// ничего не делаем
	Иначе Если Ответ = "Отмена" Тогда
		ТекстОшибки = "Выполнять синхронизацию и редактировать настройки можно только на компьютере, на котором установлена программа MS Outlook";
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Новый Структура("Результат, ТекстОшибки", Ложь, ТекстОшибки));
		ОтказТемп = Истина;
		Возврат;
	КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		#Если ВебКлиент Тогда
			OutlookObj = Новый COMОбъект("Outlook.Application");
		#Иначе
			Если ЗначениеЗаполнено(ИмяКомпьютераОбъекта) Тогда
				Если ВРег(ИмяКомпьютераОбъекта) = ВРег(ИмяКомпьютера()) Тогда
					OutlookObj = Новый COMОбъект("Outlook.Application");
				Иначе
					OutlookObj = Новый COMОбъект("Outlook.Application", ИмяКомпьютераОбъекта);
				КонецЕсли;
			Иначе
				OutlookObj = Новый COMОбъект("Outlook.Application");
			КонецЕсли;
		#КонецЕсли
		
		MAPINameSpace	= OutlookObj.GetNamespace("MAPI");
		FolderDelete	= MAPINameSpace.GetDefaultFolder(3); // удаленные бъекты
		FolderCalendar	= MAPINameSpace.GetDefaultFolder(9); // Календарь
		FolderTasks		= MAPINameSpace.GetDefaultFolder(13); // Задачи
		FolderContacts	= MAPINameSpace.GetDefaultFolder(10); // Контакты
		
		//МFolderDeletedItems = мMAPINameSpace.GetDefaultFolder(3); // Удаленные.
		FolderOutbox = MAPINameSpace.GetDefaultFolder(4); // Исходящие
		FolderSentMail = MAPINameSpace.GetDefaultFolder(5); // Отправленные
		FolderInbox = MAPINameSpace.GetDefaultFolder(6); // Входящие
		
	Исключение
		ИО = ИнформацияОбОшибке();
		Если ТипЗнч(OutlookObj) <> Тип("COMОбъект") Тогда
			ТекстОшибки = "MS Outlook не установлен. Дальнейшая работа невозможна!";
		Иначе
			ТекстОшибки = КраткоеПредставлениеОшибки(ИО);
			#Если Не ВебКлиент Тогда
				Если ЗначениеЗаполнено(ИмяКомпьютераОбъекта) И ВРег(ИмяКомпьютераОбъекта) <> ВРег(ИмяКомпьютера()) Тогда
					// Возможно 1С запущена в терминале.
					ТекстОшибки = ТекстОшибки + НСтр("ru = '
					|
					|Если на рабочей станции'")
					+ " """ + ИмяКомпьютераОбъекта + """ "
					+ НСтр("ru = 'запущено приложенме MS Outlook, попробуйте закрыть его.'")
					//
				КонецЕсли;
			#КонецЕсли
			
			Попытка OutlookObj.Application.Quit()
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		OutlookObj = Неопределено;
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Новый Структура("Результат, ТекстОшибки", Ложь, ТекстОшибки));
		Возврат;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Объект.ПрограммаOutlook) И Не ЭтоНоваяНастройка Тогда
		Если ПроверкаПрограммыMSOutlook(Объект.ПрограммаOutlook)  Тогда
			
			ТекстВопроса = "Первые 10 ранее синхронизированные объекты 1С не найдены в базе MS Outlook.  
			|Возможно, ранее синхронизация выполнялась с другой программой MS  Outlook!
			|Продолжить?";
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьOutlookObjОтветПродолжить", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет); 				
			ОтказТемп = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ПолучитьOutlookObjОтветПродолжить(Неопределено, ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьOutlookObjОтветПродолжить(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ТекстВопроса = "Выполнить очистку  соответствия ранее синхронизированных объектов 1С и MS Outlook?
		|Будут удалены ссылки на удаленные  из MS Outlook  объекты синхронизации.";
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьOutlookObjОтветЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да); 				
		ОтказТемп = Истина;
		Возврат;
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ТекстОшибки = "Выбранная программа MS Outlook не соответсвует базе MS Outlook установленной на данном компьютере";
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Новый Структура("Результат, ТекстОшибки", Ложь, ТекстОшибки));
		Возврат;
	КонецЕсли;
	
	ПолучитьOutlookObjОтветЗавершение(Неопределено, ОписаниеОповещенияОЗавершении)
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьOutlookObjОтветЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если  Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьИзБазыУдаленныеMSOutlook(Объект.ПрограммаOutlook);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ПрограммаOutlook) Тогда
		Если CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ПрограммаOutlook, "ДлинаGUID") = 0 Тогда
			// Получаем длину из первого контакта.
			Если FolderContacts.Items.Count > 0 Тогда
				CRM_ОбменСMSOutlookСервер.УстановитьДлинуGUIDOutlook(Объект.ПрограммаOutlook, FolderContacts.Items(1).EntryID);			
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Новый Структура("Результат, ТекстОшибки", Истина, ""));
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Работа с папками   Outlook

&НаКлиенте
// Процедура вызывается рекурсивно, процедура снимает отметку с папки загрузки объектов 1С.  
//
Процедура СнятьПометкиСПапокЗагрузкиИз1С(СтрокаДерева, ТекущаяСтрока)Экспорт
	
	Если СтрокаДерева <> ТекущаяСтрока Тогда
		СтрокаДерева.ЗагрузкаИз1С = Ложь;
	КонецЕсли;
	Строки = СтрокаДерева.ПолучитьЭлементы();
	Если Строки.Количество() > 0 Тогда
		Для Каждого СтрокаСтроки Из Строки Цикл
			СнятьПометкиСПапокЗагрузкиИз1С(СтрокаСтроки, ТекущаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
 // Рекурсивная процедура заполнения дерева папок.
//
Процедура ДобавитьСтрокуПапокOutlook(СтрокаДерева, OutlookFolder, Знач olFolder)Экспорт
	olFolder = Строка(olFolder);
	
	НоваяСтрока				= СтрокаДерева.Добавить();
	НоваяСтрока.Папка		= OutlookFolder.Name;
	НоваяСтрока.FolderPath	= OutlookFolder.FolderPath;
	НоваяСтрока.olFolder 	= olFolder;
	НоваяСтрока.Folder    	= ПолучитьИдентификаторПапки(OutlookFolder);
	НоваяСтрока.StoreID		=  OutlookFolder.StoreID;
	// ++
	
	ПапкиOutlookСоотв.Вставить(НоваяСтрока.Folder,OutlookFolder);
	
	Если olFolder = "0" И  OutlookFolder.EntryID  = FolderInbox.EntryID Тогда
		
		НоваяСтрока.Пометка     = Истина;
		
	ИначеЕсли olFolder = "1" И OutlookFolder.EntryID = FolderCalendar.EntryID Тогда
		
		НоваяСтрока.Пометка     = Истина;
		НоваяСтрока.ЗагрузкаИз1С= Истина;
		
	ИначеЕсли olFolder = "2"	И   OutlookFolder.EntryID = FolderContacts.EntryID Тогда
		
		НоваяСтрока.Пометка     = Истина;
		НоваяСтрока.ЗагрузкаИз1С= Истина;
				
	ИначеЕсли olFolder = "-1" Тогда	
		
		НоваяСтрока.Пометка     = Ложь;
		
	КонецЕсли;
	
	Если OutlookFolder.Folders.Count > 0 Тогда
		Для Ном = 1 По OutlookFolder.Folders.Count Цикл
			
			OutlookFolder1 =  OutlookFolder.Folders(Ном);
			olFolder =  Строка(OutlookFolder1.DefaultItemType);
			
			Если olFolder = "3" ИЛИ olFolder = "4" ИЛИ olFolder = "5" Тогда  // Исключим задачи, заметки, дневники.
				Продолжить;
			КонецЕсли;
			
			ДобавитьСтрокуПапокOutlook(НоваяСтрока.ПолучитьЭлементы(), OutlookFolder1, olFolder);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
// Процедура читает папки Outlook и заполняет дерево папок.
//
// Параметры:
//  ДеревоПапокOutlook - заполняемое дерево папок.
//
Процедура ЗаполнитьДеревоПапокOutlook(ДеревоПапокOutlook) Экспорт
	
	ЭлементыДереваЗначений = ДеревоПапокOutlook.ПолучитьЭлементы();
	ЭлементыДереваЗначений.Очистить();
	ПапкиOutlookСоотв = Новый Соответствие;
	Если MAPINameSpace.Folders.Count = 0 Тогда
		Возврат
	КонецЕсли;
	
	Для Ном = 1 По MAPINameSpace.Folders.Count Цикл // Обход папок верхнего уровня.
		
		OutlookFolder = MAPINameSpace.Folders(Ном);
		
		olFolder = Строка(OutlookFolder.DefaultItemType);		
		Если olFolder = "3" ИЛИ olFolder = "4" ИЛИ olFolder = "5" Тогда  // Исключим задачи, заметки, дневники.
			Продолжить;
		КонецЕсли;	
		
		ДобавитьСтрокуПапокOutlook(ЭлементыДереваЗначений, OutlookFolder, -1);
		
	КонецЦикла;
	
	// DefaultItemType:
	// почта - 0
	//Календарь -1
	// контакты - 2
	// задачи - 3
	// дневник - 4
	// заметки - 5
	
	// Мы ввели для корневой папки -1.
	
	ПолученныеЭлементы = ДеревоПапокOutlook.ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из ПолученныеЭлементы Цикл
		Элементы.ДеревоПапокOutlook.Развернуть(ТекЭлемент.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
// Процедура выполняет восстановление настроек папок.
//
// Параметры:
//  СтрокаДерева - строка дерева для которой выполянется обработка.
//
Процедура ОбновитьОтметкиГруппыИзСохраненнойНастройки(СтрокаДерева) Экспорт
	
	//СохраненныеЗначения = ТаблицаПапокOutlook.НайтиСтроки(Новый Структура("FolderPath",СтрокаДерева.FolderPath));
    СохраненныеЗначения = НайтиСтроки(ТаблицаПапокOutlook,
			Новый Структура("FolderPath",СтрокаДерева.FolderPath));
			
	СтрокаДерева.Пометка = НЕ (СохраненныеЗначения.Количество() = 0);
	
	Если СтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
		СнятьПометкиСПапокЗагрузкиИз1С(СтрокаДерева, СтрокаДерева)
	КонецЕсли;
	
	Если СохраненныеЗначения.Количество() <> 0 
		И СохраненныеЗначения[0].ЗагрузкаИз1С Тогда
		СтрокаДерева.ЗагрузкаИз1С = Истина;
	КонецЕсли;		
	Строки = СтрокаДерева.ПолучитьЭлементы();
	Для каждого СтрокаСтроки Из Строки Цикл
		ОбновитьОтметкиГруппыИзСохраненнойНастройки(СтрокаСтроки);
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
// Формирование запросов получения Событий.
//
Функция СформироватьТекстЗапросаСобытия()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	CRM_Мероприятие.Ссылка КАК Событие,
	               |	CRM_Мероприятие.Ответственный,
	               |	CRM_Мероприятие.Описание,
	               |	CRM_Мероприятие.Дата
	               |ИЗ
	               |	Документ.CRM_Мероприятие КАК CRM_Мероприятие
	               |{ГДЕ
	               |	CRM_Мероприятие.Ответственный.*,
	               |	CRM_Мероприятие.Дата}";
				   
	Возврат ТекстЗапроса;
		
КонецФункции

&НаСервере
// Формирование запросов получения Контактов.
//
Функция СформироватьТекстЗапросаКонтакты()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Партнеры.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Партнеры КАК Партнеры
	               |ГДЕ
	               |	&Партнеры
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КонтактныеЛицаПартнеров.Ссылка
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |ГДЕ
	               |	&КонтактныеЛицаПартнеров";

	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
// Процедура заполняет таблицу папок по дереву папок.
//
Процедура ОбновитьТаблицуПапокOutlook(мДеревоПапокOutlook, пПапкаOutlook = Неопределено)Экспорт
	
	пПапки = мДеревоПапокOutlook.ПолучитьЭлементы();
	
	Если пПапки.Количество()  = 0 Тогда // Возможно MS Outlook не установлен.
		Возврат
	КонецЕсли;	
	
	Если пПапкаOutlook = Неопределено Тогда
		
		пПапкаOutlook =  мДеревоПапокOutlook;
		ТаблицаПапокOutlook = Новый Массив;
		
	КонецЕсли;
	
	Строки = пПапкаOutlook.ПолучитьЭлементы();
	Для каждого Строка Из  Строки Цикл
		
		Если  Строка.Пометка Тогда
			 НоваяСтрока = ПолучитьСтруктураТаблицыПапокOutlook();
			 НоваяСтрока.Папка = Строка.Папка;
			 НоваяСтрока.FolderPath = Строка.FolderPath;			 
			 НоваяСтрока.Folder = Строка.Folder;
			 НоваяСтрока.olFolder = Строка.olFolder;	
			 НоваяСтрока.ЗагрузкаИз1С =  Строка.ЗагрузкаИз1С;
			 НоваяСтрока.StoreID =  Строка.StoreID;
			 ТаблицаПапокOutlook.Добавить(НоваяСтрока);
		КонецЕсли;	
		
		ОбновитьТаблицуПапокOutlook(мДеревоПапокOutlook,Строка);
		
	КонецЦикла;	
	
КонецПроцедуры	

///////////////////////////////////////////////////////////////////////////////
// СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ ПОЛЬЗОВАТЕЛЬСКИХ ОФОРМЛЕНИЙ

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	Если НЕ РежимОбщиеНастройки Тогда
		Объект.ИспользоватьОбщиеДополнительныеНастройки          = Истина;
		Объект.ИспользоватьОбщиеНастройкиСинхронизацииОбъектов   = Истина;
		Объект.ИспользоватьОбщиеНастройкиСинхронизацииРеквизитов = Истина;
	КонецЕсли;
	
	Объект.СинхронизироватьКонтакты = Истина;
	Объект.СинхронизироватьКЛК = Истина;
	Объект.СинхронизироватьСобытия = Истина;
		
	Объект.Направление = "1СOutlook";
	Объект.ИсключитьЧастныеКонтакты  = Истина;
	Объект.ИсключитьЧастныеСобытия  = Истина;
	Объект.УдалятьПомеченныеНаУдалениеОбъекты = Истина;
	
	Объект.Комментарий1С      = "Загружен из программы MS Outlook";
	Объект.КомментарийOutlook = "Загружен из программы 1С:CRM";
	
	Объект.СинхронизироватьУчастниковСобытияOutlook = Истина;
	
	Объект.ОткрытьФормуСопоставленияОбъектов = Истина;
	
	//Объект.ВидСобытий1С = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча;
	//Объект.ТипСобытий1С = Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее;
	
	СостояниеСобытияЗавершено = Справочники.CRM_СостоянияСобытий.Завершено;
	//Объект.СостояниеСобытий1С = СостояниеСобытияЗавершено;
	
	Объект.ВидСобытийПисьмо = Перечисления.CRM_ВидыСобытий.ЭлектронноеПисьмо;
	
	//Объект.СостояниеСобытийПисьмо = СостояниеСобытияЗавершено;
	
	Объект.ЗагружатьВложенияПисьмо = Истина;
	
	Объект.ПереноситьКомментарийКонтактаВOutlook = Истина;
	Объект.ПереноситьЗаметкиКонтактаВ1С = Истина;
	
	Объект.ТолькоИзмененныеКонтакты = Истина;
	Объект.ТолькоИзмененныеСобытия = Истина;
	Объект.ТолькоИзмененныеПисьма = Истина;
	
	ИнициализироватьРеквизитыНастроек();
	
	/////////////////////////////////////////////////////////////////
	// заполнение значениями по умолчанию видов контактной информации.
	
	Макет = Обработки.CRM_ОбменСMSOutlook.ПолучитьМакет("ВидыКонтактнойИнформации");
	
	Для НомСтр = 3 По Макет.ВысотаТаблицы Цикл
		
		Тип			           		= Макет.Область("R"+НомСтр+"C1").Текст;
		ВидКИOutlook 				= Макет.Область("R"+НомСтр+"C2").Текст; 
		ПредставлениеКИOutlook      = Макет.Область("R"+НомСтр+"C3").Текст;

		// Заполним виды контактной информации по принадлежности.
		Для НомКолонки = 5	По 6 Цикл
			
			ПринадлежностьКИ1С = Макет.Область("R"+НомСтр+"C"+НомКолонки).Текст;
			
			Если НЕ ПринадлежностьКИ1С = "" Тогда
				
				НоваяСтрока = Объект.СоответствиеКонтактнойИнформации.Добавить();
				НоваяСтрока.Тип						= Перечисления.ТипыКонтактнойИнформации[Тип];
				НоваяСтрока.ВидКИOutlook			= ВидКИOutlook;
				НоваяСтрока.ПредставлениеКИOutlook	= ПредставлениеКИOutlook;
				НоваяСтрока.ВидКИ1С					= Справочники.ВидыКонтактнойИнформации[ПринадлежностьКИ1С];
				НоваяСтрока.ВидКонтакта				= Макет.Область("R2C"+НомКолонки).Текст;;	
				
			КонецЕсли;
						
		КонецЦикла;
		
		// Заполним общие виды контактной информации.
		
		ПринадлежностьКИ1С = Макет.Область("R"+НомСтр+"C8").Текст;
		Если  НЕ ПринадлежностьКИ1С = "" Тогда
			
			Запрос = Новый Запрос;
			ТекстЗапроса = "ВЫБРАТЬ
			               |	ВидыКонтактнойИнформации.Ссылка,
			               |ИЗ
			               |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
			               |ГДЕ
			               |	ВидыКонтактнойИнформации.Наименование = &Наименование
			               |	И ВидыКонтактнойИнформации.Тип = &Тип";
			
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("Наименование", Справочники.ВидыКонтактнойИнформации[ПринадлежностьКИ1С].Наименование);
			Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации[Тип]);
			Результат = Запрос.Выполнить();
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если   Выборка.Ссылка.Родитель  = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров Тогда
					ВидКонтакта				= "К";
				ИначеЕсли Выборка.Ссылка.Родитель  = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры
							ИЛИ
							Выборка.Ссылка.Родитель  = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания
							ИЛИ 
							Выборка.Ссылка.Родитель  = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо
					Тогда
					ВидКонтакта				= "КЛК";
				Иначе
					Продолжить;
				КонецЕсли;

				// Возможно вид контакта уже занят.
				МассивЗанятыхВКИ = Объект.СоответствиеКонтактнойИнформации.НайтиСтроки(Новый Структура("ВидКИOutlook,ВидКонтакта",ВидКИOutlook,ВидКонтакта));
				Если МассивЗанятыхВКИ.Количество()<> 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				// добавим новый ВКИ
				НоваяСтрока = Объект.СоответствиеКонтактнойИнформации.Добавить();
				НоваяСтрока.Тип						= Перечисления.ТипыКонтактнойИнформации[Тип];
				НоваяСтрока.ВидКИOutlook			= ВидКИOutlook;
				НоваяСтрока.ПредставлениеКИOutlook	= ПредставлениеКИOutlook;
				НоваяСтрока.ВидКИ1С					= Выборка.Ссылка;
				НоваяСтрока.ВидКонтакта				= ВидКонтакта;
				
				Если   Выборка.Ссылка.Родитель  = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров Тогда
					НоваяСтрока.ВидКонтакта				= ВидКонтакта;
				ИначеЕсли Выборка.Ссылка.Родитель  = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры
							ИЛИ
							Выборка.Ссылка.Родитель  = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыКомпания
							ИЛИ 
							Выборка.Ссылка.Родитель  = Справочники.ВидыКонтактнойИнформации.CRM_СправочникПартнерыЧастноеЛицо
					Тогда
					НоваяСтрока.ВидКонтакта				= ВидКонтакта;
				КонецЕсли;
				
			 КонецЦикла;
			
		КонецЕсли;
				
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
// Сохраняет значения реквизитов обработки в структуру.
//
// Возвращаемое значение:
//  СтруктураРеквизитов - Структура - структура, содержащая значения реквизитов.
//
Функция СохранитьЗначенияРеквизитовВСтруктуру()
	// ++
	СтруктураРеквизитов = Новый Структура;
	мОбъект = Обработки.CRM_ОбменСMSOutlook.Создать();
	МетаОбъект = мОбъект.Метаданные();
	РеквизитыОбработки = МетаОбъект.Реквизиты;
	
	Для	каждого Реквизит Из РеквизитыОбработки Цикл
		
		СтруктураРеквизитов.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);	
		
	КонецЦикла;
	
	СтруктураРеквизитов.Вставить("СоответствиеКонтактнойИнформации", 
		Объект.СоответствиеКонтактнойИнформации.Выгрузить());
	 // ++
	СтруктураРеквизитов.Вставить("НастройкиКонтактов" , Объект.НастройкиКонтактов.ПолучитьНастройки());
	СтруктураРеквизитов.Вставить("НастройкиСобытий" , Объект.НастройкиСобытий.ПолучитьНастройки());
	СтруктураРеквизитов.Вставить("УчетнаяЗаписьПочтыДляСинхронизации" , Объект.УчетнаяЗаписьПочтыДляСинхронизации);
	
	//// Исключим не сохраняемые реквизиты.
	СтруктураРеквизитов.Удалить("Пользователь");  
	
	Возврат СтруктураРеквизитов;	

КонецФункции // СохранитьЗначенияРеквизитовВСтруктуру() 

&НаСервере
Процедура ПроверитьСкорректироватьТаблицуСоответствий(Таб)
	
	Ном = Таб.Количество();
	Пока Ном > 0 Цикл
		
		Если ЗначениеЗаполнено(Таб[Ном-1].ВидКИ1С) И НЕ ОбщегоНазначения.СсылкаСуществует(Таб[Ном-1].ВидКИ1С) Тогда
			
			Таб.Удалить(Таб[Ном-1]);
			
		ИначеЕсли ЗначениеЗаполнено(Таб[Ном-1].ВидКИ1С) Тогда
			Если (Таб[Ном-1].Тип = Перечисления.ТипыКонтактнойИнформации.Факс) И НЕ (Таб[Ном-1].ВидКИOutlook = "BusinessFaxNumber") Тогда
				Таб[Ном-1].ВидКИOutlook			= "BusinessFaxNumber";
				Таб[Ном-1].ПредставлениеКИOutlook	= "Факс рабочий";
			КонецЕсли;
		КонецЕсли;
		
		Ном = Ном-1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет из сохраненной настройки.
//
Функция ЗаполнитьИзСохраненнойНастройки() Экспорт
	
	СтруктураНастроекНаКлиенте = Новый Структура;

	Пользователь 						 = Объект.ПрограммаOutlook.Пользователь;
	ДатаПоследнейСинхронизацииКонтактов = Объект.ПрограммаOutlook.ДатаПоследнейСинхронизацииКонтактов;
	ДатаПоследнейСинхронизацииСобытий   = Объект.ПрограммаOutlook.ДатаПоследнейСинхронизацииСобытий;
	ДатаПоследнейСинхронизацииПисем     = Объект.ПрограммаOutlook.ДатаПоследнейСинхронизацииПисем;
	
	МенеджерНастройки = РегистрыСведений.CRM_НастройкиОбменаСOutlook.СоздатьМенеджерЗаписи();
	
	МенеджерНастройки.ПрограммаOutlook = Объект.ПрограммаOutlook;
	МенеджерНастройки.Наименование = Объект.ИмяСохраненнойНастройки;
	МенеджерНастройки.Прочитать();
	
	ТекущаяНастройка =  Объект.ИмяСохраненнойНастройки;
	
	СтруктураНастройки = Неопределено;
	Если  МенеджерНастройки.Выбран() Тогда
		СтруктураНастройки = МенеджерНастройки.Настройка.Получить();
	КонецЕсли;	
				
	Если НЕ ТипЗнч(СтруктураНастройки) = Тип("Структура") Тогда
		Возврат СтруктураНастроекНаКлиенте;
	КонецЕсли;	
	
	пОбъект = Обработки.CRM_ОбменСMSOutlook.Создать();
	МетаОбъект = пОбъект.Метаданные();
	РеквизитыОбработки = МетаОбъект.Реквизиты;
	
	Для	каждого Реквизит Из РеквизитыОбработки Цикл
		
		ЗначениеРеквизита = Неопределено;
		
		Если СтруктураНастройки.Свойство(Реквизит.Имя, ЗначениеРеквизита) Тогда
			
			Объект[Реквизит.Имя] = ЗначениеРеквизита;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеРеквизита = Неопределено;
	
	ТабСинхронизацииКИ = Неопределено;
	СтруктураНастройки.Свойство("СоответствиеКонтактнойИнформации", ТабСинхронизацииКИ);
	Если  ТабСинхронизацииКИ <> Неопределено   Тогда
		ПроверитьСкорректироватьТаблицуСоответствий(ТабСинхронизацииКИ);
		Объект.СоответствиеКонтактнойИнформации.Загрузить(ТабСинхронизацииКИ);
	КонецЕсли;
	
	НастройкаКонтакты = Неопределено;
	НастройкаСобытия  = Неопределено;
	
	СтруктураНастройки.Свойство("НастройкиКонтактов" , НастройкаКонтакты);
	СтруктураНастройки.Свойство("НастройкиСобытий" ,   НастройкаСобытия);
	
	ИнициализироватьРеквизитыНастроек();
	// ++ Возможно на место ПостроителейОтчетов будет добавлены КомпоновщикНастроекКомпоновкиДанных.
	Если НЕ НастройкаКонтакты = Неопределено Тогда
		
		Объект.НастройкиКонтактов.ЗагрузитьНастройки(НастройкаКонтакты);
		
	КонецЕсли;
	
	Если НЕ НастройкаСобытия = Неопределено Тогда
		
		Объект.НастройкиСобытий.ЗагрузитьНастройки(НастройкаСобытия);
		
	КонецЕсли;
	
	пТаблицаПапокOutlook = Неопределено;
	СтруктураНастройки.Свойство("ТаблицаПапокOutlook", пТаблицаПапокOutlook);
	Если пТаблицаПапокOutlook <> Неопределено Тогда
		СтруктураНастроекНаКлиенте.Вставить("ТаблицаПапокOutlook",пТаблицаПапокOutlook);
		//ТаблицаПапокOutlook.Загрузить(пТаблицаПапокOutlook);
	КонецЕсли;
	// чтение общих настроек
	ЗагрузитьОбщиеНастройкиОбмена();
	
	Возврат СтруктураНастроекНаКлиенте;
КонецФункции // _Заполнить()

&НаСервере
// Процедура загружает натсройки общие для всех пользователей.
//
// Параметры:
//  СообщатьЕслиНастройкаНеНайдена - булево - флаг необходимости оповещения пользователя.
//
Процедура ЗагрузитьОбщиеНастройкиОбмена(СообщатьЕслиНастройкаНеНайдена = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	CRM_НастройкиОбменаСOutlook.ПрограммаOutlook,
	               |	CRM_НастройкиОбменаСOutlook.Наименование,
	               |	CRM_НастройкиОбменаСOutlook.Настройка
	               |ИЗ
	               |	РегистрСведений.CRM_НастройкиОбменаСOutlook КАК CRM_НастройкиОбменаСOutlook
	               |ГДЕ
	               |	CRM_НастройкиОбменаСOutlook.ПрограммаOutlook = ЗНАЧЕНИЕ(Справочник.CRM_ПрограммыMSOutlook.ПустаяСсылка)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураНастройки = Неопределено;

	Пока Выборка.Следующий() Цикл
	
			СтруктураНастройки = Выборка.Настройка.Получить();
	
	КонецЦикла;

	Если НЕ ТипЗнч(СтруктураНастройки) = Тип("Структура") Тогда
		
		Если СообщатьЕслиНастройкаНеНайдена Тогда
			Сообщ = Новый СообщениеПользователю;
			ТекстСообщ = Нстр("ru='Не настроены общие настройки обмена!'");
			Сообщ.Текст = ТекстСообщ;
			Сообщ.Сообщить();
		КонецЕсли;	
		
		Возврат
	КонецЕсли;		
		
	РеквизитыОбработки = ПолучитьСписокОбщихНастроекОбмена();
	
	Для	каждого Реквизит Из РеквизитыОбработки Цикл
		
		ЗначениеРеквизита = Неопределено;
		
		Если СтруктураНастройки.Свойство(Реквизит.Значение, ЗначениеРеквизита) Тогда
			
			Объект[Реквизит.Значение] = ЗначениеРеквизита;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ИспользоватьОбщиеНастройкиСинхронизацииРеквизитов Тогда
		ТабСинхронизацииКИ = Неопределено;
		СтруктураНастройки.Свойство("СоответствиеКонтактнойИнформации", ТабСинхронизацииКИ);
		Если  ТабСинхронизацииКИ <> Неопределено   Тогда
			ПроверитьСкорректироватьТаблицуСоответствий(ТабСинхронизацииКИ);
			Объект.СоответствиеКонтактнойИнформации.Загрузить(ТабСинхронизацииКИ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
// Автоматическое сохранение настроек при закрытие формы.
//
Процедура СохранитьНастройкуПриЗакрытииФормы(
	СтруктураНастроекНаКлиенте
	) Экспорт
	
	СохраненнаяНастройка = СохранитьЗначенияРеквизитовВСтруктуру();
	
	Если СтруктураНастроекНаКлиенте.Свойство("ТаблицаПапокOutlook") Тогда
		СохраненнаяНастройка.Вставить("ТаблицаПапокOutlook", СтруктураНастроекНаКлиенте.ТаблицаПапокOutlook);
	КонецЕсли;
	
	МенеджерНастройки = РегистрыСведений.CRM_НастройкиОбменаСOutlook.СоздатьМенеджерЗаписи();
	
	МенеджерНастройки.ПрограммаOutlook = Объект.ПрограммаOutlook;
	МенеджерНастройки.Наименование = ТекущаяНастройка;
	МенеджерНастройки.Прочитать();
	
	Если НЕ МенеджерНастройки.Выбран()  Тогда
		// Проверим есть ли хоть одна настройка.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	CRM_НастройкиОбменаСOutlook.Настройка
		|ИЗ
		|	РегистрСведений.CRM_НастройкиОбменаСOutlook КАК CRM_НастройкиОбменаСOutlook
		|ГДЕ
		|	CRM_НастройкиОбменаСOutlook.ПрограммаOutlook = &ПрограммаOutlook";
		
		Запрос.УстановитьПараметр("ПрограммаOutlook",Объект.ПрограммаOutlook );
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		МенеджерНастройки.Основная = (Выборка.Количество()=0);
		
	КонецЕсли;
	
	МенеджерНастройки.ПрограммаOutlook = Объект.ПрограммаOutlook;
	МенеджерНастройки.Наименование = Объект.ИмяСохраненнойНастройки;
	
	МенеджерНастройки.Настройка = Новый ХранилищеЗначения(СохраненнаяНастройка, Новый СжатиеДанных(9));
		
    МенеджерНастройки.Записать();
	
КонецПроцедуры// _СохранитьНастройкуПриЗакрытииФормы()

&НаСервере
// Процедура сохранить дату синхронизации для текущей базы outlook.
//
Процедура СохранитьДатуСинхронизацииДляТекущейБазыOutlook() Экспорт
	
	ПрограммаOutlookОбъект = Объект.ПрограммаOutlook.ПолучитьОбъект();
	ПрограммаOutlookОбъект.ДатаПоследнейСинхронизацииКонтактов = ДатаПоследнейСинхронизацииКонтактов;
	ПрограммаOutlookОбъект.ДатаПоследнейСинхронизацииСобытий = ДатаПоследнейСинхронизацииСобытий;
	ПрограммаOutlookОбъект.ДатаПоследнейСинхронизацииПисем = ДатаПоследнейСинхронизацииПисем;
	
	ПрограммаOutlookОбъект.Записать();
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьСписокОбщихНастроекОбмена()
	
	СписокОбщихНастроекОбмена = Новый СписокЗначений;
	
	Если Объект.ИспользоватьОбщиеДополнительныеНастройки Тогда
		СписокОбщихНастроекОбмена.Добавить("Комментарий1С");
		СписокОбщихНастроекОбмена.Добавить("КомментарийOutlook");
	КонецЕсли;
	
	Если Объект.ИспользоватьОбщиеНастройкиСинхронизацииОбъектов Тогда
		СписокОбщихНастроекОбмена.Добавить("ОткрытьФормуСопоставленияОбъектов");
		СписокОбщихНастроекОбмена.Добавить("СинхронизироватьКонтактыПоПолям");
		СписокОбщихНастроекОбмена.Добавить("УдалятьПомеченныеНаУдалениеОбъекты");
	КонецЕсли;

	Если Объект.ИспользоватьОбщиеНастройкиСинхронизацииРеквизитов Тогда

		// контакты
		СписокОбщихНастроекОбмена.Добавить("ГруппаКонтактов1С");
		
		// Вероятно нужно только в спарке с УТ11
		//СписокОбщихНастроекОбмена.Добавить("ГруппаДоступаККонтрагенту");
		
		СписокОбщихНастроекОбмена.Добавить("ПереноситьКомментарийКонтактаВOutlook");
		СписокОбщихНастроекОбмена.Добавить("ПереноситьЗаметкиКонтактаВ1С");

		// события
		//СписокОбщихНастроекОбмена.Добавить("СостояниеСобытий1С");
		//СписокОбщихНастроекОбмена.Добавить("ВидСобытий1С");
		//СписокОбщихНастроекОбмена.Добавить("ТипСобытий1С");
		СписокОбщихНастроекОбмена.Добавить("СинхронизироватьУчастниковСобытияOutlook");
		СписокОбщихНастроекОбмена.Добавить("СинхронизироватьКонтактыСобытияOutlook");	
		
		// письма
		//СписокОбщихНастроекОбмена.Добавить("СостояниеСобытийПисьмо");	
		//СписокОбщихНастроекОбмена.Добавить("ВидСобытийПисьмо");	
		СписокОбщихНастроекОбмена.Добавить("ЗагружатьВложенияПисьмо");	
		
	КонецЕсли;   
	
	Возврат СписокОбщихНастроекОбмена;
	
КонецФункции	

// -МодульОбъекта

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ДекорацияНастроитьСинхронизациюКонтактнойИнформацииНажатие(Элемент)
	
	АдресХранилищаЗначения = СохранитьВХранилищеСоответствиеКонтактнойИнформации();
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияНастроитьСинхронизациюКонтактнойИнформацииНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.CRM_ОбменСMSOutlook.Форма.ФормаНастройкиСоответствияПолей",
		Новый Структура("ХранилищеЗначения",АдресХранилищаЗначения),
		ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастроитьСинхронизациюКонтактнойИнформацииНажатиеЗавершение(СсылкаНаХранилищеЗначения, ДополнительныеПараметры) Экспорт
	
	Если СсылкаНаХранилищеЗначения <> Неопределено Тогда 
		
		ЗаполнитьТаблицуСоответствияКИПоСсылке(СсылкаНаХранилищеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСоответствияКИПоСсылке(СсылкаНаХЗ)
	
	Если СсылкаНаХЗ <> Неопределено 
		И ТипЗнч(СсылкаНаХЗ) = Тип("ХранилищеЗначения") Тогда 
		
		ТЗ = СсылкаНаХЗ.Получить();
		Объект.СоответствиеКонтактнойИнформации.Очистить();
		Объект.СоответствиеКонтактнойИнформации.Загрузить(ТЗ);
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если Элементы.ГруппаПанель.ТекущаяСтраница = Элементы.СтраницаЗавершение Тогда
		НеЗадаватьВопросПриЗакрытииФормы = Истина;
		ОбновитьТаблицуПапокOutlook(ДеревоПапокOutlook);
		Если НЕ CRM_ОбщегоНазначенияСервер.СсылкаСуществует(Объект.УчетнаяЗаписьПочтыДляСинхронизации) ИЛИ НЕ Объект.СинхронизироватьПисьма Тогда
			Объект.УчетнаяЗаписьПочтыДляСинхронизации = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка");
		КонецЕсли;
		Если Объект.СинхронизироватьПисьма И НЕ ЗначениеЗаполнено(Объект.УчетнаяЗаписьПочтыДляСинхронизации) Тогда
			Объект.УчетнаяЗаписьПочтыДляСинхронизации = ЗаполнитьУчетнуюЗаписьПочтыДляСинхронизации();
		КонецЕсли;
		СохранитьНастройкуПриЗакрытииФормы(Новый Структура("ТаблицаПапокOutlook", ТаблицаПапокOutlook));
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Предел = Элементы.ГруппаПанель.ПодчиненныеЭлементы.Количество();
	Страница = Элементы.ГруппаПанель.ТекущаяСтраница;
	Индекс = Элементы.ГруппаПанель.ПодчиненныеЭлементы.Индекс(Страница);
	
	Если Индекс < Предел - 1 Тогда
		
		СледующаяСтраница = Элементы.ГруппаПанель.ТекущаяСтраница;
		Пока Истина Цикл
			Индекс = Индекс + 1;
			Если Элементы.ГруппаПанель.ПодчиненныеЭлементы[Индекс].Видимость И Элементы.ГруппаПанель.ПодчиненныеЭлементы[Индекс].Доступность Тогда
				СледующаяСтраница = Элементы.ГруппаПанель.ПодчиненныеЭлементы[Индекс];
				Прервать;
			КонецЕсли;
			Если Индекс > Предел - 1 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Элементы.ГруппаПанель.ТекущаяСтраница <> СледующаяСтраница Тогда
			Элементы.ГруппаПанель.ТекущаяСтраница = СледующаяСтраница;
		КонецЕсли;

	КонецЕсли;
	
	ОбновитьЗаголовкиКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Предел = 0;
	Страница = Элементы.ГруппаПанель.ТекущаяСтраница;
	Индекс = Элементы.ГруппаПанель.ПодчиненныеЭлементы.Индекс(Страница);
	
	Если Индекс > Предел Тогда
		
		СледующаяСтраница = Элементы.ГруппаПанель.ПодчиненныеЭлементы[Индекс];
		Пока Истина Цикл
			Индекс = Индекс-1;
			Если Элементы.ГруппаПанель.ПодчиненныеЭлементы[Индекс].Видимость И Элементы.ГруппаПанель.ПодчиненныеЭлементы[Индекс].Доступность Тогда
				СледующаяСтраница = Элементы.ГруппаПанель.ПодчиненныеЭлементы[Индекс];
				Прервать;
			КонецЕсли;
			Если Индекс < 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Элементы.ГруппаПанель.ТекущаяСтраница <> СледующаяСтраница Тогда
			Элементы.ГруппаПанель.ТекущаяСтраница = СледующаяСтраница;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьЗаголовкиКнопок();
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть форму обмена. Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().Обработка_CRM_ОбменСMSOutlook_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	Элементы.ГруппаПанель.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	//мРежимЗапускаОграниченныеПрава = НЕ CRM_ТекущийПользовательЯвляетсяАдминистраторомОбменаMSOutlook();
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		ЗначенияЗаполнения = Параметры.ЗначенияЗаполнения;
		Если   ЗначенияЗаполнения.Свойство("Наименование")
			 И ЗначенияЗаполнения.Свойство("ПрограммаOutlook")
			Тогда
			
			Объект.ИмяСохраненнойНастройки = ЗначенияЗаполнения.Наименование;
			Объект.ПрограммаOutlook = ЗначенияЗаполнения.ПрограммаOutlook;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ИмяСохраненнойНастройки) И ЗначениеЗаполнено(Объект.ПрограммаOutlook) Тогда
		Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.CRM_НастройкиОбменаСOutlook) Тогда
			МенеджерЗаписи = РегистрыСведений.CRM_НастройкиОбменаСOutlook.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПрограммаOutlook = Объект.ПрограммаOutlook;
			МенеджерЗаписи.Наименование = Объект.ИмяСохраненнойНастройки;
			МенеджерЗаписи.Прочитать();
			Если Не МенеджерЗаписи.Выбран() Тогда
				ЭтоНоваяНастройка = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	////ЭтаФорма.ИмяКомпьютера = ИмяКомпьютера();
	//ЭтаФорма.ИмяКомпьютера = Объект.ПрограммаOutlook.Компьютер;
	ИмяКомпьютераОбъекта = Объект.ПрограммаOutlook.Компьютер;
	
	РежимОбщиеНастройки = НЕ ЗначениеЗаполнено(Объект.ПрограммаOutlook); 
	Если  ЗначениеЗаполнено(Объект.ПрограммаOutlook) Тогда
		РежимРедактированиеЧужойНастройки = (Объект.ПрограммаOutlook.Пользователь <> ТекущийПользователь);
	Иначе
	   	РежимРедактированиеЧужойНастройки  = Ложь;
	КонецЕсли;
	
	ЗаполнитьНачальныеНастройки();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ФормаИнициализирована Тогда
		ИнициализироватьФорму();
		Отказ = ОтказТемп;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеВидимостьюДоступностьюЭлементов();
	
	ОбновитьЗаголовкиКнопок();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	Если НЕ (НеЗадаватьВопросПриЗакрытииФормы = Истина) Тогда
		Отказ = Истина;
		ОбратныйВызов = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбратныйВызов, НСтр("ru = 'Работа мастера не была завершена. Сохранить измененные настройки?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик ответа на вопрос перед закрытием формы.
//
// Параметры:
//	Результат				- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьТаблицуПапокOutlook(ДеревоПапокOutlook);
		СохранитьНастройкуПриЗакрытииФормы(Новый Структура("ТаблицаПапокOutlook",ТаблицаПапокOutlook));
    КонецЕсли;
	НеЗадаватьВопросПриЗакрытииФормы	= Истина;
	Закрыть();
КонецПроцедуры // ПередЗакрытиемЗавершение()

&НаКлиенте
Процедура ИнициализироватьФорму()  Экспорт
	
	ИнициализироватьТаблицыНаКлиенте();
	ТекстОшибки = "";	
	Если НЕ РежимОбщиеНастройки = Истина 
		И НЕ РежимРедактированиеЧужойНастройки  Тогда		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИнициализироватьФормуЗавершение", ЭтотОбъект);
		ПолучитьOutlookObj(ТекстОшибки, ОписаниеОповещения);
		Возврат;
	КонецЕсли;	
	
	ИнициализироватьФормуЗавершение(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьФормуЗавершение(ДанныеOutlookObj, ДополнительныеПараметры)  Экспорт
	
	Если ДанныеOutlookObj <> Неопределено Тогда
		Если НЕ ДанныеOutlookObj.Результат Тогда
			ПоказатьПредупреждение(, ДанныеOutlookObj.ТекстОшибки);
			НеЗадаватьВопросПриЗакрытииФормы = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимОбщиеНастройки ИЛИ РежимРедактированиеЧужойНастройки Тогда
		
		СтруктураНастроекНаКлиенте = ЗаполнитьИзСохраненнойНастройки();
		
		Если СтруктураНастроекНаКлиенте.Свойство("ТаблицаПапокOutlook") Тогда 
			ТаблицаПапокOutlook = СтруктураНастроекНаКлиенте.ТаблицаПапокOutlook;
		КонецЕсли;
	
	Иначе	
		
		ЗаполнитьДеревоПапокOutlook(ДеревоПапокOutlook);	
		
		СтруктураНастроекНаКлиенте = ЗаполнитьИзСохраненнойНастройки();
		
		Если СтруктураНастроекНаКлиенте.Свойство("ТаблицаПапокOutlook") Тогда 
			
			ТаблицаПапокOutlook = СтруктураНастроекНаКлиенте.ТаблицаПапокOutlook;
			
		КонецЕсли;

		Количество = ТаблицаПапокOutlook.Количество();
		
		Если Количество <> 0 Тогда
			
			Строки = ДеревоПапокOutlook.ПолучитьЭлементы();
			
			Для каждого Строка Из Строки Цикл
				
				ОбновитьОтметкиГруппыИзСохраненнойНастройки(Строка);
				
			КонецЦикла;			
			
		КонецЕсли;	
		
		ОбновитьТаблицуПапокOutlook(ДеревоПапокOutlook);
		
	КонецЕсли;
	
	Если ОтказТемп Тогда
		ФормаИнициализирована = Истина;
		Открыть();
	КонецЕсли;
	
КонецПроцедуры

#Область ЭтапНастройкаПапокOutlook

&НаКлиенте
Процедура УстановитьПометкуЗагрузкаИз1С(ПапкаOutlook, ПрерватьРекурсию)
	
	Если ПрерватьРекурсию Тогда
		Возврат
	КонецЕсли;	
	
	Если ПапкаOutlook.Пометка Тогда
		ПапкаOutlook.ЗагрузкаИз1С = Истина;
		ПрерватьРекурсию = Истина;
	Иначе
		Строки = ПапкаOutlook.ПолучитьЭлементы();
		Для Каждого Папка Из Строки Цикл
			
			УстановитьПометкуЗагрузкаИз1С(Папка,ПрерватьРекурсию);
			Если ПрерватьРекурсию Тогда
				Возврат
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;	
			
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоПапокOutlookПометкаПриИзменении(Элемент)	
	
	ТекущаяСтрока = ТекущийЭлемент.ТекущиеДанные;
	
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;	
	
	// Определим родителя	
	КорневойЭлемент = ТекущаяСтрока;
	
	бКорневойРаздел = Ложь;
	пКорневой = КорневойЭлемент.ПолучитьРодителя();
	Если пКорневой = Неопределено Тогда 
		бКорневойРаздел = Истина;
	Иначе
		Пока пКорневой <> Неопределено Цикл
			пКорневой = пКорневой.ПолучитьРодителя();
			КорневойЭлемент = ?(пКорневой<>Неопределено,пКорневой,КорневойЭлемент);
		КонецЦикла
	КонецЕсли;
	
	Если бКорневойРаздел Тогда
		ТекущаяСтрока.Пометка = Ложь;
	Иначе
		Если ТекущаяСтрока.ЗагрузкаИз1С И НЕ ТекущаяСтрока.Пометка Тогда
			ПометкаУстановлена = Ложь;
			УстановитьПометкуЗагрузкаИз1С(КорневойЭлемент,ПометкаУстановлена);
			Если Элементы.ДеревоПапокOutlookЗагрузкаИз1С.Видимость Тогда
				ТекущаяСтрока.Пометка = НЕ ПометкаУстановлена;
				ТекущаяСтрока.ЗагрузкаИз1С = НЕ ПометкаУстановлена;
			КонецЕсли;
			ТекущаяСтрока.Пометка = НЕ ПометкаУстановлена;
			ТекущаяСтрока.ЗагрузкаИз1С = НЕ ПометкаУстановлена;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПапокOutlookЗагрузкаИз1СПриИзменении(Элемент)
		ТекущаяСтрока = ТекущийЭлемент.ТекущиеДанные;
	
	Если  ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;	
	
	// Определим родителя	
	КорневойЭлемент = ТекущаяСтрока;
	
	пКорневой = КорневойЭлемент.ПолучитьРодителя();
	Если НЕ пКорневой = Неопределено Тогда 
		
		Пока пКорневой <> Неопределено Цикл
			пКорневой = пКорневой.ПолучитьРодителя();
			КорневойЭлемент = ?(пКорневой<>Неопределено,пКорневой,КорневойЭлемент);
		КонецЦикла
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
			ТекущаяСтрока.ЗагрузкаИз1С = НЕ ТекущаяСтрока.ЗагрузкаИз1С;
			Возврат;
		КонецЕсли;	
		
		Если  ТекущаяСтрока.ЗагрузкаИз1С И НЕ ТекущаяСтрока.Пометка Тогда
			ТекущаяСтрока.Пометка = Истина;
		КонецЕсли;	 
				
		СнятьПометкиСПапокЗагрузкиИз1С(КорневойЭлемент, ТекущаяСтрока)
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбщиеНастройкиСинхронизацииОбъектов1ПриИзменении(Элемент)
	
	Элементы.ГруппаПанельСинхронизацияРеквизитов.Доступность = НЕ Объект.ИспользоватьОбщиеНастройкиСинхронизацииРеквизитов;
	
	Если Объект.ИспользоватьОбщиеНастройкиСинхронизацииРеквизитов Тогда
		ЗагрузитьОбщиеНастройкиОбмена(Истина)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбщиеНастройкиСинхронизацииОбъектовПриИзменении(Элемент)
		Элементы.ПанельСинхронизацииОбъектов.Доступность = НЕ Объект.ИспользоватьОбщиеНастройкиСинхронизацииОбъектов;
	Если Объект.ИспользоватьОбщиеНастройкиСинхронизацииОбъектов Тогда
		ЗагрузитьОбщиеНастройкиОбмена(Истина)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбщиеДополнительныеНастройкиПриИзменении(Элемент)
	Элементы.ПанельСинхронизацииОбъектов.Доступность = НЕ Объект.ИспользоватьОбщиеНастройкиСинхронизацииОбъектов;
	Если Объект.ИспользоватьОбщиеНастройкиСинхронизацииОбъектов Тогда
		ЗагрузитьОбщиеНастройкиОбмена(Истина)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Синхронизация Событий
// Процедура устанавливает дату в отборе событий.
//
Функция ПолучитьПредсталвениеСобытияOutlook(Тема,ДатаНачала)
	
	Возврат Строка(ДатаНачала) + ", " +  Тема;
	
КонецФункции

&НаСервере
Процедура УстанвоитьДатуВОтбореСобытий() Экспорт
			
	Если Объект.ТолькоИзмененныеСобытия И ЗначениеЗаполнено(ДатаПоследнейСинхронизацииСобытий) Тогда
		
		Настройки = Объект.НастройкиСобытий.ПолучитьНастройки();
		
		ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
		ЭлементОтбора.Представление = НСтр("ru='ДатаИзменения'");
		ЭлементОтбора.ПравоеЗначение = ДатаПоследнейСинхронизацииСобытий;
		Объект.ФильтрДатаИзмененияСобытияOutlook = ДатаПоследнейСинхронизацииСобытий;
			
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСобытиеOutlookВТаблицуСинхронизируемыхСобытий(ТаблицаСобытийOutlook, СобытиеOutlook, ContactFolder, FolderName)
		
	Частное = НЕ (ПолучитьРеквизитОбъектаOutlook(СобытиеOutlook,"Частное") = 0);
	
	СтрокаТаблицы = ПолучитьСтруктуруТаблицыСобытийOutlook();
	
	СтрокаТаблицы.ОбъектOutlookID		=   СобытиеOutlook.EntryID;
	СтрокаТаблицы.Представление_Outlook = ПолучитьПредсталвениеСобытияOutlook(ПолучитьРеквизитОбъектаOutlook(СобытиеOutlook,"ОписаниеСобытия"),
		ПолучитьРеквизитОбъектаOutlook(СобытиеOutlook,"НачалоСобытия"));
	
	СтрокаТаблицы.Частное			= Частное;
	СтрокаТаблицы.ДатаИзменения	=  ПолучитьРеквизитОбъектаOutlook(СобытиеOutlook,"ДатаИзменения");
	СтрокаТаблицы.ДатаИзменения = ?(СтрокаТаблицы.ДатаИзменения= Дата('45010101'), Дата("00010101"),СтрокаТаблицы.ДатаИзменения);
	СтрокаТаблицы.FolderName			= FolderName;
	
	СтруктураОбъектOutlook = Новый Структура;
	СтруктураОбъектOutlook.Вставить("ОбъектOutlook",СобытиеOutlook);
	СтруктураОбъектOutlook.Вставить("ПапкаOutlook" ,ContactFolder);		
	СтрокаТаблицы.ОбъектOutlook			= СтруктураОбъектOutlook;
	
	ТаблицаСобытийOutlook.Добавить(СтрокаТаблицы);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолучитьВсеСобытияOutlook()
	Для Каждого ПапкаOutlook Из ТаблицаПапокOutlook Цикл
		Если НЕ (ПапкаOutlook.olFolder = "1") Тогда Продолжить; КонецЕсли;
		ContactFolder	= ПапкаOutlook.Folder;	
		FolderName		= ContactFolder.Name;
		Для Ном = 1 По ContactFolder.Items.Count Цикл
			СобытиеOutlook	= ContactFolder.Items(Ном);	
			Повторяющееся	= ПолучитьРеквизитОбъектаOutlook(СобытиеOutlook, "Повторяющееся");
			Если Повторяющееся = Истина Тогда
				// Повторяющееся события  не синхронизируем.
				Продолжить;
			КонецЕсли;	
			ДобавитьСобытиеOutlookВТаблицуСинхронизируемыхСобытий(ТаблицаСобытийOutlook, СобытиеOutlook, ContactFolder, FolderName);
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
// Процедура  формирует список синхронизируемых событий outlook.
//
Функция ПолучитьСинхронизируемыеСобытияOutlook() Экспорт
	ТаблицаСинхронизируемыхСобытийOutlook = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ФильтрДатаИзмененияСобытияOutlook) Тогда   // первая синхронизация
		Для Каждого ПапкаOutlook Из ТаблицаПапокOutlook Цикл
			Если НЕ (ПапкаOutlook.olFolder = "1") Тогда Продолжить; КонецЕсли;
			ContactFolder	= ПапкаOutlook.Folder;	
			FolderName		= ContactFolder.Name;
			СинхронизируемыеСобытия = ContactFolder.Items.Restrict("[LastModificationTime] > '" 
				+ Формат(Объект.ФильтрДатаИзмененияСобытияOutlook + 60, "ДФ=""dd/MM/yy ЧЧ:мм""") + "'");
			Для Ном = 1 По СинхронизируемыеСобытия.Count Цикл
				СобытиеOutlook = СинхронизируемыеСобытия.Item(Ном) ;
				// Возможно не нужно синхронизировать частные контакты.
				Если  Объект.ИсключитьЧастныеКонтакты И НЕ (ПолучитьРеквизитОбъектаOutlook(СобытиеOutlook,"Частное") = 0) Тогда
					Продолжить;
				КонецЕсли;
				Повторяющееся = ПолучитьРеквизитОбъектаOutlook(СобытиеOutlook, "Повторяющееся");
				Если Повторяющееся = Истина Тогда
					// Повторяющееся события  не синхронизируем.
					Продолжить;
				КонецЕсли;	
				ДобавитьСобытиеOutlookВТаблицуСинхронизируемыхСобытий(ТаблицаСинхронизируемыхСобытийOutlook, СобытиеOutlook,
					ContactFolder, FolderName);
			КонецЦикла;	
		КонецЦикла;
	Иначе	
		ПолучитьВсеСобытияOutlook();
		Если Объект.ИсключитьЧастныеСобытия Тогда
			Ошибка = "";
			ТаблицаСинхронизируемыхСобытийOutlook =  НайтиСтроки(ТаблицаСобытийOutlook, Новый Структура("Частное", Ложь),
				Ошибка);
		Иначе
			ТаблицаСинхронизируемыхСобытийOutlook =  НайтиСтроки(ТаблицаСобытийOutlook);
		КонецЕсли;
	КонецЕсли;
	Возврат ТаблицаСинхронизируемыхСобытийOutlook;
КонецФункции	

&НаСервере
// Процедура  формирует список синхронизируемых событий 1С.
//
Функция ПолучитьСинхронизируемыеСобытия1С() Экспорт
	
	ТекстЗапроса = СформироватьТекстЗапросаСобытия();
	Отбор = Объект.НастройкиСобытий.Настройки.Отбор;
	ТЗ = CRM_ОбщегоНазначенияСервер.ВыполнитьЗапросВКомпоновкеДанных(ТекстЗапроса, Отбор);
	ТаблицаСинхронизируемыхСобытий1С = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТЗ);
	
	Возврат ТаблицаСинхронизируемыхСобытий1С;
	
КонецФункции

&НаСервере
Функция ПолучитьОбъект1С(ОбъектOutlook)
	
	СсылкаВOutlook = ОбъектOutlook.EntryID;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_СоответствиеОбъектовOutlook.СобственнаяСсылка
	               |ИЗ
	               |	РегистрСведений.CRM_СоответствиеОбъектовOutlook КАК CRM_СоответствиеОбъектовOutlook
	               |ГДЕ
	               |	CRM_СоответствиеОбъектовOutlook.ПрограммаOutlook = &ПрограммаOutlook
	               |	И CRM_СоответствиеОбъектовOutlook.СсылкаВOutlook = &СсылкаВOutlook";
	
	Запрос.УстановитьПараметр("ПрограммаOutlook",Объект.ПрограммаOutlook);
	Запрос.УстановитьПараметр("СсылкаВOutlook",СсылкаВOutlook);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		Возврат Выборка.СобственнаяСсылка;
	КонецЦикла;
	
	Возврат Неопределено;
			
КонецФункции	

&НаКлиенте
// Процедура устанавливает дату в отборе писем.
//
Процедура УстанвоитьДатуВОтбореПисем() Экспорт
			
	Если Объект.ТолькоИзмененныеПисьма И ЗначениеЗаполнено(ДатаПоследнейСинхронизацииПисем) Тогда
				
  		Объект.ФильтрДатаИзмененияПисьмаOutlook = ДатаПоследнейСинхронизацииПисем;
			
	КонецЕсли;	
			
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьПредсталвениеПисьмаOutlook(Тема, Отправитель, Получатель)
	
	Возврат СТрока(Отправитель) + ", " + СТрока(Получатель)  + ", " + СТрока(Тема);
	
КонецФункции	

&НаКлиенте
Процедура ДобавитьПисьмоOutlookВТаблицуСинхронизируемыхПисем(мТаблицаПисемOutlook, ПисьмоOutlook, ContactFolder, FolderName)
		
	СтрокаТаблицы = ПолучитьСтруктуруТаблицыПисемOutlook();
	СтрокаТаблицы.ОбъектOutlookID		=   ПисьмоOutlook.EntryID;
	СтрокаТаблицы.Представление_Outlook = ПолучитьПредсталвениеПисьмаOutlook(ПолучитьРеквизитОбъектаOutlook(ПисьмоOutlook,"Subject"),
		ПолучитьРеквизитОбъектаOutlook(ПисьмоOutlook,"From"),
		ПолучитьРеквизитОбъектаOutlook(ПисьмоOutlook,"To"));
	
	СтрокаТаблицы.ДатаИзменения	=  ПолучитьРеквизитОбъектаOutlook(ПисьмоOutlook,"ДатаИзменения");
	СтрокаТаблицы.ДатаИзменения = ?(СтрокаТаблицы.ДатаИзменения= Дата('45010101'), Дата("00010101"),СтрокаТаблицы.ДатаИзменения);
	СтрокаТаблицы.FolderName			= FolderName;
	
	СтруктураОбъектOutlook = Новый Структура;
	СтруктураОбъектOutlook.Вставить("ОбъектOutlook",ПисьмоOutlook);
	СтруктураОбъектOutlook.Вставить("ПапкаOutlook" ,ContactFolder);	
	СтрокаТаблицы.ОбъектOutlook			= СтруктураОбъектOutlook;
	
КонецПроцедуры

&НаКлиенте
// Процедура формирует список событий outlook.
//
Процедура ПолучитьВСЕПисьмаOutlook()  Экспорт
	
	Для каждого ПапкаOutlook Из ТаблицаПапокOutlook Цикл
		
		Если  ПапкаOutlook.olFolder <> "0" Тогда
			Продолжить;
		КонецЕсли;
		
		ContactFolder = ПапкаOutlook.Folder;	
		
		FolderName = ContactFolder.Name;
				
		Для Ном = 1 По ContactFolder.Items.Count Цикл
			
			ПисьмоOutlook = ContactFolder.Items(Ном);	
			
			ДобавитьПисьмоOutlookВТаблицуСинхронизируемыхПисем(ТаблицаПисемOutlook,ПисьмоOutlook,ContactFolder,FolderName);
			
		КонецЦикла;	
				
	КонецЦикла;
		
КонецПроцедуры	

&НаКлиенте
// Процедура  формирует список синхронизируемых событий outlook.
//
Функция ПолучитьСинхронизируемыеПисьмаOutlook() Экспорт
		
	ТаблицаСинхронизируемыхПисемOutlook =  СкопироватьКолонки(ТаблицаПисемOutlook);
	
	Если НЕ ЗначениеЗаполнено(Объект.ФильтрДатаИзмененияПисьмаOutlook) Тогда   // первая синхронизация
		
		ПолучитьВСЕПисьмаOutlook();
			
		ТаблицаСинхронизируемыхПисемOutlook =  СкопироватьКолонки(ТаблицаПисемOutlook);
			
	Иначе			
			
		Для каждого ПапкаOutlook Из ТаблицаПапокOutlook Цикл
			
			Если ПапкаOutlook.olFolder <> "0" Тогда
				Продолжить;
			КонецЕсли;
			
			ContactFolder = ПапкаOutlook.Folder;	
			FolderName = ContactFolder.Name;
			
			СинхронизируемыеПисьма = ContactFolder.Items.Restrict("[LastModificationTime] > '" + Формат(Объект.ФильтрДатаИзмененияПисьмаOutlook+60,"ДФ=""dd/MM/yy ЧЧ:мм""")+"'");
			
			Для Ном = 1 По СинхронизируемыеПисьма.Count Цикл
				ПисьмоOutlook = СинхронизируемыеПисьма.item(Ном) ;
																
				ДобавитьПисьмоOutlookВТаблицуСинхронизируемыхПисем(ТаблицаСинхронизируемыхПисемOutlook,ПисьмоOutlook,ContactFolder,FolderName);
								
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаСинхронизируемыхПисемOutlook;
		
КонецФункции

&НаКлиенте
// Процедура  сопоставляет  контакты outlook с  контактами 1С.
//
Процедура СопоставитьПисьмаOutlook(ТаблицаСинхронизируемыхПисемOutlook)
	
	Колличество = ТаблицаСинхронизируемыхПисемOutlook.Количество();	
	Сч = 0;
	
	Для Каждого СтрокаПисемOutlook Из ТаблицаСинхронизируемыхПисемOutlook Цикл
		
		сч = сч+1;
		// Возможно контакт уже сопоставлен ранее.
		НайденыеСтроки = НайтиСтроки(СОМОбъектыПисем,Новый Структура("ОбъектOutlookID",СтрокаПисемOutlook.ОбъектOutlookID));
        Если НайденыеСтроки.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// поиск контакта в 1С
		СсылкаНаОбъект1С = ПолучитьОбъект1С(СтрокаПисемOutlook.ОбъектOutlook.ОбъектOutlook);
				
		// Добавим новую строку в таблицу сопоставления объектов 1С и Outlook.
		НоваяСтрокаПисьма = Объект.Письма.Добавить();
		
		НоваяСтрокаПисьма.Пометка = Истина;	
		НоваяСтрокаПисьма.Представление_Outlook		= СтрокаПисемOutlook.Представление_Outlook;
		НоваяСтрокаПисьма.ПапкаOutlook				= СтрокаПисемOutlook.FolderName;
		НоваяСтрокаПисьма.ДатаИзменения_Outlook		= СтрокаПисемOutlook.ДатаИзменения;
		
		НоваяСтрокаПисьма.Направление			= "Outlook -> 1С";
				
		Если ЗначениеЗаполнено(СсылкаНаОбъект1С) Тогда 
			НоваяСтрокаПисьма.Объект_1С			= СсылкаНаОбъект1С;
			НоваяСтрокаПисьма.ДатаИзменения_1С	= СсылкаНаОбъект1С.CRM_ДатаИзменения;
		Иначе
			НоваяСтрокаПисьма.Объект_1С			= ПредопределенноеЗначение("Документ.CRM_Мероприятие.ПустаяСсылка");
		КонецЕсли;
						
		НоваяСтрокаСОМОбъекта				= ПолучитьСтруктуруТаблицыCOMОбъектовПисем();
		НоваяСтрокаСОМОбъекта.СтрокаТЧ		= НоваяСтрокаПисьма;
		НоваяСтрокаСОМОбъекта.ОбъектOutlook	= СтрокаПисемOutlook.ОбъектOutlook.ОбъектOutlook;
		НоваяСтрокаСОМОбъекта.ОбъектOutlookID			= СтрокаПисемOutlook.ОбъектOutlookID;
		СОМОбъектыПисем.Добавить(НоваяСтрокаСОМОбъекта);
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Функция заполняет табличную часть контактов в соответствии с указанным направлением и приоритетом.
//
Процедура ЗаполнитьТаблицуСинхронизацииПисем() Экспорт
	
	Если НЕ Объект.СинхронизироватьПисьма Тогда
		Возврат
	КонецЕсли;	
	
	СОМОбъектыПисем.Очистить();
			
	СинхронизируемыеПисьмаOutlook = ПолучитьСинхронизируемыеПисьмаOutlook();
	СопоставитьПисьмаOutlook(СинхронизируемыеПисьмаOutlook);		
	
КонецПроцедуры

#КонецОбласти

#Область Контакты

&НаКлиенте
Процедура ОбновитьЗаголовкиКнопок()
	Если Элементы.ГруппаПанель.ТекущаяСтраница = Элементы.СтраницаЗавершение Тогда
		Элементы.КомандаДалее.Заголовок = НСтр("ru = 'Завершить'");
		Элементы.КомандаДалее.Картинка = БиблиотекаКартинок.ЗакончитьРедактирование;
	Иначе
		Элементы.КомандаДалее.Заголовок = НСтр("ru = 'Далее'");
		Если Элементы.КомандаДалее.Картинка <> БиблиотекаКартинок.ПереместитьВправо Тогда
			Элементы.КомандаДалее.Картинка = БиблиотекаКартинок.ПереместитьВправо;
		КонецЕсли;
	КонецЕсли;
	
	КнопкаНазадДоступна = (Элементы.ГруппаПанель.ТекущаяСтраница <> Элементы.СтраницаСтарт);
	Если Элементы.КомандаНазад.Доступность <> КнопкаНазадДоступна Тогда
		Элементы.КомандаНазад.Доступность = КнопкаНазадДоступна;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПустойОбработчикВыбораИзСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Возврат;
КонецПроцедуры // ПустойОбработчикВыбораИзСписка()	

&НаКлиенте
Процедура НадписьОткрытьСписокКонтатков1СНажатие(Элемент)
	ТекстЗапроса = CRM_ОбменСMSOutlookКлиент.СформироватьТекстЗапросаКонтакты();
	Отбор = Объект.НастройкиКонтактов.Настройки.Отбор;
	пПараметры = Новый Соответствие;
	пПараметры.Вставить("Партнеры",					Объект.СинхронизироватьК);
	пПараметры.Вставить("КонтактныеЛицаПартнеров",	Объект.СинхронизироватьКЛК);	
	мКонтакты = CRM_ОбменСMSOutlookСервер.ПолучитьСинхронизируемыеКонтакты1С(ТекстЗапроса, Отбор, пПараметры);
	СписокКонтактов = Новый СписокЗначений;
	Для Каждого Контакт Из мКонтакты Цикл
		СписокКонтактов.Добавить(Контакт.Ссылка);
	КонецЦикла;
	ОткрытьФорму("Обработка.CRM_ОбменСMSOutlook.Форма.СписокКонтактов", Новый Структура("ОтборСсылок", СписокКонтактов));
КонецПроцедуры

&НаКлиенте
Процедура НадписьОткрытьСписокКонтатковOutlookНажатие(Элемент)
	Конфигурация = ПолучитьКонфигурациюОбмена();
	мСобытияOutlook = CRM_ОбменСMSOutlookКлиент.ПолучитьСинхронизируемыеКонтактыOutlook(Конфигурация.СтруктураСвойств,Конфигурация.Настройка);
	СписокВыбора = Новый СписокЗначений;
	Для Каждого Событие Из мСобытияOutlook Цикл
		СписокВыбора.Добавить(Событие.Представление_Outlook);
	КонецЦикла;
	Если СписокВыбора.Количество() = 0 Тогда
		СписокВыбора.Добавить("");
	КонецЕсли;	
	ПустоеОповещениеВыбора = Новый ОписаниеОповещения("ПустойОбработчикВыбораИзСписка", ЭтотОбъект, Новый Структура);
	СписокВыбора.ПоказатьВыборЭлемента(ПустоеОповещениеВыбора, НСтр("ru='Список синхронизируемых контактов Outlook'"));
КонецПроцедуры

&НаКлиенте
Процедура ГруппаКонтактов1СНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Объект.ГруппаКонтактов1С
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Партнеры.ФормаВыбораГруппы",,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаКонтактов1СОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.ГруппаКонтактов1С = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОткрытьСписокСобытий1СНажатие(Элемент)
	ТекстЗапроса = СформироватьТекстЗапросаСобытия();
	Отбор = Объект.НастройкиСобытий.Настройки.Отбор;
	мСобытия = CRM_ОбменСMSOutlookСервер.ПолучитьСинхронизируемыеСобытия1С(ТекстЗапроса,Отбор);
	СписокСобытий = Новый СписокЗначений;
	Для Каждого Событие Из мСобытия Цикл
		СписокСобытий.Добавить(Событие.Событие);
	КонецЦикла;
	ОткрытьФорму("Обработка.CRM_ОбменСMSOutlook.Форма.СписокСобытий", Новый Структура("ОтборСсылок", СписокСобытий));
КонецПроцедуры

&НаКлиенте
Процедура НадписьОткрытьСписокСобытийOutlookНажатие(Элемент)
	СписокВыбора = Новый СписокЗначений;
	Конфигурация = ПолучитьКонфигурациюОбмена();
	мСобытияOutlook = CRM_ОбменСMSOutlookКлиент.ПолучитьСинхронизируемыеСобытияOutlook(Конфигурация.СтруктураСвойств,Конфигурация.Настройка);
	СписокВыбора = Новый СписокЗначений;
	Для Каждого Событие Из мСобытияOutlook Цикл
		СписокВыбора.Добавить(Событие.Представление_Outlook);
	КонецЦикла;
	Если СписокВыбора.Количество() = 0 Тогда
		СписокВыбора.Добавить("");
	КонецЕсли;	
	ПустоеОповещениеВыбора = Новый ОписаниеОповещения("ПустойОбработчикВыбораИзСписка", ЭтотОбъект, Новый Структура);
	СписокВыбора.ПоказатьВыборЭлемента(ПустоеОповещениеВыбора, НСтр("ru='Список синхронизируемых событий Outlook'"));
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьЗаголовкиКнопок();
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСобытияПриИзменении(Элемент)
	УправлениеВидимостьюДоступностьюЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьКонтактыПриИзменении(Элемент)
	УправлениеВидимостьюДоступностьюЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьПисьмаПриИзменении(Элемент)
	УправлениеВидимостьюДоступностьюЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	УправлениеВидимостьюДоступностьюЭлементов();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

ФормаИнициализирована = Ложь;
ОтказТемп = Ложь;
