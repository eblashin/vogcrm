
&НаКлиенте
Перем ЗакрытьФорму;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ВидОперации", 				ВидОперации);
	Параметры.Свойство("НаправлениеДеятельности", 	НаправлениеДеятельности);
	
	Если Параметры.Свойство("Заголовок") И ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		АвтоЗаголовок 	= Ложь;
		Заголовок 		= Параметры.Заголовок;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	ИнициализироватьТабличныйДокумент();
	
	ТекстЗамены 	= "";
	ШаблонЗаголовка = НСтр("ru = 'Необходимо скопировать колонки в таблицу из внешнего файла (Excel. Word и пр.) через буфер обмена.%1'");
	
	Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
		ТекстЗамены = " Обязательно должна быть заполнена одна из колонок: ""Артикул"" или ""Заводской артикул"".";
	ИначеЕсли ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание Тогда
		ТекстЗамены = " Обязательно должна быть заполнена колонка ""Артикул"".";
	КонецЕсли;
	
	Элементы.Шаг3Надпись.Заголовок = СтрШаблон(ШаблонЗаголовка, ТекстЗамены);
	РежимЗаполненияИзФайла 		= Истина;
	Элементы.ИмяФайла.Видимость = Истина;
	
	ТекущийШаг 				= 1;
	СкрыватьСопоставленные 	= Истина;
	ИмяФайла 				= НСтр("ru = 'Выберите файл'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗакрытьФорму = Истина
		И (ТабличныйДокумент.ВысотаТаблицы > 1
			Или Объект.Товары.Количество() > 0) Тогда
		
		Отказ 					= Истина;
		СтандартнаяОбработка 	= Ложь;
		
		ОповещениеОЗавершении 	= Новый ОписаниеОповещения("ЗакрытьФормуЗавершение", ЭтотОбъект);
		ТекстВопроса 			= НСтр("ru = 'Введенные данные будут потеряны. Продолжить?'");
		
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РежимЗаполненияИзФайлаПриИзменении(Элемент)
	
	РежимЗаполненияКопирование = Не РежимЗаполненияИзФайла;
	ПриИзмененииРежимаЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗаполненияКопированиеПриИзменении(Элемент)
	
	РежимЗаполненияИзФайла = Не РежимЗаполненияКопирование;
	ПриИзмененииРежимаЗаполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Загрузка из Excel";
	Диалог.МножественныйВыбор 	= Ложь;
	Диалог.ИндексФильтра 		= 0;
	Диалог.Фильтр 				= "Лист Excel (*.xlsx)|*.xlsx";
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Диалог", Диалог);
	
	Диалог.Показать(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект, ПараметрыОповещения));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ИмяФайла = ДополнительныеПараметры.Диалог.ПолноеИмяФайла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено И Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатура" Тогда
		ЗаполнитьСписокВыбораНоменклатуры(ТекущаяСтрока.КодСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаКолонокМакета

&НаКлиенте
Процедура ТаблицаКолонокМакетаПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКнопкиСопоставления();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаКолонокФайла

&НаКлиенте
Процедура ТаблицаКолонокФайлаПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКнопкиСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКолонокФайлаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СопоставитьКолонкиКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Если ТабличныйДокумент.ВысотаТаблицы > 1
		Или Объект.Товары.Количество() > 0 Тогда
		
		ОповещениеОЗавершении 	= Новый ОписаниеОповещения("ЗакрытьФормуЗавершение", ЭтотОбъект);
		ТекстВопроса 			= НСтр("ru = 'Введенные данные будут потеряны. Продолжить?'");
		
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьФорму = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	мТекущийШаг = ТекущийШаг;
	
	Если мТекущийШаг = 1 И РежимЗаполненияКопирование Тогда
		мТекущийШаг = 3;
	Иначе
		мТекущийШаг = мТекущийШаг + 1;
	КонецЕсли;
	
	Если мТекущийШаг = 2 Тогда
		
		Если ИмяФайла = НСтр("ru = 'Выберите файл'") Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран файл. Продолжение невозможно.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ИмяФайла");
			Возврат;
		КонецЕсли;
		
		Если Не ЗагрузитьЛистExcel() Тогда
			Возврат;
		КонецЕсли;
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
		
	ИначеЕсли мТекущийШаг = 3 Тогда
		
		Если РежимЗаполненияИзФайла Тогда
			ЗагрузитьМассивВТабличныйДокумент();
		КонецЕсли;
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3;
		
	ИначеЕсли мТекущийШаг = 4 Тогда
		
		ЗаполненАртикул 			= ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C1").Текст);
		ЗаполненЗаводскойАртикул 	= ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C2").Текст);
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание")
			И Не ЗаполненАртикул Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо заполнить артикул.'"));
			Возврат;
		ИначеЕсли Не ЗаполненАртикул И Не ЗаполненЗаводскойАртикул Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо заполнить колонку артикул или заводской артикул.'"));
			Возврат;
		КонецЕсли;
		
		ОчиститьСообщения();
		Состояние(
			НСтр("ru = 'Осуществляется сопоставление введенных данных с данными информационной базы. Пожалуйста подождите...'"),
			,
			,
			БиблиотекаКартинок.Информация32);
		
		СопоставитьДанныеТабличногоДокументаСДаннымиИБ();
		
	КонецЕсли;
	
	Элементы.Шаги.ТекущаяСтраница = Элементы[СтрШаблон("Шаг%1", мТекущийШаг)];
	ТекущийШаг = мТекущийШаг;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если ТекущийШаг = 3 Тогда
		ТекущийШаг 	= 1;
		ИмяФайла 	= НСтр("ru = 'Выберите файл'");
	Иначе
		ТекущийШаг = ТекущийШаг - 1;
	КонецЕсли;
	
	Элементы.Шаги.ТекущаяСтраница = Элементы[СтрШаблон("Шаг%1", ТекущийШаг)];
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТовары(Команда)
	
	ОчиститьСообщения();
	
	Если ВидОперации = 
		ПредопределенноеЗначение("Перечисление.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение") Тогда
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ПеренестиТоварыЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Строки, в которых номенклатура не найдена, перенесены не будут. Продолжить?'");
			ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПеренестиТоварыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиТоварыФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыФрагмент()
	
	ЗакрытьФорму = Истина;
	Закрыть();
	
	СтруктураВыбора = Новый Структура();
	СтруктураВыбора.Вставить("АдресТоваровВХранилище", ПоместитьТоварыВХранилище());
	ОповеститьОВыборе(СтруктураВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьКолонки(Команда)
	
	СопоставитьКолонкиКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПоискИСопоставлениеНоменклатуры

&НаСервере
Процедура ДобавитьПодобраннуюНоменклатуру(КодСтроки, НайденнаяНоменклатура)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура", 	НайденнаяНоменклатура);
	СтруктураОтбора.Вставить("КодСтроки", 		КодСтроки);
	
	ПодобранныеРанееТовары = ПодобраннаяНоменклатура.НайтиСтроки(СтруктураОтбора);
	Если ПодобранныеРанееТовары.Количество() = 0 Тогда
		ПодобраннаяСтрока = ПодобраннаяНоменклатура.Добавить();
		ПодобраннаяСтрока.КодСтроки = КодСтроки;
		ПодобраннаяСтрока.Номенклатура = НайденнаяНоменклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСДаннымиИБ()
	
	УточнениеНоменклатуры.Очистить();
	ПодобраннаяНоменклатура.Очистить();
	Объект.Товары.Очистить();
	
	Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
		ТаблицаНоменклатуры = ПолучитьДанныеИБпоНоменклатуре();
	КонецЕсли;
	
	ВысотаШапки = 1;
	НомерСтроки = ВысотаШапки + 1 ;
	
	СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
	
	Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание Тогда
		ЗаполненыАртикулЗаводскойАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + "C1").Текст);
	Иначе
		ЗаполненыАртикулЗаводскойАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + "C1").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + "C2").Текст);
	КонецЕсли;
	
	Пока ЗаполненыАртикулЗаводскойАртикул Цикл
		
		НоваяСтрока = УточнениеНоменклатуры.Добавить();
		НоваяСтрока.КодСтроки = НомерСтроки;
		
		Попытка
			
			НоваяСтрока.Артикул 						= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C1").Текст;
			НоваяСтрока.ЗаводскойАртикул 				= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C2").Текст;
			НоваяСтрока.Бренд 							= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C3").Текст;
			НоваяСтрока.Дизайн 							= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C4").Текст;
			НоваяСтрока.Цвет 							= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C5").Текст;
			НоваяСтрока.Материал 						= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C6").Текст;
			НоваяСтрока.ВидПоверхности 					= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C7").Текст;
			НоваяСтрока.Ректификация 					= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C8").Текст;
			НоваяСтрока.ШтрихкодЕд 						= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C9").Текст;
			НоваяСтрока.ШтрихкодКор 					= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C10").Текст;
			НоваяСтрока.Ширина 							= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C11").Текст;
			НоваяСтрока.Длина 							= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C12").Текст;
			НоваяСтрока.Высота 							= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C13").Текст;
			НоваяСтрока.КоличествоШтВКор 				= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C14").Текст;
			НоваяСтрока.ВесКор 							= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C15").Текст;
			НоваяСтрока.КоличествоКорВПалл 				= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C16").Текст;
			НоваяСтрока.КоллекцияПлитки 				= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C17").Текст;
			НоваяСтрока.НоменклатурнаяГруппа 			= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C18").Текст;
			НоваяСтрока.НазначениеКоллекции 			= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C19").Текст;
			НоваяСтрока.Сорт 							= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C20").Текст;
			НоваяСтрока.Производитель 					= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C21").Текст;
			НоваяСтрока.Статус 							= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C22").Текст;
			НоваяСтрока.Рейтинг 						= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C23").Текст;
			НоваяСтрока.КомментарийSKU 					= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C24").Текст;
			НоваяСтрока.ЕдиницаПродажи 					= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C25").Текст;
			НоваяСтрока.ТипИспользованияНоменклатуры 	= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C26").Текст;
			НоваяСтрока.КомментарийBSU 					= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C27").Текст;
			НоваяСтрока.ФорматКоллекции 				= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C28").Текст;
			НоваяСтрока.УсловияХранения 				= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C29").Текст;
			НоваяСтрока.ГруппировкаПоставщика 			= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C30").Текст;
			// +++ VOG Кулаков П.Л. 24.02.2021 DEV-195
			НоваяСтрока.ГодАнонса 						= ТабличныйДокумент.Область("R" + СтроковыйНомер + "C31").Текст;
			// --- VOG Кулаков П.Л.
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		// Заполнение тч Товары.
		Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
			
			СтрокаПоискаАртикул 				= ВРег(СтрЗаменить(НоваяСтрока.Артикул, " ", ""));
			СтрокаПоискаЗаводскойАртикул 		= ВРег(СтрЗаменить(НоваяСтрока.ЗаводскойАртикул, " ", ""));
			
			Если ЗначениеЗаполнено(СтрокаПоискаАртикул) Тогда
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("АртикулПоиск", СтрокаПоискаАртикул);
				
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураОтбора);
				Для Каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура);
				КонецЦикла;
				
			КонецЕсли;
			
			МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", НомерСтроки));
			
			Если МассивПодобраннойНоменклатуры.Количество() = 0
				И ЗначениеЗаполнено(СтрокаПоискаЗаводскойАртикул) Тогда
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ЗаводскойАртикулПоиск", СтрокаПоискаЗаводскойАртикул);
				
				НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураОтбора);
				
				Для Каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
					ДобавитьПодобраннуюНоменклатуру(НомерСтроки, НоменклатураПоКлючу.Номенклатура);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		НоваяСтрокаТовары.Артикул 						= НоваяСтрока.Артикул;
		НоваяСтрокаТовары.ЗаводскойАртикул 				= НоваяСтрока.ЗаводскойАртикул;
		НоваяСтрокаТовары.КодСтроки 					= НомерСтроки;
		
		НоваяСтрокаТовары.Бренд 				= ПолучитьСсылкуНаЭлемент(НоваяСтрока.Бренд, "Справочник", "вогБренды", НомерСтроки, "Бренд");
		Дизайн = ПолучитьСсылкуНаЭлемент(НоваяСтрока.Дизайн, "Справочник", "вогДизайныНоменклатуры", НомерСтроки, "Дизайн");
		Если Не ЗначениеЗаполнено(Дизайн) И Не ПустаяСтрока(НоваяСтрока.Дизайн) Тогда
			Дизайн = НоваяСтрока.Дизайн;
		КонецЕсли;
		НоваяСтрокаТовары.Дизайн 				= Дизайн;
		НоваяСтрокаТовары.Цвет 					= ПолучитьСсылкуНаЭлемент(
			НоваяСтрока.Цвет,
			"Справочник",
			"вогЦветаПроизводителей",
			НомерСтроки,
			"Цвет");
		НоваяСтрокаТовары.Материал 				= ПолучитьСсылкуНаЭлемент(
			НоваяСтрока.Материал,
			"Справочник",
			"вогВидыМатериалов",
			НомерСтроки,
			"Материал");
		НоваяСтрокаТовары.ВидПоверхности 		= ПолучитьСсылкуНаЭлемент(
		НоваяСтрока.ВидПоверхности,
			"Справочник",
			"вогВидыПоверхностиПлитки",
			НомерСтроки,
			"ВидПоверхности");
		
		Если ВРег(НоваяСтрока.Ректификация) = "ДА" Тогда
			НоваяСтрокаТовары.Ректификация = Истина;
		ИначеЕсли ВРег(НоваяСтрока.Ректификация) = "НЕТ" Тогда
			НоваяСтрокаТовары.Ректификация = Ложь;
		Иначе
			НоваяСтрокаТовары.Ректификация = "";
		КонецЕсли;
		НоваяСтрокаТовары.ШтрихкодЕд 			= НоваяСтрока.ШтрихкодЕд;
		НоваяСтрокаТовары.ШтрихкодКор 			= НоваяСтрока.ШтрихкодКор;
		НоваяСтрокаТовары.Ширина 				= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НоваяСтрока.Ширина);
		НоваяСтрокаТовары.Длина 				= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НоваяСтрока.Длина);
		НоваяСтрокаТовары.Высота 				= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НоваяСтрока.Высота);
		НоваяСтрокаТовары.КоличествоШтВКор 		= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НоваяСтрока.КоличествоШтВКор);
		НоваяСтрокаТовары.ВесКор 				= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НоваяСтрока.ВесКор);
		НоваяСтрокаТовары.КоличествоКорВПалл 	= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НоваяСтрока.КоличествоКорВПалл);
		
		НоваяСтрокаТовары.КоллекцияПлитки 		= ПолучитьСсылкуНаЭлемент(
			НоваяСтрока.КоллекцияПлитки,
			"Справочник",
			"вогКоллекцииПлитки",
			НомерСтроки,
			"КоллекцияПлитки");
		
		НоваяСтрокаТовары.НоменклатурнаяГруппа 	= ПолучитьСсылкуНаЭлемент(
			НоваяСтрока.НоменклатурнаяГруппа,
			"Справочник",
			"НоменклатурныеГруппы",
			НомерСтроки,
			"НоменклатурнаяГруппа");
		
		НоваяСтрокаТовары.НазначениеКоллекции 	= ПолучитьСсылкуНаЭлемент(
			НоваяСтрока.НазначениеКоллекции,
			"Справочник",
			"вогТипыНоменклатуры",
			НомерСтроки,
			"НазначениеКоллекции");
		
		НоваяСтрокаТовары.Сорт 					= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НоваяСтрока.Сорт);
		НоваяСтрокаТовары.Производитель 		= ПолучитьСсылкуНаЭлемент(
			НоваяСтрока.Производитель,
			"Справочник",
			"Партнеры",
			НомерСтроки,
			"Производитель");
		
		НоваяСтрокаТовары.Статус 				= ПолучитьСсылкуНаЭлемент(
			НоваяСтрока.Статус,
			"Справочник",
			"вогСтатусыНоменклатуры",
			НомерСтроки,
			"Статус");
		
		НоваяСтрокаТовары.Рейтинг 				= ПолучитьСсылкуНаЭлемент(
			НоваяСтрока.Рейтинг,
			"Справочник",
			"вогРейтингиНоменклатуры",
			НомерСтроки,
			"Рейтинг");
		
		НоваяСтрокаТовары.КомментарийSKU 		= НоваяСтрока.КомментарийSKU;
		НоваяСтрокаТовары.ЕдиницаПродажи 		= ПолучитьСсылкуНаЭлемент(
			НоваяСтрока.ЕдиницаПродажи,
			"Справочник",
			"вогВидыПлитки",
			НомерСтроки,
			"ЕдиницаПродажи");
		
		НоваяСтрокаТовары.ТипИспользованияНоменклатуры = ПолучитьСсылкуНаЭлемент(
			НоваяСтрока.ТипИспользованияНоменклатуры,
			"Перечисление",
			"вогТипыИспользованияПлитки",
			НомерСтроки,
			"ТипИспользованияНоменклатуры");
		
		НоваяСтрокаТовары.КомментарийBSU 		= НоваяСтрока.КомментарийBSU;
		НоваяСтрокаТовары.ФорматКоллекции = ПолучитьСсылкуНаЭлемент(
			НоваяСтрока.ФорматКоллекции,
			"Справочник",
			"вогФорматыПлитки",
			НомерСтроки,
			"ФорматКоллекции");
		
		НоваяСтрокаТовары.УсловияХранения = ПолучитьСсылкуНаЭлемент(
			НоваяСтрока.УсловияХранения,
			"Перечисление",
			"вогУсловияХранения",
			НомерСтроки,
			"УсловияХранения");
		
		НоваяСтрокаТовары.ГруппировкаПоставщика = ПолучитьСсылкуНаЭлемент(
			НоваяСтрока.ГруппировкаПоставщика,
			"Справочник",
			"вогГруппировкаПоставщика",
			НомерСтроки,
			"ГруппировкаПоставщика");
			
		// +++ VOG Кулаков П.Л. 24.02.2021 DEV-195
		НоваяСтрокаТовары.ГодАнонса	= НоваяСтрока.ГодАнонса;
		// --- VOG Кулаков П.Л.
		
		Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
			
			МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", НомерСтроки));
			
			Если МассивПодобраннойНоменклатуры.Количество() = 1 Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, МассивПодобраннойНоменклатуры.Получить(0), "Номенклатура");
			ИначеЕсли ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
				
				Если Не ПустаяСтрока(СтрокаПоискаАртикул) Тогда
					ШаблонСтрокиПоиска = НСтр("ru='По артикулу %1'");
					СтрокаПоиска = СтрШаблон(ШаблонСтрокиПоиска, СтрокаПоискаАртикул);
				ИначеЕсли Не ПустаяСтрока(СтрокаПоискаЗаводскойАртикул) Тогда
					ШаблонСтрокиПоиска = НСтр("ru='По заводскому артикулу %1'");
					СтрокаПоиска = СтрШаблон(ШаблонСтрокиПоиска, СтрокаПоискаЗаводскойАртикул);
				КонецЕсли;
				
				Если МассивПодобраннойНоменклатуры.Количество() = 0 Тогда
					ШаблонОшибки = НСтр("ru='%1 в строке %2 совпадений не найдено.'");
				Иначе
					ШаблонОшибки = НСтр("ru='%1 в строке %2 найдено несколько совпадений.'");
				КонецЕсли;
				
				ТекстОшибки = СтрШаблон(ШаблонОшибки, СтрокаПоиска, НомерСтроки - ВысотаШапки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтроки 	= НомерСтроки + 1;
		СтроковыйНомер 	= Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
		Попытка
			Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание Тогда
				ЗаполненыАртикулЗаводскойАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + "C1").Текст);
			Иначе
				ЗаполненыАртикулЗаводскойАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + "C1").Текст)
					Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + "C2").Текст);
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	УточнениеНоменклатуры.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеИБпоНоменклатуре()
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.Код КАК Код,
		|	Номенклатура.Артикул КАК Артикул,
		|	Номенклатура.ЗаводскойАртикул КАК ЗаводскойАртикул,
		|	Номенклатура.Наименование КАК Наименование,
		|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Для Каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		ТаблицаНоменклатуры.Колонки.Добавить(КолонкаРезультата.Имя);
	КонецЦикла;
	
	ТаблицаНоменклатуры.Колонки.Добавить("АртикулПоиск");
	ТаблицаНоменклатуры.Колонки.Добавить("ЗаводскойАртикулПоиск");
	
	ВыборкаТаблицыНоменклатуры = РезультатЗапроса.Выбрать();
	Пока ВыборкаТаблицыНоменклатуры.Следующий() Цикл
		
		НоваяСтрокаТаблицыНоменклатуры = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыНоменклатуры, ВыборкаТаблицыНоменклатуры);
		
		НоваяСтрокаТаблицыНоменклатуры.Код 						= ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.Код, " ", ""));
		НоваяСтрокаТаблицыНоменклатуры.АртикулПоиск 			= ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.Артикул, " ", ""));
		НоваяСтрокаТаблицыНоменклатуры.ЗаводскойАртикулПоиск 	= ВРег(СтрЗаменить(НоваяСтрокаТаблицыНоменклатуры.ЗаводскойАртикул, " ", ""));
		
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ВидОперации");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ВидОперации");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Справочники.Номенклатура.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКолонокФайлаИмяКолонки.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СкрыватьСопоставленные");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТаблицаКолонокФайла.Сопоставлено");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКолонокФайлаИмяКолонки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТаблицаКолонокФайла.Сопоставлено");
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 	WebЦвета.СветлоСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", 		Новый Шрифт(,,, Истина));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	МакетЗаполненияПоВнешнемуИсточнику = Обработки.ЗагрузкаДанныхИзВнешнихФайлов.ПолучитьМакет("МакетЗагрузкиДанных");
	ТабличныйДокумент.Очистить();
	
	Для НомерКолонки = 1 По МакетЗаполненияПоВнешнемуИсточнику.ШиринаТаблицы Цикл
		ИмяКолонки 			= "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0");
		ОбластьДокумента 	= МакетЗаполненияПоВнешнемуИсточнику.Область(ИмяКолонки);
		ВыводимаяОбласть 	= МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть(ОбластьДокумента.Имя);
		ТабличныйДокумент.Присоединить(ВыводимаяОбласть);
	КонецЦикла;
	
	ТабличныйДокумент.ФиксацияСверху = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНоменклатуры(КодТекущейСтроки)
	
	СписокВыбораНоменклатура 	= Элементы.ТоварыНоменклатура.СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	МассивПодобраннойНоменклатуры = ПодобраннаяНоменклатура.НайтиСтроки(Новый Структура("КодСтроки", КодТекущейСтроки));
	Для Каждого ЭлементМассива Из МассивПодобраннойНоменклатуры Цикл
		Если СписокВыбораНоменклатура.НайтиПоЗначению(ЭлементМассива.Номенклатура) = Неопределено Тогда
			СписокВыбораНоменклатура.Добавить(ЭлементМассива.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	Если ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Изменение Тогда
		
		ТаблицаНоменклатуры = Объект.Товары.Выгрузить().СкопироватьКолонки();
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			
		КонецЦикла;
		
	Иначе
		ТаблицаНоменклатуры = Объект.Товары.Выгрузить()
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаНоменклатуры);
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуНаЭлемент(Наименование, СправочникПеречисление, ТипОбъекта, Знач НомерСтроки, ИмяРеквизита)
	
	НомерСтроки = НомерСтроки - 1;
	РежимСоздания = (ВидОперации = Перечисления.вогВидыОперацииМастераСозданияИРедактированияНоменклатуры.Создание);
	
	Если СправочникПеречисление = "Перечисление" Тогда
		
		Если СокрЛП(Наименование) = "" Тогда
			Возврат Перечисления[ТипОбъекта].ПустаяСсылка();
		КонецЕсли;
		
		Попытка
			Результат = Перечисления[ТипОбъекта][Наименование];
		Исключение
			Результат = Неопределено
		КонецПопытки;
		
		Если Результат = Неопределено Тогда
			
			Если Не РежимСоздания Тогда
				
				ПолеТЧ 	= ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", НомерСтроки, ИмяРеквизита);
				Колонка = Метаданные.Обработки.ЗагрузкаДанныхИзВнешнихФайлов.ТабличныеЧасти.Товары.Реквизиты.Найти(ИмяРеквизита);
				
				ШаблонСообщения = НСтр("ru = 'Не найден %1 с наименованием %2 в строке %3'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Колонка.Синоним, Наименование, НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПолеТЧ);
				
			КонецЕсли;
			
			Возврат Перечисления[ТипОбъекта].ПустаяСсылка();
			
		Иначе
			Возврат Результат;
		КонецЕсли;
		
	Иначе
		
		Если СокрЛП(Наименование) = "" Тогда
			Возврат Справочники[ТипОбъекта].ПустаяСсылка();
		КонецЕсли;
		
		Результат = Справочники[ТипОбъекта].НайтиПоНаименованию(Наименование);
		
		Если Не ЗначениеЗаполнено(Результат) Тогда
			
			Если Не РежимСоздания Тогда
				
				ПолеТЧ 	= ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", НомерСтроки, ИмяРеквизита);
				Колонка = Метаданные.Обработки.ЗагрузкаДанныхИзВнешнихФайлов.ТабличныеЧасти.Товары.Реквизиты.Найти(ИмяРеквизита);
				
				ШаблонСообщения = НСтр("ru = 'Не найден %1 с наименованием %2 в строке %3'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Колонка.Синоним, Наименование, НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПолеТЧ);
				
			КонецЕсли;
			
			Возврат Справочники[ТипОбъекта].ПустаяСсылка();
			
		Иначе
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииРежимаЗаполнения()
	
	Элементы.ГруппаФайл.Видимость = РежимЗаполненияИзФайла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПриложениеExcel()
	
	Попытка
		
		Приложение = Новый COMОбъект("Excel.Application");
		Приложение.DisplayAlerts = False;
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Приложение = Неопределено;
		
	КонецПопытки;
	
	Возврат Приложение;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьМассивВТабличныйДокумент()
	
	МассивДанных 			= ПолучитьИзВременногоХранилища(АдресМассиваДанных);
	СоответствиеДанных 		= Новый Соответствие;
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Сопоставлено", Истина);
	
	НайденныеСтроки = ТаблицаКолонокМакета.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("ИмяКолонки", НайденнаяСтрока.ИмяКолонкиФайла);
		
		НайденныеСтрокиФайла = ТаблицаКолонокФайла.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Для Каждого НайденнаяСтрокаФайла Из НайденныеСтрокиФайла Цикл
			
			МассивПолей = МассивДанных.Получить(НайденнаяСтрокаФайла.ИндексВМассиве);
			
			Если Не МассивПолей = Неопределено Тогда
				СоответствиеДанных.Вставить(НайденнаяСтрока.ИмяКолонки, МассивПолей);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВерхТаблицы = ТабличныйДокумент.ВысотаТаблицы;
	
	Для Каждого КлючИЗначение Из СоответствиеДанных Цикл
		
		ОбластьКолонка 		= ТабличныйДокумент.Область(КлючИЗначение.Ключ);
		МассивДанныхКолонки = КлючИЗначение.Значение;
		
		Верх 	= ВерхТаблицы;
		Право 	= ОбластьКолонка.Право;
		
		Для Индекс = 1 По МассивДанныхКолонки.ВГраница() Цикл
			
			Верх = Верх + 1;
			ОбластьЗаполнения = ТабличныйДокумент.Область(Верх, Право);
			ОбластьЗаполнения.Текст = МассивДанныхКолонки[Индекс];
			
			// +++ VOG Кулаков П.Л. 24.02.2021 DEV-195
			Если КлючИЗначение.Ключ = "Рейтинг" И МассивДанныхКолонки[Индекс] = 0 Тогда
				ОбластьЗаполнения.Текст = "0";
			КонецЕсли;
			
			Если КлючИЗначение.Ключ = "Артикул" И ТипЗнч(МассивДанныхКолонки[Индекс]) = Тип("Число") Тогда
				ОбластьЗаполнения.Текст = Формат(МассивДанныхКолонки[Индекс],"ЧГ=0");
			КонецЕсли;
			// --- VOG Кулаков П.Л.
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьЛистExcel()
	
	ОчиститьСообщения();
	
	МассивСтрокПояснения = Новый Массив;
	МассивСтрокПояснения.Добавить(НСтр("ru = 'Выполняется загрузка данных из Excel.'"));
	МассивСтрокПояснения.Добавить(НСтр("ru = 'Пожалуйста подождите...'"));
	
	Состояние(
		НСтр("ru = 'Загрузка данных из Excel'"),
		,
		СтрСоединить(МассивСтрокПояснения, Символы.ПС),
		БиблиотекаКартинок.Информация32);
	
	Приложение = ПолучитьПриложениеExcel();
	
	Если Приложение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		Книга 	= Приложение.Workbooks.Open(ИмяФайла);
		Лист 	= Книга.WorkSheets(1);
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = '%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	КоличествоСтрок 	= Приложение.ActiveSheet.UsedRange.Rows.Count;
	КоличествоКолонок 	= Приложение.ActiveSheet.UsedRange.Columns.Count;
	
	Область = Приложение.Range(Лист.Cells(1, 1), Лист.Cells(КоличествоСтрок, КоличествоКолонок));
	
	Если Область.Value = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Данные в файле Excel не найдены. Продолжение невозможно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	МассивДанных = Область.Value.Выгрузить();
	
	Приложение.ActiveWorkbook.Close();
	
	ЕстьДанные = Ложь;
	Пока Не ЕстьДанные Цикл
		ПроверитьПервуюСтрокуНаНаличиеДанных(МассивДанных, ЕстьДанные);
	КонецЦикла;
	СоздатьПоляСопоставленияКолонок(МассивДанных);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПервуюСтрокуНаНаличиеДанных(МассивДанных, ЕстьДанные)
	
	Для Каждого ЭлементМассива Из МассивДанных Цикл
		
		Для Каждого ЭлементВложенногоМассива Из ЭлементМассива Цикл
			
			Если Не ТипЗнч(ЭлементВложенногоМассива) = Тип("Неопределено") Тогда
				ЕстьДанные = Истина;
			КонецЕсли;
			
			Прервать;
		КонецЦикла;
		
		Если ЕстьДанные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьДанные Тогда
		Для Каждого ЭлементМассива Из МассивДанных Цикл
			ЭлементМассива.Удалить(0);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПоляСопоставленияКолонок(МассивПолей)
	
	ТаблицаКолонокМакета.Очистить();
	ТаблицаКолонокФайла.Очистить();
	
	Макет = Обработки.ЗагрузкаДанныхИзВнешнихФайлов.ПолучитьМакет("МакетЗагрузкиДанных");
	
	Для Каждого ОбластьМакета Из Макет.Области Цикл
		
		НоваяСтрока = ТаблицаКолонокМакета.Добавить();
		НоваяСтрока.ИмяКолонки 		= ОбластьМакета.Имя;
		НоваяСтрока.Представление 	= ОбластьМакета.Текст;
		НоваяСтрока.Порядок 		= ОбластьМакета.Право;
		
	КонецЦикла;
	
	ТаблицаКолонокМакета.Сортировать("Порядок Возр");
	
	Для Каждого МассивИменКолонок Из МассивПолей Цикл
		
		Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
			
			НовоеИмяКолонки = СокрЛП(СтрЗаменить(ИмяКолонки, Символы.ПС, " "));
			
			Если ПустаяСтрока(НовоеИмяКолонки) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаКолонокФайла.Добавить();
			НоваяСтрока.ИмяКолонки 		= НовоеИмяКолонки;
			НоваяСтрока.ИндексВМассиве 	= МассивПолей.Найти(МассивИменКолонок);
			
			// Попробуем сопоставить
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("ИмяКолонки", ИмяКолонки);
			
			НайденныеСтроки = ТаблицаКолонокМакета.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ИмяКолонкиФайла = ИмяКолонки;
				НайденнаяСтрока.Сопоставлено 	= Истина;
				НоваяСтрока.Сопоставлено 	= Истина;
			КонецЦикла;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//ТаблицаКолонокФайла.Сортировать("ИмяКолонки Возр");
	АдресМассиваДанных = ПоместитьВоВременноеХранилище(МассивПолей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопкиСопоставления()
	
	ТекущиеДанныеМакет 	= Элементы.ТаблицаКолонокМакета.ТекущиеДанные;
	ТекущиеДанныеФайл 	= Элементы.ТаблицаКолонокФайла.ТекущиеДанные;
	
	Если ТекущиеДанныеМакет = Неопределено Или ТекущиеДанныеФайл = Неопределено Тогда
		Элементы.СопоставитьКолонки.Доступность = Ложь;
		Возврат;
	Иначе
		Элементы.СопоставитьКолонки.Доступность = Истина;
	КонецЕсли;
	
	Если ТекущиеДанныеМакет.Сопоставлено Тогда
		Элементы.СопоставитьКолонки.Картинка = БиблиотекаКартинок.CRM_РазорватьСвязь;
	Иначе
		Элементы.СопоставитьКолонки.Картинка = БиблиотекаКартинок.CRM_Связать;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьКолонкиКлиент()
	
	ТекущиеДанныеМакет 	= Элементы.ТаблицаКолонокМакета.ТекущиеДанные;
	ТекущиеДанныеФайл 	= Элементы.ТаблицаКолонокФайла.ТекущиеДанные;
	
	Если ТекущиеДанныеМакет.Сопоставлено Тогда
		
		ПараметрыОтбораСтрок = Новый Структура;
		ПараметрыОтбораСтрок.Вставить("ИмяКолонкиФайла", ТекущиеДанныеМакет.ИмяКолонкиФайла);
		
		НайденныеСтрокиМакета = ТаблицаКолонокМакета.НайтиСтроки(ПараметрыОтбораСтрок);
		
		Если НайденныеСтрокиМакета.Количество() = 1 Тогда
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("ИмяКолонки", ТекущиеДанныеМакет.ИмяКолонкиФайла);
			
			НайденныеСтрокиФайла = ТаблицаКолонокФайла.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Для Каждого НайденнаяСтрокаФайла Из НайденныеСтрокиФайла Цикл
				НайденнаяСтрокаФайла.Сопоставлено = Ложь;
			КонецЦикла;
			
		КонецЕсли;
		
		ТекущиеДанныеМакет.Сопоставлено 	= Ложь;
		ТекущиеДанныеМакет.ИмяКолонкиФайла 	= "";
		
	Иначе
		ТекущиеДанныеМакет.Сопоставлено 	= Истина;
		ТекущиеДанныеМакет.ИмяКолонкиФайла 	= ТекущиеДанныеФайл.ИмяКолонки;
		ТекущиеДанныеФайл.Сопоставлено 		= Истина;
	КонецЕсли;
	
	УстановитьДоступностьКнопкиСопоставления();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
