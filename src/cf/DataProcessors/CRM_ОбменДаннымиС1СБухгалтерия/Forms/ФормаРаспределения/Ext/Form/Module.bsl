////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ВыполнитьСопоставлениеПродаж()
	
	Для Каждого СтрокаРеализации Из Объект.Реализация Цикл
		
		НаборРегистра = РегистрыСведений.CRM_ЗагруженнаяРеализация.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.ИдентификаторДокумента.Установить(СтрокаРеализации.ИдентификаторДокумента);
		НаборРегистра.Прочитать();
		
		ТаблицаРеализации = НаборРегистра.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	CRM_СчетНаОплатуПокупателюЗапасы.Ссылка КАК Ссылка,
		|	CRM_СчетНаОплатуПокупателюЗапасы.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ.CRM_СчетНаОплатуПокупателю.Запасы КАК CRM_СчетНаОплатуПокупателюЗапасы
		|ГДЕ
		|	CRM_СчетНаОплатуПокупателюЗапасы.Ссылка.Организация = &Организация
		|	И CRM_СчетНаОплатуПокупателюЗапасы.Ссылка.Партнер = &Контрагент
		|	И CRM_СчетНаОплатуПокупателюЗапасы.Ссылка.Договор = &Договор
		|	И CRM_СчетНаОплатуПокупателюЗапасы.Ссылка.Дата <= &Дата
		|	И CRM_СчетНаОплатуПокупателюЗапасы.Ссылка.СуммаОстатокОтгрузка > 0
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура)
		|ПО
		|	Ссылка";
		
		Запрос.УстановитьПараметр("Организация"	,СтрокаРеализации.Организация);
		Запрос.УстановитьПараметр("Контрагент"	,СтрокаРеализации.Контрагент);
		Запрос.УстановитьПараметр("Договор"		,СтрокаРеализации.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Дата"		,СтрокаРеализации.Дата);
		
		Выборка = запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		СсылкаНаДокумент = Неопределено;
		//Пока Выборка.Следующий() Цикл
		//	Если ЗначениеЗаполнено(Выборка.Ссылка.Описание) И (Найти(Выборка.Ссылка.Описание, СтрокаРеализации.ИдентификаторДокумента)>0) Тогда
		//		СсылкаНаДокумент = Выборка.Ссылка;
		//		Прервать;
		//	КонецЕсли;
		//КонецЦикла;
		
		Если СсылкаНаДокумент = Неопределено Тогда
			Пока Выборка.Следующий() Цикл
				
				НеСоответствует = Ложь;
				
				ВыборткаПоТЧ = Выборка.Выбрать();
				Пока ВыборткаПоТЧ.Следующий() Цикл
					СтрокаТЗ = ТаблицаРеализации.Найти(ВыборткаПоТЧ.Номенклатура, "Номенклатура");
					Если СтрокаТЗ = Неопределено Тогда
						НеСоответствует = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ НеСоответствует Тогда
					СсылкаНаДокумент = Выборка.Ссылка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ СсылкаНаДокумент = Неопределено Тогда
			СтрокаРеализации.Счет = СсылкаНаДокумент;
			
			МассивСтрокОплаты = Объект.Оплата.НайтиСтроки(Новый Структура("ИдентификаторКорДокумента", СтрокаРеализации.ИдентификаторДокумента));
			Для Каждого ЗначениеМассива Из МассивСтрокОплаты Цикл
				ЗначениеМассива.Счет = СсылкаНаДокумент;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСопоставлениеПродажАвансы()
	
	Для Каждого СтрокаРеализации Из Объект.Оплата Цикл
		
		Если НЕ СтрокаРеализации.ИдентификаторКорДокумента = "*" Тогда Продолжить; КонецЕсли;
		
		НаборРегистра = РегистрыСведений.CRM_ЗагруженнаяРеализация.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.ИдентификаторДокумента.Установить(СтрокаРеализации.ИдентификаторДокумента);
		НаборРегистра.Прочитать();
		
		ТаблицаРеализации = НаборРегистра.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_СчетНаОплатуПокупателю.Ссылка
		               |ИЗ
		               |	Документ.CRM_СчетНаОплатуПокупателю КАК CRM_СчетНаОплатуПокупателю
		               |ГДЕ
		               |	CRM_СчетНаОплатуПокупателю.СуммаОстатокОтгрузка > 0
		               |	И CRM_СчетНаОплатуПокупателю.Организация = &Организация
		               |	И CRM_СчетНаОплатуПокупателю.Партнер = &Контрагент
		               |	И CRM_СчетНаОплатуПокупателю.Договор = &Договор
		               |	И CRM_СчетНаОплатуПокупателю.Дата <= &Дата";
		
		Запрос.УстановитьПараметр("Организация"	,СтрокаРеализации.Организация);
		Запрос.УстановитьПараметр("Контрагент"	,СтрокаРеализации.Контрагент);
		Запрос.УстановитьПараметр("Договор"		,СтрокаРеализации.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Дата"		,СтрокаРеализации.Дата);
		
		Выборка = запрос.Выполнить().Выбрать();
		
		СсылкаНаДокумент = Неопределено;
		Если Выборка.Следующий() Тогда
			СсылкаНаДокумент = Выборка.Ссылка;
		КонецЕсли;
		
		Если НЕ СсылкаНаДокумент = Неопределено Тогда
			
			СтрокаРеализации.Счет = СсылкаНаДокумент;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПоляОтбораПоСКД(СКД)
	
	ПолеОрганизация					= Новый ПолеКомпоновкиДанных("Организация");
	ПолеКонтрагент					= Новый ПолеКомпоновкиДанных("Контрагент");
	ПолеОсновнойМенеджерПокупателя	= Новый ПолеКомпоновкиДанных("ОсновнойМенеджерПокупателя");
	
	Организация					= Справочники.Организации.ПустаяСсылка();
	Контрагент					= Справочники.Партнеры.ПустаяСсылка();
	ОсновнойМенеджерПокупателя	= Справочники.Пользователи.ПустаяСсылка();
		
	Для Каждого Отбор Из СКД.НастройкиПоУмолчанию.Отбор.Элементы Цикл 
		Если (Отбор.ЛевоеЗначение = ПолеОрганизация) И Отбор.Использование Тогда
			Организация = Отбор.ПравоеЗначение;
		ИначеЕсли (Отбор.ЛевоеЗначение = ПолеКонтрагент) И Отбор.Использование Тогда
			Контрагент = Отбор.ПравоеЗначение;
		ИначеЕсли (Отбор.ЛевоеЗначение = ПолеОсновнойМенеджерПокупателя) И Отбор.Использование Тогда
			ОсновнойМенеджерПокупателя = Отбор.ПравоеЗначение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура формирует текст запроса для постоителя.
//
Процедура СформироватьТекстЗапросаИПолучитьЗагруженныеОбороты()
	
	СКД = ПолучитьИзВременногоХранилища(АдресСКД);
	
	УстановитьПоляОтбораПоСКД(СКД);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД,
	       КомпоновщикНастроек.ПолучитьНастройки(), , ,
	       Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	 
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультатаКомпановки = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	Источник = Новый ОписаниеИсточникаДанных(ТаблицаРезультатаКомпановки);
	ПостроительЗапроса.ИсточникДанных = Источник;
	ПостроительЗапроса.Выполнить();
	
	РезультатЗапроса = ПостроительЗапроса.Результат.Выбрать();
	
	Если НЕ СохранятьИзмененияПользователя Тогда
		Объект.Реализация.Очистить();
		Объект.Оплата.Очистить();
	Иначе
		мТаблицаОплат = Объект.Оплата.Выгрузить();
		Объект.Оплата.Очистить();
	КонецЕсли;
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если НЕ СохранятьИзмененияПользователя Тогда
			Если РезультатЗапроса.ВидыДвиженийПриходРасход = Перечисления.CRM_ВидыДвиженийПриходРасход.Приход Тогда
				НоваяСтрока = Объект.Реализация.Добавить();
			ИначеЕсли РезультатЗапроса.ВидыДвиженийПриходРасход = Перечисления.CRM_ВидыДвиженийПриходРасход.Расход Тогда
				НоваяСтрока = Объект.Оплата.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатЗапроса);
			Если РезультатЗапроса.ИдентификаторКорДокумента = "*" Тогда
				НоваяСтрока.ФлагОтбора = 1;
			Иначе
				НоваяСтрока.ФлагОтбора = 2;
			КонецЕсли;
			ДобавитьСвязанныеДокументы(РезультатЗапроса, РезультатЗапроса.ВидыДвиженийПриходРасход);
		Иначе // Скорректируем ТЧ Оплаты, т.к. в реализации было удаление строки.
			Если РезультатЗапроса.ВидыДвиженийПриходРасход = Перечисления.CRM_ВидыДвиженийПриходРасход.Расход Тогда
				НоваяСтрока = Объект.Оплата.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатЗапроса);
				Если РезультатЗапроса.ИдентификаторКорДокумента = "*" Тогда
					НоваяСтрока.ФлагОтбора = 1;
				Иначе
					НоваяСтрока.ФлагОтбора = 2;
				КонецЕсли;
				МассивСтрок = мТаблицаОплат.НайтиСтроки(Новый Структура("ИдентификаторДокумента, ИдентификаторКорДокумента",РезультатЗапроса.ИдентификаторДокумента,РезультатЗапроса.ИдентификаторКорДокумента));
				Если НЕ МассивСтрок.Количество() = 0 Тогда
					НоваяСтрока.Счет = МассивСтрок[0].Счет;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если мВремТаблицаРеализации.Количество() > 0 Тогда
		Для Каждого СтрокаРеализации Из Объект.Реализация Цикл
			МассивСтрок = мВремТаблицаРеализации.НайтиСтроки(Новый Структура("ИдентификаторДокумента", СтрокаРеализации.ИдентификаторДокумента));
			Если НЕ МассивСтрок.Количество() = 0 Тогда
				СтрокаРеализации.Счет = МассивСтрок[0].Счет;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если мВремТаблицаОплаты.Количество() > 0 Тогда
		Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
			МасивСтрок = мВремТаблицаОплаты.НайтиСтроки(Новый Структура("ИдентификаторДокумента, ИдентификаторКорДокумента", СтрокаОплаты.ИдентификаторДокумента, СтрокаОплаты.ИдентификаторКорДокумента));
			Если НЕ МасивСтрок.Количество() = 0 Тогда
				СтрокаОплаты.Счет = МасивСтрок[0].Счет;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Добавляет в табличные части информацю о ранее разнесенных документах, если на них
// ссылаются еще не разнесенные.
//
Процедура ДобавитьСвязанныеДокументы(РезультатЗапроса, ВидыДвиженийПриходРасход)
	
	Набор = РегистрыСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам.СоздатьНаборЗаписей();
	
	Если ВидыДвиженийПриходРасход = Перечисления.CRM_ВидыДвиженийПриходРасход.Приход Тогда
		
		Набор.Отбор.ИдентификаторКорДокумента.Установить(РезультатЗапроса.ИдентификаторДокумента);
		Набор.Отбор.Организация.Установить(РезультатЗапроса.Организация);
		Набор.Отбор.Контрагент.Установить(РезультатЗапроса.Контрагент);
		Набор.Отбор.ДоговорКонтрагента.Установить(РезультатЗапроса.ДоговорКонтрагента);
		Набор.Отбор.ВидыДвиженийПриходРасход.Установить(Перечисления.CRM_ВидыДвиженийПриходРасход.Расход);
		Набор.Отбор.Загружено.Установить(Истина);
		
	ИначеЕсли ВидыДвиженийПриходРасход = Перечисления.CRM_ВидыДвиженийПриходРасход.Расход Тогда
		
		Набор.Отбор.ИдентификаторДокумента.Установить(РезультатЗапроса.ИдентификаторКорДокумента);
		Набор.Отбор.Организация.Установить(РезультатЗапроса.Организация);
		Набор.Отбор.Контрагент.Установить(РезультатЗапроса.Контрагент);
		Набор.Отбор.ДоговорКонтрагента.Установить(РезультатЗапроса.ДоговорКонтрагента);
		Набор.Отбор.ВидыДвиженийПриходРасход.Установить(Перечисления.CRM_ВидыДвиженийПриходРасход.Приход);
		Набор.Отбор.Загружено.Установить(Истина);
		
	КонецЕсли;
	
	Набор.Прочитать();
	
	Если Набор.Количество() > 0 Тогда
		Для Каждого СтрокаНабора Из Набор Цикл
			
			Если ВидыДвиженийПриходРасход = Перечисления.CRM_ВидыДвиженийПриходРасход.Приход Тогда
				МассивСтрокТЧ = Объект.Оплата.НайтиСтроки(Новый Структура("ИдентификаторДокумента, ИдентификаторКорДокумента",СтрокаНабора.ИдентификаторДокумента,СтрокаНабора.ИдентификаторКорДокумента));
				Если МассивСтрокТЧ.Количество() = 0 Тогда
					НоваяСтрока = Объект.Оплата.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабора);
					НоваяСтрока.СчетНаОплату	= СтрокаНабора.СделкаСКлиентом;
					НоваяСтрока.Счет			= СтрокаНабора.СделкаСКлиентом;
				КонецЕсли;
			ИначеЕсли ВидыДвиженийПриходРасход = Перечисления.CRM_ВидыДвиженийПриходРасход.Расход Тогда
				МассивСтрокТЧ = Объект.Реализация.НайтиСтроки(Новый Структура("ИдентификаторДокумента",СтрокаНабора.ИдентификаторДокумента));
				Если МассивСтрокТЧ.Количество() = 0 Тогда
					НоваяСтрока = Объект.Реализация.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНабора);
					НоваяСтрока.СчетНаОплату	= СтрокаНабора.СделкаСКлиентом;
					НоваяСтрока.Счет			= СтрокаНабора.СделкаСКлиентом;
					
					ДобавитьСвязанныеДокументы(НоваяСтрока, Перечисления.CRM_ВидыДвиженийПриходРасход.Приход);
				КонецЕсли;
			КонецЕсли;
			
			//// Проверим не распределяется ли ранее поступивший и разнесенный аванс.
			//Если ВидыДвиженийПриходРасход = Перечисления.CRM_ВидыДвиженийПриходРасход.Приход Тогда
			//	
			//	НаборАвансов = РегистрыСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам.СоздатьНаборЗаписей();
			//	НаборАвансов.Отбор.ИдентификаторДокумента.Установить(СтрокаНабора.ИдентификаторДокумента);
			//	НаборАвансов.Отбор.ИдентификаторКорДокумента.Установить("*");
			//	НаборАвансов.Отбор.Организация.Установить(РезультатЗапроса.Организация);
			//	НаборАвансов.Отбор.Контрагент.Установить(РезультатЗапроса.Контрагент);
			//	НаборАвансов.Отбор.ДоговорКонтрагента.Установить(РезультатЗапроса.ДоговорКонтрагента);
			//	НаборАвансов.Отбор.ВидыДвиженийПриходРасход.Установить(Перечисления.CRM_ВидыДвиженийПриходРасход.Расход);
			//	НаборАвансов.Отбор.Загружено.Установить(Истина);
			//	НаборАвансов.Прочитать();
			//	
			//	НоваяСтрока.АвансКЗачету = (НЕ НаборАвансов.Количество() = 0);
			//	
			//КонецЕсли;
			
			//Если ВидыДвиженийПриходРасход = Перечисления.CRM_ВидыДвиженийПриходРасход.Расход Тогда
			//	ДобавитьСвязанныеДокументы(НоваяСтрока, Перечисления.CRM_ВидыДвиженийПриходРасход.Приход);
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// ***************************** Разнесение оплаты по продажам НАЧАЛО ********************************

&НаСервере
// Перепроводит счета
//
Процедура ПерепровестиДокументы()
	
	Для Каждого СтрокаТаблицы Из мТаблицаПроведенныхДокументов Цикл
		Если СтрокаТаблицы.Проведен Тогда
			ДокументОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Формируем таблицу значений, в которой собирается информация, какие изменения
// были произведены со счетами, используется в пеачти реестра.
//
Процедура ЗарегистрироватьИзмененияСчета(СтрокаРеализацииОплаты, ВидДанных)
	
	//Если мТаблицаРегистрацииИзменений.Колонки.Количество() = 0 Тогда
	//	мТаблицаРегистрацииИзменений.Колонки.Добавить("Ссылка");
	//	мТаблицаРегистрацииИзменений.Колонки.Добавить("Дата");
	//	мТаблицаРегистрацииИзменений.Колонки.Добавить("Номер");
	//	мТаблицаРегистрацииИзменений.Колонки.Добавить("ПредставлениеДокумента");
	//	мТаблицаРегистрацииИзменений.Колонки.Добавить("СуммаДокумента");
	//	мТаблицаРегистрацииИзменений.Колонки.Добавить("ВалютаДокумента");
	//	мТаблицаРегистрацииИзменений.Колонки.Добавить("Действие");
	//	мТаблицаРегистрацииИзменений.Колонки.Добавить("Действие_1");
	//КонецЕсли;
	
	НоваяСтрока = мТаблицаРегистрацииИзменений.Добавить();
	
	Если НЕ СтрокаРеализацииОплаты.Загружено И ЗначениеЗаполнено(СтрокаРеализацииОплаты.Счет) Тогда
		
		НоваяСтрока.Ссылка					= СтрокаРеализацииОплаты.Счет;
		НоваяСтрока.Дата					= СтрокаРеализацииОплаты.Дата;
		НоваяСтрока.Номер					= СтрокаРеализацииОплаты.Номер;
		НоваяСтрока.ПредставлениеДокумента	= СтрокаРеализацииОплаты.ПредставлениеДокумента;
		НоваяСтрока.СуммаДокумента			= СтрокаРеализацииОплаты.СуммаДокумента;
		НоваяСтрока.ВалютаДокумента			= СтрокаРеализацииОплаты.ВалютаДокумента;
		НоваяСтрока.Действие_1				= 0;
		
		Если ВидДанных = "Отгрузка" Тогда
			НоваяСтрока.Действие = 0;
		ИначеЕсли ВидДанных = "Оплата" Тогда
			НоваяСтрока.Действие = 1;
		КонецЕсли;
		
	ИначеЕсли СтрокаРеализацииОплаты.Загружено И ЗначениеЗаполнено(СтрокаРеализацииОплаты.Счет) И (НЕ СтрокаРеализацииОплаты.СчетНаОплату = СтрокаРеализацииОплаты.Счет)Тогда
		
		НоваяСтрока.Ссылка					= СтрокаРеализацииОплаты.Счет;
		НоваяСтрока.Дата					= СтрокаРеализацииОплаты.Дата;
		НоваяСтрока.Номер					= СтрокаРеализацииОплаты.Номер;
		НоваяСтрока.ПредставлениеДокумента	= СтрокаРеализацииОплаты.ПредставлениеДокумента;
		НоваяСтрока.СуммаДокумента			= СтрокаРеализацииОплаты.СуммаДокумента;
		НоваяСтрока.ВалютаДокумента			= СтрокаРеализацииОплаты.ВалютаДокумента;
		
		Если ВидДанных = "Отгрузка" Тогда
			НоваяСтрока.Действие = 0;
		ИначеЕсли ВидДанных = "Оплата" Тогда
			НоваяСтрока.Действие = 1;
		КонецЕсли;
		
		ДопСтрока = мТаблицаРегистрацииИзменений.Добавить();
		НоваяСтрока.Ссылка					= СтрокаРеализацииОплаты.СчетНаОплату;
		НоваяСтрока.Действие_1				= 1;
		Если ВидДанных = "Отгрузка" Тогда
			НоваяСтрока.Действие = 2;
		ИначеЕсли ВидДанных = "Оплата" Тогда
			НоваяСтрока.Действие = 3;
		КонецЕсли;
		
	ИначеЕсли СтрокаРеализацииОплаты.Загружено И НЕ ЗначениеЗаполнено(СтрокаРеализацииОплаты.Счет)Тогда
		
		НоваяСтрока.Ссылка					= СтрокаРеализацииОплаты.СчетНаОплату;
		НоваяСтрока.Действие_1				= 1;
		
		Если ВидДанных = "Отгрузка" Тогда
			НоваяСтрока.Действие = 2;
		ИначеЕсли ВидДанных = "Оплата" Тогда
			НоваяСтрока.Действие = 3;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Производит корректировку в табличных частях счета.
//
Процедура СкорректироватьДанныеСчета(СтрокаРеализацииОплаты, ВидДанных)
	
	СчетОбъект = СтрокаРеализацииОплаты.СчетНаОплату.ПолучитьОбъект();
	
	Если ВидДанных = "Отгрузка" Тогда
		
		// Скорректируем количество отгружено в таблице с факт. данныыми.
		
		ТаблицаОтгружено = СчетОбъект.Отгрузка.Выгрузить();
		ТаблицаОтгружено.Свернуть("ИдентификаторДокумента, Номенклатура, ЕдиницаИзмерения, Цена, Характеристика, ПроцентРучнойСкидки", "Количество");
		Для Каждого СтрокаОтгруженного Из ТаблицаОтгружено Цикл
			
			Если НЕ СтрокаОтгруженного.ИдентификаторДокумента = СтрокаРеализацииОплаты.ИдентификаторДокумента Тогда
				Продолжить;
			КонецЕсли;
			
			ВсегоОтгружено = СтрокаОтгруженного.Количество;
			
			МассивСтрок = СчетОбъект.Запасы.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения, Цена, Характеристика, ПроцентРучнойСкидки", СтрокаОтгруженного.Номенклатура, СтрокаОтгруженного.ЕдиницаИзмерения, СтрокаОтгруженного.Цена, СтрокаОтгруженного.Характеристика, СтрокаОтгруженного.ПроцентРучнойСкидки));
			
			Если МассивСтрок.Количество() > 0 Тогда
				Для Каждого ЗначениеМассива Из МассивСтрок Цикл
					Если ЗначениеМассива.Отгружено >= ВсегоОтгружено Тогда
						
						ЗначениеМассива.Отгружено = ЗначениеМассива.Отгружено - ВсегоОтгружено;
						ЗначениеМассива.ОсталосьОтгрузить = ЗначениеМассива.ОсталосьОтгрузить + ВсегоОтгружено;
						ВсегоОтгружено = 0;
						
					ИначеЕсли ЗначениеМассива.Отгружено < ВсегоОтгружено Тогда	
						
						ЗначениеМассива.Отгружено = 0;
						ВсегоОтгружено = ВсегоОтгружено - ЗначениеМассива.Отгружено;
						ЗначениеМассива.ОсталосьОтгрузить = ЗначениеМассива.Количество;
						
					ИначеЕсли ВсегоОтгружено = 0 Тогда	
						
						Прервать;
						
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		МассивСтрок = СчетОбъект.Отгрузка.НайтиСтроки(Новый Структура("ИдентификаторДокумента", СтрокаРеализацииОплаты.ИдентификаторДокумента));
		Если МассивСтрок.Количество() > 0 Тогда
			Ном = МассивСтрок.Количество();
			Пока Ном > 0 Цикл
				СчетОбъект.Отгрузка.Удалить(СчетОбъект.Отгрузка.Индекс(МассивСтрок[Ном-1]));
				Ном = Ном - 1;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ВидДанных = "Оплата" Тогда 
		Если СтрокаРеализацииОплаты.АвансКЗачету Тогда
			МассивСтрок = СчетОбъект.Оплата.НайтиСтроки(Новый Структура("ИдентификаторДокумента, ИдентификаторКорДокумента", СтрокаРеализацииОплаты.ИдентификаторДокумента, "*"));
		Иначе
			МассивСтрок = СчетОбъект.Оплата.НайтиСтроки(Новый Структура("ИдентификаторДокумента, ИдентификаторКорДокумента", СтрокаРеализацииОплаты.ИдентификаторДокумента, СтрокаРеализацииОплаты.ИдентификаторКорДокумента));
		КонецЕсли;
		
		Если МассивСтрок.Количество() > 0 Тогда
			Ном = МассивСтрок.Количество();
			Пока Ном > 0 Цикл
				СчетОбъект.Оплата.Удалить(СчетОбъект.Оплата.Индекс(МассивСтрок[Ном-1]));
				Ном = Ном - 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Если СчетОбъект.Проведен Тогда
			СчетОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			СчетОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// переносит данные в счет
//
Процедура ПеренестиДанныеВСчет(СтрокаРеализацииОплаты, ВидДанных)
	
	СчетОбъект = СтрокаРеализацииОплаты.Счет.ПолучитьОбъект();
	
	Если ВидДанных = "Отгрузка" Тогда
	
		Набор = РегистрыСведений.CRM_ЗагруженнаяРеализация.СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторДокумента.Установить(СтрокаРеализацииОплаты.ИдентификаторДокумента);
		Набор.Прочитать();
		
		Отгружено = Набор.Выгрузить();
		
		Отгружено.Колонки.Добавить("Курс");
		Отгружено.Колонки.Добавить("Кратность");
		Отгружено.Колонки.Добавить("ДатаОтгрузки");
		Отгружено.Колонки.Добавить("ПредставлениеДокумента");
		
		Отгружено.ЗаполнитьЗначения(СтрокаРеализацииОплаты.КурсВзаиморасчетов		, "Курс");
		Отгружено.ЗаполнитьЗначения(СтрокаРеализацииОплаты.КратностьВзаиморасчетов	, "Кратность");
		Отгружено.ЗаполнитьЗначения(СтрокаРеализацииОплаты.Дата						, "ДатаОтгрузки");
		Отгружено.ЗаполнитьЗначения(СтрокаРеализацииОплаты.ПредставлениеДокумента	, "ПредставлениеДокумента");
		Отгружено.ЗаполнитьЗначения(СтрокаРеализацииОплаты.ИдентификаторДокумента	, "ИдентификаторДокумента");
		
		МассивСтрок = СчетОбъект.Отгрузка.НайтиСтроки(Новый Структура("ИдентификаторДокумента", СтрокаРеализацииОплаты.ИдентификаторДокумента));
		
		Если МассивСтрок.Количество() > 0 Тогда
			Ном = МассивСтрок.Количество();
			Пока Ном > 0 Цикл
				СчетОбъект.Отгрузка.Удалить(СчетОбъект.Отгрузка.Индекс(МассивСтрок[Ном-1]));
				Ном = Ном - 1;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаОтгруженного Из Отгружено Цикл
			
			НоваяСтрока = СчетОбъект.Отгрузка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтгруженного);
			НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(СчетОбъект.ЦенаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
			
		КонецЦикла;
		
		// Скорректируем количество отгружено в таблице с факт. данныыми.
		ТаблицаОтгружено = СчетОбъект.Отгрузка.Выгрузить();
		ТаблицаОтгружено.Свернуть("Номенклатура, Характеристика, ЕдиницаИзмерения, Цена, ПроцентРучнойСкидки", "Количество");
		Для Каждого СтрокаОтгруженного Из ТаблицаОтгружено Цикл
			
			ВсегоОтгружено = СтрокаОтгруженного.Количество;
			
			МассивСтрок = СчетОбъект.Запасы.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения, Цена, Характеристика, ПроцентРучнойСкидки", СтрокаОтгруженного.Номенклатура, СтрокаОтгруженного.ЕдиницаИзмерения, СтрокаОтгруженного.Цена, СтрокаОтгруженного.Характеристика, СтрокаОтгруженного.ПроцентРучнойСкидки));
			Если МассивСтрок.Количество() > 0 Тогда
				Для Каждого ЗначениеМассива Из МассивСтрок Цикл
					
					Если ЗначениеМассива.Количество >= ВсегоОтгружено Тогда
						
						ЗначениеМассива.Отгружено = ВсегоОтгружено;
						ЗначениеМассива.ОсталосьОтгрузить = ЗначениеМассива.Количество - ВсегоОтгружено;
						ВсегоОтгружено = 0;
						
					ИначеЕсли ЗначениеМассива.Количество < ВсегоОтгружено Тогда 
						
						ЗначениеМассива.Отгружено = ЗначениеМассива.Количество;
						ЗначениеМассива.ОсталосьОтгрузить = 0;
						ВсегоОтгружено = ВсегоОтгружено - ЗначениеМассива.Количество;
						
					ИначеЕсли ВсегоОтгружено = 0 Тогда
						
						ЗначениеМассива.Отгружено = 0;
						ЗначениеМассива.ОсталосьОтгрузить = ЗначениеМассива.Количество;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		//Если НЕ ЗначениеЗаполнено(СчетОбъект.ДатаОтгрузки) И Отгружено.Количество() > 0 Тогда
		//	Отгружено.Сортировать("ДатаОтгрузки Возр");
		//	СчетОбъект.ДатаОтгрузки = НачалоДня(Отгружено[0].ДатаОтгрузки) + Час(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса())*60*60 + Минута(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса())*60;;
		//ИначеЕсли ЗначениеЗаполнено(СчетОбъект.ДатаОтгрузки) И (Отгружено.Количество() = 0) И (СчетОбъект.Отгрузка.Количество() = 0) Тогда
		//	СчетОбъект.ДатаОтгрузки = Дата("00010101");
		//КонецЕсли;
		
	ИначеЕсли ВидДанных = "Оплата" Тогда
		
		ЗачтенаСумма = 0;
		Если НЕ СтрокаРеализацииОплаты.Загружено И ЗначениеЗаполнено(СтрокаРеализацииОплаты.Счет) Тогда
			Если СтрокаРеализацииОплаты.ИдентификаторКорДокумента = "*" Тогда
			// Это аванс, следует проверить, не разнесена ли уже сумма аванса по продажам
			// если разнесена вся сумма, то в счет данные об овансе не прописываем, если не вся, то остаток.
				ЗапросПоРегистру = Новый Запрос;
				ЗапросПоРегистру.Текст = "ВЫБРАТЬ
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента,
				|	СУММА(CRM_ЗагруженныеОборотыПоВзаиморасчетам.СуммаДокумента) КАК СуммаДокумента
				|ИЗ
				|	РегистрСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам КАК CRM_ЗагруженныеОборотыПоВзаиморасчетам
				|ГДЕ
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента = &ИдентификаторДокумента
				|	И (НЕ CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторКорДокумента = ""*"")
				|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.Организация = &Организация
				|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.Контрагент = &Контрагент
				|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ДоговорКонтрагента = &ДоговорКонтрагента
				|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВидыДвиженийПриходРасход = &ВидыДвиженийПриходРасход
				|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.Загружено
				|
				|СГРУППИРОВАТЬ ПО
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента";
				
				ЗапросПоРегистру.УстановитьПараметр("ИдентификаторДокумента"	, СтрокаРеализацииОплаты.ИдентификаторДокумента);
				ЗапросПоРегистру.УстановитьПараметр("Организация"				, СтрокаРеализацииОплаты.Организация);
				ЗапросПоРегистру.УстановитьПараметр("Контрагент"				, СтрокаРеализацииОплаты.Контрагент);
				ЗапросПоРегистру.УстановитьПараметр("ДоговорКонтрагента"		, СтрокаРеализацииОплаты.ДоговорКонтрагента);
				ЗапросПоРегистру.УстановитьПараметр("ВидыДвиженийПриходРасход"	, Перечисления.CRM_ВидыДвиженийПриходРасход.Расход);
				
				ВыборкаЗаписей = ЗапросПоРегистру.Выполнить().Выбрать();
				Если ВыборкаЗаписей.Следующий() Тогда
					ЗачтенаСумма = ВыборкаЗаписей.СуммаДокумента;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		МассивСтрок = СчетОбъект.Оплата.НайтиСтроки(Новый Структура("ИдентификаторДокумента, ИдентификаторКорДокумента", СтрокаРеализацииОплаты.ИдентификаторДокумента, СтрокаРеализацииОплаты.ИдентификаторКорДокумента));
		Если МассивСтрок.Количество() > 0 Тогда
			МассивСтрок[0].ДатаОплаты					= СтрокаРеализацииОплаты.Дата;
			МассивСтрок[0].Сумма						= СтрокаРеализацииОплаты.СуммаДокумента;
			МассивСтрок[0].НомерДокумента				= СтрокаРеализацииОплаты.Номер;
			МассивСтрок[0].Курс							= СтрокаРеализацииОплаты.КурсВзаиморасчетов;
			МассивСтрок[0].Кратность					= СтрокаРеализацииОплаты.КратностьВзаиморасчетов;
			МассивСтрок[0].ИдентификаторДокумента		= СтрокаРеализацииОплаты.ИдентификаторДокумента;
			МассивСтрок[0].ИдентификаторКорДокумента	= СтрокаРеализацииОплаты.ИдентификаторКорДокумента;
			МассивСтрок[0].ПредставлениеДокумента		= СтрокаРеализацииОплаты.ПредставлениеДокумента;
			МассивСтрок[0].ЕстьИзменения				= Истина;
		Иначе
			СуммаОплаты = СтрокаРеализацииОплаты.СуммаДокумента;
			Если СтрокаРеализацииОплаты.ИдентификаторКорДокумента = "*" Тогда
				СуммаОплаты = СуммаОплаты - ЗачтенаСумма;
			КонецЕсли;
			Если СуммаОплаты > 0 Тогда
				НоваяСтрока = СчетОбъект.Оплата.Добавить();
				НоваяСтрока.ДатаОплаты					= СтрокаРеализацииОплаты.Дата;
				НоваяСтрока.Сумма						= СуммаОплаты;
				НоваяСтрока.НомерДокумента				= СтрокаРеализацииОплаты.Номер;
				НоваяСтрока.Курс						= СтрокаРеализацииОплаты.КурсВзаиморасчетов;
				НоваяСтрока.Кратность					= СтрокаРеализацииОплаты.КратностьВзаиморасчетов;
				НоваяСтрока.ИдентификаторДокумента		= СтрокаРеализацииОплаты.ИдентификаторДокумента;
				НоваяСтрока.ИдентификаторКорДокумента	= СтрокаРеализацииОплаты.ИдентификаторКорДокумента;
				НоваяСтрока.ПредставлениеДокумента		= СтрокаРеализацииОплаты.ПредставлениеДокумента;
				НоваяСтрока.ЕстьИзменения				= Истина;
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Попытка
		Если СчетОбъект.Проведен Тогда
			СчетОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			СчетОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Сохраняет информацию о проведенных счетах, чтобы после
// разноски провести счета, которые были проведены.
//
Процедура СохранитьСсылкуПроведенногоДокумента(ДокументСсылка)
	
	//Если мТаблицаПроведенныхДокументов.Колонки.Количество() = 0 Тогда
	//	мТаблицаПроведенныхДокументов.Колонки.Добавить("Ссылка");
	//	мТаблицаПроведенныхДокументов.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	//КонецЕсли;
	
	мТаблица = РеквизитФормыВЗначение("мТаблицаПроведенныхДокументов");
	
	Если мТаблица.Найти(ДокументСсылка, "Ссылка") = Неопределено Тогда
		НоваяСтрока = мТаблица.Добавить();
		НоваяСтрока.Ссылка		= ДокументСсылка;
		НоваяСтрока.Проведен	= ДокументСсылка.Проведен;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(мТаблица, "мТаблицаПроведенныхДокументов");
	
КонецПроцедуры

&НаСервере
// Разносит данные по оплатам и отгрузке по указаннм счетам.
//
Процедура РазнестиОплатуРеализацию()
	
	мНабор = РегистрыСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам.СоздатьНаборЗаписей();
	
	Для Каждого СтрокаРеализации Из Объект.Реализация Цикл
		
		Если НЕ СтрокаРеализации.Загружено И ЗначениеЗаполнено(СтрокаРеализации.Счет) Тогда
			
			СохранитьСсылкуПроведенногоДокумента(СтрокаРеализации.Счет);
			
			мНабор.Отбор.Сбросить();
			
			мНабор.Отбор.ИдентификаторДокумента.Установить(СтрокаРеализации.ИдентификаторДокумента);
			мНабор.Отбор.ИдентификаторКорДокумента.Установить("*");
			мНабор.Отбор.Организация.Установить(СтрокаРеализации.Организация);
			мНабор.Отбор.Контрагент.Установить(СтрокаРеализации.Контрагент);
			мНабор.Отбор.ДоговорКонтрагента.Установить(СтрокаРеализации.ДоговорКонтрагента);
			мНабор.Прочитать();
			Для Каждого СтрокаНабора Из мНабор Цикл
				СтрокаНабора.СделкаСКлиентом = СтрокаРеализации.Счет;
				СтрокаНабора.Загружено = Истина;
			КонецЦикла;
			мНабор.Записать();
			
			ПеренестиДанныеВСчет(СтрокаРеализации, "Отгрузка");
			
		ИначеЕсли СтрокаРеализации.Загружено И ЗначениеЗаполнено(СтрокаРеализации.Счет) И (НЕ СтрокаРеализации.СчетНаОплату = СтрокаРеализации.Счет)Тогда
			
			СохранитьСсылкуПроведенногоДокумента(СтрокаРеализации.СчетНаОплату);
			СохранитьСсылкуПроведенногоДокумента(СтрокаРеализации.Счет);
			
			СкорректироватьДанныеСчета(СтрокаРеализации, "Отгрузка");
			
			мНабор.Отбор.Сбросить();
			
			мНабор.Отбор.ИдентификаторДокумента.Установить(СтрокаРеализации.ИдентификаторДокумента);
			мНабор.Отбор.ИдентификаторКорДокумента.Установить("*");
			мНабор.Отбор.Организация.Установить(СтрокаРеализации.Организация);
			мНабор.Отбор.Контрагент.Установить(СтрокаРеализации.Контрагент);
			мНабор.Отбор.ДоговорКонтрагента.Установить(СтрокаРеализации.ДоговорКонтрагента);
			мНабор.Прочитать();
			Для Каждого СтрокаНабора Из мНабор Цикл
				СтрокаНабора.СделкаСКлиентом = СтрокаРеализации.Счет;
				СтрокаНабора.Загружено = Истина;
			КонецЦикла;
			мНабор.Записать();
			
			ПеренестиДанныеВСчет(СтрокаРеализации, "Отгрузка");
			
		ИначеЕсли СтрокаРеализации.Загружено И НЕ ЗначениеЗаполнено(СтрокаРеализации.Счет)Тогда
			
			СохранитьСсылкуПроведенногоДокумента(СтрокаРеализации.СчетНаОплату);
			
			мНабор.Отбор.Сбросить();
			
			мНабор.Отбор.ИдентификаторДокумента.Установить(СтрокаРеализации.ИдентификаторДокумента);
			мНабор.Отбор.ИдентификаторКорДокумента.Установить("*");
			мНабор.Отбор.Организация.Установить(СтрокаРеализации.Организация);
			мНабор.Отбор.Контрагент.Установить(СтрокаРеализации.Контрагент);
			мНабор.Отбор.ДоговорКонтрагента.Установить(СтрокаРеализации.ДоговорКонтрагента);
			мНабор.Прочитать();
			
			Для Каждого СтрокаНабора Из мНабор Цикл
				//СтрокаНабора.СделкаСКлиентом = Документы.CRM_Продажа.ПустаяСсылка();
				СтрокаНабора.Загружено = Ложь;
			КонецЦикла;
			мНабор.Записать();
			
			СкорректироватьДанныеСчета(СтрокаРеализации, "Отгрузка");
			
		КонецЕсли;
		
		ЗарегистрироватьИзмененияСчета(СтрокаРеализации, "Отгрузка");
		
	КонецЦикла;
	
	Для Каждого СтрокаОплаты Из Объект.Оплата Цикл
		Если НЕ СтрокаОплаты.Загружено И ЗначениеЗаполнено(СтрокаОплаты.Счет) Тогда
			
			Если СтрокаОплаты.АвансКЗачету Тогда
			// Значит существует ранее загруженный аванс и надо скорректировать его сумму
			// но он обязательно должен быть распределен.
				ЗапросПоРегистру = Новый Запрос;
				ЗапросПоРегистру.Текст = "ВЫБРАТЬ
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторКорДокумента,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Организация,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Контрагент,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ДоговорКонтрагента,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВидыДвиженийПриходРасход,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Загружено,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Дата,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.Номер,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.СуммаДокумента,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВалютаДокумента,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.КурсВзаиморасчетов,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.КратностьВзаиморасчетов,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ПредставлениеДокумента,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ПредставлениеКорДокумента,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.СделкаСКлиентом,
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.АвансКЗачету,
				|	ЕСТЬNULL(Зачтено.СуммаДокумента, 0) КАК ЗачтенаСумма
				|ИЗ
				|	РегистрСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам КАК CRM_ЗагруженныеОборотыПоВзаиморасчетам
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента КАК ИдентификаторДокумента,
				|			СУММА(CRM_ЗагруженныеОборотыПоВзаиморасчетам.СуммаДокумента) КАК СуммаДокумента
				|		ИЗ
				|			РегистрСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам КАК CRM_ЗагруженныеОборотыПоВзаиморасчетам
				|		ГДЕ
				|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента = &ИдентификаторДокумента
				|			И (НЕ CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторКорДокумента = ""*"")
				|			И CRM_ЗагруженныеОборотыПоВзаиморасчетам.Организация = &Организация
				|			И CRM_ЗагруженныеОборотыПоВзаиморасчетам.Контрагент = &Контрагент
				|			И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ДоговорКонтрагента = &ДоговорКонтрагента
				|			И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВидыДвиженийПриходРасход = &ВидыДвиженийПриходРасход
				|			И CRM_ЗагруженныеОборотыПоВзаиморасчетам.Загружено
				|		
				|		СГРУППИРОВАТЬ ПО
				|			CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента) КАК Зачтено
				|		ПО CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента = Зачтено.ИдентификаторДокумента
				|ГДЕ
				|	CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторДокумента = &ИдентификаторДокумента
				|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ИдентификаторКорДокумента = ""*""
				|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.Организация = &Организация
				|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.Контрагент = &Контрагент
				|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ДоговорКонтрагента = &ДоговорКонтрагента
				|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.ВидыДвиженийПриходРасход = &ВидыДвиженийПриходРасход
				|	И CRM_ЗагруженныеОборотыПоВзаиморасчетам.Загружено";
				
				ЗапросПоРегистру.УстановитьПараметр("ИдентификаторДокумента"	, СтрокаОплаты.ИдентификаторДокумента);
				ЗапросПоРегистру.УстановитьПараметр("Организация"				, СтрокаОплаты.Организация);
				ЗапросПоРегистру.УстановитьПараметр("Контрагент"				, СтрокаОплаты.Контрагент);
				ЗапросПоРегистру.УстановитьПараметр("ДоговорКонтрагента"		, СтрокаОплаты.ДоговорКонтрагента);
				ЗапросПоРегистру.УстановитьПараметр("ВидыДвиженийПриходРасход"	, Перечисления.CRM_ВидыДвиженийПриходРасход.Расход);
				
				ВыборкаЗаписей = ЗапросПоРегистру.Выполнить().Выбрать();
				Если ВыборкаЗаписей.Следующий() Тогда // аванс имеет место быть
					ОстатокАванса = ВыборкаЗаписей.СуммаДокумента - ВыборкаЗаписей.ЗачтенаСумма;
					
					Если ЗначениеЗаполнено(ВыборкаЗаписей.СделкаСКлиентом) Тогда // мало ли
						ДокументОбъект = ВыборкаЗаписей.СделкаСКлиентом.ПолучитьОбъект();
						МассивСтрок = ДокументОбъект.Оплата.НайтиСтроки(Новый Структура("ИдентификаторДокумента,ИдентификаторКорДокумента",СтрокаОплаты.ИдентификаторДокумента,"*"));
						
						Если МассивСтрок.Количество() > 0 Тогда
							Если ОстатокАванса <= СтрокаОплаты.СуммаДокумента Тогда
								ДокументОбъект.Оплата.Удалить(ДокументОбъект.Оплата.Индекс(МассивСтрок[0]));
							Иначе
								МассивСтрок[0].Сумма = ОстатокАванса - СтрокаОплаты.СуммаДокумента;
							КонецЕсли;
							
							Попытка
								ДокументОбъект.Записать();
							Исключение
							КонецПопытки;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СохранитьСсылкуПроведенногоДокумента(СтрокаОплаты.Счет);
			
			ПеренестиДанныеВСчет(СтрокаОплаты, "Оплата");
			
			мНабор.Отбор.Сбросить();
			
			мНабор.Отбор.ИдентификаторДокумента.Установить(СтрокаОплаты.ИдентификаторДокумента);
			мНабор.Отбор.ИдентификаторКорДокумента.Установить(СтрокаОплаты.ИдентификаторКорДокумента);
			мНабор.Отбор.Организация.Установить(СтрокаОплаты.Организация);
			мНабор.Отбор.Контрагент.Установить(СтрокаОплаты.Контрагент);
			мНабор.Отбор.ДоговорКонтрагента.Установить(СтрокаОплаты.ДоговорКонтрагента);
			мНабор.Прочитать();
			Для Каждого СтрокаНабора Из мНабор Цикл
				СтрокаНабора.СделкаСКлиентом = СтрокаОплаты.Счет;
				СтрокаНабора.Загружено = Истина;
				СтрокаНабора.АвансКЗачету = ложь;
			КонецЦикла;
			мНабор.Записать();
			
		ИначеЕсли СтрокаОплаты.Загружено И ЗначениеЗаполнено(СтрокаОплаты.Счет) И (НЕ СтрокаОплаты.СчетНаОплату = СтрокаОплаты.Счет) Тогда
			
			СохранитьСсылкуПроведенногоДокумента(СтрокаОплаты.СчетНаОплату);
			СохранитьСсылкуПроведенногоДокумента(СтрокаОплаты.Счет);
			
			СкорректироватьДанныеСчета(СтрокаОплаты, "Оплата");
			
			мНабор.Отбор.Сбросить();
			
			мНабор.Отбор.ИдентификаторДокумента.Установить(СтрокаОплаты.ИдентификаторДокумента);
			мНабор.Отбор.ИдентификаторКорДокумента.Установить(СтрокаОплаты.ИдентификаторКорДокумента);
			мНабор.Отбор.Организация.Установить(СтрокаОплаты.Организация);
			мНабор.Отбор.Контрагент.Установить(СтрокаОплаты.Контрагент);
			мНабор.Отбор.ДоговорКонтрагента.Установить(СтрокаОплаты.ДоговорКонтрагента);
			мНабор.Прочитать();
			Для Каждого СтрокаНабора Из мНабор Цикл
				СтрокаНабора.СделкаСКлиентом = СтрокаОплаты.Счет;
				СтрокаНабора.Загружено		= Истина;
				СтрокаНабора.АвансКЗачету	= Ложь;
			КонецЦикла;
			мНабор.Записать();
			
			ПеренестиДанныеВСчет(СтрокаОплаты, "Оплата");
			
		ИначеЕсли СтрокаОплаты.Загружено И НЕ ЗначениеЗаполнено(СтрокаОплаты.Счет)Тогда
			
			СохранитьСсылкуПроведенногоДокумента(СтрокаОплаты.СчетНаОплату);
			
			мНабор.Отбор.Сбросить();
			
			мНабор.Отбор.ИдентификаторДокумента.Установить(СтрокаОплаты.ИдентификаторДокумента);
			мНабор.Отбор.ИдентификаторКорДокумента.Установить(СтрокаОплаты.ИдентификаторКорДокумента);
			мНабор.Отбор.Организация.Установить(СтрокаОплаты.Организация);
			мНабор.Отбор.Контрагент.Установить(СтрокаОплаты.Контрагент);
			мНабор.Отбор.ДоговорКонтрагента.Установить(СтрокаОплаты.ДоговорКонтрагента);
			мНабор.Прочитать();
			Для Каждого СтрокаНабора Из мНабор Цикл
				//СтрокаНабора.СделкаСКлиентом = Документы.CRM_Продажа.ПустаяСсылка();
				СтрокаНабора.Загружено		= Ложь;
				СтрокаНабора.АвансКЗачету	= Ложь;
			КонецЦикла;
			мНабор.Записать();
			
			СкорректироватьДанныеСчета(СтрокаОплаты, "Оплата");
			
		КонецЕсли;
		
		ЗарегистрироватьИзмененияСчета(СтрокаОплаты, "Оплата");
		
	КонецЦикла;
	
	ПерепровестиДокументы();
	
	//Если НаПечать Тогда
	//	ПечатьРееста();
	//КонецЕсли;
	
	мТаблицаРегистрацииИзменений.Очистить();
	
КонецПроцедуры

// ***************************** Разнесение оплаты по продажам КОНЕЦ ********************************

&НаСервере
Процедура ПолучитьДанные();
	
	//РеквизитФормыВЗначение("мНаборЗагруженныеОборотыПоВзаиморасчетам").мАнализАвансовыхСтрок = Ложь;
	СформироватьТекстЗапросаИПолучитьЗагруженныеОбороты();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДляЗагруженнойРеализации(Идентификатор) 
	
	Если НЕ Идентификатор = Неопределено Тогда
		ТекИдентификатор	= Идентификатор;
	Иначе
		ТекИдентификатор	= "*";
	КонецЕсли;	
	
	СписокЗагруженнойРеализации.Отбор.Элементы.Очистить();
	
	НовыйЭлементОтбора = СписокЗагруженнойРеализации.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИдентификаторДокумента");	
	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.Использование  = Истина;
	НовыйЭлементОтбора.ПравоеЗначение = ТекИдентификатор;
	
	Если Элементы.Группа6.Видимость Тогда
		Элементы.СписокЗагруженнойРеализации.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДокументПродажиВОплатах(ТекущаяСтрока, ПродажаСсылка)
	
	СтрокаРеализации = Объект.Реализация[ТекущаяСтрока];
	
	МассивСтрокОплаты = Объект.Оплата.НайтиСтроки(Новый Структура("ИдентификаторКорДокумента", СтрокаРеализации.ИдентификаторДокумента));
	Для Каждого ЗначениеМассива Из МассивСтрокОплаты Цикл
		ЗначениеМассива.Счет = ПродажаСсылка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуВзаиморасчетов(ТекущаяСтрока)
	
	ТекущиеДанные = Объект.Реализация[ТекущаяСтрока];
	
	Если НЕ ТекущиеДанные.Загружено Тогда
		
		ЗаписьРегистра = РегистрыСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам.СоздатьМенеджерЗаписи();
		
		ЗаписьРегистра.ИдентификаторДокумента		= ТекущиеДанные.ИдентификаторДокумента;
		ЗаписьРегистра.ИдентификаторКорДокумента	= "*";
		ЗаписьРегистра.Организация					= ТекущиеДанные.Организация;
		ЗаписьРегистра.Контрагент					= ТекущиеДанные.Контрагент;
		ЗаписьРегистра.ДоговорКонтрагента			= ТекущиеДанные.ДоговорКонтрагента;
		ЗаписьРегистра.Загружено					= ТекущиеДанные.Загружено;
		ЗаписьРегистра.ВидыДвиженийПриходРасход		= Перечисления.CRM_ВидыДвиженийПриходРасход.Приход;
		ЗаписьРегистра.Прочитать();
		ЗаписьРегистра.Удалить();
		
		НаборПоРеализации = РегистрыСведений.CRM_ЗагруженнаяРеализация.СоздатьНаборЗаписей();
		НаборПоРеализации.Отбор.ИдентификаторДокумента.Установить(ТекущиеДанные.ИдентификаторДокумента);
		НаборПоРеализации.Прочитать();
		Если НаборПоРеализации.Количество() > 0 Тогда
			НаборПоРеализации.Очистить();
			НаборПоРеализации.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	ТекСтрокиОплатыПоРеализации = Объект.Оплата.НайтиСтроки(Новый Структура("ИдентификаторКорДокумента", ТекущиеДанные.ИдентификаторДокумента));
	Для Каждого ЗначениеМассива Из ТекСтрокиОплатыПоРеализации Цикл
		
		Если ЗначениеМассива.Загружено И НЕ ЗначениеМассива.АвансКЗачету Тогда
			
			Продолжить;
			
		ИначеЕсли ЗначениеМассива.Загружено И ЗначениеМассива.АвансКЗачету Тогда
			
			ЗаписьРегистраУдаление = РегистрыСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам.СоздатьМенеджерЗаписи();
			ЗаписьРегистраУдаление.ИдентификаторДокумента		= ЗначениеМассива.ИдентификаторДокумента;
			ЗаписьРегистраУдаление.ИдентификаторКорДокумента	= ЗначениеМассива.ИдентификаторКорДокумента;
			ЗаписьРегистраУдаление.Организация					= ЗначениеМассива.Организация;
			ЗаписьРегистраУдаление.Контрагент					= ЗначениеМассива.Контрагент;
			ЗаписьРегистраУдаление.ДоговорКонтрагента			= ЗначениеМассива.ДоговорКонтрагента;
			ЗаписьРегистраУдаление.Загружено					= ЗначениеМассива.Загружено;
			ЗаписьРегистраУдаление.ВидыДвиженийПриходРасход		= Перечисления.CRM_ВидыДвиженийПриходРасход.Расход;
			ЗаписьРегистраУдаление.Прочитать();
			ЗаписьРегистраУдаление.Удалить();
			Продолжить;
			
		КонецЕсли;
		
		Если (НЕ Найти(ЗначениеМассива.ИдентификаторДокумента, "Выписка") = 0)
		 ИЛИ (НЕ Найти(ЗначениеМассива.ИдентификаторДокумента, "Приходный кассовый ордер") = 0)
		 ИЛИ (НЕ Найти(ЗначениеМассива.ИдентификаторДокумента, "Аванс") = 0) Тогда
			мИдентификатор = "Аванс ("+СокрЛП(Строка(ЗначениеМассива.ДоговорКонтрагента)) +")";
		Иначе
			мИдентификатор = ЗначениеМассива.ИдентификаторДокумента;
		КонецЕсли;
		
		ЗаписьРегистра = РегистрыСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.ИдентификаторДокумента		= мИдентификатор;
		ЗаписьРегистра.ИдентификаторКорДокумента	= "*";
		ЗаписьРегистра.Организация					= ЗначениеМассива.Организация;
		ЗаписьРегистра.Контрагент					= ЗначениеМассива.Контрагент;
		ЗаписьРегистра.ДоговорКонтрагента			= ЗначениеМассива.ДоговорКонтрагента;
		ЗаписьРегистра.Загружено					= Ложь;
		ЗаписьРегистра.ВидыДвиженийПриходРасход		= Перечисления.CRM_ВидыДвиженийПриходРасход.Расход;
		ЗаписьРегистра.Прочитать();
		
		Если ЗаписьРегистра.Выбран() Тогда
			ЗаписьРегистра.Дата				= ЗначениеМассива.Дата;
			ЗаписьРегистра.СуммаДокумента	= ЗаписьРегистра.СуммаДокумента + ЗначениеМассива.СуммаДокумента;
			ЗаписьРегистра.Записать();
			
			ЗаписьРегистраУдаление = РегистрыСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам.СоздатьМенеджерЗаписи();
			ЗаписьРегистраУдаление.ИдентификаторДокумента		= ЗначениеМассива.ИдентификаторДокумента;
			ЗаписьРегистраУдаление.ИдентификаторКорДокумента	= ЗначениеМассива.ИдентификаторКорДокумента;
			ЗаписьРегистраУдаление.Организация					= ЗначениеМассива.Организация;
			ЗаписьРегистраУдаление.Контрагент					= ЗначениеМассива.Контрагент;
			ЗаписьРегистраУдаление.ДоговорКонтрагента			= ЗначениеМассива.ДоговорКонтрагента;
			ЗаписьРегистраУдаление.Загружено					= ЗначениеМассива.Загружено;
			ЗаписьРегистраУдаление.ВидыДвиженийПриходРасход		= Перечисления.CRM_ВидыДвиженийПриходРасход.Расход;
			ЗаписьРегистраУдаление.Прочитать();
			ЗаписьРегистраУдаление.Удалить();
			
		Иначе
			ЗаписьРегистра.ИдентификаторДокумента		= ЗначениеМассива.ИдентификаторДокумента;
			ЗаписьРегистра.ИдентификаторКорДокумента	= ЗначениеМассива.ИдентификаторКорДокумента;
			ЗаписьРегистра.Организация					= ЗначениеМассива.Организация;
			ЗаписьРегистра.Контрагент					= ЗначениеМассива.Контрагент;
			ЗаписьРегистра.ДоговорКонтрагента			= ЗначениеМассива.ДоговорКонтрагента;
			ЗаписьРегистра.Загружено					= Ложь;
			ЗаписьРегистра.ВидыДвиженийПриходРасход		= Перечисления.CRM_ВидыДвиженийПриходРасход.Расход;
			ЗаписьРегистра.Прочитать();
			Если Найти(мИдентификатор, "Аванс (") > 0 Тогда
				ЗаписьРегистра.ПредставлениеДокумента = "Аванс";
			КонецЕсли;
			ЗаписьРегистра.ИдентификаторДокумента		= мИдентификатор;
			ЗаписьРегистра.ИдентификаторКорДокумента	= "*";
			ЗаписьРегистра.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуАванса(ТекущаяСтрока)
	
	ТекущиеДанные = Объект.Оплата[ТекущаяСтрока];
	
	ЗаписьРегистра = РегистрыСведений.CRM_ЗагруженныеОборотыПоВзаиморасчетам.СоздатьМенеджерЗаписи();
	
	ЗаписьРегистра.ИдентификаторДокумента		= ТекущиеДанные.ИдентификаторДокумента;
	ЗаписьРегистра.ИдентификаторКорДокумента	= "*";
	ЗаписьРегистра.Организация					= ТекущиеДанные.Организация;
	ЗаписьРегистра.Контрагент					= ТекущиеДанные.Контрагент;
	ЗаписьРегистра.ДоговорКонтрагента			= ТекущиеДанные.ДоговорКонтрагента;
	ЗаписьРегистра.Загружено					= ТекущиеДанные.Загружено;
	ЗаписьРегистра.ВидыДвиженийПриходРасход		= Перечисления.CRM_ВидыДвиженийПриходРасход.Расход;
	ЗаписьРегистра.Прочитать();
	ЗаписьРегистра.Удалить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПериоду()
	
	СКД = ПолучитьИзВременногоХранилища(АдресСКД);
	Поле = Новый ПолеКомпоновкиДанных("Дата");
	
	ОтборНачалаПериода = Ложь;
	ОтборОкончаниеПериода = Ложь;
	
	Для Каждого Отбор Из СКД.НастройкиПоУмолчанию.Отбор.Элементы Цикл 
		Если (Отбор.ЛевоеЗначение = Поле) Тогда
			
			Если Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
				ОтборНачалаПериода = Истина;
				Отбор.Использование  = ?(ПериодПредставление = "Не выбран",Ложь, Истина);
				Отбор.ПравоеЗначение = ?(ПериодПредставление = "Не выбран",Неопределено, Период.ДатаНачала);
				Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ИначеЕсли Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
				ОтборОкончаниеПериода = Истина;
				Отбор.Использование  = ?(ПериодПредставление = "Не выбран",Ложь, Истина);
				Отбор.ПравоеЗначение = ?(ПериодПредставление = "Не выбран",Неопределено, Период.ДатаОкончания);
				Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ОтборНачалаПериода Тогда
		НовыйОтбор = СКД.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата");	
		НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		НовыйОтбор.Использование  = ?(ПериодПредставление = "Не выбран",Ложь, Истина);
		НовыйОтбор.ПравоеЗначение = ?(ПериодПредставление = "Не выбран",Неопределено, Период.ДатаНачала);
		НовыйОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;	
	
	Если НЕ ОтборОкончаниеПериода Тогда
		НовыйОтбор = СКД.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата");	
		НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		НовыйОтбор.Использование  = ?(ПериодПредставление = "Не выбран",Ложь, Истина);
		НовыйОтбор.ПравоеЗначение = ?(ПериодПредставление = "Не выбран",Неопределено, Период.ДатаОкончания);
		НовыйОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;	
	
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	
	ПолучитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВСКД(ИмяПоля)
	
	СКД = ПолучитьИзВременногоХранилища(АдресСКД);
	
	Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	ЗначениеПоля = ЭтотОбъект[ИмяПоля];
	
	ОтборНайден = Ложь;
	Для Каждого Отбор Из СКД.НастройкиПоУмолчанию.Отбор.Элементы Цикл 
		Если (Отбор.ЛевоеЗначение = Поле) Тогда
			ОтборНайден = Истина;
			
			Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			Отбор.Использование  = ?(ЗначениеЗаполнено(ЗначениеПоля),Истина,Ложь);
			Отбор.ПравоеЗначение = ЗначениеПоля;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ОтборНайден Тогда
		НовыйОтбор = СКД.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоля);	
		НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.Использование  = ?(ЗначениеЗаполнено(ЗначениеПоля),Истина,Ложь);
		НовыйОтбор.ПравоеЗначение = ЗначениеПоля;
	КонецЕсли;	
	
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	
	ПолучитьДанные();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСоответствиеТабличнойЧастиТовары(ВыбранноеЗначение, ТекущаяСтрока)
	
	ТекущиеДанные = Объект.Реализация[ТекущаяСтрока];
	
	Набор = РегистрыСведений.CRM_ЗагруженнаяРеализация.СоздатьНаборЗаписей();
	Набор.Отбор.ИдентификаторДокумента.Установить(ТекущиеДанные.ИдентификаторДокумента);
	Набор.Прочитать();
	
	Для Каждого СтрокаНабора Из Набор Цикл
		НайденнаяСтрока = ВыбранноеЗначение.Запасы.Найти(СтрокаНабора.Номенклатура ,"Номенклатура");
		Если НайденнаяСтрока = Неопределено Тогда
			Возврат Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	
	ТекущиеДанные = Элементы.Реализация.ТекущиеДанные;
	
	Элементы.Группа6.Видимость = Элементы.ГруппаКомантнаяПанельРеализации.ПодчиненныеЭлементы.РеализацияДетализацияРелизации4.Пометка И (НЕ ТекущиеДанные = Неопределено);
	Элементы.Группа6.Заголовок = ?(ТекущиеДанные = Неопределено, "", "Состав документа: " + ТекущиеДанные.ПредставлениеДокумента);
	
КонецПроцедуры

//// Получить значение ставки НДС.
////
//Функция ПолучитьЗначениеСтавкиНДС(СтавкаНДС)
//	
//	Возврат ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС.Ставка, 0);

//КонецФункции // ПолучитьЗначениеСтавкиНДС()

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполним список выбора периода.
	
	ПериодСписокВыбора = CRM_ОбщегоНазначенияПовтИсп.ПериодПолучитьСписокВыбора();
	
	ПериодПредставление = "Не выбран";
	Период = Неопределено;
	
	СКД = Обработки.CRM_ОбменДаннымиС1СБухгалтерия.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	АдресСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ФормаОбработки = ПолучитьФорму("Обработка.CRM_ОбменДаннымиС1СБухгалтерия.Форма.ФормаЗагрузкиДанных");
	//ФормаОбработки.Заголовок = "Загрузка взаиморасчетов";
	//ФормаОбработки.ОткрытьМодально();
	//// ОткрытьФормуМодально("Обработка.CRM_ЗагрузкаДанных.Форма.Форма");	
	
	СохранятьИзмененияПользователя = Ложь;
	
	ПолучитьДанные();
	
	Элементы.Авансы.ОтборСтрок = неопределено;
	//СтрОтбора = Новый ФиксированнаяСтруктура("ИдентификаторКорДокумента",  "*");
	СтрОтбора = Новый ФиксированнаяСтруктура("ФлагОтбора",  1);
	Элементы.Авансы.ОтборСтрок = СтрОтбора;
	
	ИзменитьРежимОбработки(ЭтоКлиент);
	
КонецПроцедуры

&НаСервере
Процедура Перезаполнить()
	
	ПолучитьДанные();
	
	Элементы.Авансы.ОтборСтрок = неопределено;
	//СтрОтбора = Новый ФиксированнаяСтруктура("ИдентификаторКорДокумента",  "*");
	СтрОтбора = Новый ФиксированнаяСтруктура("ФлагОтбора",  1);
	Элементы.Авансы.ОтборСтрок = СтрОтбора;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Распределить(Команда)
	
	РазнестиОплатуРеализацию();
	
	СохранятьИзмененияПользователя = Ложь;
	
	ПолучитьДанные();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.CRM_ОбменДаннымиС1СБухгалтерия.Форма.ФормаНастройки", Новый Структура("АдресСКД",АдресСКД),,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		АдресСКД = Результат.АдресСКД;
		СформироватьТекстЗапросаИПолучитьЗагруженныеОбороты();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	//Если Объект.Реализация.Количество()>0 ИЛИ Объект.Оплата.Количество() > 0 Тогда
	//	Результат = Вопрос(НСтр("ru = 'Данные по реализации и авансам будут перезаполнены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	//	Если Результат <> КодВозвратаДиалога.Да Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	
	ПриОткрытии(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияРелизации(Команда)
	
	Элементы.ГруппаКомантнаяПанельРеализации.ПодчиненныеЭлементы.РеализацияДетализацияРелизации4.Пометка = НЕ Элементы.ГруппаКомантнаяПанельРеализации.ПодчиненныеЭлементы.РеализацияДетализацияРелизации4.Пометка;
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

#Область ПроцедурыОбработчикиСобытийОстальныхЭлементовУправленияФормы

&НаКлиенте
Процедура ОбработчикОжиданияРеализацияПриАктивизацииСтроки() 
	
	ТекущиеДанные = Элементы.Реализация.ТекущиеДанные;
	
	Элементы.Оплата.ОтборСтрок = Неопределено;
	Элементы.Авансы.ОтборСтрок = Неопределено;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		СтруктураОтбора = Новый Структура("ИдентификаторДокумента ,ИдентификаторКорДокумента", "*", "*");
		СтрОтбора = Новый ФиксированнаяСтруктура(СтруктураОтбора);
		Элементы.Оплата.ОтборСтрок = СтрОтбора;
		
		//СтрОтбора = Новый ФиксированнаяСтруктура("ИдентификаторКорДокумента",  "*");
		СтрОтбора = Новый ФиксированнаяСтруктура("ФлагОтбора",  1);
		Элементы.Авансы.ОтборСтрок = СтрОтбора;
		
		УстановитьОтборДляЗагруженнойРеализации(Неопределено);
		
	Иначе
		СтрОтбора = Новый ФиксированнаяСтруктура("ИдентификаторКорДокумента",  ТекущиеДанные.ИдентификаторДокумента);
		Элементы.Оплата.ОтборСтрок = СтрОтбора;
		
		//СтрОтбора = Новый ФиксированнаяСтруктура("ИдентификаторКорДокумента",  "*");
		СтрОтбора = Новый ФиксированнаяСтруктура("ФлагОтбора",  1);
		Элементы.Авансы.ОтборСтрок = СтрОтбора;
		
		УстановитьОтборДляЗагруженнойРеализации(ТекущиеДанные.ИдентификаторДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПриАктивизацииСтроки(Элемент)

	ПодключитьОбработчикОжидания("ОбработчикОжиданияРеализацияПриАктивизацииСтроки",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Реализация.ТекущиеДанные;
	
	Если ТекущиеДанные.Загружено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("РеализацияСчетНачалоВыбораЗавершение", ЭтотОбъект , Элемент);
		ПоказатьВопрос(ОписаниеОповещения, "Данная реализация  уже была отнесена на " +Строка(ТекущиеДанные.СчетНаОплату)+ ". Продолжить?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	РеализацияСчетНачалоВыбораЗавершение(Неопределено, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСчетНачалоВыбораЗавершение(Ответ, Элемент) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Реализация.ТекущиеДанные;
	ПараметрыФормы = Новый Структура("Организация, Контрагент, Договор, ЗакрыватьПриВыборе", ТекущиеДанные.Организация, ТекущиеДанные.Контрагент, ТекущиеДанные.ДоговорКонтрагента, Истина);
	ОткрытьФорму("Обработка.CRM_ОбменДаннымиС1СБухгалтерия.Форма.ФормаПодбора", ПараметрыФормы, Элемент, , );
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Реализация.ТекущиеДанные.НомерСтроки - 1;
	
	Если НЕ ПроверитьСоответствиеТабличнойЧастиТовары(ВыбранноеЗначение, ТекущаяСтрока) Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("РеализацияСчетОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
		ПоказатьВопрос(ОписаниеОповещения, "Состав загружаемой номенклатуры отличается от номенклатуры выбираемого документа продажи. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	РеализацияСчетОбработкаВыбораЗавершение(Неопределено, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСчетОбработкаВыбораЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Реализация.ТекущиеДанные.Счет = ВыбранноеЗначение;
	Модифицированность = Истина;
	РеализацияСчетПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Реализация.ТекущиеДанные;
	//ТекущаяСтрока = Элементы.Реализация.ТекущиеДанные.ИсходныйНомерСтроки;
	ТекущаяСтрока = Элементы.Реализация.ТекущиеДанные.НомерСтроки - 1;
	
	УстановитьДокументПродажиВОплатах(ТекущаяСтрока, ТекущиеДанные.Счет);
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияСчетОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Реализация.ТекущиеДанные;
	Если ТекущиеДанные.Загружено Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("СчетОчисткаПродолжение", ЭтотОбъект, ТекущиеДанные);
		ПоказатьВопрос(ОписаниеОповещения, "Данная реализация  уже была отнесена на " +Строка(ТекущиеДанные.СчетНаОплату)+ ". Продолжить?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОчисткаПродолжение(Ответ, ТекущиеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные.СчетНаОплату = ПредопределенноеЗначение("Документ.CRM_СчетНаОплатуПокупателю.ПустаяСсылка");
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиВзаиморасчетов(Массив)
	
	Ном = Массив.Количество();
	
	Пока Ном > 0 Цикл
		УдалитьСтрокуВзаиморасчетов(Массив[Ном-1]);
		Ном = Ном -1;
	КонецЦикла;
	
	//СформироватьТекстЗапросаИПолучитьЗагруженныеОбороты();
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПередУдалением(Элемент, Отказ)
	
	//Отказ = Истина;
	
	Если Элементы.Реализация.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если Элемент.ВыделенныеСтроки.Количество() > 0 Тогда
		МассивНомеровСтрок = Новый Массив;
		
		Ном = Элемент.ВыделенныеСтроки.Количество();
		Для Каждого ЗначениеМассива Из Элемент.ВыделенныеСтроки Цикл
			ВыделеннаяСтрока = Элементы.Реализация.ДанныеСтроки(ЗначениеМассива);
			МассивНомеровСтрок.Добавить(ВыделеннаяСтрока.НомерСтроки-1);
		КонецЦикла;
		
		СохранятьИзмененияПользователя = Истина;
		
		УдалитьСтрокиВзаиморасчетов(МассивНомеровСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияПослеУдаления(Элемент)
	
	Перезаполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Авансы.ТекущиеДанные;
	
	Если ТекущиеДанные.Загружено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("АвансыСчетНачалоВыбораЗавершение", ЭтотОбъект , Элемент);
		ПоказатьВопрос(ОписаниеОповещения, "Данный аванс  уже был отнесен на " +Строка(ТекущиеДанные.СчетНаОплату)+ ". Продолжить?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	АвансыСчетНачалоВыбораЗавершение(Неопределено, ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыСчетНачалоВыбораЗавершение(Ответ, Элемент) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Авансы.ТекущиеДанные;
	ПараметрыФормы = Новый Структура("Организация, Контрагент, Договор, ЗакрыватьПриВыборе", ТекущиеДанные.Организация, ТекущиеДанные.Контрагент, ТекущиеДанные.ДоговорКонтрагента, Истина);
	ОткрытьФорму("Обработка.CRM_ОбменДаннымиС1СБухгалтерия.Форма.ФормаПодбора", ПараметрыФормы, Элемент, , );
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыСчетОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Авансы.ТекущиеДанные;
	Если ТекущиеДанные.Загружено Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("СчетОчисткаПродолжение", ЭтотОбъект, ТекущиеДанные);
		ПоказатьВопрос(ОписаниеОповещения, "Данный аванс  уже был отнесен на " +Строка(ТекущиеДанные.СчетНаОплату)+ ". Продолжить?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиАвансов(Массив)
	
	Ном = Массив.Количество();
	
	Пока Ном > 0 Цикл
		УдалитьСтрокуАванса(Массив[Ном-1]);
		Ном = Ном -1;
	КонецЦикла;
	
	//СформироватьТекстЗапросаИПолучитьЗагруженныеОбороты();
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПередУдалением(Элемент, Отказ)
	
	//Отказ = Истина;
	
	Если Элементы.Авансы.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если Элемент.ВыделенныеСтроки.Количество() > 0 Тогда
		МассивНомеровСтрок = Новый Массив;
		
		Ном = Элемент.ВыделенныеСтроки.Количество();
		Для Каждого ЗначениеМассива Из Элемент.ВыделенныеСтроки Цикл
			ВыделеннаяСтрока = Элементы.Авансы.ДанныеСтроки(ЗначениеМассива);
			МассивНомеровСтрок.Добавить(ВыделеннаяСтрока.НомерСтроки-1);
		КонецЦикла;
		
		//СохранятьИзмененияПользователя = Истина;
		
		УдалитьСтрокиАвансов(МассивНомеровСтрок);
		//Перезаполнить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбора(Элемент)
	
	УстановитьОтборВСКД(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Попробуем найти текущий элемент.
	ТекущийЭлементСписка = Неопределено;
	Для Каждого ЭлементСписка Из ПериодСписокВыбора Цикл
		Если ЭлементСписка.Представление = ПериодПредставление Тогда
			ТекущийЭлементСписка = ЭлементСписка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущийЭлементСписка = Неопределено Тогда
		ТекущийЭлементСписка = ПериодСписокВыбора.НайтиПоЗначению("ПроизвольныйПериод");
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, ПериодСписокВыбора, Элемент, ТекущийЭлементСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ВыбранныйЭлемент.Представление = "Не выбран" Тогда
			ПериодПредставление = "Не выбран";
		Иначе	
			Период.Вариант = ВариантСтандартногоПериода[ВыбранныйЭлемент.Значение];
			ПериодПредставление = ВыбранныйЭлемент.Представление;
		КонецЕсли;	
		Если ПериодПредставление = "Не выбран" Тогда
			Период = Неопределено;
			УстановитьОтборПоПериоду();
		Иначе	
			УстановитьОтборПоПериоду();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// *********************** ЗАГРУЗКА ИЗ ФАЙЛА ************************************

&НаСервере
Функция РасширениеФайла(Знач ИмяФайла)
	
	ПозицияТочки = ПоследнийРазделитель(ИмяФайла);
	
	Расширение = Прав(ИмяФайла,СтрДлина(ИмяФайла) - ПозицияТочки + 1);
	
	Возврат Расширение;
	
КонецФункции

&НаСервере
Функция ПоследнийРазделитель(СтрокаСРазделителем, Разделитель = ".")
	
	ДлинаСтроки = СтрДлина(СтрокаСРазделителем);
	
	Пока ДлинаСтроки > 0 Цикл
		
		Если Сред(СтрокаСРазделителем, ДлинаСтроки, 1) = Разделитель Тогда
			
			Возврат ДлинаСтроки; 
			
		КонецЕсли;
		
		ДлинаСтроки = ДлинаСтроки - 1;
		
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ЗагрузитьДанные(ТолькоШапка = Ложь)
	
	//РеквизитФормыВЗначение("мНаборЗагруженныеОборотыПоВзаиморасчетам").мАнализАвансовыхСтрок = Истина;
	мУниверсальныйОбменДанными = РеквизитФормыВЗначение("Объект.УниверсальныйОбменДанными");
	
	мУниверсальныйОбменДанными.РежимОбмена = "Загрузка";
	мУниверсальныйОбменДанными.ФлагРежимОтладки = Ложь;
	мУниверсальныйОбменДанными.ИмяФайлаОбмена = Объект.ИмяФайлаОбмена;
	мУниверсальныйОбменДанными.ВыводВОкноСообщенийИнформационныхСообщений = Ложь;
	мУниверсальныйОбменДанными.ЗагружатьДанныеВРежимеОбмена = Истина;
	
	Если ТолькоШапка Тогда
		мУниверсальныйОбменДанными.ОткрытьФайлЗагрузки(ТолькоШапка);
	Иначе
		мУниверсальныйОбменДанными.ВыполнитьЗагрузку();
	КонецЕсли;
		
	АтрибутыФайла = мУниверсальныйОбменДанными.мАтрибутыФайлаОбмена;
	
	//Попытка
	//	Объект.ВерсияПравилОбмена =  мУниверсальныйОбменДанными.Конвертация.ДатаВремяСоздания;
	//Исключение
	//	Объект.ВерсияПравилОбмена = "";
	// КонецПопытки;
	
	Попытка
		Объект.ДатаВыгрузкиДанных = АтрибутыФайла.ДатаВыгрузки;
		ПредставлениеПериодаВыгрузки = ПредставлениеПериода(АтрибутыФайла.НачалоПериодаВыгрузки,АтрибутыФайла.ОкончаниеПериодаВыгрузки);
	Исключение
	КонецПопытки;
	
	ЗначениеВРеквизитФормы(мУниверсальныйОбменДанными, "Объект.УниверсальныйОбменДанными");
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеОФайлеДляЗагрузкиДанных()
	
	//ВерсияПравилОбмена = "";
	ДатаВыгрузкиДанных = "";
	ПредставлениеПериодаВыгрузки = "";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Функция ПустоеЗначениеРеквизита(Реквизит, ПутьКДанным, Заголовок)
	
	Если ПустаяСтрока(Реквизит) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""%1"" не заполнено'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Заголовок);
		
		СообщитьПользователю(ТекстСообщения, ПутьКДанным);
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	АдресФайла = "";
	ИмяФайлаДляРасширения = "";
	
	Если ЭтоКлиент Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуИзФормыЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайла,НСтр("ru = 'Файл обмена'"),, УникальныйИдентификатор);
		
	Иначе
		
		Если ПустоеЗначениеРеквизита(Объект.ИмяФайлаОбмена, "ИмяФайлаОбмена", Элементы.ИмяФайлаОбмена.Заголовок) Тогда
			Возврат;
		КонецЕсли;
		
		ВыполнитьЗагрузкуИзФормыЗавершение(Истина, АдресФайла, ИмяФайлаДляРасширения, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзФормыЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Состояние(НСтр("ru = 'Выполняется загрузка данных. Пожалуйста, подождите...'"));
		ВыполнитьЗагрузкуНаСервере(Адрес, ВыбранноеИмяФайла);
		
		СохранятьИзмененияПользователя = Ложь;
		ПриОткрытии(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуНаСервере(АдресФайла, ИмяФайлаДляРасширения)
	
	ИмяЗагружаемогоФайла = ИмяФайлаНаСервереИлиКлиенте(Объект.ИмяФайлаОбмена ,АдресФайла, ИмяФайлаДляРасширения);
	
	Если ИмяЗагружаемогоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект.УниверсальныйОбменДанными");
	
	ОбъектДляСервера.ИмяФайлаОбмена = ИмяЗагружаемогоФайла;
	ОбъектДляСервера.ФлагРежимОтладкиОбработчиков = Ложь;
	ОбъектДляСервера.РежимОбмена = "Загрузка";
	ОбъектДляСервера.ВыводВОкноСообщенийИнформационныхСообщений = Ложь;
	ОбъектДляСервера.ЗагружатьДанныеВРежимеОбмена = Истина;
	ОбъектДляСервера.ЗаписыватьВИнформационнуюБазуТолькоИзмененныеОбъекты = Истина;
	ОбъектДляСервера.ОбъектыПоСсылкеЗагружатьБезПометкиУдаления = Истина;
	ОбъектДляСервера.ОптимизированнаяЗаписьОбъектов = Истина;
	ОбъектДляСервера.ЗаписыватьРегистрыНаборамиЗаписей = Истина;
	
	ОбъектДляСервера.ВыполнитьЗагрузку();
	
	Попытка
		
		Если Не ПустаяСтрока(АдресФайла) Тогда
			УдалитьФайлы(ИмяЗагружаемогоФайла);
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Универсальный обмен данными в формате XML'", ОбъектДляСервера.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ОбъектДляСервера.Параметры.Очистить();
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект.УниверсальныйОбменДанными");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст, ПутьКДанным = "")
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаСервере
Функция ИмяФайлаНаСервереИлиКлиенте(ИмяРеквизита ,Знач АдресФайла, Знач ИмяФайлаДляРасширения = ".xml",
	СоздатьНовый = Ложь, ПроверятьСуществование = Истина)
	
	ИмяФайла = Неопределено;
	
	Если ЭтоКлиент Тогда
		
		Если СоздатьНовый Тогда
			
			Расширение = ? (Объект.АрхивироватьФайл, ".zip", ".xml");
			
			ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
			
			Файл = Новый Файл(ИмяФайла);
			
		Иначе
			
			Расширение = РасширениеФайла(ИмяФайлаДляРасширения);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
			АдресНаСервере = ПолучитьИмяВременногоФайла(Расширение);
			ДвоичныеДанные.Записать(АдресНаСервере);
			ИмяФайла = АдресНаСервере;
			
		КонецЕсли;
		
	Иначе
		
		ФайлНаСервере = Новый Файл(ИмяРеквизита);
		
		Если Не ФайлНаСервере.Существует() И ПроверятьСуществование Тогда
			
			СообщитьПользователю(НСтр("ru = 'Указанный файл не существует.'"));
			
		Иначе
			
			ИмяФайла = ИмяРеквизита;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

#Область ПроцедурыОбработчикиСобытийОстальныхЭлементовУправленияФормы

&НаКлиенте
// Открывает диалог выбора файла.
//
// Параметры:
//  Элемент                - Элемент управления, для которого выбираем файл.
//  ПроверятьСуществование - Если Истина, то выбор отменяется если файл не существует.
// 
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь, Знач РасширениеПоУмолчанию = "xml", 
	АрхивироватьФайлДанных = Истина, ВыборФайлаПравил = Ложь)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаПродолжение", ЭтотОбъект, ПроверятьСуществование);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаПродолжение(ПодключеноРасширение, ПроверятьСуществование) Экспорт
	
	Если ПодключеноРасширение Тогда
		ДиалогВыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

		ДиалогВыбораФайла.Фильтр						=	"Файл данных (*.xml)|*.xml|Архивный файл данных (*.zip)|*.zip";
		ДиалогВыбораФайла.Расширение					=	"xml";
		
		ДиалогВыбораФайла.Заголовок						=	"Выберите файл";
		ДиалогВыбораФайла.ПредварительныйПросмотр		=	Ложь;
		ДиалогВыбораФайла.ИндексФильтра					=	0;
		ДиалогВыбораФайла.ПолноеИмяФайла				=	Объект.ИмяФайлаОбмена;
		ДиалогВыбораФайла.ПроверятьСуществованиеФайла	=	ПроверятьСуществование;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект);
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора файла необходимо установить расширение для работы с файлами в Веб-клиенте.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяФайлаОбмена = ВыбранныеФайлы[0];
		ИмяФайлаОбменаПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, , , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОбменаПриИзменении(Элемент)
	
	ОчиститьДанныеОФайлеДляЗагрузкиДанных();
	ЗагрузитьДанные(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПродажи(Команда)
	
	ВыполнитьСопоставлениеПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура СопроставитьПродажиАвансам(Команда)
	
	ВыполнитьСопоставлениеПродажАвансы();
	
КонецПроцедуры

&НаСервере
Функция СформироватьПродажу(ТекущиеДанные)
	
	НаборРегистра = РегистрыСведений.CRM_ЗагруженнаяРеализация.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.ИдентификаторДокумента.Установить(ТекущиеДанные.ИдентификаторДокумента);
	НаборРегистра.Прочитать();
	ТаблицаТоваров = НаборРегистра.Выгрузить();
	
	НовыйДокумент = Документы.CRM_СчетНаОплатуПокупателю.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущиеДанные.Дата-1;
	НовыйДокумент.Партнер					= ТекущиеДанные.Контрагент;
	НовыйДокумент.Договор					= ТекущиеДанные.ДоговорКонтрагента;
	НовыйДокумент.Организация				= ТекущиеДанные.Организация;
	НовыйДокумент.БанковскийСчет			= НовыйДокумент.Организация.БанковскийСчетПоУмолчанию;
	НовыйДокумент.Валюта					= ТекущиеДанные.ВалютаДокумента;
	НовыйДокумент.Курс						= ТекущиеДанные.КурсВзаиморасчетов;
	НовыйДокумент.Кратность					= ТекущиеДанные.КратностьВзаиморасчетов;
	НовыйДокумент.СуммаДокумента			= ТекущиеДанные.СуммаДокумента;
	НовыйДокумент.Автор						= Пользователи.ТекущийПользователь();
	НовыйДокумент.Ответственный				= ?(ЗначениеЗаполнено(ТекущиеДанные.Контрагент.ОсновнойМенеджер),ТекущиеДанные.Контрагент.ОсновнойМенеджер,Пользователи.ТекущийПользователь());
	НовыйДокумент.Важность					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	НовыйДокумент.Комментарий				= "Продажа создана автоматически на основании: "+ТекущиеДанные.ПредставлениеДокумента;
	НовыйДокумент.НеВыгружатьВБухгалтерию	= Истина;
	
	НовыйДокумент.Запасы.Загрузить(ТаблицаТоваров);
	
	Если НЕ НовыйДокумент.СуммаДокумента = НовыйДокумент.Запасы.Итог("Сумма") Тогда
		НовыйДокумент.ЦенаВключаетНДС		= Ложь;
	Иначе
		НовыйДокумент.ЦенаВключаетНДС		= Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из НовыйДокумент.Запасы Цикл
		СтрокаТабличнойЧасти.ОсталосьОтгрузить = СтрокаТабличнойЧасти.Количество;
		
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
		Если СтрокаТабличнойЧасти.ПроцентРучнойСкидки = 100 Тогда
			СтрокаТабличнойЧасти.Сумма = 0;
		ИначеЕсли СтрокаТабличнойЧасти.ПроцентРучнойСкидки <> 0
				И СтрокаТабличнойЧасти.Количество <> 0 Тогда
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентРучнойСкидки / 100);
		КонецЕсли;
		
		СтавкаНДС = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		СтрокаТабличнойЧасти.СуммаНДС = ?(НовыйДокумент.ЦенаВключаетНДС, 
										  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
										  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
				
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(НовыйДокумент.ЦенаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		
		НовыйДокумент.СуммаДокумента			= НовыйДокумент.Запасы.Итог("Всего");
		НовыйДокумент.СуммаОплаты				= НовыйДокумент.Оплата.Итог("Сумма");
		НовыйДокумент.СуммаОтгрузки				= НовыйДокумент.Отгрузка.Итог("Всего");
		НовыйДокумент.СуммаОстатокОтгрузка		= НовыйДокумент.СуммаДокумента - НовыйДокумент.СуммаОтгрузки;
		НовыйДокумент.СуммаОстатокОплата		= НовыйДокумент.СуммаДокумента - НовыйДокумент.СуммаОплаты;
	КонецЦикла;
	
	НовыйДокумент.Записать();
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

&НаСервере
Процедура СоздатьДокументы(Массив)
	
	Ном = Массив.Количество();
	Пока Ном > 0 Цикл
		
		МассивСтрок = Объект.Реализация.НайтиСтроки(новый Структура("ИдентификаторДокумента", Массив[Ном-1]));
		СтрокаРеализации = МассивСтрок[0];
		
		ДокументПродажи			= СформироватьПродажу(СтрокаРеализации);
		СтрокаРеализации.Счет	= ДокументПродажи;
		
		МассивСтрокОплаты = Объект.Оплата.НайтиСтроки(Новый Структура("ИдентификаторКорДокумента", СтрокаРеализации.ИдентификаторДокумента));
		Для Каждого ЗначениеМассива Из МассивСтрокОплаты Цикл
			ЗначениеМассива.Счет = ДокументПродажи;
		КонецЦикла;
		Ном = Ном -1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПродажи(Команда)
	
	ПараметрыФормы = Новый Структура("ОбработкаОбъект", Объект);
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьПродажиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.CRM_ОбменДаннымиС1СБухгалтерия.Форма.ФормаНастройкиАвтозаполнения", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПродажиЗавершение(Результат)
	
	Если НЕ Результат = Неопределено Тогда
		Массив = Новый Массив;
		Для Каждого СтрокаТаблицы Из Результат Цикл
			Если СтрокаТаблицы.Пометка Тогда
				Массив.Добавить(СтрокаТаблицы.ИдентификаторДокумента);
			КонецЕсли;
		КонецЦикла;
		
		Если Массив.Количество() > 0 Тогда
			СоздатьДокументы(Массив);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломДобавленияСтроки(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = истина;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	Если Модифицированность Тогда
		Отказ = Истина;
		ОбратныйВызов = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбратныйВызов, НСтр("ru = 'Данные были изменены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик ответа на вопрос перед закрытием формы.
//
// Параметры:
//	Результат				- КодВозвратаДиалога	- Ответ на вопрос.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
		Модифицированность	= Ложь;
		Закрыть();
    КонецЕсли;
КонецПроцедуры // ПередЗакрытиемЗавершение()

&НаКлиенте
Процедура НаКлиенте(Команда)
	
	Если Не ЭтоКлиент Тогда
		
		ЭтоКлиент = Истина;
		
		ИзменитьРежимОбработки(ЭтоКлиент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаСервере(Команда)
	
	Если ЭтоКлиент Тогда
		
		ЭтоКлиент = Ложь;
		
		ИзменитьРежимОбработки(ЭтоКлиент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимОбработки(РежимРаботы)
	
	Элементы.ФормаНаКлиенте.Пометка = РежимРаботы;
	Элементы.ФормаНаСервере.Пометка = Не РежимРаботы;
	
	Элементы.РежимОбработки.Заголовок = 
	?(РежимРаботы, НСтр("ru = 'Режим работы (на клиенте)'"), НСтр("ru = 'Режим работы (на сервере)'"));
	
	ИзменитьРасположениеФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасположениеФайла()
	
	Элементы.ИмяФайлаОбмена.Видимость = Не ЭтоКлиент;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
