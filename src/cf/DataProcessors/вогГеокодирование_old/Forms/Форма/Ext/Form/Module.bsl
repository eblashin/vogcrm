
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
#Область  ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_СОБЫТИЙ_ТАБЛИЧНОГО_ПОЛЯ_КАРТЕ

&НаКлиенте
Процедура ВыполнитьПоискНаКарте(ТекстПоиска) Экспорт
	
	ДобавитьСобытиеИВыполнить("find_by_string", ТекстПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦентроватьПоКоординатам(Широта, Долгота,Представление = "") Экспорт 
	
	МассивКоординат = Новый Массив;
	МассивКоординат.Добавить(Долгота);
	МассивКоординат.Добавить(Широта);
	
	ДобавитьСобытиеИВыполнить("set_map_center", вогГеокодированиеСервер.ПолучитьСтрокуJSON(МассивКоординат));
	
	// ++ Тищенко В.В. 22.01.2019
	// Отметка на карте
	
	Если НЕ ПоискПоОрганизациям Тогда
		ПараметрыДляВыполненения 	= Новый Структура;
		ПараметрыДляВыполненения.Вставить("x"			,Долгота);
		ПараметрыДляВыполненения.Вставить("y"			,Широта);
		ПараметрыДляВыполненения.Вставить("NamePoint"	,Представление);
		ПараметрФункции				= вогГеокодированиеСервер.ПолучитьСтрокуJSON(ПараметрыДляВыполненения);
		ДобавитьСобытиеИВыполнить("clickSetPlacemark"	, ПараметрФункции);
	КонецЕсли;	
	// -- Тищенко В.В. 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМасштабКарты(Масштаб) Экспорт 
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("zoom", Масштаб);
		
	ДобавитьСобытиеИВыполнить("set_map_zoom", вогГеокодированиеСервер.ПолучитьСтрокуJSON(СтруктураДанных));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОбъектыНаКарте() Экспорт
	
	ДобавитьСобытиеИВыполнить("clear_clusters", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКластерОбъектов(ДанныеКластрера) Экспорт 
	
	ДобавитьСобытиеИВыполнить("add_cluster_objects", вогГеокодированиеСервер.ПолучитьСтрокуJSON(ДанныеКластрера));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПоискаГео(ДанныеПоиска) Экспорт 
	
	ДобавитьСобытиеИВыполнить("set_search_mode", вогГеокодированиеСервер.ПолучитьСтрокуJSON(Новый Структура("select", ДанныеПоиска)));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботыКарты(РежимКарты) Экспорт 
	
	ДобавитьСобытиеИВыполнить("set_map_mode", вогГеокодированиеСервер.ПолучитьСтрокуJSON(Новый Структура("mode", РежимКарты)));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПолигоныНаКарту(Данные) Экспорт 
	
	ДобавитьСобытиеИВыполнить("add_polygons_to_map", вогГеокодированиеСервер.ПолучитьСтрокуJSON(Данные));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстОтметкиНаКарте(Текст) Экспорт 
	
	ДобавитьСобытиеИВыполнить("set_placemark_caption", вогГеокодированиеСервер.ПолучитьСтрокуJSON(Новый Структура("caption", Текст)));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСобытиеИВыполнить(ИмяФункции, Параметр, Асинхронно=Ложь) Экспорт
	
	СтрокаСобытия = ВыполняемыеСобытия.Добавить();
	
	СтрокаСобытия.ИмяФункции = ИмяФункции;
	СтрокаСобытия.Параметр = Параметр;
	СтрокаСобытия.Асинхронно = Асинхронно; // пока не работает в JS
	
	ВыполнитьОбработкуСобытий();

КонецПроцедуры

&НаКлиенте
Функция ВыполнитьФункциюHTML(ИмяФункции, Параметр, Асинхронно=Ложь) Экспорт
	
	Если НЕ ОбъектГотов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Асинхронно Тогда
		ДИВ = Элементы.Карта.Документ.getElementById("eval_async");
	Иначе 
		ДИВ = Элементы.Карта.Документ.getElementById("eval");
	КонецЕсли;
	
	ДИВ.innerHTML = Параметр;
	
	ДИВ.setAttribute("function_name", ИмяФункции);
	ДИВ.click();
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область СлужебныеПроцудурыИФункции

&НаКлиенте
Процедура ОчиститьИсториюПоиска()
	
	Объект.ТаблицаАдресов.Очистить();
	Объект.ТаблицаОрганизаций.Очистить();
	
КонецПроцедуры

Процедура НачальноеЗаполнение()
	
	Если СтрНачинаетсяС(ИмяФормы, "ВнешняяОбработка") Тогда
		
		ОбъектОбработки = РеквизитФормыВЗначение("Объект");
		
		ТекстДокумента = ОбъектОбработки.ПолучитьМакет("Документ").ПолучитьТекст();
		
	Иначе 
		
		ТекстДокумента = Обработки.вогГеокодирование.ПолучитьМакет("Документ").ПолучитьТекст();
		
	КонецЕсли;
	
	// ++ Тищенко В.В. 14.01.2019
	// Подстановка ключа в макет
	
	ЯндексКлючJavaAPI 	= вогГеокодированиеВызовСервера.ПолучитьЯндексКлючьJava();
	ТекстДокумента 		= СтрЗаменить(ТекстДокумента,"<ваш API-ключ>",ЯндексКлючJavaAPI);
	
	// -- Тищенко В.В.
	
	Объект.Карта = ТекстДокумента;
	
	Если Параметры.Свойство("Полигоны") Тогда
		
		вогГеокодированиеСервер.РазвернутьДанныеПоПолигонам(Объект.Полигоны, Параметры.Полигоны, Истина); 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискПоАдресуИЗаполнениеРезультата()
	
	// ++ Тищенко В.В. 22.01.2019
	// Добавил  признак искать по организациям	
	СтруктураОтвета = вогГеокодированиеСервер.ПолучитьДанныеГеокодированияПоАдресу(Объект.Адрес,,НЕ ПоискПоОрганизациям,КоличествоОтветов);
	// -- Тищенко В.В. 
	
	Если НЕ СтруктураОтвета.Успешно Тогда
		Сообщить(СтруктураОтвета.Результат);
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр из СтруктураОтвета.Результат Цикл 
		
		НоваяСтрокаАдрес = Объект.ТаблицаАдресов.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаАдрес, стр);
		
		ДобавитьОрганизацииВСписок(Стр.Компании, НоваяСтрокаАдрес.ИД);
		
		НоваяСтрокаАдрес.Организаций = Стр.Компании.Количество();
		
		Элементы.ТаблицаАдресов.ТекущаяСтрока = НоваяСтрокаАдрес.ПолучитьИдентификатор();
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СкрытьПанельАдресов 		= Истина;
	КоличествоОтветов			= 5;
	//ПоискПоОрганизациям 		= Истина;
	
	Если Параметры.Свойство("СкрытьПанельАдресов") Тогда
		СкрытьПанельАдресов = Параметры.СкрытьПанельАдресов;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимПоискОбъектов") Тогда
		РежимПоискОбъектов = Параметры.РежимПоискОбъектов;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимРаботы") Тогда
		РежимРаботы = Параметры.РежимРаботы;
	КонецЕсли;
	
	Если Параметры.Свойство("ПоискПоОрганизациям") Тогда
		ПоискПоОрганизациям = Параметры.ПоискПоОрганизациям;
	КонецЕсли;
	
	Если Параметры.Свойство("КоличествоОтветов") Тогда
		КоличествоОтветов = Параметры.КоличествоОтветов;
	КонецЕсли;
	
	РежимВыбора 	= Параметры.РежимВыбора;
	
	Объект.Адрес 	= Параметры.Адрес;
	
	
	Если Параметры.Свойство("ЦентрКарты") Тогда
		ЦентрКартыШирота = Параметры.ЦентрКарты.Широта;
		ЦентрКартыДолгота = Параметры.ЦентрКарты.Долгота;
	КонецЕсли;

	Если Параметры.Свойство("МасштабКарты") Тогда
		МасштабКарты = Параметры.МасштабКарты;		
	КонецЕсли;

	//РежимРаботы = "Полигоны"; // ТЕСТ
	//РежимВыбора = Истина; // ТЕСТ
	
	Если РежимРаботы = "Полигоны" Тогда
				
		ПоискПоОрганизациям = Ложь;		
		РежимПоискОбъектов = Ложь;
		СкрытьПанельАдресов = Истина;
		Элементы.ФормаПоискОрганизаций.Видимость = Ложь;
		Элементы.ФормаПанельПоиска.Видимость = Ложь;
		
	КонецЕсли;
	
	// + Тищенко В.В.
	ФормаВвода3в1 				= Параметры.ФормаВвода3в1;
	Если ФормаВвода3в1 Тогда
		ПараметрыФормыВвода3в1 	= ЗначениеВСтрокуВнутр(Параметры.ПараметрыФормыВвода3в1);
	КонецЕсли;
	
	ФормаБыстрогоВвода = Параметры.ФормаБыстрогоВвода;
	// - Тищенко В.В.
	
	НачальноеЗаполнение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Объект.Адрес) Тогда
		//ВыполнитьПоискНаКарте(Объект.Адрес);
		ПоискПоАдресу(Неопределено);
	КонецЕсли;
	
	Если РежимРаботы = "Полигоны" Тогда
		УстановитьРежимРаботыКарты("polygon");
	Иначе 
		УстановитьРежимРаботыКарты("biz");		
	КонецЕсли;
	
	Если Объект.Полигоны.Количество() Тогда
		ДанныеПолигонов = ПолучитьСоответствиеПолигонов();
		ДобавитьПолигоныНаКарту(ДанныеПолигонов);
	КонецЕсли;
	
	Если РежимПоискОбъектов Тогда			
		УстановитьРежимПоискаГео(РежимПоискОбъектов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЦентрКартыШирота) И ЗначениеЗаполнено(ЦентрКартыДолгота) Тогда
		ЦентроватьПоКоординатам(ЦентрКартыШирота, ЦентрКартыДолгота);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МасштабКарты) Тогда
		УстановитьМасштабКарты(МасштабКарты);
	КонецЕсли;
	
	// + Тищенко В.В.
	Если ФормаВвода3в1 Тогда
		ПанельПоиска(Неопределено);
	КонецЕсли;
	// - Тищенко В.В.
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ПоискОрганизаций(Команда)
	
	ПоискПоОрганизациям = НЕ ПоискПоОрганизациям;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоАдресу(Команда)
	
	ОчиститьИсториюПоиска();

	ВыполнитьПоискПоАдресуИЗаполнениеРезультата();
	
	УстановитьОтборАдресов();
	
	ОчиститьОбъектыНаКарте();
	
	ВывестиОрганизацииПоАдресамВКластерОбъектов(Объект.ТаблицаАдресов);
		
	Если Объект.ТаблицаАдресов.Количество() Тогда
		
		СтркаАдреса = Объект.ТаблицаАдресов.Получить(0);	
		ЦентроватьПоКоординатам(СтркаАдреса.Широта, СтркаАдреса.Долгота);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельПоиска(Команда)
	
	СкрытьПанельАдресов = НЕ СкрытьПанельАдресов;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭлемент(Команда)
	
	ВыполнитьВыборЗначения();
		
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ЭЛЕМЕНТОВ_ФОРМЫ

&НаКлиенте
Процедура ТаблицаАдресовПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборАдресов();
	
	ПодключитьОбработчикОжидания("УстеновеитьЦентринованиПоСтрокеАдреса", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАдресовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
		
	ТекДанные = Объект.ТаблицаАдресов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	// { VOG RMV 2019-03-26 task 158
	//// ++ Тищенко В.В. 31.01.2019
	//// Дополнительная проверка 
	//Если ТекДанные.Комментарий <> "Точное соответствие" Тогда
	//	ТекстПердупреждения = НСтр("ru = 'Можно выбирать только Точное соответствие'");	
	//	ПоказатьПредупреждение(Неопределено,ТекстПердупреждения);
	//	Возврат;	
	//КонецЕсли;
	//
	//// -- Тищенко В.В. 
	
	// Дополнительная проверка 
	Если ТекДанные.Комментарий <> "Точное соответствие" 
		И ТекДанные.Комментарий <> "Нет номера дома" Тогда
		ТекстПердупреждения = НСтр("ru = 'Можно выбирать только ""Точное соответствие"" либо ""Нет номера дома""'");	
		ПоказатьПредупреждение(Неопределено,ТекстПердупреждения);
		Возврат;	
	КонецЕсли;
	// } VOG RMV 2019-03-26 task 158
	
	// + Тищенко В.В.
	Если ФормаВвода3в1 Тогда
		Если ЗначениеЗаполнено(ПараметрыФормыВвода3в1) Тогда
			ПараметрыФормы = вогОбщегоНазначенияВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(ПараметрыФормыВвода3в1);
			ПараметрыФормы.Вставить("Месторасположение",ТекДанные.Представление);
			
			ПараметрыФормы.Вставить("Широта",ТекДанные.Широта);
			ПараметрыФормы.Вставить("Долгота",ТекДанные.Долгота);
			
			ОткрытьФорму("Справочник.вогТорговыеТочки.Форма.вогФормаБыстрогоВвода",ПараметрыФормы);
			Закрыть();
			Возврат;
		КонецЕсли;
	ИначеЕсли ФормаБыстрогоВвода Тогда
		
		Закрыть(Новый Структура("ПредставлениеАдреса",ТекДанные.Представление));
		Возврат;
		
	КонецЕсли;
	// - Тищенко В.В.

	ВыполнитьВыборЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура УстеновеитьЦентринованиПоСтрокеАдреса()
	
	ТекСтрока = Элементы.ТаблицаАдресов.ТекущаяСтрока;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Объект.ТаблицаАдресов.НайтиПоИдентификатору(ТекСтрока);
	
	Если ЗначениеЗаполнено(ТекДанные.Широта) И ЗначениеЗаполнено(ТекДанные.Долгота) Тогда
		ЦентроватьПоКоординатам(ТекДанные.Широта, ТекДанные.Долгота,ТекДанные.Представление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОрганизацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаОрганизацийСайт" Тогда
		
		Если ВыбраннаяСтрока = Неопределено Тогда
			Возврат;	
		КонецЕсли;
		
		ТекДанные = Объект.ТаблицаОрганизаций.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ЗначениеЗаполнено(ТекДанные.Сайт) Тогда
			
			ОписаниеОповещенияОписаниеОткрытияСайта = Новый ОписаниеОповещения("ОписаниеОповещенияОписаниеОткрытияСайта", ЭтотОбъект, ТекДанные.Сайт);
			
			ПоказатьВопрос(ОписаниеОповещенияОписаниеОткрытияСайта, "Открыть сайт?", РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ИмяОперации = ДанныеСобытия.Event.propertyName;
		
	Если ИмяОперации = "" Тогда 
		//Если ДанныеСобытия.Свойство("Href") И НЕ ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		//	СтандартнаяОбработка = Ложь;
		//КонецЕсли;
		Возврат;
	КонецЕсли; 
	
	ДанныеОперации = ДанныеСобытия.Event.data;

	Если ИмяОперации = "ФункцииЗапуска" Тогда 
		
		Если НЕ ОбъектГотов Тогда
			ОбъектГотов = Истина;
			ВыполнитьОбработкуСобытий();
		КонецЕсли;
		
	ИначеЕсли ИмяОперации = "ПоискПоКликуНаКарте" Тогда 
		
		Данные = вогГеокодированиеСервер.ПолучитьЗначениеИзОтветаJSON(ДанныеОперации);
		
		ОбработатьОтветГоеКодераПоЩелчку(Данные);
		
	ИначеЕсли ИмяОперации = "ИзмененыПараметрыПолигона" Тогда
		
		Данные = вогГеокодированиеСервер.ПолучитьЗначениеИзОтветаJSON(ДанныеОперации);
		
		ОбработатьДанныеПолигонов(Данные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуСобытий()
	
	Если НЕ ОбъектГотов Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокУдаления = Новый Массив;
	
	Для Каждого стр Из ВыполняемыеСобытия Цикл 
		
		Если ВыполнитьФункциюHTML(стр.ИмяФункции, стр.Параметр, стр.Асинхронно) Тогда
			МассивСтрокУдаления.Добавить(стр);
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого стр Из МассивСтрокУдаления Цикл 
		
		ВыполняемыеСобытия.Удалить(стр);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоОрганизациямПриИзменении(Элемент)
	
	ОчиститьОбъектыНаКарте();
	ОчиститьИсториюПоиска();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область Описания

&НаКлиенте
Процедура ОписаниеОповещенияЗаглушка(Значение, Дополнитльеное) Экспорт
КонецПроцедуры // ОписаниеОповещенияЗаглущка()

&НаКлиенте
Процедура ОписаниеОповещенияОписаниеОткрытияСайта(Ответ, Доп) Экспорт
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЗаглушка = Новый ОписаниеОповещения("ОписаниеОповещенияЗаглушка", ЭтаФорма);
	НачатьЗапускПриложения(ОписаниеЗаглушка, Доп);
	
КонецПроцедуры // ОписаниеОповещенияОписаниеОткрытияСайта

#КонецОбласти

#Область СЛУЖЕБНЫЕ

&НаКлиенте
Процедура ОбработатьПолучениеПолигоновТочки(Данные)
	
	Объект.ПолигоныТочки.Очистить();
	
	НомерПолигона = 1;
	
	Для Каждого СтрОбъект Из Данные Цикл 
		
		НоваяСтрока = Объект.ПолигоныТочки.Добавить();
		
		НоваяСтрока.Полигон = СтрОбъект.Получить("name") 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПолигонов(Данные)
	
	Объект.Полигоны.Очистить();
	
	НомерПолигона = 1;
	
	Для Каждого СтрОбъект Из Данные Цикл 
		
		Конутры 		= СтрОбъект.Получить("coords");
		Подсказка 		= СтрОбъект.Получить("hint");
		Наименование 	= СтрОбъект.Получить("balloon");
		
		Если Конутры = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НомерКонтура = 1;
		
		Для Каждого Контрур из Конутры Цикл 
			
			Для Каждого КоординатаКонтура из Контрур Цикл 
				
				НоваяСтрока = Объект.Полигоны.Добавить();
				НоваяСтрока.НомерПолигона = НомерПолигона;
				НоваяСтрока.Контур = НомерКонтура;
				НоваяСтрока.Широта = КоординатаКонтура.Получить(1);
				НоваяСтрока.Долгота = КоординатаКонтура.Получить(0);
				
				Если ЗначениеЗаполнено(Наименование) Тогда
					НоваяСтрока.Наименование = Наименование;
				КонецЕсли;
				
			КонецЦикла;
			
			НомерКонтура = НомерКонтура + 1;
			
		КонецЦикла;
		
		НомерПолигона = НомерПолигона + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыборЗначения()
	
	Если РежимРаботы = "Полигоны" Тогда
		
		Закрыть(ПолучитьСоответствиеПолигонов());
		
	Иначе 
		
		Если Элементы.ТаблицаАдресов.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекДанные = Объект.ТаблицаАдресов.НайтиПоИдентификатору(Элементы.ТаблицаАдресов.ТекущаяСтрока);
		
		СтруктураВозврата = Новый Структура;
		
		СтруктураВозврата.Вставить("Адрес", 	ТекДанные.Представление);
		СтруктураВозврата.Вставить("Широта", 	ТекДанные.Широта);
		СтруктураВозврата.Вставить("Долгота", 	ТекДанные.Долгота);
		
		СтруктураВозврата.Вставить("Индекс", 	ТекДанные.Индекс);
		
		СтруктураВозврата.Вставить("Город", 	ТекДанные.Город);
		СтруктураВозврата.Вставить("Область", 	ТекДанные.Область);
		СтруктураВозврата.Вставить("Улица", 	ТекДанные.Улица);
		СтруктураВозврата.Вставить("Округ", 	ТекДанные.Округ);
		СтруктураВозврата.Вставить("Дом", 		ТекДанные.Дом);
		СтруктураВозврата.Вставить("Район", 	ТекДанные.Район);
		
		Закрыть(СтруктураВозврата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСоответствиеПолигонов()

	Возврат ПолучитьСоответствиеПолигоновСервер();
	
КонецФункции // ПолучитьДанныеПолигонов()

Функция ПолучитьСоответствиеПолигоновСервер()

	Возврат вогГеокодированиеСервер.ПолучитьСоответствиеПолигонов(Объект.Полигоны.Выгрузить());
	
КонецФункции // ПолучитьДанныеПолигонов()

&НаКлиенте
Процедура ВывестиОрганизацииПоАдресамВКластерОбъектов(ТаблицаАдресов)
	
	ДанныеКластера = Новый Массив;
	
	HTMLРазделитель = "<br>";
	
	Для Каждого СтрАдрес ИЗ ТаблицаАдресов Цикл 
		
		НайденныеОрганизации 	= Объект.ТаблицаОрганизаций.НайтиСтроки(Новый Структура("ИД", СтрАдрес.ИД));
		СтрАдрес.Организаций	= НайденныеОрганизации.Количество();
		
		Для Каждого СтрОрганизация ИЗ НайденныеОрганизации Цикл 
			
			СтрокаЭлемента = Новый Структура;
			
			МассивКоординат = Новый Массив;
			МассивКоординат.Добавить(СтрАдрес.Долгота);
			МассивКоординат.Добавить(СтрАдрес.Широта);
			
			СтрокаЭлемента.Вставить("coords", МассивКоординат);
			СтрокаЭлемента.Вставить("name", СтрОрганизация.Наименование);
			
			Текст = СтрОрганизация.Категории + HTMLРазделитель +					
					СтрАдрес.Представление + HTMLРазделитель +
					СтрАдрес.Комментарий + HTMLРазделитель +
					СтрОрганизация.Сайт+ HTMLРазделитель +
					СтрОрганизация.Телефон+ HTMLРазделитель;
					
			СтрокаЭлемента.Вставить("text", Текст);
			
			ДанныеКластера.Добавить(СтрокаЭлемента);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДобавитьКластерОбъектов(ДанныеКластера);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОрганизацииВСписок(СписокОрганизаций, ИД=Неопределено)
	
	Для Каждого стрКомпания из СписокОрганизаций Цикл 
		
		НоваяСтрокаКомпания = Объект.ТаблицаОрганизаций.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКомпания, стрКомпания);
		
		Если ИД = Неопределено Тогда
			НоваяСтрокаКомпания.ИД = НоваяСтрокаКомпания.Адрес;
		Иначе 
			НоваяСтрокаКомпания.ИД = ИД;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиОбъектыПоПолученномуАдресу(СтруктураАдреса, ОбластьПоиска=Неопределено, КоординатыЩелчка=Неопределено)
	
	АдресПоиска = СтруктураАдреса.Дом;
	
	ПоискСуществующихСтрок = Объект.ТаблицаАдресов.НайтиСтроки(Новый Структура("Представление", АдресПоиска));
	
	Для Каждого стр из ПоискСуществующихСтрок Цикл 
		
		Элементы.ТаблицаАдресов.ТекущаяСтрока = стр.ПолучитьИдентификатор();
		
		УстановитьОтборАдресов();
		
		УстановитьТекстОтметкиНаКарте(стр.ПрефиксТекста + АдресПоиска);
		
		Возврат;
	КонецЦикла;
	
	НоваяСтрока = ДобавитьСтрокуАдреса(СтруктураАдреса, КоординатыЩелчка, ,"Точное соответствие");

	Если ПоискПоОрганизациям Тогда
		
		МассивКомпаний = Новый Массив;
		
		вогГеокодированиеСервер.ДобавитьИнформацияПоКомпаниям(АдресПоиска, ОбластьПоиска, МассивКомпаний);
		
		НоваяСтрока.Организаций = МассивКомпаний.Количество();
		
		Если МассивКомпаний.Количество()=0 Тогда
			НоваяСтрока.ПрефиксТекста = "Не найдено организаций.";
		Иначе 
			Объект.ТаблицаАдресов.Удалить(НоваяСтрока);
		КонецЕсли;
		
		УстановитьТекстОтметкиНаКарте(НоваяСтрока.ПрефиксТекста + АдресПоиска);			

		// ДОБАВЛЯЕМ АДРЕСА И ОРГАНИЗАЦИИ ПОД НИХ
		Для каждого стр из МассивКомпаний Цикл 
			
			ПоискАдреса = Объект.ТаблицаАдресов.НайтиСтроки(Новый Структура("Представление", стр.Адрес));
			
			Если ПоискАдреса.Количество()=0 Тогда
				
				СтруктураАдреса = Новый Структура;
				СтруктураАдреса.Вставить("Представление", стр.Адрес);
				
				НоваяСтрока = ДобавитьСтрокуАдреса(СтруктураАдреса,, стр.Адрес,  "Адрес организации");
				
				ДанныеГеоКода = вогГеокодированиеСервер.ПолучитьДанныеГеокодированияПоАдресу(стр.Адрес);
				
				Если НЕ ДанныеГеоКода.Успешно Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка получения координат по адресу " + СокрЛП(ДанныеГеоКода.Результат));
					Продолжить;
				КонецЕсли;
				
				Если ДанныеГеоКода.Результат.Количество() Тогда
					СтрокаДанных =  ДанныеГеоКода.Результат.Получить(0);
					НоваяСтрока.Широта = СтрокаДанных.Широта;
					НоваяСтрока.Долгота = СтрокаДанных.Долгота;
				Иначе 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка получения координат по адресу " + СокрЛП(НоваяСтрока.Представление));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДобавитьОрганизацииВСписок(МассивКомпаний);
		
		ВывестиОрганизацииПоАдресамВКластерОбъектов(Объект.ТаблицаАдресов);
		
		УстановитьОтборАдресов();
		
	Иначе 
		УстановитьТекстОтметкиНаКарте(НоваяСтрока.ПрефиксТекста + АдресПоиска);			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьСтрокуАдреса(СтруктураАдреса, Координаты=Неопределено, ИД=Неопределено, Комментарий="Точка на карте")
	
	НоваяСтрока 						= Объект.ТаблицаАдресов.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураАдреса);
	
	Если ИД=Неопределено Тогда
		НоваяСтрока.ИД						= СокрЛП(Новый УникальныйИдентификатор);
	Иначе 
		НоваяСтрока.ИД = ИД;
	КонецЕсли;
	НоваяСтрока.Комментарий				= Комментарий;
	
	Если НЕ Координаты = Неопределено Тогда
		НоваяСтрока.Долгота = Координаты.Получить(0);
		НоваяСтрока.Широта = Координаты.Получить(1);
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтветГоеКодераПоЩелчку(ДанныеОтвета)
	
	ОчиститьИсториюПоиска();
	ОчиститьОбъектыНаКарте();
	
	Если ДанныеОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресПоиска = Неопределено;
	
	ЕстьУказаниеДома = Ложь;
	
	КоординатыЩелчка 	= ДанныеОтвета.Получить("coords");
	СписокОбъектов 		= ДанныеОтвета.Получить("data");
	ОбластьПОиска		= ДанныеОтвета.Получить("myBounds");
	ПолигоныСодержания	= ДанныеОтвета.Получить("cont_polygons");
	
	ОбработатьПолучениеПолигоновТочки(ПолигоныСодержания);
	
	СтруктураАдреса = ПолучитьСтруктуруАдресаПоДанным(СписокОбъектов);

	Если ЗначениеЗаполнено(СтруктураАдреса.Дом) Тогда
		ЕстьУказаниеДома = Истина;
	КонецЕсли;
		
	Если ЕстьУказаниеДома Тогда
		
		Если ЗначениеЗаполнено(СтруктураАдреса.Дом) Тогда
			НайтиОбъектыПоПолученномуАдресу(СтруктураАдреса, ОбластьПОиска, КоординатыЩелчка);
		КонецЕсли;
		
		Если ПоискПоОрганизациям Тогда		
			СкрытьПанельАдресов = Ложь;
		КонецЕсли;
		
	Иначе 
		
		НоваяСтрока = ДобавитьСтрокуАдреса(СтруктураАдреса, КоординатыЩелчка,, "Нет номера дома");
		
		УстановитьТекстОтметкиНаКарте("Нет номера дома");
		
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруАдресаПоДанным(СписокОбъектов)
	
	СтруктураАдреса = Новый Структура("Город, Область, Улица, Дом, Представление, Район, Округ");
	
	Для Каждого Стр ИЗ СписокОбъектов Цикл 
		
		Если СтруктураАдреса.Представление = Неопределено Тогда
			СтруктураАдреса.Представление = Стр.Получить("text");
		КонецЕсли;
		
		Тип = Стр.Получить("kind");
		
		Если НРег(Тип) = НРег("house") Тогда
			СтруктураАдреса.Дом = Стр.Получить("name");
		КонецЕсли;
		
		Если НРег(Тип) = НРег("locality") Тогда
			СтруктураАдреса.Город = Стр.Получить("name");
		КонецЕсли;
		
		Если НРег(Тип) = НРег("district") Тогда
			СтруктураАдреса.Район = Стр.Получить("name");
		КонецЕсли;
		
		Если НРег(Тип) = НРег("street") Тогда
			СтруктураАдреса.Улица = Стр.Получить("name");
		КонецЕсли;
		
		Если НРег(Тип) = НРег("area") Тогда
			СтруктураАдреса.Округ = Стр.Получить("name");
		КонецЕсли;
		
		Если НРег(Тип) = НРег("province") И НЕ ЗначениеЗаполнено(СтруктураАдреса.Область) Тогда
			СтруктураАдреса.Область = Стр.Получить("name");
		КонецЕсли;

	КонецЦикла;
	
	Возврат СтруктураАдреса;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступность()

	Элементы.ГруппаЛевая.Видимость 				= НЕ СкрытьПанельАдресов;
	Элементы.ФормаПанельПоиска.Пометка 			= НЕ СкрытьПанельАдресов;
	
	Элементы.ФормаПоискОрганизаций.Пометка 		= ПоискПоОрганизациям;
	
	Элементы.ФормаВыбратьЭлемент.Видимость 		= РежимВыбора;
	
	Элементы.ТаблицаАдресовОрганизаций.Видимость = ПоискПоОрганизациям;
	
	Элементы.ТаблицаОрганизаций.Видимость 	= ПоискПоОрганизациям;
		
КонецПроцедуры // УстановитьВидимостьДоступность()

&НаКлиенте
Процедура УстановитьОтборАдресов()
	
	ТекСтрока = Элементы.ТаблицаАдресов.ТекущаяСтрока;
	
	Если ТекСтрока = Неопределено Тогда
		
		КоличествоАдресов = Объект.ТаблицаАдресов.Количество();
		
		Если КоличествоАдресов>0 Тогда
			
			ДанныеОтбора = Объект.ТаблицаАдресов.Получить(КоличествоАдресов-1).ПолучитьИдентификатор();
			
		Иначе 
			
			ДанныеОтбора = "-1";
			
		КонецЕсли;
		
	Иначе 
		
		ТекущиеДанные = Объект.ТаблицаАдресов.НайтиПоИдентификатору(ТекСтрока);
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеОтбора = ТекущиеДанные.ИД;
		
	КонецЕсли;
	
	Если НЕ ДанныеОтбора = "-1" Тогда 
		Элементы.ТаблицаОрганизаций.ОтборСтрок 	= Новый ФиксированнаяСтруктура("ИД", ДанныеОтбора); 		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
