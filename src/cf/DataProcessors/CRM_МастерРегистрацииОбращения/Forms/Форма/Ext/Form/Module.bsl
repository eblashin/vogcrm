
#Область ОтборыСписков

&НаСервере
Процедура ОбработатьВыборкуЗапроса(ВыборкаКлиентов, МассивСсылок = Неопределено, ТЗКлиенты = Неопределено, ТЗКонтакты = Неопределено, Потенциальные = Ложь)
	
	ВеткаКорень = ДеревоПоиска.ПолучитьЭлементы();
	МассивКлиентов = Новый Массив;	
	// сначала ищем среди среди найденных ключевые физ.лица
	Пока ВыборкаКлиентов.Следующий() Цикл
		Если ВыборкаКлиентов.Клиент <> Null Тогда		
			Если ТипЗнч(ВыборкаКлиентов.Клиент) = Тип("СправочникСсылка.Партнеры") 
			И ВыборкаКлиентов.Клиент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда			
				МассивСвязанныхЛиц = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьКонтактныеЛица(ВыборкаКлиентов.Клиент);
				Если МассивСвязанныхЛиц.Количество() > 0 Тогда
					Для Каждого ЭлементМассива Из МассивСвязанныхЛиц Цикл
						МассивКлиентов.Добавить(ЭлементМассива.Владелец);
					КонецЦикла;						
				КонецЕсли;					
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;	
	ВыборкаКлиентов.Сбросить();
	Пока ВыборкаКлиентов.Следующий() Цикл
		Если ВыборкаКлиентов.Клиент <> Null Тогда
			Если МассивКлиентов.Найти(ВыборкаКлиентов.Клиент) <> Неопределено Тогда Продолжить; КонецЕсли;
			СтрокаКлиент = ВеткаКорень.Добавить();
			СтрокаКлиент.Ссылка = ВыборкаКлиентов.Клиент;
			СтрокаКлиент.Объект = ?(ВыборкаКлиентов.Клиент = "Потенциальный", НСтр("ru = 'Потенциальные клиенты'"), ВыборкаКлиентов.Клиент.Наименование);
			СтрокаКлиент.Соответствует = Потенциальные ИЛИ ?(ЗначениеЗаполнено(МассивСсылок), МассивСсылок.Найти(ВыборкаКлиентов.Клиент) <> Неопределено, ?(ЗначениеЗаполнено(ТЗКлиенты), ТЗКлиенты.НайтиСтроки(Новый Структура("Ссылка, Соответствует", ВыборкаКлиентов.Клиент, Истина)).Количество() > 0, Ложь));  								
			// Проверка: является ли клиент ключевым физ. лицом
			Если ТипЗнч(ВыборкаКлиентов.Клиент) = Тип("СправочникСсылка.Партнеры") 
			И ВыборкаКлиентов.Клиент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
				СтрокаКлиент.Объект = СтрокаКлиент.Объект + Нстр("ru = ' (ключевое физ. лицо)'");
				// Отдельный механизм построения дерева поиска
				МассивСвязанныхЛиц = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьКонтактныеЛица(ВыборкаКлиентов.Клиент);
				Если МассивСвязанныхЛиц.Количество() > 0 Тогда
					Для Каждого ЭлементМассива Из МассивСвязанныхЛиц Цикл
						МассивКЛ = сфпСофтФонПроСервер.сфпПолучитьВсехКонтактныхЛицПартнера(ЭлементМассива.Владелец);
						ВеткаКлиент = СтрокаКлиент.ПолучитьЭлементы();
						СтрокаКонтакт = ВеткаКлиент.Добавить();
						СтрокаКонтакт.Ссылка = ЭлементМассива.Владелец;
						СтрокаКонтакт.Объект = ЭлементМассива.Владелец.Наименование;
						СтрокаКонтакт.Соответствует = ?(ЗначениеЗаполнено(МассивСсылок), МассивСсылок.Найти(ЭлементМассива.Владелец) <> Неопределено, ?(ЗначениеЗаполнено(ТЗКлиенты), ТЗКлиенты.НайтиСтроки(Новый Структура("Ссылка, Соответствует", ЭлементМассива.Владелец, Истина)).Количество() > 0, Ложь));
						ВеткаКонтакт = СтрокаКонтакт.ПолучитьЭлементы();
						Для Каждого КонтактноеЛицо Из МассивКЛ Цикл
							СтрокаКЛ = ВеткаКонтакт.Добавить();
							СтрокаКЛ.Ссылка = КонтактноеЛицо;
							СтрокаКЛ.Объект = КонтактноеЛицо.Наименование;
							Если ЗначениеЗаполнено(ТЗКонтакты) Тогда
								Если ТЗКонтакты.Найти(КонтактноеЛицо, "Контакт") <> Неопределено Тогда
									СтрокаКЛ.Соответствует	= Истина;
								КонецЕсли;																			
							ИначеЕсли ЗначениеЗаполнено(МассивСсылок) Тогда									
								Если МассивСсылок.Найти(КонтактноеЛицо) <> Неопределено Тогда
									СтрокаКЛ.Соответствует	= Истина;									
								КонецЕсли;
							КонецЕсли;
							МассивИнтересов = сфпПолучитьМассивИнтересов(КонтактноеЛицо);
							ВеткаИнтерес = СтрокаКЛ.ПолучитьЭлементы();
							Для Каждого Интерес Из МассивИнтересов Цикл
								СтрокаИнтерес 			= ВеткаИнтерес.Добавить();
								СтрокаИнтерес.Ссылка 	= Интерес.Ссылка;
								СтрокаИнтерес.Объект 	= Интерес.Тема;
								СтрокаИнтерес.Соответствует = ?(ЗначениеЗаполнено(МассивСсылок), МассивСсылок.Найти(Интерес.Ссылка) <> Неопределено, Ложь);								
							КонецЦикла;								
						КонецЦикла;							
					КонецЦикла;
					Продолжить;
				Иначе
					ВыборкаКонтактов = ВыборкаКлиентов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				КонецЕсли;					
			Иначе	
				ВыборкаКонтактов = ВыборкаКлиентов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			КонецЕсли;				
		КонецЕсли;
		ВеткаКлиент = СтрокаКлиент.ПолучитьЭлементы();
		ПрочиеКонтакты = Ложь;
		Пока ВыборкаКонтактов.Следующий() Цикл
			Если ВыборкаКонтактов.Контакт <> null Тогда
				Если ВыборкаКонтактов.Контакт = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка() Тогда
						КонтактСоответствует = Ложь;
						СтрокаКонтакт = ВеткаКлиент.Добавить();
						СтрокаКонтакт.Объект = НСтр("ru = '<Без контакта>'");
				ИначеЕсли ЗначениеЗаполнено(ТЗКонтакты) Тогда
					Если ТЗКонтакты.Найти(ВыборкаКонтактов.Контакт, "Контакт") <> Неопределено Тогда
						КонтактСоответствует = Истина;
						СтрокаКонтакт = ВеткаКлиент.Добавить();
					Иначе
						КонтактСоответствует = Ложь;
						Если НЕ ПрочиеКонтакты Тогда
							КонтактСоответствует = Ложь;
							ПрочиеКонтакты = Истина;
							СтрокаПрочие = ВеткаКлиент.Вставить(0);
							ВеткаПрочие = СтрокаПрочие.ПолучитьЭлементы();
							СтрокаПрочие.Объект = НСтр("ru = 'Прочие контакты и интересы'");
							СтрокаПрочие.Ссылка = "ПрочиеКонтакты";
						КонецЕсли;
						СтрокаКонтакт = ВеткаПрочие.Добавить();
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(МассивСсылок) Тогда
					Если МассивСсылок.Найти(ВыборкаКонтактов.Контакт) <> Неопределено Тогда
						КонтактСоответствует = Истина;
						СтрокаКонтакт = ВеткаКлиент.Добавить();
					Иначе
						КонтактСоответствует = Ложь;
						Если НЕ ПрочиеКонтакты Тогда
							КонтактСоответствует = Ложь;
							ПрочиеКонтакты = Истина;
							СтрокаПрочие = ВеткаКлиент.Добавить();
							ВеткаПрочие = СтрокаПрочие.ПолучитьЭлементы();
							СтрокаПрочие.Объект = НСтр("ru = 'Прочие контакты и интересы'");
							СтрокаПрочие.Ссылка = "ПрочиеКонтакты";
						КонецЕсли;
						СтрокаКонтакт = ВеткаПрочие.Добавить();
					КонецЕсли;
				Иначе
					КонтактСоответствует = Ложь;
					СтрокаКонтакт = ВеткаКлиент.Добавить();
				КонецЕсли;
				
				СтрокаКонтакт.Ссылка = ВыборкаКонтактов.Контакт;
				Если Не ЗначениеЗаполнено(СтрокаКонтакт.Объект) Тогда
					СтрокаКонтакт.Объект = ВыборкаКонтактов.Контакт.Наименование;
				КонецЕсли;
				СтрокаКонтакт.Соответствует = Потенциальные ИЛИ КонтактСоответствует;
				ВыборкаИнтересов = ВыборкаКонтактов.Выбрать();
				ВеткаКонтакт = СтрокаКонтакт.ПолучитьЭлементы();
				Пока ВыборкаИнтересов.Следующий() Цикл
					Если ВыборкаИнтересов.Интерес <> Null Тогда
						СтрокаИнтерес = ВеткаКонтакт.Добавить();
						СтрокаИнтерес.Ссылка = ВыборкаИнтересов.Интерес;
						Если ТипЗнч(ВыборкаИнтересов.Интерес) = Тип("ДокументСсылка.CRM_Интерес") Тогда
							СтрокаИнтерес.Объект = ВыборкаИнтересов.Интерес.Тема;
						Иначе
							СтрокаИнтерес.Объект = ВыборкаИнтересов.Интерес.Наименование;
						КонецЕсли;
						//СтрокаИнтерес.Соответствует = Потенциальные ИЛИ ?(ЗначениеЗаполнено(МассивСсылок), МассивСсылок.Найти(ВыборкаИнтересов.Интерес) <> Неопределено, СтрокаКлиент.Соответствует ИЛИ СтрокаКонтакт.Соответствует);
						СтрокаИнтерес.Соответствует = ?(ЗначениеЗаполнено(МассивСсылок), МассивСсылок.Найти(ВыборкаИнтересов.Интерес) <> Неопределено, Ложь);
						Если ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
							ВыбранПотенциальныйКлиент = (ВыборкаКлиентов.Клиент = "Потенциальный");
							ИнформацияПоИнтересуСсылка = ВыборкаИнтересов.Интерес;
							Если ВыборкаКлиентов.Клиент = "Потенциальный" Тогда
								ИнформацияПоИнтересуПотенциальныйКлиент = ИнформацияПоИнтересуСсылка.ПотенциальныйКлиент;
							Иначе
								Если ТипЗнч(ИнформацияПоИнтересуСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
									ИнформацияПоИнтересуКлиент = ИнформацияПоИнтересуСсылка.CRM_Партнер;
									ИнформацияПоИнтересуКонтактноеЛицо = ИнформацияПоИнтересуСсылка.CRM_КонтактноеЛицо;
								Иначе
									ИнформацияПоИнтересуКлиент = ИнформацияПоИнтересуСсылка.Партнер;
									ИнформацияПоИнтересуКонтактноеЛицо = ИнформацияПоИнтересуСсылка.КонтактноеЛицо;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаАвтопереход(РезультатЗапроса)
	
	// проверка на автопереход
	Если РезультатЗапроса.Пустой() Тогда
		ИнформацияПоИнтересуНайденоИнтересов = 0;
		РежимВводаОбращения = "НовыйКонтакт_3";
		Элементы.СтраницаПринятьОбращение.Видимость = Истина;
		Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПринятьОбращение;
		ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: Новый потенциальный клиент и интерес'");
		Возврат;
	Иначе 
		ВыборкаКлиентовДерево = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаКлиентовДерево.Строки.Количество() = 1 И ВыборкаКлиентовДерево.Строки[0].Интерес = 1 Тогда
			ИнформацияПоИнтересуНайденоИнтересов = 1;
			РежимВводаОбращения = "ТекущийИнтерес_1";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеПоПереданнымСсылкам(МассивСсылок)
	
	ДеревоПоиска.ПолучитьЭлементы().Очистить();
	ЗаполнитьПанельИнформацииПоДанным(Неопределено);
	
	НоваяСтрока = ДеревоПоиска.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Объект = НСтр("ru = 'Создать: Клиента / Потенциального клиента / Контакт / Интерес'");
	НоваяСтрока.ССылка = "НовыйКлиент";
	
	МассивКлиентов 				= Новый Массив;
	МассивПотенциальныхКлиентов = Новый Массив;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
			МассивКлиентов.Добавить(Ссылка);
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Если МассивКлиентов.Найти(Ссылка.Владелец) = Неопределено Тогда
				МассивКлиентов.Добавить(Ссылка.Владелец);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			МассивПотенциальныхКлиентов.Добавить(Ссылка);
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Если ЗначениеЗаполнено(Ссылка.Партнер) Тогда
				Если МассивКлиентов.Найти(Ссылка.Партнер) = Неопределено Тогда
					МассивКлиентов.Добавить(Ссылка.Партнер);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Ссылка.КонтактноеЛицо) Тогда
				Если МассивКлиентов.Найти(Ссылка.КонтактноеЛицо.Владелец) = Неопределено Тогда
					МассивКлиентов.Добавить(Ссылка.КонтактноеЛицо.Владелец);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Ссылка.ПотенциальныйКлиент) Тогда
				Если МассивПотенциальныхКлиентов.Найти(Ссылка.ПотенциальныйКлиент) = Неопределено Тогда
					МассивПотенциальныхКлиентов.Добавить(Ссылка.ПотенциальныйКлиент);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникКЛ.Владелец КАК Клиент,
	|	СправочникКЛ.Ссылка КАК Контакт
	|ПОМЕСТИТЬ ВсеСвязи
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК СправочникКЛ
	|ГДЕ
	|	СправочникКЛ.Владелец В(&МассивКлиентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Потенциальный"",
	|	СправочникПК.Ссылка
	|ИЗ
	|	Справочник.CRM_ПотенциальныеКлиенты КАК СправочникПК
	|ГДЕ
	|	СправочникПК.Ссылка В(&МассивПотенциальныхКлиентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Партнеры.Ссылка, 
    |	ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В(&МассивКлиентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеСвязи.Клиент КАК Клиент,
	|	ВсеСвязи.Контакт КАК Контакт,
	|	ДокИнтерес.Ссылка КАК Интерес
	|ИЗ
	|	ВсеСвязи КАК ВсеСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Интерес КАК ДокИнтерес
	|		ПО (ДокИнтерес.ПотенциальныйКлиент = ВсеСвязи.Контакт
	|				ИЛИ (ВсеСвязи.Клиент = ДокИнтерес.Партнер И ДокИнтерес.КонтактноеЛицо = ВсеСвязи.Контакт)
	|					И НЕ ДокИнтерес.Завершен
	|					И НЕ ДокИнтерес.ПометкаУдаления
	|					И НЕ ДокИнтерес.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ИнтересЗакрыт)
	|					И НЕ ДокИнтерес.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ИнтересПотерян))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВсеСвязи.Клиент,
	|	Интерес УБЫВ,
	|	ВсеСвязи.Контакт
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Интерес)
	|ПО
	|	Клиент,
	|	Контакт";
	
	Запрос.УстановитьПараметр("МассивКлиентов",					МассивКлиентов);
	Запрос.УстановитьПараметр("МассивПотенциальныхКлиентов", 	МассивПотенциальныхКлиентов);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Клиент(-ы) без контактов
	Если РезультатЗапроса.Пустой() И МассивКлиентов.Количество() > 0 Тогда
		ВеткаКорень = ДеревоПоиска.ПолучитьЭлементы();
		Для Каждого ПереданныйКлиент Из МассивКлиентов Цикл 
			СтрокаКлиент = ВеткаКорень.Добавить();
			СтрокаКлиент.Ссылка = ПереданныйКлиент;
			СтрокаКлиент.Объект = ПереданныйКлиент.Наименование;
			СтрокаКлиент.Соответствует = Истина;  
		КонецЦикла;
	Иначе
		ПроверитьНаАвтопереход(РезультатЗапроса);
		ВыборкаКлиентов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ОбработатьВыборкуЗапроса(ВыборкаКлиентов, МассивСсылок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеПоПоиску()
	
	Элементы.ДеревоПоискаОбъект.Заголовок = НСтр("ru = 'Клиент | Контакт | Интерес'");
	
	ДеревоПоиска.ПолучитьЭлементы().Очистить();
	ЗаполнитьПанельИнформацииПоДанным(Неопределено);
	
	ИскатьНаименование = ЗначениеЗаполнено(ПоискКлиентНаименование) И ПоискКлиентНаименованиеИспользовать;
	ИскатьТелефон = ЗначениеЗаполнено(ПоискКлиентТелефон) И ПоискКлиентТелефонИспользовать;
	ИскатьПочту = ЗначениеЗаполнено(ПоискКлиентEmail) И ПоискКлиентEmailИспользовать;
	
	КС = Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная);
	МассивСтрока = Новый Массив;
	МассивСтрока.Добавить(Тип("Строка"));
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповС = Новый ОписаниеТипов(МассивСтрока, , КС);
	ОписаниеТиповБ = Новый ОписаниеТипов(МассивБулево);
	
	КлиентыТЗ = Новый ТаблицаЗначений;
	КлиентыТЗ.Колонки.Добавить("Ссылка", НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
	КлиентыТЗ.Колонки.Добавить("Соответствует", ОписаниеТиповБ);
	КлиентыТЗ.Колонки.Добавить("Объект", ОписаниеТиповС);
	//КлиентыТЗ.Колонки.Добавить("Телефон", ОписаниеТиповС);
	//КлиентыТЗ.Колонки.Добавить("Email", ОписаниеТиповС);
	
	Если (ИскатьПочту ИЛИ ИскатьТелефон)Тогда
		КонтактыПоКИТЗ = Новый ТаблицаЗначений;
		КонтактыПоКИТЗ.Колонки.Добавить("Ссылка");
		КонтактыПоКИТЗ.Колонки.Добавить("Контакт");
		Если ИскатьТелефон Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПартнерыКонтактнаяИнформация.Ссылка,
			|	NULL КАК Контакт
			|ИЗ
			|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
			|ГДЕ
			|	(ПартнерыКонтактнаяИнформация.Представление ПОДОБНО ""%" + ПоискКлиентТелефон + "%""
			|			ИЛИ ПартнерыКонтактнаяИнформация.НомерТелефона ПОДОБНО ""%" + ПоискКлиентТелефон + "%""
			|			ИЛИ ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов ПОДОБНО ""%" + ПоискКлиентТелефон + "%"")
			|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
			|ГДЕ
			|	(КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО ""%" + ПоискКлиентТелефон + "%""
			|			ИЛИ КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона ПОДОБНО ""%" + ПоискКлиентТелефон + "%""
			|			ИЛИ КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефонаБезКодов ПОДОБНО ""%" + ПоискКлиентТелефон + "%"")
			|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = КонтактыПоКИТЗ.Добавить();
				НоваяСтрока.Ссылка = Выборка.Ссылка;
				НоваяСтрока.Контакт = Выборка.Контакт;
			КонецЦикла;
		КонецЕсли;
		Если ИскатьПочту Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПартнерыКонтактнаяИнформация.Ссылка,
			|	NULL КАК Контакт
			|ИЗ
			|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
			|ГДЕ" + ?(ИскатьТелефон, "
			|	ПартнерыКонтактнаяИнформация.Ссылка В (&Найденые) И", "") + "
			|	ПартнерыКонтактнаяИнформация.АдресЭП ПОДОБНО ""%" + ПоискКлиентEmail + "%""
			|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
			|ГДЕ" + ?(ИскатьТелефон, "
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец В (&Найденые) И", "") + "
			|	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП ПОДОБНО ""%" + ПоискКлиентEmail + "%""
			|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
			Если ИскатьТелефон Тогда
				Запрос.УстановитьПараметр("Найденые", КонтактыПоКИТЗ.ВыгрузитьКолонку("Ссылка"));
				КонтактыПоКИТЗ.Очистить();
			КонецЕсли;
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = КонтактыПоКИТЗ.Добавить();
				НоваяСтрока.Ссылка = Выборка.Ссылка;
				НоваяСтрока.Контакт = Выборка.Контакт;
			КонецЦикла;
		КонецЕсли;
		Для Каждого СтрокаКонтакт Из КонтактыПоКИТЗ Цикл
			Если КлиентыТЗ.Найти(СтрокаКонтакт.Ссылка.Владелец, "Ссылка") = Неопределено Тогда
				НовыйВладелец = КлиентыТЗ.Добавить();
				НовыйВладелец.Ссылка = СтрокаКонтакт.Ссылка;
				НовыйВладелец.Объект = НовыйВладелец.Ссылка.Наименование;
				НовыйВладелец.Соответствует = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПоискКлиентНаименованиеИзмененное = СтрЗаменить(ПоискКлиентНаименование, """", """""");
	
	Если ИскатьНаименование Тогда
		Запрос = Новый Запрос;
		Если ИскатьТелефон ИЛИ ИскатьПочту Тогда
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникКлиент.Ссылка,
			|	СправочникКлиент.Объект
			|	ПОМЕСТИТЬ ТаблицаКлиенты
			|ИЗ
			|	&ТаблицаНайденыеКлиенты КАК СправочникКлиент
			|ГДЕ
			|	СправочникКлиент.Объект ПОДОБНО ""%" + ПоискКлиентНаименованиеИзмененное + "%""
			|;
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаКлиенты.Ссылка
			|ИЗ
			|	ТаблицаКлиенты КАК ТаблицаКлиенты";
			Запрос.УстановитьПараметр("ТаблицаНайденыеКлиенты", КлиентыТЗ);
		Иначе
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникКлиент.Ссылка
			|ИЗ
			|	Справочник.Партнеры КАК СправочникКлиент
			|ГДЕ
			|	СправочникКлиент.Наименование ПОДОБНО ""%" + ПоискКлиентНаименованиеИзмененное + "%""";
		КонецЕсли;
		КлиентыПоНаименованиюТЗ = Запрос.Выполнить().Выгрузить();
		Если ИскатьТелефон ИЛИ ИскатьПочту Тогда
			КлиентыТЗ.Очистить();
		КонецЕсли;
		Для Каждого СтрокаКлиент Из КлиентыПоНаименованиюТЗ Цикл
			//СтрокаТЗ = КлиентыТЗ.Найти(СтрокаКлиент.Ссылка, "Ссылка");
			//Если СтрокаТЗ = Неопределено Тогда
			НовыйВладелец = КлиентыТЗ.Добавить();
			НовыйВладелец.Ссылка = СтрокаКлиент.Ссылка;
			НовыйВладелец.Соответствует = Истина;
			//Иначе
			//	СтрокаТЗ.Соответствует = Истина;
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НайденныеКлиенты = КлиентыТЗ.ВыгрузитьКолонку("Ссылка");
	КлиентыПоиска = Новый Массив;
	
	Если ДетальныйПоискИспользовать Тогда
		КлиентыТЗ.Очистить();
		МассивДетальногоПоиска = ПолучитьДанныеПоДетальномуПоиску();
		Если ИскатьПочту ИЛИ ИскатьТелефон ИЛИ ИскатьНаименование Тогда
			//КлиентыМассив = Новый Массив;
			Для каждого Клиент из МассивДетальногоПоиска Цикл
				Если НайденныеКлиенты.Найти(Клиент) <> Неопределено Тогда
					//КлиентыМассив.Добавить(Клиент);
					НовыйВладелец = КлиентыТЗ.Добавить();
					НовыйВладелец.Ссылка = Клиент;
					НовыйВладелец.Соответствует = Истина;
					КлиентыПоиска.Добавить(Клиент);
				КонецЕсли;
			КонецЦикла;
		Иначе
			//КлиентыМассив = МассивДетальногоПоиска;
			Для каждого Клиент из МассивДетальногоПоиска Цикл
				НовыйВладелец = КлиентыТЗ.Добавить();
				НовыйВладелец.Ссылка = Клиент;
				НовыйВладелец.Соответствует = Истина;
				КлиентыПоиска.Добавить(Клиент);
			КонецЦикла;
		КонецЕсли;
	Иначе
		КлиентыПоиска = НайденныеКлиенты;
	КонецЕсли;
	
	Если КлиентыПоиска.Количество() > 0 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	Партнеры.Ссылка КАК Клиент,
		                      |	КонтактныеЛицаПартнеров.Ссылка КАК Контакт
		                      |ПОМЕСТИТЬ ВсеКонтакты
		                      |ИЗ
		                      |	Справочник.Партнеры КАК Партнеры
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		                      |		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
		                      |ГДЕ
		                      |	Партнеры.Ссылка В(&Партнеры)
		                      |	И НЕ Партнеры.ЭтоГруппа
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	Партнеры.Ссылка,
		                      |	ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)
		                      |ИЗ
		                      |	Справочник.Партнеры КАК Партнеры
		                      |ГДЕ
		                      |	Партнеры.Ссылка В(&Партнеры)
		                      |	И НЕ Партнеры.ЭтоГруппа
		                      |	И Партнеры.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо)
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ЗадачаИсполнителя.Ссылка КАК Задача,
		                      |	ЗадачаИсполнителя.БизнесПроцесс.Партнер КАК Партнер,
		                      |	ЗадачаИсполнителя.БизнесПроцесс.КонтактноеЛицо КАК КонтактноеЛицо
		                      |ПОМЕСТИТЬ ЗадачиНезависимыхПроцессов
		                      |ИЗ
		                      |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		                      |ГДЕ
		                      |	НЕ ЗадачаИсполнителя.Выполнена
		                      |	И ЗадачаИсполнителя.БизнесПроцесс.КартаМаршрута.ТипПроцесса = ЗНАЧЕНИЕ(Перечисление.bpmТипыПроцессов.НезависимыйПроцесс)
		                      |	И НЕ ЗадачаИсполнителя.БизнесПроцесс.Завершен
		                      |	И НЕ ЗадачаИсполнителя.БизнесПроцесс.ПометкаУдаления
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                      |	ВсеКонтакты.Клиент КАК Клиент,
		                      |	ВсеКонтакты.Контакт КАК Контакт,
		                      |	CRM_Интерес.Ссылка КАК Интерес,
		                      |	CRM_Интерес.КонтактноеЛицо КАК КонтактноеЛицо
		                      |ИЗ
		                      |	ВсеКонтакты КАК ВсеКонтакты
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Интерес КАК CRM_Интерес
		                      |		ПО ВсеКонтакты.Клиент = CRM_Интерес.Партнер
		                      |			И ВсеКонтакты.Контакт = CRM_Интерес.КонтактноеЛицо
		                      |			И (НЕ CRM_Интерес.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ИнтересЗакрыт))
		                      |			И (НЕ CRM_Интерес.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ИнтересПотерян))
		                      |			И (НЕ CRM_Интерес.Завершен)
		                      |			И (НЕ CRM_Интерес.ПометкаУдаления)
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
		                      |	ВсеКонтакты.Клиент,
		                      |	ВсеКонтакты.Контакт,
		                      |	ЗадачиНезависимыхПроцессов.Задача,
		                      |	NULL
		                      |ИЗ
		                      |	ВсеКонтакты КАК ВсеКонтакты
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ ЗадачиНезависимыхПроцессов КАК ЗадачиНезависимыхПроцессов
		                      |		ПО ВсеКонтакты.Клиент = ЗадачиНезависимыхПроцессов.Партнер
		                      |			И ВсеКонтакты.Контакт = ЗадачиНезависимыхПроцессов.КонтактноеЛицо
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	Интерес УБЫВ
		                      |ИТОГИ
		                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Интерес)
		                      |ПО
		                      |	Клиент,
		                      |	Контакт");
		
		Если Метаданные.Имя = "CRM" Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеЭтоГруппа", "И НЕ Партнеры.ЭтоГруппа");
		
		Иначе	
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеЭтоГруппа", "");
			
		КонецЕсли;		
		
		Запрос.УстановитьПараметр("Партнеры", КлиентыПоиска);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ПроверитьНаАвтопереход(РезультатЗапроса);
		
		ВыборкаКлиентов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОбработатьВыборкуЗапроса(ВыборкаКлиентов, Неопределено, КлиентыТЗ, КонтактыПоКИТЗ, Ложь);
		
	Иначе
		
		Элементы.ДеревоПоискаОбъект.Заголовок = НСтр("ru = 'Потенциальный клиент | Интерес'");
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СправочникКлиентКонтактнаяИнформация.Ссылка КАК Контакт
		|ПОМЕСТИТЬ ВсеКонтакты
		|ИЗ " + ?(НЕ ИскатьТелефон И НЕ ИскатьПочту,"
		|	Справочник.CRM_ПотенциальныеКлиенты КАК СправочникКлиентКонтактнаяИнформация", "
		|	Справочник.CRM_ПотенциальныеКлиенты.КонтактнаяИнформация КАК СправочникКлиентКонтактнаяИнформация") + ?(ИскатьНаименование ИЛИ ИскатьТелефон ИЛИ ИскатьПочту, "
		|ГДЕ
		|	ИСТИНА И (" + ?(ИскатьНаименование, "
		|	СправочникКлиентКонтактнаяИнформация.Ссылка.Наименование ПОДОБНО ""%" + ПоискКлиентНаименованиеИзмененное + "%""", "") + ?(ИскатьНаименование И ИскатьТелефон, "
		|	И", "") + ?(ИскатьТелефон, "
		|	(СправочникКлиентКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И СправочникКлиентКонтактнаяИнформация.Представление ПОДОБНО ""%" + ПоискКлиентТелефон + "%"")", "") + ?((ИскатьНаименование ИЛИ ИскатьТелефон) И ИскатьПочту, "
		|	И", "") + ?(ИскатьПочту, "
		|	(СправочникКлиентКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		|	И СправочникКлиентКонтактнаяИнформация.Представление ПОДОБНО ""%" + ПоискКлиентEmail + "%"")","") + "
		|	) ", " ГДЕ ЛОЖЬ")+"
		|;
		|////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""Потенциальный"" КАК Клиент,
		|	ВсеКонтакты.Контакт,
		|	CRM_Интерес.Ссылка КАК Интерес
		//|	ИСТИНА КАК Соответствует,
		//|	"""" КАК Телефон,
		//|	"""" КАК Почта
		|ИЗ
		|	ВсеКонтакты КАК ВсеКонтакты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.CRM_Интерес КАК CRM_Интерес
		|		ПО ВсеКонтакты.Контакт = CRM_Интерес.ПотенциальныйКлиент
		|		И НЕ CRM_Интерес.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ИнтересЗакрыт)
		|		И НЕ CRM_Интерес.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ИнтересПотерян)
		|		И НЕ CRM_Интерес.Завершен
		|		И НЕ CRM_Интерес.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	Клиент, Интерес УБЫВ, Контакт
		|ИТОГИ
		//|	КОЛИЧЕСТВО(Соответствует),
		//|	КОЛИЧЕСТВО(Телефон),
		//|	КОЛИЧЕСТВО(Почта),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Интерес)
		|ПО
		|	Клиент,
		|	Контакт");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ПроверитьНаАвтопереход(РезультатЗапроса);
		
		ВыборкаКлиентов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОбработатьВыборкуЗапроса(ВыборкаКлиентов, Неопределено, Неопределено, Неопределено, Истина);
		
	КонецЕсли;
	
	НоваяСтрока = ДеревоПоиска.ПолучитьЭлементы().Вставить(0);
	НоваяСтрока.Объект = НСтр("ru = 'Создать: Клиент / Контактное лицо / Потенциальный клиент / Интерес'");
	НоваяСтрока.Ссылка = "НовыйКлиент";
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоДетальномуПоиску()
	Если ПараметрПоиска = 0 Тогда 
		НайденныеПартнеры = CRM_КлиентыСервер.НайтиПартнераПоИНН(ДетальныйПоиск);	
	ИначеЕсли ПараметрПоиска = 1  Тогда 
		НайденныеПартнеры = CRM_КлиентыСервер.НайтиПартнераПоКИ(ДетальныйПоиск, ПараметрПоиска);
	ИначеЕсли ПараметрПоиска = 2  Тогда 
		НайденныеПартнеры = CRM_КлиентыСервер.НайтиПартнераПоКИ(ДетальныйПоиск, ПараметрПоиска);
	ИначеЕсли ПараметрПоиска = 3  Тогда 
		НайденныеПартнеры = CRM_КлиентыСервер.НайтиПартнераПоНаименованию(ДетальныйПоиск);
	ИначеЕсли ПараметрПоиска = 4  Тогда 
		НайденныеПартнеры = CRM_КлиентыСервер.НайтиПартнераПоКИ(ДетальныйПоиск, ПараметрПоиска);
	ИначеЕсли ПараметрПоиска = 5  Тогда 	
		НайденныеПартнеры = CRM_КлиентыСервер.НайтиПартнераПоКонтактномуЛицу(ДетальныйПоиск);
	ИначеЕсли ПараметрПоиска = 6  Тогда 
		НайденныеПартнеры = CRM_КлиентыСервер.НайтиПартнераПоКИ(ДетальныйПоиск, ПараметрПоиска);
	ИначеЕсли ПараметрПоиска = 9  Тогда 
		СписокИсключенияТиповКИ = Новый СписокЗначений;
		СписокИсключенияТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		СписокИсключенияТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		НайденныеПартнеры = CRM_КлиентыСервер.НайтиПартнераПоКИ(ДетальныйПоиск, ПараметрПоиска,, СписокИсключенияТиповКИ);
	КонецЕсли;
	Возврат НайденныеПартнеры;
КонецФункции

#КонецОбласти

#Область ПоляОтображенияСодержания

&НаСервере
Процедура ЗаполнитьПанельИнформацииПоДанным(Ссылка)
	
	// Поле отображения содержания.
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Партнеры")  
			ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
			ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")
			ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Интерес")
			ИЛИ ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Содержание = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьСодержание(Ссылка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
		Если Содержание <> ПолеОтображениеСодержания Тогда
			ПолеОтображениеСодержания = Содержание;
		КонецЕсли;
	Иначе
		Содержание = CRM_ОбщегоНазначенияКлиентСервер.НастройкиПолейОтображенияСодержанияПолучитьПустоеСодержание();
		Если Содержание <> ПолеОтображениеСодержания Тогда
			ПолеОтображениеСодержания = Содержание;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Элементы.ОткрытьИнтерес.Доступность = Истина;
		//Элементы.ОткрытьИнтерес.Заголовок = "Интерес " + Ссылка.Номер + " от " + Формат(Ссылка.Дата, "ДФ=dd.MM.yyyy");
		Элементы.ОткрытьИнтерес.Заголовок = "Открыть интерес";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Элементы.ОткрытьИнтерес.Доступность = Истина;
		//Элементы.ОткрытьИнтерес.Заголовок = "Задача " + Ссылка.Номер + " от " + Формат(Ссылка.Дата, "ДФ=dd.MM.yyyy");
		Элементы.ОткрытьИнтерес.Заголовок = "Открыть " + Ссылка.БизнесПроцесс.КартаМаршрута;
	Иначе
		Элементы.ОткрытьИнтерес.Доступность = Ложь;
		Элементы.ОткрытьИнтерес.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка()
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Партнеры"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КонтактныеЛицаПартнеров"));
	МассивТипов.Добавить(Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты"));
	МассивТипов.Добавить(Тип("ДокументСсылка.CRM_Интерес"));
	МассивТипов.Добавить(Тип("ЗадачаСсылка.ЗадачаИсполнителя"));
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции

&НаКлиенте
Процедура ПолеОтображениеСодержанияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	// Поле отображения содержания.
	Если Элемент.Имя = "ПолеОтображениеСодержания" Тогда
		
		CRM_ОбщегоНазначенияКлиент.НастройкиПолейОтображенияСодержанияПолеСодержаниеПриНажатии(ДанныеСобытия, СтандартнаяОбработка, НастройкаПоляОтображенияСодержанияПолучитьОграничениеТиповСписка());
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьНовогоКлиента".
//
Процедура СоздатьНовогоКлиента(Команда)
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) Тогда
		ПараметрыФормы.Вставить("ПотенциальныйКлиент", ИнформацияПоИнтересуПотенциальныйКлиент);
	Иначе
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Наименование", ПоискКлиентНаименование);
		СтруктураДанных.Вставить("Телефон", ПоискКлиентТелефон);
		СтруктураДанных.Вставить("АдресЭП", ПоискКлиентEmail);
		СтруктураДанных.Вставить("ОснованиеОбращения", ОснованиеОбращения);
		Если ДетальныйПоискИспользовать И ЗначениеЗаполнено(ДетальныйПоиск) Тогда
			ПараметрПоискаПредставление = Элементы.ПараметрПоиска.СписокВыбора.НайтиПоЗначению(ПараметрПоиска).Представление;
			СтруктураДанных.Вставить(ПараметрПоискаПредставление, ДетальныйПоиск);
		КонецЕсли;
		ПараметрыФормы.Вставить("ПотенциальныйКлиентСтруктура", СтруктураДанных);
	КонецЕсли;
	CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, ПараметрыФормы);
КонецПроцедуры // СоздатьНовогоКлиента()

&НаКлиенте
Процедура ОбращениеПотеряно(Команда)
	ОповещениеПричинаОтказа = Новый ОписаниеОповещения("УказатьПричинуОтказа", ЭтотОбъект);
	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", Новый Структура, ЭтотОбъект, , , ,ОповещениеПричинаОтказа, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПоиск(Команда)
	
	Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
	Элементы.СтраницаПринятьОбращение.Видимость = Ложь;
	Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Перейти'") + " (Ctrl+Enter)";
	Элементы.ПерейтиК.Доступность = Ложь;
	Элементы.ФормаОбращениеПотеряно.Доступность = Ложь;
	
	ИнформацияПоИнтересуЗаписан		 		= Истина;
	ИнформацияПоИнтересуСсылка				= Неопределено;
	ИнформацияПоИнтересуКлиент 				= Неопределено;
	ИнформацияПоИнтересуКонтактноеЛицо		= Неопределено;
	ИнформацияПоИнтересуПотенциальныйКлиент	= Неопределено;
	
	Если ЗначениеЗаполнено(ПоискКлиентНаименование) Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.ПоискКлиентНаименование;
	ИначеЕсли ЗначениеЗаполнено(ПоискКлиентТелефон) Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.ПоискКлиентТелефон;
	ИначеЕсли ЗначениеЗаполнено(ПоискКлиентEmail) Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.ПоискКлиентEmail;
	Иначе
		ЭтотОбъект.ТекущийЭлемент = Элементы.ПоискКлиентНаименование;
	КонецЕсли;
	ИзменитьПараметрыПоиска(Неопределено, Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)	
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуТипУслуги) Тогда
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги", 
			Новый Структура("ТипУслуги, сфпВиднаКолонкаСтатусов", ИнформацияПоИнтересуТипУслуги, сфпВиднаКолонкаСтатусов),ЭтотОбъект);
	Иначе
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги",Новый Структура("сфпВиднаКолонкаСтатусов", сфпВиднаКолонкаСтатусов),ЭтотОбъект);
	КонецЕсли;		
КонецПроцедуры

// +СофтФон

#Область Процедуры_и_Функции_Софтфон

&НаКлиенте
Процедура сфпПереводЗвонка(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	hCall = сфпПолучитьИдентификаторЗвонка(ОснованиеОбращения);
	НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(hCall);
	Если НайденныйЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	Если ЗначениеЗаполнено(сфпНомерПеревода) Тогда
		СтруктураКонтакта = Новый Структура;
		СтруктураКонтакта.Вставить("НомерТелефона", сфпНомерПеревода);
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("LineName", НайденныйЗвонок.LineName);
		ДополнительныеПараметры.Вставить("hCall", hCall);
		сфпВыполнитьПереключитьЗвонок(СтруктураКонтакта, ДополнительныеПараметры);		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ПодтвердитьПереводЗвонка"
//
Процедура сфпПодтвердитьПереводЗвонка(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	hCall = сфпПолучитьИдентификаторЗвонка(ОснованиеОбращения);
	НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(hCall);
	Если НайденныйЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	Если сфпИдентификаторПереводимогоЗвонка > 0 Тогда
		// Подтверждаем перевод звонка
		сфпПанельУправления.FinishTransferCall(НайденныйЗвонок.LineName, сфпИдентификаторПереводимогоЗвонка, "");
		сфпИдентификаторПереводимогоЗвонка = 0;
		Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;
		Элементы.сфпУдержатьЗвонок.Доступность 		= Ложь;
		Элементы.сфпПереводЗвонка.Доступность 		= Ложь;
		Закрыть();
	Иначе		
		// просто кладём трубку, без перевода, задаём вопрос на запись данных
		сфпПанельУправления.DropCall(НайденныйЗвонок.LineName, hCall);
		НовоеОповещение = Новый ОписаниеОповещения("сфпПослеЗавершенияРазговора", ЭтотОбъект);
		ТекстВопроса = Нстр("ru ='Принять обращение?'");
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Да");
		СписокКнопок.Добавить("Отмена");
		ПоказатьВопрос(НовоеОповещение, ТекстВопроса, СписокКнопок);
	КонецЕсли;
КонецПроцедуры // ПодтвердитьПереводЗвонка()

&НаКлиенте
Процедура сфпПослеЗавершенияРазговора(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда Возврат; КонецЕсли;
	Если Результат = "Да" Тогда
		ПерейтиК(Неопределено);
	КонецЕсли;		
КонецПроцедуры	

&НаКлиенте
Процедура сфпУдержатьЗвонок(Команда)
	Если сфпПанельУправления = Неопределено Тогда Возврат; КонецЕсли;
	hCall = сфпПолучитьИдентификаторЗвонка(ОснованиеОбращения);
	НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(hCall);
	Если НайденныйЗвонок = Неопределено Тогда Возврат; КонецЕсли;
	Если НЕ сфпУдержаниеЗвонка Тогда
		Элементы.сфпУдержатьЗвонок.Картинка	= БиблиотекаКартинок.сфпОтветитьПанель;
	Иначе		
		Элементы.сфпУдержатьЗвонок.Картинка	= БиблиотекаКартинок.сфпУдержаниеПанель;
	КонецЕсли;			
	сфпПанельУправления.HoldCall(НайденныйЗвонок.LineName, НайденныйЗвонок.hCall);
	сфпУдержаниеЗвонка = НЕ сфпУдержаниеЗвонка;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик оповещения переключения звонка
//
// Параметры:
//	СтруктураКонтакта		- Структура	- Структура, содержащая данные звонка
//	ДополнительныеПараметры	- Структура	- Структура дополнительных параметров
//
Процедура сфпВыполнитьПереключитьЗвонок(СтруктураКонтакта, ДополнительныеПараметры) Экспорт
	Если СтруктураКонтакта = Неопределено Тогда Возврат; КонецЕсли;
	ПолеВводаНомера = СтруктураКонтакта.НомерТелефона;
	сфпИдентификаторПереводимогоЗвонка = ДополнительныеПараметры.hCall;
	ИмяЛинии = ДополнительныеПараметры.LineName; 
	сфпПанельУправления.StartTransferCall(ИмяЛинии, сфпИдентификаторПереводимогоЗвонка, ПолеВводаНомера, "");
	Элементы.сфпПодтвердитьПеревод.Доступность = Истина;
КонецПроцедуры // ВыполнитьПереключитьЗвонок()

&НаСервереБезКонтекста
Процедура сфпОбновитьТелефонныйЗвонок(ТелефоныйЗвонок, Взаимодействие)
	ЗвонокОбъект = ТелефоныйЗвонок.ПолучитьОбъект();
	Если ЗначениеЗаполнено(Взаимодействие.ПотенциальныйКлиент) Тогда
		ЗвонокОбъект.АбонентКонтакт	= Взаимодействие.ПотенциальныйКлиент;
	ИначеЕсли ЗначениеЗаполнено(Взаимодействие.КонтактноеЛицо) Тогда
		ЗвонокОбъект.АбонентКонтакт	= Взаимодействие.КонтактноеЛицо;
	Иначе
		ЗвонокОбъект.АбонентКонтакт	= Взаимодействие.Партнер;
	КонецЕсли;	
	ЗвонокОбъект.АбонентПредставление	= ЗвонокОбъект.АбонентКонтакт.Наименование; 	
	ЗвонокОбъект.УдалитьПредмет			= Взаимодействие.ДокументОснование;
	Попытка
		ЗвонокОбъект.Записать();
	Исключение
	КонецПопытки;
 	СтруктураДляЗаписи = ВзаимодействияКлиентСервер.ПустаяСтруктураРеквизитыВзаимодействия();
	СтруктураДляЗаписи.Предмет                 = ЗвонокОбъект.УдалитьПредмет;
	СтруктураДляЗаписи.РассчитыватьРассмотрено = Ложь;
	ВзаимодействияВызовСервера.ЗаписьРегистрРеквизитыВзаимодействия(ЗвонокОбъект.Ссылка, СтруктураДляЗаписи);
КонецПроцедуры // СфпОбновитьТелефонныйЗвонок().

&НаСервереБезКонтекста
Функция сфпПолучитьИдентификаторЗвонка(ТелефЗвонок)
	Если ТелефЗвонок = Неопределено ИЛИ ТипЗнч(ТелефЗвонок) <> Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ТелефЗвонок.сфпИдентификаторЗвонка; 
КонецФункции	

&НаСервереБезКонтекста
Функция сфпПолучитьМассивИнтересов(КонтактноеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	CRM_Интерес.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.CRM_Интерес КАК CRM_Интерес
	|ГДЕ
	|	CRM_Интерес.КонтактноеЛицо = &КонтактноеЛицо
	|	И НЕ CRM_Интерес.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ИнтересЗакрыт)
	|	И НЕ CRM_Интерес.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ИнтересПотерян)
	|	И НЕ CRM_Интерес.Завершен
	|	И НЕ CRM_Интерес.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

&НаКлиенте
Процедура сфпВидимостьИДоступностьГруппыСофтфон()
	сфпНомерПеревода = "";
	Если сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Ложь) Тогда
		Элементы.ГруппаКнопкиСофтфона.Видимость = Истина;
		Элементы.ГруппаНомерИСтатусЛинии.Видимость = Истина;
		сфпНомерПеревода = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ИнформацияПоИнтересуОтветственный, Истина);
		Если ЗначениеЗаполнено(сфпНомерПеревода) Тогда
			Элементы.сфпВнутреннийНомер.Заголовок = Нстр("ru = 'Вн. номер: '") + сфпНомерПеревода;				
			Если сфпВиднаКолонкаСтатусов И сфпСофтФонПроКлиент.сфпИспользуетсяОбработчикOnLinesStatus() Тогда
				СтатусЛинии = сфпСоответствиеЛинийИСтатусов.Получить(сфпНомерПеревода);
				Если СтатусЛинии <> Неопределено Тогда
					сфпСтатус = СтатусЛинии;
				Иначе
					сфпСтатус = 2;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Элементы.сфпВнутреннийНомер.Заголовок = "";
			сфпСтатус = 3;
		КонецЕсли;
		Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(сфпПолучитьИдентификаторЗвонка(ОснованиеОбращения));
			Если НайденныйЗвонок <> Неопределено Тогда
				Элементы.сфпУдержатьЗвонок.Доступность 	= Истина;							
				Элементы.сфпПодтвердитьПеревод.Доступность = Истина;
				Элементы.сфпПереводЗвонка.Доступность = НЕ (сфпНомерПеревода =  сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ТекущийПользователь));				
			Иначе
				Элементы.сфпУдержатьЗвонок.Доступность 	= Ложь;							
				Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;											
				Элементы.сфпПереводЗвонка.Доступность = Ложь;				
			КонецЕсли;
		Иначе
			Элементы.сфпУдержатьЗвонок.Доступность 	= Ложь;													
			Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;														
			Элементы.сфпПереводЗвонка.Доступность = Ложь;							
		КонецЕсли;					
	Иначе
		Элементы.ГруппаКнопкиСофтфона.Видимость = Ложь;				
		Элементы.ГруппаНомерИСтатусЛинии.Видимость = Ложь;
	КонецЕсли;				
КонецПроцедуры	

&НаСервере
Функция сфпВидимостьКнопкиДобавитьТелефонУКонтакта(СсылкаНаОбъект)
	Если СсылкаНаОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат сфпСофтФонПроСервер.сфпПроверитьНаличиеНомераТелефонаУАбонента(СсылкаНаОбъект, ПоискКлиентТелефон); 
КонецФункции

#КонецОбласти

// -СофтФон

&НаКлиенте
Процедура ОбработкаВыбораПринятияОбращения(Результат, Дополнительно) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если НЕ Результат = "Интерес" Тогда
			СтартуемБизнесПроцесс	= Истина;
			Процесс					= Результат;
		КонецЕсли;
		
		Если (ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента ИЛИ ИнформацияПоИнтересуСоздаватьКонтакт) Тогда 
			Если НЕ ЗначениеЗаполнено(ПоискКлиентНаименование) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено наименование контакта.'"));
				Возврат;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ПоискКлиентEmail) И НЕ ЗначениеЗаполнено(ПоискКлиентТелефон) И НЕ ЗначениеЗаполнено(ИдентификаторМессенджера) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена контактная информация.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПроверитьЗаполнение() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните все необходимые реквизиты для принятия обращения.'"));
			Возврат;
		КонецЕсли;
		
		ОбработатьКонтактыНаСервере();
		
		Если ИнформацияПоИнтересуСоздаватьИнтерес Тогда
			Если СтартуемБизнесПроцесс Тогда
				ЗапуститьПроцессНаКлиенте();
				Возврат;
			Иначе
				ОбработатьОбращениеНаСервере();
			КонецЕсли;
		КонецЕсли;
		
		ВзаимодействиеСсылка = СоздатьВзаимодействиеНаСервере();
		
		Если ВзаимодействиеСсылка <> Неопределено Тогда
			ПослеСозданияВзаимодействия(ВзаимодействиеСсылка)
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроцессНаКлиенте()
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьПроцессНаКлиентеЗавершение", ЭтотОбъект);
	//ПараметрыФормы = Новый Структура("Основание", Процесс);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("Партнер, Контакт, КартаМаршрута, Тема, Описание",
		ИнформацияПоИнтересуКлиент, ИнформацияПоИнтересуКонтактноеЛицо, Процесс, ИнформацияПоИнтересуТема, ИнформацияПоИнтересуОписание));
	Если CRM_БизнесПроцессыИЗадачиСервер.ЭтоПоручение(Процесс) Тогда
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения", ПараметрыФормы,,,,, ОписаниеОповещения);
	Иначе
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаСтартаНезависимого", ПараметрыФормы,,,,, ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроцессНаКлиентеЗавершение(БизнесПроцесс, ДопПараметры) Экспорт
	Если БизнесПроцесс <> Неопределено Тогда
		ПолучитьЗадачуПроцессаНаСервере(БизнесПроцесс);
		ВзаимодействиеСсылка = СоздатьВзаимодействиеНаСервере();
		
		Если ВзаимодействиеСсылка <> Неопределено Тогда
			ПослеСозданияВзаимодействия(ВзаимодействиеСсылка)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияВзаимодействия(ВзаимодействиеСсылка) 
	Если ВзаимодействиеСсылка <> Неопределено Тогда
		// Обрабатываем данные из Comagic
		Если ЗначениеЗаполнено(ИнформацияПоИнтересуСсылка) и ТипЗнч(ИнформацияПоИнтересуСсылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Если НЕ (сфпСтруктураВнешнихДанных = Неопределено) И ТипЗнч(сфпСтруктураВнешнихДанных) = Тип("Структура") Тогда
				ФормаИнтереса = ПолучитьФорму("Документ.CRM_Интерес.ФормаОбъекта", Новый Структура("Ключ", ИнформацияПоИнтересуСсылка));
				ФиксироватьПервичныйИнтерес = сфпСофтФонПроСервер.сфпПолучитьЗначениеКонстантыФиксироватьПервичныйИнтерес();			
				//ФормаИнтереса.Объект["сфпCoMagicID"]	= сфпСтруктураВнешнихДанных.comagic_context.visitor_id;
				ФормаИнтереса.Объект["Описание"]		= ФормаИнтереса.Объект["Описание"] + ?(ЗначениеЗаполнено(ФормаИнтереса.Объект["Описание"]),Символы.ПС,"") 
				+ НСтр("ru='Кампания: '") + сфпСтруктураВнешнихДанных.comagic_context.campaign + Символы.ПС 
				+ НСтр("ru='Сайт: '") + сфпСтруктураВнешнихДанных.comagic_context.site + Символы.ПС
				+ НСтр("ru='Ключевые слова: '") + сфпСтруктураВнешнихДанных.comagic_context.search_query; 
				Если ФиксироватьПервичныйИнтерес Тогда
					ИмяПредопределенногоЗначения		 		= Нстр("ru ='ПланВидовХарактеристик.КаналыРекламныхВоздействий.CRM_CoMagic'");
					ФормаИнтереса.КаналПервичногоИнтереса 		= ПредопределенноеЗначение(ИмяПредопределенногоЗначения);
					ФормаИнтереса.ИсточникПервичногоИнтереса 	= сфпСофтФонПроСервер.сфпНайтиМаркетинговоеМероприятие(сфпСтруктураВнешнихДанных.comagic_context.campaign);
				КонецЕсли;
				ФормаИнтереса.Записать();
			КонецЕсли;
		КонецЕсли;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Обращение принято'"), 
				ПолучитьНавигационнуюСсылку(ИнформацияПоИнтересуСсылка), 
				НСтр("ru = 'Интерес: '") + ИнформацияПоИнтересуТема + " (" + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy") + ")");
		
		Оповестить("ОбновитьАРМ");
		Оповестить("ПринатиеОбращения", ИнформацияПоИнтересуСсылка, ВладелецФормы);
		
		Если ТипЗнч(ОснованиеОбращения) =  Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			// Если письмо открыто, то Интерес привяжется на форме письма.
			ПараметрыФормыПисьма = Новый Структура;
			ПараметрыФормыПисьма.Вставить("Ключ", ОснованиеОбращения);
			
			Если ПолучитьФорму("Документ.ЭлектронноеПисьмоВходящее.ФормаОбъекта", ПараметрыФормыПисьма).Открыта() Тогда
				Оповестить("ОбработаноОбращениеПоПисьму", ИнформацияПоИнтересуСсылка);
			// Если не открыто, то привяжем сами.
			Иначе	
			    CRM_ДобавитьИнтересНаСервере(ОснованиеОбращения, ИнформацияПоИнтересуСсылка);
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ОснованиеОбращения) =  Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		    CRM_ДобавитьИнтересНаСервере(ОснованиеОбращения, ИнформацияПоИнтересуСсылка);
		КонецЕсли; 
		
		//ОбновитьИнтерфейс();
		// +СофтФон
		Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			сфпОбновитьТелефонныйЗвонок(ОснованиеОбращения, ВзаимодействиеСсылка);
		КонецЕсли;
		// -СофтФон
		Если (ИнформацияПоИнтересуОтветственный = ТекущийПользователь) ИЛИ ОткрыватьИнтересПриПринятииОбращения Тогда
			Если ТипЗнч(ИнформацияПоИнтересуСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Ключ", ИнформацияПоИнтересуСсылка);
				ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаОбъекта", ПараметрыФормы);
			Иначе
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Ключ", ИнформацияПоИнтересуСсылка);
				ПараметрыФормы.Вставить("ПозиционироватьНаВзаимодействие", ВзаимодействиеСсылка);
				ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", ПараметрыФормы);
			КонецЕсли;
		КонецЕсли;
		CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ОткрыватьИнтересПриПринятииОбращения", ОткрыватьИнтересПриПринятииОбращения);
		
		Закрыть(Новый Структура("Успех, Взаимодействие", Истина, ВзаимодействиеСсылка));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиК(Команда, Автопереход = Ложь, ТекущаяСсылка = Неопределено)
	
	Если Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск Тогда
		
		Если НЕ Автопереход Тогда
			ИнформацияПоИнтересуПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
			ИнформацияПоИнтересуКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
			ИнформацияПоИнтересуКлиент = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			Если ТекущаяСсылка = Неопределено Тогда
				ТекущаяСсылка = Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка;
			КонецЕсли;
		Иначе
			ТекущаяСсылка = ИнформацияПоИнтересуСсылка;
		КонецЕсли;
		
		ВыбранПотенциальныйКлиент = Ложь;
		Если ТипЗнч(ТекущаяСсылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			РежимВводаОбращения = "ТекущийИнтерес_1";
			ИнформацияПоИнтересуСсылка = ТекущаяСсылка;
			
			ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: Новое взаимодействие по интересу ('");
			
			Если НЕ Автопереход Тогда
				тДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
				Родитель = тДанные.ПолучитьРодителя();
				Если ТипЗнч(Родитель) = Тип("Строка") Тогда
					// Потенциальный
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Потенциальный клиент: '") + Строка(тДанные.Ссылка) + ")";
				Иначе
					// Клиент-Контакт
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Клиент: '") + Строка(тДанные.ПолучитьРодителя().ПолучитьРодителя().Ссылка)
						+ " | " + НСтр("ru = 'Контакт: '") + Строка(тДанные.ПолучитьРодителя().Ссылка) + ")";
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) И НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
					// Потенциальный
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Потенциальный клиент: '") + Строка(ИнформацияПоИнтересуПотенциальныйКлиент) + ")";
				Иначе
					// Клиент-Контакт
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Клиент: '") + Строка(ИнформацияПоИнтересуКлиент) + " | " 
					+ НСтр("ru = 'Контакт: '") + Строка(ИнформацияПоИнтересуКонтактноеЛицо) + ")";
				КонецЕсли;
				ЗаполнитьПанельИнформацииПоДанным(ТекущаяСсылка);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущаяСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			//РежимВводаОбращения = "ТекущаяЗадача_1";
			РежимВводаОбращения = "ТекущийИнтерес_1";
			ИнформацияПоИнтересуСсылка = ТекущаяСсылка;
			
			ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: Новое взаимодействие по процессу ('");
			
			Если НЕ Автопереход Тогда
				тДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
				Родитель = тДанные.ПолучитьРодителя();
				Если ТипЗнч(Родитель) = Тип("Строка") Тогда
					// Потенциальный
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Потенциальный клиент: '") + Строка(тДанные.Ссылка) + ")";
				Иначе
					// Клиент-Контакт
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Клиент: '") + Строка(тДанные.ПолучитьРодителя().ПолучитьРодителя().Ссылка)
						+ " | " + НСтр("ru = 'Контакт: '") + Строка(тДанные.ПолучитьРодителя().Ссылка) + ")";
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) И НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
					// Потенциальный
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Потенциальный клиент: '") + Строка(ИнформацияПоИнтересуПотенциальныйКлиент) + ")";
				Иначе
					// Клиент-Контакт
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Клиент: '") + Строка(ИнформацияПоИнтересуКлиент) + " | " 
					+ НСтр("ru = 'Контакт: '") + Строка(ИнформацияПоИнтересуКонтактноеЛицо) + ")";
				КонецЕсли;
				ЗаполнитьПанельИнформацииПоДанным(ТекущаяСсылка);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") 
			ИЛИ ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			РежимВводаОбращения = "НовыйИнтерес_2";
			
			ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: Новый интерес ('");
			
			Родитель = Элементы.ДеревоПоиска.ТекущиеДанные.ПолучитьРодителя();
			Если Родитель.Ссылка = "ПрочиеКонтакты" Тогда
				Родитель = Родитель.ПолучитьРодителя();
			КонецЕсли;
			
			Если ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты")Тогда
				// Потенциальный
				ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Потенциальный клиент '") + Строка(ТекущаяСсылка) + ")";
			Иначе
				// Контакт
				ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Клиент: '") + Строка(Родитель.Ссылка)
					+ " | " + НСтр("ru = 'Контакт: '") + Строка(ТекущаяСсылка) + ")";
			КонецЕсли;
				
			Если ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ИнформацияПоИнтересуКонтактноеЛицо = ТекущаяСсылка;
				ИнформацияПоИнтересуКлиент = Родитель.Ссылка;
			ИначеЕсли ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				ИнформацияПоИнтересуПотенциальныйКлиент = ТекущаяСсылка;
				ВыбранПотенциальныйКлиент = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
			Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущаяСсылка, "ЮрФизЛицо")  = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
				РежимВводаОбращения = "НовыйИнтерес_2";
				ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: Новый интерес ('");
			Иначе
				РежимВводаОбращения = "НовыйКонтакт_3";
				ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: Новый контакт и интерес ('");
			КонецЕсли;
			
			ИнформацияПоИнтересуКлиент = ТекущаяСсылка;
			тДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
			Родитель = тДанные.ПолучитьРодителя();
			
			ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Клиент: '") + Строка(тДанные.Ссылка) + ")";
			
		ИначеЕсли ТекущаяСсылка = "НовыйКлиент" ИЛИ ТекущаяСсылка = "Потенциальный" Тогда
			РежимВводаОбращения = "НовыйКонтакт_3";
			ВыбранПотенциальныйКлиент = Истина;
			
			Если ТекущаяСсылка = "Потенциальный" Тогда
				ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: Новый потенциальный клиент и интерес'");
			Иначе
				ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: Новый клиент, контакт и интерес'");
			КонецЕсли;
		КонецЕсли;
		
		Элементы.СтраницаПринятьОбращение.Видимость = Истина;
		Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПринятьОбращение;
		Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Принять обращение'") + " (Ctrl+Enter)";
		СтраницыМастераПриСменеСтраницы(Неопределено, Элементы.СтраницыМастера.ТекущаяСтраница);
		
		УстановитьПараметрыЭлементовФормы();
		// +Софтфон
		сфпВидимостьИДоступностьГруппыСофтфон();
		// +Софтфон
		
	ИначеЕсли Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПринятьОбращение
	И ИнформацияПоИнтересуСоздаватьИнтерес И НЕ ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента Тогда
		
		ОП = Новый ОписаниеОповещения("ОбработкаВыбораПринятияОбращения", ЭтотОбъект);
		ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаВыбораПроцесса",, ЭтотОбъект, , , ,ОП, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПринятьОбращение Тогда
		
		Если (ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента ИЛИ ИнформацияПоИнтересуСоздаватьКонтакт) Тогда 
			Если НЕ ЗначениеЗаполнено(ПоискКлиентНаименование) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено наименование контакта.'"));
				Возврат;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ПоискКлиентEmail) И НЕ ЗначениеЗаполнено(ПоискКлиентТелефон) И НЕ ЗначениеЗаполнено(ИдентификаторМессенджера) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена контактная информация.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПроверитьЗаполнение() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните все необходимые реквизиты для принятия обращения.'"));
			Возврат;
		КонецЕсли;
		
		Если РежимВводаОбращения <> "ТекущийИнтерес_1" Тогда
			ОП = Новый ОписаниеОповещения("ОбработкаВыбораПринятияОбращения", ЭтотОбъект);
			ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаВыбораПроцесса",, ЭтотОбъект, , , ,ОП, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ВзаимодействиеСсылка = СоздатьВзаимодействиеНаСервере();
			
			Если ВзаимодействиеСсылка <> Неопределено Тогда
				ПослеСозданияВзаимодействия(ВзаимодействиеСсылка)
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	ЗначениеНастройки = CRM_ХранилищеНастроек.Загрузить(ЭтотОбъект.ИмяФормы, "ОткрыватьИнтересПриПринятииОбращения");
	ОткрыватьИнтересПриПринятииОбращения = ?(ЗначениеНастройки = Неопределено, Истина, ЗначениеНастройки);
	
	// Открыто вручную
	Элементы.СтраницаПринятьОбращение.Видимость = Ложь;
	
	ДатаВходящегоОбращения		= ТекущаяДатаСеанса();
	ИнформацияПоИнтересуЗаписан = Истина;
	ИнформацияПоИнтересуНайденоИнтересов = -1;
	
	СуществующиеНастройки = CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияПолучитьНастройки();
	Если СуществующиеНастройки.Количество() = 0 Тогда
		CRM_ОбщегоНазначенияСервер.НастройкиПолейОтображенияСодержанияЗагрузитьИзМакета("CRM_НастройкиПолейОтображенияСодержания");
	КонецЕсли;
	
	ИнформацияПоИнтересуСоздаватьИнтерес = Ложь;
	ИнформацияПоИнтересуСоздаватьКонтакт = Ложь;
	ИнформацияПоИнтересуСоздаватьКлиента = Ложь;
	ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента = Ложь;
	
	Если Параметры.Свойство("СостояниеИнтереса") Тогда
		ИнформацияПоИнтересуСостояниеИнтереса = Параметры.СостояниеИнтереса;
	КонецЕсли;
	
	Если Параметры.Свойство("УстановитьНовоеСостояниеИнтереса") Тогда
		УстановитьНовоеСостояниеИнтереса = Параметры.УстановитьНовоеСостояниеИнтереса;
	КонецЕсли;
	
	Если Параметры.Свойство("ПлановаяДата") Тогда
		ДатаВходящегоОбращения = Параметры.ПлановаяДата;
	КонецЕсли;
	
	// Открыто по входящему письму.
	Если Параметры.Свойство("ПисьмоВходящее") Тогда
		
		ОснованиеОбращения = Параметры.ПисьмоВходящее;
		Если Параметры.Свойство("ПереданаТолькоСсылкаПисьма") Тогда
			ПереданАдресЭП = ОснованиеОбращения.ОтправительАдрес;
			ИнформацияПоИнтересуТема = ОснованиеОбращения.Тема;
			
			МассивСсылок = Новый Массив;
			Если ЗначениеЗаполнено(ОснованиеОбращения.ОтправительКонтакт) Тогда
				МассивСсылок.Добавить(ОснованиеОбращения.ОтправительКонтакт);
			КонецЕсли;
		Иначе
			ПереданАдресЭП = Параметры.АдресЭП;
			ИнформацияПоИнтересуТема = Параметры.ТемаПисьма;
			МассивСсылок = Параметры.МассивСсылок;
		КонецЕсли;
		
		Если МассивСсылок.Количество() > 0 Тогда
			
			СформироватьДанныеПоПереданнымСсылкам(МассивСсылок);
			Если ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
				//Уровень2 = ДеревоПоиска.ПолучитьЭлементы()[1].ПолучитьЭлементы();
				//Если ТипЗнч(Уровень2[0].Ссылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				//	ИнформацияПоИнтересуПотенциальныйКлиент = Уровень2[0].Ссылка;
				//	ИнформацияПоИнтересуСсылка = Уровень2[0].ПолучитьЭлементы()[0].Ссылка;
				//Иначе
				//	ИнформацияПоИнтересуКлиент = ДеревоПоиска.ПолучитьЭлементы()[1].Ссылка;
				//	Уровень3 = Уровень2[0].ПолучитьЭлементы();
				//	Если Уровень3[0].Ссылка = "ПрочиеКонтакты" Тогда
				//		ИнформацияПоИнтересуКонтактноеЛицо = Уровень3[0]..Ссылка;
				//		ИнформацияПоИнтересуСсылка = Уровень3[0].ПолучитьЭлементы()[0].Ссылка;
				//	Иначе
				//		ИнформацияПоИнтересуКонтактноеЛицо = Уровень2[0].Ссылка;
				//		ИнформацияПоИнтересуСсылка = Уровень3[0].Ссылка;
				//	КонецЕсли;
				//КонецЕсли;
				
				ИнтересЕстьВМассиве = Ложь;
				ПКЕстьВМассиве = Ложь;
				КлиентЕстьВМассиве = Ложь;
				КонтактЕстьВМассиве = Ложь;
				
				Если МассивСсылок.Найти(ИнформацияПоИнтересуСсылка) <> Неопределено Тогда
					ИнтересЕстьВМассиве = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) И МассивСсылок.Найти(ИнформацияПоИнтересуПотенциальныйКлиент) <> Неопределено Тогда
					ПКЕстьВМассиве = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) И МассивСсылок.Найти(ИнформацияПоИнтересуКлиент) <> Неопределено Тогда
					КлиентЕстьВМассиве = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) И МассивСсылок.Найти(ИнформацияПоИнтересуКонтактноеЛицо) <> Неопределено Тогда
					КонтактЕстьВМассиве = Истина;
				КонецЕсли;
				
				Если НЕ (ИнтересЕстьВМассиве ИЛИ ПКЕстьВМассиве ИЛИ КлиентЕстьВМассиве ИЛИ КонтактЕстьВМассиве) Тогда
					ИнформацияПоИнтересуСсылка = ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка");
					ИнформацияПоИнтересуПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
					ИнформацияПоИнтересуКлиент = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
					ИнформацияПоИнтересуКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
					ВыполнитьПроцедуру = "РазвернутьСовсемВсе(Неопределено);";
				Иначе
					ВыполнитьПроцедуру = "ПерейтиК(Неопределено, Истина);
										 |РазвернутьСовсемВсе(Неопределено);";
				КонецЕсли;
				
			Иначе 
				ВыполнитьПроцедуру = "РазвернутьСовсемВсе(Неопределено);";
			КонецЕсли;
			
			ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: '");
			Для Каждого Ссылка Из МассивСсылок Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + " | " + Ссылка.Тема;
				Иначе
					ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, НСтр("ru = 'Принятие обращения: '"), НСтр("ru = 'Принятие обращения: поиск данных по '") + Ссылка.Наименование);
				КонецЕсли;
			КонецЦикла;
			ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, ":  |", ": ");
			
		Иначе
			
			ПоискКлиентEmail = ПереданАдресЭП;
			ВыполнитьПроцедуру = "ИзменитьПараметрыПоиска(""ПоискКлиентEmail"", ПоискКлиентEmail, Истина, Истина);";
			
		КонецЕсли;
	// Открыто по входящему письму.
	ИначеЕсли Параметры.Свойство("СообщениеМессенджера") Тогда
		
		ОснованиеОбращения = Параметры.СообщениеМессенджера;
		ИнформацияПоИнтересуТема = Параметры.СообщениеМессенджера.ТекстСообщения; 
		
		МассивСсылок = Новый Массив;
		Если ЗначениеЗаполнено(ОснованиеОбращения.Контакт) Тогда
			МассивСсылок.Добавить(ОснованиеОбращения.Контакт);
		КонецЕсли;
		
		Если МассивСсылок.Количество() > 0 Тогда
			
			СформироватьДанныеПоПереданнымСсылкам(МассивСсылок);
			Если ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
				
				ИнтересЕстьВМассиве = Ложь;
				ПКЕстьВМассиве = Ложь;
				КлиентЕстьВМассиве = Ложь;
				КонтактЕстьВМассиве = Ложь;
				
				Если МассивСсылок.Найти(ИнформацияПоИнтересуСсылка) <> Неопределено Тогда
					ИнтересЕстьВМассиве = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) И МассивСсылок.Найти(ИнформацияПоИнтересуПотенциальныйКлиент) <> Неопределено Тогда
					ПКЕстьВМассиве = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) И МассивСсылок.Найти(ИнформацияПоИнтересуКлиент) <> Неопределено Тогда
					КлиентЕстьВМассиве = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) И МассивСсылок.Найти(ИнформацияПоИнтересуКонтактноеЛицо) <> Неопределено Тогда
					КонтактЕстьВМассиве = Истина;
				КонецЕсли;
				
				Если НЕ (ИнтересЕстьВМассиве ИЛИ ПКЕстьВМассиве ИЛИ КлиентЕстьВМассиве ИЛИ КонтактЕстьВМассиве) Тогда
					ИнформацияПоИнтересуСсылка = ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка");
					ИнформацияПоИнтересуПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
					ИнформацияПоИнтересуКлиент = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
					ИнформацияПоИнтересуКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
					ВыполнитьПроцедуру = "РазвернутьСовсемВсе(Неопределено);";
				Иначе
					ВыполнитьПроцедуру = "ПерейтиК(Неопределено, Истина);
										 |РазвернутьСовсемВсе(Неопределено);";
				КонецЕсли;
				
			Иначе 
				ВыполнитьПроцедуру = "РазвернутьСовсемВсе(Неопределено);";
			КонецЕсли;
			
			ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: '");
			Для Каждого Ссылка Из МассивСсылок Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + " | " + Ссылка.Тема;
				Иначе
					ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, НСтр("ru = 'Принятие обращения: '"), НСтр("ru = 'Принятие обращения: поиск данных по '") + Ссылка.Наименование);
				КонецЕсли;
			КонецЦикла;
			ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, ":  |", ": ");
			
		Иначе
			
			ПоискКлиентНаименование = ОснованиеОбращения.КонтактПредставление;
			ВыполнитьПроцедуру = "ИзменитьПараметрыПоиска(""ПоискКлиентНаименование"", ПоискКлиентНаименование, Истина, Истина);";
			Элементы.ИдентификаторМессенджера.Заголовок = ОснованиеОбращения.УчетнаяЗапись.ТипМессенджера;
			Элементы.ИдентификаторМессенджера.Видимость = Истина;
			Элементы.ИдентификаторМессенджера1.Заголовок = ОснованиеОбращения.УчетнаяЗапись.ТипМессенджера;
			Элементы.ИдентификаторМессенджера1.Видимость = Истина;
			ИдентификаторМессенджера = Параметры.СообщениеМессенджера.ID_Пользователя; 
			
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("Заявка") Тогда
		
		ОснованиеОбращения = Параметры.Заявка;
		ИнформацияПоИнтересуТема = ""; 
		
		МассивСсылок = Новый Массив;
		Если ЗначениеЗаполнено(ОснованиеОбращения.Контакт) Тогда
			МассивСсылок.Добавить(ОснованиеОбращения.Контакт);
		КонецЕсли;
		ИнформацияПоИнтересуКаналПервичногоИнтереса = ОснованиеОбращения.КаналПервичногоИнтереса;
		ИнформацияПоИнтересуИсточникПервичногоИнтереса = ОснованиеОбращения.ИсточникПервичногоИнтереса;
		ИнформацияПоИнтересуТема = ОснованиеОбращения.Тема;
		ПоискКлиентНаименование = ОснованиеОбращения.Наименование;
		Если МассивСсылок.Количество() > 0 Тогда
			
			СформироватьДанныеПоПереданнымСсылкам(МассивСсылок);
			Если ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
				
				ИнтересЕстьВМассиве = Ложь;
				ПКЕстьВМассиве = Ложь;
				КлиентЕстьВМассиве = Ложь;
				КонтактЕстьВМассиве = Ложь;
				
				Если МассивСсылок.Найти(ИнформацияПоИнтересуСсылка) <> Неопределено Тогда
					ИнтересЕстьВМассиве = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) И МассивСсылок.Найти(ИнформацияПоИнтересуПотенциальныйКлиент) <> Неопределено Тогда
					ПКЕстьВМассиве = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) И МассивСсылок.Найти(ИнформацияПоИнтересуКлиент) <> Неопределено Тогда
					КлиентЕстьВМассиве = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) И МассивСсылок.Найти(ИнформацияПоИнтересуКонтактноеЛицо) <> Неопределено Тогда
					КонтактЕстьВМассиве = Истина;
				КонецЕсли;
				
				Если НЕ (ИнтересЕстьВМассиве ИЛИ ПКЕстьВМассиве ИЛИ КлиентЕстьВМассиве ИЛИ КонтактЕстьВМассиве) Тогда
					ИнформацияПоИнтересуСсылка = ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка");
					ИнформацияПоИнтересуПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
					ИнформацияПоИнтересуКлиент = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
					ИнформацияПоИнтересуКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
					ВыполнитьПроцедуру = "РазвернутьСовсемВсе(Неопределено);";
				Иначе
					ВыполнитьПроцедуру = "ПерейтиК(Неопределено, Истина);
										 |РазвернутьСовсемВсе(Неопределено);";
				КонецЕсли;
				
			Иначе 
				ВыполнитьПроцедуру = "РазвернутьСовсемВсе(Неопределено);";
			КонецЕсли;
			
			ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: '");
			Для Каждого Ссылка Из МассивСсылок Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + " | " + Ссылка.Тема;
				Иначе
					ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, НСтр("ru = 'Принятие обращения: '"), НСтр("ru = 'Принятие обращения: поиск данных по '") + Ссылка.Наименование);
				КонецЕсли;
			КонецЦикла;
			ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, ":  |", ": ");
			
		Иначе
			
			ПоискКлиентТелефон	= ОснованиеОбращения.Телефон;
			ПоискКлиентEmail = ОснованиеОбращения.ЭлектроннаяПочта;
			ВыполнитьПроцедуру = "";
			Если СокрЛП(ПоискКлиентТелефон) <> "" Тогда
				ВыполнитьПроцедуру = "ИзменитьПараметрыПоиска(""ПоискКлиентТелефон"", ПоискКлиентТелефон, Истина, Истина);";
			Иначе	
				Если СокрЛП(ПоискКлиентEmail) <> "" Тогда
					ВыполнитьПроцедуру = "ИзменитьПараметрыПоиска(""ПоискКлиентEmail"", ПоискКлиентEmail, Истина, Истина);"; 
				КонецЕсли;
			КонецЕсли;	
			
			
		КонецЕсли;
	
	// +СофтФон	
	ИначеЕсли Параметры.Свойство("ТелефонныйЗвонок") Тогда
		
		ОснованиеОбращения								= Параметры.ТелефонныйЗвонок;
		МассивСсылок									= Параметры.МассивСсылок;
		Элементы.ВходящаяКонтактнаяИнформация.Видимость	= Истина;
		Элементы.ВходящаяКонтактнаяИнформация.Заголовок	= НСтр("ru='Звонок с номера: '");
		ВходящаяКонтактнаяИнформация					=  Параметры.НомерТелефона;
		Если МассивСсылок.Количество() = 0 Тогда
			ПоискКлиентТелефон	= Параметры.НомерТелефона;
			ВыполнитьПроцедуру	= "ИзменитьПараметрыПоиска(""ПоискКлиентТелефон"", ПоискКлиентТелефон, Истина, Истина);";
		Иначе
			// всегда заполняем поле с номермо телефона и галочку, даже если уже нашли абонента
			ПоискКлиентТелефон	= Параметры.НомерТелефона;
			ПоискКлиентТелефонИспользовать = Истина;
			СформироватьДанныеПоПереданнымСсылкам(МассивСсылок);
			Если ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
				ИнтересЕстьВМассиве	= Ложь;
				ПКЕстьВМассиве		= Ложь;
				КлиентЕстьВМассиве	= Ложь;
				КонтактЕстьВМассиве	= Ложь;
				
				Если МассивСсылок.Найти(ИнформацияПоИнтересуСсылка) <> Неопределено Тогда
					ИнтересЕстьВМассиве = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) И МассивСсылок.Найти(ИнформацияПоИнтересуПотенциальныйКлиент) <> Неопределено Тогда
					ПКЕстьВМассиве = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) И МассивСсылок.Найти(ИнформацияПоИнтересуКлиент) <> Неопределено Тогда
					КлиентЕстьВМассиве = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) И МассивСсылок.Найти(ИнформацияПоИнтересуКонтактноеЛицо) <> Неопределено Тогда
					КонтактЕстьВМассиве = Истина;
				КонецЕсли;
				
				Если НЕ (ИнтересЕстьВМассиве ИЛИ ПКЕстьВМассиве ИЛИ КлиентЕстьВМассиве ИЛИ КонтактЕстьВМассиве) Тогда
					ИнформацияПоИнтересуСсылка				= ПредопределенноеЗначение("Документ.CRM_Интерес.ПустаяСсылка");
					ИнформацияПоИнтересуПотенциальныйКлиент	= ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
					ИнформацияПоИнтересуКлиент				= ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
					ИнформацияПоИнтересуКонтактноеЛицо		= ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
					ВыполнитьПроцедуру = "РазвернутьСовсемВсе(Неопределено);";
				Иначе
					ВыполнитьПроцедуру = "ПерейтиК(Неопределено, Истина);
										 |РазвернутьСовсемВсе(Неопределено);";
				КонецЕсли;
				
			Иначе 
				ВыполнитьПроцедуру = "РазвернутьСовсемВсе(Неопределено);";
			КонецЕсли;
			ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: '");
			Для Каждого Ссылка Из МассивСсылок Цикл
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
					ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + " | " + Ссылка.Тема;
				Иначе
					ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, НСтр("ru = 'Принятие обращения: '"), НСтр("ru = 'Принятие обращения: поиск данных по '") + Ссылка.Наименование);
				КонецЕсли;
			КонецЦикла;
			ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, ":  |", ": ");
		КонецЕсли;
		// -СофтФон	
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
		
		ЗначенияЗаполнения = Параметры.ЗначенияЗаполнения;
		МассивСсылок = Новый Массив;
		Если ЗначенияЗаполнения.Свойство("КонтактноеЛицо") И ЗначениеЗаполнено(ЗначенияЗаполнения.КонтактноеЛицо) Тогда
			МассивСсылок.Добавить(ЗначенияЗаполнения.КонтактноеЛицо);
			СформироватьДанныеПоПереданнымСсылкам(МассивСсылок);
			Элементы.ДеревоПоиска.ТекущаяСтрока = ДеревоПоиска.ПолучитьЭлементы()[1].ПолучитьЭлементы()[0].ПолучитьИдентификатор();					 
		ИначеЕсли ЗначенияЗаполнения.Свойство("Партнер") И ЗначениеЗаполнено(ЗначенияЗаполнения.Партнер) Тогда
			МассивСсылок.Добавить(Параметры.Партнер);
			СформироватьДанныеПоПереданнымСсылкам(МассивСсылок);
			Элементы.ДеревоПоиска.ТекущаяСтрока = ДеревоПоиска.ПолучитьЭлементы()[1].ПолучитьИдентификатор();					 
		ИначеЕсли Параметры.Свойство("ПоискКлиентНаименование") Тогда
			ПоискКлиентНаименование = Параметры.ПоискКлиентНаименование;
			ВыполнитьПроцедуру = "ИзменитьПараметрыПоиска(""ПоискКлиентНаименование"", ПоискКлиентНаименование, Истина, Истина);";
		КонецЕсли;
		//ВыполнитьПроцедуру = "ПерейтиК(Неопределено, Ложь);
		//					 |РазвернутьСовсемВсе(Неопределено);";
		//ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: '");
		//ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, НСтр("ru = 'Принятие обращения: '"), НСтр("ru = 'Принятие обращения: поиск данных по '") + Параметры.Партнер.Наименование);
		
	ИначеЕсли Параметры.Свойство("Партнер") Тогда
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Параметры.Партнер);
		СформироватьДанныеПоПереданнымСсылкам(МассивСсылок);
		//ВыполнитьПроцедуру = "ПерейтиК(Неопределено, Ложь);
		//					 |РазвернутьСовсемВсе(Неопределено);";
		Элементы.ДеревоПоиска.ТекущаяСтрока = ДеревоПоиска.ПолучитьЭлементы().Индекс(ДеревоПоиска.ПолучитьЭлементы()[1]);					 
		ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: '");
		ЭтотОбъект.Заголовок = СтрЗаменить(ЭтотОбъект.Заголовок, НСтр("ru = 'Принятие обращения: '"), НСтр("ru = 'Принятие обращения: поиск данных по '") + Параметры.Партнер.Наименование);
	ИначеЕсли Параметры.Свойство("Основание") Тогда	
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ИнтересОснование = Параметры.Основание;
			
			ТекущийРежим = "НовыйИнтерес_2";
			РежимВводаОбращения = "НовыйИнтерес_2";
			ЗаполнитьИнформациюВыбранногоИнтереса(Неопределено, Истина);
			ДействиеПоИнтересу = "";
			ИнформацияПоИнтересуТема = ИнтересОснование.Тема;
			ИнформацияПоИнтересуТипУслуги = ИнтересОснование.ТипУслуги;
			ИнформацияПоИнтересуОтветственный = ИнтересОснование.Ответственный;
			Если ЗначениеЗаполнено(ИнтересОснование.Партнер) Тогда
				ИнформацияПоИнтересуКлиент = ИнтересОснование.Партнер;
				ИнформацияПоИнтересуКонтактноеЛицо = ИнтересОснование.КонтактноеЛицо;
				Элементы["Группа" + ТекущийРежим + "ПотенциальныйКлиент"].Видимость = Ложь;
				Элементы["Группа" + ТекущийРежим + "КлиентКонтакт"].Видимость = Истина;
			Иначе
				ИнформацияПоИнтересуПотенциальныйКлиент = ИнтересОснование.ПотенциальныйКлиент;
				Элементы["Группа" + ТекущийРежим + "ПотенциальныйКлиент"].Видимость = Истина;
				Элементы["Группа" + ТекущийРежим + "КлиентКонтакт"].Видимость = Ложь;
			КонецЕсли;
			ИнформацияПоИнтересуДокументОснование = ИнтересОснование;
			ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения: Новый интерес ('");
			ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок + НСтр("ru = 'Клиент: '") + Строка(ИнформацияПоИнтересуКлиент)
			+ " | " + НСтр("ru = 'Контакт: '") + Строка(ИнформацияПоИнтересуКонтактноеЛицо) + ")";
			Элементы.СтраницаПринятьОбращение.Видимость = Истина;
			Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПринятьОбращение;
			Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Принять обращение'") + " (Ctrl+Enter)";
			Элементы.ПерейтиК.Доступность = Истина;
			ИнформацияПоИнтересуСоздаватьИнтерес = Истина;
			Элементы["Группа" + ТекущийРежим].Видимость = Истина;
			// +Софтфон
			// +Софтфон
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ЭлектронноеПисьмо");
	ИначеЕсли ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		ВидСобытия = ПредопределенноеЗначение("Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок");
	КонецЕсли;
	
	// +Comagic
	Если Параметры.Свойство("сфпСтруктураВнешнихДанных") Тогда
		сфпСтруктураВнешнихДанных = Параметры.сфпСтруктураВнешнихДанных;
	КонецЕсли;
	// +Comagic
	
	Элементы.СоздатьНовогоКлиента.Видимость = Пользователи.РолиДоступны("ПолныеПрава,CRM_ДобавлениеИзменениеКлиентов");
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		
		// Удалим ИНН из списка поиска
		
		Элементы.ПараметрПоиска.СписокВыбора.Удалить(Элементы.ПараметрПоиска.СписокВыбора[0]);		
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ВыполнитьПроцедуру) Тогда
		Выполнить(ВыполнитьПроцедуру);
	КонецЕсли;
	// +СофтФон	
	Если сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Ложь) Тогда
		сфпВерсияПанели = сфпСофтФонПроКлиент.сфпПолучитьВерсиюПанели();
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(сфпВерсияПанели,"3.0.3.120") >= 0 Тогда
			сфпВиднаКолонкаСтатусов = Истина;
			// Вызов этого метода сделан при начале работы в сфпСофтФонПроКлиент.сфпПодключитьСофтФон()
			//сфпСофтФонПроКлиент.сфпПолучитьСостоянияЛиний();
		Иначе
			сфпВиднаКолонкаСтатусов = Ложь;
			Элементы.сфпСтатус.Видимость = Ложь;
		КонецЕсли;		
	КонецЕсли;
	// -СофтФон	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ВидыВзаимодействий") Тогда
		ИнформацияПоИнтересуВидВзаимодействия	= ВыбранноеЗначение;
		ДействиеПоИнтересу						= CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ИнформацияПоИнтересуВидВзаимодействия, "Описание");
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ИнформацияПоИнтересуКонтактноеЛицо = ВыбранноеЗначение;
		ИнформацияПоИнтересуСоздаватьКонтакт = НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо);
		Если РежимВводаОбращения = "НовыйКонтакт_3" Тогда
			Элементы.ГруппаНовыйКонтакт_3КонтактКИ.Видимость = Ложь;
			Элементы.НовыйКонтакт_3КонтактноеЛицоПоиск.Видимость = Ложь;
			Элементы.НовыйКонтакт_3КонтактноеЛицоВыбор.Видимость = Истина;
		КонецЕсли;
		Элементы.ДекорацияТелефонEmail.Заголовок = СформироватьНадписьКонтактнойИнформации(ИнформацияПоИнтересуКонтактноеЛицо);
	КонецЕсли;
	// Если выбрали ответственного в форме выбора по типу услуги
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") И ИсточникВыбора.ИмяФормы = Нстр("ru = 'ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги'") Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
			Если ВыбранноеЗначение <> ИнформацияПоИнтересуОтветственный Тогда
				сфпНомерПеревода = "";
				ИнформацияПоИнтересуОтветственный = ВыбранноеЗначение;
				Элементы.ДекорацияОфисПодразделение.Заголовок = ОбновитьЗаголовокОфисПодразделение(ИнформацияПоИнтересуОтветственный);			
				Если сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Ложь) Тогда
					Элементы.ГруппаКнопкиСофтфона.Видимость = Истина;
					Элементы.ГруппаНомерИСтатусЛинии.Видимость = Истина;
					сфпНомерПеревода = сфпСофтФонПроСервер.сфпТекущийВнутреннийНомер(ИнформацияПоИнтересуОтветственный, Истина);
					Если ЗначениеЗаполнено(сфпНомерПеревода) Тогда
						Элементы.сфпВнутреннийНомер.Заголовок = Нстр("ru = 'Вн. номер: '") + сфпНомерПеревода;				
						Если сфпВиднаКолонкаСтатусов И сфпСофтФонПроКлиент.сфпИспользуетсяОбработчикOnLinesStatus() Тогда
							СтатусЛинии = сфпСоответствиеЛинийИСтатусов.Получить(сфпНомерПеревода);
							Если СтатусЛинии <> Неопределено Тогда
								сфпСтатус = СтатусЛинии;
							Иначе
								сфпСтатус = 2;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Элементы.сфпВнутреннийНомер.Заголовок = "";
						сфпСтатус = 3;
					КонецЕсли;
					Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
						НайденныйЗвонок = сфпСофтФонПроКлиент.сфпНайтиДанныеЗвонка(сфпПолучитьИдентификаторЗвонка(ОснованиеОбращения));
						Если НайденныйЗвонок <> Неопределено Тогда
							Элементы.сфпПереводЗвонка.Доступность 		= Истина;
							Элементы.сфпУдержатьЗвонок.Доступность 		= Истина;
							Элементы.сфпПодтвердитьПеревод.Доступность 	= Истина;
						Иначе
							Элементы.сфпПереводЗвонка.Доступность 		= Ложь;
							Элементы.сфпУдержатьЗвонок.Доступность 		= Ложь;
							Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;
						КонецЕсли;
					Иначе
						Элементы.сфпПереводЗвонка.Доступность 		= Ложь;
						Элементы.сфпУдержатьЗвонок.Доступность 		= Ложь;
						Элементы.сфпПодтвердитьПеревод.Доступность 	= Ложь;
					КонецЕсли;					
				Иначе
					Элементы.ГруппаКнопкиСофтфона.Видимость = Ложь;
					Элементы.ГруппаНомерИСтатусЛинии.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Создан новый партнер" И Источник.ВладелецФормы = ЭтотОбъект Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ИнформацияПоИнтересуКлиент			= CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
			ИнформацияПоИнтересуКонтактноеЛицо	= Параметр;
			РежимВводаОбращения	= "НовыйИнтерес_2";
			УстановитьПараметрыЭлементовФормы();
		ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
			ИнформацияПоИнтересуКлиент = Параметр;
			ЗаполнитьКЛПоИзКлиента();
			РежимВводаОбращения	= "НовыйИнтерес_2";
			УстановитьПараметрыЭлементовФормы();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаполнитьОснованиеОбращения" И ТипЗнч(Параметр) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		ОснованиеОбращения	= Параметр;
		Если Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПринятьОбращение ИЛИ ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
			сфпВидимостьИДоступностьГруппыСофтфон();
		КонецЕсли;			
	КонецЕсли;
	// +Софтфон
	Если (ИмяСобытия = "СофтФон_КонецРазговора") И (Параметр.Звонок = ОснованиеОбращения) Тогда		
		Если Элементы.сфпПереводЗвонка.Видимость Тогда
			Элементы.сфпПереводЗвонка.Доступность = Ложь;
		КонецЕсли;
		Если Элементы.сфпПодтвердитьПеревод.Доступность Тогда
			Элементы.сфпПодтвердитьПеревод.Доступность = Ложь;
		КонецЕсли;			
		Элементы.сфпУдержатьЗвонок.Доступность = Ложь;
		сфпУдержаниеЗвонка = Ложь;
	ИначеЕсли ИмяСобытия = "сфпПерезаполнитьСтатусыЛиний" Тогда		
		Если ЗначениеЗаполнено(сфпНомерПеревода) Тогда
			Если сфпВиднаКолонкаСтатусов И сфпСофтФонПроКлиент.сфпИспользуетсяОбработчикOnLinesStatus() Тогда
				СтатусЛинии = сфпСоответствиеЛинийИСтатусов.Получить(сфпНомерПеревода);
				
				Если СтатусЛинии <> Неопределено И СтатусЛинии < 0 Тогда
					СтатусЛинии = 0;
				КонецЕсли;
				
				Если (СтатусЛинии = Неопределено ИЛИ СтатусЛинии = 1) И СтатусЛинии = 0 Тогда
					Если СтатусЛинии <> Неопределено Тогда
						сфпСтатус = СтатусЛинии;
					Иначе
						сфпСтатус = 2;
					КонецЕсли;
				ИначеЕсли НЕ сфпСтатус = СтатусЛинии Тогда
					сфпСтатус = СтатусЛинии;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (ИмяСобытия = "Софтфон_CoMagic") И Параметр.Свойство("Звонок") Тогда
		Если Параметр.Звонок = ОснованиеОбращения Тогда
			// Заполняем документ данными из CoMagic
			сфпСтруктураВнешнихДанных = Параметр.СтруктураCoMagic;
		КонецЕсли;
	КонецЕсли;
	// +Софтфон
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает строку с контактной информацией объекта.
//
// Параметры:
//	ОбъектКИ	- СправочникСсылка	- Объект, для которого получается контактная информация.
//
// Возвращаемое значение:
//	Строка	- Строка с контактной информацией объекта.
//
Функция СформироватьНадписьКонтактнойИнформации(ОбъектКИ)
	ТекстНадписи = "";
	Если ЗначениеЗаполнено(ОбъектКИ) Тогда
		Если ТипЗнч(ОбъектКИ) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			Для Каждого СтрокаКИ Из ОбъектКИ.КонтактнаяИнформация Цикл
				Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
						СтрПредставление = НСтр("ru='Тел.: '") + СтрокаКИ.Представление;
					ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
						СтрПредставление = НСтр("ru='e-mail: '") + СтрокаКИ.Представление;
					КонецЕсли;
					ТекстНадписи = ТекстНадписи + ?(НЕ ПустаяСтрока(ТекстНадписи), "; ", "") + СтрПредставление;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ОбъектКИ) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			Для Каждого СтрокаКИ Из ОбъектКИ.КонтактнаяИнформация Цикл
				Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					ТекстНадписи = ТекстНадписи + ?(НЕ ПустаяСтрока(ТекстНадписи), "; ", "") + ?(СтрокаКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Телефон,НСтр("ru='Тел.: '"),НСтр("ru='e-mail: '")) + СтрокаКИ.Представление;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	Если ПустаяСтрока(ТекстНадписи) Тогда
		ТекстНадписи = НСтр("ru='Нет избранной контактной информации'");
	КонецЕсли;
	Возврат ТекстНадписи;
КонецФункции // СформироватьНадписьКонтактнойИнформации()

&НаСервере
Функция ДобавитьНовуюКИКонтакта(ТипКИ, ЗначениеКИ)
	
	Если Элементы["Группа" + ТекущийРежим + "КлиентКонтакт"].Видимость Тогда
		// Контакт клиента
		КонтактСсылка = ИнформацияПоИнтересуКонтактноеЛицо;
	Иначе
		// Потенциальный клиент
		КонтактСсылка = ИнформацияПоИнтересуПотенциальныйКлиент;
	КонецЕсли;
	
	Если ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		КонстантаЗначение = Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить();
		ВидЗначение = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
	Иначе
		КонстантаЗначение = Константы.CRM_ОсновнойВидEmailКонтакта.Получить();
		ВидЗначение = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
	КонецЕсли;
	
	КонтактОбъект = КонтактСсылка.ПолучитьОбъект();
	НоваяСтрокаКИ = КонтактОбъект.КонтактнаяИнформация.Добавить();
	НоваяСтрокаКИ.Тип = ТипКИ;
	НоваяСтрокаКИ.Представление = ЗначениеКИ;
	НоваяСтрокаКИ.Вид = ?(ЗначениеЗаполнено(КонстантаЗначение), КонстантаЗначение, ВидЗначение);
	Попытка
		КонтактОбъект.Записать();
		Элементы.ДекорацияТелефонEmail.Заголовок = СформироватьНадписьКонтактнойИнформации(КонтактСсылка);
		Возврат Истина;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось добавить контактную информацию Контакта. Подробности см. в журнале регистрации.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Принятие обращения (Контактная информация контакта не добавлена)'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКЛПоИзКлиента()
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент.CRM_ОсновноеКонтактноеЛицо) Тогда
		ИнформацияПоИнтересуКонтактноеЛицо = ИнформацияПоИнтересуКлиент.CRM_ОсновноеКонтактноеЛицо;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Партнер", ИнформацияПоИнтересуКлиент);
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактныеЛицаПартнеров.Ссылка
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|ГДЕ
			|	КонтактныеЛицаПартнеров.Владелец = &Партнер";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ИнформацияПоИнтересуКонтактноеЛицо = Выборка.Ссылка;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПараметрыПоиска(ЭлементИмя, ЭлементЗначение, Использование, ПриОткрытии = Ложь)
	
	ЭтотОбъект.Заголовок = НСтр("ru = 'Принятие обращения'");
	
	Если НЕ ПриОткрытии Тогда
		ИнформацияПоИнтересуТема = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементИмя) Тогда
		ЭтотОбъект[ЭлементИмя] = СокрЛП(ЭлементЗначение);
		ЭтотОбъект[ЭлементИмя + "Использовать"] = Использование;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ПоискКлиентНаименование) И НЕ ЗначениеЗаполнено(ПоискКлиентТелефон) И НЕ ЗначениеЗаполнено(ПоискКлиентEmail) И НЕ ЗначениеЗаполнено(ДетальныйПоиск)) 
			ИЛИ (НЕ ПоискКлиентНаименованиеИспользовать И НЕ ПоискКлиентТелефонИспользовать И НЕ ПоискКлиентEmailИспользовать И НЕ ДетальныйПоискИспользовать) Тогда
		ДеревоПоиска.ПолучитьЭлементы().Очистить();
		Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
		Элементы.СтраницаПринятьОбращение.Видимость = Ложь;
		Элементы.ПерейтиК.Доступность = Ложь;
		Элементы.ФормаОбращениеПотеряно.Доступность = Ложь;
		Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Принять обращение'") + " (Ctrl+Enter)";
		Возврат;
	Иначе
		Элементы.ГруппаВыполняетсяПоиск.Видимость = Истина;
		ПодключитьОбработчикОжидания("ВыполнитьПоиск", 0.01, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск()
	
	Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
	Элементы.ГруппаВыполняетсяПоиск.Видимость = Истина;
	
	ИнформацияПоИнтересуПотенциальныйКлиент		 = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
	ИнформацияПоИнтересуКонтактноеЛицо			 = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	ИнформацияПоИнтересуКлиент					 = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	ИнформацияПоИнтересуВидВзаимодействия		 = ПредопределенноеЗначение("Справочник.CRM_ВидыВзаимодействий.ПустаяСсылка");
	ДействиеПоИнтересу							 = "";
	ИнформацияПоИнтересуТипУслуги				 = ПредопределенноеЗначение("Справочник.CRM_ТипУслуги.ПустаяСсылка");
	ИнформацияПоИнтересуОтветственный			 = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИнформацияПоИнтересуСостояниеИнтереса		 = ?(НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуСостояниеИнтереса), ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПустаяСсылка"), ИнформацияПоИнтересуСостояниеИнтереса);
	
	Элементы.ДекорацияДобавитьТелефонККонтакту.Заголовок = "";
	Элементы.ДекорацияДобавитьТелефонККонтакту.Видимость = Ложь;
	Элементы.ДекорацияДобавитьПочтуККонтакту.Заголовок = "";
	Элементы.ДекорацияДобавитьПочтуККонтакту.Видимость = Ложь;
	
	ИнформацияПоИнтересуНайденоИнтересов = -1;
	
	СформироватьДанныеПоПоиску();
	РазвернутьВсе(Неопределено);
	
	Если ИнформацияПоИнтересуНайденоИнтересов = 0 ИЛИ ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
		УстановитьПараметрыЭлементовФормы();
		Элементы.ПерейтиК.Доступность = Истина;
		Элементы.ФормаОбращениеПотеряно.Доступность = Истина;
		Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Принять обращение'") + " (Ctrl+Enter)";
		// +Софтфон
		сфпВидимостьИДоступностьГруппыСофтфон();
		// +Софтфон		
	Иначе
		Элементы.СтраницыМастера.ТекущаяСтраница = Элементы.СтраницаПоиск;
		Элементы.СтраницаПринятьОбращение.Видимость = Ложь;
		Элементы.ПерейтиК.Доступность = Ложь;
		Элементы.ФормаОбращениеПотеряно.Доступность = Ложь;
		Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Перейти'") + " (Ctrl+Enter)";
	КонецЕсли;
	
	Элементы.ГруппаВыполняетсяПоиск.Видимость = Ложь;
	
	Если ИнформацияПоИнтересуНайденоИнтересов = 1 Тогда
		ПерейтиК(Неопределено, Истина);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	ЭлементыКлиенты = ДеревоПоиска.ПолучитьЭлементы();
	Для Каждого СтрокаКлиент Из ЭлементыКлиенты Цикл
		ЭлементыКонтакты = СтрокаКлиент.ПолучитьЭлементы();
		Для Каждого СтрокаКонтакт Из ЭлементыКонтакты Цикл
			ИдентификаторСтроки = СтрокаКонтакт.ПолучитьИдентификатор();
			Если СтрокаКонтакт.Объект = НСтр("ru = 'Прочие контакты и интересы'") Тогда
				Элементы.ДеревоПоиска.Свернуть(ИдентификаторСтроки);
			Иначе
				Элементы.ДеревоПоиска.Развернуть(ИдентификаторСтроки, Истина);
			КонецЕсли;
			ИдентификаторСтроки = СтрокаКлиент.ПолучитьИдентификатор();
			Элементы.ДеревоПоиска.Развернуть(ИдентификаторСтроки, Ложь);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСовсемВсе(Команда)
	ЭлементыКлиенты = ДеревоПоиска.ПолучитьЭлементы();
	Для Каждого СтрокаКлиент Из ЭлементыКлиенты Цикл
		ИдентификаторСтроки = СтрокаКлиент.ПолучитьИдентификатор();
		Элементы.ДеревоПоиска.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	//Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
		ЭлементыДерева = ДеревоПоиска.ПолучитьЭлементы();
	//Иначе
	//	ЭлементыДерева = Команда;
	//КонецЕсли;
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
		Элементы.ДеревоПоиска.Свернуть(ИдентификаторСтроки);
		//Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
		//	СвернутьВсе(СтрокаДерева.ПолучитьЭлементы());
		//КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъект(Команда)
	тДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
	Если тДанные <> Неопределено Тогда
		Если тДанные.Ссылка <> "ПрочиеКонтакты" И тДанные.Ссылка <> "НовыйКлиент" Тогда
			ПоказатьЗначение(, тДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыЭлементовФормы()
	
	Если ЗначениеЗаполнено(ТекущийРежим) Тогда
		Элементы["Группа" + ТекущийРежим].Видимость = Ложь;
	КонецЕсли;
	СменаРежимаНаНовый = ТекущийРежим = "ТекущийИнтерес_1" И (ТекущийРежим <> РежимВводаОбращения);
	ТекущийРежим = РежимВводаОбращения;
	Элементы["Группа" + ТекущийРежим].Видимость = Истина;
	
	ИнформацияПоИнтересуСоздаватьИнтерес = Ложь;
	ИнформацияПоИнтересуСоздаватьКонтакт = Ложь;
	ИнформацияПоИнтересуСоздаватьКлиента = Ложь;
	ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента = Ложь;
	Элементы.ДекорацияТелефонEmail.Заголовок = "";
	Элементы.Ответственный.ТолькоПросмотр = (ТекущийРежим = "ТекущийИнтерес_1");
	Элементы.ТипУслуги.ТолькоПросмотр = (ТекущийРежим = "ТекущийИнтерес_1");
	
	Если ТекущийРежим = "ТекущийИнтерес_1" Тогда
		ЗаполнитьИнформациюВыбранногоИнтереса(ИнформацияПоИнтересуСсылка, Ложь);
	Иначе
		ЗаполнитьИнформациюВыбранногоИнтереса(Неопределено, Истина, СменаРежимаНаНовый);
		ИнформацияПоИнтересуСоздаватьИнтерес = Истина;
		Если ТекущийРежим = "НовыйКонтакт_3" Тогда
			ИнформацияПоИнтересуСоздаватьКонтакт = ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент);
			ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента = ВыбранПотенциальныйКлиент ИЛИ НЕ ИнформацияПоИнтересуСоздаватьКонтакт;
			//ИнформацияПоИнтересуСоздаватьКлиента = Ложь;
		//ИначеЕсли ТекущийРежим = "НовыйКлиент_4" Тогда
			//Если РежимВводаКлиента = "ПотенциальныйКлиент" Тогда
				//ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента = Истина;
				//ИнформацияПоИнтересуСоздаватьКонтакт = Ложь;
				//ИнформацияПоИнтересуСоздаватьКлиента = Ложь;
			//Иначе
			//	РежимВводаКлиента = "КлиентКонтакт";
			//	ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента = Ложь;
			//	ИнформацияПоИнтересуСоздаватьКонтакт = Истина;
				//ИнформацияПоИнтересуСоздаватьКлиента = Истина;
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента Тогда
		ИнформацияПоИнтересуПотенциальныйКлиент = ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка");
	КонецЕсли;
	Если ИнформацияПоИнтересуСоздаватьКонтакт Тогда
		ИнформацияПоИнтересуКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	КонецЕсли;
	Если ИнформацияПоИнтересуСоздаватьКлиента Тогда
		ИнформацияПоИнтересуКлиент = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	КонецЕсли;
	
	//Элементы["Группа" + ТекущийРежим + "КлиентКонтакт"].Видимость = (ТекущийРежим = "НовыйКлиент_4" И (ИнформацияПоИнтересуСоздаватьКлиента ИЛИ ИнформацияПоИнтересуСоздаватьКонтакт))
	//															ИЛИ (ТекущийРежим <> "НовыйКлиент_4" И (ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) ИЛИ ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо)));
	Элементы["Группа" + ТекущийРежим + "КлиентКонтакт"].Видимость = (ТекущийРежим = "НовыйКонтакт_3" И ИнформацияПоИнтересуСоздаватьКонтакт)
																ИЛИ (ТекущийРежим <> "НовыйКонтакт_3" И (ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент)));
	Элементы["Группа" + ТекущийРежим + "ПотенциальныйКлиент"].Видимость = НЕ Элементы["Группа" + ТекущийРежим + "КлиентКонтакт"].Видимость;
	Элементы.ДекорацияОтступКлиент.Видимость = Элементы["Группа" + ТекущийРежим + "КлиентКонтакт"].Видимость;
	
	Если Элементы["Группа" + ТекущийРежим + "ПотенциальныйКлиент"].Видимость Тогда
		Элементы.РежимВводаОбращения.СписокВыбора.НайтиПоЗначению("НовыйКонтакт_3").Представление = НСтр("ru = 'Новый Потенциальный клиент+Интерес'");
	Иначе
		Элементы.РежимВводаОбращения.СписокВыбора.НайтиПоЗначению("НовыйКонтакт_3").Представление = НСтр("ru = 'Новый Контакт+Интерес'");
	КонецЕсли;
	ПоискКлиентКонтактнаяИнформацияПриИзменении(Неопределено);
	
	ОбъектКИ = ?(ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо), ИнформацияПоИнтересуКонтактноеЛицо, ИнформацияПоИнтересуПотенциальныйКлиент);
	Элементы.ДекорацияТелефонEmail.Заголовок = СформироватьНадписьКонтактнойИнформации(ОбъектКИ);
	
	Если ЗначениеЗаполнено(ПоискКлиентТелефон) Тогда
		Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
			Если ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) Тогда
				ВидимостьКнопки = сфпВидимостьКнопкиДобавитьТелефонУКонтакта(ИнформацияПоИнтересуКонтактноеЛицо);
			ИначеЕсли ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) Тогда
				ВидимостьКнопки = сфпВидимостьКнопкиДобавитьТелефонУКонтакта(ИнформацияПоИнтересуПотенциальныйКлиент);
			Иначе
				ВидимостьКнопки = Ложь;
			КонецЕсли;
			Элементы.ДекорацияДобавитьТелефонККонтакту.Видимость = ВидимостьКнопки;
		Иначе
			Элементы.ДекорацияДобавитьТелефонККонтакту.Видимость = (Найти(ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(Элементы.ДекорацияТелефонEmail.Заголовок), ОтправкаSMSЧерезSMS4B.УбратьЛишниеСимволыТелефона(ПоискКлиентТелефон)) = 0)
				И (ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) ИЛИ ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент));
		КонецЕсли;
		Если Элементы.ДекорацияДобавитьТелефонККонтакту.Видимость Тогда
			Элементы.ДекорацияДобавитьТелефонККонтакту.Заголовок = НСтр("ru = 'Добавить '") + ПоискКлиентТелефон;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоискКлиентEmail) Тогда
		Элементы.ДекорацияДобавитьПочтуККонтакту.Видимость = (Найти(Элементы.ДекорацияТелефонEmail.Заголовок, ПоискКлиентEmail) = 0)
																И (ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) ИЛИ ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент));
		Если Элементы.ДекорацияДобавитьПочтуККонтакту.Видимость Тогда
			Элементы.ДекорацияДобавитьПочтуККонтакту.Заголовок = НСтр("ru = 'Добавить '") + ПоискКлиентEmail;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Тема.ТолькоПросмотр = НЕ ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьЗаголовокОфисПодразделение(Ответственный)
	ПодразделениеОтветственного 	= Ответственный.Подразделение;
	ОфисОтветственного 				= ПодразделениеОтветственного.CRM_Офис;
	ТекстЗаголовка 					= ?(ЗначениеЗаполнено(ОфисОтветственного), ОфисОтветственного.Наименование, НСтр("ru = 'не указан'")) 
		+ " | " + ?(ЗначениеЗаполнено(ПодразделениеОтветственного), ПодразделениеОтветственного.Наименование, НСтр("ru = 'не указано'")); 
	Возврат ТекстЗаголовка;
КонецФункции

&НаСервере
Процедура ЗаполнитьИнформациюВыбранногоИнтереса(Ссылка, ЭтоНовый, СменаРежимаНаНовый = Ложь)
	
	ИнформацияПоИнтересуСсылка = Ссылка;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	CRM_ВидыВзаимодействий.Ссылка
		|ИЗ
		|	Справочник.CRM_ВидыВзаимодействий КАК CRM_ВидыВзаимодействий
		|ГДЕ
		|	CRM_ВидыВзаимодействий.СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПервичныйИнтерес)
		|	И CRM_ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
		|	И CRM_ВидыВзаимодействий.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Интерес)
		|	И НЕ CRM_ВидыВзаимодействий.Предопределенный"; 
	
	Если ЗначениеЗаполнено(ОснованиеОбращения) Тогда
		Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			Запрос.УстановитьПараметр("ВидСобытия", Перечисления.CRM_ВидыСобытий.ТелефонныйЗвонок);
		ИначеЕсли ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			Запрос.УстановитьПараметр("ВидСобытия", Перечисления.CRM_ВидыСобытий.ЭлектронноеПисьмо);
		ИначеЕсли ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			Запрос.УстановитьПараметр("ВидСобытия", Перечисления.CRM_ВидыСобытий.Прочее);
		КонецЕсли;
		Если Запрос.Параметры.Свойство("ВидСобытия") Тогда
			Запрос.Текст = Запрос.Текст+ "
				|	И CRM_ВидыВзаимодействий.ВидСобытия = &ВидСобытия"; 
		КонецЕсли;
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 1 Тогда
		ИнформацияПоИнтересуВидВзаимодействия	= РезультатЗапроса[0].Ссылка;
		ДействиеПоИнтересу						= ИнформацияПоИнтересуВидВзаимодействия.Описание;
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		Если ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) И ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент.ОсновнойМенеджер) Тогда
			ИнформацияПоИнтересуОтветственный	= ИнформацияПоИнтересуКлиент.ОсновнойМенеджер;
		Иначе
			ИнформацияПоИнтересуОтветственный	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуОтветственный) Тогда
			ИнформацияПоИнтересуОтветственный	= ТекущийПользователь;
		КонецЕсли;
		Если СменаРежимаНаНовый Тогда
			ИнформацияПоИнтересуТема = "";
			ИнформацияПоИнтересуТипУслуги = Справочники.CRM_ТипУслуги.ПустаяСсылка();
		КонецЕсли;
		//Если ЗначениеЗаполнено(ИнформацияПоИнтересуСостояниеИнтереса) Тогда
		//	ИнформацияПоИнтересуСостояниеИнтереса	= ИнформацияПоИнтересуСостояниеИнтереса;
		//Иначе
			ИнформацияПоИнтересуСостояниеИнтереса	= Справочники.CRM_СостоянияИнтересов.ПервичныйИнтерес;
		//КонецЕсли;	
		Элементы.ДекорацияОфисПодразделение.Заголовок	= ОбновитьЗаголовокОфисПодразделение(ИнформацияПоИнтересуОтветственный);
		ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ИнформацияПоИнтересуДатаСледующегоВзаимодействия 	= Ссылка.СрокИсполнения;
		ИнформацияПоИнтересуОписание 						= Ссылка.Описание;
		ИнформацияПоИнтересуОтветственный 					= Ссылка.БизнесПроцесс.Ответственный;
		//ИнформацияПоИнтересуПричинаОтказа 					= Ссылка.ПричинаОтказа;
		//ИнформацияПоИнтересуТипУслуги 						= Ссылка.ТипУслуги;
		//ИнформацияПоИнтересуСостояниеИнтереса 				= ?(УстановитьНовоеСостояниеИнтереса И ЗначениеЗаполнено(ИнформацияПоИнтересуСостояниеИнтереса), ИнформацияПоИнтересуСостояниеИнтереса, Ссылка.СостояниеИнтереса);
		ИнформацияПоИнтересуСостояниеИнтереса 				= Ссылка.CRM_ТочкаМаршрута;
		ИнформацияПоИнтересуТема 							= ?(ЭтоНовый И ЗначениеЗаполнено(ИнформацияПоИнтересуТема), ИнформацияПоИнтересуТема, Ссылка.Наименование);
		Если Не ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
			ИнформацияПоИнтересуКлиент						= Ссылка.БизнесПроцесс.Партнер;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) Тогда
			ИнформацияПоИнтересуКонтактноеЛицо				= Ссылка.БизнесПроцесс.КонтактноеЛицо;
		КонецЕсли;
		
		Элементы.ДекорацияОфисПодразделение.Заголовок 	= ОбновитьЗаголовокОфисПодразделение(ИнформацияПоИнтересуОтветственный);
		
		Если Ссылка.Автор = ТекущийПользователь Тогда
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= Истина;
		ИначеЕсли ИнформацияПоИнтересуОтветственный = ТекущийПользователь Тогда
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= Истина;
		ИначеЕсли ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= CRM_УправлениеДоступомВызовСервера.ЕстьДоступУровняАккаунтМенеджера(ИнформацияПоИнтересуКлиент);
		Иначе
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= Ложь;
		КонецЕсли;
		
		Элементы.ТипУслуги.АвтоОтметкаНезаполненного = Ложь;
	Иначе
		ИнформацияПоИнтересуДатаСледующегоВзаимодействия 	= Ссылка.ДатаСледующегоДействия;
		ИнформацияПоИнтересуОписание 						= Ссылка.Описание;
		ИнформацияПоИнтересуОтветственный 					= Ссылка.Ответственный;
		ИнформацияПоИнтересуПричинаОтказа 					= Ссылка.ПричинаОтказа;
		ИнформацияПоИнтересуТипУслуги 						= Ссылка.ТипУслуги;
		ИнформацияПоИнтересуСостояниеИнтереса 				= ?(УстановитьНовоеСостояниеИнтереса И ЗначениеЗаполнено(ИнформацияПоИнтересуСостояниеИнтереса), ИнформацияПоИнтересуСостояниеИнтереса, Ссылка.СостояниеИнтереса);
		ИнформацияПоИнтересуТема 							= ?(ЭтоНовый И ЗначениеЗаполнено(ИнформацияПоИнтересуТема), ИнформацияПоИнтересуТема, Ссылка.Тема);
		Если Не ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
			ИнформацияПоИнтересуКлиент						= Ссылка.Партнер;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) Тогда
			ИнформацияПоИнтересуКонтактноеЛицо				= Ссылка.КонтактноеЛицо;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) Тогда
			ИнформацияПоИнтересуПотенциальныйКлиент			= Ссылка.ПотенциальныйКлиент;
		КонецЕсли;
		
		Элементы.ДекорацияОфисПодразделение.Заголовок 	= ОбновитьЗаголовокОфисПодразделение(ИнформацияПоИнтересуОтветственный);
		
		Если Ссылка.Автор = ТекущийПользователь Тогда
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= Истина;
		ИначеЕсли ИнформацияПоИнтересуОтветственный = ТекущийПользователь Тогда
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= Истина;
		ИначеЕсли ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= CRM_УправлениеДоступомВызовСервера.ЕстьДоступУровняАккаунтМенеджера(ИнформацияПоИнтересуКлиент);
		Иначе
			ИнформацияПоИнтересуЕстьДоступУровняАккаунтМенеджера	= Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьПроцессНаСервере()
	
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) И ИнформацияПоИнтересуКлиент.ЭтоГруппа Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Стартовать процесс для группы клиентов нельзя!'"));
		ИнформацияПоИнтересуЗаписан = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭтоПроцесс = (ТипЗнч(Процесс) = Тип("СправочникСсылка.Проекты"));
	
	Попытка
		НачатьТранзакцию();
		
		НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
		НовыйБизнесПроцесс.Дата						= ТекущаяДатаСеанса();
		НовыйБизнесПроцесс.ДатаСтарта				= ТекущаяДатаСеанса();
		НовыйБизнесПроцесс.Организация				= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ОсновнаяОрганизация");;
		НовыйБизнесПроцесс.Партнер					= ?(ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент), ИнформацияПоИнтересуКлиент, ИнформацияПоИнтересуКонтактноеЛицо.Владелец);
		НовыйБизнесПроцесс.ПотенциальныйКлиент		= ИнформацияПоИнтересуПотенциальныйКлиент;
		НовыйБизнесПроцесс.КонтактноеЛицо			= ИнформацияПоИнтересуКонтактноеЛицо;
		НовыйБизнесПроцесс.Важность					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		НовыйБизнесПроцесс.Автор					= ТекущийПользователь;
		НовыйБизнесПроцесс.Ответственный			= ИнформацияПоИнтересуОтветственный;
		
		НовыйБизнесПроцесс.Наименование				= ИнформацияПоИнтересуТема;
		Если ЭтоПроцесс Тогда
		НовыйБизнесПроцесс.Проект					= Процесс;
		КонецЕсли;
		НовыйБизнесПроцесс.Описание					= ИнформацияПоИнтересуОписание;
		Если ЭтоПроцесс Тогда
		НовыйБизнесПроцесс.КартаМаршрута			= Процесс.CRM_КартаМаршрута;
		НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= Процесс.CRM_КартаМаршрута.НомерВерсии;
		Иначе
		НовыйБизнесПроцесс.КартаМаршрута			= Процесс;
		НовыйБизнесПроцесс.НомерВерсииКартыМаршрута	= Процесс.НомерВерсии;
		КонецЕсли;
		СписокТочекСтарта							= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(НовыйБизнесПроцесс.КартаМаршрута);
		НовыйБизнесПроцесс.ТочкаСтарта				= СписокТочекСтарта[0].Значение;
		НовыйБизнесПроцесс.Записать();
		НовыйБизнесПроцесс.Старт();
		
		Если НЕ НовыйБизнесПроцесс.Стартован Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось стартовать процесс. Подробности см. в журнале регистрации.'");
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("БизнесПроцесс", НовыйБизнесПроцесс.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ИнформацияПоИнтересуСсылка = Выборка.Ссылка;
			ИнформацияПоИнтересуЗадача = Выборка.Ссылка;
		Иначе
			ВызватьИсключение НСтр("ru = 'Не обнаружена задача стартованного процесса.'");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ИнформацияПоИнтересуЗаписан = Ложь;
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось стартовать процесс. Подробности см. в журнале регистрации.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Принятие обращения (Процесс не стартован)'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗадачуПроцессаНаСервере(НовыйБизнесПроцесс)
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("БизнесПроцесс", НовыйБизнесПроцесс);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ИнформацияПоИнтересуСсылка = Выборка.Ссылка;
			ИнформацияПоИнтересуЗадача = Выборка.Ссылка;
		Иначе
			ВызватьИсключение НСтр("ru = 'Не обнаружена задача стартованного процесса.'");
		КонецЕсли;
	Исключение
		ИнформацияПоИнтересуЗаписан = Ложь;
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось стартовать процесс. Подробности см. в журнале регистрации.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Принятие обращения (Процесс не стартован)'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьИнтересНаСервере()
	
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) И ИнформацияПоИнтересуКлиент.ЭтоГруппа Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Создать интерес для группы клиентов нельзя!'"));
		ИнформацияПоИнтересуЗаписан = Ложь;
		Возврат;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		ОбъектИнтерес							 = Документы.CRM_Интерес.СоздатьДокумент();
		ОбъектИнтерес.Дата						 = ТекущаяДатаСеанса();
		ОбъектИнтерес.Автор						 = ТекущийПользователь;
		ОбъектИнтерес.СостояниеИнтереса			 = Справочники.CRM_СостоянияИнтересов.ПервичныйИнтерес;
		ОбъектИнтерес.ДатаСледующегоДействия	 = ИнформацияПоИнтересуДатаСледующегоВзаимодействия;
		ОбъектИнтерес.Партнер					 = ?(ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент), ИнформацияПоИнтересуКлиент, ИнформацияПоИнтересуКонтактноеЛицо.Владелец);
		ОбъектИнтерес.КонтактноеЛицо			 = ИнформацияПоИнтересуКонтактноеЛицо;
		ОбъектИнтерес.ДокументОснование			 = ИнформацияПоИнтересуДокументОснование;
		ОбъектИнтерес.Описание					 = ИнформацияПоИнтересуОписание;
		ОбъектИнтерес.СледующееДействиеПредставление = Формат(ДатаВходящегоОбращения,"ДФ=dd.MM.yyyy") + " | " + ДействиеПоИнтересу;
		
		ОбъектИнтерес.Ответственный				 = ИнформацияПоИнтересуОтветственный;
		Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если ЗначениеЗаполнено(ОбъектИнтерес.Партнер) И ЗначениеЗаполнено(ОбъектИнтерес.Ответственный["CRM_УровеньДоступа"])
				 И ОбъектИнтерес.Партнер["CRM_УровниДоступа"].Найти(ОбъектИнтерес.Ответственный["CRM_УровеньДоступа"],"УровеньДоступа") = Неопределено И ОбъектИнтерес.Партнер["CRM_УровниДоступа"].Количество() > 0 Тогда
			
				ПартнерОбъект = ОбъектИнтерес.Партнер.ПолучитьОбъект();
				НоваяСтрокаУровня = ПартнерОбъект["CRM_УровниДоступа"].Добавить();
				НоваяСтрокаУровня["УровеньДоступа"]= ОбъектИнтерес.Ответственный["CRM_УровеньДоступа"];
				ПартнерОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ОбъектИнтерес.Подразделение				 = ОбъектИнтерес.Ответственный.Подразделение;
		ОбъектИнтерес.Офис						 = ОбъектИнтерес.Подразделение.CRM_Офис;
		ОбъектИнтерес.ПотенциальныйКлиент		 = ИнформацияПоИнтересуПотенциальныйКлиент;
		ОбъектИнтерес.ПричинаОтказа				 = ИнформацияПоИнтересуПричинаОтказа;
		ОбъектИнтерес.ТипУслуги					 = ИнформацияПоИнтересуТипУслуги;
		ОбъектИнтерес.СостояниеИнтереса			 = ИнформацияПоИнтересуСостояниеИнтереса;
		ОбъектИнтерес.Тема						 = ИнформацияПоИнтересуТема;
		ОбъектИнтерес.ДатаСледующегоДействия	 = ДатаВходящегоОбращения;
		ОбъектИнтерес.Организация				 = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ОсновнаяОрганизация");
		
		ОбъектИнтерес.Записать();
		Если ЗначениеЗаполнено(ИнформацияПоИнтересуКаналПервичногоИнтереса) Тогда
			Менеджер = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
			Менеджер.Период = ОбъектИнтерес.Дата;
			Менеджер.Сделка = ОбъектИнтерес.Ссылка;
			Менеджер.Партнер = ?(ОбъектИнтерес.Партнер.Пустая(), ОбъектИнтерес.ПотенциальныйКлиент, ОбъектИнтерес.Партнер);
			Менеджер.КаналПервичногоИнтереса = ИнформацияПоИнтересуКаналПервичногоИнтереса;
			Менеджер.ИсточникПервичногоИнтереса = ИнформацияПоИнтересуИсточникПервичногоИнтереса;
			Менеджер.Записать(Истина);
		КонецЕсли;	
		ИнформацияПоИнтересуСсылка = ОбъектИнтерес.Ссылка;
		Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			ЗвонокОбъект = ОснованиеОбращения.ПолучитьОбъект();
			ЗвонокОбъект.УдалитьПредмет = ИнформацияПоИнтересуСсылка;
			ЗвонокОбъект.Записать();
		ИначеЕсли ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			Контакт = Неопределено;
			Если ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) Тогда
				Контакт = ИнформацияПоИнтересуКонтактноеЛицо;
			ИначеЕсли ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент) Тогда
				Контакт = ИнформацияПоИнтересуКлиент;
			ИначеЕсли ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) Тогда
				Контакт = ИнформацияПоИнтересуПотенциальныйКлиент;
			КонецЕсли;
			Если ЗначениеЗаполнено(Контакт) Тогда
				CRM_РаботаСМессенджерамиСервер.СвязатьВсеСообщенияПользователяСКонтактом(ОснованиеОбращения.УчетнаяЗапись.ТипМессенджера, ОснованиеОбращения.ID_Пользователя, Контакт);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ИнформацияПоИнтересуЗаписан = Ложь;
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать интерес. Подробности см. в журнале регистрации.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Принятие обращения (Интерес не создан)'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ЗарегистрироватьПотенциальногоКлиентаНаСервере()
	
	НовыйПотенциальныйКлиент = Справочники.CRM_ПотенциальныеКлиенты.СоздатьЭлемент();
	НовыйПотенциальныйКлиент.Наименование = ПоискКлиентНаименование;
	
	Если ЗначениеЗаполнено(ПоискКлиентТелефон) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, ПоискКлиентТелефон, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовыйПотенциальныйКлиент, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоискКлиентEmail) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.CRM_EmailПотенциальногоКлиента;
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, ПоискКлиентEmail, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовыйПотенциальныйКлиент, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторМессенджера) И ЗначениеЗаполнено(ОснованиеОбращения) И ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		ВидКИ = CRM_РаботаСМессенджерамиСервер.ПолучитьВидКИМессенджера(ОснованиеОбращения.УчетнаяЗапись, НовыйПотенциальныйКлиент.Ссылка);
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое;
		
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовыйПотенциальныйКлиент, ИдентификаторМессенджера, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Попытка
		НовыйПотенциальныйКлиент.Записать();
		Возврат НовыйПотенциальныйКлиент.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать нового потенциального клиента. Подробности см. в журнале регистрации.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Принятие обращения (Потенциальный клиент не создан)'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Справочники.CRM_ПотенциальныеКлиенты.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ЗарегистрироватьКонтактноеЛицоНаСервере(Контрагент)
	
	НовоеКЛ = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
	//НовоеКЛ.Наименование = ?(РежимВводаОбращения = "НовыйКлиент_4", ПоискКлиентНаименование2, ПоискКлиентНаименование);
	НовоеКЛ.Наименование = ПоискКлиентНаименование;
	НовоеКЛ.Владелец = Контрагент; 
	НовоеКЛ.Автор = Пользователи.АвторизованныйПользователь();
	
	Если ЗначениеЗаполнено(ПоискКлиентТелефон) Тогда
		КонстантаТелефон = Константы.CRM_ОсновнойВидТелефонаКонтакта.Получить();
		ВидКИ = ?(ЗначениеЗаполнено(КонстантаТелефон), КонстантаТелефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон;
		
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, ПоискКлиентТелефон, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовоеКЛ, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоискКлиентEmail) Тогда
		КонстантаПочта = Константы.CRM_ОсновнойВидEmailКонтакта.Получить();
		ВидКИ = ?(ЗначениеЗаполнено(КонстантаПочта), КонстантаПочта, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		
		СтруктураПолейКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(ВидКИ);
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураПолейКИ, ПоискКлиентEmail, ВидКИ);
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовоеКЛ, ДанныеКИ, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторМессенджера) И ЗначениеЗаполнено(ОснованиеОбращения) И ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		ВидКИ = CRM_РаботаСМессенджерамиСервер.ПолучитьВидКИМессенджера(ОснованиеОбращения.УчетнаяЗапись, НовоеКЛ.Ссылка);
		ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое;
		
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НовоеКЛ, ИдентификаторМессенджера, ВидКИ, ТипКИ);
	КонецЕсли;
	
	Попытка
		НовоеКЛ.Записать();
		Возврат НовоеКЛ.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать контактное лицо клиента. Подробности см. в журнале регистрации.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Принятие обращения (Контакт не создан)'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ЗарегистрироватьКлиентаНаСервере()
	
	НовыйКлиент = Справочники.Партнеры.СоздатьЭлемент();
	НовыйКлиент.УстановитьСсылкуНового(Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор));
	
	НовыйКлиент.Наименование = ПоискКлиентНаименование;
	НовыйКлиент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания; 
	НовыйКлиент.ОсновнойМенеджер = ?(ЗначениеЗаполнено(CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный")),
														CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный"),
														ТекущийПользователь);; 
	НовыйКлиент.CRM_ОсновноеКонтактноеЛицо = ЗарегистрироватьКонтактноеЛицоНаСервере(НовыйКлиент.ПолучитьСсылкуНового());
	
	Попытка
		НовыйКлиент.Записать();
		Возврат НовыйКлиент.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать клиента. Подробности см. в журнале регистрации.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Принятие обращения (Клиент не создан)'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Справочники.Партнеры.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ОбработатьКонтактыНаСервере()
	
	Если ИнформацияПоИнтересуСоздаватьПотенциальногоКлиента Тогда
		ИнформацияПоИнтересуПотенциальныйКлиент = ЗарегистрироватьПотенциальногоКлиентаНаСервере();
	КонецЕсли;
	
	Если ИнформацияПоИнтересуСоздаватьКлиента Тогда
		ИнформацияПоИнтересуКлиент = ЗарегистрироватьКлиентаНаСервере();
	КонецЕсли;
	
	Если ИнформацияПоИнтересуСоздаватьКонтакт И НЕ ИнформацияПоИнтересуСоздаватьКлиента Тогда
		ИнформацияПоИнтересуКонтактноеЛицо = ЗарегистрироватьКонтактноеЛицоНаСервере(ИнформацияПоИнтересуКлиент); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьОбращениеНаСервере()
	
	Если ИнформацияПоИнтересуСоздаватьИнтерес Тогда
		Если СтартуемБизнесПроцесс Тогда
			
			//ЗарегистрироватьПроцессНаСервере();
			
		Иначе
			ЗарегистрироватьИнтересНаСервере();
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Интерес",				ИнформацияПоИнтересуСсылка);
			Запрос.УстановитьПараметр("CRM_СостояниеИнтереса",	ИнформацияПоИнтересуСсылка.СостояниеИнтереса);
			Запрос.УстановитьПараметр("Исполнитель",			ИнформацияПоИнтересуСсылка.Ответственный);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗадачаИсполнителя.Ссылка КАК Задача,
			|	ЗадачаИсполнителя.CRM_СостояниеИнтереса КАК СостояниеИнтереса
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
			//|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса = &CRM_СостояниеИнтереса
			|	И ЗадачаИсполнителя.Исполнитель = &Исполнитель
			|	И НЕ ЗадачаИсполнителя.Выполнена
			|	И НЕ ЗадачаИсполнителя.ПометкаУдаления";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ИнформацияПоИнтересуЗадача = Выборка.Задача;
				Если НЕ ИнформацияПоИнтересуСсылка.СостояниеИнтереса = Выборка.СостояниеИнтереса Тогда
					ИнтересОбъект = ИнформацияПоИнтересуСсылка.ПолучитьОбъект();
					ИнтересОбъект.СостояниеИнтереса = Выборка.СостояниеИнтереса;
					ИнтересОбъект.ОбменДанными.Загрузка = Истина;
					ИнтересОбъект.Записать();
					
					ИнформацияПоИнтересуСостояниеИнтереса = ИнформацияПоИнтересуСсылка.СостояниеИнтереса;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СоздатьВзаимодействиеНаСервере()
	
	Если НЕ ИнформацияПоИнтересуЗаписан Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Взаимодействие = Документы.CRM_Взаимодействие.СоздатьДокумент();
	
	Если ТипЗнч(ИнформацияПоИнтересуСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("КонтактноеЛицо", ИнформацияПоИнтересуСсылка.CRM_КонтактноеЛицо);
		СтруктураЗаполнения.Вставить("Партнер", ИнформацияПоИнтересуСсылка.CRM_Партнер);
		СтруктураЗаполнения.Вставить("Подразделение", ИнформацияПоИнтересуСсылка.Исполнитель.Подразделение);
		СтруктураЗаполнения.Вставить("Содержание", "");
		СтруктураЗаполнения.Вставить("ДатаНачала", ТекущаяДатаСеанса());
		СтруктураЗаполнения.Вставить("ВремяС", ТекущаяДатаСеанса());
		СтруктураЗаполнения.Вставить("ВремяПо", ТекущаяДатаСеанса()+60*15);
		
		Взаимодействие.Автор 						= ТекущийПользователь;
		Взаимодействие.Заполнить(СтруктураЗаполнения);
		
		Взаимодействие.Содержание 					= ДействиеПоИнтересу;
		Взаимодействие.ДокументОснование 			= ИнформацияПоИнтересуСсылка;
		Взаимодействие.Организация			 		= ИнформацияПоИнтересуСсылка.БизнесПроцесс.Организация;
		Взаимодействие.СтатусВзаимодействия 		= Справочники.CRM_СостоянияСобытий.Запланировано;
		Взаимодействие.Партнер 						= ?(ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент), ИнформацияПоИнтересуКлиент, Взаимодействие.Партнер);
		Взаимодействие.КонтактноеЛицо 				= ?(ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо), ИнформацияПоИнтересуКонтактноеЛицо, Взаимодействие.КонтактноеЛицо);
		Взаимодействие.ПлановаяДата 				= ДатаВходящегоОбращения;
		Взаимодействие.Дата 						= ТекущаяДатаСеанса();
		Взаимодействие.Ответственный 				= ?(ЗначениеЗаполнено(ИнформацияПоИнтересуОтветственный), ИнформацияПоИнтересуОтветственный, Взаимодействие.Ответственный);
		Взаимодействие.ВидВзаимодействия			= ИнформацияПоИнтересуВидВзаимодействия;
		Взаимодействие.Баллы						= ИнформацияПоИнтересуВидВзаимодействия.Баллы;
		Взаимодействие.Задача						= ИнформацияПоИнтересуСсылка;
		
	Иначе
		Взаимодействие.Автор 						= ТекущийПользователь;
		Если ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) Тогда
			Взаимодействие.ПотенциальныйКлиент 		= ИнформацияПоИнтересуПотенциальныйКлиент;
		Иначе
			Взаимодействие.Заполнить(ИнформацияПоИнтересуСсылка);
		КонецЕсли;
		Взаимодействие.Содержание 					= ДействиеПоИнтересу;
		Взаимодействие.СостояниеИнтереса 			= ИнформацияПоИнтересуСостояниеИнтереса;
		Взаимодействие.ДокументОснование 			= ИнформацияПоИнтересуСсылка;
		Взаимодействие.Организация			 		= ИнформацияПоИнтересуСсылка.Организация;
		Взаимодействие.СтатусВзаимодействия 		= Справочники.CRM_СостоянияСобытий.Запланировано;
		Взаимодействие.Партнер 						= ?(ЗначениеЗаполнено(ИнформацияПоИнтересуКлиент), ИнформацияПоИнтересуКлиент, Взаимодействие.Партнер);
		Взаимодействие.КонтактноеЛицо 				= ?(ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо), ИнформацияПоИнтересуКонтактноеЛицо, Взаимодействие.КонтактноеЛицо);
		Взаимодействие.ПлановаяДата 				= ДатаВходящегоОбращения;
		Взаимодействие.Дата 						= ТекущаяДатаСеанса();
		Взаимодействие.Ответственный 				= ?(ЗначениеЗаполнено(ИнформацияПоИнтересуОтветственный), ИнформацияПоИнтересуОтветственный, Взаимодействие.Ответственный);
		Взаимодействие.Подразделение				= ИнформацияПоИнтересуСсылка.Подразделение;
		Взаимодействие.Организация					= ИнформацияПоИнтересуСсылка.Организация;
		Взаимодействие.ВидВзаимодействия			= ИнформацияПоИнтересуВидВзаимодействия;
		Взаимодействие.Баллы						= ИнформацияПоИнтересуВидВзаимодействия.Баллы;
		
		Если НЕ ИнформацияПоИнтересуСоздаватьИнтерес И НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуЗадача) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Интерес",ИнформацияПоИнтересуСсылка);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗадачаИсполнителя.Ссылка КАК Задача,
			|	ЗадачаИсполнителя.CRM_СостояниеИнтереса КАК СостояниеИнтереса
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
			|	И НЕ ЗадачаИсполнителя.Выполнена
			|	И НЕ ЗадачаИсполнителя.ПометкаУдаления";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ИнформацияПоИнтересуЗадача = Выборка.Задача;
			КонецЕсли;
		КонецЕсли;
		
		Взаимодействие.Задача = ИнформацияПоИнтересуЗадача;
	КонецЕсли;
	
	Попытка
		Взаимодействие.Записать();
		// Связать письмо с интересом
		Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			НаборЗаписей = РегистрыСведений.CRM_ЖурналДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ОснованиеОбращения);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.CRM_Интерес = ИнформацияПоИнтересуСсылка;
				Запись.СостояниеИнтереса = ИнформацияПоИнтересуСостояниеИнтереса;
			КонецЦикла;
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		ИначеЕсли ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			НаборЗаписей = РегистрыСведений.CRM_ЖурналДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ОснованиеОбращения);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.CRM_Интерес = ИнформацияПоИнтересуСсылка;
				Запись.СостояниеИнтереса = ИнформацияПоИнтересуСостояниеИнтереса;
			КонецЦикла;
			Попытка
				НаборЗаписей.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		// Добавляем документ в регистр документов взаимодействия.
		CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие.Ссылка, ОснованиеОбращения);
		
		Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
			ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок")
			ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			
			Если ЗначениеЗаполнено(ОснованиеОбращения) И РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(ОснованиеОбращения) Тогда
				РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ОснованиеОбращения, Справочники.CRM_СостоянияЛидов.Сконвертирован);
			КонецЕсли;
		
		 	ОбъектОбращение = ОснованиеОбращения.ПолучитьОбъект();
			ОбъектОбращение.CRM_СкрытьВАРМ = Истина;
			ОбъектОбращение.Записать();
			
			ТекущийПользователь = Пользователи.АвторизованныйПользователь();
			ОбъектЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			ОбъектЗадача.Автор						= ТекущийПользователь;
			ОбъектЗадача.Исполнитель				= ОбъектЗадача.Автор;
			ОбъектЗадача.ПринятаКИсполнению			= Истина;
			ОбъектЗадача.Наименование				= ОснованиеОбращения.Тема;
			ОбъектЗадача.Дата						= ТекущаяДатаСеанса();
			ОбъектЗадача.ДатаНачала					= ТекущаяДатаСеанса();
			ОбъектЗадача.Выполнена 					= Истина;
			ОбъектЗадача.ДатаИсполнения				= ТекущаяДатаСеанса();
			ОбъектЗадача.СрокИсполнения				= ТекущаяДатаСеанса();
			ОбъектЗадача.CRM_Личная					= Истина;
			ОбъектЗадача.Предмет					= ОснованиеОбращения;
			ОбъектЗадача.ПредметСтрокой				= CRM_БизнесПроцессыИЗадачиСервер.ПредметСтрокой(ОснованиеОбращения);
			ОбъектЗадача.Описание = "Тема: " + ОснованиеОбращения.Тема + "
			|Введено на основании: " + ОснованиеОбращения.Ссылка;
			Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				Если ЗначениеЗаполнено(ОснованиеОбращения.ОтправительКонтакт)	Тогда
					Если ТипЗнч(ОснованиеОбращения.ОтправительКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						ОбъектЗадача.CRM_КонтактноеЛицо		= ОснованиеОбращения.ОтправительКонтакт;
						ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
					ИначеЕсли ТипЗнч(ОснованиеОбращения.ОтправительКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
						ОбъектЗадача.CRM_Партнер			= ОснованиеОбращения.ОтправительКонтакт;
						ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
				Если ЗначениеЗаполнено(ОснованиеОбращения.АбонентКонтакт)	Тогда
					Если ТипЗнч(ОснованиеОбращения.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						ОбъектЗадача.CRM_КонтактноеЛицо		= ОснованиеОбращения.АбонентКонтакт;
						ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
					ИначеЕсли ТипЗнч(ОснованиеОбращения.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") Тогда
						ОбъектЗадача.CRM_Партнер			= ОснованиеОбращения.АбонентКонтакт;
						ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
				Если ЗначениеЗаполнено(ОснованиеОбращения.Контакт)	Тогда
					Если ТипЗнч(ОснованиеОбращения.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
						ОбъектЗадача.CRM_КонтактноеЛицо		= ОснованиеОбращения.Контакт;
						ОбъектЗадача.CRM_Партнер			= ОбъектЗадача.CRM_КонтактноеЛицо.Владелец;
					ИначеЕсли ТипЗнч(ОснованиеОбращения.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
						ОбъектЗадача.CRM_Партнер			= ОснованиеОбращения.Контакт;
						ОбъектЗадача.CRM_КонтактноеЛицо		= ОбъектЗадача.CRM_Партнер.CRM_ОсновноеКонтактноеЛицо;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//
			ОбъектЗадача.Записать();
			
			НовыйМенеджерЗаписи = РегистрыСведений.CRM_АРМ_ПорядокОбъектов.СоздатьМенеджерЗаписи();
			НовыйМенеджерЗаписи.Пользователь = ТекущийПользователь;
			НовыйМенеджерЗаписи.НаименованиеАРМ = "Мои дела";
			НовыйМенеджерЗаписи.ВоронкаАРМ = Справочники.CRM_ВоронкиПродаж.ПустаяСсылка();
			НовыйМенеджерЗаписи.ИзмерениеАРМ = "Входящие";
			НовыйМенеджерЗаписи.Объект = ОснованиеОбращения;
			НовыйМенеджерЗаписи.Прочитать();
			НовыйМенеджерЗаписи.Удалить();
		КонецЕсли;
		
		Возврат Взаимодействие.Ссылка;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось создать взаимодействие. Подробности см. в журнале регистрации.'"));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Принятие обращения (Взаимодействие не создано)'"), 
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбработатьПотерюОбращенияНаСервере(ДатаВходящегоОбращения, ПричинаОтказаСсылка, КомментарийСтрока, Клиент, КонтактноеЛицо, ПотКлиент)
	
	ДатаЗавершенияОбработки = ТекущаяДатаСеанса();
	ПринялПользователь		= Пользователи.ТекущийПользователь();
	
	// запись взаимодействия
	Взаимодействие = Документы.CRM_Взаимодействие.СоздатьДокумент();
	Взаимодействие.Дата							= ТекущаяДатаСеанса();
	Взаимодействие.Содержание					= НСтр("ru = 'Обращение потеряно'");
	Взаимодействие.Партнер						= Клиент;
	Взаимодействие.КонтактноеЛицо				= КонтактноеЛицо;
	Взаимодействие.ПотенциальныйКлиент			= ПотКлиент;
	Взаимодействие.Автор						= ПринялПользователь;
	Взаимодействие.Результат					= ПричинаОтказаСсылка.Наименование;
	Взаимодействие.Содержание					= КомментарийСтрока;
	Взаимодействие.Ответственный				= ПринялПользователь;
	Взаимодействие.ВидВзаимодействия			= Справочники.CRM_ВидыВзаимодействий.ПотеряОбращения;
	Взаимодействие.СтатусВзаимодействия			= Справочники.CRM_СостоянияСобытий.Отменено;
	Взаимодействие.СостояниеИнтереса			= Справочники.CRM_СостоянияИнтересов.ПервичныйИнтерес;
	Взаимодействие.ПлановаяДата					= ДатаВходящегоОбращения;
	//Взаимодействие.ПлановаяДатаПо				= ДатаЗавершенияОбработки;
	Взаимодействие.НаВесьДень					= Ложь;
	Взаимодействие.ДатаЗавершенияВзаимодействия	= ДатаЗавершенияОбработки;
	//Взаимодействие.Результат					= КомментарийСтрока;
	Взаимодействие.Организация 		  	 		= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
	
	Попытка
		Взаимодействие.Записать();
		Возврат Взаимодействие.Ссылка;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура CRM_ДобавитьИнтересНаСервере(ВходящееПисьмо, Интерес)
	
	ВходящееПисьмоОбъект = ВходящееПисьмо.ПолучитьОбъект();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаИнтерес" , Интерес);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	CRM_Интерес.Ссылка,
	               |	CRM_Интерес.СостояниеИнтереса,
	               |	ЛОЖЬ КАК ВведенНаОсновании,
	               |	ИСТИНА КАК ОсновнойИнтерес
	               |ИЗ
	               |	Документ.CRM_Интерес КАК CRM_Интерес
	               |ГДЕ
	               |	CRM_Интерес.Ссылка = &СсылкаИнтерес
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_Интерес.Дата УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
	Если ТаблицаСвязей.Количество() > 0 Тогда
		ВходящееПисьмоОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",ТаблицаСвязей);
	КонецЕсли;
	ВходящееПисьмоОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура СтраницыМастераПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Элементы.ПерейтиК.Доступность = Истина;
	Элементы.ФормаОбращениеПотеряно.Доступность = Истина;
	Если ТекущаяСтраница = Элементы.СтраницаПоиск Тогда
		тСсылка = ?(Элементы.ДеревоПоиска.ТекущиеДанные = Неопределено, Неопределено, Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка);
		Если тСсылка = Неопределено Тогда
			Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Перейти'") + " (Ctrl+Enter)";
			Элементы.ПерейтиК.Доступность = Ложь;
			Элементы.ФормаОбращениеПотеряно.Доступность = Ложь;
		ИначеЕсли ТипЗнч(тСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
			Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Зарегистрировать новый контакт клиента'") + " (Ctrl+Enter)";
		ИначеЕсли ТипЗнч(тСсылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") ИЛИ ТипЗнч(тСсылка) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Зарегистрировать новый интерес контакта'") + " (Ctrl+Enter)";
		ИначеЕсли ТипЗнч(тСсылка) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Зарегистрировать взаимодействие по интересу'") + " (Ctrl+Enter)";
		ИначеЕсли ТипЗнч(тСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Зарегистрировать взаимодействие по процессу'") + " (Ctrl+Enter)";
		ИначеЕсли тСсылка = "НовыйКлиент" ИЛИ тСсылка = "Потенциальный" Тогда
			Элементы.ПерейтиК.Заголовок = НСтр("ru = 'Зарегистрировать нового клиента'") + " (Ctrl+Enter)";
		Иначе
			Элементы.ПерейтиК.Доступность = Ложь;
			Элементы.ФормаОбращениеПотеряно.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Клиенты

&НаКлиенте
Процедура ПоискОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если СтрДлина(Текст) < 3 Тогда
		Если СтрДлина(Текст) > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Минимальная длина для поиска - 3 символа.'"));
		КонецЕсли;
		Текст = "";
		ПоискОчистка(Элемент, Ложь);
		Возврат;
	КонецЕсли;
	ИзменитьПараметрыПоиска(Элемент.Имя, Текст, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоискОчистка(Элемент, СтандартнаяОбработка)
	ИзменитьПараметрыПоиска(Элемент.Имя, "", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПоискИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Если Текст = "" Тогда
		ИзменитьПараметрыПоиска(Элемент.Имя, "", Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоискИспользоватьПриИзменении(Элемент)
	
	Если НЕ ПоискКлиентНаименованиеИспользовать И НЕ ПоискКлиентТелефонИспользовать И НЕ ПоискКлиентEmailИспользовать И НЕ ДетальныйПоискИспользовать Тогда
		ЭтотОбъект[Элемент.Имя] = Истина;
		Возврат;
	ИначеЕсли ЭтотОбъект[СтрЗаменить(Элемент.Имя, "Использовать", "")] = "" Тогда
		ЭтотОбъект[Элемент.Имя] = Ложь;
	КонецЕсли;
	ИзменитьПараметрыПоиска(Неопределено, Неопределено, Неопределено);
	КонецПроцедуры

&НаКлиенте
Процедура ПараметрПоискаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ДетальныйПоиск) Тогда
		ИзменитьПараметрыПоиска("ДетальныйПоиск", ДетальныйПоиск, Истина);
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура ДетальныйПоискНажатие(Элемент)
	Если Элементы.ГруппаПараметрыДетальногоПоиск.Видимость Тогда
		Элементы.ГруппаПараметрыДетальногоПоиск.Видимость = Ложь;
		Элементы.ДетальныйПоискЕще.ЦветФона = Новый Цвет;
		Если ДетальныйПоискИспользовать Тогда
			ДетальныйПоискИспользовать = Ложь;
			ВыполнитьПоиск();
		КонецЕсли;
	Иначе
		Элементы.ГруппаПараметрыДетальногоПоиск.Видимость = Истина;
		Элементы.ДетальныйПоискЕще.ЦветФона = Новый Цвет(220, 220, 220);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДетальныйПоискИспользованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДетальныйПоиск) Тогда
		ВыполнитьПоиск();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	// ДОРАБОТАТЬ: очистка реквизитов второй страницы (если перешелкнули заново).
	Если Элементы.ДеревоПоиска.ТекущиеДанные.Объект = НСтр("ru = 'Прочие контакты и интересы'") Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиК(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоискаПриАктивизацииСтроки(Элемент)
	Если Элементы.ДеревоПоиска.ТекущиеДанные = Неопределено Тогда 
		ЗаполнитьПанельИнформацииПоДанным(Неопределено);
	Иначе
		Элементы.ПерейтиК.Доступность = 			  (Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка <> "ПрочиеКонтакты");
		Элементы.ФормаОбращениеПотеряно.Доступность = (Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка <> "ПрочиеКонтакты");
		СтраницыМастераПриСменеСтраницы(Неопределено, Элементы.СтраницыМастера.ТекущаяСтраница);
		
		ЗаполнитьПанельИнформацииПоДанным(Элементы.ДеревоПоиска.ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РежимВводаОбращенияПриИзменении(Элемент)
	НомерТекущий = Число(Прав(ТекущийРежим,1));
	НомерНовый = Число(Прав(РежимВводаОбращения,1));
	Если НомерНовый < НомерТекущий Тогда
		ОповещениеОтказ = Новый ОписаниеОповещения("ПовторитьПоискДляСменыРежима", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данный режим будет доступен только после 
									| повторного поиска. Повторить поиск?'");
		ПоказатьВопрос(ОповещениеОтказ, ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена, , КодВозвратаДиалога.Отмена);
		РежимВводаОбращения = ТекущийРежим;
		Возврат;
	КонецЕсли;
	УстановитьПараметрыЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура НовыйКонтакт_3КонтактноеЛицоПоискНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура("Владелец", ИнформацияПоИнтересуКлиент);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НовыйКонтакт_3КонтактноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.ГруппаНовыйКонтакт_3КонтактКИ.Видимость = Истина;
	Элементы.НовыйКонтакт_3КонтактноеЛицоПоиск.Видимость = Истина;
	Элементы.НовыйКонтакт_3КонтактноеЛицоВыбор.Видимость = Ложь;
	ИнформацияПоИнтересуКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	Элементы.ДекорацияТелефонEmail.Заголовок = "";
КонецПроцедуры

&НаКлиенте
Процедура НовыйКонтакт_3КонтактноеЛицоВыборПриИзменении(Элемент)
	ИнформацияПоИнтересуСоздаватьКонтакт = НЕ ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДобавитьТелефонККонтактуНажатие(Элемент)
	Если Найти(Элемент.Заголовок, НСтр("ru = 'Добавлено'")) > 0 Тогда
		Возврат;
	КонецЕсли;
	КИДобавлена = ДобавитьНовуюКИКонтакта(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"), ПоискКлиентТелефон);
	Если КИДобавлена Тогда
		Элемент.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДобавитьПочтуККонтактуНажатие(Элемент)
	Если Найти(Элемент.Заголовок, НСтр("ru = 'Добавлено'")) > 0 Тогда
		Возврат;
	КонецЕсли;
	КИДобавлена = ДобавитьНовуюКИКонтакта(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"), ПоискКлиентEmail);
	Если КИДобавлена Тогда
		Элемент.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Элементы.ДекорацияОфисПодразделение.Заголовок = ОбновитьЗаголовокОфисПодразделение(ИнформацияПоИнтересуОтветственный);
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ИнформацияПоИнтересуТипУслуги) Тогда
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги", 
			Новый Структура("ТипУслуги, сфпВиднаКолонкаСтатусов", ИнформацияПоИнтересуТипУслуги, сфпВиднаКолонкаСтатусов),ЭтотОбъект);
	Иначе
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги",Новый Структура("сфпВиднаКолонкаСтатусов", сфпВиднаКолонкаСтатусов),ЭтотОбъект);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнтересНажатие(Элемент)
	ТекущиеДанные = Элементы.ДеревоПоиска.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(, ИнформацияПоИнтересуСсылка);
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные <> "ПрочиеКонтакты" И ТекущиеДанные <> "НовыйКлиент" Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЭкспортныеПроцедурыОповещения

&НаКлиенте
Процедура УказатьПричинуОтказа(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтказаПоИнтересам") Тогда
		//
		// ДОРАБОТАТЬ: регистр сведений (?) причины неудачных обращений.
		Ссылка = ОбработатьПотерюОбращенияНаСервере(ДатаВходящегоОбращения, 
													Результат.ПричинаОтказа,
													Результат.Комментарий,
													ИнформацияПоИнтересуКлиент,
													ИнформацияПоИнтересуКонтактноеЛицо,
													ИнформацияПоИнтересуПотенциальныйКлиент);
		//
		Если Ссылка <> Неопределено Тогда
			ПоказатьОповещениеПользователя(НСтр("ru = 'Обращение потеряно'"), 
					ПолучитьНавигационнуюСсылку(Ссылка), 
					НСтр("ru = 'Причина: '") + Результат.ПричинаОтказа);
			//
		КонецЕсли;
		ДописатьИнформациюВОснованиеОбращения(Результат.ПричинаОтказа, Результат.Комментарий);
		ЗаписатьСостояниеОтклоненногоЛида(ОснованиеОбращения, Результат.ПричинаОтказа, Результат.Комментарий);
		CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ОткрыватьИнтересПриПринятииОбращения", ОткрыватьИнтересПриПринятииОбращения);
		Закрыть();
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДописатьИнформациюВОснованиеОбращения(ПричинаОтказа, Комментарий)
	Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
		ТелефонныйЗвонок = ОснованиеОбращения.ПолучитьОбъект();
		ТелефонныйЗвонок.CRM_СкрытьВАРМ = Истина;
		ТелефонныйЗвонок.Комментарий = ТелефонныйЗвонок.Комментарий+?(ЗначениеЗаполнено(ТелефонныйЗвонок.Комментарий), Символы.ПС, "")
				+НСтр("ru = 'Обращение потеряно по причине'")+": "+Строка(ПричинаОтказа)
				+Символы.ПС+Комментарий;
		АбонентВТелефонномЗвонке = ТелефонныйЗвонок.АбонентКонтакт;
		Если ЗначениеЗаполнено(ИнформацияПоИнтересуПотенциальныйКлиент) И ИнформацияПоИнтересуПотенциальныйКлиент <> АбонентВТелефонномЗвонке Тогда
			ТелефонныйЗвонок.АбонентКонтакт 		= ИнформацияПоИнтересуПотенциальныйКлиент;
			ТелефонныйЗвонок.АбонентПредставление 	= Строка(ТелефонныйЗвонок.АбонентКонтакт);
		ИначеЕсли ЗначениеЗаполнено(ИнформацияПоИнтересуКонтактноеЛицо) И ИнформацияПоИнтересуКонтактноеЛицо <> АбонентВТелефонномЗвонке Тогда
			ТелефонныйЗвонок.АбонентКонтакт 		= ИнформацияПоИнтересуКонтактноеЛицо;
			ТелефонныйЗвонок.АбонентПредставление 	= Строка(ТелефонныйЗвонок.АбонентКонтакт);
		КонецЕсли;
		Попытка
			ТелефонныйЗвонок.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСостояниеОтклоненногоЛида(ОснованиеОбращения, ПричинаОтказа, Комментарий)
	Если ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.ТелефонныйЗвонок")
		ИЛИ ТипЗнч(ОснованиеОбращения) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
		
		Если ЗначениеЗаполнено(ОснованиеОбращения) И РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(ОснованиеОбращения) Тогда
			РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(ОснованиеОбращения, Справочники.CRM_СостоянияЛидов.Отклонен, ПричинаОтказа, Комментарий);
		КонецЕсли;
		
		ОбъектОбращение = ОснованиеОбращения.ПолучитьОбъект();
		ОбъектОбращение.CRM_СкрытьВАРМ = Истина;
		ОбъектОбращение.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПоискДляСменыРежима(Ответ, Параметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Повторить Тогда
		ПовторитьПоиск(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТипЗнч(ИнформацияПоИнтересуСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") ИЛИ СтартуемБизнесПроцесс Тогда
		Ном = ПроверяемыеРеквизиты.Количество();
		Пока Ном > 0 Цикл
			Если ПроверяемыеРеквизиты[Ном-1] = "ИнформацияПоИнтересуТипУслуги" Тогда
				ПроверяемыеРеквизиты.Удалить(Ном-1);
				Прервать;
			КонецЕсли;
			Ном = Ном-1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискКлиентКонтактнаяИнформацияПриИзменении(Элемент)
	
	ОтметкаНезаполненного = НЕ (ЗначениеЗаполнено(ПоискКлиентEmail) ИЛИ ЗначениеЗаполнено(ПоискКлиентТелефон));
	Элементы.ПоискКлиентEmail3.ОтметкаНезаполненного = ОтметкаНезаполненного;
	Элементы.ПоискКлиентТелефон3.ОтметкаНезаполненного = ОтметкаНезаполненного;
	Элементы.ПоискКлиентEmail1.ОтметкаНезаполненного = ОтметкаНезаполненного;
	Элементы.ПоискКлиентТелефон1.ОтметкаНезаполненного = ОтметкаНезаполненного;
	
КонецПроцедуры

#КонецОбласти