
&НаКлиенте
Перем СтараяСтрокаДереваПланов; 	// Хранит предыдущую выбранную строку в дереве планов.
&НаКлиенте
Перем СтараяСтрокаСпискаПроектов; 	// Хранит предыдущую выбранную строку в дереве планов.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
// Функция возвращает текущего пользователя.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СправочникСсылка	- Текущий пользователь.
//
Функция ТекущийПользователь()
	Возврат Пользователи.ТекущийПользователь();
КонецФункции // ТекущийПользователь()

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаСервереБезКонтекста
// Функция проверяет является ли объект группой элементов.
//
// Параметры:
//	Объект	- Произвольный	- Объект
//
// Возвращаемое значение:
//	Булево	- Признак группы
//
Функция ОбъектЯвляетсяГруппой(Объект)
	Возврат ОбщегоНазначения.ОбъектЯвляетсяГруппой(Объект);	
КонецФункции // ОбъектЯвляетсяГруппой()

&НаСервере
Процедура РазбитьЗаписиПоМесяцам(Знач МассивЗаписей)
	МдРегистр = Метаданные.РегистрыСведений.CRM_ПланыПроектов;
	СтруктураЗаписи = Новый Структура();
	Для Каждого МдПоле Из МдРегистр.Измерения Цикл
		СтруктураЗаписи.Вставить(МдПоле.Имя);
	КонецЦикла;
	Для Каждого МдПоле Из МдРегистр.Ресурсы Цикл
		СтруктураЗаписи.Вставить(МдПоле.Имя);
	КонецЦикла;
	Для Каждого МдПоле Из МдРегистр.Реквизиты Цикл
		СтруктураЗаписи.Вставить(МдПоле.Имя);
	КонецЦикла;
	
	Для Каждого КлючЗаписи Из МассивЗаписей Цикл
		Попытка
			НачатьТранзакцию();
			
			ПериодЗаписиНачало = КлючЗаписи.ДатаНачала;
			ПериодЗаписиОкончание = КлючЗаписи.ДатаКонца;
			
			Если НачалоМесяца(ПериодЗаписиНачало) = НачалоМесяца(ПериодЗаписиОкончание) Тогда
				Продолжить;
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.CRM_ПланыПроектов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
			МенеджерЗаписи.Прочитать();
			Если Не МенеджерЗаписи.Выбран() Тогда Продолжить; КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи, МенеджерЗаписи);
			
			СекундВДне = 24 * 60 * 60;
			
			ТекМесяц = НачалоМесяца(ПериодЗаписиНачало);
			Пока ТекМесяц <= НачалоМесяца(ПериодЗаписиОкончание) Цикл
				Если НачалоМесяца(ТекМесяц) = НачалоМесяца(ПериодЗаписиНачало) Тогда
					СтруктураОписаниеПериода = Обработки.CRM_ПланированиеПроектов.ПолучитьПродолжительностьПериода(ПериодЗаписиНачало, КонецМесяца(ТекМесяц));
					РабочихДнейПериоде = СтруктураОписаниеПериода.ВДнях;
					РабочихЧасовВПериоде = СтруктураОписаниеПериода.ВЧасах;
					
					СтруктураЗаписи.ДатаНачала = ПериодЗаписиНачало;
					СтруктураЗаписи.ДатаКонца = КонецМесяца(ТекМесяц);
					
				ИначеЕсли НачалоМесяца(ТекМесяц) = НачалоМесяца(ПериодЗаписиОкончание) Тогда
					СтруктураОписаниеПериода = Обработки.CRM_ПланированиеПроектов.ПолучитьПродолжительностьПериода(НачалоМесяца(ТекМесяц), ПериодЗаписиОкончание);
					РабочихДнейПериоде = СтруктураОписаниеПериода.ВДнях;
					РабочихЧасовВПериоде = СтруктураОписаниеПериода.ВЧасах;
					
					СтруктураЗаписи.ДатаНачала = НачалоМесяца(ТекМесяц);
					СтруктураЗаписи.ДатаКонца = ПериодЗаписиОкончание;
					
				Иначе
					СтруктураОписаниеПериода = Обработки.CRM_ПланированиеПроектов.ПолучитьПродолжительностьПериода(НачалоМесяца(ТекМесяц), КонецМесяца(ТекМесяц));
					РабочихДнейПериоде = СтруктураОписаниеПериода.ВДнях;
					РабочихЧасовВПериоде = СтруктураОписаниеПериода.ВЧасах;
					
					СтруктураЗаписи.ДатаНачала = НачалоМесяца(ТекМесяц);
					СтруктураЗаписи.ДатаКонца = КонецМесяца(ТекМесяц);
					
				КонецЕсли;
				
				Если НачалоДня(СтруктураЗаписи.ДатаНачала) = НачалоДня(СтруктураЗаписи.ДатаКонца) Тогда
					ДнейВПериоде = 1;
				Иначе
					ДнейВПериоде = (НачалоДня(СтруктураЗаписи.ДатаКонца) - НачалоДня(СтруктураЗаписи.ДатаНачала)) / СекундВДне + 1;
				КонецЕсли;
				
				СтруктураЗаписи.Продолжительность = ДнейВПериоде;
				СтруктураЗаписи.Трудоемкость = РабочихЧасовВПериоде * СтруктураЗаписи.ПроцентЗагрузки / 100;
				
				МенеджерЗаписи = РегистрыСведений.CRM_ПланыПроектов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураЗаписи);
				МенеджерЗаписи.Записать();
				
				ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
			КонецЦикла;
			
			МенеджерЗаписи = РегистрыСведений.CRM_ПланыПроектов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
			МенеджерЗаписи.Удалить();
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			СтрОшибка = ОписаниеОшибки();
			ОтменитьТранзакцию();
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка!'")
				+ " "
				+ Строка(КлючЗаписи.Проект) + ", "
				+ Строка(КлючЗаписи.Этап) + ", "
				+ Строка(КлючЗаписи.Исполнитель) + ", "
				+ Строка(КлючЗаписи.ДатаНачала) + ", "
				+ Строка(КлючЗаписи.ДатаКонца)
				+ ": "
				+ СтрОшибка);
			//
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
// Обработчик изменения начала и/или конца периода(вызывается обработчиками ЭУ).
Процедура ПриИзмененииПериодаПланирования(ПриоритетДатыНачала = Истина)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		Объект.ДатаНачала = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаКонца) Тогда
		Объект.ДатаКонца = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
	Если Объект.ДатаНачала > Объект.ДатаКонца Тогда
		Если ПриоритетДатыНачала Тогда
			Объект.ДатаКонца = Объект.ДатаНачала;
		Иначе
			Объект.ДатаНачала = Объект.ДатаКонца;
		КонецЕсли;
	КонецЕсли;
	Объект.ДатаНачала = НачалоМесяца(Объект.ДатаНачала);
	Объект.ДатаКонца = КонецМесяца(Объект.ДатаКонца);
	
	КоличествоМесяцевПланирования = 0;
	ДатаСчетчикМесяцев = НачалоМесяца(Объект.ДатаНачала);
	Пока ДатаСчетчикМесяцев <= НачалоМесяца(Объект.ДатаКонца) Цикл
		КоличествоМесяцевПланирования = КоличествоМесяцевПланирования + 1;
		Если КоличествоМесяцевПланирования > 12 Тогда
			Прервать;
		КонецЕсли;
		ДатаСчетчикМесяцев = ДобавитьМесяц(ДатаСчетчикМесяцев, 1);
	КонецЦикла;
	Если КоличествоМесяцевПланирования > 12 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя указывать период планирования больше 1 года!'"), 5);
		Объект.ДатаКонца = КонецМесяца(ДобавитьМесяц(ДатаСчетчикМесяцев, -1));
	КонецЕсли;
	
	НеобходимоОбновитьКолонкиДереваПланов = Истина;
	
	ВыводитьСостояние = Истина;
	ОбновитьДеревоПланов();
	
КонецПроцедуры

&НаСервере
// Добавляет строку в начало дерева. 
// Строка содержит данные графиков работ по месяцам.
//
Процедура ДобавитьЗаголовокПланов(ДеревоЗначенийПланы)
	ПроизводственныйКалендарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	ТекМесяц = НачалоМесяца(Объект.ДатаНачала);
	СоответствиеПериоды = Новый Соответствие();
	Пока ТекМесяц <= НачалоМесяца(Объект.ДатаКонца) Цикл
		ПродолжительностьПериода = Обработки.CRM_ПланированиеПроектов.ПолучитьПродолжительностьПериода(ТекМесяц, КонецМесяца(ТекМесяц), ПроизводственныйКалендарь);
		СоответствиеПериоды.Вставить(ТекМесяц, ПродолжительностьПериода);
		ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
	КонецЦикла;
	
	СтрокаДереваПланов = ДеревоЗначенийПланы.Строки.Вставить(0);
	СтрокаДереваПланов.ГруппировкаПредставление = НСтр("ru = 'НОРМА ВРЕМЕНИ'") + " (" + Строка(ПроизводственныйКалендарь) + ")";
	СтрокаДереваПланов.ИдентификаторОформления = "СтрокаНормаВремени";
	
	Если РежимДанныхПланирования = "Проценты" Тогда
		ЗначениеИтогов = 100;
	Иначе
		ЗначениеИтогов = 0;
	КонецЕсли;
	
	Для Каждого МесяцПланирования Из СписокМесяцевПланирования Цикл
		Месяц = НачалоМесяца(Дата(СтрЗаменить(МесяцПланирования.Значение, "Период_", "") + "01"));
		
		Если РежимДанныхПланирования = "Часы" Тогда
			СтрокаДереваПланов[МесяцПланирования.Значение] = СоответствиеПериоды[Месяц].ВЧасах;
			ЗначениеИтогов = ЗначениеИтогов + СтрокаДереваПланов[МесяцПланирования.Значение];
		ИначеЕсли РежимДанныхПланирования = "Дни" Тогда
			СтрокаДереваПланов[МесяцПланирования.Значение] = СоответствиеПериоды[Месяц].ВДнях;
			ЗначениеИтогов = ЗначениеИтогов + СтрокаДереваПланов[МесяцПланирования.Значение];
		ИначеЕсли РежимДанныхПланирования = "Проценты" Тогда
			СтрокаДереваПланов[МесяцПланирования.Значение] = 100;
		КонецЕсли;
		
	КонецЦикла;
	СтрокаДереваПланов.Итоги = ЗначениеИтогов;
КонецПроцедуры

&НаСервере
// Определяет число группировок в зависимости от настройки АРМ.
Процедура УстановитьЧислоУровнейГруппировкиПланов(Знач ВыделенныеСтроки)
	
	Если ВыделенныеСтроки.Количество() = 0 ИЛИ ВыделенныеСтроки.Количество() > 1 
		ИЛИ ВыделенныеСтроки[0].Пустая() ИЛИ ВыделенныеСтроки[0].ЭтоГруппа Тогда
		
		Если флВыводитьПодразделения Тогда
			ЧислоУровнейГруппировкиПланов = 4;
		Иначе
			ЧислоУровнейГруппировкиПланов = 3;
		КонецЕсли;
	Иначе
		Если флВыводитьПодразделения Тогда
			ЧислоУровнейГруппировкиПланов = 3;
		Иначе
			ЧислоУровнейГруппировкиПланов = 2;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьЗначенияПоискаДляДиаграммыГантаПоТекСтроке(ТекСтрока, бСтрокаИтогов)
	СтруктураЗначения = Новый Структура("Подразделение,Проект,Этап,Исполнитель",
		ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"),
		ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"),
		ПредопределенноеЗначение("Справочник.CRM_ЭтапыПроектов.ПустаяСсылка"),
		СправочникПользователиПустаяСсылка);
	//
	
	Если Не бСтрокаИтогов Тогда
		ТекРодитель = ТекСтрока;
		Пока Истина Цикл
			Если флВыводитьПодразделения И ТипЗнч(ТекРодитель.Группировка) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				СтруктураЗначения.Подразделение = ТекРодитель.Группировка;
			ИначеЕсли ТипЗнч(ТекРодитель.Группировка) = Тип("СправочникСсылка.Проекты") Тогда
				СтруктураЗначения.Проект = ТекРодитель.Группировка;
			ИначеЕсли ТипЗнч(ТекРодитель.Группировка) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
				СтруктураЗначения.Этап = ТекРодитель.Группировка;
			ИначеЕсли ТипЗнч(ТекРодитель.Группировка) = Тип("СправочникСсылка.Пользователи") Тогда
				СтруктураЗначения.Исполнитель = ТекРодитель.Группировка;
			КонецЕсли;
			
			ТекРодитель = ТекРодитель.ПолучитьРодителя();
			Если ТекРодитель = Неопределено Тогда Прервать; КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураЗначения;
КонецФункции

&НаКлиенте
// Формирование диаграммы Ганта.
Процедура СформироватьДиаграммуГанта(ТекСтрокаДерева)
	ДиаграммаГанта.Очистить();
	
	ТекГруппировка = ТекСтрокаДерева.Группировка;
	
	ДиаграммаГанта.Обновление = Ложь;
	
	СписокИзмерений = Новый СписокЗначений();
	бСтрокаИтогов = (ПланыДерево.ПолучитьЭлементы().Индекс(ТекСтрокаДерева) = 0);
	ЗначенияПоиска = ЗаполнитьЗначенияПоискаДляДиаграммыГантаПоТекСтроке(ТекСтрокаДерева, бСтрокаИтогов);
	
	Если РежимПланирования = 1 Тогда // по проектам
		Если бСтрокаИтогов И флВыводитьПодразделения Тогда
			СписокИзмерений.Добавить("Подразделение", НСтр("ru = 'Подразделение'"));
		КонецЕсли;
		СписокИзмерений.Добавить("Проект",		НСтр("ru = 'Проект'"));
		СписокИзмерений.Добавить("Этап",		НСтр("ru = 'Этап'"));
		СписокИзмерений.Добавить("Исполнитель",	НСтр("ru = 'Исполнитель'"));
		
	ИначеЕсли РежимПланирования = 2 Тогда // по ресурсам
		Если бСтрокаИтогов И флВыводитьПодразделения Тогда
			СписокИзмерений.Добавить("Подразделение", НСтр("ru = 'Подразделение'"));
		КонецЕсли;
		СписокИзмерений.Добавить("Исполнитель",	НСтр("ru = 'Исполнитель'"));
		СписокИзмерений.Добавить("Проект",		НСтр("ru = 'Проект'"));
		СписокИзмерений.Добавить("Этап",		НСтр("ru = 'Этап'"));
		
	КонецЕсли;
	
	// Сформируем заголовок и подпись к диаграмме (надпись внизу).
	ВремТекст = "";
	Для Каждого ТекЭлем Из СписокИзмерений Цикл
		ВремТекст = ВремТекст + ?(ВремТекст="", "", " / ") + ТекЭлем.Представление;	
	КонецЦикла;     
	ДиаграммаГанта.ОбластьПостроения.Заголовок = ВремТекст;
	
	ДиаграммаГанта.ОтображениеИнтервала = ОтображениеИнтервалаДиаграммыГанта.Градиент;
	
	мсвВрем = Новый Массив;
	ТекСтрокаВрем = ТекСтрокаДерева;
	Пока ТекСтрокаВрем <> Неопределено Цикл
		мсвВрем.Добавить(ТекСтрокаВрем.Группировка);
		ТекСтрокаВрем = ТекСтрокаВрем.ПолучитьРодителя();
	КонецЦикла;
	ВремТекст = "";
	Сч = мсвВрем.Количество()-1; 
	Пока Сч>=0 Цикл
		ВремТекст = ВремТекст + ?(ВремТекст="", "", " / ") + мсвВрем[Сч]; 
		Сч = Сч - 1;
	КонецЦикла;
	Элементы.НадписьИнформацияДиаграммаГанта.Заголовок = ВремТекст;
	
	Серия_ = ДиаграммаГанта.УстановитьСерию("");
	Серия_.ДополнительныйЦвет = Новый Цвет(150, 150, 150);
	
	МассивПериоды = Новый Массив();
	МассивСуффиксыКолонок = Новый Массив();
	ТекДата = НачалоМесяца(Объект.ДатаНачала);
	Пока ТекДата <= НачалоМесяца(Объект.ДатаКонца) Цикл
		МассивПериоды.Добавить(ТекДата);
		МассивСуффиксыКолонок.Добавить(Формат(ТекДата, "ДФ = ггггММ"));
		ТекДата = ДобавитьМесяц(ТекДата, 1);
	КонецЦикла;
	
	Если бСтрокаИтогов Тогда
		СтрокаВерхнегоУровня = Неопределено;
	Иначе
		СтрокаВерхнегоУровня = ТекСтрокаДерева;
		Пока Истина Цикл
			ТекРодитель = СтрокаВерхнегоУровня.ПолучитьРодителя();
			Если ТекРодитель = Неопределено Или (флВыводитьПодразделения И ТипЗнч(ТекРодитель.Группировка) = Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
				Прервать;
			Иначе
				СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.ПолучитьРодителя();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РекурсивноеФормированиеДГ(СтрокаВерхнегоУровня, ЗначенияПоиска, МассивПериоды, МассивСуффиксыКолонок);
	
	ШкалаВремени = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени;
	Пока ШкалаВремени.Элементы.Количество() > 1 Цикл
		ШкалаВремени.Элементы.Удалить(ШкалаВремени.Элементы[ШкалаВремени.Элементы.Количество() - 1]);
	КонецЦикла;
	Если ШкалаВремени.Элементы.Количество() > 0 Тогда
		ЭлементШкалы = ШкалаВремени.Элементы[0];
	Иначе
		ЭлементШкалы = ШкалаВремени.Элементы.Добавить();
	КонецЕсли;
	ЭлементШкалы.Видимость = Истина;
	ЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.Месяц;
	ЭлементШкалы.Кратность = 1;
	
	ЭлементШкалы = ШкалаВремени.Элементы.Добавить();
	ЭлементШкалы.Видимость = Истина;
	ЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.День;
	ЭлементШкалы.Кратность = 1;
	ЭлементШкалы.ФорматДня = ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;
	
	ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	
	ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.ЦветФона = Новый Цвет(245, 242, 221);
	
	// Обход ошибки когда область построения не растягивается на всю ширину поля диаграммы.
	ДиаграммаГанта.ОбластьПостроения.Верх = 0;
	ДиаграммаГанта.ОбластьПостроения.Лево = 0;
	ДиаграммаГанта.ОбластьПостроения.Низ = 1;
	ДиаграммаГанта.ОбластьПостроения.Право = 1;
	
	ДиаграммаГанта.АвтоОпределениеПолногоИнтервала = Ложь;
	ДиаграммаГанта.УстановитьПолныйИнтервал(Объект.ДатаНачала, Объект.ДатаКонца);
	
	ДиаграммаГанта.ОтображатьЛегенду = Ложь;
	ДиаграммаГанта.ОтображатьЗаголовок = Ложь;
	ДиаграммаГанта.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.НеОтображать;
	
	//////	
	//////ДиаграммаГантаВыделитьВыходныеДни();
	//////	
	
	ДиаграммаГанта.Обновление = Истина;
	
	ДиаграммаГанта.ПоказатьУровеньТочек(0);
	
	ОбновитьОтображениеДанных();
КонецПроцедуры // СформироватьДиаграммуГанта()

&НаКлиенте
Функция ПолучитьДанныеДиаграммыГантаДляСтроки(СтрокаПланов, СтруктураПоиска, МассивПериоды, МассивСуффиксыКолонок)
	Если СтруктураПоиска.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
	
	НайденныеСтроки = Объект.ПланыСвернутые.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда Возврат Неопределено; КонецЕсли;
	
	МассивПериодов = Новый Массив();
	
	ОбщаяТрудоемкость = 0;
	СуммаПроцентЗагрузки = 0;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтруктураПериод = Новый Структура("ДатаНачала,ДатаКонца,ДатаНачалаЗаписи,ДатаКонцаЗаписи,Продолжительность,Трудоемкость,ПроцентЗагрузки,УровеньЗагрузки");
		
		СтруктураПериод.ДатаНачала = НайденнаяСтрока.ДатаНачала;
		СтруктураПериод.ДатаКонца = НайденнаяСтрока.ДатаКонца;
		СтруктураПериод.ДатаНачалаЗаписи = НайденнаяСтрока.ДатаНачалаЗаписи;
		СтруктураПериод.ДатаКонцаЗаписи = НайденнаяСтрока.ДатаКонцаЗаписи;
		СтруктураПериод.Продолжительность = НайденнаяСтрока.Продолжительность;
		СтруктураПериод.Трудоемкость = НайденнаяСтрока.Трудоемкость;
		СтруктураПериод.ПроцентЗагрузки = НайденнаяСтрока.ПроцентЗагрузки;
		СтруктураПериод.УровеньЗагрузки = НайденнаяСтрока.УровеньЗагрузки;
		
		МассивПериодов.Добавить(СтруктураПериод);
	КонецЦикла;
	
	Возврат МассивПериодов;
КонецФункции

&НаКлиенте
Процедура ОформитьТочкуДиаграммыГанта(ЗначениеГруппировки, Точка)
	ГруппировкаОформление = Неопределено;
	Если ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ГруппировкаОформление = "ГруппировкаПодразделение";
	ИначеЕсли ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.Проекты") Тогда
		ГруппировкаОформление = "ГруппировкаПроект";
	ИначеЕсли ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
		ГруппировкаОформление = "ГруппировкаЭтап";
	ИначеЕсли ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.Пользователи") Тогда
		ГруппировкаОформление = "ГруппировкаРесурс";
	КонецЕсли;
	Если ЗначениеЗаполнено(ГруппировкаОформление) Тогда
		НайденныеСтроки = ТаблицаОформление.НайтиСтроки(Новый Структура("Идентификатор", ГруппировкаОформление));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОформлениеТочки = НайденныеСтроки[0];
			Если ОформлениеТочки.ИспользоватьШрифт Тогда
				Точка.Шрифт = ОформлениеТочки.Шрифт;
			КонецЕсли;
			Если ОформлениеТочки.ИспользоватьЦветТекста Тогда
				Точка.ЦветТекста = ОформлениеТочки.ЦветТекста;
			КонецЕсли;
			Если ОформлениеТочки.ИспользоватьЦветФона Тогда
				Точка.ЦветФона = ОформлениеТочки.ЦветФона;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьИнтервалДиаграммыГанта(Интервал, ДанныеСтроки)
	НайденныеСтроки = ТаблицаОформление.НайтиСтроки(Новый Структура("Идентификатор", "Гант" + ДанныеСтроки.УровеньЗагрузки));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ОформлениеИнтервала = НайденныеСтроки[0];
		
		Интервал.Цвет = ОформлениеИнтервала.ЦветФона;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РекурсивноеФормированиеДГ(СтрокаПланов, ЗначенияПоиска, МассивПериоды, МассивСуффиксыКолонок, бСтрокаИтогов = Ложь, бПодразделение = Ложь, ЗначениеТочкиРодителя = -1, Знач СтруктураПоиска = Неопределено)
	Если СтрокаПланов = Неопределено Тогда
		бСтрокаИтогов = Истина;
		
		ПланыДеревоЭлементы = ПланыДерево.ПолучитьЭлементы();
		Для Каждого ТекСтрокаПланов Из ПланыДеревоЭлементы Цикл
			Если ПланыДеревоЭлементы.Индекс(ТекСтрокаПланов) = 0 Тогда Продолжить; КонецЕсли;
			РекурсивноеФормированиеДГ(ТекСтрокаПланов, ЗначенияПоиска, МассивПериоды, МассивСуффиксыКолонок, бСтрокаИтогов, бПодразделение);
		КонецЦикла;
		
	ИначеЕсли Не бСтрокаИтогов И ТипЗнч(СтрокаПланов.Группировка) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		бПодразделение = Истина;
		
		ПодразделениеПодчиненныеСтроки = СтрокаПланов.ПолучитьЭлементы();
		Для Каждого ТекСтрокаПланов Из ПодразделениеПодчиненныеСтроки Цикл
			РекурсивноеФормированиеДГ(ТекСтрокаПланов, ЗначенияПоиска, МассивПериоды, МассивСуффиксыКолонок, бСтрокаИтогов, бПодразделение);
		КонецЦикла;
		
	Иначе
		Если СтруктураПоиска = Неопределено Тогда СтруктураПоиска = Новый Структура(); КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначенияПоиска.Подразделение) Тогда
			СтруктураПоиска.Вставить("Подразделение", ЗначенияПоиска.Подразделение);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияПоиска.Проект) Тогда
			СтруктураПоиска.Вставить("Проект", ЗначенияПоиска.Проект);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияПоиска.Этап) Тогда
			СтруктураПоиска.Вставить("Этап", ЗначенияПоиска.Этап);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначенияПоиска.Исполнитель) Тогда
			СтруктураПоиска.Вставить("Исполнитель", ЗначенияПоиска.Исполнитель);
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПланов.Группировка) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			СтруктураПоиска.Вставить("Подразделение", СтрокаПланов.Группировка);
		ИначеЕсли ТипЗнч(СтрокаПланов.Группировка) = Тип("СправочникСсылка.Проекты") Тогда
			СтруктураПоиска.Вставить("Проект", СтрокаПланов.Группировка);
		ИначеЕсли ТипЗнч(СтрокаПланов.Группировка) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			СтруктураПоиска.Вставить("Этап", СтрокаПланов.Группировка);
		ИначеЕсли ТипЗнч(СтрокаПланов.Группировка) = Тип("СправочникСсылка.Пользователи") Тогда
			СтруктураПоиска.Вставить("Исполнитель", СтрокаПланов.Группировка);
		КонецЕсли;
			
		ДанныеСтроки = ПолучитьДанныеДиаграммыГантаДляСтроки(СтрокаПланов, СтруктураПоиска, МассивПериоды, МассивСуффиксыКолонок);
		Если ДанныеСтроки = Неопределено Тогда Возврат; КонецЕсли;
		
		ТекИдентификатор = СтрокаПланов.ПолучитьИдентификатор();
		НоваяТочка = ДиаграммаГанта.УстановитьТочку(ТекИдентификатор, ЗначениеТочкиРодителя);
		НоваяТочка.Текст = Строка(СтрокаПланов.Группировка);
		НоваяТочка.Расшифровка = СтрокаПланов.Группировка;
		
		ОформитьТочкуДиаграммыГанта(СтрокаПланов.Группировка, НоваяТочка);
		
		Если ДанныеСтроки.Количество() > 0 Тогда
			ЗначениеДиаграммы = ДиаграммаГанта.ПолучитьЗначение(НоваяТочка, ДиаграммаГанта.Серии[0]);
			
			ТекПроект = Неопределено;
			Если СтруктураПоиска.Свойство("Проект") И ЗначениеЗаполнено(СтруктураПоиска.Проект) Тогда
				ТекПроект = СтруктураПоиска.Проект;
			Иначе
				Если Элементы.СписокПроектов.ВыделенныеСтроки.Количество() = 1 Тогда
					ТекПроект = Элементы.СписокПроектов.ВыделенныеСтроки[0];
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого Интервал Из ДанныеСтроки Цикл
				НовыйИнтервал = ЗначениеДиаграммы.Добавить();
				НовыйИнтервал.Начало = НачалоДня(Интервал.ДатаНачала);
				НовыйИнтервал.Конец  = КонецДня(Интервал.ДатаКонца);
				
				ОформитьИнтервалДиаграммыГанта(НовыйИнтервал, Интервал);
				
				НовыйИнтервал.Текст = Формат(НовыйИнтервал.Начало, "ДФ=dd.MM.yyyy") + " - "
					+ Формат(НовыйИнтервал.Конец, "ДФ=dd.MM.yyyy") + Символы.ПС
					+ Окр(Интервал.Трудоемкость) + "ч / " + Окр(Интервал.ПроцентЗагрузки) + "%";
				//
				
				Если	ЗначениеЗаполнено(ТекПроект)
					И	СтруктураПоиска.Свойство("Этап")
					И	СтруктураПоиска.Свойство("Исполнитель") Тогда
					//
					СтруктураРасшифровкаИнтервала = Новый Структура("Проект,Этап,Исполнитель,ДатаНачала,ДатаКонца",
						ТекПроект, СтруктураПоиска.Этап, СтруктураПоиска.Исполнитель, Интервал.ДатаНачалаЗаписи, Интервал.ДатаКонцаЗаписи);
					//
					НовыйИнтервал.Расшифровка = СтруктураРасшифровкаИнтервала;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПодчиненныеСтроки = СтрокаПланов.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
				Если Не бСтрокаИтогов И Не бПодразделение Тогда
					Если ТипЗнч(ПодчиненнаяСтрока.Группировка) = Тип("СправочникСсылка.Проекты") И ЗначениеЗаполнено(ЗначенияПоиска.Проект) И ПодчиненнаяСтрока.Группировка <> ЗначенияПоиска.Проект Тогда
						Продолжить;
					ИначеЕсли ТипЗнч(ПодчиненнаяСтрока.Группировка) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") И ЗначениеЗаполнено(ЗначенияПоиска.Этап) И ПодчиненнаяСтрока.Группировка <> ЗначенияПоиска.Этап Тогда
						Продолжить;
					ИначеЕсли ТипЗнч(ПодчиненнаяСтрока.Группировка) = Тип("СправочникСсылка.Пользователи") И ЗначениеЗаполнено(ЗначенияПоиска.Исполнитель) И ПодчиненнаяСтрока.Группировка <> ЗначенияПоиска.Исполнитель Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				РекурсивноеФормированиеДГ(ПодчиненнаяСтрока, ЗначенияПоиска, МассивПериоды, МассивСуффиксыКолонок, бСтрокаИтогов, бПодразделение, НоваяТочка.Значение, СтруктураПоиска);
				
				// Не работает "Знач" для параметра СтруктураПоиска - удаляем значения вручную.
				Если СтруктураПоиска <> Неопределено Тогда
					Если ТипЗнч(ПодчиненнаяСтрока.Группировка) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
						СтруктураПоиска.Удалить("Подразделение");
					ИначеЕсли ТипЗнч(ПодчиненнаяСтрока.Группировка) = Тип("СправочникСсылка.Проекты") Тогда
						СтруктураПоиска.Удалить("Проект");
					ИначеЕсли ТипЗнч(ПодчиненнаяСтрока.Группировка) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
						СтруктураПоиска.Удалить("Этап");
					ИначеЕсли ТипЗнч(ПодчиненнаяСтрока.Группировка) = Тип("СправочникСсылка.Пользователи") Тогда
						СтруктураПоиска.Удалить("Исполнитель");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Формирует заголовок колонки группировок.
//
Функция ПолучитьИмяКолонкиГруппировки()
	
	// Устанавливаем заголовок колонки.
	ЗаголовокКолонкиГруппировки = "";
	
	// Устанавливаем заголовок колонки.
	Если РежимПланирования = 2 Тогда // по ресурсам
		Если ЧислоУровнейГруппировкиПланов = 4 Тогда
			ЗаголовокКолонкиГруппировки = "Подразделение / Исполнитель / Проект / Этап";
		ИначеЕсли ЧислоУровнейГруппировкиПланов = 3 Тогда
			Если флВыводитьПодразделения Тогда
				ЗаголовокКолонкиГруппировки = "Подразделение / Исполнитель / Этап";
			Иначе
				ЗаголовокКолонкиГруппировки = "Исполнитель / Проект / Этап";
			КонецЕсли;
		Иначе
			ЗаголовокКолонкиГруппировки = "Исполнитель / Этап";
		КонецЕсли; 
	ИначеЕсли РежимПланирования = 1 Тогда // по проектам
		Если ЧислоУровнейГруппировкиПланов = 4 Тогда
			ЗаголовокКолонкиГруппировки = "Подразделение / Проект / Этап / Исполнитель";
		ИначеЕсли ЧислоУровнейГруппировкиПланов = 3 Тогда
			Если флВыводитьПодразделения Тогда
				ЗаголовокКолонкиГруппировки = "Подразделение / Этап / Исполнитель";
			Иначе
				ЗаголовокКолонкиГруппировки = "Проект / Этап / Исполнитель";
			КонецЕсли;
		Иначе
			ЗаголовокКолонкиГруппировки = "Этап / Исполнитель";
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ЗаголовокКолонкиГруппировки;
	
КонецФункции

&НаСервере
// Заполняет табличную часть Планы для кеширования плановых данных.
Процедура ПерезаполнитьДанныеПланов()

	// чистим
	Объект.Планы.Очистить();
	Объект.ПланыСвернутые.Очистить();
	ДиаграммаГанта.Очистить();
		
	// Сформируем запрос с отборами.
	Запрос = Новый Запрос;
	
	УсловиеПоПроекту = "";
	УсловиеПОНезапПроектам = "";
	УсловиеПОНезапРесурсам = "";
	
	бНеЗаполненКалендарьЗаПериод = Не Обработки.CRM_ПланированиеПроектов.ПолучитьПродолжительностьПериода(НачалоДня(Объект.ДатаНачала), КонецДня(Объект.ДатаКонца)).РассчитаноСУчетомГрафика;
	бРассчитаноСУчетомГрафика = Истина;
	РасшифровкаРассчитанныхБезУчетаГрафика = "";
	
	// Проект
	ТекущийПроект = Неопределено;
	МассивВыбранных = Элементы.СписокПроектов.ВыделенныеСтроки;
	Если МассивВыбранных.Количество() > 1 Тогда
		УсловиеПоПроекту = "И CRM_ПланыПроектов.Проект В (&Проект)";
		Запрос.УстановитьПараметр("Проект", МассивВыбранных);

	Иначе
		ТекущийПроект = Элементы.СписокПроектов.ТекущаяСтрока;
		Если ЗначениеЗаполнено(ТекущийПроект) Тогда
			Запрос.УстановитьПараметр("Проект", ТекущийПроект);
			Если ТекущийПроект.ЭтоГруппа Тогда
				УсловиеПоПроекту = "И CRM_ПланыПроектов.Проект В ИЕРАРХИИ (&Проект)";
				
				УсловиеПОНезапПроектам = УсловиеПОНезапПроектам + "
				|	И Проекты.Ссылка В ИЕРАРХИИ (&Проект)";
				
			Иначе
				УсловиеПоПроекту = "И CRM_ПланыПроектов.Проект = &Проект";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	// Подразделение
	Если ЗначениеЗаполнено(ОтборЗначениеПодразделение) Тогда
		УсловиеПоПроекту = УсловиеПоПроекту + "
		|	И CRM_ПланыПроектов.Подразделение  В ИЕРАРХИИ (&Подразделение)";
		
		УсловиеПОНезапПроектам = УсловиеПОНезапПроектам + "
		|	И Проекты.CRM_Подразделение  В ИЕРАРХИИ (&Подразделение)";
		
		УсловиеПОНезапРесурсам = УсловиеПОНезапРесурсам + "
		|	И Пользователи.Подразделение  В ИЕРАРХИИ (&Подразделение)";
		
		Запрос.УстановитьПараметр("Подразделение", ОтборЗначениеПодразделение);
	КонецЕсли;
	
	// Партнер
	Если ЗначениеЗаполнено(ОтборЗначениеПартнер) Тогда
		УсловиеПоПроекту = УсловиеПоПроекту + "
		|	И CRM_ПланыПроектов.Проект.CRM_Партнер = &Партнер";
		
		УсловиеПОНезапПроектам = УсловиеПОНезапПроектам + "
		|	И Проекты.CRM_Партнер = &Партнер";
		
		Запрос.УстановитьПараметр("Партнер", ОтборЗначениеПартнер);
	КонецЕсли;
	
	// Завершенные этапы
	Если НЕ ОтборЗначениеЗавершенныеЭтапы Тогда
		УсловиеПоПроекту = УсловиеПоПроекту + "
		|	И НЕ CRM_ПланыПроектов.Этап.Завершен";
		
		//УсловиеПОНезапПроектам = УсловиеПОНезапПроектам + "
		//|	И НЕ CRM_ПланыПроектов.Этап.Завершен";
	КонецЕсли;
	
	// Исполнитель
	Если ЗначениеЗаполнено(ОтборЗначениеИсполнитель) Тогда
		УсловиеПоПроекту = УсловиеПоПроекту + "
		|	И CRM_ПланыПроектов.Исполнитель = &Исполнитель";
		
		УсловиеПОНезапРесурсам = УсловиеПОНезапРесурсам + "
		|	И Пользователи.Ссылка = &Исполнитель";
		
		Запрос.УстановитьПараметр("Исполнитель", ОтборЗначениеИсполнитель);
	КонецЕсли;
	
	// Ответственный проекта
	Если ЗначениеЗаполнено(ОтборЗначениеОтветственный) Тогда
		УсловиеПоПроекту = УсловиеПоПроекту + "
		|	И CRM_ПланыПроектов.Проект.Ответственный = &Ответственный";
		
		УсловиеПОНезапПроектам = УсловиеПОНезапПроектам + "
		|	И Проекты.Ответственный = &Ответственный";
		
		Запрос.УстановитьПараметр("Ответственный", ОтборЗначениеОтветственный);
	КонецЕсли;
	
	ТекстЗапроса =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	CRM_ПланыПроектов.Проект,
					|	CRM_ПланыПроектов.Этап КАК Этап,
					|	CRM_ПланыПроектов.Этап.РеквизитДопУпорядочивания КАК ЭтапПорядок,
					|	CRM_ПланыПроектов.Исполнитель,
					|	CRM_ПланыПроектов.ДатаНачала,
					|	CRM_ПланыПроектов.ДатаКонца,
					|	CRM_ПланыПроектов.Продолжительность,
					|	CRM_ПланыПроектов.ПроцентЗагрузки,
					|	CRM_ПланыПроектов.Трудоемкость,
					|	CRM_ПланыПроектов.Комментарий,
					|	CRM_ПланыПроектов.Подразделение КАК Подразделение
					|ИЗ
					|	РегистрСведений.CRM_ПланыПроектов КАК CRM_ПланыПроектов
					|ГДЕ
					|	CRM_ПланыПроектов.Проект.CRM_Планируемый " + УсловиеПоПроекту +" 
					|	И НЕ CRM_ПланыПроектов.Этап.НеИспользоватьПриПланировании
					|	И ((CRM_ПланыПроектов.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаКонца)
					|			ИЛИ (CRM_ПланыПроектов.ДатаКонца МЕЖДУ &ДатаНачала И &ДатаКонца)
					|			ИЛИ (CRM_ПланыПроектов.ДатаНачала <= &ДатаНачала
					|				И CRM_ПланыПроектов.ДатаКонца >= &ДатаКонца))
					|УПОРЯДОЧИТЬ ПО
					|	CRM_ПланыПроектов.Этап.РеквизитДопУпорядочивания ИЕРАРХИЯ";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(Объект.ДатаКонца));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Каждую строку нужно разбить по месяцам.
	Пока Выборка.Следующий() Цикл
		ПродолжительностьПериода = Обработки.CRM_ПланированиеПроектов.ПолучитьПродолжительностьПериода(Выборка.ДатаНачала, КонецДня(Выборка.ДатаКонца));
		ВсеРабочееВремя = ПродолжительностьПериода.ВЧасах;
		бРассчитаноСУчетомГрафика = бРассчитаноСУчетомГрафика И ПродолжительностьПериода.РассчитаноСУчетомГрафика;
		
		ТекУровеньЗагрузки = Обработки.CRM_ПланированиеПроектов.ВычислитьЗагрузку(ВсеРабочееВремя, Выборка.Трудоемкость);
		Если ЗначениеЗаполнено(ТекУровеньЗагрузки) Тогда
			НоваяСтрока = Объект.ПланыСвернутые.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.РабочихЧасовЗаПериод = ВсеРабочееВремя;
			НоваяСтрока.УровеньЗагрузки = ТекУровеньЗагрузки;
			НоваяСтрока.ДатаНачалаЗаписи = Выборка.ДатаНачала;
			НоваяСтрока.ДатаКонцаЗаписи = Выборка.ДатаКонца;
			
			НоваяСтрока.ДатаНачала = Макс(НоваяСтрока.ДатаНачала, НачалоМесяца(Объект.ДатаНачала));
			НоваяСтрока.ДатаКонца = Мин(НоваяСтрока.ДатаКонца, КонецМесяца(Объект.ДатаКонца));
		КонецЕсли;
		
		Если Не ПродолжительностьПериода.РассчитаноСУчетомГрафика Тогда
			Если Не ПустаяСтрока(РасшифровкаРассчитанныхБезУчетаГрафика) Тогда
				РасшифровкаРассчитанныхБезУчетаГрафика = РасшифровкаРассчитанныхБезУчетаГрафика + Символы.ПС;
			КонецЕсли;
			РасшифровкаРассчитанныхБезУчетаГрафика = РасшифровкаРассчитанныхБезУчетаГрафика +
				Строка(Выборка.Проект) + ", " + Строка(Выборка.Этап) + ", " + Строка(Выборка.Исполнитель);
		КонецЕсли;
		
		ТекДатаПериода = НачалоМесяца(Выборка.ДатаНачала);
		ТекТрудоемкостьОбщая = 0;
		Пока ТекДатаПериода <= Выборка.ДатаКонца Цикл
			// предв. расчеты
			ДатаНачала_ = Макс(Выборка.ДатаНачала, ТекДатаПериода);
			ДатаКонца_  = Мин(Выборка.ДатаКонца, КонецМесяца(ТекДатаПериода));
			
			ПродолжительностьПериода = Обработки.CRM_ПланированиеПроектов.ПолучитьПродолжительностьПериода(ДатаНачала_, КонецДня(ДатаКонца_));
			РабочиеВремяВТекМес = ПродолжительностьПериода.ВЧасах;
			
			Если ТекДатаПериода >= Объект.ДатаНачала И ТекДатаПериода < Объект.ДатаКонца Тогда
				НоваяСтрокаПланы = Объект.Планы.Добавить();
				НоваяСтрокаПланы.Проект				= Выборка.Проект;
				НоваяСтрокаПланы.Этап				= Выборка.Этап;
				НоваяСтрокаПланы.ЭтапПорядок		= Выборка.ЭтапПорядок;
				НоваяСтрокаПланы.Исполнитель		= Выборка.Исполнитель;
				НоваяСтрокаПланы.Подразделение		= Выборка.Подразделение;
				НоваяСтрокаПланы.ДатаНачала			= ДатаНачала_;
				НоваяСтрокаПланы.ДатаКонца			= ДатаКонца_;
				НоваяСтрокаПланы.Продолжительность	= Выборка.Продолжительность;
				
				Если НачалоМесяца(Объект.ДатаНачала) <= НачалоМесяца(Выборка.ДатаНачала) И НачалоМесяца(ТекДатаПериода) = НачалоМесяца(Выборка.ДатаКонца) Тогда
					НоваяСтрокаПланы.Трудоемкость = Выборка.Трудоемкость - ТекТрудоемкостьОбщая;
					Если НоваяСтрокаПланы.Трудоемкость < 0 Тогда
						НоваяСтрокаПланы.Трудоемкость = 0;
					КонецЕсли;
				Иначе
					Если ВсеРабочееВремя = 0 Тогда
						НоваяСтрокаПланы.Трудоемкость 		= 0;
					Иначе
						НоваяСтрокаПланы.Трудоемкость 		= Выборка.Трудоемкость * (РабочиеВремяВТекМес / ВсеРабочееВремя);
					КонецЕсли;
				КонецЕсли;
				
				ТекТрудоемкостьОбщая = ТекТрудоемкостьОбщая + НоваяСтрокаПланы.Трудоемкость;
				
				Если РабочиеВремяВТекМес = 0 Тогда
					НоваяСтрокаПланы.ПроцентЗагрузки	= 0;
				Иначе
					НоваяСтрокаПланы.ПроцентЗагрузки	= НоваяСтрокаПланы.Трудоемкость / РабочиеВремяВТекМес * 100;
				КонецЕсли;
				
				// Корректировка погрешностей округления.
				ОтклонениеПроцентЗагрузки = НоваяСтрокаПланы.ПроцентЗагрузки - Выборка.ПроцентЗагрузки;
				Если ОтклонениеПроцентЗагрузки < 0 Тогда
					ОтклонениеПроцентЗагрузки = - ОтклонениеПроцентЗагрузки;
				КонецЕсли;
				Если ОтклонениеПроцентЗагрузки <= 6 Тогда
					НоваяСтрокаПланы.ПроцентЗагрузки = Выборка.ПроцентЗагрузки;
				КонецЕсли;
				
			КонецЕсли;
			
			ТекДатаПериода = ДобавитьМесяц(ТекДатаПериода, 1);
		КонецЦикла;
		
	КонецЦикла;
	
	Объект.ПланыСвернутые.Сортировать("ДатаНачала");
	
	// Заполним список незапланированных проектов или этапов.
	НезапланированныеПроектыЭтапы.Очистить();
	
	Если МассивВыбранных.Количество() < 2 Тогда

		// Сформируем список незапланированных проектов этой группы.
		Если НЕ ЗначениеЗаполнено(ТекущийПроект) ИЛИ ТекущийПроект.ЭтоГруппа Тогда
			ВремТбл = Объект.Планы.Выгрузить(,"Проект");
			ВремТбл.Свернуть("Проект");
			СписокИсключений = Новый СписокЗначений;
			СписокИсключений.ЗагрузитьЗначения(ВремТбл.ВыгрузитьКолонку("Проект"));

			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Проекты.Ссылка КАК Проект
			|ИЗ
			|	Справочник.Проекты КАК Проекты
			|ГДЕ
			|	Проекты.CRM_Планируемый " + УсловиеПОНезапПроектам +"
			|	И (НЕ Проекты.ПометкаУдаления)
			|	И (НЕ Проекты.Ссылка В(&СписокИсключений))";

			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("СписокИсключений", СписокИсключений);
			
			Табл = Запрос.Выполнить().Выгрузить();
			НезапланированныеПроектыЭтапы.ЗагрузитьЗначения(Табл.ВыгрузитьКолонку("Проект"));
			
		Иначе // Сформируем список незапланированных этапов проекта.
			ВремТбл = Объект.Планы.Выгрузить(,"Этап");
			ВремТбл.Свернуть("Этап");
			СписокИсключений = Новый СписокЗначений;
			СписокИсключений.ЗагрузитьЗначения(ВремТбл.ВыгрузитьКолонку("Этап"));
			
			ТекстЗапроса = "ВЫБРАТЬ
			|	Этапы.Ссылка КАК Этап,
			|	
			|	ВЫБОР
			|		КОГДА Этапы.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 0
			|		КОГДА Этапы.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 1
			|		КОГДА Этапы.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 2
			|		КОГДА Этапы.Родитель.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 3
			|		КОГДА Этапы.Родитель.Родитель.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 4
			|		КОГДА Этапы.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 5
			|		КОГДА Этапы.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 6
			|		КОГДА Этапы.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 7
			|		КОГДА Этапы.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 8
			|		КОГДА Этапы.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 9
			|		ИНАЧЕ 999
			|	КОНЕЦ КАК Уровень,
			|	
			|	Этапы.Родитель.РеквизитДопУпорядочивания КАК Родитель1Порядок,
			|	Этапы.Родитель.Родитель.РеквизитДопУпорядочивания КАК Родитель2Порядок,
			|	Этапы.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания КАК Родитель3Порядок,
			|	Этапы.Родитель.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания КАК Родитель4Порядок,
			|	Этапы.Родитель.Родитель.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания КАК Родитель5Порядок,
			|	Этапы.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания КАК Родитель6Порядок,
			|	Этапы.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания КАК Родитель7Порядок,
			|	Этапы.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания КАК Родитель8Порядок,
			|	Этапы.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания КАК Родитель9Порядок,
			|	Этапы.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания КАК Родитель10Порядок
			|	
			|ИЗ
			|	Справочник.CRM_ЭтапыПроектов КАК Этапы
			|ГДЕ
			|	Этапы.Владелец = &Проект
			|	И (НЕ Этапы.ПометкаУдаления)
			|	И (НЕ Этапы.НеИспользоватьПриПланировании)
			| "  + ?(НЕ ОтборЗначениеЗавершенныеЭтапы, "  И (НЕ Этапы.Завершен)", "") + "
			|	И (НЕ Этапы.Ссылка В(&СписокИсключений))
			|УПОРЯДОЧИТЬ ПО
			|	Этапы.Ссылка,
			|	Уровень,
			|	Родитель10Порядок,
			|	Родитель9Порядок,
			|	Родитель8Порядок,
			|	Родитель7Порядок,
			|	Родитель6Порядок,
			|	Родитель5Порядок,
			|	Родитель4Порядок,
			|	Родитель3Порядок,
			|	Родитель2Порядок,
			|	Родитель1Порядок";
			
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("СписокИсключений", СписокИсключений);
			Запрос.УстановитьПараметр("Проект", ТекущийПроект);
			
			Табл = Запрос.Выполнить().Выгрузить();
			НезапланированныеПроектыЭтапы.ЗагрузитьЗначения(Табл.ВыгрузитьКолонку("Этап"));
		КонецЕсли;
		
	КонецЕсли;
		
	Если РежимПланирования = 2 Тогда // По ресурсам. Если "по проектам, то не нужно 
									 // выводить незалированиые ресурсы.
									 
		// Заполним список незапланированных ресурсов.
		НезапланированныеРесурсы.Очистить();
		
		ВремТбл = Объект.Планы.Выгрузить(,"Исполнитель");
		ВремТбл.Свернуть("Исполнитель");
		СписокИсключений = Новый СписокЗначений;
		СписокИсключений.ЗагрузитьЗначения(ВремТбл.ВыгрузитьКолонку("Исполнитель"));

		ТекстЗапроса = "ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Исполнитель,
		|	Пользователи.Подразделение	КАК Подразделение
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|
		|ГДЕ
		|	Пользователи.CRM_Планируемый
		|	И (НЕ Пользователи.ПометкаУдаления)" + УсловиеПОНезапРесурсам +"
		|	И (НЕ Пользователи.Ссылка В(&СписокИсключений))";

		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("СписокИсключений", СписокИсключений);
		
		НезапланированныеРесурсы.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	Если бНеЗаполненКалендарьЗаПериод Тогда	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В выбранном периоде не заполнен календарь! Вывод без учета календаря!'"));
	ИначеЕсли Не бРассчитаноСУчетомГрафика И Не ПустаяСтрока(РасшифровкаРассчитанныхБезУчетаГрафика) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен календарь за период! Вывод без учета календаря:'") + Символы.ПС + РасшифровкаРассчитанныхБезУчетаГрафика);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Заполняет список всех месяцев года, их сокр. и полное наименование.
Процедура ЗаполнитьМесяцы()
	
	НовыйМесяц = Месяцы.Добавить(); НовыйМесяц.Номер = 1; НовыйМесяц.Наименование = "Январь"; НовыйМесяц.Сокр = "янв";
	НовыйМесяц = Месяцы.Добавить(); НовыйМесяц.Номер = 2; НовыйМесяц.Наименование = "Февраль"; НовыйМесяц.Сокр = "фев";
	НовыйМесяц = Месяцы.Добавить(); НовыйМесяц.Номер = 3; НовыйМесяц.Наименование = "Март"; НовыйМесяц.Сокр = "март";
	НовыйМесяц = Месяцы.Добавить(); НовыйМесяц.Номер = 4; НовыйМесяц.Наименование = "Апрель"; НовыйМесяц.Сокр = "апр";
	НовыйМесяц = Месяцы.Добавить(); НовыйМесяц.Номер = 5; НовыйМесяц.Наименование = "Май"; НовыйМесяц.Сокр = "май";
	НовыйМесяц = Месяцы.Добавить(); НовыйМесяц.Номер = 6; НовыйМесяц.Наименование = "Июнь"; НовыйМесяц.Сокр = "июнь";
	НовыйМесяц = Месяцы.Добавить(); НовыйМесяц.Номер = 7; НовыйМесяц.Наименование = "Июль"; НовыйМесяц.Сокр = "июль";
	НовыйМесяц = Месяцы.Добавить(); НовыйМесяц.Номер = 8; НовыйМесяц.Наименование = "Август"; НовыйМесяц.Сокр = "авг";
	НовыйМесяц = Месяцы.Добавить(); НовыйМесяц.Номер = 9; НовыйМесяц.Наименование = "Сентябрь"; НовыйМесяц.Сокр = "сент";
	НовыйМесяц = Месяцы.Добавить(); НовыйМесяц.Номер = 10; НовыйМесяц.Наименование = "Октябрь"; НовыйМесяц.Сокр = "окт";
	НовыйМесяц = Месяцы.Добавить(); НовыйМесяц.Номер = 11; НовыйМесяц.Наименование = "Ноябрь"; НовыйМесяц.Сокр = "нояб";
	НовыйМесяц = Месяцы.Добавить(); НовыйМесяц.Номер = 12; НовыйМесяц.Наименование = "Декабрь"; НовыйМесяц.Сокр = "дек";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОформление()
	ТаблицаОформление.Очистить();
	
	Макет = Обработки.CRM_ПланированиеПроектов.ПолучитьМакет("Оформление");
	
	КолонкаИдентификатор			= Макет.Области.Идентификатор.Лево;
	КолонкаОформление				= Макет.Области.Оформление.Лево;
	КолонкаИспользоватьШрифт		= Макет.Области.ИспользоватьШрифт.Лево;
	КолонкаИспользоватьЦветТекста	= Макет.Области.ИспользоватьЦветТекста.Лево;
	КолонкаИспользоватьЦветФона		= Макет.Области.ИспользоватьЦветФона.Лево;
	
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		ЗначениеИдентификатор	= Макет.Область(НомерСтроки, КолонкаИдентификатор, НомерСтроки, КолонкаИдентификатор).Текст;
		ЗначениеШрифт			= Макет.Область(НомерСтроки, КолонкаОформление, НомерСтроки, КолонкаОформление).Шрифт;
		ЗначениеЦветТекста		= Макет.Область(НомерСтроки, КолонкаОформление, НомерСтроки, КолонкаОформление).ЦветТекста;
		ЗначениеЦветФона		= Макет.Область(НомерСтроки, КолонкаОформление, НомерСтроки, КолонкаОформление).ЦветФона;
		
		Попытка
			ЗначениеКолонкаИспользоватьШрифт = Булево(Макет.Область(НомерСтроки, КолонкаИспользоватьШрифт, НомерСтроки, КолонкаИспользоватьШрифт).Текст);
		Исключение
			ЗначениеКолонкаИспользоватьШрифт = Ложь;
		КонецПопытки;
		Попытка
			ЗначениеИспользоватьЦветТекста = Булево(Макет.Область(НомерСтроки, КолонкаИспользоватьЦветТекста, НомерСтроки, КолонкаИспользоватьЦветТекста).Текст);
		Исключение
			ЗначениеИспользоватьЦветТекста = Ложь;
		КонецПопытки;
		Попытка
			ЗначениеИспользоватьЦветФона = Булево(Макет.Область(НомерСтроки, КолонкаИспользоватьЦветФона, НомерСтроки, КолонкаИспользоватьЦветФона).Текст);
		Исключение
			ЗначениеИспользоватьЦветФона = Ложь;
		КонецПопытки;
		
		НоваяСтрока = ТаблицаОформление.Добавить();
		НоваяСтрока.Идентификатор	= ЗначениеИдентификатор;
		НоваяСтрока.Шрифт			= ЗначениеШрифт;
		НоваяСтрока.ЦветТекста		= ЗначениеЦветТекста;
		НоваяСтрока.ЦветФона		= ЗначениеЦветФона;
		
		НоваяСтрока.ИспользоватьШрифт		= ЗначениеКолонкаИспользоватьШрифт;
		НоваяСтрока.ИспользоватьЦветТекста	= ЗначениеИспользоватьЦветТекста;
		НоваяСтрока.ИспользоватьЦветФона	= ЗначениеИспользоватьЦветФона;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьОформлениеЭлемента(ЭлементДляПоиска, ИмяЭлемента)
	бЭлементНайден = Ложь;
	
	Для Каждого ОформлениеЭлемента Из ЭлементДляПоиска.Оформление.Элементы Цикл
		Если ОформлениеЭлемента.Параметр = Новый ПараметрКомпоновкиДанных(ИмяЭлемента) Тогда
			бЭлементНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если бЭлементНайден Тогда
		Возврат ОформлениеЭлемента;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ДобавитьНовыйЭлементОформления(СтруктураОформление, ОформляемыеПоля,
	ШрифтПереопределенный = Неопределено, ЦветТекстаПереопределенный = Неопределено, ЦветФонаПереопределенный = Неопределено)
	Если ТипЗнч(ОформляемыеПоля) = Тип("Массив") Тогда
		МассивОформляемыеПоля = ОформляемыеПоля;
	Иначе
		МассивОформляемыеПоля = Новый Массив();
		МассивОформляемыеПоля.Добавить(ОформляемыеПоля);
	КонецЕсли;
	
	НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
	НовыйЭлемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ТекШрифт = Неопределено;
	Если ШрифтПереопределенный <> Неопределено Тогда
		ТекШрифт = ШрифтПереопределенный;
	ИначеЕсли СтруктураОформление.Свойство("Шрифт") Тогда
		ТекШрифт = СтруктураОформление.Шрифт;
	КонецЕсли;
	Если ТекШрифт <> Неопределено Тогда
		ОформлениеЭлемента = ПолучитьОформлениеЭлемента(НовыйЭлемент, "Шрифт");
		ОформлениеЭлемента.Значение = ТекШрифт;
		ОформлениеЭлемента.Использование = Истина;
		
		Для Каждого ОформляемоеПолеИмя Из МассивОформляемыеПоля Цикл
			ОформляемоеПоле = НовыйЭлемент.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПолеИмя);
			ОформляемоеПоле.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ТекЦветТекста = Неопределено;
	Если ЦветТекстаПереопределенный <> Неопределено Тогда
		ТекЦветТекста = ЦветТекстаПереопределенный;
	ИначеЕсли СтруктураОформление.Свойство("ЦветТекста") Тогда
		ТекЦветТекста = СтруктураОформление.ЦветТекста;
	КонецЕсли;
	Если ТекЦветТекста <> Неопределено Тогда
		ОформлениеЭлемента = ПолучитьОформлениеЭлемента(НовыйЭлемент, "ЦветТекста");
		ОформлениеЭлемента.Значение = ТекЦветТекста;
		ОформлениеЭлемента.Использование = Истина;
		
		Для Каждого ОформляемоеПолеИмя Из МассивОформляемыеПоля Цикл
			ОформляемоеПоле = НовыйЭлемент.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПолеИмя);
			ОформляемоеПоле.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ТекЦветФона = Неопределено;
	Если ЦветФонаПереопределенный <> Неопределено Тогда
		ТекЦветФона = ЦветФонаПереопределенный;
	ИначеЕсли СтруктураОформление.Свойство("ЦветФона") Тогда
		ТекЦветФона = СтруктураОформление.ЦветФона;
	КонецЕсли;
	Если ТекЦветФона <> Неопределено Тогда
		ОформлениеЭлемента = ПолучитьОформлениеЭлемента(НовыйЭлемент, "ЦветФона");
		ОформлениеЭлемента.Значение = ТекЦветФона;
		ОформлениеЭлемента.Использование = Истина;
		
		Для Каждого ОформляемоеПолеИмя Из МассивОформляемыеПоля Цикл
			ОформляемоеПоле = НовыйЭлемент.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПолеИмя);
			ОформляемоеПоле.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НовыйЭлемент;
КонецФункции

&НаСервере
Процедура ОбновитьУсловноеОформлениеФормы()
	УсловноеОформление.Элементы.Очистить();
	
	СтруктураОформление = Новый Структура();
	
	Для Каждого СтрокаОформление Из ТаблицаОформление Цикл
		СтруктураОписаниеОформления = Новый Структура();
		Если СтрокаОформление.ИспользоватьШрифт Тогда
			СтруктураОписаниеОформления.Вставить("Шрифт", СтрокаОформление.Шрифт);
		КонецЕсли;
		Если СтрокаОформление.ИспользоватьЦветТекста Тогда
			СтруктураОписаниеОформления.Вставить("ЦветТекста", СтрокаОформление.ЦветТекста);
		КонецЕсли;
		Если СтрокаОформление.ИспользоватьЦветФона Тогда
			СтруктураОписаниеОформления.Вставить("ЦветФона", СтрокаОформление.ЦветФона);
		КонецЕсли;
		
		СтруктураОформление.Вставить(СтрокаОформление.Идентификатор, СтруктураОписаниеОформления);
	КонецЦикла;
	
	// СтрокаНормаВремени 
	НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.СтрокаНормаВремени, "ПланыДеревоГруппировкаПредставление");
	
	ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево.ИдентификаторОформления");
	ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ПолеОтбора.ПравоеЗначение = "СтрокаНормаВремени";
	ПолеОтбора.Использование = Истина;
	НовыйЭлемент.Использование = Истина;
	
	// Подразделение
	НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.ГруппировкаПодразделение, "ПланыДеревоГруппировкаПредставление");
	
	ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево.ИдентификаторОформления");
	ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ПолеОтбора.ПравоеЗначение = "ГруппировкаПодразделение";
	ПолеОтбора.Использование = Истина;
	НовыйЭлемент.Использование = Истина;
	
	// Проект
	НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.ГруппировкаПроект, "ПланыДеревоГруппировкаПредставление");
	
	ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево.ИдентификаторОформления");
	ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ПолеОтбора.ПравоеЗначение = "ГруппировкаПроект";
	ПолеОтбора.Использование = Истина;
	НовыйЭлемент.Использование = Истина;
	
	// Ресурс
	НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.ГруппировкаРесурс, "ПланыДеревоГруппировкаПредставление");
	
	ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево.ИдентификаторОформления");
	ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ПолеОтбора.ПравоеЗначение = "ГруппировкаРесурс";
	ПолеОтбора.Использование = Истина;
	НовыйЭлемент.Использование = Истина;
	
	// Этап
	НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.ГруппировкаЭтап, "ПланыДеревоГруппировкаПредставление");
	
	ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево.ИдентификаторОформления");
	ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ПолеОтбора.ПравоеЗначение = "ГруппировкаЭтап";
	ПолеОтбора.Использование = Истина;
	НовыйЭлемент.Использование = Истина;
	
	// Незапланированные проекты
	НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.ГруппировкаНезапланированныеПроекты, "ПланыДеревоГруппировкаПредставление");
	ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево.ИдентификаторОформления");
	ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ПолеОтбора.ПравоеЗначение = "ГруппировкаНезапланированныеПроекты";
	ПолеОтбора.Использование = Истина;
	НовыйЭлемент.Использование = Истина;
	
	ТекДатаПериода = НачалоДня(Объект.ДатаНачала);
	Пока ТекДатаПериода <= НачалоДня(Объект.ДатаКонца) Цикл
		КолонкаОформлениеПредставление = "Оформление_" + Формат(ТекДатаПериода, "ДФ = ггггММ");
		КолонкаПериодПредставление = "Период_" + Формат(ТекДатаПериода, "ДФ = ггггММ");
		
		// СтрокаНормаВремени 
		НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.СтрокаНормаВремени, КолонкаПериодПредставление);
		
		ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево.ИдентификаторОформления");
		ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПолеОтбора.ПравоеЗначение = "СтрокаНормаВремени";
		ПолеОтбора.Использование = Истина;
		НовыйЭлемент.Использование = Истина;
		
		ЦветЧерный = Новый Цвет(0, 0, 0);
		
		НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.ГруппировкаПодразделение, КолонкаПериодПредставление,, ЦветЧерный);
		
		ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево.ИдентификаторОформления");
		ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПолеОтбора.ПравоеЗначение = "ГруппировкаПодразделение";
		ПолеОтбора.Использование = Истина;
		НовыйЭлемент.Использование = Истина;
		
		НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.ГруппировкаПроект, КолонкаПериодПредставление,, ЦветЧерный);
		
		ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево.ИдентификаторОформления");
		ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПолеОтбора.ПравоеЗначение = "ГруппировкаПроект";
		ПолеОтбора.Использование = Истина;
		НовыйЭлемент.Использование = Истина;
		
		НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.ГруппировкаЭтап, КолонкаПериодПредставление,, ЦветЧерный);
		
		ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево.ИдентификаторОформления");
		ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПолеОтбора.ПравоеЗначение = "ГруппировкаЭтап";
		ПолеОтбора.Использование = Истина;
		НовыйЭлемент.Использование = Истина;
		
		НовыйЭлемент = ДобавитьНовыйЭлементОформления(?(РежимПланирования = 1, СтруктураОформление.ЭтапЗначениеВПериоде, СтруктураОформление.ГруппировкаРесурс), КолонкаПериодПредставление,, ЦветЧерный);
		
		ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево.ИдентификаторОформления");
		ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПолеОтбора.ПравоеЗначение = "ГруппировкаРесурс";
		ПолеОтбора.Использование = Истина;
		НовыйЭлемент.Использование = Истина;
		
		// Загрузка ресурса
		НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.Норма, КолонкаПериодПредставление);
		
		ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево." + КолонкаОформлениеПредставление);
		ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПолеОтбора.ПравоеЗначение = "Норма";
		ПолеОтбора.Использование = Истина;
		НовыйЭлемент.Использование = Истина;
		
		НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.Недогрузка1, КолонкаПериодПредставление);
		
		ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево." + КолонкаОформлениеПредставление);
		ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПолеОтбора.ПравоеЗначение = "Недогрузка1";
		ПолеОтбора.Использование = Истина;
		НовыйЭлемент.Использование = Истина;
		
		НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.Недогрузка2, КолонкаПериодПредставление);
		
		ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево." + КолонкаОформлениеПредставление);
		ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПолеОтбора.ПравоеЗначение = "Недогрузка2";
		ПолеОтбора.Использование = Истина;
		НовыйЭлемент.Использование = Истина;
		
		НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.Недогрузка3, КолонкаПериодПредставление);
		
		ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево." + КолонкаОформлениеПредставление);
		ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПолеОтбора.ПравоеЗначение = "Недогрузка3";
		ПолеОтбора.Использование = Истина;
		НовыйЭлемент.Использование = Истина;
		
		НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.Недогрузка4, КолонкаПериодПредставление);
		
		ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево." + КолонкаОформлениеПредставление);
		ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПолеОтбора.ПравоеЗначение = "Недогрузка4";
		ПолеОтбора.Использование = Истина;
		НовыйЭлемент.Использование = Истина;
		
		НовыйЭлемент = ДобавитьНовыйЭлементОформления(СтруктураОформление.Перегрузка, КолонкаПериодПредставление);
		
		ПолеОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПланыДерево." + КолонкаОформлениеПредставление);
		ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ПолеОтбора.ПравоеЗначение = "Перегрузка";
		ПолеОтбора.Использование = Истина;
		НовыйЭлемент.Использование = Истина;
		
		ТекДатаПериода = ДобавитьМесяц(ТекДатаПериода, 1);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СменитьПорядокКолонокЗаписейПланов()
	
	СписокЗаписейПланов.Порядок.Элементы.Очистить();

	Если РежимПланирования = 1 Тогда // по проектам
		Элементы.Переместить(Элементы.СписокЗаписейПлановИсполнитель, Элементы.СписокЗаписейПланов, Элементы.СписокЗаписейПлановДатаНачала);
		Элементы.Переместить(Элементы.СписокЗаписейПлановПлановЭтап, Элементы.СписокЗаписейПланов, Элементы.СписокЗаписейПлановИсполнитель);
		Элементы.Переместить(Элементы.СписокЗаписейПлановПлановПроект, Элементы.СписокЗаписейПланов, Элементы.СписокЗаписейПлановПлановЭтап);
		// установим сортировку
		ЭлементПорядка = СписокЗаписейПланов.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Проект.Наименование");
		ЭлементПорядка.Использование = Истина;
		ЭлементПорядка.ТипУпорядочивания  = НаправлениеСортировкиКомпоновкиДанных .Возр;
		
	ИначеЕсли РежимПланирования = 2 Тогда // по ресурсам
		Элементы.Переместить(Элементы.СписокЗаписейПлановПлановЭтап, Элементы.СписокЗаписейПланов, Элементы.СписокЗаписейПлановДатаНачала);
		Элементы.Переместить(Элементы.СписокЗаписейПлановПлановПроект, Элементы.СписокЗаписейПланов, Элементы.СписокЗаписейПлановПлановЭтап);
		Элементы.Переместить(Элементы.СписокЗаписейПлановИсполнитель, Элементы.СписокЗаписейПланов, Элементы.СписокЗаписейПлановПлановПроект);
		// установим сортировку
		ЭлементПорядка = СписокЗаписейПланов.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Исполнитель.Наименование");
		ЭлементПорядка.Использование = Истина;

	КонецЕсли;
КонецПроцедуры

&НаСервере
// Выводит планируемое время в виде дерева Ресурс/Проект/Этап.
Процедура ВывестиДеревоПланов()

	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаКонца) ИЛИ Объект.ДатаНачала>Объект.ДатаКонца Тогда
		Возврат;
	КонецЕсли;
	
	// чистим строки
	Строки = ПланыДерево.ПолучитьЭлементы();
	Строки.Очистить();
	
	Если НеобходимоОбновитьКолонкиДереваПланов Тогда
		
		CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().Обработка_CRM_ПланированиеПроектов_ОбновитьКолонкиДереваПланов(ЭтотОбъект);
		
	КонецЕсли; // Обновление ревизитов дерева плнов.
	
	Элементы.ПланыДеревоГруппировкаПредставление.Заголовок = ПолучитьИмяКолонкиГруппировки();
	
	// Сформируем дерево планов по ТЧ Планы (без разбивания периода планирования по месяцам).
	Запрос = Новый Запрос();
	// Создаем временную таблицу для табличной части обработки "Планы".
	ТаблицаПланов = Объект.Планы.Выгрузить();
	Запрос.УстановитьПараметр("Планы", ТаблицаПланов);
	
	// Сформируем для текста запроса секции итогов и упорядочивания.
	Если РежимПланирования = 2 Тогда
		Если ЧислоУровнейГруппировкиПланов = 4 Тогда
			//"Подразделение / Исполнитель / Проект / Этап";
			ТекстВыбрать = "
			|	Планы.Подразделение КАК Подразделение,
			|	Планы.Исполнитель КАК Исполнитель,
			|	Планы.Проект КАК Проект,
			|	Планы.Этап КАК Этап, ";
			ТекстИтогиПо = "Подразделение, Исполнитель, Проект, Этап";
			
			ТекстУпорядочить = "Планы.Подразделение, Планы.Исполнитель, Планы.Проект, %СОРТИРОВКА_ЭТАП%";
			
		ИначеЕсли ЧислоУровнейГруппировкиПланов = 3 Тогда
			Если флВыводитьПодразделения Тогда
				//"Подразделение / Исполнитель / Этап";
				ТекстВыбрать = "
				|	Планы.Подразделение КАК Подразделение,
				|	Планы.Исполнитель КАК Исполнитель,
				|	Планы.Этап КАК Этап, ";
				ТекстИтогиПо = "Подразделение, Исполнитель, Этап";
				
				ТекстУпорядочить = "Планы.Подразделение, Планы.Исполнитель, %СОРТИРОВКА_ЭТАП%";
				
			Иначе
			//	"Исполнитель / Проект / Этап";
				ТекстВыбрать = "
				|	Планы.Исполнитель КАК Исполнитель,
				|	Планы.Проект КАК Проект,
				|	Планы.Этап КАК Этап,";
				ТекстИтогиПо = "Исполнитель, Проект, Этап";
				
				ТекстУпорядочить = "Планы.Исполнитель, Планы.Проект, %СОРТИРОВКА_ЭТАП%";
				
			КонецЕсли;
		Иначе
			//"Исполнитель / Этап";
			ТекстВыбрать =  "
			|	Планы.Исполнитель КАК Исполнитель,
			|	Планы.Этап КАК Этап,";
			ТекстИтогиПо = "Исполнитель, Этап";
			
			ТекстУпорядочить = "Планы.Исполнитель, %СОРТИРОВКА_ЭТАП%";
			
		КонецЕсли; 
	ИначеЕсли РежимПланирования = 1 Тогда
		Если ЧислоУровнейГруппировкиПланов = 4 Тогда
			// "Подразделение / Проект / Этап / Исполнитель";
			ТекстВыбрать = "
			|	Планы.Подразделение КАК Подразделение,
			|	Планы.Проект КАК Проект,
			|	Планы.Этап КАК Этап, 
			|	Планы.Исполнитель КАК Исполнитель,";
			ТекстИтогиПо = "Подразделение, Проект, Этап, Исполнитель";
			
			ТекстУпорядочить = "Планы.Подразделение, Планы.Проект, %СОРТИРОВКА_ЭТАП%, Планы.Исполнитель";
			
		ИначеЕсли ЧислоУровнейГруппировкиПланов = 3 Тогда
			Если флВыводитьПодразделения Тогда
				// "Подразделение / Этап / Исполнитель";
				ТекстВыбрать = "
				|	Планы.Подразделение КАК Подразделение,
				|	Планы.Этап КАК Этап, 
				|	Планы.Исполнитель КАК Исполнитель,";
				ТекстИтогиПо = "Подразделение, Этап, Исполнитель";
				
				ТекстУпорядочить = "Планы.Подразделение, %СОРТИРОВКА_ЭТАП%, Планы.Исполнитель";
				
			Иначе
				//"Проект / Этап / Исполнитель";
				ТекстВыбрать = "
				|	Планы.Проект КАК Проект,
				|	Планы.Этап КАК Этап, 
				|	Планы.Исполнитель КАК Исполнитель,";
				ТекстИтогиПо = "Проект, Этап, Исполнитель";
				
				ТекстУпорядочить = "Планы.Проект, %СОРТИРОВКА_ЭТАП%, Планы.Исполнитель";
				
			КонецЕсли;
		Иначе
			//"Этап / Исполнитель";
			ТекстВыбрать = "
			|	Планы.Этап КАК Этап, 
			|	Планы.Исполнитель КАК Исполнитель,";
			ТекстИтогиПо = "Этап, Исполнитель";
			
			ТекстУпорядочить = "%СОРТИРОВКА_ЭТАП%, Планы.Исполнитель";
			
		КонецЕсли; 
	КонецЕсли; 
	
	ТекстУпорядочить = СтрЗаменить(ТекстУпорядочить, "%СОРТИРОВКА_ЭТАП%",
		"Планы.Этап,
		|ЭтапУровень,
		|ЭтапРодитель10Порядок,
		|ЭтапРодитель9Порядок,
		|ЭтапРодитель8Порядок,
		|ЭтапРодитель7Порядок,
		|ЭтапРодитель6Порядок,
		|ЭтапРодитель5Порядок,
		|ЭтапРодитель4Порядок,
		|ЭтапРодитель3Порядок,
		|ЭтапРодитель2Порядок,
		|ЭтапРодитель1Порядок,
		|Планы.ЭтапПорядок");
	
	ТекстЗапроса = "ВЫБРАТЬ
				   |	ПланыВрем.Проект КАК Проект,
				   |	ВЫБОР // у процесса нет этапов, показываем сам процесс, иначе пусто будет
				   |		КОГДА ПланыВрем.Этап = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка)
				   |			ТОГДА ПланыВрем.Проект
				   |		ИНАЧЕ ПланыВрем.Этап
				   |	КОНЕЦ КАК Этап,
				   |	ВЫБОР
				   |		КОГДА ПланыВрем.Этап = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка)
				   |			ТОГДА -1
				   |		ИНАЧЕ ПланыВрем.ЭтапПорядок
				   |	КОНЕЦ КАК ЭтапПорядок,
				   |	ПланыВрем.Подразделение КАК Подразделение,
				   |	ПланыВрем.Исполнитель КАК Исполнитель,
				   |	ПланыВрем.ДатаНачала КАК ДатаНачала,
				   |	ПланыВрем.ДатаКонца КАК ДатаКонца,
				   |	ПланыВрем.Продолжительность КАК Продолжительность,
				   |	ПланыВрем.ПроцентЗагрузки КАК ПроцентЗагрузки,
				   |	ПланыВрем.Трудоемкость КАК Трудоемкость
				   |ПОМЕСТИТЬ ВремПланы
				   |ИЗ
				   |	&Планы КАК ПланыВрем
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ "+  ТекстВыбрать + "
				   |	Планы.ЭтапПорядок КАК ЭтапПорядок,
				   |	Планы.ДатаНачала КАК ДатаНачала,
				   |	Планы.ДатаКонца КАК ДатаКонца,
				   |	Планы.Продолжительность КАК Продолжительность,
				   |	Планы.ПроцентЗагрузки КАК ПроцентЗагрузки,
				   |	Планы.Трудоемкость КАК Трудоемкость,
				   |	
				   |	ВЫБОР
				   |		КОГДА НЕ Планы.Этап ССЫЛКА Справочник.CRM_ЭтапыПроектов ТОГДА -1
				   |		КОГДА Планы.Этап.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 0
				   |		КОГДА Планы.Этап.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 1
				   |		КОГДА Планы.Этап.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 2
				   |		КОГДА Планы.Этап.Родитель.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 3
				   |		КОГДА Планы.Этап.Родитель.Родитель.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 4
				   |		КОГДА Планы.Этап.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 5
				   |		КОГДА Планы.Этап.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 6
				   |		КОГДА Планы.Этап.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 7
				   |		КОГДА Планы.Этап.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 8
				   |		КОГДА Планы.Этап.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель = Значение(Справочник.CRM_ЭтапыПроектов.ПустаяСсылка) ТОГДА 9
				   |		ИНАЧЕ 999
				   |	КОНЕЦ КАК ЭтапУровень,
				   |	
				   |	ВЫБОР
				   |		КОГДА НЕ Планы.Этап ССЫЛКА Справочник.CRM_ЭтапыПроектов ТОГДА -1
				   |		ИНАЧЕ Планы.Этап.Родитель.РеквизитДопУпорядочивания
				   |	КОНЕЦ КАК ЭтапРодитель1Порядок,
				   |	ВЫБОР
				   |		КОГДА НЕ Планы.Этап ССЫЛКА Справочник.CRM_ЭтапыПроектов ТОГДА -1
				   |		ИНАЧЕ Планы.Этап.Родитель.Родитель.РеквизитДопУпорядочивания
				   |	КОНЕЦ КАК ЭтапРодитель2Порядок,
				   |	ВЫБОР
				   |		КОГДА НЕ Планы.Этап ССЫЛКА Справочник.CRM_ЭтапыПроектов ТОГДА -1
				   |		ИНАЧЕ Планы.Этап.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания
				   |	КОНЕЦ КАК ЭтапРодитель3Порядок,
				   |	ВЫБОР
				   |		КОГДА НЕ Планы.Этап ССЫЛКА Справочник.CRM_ЭтапыПроектов ТОГДА -1
				   |		ИНАЧЕ Планы.Этап.Родитель.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания
				   |	КОНЕЦ КАК ЭтапРодитель4Порядок,
				   |	ВЫБОР
				   |		КОГДА НЕ Планы.Этап ССЫЛКА Справочник.CRM_ЭтапыПроектов ТОГДА -1
				   |		ИНАЧЕ Планы.Этап.Родитель.Родитель.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания
				   |	КОНЕЦ КАК ЭтапРодитель5Порядок,
				   |	ВЫБОР
				   |		КОГДА НЕ Планы.Этап ССЫЛКА Справочник.CRM_ЭтапыПроектов ТОГДА -1
				   |		ИНАЧЕ Планы.Этап.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания
				   |	КОНЕЦ КАК ЭтапРодитель6Порядок,
				   |	ВЫБОР
				   |		КОГДА НЕ Планы.Этап ССЫЛКА Справочник.CRM_ЭтапыПроектов ТОГДА -1
				   |		ИНАЧЕ Планы.Этап.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания
				   |	КОНЕЦ КАК ЭтапРодитель7Порядок,
				   |	ВЫБОР
				   |		КОГДА НЕ Планы.Этап ССЫЛКА Справочник.CRM_ЭтапыПроектов ТОГДА -1
				   |		ИНАЧЕ Планы.Этап.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания
				   |	КОНЕЦ КАК ЭтапРодитель8Порядок,
				   |	ВЫБОР
				   |		КОГДА НЕ Планы.Этап ССЫЛКА Справочник.CRM_ЭтапыПроектов ТОГДА -1
				   |		ИНАЧЕ Планы.Этап.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания
				   |	КОНЕЦ КАК ЭтапРодитель9Порядок,
				   |	ВЫБОР
				   |		КОГДА НЕ Планы.Этап ССЫЛКА Справочник.CRM_ЭтапыПроектов ТОГДА -1
				   |		ИНАЧЕ Планы.Этап.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель.РеквизитДопУпорядочивания
				   |	КОНЕЦ КАК ЭтапРодитель10Порядок
				   |	
				   |ИЗ
				   |	ВремПланы КАК Планы
				   |	
				   |УПОРЯДОЧИТЬ ПО
				   |	" + ТекстУпорядочить + "
				   |	
				   |ИТОГИ
				   |	СУММА(Продолжительность),
				   |	СУММА(ПроцентЗагрузки),
				   |	СУММА(Трудоемкость),
				   |	СРЕДНЕЕ(ЭтапПорядок)
				   |ПО
				   |	" + ТекстИтогиПо;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	ДеревоИзТЧ = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоЗначенийПланы = РеквизитФормыВЗначение("ПланыДерево");
	
	Если флВыводитьНераспланированныеРесурсы Тогда
		
		// Добавим незапланированные проекты.
		Если НезапланированныеПроектыЭтапы.Количество() > 0 Тогда
			КореньНезапланированных =  ДеревоЗначенийПланы.Строки.Вставить(1);
			КореньНезапланированных.Группировка = Справочники.Проекты.ПустаяСсылка();
			ИмяВетки = ?(НЕ ЗначениеЗаполнено(Элементы.СписокПроектов.ТекущаяСтрока) ИЛИ Элементы.СписокПроектов.ТекущаяСтрока.ЭтоГруппа, НСтр("ru = '[НЕЗАПЛАНИРОВАННЫЕ ПРОЕКТЫ]'"), НСтр("ru = '[НЕЗАПЛАНИРОВАННЫЕ ЭТАПЫ]'"));
			КореньНезапланированных.ГруппировкаПредставление = ИмяВетки;
			КореньНезапланированных.ИдентификаторОформления = "ГруппировкаНезапланированныеПроекты";
			
			Для каждого ЗначСписка Из НезапланированныеПроектыЭтапы Цикл
				СтрокаДерева = КореньНезапланированных.Строки.Добавить();
				СтрокаДерева.Группировка = ЗначСписка.Значение;
				СтрокаДерева.ГруппировкаПредставление = Строка(ЗначСписка.Значение);
				Если ТипЗнч(ЗначСписка.Значение) = Тип("СправочникСсылка.Проекты") Тогда
					СтрокаДерева.ИдентификаторОформления = "ГруппировкаПроект";
				ИначеЕсли ТипЗнч(ЗначСписка.Значение) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
					СтрокаДерева.ИдентификаторОформления = "ГруппировкаЭтап";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Добавим незапланированные ресурсы.
		Если РежимПланирования = 2 И НезапланированныеРесурсы.Количество() > 0 Тогда // по ресурсам
			// Выведем незапланированные ресурсы.
			ТаблицаНезаплРесурсы = НезапланированныеРесурсы.Выгрузить();
			
			Если флВыводитьПодразделения Тогда
				
				ПодразделенияНезапланированныхРесурсов = ТаблицаНезаплРесурсы.Скопировать();
				ПодразделенияНезапланированныхРесурсов.Свернуть("Подразделение");
				
				Для Каждого СтрокаПодразделение Из ПодразделенияНезапланированныхРесурсов Цикл
					Если ДеревоЗначенийПланы.Строки.Найти(СтрокаПодразделение.Подразделение) = Неопределено Тогда
						// В дереве нет такого подразделение, надо добавить.
						НоваяСтрокаДерева = ДеревоЗначенийПланы.Строки.Добавить();
						НоваяСтрокаДерева.Группировка = СтрокаПодразделение.Подразделение;
						НоваяСтрокаДерева.ГруппировкаПредставление = СтрокаПодразделение.Подразделение.Наименование;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ТекСтрокаДерева Из ДеревоЗначенийПланы.Строки Цикл
					мсвСтрок = ТаблицаНезаплРесурсы.НайтиСтроки(Новый Структура("Подразделение", ТекСтрокаДерева.Группировка));
					Для Каждого ТекСтрокаПроекта Из мсвСтрок Цикл
						НоваяСтрокаПроекта = ТекСтрокаДерева.Строки.Добавить();
						НоваяСтрокаПроекта.Группировка = ТекСтрокаПроекта.Исполнитель;
						НоваяСтрокаПроекта.ГруппировкаПредставление = Строка(ТекСтрокаПроекта.Исполнитель);
						
					КонецЦикла;
					ТекСтрокаДерева.Строки.Сортировать("ГруппировкаПредставление");
					
				КонецЦикла;
				ДеревоЗначенийПланы.Строки.Сортировать("ГруппировкаПредставление");
				
			Иначе // нет вывода подразделений
				
				Для Каждого ТекРесурс Из ТаблицаНезаплРесурсы Цикл
					НоваяСтрокаДерева = ДеревоЗначенийПланы.Строки.Добавить();
					НоваяСтрокаДерева.Группировка = ТекРесурс.Исполнитель;
					НоваяСтрокаДерева.ГруппировкаПредставление = Строка(ТекРесурс.Исполнитель);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		ДеревоЗначенийПланы.Строки.Сортировать("ГруппировкаПредставление");
		
	КонецЕсли; // Вывод незапланированных ресурсов.
	
	// Заполним основное дерево планов.
	СформироватьДеревоПланов(ДеревоИзТЧ, ДеревоЗначенийПланы);
	
	// Заполняем условное оформление дерева планов.
	ОбновитьУсловноеОформлениеФормы();
	
	// Добавим первой строку с данными графиков работы.
	ДобавитьЗаголовокПланов(ДеревоЗначенийПланы);

	ЗначениеВРеквизитФормы(ДеревоЗначенийПланы, "ПланыДерево");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоПланов(ДеревоТЧ, ДеревоПланов, ИспользуемыйКалендарь = Неопределено, СоответствиеКэшРабочихЧасовВПериоде = Неопределено, ТрудоемкостьКалендарь = Неопределено)
	
	Если ИспользуемыйКалендарь = Неопределено Тогда
		ИспользуемыйКалендарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	КонецЕсли;
	Если СоответствиеКэшРабочихЧасовВПериоде = Неопределено Тогда
		СоответствиеКэшРабочихЧасовВПериоде = Новый("Соответствие");
	КонецЕсли;
	
	Для Каждого СтрокаДереваТЧ Из ДеревоТЧ.Строки Цикл
		
		СтрокаДереваПланов = ДеревоПланов.Строки.Добавить();
		
		СтрокаДереваПланов.Группировка = СтрокаДереваТЧ[СтрокаДереваТЧ.Уровень()];
		СтрокаДереваПланов.ГруппировкаПредставление = Строка(СтрокаДереваТЧ[СтрокаДереваТЧ.Уровень()]);
		СтрокаДереваПланов.УровеньВложенности = СтрокаДереваПланов.Уровень();
		
		Если ТипЗнч(СтрокаДереваПланов.Группировка) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			СтрокаДереваПланов.ИдентификаторОформления = "ГруппировкаПодразделение";
		ИначеЕсли ТипЗнч(СтрокаДереваПланов.Группировка) = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			СтрокаДереваПланов.ИдентификаторОформления = "ГруппировкаЭтап";
		ИначеЕсли ТипЗнч(СтрокаДереваПланов.Группировка) = Тип("СправочникСсылка.Пользователи") Тогда
			СтрокаДереваПланов.ИдентификаторОформления = "ГруппировкаРесурс";
		ИначеЕсли ТипЗнч(СтрокаДереваПланов.Группировка) = Тип("СправочникСсылка.Проекты") Тогда
			СтрокаДереваПланов.ИдентификаторОформления = "ГруппировкаПроект";
		КонецЕсли;
		
		СтрокиНижнегоУровня = СтрокаДереваТЧ.Строки;
		
		Если СтрокиНижнегоУровня[0].Строки.Количество() = 0 Тогда
			// Дошли до посл. уровня вложенности, обработаем  данные строк.
			ТрудоемкостьПлан = 0;
			ПроцентыСред = 0;
			Для Каждого СтрокаНижнегоУровняТЧ Из СтрокиНижнегоУровня Цикл
				// Раскидаем трудоемкость по колонкам месяцов.
				ИмяКолонкиМесяца = "Период_" + Формат(СтрокаНижнегоУровняТЧ.ДатаНачала, "ДФ = ггггММ");
				ИмяКолонкиМесяцаОформление = "Оформление_" + Формат(СтрокаНижнегоУровняТЧ.ДатаНачала, "ДФ = ггггММ");
				ИмяКолонкиМесяцаТрудоемкостьВЧасах = "Трудоемкость_" + Формат(СтрокаНижнегоУровняТЧ.ДатаНачала, "ДФ = ггггММ");
				
				Если РежимДанныхПланирования = "Часы" Тогда
					СтрокаДереваПланов[ИмяКолонкиМесяца] = СтрокаДереваПланов[ИмяКолонкиМесяца] + СтрокаНижнегоУровняТЧ.Трудоемкость;
					
					СтрокаДереваПланов.Итоги = СтрокаДереваПланов.Итоги + СтрокаДереваПланов[ИмяКолонкиМесяца];
					
				ИначеЕсли РежимДанныхПланирования = "Дни" Тогда
					СтрокаДереваПланов[ИмяКолонкиМесяца] = Окр(СтрокаДереваПланов[ИмяКолонкиМесяца] + СтрокаНижнегоУровняТЧ.Трудоемкость / 8, 1, РежимОкругления.Окр15как20);
					
					СтрокаДереваПланов.Итоги = СтрокаДереваПланов.Итоги + СтрокаДереваПланов[ИмяКолонкиМесяца];
					
				ИначеЕсли РежимДанныхПланирования = "Проценты" Тогда
					СтрокаДереваПланов[ИмяКолонкиМесяца] = Окр(СтрокаНижнегоУровняТЧ.ПроцентЗагрузки, 1, РежимОкругления.Окр15как20);
					
					ТрудоемкостьПлан = ТрудоемкостьПлан + СтрокаНижнегоУровняТЧ.Трудоемкость;
					ПроцентыСред = ПроцентыСред + СтрокаНижнегоУровняТЧ.ПроцентЗагрузки;
				КонецЕсли;
				
				СтрокаДереваПланов[ИмяКолонкиМесяцаТрудоемкостьВЧасах] = СтрокаНижнегоУровняТЧ.Трудоемкость;
				
				Если РежимПланирования = 2 Тогда // Ресурсы
					// Вычисление загрузки
					РабочееВремяМесяцаЧасы = СоответствиеКэшРабочихЧасовВПериоде[НачалоМесяца(СтрокаНижнегоУровняТЧ.ДатаНачала)];
					Если РабочееВремяМесяцаЧасы = Неопределено Тогда
						РабочееВремяМесяцаЧасы = Обработки.CRM_ПланированиеПроектов.ПолучитьПродолжительностьПериода(НачалоМесяца(СтрокаНижнегоУровняТЧ.ДатаНачала), КонецМесяца(СтрокаНижнегоУровняТЧ.ДатаНачала), ИспользуемыйКалендарь).ВЧасах;
						СоответствиеКэшРабочихЧасовВПериоде.Вставить(НачалоМесяца(СтрокаНижнегоУровняТЧ.ДатаНачала), РабочееВремяМесяцаЧасы);
					КонецЕсли;
					СтрокаДереваПланов[ИмяКолонкиМесяцаОформление] = Обработки.CRM_ПланированиеПроектов.ВычислитьЗагрузку(РабочееВремяМесяцаЧасы, СтрокаНижнегоУровняТЧ.Трудоемкость);
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокиНижнегоУровня.Количество() > 0 Тогда
				ПроцентыСред = ПроцентыСред / СтрокиНижнегоУровня.Количество();
			КонецЕсли;
			
			Если РежимДанныхПланирования = "Проценты" Тогда
				Если ТрудоемкостьКалендарь = Неопределено Тогда
					ТрудоемкостьКалендарь = 0;
					ТекДата = НачалоМесяца(Объект.ДатаНачала);
					Пока ТекДата <= НачалоМесяца(Объект.ДатаКонца) Цикл
						РабочееВремяМесяцаЧасы = СоответствиеКэшРабочихЧасовВПериоде[НачалоМесяца(ТекДата)];
						Если РабочееВремяМесяцаЧасы = Неопределено Тогда
							РабочееВремяМесяцаЧасы = Обработки.CRM_ПланированиеПроектов.ПолучитьПродолжительностьПериода(НачалоМесяца(ТекДата), КонецМесяца(ТекДата), ИспользуемыйКалендарь).ВЧасах;
							СоответствиеКэшРабочихЧасовВПериоде.Вставить(НачалоМесяца(ТекДата), РабочееВремяМесяцаЧасы);
						КонецЕсли;
						ТрудоемкостьКалендарь = ТрудоемкостьКалендарь + РабочееВремяМесяцаЧасы;
						
						ТекДата = ДобавитьМесяц(ТекДата, 1);
					КонецЦикла;
				КонецЕсли;
				
				СтрокаДереваПланов.Итоги = ?(ТрудоемкостьКалендарь = 0, 0, ТрудоемкостьПлан / ТрудоемкостьКалендарь * 100);
				
				// Корректировка итогов
				ОтклонениеПроцентов = СтрокаДереваПланов.Итоги - ПроцентыСред;
				Если ОтклонениеПроцентов < 0 Тогда
					ОтклонениеПроцентов = - ОтклонениеПроцентов;
				КонецЕсли;
				Если ОтклонениеПроцентов <= 0.9 Тогда
					СтрокаДереваПланов.Итоги = ПроцентыСред;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			СформироватьДеревоПланов(СтрокаДереваТЧ, СтрокаДереваПланов, ИспользуемыйКалендарь, СоответствиеКэшРабочихЧасовВПериоде);
			
			// Заполним итоги по  колонкам месяцев.
			ТекДата = НачалоМесяца(Объект.ДатаНачала);
			ПроцентыСред = 0;
			КоличествоИнтервалов = 0;
			Пока ТекДата <= НачалоМесяца(Объект.ДатаКонца) Цикл
				ИмяКолонкиМесяца = "Период_" + Формат(ТекДата, "ДФ = ггггММ");
				ИмяКолонкиМесяцаТрудоемкостьВЧасах = "Трудоемкость_" + Формат(ТекДата, "ДФ = ггггММ");
				
				СтрокаДереваПланов[ИмяКолонкиМесяцаТрудоемкостьВЧасах] = СтрокаДереваПланов.Строки.Итог(ИмяКолонкиМесяцаТрудоемкостьВЧасах);
				
				Если РежимДанныхПланирования = "Проценты" Тогда
					РабочееВремяМесяцаЧасы = СоответствиеКэшРабочихЧасовВПериоде[НачалоМесяца(ТекДата)];
					Если РабочееВремяМесяцаЧасы = Неопределено Тогда
						РабочееВремяМесяцаЧасы = Обработки.CRM_ПланированиеПроектов.ПолучитьПродолжительностьПериода(НачалоМесяца(ТекДата), КонецМесяца(ТекДата), ИспользуемыйКалендарь).ВЧасах;
						СоответствиеКэшРабочихЧасовВПериоде.Вставить(НачалоМесяца(ТекДата), РабочееВремяМесяцаЧасы);
					КонецЕсли;
					СтрокаДереваПланов[ИмяКолонкиМесяца] = ?(РабочееВремяМесяцаЧасы = 0, 0, СтрокаДереваПланов[ИмяКолонкиМесяцаТрудоемкостьВЧасах] / РабочееВремяМесяцаЧасы * 100);
					
					ПроцентыСредДляИтоговПоСтрокам = 0;
					Если СтрокаДереваПланов.Строки.Количество() > 0 Тогда
						ПроцентыСредДляИтоговПоСтрокам = СтрокаДереваПланов.Строки.Итог(ИмяКолонкиМесяца) / СтрокаДереваПланов.Строки.Количество();
					КонецЕсли;
					ОтклонениеПроцентов = СтрокаДереваПланов[ИмяКолонкиМесяца] - ПроцентыСредДляИтоговПоСтрокам;
					Если ОтклонениеПроцентов < 0 Тогда
						ОтклонениеПроцентов = - ОтклонениеПроцентов;
					КонецЕсли;
					Если ОтклонениеПроцентов <= 0.9 Тогда
						СтрокаДереваПланов[ИмяКолонкиМесяца] = ПроцентыСредДляИтоговПоСтрокам;
					КонецЕсли;
				Иначе
					СтрокаДереваПланов[ИмяКолонкиМесяца] = СтрокаДереваПланов.Строки.Итог(ИмяКолонкиМесяца);
				КонецЕсли;
				
				ТекДата = ДобавитьМесяц(ТекДата, 1);
				
				ПроцентыСред = ПроцентыСред + СтрокаДереваПланов[ИмяКолонкиМесяца];
				КоличествоИнтервалов = КоличествоИнтервалов + 1;
			КонецЦикла;
			Если КоличествоИнтервалов > 0 Тогда
				ПроцентыСред = ПроцентыСред / КоличествоИнтервалов;
			КонецЕсли;
			
			Если РежимПланирования = 2 Тогда // Ресурсы
				// Вычисление загрузки
				ТекДата = НачалоМесяца(Объект.ДатаНачала);
				Пока ТекДата <= НачалоМесяца(Объект.ДатаКонца) Цикл
					ИмяКолонкиМесяцаОформление = "Оформление_" + Формат(ТекДата, "ДФ = ггггММ");
					ИмяКолонкиМесяцаТрудоемкостьВЧасах = "Трудоемкость_" + Формат(ТекДата, "ДФ = ггггММ");
					
					РабочееВремяМесяцаЧасы = СоответствиеКэшРабочихЧасовВПериоде[НачалоМесяца(ТекДата)];
					Если РабочееВремяМесяцаЧасы = Неопределено Тогда
						РабочееВремяМесяцаЧасы = Обработки.CRM_ПланированиеПроектов.ПолучитьПродолжительностьПериода(НачалоМесяца(ТекДата), КонецМесяца(ТекДата), ИспользуемыйКалендарь).ВЧасах;
						СоответствиеКэшРабочихЧасовВПериоде.Вставить(НачалоМесяца(ТекДата), РабочееВремяМесяцаЧасы);
					КонецЕсли;
					
					СтрокаДереваПланов[ИмяКолонкиМесяцаОформление] = Обработки.CRM_ПланированиеПроектов.ВычислитьЗагрузку(РабочееВремяМесяцаЧасы, СтрокаДереваПланов.Строки.Итог(ИмяКолонкиМесяцаТрудоемкостьВЧасах));
					
					ТекДата = ДобавитьМесяц(ТекДата, 1);
				КонецЦикла;
			КонецЕсли;
			
			Если РежимДанныхПланирования = "Проценты" Тогда
				Если ТрудоемкостьКалендарь = Неопределено Тогда
					ТрудоемкостьКалендарь = 0;
					ТекДата = НачалоМесяца(Объект.ДатаНачала);
					Пока ТекДата <= НачалоМесяца(Объект.ДатаКонца) Цикл
						РабочееВремяМесяцаЧасы = СоответствиеКэшРабочихЧасовВПериоде[НачалоМесяца(ТекДата)];
						Если РабочееВремяМесяцаЧасы = Неопределено Тогда
							РабочееВремяМесяцаЧасы = Обработки.CRM_ПланированиеПроектов.ПолучитьПродолжительностьПериода(НачалоМесяца(ТекДата), КонецМесяца(ТекДата), ИспользуемыйКалендарь).ВЧасах;
							СоответствиеКэшРабочихЧасовВПериоде.Вставить(НачалоМесяца(ТекДата), РабочееВремяМесяцаЧасы);
						КонецЕсли;
						ТрудоемкостьКалендарь = ТрудоемкостьКалендарь + РабочееВремяМесяцаЧасы;
						
						ТекДата = ДобавитьМесяц(ТекДата, 1);
					КонецЦикла;
				КонецЕсли;
				
				СтрокаДереваПланов.Итоги = ?(ТрудоемкостьКалендарь = 0, 0, СтрокаДереваТЧ.Трудоемкость / ТрудоемкостьКалендарь * 100);
				
				// Корректировка итогов
				ОтклонениеПроцентов = СтрокаДереваПланов.Итоги - ПроцентыСред;
				Если ОтклонениеПроцентов < 0 Тогда
					ОтклонениеПроцентов = - ОтклонениеПроцентов;
				КонецЕсли;
				Если ОтклонениеПроцентов <= 0.9 Тогда
					СтрокаДереваПланов.Итоги = ПроцентыСред;
				КонецЕсли;
			Иначе
				СтрокаДереваПланов.Итоги = СтрокаДереваПланов.Строки.Итог("ИТОГИ");
			КонецЕсли;
			
			//
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоПлановНаСервере(ПеречитыватьДанные = Истина)
	// Может быть изменение количества группировок и их порядка, это учтем.
	УстановитьЧислоУровнейГруппировкиПланов(Элементы.СписокПроектов.ВыделенныеСтроки);
	
	Если ПеречитыватьДанные Тогда // С перечитыванием из базы - перезаполняем данные ТЧ Планы.
		ПерезаполнитьДанныеПланов();
	КонецЕсли;
	
	ВывестиДеревоПланов();
КонецПроцедуры

&НаКлиенте
// Строит дерево планов по данным ТЧ Планы.
Процедура ОбновитьДеревоПланов(ПеречитыватьДанные = Истина)
	
	// Разделение вариантов обновления дерева.
	Если ПеречитыватьДанные Тогда // с перечитыванием из базы - перезаполняем данные ТЧ Планы.
		ПолноеОбновлениеПланов = Истина;
		Если ВыводитьСостояние Тогда
			Состояние(НСтр("ru = 'Перезаполняются данные планов ...'"));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаКонца) ИЛИ Объект.ДатаНачала>Объект.ДатаКонца Тогда
		Если НЕ ЗапретНаОбновлениеДерева Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Некорректный период планирования!'"), 5);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Если ВыводитьСостояние Тогда
		Состояние(НСтр("ru = 'Выполняется вывод плановых данных ...'"));
	КонецЕсли;
	
	// Запомним позицию в дереве, потом постараемся на нее вернуться.
	ТекРодитель = Элементы.ПланыДерево.ТекущиеДанные;
	мсвЗначенияПозиционирования = Новый Массив;
	Если ТекРодитель <> Неопределено И ТекРодитель.Группировка <> Неопределено Тогда
		
		Пока ТекРодитель <> Неопределено Цикл
			мсвЗначенияПозиционирования.Вставить(0, ТекРодитель.Группировка);
			ТекРодитель = ТекРодитель.ПолучитьРодителя();
		КонецЦикла;
	
	КонецЕсли;
	
	ОбновитьДеревоПлановНаСервере(ПеречитыватьДанные);
	
	// Постараемся вернуться на ту строку, на которой стояли до обновления.
	Если мсвЗначенияПозиционирования.Количество() > 0 Тогда
		СтрокиДерева = ПланыДерево.ПолучитьЭлементы();
		СтрокаПозиционирования = Неопределено;
		Для Каждого ТекЗначениеПозиционирования Из мсвЗначенияПозиционирования Цикл
			СтрокаПозиц = Неопределено;
			Для каждого ТекСтрока Из СтрокиДерева Цикл
				Если ТекСтрока.Группировка = ТекЗначениеПозиционирования Тогда
					СтрокаПозиц = ТекСтрока;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		
			Если СтрокаПозиц = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаПозиционирования = СтрокаПозиц.ПолучитьИдентификатор();
			СтрокиДерева = СтрокаПозиц.ПолучитьЭлементы();
		КонецЦикла;
		
		Если СтрокаПозиционирования <> Неопределено Тогда
			Элементы.ПланыДерево.ТекущаяСтрока = СтрокаПозиционирования;
		КонецЕсли;
	КонецЕсли;
	
	ВыводитьСостояние = ложь;
	
	Если СписокПроектовВыделенныеСтроки.Количество() > 0 Тогда
		Элементы.СписокПроектов.ВыделенныеСтроки.Очистить();
		Для Каждого ЗначениеСписка Из СписокПроектовВыделенныеСтроки Цикл
			Элементы.СписокПроектов.ВыделенныеСтроки.Добавить(ЗначениеСписка.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()

	Элементы.КнопкаВыводитьПодразделения.Пометка = флВыводитьПодразделения;
	Элементы.КнопкаВыводитьНезапланированныеРесурсы.Пометка = флВыводитьНераспланированныеРесурсы;

КонецПроцедуры

&НаКлиенте
// Выполняет смещение периода планирования.
// Параметры:
//  ЗнакСмещения - число, "1" - вперед, "-1" -  назад.
//
Процедура СместитьПериод(ЗнакСмещения)
	// точно и не надо
	СмещениеМесяцев = 1 + Цел((НачалоМесяца(Объект.ДатаКонца) - НачалоМесяца(Объект.ДатаНачала)) / (60*60*24*30));
	Объект.ДатаНачала =ДобавитьМесяц(Объект.ДатаНачала, СмещениеМесяцев*ЗнакСмещения);
	Объект.ДатаКонца =ДобавитьМесяц(Объект.ДатаКонца, СмещениеМесяцев*ЗнакСмещения);
	ПриИзмененииПериодаПланирования();
КонецПроцедуры

&НаКлиенте
// Устанавливает отборы для списка записей планов.
//
Процедура УстановитьОтборыЗаписейПланов(ОтбиратьПоДате = Истина)
	
	Если ОтбиратьПоДате Тогда
		// Даты - условие вхождения записи регистра в период планирования следующее:
		//	(CRM_ПланыПроектов.ДатаНачала МЕЖДУ Объект.ДатаНачала И Объект.ДатаКонца) ИЛИ
		//	(CRM_ПланыПроектов.ДатаКонца МЕЖДУ Объект.ДатаНачала И Объект.ДатаКонца)  ИЛИ
		//	(CRM_ПланыПроектов.ДатаНачала <= Объект.ДатаНачала И CRM_ПланыПроектов.ДатаКонца >= Объект.ДатаКонца))
		
		ГруппаОтбораПоПериоду_Или = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(СписокЗаписейПланов.Отбор.Элементы, "ОтборПоПериоду_ИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
		ГруппаОтбораПоПериоду_И1 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаОтбораПоПериоду_Или.Элементы, "ОтборПоПериоду_И1", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		// Используем "ДобавитьЭлементКомпоновки" вместо "УстановитьЭлементОтбора", потому что в группе 2 поля с одним именем.
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораПоПериоду_И1, "ДатаНачала", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, Объект.ДатаНачала,, Истина);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораПоПериоду_И1, "ДатаНачала", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, Объект.ДатаКонца,, Истина);
		
		ГруппаОтбораПоПериоду_И2 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаОтбораПоПериоду_Или.Элементы, "ОтборПоПериоду_И2", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораПоПериоду_И2, "ДатаКонца", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, Объект.ДатаНачала,, Истина);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораПоПериоду_И2, "ДатаКонца", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, Объект.ДатаКонца,, Истина);
		
		ГруппаОтбораПоПериоду_И3 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаОтбораПоПериоду_Или.Элементы, "ОтборПоПериоду_И3", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбораПоПериоду_И3, "ДатаНачала", Объект.ДатаНачала, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбораПоПериоду_И3, "ДатаКонца", Объект.ДатаКонца, ВидСравненияКомпоновкиДанных.БольшеИлиРавно,, Истина);
		
	КонецЕсли;
	
	// поля отборов с формы
	
	МассивВыбранных = Элементы.СписокПроектов.ВыделенныеСтроки;
	Если МассивВыбранных.Количество() > 1 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Проект", МассивВыбранных, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
	Иначе
		ТекущийПроект = Элементы.СписокПроектов.ТекущаяСтрока;
		Если ЗначениеЗаполнено(ТекущийПроект) Тогда
			Если ОбъектЯвляетсяГруппой(ТекущийПроект) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Проект", ТекущийПроект, ВидСравненияКомпоновкиДанных.ВИерархии,, Истина);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Проект", ТекущийПроект,,, Истина);
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Проект",,,,Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Подразделение", ОтборЗначениеПодразделение,,,ЗначениеЗаполнено(ОтборЗначениеПодразделение));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Проект.CRM_Партнер", ОтборЗначениеПартнер,,,ЗначениеЗаполнено(ОтборЗначениеПартнер));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Исполнитель", ОтборЗначениеИсполнитель,,,ЗначениеЗаполнено(ОтборЗначениеИсполнитель));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Проект.Ответственный", ОтборЗначениеОтветственный,,,ЗначениеЗаполнено(ОтборЗначениеОтветственный));
	// отключим этап
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Этап", ,,,Ложь);

КонецПроцедуры

&НаКлиенте
// Устанавливает отборы для списка контрольных точек.
//
Процедура УстановитьОтборыКонтрольныхТочек(ОтбиратьПоДате = Истина)
	
	Если ОтбиратьПоДате Тогда
		ГруппаОтбораПоПериоду = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(СписокКонтрольныхТочек.Отбор.Элементы, "ОтборПоПериоду", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		// Используем "ДобавитьЭлементКомпоновки" вместо "УстановитьЭлементОтбора", потому что в группе 2 поля с одним именем.
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораПоПериоду, "Дата", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, Объект.ДатаНачала,, Истина);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораПоПериоду, "Дата", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, КонецДня(Объект.ДатаКонца),, Истина);
	КонецЕсли;
	
	// поля отборов с формы
	МассивВыбранных = Элементы.СписокПроектов.ВыделенныеСтроки;
	Если МассивВыбранных.Количество() > 1 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокКонтрольныхТочек.Отбор, "Проект", МассивВыбранных, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
	Иначе
		ТекущийПроект = Элементы.СписокПроектов.ТекущаяСтрока;
		Если ЗначениеЗаполнено(ТекущийПроект) Тогда
			Если ОбъектЯвляетсяГруппой(ТекущийПроект) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокКонтрольныхТочек.Отбор, "Проект", ТекущийПроект, ВидСравненияКомпоновкиДанных.ВИерархии,, Истина);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокКонтрольныхТочек.Отбор, "Проект", ТекущийПроект,,, Истина);
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокКонтрольныхТочек.Отбор, "Проект",,,,Ложь);
		КонецЕсли;
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокКонтрольныхТочек.Отбор, "Подразделение", ОтборЗначениеПодразделение,,, ЗначениеЗаполнено(ОтборЗначениеПодразделение));
	
	// Участник в табличной части КТ, поэтому отбор через параметры запроса.
	СписокКонтрольныхТочек.Параметры.УстановитьЗначениеПараметра("Участник", ОтборЗначениеИсполнитель);
	ПараметрУчастник = СписокКонтрольныхТочек.Параметры.Элементы.Найти("Участник");
	ПараметрУчастник.Использование = ЗначениеЗаполнено(ОтборЗначениеИсполнитель);
	
	// Ответственный в табличной части КТ со спец. флагом, поэтому отбор через параметры запроса.
	
		СписокКонтрольныхТочек.Параметры.УстановитьЗначениеПараметра("Ответственный", ОтборЗначениеОтветственный);
		ПараметрОтветственный = СписокКонтрольныхТочек.Параметры.Элементы.Найти("Ответственный");
		ПараметрОтветственный.Использование = ЗначениеЗаполнено(ОтборЗначениеОтветственный);

	// отключим этап
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокКонтрольныхТочек.Отбор, "Этап", ,,,Ложь);

КонецПроцедуры

&НаКлиенте
// Устанавливает отборы для списка записей планов (при активации строки в дереве планов).
//
Процедура ВыполнитьОтборыПриАктивацииВДеревеПланов()
	
	Если Элементы.ПланыДерево.ТекущиеДанные.Группировка = Неопределено Тогда
		Если ПолноеОбновлениеПланов Тогда
			СписокЗаписейПланов.Отбор.Элементы.Очистить();
			СписокКонтрольныхТочек.Отбор.Элементы.Очистить();
		КонецЕсли;
		
		УстановитьОтборыЗаписейПланов(ПолноеОбновлениеПланов);
		УстановитьОтборыКонтрольныхТочек(ПолноеОбновлениеПланов);
		Возврат;

	ИначеЕсли ПолноеОбновлениеПланов Тогда
		СписокЗаписейПланов.Отбор.Элементы.Очистить();
		СписокКонтрольныхТочек.Отбор.Элементы.Очистить();

		УстановитьОтборыЗаписейПланов();
		УстановитьОтборыКонтрольныхТочек();

		ПолноеОбновлениеПланов = Ложь;
	КонецЕсли;

	// Сбросим фильтры по предыдущему выбранному значению.
	Если НЕ СтараяСтрокаДереваПланов = Неопределено Тогда
		ТекРодитель = СтараяСтрокаДереваПланов;
		Пока ТекРодитель <> Неопределено Цикл
			
			ТекТипЗначения = ТипЗнч(ТекРодитель.Группировка);
			
			Если ТекТипЗначения = Тип("СправочникСсылка.Пользователи") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Исполнитель",,,,Ложь);
				ПараметрУчастник = СписокКонтрольныхТочек.Параметры.Элементы.Найти("Участник");
				ПараметрУчастник.Использование = Ложь;
				
			ИначеЕсли ТекТипЗначения = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Этап",,,,Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокКонтрольныхТочек.Отбор, "Этап",,,,Ложь);
				
			ИначеЕсли ТекТипЗначения = Тип("СправочникСсылка.Проекты") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Проект",,,,Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокКонтрольныхТочек.Отбор, "Проект",,,,Ложь);
				
			ИначеЕсли ТекТипЗначения = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Подразделение",,,, Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокКонтрольныхТочек.Отбор, "Подразделение",,,,Ложь);
				
			КонецЕсли;
			
			ТекРодитель = ТекРодитель.ПолучитьРодителя();
			
		КонецЦикла;
	КонецЕсли;
	
	// Наложим фильтры из дерева планов (в зависимости от текущей строки), поднимаемся "вверх".
	ТекРодитель = Элементы.ПланыДерево.ТекущиеДанные;
	ОтборПоПроектуУжеУстановлен = Ложь; // Чтобы избежать отбора по пустому проекту "верхней" строки.
	Пока ТекРодитель <> Неопределено Цикл
		
		ТекТипЗначения = ТипЗнч(ТекРодитель.Группировка);
		
		Если ТекТипЗначения = Тип("СправочникСсылка.Пользователи") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Исполнитель", ТекРодитель.Группировка,,,Истина);
			СписокКонтрольныхТочек.Параметры.УстановитьЗначениеПараметра("Участник", ТекРодитель.Группировка);
			ПараметрУчастник = СписокКонтрольныхТочек.Параметры.Элементы.Найти("Участник");
			ПараметрУчастник.Использование = Истина;

		ИначеЕсли ТекТипЗначения = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Этап", ТекРодитель.Группировка,,,Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокКонтрольныхТочек.Отбор, "Этап", ТекРодитель.Группировка,,,Истина);

		ИначеЕсли ТекТипЗначения = Тип("СправочникСсылка.Проекты") И НЕ ОтборПоПроектуУжеУстановлен Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Проект", ТекРодитель.Группировка,,,Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокКонтрольныхТочек.Отбор, "Проект", ТекРодитель.Группировка,,,Истина);
			ОтборПоПроектуУжеУстановлен = Истина;

		ИначеЕсли ТекТипЗначения = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Подразделение", ТекРодитель.Группировка,,,Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокКонтрольныхТочек.Отбор, "Подразделение", ТекРодитель.Группировка,,,Истина);

		КонецЕсли;

		ТекРодитель = ТекРодитель.ПолучитьРодителя();

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияПланыДеревоПриАктивизацииСтроки()

	Если Элементы.ПланыДерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПавнельИнформации.ТекущаяСтраница = Элементы.СтраницаДиаграммаГанта Тогда
		СформироватьДиаграммуГанта(Элементы.ПланыДерево.ТекущиеДанные);
	Иначе
		ВыполнитьОтборыПриАктивацииВДеревеПланов();
	КонецЕсли;
	
	СтараяСтрокаДереваПланов = Элементы.ПланыДерево.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриСменеРежима()
	
	Если РежимПланирования = 1 Тогда // Проекты
		Элементы.КнопкаРежимРесурсы.Пометка = Ложь;
		Элементы.КнопкаРежимПроекты.Пометка = Истина;
	Иначе
		Элементы.КнопкаРежимРесурсы.Пометка = Истина;
		Элементы.КнопкаРежимПроекты.Пометка = Ложь;
	КонецЕсли;
	
	СменитьПорядокКолонокЗаписейПланов();
	
	Если НЕ ЗапретНаОбновлениеДерева Тогда
		ОбновитьДеревоПланов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодменюРежимДанныхПланирования(Форма)
	Форма.Элементы.КнопкаВременнаяШкалаЧасы.Пометка		= Ложь;
	Форма.Элементы.КнопкаВременнаяШкалаДни.Пометка		= Ложь;
	Форма.Элементы.КнопкаВременнаяШкалаПроценты.Пометка	= Ложь;
	
	Если Форма.РежимДанныхПланирования = "Проценты" Тогда
		ЗаголовокПодменю = НСтр("ru = 'Проценты'");
		Форма.Элементы.КнопкаВременнаяШкалаПроценты.Пометка = Истина;
	ИначеЕсли Форма.РежимДанныхПланирования = "Дни" Тогда
		ЗаголовокПодменю = НСтр("ru = 'Дни'");
		Форма.Элементы.КнопкаВременнаяШкалаДни.Пометка = Истина;
	Иначе
		ЗаголовокПодменю = НСтр("ru = 'Часы'");
		Форма.Элементы.КнопкаВременнаяШкалаЧасы.Пометка = Истина;
	КонецЕсли;
	
	Форма.Элементы.ПодменюВыборВременнойШкалы.Заголовок = ЗаголовокПодменю;
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриСменеРежимаДанныхПланирования()
	ОбновитьПодменюРежимДанныхПланирования(ЭтотОбъект);
	
	Если НЕ ЗапретНаОбновлениеДерева Тогда
		ОбновитьДеревоПланов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОткрытьФормуЗаписиЭтапа(КлючЗаписи = Неопределено)
	Если КлючЗаписи = Неопределено Тогда
		ТекДанные = Элементы.СписокЗаписейПланов.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда Возврат Ложь; КонецЕсли;
		
		Попытка
			СтруктураКлюч = Новый Структура("Проект,Этап,Исполнитель,ДатаНачала,ДатаКонца",
				ТекДанные.Проект, ТекДанные.Этап, ТекДанные.Исполнитель, ТекДанные.ДатаНачала, ТекДанные.ДатаКонца);
			//
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		СтруктураКлюч = КлючЗаписи;
	КонецЕсли;
	
	Попытка
		Массив = Новый Массив;
		Массив.Добавить(СтруктураКлюч);
		Ключ = Новый("РегистрСведенийКлючЗаписи.CRM_ПланыПроектов", Массив); 
	Исключение
		Возврат Ложь;
	КонецПопытки;
	ПараметрыСтруктура = Новый Структура("Ключ", Ключ);
	
	ПараметрыСтруктура.Вставить("ДатаНачалаАРМ", Объект.ДатаНачала);
	ПараметрыСтруктура.Вставить("ДатаКонцаАРМ", Объект.ДатаКонца);
	
	Попытка
		Форма = ПолучитьФорму("РегистрСведений.CRM_ПланыПроектов.ФормаЗаписи", ПараметрыСтруктура, Элементы.СписокЗаписейПланов);
		Если Форма <> Неопределено Тогда
			Форма.Открыть();
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ДиаграммаГантаОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	Если ТипЗнч(Расшифровки) = Тип("Массив") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Расшифровки.Количество() <= 2 Тогда
			Для Каждого Расшифровка Из Расшифровки Цикл
				Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда Продолжить; КонецЕсли;
				
				ОткрытьФормуЗаписиЭтапа(Расшифровка);
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНОВ ФОРМЫ

&НаКлиенте
Процедура КомандаОбновитьДеревоПланов(Команда)
	
	ВыводитьСостояние = Истина;
	ОбновитьДеревоПланов();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьРежимПоПроектам(Команда)
	Если РежимПланирования = 1 Тогда Возврат; КонецЕсли;
	
	РежимПланирования = 1;
	ДействияПриСменеРежима();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьРежимПоРесурсам(Команда)
	Если РежимПланирования = 2 Тогда Возврат; КонецЕсли;
	
	РежимПланирования = 2;
	ДействияПриСменеРежима();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЗаписейПлановРазбитьПоМесяцам(Команда)
	
	Если Элементы.СписокЗаписейПланов.ВыделенныеСтроки.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаСписокЗаписейПлановРазбитьПоМесяцамЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Выбранные записи будут разбиты по месяцам, продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЗаписейПлановРазбитьПоМесяцамЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РазбитьЗаписиПоМесяцам(Элементы.СписокЗаписейПланов.ВыделенныеСтроки);
		Элементы.СписокЗаписейПланов.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаСвернутьДеревоПланов(Команда)
	Для Каждого СтрокаДерева Из ПланыДерево.ПолучитьЭлементы() Цикл
		Элементы.ПланыДерево.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазвернутьДеревоПланов(Команда)
	Для Каждого СтрокаДерева Из ПланыДерево.ПолучитьЭлементы() Цикл
		Элементы.ПланыДерево.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыводитьПодразделения(Команда)
	Элементы.КнопкаВыводитьПодразделения.Пометка = Не Элементы.КнопкаВыводитьПодразделения.Пометка;
	флВыводитьПодразделения = Элементы.КнопкаВыводитьПодразделения.Пометка;
	ОбновитьДеревоПланов(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыводитьНераспланированныеРесурсы(Команда)
	Элементы.КнопкаВыводитьНезапланированныеРесурсы.Пометка = Не Элементы.КнопкаВыводитьНезапланированныеРесурсы.Пометка;
	флВыводитьНераспланированныеРесурсы = Элементы.КнопкаВыводитьНезапланированныеРесурсы.Пометка;
	ОбновитьДеревоПланов(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	ПриИзмененииПериодаПланирования(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаКонцаПриИзменении(Элемент)
	ПриИзмененииПериодаПланирования(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыборПериода(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала = Объект.ДатаНачала;
	Период.ДатаОкончания = Объект.ДатаКонца;
	
	Диалог.Период = Период;
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаВыборПериодаЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыборПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда 
		Объект.ДатаНачала = Период.ДатаНачала;
		Объект.ДатаКонца = КонецДня(Период.ДатаОкончания);
		ПриИзмененииПериодаПланирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПериодНазад(Команда)
	СместитьПериод(-1);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПериодВперед(Команда)
	СместитьПериод(1);
КонецПроцедуры

&НаКлиенте
Процедура ПланыДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя= "ПланыДеревоГруппировкаПредставление" И Элемент.ТекущиеДанные.Группировка <> Неопределено Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.группировка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланыДеревоПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияПланыДеревоПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
// Общий для всех полей отбора обработчик изменения.
Процедура ОтборЗначениеПриИзменении(Элемент)
	//ВыводитьСостояние = Истина;
	ОбновитьДеревоПланов();
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗначениеПодразделениеПриИзменении(Элемент)
	// Установим отбор в списке проектов.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокПроектов.Отбор, "CRM_Подразделение", ОтборЗначениеПодразделение,ВидСравненияКомпоновкиДанных.ВИерархии,, ЗначениеЗаполнено(ОтборЗначениеПодразделение));
	ОтборЗначениеПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗначениеПартнерПриИзменении(Элемент)
	// Установим отбор в списке проектов.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокПроектов.Отбор, "CRM_Партнер", ОтборЗначениеПартнер,,, ЗначениеЗаполнено(ОтборЗначениеПартнер));
	ОтборЗначениеПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокПроектовПриАктивизацииСтроки(Элемент)
	
	Если СтараяСтрокаСпискаПроектов = Элементы.СписокПроектов.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	СтараяСтрокаСпискаПроектов = Элементы.СписокПроектов.ТекущаяСтрока;
	
	СписокПроектовВыделенныеСтроки.ЗагрузитьЗначения(Элемент.ВыделенныеСтроки);
	
	Если Элемент.ВыделенныеСтроки.Количество() > 1 Тогда
		Состояние("После множественного выделения необходимо обновить данные вручную!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗапретНаОбновлениеДерева Тогда
		
		//ВыводитьСостояние = Истина;
		ОбновитьДеревоПланов();
	КонецЕсли;
	
	ЗапретНаОбновлениеДерева = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаписейПлановПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	
	ОткрытьФормуЗаписиЭтапа();
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаписейПлановВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуЗаписиЭтапа();
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаписейПлановПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекСтрока = Элементы.ПланыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем значения заполнения.
	ЗначенияЗаполнения = Новый Структура;
	
	ТекРодитель = СтараяСтрокаДереваПланов;
	Пока ТекРодитель <> Неопределено Цикл
		
		ТекТипЗначения = ТипЗнч(ТекРодитель.Группировка);
		
		Если ТекТипЗначения = Тип("СправочникСсылка.Пользователи") Тогда
			ЗначенияЗаполнения.Вставить("Исполнитель", ТекРодитель.Группировка);
			
		ИначеЕсли ТекТипЗначения = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
			ЗначенияЗаполнения.Вставить("Этап", ТекРодитель.Группировка);
			
		ИначеЕсли ТекТипЗначения = Тип("СправочникСсылка.Проекты") И ЗначениеЗаполнено(ТекРодитель.Группировка) Тогда
			ЗначенияЗаполнения.Вставить("Проект", ТекРодитель.Группировка);
		КонецЕсли;
		
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
		
	КонецЦикла;
	
	Если НЕ ЗначенияЗаполнения.Свойство("Исполнитель") Тогда
		Если ЗначениеЗаполнено(ОтборЗначениеИсполнитель) Тогда
			ЗначенияЗаполнения.Вставить("Исполнитель", ОтборЗначениеИсполнитель);
		Иначе
			ЗначенияЗаполнения.Вставить("Исполнитель", ТекущийПользователь());
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначенияЗаполнения.Свойство("Проект") Тогда
		ТекущийПроект = Элементы.СписокПроектов.ТекущаяСтрока;
		Если ЗначениеЗаполнено(ТекущийПроект) И НЕ ПолучитьЗначениеРеквизита(ТекущийПроект, "ЭтоГруппа")Тогда
			ЗначенияЗаполнения.Вставить("Проект", ТекущийПроект);
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("ДатаНачала", Объект.ДатаНачала);
	ЗначенияЗаполнения.Вставить("ДатаКонца", Объект.ДатаКонца);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ПараметрыФормы.Вставить("ДатаНачалаАРМ", Объект.ДатаНачала);
	ПараметрыФормы.Вставить("ДатаКонцаАРМ", Объект.ДатаКонца);
	
	ФормаДляОткрытия = ПолучитьФорму("РегистрСведений.CRM_ПланыПроектов.ФормаЗаписи", ПараметрыФормы, ЭтотОбъект);
	ФормаДляОткрытия.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрольныеТочкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда

		Отказ = Истина;
		
		ТекСтрока = Элементы.ПланыДерево.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Сформируем значения заполнения.
		ЗначенияЗаполнения = Новый Структура;
		
		ТекРодитель = СтараяСтрокаДереваПланов;
		Пока ТекРодитель <> Неопределено Цикл
			
			ТекТипЗначения = ТипЗнч(ТекРодитель.Группировка);
			
			Если ТекТипЗначения = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				ЗначенияЗаполнения.Вставить("Подразделение", ТекРодитель.Группировка);
				
			ИначеЕсли ТекТипЗначения = Тип("СправочникСсылка.Пользователи") Тогда
				ЗначенияЗаполнения.Вставить("Исполнитель", ТекРодитель.Группировка);
				
			ИначеЕсли ТекТипЗначения = Тип("СправочникСсылка.CRM_ЭтапыПроектов") Тогда
				ЗначенияЗаполнения.Вставить("Этап", ТекРодитель.Группировка);
				
			ИначеЕсли ТекТипЗначения = Тип("СправочникСсылка.Проекты") И ЗначениеЗаполнено(ТекРодитель.Группировка) Тогда
				ЗначенияЗаполнения.Вставить("Проект", ТекРодитель.Группировка);
			КонецЕсли;
			
			ТекРодитель = ТекРодитель.ПолучитьРодителя();
			
		КонецЦикла;
		
		Если НЕ ЗначенияЗаполнения.Свойство("Исполнитель") Тогда
			ЗначенияЗаполнения.Вставить("Исполнитель", ТекущийПользователь());
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ФормаДляОткрытия = ПолучитьФорму("Документ.CRM_КонтрольнаяТочкаПроекта.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		ФормаДляОткрытия.Открыть();
	КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаписейПлановПослеУдаления(Элемент)
	ОбновитьДеревоПланов();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Направление = 1 Тогда
		Объект.ДатаНачала = НачалоМесяца(Объект.ДатаНачала+60*60*24*32);
	Иначе
		Объект.ДатаНачала = НачалоМесяца(Объект.ДатаНачала-60*60*24*25);
	КонецЕсли;
	ПриИзмененииПериодаПланирования();
КонецПроцедуры

&НаКлиенте
Процедура ДатаКонцаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Направление = 1 Тогда
		Объект.ДатаКонца = КонецМесяца(Объект.ДатаКонца+60*60*24);
	Иначе
		Объект.ДатаКонца = КонецМесяца(Объект.ДатаКонца-60*60*24*32);
	КонецЕсли;
	ПриИзмененииПериодаПланирования();
КонецПроцедуры

&НаКлиенте
Процедура КомандаВременнаяШкалаЧасы(Команда)
	РежимДанныхПланирования = "Часы";
	ДействияПриСменеРежимаДанныхПланирования();
КонецПроцедуры

&НаКлиенте
Процедура КомандаВременнаяШкалаДни(Команда)
	РежимДанныхПланирования = "Дни";
	ДействияПриСменеРежимаДанныхПланирования();
КонецПроцедуры

&НаКлиенте
Процедура КомандаВременнаяШкалаПроценты(Команда)
	РежимДанныхПланирования = "Проценты";
	ДействияПриСменеРежимаДанныхПланирования();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриСменеСтраницыПанелиИнформации()
	Если Элементы.ПавнельИнформации.ТекущаяСтраница = Элементы.СтраницаДиаграммаГанта Тогда
		СформироватьДиаграммуГанта(Элементы.ПланыДерево.ТекущиеДанные);
	//ИначеЕсли Элементы.ПавнельИнформации.ТекущаяСтраница = Элементы.СтраницаПланы Или Элементы.ПавнельИнформации.ТекущаяСтраница = Элементы.СтраницаКонтрольныеТочки Тогда
	//	Подключаемый_ОбработчикОжиданияПланыДеревоПриАктивизацииСтроки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПавнельИнформацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПодключитьОбработчикОжидания("Подключаемый_ПриСменеСтраницыПанелиИнформации", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВосстанавливатьФормуПриОткрытии(Команда)
	Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка = НЕ Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ВосстанавливатьФормуПриОткрытии", Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка);
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// +Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	Если НЕ CRM_РежимФормЗакладкиСервер.ВосстановлениеФормыПриЗапускеСеанса(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// -Этот блок обязательно должен быть в самом начале процедуры, чтобы при отказе не выполнять избыточный код.
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно открыть форму планирования проектов. Подсистема 1С:CRM не используется!'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().Обработка_CRM_ПланированиеПроектов_ПриСозданииНаСервере();
	
	// Установка начальных значений  перед загрузкой данных из настроек на сервере
	// для случая, когда данные еще не были записаны и не загружаются.
	РежимПланирования = 1;
	
	МасштабДиаграммыГанта = 1;
	
	РежимДанныхПланирования = "Часы";
	ОбновитьПодменюРежимДанныхПланирования(ЭтотОбъект);
	
	флВыводитьПодразделения = 0;
	флВыводитьНераспланированныеРесурсы = 0;
	НастроитьЭлементыФормы();
	
	НеобходимоОбновитьКолонкиДереваПланов = Истина;
	ВыводитьСостояние = Истина;
	
	ЗаполнитьМесяцы();
	
	ЗаполнитьОформление();
	
	// Установим "очищающий" отбор для списка записей планов.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗаписейПланов.Отбор, "Проект", ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"),,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Настройки периода по умолчанию если он не заполнен.
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Или Не ЗначениеЗаполнено(Объект.ДатаКонца) Тогда
		ТекДата = ТекущаяДата();
		Объект.ДатаНачала = НачалоМесяца(ТекДата);
		Объект.ДатаКонца = НачалоДня(КонецМесяца(ТекДата));
	КонецЕсли;
	
	ЗапретНаОбновлениеДерева = Истина;
	
	// Установим режим планирования.
	ДействияПриСменеРежима();
	
	СменитьПорядокКолонокЗаписейПланов();
	
	// Обновить список проектов
	Если ЗначениеЗаполнено(ОтборЗначениеПодразделение) Тогда
		ОтборЗначениеПодразделениеПриИзменении(Неопределено);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборЗначениеПартнер) Тогда
		ОтборЗначениеПартнерПриИзменении(Неопределено);
	КонецЕсли;
	
	ОбновитьДеревоПланов();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	НастроитьЭлементыФормы();
	ОбновитьПодменюРежимДанныхПланирования(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьПланыПроектов" Тогда
		Если Источник.ВладелецФормы = ЭтотОбъект ИЛИ Источник.ВладелецФормы = Элементы.СписокЗаписейПланов ИЛИ
			 Источник.ВладелецФормы = Элементы.СписокКонтрольныхТочек Тогда

			ОбновитьДеревоПланов();

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	CRM_РежимФормЗакладкиСервер.ПриЗакрытииНаСервере(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти
