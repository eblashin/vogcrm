
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Подразделение 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущийПользователь,
		"Подразделение",
		Истина);
	ИнициализироватьСхемуКомпоновки();
	
	НаправлениеДеятельности = ТекущийПользователь.CRM_НаправлениеДеятельности;
	
	ВариантОпроса = ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(Новый УникальныйИдентификатор("8bc79f71-3908-11ea-a4d2-005056bc3fe8"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПоручения(Команда)
	
	Отказ = Ложь;	
	Если НЕ ЗначениеЗаполнено(НаправлениеДеятельности) тогда
		Сообщить("Не указано направление деятельности");	
		Отказ = Истина;	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(РольОтветственного) тогда
		Сообщить("Не указана роль ответственного");	
		Отказ = Истина;	
	КонецЕсли;
	Если НЕ  ЗначениеЗаполнено(ВариантОпроса) тогда
		Сообщить("Не указан вариант опроса");	
		Отказ = Истина;	
	КонецЕсли;
	Если Не Отказ тогда
		СоздатьПорученияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьПараметрыСКД(СхемаКомпоновкиДанных, СтруктураНастроек)
	
	ПараметрыСКД = СхемаКомпоновкиДанных.Параметры;
	
	ПараметрНаправлениеДеятельности = ПараметрыСКД.Найти(Новый ПараметрКомпоновкиДанных("НаправлениеДеятельности"));
	
	Если ПараметрНаправлениеДеятельности <> Неопределено Тогда
		// ++ VOG Солодов В.В. 25.10.2019 
		ПараметрНаправлениеДеятельности.Значение = СтруктураНастроек.НаправлениеДеятельности;
		// До изменения
		//ПараметрНаправлениеДеятельности.Значение = НаправлениеДеятельности;
		// -- VOG Солодов В.В. 25.10.2019
	КонецЕсли;
	
	ПараметрКлассификатор = ПараметрыСКД.Найти(Новый ПараметрКомпоновкиДанных("Классификатор"));
	
	Если ПараметрКлассификатор <> Неопределено Тогда
		
		КлассификаторУИН 	= Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8");
		Классификатор 		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(КлассификаторУИН);
		ПараметрКлассификатор.Значение = Классификатор;
		
	КонецЕсли;

КонецПроцедуры




&НаСервере
Процедура ИнициализироватьСхемуКомпоновки()
	
	СхемаКомпоновкиДанных 		= Обработки.вогФормированиеПорученийПоЗаполнениюАнкет.ПолучитьМакет("СхемаЗаполнения");
	АдресСхемыКомпоновкиДанных 	= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	Для Каждого ПараметрСКД Из СхемаКомпоновкиДанных.Параметры Цикл
		ПараметрСКД.ВключатьВДоступныеПоля = Ложь;
	КонецЦикла;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	НастройкиСКД = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	
	СтатусТТ_УИН 	= Новый УникальныйИдентификатор("005e9af3-9a74-11e8-89fa-005056bc3fe8");
	СтатусТТ 		= Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(СтатусТТ_УИН);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпоновщикНастроек.Настройки.Отбор,
		"СтатусТТ",
		СтатусТТ,
		ВидСравненияКомпоновкиДанных.НеРавно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); // ++ VOG Солодов В.В. 08.04.2020 CRM-549
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпоновщикНастроек.Настройки.Отбор,
		"Подразделение",
		Подразделение,
		ВидСравненияКомпоновкиДанных.ВИерархии,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ); // ++ VOG Солодов В.В. 08.04.2020 CRM-549
	
	// ++ VOG Солодов В.В. 08.04.2020 CRM-549
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпоновщикНастроек.Настройки.Отбор,
		"ТорговаяТочка.Розничный",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"Не розничный",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	// -- VOG Солодов В.В. 08.04.2020
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПорученияНаСервере()
	
	СхемаКомпоновкиДанных 	= ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	ТаблицаРезультат 		= Новый ТаблицаЗначений;
	
	П = СхемаКомпоновкиДанных.Параметры.Найти(Новый ПараметрКомпоновкиДанных("Роль"));
	П.Значение = РольОтветственного;
	П = СхемаКомпоновкиДанных.Параметры.Найти(Новый ПараметрКомпоновкиДанных("НаправлениеДеятельности"));
	П.Значение = НаправлениеДеятельности;
	КлассификаторУИН 	= Новый УникальныйИдентификатор("dcdbe20f-9a73-11e8-89fa-005056bc3fe8");
	Классификатор 		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(КлассификаторУИН);
	П = СхемаКомпоновкиДанных.Параметры.Найти(Новый ПараметрКомпоновкиДанных("Классификатор"));
	П.Значение = Классификатор;
	
	
	КомпоновщикМакета 		= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных 	= КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, 
		КомпоновщикНастроек.Настройки,                                                                                       
		,
		,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивМенеджеров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ТаблицаРезультат.ВыгрузитьКолонку("Менеджер"));
	
	Для Каждого ЭлементМенеджер Из МассивМенеджеров Цикл
		НачатьТранзакцию();
		Попытка
			УстановитьПривилегированныйРежим(Истина);
			РезультатОбработки = Ложь;
			
			стрПоиска = Новый Структура;
			стрПоиска.Вставить("Менеджер",ЭлементМенеджер);
			СтрокиТЗ = ТаблицаРезультат.НайтиСтроки(стрПоиска);
			ТЗВрем = ТаблицаРезультат.Скопировать(СтрокиТЗ,"ТорговаяТочка");
			ТЗВРем.Свернуть("ТорговаяТочка");
			Анкета = СоздатьАнкетуНаСервере(ВариантОпроса,ЭлементМенеджер,НаправлениеДеятельности,ТЗВрем.ВыгрузитьКолонку("ТорговаяТочка"));
		    КартаМаршрута = Справочники.CRM_КартыМаршрутов.ПолучитьСсылку(Новый УникальныйИдентификатор("1aa7a8e7-426a-11ea-b3c7-005056bcd3e3"));
			
			// Создание задач
			СписокТочекСтарта 								= CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьВариантыСтарта(КартаМаршрута);
			Автор 											= Пользователи.ТекущийПользователь();
			
			БизнесПроцессОбъект 							= БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
			БизнесПроцессОбъект.Автор 						= Автор;
			БизнесПроцессОбъект.Дата 						= ТекущаяДата();
			БизнесПроцессОбъект.Важность 					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
			БизнесПроцессОбъект.Предмет 					= Анкета;
			БизнесПроцессОбъект.вогАнкета 					= Анкета;
			БизнесПроцессОбъект.Ответственный 				= Автор;
			БизнесПроцессОбъект.Подразделение 				= Подразделение;
			БизнесПроцессОбъект.КартаМаршрута 				= КартаМаршрута;
			БизнесПроцессОбъект.ТочкаСтарта 				= СписокТочекСтарта[0].Значение;
			БизнесПроцессОбъект.ДатаСтарта 					= ТекущаяДата();
			БизнесПроцессОбъект.Наименование 				= СтрШаблон("%1 (%2)", КартаМаршрута, БизнесПроцессОбъект.Предмет);
			БизнесПроцессОбъект.вогДолжностнаяПозиция 		= Автор.CRM_ДолжностнаяПозиция;
			БизнесПроцессОбъект.НомерВерсииКартыМаршрута	= КартаМаршрута.НомерВерсии;
			БизнесПроцессОбъект.Описание 					= НСтр("ru = 'Необходимо заполнить и провести Анкету '" + ВариантОпроса);
			
			БизнесПроцессОбъект.Записать();
			
			НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборЭтапов.Отбор.Объект.Установить(БизнесПроцессОбъект.Ссылка);
			НаборЭтапов.Прочитать();
			
			НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
			НаборИсполнителей.Отбор.Объект.Установить(БизнесПроцессОбъект.Ссылка);
			НаборИсполнителей.Прочитать();
			
			Для Каждого СтрокаНабора ИЗ НаборИсполнителей Цикл
				
				Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда		// точка действия "Выполнить"
					СтрокаНабора.Исполнитель 				= ЭлементМенеджер;
					НаборЭтапов[1].ДатаВыполнения 			= ТекущаяДата() + 432000; // 5 дней
					//НаборЭтапов[1].ВариантВыполнения 		= 1;
					НаборЭтапов[1].ВариантВыполненияСтрокой = "Заполнить " + Анкета;
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЭтапов.Записать();
			НаборИсполнителей.Записать();
			
			БизнесПроцессОбъект.Старт();
			
			ЗафиксироватьТранзакцию();
			
			ШаблонСообщения = НСтр("ru = 'Выдано поручение ""Заполнение Анкеты "" для пользователя %1'");
			ТекстСообщения 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЭлементМенеджер);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстОшибки = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ОбновитьНумерациюОбъектов();
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьАнкетуНаСервере(ВариантОпроса,Респондент,НаправлениеДеятельности,СписокТТ)
	// Вставить содержимое обработчика.
	
	Док = Документы.вогАнкета.СоздатьДокумент();
	Док.Дата=ТекущаяДата();
	Док.Автор = Пользователи.ТекущийПользователь();
	Док.ВариантОпроса = ВариантОпроса;
	Док.Респондент = Респондент;
	Док.Статус = Справочники.вогШаблоныСтатусов.НаСогласовании;
	нЭлВопрос = Док.Состав.Добавить();
	нЭлВопрос.ЭлементарныйВопрос = ПланыВидовХарактеристик.ВопросыДляАнкетирования.ПолучитьСсылку(Новый УникальныйИдентификатор("a2b30fb2-3908-11ea-a4d2-005056bc3fe8"));
	нЭлВопрос.Ответ = НаправлениеДеятельности;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	вогМенеджерыОбъектов.Владелец КАК Владелец
	               |ПОМЕСТИТЬ ОбъектыТТ
	               |ИЗ
	               |	РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
	               |ГДЕ
	               |	вогМенеджерыОбъектов.Владелец В(&СписокТТ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК ТТ,
	               |	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора
	               |ИЗ
	               |	ОбъектыТТ КАК ОбъектыТТ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	               |		ПО ОбъектыТТ.Владелец = CRM_ОбъектыЗначенийКлассификаторов.Объект
	               |			И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец = &Выручка)
	               |			И (CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &Аналитика)";
	Запрос.УстановитьПараметр("Выручка",ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("2f590087-586f-11ea-87ff-005056bc3fe8")));
	Запрос.УстановитьПараметр("Аналитика",НаправлениеДеятельности);
	Запрос.УстановитьПараметр("СписокТТ",СписокТТ);
	Запрос.УстановитьПараметр("Менеджер",Респондент);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	// +++ Кулаков П.Л. CRM-531
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	вогМенеджерыОбъектов.Владелец КАК Владелец
	               |ПОМЕСТИТЬ ОбъектыТТ
	               |ИЗ
	               |	РегистрСведений.вогМенеджерыОбъектов КАК вогМенеджерыОбъектов
	               |ГДЕ
	               |	вогМенеджерыОбъектов.Владелец В(&СписокТТ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	CRM_ОбъектыЗначенийКлассификаторов.Объект КАК ТТ,
	               |	CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора КАК ЗначениеКлассификатора
	               |ИЗ
	               |	ОбъектыТТ КАК ОбъектыТТ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ОбъектыЗначенийКлассификаторов КАК CRM_ОбъектыЗначенийКлассификаторов
	               |		ПО ОбъектыТТ.Владелец = CRM_ОбъектыЗначенийКлассификаторов.Объект
	               |			И (CRM_ОбъектыЗначенийКлассификаторов.ЗначениеКлассификатора.Владелец = &КлассификацияТТ)
	               |			И (CRM_ОбъектыЗначенийКлассификаторов.Аналитика = &Аналитика)";
	Запрос.УстановитьПараметр("КлассификацияТТ",ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(Новый УникальныйИдентификатор("b3d84c6b-7581-11ea-87ff-005056bc3fe8")));
	Запрос.УстановитьПараметр("Аналитика",НаправлениеДеятельности);
	Запрос.УстановитьПараметр("СписокТТ",СписокТТ);
	Запрос.УстановитьПараметр("Менеджер",Респондент);
	ТаблицаКлассификации = Запрос.Выполнить().Выгрузить();
	// --- Кулаков П.Л.
	
	Таблица = док.СоставОпроса;
	Для каждого ТТ из СписокТТ цикл
		
		СтрокаТЗ = ТЗ.Найти(ТТ);
		// +++ Кулаков П.Л. CRM-531
		СтрокаКлассификации = ТаблицаКлассификации.Найти(ТТ);
		
		ИдСтроки  = Новый УникальныйИдентификатор;
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.Вопрос = Справочники.вогВопросы.ПолучитьСсылку(Новый УникальныйИдентификатор("c1f1251d-3908-11ea-a4d2-005056bc3fe8"));
		СтрокаТаблицы.ИдентификаторСтроки = идСтроки;
		СтрокаТаблицы.ОбъектОпроса = ТТ;
		СтрокаДопИнфо = Док.ДополнительнаяИнформацияВопросов.Добавить();
		СтрокаДопИнфо.Вопрос = СтрокаТаблицы.Вопрос;
		СтрокаДопИнфо.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
		СтрокаДопИнфо.Свойство = ПланыВидовХарактеристик.вогДополнительнаяИнформацияАнкета.ПолучитьСсылку(Новый УникальныйИдентификатор("94bb9109-588a-11ea-87ff-005056bc3fe8"));
		Если СтрокаТЗ <> Неопределено тогда
			Если СтрокаТЗ.ЗначениеКлассификатора = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("545fcb49-586f-11ea-87ff-005056bc3fe8")) тогда
				СтрокаДопИнфо.Значение = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор("94bb910a-588a-11ea-87ff-005056bc3fe8")); 
			ИначеЕсли СтрокаТЗ.ЗначениеКлассификатора = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("4e20f88c-586f-11ea-87ff-005056bc3fe8")) тогда
				СтрокаДопИнфо.Значение = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор("a6842d22-588a-11ea-87ff-005056bc3fe8")); 
			ИначеЕсли СтрокаТЗ.ЗначениеКлассификатора = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("457b0120-586f-11ea-87ff-005056bc3fe8")) тогда
				СтрокаДопИнфо.Значение = Справочники.ЗначенияСвойствОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор("e14d97fc-588a-11ea-87ff-005056bc3fe8")); 
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДопИнфо = Док.ДополнительнаяИнформацияВопросов.Добавить();
		СтрокаДопИнфо.Вопрос = СтрокаТаблицы.Вопрос;
		СтрокаДопИнфо.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтроки;
		СтрокаДопИнфо.Свойство = ПланыВидовХарактеристик.вогДополнительнаяИнформацияАнкета.ПолучитьСсылку(Новый УникальныйИдентификатор("01982af4-75a6-11ea-87ff-005056bc3fe8"));
		Если СтрокаКлассификации <> Неопределено тогда
			Если СтрокаКлассификации.ЗначениеКлассификатора = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("ca87c1d0-75a5-11ea-87ff-005056bc3fe8")) тогда
				СтрокаДопИнфо.Значение = "A"; 
			ИначеЕсли СтрокаКлассификации.ЗначениеКлассификатора = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("d35602c3-75a5-11ea-87ff-005056bc3fe8")) тогда
				СтрокаДопИнфо.Значение = "B";
			ИначеЕсли СтрокаКлассификации.ЗначениеКлассификатора = Справочники.CRM_ЗначенияКлассификаторов.ПолучитьСсылку(Новый УникальныйИдентификатор("d35602c5-75a5-11ea-87ff-005056bc3fe8")) тогда
				СтрокаДопИнфо.Значение = "C";
			КонецЕсли;
		КонецЕсли;
		// --- Кулаков П.Л.
		
	КонецЦикла;	
	Док.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат Док.Ссылка;
	
КонецФункции

