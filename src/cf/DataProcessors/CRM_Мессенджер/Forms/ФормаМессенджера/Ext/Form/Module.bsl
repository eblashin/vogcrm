
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПериодОбновления = 5;
	Если Параметры.Свойство("Ключ") Тогда
		ТекущаяГруппа = Параметры.Ключ.Группа;
		ТекущаяУчетнаяЗапись = Параметры.Ключ.УчетнаяЗапись;
		ТекущийID_Пользователя = Параметры.Ключ.ID_Пользователя;
		ТекущееСообщение = Параметры.Ключ;
	ИначеЕсли Параметры.Свойство("ПараметрОткрытия") Тогда
		Если ТипЗнч(Параметры.ПараметрОткрытия) = Тип("СправочникСсылка.Партнеры") Тогда
			СписокКонтактов = Новый СписокЗначений;
			СписокКонтактов.ЗагрузитьЗначения(CRM_ОбщегоНазначенияСервер.ПолучитьКонтактныхЛицКонтрагента(Параметры.ПараметрОткрытия).ВыгрузитьКолонку("КонтактноеЛицо"));
			СписокКонтактов.Добавить(Параметры.ПараметрОткрытия);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Контакты, "Контакт", СписокКонтактов, ВидСравненияКомпоновкиДанных.ВСписке);
		ИначеЕсли ТипЗнч(Параметры.ПараметрОткрытия) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Контакты, "Контакт", Параметры.ПараметрОткрытия, ВидСравненияКомпоновкиДанных.Равно);
		ИначеЕсли ТипЗнч(Параметры.ПараметрОткрытия) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			СписокКонтактов = Новый СписокЗначений;
			СписокКонтактов.Добавить(Параметры.ПараметрОткрытия.Партнер);
			СписокКонтактов.Добавить(Параметры.ПараметрОткрытия.КонтактноеЛицо);
			СписокКонтактов.Добавить(Параметры.ПараметрОткрытия.ПотенциальныйКлиент);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Контакты, "Контакт", СписокКонтактов, ВидСравненияКомпоновкиДанных.ВСписке);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСообщений, "Интерес", Параметры.ПараметрОткрытия, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Контакты, "ТекущийПользователь", ТекущийПользователь, Истина);
	CRM_РаботаСМессенджерамиСервер.ОчиститьСобытияМессенджера(ТекущийПользователь);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ТекущаяУчетнаяЗапись) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Контакты, "УчетнаяЗапись", ТекущаяУчетнаяЗапись, ВидСравненияКомпоновкиДанных.Равно);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Контакты, "Группа", ТекущаяГруппа, ВидСравненияКомпоновкиДанных.Равно);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Контакты, "ID_Пользователя", ТекущийID_Пользователя, ВидСравненияКомпоновкиДанных.Равно);
		Элементы.СписокСообщений.ТекущаяСтрока = ТекущееСообщение;
		Элементы.СписокСообщений.ВыделенныеСтроки.Очистить();
	КонецЕсли;	
	ПроверкаНепрочитанныхСообщенийМессенджера();
	ПодключитьОбработчикОжидания("ПроверкаПолученияСообщенийМессенджера", ПериодОбновления);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "СохраненаЛичнаяЗадача" ИЛИ ИмяСобытия = "УстановленНовыйОтветственный" Тогда
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.CRM_СообщениеМессенджера") Тогда
			Элементы.СписокСообщений.Обновить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура СписокСообщенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписиПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элемент.ТекущиеДанные;
	Если ТекСтрока<>Неопределено Тогда
		ТекущаяУчетнаяЗапись = ТекСтрока.Ссылка;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСообщений, "УчетнаяЗапись", ТекущаяУчетнаяЗапись, ВидСравненияКомпоновкиДанных.Равно);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Контакты, "УчетнаяЗапись", ТекущаяУчетнаяЗапись, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактыПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элемент.ТекущиеДанные;
	Если ТекСтрока<>Неопределено Тогда
		Если (ТекущийID_Пользователя <> ТекСтрока.ID_Пользователя
			ИЛИ ТекущийКонтакт <> ТекСтрока.Контакт
			ИЛИ ТекущаяГруппа <> ТекСтрока.Группа
			ИЛИ ТекущаяУчетнаяЗапись <> ТекСтрока.УчетнаяЗапись) Тогда
		
			ТекущийID_Пользователя = ТекСтрока.ID_Пользователя;
			ТекущийКонтакт = ТекСтрока.Контакт;
			ТекущаяГруппа = ТекСтрока.Группа;
			ТекущаяУчетнаяЗапись = ТекСтрока.УчетнаяЗапись;
			
			ПоследнееСообщение = ПроверкаПолученияСообщенийМессенджераНаСервере(ТекущаяУчетнаяЗапись, ТекущаяГруппа, ТекущийID_Пользователя, Дата(1,1,1));
			CRM_РаботаСМессенджерамиСервер.ПометитьВходящиеКакПрочтенные(ТекущаяУчетнаяЗапись, ТекущаяГруппа, ТекущийID_Пользователя);			
			ПроверкаНепрочитанныхСообщенийМессенджера();
			
			ЭтоНовыйКонтакт = (ТипЗнч(ТекущийКонтакт) = Тип("Строка"));
			Элементы.КонтактыКонтекстноеМенюСвязатьСКонтактом.Видимость = ЭтоНовыйКонтакт;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСообщений, "ID_Пользователя", ТекущийID_Пользователя, ВидСравненияКомпоновкиДанных.Равно);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСообщений, "Группа", ТекущаяГруппа, ВидСравненияКомпоновкиДанных.Равно);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСообщений, "УчетнаяЗапись", ТекущаяУчетнаяЗапись, ВидСравненияКомпоновкиДанных.Равно);
			
			Элементы.ГруппаСообщение.Видимость = CRM_РаботаСМессенджерамиСервер.ТекущийПользовательПолучитьПравоУчетнойЗаписи(ТекущаяУчетнаяЗапись, "Запись");
			
			Элементы.СписокСообщений.ТекущаяСтрока = ПоследнееСообщение;
			Элементы.Контакты.Обновить();
			Элементы.СписокСообщений.ВыделенныеСтроки.Очистить();
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокСообщений, "ID_Пользователя", "", ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокСообщенийПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элемент.ТекущиеДанные;
	Если ТекСтрока<>Неопределено Тогда
		//Элементы.СписокСообщенийКонтекстноеМенюПринятьОбращение.Видимость = ТекСтрока.ЭтоВходящее;
		//Элементы.СписокСообщенийКонтекстноеМенюПринятьОбращение1.Видимость = ТекСтрока.ЭтоВходящее;
		//Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Видимость = ТекСтрока.ЭтоВходящее;
		//Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного1.Видимость = ТекСтрока.ЭтоВходящее;
		//Элементы.СписокСообщенийКонтекстноеМенюСвязатьСообщениеСИнтересом.Видимость = НЕ (ТипЗнч(ТекущийКонтакт) = Тип("Строка")) И НЕ ЗначениеЗаполнено(ТекСтрока.Интерес);
		//Элементы.СписокСообщенийКонтекстноеМенюСвязатьСообщениеСИнтересом1.Видимость = НЕ (ТипЗнч(ТекущийКонтакт) = Тип("Строка")) И НЕ ЗначениеЗаполнено(ТекСтрока.Интерес);
		//Элементы.СписокСообщенийСоздатьЛичнуюЗадачу.Видимость = НЕ ЗначениеЗаполнено(ТекСтрока.Задача);
		//Элементы.СписокСообщенийСоздатьЛичнуюЗадачу1.Видимость = НЕ ЗначениеЗаполнено(ТекСтрока.Задача);
		Если ТекСтрока.ЕстьВложения = 0 Тогда
			ВложенияТекущегоСообщения = СформироватьПредставлениеВложений(ТекСтрока.Ссылка);
		Иначе
			ВложенияТекущегоСообщения = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьПредставлениеВложений(Сообщение)
	
	ВложенияПредставление = "";
	Вложения = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Сообщение, Вложения);
	Для Каждого ЭлементТаблицы Из Вложения Цикл
		РазмерВложения = Цел(ЭлементТаблицы.Размер/1024);
		РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(ЭлементТаблицы.Размер) + " байт");		
		ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.Наименование + "." + ЭлементТаблицы.Расширение + "(" + РазмерСтрокой + ")";
	КонецЦикла;
	Если НЕ ПустаяСтрока(ВложенияПредставление) Тогда
		ВложенияПредставление = Сред(ВложенияПредставление, 3);
	КонецЕсли;	
	Возврат ВложенияПредставление;
	
КонецФункции // СформироватьПредставлениеВложений()			 

&НаКлиенте
Процедура СписокСообщенийИнтересНажатие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СписокСообщенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "СписокСообщенийИнтерес" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Интерес);
	ИначеЕсли Поле.Имя = "СписокСообщенийЗадача" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Задача);
	ИначеЕсли Поле.Имя = "СписокСообщенийЕстьВложения" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла", Элементы.СписокСообщений.ТекущиеДанные.Ссылка);
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Контакт) И ТипЗнч(ТекДанные.Контакт)<>Тип("Строка") Тогда
		ПоказатьЗначение(, ТекДанные.Контакт);
	Иначе	
		Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущаяУчетнаяЗапись, "ТипМессенджера") = ПредопределенноеЗначение("Перечисление.CRM_ТипыМессенджеров.ВКонтакте") Тогда
			ЗапуститьПриложение("https://vk.com/gim"+ТекДанные.Группа+"?sel="+ТекДанные.ID_Пользователя);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПрисоединенныеФайлыОтправляемыеПослеУдаления(Элемент)
	
	ВложенияСообщения = "";
	Для каждого Файл из ПрисоединенныеФайлыОтправляемые цикл
		ВложенияСообщения = ВложенияСообщения + ?(ВложенияСообщения="", "", ", ") + Файл.Представление;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВложенияСообщенияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.ВложенияСообщения.Видимость = Ложь;
	Элементы.ГруппаВложенияОтправляемые.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияТекущегоСообщенияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла", Элементы.СписокСообщений.ТекущиеДанные.Ссылка);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, Элемент);
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ПолучитьСообщения(Команда)
	CRM_РаботаСМессенджерамиСервер.ПолучитьСообщенияГруппVK(ТекущаяУчетнаяЗапись);
	Элементы.СписокСообщений.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	
	Если ЗначениеЗаполнено(Сообщение) ИЛИ ПрисоединенныеФайлыОтправляемые.Количество()>0 Тогда
		СообщениеСсылка = CRM_РаботаСМессенджерамиСервер.ОтправитьСообщение(Сообщение, ТекущаяУчетнаяЗапись, ТекущаяГруппа, ТекущийID_Пользователя, ТекущийКонтакт, ПрисоединенныеФайлыОтправляемые);
		Если СообщениеСсылка<>Неопределено Тогда
			Сообщение = "";
			Элементы.СписокСообщений.Обновить();
			Элементы.СписокСообщений.ТекущаяСтрока = СообщениеСсылка;
			ПрисоединенныеФайлыОтправляемые.Очистить();
			Элементы.СписокСообщений.ВыделенныеСтроки.Очистить();
			ВложенияСообщения = "";
			Элементы.ВложенияСообщения.Видимость = Ложь;
			Элементы.ГруппаВложенияОтправляемые.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСКонтактом(Команда)
	
	ПараметрыНового = Новый Структура();
	ПараметрыНового.Вставить("Наименование"	, Элементы.Контакты.ТекущиеДанные.Контакт);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"				,Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"		,Истина);
	ПараметрыФормыВыбора.Вставить("ПараметрыНового"	,ПараметрыНового);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Партнеры.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.CRM_ПотенциальныеКлиенты.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Потенциальные клиенты");
	
	СтруктураДанныхВыбора = Новый Структура;
	СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.КонтактныеЛицаПартнеров.ФормаВыбора");
	СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Контактные лица");
	
	//СтруктураДанныхВыбора = Новый Структура;
	//СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	//СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.Пользователи.ФормаВыбора");
	//СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	//ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Пользователи");
	//
	//СтруктураДанныхВыбора = Новый Структура;
	//СтруктураДанныхВыбора.Вставить("РежимВыбора"	,Истина);
	//СтруктураДанныхВыбора.Вставить("ИмяФормы"		,"Справочник.ФизическиеЛица.ФормаВыбора");
	//СтруктураДанныхВыбора.Вставить("ПараметрыФормы"	,ПараметрыФормыВыбора);
	//ДанныеВыбора.Добавить(СтруктураДанныхВыбора,"Физические лица");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СвязатьСКонтактомПродолжение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, ДанныеВыбора, ТекущийЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращение(Команда)
	ТекСтрока = Элементы.СписокСообщений.ТекущиеДанные;
	Если ТекСтрока<>Неопределено Тогда
		Если ТекСтрока.ЭтоВходящее Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СообщениеМессенджера", Элементы.СписокСообщений.ТекущиеДанные.Ссылка);
			ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Принять обращение можно только на  основании входящего сообщения!'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОбращение(Команда)
	ТекСтрока = Элементы.СписокСообщений.ТекущиеДанные;
	Если ТекСтрока<>Неопределено Тогда
		ТекСообщение = ТекСтрока.Ссылка;
		Если УказыватьПричинуОтклонения(ТекСообщение) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтклонитьОбращениеЗавершение", ЭтотОбъект, ТекСообщение);
			ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", , ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе	
			ОтклонитьОбращениеЗавершение(Истина, ТекСообщение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСообщениеСИнтересом(Команда)
	ТекСтрока = Элементы.СписокСообщений.ТекущиеДанные;
	Если ТекСтрока<>Неопределено Тогда
		ТекСообщение = ТекСтрока.Ссылка;
		СписокИнтересов = ПолучитьСписокАтивныхИнтересов(ТекСообщение);
		Если СписокИнтересов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'У данного контакта нет текущих интересов.'"));
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("СвязатьСообщениеСИнтересомПродолжение", ЭтотОбъект, ТекСообщение);
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокИнтересов);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрикрепитьФайлПродолжение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайлПродолжение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
	Если ПодключеноРасширениеРаботыСФайлами Тогда	
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПомещенияФайла", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, , , , УникальныйИдентификатор);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте без установленного расширения работы с файлами добавление файлов не поддерживается.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	Если Не Результат Тогда Возврат; КонецЕсли;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыбранноеИмяФайла, ?(ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент(),"/", "\"));
	ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
	
	СтрокаФайла = ПрисоединенныеФайлыОтправляемые.Добавить();
	СтрокаФайла.Представление = ИмяФайла;
	СтрокаФайла.Значение = Адрес;
	
	ВложенияСообщения = ВложенияСообщения + ?(ВложенияСообщения="", "", ", ") + ИмяФайла;
	Элементы.ВложенияСообщения.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКДиалогу(Команда)
	ТекСтрока = Элементы.Контакты.ТекущиеДанные;
	Если ТекСтрока<>Неопределено Тогда
		Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ТекущаяУчетнаяЗапись, "ТипМессенджера") = ПредопределенноеЗначение("Перечисление.CRM_ТипыМессенджеров.ВКонтакте") Тогда
			ЗапуститьПриложение("https://vk.com/gim"+ТекСтрока.Группа+"?sel="+ТекСтрока.ID_Пользователя);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьСообщенияНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПолученияСообщенийМессенджера()
	
	НовоеСообщение = ПредопределенноеЗначение("Перечисление.CRM_СобытияМессенджеров.ПолученоНовоеСообщение");
	ПрочитаныСообщение = ПредопределенноеЗначение("Перечисление.CRM_СобытияМессенджеров.ПрочитаныСообщения");
	ОбновитьКонтакты = Ложь;
	СобытияМессенджера = CRM_РаботаСМессенджерамиСервер.ПолучитьСобытияМессенджера(ТекущийПользователь);
	Для каждого Событие из СобытияМессенджера Цикл
		Если Событие.Событие = НовоеСообщение Тогда
			ПоследнееСообщение = Событие.Значение;
			Если Событие.УчетнаяЗапись = ТекущаяУчетнаяЗапись И Событие.ID_Пользователя = ТекущийID_Пользователя Тогда
				CRM_РаботаСМессенджерамиСервер.ПометитьВходящиеКакПрочтенные(ТекущаяУчетнаяЗапись, ТекущаяГруппа, ТекущийID_Пользователя);
				Элементы.СписокСообщений.Обновить();
				Элементы.СписокСообщений.ТекущаяСтрока = ПоследнееСообщение;
				Если Не ВводДоступен() Тогда
					ОбновитьКонтакты = Истина;
					ПоказатьОповещениеПользователя(CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ПоследнееСообщение, "КонтактПредставление"), , CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ПоследнееСообщение, "ТекстСообщения"), БиблиотекаКартинок.CRM_СообщениеМессенджера);
				КонецЕсли;
				Элементы.СписокСообщений.ВыделенныеСтроки.Очистить();
			Иначе
				ОбновитьКонтакты = Истина;
				ПоказатьОповещениеПользователя(CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ПоследнееСообщение, "КонтактПредставление"), , CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(ПоследнееСообщение, "ТекстСообщения"), БиблиотекаКартинок.CRM_СообщениеМессенджера);
			КонецЕсли;
		ИначеЕсли Событие.Событие = ПрочитаныСообщение Тогда	
			Если Событие.УчетнаяЗапись = ТекущаяУчетнаяЗапись И Событие.ID_Пользователя = ТекущийID_Пользователя Тогда
				Элементы.СписокСообщений.Обновить();
			КонецЕсли;
		КонецЕсли
	КонецЦикла;
	Если ОбновитьКонтакты Тогда
		ПроверкаНепрочитанныхСообщенийМессенджера();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаПолученияСообщенийМессенджераНаСервере(УчетнаяЗапись, Группа, ID_Пользователя, ДатаПроверки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	CRM_СообщениеМессенджера.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.Группа = &Группа
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее)
	                      |	И (CRM_СообщениеМессенджера.Дата >= &Дата
	                      |			ИЛИ НЕ CRM_СообщениеМессенджера.Прочитано)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	CRM_СообщениеМессенджера.Дата УБЫВ");
						  
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("Группа", Группа);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Дата", ДатаПроверки);
	ДатаПроверки = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаНепрочитанныхСообщенийМессенджера()
	
	НовыхСообщений = ПроверкаНепрочитанныхСообщенийМессенджераНаСервере();
	Если НовыхСообщений>0 Тогда
		Элементы.Контакты.Обновить();
		Если Заголовок <> НСтр("ru = 'Диалоги: '")+" " + Строка(НовыхСообщений) Тогда 
			Заголовок = НСтр("ru = 'Диалоги: '")+" " + Строка(НовыхСообщений);
		КонецЕсли;
	Иначе
		Если Заголовок <> НСтр("ru = 'Диалоги'") Тогда 
			Заголовок = НСтр("ru = 'Диалоги'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаНепрочитанныхСообщенийМессенджераНаСервере()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ CRM_СообщениеМессенджера.Ссылка) КАК Новых
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиМессенджеров КАК CRM_УчетныеЗаписиМессенджеров
	                      |		ПО CRM_СообщениеМессенджера.УчетнаяЗапись = CRM_УчетныеЗаписиМессенджеров.УчетнаяЗапись
	                      |			И (CRM_УчетныеЗаписиМессенджеров.Пользователь = &ТекущийПользователь)
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее)
	                      |	И НЕ CRM_СообщениеМессенджера.Прочитано");
						  
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Новых;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СвязатьСКонтактомНаСервере(ВыбранныйКонтакт, УчетнаяЗапись, ID_Пользователя)
	ВыбранныйКонтактОбъект = ВыбранныйКонтакт.ПолучитьОбъект();
	Если УчетнаяЗапись.ТипМессенджера = Перечисления.CRM_ТипыМессенджеров.ВКонтакте Тогда
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ВыбранныйКонтактОбъект, "https://vk.com/id"+ID_Пользователя,
					CRM_РаботаСМессенджерамиСервер.ПолучитьВидКИМессенджера(УчетнаяЗапись, ВыбранныйКонтакт), Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	КонецЕсли;
				
	ВыбранныйКонтактОбъект.Записать();
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	CRM_СообщениеМессенджера.Ссылка
	                      |ИЗ
	                      |	Документ.CRM_СообщениеМессенджера КАК CRM_СообщениеМессенджера
	                      |ГДЕ
	                      |	CRM_СообщениеМессенджера.ID_Пользователя = &ID_Пользователя
	                      |	И CRM_СообщениеМессенджера.Контакт = НЕОПРЕДЕЛЕНО
	                      |	И CRM_СообщениеМессенджера.УчетнаяЗапись.ТипМессенджера = &ТипМессенджера");
	Запрос.УстановитьПараметр("ID_Пользователя", ID_Пользователя);
	Запрос.УстановитьПараметр("ТипМессенджера", УчетнаяЗапись.ТипМессенджера);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СообщениеОбъект.Контакт = ВыбранныйКонтакт;
		СообщениеОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСКонтактомПродолжение(ВыбранныйЭлемент, ДопПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ВыбранноеЗначение = ВыбранныйЭлемент.Значение;
		Если ВыбранноеЗначение.Свойство("ТекущееДействие") Тогда
			ТекущееДействие = ВыбранноеЗначение.ТекущееДействие;
		Иначе
			ТекущееДействие = Неопределено;
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СвязатьСКонтактомЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбранноеЗначение.ИмяФормы, ВыбранноеЗначение.ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСКонтактомЗавершение(ВыбранныйКонтакт, ДопПараметры) Экспорт
	Если ВыбранныйКонтакт<>Неопределено Тогда
		СвязатьСКонтактомНаСервере(ВыбранныйКонтакт, ТекущаяУчетнаяЗапись, ТекущийID_Пользователя);
		Элементы.Контакты.Обновить();
		Элементы.Контакты.ТекущаяСтрока = ВыбранныйКонтакт;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(Сообщение, Интерес)
	
	ВходящееПисьмоОбъект = Сообщение.ПолучитьОбъект();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаИнтерес" , Интерес);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	CRM_Интерес.Ссылка,
	               |	CRM_Интерес.СостояниеИнтереса,
	               |	ЛОЖЬ КАК ВведенНаОсновании,
	               |	ИСТИНА КАК ОсновнойИнтерес
	               |ИЗ
	               |	Документ.CRM_Интерес КАК CRM_Интерес
	               |ГДЕ
	               |	CRM_Интерес.Ссылка = &СсылкаИнтерес
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	CRM_Интерес.Дата УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаСвязей = Запрос.Выполнить().Выгрузить();
	Если ТаблицаСвязей.Количество() > 0 Тогда
		ВходящееПисьмоОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов", ТаблицаСвязей);
	КонецЕсли;
	ВходящееПисьмоОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокАтивныхИнтересов(Сообщение)
	СообщениОбъект = Сообщение.ПолучитьОбъект();
	CRM_ОбщегоНазначенияСервер.СвязатьСообщениеМессенджераСИнтересом(СообщениОбъект, Истина);
	СписокИнтересов = Новый СписокЗначений;
	Если СообщениОбъект.ДополнительныеСвойства.Свойство("CRM_ТаблицаИнтересов") Тогда
		СписокИнтересов.ЗагрузитьЗначения(СообщениОбъект.ДополнительныеСвойства.CRM_ТаблицаИнтересов.ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	Возврат СписокИнтересов;
КонецФункции

&НаКлиенте
Процедура СвязатьСообщениеСИнтересомПродолжение(ВыбранныйЭлемент, ТекСообщение) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		CRM_ДобавитьИнтересНаСервере(ТекСообщение, ВыбранныйЭлемент.Значение);
		НеСвязанныеСообщения = CRM_РаботаСМессенджерамиСервер.НеСвязанныеСообщенияКонтакта(ТекущаяУчетнаяЗапись, ТекущаяГруппа, ТекущийID_Пользователя);
		Если НеСвязанныеСообщения.Количество()>0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("СвязатьСообщениеСИнтересомЗавершение", ЭтотОбъект, Новый Структура("НеСвязанныеСообщения, Интерес", НеСвязанныеСообщения, ВыбранныйЭлемент.Значение));
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Связать все не связанные сообщения с выбранным интересом?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			Элементы.СписокСообщений.Обновить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСообщениеСИнтересомЗавершение(Ответ, Параметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого ТекСообщение из Параметры.НеСвязанныеСообщения Цикл
			CRM_ДобавитьИнтересНаСервере(ТекСообщение, Параметры.Интерес);
		КонецЦикла;
	КонецЕсли;
	Элементы.СписокСообщений.Обновить();
КонецПроцедуры

&НаСервере
Функция УказыватьПричинуОтклонения(Ссылка)
	Возврат РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка, Истина);
КонецФункции

&НаКлиенте
Процедура ОтклонитьОбращениеЗавершение(Результат, Ссылка) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтказаПоИнтересам") Тогда
		ОтклонитьОбращениеНаСервере(Ссылка, Результат.ПричинаОтказа, Результат.Комментарий);
	Иначе
		ОтклонитьОбращениеНаСервере(Ссылка, Неопределено, "");
	КонецЕсли;
	Элементы.СписокСообщений.Обновить();
КонецПроцедуры

&НаСервере
Процедура ОтклонитьОбращениеНаСервере(Ссылка, ПричинаОтказа, Комментарий) Экспорт
	Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка) Тогда
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Ссылка, Справочники.CRM_СостоянияЛидов.Отклонен, ПричинаОтказа, Комментарий); 
	КонецЕсли;
	
	Об = Ссылка.ПолучитьОбъект();
	Об.CRM_СкрытьВАРМ = Истина;
	Об.Записать();
КонецПроцедуры

#КонецОбласти