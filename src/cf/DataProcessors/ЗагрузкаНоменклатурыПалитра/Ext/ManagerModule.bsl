
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область Обновление
// +++ VOG Кулаков П.Л. 16.04.2021 DEV-361
Процедура ОбновитьДизайны(ТаблицаЗагрузки, ТаблицаРеквизитов, МассивОшибок = Неопределено) Экспорт
// --- VOG Кулаков П.Л.
	
	ВыбранныеСтроки = ТаблицаЗагрузки.НайтиСтроки(Новый Структура("Загрузить",Истина));
	
	Для Каждого Стр из ВыбранныеСтроки цикл
		Если ЗначениеЗаполнено(Стр.Дизайн) тогда
			// +++ VOG Кулаков П.Л. 16.04.2021 DEV-361
			ОбновитьДизайн(Стр,ТаблицаРеквизитов, МассивОшибок);
			// --- VOG Кулаков П.Л.
			вогИнтеграцияСУчетнойСистемой.ЗарегистрироватьДанныеКОтправкеВУчетнуюСистему(Стр.SKU,Истина,Истина);
			
		КонецЕсли;		
	КонецЦикла;		
	
КонецПроцедуры

Процедура ОбновитьНоменклатурныеГруппы(ТаблицаЗагрузки, ТаблицаРеквизитов) Экспорт
	
КонецПроцедуры	

// +++ VOG Кулаков П.Л. 16.04.2021 DEV-361
Процедура ОбновитьНоменклатуру(ТаблицаЗагрузки, ТаблицаРеквизитов, СистемаДляЗагрузки, МассивОшибок = Неопределено) Экспорт
// --- VOG Кулаков П.Л.

	ВыбранныеСтроки = ТаблицаЗагрузки.НайтиСтроки(Новый Структура("Загрузить",Истина));
	
	Для Каждого Стр из ВыбранныеСтроки цикл
		Если ЗначениеЗаполнено(Стр.SKU) тогда
			// +++ VOG Кулаков П.Л. 16.04.2021 DEV-361
			ОбновитьЭлементНоменклатуры(Стр,ТаблицаРеквизитов,СистемаДляЗагрузки, МассивОшибок);
			// --- VOG Кулаков П.Л.
		КонецЕсли;		
	КонецЦикла;		
	
КонецПроцедуры

// +++ VOG Кулаков П.Л. 16.04.2021 DEV-361
Процедура ОбновитьДизайн(ДанныеДляОбновления,ТЗРеквизитов, МассивОшибок= Неопределено)
// --- VOG Кулаков П.Л.
	
	ДизайнОбъект = ДанныеДляОбновления.Дизайн.ПолучитьОбъект();
	
	//ОшибкаЗагрузки = Ложь;
	
	Для Каждого СтрокаРеквизит из ТЗРеквизитов цикл
		
		ОшибкаЗагрузки = Ложь;
		
		Если ЗначениеЗаполнено(ДизайнОбъект[СтрокаРеквизит.Реквизит]) = Истина И СтрокаРеквизит.РежимОбновления = "Заполнение пустых реквизитов" тогда
			Продолжить;
		КонецЕсли;	
		
		ЗначениеРеквизита = ДанныеДляОбновления[СтрокаРеквизит.ИмяКолонки];
		
		Если СтрокаРеквизит.ПроверятьЗаполнение = Истина Тогда
			Если СтрокаРеквизит.ИмяКолонкиПроверятьЗаполнение = "" тогда
				Если ЗначениеЗаполнено(ЗначениеРеквизита) = ложь тогда
					Сообщить("У дизайна "+СокрЛП(ДизайнОбъект)+" не найдено значение реквизита "+СтрокаРеквизит.ИмяКолонки);
					ОшибкаЗагрузки = Истина;
					// +++ VOG Кулаков П.Л. 16.04.2021 DEV-361
					Если МассивОшибок <> Неопределено Тогда
						МассивОшибок.Добавить("У дизайна "+СокрЛП(ДизайнОбъект)+" не найдено значение реквизита "+СтрокаРеквизит.ИмяКолонки);
					КонецЕсли;
					// --- VOG Кулаков П.Л.
				КонецЕсли;					
			ИначеЕсли ЗначениеЗаполнено(ДанныеДляОбновления[СтрокаРеквизит.ИмяКолонкиПроверятьЗаполнение]) = Истина тогда
				Если ЗначениеЗаполнено(ЗначениеРеквизита) = ложь тогда
					Сообщить("У дизайна "+СокрЛП(ДизайнОбъект)+" не найдено значение реквизита "+СтрокаРеквизит.ИмяКолонки);
					ОшибкаЗагрузки = Истина;
					// +++ VOG Кулаков П.Л. 16.04.2021 DEV-361
					Если МассивОшибок <> Неопределено Тогда
						МассивОшибок.Добавить("У дизайна "+СокрЛП(ДизайнОбъект)+" не найдено значение реквизита "+СтрокаРеквизит.ИмяКолонки);
					КонецЕсли;
					// --- VOG Кулаков П.Л.
				КонецЕсли;					
			КонецЕсли;
		КонецЕсли;	
		
		Если ОшибкаЗагрузки = Ложь
			И Не СтрокаРеквизит.Реквизит = "НоменклатурнаяГруппа" Тогда // VOG Солодов В.В. 13.08.2021 DEV-863 // Добавлено условие
			ДизайнОбъект[СтрокаРеквизит.Реквизит] = ЗначениеРеквизита;
		КОнецЕсли;	
		
	КонецЦикла;	
	
	//Если ОшибкаЗагрузки = Ложь тогда
	
		ДизайнОбъект.Записать();	
		
	//КонецЕсли;	
	
КонецПроцедуры	

// +++ VOG Кулаков П.Л. 16.04.2021 DEV-361
Процедура ОбновитьЭлементНоменклатуры(ДанныеДляОбновления,ТЗРеквизитов,СистемаДляЗагрузки, МассивОшибок = Неопределено)
// --- VOG Кулаков П.Л.
	
	НоменклатураОбъект = ДанныеДляОбновления.SKU.ПолучитьОбъект();
	
	//ОшибкаЗагрузки = Ложь;
	
	Для Каждого СтрокаРеквизит из ТЗРеквизитов цикл		
		
		ОшибкаЗагрузки = Ложь;
		
		Если СтрокаРеквизит.Реквизит = "Изображение" тогда
			
			СтрокаТаблицы = ДанныеДляОбновления;
			Номенклатура = ДанныеДляОбновления.SKU;
			
			Если СокрЛП(СтрокаТаблицы.Изображение) <> "" тогда
				РасширениеФайла = Прав(СтрокаТаблицы.Изображение,СтрДлина(СтрокаТаблицы.Изображение)-СтрНайти(СтрокаТаблицы.Изображение,".")+1);
				ИмяФайла = Лев(СтрокаТаблицы.Изображение,СтрНайти(СтрокаТаблицы.Изображение,".")-1);
				РасширениеБезТочки = Прав(СтрокаТаблицы.Изображение,СтрДлина(СтрокаТаблицы.Изображение)-СтрНайти(СтрокаТаблицы.Изображение,"."));
			
				FTPСоединение = Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.ПолучитьФТПСоединение(Справочники.НастройкиПодключенияЗагрузкиНоменклатуры[СистемаДляЗагрузки],Истина);
			
				Попытка
					ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеБезТочки);
					FTPСоединение.Получить(СтрокаТаблицы.Изображение,ИмяВременногоФайла );
					ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
					АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
					УдалитьВременныйФайл(ИмяВременногоФайла);
					ПараметрыФайла = Новый Структура;
					ПараметрыФайла.Вставить("ВладелецФайлов", Номенклатура.Ссылка);
					ПараметрыФайла.Вставить("Автор", Неопределено);
					ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяФайла);
					ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
					ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
					ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
					ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВХранилище);
					МенеджерЗаписи = РегистрыСведений.вогПрисоедниненныеФайлыОбъектовПоВидам.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ПрисоединенныйФайл = ПрисоединенныйФайл;
					МенеджерЗаписи.ВидФайла = Справочники.вогВидыПрисоединенныхФайлов.ПустаяСсылка();
					МенеджерЗаписи.Записать(Истина);
					
					Если ЗначениеЗаполнено(Номенклатура.ФайлКартинки) = ЛОЖЬ тогда
						НоменклатураОбъект.ФайлКартинки = ПрисоединенныйФайл;
						НоменклатураОбъект.Записать();
					КонецЕсли;
					
				Исключение
					Сообщить(ОписаниеОшибки());
					// +++ VOG Кулаков П.Л. 16.04.2021 DEV-361
					Если МассивОшибок <> Неопределено Тогда
						МассивОшибок.Добавить(ОписаниеОшибки());
					КонецЕсли;
					// --- VOG Кулаков П.Л.
				КонецПопытки;	
	
			КонецЕсли;

		ИначеЕсли СтрокаРеквизит.Реквизит = "Коллекция" Тогда
		
			Если НоменклатураОбъект.Коллекции.Количество() > 0 И СтрокаРеквизит.РежимОбновления = "Заполнение пустых реквизитов" тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ПустаяСтрока(ДанныеДляОбновления.Коллекция) Тогда
				НоменклатураОбъект.Коллекции.Очистить();
				НоваяСтрока = НоменклатураОбъект.Коллекции.Добавить();
				Если ЗначениеЗаполнено(ДанныеДляОбновления.КоллекцияСсылка) Тогда
					НоваяСтрока.КоллекцияПроизводителя = ДанныеДляОбновления.КоллекцияСсылка;
				Иначе
					НоваяСтрока.КоллекцияПроизводителя = ПолучитьКоллекциюНоменклатурыПроизводителя(ДанныеДляОбновления.Коллекция);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗначениеРеквизита = ДанныеДляОбновления[СтрокаРеквизит.ИмяКолонки];
			
			Если ЗначениеЗаполнено(НоменклатураОбъект[СтрокаРеквизит.Реквизит]) = Истина И СтрокаРеквизит.РежимОбновления = "Заполнение пустых реквизитов" тогда
				Продолжить;
			КонецЕсли;			
			
			Если СтрокаРеквизит.ПроверятьЗаполнение = Истина Тогда
				Если СтрокаРеквизит.ИмяКолонкиПроверятьЗаполнение = "" тогда
					Если ЗначениеЗаполнено(ЗначениеРеквизита) = ложь тогда
						Сообщить("У номенклатуры "+СокрЛП(НоменклатураОбъект)+" не найдено значение реквизита "+СтрокаРеквизит.ИмяКолонки);
						ОшибкаЗагрузки = Истина;
						// +++ VOG Кулаков П.Л. 16.04.2021 DEV-361
						Если МассивОшибок <> Неопределено Тогда
							МассивОшибок.Добавить("У номенклатуры "+СокрЛП(НоменклатураОбъект)+" не найдено значение реквизита "+СтрокаРеквизит.ИмяКолонки);
						КонецЕсли;
						// --- VOG Кулаков П.Л.
					КонецЕсли;					
				ИначеЕсли ЗначениеЗаполнено(ДанныеДляОбновления[СтрокаРеквизит.ИмяКолонкиПроверятьЗаполнение]) = Истина тогда
					Если ЗначениеЗаполнено(ЗначениеРеквизита) = ложь тогда
						Сообщить("У номенклатуры "+СокрЛП(НоменклатураОбъект)+" не найдено значение реквизита "+СтрокаРеквизит.ИмяКолонки);
						ОшибкаЗагрузки = Истина;
						// +++ VOG Кулаков П.Л. 16.04.2021 DEV-361
						Если МассивОшибок <> Неопределено Тогда
							МассивОшибок.Добавить("У номенклатуры "+СокрЛП(НоменклатураОбъект)+" не найдено значение реквизита "+СтрокаРеквизит.ИмяКолонки);
						КонецЕсли;
						// --- VOG Кулаков П.Л.
					КонецЕсли;					
				КонецЕсли;
			КонецЕсли;	
			
			Если ОшибкаЗагрузки = Ложь тогда
				НоменклатураОбъект[СтрокаРеквизит.Реквизит] = ЗначениеРеквизита;
			КонецЕсли;	
			
		КонецЕсли;	
			
	КонецЦикла;	
	
	//Если ОшибкаЗагрузки = Ложь тогда
	
		НоменклатураОбъект.Записать();
		
		РезультатОбмена = "";
		
		вогИнтеграцияСУчетнойСистемой.ЗарегистрироватьДанныеКОтправкеВУчетнуюСистему(НоменклатураОбъект.Ссылка,Истина,Истина);
		
	//КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область Загрузка

Процедура СоздатьЭлементы(ТаблицаЗагрузки,СистемаДляЗагрузки) Экспорт
	
	ОбновитьСправочники(ТаблицаЗагрузки,СистемаДляЗагрузки);
	
	ТЗКомпаньоны = Новый ТаблицаЗначений;
	ТЗКомпаньоны.Колонки.Добавить("Номенклатура");
	ТЗКомпаньоны.Колонки.Добавить("Компаньоны");
	
	Для Каждого СтрокаТаблицы из ТаблицаЗагрузки цикл
		
		Если СтрокаТаблицы.Загрузить = Истина и ЗначениеЗаполнено(СтрокаТаблицы.SKU) = Ложь тогда
			
			НачатьТранзакцию();
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Дизайн) тогда
				Дизайн = СтрокаТаблицы.Дизайн;
			Иначе
				Дизайн = ПолучитьДизайн(СтрокаТаблицы);
			КонецЕсли;
			
			Если ТипЗнч(Дизайн) = Тип("Массив") тогда
				ОтменитьТранзакцию();
				Для каждого ЭлементМассива из Дизайн цикл
					Сообщить(ЭлементМассива);
					СтрокаТаблицы.ОписаниеОшибокЗагрузки = СтрокаТаблицы.ОписаниеОшибокЗагрузки + ЭлементМассива + "; "; 
				КонецЦикла;	
				Продолжить;
			КонецЕсли;	
			
			СтрокаТаблицы.Дизайн = Дизайн;
			
			НоменклатурнаяПозиция = ПолучитьНоменклатурнуюПозицию(СтрокаТаблицы);
			Если ТипЗнч(НоменклатурнаяПозиция) = Тип("Массив") тогда
				ОтменитьТранзакцию();
				Для каждого ЭлементМассива из НоменклатурнаяПозиция цикл
					Сообщить(ЭлементМассива);
					СтрокаТаблицы.ОписаниеОшибокЗагрузки = СтрокаТаблицы.ОписаниеОшибокЗагрузки + ЭлементМассива + "; ";
				КонецЦикла;	
				Продолжить;
			КонецЕсли;
			
			МассивОшибок = Новый Массив;
			
			Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
			Номенклатура.Наименование = СтрокаТаблицы.НаименованиеSKU;
			Номенклатура.НаименованиеПолное = СтрокаТаблицы.НаименованиеПолноеSKU;
			Номенклатура.Артикул = СтрокаТаблицы.Артикул;
			// ++ VOG Солодов В.В. 21.09.2021 CRM-1224
			Номенклатура.ОписаниеТовара = СтрокаТаблицы.ОписаниеТовара;
			// До изменения
			//Номенклатура.Комментарий = СтрокаТаблицы.Комментарий;
			// -- VOG Солодов В.В. 21.09.2021 CRM-1224
			Номенклатура.вогПроизводитель = СтрокаТаблицы.Производитель;
			Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
			Номенклатура.НоменклатурнаяПозиция = НоменклатурнаяПозиция; 
			Номенклатура.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("736");
			Номенклатура.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои;
			Номенклатура.ДатаЗапуска = СтрокаТаблицы.ДатаЗапуска;
			Номенклатура.ДатаПоследнегоТиража = СтрокаТаблицы.ДатаПоследнегоТиража;
			Номенклатура.ДатаСнятия = СтрокаТаблицы.ДатаСнятия;
			Номенклатура.УсловияХранения = Перечисления.вогУсловияХранения.Склад;
			Номенклатура.Статус = Справочники.вогСтатусыНоменклатуры.НайтиПоНаименованию("6",Истина);
			
			// +++ VOG Кулаков П.Л. 13.04.2021 DEV-397
			Если СтрокаТаблицы.Дизайн.ТипНоменклатуры.Ширина = 1.06 Тогда
				ВидТовараДляWMS = Справочники.вогВидыТовараДляWMS.ПолучитьСсылку(Новый УникальныйИдентификатор("8faae9c3-ae7a-11e3-9422-005056ac8899")); // 2
			Иначе
				ВидТовараДляWMS = Справочники.вогВидыТовараДляWMS.ПолучитьСсылку(Новый УникальныйИдентификатор("775a4869-ae7a-11e3-9422-005056ac8899")); // 1
			КонецЕсли;
			Номенклатура.ВидТовараДляWMS = ВидТовараДляWMS;
			// --- VOG Кулаков П.Л.
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппаСсылка) тогда
				Номенклатура.НоменклатурнаяГруппа = СтрокаТаблицы.НоменклатурнаяГруппаСсылка;
			Иначе
				МассивОшибок.Добавить("Артикул "+СтрокаТаблицы.Артикул+" Не найдена номенклатурная группа");
			КонецЕсли;
			
			// ++ VOG Солодов В.В. 14.10.2020 CRM-970
			Если Не СтрокаТаблицы.ЦеновойСегментФабрики = ""
				И ЗначениеЗаполнено(СтрокаТаблицы.ЦеновойСегментФабрикиСсылка) = Ложь Тогда
				МассивОшибок.Добавить("Артикул " + СтрокаТаблицы.Артикул + " Не найдено соответствие для ценового сегмента фабрики. (PriceGroup)");
			Иначе
				Номенклатура.ЦеновойСегментФабрики = СтрокаТаблицы.ЦеновойСегментФабрикиСсылка;
			КонецЕсли;
			
			Если Не СтрокаТаблицы.Коллекция = "" Тогда
				НоваяСтрока = Номенклатура.Коллекции.Добавить();
				// ++ VOG Солодов В.В. 24.12.2020 CRM-1141
				Если ЗначениеЗаполнено(СтрокаТаблицы.КоллекцияСсылка) Тогда
					НоваяСтрока.КоллекцияПроизводителя = СтрокаТаблицы.КоллекцияСсылка;
				Иначе
					НоваяСтрока.КоллекцияПроизводителя = ПолучитьКоллекциюНоменклатурыПроизводителя(СтрокаТаблицы.Коллекция);
				КонецЕсли;
				// До изменения
				//НоваяСтрока.Коллекция = СтрокаТаблицы.Коллекция;
				// -- VOG Солодов В.В. 24.12.2020 CRM-1141
			КонецЕсли;
			// -- VOG Солодов В.В. 14.10.2020 CRM-970
			
			// +++ VOG Кулаков П.Л. 14.04.2021 DEV-397
			Если НЕ СтрокаТаблицы.ЦеновойСегментФабрики = ""
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЦеноваяГруппаСсылка) Тогда
				МассивОшибок.Добавить("Артикул " + СтрокаТаблицы.Артикул + " Не найдено соответствие для ценовой группы. (PriceGroup_our)");
			Иначе
				Номенклатура.ЦеноваяГруппа = СтрокаТаблицы.ЦеноваяГруппаСсылка;
			КонецЕсли;
			// --- VOG Кулаков П.Л.
			
			Если МассивОшибок.Количество() > 0 Тогда
				ОтменитьТранзакцию();
				Для каждого ЭлементМассива из МассивОшибок цикл
					Сообщить(ЭлементМассива);
					СтрокаТаблицы.ОписаниеОшибокЗагрузки = СтрокаТаблицы.ОписаниеОшибокЗагрузки + ЭлементМассива + "; ";
				КонецЦикла;	
				Продолжить;
			КонецЕсли;
			
			Номенклатура.Записать();
			
			ЕдиницаРулон = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();			
			ЕдиницаРулон.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("736");
			ЕдиницаРулон.Наименование = ЕдиницаРулон.ЕдиницаПоКлассификатору.Наименование;
			ЕдиницаРулон.Владелец = Номенклатура.Ссылка; 
			ЕдиницаРулон.Длина = СтрокаТаблицы.ДлинаРул;
			ЕдиницаРулон.Ширина = СтрокаТаблицы.ШиринаРул;
			ЕдиницаРулон.Вес = СтрокаТаблицы.ВесРул;
			ЕдиницаРулон.Штрихкод = СтрокаТаблицы.ШтрихкодРул;
			ЕдиницаРулон.Наименование = ЕдиницаРулон.ЕдиницаПоКлассификатору.Наименование;
			ЕдиницаРулон.Коэффициент = 1;
			ЕдиницаРулон.Записать();
			ЕдиницаРулон.Содержит = 1;
			ЕдиницаРулон.СодержитЕдИзм = ЕдиницаРулон.Ссылка;
			ЕдиницаРулон.Записать();
			
			Если СокрЛП(СтрокаТаблицы.ШтрихкодРул) <> "" тогда
				Штрихкод = РегистрыСведений.вогШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
				Штрихкод.Штрихкод = СтрокаТаблицы.ШтрихкодРул;
				Штрихкод.Номенклатура = Номенклатура.Ссылка; 
				Штрихкод.Упаковка = ЕдиницаРулон.Ссылка; 
				Штрихкод.Записать(Истина);				
			КонецЕсли;	
			
			Номенклатура.ЕдиницаХраненияОстатков = ЕдиницаРулон.Ссылка;
			Номенклатура.ЕдиницаДляОтчетов = ЕдиницаРулон.Ссылка;
			
			ЕдиницаКоробка = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			ЕдиницаКоробка.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("8751");
			ЕдиницаКоробка.Наименование = ЕдиницаКоробка.ЕдиницаПоКлассификатору.Наименование;
			ЕдиницаКоробка.Владелец = Номенклатура.Ссылка; 
			ЕдиницаКоробка.Длина = СтрокаТаблицы.ДлинаКор;
			ЕдиницаКоробка.Ширина = СтрокаТаблицы.ШиринаКор;
			ЕдиницаКоробка.Высота = СтрокаТаблицы.ВысотаКор;
			ЕдиницаКоробка.Вес = СтрокаТаблицы.ВесКор;
			ЕдиницаКоробка.Содержит = СтрокаТаблицы.Вмещает;
			ЕдиницаКоробка.СодержитЕдИзм = ЕдиницаРулон.Ссылка;
			ЕдиницаКоробка.Штрихкод = СтрокаТаблицы.ШтрихкодКор;
			ЕдиницаКоробка.Коэффициент = СтрокаТаблицы.Вмещает;
			ЕдиницаКоробка.Записать();
			
			Если СокрЛП(СтрокаТаблицы.ШтрихкодКор) <> "" тогда
				Штрихкод = РегистрыСведений.вогШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
				Штрихкод.Штрихкод = СтрокаТаблицы.ШтрихкодКор;
				Штрихкод.Номенклатура = Номенклатура.Ссылка; 
				Штрихкод.Упаковка = ЕдиницаКоробка.Ссылка; 
				Штрихкод.Записать(Истина);				
			КонецЕсли;
			
			ЕдиницаПаллета = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			ЕдиницаПаллета.ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("005");
			ЕдиницаПаллета.Наименование = ЕдиницаПаллета.ЕдиницаПоКлассификатору.Наименование;
			ЕдиницаПаллета.Владелец = Номенклатура.Ссылка;
			ЕдиницаПаллета.Содержит = СтрокаТаблицы.ВмещаетПалл;
			ЕдиницаПаллета.СодержитЕдИзм = ЕдиницаКоробка.Ссылка;
			ЕдиницаПаллета.Коэффициент = СтрокаТаблицы.Вмещает * СтрокаТаблицы.ВмещаетПалл;
			ЕдиницаПаллета.Записать();
			
			Номенклатура.Записать();
			
			Если СокрЛП(СтрокаТаблицы.Статус) <> "" тогда
				Статус = РегистрыСведений.СтатусыНоменклатурыОбоев.СоздатьМенеджерЗаписи();
				Статус.Номенклатура = Номенклатура.Ссылка;
				Статус.Период = ТекущаяДата();
				Статус.СтатусПроизводителя = СтрокаТаблицы.Статус;
				Статус.Записать(Истина);				
			КонецЕсли;			
			
			Попытка 
				ЗафиксироватьТранзакцию();
				Сообщить("Создан SKU "+СокрЛП(Номенклатура.Ссылка));
				СтрокаТаблицы.SKU = Номенклатура.Ссылка;
				СтрокаТЗ = ТЗКомпаньоны.Добавить();
				СтрокаТЗ.Номенклатура = Номенклатура.Ссылка;
				СтрокаТЗ.Компаньоны = СтрокаТаблицы.Компаньоны;
			Исключение 
				Сообщить(ОписаниеОшибки());
				СтрокаТаблицы.ОписаниеОшибокЗагрузки = СтрокаТаблицы.ОписаниеОшибокЗагрузки+ОписаниеОшибки()+"; ";
				ОтменитьТранзакцию();
			КонецПопытки;
			
			Если СокрЛП(СтрокаТаблицы.Изображение) <> "" тогда
				РасширениеФайла = Прав(СтрокаТаблицы.Изображение,СтрДлина(СтрокаТаблицы.Изображение)-СтрНайти(СтрокаТаблицы.Изображение,".")+1);
				ИмяФайла = Лев(СтрокаТаблицы.Изображение,СтрНайти(СтрокаТаблицы.Изображение,".")-1);
				РасширениеБезТочки = Прав(СтрокаТаблицы.Изображение,СтрДлина(СтрокаТаблицы.Изображение)-СтрНайти(СтрокаТаблицы.Изображение,"."));
				
				// ++ VOG Ульянов И.В. DEV-101
				//АдресСайта = Константы.СерверЗагрузкиНоменклатурыПалитра.Получить();
				//Порт = 21;
				//Логин = Константы.ИмяПользователяЗагрузкиПалитра.Получить();
				//Пароль = Константы.ПарольПользователяЗагрузкиПалитра.Получить();
				//ИмяКаталога = Константы.ИмяКаталогаЗагрузкиПалитра.Получить();
				//
				//FTPСоединение = Новый FTPСоединение(АдресСайта,Порт,Логин,Пароль);
				//FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
				FTPСоединение = Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.ПолучитьФТПСоединение(Справочники.НастройкиПодключенияЗагрузкиНоменклатуры[СистемаДляЗагрузки],Истина,СтрокаТаблицы.ИмяКаталога);
				// -- VOG Ульянов И.В. DEV-101
				
				Попытка
					ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеБезТочки);
					FTPСоединение.Получить(СтрокаТаблицы.Изображение,ИмяВременногоФайла );
					ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
					АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
					УдалитьВременныйФайл(ИмяВременногоФайла);
					ПараметрыФайла = Новый Структура;
					ПараметрыФайла.Вставить("ВладелецФайлов", Номенклатура.Ссылка);
					ПараметрыФайла.Вставить("Автор", Неопределено);
					ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяФайла);
					ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
					ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
					ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
					ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВХранилище);
					МенеджерЗаписи = РегистрыСведений.вогПрисоедниненныеФайлыОбъектовПоВидам.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ПрисоединенныйФайл = ПрисоединенныйФайл;
					МенеджерЗаписи.ВидФайла = Справочники.вогВидыПрисоединенныхФайлов.ПустаяСсылка();
					МенеджерЗаписи.Записать(Истина);
					
					// ++ Ульянов И.В. CRM-1078					
					Если ЗначениеЗаполнено(Номенклатура.ФайлКартинки) = ЛОЖЬ тогда
						Номенклатура.ФайлКартинки = ПрисоединенныйФайл;
						Номенклатура.Записать();
					КонецЕсли;
					// -- Ульянов И.В. CRM-1078
					
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;	
	
			КонецЕсли;
			
		КонецЕсли;			
			
	КонецЦикла;	
	
	Для каждого СтрокаТЗ из ТЗКомпаньоны цикл
		
		Если СтрокаТЗ.Компаньоны = "" тогда
			Продолжить;
		КонецЕсли;	
		
		НоменклатураОбъект = СтрокаТЗ.Номенклатура.ПолучитьОбъект();
		МассивНаименований = СтрРазделить(СтрокаТЗ.Компаньоны,";");
		ЭлементИзменен = Ложь;
		
		Для каждого ЭлементМассива из МассивНаименований цикл
			
			АртикулКомпаньона = СокрЛП(ЭлементМассива);
			
			Если АртикулКомпаньона <> "" тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Номенклатура.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Номенклатура КАК Номенклатура
					|ГДЕ
					|	Номенклатура.Артикул = &Артикул";
				
				Запрос.УстановитьПараметр("Артикул", АртикулКомпаньона);
				
				РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				Если Выборка.Следующий() тогда
					СтрокаКомпаньон = НоменклатураОбъект.Компаньоны.Добавить();
					СтрокаКомпаньон.Компаньон = Выборка.Ссылка;
					ЭлементИзменен = Истина;
				Иначе 
					Сообщить("Не найден компаньон "+АртикулКомпаньона+" артикула "+СокрЛП(СтрокаТЗ.Номенклатура));
				КонецЕсли;	
			КонецЕсли;				
			
		КонецЦикла;
		
		Если ЭлементИзменен тогда
			НоменклатураОбъект.Записать();
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСправочники(ТаблицаЗагрузки,СистемаДляЗагрузки)
	
	Для Каждого СтрокаТаблицы из ТаблицаЗагрузки цикл
		
		Если СтрокаТаблицы.Загрузить = Истина и ЗначениеЗаполнено(СтрокаТаблицы.SKU) = Ложь тогда
			
			СтрокаТаблицы.Дизайн 						= НайтиДизайнПоАртикулу(СокрЛП(СтрокаТаблицы.Артикул));
			СтрокаТаблицы.БрендСсылка 					= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.Бренд,
																				"Справочник",
																				"вогБренды",
																				"Brend",
																				СистемаДляЗагрузки);
			
			СтрокаТаблицы.СтильРисункаОбоиСсылка 		= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.СтильРисунка,
																				"Справочник",
																				"вогСтилиРисункаОбоев",
																				"PatternType",
																				СистемаДляЗагрузки);
			
			// +++ VOG Кулаков П.Л. 14.04.2021 DEV-397
			СтрокаТаблицы.СтруктураОбоиСсылка 			= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.ВидСтруктуры,
																				"Справочник","вогВидыСтруктурыПроизводителяОбои",
																				"Structure",
																				СистемаДляЗагрузки);
			// --- VOG Кулаков П.Л.
			СтрокаТаблицы.ТипРисункаОбоиСсылка 			= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.ТипРисунка,
																				"Перечисление",
																				"вогТипРисункаОбоев",
																				"Information",
																				СистемаДляЗагрузки);
			СтрокаТаблицы.РазмерРисункаОбоиСсылка 		= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.РазмерРисунка,
																				"Перечисление",
																				"вогРазмерРисункаОбоев",
																				"PictureSize",
																				СистемаДляЗагрузки);
			// +++ VOG Кулаков П.Л. 14.04.2021 DEV-397
			СтрокаТаблицы.ЭлементРисункаСсылка 			= ПолучитьСсылкуНаРеквизитДляСписка(
																				СтрокаТаблицы.ЭлементРисунка,
																				"Справочник",
																				"вогЭлементРисункаПроизводителяОбои",
																				"PictureElements",
																				СистемаДляЗагрузки);
			// --- VOG Кулаков П.Л.
			СтрокаТаблицы.ПоверхностьОбоиСсылка 		= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.Поверхность,
																				"Справочник",
																				"вогВидыПоверхностиОбоев",
																				"Surface",
																				СистемаДляЗагрузки);
			
			СтрокаТаблицы.ЦветСсылка 					= ПолучитьСсылкуНаРеквизитДляСписка(
																				СтрокаТаблицы.Цвет,
																				"Справочник",
																				"Цвета",
																				"Colors",
																				СистемаДляЗагрузки);
			
			СтрокаТаблицы.ОсноваСсылка 					=  ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.Основа,
																				"Перечисление",
																				"вогОсноваДляОбоев",
																				"Basis",
																				СистемаДляЗагрузки);
			
			СтрокаТаблицы.СпособПроизводстваСсылка 		= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.СпособПроизводства,
																				"Перечисление",
																				"вогСпособыПроизводстваОбоев",
																				"TypeProd",
																				СистемаДляЗагрузки);
			
			СтрокаТаблицы.ТипНоменклатурыСсылка 		= ПолучитьТипНоменклатуры(СтрокаТаблицы);
			СтрокаТаблицы.НоменклатурнаяГруппаСсылка 	= ПолучитьНоменклатурнуюГруппу(СтрокаТаблицы.Бренд);
			СформироватьНаименованиеSKU(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;	
			
КонецПроцедуры

#КонецОбласти

#Область ОбработкаФайла

Процедура ОбработатьФайлАспект(ЧтениеXML,
								ТаблицаЗагрузки,
								Режим,
								СоответствиеСоздаваемыхЭлементов = Неопределено) Экспорт 	// VOG Солодов В.В. 22.07.2021 DEV-722
																							// Добавлен параметр СоответствиеСоздаваемыхЭлементов
	
	СистемаДляЗагрузки = "Аспект";
	// ++ VOG Солодов В.В. 21.09.2021 CRM-1222
	ЭтоРегламентноеЗадание = (Не СоответствиеСоздаваемыхЭлементов = Неопределено);
	// -- VOG Солодов В.В. 21.09.2021 CRM-1222
	
	ДанныеФайла = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);	
	
	МассивОбъектов = Новый Массив;
	
	ТаблицаЗагрузки.Очистить();
	
	Для каждого Элемент из ДанныеФайла.СписокЭлементов.Элемент цикл
		Запрос = Новый Запрос;
		Запрос.Текст =
		// ++ VOG Солодов В.В. 31.08.2021 DEV-911
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИСТИНА КАК Исключить
		|ИЗ
		|	РегистрСведений.ИсключенияИмпортаНоменклатурыПроизводителя КАК ТаблицаИсключения
		|ГДЕ
		|	ТаблицаИсключения.Артикул = &Артикул";
		
		Запрос.УстановитьПараметр("Артикул", СокрЛП(Элемент.Артикул));
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		РезультатЗапросаИсключений = РезультатыЗапроса[1];
		
		Если Не РезультатЗапросаИсключений.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = РезультатыЗапроса[0].Выбрать();
		// До изменения
		//	"ВЫБРАТЬ
		//	|	Номенклатура.Ссылка КАК Ссылка
		//	|ИЗ
		//	|	Справочник.Номенклатура КАК Номенклатура
		//	|ГДЕ
		//	|	Номенклатура.Артикул = &Артикул";
		//
		//Запрос.УстановитьПараметр("Артикул", СокрЛП(Элемент.Артикул));
		//
		//РезультатЗапроса = Запрос.Выполнить();
		//Выборка = РезультатЗапроса.Выбрать();
		// --+ VOG Солодов В.В. 31.08.2021 DEV-911
		
		Если Выборка.Следующий() тогда
			Если Режим = "Только новые" тогда
				Продолжить;
			ИначеЕсли Режим = "Только существующие" тогда
				СтрокаТаблицы = ТаблицаЗагрузки.Добавить();
				СтрокаТаблицы.SKU = Выборка.Ссылка;
			Иначе
				СтрокаТаблицы = ТаблицаЗагрузки.Добавить();
				СтрокаТаблицы.SKU = Выборка.Ссылка;
			КонецЕсли;	
		Иначе
			Если Режим = "Только новые" тогда
				СтрокаТаблицы = ТаблицаЗагрузки.Добавить();
				СтрокаТаблицы.SKU = Справочники.Номенклатура.ПустаяСсылка();
			ИначеЕсли Режим = "Только существующие" тогда
				Продолжить;
			Иначе
				СтрокаТаблицы = ТаблицаЗагрузки.Добавить();
				СтрокаТаблицы.SKU = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;				
		КонецЕсли;
		СтрокаТаблицы.Артикул = ?(СокрЛП(Элемент.Артикул) = "ОбъектXDTO", "", СокрЛП(Элемент.Артикул));
		СтрокаТаблицы.Дизайн = НайтиДизайнПоАртикулу(СокрЛП(Элемент.Артикул));		
		СтрокаТаблицы.Производитель = Справочники.Партнеры.НайтиПоНаименованию("Аспект Ру ООО");
		
		// ++ VOG Солодов В.В. 22.07.2021 DEV-722
		// В вызовы функций "ПолучитьСсылкуНаРеквизит" и "ПолучитьСсылкуНаРеквизитДляСписка" добавлен
		// параметр СоответствиеСоздаваемыхЭлементов
		// -- VOG Солодов В.В. 22.07.2021 DEV-722
		
		Для каждого Реквизит из Элемент.Реквизиты.Реквизит цикл
			
			Если Реквизит.Наименование = "Описание" тогда
				
				// ++ VOG Солодов В.В. 21.09.2021 CRM-1224
				СтрокаТаблицы.ОписаниеТовара 		= ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", "", СокрЛП(Реквизит.Значение));
				// До изменения
				//СтрокаТаблицы.Комментарий = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", "", СокрЛП(Реквизит.Значение));
				// -- VOG Солодов В.В. 21.09.2021 CRM-1224
				
			ИначеЕсли Реквизит.Наименование = "ШиринаМатериала" тогда
				СтрокаТаблицы.ШиринаРул = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", 0, Число(СокрЛП(Реквизит.Значение)));
			ИначеЕсли Реквизит.Наименование = "СтатусТовара" тогда
				СтрокаТаблицы.Статус = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", "", СокрЛП(Реквизит.Значение));
			ИначеЕсли Реквизит.Наименование = "ВесКоробкиПустойГр" тогда
				СтрокаТаблицы.ВесКор = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", 0, Число(СокрЛП(Реквизит.Значение)));
			// ++ VOG Солодов В.В. 31.08.2021 DEV-911
			ИначеЕсли Реквизит.Наименование = "РулоновВКоробке" Тогда
				СтрокаТаблицы.Вмещает = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", 0, Число(СокрЛП(Реквизит.Значение)));
			ИначеЕсли Реквизит.Наименование = "КоробокВПалете" Тогда
				СтрокаТаблицы.ВмещаетПалл = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", 0, Число(СокрЛП(Реквизит.Значение)));
			ИначеЕсли Реквизит.Наименование = "ВесРулона" Тогда
				СтрокаТаблицы.ВесРул = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", 0, Число(СокрЛП(Реквизит.Значение)));
			// -- VOG Солодов В.В. 31.08.2021 DEV-911
			ИначеЕсли Реквизит.Наименование = "РазмерКоробки" тогда	
				Если СокрЛП(Реквизит.Значение) <> "ОбъектXDTO" тогда
					МассивРазмеров = СтрРазделить(Реквизит.Значение,"х",Ложь);
					Если МассивРазмеров.Количество() = 3 тогда
						СтрокаТаблицы.ДлинаКор = Число(СокрЛП(МассивРазмеров[0]))/1000;
						СтрокаТаблицы.ШиринаКор = Число(СокрЛП(МассивРазмеров[1]))/1000;
						СтрокаТаблицы.ВысотаКор = Число(СокрЛП(МассивРазмеров[2]))/1000;
					КонецЕсли;
				КонецЕсли;	
			ИначеЕсли Реквизит.Наименование = "ТипыРисунка" тогда
				СписокСтилейРисунка = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", "", СокрЛП(Реквизит.Значение));
				МассивСтилей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокСтилейРисунка,",",Истина,Истина);
				Если МассивСтилей.Количество() > 0 Тогда				
					СтрокаТаблицы.СтильРисункаПроизводителя = МассивСтилей[0];
				КонецЕсли;	
				
				СтрокаТаблицы.СтильРисункаПроизводителяСсылка 	= ПолучитьСсылкуНаРеквизит(СтрокаТаблицы.СтильРисункаПроизводителя,
																						"Справочник",
																						"вогСтильРисункаПроизводителя",
																						"PatternType",
																						СистемаДляЗагрузки,
																						СоответствиеСоздаваемыхЭлементов);
				
				// ++ VOG Солодов В.В. 08.09.2021 CRM-1193
				СтрокаТаблицы.СтильРисунка 						= СтрокаТаблицы.СтильРисункаПроизводителя;
				СтрокаТаблицы.СтильРисункаОбоиСсылка 			= ПолучитьСоответствиеИзРегистра("PatternType_our",
																						СтрокаТаблицы.СтильРисунка,
																						СистемаДляЗагрузки);
				// -- VOG Солодов В.В. 08.09.2021 CRM-1193
				
			ИначеЕсли Реквизит.Наименование = "Коллекция" тогда
				СтрокаТаблицы.Коллекция = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", "", СокрЛП(Реквизит.Значение));
				
				СтрокаТаблицы.КоллекцияСсылка 					= ПолучитьСсылкуНаРеквизит(СтрокаТаблицы.Коллекция,
																						"Справочник",
																						"КоллекцииНоменклатурыПроизводителей",
																						"ItemCollection",
																						СистемаДляЗагрузки,
																						СоответствиеСоздаваемыхЭлементов);
				
			ИначеЕсли Реквизит.Наименование = "Бренд" тогда
				СтрокаТаблицы.Бренд = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", "", СокрЛП(Реквизит.Значение));
				
				СтрокаТаблицы.БрендСсылка 						= ПолучитьСсылкуНаРеквизит(СтрокаТаблицы.Бренд,
																						"Справочник",
																						"вогБренды",
																						"Brend",
																						СистемаДляЗагрузки,
																						СоответствиеСоздаваемыхЭлементов);
				
			ИначеЕсли Реквизит.Наименование = "Основа" тогда
				СтрокаТаблицы.Основа = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", "", СокрЛП(Реквизит.Значение));
				СтрокаТаблицы.ОсноваСсылка =  ПолучитьСсылкуНаРеквизит(СтрокаТаблицы.Основа,"Перечисление","вогОсноваДляОбоев","Basis",СистемаДляЗагрузки);
			ИначеЕсли Реквизит.Наименование = "ТипПроизводства" тогда
				СтрокаТаблицы.СпособПроизводства = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", "", СокрЛП(Реквизит.Значение));
				СтрокаТаблицы.СпособПроизводстваСсылка = ПолучитьСсылкуНаРеквизит(СтрокаТаблицы.СпособПроизводства,"Перечисление","вогСпособыПроизводстваОбоев","TypeProd",СистемаДляЗагрузки);
			ИначеЕсли Реквизит.Наименование = "Длина" тогда
				СтрокаТаблицы.ДлинаРул = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", 0, Число(СокрЛП(Реквизит.Значение)));
			ИначеЕсли Реквизит.Наименование = "Раппорт" тогда	
				Если СокрЛП(Реквизит.Значение) <> "ОбъектXDTO" тогда
					МассивРазмеров = СтрРазделить(Реквизит.Значение,"/",Ложь);
					Если МассивРазмеров.Количество() > 0 тогда
						СтрокаТаблицы.Раппорт =  Число(СокрЛП(МассивРазмеров[0]));
					КонецЕсли;
				КонецЕсли;	
			ИначеЕсли Реквизит.Наименование = "Структура" тогда
				
				СтрокаТаблицы.ВидСтруктуры = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", "", СокрЛП(Реквизит.Значение));
				// ++ VOG Солодов В.В. 08.09.2021 CRM-1193
				СтрокаТаблицы.СтруктураПроизводителяОбоиСсылка 	= ПолучитьСсылкуНаРеквизит(СтрокаТаблицы.ВидСтруктуры,
																						"Справочник",
																						"вогВидыСтруктурыПроизводителяОбои",
																						"Structure",
																						СистемаДляЗагрузки,
																						СоответствиеСоздаваемыхЭлементов);
				
				СтрокаТаблицы.СтруктураОбоиСсылка 				= ПолучитьСоответствиеИзРегистра("Structure_our",
																						СтрокаТаблицы.ВидСтруктуры,
																						СистемаДляЗагрузки);
				// До изменения
				//// +++ VOG Кулаков П.Л. 14.04.2021 DEV-397
				//СтрокаТаблицы.СтруктураОбоиСсылка 				= ПолучитьСсылкуНаРеквизит(СтрокаТаблицы.ВидСтруктуры,
				//																		"Справочник",
				//																		"вогВидыСтруктурыПроизводителяОбои",
				//																		"Structure",
				//																		СистемаДляЗагрузки,
				//																		СоответствиеСоздаваемыхЭлементов);
				//// --- VOG Кулаков П.Л.
				// -- VOG Солодов В.В. 08.09.2021 CRM-1193
				
			ИначеЕсли Реквизит.Наименование = "РазмерРисунка" тогда	
				СтрокаТаблицы.РазмерРисунка = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", "", СокрЛП(Реквизит.Значение));
				СтрокаТаблицы.РазмерРисункаОбоиСсылка = ПолучитьСсылкуНаРеквизит(СтрокаТаблицы.РазмерРисунка,"Перечисление","вогРазмерРисункаОбоев","PictureSize",СистемаДляЗагрузки);
			ИначеЕсли Реквизит.Наименование = "Поверхность" тогда
				СтрокаТаблицы.Поверхность = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", "", СокрЛП(Реквизит.Значение));
				
				СтрокаТаблицы.ПоверхностьОбоиСсылка 			= ПолучитьСсылкуНаРеквизит(СтрокаТаблицы.Поверхность,
																						"Справочник",
																						"вогВидыПоверхностиОбоев",
																						"Surface",
																						СистемаДляЗагрузки,
																						СоответствиеСоздаваемыхЭлементов);
				
			ИначеЕсли Реквизит.Наименование = "ЭлементыРисунка" тогда
				
				СтрокаТаблицы.ЭлементРисунка = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", "", СокрЛП(Реквизит.Значение));
				
				// ++ VOG Солодов В.В. 08.09.2021 CRM-1193
				СтрокаТаблицы.ЭлементРисункаПроизводителяСсылка = ПолучитьСсылкуНаРеквизитДляСписка(СтрокаТаблицы.ЭлементРисунка,
																								"Справочник",
																								"вогЭлементРисункаПроизводителяОбои",
																								"PictureElements",
																								СистемаДляЗагрузки,
																								СоответствиеСоздаваемыхЭлементов);
																								
				СтрокаТаблицы.ЭлементРисункаСсылка 				= ПолучитьСоответствиеИзРегистра("PictureElements_our",
																						СтрокаТаблицы.ЭлементРисунка,
																						СистемаДляЗагрузки);
				// До изменения
				//// +++ VOG Кулаков П.Л. 14.04.2021 DEV-397
				//СтрокаТаблицы.ЭлементРисункаСсылка 				= ПолучитьСсылкуНаРеквизитДляСписка(СтрокаТаблицы.ЭлементРисунка,
				//																				"Справочник",
				//																				"вогЭлементРисункаПроизводителяОбои",
				//																				"PictureElements",
				//																				СистемаДляЗагрузки,
				//																				СоответствиеСоздаваемыхЭлементов);
				//// --- VOG Кулаков П.Л.
				// -- VOG Солодов В.В. 08.09.2021 CRM-1193
				
			ИначеЕсли Реквизит.Наименование = "Изображение" тогда
				СтрокаТаблицы.Изображение = ?(СокрЛП(Реквизит.Значение) = "ОбъектXDTO", "", СокрЛП(Реквизит.Значение));
			КонецЕсли;		
		КонецЦикла;
		
		// ++ VOG Солодов В.В. 31.08.2021 DEV-911
		СтрокаТаблицы.ВесКор = СтрокаТаблицы.ВесКор / 1000 + СтрокаТаблицы.ВесРул * СтрокаТаблицы.Вмещает;
		// -- VOG Солодов В.В. 31.08.2021 DEV-911
		
		СтрокаТаблицы.ТипНоменклатурыСсылка = ПолучитьТипНоменклатуры(СтрокаТаблицы);
		СтрокаТаблицы.НоменклатурнаяГруппаСсылка = ПолучитьНоменклатурнуюГруппу(СтрокаТаблицы.Бренд);
		
		Если Элемент.Цвета.Свойства().Количество() > 0  тогда
			
			Если СокрЛП(Элемент.Цвета.Реквизит) = "СписокXDTO" тогда
				СтрокаТаблицы.Цвет = СокрЛП(Элемент.Цвета.Реквизит[0].Значение); 
			Иначе			
				СтрокаТаблицы.Цвет = СокрЛП(Элемент.Цвета.Реквизит.Значение); 				
			КонецЕсли;
			
			СтрокаТаблицы.ЦветСсылка = ПолучитьСсылкуНаРеквизит(СтрокаТаблицы.Цвет,
																"Справочник",
																"Цвета",
																"Colors",
																СистемаДляЗагрузки,
																СоответствиеСоздаваемыхЭлементов);
			
		КонецЕсли;	
		
		Если Элемент.СовместныеПродажи.Свойства().Количество() > 0 тогда
			
			Если СокрЛП(Элемент.СовместныеПродажи.Реквизит) = "СписокXDTO" тогда
				Компаньоны = "";
				Для каждого Компаньон из Элемент.СовместныеПродажи.Реквизит цикл
					Компаньоны = Компаньоны + Лев(Компаньон.Значение, 8) + "; ";
				КонецЦикла;	
				СтрокаТаблицы.Компаньоны = Компаньоны;
			Иначе			
				СтрокаТаблицы.Компаньоны = Лев(Элемент.СовместныеПродажи.Реквизит.Значение,8);
			КонецЕсли;
			
		КонецЕсли;	
		
		// ++ VOG Солодов В.В. 21.09.2021  CRM-1222
		СформироватьНаименованиеSKU(СтрокаТаблицы, ЭтоРегламентноеЗадание);
		// До изменения
		//СформироватьНаименованиеSKU(СтрокаТаблицы);
		// -- VOG Солодов В.В. 21.09.2021  CRM-1222
		
	КонецЦикла;	

КонецПроцедуры

Процедура ОбработатьФайл(ЧтениеXML,
						ТаблицаЗагрузки,
						Режим,
						ИмяКаталога = "",
						СоответствиеСоздаваемыхЭлементов = Неопределено) Экспорт 	// VOG Солодов В.В. 10.06.2021 DEV-415
																					// Добавлен параметр СоответствиеСоздаваемыхЭлементов
	
	СистемаДляЗагрузки = "Палитра";
	// ++ VOG Солодов В.В. 21.09.2021 CRM-1222
	ЭтоРегламентноеЗадание = (Не СоответствиеСоздаваемыхЭлементов = Неопределено);
	// -- VOG Солодов В.В. 21.09.2021 CRM-1222
	
	ДанныеФайла = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);	
	
	МассивОбъектов = Новый Массив;
	
//	ТаблицаЗагрузки.Очистить();
	
	Для каждого Элемент из ДанныеФайла.Item цикл
		Запрос = Новый Запрос;
		Запрос.Текст = 
		// ++ VOG Солодов В.В. 31.08.2021 DEV-911
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИСТИНА КАК Исключить
		|ИЗ
		|	РегистрСведений.ИсключенияИмпортаНоменклатурыПроизводителя КАК ТаблицаИсключения
		|ГДЕ
		|	ТаблицаИсключения.Артикул = &Артикул";
		
		Запрос.УстановитьПараметр("Артикул", СокрЛП(Элемент.ItemID));
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		РезультатЗапросаИсключений = РезультатыЗапроса[1];
		
		Если Не РезультатЗапросаИсключений.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = РезультатыЗапроса[0].Выбрать();
		// До изменения
		//"ВЫБРАТЬ
		//|	Номенклатура.Ссылка КАК Ссылка
		//|ИЗ
		//|	Справочник.Номенклатура КАК Номенклатура
		//|ГДЕ
		//|	Номенклатура.Артикул = &Артикул";
		//
		//Запрос.УстановитьПараметр("Артикул", СокрЛП(Элемент.ItemID));
		//
		//РезультатЗапроса = Запрос.Выполнить();
		//Выборка = РезультатЗапроса.Выбрать();
		// -- VOG Солодов В.В. 31.08.2021 DEV-911
		
		Если Выборка.Следующий() тогда
			Если Режим = "Только новые" тогда
				Продолжить;
			ИначеЕсли Режим = "Только существующие" тогда
				СтрокаТаблицы = ТаблицаЗагрузки.Добавить();
				СтрокаТаблицы.SKU = Выборка.Ссылка;
			Иначе
				СтрокаТаблицы = ТаблицаЗагрузки.Добавить();
				СтрокаТаблицы.SKU = Выборка.Ссылка;
			КонецЕсли;	
		Иначе
			Если Режим = "Только новые" тогда
				СтрокаТаблицы = ТаблицаЗагрузки.Добавить();
				СтрокаТаблицы.SKU = Справочники.Номенклатура.ПустаяСсылка();
			ИначеЕсли Режим = "Только существующие" тогда
				Продолжить;
			Иначе
				СтрокаТаблицы = ТаблицаЗагрузки.Добавить();
				СтрокаТаблицы.SKU = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;				
		КонецЕсли;	
		СтрокаТаблицы.Производитель 		= Справочники.Партнеры.НайтиПоНаименованию("КОФ ПАЛИТРА ООО");
		СтрокаТаблицы.Артикул 				= ?(СокрЛП(Элемент.ItemID) = "ОбъектXDTO", "", СокрЛП(Элемент.ItemID));
		// ++ VOG Солодов В.В. 21.09.2021 CRM-1224
		СтрокаТаблицы.ОписаниеТовара 		= ПолучитьЗначениеИзСписка(Элемент.Description);
		// До изменения
		//СтрокаТаблицы.Комментарий 			= ПолучитьЗначениеИзСписка(Элемент.Description);
		// -- VOG Солодов В.В. 21.09.2021 CRM-1224
		СтрокаТаблицы.Бренд 				= ?(СокрЛП(Элемент.Brend) = "ОбъектXDTO", "", СокрЛП(Элемент.Brend));
		СтрокаТаблицы.ДлинаРул 				= ?(СокрЛП(Элемент.Length) = "ОбъектXDTO", 0, Число(СокрЛП(Элемент.Length)));
		СтрокаТаблицы.ШиринаРул 			= ?(СокрЛП(Элемент.Width) = "ОбъектXDTO", 0, Число(СокрЛП(Элемент.Width)));
		СтрокаТаблицы.Раппорт 				= ?(СокрЛП(Элемент.Step) = "ОбъектXDTO", 0, Число(СокрЛП(Элемент.Step)));
		СтрокаТаблицы.Сдвиг 				= ?(СокрЛП(Элемент.Shift) = "ОбъектXDTO", 0, Число(СокрЛП(Элемент.Shift)));
		СтрокаТаблицы.ВесРул 				= ?(СокрЛП(Элемент.Weight) = "ОбъектXDTO", 0, Число(СокрЛП(Элемент.Weight)));
		СтрокаТаблицы.Основа 				= ?(СокрЛП(Элемент.Basis) = "ОбъектXDTO", "", СокрЛП(Элемент.Basis));
		СтрокаТаблицы.СпособПроизводства 	= ?(СокрЛП(Элемент.TypeProd) = "ОбъектXDTO", "", СокрЛП(Элемент.TypeProd));
		СтрокаТаблицы.Вмещает 				= ?(СокрЛП(Элемент.BoxQuantity) = "ОбъектXDTO", 0, Число(СокрЛП(Элемент.BoxQuantity)));
		СтрокаТаблицы.ДлинаКор 				= ?(СокрЛП(Элемент.BoxDepth) = "ОбъектXDTO", 0, Число(СокрЛП(Элемент.BoxDepth)));
		СтрокаТаблицы.ШиринаКор 			= ?(СокрЛП(Элемент.BoxWidth) = "ОбъектXDTO", 0, Число(СокрЛП(Элемент.BoxWidth)));
		СтрокаТаблицы.ВысотаКор 			= ?(СокрЛП(Элемент.BoxHeight) = "ОбъектXDTO", 0, Число(СокрЛП(Элемент.BoxHeight)));		
		СтрокаТаблицы.ВмещаетПалл 			= ?(СокрЛП(Элемент.PalletQuantity) = "ОбъектXDTO", 0, Число(СокрЛП(Элемент.PalletQuantity)));
		СтрокаТаблицы.ШтрихкодРул 			= ?(СокрЛП(Элемент.EAN13) = "ОбъектXDTO", "", СокрЛП(Элемент.EAN13));
		СтрокаТаблицы.ШтрихкодКор 			= ?(СокрЛП(Элемент.ITF14) = "ОбъектXDTO", "", СокрЛП(Элемент.ITF14));
		СтрокаТаблицы.Статус 				= ?(СокрЛП(Элемент.StatusPr) = "ОбъектXDTO", "", СокрЛП(Элемент.StatusPr));
		СтрокаТаблицы.ИмяКаталога 			= ИмяКаталога;
		
		СтрокаТаблицы.ВесКор = СтрокаТаблицы.ВесРул * СтрокаТаблицы.Вмещает + 0.6;
		
		СтрокаТаблицы.СтильРисункаПроизводителя = ?(СокрЛП(Элемент.PatternType) = "ОбъектXDTO", "", СокрЛП(Элемент.PatternType));
		
		СвойствоКоллекция = Элемент.ItemCollection.Свойства().Получить("Collection");
		Если СвойствоКоллекция = Неопределено Тогда
			СтрокаТаблицы.Коллекция = "";
		Иначе
			Если ТипЗнч(Элемент.ItemCollection.Collection) = Тип("СписокXDTO") тогда
				СтрокаТаблицы.Коллекция = Элемент.ItemCollection.Collection[0].CollectionName;
			Иначе
				СтрокаТаблицы.Коллекция = Элемент.ItemCollection.Получить(СвойствоКоллекция).CollectionName;
			КонецЕсли;	
		КонецЕсли;	
		
		// ++ VOG Солодов В.В. 10.06.2021 DEV-415
		// В вызовы функций "ПолучитьСсылкуНаРеквизит" и "ПолучитьСсылкуНаРеквизитДляСписка" добавлен
		// параметр СоответствиеСоздаваемыхЭлементов
		// -- VOG Солодов В.В. 10.06.2021 DEV-415
		
		СтрокаТаблицы.КоллекцияСсылка 					= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.Коллекция,
																				"Справочник",
																				"КоллекцииНоменклатурыПроизводителей",
																				"ItemCollection",
																				СистемаДляЗагрузки,
																				СоответствиеСоздаваемыхЭлементов);
		
		СтрокаТаблицы.ЦеновойСегментФабрики 			= ?(СокрЛП(Элемент.PriceGroup) = "ОбъектXDTO", "", СокрЛП(Элемент.PriceGroup));
		СтрокаТаблицы.ВидСтруктуры 						= ?(СокрЛП(Элемент.Structure) = "ОбъектXDTO", "", СокрЛП(Элемент.Structure));
		СтрокаТаблицы.ТипРисунка 						= ?(СокрЛП(Элемент.Information) = "ОбъектXDTO", "", СокрЛП(Элемент.Information));
		СтрокаТаблицы.РазмерРисунка 					= ?(СокрЛП(Элемент.PictureSize) = "ОбъектXDTO", "", СокрЛП(Элемент.PictureSize));
		СтрокаТаблицы.Поверхность 						= ?(СокрЛП(Элемент.Surface) = "ОбъектXDTO", "", СокрЛП(Элемент.Surface));
		СтрокаТаблицы.ЭлементРисунка 					= ПолучитьЗначениеИзСписка(Элемент.PictureElements);
		СтрокаТаблицы.Цвет 								= ПолучитьЗначениеИзСписка(Элемент.Colors);
		СтрокаТаблицы.Изображение 						= ?(СокрЛП(Элемент.PictureFile) = "ОбъектXDTO", "", СокрЛП(Элемент.PictureFile));
		СтрокаТаблицы.Дизайн 							= НайтиДизайнПоАртикулу(СокрЛП(Элемент.ItemID));
		СтрокаТаблицы.БрендСсылка 						= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.Бренд,
																				"Справочник",
																				"вогБренды",
																				"Brend",
																				СистемаДляЗагрузки,
																				СоответствиеСоздаваемыхЭлементов);
		
		СтрокаТаблицы.СтильРисункаПроизводителяСсылка 	= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.СтильРисункаПроизводителя,
																				"Справочник",
																				"вогСтильРисункаПроизводителя",
																				"PatternType",
																				СистемаДляЗагрузки,
																				СоответствиеСоздаваемыхЭлементов);
		
		// ++ VOG Солодов В.В. 08.09.2021 CRM-1193
		СтрокаТаблицы.СтильРисунка 						= СтрокаТаблицы.СтильРисункаПроизводителя;
		СтрокаТаблицы.СтильРисункаОбоиСсылка 			= ПолучитьСоответствиеИзРегистра("PatternType_our",
																				СтрокаТаблицы.СтильРисунка,
																				СистемаДляЗагрузки);
		// -- VOG Солодов В.В. 08.09.2021 CRM-1193
		
		СтрокаТаблицы.ЦеновойСегментФабрикиСсылка 		= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.ЦеновойСегментФабрики,
																				"Справочник",
																				"вогЦеновойСегментФабрики",
																				"PriceGroup",
																				СистемаДляЗагрузки,
																				СоответствиеСоздаваемыхЭлементов);
		
		// +++ VOG Кулаков П.Л. 14.04.2021 DEV-397
		СтрокаТаблицы.ЦеноваяГруппаСсылка 				= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.ЦеновойСегментФабрики,
																				"Справочник",
																				"вогЦеноваяГруппа",
																				"PriceGroup_our",
																				СистемаДляЗагрузки,
																				СоответствиеСоздаваемыхЭлементов);
		
		// ++ VOG Солодов В.В. 08.09.2021 CRM-1193
		СтрокаТаблицы.СтруктураПроизводителяОбоиСсылка 	= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.ВидСтруктуры,
																				"Справочник",
																				"вогВидыСтруктурыПроизводителяОбои",
																				"Structure",
																				СистемаДляЗагрузки,
																				СоответствиеСоздаваемыхЭлементов);
		
		СтрокаТаблицы.СтруктураОбоиСсылка 				= ПолучитьСоответствиеИзРегистра("Structure_our",
																						СтрокаТаблицы.ВидСтруктуры,
																						СистемаДляЗагрузки);
		// До изменения
		//СтрокаТаблицы.СтруктураОбоиСсылка 				= ПолучитьСсылкуНаРеквизит(
		//																		СтрокаТаблицы.ВидСтруктуры,
		//																		"Справочник",
		//																		"вогВидыСтруктурыПроизводителяОбои",
		//																		"Structure",
		//																		СистемаДляЗагрузки,
		//																		СоответствиеСоздаваемыхЭлементов);
		// -- VOG Солодов В.В. 08.09.2021 CRM-1193
		
		// --- VOG Кулаков П.Л.
		СтрокаТаблицы.ТипРисункаОбоиСсылка 				= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.ТипРисунка,
																				"Перечисление",
																				"вогТипРисункаОбоев",
																				"Information",
																				СистемаДляЗагрузки,
																				СоответствиеСоздаваемыхЭлементов);
		
		СтрокаТаблицы.РазмерРисункаОбоиСсылка 			= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.РазмерРисунка,
																				"Перечисление",
																				"вогРазмерРисункаОбоев",
																				"PictureSize",
																				СистемаДляЗагрузки,
																				СоответствиеСоздаваемыхЭлементов);
		
		// ++ VOG Солодов В.В. 08.09.2021 CRM-1193
		// +++ VOG Кулаков П.Л. 14.04.2021 DEV-397
		СтрокаТаблицы.ЭлементРисункаПроизводителяСсылка = ПолучитьСсылкуНаРеквизитДляСписка(
																				СтрокаТаблицы.ЭлементРисунка,
																				"Справочник",
																				"вогЭлементРисункаПроизводителяОбои",
																				"PictureElements",
																				СистемаДляЗагрузки,
																				СоответствиеСоздаваемыхЭлементов);
		
		СтрокаТаблицы.ЭлементРисункаСсылка 				= ПолучитьСоответствиеИзРегистра("PictureElements_our",
																						СтрокаТаблицы.ЭлементРисунка,
																						СистемаДляЗагрузки);
		// --- VOG Кулаков П.Л.
		// До изменения
		//// +++ VOG Кулаков П.Л. 14.04.2021 DEV-397
		//СтрокаТаблицы.ЭлементРисункаСсылка 				= ПолучитьСсылкуНаРеквизитДляСписка(
		//																		СтрокаТаблицы.ЭлементРисунка,
		//																		"Справочник",
		//																		"вогЭлементРисункаПроизводителяОбои",
		//																		"PictureElements",
		//																		СистемаДляЗагрузки,
		//																		СоответствиеСоздаваемыхЭлементов);
		//
		//// --- VOG Кулаков П.Л.
		// -- VOG Солодов В.В. 08.09.2021 CRM-1193
		
		СтрокаТаблицы.ПоверхностьОбоиСсылка 			= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.Поверхность,
																				"Справочник",
																				"вогВидыПоверхностиОбоев",
																				"Surface",
																				СистемаДляЗагрузки,
																				СоответствиеСоздаваемыхЭлементов);
		
		СтрокаТаблицы.ЦветСсылка 						= ПолучитьСсылкуНаРеквизитДляСписка(
																				СтрокаТаблицы.Цвет,
																				"Справочник",
																				"Цвета",
																				"Colors",
																				СистемаДляЗагрузки,
																				СоответствиеСоздаваемыхЭлементов);
		
		СтрокаТаблицы.Компаньоны 						= ПолучитьСписокКомпаньонов(Элемент.ItemCompanions);
		СтрокаТаблицы.ОсноваСсылка 						= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.Основа,
																				"Перечисление",
																				"вогОсноваДляОбоев",
																				"Basis",
																				СистемаДляЗагрузки,
																				СоответствиеСоздаваемыхЭлементов);
		
		СтрокаТаблицы.СпособПроизводстваСсылка 			= ПолучитьСсылкуНаРеквизит(
																				СтрокаТаблицы.СпособПроизводства,
																				"Перечисление",
																				"вогСпособыПроизводстваОбоев",
																				"TypeProd",
																				СистемаДляЗагрузки,
																				СоответствиеСоздаваемыхЭлементов);
		
		СтрокаТаблицы.ТипНоменклатурыСсылка 			= ПолучитьТипНоменклатуры(СтрокаТаблицы);
		СтрокаТаблицы.НоменклатурнаяГруппаСсылка 		= ПолучитьНоменклатурнуюГруппу(СтрокаТаблицы.Бренд);
		СтрокаТаблицы.ДатаЗапуска 						= ?(СокрЛП(Элемент.FirstDate) = "ОбъектXDTO", "", XMLЗначение(Тип("Дата"),Элемент.FirstDate));
		СтрокаТаблицы.ДатаПоследнегоТиража 				= ?(СокрЛП(Элемент.ProductDate) = "ОбъектXDTO", "", XMLЗначение(Тип("Дата"),Элемент.ProductDate));
		СтрокаТаблицы.ДатаСнятия 						= ?(СокрЛП(Элемент.LastDate) = "ОбъектXDTO", "", XMLЗначение(Тип("Дата"),Элемент.LastDate));
		
		// ++ VOG Солодов В.В. 21.09.2021  CRM-1222
		СформироватьНаименованиеSKU(СтрокаТаблицы, ЭтоРегламентноеЗадание);
		// До изменения
		//СформироватьНаименованиеSKU(СтрокаТаблицы);
		// -- VOG Солодов В.В. 21.09.2021  CRM-1222
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

// +++ VOG Кулаков П.Л. 15.04.2021 DEV-361
Процедура ПереместитьКаталогВАрхив(Настройки) Экспорт
	
	FTPСоединение = Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.ПолучитьФТПСоединение(Настройки);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяФайла");
	
	СписокКаталогов = FTPСоединение.НайтиФайлы(Настройки.ИмяКаталога,"*",Ложь);
	Если СписокКаталогов.Количество() > 0 тогда
		Для каждого ЭлементСписка из СписокКаталогов цикл
			СтрокаТЗ = ТЗ.Добавить();
			СтрокаТЗ.ИмяФайла = ЭлементСписка.Имя;				
		КонецЦикла;			
		ТЗ.Сортировать("ИмяФайла убыв");			
		ИмяКаталога = ТЗ[0].ИмяФайла;			
	Иначе	
		Возврат;
	КонецЕсли;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяФайла");
	ТЗ.Колонки.Добавить("ПолноеИмя");
	
	
	СписокФайлов = FTPСоединение.НайтиФайлы(Настройки.ИмяКаталога + ИмяКаталога + "/","*",Ложь);
	Для Каждого Файл Из СписокФайлов Цикл
		СтрокаТЗ = ТЗ.Добавить();
		СтрокаТЗ.ИмяФайла = Файл.Имя;
		СтрокаТЗ.ПолноеИмя = Файл.ПолноеИмя;
	КонецЦикла;
	
	ПутьКАрхиву = Настройки.ПутьКПапкеАрхива + ИмяКаталога + "/";
	FTPСоединение.УстановитьТекущийКаталог(Настройки.ПутьКПапкеАрхива);
	FTPСоединение.СоздатьКаталог(ИмяКаталога);
	Для Каждого Строка Из ТЗ Цикл
		FTPСоединение.Переместить(Строка.ПолноеИмя, ПутьКАрхиву + Строка.ИмяФайла);
	КонецЦикла;
	
	FTPСоединение.Удалить(Настройки.ИмяКаталога + ИмяКаталога + "/");
	
КонецПроцедуры // --- VOG Кулаков П.Л.

Процедура СформироватьНаименованиеSKU(СтрокаТаблицы, ЭтоРегламентноеЗадание = Ложь) // VOG Солодов В.В. 21.09.2021 CRM-1222 // Добавлен параметр ЭтоРегламентноеЗадание
	
	// ++ VOG Солодов В.В. 21.09.2021 CRM-1222
	Если ЭтоРегламентноеЗадание
		И ЗначениеЗаполнено(СтрокаТаблицы.SKU) Тогда
		
		РеквизитыSKU = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.SKU, "Наименование, НаименованиеПолное", Истина);
		
		СтрокаТаблицы.НаименованиеSKU 		= РеквизитыSKU.Наименование;
		СтрокаТаблицы.НаименованиеBSU 		= РеквизитыSKU.НаименованиеПолное;
		СтрокаТаблицы.НаименованиеПолноеSKU = РеквизитыSKU.НаименованиеПолное;
		
		Возврат;
		
	КонецЕсли;
	// -- VOG Солодов В.В. 21.09.2021 CRM-1222
	
	ПолноеНаименование = "%Артикул% (%Содержит%) %НаправлениеДеятельности% %Тип% %Бренд%";
	Наименование = "%Артикул% (%Содержит%) %Бренд%";
	НаименованиеBSU = "%Артикул% %Бренд%";
		
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Вмещает) Тогда
		ПолноеНаименование = СтрЗаменить(ПолноеНаименование, "(%Содержит%)", "");
		Наименование = СтрЗаменить(Наименование, "(%Содержит%)", "");
	КонецЕсли;		
		
	ПолноеНаименование = СтрЗаменить(ПолноеНаименование, "%Артикул%", СтрокаТаблицы.Артикул);
	ПолноеНаименование = СтрЗаменить(ПолноеНаименование, "%Содержит%", Формат(СтрокаТаблицы.Вмещает,"ЧФ=Ч"));
	ПолноеНаименование = СтрЗаменить(ПолноеНаименование, "%НаправлениеДеятельности%", "Обои");
	ПолноеНаименование = СтрЗаменить(ПолноеНаименование, "%Тип%", СокрЛП(СтрокаТаблицы.ТипНоменклатурыСсылка));
	ПолноеНаименование = СтрЗаменить(ПолноеНаименование, "%Бренд%", СокрЛП(СтрокаТаблицы.БрендСсылка));		
	
	Наименование = СтрЗаменить(Наименование, "%Артикул%", СтрокаТаблицы.Артикул);
	Наименование = СтрЗаменить(Наименование, "%Содержит%", Формат(СтрокаТаблицы.Вмещает,"ЧФ=Ч"));
	Наименование = СтрЗаменить(Наименование, "%Бренд%", СокрЛП(СтрокаТаблицы.БрендСсылка));		
	
	НаименованиеBSU = СтрЗаменить(Наименование, "%Артикул%", СтрокаТаблицы.Артикул);	
	НаименованиеBSU = СтрЗаменить(Наименование, "%Бренд%", СокрЛП(СтрокаТаблицы.БрендСсылка));		
	
	СтрокаТаблицы.НаименованиеSKU = Наименование;
	СтрокаТаблицы.НаименованиеBSU = ПолноеНаименование;
	СтрокаТаблицы.НаименованиеПолноеSKU = ПолноеНаименование;
	
КонецПроцедуры

Функция ПолучитьЗначениеИзСписка(Список)
	
	Если СокрЛП(Список) = "ОбъектXDTO" тогда
		Возврат "";
	КонецЕсли;	
	
	Если СокрЛП(Список) = "СписокXDTO" тогда
		Для каждого СтрокаСписка из Список цикл
			Если СокрЛП(СтрокаСписка) = "ОбъектXDTO" тогда
				Возврат "";
			КонецЕсли;		
			Возврат СокрЛП(СтрокаСписка);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Список;  	
	
КонецФункции

Функция НайтиДизайнПоАртикулу(Артикул)
	
	КодДизайна = Лев(Артикул,СтрНайти(Артикул,"-")-1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогДизайныНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогДизайныНоменклатуры КАК вогДизайныНоменклатуры
		|ГДЕ
		|	вогДизайныНоменклатуры.Наименование = &КодДизайна";
	
	Запрос.УстановитьПараметр("КодДизайна", КодДизайна);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;	

	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьНоменклатурнуюГруппу(НазваниеБренда)
	
	Если НазваниеБренда = "VOG" тогда		
		НаименованиеДляПоиска = "VOG Collection П";
	ИначеЕсли НазваниеБренда = "VOG Super Moda" тогда
		НаименованиеДляПоиска = "SuperModa П";
	ИначеЕсли НазваниеБренда = "Palitra" тогда
		НаименованиеДляПоиска = "Палитра";
	ИначеЕсли НазваниеБренда = "PALITRA" тогда
		НаименованиеДляПоиска = "Палитра";
	ИначеЕсли НазваниеБренда = "Prestige Color" тогда
		НаименованиеДляПоиска = "PrestigeColor";
	ИначеЕсли НазваниеБренда = "Trend Color" тогда
		НаименованиеДляПоиска = "TrendColor";
	ИначеЕсли НазваниеБренда = "WallDecor" или НазваниеБренда = "Аспект" тогда     //VOG Ульянов И.В. DEV-101
		НаименованиеДляПоиска = "Аспект";
	ИначеЕсли НазваниеБренда = "VogCollection" тогда
		НаименованиеДляПоиска = "VOG Collection A";
	Иначе	
		НаименованиеДляПоиска = НазваниеБренда;
	КонецЕсли;

	Возврат Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(НаименованиеДляПоиска,Истина);
	
КонецФункции	

Функция ПолучитьТипНоменклатуры(СтрокаТаблицы)
	
	Запрос = Новый Запрос;
	// +++ VOG Кулаков П.Л. 14.04.2021 DEV-397
	// Добавлена погрешность для ширины и длины в 0.05 м
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вогТипыНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.вогТипыНоменклатуры КАК вогТипыНоменклатуры
		|ГДЕ
		|	вогТипыНоменклатуры.Ширина - &Ширина >= -0.05
		|	И вогТипыНоменклатуры.Ширина - &Ширина <= 0.05
		|	И вогТипыНоменклатуры.Длина - &Длина >= -0.05
		|	И вогТипыНоменклатуры.Длина - &Длина <= 0.05
		|	И вогТипыНоменклатуры.Основа = &Основа
		|	И вогТипыНоменклатуры.СпособПроизводства = &СпособПроизводства";
	// --- VOG Кулаков П.Л.
	
	Запрос.УстановитьПараметр("Длина", СтрокаТаблицы.ДлинаРул);
	Запрос.УстановитьПараметр("Основа", СтрокаТаблицы.ОсноваСсылка);
	Запрос.УстановитьПараметр("СпособПроизводства", СтрокаТаблицы.СпособПроизводстваСсылка);
	Запрос.УстановитьПараметр("Ширина", СтрокаТаблицы.ШиринаРул);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.вогТипыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокКомпаньонов(СписокКомпаньонов)
	
	СтрокаКомпаньоны = "";
	
	Если СокрЛП(СписокКомпаньонов.CompanionID) = "СписокXDTO" тогда
		Для каждого Компаньон из СписокКомпаньонов.CompanionID цикл
			СтрокаКомпаньоны = СтрокаКомпаньоны + СокрЛП(Компаньон) + "; ";
		КонецЦикла;
	Иначе	
		Если СокрЛП(СписокКомпаньонов.CompanionID) = "ОбъектXDTO" тогда
			СтрокаКомпаньоны = "";
		Иначе	
			СтрокаКомпаньоны = СтрокаКомпаньоны + СокрЛП(СписокКомпаньонов.CompanionID) + "; ";
		КонецЕсли;	
	КонецЕсли;	
		
	Возврат СтрокаКомпаньоны;
	
КонецФункции

Функция ПолучитьСсылкуНаРеквизит(
								Наименование,
								СправочникПеречисление,
								ТипОбъекта,
								НазваниеРеквизита,
								СистемаДляЗагрузки,
								СоответствиеСоздаваемыхЭлементов = Неопределено) 	// VOG Солодов В.В. 10.06.2021 DEV-415
																					// Добавлен параметр СоответствиеСоздаваемыхЭлементов
	
	Если СправочникПеречисление = "Перечисление" тогда
		Если СокрЛП(Наименование) = "" тогда
			Возврат Перечисления[ТипОбъекта].ПустаяСсылка();
		КонецЕсли;	
		Попытка 
			Результат = Перечисления[ТипОбъекта][СтрЗаменить(Наименование," ","")];
		Исключение
			Результат = ПолучитьСоответствиеИзРегистра(НазваниеРеквизита,Наименование,СистемаДляЗагрузки);
		КонецПопытки;
		Если Результат = Неопределено тогда
			Возврат Перечисления[ТипОбъекта].ПустаяСсылка();
		Иначе
			Возврат Результат;
		КонецЕсли;	
	Иначе
		Если СокрЛП(Наименование) = "" тогда
			Возврат Справочники[ТипОбъекта].ПустаяСсылка();
		КонецЕсли;	
		Результат = Справочники[ТипОбъекта].НайтиПоНаименованию(Наименование);		
		Если Результат = Справочники[ТипОбъекта].ПустаяСсылка() тогда
			Результат = ПолучитьСоответствиеИзРегистра(НазваниеРеквизита,Наименование,СистемаДляЗагрузки);
		КонецЕсли;				
		Если Результат = Неопределено тогда
			// +++ VOG Кулаков П.Л. 15.04.2021 DEV-397
			// VOG Солодов В.В. 10.06.2021 DEV-415
			// Добавлен параметр СоответствиеСоздаваемыхЭлементов
			Возврат СоздатьЭлементСправочника(ТипОбъекта,Наименование, СоответствиеСоздаваемыхЭлементов);
			//Возврат Справочники[ТипОбъекта].ПустаяСсылка();
			// --- VOG Кулаков П.Л.
		Иначе
			Возврат Результат;
		КонецЕсли;				
	КонецЕсли;	
		
КонецФункции	

// +++ VOG Кулаков П.Л. 15.04.2021 DEV-397
Функция СоздатьЭлементСправочника(ИмяСправочника,Наименование, СоответствиеСоздаваемыхЭлементов) 	// VOG Солодов В.В. 10.06.2021 DEV-415
																									// Добавлен параметр СоответствиеСоздаваемыхЭлементов
	
	Если ИмяСправочника = "КоллекцииНоменклатурыПроизводителей" 
			ИЛИ ИмяСправочника = "вогЦеновойСегментФабрики" 
			ИЛИ ИмяСправочника = "вогСтильРисункаПроизводителя" 
			ИЛИ ИмяСправочника = "вогЭлементРисункаПроизводителяОбои" 
			ИЛИ ИмяСправочника = "вогВидыСтруктурыПроизводителяОбои" Тогда 
		НовыйЭлементСправочника = Справочники[ИмяСправочника].СоздатьЭлемент();
		НовыйЭлементСправочника.Наименование = Наименование;
		НовыйЭлементСправочника.Записать();
		ВозвращаемоеЗначение = НовыйЭлементСправочника.Ссылка;
		
		// ++ VOG Солодов В.В. 10.06.2021 DEV-415
		Если ТипЗнч(СоответствиеСоздаваемыхЭлементов) = Тип("Соответствие") Тогда
			
			СозданныеЭлементы = СоответствиеСоздаваемыхЭлементов.Получить(ИмяСправочника);
			
			Если СозданныеЭлементы = Неопределено Тогда
				СозданныеЭлементы = Новый Массив;
			КонецЕсли;
			
			СозданныеЭлементы.Добавить(НовыйЭлементСправочника.Ссылка);
			СоответствиеСоздаваемыхЭлементов.Вставить(ИмяСправочника, СозданныеЭлементы);
			
		КонецЕсли;
		// -- VOG Солодов В.В. 10.06.2021 DEV-415
		
	Иначе
		ВозвращаемоеЗначение = Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции // --- VOG Кулаков П.Л.

// +++ VOG Кулаков П.Л. 16.04.2021 DEV-361
Процедура ОтправитьОтчетОбОшибках(МассивОшибок) Экспорт
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	ТекстСообщения = "Список ошибок по вложении.";
	Сообщение.Тексты.Добавить(ТекстСообщения);
	
	ФайлTXT= Новый ТекстовыйДокумент;
	ИмяФайла = ПолучитьИмяВременногоФайла("TXT");
	Для Каждого Ошибка Из МассивОшибок Цикл
		ФайлTXT.ДобавитьСтроку(Ошибка);
	КонецЦикла;
	
	ФайлTXT.Записать(ИмяФайла);
	Сообщение.Вложения.Добавить(ИмяФайла);
	
	СправочникРассылкаОтчетов = Справочники.РассылкиОтчетов.ПолучитьСсылку(Новый УникальныйИдентификатор("554699b5-9e93-11eb-931c-005056bc3fe8"));
	
	Сообщение.Отправитель = СправочникРассылкаОтчетов.УчетнаяЗапись.АдресЭлектроннойПочты;
	Для Каждого Строка Из СправочникРассылкаОтчетов.Получатели Цикл
		АдресПользователя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Строка.Получатель,Справочники.ВидыКонтактнойИнформации.EmailПользователя,,Истина);
		Сообщение.Получатели.Добавить(АдресПользователя);
	КонецЦикла;
	
	Почта = Новый ИнтернетПочта;
	Попытка
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(СправочникРассылкаОтчетов.УчетнаяЗапись);
		Почта.Подключиться(Профиль);
		Сообщение.Тема = СправочникРассылкаОтчетов.ТемаПисьма;
		Почта.Послать(Сообщение);
		Почта.Отключиться();
	Исключение
		ЗаписьЖурналаРегистрации("РегламентноеЗадание",,,,"Не удалось отправить отчет об ошибках при обновлении номенклатуры. " + ОписаниеОшибки()); 
	КонецПопытки;			
		
	
КонецПроцедуры // --- VOG Кулаков П.Л.

// ++ VOG Солодов В.В. 10.06.2021 DEV-415
Процедура ОтправитьОтчетОСозданныхЭлементах(СоответствиеСоздаваемыхЭлементов) Экспорт
	
	КодОсновногоЯзыка 			= ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ИмяСобытия 					= НСтр("ru = 'Регламентное задание. Обновление номенклатуры палитры'", КодОсновногоЯзыка);
	
	// Параметры записи в журнал регистрации.
	ПараметрыЖурнала 			= Новый Структура("ИмяСобытия, Метаданные, Данные");
	ПараметрыЖурнала.ИмяСобытия = ИмяСобытия;
	ПараметрыЖурнала.Метаданные = Метаданные.РегламентныеЗадания.ОбновлениеНоменклатурыПалитры;
	
	МассивОшибок 				= Новый Массив;
	
	ИдентификаторРассылки 		= Новый УникальныйИдентификатор("dda1e7e1-a1ce-11eb-bad0-005056bcd3e3");
	Рассылка 					= Справочники.РассылкиОтчетов.ПолучитьСсылку(ИдентификаторРассылки);
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Рассылка) Тогда
		ТекстОшибки 			= НСтр("ru = 'Не найдена рассылка отчетов'", КодОсновногоЯзыка);
		МассивОшибок.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если МассивОшибок.Количество() = 0 Тогда
		
		СписокПолучателей = РассылкаОтчетов.СформироватьСписокПолучателейРассылки(ПараметрыЖурнала, Рассылка);
		
		Если ТипЗнч(СписокПолучателей) = Тип("Соответствие") И СписокПолучателей.Количество() > 0 Тогда
			
			// Получатели
			ПолучателиСообщения = Новый Массив;
			Для Каждого КлючИЗначение Из СписокПолучателей Цикл
				
				СтруктураПолучателя = Новый Структура;
				СтруктураПолучателя.Вставить("Адрес", 			КлючИЗначение.Значение);
				СтруктураПолучателя.Вставить("Представление", 	КлючИЗначение.Ключ);
				
				ПолучателиСообщения.Добавить(СтруктураПолучателя);
				
			КонецЦикла;
			
			// Формирование вложений
			Вложения 			= Новый Массив;
			ФайлВложение 		= Новый ТекстовыйДокумент;
			ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла(".txt");
			
			Для Каждого КлючИзначение Из СоответствиеСоздаваемыхЭлементов Цикл
				
				Попытка
					ТипСправочника = ТипЗнч(Справочники[КлючИзначение.Ключ].ПустаяСсылка());
				Исключение
					ТипСправочника = КлючИзначение.Ключ;
				КонецПопытки;
				ФайлВложение.ДобавитьСтроку(СтрШаблон("%1:", ТипСправочника));
				
				Для Каждого СозданныйЭлемент Из КлючИзначение.Значение Цикл
					ФайлВложение.ДобавитьСтроку(Формат(СозданныйЭлемент));
				КонецЦикла;
				
				ФайлВложение.ДобавитьСтроку(Символы.ПС);
				
			КонецЦикла;
			
			ФайлВложение.Записать(ИмяВременногоФайла);
			
			ОписаниеВложения = Новый Структура;
			ОписаниеВложения.Вставить("Представление", НСтр("ru = 'Список новых элементов.txt'", КодОсновногоЯзыка));
			ОписаниеВложения.Вставить("АдресВоВременномХранилище",
				ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый УникальныйИдентификатор));
			ОписаниеВложения.Вставить("Кодировка");
			Вложения.Добавить(ОписаниеВложения);
			
			ТелоПисьма = НСтр("ru = 'Во вложении находится список новых элементов справочников'", КодОсновногоЯзыка);
			
			ПараметрыОтправки = Новый Структура;
			ПараметрыОтправки.Вставить("Тема", 					НСтр("ru = 'Список новых элементов справочников'", КодОсновногоЯзыка));
			ПараметрыОтправки.Вставить("Кому", 					ПолучателиСообщения);
			ПараметрыОтправки.Вставить("Вложения", 				Вложения);
			ПараметрыОтправки.Вставить("Тело", 					ТелоПисьма);
			
			Попытка
				РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Рассылка.УчетнаяЗапись, ПараметрыОтправки);
			Исключение
				МассивОшибок.Добавить(ОписаниеОшибки());
			КонецПопытки;
			
			УдалитьФайлы(ИмяВременногоФайла);
			
		Иначе
			МассивОшибок.Добавить(НСтр("ru = 'Не указаны получатели уведомлений'", КодОсновногоЯзыка));
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ТекстОшибки Из МассивОшибок Цикл
		
		ЗаписьЖурналаРегистрации(
			ПараметрыЖурнала.ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			ПараметрыЖурнала.Метаданные,
			,
			ТекстОшибки);
		
	КонецЦикла;
	
КонецПроцедуры
// -- VOG Солодов В.В. 10.06.2021 DEV-415

Функция ПолучитьСсылкуНаРеквизитДляСписка(СписокНаименований,
										СправочникПеречисление,
										ТипОбъекта,
										НазваниеРеквизита,
										СистемаДляЗагрузки,
										СоответствиеСоздаваемыхЭлементов = Неопределено) 	// VOG Солодов В.В. 10.06.2021 DEV-415
																							// Добавлен параметр СоответствиеСоздаваемыхЭлементов
	
	МассивНаименований = СтрРазделить(СписокНаименований,";");
	
	Для Каждого Наименование из МассивНаименований цикл
	
		Если СправочникПеречисление = "Перечисление" тогда
			Если СокрЛП(Наименование) = "" тогда
				Возврат Перечисления[ТипОбъекта].ПустаяСсылка();
			КонецЕсли;	
			Попытка 
				Результат = Перечисления[ТипОбъекта][Наименование];
			Исключение
				Результат = ПолучитьСоответствиеИзРегистра(НазваниеРеквизита,Наименование,СистемаДляЗагрузки);
			КонецПопытки;
			Если Результат = Неопределено тогда
				Возврат Перечисления[ТипОбъекта].ПустаяСсылка();
			Иначе
				Возврат Результат;
			КонецЕсли;	
		Иначе
			Если СокрЛП(Наименование) = "" тогда
				Возврат Справочники[ТипОбъекта].ПустаяСсылка();
			КонецЕсли;	
			Результат = Справочники[ТипОбъекта].НайтиПоНаименованию(Наименование);		
			Если Результат = Справочники[ТипОбъекта].ПустаяСсылка() тогда
				Результат = ПолучитьСоответствиеИзРегистра(НазваниеРеквизита,Наименование,СистемаДляЗагрузки);
			КонецЕсли;				
			Если Результат = Неопределено тогда
				// +++ VOG Кулаков П.Л. 15.04.2021 DEV-397
				// VOG Солодов В.В. 10.06.2021 DEV-415
				// Добавлен параметр СоответствиеСоздаваемыхЭлементов
				Возврат СоздатьЭлементСправочника(ТипОбъекта,Наименование, СоответствиеСоздаваемыхЭлементов);
				//Возврат Справочники[ТипОбъекта].ПустаяСсылка();
				// --- VOG Кулаков П.Л.
			Иначе
				Возврат Результат;
			КонецЕсли;				
		КонецЕсли;	
		
	КонецЦикла;
	
	Если СправочникПеречисление = "Перечисление" тогда
		Возврат Перечисления[ТипОбъекта].ПустаяСсылка();
	Иначе
		Возврат Справочники[ТипОбъекта].ПустаяСсылка();
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьСоответствиеИзРегистра(НазваниеРеквизита,Наименование,СистемаДляЗагрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствияЗагружаемыхРеквизитов.ЗначениеВНашейСистеме КАК ЗначениеВНашейСистеме
		|ИЗ
		|	РегистрСведений.СоответствияЗагружаемыхРеквизитов КАК СоответствияЗагружаемыхРеквизитов
		|ГДЕ
		|	СоответствияЗагружаемыхРеквизитов.ИмяРеквизитаВФайле = &ИмяРеквизитаВФайле
		|	И СоответствияЗагружаемыхРеквизитов.ЗначениеВФайле = &ЗначениеВФайле
		|	И СоответствияЗагружаемыхРеквизитов.ТегФайла = &ТегФайла";
	
	Запрос.УстановитьПараметр("ЗначениеВФайле", Наименование);
	Запрос.УстановитьПараметр("ИмяРеквизитаВФайле", НазваниеРеквизита);
	Запрос.УстановитьПараметр("ТегФайла", СистемаДляЗагрузки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() тогда
		Возврат Выборка.ЗначениеВНашейСистеме;
	Иначе
		Возврат Неопределено;		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКоллекциюНоменклатурыПроизводителя(НаименованиеКоллекции)
	
	КоллекцияСсылка = Справочники.КоллекцииНоменклатурыПроизводителей.НайтиПоНаименованию(НаименованиеКоллекции, Истина);
	
	Если Не ЗначениеЗаполнено(КоллекцияСсылка) Тогда
		
		КоллекцияОбъект = Справочники.КоллекцииНоменклатурыПроизводителей.СоздатьЭлемент();
		КоллекцияОбъект.Наименование = НаименованиеКоллекции;
		
		КоллекцияОбъект.Записать();
		КоллекцияСсылка = КоллекцияОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат КоллекцияСсылка;
	
КонецФункции

Процедура УдалитьВременныйФайл(ПолноеИмяФайла)
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;            		
	Попытка
		УдалитьФайлы(ПолноеИмяФайла)
	Исключение
	КонецПопытки    	
КонецПроцедуры

Функция ПолучитьНоменклатурнуюПозицию(СтрокаТаблицы)
	
	МассивОшибок = Новый Массив;
	
	НПОбъект = Справочники.вогНоменклатурныеПозиции.СоздатьЭлемент();
	НПОбъект.Наименование = СтрокаТаблицы.НаименованиеBSU;
	НПОбъект.Дизайн = СтрокаТаблицы.Дизайн;
	НПОбъект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои;
	
	Если СтрокаТаблицы.Цвет <> "" и ЗначениеЗаполнено(СтрокаТаблицы.ЦветСсылка) = ложь тогда
		МассивОшибок.Добавить("Артикул "+СтрокаТаблицы.Артикул+" Не найдено соответствие для цвета. (Colors)");
	Иначе
		НПОбъект.Цвет = СтрокаТаблицы.ЦветСсылка;
	КонецЕсли;	
	
	Если МассивОшибок.Количество() = 0 тогда	
		НПОбъект.Записать();
		Возврат НПОбъект.Ссылка;
	Иначе
		Возврат МассивОшибок;
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьДизайн(СтрокаТаблицы)
	
	ДизайнСсылка = НайтиДизайнПоАртикулу(СокрЛП(СтрокаТаблицы.Артикул));
	Если ДизайнСсылка <> Неопределено тогда
		Возврат ДизайнСсылка;
	КонецЕсли;		
	
	МассивОшибок = Новый Массив;
	
	ДизайнОбъект = Справочники.вогДизайныНоменклатуры.СоздатьЭлемент();
	ДизайнОбъект.Наименование = Лев(СтрокаТаблицы.Артикул,СтрНайти(СтрокаТаблицы.Артикул,"-")-1);
	ДизайнОбъект.РаппортОбои = СтрокаТаблицы.Раппорт;
	ДизайнОбъект.СдвигОбои = СтрокаТаблицы.Сдвиг;
	ДизайнОбъект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Обои;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппаСсылка) тогда
		ДизайнОбъект.НоменклатурнаяГруппа = СтрокаТаблицы.НоменклатурнаяГруппаСсылка;
	Иначе
		МассивОшибок.Добавить("Артикул "+СтрокаТаблицы.Артикул+" Не найдена номенклатурная группа");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ТипНоменклатурыСсылка) = ложь тогда
		МассивОшибок.Добавить("Артикул "+СтрокаТаблицы.Артикул+" Не заполнен тип номенклатуры.");
	Иначе
		ДизайнОбъект.ТипНоменклатуры = СтрокаТаблицы.ТипНоменклатурыСсылка;
	КонецЕсли;	
	
	Если СтрокаТаблицы.Бренд <> "" и ЗначениеЗаполнено(СтрокаТаблицы.БрендСсылка) = ложь тогда
		МассивОшибок.Добавить("Артикул "+СтрокаТаблицы.Артикул+" Не найдено соответствие для бренда. (Brend)");
	Иначе
		ДизайнОбъект.Бренд = СтрокаТаблицы.БрендСсылка;
	КонецЕсли;	
	
	Если Не СтрокаТаблицы.СтильРисункаПроизводителя = ""
		И ЗначениеЗаполнено(СтрокаТаблицы.СтильРисункаПроизводителяСсылка) = Ложь Тогда
		МассивОшибок.Добавить("Артикул " + СтрокаТаблицы.Артикул + " Не найдено соответствие для стиля рисунка производителя. (PatternType)");
	Иначе
		ДизайнОбъект.СтильРисункаПроизводителя = СтрокаТаблицы.СтильРисункаПроизводителяСсылка;
	КонецЕсли;
	
	Если СтрокаТаблицы.ВидСтруктуры <> "" и ЗначениеЗаполнено(СтрокаТаблицы.СтруктураОбоиСсылка) = ложь тогда
		МассивОшибок.Добавить("Артикул "+СтрокаТаблицы.Артикул+" Не найдено соответствие для структуры обоев. (Structure)");
	Иначе
		ДизайнОбъект.СтруктураОбои = СтрокаТаблицы.СтруктураОбоиСсылка;
	КонецЕсли;
	
	Если СтрокаТаблицы.ТипРисунка <> "" и ЗначениеЗаполнено(СтрокаТаблицы.ТипРисункаОбоиСсылка) = ложь тогда
		МассивОшибок.Добавить("Артикул "+СтрокаТаблицы.Артикул+" Не найдено соответствие для типа рисунка обоев. (Information)");
	Иначе
		ДизайнОбъект.ТипРисункаОбои = СтрокаТаблицы.ТипРисункаОбоиСсылка;
	КонецЕсли;
	
	Если СтрокаТаблицы.РазмерРисунка <> "" и ЗначениеЗаполнено(СтрокаТаблицы.РазмерРисункаОбоиСсылка) = ложь тогда
		МассивОшибок.Добавить("Артикул "+СтрокаТаблицы.Артикул+" Не найдено соответствие для размера рисунка обоев. (PictureSize)");
	Иначе
		ДизайнОбъект.РазмерРисункаОбои = СтрокаТаблицы.РазмерРисункаОбоиСсылка;
	КонецЕсли;	
	
	// ++ VOG Солодов В.В. 08.09.2021 CRM-1193
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтруктураПроизводителяОбоиСсылка) Тогда
		ДизайнОбъект.ВидСтруктурыПроизводителя = СтрокаТаблицы.СтруктураПроизводителяОбоиСсылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтильРисункаОбоиСсылка) Тогда
		ДизайнОбъект.СтильРисункаОбои = СтрокаТаблицы.СтильРисункаОбоиСсылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ЭлементРисункаСсылка) Тогда
		ДизайнОбъект.ЭлементРисунка = СтрокаТаблицы.ЭлементРисункаСсылка;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаТаблицы.ЭлементРисунка)
		И Не ЗначениеЗаполнено(СтрокаТаблицы.ЭлементРисункаПроизводителяСсылка) Тогда
		
		ШаблонОшибки = НСтр("ru = 'Артикул %1. Не найдено соответствие для элемента рисунка производителя. (PictureElements)'");
		МассивОшибок.Добавить(СтрШаблон(ШаблонОшибки, СтрокаТаблицы.Артикул));
		
	Иначе
		ДизайнОбъект.ЭлементРисункаПроизводителя = СтрокаТаблицы.ЭлементРисункаПроизводителяСсылка;
	КонецЕсли;
	// До изменения
	//Если СтрокаТаблицы.ЭлементРисунка <> "" и ЗначениеЗаполнено(СтрокаТаблицы.ЭлементРисункаСсылка) = ложь тогда
	//	МассивОшибок.Добавить("Артикул "+СтрокаТаблицы.Артикул+" Не найдено соответствие для элемента рисунка обоев. (PictureElements)");
	//Иначе
	//	ДизайнОбъект.ЭлементРисунка = СтрокаТаблицы.ЭлементРисункаСсылка;
	//КонецЕсли;
	// -- VOG Солодов В.В. 08.09.2021 CRM-1193
	
	Если СтрокаТаблицы.Поверхность <> "" и ЗначениеЗаполнено(СтрокаТаблицы.ПоверхностьОбоиСсылка) = ложь тогда
		МассивОшибок.Добавить("Артикул "+СтрокаТаблицы.Артикул+" Не найдено соответствие для поверхности обоев. (Surface)");
	Иначе
		ДизайнОбъект.ПоверхностьОбои = СтрокаТаблицы.ПоверхностьОбоиСсылка;
	КонецЕсли;	
	
	Если МассивОшибок.Количество() = 0 тогда	
		ДизайнОбъект.Записать();
		Возврат ДизайнОбъект.Ссылка;
	Иначе
		Возврат МассивОшибок;
	КонецЕсли;	
	
КонецФункции

#Область СлужебныйПрограммныйИнтерфейс

// ++ VOG Солодов В.В. 31.08.2021 DEV-911
Процедура ЗагрузитьССервераПалитра(ТаблицаЗагрузки, АдресХранилища) Экспорт
	
	НастройкиПодключения 	= Новый Массив;
	
	ОсновныеНастройки 		= Новый Структура;
	ОсновныеНастройки.Вставить("СерверЗагрузки", 			"");
	ОсновныеНастройки.Вставить("ИмяПользователя", 			"");
	ОсновныеНастройки.Вставить("Пароль", 					"");
	ОсновныеНастройки.Вставить("ИмяКаталога", 				"");
	ОсновныеНастройки.Вставить("ИскатьПоследнийКаталог", 	Ложь);
	ОсновныеНастройки.Вставить("ФайлКаталога", 				"");
	ОсновныеНастройки.Вставить("ПутьКПапкеАрхива", 			"");
	ОсновныеНастройки.Вставить("ИмяОсновногоКаталога", 		"");
	
	ЗаполнитьЗначенияСвойств(ОсновныеНастройки, Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.Палитра);
	
	ОсновныеНастройки.ИмяОсновногоКаталога = ОсновныеНастройки.ИмяКаталога;
	
	ИменаКаталогов = Новый Массив;
	ИменаКаталогов.Добавить("ИмяОсновногоКаталога");
	ИменаКаталогов.Добавить("ПутьКПапкеАрхива");
	
	Для Каждого ИмяКаталога Из ИменаКаталогов Цикл
		
		СтруктураНастроек = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОсновныеНастройки);
		СтруктураНастроек.ИмяКаталога = СтруктураНастроек[ИмяКаталога];
		
		НастройкиПодключения.Добавить(СтруктураНастроек);
		
	КонецЦикла;
	
	ТаблицаЗагрузки.Очистить();
	
	Для Каждого СтруктураНастроек Из НастройкиПодключения Цикл
		
		ТЗКаталогов = Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.ПолучитьСписокКаталогов(СтруктураНастроек);
		
		Для Каждого Стр Из ТЗКаталогов Цикл
			
			ИмяФайла = Стр.ИмяФайла;
			
			ЧтениеXML = Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.ПолучитьФайлЗагрузки(СтруктураНастроек, ИмяФайла);
			Обработки.ЗагрузкаНоменклатурыПалитра.ОбработатьФайл(ЧтениеXML, ТаблицаЗагрузки, "Только новые", ИмяФайла);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТЗДляСвертки = ТаблицаЗагрузки.Скопировать();
	
	ТЗДляСвертки.Свернуть("Артикул, ИмяКаталога");
	ТЗДляСвертки.Сортировать("Артикул, ИмяКаталога убыв");
	
	МассивСтрокДляУдаления = Новый Массив();
	
	ТекущийАртикул = "";
	Для Каждого Стр Из ТЗДляСвертки Цикл
		
		Если Стр.Артикул <> ТекущийАртикул Тогда
			ТекущийАртикул = Стр.Артикул;
		Иначе
			
			ПараметрыОтбораСтрок = Новый Структура;
			ПараметрыОтбораСтрок.Вставить("Артикул", 		Стр.Артикул);
			ПараметрыОтбораСтрок.Вставить("ИмяКаталога", 	Стр.ИмяКаталога);
			
			НайденныеСтроки = ТаблицаЗагрузки.НайтиСтроки(ПараметрыОтбораСтрок);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивСтрокДляУдаления.Добавить(НайденнаяСтрока);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивСтрокДляУдаления Цикл
		ТаблицаЗагрузки.Удалить(ЭлементМассива);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьССервераАспект(ТаблицаЗагрузки, АдресХранилища) Экспорт
	
	Настройки = Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.Аспект;
	
	ЧтениеXML = Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.ПолучитьФайлЗагрузки(Настройки);
	Обработки.ЗагрузкаНоменклатурыПалитра.ОбработатьФайлАспект(ЧтениеXML, ТаблицаЗагрузки, "Только новые");

КонецПроцедуры
// -- VOG Солодов В.В. 31.08.2021 DEV-911

#КонецОбласти

#КонецЕсли