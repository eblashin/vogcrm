
// ++ VOG Солодов В.В. 30.08.2021 DEV-911
// Дополнительно к задаче: немного рефакторинг, переработка загрузки на длительные операции

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьССервера(Команда)
	
	СистемаДляЗагрузки = "Палитра";
	ЗаданиеВыполнено = ЗапуститьЗаданиеЗагрузки();
	
	Если ЗаданиеВыполнено Тогда
		ОбработкаРезультатаЗагрузкиКлиент();
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьССервераАспект(Команда)
	
	СистемаДляЗагрузки = "Аспект";
	ЗаданиеВыполнено = ЗапуститьЗаданиеЗагрузки();
	
	Если ЗаданиеВыполнено Тогда
		ОбработкаРезультатаЗагрузкиКлиент();
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = "*.xml";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ВыбФайл = ДиалогОткрытияФайла.ПолноеИмяФайла;
		ДвоичныеДанные = Новый ДвоичныеДанные(ВыбФайл);
		ЗагрузитьДанныеНаСервере(ПоместитьВоВременноеХранилище(ДвоичныеДанные));
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсе(Команда)
	
    Для Каждого СтрокаТаблицыФормы Из Объект.ТаблицаЗагрузки Цикл
        ИдентификаторСтроки= СтрокаТаблицыФормы.ПолучитьИдентификатор();
        Если Элементы.ТаблицаЗагрузки.ПроверитьСтроку(ИдентификаторСтроки) Тогда
            СтрокаТаблицыФормы.Загрузить = Истина;
        КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометку(Команда)
	
	Для Каждого СтрокаТаблицыФормы Из Объект.ТаблицаЗагрузки Цикл
        ИдентификаторСтроки= СтрокаТаблицыФормы.ПолучитьИдентификатор();
        Если Элементы.ТаблицаЗагрузки.ПроверитьСтроку(ИдентификаторСтроки) Тогда
            СтрокаТаблицыФормы.Загрузить = Ложь;
        КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлементы(Команда)
	СоздатьЭлементыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоответствия(Команда)
	ОткрытьФорму("РегистрСведений.СоответствияЗагружаемыхРеквизитов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЧерныйСписокОтмеченные(Команда)
	
	ИсключаемыеАртикулы = Новый Массив;
	
	ПараметрыОтбораСтрок = Новый Структура;
	ПараметрыОтбораСтрок.Вставить("Загрузить", Истина);
	
	НайденныеСтроки = Объект.ТаблицаЗагрузки.НайтиСтроки(ПараметрыОтбораСтрок);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ИсключаемыеАртикулы.Добавить(СокрЛП(НайденнаяСтрока.Артикул));
			НайденнаяСтрока.Загрузить = Ложь;
			НайденнаяСтрока.Исключить = Истина;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Исключить", Ложь);
		
		Элементы.ТаблицаЗагрузки.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
		
		ДобавитьВЧерныйСписокОтмеченныеНаСервере(ИсключаемыеАртикулы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЧерныйСписок(Команда)
	
	ОткрытьФорму("РегистрСведений.ИсключенияИмпортаНоменклатурыПроизводителя.ФормаСписка");
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработкаРезультатаЗагрузкиКлиент();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Возврат;
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал 
		= ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗадания",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьДанныеНаСервере(АдресВременногоХранилища, Расширение = "xml")
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИЗВременногоХранилища(АдресВременногоХранилища);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	УдалитьВременныйФайл(ИмяВременногоФайла);
	
	//ОбработатьФайлАспект(ЧтениеXML);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыНаСервере()
	Обработки.ЗагрузкаНоменклатурыПалитра.СоздатьЭлементы(Объект.ТаблицаЗагрузки, СистемаДляЗагрузки);
КонецПроцедуры

&НаСервере
Функция ЗапуститьЗаданиеЗагрузки()
	
	АдресХранилища 		= ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ЗаданиеВыполнено 	= Ложь;
	
	Объект.ТаблицаЗагрузки.Очистить();
	ТаблицаЗагрузки = Объект.ТаблицаЗагрузки.Выгрузить();
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(СистемаДляЗагрузки);
	ПараметрыВыполнения.Добавить(Объект.ТаблицаЗагрузки.Выгрузить());
	ПараметрыВыполнения.Добавить(АдресХранилища);
	
	НаименованиеЗадания = НСтр("ru = 'Получение номенклатуры с сервера производителя.'");
	
	Задание = ФоновыеЗадания.Выполнить("вогРегламентныеЗадания.ФоноваяЗагрузкаНоменклатурыПроизводителя", 
		ПараметрыВыполнения,, НаименованиеЗадания);
		
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаЗагрузкиКлиент()
	
	РезультатЗагрузки = ОбработкаРезультатаЗагрузкиСервер();
	
	Если Не РезультатЗагрузки.Успешно Тогда
		
		Картинка 		= БиблиотекаКартинок.Ошибка32;
		ТекстПояснения 	= НСтр("ru = 'Не удалось выполнить загрузку номенклатуры.'");
		
		Если Не ПустаяСтрока(РезультатЗагрузки.ОписаниеОшибки) Тогда
			ТекстПояснения = СтрШаблон(НСтр("ru = '%1 По причине %2'"), ТекстПояснения, РезультатЗагрузки.ОписаниеОшибки);
		КонецЕсли;
		
		СтатусОповещения = СтатусОповещенияПользователя.Важное;
		
	Иначе
		Картинка 		= БиблиотекаКартинок.Информация32;
		ТекстПояснения 	= НСтр("ru = 'Загрузка номенклатуры выполнена успешно.'");
		
		СтатусОповещения = СтатусОповещенияПользователя.Информация;
		
	КонецЕсли;
	
	Если СистемаДляЗагрузки = "Палитра" Тогда
		ТекстОповещения = НСтр("ru = 'Загрузка номенклатуры с сервера Палитра'");
	Иначе
		ТекстОповещения = НСтр("ru = 'Загрузка номенклатуры с сервера Аспект'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, Картинка, СтатусОповещения);
	
КонецПроцедуры

&НаСервере
Функция ОбработкаРезультатаЗагрузкиСервер()
	
	РезультатЗагрузки = Новый Структура;
	РезультатЗагрузки.Вставить("Успешно", 			Ложь);
	РезультатЗагрузки.Вставить("ОписаниеОшибки", 	"");
	
	Если Не ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат РезультатЗагрузки;
	КонецЕсли;
	
	ТаблицаЗагрузки = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Не ТипЗнч(ТаблицаЗагрузки) = Тип("ТаблицаЗначений") Тогда
		
		Если ТипЗнч(ТаблицаЗагрузки) = Тип("Строка") Тогда
			РезультатЗагрузки.ОписаниеОшибки = ТаблицаЗагрузки;
		КонецЕсли;
		
		Возврат РезультатЗагрузки;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗагрузки Цикл
		НоваяСтрока = Объект.ТаблицаЗагрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	РезультатЗагрузки.Успешно = Истина;
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	Возврат РезультатЗагрузки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьВЧерныйСписокОтмеченныеНаСервере(ИсключаемыеАртикулы)
	
	Для Каждого Артикул Из ИсключаемыеАртикулы Цикл
		
		НаборЗаписей = РегистрыСведений.ИсключенияИмпортаНоменклатурыПроизводителя.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Артикул.Установить(Артикул);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Артикул = Артикул;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВременныйФайл(ПолноеИмяФайла)
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	Попытка
		УдалитьФайлы(ПолноеИмяФайла)
	Исключение
	КонецПопытки
КонецПроцедуры

#КонецОбласти

#Область СтарыйКод_ДоDEV911

//&НаКлиенте
//Процедура ЗагрузитьССервера(Команда)
//	ЭтаФорма.СистемаДляЗагрузки = "Палитра";
//	ЗагрузитьССервераНаСервере();
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗагрузитьССервераАспект(Команда) //VOG Ульянов И.В. DEV-101
//	ЭтаФорма.СистемаДляЗагрузки = "Аспект";
//	ЗагрузитьССервераАспектНаСервере();
//КонецПроцедуры

//&НаСервере
//Процедура ЗагрузитьССервераНаСервере()
//	
//	ТЗКаталогов = Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.ПолучитьСписокКаталогов(Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.Палитра);
//	
//	ТЗДляСвертки = Объект.ТаблицаЗагрузки.Выгрузить();
//	
//	ТЗДляСвертки.Свернуть("Артикул, ИмяКаталога");
//	ТЗДляСвертки.Сортировать("Артикул, ИмяКаталога убыв");
//	
//	МассивСтрокДляУдаления = Новый Массив();	
//	
//	ТекущийАртикул = "";
//	Для каждого Стр из ТЗДляСвертки цикл
//		Если Стр.Артикул <> ТекущийАртикул тогда
//			ТекущийАртикул = Стр.Артикул;
//		Иначе			
//			НайденныеСтроки = Объект.ТаблицаЗагрузки.НайтиСтроки(Новый Структура("Артикул, ИмяКаталога",Стр.Артикул, Стр.ИмяКаталога));
//			Для каждого НайденнаяСтрока из НайденныеСтроки цикл
//				МассивСтрокДляУдаления.Добавить(НайденнаяСтрока);
//			КонецЦикла;	
//		КонецЕсли;	
//	КонецЦикла;	
//	
//	Для каждого ЭлементМассива из МассивСтрокДляУдаления цикл
//		Объект.ТаблицаЗагрузки.Удалить(ЭлементМассива);
//	КонецЦикла;	
//	
//КонецПроцедуры

//&НаСервере
//Процедура ЗагрузитьССервераАспектНаСервере() //VOG Ульянов И.В. DEV-101
//	
//	ЧтениеXML = Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.ПолучитьФайлЗагрузки(Справочники.НастройкиПодключенияЗагрузкиНоменклатуры.Аспект);
//	Обработки.ЗагрузкаНоменклатурыПалитра.ОбработатьФайлАспект(ЧтениеXML,Объект.ТаблицаЗагрузки,"Только новые");	

//КонецПроцедуры


#КонецОбласти

// -- VOG Солодов В.В. 30.08.2021 DEV-911