
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = Неопределено;
	Если Не Параметры.Свойство("МассивОбъектов", МассивОбъектов) Тогда
		ВызватьИсключение НСтр("ru = 'Обработка не предназначена для непосредственного использования.'");
	КонецЕсли;
	
	Для каждого Ссылка Из МассивОбъектов Цикл
		ТаблицаОбъектов.Добавить().Объект = Ссылка;	
	КонецЦикла; 
	
	Если Параметры.Свойство("ИмяТаблицы", ИмяТаблицы) Тогда
		МетаданныеСпискаОбъектов = Метаданные.НайтиПоПолномуИмени(ИмяТаблицы);	
		Если МетаданныеСпискаОбъектов <> Неопределено Тогда
			Элементы.ТаблицаОбъектовПоВсемОбъект.Заголовок = МетаданныеСпискаОбъектов.Синоним;
			Элементы.ТаблицаОбъектовПоКаждомуОбъектуОбъект.Заголовок = МетаданныеСпискаОбъектов.Синоним;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СтраницыВариантыНастроек.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	ПолучитьПараметрыНастройкиБизнесПроцессов();
	НастроитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	КонтролироватьВыполнениеПриИзменении(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)

	Опопвещение = Новый ОписаниеОповещения("СформироватьЗавершение", ЭтотОбъект);	
	Если ПараметрыНастройкиБизнесПроцессов.Клиенты Тогда
		Если Не ЗначениеЗаполнено(Исполнитель) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не указан исполнитель. '"));
			Возврат;
		
		КонецЕсли;		
		
		ВыполнитьОбработкуОповещения(Опопвещение, КодВозвратаДиалога.Да);	
		
	Иначе	
		ПустыеСтроки = ТаблицаОбъектов.НайтиСтроки(
			Новый Структура("Исполнитель", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка")));		
			
		Если ПустыеСтроки.Количество() = ТаблицаОбъектов.Количество() Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'В списке не указано ни одного исполнителя. '"));
			Возврат;
		
		КонецЕсли;	
			
		Если ПустыеСтроки.Количество() > 0 Тогда
			ПоказатьВопрос(Опопвещение, НСтр("ru = 'Список содержит строки с незаполненным исполнителем. Такие строки будут пропущены. 
	                                          |Продолжить?'"), РежимДиалогаВопрос.ДаНет);		     
			
		Иначе
			ВыполнитьОбработкуОповещения(Опопвещение, КодВозвратаДиалога.Да);	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗавершение(Результат, Контекст) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозварата = СформироватьСервер();
	Если ЗначениеЗаполнено(СтруктураВозварата.ТекстОшибки) Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Формирование поручений...'"),,
			НСтр("ru = 'Не удалось сформировать поручения. '"), БиблиотекаКартинок.Ошибка32);	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураВозварата.ТекстОшибки);
		
	Иначе		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Формирование поручений...'"),,
			НСтр("ru = 'Сформировано '" + СтруктураВозварата.МассивПоручений.Количество() + "' поручений. '"), БиблиотекаКартинок.Информация32);	
			
	КонецЕсли;
	
КонецПроцедуры // СформироватьЗавершение()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура вогНастройкаПриИзменении(Элемент)
	
	ПолучитьПараметрыНастройкиБизнесПроцессов();
	НастроитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗаполнитьИсполнителяТаблицыОбъектов();	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностнаяПозицияПриИзменении(Элемент)
//	ЗаполнитьИсполнителяТаблицыОбъектов();	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбъектовПередУдалением(Элемент, Отказ)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяНачалаПриИзменении(Элемент)
	СкорректироватьДатыЗадачи(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаВремяОкончанияПриИзменении(Элемент)	
	СкорректироватьДатыЗадачи(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВремяИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяИсполненияНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяИсполнения, Элемент,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяИсполненияНачалоВыбораЗавершение(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяИсполнения = ВыбранноеВремя.Значение;		
		СрокИсполнения = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаИсполнения, ВремяИсполнения);
		СкорректироватьДатыЗадачи(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВремяКонтроляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяКонтроляНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяКонтроля, Элемент,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяКонтроляНачалоВыбораЗавершение(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяКонтроля = ВыбранноеВремя.Значение;
		СрокКонтроля = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаКонтроля, ВремяКонтроля);
		СкорректироватьДатыЗадачи(Ложь);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьВыполнениеПриИзменении(Элемент)
	
	Элементы.Контролер.Доступность					= КонтролироватьВыполнение;
	Элементы.СрокКонтроля.Доступность				= КонтролироватьВыполнение;
	Элементы.Контролер.АвтоОтметкаНезаполненного	= КонтролироватьВыполнение;
	Элементы.СрокКонтроля.АвтоОтметкаНезаполненного	= КонтролироватьВыполнение;
	Элементы.ВремяКонтроля.Доступность				= КонтролироватьВыполнение;
	Элементы.ВремяКонтроля.АвтоОтметкаНезаполненного= КонтролироватьВыполнение;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаСервере
Процедура ПолучитьПараметрыНастройкиБизнесПроцессов()
	ПараметрыНастройкиБизнесПроцессов = Справочники.вогНастройкиБизнесПроцессов.ПараметрыНастройки(Настройка);
КонецПроцедуры // ПолучитьПараметрыНастройкиБизнесПроцессов()

&НаСервере
Процедура ЗаполнитьИсполнителяТаблицыОбъектов()
	
	//Для каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
	//	СтрокаОбъекта.Исполнитель = Неопределено;	
	//КонецЦикла;
	//
	//Если ИмяТаблицы = "Справочник.вогТорговыеТочки" Тогда	
	//	Запрос = Новый Запрос;
	//	
	//	Запрос.УстановитьПараметр("ТаблицаОбъектов"	  , ТаблицаОбъектов.Выгрузить());
	//	Запрос.УстановитьПараметр("Организация"		  , Организация);
	//	Запрос.УстановитьПараметр("ДолжностнаяПозиция", ДолжностнаяПозиция);
	//	
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	ТаблицаОбъектов.Объект КАК Объект
	//		|ПОМЕСТИТЬ ТаблицаОбъектов
	//		|ИЗ
	//		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	//		|
	//		|ИНДЕКСИРОВАТЬ ПО
	//		|	Объект
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//		|	МенеджерыТорговыхТочек.ТорговаяТочка,
	//		|	МенеджерыТорговыхТочек.Менеджер
	//		|ИЗ
	//		|	РегистрСведений.вогМенеджерыТорговыхТочек КАК МенеджерыТорговыхТочек
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.вогОрганизации КАК ПользователиОрганизации
	//		|		ПО МенеджерыТорговыхТочек.Менеджер = ПользователиОрганизации.Ссылка
	//		|ГДЕ
	//		|	(МенеджерыТорговыхТочек.ТорговаяТочка, ПользователиОрганизации.Организация, МенеджерыТорговыхТочек.Менеджер.CRM_ДолжностнаяПозиция) В
	//		|			(ВЫБРАТЬ
	//		|				ТаблицаОбъектов.Объект,
	//		|				&Организация,
	//		|				&ДолжностнаяПозиция
	//		|			ИЗ
	//		|				ТаблицаОбъектов КАК ТаблицаОбъектов)";
	//	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		СтрокиОбъекта = ТаблицаОбъектов.НайтиСтроки(Новый Структура("Объект", Выборка.ТорговаяТочка));
	//		Для каждого СтрокаОбъекта Из СтрокиОбъекта Цикл
	//			СтрокаОбъекта.Исполнитель = Выборка.Менеджер;
	//			
	//		КонецЦикла;
	//		
	//	КонецЦикла;
	//			
	//КонецЕсли;
	
КонецПроцедуры // ЗаполнитьИсполнителяТаблицыОбъектов()

&НаСервере
Функция СформироватьСервер()

	Результат = Новый Структура("ТекстОшибки, МассивПоручений", "", Новый Массив);	
	
	Если ПараметрыНастройкиБизнесПроцессов.Клиенты
	  И ПараметрыНастройкиБизнесПроцессов.ВариантЗаполненияДанныхКлиенты = Перечисления.вогВариантыЗаполненияДанныхПроцессов.ПриПостановкеЗадач Тогда
		ПараметрыФормирования = Новый Структура;
		ПараметрыФормирования.Вставить("Дата", ТекущаяДата());
		ПараметрыФормирования.Вставить("ДатаИсполнения", CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаИсполнения, ВремяИсполнения));
		ПараметрыФормирования.Вставить("ДатаКонтроля", CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаКонтроля, ВремяКонтроля));
		ПараметрыФормирования.Вставить("Контролер", Контролер);
		ПараметрыФормирования.Вставить("КонтролироватьВыполнение", КонтролироватьВыполнение);
		
		ПараметрыФормирования.Вставить("Настройка", Настройка);		
		ПараметрыФормирования.Вставить("Организация", Организация);
		ПараметрыФормирования.Вставить("Тема", Наименование);
		ПараметрыФормирования.Вставить("Описание", Наименование);
		ПараметрыФормирования.Вставить("Исполнитель", Исполнитель);
		НачатьТранзакцию();
		
		Попытка
			ПоручениеСсылка = СформироватьПоручение(ПараметрыФормирования);	
			Результат.МассивПоручений.Добавить(ПоручениеСсылка);
			
		Исключение
			Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());	
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
				Возврат Результат;
				
			КонецЕсли; 			
		КонецПопытки;
		
		Для каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
			
			//>>Бей(28.05.2019 11:50:01):#176
						
			МенеджерКлиентовПроцесса = РегистрыСведений.вогОбъектыДляПроцесса.СоздатьМенеджерЗаписи();
			МенеджерКлиентовПроцесса.Процесс = ПоручениеСсылка;
			МенеджерКлиентовПроцесса.Объект = СтрокаОбъекта.Объект;
			//Если ТипЗнч(СтрокаОбъекта.Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			//	МенеджерКлиентовПроцесса.Предмет = СтрокаОбъекта.Объект;
			//Иначе	
			//	МенеджерКлиентовПроцесса.ТорговаяТочка = СтрокаОбъекта.Объект;
			//	МенеджерКлиентовПроцесса.Партнер = СтрокаОбъекта.Объект.Партнер;
			//КонецЕсли;
			
			//<<Бей(28.05.2019 11:50:07):#176
			
			МенеджерКлиентовПроцесса.Записать();
			
		КонецЦикла;
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
			
		КонецЕсли; 
		
	Иначе
		
		НачатьТранзакцию();
		
		ПараметрыФормирования = Новый Структура;
		ПараметрыФормирования.Вставить("Дата", ТекущаяДата());
		ПараметрыФормирования.Вставить("ДатаИсполнения", CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаИсполнения, ВремяИсполнения));
		ПараметрыФормирования.Вставить("ДатаКонтроля", CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаКонтроля, ВремяКонтроля));
		ПараметрыФормирования.Вставить("Контролер", Контролер);
		ПараметрыФормирования.Вставить("КонтролироватьВыполнение", КонтролироватьВыполнение);
		
		ПараметрыФормирования.Вставить("Настройка", Настройка);		
		ПараметрыФормирования.Вставить("Организация", Организация);
		ПараметрыФормирования.Вставить("Тема", Наименование);
		ПараметрыФормирования.Вставить("Описание", Наименование);
			
		Для каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
			ПараметрыФормирования.Вставить("ТорговаяТочка", СтрокаОбъекта.Объект);
			ПараметрыФормирования.Вставить("Исполнитель", СтрокаОбъекта.Исполнитель);
						
			Попытка
				ПоручениеСсылка = СформироватьПоручение(ПараметрыФормирования);	
				Результат.МассивПоручений.Добавить(ПоручениеСсылка);
				
			Исключение
				Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());	
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
					Возврат Результат;
					
				КонецЕсли; 			
			КонецПопытки;
			
		КонецЦикла;
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
			
		КонецЕсли; 
		
	КонецЕсли;

	Возврат Результат;
		
КонецФункции // СформироватьСервер()

&НаСервереБезКонтекста
Функция СформироватьПоручение(Параметры)

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ТекСекунды = Параметры.Дата - НачалоДня(Параметры.Дата);
	
	НовыйБизнесПроцесс = БизнесПроцессы.CRM_БизнесПроцесс.СоздатьБизнесПроцесс();
	НовыйБизнесПроцесс.Заполнить(Справочники.CRM_КартыМаршрутов.Поручение);
	
	НовыйБизнесПроцесс.Дата						= Параметры.Дата;
	НовыйБизнесПроцесс.ДатаСтарта				= Параметры.Дата;
	НовыйБизнесПроцесс.Важность					= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	НовыйБизнесПроцесс.Автор					= ТекущийПользователь;
	НовыйБизнесПроцесс.Ответственный			= ТекущийПользователь;
	НовыйБизнесПроцесс.Организация				= Параметры.Организация;
	НовыйБизнесПроцесс.вогНастройка				= Параметры.Настройка;
	
	Если Параметры.Свойство("ТорговаяТочка") Тогда
		НовыйБизнесПроцесс.Партнер = Параметры.ТорговаяТочка.Партнер;
		НовыйБизнесПроцесс.вогТорговаяТочка = Параметры.ТорговаяТочка;
	КонецЕсли;
	
	НовыйБизнесПроцесс.Наименование = Параметры.Тема;
	НовыйБизнесПроцесс.Описание     = Параметры.Описание;
	
	НовыйБизнесПроцесс.Записать();
	
	НаборЭтапов = РегистрыСведений.CRM_НастройкиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЭтапов.Отбор.Объект.Установить(НовыйБизнесПроцесс.Ссылка);
	НаборЭтапов.Прочитать();
	
	НаборИсполнителей = РегистрыСведений.CRM_ИсполнителиЭтаповБизнесПроцессов.СоздатьНаборЗаписей();
	НаборИсполнителей.Отбор.Объект.Установить(НовыйБизнесПроцесс.Ссылка);
	НаборИсполнителей.Прочитать();
	
	Для Каждого СтрокаНабора Из НаборИсполнителей Цикл
		Если СтрокаНабора.ТочкаМаршрута = НаборЭтапов[0].ТочкаМаршрута Тогда		// точка действия "Выполнить"
			СтрокаНабора.Исполнитель = Параметры.Исполнитель;
			НаборЭтапов[0].ДатаВыполнения = Параметры.ДатаИсполнения + ТекСекунды;
			НаборЭтапов[0].ВариантВыполнения = 1;
			НаборЭтапов[0].ВариантВыполненияСтрокой = CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(НаборЭтапов[0].ТочкаМаршрута, НаборЭтапов[0].ВариантВыполнения, НовыйБизнесПроцесс.НомерВерсииКартыМаршрута);
		ИначеЕсли СтрокаНабора.ТочкаМаршрута = НаборЭтапов[1].ТочкаМаршрута Тогда	// точка действия "Проверить"
			НаборЭтапов[1].ДатаВыполнения = Параметры.ДатаКонтроля + ТекСекунды;
			НаборЭтапов[1].Используется	= Параметры.КонтролироватьВыполнение;
			СтрокаНабора.Исполнитель = ?(ЗначениеЗаполнено(Параметры.Контролер), Параметры.Контролер, ТекущийПользователь);
		КонецЕсли;
	КонецЦикла;
	
	НаборЭтапов.Записать();
	НаборИсполнителей.Записать();
	НовыйБизнесПроцесс.Старт();
	
	Возврат НовыйБизнесПроцесс.Ссылка; 

КонецФункции // СформироватьПоручение()

&НаСервере
Процедура СкорректироватьДатыЗадачи(ПриоритетДатыНачала)
	
	Если ДатаИсполнения > ДатаКонтроля Тогда
		Если ПриоритетДатыНачала Тогда
			ДатаКонтроля = ДатаИсполнения;
		Иначе
			ДатаИсполнения = ДатаКонтроля;
		КонецЕсли;
	КонецЕсли;
	Если НачалоДня(ДатаИсполнения) = НачалоДня(ДатаКонтроля) И ВремяИсполнения > ВремяКонтроля Тогда
		Если ПриоритетДатыНачала Тогда
			ВремяКонтроля = ВремяИсполнения;
		Иначе
			ВремяИсполнения = ВремяКонтроля;
		КонецЕсли;
	КонецЕсли;
	
	СрокИсполнения	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаИсполнения, ВремяИсполнения);
	СрокКонтроля	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаКонтроля, ВремяКонтроля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	Элементы = Форма.Элементы;
	
	ПараметрыНастройкиБизнесПроцессов = Форма.ПараметрыНастройкиБизнесПроцессов;
	Если ЗначениеЗаполнено(Форма.Настройка) Тогда
		Если ПараметрыНастройкиБизнесПроцессов.Клиенты Тогда
			Элементы.СтраницыВариантыНастроек.ТекущаяСтраница = Элементы.СтраницаПоВсемОбъектам;	
			
		Иначе 		
			Элементы.СтраницыВариантыНастроек.ТекущаяСтраница = Элементы.СтраницаПоКаждомуОбъекту;	
			
		КонецЕсли;
		
	Иначе	
		Элементы.СтраницыВариантыНастроек.ТекущаяСтраница = Элементы.СтраницаПусто;	
		
	КонецЕсли;
			
КонецПроцедуры // НастроитьЭлементыФормы()	

#КонецОбласти
