
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УведомлятьПользователей = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Загрузка из Excel";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ИндексФильтра = 0;
	Диалог.Фильтр = "Лист Excel (*.xlsx)|*.xlsx";
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Диалог", Диалог);
	
	Диалог.Показать(Новый ОписаниеОповещения("ФайлЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, ПараметрыОповещения));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ВыбранныеФайлы = Неопределено
		Или ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФайлЗагрузки = ВыбранныеФайлы[0];
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТаблицаДокументов

&НаКлиенте
Процедура ТаблицаДокументовВыборПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИдентификаторДокумента", ТекущиеДанные.ИдентификаторДокумента);
	
	Если ТекущиеДанные.Выбор Тогда
		
		НайденныеСтроки = ТаблицаКлиентов.НайтиСтроки(СтруктураОтбора);
		
		Для Индекс = 0 По НайденныеСтроки.Количество() - 1 Цикл
			НоваяСтрока = ТаблицаСегментов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[Индекс]);
		КонецЦикла;
		
	Иначе
		
		НайденныеСтроки = ТаблицаСегментов.НайтиСтроки(СтруктураОтбора);
		
		Для Индекс = 0 По НайденныеСтроки.Количество() - 1 Цикл
			
			ИндексСтроки = ТаблицаСегментов.Индекс(НайденныеСтроки[Индекс]);
			ТаблицаСегментов.Удалить(ИндексСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьДокументы(Команда)
	
	ТаблицаДокументов.Очистить();
	ТаблицаКлиентов.Очистить();
	ТаблицаСегментов.Очистить();
	
	Если Не ЗначениеЗаполнено(ПериодДокументов) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнен период'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ПериодДокументов");
		
		Возврат;
		
	КонецЕсли;
	
	ЗаданиеВыполнено = ВыполнитьОбменНаСервере(УникальныйИдентификатор, ИдентификаторЗадания, АдресХранилища, ПериодДокументов);
	
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ЗаданиеВыполнено Тогда
		ОбработкаРезультатаЗагрузкиКлиент();
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ТекстСообщения = НСтр("ru = 'Выполняется получение документов из учетной системы.'");
	
	ПараметрыФормыОжидания = Новый Структура;
	ПараметрыФормыОжидания.Вставить("ИдентификаторЗадания", ИдентификаторЗадания);
	ПараметрыФормыОжидания.Вставить("ТекстСообщения", 		ТекстСообщения);
	
	ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", ПараметрыФормыОжидания, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАнкеты(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Выбор", Истина);
	
	НайденныеСтроки = ТаблицаСегментов.НайтиСтроки(СтруктураОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбраны клиенты для присвоения кредитного лимита.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ТаблицаСегментов");
		
		Возврат;
		
	КонецЕсли;
	
	СоздатьАнкетыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсе(Команда)
	
	Для Каждого СтрокаТЧ Из ТаблицаСегментов Цикл
		СтрокаТЧ.Выбор = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для Каждого СтрокаТЧ Из ТаблицаСегментов Цикл
		СтрокаТЧ.Выбор = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбработкаРезультатаЗагрузкиКлиент();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Возврат;
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал 
		= ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗадания",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаИзУС

&НаСервереБезКонтекста
Функция ВыполнитьОбменНаСервере(УникальныйИдентификатор, ИдентификаторЗадания, АдресХранилища, Период)
	
	АдресХранилища 		= ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ЗаданиеВыполнено 	= Ложь;
	
	НастройкаОбмена = Новый Структура;
	НастройкаОбмена.Вставить("Наименование", 				"Присвоение кредитного лимита клиенту");
	НастройкаОбмена.Вставить("ОбработчикВходящихДанных", 	СформироватьОбработчикВходящихДанных());
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(НастройкаОбмена);
	ПараметрыВыполнения.Добавить(СформироватьИсходящиеДанные(Период));
	ПараметрыВыполнения.Добавить(АдресХранилища);
	
	НаименованиеЗадания = НСтр("ru = 'Присвоение кредитного лимита клиенту.'");
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4000;
	Иначе
		ВремяОжидания = 2000;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить("вогИнтеграцияСУчетнойСистемой.УниверсальныйОбменДаннымиСУчетнойСистемой", 
		ПараметрыВыполнения,, НаименованиеЗадания);
		
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	Если ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
	КонецЕсли;
		
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьИсходящиеДанные(Период)
	
	ИсходящиеДанные = Новый Структура;
	ИсходящиеДанные.Вставить("ДанныеЗагрузки", 		"");
	ИсходящиеДанные.Вставить("ОбработчикВыгрузки", 	СформироватьОбработчикВыгрузки());
	ИсходящиеДанные.Вставить("ОбработчикЗагрузки", 	"");
	ИсходящиеДанные.Вставить("ТекстЗапроса", 		СформироватьТекстЗапросаВыгрузки());
	ИсходящиеДанные.Вставить("Период", 				Период);
	
	Возврат ИсходящиеДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьОбработчикВыгрузки()
	
	ОбработчикВыгрузки = "
	|МассивДанных = Новый Массив;
	|
	|УстановитьПривилегированныйРежим(Истина);
	|
	|Запрос = Новый Запрос;
	|Запрос.Текст = ВходящиеДанные.ТекстЗапроса;
	|Запрос.УстановитьПараметр(""ДатаНачала"", 		ВходящиеДанные.Период.ДатаНачала);
	|Запрос.УстановитьПараметр(""ДатаОкончания"", 	ВходящиеДанные.Период.ДатаОкончания);
	|Запрос.УстановитьПараметр(""ВидОперации"", 	Перечисления.ВидыОперацийУстановкаСегментаКонтрагента.УстановкаСегментаКонтрагента);
	|
	|РезультатЗапроса = Запрос.Выполнить();
	|
	|ВыборкаДокументСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	|
	|
	|Пока ВыборкаДокументСсылка.Следующий() Цикл
	|	
	|	СтруктураДокумента = Новый Структура;
	|	СтруктураДокумента.Вставить(""Документ"", 				ВыборкаДокументСсылка.Документ);
	|	СтруктураДокумента.Вставить(""ИдентификаторДокумента"", XMLСтрока(ВыборкаДокументСсылка.ДокументСсылка));
	|	
	|	МассивСегментов = Новый Массив;
	|	
	|	ВыборкаДетальныеЗаписи = ВыборкаДокументСсылка.Выбрать();
	|	
	|	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	|		
	|		СтруктураСегмента = Новый Структура;
	|		СтруктураСегмента.Вставить(""Клиент"", 			XMLСтрока(ВыборкаДетальныеЗаписи.Клиент));
	|		СтруктураСегмента.Вставить(""СегментКлиента"", 	ВыборкаДетальныеЗаписи.СегментКлиента.Наименование);
	|		
	|		МассивСегментов.Добавить(СтруктураСегмента);
	|		
	|	КонецЦикла;
	|	
	|	СтруктураДокумента.Вставить(""Сегменты"", МассивСегментов);
	|	
	|	МассивДанных.Добавить(СтруктураДокумента);
	|	
	|КонецЦикла;
	|
	|ИсходящиеДанные.Вставить(""МассивДанных"", 	МассивДанных);
	|Результат.Вставить(""ВыполненоУспешно"", 		Истина);";
	
	Возврат ОбработчикВыгрузки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьТекстЗапросаВыгрузки()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	УстановкаСегментаКонтрагента.Ссылка КАК ДокументСсылка,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(УстановкаСегментаКонтрагента.Ссылка) КАК Документ,
	|	УстановкаСегментаКонтрагента.ГруппаДляХолдинга КАК Клиент,
	|	УстановкаСегментаКонтрагента.СегментКлиента
	|ИЗ
	|	Документ.УстановкаСегментаКонтрагента.УстановкаСегментаКонтрагента КАК УстановкаСегментаКонтрагента
	|ГДЕ
	|	УстановкаСегментаКонтрагента.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И УстановкаСегментаКонтрагента.Ссылка.ВидОперации = &ВидОперации
	|	И УстановкаСегментаКонтрагента.Ссылка.Проведен = ИСТИНА
	|ИТОГИ ПО
	|	ДокументСсылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьОбработчикВходящихДанных()
	
	ОбработчикВходящихДанных = "
	|
	|МассивДанных = ВходящиеДанные.Получить(""МассивДанных"");
	|
	|Если Не ТипЗнч(МассивДанных) = Тип(""Массив"") Тогда
	|	
	|	РезультатВыполнения.ТекстПояснения = НСтр(""ru = 'Неверный формат входящих данных.'"");
	|	РезультатВыполнения.Успешно = Ложь;
	|	
	|Иначе
	|	
	|	МассивОбъектов = Новый Массив;
	|
	|	КлассификаторУИД 		= Новый УникальныйИдентификатор(""67fd301d-3819-11e8-8ad0-005056bcf152"");
	|	Классификатор 			= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(КлассификаторУИД);
	|	
	|	Для Индекс = 0 По МассивДанных.Количество() - 1 Цикл
	|		
	|		СтруктураДокумента = Новый Структура;
	|		СтруктураДокумента.Вставить(""Документ"", 				МассивДанных[Индекс].Документ);
	|		СтруктураДокумента.Вставить(""ИдентификаторДокумента"", МассивДанных[Индекс].ИдентификаторДокумента);
	|		
	|		Сегменты 		= МассивДанных[Индекс].Сегменты;
	|		МассивСегментов = Новый Массив;
	|		
	|		Для ИндексСегмента = 0 По Сегменты.Количество() - 1 Цикл
	|			
	|			КлиентУИД = Новый УникальныйИдентификатор(Сегменты[ИндексСегмента].Клиент);
	|			КлиентСсылка = Справочники.Партнеры.ПолучитьСсылку(КлиентУИД);
	|			
	|			СегментСсылка = Справочники.CRM_ЗначенияКлассификаторов.НайтиПоНаименованию(
	|				Сегменты[ИндексСегмента].СегментКлиента,
	|				Истина,
	|				,
	|				Классификатор);
	|			
	|			Если Не ОбщегоНазначения.СсылкаСуществует(КлиентСсылка)
	|				Или СегментСсылка = Справочники.CRM_ЗначенияКлассификаторов.ПустаяСсылка() Тогда
	|				
	|				Продолжить;
	|				
	|			КонецЕсли;
	|			
	|			СтруктураСегмента = Новый Структура;
	|			СтруктураСегмента.Вставить(""Клиент"", 			КлиентСсылка);
	|			СтруктураСегмента.Вставить(""СегментКлиента"", 	СегментСсылка);
	|			
	|			МассивСегментов.Добавить(СтруктураСегмента);
	|			
	|		КонецЦикла;
	|		
	|		СтруктураДокумента.Вставить(""Сегменты"", МассивСегментов);
	|		
	|		МассивОбъектов.Добавить(СтруктураДокумента);
	|		
	|	КонецЦикла;
	|	
	|	РезультатВыполнения.Вставить(""МассивДанных"", МассивОбъектов);
	|	РезультатВыполнения.Успешно = Истина;
	|	
	|КонецЕсли;";
		
	Возврат ОбработчикВходящихДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) 
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаЗагрузкиКлиент()

	РезультатСинхронизации = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(РезультатСинхронизации) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатСинхронизации.Свойство("МассивДанных") Тогда
		ОбработатьВходящиеДанные(РезультатСинхронизации.МассивДанных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатСинхронизации.ТекстПояснения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатСинхронизации.ТекстПояснения);
	КонецЕсли;
	
	Если Не РезультатСинхронизации.Успешно Тогда
		Картинка 		= БиблиотекаКартинок.Ошибка32;
		ТекстПояснения 	= НСтр("ru = 'Не удалось выполнить получение кредитных лимитов.'");
	Иначе	
		Картинка 		= БиблиотекаКартинок.Информация32;
		ТекстПояснения 	= НСтр("ru = 'Получение кредитных лимитов выполнено успешно.'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Получение кредитных лимитов из учетной системы.'"),
		,
		ТекстПояснения,
		Картинка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВходящиеДанные(МассивДанных)
	
	Если Не ТипЗнч(МассивДанных) = Тип("Массив") Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка получения данных.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ЭлементСтруктура Из МассивДанных Цикл
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		
		Для Индекс = 0 По ЭлементСтруктура.Сегменты.Количество() - 1 Цикл
			
			СтрокаКлиент = ТаблицаКлиентов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКлиент, ЭлементСтруктура.Сегменты[Индекс]);
			СтрокаКлиент.ИдентификаторДокумента = ЭлементСтруктура.ИдентификаторДокумента;
			
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементСтруктура);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеАнкет

&НаСервере
Процедура СоздатьАнкетыНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Вариант опроса "Присвоение кредитного лимита клиенту"
	НовыйВариантОпросаУИД 	= Новый УникальныйИдентификатор("67d0adce-1675-11ea-8d81-005056bc3fe8");
	НовыйВариантОпроса 		= ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(НовыйВариантОпросаУИД);
	
	// Вариант опроса "Кредитные условия клиента"
	ВариантОпросаУИД 		= Новый УникальныйИдентификатор("4555e063-d057-11e8-a684-005056bc3fe8");
	ВариантОпроса 			= ПланыВидовХарактеристик.вогВариантыОпросов.ПолучитьСсылку(ВариантОпросаУИД);
	
	// Классификатор "Сегмент клиента"
	КлассификаторУИД 		= Новый УникальныйИдентификатор("67fd301d-3819-11e8-8ad0-005056bcf152");
	Классификатор 			= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(КлассификаторУИД);
	ХранитьИсториюИзменения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Классификатор, "ХранитьИсториюИзменения");
	
	Если Не ОбщегоНазначения.СсылкаСуществует(НовыйВариантОпроса)
		Или Не ОбщегоНазначения.СсылкаСуществует(ВариантОпроса)
		Или Не ОбщегоНазначения.СсылкаСуществует(Классификатор) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не найдены варианты опроса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат
		
	КонецЕсли;
	
	// Классификатор "Категория по дисциплине платежа"
	КлассификаторКатегорияПоДисциплинеПлатежаУИД = Новый УникальныйИдентификатор("ac0357ff-3819-11e8-8ad0-005056bcf152");
	КлассификаторКатегорияПоДисциплинеПлатежа 		
		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(КлассификаторКатегорияПоДисциплинеПлатежаУИД);
	
	// Классификатор "Категория по объему продаж"
	КлассификаторКатегорияПоОбъемуПродажУИД = Новый УникальныйИдентификатор("c1354d23-3819-11e8-8ad0-005056bcf152");
	КлассификаторКатегорияПоОбъемуПродаж 
		= ПланыВидовХарактеристик.CRM_Классификаторы.ПолучитьСсылку(КлассификаторКатегорияПоОбъемуПродажУИД);
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.вогШаблоныСтатусов.Зарегистрирован);
	МассивСтатусов.Добавить(Справочники.вогШаблоныСтатусов.НаСогласовании);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСегментов.Клиент КАК Клиент,
	|	ТаблицаСегментов.СегментКлиента КАК СегментКлиента,
	|	ТаблицаСегментов.Выбор КАК Выбран
	|ПОМЕСТИТЬ ТаблицаСегментов
	|ИЗ
	|	&ТаблицаСегментов КАК ТаблицаСегментов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСегментов.Клиент КАК Клиент,
	|	ТаблицаСегментов.СегментКлиента КАК СегментКлиента
	|ПОМЕСТИТЬ ВТ_СегментыКлиентов
	|ИЗ
	|	ТаблицаСегментов КАК ТаблицаСегментов
	|ГДЕ
	|	ТаблицаСегментов.Выбран = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СегментыКлиентов.Клиент КАК Клиент,
	|	ВТ_СегментыКлиентов.СегментКлиента КАК СегментКлиента,
	|	вогАнкета.Ссылка КАК Ссылка,
	|	вогАнкета.Автор КАК Автор
	|ПОМЕСТИТЬ ВТ_Анкеты
	|ИЗ
	|	ВТ_СегментыКлиентов КАК ВТ_СегментыКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.вогАнкета КАК вогАнкета
	|		ПО ВТ_СегментыКлиентов.Клиент = вогАнкета.Респондент
	|			И (вогАнкета.ВариантОпроса = &ВариантОпроса)
	|			И (вогАнкета.Статус В (&МассивСтатусов))
	|			И (вогАнкета.ПометкаУдаления = ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Анкеты.Клиент КАК Клиент,
	|	ВТ_Анкеты.СегментКлиента КАК СегментКлиента,
	|	ВТ_Анкеты.Ссылка КАК АнкетаСсылка,
	|	CRM_БизнесПроцесс.Ссылка КАК БПСсылка,
	|	CRM_БизнесПроцесс.КартаМаршрута КАК КартаМаршрута,
	|	CRM_БизнесПроцесс.Завершен КАК БПЗавершен,
	|	ЗадачаИсполнителя.Ссылка КАК ЗадачаСсылка,
	|	ЗадачаИсполнителя.Выполнена КАК ЗадачаВыполнена,
	|	ЗадачаИсполнителя.CRM_ТочкаМаршрута КАК ТочкаМаршрута,
	|	ВТ_Анкеты.Автор КАК Автор
	|ИЗ
	|	ВТ_Анкеты КАК ВТ_Анкеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
	|		ПО ВТ_Анкеты.Ссылка = CRM_БизнесПроцесс.вогАнкета
	|			И (CRM_БизнесПроцесс.Завершен = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ПО (CRM_БизнесПроцесс.Ссылка = ЗадачаИсполнителя.БизнесПроцесс)
	|			И (ЗадачаИсполнителя.Выполнена = ЛОЖЬ)
	|ИТОГИ
	|	МАКСИМУМ(СегментКлиента)
	|ПО
	|	Клиент";
	
	Запрос.УстановитьПараметр("ТаблицаСегментов", 	ТаблицаСегментов.Выгрузить());
	Запрос.УстановитьПараметр("ВариантОпроса", 		ВариантОпроса);
	Запрос.УстановитьПараметр("МассивСтатусов", 	МассивСтатусов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКлиент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКлиент.Следующий() Цикл 
		
		МассивАнкет = Новый Массив;
		
		// Формирование новых анкет
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ВариантОпроса", 	НовыйВариантОпроса);
		ДанныеЗаполнения.Вставить("Респондент", 	ВыборкаКлиент.Клиент);
		ДанныеЗаполнения.Вставить("Сегмент", 		ВыборкаКлиент.СегментКлиента);
		
		ДокументАнкета 			= Документы.вогАнкета.СоздатьДокумент();
		ДокументАнкета.Дата 	= ТекущаяДата();
		ДокументАнкета.Статус 	= Справочники.вогШаблоныСтатусов.Согласован;
		ДокументАнкета.Заполнить(ДанныеЗаполнения);
		
		ДокументАнкета.ДополнительныеСвойства.Вставить("Проводить", Истина);
		
		// Запись классификаторов
		вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(ВыборкаКлиент.Клиент, ВыборкаКлиент.СегментКлиента);
		
		КатегорияПоОбъемуПродаж = Справочники.CRM_ЗначенияКлассификаторов.НайтиПоНаименованию(
			Лев(ВыборкаКлиент.СегментКлиента.Наименование, 1),
			Истина,
			,
			КлассификаторКатегорияПоОбъемуПродаж);
			
		вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(ВыборкаКлиент.Клиент, КатегорияПоОбъемуПродаж);
		
		КатегорияПоДисциплинеПлатежа = Справочники.CRM_ЗначенияКлассификаторов.НайтиПоНаименованию(
			Прав(ВыборкаКлиент.СегментКлиента.Наименование, 1),
			Истина,
			,
			КлассификаторКатегорияПоДисциплинеПлатежа);
			
		вогОбщегоНазначенияВызовСервера.ЗаписатьЗначениеКлассификатора(ВыборкаКлиент.Клиент, КатегорияПоДисциплинеПлатежа);
		
		// Отмена текущих анкет
		Выборка = ВыборкаКлиент.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.АнкетаСсылка) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтмены = Новый Структура;
			СтруктураОтмены.Вставить("Анкета", 			Выборка.АнкетаСсылка);
			СтруктураОтмены.Вставить("Задача", 			Выборка.ЗадачаСсылка);
			СтруктураОтмены.Вставить("ТочкаМаршрута", 	Выборка.ТочкаМаршрута);
			
			МассивАнкет.Добавить(СтруктураОтмены);
			
		КонецЦикла;
		
		НачатьТранзакцию();
		
		Попытка
			
			Для Каждого СтруктураОтмены Из МассивАнкет Цикл
				
				// Отмена анкеты
				АнкетаОбъект = СтруктураОтмены.Анкета.ПолучитьОбъект();
				АнкетаОбъект.Статус = Справочники.вогШаблоныСтатусов.НеСогласован;
				АнкетаОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				// Отмена бизнес-процесса
				Если ЗначениеЗаполнено(СтруктураОтмены.Задача) Тогда
					
					// Досрочное завершение бизнес-процесса
					ПараметрыЗавершенияБизнесПроцесса = Новый Структура;
					ПараметрыЗавершенияБизнесПроцесса.Вставить("Задача", 					СтруктураОтмены.Задача);
					ПараметрыЗавершенияБизнесПроцесса.Вставить("ЗавершенДосрочно", 			Истина);
					ПараметрыЗавершенияБизнесПроцесса.Вставить("ЭтапДосрочногоЗавершения", 	СтруктураОтмены.ТочкаМаршрута);
					ПараметрыЗавершенияБизнесПроцесса.Вставить(
						"ВариантЗавершения", Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
					ПараметрыЗавершенияБизнесПроцесса.Вставить(
						"ПричинаДосрочногоЗавершения", Справочники.CRM_ПричиныОтказов.ПустаяСсылка());
					
					CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(ПараметрыЗавершенияБизнесПроцесса);
					
				КонецЕсли;
				
				Если УведомлятьПользователей Тогда
					ДобавитьНапоминаниеПользователю(СтруктураОтмены.Анкета);
				КонецЕсли;
				
			КонецЦикла;
			
			ДокументАнкета.Записать(РежимЗаписиДокумента.Проведение);
			
			ЗафиксироватьТранзакцию();
			
			ШаблонСообщения = НСтр("ru = 'Для клиента %1 создана анкета %2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ВыборкаКлиент.Клиент,
				ДокументАнкета.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		Исключение
			
			ТекстСообщения = ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОтменитьТранзакцию();
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНапоминаниеПользователю(Анкета)
	
	Автор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Анкета, "Автор");
	
	Если Не ЗначениеЗаполнено(Автор) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Автор, "ИдентификаторПользователяИБ");
	
	Если Не ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Анкета отклонена, т.к. был изменен сегмент клиента, в соответствии с кредитной политикой компании. Обратитесь в фин.отдел.'");
	
	КлючОбсуждения 				= вогСистемаВзаимодействийСервер.СоздатьНовоеОбсуждениеПоОбъекту(Анкета);
	ИдентификаторПользователя 	= СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ИдентификаторПользователяИБ);
	
	ОбъектСообщение = СистемаВзаимодействия.СоздатьСообщение(КлючОбсуждения);
	ОбъектСообщение.Текст = ТекстСообщения;
	ОбъектСообщение.Получатели.Добавить(ИдентификаторПользователя);
	ОбъектСообщение.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

