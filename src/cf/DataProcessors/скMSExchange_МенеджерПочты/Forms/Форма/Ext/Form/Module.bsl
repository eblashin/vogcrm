
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

&НаКлиенте
Перем КэшСвойстваДинамическогоСписка;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ КЛИЕНТ

&НаКлиенте
Функция ПолучитьСвойстваДинамическогоСпискаКлиент()
	Если ТипЗнч(КэшСвойстваДинамическогоСписка) <> Тип("Структура") Тогда
		КэшСвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСервер();
	КонецЕсли;
	Возврат КэшСвойстваДинамическогоСписка;
КонецФункции

&НаКлиенте
Процедура УстановитьСвойсваЭлементовФормы()
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		Элементы.СписокПисемПометитьВсеКакПрочитанное.Доступность = (НЕ ТекущиеДанные.НепрочитанныхПисем = 0);
	Иначе
		Элементы.СписокПисемПометитьВсеКакПрочитанное.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияСписокПисемПриАктивизацииСтроки()
	Если Элементы.СписокПисем.ТекущаяСтрока = Неопределено Или ТипЗнч(Элементы.СписокПисем.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ОписаниеПисьма = СформироватьПустоеОписание();
		ТекущееПисьмо = Неопределено;
		
		Попытка		СтрОтправитель = Элементы.СписокПисем.ТекущиеДанные.Отправитель;
		Исключение	СтрОтправитель = "";
		КонецПопытки;
		
		Попытка		СтрКому = Элементы.СписокПисем.ТекущиеДанные.Получатель;
		Исключение	СтрКому = "";
		КонецПопытки;
		
		Попытка		СтрТема = Элементы.СписокПисем.ТекущиеДанные.Тема;
		Исключение	СтрТема = "";
		КонецПопытки;
		
		Возврат;
	КонецЕсли;
	
	Если Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка Тогда
		
		ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;	
		Если ТекущееПисьмо = ТекущиеДанные.Ссылка
		  И ТекущиеДанные.Ссылка <> Неопределено Тогда
			Возврат;
		КонецЕсли;
			
		ТекущееПисьмо = ТекущиеДанные.Ссылка;		
		СтруктураОписанияПисьма = СформироватьОписаниеТекущегоПисьма(Элементы.СписокПисем.ТекущаяСтрока, ТекущиеДанные.УчетнаяЗапись, ТекущееПисьмо);
		
		Если СтруктураОписанияПисьма = Неопределено Тогда
			ОписаниеПисьма = СформироватьПустоеОписание();;
			СтрОтправитель = "";
			СтрКому = "";
			СтрТема = "";
		Иначе
			ОписаниеПисьма = СтруктураОписанияПисьма.Тело;
			
			СтрОтправитель = СтруктураОписанияПисьма.От;
			СтрКому = СтруктураОписанияПисьма.Кому;
			СтрТема = СтруктураОписанияПисьма.Тема;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияПанельУправленияПриАктивизацииСтроки()
	
	ОписаниеПисьма = СформироватьПустоеОписание();
	
	СтрОтправитель = "";
	СтрКому = "";
	СтрТема = "";
	
	Вложения.Очистить();
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	
	//Если НЕ ТекущиеДанные = Неопределено И ТекущиеДанные.ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Удаленные") Тогда
	//	Элементы.ПанельУправленияКонтекстноеМенюОчиститьКорзину.Видимость = Истина;
	//Иначе
	//	Элементы.ПанельУправленияКонтекстноеМенюОчиститьКорзину.Видимость = Ложь;
	//КонецЕсли;
	
	УстановитьСвойсваЭлементовФормы();
	
	Если ТекущиеДанные = Неопределено Тогда 
		УчетнаяЗаписьОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(СписокПисем.Отбор.Элементы,"УчетнаяЗапись");
		УчетнаяЗаписьОтбор.ПравоеЗначение =  ПустаяУчетнаяЗапись;
		Возврат; 
	КонецЕсли;
	
	УчетнаяЗаписьВыбранная = ТекущиеДанные.УчетнаяЗапись;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	// В новой БСП нет этой функции, а в старой возвращала ИСТИНА
	//Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости() Тогда
		ОтборДинамическогоСписка = СписокПисем.КомпоновщикНастроек.Настройки.Отбор;
	//Иначе
	//	ОтборДинамическогоСписка = СписокПисем.Отбор;
	//КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(СписокПисем.Отбор, "Папка"); 	
	
	Если Родитель = Неопределено Тогда
		УчетнаяЗаписьОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(ОтборДинамическогоСписка.Элементы,"УчетнаяЗапись");
		УчетнаяЗаписьОтбор.ПравоеЗначение =  ТекущиеДанные.УчетнаяЗапись;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПисем, "Папка",ПредопределенноеЗначение("Справочник.ПапкиЭлектронныхПисем.ПустаяСсылка"),ВидСравненияКомпоновкиДанных.НеРавно,,Истина,,); 
	Иначе
		УчетнаяЗаписьОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(ОтборДинамическогоСписка.Элементы,"УчетнаяЗапись");
		УчетнаяЗаписьОтбор.ПравоеЗначение =  ТекущиеДанные.УчетнаяЗапись;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПисем, "Папка",ТекущиеДанные.Папка,,,Истина,,);
	КонецЕсли;
	
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПисем, "СкрытьИзСписка",Ложь,,,Истина,,);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоустановкаРассмотренностиПисьма()
	Если Элементы.СписокПисем.ТекущаяСтрока <> Неопределено И ТипЗнч(Элементы.СписокПисем.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
		
		Если Не ТекущиеДанные = Неопределено 
		И ТекущиеДанные.Тип = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
		И Не ТекущиеДанные.Рассмотрено Тогда
			ВыделенныеПисьма = Новый Массив;
			ВыделенныеПисьма.Добавить(ТекущиеДанные.Ссылка);
			УстановитьСнятьПометкуОПрочтении(ВыделенныеПисьма, Истина);
			ПроверитьНапоминанияОВходящихПисьмах(ВыделенныеПисьма);
			ОбновитьКоличествоНовыхПисемВПапках();
			Элементы.СписокПисем.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры// АвтоустановкаРассмотренностиПисьма()

&НаКлиенте
Процедура ПолучитьИдентификаторыПапокВДереве(ЭлементыДерева,СоответсвиеПапокИИдентификаторов)
	
	Для Каждого папка из ЭлементыДерева Цикл
		
		СоответсвиеПапокИИдентификаторов.Вставить(папка.Папка,Папка.ПолучитьИдентификатор());
		ПолучитьИдентификаторыПапокВДереве(папка.ПолучитьЭлементы(),СоответсвиеПапокИИдентификаторов);
		
	КонецЦикла;	
		
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьКоличествоНовыхПисемВПапках()
	
	МассивУчетныхЗаписей = Новый Массив;
	
	Для Каждого УчетнаяЗапись из УчетныеЗаписи Цикл
		
		МассивУчетныхЗаписей.Добавить(УчетнаяЗапись.УчетнаяЗапись);
		
	КонецЦикла;	
	
	СоответсвиеПапокИИдентификаторов = Новый Соответствие;
	ДеревоПапок = ДеревоУчетныхЗаписей.ПолучитьЭлементы();
	Для Каждого УчетнаяЗапись Из ДеревоПапок Цикл
		ПолучитьИдентификаторыПапокВДереве(УчетнаяЗапись.ПолучитьЭлементы(),СоответсвиеПапокИИдентификаторов);
	КонецЦикла;	
	
	МассивНовыеПисьма = ПолучитьКоличествоНовыхПисемВПапках(МассивУчетныхЗаписей,СоответсвиеПапокИИдентификаторов);
	
	Для Каждого НовыеПисьмаВПапке Из  МассивНовыеПисьма Цикл
		
		ЭлементДерева = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(НовыеПисьмаВПапке.Идентификатор);
		ЭлементДерева.НепрочитанныхПисем =  НовыеПисьмаВПапке.НепрочитанныхПисем;
		ЭлементДерева.Наименование = ?(НовыеПисьмаВПапке.НепрочитанныхПисем = 0,ЭлементДерева.ПапкаНаименование,ЭлементДерева.ПапкаНаименование + "(" + Строка(НовыеПисьмаВПапке.НепрочитанныхПисем) + ")");
		
	КонецЦикла	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлектронноеПисьмоПеретаскиваниемФайла(МассивФайловИлиФайл, УчетнаяЗаписьЭлектронногоПисьма = Неопределено)
	Если ТипЗнч(МассивФайловИлиФайл) = Тип("Массив") Тогда
		МассивФайлов = МассивФайловИлиФайл;
	Иначе
		МассивФайлов = Новый Массив();
		МассивФайлов.Добавить(МассивФайловИлиФайл);
	КонецЕсли;
	
	МассивФайловДляОбработки = Новый Массив();
	Для Каждого ЭлементМассива Из МассивФайлов Цикл
		Если Не ПеретаскиваетсяФайл(ЭлементМассива) = Истина Тогда
			Продолжить;
		КонецЕсли;
		МассивФайловДляОбработки.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Если МассивФайловДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьЭлектронногоПисьма) Тогда
		УчетнаяЗаписьЭлектронногоПисьма = УчетнаяЗаписьВыбранная;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	
	СписокВложений = Новый СписокЗначений();
	
	Для Каждого Файл Из МассивФайловДляОбработки Цикл
		Если ТипЗнч(Файл) = Тип("Файл") Тогда
			// это файл
			СписокВложений.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Файл.ПолноеИмя), УникальныйИдентификатор), Файл.Имя);
		ИначеЕсли ТипЗнч(Файл) = Тип("ДанныеФормыЭлементДерева") Тогда
			
			// это присоединенный файл с версионированием
			
			//Попытка
			//	НомерВерсии = Файл.НомерВерсии;
			//Исключение
			//	НомерВерсии = Неопределено;
			//КонецПопытки;
			//
			//Если НомерВерсии = Неопределено Или НомерВерсии = 0 Тогда
			//	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Файл.Ссылка, УникальныйИдентификатор, Истина, НомерВерсии);
			//Иначе
			//	ДанныеФайла = CRM_ПрисоединенныеФайлы.ПолучитьДанныеВерсииФайла(Файл.Ссылка, УникальныйИдентификатор, Истина, НомерВерсии);
			//КонецЕсли;
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл.Ссылка, УникальныйИдентификатор, Истина);
			
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				СписокВложений.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
			КонецЕсли;
			
		Иначе
			// это элемент справочника *ПрисоединенныеФайлы
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(Файл, УникальныйИдентификатор, Истина);
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				СписокВложений.Добавить(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОткрытия.Вставить("Вложения", СписокВложений);
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", УчетнаяЗаписьЭлектронногоПисьма);
	
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма, Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Функция ПеретаскиваетсяФайл(ЗначениеПеретаскивания)
	Если	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") И ЗначениеПеретаскивания.ЭтоФайл())
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл") И ЗначениеПеретаскивания[0].ЭтоФайл())
		Или КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания))
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания[0]))) Тогда
		//
		Возврат Истина;
		
	ИначеЕсли ТипЗнч(ЗначениеПеретаскивания) = Тип("ДанныеФормыЭлементДерева") Тогда
		бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		Попытка
			Если КэшТипыСправочниковПрисоединенныхФайлов.СодержитТип(ТипЗнч(ЗначениеПеретаскивания.Ссылка)) Тогда
				бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Истина;
			КонецЕсли;
		Исключение
			бПеретаскиваетсяПрисоединенныйФайлСВерсионированием = Ложь;
		КонецПопытки;
		Возврат бПеретаскиваетсяПрисоединенныйФайлСВерсионированием;
		
	Иначе
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") Тогда
			Если Не ЗначениеПеретаскивания.ЭтоФайл() Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл") И Не ЗначениеПеретаскивания[0].ЭтоФайл() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНапоминанияОВходящихПисьмах(МассивПисем)
	
	ОбновитьНапоминанияОВходящихПисьмах = Ложь;
	
	Для Каждого Письмо ИЗ МассивПисем Цикл
		
		ОбновитьНапоминанияОВходящихПисьмах = ПроверитьНапоминанияОВходящихПисьмахСервер(Письмо, ОбновитьНапоминанияОВходящихПисьмах);
		
	КонецЦикла;
	
	Если ОбновитьНапоминанияОВходящихПисьмах Тогда
				
		Оповестить("ОбновитьНапоминания", Новый Структура("ОбновитьНапоминанияОВходящихПисьмах", Истина));
				
	КонецЕсли;
	
КонецПроцедуры//  ПроверитьНапоминанияОВходящихПисьмах(МассивПисем)

&НаСервере
Функция ПроверитьНапоминанияОВходящихПисьмахСервер(КлючЗаписи, ОбновитьНапоминанияОВходящихПисьмах)
	
	Если ТипЗнч(КлючЗаписи) = Тип("РегистрСведенийКлючЗаписи.скMSExchange_ДанныеПочтовыхСообщений") Тогда
		ID = КлючЗаписи.ID;
	Иначе	
		ID = КлючЗаписи;
	КонецЕсли;
	
	МенеджерЗаписи = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьДанныеМенеджераСообщенияПоID(УчетнаяЗаписьВыбранная.скНастройкаОбменаПочтовымиСообщениями, ID);
	Если МенеджерЗаписи.Выбран()
	  И ЗначениеЗаполнено(МенеджерЗаписи.Объект1С) Тогда
		Возврат ОбновитьНапоминанияОВходящихПисьмах ИЛИ CRM_НапоминанияСервер.CRM_ПроверитьНапоминанияОПисьме(МенеджерЗаписи.Объект1С);	
		
	Иначе	
		Возврат ОбновитьНапоминанияОВходящихПисьмах;	
		
	КонецЕсли;
	
КонецФункции // ПроверитьНапоминанияОВходящихПисьмахСервер()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ СЕРВЕРБЕЗКОНТЕКСТА

&НаСервереБезКонтекста
Функция ПолучитьМассивIDПисем(УчетнаяЗапись, Папка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись"	,УчетнаяЗапись);
	Запрос.УстановитьПараметр("Папка"			,Папка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	скMSExchange_ДанныеПочтовыхСообщений.ID КАК ID
	               |ИЗ
	               |	РегистрСведений.скMSExchange_ДанныеПочтовыхСообщений КАК скMSExchange_ДанныеПочтовыхСообщений
	               |ГДЕ
	               |	скMSExchange_ДанныеПочтовыхСообщений.УчетнаяЗаписьЭлектроннойПочты = &УчетнаяЗапись
	               |	И скMSExchange_ДанныеПочтовыхСообщений.CRM_Папка = &Папка
	               |	И НЕ скMSExchange_ДанныеПочтовыхСообщений.Рассмотрено";
				   
				   	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ID");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТиповПрисоединенныхФайлов()
	МассивТипов = Новый Массив();
	Для Каждого СправочникМд Из Метаданные.Справочники Цикл
		Если Прав(СправочникМд.Имя, 19) = "ПрисоединенныеФайлы" Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка." + СправочникМд.Имя));
		КонецЕсли;
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивПисем(УчетнаяЗапись, Папка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетнаяЗапись"	,УчетнаяЗапись);
	Запрос.УстановитьПараметр("Папка"			,Папка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	скMSExchange_ДанныеПочтовыхСообщений.Объект1С КАК Письмо
	|ИЗ
	|	РегистрСведений.скMSExchange_ДанныеПочтовыхСообщений КАК скMSExchange_ДанныеПочтовыхСообщений
	|ГДЕ
	|	скMSExchange_ДанныеПочтовыхСообщений.УчетнаяЗаписьЭлектроннойПочты = &УчетнаяЗапись
	|	И скMSExchange_ДанныеПочтовыхСообщений.CRM_Папка = &Папка";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Письмо");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоличествоНовыхПисемВПапках(МассивУчетныхЗаписей,СоответсвиеПапокИИдентификаторов) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетныеЗаписи", МассивУчетныхЗаписей);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка,
		|	ПапкиЭлектронныхПисем.Владелец КАК Владелец,
		|	ПапкиЭлектронныхПисем.CRM_Вид,
		|	СУММА(ВЫБОР
		|			КОГДА скMSExchange_ДанныеПочтовыхСообщений.Рассмотрено ЕСТЬ NULL 
		|				ТОГДА 0
		|			КОГДА скMSExchange_ДанныеПочтовыхСообщений.Рассмотрено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК НепрочитанныхПисем
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.скMSExchange_ДанныеПочтовыхСообщений КАК скMSExchange_ДанныеПочтовыхСообщений
		|		ПО ПапкиЭлектронныхПисем.Ссылка = скMSExchange_ДанныеПочтовыхСообщений.CRM_Папка
		|ГДЕ
		|	ПапкиЭлектронныхПисем.Владелец В(&УчетныеЗаписи)
		|	И ПапкиЭлектронныхПисем.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПапкиЭлектронныхПисем.Ссылка,
		|	ПапкиЭлектронныхПисем.Владелец,
		|	ПапкиЭлектронныхПисем.CRM_Вид
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПапкиЭлектронныхПисем.РеквизитДопУпорядочивания
		|ИТОГИ ПО
		|	Владелец,
		|	Ссылка ИЕРАРХИЯ";
		
	МассивРезультатов	= Новый Массив;
	МассивСсылок		= Новый Массив;
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтруктураРезультат = Новый Структура("Ссылка,НепрочитанныхПисем,Идентификатор");
		ЗаполнитьЗначенияСвойств(СтруктураРезультат,ВыборкаДетальныеЗаписи);
		СтруктураРезультат.Идентификатор = СоответсвиеПапокИИдентификаторов.Получить(ВыборкаДетальныеЗаписи.Ссылка);
		Если (СтруктураРезультат.Идентификатор = Неопределено) 
			ИЛИ НЕ (МассивСсылок.Найти(СтруктураРезультат.Ссылка) = Неопределено) Тогда Продолжить; КонецЕсли;
		МассивСсылок.Добавить(СтруктураРезультат.Ссылка);
		МассивРезультатов.Добавить(СтруктураРезультат);
		
	КонецЦикла;

	Возврат МассивРезультатов;	
	
КонецФункции

&НаКлиенте
Процедура ПеренестиПисьмаВПапку(Письма,Папка)
	
	МассивПисем = Новый Массив;
	Для Каждого КлючЗаписи Из  Письма Цикл
		
		ТекущиеДанные = Элементы.СписокПисем.ДанныеСтроки(КлючЗаписи);
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
			СтрокаОшибки  = "";
			Письмо = ПолучитьСсылкуПоДаннымСообщения(КлючЗаписи, ТекущиеДанные.УчетнаяЗапись, СтрокаОшибки);
			Если Не ЗначениеЗаполнено(Письмо)
			  ИЛИ ЗначениеЗаполнено(СтрокаОшибки) Тогда
				ПоказатьПредупреждение(,СтрокаОшибки);
				Продолжить;
			КонецЕсли;
		Иначе
			Письмо = ТекущиеДанные.Ссылка;	
		КонецЕсли;
		
		Если ТипЗнч(Письмо) <> Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") И 
			ТипЗнч(Письмо) <> Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")  Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПисем.Добавить(Письмо);
		
	КонецЦикла;
	
	ПеренестиПисьмаВПапкуСервер(МассивПисем, Папка);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиПисьмаВПапкуСервер(Письма,Папка)

	Для Каждого Письмо Из  Письма Цикл  
		
		ПисьмоОбъект			   = Письмо.ПолучитьОбъект();
		ПисьмоОбъект.CRM_Папка 	   = Папка;
		ПисьмоОбъект.УчетнаяЗапись = Папка.Владелец;
		
		Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
		И НЕ ПисьмоОбъект.УчетнаяЗапись = Письмо.УчетнаяЗапись Тогда
			ПисьмоОбъект.ОтправительПредставление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(Папка.Владелец.ИмяПользователя,
													Папка.Владелец.АдресЭлектроннойПочты,
													"");
		КонецЕсли;
		
		Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
		И Папка.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие Тогда
			Если ПисьмоОбъект.ПометкаУдаления Тогда
				ПисьмоОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ПисьмоОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
		КонецЕсли;
		
		Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") И Папка.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Обработанные Тогда
			ПисьмоОбъект.Рассмотрено = Истина; 
		КонецЕсли;
		 
		Попытка
			ПисьмоОбъект.Записать();
		Исключение
		
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры // ПеренестиПисьмаВПапкуСервер()

&НаСервереБезКонтекста
Функция ПолучитьАдресОтправителяПисьма(Письмо)
	Если ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Возврат  Письмо.ОтправительАдрес;
	ИначеЕсли ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Если Письмо.ПолучателиПисьма.Количество() > 0 Тогда
			Возврат Письмо.ПолучателиПисьма[0].Адрес;
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		Попытка		Возврат Письмо.ОтправительАдрес;
		Исключение	Возврат "";
		КонецПопытки;
	КонецЕсли;
	
КонецФункции	  

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНовогоДокумента()
	
	НоваяСсылка = Документы.ЭлектронноеПисьмоВходящее.ПолучитьСсылку();
	
	Возврат НоваяСсылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ СЕРВЕР

&НаСервере
// Функция загружает настройку из хранилища общих настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить()
//
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек = "", ЗначениеПоУмолчанию = Неопределено, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено)
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию, ОписаниеНастроек, ИмяПользователя);
КонецФункции // ХранилищеОбщихНастроекЗагрузить()

&НаСервере
// Процедура сохраняет настройку в хранилище общих настроек.
// 
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроекСохранить.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить()
// 
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек = "", Значение, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, НужноОбновитьПовторноИспользуемыеЗначения = Ложь)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Значение, ОписаниеНастроек, ИмяПользователя, НужноОбновитьПовторноИспользуемыеЗначения);
КонецПроцедуры // ХранилищеОбщихНастроекСохранить()

&НаСервере
Функция ПолучитьСвойстваДинамическогоСпискаСервер()
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСвойстваДинамическогоСписка(	ЭтаФорма,
																			"СписокПисем",
																			"Обработка.скMSExchange_МенеджерПочты",
																			Неопределено,
																			Неопределено,
																			Неопределено,
																			"ПодменюВидСписка",
																			"ВидСпискаИдентификаторТекущейНастройки",
																			"Подключаемый_КомандаВидСписка");
	//
КонецФункции

&НаСервере
Функция ПолучитьТекущуюУЗ()

	мТекСтр = Элементы.ПанельУправления.ТекущаяСтрока;
	ЭлементДерева = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(мТекСтр);
	Если ЭлементДерева <> Неопределено Тогда
	
		ПараметрыФормы = Новый Структура("Ключ",ЭлементДерева.УчетнаяЗапись);
	Иначе
		ПустаяСсылка = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
		ПараметрыФормы = Новый Структура("Ключ",ПустаяСсылка);
	
	КонецЕсли; 
	
	Возврат ПараметрыФормы;
КонецФункции // ПолучитьСсылкуВыделеннойУЗ()

&НаСервере
Процедура ДобавитьСтрокуВДеревоПапок(Дерево,знач ВыборкаДетальныеЗаписи)
	
	ВыборкаДетальныеЗаписи = ВыборкаДетальныеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией,"Ссылка");

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = Дерево.Строки.Добавить();
		ПапкаНаименование = ВыборкаДетальныеЗаписи.Ссылка.Наименование;
		НоваяСтрока.Наименование	= ?(ВыборкаДетальныеЗаписи.НепрочитанныхПисем>0,ПапкаНаименование+"("+Строка(ВыборкаДетальныеЗаписи.НепрочитанныхПисем)+")",ПапкаНаименование);
		НоваяСтрока.УчетнаяЗапись	= ВыборкаДетальныеЗаписи.Владелец;
		НоваяСтрока.Папка = ВыборкаДетальныеЗаписи.Ссылка;
		НоваяСтрока.ПапкаНаименование =  ПапкаНаименование;
		НоваяСтрока.НепрочитанныхПисем         = ВыборкаДетальныеЗаписи.НепрочитанныхПисем;
		
		Если  ВыборкаДетальныеЗаписи.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие Тогда
			НоваяСтрока.Картинка		= 0;
		ИначеЕсли ВыборкаДетальныеЗаписи.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Исходящие Тогда
			НоваяСтрока.Картинка		= 1;
		ИначеЕсли ВыборкаДетальныеЗаписи.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Отправленные Тогда
			НоваяСтрока.Картинка		= 2;
		ИначеЕсли ВыборкаДетальныеЗаписи.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Черновики Тогда
			НоваяСтрока.Картинка		= 3;
		ИначеЕсли ВыборкаДетальныеЗаписи.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Удаленные Тогда
			НоваяСтрока.Картинка		= 4;
		ИначеЕсли ВыборкаДетальныеЗаписи.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Обработанные Тогда
			НоваяСтрока.Картинка		= 6;
		ИначеЕсли ВыборкаДетальныеЗаписи.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.НежелательнаяПочта Тогда
			НоваяСтрока.Картинка		= 7;
		Иначе
			НоваяСтрока.Картинка		= 8;
	    КонецЕсли;
	
		ДобавитьСтрокуВДеревоПапок(НоваяСтрока,ВыборкаДетальныеЗаписи);
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
		
КонецПроцедуры	

&НаСервере
Функция УбратьОшибкиИтоговПоИерархии(Строки, Поле="Папка", Родитель=Неопределено) Экспорт 
    //Убираем все элементы, равные текущему
    Всего=Строки.Количество();
    Для Инд=1 По Всего Цикл
        Стр=Строки[Всего-Инд];
        Зн=Стр[Поле];
        Если Родитель<>Неопределено И Зн=Родитель Тогда
            Строки.Удалить(Стр);
        Иначе
            УбратьОшибкиИтоговПоИерархии(Стр.Строки, Поле, Зн);
        КонецЕсли;
    КонецЦикла;
КонецФункции

&НаСервере
Функция СоздатьПисьмо(УчетнаяЗаписьСсылка) 
	
	Результат = "";
	
	Если НЕ УчетнаяЗаписьСсылка.ИспользоватьДляОтправки Тогда
		Результат = НСтр("ru = 'Учетная запись не предназначена для отправки писем'");
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьНаВозможностьОтправкиПисьма(УчетнаяЗаписьСсылка) 
	
	Если НЕ УчетнаяЗаписьСсылка.ИспользоватьДляОтправки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
// Функция удаляет из XML-текста недопустимые символы
//
// Параметры:
//  Строка - Строка - XML-текст.
//
// Возвращаемое значение:
//  Строка - XML-текст без недопустимых символов.
//
Функция КорректнаяСтрока(Строка)
	Позиция = НайтиНедопустимыеСимволыXML(Строка);
	Пока Позиция > 0 Цикл
		Строка = СтрЗаменить(Строка, Сред(Строка, Позиция, 1), "");
		Позиция = НайтиНедопустимыеСимволыXML(Строка);
	КонецЦикла;	
	Возврат Строка;
КонецФункции // КорректнаяСтрока()

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПустоеОписание()
	Возврат
	"<html>
	|<head>  
	|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
	|<body scroll=""auto"">
	|</body>
	|</html>";
КонецФункции

&НаСервере
Функция СформироватьОписаниеТекущегоПисьма(КлючЗаписи, УчетнаяЗапись, ПисьмоСсылка)
	
	Если КлючЗаписи = Неопределено Или ТипЗнч(КлючЗаписи) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПисьмоСсылка) Тогда
		СтрокаОшибки = "";
		ПисьмоСсылка = ПолучитьСсылкуПоДаннымСообщения(КлючЗаписи, УчетнаяЗапись, СтрокаОшибки);
		Если Не ЗначениеЗаполнено(ПисьмоСсылка)
		  ИЛИ ЗначениеЗаполнено(СтрокаОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
			Возврат Неопределено;	
		КонецЕсли;
			
		Элементы.СписокПисем.Обновить();
		
	КонецЕсли;
	
	СтруктураОписания = новый Структура;
	
	// Проверим доступность письма по RLS
	Попытка
		СсылкаДоступна = ПисьмоСсылка.Дата;
	Исключение
	    // письмо не доступно
		
		Начало = "
		|<html>
		|<head>  
		|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
		|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
		|<body scroll=""auto"">";
		
		Описание = НСтр("ru = 'Письмо не доступно данному пользователю из-за ограничения прав доступа!'");
		
		Конец = "
		|</body>
		|</html>";
		
		Текст = Начало + Описание + Конец;
		
		СтруктураОписания.Вставить("Тело", Текст);
		СтруктураОписания.Вставить("От",   "");
		СтруктураОписания.Вставить("Кому", "");
		СтруктураОписания.Вставить("Тема", "");
		
		Возврат СтруктураОписания;
		
	КонецПопытки;
	
	
	Если ПисьмоСсылка = Неопределено Или ТипЗнч(ПисьмоСсылка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоПисьмоРассылки = (ТипЗнч(ПисьмоСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")
						И ЗначениеЗаполнено(ПисьмоСсылка.Предмет)
						И ТипЗнч(ПисьмоСсылка.Предмет) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем"));
	
	Если ЭтоПисьмоРассылки И НЕ ПисьмоСсылка.CRM_РазрешеноРедактирование Тогда
		табВложения = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(ПисьмоСсылка.Предмет);
	Иначе
		табВложения = УправлениеЭлектроннойПочтой.ПолучитьВложенияЭлектронногоПисьма(ПисьмоСсылка);
	КонецЕсли;
	
	Вложения.Очистить();
	Для Каждого Стр Из табВложения Цикл
		новСтр 										= Вложения.Добавить();
		новСтр.Ссылка         						= Стр.Ссылка;
		новСтр.ИмяФайла       						= Стр.ИмяФайла;
		новСтр.ИндексКартинки 						= Стр.ИндексКартинки;
		новСтр.Размер        						= Стр.Размер;
		РазмерВложения								= Цел(Стр.Размер/1024);
		новСтр.РазмерСтрокой   						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(Стр.Размер) + " байт");
		новСтр.Расположение  						= 0;
		//новСтр.CRM_ИдентификаторПочтовогоВложения	= Стр.CRM_ИдентификаторПочтовогоВложения;
		новСтр.CRM_ИдентификаторПочтовогоВложения = ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
		новСтр.ИДФайлаЭлектронногоПисьма = ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
	КонецЦикла;
	
	Если ТипЗнч(ПисьмоСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Для Каждого УдаленноеВложение Из ПисьмоСсылка.НепринятыеВложения Цикл
			НовоеВложение = Вложения.Добавить();
			НовоеВложение.ИмяФайла = УдаленноеВложение.ИмяВложение;
			НовоеВложение.ИндексКартинки = РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(".msg") + 1;
			НовоеВложение.CRM_ИдентификаторПочтовогоВложения = "#";
			НовоеВложение.ИДФайлаЭлектронногоПисьма = "#";
		КонецЦикла;
	КонецЕсли;
	
	Вложения.Сортировать("CRM_ИдентификаторПочтовогоВложения");
	
	Описание = "";
	//
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ПисьмоСсылка));
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПисьмоСсылка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
	 ИЛИ ПисьмоСсылка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
	 
	 	Описание = ПисьмоСсылка.ТекстHTML;
		
		// удалим недопустимые символы
		Если НайтиНедопустимыеСимволыXML(Описание) Тогда
			
			Описание = КорректнаяСтрока(Описание);
			
		КонецЕсли;
	 
	 	Для Каждого СтрокаВложения ИЗ Вложения Цикл
			
			Если ВРег(Прав(СокрЛП(СтрокаВложения.ИмяФайла), 4)) = ".EML" Тогда
				Продолжить;		
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(СтрокаВложения.CRM_ИдентификаторПочтовогоВложения)
			   И Не СтрокаВложения.CRM_ИдентификаторПочтовогоВложения = "#" Тогда
				
				ДвоичныеДанныеКартинки = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(СтрокаВложения.Ссылка, Ложь);
				Если ДвоичныеДанныеКартинки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				АдресКартинки = ПоместитьВоВременноеХранилище(Новый Картинка(ДвоичныеДанныеКартинки),ЭтаФорма.УникальныйИдентификатор);
				
				Если Найти(Описание, "cid:"+СтрокаВложения.CRM_ИдентификаторПочтовогоВложения) > 0 Тогда
					Описание = СтрЗаменить(Описание, "cid:"+СтрокаВложения.CRM_ИдентификаторПочтовогоВложения, АдресКартинки);
				Иначе
					Описание = СтрЗаменить(Описание, СтрокаВложения.CRM_ИдентификаторПочтовогоВложения, АдресКартинки);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		//у некоторых писем отсутсвует заголовок
		
		Если  Найти(Описание,"<head>") = 0 Тогда
			
			Начало = "
			|<html>
			|<head>  
			|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
			|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
			|<body scroll=""auto"">";
						
			Конец = "
			|</body>
			|</html>";

			Описание = Начало + Описание + Конец;
		КонецЕсли;	
		
		//Текст = Описание;
		Текст = Взаимодействия.ОбработатьТекстHTML(ПисьмоСсылка);
 	Иначе
		Начало = "
		|<html>
		|<head>  
		|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
		|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
		|<body scroll=""auto"">";
		
		Описание = ПисьмоСсылка.Текст;
		
		Если Найти(ПисьмоСсылка.Текст, Символы.ПС) > 0 Тогда
			Описание = СтрЗаменить(Описание, Символы.ПС, "<br>");
		КонецЕсли;
		
		Конец = "
		|</body>
		|</html>";
		
		Текст = Начало + Описание + Конец;
	КонецЕсли;
	
	СтруктураОписания.Вставить("Тело", Текст);
	СтруктураОписания.Вставить("От", ПисьмоСсылка.ОтправительПредставление);
	СтруктураОписания.Вставить("Кому", ПисьмоСсылка.СписокПолучателейПисьма);
	СтруктураОписания.Вставить("Тема", ПисьмоСсылка.Тема);
	
	Возврат СтруктураОписания;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Функция ДеревоНайтиСтрокуПоСвойству(Дерево,СтруктураОтбора)
	
	НомерСтроки = Неопределено;
	ЭлементыДерева = Дерево.ПолучитьЭлементы();
	Для каждого Элемент Из ЭлементыДерева Цикл
		
		Для каждого Отбор Из СтруктураОтбора Цикл
			ЗначениеСвойстваДерева = Неопределено;
			Найдено = Элемент.Свойство(Отбор.Ключ,ЗначениеСвойстваДерева);
			НомерСтроки = Элемент.ПолучитьИдентификатор();
			Если Найдено И ЗначениеСвойстваДерева = Отбор.Значение Тогда
				Возврат НомерСтроки;
			КонецЕсли;
			
		КонецЦикла;
		НомерСтроки = ДеревоНайтиСтрокуПоСвойству(Элемент,СтруктураОтбора);
		Если НомерСтроки <> Неопределено тогда
			Возврат НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НомерСтроки;
КонецФункции

&НаСервереБезКонтекста
Функция СправочникНайтиПоНаименованию(ИмяСправочника, Наименование, Владелец = Неопределено)
	Ссылка = Неопределено;
	Попытка
		Ссылка = Справочники[ИмяСправочника].НайтиПоНаименованию(Наименование,,,Владелец);
	Исключение КонецПопытки;
	Возврат Ссылка;
КонецФункции 
 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтаФорма.ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		//Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИдентификаторПочтовогоВложения","#");
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьма","#");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПапкиВыбранный) Тогда
		Если ВидПапкиВыбранный = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Входящие") Тогда
			НаименованиеПапки = "Входящие";
		ИначеЕсли ВидПапкиВыбранный = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики") Тогда
			НаименованиеПапки = "Черновики";
		КонецЕсли;
	Иначе
		НаименованиеПапки = "Входящие";
	КонецЕсли;
	
	Ссылка = СправочникНайтиПоНаименованию("ПапкиЭлектронныхПисем",НаименованиеПапки, УчетнаяЗаписьВыбранная);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СтруктураОтбора = Новый Структура("Папка",Ссылка);
		НомерСтроки = ДеревоНайтиСтрокуПоСвойству(ДеревоУчетныхЗаписей,СтруктураОтбора);
		ЭтаФорма.Элементы.ПанельУправления.ТекущаяСтрока = НомерСтроки;
	ИначеЕсли ЗначениеЗаполнено(УчетнаяЗаписьВыбранная) тогда
		ЭтаФорма.Элементы.ПанельУправления.ТекущаяСтрока = 0;
	КонецЕсли;
	
	Если ЭтаФорма.флОтказ Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'У пользователя нет ни одной учетной записи электронной почты.'"), 10);
		Отказ = Истина;
		
	КонецЕсли;
	

	Если Элементы.СписокПисем.АвтоОбновление Тогда
		ПодключитьОбработчикОжидания("ОбновитьКоличествоНовыхПисемВПапках",Элементы.СписокПисем.ПериодАвтоОбновления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоУчетныхЗаписей()
	//заполнение дерева папок
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка,
		|	ПапкиЭлектронныхПисем.Владелец КАК Владелец,
		|	ПапкиЭлектронныхПисем.CRM_Вид КАК Вид,
		|	СУММА(ВЫБОР
		|			КОГДА скMSExchange_ДанныеПочтовыхСообщений.Рассмотрено ЕСТЬ NULL 
		|				ТОГДА 0
		|			КОГДА скMSExchange_ДанныеПочтовыхСообщений.Рассмотрено
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК НепрочитанныхПисем
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.скMSExchange_ДанныеПочтовыхСообщений КАК скMSExchange_ДанныеПочтовыхСообщений
		|		ПО ПапкиЭлектронныхПисем.Ссылка = скMSExchange_ДанныеПочтовыхСообщений.CRM_Папка
		|ГДЕ
		|	ПапкиЭлектронныхПисем.Владелец В(&УчетныеЗаписи)
		|	И ПапкиЭлектронныхПисем.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПапкиЭлектронныхПисем.Ссылка,
		|	ПапкиЭлектронныхПисем.Владелец,
		|	ПапкиЭлектронныхПисем.CRM_Вид
		|
		|УПОРЯДОЧИТЬ ПО

		|	ПапкиЭлектронныхПисем.Владелец.Наименование,
		|	ПапкиЭлектронныхПисем.РеквизитДопУпорядочивания
		|ИТОГИ ПО
		|	Владелец,
		|	Ссылка ИЕРАРХИЯ";

	ТаблицаУчетныхЗаписей = РеквизитФормыВЗначение("УчетныеЗаписи");	
	Запрос.УстановитьПараметр("УчетныеЗаписи", ТаблицаУчетныхЗаписей.ВыгрузитьКолонку("УчетнаяЗапись"));

	Результат = Запрос.Выполнить();

	
	Дерево = РеквизитФормыВЗначение("ДеревоУчетныхЗаписей");
	Дерево.Строки.Очистить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтрокаУЗ = Дерево.Строки.Добавить();
		СтрокаУЗ.Наименование	= ВыборкаДетальныеЗаписи.Владелец.Наименование;
		СтрокаУЗ.УчетнаяЗапись	= ВыборкаДетальныеЗаписи.Владелец;
		СтрокаУЗ.Картинка		= 7;
		
		ДобавитьСтрокуВДеревоПапок(СтрокаУЗ,ВыборкаДетальныеЗаписи);
		
	КонецЦикла;
	
	//удалим дубли строк (ошибка платформы)
	УбратьОшибкиИтоговПоИерархии(Дерево.Строки);
	
	ЗначениеВДанныеФормы(Дерево, ДеревоУчетныхЗаписей);
	
	ЭтаФорма.флОтказ = (Дерево.Строки.Количество() = 0) ;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	//Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
	//	Возврат;
	//КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().ПриСозданиеНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	
	// +ЭТОТ блок обязательно должен быть в самом начале процедуры, т.к. если отказ, чтобы не выполнять избыточный код
	
	Если НЕ CRM_РежимФормЗакладкиСервер.ВосстановлениеФормыПриЗапускеСеанса(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;		
	
	// -ЭТОТ блок обязательно должен быть в самом начале процедуры, т.к. если отказ, чтобы не выполнять избыточный код	
		
	КэшТипыСправочниковПрисоединенныхФайлов = ПолучитьОписаниеТиповПрисоединенныхФайлов();
	
	// Оформление списка
	СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСервер();
	CRM_ОбщегоНазначенияСервер.ПользовательскиеНастройкиСпискаПриСозданииНаСервере(ЭтаФорма, СвойстваДинамическогоСписка);
	
	//получение доступных учетных записей
	Запрос = Новый Запрос;
	// "РАЗРЕШЕННЫЕ" используется для совместимости с УТ11 и прочими типовыми
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_УчетныеЗаписиЭлектроннойПочты КАК CRM_УчетныеЗаписиЭлектроннойПочты
		|		ПО (CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка)
		|ГДЕ
		|	CRM_УчетныеЗаписиЭлектроннойПочты.Пользователь = &Пользователь
		|	И НЕ УчетныеЗаписиЭлектроннойПочты.ПометкаУдаления
		|	И CRM_УчетныеЗаписиЭлектроннойПочты.УчетнаяЗапись.скУчаствуетВОбменеПочтовымиСообщениямиСMSExchange";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяУчетнаяЗапись = УчетныеЗаписи.Добавить();
		НоваяУчетнаяЗапись.УчетнаяЗапись = ВыборкаДетальныеЗаписи.УчетнаяЗапись;
	КонецЦикла;
	
	ЗаполнитьДеревоУчетныхЗаписей();
	
	Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка		= ЭтаФорма.ПоказатьСкрытьПисьмоПометка;
	Элементы.Описание.Видимость								= ЭтаФорма.ПоказатьСкрытьПисьмоПометка;
	Элементы.СписокПисемПоказатьСкрытьВложения.Пометка		= ЭтаФорма.ПоказатьСкрытьВложенияПометка;
	Элементы.Вложения.Видимость								= ЭтаФорма.ПоказатьСкрытьВложенияПометка;
	
	// Восстановление сортировки списка
	CRM_ОбщегоНазначенияСервер.ВосстановитьСортировкуСписка(СписокПисем, "Обработка.скMSExchange_МенеджерПочты.СписокПисем");
	
	//Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИдентификаторПочтовогоВложения","#");
	Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьма","#");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "CRM_УстановленФлагОбработано" Тогда
		
		Элементы.СписокПисем.Обновить();
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		
	ИначеЕсли ИмяСобытия = "CRM_УстановленНовыйОтветственный" Тогда
		
		Элементы.СписокПисем.Обновить();
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		
	ИначеЕсли ИмяСобытия = "СохраненаЛичнаяЗадача" Тогда
		
		Элементы.СписокПисем.Обновить();
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		
	ИначеЕсли ИмяСобытия = "ПолученыНовыеЭлектронныеПисьма" Тогда
		
		Элементы.СписокПисем.Обновить();
		ОбработчикОжиданияСписокПисемПриАктивизацииСтроки();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОтветитьВсем(Команда)
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекущиеДанныеДерева = Элементы.ПанельУправления.ТекущиеДанные;
	Если НЕ ПроверитьНаВозможностьОтправкиПисьма(ТекущиеДанныеДерева.УчетнаяЗапись) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Учетная запись не предназначена для отправки писем'"));
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ТекущееПисьмо = ТекущиеДанные.Ссылка;	
	Иначе	
		СтрокаОшибки  = "";
		ТекущееПисьмо = ПолучитьСсылкуПоДаннымСообщения(Элементы.СписокПисем.ТекущаяСтрока, ТекущиеДанные.УчетнаяЗапись, СтрокаОшибки);
		Если Не ЗначениеЗаполнено(ТекущееПисьмо)
		  ИЛИ ЗначениеЗаполнено(СтрокаОшибки) Тогда
			ПоказатьПредупреждение(,СтрокаОшибки);
			Возврат;
		КонецЕсли;
		ОбновитьКоличествоНовыхПисемВПапках();
		Элементы.СписокПисем.Обновить();
	КонецЕсли;
	
	Основание = Новый Структура("Основание, Команда", ТекущееПисьмо, "ОтветитьВсем");
	ПараметрыОткрытия = Новый Структура("Основание, Ключ", Основание,ПолучитьСсылкуНовогоДокумента());
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекущиеДанныеДерева = Элементы.ПанельУправления.ТекущиеДанные;
	Если НЕ ПроверитьНаВозможностьОтправкиПисьма(ТекущиеДанныеДерева.УчетнаяЗапись) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Учетная запись не предназначена для отправки писем'"));
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ТекущееПисьмо = ТекущиеДанные.Ссылка;	
	Иначе	
		СтрокаОшибки  = "";
		ТекущееПисьмо = ПолучитьСсылкуПоДаннымСообщения(Элементы.СписокПисем.ТекущаяСтрока, ТекущиеДанные.УчетнаяЗапись, СтрокаОшибки);
		Если Не ЗначениеЗаполнено(ТекущееПисьмо)
		  ИЛИ ЗначениеЗаполнено(СтрокаОшибки) Тогда
			ПоказатьПредупреждение(,СтрокаОшибки);
			Возврат;
		КонецЕсли;
		ОбновитьКоличествоНовыхПисемВПапках();
		Элементы.СписокПисем.Обновить();
	КонецЕсли;
	
	Основание = Новый Структура("Основание, Команда", ТекущееПисьмо, "Переслать");
	ПараметрыОткрытия = Новый Структура("Основание, Ключ", Основание,ПолучитьСсылкуНовогоДокумента());
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Результат = "";
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли; 		
	
	Результат = СоздатьПисьмо(ТекущиеДанные.УчетнаяЗапись); 	
	
	Если Результат = "" Тогда
		
		СсылкаНового = ПолучитьСсылкуНовогоДокумента();
		ПараметрыОткрытия = Новый Структура("УчетнаяЗапись, Ключ", ТекущиеДанные.УчетнаяЗапись, ПолучитьСсылкуНовогоДокумента());
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
		
	Иначе
		
		Сообщить(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПочту(Команда)
	
	ТекущаяУчетнаяЗапись = Неопределено;
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущаяУчетнаяЗапись = ТекущиеДанные.УчетнаяЗапись;
	КонецЕсли;
	
	СписокПолученныхПисем = Новый СписокЗначений;
	
	CRM_УправлениеЭлектроннойПочтойКлиент.ЗагрузитьПочтуПользователя(Элементы.СписокПисем, ТекущаяУчетнаяЗапись);
	ОбновитьКоличествоНовыхПисемВПапках();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПочту(Команда)
	
	CRM_УправлениеЭлектроннойПочтой.ОтправитьПочтуПользователя();
	Элементы.СписокПисем.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяЗагрузкаЭлектроннойПочты(Команда)
	
	ТекущаяУчетнаяЗапись = Неопределено;
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущаяУчетнаяЗапись = ТекущиеДанные.УчетнаяЗапись;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяУчетнаяЗапись) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана учетная запись!'"), 10);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура("УчетнаяЗапись", ТекущаяУчетнаяЗапись);
	ОткрытьФорму("Обработка.CRM_ПервоначальнаяЗагрузкаЭлектроннойПочты.Форма", СтруктураПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	ТекущиеДанныеДерева = Элементы.ПанельУправления.ТекущиеДанные;
	Если НЕ ПроверитьНаВозможностьОтправкиПисьма(ТекущиеДанныеДерева.УчетнаяЗапись) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Учетная запись не предназначена для отправки писем'"));
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ТекущееПисьмо = ТекущиеДанные.Ссылка;	
	Иначе	
		СтрокаОшибки  = "";
		ТекущееПисьмо = ПолучитьСсылкуПоДаннымСообщения(Элементы.СписокПисем.ТекущаяСтрока, ТекущиеДанные.УчетнаяЗапись, СтрокаОшибки);
		Если Не ЗначениеЗаполнено(ТекущееПисьмо)
		  ИЛИ ЗначениеЗаполнено(СтрокаОшибки) Тогда
			ПоказатьПредупреждение(,СтрокаОшибки);
			Возврат;
		КонецЕсли;
		ОбновитьКоличествоНовыхПисемВПапках();
		Элементы.СписокПисем.Обновить();
	КонецЕсли;
	
	Основание = Новый Структура("Основание, Команда", ТекущееПисьмо, "Ответить");
	ПараметрыОткрытия = Новый Структура("Основание, Ключ", Основание, ПолучитьСсылкуНовогоДокумента());
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаДокумента", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФильтр(Команда)
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;	
	
	АдресОтправителя = ПолучитьАдресОтправителяПисьма(ТекущиеДанные.Ссылка);
	
	ФормаФильтра = ПолучитьФорму("Справочник.CRM_ФильтрыЭлектронныхПисем.ФормаОбъекта");
	
	Если НЕ ФормаФильтра = Неопределено Тогда
		
		ФормаФильтра.Объект.АдресОтправителя = АдресОтправителя;
		ФормаФильтра.Объект.Владелец =  ТекущиеДанные.УчетнаяЗапись;
		ФормаФильтра.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоЗначениюВТекущейКолонкеНаСервере(СтруктураТекущиеДанные)
	CRM_ОбщегоНазначенияСервер.ОтборПоЗначениюВТекущейКолонке(ЭтаФорма, СтруктураТекущиеДанные, "СписокПисем", "СписокПисем");
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоЗначениюВТекущейКолонке(Команда)
	СтруктураТекущиеДанные = CRM_ОбщегоНазначенияКлиент.ОтборПоЗначениюВТекущейКолонкеПолучитьСтруктуруТекущихДанных(ЭтаФорма, "СписокПисем", "СписокПисем");
	ОтборПоЗначениюВТекущейКолонкеНаСервере(СтруктураТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ВосстанавливатьФормуПриОткрытии(Команда)
	Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка = НЕ Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ВосстанавливатьФормуПриОткрытии", Элементы.КнопкаВосстанавливатьФормуПриОткрытии.Пометка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ОСТАЛЬНЫХ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

&НаКлиенте
Процедура ПанельУправленияПриАктивизацииСтроки(Элемент)
	
	Если ПанельУправленияТекущаяСтрока = Элементы.ПанельУправления.ТекущаяСтрока Тогда
		Возврат;
	Иначе
		ПанельУправленияТекущаяСтрока = Элементы.ПанельУправления.ТекущаяСтрока;
	КонецЕсли;
	
	//Элементы.Вложения.Видимость = Истина;
	ТекущееПисьмо = Неопределено;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПанельУправленияПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПриИзменении(Элемент)
	ОбновитьКоличествоНовыхПисемВПапках();
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		Элементы.СписокПисемКонтекстноеМенюСкопировать.Видимость = Ложь;
	ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Элементы.СписокПисемКонтекстноеМенюСкопировать.Видимость = Истина;
	Иначе
		Элементы.СписокПисемКонтекстноеМенюСкопировать.Видимость = Ложь;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияСписокПисемПриАктивизацииСтроки", 0.5, Истина);
	
	ПодключитьОбработчикОжидания("АвтоустановкаРассмотренностиПисьма", 5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.СписокПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
		
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ТекущееПисьмо = ТекущиеДанные.Ссылка;	
	Иначе	
		СтрокаОшибки  = "";
		ТекущееПисьмо = ПолучитьСсылкуПоДаннымСообщения(Элементы.СписокПисем.ТекущаяСтрока, ТекущиеДанные.УчетнаяЗапись, СтрокаОшибки);
		Если Не ЗначениеЗаполнено(ТекущееПисьмо)
		  ИЛИ ЗначениеЗаполнено(СтрокаОшибки) Тогда
			ПоказатьПредупреждение(,СтрокаОшибки);
			Возврат;
		КонецЕсли;
		ОбновитьКоличествоНовыхПисемВПапках();
		Элементы.СписокПисем.Обновить();
	КонецЕсли;
	
	Если Копирование Тогда
		ПараметрыОткрытия = Новый Структура("ЗначениеКопирования", ТекущееПисьмо);
	Иначе
		ПараметрыОткрытия = Новый Структура();
	КонецЕсли;
		
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Если ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение) = Истина Тогда
		СоздатьЭлектронноеПисьмоПеретаскиваниемФайла(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПисемВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОтключитьОбработчикОжидания("АвтоустановкаРассмотренностиПисьма");
		
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ОткрытьЗначение(ТекущиеДанные.Ссылка);	
	Иначе	
		СтрокаОшибки  = "";
		ТекущееПисьмо = ПолучитьСсылкуПоДаннымСообщения(Элемент.ТекущаяСтрока, ТекущиеДанные.УчетнаяЗапись, СтрокаОшибки);
		Если Не ЗначениеЗаполнено(ТекущееПисьмо)
		  ИЛИ ЗначениеЗаполнено(СтрокаОшибки) Тогда
			ПоказатьПредупреждение(,СтрокаОшибки);
		Иначе
			ОткрытьЗначение(ТекущееПисьмо);	
		КонецЕсли;
		
	КонецЕсли;	
	
	Элемент.Обновить();
	
	АвтоустановкаРассмотренностиПисьма();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельУправленияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;    
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") И Не ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение) = Истина Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
		
	Иначе	
		
		СтрокаНазначение = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(Строка);
		
		Если НЕ ЗначениеЗаполнено(СтрокаНазначение.Папка) Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПеремещениеИзПапкиВходящие(ВходящееЭлектронноеПисьмо)
	
	ИсходнаяПапка = ВходящееЭлектронноеПисьмо.CRM_Папка;
	
	Возврат ИсходнаяПапка.Вид = Перечисления.CRM_ВидыПапокЭлектроннойПочты.Входящие и ИсходнаяПапка.Наименование = "Входящие";
	
КонецФункции // ПеремещениеИзПапкиВходящие(ВходящееЭлектронноеПисьмо)

&НаКлиенте
Процедура ПанельУправленияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ЭтоПеретаскиваетсяФайл = ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение);
	Если ЭтоПеретаскиваетсяФайл = Истина Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		
		Если Строка <> Неопределено Тогда
			// создание нового письма с присоедненным фалом
			СтрокаПеретаскивания = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(Строка);
			Если СтрокаПеретаскивания <> Неопределено Тогда
				СоздатьЭлектронноеПисьмоПеретаскиваниемФайла(ПараметрыПеретаскивания.Значение, СтрокаПеретаскивания.УчетнаяЗапись);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(УчетнаяЗаписьВыбранная) Тогда
			СоздатьЭлектронноеПисьмоПеретаскиваниемФайла(ПараметрыПеретаскивания.Значение, УчетнаяЗаписьВыбранная);
		КонецЕсли;
	ИначеЕсли ЭтоПеретаскиваетсяФайл = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		
	Иначе
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
			Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) <> Тип("РегистрСведенийКлючЗаписи.скMSExchange_ДанныеПочтовыхСообщений") Тогда
				Возврат;
			КонецЕсли;
			
			ПапкаНазначения = ДеревоУчетныхЗаписей.НайтиПоИдентификатору(Строка);
			
			ТекущийПользовательРазрешенаЗапись = CRM_УправлениеЭлектроннойПочтой.ТекущийПользовательПолучитьПравоУчетнойЗаписи(ПапкаНазначения.УчетнаяЗапись, "Запись");
			
			Если ТекущийПользовательРазрешенаЗапись Тогда
				
				ПеремещаютсяВходящиеПисьма = Ложь;
				
				Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
					
					ПеремещаютсяВходящиеПисьма = ПеремещениеИзПапкиВходящие(ПараметрыПеретаскивания.Значение[0]);
					
				КонецЕсли;				
				
				ПеренестиПисьмаВПапку(ПараметрыПеретаскивания.Значение,ПапкаНазначения.Папка);
				
				Если ПеремещаютсяВходящиеПисьма Тогда
				
					ПроверитьНапоминанияОВходящихПисьмах(ПараметрыПеретаскивания.Значение);
					
				КонецЕсли; 
				
				Элементы.СписокПисем.Обновить();
				ОбновитьКоличествоНовыхПисемВПапках();
				
			Иначе
				
				Сообщить(НСтр("ru = 'Недостаточно прав для работы с письмами данной учетной записи!
				|Для текущего пользователя должно быть установлено право ""Редактирование/Отправка""'"));
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваУчетнойЗаписи(Команда)
	ПараметрыФормы = ПолучитьТекущуюУЗ();
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаОбъекта",ПараметрыФормы,ЭтаФорма,,);
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьПометкуОПрочтении(ВыделенныеПисьма, УстановитьПометку = Ложь)
	
	Для Каждого Письмо ИЗ ВыделенныеПисьма Цикл
		
		Если ТипЗнч(Письмо) = Тип("РегистрСведенийКлючЗаписи.скMSExchange_ДанныеПочтовыхСообщений") Тогда
			ID = Письмо.ID;
		Иначе	
			ID = Письмо;
		КонецЕсли;
		
		МенеджерЗаписи = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьДанныеМенеджераСообщенияПоID(УчетнаяЗаписьВыбранная.скНастройкаОбменаПочтовымиСообщениями, ID);
		Если МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.Рассмотрено = УстановитьПометку;
			Если Не ЗначениеЗаполнено(МенеджерЗаписи.Объект1С) Тогда
				СтрокаОшибки = "";
				МенеджерЗаписи.Объект1С = скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ЗагрузитьОбновитьПочтовоеСообщенияВ1С(МенеджерЗаписи, УчетнаяЗаписьВыбранная, СтрокаОшибки);
				Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);	
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(МенеджерЗаписи.Объект1С) Тогда
				Источник    = МенеджерЗаписи.Объект1С.ПолучитьОбъект();
				МассивУзлов = ОбменДаннымиСобытия.ОпределитьПолучателей(Источник, "скMSExchange_ОбменПочтовымиСообщениями");
				Если МассивУзлов.Количество() > 0 Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, МенеджерЗаписи.Объект1С);																		  
				КонецЕсли;
				
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
						
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура СнятьПометкуОПрочтении(Команда)
	
	ВыделенныеПисьма = Элементы.СписокПисем.ВыделенныеСтроки;
	УстановитьСнятьПометкуОПрочтении(ВыделенныеПисьма, Ложь);
	Элементы.СписокПисем.Обновить();
	ОбновитьКоличествоНовыхПисемВПапках();
	УстановитьСвойсваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочитанное(Команда)
	
	ВыделенныеПисьма = Элементы.СписокПисем.ВыделенныеСтроки;
	УстановитьСнятьПометкуОПрочтении(ВыделенныеПисьма, Истина);
	
	// проверим напоминания о входящих письмах
	ПроверитьНапоминанияОВходящихПисьмах(ВыделенныеПисьма);
	
	Элементы.СписокПисем.Обновить();
	ОбновитьКоличествоНовыхПисемВПапках();
	УстановитьСвойсваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсеКакПрочитанное(Команда)
	
	ТекущиеДанные = Элементы.ПанельУправления.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
		
	Если Родитель = Неопределено Тогда
		Возврат;
	Иначе
		ТекУчетнаяЗапись	= ТекущиеДанные.УчетнаяЗапись;
		ТекПапка			= ТекущиеДанные.Папка;
		УстановитьСнятьПометкуОПрочтении(ПолучитьМассивПисем(ТекУчетнаяЗапись, ТекПапка), Истина);
		Элементы.СписокПисем.Обновить();
		ОбновитьКоличествоНовыхПисемВПапках();
		УстановитьСвойсваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьЛичнуюЗадачу(Команда)
	Если ТипЗнч(Элементы.СписокПисем.ТекущаяСтрока) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		ПараметрыФормы = Новый Структура("Основание", Элементы.СписокПисем.ТекущаяСтрока);
		ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,);
	ИначеЕсли ТипЗнч(Элементы.СписокПисем.ТекущаяСтрока) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
		Текст = "ru = 'Поддерживаются только входящие электронные письма!'";
		ПоказатьПредупреждение(, НСтр(Текст),5);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущееВложение()
	
	CRM_УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(Элементы.Вложения.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры // ОткрытьТекущееВложение()

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьТекущееВложение();
	
КонецПроцедуры

 &НаКлиенте
Процедура ВложенияПриАктивизацииСтроки(Элемент)
	НетВложений = (Элементы.Вложения.ТекущиеДанные = Неопределено);
	Элементы.КонтекстноеМенюВложенияОткрыть.Доступность			= НЕ НетВложений;
	Элементы.КонтекстноеМенюВложенияСохранить.Доступность		= НЕ НетВложений;
	Элементы.КонтекстноеМенюВложенияСохранитьВсе.Доступность	= НЕ НетВложений;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить(Команда)
	ОткрытьТекущееВложение();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложения(ТолькоВыделенные = Ложь)
	ВыделенныеВложения = Элементы.Вложения.ВыделенныеСтроки;
	Если ТолькоВыделенные И (ВыделенныеВложения.Количество() = 1) Тогда
		CRM_УправлениеЭлектроннойПочтойКлиент.СохранитьВложение(Элементы.Вложения.ТекущиеДанные.Ссылка, УникальныйИдентификатор);
		Возврат;
	КонецЕсли;	
	КоличествоВложений = Вложения.Количество();
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		КаталогСохранения = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
		Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда
			КаталогСохранения = "";
		КонецЕсли;
		ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыборКаталога.МножественныйВыбор = Ложь;
		ВыборКаталога.Каталог = КаталогСохранения;
		Если НЕ ВыборКаталога.Выбрать() Тогда Возврат; КонецЕсли;
		КаталогСохранения = ВыборКаталога.Каталог;
		Если НЕ ЗначениеЗаполнено(КаталогСохранения) Тогда Возврат; КонецЕсли;
		Если НЕ (Прав(КаталогСохранения, 1) = "\") Тогда
			КаталогСохранения = КаталогСохранения + "\";
		КонецЕсли;
		ПолучаемыеФайлы = Новый Массив;
		ПолученныеФайлы = Новый Массив;
		ПерезаписатьВсе		= Ложь;
		ПереименоватьВсе	= Ложь;
		Для НомерВложения = 0 По КоличествоВложений - 1 Цикл
			Если ТолькоВыделенные Тогда
				Если ВыделенныеВложения.Найти(НомерВложения) = Неопределено Тогда Продолжить; КонецЕсли;
			КонецЕсли;	
			ТекущееВложение = Вложения[НомерВложения];
			Если НЕ ЗначениеЗаполнено(ТекущееВложение.Ссылка) Тогда Продолжить; КонецЕсли;			
			// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет
			//Если НЕ (ТекущееВложение.CRM_ИдентификаторПочтовогоВложения = "#") Тогда Продолжить; КонецЕсли;
			// 
			ДанныеФайла = ПрисоединенныеФайлыКлиент.ПолучитьДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
			РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
			Если РасширениеВложения = "EML" Тогда
				Сообщить(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
				Продолжить;
			КонецЕсли;
			ПолноеИмяФайла = КаталогСохранения + ТекущееВложение.ИмяФайла;
			// Проверяем файл на существование, и, если он существует, то выбираем дальнейшее действие
			Файл = Новый Файл(ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Если ПерезаписатьВсе Тогда
					Файл.УстановитьТолькоЧтение(Ложь);
					УдалитьФайлы(ПолноеИмяФайла);
				ИначеЕсли ПереименоватьВсе Тогда
					НомерПоПорядку		= 1;
					ИмяБезРасширения	= Файл.ИмяБезРасширения;
					Расширение			= Файл.Расширение;
					Пока Истина Цикл
						ПолноеИмяФайла = КаталогСохранения + ИмяБезРасширения + "(" + Формат(НомерПоПорядку, "ЧРГ=") + ")" + Расширение;
						Файл = Новый Файл(ПолноеИмяФайла);
						Если НЕ Файл.Существует() Тогда Прервать; КонецЕсли;	
						НомерПоПорядку = НомерПоПорядку + 1;
					КонецЦикла;
				Иначе
					ТекстВопроса	= НСтр("ru='Файл " + ПолноеИмяФайла + " уже существует." + Символы.ПС + "Выберите действие для всех существующих файлов:'");
					СписокКнопок	= Новый СписокЗначений;
					СписокКнопок.Добавить("Перезаписать",	НСтр("ru='Перезаписать'"));
					СписокКнопок.Добавить("Переименовать",	НСтр("ru='Переименовать'"));
					СписокКнопок.Добавить("Отмена",			НСтр("ru='Отмена'"));
					ОтветНаВопрос = Вопрос(ТекстВопроса, СписокКнопок, , "Отмена");
					Если ОтветНаВопрос = "Перезаписать" Тогда
						ПерезаписатьВсе = Истина;
						Файл.УстановитьТолькоЧтение(Ложь);
						УдалитьФайлы(ПолноеИмяФайла);
					ИначеЕсли ОтветНаВопрос = "Переименовать" Тогда
						ПереименоватьВсе	= Истина;
						НомерПоПорядку		= 1;
						ИмяБезРасширения	= Файл.ИмяБезРасширения;
						Расширение			= Файл.Расширение;
						Пока Истина Цикл
							ПолноеИмяФайла = КаталогСохранения + ИмяБезРасширения + "(" + Формат(НомерПоПорядку, "ЧРГ=") + ")" + Расширение;
							Файл = Новый Файл(ПолноеИмяФайла);
							Если НЕ Файл.Существует() Тогда Прервать; КонецЕсли;	
							НомерПоПорядку = НомерПоПорядку + 1;
						КонецЦикла;
					Иначе
						Возврат;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
			РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
			ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб)
				|Пожалуйста, подождите...'"), ДанныеФайла.ИмяФайла, 
				РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
			Состояние(ТекстПояснения);
			ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		КонецЦикла;	
		// Выполняем проверку на дубли и меняем дублям имена сохраняемых файлов
		СписокИменФайлов = Новый СписокЗначений;
		Для Каждого ПолучаемыйФайл Из ПолучаемыеФайлы Цикл
			ЭлементСписка = СписокИменФайлов.НайтиПоЗначению(ПолучаемыйФайл.Имя);
			Если ЭлементСписка = Неопределено Тогда
				СписокИменФайлов.Добавить(ПолучаемыйФайл.Имя, "0");
			Иначе
				Файл = Новый Файл(ПолучаемыйФайл.Имя);
				ЭлементСписка.Представление = Строка(Число(ЭлементСписка.Представление) + 1);
				ПолучаемыйФайл.Имя = Файл.Путь + Файл.ИмяБезРасширения + "(" + ЭлементСписка.Представление + ")" + Файл.Расширение;
			КонецЕсли;
		КонецЦикла;
		// Выполняем сохранение файлов
		Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, , Ложь) Тогда
			ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак",  КаталогСохранения);
			Состояние(НСтр("ru = 'Файлы успешно сохранены.'"));
		КонецЕсли;
	Иначе
		#Если ВебКлиент Тогда
			Для НомерВложения = 0 По КоличествоВложений Цикл
				Если ТолькоВыделенные Тогда
					Если ВыделенныеВложения.Найти(НомерВложения) = Неопределено Тогда Продолжить; КонецЕсли;
				КонецЕсли;	
				ТекущееВложение = Вложения[НомерВложения];
				// Разрешаем сохранять картинки, вставленные в текст письма через вставку картинки, а также через интернет
				//Если НЕ (ТекущееВложение.CRM_ИдентификаторПочтовогоВложения = "#") Тогда Продолжить; КонецЕсли;
				// 
				ДанныеФайла = ПрисоединенныеФайлыКлиент.ПолучитьДанныеФайла(ТекущееВложение.Ссылка, УникальныйИдентификатор);
				РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
				Если РасширениеВложения = "EML" Тогда
					Сообщить(НСтр("ru = 'Вложение '") + ТекущееВложение.ИмяФайла + НСтр("ru = ' не может быть сохранено.'"));
					Продолжить;
				КонецЕсли;
				ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
			КонецЦикла;	
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеВыполнить(Команда)
	СохранитьВложения(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеВложениеВыполнить(Команда)
	СохранитьВложения(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРаботыСПочтой(Команда)
	
	ОткрытьФорму("Обработка.скMSExchange_МенеджерПочты.Форма.НастройкиРаботыСПочтой", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьПисьмо(Команда)
	Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка		= НЕ Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;
	ЭтаФорма.ПоказатьСкрытьПисьмоПометка					= Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;
	Если НЕ Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка Тогда
		Элементы.Описание.Видимость							= Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;
		Элементы.СписокПисемПоказатьСкрытьВложения.Пометка	= Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;
		ЭтаФорма.ПоказатьСкрытьВложенияПометка				= Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;				
		Элементы.Вложения.Видимость							= Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;	
	Иначе
		Элементы.ОписаниеПисьмаHTML.Видимость				= Истина;
		Элементы.Описание.Видимость							= ЭтаФорма.ПоказатьСкрытьПисьмоПометка;
	КонецЕсли;
	
	//Элементы.СписокПисемПоказатьСкрытьВложения.Доступность	= ЭтаФорма.ПоказатьСкрытьПисьмоПометка;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьВложения(Команда)
	
	Элементы.СписокПисемПоказатьСкрытьВложения.Пометка	= НЕ Элементы.СписокПисемПоказатьСкрытьВложения.Пометка;
	ЭтаФорма.ПоказатьСкрытьВложенияПометка				= Элементы.СписокПисемПоказатьСкрытьВложения.Пометка;
	Элементы.Вложения.Видимость							= ЭтаФорма.ПоказатьСкрытьВложенияПометка;
	Если  Элементы.СписокПисемПоказатьСкрытьВложения.Пометка Тогда
		Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка = Элементы.СписокПисемПоказатьСкрытьВложения.Пометка;	
		ЭтаФорма.ПоказатьСкрытьПисьмоПометка			 = Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;
		Элементы.Описание.Видимость						 = ЭтаФорма.ПоказатьСкрытьВложенияПометка;
		Элементы.ОписаниеПисьмаHTML.Видимость			 = Истина;
	ИначеЕсли НЕ Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка Тогда 
		 Элементы.Описание.Видимость					 = ЭтаФорма.ПоказатьСкрытьВложенияПометка;
	КонецЕсли;		
		
		
	//Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка	= Элементы.СписокПисемПоказатьСкрытьВложения.Пометка;
	//ЭтаФорма.ПоказатьСкрытьПисьмоПометка				= Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка;
	//Элементы.Описание.Видимость							= ЭтаФорма.ПоказатьСкрытьВложенияПометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеВложения(Команда)
	
	Элементы.СписокПисемВсеВложения.Пометка	= НЕ Элементы.СписокПисемВсеВложения.Пометка;
	ЭтаФорма.ВсеВложенияПометка				= Элементы.СписокПисемВсеВложения.Пометка;
	
	Если ЭтаФорма.ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		//Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("CRM_ИдентификаторПочтовогоВложения","#");
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИДФайлаЭлектронногоПисьма","#");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаВидСпискаСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки)
	CRM_ОбщегоНазначенияКлиентСервер.ОтборПоЗначениюВТекущейКолонкеСбросить(ЭтаФорма);
	CRM_ОбщегоНазначенияКлиентСервер.ОбработкаКомандыПользовательскихНастроекДинамическогоСписка(ЭтаФорма, СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаВидСписка(Команда)
	СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаКлиент();
	ПризнакИзмененыНастройки = Ложь;
	CRM_ОбщегоНазначенияКлиент.ПользовательскиеНастройкиСпискаОбработкаВыбораНастройки(ЭтаФорма, СвойстваДинамическогоСписка, Команда, ПризнакИзмененыНастройки);
	
	КомандаВидСпискаСервер(СвойстваДинамическогоСписка, ПризнакИзмененыНастройки);
	
	ОбработчикОжиданияПанельУправленияПриАктивизацииСтроки();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["ПоказатьСкрытьПисьмоПометка"] = Неопределено Тогда
		ЭтаФорма.ПоказатьСкрытьПисьмоПометка	= Настройки["ПоказатьСкрытьПисьмоПометка"];
	Иначе
		ЭтаФорма.ПоказатьСкрытьПисьмоПометка	= Истина;
	КонецЕсли;
	Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка	= ЭтаФорма.ПоказатьСкрытьПисьмоПометка;
	Элементы.Описание.Видимость							= ЭтаФорма.ПоказатьСкрытьПисьмоПометка;
	
	Если НЕ Настройки["ПоказатьСкрытьВложенияПометка"] = Неопределено Тогда
		ЭтаФорма.ПоказатьСкрытьВложенияПометка	= Настройки["ПоказатьСкрытьВложенияПометка"];
	Иначе
		ЭтаФорма.ПоказатьСкрытьВложенияПометка	= Ложь;
	КонецЕсли;
	
	Если НЕ Настройки["ВсеВложенияПометка"] = Неопределено Тогда
		ЭтаФорма.ВсеВложенияПометка	= Настройки["ВсеВложенияПометка"];
	Иначе
		ЭтаФорма.ВсеВложенияПометка	= Ложь;
	КонецЕсли;
	Элементы.СписокПисемВсеВложения.Пометка = ЭтаФорма.ВсеВложенияПометка;
	
	Элементы.СписокПисемПоказатьСкрытьВложения.Пометка	= ЭтаФорма.ПоказатьСкрытьВложенияПометка;
	Элементы.Вложения.Видимость							= ЭтаФорма.ПоказатьСкрытьВложенияПометка;
	Если  ЭтаФорма.ПоказатьСкрытьВложенияПометка Тогда
		Элементы.Описание.Видимость						 = ЭтаФорма.ПоказатьСкрытьВложенияПометка;
		Элементы.СписокПисемПоказатьСкрытьПисьмо.Пометка = ЭтаФорма.ПоказатьСкрытьВложенияПометка;
	КонецЕсли;
	
	Если УчетныеЗаписи.Количество() > 0 тогда
		Строки = УчетныеЗаписи.НайтиСтроки(Новый Структура("УчетнаяЗапись", УчетнаяЗаписьВыбранная));
		Если Строки.Количество() = 0 тогда
			УчетнаяЗаписьВыбранная = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись", "ОсновнаяУчетнаяЗапись");
			Строки = УчетныеЗаписи.НайтиСтроки(Новый Структура("УчетнаяЗапись", УчетнаяЗаписьВыбранная));
			Если Строки.Количество() = 0 тогда
				УчетнаяЗаписьВыбранная = УчетныеЗаписи[0].УчетнаяЗапись;
			КонецЕсли;
		КонецЕсли;
	Иначе
		УчетнаяЗаписьВыбранная = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ Настройки["ХранениеШириныКолонокРежимов"] = Неопределено ИЛИ Настройки["ХранениеШириныКолонокРежимов"] = Неопределено Тогда
		ХранениеШириныКолонокРежимов	= Новый Структура;
	Иначе
		ХранениеШириныКолонокРежимов	= Настройки["ХранениеШириныКолонокРежимов"];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПисьмаHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	CRM_ОбщегоНазначенияКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, ТекущееПисьмо, Элемент.Документ);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаИИсправлениеВходящихПисем(Команда)
	
	ОткрытьФорму("Обработка.CRM_ПроверкаВходящихПисем.Форма", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПапкуВходящиеУчетнойЗаписи(УчетнаяЗаписьПапки, ВидПапки = Неопределено) Экспорт
	
	УчетнаяЗаписьВыбранная = УчетнаяЗаписьПапки;
	
	Если ВидПапки = Неопределено ИЛИ ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Входящие") Тогда
		НаименованиеПапки = "Входящие";
	ИначеЕсли ВидПапки = ПредопределенноеЗначение("Перечисление.CRM_ВидыПапокЭлектроннойПочты.Черновики") Тогда
		НаименованиеПапки = "Черновики";
	КонецЕсли;
	
	Ссылка = СправочникНайтиПоНаименованию("ПапкиЭлектронныхПисем",НаименованиеПапки, УчетнаяЗаписьВыбранная);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СтруктураОтбора = Новый Структура("Папка",Ссылка);
		НомерСтроки = ДеревоНайтиСтрокуПоСвойству(ДеревоУчетныхЗаписей, СтруктураОтбора);
		ЭтаФорма.Элементы.ПанельУправления.ТекущаяСтрока = НомерСтроки;
	ИначеЕсли ЗначениеЗаполнено(УчетнаяЗаписьВыбранная) тогда
		ЭтаФорма.Элементы.ПанельУправления.ТекущаяСтрока = 0;
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ПолучитьСсылкуПоДаннымСообщения(КлючЗаписи, УчетнаяЗапись, СтрокаОшибки = "") 

	ДанныеСообщения = скMSExchange_ОбменПочтовымиСообщениямиСервер.ПолучитьДанныеМенеджераСообщенияПоID(
		КлючЗаписи.СерверMSExchange, КлючЗаписи.ID, КлючЗаписи.ChangeKey);
	Если Не ДанныеСообщения.Выбран() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПисьмоСсылка = скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.ЗагрузитьОбновитьПочтовоеСообщенияВ1С(ДанныеСообщения, УчетнаяЗапись, СтрокаОшибки);
	Если Не ЗначениеЗаполнено(ПисьмоСсылка) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Возврат ПисьмоСсылка;
	
КонецФункции // ПолучитьДанныеСообщения()

&НаКлиенте
Процедура КомандаВыполнитьОбмен(Команда)	
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьВыбранная) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Укажите учетную запись эл. почты в списке. '"));
		Возврат;	
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Обмен электронными сообщениями: '"),, 
		НСтр("ru = 'Выполняется обмен электронными сообщениями...'"), БиблиотекаКартинок.скСинхронизацияДанныхДлительнаяОперация48);
		
	СтрокаОшибки = "";
	скMSExchange_ОбменПочтовымиСообщениямиВызовСервера.СинхронизироватьПоНастройкеОбмена(ЗначениеРеквизитаОбъекта(УчетнаяЗаписьВыбранная, "скНастройкаОбменаПочтовымиСообщениями"), 
		УчетнаяЗаписьВыбранная, СтрокаОшибки);
		
	Если ЗначениеЗаполнено(СтрокаОшибки) Тогда
		ПоказатьПредупреждение(, СтрокаОшибки);
		
	КонецЕсли;
	
	ЗаполнитьДеревоУчетныхЗаписей();

	ОбновитьКоличествоНовыхПисемВПапках();
	Элементы.СписокПисем.Обновить();
	
	РазвернутьСтрокиДереваРекурсивно(ДеревоУчетныхЗаписей.ПолучитьЭлементы(), Элементы.ПанельУправления);
	
	Состояние(НСтр("ru = 'Обмен электронными сообщениями: '"),, 
		НСтр("ru = 'Обмен электронными сообщениями завершен'"), БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПриУдалении(КлючЗаписи, УчетнаяЗапись, ТекущееПисьмо)
	
КонецПроцедуры // ВыполнитьДействияПриУдалении()

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
КонецФункции // ЗначениеРеквизитаОбъекта()

&НаКлиенте
Процедура РазвернутьСтрокиДереваРекурсивно(ЭлементыДерева, ЭлементФормы)
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		ЭлементФормы.Развернуть(	
			ЭлементДерева.ПолучитьИдентификатор()
		);		
		
		РазвернутьСтрокиДереваРекурсивно(ЭлементДерева.ПолучитьЭлементы(), ЭлементФормы);
	
	КонецЦикла;

КонецПроцедуры
