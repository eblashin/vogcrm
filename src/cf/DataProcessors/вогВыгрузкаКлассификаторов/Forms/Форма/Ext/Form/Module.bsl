&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.вогВыгрузкаКлассификаторов.ПолучитьМакет("СхемаПолученияКлассификаторов");	
		
	АдресСхемыКомпоновкиДанных    = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	АдресНастроекКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных.НастройкиПоУмолчанию, Новый УникальныйИдентификатор());	
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	Настройки = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных);
	Если Настройки <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);	
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Синхронизировать(Команда)
	СинхронизироватьКлиент();
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеПроцедурыФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ОбработкаРезультатаСинхронизацииКлиент();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Возврат;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

&НаКлиенте
Процедура СинхронизироватьКлиент()
	
	ЗаданиеВыполнено = СинхронизироватьСервер();
	Если ЗаданиеВыполнено Тогда
		ОбработкаРезультатаСинхронизацииКлиент();
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);

КонецПроцедуры // СинхронизироватьКлиент()

&НаСервере
Функция СинхронизироватьСервер()

	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ЗаданиеВыполнено = Ложь;
	
	ОписаниеСхемы = Новый Структура;
	ОписаниеСхемы.Вставить("СхемаКомпоновкиДанных"    , ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных));
	ОписаниеСхемы.Вставить("НастройкиКомпоновкиДанных", КомпоновщикНастроек.ПолучитьНастройки());
		
	НаименованиеЗадания = НСтр("ru = 'Синхронизация классификаторов объектов.'");
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ОписаниеСхемы);
	ПараметрыВыполнения.Добавить(АдресХранилища);
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;                  
	
	Задание = ФоновыеЗадания.Выполнить("CRM_КлассификаторыВызовСервера.СинхронизироватьОбъектыКлассификаторов", 
		ПараметрыВыполнения,, НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение  
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Синхронизация классификаторов объектов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
		ЗаданиеВыполнено = Истина;
		
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции // СинхронизироватьСервер()

&НаСервере
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) 
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаСинхронизацииКлиент()

	РезультатСинхронизации = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(РезультатСинхронизации) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатСинхронизации.ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатСинхронизации.ТекстСообщения);	
	КонецЕсли;
	
	Если Не РезультатСинхронизации.Результат Тогда
		Картинка 	   = БиблиотекаКартинок.Ошибка32;
		ТекстПояснения = НСтр("ru = 'Не удалось выполнить синхронизацию набора данных'");		
	Иначе	
		Картинка 	   = БиблиотекаКартинок.Информация32;
		ТекстПояснения = НСтр("ru = 'Синхронизация набора данных выполнена успешно.'");		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Синхронизация набора данных'"),, ТекстПояснения, Картинка); 
	Закрыть();
	
КонецПроцедуры // ОбработкаПолученныхДанных()

#КонецОбласти
