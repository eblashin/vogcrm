&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Задача") И ЗначениеЗаполнено(Параметры.Задача) Тогда
		Задача						= Параметры.Задача;
		ПереданныйСписокСостояний	= Параметры.СписокСостояний;
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтапВоронки") Тогда
		Если ЗначениеЗаполнено(Задача) Тогда
			Для Каждого ЭлементСписокаСостояний ИЗ ПереданныйСписокСостояний Цикл
				Если НЕ Параметры.ЭтапВоронки.Состав.Найти(ЭлементСписокаСостояний.Значение.Состояние, "ТочкаМаршрута") = Неопределено Тогда
					СписокСостояний.Добавить(ЭлементСписокаСостояний.Значение,ЭлементСписокаСостояний.Представление);
				КонецЕсли;
			КонецЦикла;
			Если СписокСостояний.Количество() = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Переход интереса на данный этап невозможен!'"),,,, Отказ);
				Возврат;
			КонецЕсли;
			СостояниеИнтересаУстановить		= СписокСостояний[0].Значение.Состояние;
			СостояниеИнтересаПредставление	= СписокСостояний[0].Представление;
			Этап							= СписокСостояний[0].Значение.Этап;
			ВариантВыполнения				= СписокСостояний[0].Значение.ВариантВыполнения;
			ЭтоПереход						= СписокСостояний[0].Значение.ЭтоПереход;
		Иначе
			Для Каждого тЭлемент Из Параметры.ЭтапВоронки.Состав Цикл
				Если ТипЗнч(тЭлемент.ТочкаМаршрута) = Тип("СправочникСсылка.CRM_СостоянияИнтересов") Тогда
					СписокСостояний.Добавить(тЭлемент.ТочкаМаршрута);
				КонецЕсли;
			КонецЦикла;
			
			СостояниеИнтересаУстановить = СписокСостояний[0].Значение;
			СостояниеИнтересаПредставление = Строка(СписокСостояний[0].Значение);
		КонецЕсли;
		ДатаНовогоВзаимодействия = ТекущаяДатаСеанса() + 86400;
		ЗаполнитьСписокВыбораВидВзаимодействий();
	КонецЕсли;
	
	Если СписокСостояний.Количество() = 1 Тогда
		Элементы.СостояниеИнтересаПредставление.Вид = ВидПоляФормы.ПолеНадписи;
	КонецЕсли;
	
	РазрешатьСозданиеИнтересовПоОдномуТипуУслуги = Константы.CRM_РазрешатьСозданиеИнтересовПоОдномуТипуУслуги.Получить();
	
	Интерес = Параметры.Интерес;
	ОжидаемаяВыручкаУстановить = Интерес.ОжидаемаяВыручка;
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	СодержаниеНовогоВзаимодействия = ВидНовогоВзаимодействия.Наименование;
	ЗначениеВРеквизитФормы(Интерес.ПолучитьОбъект(), "ИнтересОбъект");
	ЗаполнятьПервичныйИнтерес = Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить();
	ИнтересОбъект.СостояниеИнтереса = СостояниеИнтересаУстановить;
	Если НЕ СостояниеИнтересаУстановить.УказаниеОжидаемойВыручки Тогда
		Элементы.ОжидаемаяВыручкаУстановить.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ОжидаемаяВыручкаУстановить.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.CRM_ВидыВзаимодействий") И Источник.ВладелецФормы = ЭтотОбъект Тогда
		ЗаполнитьСписокВыбораВидВзаимодействий();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВидВзаимодействий()
	Элементы.ВидНовогоВзаимодействия.СписокВыбора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_ВидыВзаимодействий.Ссылка,
	|	CRM_ВидыВзаимодействий.Наименование КАК Наименование,
	|	CRM_ВидыВзаимодействий.ВидСобытия,
	|	CRM_ВидыВзаимодействий.Баллы
	|ИЗ
	|	Справочник.CRM_ВидыВзаимодействий КАК CRM_ВидыВзаимодействий
	|ГДЕ
	|	НЕ CRM_ВидыВзаимодействий.ПометкаУдаления
	|	И CRM_ВидыВзаимодействий.СостояниеИнтереса = &СостояниеИнтереса
	|	И CRM_ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|	И CRM_ВидыВзаимодействий.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Интерес)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Запрос.УстановитьПараметр("СостояниеИнтереса", СостояниеИнтересаУстановить);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Элементы.ВидНовогоВзаимодействия.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка, "[" + ВыборкаДетальныеЗаписи.ВидСобытия + "] " + ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(ВидНовогоВзаимодействия) И Элементы.ВидНовогоВзаимодействия.СписокВыбора.Количество() <> 0 Тогда
		ВидНовогоВзаимодействия = Элементы.ВидНовогоВзаимодействия.СписокВыбора[0].Значение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОбработатьИнтересНаСервере()
	
	Результат = Новый Структура("Успех, Сообщение, Взаимодействие");
	// обработка интереса
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	CRM_Взаимодействие.Ссылка,
	|	CRM_Взаимодействие.Задача КАК Задача
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК CRM_Взаимодействие
	|ГДЕ
	|	CRM_Взаимодействие.ДокументОснование = &Интерес
	|	И CRM_Взаимодействие.СтатусВзаимодействия <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Отменено)
	|	И CRM_Взаимодействие.СтатусВзаимодействия <> ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Завершено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_Взаимодействие.ПлановаяДата УБЫВ";
	Запрос.УстановитьПараметр("Интерес", Интерес);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Первое = Истина;
	
	Попытка
		СсылкаНаЗадачу = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВзаимодействиеОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Если Первое Тогда
				ВзаимодействиеОбъект.Результат = РезультатТекущегоВзаимодействия;
				ВзаимодействиеОбъект.СостояниеИнтереса = СостояниеИнтересаУстановить;
				ВзаимодействиеОбъект.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
				ВзаимодействиеОбъект.ЗавершившийПользователь = Пользователи.ТекущийПользователь();
				ВзаимодействиеОбъект.ОжидаемаяВыручка = ОжидаемаяВыручкаУстановить;
				ВзаимодействиеОбъект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено;
				ВзаимодействиеОбъект.Записать();
				
				Если ЗначениеЗаполнено(Задача) И Задача = ВыборкаДетальныеЗаписи.Задача Тогда
					Если ЭтоПереход Тогда
						ЗадачаОбъект								= Задача.ПолучитьОбъект();
						ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ВзаимодействиеОбъект.ДатаЗавершенияВзаимодействия);
						
						ПоследнееДействиеСтрокой = ДатаСтрокой+" "+НСтр("ru = 'Завешнено взаимодействие"""+ВзаимодействиеОбъект.ВидВзаимодействия+""" -> '") + Строка(ВзаимодействиеОбъект.Ответственный);
						
						Если ПоследнееДействиеСтрокой = ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой Тогда
							СтрокаДляЗамены = ПоследнееДействиеСтрокой + Символы.ПС + ВзаимодействиеОбъект.Результат + Символы.ПС;
							ЗадачаОбъект.РезультатВыполнения = СтрЗаменить(ЗадачаОбъект.РезультатВыполнения,ПоследнееДействиеСтрокой + Символы.ПС,СтрокаДляЗамены);
						Иначе
							ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой = ПоследнееДействиеСтрокой;
							
							ЗадачаОбъект.РезультатВыполнения = ПоследнееДействиеСтрокой + Символы.ПС + ВзаимодействиеОбъект.Результат + ?(ПустаяСтрока(ЗадачаОбъект.РезультатВыполнения),"",Символы.ПС) + "
							|"+ЗадачаОбъект.РезультатВыполнения;
						КонецЕсли;
						ЗадачаОбъект.Записать();
						
						Если (ВзаимодействиеОбъект.СостояниеИнтереса = Справочники.CRM_СостоянияИнтересов.ИнтересПотерян И Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка())
							ИЛИ Этап.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
							
							ПараметрыДосрочногоЗавершения = Новый Структура();
							ПараметрыДосрочногоЗавершения.Вставить("ЗавершенДосрочно"				,Истина);
							ПараметрыДосрочногоЗавершения.Вставить("ПричинаДосрочногоЗавершения"	,Справочники.CRM_ПричиныОтказов.ПустаяСсылка());
							ПараметрыДосрочногоЗавершения.Вставить("Задача"							,ЗадачаОбъект.Ссылка);
							
							Если Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка() Тогда
								ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	,ЗадачаОбъект.CRM_ТочкаМаршрута);
								ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"			,Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
							Иначе
								ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	,Этап);
								ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"			,Этап.ВариантЗавершения);
							КонецЕсли;
							
							CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения);
						Иначе
							CRM_БизнесПроцессыСервер.ВыполнитьПереходБизнесПроцессаНаЭтап(ЗадачаОбъект.БизнесПроцесс, Этап);
						КонецЕсли;
					Иначе
						ЗадачаОбъект								= Задача.ПолучитьОбъект();
						ЗадачаОбъект.CRM_ВариантВыполнения			= ВариантВыполнения;
						Попытка
							ЗадачаОбъект.CRM_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(ЗадачаОбъект.CRM_ТочкаМаршрута,
							ВариантВыполнения,
							ЗадачаОбъект.БизнесПроцесс.НомерВерсииКартыМаршрута);
						Исключение
						КонецПопытки;
						ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ВзаимодействиеОбъект.ДатаЗавершенияВзаимодействия);
						
						ПоследнееДействиеСтрокой = ДатаСтрокой+" "+НСтр("ru = 'Завешнено взаимодействие"""+ВзаимодействиеОбъект.ВидВзаимодействия+""" -> '") + Строка(ВзаимодействиеОбъект.Ответственный);
						
						Если ПоследнееДействиеСтрокой = ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой Тогда
							СтрокаДляЗамены = ПоследнееДействиеСтрокой + Символы.ПС + ВзаимодействиеОбъект.Результат + Символы.ПС;
							ЗадачаОбъект.РезультатВыполнения = СтрЗаменить(ЗадачаОбъект.РезультатВыполнения,ПоследнееДействиеСтрокой + Символы.ПС,СтрокаДляЗамены);
						Иначе
							ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой = ПоследнееДействиеСтрокой;
							
							ЗадачаОбъект.РезультатВыполнения = ПоследнееДействиеСтрокой + Символы.ПС + ВзаимодействиеОбъект.Результат + ?(ПустаяСтрока(ЗадачаОбъект.РезультатВыполнения),"",Символы.ПС) + "
							|"+ЗадачаОбъект.РезультатВыполнения;
						КонецЕсли;
						ЗадачаОбъект.Записать();
						
						CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(ЗадачаОбъект.Ссылка,,Неопределено,,Новый Структура("Взаимодействие", ВзаимодействиеОбъект.Ссылка));
					КонецЕсли;
					
					Если НЕ ЗадачаОбъект.БизнесПроцесс.Завершен Тогда
						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("Интерес",Интерес);
						Запрос.УстановитьПараметр("CRM_СостояниеИнтереса",ВзаимодействиеОбъект.СостояниеИнтереса);
						Запрос.Текст = "ВЫБРАТЬ
						|	ЗадачаИсполнителя.Ссылка
						|ИЗ
						|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
						|ГДЕ
						|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
						|	И ЗадачаИсполнителя.CRM_СостояниеИнтереса = &CRM_СостояниеИнтереса
						|	И НЕ ЗадачаИсполнителя.Выполнена";
						
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							СсылкаНаЗадачу = Выборка.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ВзаимодействиеОбъект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено;
				ВзаимодействиеОбъект.Записать();
			КонецЕсли;
			Первое = Ложь;
		КонецЦикла;
		
		ПлановаяДата = ДатаНовогоВзаимодействия + Час(ВремяНовогоВзаимодействия)*3600 + Минута(ВремяНовогоВзаимодействия)*60 + Секунда(ВремяНовогоВзаимодействия);
		НовоеВзаимодействие = Документы.CRM_Взаимодействие.СоздатьДокумент();
		НовоеВзаимодействие.Дата					= ТекущаяДатаСеанса();
		НовоеВзаимодействие.Автор					= ТекущийПользователь;
		НовоеВзаимодействие.Баллы					= ВидНовогоВзаимодействия.Баллы;
		НовоеВзаимодействие.ВидВзаимодействия		= ВидНовогоВзаимодействия;
		НовоеВзаимодействие.ДокументОснование		= Интерес;
		НовоеВзаимодействие.КонтактноеЛицо			= Интерес.КонтактноеЛицо;
		НовоеВзаимодействие.ОжидаемаяВыручка		= ОжидаемаяВыручкаУстановить;
		НовоеВзаимодействие.Ответственный			= Интерес.Ответственный;
		НовоеВзаимодействие.Партнер					= Интерес.Партнер;
		НовоеВзаимодействие.ПлановаяДата			= ПлановаяДата;
		НовоеВзаимодействие.Подразделение			= Интерес.Подразделение;
		НовоеВзаимодействие.ПотенциальныйКлиент		= Интерес.ПотенциальныйКлиент;
		НовоеВзаимодействие.Содержание				= СодержаниеНовогоВзаимодействия;
		НовоеВзаимодействие.СостояниеИнтереса		= СостояниеИнтересаУстановить;
		НовоеВзаимодействие.СтатусВзаимодействия	= Справочники.CRM_СостоянияСобытий.Запланировано;
		НовоеВзаимодействие.Организация				= Интерес.Организация;
		НовоеВзаимодействие.ПлановаяДатаЗавершение	= ПлановаяДата + 60*15;
		НовоеВзаимодействие.Задача					= СсылкаНаЗадачу;
		НовоеВзаимодействие.Записать();
		
		ИнтересОбъект.ОжидаемаяВыручка = ОжидаемаяВыручкаУстановить;
		ИнтересОбъект.СостояниеИнтереса = СостояниеИнтересаУстановить;
		ИнтересОбъект.ДатаСледующегоДействия = ПлановаяДата;
		РеквизитФормыВЗначение("ИнтересОбъект", Тип("ДокументОбъект.CRM_Интерес")).Записать();
		
		Результат.Взаимодействие = Интерес;
		Результат.Успех = Истина;
	Исключение
		Результат.Взаимодействие = Неопределено;
		Результат.Успех = Ложь;
		Результат.Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
// Функция формирует список рабочих часов с учетом настроек пользователя от начала рабочего дня 
// до окончания с интервалом в полчаса.
//
// Параметры:
// 	Время - Дата
//
// Возвращаемое значение:
//	СписокЧасов - СписокЗначений
Функция ВыбратьВремяИзСписка(Знач СтароеЗначениеВСписке)
	
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСписокРабочегоВремениПользователя(ТекущийПользователь);
	
КонецФункции

&НаКлиенте
Процедура Обработать(Команда)
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПередЗаписью(Отказ);
	Если НЕ Отказ Тогда
		ЗаписатьПервичныйИнтерес();
		Результат = ОбработатьИнтересНаСервере();
		Закрыть(Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ВидНовогоВзаимодействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элементы.ВидНовогоВзаимодействия.СписокВыбора.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ВидНовогоВзаимодействияСоздание(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидНовогоВзаимодействияСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Направление", ПредопределенноеЗначение("Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее"));
	ЗначенияЗаполнения.Вставить("ВидДела", ПредопределенноеЗначение("Справочник.CRM_ВидыДелВзаимодействий.Интерес"));
	ЗначенияЗаполнения.Вставить("СостояниеИнтереса", СостояниеИнтересаУстановить);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.CRM_ВидыВзаимодействий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНовогоВзаимодействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("ДатаПоУмолчанию", ТекущаяДата());
	СтруктураПараметров.Вставить("РежимВыбора", Истина);
	//CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(ИнтересОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	СтруктураДопПараметров = Новый Структура("Элемент", Элемент);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, СтруктураДопПараметров);
	ОткрытьФорму("Обработка.CRM_КалендарьМенеджера.Форма.Форма", СтруктураПараметров, ЭтотОбъект, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно, ,ОП, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНовогоВзаимодействияПриИзменении(Элемент)
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("ТипУслуги", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Интерес ,"ТипУслуги"));
	СтруктураПараметров.Вставить("ДатаПоУмолчанию", ДатаНовогоВзаимодействия);
	ПотенциальныйКлиент	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Интерес ,"ПотенциальныйКлиент");
	Если ЗначениеЗаполнено(ПотенциальныйКлиент) Тогда
		СтруктураПараметров.Вставить("Клиент", ПотенциальныйКлиент);
	Иначе	
		СтруктураПараметров.Вставить("Клиент", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Интерес ,"Партнер"));
	КонецЕсли;	
	СтруктураПараметров.Вставить("Автор", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Интерес ,"Автор"));
	СтруктураПараметров.Вставить("Ответственный", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Интерес ,"Ответственный"));
	
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияПриИзменении(Интерес, Элемент, СтруктураПараметров);
	
	Если СтруктураПараметров.Свойство("Дата") Тогда
		// Сбрасываем дату
		ДатаНовогоВзаимодействия = СтруктураПараметров.Дата;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВремяНовогоВзаимодействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокЧасов = ВыбратьВремяИзСписка(ВремяНовогоВзаимодействия);
	
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оп, СписокЧасов, Элемент);
КонецПроцедуры

&НаКлиенте
// Процедура обработки выбора времени из списка.
//
Процедура ОбработкаОповещенияВыбранногоВремени(Параметры, Дополнительно) Экспорт
	Если Параметры <> Неопределено Тогда
		Если ТипЗнч(Параметры) = Тип("Дата") Тогда
			ДатаНовогоВзаимодействия = Параметры;
			ДатаНовогоВзаимодействияПриИзменении(Дополнительно.Элемент);
		Иначе	
			ВремяНовогоВзаимодействия = Параметры.Значение;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидНовогоВзаимодействияПриИзменении(Элемент)
	СодержаниеНовогоВзаимодействия = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВидНовогоВзаимодействия, "Наименование");
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ)
	ДокументЗаписан = Ложь;
	Если Не ИнтересОбъект.Завершен Тогда
		Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
			Если НЕ ЗначениеЗаполнено(ИнтересОбъект.КонтактноеЛицо) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен контакт'"));
				Отказ = Истина;
			КонецЕсли;	
		ИначеЕсли НЕ ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен потенциальный клиент'"));
			Отказ = Истина;
		КонецЕсли;	
		Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
			Если НЕ РазрешатьСозданиеИнтересовПоОдномуТипуУслуги И НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтереса(ИнтересОбъект) Тогда
				ПоказатьПредупреждение(, НСтр("ru='Обнаружен активный интерес клиента по выбранному типу услуги, запись документа отменена!'"));
				Отказ = Истина;
			КонецЕсли;	
		Иначе
			Если НЕ (ИнтересОбъект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ИнтересПотерян")) Тогда
				Если НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтересаПотенциальногоКлиента(ИнтересОбъект) Тогда
					ПоказатьПредупреждение(, НСтр("ru='Обнаружен активный интерес потенциального клиента, запись документа отменена!'"));
					Отказ = Истина;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
		Если НЕ ((ИнтересОбъект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПервичныйИнтерес"))
			ИЛИ (ИнтересОбъект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ВыявлениеПотребностей"))
			ИЛИ (ИнтересОбъект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ИнтересПотерян"))) Тогда
			Если НЕ ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен клиент'"));
				Отказ = Истина;
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(ИнтересОбъект.КонтактноеЛицо) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено контактное лицо'"));
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверяем, что поля подразделение и офис заполнены.
	Если Не ЗначениеЗаполнено(ИнтересОбъект.Подразделение)  Тогда
		ПодразделениеПользователя = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИнтересОбъект.Ответственный, "Подразделение");
		Если ЗначениеЗаполнено(ПодразделениеПользователя) Тогда
			ИнтересОбъект.Подразделение	= ПодразделениеПользователя;
		Иначе
			ТекстСообщения = Нстр("ru = 'У текущего пользователя не заполнено подразделение!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ИнтересОбъект.Ответственный);
			Отказ = Истина;
			Возврат;
		КонецЕсли;						
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(ИнтересОбъект.Офис)  Тогда		
		ОфисПодразделения = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИнтересОбъект.Подразделение, "CRM_офис");			
		Если ЗначениеЗаполнено(ОфисПодразделения) Тогда
			ИнтересОбъект.Офис	= ОфисПодразделения;
		Иначе				
			ТекстСообщения = Нстр("ru = 'У подразделения пользователя не заполнен офис!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ИнтересОбъект.Подразделение);
			Отказ = Истина;				
			Возврат;
		КонецЕсли;									
	КонецЕсли;	
	
КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ПроверкаЗаполнения(ПроверяемыеРеквизиты);
КонецПроцедуры

&НаСервере
// Процедура удаляет из массива проверяемых реквизитов реквизит с указанным именем.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//	ИмяРеквизита			- Строка	- Имя удаляемого реквизита.
//
Процедура УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, ИмяРеквизита)
	Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если НЕ (Индекс = Неопределено) Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры // УдалитьИзПроверяемыхРеквизитов()

&НаСервере
// Процедура убирает лишние реквизиты из массива реквизитов для проверки на заполнение.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//
Процедура ПроверкаЗаполнения(ПроверяемыеРеквизиты)
	Если ЗаполнятьПервичныйИнтерес Тогда
		Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
			НаличиеУчастников = ?(ЗначениеЗаполнено(ИнтересОбъект.Партнер), Истина, Ложь);
		Иначе
			НаличиеУчастников = ?(ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент), Истина, Ложь);
		КонецЕсли;	
		Если НаличиеУчастников Тогда
			Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
				Если ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
					УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
				КонецЕсли;
			КонецЕсли;
		Иначе
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
		КонецЕсли;
	Иначе	
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
	Попытка
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Исключение
		ПредыдущийИсточник	= Неопределено;
	КонецПопытки;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
	Если НЕ СостояниеИнтересаУстановить.УказаниеОжидаемойВыручки Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ОжидаемаяВыручкаУстановить");
	КонецЕсли;
	
КонецПроцедуры // ПроверяемыеРеквизиты()

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьНовогоКлиента".
//
Процедура СоздатьНовогоКлиента(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПотенциальныйКлиент", ИнтересОбъект.ПотенциальныйКлиент);
	CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, ПараметрыФормы);
КонецПроцедуры // СоздатьНовогоКлиента()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Создан новый партнер" Тогда
		Если ТипЗнч(Источник) = Тип("УправляемаяФорма") Тогда
			Попытка
				бФормаОткрытаИзФормыЭтогоСобытия = (Источник.ВладелецФормы = ЭтотОбъект);
			Исключение
				бФормаОткрытаИзФормыЭтогоСобытия = Ложь;
			КонецПопытки;
		Иначе
			бФормаОткрытаИзФормыЭтогоСобытия = Ложь;
		КонецЕсли;
		Если бФормаОткрытаИзФормыЭтогоСобытия Тогда
			Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
				ИнтересОбъект.Партнер = Параметр;
				ИнтересОбъект.КонтактноеЛицо	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИнтересОбъект.Партнер, "CRM_ОсновноеКонтактноеЛицо");
			ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				ИнтересОбъект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
				ИнтересОбъект.КонтактноеЛицо	= Параметр;
			КонецЕсли;
			Элементы.ГруппаПотенциальныйКлиент.Видимость = Ложь;			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура определяет доступность первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура ДоступностьПервичногоИнтереса()
	Попытка
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Исключение
		ПредыдущийИсточник	= Неопределено;
	КонецПопытки;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
		НаличиеУчастников = ?(ЗначениеЗаполнено(ИнтересОбъект.Партнер), Истина, Ложь);
	Иначе
		НаличиеУчастников = ?(ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент), Истина, Ложь);
	КонецЕсли;	
	Если НЕ ТолькоПросмотр Тогда
		Если НаличиеУчастников Тогда
			Элементы.КаналПервичногоИнтереса.Доступность	= Истина;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.КаналПервичногоИнтереса.Доступность		= Ложь;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр		= Истина;
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И НЕ (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Истина;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Истина;
		КонецЕсли;
	КонецЕсли;	
	// Отметки незаполненного
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	ИначеЕсли НЕ Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		// Если объязательно заполнять актуальный источник привлечения, тогда подсвечиваем канал первичного интереса.
		Если ЗаполнятьПервичныйИнтерес Тогда
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
		Иначе
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если Канал
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	КонецЕсли;
КонецПроцедуры // ДоступностьПервичногоИнтереса()

&НаСервере
// Процедура получает предыдущий интерес партнера.
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру(ДатаАктуальности)
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
		ИнтересПервичный = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(ИнтересОбъект.Дата, , ИнтересОбъект.Партнер);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИнтересПервичный) И ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент) Тогда
		ИнтересПервичный = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(ИнтересОбъект.Дата, , ИнтересОбъект.ПотенциальныйКлиент);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ИнтересПервичный) И ЗначениеЗаполнено(ИнтересПервичный.КаналПервичногоИнтереса) Тогда
		СтрокаПервичногоИнтереса = ПервичныйИнтерес.Вставить(0);
		ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса, ИнтересПервичный);
		СтрокаПервичногоИнтереса.КаналПервичногоИнтереса	= ИнтересПервичный.КаналПервичногоИнтереса;
		СтрокаПервичногоИнтереса.ИсточникПервичногоИнтереса	= ИнтересПервичный.ИсточникПервичногоИнтереса;
		СтрокаПервичногоИнтереса.Актуальность = Истина;			
		Если ЗначениеЗаполнено(ИнтересПервичный.КаналПервичногоИнтереса) 
			И ТипЗнч(ИнтересПервичный.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) 
					= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			Если ЗначениеЗаполнено(ИнтересПервичный.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность = ИнтересПервичный.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(ИнтересОбъект.Дата);
				ДатаАктуальности = ИнтересПервичный.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности;
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;
КонецПроцедуры // ПолучитьПредыдущийПервичныйИнтересПоПартнеру()

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	ДоступностьПервичногоИнтереса();
	Если ИсточникПервичногоИнтереса = Неопределено ИЛИ ИсточникПервичногоИнтереса.Пустая() Тогда
		Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(КаналПервичногоИнтереса, "ТипЗначения"));
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Если ТипПВХ(КаналПервичногоИнтереса)= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
			ЭлементОтбора.ПравоеЗначение	= Истина;
			ЭлементОтбора.Использование		= Истина;
			ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
			ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
			ЭлементОтбора.ПравоеЗначение	= НачалоДня(ТекущаяДата());
			ЭлементОтбора.Использование		= Истина;
			ФормаВыбора.Открыть();
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(ИсточникПервичногоИнтереса) И (ТипЗнч(ИсточникПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИсточникПервичногоИнтереса, "Владелец"));
			КонецЕсли;	
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеВыбораПартнера);
		КонецЕсли;	
	КонецЕсли;
	ДоступностьПервичногоИнтереса();
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает тип значения элемента ПВХ.
//
// Параметры:
//	ПВХСсылкка	- ЛюбаяСсылка	- Ссылка на элемент ПВХ.
//
// Возвращаемое значение:
//	Тип	- Тип значения элемента ПВХ.
//
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции // ТипПВХ()

&НаКлиенте
// Процедура - обработчик выбора партнера - владельца.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Владелец контактных лиц.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПартнераИсточника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	ПараметрыФормы	= Новый Структура("Отбор", Новый Структура("Владелец", РезультатЗакрытия));
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, ДополнительныеПараметры.Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // ОбработкаВыбораПартнераИсточника()

&НаСервере
// Процедура выполняет запись первичного интереса.
//
// Параметры:
//	ТекущийОбъект	- ДокументСсылка	- Текущий объект.
//
Процедура ЗаписатьПервичныйИнтерес()
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ИнтересОбъект.Дата);
		НаборЗаписей.Отбор.Сделка.Установить(ИнтересОбъект.Ссылка);
		НаборЗаписей.Записать();
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
			Если (НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				И ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))
				ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
				Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ИсточникиПервичногоИнтереса.Период КАК Период
				|ИЗ
				|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
				|ГДЕ
				|	ИсточникиПервичногоИнтереса.Сделка = &Сделка
				|	И ИсточникиПервичногоИнтереса.Партнер = &Партнер
				|");
				Запрос.УстановитьПараметр("Сделка", ИнтересОбъект.Ссылка);
				Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
					Запрос.УстановитьПараметр("Партнер", ИнтересОбъект.Партнер);
				Иначе
					Запрос.УстановитьПараметр("Партнер", ИнтересОбъект.ПотенциальныйКлиент);
				КонецЕсли;	
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Период = Выборка.Период;
					МенеджерЗаписи.Сделка = ИнтересОбъект.Ссылка;
					Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
						МенеджерЗаписи.Партнер = ИнтересОбъект.Партнер;
					Иначе
						МенеджерЗаписи.Партнер = ИнтересОбъект.ПотенциальныйКлиент;
					КонецЕсли;	
					МенеджерЗаписи.Удалить();
				КонецЦикла;
				Запись = НаборЗаписей.Добавить();
				Запись.Период						= ИнтересОбъект.Дата;
				Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
					Запись.Партнер					= ИнтересОбъект.Партнер;
				Иначе
					Запись.Партнер					= ИнтересОбъект.ПотенциальныйКлиент;
				КонецЕсли;	
				Запись.Сделка						= ИнтересОбъект.Ссылка;
				Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
				Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
			КонецЕсли;
		КонецЕсли;
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры // ЗаписатьПервичныйИнтерес()

&НаСервере
// Процедура выполняет чтение сохраненных значений первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	// Определяем канал и источник первичного интереса.
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ ИнтересОбъект.Ссылка.Пустая() Тогда
		 	ИнтересПервичный = Неопределено;
			Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
				ИнтересПервичный = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(ИнтересОбъект.Дата, ИнтересОбъект.Ссылка, ИнтересОбъект.Партнер);
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(ИнтересПервичный) И ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент) Тогда
				ИнтересПервичный = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(ИнтересОбъект.Дата, ИнтересОбъект.Ссылка, ИнтересОбъект.ПотенциальныйКлиент);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ИнтересПервичный) Тогда
				//Если ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
					КаналПервичногоИнтереса    = ИнтересПервичный.КаналПервичногоИнтереса;
					ИсточникПервичногоИнтереса = ИнтересПервичный.ИсточникПервичногоИнтереса;
				//КонецЕсли;
			КонецЕсли;	
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса);
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ИнтересОбъект.Завершен Тогда
		Если ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
			Если НЕ ЗначениеЗаполнено(ИнтересОбъект.КонтактноеЛицо) Тогда
				Элементы.ИнтересОбъектКонтактноеЛицо.Видимость = Истина;
				Элементы.ИнтересОбъектКонтактноеЛицо.АвтоОтметкаНезаполненного = Истина;
				Элементы.ИнтересОбъектКонтактноеЛицо.ОтметкаНезаполненного = Истина;
			КонецЕсли;	
		ИначеЕсли НЕ ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент) Тогда
			Элементы.ИнтересОбъектПотенциальныйКлиент.Видимость = Истина;
			Элементы.ИнтересОбъектПотенциальныйКлиент.АвтоОтметкаНезаполненного = Истина;
			Элементы.ИнтересОбъектПотенциальныйКлиент.ОтметкаНезаполненного = Истина;
			Элементы.ГруппаПотенциальныйКлиент.Видимость = Истина;
			Элементы.ГруппаПотенциальныйКлиент.ТолькоПросмотр = Ложь;
			Элементы.СоздатьНовогоКлиента.Видимость = Ложь;
		КонецЕсли;	
		Если НЕ ((ИнтересОбъект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ПервичныйИнтерес"))
			//ИЛИ (ИнтересОбъект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ВыявлениеПотребностей"))
			ИЛИ (ИнтересОбъект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ИнтересПотерян"))) Тогда
			Если ЗначениеЗаполнено(ИнтересОбъект.ПотенциальныйКлиент) И НЕ ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
				Элементы.ГруппаПотенциальныйКлиент.Видимость = Истина;
			Иначе
				Если НЕ ЗначениеЗаполнено(ИнтересОбъект.Партнер) Тогда
					Элементы.ИнтересОбъектПартнер.Видимость = Истина;
					Элементы.ИнтересОбъектПартнер.АвтоОтметкаНезаполненного = Истина;
					Элементы.ИнтересОбъектПартнер.ОтметкаНезаполненного = Истина;
				КонецЕсли;	
				Если НЕ ЗначениеЗаполнено(ИнтересОбъект.КонтактноеЛицо) Тогда
					Элементы.ИнтересОбъектКонтактноеЛицо.Видимость = Истина;
					Элементы.ИнтересОбъектКонтактноеЛицо.АвтоОтметкаНезаполненного = Истина;
					Элементы.ИнтересОбъектКонтактноеЛицо.ОтметкаНезаполненного = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗаполнятьПервичныйИнтерес Тогда
			ПолучитьПредыдущийПервичныйИнтересПоПартнеру(Дата(1,1,1));			
			Актуальность = Ложь;
			ПредыдущийИсточник = Неопределено;
			Попытка
				ПредыдущийИсточник = ПервичныйИнтерес.Получить(0);
			Исключение КонецПопытки;
			Если ПредыдущийИсточник <> Неопределено Тогда
			
				Актуальность = ПредыдущийИсточник.Актуальность;
			
			КонецЕсли;
			Если НЕ Актуальность Тогда
				Если НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
					Элементы.КаналПервичногоИнтереса.Видимость = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) И НЕ (ЗначениеЗаполнено(КаналПервичногоИнтереса) И (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))) Тогда
					Элементы.ИсточникПервичногоИнтереса.Видимость = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДоступностьПервичногоИнтереса();
	
КонецПроцедуры // НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()

&НаКлиенте
Процедура СостояниеИнтересаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОП = Новый ОписаниеОповещения("ОбработкаВыбораСостоянияИнтереса", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оп, СписокСостояний, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСостоянияИнтереса(Результат, Дополнительно) Экспорт
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Структура") Тогда
			СостояниеИнтересаПредставление	= Результат.Представление;
			СостояниеИнтересаУстановить		= Результат.Значение.Состояние;
			Этап							= Результат.Значение.Этап;
			ВариантВыполнения				= Результат.Значение.ВариантВыполнения;
			ЭтоПереход						= Результат.Значение.ЭтоПереход;
		Иначе
			СостояниеИнтересаПредставление	= Строка(Результат.Значение);
			СостояниеИнтересаУстановить		= Результат.Значение;
		КонецЕсли;
		
		ВидНовогоВзаимодействия = Неопределено;
		ЗаполнитьСписокВыбораВидВзаимодействий();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаНовогоВзаимодействияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура();
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияОбработкаВыбора(Объект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры
